{
  "metadata": {
    "timestamp": 1736709796739,
    "page": 248,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Celtoys/Remotery",
      "stars": 3169,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0966796875,
          "content": "BasedOnStyle: Microsoft\n\nPointerAlignment: Left\n\nIndentCaseLabels: true\n\nAlignEscapedNewlines: Left"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": "build/**\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.904296875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 11.0283203125,
          "content": "Remotery\n--------\n\n[![Build](https://github.com/Celtoys/Remotery/actions/workflows/build.yml/badge.svg?branch=main)](https://github.com/Celtoys/Remotery/actions/workflows/build.yml)\n\nA realtime CPU/GPU profiler hosted in a single C file with a viewer that runs in a web browser.\n\n![RemoteryNew](https://github.com/Celtoys/Remotery/assets/1532903/bc5117f6-0f1e-438c-a096-67c8ff7747e7)\n\n\nFeatures:\n\n* Lightweight instrumentation of multiple threads running on the CPU and GPU.\n* Web viewer that runs in Chrome, Firefox and Safari; on Desktops, Mobiles or Tablets.\n* GPU UI rendering, bypassing the DOM completely, for real-time 60hz viewer updates at 10,000x the performance.\n* Automatic thread sampler that tells you what processor cores your threads are running on without requiring Administrator privileges.\n* Drop saved traces onto the Remotery window to load historical runs for inspection.\n* Console output for logging text.\n* Console input for sending commands to your game.\n* A Property API for recording named/typed values over time, alongside samples.\n* Profiles itself and shows how it's performing in the viewer.\n\nSupported Profiling Platforms:\n\n* Windows 7/8/10/11/UWP (Hololens), Linux, OSX, iOS, Android, Xbox One/Series, Free BSD.\n\nSupported GPU Profiling APIS:\n\n* D3D 11/12, OpenGL, CUDA, Metal, Vulkan.\n\nCompiling\n---------\n\n* Windows (MSVC) - add lib/Remotery.c and lib/Remotery.h to your program. Set include\n  directories to add Remotery/lib path. The required libraries (ws2_32.lib and winmm.lib) should be picked\n  up through the use of the `#pragma comment` directives in Remotery.c.\n\n* Windows (MINGW-64) - add lib/Remotery.c and lib/Remotery.h to your program. Set include\n  directories to add Remotery/lib path. You will need to link libws2_32.a and libwinmm.a yourself through your build system, as GCC (and therefore MINGW-64) do not support `#pragma comment` directives\n\n* Mac OS X (XCode) - simply add lib/Remotery.c, lib/Remotery.h and lib/Remotery.mm to your program.\n\n* Linux (GCC) - add the source in lib folder. Compilation of the code requires -pthreads for\n  library linkage. For example to compile the same run: cc lib/Remotery.c sample/sample.c\n  -I lib -pthread -lm\n\n* FreeBSD - the easiest way is to take a look at the official port\n  ([devel/remotery](https://www.freshports.org/devel/remotery/)) and modify the port's\n  Makefile if needed. There is also a package available via `pkg install remotery`.\n\n* Vulkan - Ensure your include directories are set such that the Vulkan headers can be\n  included with the statement: `#include <vulkan/vulkan.h>`. Currently the Vulkan implementation\n  requires either Vulkan 1.2+ with the `hostQueryReset` and `timelineSemaphore` features enabled,\n  or < 1.2 with the `VK_EXT_host_query_reset` and `VK_KHR_timeline_semaphore` extensions. The\n  extension `VK_EXT_calibrated_timestamps` (or `VK_KHR_calibrated_timestamps`) is also always required.\n\nYou can define some extra macros to modify what features are compiled into Remotery:\n\n    Macro               Default     Description\n\n    RMT_ENABLED         1           Disable this to not include any bits of Remotery in your build\n    RMT_USE_TINYCRT     0           Used by the Celtoys TinyCRT library (not released yet)\n    RMT_USE_CUDA        0           Assuming CUDA headers/libs are setup, allow CUDA profiling\n    RMT_USE_D3D11       0           Assuming Direct3D 11 headers/libs are setup, allow D3D11 GPU profiling\n    RMT_USE_D3D12       0           Allow D3D12 GPU profiling\n    RMT_USE_OPENGL      0           Allow OpenGL GPU profiling (dynamically links OpenGL libraries on available platforms)\n    RMT_USE_METAL       0           Allow Metal profiling of command buffers\n    RMT_USE_VULKAN      0           Allow Vulkan GPU profiling\n\n\nBasic Use\n---------\n\nSee the sample directory for further examples. A quick example:\n\n    int main()\n    {\n        // Create the main instance of Remotery.\n        // You need only do this once per program.\n        Remotery* rmt;\n        rmt_CreateGlobalInstance(&rmt);\n\n        // Explicit begin/end for C\n        {\n            rmt_BeginCPUSample(LogText, 0);\n            rmt_LogText(\"Time me, please!\");\n            rmt_EndCPUSample();\n        }\n\n        // Scoped begin/end for C++\n        {\n            rmt_ScopedCPUSample(LogText, 0);\n            rmt_LogText(\"Time me, too!\");\n        }\n\n        // Destroy the main instance of Remotery.\n        rmt_DestroyGlobalInstance(rmt);\n    }\n\n\nRunning the Viewer\n------------------\n\nDouble-click or launch `vis/index.html` from the browser.\n\n\nSampling CUDA GPU activity\n--------------------------\n\nRemotery allows for profiling multiple threads of CUDA execution using different asynchronous streams\nthat must all share the same context. After initialising both Remotery and CUDA you need to bind the\ntwo together using the call:\n\n    rmtCUDABind bind;\n    bind.context = m_Context;\n    bind.CtxSetCurrent = &cuCtxSetCurrent;\n    bind.CtxGetCurrent = &cuCtxGetCurrent;\n    bind.EventCreate = &cuEventCreate;\n    bind.EventDestroy = &cuEventDestroy;\n    bind.EventRecord = &cuEventRecord;\n    bind.EventQuery = &cuEventQuery;\n    bind.EventElapsedTime = &cuEventElapsedTime;\n    rmt_BindCUDA(&bind);\n\nExplicitly pointing to the CUDA interface allows Remotery to be included anywhere in your project without\nneed for you to link with the required CUDA libraries. After the bind completes you can safely sample any\nCUDA activity:\n\n    CUstream stream;\n\n    // Explicit begin/end for C\n    {\n        rmt_BeginCUDASample(UnscopedSample, stream);\n        // ... CUDA code ...\n        rmt_EndCUDASample(stream);\n    }\n\n    // Scoped begin/end for C++\n    {\n        rmt_ScopedCUDASample(ScopedSample, stream);\n        // ... CUDA code ...\n    }\n\nRemotery supports only one context for all threads and will use cuCtxGetCurrent and cuCtxSetCurrent to\nensure the current thread has the context you specify in rmtCUDABind.context.\n\n\nSampling Direct3D 11 GPU activity\n---------------------------------\n\nRemotery allows sampling of D3D11 GPU activity on multiple devices on multiple threads. After initialising Remotery, you need to bind it to D3D11 with a single call from the thread that owns the device context:\n\n    // Parameters are ID3D11Device* and ID3D11DeviceContext*\n    rmt_BindD3D11(d3d11_device, d3d11_context);\n\nSampling is then a simple case of:\n\n    // Explicit begin/end for C\n    {\n        rmt_BeginD3D11Sample(UnscopedSample);\n        // ... D3D code ...\n        rmt_EndD3D11Sample();\n    }\n\n    // Scoped begin/end for C++\n    {\n        rmt_ScopedD3D11Sample(ScopedSample);\n        // ... D3D code ...\n    }\n\nSubsequent sampling calls from the same thread will use that device/context combination. When you shutdown your D3D11 device and context, ensure you notify Remotery before shutting down Remotery itself:\n\n    rmt_UnbindD3D11();\n\n\nSampling OpenGL GPU activity\n----------------------------\n\nRemotery allows sampling of GPU activity on your main OpenGL context. After initialising Remotery, you need\nto bind it to OpenGL with the single call:\n\n    rmt_BindOpenGL();\n\nSampling is then a simple case of:\n\n    // Explicit begin/end for C\n    {\n        rmt_BeginOpenGLSample(UnscopedSample);\n        // ... OpenGL code ...\n        rmt_EndOpenGLSample();\n    }\n\n    // Scoped begin/end for C++\n    {\n        rmt_ScopedOpenGLSample(ScopedSample);\n        // ... OpenGL code ...\n    }\n\nSupport for multiple contexts can be added pretty easily if there is demand for the feature. When you shutdown\nyour OpenGL device and context, ensure you notify Remotery before shutting down Remotery itself:\n\n    rmt_UnbindOpenGL();\n\n\nSampling Metal GPU activity\n---------------------------\n\nRemotery can sample Metal command buffers issued to the GPU from multiple threads. As the Metal API does not\nsupport finer grained profiling, samples will return only the timing of the bound command buffer, irrespective\nof how many you issue. As such, make sure you bind and sample the command buffer for each call site:\n\n    rmt_BindMetal(mtl_command_buffer);\n    rmt_ScopedMetalSample(command_buffer_name);\n\nThe C API supports begin/end also:\n\n    rmt_BindMetal(mtl_command_buffer);\n    rmt_BeginMetalSample(command_buffer_name);\n    ...\n    rmt_EndMetalSample();\n\n\nSampling Vulkan GPU activity\n---------------------------\n\nRemotery can sample Vulkan command buffers issued to the GPU on multiple queues from multiple threads. Command buffers\nmust be submitted to the same queue as the samples are issued to. Multiple queues can be profiled by creating multiple\nVulkan bind objects.\n\n    rmtVulkanFunctions vulkan_funcs;\n    vulkan_funcs.vkGetPhysicalDeviceProperties = (void*)my_vulkan_instance_table->vkGetPhysicalDeviceProperties;\n    vulkan_funcs.vkQueueSubmit = (void*)my_vulkan_device_table->vkQueueSubmit;\n    // ... All other function pointers\n\n    // Parameters are VkInstance, VkPhysicalDevice, VkDevice, VkQueue, rmtVulkanFunctions*, rmtVulkanBind**\n    // NOTE: The Vulkan functions are copied internally and so do not have to be kept alive after this call.\n    rmtVulkanBind* vulkan_bind = NULL;\n    rmt_BindVulkan(instance, physical_device, device, queue, &vulkan_funcs, &vulkan_bind);\n\nSampling is then a simple case of:\n\n    // Explicit begin/end for C\n    {\n        rmt_BeginVulkanSample(vulkan_bind, command_buffer, UnscopedSample);\n        // ... Vulkan code ...\n        rmt_EndVulkanSample();\n    }\n\n    // Scoped begin/end for C++\n    {\n        rmt_ScopedVulkanSample(vulkan_bind, command_buffer, ScopedSample);\n        // ... Vulkan code ...\n    }\n\nNOTE: Vulkan sampling on Apple platforms via MoltenVK must be done with caution. Metal doesn't natively support timestamps\ninside of render or compute passes, so MoltenVK simply reports all timestamps inside those scopes as the begin/end time of\nthe entire render pass!\n\nSampling calls using the same `vulkan_bind` object measure use the device and queue specified when the bind was created.\nOnce per frame you must call `rmt_MarkFrame()` to gather GPU timestamps on the CPU.\n\n    // End of frame, possibly after calling vkPresentKHR or at the very beginning of the frame\n    rmt_MarkFrame();\n\nBefore you destroy your Vulkan device and queue you can manually clean up resources by calling `rmt_UnbindVulkan`, though this is\ndone automatically by `rmt_DestroyGlobalInstance` as well for all `rmt_BindVulkan` objects:\n\n    rmt_UnbindVulkan(vulkan_bind);\n\n\nApplying Configuration Settings\n-------------------------------\n\nBefore creating your Remotery instance, you can configure its behaviour by retrieving its settings object:\n\n    rmtSettings* settings = rmt_Settings();\n\nSome important settings are:\n\n    // Redirect any Remotery allocations to your own malloc/free, with an additional context pointer\n    // that gets passed to your callbacks.\n    settings->malloc;\n    settings->free;\n    settings->mm_context;\n\n    // Specify an input handler that receives text input from the Remotery console, with an additional\n    // context pointer that gets passed to your callback.\n    // The handler will be called from the Remotery thread so synchronization with a mutex or atomics\n    // might be needed to avoid race conditions with your threads.\n    settings->input_handler;\n    settings->input_handler_context;\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 164.3603515625,
          "content": null
        },
        {
          "name": "vis",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}