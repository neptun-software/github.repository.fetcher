{
  "metadata": {
    "timestamp": 1736710109073,
    "page": 738,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pmwkaa/sophia",
      "stars": 1861,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3369140625,
          "content": "*.o\n*.so.2.2\n*.so.2.2.0\n*.so\n*.mk\nout\n*.a\ngyp-mac-tool\nsophia.Makefile\n.*.sw[op]\ntest/_test_sophia\ntest/_test_backup\ntest/_test_log\ntest/_test_db\ntest/sophia-test\ntest/sophia-prof\nsophia.h\nsophia.c\nexample/crud\nexample/multipart\nexample/upsert\nexample/transaction\nexample/cursor\nexample/comparator\ndocumentation/_book\ndocumentation/node_modules\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.44921875,
          "content": "language: c\nbefore_install:\n  - sudo pip install cpp-coveralls\n  # backtrace support\n  - sudo apt-get update\n  - sudo apt-get -y install gdb\nafter_success:\n  - coveralls -r . -b .  --exclude test --exclude sophia/std/ss_zstdfilter.c --exclude sophia/std/ss_lz4filter.c --exclude sophia/std/ss_crc.c\ncompiler:\n  - clang\n  - gcc\nbranches:\n  only:\n    - master\nscript:\n  - make ENABLE_COVERAGE=1\n  - cd test\n  - make ENABLE_COVERAGE=1\n  - make test_gdb\n  - cd ..\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2314453125,
          "content": "\nCopyright (C) Dmitry Simonenko (pmwkaa@gmail.com)\n\nRedistribution and use in source and binary forms, with or\nwithout modification, are permitted provided that the following\nconditions are met:\n\n1. Redistributions of source code must retain the above\n   copyright notice, this list of conditions and the\n   following disclaimer.\n\n2. Redistributions in binary form must reproduce the above\n   copyright notice, this list of conditions and the following\n   disclaimer in the documentation and/or other materials\n   provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY AUTHORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\nAUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\nBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.865234375,
          "content": "\n<p align=\"center\">\n\t<a href=\"http://sphia.org\"><img src=\"http://sophia.systems/sophia.png\" /></a><br>\n</p>\n<br>\n\n[Sophia](http://sophia.systems) is advanced transactional [MVCC](http://en.wikipedia.org/wiki/Multiversion_concurrency_control)\nkey-value/row storage library.\n\n**How does it differ from other storages?**\n\nSophia is RAM-Disk hybrid storage. It is designed to provide best possible on-disk performance without degradation\nin time. It has guaranteed *O(1)* worst case complexity for read, write and range scan operations.\n\nIt adopts to expected write rate, total capacity and cache size.\nMemory requirements for common HDD and Flash drives can be seen [Here](http://sophia.systems/v2.2/admin/memory_requirements.html).\n\n**What is it good for?**\n\nFor server environment, which requires\nlowest latency write and read, predictable behaviour, optimized storage schema and transaction guarantees.\nIt can efficiently work with large volumes of ordered data, such as a time-series,\nanalytics, events, logs, counters, metrics, full-text search, common key-value, etc.\n\n**Features**\n\n* Full ACID compliancy\n* MVCC engine\n* Optimistic, non-blocking concurrency with N-writers and M-readers\n* Pure Append-Only\n* Unique data storage architecture\n* Fast: O(1) worst for read, write and range scan operations\n* Multi-threaded compaction\n* Multi-databases support (sharing a single write-ahead log)\n* Multi-Statement and Single-Statement Transactions (cross-database)\n* Serialized Snapshot Isolation (SSI)\n* Optimized storage schema (numeric types has zero-cost storage)\n* Can be used to build Secondary Indexes\n* Upsert (fast write-only 'update or insert' operation)\n* Consistent Cursors\n* Prefix search\n* Automatic garbage-collection\n* Automatic key-expire\n* Hot Backup\n* Compression (no fixed-size blocks, no-holes, supported: lz4, zstd)\n* Direct IO support\n* Use mmap or pread access methods\n* Simple and easy to use (minimalistic API, FFI-friendly, amalgamated)\n* Implemented as small *C-written* library with zero dependencies\n* Carefully tested\n* Open Source Software, BSD\n\n**Support**\n\nSophia [Documentation](http://sophia.systems/v2.2/index.html) and [Bindings](http://sophia.systems/drivers.html)\nfor the most common languages are available on the [website](http://sophia.systems).\n\nPlease use Official Sophia [Google Group](http://groups.google.com/group/sophia-database) or\n[StackOverflow](http://stackoverflow.com/tags/sophia) to ask any general questions.<br>\nMore information is available [Here](http://sophia.systems/support.html).\n<br><br>\n\n<a href=\"https://travis-ci.org/pmwkaa/sophia\"><img src=\"https://travis-ci.org/pmwkaa/sophia.svg?branch=master\" /></a>\n<a href=\"https://scan.coverity.com/projects/5109\"><img src=\"https://scan.coverity.com/projects/5109/badge.svg\" /></a>\n<a href=\"https://coveralls.io/r/pmwkaa/sophia?branch=master\"><img src=\"https://coveralls.io/repos/pmwkaa/sophia/badge.svg?branch=master\" /></a>\n"
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 1.638671875,
          "content": "\n# sophia makefile\n#\n\nCC ?= cc\n\nifdef ENABLE_COVERAGE\nCFLAGS_COVERAGE = --coverage \nelse\nCFLAGS_COVERAGE =\nendif\n\nCFLAGS_DEBUG   = -DSS_INJECTION_ENABLE -g\nCFLAGS_OPT     = -O2\nCFLAGS_STRICT  = -std=c99 -pedantic -Wextra -Wall\nCFLAGS_MISC    = -Wno-unused-function -fPIC -fno-stack-protector -fvisibility=hidden\nSOPHIA_CFLAGS  = $(CFLAGS_DEBUG) \\\n                 $(CFLAGS_OPT) \\\n                 $(CFLAGS_STRICT) \\\n                 $(CFLAGS_COVERAGE) \\\n                 $(CFLAGS_MISC) \\\n                 $(CFLAGS)\nSOPHIA_LDFLAGS = -shared $(LDFLAGS)\nSOPHIA_DEP     = $(wildcard sophia/*/*) makefile\nSOPHIA_VMAJOR  = 2\nSOPHIA_VMINOR  = 2\nSOPHIA_BUILD   = `git rev-parse --short HEAD`\n\nall: banner static dynamic\nbanner:\n\t@echo \"SOPHIA $(SOPHIA_VMAJOR).$(SOPHIA_VMINOR) (git: $(SOPHIA_BUILD))\"\n\t@echo\nsophia.c: $(SOPHIA_DEP)\n\t@echo sophia/build\n\t@sh sophia/build sophia $@\nsophia.h: sophia/sophia/sophia.h\n\t@cp $< .\nsophia.o: sophia.c sophia.h\n\t@echo \"$(CC) sophia.c -c $(CFLAGS_DEBUG) $(CFLAGS_COVERAGE)$(CFLAGS_OPT) $(CFLAGS_STRICT)\"\n\t@$(CC) $(SOPHIA_CFLAGS) -c sophia.c -o sophia.o\n\t@echo\nlibsophia.a: sophia.o\n\t@ar crs libsophia.a sophia.o\nlibsophia.so: sophia.o\n\t@$(CC) sophia.o $(SOPHIA_LDFLAGS) -o libsophia.so.2.2.0\n\t@ln -sf libsophia.so.2.2.0 libsophia.so.2.2\n\t@ln -sf libsophia.so.2.2.0 libsophia.so\nifeq ($(shell uname), Linux)\n\t@strip --strip-unneeded libsophia.so.2.2.0\nendif\nifeq ($(shell uname), Darwin)\n\t@strip -u -r -x libsophia.so.2.2.0\nendif\nstatic: libsophia.a\ndynamic: libsophia.so\nclean:\n\t@rm -f sophia.c sophia.h sophia.o\n\t@rm -f libsophia.a\n\t@rm -f libsophia.so\n\t@rm -f libsophia.so.2.2\n\t@rm -f libsophia.so.2.2.0\n\n.PHONY: all banner static dynamic clean\n"
        },
        {
          "name": "sophia",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}