{
  "metadata": {
    "timestamp": 1736710116926,
    "page": 749,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "free-audio/clap",
      "stars": 1851,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.8291015625,
          "content": "---\nLanguage:        Cpp\n# BasedOnStyle:  LLVM\nAccessModifierOffset: -3\nAlignAfterOpenBracket: Align\nAlignConsecutiveMacros: false\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: true\nAlignEscapedNewlines: Right\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: true\nAllowAllConstructorInitializersOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterCaseLabel:  false\n  AfterClass:      true\n  AfterControlStatement: true\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  true\n  AfterObjCDeclaration: true\n  AfterStruct:     true\n  AfterUnion:      true\n  AfterExternBlock: true\n  BeforeCatch:     true\n  BeforeElse:      true\n  IndentBraces:    false\n  SplitEmptyFunction: false\n  SplitEmptyRecord: false\n  SplitEmptyNamespace: false\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     100\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: true\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 3\nContinuationIndentWidth: 3\nCpp11BracedListStyle: true\nDeriveLineEnding: false\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\nIncludeIsMainRegex: '(Test)?$'\nIncludeIsMainSourceRegex: ''\nIndentCaseLabels: false\nIndentGotoLabels: true\nIndentPPDirectives: AfterHash\nIndentWidth:     3\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: All\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 3\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    false\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCpp11BracedList: false\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nSpaceBeforeSquareBrackets: false\nStandard:        Latest\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        8\nUseCRLF:         false\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5859375,
          "content": "# Prerequisites\n*.d\n\n# Compiled Object files\n*.slo\n*.lo\n*.o\n*.obj\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Compiled Dynamic libraries\n*.so\n*.dylib\n*.dll\n\n# Fortran module files\n*.mod\n*.smod\n\n# Compiled Static libraries\n*.lai\n*.la\n*.a\n*.lib\n\n# Executables\n*.exe\n*.out\n*.app\n\n# Visual Studio\nobj/\n*.sln\n*.vcxproj\n*.vcxproj.filters\n*.vcxproj.user\n.vs/\npackages/\ntarget/\n*.pdb\npackages.config\nCMakeSettings.json\n.vscode\n.cache\n\n# C++ IDE helpers\ncompile_commands.json\n\n# IntelliJ IDEA\n.idea\n\n# CMake common patterns\nbuild*/\ncmake-build*/\n\n# A place to store stuff and get it git ignored\nignore/*\n\n.DS_Store\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.2412109375,
          "content": "cmake_minimum_required(VERSION 3.17)\nenable_testing()\n\n# Extract the version from header file\nfile(READ \"include/clap/version.h\" clap_version_header)\nstring(REGEX MATCH \"CLAP_VERSION_MAJOR ([0-9]+)\" _ ${clap_version_header})\nset(CLAP_VERSION_MAJOR ${CMAKE_MATCH_1})\nstring(REGEX MATCH \"CLAP_VERSION_MINOR ([0-9]+)\" _ ${clap_version_header})\nset(CLAP_VERSION_MINOR ${CMAKE_MATCH_1})\nstring(REGEX MATCH \"CLAP_VERSION_REVISION ([0-9]+)\" _ ${clap_version_header})\nset(CLAP_VERSION_REVISION ${CMAKE_MATCH_1})\n\nmessage(STATUS \"CLAP version: ${CLAP_VERSION_MAJOR}.${CLAP_VERSION_MINOR}.${CLAP_VERSION_REVISION}\")\n\nproject(CLAP LANGUAGES C CXX VERSION ${CLAP_VERSION_MAJOR}.${CLAP_VERSION_MINOR}.${CLAP_VERSION_REVISION})\n\noption(CLAP_BUILD_TESTS \"Should CLAP build tests and the like?\" OFF)\n\n# If you use clap as a submodule of your plugin you need some interface projects\n# to allow you to link\nadd_library(clap INTERFACE)\ntarget_include_directories(clap INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\n# `clap-core` is deprecated, please `clap` instead.\nadd_library(clap-core ALIAS clap)\n\ninclude(GNUInstallDirs)\ninstall(DIRECTORY \"include/clap\" DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\ninstall(TARGETS clap EXPORT clap INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\ninstall(EXPORT clap DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/clap\" FILE \"clap-config.cmake\")\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n    \"${CMAKE_CURRENT_BINARY_DIR}/clap-config-version.cmake\"\n    VERSION \"${PROJECT_VERSION}\"\n    COMPATIBILITY AnyNewerVersion)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/clap-config-version.cmake\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/clap\")\n\n# In addition to the above generated `clap-config.cmake` file, we'll also\n# provide a pkg-config file to make it easier to consume this library in a\n# portable way\nconfigure_file(clap.pc.in \"${CMAKE_CURRENT_BINARY_DIR}/clap.pc\" @ONLY)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/clap.pc\" DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n\n# clap-tests should always be available, to avoid build failing here and there\n# because the target doesn't exists\nadd_custom_target(clap-tests)\n\nif (${CLAP_BUILD_TESTS})\n    message(STATUS \"Including CLAP tests, compile tests, and versions\")\n    include(CheckIncludeFile)\n\n    macro(clap_compile_cpp SUFFIX EXT STDC STDCPP)\n        add_executable(clap-compile-${SUFFIX} EXCLUDE_FROM_ALL src/main.${EXT})\n        target_link_libraries(clap-compile-${SUFFIX} clap)\n        set_target_properties(clap-compile-${SUFFIX} PROPERTIES\n            C_STANDARD ${STDC}\n            CXX_STANDARD ${STDCPP})\n        add_test(NAME test-clap-compile-${SUFFIX} COMMAND clap-compile-${SUFFIX})\n        add_dependencies(clap-tests clap-compile-${SUFFIX})\n\n        if (${EXT} STREQUAL \"cc\")\n            target_compile_definitions(clap-compile-${SUFFIX} PRIVATE CLAP_COMPILE_TEST_CXX_VERSION=${STDCPP})\n        endif()\n\n        if (${CMAKE_C_COMPILER_ID} STREQUAL \"GNU\" OR ${CMAKE_C_COMPILER_ID} STREQUAL \"Clang\")\n            target_compile_options(clap-compile-${SUFFIX} PRIVATE -Wall -Wextra -pedantic)\n        endif()\n\n        if (${CMAKE_C_COMPILER_ID} STREQUAL \"Clang\")\n            target_compile_options(clap-compile-${SUFFIX} PRIVATE -Werror=pragma-pack)\n        endif()\n    endmacro()\n\n    clap_compile_cpp(c11    c 11 11)\n    clap_compile_cpp(cpp11 cc 11 11)\n    clap_compile_cpp(cpp14 cc 11 14)\n    if(${CMAKE_VERSION} VERSION_LESS \"3.21\")\n       message(STATUS \"Skipping C17 tests due to older CMAKE_VERSION ${CMAKE_VERSION}\")\n    else()\n      clap_compile_cpp(c17    c 17 17)\n    endif()\n    clap_compile_cpp(cpp17 cc 17 17)\n    clap_compile_cpp(cpp20 cc 17 20)\n\n    check_include_file(threads.h CLAP_HAS_THREADS_H)\n\n    add_library(clap-plugin-template MODULE EXCLUDE_FROM_ALL src/plugin-template.c)\n    target_link_libraries(clap-plugin-template PRIVATE clap)\n    set_target_properties(clap-plugin-template PROPERTIES C_STANDARD 11)\n    add_dependencies(clap-tests clap-plugin-template)\n\n    if(CLAP_HAS_THREADS_H)\n        target_compile_definitions(clap-plugin-template PRIVATE CLAP_HAS_THREADS_H)\n    endif()\n\n    if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n        target_link_libraries(clap-plugin-template PRIVATE -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/src/linux-my_plug.version)\n        target_link_libraries(clap-plugin-template PRIVATE -Wl,-z,defs)\n        set_target_properties(clap-plugin-template PROPERTIES SUFFIX \".clap\" PREFIX \"\")\n    elseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n        target_link_options(clap-plugin-template PRIVATE -exported_symbols_list ${CMAKE_CURRENT_SOURCE_DIR}/src/macos-symbols.txt)\n\n        set_target_properties(clap-plugin-template PROPERTIES\n                    BUNDLE True\n                    BUNDLE_EXTENSION clap\n                    MACOSX_BUNDLE_GUI_IDENTIFIER com.my_company.my_plug\n                    MACOSX_BUNDLE_BUNDLE_NAME my_plug\n                    MACOSX_BUNDLE_BUNDLE_VERSION \"1\"\n                    MACOSX_BUNDLE_SHORT_VERSION_STRING \"1\"\n                    MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/src/plugins.plist.in\n                    )\n    elseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n        set_target_properties(clap-plugin-template PROPERTIES SUFFIX \".clap\" PREFIX \"\")\n    endif()\nendif()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 1.83984375,
          "content": "{\n  \"version\": 3,\n  \"cmakeMinimumRequired\": {\n    \"major\": 3,\n    \"minor\": 17,\n    \"patch\": 0\n  },\n  \"configurePresets\": [\n    {\n      \"name\": \"ninja\",\n      \"displayName\": \"Ninja\",\n      \"description\": \"Configure and generate Ninja project files for all configurations\",\n      \"binaryDir\": \"${sourceDir}/builds/${presetName}\",\n      \"generator\": \"Ninja Multi-Config\",\n      \"cacheVariables\": {\n        \"CMAKE_EXPORT_COMPILE_COMMANDS\": {\n          \"type\": \"boolean\",\n          \"value\": true\n        },\n        \"CLAP_BUILD_TESTS\": {\n          \"type\": \"boolean\",\n          \"value\": true\n        }\n      }\n    },\n    {\n      \"name\": \"msvc\",\n      \"displayName\": \"MSVC\",\n      \"description\": \"Configure and generate MSVC project files for all configurations\",\n      \"binaryDir\": \"${sourceDir}/builds/${presetName}\",\n      \"generator\": \"Visual Studio 17 2022\",\n      \"cacheVariables\": {\n        \"CMAKE_EXPORT_COMPILE_COMMANDS\": {\n          \"type\": \"boolean\",\n          \"value\": true\n        },\n        \"CLAP_BUILD_TESTS\": {\n          \"type\": \"boolean\",\n          \"value\": true\n        }\n      }\n    }\n  ],\n  \"buildPresets\": [\n    {\n      \"name\": \"ninja-release\",\n      \"configurePreset\": \"ninja\",\n      \"displayName\": \"Build ninja-release\",\n      \"description\": \"Build ninja Release configuration\",\n      \"configuration\": \"RelWithDebInfo\",\n      \"targets\": [\"clap-tests\"]\n    },\n    {\n      \"name\": \"msvc-release\",\n      \"configurePreset\": \"msvc\",\n      \"displayName\": \"Build msvc-release\",\n      \"description\": \"Build msvc Release configuration\",\n      \"configuration\": \"RelWithDebInfo\",\n      \"targets\": [\"clap-tests\"]\n    }\n  ],\n  \"testPresets\": [\n    {\n      \"name\": \"ninja-release\",\n      \"configurePreset\": \"ninja\",\n      \"configuration\": \"RelWithDebInfo\"\n    },\n    {\n      \"name\": \"msvc-release\",\n      \"configurePreset\": \"msvc\",\n      \"configuration\": \"RelWithDebInfo\"\n    }\n  ]\n}"
        },
        {
          "name": "ChangeLog.md",
          "type": "blob",
          "size": 14.685546875,
          "content": "# Changes in 1.2.2\n\n* [thread-check.h](include/clap/ext/thread-check.h): expand the thread-doc to clarify and expand realtime\n* [latency.h](include/clap/ext/latency.h): adjust latency extension requirements\n* [undo.h](include/clap/ext/draft/undo.h): re-design the interface\n  * the plugin interfaces have been separated into 2 independent ones\n  * the plugin interfaces are optional\n  * simplification of the design\n\n# Changes in 1.2.1\n\n## New draft extensions\n\n* [undo.h](include/clap/ext/draft/undo.h): shared undo stack for the host and plugin.\n\n## Documentation\n\n* [events.h](include/clap/events.h): clarification for note on events.\n\n# Changes in 1.2.0\n\n## New conventions\n\n* [extension-id](conventions/extension-id.md): introduce some rules about extension ID naming.\n\n## Stabilize extensions\n\n* `CLAP_EXT_AMBISONIC`\n* `CLAP_EXT_AUDIO_PORTS_ACTIVATION`\n* `CLAP_EXT_CONFIGURABLE_AUDIO_PORTS`\n* `CLAP_EXT_CONTEXT_MENU`\n* `CLAP_EXT_PARAM_INDICATION`\n* `CLAP_EXT_PRESET_LOAD`\n* `CLAP_EXT_REMOTE_CONTROLS`\n* `CLAP_EXT_STATE_CONTEXT`\n* `CLAP_EXT_SURROUND`\n* `CLAP_EXT_TRACK_INFO`\n\n### Notes regarding extension ID change after draft stabilization\n\nWe changed the extension ID in the process of stabilization which leads to a **break**.\n\nTo mitigate this transition, we've provided compatibility extension IDs which can be used to match and use the latest draft extensions as they are 100% compatible.\n\nFor example, `CLAP_EXT_CONTEXT_MENU` for the stable ID and `CLAP_EXT_CONTEXT_MENU_COMPAT` for the draft ID.\n\nAs you can see in [extension-id](conventions/extension-id.md), we introduced some rules, so this kind of break won't happen again.\n\nWe may decide to remove the `*_COMPAT` IDs in the future once their usage becomes antiquated.\n\n## Removed draft extensions\n\n* `CLAP_EXT_CHECK_FOR_UPDATE` wasn't used and it's design needed more thought.\n* `CLAP_EXT_MIDI_MAPPING` wasn't used. MIDI2 seems to do it better, and the interface wasn't satisfying.\n* `CLAP_EXT_CV` the interface wasn't satisfying.\n\n## Stabilize factory\n\n* `CLAP_PRESET_DISCOVERY_FACTORY_ID`\n\nNote: we kept the last draft factory ID in order to not break plugins already using it.\n\n## Plugin State Converter\n\n* Introduction of a new factory which provides a plugin state convertion mechanism.\n\n## Refactoring\n\n* `clap_plugin_id_t` was renamed to `clap_universal_plugin_id_t` to make it clear that it can describe more than just a CLAP plugin ID.\n* `clap_timestamp_t` was renamed to `clap_timestamp` to be consistent with other types, like e.g. `clap_id`. Also it was moved to a separate header as `CLAP_PRESET_DISCOVERY_FACTORY_ID` was stabilized.\n\n## Documentation\n\n* [events.h](include/clap/events.h): Clarify how \"Port Channel Key NoteID\" matching works\n* [events.h](include/clap/events.h): Clarify how `clap_event_note` fields map to MIDI, Host, etc...\n* [events.h](include/clap/events.h): Expand clap note expression documentation\n* [plugin.h](include/clap/plugin.h): Style cleanup\n* [params.h](include/clap/ext/params.h): Fix incorrect function name reference\n* [latency.h](include/clap/ext/latency.h): Require the plugin to be activated to get the latency and clarify that the latency can only be fetched when the plugin is activated\n\n## Plugin Template\n\n* [plugin-template.c](src/plugin-template.c): implement thread-safe plugin entry init counter\n\n## Organization\n\n* `clap.h` no longer includes headers from `ext/draft` or `factory/draft`. Draft extension and factory headers must now be explicitly included, either individually or via the `all.h` header.\n\n## Other changes\n\n* [voice-info.h](include/clap/ext/voice-info.h): Make the voice info id `CLAP_CONSTEXPR` like all other ids\n* [preset-load.h](include/clap/ext/preset-load.h): Make the preset load id and compat id `CLAP_CONSTEXPR` like all other ids\n\n# Changes in 1.1.10\n\n* [params.h](include/clap/ext/params.h): add `CLAP_PARAM_IS_ENUM` flag.\n* various documentation improvements:\n  * clarification on the return value of many functions\n  * typos\n\n# Changes in 1.1.9\n\n* [entry.h](include/clap/entry.h): clarify what the `plugin_path` is on macOS\n* [surround.h](include/clap/ext/draft/surround.h): simplify the design\n* [ambisonic.h](include/clap/ext/draft/ambisonic.h): simplify the design\n* [configurable-audio-ports.h](include/clap/ext/draft/configurable-audio-ports.h): simplify the design\n* [gui.h](include/clap/ext/gui.h): documentation clarifications\n* [entry.h](include/clap/entry.h): documentation clarifications\n* [audio-ports-activation.h](include/clap/ext/draft/audio-ports-activation.h): specify the sample size to be used when activating the audio port.\n\n# Changes in 1.1.8\n\n* [params.h](include/clap/ext/params.h): document how persisting parameter values between sessions should be implemented\n* [state.h](include/clap/ext/state.h): add basic documentation regarding what state should be saved and how plugins should interact with buffers\n* various documentation fixes (essentially typos)\n\n## Draft extensions\n\n* [extensible-audio-ports.h](include/clap/ext/draft/extensible-audio-ports.h): new extension which lets the host add ports to a plugin\n* [configurable-audio-ports.h](include/clap/ext/draft/configurable-audio-ports.h): new extension allowing the host to **push** an audio ports configuration request, resulting in a simpler workflow for surround host and plugins\n* [surround.h](include/clap/ext/draft/surround.h):\n  * remove `get_preferred_channel_map()` in favor of the push approach via [configurable-audio-ports.h](include/clap/ext/draft/configurable-audio-ports.h)\n  * remove `config_id` argument from `get_info()`\n* [ambisonic.h](include/clap/ext/draft/ambisonic.h): remove `config_id` argument from `get_info()`\n* [preset-load.h](include/clap/ext/draft/preset-load.h): use a location_kind + location approach instead of URI\n\n## Draft factories\n\n* [preset-discovery.h](include/clap/factory/draft/preset-discovery.h):\n  * use a location_kind + location approach instead of URI\n  * document which descriptor fields are optional\n  * allow optional preset names in the metadata for non-container presets\n\n# Changes in 1.1.7\n\n* Add a [factory](include/clap/factory) folder for better organization and move our factories there\n* [params.h](include/clap/ext/params.h): fix typos\n* CMake: disable C17 targets for CMake < 3.21\n* [plugin-features.h](include/clap/plugin-features.h): adds `note-detector` category for plugins which converts audio to notes\n\n## Draft extensions\n\n* [context-menu.h](include/clap/ext/draft/context-menu.h): add \"title\" menu entry\n* [preset-load.h](include/clap/ext/draft/preset-load.h): load from URI instead of path, making the extension more powerful\n* [remote-controls.h](include/clap/ext/draft/remote-controls.h): distinguish between device pages and preset pages\n* [audio-ports-activation.h](include/clap/ext/draft/audio-ports-activation.h): `set_active()` now returns bool instead of void, this helps catching problems earlier especially with invalid arguments\n* [audio-ports-config.h](include/clap/ext/audio-ports-config.h): add new draft extension: `clap_plugin_audio_ports_config_info` which lets the host query detailed port information in a given configuration.\n* [surround.h](include/clap/ext/draft/surround.h): add `config_id` parameter when fetching port info\n* [ambisonic.h](include/clap/ext/draft/ambisonic.h): add `config_id` parameter when fetching port info\n\n## Draft factories\n\n* [preset-discovery.h](include/clap/factory/draft/preset-discovery.h): new factory which allows the host to index the plugin presets which are stored on disk.\n\n# Changes in 1.1.6\n\n* [version.h](include/clap/version.h) `CLAP_VERSION_LT` was backwards (comparing current with arg\n  vs arg with current). Correct and enhance tests.\n\n# Changes in 1.1.5\n\n* [plugin.h](include/clap/plugin.h): clarify plugin state after init()\n* [plugin.h](include/clap/plugin.h): clarify when it is allowed to call get_extension()\n* [plugin.h](include/clap/plugin.h): advice for plugin id and version strings\n* [host.h](include/clap/host.h): clarify when it is allowed to call get_extension()\n* [CMakeLists.txt](CMakeLists.txt): the target `clap-test` now includes `clap-plugin-template`\n* Remove UTF-8 BOM from a few files\n* [plugin-template.c](src/plugin-template.c): add state impl and some comments\n* [audio-ports-activation.h](include/clap/ext/draft/audio-ports-activation.h): improved documentation\n* [version.h](include/clap/version.h):\n  * Add a CLAP_VERSION_GE(maj,min,rev), _EQ and _LT macro.\n  * Remove the uint32_t cast from CLAP_VERSION_MAJOR, _MINOR, and _REVISION macro, and introduce it to the CLAP_VERSION_INIT macro.\n  * If you rely on these macros being a uint32_t or parse this header using external software, this may be a breaking change.\n\n# Changes in 1.1.4\n\n* CMake: update some targets to link against `clap` instead of `clap-core`\n* [params.h](include/clap/ext/params.h): clarify parameter range change, fix documentation typos, add missing items\n* [plugin.h](include/clap/plugin.h): clarify data lifetime in `process()`\n* [audio-ports-config.h](include/clap/ext/audio-ports-config.h): clarify `select()`: if succeed, the host should rescan the audio ports\n\n## Draft extensions\n\n### New\n\n* [audio-ports-activation.h](include/clap/ext/draft/audio-ports-activation.h): new draft extension which allows a host to inform a plugin whether an audio port is an active port in the host audio context, and allow the host to respond accordingly\n* [context-menu.h](include/clap/ext/draft/context-menu.h): new draft extension which let the host and plugin exchange context menu entries and popup the menu\n* [param-indication.h](include/clap/ext/draft/param-indication.h): new draft extension which let the host inform the plugin that a parameter is currently mapped to a physical controller\n* [remote-controls.h](include/clap/ext/draft/remote-controls.h): new draft extension which replaces `quick-controls.h`\n* [resource-directory.h](include/clap/ext/draft/resource-directory.h): new draft extension which lets the plugin save resources in a directory provided by the host\n* [triggers.h](include/clap/ext/draft/triggers.h): new draft extension which exposes triggers to the host, triggers are data-less events\n\n### Improved\n\n* [track-info](include/clap/ext/draft/track-info.h): refine the draft extension\n\n### Removed\n\n* `file-reference.h`: removed in favor of [resource-directory.h](include/clap/ext/draft/resource-directory.h)\n* `quick-controls.h`: removed in favor of [remote-controls.h](include/clap/ext/draft/remote-controls.h)\n\n# Changes in 1.1.3\n\n* CMake: generate CMake and pkg-config package files on install\n* CMake: `clap-core` target is now deprecated, use `clap` target instead\n* [plugin.h](include/clap/plugin.h): make feature list on clap_plugin_descriptor_t const\n* [entry.h](include/clap/entry.h): fix bad location on windows: replaced `%CommonFilesFolder%/CLAP/` by `%COMMONPROGRAMFILES%\\CLAP`\n\n# Changes in 1.1.2\n\n* [macros.h](include/clap/private/macros.h): add `CLAP_ABI` which defines the calling convention and use it everywhere\n* [events.h](include/clap/events.h): clarify `clap_input_events.size()`\n* [check-for-update.h](include/clap/ext/draft/check-for-update.h): fix typedef\n* [file-reference.h](include/clap/ext/draft/file-reference.h): improve documentation\n* [params.h](include/clap/ext/params.h): clarify how the cookie works and add some notes about `flush()`\n* [process.h](include/clap/process.h): clarify how the audio buffer mapping works\n* [gui.h](include/clap/ext/gui.h): clarify `clap_plugin_gui.get_preferred_api()`\n* [plugin-factory.h](include/clap/plugin-factory.h): mention `clap_plugin_invalidation_factory` which can be use to invalidate cached entries\n\n# Changes in 1.1.1\n\n* [clap.h](include/clap/clap.h): missing include for [state-context.h](include/clap/ext/draft/state-context.h).\n\n# Changes in 1.1.0\n\n* [state-context.h](include/clap/ext/draft/state-context.h): save/load state for duplicate or preset.\n* [std.h](include/clap/private/std.h): fix compatibility with C++98.\n* [note-name.h](include/clap/ext/note-name.h): missing typedef `clap_plugin_note_name_t`.\n* [params.h](include/clap/ext/params.h): clarify `request_flush()` documentation.\n* [thread-check.h](include/clap/ext/thread-check.h): clarify documentation.\n* [voice-info.h](include/clap/ext/voice-info.h): promote `voice-info` out of draft.\n\n# Changes in 1.0.3\n\n* [plugin.h](include/clap/plugin.h): fix an inconsistency in `clap_plugin->destroy()` documentation:\n  it is now **required** to deactivate the plugin before destroying it.\n* [params.h](include/clap/ext/params.h): improve documentation for `clap_host_params->request_flush()`.\n* [entry.h](include/clap/entry.h): improve documentation regarding `init()`, `deinit()` and CLAP search path.\n* [gui.h](include/clap/gui.h): fix typo `clap_gui_resize_hints.preserve_aspect_ratio`\n* [plugin-template](src/plugin-template.c): missing impl of plugin destroy.\n* various documentation improvements\n\n# Changes in 1.0.2\n\n* CMake: add `CLAP_BUILD_TESTS` which enables the tests.\n* Fixes compilation for Visual Studio 2019 and GCC9.\n\n# Changes in 1.0.1\n\n* [gui.h](include/clap/ext/gui.h): fix doc: set_scale must be provided\n* [events.h](include/clap/events.h): remove `clap_event_type` which was never used\n* [draft/transport-control.h](include/clap/ext/draft/transport-control.h): rename from `CLAP_EXT_CV` to `CLAP_EXT_TRANSPORT_CONTROL`\n* [draft/tuning.h](include/clap/ext/draft/tuning.h): rename `clap_client_tuning` to `clap_plugin_tuning`\n* [macros.h](include/clap/private/macros.h): fix compatibility with C17\n\n# Changes in 1.0.0\n\n## New stable interfaces\n\n* [audio-ports-config.h](include/clap/ext/audio-ports-config.h)\n* [audio-ports.h](include/clap/ext/audio-ports.h)\n* [event-registry.h](include/clap/ext/event-registry.h)\n* [gui.h](include/clap/ext/gui.h)\n* [latency.h](include/clap/ext/latency.h)\n* [log.h](include/clap/ext/log.h)\n* [note-name.h](include/clap/ext/note-name.h)\n* [note-ports.h](include/clap/ext/note-ports.h)\n* [params.h](include/clap/ext/params.h)\n* [posix-fd-support.h](include/clap/ext/posix-fd-support.h)\n* [render.h](include/clap/ext/render.h)\n* [state.h](include/clap/ext/state.h)\n* [tail.h](include/clap/ext/tail.h)\n* [thread-check.h](include/clap/ext/thread-check.h)\n* [thread-pool.h](include/clap/ext/thread-pool.h)\n* [timer-support.h](include/clap/ext/time-support.h)\n\n## New draft interfaces\n\n* [ambisonic.h](include/clap/ext/draft/ambisonic.h)\n* [check-for-update.h](include/clap/ext/draft/check-for-update.h)\n* [cv.h](include/clap/ext/draft/cv.h)\n* [file-reference.h](include/clap/ext/draft/file-reference.h)\n* [midi-mappings.h](include/clap/ext/draft/midi-mappings.h)\n* [preset-load.h](include/clap/ext/draft/preset-load.h)\n* [quick-controls.h](include/clap/ext/draft/quick-controls.h)\n* [surround.h](include/clap/ext/draft/surround.h)\n* [track-info.h](include/clap/ext/draft/track-info.h)\n* [transport-control.h](include/clap/ext/draft/transport-control.h)\n* [tuning.h](include/clap/ext/draft/tuning.h)\n* [voice-info.h](include/clap/ext/draft/voice-info.h)\n"
        },
        {
          "name": "Contributors.md",
          "type": "blob",
          "size": 0.802734375,
          "content": "CLAP is the result of countless conversations, brainstorms, reviews, tests,\nand iterations. A legion of developers with different backgrounds and points\nof view worked together and converged on a, well, clever solution.\n\nAll of the contributors cannot be listed. But here are a few, along with a\nthank you to all involved:\n\n- Alexandre Bique (Bitwig and u-he/linux)\n- Claes Johanson (Bitwig)\n- David Schornsheim (Schroedingers-Cat, u-he)\n- Frank Hoffmann (u-he)\n- Giel Bremmers (MultitrackStudio)\n- Jan Storm (u-he)\n- John Schwartz (Cockos)\n- Nicholas Allen (Bitwig)\n- Paul Walker (BaconPaul, Surge)\n- Placidus Schelbert (Bitwig)\n- Robbert van der Helm (yabridge)\n- Robin Gareus (Ardour)\n- Thomas Binek (tas, u-he)\n- Timo Kaluza\n- Tor-Helge Skei (MIP2)\n- Urs Heckmann (u-he)\n- Vadim Zavalishin\n- William Light (LHI Audio)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2021 Alexandre BIQUE\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.9072265625,
          "content": "<p align=center>\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/free-audio/clap/main/artwork/clap-full-logo-white.png\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/free-audio/clap/main/artwork/clap-full-logo-black.png\">\n    <img alt=\"CLAP\" title=\"Clever Audio Plugin\" src=\"https://raw.githubusercontent.com/free-audio/clap/main/artwork/clap-full-logo-black.png\" width=200>\n  </picture>\n</p>\n\n- [Learn about CLAP](#learn-about-clap)\n  - [Entry point](#entry-point)\n  - [Extensions](#extensions)\n  - [Fundamental extensions](#fundamental-extensions)\n  - [Support extensions](#support-extensions)\n  - [Deeper Host integration](#deeper-host-integration)\n  - [Third-party extensions](#third-party-extensions)\n- [Adapters](#adapters)\n- [Resources](#resources)\n  - [Examples](#examples)\n  - [Community related projects](#community-related-projects)\n  - [Programming Language Bindings](#programming-language-bindings)\n  - [Artwork](#artwork)\n\n# Learn about CLAP\n\nCLAP stands for **CL**ever **A**udio **P**lugin. It is an interface that\nprovides a stable ABI to define a standard for *Digital Audio Workstations* and\naudio plugins (synthesizers, audio effects, ...) to work together.\n\nThe ABI, or **A**pplication **B**inary **I**nterface, serves as a means of\ncommunication between a host and a plugin. It provides backwards compatibility,\nthat is, a plugin binary compiled with CLAP 1.x can be loaded by any other\nCLAP 1.y.\n\nTo work with CLAP, include [clap/clap.h](include/clap/clap.h).\nTo also include the draft extensions, include [clap/all.h](include/clap/all.h).\n\nThe two most important objects are `clap_host` and `clap_plugin`.\n\n[src/plugin-template.c](src/plugin-template.c) is a very minimal example which demonstrates how to wire a CLAP plugin.\n\n## Entry point\n\nThe entry point is declared in [entry.h](include/clap/entry.h).\n\n## Extensions\n\nMost features come from extensions, which are in fact C interfaces.\n```C\n// host extension\nconst clap_host_log *log = host->extension(host, CLAP_EXT_LOG);\nif (log)\n   log->log(host, CLAP_LOG_INFO, \"Hello World! ;^)\");\n\n// plugin extension\nconst clap_plugin_params *params = plugin->extension(plugin, CLAP_EXT_PARAMS);\nif (params)\n{\n   uint32_t paramsCount = params->count(plugin);\n   // ...\n}\n```\n\nThe extensions are defined in the [ext](include/clap/ext) folder.\n\nSome extensions are still in the progress of being designed and they are in\nthe [draft](include/clap/ext/draft) folder.\n\nAn extension comes with:\n- a header `#include <clap/ext/xxx.h>`\n- an extension identifier: `#define CLAP_EXT_XXX \"clap/XXX\"`\n- host interfaces are named like: `struct clap_host_xxx`\n- plugin interfaces are named like: `struct clap_plugin_xxx`\n- each method must have a clear thread specification\n\nYou can create your own extensions and share them. Make sure that the extension identifier:\n- includes versioning in case the ABI breaks\n- is a unique identifier\n\n**All strings are valid UTF-8**.\n\n## Fundamental extensions\n\nThis is a list of the extensions that you most likely want to implement\nand use to get a basic plugin experience:\n- [state](include/clap/ext/state.h), save and load the plugin state\n  - [state-context](include/clap/ext/state-context.h), same as state but with additional context info (preset, duplicate, project)\n  - [resource-directory](include/clap/ext/draft/resource-directory.h), host provided folder for the plugin to save extra resource like multi-samples, ... (draft)\n- [params](include/clap/ext/params.h), parameters management\n- [note-ports](include/clap/ext/note-ports.h), define the note ports\n- [audio-ports](include/clap/ext/audio-ports.h), define the audio ports\n  - [surround](include/clap/ext/surround.h), inspect surround channel mapping\n  - [ambisonic](include/clap/ext/draft/ambisonic.h), inspect ambisonic channel mapping\n  - [configurable-audio-ports](include/clap/ext/configurable-audio-ports.h), request the plugin to apply a given configuration\n  - [audio-ports-config](include/clap/ext/audio-ports-config.h), simple list of pre-defined audio ports configurations, meant to be exposed to the user\n  - [audio-ports-activation](include/clap/ext/audio-ports-activation.h), activate and deactivate a given audio port\n  - [extensible-audio-ports](include/clap/ext/draft/extensible-audio-ports.h), let the host add audio ports to the plugin, this is useful for dynamic number of audio inputs (draft)\n- [render](include/clap/ext/render.h), renders realtime or offline\n- [latency](include/clap/ext/latency.h), report the plugin latency\n- [tail](include/clap/ext/tail.h), processing tail length\n- [gui](include/clap/ext/gui.h), generic gui controller\n- [voice-info](include/clap/ext/voice-info.h), let the host know how many voices the plugin has, this is important for polyphonic modulations\n- [track-info](include/clap/ext/track-info.h), give some info to the plugin about the track it belongs to\n- [tuning](include/clap/ext/draft/tuning.h), host provided microtuning (draft)\n- [triggers](include/clap/ext/draft/triggers.h), plugin's triggers, similar to parameters but stateless\n\n## Support extensions\n\n- [thread-check](include/clap/ext/thread-check.h), check which thread you are currently on, useful for correctness validation\n- [thread-pool](include/clap/ext/thread-pool.h), use the host thread pool\n- [log](include/clap/ext/log.h), lets the host aggregate plugin logs\n- [timer-support](include/clap/ext/timer-support.h), lets the plugin register timer handlers\n- [posix-fd-support](include/clap/ext/posix-fd-support.h), lets the plugin register I/O handlers\n\n## Deeper Host integration\n\n- [remote-controls](include/clap/ext/remote-controls.h), bank of controls that can be mapped on a controlles with 8 knobs\n- [preset-discovery](include/clap/factory/preset-discovery.h), let the host index the plugin's preset in their native file format\n- [preset-load](include/clap/ext/preset-load.h), let the host ask the plugin to load a preset\n- [param-indication](include/clap/ext/param-indication.h), let the plugin know when a physical control is mapped to a parameter and if there is automation data\n- [note-name](include/clap/ext/note-name.h), give a name to notes, useful for drum machines\n- [transport-control](include/clap/ext/draft/transport-control.h), let the plugin control the host's transport (draft)\n- [context-menu](include/clap/ext/context-menu.h), exchange context menu entries between host and plugin, let the plugin ask the host to popup its own context menu\n\n## Third-party extensions\n\n- [`cockos.reaper_extension`](https://github.com/justinfrankel/reaper-sdk/blob/main/reaper-plugins/reaper_plugin.h#L138), access the [REAPER](http://reaper.fm) API\n\n# Adapters\n\n- [clap-wrapper](https://github.com/free-audio/clap-wrapper), wrappers for using CLAP in other plugin environments\n\n# Resources\n\n- [clap-validator](https://github.com/robbert-vdh/clap-validator), a validator and automatic test suite for CLAP plugins.\n- [clapdb](https://clapdb.tech), a list of plugins and DAWs which supports CLAP\n\n## Examples\n\n- [clap-host](https://github.com/free-audio/clap-host), very simple host\n- [clap-plugins](https://github.com/free-audio/clap-plugins), very simple plugins\n\n## Community related projects\n\n- [clap-juce-extension](https://github.com/free-audio/clap-juce-extension), juce add-on\n- [MIP2](https://github.com/skei/MIP2), host and plugins\n- [Avendish](https://github.com/celtera/avendish), a reflection-based API for media plug-ins in C++ which supports Clap\n- [NIH-plug](https://github.com/robbert-vdh/nih-plug), an API-agnostic, Rust-based plugin framework aiming to reduce boilerplate without getting in your way\n- [iPlug2](https://iplug2.github.io), a liberally licensed C++ audio plug-in framework that supports Clap\n\n## Programming Language Bindings\n\n- [clap-sys](https://github.com/glowcoil/clap-sys), rust binding\n- [CLAP-for-Delphi](https://github.com/Bremmers/CLAP-for-Delphi), Delphi binding\n\n## Artwork\n\n - [CLAP Logo Pack.zip](https://github.com/free-audio/clap/files/8805281/CLAP.Logo.Pack.zip)\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "clap.pc.in",
          "type": "blob",
          "size": 0.2080078125,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: clap\nDescription: The interface headers for the CLAP audio plugin API\nVersion: @CMAKE_PROJECT_VERSION@\n\nCflags: -I${includedir}\n"
        },
        {
          "name": "conventions",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}