{
  "metadata": {
    "timestamp": 1736709845235,
    "page": 317,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tvheadend/tvheadend",
      "stars": 2935,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.01953125,
          "content": ".config.mk\nbuild.*/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9072265625,
          "content": "build.*\n.config.mk\n\ndebian/debhelper-build-stamp\nfilelist.txt\n\nsrc/version.c\nsrc/tvh_locale_inc.c\nsrc/docs_inc.[ch]\nsrc/webui/extjs-std.c\nsrc/webui/extjs-debug.c\nsrc/webui/extjs-tv-std.c\nsrc/webui/extjs-tv-debug.c\nsrc/webui/static/tvh.js.gz\nsrc/webui/static/tvh-tv.css.gz\nsrc/webui/static/tvh-tv.js.gz\nsrc/webui/static/tvh.*.css.gz\n\ndata/dvb-scan\n\nlibav_static\nlibhdhomerun_static\n\n.cproject\n.project\nnbproject\n.settings\n\n*~\n*.pyc\n.*.sw[op]\n*.bak\n*.orig\n*.patch\n\ndebian/.debhelper\ndebian/changelog\ndebian/files\ndebian/tvheadend\ndebian/tvheadend-dbg\ndebian/tvheadend-armv6l\ndebian/tvheadend-dbg-armv6l\ndebian/tvheadend*substvars\ndebian/tvheadend*.debhelper*\n\nrpm/tvheadend.spec\nrpm/test.patch\n\nintl/tvheadend.en_CZ.po\nintl/*.new\nintl/js/tvheadend.js.en_CZ.po\nintl/js/*.new\nsrc/webui/static/intl\n\n#############\n###Windows###\n#############\n\n#windows image file cache\nThumbs.db\n#Folder config file\nDesktop.ini\n#macOS files\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "Autobuild.sh",
          "type": "blob",
          "size": 1.1689453125,
          "content": "#!/bin/bash\n#\n# Entry point for the Doozer autobuild system\n#\n# (c) Andreas Ã–man 2011. All rights reserved.\n#\n#\n\nset -eu\n\nBUILD_API_VERSION=3\nEXTRA_BUILD_NAME=\"\"\nJARGS=\"\"\nJOBSARGS=\"\"\nTARGET=\"\"\nARCHOVR=\"\"\nRELEASE=\"--release\"\nWORKINGDIR=\"/var/tmp/showtime-autobuild\"\nFILELIST=\"$PWD/filelist.txt\"\nOP=\"build\"\nOSPREFIX=\"\"\n\nwhile getopts \"vht:e:j:w:o:p:a:c:\" OPTION\ndo\n  case $OPTION in\n      v)\n\t  echo $BUILD_API_VERSION\n\t  exit 0\n\t  ;;\n      h)\n\t  echo \"This script is intended to be used by the autobuild system only\"\n\t  exit 0\n\t  ;;\n      t)\n\t  TARGET=\"$OPTARG\"\n\t  ;;\n      e)\n\t  EXTRA_BUILD_NAME=\"$OPTARG\"\n\t  ;;\n      j)\n\t  JOBSARGS=\"--jobs=$OPTARG\"\n\t  JARGS=\"-j$OPTARG\"\n\t  ;;\n      w)\n\t  WORKINGDIR=\"$OPTARG\"\n\t  ;;\n      a)\n\t  ARCHOVR=\"$OPTARG\"\n\t  ;;\n      p)\n      OSPREFIX=\"$OPTARG\"\n      ;;\n      o)\n\t  OP=\"$OPTARG\"\n\t  ;;\n  esac\ndone\n\nif [[ -z $TARGET ]]; then\n    source Autobuild/identify-os.sh\n    if ! [[ -z $ARCHOVR ]]; then\n        ARCH=$ARCHOVR\n    fi\n    TARGET=\"$DISTRO-$ARCH\"\nfi\n\nTARGET=$OSPREFIX$TARGET\n\ngit status\n\nif [ -f Autobuild/${TARGET}.sh ]; then\n    echo \"Building for $TARGET\"\n    source Autobuild/${TARGET}.sh\nelse\n    echo \"target $TARGET not supported\"\n    exit 1\nfi\n\n"
        },
        {
          "name": "Autobuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.6767578125,
          "content": "# How to Contribute\n\nThe Tvheadend project welcomes all submissions from the community. Without them the project couldn't hope to thrive.\n\nWe want to ensure that the process of submitting code is as simple as possible whilst ensuring that the project has the necessary provisions to fully utilize and handle all submissions. Therefore some short guidelines are provided here for reference.\n\nFor further info, please see https://tvheadend.org/projects/tvheadend/wiki/Contributors.\n\n## Before you start\n\n* Make sure you have a [GitHub account](https://github.com/signup/free)\n* Log on to the [Forum](https://tvheadend.org), this is the best place to discussion development work.\n* Fork the repository on Github\n\n## Making Changes\n\n* If unsure, discuss any potential work on IRC channel to avoid duplicate work.\n* Create a branch to put your changes. Use a sensible name, i.e. feature/whizzbanger, or bugfix/redmine-1234.\n  * It's strongly recommend you create one branch per feature/bugfix/etc..\n* Make commits, try and keep commits to sensible units.\n* Use sensible commit messages, prefix with subsystem, summary on first line, more detail on following lines and include reference to any related issue numbers in Redmine.\n\n````\nmpegts dvb: Add foo feature to the DVB system.\n\nSome more detail description of what has been done.\n\nThis fixes #1234.\n````\n* Submit a Pull Request on Github.\n\n# Additional Resources\n\n* [More information on contributing](https://tvheadend.org/projects/tvheadend/wiki/Contributors)\n* [Forum](https://tvheadend.org)\n* [General GitHub documentation](http://help.github.com/)\n* [GitHub pull request documentation](http://help.github.com/send-pull-requests/)\n* #hts IRC channel on libera.chat\n\n"
        },
        {
          "name": "Containerfile",
          "type": "blob",
          "size": 0.01953125,
          "content": "Containerfile.alpine"
        },
        {
          "name": "Containerfile.alpine",
          "type": "blob",
          "size": 3.5634765625,
          "content": "# SPDX-License-Identifier: GPL-3.0-or-later\n#\n# Copyright (C) 2023 Olliver Schinagl <oliver@schinagl.nl>\n\nARG ALPINE_VERSION=\"latest\"\nARG TARGET_ARCH=\"library\"\n\nFROM docker.io/${TARGET_ARCH}/alpine:${ALPINE_VERSION} AS builder\n\nWORKDIR /src\n\nCOPY . /src/\n\nRUN apk add --no-cache \\\n        'avahi-dev' \\\n        'bash' \\\n        'bsd-compat-headers' \\\n        'build-base' \\\n        'cmake' \\\n        'coreutils' \\\n        'dbus-dev' \\\n        'ffmpeg4-dev' \\\n        'findutils' \\\n        'gettext-dev' \\\n        'git' \\\n        'gnu-libiconv-dev' \\\n        'libdvbcsa-dev' \\\n        'libhdhomerun-dev' \\\n        'libva-dev' \\\n        'libvpx-dev' \\\n        'linux-headers' \\\n        'musl-dev' \\\n        'openssl-dev>3' \\\n        'opus-dev' \\\n        'pngquant' \\\n        'python3' \\\n        'uriparser-dev' \\\n        'wget' \\\n        'x264-dev' \\\n        'x265-dev' \\\n        'zlib-dev' \\\n    && \\\n    git config --global --add safe.directory '/src/data/dvb-scan' && \\\n    ./configure \\\n                --prefix='/usr/local' \\\n                --disable-doc \\\n                --disable-execinfo \\\n                --disable-ffmpeg_static \\\n                --disable-hdhomerun_static \\\n                --disable-libfdkaac_static \\\n                --disable-libmfx_static \\\n                --disable-libopus_static \\\n                --disable-libtheora_static \\\n                --disable-libvorbis_static \\\n                --disable-libvpx_static \\\n                --disable-libx264_static \\\n                --disable-libx265_static \\\n                --enable-bundle \\\n                --enable-dvbcsa \\\n                --enable-hdhomerun_client \\\n                --enable-kqueue \\\n                --enable-libav \\\n                --enable-nvenc \\\n                --enable-pngquant \\\n                --enable-qsv \\\n                --python=python3 \\\n        && \\\n        make DESTDIR='/tvheadend' -j$(($(nproc) - 1)) install\n\nFROM docker.io/${TARGET_ARCH}/alpine:${ALPINE_VERSION}\n\nLABEL maintainer=\"Olliver Schinagl <oliver@schinagl.nl>\"\n\nEXPOSE 9981 \\\n       9982 \\\n       9983\n\nRUN apk add --no-cache \\\n        'avahi' \\\n        'dbus-libs' \\\n        'ffmpeg4' \\\n        'ffmpeg4-libavcodec' \\\n        'ffmpeg4-libavdevice' \\\n        'ffmpeg4-libavfilter' \\\n        'ffmpeg4-libavfilter' \\\n        'ffmpeg4-libavformat' \\\n        'ffmpeg4-libavutil' \\\n        'ffmpeg4-libpostproc' \\\n        'ffmpeg4-libswresample' \\\n        'ffmpeg4-libswscale' \\\n        'gnu-libiconv-libs' \\\n        'libcrypto3' \\\n        'libdvbcsa' \\\n        'libhdhomerun-libs' \\\n        'libssl3' \\\n        'liburiparser' \\\n        'libva' \\\n        'libvpx' \\\n        'mesa' \\\n        'opus' \\\n        'perl-http-entity-parser' \\\n        'pngquant' \\\n        'python3' \\\n        'tini' \\\n        'x264-libs' \\\n        'x265-libs' \\\n        'xmltv' \\\n        'zlib' \\\n    && \\\n    [ \"$(uname -m)\" = 'x86'* ] && apk add --no-cache \\\n        'libva-intel-driver' \\\n        ; \\\n    [ \"$(uname -m)\" = 'x86_64' ] && apk add --no-cache \\\n        'intel-media-driver' \\\n        ; \\\n    addgroup -S 'tvheadend' && \\\n    adduser -D -G 'tvheadend' -h '/var/lib/tvheadend' -s '/bin/nologin' -S 'tvheadend' && \\\n    adduser 'tvheadend' 'audio' && \\\n    adduser 'tvheadend' 'video' && \\\n    install -d -m 775 -g 'tvheadend' -o 'tvheadend' '/var/lib/tvheadend/recordings' && \\\n    install -d -m 775 -g 'tvheadend' -o 'tvheadend' '/var/log/tvheadend'\n\nCOPY --from=builder \"/tvheadend\" \"/\"\nCOPY \"./support/container-entrypoint.sh\" \"/init\"\n\nVOLUME /var/lib/tvheadend\nVOLUME /var/lib/tvheadend/recordings\nWORKDIR /var/lib/tvheadend/\nUSER tvheadend\n\nENTRYPOINT [ \"/sbin/tini\", \"--\", \"/init\" ]\n"
        },
        {
          "name": "Containerfile.debian",
          "type": "blob",
          "size": 3.3330078125,
          "content": "# SPDX-License-Identifier: GPL-3.0-or-later\n#\n# Copyright (C) 2023 Olliver Schinagl <oliver@schinagl.nl>\n\nARG DEBIAN_VERSION=\"stable-slim\"\nARG TARGET_ARCH=\"library\"\n\nFROM docker.io/${TARGET_ARCH}/debian:${DEBIAN_VERSION} AS builder\n\nENV DEBIAN_FRONTEND noninteractive\n\nWORKDIR /src\n\nCOPY . /src/\n\nRUN apt-get update --yes && apt-get install --yes \\\n        'build-essential' \\\n        'bzip2' \\\n        'cmake' \\\n        'debhelper' \\\n        'gettext' \\\n        'git-core' \\\n        'libavahi-client-dev' \\\n        'libavdevice-dev' \\\n        'libdbus-1-dev' \\\n        'libdvbcsa-dev' \\\n        'libhdhomerun-dev' \\\n        'libopus-dev' \\\n        'libpcre2-dev' \\\n        'libssl-dev' \\\n        'liburiparser-dev' \\\n        'libva-dev' \\\n        'libvpx-dev' \\\n        'libx264-dev' \\\n        'libx265-dev' \\\n        'lsb-release' \\\n        'pkg-config' \\\n        'pngquant' \\\n        'python3' \\\n        'python3-distutils-extra' \\\n        'python3-requests' \\\n        'wget' \\\n        'zlib1g-dev' \\\n    && \\\n    git config --global --add safe.directory '/src/data/dvb-scan' && \\\n    ./configure \\\n                --prefix='/usr/local' \\\n                --disable-doc \\\n                --disable-execinfo \\\n                --disable-ffmpeg_static \\\n                --disable-hdhomerun_static \\\n                --disable-libfdkaac_static \\\n                --disable-libmfx_static \\\n                --disable-libopus_static \\\n                --disable-libtheora_static \\\n                --disable-libvorbis_static \\\n                --disable-libvpx_static \\\n                --disable-libx264_static \\\n                --disable-libx265_static \\\n                --enable-bundle \\\n                --enable-dvbcsa \\\n                --enable-hdhomerun_client \\\n                --enable-kqueue \\\n                --enable-libav \\\n                --enable-nvenc \\\n                --enable-pngquant \\\n                --enable-qsv \\\n                --python=python3 \\\n        && \\\n        make DESTDIR='/tvheadend' -j$(($(nproc) - 1)) install\n\nFROM docker.io/${TARGET_ARCH}/debian:${DEBIAN_VERSION}\n\nENV DEBIAN_FRONTEND noninteractive\n\nLABEL maintainer=\"Olliver Schinagl <oliver@schinagl.nl>\"\n\nEXPOSE 9981 \\\n       9982 \\\n       9983\n\nRUN apt-get update --yes && apt-get install --yes \\\n        'libavahi-client3' \\\n        'libavcodec59' \\\n        'libavdevice59' \\\n        'libavfilter8' \\\n        'libavfilter8' \\\n        'libavutil57' \\\n        'libdbus-1-3' \\\n        'libdvbcsa1' \\\n        'libhdhomerun4' \\\n        'libpostproc56' \\\n        'libswscale6' \\\n        'libopus0' \\\n        'libpcre2-8-0' \\\n        'libssl3' \\\n        'liburiparser1' \\\n        'libva2' \\\n        'libvpx7' \\\n        'libx264-164' \\\n        'libx265-199' \\\n        'pngquant' \\\n        'python3' \\\n        'mesa-va-drivers' \\\n        'mesa-vdpau-drivers' \\\n        'zlib1g' \\\n        'xmltv' \\\n        'tini' \\\n    && \\\n    useradd -c 'TVHeadend' -d '/var/lib/tvheadend' -G 'audio','video' -m -r -s '/bin/false' -U 'tvheadend' && \\\n    install -d -m 775 -g 'tvheadend' -o 'tvheadend' '/var/lib/tvheadend/recordings' && \\\n    install -d -m 775 -g 'tvheadend' -o 'tvheadend' '/var/log/tvheadend'\n\nCOPY --from=builder \"/tvheadend\" \"/\"\nCOPY \"./support/container-entrypoint.sh\" \"/init\"\n\nVOLUME /var/lib/tvheadend\nVOLUME /var/lib/tvheadend/recordings\nWORKDIR /var/lib/tvheadend/\nUSER tvheadend\n\nENTRYPOINT [ \"/usr/bin/tini\", \"--\", \"/init\" ]\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.0126953125,
          "content": "Containerfile"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.6357421875,
          "content": "Licensing\n=========\n\nThe project is currently licensed using GPLv3. For full text see:\n\n> http://www.gnu.org/licenses/gpl-3.0.txt   \n> [GPLv3](licenses/gpl-3.0.txt)\n\nShould you be interested in using Tvheadend and wish to use another OSI license, then please contact admin at tvheadend dot org.\n\nCode not Covered\n----------------\n\nCode in the \"vendor\" directory is not covered by our license, it is 3rd party provided code and as such is governed by individual licenses.\n\nFurther Information\n-------------------\n\nFor more information regarding licensing and contributions, please see:\n\n> https://tvheadend.org/projects/tvheadend/wiki/Contributors    \n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 22.814453125,
          "content": "#\n#  Tvheadend streaming server.\n#  Copyright (C) 2007-2009 Andreas Ã–man\n#  Copyright (C) 2012-2015 Adam Sutton\n#  Copyright (C) 2012-2018 Jaroslav Kysela\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n#\n# Configuration\n#\n\ninclude $(dir $(lastword $(MAKEFILE_LIST))).config.mk\ninclude $(dir $(lastword $(MAKEFILE_LIST)))Makefile.common\nPROG      := $(BUILDDIR)/tvheadend\nLANGUAGES ?= $(LANGUAGES_ALL)\n\n#\n# Common compiler flags\n#\n\n# https://wiki.debian.org/Hardening\nCFLAGS  += -g\nifeq ($(CONFIG_CCDEBUG),yes)\nCFLAGS  += -O0\nelse\nCFLAGS  += -O2 -D_FORTIFY_SOURCE=2\nendif\nifeq ($(CONFIG_PIE),yes)\nCFLAGS  += -fPIE\nelse\nCFLAGS  += -fPIC\nendif\nifeq ($(CONFIG_W_UNUSED_RESULT),yes)\nCFLAGS  += -Wunused-result\nendif\nifneq ($(CFLAGS_NO_WERROR),yes)\nCFLAGS  += -Werror\nendif\nCFLAGS  += -Wall -Wwrite-strings -Wno-deprecated-declarations\nCFLAGS  += -Wmissing-prototypes\nCFLAGS  += -fno-strict-aliasing\nCFLAGS  += -fms-extensions -funsigned-char\nCFLAGS  += -D_FILE_OFFSET_BITS=64\nCFLAGS  += -D_TIME_BITS=64\nCFLAGS  += -I${BUILDDIR} -I${ROOTDIR}/src -I${ROOTDIR}\nifeq ($(CONFIG_ANDROID),yes)\nLDFLAGS += -ldl -lm\nelse\nLDFLAGS += -ldl -lpthread -lm\nendif\nifeq ($(CONFIG_PIE),yes)\nLDFLAGS += -pie\nendif\nLDFLAGS += -Wl,-z,now\nifeq ($(CONFIG_LIBICONV),yes)\nLDFLAGS += -liconv\nendif\nifeq ($(CONFIG_GNU_LIBICONV),yes)\nCFLAGS += -D_GNU_LIBICONV\nLDFLAGS += -liconv\nendif\nifeq ($(PLATFORM), darwin)\nLDFLAGS += -framework CoreServices\nelse\nifeq ($(CONFIG_ANDROID),no)\nLDFLAGS += -lrt\nendif\nendif\nifeq ($(CONFIG_GPERFTOOLS),yes)\nCFLAGS += -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free\nLDFLAGS += -lprofiler -ltcmalloc\nendif\n\nifeq ($(COMPILER), clang)\nCFLAGS  += -Wno-microsoft -Qunused-arguments -Wno-unused-function\nCFLAGS  += -Wno-unused-value -Wno-tautological-constant-out-of-range-compare\nCFLAGS  += -Wno-parentheses-equality\nendif\n\n\n# LIBAV ########################################################################\n\nifeq ($(CONFIG_LIBAV),yes)\n\nFFMPEG_LIBS := \\\n    libavfilter \\\n    libswresample \\\n    libswscale \\\n    libavformat \\\n    libavcodec \\\n    libavutil\n\n# FFMPEG_STATIC\nifeq ($(CONFIG_FFMPEG_STATIC),yes)\n\nifeq (,$(wildcard ${BUILDDIR}/libffmpeg_stamp))\n# build static FFMPEG as first for pkgconfig\nffmpeg_all: ${BUILDDIR}/libffmpeg_stamp\n\t$(MAKE) all\nendif\n\nFFMPEG_PREFIX := $(BUILDDIR)/ffmpeg/build/ffmpeg\nFFMPEG_LIBDIR := $(FFMPEG_PREFIX)/lib\nFFMPEG_INCDIR := $(FFMPEG_PREFIX)/include\nFFMPEG_CONFIG := \\\n    PKG_CONFIG_LIBDIR=$(FFMPEG_LIBDIR)/pkgconfig $(PKG_CONFIG) \\\n    --define-variable=prefix=$(FFMPEG_PREFIX) \\\n    --define-variable=includedir=$(FFMPEG_INCDIR) \\\n    --define-variable=libdir=$(FFMPEG_LIBDIR) --static\n\nifeq ($(CONFIG_LIBX264_STATIC),yes)\nFFMPEG_DEPS += libx264\nendif\n\nifeq ($(CONFIG_LIBX265_STATIC),yes)\nFFMPEG_DEPS += libx265\nendif\n\nifeq ($(CONFIG_LIBVPX_STATIC),yes)\nFFMPEG_DEPS += libvpx\nendif\n\nifeq ($(CONFIG_LIBOGG_STATIC),yes)\nFFMPEG_DEPS += libogg\nendif\n\nifeq ($(CONFIG_LIBTHEORA_STATIC),yes)\nFFMPEG_DEPS += libtheoraenc libtheoradec libtheora\nendif\n\nifeq ($(CONFIG_LIBVORBIS_STATIC),yes)\nFFMPEG_DEPS += libvorbisfile libvorbisenc libvorbis\nendif\n\nifeq ($(CONFIG_LIBFDKAAC_STATIC),yes)\nFFMPEG_DEPS += libfdk-aac\nendif\n\nifeq ($(CONFIG_LIBOPUS_STATIC),yes)\nFFMPEG_DEPS += libopus\nendif\n\nLDFLAGS += $(foreach lib,$(FFMPEG_LIBS),$(FFMPEG_LIBDIR)/$(lib).a)\nLDFLAGS += $(foreach lib,$(FFMPEG_DEPS),$(FFMPEG_LIBDIR)/$(lib).a)\n\nelse # !FFMPEG_STATIC\n\nFFMPEG_CONFIG := $(PKG_CONFIG)\n\nendif # FFMPEG_STATIC\n\nCFLAGS  += `$(FFMPEG_CONFIG) --cflags $(FFMPEG_LIBS)`\nLDFLAGS += `$(FFMPEG_CONFIG) --libs $(FFMPEG_LIBS)`\n\nendif\n\n# LIBAV ########################################################################\n\n\nifeq ($(CONFIG_HDHOMERUN_STATIC),yes)\nCFLAGS  += -I$(BUILDDIR)/hdhomerun\nLDFLAGS += $(BUILDDIR)/hdhomerun/libhdhomerun/libhdhomerun.a\nendif\n\nvpath %.c $(ROOTDIR)\nvpath %.h $(ROOTDIR)\n\n#\n# Other config\n#\n\nBUNDLE_FLAGS-${CONFIG_ZLIB} += -z\nBUNDLE_FLAGS-${CONFIG_PNGQUANT} += -q\nBUNDLE_FLAGS = ${BUNDLE_FLAGS-yes}\n\n#\n# Binaries/Scripts\n#\n\nMKBUNDLE = $(PYTHON) $(ROOTDIR)/support/mkbundle\nXGETTEXT2 ?= $(XGETTEXT) --language=C --from-code=utf-8 --add-comments=/ -k_ -kN_ -s\nMSGMERGE ?= msgmerge\n\n#\n# Debug/Output\n#\n\nBRIEF  = CC MKBUNDLE\nifndef V\nECHO   = printf \"%-16s%s\\n\" $(1) $(2)\nMSG    = $(subst $(BUILDDIR)/,,$@)\n$(foreach VAR,$(BRIEF), \\\n\t$(eval p$(VAR) = @$$(call ECHO,$(VAR),$$(MSG)); $($(VAR))))\nelse\n$(foreach VAR,$(BRIEF), \\\n\t$(eval p$(VAR) = $($(VAR))))\nendif\n\n#\n# Core\n#\nSRCS-1 = \\\n\tsrc/version.c \\\n\tsrc/uuid.c \\\n\tsrc/main.c \\\n\tsrc/tvhlog.c \\\n\tsrc/tprofile.c \\\n\tsrc/idnode.c \\\n\tsrc/prop.c \\\n\tsrc/proplib.c \\\n\tsrc/utils.c \\\n\tsrc/wrappers.c \\\n\tsrc/tvh_thread.c \\\n\tsrc/tvhvfs.c \\\n\tsrc/access.c \\\n\tsrc/tcp.c \\\n\tsrc/udp.c \\\n\tsrc/udp_stream.c \\\n\tsrc/url.c \\\n\tsrc/http.c \\\n\tsrc/notify.c \\\n\tsrc/file.c \\\n\tsrc/epg.c \\\n\tsrc/epgdb.c\\\n\tsrc/epggrab.c\\\n\tsrc/spawn.c \\\n\tsrc/packet.c \\\n\tsrc/esstream.c \\\n\tsrc/streaming.c \\\n\tsrc/channels.c \\\n\tsrc/subscriptions.c \\\n\tsrc/service.c \\\n\tsrc/htsp_server.c \\\n\tsrc/htsmsg.c \\\n\tsrc/htsmsg_binary.c \\\n\tsrc/htsmsg_binary2.c \\\n\tsrc/htsmsg_json.c \\\n\tsrc/htsmsg_xml.c \\\n\tsrc/misc/dbl.c \\\n\tsrc/misc/json.c \\\n\tsrc/misc/m3u.c \\\n\tsrc/settings.c \\\n\tsrc/htsbuf.c \\\n\tsrc/trap.c \\\n\tsrc/htsstr.c \\\n\tsrc/tvhpoll.c \\\n\tsrc/huffman.c \\\n\tsrc/filebundle.c \\\n\tsrc/config.c \\\n\tsrc/lang_codes.c \\\n\tsrc/lang_str.c \\\n\tsrc/imagecache.c \\\n\tsrc/tvhtime.c \\\n\tsrc/service_mapper.c \\\n\tsrc/input.c \\\n\tsrc/httpc.c \\\n\tsrc/rtsp.c \\\n\tsrc/download.c \\\n\tsrc/fsmonitor.c \\\n\tsrc/cron.c \\\n\tsrc/esfilter.c \\\n\tsrc/intlconv.c \\\n\tsrc/profile.c \\\n\tsrc/bouquet.c \\\n\tsrc/ratinglabels.c \\\n\tsrc/lock.c \\\n\tsrc/string_list.c \\\n\tsrc/wizard.c \\\n\tsrc/memoryinfo.c\n\nSRCS = $(SRCS-1)\nI18N-C = $(SRCS-1)\n\nSRCS-ZLIB = \\\n\tsrc/zlib.c\nSRCS-${CONFIG_ZLIB} += $(SRCS-ZLIB)\n\nSRCS-UPNP = \\\n\tsrc/upnp.c\nSRCS-${CONFIG_UPNP} += $(SRCS-UPNP)\nI18N-C += $(SRCS-UPNP)\n\n# SATIP Server\nSRCS-SATIP-SERVER = \\\n\tsrc/satip/server.c \\\n\tsrc/satip/rtsp.c \\\n\tsrc/satip/rtp.c\nSRCS-${CONFIG_SATIP_SERVER} += $(SRCS-SATIP-SERVER)\nI18N-C += $(SRCS-SATIP-SERVER)\n\nSRCS-2 = \\\n\tsrc/api.c \\\n\tsrc/api/api_config.c \\\n\tsrc/api/api_status.c \\\n\tsrc/api/api_idnode.c \\\n\tsrc/api/api_raw.c \\\n\tsrc/api/api_input.c \\\n\tsrc/api/api_channel.c \\\n\tsrc/api/api_service.c \\\n\tsrc/api/api_mpegts.c \\\n\tsrc/api/api_epg.c \\\n\tsrc/api/api_epggrab.c \\\n\tsrc/api/api_imagecache.c \\\n\tsrc/api/api_esfilter.c \\\n\tsrc/api/api_intlconv.c \\\n\tsrc/api/api_access.c \\\n\tsrc/api/api_dvr.c \\\n\tsrc/api/api_caclient.c \\\n\tsrc/api/api_profile.c \\\n\tsrc/api/api_bouquet.c \\\n\tsrc/api/api_ratinglabel.c \\\n\tsrc/api/api_language.c \\\n\tsrc/api/api_satip.c \\\n\tsrc/api/api_timeshift.c \\\n\tsrc/api/api_wizard.c\n\nSRCS-2 += \\\n        src/parsers/message.c \\\n\tsrc/parsers/parsers.c \\\n\tsrc/parsers/bitstream.c \\\n\tsrc/parsers/parser_h264.c \\\n\tsrc/parsers/parser_hevc.c \\\n\tsrc/parsers/parser_latm.c \\\n\tsrc/parsers/parser_avc.c \\\n\tsrc/parsers/parser_teletext.c\n\nSRCS-2 += \\\n\tsrc/epggrab/module.c \\\n\tsrc/epggrab/channel.c \\\n\tsrc/epggrab/module/xmltv.c\n\nSRCS-2 += \\\n\tsrc/plumbing/tsfix.c \\\n\tsrc/plumbing/globalheaders.c\n\nSRCS-2 += \\\n\tsrc/dvr/dvr_db.c \\\n\tsrc/dvr/dvr_rec.c \\\n\tsrc/dvr/dvr_autorec.c \\\n\tsrc/dvr/dvr_timerec.c \\\n\tsrc/dvr/dvr_vfsmgr.c \\\n\tsrc/dvr/dvr_config.c \\\n\tsrc/dvr/dvr_cutpoints.c\n\nSRCS-2 += \\\n\tsrc/webui/webui.c \\\n\tsrc/webui/comet.c \\\n\tsrc/webui/extjs.c \\\n\tsrc/webui/simpleui.c \\\n\tsrc/webui/statedump.c \\\n\tsrc/webui/html.c \\\n\tsrc/webui/webui_api.c \\\n\tsrc/webui/xmltv.c \\\n\tsrc/webui/doc_md.c\n\nSRCS-2 += \\\n\tsrc/muxer.c \\\n\tsrc/muxer/muxer_pass.c \\\n\tsrc/muxer/ebml.c \\\n\tsrc/muxer/muxer_mkv.c \\\n\tsrc/muxer/muxer_audioes.c\n\nSRCS += $(SRCS-2)\nI18N-C += $(SRCS-2)\n\n#\n# Optional code\n#\n\n# MPEGTS core, order by usage (psi lib, tsdemux)\nSRCS-MPEGTS = \\\n\tsrc/descrambler/descrambler.c \\\n\tsrc/descrambler/caclient.c \\\n\tsrc/descrambler/caid.c \\\n\tsrc/input/mpegts.c \\\n\tsrc/input/mpegts/mpegts_pid.c \\\n\tsrc/input/mpegts/mpegts_input.c \\\n\tsrc/input/mpegts/tsdemux.c \\\n\tsrc/input/mpegts/dvb_psi_hbbtv.c \\\n\tsrc/input/mpegts/dvb_psi_lib.c \\\n\tsrc/input/mpegts/mpegts_network.c \\\n\tsrc/input/mpegts/mpegts_mux.c \\\n\tsrc/input/mpegts/mpegts_service.c \\\n\tsrc/input/mpegts/mpegts_table.c \\\n\tsrc/input/mpegts/dvb_support.c \\\n\tsrc/input/mpegts/dvb_charset.c \\\n\tsrc/input/mpegts/dvb_psi_pmt.c \\\n\tsrc/input/mpegts/dvb_psi.c \\\n\tsrc/input/mpegts/fastscan.c \\\n\tsrc/input/mpegts/mpegts_mux_sched.c \\\n        src/input/mpegts/mpegts_network_scan.c \\\n        src/input/mpegts/mpegts_tsdebug.c \\\n        src/descrambler/tsdebugcw.c\nSRCS-$(CONFIG_MPEGTS) += $(SRCS-MPEGTS)\nI18N-C += $(SRCS-MPEGTS)\n\n# MPEGTS DVB\nSRCS-MPEGTS-DVB = \\\n\tsrc/input/mpegts/mpegts_network_dvb.c \\\n\tsrc/input/mpegts/mpegts_mux_dvb.c \\\n\tsrc/input/mpegts/scanfile.c\nSRCS-${CONFIG_MPEGTS_DVB} += $(SRCS-MPEGTS-DVB)\nI18N-C += $(SRCS-MPEGTS-DVB)\n\n# MPEGTS EPG\nSRCS-MPEGTS-EPG = \\\n\tsrc/epggrab/otamux.c\\\n\tsrc/epggrab/module/eit.c \\\n\tsrc/epggrab/module/eitpatternlist.c \\\n\tsrc/epggrab/module/psip.c \\\n\tsrc/epggrab/support/freesat_huffman.c \\\n\tsrc/epggrab/module/opentv.c\nSRCS-$(CONFIG_MPEGTS) += $(SRCS-MPEGTS-EPG)\nI18N-C += $(SRCS-MPEGTS-EPG)\n\n# LINUX DVB\nSRCS-LINUXDVB = \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_adapter.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_frontend.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_satconf.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_lnb.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_switch.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_rotor.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_en50494.c\nSRCS-${CONFIG_LINUXDVB} += $(SRCS-LINUXDVB)\nI18N-C += $(SRCS-LINUXDVB)\n\n# SATIP Client\nSRCS-SATIP-CLIENT = \\\n\tsrc/input/mpegts/satip/satip.c \\\n\tsrc/input/mpegts/satip/satip_frontend.c \\\n\tsrc/input/mpegts/satip/satip_satconf.c \\\n\tsrc/input/mpegts/satip/satip_rtsp.c\nSRCS-${CONFIG_SATIP_CLIENT} += $(SRCS-SATIP-CLIENT)\nI18N-C += $(SRCS-SATIP-CLIENT)\n\n# HDHOMERUN\nSRCS-HDHOMERUN = \\\n\tsrc/input/mpegts/tvhdhomerun/tvhdhomerun.c \\\n\tsrc/input/mpegts/tvhdhomerun/tvhdhomerun_frontend.c\nSRCS-${CONFIG_HDHOMERUN_CLIENT} += $(SRCS-HDHOMERUN)\nI18N-C += $(SRCS-HDHOMERUN)\n\n# IPTV\nSRCS-IPTV = \\\n\tsrc/input/mpegts/iptv/iptv.c \\\n\tsrc/input/mpegts/iptv/iptv_mux.c \\\n\tsrc/input/mpegts/iptv/iptv_service.c \\\n\tsrc/input/mpegts/iptv/iptv_http.c \\\n\tsrc/input/mpegts/iptv/iptv_udp.c \\\n\tsrc/input/mpegts/iptv/iptv_rtsp.c \\\n\tsrc/input/mpegts/iptv/iptv_rtcp.c \\\n\tsrc/input/mpegts/iptv/iptv_pipe.c \\\n\tsrc/input/mpegts/iptv/iptv_file.c \\\n\tsrc/input/mpegts/iptv/iptv_auto.c\nSRCS-${CONFIG_IPTV} += $(SRCS-IPTV)\nI18N-C += $(SRCS-IPTV)\n\n# TSfile\nSRCS-TSFILE = \\\n\tsrc/input/mpegts/tsfile/tsfile.c \\\n\tsrc/input/mpegts/tsfile/tsfile_input.c \\\n\tsrc/input/mpegts/tsfile/tsfile_mux.c\nSRCS-$(CONFIG_TSFILE) += $(SRCS-TSFILE)\nI18N-C += $(SRCS-TSFILE)\n\n# Timeshift\nSRCS-TIMESHIFT = \\\n\tsrc/timeshift.c \\\n\tsrc/timeshift/timeshift_filemgr.c \\\n\tsrc/timeshift/timeshift_writer.c \\\n\tsrc/timeshift/timeshift_reader.c\nSRCS-${CONFIG_TIMESHIFT} += $(SRCS-TIMESHIFT)\nI18N-C += $(SRCS-TIMESHIFT)\n\n# Inotify\nSRCS-INOTIFY = \\\n\tsrc/dvr/dvr_inotify.c\nSRCS-${CONFIG_INOTIFY} += $(SRCS-INOTIFY)\nI18N-C += $(SRCS-INOTIFY)\nifeq ($(CONFIG_INOTIFY), yes)\nifeq ($(PLATFORM), freebsd)\nLDFLAGS += -linotify\nendif\nendif\n\n# Avahi\nSRCS-AVAHI = \\\n\tsrc/avahi.c\nSRCS-$(CONFIG_AVAHI) += $(SRCS-AVAHI)\nI18N-C += $(SRCS-AVAHI)\n\n# Bonjour\nSRCS-BONJOUR = \\\n\tsrc/bonjour.c\nSRCS-$(CONFIG_BONJOUR) += $(SRCS-BONJOUR)\nI18N-C += $(SRCS-BONJOUR)\n\n# codecs\nSRCS-CODECS = $(wildcard src/transcoding/codec/*.c)\nSRCS-CODECS += $(wildcard src/transcoding/codec/codecs/*.c)\nifneq (,$(filter yes,$(CONFIG_LIBX264) $(CONFIG_LIBX265)))\nLIBS-CODECS += libx26x\nendif\nifeq ($(CONFIG_LIBVPX),yes)\nLIBS-CODECS += libvpx\nendif\nifeq ($(CONFIG_LIBTHEORA),yes)\nLIBS-CODECS += libtheora\nendif\nifeq ($(CONFIG_LIBVORBIS),yes)\nLIBS-CODECS += libvorbis\nendif\nifeq ($(CONFIG_LIBFDKAAC),yes)\nLIBS-CODECS += libfdk_aac\nendif\nifeq ($(CONFIG_LIBOPUS),yes)\nLIBS-CODECS += libopus\nendif\nifeq ($(CONFIG_VAAPI),yes)\nLIBS-CODECS += vaapi\nendif\nifeq ($(CONFIG_NVENC),yes)\nLIBS-CODECS += nvenc\nendif\nifeq ($(CONFIG_OMX),yes)\nLIBS-CODECS += omx\nendif\nSRCS-CODECS += $(foreach lib,$(LIBS-CODECS),src/transcoding/codec/codecs/libs/$(lib).c)\n\n#hwaccels\nifeq ($(CONFIG_HWACCELS),yes)\nSRCS-HWACCELS += src/transcoding/transcode/hwaccels/hwaccels.c\nifeq ($(CONFIG_VAAPI),yes)\nSRCS-HWACCELS += src/transcoding/transcode/hwaccels/vaapi.c\nendif\nendif\n\n# libav\nDEPS-LIBAV = \\\n\tsrc/main.c \\\n\tsrc/tvhlog.c\nSRCS-LIBAV = \\\n\tsrc/libav.c \\\n\tsrc/muxer/muxer_libav.c \\\n\tsrc/api/api_codec.c\nifeq ($(CONFIG_IPTV),yes)\nSRCS-LIBAV += src/input/mpegts/iptv/iptv_libav.c\nendif\nSRCS-LIBAV += $(wildcard src/transcoding/*.c)\nSRCS-LIBAV += $(wildcard src/transcoding/transcode/*.c)\nSRCS-LIBAV += $(SRCS-HWACCELS)\nSRCS-LIBAV += $(SRCS-CODECS)\nSRCS-$(CONFIG_LIBAV) += $(SRCS-LIBAV)\nI18N-C += $(SRCS-LIBAV)\n\n# Tvhcsa\nSRCS-TVHCSA = \\\n\tsrc/descrambler/tvhcsa.c\nSRCS-${CONFIG_TVHCSA} += $(SRCS-TVHCSA)\nI18N-C += $(SRCS-TVHCSA)\n\n# Cardclient\nSRCS-CARDCLIENT = \\\n        src/descrambler/cclient.c \\\n\tsrc/descrambler/emm_reass.c\nSRCS-${CONFIG_CARDCLIENT} += $(SRCS-CARDCLIENT)\nI18N-C += $(SRCS-CARDCLIENT)\n\n# CWC\nSRCS-CWC = \\\n\tsrc/descrambler/cwc.c\nSRCS-${CONFIG_CWC} += $(SRCS-CWC)\nI18N-C += $(SRCS-CWC)\n\n# CCCAM\nSRCS-CCCAM = \\\n\tsrc/descrambler/cccam.c\nSRCS-${CONFIG_CCCAM} += $(SRCS-CCCAM)\nI18N-C += $(SRCS-CCCAM)\n\n# CAPMT\nSRCS-CAPMT = \\\n\tsrc/descrambler/capmt.c\nSRCS-${CONFIG_CAPMT} += $(SRCS-CAPMT)\nI18N-C += $(SRCS-CAPMT)\n\n# CONSTCW\nSRCS-CONSTCW = \\\n\tsrc/descrambler/constcw.c\nSRCS-${CONFIG_CONSTCW} += $(SRCS-CONSTCW)\nI18N-C += $(SRCS-CONSTCW)\n\n# DVB CAM\nSRCS-DVBCAM = \\\n        src/input/mpegts/en50221/en50221.c \\\n        src/input/mpegts/en50221/en50221_apps.c \\\n        src/input/mpegts/en50221/en50221_capmt.c \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_ca.c \\\n\tsrc/descrambler/dvbcam.c\nSRCS-${CONFIG_LINUXDVB_CA} += $(SRCS-DVBCAM)\nI18N-C += $(SRCS-DVBCAM)\n\nSRCS-DDCI = \\\n\tsrc/input/mpegts/linuxdvb/linuxdvb_ddci.c\nSRCS-${CONFIG_DDCI} += $(SRCS-DDCI)\nI18N-C += $(SRCS-DDCI)\n\n# crypto algorithms\nSRCS-${CONFIG_SSL} += src/descrambler/algo/libaesdec.c\nSRCS-${CONFIG_SSL} += src/descrambler/algo/libaes128dec.c\nSRCS-${CONFIG_SSL} += src/descrambler/algo/libdesdec.c\n\n# DBUS\nSRCS-${CONFIG_DBUS_1}  += src/dbus.c\n\n# Watchdog\nSRCS-${CONFIG_LIBSYSTEMD_DAEMON} += src/watchdog.c\n\n# DVB scan\nDVBSCAN-$(CONFIG_DVBSCAN) += check_dvb_scan\nALL-$(CONFIG_DVBSCAN)     += check_dvb_scan\n\n# File bundles\nSRCS-${CONFIG_BUNDLE}     += bundle.c\nBUNDLES-yes               += src/webui/static\nBUNDLES-yes               += data/conf\nBUNDLES-${CONFIG_DVBSCAN} += data/dvb-scan\nBUNDLES                    = $(BUNDLES-yes)\n\n#\n# Documentation\n#\n\nMD-TO-C    = PYTHONIOENCODING=utf-8 $(PYTHON) support/doc/md_to_c.py\n\nSRCS-yes   += src/docs.c\nI18N-C-DOCS = src/docs_inc.c\nI18N-DOCS   = $(wildcard docs/markdown/*.md)\nI18N-DOCS  += $(wildcard docs/markdown/inc/*.md)\nI18N-DOCS  += $(wildcard docs/class/*.md)\nI18N-DOCS  += $(wildcard docs/property/*.md)\nI18N-DOCS  += $(wildcard docs/wizard/*.md)\nMD-ROOT     = $(patsubst docs/markdown/%.md,%,$(sort $(wildcard docs/markdown/*.md)))\nMD-ROOT    += $(patsubst docs/markdown/inc/%.md,inc/%,$(sort $(wildcard docs/markdown/inc/*.md)))\nMD-CLASS    = $(patsubst docs/class/%.md,%,$(sort $(wildcard docs/class/*.md)))\nMD-PROP     = $(patsubst docs/property/%.md,%,$(sort $(wildcard docs/property/*.md)))\nMD-WIZARD   = $(patsubst docs/wizard/%.md,%,$(sort $(wildcard docs/wizard/*.md)))\n\n#\n# Internationalization\n#\nPO-FILES  = $(wildcard $(foreach f,$(LANGUAGES),intl/tvheadend.$(f).po))\nPO-FILES += $(wildcard $(foreach f,$(LANGUAGES-DOC),intl/docs/tvheadend.doc.$(f).po))\nSRCS += src/tvh_locale.c\n\nPOC_PY=PYTHONIOENCODING=utf-8 $(PYTHON) support/poc.py\n\n#\n# Add-on modules\n#\n\nSRCS_EXTRA = src/extra/capmt_ca.c\n\n#\n# Variable transformations\n#\n\nSRCS      += $(SRCS-yes)\nOBJS       = $(SRCS:%.c=$(BUILDDIR)/%.o)\nOBJS_EXTRA = $(SRCS_EXTRA:%.c=$(BUILDDIR)/%.so)\nDEPS       = ${OBJS:%.o=%.d}\n\nifeq ($(CONFIG_FFMPEG_STATIC),yes)\nALL-yes   += ${BUILDDIR}/libffmpeg_stamp\nendif\nifeq ($(CONFIG_HDHOMERUN_STATIC),yes)\nALL-yes   += ${BUILDDIR}/libhdhomerun_stamp\nendif\n\nSRCS += build.c timestamp.c\n\n#\n# Build Rules\n#\n\n# Default\n.PHONY: all\nall: $(ALL-yes) ${PROG}\n\n# Check configure output is valid\n.config.mk: configure\n\t@echo \"./configure output is old, please re-run\"\n\t@false\n\n# Recreate configuration\n.PHONY: reconfigure\nreconfigure:\n\t$(ROOTDIR)/configure $(CONFIGURE_ARGS)\n\n# Binary\n${PROG}: .config.mk make_webui $(OBJS)\n\t$(pCC) -o $@ $(OBJS) $(CFLAGS) $(LDFLAGS)\n\n# Object\n${BUILDDIR}/%.o: %.c\n\t@mkdir -p $(dir $@)\n\t$(pCC) -MD -MP $(CFLAGS) -c -o $@ $<\n\n# Add-on\n${BUILDDIR}/%.so: ${SRCS_EXTRA}\n\t@mkdir -p $(dir $@)\n\t${pCC} -O -fbuiltin -fomit-frame-pointer -fPIC -shared -o $@ $< -ldl\n\n# Clean\n.PHONY: clean\nclean:\n\trm -rf ${BUILDDIR}/src ${BUILDDIR}/bundle* ${BUILDDIR}/build.o ${BUILDDIR}/timestamp.* \\\n\t       src/tvh_locale_inc.c\n\tfind . -name \"*~\" | xargs rm -f\n\t$(MAKE) -f Makefile.webui clean\n\n# Distclean\n.PHONY: distclean\ndistclean: clean\n\trm -rf ${ROOTDIR}/build.*\n\trm -rf ${ROOTDIR}/debian/.debhelper\n\trm -rf ${ROOTDIR}/data/dvb-scan\n\trm -f ${ROOTDIR}/.config.mk\n\n# Create version\n$(BUILDDIR)/src/version.o: $(ROOTDIR)/src/version.c\n$(ROOTDIR)/src/version.c: FORCE\n\t@$(ROOTDIR)/support/version $@ > /dev/null\nFORCE:\n\n# Include dependency files if they exist.\nifeq ($(filter clean distclean, $(MAKECMDGOALS)),)\n-include $(DEPS)\nendif\n\n# Some hardcoded deps\nsrc/webui/extjs.c: make_webui\n\n# Include OS specific targets\ninclude ${ROOTDIR}/support/${OSENV}.mk\n\n# Build files\nDATE_FMT = %Y-%m-%dT%H:%M:%S%z\nifdef SOURCE_DATE_EPOCH\n\tBUILD_DATE ?= $(shell date -u -d \"@$(SOURCE_DATE_EPOCH)\" \"+$(DATE_FMT)\"  2>/dev/null || date -u -r \"$(SOURCE_DATE_EPOCH)\" \"+$(DATE_FMT)\" 2>/dev/null || date -u \"+$(DATE_FMT)\")\nelse\n\tBUILD_DATE ?= $(shell date \"+$(DATE_FMT)\")\nendif\n$(BUILDDIR)/timestamp.c: FORCE\n\t@mkdir -p $(dir $@)\n\t@echo '#include \"build.h\"' > $@\n\t@echo 'const char* build_timestamp = \"'$(BUILD_DATE)'\";' >> $@\n\n$(BUILDDIR)/timestamp.o: $(BUILDDIR)/timestamp.c\n\t$(pCC) $(CFLAGS) -c -o $@ $<\n\n$(BUILDDIR)/build.o: $(BUILDDIR)/build.c\n\t@mkdir -p $(dir $@)\n\t$(pCC) $(CFLAGS) -c -o $@ $<\n\n# Documentation\n$(BUILDDIR)/docs-timestamp: $(I18N-DOCS) support/doc/md_to_c.py\n\t@-rm -f src/docs_inc.c src/docs_inc.c.new\n\t@$(MD-TO-C) --batch --list=\"$(MD-ROOT)\" \\\n\t            --inpath=\"docs/markdown/%s.md\" \\\n\t            --name=\"tvh_doc_root_%s\" \\\n\t            --out=\"src/docs_inc.c.new\"\n\t@$(MD-TO-C) --batch --list=\"$(MD-CLASS)\" \\\n\t            --inpath=\"docs/class/%s.md\" \\\n\t            --name=\"tvh_doc_%s_class\" \\\n\t            --out=\"src/docs_inc.c.new\"\n\t@$(MD-TO-C) --batch --list=\"$(MD-PROP)\" \\\n\t            --inpath=\"docs/property/%s.md\" \\\n\t            --name=\"tvh_doc_%s_property\" \\\n\t            --out=\"src/docs_inc.c.new\"\n\t@$(MD-TO-C) --batch --list=\"$(MD-WIZARD)\" \\\n\t            --inpath=\"docs/wizard/%s.md\" \\\n\t            --name=\"tvh_doc_wizard_%s\" \\\n\t            --out=\"src/docs_inc.c.new\"\n\t@$(MD-TO-C) --pages=\"$(MD-ROOT)\" >> src/docs_inc.c.new\n\t@mv src/docs_inc.c.new src/docs_inc.c\n\t@touch $@\n\nsrc/docs_inc.c: $(BUILDDIR)/docs-timestamp\n\nsrc/docs_inc.h: $(BUILDDIR)/docs-timestamp\n\nsrc/docs.c: src/docs_inc.c src/docs_inc.h\n\n$(BUILDDIR)/src/docs.o: $(BUILDDIR)/docs-timestamp $(I18N-DOCS) support/doc/md_to_c.py\n\n# Internationalization\n.PHONY: intl\nintl:\n\t@printf \"Building tvheadend.pot\\n\"\n\t@$(XGETTEXT2) -o intl/tvheadend.pot.new $(I18N-C)\n\t@sed -e 's/^\"Language: /\"Language: en/' < intl/tvheadend.pot.new > intl/tvheadend.pot\n\t$(MAKE) -f Makefile.webui LANGUAGES=\"$(LANGUAGES)\" WEBUI=std intl\n\t@printf \"Building docs/tvheadend.doc.pot\\n\"\n\t@$(XGETTEXT2) -o intl/docs/tvheadend.doc.pot.new $(I18N-C-DOCS)\n\t@sed -e 's/^\"Language: /\"Language: en/' < intl/docs/tvheadend.doc.pot.new > intl/docs/tvheadend.doc.pot\n\t$(MAKE)\n\n\nintl/tvheadend.pot:\n\n$(BUILDDIR)/src/tvh_locale.o: src/tvh_locale_inc.c\nsrc/tvh_locale_inc.c: $(PO-FILES)\n\t@printf \"Building $@\\n\"\n\t@$(POC_PY) --in=\"$(PO-FILES)\" > $@.new\n\t@mv $@.new $@\n\n# Bundle files\n$(BUILDDIR)/bundle.o: $(BUILDDIR)/bundle.c\n\t@mkdir -p $(dir $@)\n\t$(pCC) $(CFLAGS) -I${ROOTDIR}/src -c -o $@ $<\n\n$(BUILDDIR)/bundle.c: $(DVBSCAN-yes) make_webui\n\t@mkdir -p $(dir $@)\n\t$(pMKBUNDLE) -o $@ -d ${BUILDDIR}/bundle.d $(BUNDLE_FLAGS) $(BUNDLES:%=$(ROOTDIR)/%)\n\n.PHONY: make_webui\nmake_webui:\n\t$(MAKE) -f Makefile.webui LANGUAGES=\"$(LANGUAGES)\" all\n\n# Static FFMPEG\n\nifeq ($(CONFIG_FFMPEG_STATIC),yes)\nsrc/libav.h ${SRCS-LIBAV} ${DEPS-LIBAV}: ${BUILDDIR}/libffmpeg_stamp\nendif\n\n${BUILDDIR}/libffmpeg_stamp: ${BUILDDIR}/ffmpeg/build/ffmpeg/lib/libavcodec.a\n\t@touch $@\n\n${BUILDDIR}/ffmpeg/build/ffmpeg/lib/libavcodec.a: Makefile.ffmpeg\nifeq ($(CONFIG_PCLOUD_CACHE),yes)\n\t$(MAKE) -f Makefile.ffmpeg libcacheget\n\t$(MAKE) -f Makefile.ffmpeg build\n\t$(MAKE) -f Makefile.ffmpeg libcacheput\nelse\n\t$(MAKE) -f Makefile.ffmpeg build\nendif\n\n# Static HDHOMERUN library\n\nifeq ($(CONFIG_HDHOMERUN_STATIC),yes)\nsrc/input/mpegts/tvhdhomerun/tvhdhomerun_private.h ${SRCS-HDHOMERUN}: ${BUILDDIR}/libhdhomerun_stamp\nendif\n\n${BUILDDIR}/libhdhomerun_stamp: ${BUILDDIR}/hdhomerun/libhdhomerun/libhdhomerun.a\n\t@touch $@\n\n${BUILDDIR}/hdhomerun/libhdhomerun/libhdhomerun.a: Makefile.hdhomerun\nifeq ($(CONFIG_PCLOUD_CACHE),yes)\n\t$(MAKE) -f Makefile.hdhomerun libcacheget\n\t$(MAKE) -f Makefile.hdhomerun build\n\t$(MAKE) -f Makefile.hdhomerun libcacheput\nelse\n\t$(MAKE) -f Makefile.hdhomerun build\nendif\n\n.PHONY: ffmpeg_rebuild\nffmpeg_rebuild:\n\t-rm ${BUILDDIR}/ffmpeg/build/ffmpeg/lib/libavcodec.a\n\t-rm ${BUILDDIR}/libffmpeg_stamp\n\t-rm ${BUILDDIR}/ffmpeg/ffmpeg-*/.tvh_build\n\t$(MAKE) all\n\n# linuxdvb git tree\n$(ROOTDIR)/data/dvb-scan/.stamp:\n\t@echo \"Receiving data/dvb-scan from https://github.com/tvheadend/dtv-scan-tables.git#tvheadend\"\n\t@rm -rf $(ROOTDIR)/data/dvb-scan/*\n\t@$(ROOTDIR)/support/getmuxlist $(ROOTDIR)/data/dvb-scan\n\t@touch $@\n\n.PHONY: check_dvb_scan\ncheck_dvb_scan: $(ROOTDIR)/data/dvb-scan/.stamp\n\n# dvb-s / enigma2 / satellites.xml\n$(ROOTDIR)/data/dvb-scan/dvb-s/.stamp: $(ROOTDIR)/data/satellites.xml \\\n                                       $(ROOTDIR)/data/dvb-scan/.stamp\n\t@echo \"Generating data/dvb-scan/dvb-s from data/satellites.xml\"\n\t@if ! test -s $(ROOTDIR)/data/satellites.xml ; then echo \"Put your satellites.xml file to $(ROOTDIR)/data/satellites.xml\"; exit 1; fi\n\t@if ! test -d $(ROOTDIR)/data/dvb-scan/dvb-s ; then mkdir $(ROOTDIR)/data/dvb-scan/dvb-s ; fi\n\t@rm -rf $(ROOTDIR)/data/dvb-scan/dvb-s/*\n\t@PYTHONIOENCODING=utf-8 $(PYTHON) $(ROOTDIR)/support/sat_xml_scan.py \\\n\t\t$(ROOTDIR)/data/satellites.xml $(ROOTDIR)/data/dvb-scan/dvb-s\n\t@touch $(ROOTDIR)/data/dvb-scan/dvb-s/.stamp\n\n.PHONY: satellites_xml\nsatellites_xml: $(ROOTDIR)/data/dvb-scan/dvb-s/.stamp\n\n#\n# perf\n#\n\nPERF_DATA = /tmp/tvheadend.perf.data\nPERF_SLEEP ?= 30\n\n$(PERF_DATA): FORCE\n\tperf record -F 16000 -g -p $$(pidof tvheadend) -o $(PERF_DATA) sleep $(PERF_SLEEP)\n\n.PHONY: perf-record\nperf-record: $(PERF_DATA)\n\n.PHONY: perf-graph\nperf-graph:\n\tperf report --stdio -g graph -i $(PERF_DATA)\n\n.PHONY: perf-report\nperf-report:\n\tperf report --stdio -g none -i $(PERF_DATA)\n"
        },
        {
          "name": "Makefile.common",
          "type": "blob",
          "size": 0.1884765625,
          "content": "# common (consts) file\n\nLANGUAGES_ALL  = ach ady ar bg cs da de en_US en_GB es et fa fi fr\nLANGUAGES_ALL += he hr hu it ko lv lt nl no pl pt ro ru sl sk sq sv\nLANGUAGES_ALL += tr uk zh zh-Hans\n"
        },
        {
          "name": "Makefile.ffmpeg",
          "type": "blob",
          "size": 18.3564453125,
          "content": "#\n#  Static Audio/Video libs (ffmpeg version) build\n#  Copyright (C) 2014 Jaroslav Kysela\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nDIR :=  $(dir $(lastword $(MAKEFILE_LIST)))\ninclude $(DIR)/.config.mk\n\nifneq (,$(filter i386 i486 i586 i686 pentium,$(ARCH)))\nFFMPEG_HOST   := $(ARCH)-linux-gnu\nFFMPEG_TARGET := x86-linux-gcc\nendif\n\nunexport CFLAGS\nunexport LDFLAGS\n\n\n# ##############################################################################\n# Upstream Packages\n# ##############################################################################\n\nEXTLIBS        =\nCOMPONENTS     = avutil avcodec avformat swscale swresample avfilter\nPROTOCOLS      = file http https hls mmsh mmst rtmp rtmpe rtmps rtmpt rtmpte rtmpts \\\n                 ffrtmpcrypt ffrtmphttp rtp srtp tcp udp udplite unix crypto\nDECODERS       = mpeg2video mp2 aac vorbis ac3 eac3 aac_latm opus h264 hevc theora flac\nENCODERS       = mpeg2video mp2 aac vorbis flac\nMUXERS         = mpegts matroska mp4\nDEMUXERS       = mpegts matroska hls flv live_flv\nBSFS           = h264_mp4toannexb hevc_mp4toannexb\nFILTERS        = yadif format hwupload hwdownload scale null aresample anull\nHWACCELS       =\n\nNASM_VER       = 2.16.03\nNASM           = nasm-$(NASM_VER)\nNASM_TB        = $(NASM).tar.gz\nNASM_URL       = https://www.nasm.us/pub/nasm/releasebuilds/$(NASM_VER)/$(NASM_TB)\nNASM_SHA1      = 432742c550039d202db6e34bb3efab646be74b56\nNASM_DIFFS     = remove-invalid-pure_func-qualifiers.diff\n\nLIBX264_VER    = 7ed753b10a61d0be95f683289dfb925b800b0676\nLIBX264        = x264-$(LIBX264_VER)\nLIBX264_TB     = $(LIBX264).tar.bz2\nLIBX264_URL    = https://code.videolan.org/videolan/x264/-/archive/$(LIBX264_VER)/$(LIBX264_TB)\nLIBX264_SHA1   = 39132c219a6bae73b322fdfbb3012c6988f3a456\n\nLIBX265_VER    = 3.6\nLIBX265        = x265_$(LIBX265_VER)\nLIBX265_TB     = $(LIBX265).tar.gz\nLIBX265_URL    = https://bitbucket.org/multicoreware/x265_git/downloads/$(LIBX265_TB)\nLIBX265_SHA1   = 51fc4592a9f1e340d87a51233361cc5a3ffd739d\nLIBX265_DIFFS  = libx265.pic.diff\nLIBX265_DIFFS  += libx265-silence.patch\n\nLIBVPX_VER     = 1.14.1\nLIBVPX         = libvpx-$(LIBVPX_VER)\nLIBVPX_TB      = $(LIBVPX).tar.gz\nLIBVPX_URL     = https://github.com/webmproject/libvpx/archive/v$(LIBVPX_VER)/$(LIBVPX_TB)\nLIBVPX_SHA1    = 04af9fed7d7e2d686dc164d78c85908499420dd4\n\nLIBOGG         = libogg-1.3.5\nLIBOGG_TB      = $(LIBOGG).tar.gz\nLIBOGG_URL     = https://ftp.osuosl.org/pub/xiph/releases/ogg/$(LIBOGG_TB)\nLIBOGG_SHA1    = 56f24c585af430e6714f96d096c60ddf9539ebfd\n\nLIBTHEORA      = libtheora-1.2.0alpha1\nLIBTHEORA_TB   = $(LIBTHEORA).tar.gz\nLIBTHEORA_URL  = https://ftp.osuosl.org/pub/xiph/releases/theora/$(LIBTHEORA_TB)\nLIBTHEORA_SHA1 = f03e6b1648b7574a249ee19cd386ff3d5c9deb84\n\nLIBVORBIS      = libvorbis-1.3.7\nLIBVORBIS_TB   = $(LIBVORBIS).tar.gz\nLIBVORBIS_URL  = https://ftp.osuosl.org/pub/xiph/releases/vorbis/$(LIBVORBIS_TB)\nLIBVORBIS_SHA1 = 2b415495f89b103138a23da5017a2a00837c6c94\n\n\nLIBFDKAAC_VER  = 2.0.3\nLIBFDKAAC      = fdk-aac-$(LIBFDKAAC_VER)\nLIBFDKAAC_TB   = v$(LIBFDKAAC_VER).tar.gz\nLIBFDKAAC_URL  = https://github.com/mstorsjo/fdk-aac/archive/refs/tags/$(LIBFDKAAC_TB)\nLIBFDKAAC_SHA1 = a7f42c67c0b82cdb2cd773d3ec31042fb5647c0d\n\nLIBOPUS        = opus-1.3.1\nLIBOPUS_TB     = $(LIBOPUS).tar.gz\nLIBOPUS_URL    = https://archive.mozilla.org/pub/opus/$(LIBOPUS_TB)\nLIBOPUS_SHA1   = ed226536537861c9f0f1ef7ca79dffc225bc181b\n\nFFNVCODEC_VER  = 12.1.14.0\nFFNVCODEC      = nv-codec-headers-$(FFNVCODEC_VER)\nFFNVCODEC_TB   = $(FFNVCODEC).tar.gz\nFFNVCODEC_URL  = https://github.com/FFmpeg/nv-codec-headers/releases/download/n$(FFNVCODEC_VER)/nv-codec-headers-$(FFNVCODEC_VER).tar.gz\nFFNVCODEC_SHA1 = 74231bb5572ebde98652a26ce98ede7895b4c730\n\nFFMPEG         = ffmpeg-6.1.1\nFFMPEG_TB      = $(FFMPEG).tar.bz2\nFFMPEG_URL     = https://ffmpeg.org/releases/$(FFMPEG_TB)\nFFMPEG_SHA1    = 157e7b0f6521142e1ebd786175e363e9f1b59312\n\n\n# ##############################################################################\n# Library Config\n# ##############################################################################\n\nLIB_NAME  := ffmpeg\nLIB_ROOT  := $(BUILDDIR)/$(LIB_NAME)\nEBUILDIR  := $(LIB_ROOT)/build\nEPREFIX0  := ffmpeg\nEPREFIX   := $(EBUILDIR)/$(EPREFIX0)\nLIB_FILES := \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBX264)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBX264)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBX265)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBX265)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBVPX)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBVPX)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBTHEORA)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBTHEORA)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBOGG)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBOGG)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBVORBIS)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBVORBIS)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBOPUS)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(LIBOPUS)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(FFNVCODEC)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(FFNVCODEC)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(FFMPEG)/.tvh_download \\\n\t\t$(LIB_ROOT)/$(FFMPEG)/.tvh_build \\\n\t\t$(EPREFIX)\n\ninclude $(DIR)/Makefile.static\n\n.PHONY: build $(PHONY)\nbuild: $(LIB_ROOT)/$(FFMPEG)/.tvh_build\n\t$(call LIBCACHEGET_TIMESTAMP)\n\n\n# ##############################################################################\n# Build Rules\n# ##############################################################################\n\nexport PATH := $(LIB_ROOT)/build/ffmpeg/bin:$(PATH)\n\nifeq ($(CONFIG_PIE),yes)\nCFLAGS_PI = -fPIE\nelse\nCFLAGS_PI = -fPIC\nendif\n\nECFLAGS   := -I$(EPREFIX)/include $(CFLAGS_PI)\nELIBS     := -L$(EPREFIX)/lib -ldl\n\nAUTOGEN   := ./autogen.sh\n\nCONFIGURE := FFMPEG_PREFIX=$(EPREFIX) \\\n             PKG_CONFIG=$(ROOTDIR)/support/pkg-config.ffmpeg \\\n             ./configure --prefix=/ffmpeg --enable-static --disable-shared\nCONFIGURE_PI := CC=\"$(COMPILER) $(CFLAGS_PI)\" $(CONFIGURE)\nCONFIGURE_FFMPEG := $(CONFIGURE)\n\n# ##############################################################################\n# NASM\n#\n\n$(LIB_ROOT)/$(NASM)/.tvh_download:\n\t$(call DOWNLOAD,$(NASM_URL),$(LIB_ROOT)/$(NASM_TB),$(NASM_SHA1))\n\t$(call UNTAR,$(NASM_TB),z)\n\t$(call PATCH,$(NASM),$(NASM_DIFFS))\n\t@touch $@\n\n$(LIB_ROOT)/$(NASM)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_download\n\tcd $(LIB_ROOT)/$(NASM) && $(CONFIGURE_PI) \\\n\t\t--libdir=/$(EPREFIX0)/lib\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(NASM) install\n\t@touch $@\n\n\n# ##############################################################################\n# LIBX264\n#\n\nifeq (yes,$(CONFIG_LIBX264))\n\nEXTLIBS  += libx264\nENCODERS += libx264\nFFMPEG_DIFFS += ffmpeg.libx264.diff\n\nendif\n\n\nifeq (yes,$(CONFIG_LIBX264_STATIC))\n\nifneq (,$(DEB_BUILD_GNU_TYPE))\nLIBX264_HOST := --host=$(DEB_BUILD_GNU_TYPE)\nendif\n\nifeq (,$(LIBX264_HOST))\nifneq (,$(FFMPEG_HOST))\nLIBX264_HOST := --host=$(FFMPEG_HOST)\nendif\nendif\n\n$(LIB_ROOT)/$(LIBX264)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBX264_URL),$(LIB_ROOT)/$(LIBX264_TB),$(LIBX264_SHA1))\n\t$(call UNTAR,$(LIBX264_TB),j)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBX264)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBX264)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBX264) && $(CONFIGURE) \\\n\t\t--extra-asflags=\"-DPIC\" \\\n\t\t--extra-cflags=\"$(CFLAGS_PI)\" \\\n\t\t--disable-cli \\\n\t\t--disable-swscale \\\n\t\t--disable-lavf \\\n\t\t--disable-avs \\\n\t\t--disable-ffms \\\n\t\t--disable-gpac \\\n\t\t--disable-lsmash \\\n\t\t$(LIBX264_HOST)\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBX264) install\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(LIBX264)/.tvh_download:\n\t@mkdir -p $(LIB_ROOT)/$(LIBX264)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBX264)/.tvh_build: \\\n\t$(LIB_ROOT)/$(LIBX264)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# LIBX265\n#\n\nifeq (yes,$(CONFIG_LIBX265))\n\nEXTLIBS  += libx265\nENCODERS += libx265\n\nendif\n\n\nifeq (yes,$(CONFIG_LIBX265_STATIC))\n\n$(LIB_ROOT)/$(LIBX265)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBX265_URL),$(LIB_ROOT)/$(LIBX265_TB),$(LIBX265_SHA1))\n\t$(call UNTAR,$(LIBX265_TB),z)\n\t$(call PATCH,$(LIBX265),$(LIBX265_DIFFS))\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBX265)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBX265)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBX265)/build/linux && cmake -G \"Unix Makefiles\" \\\n\t\t-DCMAKE_INSTALL_PREFIX=\"/ffmpeg\" \\\n\t\t-DENABLE_SHARED:BOOL=OFF \\\n\t\t../../source\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBX265)/build/linux install\n\tmv $(EPREFIX)/lib/pkgconfig/x265.pc $(EPREFIX)/lib/pkgconfig/x265.pc.old\n\tsed -e 's,-ldl,-ldl -lpthread,g' \\\n\t\t< $(EPREFIX)/lib/pkgconfig/x265.pc.old \\\n\t\t> $(EPREFIX)/lib/pkgconfig/x265.pc\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(LIBX265)/.tvh_download:\n\t@mkdir -p $(LIB_ROOT)/$(LIBX265)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBX265)/.tvh_build: \\\n\t$(LIB_ROOT)/$(LIBX265)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# LIBVPX\n#\n\nifeq (yes,$(CONFIG_LIBVPX))\n\nEXTLIBS  += libvpx\nENCODERS += libvpx_vp8 libvpx_vp9\n\nendif\n\n\nifeq (yes,$(CONFIG_LIBVPX_STATIC))\n\nifneq (,$(FFMPEG_TARGET))\nLIBVPX_TARGET := --target=$(FFMPEG_TARGET)\nendif\n\n$(LIB_ROOT)/$(LIBVPX)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBVPX_URL),$(LIB_ROOT)/$(LIBVPX_TB),$(LIBVPX_SHA1))\n\t$(call UNTAR,$(LIBVPX_TB),z)\n\t$(call PATCH,$(LIBVPX)/build/make/,$(LIBVPX_DIFFS))\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBVPX)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBVPX)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBVPX) && \\\n\t\t$(CONFIGURE) \\\n\t\t--extra-cflags=\"$(CFLAGS_PI)\" \\\n\t\t--disable-examples \\\n\t\t--disable-docs \\\n\t\t--disable-unit-tests \\\n\t\t$(LIBVPX_TARGET)\n\tDIST_DIR=$(EPREFIX) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBVPX) install\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(LIBVPX)/.tvh_download:\n\t@mkdir -p $(LIB_ROOT)/$(LIBVPX)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBVPX)/.tvh_build: \\\n\t$(LIB_ROOT)/$(LIBVPX)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# LIBOGG\n#\n\nifeq (yes,$(CONFIG_LIBOGG_STATIC))\n\n$(LIB_ROOT)/$(LIBOGG)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBOGG_URL),$(LIB_ROOT)/$(LIBOGG_TB),$(LIBOGG_SHA1))\n\t$(call UNTAR,$(LIBOGG_TB),z)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBOGG)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBOGG)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBOGG) && \\\n\t\t$(CONFIGURE_PI) \\\n\t\t--libdir=/$(EPREFIX0)/lib\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBOGG) install\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# LIBTHEORA\n#\n\nifeq (yes,$(CONFIG_LIBTHEORA))\n\nEXTLIBS  += libtheora\nENCODERS += libtheora\n\nendif\n\n\nifeq (yes,$(CONFIG_LIBTHEORA_STATIC))\n\nifeq (,$(LIBTHEORA_HOST))\nifneq (,$(FFMPEG_HOST))\nLIBTHEORA_HOST := --host=$(FFMPEG_HOST)\nendif\nendif\n\n$(LIB_ROOT)/$(LIBTHEORA)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBTHEORA_URL),$(LIB_ROOT)/$(LIBTHEORA_TB),$(LIBTHEORA_SHA1))\n\t$(call UNTAR,$(LIBTHEORA_TB),z)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBTHEORA)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBOGG)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBTHEORA)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBTHEORA) && \\\n\t\t$(CONFIGURE_PI) \\\n\t\t--libdir=/$(EPREFIX0)/lib \\\n\t\t--with-ogg=$(EPREFIX) \\\n\t\t--disable-examples \\\n\t\t--disable-spec \\\n\t\t$(LIBTHEORA_HOST)\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBTHEORA) install\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(LIBTHEORA)/.tvh_download:\n\t@mkdir -p $(LIB_ROOT)/$(LIBTHEORA)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBTHEORA)/.tvh_build: \\\n\t$(LIB_ROOT)/$(LIBTHEORA)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# LIBVORBIS\n#\n\nifeq (yes,$(CONFIG_LIBVORBIS))\n\nEXTLIBS  += libvorbis\nDECODERS += libvorbis\nENCODERS += libvorbis\n\nendif\n\n\nifeq (yes,$(CONFIG_LIBVORBIS_STATIC))\n\n$(LIB_ROOT)/$(LIBVORBIS)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBVORBIS_URL),$(LIB_ROOT)/$(LIBVORBIS_TB),$(LIBVORBIS_SHA1))\n\t$(call UNTAR,$(LIBVORBIS_TB),z)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBVORBIS)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBOGG)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBVORBIS)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBVORBIS) && \\\n\t\t$(CONFIGURE_PI) \\\n\t\t--libdir=/$(EPREFIX0)/lib \\\n\t\t--with-ogg=$(EPREFIX)\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBVORBIS) install\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(LIBVORBIS)/.tvh_download:\n\t@mkdir -p $(LIB_ROOT)/$(LIBVORBIS)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBVORBIS)/.tvh_build: \\\n\t$(LIB_ROOT)/$(LIBVORBIS)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# LIBFDKAAC\n#\n\nifeq (yes,$(CONFIG_LIBFDKAAC))\n\nEXTLIBS  += libfdk-aac\nENCODERS += libfdk_aac\n\nendif\n\n\nifeq (yes,$(CONFIG_LIBFDKAAC_STATIC))\n\n$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBFDKAAC_URL),$(LIB_ROOT)/$(LIBFDKAAC_TB),$(LIBFDKAAC_SHA1))\n\t$(call UNTAR,$(LIBFDKAAC_TB),z)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBFDKAAC) && $(AUTOGEN) && CXXFLAGS=\"-std=c++98 -fPIC\" $(CONFIGURE_PI) \\\n\t\t--libdir=/$(EPREFIX0)/lib\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBFDKAAC) install\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_download:\n\t@mkdir -p $(LIB_ROOT)/$(LIBFDKAAC)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_build: \\\n\t$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# LIBOPUS\n#\n\nifeq (yes,$(CONFIG_LIBOPUS))\n\nEXTLIBS  += libopus\nENCODERS += libopus\n\nendif\n\n\nifeq (yes,$(CONFIG_LIBOPUS_STATIC))\n\n$(LIB_ROOT)/$(LIBOPUS)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBOPUS_URL),$(LIB_ROOT)/$(LIBOPUS_TB),$(LIBOPUS_SHA1))\n\t$(call UNTAR,$(LIBOPUS_TB),z)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBOPUS)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBOPUS)/.tvh_download\n\tcd $(LIB_ROOT)/$(LIBOPUS) && $(CONFIGURE_PI) \\\n\t\t--disable-doc \\\n\t\t--disable-extra-programs\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(LIBOPUS) install\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(LIBOPUS)/.tvh_download:\n\t@mkdir -p $(LIB_ROOT)/$(LIBOPUS)\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBOPUS)/.tvh_build: \\\n\t$(LIB_ROOT)/$(LIBOPUS)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# NVENC\n#\n\nifeq (yes,$(CONFIG_NVENC))\n\n## YOU MUST INSTALL CUDA from NVIDIA for \"libnpp\" \nEXTLIBS   += nvenc cuvid libnpp\nENCODERS  += h264_nvenc hevc_nvenc\nDECODERS  += h264_cuvid hevc_cuvid\nHWACCELS  += h264_nvdec hevc_nvdec vp8_nvdec vp9_nvdec mjpeg_nvdec mpeg1_nvdec mpeg2_nvdec mpeg4_nvdec\nECFLAGS   += -I/usr/local/cuda/include\n\n## NVIDIA LIB for \"libnpp\" \nCONFIGURE_FFMPEG += --extra-ldflags=-L/usr/local/cuda/lib64\n\n$(LIB_ROOT)/$(FFNVCODEC)/.tvh_download:\n\t$(call DOWNLOAD,$(FFNVCODEC_URL),$(LIB_ROOT)/$(FFNVCODEC_TB),$(FFNVCODEC_SHA1))\n\t$(call UNTAR,$(FFNVCODEC_TB),z)\n\t@touch $@\n\n$(LIB_ROOT)/$(FFNVCODEC)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(FFNVCODEC)/.tvh_download\n\tmv $(LIB_ROOT)/$(FFNVCODEC)/Makefile $(LIB_ROOT)/$(FFNVCODEC)/Makefile.old\n\tsed -e 's,PREFIX = /usr/local,PREFIX ?= /usr/local,g' \\\n\t\t< $(LIB_ROOT)/$(FFNVCODEC)/Makefile.old \\\n\t\t> $(LIB_ROOT)/$(FFNVCODEC)/Makefile\n\tDESTDIR=$(EBUILDIR) PREFIX=/ffmpeg \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(FFNVCODEC) install\n\t@touch $@\n\nelse\n\n$(LIB_ROOT)/$(FFNVCODEC)/.tvh_download:\n\t@mkdir $(LIB_ROOT)/$(FFNVCODEC)\n\t@touch $@\n\n$(LIB_ROOT)/$(FFNVCODEC)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(FFNVCODEC)/.tvh_download\n\t@touch $@\n\nendif\n\n\n# ##############################################################################\n# VAAPI\n#\n\nifeq (yes,$(CONFIG_VAAPI))\n\nEXTLIBS  += vaapi\nENCODERS += h264_vaapi hevc_vaapi vp8_vaapi vp9_vaapi\nHWACCELS += mpeg2_vaapi h264_vaapi hevc_vaapi vp9_vaapi\nFILTERS  += deinterlace_vaapi scale_vaapi denoise_vaapi sharpness_vaapi\n\nendif\n\n\n# ##############################################################################\n# MMAL\n#\n\nifeq (yes,$(CONFIG_MMAL))\n\nEXTLIBS  += mmal\nHWACCELS += h264_mmal mpeg2_mmal\nDECODERS += h264_mmal\n\nendif\n\n\n# ##############################################################################\n# OMX\n#\n\nifeq (yes,$(CONFIG_OMX))\n\nEXTLIBS  += omx\nENCODERS += h264_omx\n\nendif\n\nifeq (yes,$(CONFIG_OMX_RPI))\n\nEXTLIBS  += omx_rpi\n\nendif\n\n\n# ##############################################################################\n# Misc.\n#\n\nifneq (,$(filter yes,$(CONFIG_LIBVORBIS) $(CONFIG_LIBTHEORA)))\n\nMUXERS += ogg\n\nendif\n\n\nifneq (,$(filter yes,$(CONFIG_NVENC) $(CONFIG_LIBFDKAAC)))\n\nEXTLIBS += nonfree\n\nendif\n\n\n# ##############################################################################\n# FFMPEG\n#\n\n$(LIB_ROOT)/$(FFMPEG)/.tvh_download:\n\t@mkdir -p $(EBUILDIR)\n\t$(call DOWNLOAD,$(FFMPEG_URL),$(LIB_ROOT)/$(FFMPEG_TB),$(FFMPEG_SHA1))\n\t$(call UNTAR,$(FFMPEG_TB),j)\n\t$(call PATCH,$(FFMPEG),$(FFMPEG_DIFFS))\n\t@touch $@\n\n$(LIB_ROOT)/$(FFMPEG)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(NASM)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBX264)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBX265)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBVPX)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBTHEORA)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBVORBIS)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBFDKAAC)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(LIBOPUS)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(FFNVCODEC)/.tvh_build \\\n\t\t$(LIB_ROOT)/$(FFMPEG)/.tvh_download\n\tcd $(LIB_ROOT)/$(FFMPEG) && $(CONFIGURE_FFMPEG) \\\n\t\t--disable-all \\\n\t\t--enable-gpl \\\n\t\t--enable-nonfree \\\n\t\t--extra-cflags=\"$(ECFLAGS)\" \\\n\t\t--extra-libs=\"$(ELIBS)\" \\\n\t\t--pkg-config=\"$(ROOTDIR)/support/pkg-config.ffmpeg\" \\\n\t\t--enable-openssl \\\n\t\t$(foreach component,$(COMPONENTS),--enable-$(component)) \\\n\t\t$(foreach extlib,$(EXTLIBS),--enable-$(extlib)) \\\n\t\t$(foreach protocol,$(PROTOCOLS),--enable-protocol=$(protocol)) \\\n\t\t$(foreach decoder,$(DECODERS),--enable-decoder=$(decoder)) \\\n\t\t$(foreach encoder,$(ENCODERS),--enable-encoder=$(encoder)) \\\n\t\t$(foreach demuxer,$(DEMUXERS),--enable-demuxer=$(demuxer)) \\\n\t\t$(foreach muxer,$(MUXERS),--enable-muxer=$(muxer)) \\\n\t\t$(foreach bsf,$(BSFS),--enable-bsf=$(bsf)) \\\n\t\t$(foreach filter,$(FILTERS),--enable-filter=$(filter)) \\\n\t\t$(foreach hwaccel,$(HWACCELS),--enable-hwaccel=$(hwaccel)) \\\n                --disable-programs \\\n                --disable-doc \\\n                --disable-htmlpages \\\n                --disable-manpages \\\n                --disable-podpages \\\n                --disable-txtpages\n\tDESTDIR=$(EBUILDIR) \\\n\t\t$(MAKE) -C $(LIB_ROOT)/$(FFMPEG) install\n\t@touch $@\n"
        },
        {
          "name": "Makefile.hdhomerun",
          "type": "blob",
          "size": 2.775390625,
          "content": "#\n#  HDhomerun library build\n#  Copyright (C) 2014 Jaroslav Kysela\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nDIR :=  $(dir $(lastword $(MAKEFILE_LIST)))\ninclude $(DIR)/.config.mk\n\nunexport CFLAGS\nunexport LDFLAGS\n\nifeq ($(CONFIG_PIE),yes)\nCFLAGS += -fPIE\nelse\nCFLAGS += -fPIC\nendif\n\n# ###########################################################################\n# Upstream Packages\n# ###########################################################################\n\nLIBHDHR         = libhdhomerun_20210624\nLIBHDHR_TB      = $(LIBHDHR).tgz\nLIBHDHR_URL     = https://download.silicondust.com/hdhomerun/$(LIBHDHR_TB)\nLIBHDHR_SHA1    = 9db6089b956de4e58084b623937f5fc3231fff0b\n\n# ###########################################################################\n# Library Config\n# ###########################################################################\n\nLIB_NAME       := hdhomerun\nLIB_ROOT       := $(BUILDDIR)/$(LIB_NAME)\nLIB_FILES      := \\\n\t\t\t$(LIB_ROOT)/$(LIBHDHR)/.tvh_download \\\n\t\t\t$(LIB_ROOT)/$(LIBHDHR)/.tvh_build \\\n\t\t\t$(LIB_ROOT)/libhdhomerun/libhdhomerun.a \\\n\t\t\t$(LIB_ROOT)/libhdhomerun/*.h\nLIB_DIFFS      := hdhomerun.diff\n\ninclude $(DIR)/Makefile.static\n\n.PHONY: build\nbuild: $(LIB_ROOT)/$(LIBHDHR)/.tvh_build\n\t$(call LIBCACHEGET_TIMESTAMP)\n\n# ###########################################################################\n# Build Rules\n# ###########################################################################\n\nexport PATH := $(LIB_ROOT)/build/bin:$(PATH)\n\n#\n# libhdhomerun\n#\n\n-include $(LIB_ROOT)/$(LIBHDHR)/Makefile\n\nOBJS := $(foreach file,$(LIBSRCS),$(LIB_ROOT)/$(LIBHDHR)/$(basename $(file)).o)\n\n$(LIB_ROOT)/$(LIBHDHR)/%.o: $(LIB_ROOT)/$(LIBHDHR)/%.c\n\t$(CC) -MD -MP $(CFLAGS) -fPIE -c -o $@ $<\n\n$(LIB_ROOT)/$(LIBHDHR)/libhdhomerun.a: $(OBJS)\n\t$(AR) rcs $@ $^\n\n$(LIB_ROOT)/$(LIBHDHR)/.tvh_download:\n\t$(call DOWNLOAD,$(LIBHDHR_URL),$(LIB_ROOT)/$(LIBHDHR_TB),$(LIBHDHR_SHA1))\n\t$(call UNTAR,$(LIBHDHR_TB),z)\n\tln -sf libhdhomerun $(LIB_ROOT)/$(LIBHDHR)\n\t$(call PATCH,$(LIBHDHR),$(LIB_DIFFS))\n\t@touch $@\n\n$(LIB_ROOT)/$(LIBHDHR)/.tvh_build: \\\n\t\t$(LIB_ROOT)/$(LIBHDHR)/.tvh_download\n\t$(MAKE) -f Makefile.hdhomerun $(LIB_ROOT)/$(LIBHDHR)/libhdhomerun.a\n\t@touch $@\n\n.PHONY: static_libhdhr_clean\nstatic_libhdhr_clean:\n\t@rm -rf $(LIB_ROOT)\n"
        },
        {
          "name": "Makefile.static",
          "type": "blob",
          "size": 3.5458984375,
          "content": "#\n# Copyright (C) 2008-2018 Tvheadend Project (https://tvheadend.org)\n#\n# This file is part of Tvheadend\n#\n# Tvheadend is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Tvheadend is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Tvheadend.  If not, see <http://www.gnu.org/licenses/>.\n#\n# For more details, including opportunities for alternative licensing,\n# please read the LICENSE file.\n#\n# ############################################################################\n\n# ############################################################################\n# Generic makefile for handling static 3rd party libraries\n# ############################################################################\n\n#\n# Required inputs\n#\n#   LIB_NAME\t\t\t- The name of the library used in files uploaded/downloaded\n#   LIB_FILES\t\t\t- The files to be packaged\n#\n# Optional inputs\n#\n#   PCLOUD_CACHE    - Use cached builds from pcloud\n#   PCLOUD_USER     - The pcloud user account for uploads\n#   PCLOUD_PASS     - The pcloud password\n#   PCLOUD_BASEDIR  - The base directory for uploads\n#   PCLOUD_HASHDIR  - The public hash for the base directory for downloads\n#\n\nMAKEFILE      ?= $(firstword $(MAKEFILE_LIST))\n\n# ./configure override\nPCLOUD_CACHE ?= $(CONFIG_PCLOUD_CACHE)\n\ndefault: libcacheput\n\n# Setup environment for scripts\nexport ARCH\nexport CODENAME\nexport ROOTDIR\nexport BUILDDIR\nexport LIBDIR\nexport PCLOUD_CACHE\nexport PCLOUD_USER\nexport PCLOUD_PASS\nexport PCLOUD_BASEDIR\nexport PCLOUD_HASHDIR\n\nLIB_STATIC_STAMP := $(BUILDDIR)/$(LIB_NAME)_static_stamp\n\ndefine LIBCACHEGET_TIMESTAMP\n\t@touch $(LIB_STATIC_STAMP)\nendef\n\n# Download cache\n.PHONY: libcacheget\nlibcacheget:\nifeq ($(PCLOUD_CACHE),yes)\n\t@if ! test -f $(LIB_STATIC_STAMP); then\\\n           ( $(ROOTDIR)/support/lib.sh download $(LIB_NAME) &&\\\n\t     $(ROOTDIR)/support/lib.sh unpack $(LIB_NAME) ) || true;\\\n           touch $(LIB_STATIC_STAMP);\\\n         fi\nendif\n\n# Download and Upload on demand\n.PHONY: libcacheput\nlibcacheput: build\nifneq ($(PCLOUD_USER),)\n\t@$(ROOTDIR)/support/lib.sh upload $(LIB_NAME) $(LIB_FILES)\nendif\n\n# ############################################################################\n# Helper routines\n# ############################################################################\n\ndefine DOWNLOAD\n\t@mkdir -p $(LIB_ROOT)/build\n\t@if test -z \"$${TVHEADEND_FILE_CACHE}\"; then \\\n\t\tprintf \"WGET            $(1)\\n\"; \\\n\t\twget --no-verbose --no-check-certificate -O $(2) $(1); \\\n\telse \\\n\t\tfile=$$(basename $(2)); \\\n\t\tcp \"$$TVHEADEND_FILE_CACHE/$${file}\" $(2); \\\n\tfi\n\t@{ \\\n\t\tsum=$$(sha1sum $(2) | cut -d ' ' -f 1); \\\n\t\tprintf \"SHA1SUM test '$${sum}' == '$(3)': \"; \\\n\t\ttest \"y$${sum}\" = \"y$(3)\"; \\\n\t}\n\t@echo \"OK\"\nendef\n\ndefine UNTAR\n\t@{ \\\n\t\tprintf \"UNTAR           $(1)\\n\"; \\\n\t\ttar x -C $(LIB_ROOT) -$(2)f $(LIB_ROOT)/$(1); \\\n\t}\nendef\n\ndefine PATCH\n\t@{ \\\n\t\tcd $(LIB_ROOT)/$(1); \\\n\t\tfor f in $(2); do \\\n\t\t\tp=$(ROOTDIR)/support/patches/$${f}; \\\n\t\t\tprintf \"PATCH           $${p}\\n\"; \\\n\t\t\tpatch -p0 -i $${p}; \\\n\t\tdone \\\n\t}\nendef\n\n# ############################################################################\n# Editor Configuration\n#\n# vim:sts=2:ts=2:sw=2:et!\n# ############################################################################\n"
        },
        {
          "name": "Makefile.webui",
          "type": "blob",
          "size": 10.0068359375,
          "content": "#\n#  Tvheadend WEBUI interface\n#  Copyright (C) 2015 Jaroslav Kysela\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n#\n# Configuration\n#\n\ninclude $(dir $(lastword $(MAKEFILE_LIST)))Makefile.common\nIAM=$(firstword $(MAKEFILE_LIST))\nWEBDIR ?= src/webui\nLANGUAGES ?= $(LANGUAGES_ALL)\nROOTPATH = static\n\nifneq ($(WEBUI),)\n\nTOPDIR=$(dir $(IAM))\ninclude $(TOPDIR)/.config.mk\nEXTJSPATH = $(ROOTPATH)/extjs\nCSS_PY = PYTHONIOENCODING=utf-8 $(PYTHON) support/css.py\nRUN_JS = PYTHONIOENCODING=utf-8 $(PYTHON) vendor/rjsmin-1.0.10/rjsmin.py\nRUN_CSS = PYTHONIOENCODING=utf-8 $(PYTHON) vendor/rcssmin-1.0.5/rcssmin.py\nGZIPCMD += -n\nXGETTEXT2 ?= $(XGETTEXT) --language=JavaScript --from-code=utf-8  --add-comments=/ -k_ -kN_ -s\nMSGMERGE ?= msgmerge\nPOJS_PY = PYTHONIOENCODING=utf-8 $(PYTHON) support/pojs.py\n\nifeq ($(WEBUI),std)\nDEBUG =\nelse\nDEBUG = -debug\nendif\n\nifeq ($(PLATFORM), freebsd)\nSTAT_ARG=-f \"%-35N %7z\"\nelse\nSTAT_ARG=--printf=\"%-35n %7s\\n\"\nendif\n\nJAVASCRIPT =\nJAVASCRIPT2 =\nJAVASCRIPT_TV =\nCSS_INIT =\nCSS_DONE =\nCSS_BLUE =\nCSS_GRAY =\nCSS_ACCESS =\nCSS_TV =\n\n#\n# base extjs files\n#\n\nJAVASCRIPT += $(EXTJSPATH)/adapter/ext/ext-base$(DEBUG).js\nJAVASCRIPT += $(EXTJSPATH)/ext-all$(DEBUG).js\n\n#\n# CSS\n#\n\nCSS_INIT   += $(EXTJSPATH)/resources/css/ext-all-notheme.css\nCSS_DONE   += $(ROOTPATH)/livegrid/resources/css/ext-ux-livegrid.css\nCSS_DONE   += $(EXTJSPATH)/examples/ux/gridfilters/css/GridFilters.css\nCSS_DONE   += $(EXTJSPATH)/examples/ux/gridfilters/css/RangeMenu.css\nCSS_DONE   += $(EXTJSPATH)/examples/ux/css/Spinner.css\nCSS_DONE   += static/xcheckbox/xcheckbox.css\nCSS_DONE   += static/app/ext.css\n\nCSS_BLUE   += $(EXTJSPATH)/resources/css/xtheme-blue.css\nCSS_BLUE2  += static/app/ext-blue.css\n\nCSS_GRAY   += $(EXTJSPATH)/resources/css/xtheme-gray.css\nCSS_GRAY2  += static/app/ext-gray.css\n\nCSS_ACCESS += $(EXTJSPATH)/resources/css/xtheme-access.css\nCSS_ACCESS2+= static/app/ext-access.css\n\n#\n# extjs extensions\n#\n\nMARKED      = $(ROOTPATH)/app/marked.js\n\nJAVASCRIPT += $(ROOTPATH)/app/i18n.js\nJAVASCRIPT += $(ROOTPATH)/app/extensions.js\nJAVASCRIPT += $(MARKED)\nJAVASCRIPT += $(ROOTPATH)/livegrid/livegrid-all.js\nJAVASCRIPT += $(ROOTPATH)/lovcombo/lovcombo-all.js\nJAVASCRIPT += $(ROOTPATH)/multiselect/multiselect.js\nJAVASCRIPT += $(ROOTPATH)/multiselect/ddview.js\nJAVASCRIPT += $(ROOTPATH)/xcheckbox/xcheckbox.js\nJAVASCRIPT += $(ROOTPATH)/checkcolumn/CheckColumn.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/GridFilters.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/filter/Filter.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/filter/BooleanFilter.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/filter/DateFilter.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/filter/ListFilter.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/filter/NumericFilter.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/filter/StringFilter.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/menu/ListMenu.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/gridfilters/menu/RangeMenu.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/Spinner.js\nJAVASCRIPT += $(EXTJSPATH)/examples/ux/SpinnerField.js\nJAVASCRIPT += $(ROOTPATH)/app/i18n-post.js\n\n#\n# app itself\n#\n\nJAVASCRIPT += $(ROOTPATH)/app/namespace.js\nJAVASCRIPT += $(ROOTPATH)/smoothie.js\nJAVASCRIPT += $(ROOTPATH)/app/comet.js\nJAVASCRIPT += $(ROOTPATH)/app/cteditor.js\nJAVASCRIPT += $(ROOTPATH)/app/acleditor.js\n\nCACLIENT-$(CONFIG_CWC) = yes\nCACLIENT-$(CONFIG_CCCAM) = yes\nCACLIENT-$(CONFIG_CAPMT) = yes\n\nifeq ($(CACLIENT-yes), yes)\nJAVASCRIPT += $(ROOTPATH)/app/caclient.js\nendif\n\nJAVASCRIPT += $(ROOTPATH)/app/tvadapters.js\nJAVASCRIPT += $(ROOTPATH)/app/idnode.js\nJAVASCRIPT += $(ROOTPATH)/app/profile.js\nifeq ($(CONFIG_LIBAV), yes)\nJAVASCRIPT += $(ROOTPATH)/app/codec.js\nendif\nJAVASCRIPT += $(ROOTPATH)/app/esfilter.js\nifeq ($(CONFIG_MPEGTS), yes)\nJAVASCRIPT += $(ROOTPATH)/app/mpegts.js\nendif\nifeq ($(CONFIG_TIMESHIFT), yes)\nJAVASCRIPT += $(ROOTPATH)/app/timeshift.js\nendif\nJAVASCRIPT += $(ROOTPATH)/app/chconf.js\nJAVASCRIPT += $(ROOTPATH)/app/epg.js\nJAVASCRIPT += $(ROOTPATH)/app/epgevent.js\nJAVASCRIPT += $(ROOTPATH)/app/dvr.js\nJAVASCRIPT += $(ROOTPATH)/app/epggrab.js\nJAVASCRIPT += $(ROOTPATH)/app/config.js\nJAVASCRIPT += $(ROOTPATH)/app/tvhlog.js\nJAVASCRIPT += $(ROOTPATH)/app/status.js\nJAVASCRIPT += $(ROOTPATH)/app/wizard.js\nJAVASCRIPT += $(ROOTPATH)/tv.js\nJAVASCRIPT += $(ROOTPATH)/app/servicemapper.js\nJAVASCRIPT += $(ROOTPATH)/app/ratinglabels.js\n\nJAVASCRIPT += $(ROOTPATH)/app/tvheadend.js\n\n#\n# tv\n#\n\nCSS_TV += $(ROOTPATH)/tv.css\nJAVASCRIPT_TV += $(EXTJSPATH)/adapter/ext/ext-base$(DEBUG).js\nJAVASCRIPT_TV += $(EXTJSPATH)/ext-all$(DEBUG).js\nJAVASCRIPT_TV += $(ROOTPATH)/app/i18n.js\nJAVASCRIPT_TV += $(ROOTPATH)/tv.js\n\n#\n# real source paths\n#\n\nJAVASCRIPT_SRC = $(foreach f,$(JAVASCRIPT),$(WEBDIR)/$(f))\nCSS_BLUE_SRC   = $(foreach f,$(CSS_INIT) $(CSS_BLUE) $(CSS_DONE) $(CSS_BLUE2),$(WEBDIR)/$(f))\nCSS_GRAY_SRC   = $(foreach f,$(CSS_INIT) $(CSS_GRAY) $(CSS_DONE) $(CSS_GRAY2),$(WEBDIR)/$(f))\nCSS_ACCESS_SRC = $(foreach f,$(CSS_INIT) $(CSS_ACCESS) $(CSS_DONE) $(CSS_ACCESS2),$(WEBDIR)/$(f))\nCSS_SRC        = $(CSS_BLUE_SRC) $(CSS_GRAY_SRC) $(CSS_ACCESS_SRC)\n\nJAVASCRIPT_TV_SRC = $(foreach f,$(JAVASCRIPT_TV),$(WEBDIR)/$(f))\nCSS_TV_SRC     = $(foreach f,$(CSS_TV),$(WEBDIR)/$(f))\n\n#\n# Internationalization\n#\nPO-FILES = $(foreach f,$(LANGUAGES),intl/js/tvheadend.js.$(f).po)\nJSI-FILES = $(foreach f,$(LANGUAGES),src/webui/static/intl/tvh.$(f).js.gz)\n\nendif # WEBUI defined\n\nifndef V\nVV = @\nendif\n\ndefine GO_JS\n\t$(VV)$(CSS_PY) --in=\"$^\" utf-check\n\t$(VV)cat $^ > $@.tmp\n\t$(VV)$(RUN_JS) < $@.tmp > $@.tmp2\n\t@stat $(STAT_ARG) $@.tmp $@.tmp2\n\t$(VV)$(GZIPCMD) -c $@.tmp2 > $@.tmp\n\t@rm $@.tmp2\n\t@mv $@.tmp $@\n\t@stat $(STAT_ARG) $@\nendef\n\ndefine GO_CSS\n\t$(VV)$(CSS_PY) --in=\"$^\" utf-check\n\t$(VV)$(CSS_PY) --in=\"$^\" > $@.tmp\n\t$(VV)$(RUN_CSS) < $@.tmp > $@.tmp2\n\t@stat $(STAT_ARG) $@.tmp $@.tmp2\n\t$(VV)$(GZIPCMD) -c $@.tmp2 > $@.tmp\n\t@rm $@.tmp2\n\t@mv $@.tmp $@\n\t@stat $(STAT_ARG) $@\nendef\n\ndefine merge-po\n\t@if ! test -r \"$(1)\"; then \\\n\t  sed -e 's/Content-Type: text\\/plain; charset=CHARSET/Content-Type: text\\/plain; charset=utf-8/' < \"$(2)\" > \"$(1).new\"; \\\n\telse \\\n\t  $(MSGMERGE) -o $(1).new $(1) $(2); \\\n\tfi\n\t@mv $(1).new $(1)\nendef\n\ndefine go-po\n\t@printf \"Building $(1)\\n\"\n\t@mkdir -p $(dir $(1))\n\t$(VV)$(POJS_PY) --in=\"$(2)\" > $(1).new\n\t@echo \"tvh_locale_lang = '$(subst .,,$(suffix $(basename $(2))))';\" >> $(1).new\n\t$(VV)$(GZIPCMD) -c $(1).new > $@.new2\n\t@rm $(1).new\n\t@mv $(1).new2 $(1)\nendef\n\nall:\n\t$(MAKE) -f $(IAM) WEBUI=std   compile-std\n\t$(MAKE) -f $(IAM) WEBUI=debug compile-debug\n\n$(WEBDIR)/extjs-std.c: $(JAVASCRIPT_SRC) $(CSS_SRC)\n\t$(VV)printf 'extjs_lcss(hq, \"redir/theme.css\");\\n' > $@\n\t$(VV)printf 'extjs_load(hq, \"redir/locale.js\");\\n' >> $@\n\t$(VV)printf 'extjs_load(hq, \"static/tvh.js.gz\");\\n' >> $@\n\n$(WEBDIR)/extjs-debug.c: $(JAVASCRIPT_SRC) $(CSS_SRC)\n\t$(VV)printf '$(foreach f,$(CSS_INIT),extjs_lcss(hq, \"$(f)\");\\n)' > $@\n\t$(VV)printf 'extjs_lcss(hq, \"redir/theme.debug.css\");\\n' >> $@\n\t$(VV)printf '$(foreach f,$(CSS_DONE),extjs_lcss(hq, \"$(f)\");\\n)' >> $@\n\t$(VV)printf 'extjs_lcss(hq, \"redir/theme.app.debug.css\");\\n' >> $@\n\t$(VV)printf 'extjs_load(hq, \"redir/locale.js\");\\n' >> $@\n\t$(VV)printf '$(foreach f,$(JAVASCRIPT),extjs_load(hq, \"$(f)\");\\n)' >> $@\n\n$(WEBDIR)/extjs-tv-std.c: $(JAVASCRIPT_TV_SRC) $(CSS_TV_SRC)\n\t$(VV)printf 'extjs_lcss(hq, \"static/tvh-tv.css.gz\");\\n' > $@\n\t$(VV)printf 'extjs_load(hq, \"redir/locale.js\");\\n' >> $@\n\t$(VV)printf 'extjs_load(hq, \"static/tvh-tv.js.gz\");\\n' >> $@\n\n$(WEBDIR)/extjs-tv-debug.c: $(JAVASCRIPT_TV_SRC) $(CSS_TV_SRC)\n\t$(VV)printf '$(foreach f,$(CSS_TV),extjs_lcss(hq, \"$(f)\");\\n)' > $@\n\t$(VV)printf 'extjs_load(hq, \"redir/locale.js\");\\n' >> $@\n\t$(VV)printf '$(foreach f,$(JAVASCRIPT_TV),extjs_load(hq, \"$(f)\");\\n)' >> $@\n\n$(WEBDIR)/$(ROOTPATH)/tvh.js.gz: $(JAVASCRIPT_SRC)\n\t$(call GO_JS)\n\n$(WEBDIR)/$(ROOTPATH)/tvh.blue.css.gz: $(CSS_BLUE_SRC)\n\t$(call GO_CSS)\n\n$(WEBDIR)/$(ROOTPATH)/tvh.gray.css.gz: $(CSS_GRAY_SRC)\n\t$(call GO_CSS)\n\n$(WEBDIR)/$(ROOTPATH)/tvh.access.css.gz: $(CSS_ACCESS_SRC)\n\t$(call GO_CSS)\n\n$(WEBDIR)/$(ROOTPATH)/tvh-tv.js.gz: $(JAVASCRIPT_TV_SRC)\n\t$(call GO_JS)\n\n$(WEBDIR)/$(ROOTPATH)/tvh-tv.css.gz: $(CSS_TV_SRC)\n\t$(call GO_CSS)\n\n.PHONY: compile-std\ncompile-std: $(WEBDIR)/$(ROOTPATH)/tvh.js.gz $(WEBDIR)/$(ROOTPATH)/tvh.blue.css.gz \\\n             $(WEBDIR)/$(ROOTPATH)/tvh.gray.css.gz $(WEBDIR)/$(ROOTPATH)/tvh.access.css.gz \\\n             $(WEBDIR)/$(ROOTPATH)/tvh-tv.js.gz $(WEBDIR)/$(ROOTPATH)/tvh-tv.css.gz \\\n             $(WEBDIR)/extjs-std.c $(WEBDIR)/extjs-tv-std.c $(JSI-FILES)\n\t@echo \"WEBUI std finished\"\n\n.PHONY: compile-debug\ncompile-debug: $(WEBDIR)/extjs-debug.c $(WEBDIR)/extjs-tv-debug.c\n\t@echo \"WEBUI debug finished\"\n\n# Internationalization\n.PHONY: intl\nintl:\n\t@printf \"Building intl/js/tvheadend.js.pot\\n\"\n\t@$(XGETTEXT2) -o intl/js/tvheadend.js.pot.new $(filter-out $(WEBDIR)/$(MARKED),$(JAVASCRIPT_SRC))\n\t@sed -e 's/^\"Language: /\"Language: en/' < intl/js/tvheadend.js.pot.new > intl/js/tvheadend.js.pot\n\nintl/js/tvheadend.js.pot:\n\n#intl/js/tvheadend.js.en_US.po: intl/js/tvheadend.js.pot\n#\t$(call merge-po,$@,$<)\n\n#intl/js/tvheadend.js.en_GB.po: intl/js/tvheadend.js.pot\n#\t$(call merge-po,$@,$<)\n\n#intl/js/tvheadend.js.de.po: intl/js/tvheadend.js.pot\n#\t$(call merge-po,$@,$<)\n\nsrc/webui/static/intl/tvh.%.js.gz: intl/js/tvheadend.js.%.po\n\t$(call go-po,$@,$<)\n\n.PHONY:\nclean:\n\trm -f $(foreach f,tvh.js tvh.css tvh-tv.js tvh-tv.css,\\\n\t\t$(WEBDIR)/$(ROOTPATH)/$(f).gz \\\n\t\t$(WEBDIR)/$(ROOTPATH)/$(f).tmp \\\n\t\t$(WEBDIR)/$(ROOTPATH)/$(f).tmp2) \\\n              $(WEBDIR)/extjs-std.c $(WEBDIR)/extjs-tv-std.c \\\n              $(WEBDIR)/extjs-debug.c $(WEBDIR)/extjs-tv-debug.c\n"
        },
        {
          "name": "README.Docker.md",
          "type": "blob",
          "size": 16.7080078125,
          "content": "# TVHeadend in Docker\nTVHeadend can be run within a Docker container. This provides isolation from\nother processes by running it in a containerized environment. As this is not\nand in-depth tutorial on docker, those with Docker, containers or cgroups see\n[docker.com][docker].\n\n\n## Building the TVHeadend image\nWhile it is recommended to pull the image from the [GHCR][ghcr] (GitHub\nContainer Registry), it is certainly possible to build the image locally.\n\nTo do so, clone this repository:\n\n$ git clone https://github.com/tvheadend/tvheadend\n\nThen, from within the repository\n\n```sh\ndocker image build\n    --rm \\\n    --tag 'tvheadend:issue-123' \\\n    './'\n```\n\nThe tag 'issue-123' in the example, is just that, an example, anything can be\nused for the tag.\n\n> _Note_: Omitting the tag, will use `latest` by default.\n\n\n## Running the TVHeadend image\nIf the container wasn't built with the above instructions, it can be optionally\nbe pulled from the [GHCR][ghcr] first instead.\n\n```sh\ndocker image pull ghcr.io/tvheadend/tvheadend:latest\n```\n\n> _Note_: The `latest` tag can be replaced with any desired tag, including\n> `master` for the git development version.\n\nRunning the TVHeadend container is then done as follows.\n\n```sh\ndocker container run \\\n    --interactive \\\n    --name 'TVHeadend_container_01' \\\n    --rm \\\n    --tty \\\n    'ghcr.io/tvheadend/tvheadend:issue-123' \\\n    --firstrun\n```\n\n> _Note_: Docker will try to pull a container it doesn't know about yet. So if\n> the container was not previously built or pulled, the `run` sub command\n> will try to pull it instead. Likewise, `--pull always` can be used to force\n> a pull. See the docker documentation for more details.\n\nThe above will now run TVHeadend and the log output should be visible.\n\nIn the snippet above, the `--firstrun` flag was used. This flag is of course\noptional. Please do read the remainder of the next chapter\n[Persistently storing configuration](#Persistently-storing-configuration)\nto learn more about where configuration is stored.\n\n\n## Persistently storing configuration\nContainers do not store files persistently, they are ephemeral by design.\nObviously, storing of configuration (or video) data is desirable and of course\nis there a solution for this. There are three (probably more) potential options.\n\nIt is also important be aware that the configuration directory can be different\ndepending on how TVHeadend is started. If tvheadend is started, and a directory\nexists in `/var/lib/tvheadend` or `/etc/tvheadend` which matches the UID of the\nuser executing TVHeadend, those locations will be preferred. Since the container\nwill always run as the user `tvheadend` and these locations are always created,\nTVHeadend in the container will always use `/var/lib/tvheadend` as its\nconfiguration directory.\n\nBefore diving more deeply into things, the current container has two default\nvolumes defined, `/var/lib/tvheadend` and `/var/lib/tvheadend/recordings`. These\ncan also be defined as named/external volumes as well as more that can be added.\n\n\n### Secrets\nDocker secrets are files that can be mounted in a container. They are not\never written to disk (they live in `/run/secrets/`). While useful, not\napplicable, as they can't be controlled runtime, and store one file per secret.\n\n\n### Config\nVery similar to Secrets, but stored on disk within the container.\n\n\n### Volumes\nVolumes come in a few flavors actually, but the basics are the same. A local\ndirectory is mounted inside the container. The flavors come in the form of\nwhere to get the source directory from.\n\n\n#### Local directory\nLets say the docker container should share the configuration files with the\nlocal user. In such case, the local `.config/hts` directory is needed within\nthe container, can be easily mounted with the following example. Note that\nthe `--volume` flag requires a absolute path.\n\n```sh\ndocker container run \\\n    --interactive \\\n    --name 'TVHeadend_container_01' \\\n    --rm \\\n    --tty \\\n    --user \"$(id -u):$(id -g)\" \\\n    --volume '/home/user/.config/hts:/var/lib/tvheadend:rw' \\\n    --volume '/home/user/Videos:/var/lib/tvheadend/recordings:rw' \\\n    'ghcr.io/tvheadend/tvheadend:issue-123'\n```\n\n> _Note_: The `--user` flag is also used here, to ensure file-ownership does\n> not change. By default the TVHeadend container runs as user `tvheadend`\n> which may not have the same UID or GID as the local user. If the `id` command\n> is not available, `\"1000:1000\"` could be used instead, where `1000` would be\n> the actual UID and GID for the current user. The `rw` (read-write) or `ro`\n> (read-only) flags can set the access mode, but are optional.\n\n\n#### Anonymous Volumes\nDocker manage volumes also internally. This is actually very common when using\ndocker containers, as the volumes are fully docker managed. It is even possible\nto share volumes between containers, e.g. have multiple TVHeadend instances\nrunning, with their own configuration, but sharing the recordings volume.\n\nThe TVHeadend container already creates an anonymous volume by default, so that\nconfiguration is stored/re-used. Anonymous volumes are not 'forever persistent'\nand are removed by regular cleanup actions (`docker system prune` for example).\n\n\n#### Named Volumes\nDocker named volumes are manually created and persistently stored. For long\nterm use (using a server for example), they are the preferred way of handling\ndata. Docker compose can create them automatically (more on that later) but\ngenerally, a volume is created beforehand as such.\n\n$ docker volume create 'hts_config'\n\nand mounted as:\n\n```sh\ndocker container run \\\n    --interactive \\\n    --name 'TVHeadend_container_01' \\\n    --rm \\\n    --tty \\\n    --user \"$(id -u):$(id -g)\" \\\n    --volume 'hts_config:/var/lib/tvheadend:rw' \\\n    --volume '/home/user/Videos:/var/lib/tvheadend/recordings:rw' \\\n    'ghcr.io/tvheadend/tvheadend:issue-123'\n```\n\n\n### Additional files\nIt is possible to use the volumes concept to add additional files to an\ndockerized setup. For example if there is a volume holding various picons,\nwhich are created and managed/updated through a different container. The volume\ncan be simply added in the same way.\n\n\n```sh\ndocker container run \\\n    --interactive \\\n    --name 'TVHeadend_container_01' \\\n    --rm \\\n    --tty \\\n    --user \"$(id -u):$(id -g)\" \\\n    --volume 'hts_config:/var/lib/tvheadend:rw' \\\n    --volume '/home/user/Videos:/var/lib/tvheadend/recordings:rw' \\\n    --volume 'picons_volume:/usr/share/picons' \\\n    'ghcr.io/tvheadend/tvheadend:issue-123'\n```\n\n> _Note_: The same can be done for directories holding binaries or scripts\n> but beware that this may not always work as expected. For example if a\n> python script is added, and requires the python interpreter, which is not\n> available in the TVHeadend container, the binary will be there, but it cannot\n> run. The same is true for an executable, if the libraries it depends on are\n> not there, it will fail to run. If in doubt, entering the container by\n> appending `/bin/sh` and running the binary or `ldd`ing may give a clue.\n\n\n### Environment variables\nTVHeadend can also consume environment variables for additional configuration.\nMost notably being the timezone. Environment variables can be easily added from\nthe commandline.\n\n```sh\ndocker container run \\\n    --env 'TZ=\"Etc/UTC\"' \\\n    --interactive \\\n    --name 'TVHeadend_container_01' \\\n    --rm \\\n    --tty \\\n    --user \"$(id -u):$(id -g)\" \\\n    --volume 'hts_config:/var/lib/tvheadend:rw' \\\n    --volume '/home/user/Videos:/var/lib/tvheadend/recordings:rw' \\\n    --volume 'picons_volume:/usr/share/picons' \\\n    'ghcr.io/tvheadend/tvheadend:issue-123'\n```\n\n\n## Configuring devices\nTVHeadend gets most of its use via external devices, DVB tuners and the like.\nThe following section is completely optional however if no devices need to be\nmapped to the container however.\n\nThere are a some caveats depending on static or dynamic devices.\n\nIn both cases, the device needs to exist however when starting docker and\nthe permissions to access the device need to be correct. The TVHeadend\ncontainer is by default part of the `video`, `audio` and `usb` groups,\nwhich seems to use the same UID on at least Gentoo and Alpine, but Arch has\ndifferent GID's.\n\n> _Note_: If there is no shared GID, and no desire to change the GID of the\n> host, it is also possible to give **HIGHLY UNRECOMMENDED** 666 permissions to\n> the device.\n\n\n### Static devices\nFor static devices, that are not added or removed while the container is\nrunning, this is easy enough with the add the `--device` flag. Assuming\nTVHeadend is to take care of all devices, the entire dvb directory can be\nshared.\n\n```sh\ndocker container run \\\n    --env 'TZ=\"Etc/UTC\"' \\\n    --device '/dev/dvb' \\\n    --interactive \\\n    --name 'TVHeadend_container_01' \\\n    --rm \\\n    --tty \\\n    --user \"$(id -u):$(id -g)\" \\\n    --volume 'hts_config:/var/lib/tvheadend:rw' \\\n    --volume '/home/user/Videos:/var/lib/tvheadend/recordings:rw' \\\n    --volume 'picons_volume:/var/lib/picons' \\\n    'ghcr.io/tvheadend/tvheadend:issue-123'\n```\n\n\n### Dynamic devices\nDynamic devices are a lot harder to deal with, due to their dynamic nature.\nFor DVB devices, that only create and remove themselves from `/dev/dvb` this\nshould work. Devices however that get exposed by their exact path, things\nare less easy.\n\nOne thing that seems to work quite well, is to create a specific udev rule,\nthat creates a symlink the device seems to work well. The following example\nexposes a USB serial converter as `/dev/myserialdevice`.\n\n```\nACTION==\"add\",\nSUBSYSTEM==\"tty\",\nATTRS{idVendor}==\"1236\",\nATTRS{idProduct}==\"5678\",\nATTRS{serial}==\"12345678\",\nMODE=\"660\",\nTAG+=\"uaccess\",\nSYMLINK+=\"myserialdevice\"\n```\n\n> _Note_: Worse comes to worst, the entire `/dev` directory could be device\n> mounted or the `--privileged` flag, but are **HIGHLY UNRECOMMENDED** from\n> a security (and isolation) perspective.\n> Also `udevadm info -q all -n '/dev/mydevice'` can be used to inspect a device\n> and also show any currently installed symlinks.\n> Finally, if permission access is not working, the `MODE` could be set to an\n> insecure `666`.\n\n### Other devices\nThe above section spoke mostly of adding DVB devices to the container, but\nother devices can be added as well, for example `/dev/dri` to map a GPU for\nencoding acceleration, assuming the needed tools are available to do so.\n\n> _Tip_: It is actually better to have a dedicated container running conversion\n> and share storage locations via volumes instead.\n\n## Network access\nTVHeadend is a network connected device, but by default, docker will not map\nany ports that a service listen to the host. Full network isolation. As such\nnetwork ports need to be published to the host. The `--publish` flag does so.\nIn the example below, a range of ports gets published to all devices via the\nIP address `0.0.0.0`. This can be restricted to a specific interface via its\nspecific IP address.\n\n```sh\ndocker container run \\\n    --device '/dev/dvb' \\\n    --env 'TZ=\"Etc/UTC\"' \\\n    --interactive \\\n    --name 'TVHeadend_container_01' \\\n    --publish \"0.0.0.0:9981-9982:9981-9982/tcp\" \\\n    --rm \\\n    --tty \\\n    --user \"$(id -u):$(id -g)\" \\\n    --volume 'hts_config:/var/lib/tvheadend:rw' \\\n    --volume '/home/user/Videos:/var/lib/tvheadend/recordings:rw' \\\n    --volume 'picons_volume:/var/lib/picons' \\\n    'ghcr.io/tvheadend/tvheadend:issue-123'\n```\n\n\n> _Note_: A proper docker setup isolates container's networking completely with\n> unique interfaces per container. The default `run` command as used throughout\n> this guide however, uses the default docker network, which means that\n> individual containers are actually on the same network internally. Think of\n> it as a networking router controlled by docker, where all containers are\n> plugged into. A proper setup can be done with the normal `docker run`, but\n> is out of scope, as it is better to use `docker compose` for that. More on\n> this later.\n\n\n### CAClient access\nUsing a CAClient over the network, requires that both containers are on the\nsame network, as they have to be to reach each other. With the default\nnetwork setup of `docker run`, this shouldn't be an issue generally.\n\n\n### Firewall\nThere currently exists a bug with docker, in that a default firewall policy of\n`DROP` on the `INPUT` chain breaks certain container to container traffic.\n\nWhile it is possible to craft `iptables` rules to fix this, the dynamic nature\nof everything makes this very tricky in general. The only work around is\nto set the default policy to `ACCEPT` and ensure the chain `DROPS` all packets.\n\nAssuming `ppp0` is the internet connection that is a monitored interface and\neverything else is `okay`. On an empty/firewall;\n\n$ iptables -A -i ppp0 -j DROP\n$ iptables -P INPUT DROP\n\n\n## Troubleshooting\nTo trouble shoot device pass through, networking, or other permission related\nales, it is possible to start the container in privileged mode, connect directly\nto the host network and run TVHeadend as root.\n\nAll are **NOT** recommended for normal use, but can help isolate issues.\n\n$ docker container run --privileged --user 'root:root' --network 'host' ...\n\n> _Tip_: After running the container as root, make sure to change all\n> ownership back to `tvheadend:tvheadend`, most likely the configuration files.\n> This is best done from within the container using\n>\n> $ chmod -R 'tvheadend:tvheadend' '/home/tvheadend'\n>\n\n\n## Compose\nDocker compose can be used to define whole cluster of services. While this entry\nwill not be an expert piece on how to properly define compose services and setup\nwhole service clusters, here is an example that puts all of the above in a\nsingle file. It is here for reference only and users are expected to know what\nthey are doing when using this.\n\n```yaml\nnetworks:\n  tvheadend: {}\n  oscam: {}\n\nvolumes:\n  tvheadend:\n  oscam:\n\nservices:\n  oscam:\n    image: docker.io/olliver/oscam:latest # TODO\n    cap_drop:\n      - all\n    ulimits:\n      nproc: 64\n      nofile:\n        soft: 1024\n        hard: 65535\n    devices:\n      - /dev/cardreader\n    env_file:\n      - common.env\n    volumes:\n      - oscam:/etc/oscam:rw\n    networks:\n      - oscam\n    expose:\n      - \"1988/udp\"\n      - \"15000/tcp\"\n    ports:\n      - \"8888:8888/tcp\"\n    command: -d 64\n    restart: unless-stopped\n    healthcheck:\n      test: wget localhost:8888 2>&1 | grep -q 'connected'\n\n\nservices:\n  tvheadend:\n    image: ghcr.io/tvheadend/tvheadend:latest\n    cap_drop:\n      - all\n    ulimits:\n      nproc: 256\n      nofile:\n        soft: 8192\n        hard: 65535\n    devices:\n      - /dev/dvb/\n    environment:\n      - TZ: 'Europe/Amsterdam'\n    volumes:\n      - tvheadend:/var/lib/tvheadend:rw\n      - /export/recordings:/var/lib/tvheadend/recordings:rw\n    networks:\n      - tvheadend\n      - oscam\n    ports:\n      - \"9981-9982:9981-9982/tcp\"\n    command: --config '/var/lib/tvheadend' --nosatip\n    restart: unless-stopped\n    healthcheck:\n      test: wget -O - -q 'http://localhost:9981/ping' | grep -q 'PONG'\n```\n\n> _Tip_: The `ulimits` are optional but recommended. Oscam uses a `common.env`\n> file holding the Timezone, TVHeadend uses a variable, both achieve the same.\n\n> _Note_: TVHeadend automatically detects the location for storage, the above\n> is just an example, if the location is changed here however, make sure to\n> update the configuration in the UI to match.\n\n\n## Developing using a container\nWhile it is certainly easy and possible to develop using `docker image build`,\nit is quite slow, as some setup and teardown work needs to be done before\ncompilation can be done, also already compiled objects get discarded.\n\nInstead, the `builder` container, an intermediate step, can be used instead\nand the source directory volume mounted herein.\n\n```sh\ndocker image build\n    --rm \\\n    --tag 'tvheadend:builder' \\\n    --target 'builder' \\\n    './'\n```\n\n> _Note_: Because the way the builder is set up, it will build everything\n> once regardless. This is to keep the current `Containerfile` simple.\n> Other then the cost of some time, it is harmless.\n\nWith the built `builder` image, the container can be entered, and make can be\nissued as normal.\n\n```sh\ndocker container run \\\n    --interactive \\\n    --rm \\\n    --tty \\\n    --user \"$(id -u):$(id -g)\" \\\n    --volume \"$(pwd):/workdir\" \\\n    --workdir '/workdir' \\\n    'tvheadend:builder' '/bin/sh'\n./configure\nmake\n```\n\n> _Tip_: It might be tempting to short-circuit the command `/bin/sh` by\n> replacing it with `make`. However it will still be slower due to the\n> container creation/teardown, but otherwise functionally identical.\n\n> _Note_: As the current working dir is volume mounted into the container,\n> all changes done by the container will be made on the regular source code\n> directory. As such, exiting and re-starting the container won't remove any\n> intermediate object files etc. As the build-container runs normally runs as\n> root, the `--user` flag has to be set as otherwise files created will be\n> owned by root when exiting the container.\n\n\n[docker]: https://www.docker.com\n[ghcr]: https://github.com/tvheadend/tvheadend/pkgs/container/tvheadend\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.03125,
          "content": "![TVHeadend Logo](https://github.com/tvheadend/tvheadend/raw/master/src/webui/static/img/satip-icon120.png)\nTvheadend\n========================================\n(c) 2006 - 2024 Tvheadend Project (https://tvheadend.org)\n\nStatus\n------\n\n[![Build Status](https://github.com/tvheadend/tvheadend/actions/workflows/build-cloudsmith.yml/badge.svg?branch=master)](https://github.com/tvheadend/tvheadend/actions/workflows/build-cloudsmith.yml)\n[![Coverity Scan](https://scan.coverity.com/projects/2114/badge.svg)](https://scan.coverity.com/projects/2114)\n[![Github last commit](https://img.shields.io/github/last-commit/tvheadend/tvheadend)](https://github.com/tvheadend/tvheadend)\n\n[![Releases](https://img.shields.io/github/tag/tvheadend/tvheadend.svg?style=flat-square)](https://github.com/tvheadend/tvheadend/releases)\n[![License](https://img.shields.io/badge/license-GPLv3-blue)](./LICENSE.md) \n[![GitHub Activity](https://img.shields.io/github/commit-activity/y/tvheadend/tvheadend.svg?label=commits)](https://github.com/tvheadend/tvheadend/commits)\n\n[![Hosted By: Cloudsmith](https://img.shields.io/badge/Packages%20hosted%20by-cloudsmith-blue?logo=cloudsmith&style=flat-square)](https://cloudsmith.io/~tvheadend/repos/tvheadend/packages/)\n\n\n\nWhat it is\n----------\n\n![tvheadend front page](https://github.com/tvheadend/tvheadend/raw/master/src/webui/static/img/epg.png)\n\nTvheadend is a TV streaming server and digital video recorder.\n\nIt supports the following inputs:\n\n  * DVB-C(2)\n  * DVB-T(2)\n  * DVB-S(2)\n  * ATSC\n  * SAT>IP\n  * HDHomeRun\n  * IPTV\n    * UDP\n    * HTTP\n\nIt supports the following outputs:\n\n  * HTTP\n  * HTSP (own protocol)\n  * SAT>IP\n\nRunning in docker\n-----------------\nRunning in docker can be as simple as\n\n\t$ docker run --rm ghcr.io/tvheadend/tvheadend:latest\n\nSee [README.Docker.md](README.Docker.md) in this repository for more details.\n\nHow to build for Linux\n----------------------\n\nFirst you need to configure:\n\n\t$ ./configure\n\nIf any dependencies are missing the configure script will complain or attempt\nto disable optional features.\n\nBuild the binary:\n\n\t$ make\n\nAfter build, the binary resides in `build.linux` directory.\n\nThus, to start it, just type:\n\n\t$ ./build.linux/tvheadend\n\nSettings are stored in `$HOME/.hts/tvheadend`.\n\nHow to build for OS X\n---------------------\n\nSame build procedure applies to OS X.\nAfter build, the binary resides in `build.darwin` directory.\n\nOnly network sources (IPTV, SAT>IP) are supported on OS X.\nThere is no support for DVB USB sticks and PCI cards.\nTranscoding is currently not supported.\n\nPackages\n--------\n\nInstall instructions for various distributions can be found at our [Cloudsmith-Repository](https://cloudsmith.io/~tvheadend/repos/tvheadend/packages/).\n\nFurther information\n-------------------\n\nFor more information about building, including generating packages, please visit:\n* https://old.tvheadend.org/projects/tvheadend/wiki/Building\n* https://old.tvheadend.org/projects/tvheadend/wiki/Packaging\n* https://old.tvheadend.org/projects/tvheadend/wiki/Git\n* https://old.tvheadend.org/projects/tvheadend/wiki/Internationalization\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 16.8134765625,
          "content": "#!/bin/bash\n#\n# Tvheadend configure script\n#\n# Copyright (c) 2012 Adam Sutton <dev@adamsutton.me.uk>\n#\n\n# ###########################################################################\n# Setup\n# ###########################################################################\n\nROOTDIR=$(cd \"$(dirname \"$0\")\"; pwd)\ntest -z \"$PKG_CONFIG\" && PKG_CONFIG=pkg-config\n\n#\n# Options\n#\n\nOPTIONS=(\n  \"pie:yes\"\n  \"ccdebug:no\"\n  \"cardclient:auto\"\n  \"cwc:yes\"\n  \"cccam:yes\"\n  \"capmt:yes\"\n  \"constcw:yes\"\n  \"linuxdvb:yes\"\n  \"satip_server:yes\"\n  \"satip_client:yes\"\n  \"hdhomerun_client:no\"\n  \"hdhomerun_server:yes\"\n  \"hdhomerun_static:yes\"\n  \"iptv:yes\"\n  \"tsfile:yes\"\n  \"dvbscan:yes\"\n  \"timeshift:yes\"\n  \"trace:yes\"\n  \"avahi:auto\"\n  \"zlib:auto\"\n  \"libav:auto\"\n  \"ffmpeg_static:yes\"\n  \"libx264:yes\"\n  \"libx264_static:yes\"\n  \"libx265:yes\"\n  \"libx265_static:yes\"\n  \"libvpx:yes\"\n  \"libvpx_static:yes\"\n  \"libtheora:yes\"\n  \"libtheora_static:yes\"\n  \"libvorbis:yes\"\n  \"libvorbis_static:yes\"\n  \"libfdkaac:no\"\n  \"libfdkaac_static:yes\"\n  \"libopus:yes\"\n  \"libopus_static:yes\"\n  \"nvenc:no\"\n  \"vaapi:auto\"\n  \"mmal:no\"\n  \"omx:no\"\n  \"inotify:auto\"\n  \"epoll:auto\"\n  \"pcre:auto\"\n  \"pcre2:auto\"\n  \"uriparser:auto\"\n  \"ccache:auto\"\n  \"tvhcsa:auto\"\n  \"bundle:no\"\n  \"pngquant:no\"\n  \"kqueue:no\"\n  \"dbus_1:auto\"\n  \"android:no\"\n  \"gtimer_check:no\"\n  \"slow_memoryinfo:no\"\n  \"libsystemd_daemon:no\"\n  \"pcloud_cache:yes\"\n  \"ddci:yes\"\n  \"cclang_threadsan:no\"\n  \"gperftools:no\"\n  \"execinfo:auto\"\n)\n\n#\n# Begin\n#\n\n. \"$ROOTDIR/support/configure.inc\"\n\ncase \"$ROOTDIR\" in\n  *\\ * ) die \"The source directory contains a space. It is not supported.\"\nesac\n\n# ###########################################################################\n# Parse arguments\n# ###########################################################################\nopt=\nval=\nfor opt do\n  val=${opt#*=}\n  opt=${opt%%=*}\n  opt=${opt#*--}\n  case \"$opt\" in\n    help)\n      show_help\n      ;;\n    *dir|prefix)\n      eval \"$opt=$val\"\n      ;;\n    gzip)\n      eval \"$(toupper ${opt}CMD)=\\\"$val\\\"\"\n      ;;\n    cc|cflags|ldflags|arch|cpu|platform|python|bzip2|nowerror)\n      eval \"$(toupper $opt)=\\\"$val\\\"\"\n      ;;\n    enable-*)\n      opt=${opt#*-}\n      enable $opt 1\n      ;;\n    disable-*)\n      opt=${opt#*-}\n      disable $opt 1\n      ;;\n  esac\ndone\n\n# ###########################################################################\n# Checks\n# ###########################################################################\n\necho \"Checking support/features\"\n\n#\n# Compiler\n#\n\n# Use ccache\nif enabled_or_auto ccache; then\n  which ccache &> /dev/null\n  if [ $? -eq 0 ]; then\n    echo \"$CC\" | grep -q ccache || CC=\"ccache $CC\"\n    enable ccache\n  elif enabled ccache; then\n    die \"ccache not found, try --disable-ccache\"\n  fi\nfi\n\n# Valiate compiler\ncheck_cc || die 'No C compiler found'\n# We only want libunwind on non-linux plaforms where we have had bad\n# stack traces from existing implementation.\nif [ ${PLATFORM} = \"freebsd\" ]; then\n    check_cc_header libunwind\n    # If we don't have libunwind then fallback to execinfo.\n    if ! enabled libunwind\n    then\n        if enabled_or_auto execinfo; then\n            if check_cc_header execinfo; then\n                enable execinfo\n            else\n                die \"execinfo.h not found (use --disable-execinfo)\"\n           fi\n        fi\n    fi\n\nelse\n    if enabled_or_auto execinfo; then\n        if check_cc_header execinfo; then\n            enable execinfo\n        else\n            die \"execinfo.h not found (use --disable-execinfo)\"\n        fi\n    fi\nfi\ncheck_cc_option mmx\ncheck_cc_option sse2\ncheck_cc_optionW unused-result\n# Some options from https://wiki.debian.org/Hardening\ncheck_cc_optionf stack-protector\ncheck_cc_optionf stack-protector-strong\n# Useful for multi-threaded programs\ncheck_cc_optionf stack-check\ncheck_cc_optionf PIE\n\nif check_cc '\n#if !defined(__clang__)\n#error this is not clang\n#endif\n'; then\n  COMPILER=clang\nelse\n  COMPILER=gcc\nfi\n\ncheck_cc_snippet strlcat '#include <string.h>\n#define TEST test\nint test() {\n  char dst[10];\n  strlcat(\"test\", dst, sizeof(dst));\n  return 0;\n}'\n\ncheck_cc_snippet strlcpy '#include <string.h>\n#define TEST test\nint test() {\n  char dst[10];\n  strlcpy(\"test\", dst, sizeof(dst));\n  return 0;\n}'\n\ncheck_cc_snippet fdatasync '#include <unistd.h>\n#define TEST test\nint test() {\n  fdatasync(0);\n  return 0;\n}'\n\ncheck_cc_snippet getloadavg '#include <stdlib.h>\n#define TEST test\nint test() { return getloadavg(NULL,0); }'\n\ncheck_cc_snippet atomic32 '#include <stdint.h>\nint test(int *ptr){\nreturn __sync_fetch_and_add(ptr, 1);\n}'\n\ncheck_cc_snippet atomic64 '#include <stdint.h>\nuint64_t test(uint64_t *ptr){\nreturn __sync_fetch_and_add(ptr, 1);\n}'\n\ncheck_cc_snippet atomic_time_t '#include <stdint.h>\n#include <time.h>\nuint64_t test(time_t *ptr){\nreturn __sync_fetch_and_add(ptr, 1);\n}'\n\ncheck_cc_snippet atomic_ptr '#include <stdint.h>\n#include <time.h>\nvoid *test(void * volatile *ptr){\nreturn __sync_fetch_and_add(ptr, (void *)1);\n}'\n\ncheck_cc_snippet bitops64 '#include <stdint.h>\n#define TEST test\nint test(void){\n  int l = sizeof(long);\n  return l == 8 ? 0 : 1;\n}'\n\ncheck_cc_snippet lockowner '\n#include <sys/syscall.h>\n#include <unistd.h>\n#include <pthread.h>\n#define TEST test\nint ok = 1;\nvoid *lockowner ( void *p)\n{\n  pthread_mutex_t lock;\n  pthread_mutex_init(&lock, NULL);\n  pthread_mutex_lock(&lock);\n  if (lock.__data.__owner == syscall(SYS_gettid))\n    ok = 0;\n  return NULL;\n}\nint test ( void )\n{\n  pthread_t tid;\n  pthread_create(&tid, NULL, lockowner, NULL);\n  pthread_join(tid, NULL);\n  return ok;\n}' -lpthread\n\ncheck_cc_snippet qsort_r '\n#define __USE_GNU\n#include <stdlib.h>\n#define TEST test\nint test(void)\n{\n  qsort_r(NULL, 0, 0, NULL, NULL);\n  return 0;\n}\n'\n\ncheck_cc_snippet time_ld '\n#define _FILE_OFFSET_BITS 64\n#define _TIME_BITS 64\n#include <stdio.h>\n#include <time.h>\n#define TEST test\nint test(void)\n{\n  printf(\"%ld\", (time_t)1);\n  return 0;\n}\n' '-Wformat -Werror=format'\n\ncheck_cc_snippet time_lld '\n#define _FILE_OFFSET_BITS 64\n#define _TIME_BITS 64\n#include <stdio.h>\n#include <time.h>\n#define TEST test\nint test(void)\n{\n  printf(\"%lld\", (time_t)1);\n  return 0;\n}\n' '-Wformat -Werror=format'\n\nif enabled time_lld; then\n  printf \"    ^ using time_t format 'lld'\\n\"\nelif enabled time_ld; then\n  printf \"    ^ using time_t format 'ld'\\n\"\nelse\n  die 'Unable to determine size of \"time_t\"'\nfi\n\ncheck_cc_snippet stime '\n#include <time.h>\n#define TEST test\nint test(void)\n{\n  time_t t = 1;\n  stime(&t);\n  return 0;\n}\n'\n\ncheck_cc_snippet gmtoff '\n#include <time.h>\n#define TEST test\nint test(void)\n{\n  struct tm x;\n  x.tm_gmtoff = 0;\n  return 0;\n}\n' -DHAS_GMTOFF\n\ncheck_cc_snippet recvmmsg '\n#define _GNU_SOURCE\n#include <stdlib.h>\n#include <sys/socket.h>\n#define TEST test\nint test(void)\n{\n  recvmmsg(0, NULL, 0, 0, NULL);\n  return 0;\n}\n'\n\ncheck_cc_snippet sendmmsg '\n#define _GNU_SOURCE\n#include <stdlib.h>\n#include <sys/socket.h>\n#define TEST test\nint test(void)\n{\n  sendmmsg(0, NULL, 0, 0);\n  return 0;\n}\n'\n\n# a check for the external (gnu)iconv library\n# for build-in libc iconv routines this check should fail\n# note that iconv routines are mandatory\ncheck_cc_snippet gnu_libiconv '\n#include <gnu-libiconv/iconv.h>\n#define TEST test\nint test(void)\n{\n  iconv_t ic = iconv_open(\"ASCII\", \"ASCII\");\n  return 0;\n}\n' -liconv\n\ncheck_cc_snippet libiconv '\n#include <iconv.h>\n#define TEST test\nint test(void)\n{\n  iconv_t ic = iconv_open(\"ASCII\", \"ASCII\");\n  return 0;\n}\n' -liconv\n\nif enabled gnu_libiconv; then\n  printf \"    ^ using gnu libiconv library\\n\"\nelif enabled libiconv; then\n  printf \"    ^ using external iconv library\\n\"\nelse\n  printf \"    ^ using build-in glibc iconv routines\\n\"\nfi\n\ncheck_cc_snippet ifnames '\n#include <net/if.h>\n#define TEST test\nint test(void)\n{\n  struct if_nameindex *ifnames = if_nameindex();\n  if_freenameindex(ifnames);\n  return 0;\n}\n'\n\ncheck_cc_snippet cclang_threadsan '\n#define TEST test\nint test(void){\n#if __has_feature(thread_sanitizer)\n  return 0;\n#endif\n}'\n\n#\n# Python\n#\ncheck_py || echo 'WARN: no python binary found'\ncheck_py_import gzip\n\n#\n# Binaries\n#\ncheck_bin ${PKG_CONFIG} bin_pkg_config || die 'no pkg-config binaries found'\ncheck_bin ${XGETTEXT} || die 'no gettext binaries found'\ncheck_bin ${MSGMERGE} || die 'no gettext binaries found'\ncheck_bin ${GZIPCMD} || die 'no gzip binary found'\ncheck_bin ${BZIP2} || echo 'WARN: no bzip2 binary found'\n\n#\n# SSL\n#\nif [ ${PLATFORM} = \"freebsd\" ]; then\n  # FreeBSD has libssl in base\n  enable ssl\nelif check_pkg openssl || check_pkg libssl; then\n  enable ssl\nelif check_cc_header 'openssl/ssl' ssl; then\n  enable ssl\nelse\n  die \"SSL development support not found\"\nfi\n\n#\n# OS X\n#\nif [ ${PLATFORM} = \"darwin\" ]; then\n  disable linuxdvb\n  disable avahi\n  enable bonjour\nfi\n\n#\n# DVB API\n#\ncheck_cc_header 'linux/dvb/version' linuxdvbapi\nif enabled_or_auto linuxdvb; then\n  if enabled linuxdvbapi; then\n    enable linuxdvb\n    enable linuxdvb_ca\n  elif enabled linuxdvb; then\n    die \"Linux DVB API not found (use --disable-linuxdvb)\"\n  fi\nfi\n\nif enabled linuxdvb; then\n  if enabled_or_auto ddci; then\n    enable ddci\n  fi\nelse\n  disable ddci\nfi\n\n#\n# HDHomeRun - libhdhomerun\n#\nif enabled hdhomerun_static; then\n\n  enable hdhomerun_client\n\nelse\n\n  if enabled_or_auto hdhomerun_client; then\n    if check_cc_header 'libhdhomerun/hdhomerun' libhdhomerun; then\n      enable  hdhomerun_client\n      LDFLAGS=\"$LDFLAGS -lhdhomerun\"\n    fi\n  fi\n\nfi\n\nif enabled libunwind; then\n    LDFLAGS=\"$LDFLAGS -lunwind\"\nfi\n#\n# Gzip\n#\nif enabled_or_auto zlib; then\n  if check_pkg zlib; then\n    enable zlib\n  elif enabled zlib; then\n    die \"Zlib development support not found (use --disable-zlib)\"\n  fi\nfi\n\n#\n# SAT>IP server\n#\nif enabled_or_auto satip_server; then\n  enable upnp\nfi\n\n#\n# SAT>IP client\n#\nif enabled_or_auto satip_client; then\n  enable upnp\nfi\n\n#\n# PCRE2\n#\nif enabled_or_auto pcre2; then\n  if check_pkg libpcre2-8; then\n    enable pcre2\n  elif enabled pcre2; then\n    die \"pcre2 development support not found (use --disable-pcre2)\"\n  fi\nfi\n\n#\n# PCRE\n#\nif enabled pcre2; then\n  disable pcre\nelse\n  if enabled_or_auto pcre; then\n    if check_pkg libpcre; then\n      enable pcre\n    elif enabled pcre; then\n      die \"pcre development support not found (use --disable-pcre)\"\n    fi\n  fi\nfi\n\n#\n# uriparser\n#\nif enabled_or_auto uriparser; then\n  if check_pkg liburiparser; then\n    enable uriparser\n  elif enabled uriparser; then\n    die \"liburiparser development support not found (use --disable-uriparser)\"\n  fi\nfi\n\n#\n# Bundling\n#\nif enabled bundle; then\n  if enabled zlib && ! enabled py_gzip; then\n    die \"Python gzip module not found (use --disable-zlib or --disable-bundle)\"\n  fi\nfi\n\n#\n# Avahi\n#\nif enabled_or_auto avahi; then\n  if check_pkg avahi-client; then\n    enable avahi\n  elif enabled avahi; then\n    die \"Avahi development support not found (use --disable-avahi)\"\n  fi\nfi\n\n#\n# ffmpeg\n#\nif enabled ffmpeg_static; then\n\n  enable libav\n  has_libav=true\n\n  # libx264\n  if enabled libx264; then\n    if disabled libx264_static; then\n      check_pkg x264 \">=0.142\" || die \"x264 package not found\"\n    fi\n  else\n    disable libx264_static\n  fi\n\n  # libx265\n  if enabled libx265; then\n    if disabled libx265_static; then\n      check_pkg x265 \">=1.5\" || die \"x265 package not found\"\n    else\n      check_bin cmake || die \"cmake not found\"\n      check_cc_lib stdc++ stdcpp || die \"libstdc++ not found\"\n    fi\n  else\n    disable libx265_static\n  fi\n\n  # libvpx\n  if enabled libvpx; then\n    if disabled libvpx_static; then\n      check_pkg vpx \">=1.3.0\" || die \"vpx package not found\"\n    fi\n  else\n    disable libvpx_static\n  fi\n\n  # libtheora\n  if enabled libtheora; then\n    if disabled libtheora_static; then\n      check_pkg theoraenc \">=1.1.1\" || die \"theoraenc package not found\"\n      check_pkg theoradec \">=1.1.1\" || die \"theoradec package not found\"\n      check_pkg theora    \">=1.1.1\" || die \"theora package not found\"\n    else\n      enable libogg_static\n    fi\n  else\n    disable libtheora_static\n  fi\n\n  # libvorbis\n  if enabled libvorbis; then\n    if disabled libvorbis_static; then\n      check_pkg vorbisfile \">=1.3.4\" || die \"vorbisfile package not found\"\n      check_pkg vorbisenc  \">=1.3.4\" || die \"vorbisenc package not found\"\n      check_pkg vorbis     \">=1.3.4\" || die \"vorbis package not found\"\n    else\n      enable libogg_static\n    fi\n  else\n    disable libvorbis_static\n  fi\n\n  # libfdk-aac\n  if enabled libfdkaac; then\n    if disabled libfdkaac_static; then\n      check_pkg fdk-aac \">=0.1.3\" || die \"fdk-aac package not found\"\n    fi\n  else\n    disable libfdkaac_static\n  fi\n\n  # libopus\n  if enabled libopus; then\n    if disabled libopus_static; then\n      check_pkg opus \">=1.1\" || die \"opus package not found\"\n    fi\n  else\n    disable libopus_static\n  fi\n\n  # nvenc\n  # latest ffmpeg has own code\n  if enabled_or_auto nvenc; then\n    #check_cc_header nvEncodeAPI || \\\n    #  die \"NVENC library (https://developer.nvidia.com/nvidia-video-codec-sdk) not found\"\n    enable nvenc\n    enable hwaccels\n  else\n    disable nvenc\n  fi\n\n  # omx\n  if enabled omx; then\n    OLDCFLAGS=$CFLAGS\n    if [ -d \"/opt/vc/include\" ]; then\n      CFLAGS=\"-I/opt/vc/include $CFLAGS\"\n    fi\n    check_cc_header \"bcm_host\" omx_rpi\n    if enabled omx_rpi; then\n      CFLAGS=\"-I/opt/vc/include/IL $OLDCFLAGS\"\n      enable mmal\n    else\n      CFLAGS=$OLDCFLAGS\n    fi\n    check_cc_header OMX_Core omx || die \"OpenMAX IL not found\"\n  fi\n\nelse\n\n  if enabled_or_auto libav; then\n    has_libav=true\n    has_resample=false\n\n    check_pkg libavfilter   \">=6.47.100\"  || has_libav=false\n    check_pkg libswresample \">=2.1.100\"   && has_resample=true\n    check_pkg libswscale    \">=4.1.100\"   || has_libav=false\n    check_pkg libavformat   \">=57.41.100\" || has_libav=false\n    check_pkg libavcodec    \">=57.48.101\" || has_libav=false\n    check_pkg libavutil     \">=55.28.100\" || has_libav=false\n\n    if $has_libav -a $has_resample; then\n      enable libav\n    else\n      echo \"WARNING: none or old ffmpeg libraries were detected\"\n      echo \"         * use --disable-libav or --enable-ffmpeg_static\"\n      if enabled libav; then\n        die \"ffmpeg development support not found\"\n      fi\n    fi\n\n  fi\n\nfi\n\n#\n# vaapi\n#\nif enabled_or_auto vaapi; then\n  if enabled libav; then\n    if check_pkg libva \">=0.38.0\"; then\n      check_pkg libva-drm \">=0.38.0\" || die \"libva-drm not found\"\n      enable vaapi\n      enable hwaccels\n    elif enabled vaapi; then\n      die \"vaapi (Video Acceleration (VA) API for Linux) not found\"\n    fi\n  fi\nfi\n\n#\n# Inotify\n#\nif enabled_or_auto inotify; then\n  if check_cc_header \"sys/inotify\" inotify_h; then\n    enable inotify\n    check_cc_snippet inotify_init1 '\n    #include <sys/inotify.h>\n    int test(void)\n    {\n      inotify_init1(IN_CLOEXEC);\n      return 0;\n    }\n    '\n  elif enabled inotify; then\n    die \"Inotify support not found (use --disable-inotify)\"\n  fi\nfi\n\n#\n# common card client\n#\nif enabled cwc || enabled cccam; then\n  enable cardclient\nfi\n\n#\n# libdvbcsa, tvhcsa\n#\nif enabled_or_auto tvhcsa; then\n  if enabled cwc || enabled cccam || enabled capmt || enabled constcw; then\n    enable tvhcsa\n    enable dvbcsa\n    if enabled dvbcsa; then\n      (check_cc_header \"dvbcsa/dvbcsa\" dvbcsa_h &&\\\n       check_cc_lib    dvbcsa dvbcsa_l) ||\\\n      die \"Failed to find dvbcsa library\"\n      LDFLAGS=\"$LDFLAGS -ldvbcsa\"\n    fi\n  else\n    disable tvhcsa\n  fi\nfi\n\n#\n# DVB scan\n#\nif enabled dvbscan; then\n  printf \"${TAB}\" \"fetching dvb-scan files ...\"\n  \"${ROOTDIR}/support/getmuxlist\"\n  if [ $? -ne 0 ]; then\n    echo \"fail\"\n    check_bin git || echo \"FATAL: git binary not found (install the git package)\"\n    die \"Failed to fetch dvb-scan data (use --disable-dvbscan)\"\n  fi\n  echo \"ok\"\nfi\n\n#\n# epoll\n#\nif [ ${PLATFORM} = \"linux\" ]; then\n  enable epoll\n  check_cc_snippet epoll_create1 '\n  #include <sys/epoll.h>\n  int test(void)\n  {\n    epoll_create1(EPOLL_CLOEXEC);\n    return 0;\n  }\n  '\nfi\n\n#\n# kqueue\n#\nif [ ${PLATFORM} = \"freebsd\" ] || [ ${PLATFORM} = \"darwin\" ]; then\n  enable kqueue\nfi\n\n#\n# MPEGTS support\n#\ndisable mpegts\ndisable mpegts_dvb\nif enabled linuxdvb || enabled iptv || enabled tsfile || enabled satip_client || \\\n   enabled hdhomerun_client || enabled satip_server;\nthen\n  enable mpegts\nfi\nif enabled linuxdvb || enabled satip_client || enabled hdhomerun_client || enabled satip_server; then\n  enable mpegts_dvb\nfi\n\n#\n# DBus\n#\nif enabled_or_auto dbus_1; then\n  if check_pkg dbus-1; then\n    enable dbus_1\n  elif enabled dbus-1; then\n    die \"DBus-1 development support not found (use --disable-dbus-1)\"\n  fi\nfi\n\n#\n# systemd\n#\nif enabled_or_auto libsystemd_daemon; then\n  if check_pkg libsystemd-daemon || check_pkg libsystemd; then\n    enable libsystemd_daemon\n  elif enabled libsystemd_daemon; then\n    die \"libsystemd-daemon development support not found (use --disable-systemd_daemon)\"\n  fi\nfi\n\n# ###########################################################################\n# Write config\n# ###########################################################################\n\n# Write config\nwrite_config\ncat >> \"${CONFIG_H}\" <<EOF\n#define TVHEADEND_DATADIR \"$(eval echo ${datadir})/tvheadend\"\nEOF\n\n# Output config\nprint_config\necho \"Final Binary:\"\necho \"  $BUILDDIR/tvheadend\"\necho \"\"\necho \"Tvheadend Data Directory:\"\necho \"  $(eval echo ${datadir}/tvheadend)\"\necho \"\"\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "intl",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "rpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "support",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}