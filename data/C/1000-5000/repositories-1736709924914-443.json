{
  "metadata": {
    "timestamp": 1736709924914,
    "page": 443,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "simd-everywhere/simde",
      "stars": 2493,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 20.056640625,
          "content": "{\n  \"projectName\": \"simde\",\n  \"projectOwner\": \"nemequ\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": true,\n  \"commitConvention\": \"none\",\n  \"contributors\": [\n    {\n      \"login\": \"nemequ\",\n      \"name\": \"Evan Nemerson\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1151?v=4\",\n      \"profile\": \"https://nemequ.github.io/\",\n      \"contributions\": [\n        \"code\",\n        \"content\",\n        \"doc\",\n        \"example\",\n        \"ideas\",\n        \"question\",\n        \"review\",\n        \"test\",\n        \"tutorial\",\n        \"talk\",\n        \"bug\",\n        \"infra\",\n        \"maintenance\",\n        \"projectManagement\"\n      ]\n    },\n    {\n      \"login\": \"mr-c\",\n      \"name\": \"Michael R. Crusoe\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/1330696?v=4\",\n      \"profile\": \"https://orcid.org/0000-0002-2961-9670\",\n      \"contributions\": [\n        \"bug\",\n        \"code\",\n        \"eventOrganizing\",\n        \"fundingFinding\",\n        \"ideas\",\n        \"infra\",\n        \"platform\",\n        \"test\",\n        \"maintenance\",\n        \"projectManagement\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"himanshi18037\",\n      \"name\": \"HIMANSHI MATHUR\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/43923076?v=4\",\n      \"profile\": \"https://github.com/himanshi18037\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"masterchef2209\",\n      \"name\": \"Hidayat Khan\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/27916352?v=4\",\n      \"profile\": \"https://github.com/masterchef2209\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"rosbif\",\n      \"name\": \"rosbif\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/553899?v=4\",\n      \"profile\": \"https://github.com/rosbif\",\n      \"contributions\": [\n        \"code\",\n        \"test\",\n        \"bug\",\n        \"ideas\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"junaruga\",\n      \"name\": \"Jun Aruga\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/121989?v=4\",\n      \"profile\": \"http://junaruga.hatenablog.com/\",\n      \"contributions\": [\n        \"code\",\n        \"ideas\",\n        \"platform\",\n        \"infra\",\n        \"maintenance\",\n        \"test\",\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"marmeladema\",\n      \"name\": \"Élie ROUDNINSKI\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1629419?v=4\",\n      \"profile\": \"https://github.com/marmeladema\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"jsbache\",\n      \"name\": \"Jesper Storm Bache\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/7937081?v=4\",\n      \"profile\": \"http://www.bache.name\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jeffdaily\",\n      \"name\": \"Jeff Daily\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/904248?v=4\",\n      \"profile\": \"https://github.com/jeffdaily\",\n      \"contributions\": [\n        \"code\",\n        \"infra\"\n      ]\n    },\n    {\n      \"login\": \"yekm\",\n      \"name\": \"Pavel\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/205196?v=4\",\n      \"profile\": \"https://github.com/yekm\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"sabarishbollapragada\",\n      \"name\": \"Sabarish Bollapragada\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/36379720?v=4\",\n      \"profile\": \"https://github.com/sabarishbollapragada\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"gh2o\",\n      \"name\": \"Gavin Li\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/371529?v=4\",\n      \"profile\": \"http://www.thegavinli.com/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"betajippity\",\n      \"name\": \"Yining Karl Li\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1057198?v=4\",\n      \"profile\": \"http://www.yiningkarlli.com\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"anirbandey303\",\n      \"name\": \"Anirban Dey\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/29774651?v=4\",\n      \"profile\": \"https://www.facebook.com/anirbandey303\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Un1Gfn\",\n      \"name\": \"Darren Ng\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/28521292?v=4\",\n      \"profile\": \"https://github.com/Un1Gfn\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"FaresSalem\",\n      \"name\": \"FaresSalem\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/7736245?v=4\",\n      \"profile\": \"https://github.com/FaresSalem\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"GorePradnyesh\",\n      \"name\": \"Pradnyesh Gore\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/843197?v=4\",\n      \"profile\": \"https://github.com/GorePradnyesh\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"seanptmaher\",\n      \"name\": \"Sean Maher\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/39571964?v=4\",\n      \"profile\": \"https://github.com/seanptmaher\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Artoria2e5\",\n      \"name\": \"Mingye Wang\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6459309?v=4\",\n      \"profile\": \"https://zh.wikipedia.org/wiki/User:Artoria2e5\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"ngzhian\",\n      \"name\": \"Ng Zhi An\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1749303?v=4\",\n      \"profile\": \"http://www.ngzhian.com\",\n      \"contributions\": [\n        \"code\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Glitch18\",\n      \"name\": \"Atharva Nimbalkar\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/30515829?v=4\",\n      \"profile\": \"https://github.com/Glitch18\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"simba611\",\n      \"name\": \"simba611\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/59763921?v=4\",\n      \"profile\": \"https://github.com/simba611\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"ashnewmanjones\",\n      \"name\": \"Ashleigh Newman-Jones\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/29983014?v=4\",\n      \"profile\": \"https://ashnewmanjones.com\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"wrv\",\n      \"name\": \"Willy R. Vasquez\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5039686?v=4\",\n      \"profile\": \"https://alum.mit.edu/www/wrv/\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"keithw\",\n      \"name\": \"Keith Winstein\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/208955?v=4\",\n      \"profile\": \"https://cs.stanford.edu/~keithw\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"SoapGentoo\",\n      \"name\": \"David Seifert\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/16636962?v=4\",\n      \"profile\": \"https://github.com/SoapGentoo\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"milot-mirdita\",\n      \"name\": \"Milot Mirdita\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/63657?v=4\",\n      \"profile\": \"https://mirdita.de\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"aqrit\",\n      \"name\": \"aqrit\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/4021602?v=4\",\n      \"profile\": \"http://bitpatch.com\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"dgazzoni\",\n      \"name\": \"Décio Luiz Gazzoni Filho\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17934171?v=4\",\n      \"profile\": \"https://github.com/dgazzoni\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"makise-homura\",\n      \"name\": \"Igor Molchanov\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/16463967?v=4\",\n      \"profile\": \"http://vk.com/muzzdiez\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\",\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"anrodrig\",\n      \"name\": \"Andrew Rodriguez\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/35815808?v=4\",\n      \"profile\": \"https://github.com/anrodrig\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"Changqing-JING\",\n      \"name\": \"Changqing  Jing\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/59640930?v=4\",\n      \"profile\": \"https://github.com/Changqing-JING\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"jpcima\",\n      \"name\": \"JP Cimalando\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17614485?v=4\",\n      \"profile\": \"http://jpcima.sdf1.org/\",\n      \"contributions\": [\n        \"code\",\n        \"infra\"\n      ]\n    },\n    {\n      \"login\": \"FlyGoat\",\n      \"name\": \"Jiaxun Yang\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5955297?v=4\",\n      \"profile\": \"https://flygoat.com/\",\n      \"contributions\": [\n        \"code\",\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"ktgw0316\",\n      \"name\": \"Masahiro Kitagawa\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3116763?v=4\",\n      \"profile\": \"https://github.com/ktgw0316\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"operasfantom\",\n      \"name\": \"Pavel Iatchenii\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31903947?v=4\",\n      \"profile\": \"https://github.com/operasfantom\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"tommyvct\",\n      \"name\": \"Tommy Vercetti\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7903172?v=4\",\n      \"profile\": \"https://tommyvct.tk\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"rscohn2\",\n      \"name\": \"Robert Cohn\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1936730?v=4\",\n      \"profile\": \"https://github.com/rscohn2\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"adamnovak\",\n      \"name\": \"Adam Novak\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5062495?v=4\",\n      \"profile\": \"https://github.com/adamnovak\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"boris-kuz\",\n      \"name\": \"boris-kuz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/18011434?v=4\",\n      \"profile\": \"https://github.com/boris-kuz\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"Epixu\",\n      \"name\": \"Dimo Markov\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1529601?v=4\",\n      \"profile\": \"https://github.com/Epixu\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"dhbloo\",\n      \"name\": \"dblue\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/32353216?v=4\",\n      \"profile\": \"https://dhbloo.github.io/\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"zekehul\",\n      \"name\": \"zekehul\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/8780526?v=4\",\n      \"profile\": \"https://github.com/zekehul\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"LaurentThomas\",\n      \"name\": \"Laurent Thomas\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/40661368?v=4\",\n      \"profile\": \"https://open-cells.com\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"maxbachmann\",\n      \"name\": \"Max Bachmann\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/44199644?v=4\",\n      \"profile\": \"https://github.com/maxbachmann\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"psaab\",\n      \"name\": \"psaab\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/196946?v=4\",\n      \"profile\": \"https://github.com/psaab\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"sbc100\",\n      \"name\": \"Sam Clegg\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/515813?v=4\",\n      \"profile\": \"http://superduper.net/\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"tlively\",\n      \"name\": \"Thomas Lively\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7121787?v=4\",\n      \"profile\": \"https://twitter.com/tlively52\",\n      \"contributions\": [\n        \"bug\",\n        \"ideas\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"coderzh\",\n      \"name\": \"coderzh\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/329164?v=4\",\n      \"profile\": \"http://blog.coderzh.com/\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"k-dominik\",\n      \"name\": \"Dominik Kutra\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/24434157?v=4\",\n      \"profile\": \"https://github.com/k-dominik\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"Lithrein\",\n      \"name\": \"Lithrein\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/207981?v=4\",\n      \"profile\": \"https://github.com/Lithrein\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"quyykk\",\n      \"name\": \"Nick\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/85879619?v=4\",\n      \"profile\": \"https://github.com/quyykk\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"thomasdwu\",\n      \"name\": \"thomasdwu\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6819659?v=4\",\n      \"profile\": \"https://github.com/thomasdwu\",\n      \"contributions\": [\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"Remnant44\",\n      \"name\": \"Stephen\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/54461740?v=4\",\n      \"profile\": \"https://github.com/Remnant44\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"johnplatts\",\n      \"name\": \"John Platts\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/28941113?v=4\",\n      \"profile\": \"https://github.com/johnplatts\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"tycho\",\n      \"name\": \"Steven Noonan\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/29616?v=4\",\n      \"profile\": \"https://github.com/tycho\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"p0nce\",\n      \"name\": \"p0nce \",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1067485?v=4\",\n      \"profile\": \"https://github.com/p0nce\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"pabs3\",\n      \"name\": \"Paul Wise\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/328602?v=4\",\n      \"profile\": \"https://bonedaddy.net/pabs3/\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"easyaspi314\",\n      \"name\": \"easyaspi314 (Devin)\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6258309?v=4\",\n      \"profile\": \"https://github.com/easyaspi314\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"JonLiu1993\",\n      \"name\": \"JonLiu1993\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/63675417?v=4\",\n      \"profile\": \"https://github.com/JonLiu1993\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"Cheney-W\",\n      \"name\": \"Cheney Wang\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/38240633?v=4\",\n      \"profile\": \"https://github.com/Cheney-W\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"myd7349\",\n      \"name\": \"myd7349 \",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5435649?v=4\",\n      \"profile\": \"http://myd7349.github.io/\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"chausner\",\n      \"name\": \"chausner\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/15180557?v=4\",\n      \"profile\": \"https://github.com/chausner\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"yyctw\",\n      \"name\": \"Yi-Yen Chung\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/45251297?v=4\",\n      \"profile\": \"https://github.com/yyctw\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"wewe5215\",\n      \"name\": \"Chi-Wei Chu\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/76145143?v=4\",\n      \"profile\": \"https://github.com/wewe5215\",\n      \"contributions\": [\n        \"code\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"M-HT\",\n      \"name\": \"M-HT\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/12173952?v=4\",\n      \"profile\": \"https://github.com/M-HT\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"SGSSGene\",\n      \"name\": \"Simon Gene Gottlieb\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/456045?v=4\",\n      \"profile\": \"https://gottliebtfreitag.de\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"cbielow\",\n      \"name\": \"Chris Bielow\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6008722?v=4\",\n      \"profile\": \"http://bsc.fu-berlin.de\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"XiWeiGu\",\n      \"name\": \"gu xiwei\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/41367273?v=4\",\n      \"profile\": \"https://github.com/XiWeiGu\",\n      \"contributions\": [\n        \"platform\",\n        \"test\"\n      ]\n    },\n    {\n      \"login\": \"Vineg\",\n      \"name\": \"George Vinokhodov\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1757455?v=4\",\n      \"profile\": \"https://github.com/Vineg\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Coeur\",\n      \"name\": \"Cœur\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/839992?v=4\",\n      \"profile\": \"https://github.com/Coeur\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Proudsalsa\",\n      \"name\": \"Florian @Proudsalsa\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/103449548?v=4\",\n      \"profile\": \"https://github.com/Proudsalsa\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"thomas-schlichter\",\n      \"name\": \"Thomas Schlichter\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/106664923?v=4\",\n      \"profile\": \"https://github.com/thomas-schlichter\",\n      \"contributions\": [\n        \"bug\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"AymenQ\",\n      \"name\": \"Aymen Qader\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3706283?v=4\",\n      \"profile\": \"https://github.com/AymenQ\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"eric900115\",\n      \"name\": \"Eric Su\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/77781328?v=4\",\n      \"profile\": \"https://github.com/eric900115\",\n      \"contributions\": [\n        \"code\",\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"Torinde\",\n      \"name\": \"Torinde\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/97228894?v=4\",\n      \"profile\": \"https://github.com/Torinde\",\n      \"contributions\": [\n        \"bug\",\n        \"doc\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"howjmay\",\n      \"name\": \"Yang Hau\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/13924801?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/yanghauyuan/\",\n      \"contributions\": [\n        \"code\",\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"zengdage\",\n      \"name\": \"Zhijin Zeng\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/16076103?v=4\",\n      \"profile\": \"https://github.com/zengdage\",\n      \"contributions\": [\n        \"code\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7\n}\n"
        },
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 4.9404296875,
          "content": "environment:\n  MESON_EXE_WRAPPER: \"['C:\\\\Program Files\\\\OpenCppCoverage\\\\OpenCppCoverage.exe', '--export_type=cobertura', '--']\"\n  CCACHE_MAXSIZE: '500Mi'\n  matrix:\n    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    #   VCVARSALL: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n    #   PYTHON_DIR: C:\\Python311-x64\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python311-x64\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python38-x64\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python38-x64\n    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    #   VCVARSALL: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n    #   PYTHON_DIR: C:\\Python311-x64\n    #   FLAGS: /arch:AVX\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python311-x64\n      FLAGS: /arch:AVX\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python38-x64\n      FLAGS: /arch:AVX\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python38-x64\n      FLAGS: /arch:AVX\n    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    #   VCVARSALL: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n    #   PYTHON_DIR: C:\\Python311-x64\n    #   FLAGS: /arch:AVX2\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python311-x64\n      FLAGS: /arch:AVX2\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python38-x64\n      FLAGS: /arch:AVX2\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python38-x64\n      FLAGS: /arch:AVX2\n    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022\n    #   VCVARSALL: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n    #   PYTHON_DIR: C:\\Python311-x64\n    #   FLAGS: /arch:AVX512\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python311-x64\n      FLAGS: /arch:AVX512\n    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n      VCVARSALL: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n      PYTHON_DIR: C:\\Python38-x64\n      FLAGS: /arch:AVX512\nbranches:\n  except:\n    - /^ci/(?!appveyor)(/.+)?/\n    - /^dependabot/(/.+)?/\n\nplatform:\n  - x64\ncache:\n  - '%SystemDrive%\\ccache'\ninit:\n  - pwsh: |\n      $Env:APPVEYOR_SAVE_CACHE_ON_ERROR = 'true'\n\non_failure:\n- appveyor PushArtifact build\\meson-logs\\meson-log.txt\n- appveyor PushArtifact build\\meson-logs\\testlog.txt\n\ninstall:\n  - cmd: set PATH=%PYTHON_DIR%;%PYTHON_DIR%\\scripts;%PATH%\n  - cmd: pip install --upgrade ninja meson\n  - cmd: choco install opencppcoverage codecov ccache\n  - cmd: call \"%VCVARSALL%\" amd64\n\nbefore_build:\n  - ps: |\n      git submodule -q update --init --recursive\n      if ($ENV:FLAGS -notlike \"*ARCH*\") {\n        echo \"tests will be run\"\n      } else {\n        echo \"FLAGS is $ENV:FLAGS\"\n      }\n\nbuild_script:\n  - cmd: |\n      set CCACHE_DIR=%SystemDrive%\\ccache\n      set CC=ccache.exe cl.exe\n      set CXX=ccache.exe cl.exe\n      ccache.exe --zero-stats\n      set CFLAGS=/WX /Z7 %FLAGS%\n      set CXXFLAGS=/WX /Z7 %FLAGS%\n      meson --backend=ninja build\n      meson compile -C build --verbose\n      ccache.exe --show-stats\ntest_script:\n  # \"meson test -C build\" fails due to excessively long command line\n  - ps: |\n      if ($ENV:FLAGS -notlike \"*ARCH*\") {\n        ninja -C build test\n      } else {\n        echo \"skipping test\"\n      }\n\n## This seems to work; data shows up on CodeCov, but it emits an error\n## which makes AppVeyor thing the whole build failed.  Example:\n## https://ci.appveyor.com/project/quixdb/ci-noise/build/job/e7d1wpt9icu77fn2\n# after_test:\n#   - ps: |\n#       Invoke-WebRequest -Uri 'https://codecov.io/bash' -OutFile codecov.sh\n#       $env:APPVEYOR=\"true\"\n#       $env:CI=\"true\"\n#       bash codecov.sh -f \"run-testsCoverage.xml\"\n"
        },
        {
          "name": ".azure-pipelines.yml",
          "type": "blob",
          "size": 3.1591796875,
          "content": "pool:\n  vmImage: 'ubuntu-22.04'\n\ntrigger:\n  branches:\n    exclude:\n    - master\n    # - ci/*\n    # include:\n    # - ci/azure*\n\njobs:\n- job: clang_analysis\n  timeoutInMinutes: 120\n  variables:\n    CC: clang-14\n    CXX: clang++-14\n    CFLAGS: -Wextra -Werror\n    CXXFLAGS: -Wextra -Werror\n  steps:\n  - script: uname -a && cat /proc/cpuinfo /proc/meminfo\n    displayName: System Information\n  - script: sudo add-apt-repository 'ppa:ubuntu-toolchain-r/test' && sudo apt-get update && sudo apt-get install -y ninja-build ninja-build python3-pip python3-setuptools python3-wheel clang-14 clang-tools-14\n    displayName: Install APT Dependencies\n  - script: pip3 install -v meson==0.55.1\n    displayName: Install pip Dependencies\n  - script: scan-build-14 /home/vsts/.local/bin/meson setup build -Db_sanitize=address,undefined\n    displayName: Configure\n  - script: scan-build-14 ninja -C build -v\n    displayName: Build\n  - script: ninja -C build -v test\n    displayName: Test\n  - task: PublishTestResults@2\n    inputs:\n      testResultsFormat: 'JUnit'\n      testResultsFiles: 'build/meson-logs/testlog.junit.xml'\n\n- job: gcc_analysis\n  timeoutInMinutes: 120\n  variables:\n    CC: gcc-10\n    CXX: g++-10\n    CFLAGS: -fanalyzer -Wextra -Werror\n    CXXFLAGS: -fanalyzer -Wextra -Werror\n  steps:\n  - script: uname -a && cat /proc/cpuinfo /proc/meminfo\n    displayName: System Information\n  - script: sudo add-apt-repository 'ppa:ubuntu-toolchain-r/test' && sudo apt-get update && sudo apt-get install -y ninja-build ninja-build python3-pip python3-setuptools python3-wheel gcc-10 g++-10\n    displayName: Install APT Dependencies\n  - script: pip3 install meson==0.55.1\n    displayName: Install pip Dependencies\n  - script: /home/vsts/.local/bin/meson setup build -Db_sanitize=address,undefined\n    displayName: Configure\n  - script: ninja -C build -v\n    displayName: Build\n  - script: ninja -C build -v test\n    displayName: Test\n  - task: PublishTestResults@2\n    inputs:\n      testResultsFormat: 'JUnit'\n      testResultsFiles: 'build/meson-logs/testlog.junit.xml'\n\n# - job: loongson3a\n#   container:\n#     image: debian:unstable\n#     options: \"--name ci-container -v /usr/bin/docker:/tmp/docker:ro\"\n#   steps:\n#   # https://github.com/Microsoft/azure-pipelines-agent/issues/2043\n#   - script: /tmp/docker exec -t -u 0 ci-container sh -c \"apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::=\"--force-confold\" -y install sudo\"\n#     displayName: 'Install Sudo in container'\n#   - script: uname -a && cat /proc/cpuinfo /proc/meminfo\n#     displayName: System Information\n#   - script: sudo dpkg --add-architecture mips64el && sudo apt-get update && sudo apt-get install -y ninja-build ninja-build python3-pip python3-setuptools python3-wheel libc6:mips64el gcc-10-mips64el-linux-gnuabi64 g++-10-mips64el-linux-gnuabi64 qemu-user-static\n#     displayName: Install APT Dependencies\n#   - script: pip3 install meson==0.55.1\n#     displayName: Install pip Dependencies\n#   - script: /home/vsts/.local/bin/meson setup build --cross-file=docker/cross-files/loongson-gcc-10.cross\n#     displayName: Configure\n#   - script: ninja -C build -v\n#     displayName: Build\n#   - script: ninja -C build -v test\n#     displayName: Test\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.7265625,
          "content": "container:\n  image: debian:testing-slim\n\ntask:\n  name: Sanitizers\n  skip: $BRANCH == \"master\" || ($BRANCH != 'ci/cirrus' && $BRANCH =~ '^ci/.+')\n  env:\n    CC: clang-17\n    CXX: clang++-17\n    CFLAGS: -Wextra -Werror -march=native\n    CXXFLAGS: -Wextra -Werror -march=native\n  system_info_script:\n  - cat /proc/cpuinfo\n  - cat /proc/meminfo\n  install_dependencies_script:\n    - apt-get update\n    - apt-get install -y ninja-build ninja-build pipx python3-setuptools python3-wheel gcovr clang-17\n    - pipx install meson==0.55.1\n  configure_script:\n    - /root/.local/bin/meson setup build -Db_coverage=true -Db_sanitize=address,undefined -Db_lundef=false\n  build_script:\n    - ninja -C build -v -j 3\n  test_script:\n    - ninja -C build -v test\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.03125,
          "content": "*build*\ndocker/build*\nsde*\n.git\n"
        },
        {
          "name": ".drone.star.disabled",
          "type": "blob",
          "size": 3.6376953125,
          "content": "# -*- Python -*-\n# Drone CI Starlark configuration file.\n# https://docs.drone.io/pipeline/scripting/starlark/\n# Run `drone starlark convert --stdout` to verify `.drone.star`.\n\ndef main(ctx):\n  jobs = []\n\n  for arch in ['aarch64', 'armv8', 'armv7']:\n    drone_arch = 'arm'\n    if arch == 'aarch64':\n      drone_arch = 'arm64'\n\n    for compiler in ['gcc', 'clang']:\n      cc = compiler\n      cxx = compiler + '++'\n      compiler_flags = []\n      packages = ['ninja-build', 'git-core', 'python3-pip', 'gcovr']\n\n      if arch == 'armv7':\n        compiler_flags.extend(['-march=armv7-a', '-mfpu=neon'])\n      elif arch == 'armv8':\n        compiler_flags.extend(['-march=armv8-a', '-mfpu=neon'])\n      elif arch == 'aarch64':\n        compiler_flags.extend(['-march=armv8-a+simd+crypto+crc'])\n\n      if compiler == 'gcc':\n        cxx = 'g++'\n        compiler_flags.extend(['-Wextra', '-Werror'])\n        packages.extend(['gcc', 'g++'])\n      elif compiler == 'clang':\n        compiler_flags.extend(['-Weverything', '-Werror'])\n        packages.extend(['clang'])\n\n      cflags = ' '.join(compiler_flags)\n      cxxflags = ' '.join(compiler_flags)\n\n      environment = {\n        \"CC\": cc,\n        \"CXX\": cxx,\n        \"CFLAGS\": cflags,\n        \"CXXFLAGS\": cxxflags,\n        \"DEBIAN_FRONTEND\": \"noninteractive\",\n      }\n\n      exclude_branches = ['master']\n      for provider in ['gha', 'cirrus', 'semaphore', 'circleci', 'appveyor', 'azure', 'travis']:\n        exclude_branches.append('ci/' + provider)\n        exclude_branches.append('ci/' + provider + '/**')\n\n      jobs.append({\n        \"kind\": \"pipeline\",\n        \"type\": \"docker\",\n        \"name\": compiler + ' ' + arch,\n        \"platform\": {\n          \"os\": \"linux\",\n          \"arch\": drone_arch\n        },\n        \"steps\": [\n          {\n            \"name\": \"test\",\n            \"image\": \"ubuntu:bionic\",\n            \"environment\": environment,\n            \"commands\": [\n              \"cat /proc/cpuinfo\",\n              \"echo 'APT::Acquire::Retries \\\"3\\\";' > /etc/apt/apt.conf.d/80-retries\",\n              \"apt-get update -y\",\n              \"apt-get install -y \" + \" \".join(packages),\n              \"pip3 install meson==0.55.1\",\n              \"meson build -Db_coverage=true || (cat build/meson-logs/meson-log.txt; false)\",\n              \"ninja -C build -v test || (cat build/meson-logs/testlog.txt; false)\",\n            ],\n          }\n        ],\n        \"trigger\": {\n          \"branch\": {\n            \"exclude\": exclude_branches\n          }\n        },\n      })\n\n  # jobs.append({\n  #   \"kind\": \"pipeline\",\n  #   \"type\": \"docker\",\n  #   \"name\": \"native aliases\",\n  #   \"platform\": {\n  #     \"os\": \"linux\",\n  #     \"arch\": \"arm64\"\n  #   },\n  #   \"steps\": [\n  #     {\n  #       \"name\": \"test\",\n  #       \"image\": \"ubuntu:bionic\",\n  #       \"environment\": {\n  #         \"CC\": \"clang\",\n  #         \"CXX\": \"clang++\",\n  #         \"CFLAGS\": \"-march=armv8a+simd+crypto+crc -Weverything -Wextra -DSIMDE_ENABLE_NATIVE_ALIASES -DSIMDE_NATIVE_ALIASES_TESTING\",\n  #         \"CXXFLAGS\": \"-march=armv8a+simd+crypto+crc -Weverything -Wextra -DSIMDE_ENABLE_NATIVE_ALIASES -DSIMDE_NATIVE_ALIASES_TESTING\",\n  #       \"DEBIAN_FRONTEND\": \"noninteractive\",\n  #       },\n  #       \"commands\": [\n  #         \"cat /proc/cpuinfo\",\n  #         \"apt-get update -y\",\n  #         \"apt-get install -y \" + \" \".join(['ninja-build', 'git-core', 'python3-pip', 'gcovr', 'clang', 'curl']),\n  #         \"pip3 install meson==0.55.1\",\n  #         \"(cd test && sh -x ./native-aliases.sh)\",\n  #         \"meson build -Db_coverage=true\",\n  #         \"ninja -C build -v test\",\n  #       ],\n  #     },\n  #   ],\n  #   \"trigger\": {\n  #     \"branch\": {\n  #       \"exclude\": exclude_branches\n  #     }\n  #   }\n  # })\n\n  return jobs\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5087890625,
          "content": "# Configuration file for EditorConfig\n# More information is available under http://EditorConfig.org\n\n# Ignore any other files further up in the file system\nroot = true\n\n# Configuration for all files\n[*]\n# Enforce Unix style line endings (\\n only)\nend_of_line = lf\n# Always end files with a blank line\ninsert_final_newline = true\n# Force space characters for indentation\nindent_style = space\n# Always indent by 2 characters\nindent_size = 2\n# Remove whitespace characters at the end of line\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "*~\n/build*\n/.cache\n/.vscode\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.080078125,
          "content": "[submodule \"munit\"]\n\tpath = test/munit\n\turl = https://github.com/nemequ/munit.git\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.5908203125,
          "content": "Jun Aruga <jaruga@redhat.com>\nJun Aruga <jaruga@redhat.com> <jun.aruga@gmail.com>\nJun Aruga <jaruga@redhat.com> <junaruga@users.noreply.github.com>\nMichael R. Crusoe <crusoe@debian.org>\nMichael R. Crusoe <crusoe@debian.org> <1330696+mr-c@users.noreply.github.com>\nMichael R. Crusoe <crusoe@debian.org> <michael.crusoe@gmail.com>\nYi-Yen Chung <s12345d60@gmail.com>\nYi-Yen Chung <s12345d60@gmail.com> <45251297+yyctw@users.noreply.github.com>\ngu xiwei <guxiwei-hf@loongson.cn>  # GF user XiWeiGu\nYang Hau <yuanyanghau@gmail.com>  # GH user howjmay\nZhijin Zeng <zhijin.zeng@spacemit.com>  # GH user zengdage\n"
        },
        {
          "name": ".no-test",
          "type": "tree",
          "content": null
        },
        {
          "name": ".packit.yml",
          "type": "blob",
          "size": 0.9560546875,
          "content": "# See the `.packit/README.md` for details.\n\n# The used RPM spec file path.\n# A minimal RPM spec file to run the tests.\nspecfile_path: .packit/simde.spec\n\njobs:\n  - &copr\n    # Use Fedora COPR in the CI.\n    # https://packit.dev/docs/configuration/#copr_build\n    job: copr_build\n    trigger: pull_request\n    # Enable internet access in the COPR.\n    enable_net: true\n    # Executed targets in the CI. Available targets are below.\n    # https://packit.dev/docs/configuration/#available-copr-build-targets\n    #\n    # Note that we keep the Fedora rawhide. See the `.packit/README.md` -\n    # \"Motivation and context\" for details.\n    targets:\n      - fedora-rawhide-x86_64\n      - fedora-rawhide-aarch64\n      - fedora-rawhide-ppc64le\n      - fedora-rawhide-s390x\n  - <<: *copr\n    # Run on push to any branch.\n    trigger: commit\n    # Run except the \"master*\" and \"dependabot*\" branches.\n    # https://github.com/packit/packit/issues/1986\n    branch: '(?!master)(?!dependabot)'\n"
        },
        {
          "name": ".packit",
          "type": "tree",
          "content": null
        },
        {
          "name": ".semaphore",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.9794921875,
          "content": "language: c\nos: linux\ndist: focal\n\njobs:\n  include:\n  - name: POWER9\n    if: branch != master OR type == pull_request\n    arch: ppc64le\n    compiler: clang\n    env:\n    - CC=\"clang\"\n    - CXX=\"clang++\"\n    - CFLAGS=\"-mcpu=power9 -Weverything -Werror\"\n    - CXXFLAGS=\"-mcpu=power9 -Weverything -Werror\"\n    - JOBS=\"$(nproc)\"\n    addons:\n      apt:\n        packages: ninja-build python3-pip clang\n\n  - name: z/Arch\n    if: branch != master OR type == pull_request\n    arch: s390x\n    compiler: gcc\n    env:\n    - CC=\"gcc\"\n    - CXX=\"g++\"\n    - CFLAGS=\"-march=native -mzvector -Wextra -Werror\"\n    - CXXFLAGS=\"-march=native -mzvector -Wextra -Werror\"\n    - JOBS=\"$(nproc)\"\n    addons:\n      apt:\n        packages: ninja-build python3-pip gcc g++\n\nbefore_install:\n- cat /proc/cpuinfo\n- cat /proc/meminfo\n\ninstall:\n- pip3 install meson==0.55.1\n\nscript:\n- meson setup build -Db_coverage=true\n- ninja -C build -v -j${JOBS}\n\nafter_success:\n- meson test -C build --print-errorlogs\n\nnotifications:\n  email: false\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.5185546875,
          "content": "# Contributing to SIMDe\n\nFirst off, if you're even reading this, thank you!  There is a lot of\nwork to do, and any help is appreciated.\n\nIf you haven't already, please read the\n[README](https://github.com/simd-everywhere/simde/blob/master/README.md).  The\n[wiki](https://github.com/simd-everywhere/simde/wiki) also has some good\ninformation, especially the\n[FAQ](https://github.com/simd-everywhere/simde/wiki/FAQ) and a guide on how to\n[implement a new\nfunction](https://github.com/simd-everywhere/simde/wiki/Implementing-a-New-Function).\n\nFor information on developing for architectures you don't have access\nto, please see the [Development\nEnvironment](https://github.com/simd-everywhere/simde/wiki/Development-Environment)\npage on the wiki.\n\nIf you still have questions, or if anything below doesn't make sense\nto you, please feel free to use the [issue\ntracker](https://github.com/simd-everywhere/simde/issues) or the [mailing\nlist](https://groups.google.com/forum/#!forum/simde) to ask.  I know\nthe SIMDe documentation needs a lot of improvement, and asking\nquestions will help us understand what is missing, so please don't be\nshy!\n\n## Building the Tests\n\nSIMDe contains an extensive test suite used for development.  Most\nusers will never need to build the suite, but if you're contributing\ncode to SIMDe you'll need to build them.\n\nHere is the basic procedure for compiling and running the tests:\n\n### On Unix\n```bash\nmkdir -p build\ncd build\nCFLAGS=\"-march=native\" CXXFLAGS=\"-march=native\" meson setup ..\nninja test\n```\n\nNote that `-march=native` may not be the right flag for your compiler.\nThat should work for most compilers on x86/x86_64, though MSVC is an\nexception (try `/arch:AVX2` instead of `-march=native`).  On other\narchitectures please consult your compiler documentation to find out\nwhat flags you should use to enable the SIMD extension for your target\nplatform.  Here are a few to try:\n\n * ARM:\n   * `-march=armv8-a+simd` (for AArch64)\n   * `-march=armv8-a+simd -mfpu=auto` (for ARMv8)\n   * `-march=armv7-a -mfpu=neon` (for ARMv7)\n * POWER\n   * `-mcpu=native`\n\nIf you need a flag not listed above, please let us know so we can add\nit to the list.\n\n#### Single test\n\nCompile and run a specific test. Switch `emul` for `native`, and `/c` for `/cpp`\nas needed.\n\n```\nmeson test --print-errorlogs arm/neon/qabs/emul/c\n```\n\nUsing `meson test` instead of `ninja` and directly executing the test\nis helpful for emscripten and other architectures where are there extra steps needed\n(changing the directory, using `v8` to run`, etc..).\n\nJust compile one specific test with verbose output. Useful for debugging\ncompiler errors.\n\n```\nmeson compile --verbose test/arm/neon/qabs-emul-c\n```\n\n### On Windows:\n```bash\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\" arm64\nmkdir build\ncd build\nset CFLAGS=\"/std:c11\"\nset CXXFLAGS=\"/Zc:preprocessor\"\nmeson setup ..\nninja test\n```\nNote change arm64 to x64 on x86_64 CPU.\n\nYou may also want to take a look at the\n[Docker container](https://github.com/simd-everywhere/simde/tree/master/docker)\nwhich has many builds pre-configured, including cross-compilers and emulators.\n\n## Coding Style\n\nSIMDe has an [EditorConfig](https://editorconfig.org/) file to\nconfigure your editor for things like tabs vs. spaces, how many spaces,\netc. If you use an editor which doesn't support it out of the box then\nodds are good there is a plugin you can download; please do so.\n\nFor other coding style information, please see the\n[Coding Style](https://github.com/simd-everywhere/simde/wiki/Coding-Style)\ndocument in the Wiki.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.0517578125,
          "content": "Copyright (c) 2017 Evan Nemerson <evan@nemerson.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 49.587890625,
          "content": "# SIMD Everywhere\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-78-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n[![Chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://matrix.to/#/#simd-everywhere_community:gitter.im)\n[![codecov](https://codecov.io/gh/simd-everywhere/simde/branch/master/graph/badge.svg?token=jcMBoRk0ui)](https://codecov.io/gh/simd-everywhere/simde)\n\nThe SIMDe header-only library provides fast, portable implementations of\n[SIMD intrinsics](https://en.wikipedia.org/wiki/SIMD) on hardware which\ndoesn't natively support them, such as calling [SSE](https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions)\nfunctions on ARM.  There is no performance penalty if the hardware\nsupports the native implementation (*e.g.*, SSE/[AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions)\nruns at full speed on [x86](https://en.wikipedia.org/wiki/X86),\n[NEON](https://en.wikipedia.org/wiki/ARM_architecture#Advanced_SIMD_(Neon)) on [ARM](https://en.wikipedia.org/wiki/ARM_architecture),\n*etc.*).\n\nThis makes porting code to other architectures much easier in a few\nkey ways:\n\nFirst, instead of forcing you to rewrite everything for each\narchitecture, SIMDe lets you get a port up and running almost\neffortlessly.  You can then start working on switching the most\nperformance-critical sections to native intrinsics, improving\nperformance gradually.  SIMDe lets (for example) SSE/AVX and NEON code\nexist side-by-side, in the same implementation.\n\nSecond, SIMDe makes it easier to write code targeting [ISA](https://en.wikipedia.org/wiki/Instruction_set_architecture)\nextensions you don't have convenient access to.  You can run NEON code on your\nx86 machine *without an emulator*.  Obviously you'll eventually want\nto test on the actual hardware you're targeting, but for most\ndevelopment, SIMDe can provide a much easier path.\n\nSIMDe takes a very different approach from most other SIMD abstraction\nlayers in that it aims to expose the entire functionality of the\nunderlying instruction set.  Instead of limiting functionality to the\nlowest common denominator, SIMDe tries to minimize the amount of\neffort required to port while still allowing you the space to optimize\nas needed.\n\nThe current focus is on writing complete portable implementations,\nthough a large number of functions already have accelerated\nimplementations using one (or more) of the following:\n\n * SIMD intrinsics from other ISA extensions (e.g., using NEON to\n   implement SSE).\n * Compiler-specific vector extensions and built-ins such as\n   [`__builtin_shufflevector`](http://clang.llvm.org/docs/LanguageExtensions.html#langext-builtin-shufflevector)\n   and\n   [`__builtin_convertvector`](http://clang.llvm.org/docs/LanguageExtensions.html#langext-builtin-convertvector)\n * Compiler auto-vectorization hints, using:\n   * [OpenMP 4 SIMD](http://www.openmp.org/)\n   * [Cilk Plus](https://www.cilkplus.org/)\n   * [GCC loop-specific pragmas](https://gcc.gnu.org/onlinedocs/gcc/Loop-Specific-Pragmas.html)\n   * [clang pragma loop hint directives](http://llvm.org/docs/Vectorizers.html#pragma-loop-hint-directives)\n\nYou can [try SIMDe online](https://simde.netlify.app/godbolt/demo)\nusing Compiler Explorer and an amalgamated SIMDe header.\n\nIf you have any questions, please feel free to use the\n[issue tracker](https://github.com/simd-everywhere/simde/issues) or the\n[mailing list](https://groups.google.com/forum/#!forum/simde).\n\n## Current Status\n\nThere are currently complete implementations of the following instruction\nset extensions:\n\n* ARM\n  * [NEON](https://en.wikipedia.org/wiki/ARM_architecture_family#Advanced_SIMD_(Neon)) [List](https://developer.arm.com/architectures/instruction-sets/intrinsics/#f:@navigationhierarchiessimdisa=[Neon])\n* x86 / x86_64\n  * [MMX](https://en.wikipedia.org/wiki/MMX_(instruction_set)) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#techs=MMX)\n  * [SSE](https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ssetechs=SSE)\n  * [SSE2](https://en.wikipedia.org/wiki/SSE2) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ssetechs=SSE2)\n  * [SSE3](https://en.wikipedia.org/wiki/SSE3) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ssetechs=SSE3)\n  * [SSSE3](https://en.wikipedia.org/wiki/SSSE3) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ssetechs=SSSE3)\n  * [SSE4.1](https://en.wikipedia.org/wiki/SSE4#SSE4.1) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ssetechs=SSE4_1)\n  * [CRC32](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=7131&othertechs=CRC32)\n  * [AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#avxnewtechs=AVX)\n  * [AVX2](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#Advanced_Vector_Extensions_2) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#avxnewtechs=AVX2)\n  * [F16C](https://en.wikipedia.org/wiki/F16C) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#avxnewtechs=F16C)\n  * [FMA](https://en.wikipedia.org/wiki/FMA_instruction_set) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#avxnewtechs=FMA)\n  * [GFNI](https://en.wikipedia.org/wiki/AVX-512#GFNI) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#othertechs=GFNI)\n  * [XOP](https://en.wikipedia.org/wiki/XOP_instruction_set)\n  * [SVML](https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-intel-advanced-vector-extensions-512-intel-avx-512-instructions/intrinsics-for-arithmetic-operations-1/intrinsics-for-short-vector-math-library-svml-operations.html) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=770&techs=SVML)\n  * [AVX512VPOPCNTDQ](https://en.wikipedia.org/wiki/AVX-512#VPOPCNTDQ_and_BITALG) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=7131&avx512techs=AVX512VPOPCNTDQ)\n  * [AVX512_BITALG](https://en.wikipedia.org/wiki/AVX-512#VPOPCNTDQ_and_BITALG) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=7131&avx512techs=AVX512_BITALG)\n  * [AVX512_VBMI](https://en.wikipedia.org/wiki/AVX-512#Permute) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=7131&avx512techs=AVX512_VBMI)\n  * [AVX512_VNNI](https://en.wikipedia.org/wiki/AVX-512#VNNI) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=7131&avx512techs=AVX512_VNNI)\n  * [AVX512_VP2INTERSECT](https://en.wikipedia.org/wiki/AVX-512#VP2INTERSECT) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=7131&avx512techs=AVX512_VP2INTERSECT)\n  * [VPCLMULQDQ](https://en.wikipedia.org/wiki/AVX-512#VPCLMULQDQ) [List](https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#othertechs=VPCLMULQDQ)\n* WebAssembly\n  * [SIMD128](https://github.com/WebAssembly/simd)\n\nAs well as partial support for many others, including AES-ni, [CLMUL](https://en.wikipedia.org/wiki/CLMUL_instruction_set), SSE4.2, SVE, [MSA](https://en.wikipedia.org/wiki/MIPS_architecture#Application-specific_extensions) in\naddition to several AVX-512 extensions.  See the\n[instruction-set-support](https://github.com/simd-everywhere/simde/issues?q=is%3Aissue+is%3Aopen+label%3Ainstruction-set-support+sort%3Aupdated-desc)\nlabel in the issue tracker for details on progress.  If you'd like to\nbe notified when an instruction set is available you may subscribe to\nthe relevant issue.\n\nIf you have a project you're interested in using with SIMDe but we\ndon't yet support all the functions you need, please file an issue\nwith a list of what's missing so we know what to prioritize.\n\nThe default branch is protected so commits never reach it unless\nthey have passed extensive CI checks.  Status badges don't really\nmake sense since they will always be green, but here are the links:\n\n* [GitHub Actions](https://github.com/simd-everywhere/simde/actions)\n* [Cirrus CI](https://cirrus-ci.com/github/simd-everywhere/simde)\n* [Semaphore CI](https://nemequ.semaphoreci.com/projects/simde)\n* [Circle CI](https://app.circleci.com/pipelines/github/simd-everywhere/simde)\n* [AppVeyor](https://ci.appveyor.com/project/nemequ/simde)\n* [Azure Pipelines](https://dev.azure.com/simd-everywhere/SIMDe/_build)\n* [Drone CI](https://cloud.drone.io/simd-everywhere/simde/)\n* [Travis CI](https://app.travis-ci.com/github/simd-everywhere/simde/)\n* [Packit CI](https://dashboard.packit.dev/projects/github.com/simd-everywhere/simde)\n\nIf you're adding a new build I suggest Cirrus CI, which is where we\ncurrently have the most room given the number of builds currently on\nthe platform and the quotas for free/open-source usage.  Alternately,\nfeel free to set up another provider (such as\n[Codefresh](https://codefresh.io/),\n[Shippable](https://www.shippable.com/),\n[Bitrise](https://www.bitrise.io/),\n[Werkaer](https://app.wercker.com/), etc.).\n\n*Notice*: we plan on changing the name of the default branch from\n\"master\" to something else soon; we are just trying to wait to see what\nname git settles on so we can be consistent.\n\n## Contributing\n\nFirst off, if you're reading this: thank you! Even considering\ncontributing to SIMDe is very much appreciated!\n\nSIMDe is a fairly large undertaking; there are a *lot* of functions to\nget through and a lot of opportunities for optimization on different\nplatforms, so we're very happy for any help you can provide.\n\nProgrammers of all skill levels are welcome, there are lots of tasks\nwhich are pretty straightforward and don't require any special\nexpertise.\n\nIf you're not sure how you'd like to contribute, please consider taking\na look at [the issue tracker](https://github.com/simd-everywhere/simde/issues).\nThere is a [good first issue](https://github.com/simd-everywhere/simde/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\ntag if you want to ease into a your first contributions, but if you're\ninterested in something else please get in touch via the issue tracker;\nwe're happy to help you get a handle on whatever you are interested in.\n\nIf you're interested in implementing currently unimplemented functions,\nthere is [a\nguide](https://github.com/simd-everywhere/simde/wiki/Implementing-a-New-Function)\nexplaining how to add new functions and how to quickly and easily get\na test case in place.  It's a bit rough right now, but if anything is\nunclear please feel free to use the issue tracker to ask about\nanything you're not clear on.\n\n## Usage\n\nFirst, it is important to note that *you do not need two separate\nversions* (one using SIMDe, the other native).  If the native functions\nare available SIMDe will use them, and compilers easily optimize away\nany overhead from SIMDe; all they have to do is some basic inlining.\n`-O2` should be enough, but we strongly recommend `-O3` (or whatever\nflag instructs your compiler to aggressizely optimize) since many of\nthe portable fallbacks are substantially faster with aggressive\nauto-vectorization that isn't enabled at lower optimization levels.\n\nEach instruction set has a separate file; `x86/mmx.h` for MMX,\n`x86/sse.h` for SSE, `x86/sse2.h` for SSE2, and so on.  Just include\nthe header for whichever instruction set(s) you want *instead of the\nnative version* (if you include the native version after SIMDe it will\nresult in compile-time errors if native aliases are enabled).  SIMDe\nwill provide the fastest implementation it can given which extensions\nyou've enabled in your compiler (i.e., if you want to use NEON to\nimplement SSE, you may need to pass something like `-mfpu=neon`\nor `-march=armv8-a+simd`.  See\n[GCC ARM-Options](https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html)\nfor more information).\n\nIf you define `SIMDE_ENABLE_NATIVE_ALIASES` before including SIMDe\nyou can use the same names as the native functions.  Unfortunately,\nthis is somewhat error-prone due to portability issues in the APIs, so\nit's recommended to only do this for testing.  When\n`SIMDE_ENABLE_NATIVE_ALIASES` is undefined only the versions prefixed\nwith `simde_` will be available; for example, the MMX `_mm_add_pi8`\nintrinsic becomes `simde_mm_add_pi8`, and `__m64` becomes `simde__m64`.\n\nSince SIMDe is meant to be portable, many functions which assume types\nare of a specific size have been altered to use fixed-width types\ninstead.  For example, Intel's APIs use `char` for signed 8-bit\nintegers, but `char` on ARM is generally unsigned.  SIMDe uses `int8_t`\nto make the API portable, but that means your code may require some\nminor changes (such as using `int8_t` instead of `char`) to work on\nother platforms.\n\nThat said, the changes are usually quite minor.  It's often enough to\njust use search and replace, manual changes are required pretty\ninfrequently.\n\n### OpenMP 4 SIMD\n\nSIMDe makes extensive use of annotations to help the compiler vectorize\ncode.  By far the best annotations use the SIMD support built in to\nOpenMP 4, so if your compiler supports these annotations we strongly\nrecommend you enable them.\n\nIf you are already using OpenMP, SIMDe will automatically detect it\nusing the `_OPENMP` macro and no further action is required.\n\nSome compilers allow you to enable OpenMP SIMD *without* enabling the\nfull OpenMP.  In such cases there is no runtime dependency on OpenMP\nand no runtime overhead; SIMDe will just be faster.  Unfortunately,\nSIMDe has no way to detect such situations (the `_OPENMP` macro is not\ndefined), so after enabling it in your compiler you'll need to define\n`SIMDE_ENABLE_OPENMP` (e.g., by passing `-DSIMDE_ENABLE_OPENMP`) to get\nSIMDe to output the relevant pragmas.\n\nEnabling OpenMP SIMD support varies by compiler:\n\n * GCC 4.9+ and clang 6+ support a `-fopenmp-simd` command line flag.\n * ICC supports a `-qopenmp-simd` command line flag.\n * MCST's LCC enables OpenMP SIMD by default, so no flags are needed\n   (technically you don't even need to pass `-DSIMDE_ENABLE_OPENMP`).\n\nWe are not currently aware of any other compilers which allow you to\nenable OpenMP SIMD support without enabling full OpenMP (if you are\nplease file an issue to let us know).  You should determine whether you\nwish to enable full OpenMP support on a case-by-case basis, but it is\nlikely that the overhead of linking to (but not using) the OpenMP\nruntime library will be dwarfed by the performance improvements from\nusing the OpenMP SIMD annotations in SIMDe.\n\nIf you choose not to use OpenMP SIMD, SIMDe also supports\nusing [Cilk Plus](https://www.cilkplus.org/), [GCC loop-specific\npragmas](https://gcc.gnu.org/onlinedocs/gcc/Loop-Specific-Pragmas.html),\nor [clang pragma loop hint\ndirectives](http://llvm.org/docs/Vectorizers.html#pragma-loop-hint-directives),\nthough these are not nearly as effective as OpenMP SIMD and depending\non them will likely result in less efficient code.  All of these are\ndetected automatically by SIMDe, so if they are enabled in your\ncompiler nothing more is required.\n\nIf for some reason you do not wish to enable OpenMP 4 SIMD support even\nthough SIMDe detects it, you should define `SIMDE_DISABLE_OPENMP` prior\nto including SIMDe.\n\n## Portability\n\n### Compilers\n\nSIMDe does depend on some C99 features, though the subset supported by\nMSVC also works.  While we do our best to make sure we provide optimized\nimplementations where they are supported, SIMDe does contain portable\nfallbacks which are designed to work on any C99 compiler.\n\nEvery commit is tested in CI on multiple compilers, platforms, and\nconfigurations, and our test coverage is extremely extensive.\nCurrently tested compilers include:\n\n * GCC versions back to 4.8\n * Clang versions back to 3.8\n * Microsoft Visual Studio back to 12 (2013)\n * IBM XL C/C++\n * Intel C/C++ Compiler (ICC)\n\nI'm generally willing to accept patches to add support for other\ncompilers, as long as they're not too disruptive, *especially* if we\ncan get CI support going.  If using one of our existing CI providers\nisn't an option then other CI platforms can be added.\n\n### Hardware\n\nThe following architectures are tested in CI for every commit:\n\n * x86_64/amd64\n * x86\n * AArch64\n * ARMv8\n * ARMv7 with VFPv3-D16 floating point\n * ARMv5 EABI\n * PPC64\n * z/Architecture (with \"-mzvector\")\n * MIPS Loongson 64\n * RISC-V 64\n * emscripten 32- & 64-bit; regular and relaxed\n\nWe would love to add more, so patches are extremely welcome!\n\n## Related Projects\n\n * The \"builtins\" module in\n   [portable-snippets](https://github.com/nemequ/portable-snippets)\n   does much the same thing, but for compiler-specific intrinsics\n   (think `__builtin_clz` and `_BitScanForward`), **not** SIMD\n   intrinsics.\n * Intel offers an emulator, the [Intel® Software Development\n   Emulator](https://software.intel.com/en-us/articles/intel-software-development-emulator/)\n   which can be used to develop software which uses Intel intrinsics\n   without having to own hardware which supports them, though it\n   doesn't help for deployment.\n * [Iris](https://github.com/AlexYaruki/iris) is the only other project\n   I'm aware of which is attempting to create portable implementations\n   like SIMDe.  SIMDe is much further along on the Intel side, but Iris\n   looks to be in better shape on ARM.  C++-only, Apache 2.0 license.\n   AFAICT there are no accelerated fallbacks, nor is there a good way to\n   add them since it relies extensively on templates.\n * There are a few projects trying to implement one set with another:\n   * [ARM_NEON_2_x86_SSE](https://github.com/intel/ARM_NEON_2_x86_SSE)\n     — implementing NEON using SSE.  Quite extensive, Apache 2.0\n     license.\n   * [sse2neon](https://github.com/jratcliff63367/sse2neon) —\n     implementing SSE using NEON.  This code has already been merged\n     into SIMDe.\n   * [veclib](https://github.com/IvantheDugtrio/veclib) — implementing\n     SSE2 using AltiVec/VMX, using a non-free IBM library called\n     [powerveclib](https://www.ibm.com/developerworks/community/groups/community/powerveclib/)\n   * [SSE-to-NEON](https://github.com/otim/SSE-to-NEON) — implementing\n     SSE with NEON.  Non-free, C++.\n   * [AvxToNeon](https://github.com/kunpengcompute/AvxToNeon) — Popular\n      AVX+ intrinsincs implemented in NEON. C, Apache 2.0 license.\n   * [neon2rvv](https://github.com/howjmay/neon2rvv) - A C/C++ header file that converts Arm/Aarch64 NEON intrinsics to RISC-V Vector (RVV) Extension, MIT license\n   * [sse2rvv](https://github.com/pattonkan/sse2rvv) - A C/C++ header file that converts Intel SSE intrinsics to RISCV-V Extension intrinsics, MIT license.\n * [arm-neon-tests](https://github.com/christophe-lyon/arm-neon-tests)\n   contains tests to verify NEON implementations.\n\nIf you know of any other related projects, please [let us\nknow](https://github.com/simd-everywhere/simde/issues/new)!\n\n## Caveats\n\nSometime features can't be emulated.  If SIMDe is operating in native\nmode the functions will work as expected, but if there is no native\nsupport some caveats apply:\n\n * Many functions require <math.h> and/or <fenv.h>.  SIMDe will still\n   work without those headers, but the results of those functions are\n   undefined.\n * x86 / x86_64\n   * SSE\n     * `SIMDE_MM_SET_ROUNDING_MODE()` will use `fesetround()`, altering\n       the global rounding mode.\n     * `simde_mm_getcsr` and `simde_mm_setcsr` only implement bits 13\n       and 14 (rounding mode).\n   * AVX\n     * `simde_mm256_test*` do not set the CF/ZF registers as there is\n       no portable way to implement that functionality.\n     * `simde_mm256_zeroall` and `simde_mm256_zeroupper` are not\n       implemented as there is no portable way to implement that\n       functionality.\n\nAdditionally, there are some known limitations which apply when using\nnative aliases (`SIMDE_ENABLE_NATIVE_ALIASES`):\n\n* On Windows x86 (but not x86_64), some MMX functions and SSE/SSE2\n  functions which use MMX types (__m64) other than for pointers may\n  return incorrect results.\n\nAlso, as mentioned earlier, while some APIs make assumptions about\nbasic types (*e.g.*, `int` is 32 bits), SIMDe does not, so many types\nhave been altered to use portable fixed-width versions such as\n`int32_t`.\n\nIf you find any other differences, please file an issue so we can either fix\nit or add it to the list above.\n\n## Benefactors\n\nSIMDe uses resources provided for free by a number of organizations.\nWhile this shouldn't be taken to imply endorsement of SIMDe, we're\ntremendously grateful for their support:\n\n * [IntegriCloud](https://integricloud.com/) — provides access to a very\n   fast POWER9 server for developing AltiVec/VMX support.\n * [GCC Compile Farm](https://gcc.gnu.org/wiki/CompileFarm) — provides\n   access to a wide range of machines with different architectures for\n   developing support for various ISA extensions.\n * [CodeCov.io](https://codecov.io/) — provides code coverage analysis\n   for our test cases.\n * [Google](https://www.google.com/) ­— financing\n   [Summer of Code](https://summerofcode.withgoogle.com/), substantial\n   amounts of code (Sean Maher's contributions), and an [Open Source Peer\n   Bonus](https://opensource.google/docs/growing/peer-bonus/).\n\nWithout such organizations donating resources, SIMDe wouldn't be nearly\nas useful or usable as it is today.\n\nWe would also like to thank anyone who has helped develop the myriad\nof software on which SIMDe relies, including compilers and analysis\ntools.\n\nFinally, a special thank you to\n[anyone who has contributed](https://github.com/simd-everywhere/simde/graphs/contributors)\nto SIMDe, filed bugs, provided suggestions, or helped with SIMDe\ndevelopment in any way.\n\n## License\n\nSIMDe is distributed under an MIT-style license; see COPYING for\ndetails.\n\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://nemequ.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1151?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Evan Nemerson</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=nemequ\" title=\"Code\">💻</a> <a href=\"#content-nemequ\" title=\"Content\">🖋</a> <a href=\"https://github.com/nemequ/simde/commits?author=nemequ\" title=\"Documentation\">📖</a> <a href=\"#example-nemequ\" title=\"Examples\">💡</a> <a href=\"#ideas-nemequ\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#question-nemequ\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/nemequ/simde/pulls?q=is%3Apr+reviewed-by%3Anemequ\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"https://github.com/nemequ/simde/commits?author=nemequ\" title=\"Tests\">⚠️</a> <a href=\"#tutorial-nemequ\" title=\"Tutorials\">✅</a> <a href=\"#talk-nemequ\" title=\"Talks\">📢</a> <a href=\"https://github.com/nemequ/simde/issues?q=author%3Anemequ\" title=\"Bug reports\">🐛</a> <a href=\"#infra-nemequ\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#maintenance-nemequ\" title=\"Maintenance\">🚧</a> <a href=\"#projectManagement-nemequ\" title=\"Project Management\">📆</a></td>\n    <td align=\"center\"><a href=\"https://orcid.org/0000-0002-2961-9670\"><img src=\"https://avatars3.githubusercontent.com/u/1330696?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Michael R. Crusoe</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Amr-c\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/nemequ/simde/commits?author=mr-c\" title=\"Code\">💻</a> <a href=\"#eventOrganizing-mr-c\" title=\"Event Organizing\">📋</a> <a href=\"#fundingFinding-mr-c\" title=\"Funding Finding\">🔍</a> <a href=\"#ideas-mr-c\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#infra-mr-c\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#platform-mr-c\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"https://github.com/nemequ/simde/commits?author=mr-c\" title=\"Tests\">⚠️</a> <a href=\"#maintenance-mr-c\" title=\"Maintenance\">🚧</a> <a href=\"#projectManagement-mr-c\" title=\"Project Management\">📆</a> <a href=\"https://github.com/nemequ/simde/pulls?q=is%3Apr+reviewed-by%3Amr-c\" title=\"Reviewed Pull Requests\">👀</a></td>\n    <td align=\"center\"><a href=\"https://github.com/himanshi18037\"><img src=\"https://avatars1.githubusercontent.com/u/43923076?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>HIMANSHI MATHUR</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=himanshi18037\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=himanshi18037\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/masterchef2209\"><img src=\"https://avatars0.githubusercontent.com/u/27916352?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Hidayat Khan</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=masterchef2209\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=masterchef2209\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rosbif\"><img src=\"https://avatars1.githubusercontent.com/u/553899?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rosbif</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=rosbif\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=rosbif\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/nemequ/simde/issues?q=author%3Arosbif\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-rosbif\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/nemequ/simde/commits?author=rosbif\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"http://junaruga.hatenablog.com/\"><img src=\"https://avatars2.githubusercontent.com/u/121989?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jun Aruga</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=junaruga\" title=\"Code\">💻</a> <a href=\"#ideas-junaruga\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#platform-junaruga\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"#infra-junaruga\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#maintenance-junaruga\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/nemequ/simde/commits?author=junaruga\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/nemequ/simde/issues?q=author%3Ajunaruga\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/marmeladema\"><img src=\"https://avatars2.githubusercontent.com/u/1629419?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Élie ROUDNINSKI</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=marmeladema\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=marmeladema\" title=\"Tests\">⚠️</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"http://www.bache.name\"><img src=\"https://avatars3.githubusercontent.com/u/7937081?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesper Storm Bache</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=jsbache\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jeffdaily\"><img src=\"https://avatars1.githubusercontent.com/u/904248?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeff Daily</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=jeffdaily\" title=\"Code\">💻</a> <a href=\"#infra-jeffdaily\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://github.com/yekm\"><img src=\"https://avatars2.githubusercontent.com/u/205196?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Pavel</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=yekm\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sabarishbollapragada\"><img src=\"https://avatars3.githubusercontent.com/u/36379720?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sabarish Bollapragada</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=sabarishbollapragada\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"http://www.thegavinli.com/\"><img src=\"https://avatars2.githubusercontent.com/u/371529?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Li</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=gh2o\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"http://www.yiningkarlli.com\"><img src=\"https://avatars0.githubusercontent.com/u/1057198?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yining Karl Li</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=betajippity\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://www.facebook.com/anirbandey303\"><img src=\"https://avatars1.githubusercontent.com/u/29774651?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Anirban Dey</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=anirbandey303\" title=\"Documentation\">📖</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/Un1Gfn\"><img src=\"https://avatars3.githubusercontent.com/u/28521292?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Darren Ng</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=Un1Gfn\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/FaresSalem\"><img src=\"https://avatars0.githubusercontent.com/u/7736245?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>FaresSalem</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=FaresSalem\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GorePradnyesh\"><img src=\"https://avatars0.githubusercontent.com/u/843197?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Pradnyesh Gore</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=GorePradnyesh\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/seanptmaher\"><img src=\"https://avatars0.githubusercontent.com/u/39571964?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sean Maher</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=seanptmaher\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://zh.wikipedia.org/wiki/User:Artoria2e5\"><img src=\"https://avatars.githubusercontent.com/u/6459309?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mingye Wang</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=Artoria2e5\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"http://www.ngzhian.com\"><img src=\"https://avatars.githubusercontent.com/u/1749303?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ng Zhi An</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=ngzhian\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=ngzhian\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Glitch18\"><img src=\"https://avatars.githubusercontent.com/u/30515829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Atharva Nimbalkar</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=Glitch18\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=Glitch18\" title=\"Tests\">⚠️</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/simba611\"><img src=\"https://avatars.githubusercontent.com/u/59763921?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>simba611</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=simba611\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=simba611\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://ashnewmanjones.com\"><img src=\"https://avatars.githubusercontent.com/u/29983014?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ashleigh Newman-Jones</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=ashnewmanjones\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=ashnewmanjones\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://alum.mit.edu/www/wrv/\"><img src=\"https://avatars.githubusercontent.com/u/5039686?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Willy R. Vasquez</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=wrv\" title=\"Code\">💻</a> <a href=\"#maintenance-wrv\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/nemequ/simde/commits?author=wrv\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://cs.stanford.edu/~keithw\"><img src=\"https://avatars.githubusercontent.com/u/208955?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Keith Winstein</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=keithw\" title=\"Code\">💻</a> <a href=\"#maintenance-keithw\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/nemequ/simde/commits?author=keithw\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/SoapGentoo\"><img src=\"https://avatars.githubusercontent.com/u/16636962?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>David Seifert</b></sub></a><br /><a href=\"#maintenance-SoapGentoo\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://mirdita.de\"><img src=\"https://avatars.githubusercontent.com/u/63657?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Milot Mirdita</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=milot-mirdita\" title=\"Code\">💻</a> <a href=\"#maintenance-milot-mirdita\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/nemequ/simde/commits?author=milot-mirdita\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"http://bitpatch.com\"><img src=\"https://avatars.githubusercontent.com/u/4021602?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>aqrit</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=aqrit\" title=\"Code\">💻</a> <a href=\"#maintenance-aqrit\" title=\"Maintenance\">🚧</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dgazzoni\"><img src=\"https://avatars.githubusercontent.com/u/17934171?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Décio Luiz Gazzoni Filho</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=dgazzoni\" title=\"Code\">💻</a> <a href=\"#maintenance-dgazzoni\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/nemequ/simde/commits?author=dgazzoni\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"http://vk.com/muzzdiez\"><img src=\"https://avatars.githubusercontent.com/u/16463967?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Igor Molchanov</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=makise-homura\" title=\"Code\">💻</a> <a href=\"#maintenance-makise-homura\" title=\"Maintenance\">🚧</a> <a href=\"#platform-makise-homura\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/anrodrig\"><img src=\"https://avatars.githubusercontent.com/u/35815808?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrew Rodriguez</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=anrodrig\" title=\"Code\">💻</a> <a href=\"#maintenance-anrodrig\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/nemequ/simde/commits?author=anrodrig\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Changqing-JING\"><img src=\"https://avatars.githubusercontent.com/u/59640930?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Changqing  Jing</b></sub></a><br /><a href=\"#maintenance-Changqing-JING\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"http://jpcima.sdf1.org/\"><img src=\"https://avatars.githubusercontent.com/u/17614485?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>JP Cimalando</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=jpcima\" title=\"Code\">💻</a> <a href=\"#infra-jpcima\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://flygoat.com/\"><img src=\"https://avatars.githubusercontent.com/u/5955297?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jiaxun Yang</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=FlyGoat\" title=\"Code\">💻</a> <a href=\"#platform-FlyGoat\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ktgw0316\"><img src=\"https://avatars.githubusercontent.com/u/3116763?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Masahiro Kitagawa</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=ktgw0316\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=ktgw0316\" title=\"Tests\">⚠️</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/operasfantom\"><img src=\"https://avatars.githubusercontent.com/u/31903947?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Pavel Iatchenii</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=operasfantom\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=operasfantom\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://tommyvct.tk\"><img src=\"https://avatars.githubusercontent.com/u/7903172?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tommy Vercetti</b></sub></a><br /><a href=\"#maintenance-tommyvct\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rscohn2\"><img src=\"https://avatars.githubusercontent.com/u/1936730?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Robert Cohn</b></sub></a><br /><a href=\"#maintenance-rscohn2\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/adamnovak\"><img src=\"https://avatars.githubusercontent.com/u/5062495?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Novak</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=adamnovak\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/boris-kuz\"><img src=\"https://avatars.githubusercontent.com/u/18011434?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>boris-kuz</b></sub></a><br /><a href=\"#maintenance-boris-kuz\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Epixu\"><img src=\"https://avatars.githubusercontent.com/u/1529601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dimo Markov</b></sub></a><br /><a href=\"#maintenance-Epixu\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://dhbloo.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/32353216?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>dblue</b></sub></a><br /><a href=\"#maintenance-dhbloo\" title=\"Maintenance\">🚧</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/zekehul\"><img src=\"https://avatars.githubusercontent.com/u/8780526?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>zekehul</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=zekehul\" title=\"Code\">💻</a> <a href=\"#maintenance-zekehul\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://open-cells.com\"><img src=\"https://avatars.githubusercontent.com/u/40661368?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Laurent Thomas</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=LaurentThomas\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/maxbachmann\"><img src=\"https://avatars.githubusercontent.com/u/44199644?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Max Bachmann</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=maxbachmann\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/psaab\"><img src=\"https://avatars.githubusercontent.com/u/196946?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>psaab</b></sub></a><br /><a href=\"#maintenance-psaab\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"http://superduper.net/\"><img src=\"https://avatars.githubusercontent.com/u/515813?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sam Clegg</b></sub></a><br /><a href=\"#maintenance-sbc100\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/tlively52\"><img src=\"https://avatars.githubusercontent.com/u/7121787?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Thomas Lively</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Atlively\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-tlively\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tlively\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"http://blog.coderzh.com/\"><img src=\"https://avatars.githubusercontent.com/u/329164?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>coderzh</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=coderzh\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=coderzh\" title=\"Tests\">⚠️</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/k-dominik\"><img src=\"https://avatars.githubusercontent.com/u/24434157?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dominik Kutra</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=k-dominik\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=k-dominik\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Lithrein\"><img src=\"https://avatars.githubusercontent.com/u/207981?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Lithrein</b></sub></a><br /><a href=\"#maintenance-Lithrein\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/quyykk\"><img src=\"https://avatars.githubusercontent.com/u/85879619?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nick</b></sub></a><br /><a href=\"#maintenance-quyykk\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/thomasdwu\"><img src=\"https://avatars.githubusercontent.com/u/6819659?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>thomasdwu</b></sub></a><br /><a href=\"#maintenance-thomasdwu\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Remnant44\"><img src=\"https://avatars.githubusercontent.com/u/54461740?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Stephen</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3ARemnant44\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/johnplatts\"><img src=\"https://avatars.githubusercontent.com/u/28941113?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>John Platts</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Ajohnplatts\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/tycho\"><img src=\"https://avatars.githubusercontent.com/u/29616?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Steven Noonan</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Atycho\" title=\"Bug reports\">🐛</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/p0nce\"><img src=\"https://avatars.githubusercontent.com/u/1067485?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>p0nce </b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Ap0nce\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://bonedaddy.net/pabs3/\"><img src=\"https://avatars.githubusercontent.com/u/328602?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Paul Wise</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Apabs3\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/easyaspi314\"><img src=\"https://avatars.githubusercontent.com/u/6258309?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>easyaspi314 (Devin)</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Aeasyaspi314\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/nemequ/simde/commits?author=easyaspi314\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/JonLiu1993\"><img src=\"https://avatars.githubusercontent.com/u/63675417?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>JonLiu1993</b></sub></a><br /><a href=\"#platform-JonLiu1993\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Cheney-W\"><img src=\"https://avatars.githubusercontent.com/u/38240633?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Cheney Wang</b></sub></a><br /><a href=\"#platform-Cheney-W\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"http://myd7349.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/5435649?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>myd7349 </b></sub></a><br /><a href=\"#platform-myd7349\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/chausner\"><img src=\"https://avatars.githubusercontent.com/u/15180557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>chausner</b></sub></a><br /><a href=\"#platform-chausner\" title=\"Packaging/porting to new platform\">📦</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/yyctw\"><img src=\"https://avatars.githubusercontent.com/u/45251297?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yi-Yen Chung</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=yyctw\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=yyctw\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/wewe5215\"><img src=\"https://avatars.githubusercontent.com/u/76145143?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Chi-Wei Chu</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=wewe5215\" title=\"Code\">💻</a> <a href=\"https://github.com/nemequ/simde/commits?author=wewe5215\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/M-HT\"><img src=\"https://avatars.githubusercontent.com/u/12173952?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>M-HT</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=M-HT\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://gottliebtfreitag.de\"><img src=\"https://avatars.githubusercontent.com/u/456045?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Simon Gene Gottlieb</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=SGSSGene\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"http://bsc.fu-berlin.de\"><img src=\"https://avatars.githubusercontent.com/u/6008722?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Chris Bielow</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=cbielow\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiWeiGu\"><img src=\"https://avatars.githubusercontent.com/u/41367273?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>gu xiwei</b></sub></a><br /><a href=\"#platform-XiWeiGu\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"https://github.com/nemequ/simde/commits?author=XiWeiGu\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Vineg\"><img src=\"https://avatars.githubusercontent.com/u/1757455?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>George Vinokhodov</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=Vineg\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/Coeur\"><img src=\"https://avatars.githubusercontent.com/u/839992?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Cœur</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=Coeur\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Proudsalsa\"><img src=\"https://avatars.githubusercontent.com/u/103449548?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Florian @Proudsalsa</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=Proudsalsa\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/thomas-schlichter\"><img src=\"https://avatars.githubusercontent.com/u/106664923?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Thomas Schlichter</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3Athomas-schlichter\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/nemequ/simde/commits?author=thomas-schlichter\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/AymenQ\"><img src=\"https://avatars.githubusercontent.com/u/3706283?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aymen Qader</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=AymenQ\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/eric900115\"><img src=\"https://avatars.githubusercontent.com/u/77781328?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Eric Su</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=eric900115\" title=\"Code\">💻</a> <a href=\"#platform-eric900115\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Torinde\"><img src=\"https://avatars.githubusercontent.com/u/97228894?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Torinde</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/issues?q=author%3ATorinde\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/nemequ/simde/commits?author=Torinde\" title=\"Documentation\">📖</a> <a href=\"#ideas-Torinde\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/yanghauyuan/\"><img src=\"https://avatars.githubusercontent.com/u/13924801?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yang Hau</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=howjmay\" title=\"Code\">💻</a> <a href=\"#ideas-howjmay\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/zengdage\"><img src=\"https://avatars.githubusercontent.com/u/16076103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zhijin Zeng</b></sub></a><br /><a href=\"https://github.com/nemequ/simde/commits?author=zengdage\" title=\"Code\">💻</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind are welcome!\n"
        },
        {
          "name": "amalgamate.py",
          "type": "blob",
          "size": 2.1005859375,
          "content": "#!/usr/bin/python3\n\n# amalgamate.py\n# Written by Evan Nemerson <evan@nemerson.com>\n#\n# To the extent possible under law, the author(s) have dedicated all\n# copyright and related and neighboring rights to this software to\n# the public domain worldwide. This software is distributed without\n# any warranty.\n#\n# For details, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n# SPDX-License-Identifier: CC0-1.0\n\n# Quick and dirty script to amalgamate C into a single file.  Includes\n# using angle brackets (#include <foo.h>) will be preserved, but for\n# includes using double quotes (#include \"foo.h\") the file will be\n# included by this script.\n#\n# If you make any improvements please report them in the SIMDe issue\n# tracker at <https://github.com/simd-everywhere/simde/issues> or\n# directly to the author so they can be merged back into the original\n# version.\n\nimport sys, re, os, subprocess\n\namalgamate_include = re.compile('^\\\\s*#\\\\s*include\\\\s+\\\\\"([^)]+)\\\\\"\\\\s$')\nalready_included = []\n\ndef amalgamate(filename, stream):\n  full_path = os.path.realpath(os.path.realpath(filename))\n  srcdir = os.path.dirname(full_path)\n\n  print('/* AUTOMATICALLY GENERATED FILE, DO NOT MODIFY */')\n\n  git_id = subprocess.check_output([\"git\", \"rev-parse\", \"HEAD\"], cwd=srcdir).decode().strip()\n  print(\"/* {:s} */\".format(git_id))\n\n  if full_path not in already_included:\n    already_included.insert(-1, full_path)\n    with open(filename) as input_file:\n      stream.write('/* :: Begin ' + os.path.relpath(full_path) + ' :: */\\n')\n\n      for source_line in input_file:\n        a9e_inc_m = amalgamate_include.match(source_line)\n        if a9e_inc_m:\n          amalgamate(os.path.join(srcdir, a9e_inc_m.group(1)), stream)\n        else:\n          stream.write(source_line)\n\n      stream.write('/* :: End ' + os.path.relpath(full_path) + ' :: */\\n')\n\nif len(sys.argv) != 2:\n  sys.stderr.write(\"USAGE: \" + sys.argv[0] + ' SOURCE_FILE\\n\\n')\n  sys.stderr.write(\"This will print a copy of $SOURCE_FILE to stdout, while replacing\\n\")\n  sys.stderr.write(\"all '#include AMALGAMATE(file)' lines with copies of file.\\n\")\n\n  sys.exit(1)\n\namalgamate(sys.argv[1], sys.stdout)\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.033203125,
          "content": "comment: false\nignore:\n  - \"test\"\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 8.1630859375,
          "content": "project('SIMDe', 'c', 'cpp',\n        default_options: ['c_std=c99'],\n        license: 'MIT',\n        meson_version : '>=0.54.0',\n        version: '0.8.3')\n# also update SIMDE_VESION_* in simde/simde-common.h\n\ncc = meson.get_compiler('c')\ncxx = meson.get_compiler('cpp')\n\nsimde_neon_families = [\n  'aba',\n  'abal',\n  'abal_high',\n  'abd',\n  'abdl',\n  'abdl_high',\n  'abs',\n  'add',\n  'addhn',\n  'addhn_high',\n  'addl',\n  'addlv',\n  'addl_high',\n  'addv',\n  'addw',\n  'addw_high',\n  'aes',\n  'and',\n  'bcax',\n  'bic',\n  'bsl',\n  'cadd_rot270',\n  'cadd_rot90',\n  'cage',\n  'cagt',\n  'cale',\n  'calt',\n  'ceq',\n  'ceqz',\n  'cge',\n  'cgez',\n  'cgt',\n  'cgtz',\n  'cle',\n  'cls',\n  'clez',\n  'clt',\n  'cltz',\n  'clz',\n  'cmla',\n  'cmla_lane',\n  'cmla_rot180',\n  'cmla_rot180_lane',\n  'cmla_rot270',\n  'cmla_rot270_lane',\n  'cmla_rot90',\n  'cmla_rot90_lane',\n  'cnt',\n  'cvt',\n  'cvt_n',\n  'cvtm',\n  'cvtn',\n  'cvtp',\n  'combine',\n  'copy_lane',\n  'crc32',\n  'create',\n  'div',\n  'dot',\n  'dot_lane',\n  'dup_n',\n  'dup_lane',\n  'eor',\n  'ext',\n  'fma',\n  'fma_lane',\n  'fma_n',\n  'fmlal',\n  'fmlsl',\n  'fms',\n  'fms_lane',\n  'fms_n',\n  'get_high',\n  'get_lane',\n  'get_low',\n  'hadd',\n  'hsub',\n  'ld1_dup',\n  'ld1_lane',\n  'ld1_x2',\n  'ld1_x3',\n  'ld1_x4',\n  'ld1q_x2',\n  'ld1q_x3',\n  'ld1q_x4',\n  'ld1',\n  'ld2',\n  'ld2_dup',\n  'ld2_lane',\n  'ld3',\n  'ld3_dup',\n  'ld3_lane',\n  'ld4',\n  'ld4_dup',\n  'ld4_lane',\n  'max',\n  'maxnm',\n  'maxnmv',\n  'maxv',\n  'min',\n  'minnm',\n  'minnmv',\n  'minv',\n  'mla',\n  'mla_lane',\n  'mla_n',\n  'mlal',\n  'mlal_high',\n  'mlal_high_lane',\n  'mlal_high_n',\n  'mlal_lane',\n  'mlal_n',\n  'mls',\n  'mls_lane',\n  'mls_n',\n  'mlsl',\n  'mlsl_high',\n  'mlsl_high_lane',\n  'mlsl_high_n',\n  'mlsl_lane',\n  'mlsl_n',\n  'mmlaq',\n  'movl',\n  'movl_high',\n  'movn',\n  'movn_high',\n  'mul',\n  'mul_lane',\n  'mul_n',\n  'mull',\n  'mull_high',\n  'mull_high_lane',\n  'mull_high_n',\n  'mull_lane',\n  'mull_n',\n  'mulx',\n  'mulx_lane',\n  'mulx_n',\n  'mvn',\n  'neg',\n  'orn',\n  'orr',\n  'padal',\n  'padd',\n  'paddl',\n  'pmax',\n  'pmaxnm',\n  'pmin',\n  'pminnm',\n  'qadd',\n  'qabs',\n  'qdmlal',\n  'qdmlal_high',\n  'qdmlal_high_lane',\n  'qdmlal_high_n',\n  'qdmlal_lane',\n  'qdmlal_n',\n  'qdmlsl',\n  'qdmlsl_high',\n  'qdmlsl_high_lane',\n  'qdmlsl_high_n',\n  'qdmlsl_lane',\n  'qdmlsl_n',\n  'qdmulh',\n  'qdmulh_lane',\n  'qdmulh_n',\n  'qdmull',\n  'qdmull_high',\n  'qdmull_high_lane',\n  'qdmull_high_n',\n  'qdmull_lane',\n  'qdmull_n',\n  'qrdmlah',\n  'qrdmlah_lane',\n  'qrdmlsh',\n  'qrdmlsh_lane',\n  'qrdmulh',\n  'qrdmulh_lane',\n  'qrdmulh_n',\n  'qrshl',\n  'qrshrn_high_n',\n  'qrshrn_n',\n  'qrshrun_high_n',\n  'qrshrun_n',\n  'qmovn',\n  'qmovn_high',\n  'qmovun',\n  'qmovun_high',\n  'qneg',\n  'qshl',\n  'qshl_n',\n  'qshlu_n',\n  'qshrn_high_n',\n  'qshrn_n',\n  'qshrun_high_n',\n  'qshrun_n',\n  'qsub',\n  'qtbl',\n  'qtbx',\n  'raddhn',\n  'raddhn_high',\n  'rax',\n  'rbit',\n  'recpe',\n  'recps',\n  'recpx',\n  'reinterpret',\n  'rev16',\n  'rev32',\n  'rev64',\n  'rhadd',\n  'rnd',\n  'rnd32x',\n  'rnd32z',\n  'rnd64x',\n  'rnd64z',\n  'rnda',\n  'rndi',\n  'rndm',\n  'rndn',\n  'rndp',\n  'rndx',\n  'rshl',\n  'rshr_n',\n  'rshrn_high_n',\n  'rshrn_n',\n  'rsqrte',\n  'rsqrts',\n  'rsra_n',\n  'rsubhn',\n  'rsubhn_high',\n  'set_lane',\n  'sha1',\n  'sha256',\n  'sha512',\n  'shl',\n  'shl_n',\n  'shll_high_n',\n  'shll_n',\n  'shr_n',\n  'shrn_high_n',\n  'shrn_n',\n  'sli_n',\n  'sm3',\n  'sm4',\n  'sqadd',\n  'sqrt',\n  'sra_n',\n  'sri_n',\n  'st1',\n  'st1_lane',\n  'st1_x2',\n  'st1_x3',\n  'st1_x4',\n  'st1q_x2',\n  'st1q_x3',\n  'st1q_x4',\n  'st2',\n  'st2_lane',\n  'st3',\n  'st3_lane',\n  'st4',\n  'st4_lane',\n  'sub',\n  'subhn',\n  'subhn_high',\n  'subl',\n  'subl_high',\n  'subw',\n  'subw_high',\n  'sudot_lane',\n  'tbl',\n  'tbx',\n  'trn1',\n  'trn2',\n  'trn',\n  'tst',\n  'uqadd',\n  'usdot',\n  'usdot_lane',\n  'uzp1',\n  'uzp2',\n  'uzp',\n  'xar',\n  'zip1',\n  'zip2',\n  'zip',\n]\n\nsimde_sve_families = [\n  'add',\n  'and',\n  'cnt',\n  'cmplt',\n  'dup',\n  'ld1',\n  'ptest',\n  'ptrue',\n  'qadd',\n  'sel',\n  'st1',\n  'sub',\n  'reinterpret',\n  'whilelt'\n]\n\nsimde_avx512_families = [\n  '2intersect',\n  '4dpwssd',\n  '4dpwssds',\n  'abs',\n  'add',\n  'adds',\n  'and',\n  'andnot',\n  'avg',\n  'bitshuffle',\n  'blend',\n  'broadcast',\n  'cast',\n  'cmp',\n  'cmpeq',\n  'cmpge',\n  'cmpgt',\n  'cmple',\n  'cmplt',\n  'cmpneq',\n  'compress',\n  'conflict',\n  'copysign',\n  'cvt',\n  'cvtt',\n  'cvts',\n  'cvtus',\n  'dbsad',\n  'div',\n  'dpbf16',\n  'dpbusd',\n  'dpbusds',\n  'dpwssd',\n  'dpwssds',\n  'expand',\n  'extract',\n  'fixupimm',\n  'fixupimm_round',\n  'flushsubnormal',\n  'fmadd',\n  'fmaddsub',\n  'fmsub',\n  'fnmadd',\n  'fnmsub',\n  'fpclass',\n  'gather',\n  'insert',\n  'kand',\n  'kshift',\n  'knot',\n  'kxor',\n  'load',\n  'loadu',\n  'lzcnt',\n  'madd',\n  'maddubs',\n  'max',\n  'min',\n  'mov',\n  'mov_mask',\n  'movm',\n  'mul',\n  'mulhi',\n  'mulhrs',\n  'mullo',\n  'multishift',\n  'negate',\n  'or',\n  'packs',\n  'packus',\n  'permutex',\n  'permutexvar',\n  'permutex2var',\n  'popcnt',\n  'range',\n  'range_round',\n  'rcp',\n  'reduce',\n  'rol',\n  'rolv',\n  'ror',\n  'rorv',\n  'round',\n  'roundscale',\n  'roundscale_round',\n  'sad',\n  'scalef',\n  'set',\n  'set1',\n  'set4',\n  'setr',\n  'setr4',\n  'setzero',\n  'setone',\n  'shldv',\n  'shuffle',\n  'sll',\n  'slli',\n  'sllv',\n  'sqrt',\n  'sra',\n  'srai',\n  'srav',\n  'srl',\n  'srli',\n  'srlv',\n  'store',\n  'storeu',\n  'sub',\n  'subs',\n  'ternarylogic',\n  'test',\n  'testn',\n  'unpacklo',\n  'unpackhi',\n  'xor',\n  'xorsign',\n]\n\nsimde_msa_families = [\n  'add_a',\n  'adds',\n  'adds_a',\n  'addv',\n  'addvi',\n  'and',\n  'andi',\n  'ld',\n  'madd',\n  'st',\n  'subv',\n]\n\nif not meson.is_subproject() and get_option('tests')\n  subdir('test')\nendif\n\nsimde_neon_family_headers = ['simde/arm/neon/types.h']\nforeach neon_family : simde_neon_families\n  simde_neon_family_headers += 'simde/arm/neon/' + neon_family + '.h'\nendforeach\n\nsimde_sve_family_headers = ['simde/arm/sve/types.h']\nforeach sve_family : simde_sve_families\n  simde_sve_family_headers += 'simde/arm/sve/' + sve_family + '.h'\nendforeach\n\nsimde_avx512_family_headers = ['simde/x86/avx512/types.h']\nforeach avx512_family : simde_avx512_families\n  simde_avx512_family_headers += 'simde/x86/avx512/' + avx512_family + '.h'\nendforeach\n\nsimde_msa_family_headers = ['simde/mips/msa/types.h']\nforeach msa_family : simde_msa_families\n  simde_msa_family_headers += 'simde/mips/msa/' + msa_family + '.h'\nendforeach\n\nif not meson.is_subproject()\n  install_headers(\n    files([\n      'simde/check.h',\n      'simde/debug-trap.h',\n      'simde/hedley.h',\n      'simde/simde-aes.h',\n      'simde/simde-align.h',\n      'simde/simde-arch.h',\n      'simde/simde-bf16.h',\n      'simde/simde-common.h',\n      'simde/simde-constify.h',\n      'simde/simde-detect-clang.h',\n      'simde/simde-diagnostic.h',\n      'simde/simde-f16.h',\n      'simde/simde-features.h',\n      'simde/simde-math.h',\n      'simde/simde-complex.h',\n      ]),\n    subdir: 'simde')\n\n  install_headers(\n    files([\n      'simde/x86/aes.h',\n      'simde/x86/avx512.h',\n      'simde/x86/avx2.h',\n      'simde/x86/avx.h',\n      'simde/x86/clmul.h',\n      'simde/x86/fma.h',\n      'simde/x86/f16c.h',\n      'simde/x86/gfni.h',\n      'simde/x86/mmx.h',\n      'simde/x86/sse2.h',\n      'simde/x86/sse3.h',\n      'simde/x86/sse4.1.h',\n      'simde/x86/sse4.2.h',\n      'simde/x86/sse.h',\n      'simde/x86/ssse3.h',\n      'simde/x86/svml.h',\n      'simde/x86/xop.h',\n      ]),\n    subdir: 'simde/x86')\n\n  install_headers(\n    files(simde_avx512_family_headers),\n    subdir: 'simde/x86/avx512')\n\n  install_headers(\n    files([\n      'simde/arm/neon.h',\n      'simde/arm/sve.h',\n      ]),\n    subdir: 'simde/arm')\n\n  install_headers(\n    files(simde_neon_family_headers),\n    subdir: 'simde/arm/neon')\n\n  install_headers(\n    files(simde_sve_family_headers),\n    subdir: 'simde/arm/sve')\n\n  install_headers(\n    files([\n      'simde/wasm/simd128.h',\n      'simde/wasm/relaxed-simd.h',\n      ]),\n    subdir: 'simde/wasm')\n\n  install_headers(\n    files([\n      'simde/mips/msa.h',\n      ]),\n    subdir: 'simde/mips')\n\n  install_headers(\n    files(simde_msa_family_headers),\n    subdir: 'simde/mips/msa')\n\n  import('pkgconfig').generate(\n    version : meson.project_version(),\n    name : 'SIMDe',\n    filebase : 'simde',\n    description : 'Portable SIMD wrapper library')\nendif\n\nsimde_dep = declare_dependency(\n  include_directories : include_directories('.'),\n  version : meson.project_version())\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.2216796875,
          "content": "option('tests',\n    type : 'boolean',\n    value : true,\n    description : 'Enable dependencies required for testing')\n\noption('sleef',\n    type : 'feature',\n    value : 'disabled',\n    description : 'Enable SLEEF integration')\n"
        },
        {
          "name": "netlify-disable.toml",
          "type": "blob",
          "size": 0.791015625,
          "content": "[build]\n  publish = 'web'\n  command = '''\n    for header in simde/*/*.h; do\n      header=\"$(echo \"$header\" | cut -b7-)\"\n      mkdir -p web/amalgamated/$(dirname \"$header\");\n      ./amalgamate.py \"simde/$header\" > web/amalgamated/\"${header}\";\n    done\n  '''\n\n[[headers]]\n  for = \"/amalgamated/*/*.h\"\n  [headers.values]\n    Access-Control-Allow-Origin = \"*\"\n\n[[redirects]]\n  from = \"/godbolt/simple\"\n  to = \"https://godbolt.org/z/Y3XexA\"\n  status = 302\n  force = true\n\n[[redirects]]\n  from = \"/godbolt/demo\"\n  to = \"https://godbolt.org/z/keBtF9\"\n  status = 302\n  force = true\n\n[[redirects]]\n  from = \"/godbolt/arm/neon/simple\"\n  to = \"https://godbolt.org/z/6rdp4L\"\n  status = 302\n  force = true\n\n[[redirects]]\n  from = \"/godbolt/arm/neon/demo\"\n  to = \"https://godbolt.org/z/sHVz49\"\n  status = 302\n  force = true\n"
        },
        {
          "name": "simde",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}