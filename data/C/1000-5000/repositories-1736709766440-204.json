{
  "metadata": {
    "timestamp": 1736709766440,
    "page": 204,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "espressif/ESP8266_RTOS_SDK",
      "stars": 3374,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03125,
          "content": "* text=auto\n\n*.bin       binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6025390625,
          "content": "*.o\n*.pyc\n\n# eclipse setting\n.settings\n.cproject\n.project\n\n# vscode setting\n.vscode\n\n# Example project files\nexamples/**/sdkconfig\nexamples/**/sdkconfig.old\nexamples/**/build\n\n# Unit test app files\ntools/unit-test-app/sdkconfig\ntools/unit-test-app/sdkconfig.old\ntools/unit-test-app/build\n\n# Doc build artifacts\ndocs/*/_build/\ndocs/*/doxygen-warning-log.txt\ndocs/*/sphinx-warning-log.txt\ndocs/*/sphinx-warning-log-sanitized.txt\ndocs/*/xml/\ndocs/*/xml_in/\ndocs/*/man/\ndocs/doxygen_sqlite3.db\n\n# emacs\n.dir-locals.el\n\n# emacs temp file suffixes\n*~\n.#*\n\\#*#\n\n# eclipse setting\n.settings\n\n# MacOS directory files\n.DS_Store"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 6.7939453125,
          "content": "stages:\n  - build\n  - deploy\n\nvariables:\n  GIT_STRATEGY: clone\n\n  IDF_PATH: \"$CI_PROJECT_DIR\"\n\n  # Versioned esp-idf-doc env image to use for all document building jobs\n  ESP_IDF_DOC_ENV_IMAGE: \"$CI_DOCKER_REGISTRY/esp-idf-doc-env:v8\"\n\n  GIT_SUBMODULE_STRATEGY: recursive\n  ESPCI_TOKEN: $GITLAB_KEY\n\n# before each job, we need to check if this job is filtered by bot stage/job filter\n.apply_bot_filter: &apply_bot_filter\n  python $APPLY_BOT_FILTER_SCRIPT || exit 0\n\nbefore_script:\n  - mkdir -p ~/.ssh\n  - chmod 700 ~/.ssh\n  - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64\n  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa\n  - chmod 600 ~/.ssh/id_rsa\n  - echo -e \"Host gitlab.espressif.cn\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n\n.do_nothing_before:\n  before_script: &do_nothing_before\n    # apply bot filter in before script\n    - *apply_bot_filter\n    - echo \"Not setting up GitLab key, fetching submodules ...\"\n    - git submodule update --init --recursive\n    - tools/idf_tools.py --non-interactive install && eval \"$(tools/idf_tools.py --non-interactive export)\" || exit 1\n    - source tools/ci/configure_ci_environment.sh\n\n.build_template: &build_template\n  stage: build\n  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new\n  tags:\n    - build\n\nbuild_ssc:\n  <<: *build_template\n  artifacts:\n    paths:\n      - ./SSC/ssc_bin\n    expire_in: 6 mos\n  script:\n    - tools/idf_tools.py --non-interactive install && eval \"$(tools/idf_tools.py --non-interactive export)\" || exit 1\n    - git clone $GITLAB_SSH_SERVER/yinling/SSC.git\n    - cd SSC\n    # try checkout same branch\n    - git checkout \"release/v3.4_8266\" || echo \"Using default branch...\"\n    - ./gen_misc_rtos.sh\n\npush_master_to_github:\n  stage: deploy\n  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG\n  tags:\n    - deploy\n  only:\n    - master\n    - /^release\\/v/\n    - /^v\\d+\\.\\d+(\\.\\d+)?($|-)/\n  when: on_success\n  dependencies: []\n  variables:\n    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master\n  before_script: *do_nothing_before\n  script:\n    - mkdir -p ~/.ssh\n    - chmod 700 ~/.ssh\n    - echo -n $GH_PUSH_KEY > ~/.ssh/id_rsa_base64\n    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n    - echo -e \"Host github.com\\n\\tStrictHostKeyChecking no\\n\" >> ~/.ssh/config\n    - git remote remove github &>/dev/null || true\n    - git remote add github git@github.com:espressif/ESP8266_RTOS_SDK.git\n    # What the next line of script does: goes through the list of refs for all branches we push to github,\n    # generates a snippet of shell which is evaluated. The snippet checks CI_COMMIT_SHA against the SHA\n    # (aka objectname) at tip of each branch, and if any SHAs match then it checks out the local branch\n    # and then pushes that ref to a corresponding github branch\n    - eval $(git for-each-ref --shell bash --format 'if [ $CI_COMMIT_SHA == %(objectname) ]; then git checkout -B %(refname:strip=3); git push --follow-tags github %(refname:strip=3); fi;' $GITHUB_PUSH_REFS)\n\nbuild_docs:\n  stage: build\n  image: $ESP_IDF_DOC_ENV_IMAGE\n  tags:\n    - build_docs\n  artifacts:\n    when: always\n    paths:\n      # English version of documentation\n      - docs/en/doxygen-warning-log.txt\n      - docs/en/sphinx-warning-log.txt\n      - docs/en/sphinx-warning-log-sanitized.txt\n      - docs/en/_build/html\n      - docs/sphinx-err-*\n    expire_in: 1 day\n  only:\n    variables:\n      - $BOT_TRIGGER_WITH_LABEL == null\n      - $BOT_LABEL_BUILD\n      - $BOT_LABEL_BUILD_DOCS\n      - $BOT_LABEL_REGULAR_TEST\n  script:\n    - source /opt/pyenv/activate && pyenv global 3.6.10\n    - /opt/pyenv/pyenv-1.2.16/versions/3.6.10/bin/python -m pip install --user -r $CI_PROJECT_DIR/docs/requirements.txt\n    - cd docs\n    - cd en\n    - make gh-linkcheck\n    - make html\n    - ../check_doc_warnings.sh\n\n.build_examples_make_template: &build_examples_make_template\n  <<: *build_template\n  # This is a workaround for a rarely encountered issue with building examples in CI.\n  # Probably related to building of Kconfig in 'make clean' stage\n  retry: 1\n  artifacts:\n    when: always\n    paths:\n      - $LOG_PATH\n      - ./build_examples/example_builds/*/build/bootloader/*.bin\n      - ./build_examples/example_builds/*/build/partition_table/*.bin\n      - ./build_examples/example_builds/*/build/*.bin\n      - ./build_examples/example_builds/*/build/*.elf\n      - ./build_examples/example_builds/*/build/*.map\n      - ./build_examples/example_builds/*/build/*.config\n    expire_in: 2 days\n  variables:\n    LOG_PATH: \"$CI_PROJECT_DIR/log_examples_make\"\n  only:\n    variables:\n      - $BOT_TRIGGER_WITH_LABEL == null\n      - $BOT_LABEL_BUILD\n      - $BOT_LABEL_EXAMPLE_TEST\n      - $BOT_LABEL_REGULAR_TEST\n  before_script: *do_nothing_before\n  script:\n    # it's not possible to build 100% out-of-tree and have the \"artifacts\"\n    # mechanism work, but this is the next best thing\n    - rm -rf build_examples\n    - mkdir build_examples\n    - cd build_examples\n    # build some of examples\n    - mkdir -p ${LOG_PATH}\n    - ${IDF_PATH}/tools/ci/build_examples.sh \"${CI_JOB_NAME}\"\n\n# same as above, but for CMake\n.build_examples_cmake_template: &build_examples_cmake_template\n  <<: *build_template\n  artifacts:\n    when: always\n    paths:\n      - $LOG_PATH\n      - ./build_examples_cmake/example_builds/*/build/bootloader/*.bin\n      - ./build_examples_cmake/example_builds/*/build/partition_table/*.bin\n      - ./build_examples_cmake/example_builds/*/build/*.bin\n      - ./build_examples_cmake/example_builds/*/build/*.elf\n      - ./build_examples_cmake/example_builds/*/build/*.map\n      - ./build_examples_cmake/example_builds/*/build/*.config\n      - ./build_examples_cmake/example_builds/*/build/flasher_args.json\n      - ./build_examples_cmake/example_builds/*/sdkconfig\n    expire_in: 2 days\n  variables:\n    LOG_PATH: \"$CI_PROJECT_DIR/log_examples_cmake\"\n  only:\n    variables:\n      - $BOT_TRIGGER_WITH_LABEL == null\n      - $BOT_LABEL_BUILD\n      - $BOT_LABEL_EXAMPLE_TEST\n      - $BOT_LABEL_REGULAR_TEST\n  before_script: *do_nothing_before\n  script:\n    # it's not possible to build 100% out-of-tree and have the \"artifacts\"\n    # mechanism work, but this is the next best thing\n    - rm -rf build_examples_cmake\n    - mkdir build_examples_cmake\n    - cd build_examples_cmake\n    # build some of examples\n    - mkdir -p ${LOG_PATH}\n    - ${IDF_PATH}/tools/ci/build_examples_cmake.sh \"${CI_JOB_NAME}\"\n\nbuild_examples_make_00:\n  <<: *build_examples_make_template\n\nbuild_examples_make_01:\n  <<: *build_examples_make_template\n\nbuild_examples_make_02:\n  <<: *build_examples_make_template\n\nbuild_examples_make_03:\n  <<: *build_examples_make_template\n\nbuild_examples_cmake_00:\n  <<: *build_examples_cmake_template\n\nbuild_examples_cmake_01:\n  <<: *build_examples_cmake_template\n\nbuild_examples_cmake_02:\n  <<: *build_examples_cmake_template\n\nbuild_examples_cmake_03:\n  <<: *build_examples_cmake_template\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.5107421875,
          "content": "[submodule \"components/json/cJSON\"]\n\tpath = components/json/cJSON\n\turl = ../../DaveGamble/cJSON.git\n\n[submodule \"components/mbedtls/mbedtls\"]\n\tpath = components/mbedtls/mbedtls\n\turl = ../../espressif/mbedtls.git\n\n[submodule \"components/lwip/lwip\"]\n\tpath = components/lwip/lwip\n\turl = ../../espressif/esp-lwip.git\n\n[submodule \"components/mqtt/esp-mqtt\"]\n\tpath = components/mqtt/esp-mqtt\n\turl = ../../espressif/esp-mqtt.git\n\n[submodule \"components/coap/libcoap\"]\n\tpath = components/coap/libcoap\n\turl = ../../obgm/libcoap.git\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.626953125,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: \"ubuntu-20.04\"\n  tools:\n    python: \"3.6\"\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats:\n  - htmlzip\n  - pdf\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n    - requirements: docs/setuptools.requirements.txt\n    - requirements: docs/requirements.txt\n\n# Specify the path for conf.py\nsphinx:\n  configuration: docs/en/conf.py\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.1591796875,
          "content": "cmake_minimum_required(VERSION 3.5)\nproject(esp-idf C CXX ASM)\n\nunset(compile_options)\nunset(c_compile_options)\nunset(cxx_compile_options)\nunset(compile_definitions)\n\n# Add the following build specifications here, since these seem to be dependent\n# on config values on the root Kconfig.\n\nif(CONFIG_COMPILER_OPTIMIZATION_LEVEL_RELEASE)\n    list(APPEND compile_options \"-Os\")\nelse()\n    list(APPEND compile_options \"-Og\")\nendif()\n\nif(CONFIG_COMPILER_CXX_EXCEPTIONS)\n    list(APPEND cxx_compile_options \"-fexceptions\")\nelse()\n    list(APPEND cxx_compile_options \"-fno-exceptions\")\nendif()\n\nif(CONFIG_COMPILER_DISABLE_GCC8_WARNINGS)\n    list(APPEND compile_options \"-Wno-parentheses\"\n                                \"-Wno-sizeof-pointer-memaccess\"\n                                \"-Wno-clobbered\")\n\n    # doesn't use GCC_NOT_5_2_0 because idf_set_global_variables was not called before\n    if(GCC_NOT_5_2_0)\n        list(APPEND compile_options \"-Wno-format-overflow\"\n                                    \"-Wno-stringop-truncation\"\n                                    \"-Wno-misleading-indentation\"\n                                    \"-Wno-cast-function-type\"\n                                    \"-Wno-implicit-fallthrough\"\n                                    \"-Wno-unused-const-variable\"\n                                    \"-Wno-switch-unreachable\"\n                                    \"-Wno-format-truncation\"\n                                    \"-Wno-memset-elt-size\"\n                                    \"-Wno-int-in-bool-context\")\n    endif()\nendif()\n\nif(CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE)\n    list(APPEND compile_definitions \"-DNDEBUG\")\nendif()\n\nif(CONFIG_COMPILER_STACK_CHECK_MODE_NORM)\n    list(APPEND compile_options \"-fstack-protector\")\nelseif(CONFIG_COMPILER_STACK_CHECK_MODE_STRONG)\n    list(APPEND compile_options \"-fstack-protector-strong\")\nelseif(CONFIG_COMPILER_STACK_CHECK_MODE_ALL)\n    list(APPEND compile_options \"-fstack-protector-all\")\nendif()\n\n\nidf_build_set_property(COMPILE_OPTIONS \"${compile_options}\" APPEND)\nidf_build_set_property(C_COMPILE_OPTIONS \"${c_compile_options}\" APPEND)\nidf_build_set_property(CXX_COMPILE_OPTIONS \"${cxx_compile_options}\" APPEND)\nidf_build_set_property(COMPILE_DEFINITIONS \"${compile_definitions}\" APPEND)\n\nidf_build_get_property(build_component_targets __BUILD_COMPONENT_TARGETS)\n\n# Add each component as a subdirectory, processing each component's CMakeLists.txt\nforeach(component_target ${build_component_targets})\n    __component_get_property(dir ${component_target} COMPONENT_DIR)\n    __component_get_property(_name ${component_target} COMPONENT_NAME)\n    __component_get_property(prefix ${component_target} __PREFIX)\n    __component_get_property(alias ${component_target} COMPONENT_ALIAS)\n    set(COMPONENT_NAME ${_name})\n    set(COMPONENT_DIR ${dir})\n    set(COMPONENT_ALIAS ${alias})\n    set(COMPONENT_PATH ${dir}) # for backward compatibility only, COMPONENT_DIR is preferred\n    idf_build_get_property(build_prefix __PREFIX)\n    set(__idf_component_context 1)\n    if(NOT prefix STREQUAL build_prefix)\n        add_subdirectory(${dir} ${prefix}_${_name})\n    else()\n        add_subdirectory(${dir} ${_name})\n    endif()\n    set(__idf_component_context 0)\nendforeach()"
        },
        {
          "name": "Kconfig",
          "type": "blob",
          "size": 7.9072265625,
          "content": "#\n# For a description of the syntax of this configuration file,\n# see kconfig/kconfig-language.txt.\n#\nmainmenu \"Espressif IoT Development Framework Configuration\"\n\n    # Hidden option to support checking for this specific target in C code and Kconfig files\n    config IDF_TARGET_ESP8266\n        bool\n        default \"y\" if IDF_TARGET=\"esp8266\"\n        default \"n\"\n\n    config IDF_CMAKE\n        bool\n        option env=\"IDF_CMAKE\"\n\n\n    config IDF_TARGET_ENV\n        # A proxy to get environment variable $IDF_TARGET\n        string\n        option env=\"IDF_TARGET\"\n\n    config IDF_TARGET\n        # This option records the IDF target when sdkconfig is generated the first time.\n        # It is not updated if environment variable $IDF_TARGET changes later, and\n        # the build system is responsible for detecting the mismatch between\n        # CONFIG_IDF_TARGET and $IDF_TARGET.\n        string\n        default \"IDF_TARGET_NOT_SET\" if IDF_TARGET_ENV=\"\"\n        default IDF_TARGET_ENV\n\n\n    menu \"SDK tool configuration\"\n        config SDK_TOOLPREFIX\n            string \"Compiler toolchain path/prefix\"\n            default \"xtensa-lx106-elf-\"\n            help\n                The prefix/path that is used to call the toolchain. The default setting assumes\n                a crosstool-ng gcc setup that is in your PATH.\n\n        config SDK_PYTHON\n            string \"Python 2 interpreter\"\n            depends on !IDF_CMAKE\n            default \"python\"\n            help\n                The executable name/path that is used to run python. On some systems Python 2.x\n                may need to be invoked as python2.\n\n                (Note: This option is used with the legacy GNU Make build system only.)\n\n        config SDK_MAKE_WARN_UNDEFINED_VARIABLES\n            bool \"'make' warns on undefined variables\"\n            depends on !IDF_CMAKE\n            default \"n\"\n            help\n                Adds --warn-undefined-variables to MAKEFLAGS. This causes make to\n                print a warning any time an undefined variable is referenced.\n\n                This option helps find places where a variable reference is misspelled\n                or otherwise missing, but it can be unwanted if you have Makefiles which\n                depend on undefined variables expanding to an empty string.\n\n                (Note: this option is used with the legacy GNU Make build system only.)\n\n    endmenu  # SDK tool configuration\n\n    source \"$COMPONENT_KCONFIGS_PROJBUILD\"\n\n    menu \"Compiler options\"\n\n        choice COMPILER_OPTIMIZATION\n            prompt \"Optimization Level\"\n            default COMPILER_OPTIMIZATION_LEVEL_DEBUG\n            help\n                This option sets compiler optimization level (gcc -O argument).\n\n                - for \"Release\" setting, -Os flag is added to CFLAGS.\n                - for \"Debug\" setting, -Og flag is added to CFLAGS.\n\n                \"Release\" with -Os produces smaller & faster compiled code but it\n                may be harder to correlated code addresses to source files when debugging.\n\n                To add custom optimization settings, set CFLAGS and/or CPPFLAGS\n                in project makefile, before including $(IDF_PATH)/make/project.mk. Note that\n                custom optimization levels may be unsupported.\n\n            config COMPILER_OPTIMIZATION_LEVEL_DEBUG\n                bool \"Debug (-Og)\"\n            config COMPILER_OPTIMIZATION_LEVEL_RELEASE\n                bool \"Release (-Os)\"\n        endchoice\n\n        choice COMPILER_OPTIMIZATION_ASSERTION_LEVEL\n            prompt \"Assertion level\"\n            default COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE\n            help\n                Assertions can be:\n\n                - Enabled. Failure will print verbose assertion details. This is the default.\n\n                - Set to \"silent\" to save code size (failed assertions will abort() but user\n                  needs to use the aborting address to find the line number with the failed assertion.)\n\n                - Disabled entirely (not recommended for most configurations.) -DNDEBUG is added\n                  to CPPFLAGS in this case.\n\n            config COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE\n                prompt \"Enabled\"\n                bool\n                help\n                    Enable assertions. Assertion content and line number will be printed on failure.\n\n            config COMPILER_OPTIMIZATION_ASSERTIONS_SILENT\n                prompt \"Silent (saves code size)\"\n                bool\n                help\n                    Enable silent assertions. Failed assertions will abort(), user needs to\n                    use the aborting address to find the line number with the failed assertion.\n\n            config COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE\n                prompt \"Disabled (sets -DNDEBUG)\"\n                bool\n                help\n                    If assertions are disabled, -DNDEBUG is added to CPPFLAGS.\n\n        endchoice # assertions\n\n        menuconfig COMPILER_CXX_EXCEPTIONS\n            bool \"Enable C++ exceptions\"\n            default n\n            help\n                Enabling this option compiles all IDF C++ files with exception support enabled.\n\n                Disabling this option disables C++ exception support in all compiled files, and any libstdc++ code\n                which throws an exception will abort instead.\n\n                Enabling this option currently adds an additional ~500 bytes of heap overhead\n                when an exception is thrown in user code for the first time.\n\n        choice COMPILER_STACK_CHECK_MODE\n            prompt \"Stack smashing protection mode\"\n            default COMPILER_STACK_CHECK_MODE_NONE\n            help\n                Stack smashing protection mode. Emit extra code to check for buffer overflows, such as stack\n                smashing attacks. This is done by adding a guard variable to functions with vulnerable objects.\n                The guards are initialized when a function is entered and then checked when the function exits.\n                If a guard check fails, program is halted. Protection has the following modes:\n\n                - In NORMAL mode (GCC flag: -fstack-protector) only functions that call alloca, and functions with\n                  buffers larger than 8 bytes are protected.\n\n                - STRONG mode (GCC flag: -fstack-protector-strong) is like NORMAL, but includes additional functions\n                  to be protected -- those that have local array definitions, or have references to local frame\n                  addresses.\n\n                - In OVERALL mode (GCC flag: -fstack-protector-all) all functions are protected.\n\n                Modes have the following impact on code performance and coverage:\n\n                - performance: NORMAL > STRONG > OVERALL\n\n                - coverage: NORMAL < STRONG < OVERALL\n\n\n            config COMPILER_STACK_CHECK_MODE_NONE\n                bool \"None\"\n            config COMPILER_STACK_CHECK_MODE_NORM\n                bool \"Normal\"\n            config COMPILER_STACK_CHECK_MODE_STRONG\n                bool \"Strong\"\n            config COMPILER_STACK_CHECK_MODE_ALL\n                bool \"Overall\"\n        endchoice\n\n        config COMPILER_STACK_CHECK\n            bool\n            default !COMPILER_STACK_CHECK_MODE_NONE\n            help\n                Stack smashing protection.\n\n        config COMPILER_WARN_WRITE_STRINGS\n            bool \"Enable -Wwrite-strings warning flag\"\n            default \"n\"\n            help\n                Adds -Wwrite-strings flag for the C/C++ compilers.\n\n                For C, this gives string constants the type ``const char[]`` so that\n                copying the address of one into a non-const ``char *`` pointer\n                produces a warning. This warning helps to find at compile time code\n                that tries to write into a string constant.\n\n                For C++, this warns about the deprecated conversion from string\n                literals to ``char *``.\n\n\n    endmenu # Compiler Options\n\n    menu \"Component config\"\n        source \"$COMPONENT_KCONFIGS\"\n    endmenu\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.2890625,
          "content": "# ESP8266 RTOS Software Development Kit\n\n[![Documentation Status](https://readthedocs.com/projects/espressif-esp8266-rtos-sdk/badge/?version=latest)](https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/?badge=latest)\n\n\n# ** IMPORTANT NOTICE **\n\n## About this repository\nA new branching model is applied to this repository, which consists of a master branch and release branches.\n\n### 1. Master branch\nThe master branch is an integration branch where bug fixes/features are gathered for compiling and functional testing.\n\n### 2. Release branch\nThe release branch is where releases are maintained and hot fixes (with names like *release/v2.x.x*) are added.\nPlease ensure that all your production-related work are tracked with the release branches.\n\nWith this new model, we can push out bug fixes more quickly and achieve simpler maintenance.\n\n## Roadmap\n*ESP8266_RTOS_SDK*'s framework is quite outdated and different from the current *[esp-idf](https://github.com/espressif/esp-idf)* and we are planning to migrate *ESP8266_RTOS_SDK* to *esp-idf* eventually after *v2.0.0*.\n\nHowever, we will firstly provide a new version of ESP8266 SDK (*ESP8266_RTOS_SDK v3.0*), which shares the same framework with *esp-idf* (esp-idf style), as a work-around, because the multi-CPU architecture is not supported by *esp-idf* for the time being.\n\nActions to be taken for *ESP8266_RTOS_SDK v3.0* include the following items:\n\n1. Modify the framework to esp-idf style\n2. Restructure some core libraries including Wi-Fi libraries and libmain\n3. Update some third-party libraries including FreeRTOS, lwIP, mbedTLS, noPoll, libcoap, SPIFFS, cJSON, wolfSSL, etc.\n4. Update some drivers\n5. Others\n\n---\n\n# Developing With the ESP8266_RTOS_SDK\n\n## Get toolchain\n\nv8.4.0\n\n* [Windows](https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-win32.zip)\n* [Mac](https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-macos.tar.gz)\n* [Linux(64)](https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz)\n* [Linux(32)](https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-i686.tar.gz)\n\nIf you are still using old version SDK(< 3.0), please use toolchain v4.8.5, as following:\n\n* [Windows](https://dl.espressif.com/dl/xtensa-lx106-elf-win32-1.22.0-88-gde0bdc1-4.8.5.tar.gz)\n* [Mac](https://dl.espressif.com/dl/xtensa-lx106-elf-osx-1.22.0-88-gde0bdc1-4.8.5.tar.gz)\n* [Linux(64)](https://dl.espressif.com/dl/xtensa-lx106-elf-linux64-1.22.0-88-gde0bdc1-4.8.5.tar.gz)\n* [Linux(32)](https://dl.espressif.com/dl/xtensa-lx106-elf-linux32-1.22.0-88-gde0bdc1-4.8.5.tar.gz)\n\n## Get ESP8266_RTOS_SDK\n\nBesides the toolchain (that contains programs to compile and build the application), you also need ESP8266 specific API / libraries. They are provided by Espressif in [ESP8266_RTOS_SDK](https://github.com/espressif/ESP8266_RTOS_SDK) repository. To get it, open terminal, navigate to the directory you want to put ESP8266_RTOS_SDK, and clone it using `git clone` command:\n\n```\ncd ~/esp\ngit clone https://github.com/espressif/ESP8266_RTOS_SDK.git\n```\n\nESP8266_RTOS_SDK will be downloaded into `~/esp/ESP8266_RTOS_SDK`.\n\n## Setup Path to ESP8266_RTOS_SDK\n\nThe toolchain programs access ESP8266_RTOS_SDK using `IDF_PATH` environment variable. This variable should be set up on your PC, otherwise projects will not build. Setting may be done manually, each time PC is restarted. Another option is to set up it permanently by defining `IDF_PATH` in user profile.\n\nFor manually, the command:\n```\nexport IDF_PATH=~/esp/ESP8266_RTOS_SDK\n```\n\n## Start a Project\nNow you are ready to prepare your application for ESP8266. To start off quickly, we can use `examples/get-started/hello_world` project from `examples` directory in SDK.\n\nOnce you've found the project you want to work with, change to its directory and you can configure and build it.\n\n## Connect\n\nYou are almost there. To be able to proceed further, connect ESP8266 board to PC, check under what serial port the board is visible and verify if serial communication works. Note the port number, as it will be required in the next step.\n\n## Configuring the Project\n\nBeing in terminal window, go to directory of `hello_world` application by typing `cd ~/esp/ESP8266_RTOS_SDK/examples/get-started/hello_world`. Then start project configuration utility `menuconfig`:\n\n```\ncd ~/esp/ESP8266_RTOS_SDK/examples/get-started/hello_world\nmake menuconfig\n```\n\nIn the menu, navigate to `Serial flasher config` > `Default serial port` to configure the serial port, where project will be loaded to. Confirm selection by pressing enter, save configuration by selecting `< Save >` and then exit application by selecting `< Exit >`.\n\n> Note:\n\tOn Windows, serial ports have names like COM1. On MacOS, they start with `/dev/cu.`. On Linux, they start with `/dev/tty`.\n\nHere are couple of tips on navigation and use of `menuconfig`:\n\n* Use up & down arrow keys to navigate the menu.\n* Use Enter key to go into a submenu, Escape key to go out or to exit.\n* Type `?` to see a help screen. Enter key exits the help screen.\n* Use Space key, or `Y` and `N` keys to enable (Yes) and disable (No) configuration items with checkboxes \"`[*]`\"\n* Pressing `?` while highlighting a configuration item displays help about that item.\n* Type `/` to search the configuration items.\n\nOnce done configuring, press Escape multiple times to exit and say \"Yes\" to save the new configuration when prompted.\n\n## Compiling the Project\n\n`make all`\n\n... will compile app based on the config.\n\n## Flashing the Project\n\nWhen `make all` finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this from make by running:\n\n`make flash`\n\nThis will flash the entire project (app, bootloader and init data bin) to a new chip. The settings for serial port flashing can be configured with `make menuconfig`.\n\nYou don't need to run `make all` before running `make flash`, `make flash` will automatically rebuild anything which needs it.\n\n## Viewing Serial Output\n\nThe `make monitor` target uses the [idf_monitor tool](https://esp-idf.readthedocs.io/en/latest/get-started/idf-monitor.html) to display serial output from the ESP32. idf_monitor also has a range of features to decode crash output and interact with the device. [Check the documentation page for details](https://esp-idf.readthedocs.io/en/latest/get-started/idf-monitor.html).\n\nExit the monitor by typing Ctrl-].\n\nTo flash and monitor output in one pass, you can run:\n\n`make flash monitor`\n\n## Compiling & Flashing Just the App\n\nAfter the initial flash, you may just want to build and flash just your app, not the bootloader and init data bin:\n\n* `make app` - build just the app.\n* `make app-flash` - flash just the app.\n\n`make app-flash` will automatically rebuild the app if it needs it.\n\n(In normal development there's no downside to reflashing the bootloader and init data bin each time, if they haven't changed.)\n\n> Note:\n> Recommend to use these 2 commands if you have flashed bootloader and init data bin.\n\n## Parallel Builds\n\nESP8266_RTOS_SDK supports compiling multiple files in parallel, so all of the above commands can be run as `make -jN` where `N` is the number of parallel make processes to run (generally N should be equal to or one more than the number of CPU cores in your system.)\n\nMultiple make functions can be combined into one. For example: to build the app & bootloader using 5 jobs in parallel, then flash everything, and then display serial output from the ESP32 run:\n\n```\nmake -j5 app-flash monitor\n```\n\n## Erasing Flash\n\nThe `make flash` target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state. To erase the entire flash, run `make erase_flash`.\n\nThis can be combined with other targets, ie `make erase_flash flash` will erase everything and then re-flash the new app, bootloader and init data bin.\n\n## Updating ESP8266_RTOS_SDK\n\nAfter some time of using ESP8266_RTOS_SDK-IDF, you may want to update it to take advantage of new features or bug fixes. The simplest way to do so is by deleting existing `ESP8266_RTOS_SDK` folder and cloning it again.\n\nAnother solution is to update only what has changed. This method is useful if you have a slow connection to GitHub. To do the update run the following commands::\n\n```\ncd ~/esp/ESP8266_RTOS_SDK\ngit pull\n```\n\nThe ``git pull`` command is fetching and merging changes from ESP8266_RTOS_SDK repository on GitHub.\n"
        },
        {
          "name": "SUPPORT_POLICY_CN.md",
          "type": "blob",
          "size": 2.6552734375,
          "content": "有关 ESP8266 RTOS SDK 的最新支持政策，详见 [支持期限政策](./SUPPORT_POLICY_CN.md)。\n支持期限政策\n=================\n\n* [English Version](./SUPPORT_POLICY_EN.md)\n\nESP8266 RTOS SDK 的每个主要版本和次要版本（如 V3.0、V3.1 等）自其首次稳定版本发布之日起将维护 18 个月。\n\n维护意味着 ESP8266 RTOS SDK 团队将会对 GitHub 上的发布分支继续进行 bug 修复、安全修补等，并根据需求定期发布新的 bugfix 版本。\n\n在某一版本支持期限结束，停止更新维护 (EOL) 前，建议用户升级到较新的 ESP8266 RTOS SDK 版本。根据《支持期限政策》，我们将停止对 EOL 版本进行 bug 修复。\n\n《支持期限政策》不适用于预发布版本（包括 beta、preview、`-rc` 和 `-dev` 版本等）。有时，在发布的版本中存在被标记为 \"Preview\" 的特定功能，则该功能也不在支持期限内。\n\n长期支持版本\n------------\n\n有些发布版本（例如 ESP8266 RTOS SDK V3.1）属于长期支持 (LTS) 版本。LTS 版本将自其首次稳定版本发布之日起维护 30 个月（2.5 年）。\n\n关于长期维护版本，在 github 上面正式的`第１次`发布该版本 release 的时候，会在标题上额外标注 `(LTS)`，例如：\n\n```\nESP8266 RTOS SDK Release v3.4 (LTS)\n```\n\n后续的维护版本不会再额外标注 `(LTS)`，例如：\n\n```\nESP8266 RTOS SDK Release v3.4.1\n```\n\n示例\n-----\n\nESP8266 RTOS SDK V3.1 于 2019 年 01 月发布，属于 LTS 版本，自正式发布日开始将维护 30 个月至 2021 年 07 月停止。\n\n- V3.1 的首个发布版本为 2019 年 01 月发布的 `v3.1`。\n- ESP8266 RTOS SDK 团队将持续进行 bug 修复、安全修补等更新，并 backport 至分支 `release/v3.1`。\n- 定期从 release 分支创建稳定的 bugfix 版本，比如，`v3.1.1`、`v3.1.2` 等，并建议用户保持使用最新的 bugfix 版本。\n- V3.1 的 bugfix 版本发布将持续 30 个月至 2021 年 07 月，届时所有 V3.1.x 将停止更新维护。\n\n现有版本\n--------\n\nESP8266 RTOS SDK V3.3 及所有后续更新版本都将遵守该《支持期限政策》。每一版本发布时将同时公布其支持期限。\n\n对于该政策公布之日前发布的其他版本，应适用下述支持期限：\n\n- ESP8266 RTOS SDK V3.3.x 将维护至 2021 年 12 月。\n- ESP8266 RTOS SDK V3.2.x 将维护至 2020 年 12 月。\n- ESP8266 RTOS SDK V3.1.x 作为长期维护版本，将维护至 2021 年 7 月。\n- ESP8266 RTOS SDK V3.0.x 将维护至 2020 年 10 月。\n- ESP8266 RTOS SDK V2.1.x 作为长期维护版本，将维护至 2021 年 4 月。\n- ESP8266 RTOS SDK V2.0.x 及之前的版本均已停止更新维护 (EOL)。"
        },
        {
          "name": "SUPPORT_POLICY_EN.md",
          "type": "blob",
          "size": 2.7724609375,
          "content": "The latest support policy for ESP8266 RTOS SDK can be found at [Support Policy](./SUPPORT_POLICY_EN.md).\n\nSupport Period Policy\n=================\n\n* [中文版](./SUPPORT_POLICY_CN.md)\n\nEach ESP8266 RTOS SDK major and minor release (V3.0, V3.1, etc) is supported for 18 months after the initial stable release date.\n\nSupported means that the ESP8266 RTOS SDK team will continue to apply bug fixes, security fixes, etc to the release branch on GitHub, and periodically make new bugfix releases as needed.\n\nUsers are encouraged to upgrade to a newer ESP8266 RTOS SDK release before the support period finishes and the release becomes End of Life (EOL). It is our policy to not continue fixing bugs in End of Life releases.\n\nPre-release versions (betas, previews, -rc and -dev versions, etc) are not covered by any support period. Sometimes a particular feature is marked as \"Preview\" in a release, which means it is also not covered by the support period.\n\n\nLong Term Support releases\n------------\n\nSome releases (for example, ESP8266 RTOS SDK V3.1) are designated Long Term Support (LTS). LTS releases are supported for 30 months (2.5 years) after the initial stable release date.\n\nWe will add a `(LTS)` tag when we release a long term support version on GitHub at the first time. For example:\n\n```\nESP8266 RTOS SDK Release v3.4 (LTS)\n```\n\nBut we will not add `(LTS)` tag to the following bug fix versions. For example:\n\n```\nESP8266 RTOS SDK Release v3.4.1\n```\n\nExample\n-----\n\nESP8266 RTOS SDK V3.1 was released in January 2019 and is a Long Term Support (LTS) release, meaning it will be supported for 30 months until July 2021.\n\n- The first V3.1 release was `v3.1` in January 2019.\n- The ESP8266 RTOS SDK team continues to backport bug fixes, security fixes, etc to the release branch `release/v3.1`。\n- Periodically stable bugfix releases are created from the release branch. For example `v3.1.1`、`v3.1.2`, etc. Users are encouraged to always update to the latest bugfix release.\n- V3.1 bugfix releases continue until July 2021, when all V3.1.x releases become End of Life.\n\nExisting Releases\n--------\n\nESP8266 RTOS SDK V3.3 and all newer releases will follow this support period policy. The support period for each release will be announced when the release is made.\n\nFor releases made before the support period policy was announced, the following support periods apply:\n\n- ESP8266 RTOS SDK V3.2.x will be supported until December 2021.\n- ESP8266 RTOS SDK V3.2.x will be supported until December 2020.\n- ESP8266 RTOS SDK V3.1.x is Long Term Support (LTS) release, will be supported until July 2021.\n- ESP8266 RTOS SDK V3.0.x will be supported until October 2020.\n- ESP8266 RTOS SDK V2.1.x is Long Term Support (LTS) release, will be supported until April 2021.\n- ESP8266 RTOS SDK V2.0.x and earlier versions are already End of Life.\n"
        },
        {
          "name": "add_path.sh",
          "type": "blob",
          "size": 0.625,
          "content": "# This shell snippet appends useful esp-idf tools to your PATH environment\n# variable. This means you can run esp-idf tools without needing to give the\n# full path.\n#\n# Use this script like this:\n#\n# . ${IDF_PATH}/add_path.sh\n#\nif [ -z ${IDF_PATH} ]; then\n\techo \"IDF_PATH must be set before including this script.\"\nelse\n\tIDF_ADD_PATHS_EXTRAS=\"${IDF_PATH}/components/esptool_py/esptool\"\n\tIDF_ADD_PATHS_EXTRAS=\"${IDF_ADD_PATHS_EXTRAS}:${IDF_PATH}/components/partition_table/\"\n\tIDF_ADD_PATHS_EXTRAS=\"${IDF_ADD_PATHS_EXTRAS}:${IDF_PATH}/tools/\"\n\texport PATH=\"${IDF_ADD_PATHS_EXTRAS}:${PATH}\"\n\techo \"Added to PATH: ${IDF_ADD_PATHS_EXTRAS}\"\nfi\n\n\n"
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "export.sh",
          "type": "blob",
          "size": 2.919921875,
          "content": "# This script should be sourced, not executed.\n\nfunction realpath_int() {\n    wdir=\"$PWD\"; [ \"$PWD\" = \"/\" ] && wdir=\"\"\n    arg=$1\n    case \"$arg\" in\n        /*) scriptdir=\"${arg}\";;\n        *) scriptdir=\"$wdir/${arg#./}\";;\n    esac\n    scriptdir=\"${scriptdir%/*}\"\n    echo \"$scriptdir\"\n}\n\n\nfunction idf_export_main() {\n    # The file doesn't have executable permissions, so this shouldn't really happen.\n    # Doing this in case someone tries to chmod +x it and execute...\n    if [[ -n \"${BASH_SOURCE}\" && ( \"${BASH_SOURCE[0]}\" == \"${0}\" ) ]]; then\n        echo \"This script should be sourced, not executed:\"\n        echo \". ${BASH_SOURCE[0]}\"\n        return 1\n    fi\n\n    if [[ -z \"${IDF_PATH}\" ]]\n    then\n        # If using bash, try to guess IDF_PATH from script location\n        if [[ -n \"${BASH_SOURCE}\" ]]\n        then\n            if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n                script_dir=\"$(realpath_int $BASH_SOURCE)\"\n            else\n                script_name=\"$(readlink -f $BASH_SOURCE)\"\n                script_dir=\"$(dirname $script_name)\"\n            fi\n            export IDF_PATH=\"${script_dir}\"\n        else\n            echo \"IDF_PATH must be set before sourcing this script\"\n            return 1\n        fi\n    fi\n\n    old_path=$PATH\n\n    echo \"Adding ESP-IDF tools to PATH...\"\n    # Call idf_tools.py to export tool paths\n    export IDF_TOOLS_EXPORT_CMD=${IDF_PATH}/export.sh\n    export IDF_TOOLS_INSTALL_CMD=${IDF_PATH}/install.sh\n    idf_exports=$(${IDF_PATH}/tools/idf_tools.py export) || return 1\n    eval \"${idf_exports}\"\n\n    echo \"Checking if Python packages are up to date...\"\n    python ${IDF_PATH}/tools/check_python_dependencies.py || return 1\n\n\n    # Allow calling some IDF python tools without specifying the full path\n    # ${IDF_PATH}/tools is already added by 'idf_tools.py export'\n    IDF_ADD_PATHS_EXTRAS=\"${IDF_PATH}/components/esptool_py/esptool\"\n    IDF_ADD_PATHS_EXTRAS=\"${IDF_ADD_PATHS_EXTRAS}:${IDF_PATH}/components/partition_table/\"\n    export PATH=\"${IDF_ADD_PATHS_EXTRAS}:${PATH}\"\n\n    if [[ -n \"$BASH\" ]]\n    then\n        path_prefix=${PATH%%${old_path}}\n        paths=\"${path_prefix//:/ }\"\n        if [ -n \"${paths}\" ]; then\n            echo \"Added the following directories to PATH:\"\n        else\n            echo \"All paths are already set.\"\n        fi\n        for path_entry in ${paths}\n        do\n            echo \"  ${path_entry}\"\n        done\n    else\n        echo \"Updated PATH variable:\"\n        echo \"  ${PATH}\"\n    fi\n\n    # Clean up\n    unset old_path\n    unset paths\n    unset path_prefix\n    unset path_entry\n    unset IDF_ADD_PATHS_EXTRAS\n    unset idf_exports\n\n    # Not unsetting IDF_PYTHON_ENV_PATH, it can be used by IDF build system\n    # to check whether we are using a private Python environment\n\n    echo \"Done! You can now compile ESP8266-RTOS-SDK projects.\"\n    echo \"Go to the project directory and run:\"\n    echo \"\"\n    echo \"  make\"\n    echo \"\"\n}\n\nidf_export_main\n\nunset realpath_int\nunset idf_export_main\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.3486328125,
          "content": "#!/usr/bin/env bash\n\nset -e\nset -u\n\nexport IDF_PATH=$(cd $(dirname $0); pwd)\n\necho \"Installing ESP-IDF tools\"\n${IDF_PATH}/tools/idf_tools.py install\n\necho \"Installing Python environment and packages\"\n${IDF_PATH}/tools/idf_tools.py install-python-env\n\nbasedir=\"$(dirname $0)\"\necho \"All done! You can now run:\"\necho \"\"\necho \"  . ${basedir}/export.sh\"\necho \"\"\n"
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.455078125,
          "content": "# This is a list of python packages needed for ESP-IDF. This file is used with pip.\n# Please see the Get Started section of the ESP-IDF Programming Guide for further information.\n#\nsetuptools\n# The setuptools package is required to install source distributions and on some systems is not installed by default.\n# Please keep it as the first item of this list.\n#\nclick>=5.0\npyserial>=3.0\nfuture>=0.15.2\ncryptography>=2.1.4,<35\npyparsing>=2.0.3,<2.4.0\npyelftools>=0.22\n"
        },
        {
          "name": "sdkconfig.rename",
          "type": "blob",
          "size": 1.537109375,
          "content": "# sdkconfig replacement configurations for deprecated options formatted as\n# CONFIG_DEPRECATED_OPTION CONFIG_NEW_OPTION\n\n# SDK tool configuration\nCONFIG_TARGET_PLATFORM                 CONFIG_IDF_TARGET\nCONFIG_TOOLPREFIX                      CONFIG_SDK_TOOLPREFIX\nCONFIG_MAKE_WARN_UNDEFINED_VARIABLES   CONFIG_SDK_MAKE_WARN_UNDEFINED_VARIABLES\n\n# Compiler options\nCONFIG_OPTIMIZATION_COMPILER              CONFIG_COMPILER_OPTIMIZATION\nCONFIG_OPTIMIZATION_LEVEL_DEBUG           CONFIG_COMPILER_OPTIMIZATION_LEVEL_DEBUG\nCONFIG_OPTIMIZATION_LEVEL_RELEASE         CONFIG_COMPILER_OPTIMIZATION_LEVEL_RELEASE\nCONFIG_OPTIMIZATION_ASSERTION_LEVEL       CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL\nCONFIG_OPTIMIZATION_ASSERTIONS_ENABLED    CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE\nCONFIG_OPTIMIZATION_ASSERTIONS_SILENT     CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_SILENT\nCONFIG_OPTIMIZATION_ASSERTIONS_DISABLED   CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE\nCONFIG_CXX_EXCEPTIONS                     CONFIG_COMPILER_CXX_EXCEPTIONS\nCONFIG_STACK_CHECK_MODE                   CONFIG_COMPILER_STACK_CHECK_MODE\nCONFIG_STACK_CHECK_NONE                   CONFIG_COMPILER_STACK_CHECK_MODE_NONE\nCONFIG_STACK_CHECK_NORM                   CONFIG_COMPILER_STACK_CHECK_MODE_NORM\nCONFIG_STACK_CHECK_STRONG                 CONFIG_COMPILER_STACK_CHECK_MODE_STRONG\nCONFIG_STACK_CHECK_ALL                    CONFIG_COMPILER_STACK_CHECK_MODE_ALL\nCONFIG_STACK_CHECK                        CONFIG_COMPILER_STACK_CHECK\nCONFIG_WARN_WRITE_STRINGS                 CONFIG_COMPILER_WARN_WRITE_STRINGS\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}