{
  "metadata": {
    "timestamp": 1736709766005,
    "page": 203,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fragglet/c-algorithms",
      "stars": 3387,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.322265625,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 8\nUseTab: ForIndentation\nBreakBeforeBraces: Linux\nAllowShortIfStatementsOnASingleLine: false\nIndentCaseLabels: false\n# InsertBraces: true\nSpaceAfterCStyleCast: true\nBinPackParameters: true\nAlignOperands: AlignAfterOperator\nAllowShortFunctionsOnASingleLine: None\nAllowShortEnumsOnASingleLine: false\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.6962890625,
          "content": "# git config blame.ignoreRevsFile .git-blame-ignore-revs\n3111c5621f613c5df464fb8db6123ae4ab598612\n55890adce331972d55adcac0c9bb1098b66fb072\n563b9c0fbaaaaefc141bc44f855e7d1de72ff86b\nf6d88ee092740c604351dd54019deff3ab719c04\n56bdb4a037496f144afc21a55c61b4b74b1afa07\nd630a2748e08213131728f4eeb299d91266abf7a\n80f8fbce32226b78edcf0e7352537c5ffdf86df7\n64b3fc06b86fa75e1bdb20374584751d9cd6e133\n9a6b232993f05c3ac944da56c128f125c699be09\n5c550ef041afad147c00def7cdea38ecdf489ad8\n09c5c98b7cfdbff5baa35db31bb236e94ee400a6\n1cf6f0dfbee254a2baf9d2e1127f31c17a29a95e\n6af8fcf91f5487395a6d9ae23d207d6f5c3884ee\n4f913450428535f9cbae06a85dcf082609d8c697\n140ef61b1bcc0d647701fe4b1058da1a7139ca1a\n984de76f3fb989aa9b49a260022d88d77042d36e\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1923828125,
          "content": ".deps\n.libs\nINSTALL\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache\nautotools\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfigure\nlibtool\nm4\nstamp-h1\n*.a\n*.gcda\n*.gcno\n*.gcov\n*.la\n*.lo\n*.o\n*.pc\n"
        },
        {
          "name": ".lvimrc",
          "type": "blob",
          "size": 0.1376953125,
          "content": "\" Local vimrc configuration file.  Install the localvimrc.vim vim script.\nsetlocal tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab cindent\n\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0458984375,
          "content": "Simon Howard <fraggle@removethisbit.gmail.com>\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.412109375,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leader(s) responsible for enforcement; contact\nSimon Howard, whose contact details are listed in the AUTHORS files.\n\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "COPYING.md",
          "type": "blob",
          "size": 1.01953125,
          "content": "The C Algorithms library is made available under the\n[ISC license](https://en.wikipedia.org/wiki/ISC_license), a permissive\nlicense that is functionally identical to the\n[simplified BSD](https://en.wikipedia.org/wiki/BSD_licenses#2-clause)\nor [MIT licenses](https://en.wikipedia.org/wiki/MIT_License).\n\n---\n\nCopyright (c) 2005-2008, Simon Howard\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted, provided\nthat the above copyright notice and this permission notice appear\nin all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.408203125,
          "content": "\nAUX_DIST_GEN = $(ac_aux_dir)\n\nDOC_FILES=            \\\n        COPYING.md    \\\n        NEWS.md       \\\n        README.md     \\\n        STYLE.md\n\nEXTRA_DIST = $(AUX_DIST_GEN) libcalg-1.0.pc.in $(DOC_FILES) .clang-format\nMAINTAINERCLEANFILES = $(AUX_DIST_GEN)\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libcalg-1.0.pc\n\n$(pkgconfig_DATA) : config.status\n\nSUBDIRS=src test doc\n\nformat:\n\tclang-format -i */*.[ch]\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 1.5576171875,
          "content": "\n## v1.2.0   (14th September 2008)\n\n * The license has been changed to the ISC license.\n * Support for compiling with gcc coverage options and running tests in\n   valgrind.\n * All headers now have extern \"C\" definitions for use in C++ programs.\n * Trie free function uses a non-recursive algorithm to avoid the possibility\n   of stack overflow.\n\nTest suite:\n * Framework added for testing memory allocation/free.\n * Tests have been fixed to properly free any memory allocated during\n   execution of the test.\n * Tests have been expanded to increase the code coverage.\n * A test case has been added for testing use of the program in C++\n   programs.\n\nBugs fixed:\n * Memory leak in hash table.\n * Bugs with the AVL tree.\n * Trie responds to out of memory scenarios correctly.\n\n## v1.1.0   (1st June 2008)\n\n * Added data structures:\n   - Binary Heap\n   - Binomial Heap\n   - Bloom Filter\n * Iterator functions changed to a model based around an iterator structure\n   rather than callback functions.\n * Void pointers used for keys/values replaced by typedefs to void pointers.\n   This allows the type to be changed to something else if desired.\n * Hash table sizes changed to use a set of recommended prime numbers that are\n   mathematically good for use in hash tables:\n     http://planetmath.org/encyclopedia/GoodHashTablePrimes.html\n * Tests added for some code that was not covered by the test suite.\n * Failed malloc() calls are now checked for.\n * Bugs fixed:\n   - Lockup with set_remove function.\n   - set_to_array did not include all values.\n\n## v1.0.0   (30th January 2006)\n\nFirst release.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.759765625,
          "content": "## C Algorithms\n\nThe C programming language includes a very limited standard library in\ncomparison to other modern programming languages. This is a collection of\ncommon computer science data structures and algorithms which may be used in C\nprojects.\n\nThe project is structured in a modular way, such that it is possible to\ntrivially copy any module (pair of `.c` and `.h` files) into a project without\ndealing with the usual hassle of library dependencies. However, the project\ndoes also build as a library named `libcalg` if that's what you want.\n\nThe code is licensed under the [ISC license](COPYING.md), a permissive license\nthat is functionally identical to the MIT or BSD licenses. As such, it may\nlegitimately be reused in any project, whether proprietary or open source.\n"
        },
        {
          "name": "STYLE.md",
          "type": "blob",
          "size": 2.7646484375,
          "content": "\nThe following are coding style guidelines for this project.\n\nTo automatically format all source code, install\n[clang-format](https://clang.llvm.org/docs/ClangFormat.html) and\nrun `make format`.\n\n## Standard compliance\n\nCode is expected to be ANSI C compatible (C89). This means:\n\n* All variables must be declared at the beginning of a block.\n* Use `/* ... */` comments, not `// ...` comments.\n* There is no bool type (as added in C99); `int` is used for boolean values.\n* Other features added by later standards may not be used, such as inline\n  functions, variable-length arrays or `long long`.\n\n## Blocks\n\nThe indentation rules are a variant on the K&R style.\nTabs are used for indentation, spaces for alignment, eg.\n```c\nfor (...) {\n------>|function_call(..., ...,\n------>|              .....);\n}\n```\nBraces belong on the end of lines, eg.\n```c\nwhile (...) {\n\tif (...) {\n\t\t...\n\t} else {\n\t\t...\n\t}\n}\n```\nThe one exception is functions, where the brace goes on the next line:\n```c\nvoid foo(...)\n{\n\t...\n}\n```\n\n## Naming\n\nTypes are named with [camel case](https://en.wikipedia.org/wiki/Camel_case),\neg. `HashTable`.\nAll others (functions, variables, struct fields, etc.) are named with [snake\ncase](https://en.wikipedia.org/wiki/Snake_case), eg. `hash_table_new`.\n\n## Testing\n\nNo code will be accepted without unit tests. See the [test](test/) directory\nfor what these should look like. Run `make check` to invoke the unit tests.\n\nTests should [cover](https://en.wikipedia.org/wiki/Code_coverage) at least\n95% of lines.  Configure the project using `./configure --enable-coverage` and\nthen run `make check`.\n\n## Comments\n\nCode should be commented using full English sentences. In general, try not to\ndocument \"what\" the code is doing, but rather the \"how\" and \"why\". Most people,\nfor example, would agree that the following is an example of a comment that is\nnot useful:\n```c\n    /* Free the node */\n    free(node);\n```\nThe following is a comment that is more enlightening to the reader:\n```c\n    /* The node to be removed must be swapped with an \"adjacent\"\n     * node, ie. one which has the closest key to this one. Find\n     * a node to swap with. */\n    swap_node = avl_tree_node_get_replacement(tree, node);\n```\nAll public interfaces must be documented using\n[Doxygen](https://www.doxygen.nl/). For example:\n```c\n/**\n * Retrieve the number of entries in a hash table.\n *\n * @param hash_table          The hash table.\n * @return                    The number of entries in the hash table.\n */\nunsigned int hash_table_num_entries(HashTable *hash_table);\n```\n\n## Modularity\n\nThe project is structured in a modular way, such that each module (`.c` and\n`.h` file) is independent of the others. The idea is that anyone should be able\nto use any file in an \"off the shelf\" way by trivially copying those two files\ninto their project.\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.0634765625,
          "content": "#!/bin/sh\n\nmkdir -p autotools\nautoreconf -fi && ./configure \"$@\"\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 1.8720703125,
          "content": "AC_INIT([C Algorithms],[1.2.0],[fraggle@removethisbit.gmail.com],[c-algorithms])\nAC_CONFIG_AUX_DIR(autotools)\nAC_CONFIG_SRCDIR([src/arraylist.c])\nAC_CONFIG_MACRO_DIR([m4])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAM_INIT_AUTOMAKE([foreign])\n\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_PROG_CXX\nLT_INIT\nAC_PROG_INSTALL\nAC_PROG_MAKE_SET\n\nif [[ \"$GCC\" = \"yes\" ]]; then\n\tis_gcc=true\nelse\n\tis_gcc=false\nfi\n\nTEST_CFLAGS=\"\"\n\n# Turn on all warnings for gcc.  Turn off optimisation for the test build.\n\nif $is_gcc; then\n\tWARNINGS=\"-Wall -Wsign-compare -Wconversion\"\n\tCFLAGS=\"$CFLAGS $WARNINGS\"\n\tTEST_CFLAGS=\"$TEST_CFLAGS $WARNINGS -O0\"\nfi\n\n# Support for coverage analysis via gcov:\n\nbuild_coverage=false\nAC_ARG_ENABLE(coverage, \n[  --enable-coverage       Enable coverage testing. ],\n[ build_coverage=true ])\n\nAM_CONDITIONAL(BUILD_COVERAGE, $build_coverage)\n\nif [[ \"$build_coverage\" = \"true\" ]]; then\n        if $is_gcc; then\n                TEST_CFLAGS=\"$TEST_CFLAGS -fprofile-arcs -ftest-coverage\"\n        else\n                AC_MSG_ERROR([Can only enable coverage when using gcc.])\n        fi\nfi\n\n# Support for running test cases using valgrind:\n\nuse_valgrind=false\nAC_ARG_ENABLE(valgrind,\n[  --enable-valgrind       Use valgrind when running unit tests. ],\n[ use_valgrind=true ])\n\nif [[ \"$use_valgrind\" = \"true\" ]]; then\n        AC_CHECK_PROG(HAVE_VALGRIND, valgrind, yes, no)\n\n        if [[ \"$HAVE_VALGRIND\" = \"no\" ]]; then\n                AC_MSG_ERROR([Valgrind not found in PATH. ])\n        fi\nfi\n\nAM_CONDITIONAL(USE_VALGRIND, $use_valgrind)\n\n# Save the default CFLAGS and clear them, so that the test build\n# of the library doesn't get the optimisation flags.\n\nMAIN_CFLAGS=\"$CFLAGS\"\nCFLAGS=\"\"\n\nAC_CONFIG_HEADERS(config.h:config.h.in)\n\nAC_SUBST(MAIN_CFLAGS)\nAC_SUBST(TEST_CFLAGS)\nAC_SUBST(ac_aux_dir)\n\nAC_CONFIG_FILES([\n    Makefile\n    libcalg-1.0.pc\n    doc/Makefile\n    src/Makefile\n    test/Makefile\n])\nAC_OUTPUT\n\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcalg-1.0.pc.in",
          "type": "blob",
          "size": 0.240234375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: LibCAlg\nDescription: C Algorithms Library.  See http://c-algorithms.sf.net/\nVersion: @VERSION@\nLibs: -L${libdir} -lcalg\nCflags: -I${includedir}/libcalg-1.0\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}