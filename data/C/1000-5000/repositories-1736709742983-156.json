{
  "metadata": {
    "timestamp": 1736709742983,
    "page": 156,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "westes/flex",
      "stars": 3678,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2158203125,
          "content": "*.orig\n*.rej\n*.sig\n*.tar.gz\n*.tar.lz\n*~\n.deps\n.libs\nABOUT-NLS\nChangeLog\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache\nautoscan.log\nbuild-aux/\nconfig.log\nconfig.status\nconfigure\nconfigure.scan\nflex-*/\nlibtool\nm4/\nstamp-*\n"
        },
        {
          "name": ".indent.pro",
          "type": "blob",
          "size": 0.419921875,
          "content": "--blank-lines-after-declarations\n--blank-lines-after-procedures\n-br  /* open braces on same line */\n-nce /* start else on new line */\n-nbc /* vars on same line */\n-di8 /* line up var decl at col 8 */\n-brs /* struct brace on same line */\n-i8  /* indent 4  */\n-lp  /* line up parens */\n-ts8 /* tab stop */\n-bbo /* break before && || */\n-hnl /* honor newlines */\n--space-special-semicolon\n--line-length75\n--dont-break-procedure-type\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 2.173828125,
          "content": "Aaron Stone <sodabrew@users.sourceforge.net>\nAkim Demaille <akim@lrde.epita.fr>\nAlastair Hughes <hobbitalastair@gmail.com>\nAlex Kennedy <alexzanderkennedy@gmail.com>\nAlexis La Goutte <alexis.lagoutte@gmail.com>\nBastian Köcher <git@kchr.de>\nChristoph Junghans <ottxor@gentoo.org>\nChristos Zoulas <christos@zoulas.com>\nCyril Brulebois <kibi@debian.org>\nDemi Obenour <demiobenour@gmail.com>\nDennis Clarke <dclarke@blastwave.org>\nEgor Pugin <egor.pugin@gmail.com>\nElias Pipping <pipping@users.sourceforge.net>\nExplorer09 <explorer09@gmail.com>\nHans-Bernhard Broeker <HBBroeker@T-Online.de>\nHarald van Dijk <harald@gigawatt.nl>\nHugh Sasse <hgs@dmu.ac.uk>\nJaska Uimonen <jaska.uimonen@helsinki.fi>\nJeff Smith <whydoubt@gmail.com>\nJohn Millaway <john43@users.sourceforge.net>\nManoj Srivastava <srivasta@golden-gryphon.com>\nMariusz Pluciński <mplucinski@mplucinski.com>\nMichael Haubenwallner <michael.haubenwallner@ssi-schaefer.com>\nMichael McConville <mmcconville@mykolab.com> <mmcco@mykolab.com>\nMichael Reed <m.reed@mykolab.com>\nMichael van Elst <mlelstv@NetBSD.org>\nMightyjo <mightyjo@gmail.com>\nMike Frysinger <vapier@gentoo.org>\nOBATA Akio <obache@NetBSD.org>\nRobert Larice <Robert.Larice@t-online.de> rlar <rlar>\nRobert Larice <Robert.Larice@t-online.de> Robert.Larice Robert Larice <Robert.Larice@t-online.de>\nRobert Minsk <rminsk@users.sourceforge.net>\nSamuel Thibault <samuel.thibault@ens-lyon.org>\nSean McBride <sean@rogue-research.com>\nSerguey Parkhomovsky <sergueyparkhomovsky@gmail.com> <xindigo@gmail.com>\nSimon Sobisch <simonsobisch@web.de>\nStefan Reinauer <stefan.reinauer@coreboot.org>\nThomas Klausner <wiz@NetBSD.org>\nTill Varoquaux <till.varoquaux@gmail.com>\nTobias Klauser <tklauser@distanz.ch>\nTodd C. Miller <Todd.Miller@courtesan.com>\nTranslation Project <coordinator@translationproject.org> <coordinators@translationproject.org>\nTranslation Project <coordinator@translationproject.org> <translation@translationproject.org>\nVern Paxson <vern@ee.lbl.gov>\nWill Estes <westes575@gmail.com> <wlestes@users.sourceforge.net>\nYuri <yuri@tsoft.com>\nluistung <dongliang1986@gmail.com>\nlukeallardyce <lukeallardyce@users.sourceforge.net>\nnomis52 <nomis52@users.sourceforge.net>\nviktor.shepel <shepelvictor@bigmir.net>\n"
        },
        {
          "name": ".prev-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "2.6.4\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.609375,
          "content": "\nIn 2001, Will Estes took over as maintainer of flex.\n\nJohn Millaway is a co-author of the current version of flex. He has\ncontributed a large number of new features, fixed a large number of\noutstanding bugs and has made significant contributions to the flex\ndocumentation.\n\nAaron Stone has contributed several bug fixes to the flex codebase.\n\nVern Paxson wrote flex with the help of many ideas and much\ninspiration from Van Jacobson.  Original version by Jef Poskanzer.\n\nThe fast table representation is a partial implementation of a design\ndone by Van Jacobson.  The implementation was done by Kevin Gong and\nVern Paxson.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.251953125,
          "content": "# Contributor Code of Conduct\n\nThis project adheres to No Code of Conduct.  We are all adults.  We accept anyone's contributions.  Nothing else matters.\n\nFor more information please visit the [No Code of Conduct](https://github.com/domgetter/NCoC) homepage.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.15625,
          "content": "# CONTRIBUTING to Flex\n\n## Introduction\n\nThank you for your interest in contributing to Flex! Flex's [issue\ntracker](https://github.com/westes/flex/issues) is on GitHub. That's\nthe best place to find a task that needs attention. It's also the best\nplace to check whether a problem you've found is known to the\ncommunity.\n\n## Baseline Build Environment\n\nThe maintenance baseline build environment is Ubuntu 20.04 LTS.\n\nFlex needs a previous version of itself in order to build a new\nversion of itself. You can either install an operating system package\nof flex, or you can build flex from one of the release tar balls.\n\nConfiguring your Flex development environment to match the maintenance\nbaseline will help you collaborate and review contributions with the\nother developers working on Flex. See the\n[INSTALL](https://github.com/westes/flex/blob/master/INSTALL.md) for\nprograms required to build flex from scratch.\n\n## Branching Convention\n\nFlex source code is maintained in Git at GitHub. Each Flex developer\nforks their own copy of the main repository at\n[westes/flex](https://github.com/westes/flex). Flex development occurs\nin feature branches of the forks. PRs will eventually be submitted\nfrom the feature branches of the forks to westes/flex.\n\nFlex development forks are not required to reside on GitHub. However:\n- GitHub's pull request (PR) process only works with repositories\n  hosted on GitHub;\n- Flex's automated testing pipeline depends on GitHub's Actions\n  infrastructure and may not function on other Git servers.\n\nTherefore, if your fork of flex resides outside of github, you may\nwish to submit your patches via email, using standard git mechanisms.\n\n## Preparing Your Commits\n\nSmall PRs are easier to review and merge. Minimize the scope of the\nchanges in a single PR within reason. Changes that touch one or two\nfiles are likely to be reviewed and accepted more quickly than changes\nthat touch every file in Flex. Your pull request should do one atomic\nthing unless there is a really good reason for your pull request to do\nmore than one thing.\n\nFormat your commit messages following [Conventional Commits\n1.0.0](https://www.conventionalcommits.org/en/v1.0.0/) (CC BY 3.0\nnetlify.com). Briefly:\n\n```\n    <type>[(optional scope)][!]: <description>\n\t[BLANK LINE]\n\t[optional body]\n\t[BLANK LINE]\n\t[optional footer(s)]\n```\n\nA typical commit message might look like:\n\n```\n    docs: Add CONTRIBUTING manual\n\t\n\tRefs: #1234\n```\n\nThe description should summarize the changes in a single, short\nsentence. The description should be written in the imperative mood,\nlike the descriptions of the types below.\n\nThe primary types are:\n- build: Change the build system, including tracking external dependencies\n- ci: Change the CI/CD system\n- docs: Update the package documentation\n- feat: Add a new feature\n- fix: Fix a bug or incorrect behavior\n- perf: Improve performance of a feature\n- refactor: Simplify maintainability without affecting performance or behavior\n- revert: Revert a previous commit\n- style: Correct a style mismatch (indentation, etc.)\n- test: Change or add to the test suite\n\nThe optional scope must appear in parentheses and must consist of a\nnoun describing the section of the code base that was changed.\n\n```\n    docs(contrib): Update URLs in CONTRIBUTING manual\n```\n\nThe optional `!` must appear before the description whenever the\ncommit introduces a breaking change - one that breaks compatibility\nwith previous versions of the code base. Whenever the `!` marker\nappears, a BREAKING-CHANGE footer should also be included.\n\nThe optional body may be included to provid additional information\nor context about the change. If it appears, it must be preceded by a\nblank line.\n\nThe optional footers may be included to provide additional referential\ninformation and links to tracked issues, PRs, etc. Each footer must be\npreceded by a blank line. Footers must be formatted as `<footer-type>:\n<description>`, similar to the first line of commit messages. The\ndescription's format depends upon the footer-type. Known footer-types\ninclude:\n- Refs: A comma-separated list of commit hashes and/or issue and PR numbers. Issue and PR numbers must be prefixed with a `#`.\n- BREAKING-CHANGE: A description of the change that breaks compatibility with previous versions of the code, including the version number at which compatibility is broken. \n\nA breaking change commit message might look like:\n\n```\n    feat!: Switch to quantum scanner\n    \n    BREAKING-CHANGE: New scanner runs in constant time but doesn't support any existing hardware. \n\tBreaks compatibility with 1.0.0.\n```\n\nSquash your commits so that each commit is an atomic change. This aids\ndiscussion and revision during the review process. In particular,\nthere should be no commits that fixup prior commits.\n\n## Submitting PRs\n\nBefore submitting a PR to flex, test your changes either locally or\nusing the GitHub Actions pipeline.\n\n### Testing locally\n\n1. Commit and/or stash your changes.\n1. Clean your working copy using\n\n```\ngit clean -xdf\n```\n\n1. Build flex following the directions in [INSTALL](https://www.github.com/westes/flex/blob/master/INSTALL.md).\n1. Run both the `make check` and `make distcheck` targets.\n\n### Testing with GitHub Actions\n\nIf you created a fork of Flex on GitHub, any PR you make to your own\nmain branch will trigger the build and test pipeline.\n\n1. Commit your changes.\n1. Push your local branch to your remote at GitHub. Assuming your GitHub remote is called origin:\n\n```\ngit push origin feature_branch\n```\n\nTo submit a pull request through GitHub's web interface:\n\n1. Open your GitHub Flex repository in your web browser.\n1. Click the 'Pull requests' link.\n1. Click the 'New pull request' button.\n1. Change the 'base repository' from 'westes/flex' to your fork.\n1. Change the 'base' branch to 'master' if it isn't already set.\n1. Change the 'compare' branch to your feature branch.\n1. Click the 'Create pull request' button.\n1. Click the 'Actions' link to monitor the progress of your build and test job.\n\n### Submitting PRs to westes/flex\n\nSending a PR to westes/flex follows nearly the same process as sending one to your own main branch.\n\n1. Commit your changes.\n1. Push your local branch to your remote at GitHub. Assuming your GitHub remote is called origin:\n\n```\ngit push origin feature_branch\n```\n\nTo use GitHub's web interface:\n\n1. Open your GitHub Flex repository in your web browser.\n1. Click the 'Pull requests' link.\n1. Click the 'New pull request' button.\n1. Change the 'base repository' to 'westes/flex'.\n1. Change the 'base' branch to 'master' if it isn't already set.\n1. Change the 'compare' branch to your feature branch.\n1. Click the 'Create pull request' button.\n1. Add notes to your PR including \n    - A title or commit-like message\n\t- A summary of the commits in your pull request \n    - Issue numbers your PR covers \n\t- Links to your GitHub Actions test results or a copy of the last few lines of output from your local test results.\n\nIf this is your first contribution to Flex, execution of the Actions\npipeline will have to be manually approved by the maintainer. If you\nare a returning contributor, you can click the Actions link to watch\nyour job run.\n\nKeep an eye on your PR's discussion page and your email for review\nnotes and questions from other developers.\n\nThanks for contributing!\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.8115234375,
          "content": "Flex carries the copyright used for BSD software, slightly modified\nbecause it originated at the Lawrence Berkeley (not Livermore!) Laboratory,\nwhich operates under a contract with the Department of Energy:\n\nCopyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007 The Flex Project.\n\nCopyright (c) 1990, 1997 The Regents of the University of California.\nAll rights reserved.\n\nThis code is derived from software contributed to Berkeley by\nVern Paxson.\n\nThe United States Government has rights in this work pursuant\nto contract no. DE-AC03-76SF00098 between the United States\nDepartment of Energy and the University of California.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nNeither the name of the University nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.\n\nThis basically says \"do whatever you please with this software except\nremove this notice or take advantage of the University's (or the flex\nauthors') name\".\n\nNote that the \"flex.skl\" scanner skeleton carries no copyright notice.\nYou are free to do whatever you please with scanners generated using flex;\nfor them, you are not even bound by the above copyright.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 3.89453125,
          "content": "# INSTALLING Flex\n\n## Should you be here at all?\n\nIf building, developing or compiling C programs is new to you, you\nprobably want to use your operating system's standard means of\ninstalling software to install flex. If you do not need the latest\nfeatures of flex, you probably just want to use your operating\nsystem's standard means of installing software to obtain flex.\n\n## Now that you know you should be here ...\n\nIf you are not familiar with bootstrapping C code from a git\nrepository or if GNU autotools seems like a jumble of tenuous\nincantationery to you, then make sure that you downloaded one of the\nrelease tar archives of flex. You can verify this by checking the\nfilename of what you downloaded. If it is something like\n`flex-<version>.tar.<compressiontype>` then you have a release tar\narchive. If you have a filename like `flex.tar.gz` or `flex.zip`, you\nhave a copy of the git repository and you didn't download the thing\nyou wanted to.\n\n## Building from a release archive\n\nTo build flex from a release archive:\n\n```bash\n$ ./configure <any configure options you need>\n$ make\n```\n\nTo see what options are available from the configure script:\n\n```bash\n$ ./configure --help\n```\n\nOptionally run the test suite:\n\n```bash\n$ make check\n```\n\nTo install the flex you just built:\n\n```bash\n$ make install\n```\n\nNote that you may want to make use of the DESTDIR argument on the\n`make install` command line or that you may want to have used the\n`--prefix` argument with configure (or mostly equivalently the\n`prefix` argument on the make command line).\n\n## Building from the git repository\n\nTo build from the git repository:\n\nFirst, make sure you have a copy of flex installed somewhere on your\npath so that configure can find it. You can usually do this with your\noperating system's standard means of installing software. Sometimes,\nyou have to build from a recent release of flex, however. Using a\nversion of flex built from the flex codebase is always acceptable if\nyou have already bootstrapped doing so.\n\nYou will also need all the programs that flex needs in order to be\nbuilt from scratch:\n\n* compiler suite - flex is built with gcc\n* bash, or a good Bourne-style shell\n* m4 - `m4 -P` needs to work; GNU m4 and a few others are suitable\n* GNU bison;  to generate parse.c from parse.y\n* autoconf; for handling the build system\n* automake; for Makefile generation\n* libtool; often packaged with automake, but not always\n* make; for running the generated Makefiles\n* gettext; for i18n support\n* help2man; to generate the flex man page\n* tar, gzip, lzip, etc.; for packaging of the source distribution\n* GNU texinfo; to build and test the flex manual. Note that if you want\n  to build the dvi/ps/pdf versions of the documentation you will need\n  texi2dvi and related programs, along with a sufficiently powerful\n  implementation of TeX to process them. See your operating system\n  documentation for how to achieve this. The printable versions of the\n  manual are not built unless specifically requested, but the targets\n  are included by automake.\n* GNU indent; for indenting the flex source the way we want it done\n* GNU sed; GNU extensions are used so other sed versions will not work\n\nIn cases where the versions of the above tools matter, the file\nconfigure.ac will specify the minimum required versions.\n\nThen:\n\n```bash\n$ ./autogen.sh\n```\n\nAfter autogen.sh finishes successfully, building flex follows the same\nsteps as building flex from a release archive.\n\nNote that, in addition to `make check`, `make distcheck` builds a\nrelease archive and builds and tests flex from inside a directory\ncontaining only known distributed files.\n\nIf you have trouble building flex from git sources on non-Debian systems,\n(e.g. MacOS) make sure that any required GNU tools have been added to\nyour PATH before your system defaults. Also check that required GNU tools\nare aliased to their typical names - some package systems prefix them with\n\"gnu-\" which make them hard for configure to find.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.5341796875,
          "content": "# This file is part of flex.\n\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n\n# Neither the name of the University nor the names of its contributors\n# may be used to endorse or promote products derived from this software\n# without specific prior written permission.\n\n# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR\n# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE.\n\n# Notes on building:\n\n# Possible values for DEFS:\n#\n# By default, flex generates 8-bit scanners when using table compression,\n# and 7-bit scanners when using uncompressed tables (-f or -F options).\n# For flex to always generate 8-bit scanners, add \"-DDEFAULT_CSIZE=256\"\n# to DEFS.\n\nACLOCAL_AMFLAGS = -I m4\n\ndist_doc_DATA = \\\n\tAUTHORS \\\n\tCOPYING \\\n\tNEWS \\\n\tONEWS \\\n\tREADME.md\n\nEXTRA_DIST = \\\n\t.indent.pro \\\n\tINSTALL.md \\\n\tCONTRIBUTING.md\n\ndist_noinst_SCRIPTS = \\\n\tautogen.sh \\\n\tpo/update_linguas.sh\n\nSUBDIRS = \\\n\tsrc \\\n\tdoc \\\n\texamples \\\n\tpo \\\n\ttests \\\n\ttools\n\n# Convenience targets to build libfl only\n# These are actually wrappers around automake- and libtool-generated targets\n\nlibfl:\n\tcd src && $(MAKE) $(AM_MAKEFLAGS) libfl.la libfl.pc\n\ninstall-libfl:\n\tcd src && \\\n\t$(MAKE) $(AM_MAKEFLAGS) lib_LTLIBRARIES=libfl.la \\\n\tpkgconfig_DATA=libfl.pc install-libLTLIBRARIES install-pkgconfigDATA\n\nuninstall-libfl:\n\tcd src && \\\n\t$(MAKE) $(AM_MAKEFLAGS) \\\n\tlib_LTLIBRARIES=libfl.la pkgconfig_DATA=libfl.pc \\\n\tuninstall-libLTLIBRARIES uninstall-pkgconfigDATA\n\n# libfl.pc is cleaned via 'distclean' target\nclean-libfl:\n\tcd src && \\\n\t$(MAKE) $(AM_MAKEFLAGS) lib_LTLIBRARIES=libfl.la clean-libLTLIBRARIES \\\n\tclean-libtool\n\n# Create the ChangeLog, but only if we're inside a git working directory\n\nChangeLog: $(srcdir)/tools/git2cl\n\tif [ -d $(srcdir)/.git ] ; then \\\n\t\t$(srcdir)/tools/git2cl > $@ \\\n\t; fi\n\nindent:\n\tcd src && $(MAKE) $(AM_MAKEFLAGS) indent\n\ninstall-exec-hook:\n\tcd $(DESTDIR)$(bindir) && \\\n\t\t$(LN_S) -f flex$(EXEEXT) flex++$(EXEEXT)\n\nlint:\n\tshellcheck -f gcc tests/*.sh src/*.sh *.sh\n\n.PHONY: libfl install-libfl uninstall-libfl clean-libfl \\\n\tChangeLog indent lint\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 25.048828125,
          "content": "flex NEWS\n\n* Noteworthy changes in release  ?.? (????-??-??) [?]\n\n** build\n\n*** Flex now includes its own <config.h> header before including\n    system headers so that any system specific features detected by\n    configure are taken into account during compilation of flex\n    itself.\n\n*** The flex build system now includes Makefile targets at the top\n    level to allow just building and installing libfl.\n\n*** The flex distribution now includes a file, src/libfl.pc, to allow\n    using pkgconfig to find out what flags to use when building\n    against libfl from flex.\n\n*** Various edge cases, mostly involving out-of-tree builds have been\n    accounted for in the autotools build system.\n\n*** A crash during building on NetBSD has been fixed.\n\n*** Flex is now automatically built by travis-ci. That should increase\n    the visibility of bugs and help prevent regressions.\n\n** documentation\n\n*** new bg, eo, ka, pt, uk translations from the translation project\n\n** scanner\n\n*** Some memory leaks have been fixed.\n\n*** A long standing bug that effected expressions of the form c{i,j}\n    where 'c' is a character and {i,j} describes the number of times\n    to match against 'c' when case sensitivity was turned on has been\n    fixed.\n\n*** New option: --backup-file allows setting the name of the file\n    written containing backing up information. Useful if you need\n    backing up information from multiple scanners in the same\n    directory.\n\n*** flex emits correct line number directives when line numbers refer\n    to the file containing the line number directives.\n\n*** The options {no,}yy{get,set}_column are now supported.\n\n** test\n\n*** Generating the various tableoptions make rules is now more portable.\n\n*** Tests of the options -C*f and -C*F will now run correctly on\n    filesystems that are not case sensitive.\n\n* Noteworthy changes in release 2.6.4 (2017-05-06) [stable]\n\n** build\n\n*** The indent target now knows about flex's new (as of 2.6.0)\n    layout. The indent rules it would apply are not correct and do\n    need to be fixed.\n\n*** The files included in the flex distribution are now built by the\n    version of flex that is included in the distribution.\n\n*** The configure script has a better idea of which headers are\n    required to build flex. It will also error when missing functions\n    are detected.\n\n*** We have lowered the versions of automake and gettext that\n    configure.ac lists as required for building flex. In autogen.sh,\n    we now check for how to call libtoolize and use what we find in\n    the rest of the script.\n\n*** Since files in lib/ are picked up as needed by src/, we no longer\n    generate a Makefile for that directory.\n\n*** Flex can be cross compiled.\n\n** documentation\n\n*** Some typos were removed from the manual.\n\n** scanner\n\n*** Some minor performance enhancements.\n\n*** We honor user defined yy_* macros again. We are also more careful\n    to not leak macro definitions into header files.\n\n*** A number of portability fixes were introduced so building flex is\n    more reliable on more platforms. Additionally, outdated function\n    calls were removed.\n\n*** When building the flex executable itself, %# comments from\n    flex.skl are removed when generating the C source code array. This\n    reduces the size of flex.\n\n** test suite\n\n*** All scripts in the test suite are now run by $(SHELL) and the\n    needed portability fixes have been included.\n\n*** Test suite dependencies are handled much better. This only matters\n    if you are actively developing flex or its test suite.\n\n*** Tests that depend on platform dependent features now properly skip\n    when those platforms are not present.\n\n*** When running \"make check\", you can now pas V=0 to silence more of\n    the build. This is useful when you're less concerned about the\n    details of building and linking the test programs themselves.\n\n* Noteworthy changes in release 2.6.3 (2016-12-30) [stable]\n\n** scanner\n\n*** several bug fixes resolved problems introduced in recent flex\n    versions regarding processing of comments, literals and various\n    quoting scenarios.\n\n*** If the path to m4 was sufficiently long, a buffer overflow could\n    occur. This has been resolved. The fix also removes dependence on\n    the constant PATH_MAX.\n\n** build\n\n*** A new configure option --disable-bootstrap changes the behavior of\n    the build system when building flex. The default\n    \"--enable-bootstrap\" behavior is to build flex, then to use that\n    flex to build flex again. With --disable-bootstrap, the scanner is\n    simply built by sedding the scanner source. This is friendlier to\n    cross compilation.\n\n*** The compatibility functions in lib/ are no longer built as a\n    library. Instead, they are built as $(LIBOBJ) objects. This is\n    simpler and friendlier to cross compilation.\n\n*** It is now possible to build flex without building the accompanying\n    libfl. This is friendlier to cross compilation. See the\n    --disable-libfl option to configure. Resolves #99.\n\n*** the PIC version of libfl was not correctly built. It is no longer\n    included in the build/installation targets of flex since it was\n    unused.\n\n*** the distributed man page is only rebuilt when the relevant source\n    files change or when the binary doesn't exist. In particular, this\n    is friendlier to cross compilation. Resolves #108\n\n** test\n\n*** the shell scripts in the test suite are more portable across different shell implementations.\n\n* version 2.6.2 released 2016-10-24\n\n** flex internals\n\n*** a segfault involving yyrestart(NULL) has been fixed\n\n*** flex should now handle quoting when mixed with m4 processing correctly\n\n*** flex handles `[[' and `]]' correctly\n\n*** flex no longer generates non-ANSI code\n\n*** more compilation warnings were squashed in generated scanners\n\n*** prevented a buffer overflow that could occur when input buffers were the exact wrong size\n\n** test suite\n\n*** input filenames on MSWindows are now calculated correctly\n\n*** general code cleanups in a number of tests now make the test suite compile much more cleanly\n\n** build system\n\n*** the xz archive has been replaced with an lzip archive\n\n*** a new option to configure --enable-warnings to encapsulate passing\n    of warning-related flags which is useful in testing flex\n\n*** make indent now works for out of source builds\n\n*** Portability warnings when generating Makefile.in files are now suppressed; they were just noise and the use of GNU extensions in Makefile.{am,in,} was intentional and well known.\n\n** bugs\n\n*** resolved gh#67\n\n** new sv translation from the translation project\n\n* version 2.6.1 released 2016-03-01\n\n** flex resources\n\n*** The flex project is now hosted at github. Consider this a \"period of transition\". In particular, you should start at https://github.com/westes/flex for the flex codebase, issue tracking and pull requests.\n\n*** New releases of flex are to be found at https://github.com/westes/flex/releases.\n\n** flex internals\n\n*** Flex now uses more modern and more standard names for variable types. There's more work to be done on that front yet, though.\n\n*** A number of compiler warnings have been remedied.\n\n*** Line directives should now  work as expected and be absent when that is expected.\n\n** test suite\n\n*** When running the test suite, c++ files are compiled with the c++ header inside the flex distribution, rather than relying on the build system's flex header , which might not be installed yet or which might be out of date with respect to what flex tests expect.\n\n*** Some portability fixes in the test suite such as opening files for reading in binary mode\n\n** Building flex\n\n*** The file src/scan.c asdistributed  with flex source is now built with the current version of flex. Occasionally this had to be done manually to pick up new flex features. It's now just a part of flex's build system.\n\n*** The pdf version of the manual is no longer distributed with flex, although if you have the texinfo package installed, you can still build it.\n\n*** lots of general build system cleanup\n\n*** the build system tries a bit harder to find libtoolize and texi2dvi.\n\n*** When help2man and texi2dvi are missing, the error messages are now much more helpful.\n\n** bug fixes\n\n*** resolved github issues #53, #54, #55, #61.\n\n*** Resolved sf bugs #128, #129, #155, #160, #184, #187, #195.\n\n* version 2.6.0 released 2015-11-17\n\n** User Visible Changes\n\n*** C++ scanners now use references instead of pointers. See the manual for details.\n\n*** A number of compiler warnings were addressed, so flex generated scanners should be quieter under compiler warning scenarios.\n\n*** Allow error reporting routines to accept varying number of arguments\n\n*** Removed deprecated 'register' storage class specifier\n\n*** Changed output formats from octal to hexadecimal\n\n*** check limits before using array index cclp; resolves sf-166\n\n*** Suppress clang warning about empty @param paragraph; resolves sf#158\n\n*** Fixed malloc/realloc replacement, resolves sf bug#151.\n\n*** Adjusted buffer sizes on ia64.\n\n*** various documentation and code clean up fixes: resolves sf bugs #167, #168, among other patches.\n\n** Flex Internals\n\n*** flex is now organized into subdirectories. This keeps the tree neater at the top level and puts like things near each other and unlike things away from each other.\n\n*** The test suite has been reorganized and is now run with the parallel test suite harness from automake.\n\n*** Cleaned up the automake parts of the build system to better reflect what automake does on its own. Also added a call to libtoolize in autogen.sh because autoreconf gets confused without a prior run of libtoolize.\n\n*** po/Makefile now includes a rule to fetch the latest translations from the translation project. \"make -f po/Makefile getpo\" from the top level of the flex tree will fetch the files.\n\n*** New da translation from the translation project\n\n* flex version  2.5.39 released 2014-03-26\n\n** no user visible changes in this release\n\n* version 2.5.38 released 2014-02-14\n\n** internationalization\n\n*** add sr translation from the translation project\n\n*** update da, es, ko, nl, pt_BR, ro, ru, sv, tr, vi, zh_CN translations from the translation project\n\n*** rename zh_tw to its proper zh_TW name\n\n* version 2.5.37 released 2012-08-03\n\n** Import flex into git. See\n   git://flex.git.sourceforge.net/gitroot/flex/flex.\n\n** Fix make install target to not fail when the flex++ program is\n   already installed\n\n** New translations from the translation project: de, fi, pl, vi\n\n* version 2.5.36 released 2012-07-20\n\n** various portability fixes that quiet compiler warnings on 64-bit\n   hosts\n\n** various manual fixes, including correcting the name of a %option and\n   updating some simple examples to use ANSI C syntax\n\n** various bug fixes that prevent certain error conditions from\n   persisting when they should not persist\n\n** improvements to the test suite so it behaves better when linking\n   compiled files\n\n** new translations from the translation project: ca, da, es, fi, fr,\n   ga, ko, pt_br, ro, ru, sv, tr, zh_cn\n\n** the flex distribution is now built with automake 1.10.1 and automake\n   2.61\n\n* version 2.5.35 released 2008-02-26\n\n** fixed bug that prevented flex from accepting certain comments in the\n  scanner file (resolves bugs #1849809 and #1849805)\n\n** fix bug that prevented headers for all functions from being generated\n  (resolves bug #1628314)\n\n** change yy_size_t to be size_t (resolves bug #1849812)\n\n** new de, nl, pl, pt_br, vi translations from the translation project\n\n* version 2.5.34 released 2007-12-12\n\n** introduce yylex_init_extra; see the manual for details\n\n** introduce %option extra-type=\"your_type *\" (resolves bug #1744505)\n\n** The flex program now parses multiple short concatenated options (resolves bug\n  #1619820). Thanks to Petr Machata of Red Hat on this issue.\n\n** better checking after yyalloc/yyrealloc (resolves bug #1595967)\n\n** flex now provides for a libfl_pic.a compiled with position\n   independent code. Particularly useful when including a flex scanner\n   in a shared library and with more recent versions of gcc. Thanks to the Debian project for the idea.\n\n** SourceForge feature request #1658379: Expose YY_BUF_SIZE in the\n\theader file.\n\n** flex better escapes filenames with special characters in them\n   (resolves bug #1623600)\n\n** a memory leak was plugged(resolves bug #1601111)\n\n** pattern language expanded; see the manual for details on the below\n   highlights\n\n*** pattern options added to specify patterns as case-insensitive or\n    case-sensitive\n\n*** pattern options to specify whether the \".\" character should match\n    the newline character\n\n*** pattern options added to allow ignoring of whitespace in patterns\n\n*** POSIX character classes may be negated in patterns\n\n*** patterns may now use set difference, union operators\n\n** the manual now contains an appendix listing various common patterns\n   which may be useful when writing scanners\n\n** some memory leaks were removed from the C++ scanner (but the C++\n  scanner is still experimental and may change radically without\n  notice)\n\n** c++ scanners can now use yywrap\n\n** added new unit test for c++ and yywrap\n\n** portability fixes to some unit tests\n\n** flex man page and flex manual in pdf now distributed in the flex\ndistribution\n\n** new ca, vi, ga, nl translations from the translation project\n\n** flex no longer comes with an rpm spec file\n\n** flex development now happens with automake 1.9.6\n\n* version 2.5.33 released 2006-2-20\n\n** all flex resources are now to be found from the website at\n   http://flex.sourceforge.net/\n\n** there was no release 2.5.32 published\n\n** numerous bug and security fixes\n\n** new nl, vi, sv, ro, po, ga, ca, fr, tr translations from the translation project\n\n** upgrade to use gettext 0.12 (this now makes the \"pdf\" and \"ps\"\n   targets in the build system able to be run successfully)\n\n* version 2.5.31 released 2003-4-1\n\n** remove --enable-maintainer-mode configure option; none of the\n   Makefiles were using it and it can be unduly confusing\n\n* version 2.5.30 released 2003-4-1\n\n** yylineno is per-buffer in reentrant scanners\n\n** added %top directive for placing code at the top of the generated\n   scanner; see manual for details\n\n** flex now uses m4 to generate scanners; while this means that\n   scanners are more readable, it means that flex requires m4 to be\n   installed; see manual for details\n\n* version 2.5.29 released 2003-3-5\n\n** Automatic stack management for multiple input buffers in C and C++ scanners\n\n** moved the flex documentation to a new doc/ subdirectory\n\n** cleanups to the yy namespace\n\n* version 2.5.28 released 2003-2-12\n\n** flex is now hosted at sourceforge\n\n** Fixed trailing slash bug in YY_INPUT macro def\n\n** Flex now warns if always-interactive is specified with fast or full\n\n* version 2.5.27 released 2003-1-21\n\n** flex now works with recent bison versions\n\n** new pt_br translation from the translation project\n\n* version 2.5.26 released 2003-1-14\n\n** Fixed table deserialization bug on big-endian archs. Patch sent from Bryce Nichols <bryce@bnichols.org>\n\n** yyleng has proper declarations now; this caused flex to generate\n   unusable scanners for some programs\n\n** the flex distribution now includes a spec file suitable for use\n   with rpm\n\n** some more c++ fixes\n\n** new es translation from the translation project\n\n** slight tweaks to the flex_int*_t types\n\n** flex now warns about pattern ranges that might be ambiguous when\n   generating a case-insensitive scanner\n\n\n* version 2.5.25 released 2002-12-2\n\n** flex now uses flex_int*_t types. For C99 systems, they are just the\n   int*_t types; for non-C99 systems, we just make some typedefs\n\n** new pt_br translation from the translation project\n\n* version 2.5.24 released 2002-11-25\n\n* more portability fixes\n\n** the manual continues to be updated and edited, but it's still got a\n   ways to go\n\n** it is possible to have multiple c++ scanners in the same program again\n\n** new turkish translation from the translation project\n\n* version 2.5.23 released 2002-10-21\n\n** more portability fixes\n\n** the manual includes a title page and a table-of-contents when printed\n\n** the test suite can be run with \"make check\" from the top-level\n   directory\n\n** configure now accepts the --enable-maintainer-mode option\n\n** gettext functionality is now only available externally\n\n** the constant FLEX_BETA is defined if flex is a beta release\n\n** the script create-test was not included in the distribution and it\n   should have been\n\n* version 2.5.22 released 2002-10-10\n\n** more portability fixes around how we get ahold of the integral\n   types; there is a constant FLEX_NEED_INTEGRAL_TYPE_DEFINITIONS\n   which you should define if you don't have the <inttypes.h> header\n   file (after you complain to your C vendor for not providing a\n   reasonable C environment)\n\n** more test suite cleanups; in particular, the test suite should run\n   correctly when build from a different directory\n\n** upgraded automake to 1.7 and consequently autoconf to 2.54; this\n   means, among other things, that there is some support for\nformatting the manual in postscript and pdf in the distributed\n   Makefile.in (and therefore in the Makefile built by configure)\n\n** the flex.1 manpage is generated by help2man; (this has been true\n   for quite a while but was not listed here)\n\n** flex now includes three defined constants to indicate which version\n  of flex generated a scanner (YY_FLEX_{MAJOR,MINOR,SUBMINOR}_VERSION)\n\n** flex tries its best to output only the relevant portions of the\n   skeleton when generating a scanner, thus avoiding as much\n   conditional compilation as possible\n\n* version 2.5.21 released 2002-9-17\n\n** one of the tests in the test suite broke the dist target\n\n* version 2.5.20 released 2002-9-16\n\n** A flex scanner has the ability to save the DFA tables to a file,\n   and load them at runtime when needed; see the manual for details\n\n** Added %option bison-bridge (--bison-bridge)\n\n** Removed %option reentrant-bison/--reentrant-bison/-Rb\n\n** yylineno is present in all scanners; Modified nasty performance\n   penalty warning with yylineno in documentation\n\n** test-table-opts is now run last in the test suite because it's so fat\n\n** flex can, to some extent, diagnose where internal problems occur\n\n** new translations from the translation project: fr, ca, de, ru, sv\n\n**Flex generates C99 defs now; see YY_TRADITIONAL_FUNC_DEFS in the\n  manual if that's not a good thing for you\n\n* version 2.5.19 released 2002-9-5\n\n** prevent segfault on input lines which are longer than the allocated\n   space (problem report from Manoj Srivastava\n   <srivasta@golden-gryphon.com>)\n\n** Changed option 'header' to 'header-file'\n\n* version 2.5.18 released 2002-9-4\n\n** portability fixes for integer constants and in the way the test\n   suite reports its results\n\n** the test for bison was reporting bison missing when it was, in\n   fact, found\n\n** if we don't find GNU indent, we're more careful when we're not\n   finding it\n\n* version 2.5.17 released 2002-8-29\n\n** more portability fixes\n\n** updated config.sub and config.guess\n\n** flex is indented by GNU indent (this was done earlier but not\n   explicitly documented)\n\n* version 2.5.16 released 2002-8-28\n\n** c++ scanners compile again\n\n** there is now an indent target in the top-level Makefile; configure\n   checks for GNU indent which is required for proper operation of the\n   indent target\n\n** some more portability fixes were made\n\n** %options and invocation sections of manual merged\n\n** a c++ test was added to the test suite\n\n** we're trying to clean up more files in the test suite's make clean\n   targets\n\n* version 2.5.15 released 2002-8-21\n\n** reject-state buffer is now dynamically allocated and REJECT buffer\n   variables are reentrant-safe\n\n** manual now discusses memory usage\n\n** skeleton now processed by m4 before mkskel.sh; (this only matters\n   if you want to change the skeleton or if you're doing flex development)\n\n** zh_cn translation added from translation project\n\n** a bug that caused a segfault has now been fixed\n\n** the test suite now respects the usual CFLAGS, etc. variables\n\n** removed some warnings which some tests triggered with the -s option\n\n** the flex-generated header file now tries to be smarter about\n   conditionally including start conditions\n\n** tables code omitted from generated scanner when not used\n\n* version 2.5.14 released 2002-8-15\n\n** the tests using the reentrant c scanner as c++ were reworked\n   slightly to be sure that the c++ was enforced\n\n** de translation now included in the distribution\n\n** various portability fixes regarding nls support, c++ include\n   headers, etc.\n\n* version 2.5.13 released 2002-8-15\n\n** the header file output with %option header is now much smaller\n\n** Fixed type mismatch in printf in scanner skeleton\n\n** yylex_init now reports errors\n\n* version 2.5.12 released 2002-8-8\n\n** updated gettext support to 0.11.5\n\n** new fr translation from the translation project\n\n** bison is no longer needed to build flex; If you are building flex\n   from a release (i.e., not from a cvs snapshot), then you don't need\n   to have a pre-built lex around either (unless you modify scan.l, of\n   course); (This has been true for some time, but was not mentioned\n   here.)\n\n* version 2.5.11 released 2002-7-31\n\n** Fixed bug where yyless did not consider yylineno\n\n** the yylineno performance hit is now gone\n\n** fixed some typos in the manual and we now include texinfo.tex in\n   the distribution\n\n** traditional prototypes output for C scanners, controlled by a\n   preprocessor symbol; see documentation for details\n\n* version 2.5.10 released 2002-7-24\n\n** yy_globals renamed to yyscanner and yy_globals_t renamed to\n   yy_guts_t\n\n** added dist-bzip2 option to Makefile.am so we now produce a bzip2'd\n   archive in addition to the standard gzip archive\n\n*  version 2.5.9\n\n** new tests in test suite: test-mem-{nr,r}, test-posix,\n   test-posixly-correct, test-debug-{nr,r}\n\n** made changes to work with gcc-3.2 development code\n\n** ability to choose which memory functions are used in flex\n\n** new yylex_destroy() function for the non-reentrant scanner\n\n** new handling of POSIXLY_CORRECT environment variable\n\n** the test suite now has its copyrights explicitly described\n\n** new ca, de, fr, ru, sv, tr translations\n\n* version 2.5.8\n\n** a new --posix option generates scanners with posix-style abc{1,3}\n   compatible parsing, see manual for the screwy details\n\n* version 2.5.7\n\n** configure.in now includes a call to AC_PREREQ to enforce the\n   requirement for autoconf at least 2.50 (This only effects you if\n   you're doing flex development.)\n\n** configure now uses autoconf's versioning information and configure\n   --help reports the bug-reporting address for flex\n\n** test suite now only reports success versus failure; reporting\n   skipped is problematic under the current setup\n\n** compilation with --disable-nls now works\n\n** flex can now be built in a separate directory\n\n* version 2.5.6\n\n** gettext support added (from gettext 0.11)\n\n*** translations for ca, da, de, es, fr, ko, ru, sv, tr included\n\n** distribution now built under automake 1.6 and autoconf 2.53\n\n** command-line option parsing happens differently now:\n\n*** Added long option parsing\n\n*** Options -n and -c, previously deprecated, now simply do nothing\n\n*** Options are now parsed left to right\n\n** added a number of new options\n\n*** All positive %options are now accessible from the command line\n\n*** Added option -D, to define a preprocessor symbol\n\n*** Added option --header=FILE to specify a C .h file to generate\n\n*** added option --yywrap to call yywrap on EOF\n\n*** added option --yylineno to track line count in yylineno\n\n*** --yyclass=NAME name of C++ class when generating c++ scanners\n\n*** for long option names which are associated with existing short\noptions, see accompanying documentation\n\n*** new %option nounistd or command-line --nounistd added to prevent\n    flex from generating #include <unistd.h> on systems that don't\n    have that include file\n\n** Support for reentrant C scanners has been added\n\n*** Updated the manual with the new reentrant API\n\n*** Two new options %option reentrant (-R) and\n%option reentrant-bison (-Rb)\n\n*** All globals optionally placed into struct yyglobals_t\n\n*** All access to globals replaced by macro invocations\n\n*** All functions optionally take one additional\nargument, yy_globals\n\n*** New style for invoking reentrant scanner:\nyylex_init(void** scanner );\nyylex( scanner );\nyylex_destroy( scanner );\n\n*** Added get/set functions for members of struct yy_globals_t\ne.g.,  yyget_text, yyget_leng, etc\n\n*** Prefix substitution added for new functions\n\n*** Macro shortcuts to the lengthy get/set functions\nprovided for use in actions, e.g.,  yytext, yyleng, etc\n\n*** Arbitrary, user-defined data, \"yyextra\", may be added to scanner\n\n** %option nomain no longer implies %option yywrap\nBut the inverse is still true\n\n** Developer test suite added\n\n*** TESTS/ directory has been added. Users can\n'make test' in the TESTS directory to execute the test suite\n\n** Support for bison variables yylval and yylloc added\n\n** automake support for the build process\n\n** manual is now in texinfo/info format\n\n*** flex.1 removed from distribution\n\n** flex no longer generates C-language scanners with C++-style\n   comments\n\n** flex now generates scanners in c++ which are compatible with\n   recent c++ compilers\n\n** flex input scanner now recognizes '\\r' as an EOL character\n\nSee the file ONEWS for changes in earlier releases.\n\nSee the file COPYING for copying conditions.\n\nLocal Variables:\nmode: text\nmode: outline-minor\nend:\n"
        },
        {
          "name": "ONEWS",
          "type": "blob",
          "size": 45.2333984375,
          "content": "Changes between release 2.5.4 (11Sep96) and release 2.5.3:\n\n\t- Fixed a bug introduced in 2.5.3 that blew it when a call\n\t  to input() occurred at the end of an input file.\n\n\t- Fixed scanner skeleton so the example in the man page of\n\t  scanning strings using exclusive start conditions works.\n\n\t- Minor Makefile tweaks.\n\n\nChanges between release 2.5.3 (29May96) and release 2.5.2:\n\n\t- Some serious bugs in yymore() have been fixed.  In particular,\n\t  when using AT&T-lex-compatibility or %array, you can intermix\n\t  calls to input(), unput(), and yymore().  (This still doesn't\n\t  work for %pointer, and isn't likely to in the future.)\n\n\t- A bug in handling NUL's in the input stream of scanners using\n\t  REJECT has been fixed.\n\n\t- The default main() in libfl.a now repeatedly calls yylex() until\n\t  it returns 0, rather than just calling it once.\n\n\t- Minor tweak for Windows NT Makefile, MISC/NT/Makefile.\n\n\nChanges between release 2.5.2 (25Apr95) and release 2.5.1:\n\n\t- The --prefix configuration option now works.\n\n\t- A bug that completely broke the \"-Cf\" table compression\n\t  option has been fixed.\n\n\t- A major headache involving \"const\" declarators and Solaris\n\t  systems has been fixed.\n\n\t- An octal escape sequence in a flex regular expression must\n\t  now contain only the digits 0-7.\n\n\t- You can now use \"--\" on the flex command line to mark the\n\t  end of flex options.\n\n\t- You can now specify the filename '-' as a synonym for stdin.\n\n\t- By default, the scanners generated by flex no longer\n\t  statically initialize yyin and yyout to stdin and stdout.\n\t  This change is necessary because in some ANSI environments,\n\t  stdin and stdout are not compile-time constant.  You can\n\t  force the initialization using \"%option stdinit\" in the first\n\t  section of your flex input.\n\n\t- \"%option nounput\" now correctly omits the unput() routine\n\t  from the output.\n\n\t- \"make clean\" now removes config.log, config.cache, and the\n\t  flex binary.  The fact that it removes the flex binary means\n\t  you should take care if making changes to scan.l, to make\n\t  sure you don't wind up in a bootstrap problem.\n\n\t- In general, the Makefile has been reworked somewhat (thanks\n\t  to Francois Pinard) for added flexibility - more changes will\n\t  follow in subsequent releases.\n\n\t- The .texi and .info files in MISC/texinfo/ have been updated,\n\t  thanks also to Francois Pinard.\n\n\t- The FlexLexer::yylex(istream* new_in, ostream* new_out) method\n\t  now does not have a default for the first argument, to disambiguate\n\t  it from FlexLexer::yylex().\n\n\t- A bug in destructing a FlexLexer object before doing any scanning\n\t  with it has been fixed.\n\n\t- A problem with including FlexLexer.h multiple times has been fixed.\n\n\t- The alloca() chud necessary to accommodate bison has grown\n\t  even uglier, but hopefully more correct.\n\n\t- A portability tweak has been added to accommodate compilers that\n\t  use char* generic pointers.\n\n\t- EBCDIC contact information in the file MISC/EBCDIC has been updated.\n\n\t- An OS/2 Makefile and config.h for flex 2.5 is now available in\n\t  MISC/OS2/, contributed by Kai Uwe Rommel.\n\n\t- The descrip.mms file for building flex under VMS has been updated,\n\t  thanks to Pat Rankin.\n\n\t- The notes on building flex for the Amiga have been updated for\n\t  flex 2.5, contributed by Andreas Scherer.\n\n\nChanges between release 2.5.1 (28Mar95) and release 2.4.7:\n\n\t- A new concept of \"start condition\" scope has been introduced.\n\t  A start condition scope is begun with:\n\n\t\t<SCs>{\n\n\t  where SCs is a list of one or more start conditions.  Inside\n\t  the start condition scope, every rule automatically has the\n\t  prefix <SCs> applied to it, until a '}' which matches the\n\t  initial '{'.  So, for example:\n\n\t\t<ESC>{\n\t\t\t\"\\\\n\"\treturn '\\n';\n\t\t\t\"\\\\r\"\treturn '\\r';\n\t\t\t\"\\\\f\"\treturn '\\f';\n\t\t\t\"\\\\0\"\treturn '\\0';\n\t\t}\n\n\t  is equivalent to:\n\n\t\t<ESC>\"\\\\n\"\treturn '\\n';\n\t\t<ESC>\"\\\\r\"\treturn '\\r';\n\t\t<ESC>\"\\\\f\"\treturn '\\f';\n\t\t<ESC>\"\\\\0\"\treturn '\\0';\n\n\t  As indicated in this example, rules inside start condition scopes\n\t  (and any rule, actually, other than the first) can be indented,\n\t  to better show the extent of the scope.\n\n\t  Start condition scopes may be nested.\n\n\t- The new %option directive can be used in the first section of\n\t  a flex scanner to control scanner-generation options.  Most\n\t  options are given simply as names, optionally preceded by the\n\t  word \"no\" (with no intervening whitespace) to negate their\n\t  meaning.  Some are equivalent to flex flags, so putting them\n\t  in your scanner source is equivalent to always specifying\n\t  the flag (%option's take precedence over flags):\n\n\t\t7bit\t-7 option\n\t\t8bit\t-8 option\n\t\talign\t-Ca option\n\t\tbackup\t-b option\n\t\tbatch\t-B option\n\t\tc++\t-+ option\n\t\tcaseful\topposite of -i option (caseful is the default);\n\t\tcase-sensitive\tsame as above\n\t\tcaseless\t-i option;\n\t\tcase-insensitive\tsame as above\n\t\tdebug\t-d option\n\t\tdefault\topposite of -s option\n\t\tecs\t-Ce option\n\t\tfast\t-F option\n\t\tfull\t-f option\n\t\tinteractive\t-I option\n\t\tlex-compat\t-l option\n\t\tmeta-ecs\t-Cm option\n\t\tperf-report\t-p option\n\t\tread\t-Cr option\n\t\tstdout\t-t option\n\t\tverbose\t-v option\n\t\twarn\topposite of -w option (so use \"%option nowarn\" for -w)\n\n\t\tarray\tequivalent to \"%array\"\n\t\tpointer\tequivalent to \"%pointer\" (default)\n\n\t  Some provide new features:\n\n\t\talways-interactive\tgenerate a scanner which always\n\t\t\tconsiders its input \"interactive\" (no call to isatty()\n\t\t\twill be made when the scanner runs)\n\t\tmain\tsupply a main program for the scanner, which\n\t\t\tsimply calls yylex().  Implies %option noyywrap.\n\t\tnever-interactive\tgenerate a scanner which never\n\t\t\tconsiders its input \"interactive\" (no call to isatty()\n\t\t\twill be made when the scanner runs)\n\t\tstack\tif set, enable start condition stacks (see below)\n\t\tstdinit\tif unset (\"%option nostdinit\"), initialize yyin\n\t\t\tand yyout statically to nil FILE* pointers, instead\n\t\t\tof stdin and stdout\n\t\tyylineno\tif set, keep track of the current line\n\t\t\tnumber in global yylineno (this option is expensive\n\t\t\tin terms of performance).  The line number is available\n\t\t\tto C++ scanning objects via the new member function\n\t\t\tlineno().\n\t\tyywrap\tif unset (\"%option noyywrap\"), scanner does not\n\t\t\tcall yywrap() upon EOF but simply assumes there\n\t\t\tare no more files to scan\n\n\t  Flex scans your rule actions to determine whether you use the\n\t  REJECT or yymore features (this is not new).  Two %options can be\n\t  used to override its decision, either by setting them to indicate\n\t  the feature is indeed used, or unsetting them to indicate it\n\t  actually is not used:\n\n\t\treject\n\t\tyymore\n\n\t  Three %option's take string-delimited values, offset with '=':\n\n\t\toutfile=\"<name>\"\tequivalent to -o<name>\n\t\tprefix=\"<name>\"\t\tequivalent to -P<name>\n\t\tyyclass=\"<name>\"\tset the name of the C++ scanning class\n\t\t\t\t\t(see below)\n\n\t  A number of %option's are available for lint purists who\n\t  want to suppress the appearance of unneeded routines in\n\t  the generated scanner.  Each of the following, if unset,\n\t  results in the corresponding routine not appearing in the\n\t  generated scanner:\n\n\t\tinput, unput\n\t\tyy_push_state, yy_pop_state, yy_top_state\n\t\tyy_scan_buffer, yy_scan_bytes, yy_scan_string\n\n\t  You can specify multiple options with a single %option directive,\n\t  and multiple directives in the first section of your flex input file.\n\n\t- The new function:\n\n\t\tYY_BUFFER_STATE yy_scan_string( const char *str )\n\n\t  returns a YY_BUFFER_STATE (which also becomes the current input\n\t  buffer) for scanning the given string, which occurs starting\n\t  with the next call to yylex().  The string must be NUL-terminated.\n\t  A related function:\n\n\t\tYY_BUFFER_STATE yy_scan_bytes( const char *bytes, int len )\n\n\t  creates a buffer for scanning \"len\" bytes (including possibly NUL's)\n\t  starting at location \"bytes\".\n\n\t  Note that both of these functions create and scan a *copy* of\n\t  the string/bytes.  (This may be desirable, since yylex() modifies\n\t  the contents of the buffer it is scanning.)  You can avoid the\n\t  copy by using:\n\n\t\tYY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )\n\n\t  which scans in place the buffer starting at \"base\", consisting\n\t  of \"size\" bytes, the last two bytes of which *must* be\n\t  YY_END_OF_BUFFER_CHAR (these bytes are not scanned; thus, scanning\n\t  consists of base[0] through base[size-2], inclusive).  If you\n\t  fail to set up \"base\" in this manner, yy_scan_buffer returns a\n\t  nil pointer instead of creating a new input buffer.\n\n\t  The type yy_size_t is an integral type to which you can cast\n\t  an integer expression reflecting the size of the buffer.\n\n\t- Three new routines are available for manipulating stacks of\n\t  start conditions:\n\n\t\tvoid yy_push_state( int new_state )\n\n\t  pushes the current start condition onto the top of the stack\n\t  and BEGIN's \"new_state\" (recall that start condition names are\n\t  also integers).\n\n\t\tvoid yy_pop_state()\n\n\t  pops the top of the stack and BEGIN's to it, and\n\n\t\tint yy_top_state()\n\n\t  returns the top of the stack without altering the stack's\n\t  contents.\n\n\t  The start condition stack grows dynamically and so has no built-in\n\t  size limitation.  If memory is exhausted, program execution\n\t  is aborted.\n\n\t  To use start condition stacks, your scanner must include\n\t  a \"%option stack\" directive.\n\n\t- flex now supports POSIX character class expressions.  These\n\t  are expressions enclosed inside \"[:\" and \":]\" delimiters (which\n\t  themselves must appear between the '[' and ']' of a character\n\t  class; other elements may occur inside the character class, too).\n\t  The expressions flex recognizes are:\n\n\t\t[:alnum:] [:alpha:] [:blank:] [:cntrl:] [:digit:] [:graph:]\t\n\t\t[:lower:] [:print:] [:punct:] [:space:] [:upper:] [:xdigit:]\n\n\t  These expressions all designate a set of characters equivalent to\n\t  the corresponding isXXX function (for example, [:alnum:] designates\n\t  those characters for which isalnum() returns true - i.e., any\n\t  alphabetic or numeric).  Some systems don't provide isblank(),\n\t  so flex defines [:blank:] as a blank or a tab.\n\n\t  For example, the following character classes are all equivalent:\n\n\t\t[[:alnum:]]\n\t\t[[:alpha:][:digit:]\n\t\t[[:alpha:]0-9]\n\t\t[a-zA-Z0-9]\n\n\t  If your scanner is case-insensitive (-i flag), then [:upper:]\n\t  and [:lower:] are equivalent to [:alpha:].\n\n\t- The promised rewrite of the C++ FlexLexer class has not yet\n\t  been done.  Support for FlexLexer is limited at the moment to\n\t  fixing show-stopper bugs, so, for example, the new functions\n\t  yy_scan_string() & friends are not available to FlexLexer\n\t  objects.\n\n\t- The new macro\n\n\t\tyy_set_interactive(is_interactive)\n\n\t  can be used to control whether the current buffer is considered\n\t  \"interactive\".  An interactive buffer is processed more slowly,\n\t  but must be used when the scanner's input source is indeed\n\t  interactive to avoid problems due to waiting to fill buffers\n\t  (see the discussion of the -I flag in flex.1).  A non-zero value\n\t  in the macro invocation marks the buffer as interactive, a zero\n\t  value as non-interactive.  Note that use of this macro overrides\n\t  \"%option always-interactive\" or \"%option never-interactive\".\n\n\t  yy_set_interactive() must be invoked prior to beginning to\n\t  scan the buffer.\n\n\t- The new macro\n\n\t\tyy_set_bol(at_bol)\n\n\t  can be used to control whether the current buffer's scanning\n\t  context for the next token match is done as though at the\n\t  beginning of a line (non-zero macro argument; makes '^' anchored\n\t  rules active) or not at the beginning of a line (zero argument,\n\t  '^' rules inactive).\n\n\t- Related to this change, the mechanism for determining when a scan is\n\t  starting at the beginning of a line has changed.  It used to be\n\t  that '^' was active iff the character prior to that at which the\n\t  scan started was a newline.  The mechanism now is that '^' is\n\t  active iff the last token ended in a newline (or the last call to\n\t  input() returned a newline).  For most users, the difference in\n\t  mechanisms is negligible.  Where it will make a difference,\n\t  however, is if unput() or yyless() is used to alter the input\n\t  stream.  When in doubt, use yy_set_bol().\n\n\t- The new beginning-of-line mechanism involved changing some fairly\n\t  twisted code, so it may have introduced bugs - beware ...\n\n\t- The macro YY_AT_BOL() returns true if the next token scanned from\n\t  the current buffer will have '^' rules active, false otherwise.\n\n\t- The new function\n\n\t\tvoid yy_flush_buffer( struct yy_buffer_state* b )\n\n\t  flushes the contents of the current buffer (i.e., next time\n\t  the scanner attempts to match a token using b as the current\n\t  buffer, it will begin by invoking YY_INPUT to fill the buffer).\n\t  This routine is also available to C++ scanners (unlike some\n\t  of the other new routines).\n\n\t  The related macro\n\n\t\tYY_FLUSH_BUFFER\n\n\t  flushes the contents of the current buffer.\n\n\t- A new \"-ooutput\" option writes the generated scanner to \"output\".\n\t  If used with -t, the scanner is still written to stdout, but\n\t  its internal #line directives (see previous item) use \"output\".\n\n\t- Flex now generates #line directives relating the code it\n\t  produces to the output file; this means that error messages\n\t  in the flex-generated code should be correctly pinpointed.\n\n\t- When generating #line directives, filenames with embedded '\\'s\n\t  have those characters escaped (i.e., turned into '\\\\').  This\n\t  feature helps with reporting filenames for some MS-DOS and OS/2\n\t  systems.\n\n\t- The FlexLexer class includes two new public member functions:\n\n\t\tvirtual void switch_streams( istream* new_in = 0,\n\t\t\t\t\t\tostream* new_out = 0 )\n\n\t  reassigns yyin to new_in (if non-nil) and yyout to new_out\n\t  (ditto), deleting the previous input buffer if yyin is\n\t  reassigned.  It is used by:\n\n\t\tint yylex( istream* new_in = 0, ostream* new_out = 0 )\n\n\t  which first calls switch_streams() and then returns the value\n\t  of calling yylex().\n\n\t- C++ scanners now have yy_flex_debug as a member variable of\n\t  FlexLexer rather than a global, and member functions for testing\n\t  and setting it.\n\n\t- When generating a C++ scanning class, you can now use\n\n\t\t%option yyclass=\"foo\"\n\n\t  to inform flex that you have derived \"foo\" as a subclass of\n\t  yyFlexLexer, so flex will place your actions in the member\n\t  function foo::yylex() instead of yyFlexLexer::yylex().  It also\n\t  generates a yyFlexLexer::yylex() member function that generates a\n\t  run-time error if called (by invoking yyFlexLexer::LexerError()).\n\t  This feature is necessary if your subclass \"foo\" introduces some\n\t  additional member functions or variables that you need to access\n\t  from yylex().\n\n\t- Current texinfo files in MISC/texinfo, contributed by Francois\n\t  Pinard.\n\n\t- You can now change the name \"flex\" to something else (e.g., \"lex\")\n\t  by redefining $(FLEX) in the Makefile.\n\n\t- Two bugs (one serious) that could cause \"bigcheck\" to fail have\n\t  been fixed.\n\n\t- A number of portability/configuration changes have been made\n\t  for easier portability.\n\n\t- You can use \"YYSTATE\" in your scanner as an alias for YY_START\n\t  (for AT&T lex compatibility).\n\n\t- input() now maintains yylineno.\n\n\t- input() no longer trashes yytext.\n\n\t- interactive scanners now read characters in YY_INPUT up to a\n\t  newline, a large performance gain.\n\n\t- C++ scanner objects now work with the -P option.  You include\n\t  <FlexLexer.h> once per scanner - see comments in <FlexLexer.h>\n\t  (or flex.1) for details.\n\n\t- C++ FlexLexer objects now use the \"cerr\" stream to report -d output\n\t  instead of stdio.\n\n\t- The -c flag now has its full glorious POSIX interpretation (do\n\t  nothing), rather than being interpreted as an old-style -C flag.\n\n\t- Scanners generated by flex now include two #define's giving\n\t  the major and minor version numbers (YY_FLEX_MAJOR_VERSION,\n\t  YY_FLEX_MINOR_VERSION).  These can then be tested to see\n\t  whether certain flex features are available.\n\n\t- Scanners generated using -l lex compatibility now have the symbol\n\t  YY_FLEX_LEX_COMPAT #define'd.\n\n\t- When initializing (i.e., yy_init is non-zero on entry to yylex()),\n\t  generated scanners now set yy_init to zero before executing\n\t  YY_USER_INIT.  This means that you can set yy_init back to a\n\t  non-zero value in YY_USER_INIT if you need the scanner to be\n\t  reinitialized on the next call.\n\n\t- You can now use \"#line\" directives in the first section of your\n\t  scanner specification.\n\n\t- When generating full-table scanners (-Cf), flex now puts braces\n\t  around each row of the 2-d array initialization, to silence warnings\n\t  on over-zealous compilers.\n\n\t- Improved support for MS-DOS.  The flex sources have been successfully\n\t  built, unmodified, for Borland 4.02 (all that's required is a\n\t  Borland Makefile and config.h file, which are supplied in\n\t  MISC/Borland - contributed by Terrence O Kane).\n\n\t- Improved support for Macintosh using Think C - the sources should\n\t  build for this platform \"out of the box\".  Contributed by Scott\n\t  Hofmann.\n\n\t- Improved support for VMS, in MISC/VMS/, contributed by Pat Rankin.\n\n\t- Support for the Amiga, in MISC/Amiga/, contributed by Andreas\n\t  Scherer.  Note that the contributed files were developed for\n\t  flex 2.4 and have not been tested with flex 2.5.\n\n\t- Some notes on support for the NeXT, in MISC/NeXT, contributed\n\t  by Raf Schietekat.\n\n\t- The MISC/ directory now includes a preformatted version of flex.1\n\t  in flex.man, and pre-yacc'd versions of parse.y in parse.{c,h}.\n\n\t- The flex.1 and flexdoc.1 manual pages have been merged.  There\n\t  is now just one document, flex.1, which includes an overview\n\t  at the beginning to help you find the section you need.\n\n\t- Documentation now clarifies that start conditions persist across\n\t  switches to new input files or different input buffers.  If you\n\t  want to e.g., return to INITIAL, you must explicitly do so.\n\n\t- The \"Performance Considerations\" section of the manual has been\n\t  updated.\n\n\t- Documented the \"yy_act\" variable, which when YY_USER_ACTION is\n\t  invoked holds the number of the matched rule, and added an\n\t  example of using yy_act to profile how often each rule is matched.\n\n\t- Added YY_NUM_RULES, a definition that gives the total number\n\t  of rules in the file, including the default rule (even if you\n\t  use -s).\n\n\t- Documentation now clarifies that you can pass a nil FILE* pointer\n\t  to yy_create_buffer() or yyrestart() if you've arrange YY_INPUT\n\t  to not need yyin.\n\n\t- Documentation now clarifies that YY_BUFFER_STATE is a pointer to\n\t  an opaque \"struct yy_buffer_state\".\n\n\t- Documentation now stresses that you gain the benefits of removing\n\t  backing-up states only if you remove *all* of them.\n\n\t- Documentation now points out that traditional lex allows you\n\t  to put the action on a separate line from the rule pattern if\n\t  the pattern has trailing whitespace (ugh!), but flex doesn't\n\t  support this.\n\n\t- A broken example in documentation of the difference between\n\t  inclusive and exclusive start conditions is now fixed.\n\n\t- Usage (-h) report now goes to stdout.\n\n\t- Version (-V) info now goes to stdout.\n\n\t- More #ifdef chud has been added to the parser in attempt to\n\t  deal with bison's use of alloca().\n\n\t- \"make clean\" no longer deletes emacs backup files (*~).\n\n\t- Some memory leaks have been fixed.\n\n\t- A bug was fixed in which dynamically-expanded buffers were\n\t  reallocated a couple of bytes too small.\n\n\t- A bug was fixed which could cause flex to read and write beyond\n\t  the end of the input buffer.\n\n\t- -S will not be going away.\n\n\nChanges between release 2.4.7 (03Aug94) and release 2.4.6:\n\n\t- Fixed serious bug in reading multiple files.\n\n\t- Fixed bug in scanning NUL's.\n\n\t- Fixed bug in input() returning 8-bit characters.\n\n\t- Fixed bug in matching text with embedded NUL's when\n\t  using %array or lex compatibility.\n\n\t- Fixed multiple invocations of YY_USER_ACTION when using '|'\n\t  continuation action.\n\n\t- Minor prototyping fixes.\n\nChanges between release 2.4.6 (04Jan94) and release 2.4.5:\n\n\t- Linking with -lfl no longer required if your program includes\n\t  its own yywrap() and main() functions.  (This change will cause\n\t  problems if you have a non-ANSI compiler on a system for which\n\t  sizeof(int) != sizeof(void*) or sizeof(int) != sizeof(size_t).)\n\n\t- The use of 'extern \"C++\"' in FlexLexer.h has been modified to\n\t  get around an incompatibility with g++'s header files.\n\nChanges between release 2.4.5 (11Dec93) and release 2.4.4:\n\n\t- Fixed bug breaking C++ scanners that use REJECT or variable\n\t  trailing context.\n\n\t- Fixed serious input problem for interactive scanners on\n\t  systems for which char is unsigned.\n\n\t- Fixed bug in incorrectly treating '$' operator as variable\n\t  trailing context.\n\n\t- Fixed bug in -CF table representation that could lead to\n\t  corrupt tables.\n\n\t- Fixed fairly benign memory leak.\n\n\t- Added `extern \"C++\"' wrapper to FlexLexer.h header.  This\n\t  should overcome the g++ 2.5.X problems mentioned in the\n\t  NEWS for release 2.4.3.\n\n\t- Changed #include of FlexLexer.h to use <> instead of \"\".\n\n\t- Added feature to control whether the scanner attempts to\n\t  refill the input buffer once it's exhausted.  This feature\n\t  will be documented in the 2.5 release.\n\n\nChanges between release 2.4.4 (07Dec93) and release 2.4.3:\n\n\t- Fixed two serious bugs in scanning 8-bit characters.\n\n\t- Fixed bug in YY_USER_ACTION that caused it to be executed\n\t  inappropriately (on the scanner's own internal actions, and\n\t  with incorrect yytext/yyleng values).\n\n\t- Fixed bug in pointing yyin at a new file and resuming scanning.\n\n\t- Portability fix regarding min/max/abs macros conflicting with\n\t  function definitions in standard header files.\n\n\t- Added a virtual LexerError() method to the C++ yyFlexLexer class\n\t  for reporting error messages instead of always using cerr.\n\n\t- Added warning in flexdoc that the C++ scanning class is presently\n\t  experimental and subject to considerable change between major\n\t  releases.\n\n\nChanges between release 2.4.3 (03Dec93) and release 2.4.2:\n\n\t- Fixed bug causing fatal scanner messages to fail to print.\n\n\t- Fixed things so FlexLexer.h can be included in other C++\n\t  sources.  One side-effect of this change is that -+ and -CF\n\t  are now incompatible.\n\n\t- libfl.a now supplies private versions of the the <string.h>/\n\t  <strings.h> string routines needed by flex and the scanners\n\t  it generates, to enhance portability to some BSD systems.\n\n\t- More robust solution to 2.4.2's flexfatal() bug fix.\n\n\t- Added ranlib of installed libfl.a.\n\n\t- Some lint tweaks.\n\n\t- NOTE: problems have been encountered attempting to build flex\n\t  C++ scanners using g++ version 2.5.X.  The problem is due to an\n\t  unfortunate heuristic in g++ 2.5.X that attempts to discern between\n\t  C and C++ headers.  Because FlexLexer.h is installed (by default)\n\t  in /usr/local/include and not /usr/local/lib/g++-include, g++ 2.5.X\n\t  decides that it's a C header :-(.  So if you have problems, install\n\t  the header in /usr/local/lib/g++-include instead.\n\n\nChanges between release 2.4.2 (01Dec93) and release 2.4.1:\n\n\t- Fixed bug in libfl.a referring to non-existent \"flexfatal\" function.\n\n\t- Modified to produce both compress'd and gzip'd tar files for\n\t  distributions (you probably don't care about this change!).\n\n\nChanges between release 2.4.1 (30Nov93) and release 2.3.8:\n\n\t- The new '-+' flag instructs flex to generate a C++ scanner class\n\t  (thanks to Kent Williams).  flex writes an implementation of the\n\t  class defined in FlexLexer.h to lex.yy.cc.  You may include\n\t  multiple scanner classes in your program using the -P flag.  Note\n\t  that the scanner class also provides a mechanism for creating\n\t  reentrant scanners.  The scanner class uses C++ streams for I/O\n\t  instead of FILE*'s (thanks to Tom Epperly).  If the flex executable's\n\t  name ends in '+' then the '-+' flag is automatically on, so creating\n\t  a symlink or copy of \"flex\" to \"flex++\" results in a version of\n\t  flex that can be used exclusively for C++ scanners.\n\n\t  Note that without the '-+' flag, flex-generated scanners can still\n\t  be compiled using C++ compilers, though they use FILE*'s for I/O\n\t  instead of streams.\n\n\t  See the \"GENERATING C++ SCANNERS\" section of flexdoc for details.\n\n\t- The new '-l' flag turns on maximum AT&T lex compatibility.  In\n\t  particular, -l includes support for \"yylineno\" and makes yytext\n\t  be an array instead of a pointer.  It does not, however, do away\n\t  with all incompatibilities.  See the \"INCOMPATIBILITIES WITH LEX\n\t  AND POSIX\" section of flexdoc for details.\n\n\t- The new '-P' option specifies a prefix to use other than \"yy\"\n\t  for the scanner's globally-visible variables, and for the\n\t  \"lex.yy.c\" filename.  Using -P you can link together multiple\n\t  flex scanners in the same executable.\n\n\t- The distribution includes a \"texinfo\" version of flexdoc.1,\n\t  contributed by Roland Pesch (thanks also to Marq Kole, who\n\t  contributed another version).  It has not been brought up to\n\t  date, but reflects version 2.3.  See MISC/flex.texinfo.\n\n\t  The flex distribution will soon include G.T. Nicol's flex\n\t  manual; he is presently bringing it up-to-date for version 2.4.\n\n\t- yywrap() is now a function, and you now *must* link flex scanners\n\t  with libfl.a.\n\n\t- Site-configuration is now done via an autoconf-generated\n\t  \"configure\" script contributed by Francois Pinard.\n\n\t- Scanners now use fread() (or getc(), if interactive) and not\n\t  read() for input.  A new \"table compression\" option, -Cr,\n\t  overrides this change and causes the scanner to use read()\n\t  (because read() is a bit faster than fread()).  -f and -F\n\t  are now equivalent to -Cfr and -CFr; i.e., they imply the\n\t  -Cr option.\n\n\t- In the blessed name of POSIX compliance, flex supports \"%array\"\n\t  and \"%pointer\" directives in the definitions (first) section of\n\t  the scanner specification.  The former specifies that yytext\n\t  should be an array (of size YYLMAX), the latter, that it should\n\t  be a pointer.  The array version of yytext is universally slower\n\t  than the pointer version, but has the advantage that its contents\n\t  remain unmodified across calls to input() and unput() (the pointer\n\t  version of yytext is, still, trashed by such calls).\n\n\t  \"%array\" cannot be used with the '-+' C++ scanner class option.\n\n\t- The new '-Ca' option directs flex to trade off memory for\n\t  natural alignment when generating a scanner's tables.  In\n\t  particular, table entries that would otherwise be \"short\"\n\t  become \"long\".\n\n\t- The new '-h' option produces a summary of the flex flags.\n\n\t- The new '-V' option reports the flex version number and exits.\n\n\t- The new scanner macro YY_START returns an integer value\n\t  corresponding to the current start condition.  You can return\n\t  to that start condition by passing the value to a subsequent\n\t  \"BEGIN\" action.  You also can implement \"start condition stacks\"\n\t  by storing the values in an integer stack.\n\n\t- You can now redefine macros such as YY_INPUT by just #define'ing\n\t  them to some other value in the first section of the flex input;\n\t  no need to first #undef them.\n\n\t- flex now generates warnings for rules that can't be matched.\n\t  These warnings can be turned off using the new '-w' flag.  If\n\t  your scanner uses REJECT then you will not get these warnings.\n\n\t- If you specify the '-s' flag but the default rule can be matched,\n\t  flex now generates a warning.\n\n\t- \"yyleng\" is now a global, and may be modified by the user (though\n\t  doing so and then using yymore() will yield weird results).\n\n\t- Name definitions in the first section of a scanner specification\n\t  can now include a leading '^' or trailing '$' operator.  In this\n\t  case, the definition is *not* pushed back inside of parentheses.\n\n\t- Scanners with compressed tables are now \"interactive\" (-I option)\n\t  by default.  You can suppress this attribute (which makes them\n\t  run slightly slower) using the new '-B' flag.\n\n\t- Flex now generates 8-bit scanners by default, unless you use the\n\t  -Cf or -CF compression options (-Cfe  and -CFe result in 8-bit\n\t  scanners).  You can force it to generate a 7-bit scanner using\n\t  the new '-7' flag.  You can build flex to generate 8-bit scanners\n\t  for -Cf and -CF, too, by adding -DDEFAULT_CSIZE=256 to CFLAGS\n\t  in the Makefile.\n\n\t- You no longer need to call the scanner routine yyrestart() to\n\t  inform the scanner that you have switched to a new file after\n\t  having seen an EOF on the current input file.  Instead, just\n\t  point yyin at the new file and continue scanning.\n\n\t- You no longer need to invoke YY_NEW_FILE in an <<EOF>> action\n\t  to indicate you wish to continue scanning.  Simply point yyin\n\t  at a new file.\n\n\t- A leading '#' no longer introduces a comment in a flex input.\n\n\t- flex no longer considers formfeed ('\\f') a whitespace character.\n\n\t- %t, I'm happy to report, has been nuked.\n\n\t- The '-p' option may be given twice ('-pp') to instruct flex to\n\t  report minor performance problems as well as major ones.\n\n\t- The '-v' verbose output no longer includes start/finish time\n\t  information.\n\n\t- Newlines in flex inputs can optionally include leading or\n\t  trailing carriage-returns ('\\r'), in support of several PC/Mac\n\t  run-time libraries that automatically include these.\n\n\t- A start condition of the form \"<*>\" makes the following rule\n\t  active in every start condition, whether exclusive or inclusive.\n\n\t- The following items have been corrected in the flex documentation:\n\n\t\t- '-C' table compression options *are* cumulative.\n\n\t\t- You may modify yytext but not lengthen it by appending\n\t\t  characters to the end.  Modifying its final character\n\t\t  will affect '^' anchoring for the next rule matched\n\t\t  if the character is changed to or from a newline.\n\n\t\t- The term \"backtracking\" has been renamed \"backing up\",\n\t\t  since it is a one-time repositioning and not a repeated\n\t\t  search.  What used to be the \"lex.backtrack\" file is now\n\t\t  \"lex.backup\".\n\n\t\t- Unindented \"/* ... */\" comments are allowed in the first\n\t\t  flex input section, but not in the second.\n\n\t\t- yyless() can only be used in the flex input source, not\n\t\t  externally.\n\n\t\t- You can use \"yyrestart(yyin)\" to throw away the\n\t\t  current contents of the input buffer.\n\n\t\t- To write high-speed scanners, attempt to match as much\n\t\t  text as possible with each rule.  See MISC/fastwc/README\n\t\t  for more information.\n\n\t\t- Using the beginning-of-line operator ('^') is fairly\n\t\t  cheap.  Using unput() is expensive.  Using yyless() is\n\t\t  cheap.\n\n\t\t- An example of scanning strings with embedded escape\n\t\t  sequences has been added.\n\n\t\t- The example of backing-up in flexdoc was erroneous; it\n\t\t  has been corrected.\n\n\t- A flex scanner's internal buffer now dynamically grows if needed\n\t  to match large tokens.  Note that growing the buffer presently\n\t  requires rescanning the (large) token, so consuming a lot of\n\t  text this way is a slow process.  Also note that presently the\n\t  buffer does *not* grow if you unput() more text than can fit\n\t  into the buffer.\n\n\t- The MISC/ directory has been reorganized; see MISC/README for\n\t  details.\n\n\t- yyless() can now be used in the third (user action) section\n\t  of a scanner specification, thanks to Ceriel Jacobs.  yyless()\n\t  remains a macro and cannot be used outside of the scanner source.\n\n\t- The skeleton file is no longer opened at run-time, but instead\n\t  compiled into a large string array (thanks to John Gilmore and\n\t  friends at Cygnus).  You can still use the -S flag to point flex\n\t  at a different skeleton file.\n\n\t- flex no longer uses a temporary file to store the scanner's\n\t  actions.\n\n\t- A number of changes have been made to decrease porting headaches.\n\t  In particular, flex no longer uses memset() or ctime(), and\n\t  provides a single simple mechanism for dealing with C compilers\n\t  that still define malloc() as returning char* instead of void*.\n\n\t- Flex now detects if the scanner specification requires the -8 flag\n\t  but the flag was not given or on by default.\n\n\t- A number of table-expansion fencepost bugs have been fixed,\n\t  making flex more robust for generating large scanners.\n\n\t- flex more consistently identifies the location of errors in\n\t  its input.\n\n\t- YY_USER_ACTION is now invoked only for \"real\" actions, not for\n\t  internal actions used by the scanner for things like filling\n\t  the buffer or handling EOF.\n\n\t- The rule \"[^]]\" now matches any character other than a ']';\n\t  formerly it matched any character at all followed by a ']'.\n\t  This change was made for compatibility with AT&T lex.\n\n\t- A large number of miscellaneous bugs have been found and fixed\n\t  thanks to Gerhard Wilhelms.\n\n\t- The source code has been heavily reformatted, making patches\n\t  relative to previous flex releases no longer accurate.\n\n\nChanges between 2.3 Patch #8 (21Feb93) and 2.3 Patch #7:\n\n\t- Fixed bugs in dynamic memory allocation leading to grievous\n\t  fencepost problems when generating large scanners.\n\t- Fixed bug causing infinite loops on character classes with 8-bit\n\t  characters in them.\n\t- Fixed bug in matching repetitions with a lower bound of 0.\n\t- Fixed bug in scanning NUL characters using an \"interactive\" scanner.\n\t- Fixed bug in using yymore() at the end of a file.\n\t- Fixed bug in misrecognizing rules with variable trailing context.\n\t- Fixed bug compiling flex on Suns using gcc 2.\n\t- Fixed bug in not recognizing that input files with the character\n\t  ASCII 128 in them require the -8 flag.\n\t- Fixed bug that could cause an infinite loop writing out\n\t  error messages.\n\t- Fixed bug in not recognizing old-style lex % declarations if\n\t  followed by a tab instead of a space.\n\t- Fixed potential crash when flex terminated early (usually due\n\t  to a bad flag) and the -v flag had been given.\n\t- Added some missing declarations of void functions.\n\t- Changed to only use '\\a' for __STDC__ compilers.\n\t- Updated mailing addresses.\n\n\nChanges between 2.3 Patch #7 (28Mar91) and 2.3 Patch #6:\n\n\t- Fixed out-of-bounds array access that caused bad tables\n\t  to be produced on machines where the bad reference happened\n\t  to yield a 1.  This caused problems installing or running\n\t  flex on some Suns, in particular.\n\n\nChanges between 2.3 Patch #6 (29Aug90) and 2.3 Patch #5:\n\n\t- Fixed a serious bug in yymore() which basically made it\n\t  completely broken.  Thanks goes to Jean Christophe of\n\t  the Nethack development team for finding the problem\n\t  and passing along the fix.\n\n\nChanges between 2.3 Patch #5 (16Aug90) and 2.3 Patch #4:\n\n\t- An up-to-date version of initscan.c so \"make test\" will\n\t  work after applying the previous patches\n\n\nChanges between 2.3 Patch #4 (14Aug90) and 2.3 Patch #3:\n\n\t- Fixed bug in hexadecimal escapes which allowed only digits,\n\t  not letters, in escapes\n\t- Fixed bug in previous \"Changes\" file!\n\n\nChanges between 2.3 Patch #3 (03Aug90) and 2.3 Patch #2:\n\n\t- Correction to patch #2 for gcc compilation; thanks goes to\n\t  Paul Eggert for catching this.\n\n\nChanges between 2.3 Patch #2 (02Aug90) and original 2.3 release:\n\n\t- Fixed (hopefully) headaches involving declaring malloc()\n\t  and free() for gcc, which defines __STDC__ but (often) doesn't\n\t  come with the standard include files such as <stdlib.h>.\n\t  Reordered #ifdef maze in the scanner skeleton in the hope of\n\t  getting the declarations right for cfront and g++, too.\n\n\t- Note that this patch supersedes patch #1 for release 2.3,\n\t  which was never announced but was available briefly for\n\t  anonymous ftp.\n\n\nChanges between 2.3 (full) release of 28Jun90 and 2.2 (alpha) release:\n\nUser-visible:\n\n\t- A lone <<EOF>> rule (that is, one which is not qualified with\n\t  a list of start conditions) now specifies the EOF action for\n\t  *all* start conditions which haven't already had <<EOF>> actions\n\t  given.  To specify an end-of-file action for just the initial\n\t  state, use <INITIAL><<EOF>>.\n\n\t- -d debug output is now contigent on the global yy_flex_debug\n\t  being set to a non-zero value, which it is by default.\n\n\t- A new macro, YY_USER_INIT, is provided for the user to specify\n\t  initialization action to be taken on the first call to the\n\t  scanner.  This action is done before the scanner does its\n\t  own initialization.\n\n\t- yy_new_buffer() has been added as an alias for yy_create_buffer()\n\n\t- Comments beginning with '#' and extending to the end of the line\n\t  now work, but have been deprecated (in anticipation of making\n\t  flex recognize #line directives).\n\n\t- The funky restrictions on when semi-colons could follow the\n\t  YY_NEW_FILE and yyless macros have been removed.  They now\n\t  behave identically to functions.\n\n\t- A bug in the sample redefinition of YY_INPUT in the documentation\n\t  has been corrected.\n\n\t- A bug in the sample simple tokener in the documentation has\n\t  been corrected.\n\n\t- The documentation on the incompatibilities between flex and\n\t  lex has been reordered so that the discussion of yylineno\n\t  and input() come first, as it's anticipated that these will\n\t  be the most common source of headaches.\n\n\nThings which didn't used to be documented but now are:\n\n\t- flex interprets \"^foo|bar\" differently from lex.  flex interprets\n\t  it as \"match either a 'foo' or a 'bar', providing it comes at the\n\t  beginning of a line\", whereas lex interprets it as \"match either\n\t  a 'foo' at the beginning of a line, or a 'bar' anywhere\".\n\n\t- flex initializes the global \"yyin\" on the first call to the\n\t  scanner, while lex initializes it at compile-time.\n\n\t- yy_switch_to_buffer() can be used in the yywrap() macro/routine.\n\n\t- flex scanners do not use stdio for their input, and hence when\n\t  writing an interactive scanner one must explicitly call fflush()\n\t  after writing out a prompt.\n\n\t- flex scanner can be made reentrant (after a fashion) by using\n\t  \"yyrestart( yyin );\".  This is useful for interactive scanners\n\t  which have interrupt handlers that long-jump out of the scanner.\n\n\t- a defense of why yylineno is not supported is included, along\n\t  with a suggestion on how to convert scanners which rely on it.\n\n\nOther changes:\n\n\t- Prototypes and proper declarations of void routines have\n\t  been added to the flex source code, courtesy of Kevin B. Kenny.\n\n\t- Routines dealing with memory allocation now use void* pointers\n\t  instead of char* - see Makefile for porting implications.\n\n\t- Error-checking is now done when flex closes a file.\n\n\t- Various lint tweaks were added to reduce the number of gripes.\n\n\t- Makefile has been further parameterized to aid in porting.\n\n\t- Support for SCO Unix added.\n\n\t- Flex now sports the latest & greatest UC copyright notice\n\t  (which is only slightly different from the previous one).\n\n\t- A note has been added to flexdoc.1 mentioning work in progress\n\t  on modifying flex to generate straight C code rather than a\n\t  table-driven automaton, with an email address of whom to contact\n\t  if you are working along similar lines.\n\n\nChanges between 2.2 Patch #3 (30Mar90) and 2.2 Patch #2:\n\n\t- fixed bug which caused -I scanners to bomb\n\n\nChanges between 2.2 Patch #2 (27Mar90) and 2.2 Patch #1:\n\n\t- fixed bug writing past end of input buffer in yyunput()\n\t- fixed bug detecting NUL's at the end of a buffer\n\n\nChanges between 2.2 Patch #1 (23Mar90) and 2.2 (alpha) release:\n\n\t- Makefile fixes: definition of MAKE variable for systems\n\t  which don't have it; installation of flexdoc.1 along with\n\t  flex.1; fixed two bugs which could cause \"bigtest\" to fail.\n\n\t- flex.skel fix for compiling with g++.\n\n\t- README and flexdoc.1 no longer list an out-of-date BITNET address\n\t  for contacting me.\n\n\t- minor typos and formatting changes to flex.1 and flexdoc.1.\n\n\nChanges between 2.2 (alpha) release of March '90 and previous release:\n\nUser-visible:\n\n\t- Full user documentation now available.\n\n\t- Support for 8-bit scanners.\n\n\t- Scanners now accept NUL's.\n\n\t- A facility has been added for dealing with multiple\n\t  input buffers.\n\n\t- Two manual entries now.  One which fully describes flex\n\t  (rather than just its differences from lex), and the\n\t  other for quick(er) reference.\n\n\t- A number of changes to bring flex closer into compliance\n\t  with the latest POSIX lex draft:\n\n\t\t%t support\n\t\tflex now accepts multiple input files and concatenates\n\t\t    them together to form its input\n\t\tprevious -c (compress) flag renamed -C\n\t\tdo-nothing -c and -n flags added\n\t\tAny indented code or code within %{}'s in section 2 is\n\t\t    now copied to the output\n\n\t- yyleng is now a bona fide global integer.\n\n\t- -d debug information now gives the line number of the\n\t  matched rule instead of which number rule it was from\n\t  the beginning of the file.\n\n\t- -v output now includes a summary of the flags used to generate\n\t  the scanner.\n\n\t- unput() and yyrestart() are now globally callable.\n\n\t- yyrestart() no longer closes the previous value of yyin.\n\n\t- C++ support; generated scanners can be compiled with C++ compiler.\n\n\t- Primitive -lfl library added, containing default main()\n\t  which calls yylex().  A number of routines currently living\n\t  in the scanner skeleton will probably migrate to here\n\t  in the future (in particular, yywrap() will probably cease\n\t  to be a macro and instead be a function in the -lfl library).\n\n\t- Hexadecimal (\\x) escape sequences added.\n\n\t- Support for MS-DOS, VMS, and Turbo-C integrated.\n\n\t- The %used/%unused operators have been deprecated.  They\n\t  may go away soon.\n\n\nOther changes:\n\n\t- Makefile enhanced for easier testing and installation.\n\t- The parser has been tweaked to detect some erroneous\n\t  constructions which previously were missed.\n\t- Scanner input buffer overflow is now detected.\n\t- Bugs with missing \"const\" declarations fixed.\n\t- Out-of-date Minix/Atari patches provided.\n\t- Scanners no longer require printf() unless FLEX_DEBUG is being used.\n\t- A subtle input() bug has been fixed.\n\t- Line numbers for \"continued action\" rules (those following\n\t  the special '|' action) are now correct.\n\t- unput() bug fixed; had been causing problems porting flex to VMS.\n\t- yymore() handling rewritten to fix bug with interaction\n\t  between yymore() and trailing context.\n\t- EOF in actions now generates an error message.\n\t- Bug involving -CFe and generating equivalence classes fixed.\n\t- Bug which made -CF be treated as -Cf fixed.\n\t- Support for SysV tmpnam() added.\n\t- Unused #define's for scanner no longer generated.\n\t- Error messages which are associated with a particular input\n\t  line are now all identified with their input line in standard\n\t  format.\n\t- % directives which are valid to lex but not to flex are\n\t  now ignored instead of generating warnings.\n\t- -DSYS_V flag can now also be specified -DUSG for System V\n\t  compilation.\n\n\nChanges between 2.1 beta-test release of June '89 and previous release:\n\nUser-visible:\n\n\t- -p flag generates a performance report to stderr.  The report\n\t  consists of comments regarding features of the scanner rules\n\t  which result in slower scanners.\n\n\t- -b flag generates backtracking information to lex.backtrack.\n\t  This is a list of scanner states which require backtracking\n\t  and the characters on which they do so.  By adding rules\n\t  one can remove backtracking states.  If all backtracking states\n\t  are eliminated, the generated scanner will run faster.\n\t  Backtracking is not yet documented in the manual entry.\n\n\t- Variable trailing context now works, i.e., one can have\n\t  rules like \"(foo)*/[ \\t]*bletch\".  Some trailing context\n\t  patterns still cannot be properly matched and generate\n\t  error messages.  These are patterns where the ending of the\n\t  first part of the rule matches the beginning of the second\n\t  part, such as \"zx*/xy*\", where the 'x*' matches the 'x' at\n\t  the beginning of the trailing context.  Lex won't get these\n\t  patterns right either.\n\n\t- Faster scanners.\n\n\t- End-of-file rules.  The special rule \"<<EOF>>\" indicates\n\t  actions which are to be taken when an end-of-file is\n\t  encountered and yywrap() returns non-zero (i.e., indicates\n\t  no further files to process).  See manual entry for example.\n\n\t- The -r (reject used) flag is gone.  flex now scans the input\n\t  for occurrences of the string \"REJECT\" to determine if the\n\t  action is needed.  It tries to be intelligent about this but\n\t  can be fooled.  One can force the presence or absence of\n\t  REJECT by adding a line in the first section of the form\n\t  \"%used REJECT\" or \"%unused REJECT\".\n\n\t- yymore() has been implemented.  Similarly to REJECT, flex\n\t  detects the use of yymore(), which can be overridden using\n\t  \"%used\" or \"%unused\".\n\n\t- Patterns like \"x{0,3}\" now work (i.e., with lower-limit == 0).\n\n\t- Removed '\\^x' for ctrl-x misfeature.\n\n\t- Added '\\a' and '\\v' escape sequences.\n\n\t- \\<digits> now works for octal escape sequences; previously\n\t  \\0<digits> was required.\n\n\t- Better error reporting; line numbers are associated with rules.\n\n\t- yyleng is a macro; it cannot be accessed outside of the\n\t  scanner source file.\n\n\t- yytext and yyleng should not be modified within a flex action.\n\n\t- Generated scanners #define the name FLEX_SCANNER.\n\n\t- Rules are internally separated by YY_BREAK in lex.yy.c rather\n\t  than break, to allow redefinition.\n\n\t- The macro YY_USER_ACTION can be redefined to provide an action\n\t  which is always executed prior to the matched rule's action.\n\t\n\t- yyrestart() is a new action which can be used to restart\n\t  the scanner after it has seen an end-of-file (a \"real\" one,\n\t  that is, one for which yywrap() returned non-zero).  It takes\n\t  a FILE* argument indicating a new file to scan and sets\n\t  things up so that a subsequent call to yylex() will start\n\t  scanning that file.\n\n\t- Internal scanner names all preceded by \"yy_\"\n\n\t- lex.yy.c is deleted if errors are encountered during processing.\n\n\t- Comments may be put in the first section of the input by preceding\n\t  them with '#'.\n\n\n\nOther changes:\n\n\t- Some portability-related bugs fixed, in particular for machines\n\t  with unsigned characters or sizeof( int* ) != sizeof( int ).\n\t  Also, tweaks for VMS and Microsoft C (MS-DOS), and identifiers all\n\t  trimmed to be 31 or fewer characters.  Shortened file names\n\t  for dinosaur OS's.  Checks for allocating > 64K memory\n\t  on 16 bit'ers.  Amiga tweaks.  Compiles using gcc on a Sun-3.\n\t- Compressed and fast scanner skeletons merged.\n\t- Skeleton header files done away with.\n\t- Generated scanner uses prototypes and \"const\" for __STDC__.\n\t- -DSV flag is now -DSYS_V for System V compilation.\n\t- Removed all references to FTL language.\n\t- Software now covered by BSD Copyright.\n\t- flex will replace lex in subsequent BSD releases.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.9111328125,
          "content": "[![Build Status](https://github.com/westes/flex/actions/workflows/build.yml/badge.svg)](https://github.com/westes/flex/actions/workflows/build.yml)\n\n\nThis is flex, the fast lexical analyzer generator.\n\nflex is a tool for generating scanners: programs which recognize\nlexical patterns in text.\n\nThe flex codebase is kept in\n[Git on GitHub.](https://github.com/westes/flex) Source releases of flex with some intermediate files already built can be found on [the github releases page.](https://github.com/westes/flex/releases)\n\nUse GitHub's [issues](https://github.com/westes/flex/issues) and\n[pull request](https://github.com/westes/flex) features to file bugs\nand submit patches.\n\nThere are several mailing lists available as well:\n\n* flex-announce@lists.sourceforge.net - where posts will be made\n  announcing new releases of flex.\n* flex-help@lists.sourceforge.net - where you can post questions about\n  using flex\n* flex-devel@lists.sourceforge.net - where you can discuss development\n  of flex itself\n\nFind information on subscribing to the mailing lists or search in the\narchive at: https://sourceforge.net/p/flex/mailman/\nNote: Posting is only allowed from addresses that are subscribed to\nthe lists.\n\nThe flex distribution contains the following files which may be of\ninterest:\n\n* README.md - This file.\n* NEWS - current version number and list of user-visible changes.\n* INSTALL.md - basic installation information.\n* ABOUT-NLS - description of internationalization support in flex.\n* COPYING - flex's copyright and license.\n* doc/ - user documentation.\n* examples/ - containing examples of some possible flex scanners and a\n              few other things. See the file examples/README for more\n              details.\n* tests/ - regression tests. See tests/README for details.\n* po/ - internationalization support files.\n\n---\n\nThis file is part of flex.\n\nThis code is derived from software contributed to Berkeley by\nVern Paxson.\n\nThe United States Government has rights in this work pursuant\nto contract no. DE-AC03-76SF00098 between the United States\nDepartment of Energy and the University of California.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nNeither the name of the University nor the names of its contributors\nmay be used to endorse or promote products derived from this software\nwithout specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.\n"
        },
        {
          "name": "THANKS",
          "type": "blob",
          "size": 3.0693359375,
          "content": "Vern had the following things to say:\n\nMany thanks to the 2.5 beta-testers for finding bugs and helping test and\nincrease portability: Stan Adermann, Scott David Daniels, Charles Elliott,\nJoe Gayda, Chris Meier, James Nordby, Terrence O'Kane, Karsten Pahnke,\nFrancois Pinard, Pat Rankin, Andreas Scherer, Marc Wiese, Nathan Zelle.\n\nThanks to the many flex beta-testers, feedbackers, and contributors,\nespecially Francois Pinard, Casey Leedom, Robert Abramovitz, Stan\nAdermann, Terry Allen, David Barker-Plummer, John Basrai, Neal Becker,\nNelson H.F. Beebe, benson@odi.com, Karl Berry, Peter A. Bigot, Simon\nBlanchard, Keith Bostic, Frederic Brehm, Ian Brockbank, Kin Cho, Nick\nChristopher, Brian Clapper, J.T. Conklin, Jason Coughlin, Bill Cox,\nNick Cropper, Dave Curtis, Scott David Daniels, Chris G. Demetriou,\nTheo Deraadt, Mike Donahue, Chuck Doucette, Tom Epperly, Leo Eskin,\nChris Faylor, Chris Flatters, Jon Forrest, Jeffrey Friedl, Joe Gayda,\nKaveh R. Ghazi, Wolfgang Glunz, Eric Goldman, Christopher M. Gould,\nUlrich Grepel, Peer Griebel, Jan Hajic, Charles Hemphill, NORO Hideo,\nJarkko Hietaniemi, Scott Hofmann, Jeff Honig, Dana Hudes, Eric Hughes,\nJohn Interrante, Ceriel Jacobs, Michal Jaegermann, Sakari Jalovaara,\nJeffrey R. Jones, Henry Juengst, Klaus Kaempf, Jonathan I. Kamens,\nTerrence O Kane, Amir Katz, ken@ken.hilco.com, Kevin B. Kenny, Steve\nKirsch, Winfried Koenig, Marq Kole, Ronald Lamprecht, Greg Lee, Rohan\nLenard, Craig Leres, John Levine, Steve Liddle, David Loffredo, Mike\nLong, Mohamed el Lozy, Brian Madsen, Malte, Joe Marshall, Bengt\nMartensson, Chris Metcalf, Luke Mewburn, Jim Meyering, R. Alexander\nMilowski, Erik Naggum, G.T. Nicol, Landon Noll, James Nordby, Marc\nNozell, Richard Ohnemus, Karsten Pahnke, Sven Panne, Roland Pesch,\nWalter Pelissero, Gaumond Pierre, Esmond Pitt, Jef Poskanzer, Joe\nRahmeh, Jarmo Raiha, Frederic Raimbault, Pat Rankin, Rick Richardson,\nKevin Rodgers, Kai Uwe Rommel, Jim Roskind, Alberto Santini, Andreas\nScherer, Darrell Schiebel, Raf Schietekat, Doug Schmidt, Philippe\nSchnoebelen, Andreas Schwab, Larry Schwimmer, Alex Siegel, Eckehard\nStolz, Jan-Erik Strvmquist, Mike Stump, Paul Stuart, Dave Tallman, Ian\nLance Taylor, Chris Thewalt, Richard M. Timoney, Jodi Tsai, Paul\nTuinenga, Gary Weik, Frank Whaley, Gerhard Wilhelms, Kent Williams,\nKen Yap, Ron Zellar, Nathan Zelle, David Zuhn, and those whose names\nhave slipped my marginal mail-archiving skills but whose contributions\nare appreciated all the same.\n\nThanks to Keith Bostic, Jon Forrest, Noah Friedman,\nJohn Gilmore, Craig Leres, John Levine, Bob Mulcahy, G.T.\nNicol, Francois Pinard, Rich Salz, and Richard Stallman for help with various\ndistribution headaches.\n\nThanks to Esmond Pitt and Earle Horton for 8-bit character support; to\nBenson Margulies and Fred Burke for C++ support; to Kent Williams and Tom\nEpperly for C++ class support; to Ove Ewerlid for support of NUL's; and to\nEric Hughes for support of multiple buffers.\n\nThis work was primarily done when I was with the Real Time Systems Group\nat the Lawrence Berkeley Laboratory in Berkeley, CA.  Many thanks to all there\nfor the support I received.\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.2939453125,
          "content": "Things to be worked on:\n\n* Tests for %option user-init, %option pre-action, %option post-action.\n\n* integrate examples directory into tests so that normal testing\n  proves the examples are up to date.\n\n* Do away with any need for -lfl by generating a default yywrap\n  if the user doesn't specify one.\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 1.7568359375,
          "content": "#!/bin/sh\n\n#  This file is part of flex.\n\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions\n#  are met:\n\n#  1. Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n#  2. Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n\n#  Neither the name of the University nor the names of its contributors\n#  may be used to endorse or promote products derived from this software\n#  without specific prior written permission.\n\n#  THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR\n#  IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED\n#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n#  PURPOSE.\n\n# If you see no configure script, then run ./autogen.sh to create it\n# and proceed with the \"normal\" build procedures.\n\n# use LIBTOOLIZE, if set\nif test \"x$LIBTOOLIZE\" = \"x\"; then\n   for ac_prog in libtoolize glibtoolize; do\n      if $ac_prog --version >/dev/null 2>&1; then\n         LIBTOOLIZE=$ac_prog\n         break\n      fi\n   done\nfi\n\n# test libtoolize\nif test \"x$LIBTOOLIZE\" = \"x\" || ! $LIBTOOLIZE --version >/dev/null; then\n   echo \"error: libtoolize not working, re-run with LIBTOOLIZE=/path/to/libtoolize\">&2\n   echo \"       LIBTOOLIZE is currently \\\"$LIBTOOLIZE\\\"\">&2\n   exit 1\nfi\n\n#if we pretend to have a ChangeLog, then automake is less\n#worried. (Don't worry, we *do* have a ChangeLog, we just need the\n#Makefile first.)\n\nif ! test -f ChangeLog; then\n   touch ChangeLog\nfi\n$LIBTOOLIZE --install --force\nautoreconf --install --force\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 8.6298828125,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\n# This file is part of flex.\n\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n\n# 1. Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n# notice, this list of conditions and the following disclaimer in the\n# documentation and/or other materials provided with the distribution.\n\n# Neither the name of the University nor the names of its contributors\n# may be used to endorse or promote products derived from this software\n# without specific prior written permission.\n\n# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR\n# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE.\n\n# autoconf requirements and initialization\n\ndnl We recommend builders to regenerate configure and auxiliary scripts with\ndnl exact versions of tools that generate flex release tarball, or latest\ndnl versions of tools for flex development. The minimum feature and version\ndnl requirements are provided for information only (no guarantee that the tools\ndnl will work and we may bump requirements with future code changes).\ndnl Uses AC_PATH_PROGS_FEATURE_CHECK. Requires autoconf-2.62 as minimum.\nAC_PREREQ([2.62])\nAC_INIT([the fast lexical analyser generator],[2.6.4],[flex-help@lists.sourceforge.net],[flex])\nAC_CONFIG_SRCDIR([src/scan.l])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_USE_SYSTEM_EXTENSIONS\ndnl \"LT_*\" macros and \"libtoolize --install\" require libtool-2.2 as minimum.\nLT_PREREQ([2.2])\nLT_INIT\ndnl Uses dist-lzip. Requires automake-1.11.3 as minimum.\nAM_INIT_AUTOMAKE([1.11.3 -Wno-portability foreign std-options dist-lzip parallel-tests subdir-objects])\nAC_CONFIG_HEADERS([src/config.h])\nAC_CONFIG_LIBOBJ_DIR([lib])\nAC_CONFIG_MACRO_DIR([m4])\nSHARED_VERSION_INFO=\"2:0:0\"\nAC_SUBST(SHARED_VERSION_INFO)\n\n# checks for programs\n\nAM_GNU_GETTEXT([external])\ndnl Try to pull in latest gettext infrastructure (\"po\" and \"m4\") files.\ndnl Unfortunately autoreconf as of 2.69 doesn't recognize\ndnl AM[_]GNU[_]GETTEXT_REQUIRE_VERSION so we provide AM[_]GNU[_]GETTEXT_VERSION\ndnl as fallback. (autopoint will ignore latter if former is specified.)\ndnl\ndnl Bugs in gettext before 0.14 prevent building flex with it.\ndnl FLEX_GNU_GETTEXT_REAL_REQUIRE_VERSION=0.14\nAM_GNU_GETTEXT_REQUIRE_VERSION([0.19.6])\nAM_GNU_GETTEXT_VERSION([0.19.6])\nAC_PROG_YACC\n  AC_MSG_CHECKING(whether $YACC is GNU Bison)\n  AS_IF([test -n \"$YACC\" && $YACC --version 2>&1 | $GREP \"GNU Bison\" >/dev/null],\n    [AC_MSG_RESULT(yes)\n  \tuse_gnu_bison=1],\n    [AC_MSG_RESULT(no)\n  \tAC_MSG_WARN($YACC does not appear to be GNU Bison; required for maintainers)\n  \tuse_gnu_bison=0\n  \tYACC=\"\\${top_srcdir}/build-aux/missing bison\"\n    ])\nAM_CONDITIONAL([HAVE_BISON], [test $use_gnu_bison -eq 1])\ndnl AC_PROG_LEX requires an argument in autoconf 2.70, but we cannot\ndnl specify it through AM_PROG_LEX until automake 1.17.\nAC_PROG_LEX([noyywrap])\nAM_PROG_LEX\nAC_PROG_CC\nAX_PROG_CC_FOR_BUILD\nAC_PROG_CXX\nAM_PROG_CC_C_O\nAC_PROG_LN_S\nAC_PROG_AWK\nAC_PROG_INSTALL\n\nAS_IF([test \"x${BUILD_OBJEXT-}\" = x],\n  [AS_IF([test \"$cross_compiling\" = no],\n    [BUILD_EXEEXT=\"$EXEEXT\"\n    BUILD_OBJEXT=\"$OBJEXT\"],\n    [BUILD_EXEEXT=\"${ac_cv_build_exeext-}\"\n    BUILD_OBJEXT=\"${ac_cv_build_objext-}\"])])\nAS_IF([test \"x${BUILD_OBJEXT-}\" = x && test \"x${enable_bootstrap-yes}\" = xyes],\n  [AC_MSG_ERROR([BUILD_OBJEXT is invalid; please regenerate 'configure' with a newer ax_prog_cc_for_build.m4 (serial 23 or later) or configure with '--disable-bootstrap'])])\n\npkgconfigdir=${libdir}/pkgconfig\nAC_SUBST(pkgconfigdir)\n\n# allow passing a variable `WARNINGFLAGS',\n#   either when invoking `configure', or when invoking `make'\n# default to something useful if GCC was detected\n\nAC_ARG_ENABLE([warnings],\n  [AS_HELP_STRING([--enable-warnings],\n                  [enable a bunch of compiler warning flags (defaults to GCC warning flags).])],\n  [AS_IF([test \"x$GCC\" = xyes],\n    [ : ${WARNINGFLAGS=\"-Wall -Wextra -Wmissing-prototypes -Wstrict-prototypes -Wnested-externs -Wold-style-definition -Wredundant-decls -Wconversion -Wno-unused-but-set-variable\"} ])])\n\nAC_SUBST([WARNINGFLAGS])\n\nAC_ARG_ENABLE([libfl],\n  [AS_HELP_STRING([--disable-libfl],\n                  [do not build -lfl runtime support library])],\n  [], [enable_libfl=yes])\nAM_CONDITIONAL([ENABLE_LIBFL], [test \"x$enable_libfl\" = xyes])\n\n# --disable-bootstrap is intended only to workaround problems with bootstrap\n# (e.g. when cross-compiling flex or when bootstrapping has bugs).\n# Ideally we should be able to bootstrap even when cross-compiling.\nAC_ARG_ENABLE([bootstrap],\n  [AS_HELP_STRING([--disable-bootstrap],\n                  [don't perform a bootstrap when building flex])],\n  [], [enable_bootstrap=yes])\nAM_CONDITIONAL([ENABLE_BOOTSTRAP], [test \"x$enable_bootstrap\" = xyes])\n\nAM_CONDITIONAL([CROSS], [test \"x$cross_compiling\" = xyes])\n\nAC_PATH_PROG([HELP2MAN], help2man, [\\${top_srcdir}/build-aux/missing help2man])\n  AS_IF([test \"$HELP2MAN\" = \"\\${top_srcdir}/build-aux/missing help2man\"],\n    AC_MSG_WARN(help2man: program not found: building man page will not work)\n  )\n\nAC_PATH_PROGS([TEXI2DVI], [gtexi2dvi texi2dvi], [\\${top_srcdir}/build-aux/missing texi2dvi])\n  AS_IF([test \"$TEXI2DVI\" = \"\\${top_srcdir}/build-aux/missing texi2dvi\"],\n    AC_MSG_WARN(texi2dvi: program not found: building pdf version of manual will not work)\n  )\n\n# Check for a m4 that supports -P\n\nAC_CACHE_CHECK([for m4 that supports -P], [ac_cv_path_M4],\n[AC_PATH_PROGS_FEATURE_CHECK([M4], [gm4 gnum4 m4],\n              [[m4out=`echo 'm''4_divnum' | $ac_path_M4 -P`]\n                [test \"x$m4out\" = x0 \\\n                && ac_cv_path_M4=$ac_path_M4 ac_path_M4_found=:]],\n              [AC_MSG_ERROR([could not find m4 that supports -P])])])\nAC_SUBST([M4], [$ac_cv_path_M4])\nAC_DEFINE_UNQUOTED([M4], [\"$M4\"], [Define to the m4 executable name.])\n\nAC_PATH_PROG([INDENT], indent)\n  AS_IF([test -n \"$INDENT\"], [\n    AC_MSG_CHECKING(whether $INDENT is GNU indent)\n    AS_IF([$INDENT --version 2>/dev/null | $GREP \"GNU indent\" >/dev/null],\n      [AC_MSG_RESULT(yes)],\n      [AC_MSG_RESULT(no)\n       AC_MSG_WARN($INDENT does not appear to be GNU indent; 'make indent' may not function properly)\n       INDENT=\"\\${top_srcdir}/build-aux/missing indent\"\n      ])\n    ])\n\n# checks for headers\n\nAC_CHECK_HEADERS([regex.h strings.h sys/wait.h unistd.h], [],\n  [AC_MSG_ERROR(required header not found on your system)])\n\nAC_CHECK_HEADERS([inttypes.h libintl.h limits.h locale.h malloc.h netinet/in.h])\n\n# checks for libraries\n\n# The test test-pthread uses libpthread, so we check for it here, but\n# all we need is the preprocessor symbol defined since we don't need\n# LIBS to include libpthread for building flex.\n\nLIBPTHREAD=''\nAC_CHECK_LIB(pthread, pthread_mutex_lock,\n   [AC_CHECK_HEADERS([pthread.h], [LIBPTHREAD=-lpthread],\n      [AC_MSG_WARN([pthread tests will be skipped])])],\n   [AC_MSG_WARN([pthread tests will be skipped])])\nAC_SUBST([LIBPTHREAD])\n\nAC_CHECK_LIB(m, log10)\n\n# Checks for typedefs, structures, and compiler characteristics.\n\nAC_HEADER_STDBOOL\nAC_C_CONST\nAC_TYPE_SIZE_T\n\n# Checks for library functions.\n\nAC_FUNC_ALLOCA\nAC_FUNC_FORK\ndnl Autoconf bug: AC_FUNC_MALLOC and AC_FUNC_REALLOC might not warn of cross\ndnl compilation. Workaround this.\nAC_FUNC_MALLOC\nAS_IF([test \"$cross_compiling\" = yes],\n   AC_MSG_WARN([result $ac_cv_func_malloc_0_nonnull guessed because of cross compilation]))\nAC_FUNC_REALLOC\nAS_IF([test \"$cross_compiling\" = yes],\n   AC_MSG_WARN([result $ac_cv_func_realloc_0_nonnull guessed because of cross compilation]))\n\ndnl Autoheader (<= 2.69) bug: \"dnl\" comments in a quoted argument of\ndnl AC_CHECK_FUNCS will expand wierdly in config.h.in.\ndnl (https://lists.gnu.org/archive/html/bug-autoconf/2018-02/msg00005.html)\n\nAC_CHECK_FUNCS([dup2 memset regcomp strcasecmp strchr strdup strtol], [],\n  [AC_MSG_ERROR(required library function not found on your system)])\n\n# Optional library functions:\n# pow - Used only by \"examples/manual/expr\".\n# setlocale - Needed only if NLS is enabled.\n# reallocarr - NetBSD function. Use reallocarray if not available.\n# reallocarray - OpenBSD function. We have replacement if not available.\nAC_CHECK_FUNCS([pow setlocale reallocarr reallocarray])\nAC_CHECK_DECLS(__func__)\n\nAS_IF([test \"$cross_compiling\" = yes],\n  [AC_CONFIG_FILES([src/config_for_build.h])])\n\nAC_CONFIG_FILES(\nMakefile\ndoc/Makefile\nexamples/Makefile\nexamples/fastwc/Makefile\nexamples/manual/Makefile\npo/Makefile.in\nsrc/libfl.pc\nsrc/Makefile\ntools/Makefile\ntests/Makefile\n)\n\nAC_OUTPUT\n"
        },
        {
          "name": "control.ac",
          "type": "blob",
          "size": 0.029296875,
          "content": "XBS-Destinations: sourceforge\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}