{
  "metadata": {
    "timestamp": 1736710067855,
    "page": 678,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "apple-oss-distributions/xnu",
      "stars": 1950,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".upstream_base_commits",
          "type": "blob",
          "size": 0.466796875,
          "content": "#freebsd = https://github.com/freebsd/freebsd.git\nbsd/man/man2/access.2\tfreebsd\tlib/libc/sys/access.2\t5b882020081a138285227631c46a406c08e17bc8\nbsd/man/man7/sticky.7\tfreebsd\tshare/man/man7/sticky.7\t5b882020081a138285227631c46a406c08e17bc8\nbsd/man/man2/utimensat.2\tfreebsd\tlib/libc/sys/utimensat.2\t89c1fcc0d088065021703b658ef547f46b5481f0\ntools/tests/darwintests/netbsd_utimensat.c\tfreebsd\tcontrib/netbsd-tests/lib/libc/c063/t_utimensat.c\t89c1fcc0d088065021703b658ef547f46b5481f0\n"
        },
        {
          "name": "APPLE_LICENSE",
          "type": "blob",
          "size": 19.3642578125,
          "content": "APPLE PUBLIC SOURCE LICENSE\nVersion 2.0 - August 6, 2003\n\nPlease read this License carefully before downloading this software.\nBy downloading or using this software, you are agreeing to be bound by\nthe terms of this License. If you do not or cannot agree to the terms\nof this License, please do not download or use the software.\n\n1. General; Definitions. This License applies to any program or other\nwork which Apple Computer, Inc. (\"Apple\") makes publicly available and\nwhich contains a notice placed by Apple identifying such program or\nwork as \"Original Code\" and stating that it is subject to the terms of\nthis Apple Public Source License version 2.0 (\"License\"). As used in\nthis License:\n\n1.1 \"Applicable Patent Rights\" mean: (a) in the case where Apple is\nthe grantor of rights, (i) claims of patents that are now or hereafter\nacquired, owned by or assigned to Apple and (ii) that cover subject\nmatter contained in the Original Code, but only to the extent\nnecessary to use, reproduce and/or distribute the Original Code\nwithout infringement; and (b) in the case where You are the grantor of\nrights, (i) claims of patents that are now or hereafter acquired,\nowned by or assigned to You and (ii) that cover subject matter in Your\nModifications, taken alone or in combination with Original Code.\n\n1.2 \"Contributor\" means any person or entity that creates or\ncontributes to the creation of Modifications.\n\n1.3 \"Covered Code\" means the Original Code, Modifications, the\ncombination of Original Code and any Modifications, and/or any\nrespective portions thereof.\n\n1.4 \"Externally Deploy\" means: (a) to sublicense, distribute or\notherwise make Covered Code available, directly or indirectly, to\nanyone other than You; and/or (b) to use Covered Code, alone or as\npart of a Larger Work, in any way to provide a service, including but\nnot limited to delivery of content, through electronic communication\nwith a client other than You.\n\n1.5 \"Larger Work\" means a work which combines Covered Code or portions\nthereof with code not governed by the terms of this License.\n\n1.6 \"Modifications\" mean any addition to, deletion from, and/or change\nto, the substance and/or structure of the Original Code, any previous\nModifications, the combination of Original Code and any previous\nModifications, and/or any respective portions thereof. When code is\nreleased as a series of files, a Modification is: (a) any addition to\nor deletion from the contents of a file containing Covered Code;\nand/or (b) any new file or other representation of computer program\nstatements that contains any part of Covered Code.\n\n1.7 \"Original Code\" means (a) the Source Code of a program or other\nwork as originally made available by Apple under this License,\nincluding the Source Code of any updates or upgrades to such programs\nor works made available by Apple under this License, and that has been\nexpressly identified by Apple as such in the header file(s) of such\nwork; and (b) the object code compiled from such Source Code and\noriginally made available by Apple under this License.\n\n1.8 \"Source Code\" means the human readable form of a program or other\nwork that is suitable for making modifications to it, including all\nmodules it contains, plus any associated interface definition files,\nscripts used to control compilation and installation of an executable\n(object code).\n\n1.9 \"You\" or \"Your\" means an individual or a legal entity exercising\nrights under this License. For legal entities, \"You\" or \"Your\"\nincludes any entity which controls, is controlled by, or is under\ncommon control with, You, where \"control\" means (a) the power, direct\nor indirect, to cause the direction or management of such entity,\nwhether by contract or otherwise, or (b) ownership of fifty percent\n(50%) or more of the outstanding shares or beneficial ownership of\nsuch entity.\n\n2. Permitted Uses; Conditions & Restrictions. Subject to the terms\nand conditions of this License, Apple hereby grants You, effective on\nthe date You accept this License and download the Original Code, a\nworld-wide, royalty-free, non-exclusive license, to the extent of\nApple's Applicable Patent Rights and copyrights covering the Original\nCode, to do the following:\n\n2.1 Unmodified Code. You may use, reproduce, display, perform,\ninternally distribute within Your organization, and Externally Deploy\nverbatim, unmodified copies of the Original Code, for commercial or\nnon-commercial purposes, provided that in each instance:\n\n(a) You must retain and reproduce in all copies of Original Code the\ncopyright and other proprietary notices and disclaimers of Apple as\nthey appear in the Original Code, and keep intact all notices in the\nOriginal Code that refer to this License; and\n\n(b) You must include a copy of this License with every copy of Source\nCode of Covered Code and documentation You distribute or Externally\nDeploy, and You may not offer or impose any terms on such Source Code\nthat alter or restrict this License or the recipients' rights\nhereunder, except as permitted under Section 6.\n\n2.2 Modified Code. You may modify Covered Code and use, reproduce,\ndisplay, perform, internally distribute within Your organization, and\nExternally Deploy Your Modifications and Covered Code, for commercial\nor non-commercial purposes, provided that in each instance You also\nmeet all of these conditions:\n\n(a) You must satisfy all the conditions of Section 2.1 with respect to\nthe Source Code of the Covered Code;\n\n(b) You must duplicate, to the extent it does not already exist, the\nnotice in Exhibit A in each file of the Source Code of all Your\nModifications, and cause the modified files to carry prominent notices\nstating that You changed the files and the date of any change; and\n\n(c) If You Externally Deploy Your Modifications, You must make\nSource Code of all Your Externally Deployed Modifications either\navailable to those to whom You have Externally Deployed Your\nModifications, or publicly available. Source Code of Your Externally\nDeployed Modifications must be released under the terms set forth in\nthis License, including the license grants set forth in Section 3\nbelow, for as long as you Externally Deploy the Covered Code or twelve\n(12) months from the date of initial External Deployment, whichever is\nlonger. You should preferably distribute the Source Code of Your\nExternally Deployed Modifications electronically (e.g. download from a\nweb site).\n\n2.3 Distribution of Executable Versions. In addition, if You\nExternally Deploy Covered Code (Original Code and/or Modifications) in\nobject code, executable form only, You must include a prominent\nnotice, in the code itself as well as in related documentation,\nstating that Source Code of the Covered Code is available under the\nterms of this License with information on how and where to obtain such\nSource Code.\n\n2.4 Third Party Rights. You expressly acknowledge and agree that\nalthough Apple and each Contributor grants the licenses to their\nrespective portions of the Covered Code set forth herein, no\nassurances are provided by Apple or any Contributor that the Covered\nCode does not infringe the patent or other intellectual property\nrights of any other entity. Apple and each Contributor disclaim any\nliability to You for claims brought by any other entity based on\ninfringement of intellectual property rights or otherwise. As a\ncondition to exercising the rights and licenses granted hereunder, You\nhereby assume sole responsibility to secure any other intellectual\nproperty rights needed, if any. For example, if a third party patent\nlicense is required to allow You to distribute the Covered Code, it is\nYour responsibility to acquire that license before distributing the\nCovered Code.\n\n3. Your Grants. In consideration of, and as a condition to, the\nlicenses granted to You under this License, You hereby grant to any\nperson or entity receiving or distributing Covered Code under this\nLicense a non-exclusive, royalty-free, perpetual, irrevocable license,\nunder Your Applicable Patent Rights and other intellectual property\nrights (other than patent) owned or controlled by You, to use,\nreproduce, display, perform, modify, sublicense, distribute and\nExternally Deploy Your Modifications of the same scope and extent as\nApple's licenses under Sections 2.1 and 2.2 above.\n\n4. Larger Works. You may create a Larger Work by combining Covered\nCode with other code not governed by the terms of this License and\ndistribute the Larger Work as a single product. In each such instance,\nYou must make sure the requirements of this License are fulfilled for\nthe Covered Code or any portion thereof.\n\n5. Limitations on Patent License. Except as expressly stated in\nSection 2, no other patent rights, express or implied, are granted by\nApple herein. Modifications and/or Larger Works may require additional\npatent licenses from Apple which Apple may grant in its sole\ndiscretion.\n\n6. Additional Terms. You may choose to offer, and to charge a fee for,\nwarranty, support, indemnity or liability obligations and/or other\nrights consistent with the scope of the license granted herein\n(\"Additional Terms\") to one or more recipients of Covered Code.\nHowever, You may do so only on Your own behalf and as Your sole\nresponsibility, and not on behalf of Apple or any Contributor. You\nmust obtain the recipient's agreement that any such Additional Terms\nare offered by You alone, and You hereby agree to indemnify, defend\nand hold Apple and every Contributor harmless for any liability\nincurred by or claims asserted against Apple or such Contributor by\nreason of any such Additional Terms.\n\n7. Versions of the License. Apple may publish revised and/or new\nversions of this License from time to time. Each version will be given\na distinguishing version number. Once Original Code has been published\nunder a particular version of this License, You may continue to use it\nunder the terms of that version. You may also choose to use such\nOriginal Code under the terms of any subsequent version of this\nLicense published by Apple. No one other than Apple has the right to\nmodify the terms applicable to Covered Code created under this\nLicense.\n\n8. NO WARRANTY OR SUPPORT. The Covered Code may contain in whole or in\npart pre-release, untested, or not fully tested works. The Covered\nCode may contain errors that could cause failures or loss of data, and\nmay be incomplete or contain inaccuracies. You expressly acknowledge\nand agree that use of the Covered Code, or any portion thereof, is at\nYour sole and entire risk. THE COVERED CODE IS PROVIDED \"AS IS\" AND\nWITHOUT WARRANTY, UPGRADES OR SUPPORT OF ANY KIND AND APPLE AND\nAPPLE'S LICENSOR(S) (COLLECTIVELY REFERRED TO AS \"APPLE\" FOR THE\nPURPOSES OF SECTIONS 8 AND 9) AND ALL CONTRIBUTORS EXPRESSLY DISCLAIM\nALL WARRANTIES AND/OR CONDITIONS, EXPRESS OR IMPLIED, INCLUDING, BUT\nNOT LIMITED TO, THE IMPLIED WARRANTIES AND/OR CONDITIONS OF\nMERCHANTABILITY, OF SATISFACTORY QUALITY, OF FITNESS FOR A PARTICULAR\nPURPOSE, OF ACCURACY, OF QUIET ENJOYMENT, AND NONINFRINGEMENT OF THIRD\nPARTY RIGHTS. APPLE AND EACH CONTRIBUTOR DOES NOT WARRANT AGAINST\nINTERFERENCE WITH YOUR ENJOYMENT OF THE COVERED CODE, THAT THE\nFUNCTIONS CONTAINED IN THE COVERED CODE WILL MEET YOUR REQUIREMENTS,\nTHAT THE OPERATION OF THE COVERED CODE WILL BE UNINTERRUPTED OR\nERROR-FREE, OR THAT DEFECTS IN THE COVERED CODE WILL BE CORRECTED. NO\nORAL OR WRITTEN INFORMATION OR ADVICE GIVEN BY APPLE, AN APPLE\nAUTHORIZED REPRESENTATIVE OR ANY CONTRIBUTOR SHALL CREATE A WARRANTY.\nYou acknowledge that the Covered Code is not intended for use in the\noperation of nuclear facilities, aircraft navigation, communication\nsystems, or air traffic control machines in which case the failure of\nthe Covered Code could lead to death, personal injury, or severe\nphysical or environmental damage.\n\n9. LIMITATION OF LIABILITY. TO THE EXTENT NOT PROHIBITED BY LAW, IN NO\nEVENT SHALL APPLE OR ANY CONTRIBUTOR BE LIABLE FOR ANY INCIDENTAL,\nSPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES ARISING OUT OF OR RELATING\nTO THIS LICENSE OR YOUR USE OR INABILITY TO USE THE COVERED CODE, OR\nANY PORTION THEREOF, WHETHER UNDER A THEORY OF CONTRACT, WARRANTY,\nTORT (INCLUDING NEGLIGENCE), PRODUCTS LIABILITY OR OTHERWISE, EVEN IF\nAPPLE OR SUCH CONTRIBUTOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES AND NOTWITHSTANDING THE FAILURE OF ESSENTIAL PURPOSE OF ANY\nREMEDY. SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OF LIABILITY OF\nINCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS LIMITATION MAY NOT APPLY\nTO YOU. In no event shall Apple's total liability to You for all\ndamages (other than as may be required by applicable law) under this\nLicense exceed the amount of fifty dollars ($50.00).\n\n10. Trademarks. This License does not grant any rights to use the\ntrademarks or trade names \"Apple\", \"Apple Computer\", \"Mac\", \"Mac OS\",\n\"QuickTime\", \"QuickTime Streaming Server\" or any other trademarks,\nservice marks, logos or trade names belonging to Apple (collectively\n\"Apple Marks\") or to any trademark, service mark, logo or trade name\nbelonging to any Contributor. You agree not to use any Apple Marks in\nor as part of the name of products derived from the Original Code or\nto endorse or promote products derived from the Original Code other\nthan as expressly permitted by and in strict compliance at all times\nwith Apple's third party trademark usage guidelines which are posted\nat http://www.apple.com/legal/guidelinesfor3rdparties.html.\n\n11. Ownership. Subject to the licenses granted under this License,\neach Contributor retains all rights, title and interest in and to any\nModifications made by such Contributor. Apple retains all rights,\ntitle and interest in and to the Original Code and any Modifications\nmade by or on behalf of Apple (\"Apple Modifications\"), and such Apple\nModifications will not be automatically subject to this License. Apple\nmay, at its sole discretion, choose to license such Apple\nModifications under this License, or on different terms from those\ncontained in this License or may choose not to license them at all.\n\n12. Termination.\n\n12.1 Termination. This License and the rights granted hereunder will\nterminate:\n\n(a) automatically without notice from Apple if You fail to comply with\nany term(s) of this License and fail to cure such breach within 30\ndays of becoming aware of such breach;\n\n(b) immediately in the event of the circumstances described in Section\n13.5(b); or\n\n(c) automatically without notice from Apple if You, at any time during\nthe term of this License, commence an action for patent infringement\nagainst Apple; provided that Apple did not first commence\nan action for patent infringement against You in that instance.\n\n12.2 Effect of Termination. Upon termination, You agree to immediately\nstop any further use, reproduction, modification, sublicensing and\ndistribution of the Covered Code. All sublicenses to the Covered Code\nwhich have been properly granted prior to termination shall survive\nany termination of this License. Provisions which, by their nature,\nshould remain in effect beyond the termination of this License shall\nsurvive, including but not limited to Sections 3, 5, 8, 9, 10, 11,\n12.2 and 13. No party will be liable to any other for compensation,\nindemnity or damages of any sort solely as a result of terminating\nthis License in accordance with its terms, and termination of this\nLicense will be without prejudice to any other right or remedy of\nany party.\n\n13. Miscellaneous.\n\n13.1 Government End Users. The Covered Code is a \"commercial item\" as\ndefined in FAR 2.101. Government software and technical data rights in\nthe Covered Code include only those rights customarily provided to the\npublic as defined in this License. This customary commercial license\nin technical data and software is provided in accordance with FAR\n12.211 (Technical Data) and 12.212 (Computer Software) and, for\nDepartment of Defense purchases, DFAR 252.227-7015 (Technical Data --\nCommercial Items) and 227.7202-3 (Rights in Commercial Computer\nSoftware or Computer Software Documentation). Accordingly, all U.S.\nGovernment End Users acquire Covered Code with only those rights set\nforth herein.\n\n13.2 Relationship of Parties. This License will not be construed as\ncreating an agency, partnership, joint venture or any other form of\nlegal association between or among You, Apple or any Contributor, and\nYou will not represent to the contrary, whether expressly, by\nimplication, appearance or otherwise.\n\n13.3 Independent Development. Nothing in this License will impair\nApple's right to acquire, license, develop, have others develop for\nit, market and/or distribute technology or products that perform the\nsame or similar functions as, or otherwise compete with,\nModifications, Larger Works, technology or products that You may\ndevelop, produce, market or distribute.\n\n13.4 Waiver; Construction. Failure by Apple or any Contributor to\nenforce any provision of this License will not be deemed a waiver of\nfuture enforcement of that or any other provision. Any law or\nregulation which provides that the language of a contract shall be\nconstrued against the drafter will not apply to this License.\n\n13.5 Severability. (a) If for any reason a court of competent\njurisdiction finds any provision of this License, or portion thereof,\nto be unenforceable, that provision of the License will be enforced to\nthe maximum extent permissible so as to effect the economic benefits\nand intent of the parties, and the remainder of this License will\ncontinue in full force and effect. (b) Notwithstanding the foregoing,\nif applicable law prohibits or restricts You from fully and/or\nspecifically complying with Sections 2 and/or 3 or prevents the\nenforceability of either of those Sections, this License will\nimmediately terminate and You must immediately discontinue any use of\nthe Covered Code and destroy all copies of it that are in your\npossession or control.\n\n13.6 Dispute Resolution. Any litigation or other dispute resolution\nbetween You and Apple relating to this License shall take place in the\nNorthern District of California, and You and Apple hereby consent to\nthe personal jurisdiction of, and venue in, the state and federal\ncourts within that District with respect to this License. The\napplication of the United Nations Convention on Contracts for the\nInternational Sale of Goods is expressly excluded.\n\n13.7 Entire Agreement; Governing Law. This License constitutes the\nentire agreement between the parties with respect to the subject\nmatter hereof. This License shall be governed by the laws of the\nUnited States and the State of California, except that body of\nCalifornia law concerning conflicts of law.\n\nWhere You are located in the province of Quebec, Canada, the following\nclause applies: The parties hereby confirm that they have requested\nthat this License and all related documents be drafted in English. Les\nparties ont exige que le present contrat et tous les documents\nconnexes soient rediges en anglais.\n\nEXHIBIT A.\n\n\"Portions Copyright (c) 1999-2003 Apple Computer, Inc. All Rights\nReserved.\n\nThis file contains Original Code and/or Modifications of Original Code\nas defined in and that are subject to the Apple Public Source License\nVersion 2.0 (the 'License'). You may not use this file except in\ncompliance with the License. Please obtain a copy of the License at\nhttp://www.opensource.apple.com/apsl/ and read it before using this\nfile.\n\nThe Original Code and all software distributed under the License are\ndistributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER\nEXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,\nINCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.\nPlease see the License for the specific language governing rights and\nlimitations under the License.\"\n"
        },
        {
          "name": "EXTERNAL_HEADERS",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 10.361328125,
          "content": "#\n# Copyright (C) 1999-2020 Apple Inc. All rights reserved.\n#\nifndef VERSDIR\nexport VERSDIR := $(shell /bin/pwd)\nendif\n\nifndef SRCROOT\nexport SRCROOT := $(shell /bin/pwd)\nendif\nifndef OBJROOT\nexport OBJROOT = $(SRCROOT)/BUILD/obj\nendif\nifndef DSTROOT\nexport DSTROOT = $(SRCROOT)/BUILD/dst\nendif\nifndef SYMROOT\nexport SYMROOT = $(SRCROOT)/BUILD/sym\nendif\nifndef MallocNanoZone\nexport MallocNanoZone := 1\nendif\n\n# Avoid make default rules, make becomes faster\nMAKEFLAGS+=r\n\nexport MakeInc_top=${VERSDIR}/makedefs/MakeInc.top\nexport MakeInc_kernel=${VERSDIR}/makedefs/MakeInc.kernel\nexport MakeInc_cmd=${VERSDIR}/makedefs/MakeInc.cmd\nexport MakeInc_def=${VERSDIR}/makedefs/MakeInc.def\nexport MakeInc_rule=${VERSDIR}/makedefs/MakeInc.rule\nexport MakeInc_dir=${VERSDIR}/makedefs/MakeInc.dir\n\n.DEFAULT_GOAL := default\n\nexport PATCH_PREFIX ?= change-under-test_\nexport PATCH_GLOB ?= $(PATCH_PREFIX)*.diff\n\n\nskip:\n\t@echo \"Skipping $(RC_ProjectName)\"\n\n.PHONY: skip\n\n#\n# Dispatch non-xnu build aliases to their own build\n# systems. All xnu variants start with MakeInc_top.\n#\n\nifneq ($(findstring Libsyscall,$(RC_ProjectName)),)\n\ninclude $(MakeInc_cmd)\ninclude $(MakeInc_def)\ninclude $(MakeInc_rule)\n\nifeq ($(RC_ProjectName),Libsyscall_headers_Sim)\nTARGET=-target Libsyscall_headers_Sim\nendif\n\nifeq ($(RC_ProjectName),Libsyscall_driverkit)\nTARGET=-target Libsyscall_driverkit\nendif\n\n# default to OS X\nSDKROOT ?= macosx.internal\n\ndefault: install\n\nLibsyscall_driverkit: install\n\n.PHONY: Libsyscall_driverkit\n\ninstallhdrs install::\n\tcd libsyscall ; \\\n\t\txcodebuild $@ $(TARGET)\t\\\n\t\t\t$(MAKEOVERRIDES)\t\\\n\t\t\t\"SRCROOT=$(SRCROOT)/libsyscall\"\t\t\t\t\t\\\n\t\t\t\"OBJROOT=$(OBJROOT)\"\t\t\t\t\t\t\\\n\t\t\t\"SYMROOT=$(SYMROOT)\"\t\t\t\t\t\t\\\n\t\t\t\"DSTROOT=$(DSTROOT)\"\t\t\t\t\t\t\\\n\t\t\t\"SDKROOT=$(SDKROOT)\"\n\ninstallhdrs install:: do_unifdef_headers\n\n$(eval $(call LIBSYSCALL_DO_UNIFDEF_HEADERS_RULE_template,$(DSTROOT)/$(INCDIR),$(SINCFRAME_UNIFDEF)))\n$(eval $(call LIBSYSCALL_DO_UNIFDEF_HEADERS_RULE_template,$(DSTROOT)/$(LCLDIR),$(SPINCFRAME_UNIFDEF)))\nifeq ($(DRIVERKIT),1)\n$(eval $(call LIBSYSCALL_DO_UNIFDEF_HEADERS_RULE_template,$(DSTROOT)/$(DRIVERKITINCDIR),$(DKINCFRAME_UNIFDEF)))\n$(eval $(call LIBSYSCALL_DO_UNIFDEF_HEADERS_RULE_template,$(DSTROOT)/$(DRIVERKITLCLDIR),$(DKPINCFRAME_UNIFDEF)))\nendif\n\nclean:\n\ninstallsrc:\n\tpax -rw . $(SRCROOT)\n\nelse ifneq ($(findstring libkxld_host,$(RC_ProjectName)),)\n\ninclude $(MakeInc_cmd)\n\ndefault: install\n\ninstallhdrs install clean:\n\t $(MAKE) -C libkern/kxld $@ USE_APPLE_PB_SUPPORT=all PRODUCT_TYPE=ARCHIVE\n\ninstallsrc:\n\t$(_v)$(MKDIR) $(SRCROOT)\n\t$(_v)$(FIND) -x . \\! \\( \\( -name BUILD -o -name .svn -o -name .git -o -name cscope.\\* -o -name compile_commands.json -o -name \\*~ \\) -prune \\) -print0 | $(PAX) -rw -p a -d0 $(SRCROOT)\n\t$(_v)$(CHMOD) -R go+rX $(SRCROOT)\n\nelse ifneq ($(findstring libkxld,$(RC_ProjectName)),)\n\ninclude $(MakeInc_cmd)\n\ndefault: install\n\ninstallhdrs install clean:\n\t $(MAKE) -C libkern/kxld $@ USE_APPLE_PB_SUPPORT=all\n\ninstallsrc:\n\t$(_v)$(MKDIR) $(SRCROOT)\n\t$(_v)$(FIND) -x . \\! \\( \\( -name BUILD -o -name .svn -o -name .git -o -name cscope.\\* -name compile_commands.json -o -name \\*~ \\) -prune \\) -print0 | $(PAX) -rw -p a -d0 $(SRCROOT)\n\t$(_v)$(CHMOD) -R go+rX $(SRCROOT)\n\nelse ifneq ($(findstring libkmod,$(RC_ProjectName)),)\n\ndefault: install\n\ninstallhdrs install:\n\tcd libkern/kmod ; \\\n\t\txcodebuild $@\t\\\n\t\t\t$(MAKEOVERRIDES)\t\\\n\t\t\t\"SRCROOT=$(SRCROOT)/libkern/kmod\"\t\t\t\t\\\n\t\t\t\"OBJROOT=$(OBJROOT)\"\t\t\t\t\t\t\\\n\t\t\t\"SYMROOT=$(SYMROOT)\"\t\t\t\t\t\t\\\n\t\t\t\"DSTROOT=$(DSTROOT)\"\t\t\t\t\t\t\\\n\t\t\t\"SDKROOT=$(SDKROOT)\"\n\nclean:\n\ninstallsrc:\n\tpax -rw . $(SRCROOT)\n\nelse ifneq ($(findstring xnu_tests,$(RC_ProjectName)),)\n\nexport SYSCTL_HW_PHYSICALCPU := $(shell /usr/sbin/sysctl -n hw.physicalcpu)\nexport SYSCTL_HW_LOGICALCPU  := $(shell /usr/sbin/sysctl -n hw.logicalcpu)\nMAKEJOBS := --jobs=$(shell expr $(SYSCTL_HW_LOGICALCPU) + 1)\n\ndefault: install\n\ninstallhdrs:\n\ninstall: xnu_tests\n\nclean:\n\ninstallsrc:\n\tpax -rw . $(SRCROOT)\n\nelse ifeq ($(RC_ProjectName),xnu_tests_driverkit)\n\nexport SYSCTL_HW_PHYSICALCPU := $(shell /usr/sbin/sysctl -n hw.physicalcpu)\nexport SYSCTL_HW_LOGICALCPU  := $(shell /usr/sbin/sysctl -n hw.logicalcpu)\nMAKEJOBS := --jobs=$(shell expr $(SYSCTL_HW_LOGICALCPU) + 1)\n\ndefault: install\n\ninstallhdrs:\n\ninstall: xnu_tests_driverkit\n\nclean:\n\ninstallsrc:\n\tpax -rw . $(SRCROOT)\n\nelse # all other RC_ProjectName\n\nifndef CURRENT_BUILD_CONFIG\n\n# avoid having to include MakeInc.cmd\nifeq ($(RC_XBS),YES)\n_v =\nelse ifeq ($(VERBOSE),YES)\n_v =\nelse\n_v = @\nendif\n\n#\n# Setup for parallel sub-makes, taking into account physical and logical\n# CPUs. If the system does not support SMT, use N+1.\n# If MAKEJOBS or -jN is passed on the make line, that takes precedence.\n#\nexport SYSCTL_HW_PHYSICALCPU := $(shell /usr/sbin/sysctl -n hw.physicalcpu)\nexport SYSCTL_HW_LOGICALCPU  := $(shell /usr/sbin/sysctl -n hw.logicalcpu)\nMAKEJOBS := --jobs=$(shell expr $(SYSCTL_HW_LOGICALCPU) + 1)\n\nTOP_TARGETS = \\\n\tclean \\\n\tinstallsrc \\\n\texporthdrs \\\n\tall all_desktop all_embedded \\\n\tall_release_embedded all_development_embedded \\\n\tall_release_desktop all_development_desktop \\\n\tinstallhdrs installhdrs_desktop installhdrs_embedded \\\n\tinstallhdrs_release_embedded installhdrs_development_embedded \\\n\tinstallhdrs_release_desktop installhdrs_development_desktop \\\n\tinstall install_desktop install_embedded \\\n\tinstall_release_embedded install_development_embedded \\\n\tinstall_release_desktop install_development_desktop \\\n\tinstall_kernels \\\n\tcscope tags TAGS \\\n\thelp\n\nDEFAULT_TARGET = all\n\n# Targets for internal build system debugging\nTOP_TARGETS += \\\n\tprint_exports print_exports_first_build_config \\\n\tsetup \\\n\tbuild \\\n\tconfig \\\n\tinstall_textfiles \\\n\tinstall_config\n\n.PHONY: $(TOP_TARGETS)\n\ndefault: $(DEFAULT_TARGET)\n\nifneq ($(REMOTEBUILD),)\n$(TOP_TARGETS):\n\t$(_v)$(VERSDIR)/tools/remote_build.sh _REMOTEBUILD_TARGET=$@ _REMOTEBUILD_MAKE=$(MAKE) $(if $(filter --,$(MAKEFLAGS)),-,)$(MAKEFLAGS)\nelse\n$(TOP_TARGETS):\n\t$(_v)$(MAKE) $(MAKEARGS) -r $(if $(filter -j,$(MAKEFLAGS)),,$(MAKEJOBS)) -f $(MakeInc_top) $@\nendif\n\nelse # CURRENT_BUILD_CONFIG\n\ninclude $(MakeInc_cmd)\ninclude $(MakeInc_def)\n\nALL_SUBDIRS = \\\n\tsecurity \\\n\tbsd  \\\n\tiokit \\\n\tosfmk \\\n\tpexpert \\\n\tlibkern \\\n\tlibsa \\\n\tconfig \\\n\tsan\n\nCONFIG_SUBDIRS = config tools san\n# Hack to handle san external dependency on config_all allsymbols target\nconfig_all_recurse_into_san: config_all_recurse_into_config\n\nINSTINC_SUBDIRS = $(ALL_SUBDIRS) EXTERNAL_HEADERS\nINSTINC_SUBDIRS_X86_64 = $(INSTINC_SUBDIRS)\nINSTINC_SUBDIRS_X86_64H = $(INSTINC_SUBDIRS)\nINSTINC_SUBDIRS_ARM64 = $(INSTINC_SUBDIRS)\n\nEXPINC_SUBDIRS = $(ALL_SUBDIRS)\nEXPINC_SUBDIRS_X86_64 = $(EXPINC_SUBDIRS)\nEXPINC_SUBDIRS_X86_64H = $(EXPINC_SUBDIRS)\nEXPINC_SUBDIRS_ARM64 = $(EXPINC_SUBDIRS)\n\nSETUP_SUBDIRS = SETUP san bsd\n\nCOMP_SUBDIRS_X86_64 = $(ALL_SUBDIRS)\nCOMP_SUBDIRS_X86_64H = $(ALL_SUBDIRS)\nCOMP_SUBDIRS_ARM64 = $(ALL_SUBDIRS)\n\nINSTTEXTFILES_SUBDIRS =\t\\\n\tbsd\nINSTTEXTFILES_SUBDIRS_X86_64 = $(INSTTEXTFILES_SUBDIRS)\nINSTTEXTFILES_SUBDIRS_X86_64H = $(INSTTEXTFILES_SUBDIRS)\nINSTTEXTFILES_SUBDIRS_ARM64 = $(INSTTEXTFILES_SUBDIRS)\n\ninclude $(MakeInc_kernel)\ninclude $(MakeInc_rule)\ninclude $(MakeInc_dir)\n\nendif # CURRENT_BUILD_CONFIG\n\nendif # all other RC_ProjectName\n\ninstallapi_libkdd installhdrs_libkdd install_libkdd:\n\tcd libkdd; \\\n\t\txcodebuild -target Default $(subst _libkdd,,$@)\t\\\n\t\t\t$(MAKEOVERRIDES)\t\\\n\t\t\t\"SRCROOT=$(SRCROOT)/libkdd\"\t\t\\\n\t\t\t\"OBJROOT=$(OBJROOT)\"\t\t\t\\\n\t\t\t\"SYMROOT=$(SYMROOT)\"\t\t\t\\\n\t\t\t\"DSTROOT=$(DSTROOT)\"\t\t\t\\\n\t\t\t\"SDKROOT=$(SDKROOT)\"\n\n\ninstallapi_libkdd_tests installhdrs_libkdd_tests install_libkdd_tests:\n\tcd libkdd; \\\n\t\txcodebuild -target tests $(subst _libkdd_tests,,$@)\t\\\n\t\t\t$(MAKEOVERRIDES)\t\\\n\t\t\t\"SRCROOT=$(SRCROOT)/libkdd\"\t\t\\\n\t\t\t\"OBJROOT=$(OBJROOT)\"\t\t\t\\\n\t\t\t\"SYMROOT=$(SYMROOT)\"\t\t\t\\\n\t\t\t\"DSTROOT=$(DSTROOT)\"\t\t\t\\\n\t\t\t\"SDKROOT=$(SDKROOT)\"\n\n\ninstallapi_libkdd_host installhdrs_libkdd_host install_libkdd_host:\n\tcd libkdd; \\\n\t\txcodebuild -configuration ReleaseHost -target kdd.framework $(subst _libkdd_host,,$@)\t\\\n\t\t\t$(MAKEOVERRIDES)\t\\\n\t\t\t\"SRCROOT=$(SRCROOT)/libkdd\"\t\t\\\n\t\t\t\"OBJROOT=$(OBJROOT)\"\t\t\t\\\n\t\t\t\"SYMROOT=$(SYMROOT)\"\t\t\t\\\n\t\t\t\"DSTROOT=$(DSTROOT)\"\t\t\t\\\n\t\t\t\"SDKROOT=$(SDKROOT)\"\n\n\n# \"xnu_tests\" and \"testbots\" are targets that can be invoked via a standalone\n# \"make xnu_tests\" or via buildit/XBS with the RC_ProjectName=xnu_tests.\n# Define the target here in the outermost scope of the initial Makefile\n\nxnu_tests:\n\t$(MAKE) -C $(SRCROOT)/tools/tests\t$(if $(filter -j,$(MAKEFLAGS)),,$(MAKEJOBS)) \\\n\t\tSRCROOT=$(SRCROOT)/tools/tests\n\t$(MAKE) -C $(SRCROOT)/tests\t$(if $(filter -j,$(MAKEFLAGS)),,$(MAKEJOBS)) \\\n\t\tSRCROOT=$(SRCROOT)/tests\n\t$(MAKE) -C $(SRCROOT)/tools/lldbmacros/tests $(if $(filter -j,$(MAKEFLAGS)),,$(MAKEJOBS)) \\\n\t\tSRCROOT=$(SRCROOT)/tools/lldbmacros\n\nxnu_tests_driverkit:\n\t$(MAKE) -C $(SRCROOT)/tests/driverkit $(if $(filter -j,$(MAKEFLAGS)),,$(MAKEJOBS)) \\\n\t\tSRCROOT=$(SRCROOT)/tests/driverkit\n\n\ninclude $(MakeInc_cmd)\n\n#\n# The \"analyze\" target defined below invokes Clang Static Analyzer\n# with a predefined set of checks and options for the project.\n#\n\n# By default, analysis results are available in BUILD/StaticAnalyzer.\n# Set this variable in your make invocation to use a different directory.\n# Note that these results are only deleted when the build directory\n# is cleaned. They aren't deleted every time the analyzer is re-run,\n# but they are deleted after \"make clean\".\nSTATIC_ANALYZER_OUTPUT_DIR ?= $(SRCROOT)/BUILD/StaticAnalyzer\n\n# By default, the default make target is analyzed. You can analyze\n# other targets by setting this variable in your make invocation.\nSTATIC_ANALYZER_TARGET ?=\n\n# You can pass additional flags to scan-build by setting this variable\n# in your make invocation. For example, you can enable additional checks.\nSTATIC_ANALYZER_EXTRA_FLAGS ?=\n\nanalyze:\n# This is where the reports are going to be available.\n# Old reports are deleted on make clean only.\n\t$(_v)$(MKDIR) $(STATIC_ANALYZER_OUTPUT_DIR)\n\n# Recursively build the requested target under scan-build.\n# Exclude checks that weren't deemed to be security critical,\n# like null pointer dereferences.\n\t$(_v)$(XCRUN) $(SCAN_BUILD) -o $(STATIC_ANALYZER_OUTPUT_DIR) \\\n\t\t-disable-checker deadcode.DeadStores \\\n\t\t-disable-checker core.NullDereference \\\n\t\t-disable-checker core.DivideZero \\\n\t\t--exclude BUILD \\\n\t\t$(STATIC_ANALYZER_EXTRA_FLAGS) \\\n\t\t$(MAKE) $(STATIC_ANALYZER_TARGET) QUIET=1 2>&1 | $(GREP) \"^scan-build:\"\n\n.PHONY: analyze\n\n.PHONY: empty\n\n# Add an empty target which is useful for bringing up new build aliases\n# Aliases can be created with this as their target, then later move to their\n# required target in coordination with other aliases\nempty:\n\t$(_v)$(MKDIR) $(DSTROOT)/AppleInternal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.4453125,
          "content": "# What is XNU?\n\nXNU kernel is part of the Darwin operating system for use in macOS and iOS operating systems. XNU is an acronym for X is Not Unix.\nXNU is a hybrid kernel combining the Mach kernel developed at Carnegie Mellon University with components from FreeBSD and a C++ API for writing drivers called IOKit.\nXNU runs on x86_64 and ARM64 for both single processor and multi-processor configurations.\n\n## The XNU Source Tree\n\n* `config` - configurations for exported apis for supported architecture and platform\n* `SETUP` - Basic set of tools used for configuring the kernel, versioning and kextsymbol management.\n* `EXTERNAL_HEADERS` - Headers sourced from other projects to avoid dependency cycles when building. These headers should be regularly synced when source is updated.\n* `libkern` - C++ IOKit library code for handling of drivers and kexts.\n* `libsa` -  kernel bootstrap code for startup\n* `libsyscall` - syscall library interface for userspace programs\n* `libkdd` - source for user library for parsing kernel data like kernel chunked data.\n* `makedefs` - top level rules and defines for kernel build.\n* `osfmk` - Mach kernel based subsystems\n* `pexpert` - Platform specific code like interrupt handling, atomics etc.\n* `security` - Mandatory Access Check policy interfaces and related implementation.\n* `bsd` - BSD subsystems code\n* `tools` - A set of utilities for testing, debugging and profiling kernel.\n\n## How to Build XNU\n\n### Building a `DEVELOPMENT` Kernel\n\nThe xnu make system can build kernel based on `KERNEL_CONFIGS` & `ARCH_CONFIGS` variables as arguments.\nHere is the syntax:\n\n```text\nmake SDKROOT=<sdkroot> ARCH_CONFIGS=<arch> KERNEL_CONFIGS=<variant>\n```\n\nWhere:\n\n* `<sdkroot>`: path to macOS SDK on disk. (defaults to `/`)\n* `<variant>`: can be `debug`, `development`, `release`, `profile` and configures compilation flags and asserts throughout kernel code.\n* `<arch>`: can be valid arch to build for. (E.g. `X86_64`)\n\nTo build a kernel for the same architecture as running OS, just type\n\n```text\nmake SDKROOT=macosx.internal\n```\n\nAdditionally, there is support for configuring architectures through `ARCH_CONFIGS` and kernel configurations with `KERNEL_CONFIGS`.\n\n```text\nmake SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=DEVELOPMENT\nmake SDKROOT=macosx.internal ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=\"RELEASE DEVELOPMENT DEBUG\"\n```\n\n> Note: By default, the architecture is set to the build machine's architecture, and the default kernel config is set to build for `DEVELOPMENT`.\n\nThis will also create a bootable image, kernel.[config],  and a kernel binary\nwith symbols, kernel.[config].unstripped.\n\nTo install the kernel into a DSTROOT, use the `install_kernels` target:\n\n```text\nmake install_kernels DSTROOT=/tmp/xnu-dst\n```\n\nFor a more satisfying kernel debugging experience, with access to all\nlocal variables and arguments, but without all the extra check of the\nDEBUG kernel, add something like the following to your make command:\n\n```text\nCFLAGS_DEVELOPMENTARM64=\"-O0 -g -DKERNEL_STACK_MULTIPLIER=2\"\nCXXFLAGS_DEVELOPMENTARM64=\"-O0 -g -DKERNEL_STACK_MULTIPLIER=2\"\n```\n\nRemember to replace `DEVELOPMENT` and `ARM64` with the appropriate build and platform.\n\n> Extra Flags: You can pass additional flags to the C compiler at the command line with the `EXTRA_CFLAGS` build setting. These flags are appended to the base `CFLAGS`, and the default value for the setting is an empty string.\n>\n> This setting allows you to e.g. selectively turn on debugging code that is guarded by a preprocessor macro. Example usage...\n>\n> ```text\n> make SDKROOT=macosx.internal PRODUCT_CONFIGS=j314s \n> EXTRA_CFLAGS='-DKERNEL_STACK_MULTIPLIER=2'\n> ```\n\n\n* To build with RELEASE kernel configuration\n\n    ```text\n    make KERNEL_CONFIGS=RELEASE SDKROOT=/path/to/SDK\n    ```\n\n### Building FAT Kernel Binary\n\nDefine architectures in your environment or when running a make command.\n\n```text\nmake ARCH_CONFIGS=\"X86_64\" exporthdrs all\n```\n\n\n\n### Other Makefile Options\n\n* $ make MAKEJOBS=-j8    # this will use 8 processes during the build. The default is 2x the number of active CPUS.\n* $ make -j8             # the standard command-line option is also accepted\n* $ make -w              # trace recursive make invocations. Useful in combination with VERBOSE=YES\n* $ make BUILD_LTO=0     # build without LLVM Link Time Optimization\n* $ make BOUND_CHECKS=0  # disable -fbound-attributes for this build\n* $ make REMOTEBUILD=user@remotehost # perform build on remote host\n* $ make BUILD_CODE_COVERAGE=1 # build with support for collecting code coverage information\n\nThe XNU build system can optionally output color-formatted build output. To enable this, you can either\nset the `XNU_LOGCOLORS` environment variable to `y`, or you can pass `LOGCOLORS=y` to the make command.\n\n### Customize the XNU Version\n\nThe xnu version is derived from the SDK or KDK by reading the `CFBundleVersion`\nof their `System/Library/Extensions/System.kext/Info.plist` file.\nThis can be customized by setting the `RC_DARWIN_KERNEL_VERSION` variable in\nthe environment or on the `make` command line.\n\n\nSee doc/xnu_version.md for more details.\n\n### Debug Information Formats\n\nBy default, a DWARF debug information repository is created during the install phase; this is a \"bundle\" named kernel.development.\\<variant>.dSYM\nTo select the older STABS debug information format (where debug information is embedded in the kernel.development.unstripped image), set the BUILD_STABS environment variable.\n\n```sh\nexport BUILD_STABS=1\nmake\n```\n\n\n## Building KernelCaches\n\nTo test the xnu kernel, you need to build a kernelcache that links the kexts and\nkernel together into a single bootable image.\nTo build a kernelcache you can use the following mechanisms:\n\n* Using automatic kernelcache generation with `kextd`.\n  The kextd daemon keeps watching for changing in `/System/Library/Extensions` directory.\n  So you can setup new kernel as\n\n    ```text\n    cp BUILD/obj/DEVELOPMENT/X86_64/kernel.development /System/Library/Kernels/\n    touch /System/Library/Extensions\n    ps -e | grep kextd\n    ```\n\n* Manually invoking `kextcache` to build new kernelcache.\n\n    ```text\n    kextcache -q -z -a x86_64 -l -n -c /var/tmp/kernelcache.test -K /var/tmp/kernel.test /System/Library/Extensions\n    ```\n\n\n## Booting a KernelCache on a Target machine\n\nThe development kernel and iBoot supports configuring boot arguments so that we can safely boot into test kernel and, if things go wrong, safely fall back to previously used kernelcache.\nFollowing are the steps to get such a setup:\n\n1. Create kernel cache using the kextcache command as `/kernelcache.test`\n2. Copy exiting boot configurations to alternate file\n\n    ```sh\n    cp /Library/Preferences/SystemConfiguration/com.apple.Boot.plist /next_boot.plist\n    ```\n\n3. Update the kernelcache and boot-args for your setup\n\n    ```sh\n    plutil -insert \"Kernel Cache\" -string \"kernelcache.test\" /next_boot.plist\n    plutil -replace \"Kernel Flags\" -string \"debug=0x144 -v kernelsuffix=test \" /next_boot.plist\n    ```\n\n4. Copy the new config to `/Library/Preferences/SystemConfiguration/`\n\n    ```sh\n    cp /next_boot.plist /Library/Preferences/SystemConfiguration/boot.plist\n    ```\n\n5. Bless the volume with new configs.\n\n    ```text\n    sudo -n bless  --mount / --setBoot --nextonly --options \"config=boot\"\n    ```\n\n   The `--nextonly` flag specifies that use the `boot.plist` configs only for one boot.\n   So if the kernel panic's you can easily power reboot and recover back to original kernel.\n\n\n## Creating tags and cscope\n\nSet up your build environment and from the top directory, run:\n\n    make tags     # this will build ctags and etags on a case-sensitive volume, only ctags on case-insensitive\n    make TAGS     # this will build etags\n    make cscope   # this will build cscope database\n\n## Installing New Header Files from XNU\n\nXNU installs header files at the following locations -\n\n    a. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers\n    b. $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders\n    c. $(DSTROOT)/usr/include/\n    d. $(DSTROOT)/usr/local/include/\n    e. $(DSTROOT)/System/DriverKit/usr/include/\n    f. $(DSTROOT)/System/Library/Frameworks/IOKit.framework/Headers\n    g. $(DSTROOT)/System/Library/Frameworks/IOKit.framework/PrivateHeaders\n    h. $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders\n\n`Kernel.framework` is used by kernel extensions.\\\nThe `System.framework`, `/usr/include` and `/usr/local/include` are used by user level applications. \\\n`IOKit.framework` is used by IOKit userspace clients. \\\n`/System/DriverKit/usr/include` is used by userspace drivers. \\\nThe header files in framework's `PrivateHeaders` are only available for **Apple Internal Development**.\n\nThe directory containing the header file should have a Makefile that\ncreates the list of files that should be installed at different locations.\nIf you are adding the first header file in a directory, you will need to\ncreate Makefile similar to `xnu/bsd/sys/Makefile`.\n\nAdd your header file to the correct file list depending on where you want\nto install it. The default locations where the header files are installed\nfrom each file list are -\n\n    a. `DATAFILES` : To make header file available in user level -\n       `$(DSTROOT)/usr/include`\n       `$(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders`\n\n    b. `DRIVERKIT_DATAFILES` : To make header file available to DriverKit userspace drivers -\n       `$(DSTROOT)/System/DriverKit/usr/include`\n\n    c. `PRIVATE_DATAFILES` : To make header file available to Apple internal in\n       user level -\n       `$(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders`\n\n    d. `EMBEDDED_PRIVATE_DATAFILES` : To make header file available in user\n       level for macOS as `EXTRA_DATAFILES`, but Apple internal in user level\n       for embedded OSes as `EXTRA_PRIVATE_DATAFILES` -\n       `$(DSTROOT)/usr/include` (`EXTRA_DATAFILES`)\n       `$(DSTROOT)/usr/local/include` (`EXTRA_PRIVATE_DATAFILES`)\n\n    e. `KERNELFILES` : To make header file available in kernel level -\n       `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers`\n       `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders`\n\n    f. `PRIVATE_KERNELFILES` : To make header file available to Apple internal\n       for kernel extensions -\n       `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders`\n\n    g. `MODULEMAPFILES` : To make module map file available in user level -\n       `$(DSTROOT)/usr/include`\n\n    h. `PRIVATE_MODULEMAPFILES` : To make module map file available to Apple\n       internal in user level -\n       `$(DSTROOT)/usr/local/include`\n\n    i. `LIBCXX_DATAFILES` : To make header file available to in-kernel libcxx clients:\n       `$(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders/kernel_sdkroot`\n\n    j. `EXCLAVEKIT_DATAFILES` : To make header file available to Apple internal\n       ExclaveKit SDK -\n       `$(DSTROOT)/System/ExclaveKit/usr/include`\n\n    k. `EXCLAVECORE_DATAFILES` : To make header file available to Apple internal\n       ExclaveCore SDK -\n       `$(DSTROOT)/System/ExclaveCore/usr/include`\n\nThe Makefile combines the file lists mentioned above into different\ninstall lists which are used by build system to install the header files. There\nare two types of install lists: machine-dependent and machine-independent.\nThese lists are indicated by the presence of `MD` and `MI` in the build\nsetting, respectively. If your header is architecture-specific, then you should\nuse a machine-dependent install list (e.g. `INSTALL_MD_LIST`). If your header\nshould be installed for all architectures, then you should use a\nmachine-independent install list (e.g. `INSTALL_MI_LIST`).\n\nIf the install list that you are interested does not exist, create it\nby adding the appropriate file lists.  The default install lists, its\nmember file lists and their default location are described below -\n\na. `INSTALL_MI_LIST`, `INSTALL_MODULEMAP_MI_LIST` : Installs header and module map\n    files to a location that is available to everyone in user level.\n    Locations -\n        $(DSTROOT)/usr/include\n    Definition -\n        INSTALL_MI_LIST = ${DATAFILES}\n        INSTALL_MODULEMAP_MI_LIST = ${MODULEMAPFILES}\n\nb. `INSTALL_DRIVERKIT_MI_LIST` : Installs header file to a location that is\n    available to DriverKit userspace drivers.\n    Locations -\n        $(DSTROOT)/System/DriverKit/usr/include\n    Definition -\n        INSTALL_DRIVERKIT_MI_LIST = ${DRIVERKIT_DATAFILES}\n\nc.  `INSTALL_MI_LCL_LIST`, `INSTALL_MODULEMAP_MI_LCL_LIST` : Installs header and\n    module map files to a location that is available for Apple internal in user level.\n    Locations -\n        $(DSTROOT)/usr/local/include\n    Definition -\n        INSTALL_MI_LCL_LIST =\n        INSTALL_MODULEMAP_MI_LCL_LIST = ${PRIVATE_MODULEMAPFILES}\n\nd. `INSTALL_IF_MI_LIST` : Installs header file to location that is available\n    to everyone for IOKit userspace clients.\n    Locations -\n        $(DSTROOT)/System/Library/Frameworks/IOKit.framework/Headers\n    Definition -\n        INSTALL_IF_MI_LIST = ${DATAFILES}\n\ne. `INSTALL_IF_MI_LCL_LIST` : Installs header file to location that is\n    available to Apple internal for IOKit userspace clients.\n    Locations -\n        $(DSTROOT)/System/Library/Frameworks/IOKit.framework/PrivateHeaders\n    Definition -\n        INSTALL_IF_MI_LCL_LIST = ${DATAFILES} ${PRIVATE_DATAFILES}\n\nf.  `INSTALL_SF_MI_LCL_LIST` : Installs header file to a location that is available\n    for Apple internal in user level.\n    Locations -\n        $(DSTROOT)/System/Library/Frameworks/System.framework/PrivateHeaders\n    Definition -\n        INSTALL_SF_MI_LCL_LIST = ${DATAFILES} ${PRIVATE_DATAFILES}\n\ng. `INSTALL_KF_MI_LIST` : Installs header file to location that is available\n    to everyone for kernel extensions.\n    Locations -\n        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers\n    Definition -\n        INSTALL_KF_MI_LIST = ${KERNELFILES}\n\nh. `INSTALL_KF_MI_LCL_LIST` : Installs header file to location that is\n    available for Apple internal for kernel extensions.\n    Locations -\n        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders\n    Definition -\n        INSTALL_KF_MI_LCL_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}\n\ni. `EXPORT_MI_LIST` : Exports header file to all of xnu (bsd/, osfmk/, etc.)\n    for compilation only. Does not install anything into the SDK.\n    Definition -\n        EXPORT_MI_LIST = ${KERNELFILES} ${PRIVATE_KERNELFILES}\n\nj. `INSTALL_KF_LIBCXX_MI_LIST` : Installs header file for in-kernel libc++ support.\n    Locations -\n        $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders/kernel_sdkroot\n    Definition -\n        INSTALL_KF_LIBCXX_MI_LIST = ${LIBCXX_DATAFILES}\n\nk. `INSTALL_EXCLAVEKIT_MI_LIST` : Installs header file to location that is\n    available for Apple internal for ExclaveKit.\n    Locations -\n        $(DSTROOT)/System/ExclaveKit/usr/include\n    Definition -\n        INSTALL_EXCLAVEKIT_MI_LIST = ${EXCLAVEKIT_DATAFILES}\n\nl. `INSTALL_EXCLAVECORE_MI_LIST` : Installs header file to location that is\n    available for Apple internal for ExclaveCore.\n    Locations -\n        $(DSTROOT)/System/ExclaveCore/usr/include\n    Definition -\n        INSTALL_EXCLAVECORE_MI_LIST = ${EXCLAVECORE_DATAFILES}\n\nIf you want to install the header file in a sub-directory of the paths\ndescribed in (1), specify the directory name using two variables\n`INSTALL_MI_DIR` and `EXPORT_MI_DIR` as follows -\n\n```text\nINSTALL_MI_DIR = dirname\nEXPORT_MI_DIR = dirname\n```\n\nIf you want to install the module map file in a sub-directory, specify the\ndirectory name using the variable `INSTALL_MODULEMAP_MI_DIR` as follows -\n\n```text\nINSTALL_MODULEMAP_MI_DIR = dirname\n```\n\nA single header file can exist at different locations using the steps\nmentioned above.  However it might not be desirable to make all the code\nin the header file available at all the locations.  For example, you\nwant to export a function only to kernel level but not user level.\n\n You can use C language's pre-processor directive (#ifdef, #endif, #ifndef)\n to control the text generated before a header file is installed.  The kernel\n only includes the code if the conditional macro is TRUE and strips out\n code for FALSE conditions from the header file.\n\n Some pre-defined macros and their descriptions are -\n\n1. `PRIVATE` : If defined, enclosed definitions are considered System\nPrivate Interfaces. These are visible within xnu and\nexposed in user/kernel headers installed within the AppleInternal\n\"PrivateHeaders\" sections of the System and Kernel frameworks.\n2. `KERNEL_PRIVATE` : If defined, enclosed code is available to all of xnu\nkernel and Apple internal kernel extensions and omitted from user\nheaders.\n3. `BSD_KERNEL_PRIVATE` : If defined, enclosed code is visible exclusively\nwithin the xnu/bsd module.\n4. `MACH_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively\nwithin the xnu/osfmk module.\n5. `XNU_KERNEL_PRIVATE`: If defined, enclosed code is visible exclusively\nwithin xnu.\n6. `KERNEL` :  If defined, enclosed code is available within xnu and kernel\n    extensions and is not visible in user level header files.  Only the\n    header files installed in following paths will have the code -\n\n    ```text\n    $(DSTROOT)/System/Library/Frameworks/Kernel.framework/Headers\n    $(DSTROOT)/System/Library/Frameworks/Kernel.framework/PrivateHeaders\n    ```\n\n7. `DRIVERKIT`: If defined, enclosed code is visible exclusively in the\nDriverKit SDK headers used by userspace drivers.\n8. `EXCLAVEKIT`: If defined, enclosed code is visible exclusively in the\nExclaveKit SDK headers.\n9. `EXCLAVECORE`: If defined, enclosed code is visible exclusively in the\nExclaveCore SDK headers.\n\n## VM header file name convention\nThe VM headers follow the following naming conventions:\n* `*_internal.h` headers contain components of the VM subsystem only for use by VM code.\n* `*_xnu.h` headers contain components of the VM subsystem only for use by other xnu code.\n* `*.h` headers contain components of the VM subsystem exported to kexts.\n* `vm_iokit.h` header contains components of the VM subsystem exported to the iokit subsystem.\n* `vm_ubc.h` header contains components of the VM subsystem exported to the ubc subsystem.\n\n\n## Module map file name convention\n\nIn the simple case, a subdirectory of `usr/include` or `usr/local/include`\ncan be represented by a standalone module. Where this is the case, set\n`INSTALL_MODULEMAP_MI_DIR` to `INSTALL_MI_DIR` and install a `module.modulemap`\nfile there. `module.modulemap` is used even for private modules in\n`usr/local/include`; `module.private.modulemap` is not used. Caveat: in order\nto stay in the simple case, the module name needs to be exactly the same as\nthe directory name. If that's not possible, then the following method will\nneed to be applied.\n\n`xnu` contributes to the modules defined in CoreOSModuleMaps by installing\nmodule map files that are sourced from `usr/include/module.modulemap` and\n`usr/local/include/module.modulemap`. The naming convention for the `xnu`\nmodule map files are as follows.\n\na. Ideally the module map file covers an entire directory. A module map\n    file covering `usr/include/a/b/c` would be named `a_b_c.modulemap`.\n    `usr/local/include/a/b/c` would be `a_b_c_private.modulemap`.\nb. Some headers are special and require their own module. In that case,\n    the module map file would be named after the module it defines.\n    A module map file defining the module `One.Two.Three` would be named\n    `one_two_three.modulemap`.\n\n## Conditional Compilation\n\n`xnu` offers the following mechanisms for conditionally compiling code:\n\n1. *CPU Characteristics* If the code you are guarding has specific\n    characterstics that will vary only based on the CPU architecture being\n    targeted, use this option. Prefer checking for features of the\n    architecture (e.g. `__LP64__`, `__LITTLE_ENDIAN__`, etc.).\n2. *New Features* If the code you are guarding, when taken together,\n    implements a feature, you should define a new feature in `config/MASTER`\n    and use the resulting `CONFIG` preprocessor token (e.g. for a feature\n    named `config_virtual_memory`, check for `#if CONFIG_VIRTUAL_MEMORY`).\n    This practice ensures that existing features may be brought to other\n    platforms by simply changing a feature switch.\n3. *Existing Features* You can use existing features if your code is\n    strongly tied to them (e.g. use `SECURE_KERNEL` if your code implements\n    new functionality that is exclusively relevant to the trusted kernel and\n    updates the definition/understanding of what being a trusted kernel means).\n\nIt is recommended that you avoid compiling based on the target platform. `xnu`\ndoes not define the platform macros from `TargetConditionals.h`\n(`TARGET_OS_OSX`, `TARGET_OS_IOS`, etc.).\n\n\n## Debugging XNU\n\nBy default, the kernel reboots in the event of a panic.\nThis behavior can be overriden by the `debug` boot-arg -- `debug=0x14e` will cause a panic to wait for a debugger to attach.\nTo boot a kernel so it can be debugged by an attached machine, override the `kdp_match_name` boot-arg with the appropriate `ifconfig` interface.\nEthernet, Thunderbolt, and serial debugging are supported, depending on the hardware.\n\nUse LLDB to debug the kernel:\n\n```text\nxcrun -sdk macosx lldb <path-to-unstripped-kernel>\n(lldb) gdb-remote [<host-ip>:]<port>\n```\n\nThe debug info for the kernel (dSYM) comes with a set of macros to support kernel debugging.\nTo load these macros automatically when attaching to the kernel, add the following to `~/.lldbinit`:\n\n```text\nsettings set target.load-script-from-symbol-file true\n```\n\n`tools/lldbmacros` contains the source for these commands.\nSee the README in that directory for their usage, or use the built-in LLDB help with:\n\n```text\n(lldb) help showcurrentstacks\n```\n\n"
        },
        {
          "name": "SETUP",
          "type": "tree",
          "content": null
        },
        {
          "name": "bsd",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "iokit",
          "type": "tree",
          "content": null
        },
        {
          "name": "libkdd",
          "type": "tree",
          "content": null
        },
        {
          "name": "libkern",
          "type": "tree",
          "content": null
        },
        {
          "name": "libsa",
          "type": "tree",
          "content": null
        },
        {
          "name": "libsyscall",
          "type": "tree",
          "content": null
        },
        {
          "name": "makedefs",
          "type": "tree",
          "content": null
        },
        {
          "name": "osfmk",
          "type": "tree",
          "content": null
        },
        {
          "name": "pexpert",
          "type": "tree",
          "content": null
        },
        {
          "name": "san",
          "type": "tree",
          "content": null
        },
        {
          "name": "security",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}