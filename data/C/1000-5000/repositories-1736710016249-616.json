{
  "metadata": {
    "timestamp": 1736710016249,
    "page": 616,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rsyslog/rsyslog",
      "stars": 2070,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 1.1025390625,
          "content": "# note: codecov doc is hard to navigate. The info on SPLITTING UP PROJECTS\n# can be found here: https://docs.codecov.io/docs/commit-status\n# This link also contains helpful other config info not easily found.\ncomment: off\n\ncoverage:\n  # to get things started, let's aim at a lower goal. This actually helps\n  # to find those areas that we need to concentrate on.\n  range: 50..75\n  status:\n    project:\n      default:\n        target: auto\n        threshold: .5\n      contrib:\n        paths: contrib\n        threshold: .5\n    patch:\n       threshold: null\n\nignore:\n  # different execution pathes (if not, remove) -- rgerhards, 2018-10-12\n  # will be removed soon: https://github.com/rsyslog/rsyslog/issues/2103\n  - \"contrib/imczmq\"\n  - \"contrib/omczmq\"\n\n  # we are currently unable to provide test environment for these:\n  - \"plugins/imgssapi\"\n  - \"plugins/omgssapi\"\n\n  # these seem to be untestable under CI runs by principle because\n  # that would require a service registration\n  # see also: https://github.com/rsyslog/rsyslog/issues/3073\n  - \"runtime/lib_ksi_queue.c\"\n  - \"runtime/lib_ksils12.c\"\n  - \"runtime/lmsig_ksi-ls12.c\"\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.181640625,
          "content": "patch*\n*~\n*.gc*\n*.iml\n.idea\n.tar.gz\n.deps\n.libs\n*.o\n*.lo\n*.la\nMakefile\nMakefile.in\nautom4te.cache\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfig.sub\nconfigure\nlibtool\nltmain.sh\naclocal.m4\nminiamqpsrvr\njournal_print\ndepcomp\nstamp-h1\nINSTALL\ninstall-sh\nmissing\ncompile\nrsyslogd\nrsyslog.service\nylwrap\n*.orig\nrg.conf*\n*.sw?\n*.sv?\n*.cache\n# some common names I use during development\nutils\ntmp*\nlog \nlogfile\ndebug\ncore.*\nshave\nshave-libtool\ncore*\nvgcore*\n*.tar.gz\n*.new\n*.orig\n*.old\n*.diff\n*.patch\nchecklog\n*.bad\n*.rej\n*.log\nlogfile*\n*.conf\n!tests/testsuites/*.conf\nlog\n/target\ntests/*.trs\ntest-driver\ngrammar/grammar.c\ngrammar/grammar.h\ncscope.out\n.dirstamp\ntests/HOSTNAME\ntests/chkseq\ntests/diagtalker\ntests/have_relpEngineSetTLSLibByName\ntests/have_relpSrvSetOversizeMode\ntests/have_relpSrvSetTlsConfigCmd\ntests/inputfilegen\ntests/minitcpsrv\ntests/msleep\ntests/nettester\ntests/ourtail\ntests/randomgen\ntests/set-envvars\ntests/syslog_caller\ntests/omrelp_dflt_port\ntests/syslog_inject\ntests/test_id\ntests/tcpflood\ntests/uxsockrcvr\ntests/xlate.lkp_tbl\ntests/xlate_1.lkp_tbl\ntests/xlate_array.lkp_tbl\ntests/rstb_*\n.vscode/\n*.sw*\nclang_output_*\ntools/logctl\ntools/rscryutil\ntools/rscryutil.1\n/bin/\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 1.7294921875,
          "content": "extraction:\n  cpp:\n    prepare:\n      packages:\n        - python-docutils\n        - tcl-dev\n\n    configure:\n      command:\n        - autoreconf -fvi\n        - ./configure --enable-imfile\n          --enable-mysql\n          --enable-usertools\n          --enable-pgsql\n          --enable-libdbi\n          --enable-snmp\n          --enable-elasticsearch\n          --enable-gnutls\n          --enable-mail\n          --enable-imdiag\n          --enable-mmjsonparse\n          --enable-mmaudit\n          --enable-mmanon\n          --enable-mmrm1stspace\n          --enable-mmutf8fix\n          --enable-mmcount\n          --enable-mmdblookup\n          --enable-mmfields\n          --enable-mmpstrucdata\n          --enable-imptcp\n          --enable-impstats\n          --enable-omprog\n          --enable-omudpspoof\n          --enable-omstdout\n          --enable-omjournal\n          --enable-pmlastmsg\n          --enable-pmcisconames\n          --enable-pmciscoios\n          --enable-pmnull\n          --enable-pmaixforwardedfrom\n          --enable-pmsnare\n          --enable-pmpanngfw\n          --enable-omuxsock\n          --enable-omkafka\n          --enable-imkafka\n          --enable-ommongodb\n          --enable-omhiredis\n          --enable-omhttpfs\n          --enable-gssapi-krb5\n          --enable-mmkubernetes\n          --enable-relp\n          --enable-mmnormalize\n          --enable-pmnormalize\n          --enable-openssl\n          --enable-mmgrok\n          --enable-omtcl\n          --enable-omhttp\n          --enable-improg\n          --enable-imtuxedoulog\n          --enable-mmtaghostname\n          --enable-imbatchreport\n          --enable-imdocker\n          --enable-mmdarwin\n          --enable-pmdb2diag\n          --enable-omrabbitmq\n\nqueries:\n  - include: cpp/commented-out-code\n"
        },
        {
          "name": ".shellcheck.yaml",
          "type": "blob",
          "size": 0.3974609375,
          "content": "ignored:\n  - SC2181 # we need support for old Solaris 10\n  - SC2016 # shellcheck does not properly understand our intent, the issue\n           # is raised e.g. here in config file creation:\n\t   #  binary=\"'$RSYSLOG_DYNNAME'.omprog-restart-terminated-bin.sh\"\n\t   # we cannot explicitely permit this on each occurrence.\n\n  # things we do not (currently) care about\n  - SC2046\n  - SC2086\n  - SC2155\n  - SC2164\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.4892578125,
          "content": "Thankfully, we have had so many contributions that maintaining the\nAUTHORS file would be a big task in itself. On the other hand, we\nnow use git and I make sure that each author receives proper credit\nfor patches I receive.\n\nSo rather than trying to reproduce the git author log here (and\noften making mistakes in that), I invite you to check the git logs.\nYou can also do this online at\n\nhttp://git.adiscon.com/?p=rsyslog.git;a=summary\n\nRainer Gerhards\n<rgerhards@adiscon.com>\nlead rsyslog developer\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.1630859375,
          "content": "# How to Contribute\n\nRsyslog is a real open source project and open to contributions.\nBy contributing, you help improve the state of logging as well as improve\nyour own professional profile. Contributing is easy, and there are options\nfor everyone - you do not need to be a developer.\n\nThese are many ways to contribute to the project:\n * become a rsyslog ambassador and let other people know about rsyslog and how to utilize it for best results. Help rsyslog getting backlinks, be present on Internet news sites or at meetings you attend.\n * help others by offering support on\n   * the rsyslog's github home at https://github.com/rsyslog/rsyslog\n   * the rsyslog mailing list at http://lists.adiscon.net/mailman/listinfo/rsyslog\n * help with the documentation; you can either contribute\n   * to the [rsyslog doc directory](https://github.com/rsyslog/rsyslog-doc), which is shown on http://rsyslog.com/doc\n   * to the rsyslog project web site -- just ask us for account creation\n * become a bug-hunter and help with testing rsyslog development releases\n * help driving the rsyslog infrastructure with its web sites and the like\n * help creating packages\n * or, obviously, help with rsyslog code development\n\nThis list is not conclusive. There for sure are many more ways to contribute and if you find one, just let us know. We are very open to new suggestions and like to try out new things.\n\n## When to submit Pull Requests?\n\nIt is OK to submit PRs that are not yet fully ready for merging. You want to\ndo this in order to get early CI system coverage for your patch. However,\nall patches should be reasonably complete and \"work\" in a sense.\n\nIf you submit such PRs, please flag them as \"work in progress\" by adding\n\"WiP:\" in front of the title. We will NOT merge these PRs before you tell us\nthey are now ready for merging.\n\nIf you just want/need to do a temporary experiment, you may open a PR, flag it\nas \"EXPERIMENT - DO NOT MERGE\", let the CI tests run, check results and close\nthe PR thereafter. This prevents unnecessary cluttering of the open PR list.\nWe will take the liberty to close such PRs if they are left open for an\nextended period of time.\n\nPlease note, though, that the rsyslog repo is fully set up to use Travis CI.\nTravis covers about 95% of all essential testing. So we highly recommend\nthat you use Travis to do initial checks on your work and create the PR\nonly after this looks good. That saves both you and us some time.\n\n## Requirements for patches\n\nIn order to ensure good code quality, after applying the path the code must\n\n- no legacy configuration statements ($someSetting) must be added,\n  all configuration must be in v6+ style (RainerScript)\n- compile cleanly without WARNING messages under both gcc and clang\n- pass clang static analyzer without any report\n- pass all CI tests\n- new functionality must have associated\n  * testbench tests\n  * doc additions in the rsyslog-doc sister project\n- be [sufficiently squashed](https://rainer.gerhards.net/2019/03/squash-your-pull-requests.html)\n\n### Testbench Coverage\n\nIf you fix a bug that is not detected by the current testbench, it is\nappreciated if you also add testbench test to make sure the problem does\nnot re-occur in the future.\n\nIn contrast to new feature PRs, this is not a hard requirement, but it\nhelps to speed up merging. If there is no testbench test added, the\ncore rsyslog developers will try to add one based on the patch. That\nmeans merging needs to wait until we have time to do this.\n\n### Compiler Diagnostics\n\nNote that both warning messages and static analyzer warnings may be false\npositives. We have decided to accept that fate and work around it (e.g. by\nre-arranging the code, etc). Otherwise, we cannot use these useful features.\n\nAs a last resort, compiler warnings can be turned off via\n   #pragma diagnostic\ndirectives. This should really only be done if there is no other known\nway around it. If so, it should be applied to a single function, only and\nnot to full source file. Be sure to re-enable the warning after the function\nin question. We have done this in some few cases ourselves, and if someone\ncan fix the root cause, we would appreciate help. But, again, this is a\nlast resort which should normally not be used.\n\nPlease read [on the importance of static analysis and why we request you to work around false positives](https://rainer.gerhards.net/2018/06/why-static-code-analysis.html).\n\n### Continuous Integration Testing\n\nAll patches are run though our continuous integration system, which ensures\nno regressions are inside the code as well as rsyslog project policies are\nfollowed (as far as we can check in an automated way).\n\nFor pull requests submitted via github, these two conditions are \nverified automatically. See the PR for potential failures. For patches\nsubmitted otherwise, they will be verified semi-manually.\n\nAlso, patches are requested to not break the testbench. Unfortunately, the\ncurrent testbench has some racy tests, which are still useful enough so that\nwe do not want to disable them until the root cause has been found. If your\nPR runs into something that you think is not related to your code, just sit\nback and relax. The rsyslog core developer team reviews PRs regularly and\nrestarts tests which we know to look racy. If the problem persists, we will\ncontact you.\n\nAll PRs will be tested on a variety of systems, with the help of both Travis\nCI and buildbot. The core goal of this multi-platform testing is to find\nissues that surface only on some systems (e.g. 32bit related issues, etc).\nWe continuously strive to update the CI system coverage. If you can provide\na buildbot slave for a not-yet-supported test platform, please let us know.\nWe will gladly add it.\n\nNote that test coverage differs between platforms. For example, not all\ndatabases etc. are tested on each platform. Also note that due to resource\nconstraints some very lengthy tests are only execute on some (maybe only\na single) platform.\n\nNote that we always try to merge with the most recent master branch and\ntry a build from that version (if automatic merging is possible). If this\ntest fails but no other, chances are good that there is an inter-PR issue.\nIf this happens, it is suggested to rebase to git master branch and update\nthe PR.\n\n## Note to developers\n\nPlease address pull requests against the master branch.\n\n\n## Testbench coding Tips\n\n- look for similar tests and use them as copy template. Be sure to update\n  comments as well.\n- see ./tests/diag.sh -- this is the base testing framework and it contains\n  many functions you can use inside your tests\n- keep test cases simple and focussed on one topic. Otherwise it is hard to\n  address test failures when they happen in the future.\n\n-------------------------------------------------------------------------------------\nLEGAL GDPR NOTICE:\nAccording to the European data protection laws (GDPR), we would like to make you\naware that contributing to rsyslog via git will permanently store the\nname and email address you provide as well as the actual commit and the\ntime and date you made it inside git's version history. This is inevitable,\nbecause it is a main feature git. If you are concerned about your\nprivacy, we strongly recommend to use\n\n--author \"anonymous <gdpr@example.com>\"\n\ntogether with your commit. Also please do NOT sign your commit in this case,\nas that potentially could lead back to you. Please note that if you use your\nreal identity, the GDPR grants you the right to have this information removed\nlater. However, we have valid reasons why we cannot remove that information\nlater on. The reasons are:\n\n* this would break git history and make future merges unworkable\n* the rsyslog projects has legitimate interest to keep a permanent record of the\n  contributor identity, once given, for\n  - copyright verification\n  - being able to provide proof should a malicious commit be made\n\nPlease also note that your commit is public and as such will potentially be\nprocessed by many third-parties. Git's distributed nature makes it impossible\nto track where exactly your commit, and thus your personal data, will be stored\nand be processed. If you would not like to accept this risk, please do either\ncommit anonymously or refrain from contributing to the rsyslog project.\n-------------------------------------------------------------------------------------\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.322265625,
          "content": "                  GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n"
        },
        {
          "name": "COPYING.ASL20",
          "type": "blob",
          "size": 8.9228515625,
          "content": "Apache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\n   1.  You must give any other recipients of the Work or Derivative Works a copy of this License; and\n   2.  You must cause any modified files to carry prominent notices stating that You changed the files; and\n   3.  You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n   4.  If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "COPYING.LESSER",
          "type": "blob",
          "size": 7.4599609375,
          "content": "\t   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions. \n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version. \n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 939.505859375,
          "content": "----------------------------------------------------------------------------------------\nScheduled Release 8.2502.0 (aka 2024.12) 2025-02-??\n- 2024-12-31: build: support for compile with -std=gnu23 gcc option\n  Note: The upcoming gnu23 C standard is overdoing it with type-safety. Inside\n  rsyslog, we historically have method tables for generic calls, which\n  keeps the code small and easy to understand. This would not decently be\n  possible with the new type-safety requirements.\n  So this commit works around these warning in a way that pretends to\n  provide more type safety. We have done this in the least intrusive\n  way to reduce the risk for regressions in code that works well in\n  since decades. Also note that the code already does parameter\n  validation.\n  There would have been more elaborate ways to make gnu23 compile happy,\n  e.g. by using a union of structs to provide the data element. Some folks\n  consider this type safe. In reality, it is not a bit better than\n  traditional C without types at all. Because the caller still needs to\n  ensure it picks the right struct from the union. As this approach\n  would also have larger regeression potential, we have not used it.\n  Right now, we have suppressed some of the new warnings, as working\n  around them would have required an even larger time budget and\n  potentially larger regression potential. In the long term we may\n  want to look into enabling them, as they would potentially be\n  beneficial for new code not involving method tables.\n  Some nits, however, were detected and have been fixed.\n- 2024-12-04: omazureeventhubs bugfix: URL escaping\n  Some characters were not properly escaped, leading to malfunction on submission.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2412.0 (aka 2024.12) 2024-12-03\n- 2024-12-02: rainerscript bugfix: do not try to call a function if it does not exist\n  This could previously cause a segfault when the function was called.\n  Thanks to Attila Lakatos for the patch.\n- 2024-12-02: Fix legacy $ActionQueueDiscardMark parameter\n  If the $ActionQueueSize legacy parameter was configured\n  with a much value higher than the default, the queueDiscardMark\n  option was not automatically adjusted to represent 98% of\n  the actual queue size. This caused a misalignment issue,\n  which does not occur when using the RainerScript syntax.\n  Thanks to Attila Lakatos for the patch.\n  Note: We usually do NOT change legacy parameters, but in this case it makes\n  sense to adjust to recent developments.\n- 2024-11-25: improvements in CI system\n  added some support for Ubuntu 24.04 - stil more work to do\n- 2024-11-25: small nitfixes\n  mostly to address nits detected by newer compilers due to CI-system modernization\n- 2024-11-19: core bugfix: potential stability issue with corrupt queue file resolved\n  Thanks to Flos Lonicerae for the patch.\n- 2024-11-19: core bugfix: prevent segfault on use of $ControlCharacterEscapePrefix\n  When this obsolete legacy directive was used, rsyslog most probably segfaulted during\n  startup. This did not affect it's modern counterpart.\n  Thanks to Flos Lonicerae for the patch.\n- 2024-11-14: core bugfix: rsyslog could segfault if immediately stopped during startup\n  systemd restart rsyslog in the early start of OS will let rsyslog segmentation\n  fault. This cmd will send sigTerm to rsylogd, and rsyslogd will handle the\n  signal in rsyslogdDoDie. If the rsyslogd havn't parse the conf, the runConf\n  will be NULL So check the pointer before reference it.\n  see also: https://github.com/rsyslog/rsyslog/issues/5453\n  thanks to Wang Haitao for the patch.\n- 2024-11-14: imhiredis cleanup: fix incorrect variable definitions and missing prototype\n  Thanks to Théo Bertin for the patch.\n- 2024-11-14: config processing bugfix: typo and missing space when file can't be accessed\n  When using the backtick feature with cat and a file that does not exist,\n  an error message is placed where the file content would be. This error\n  message contained a typo in could as well as a missing space between\n  see and error, which have now been fixed.\n  Thanks to Tobias Kantusch for the patch.\n- 2024-11-14: build fix: resolved issue when building on musl\n  Thanks to Quincy Fleming for the patch.\n- 2024-11-14: testbench bugfix: typo caused invalid test file to be used\n  ... which went unnoticed during regular make check runs, but lead to\n  \"left-over files after distclean\" after make distcheck.\n  This could also potentially be responsible for some flakes that were\n  not fully explainable.\n- 2024-11-14: nsd_ptcp regression fix: remove debugging messages emited to stderr\n  fix regression introduced by 9ac56b286. This spits out a debug message\n  to stderr. That message is removed by this patch here.\n  closes https://github.com/rsyslog/rsyslog/issues/5485\n----------------------------------------------------------------------------------------\nScheduled Release 8.2410.0 (aka 2024.10) 2024-10-22\n- network subsystem: improve connection failure error message\n  If we try to connect via TCP and the connections fails, we now\n  tell inside the error message how long the connection attempt\n  took. This is useful to find out if targets connect very\n  slowly.\n- regression fix: build issue on Solaris 10\n  Solaris 10 does not support SO_REUSEPORT, which we need for some\n  tests. It is used in minitcpsrvr.c, and will now not be used if\n  not available.\n  Note that tests requiring that option will also need to be disabled\n  for that platform.\n  commit which introduced regression: 1c0f9bb\n- testbench: correctly apply socket options in minitcpsrvr\n  The option name in setsockopts is not a bitmask, so SO_REUSEADDR and\n  SO_REUSEPORT can't be ORed together. Instead apply the options via\n  separate calls.\n  Fixes: #5456\n  Thanks: Chris Hofstaedtler <zeha@debian.org> and Michael Biebl\n----------------------------------------------------------------------------------------\nScheduled Release 8.2408.0 (aka 2024.08) 2024-08-20\n- 2024-08-16: omfwd: implement native load balancing - phase 1\n  This patch implements a simple round-robin load balancer\n  for omfwd. It provides equal distribution of load to a pool\n  of target servers.\n  The code currently has no different modes and no special tuning\n  for the load balancer. However, it works very well in the most\n  common use cases. Furthermore, it provides a solid base on which\n  more elaborate functionality can be build if there is need to.\n  The new functionality is fully backwards compatible with previous\n  configuration settings.\n  New action() config params:\n  * pool.resumeinterval\n  New/\"changed\" rstats counters\n  Each target receives its own set of pstats counters. Most\n  importantly this is the case for byte counts. That counter retains\n  the same naming, but there may now be multiple of these counters,\n  one for each target ip, port tuple.\n  New pstats message count to target\n  Among others, this can be used for checking that the load balancer\n  works as intended. The so-far byte count emitted does not provide\n  a clear indication of how many messages the targets had actually\n  processed.\n  For obvious reasons, this message count makes most sense in\n  advanced load balancing scenarios, but also provides additional\n  insight into round-robin. Non-matches indicate that targets\n  went offline, and we can now evaluate the impact this had\n  on processing.\n  - re-design rebind functionality\n  This now works at the transaction level. It causes a rebind of all\n  pool members. Previous code did not work 100% correct since for a\n  couple of years now (after output batching integration).\n  As cleanup, rebindInterval support has been removed from tcpClt,\n  because omfwd is the only user. This permits a cleaner code path.\n  We also noticed a bug with rebindInterval:  it caused some mild\n  message duplication for quite some time. This went unnoticed.\n  To address that efficiently, rebindInterval in the future will\n  be considered once per batch. That means up to (maxBatchSize - 1)\n  messages may be transmitted more than the rebindinterval is.\n  That's the cleanest mode of operation and should not make any\n  difference for real deployments.\n  Some additional work done in this commit:\n  - netstream: harden component against upper-layer logic errors\n  - network subsystem: better handle API errors and provide more info\n  - omfwd: add new parameter \"iobuffer.maxsize\"\n  - add new global parameter debug.abortoninternalerror and use it\n  - This parameter permits to make test runs fail when an internal error\n  - is detected and gracefully handled by rsyslog. While it is great to\n    have it gracefully handled in practice, we should not accept this\n    during testing. The new parameter permits to abort in this case and\n    emits the related error message beforehand. It is turned on by\n    default in our regular tests.\n  - add dedicated error code for \"hard\" program errors\n  - omfwd: some cleanup + error message fix + new debug level messages\n  - imptcp: improve error messages\n  - add omfwd option to NOT do extended connection check\n  - also output wrkr id in some omfwd messages (primarily debugging aid)\n  - better debug info via LogMsg() interface\n  - improve messages regarding imptcp and omfwd suspension / thread IDs\n  - refactor and enchance minitcpsrvr for mimicing died servers\n  - new global (debugging) option, correction of an informational msg\n  - add global option allmessagestostderr\n  - add new tests\n- 2024-08-16: omkafka enhance: write Kafka log with level ERROR or higher into errorfile\n  closes: https://github.com/rsyslog/rsyslog/issues/5425\n- 2024-08-16: net subsusytem bugfix: some config statemens were not accepted\n  The following parameters were not always excepted, even though they were documented\n  and the supporting code was also present. This has been corrected:\n  * streamdriver.cafile\n  * streamdriver.crlfile\n  * streamdriver.keyfile\n  * streamdriver.certfile\n  Thanks to Qiumiao Zhang for the fix.\n- 2024-08-13: new \"ossl\" crypto provider\n  Thanks to Attila Lakatos for the patch.\n- 2024-08-05: imtcp: improve connection error messages\n  They now contain remote peer information whereever possible.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2406.0 (aka 2024.06) 2024-07-02\n- 2024-07-01: ompgsql bugfix: unexpected and unnecessary message loss\n  In case of PG not available lets retry instead of dropping messages\n  Thanks to Nickolai Novik for the patch.\n- 2024-07-01: tls subsystem/ossl driver\n  Several small fixes/additions\n  * output all loaded ciphers and engines into debug log\n  * Add new global option \"defaultopensslengine\" to customize the default openssl\n    engine. If not defined, openssl will handle the default engine automatically.\n    Sample: global(defaultopensslengine=\"rdrand\")\n  * Add simple openssl performance test (imtcp-tls-ossl-basic-stress.sh) with\n    defaultopensslengine set to rdrand (Intel).\n  * removed unneeded testcase files in runtime folder.\n- 2024-04-18: [o|i]mprog/mmexternal bugfix: invalid command line parameter passing\n  Quoted command line parameters were incorrectly passed to the called program. This\n  resulted in unexpected behaviour. For example, in\n  bash -c \"echo test\"\n  bash got passed parameters '-c\" and '\"echo test\"'. Note the double quotes in\n  '\"echo test\"'. These needed to be removed by Unix/Linux standards but were instead\n  passed to bash. That in turn resulted in invalid execution. With the fix, the\n  behaviour is now correct. Now, bash gets passed '-c' and 'echo test'.\n  This actually is a BREAKING CHANGE. However, it was outright wrong behaviour from\n  the beginning. We assume that people either never noticed it (because they did not\n  use quoted parameters) or used some workaroud, likely a \"starter script\", which\n  performed the right task. As such, we do expect that only a very limited set of\n  installations might be affected by the change.\n  Even more important, we would need to change the default behaviour in any case,\n  because the previous handling was obviosuly unacceptable. As such, there was no\n  way to keep rsyslog perform the previous action.\n  Thanks to Paul Fertser for the patch.\n- 2024-04-12: bugfixes related to time_t on 32 bit platforms (y38k isue)\n  Thanks to Michael Biebl for the patch.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2404.0 (aka 2024.04) 2024-04-02\n- 2024-04-02: omhttp patches and enhancement\n  New omhttp plugin configuration parameters added:\n  * restpathtimeout - configures a timeout value for an omhttp restpath, and retry again\n  * httpretrycodes (list) - configurable list of HTTP status codes that should be\n    retried by omhttp plugin. The default behavior is to retry any non 2xx status code.\n  * httpignorablecodes (list) that can specify HTTP status codes that should be ignored\n    (as failures). status codes specified as ignorable code will not be retried.\n  * proxyhost, proxyport - configures a proxy, for which omhttp can use to set up a \n    HTTP proxy tunnel connection. Also works by reading environment variable if\n    configured HTTP_PROXY. For more details see libcurl docs on CURLOPT_PROXY\n    thanks to @erenwh for the contribution!\n  * retry.addmetadata - when this option is enabled, omhttp will add the\n    response metadata to: $!omhttp!response. There are 3 response metadata added:\n    code, body, batch_index.\n  More statistics omhttp curl statistic counters:\n  * requests.count\n  * requests.status.0xx\n  * requests.status.1xx\n  * requests.status.2xx\n  * requests.status.3xx\n  * requests.status.4xx\n  * requests.status.5xx\n  * requests.bytes\n  * requests.time_ms\n  No longer discard 3xx, 4xx errors\n  see also https://github.com/rsyslog/rsyslog/issues/4636\n  Thanks to github user n2yen for the patches.\n- 2024-04-02: remove CAP_IPC_LOCK capability\n  Does not seem to be necessary.\n  Thanks to Michael Biebl for the patch.\n- 2024-03-28: TLS bugfix: TLS drivers did not properly load under some conditions\n  This was a regeression from the DTLS implementation\n- 2024-03-28: mmdblookup bugfix: do not suspend on incompatible IP lookup\n  Mmdblookup module used to suspend after erroring on an IPv6 IP lookup on IPv4-only\n  DBs. The suspension of the module is now replaced by a simple log message,\n  allowing it to keep working for future lookups.\n  Thanks to Théo Bertin (frikilax) for the patch.\n- 2024-03-28: tarball fix: dist tarball was missing a textbench file\n  This made the testbench fail.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2402.0 (aka 2024.02) 2024-02-27\n- 2024-02-26: add DTLS support\n  This version comes with the initial implementation of imdtls and omdtls.\n  These modules permit secure message exchange over UDP.\n- 2024-02-26: testbench: make omusrmsg-noabort test more reliable\n  The previous test did not always detect an abort of rsyslog/omusrmsg.\n  The detection method has now been improved, so it is far more\n  probable that an abort is detected.\n  While doing this, we noticed that the omusrmsg-noabort-legacy test was\n  now a 100% duplicate. There is no need any longer to check pure legacy\n  syntax, and so that test has been removed.\n  We also added a valgrind-based test ofr omusrmsg-noabort, which furthers\n  strengthens bug detection. Most importantly, it helps us to detect\n  potentially new memory leaks on all CI platforms (in case the lib\n  behaves differently depending on os/distro).\n  see also https://github.com/rsyslog/rsyslog/issues/5294\n- 2024-02-26: omusrmsg bugfix: potential double free, which can cause segfault\n  omusrmsg frees a string which points to OS/system library memory. When\n  the os/libs clean up, it frees the memory as well. This results in a\n  double free. This bug interestingly seems to go unnoticed in many cases.\n  But it can cause a segfault or hard-to-trace memory corruptions which\n  could lead to other problems later on. The outcome of this bug most\n  probably depdns on os/library versions.\n  closes https://github.com/rsyslog/rsyslog/issues/5294\n- 2024-02-26: ommysql bugfix: potential segfault on database error\n  Due to an invalid code path, ommysql may cause a segfault if database\n  transactions fail into a specific way. The main trigger is a totally\n  irrecoverrable database error which can lead to premature connection\n  close, which is not checked for in all recover code.\n  This was detected in a setting where a stored procedure is called that\n  rolls back a transaction in itself.\n  This patch fixes the issue.\n  closes https://github.com/rsyslog/rsyslog/issues/5288\n- 2024-02-26: omfile: do not carry out actual action when writing to /dev/null\n  In some use cases omfile is configured to write to /dev/null. This seems\n  primarily be done because of statistics gathering but maybe some other\n  scenarios. We now add conditional logic to not do any actual omfile\n  action when the target file is /dev/null.\n  Note: this check only works on static file names. When /dev/null is\n  evaluated as part of dynafile, it will be handled just in the regular\n  case like before this patch.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2312.0 (aka 2023.12) 2023-12-12\n- 2023-12-11: imjournal: Add new input module parameter 'defaulttag'\n  The DefaultTag option specifies the default value for the tag field.\n  In imjournal, this can happen when one of the following is missing:\n   * identifier string provided by the application (SYSLOG_IDENTIFIER)\n   * name of the process the journal entry originates from (_COMM)\n  Thanks to Attila Lakatos for the patch.\n- 2023-12-08: core bugfix: rsyslog messages may not always have FQDN\n  Even if hostname FQDN is configured, rsyslog internal messages generated\n  after rsyslog startup and before the first HUP will not necessarily have\n  FQDN but instead only the shortname of the local host. This commit\n  fixes the situation.\n  Special thanks to github user eciii for doing a great bug analysis\n  and helping us considerably to fix the issue.\n  closes https://github.com/rsyslog/rsyslog/issues/5218\n- 2023-12-08: omlibdbi regression fix: database path was not properly used\n  Commit 4a072d6c93015a63716c49a6c7756df22750086a caused a regression that made\n  the database path unreliable to use. Depending on platform/libc version the\n  basename was improperly extracted, which made access to the database of sqllite\n  impossible.\n  Thanks to Flávio Tapajós for the patch.\n  closes: https://github.com/rsyslog/rsyslog/issues/5282\n- 2023-12-06: mazureeventhubs: Corrected handling of transport closed failures\n  - Added test for connection interrupts (requires root)\n  - Corrected handling of PN_TRANSPORT_CLOSED.\n  - Make sure Connection is being reestablished trough tryResume\n  - Enhanced Debug log output\n  closes: https://github.com/rsyslog/rsyslog/issues/5269\n- 2023-11-24: imkmsg: add params \"readMode\" and \"expectedBootCompleteSeconds\"\n  These parameters permit to control when imkmsg reads the full\n  kernel log upon startup.\n  Parameter \"readMode\" provides the following options:\n    * full-boot - (default) read full klog, but only \"immediately\" after\n      boot. \"Immediately\" is hereby meant in seconds of system\n      uptime given in \"expectedBootCompleteSeconds\"\n    * full-always - read full klog on every rsyslog startup. Most\n      probably causes messag duplication\n    * new-only - never emit existing kernel log message, read only\n      new ones.\n  Note that some message loss can happen if rsyslog is stopped\n  in \"full-boot\" and \"new-only\" read mode. The longer rsyslog is\n  inactive, the higher the message loss probability and potential\n  number of messages lost. For typical restart scenarios, this\n  should be minimal. On HUP, no message loss occurs as rsyslog\n  is not actually stopped.\n  The default value for \"expectedBootCompleteSeconds\" is 90.\n  see also https://github.com/rsyslog/rsyslog/issues/5161\n- 2023-11-10: imkmsg: add module param parseKernelTimestamp\n  The parameter permits to select whether or not and when kernel\n  timestamps shall parsed, that is be used as the actual time a\n  log message occurs.\n  This permits to work around problems with the way kernel\n  timestamps are represented. The reasoning is given in a sysklogd\n  commit by Joachim Wiberg, which we reproduce below (\"QUOTE\") to\n  have a stable reference.\n  The commit itself can be found for example at:\n  https://github.com/troglobit/sysklogd/commit/9f6fbb3301e571d8af95f8d771469291384e9e95\n  The new parameter parseKernelTimestamp has three possible modes:\n  \"startup\" - uses the kernel time stamp during the initial read\n  loop of /dev/kmsg, but replaced it later ignores it for later reads.\n  This is the DEFAULT setting.\n  \"on\" - kernel timestamps are always used and no correction is tried\n  \"off\" - kernel timestamps are never used, system time is used instead\n  Note that there this is a slightly breaking change. Previously, imkmsg\n  reported similar to \"off\" mode, now it reports by default in \"startup\"\n  mode. We consider this acceptable, as \"off\" mode timestamps are not\n  correct for startup. After startup, the behaviour is correct. All in\n  all, the new default is kind of a bugfix.\n  ============== QUOTE ===============\n  The spec[1] says the /dev/kmsg timestamp is a monotonic clock and in\n  microseconds.  After a while you realize it's also relative to the boot\n  of the system, that fact was probably too obvious to be put in the spec.\n  However, what's *not* in the spec, and what takes a while to realize, is\n  that this monotonic time is *not* adjusted for suspend/resume cycles ...\n  On a frequently used laptop this can manifest itself as follows.  The\n  kernel is stuck on Nov 15, and for the life of me I cannot find any to\n  adjust for this offset:\n      $ dmesg -T |tail -1; date\n      [Mon Nov 15 01:42:08 2021] wlan0: Limiting TX power to 23 (23 - 0) dBm as advertised by 18:e8:29:55:b0:62\n      Tue 23 Nov 2021 05:20:53 PM CET\n  Hence this patch.  After initial \"emptying\" of /dev/kmsg when syslogd\n  starts up, we raise a flag (denoting done with backlog), and after this\n  point we ignore the kernel's idea of time and replace it with the actual\n  time we have now, the same that userspace messages are logged with.\n  Sure, there will be occasions where there's a LOT of kernel messages to\n  read and we won't be able to keep track.  Yet, this patch is better than\n  the current state (where we log Nov 15).\n  [1]: https://www.kernel.org/doc/Documentation/ABI/testing/dev-kmsg\n  ===========END QUOTE ===============\n  closes https://github.com/rsyslog/rsyslog/issues/4561\n  closes https://github.com/rsyslog/rsyslog/issues/5161\n- 2023-11-07: imfile bugfix: remove state file on file delete\n  The state file would remain in the working directory\n  after shutdown, even though deleteStateOnfileDelete is\n  set to \"on\" and the monitored file was removed.\n  closes https://github.com/rsyslog/rsyslog/issues/5258\n  Thanks to Attila Lakatos for the patch.\n- 2023-10-31: TLS subsystem: fix small memory leak on startup\n  This was a one-time leak of the file name that hapened if a certificate file\n  was not accessible. It had no operational issues, but could confuse automatted\n  testing. As not only a side-effect, certificate load failures are now somewhat\n  more verbosely reported, which we consider helpful to the user.\n  Thanks to Attila Lakatos for the patch.\n- 2023-10-31: imklog bugfix: keepKernelTimestamp=off config param did not work\n   ... at least not as expected. It was only honored for kernel-level\n   messages and only when parseKernelTimestamp was \"on\". Otherwise, the\n   kernel timestamp was always kept inside the message.\n   closes https://github.com/rsyslog/rsyslog/issues/5160\n- 2023-10-26: TLS subsystem: add remote hostname to error reporting\n  This provides richer and easier to process logs for error and warning\n  cases. One goal is to enable automatic operations without the need\n  to consolidate multiple message to a single information.\n  This improves one situation in gtls driver and provides a more\n  generic approach in ossl driver for OpenSSL error reporting.\n  There is probably still room for improvement, however this patch\n  is at least a good starting point for further work. Please\n  provide feedback if you need more!\n  closes https://github.com/rsyslog/rsyslog/issues/5244\n- 2023-10-24: imjournal: add the ability to run multiple journal inputs\n  This may be useful to de-couple journal processing.\n  Thanks to Willy Tu for the patch.\n- 2023-10-24: regression fix: forking rsyslogd on BSD did not work\n  Actually, this was an issue for all platforms that do not provide open file handle\n  detection via the /proc file system.\n  Tech details: After fork if the child process uses close_range to close open file\n  descriptors it has no way to exempt the parentPipeFD causing a failure to signal\n  successful startup to the parent process. This causes failures on all systems that\n  aren't Linux that implement close_range.\n  Thanks to Nathan Huff for the patch.\n- 2023-10-24: omusrmsg: use logind instead of utmp for wall messages with systemd\n  Future SUSE versions will get rid of utmp due to a 32bit time_t counter\n  overflow in 2038.\n  See details at:\n  https://github.com/thkukuk/utmpx/blob/main/Y2038.md\n  On systemd based systems logind is an alternative to utmp.\n  Thanks to github user tblume for the patch.\n- 2023-10-24: cleanup: rm no longer used --with-systemdsystemunitdir configure switch\n  This is a clean up following the removal of the service unit in\n  cfd07503ba055100a84d75d1a78a5c6cceb9fdab\n- 2023-10-23: testbench: bump zookeeper version to match current offering\n  Older version can no longer be downloaded. It also makes sense to\n  test with mainstream version.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2310.0 (aka 2023.10) 2023-10-10\n- 2023-10-04: Add CAP_NET_RAW capability due to the omudpspoof module\n  The CAP_NET_RAW ensures the use of RAW and PACKET sockets,\n  which is utilized by the omudpspoof module, more precisely\n  the libnet_init function.\n  Thanks to Attila Lakatos for the patch.\n- 2023-10-04: Add new global config option \"libcapng.enable\"\n  Defines whether rsyslog should drop capabilities at startup or not.\n  By default, it is set to \"on\". Until this point, if the project was\n  compiled with --enable-libcap-ng option, capabilities were\n  automatically dropped. This is configurable now.\n  Thanks to Attila Lakatos for the patch.\n- 2023-10-04: tcp net subsystem: handle data race gracefully\n  It may happen that a socket file descriptor has been closed either\n  while setting up poll() et al or while being inside the system call.\n  This was previously treated as error and caused abort in debug\n  builds. However, it was essentially ignored in production builds.\n  This has now been fixed and now is always gracefully ignored. This\n  most importantly fixes some flakes in CI runs (which were caused\n  by this situation).\n- 2023-09-29: imrelp bufgifx: avoid crash on restart in imrelp SIGTTIN handler\n  While existing, if at specific time rsyslog receives a SIGTTIN, it\n  crashes due to 2 issues.\n  1. debug.unloadModules=\"off\" a double free of pRelpEngine\n  2. debug.unloadModules=\"on\" it crashes because the signal handler has\n     been unmapped from memory.\n  This patch covers both issues.\n  Thanks to Ali Abdallah for the patch.\n- 2023-09-28: fix startup issue on modern systemd systems\n  When we startup AND are told to auto-background ourselfs, we must\n  close all unneeded file descriptors. Not doing this has some\n  security implications. Traditionally, we do this by iterating\n  over all possible file descriptor values. This is fairly compatible,\n  because we need no OS-specific method. However, modern systemd configs\n  tend to not limit the number of fds, so there are potentially 2^30(*)\n  fds to close. While this is OKish, it takes some time and makes\n  systemd think that rsyslog did not properly start up.\n  We have now solved this by using the /proc filesystem to obtain our\n  currently open fds. This works for Linux, as well as Cygwin, NetBSD,\n  FreeBDS and MacOS. Where not available,and close_range() is available\n  on the (build) platform, we try to use it. If that fails as well, we\n  fall back to the traditional method. In our opionion, this fallback\n  is unproblematic, as on these platforms there is no systemd and in\n  almost all cases a decent number of fds to close.\n  Very special thanks go out to Brennan Kinney, who clearly described\n  the issue to us on github and also provided ample ways to solve it.\n  What we did is just implement what we think is the best fit from\n  rsyslog's PoV.\n  (*) Some details below on the number of potentially to close fds.\n      This is directly from a github posting from Brennan Kinney.\n  Just to clarify, by default since systemd v240 (2018Q4), that\n  should be `1024:524288` limit. As in the soft limit is the expected\n  `1024`.\n  The problem is other software shipping misconfiguration in systemd\n  services that overrides this to something silly like\n  `LimitNOFILE=infinity`.\n  - Which will map to the sysctl `fs.nr_open` (_a value systemd\n    v240 also raises from `2^20` to 2^30`, some distro like Debian are\n    known to opt-out via patch for the `fs.nr_open` change_).\n  - With the biggest issue there being that the soft limit was also\n    set to `infinity` instead of their software requesting to raise\n    the soft limit to a higher value that the hard limit permits.\n    `infinity` isn't at all sane though.\n  - The known source of this misconfiguration is container software such\n    as Docker and `containerd` (_which would often sync with the\n    systemd `.service` config from the Docker daemon `dockerd.service`_).\n  closes https://github.com/rsyslog/rsyslog/issues/5158\n- 2023-09-13: Add the 'batchsize' parameter to imhiredis\n  Parameter set to allow configuring the amount of entries imhiredis debatches at once.\n  Default value of '10' has been kept to avoid any side effect on existing\n  configurations.\n  Thanks to Jérémie Jourdin for the patch.\n- 2023-09-13: omprog bugfix: Add CAP_DAC_OVERRIDE to the bounding set\n  The omprog module uses the execve() function to execute\n  a third party program. Some required capabilities were not\n  preserved in the bounding set [1]. This caused problems, e.g.\n  the program could not write to files even if rsyslog was\n  executed as root and privileges were not dropped. As of now,\n  only the CAP_DAC_OVERRIDE capability is added to the bounding\n  set. Others could be added later, if there is justification\n  behind that.\n  [1] The capability bounding set is a security mechanism that\n  can be used to limit the capabilities that can be gained\n  during an execve(2). During an execve, the capability\n  bounding set is ANDed with the file permitted capability\n  set, and the result of this operation is assigned to the\n  thread's  permitted  capability  set. The capability\n  bounding set thus places a limit on the permitted\n  capabilities that may be granted by an executable file.\n  Thanks to Attila Lakatos for the patch.\n- 2023-09-13: tcpflood bugfix: plain tcp send error not properly reported\n  The error code when plain tcp sending failed was improperly returned,\n  resulting in no meaningful error message.\n  Note: tcpflood is a testbench tool, not part of production rsyslog.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2308.0 (aka 2023.08) 2023-08-15\n- 2023-08-07: crypto subsystem bugfix: potential undefined behaviour\n  The is some potential undefined behaviour when initializting the IV for locally\n  encrypting log files. The issue cancels itself out, but at least causes\n  some confusion when using undefined behaviour sanitizer (UBSAN). However,\n  UBSAN seems not to detect the issue on all platforms and/or in all versions\n  (we were not able to reproduce this issue in our CI).\n  Please also note that the functionality where this can happen is extremely\n  rarely being used.\n  Thanks to Jeffrey Walton for providing the patch.\n- 2023-08-02: lookup tables: fix static analyzer issue\n  If something goes really wrong, a lookup table's name would not\n  be set. That could lead to a NULL pointer access. HOWEVER, this\n  would require serious bugs in config parameter parsing, as the\n  lookup table name is a required parameter and the parser will\n  error out if not set.\n  So the bug is mostly cosmetic - but it does not hurt to handle\n  this case, of course.\n- 2023-08-02: lookup tables bugfix: reload on HUP did not work when backgrounded\n  Lookup tables were only reloaded on HUP if the -n option was given\n  and rsyslog no backgrounded. This patch fixes the issue.\n  closes: https://github.com/rsyslog/rsyslog/issues/4813\n- 2023-07-30: testbench: make test more reliable\n  There was a race between tcpflood and rsyslog in imptpc_maxsessions.sh.\n  We now use the new -A tcpflood option to make the timing more\n  predictable, hopefully fixing test flakiness.\n  Note: if that does not help, we need to introduce a wait on the number\n  of error messages and maybe a delay before tcpflood termination. The\n  theory behind the latter is that rsyslog possibly does not fully\n  iniaitlize session which are quickly aborted before rsyslog receives\n  the related OS notification! We just record this info in case we\n  need it and are positive that this change will fix the situation.\n- 2023-07-28: openssl: make connection setup more reliable by use of newer lib feature\n  Replaced depreceated method SSLv23_method with TLS_method.\n  In OpenSSL 1.1.0 and higher, SSLv23_method causes some errors\n  in TLS handshake from time to time. As this method is depreceated\n  since 1.1.0, I have replaced it with the follow up method\n  TLS_method which is the most generic one.\n  It fixes the random test failures in tests like\n  - sndrcv_tls_ossl_anon_rebind.sh\n  Also added some debug output in OpenSSL error handling, which is\n  useful when analysing debug files.\n  closes: https://github.com/rsyslog/rsyslog/issues/5201\n- 2023-07-28: testbench improvement: define state file directories for imfile tests\n  Not all imfile tests have state file directories or a global working\n  directory defined. This results in usage of the default location.\n  While state file names should be sufficiently different, there is still\n  some riks of using the same name in different tests. That becomes\n  problematic if tests are run in parallel (and they are run in\n  parallel inside the regular CI).\n  NOTE: NOT YET COMPLETED FOR ALL TESTS! We are considering if it makes\n  sense to deliberately keep some as-is.\n- 2023-07-28: tcpflood bugfix: TCP sending was not implemented properly\n  Note: tcpflood is a testbench tool. This bug could lead to testbench\n  false positives. No way it can affect production deployments.\n  The tcpflood tool did improperly assume that a TCP sendto() call\n  would send messages of any size in a single shot. This is not the\n  case. It has now been corrected to proper behavior.\n  As a side-activity, some int variables which acutally needed to be\n  size_t have been fixed as well.\n- 2023-07-28: testbench: make waiting for HUP processing more reliable\n  The previous approach was more or less delay based. We have now\n  changed the code to enable imdiag to detect if HUP is underway\n  and wait until it is completed. The new method still employs some\n  kind of timeout, but is now quite reliable. Most importantly,\n  it works great with long-running HUP processing, which can happen\n  e.g. when querying the system name takes long or some actions need\n  longer time to persist their HUP processing.\n  The new approach will most likely reduce CI flakes and also speed\n  up testbench runs. The speedup happens from not having to wait a\n  full delay in cases where we detect HUP is completed (plus reduced\n  timeout when we cannot clearly detect this - see code comments why\n  the new method is still considered more reliable than the old one).\n  Code note: we needed to slightly re-structure the way actual HUP\n  processing and the \"HUP mutex\" is handled. After best analysis,\n  this does not affect the reliability or speed in production\n  settings.\n  closes https://github.com/rsyslog/rsyslog/issues/5192\n- 2023-07-27: build system: make rsyslogd execute when --disable-inet is configured\n  This option is mostly useless, as network functionality depends on the\n  modules loaded by the config. The only real, and important, effect it\n  has is to control auto-load of omfwd - a feature almost all installations\n  depend in (backward compatibility).\n  This has been clarified in ./configure -help\n  Also, when --disable-inet is given, rsyslog now executes successfully.\n  The reason for the abort was that previously building of the lmnet\n  component was prevented, but that component is also needed by rsyslog\n  startup itself to query its own (correct) hostname.\n  Note that --disable-inet still does not compile some networking\n  libraries. So do not use it if you intend to load standard networking\n  modules like omfwd, imtcp or imudp.\n  closes https://github.com/rsyslog/rsyslog/issues/5188\n- 2023-07-26: testbench/CI: update zookeper download to newer version\n  Old version is no longer available.\n- 2023-07-24: openssl: add support for new-version init function\n- 2023-07-07: add CRL support for network (TLS) drivers\n  Thanks to Darren J Moffat for implementing the OpenSSL part.\n- 2023-07-07: omazureeventhubs: Initial implementation of new output module\n  The output module uses Apache \"Qpid Proton C API\" which is a solid\n  AMQP protocol library implementation that can be integrated\n  very well into the rsyslog dev environment.\n  - Implemented Delivery with submitted and accepted state checking\n  - saving of failed messages in a failed list with support of saving\n    and restoring.\n  - Add testcases (requires ENV variables) to testbench\n  - Using application/octect-stream (binary) to send messages based on\n    Microsoft Code Sample:\n    https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-c-getstarted-send\n    * Note original Microsoft Samplecode is not working anymore, we are using\n    * QPID Proton Proactor based on\n      https://github.com/apache/qpid-proton/blob/main/c/examples/send.c\n  - requires QPID-PROTON Version 0.13 or higher because of the proactor API\n  - Add EventProperties configuration parameters\n  - Slow down when sender credit reaches zero (10ns).\n  - Add support for static library linking of qpid-proton\n    This is needed to build the module from source and remove\n    library package dependencies.\n  - adjusted valgrind suppressions\n- 2023-07-04: core bugfix: action.resumeintervalmax parameter was not respected\n  Unfortunately, defining action.resumeintervalmax in the configration\n  did not have any effect at all. Instead, the default value was used,\n  which is 1800. This was caused by not having all the letters in\n  lower-case.\n  Fixes https://github.com/rsyslog/rsyslog/issues/5132\n  Thanks to Attila Lakatos for the patch.\n- 2023-06-29: core bugfix: do not try to drop capabilities when we don't have any\n  In case the process does not have any capabilities, e.g. running as regular user then\n  we do not have to force capability dropping. The capng_have_capabilities() returns\n  none if that's the case.\n  Fixes https://github.com/rsyslog/rsyslog/issues/5091\n  Thanks to Attila Lakatos for the patch.\n- 2023-06-29: imhiredis bugfix: Restore compatiblity with hiredis < v1.0.0\n  RESP3 protocol wasn't implemented yet, some types weren't\n  available (REDIS_REPLY_DOUBLE)\n  Thanks to Théo Bertin (frikilax) for the patch.\n- 2023-06-23: testbench: use newer zookeeper version in tests\n- 2023-06-23: build system: more precise error message on too-old lib\n  When libcap-ng was enabled, the lib was present but did not meet the minimum version\n  dependency during configure, it was reported as \"missing\". We now emit a message\n  telling that it is present, but the version too old.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2306.0 (aka 2023.06) 2023-06-20\n- 2023-06-19: mmnormalize bugfix: if msg cannot be parsed, parser chain is stopped\n  When an parser is not able to parse a message, it should indicate this\n  to rsyslog core, which then activates the next parser(s) inside the\n  configured parser chain.\n  Unfortunatley, mmnormalize always tells core \"success\", and so no\n  other parsers are activated.\n  closes https://github.com/rsyslog/rsyslog/issues/5148\n- 2023-06-19: [i/o]mhiredis: various fixes and enhancements\n  please see the change log for details. Among others, suspending of the modules\n  has been fixed. Also a new \"stream\" mode has been added.\n  Thanks to Théo Bertin (frikilax) for the patch.\n- 2023-06-19: testbench/bug: mmexternal-SegFault-empty-jroot-vg.sh fails due to typo\n  Fix the typo that makes the test fail.\n  Thanks to Paul Fertser for the patch.\n- 2023-06-16: imjournal: Add FileCreateMode module parameter\n    FileCreateMode allows to set the default file mode bits\n    when creating new files. As of now, it has only impact on the state file.\n    Add test suite as well.\n    Minor indentation fix in run_journal.yml\n  Thanks to Attila Lakatos for the patch.\n- 2023-06-16: core bugfix: potential segfault on busy systems\n  This was discovered by Konstantin J. Chernov in a practicaly deployment.\n  Here, msg object tag processing caused sporadic segfaults. We did not\n  hear from similiar cases, but there clearly is potential for problems\n  because a mutex lock had insufficient range, thus leading to a potential\n  race.\n  The patch is directly from Konstantin J. Chernov, thanks for that.\n  Please note that the mutex lock could be minimized as it is not strictly\n  needed for the pM == NULL case, but this cause is extremely exotic\n  and the resulting code would be harder to understand. Thus we opt\n  to do the locking on funtion level (as usual).\n  Descriptiond edited by Rainer Gerhards\n  closes: https://github.com/rsyslog/rsyslog/issues/5110\n- 2023-06-16: Add new global config option \"libcapng.default\"\n  Defines how rsyslog should behave in case something went wrong\n  when capabilities were to be dropped. Default value is \"on\",\n  in which case rsyslog exits on a libcapng related error.\n  Thanks to Attila Lakatos for the patch.\n  Closes https://github.com/rsyslog/rsyslog/issues/5096\n- 2023-06-05: imfile bugfix: file handle leak, primarily in kubernetes context\n  At this point there is a code imfile.c#L919 that adds an inotify observer to the\n  parent of the symbolic link target. But there is no such code that removes this\n  observer in the case when inotify events do not occur in the directory tree above.\n  This may be if the directory tree of the symbolic link target and the directory tree\n  of the symbolic link itself are divided into different subtrees somewhere at the levels\n  above.\n  For example, in the rsyslog configuration, an imfile with the\n  template /var/log/containers/*.log is configured and there is the following directory\n  tree:\n    /var/log/pods/pod-1/a/0.log\n    /var/log/containers/pod-1-a-0.log -> /var/log/pods/pod-1/a/0.log\n  In this example, kubernetes cron jobs will permanently delete directories at the\n  /var/log/pods/pod-* level. And thus, inotify observer on the parent object of the\n  symbolic link target (/var/log/pods/pod-1/a/0.log) looking at the directory\n  /var/log/pods/pod-1/a will constantly leak.\n  This is due to the fact that the list of active objects in the edge with path\n  /var/log/containers, where the parent object of the target symbolic link is added,\n  is not checked. Verification and deletion will occur only in the case of an inotify\n  event in the upper nodes of the directory tree, in /var/log and above.\n  Thanks to Sergey Kacheev for the patch!\n- 2023-06-05: GNUTls Driver: Fix memory leaks in gtlsInitCred\n  Missing CA Certificate or multiple Connections caused\n  a memory leak in pThis->xcred as it was allocated each time in\n  gtlsInitCred by gnutls_certificate_allocate_credentials\n  closes: https://github.com/rsyslog/rsyslog/issues/5135\n- 2023-05-24: CI: update base ubuntu image for github actions\n----------------------------------------------------------------------------------------\nScheduled Release 8.2304.0 (aka 2023.04) 2023-04-18\n- 2023-04-17: imptcp bugfix: spam log on oversize message\n  If an oversize message was received by imptcp, imptcp reported\n  one error message for EACH oversize character. This could\n  result in a potentially very large number of similar (and\n  useless) messages.\n  This is a regression from commit f052717178.\n  closes https://github.com/rsyslog/rsyslog/issues/5078\n- 2023-04-17: core/bugfix: using $uuid msg prop can deadlock rsyslog on shutdown\n  This problem can occur if a large number of threads is used and rsyslog\n  cannot shut down all queues etc within the regular time interval. In this\n  case, it cancels some threads. That can leave the mutex guarding libuuid\n  calls locked and thus prevents other, not yet cancelled threads from\n  progressing. Assuming pthread_mutex_lock() is not a cancellation point,\n  this will case these other threads to hang forever and thus create a\n  deadlock situation.\n  closes https://github.com/rsyslog/rsyslog/issues/5104\n- 2023-04-17: Do not preserve capabilities when changing credentials\n  In configurations where $PrivDropToGroup or $PrivDropToUser are used,\n  rsyslogd changes uid/gid to a non-privileged user. As part of that\n  change, all capabilities should be lost. However, if rsyslog is\n  compiled with --enable-libcap-ng option, some capabilities are\n  preserved due to using capng_change_id() instead of setgid()and\n  setuid(). https://linux.die.net/man/3/capng_change_id:\n  This function preserves capabilities while changing uid/gid, causing\n  rsyslogd to run as non-root user, but with some root capabilities.\n  Unfortunately, rsyslogd will run with higher privileges than before.\n  The patch also removes CAP_SETPCAP, because the capability set does\n  not need to be altered at a later phase.\n  Thanks to Attila Lakatos for the patch.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2302.0 (aka 2023.02) 2023-02-21\n- 2023-01-27: core/template: implement negative position.to\n  This will easily permit to drop the last n characters from a property\n  without the need to know the exact length of the string. This is\n  especially useful as the exact length is most often not known\n  beforehand.\n- 2023-01-18: Introduce --enable-libcap-ng configure option\n  The option allows to drop the capabilities to only\n  the necessary set, to minimize security exposure in\n  case there was ever a mistake in a networking\n  plugin or some other input resource. Moreover, it adds\n  ability to change uid and gid while retaining the\n  previously specified capabilities.\n  Add ability to change uid and gid while retaining the\n  capabilities previously specified.\n  closes https://github.com/rsyslog/rsyslog/issues/4986\n  Thanks to Attila Lakatos for the patch.\n- 2023-01-16:\n  - omfile: add action parameters \"rotation.*\"\n    Add new action parameters\n    - rotation.sizeLimit\n    - rotation.sizeLimitCommand\n    provide automatic output file rotation functionality feature-wise\n    equivalent to legacy $outchannel. This finally permits to use\n    this feature set in rscript.\n  - core substring function: enhancement and hardening\n    Now, length can have a negative value -n to denote that the\n    substring should be build between startpos and the character\n    -n chars from the end. This is a shortcut for stripping charactes\n    on \"both ends\" of the string. See doc for details on the enhanced\n    semantics.\n    Also, some hardening against invalid startpos and length has\n    been added.\n  - core bugfix: wrong type conversion in internal string class could lead to segfault\n    This could only happen with very unusually large strings\n    Thanks to Flos Lonicerae for the patch.\n  - QA: changed to CodeQL scanning on github as LGTM replacement\n  - bugfix: wrong version number on daily stable builds\n  - CI: use newer version of zookeeper (needed modernization)\n  - ffaup bugfix : memory corruption with concurrent workers\n    The ffaup function fails to work properly when it is used with multiple workers.\n    The faup_handler_t struct is not supposed to be shared between threads.\n    This may have caused memory corruptions and race conditions when used\n    inside of actions.\n    Thanks to Thibaud Cartegnie for the fix.\n  - openssl bugfix: undefined reference error on OpenSSL 1.1 or higher.\n    This could have prevented ossl components from being loaded/used.\n- 2023-01-02: core bugfix: template system may generate invalid json\n  When\n  - a list template\n  - is created with option.jsonf=\"on\"\n  - and the last list element is a property with onEmpty=\"skip\"\n  - and that property is actually empty\n  invalid JSON is generated.\n  The JSON string in this case ends with \", \" instead of \"}\\n\". This\n  patch fixes the issue.\n  closes https://github.com/rsyslog/rsyslog/issues/5050\n----------------------------------------------------------------------------------------\nScheduled Release 8.2212.0 (aka 2022.12) 2022-12-06\n- 2022-12-05: testbench: make python http server based tests more reliable\n  Harden them against races during server port assignment. Prevents\n  testbench flakes.\n- 2022-12-05: omprog bugfix: invalid status handling at called program startup\n  There is a bug when external program *startup* does not return \"OK\". This\n  can also lead to a misadressing with potentially a segfault (very unlikely).\n  Note that no problem exists once the initializiation phase of the external\n  program is finished and regular message transfer runs.\n  The problem basically is that for a startup failure, the control data for\n  that external program instance is freed on error. Unfortunately, that state\n  data is needed later on to detect a suspended instance. We now keep the control\n  data even on init failure (as we then need to do normal control options).\n  closes https://github.com/rsyslog/rsyslog/issues/4967\n- 2022-11-29: testbench bugfix: wrong message injection object of instance 1\n  In some client-server test cases, messages are supposed to be injected into\n  the instance 2(client), but they are actually injected into instance 1(server),\n  which may lead to false negative results. This patch fixed it by replacing\n  'injectmsg' with 'injectmsg2', and dealt with some minor issues.\n  Thanks to Guodong Zhu for the patch.\n- 2022-11-21: rsyslog.conf man page bugfix: description of selectors\n  Document historic difference to BSD syslog selectors.\n- 2022-11-18: imtcp bugfix: legacy config directives did no longer work\n  Many \"$InputTCPServer...\" config directives did no longer work\n  and were completely ignored (e.g. \"$InputTCPServerStreamDriverMode\").\n  This was a regression from a08591be5d9 (May, 5th 2021).\n  closes https://github.com/rsyslog/rsyslog/issues/5021\n- 2022-11-16: ksi bugfix: sending of too many signing requests fixed.\n  As there is a bug in libksi where too many signing requests may have bene sent\n  out the amount of signing requests will be limited by KSI module until the fix\n  is implemented.\n  Thanks to Taavi Valjaots for the patch.\n- 2022-11-14: bugfix: prevent potential segfault when switchung to queue emergency mode\n  When switching to Disk queue emergency mode, we destructed the in-memory\n  queue object.  Practice has shown that this MAY cause races during\n  destruction which themselfs can lead to segfault. For that reason, we\n  now keep the disk queueu object. This will keep some ressources,\n  including disk space, allocated. But  we prefer that over a segfault.\n  After all, it only happens after a serious queue error when we are\n  already at the edge of hard problems.\n  see also: https://github.com/rsyslog/rsyslog/issues/4963\n- 2022-11-08: ksi bugfix: Segmentation fault in async mode fixed\n  Thanks to Taavi Valjaots for the patch.\n- 2022-11-02: imjournal: add second fallback to _COMM\n  If SYSLOG_IDENTIFIER is not present in the journal message,\n  then lookup the _COMM field, which stands for the name\n  of the process the journal entry originates from. This is\n  needed in order to be in compliance with the journalctl\n  output.\n  Thanks to Attila Lakatos for the patch.\n- 2022-10-25: core bugfix: local hostname invalid if no global() config object given\n  The local hostname is invalidly set to \"[localhost]\" on rsyslog startup\n  if no global() config object is present in rsyslog.conf. Sending a HUP\n  corrects the hostname.\n  This is a regression from ba00a9f25293f\n  closes https://github.com/rsyslog/rsyslog/issues/4975\n  closes https://github.com/rsyslog/rsyslog/issues/4825\n- 2022-10-25: testbench bugfix: fixed timing issue that sometimes lead to test failure\n  Timing caused a race in test tool sync and could lead to premature termination of\n  tools, which in turn caused test failure\n----------------------------------------------------------------------------------------\nScheduled Release 8.2210.0 (aka 2022.10) 2022-10-18\n- 2022-10-13: fix NetBSD build issue\n  On NetBSD, time_t has for a long time now been __int64_t.\n  On 32-bit CPUs, the compiler is not obliged to define\n  __sync_bool_compare_and_swap_8, so instead this ends up\n  as an undefined symbol when linking rsyslog.  This makes\n  the code fall back to the pthread / locking method on these\n  systems, but at least lets the program build.\n  Thanks to Havard Eidnes for the patch.\n- 2022-10-12: omrabbitmq: Add TLS support\n  Thanks to github user 21stcavenan for the patch.\n- 2022-09-14: config: add \"abortOnFailedQueueStartup\" global config parameter\n  similiar to \"abortONUncleanConfig\", this parameter aborts rsyslog\n  when a queue has problems during startup. Some users perfer rsyslog\n  to terminate in this case. By default, nothing changes.\n  closes https://github.com/rsyslog/rsyslog/issues/4902\n- 2022-09-07: cor bugfix: leak in helper function SetString\n  A part of rsyslog runtime, SetString(), had a small memory leak when a value was\n  assigned multiple times. While this could potentially consume larger amounts of\n  memory, this did not happen in practice. The reason is that multiple assignments\n  to the same object occur very seldom.\n  Thanks to github user seuzw930 for the patch.\n  closes: https://github.com/rsyslog/rsyslog/issues/4961\n- 2022-09-07: core bugfix: correct local host name after config processing\n  rsyslog.conf may affect the host's local name. These changes were\n  so far only activated after the first HUP. This patch now ensures\n  that the configured local host name is applied correctly throughout\n  all processing, including early startup.\n  This patch causes a slight change of behaviour. However, the behaviour\n  was inconsitent before. Now it is consistent and according to the config.\n  Please note: this patch also exposes a global entry point via \"regular\"\n  dynamic loading as this makes things much easier to do. This is in-line\n  with ongoing simplification effort.\n  Finally, we also remove a CI test that we do no longer need because\n  the problem covered is now addressed differently and the original issue\n  can no longer occur.\n  closes https://github.com/rsyslog/rsyslog/issues/4975\n- 2022-08-31: imtcp: add option notifyonconnectionopen\n  Add this both as module an input parameter. Complements already-existing\n  config param notifyonconnectionclose and mirrors the similar feature from\n  imptcp.\n  The module parameter acts as default, similarly to notifyonconnectionclose.\n  Note that in contrast to imptcp, we emit IP addresses and not host\n  names. This sticks with the traditional semantics of imtcp.\n  Note that we also fixed a mislading error message in the case when a\n  disallowed sender tried to connect.\n  Thanks to John Chivian for suggesting the addition.\n- 2022-08-26: openssl TLS driver: add mechanism to include extra CA files parameter\n  This change allows to include extra CA files so that no \"unable to get issuer\n  certificates\" issue is obtained when using chained cert files. New parameter name is\n  \"NetstreamDriverCAExtraFiles\".\n  Thanks to Sergio Arroutbi for the patch.\n  closes: https://github.com/rsyslog/rsyslog/issues/4851\n- 2022-08-19: fix compile issue with older gcc compilers\n  Thanks to Julien Thomas for the contribution.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2208.0 (aka 2022.08) 2022-08-09\n- 2022-08-09: ksi bugfix: request cache size and send timeout issue fixed.\n  Async service send timeout is not configurable and request cache size is too\n  small to handle large amount of signing requests with small amount of permitted\n  requests per aggregation round. For example user with max_requests = 4 results\n  cache size 5 * max_requests or at least 256. When signing 300 log files cache\n  will be too small resulting several unsigned blocks. When signing 200 log file\n  cache will be adequate, but with rate of 4 signatures per second, it is only\n  possible to sign 4 * 10 blocks before all requests that are not sent out will\n  timeout.\n  Fix for the issue is to make send timeout configurable and make the size of the\n  cache depend on the value of send timeout. New configuration value\n  sig.block.signtimeout=\"time, s\" introduced that defines the time window wherein\n  the block has to be signed. The size of the request cache is increased to\n  3 * max_requests * sign_timeout or at least 256.\n  Thanks to Taavi Valjaots for the patch.\n- 2022-08-09: imjournal bugfix: segmentation fault in close journal\n  Thanks to github user t-feng for the patch.\n- 2022-08-09: net subsystem: support sha256 for StreamDriverAuthMode=\"x509/fingerprint\"\n  Thanks to github user codemaker219 for the patch.\n- 2022-08-05: imfile bugfix: message loss/duplication when monitored file is rotated\n  When a to-be-monitored file is being rotated, some messages may be lost or\n  duplicated. In case of duplication, many file lines may be duplicated\n  depending on actual timing. The whole bug was primarily timing depenedent\n  in general. It most often was visible in practice when the monitored\n  file was very frequently rotated (we had some report with every few\n  seconds).\n  Note that while we try hard to not lose any messages, input file\n  rotation always has some loss potential. This is inevitable if\n  the monitored file is being truncated.\n  Also note that this bugfix affects imfile, only. It has nothing to do\n  and no relation to rsyslog output files being rotated on HUP.\n  closes: https://github.com/rsyslog/rsyslog/issues/4797\n- 2022-08-05: ksi bugfix: optimize processing of signer queue to fix delays.\n  There is a worker queue where rsyslog KSI module collects events and signing\n  requests. When queue is processed thread is periodically put to sleep. Previous\n  implementation handles signature requests well but sleeps every time after\n  handling new file open / close event. When several log files are opened or\n  closed simultaneously process is significantly slowed down. Another issue is\n  that thread always sleeps 1000ms that may be 2x longer than aggregation round.\n  This slows down overall signing process.\n  Fix for the issue is to simply not sleep after file open / close event if there\n  are next items to be processed. To speed up the signing process, rsyslog uses\n  KSI aggregator conf. to obtain the aggregation period that is used for the sleep\n  time configuration.\n  Thanks to Taavi Valjaots for the patch.\n- 2022-08-04: ksi bugfix: possible crash fixed when several log files are opened.\n  KSI module in async mode used to request aggregator conf. every time a log\n  file was opened. When several log files were opened simultaneously\n  corresponding amount of pointless concurrent conf. requests were posted.\n  Concurrent conf. requests lead to a bug in libksi, where internal count of\n  pending requests was not decremented correctly causing system to crash.\n  Fix for the issue is to optimize the frequency of conf. requests so that only\n  one conf. requests is handled at once. Instead of checking conf. every time\n  log file is opened, conf is requested periodically after conf timeout. This will\n  affect both sync and async mode.\n  New option for KSI module introduced - sig.confinterval=\"time, s\".\n  Thanks to Taavi Valjaots for the patch.\n- 2022-08-04: openssl: add support to split tls commands by semicolon\n  - Add support to split tls commands by semicolon.\n  - Changed one test with multiple tls commands to use semicolon as\n    separator instead of newline.\n  closes: https://github.com/rsyslog/rsyslog/issues/4852\n- 2022-08-04: openssl subsystem bugfix: build issue on Solaris\n  Needed header file was added. Platforms other than Solaris did not actually need it,\n  so this bug was discovered late.\n  Thanks to Jakub Kulík for the patch.\n    Import <strings.h> when index() is used.\n- 2022-08-04: openssl: add more details to error messages\n  - Avoid LogMsg outputs osslEndSess on successfull terminated\n    connection. Only LogMsg if the connection was terminated\n    unsuccessfully.\n  - Handle SSL_ERROR_SYSCALL in both Send / osslRecordRecv,\n    do not log as error if underlaying socket was terminated\n    (ECONNRESET). Log as information instead.\n  closes: https://github.com/rsyslog/rsyslog/issues/4946\n- 2022-08-04: omclickhouse: capture additional exceptions\n    - DB::NetException\n    - DB::ParsingExceptions\n  Thanks to Victor Kustov for the patch.\n- 2022-08-04: mmanon bugfix: Simplified and fixed IPv4 digit detection.\n    - Fixed an issue with numbers above int64 in syntax_ipv4.\n      Numbers that were up to 256 above the max of an int64\n      could incorrectly be detected as valid ipv4 digit.\n    - Simplified the IPv4 digit detection function and renamed\n      to isPosByte.\n    - added testcasse for malformed IPvc4 addresses\n    closes: https://github.com/rsyslog/rsyslog/issues/4940\n- 2022-07-21: imptcp: slight tuning\n  - reduce indirect addressing to obtain more speed\n  - also a fix for an annoying typo\n  - minor other optimizations\n  - modernization of one test\n- 2022-07-20: template procesing/json: performance optimization\n- 2022-07-19: core bugfix: memory leak when free action worker data table\n  During free action worker data table when action destruct, worker instance in worker\n  data table were not null. It resulted in memory leak.\n  Thanks to github user seuzw930 for the patch.\n- 2022-07-13: omfile: support for zstd compression\n  The zstd library provides better and faster compression than zlib.\n  This patch integrates zstd as a dynamically-loadable functionality.\n  As such, no further dependencies need to be added to the rsyslog\n  base package.\n  Due to the increased performance, usage of zstd is highly recommended\n  for high-volume use cases.\n  This patch also refactor zlib compression in order to unify handling\n  in both compression cases.\n- 2022-07-07: stream cleanup: move error message to debug log, only\n  This error message is most probably rooted in a kernel problem. At\n  least knowbody knows how it can happen. It's definitely not a\n  rsyslog issue. We also can recover from it for a long time now\n  so there is no reason to irritate users by emitteing this\n  \"error\" message.\n- 2022-07-04: mmdblookup bugfix: Don't crash Rsyslog on mmdb file errors\n  Thanks to Théo Bertin (frikilax) for the patch.\n- 2022-06-28: build error fix: libbson requires out-of-date language constructs\n- 2022-06-27: OpenSSL: fix depreacted API issues for OpenSSL 3.x\n  - OpenSSL error strings are loaded automatically now\n  - Debug Callback has changed\n  - See for more:\n    https://www.openssl.org/docs/manmaster/man7/migration_guide.html\n  closes: https://github.com/rsyslog/rsyslog/issues/4912\n----------------------------------------------------------------------------------------\nScheduled Release 8.2206.0 (aka 2022.06) 2022-06-14\n- 2022-05-25: omelastisearch: allow omitting _type field\n  Allow omitting the _type field by setting it to an empty string.\n  Setting this field has been deprecated since 6.0, and support will\n  be removed in 8.0\n  Also add testbench test for empty searchType with ES 7.0\n  This checks for messages in the deprecation log and also provides\n  avoids deprecation messages from usage of transport.tcp.port in the\n  test configuration\n  Thanks to Jarkko Oranen for the patch.\n- 2022-05-18: tcpsrv/imtcp: slight performance improvements\n  This change slightly improves performance for tcpsrv-based servers.\n  This affects imtcp and imgssapi as well as some helpers.\n  No other functional change is included in this change.\n- 2022-05-12: imptcp bugfix: worker thread starvation on extreme traffic\n  When connectes were totally busy, without any pause, the assigened worker\n  did never terminate its reading loop. As such, it could not service any\n  other conenctions. If this happened multiple time and to all configured\n  workers, all other connections could not be processed at all. This extreme\n  scenario is very unlikely, as the whole issue is relatively unlikely.\n  In practice, the issue could lead to somewhat degraded performance and\n  resolved itself after some time (in practice no connection is 100% busy\n  for an extended period of time).\n  Note that this patch sets a fixed limit of 16 iterations for very busy\n  connections. This sounds like a good compromise between non-starvation\n  and performance. The exact number may be made configurable if there\n  is really need to.\n- 2022-05-11: omelasticsearch: several support option for ElasticSearch 8\n  - config params searchIndex and documentType can be empty\n  - support for Data Stream API\n  Thanks to github user EHerzog76 for these changes.\n  - new config param esVersion.major\n- 2022-05-09: tcp receiver bugfix: delay/potential hang on some error conditions\n  Error were not correctly handled in some cases for imtcp and imgssapi. This could\n  lead to a temporary stall of some connections. For ultry-low traffic systems, this\n  stall could stay for a long period of time. In most cases, it was resolved very quickly.\n  Note that imptcp was not affected.\n  Thanks to Iwan Timmer for the fix.\n- 2022-05-05: net bugfix: potential buffer overrun\n  there is heap buffer overflow vulnerability in rsyslog tcp reception components.\n  This can only happen in octet-counted mode, which is enabled by default.\n  Affected components: imtcp, imptcp, imhttp, imgssapi, imdiag when octet-counted\n  framing was enabled.\n  If the receiver ports are exposed to the public Internet AND are used\n  without authentication, this can lead to remote DoS and potentially to\n  remote code execution. It is unclear if remote code execution is\n  actually possible. If so, it needs a very sophisticated attack.\n  When syslog best practices with proper firewalling and authentication\n  is used, thean attack can only be carried out from within the Intranet\n  and authorized systems. This limits the severity of the vulnerability\n  considerably (it would obviously require an attacker already to be\n  present inside the internal network).\n  Credits to Peter Agten for initially reporting the issue and working\n  with us on the resolution.\n  fixes CVE-2022-24903\n  Advisory:\n    https://github.com/rsyslog/rsyslog/security/advisories/GHSA-ggw7-xr6h-mmr8#advisory-comment-72243\n- 2022-05-05: imptcp: set OS worker thread name\n  We now set the worker thread names to \"imptcp/<thrd nbr>\" where\n  <thrd nbr> is the numerical index (0, 1, ...) of the worker thread.\n  This enables to distinguish individual worker threads in OS tools like\n  htop. That is useful for performance testing and system monitoring.\n  The choosen name format is consistant with other similar thread\n  names inside rsyslog. For imptcp, worker threads were not yet\n  given individual names.\n  Note: \"in:imptcp\" is imptcp's \"main\" thread, which also is used\n  as a worker in some scenarios. This name was not modified.\n- 2022-04-26: mmanon bugfix: shortened IPv6 form not always anonymized\n  If the IPv6 is in non-recommended form followed by a 5 digit port number, it\n  is not anonymized.\n  A reproducer for this is: 1a00:c820:1180:c84c::ad3f:d991:ec2e:49255\n  closes https://github.com/rsyslog/rsyslog/issues/4856\n- 2022-04-22: mmdblookup fix: wrong copy of buffer\n  ...following parse of libmaxminddb's return after a successful search sometimes\n  failed to return specific field from data.\n  Thanks to Théo Bertin for the patch.\n- 2022-04-22: mmdblookup: several enhancements\n  - support arrays in MMDB entry\n  - support escaped quotes '\"' in MMDB entry\n  - support '<' characters in MMDB entry, when in a field\n  - support '}' characters in MMDB entry, when in a field\n  Thanks to Théo Bertin for the patch.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2204.1 (aka 2022.04) 2021-05-05\n- security bugfix: potential buffer overrun in imptcp, imtcp, imgssapi and others\n  This addresses CVE-2022-24903\n  see also https://github.com/rsyslog/rsyslog/security/advisories/GHSA-ggw7-xr6h-mmr8\n----------------------------------------------------------------------------------------\nScheduled Release 8.2204.0 (aka 2022.04) 2021-04-19\n- 2022-04-18: gnutls bugfix: possibility of infinite loop\n  There was a rare possibility that the E_AGAIN/E_INTERRUPT handling\n  could cause an infinite loop (100% CPU Usage), for example when a TLS\n  handshake is interrupted at a certain stage.\n  * After gnutls_record_recv is called, and E_AGAIN/E_INTERRUPT error\n    occurs, we need to do additional read/write direction handling\n    with gnutls_record_get_direction.\n  * After the second call of gnutls_record_recv (Expand buffer)\n    we needed to also check the eror codes for E_AGAIN/E_INTERRUPT\n    to do propper errorhandling.\n  * Add extra debug output based on ossl driver.\n  * Potential fix for 100% CPU Loop Receiveloop after gtlsRecordRecv\n    in doRetry call.\n  closes https://github.com/rsyslog/rsyslog/issues/4834\n  closes https://github.com/rsyslog/rsyslog/issues/4818\n  closes https://github.com/rsyslog/rsyslog/issues/4638\n- 2022-04-17: core/bugfix: errorfile could grow over max configures size\n   When action.errorfile.maxsize configuration option is enabled and error file\n   already has a certain size smaller than max size configured, it is increasing\n   higher than configured max size as the error file is considered to be zero in code.\n   This fix reads current error file size and limits the size to the maximum\n   size configured.\n   Thanks to Sergio Arroutbi for the patch.\n   fixes https://github.com/rsyslog/rsyslog/issues/4821\n- 2022-04-17: omkafka bugfix: potential misadressing\n  The `failedmsg_entry` expects a null-terminated string in `key`, but\n  here we allocate with malloc and copy a string-with-length-n into only\n  the first n bytes. If the final byte is null, this is by coincidence\n  only.\n  This was observed by means of seeing random binary data appended to\n  keys submitted to kafka apparently at random. This could also result\n  in more severe problems, inclusing a segfault.\n  Thanks to David Buckley for the patch.\n- 2022-04-06: added new \"FullJSONFmt\" standard template (with addtl fields)\n  This comes handy for a number of use cases, especially with ElasticSearch.\n  Thanks to Art O Cathain for the patch.\n- 2022-04-04: imfile: potential processing delay\n  This was mentioned by Mikko Kortelainen without exact details on what exactly\n  this could cause in practice. But we were confident enough that it is worth\n  merging (though it does not look like something that brought real problems in\n  practice, as we do not know any related reports).\n  see also: https://github.com/rsyslog/rsyslog/pull/4445\n  Thanks to Mikko Kortelainen for the patch.\n- 2022-04-04: bugfix: cosmetic data races\n  there was a more or less cosmetic data race which could happen when children\n  processes died in quick sequence. Even then, no real harm happened, as all\n  children were reaped eventually.\n  A similar data race exists for HUP processing.\n  However, these races polluted TSAN test runs, and so we fixed them\n- 2022-04-01: add property options to support ISO week/year number\n  Thanks to Mattia Barbon for the patch.\n- 2022-04-01: core bugfix: \"action suspended\" message was emitted even when turned off\n  Most messages were diasabled, but there was one part of the code that ignored the\n  user configuration.\n  Thanks to Deyneko Aleksey for the patch.\n- 2022-03-31: testbench: add more tests for rscript comparison operations\n- 2022-03-31: core bugfix: make internal logs emitted during HUP procesing appear quicker\n  After call doHUP(), probably there is a internal log in the list. However, it\n  will not be wrote out immediately, because the mainloop will be blocked at\n  pselect in wait_timeout() until a long timeout or next message occur.\n  More deadly, the log may be lost if the deamon exits unexpectedly.\n  We might as well put processImInternal() after doHUP(), so that the message\n  will be flushed out immediately.\n  Fixes: 723f6fdfa6(rsyslogd: Fix race between signals and main loop timeout)\n  Thanks to Yun Zhou for the patch.\n- 2022-03-20: refactor: Move the parser directive to the main config\n  Thanks to Attila Lakatos for the patch.\n- 2022-03-16: refactor: ake the main message queue part of the config\n  The intent of this patch is to make the main message queue part of the main config.\n  It will help us to proceed towards dynamic configuration reload.\n- regression bugfix: rsyslog may segfault during startup\n  glblGetMaxLine() might be called even before the main configuration file exists\n  resulting unexpected behavior, most probably segmentation fault. This is addressed\n  by re-introducing the old default of 8KiB. The problem was introduced earlier in\n  2022.\n- regression fix: script string comparison did not work correctly\n  In rscript, comparison operations on strings did not work correctly\n  and returned false results. This is cause by a regression in commit\n  5cec5dd634e0. While it fixed number comparisons, it introduced new\n  problems in string comparisons, which were not present before. Note\n  that most items in rsyslog are strings, so this can actually cause\n  some problems.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2202.0 (aka 2022.02) 2022-02-15\n- 2022-02-14: imfile bugfix: remove cause for \"internal error message\" (not causing harm)\n  When any message is output into a renamed input file, rsyslogd output the following:\n  message.\n  imfile: internal error? inotify provided watch descriptor 7 which we could not find\n          in our tables - ignored\n  When rsyslogd detects the inode change, it deletes the entry from wdmap[]. But,\n  the watch descriptor is not removed. Some application like sssd outputs some messages\n  (like \"HUP signal was received!!\") after HUP signal is received and before switching\n  into the new log file. And, the above messages can be output every log rotation.\n  This situation is now resolved.\n  Thanks to Masahiro Matsuya for the patch.\n- 2022-02-04: rscript bugfix: literal numbers were not compared correctly\n  This problem occurred when numbers were used in rsyslog.conf in\n  the set statement, e.g.\n  set $nbr = 1234;\n  In this case, during comparisons, the number was actually interpreted\n  as a string with digits. Thus numerical comparisons lead to unexpected\n  results. Even more so, as in other places of the code they were\n  treated as native numbers.\n  This is now fixed. We cannot outrule that this causes, in border cases,\n  change of behavior to existing configs. But it is unlikely and the\n  previous behaviour was a clear bug and very unintuitive. This in our\n  opinion it is justified to risk a breaking change for an expected\n  very minor subset of installations, if any such exists at all.\n  closes https://github.com/rsyslog/rsyslog/issues/4770\n- 2022-02-04: omelasticsearch bugfix: indexSuccess impstats counter in bulkmode wrong\n  When bulkmode is enabled, and a batch was processed without any\n  failures (errors is false), the code that increments the indexSuccess\n  impstats counter was never reached.\n  closes: https://github.com/rsyslog/rsyslog/issues/4794\n- 2022-01-17: imkmsg bugfix: effectively disabled input on error reading kmsg\n  Due to a program bug, imkmsg could not recover from an kmsg read error.\n  Note that recovering is possible and was intended.\n  Thanks to Kailash Sethuraman for the patch.\n- 2022-01-17: imtcp bugfix: worker threads were not properly terminated\n  Graceful shutdown of Rsyslog could lead to segmentation faults when\n  multiple imtcp inputs were being used. That is because the rest of the\n  tcpsrv threads are left behind running, while their underlying objects\n  are being disposed by the main thread as part of the module\n  de-initialization.\n  closes:  https://github.com/rsyslog/rsyslog/issues/4776\n  Thanks to Gabor Orosz <goro@goro.io> for the analysis and patch.\n- 2022-01-07: omlibdbi bugfix: use-after-free bug\n  This occurred in when sqllite driver was used. Depending on circumstances, this had\n  no visible issues (often) up to rsyslog segfault. The busier rsyslog is, the more\n  likely a bad outcome.\n- 2022-01-06: omhttp bugfix: memory leak in lokirest batchmode\n  A JSON object was created (valueObj) but not used and also not released causing a\n  memory leak. Over time, this could lead to memory overcomittent.\n  closes: https://github.com/rsyslog/rsyslog/issues/4766\n----------------------------------------------------------------------------------------\nScheduled Release 8.2112.0 (aka 2021.12) 2021-12-16\n- 2021-12-14: refactor:Deallocate outchannel resources in rsconf destructor\n  Thanks to Attila Lakatos for the patch.\n- 2021-12-14: refactor: use runConf instead of loadConf in ratelimiting during runtime\n  Thanks to Attila Lakatos for the patch.\n- 2021-11-22: new contribtion: URL parser module function using libfa\n  Thanks to Théo Bertin for the patch.\n- 2021-11-18: mmanon: relax IPv6 detection - improve anonymization\n  We so far tried to ensure a value is really an IPv6 address, in order\n  to avoid to mangle with just similar-looking information elements.\n  However, this lead to misdetection for unusual formats, e.g. when a\n  port is appended to a numerical IPv6 adress given without braces [].\n  This has been changed now. In a sense, we now prefer to err on the\n  side of privacy.\n  BEHAVIOR CHANGE:\n  Previously, a suspect value was not anonymized, and thus some other\n  elements (like some MAC addresses) preserved. Now the opposite is\n  true, and we anonymize anything that looks close enough to be an\n  IPv6 address. This improves anonymization.\n  closes https://github.com/rsyslog/rsyslog/issues/4725\n- 2021-11-10: ruleset bugfix: ruleset queue was incorrectly named\n  The ruleset was incorrectly and unusably named. This was a regeression\n  from 4a63f8e9629c3c9481a8b6f9d7787e3b3304320b.\n  Many thanks to github user digirati82 for alerting us.\n  closes https://github.com/rsyslog/rsyslog/issues/4730\n- 2021-11-10: omsnmp: update module to current IP best practices\n  The omsnmp module uses the inet_addr() function to convert the Internet host address\n  from IPv4 numbers-and-dots notation into binary data in network byte order. If the input\n  is invalid, INADDR_NONE (usually -1) is returned. Use of this function is problematic\n  because -1 is a valid address (255.255.255.255). We should avoid its use in favor of\n  inet_aton(), inet_pton(3), or getaddrinfo(3), which provide a cleaner way to indicate\n  error return [1].\n  This is just a request to satisfy covscan, so no error is reported at all.\n  Thanks to Attila Lakatos for the patch.\n- 2021-10-27: ommysql: fix threading bug\n  When the MariaDB connection was (re)established, old or NULL handle\n  could be used. This is fixed now.\n  We need to synchronize access to the mysql handle, because multiple threads\n  use it and we may need to (re)init it during processing. This could lead to\n  races with potentially wrong addresses or NULL accesses. If this really\n  matters mostly depends on the MariaDB/MySQL client library. It looks like\n  they guard against fatal failuers. Anyhow, logging errors inside rsyslog\n  could happen in any case.\n- 2021-10-25: testbench: false positive when impstats was not built\n  Test omfwd_fast_imuxsock failed when impstats was not built. This\n  has been corrected, test is now only executed when impstats is\n  present.\n- 2021-10-25: imtcp: add support for permittedPeers setting at input() level\n  The permittedPeers settig was actually forgotten during the refactoring\n  of TLS input() level settings. This functionality is now added.\n  closes: https://github.com/rsyslog/rsyslog/issues/4706\n----------------------------------------------------------------------------------------\nScheduled Release 8.2110.0 (aka 2021.10) 2021-10-19\n- 2021-10-13: config bugfix: global(security.abortonidresolutionfail=) did not work\n  when used with rscript based configuration, it was not checked.\n- 2021-10-13: config bugfix: global param $privDropToUser did not work correctly\n  The parameter was not implemented for rscript based configuration and\n  did not properly apply to legacy configuration. In essence, it almost always\n  did not work as expected.\n  see also: https://github.com/rsyslog/rsyslog/issues/4642\n  see also: https://github.com/rsyslog/rsyslog/commit/cbcaf2c7e5b67e5465e47bc7cc67af2eae47bd31\n- 2021-10-12: rscript bugfix: ruleset called async when ruleset had queue.type=\"direct\"\n  The call rscript statement is able to call a rule set either synchronously or\n  asynchronously. We did this, because practice showed that both modes\n  are needed. For various reasons we decided to make async\n  calls if the ruleset has a queue assigned and sync if not.\n  To know if a \"queue is assigned\" we just checked if queue parameters were\n  given. It was overlookeded the case of someone explicitly specifying a\n  \"direct  queue\", aka \"no queue\". As such, queue=\"direct\" triggered async\n  calls. That in turn meant that when a write operation to a variable was\n  made inside that rule set, other rulesets could or could not see the\n  write. While if was often not seen, this was a data race where the\n  change could also be seen by the outside.\n  This is now fixed. No matter if queue.type=\"direct\" is specified or\n  left out, the call will always by synchronous. Any values written to\n  variables will also be seen by the \"outside world\" in later processing\n  stages.\n  Note that this has some potential to BREAK EXISTING CONFIGURATIONS.\n  We deem this acceptable because:\n  1. this was racy at all, so unexpected behaviour could alwas occur\n  2. it is actually unlikely that someone used the triggering conditions\n     in practice. But we can not outrule this, especially when the\n     configuration was auto-generated.\n  Potential compatibility issues can be solved by defining a small\n  array-memory queue on the ruleset in question instead of specifying\n  direct type.\n  Again, we expect that almost all users will never experience any\n  problems. If you do, however, please let us know: we may add an\n  option to re-enable the bug.\n- 2021-10-12: ksi bugfix: locking bug fixed in rsksiCtxOpenFile\n  Thanks to Taavi Valjaots for the patch.\n- 2021-10-11: core bugfix: fix typo in error message\n  Thanks to github user jkschulz for the patch.\n- 2021-10-11: tcpsrv bugfix: compilation without exceptions\n  tcpsrv.c:992:1: error: label at end of compound statement\n   finalize_it:\n   ^~~~~~~~~~~\n  Quoting from pthread.h:\n    pthread_cleanup_push and pthread_cleanup_pop are macros and must always\n    be used in matching pairs at the same nesting level of braces.\n  Amends commit bcdd220142ec9eb106550195ba331fd114adb0bd.\n  Thanks to Orgad Shaneh for the patch.\n- 2021-10-11: mkubernetes bugfix: no connection retry to kubernetes APP\n  When connection to the kubernates API was not possible, mmkubernetes\n  did not retry. This does now happen via regular rsyslog retry\n  mechanism.\n  Thanks to github user jayme-github for the analysis and patch.\n  closes https://github.com/rsyslog/rsyslog/issues/4669\n- 2021-10-11: openssl bugfix: Correct gnutlsPriorityString (custom ciphers) behaviour\n  - Only apply default anon ciphers if gnutlsPriorityString is NULL and\n    Authentication Mode is set to anon. Otherwise we do not set them\n    as they overwrite custom Ciphers.\n  - Added two tests for custom cipher configuration (anon/certvalid mode).\n  - Add call for applyGnutlsPriorityString if gnutlsPriorityString changes.\n  - Merged openssl init code from Connect into osslInitSession\n  closes: https://github.com/rsyslog/rsyslog/issues/4686\n- 2021-10-11: build issue: handle undefined MAXPATHLEN, PATH_MAX\n  While we handled missing PATH_MAX, we did not handle missing MAXPATHLEN.\n  This happens under GNU/Hurd, because there is no official limit. However,\n  extremely long pathes are extremely uncommon, so we do not want to\n  use slow dynamic alloc each time we need to build pathes. So we\n  impose a limit of 4KiB, which should be fairly enough. Note that\n  this obviously increases stack requirements in GNU/Hurd.\n  As suggested by Michael Biebl, we have now implemented a generic\n  approach to handle this via autoconf.\n- 2021-09-12: openssl: extended output information on connection failure\n  Now includes the remote client/server IP address in the log output.\n- 2021-09-12: imhttp enhancements - query parameter ingestion & basic auth support\n  - Basic Authentication support & tests\n    * configured via imhttp option \"basicAuthFile\". This option should be configured\n      to point to your htpasswd file generated via a standard htpasswd tool.\n    tests:\n    * imhttp-post-payload-basic-auth.sh\n    * imhttp-post-payload-basic-auth-vg.sh\n  - Query parameter ingestion capability & tests\n    use t `addmetadata` option to inject query parameters into\n    metadata for imhttp input.\n  DISTRO PACKAGERS BEWARE: NEW DEPENDENCY FOR IMHTTP:\n  libaprutil (libaprutil1-dev on debian'ish, apr-util-devel on Red Hat)\n  Thanks to Nelson Yen for the patch.\n- 2021-09-07: testbench bugfix: privdrop tests under root user did not work\n  When running under root, the privdrop tests did not properly work. This\n  patch fixes the issue and skips test where necessary.\n  This also includes some modernization of the related tests.\n  closes https://github.com/rsyslog/rsyslog/issues/4619\n- 2021-09-07: core/ratelimiting: fix rate limiting for already parsed messages\n  Rate limiting may not have worked if the considered message had already\n  been parsed (not having NEEDS_PARSING in msgFlags).\n  This affects also imuxsock in its default configuration\n  (useSpecialParser=\"true\" and ratelimit.severity=\"1\")\n- 2021-09-07: core bugfix: use of property $wday terminates string\n  When $wday is used inside a template, all template parts after it\n  are ignored. For exmaple:\n  template(name=\"json_filename\" type=\"string\" string=\"/var/log/%$wday%.log\")\n  would generate something like \"/var/log/0\" - the \".log\" part would be\n  missing. For the same reason, $wday can not reliably checked in script\n  filters.\n  Thanks to Alain Thivillon for reporting the bug and providing an\n  excellent analysis, which essentiellay was exactly this fix here.\n  closes https://github.com/rsyslog/rsyslog/issues/4670\n- 2021-09-07: core/queue bugfix: potential misadressing when queue discarded messages\n  When a discard mark was set, the queue was very busy and discarded messages, a\n  NULL pointer access could happen. Depending on circumstances, several problems\n  could occur, including a SEGFAULT. This is now fixed.\n  closes: https://github.com/rsyslog/rsyslog/issues/4437\n- 2021-09-07: imdiga bugfix: iOverallQueueSize calculation could be incorrect\n  This issue only affects testbench and rsyslog development debugging. The active\n  messages counter, used for synchronizing test steps, went wrong when the queue\n  discarded messages on it's consumer thread. Now fixed.\n- 2021-09-06: gnutls driver: SAN priority did not work correctly on server side\n  PrioritizeSAN was not propagated when accepting a new connection, this is now fixed.\n  Thanks to Attila Lakatos for the patch.\n- 2021-08-24: config: implement script-equavalent for $PrivDrop* statements\n  closes https://github.com/rsyslog/rsyslog/issues/891\n----------------------------------------------------------------------------------------\nScheduled Release 8.2108.0 (aka 2021.08) 2021-08-17\n- 2021-08-16: openssl tls: Improved error message output on tls failures.\n  closes: https://github.com/rsyslog/rsyslog/issues/4645\n- 2021-08-16: impstats: add percentile metrics tracking functionality\n  Brief overview:\n  TO configure tracking percentile metrics in rainerscript:\n  User would need to define:\n    - which percentile to track, such as [p50, p99, etc.]\n    - window size - note, this correlates directly with memory usage to\n    track the percentiles.\n  To track a value, user would call built-in function `percentile_observe()` in their configurations to\n  record an integer value, and percentile metrics would be emitted every\n  impstats interval.\n  Thanks to Nelson Yen for the patch.\n- 2021-08-12: imfile: add parameter \"ignoreolderthanoption\"\n  instructs imfile not to ingest a file that has not been modified in the\n  specified number of seconds.\n  Thanks to github user yanjunli76 for the patch (submitted from Nelson Yen)\n- 2021-08-10: imklog bugfix: invalid memory adressing, could cause abort\n  This is a regeression from commit 94c4a87. It introduced a free() call\n  using an object that was no longer valid (the main pointer to the\n  to-be-freed object) was already freed at time of use. This could\n  cause various issues, including a segfault.\n  Note: this bug was triggerred only during late phase of rsyslog\n  shutdown, so it did not affect regular operation.\n  Special thanks to github user wxiaoguang for analyzing the issue\n  and providing a draft fix proposal, on which this patch builds.\n  see also https://github.com/rsyslog/rsyslog/pull/4629\n  closes https://github.com/rsyslog/rsyslog/issues/4625\n- 2021-08-09: imfile bugfix: deleteStateOnFileDelete missed some state files\n  When the log file is deleted, imfile would attempt to delete the statefile but it\n  was missing the file_id part of the statefile name. This means the statefiles were\n  only removed in the log file was less than 512 characters, because for very small\n  files the file ID hash is not created. This lead to some state files not being\n  deleted.\n  Thanks to pearseimperva for the patch.\n- 2021-08-09: imfile bugfix: hash char invalidly added in readmode != 0\n  If imfile is ingesting log files with readMode set to 2 or 1, the resulting\n  messages all have a '#' character at the end. This patch corrects the behaviour.\n  Note: if some external script \"supported\" the bug of extra hash character at\n  the end of line, it may be necessary to update them.\n  closes https://github.com/rsyslog/rsyslog/issues/4491\n- 2021-08-09: omelasticsearch bugfix: errorFile mutex was not consistently locked\n  Lock the file during SIGHUPs to avoid issues with concurrent accesses by\n  writeDataError().\n  Thanks to François Poirotte for the patch.\n- 2021-08-09: imudp: add socket type (IPv4 vs. 6) to input name\n  Most importantly, the input name is used for stats counter names as\n  well. Previously, the same name was used for IPv4 and IPv6, so we had\n  two counters with an equal name. That left users puzzled.\n  Unfortunately, this change can potentially require changes to existing\n  analysis scripts, as the name is now slightly different.\n  closes https://github.com/rsyslog/rsyslog/issues/4364\n- 2021-08-06: omfwd: add capability for action-specific TLS certificate settings\n  This permits to override the global definitions for TLS certificates\n  at the action() level.\n- 2021-08-06: imfile bugfix: file handle leak if \"freshStartTail\" was turned on\n- 2021-08-05: imtcp: permit to use different certificate files per input/action\n  This completes the ability to override global/default TLS settings at the imtcp\n  input() level. Support for using multiple CAs/Certs per Connection is now provided.\n- 2021-08-04: imptcp bugfix: keep alive interval was incorrectly set\n  The interval was accidentally set to keep alive interval. This has been\n  corrected.\n  closes https://github.com/rsyslog/rsyslog/issues/4609\n- 2021-07-08: openssl network driver bugfix: small memory leak\n  Fixes a static, non-growing memory leak which existed when parameter\n  \"GnutTLSPriorityString\" was used. This was primarily a cosmetic issue,\n  but caused some grief during development in regard to memory leak\n  detectors.\n  Note: yes, this is for openssl -- the parameter name is historical.\n- 2021-07-07: psrv bugfix: abort if no listener could be started\n  Modules (like imtcp and imdiag) which use tcpsrv could abort or\n  otherwise malfunction if no listener for a specific input could\n  be started.\n  Found during implementing a new feature, no report from practice.\n  But could very well happen.\n- 2021-07-07: mmkubernetes bugfix: apiserver error handling\n  - Added graceful handling of apiserver errors with unexpected responses,\n    i.e., anything other than 200, 404, or 429. Idea is that apiserver\n    transient error state will recover. We don't want mmkubernetes to miss\n    metadata resolution for containers that don't have cached metadata.\n    During these transient error states, mmkubernetes will provide basic\n    container file path based resolution of namespace and pod metadata for\n    new pods whose metadata is not yet cached. After this error state\n    recovers, mmkubernetes is expected to resume its metadata resolution as\n    expected.\n  - Added a unit test case for apiserver return 500 with changes to mock server\n  -  Fixed existing unit test that was failing due to missing expected results file\n  -  Added mmkubernetes unit tests to testbench\n  Thanks to Abdul Waheed for the patch (submitted from Nelson Yen).\n- 2021-07-07: ommongodb bugfixes\n  - Fix Segmentation fault when server is down\n  - Add server connexion check while resuming\n  Thanks to Kevin Guillemot for the patch.\n- 2021-06-28: omkafka improvements\n  - drain librdkafka queues and retry later during rsyslog restart or hup. This\n    re-injects messages into rsyslog's native queues.\n  - add statsname on per kafka instance for better visibility\n  - omkafka - count errors related ssl as \"errors_ssl\"\n  Thanks to Nelson Yen for the patch.\n- 2021-06-23: some CI/QA improvements, Travis-CI disabled\n  For the time being, Travis CI is disabled because it was outdated and Travis also\n  changed their system. We will re-evaluate if we re-enable it. Since quite a while\n  the Travits tests were redundant with the rest of CI, so this does not reduce\n  coverage.\n- 2021-06-23: omhttp bugfix: dynrestpath param in batch mode invalid\n  When batchmode was used, the templates could not be used to\n  expand dynrestpath. We are now storing the restpath param\n  within the batch data if we are in batch mode.\n  When we are in batch mode, and the restpath value changes, the\n  batch is submitted and reinitialized\n  closes: https://github.com/rsyslog/rsyslog/issues/4567\n- 2021-06-17: add predefined template RSYSLOG_SyslogRFC5424Format\n  This is essentially the same as RSYSLOG_SyslogProtocol23Format with\n  a better name and a fix to remove the unnecessary LF at the end of\n  the message.\n  The different name also enables us to fix the LF issue without\n  any concern about backwards compatibility.\n  closes https://github.com/rsyslog/rsyslog/issues/4384\n- 2021-06-17: impstats/bugfix: _sender_stats reports integer counter as string\n  Note that this introduces a small backwards incompatibility: in previous output\n  the field was of string type, now it is integer (as intended). We discussed this\n  on the mailing list and the overwhelming thought was that this is not a problem\n  because almost all analysis backends are able to cover that format change. This made\n  the bugfix essentially costmetic.\n  HOWEVER, if you still experience issues, please let us know. We can add an option\n  to provide the previous format, and just spared to do so because there was no\n  evidence it was needed.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2106.0 (aka 2021.06) 2021-06-15\nNOTE: the prime new feature is support for TLS and non-TLS connections\nvia imtcp in parallel. Furthermore, most TLS parameters can now be overriden\nat the input() level. The notable exceptions are certificate files, something\nthat is due to be implemented as next step.\n- 2021-06-14: new global option \"parser.supportCompressionExtension\"\n  This permits to turn off rsyslog's single-message compression extension\n  when it interferes with non-syslog message processing (the parser\n  subsystem expects syslog messages, not generic text)\n  closes https://github.com/rsyslog/rsyslog/issues/4598\n- 2021-05-12: imtcp: add more override config params to input()\n  It is now possible to override all module parameters at the input() level. Module\n  parameters serve as defaults. Existing configs need no modification.\n- 2021-05-06: imtcp: add stream driver parameter to input() configuration\n  This permits to have different inputs use different stream drivers\n  and stream driver parameters.\n  closes https://github.com/rsyslog/rsyslog/issues/3727\n- 2021-04-29: imtcp: permit to run multiple inputs in parallel\n  Previously, a single server was used to run all imtcp inputs. This\n  had a couple of drawsbacks. First and foremost, we could not use\n  different stream drivers in the varios inputs. This patch now\n  provides a baseline to do that, but does still not implement the\n  capability (in this sense it is a staging patch).\n  Secondly, we now ensure that each input has at least one exclusive\n  thread for processing, untangling the performance of multiple\n  inputs from each other.\n  see also: https://github.com/rsyslog/rsyslog/issues/3727\n- 2021-04-27: tcpsrv bugfix: potential sluggishnes and hang on shutdown\n  tcpsrv is used by multiple other modules (imtcp, imdiag, imgssapi, and,\n  in theory, also others - even ones we do not know about). However, the\n  internal synchornization did not properly take multiple tcpsrv users\n  in consideration.\n  As such, a single user could hang under some circumstances. This was\n  caused by improperly awaking all users from a pthread condition wait.\n  That in turn could lead to some sluggish behaviour and, in rare cases,\n  a hang at shutdown.\n  Note: it was highly unlikely to experience real problems with the\n  officially provided modules.\n- 2021-04-22: refactoring of syslog/tcp driver parameter passing\n  This has now been generalized to a parameter block, which makes it much cleaner and\n  also easier to add new parameters in the future.\n- 2021-04-22: config script: add re_match_i() and re_extract_i() functions\n  This provides case-insensitive regex functionality.\n  closes https://github.com/rsyslog/rsyslog/issues/4429\n----------------------------------------------------------------------------------------\nScheduled Release 8.2104.0 (aka 2021.04) 2021-04-20\n- 2021-04-19: new contributed module imhiredis\n  Thanks to Théo Bertin (frikilax) for the patch.\n- 2021-04-19: new built-in function get_property() to access property vars\n  Provides ability to evaluate a rsyslog variable using dynamically\n  evaluated parameters.\n  1st param is the rsyslog param, 2nd param is a key, can be an array\n  index or key string.\n  Useful for accessing json sub-objects, where a key\n  needs to be evaluated at runtime. Can be used to access arrays as well.\n  Thanks to Nelson Yen for contributing this module.\n- 2021-04-19: mmdblookup: add support for mmdb DB reload on HUP\n  Thanks to Théo Bertin (frikilax) for the patch.\n- 2021-04-19: script bugfix: empty array in foreach() improperly handled\n  When running a foreach() loop inside a ruleset, if the json array/object iterated\n  over is empty but valid, the foreach will make the message processing in the\n  ruleset abort operation, no following operation (such as actions) will be\n  executed after this.\n  Thanks to Théo Bertin (frikilax) for the patch.\n- 2021-04-19: imjournal bugfixes (handle leak, empty file)\n  Flush the FILE* buffer before rename & fsync in order\n  to not end up syncing an empty file.\n  Also, close WorkDir on fsync in order to prevent\n  file descriptor leakage.\n  Thanks to github user gerd-rausch for the fix.\n- 2021-04-06: new contributed function module fmunflatten\n  This commit adds a new rainerscript function to unflatten keys in a JSON tree. It\n  provides a way to expand dot separated fields.\n  <result> = unflatten(<source-tree>, <key-separator-character>);\n  It allows for instance to produce this: { \"source\": { \"ip\": \"1.2.3.4\", \"port\": 443 } }\n  from this source data: { \"source.ip\": \"1.2.3.4\", \"source.port\": 443 }\n  Thanks to Julien Thomas for the contribution.\n- 2021-02-22: test bugfix: some tests did not work with newer TLS library versions\n  Newer versions provide TLS versions that cannot be disabled in older versions as they\n  are unknown there. This is solved by setting restrictions in multiple steps. For\n  older library versions, the final step will error out, but the other one be applied.\n  This permits to achieve proper test results.\n  closes: https://github.com/rsyslog/rsyslog/issues/4534\n- some improvements to project CI\n----------------------------------------------------------------------------------------\nScheduled Release 8.2102.0 (aka 2021.02) 2021-02-16\n- 2021-02-15: omfwd: add stats counter for sent bytes\n  Thanks to John Chivian for suggesting this feature.\n- 2021-02-15: omfwd: add error reporting configuration option\n  RSyslog on a plain TCP cannot guarantee the message delivery\n  without using RELP protocol. Besides that the logs may be\n  flooded with connection errors making the rest of messages\n  difficult to find. To alleviate the problem (see issue 3910),\n  this patch adds a configuration option that enables to reduce\n  the number of network errors logged and reported.\n  For example, if each 10th network error message should be logged,\n  the rsyslog configuration has to be updated as follows.\n  action(type=\"omfwd\" Target=\"<IP_ADDR>\" Port=\"<PORT>\" Protocol=\"tcp\" ConErrSkip=\"10\")\n  Thanks to Libor Bukata for the patch.\n- 2021-02-15: action stats counter bugfix: failure count was not properly incremented\n  In some cases the counter was not incremented, most notably with transaction-enabled\n  actions.\n  Thanks to github user thinkst-marco for the patch.\n- 2021-02-15: action stats counter bugfix: resume count was not incremented\n  And so it always stayed at zero.\n  Thanks to github user thinkst-marco for the patch.\n- 2021-02-15: omfwd bugfix: segfault or error if port not given\n  If omfwd is configured via RainerScript config format and the \"port\"\n  parameter is not given, a segfault will most likely happen on\n  connection establishment for TCP connections. For UDP, this is\n  usually not the case.\n  Alternatively, in any case, errors may happen.\n  Note that the segfault will usually happen right on restart so this\n  was easy to detect.\n  We did not receive reports from practice. Instead, we found the bug\n  while conducting other work.\n- 2021-01-29: lookup table bugfix: data race on lookup table reload\n  A data race could happen when a lookup table was reloaded. We found\n  this while moving to newer version of TSAN, but have no matching\n  report from practice. However, there is a potential for this to cause\n  a segfault under \"bad circumstances\".\n- 2021-01-18: testbench modernization\n  Bump dependency versions, use newer distro versions for some tests.\n  Make kafka distcheck separate to help diagnose flaky kafka tests.\n- 2021-01-16: testbench: fix invalid sequence of kafka tests runs\n  kafka tests can not run well in parallel (mostly due to ressource\n  constraints on CI machines). Accidentally, this was not enforced for\n  one of the tests. That could lead to random failures and false positives.\n- 2021-01-14: testbench: fix kafkacat issues\n  The kafkacat tool has an upper limit of how many messages it can send\n  at once. Going over that limit causes messages loss. The exact limit\n  seems to depend on the environment. This causes testbench false positives.\n  This commit fixes two related issues:\n  - errors during kafkacat run were not detected - this has been added\n  - we now have a \"max messages at once\" setting, after which kafkacat\n    is restarted for the next batch of messages. It currently is set\n    to 25,000 msgs per incarnation. All tests loop now to send the\n    required number of messages. This has been fixed at the testbench\n    framework level, so no need to adjust individual tests.\n- 2021-01-14: testbench: fix year-dependendt clickhouse test\n  A test had the year value hardcoded and as such failed whenever the\n  year changed. This patch corrects that.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2012.0 (aka 2020.12) 2020-12-08\n- 2020-12-07:  testbench bugfix: some tests did not work in make distcheck\n  - certificate file missing in dist tarball\n  - some test cases did not properly specify path to cert file\n  Thanks to Michael Biebl for alerting us and providing part of\n  the fix.\n  closes https://github.com/rsyslog/rsyslog/issues/4446\n- 2020-12-07: immark: rewrite with many improvements\n  - mark message text can now be specified\n  - support for rulesets\n  - support for using syslog API vs. regular internal interface\n  - support for output template system\n  - ability to specify is mark message flag can be set\n  - minor changes and improvements\n- 2020-11-30: usability: re-phrase error message to help users better understand cause\n  see also https://github.com/rsyslog/rsyslog/issues/3910\n- 2020-11-10: add new system property $now-unixtimestamp\n  Among others, this may be used as a monotonic counter\n  for doing load-balancing and other things.\n  Thanks to Nicholas Brown for suggesting this feature.\n- 2020-11-04: omfwd: add new rate limit option\n  Adding new rate limit option to omfwd for rate limiting\n  syslog messages sent to the remote server\n  ratelimit.interval:\n      Specifies the rate-limiting interval in seconds.\n      Default value is 0, which turns off rate limiting.\n  ratelimit.burst\n          Specifies the rate-limiting burst in number of messages.\n  closes https://github.com/rsyslog/rsyslog/issues/4423\n  Thanks to Dinesh-Ramakrishnan for the patch.\n- 2020-11-03: omfwd bug: param \"StreamDriver.PermitExpiredCerts\" is not \"off\" by default\n  The default behaviour of expired certificates of stream driver in TLS mode, should\n  have been that the see tcp transmission is closed due to expired certificates, and\n  error messages emited in rsyslog status. This was not the case. That in turn could\n  lead to permitting sessions which should not be permitted.\n  Thanks to Vincent Zhu for alerting us and providing a great problem analysis\n  closes: https://github.com/rsyslog/rsyslog/issues/4425\n----------------------------------------------------------------------------------------\nScheduled Release 8.2010.0 (aka 2020.10) 2020-10-20\n- 2020-10-13: gnutls TLS subsystem bugfix: handshake error handling\n  If the tls handshake does not immediatelly finish, gnutls_handShake is called in\n  doRetry handler again. However the error handling was not\n  complete in the doRetry handler. A failed gnutls_handShake call\n  did not abort the connection and properly caused unexpected\n  problems like in issues:\n  https://github.com/rsyslog/rsyslog/issues/4270\n  https://github.com/rsyslog/rsyslog/issues/4288\n- 2020-10-13: core/msg bugfix: memory leak\n  There is a missing call to json_object_put(json) if the call to\n  jsonPathFindParent() failed. It's leaking memory. Depending on workload and config,\n  this leak can potentially grow large (albeit we did not see reports from practice).\n  Thanks to Julien Thomas for the patch.\n- 2020-10-13: core/msg bugfix: segfault in jsonPathFindNext() when <root> not an object\n  The segfault gets happens when <bCreate> is 1 and when the <root>\n  container where to insert the <namebuf> key is not an object.\n  Here is simple reproducible test case:\n  // ensure we start fresh\n  // unnecessary if there was no previous set\n  unset $!;\n  set $! = \"\";\n  set $!event!created = 123;\n  Thanks to Julien Thomas for the patch.\n- 2020-10-13: openssl TLS subsystem: improvments of error and status messages\n  Adding error logs at the ssl handshake failure scenarios.\n  Adding the header \"nsd_ossl:\" tag to these logs to identify\n  the origin module from which logs are generated.\n  Thanks to Anusha Pai G for the patch.\n- 2020-10-06: add 'exists()' script function to check if variable exists\n  This implements a way to check if rsyslog variables (e.g. '$!path!var') is\n  currently set of not.\n  Sample: if exists($!somevar) then ...\n  closes https://github.com/rsyslog/rsyslog/issues/4385\n- 2020-10-03: core bugfix: do not create empty JSON objects on non-existent key access\n  Performing a condition (eg: check for an empty string) on a subtree key that do not\n  exists (depth > 1 from the root container), creates an empty \"parent\" object.\n  Depending on your context, you may end up with (kind of...) annoying garbage when\n  producing object documents (for instance to index in ES).\n  Also fixes a hypothetical hang condition with an almost (?) unused plugin parameter\n  passing mode, for details see\n  https://github.com/rsyslog/rsyslog/issues/4436\n  closes https://github.com/rsyslog/rsyslog/issues/4430\n  Thanks to Julien Thomas for the patch.\n- 2020-09-28: gnutls subsysem bugfix: potential hang on session closure\n  Some TLS servers don't reply to graceful shutdown requests \"for\n  optimization\". This results in rsyslog's omfwd+gtls client to wait\n  forever for a reply of the TLS server which never comes, due to shutting\n  down the connection with gnutls_bye(GNUTLS_SHUT_RDWR).\n  On systemd systems, commands such as \"systemctl restart rsyslog\" just\n  hang for 1m30 and rsyslogd gets killed upon timeout by systemd.\n  This is fixed by replacing the call to gnutls_bye(GNUTLS_SHUT_RDWR) by calls to\n  gnutls_bye(GNUTLS_SHUT_WR) which is sufficient and doesn't wait for a\n  server reply.\n  As an example, Kiwi Syslog server is known to cause this issue.\n  Thanks to Renaud Métrich for the patch.\n- 2020-09-23: core/network bugfix: obey net.enableDNS=off when querying local hostname\n  Local hostname resolution used DNS queries even if the enableDNS was set to off, and\n  this could cause unexpected delays in the HUP signal handling if the DNS server was\n  not responsive.\n  Thanks to Samu Nuutamo for the fix.\n- 2020-09-14: core bugfix: potential segfault on query of PROGRAMNAME property\n  A data race can happen on variable iLenProgram as it is not guarded\n  by the message mutex at time of query. This can lead to it being\n  non -1 while the buffer has not yet properly set up.\n  Thanks to Leo Fang for alerting us and a related\n  patch proposal.\n  replaces https://github.com/rsyslog/rsyslog/pull/4300\n- 2020-09-14: imtcp bugfix: broken connection not necessariy detected\n  Due to an invalid return code check, broken TCP sessions could not\n  necessarily be detected \"right in time\". This can result is the loss\n  of one message.\n  closes https://github.com/rsyslog/rsyslog/issues/4227\n  Thanks to Leo Fang for the patch.\n- 2020-09-14: new module: imhttp - http input\n  permits to receive log data via HTTP.\n  uses http library to provide http input.\n  user would need to configure an 'endpoint' as input, along\n  with a ruleset, defining how the input should be routed in\n  rsyslog.\n  Thanks to Nelson Yen for contributing this module.\n- 2020-09-11: mmdarwin bugfix: potential zero uuid when reusing existing one\n  - fix a use-after-free variable during darwin uuid message extraction\n  - improve debug/output by logging uuid parse errors\n  Thanks to github user frikilax for the patch.\n- 2020-09-10: imdocker bugfix: build issue on some platforms\n  An invalid variable type was used, leading to compile errors at least on\n  all platform that use gcc 10 and above. Otherwise, however, it looks like the\n  issue caused no real harm.\n- 2020-09-07: omudpspoof bugfix: make compatbile with Solaris build\n  Thanks to Dagobert Michelsen for the patch.\n- 2020-09-03: testbench fix: python 3 incompatibility\n- 2020-09-02: core bugfix: segfault if disk-queue file cannot be created\n  When using Disk Queue and a queue.filename that can not be created\n  by rsyslog, the service does not switch to another queue type as\n  supposed to and crashes at a later step.\n  closes: https://github.com/rsyslog/rsyslog/issues/4282\n- 2020-08-26: cosmetic: fix dummy module name in debug output\n  When we have optional components (like imjournal) a dummy module\n  is used. It's sole purpose is to emit \"this module is not available\".\n  During init, the module emitted an invalid module name into the debug\n  log. This has now been replaced by the generic term \"dummy\".\n  Note: it is highly unlikely that someone will ever see that message\n  at all, as it is unlikely for the dummy modules to be build.\n  see also: https://github.com/rsyslog/rsyslog/commit/84a7e3d80b80106dcc86c273ed8cf78a6c11c722#r41782830\n  Thanks to Thomas D. (whissi) for the patch.\n- 2020-08-26: config bugfix: intended warning emitted as error\n  When there are actions configured after a STOP, a warning should be\n  emitted. In fact, an error message is generated. This prevents the\n  construct, which may have some legit uses in exotic settings. It\n  may also break older configs, but as the message is an error\n  for so long now, this should be no longer of concern.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2008.0 (aka 2020.08) 2020-08-25\n- 2020-08-25: imdocker bugfix: error reporting not always correct\n  A wrong function to obtain the error code was used. This\n  could lead to invalid error messages.\n  Thanks to Steve Grubb for the bug report and fix proposal.\n  closes https://github.com/rsyslog/rsyslog/issues/4381\n- 2020-08-25: imptcp: add max sessions config parameter\n  The max is per-instance, not global across all instances.\n  There is also a bugfix where if epoll failed I think we could leave a\n  session linked in the list of sessions, this code unlinks it.\n  Thank to Alfred Perlstein for the patch.\n- 2020-08-24: omelasticsearch bugfix: reply buffer reset after health check\n  The issue happens when more than one server is defined on the\n  action. On that condition a health check is made through\n  checkConn() before sending the POST. The replyLen should be\n  set back to 0 after the health check, otherwise the response\n  data received from the POST gets appended to the end of the\n  last health check.\n  Thanks to Julien Thomas for the patch.\n- 2020-08-14: omfile: do no longer limit dynafile cache size in legacy format\n  When using obsolete legacy config format, omfile had a hard limit of\n  1,000 dynafile cache entries. This does not play well with very\n  large installation. This limit is now removed and converted into\n  a warning if cache size > 25,000 is specified.\n  Note: the problem can easily be worked-around by using modern\n  config format (RainerScript).\n  closes: https://github.com/rsyslog/rsyslog/issues/4241\n- 2020-08-13: imudp: fix very small, static memory leak\n  When ruleset support was used, the ruleset name was not freed upon rsyslog\n  termination. While this has no consequences for regular runs, it generates\n  leak errors under memory debuggers and as such makes debugging harder than\n  necessary.\n  Thanks to github user frikilax for the patch.\n- 2020-08-13: omelasticsearch: add parameter skipPipelineIfEmpty\n  When POST'ing a document, Elasticsearch does not allow an empty pipeline\n  parameter value. This patch introduces boolean option skipPipelineIfEmpty\n  to the omelasticsearch action. When set to true, the pipeline parameter\n  won't be posted. Default is false so we do not modify current behavior.\n  Thanks to Julien Thomas for the patch.\n- 2020-08-12: systemd service file removed from project\n  This was done as distros nowadays have very different service files and it no\n  longer is useful to provide a \"generic\" (sic) example.\n  see also: https://github.com/rsyslog/rsyslog/issues/4333\n- 2020-08-11: gnutls TLS driver bugfix: EKU check not done properly\n  When the server accepted a new connection, it did not properly set the\n  dataTypeCheck field based on the listening socket. That resulted in\n  skipping ExtendedKeyUsage (EKU) check on the client.\n  Thanks to Daiki Ueno for the patch.\n- 2020-08-06: MMDARWIN:: improve configuration flexibility and UUID fix\n  -t pu now able to get fields from local variables ($.)\n  - now able to configure a custom root container for mmdarwin fields\n  - now able to put nested keys ($!key1!key2)\n  - don't regenerate a UUID each time, but instead check if one exists before\n    creating it (allow successive calls without losing previous UUID)\n  Thanks to github user frikilax for the contribution.\n- 2020-08-06: add --enable-imjournal=optional ./configure option\n- 2020-08-06: IMPCAP::Fixes: segfault, memory and build corrections\n  * fix bug in ethernet packets parsing\n  * fix removes build error with gcc10: 'multiple definition of...'\n  * resolve memory leak during interface init failure (device not freed after post-create error)\n  * add test 'impcap_bug_ether' to prove ethernet parser fix is working\n  Thanks to github user frikilax for the contribution.\n  closes https://github.com/rsyslog/rsyslog/issues/4332\n- 2020-07-14: CI: add support for github actions\n- 2020-07-14: imklog: add ruleset support\n  see also: https://github.com/rsyslog/rsyslog/issues/4344#issuecomment-658001854\n  see also: https://github.com/rsyslog/rsyslog/issues/106\n- 2020-07-06: config system fix: ChkDisabled method to make config.enabled work\n  There was wrong negation in the method so it returned 0/1 in reverse\n  and also it did not mark the node to not be reported as unknown at all\n  times which is needed after all.\n  Thanks to Jiri Vymazal for the patch.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2006.0 (aka 2020.06) 2020-06-23\n- 2020-06-22: queue: permit ability to double size at shutdown\n  This prevents message loss due to \"queue full\" when re-enqueueing data\n  under quite exotic settings.\n  see also https://github.com/rsyslog/rsyslog/issues/3941#issuecomment-549765813\n  closes https://github.com/rsyslog/rsyslog/issues/4020\n- 2020-06-22:Fixing imfile segfaulting on selinux denial\n  If imfile is denied access to file watched trough symlink there is\n  unchecked condition resulting in access to not initialized memory.\n- 2020-06-22: openssl: Fixed memory leak when tls handshake failed.\n  closes: https://github.com/rsyslog/rsyslog/issues/4319\n- 2020-06-22: change systemd service file to wait for network\n  now that rsyslog is usually only installed for real syslog servers,\n  we should assume that some network listening or forwarding happens\n  on start. As such we need to start a bit later, after the network.\n  This poses no problem as systemd nowadays comes with journal which\n  is in almost all cases configured to buffer log data while\n  rsyslog is not yet running.\n  see also https://github.com/rsyslog/rsyslog-pkg-rhel-centos/issues/72\n- 2020-06-22: NEW INPUT MODULE:: impcap, network packets input parser\n  Thanks to github user frikilax for the contribution.\n- 2020-06-22: ksi bugfix: Optimized code in KSI module initialization fixed.\n  KSI module initialization will not stuck in infinite loop when code is\n  built with optimization -O2.\n- 2020-06-05: operatingstatefile bugfix: month was given too low\n  The month was printed with the range 0 (January) to 11 (December).\n  This has now been corrected.\n  closes https://github.com/rsyslog/rsyslog/issues/4292\n- 2020-06-05: build system: add \"optional\" build functionality to some components\n  Nameley:\n    --enable-libdbi=optional\n    --enable-mmdblookup=optional\n    --enable-imkafka=optional\n    --enable-omkafka=optional\n  If used, builds a dummy module which just emits a \"module not supported\n  on this platform\" error message when loaded.\n  Primary use case for this system is Debian-ish builds on SUSE OBS,\n  where we prefer to have a single package definition for all versions\n  (else things get much more complicated).\n- 2020-05-23: config system bugfix: backticks cat segfault if file cannot be opened\n  when a `cat <filename>` construct is used in rsyslog.conf and <filename> can not\n  be accessed (does not exist, no permissions, ...), rsyslog segfaults.\n  Thanks to Michael Skeffington for notifying us and providing root cause analysis.\n  closes https://github.com/rsyslog/rsyslog/issues/4290\n- 2020-05-15: imtcp bugfix: octet framing/stuffing problem with discardTruncatedMsg on\n  When \"discardTruncatedMsg\" was enabled in imtcp, messages were incorrectly\n  skipped if the last character before the truncation was the LFdelimiter.\n  Also adds two testbench tests for this case.\n  closes: https://github.com/rsyslog/rsyslog/issues/4281\n- 2020-05-12: ompipe bugfix: race during HUP\n  When HUP was received, the write mutex was not acquired. This could\n  lead to unexpected invalidation of the output file descriptor.\n  Thanks to Julien Thomas for alerting us on this issue.\n  see also https://github.com/rsyslog/rsyslog/pull/4136#issuecomment-578326278\n- 2020-05-12: ompipe: add action parameter tryResumeReopen\n  Sometimes we need to reopen a pipe after an ompipe action gets\n  suspended. Sending an HUP signal to rsyslog does the job but requires\n  an interraction with rsyslog. The patch adds support for a new boolean\n  option, tryResumeReopen, for the ompipe action. It mimics what an HUP\n  signal would do.\n  Thanks to Julien Thomas for the patch.\n- 2020-05-12: imjournal: remove strcat call\n  Thanks to Jeff Marckel for the patch.\n- 2020-05-12: build system: libzcmq version requirement needs to be bumped\n  Thanks to Thomas Deutschmann for pointing this out.\n  closes https://github.com/rsyslog/rsyslog/issues/3957\n- 2020-05-12: testbench: download ElasticSearch binaries from rsyslog.com\n  The official ElasticSearch download site sometimes denies the download.\n- 2020-05-11: openssl netstream driver bugfix: context leak\n  The context object was not properly freed.\n  Thanks to Michael Zimmermann for the fix.\n- 2020-05-11: omhttp: Add support for multiple http headers\n  Allows the inclusion of multiple http headers on the REST call.\n  Thanks to callmegar for the patch.\n- 2020-04-29: core bugfix: group id could not be obtained for very large groups\n  Thanks to github user emilbart for the patch.\n- 2020-04-29: testbench additions (relp broken connection test)\n- 2020-04-29: omudpspoof bugfix: issues with oversized messages\n  First issue was an incorrect packet length in UDP Header. It has to be the FULL UDP Packet\n  regardless of the MTU Setting. As a result regardless of IP fragmentation, the MTU setting\n  also limited the siizmax size of the UDP message.\n  The second issue was incorrect calculation of the UDP Checksum with libnet if\n  IP fragmentation was used (Based on MTU Setting). As a result, the network packets were\n  dropped by the tcp stack before they even could reach there target. The workarround for this\n  problem is, that we set the UDP Checksum to 0x0000 which allows skipping of the checksum\n  test. Fixing the problem by calculating the correct UDP Checksum would require some\n  code changes in the libnet.\n  Also fixed the omudpspoof bigmsg test and increased the testing size to 16KB.\n- 2020-04-29: omprog: fix assert failed on HUP with output flag\n  If the 'output' setting of omprog was used and rsyslog received a HUP\n  signal just after starting (and before the omprog action received the\n  first log to process), an internal assertion could fail, causing\n  rsyslog to terminate. The failure message was \"rsyslogd: omprog.c:660:\n  closeOutputFile: Assertion `pCtx->bIsRunning' failed.\"\n  The failure could also occur if rsyslog received a HUP signal during\n  the shutdown sequence.\n  This bug was introduced in v8.2004 by PR https://github.com/rsyslog/rsyslog/pull/4255\n  Although a test already existed that checked the interaction of HUPs\n  with the 'output' setting, it didn't always fail in this particular case\n  due to timing conditions. The test has been improved to cover this case\n  more reliably.\n  Thanks to Joan Sala Isern for the patch.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2004.0 (aka 2020.04) 2020-04-28\n- 2020-04-28: ksi bugfix: When KSI module is suddenly closed, files are finalized\n  In async. mode all pending signature requests are closed immediately and\n  unsigned block marker is attached with message about sudden closure.\n  Similar approach is used for blocks that already contain some records.\n  Empty blocks are just closed without any metadata.\n  Thanks to Taavi Väljaots for the patch.\n- 2020-04-28: ksi bugfix: Signer thread initialization is verified before usage.\n  When signer thread is created in rsksiInitModule thread successful\n  initialization is verified before returning the function. This will\n  prevent adding records to not initialized module and in case of an\n  error signature files opened will contain only magic bytes.\n  Thread flags replaced with thread state.\n  When init module fails, module is disabled.\n  Thanks to Taavi Väljaots for the patch.\n- 2020-04-28: ksi bugfix: Hardcoded default hash algorithm replaced with 'default'\n  Instead of hardcoded SHA-256 KSI_getHashAlgorithmByName(\"default\")\n  is used to get default hash function.\n  Function rsksiSetHashFunction and SetCnfParam updated.\n  Thanks to Taavi Väljaots for the patch.\n- 2020-04-28: imfile bugfix: poential segfault in stream object on file read\n  - if cstrLen(pThis->prevMsgSegment) > maxMsgSize then len calculation\n    become negative if cstrLen(thisLine) < cstrLen(pThis->prevMsgSegment)\n    This causes illegal access to memory location and thus causing segfault.\n  - assigning len = 0 if cstrLen(pThis->prevMsgSegment) > maxMsgSize so that\n    it access the correct memory location.\n  Thanks to github user jaankit\n- 2020-04-28: openssl TLS drivers: made more reliable for older openssl versions\n  OpenSSL can retry some failed operations, but older versions need an explicit\n  opt-in to do so. This is now done.\n- 2020-04-28: omprog: fix bad fd errors in daemon mode\n  When omprog was used with the 'forceSingleInstance=on' option, and/or\n  the 'output' setting, \"bad file descriptor\" errors occurred, which\n  prevented the external program to be executed and/or the program output\n  to be correctly captured. The bug could also manifest as \"resource\n  temporarily unavailable\" errors, or other errors related to the use of\n  invalid/reassigned file descriptors. These errors only happened when\n  rsyslog ran in daemon mode (i.e. they didn't happen if rsyslogd was\n  run with the '-n' option).\n  The cause of the bug was that omprog opened the pipe fds needed by\n  these flags during the configuration load phase (in the 'newActInst'\n  module entrypoint). This is a bad place since the fork of the daemon\n  occurs after this phase, and all fds are closed when the daemon process\n  is started (see 'initAll' in rsyslogd.c), hence invalidating the\n  previously opened fds.\n  To correct this, the single child process and the output capture thread\n  are now started later, when the first log message is received by the\n  first worker thread. (Note: the 'activateCnf' module entrypoint, despite\n  being invoked after the fork, cannot be used for this purpose, since it\n  is invoked per module, not per action instance.)\n  Currently no automated test exists for this use case since the testbench\n  always runs rsyslog in non-daemon mode.\n  Affected versions: v8.38 and later\n  closes: https://github.com/rsyslog/rsyslog/issues/4247\n  Thanks to Joan Sala Isern for the patch.\n- 2020-04-28: omfile bugfix: $outchannel split log lines at rotation time\n- 2020-04-17: openssl: add support for libreSSL\n  Disable use of \"@SECLEVEL\" in default cipher string and\n  avoid SSL_CONF_CTX_set_flags() API when LIBRESSL is used.\n  This means tlscommands will not work.\n  closes: https://github.com/rsyslog/rsyslog/issues/4210\n- 2020-03-04: imudp bugfix: build problems on some Linux kernel versions\n  Thanks to Wen Yang for the patch.\n- 2020-03-02: conf output bugfix: -o produces missing space between call and rulename\n  Thanks to Tetiana Ohnieva for the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/3761\n----------------------------------------------------------------------------------------\nScheduled Release 8.2002.0 (aka 2020.02) 2020-02-25\n- 2020-02-25: imfile: add per minute rate limiting\n  Add MaxBytesPerMinute and MaxLinesPerMinute options.\n  These take integer values and, respectively, limit the number\n  of bytes or lines that may be sent in a minute.\n  This can be used to put a limit on the count or volume of logs\n  that may be sent for an imfile.\n  Thanks to Greg Farrell for the patch.\n- 2020-02-24: core: add global parameter \"security.abortOnIDResolutionFail\"\n  This parameter controls whether or not rsyslog aborts when a name ID\n  lookup fails (for user and group names). This is necessary as a security\n  measure, as otherwise the wrong permissions can be assigned or privileges\n  are not dropped.\n  CHANGE OF BEHAVIOR\n  The default for this parameter is \"on\". In previous versions, the default\n  was \"off\" (by virtue of this parameter not existing). As such, existing\n  configurations may now error out.\n  We have decided to accept this change of behavior because of the potential\n  security implications.\n  closes https://github.com/rsyslog/rsyslog/issues/4164\n- 2020-02-24: openssl TLS driver bugfix: chained certificates were not accepted\n  This was supported since always inside GnuTLS driver, but was missing for openssl one.\n- 2020-02-24: core bugfix: too early parsing of incoming messages\n  In theory, rsyslog should call parsers on the queue worker threads whenever\n  possible. This enables the parsers to be executed in parallel. There are\n  some cases where parsers needs to be called earlier, namely when parsed\n  data is needed for rate-limiting.\n  The logic to do this previously did not work correctly and was fixed six\n  years ago (!) by b51dd22. Unfortunately, b51dd22 was overly agressive:\n  it actually makes the early parser call now mandatory, effectively moving\n  parsing to the input side where there is no to little concurrency.\n  We still do not need to call the parser when all messages, regardless of\n  severity, need to be rate-limited. This is the default and very frequent\n  case. This patch introduces support for this and as such makes parsers\n  able to run in parallel in the frequent case again.\n  closes https://github.com/rsyslog/rsyslog/issues/4187\n- 2020-02-20: testbench bugfix: two minor issues in omkafkadynakey.sh test\n  lead to false positives during test runs (depending on circumstances)\n  closes: https://github.com/rsyslog/rsyslog/issues/4134\n- 2020-02-20: testbench: set max extra data length for tcpflood from 200 to 512KiB\n  Added a imrelp test for big messages (256KB).\n  closes: https://github.com/rsyslog/rsyslog/issues/4158\n- 2020-02-20: config system bugfix: 'config.enabled' directive oddities\n  Previously the directive was processed way too late which caused false\n  errors whenever it was set to 'off' and possibly other problems.\n  Thanks to Jiri Vymazal for the patch.\n- 2020-02-09: imfile bugfix: timeout did not work on very busy system\n  The timeout feature was soley based on timeouts of the poll()\n  system call. On a very busy system, this would probably happen\n  very seldomly.  Moreover, the timeout could occur later than\n  expected on any system with high load.\n  The issue was not reported from practice but discovered during\n  CI system improvements.\n- 2020-01-30: build system: change --enable-imfile-tests default to \"yes\"\n  This was accidentally set to \"no\" some time ago (actual commit unknown). Tests for\n  imfile should by default run when imfile is enabled.\n  see also https://github.com/rsyslog/rsyslog/issues/4120\n- 2020-01-27: build system: add option --enable-gnutls-tests\n  This enables us to build GNUtls support but not necessarily\n  test it in CI. This is useful for some specialised subcomponent\n  test. The default is enabled if gnutls is enabled and disabled if not.\n- 2020-01-26: testbench: new test for loadbalancing via global vars\n  This is a popular functionality which had not been routinely tested\n  in the past.\n- 2020-01-26: mmdblookup bugfix: invalid data returned when no entry found\n  Since the upgrade of the package libmaxminddb on FreeBSD (1.3.2_2 -> 1.4.2),\n  the module mmdblookup returns the first entry of the mmdb database even if the entry\n  is not found. After some debug, I found the solution in the official maxminddb\n  repository : to check if the entry is in database, we must check the found_entry\n  attribute, otherwise the function MMDB_get_entry_data_list will return the first\n  entry of the database if the entry is not found in it.\n  Thanks to Kevin Guillemot for the patch.\n- 2020-01-23: oversize message log bugfix: do not close fd -1\n  The oversize message log fd is always closed on HUP, even if it never\n  was opened (and thus has -1 value). This patch corrects the issue.\n  The bug had no know-bad effect in practice other than getting an\n  (ignored) error status from close(). However, it introduced warnings\n  in test runs (e.g. when running under valgrind).\n- 2020-01-22: imfile bugfix: saving of old file_id for statefiles\n  Previously we saved old file_id unconditionally, which led to not\n  deleting old statefiles if files changes without rsyslog running.\n  Now it should work correctly.\n  Thanks to Jiri Vymazal for the patch.\n- 2020-01-22: imfile bugfix: misadressing and potential segfault\n  Commit 3f72e8c introduced an invalid memory allocation size. This lead to\n  too-short alloc and thus to overwrite of non-owned memory. That in turn\n  could lead to segfaults or other hard to find problems.\n  The issue was detected by our upgraded CI system. We did not receive\n  any problem reports in practice. Nevertheless, the problem is real and\n  people should update affected versions to patched ones.\n  The bug was present in scheduled stable release 8.1911.0 and 8.2001.0.\n  see also: https://github.com/rsyslog/rsyslog/issues/4120\n  see also: https://github.com/rsyslog/rsyslog/pull/4141\n- 2020-01-20: core bugfix: potential race during HUP\n  when rsyslog is HUPed immediately after startup and before it is fully\n  initialized, there is a potential race with the list of loaded modules.\n  This patch ensures no bad things can happen in that case.\n  Detected by LLVM TSAN, not seen in practice.\n- 2020-01-20: testbench improvements and fixes\n  modernize tests, reduce robustness against slow machines, provide some\n  test framework functional enhancements, and optimize some tests.\n  Also includes some code changes to C testing components. Among others,\n  tests have slightly been speeded up by reducing the wait time at queue\n  shutdown. This is possible because of better overall completion checks.\n----------------------------------------------------------------------------------------\nScheduled Release 8.2001.0 (aka 2020.01) 2020-01-14\n- 2020-01-12: core bugfix: race condition related to libfastjson when using DA queue\n  Rsyslogd aborts when writing to disk queue from multiple workers simultaneously.\n  It is assumed that libfastjson is not thread-safe.\n  Resolve libfastjson race condition when writing to disk queue.\n  see also https://github.com/rsyslog/rsyslog/issues/4041\n  Thanks to MIZUTA Takeshi for the fix.\n- 2020-01-12: omfwd bugfix: parameter streamdriver.permitexpiredcerts did not work\n  closes https://github.com/rsyslog/rsyslog/issues/4098\n- 2020-01-11: Bugfix: KSI module + dynafile in asynchronous mode fixed\n  Thanks to Taavi Valjaots for the patch\n- 2020-01-08: tls driver: add support to configure certificate verify depth\n  Support added in omfwd as instance parameter:\n  streamdriver.TlsVerifyDepth\n  Support added in imtcp as module parameter:\n  streamdriver.TlsVerifyDepth\n  Can be 2 or higher.\n  Support added into ossl driver\n  Support added into gtls driver\n  Added testcases for both drivers.\n  closes: https://github.com/rsyslog/rsyslog/issues/4035\n- 2020-01-08: modernization of testbench\n  moved some tests to newer standards, hardened them against slow testbench machines,\n  kafka component download improvements, and prevent dangling left-over test tool\n  instances from aborted tests\n- 2020-01-07: tls subsystem bugfix: default for permitExpiredCerts was invalidly \"on\"\n  The problem occurred with commit 3d9b8df in December 2018 and went into\n  scheduled stable 8.1901.0. Unfortunately, the change in default was not detected\n  until a year later. This commit re-enables the previous default (\"off\"), which is\n  also the only sensible default from a security PoV. Unfortunately, new 2019\n  deployments may begin to see connection rejection when usin expired certs. As\n  expired certs should not be used, this hopefully will not cause problems in\n  practice.\n  Thanks to Jiri Vymazal for the patch.\n- 2020-01-01: testbench: improve ElasticSearch test speed\n  We now support re-using suitable running ES instances, which reduces the\n  number of restarts.\n- 2019-12-31: omelasticsearch: improve curl reply buffer handling\n  The curl reply buffer (pWrkrData->reply) was allocated, realloced and freed with\n  each request. This has now been reduced to once per module, slightly increasing\n  overall performance.\n  closes https://github.com/rsyslog/rsyslog/issues/1964\n- 2019-12-31: config system: emit proper error message on $ in double-quoted string\n  closes https://github.com/rsyslog/rsyslog/issues/2869\n- 2019-12-30: core bugfix: rsyslog aborts when config parse error is detected\n  In defaut settings, rsyslog tries to continue to run, but some data\n  structures are not properly initialized due to the config parsing error.\n  This causes a segfault.\n  In the following tracker, this is the root cause of the abort:\n  see also https://github.com/rsyslog/rsyslog/issues/2869\n- 2019-12-30: fix some alignment issues\n  So far, this worked everywhere (for years). But it may still have\n  caused issues on some platforms.\n  closes https://github.com/rsyslog/rsyslog/issues/2608\n- 2019-12-27: core bugfix: APP-NAME fields could become empty\n  RFC 5424 specifies that an empty APP-NAME needs to be indicated by\n  \"-\". Instead, the field could become empty under certain conditions.\n  If so, outgoing 5424 messages were invalidly formatted.\n  This happened under quite unusual conditions, but could be seen\n  in practice.\n  closes https://github.com/rsyslog/rsyslog/issues/4043\n- 2019-12-27: core bugfix: reopen /dev/urandom file descriptor after fork on Linux\n  This patch updates prepareBackground() in tools/rsyslogd.c to reopen any file\n  descriptors used for random number generation in the child process. This fixes\n  an issue on Linux systems where the file descriptor obtained for /dev/urandom\n  by seedRandomNumber() in runtime/srutils.c was left closed after the fork. This\n  could be observed in procfs, where /proc/fd/ would show no open descriptors to\n  /dev/urandom in the forked process. /dev/urandom is reopened as the child may be\n  be operating in a jail, and so should not continue to use file descriptors from\n  outside the jail (i.e. inherited from the parent process).\n  I found that this issue led to rsyslog intermittently hanging during seedIV()\n  in runtime/libgcry.c. After the fork, the closed file descriptor number tended\n  to get re-assigned. randomNumber() would then read from an incorrect (although\n  still valid) file descriptor, and could block (depending on the state of that\n  file descriptor). This gave rise to the intermittent hang that I observed.\n  Thanks to Simon Haggett for the patch.\n- 2019-12-20: imdocker bugfix: did not compile without atomic operations\n- 2019-12-20: omclickhouse: new parameter \"timeout\"\n  Thanks to Pavlo Bashynskiy for the patch.\n- 2019-12-20: omhiredis: add 'set' mode plus some fixes\n  - new mode 'set' to send SET/SETEX commands\n  - new parameter 'expiration' to send SETEX instead of SET commands (only applicable to 'set' mode)\n  - fixes to missing frees\n  Thanks to github user frikilax for the patch.\n- 2019-12-18: relp: Add support setting openssl configuration commands.\n  Add new configuration parameter tls.tlscfgcmd to omrelp and imrelp.\n  (Using relpSrvSetTlsConfigCmd and relpCltSetTlsConfigCmd)\n  OpenSSL Version 1.0.2 or higher is required for this feature.\n  A list of possible commands and their valid values can be found in the\n  documentation: https://www.openssl.org/docs/man1.0.2/man3/SSL_CONF_cmd.html\n  The setting can be single or multiline, each configuration command is\n  separated by linefeed (n). Command and value are separated by\n  equal sign (=). Here are a few samples:\n  tls.tlscfgcmd=\"Protocol=ALL,-SSLv2,-SSLv3,-TLSv1,-TLSv1.2\"\n  tls.tlscfgcmd=\"Protocol=ALL,-SSLv2,-SSLv3,-TLSv1\n  MinProtocol=TLSv1.2\"\n  Add to new testcases for librelp and tlscfgcmd.\n  closes https://github.com/rsyslog/rsyslog/issues/3959\n- 2019-12-18: bugfix core: potential segfault in template engine\n  under some circumstances (not entirely clear right now), memory\n  was freed but later re-used as state-tracking structures were not\n  properly maintained. Github issue mentioned below has full details.\n  Thanks to github user snaix for analyzing this issue and providing\n  a patch. I am committing as myself as snaix did not disclose his or\n  her identity.\n  closes https://github.com/rsyslog/rsyslog/issues/3019\n  closes https://github.com/rsyslog/rsyslog/issues/4040\n- 2019-12-18: fixed some minor issues detected by clang static analyzer 9\n- 2019-12-10: core/config bugfix: false error msg when config.enabled=\"on\" is used\n  When the 'config.enabled=\"on\"' config parameter an invalid error message\n  was emitted that this parameter is not supported. However, it was still\n  applied properly. This commit removes the invalid error message.\n  closes https://github.com/rsyslog/rsyslog/issues/4011\n- 2019-12-03: omsnmp bugfix: \"traptype\" parameter invalidly rejected value 6\n  \"Traptype\" needs to support values 0 to 6.\n  However, if value 6(ENTERPRISESPECIFIC) was set, an invalid error message\n  was emitted. Otherwise processing was correct.\n  This could lead to problems with automatic config deployment,\n  as valid configurations were invalidly reported as incorrect.\n  That in turn could make a deployment fail.\n  closes https://github.com/rsyslog/rsyslog/issues/3973\n- 2019-12-03: omsnmp: add new parameter \"snmpv1dynsource\"\n  If set, the source field from SNMPv1 trap can be overwritten\n  with a template, default is \"%fromhost-ip%\". The content should be a\n  valid IPv4 Address that can be passed to inet_addr(). If the content\n  is not a valid IPv4 Address, the source will not be set.\n  closes: https://github.com/rsyslog/rsyslog/issues/3991\n- 2019-12-02: imfile bugfix: state file renaming sometimes did not work properly\n  Now checking if file-id changes and renaming - cleaning state file\n  accordingly and always checking and cleaning old inode-only style\n  state files.\n  Thanks to Jiri Vymazal for the patch.\n- 2019-12-02: ratelimit: increase rate limit interval parameter max value\n  The burst parameter in the ratelimit was increased to an unsigned int\n  but the interval remained an unsigned short. While it may be unusual,\n  there is possibly a chance to need to represent an interval longer than\n  about 3/4 of a day.\n  While here, go through and normalize all the various incarnations of\n  rate limiting to be explicitly unsigned int for the burst and interval.\n  Thanks to github user frikilax for the patch.\n- 2019-12-02: ommongodb: Add other supported formats for 'time' and 'date' fields\n  Thanks to github user frikilax for the patch.\n- 2019-12-02: imjournal bugfix: too many messages in error case\n  Under certain error conditions, `ignorePreviousMessages=\"on\"` could be ignored\n  an existing messages be processed.\n  Thanks to github user 3chas3 for the patch.\n- 2019-11-27: core bugfix: action on retry mangles messages\n  When a failed action goes into retry, template content is rendered\n  invalid if the action uses more than 1 template.\n  closes https://github.com/rsyslog/rsyslog/issues/3898\n  Thanks to Mikko Kortelainen for the patch.\n- 2019-11-27: testbench: improve mysql testing support\n  tests can now run in parallel and are hardened against several glitches\n- 2019-11-22: omhttp: add basic support for Loki Rest\n  Loki is a new message indexer and querier from Grafana Labs. See\n  https://github.com/grafana/loki for details on Loki.\n  This change provides the initial message structure to send bulk message\n  payloads to the Loki Rest endpoint. omhttp, received a new bulk message\n  format called lokirest. Additionally, the plugin relies on the user to\n  provide the correct \"stream\" read message format.\n  A loki template must be json compatible and include a \"stream\" key of\n  key value tags, and a values key of an array of 2 element arrays, where\n  each 2 element array is the unix epoch in nanoseconds followed by an\n  unstructured message.\n  An example:\n      template(name=\"array_loki\" type=\"string\" string=\"{\\\"stream\\\":{\\\"host\\\":\\\"%HOSTNAME%\\\",\\\"facility\\\":\\\"%syslogfacility-text%\\\",\\\"priority\\\":\\\"%syslogpriority-text%\\\",\\\"syslogtag\\\":\\\"%syslogtag%\\\"},\\\"values\\\": [[ \\\"%timegenerated:::date-unixtimestamp%000000000\\\", \\\"%msg%\\\" ]]}\")\n- 2019-11-22: testbench: obtain python binary path via AM_PATH_PYTHON\n  see also https://github.com/rsyslog/rsyslog/issues/3853\n- 2019-11-22: omprog: detect violation of interface protocol\n  The spec for the omprog interaction with the program it calls specifies\n  that the program receives one message via one line. In other words:\n  it must be a string terminated by LF.\n  However, omprog does currently rely on a proper template to fulfill this\n  requirement, If the template does not provide for the LF, it is never\n  written. For the called program, this looks like it does not receive any\n  input at all. Even if it finally reads data (e.g. due to full buffer),\n  it will not properly be able to discern the messages.\n  This handling is improved with this commit.\n  We cannot just check the template, because at the end of the template\n  may by a non-constant value. As such, we do not know at config load\n  time if there is this problem or not.\n  So the correct approach is to, during runtime, check if each message\n  is properly terminated. For those that are not:\n  * we append a LF, because anything else makes matters worse\n  * log a warning message, at least for a sample of the messages\n  The warning is useful in the (expected most often) case that the template\n  is simply missing the LF. While appending works, it slows down processing.\n  As such the user should be given a chance to correct the config bug.\n  To avoid clutter, the warning is emitted at most once every 30 seconds.\n  This value is hardcoded as we do not envision a need to adjust it. Usually\n  users should quickly fix the template.\n  closes https://github.com/rsyslog/rsyslog/issues/3975\n- 2019-11-19: core queue: emit warning if parameters are set for direct queue\n  Direct queues do not apply queue parameters because they are actually\n  no physical queue. As such, any parameter set is ignored. This can\n  lead to unintentional results.\n  The new code detects this case and warns the user.\n  closes https://github.com/rsyslog/rsyslog/issues/77\n- 2019-11-19: imjournal bugfix: do not wait too long on recovery try\n  When trying to recover journal errors, imjournal waited a hardcoded\n  period of 10s between tries. This was pretty long and could lead to\n  loss of journal data.\n  This commit adjust it to 100ms, which should still be fully sufficient\n  to prevent the journal from \"hammering\" the CPU.\n  It may be worth considering to make this setting configurable - but\n  let's first see if there is real demand to actually do that.\n  closes https://github.com/rsyslog/rsyslog/issues/3969\n- 2019-11-19: mmutf8fix: enhance handling of incorrect UTF-8 sequences\n  1. Invalid utf8 detection didn't handle 3 and 4-byte overlong encodings (2\n     byte overlong encodings were handled explicitly by rejection E0 and E1\n     start bytes). Unified checks for overlong encodings.\n  2. Surrogates U+D800..U+DFFF are not valid codepoints (Unicode Standard, D92)\n  3. Replacement of characters in invalid 3 or 4-bytes encodings was too\n     eager. It must not replace bytes which are valid UTF-8 sequences. For\n     example, in [0xE0 0xC2 0xA7] sequence the 0xC2 is invalid as a continuation\n     byte, but it starts a valid UTF8 symbol [0xC2 0xA7]. That is, with current\n     code processing the sequence will result in \"???\" but the correct result is \"?§\"\n     (provided that the replacement character is \"?\").\n  4. Various tests for UTF-8 invalid/valid sequences.\n  Thanks to Sergei Turchanov for the patch.\n- 2019-11-14: imfile: add new input parameter escapeLF.replacement\n  The new parameter permits to specify a replacement to be configured\n  when \"escapeLF\" is set to \"on\". Previously, a fixed replacement string\n  was used (\"#012\"/\"\\n\") depending on circumstances. If the parameter is\n  set to an empty string, the LF is simply discarded.\n  closes https://github.com/rsyslog/rsyslog/issues/3889\n----------------------------------------------------------------------------------------\nScheduled Release 8.1911.0 (aka 2019.11) 2019-11-12\n- 2019-11-12: core queue: add config param \"queue.takeFlowCtlFromMsg\"\n  This is a fine-tuning option which permits to control whether or not\n  rsyslog shall alays take the flow control setting from the message. If\n  so, non-primary queues may also block when reaching high water mark.\n  This permits to add some synchronous processing to rsyslog core engine.\n  However, it is dangerous, as improper use may make the core engine\n  stall. As such, enabling this option requires very careful planning\n  of the rsyslog configuration and deep understanding of the consequences.\n  Note that the option is applied to individual queues, so a configuration\n  with a large number of queues can (and must if use) be fine-tuned to\n  the exact use case.\n  The rsyslog team strongly recommends to let the option turned off,\n  which is the default setting.\n  see also https://github.com/rsyslog/rsyslog/issues/3941\n- 2019-11-12: imrelp: add new config parameter \"flowcontrol\"\n  This permits to fine-tune the flowControl parameter. Possible values are\n  \"no\", \"light\", and \"full\". With light being the default and previously\n  only value.\n  Changing the flow control setting may be useful for some rare applications,\n  but be sure to know exactly what you are doing when changing this setting.\n  Most importantly, whole rsyslog may block and become unresponsive if you\n  change flowcontrol to \"full\". While this may be a desired effect when\n  intentionally trying to make it most unlikely that rsyslog needs to\n  lose/discard messages, usually this is not what you want.\n  see also https://github.com/rsyslog/rsyslog/issues/3941\n- 2019-11-11: imrelp: remove unsafe debug instrumentation\n  dbgprintf, which is not signal safe, was called from a signal handler\n  to get better understanding during debugging. While this usually works,\n  it can occasionally (5%) lead to a hang during shutdown. We have now\n  removed that debug info as it is no longer vital.\n  Note: this could only happen during debug runs. Production mode was\n  not affected. As such, this fix is only relevant to developers.\n  However, it caused some confusion in the following issue tracker.\n  see also https://github.com/rsyslog/rsyslog/issues/3941\n- 2019-11-06: ossl driver bugfix: fix wrong OpenSSL Version check\n  Fix OpenSSL Version check in:\n  - SetGnutlsPriorityString function in nsd_ossl.c\n  - initTLS() function tcpflood.c\n  See https://www.openssl.org/docs/man1.1.0/man3/OPENSSL_VERSION_NUMBER.html\n  for more.\n  This bug lead to not enabling some functionality correctly.\n  Removed \"MinProtocol=TLSv1.1\" from two testcases because MinProtocol\n  is only supported by OpenSSl 1.1.0 or higher and was not really\n  necessary for the testcases.\n  closes https://github.com/rsyslog/rsyslog/issues/3939\n- 2019-11-05: mmdarwin: Optimizations, new parameters, update to protocol header\n  - use permanent worker-dependent buffers to avoid malloc/free for each entry\n  - move socket structures to worker data, remove global mutex\n  - add log lines for parameters and general workflow\n  - don't send body if empty/incomplete (see new parameters)\n  - don't close/reopen socket every time -> let session open or create new every X\n    entry (see new parameters)\n  - clean up code\n  - added 'send_partial', to let mmdarwin send body if not all fields were\n    retrieved, or not; default false = only send complete bodies\n  - added 'socket_max_use' to open new session every X packet, useful for\n    some versions of Darwin (prior to 1.1)\n    default is 0 = do not open new session/keep only one\n  - added 'evt_id' to the darwin header (Darwin v1+ compatibility)\n  Note: mmdarwin is a contributed module\n  Thanks to github user frikilax for the patch.\n- 2019-11-01: mmkubernetes bugfix: improper use of realloc()\n  could cause problems under extreme memory shortage - very unlikely\n  credits to LGTM.COM for detecting this\n- 2019-10-31: imjournal: set the journal data threshold to MaxMessageSize\n  When data is read from the journal using sd_journal_get_data it may be\n  truncated to a certain threshold (64K by default).\n  If the rsyslog MaxMessageSize is larger than the threshold, there is a\n  chance rsyslog will receive incomplete messages from the journal.\n  Empirically, this appears to happen reliably when XZ compression is\n  used by journald. Systems where journald uses LZ4 compression do not\n  appear to suffer this issue reliably--if at all.\n  This change sets the threshold to the MaxMessageSize when the\n  journal is opened.\n  Thanks to Robert Winslow Dalpe for the patch.\n- 2019-10-30: improg bugfix: allow improg to handle multi-line inputs\n  miscellaneous bug fixes in improg:\n  * properly truncate string after an input event is submitted\n  * set msgoffset to 0.\n  * tests added to check above fixes\n  Thanks to Nelson Yen for the fix.\n- 2019-10-30: mmdblookup bugfix: missing space in city name\n  This fixes the issue that spaces in city names are dropped. However, the\n  fix is more or less a work-around. As it turns out, the libmaxminddb API\n  is not correctly used. In the somewhat longer term, we should fix this.\n  see also https://github.com/maxmind/libmaxminddb/issues/218\n  closes https://github.com/rsyslog/rsyslog/issues/1650\n- 2019-10-30: core/queue: provide ability to run diskqueue on multiple threads\n  Up until this release, disk queues could only use a single thread,\n  what limited their performance with outputs like ElasticSearch.\n  Now disk queues can utilize multiple threads just like any other\n  queue type. Most importantly, the disk queue part of a DA queue\n  now inherits the max number of threads from its memory queue\n  counterpart.\n  NOTE: the new multi-threaded DA disk queue is actually a change of\n  behavior. We have not guarded it by a new config switch as we\n  assume the new behavior is most often exactly within user\n  expectations. In any case, we cannot see any harm from running\n  the disk queue on multiple threads.\n  see also https://github.com/rsyslog/rsyslog/issues/3543\n  closes https://github.com/rsyslog/rsyslog/issues/3833\n- 2019-10-25: omfile bugfix: file handle leak\n  The stream class does not close re-opened file descriptors.\n  This lead to leaking file handles and ultimately to the inability\n  to open any files/sockets/etc as rsyslog ran out of handles.\n  The bug was depending on timing. This involved different OS\n  thread scheduler timing as well as workload. The bug was more\n  common under the following conditions:\n  - async writing of files\n  - dynafiles\n  - not committing file data at end of transaction\n  However it could be triggered under other conditions as well.\n  The refactoring done in 8.1908 increased the likelihood of\n  experiencing this bug. But it was not a real regression, the new\n  code was valid, but changed the timing so that the race was more\n  likely.\n  Thanks to Michael Biebl for reporting this bug and helping to\n  analyze it.\n  closes https://github.com/rsyslog/rsyslog/issues/3885\n- 2019-10-22: imfile bugfix: improper use of calloc()\n  could cause problems under extreme memory shortage - very unlikely\n  credits to LGTM.COM for detecting this\n- 2019-10-22: TLS driver bugfix: improper use of calloc()\n  can cause problems under extreme memory shortage - very unlikely\n  credits to LGTM.COM for detecting this\n- 2019-10-22: imuxsock  bugfix: improper use of calloc()\n  can cause problems under extreme memory shortage - very unlikely\n  credits to LGTM.COM for detecting this\n- 2019-10-17: build system bugfix: incorrect default in ./configure help text\n  closes https://github.com/rsyslog/rsyslog/issues/3904\n  Thanks to Michael Biebl for pointing this out.\n- 2019-10-17: mmkubernetes bugfix: improper use of calloc()\n  can cause problems under extreme memory shortage - very unlikely\n  credits to LGTM.COM for detecting this\n- 2019-10-16: core queue bugfix: propagate batch size to DA queue\n   This was a long-standing bug where the DA queue always had a fixed small batch\n   size because the setting was not propagated from the memory queue. This also\n   removes a needless and counter-productive \"debug aid\" which seemed to be in\n   the code for quite some while. It did not cause harm because of the batch\n   size issue.\n- 2019-10-16: testbench: fix unreliable gzipwrite test\n  The test was timing-sensitive as we did not properly check all data\n  was output to the output file - we just relied on sleep periods.\n  This has been changed. Also, we made some changes to the testing\n  framework to fully support sequence checking of multiple ZIP files.\n- 2019-10-16: core queue bugfix: handle multi-queue-file delete correctly\n  Rsyslog may leave some dangling disk queue files under the following\n  conditions:\n  - batch sizes and/or messages are large\n  - queue files are comparatively small\n  - a batch spans more than two queue files (from n to n+m with m>1)\n  In this case, queue files n+1 to (n+m-1) are not deleted. This can\n  lead to problems when the queue is re-opened again. In extreme cases\n  this can also lead to stalled processing when the max disk space is\n  used up by such left-over queue files.\n  Using defaults this scenario is very unlikely, but it can happen,\n  especially when large messages are being processed.\n- 2019-10-16: imjournal: fix regression from yesterday's patch\n  commit 78976a9bc059 introduced a regression that caused writing\n  the journal state file to fail. This happens when the state file\n  is given as relative file name and the working directory is also\n  a relative path. This situation is very uncommon. So most deployments\n  will never experience it. We discovered the issue during CI runs\n  where the trigger condition is given. Note that it also takes\n  multiple times of loading the journal to actually see the bug.\n  see also https://github.com/rsyslog/rsyslog/pull/3878\n- 2019-10-15: imjournal plugin code restructuring, added remote option\n  Decomposed ReadJournal() a bit, also now coupling journald\n  variables in one struct, added few warning messages and debug\n  prints to help with bug hunts in future, also got rid of two\n  needless journald calls. WorkAroundJournalBug now deprecated.\n  Added option to pull journald records from outside local machine.\n  Thanks to Jiri Vymazal for the patch.\n- 2019-10-11: core bugfix: potential abort on very long action name\n  The action name is stored in modified form for the debug header and\n  some messages. If it is extremely long, a buffer can be overrun,\n  resulting in misaddressing and potential segfault for rsyslog. This\n  can also happen if the action is NOT named, but a custom path to\n  the output module is given and that path is very long. This triggers\n  the same issue because by default the module load path is included\n  in the action name.\n  This patch corrects the problem and truncates overly long names\n  when being used for name generation.\n  The problem was detected during testbench work. We did never receive\n  a bug report from practice.\n- 2019-10-10: testbench: add test for mmpstrucdata with RFC5424 escape sequences\n----------------------------------------------------------------------------------------\nScheduled Release 8.1910.0 (aka 2019.10) 2019-10-01\n- 2019-10-01: core bugfix: incorrect error message on duplicate module load\n  A Null-pointer was passed to printf instead of the module name.\n  On some platforms this may lead to a segfault. On most platforms\n  printf check's for NULL pointers and uses the string \"(null)\"\n  instead.  In any case, the module name is missing from the error message.\n- 2019-10-01: imczmq nitfix: potential NULL ptr in printf on out-of-memory condition\n  very unlikely to happen but if it does without any real issue on most platforms.\n- 2019-10-01: work around some compiler warning messages induced by pthreads API\n- 2019-10-01: core ratelimiting: more verbose message when rate-limiting happens\n  When messages are rate-limited, the error message now also contains the\n  rate limiter setting. This enables the user to more quickly understand what\n  the problem is (especially if default values apply).\n  Thanks to Jiri Vymazal for the patch.\n- 2019-10-01: openssl TLS driver: do not emit unnecessary error message\n  On older openssl versions, an API was missing to set user-defined parameters. If we\n  had such an older version, rsyslog emitted an error message even if the user did\n  not configure such parameters. This has been corrected, so that a message is only\n  emitted if there really is a problem. Based on user feedback the severity has also\n  been downgraded to \"warning\".\n- 2019-10-01: pmcisconames (contributed module) bugfix: potential misaddressing\n- 2019-09-30: pmaixforwardedfrom (contributed module) bugfix: potential misaddressing\n- 2019-09-30: pmdb2diag (contributed module) bugfix: Out of bounds issue\n  Add a new sanity check after determining the level len.\n  Thanks to Philippe Duveau for the patch.\n  see also: https://nvd.nist.gov/vuln/detail/CVE-2019-17040\n- 2019-09-02: ability to set stricter TLS operation modes\n  - checking of extendedKeyUsage certificate field\n  - stricter checking of certificate name/addresses\n  Thanks to Jiri Vymazal for the patch.\n- 2019-08-21: testbench: add basic test for immark\n- 2019-08-20: core: do not unnecessarily set hostname on each HUP\n- 2019-08-20: build system: support cross-platform build for mysql/mariadb\n  rsyslog fails to cross build from source, because it uses mysql_config\n  and mysql_config is unfixably broken for cross compilation. It would be\n  better to use pkg-config. The attached patch makes rsyslog try\n  pkg-config first and fall back to mysql_config.\n  Thanks to Helmut Grohne for providing a base patch.\n- 2019-08-20: core/tcpsrv: potential race on startup/shutdown\n  if the tcpsrv component is started and quickly terminated, it may hang\n  for a short period of time. Also a very small amount of memory is leaked\n  immediately before shutdown. While this leak is irrelevant in practice\n  (the OS clean up the process anyways), it leads to CI failures. The hang,\n  however, can lead to longer than expected shutdown times for rsyslog.\n  The problem can be experienced via imtcp, imgssapi and imdiag (users\n  of affected core component).\n----------------------------------------------------------------------------------------\nScheduled Release 8.1908.0 (aka 2019.08) 2019-08-20\n- 2019-08-19: testbench: add test for $allowedSender functionality\n- 2019-08-19: testbench: harden some tests against very slow CI machines\n- 2019-08-16: testbench: make most tests use a port file and assign listen port 0\n  This makes the test much more robust against heavily loaded test systems.\n- 2019-08-16: core/action: guard action.externalstate.file content against whitespace\n  remove trailing whitespace before checking the status string. This is\n  most important as a line usually ends with \\n, which is considered\n  trailing whitespace. Accepting this increases usability.\n- 2019-08-16: imtcp bugfix: multiple listenerPortFile parameter did not work\n  ... because they were treated as module-global. If we had multiple imtcp\n  listeners with multiple port files, only the last filename was always used.\n  closes https://github.com/rsyslog/rsyslog/issues/3817\n- 2019-08-16: testbench: improve testbench plumbing for gzip and fail cases\n  We have added new capabilities to the testbench plumbing to automatically\n  deal with gzip-compressed files. This also permits to use the wait_seq_check\n  function to work for gzip tests as well. The known-timing-sensitive\n  gzipwr_large test now makes use of the new capabilities. This enables us\n  to more reliably detect when we can savely shutdown the tested instance.\n  This commit also adds an ability to \"abort\" the full testbench run on\n  first test failure. This is especially useful during CI.\n- 2019-08-13: testbench: add test for imuxsock legacy format\n  This was never tested. Ensures we don't accidentally break existing\n  configurations.\n- 2019-08-13: omelasticsearch bugfix: segfault on unknown retryRuleset\n  omelasticsearch does some \"interesting tricks\" for an output module.\n  This causes a segfault if the retryRuleset is now known.\n  The action module interface currently expects that all config errors\n  be detected during instance creation. Instead omelasticsearch defers\n  the retry ruleset check to a later state. The reason is that it wants\n  to support the use the same rulesetname it is defined in - and this\n  is not yet available at action parsing.\n  We fix this by ensuring that any deleted instance is properly unlinked\n  from the instance list. One may argue the module interface should get\n  upgrade for such cases, but this is a longer-term approach.\n  closes https://github.com/rsyslog/rsyslog/pull/3796\n- 2019-08-12: imptcp bugfix: port=\"0\" parameter did not work as expected\n  when multiple interfaces and/or protocols could be bound, each of\n  them used a different listener ports were assigned. While this is\n  basically correct, it makes things unusable, especially as\n  listenPortFileName will only contain the port number used for\n  the latest listener.\n  This patch now follows the model of nsd_ptcp.c to assign only\n  the first port randomly and then use that port consistently.\n- 2019-08-10: omelasticsearch bugfix: potential resource leak with \"rebindinterval\"\n  If the \"rebindInterval\" parameter was used connections could be linked. This\n  was especially the case with small intervals (such as \"2\"). This is fixed by\n  forcing libcurl to close the connection on rebind.\n  Thanks to Noriko Hosoi for providing the patch.\n- 2019-08-10: imjournal bugfix: state file close with fsync() was incorrect\n  This lead to fsync() now always applied where expected.\n  Thanks to Jiri Vymazal for the patch.\n- 2019-08-10: testbench: add addtl test for multithreading and HUP\n- 2019-08-10: imptcp bugfix: received bytes counter improperly maintained\n  imptcp counts the number of bytes received. However, receives\n  happen on different worker thread. The access to the counter\n  was not synchronized, which can cause loss of updates. Also,\n  thread debuggers validly flag this as an error, which creates\n  problems under CI.\n  This commit fixes the situation via atomic operations and\n  falls back to mutex calls if they are not available.\n  Detected by LLVM thread sanitizer.\n  closes https://github.com/rsyslog/rsyslog/issues/3798\n- 2019-08-07: testbench: add basic tests for omusrmsg\n- 2019-08-05: omhttp bugfix: enable checkpath configuration parameter\n  omhttp, 'checkpath' option, was not configurable in the past.\n  - add 'checkpath' to the cnfparamdescr table.\n  - fix issue with checkpath passing extra garbage characters in string.\n  - add 'checkpath' into unit test - omhttp-retry.sh\n  Thanks to Nelson Yen for the fix.\n- 2019-08-05: testbench bugfix: some tests were executed when req module was missing\n  In actual case if --enable-impstats was not given some other tests failed.\n- 2019-08-03: iminternal bugfix: race on termination\n  This could in theory lead to loss of shutdown messages, but was mostly a\n  cosmetic issues. We primarily fixed it to get TSAN-clean so that we can\n  utilize LLVM TSAN in CI.\n- 2019-08-02: testbench: new test for omfile outchannel functionality\n- 2019-08-02: core/janitor bugfix: properly maintain dynafile cache\n  When the janitor cleans out timed-out files, it does not\n  properly indicate the entry is gone. Especially when running\n  in async mode this can lead to use-after-free and thus\n  memory corruption or segfault.\n  see also https://github.com/rsyslog/rsyslog/issues/3756\n- 2019-08-01: omfile bugfix: race file when async writing is enabled\n  This seems to be a long-standing bug, introduced around 7 years ago.\n  It became more visible by properly closing files during HUP, which\n  was done in 8.1905.0 (and was another bugfix). Note that due to this\n  race a memory corruption can occur under bad circumstances. As such,\n  this may have also caused segfaults or system hangs (mutexes could\n  have been affected).\n  closes https://github.com/rsyslog/rsyslog/issues/3772\n- 2019-08-01: testbench: additional tests for HUP\n- 2019-07-31: imrelp bugfix: hang after HUP\n  termination condition was not properly checked; this lead to\n  premature termination after patch 1c8712415b9 was applied.\n  It is open to debate if patch 1c8712415b9 changed the module\n  interface. Actually it looks like this was previously not\n  well thought out.\n  closes https://github.com/rsyslog/rsyslog/issues/3760\n- 2019-07-24: mmdarwin: add new module\n  This is a contributed module. For details see doc.\n  Thanks to the Advens team for contributing it.\n- 2019-07-23 iminternal bugfix: suppress mutex double-unlock\n  If there is a burst of log messages during a time when rsyslog is unable\n  to output (either during log rotation, an out-of-space condition, or\n  some other similar condition), rsyslog can SEGFAULT due to a mutex\n  double-unlock.\n- 2019-07-23 imtcp: enable listenPortFileName parameter\n  this parameter was added, but it had no effect as it was not\n  passed down to the driver layer. This has been fixed. That also\n  now enables us to use dynamically-assigned port, which are\n  very useful for further testbench stabilization. Quite some\n  false positives occurred because the pre-selected port was\n  already in use again when rsyslog started.\n- 2019-07-19 imtcp: enable listenPortFileName parameter\n  this parameter was added, but it had no effect as it was not\n  passed down to the driver layer. This has been fixed. That also\n  now enables us to use dynamically-assigned port, which are\n  very useful for further testbench stabilization. Quite some\n  false positives occurred because the pre-selected port was\n  already in use again when rsyslog started.\n- 2019-07-18 core/action: no error file written if act suspended on TX commit\n  when an action was already disabled while the action was tried to be\n  committed, no error file was written. Note that this state is highly\n  unlikely to happen. Most probably, it can only happen if parameter\n  action.externalstate.file is used.\n----------------------------------------------------------------------------------------\nVersion 8.1907.0 (aka 2019.07) 2019-07-09\nNOTE TO MAINTAINERS: libee is not used by rsyslog for quite some while.\nHowever, we never included this info into the changelog. So if you still\nmake rsyslog depend on libee (some do this), you should stop doing so now.\nLibee is dead and no longer been maintained nor hosted by us. Old versions\ncan still be found at github for those in need.\n\nGENERAL NOTE: during 8.1907 scheduled release timeframe we changed the ChangeLog\nformat to include the date a change went into master branch. This is to provide\nan easy way to identify which changes went into the respective daily stable.\n\n- 2019-07-05 imuxsock: support FreeBSD 12 out of the box\n  FreeBSD 12 uses RFC5424 on the system log socket by default. This\n  format is not supported by the special parser used in imuxsock.\n  Thus for FreeBSD the default needs to be changed to use the\n  regular parser chain by default. That is all this commit does.\n  closes https://github.com/rsyslog/rsyslog/issues/3694\n- 2019-07-05 function bugfix: \"ipv42num\" misspelled as \"ip42mum\" (without \"v\")\n  To fix the issue but keep compatible with existing deployments\n  both function names are now supported.\n  closes https://github.com/rsyslog/rsyslog/issues/3676\n- 2019-07-04 fix leading double space in rsyslog startup messages\n  see also https://github.com/rsyslog/rsyslog/issues/2979\n- omamqp1: port to latest api, add tests\n  This brings omamqp1 up-to-date with the latest qpid-proton-c\n  api version.  This also adds a test for the plugin, to test\n  the basic functionality.  The test requires the user to\n  install qdrouterd and the python qpid-proton library in order\n  to use the simple_recv.py test program.\n  Thanks to Richard Megginson for the patch.\n- omclickhouse bugfix: potential segfault on omclickhouse batchmode\n  segfault happened when the template did not contain the string\n  \"VALUES\".\n  Thanks to github user wdjwxh for the fix.\n- core bugfix: message duplication copied incorrect timestamp\n  MsgDup() placed timereported into timegenerated property, resulting\n  in invalid property values. Original timegenerated was lost. This\n  occurred always when a message needed to be duplicated. Most\n  importantly this is the case when queues are used.\n  closes https://github.com/rsyslog/rsyslog/issues/3716\n- core bugfix: segfault on startup depending on queue file names\n  rsyslog will segfault on startup when a main queue file name has\n  been set and at least on other queue contains a file name. This\n  was cased by too-early freeing config error-detection data\n  structures. It is a regression caused by commit e22fb205a3.\n  Thanks to Wade Simmons for reporting this issue and providing\n  detailed analysis. That greatly helps fixing it quickly.\n  closes https://github.com/rsyslog/rsyslog/issues/3681\n- core \"bugfix\": alignment issue\n  This was not a hard error on current platforms, but a\n  to-be-considered compiler warning regarding invalid alignment.\n  While it works well on current platforms, alignment issues may\n  turn into real issues in future platforms. So we try to fix them\n  if possible. As not only a side-effect this resolves compiler\n  warnings even on current platforms.\n  This fix has some regression potential. If so, the problems\n  may occur during IP address resolution.\n  see also https://github.com/rsyslog/rsyslog/issues/2608\n- omfile bugfix: potential hang/segfault on HUP of dynafile action\n  when omfile was HUPed it did not sufficiently clear all dynafile\n  cache maintenance data structures. This usually lead to misaddressing\n  and could result in various issues, including a hang of rsyslog\n  processing or segfaults. It could also have \"no effect\" by pure\n  luck of not hitting anything important. This actually seems to\n  have been the most frequent case.\n  This seems to be a long-standing bug, but the likelihood of its\n  appearance seems to have been increased by commit 62fbef7\n  introduced in 8.1905. Note: the commit itself has no regression,\n  just increases the likelihood to trigger the pre-existing bug.\n  special thanks to Alexandre Guédon for his help in analyzing\n  the issue - without him, we would probably still not know\n  what actually went wrong.\n  closes https://github.com/rsyslog/rsyslog/issues/3686\n- imjournal bugfix: potential message duplication\n  When journal was preloaded from previously saved cursor it was not advanced\n  to next entry so reading begun from last message which was therefore\n  duplicated.\n  Thanks to Jiri Vymazal for the patch.\n- rfc5424 parser bugfix: leading space sometimes lost\n  if structured data is present a leading space in MSG field is lost\n- queue subsystem bugfix: oversize queue warning message shown as error\n  The warning message was emitted as an error message, which is misleading\n  and may also break some automated procedures.\n- core bugfix: HUP did not work reliable on all platforms\n  most notably not on FreeBSD, maybe others. The reason was obviously\n  different handling of signals in respect to multiple threads.\n- build system bugfix: missing files in distribution tarball\n- testbench\n  * fixed \"make distcheck\" settings which were missing some modules\n    This lead to incomplete \"make distcheck\" run; some errors were not\n    detected due to that.\n  * testbench framework: use ip tool instead of outdated ifconfig\n    The framework now first checks if \"ip\" is available and falls back\n    to \"ifconfig\" only if this is not the case.\n    Thanks to Michael Biebl for the suggestion.\n    closes https://github.com/rsyslog/rsyslog/issues/3682\n------------------------------------------------------------------------------\nVersion 8.1905.0 (aka 2019.05) 2019-05-28\n- templates: add datatype template option for JSON generation\n  The new \"datatype\" and \"onEmpty\"  template options permits to\n  generate non-string data rather easily. It works together with\n  jsonf formatting, which is what people should use nowadays.\n  closes https://github.com/rsyslog/rsyslog/issues/2827\n- config processing: check disk queue file is unique\n  If the same name is specified for multiple queues, the queue files\n  will become corrupted. This commit adds a check during config parsing.\n  If duplicate names are detected the config parser errors out and the\n  related object is not created.\n  Note: this may look to a change-of-behavior to some users. However,\n  this never worked and it was pure luck that these users did not run\n  into big problems (e.g. DA queues were never going to disk at the\n  same time). So it is acceptable to error out in this hard error case.\n  closes https://github.com/rsyslog/rsyslog/issues/1385\n- global config: new parameters for ruleset queue defaults\n  specifically:\n  * default.ruleset.queue.timeoutshutdown\n  * default.ruleset.queue.timeoutactioncompletion\n  * default.ruleset.queue.timeoutenqueue\n  * default.ruleset.queue.timeoutworkerthreadshutdown\n  closes https://github.com/rsyslog/rsyslog/issues/3656\n- add capability to write full config file (-o cmdline option)\n  Introduces the capability to create an output config file that explodes\n  all \"includes\" into a single file. This provides a much better overview\n  of how exactly the configuration is crafted. That could often be a great\n  troubleshooting aid.\n  This commit also contains some slight not-really-related cleanup.\n  closes https://github.com/rsyslog/rsyslog/issues/3634\n- queue subsystem: permit to disable \"light delay mark\"\n  New semantic: if lightDelayMark is 0, it is set to the max queue\n  size, effectively disabling the \"light delay\" functionality.\n  Thanks to Yury Bushmelev to mentioning issues related to light\n  delay mark and proposing the solution (which actually is what\n  this commit does).\n  closes https://github.com/rsyslog/rsyslog/issues/1778\n- queue subsystem: provide better user status messages\n  The queue subsystem now provides additional information messages which\n  may help a regular user to maintain system health. Most importantly,\n  DA queues now output when they persist queue data at end of run and\n  when they restart the queue based on persisted data.\n- core: emit a warning message for ultra-large queue size definitions\n  We see error reports from users who have configured excessively large queues\n  and receive an OOM condition or other problems.\n  With that patch we generate a warning message if a queue is configured very\n  large. \"Very large\" is defined to be in excess of 500000 messages.\n  see also https://github.com/rsyslog/rsyslog/issues/3314\n  closes https://github.com/rsyslog/rsyslog/issues/3334\n- new global config parameter \"internalmsg.severity\"\n  permits to specify a severity filter for internal message. Only\n  messages with this severity level or more severe are logged.\n  Originally this was done in rsyslog.conf as usual: you can filter\n  rsyslog messages on severity, just like any other. But with systemd,\n  we now emit primarily to the journal, and this is outside of rsyslog's\n  rule engine and so regular filters do not apply (at least in regard\n  to the journal). Logging to journal is good, because finally\n  folks begin to see the messages (traditional distro configs discard\n  them, for whatever is the reason).\n  This commit implements a global setting for a severity-based filter\n  for internal messages, before submitted to journal. So it's not 100%\n  of what rsyslog can do, but at least some way to customize.\n  see also https://github.com/rsyslog/rsyslog/issues/3639\n- config processing bugfix: error messages if config.enabled=\"off\" is used\n  Using config.enabled=\"off\" could lead to error messages on\n  \"parameter xxx not known\", which were invalid. They occurred\n  because the config handler expected them to be used, which\n  was not the case due to being disabled.\n  This commit fixes that issue.\n  closes https://github.com/rsyslog/rsyslog/issues/2520\n- core portability bugfix: harden shutdown processing on FreeBSD\n  On FreeBSD, rsyslog does not always terminate immediately on SIGTERM.\n  Root cause seems to be that SIGTERM is delivered differently under\n  FreeBSD. This causes the main thread to not be awaken, and so it\n  takes until the next janitor interval to come back to life - which\n  can be far too long. Fixed this bug explicitly awaking the main\n  thread.\n- imtcp bugfix: oversize message truncation causes log to be garbled\n  The actual problem is in the tcpserver component. However, the prime user\n  is imtcp and so users will likely experience this as imtcp problem.\n  When a too-long message is truncated, the byte after the truncation\n  position becomes the first byte of the next message. This will garble\n  the next messages and in almost all cases render it is syslog-noncompliant.\n  The same problem does NOT occur when the message is split.\n  This commit fixes the issue. It also includes a testbench fix.\n  Unfortunately the test for exactly this feature was not properly\n  crafted and so could not detect the problem.\n  closes https://github.com/rsyslog/rsyslog/issues/3580\n- omfile bugfix: FlushOnTXEnd does not work reliably with dynafiles\n  The flush was only done to the last dynafile in use at end of\n  transactions. Dynafiles that were also modified during the\n  transaction were not flushed.\n  Special thanks to Duy Nguyen for pointing us to the bug and\n  suggesting a solution.\n  This commit also contains a bit of cosmetic cleanup inside\n  the file stream class.\n  closes https://github.com/rsyslog/rsyslog/issues/2502\n- lmcry_gcry build bugfix: was not always properly build\n  Due to an invalid definition in build system this seems to have not\n  been correctly build on at least some platforms (but it worked on\n  others as it passed CI testing). This has now been corrected.\n  Thanks to Remi Locherer for the patch.\n- dnscache bugfix: very unlikely memory leak\n  This fixes a memory leak that can only occur under OOM conditions.\n  Detected by Coverity Scan, CID 203717\n- testbench bugfix: wrong parameter check in diag.sh (tcpflood())\n  When first parameter is check_only, the tcpflood funtion shall not\n  abort the test itself (The fail is intended if this option is set).\n  closes issue #3625\n- testbench bugfix: imfile-symlink test failed w/ parallel test run\n  The test sometimes failed. It used a symlink to a hardcoded name\n  rsyslog-link.*.log. This symlink was created but then disappears.\n  The reason is that upon (every!) test exit, rsyslog-link.*.log is\n  deleted. So a parallel test running the exit procedure just at the\n  \"right\" time can removed that file.\n  The bug is that the file name should be created using the tests's\n  dynamic name. This is done now.\n  closes https://github.com/rsyslog/rsyslog/issues/3550\n------------------------------------------------------------------------------\nVersion 8.1904.0 (aka 2019.04) 2019-04-16\n- omfile: provide more helpful error message on file write errors\n  now contains actual file name plus a link to probable causes for this type\n  of problem\n- imfile: emit error on startup if no working directory is set\n  When the work directory has not been set or is invalid, state files\n  are created in the root of the file system. This is neither expected\n  nor desirable. We now complain loudly about this fact. For backwards\n  compatibility reasons, we still need to support running imfile in\n  this case.\n  closes https://github.com/rsyslog/rsyslog/issues/1296\n- dnscache: add global parameter dnscache.default.ttl\n  This permits to control default TTL for cache entries. If set\n  to 0, the DNS cache is effectively disabled.\n  closes https://github.com/rsyslog/rsyslog/issues/49\n  closes https://github.com/rsyslog/rsyslog/issues/1487\n- omelasticsearch: new parameter rebindinterval\n  Thanks to Richard Megginson for the patch.\n- omelasticsearch: new parameter skipverifyhost\n  Add ability to specify the libcurl CURLOPT_SSL_VERIFYHOST\n  option to skip verification of the hostname in the peer cert.\n  WARNING: This option is insecure, and should only be used\n  for testing. The default value is off, meaning, the hostname\n  will be verified by default.\n  Thanks to Richard Megginson for the patch.\n- omelasticsearch: set rawmsg to data from original request\n  Previously, when constructing the message to submit for a retry\n  for an original request, if the original request did not contain\n  the field `message`, the system property `rawmsg` was set to\n  the entire metadata + data from the original request.  This was\n  causing problems with Elasticsearch.  This patch changes\n  the code so that the `rawmsg` will be set to only the data part\n  of the original request if there is no `message` field.\n  closes https://github.com/rsyslog/rsyslog/issues/3573\n  Thanks to Richard Megginson for the patch.\n- mmkubernetes - support for metadata cache expiration\n  New parameters for mmkubernetes (module and action):\n  * `cacheexpireinterval`\n    If `cacheexpireinterval` is -1, then do not check for cache expiration.\n    If `cacheexpireinterval` is 0, then check for cache expiration.\n    If `cacheexpireinterval` is greater than 0, check for cache expiration\n    if the last time we checked was more than this many seconds ago.\n  * `cacheentryttl` - maximum age in seconds for cache entries\n  New statistics counters:\n  * `podcachenumentries` - the number of entries in the pod metadata cache.\n  * `namespacecachenumentries` - the number of entries in the namespace\n      metadata cache.\n  * `podcachehits` - the number of times a requested entry was found in the\n      pod metadata cache.\n  * `namespacecachehits` - the number of times a requested entry was found\n      in the namespace metadata cache.\n  * `podcachemisses` - the number of times a requested entry was not found\n      in the pod metadata cache, and had to be requested from Kubernetes.\n  * `namespacecachemisses` - the number of times a requested entry was not\n      found in the namespace metadata cache, and had to be requested from\n      Kubernetes.\n- imdocker: new contributed module\n  imdocker will get (docker) container logs from a host as well as filling\n  out some basic container metadata as id, name, image, labels.\n  Thanks to Nelson Yen for the contribution.\n- mmtaghostname: new contributed module\n  This module allows one to force hostname after parsing to the localhostname of\n  rsyslog and/or add a tag to messages received from input modules without\n  tag parameter.\n  Thanks to Philippe Duveau for the contribution.\n- imbatchreport: new contributed input module\n  This input module manage batches' reports : complete file as a single log.\n  Thanks to Philippe Duveau for the contribution.\n- imtuxedolog: new contributed input module for Tuxedo ULOG\n  Thanks to Philippe Duveau for the contribution.\n- openssl network driver: Added support setting openssl configcommands\n  We are using the gnutlsPriorityString setting variable, to pass\n  configuration commands to openssl.\n  closes: https://github.com/rsyslog/rsyslog/issues/3605\n- omkafka: drop messages rejected due to being too large\n  Drop messages that were rejected due to\n  'RD_KAFKA_RESP_ERR_MSG_SIZE_TOO_LARGE' error\n  Thanks to Nelson Yen for the patch\n- core/action: implement capability to resume/suspend via external file\n  It has been reported that some TCP receivers exists that accept syslog tcp\n  messages at any rate, even if they do not manage to actually process them.\n  Instead, they silently drop the message. This behavior is not configurable.\n  All in all, it can lead to considerate message loss.\n  To support such use cases, we need to provide an ability to externally\n  trigger actions suspension and resumption.\n  We do this via a configured file which contains the status of the action.\n  Rsyslog periodically reads the file and if it contains \"SUSPEND\", it\n  suspend the action (and likewise for resume).\n  closes https://github.com/rsyslog/rsyslog/issues/2924\n- improg bugfix: some memory leaks\n  Thanks to Philippe Duveau for the contribution.\n- msg object bugfix: regression from 1255a67\n  closes https://github.com/rsyslog/rsyslog/issues/3570\n- pmnormalize: fix memory leaks, improve tests\n  This patch fixes a set of problems plus provides more and enhanced\n  tests for the module.\n  Most important problem was a memory leak that occurred when a message\n  could not be passed at all. For each message that could not be parsed\n  memory of at least the size the message is leaked. Depending on\n  traffic pattern this can quickly lead to OOM. Note, however, that\n  this leak was never reported - it was discovered as part of code\n  review.\n  closes https://github.com/rsyslog/rsyslog/issues/2007\n- omkafka bugfix: build failure due to inconsistent type\n  fails depending on platform and settings; was somehow undetected by CI\n- imjournal bugfix: potential segfault on some API failure returns\n  In one case there was possibility of free()'d value of journal\n  cursor not being reset, causing double-free and crash later on.\n  closes https://github.com/rsyslog/rsyslog/issues/3537\n- openssl subsystem bugfix: better error handling\n  Handling of SSL_ERROR_SYSCALL has been hardened.\n  Handling for SSL_Shutdown errors has been corrected.\n  Also fixed SSL Shutdown handling in tcpflood (openssl code).\n  If SSL_Shutdown returns error, we call SSL_read as described in\n  the documentation to do a bidirectional shutdown.\n  Closes https://github.com/rsyslog/rsyslog/issues/3561\n- imjournal bugfix: Fetching journal cursor only for valid journal\n  The sd_journal_get_cursor() got called regardless of previous\n  retcodes from other journal calls which flooded logs with journald\n  errors. Now skipping the call in case of previous journal call\n  non-zero result. Fixed success checking of get_cursor() call\n  to eliminate double-free possibility.\n  Also, making WorkAroundJournalBug true by default, as there were no\n  confirmed performance regressions for a quite long time.\n  Thanks to Jiri Vymazal for the patch.\n- omamqp: fix build errors\n  They occur on some, newer, platforms. We do not really fix them, but rather\n  make the compiler ignore them. This is not really good, but the module is\n  contributed and so that's for now the best thing we can do.\n- testbench: change manytcp.sh to use a larger connection count again\n  not sure why it was reduced, maybe related to\n  https://github.com/rsyslog/rsyslog/issues/1108\n  also, modernize this and another test\n- tcpflood bugfix: make soft connection limit work again\n  It looks like the soft limit became defunct when tcpflood was enhanced to\n  request more open file handles from OS.\n  closes https://github.com/rsyslog/rsyslog/issues/1108\n- testbench bugfix: omhttp tests were not run during \"make distcheck\"\n- build system bugfix: omhttp test files were not included in dist tarball\n  Thanks to Thomas D. (whissi) for the patch.\n------------------------------------------------------------------------------\nVersion 8.1903.0 (aka 2019.03) 2019-03-05\n- omrabbitmq: add features (RabbitMQ HA management, templatize routing_key, \n  populate amqp message headers, delivery_mode and expiration parameters) \n- improg: create input module to use external program as input datas\n- imtuxedoulog: create input module to consume Tuxedo ULOG files\n- omhttp: rewritten with large feature enhancements\n  Many thanks to Gabriel Intrator for this work. Gabriel also has adopted the\n  module and plans to support it in the future.\n- pmdb2diag: create parser module for DB2 diag logs\n- TLS subsystem: add support for certless communication\n  both openssl and GnuTLS drivers have been updated to support certless\n  communications. In this case e.g. Diffie-Helman is used.\n  NOTE: this is an insecure mode, as it does NOT guard against\n  man-in-the-middle attacks. We implemented it because of the large demand,\n  not because we think it makes sense to use this mode. We strongly recommend\n  against it.\n  closes https://github.com/rsyslog/rsyslog/issues/1068\n- imrelp/omrelp: add capability to specify tlslib for librelp\n  closes https://github.com/rsyslog/rsyslog/issues/3451\n- build system: introduce a better way to handle compiler pragmas\n  we now use macros and _Pragma(). This requires less code lines and is more\n  portable.\n- omkafka: add support for dynamic keys\n  A new configuration property \"dynaKey\" is added that, when \"on\", changes the\n  value of property \"key\" to a template names instead of a constant value.\n  This is similar in approach to the DynaTopic implementation.\n  Thanks to Ludo Brands for the patch.\n- AIX port: add AIX linking extensions on many plugins and contributions to\n  allow building them on this os.\n- template: add Time-Related System Property $wday which is the day of week\n  This allows one to get a week based rotation of log as AIX does.\n- ksi subsystem: add high availability mode\n  Note: ksi subsystem now REQUIRES libksi 3.19.0 or above\n  Thanks to Allan Park for the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/3338\n- imfile bugfix: file reader could get stuck\n  State file handling was invalid. When a file was moved and re-created\n  rsyslog could use the file_id if the new file to write the old files'\n  state file. This could make the file reader stuck until it reached the\n  previous offset. Depending on file sizes this could never happen AND\n  would cause large message loss. This situation was timing dependent\n  (a race) and most frequently occurred under log rotation. In polling\n  mode the bug was less likely, but could also occur.\n  closes: https://github.com/rsyslog/rsyslog/issues/3465\n  closes: https://github.com/rsyslog/rsyslog/issues/3468\n- imfile bugfix: potential segfault when working with directories or symlinks\n  see also https://github.com/rsyslog/rsyslog/pull/3496\n  Thanks to Nelson Yen for the patch\n- omhttp bugfix: header items could not have spaces in them\n  Thanks to Nathan Brown for the patch.\n- core bugfix: enlarged msg offset types for bigger structured messages\n  using a large enough (dozens of kBs) structured message\n  it is possible to overflow the signed short type which leads\n  to rsyslog crash. (applies to msg.c, the message object)\n  Thanks to Jiri Vymazal for the patch.\n- core bugfix for AIX: timeval2syslogTime now handle the bias according to\n  local time zone as documented by IBM.\n- imfile feature: add configuration parameter to force parsing of read logs\n- imczmq bugfix:\n  Release zframe following read from socket\n  Make the 0MQ frame pointer local to the receive loop and destroy the\n  frame as soon as the contents have been copied. This avoids:\n  * a memory leak should the receive loop execute more than once\n  * referencing an un-initialized value during cleanup (finalize_it)\n  Thanks to Mark Gillott for the patch.\n- omclickhouse bugfix: default template unusable\n  STDSQL option added to the default template used in output module of clickhouse\n  Thanks to gagandeep trivedi for the patch.\n- omclickhouse \"bugfix\": work-around failed error detection\n  omclickhouse uses a questionable method to check if a request generated\n  an error. We have seen the method to fail when we slightly upgraded clickhouse\n  server in CI testing.\n  This commit makes the method a bit more reliable without really fixing it.\n  But it's at least a short-term solution.\n  This should be changed to a proper status check. I assume such is possible.\n  see also https://github.com/rsyslog/rsyslog/issues/3485\n- imptcp bugfix: overly long socket bind path can lead to segfault\n  if the `path` input parameter is overly long (e.g. more than 108\n  characters on some platforms) a non-terminated string is generated\n  and then passed to OS API. This can lead to all sorts of problems\n  including segfault.\n  We detected that based on gcc-8 warnings during code inspection.\n  No real-world problem case is known.\n- ommongodb bugfix: improper stpncpy() calls\n- testbench tcpflood: add new transport option relp-tls\n  Tcpflood can now send messages via relp with tls support.\n  closes https://github.com/rsyslog/rsyslog/issues/3448\n- testbench: mmdb valgrind tests failed is srcdir env was not set\n- testbench: add omclickhouse tests\n- testbench bugfix: some long-running tests had too low runtime allowance\n  closes https://github.com/rsyslog/rsyslog/issues/3493\n- testbench bugfix: daqueue-dirty-shutdown test\n  This test occasionally failed with left-over spool files. As far as we\n  have analyzed, this is due to the use of an invalid shutdown timeout\n  (very short) in the second phase of the test. It looks like this is\n  actually a copy&paste error from phase one. Behavior of rsyslog was\n  correct, but the test itself created a false positive.\n  We have corrected the timeout now and also modernized the test\n  a bit.\n  closes https://github.com/rsyslog/rsyslog/issues/2122\n- testbench bugfix: some omhttp tests had compatibility issues with Python 3\n  Thanks to Thomas D. (whissi) for the patch.\n------------------------------------------------------------------------------\nVersion 8.1901.0 (aka 2019.01) 2019-01-22\n- new version scheme: 8.yymm.0 - version now depends on release date\n  see also https://rainer.gerhards.net/2018/12/rsyslog-version-numbering-change.html\n- queue: add support for minimum batch sizes\n  closes https://github.com/rsyslog/rsyslog/issues/495\n- change queue.timeoutshutdown default to 10 for action queues\n  The previous default of 0 gave action queues no real chance to\n  shutdown - at the time they were applied, they were usually already\n  expired (computing the absolute timeout took a small amount of time).\n  So we change this now to 10ms, which still is very quick but gives\n  the queue at least a chance to shutdown itself. That in turn\n  smoothes the whole shutdown process.\n  If a very large number of action queues is used this may lead\n  to a very slightly longer shutdown time, albeit this is very\n  improbable.\n- omclickhouse: new output module for clickhouse\n  This output module adds the possibility to send\n  INSERT querys to a Clickhouse database. See doc for details.\n  The messages are sent via a REST interface.\n  This commit also adds support of the testbench\n  for clickhouse tests, as well as  various tests.\n  Closes https://github.com/rsyslog/rsyslog/issues/2272\n- omkafka: Add ability to dump librdkafka statistics to a file\n  Use statsFile to specify statistics output file; also requires\n  setting statistics.interval.ms confparam to a non-zero value.\n  Thanks to github user pcullen65 for the contribution.\n- tls(ossl/gtls): add new Option \"StreamDriver.PermitExpiredCerts\"\n  The new Option can have one of the following values:\n  on = Expired certificates are allowed\n  off = Expired certificates are not allowed\n  warn = Expired certificates are allowed but warning will be logged (Default)\n  Includes necessary tests to validate new code.\n  closes https://github.com/rsyslog/rsyslog/issues/3364\n- action: add \"action.resumeIntervalMax\" parameter\n  This parameter permits to set an upper limit on the growth of the\n  retry interval. This is most useful when a target has extended\n  outage, in which case retries can happen very infrequently.\n  closes https://github.com/rsyslog/rsyslog/issues/3401\n- report child process exit status according to config parameter\n  Add new global setting 'reportChildProcessExits' with possible values\n  'none|errors|all' (default 'errors'), and new global function\n  'glblReportChildProcessExit' to report the exit status of a child\n  process according to the setting.\n  Invoke the report function whenever rsyslog reaps a child, namely in:\n  - rsyslogd.c (SIGCHLD signal handler)\n  - omprog\n  - mmexternal\n  - srutils.c (execProg function, invoked from stream.c and omshell)\n  Remove redundant \"reaped by main loop\" info log in omprog.\n  Promote debug message in mmexternal indicating that the child has\n  terminated prematurely to a warning log, like in omprog.\n  closes https://github.com/rsyslog/rsyslog/issues/3281\n  Thanks to Joan Sala for contributing this.\n- build system: add capability to turn off helgrind tests\n  we add configure switch --enable-helgrind. We need to turn helgrind off\n  when we use clang coverage instrumentation. The instrumentation injects\n  mt-unsafe counter updates which we seem to be unable to suppress.\n  Note: for gcc this was possible, because they all occurred in a utility\n  function. For clang, they are inlined so we get many -and changing- violations.\n  see also https://github.com/rsyslog/rsyslog/issues/3361#issuecomment-450502569\n- imzmq3/omzmq3: remove modules\n  according to @brianknox (their author) these modules are outdated:\n  https://twitter.com/taotetek/status/931860786959540224\n  They are replaced by imczmq/omczmq and are no longer maintained. We put a\n  depreciation notice into the modules a year ago, and now it finally is time\n  to remove them. They do NOT build in any case, except if very old versions\n  of the 0mq ecosystem are used.\n  see also https://github.com/rsyslog/rsyslog/issues/2100\n  closes https://github.com/rsyslog/rsyslog/issues/2103\n- bugfix omusrmsg: don't overwrite previous set _PATH_DEV value\n  Since commit 56ace5e418d149af27586c7c1264fccfbc6badf1, omusrmsg was broken\n  because \"memcpy()\" is not a suitable substitute for \"strncat()\" in this\n  context, it is actually replacing the previous added content.\n  Bug: https://bugs.gentoo.org/673004\n  Closes: https://github.com/rsyslog/rsyslog/issues/3346\n  Thanks to Thomas D. (whissi) for the patch.\n- bugfix ossl TLS driver: fixed authentication mode anon\n  authentication mode \"anon\" was not properly supported in ossl TLS\n  driver; if selected, did still require a full certificate.\n  closes: https://github.com/rsyslog/rsyslog/issues/3037\n- bugfix tls subsystem: Receiver hang due to insufficient TLS buffersize.\n  gtls and ossl driver used a default buffersize of 8KiB to store received\n  TLS packets. When tls read returned more than buffersize, the additional\n  buffer was not processed until new data arrived on the socket again.\n  TLS RFCs require up to 16KiB+1 buffer size for a single TLS record.\n  closes https://github.com/rsyslog/rsyslog/issues/3325\n- bugfix pmpanngfw: build issue due to non-matching data types in comparison\n  Thanks to Narasimha Datta for the patch.\n- omfile: work-around for \"Bad file descriptor\" errors\n  This works-around an issue we can reproduce e.g. via the\n  imtcp-tls-ossl-x509fingerprint.sh test. Here, omfile gets a write\n  error with reason EBADF. So far, I was not able to see an actual\n  coding error. However I traced this down to a multithreaded race\n  on open and close calls. I am very surprised to see this type\n  of issue, as I think the kernel guarantees that it does not happen.\n  Here is what I see in strace -f:\n  openssl accepts a socket:\n  [pid 66386] accept(4, {sa_family=AF_INET, sin_port=htons(59054), sin_addr=inet_addr(\"127.0.0.1\")}, [128->16]) = 10\n  then, it works a bit with that socket, detects a failure and shuts it down. Sometimes, at the very same instant omfile on another thread tries to open on output file. Then the following happens:\n  [pid 66386] close(10)                   = 0\n  [pid 66389] openat(AT_FDCWD, \"./rstb_356100_31fa9d20.out.log\", O_WRONLY|O_CREAT|O_NOCTTY|O_APPEND|O_CLOEXEC, 0644 <unfinished ...>\n  [pid 66386] close(10 <unfinished ...>\n  [pid 66389] <... openat resumed> )      = 10\n  [pid 66386] <... close resumed> )       = 0\n  [pid 66386] poll([{fd=4, events=POLLIN}, {fd=5, events=POLLIN}], 2, -1 <unfinished ...>\n  [pid 66389] write(2, \"file './rstb_356100_31fa9d20.out\"..., 66file './rstb_356100_31fa9d20.out.log' opened as #10 with mode 420\n  ) = 66\n  [pid 66389] ioctl(10, TCGETS, 0x7f59aeb89540) = -1 EBADF (Bad file descriptor)\n  This is **literally** from the log, without deleting or reordering\n  lines. I read it so that there is a race between `open` and `close`\n  where fd 10 is reused, but seemingly closed - resulting in the `EBADF`\n  While it smells like a kernel issue, it may be a well-hidden program\n  bug - if so, one I currently do not find. HOWEVER, this commit\n  works around the issue by reopening the file when we receive EBADF.\n  That's the best thing to do in that case, especially if it really is\n  a kernel bug. Data loss should not occur, as the previous writes\n  succeeded in that case.\n  The backdraw of this work-around is that it only \"fixes\" omfile. In\n  theory every part of rsyslog can be affected by this issues (queue\n  files, for example). So this is not to be considered a final solution\n  of the root issues (but a big step forward for known problem cases).\n  see also https://github.com/rsyslog/rsyslog/issues/3404\n- omhttp bugfix: segfault due to NULL pointer access\n  many thanks to Gerardo Puerta for the patch\n- omkafka bugfix: segfault when running in debug mode using dynamic topics\n  This should only affect test environments, as debug mode is not\n  suitable for production (and really does not work when running for\n  extended period of time).\n- testbench bugfix: TLS syslog tests for \"anon\" mode were broken\n  They did not detect when \"anon\" mode was not properly supported by the\n  drivers.\n- test tooling bugfix: correct tcpflood error messages\n  it looks like tcpflood's openssl code stems partly back to tcpdump, at\n  least the error messages indicate this. Thankfully tcpdump is BSD licensed,\n  so this should not be a big issue. Nevertheless, the incorrect program name\n  in error messages needs to be corrected, and this is what this commit does.\n- tcpflood bugfix: tool did not terminate on certificate error\n  when tcpflood detected a certificate error, it reported an\n  error message but did not abort. This could make errors undetectable\n  during CI runs.\n  also fix tests which did not properly provide CA cert (which than\n  caused the error).\n- testbench: fix issues with journal testing\n  The configure/Makefile checks were not correct, leading to the\n  build of journal components when not necessary, even if not\n  supported by the platform. Thus lead to invalid build and test\n  failures.\n- testbench: add tests for \"certless\" tcp/tls\n  This adds a test to ensure that a client without certificate can\n  connect to a server with certificates. So it is not exactly\n  \"certless\".\n  The prime intent of this test is to match config suggestions given\n  by log hosting companies (like loggly) and so ensure that we do\n  not accidentally break them. This is especially important as the\n  capability for certless clients was not properly documented and\n  also become forgotten by the rsyslog team.\n  see also https://github.com/rsyslog/rsyslog/issues/3413\n- CI\n  - further improve testbench robustness against slow machines\n  - testbench: add tests for parser.EscapeControlCharacterTab global option\n  - testbench: Updated all expired x.509 certs\n    Closes https://github.com/rsyslog/rsyslog/issues/3348\n  - fix a potential race in CI debug mode which can lead to segfault\n    only when instructed to do so, rsyslog may emit a \"final worker thread shutdown\"\n    messages. This is usually only enabled in CI and/or other testing. If enabled,\n    the code has a race on the pWti object which can lead to segfault or abort.\n    Only system which explicitly enable this CI aid are affected (running in debug\n    mode alone is NOT sufficient).\n    This is a regression from 8.40.0.\n  - testbench: improve robustness against slow CI, gen. improvements\n    * add an overall timeout value for tests - if running longer,\n      testbench framework tries to FAIL and end test. Note that\n      this is not bullet-proof and not intended to be so.\n    * guard against hanging rsyslog instances via a new imdiag\n      feature to abort after n number of seconds; among others,\n      this guards as against timeout-cancel in CI, which is always\n      pretty hard to diagnose - now we see these errors in test-suite.log\n    * fix a bug in tcp zip test, which actually did not use zip mode\n    * experimentally add debug output to better understand\n      shutdown_when_empty operation; goal is to improve understanding\n      and then remove that code again.\n    * improve shutdown predicate for a couple of tests\n    * made travis run make check with two parallel threads, for which\n      we seem ready now. Nevertheless, it's still experimental and we\n      may roll this back if required.\n    * testbench: disable omprog tests that hang under coverage instrumentation\n      When gcc coverage instrumentation is used, these tests hang. They work\n      with clang coverage instrumentation, but for some reason clang does not\n      give us full reports (at least not when used together with CodeCov.io).\n      We have tried to troubleshoot this for hours and hours - now is time to\n      give up until someone comes up with a bright idea. So we make the affected\n      tests skip themselves when they detect gcc with coverage instrumentation.\n   * testbench: add new test for imfile and logrotate in copytruncate mode\n   * testbench: add new omkafka tests for dynamic topics\n   * travis: do no longer run 0mq tests\n     This often causes trouble when the packages are rebuild by the 0mq project\n     (which happens frequently). We already do intensive testing of the 0mq\n     components in the buildbot infrastructure, where we use dedicated containers.\n     This is reliable, as the containers already contain everything needed and so\n     do not need to reach out to the 0mq package archives. In the light of this,\n     let's save us the trouble of Travis failures. The only downside is that\n     users cannot pre-test with their local Travis when modifying 0mq modules,\n     which is quite acceptable.\n------------------------------------------------------------------------------\nVersion 8.40.0 [v8-stable] 2018-12-11\n- mmkubernetes: add support for sslpartialchain for openssl\n  If `\"on\"`, this will set the OpenSSL certificate store flag\n  `X509_V_FLAG_PARTIAL_CHAIN`.   This will allow you to verify the Kubernetes API\n  server cert with only an intermediate CA cert in your local trust store, rather\n  than having to have the entire intermediate CA + root CA chain in your local\n  trust store.  See also `man s_client` - the `-partial_chain` flag.\n  This option is only available if rsyslog was built with support for OpenSSL and\n  only if the `X509_V_FLAG_PARTIAL_CHAIN` flag is available.  If you attempt to\n  set this parameter on other platforms, you will get an `INFO` level log\n  message.  This was done so that you could use the same configuration on\n  different platforms.\n- openssl driver: improved error messages\n  also fixes misleading wording of some error messages\n  closes https://github.com/rsyslog/rsyslog/issues/3238\n- imfile: disable file vs directory error on symlinks\n  The file/directory node-object alignment now ignores symlinks. Previously\n  it reported error on each directory symlink spamming user error logs.\n  Thanks to Jiri Vymazal for the patch.\n- cleanup: remove no longer needed --enable-rtinst code\n  configure option --enable-rtinst is gone-away since a while, but there were\n  still some supporting code left. It required careful analysis what could\n  actually be removed. This is now done and the code fully cleaned up. This\n  greatly simplifies the code and also makes it better readable for\n  developers which are not deep inside the rsyslog code base.\n  As a positive side effect, we could eliminate mutex calls inside\n  the debug system. This means we are more likely to reproduce race\n  conditions in runs with debugging enabled.\n  closes https://github.com/rsyslog/rsyslog/issues/2211\n- bugfix imfile: rsyslog re-sends data for files larger 2GiB\n  This occurs always if and only if\n  - reopenOnTruncate=\"on\" is set\n  - file grows over 2GiB in size\n  Then, the data is continuously re-sent until the file becomes smaller\n  2GiB (due to truncation) or is deleted.\n  It is a regression introduced by 2d15cbc8221e385c5aa821e4a851d7498ed81850\n  closes https://github.com/rsyslog/rsyslog/issues/3249\n- config: fix segfault in backticks \"echo\" expansion of undefined variables\n  The bug was introduced in commit abe0434 (config: enhance backticks \"echo\"\n  capability). The getenv() result passed to strlen() and es_addBuf() may be\n  NULL if the environment variable does not exist, resulting in a segfault.\n  Thanks to Julien Thomas for the patch.\n  fixes https://github.com/rsyslog/rsyslog/issues/3006\n- bugfix imsolaris: message timestamps on Solaris\n  On Solaris messages don't have their time directly in the raw body but in\n  a separate log_ctl structure which is currently not used.\n  When message is logged and processed, rsyslogd gives it current time because\n  it ignores the actual one. That means that old messages (e.g. from system\n  reboot) get timestamp of processing instead of the reboot itself (it is\n  not a problem for live logging where now is used anyway).\n  Thanks to Jakub Kulik for the patch.\n- bugfix build system: \"make distcheck\" did not work for mysql tests\n- bugfix build system: don't link liblogging-stdlog when available but not enabled\n  When liblogging-stdlog was available but configure option \"--disable-liblogging-stdlog\"\n  was set, rsyslog was still linking against liblogging-stdlog.\n  This commit will ensure that rsyslog will only link against liblogging-stdlog when\n  \"--enable-liblogging-stdlog\" was set.\n  see also: https://bugs.gentoo.org/667836\n- bugfix RainerScript: abs() could return negative value, now in range [0..max]\n  Thanks to Harshvardhan Shrivastava for providing the patch\n- bugfix debug output: date property options output wrongly\n  inside debug logging, the date property options were not all\n  properly converted into strings. Some of the newer ones were\n  invalidly flagged as \"UNKNOWN\". This is primarily a cosmetic\n  problem and has no effect other than puzzling folks looking at\n  the debug log.\n- bugfix omhttp: did not compile on some platforms\n- CI\n   * made mysql-based tests (ommysql and omlibdbi) work inside containers\n   * bugfix testbench: do not execute libgcrypt tests if disabled\n     closes https://github.com/rsyslog/rsyslog/issues/3228\n   * testbench: grep failed when string starting with \"-\" was used\n     The search term was mistakenly interpreted as an option.\n   * testbench: support auto-start/-stop of mysqld\n     This is required to run mysql/mariadb tests inside containers.\n     closes https://github.com/rsyslog/rsyslog/issues/3223\n   * improve bash coding style and fix a some bug in testbench\n     - duplicate diag.sh init call was not detected due to typo\n     - queue-persists test did not work correctly\n     - some general testbench framework improvements\n     issues found be shellcheck, fixes brought up other work to do\n   * testbench: improve journal tests and testbench framework\n     improving both style and reliability of journal tests; along that way\n     also improve testbench framework:\n     - do cleanup on error_exit and skip\n     - explicit skip handler (vs exit 77)\n       this permits us to do better cleanup\n     - new testbench functions for journal-specific functionality\n       reduce code duplication and make things easier to maintain in the\n       future\n     - provide a way to do valgrind and non-valgrind tests with a single\n       test file\n     see also https://github.com/rsyslog/rsyslog/issues/2564\n   * testbench: improve framework, harden rscript http test\n     - the test now tries to detect unavailable http server, which\n       should not result in test failure\n     - equivalent valgrind test changed to new method, removing code\n       duplication\n     - testbench supports\n       * new exit code 177, which indicates environment error, makes\n         test SKIP but still reports the failure\n       * new exitcode, logurl stats reporting fields\n       * report buildbot builder (if provided) in failure report\n   * testbench: add test for mmjsonparse with unparsable data\n   * testbench: make es-bulk-retry test more reliable\n     We now no longer depend on a fixed 'sleep' command but rather\n     check the output file for what we expect. This is much more\n     robust on slow test machines.\n     We believe this closes the below-mentioned issue. If not, it\n     should be re-opened.\n     closes https://github.com/rsyslog/rsyslog/issues/3104\n   * testbench: suppress valgrind error caused by pthreads lib\n     finally I give up and honestly think this is a problem in pthreads and\n     not in rsyslog code. See issue below and previous commit for more\n     information.\n     Unfortunately, this will also mask off cases where we do not properly\n     call pthread_join() albeit it is needed. Nevertheless, this bug is\n     causing so much CI grief that it is definitely worth it.\n     closes https://github.com/rsyslog/rsyslog/issues/2902\n   * testbench: made a couple of (unnamed due to too many) test more robust\n     against slow (CI) machines\n------------------------------------------------------------------------------\nVersion 8.39.0 [v8-stable] 2018-10-30\n- imfile: improve truncation detection\n  previously, truncation was only detected at end of file. Especially with\n  busy files that could cause loss of data and possibly also stall imfile\n  reading. The new code now also checks during each read. Obviously, there\n  is some additional overhead associated with that, but this is unavoidable.\n  It still is highly recommended NOT to turn on \"reopenOnTruncate\" in imfile.\n  Note that there are also inherent reliability issues. There is no way to\n  \"fix\" these, as they are caused by races between the process(es) who truncate\n  and rsyslog reading the file. But with the new code, the \"problem window\"\n  should be much smaller and, more importantly, imfile should not stall.\n  see also https://github.com/rsyslog/rsyslog/issues/2659\n  see also https://github.com/rsyslog/rsyslog/issues/1605\n- imjournal: work around journald excessive reloading behavior\n  This is workaround for possible imjournal interaction with systemd\n  where journal invalidate fix is not present. The code tries to\n  detect SD_JOURNAL_INVALIDATE loop and not reload after each call.\n  Thanks to Jiri Vymazal for the patch.\n- errmsg: remove no longer needed code\n  refactored code (over a long time) so that object-ish style is no longer\n  needed and could now finally be removed; We also refactored the last\n  component (omhttp contrib module) that used the old interface.\n  closes https://github.com/rsyslog/rsyslog/issues/1684\n- queue bugfix: invalid error message on queue startup\n  due to some old regression (commit not exactly identified, but for\n  sure a regression, 9 years ago it was correct) an error message\n  is emitted when no .qi file exists on startup of the queue, which\n  is a normal condition.\n  Actually, the code should not have tried to open the .qi file in\n  the first place because it detected that it did not exist. That\n  (necessary) shortcut had been removed a while ago.\n  closes https://github.com/rsyslog/rsyslog/issues/3117\n- bugfix imrelp: regression with legacy configuration startup fail\n  Startup of a relp listener failed if legacy configuration was used.\n  caused by commit: 32b71daa8aadb8f16fe0ca2945e54d593f47a824\n  closes https://github.com/rsyslog/rsyslog/issues/3106\n- bugfix imudp: stall of connection and/or potential segfault\n  There was a regression in 493279b790a8cdace8ccbc2c5136985e820dd2fa.\n  This regression may cause stop (or delay) of reception from some systems\n  and may also cause a segfault. Triggering condition is that at least\n  one listener could not be created.\n  Thanks to Jens Låås for the patch.\n- bugfix gcry crypto driver: small memleak\n  If a crypto key is specified directly via the key=\"\" parameter,\n  the storage for that key is not freed, causing a small memleak.\n  Note that the problem occurs only once per context, so this\n  should not cause real issues. Even more so, as specifying a\n  key directly is meant only for testing purposes and is strongly\n  discouraged for production use.\n  Detected by internal testing, no actual fail case known.\n- fix potential misaddressing in encryption subsystem\n  could happen if e.g. disk queues were encrypted\n  not seen in practice but caught by testbench test\n- ksi subsystem changes\n  * enhance debug logging\n  * disable unsafe SHA1 algorithm\n  Thanks to Allan Park for the patch.\n- bugfix core: regex compile error messages could be incorrect\n- bugfix core: potential hang on rsyslog termination\n  The root cause was a deadlock during worker startup. This could\n  happen for example when a DA queue needed to persist data during\n  shutdown.\n  Fail condition:\n  * startup request for a new worker\n  * initialization of that worker\n  * immediate detection that the worker can or must shutdown\n  * main thread waiting for worker running state, which it skips,\n    and so the main thread hangs inside a loop\n  closes https://github.com/rsyslog/rsyslog/issues/3094\n-  bugfix imkafka: system hang when backgrounded\n  imkafka initializes librdkafka too early (before the fork). This leads\n  to hangs in various parts of the system - not only im imkafka but\n  other functions as well (e.g. getaddrinfo() calls).\n  closes https://github.com/rsyslog/rsyslog/issues/3180\n- bugfix imfile: file change was not reliably detected\n  A change in the inode was not detected under all circumstances,\n  most importantly not in some logrotate cases.\n  Includes new tests made by Andre Lorbach. They now use the\n  logrotate tool natively to reproduce the issue.\n  closes https://github.com/rsyslog/rsyslog/issues/2659\n  closes https://github.com/rsyslog/rsyslog/issues/1605\n- bugfix imrelp: do not fail build if librelp does not have relpSrvSetLstnAddr\n  closes https://github.com/rsyslog/rsyslog/issues/2938\n- bugfix queue subsystem: DA queue did ignore encryption settings\n  closes https://github.com/rsyslog/rsyslog/issues/3066\n  closes https://github.com/rsyslog/rsyslog/issues/2575\n- bugfix KSI: lmsig-ksils12 module skips signing the last block\n  Thanks to Allan Park for the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/3105\n- bugfix fmhash: function hash64mod sometimes returned wrong result\n  Thanks to Harshvardhan Shrivastava for providing the patch\n  closes https://github.com/rsyslog/rsyslog/issues/3025\n- bugfix core/debug: data written to random fd 2 under some debug settings\n  This happens only during auto-backgrounding, where we cannot any longer\n  access stderr. Whatever is opened with fd2 receives some debug messages.\n  Note that the specific feature is usually turned on only in CI runs.\n- cleanup: removed no longer needed code\n  Code that was unused for quite a while or did not really belong to the\n  project identified and removed.\n- overall code cleanup\n  e.g. remove unused code, replace bad bash constructs, etc...\n- CI:\n  * some small improvements in testbench plumbing\n    e.g. (`cmd` replaced by $(cmd), removed useless use of cat, ...)\n  * testbench: improve plumbing for kafka tests\n    - Removed all sleeps where possible.\n    - Moved all kafka start/stop/download logic into functions.\n    - Moved kafka/zookeeper stop into error_exit and exit_test.\n    - Kafka/Zookeeper cleanup only done on success now.\n    - Kafka/Zookeeper logfiles automatically dumped on error_exit only now.\n    - Added cleanup for Kafka/Zookeeper instances into CI/buildbot_cleanup.sh\n    - added new tests\n  * testbench: fix incompatibility of one omprog test with Python3\n    Python3 writes to stderr immediately, and this caused the\n    captured output to differ with respect to Python2. Simplified\n    the test to do a single write to stderr. Also a cast to int\n    was needed when calculating 'numRepeats'.\n    closes https://github.com/rsyslog/rsyslog/issues/3030\n  * testbench: fixed imfile parallel issues\n   - Fixed timing issues in some imfile wildcard/regex tests\n   - Added touch command in imfile wildcard tests to make sure directories\n     exist before files are created in it if IO is under stress.\n   - changed content checking in some tests to use \"content_check_with_count\"\n     with check timeouts instead of using fixed sleeptimes.\n  * testbench: new basic tests\n    These ensure that for some modules that did not have any tests at all\n    we have at least a minimal coverage (module loads, activates, is able\n    to emit error messages). Of course, further improvements would make\n    much sense. Modules:\n    - ommail\n  - testbench: new tests for disk queue encryption\n  - testbench: improved auto-diagnostics for hanging instance\n  - testbench: hardened kafka test against failing kafka subsystem,\n    not in 100% of the cases, but at least in some that frequently occur\n  - failing tests now report failure status so that we can get stats\n    on unreliable tests\n  - testbench tooling: fix incorrect tcpflood TLS parameter check\n    could lead to segfault when started\n  - bugfix testbench tooling: tcpflood invalid type in calloc (openssl mode)\n    It is unlikely that this has caused a real issue, as long as pointers\n    are all of the same size (what is highly probable).\n    detected by cppcheck via Codacy.com\n------------------------------------------------------------------------------\nVersion 8.38.0 [v8-stable] 2018-09-18\n- AIX: make basic modules work again\n- make rsyslog build on AIX again\n  ... at least for a limited set of default modules\n-  imfile: support for endmsg.regex\n  This adds support for endmsg.regex.  It is similar to\n  startmsg.regex except that it matches the line that denotes\n  the end of the message, rather than the start of the next message.\n  This is primarily for container log file use cases such as this:\n      date stdout P start of message\n      date stdout P  middle of message\n      date stdout F  end of message\n  The `F` means this is the line which contains the final part of\n  the message.  The fully assembled message should be\n  `start of message middle of message end of message`.\n  `startmsg.regex=\"^[^ ]+ stdout F \"` will match.\n  Thanks to Richard Megginson for the patch.\n- imkafka: add parameter \"parseHostName\"\n  This enables imkafka to parse the hostname from log message.\n  Previously that was not possible. It was most likely a bug, but\n  one that users may count on. The new parameter \"ParseHostName\"\n  (default is off) controls this behavior. Default is to NOT\n  parse the hostname.\n  Thanks to github user snaix for the contribution.\n- im[p]tcp: improve error message on connect failure\n  Now a message with the actual OS error is emitted, making things far\n  easier to troubleshoot.\n- imkafka: implement multithreading support for kafka consumers.\n  Each consumer runs in it's own consumer thread now. New tests have also\n  been added for this.\n- omelasticsearch: write all header metadata to $.omes for retries\n  Write all of the original request metadata fields to $.omes for\n  the retry, if present. This may include all of the following:\n  _index, _type, _id, _parent, pipeline\n  This is in addition to the fields from the response. If the same\n  field name exists in the request metadata and the response, the\n  field from the request will be used, in order to facilitate\n  retrying the exact same request.\n  Thanks to Richard Megginson for the patch.\n- core: improve error message on module load fail\n  The error message now lists all dlopen() errors in depth. This is\n  especially useful if the error is due to missing symbols or file\n  format errors.\n- core/queue: add error message if queue file cannot be accessed\n  When having a disk-assisted queue without permission to write to the specified\n  queue file an error will now be generated.\n  closes https://github.com/rsyslog/rsyslog/issues/323\n- imtcp/imudp: new option preservecase for managing the case of FROMHOST value\n  default is left at current behavior\n  see also https://github.com/rsyslog/rsyslog/pull/2774\n  see also https://bugzilla.redhat.com/show_bug.cgi?id=1309698\n- omprog: add feedback timeout and keep-alive feature\n  - Restart the program if it does not respond within timeout.\n  - New setting 'confirmTimeout' (default 10 seconds).\n  - Allow the program to provide keep-alive feedback when a\n    message requires long-running processing.\n  - Improve efficiency when reading feedback line (use buffer).\n    Retry interrupted writes/reads to/from pipe.\n  - New setting 'reportFailures' for reporting error messages\n    from the program.\n  - Report child termination when writing to pipe.\n  - Minor refactor: renamed writePipe function to sendMessage,\n    renamed readPipe to readStatus.\n  Thanks to Joan Sala for contributing this.\n- omprog: fix forceSingleInstance configuration option\n  The forceSingleInstance option did not work as intended. Even\n  if set multiple instances were spawned. This most probably\n  was a regression from 0453b1670fc34c96d31ee7c9a370f0f5ec24744a\n  The code was broken roughly 3.5yrs ago, so it looks like the\n  issue was little-noticed. This also means that potentially some users\n  may see the bugfix as change of behavior. If so, just remove\n  the option.\n  closes https://github.com/rsyslog/rsyslog/issues/2813\n  closes https://github.com/rsyslog/rsyslog/issues/2468\n  Thanks to Joan Sala for contributing this.\n- imfile: implement file-id, used in state file\n  This ensures that files with the same inodes are not accidentally treated\n  as equal, at least within the limits of the file id hash (see doc for\n  details).\n  We use the siphash reference implementation to generate our non-cryptographic\n  hash.\n  closes https://github.com/rsyslog/rsyslog/issues/2530\n  closes https://github.com/rsyslog/rsyslog/issues/2231\n- imfile: experimental input throttling feature\n  The new input parameter delay.message has been added. It specifies\n  a delay in microseconds after each line read.\n  closes https://github.com/rsyslog/rsyslog/issues/2960\n- core: emit TZ warning on startup not on Linux non-container\n  On Linux it seems common that the TZ variable is NOT properly set.\n  There are some concerns that the warning related to rsyslog correcting\n  this confuses users. It also seems that the corrective action rsyslog\n  takes is right, and so there is no hard need to inform users on that.\n  In Linux containers, however, the warning seems to be useful as the\n  timezone setup there seems to be frequently-enough different and\n  rsyslog's corrective action may not be correct.\n  So we now check if we are running under Linux and not within a container.\n  If so, we do not emit the warning. In all other case, we do. This is\n  based on the assumption that other unixoid systems still should have\n  TZ properly set.\n  closes https://github.com/rsyslog/rsyslog/issues/2994\n- omkafka:\n  * better debug information\n  * Fixed minor issue in omkafka producing wrong kafka timestamps when\n    msgTimestamp was NULL.\n  * Setting RD_KAFKA_V_KEY(NULL, 0) in rd_kafka_producev now when KEY is not\n    configured.\n  * Fixed minor issue when rsyslog is compiled with --enable-debug and\n    librdkafka is too old.\n- omfile bugfix: errant error message when dynafile param needed\n  also fixes related message in contributed module omfile-hardened\n  closes https://github.com/rsyslog/rsyslog/issues/2975\n  Thanks to Frank Bicknell for the patch\n- omhttp: new contributed module\n  Thanks to Christian Tramnitz for contributing it.\n  Some more info at https://github.com/rsyslog/rsyslog/pull/2782\n- mmkubernetes: action fails preparation cycle if kubernetes API ...\n  ... destroys resource during bootup sequence\n  The plugin was not handling 404 Not Found correctly when looking\n  up pods and namespaces.  In this case, we assume the pod/namespace\n  was deleted, annotate the record with whatever metadata we have,\n  and cache the fact that the pod/namespace is missing so we don't\n  attempt to look it up again.\n  In addition, the plugin was not handling error 429 Busy correctly.\n  In this case, it should also annotate the record with whatever\n  metadata it has, and _not_ cache anything.  By default the plugin\n  will retry every 5 seconds to connect to Kubernetes.  This\n  behavior is controlled by the new config param `busyretryinterval`.\n  This commit also adds impstats counters so that admins can\n  view the state of the plugin to see if the lookups are working\n  or are returning errors.  The stats are reported per-instance\n  or per-action to facilitate using multiple different actions\n  for different Kubernetes servers.\n  This commit also adds support for client cert auth to\n  Kubernetes via the two new config params `tls.mycert` and\n  `tls.myprivkey`.\n  Thanks to Richard Megginson for the patch.\n- bugfix pmnormalize/core: several memory leaks, invld property handling\n  - major memory leak which occurred once per message processed\n    So this could lead to OOM. Caused by improper free of json\n    structure\n  - another two major leaks of similar magnitude could occur if\n    \"fromhost-ip\" and/or \"fromhost\" properties were set\n  - minor leaks upon termination. these were unproblematic as\n    static and only occurred immediately before shutdown.\n    But they triggered memory debugger errors.\n  - fixed test which did not check for mem leaks albeit it should\n  - core invalid handling of the \"fromhost\" property, if set via\n    the MsgSetPropsViaJSON() call. This was primarily of concern\n    for pmnormalize and mmexternal, and only if these properties\n    were used by either the rulebase or the external program\n    response.\n  Actually, most of the leaks go back to rsyslog core, but that\n  core functionality was not used by other modules in the same\n  way. But if some other would have used it, the effects would\n  have been the same (so be aware if you wrote custom modules).\n- bugfix imptcp: fixed pointers for session counting\n  imptcp open, failedopen, and closed pstats counters were assigned the wrong\n  name, thus pstats values did provide a totally wrong picture of what was\n  going on.\n  Thanks to github user jeverakes for the patch.\n- bugfix omprog: invalid memory access on partial writes to pipe\n  When sending logs to the program, in case of a partial write to the pipe,\n  invalid data was sent, or an invalid memory access could occur. (A\n  partial write can occur if the syscall is interrupted or the pipe is full.)\n  Thanks to Joan Sala for contributing this.\n- bugfix omprog: rsyslog's environment was not passed to script\n  closes https://github.com/rsyslog/rsyslog/issues/2921\n- bugfix omprog: severity of some log messages in waitForChild corrected\n  Log some messages related to child process termination as info/warn\n  instead of error.\n- bugfix imfile: files which were loaded via symlink were not always followed\n  They were stopped watching after being rotated.\n  closes https://github.com/rsyslog/rsyslog/issues/2229\n  Thanks to Jiri Vymazal for the patch.\n- bugfix imfile: potential misaddressing when processing symlinks\n  Fixed parent name when processing symlinks. Detected during code review.\n  There was a garbage byte left before which could cause errors down the\n  road.\n  Thanks to Jiri Vymazal for the patch.\n- bugfix ommongodb: build issue if mongo-c-driver is not compiled with TLS\n  Let ommongodb module works even if mongo-c-driver is not compiled with SSL support.\n  Thanks to Jérémie Jourdin for the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/2907\n- CI:\n  * many changes with the goal to support parallel test execution, e.g.\n    use dynamic ports and file names, changes to testing tools, etc.\n  * kafka tests re-enabled, as they should now no longer be racy. However,\n    this has yet to be proven in practice.\n  * upgrading kafka server version to current\n  * Fixed server configuration issues holding the kafka tests back from working\n  * Fixed some config issues in all sndrcv kafka tests.\n  * Generating dynamically kafka topics now for each kafka test.\n  * Reenabled kafka_multi test which runs a test on 3 kafka/zookeeper instances\n------------------------------------------------------------------------------\nVersion 8.37.0 [v8-stable] 2018-08-07\n- build system: add --enable-default-tests ./configure option\n  This permits to control the \"default tests\" in testbench runs. These\n  are those tests that do not need a special configure option. There are\n  some situations where we really want to turn them of so that we can\n  run tests only for a specific component (e.g. ElasticSearch).\n  This commit also removes the --enable-testbench[12] configure switches,\n  which were introduced just to work-around travis runtime restrictions.\n  With the new CI setup and new options we could reduce the Travis runtime\n  dramatically and so we do not need them any longer.\n- overall adaptation to gcc 8 which emits new warnings\n- fix some build warnings on 32bit systems, namely armhf architecture\n- ommail change of behavior: \"enable.body\" default now \"on\"\n  This was always documented to be \"on\", but actually was \"off\". Usually, we\n  fix the doc, but after long discussion the agreement was that in this\n  specific case it was actually better to change the default.\n  see also: https://github.com/rsyslog/rsyslog/pull/2791\n- core/omfile: race in async writing mode\n  mutex was not properly locked at all times when the async writing buffer\n  was flushed\n  Thanks to Radovan Sroka for the patch.\n- core: provide a somewhat better default action name\n  We now include the module name (e.g. \"omelasticsearch\" or \"builtin:omfile\")\n  as part of the name. This is still not perfect, but hopefully a bit\n  easier to grasp.\n  see also https://github.com/rsyslog/rsyslog/issues/342\n- new global() parameter \"abortOnUncleanConfig\"\n  This provides a new-style alternative to $AbortOnUncleanConfig.\n  closes https://github.com/rsyslog/rsyslog/issues/2744\n- tcpflood no longer links with -lgrcypt\n  as this is no longer necessary for GnuTLS\n  Thanks to Michael Biebl for the patch.\n- imjournal: add journal-specific impstats counters\n  these provide some additional insight into journal operations\n  Thanks to Abdul Waheed for the patch.\n- imjournal: fixed startup on missing state file\n  When starting rsyslog with imjournal for first time it outputs\n  an error and plugin does not run because no state file exists yet.\n  Now it skips the loading and creates state file on first persist.\n  Thanks to Jiri Vymazal for the patch.\n- imjournal: fetching cursor on readJournal() and simplified pollJournal()\n  Fetching journal cursor in persistJournal could cause us to save\n  invalid cursor leading to duplicating messages further on, when new\n  WorkAroundJournalBug option is set we are saving it on each\n  readJournal() where we now that the state is good.\n  pollJournal() is now cleaner and faster, correctly handles INVALIDATE\n  status from journald and is able to continue polling after journal\n  flush. Also reduced POLL_TIMEOUT a bit as it caused rsyslog to exit\n  with error in corner cases for some ppc when left at full second.\n  re-factored imjournal CI tests with journal_print tool to have more\n  detailed error reporting.\n  Thanks to Jiri Vymazal for the patch.\n- config: enhance backticks \"echo\" capability\n  This is now more along the lines of what bash does. We now support\n  multiple environment variable expansions as well as constant text\n  between them.\n  example:\n  env SOMEPATH is set to \"/var/log/custompath\"\n  config is: param=`echo $SOMEPATH/myfile`\n  param than is expanded to \"/var/log/custompath/myfile\"\n  among others, this is also needed inside the testbench to properly\n  support \"make distcheck\".\n  Note: testbench tests follows via separate commit. There will be\n  no special test, as the testbench itself requires the functionality\n  at several places, so the coverage will be very good even without\n  a dedicated test.\n- imrelp: add support for setting address to bind to (#894)\n  This adds a new optional `address` parameter to `imrelp` inputs in order\n  to specify an address to bind to.\n  Based on support added by rsyslog/librelp@96eb5be\n  Thanks to Simon Wachter for the patch.\n- omrelp: permit all authmodes; updated tests\n  omrelp for some time limited authentication modes to those\n  that were known. While this was OK, it prevented the easy\n  introduction of new auth modes into librel.\n  This has now been changed; omrelp now checks the validity of\n  the authmode directly via librelp by doing some librelp calls\n  upon processing the configuration.\n  Also, some tests have been updated to check this feature and\n  also ensure that the new librelp mode \"certvalid\" works\n  (if it is available).\n- regexp.c: reduce lock contention when using glibc.\n  When using glibc, we enable per-thread regex to avoid lock contention.\n  See:\n  - https://github.com/rsyslog/rsyslog/issues/2759\n  - https://github.com/rsyslog/rsyslog/pull/2786\n  - https://sourceware.org/bugzilla/show_bug.cgi?id=11159\n  This should not affect BSD as they don't seem to take a lock in regexec.\n  NOTE: it is assumed that we can craft an even better solution than\n  this patch, but it improves the situation and we do not have time to\n  craft more. So we decided to merge. For details see\n  https://github.com/rsyslog/rsyslog/pull/2786\n- mmpstrucdata: better error message, support $! in var names\n  see also https://github.com/rsyslog/rsyslog/issues/1262#issuecomment-404773495\n- more explicit error msg with message modification mod on queue\n  Message modification modules do not work if used with a non-direct queue.\n  We now make this more explicit in the config parsing error message.\n  closes https://github.com/rsyslog/rsyslog/issues/1323\n- omrabbitmq: improve high-load performance\n  A different pthread mutex is created for each connection (action)\n  instead of a single one shared by all connections. This will\n  improve performance when using multiple concurrent connections\n  to a single (or multiple) RabbitMQ instance(s) (e.g. for load balancing)\n  Thanks to github user micoq for contributing the patch.\n- imudp: replace select() calls by poll()\n  This improves reliability in extreme cases (more than 1024 fds open when\n  imudp begins to listen) and potentially improves performance a little.\n- ommysql: support mysql unix domain socket:\n  via action(.. socket=\"/tmp/mysqld.sock\" ..)\n  Thanks to JoungKyun Kim for contributing this.\n- impstats: emit warning if log.syslog=\"off\" and ruleset name given\n  With this config, \"ruleset\" is silently ignored, what probably is\n  not obvious to a user.\n  closes https://github.com/rsyslog/rsyslog/issues/2821\n- build system cleanup: remove no longer needed --enable-memcheck\n  This was used for a very old testing capability, no longer functional but\n  causes build to fail if enabled. Replaced by ASAN/valgrind.\n  Issue detected while testing some other CI settings.\n- tools: Updated python based statslog analyzer sample scripts\n- developer tools: make devcontainer tool more developer friendly\n  slight improvement for easy interactive use\n- enable better testing via \"make distcheck\"\n  Also a couple of changes to testbench worth mentioning:\n  * use cp -f to ensure files can be overwritten in VBUILD\n  * fix issue of missing include test file in EXTRA_DIST\n  * new suppressions\n  * testbench: try to use local system dependency cache\n    avoid going to Internet repos if not absolutely necessary. For\n    development containers, they should be pre-populated with the\n    important dependencies.\n  * do not enable libfaketime if ASAN is selected\n    unfortunately, libfaketime does not work in that case\n  Note: for modules with non-standard dependencies (e.g. databases),\n  \"make distcheck\" only enables what on the original ./configure line\n  was enabled. This is done in order to ensure that \"distcheck\" adapts\n  to what is actually available on the system in question. Rsyslog's\n  own CI system installs the maximum set of possible dependencies and\n  so tries the maximum set \"make distcheck\" can support on a platform.\n  see also https://github.com/rsyslog/rsyslog/issues/174\n- add new global config parameter \"inputs.timeout.shutdown\"\n- omusrmsg: do not fall back to max username length of 8\n  This happens if utmp.h and friends are not available and stems back to\n  the original syslogd. Nowadas, 32 is more appropriate and now being used\n  in that (now very unlikely) case. The detection logic for UT_NAMESIZE has\n  also been streamlined.\n  closes https://github.com/rsyslog/rsyslog/issues/2834\n- bugfix build system: fix race in parallel builds\n  If libgcry.la is built later than lmcry_gcry.la, there is a failure:\n  [snip]\n  |../aarch64-wrs-linux-libtool  --tag=CC   --mode=link aarch64-wrs-linux-gcc\n  -o lmcry_gcry.la lmcry_gcry_la-lmcry_gcry.lo libgcry.la -lgcrypt\n  |aarch64-wrs-linux-libtool:   error: cannot find the library 'libgcry.la'\n  or unhandled argument 'libgcry.la'\n  |Makefile:1049: recipe for target 'lmcry_gcry.la' failed\n  |make[2]: *** [lmcry_gcry.la] Error 1\n  [snip]\n  The LIBADD of lmcry_gcry.la contains libgcry.la, we should also add libgcry.la\n  to lmcry_gcry.la's DEPENDENCIES.\n  Thanks to Hongxu Jia for the patch.\n- bugfix imfile: memory leak upon shutdown (cosmetic)\n  When rsyslog shuts down and imfile is inside a change polling loop,\n  it does not properly free memory returned by glob(). This is a cosmetic\n  bug as the process terminates within the next few milliseconds. However,\n  it causes memory analyzer reports and thus makes CI fail.\n- bugfix core msg: potential deadlock (and rsyslog hang)\n  can happen e.g. with headerless messages when app-name\n  property is used\n  closes https://github.com/rsyslog/rsyslog/issues/3135\n- bugfix core: do not abort startup on problems setting scheduling policy\n  rsyslog creates a default scheduling policy on startup. This code\n  invalidly used CHKiRet (our exception handler) to check pthreads\n  return codes, what this macro cannot do. This lead to hard to\n  diagnose startup problems in cases where there were problems\n  setting the scheduling defaults (e.g. when rsyslog is set to run\n  at idle priority). Even more so, this blocked startup altogether,\n  which is not the right thing to do. Actually, this can be considered\n  a regression from commit 7742b21. That commit was 8 years ago, so\n  in general this cannot be a big issues ;-)\n  The code now emits proper error messages (to stderr, as at this point\n  no other output is available as it is during the initial state of\n  rsyslog initialization) and continues the startup.\n  closes https://github.com/rsyslog/rsyslog/issues/2855\n- bugfix core: input shutdown timeout not properly applied\n  The timeout could be reduced by mutex wait time, which was not the\n  intended behavior and could lead the the input thread being\n  cancelled while it would have been perfectly legal to shut it down\n  cleanly.\n  Noticed during working on the CI system. May explain some testbench\n  instability and may have caused trouble with state files (not)\n  properly being written by inputs.\n- bugfix config optimizer: error in constant folding\n  did not work properly if a string and a number were to be folded.\n  Detected by gcc 8.\n- build: fix improper function casts\n  no real issue, but generated warnings under gcc 8 and thus\n  broke CI\n- bugfix omlibdbi: fix potential small memory leak\n  detected by clang static analyzer\n- bugfix ommysql: unsafe use of strncpy()\n  also now reports oversize names as user error vs. silent truncation\n  overly long names only could affect config load phase\n- bugfix omhttpfs: fix insecure usage if strncmp()\n  consequences not evaluated as this is a contributed module.\n  Detected by gcc 8.\n- bugfix mmgrok: cosmetic build issue - compiler warnings\n  caused build under gcc 7 to fail with warning\n- bugfix mmkubernetes: stops working with non-kubernetes container names\n  When mmkubernetes encounters a record with a CONTAINER_NAME field,\n  but the value does not match the rulebase, mmkubernetes returns\n  an error, and mmkubernetes does not do any further processing\n  of any records.\n  The fix is to check the return value of ln_normalize to see if\n  it is a \"hard\" error or a \"does not match\" error.\n  This also adds a test for pod names with dots in them.\n  Thanks to Richard Megginson for the patch.\n- bugfix mmkubernetes: potential NULL pointer access\n  If token file could not be opened, fclose() was passed a NULL pointer.\n  Thanks to github user jvymazal for finding and Richard Megginson\n  for fixing the issue.\n- bugfix omsnmp: invalid traptype was not detected\n  this could leave config errors unreported and cause unexpected\n  behavior\n- bugfix mmkubernetes: default rules use container_name_and_id\n  also include rulebase files in dist and fix rule so that dot inside\n  pod name is supported.\n  Thanks to Richard Megginson for fixing the issue.\n- bugfix omelasticsearch: build regression\n  Commit 6d4635efbb13907bf651b1a6e5a545effe84d9d9 introduced some compile\n  problems, which were only detected on CentOS6, which unfortunately did\n  not compile omelasticsearch during CI runs\n- bugfix ommongodb: do not force MongoDB to use \"PLAIN\" auth mechanism\n  ... which also seems not to be handled by current MongoDB.\n  Remove ?authMechanism=PLAIN URI part to let the mongo library chooses the\n  default mechanism. One can force a specific authentication mechanism by\n  adding ?authMechanism=XXX into the uristr argument of the module\n  Thanks to Jérémie Jourdin for the fix.\n  closes https://github.com/rsyslog/rsyslog/issues/2753\n- build system: do not disable tests via --disable-liblogging-stdlog\n  This setting controlled both the actual rsyslog functionality as well\n  as some testbench tests, which use liblogging-stdlog to provide some\n  specific functionality. This meant those tests were not run since\n  changing the default. Now untangling the dependency.\n- CI:\n  * most test refactored to use newer testbench plumbing\n    while no functional change, this permits further enhancements\n  * ElasticSearch startup timeout in tests increased to care for\n    slower test systems\n  * imjournal: fixed tests to actually test plugin functionality\n    Thanks to Jiri Vymazal for the patch.\n  * new test for gnutls priority string in librelp\n    Thanks to github user jvymazal for the patch\n  * testbench: relax hanging instance detection\n    This does not work reliably if multiple instances of rsyslog\n    builds run on a single machine. We need to improve, but this\n    commit makes conflict less likely and provides some diagnostic\n    info to help guide us towards a final solution.\n  * testbench: fix tests that look awfully wrong\n    These tests indicated they terminate rsyslog forcefully without\n    draining the queues, but then checked if they were drained (all\n    messages processed). That does not make sense, and we cannot\n    envision why this was written the first place. So we assume some\n    copy&paste problem was the root of that.\n  * testbench: refactor tests which used \"nettester\" tool\n    Some old tests are carried out via the nettester tool. This was\n    our initial shot at a testbench a couple of years ago. While it\n    worked back then, the testbench framework has been much enhanced.\n    These old tests are nowadays very hard to handle, as they miss\n    debug support etc. So it is time to refactor them to new style.\n    As a side-activity, the testbench plumbing has been enhanced to\n    support some operations commonly needed by these tests. Contrary\n    to pre-existing plumbing, these new operations are now crafted\n    using bash functions, which we consider superior to the current\n    method. So this is also the start of converting the older-style\n    functionality into bash functions. We just did this now because\n    it was required and we entangled it into the test refactoring\n    because it was really needed. Else we had to write old-style\n    operations and convert them in another commit, which would\n    have been a waste of time.\n    Special thanks to Pascal Withopf for the initial step of taking\n    old tests and putting config as well as test data together into\n    the refactored tests, on which Rainer Gerhards than could build\n    to create the new tests and update testbench plumbing.\n  * testbench: ensure uxsock test leaves no dangling listener instances\n    ..in case the test aborts. We utilize the timeout utility for now\n    to prevent this.\n  * testbench: make port for imdiag dynamic\n    This is prep work to support parallel test runs\n------------------------------------------------------------------------------\nVersion 8.36.0 [v8-stable] 2018-06-26\n- build system change:\n  Liblogging-stdlog was introduced to provide a broader ability to send rsyslog\n  internal logs to different sources. However, most distros did not pick up\n  that capability and so instead we do a regular syslog() call. We assume that\n  the actual functionality is never used in practice, so we plan to retire it.\n  That makes building rsyslog from source easier.\n  The plan is to disable use of liblogging-stdlog by default during\n  configure. So users (and distros!) can still opt-in to have it enabled if\n  they desire.\n  A couple of releases later, we want to completely remove the functionality,\n  except if there has desire been shown in the meantime which justifies to keep\n  liblogging-stdlog.\n  This version disabled liblogging-stdlog by default. We now also\n  emit a warning message (\"liblogging-stdlog will go away\") so that users\n  know what is going on and my react.\n  closes https://github.com/rsyslog/rsyslog/issues/2705\n  see also https://github.com/rsyslog/rsyslog/issues/2706\n- add openssl driver alongside GnuTLS one for TLS communication\n  The openssl driver is currently experimental. It will become the new preferred\n  driver as it permits us to provide much better end-user error message than\n  we could provide with GnuTLS. It is also less picky with certificate files\n  and provides specific error messages if there are certificate problems.\n  closes: https://github.com/rsyslog/rsyslog/issues/1390\n  closes: https://github.com/rsyslog/rsyslog/issues/1840\n  closes: https://github.com/rsyslog/rsyslog/issues/1352\n  closes: https://github.com/rsyslog/rsyslog/issues/1702\n  closes: https://github.com/rsyslog/rsyslog/issues/2547\n- GnuTLS TLS driver: support intermediate certificates\n  this is necessary for certificate chains\n  Thanks to Arne Nordmark for providing the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/2762\n- omelasticsearch: write op types; bulk rejection retries\n  * Add support for a 'create' write operation type in addition to\n    the default 'index'.  Using create allows specifying a unique id\n    for each record, and allows duplicate document detection.\n  * Add support for checking each record returned in a bulk index\n    request response.  Allow specifying a ruleset to send each failed\n    record to.  Add a local variable `omes` which contains the\n    information in the error response, so that users can control how\n    to handle responses e.g. retry, or send to an error file.\n  * Add support for response stats - count successes, duplicates, and\n    different types of failures.\n  * Add testing for bulk index rejections.\n  Thanks to Richard Megginson for the patch.\n- lookup tables: reload message now with \"info\" severity (was \"error\")\n  thanks to Adam Chalkley for the patch\n- imptcp: add support for regex-based framing\n  for complex multi-line messages (XML in particular), the multiLine method\n  does not work well. We now have a capability to specify via a regex when\n  a frame starts (and the previous thus ends).\n  adds imptcp input parameter \"framing.delimiter.regex\"\n- imjournal: add statistics counter\n  following statistics counter are now supported by imjournal\n  - submitted = total number of messages submitted for processing\n  closes https://github.com/rsyslog/rsyslog/issues/2549\n- config: permit 4-digit file creation modes\n  permit 4-digit file creation modes (actually 5 with the leading zero) so\n  that the setgid bit can also be set (and anything else on that position.\n  closes https://github.com/rsyslog/rsyslog/issues/1092\n- ommongodb: add possibility to ignore some insertion error code\n  new config parameter \"allowed_error_codes\", which will be ignored if\n  they happen. For example, 11000 DuplicateKey in case of collection\n  containing a unique field.\n  Thanks to Hugo Soszynski for contributing this work\n- omprog: simplify 'plugin-with-feedback.py' example\n  Make the skeleton easier to understand by removing transaction support.\n  Also, transaction failures did not work as explained in the skeleton,\n  because of issue #2420. In the future, a 'plugin-with-transactions.py'\n  example can be added, ideally once the issue is solved.\n  Thanks to Joan Sala for contributing this.\n- core: misaddressing when writing disk queue files\n  when writing disk queue files during shutdown, access to freed\n  memory can occur under these circumstances:\n  - action A is processing data, but could not complete it\n    most importantly, the current in-process batch needs not to\n    be totally completed. Most probable cause for this scenario\n    is a suspended action in retry mode.\n  - action A is called from a ruleset RA which\n    - does not have a queue assigned\n    - where RA is called from a ruleset RO which is bound\n      to the input from which the message originated\n    - RO must be defined before RA inside the expanded config\n  - Disk queues (or the disk part of a DA queue) must be utilized by A\n  When re-injecting the unprocessed messages from A into the disk queue, the\n  name of ruleset RO is accessed (for persisting to disk). However, RO is\n  already destructed at this point in time.\n  The patch changes the shutdown processing of rulesets, so that all\n  shutdown processing is done before any ruleset data is destructed. This\n  ensures that all data items which potentially need to be accessed\n  remain valid as long as some part may potentially try to access them.\n  This follows a the approach used in\n     https://github.com/rsyslog/rsyslog/pull/1857\n  where obviously that part of the problem was not noticed.\n  see also https://github.com/rsyslog/rsyslog/issues/1122\n  closes https://github.com/rsyslog/rsyslog/issues/2742\n- core: fix message loss on target unavailability during shutdown\n  Triggering condition:\n  - action queue in disk mode (or DA)\n  - batch is being processed by failed action in retry mode\n  - rsyslog is shut down without resuming action\n  In these cases messages may be lost by not properly writing them\n  back to the disk queue.\n  closes https://github.com/rsyslog/rsyslog/issues/2760\n- imrelp bugfix: error message \"librelp too old\" is always emitted ...\n  ... even if librelp is current. The condition check was actually missing.\n  This commit adds it.\n  closes https://github.com/rsyslog/rsyslog/issues/2712\n- imrelp: segfault on startup when cert without priv key is configured\n  closes https://github.com/rsyslog/rsyslog/issues/2747\n- omrelp bugfix: segfault on first message sent when authmode was wrong\n  A segfault could occur if the authmode was configured to an invalid value.\n  This is now caught during config processing and an error is reported.\n  closes https://github.com/rsyslog/rsyslog/issues/2743\n- imfile bugfix: double-free on module shutdown\n  detected by code review, not seen in practice\n- imfile/core bugfix: potential misaddressing in string copy routine\n  This can be exposed via imfile, as follows:\n  - use a regex to process multiline messages\n  - configure timeouts\n  - make sure imfile reads a partial message\n  - wait so that at least one timeout occurs\n  - add the message termination sequence\n  This leads to a misaddressing, which may have no obvious effects potentially\n  up to a segfault.\n  closes https://github.com/rsyslog/rsyslog/issues/2661\n- imfile bugfix: if freshStartTail is set some initial file lines missing\n  When the option is set and a new file is created after rsyslog startup,\n  freshStartTail is also applied to it. That is data written quickly to it\n  (before rsyslog can process it) will potentially be discarded. If so,\n  and how much, depends on the timing between rsyslog and the logging process.\n  This problem is most likely to be seen in polling mode, where a relatively\n  long time may be required for rsyslog to find the new file.\n  This is changed so that now freshStartTail only applies to files that\n  are already-existing during rsyslog's initial processing of the file\n  monitors. HOWEVER, depending on the number and location (network?) of\n  existing files, this initial startup processing may take some time as\n  well. If another process creates a new file at exactly the time of\n  startup processing and writes data to it, rsyslog might detect this\n  file and it's data as prexisting and may skip it. This race is inevitable.\n  So when freshStartTail is used, some risk of data loss exists. The same\n  holds true if between the last shutdown of rsyslog and its restart log\n  file content has been added. This is no rsyslog bug if it occurs.\n  As such, the rsyslog team advises against activating the freshStartTail\n  option.\n  closes https://github.com/rsyslog/rsyslog/issues/2464\n- core: fix undefined behavior (unsigned computation may lead to value < 0)\n  This was detected by LLVM UBSAN. On some platforms re-setting the rawmsg\n  inside the message object could lead to invalid computation due to the\n  fact the the computation was carried out as unsigned and only then\n  converted to integer.\n  No known problem in practice.\n- CI/QA:\n  - improved Elasticsearch tests so they can now be run without system-\n    installed ES service; also enables us to specify specific ES versions\n    and should now make the tests executable inside a container\n------------------------------------------------------------------------------\nVersion 8.35.0 [v8-stable] 2018-05-15\n- imptcp: add ability to configure socket backlog\n  this can be useful under heavy load.\n  For a detailed discussion see https://github.com/rsyslog/rsyslog/pull/2561\n  Thanks to Maxime Graff for implementing this.\n- omfile: do not permit filename that only consists of whitespace\n- fmhash: new hash function module\n  implements hash32() and hash64() functions\n  Thanks to Harshvardhan Shrivastava for implementing these\n- some better error messages\n- imklog: add ratelimiting capability\n  On Linux kernel logs are ratelimited only for messages using\n  printk_ratelimit().  Some logs do not use this facility, so\n  we ratelimit kernel ourselves.\n  Thanks to Berend De Schouwer for the patch.\n- omkafka: added impstats counters for librdkafka returned statistics\n  Adds:\n  * statscallback counters\n  * librdkafka failure and error counters\n  * acked message counter\n  Thanks to Abdul Waheed for implementing this.\n- imudp\n  * use rsyslog message rate-limiter instead of home-grown one\n    imudp introduced it's own (feature-limited) rate-limiting capability for\n    message on disallowed senders before we had central rate-limiters\n    inside rsyslog. Also, that code evolved from running on a single\n    thread to running on multiple threads, which introduced data races\n    and so made unreliable.\n    Now we removed the old rate-limiting capability and depend on the\n    system rate limiter for internal rsyslog messages.\n    closes https://github.com/rsyslog/rsyslog/issues/2467\n  * add stats counter \"disallowed\"\n    counts the number of messages discarded due to being received from\n    disallowed senders\n    see also https://github.com/rsyslog/rsyslog/issues/2467\n- imrelp: add parameter \"oversizeMode\"\n  Permits to instruct librelp how to handle oversize messages. The new default\n  is to truncate messages. Previously, the connection was aborted, what often\n  lead to stuck messages at the sender side. Now, there are three options passed\n  down to librelp:\n  * abort - same behavior as previously, connection is aborted on error\n  * truncate - do not abort but instead truncate oversize message to\n               configured max size\n  * accept - accept all oversize messages (note: this can cause security issues,\n             see doc for details)\n  see also https://github.com/rsyslog/rsyslog/pull/1525#issuecomment-384179393\n  see also https://github.com/rsyslog/rsyslog/issues/2190\n  closes https://github.com/rsyslog/rsyslog/issues/2633\n  closes https://github.com/rsyslog/rsyslog/issues/1741\n  closes https://github.com/rsyslog/rsyslog/issues/1782\n  closes https://github.com/rsyslog/rsyslog/issues/2496\n- core: consistent handling of oversize input messages\n  In the community we frequently discuss handling of oversize messages.\n  David Lang rightfully suggested to create a central capability inside\n  rsyslog core to handle them.\n  We need to make a distinction between input and output messages. Also,\n  input messages frequently need to have some size restrictions done at\n  a lower layer (e.g. protocol layer) for security reasons. Nevertheless,\n  we should have a central capability\n  * for cases where it need not be handled at a lower level\n  * as a safeguard when a module invalidly emits it (imfile is an example,\n    see https://github.com/rsyslog/rsyslog/pull/2632 for a try to fix it\n    on the module level - we will replace that with the new capability\n    described here).\n  The central capability works on message submission, and so cannot be\n  circumvented. It has these capabilities:\n  * oversize message handling modes:\n    - truncate message\n    - split message\n      this is of questionable use, but also often requested. In that mode,\n      the oversize message content is split into multiple messages. Usually,\n      this ends up with message segments where all but the first is lost\n      anyhow as the regular filter rules do not match the other fragments.\n      As it is requested, we still implemented it.\n    - accept message as is, even if oversize\n      This may be required for some cases. Most importantly, it makes\n      quite some sense when writing messages to file, where oversize\n      does not matter (accept from a DoS PoV).\n  * report message to a special \"oversize message log file\" (not via the\n    regular engine, as that would obviously cause another oversize message)\n  This commit, as the title says, handles oversize INPUT messages.\n  see also https://github.com/rsyslog/rsyslog/issues/2190\n  closes https://github.com/rsyslog/rsyslog/issues/2681\n  closes https://github.com/rsyslog/rsyslog/issues/498\n  Note: this commit adds global parameters:\n   * \"oversizemsg.errorfile\",\n     is used to specify the location of the oversize message log file.\n   * \"oversizemsg.report\",\n     is used to control if an error shall be reported when an oversize\n     message is seen. The default it \"on\".\n   * add global parameter \"oversizemsg.input.mode\"\n     is used to specify the mode with which oversized messages will\n     be handled.\n- omfwd: add support for bind-to-address for UDP\n  To allow the same source address to be used regardless of the egress\n  interface taken, an option is added for an address to bind the datagram\n  socket to. Similarly to imudp, it is necessary to add an ipfreebind\n  option which is set by default, so as to avoid an excess of errors at\n  startup before the network interface has come up. This enhancement\n  allows a usecase on networking devices, by which a source interface\n  that is typically a loopback is specified, on which an address to bind\n  to is configured. This is so that the same source address is used for\n  all packets from rsyslog.\n  Thanks to Mike Manning for the patch.\n- template systemd service file proposes higher permitted file handle limit\n  Especially on busy systems the default are too low. Please keep in mind\n  that on a very busy system even the now-proposed setting may be too low.\n  Thanks to github user jvymazal for the patch.\n- imuxsock: replace select() call by poll()\n  While extremely unlikely, imuxsock could abort if a file descriptor\n  > 1024 was received during the startup phase (never occurred in\n  practice, but theoretically could if imfile monitored a large number\n  of files and were loaded before imuxsock - and maybe other\n  strange cases).\n  see also https://github.com/rsyslog/rsyslog/issues/2615\n- nsdsel_ptcp: replace select() by poll()\n  This removes us of problems with fds > 1024. The performance will\n  probably also increase in most cases.\n  Note this is not a replacement for the epoll drivers, but a general\n  stability improvement when epoll() is not available for some reason.\n  see also https://github.com/rsyslog/rsyslog/issues/2615\n  closes https://github.com/rsyslog/rsyslog/issues/1728\n  closes https://github.com/rsyslog/rsyslog/issues/1459\n- omprog: refactor tests, fix child closing issues\n  Refactor omprog tests. Fix sync issues in these tests by\n  using the feedback mode (confirmMessages=on) to synchronize\n  the test with the external program. Closes #2403 (I hope)\n  Fix omprog not properly closing child process when\n  signalOnClose=on. Needed for the new tests. Closes #2599\n  Fix omprog not waiting for the child process to terminate\n  when signalOnClose=off. Needed for the new tests. Closes #2600\n  Close all fds before executing the child even when valgrind\n  is enabled (--enable-valgrind). Needed for the new tests.\n  Fix memory leak when the xxxTransactionMark parameters were\n  used.\n  Thanks to Joan Sala for the patch.\n- core: config optimizer did not handle call_indirect\n  This also caused the emission of an \"internal error\" error message\n  closes https://github.com/rsyslog/rsyslog/issues/2665\n- debug support: add capability to print testbench-specific timeout reports\n  done by setting RSYSLOG_DEBUG_TIMEOUTS_TO_STDERR to \"on\"\n  this is by default activated inside the testbench\n- mmgrok: fix potential segfault\n  The modules used strtok(), which is not thread-safe. So it will potentially\n  segfault when multiple instances are spawned (what e.g. happens on busy\n  systems).\n  This patch replaces strtok() with its thread-safe counterpart\n  strtok_r().\n  see also https://github.com/rsyslog/rsyslog/issues/1359\n- imrelp bugfix: maxDataSize could be set lower than maxMessageSize\n  maxDataSize specifies the length which will still be accepted\n  It previously could be set to any value, including values lower than the\n  configured rsyslog max message size, which makes no sense. Now this is\n  checked an error message is emitted if the size is set too low.\n- build system bugfix: build broken if liblogging-stdlog installed in custom path\n  Thanks to Dirk Hörner for the patch.\n- core bugfix: segfault on queue shutdown\n  if a ruleset queue is in direct mode, a segfault can occur during\n  rsyslog shutdown. The root cause is that a direct queue does not\n  have an associated worker thread pool, but the ruleset destructor\n  does not anticipate that and tries to destruct the worker thread\n  pool. It needs to do this itself, as otherwise we get a race\n  between rulesets on shutdown.\n  This was a regression from\n    https://github.com/rsyslog/rsyslog/commit/3fbd901b3e6300010\n  closes https://github.com/rsyslog/rsyslog/issues/2480\n- imfile bugfix: statefiles contain invalid JSON\n  When imfile rewrites state files, it does not truncate previous\n  content. If the new content is smaller than the existing one, the\n  existing part will not be overwritten, resulting in invalid json.\n  That in turn can lead to some other failures.\n  closes https://github.com/rsyslog/rsyslog/issues/2662\n- omfile bugfix: segfault if empty filename was given\n  closes https://github.com/rsyslog/rsyslog/issues/2417\n- fix build issues when atomic operations are not present\n  for details, see https://github.com/rsyslog/rsyslog/pull/2604\n- lmsig_ksils12 bugfix: build and static analyzer issues\n  The module had a couple of problems building as well as some potential\n  errors detected by clang static analyzer. These have been fixed.\n  Thanks to Allan Park for the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/2517\n- impstats bugfix: segfault if bound to non-existing ruleset\n  segfault happens during shutdown; up until unload of impstats,\n  rsyslog works correctly, except that no pstats are emitted. This\n  can be considered to be expected, because the error message\n  indicates the default ruleset is used instead. This is what\n  now actually happens.\n  closes https://github.com/rsyslog/rsyslog/issues/2645\n- mmjsonparse bugfix: invalid container name was not detected\n  in debug builds, this will trigger an assertion. In production\n  builds, an rsyslog internal error is logged, but rsyslog\n  continues to run.\n  closes https://github.com/rsyslog/rsyslog/issues/2584\n- mmkubernetes bugfixes: fix lnrules, add defaults, add test\n  - Fix lnrules for CONTAINER_NAME\n  - Add pkg check for lognorm >= 2.0.3 so we can set the macro\n    to enable ln_loadSamplesFromString\n  - Add some reasonable default values for parameters, such as\n    kubernetesurl https://kubernetes.default.svc.cluster.local:443\n  - Clean up sample.conf configuration file\n  Thanks to Richard Megginson for the patch set.\n- build system bugfix: --enable-atomic-operations did not work\n  closes https://github.com/rsyslog/rsyslog/pull/2604\n- bugfix: rsyslog aborts on startup when specific config errors are made \n  The following errors must be made in rsyslog.conf:\n  * no action present\n  * a call statement is used on an undefined ruleset\n  In this case, rsyslog emits an error message on the missing actions and\n  then segfaults. Depending on memory layout, it may also continue to run\n  but do nothing except accepting messages as no action is configured.\n  This patch make rsyslog properly terminate after the error message. It\n  is a change in behavior, but there really is no reason why a defunct\n  instance should be kept running.\n  closes https://github.com/rsyslog/rsyslog/issues/2399\n- build system: remove no longer needed --enable-libcurl configure switch\n  The --enable-libcurl switch was added to be able to disable libcurl\n  functionality inside the rsyslog core, see 46f4f43. As libcurl is no\n  longer used inside the core (due to introducing function modules),\n  --enable-libcurl needs to be removed.\n  closes https://github.com/rsyslog/rsyslog/issues/2628\n- QA/CI\n  * fixed races in some tests; root cause was that default enq timeout was too\n    low - we may also see in the future that other tests also need adjustment\n    (note that this is not a code problem but rather slow CI environments,\n    so increasing the timeout to get to a stable test state is the absolutely\n    correct thing to do)\n  * enabled some additional useful compiler warnings\n  * new test for diskqueue hitting configured disk space limit\n  * new tests for omfile\n  * added tests for mmkubernetes\n  * added tests for some script functions that were missing them\n  * made far more test compatible with FreeBSD, so that we now have fuller\n    coverage there\n------------------------------------------------------------------------------\nVersion 8.34.0 [v8-stable] 2018-04-03\n- mmkubernetes: new module\n  Thanks to Richard Megginson and Peter Portante for contributing the module.\n- rsyslog script: introduce loadable function modules\n  rsyslog scripting can now also be extended via loadable modules - they\n  provides functions (just like loadable input, output, ... modules)\n  see also http://jan.gerhards.net/2018/03/loadable-rainerscript-functions.html\n- imfile: large refactoring of complete module\n  This commit greatly refactors imfile internal workings. It changes the\n  handling of inotify, FEN, and polling modes. Mostly unchanged is the\n  processing of the way a file is read and state files are kept.\n  This is about a 50% rewrite of the module.\n  Polling, inotify, and FEN modes now use greatly unified code. Some\n  differences still exists and may be changed with further commits. The\n  internal handling of wildcards and file detection has been completely\n  re-written from scratch. For example, previously when multi-level\n  wildcards were used these were not reliably detected. The code also\n  now provides much of the same functionality in all modes, most importantly\n  wildcards are now also supported in polling mode.\n  The refactoring sets ground for further enhancements and smaller\n  refactorings. This commit provides the same feature set that imfile\n  had previously and all existing CI tests pass, as do some newly\n  created tests.\n  Some specific changes:\n  - bugfix: module parameter \"sortfiles\" ignored\n    This parameter only works in Solaris FEN mode, but is otherwise\n    ignored.  Most importantly it is ignored under Linux.\n    fixes https://github.com/rsyslog/rsyslog/issues/2528\n  - bugfix: imfile did not pick up all files when not present\n    at startup\n    fixes https://github.com/rsyslog/rsyslog/issues/2241\n    fixes https://github.com/rsyslog/rsyslog/issues/2230\n    fixes https://github.com/rsyslog/rsyslog/issues/2354\n    fixes https://github.com/rsyslog/rsyslog/issues/1716\n  - bugfix: directories only support \"*\" wildcard, no others\n    fixes https://github.com/rsyslog/rsyslog/issues/2303\n  - bugfix: parameter \"sortfiles\" did only work in FEN mode\n    fixes https://github.com/rsyslog/rsyslog/issues/2528\n  - provides the ability to dynamically add and remove files via\n    multi-level wildcards\n    see also https://github.com/rsyslog/rsyslog/issues/1280\n  - the state file name currently has been changed to inode number\n    This will further be worked on in upcoming PRs\n    see also https://github.com/rsyslog/rsyslog/issues/2231\n  - some enhancements were also done to CI tests, most importantly\n    they were made more compatible with BSD\n  Note that most of the mentioned bug fixes cannot be applied to older\n  versions, as they fix design issues which are solved by the refactoring.\n  Thus there are not separate commits for them.\n  There are probably also a number of different issues fixed, which have\n  not yet been full confirmed. Especially anyone having troubles with imfile\n  and wildcards will benefit from the refactoring.\n  closes https://github.com/rsyslog/rsyslog/issues/2359\n- omelasticsearch: add support for CA cert, client cert auth\n  This allows omelasticsearch to perform client cert based authentication\n  to Elasticsearch.\n  adds parameters: tls.cacert, tls.mycert, tls.myprivkey\n  Thanks to Richard Megginson for the patch.\n- omfile-hardening: new contributed module for \"omfile hardened operations\"\n  This extends omfile with features considered useful for hardening. Comes\n  at the expense of performance loss and changed semantics.\n  Thanks to Mikko Kortelainen for contributing this work.\n- stream/bugfix: memory leak on stream open if filename as already generated\n  this can happen if imfile reads a state file. On each open, memory for the\n  file name can be lost.\n  We detected this while working on imfile refactoring, so there is no related\n  bug report. No specific test has been crafted, as the refactored imfile\n  tests catch it (as soon as they are merged).\n- bugfix/omkafka: did not build on platforms without atomic operations\n  Thanks to github user bruce87en for the patch\n- bugfix/core/ratelimiting: SystemLogRateLimitBurst was limited to 65535\n  rsyslog uses unsigned short for configuration setting SystemLogRateLimitBurst.\n  Being just 16 bits, unsigned short cannot hold values bigger than 65535. in a\n  practical setting rsyslog misbehaved with SystemLogRateLimitBurst being bigger\n  than 65535.\n  Thanks to github user KaleviKolttonen for the patch.\n- bugfix imfile: memory leak in readMode 0\n  closes https://github.com/rsyslog/rsyslog/issues/2421\n- bugfix omfile: some error messages had parameters in wrong order\n  which made the message look strange, but still readable\n  Thanks to Hans Rakers for the patch.\n- bugfix omprog: file handle leak\n  There was a fd leak in the feedback feature added in v8.31.0 (github PR #1753).\n  The leak occurred when omprog was used with the confirmMessages=on setting\n  and no output setting. One fd was leaked every time the external program was\n  started.\n  Thanks to Joan Sala for the patch.\n- bugfix imuxsock: data alignment problems\n  gcc did rightly complain that the cred and ts pointers would cause\n  alignment problems, so they were converted to structs and the necessary\n  data was memcpy()'ed to them.\n  the aux[] buffer was also potentially misaligned, so making a union\n  out of it and struct cmsghdr insured it was properly aligned.\n  The problems were especially visible on alpha and ia64 machines.\n  Thanks to Jason Duerstock for the fix.\n- bugfix testbench: some test were accidentally not executed\n  Thanks to Kasumi Hanazuki for the patch.\n- bugfix tcp subsystem: keepalive settings mixed up\n  TCPKeepAliveIntvl and TPCKeepAliveTime were switched. This is now correct and\n  thus causes a CHANGE OF BeHAVIOR of these settings. We applied this change only\n  after careful consideration of the effect. The contributor Alexandre Pierret\n  explained the situation as such:\n  \"From my side, I work with thousands of servers centralizing logs to rsyslog\n  servers in tcp. All of them are running RHEL 6 and 7. The default rsyslog settings\n  in RHEL is TCPKeepAlive off. Since there are thousands of connections on the\n  rsyslog servers, I had to turn the TCPKeepAlive on to setup an aggressive policy\n  regarding ghost connections (following firewall tcp-timeout issue). Basically,\n  I set up: intvl=10 - probe=5 - time=2 If intvl and time are switched, it won't\n  break anything. It will just send 5 more empty tcp packets for 10 seconds (5\n  probe x 2 seconds), which is painless (any professional grade 100€ router can\n  send more than 1.000.000 PPS). For 3000 servers, it means 3000 pps for 5\n  seconds (3000 servers x 2 back-and-forth / 2 seconds). Let's take another worst\n  example: intvl=3600 - probe=5 - time=1. It means one keepalive every hour and\n  a 5 retry every 1s after a network issue. If the time and intvl values are\n  switched, it will generate 1 keepalive every seconds, It's a LOT more, but\n  after 5 probe or packet, it will stop. To summarize, I think it won't\n  break anything:\n  * Keepalive is off by default is many linux distribution\n  * When we enable it, it's to set up an aggressive policy. And setting up a\n    10-5-1, 60-5-2, 2-5-60 or 1-20-1 policy is almost the same.\n  Bonus: For people setting up their rsyslog from the documentation, it will\n  now work as expected.\"\n  This was convincing, and we actually think that the fast majority of users set\n  up keepalive based on the doc and did never verify it actually worked as\n  expected. So we think that in all those cases, rsyslog will finally work as\n  intended. So we consider it justified to \"change the behavior\" here.\n  full discussion in PR: https://github.com/rsyslog/rsyslog/pull/2367\n  Thanks to Alexandre Pierret for analyzing the situation and providing the\n  patch.\n- fix some cosmetic issues found by lgtm.com static code analyzer\n  e.g. header file guard not correctly set - if you really are interested in\n  details, check git log\n- CI\n  * add build test without atomic operations - now catches missing mutex macros\n  * add lgtm.com static analyzer (automatically called via GitHub PR)\n  * improved stability of global-umask.sh test, which unnecessarily used\n    wildcards for test output file checking.\n    Thanks to Kasumi Hanazuki for the patch.\n  * added some test for omprog with transactional interface\n    Thanks to Joan Sala for the new tests.\n  * fixed some omjournal tests which did not properly check result\n------------------------------------------------------------------------------\nVersion 8.33.1 [v8-stable] 2018-03-06\n- 8.33.0 tarball release was actually pre-8.33.0\n  ... and so did not contain all features. This alone made a re-release\n  necessary, which is what now happens with 8.33.1.\n  Note: the git 8.33.0 label was correctly applied, \"just\" the tarball\n  was wrong.\n- devcontainer: use some more sensible defaults\n  and add ability to specify generic docker run options\n  this makes integration into CI (and other scripting) easier\n- fix problems with make dist\n  make dist did not package everything that was needed for CI, thus\n  resulting in make check failures if build from tarball.\n  Thanks to Thomas D. (whissi), and Michael Biebl for alerting us on the\n  problem, providing advise and some of the patches. We also added addt'l\n  patches ourselves. The problem occurred as the CI check for tarball\n  completeness was more or less disabled a couple of weeks ago, which\n  unfortunately went unnoticed. We have also applied some more safeguards\n  to detect such problems in the future.\n------------------------------------------------------------------------------\nVersion 8.33.0 [v8-stable] 2018-02-20\n- auto-detect if running inside a container (as pid 1)\n  adjust defaults in this case to be more container-friendly\n- config: add include() script object\n  This permits to include files (like legacy $IncludeConfig) via a\n  script object. Needless to say, the script object offers more\n  features:\n  - include files can now be\n    - required, with rsyslog aborting when not present\n    - required, with rsyslog emitting an error message but otherwise\n      continuing when not present\n    - optional, which means non-present include files will be\n      skipped without notice\n    This is controlled by the \"mode\" parameter.\n  - text can be included form e.g. an environment variable\n    --> ex: include(text=`echo $ENVVAR`)\n  This finally really obsoletes $IncludeConfig.\n  closes https://github.com/rsyslog/rsyslog/issues/2151\n- template: add option to generate json \"container\"\n  This enables easy JSON generation via template.\n  This commit also corrects an issue with the constant \"jsonf\"\n  format. That was recently added, and the implementation problem\n  only became visible when used inside a larger json object. No\n  officially released code is affected, thought - so it really\n  is just a side-note.\n  closes https://github.com/rsyslog/rsyslog/issues/2347\n- core/template: add format jsonf to constant template entries\n  closes https://github.com/rsyslog/rsyslog/issues/2348\n- config: add ability to disable config parameter (\"config.enabled\")\n  For auto-generated configs, it is useful to have the ability to disable some\n  config constructs even though they may be specified inside the config. This\n  can now be done via the ```config.enabled``` parameter, applicable to all\n  script objects. If set to ```on``` or not specified, the construct will be\n  used, if set to any other value, it will be ignored. This can be used\n  together with the backtick functionality to configure enable and disable\n  from either a file or environment variable.\n  closes https://github.com/rsyslog/rsyslog/issues/2431\n- script: permit to use environment variables during configuration\n  new constant string type \"backticks\", inspired by sh\n  (sample: `echo $VARNAME`).\n- new global config parameter \"shutdown.enable.ctlc\"\n  permits to shutdown rsyslog via ctl-c; useful e.g. in containers\n- config optimizer: detect totally empty \"if\" statements and optimize\n  them out\n- template: constant entry can now also be formatted as json field\n  This enhancements permits to craft clean templates that generate JSON,\n  e.g. for ElasticSearch consumption (or any other REST API)\n- omstdout: support for new-style configuration parameters added\n- core: set TZ on startup if not already set\n  In theory, TZ should be set by the OS. Unfortunately, this seems\n  to be not the case any longer on many Linux distros. We now check\n  it and set it appropriate if not already given.\n  Thanks to github user JPvRiel for providing an excellent explanation\n  of the reasoning for this and how to work around it.\n  closes https://github.com/rsyslog/rsyslog/issues/2054\n- imjournal bugfix: file handle leak during journal rotation\n  Thanks to Peter Portante for the patch\n  see also: https://github.com/rsyslog/rsyslog/pull/2437\n- lmsig_ksils12 bugfix: dirOwner and dirGroup config was not respected\n- script bugfix: replace() function worked incorrectly in some cases\n  If the end of the message was similar to the replacement string, parts\n  of the string could (not always) be missing.\n  Thanks to Yaroslav Bo for the patch.\n- build system bugfix: --disable-libcurl did not work\n  Thanks to Dan Molik, Thomas D. (whissi), and Michael Biebl for the patches.\n- fixed build issues on Alpine Linux\n- core bugfix: misaddressing in external command parser\n  This parser is used whenever a module (e.g. omprog) needs to process\n  command lines. If command parameters were given, memory misaddressing\n  occurred. This could lead to a segfault.\n  This is a regression in 8.32.0.\n  closes https://github.com/rsyslog/rsyslog/issues/2408\n- core bugfix: small memory leak in external command parser\n  This parser is used whenever a module (e.g. omprog) needs to process\n  command lines. On each action definitions for actions that use the\n  parser a small amount of memory was leaked. It is an uncritical leak\n  as it only occurs during config parsing. So it leaks a couple of\n  KiB during startup but does not grow during actual message processing.\n  This is a regression in 8.32.0.\n- core bugfix: string not properly terminated when RFC5424 MSGID is used\n  This could lead to misaddressing when the jsonmesg property was used.\n  closes https://github.com/rsyslog/rsyslog/issues/2396\n- bugfix: strndup() compatibility layer func copies too much\n  The function did not obey the upper limit, effectively becoming\n  a strdup(). This was only noticed when the compatibility layer\n  was required, most importantly on Solaris 10.\n- CI system\n  - we now use well-defined containers for parts of the CI runs\n  - now also build test under Alpine Linux\n  - test added for omprog feedback feature\n------------------------------------------------------------------------------\nVersion 8.32.0 [v8-stable] 2018-01-09\n- NEW BUILD REQUIREMENTs:\n  * libfastjson 0.99.8 is now required; older versions lead to bugs in rsyslog\n  * libczmq >= 3.0.2 is now required for omczmq\n    This was actually required for quite some while, but not properly checked\n    during configure run. If the lib was older, build failed. Now configure\n    detects this and emits the appropriate error message.\n  * libcurl is now needed for rsyslog core\n    due to new script function http_request(). This can be turned off by the\n    new configure option --disable-libcurl. If so, http_request() is not\n    available.\n- rsyslogd: add capability to specify that no pid file shall be written\n  Command line option -iNONE provides this capability. This utilizes the\n  pre-existing -i option, but uses the special name \"NONE\" to turn of the\n  pid file check feature. Turning off is useful for systems where this no\n  longer is needed (e.g. systemd based).\n  closes https://github.com/rsyslog/rsyslog/issues/2143\n- ompgsql: considerable enhancements\n  The PostgreSQL output module was woefully out-of-date the following\n  list is changes made to update the module to current Rsyslog standards.\n    * allow for v6 configuration syntax\n    * configurable ports\n    * support transactional interface\n    * push db connection into workers (libpq is threadsafe)\n    * enable module testing on travis\n    * ensure configuration syntax backwards compatibility\n    * formatting around postgres core templating\n    * use new test conventions\n    * add new configuration syntax test\n    * add valgrind tests for new and old syntax\n    * add threading tests\n    * add action queue long running tests\n    * add action queue valgrind test\n  Thanks to Dan Molik for contributing this great enhancement!\n- build system: removed --enable-rtinst configure option\n  This was a historic debugging option which has been superseded by\n  newer tools like valgrind, helgrind, ASAN, TSAN, etc...\n- pmrfc3164: support for headerless messages\n  pmrfc3164 now detects if the first non-SP, non-HT character is either\n  '{' or '[' and if so assume that no header (TAG, HOSTNAME, DATE) is\n  given. If so, it uses defaults for these values. The full message is\n  used as the MSG part in that case. Note that an initial PRI may still\n  be specified.\n  This follows the trend to send JSON messages via syslog without any\n  header. We use default header values in this case.\n  This right now is a bit experimental; we may roll it back if\n  problems show up in practice.\n  closes https://github.com/rsyslog/rsyslog/issues/2030\n- omhiredis: add option to use RPUSH instead of LPUSH\n  see also https://github.com/rsyslog/rsyslog/issues/1625\n- mmexternal improvements\n  * better error reporting if to-be-executed script cannot be executed\n  * some general cleanup\n  * better redirection of stdin/out/err for the executed script\n  * bugfix: argv[0] of the script was missing if command line parameters\n    were not specified\n- omprog: refactored, code shared with mmexternal moved to common object\n- logctl tool: refactor to support newer rsyslog standards\n  * Made the logctl usertool ISO C90 compliant.\n  * Made the logctl usertool use a homogeneous coding style.\n  Thanks to Hugo Soszynski for contributing this work (as well as\n  suggesting some workarounds related to libmongoc/libbson).\n- imfile: added support for Solaris File Event notification (FEN)\n  also improves performance under Solaris, with FEN imfile provides\n  features equivalent to inotify mode\n- core/action: new parameter \"action.errorfile\"\n  permits to write failed messages to an \"error file\" so that they\n  can be reviewed and potentially be reprocessed\n- imfile: added new module parameter \"sortFiles\"\n  This permits to process newly created files in sorted order.\n- imuxsock: improved status reporting: socket name received from systemd\n  Providing an indication of what we got from systemd facilitates problem\n  analysis.\n- build system: added new testbench configure switches\n  now --enable-testbench1 and --enable-testbench2 exists which permit\n  to enable/disable parts of the testbench. By default, both are on\n  when --enable-testbench is given. For full testbench coverage, both\n  options must be given. These options are necessary because under\n  Travis we hit the max runtime for tests and needed to split tests\n  over multiple incarnations.\n- mmpstrucdata: new parameter \"sd_name.lowercase\"\n  to permit preserving case for structured data identifiers\n  Special thanks to github user alanrobson for the initial commit that\n  preserves case (on which we based other work).\n- omfile: add module-global option \"dynafile.donotsuspend\"\n  this permits to enable SUSPENDing dynafile actions. Traditionally,\n  SUSPEND mode was never entered for dynafiles as it would have blocked\n  overall processing flow. Default is not to suspend (and thus block).\n  closes https://github.com/rsyslog/rsyslog/issues/2236\n- testbench: add a capability to turn off libfaketime tests via configure\n  Unfortunately, libfaketime becomes more and more problematic in newer\n  versions and causes aborts on some platforms. This provides the ability\n  to turn it off via --disable-libfaketime.\n  In the longer term, we should consider writing our own replacement.\n- testbench: name valgrind tests consistently\n  all valgrind tests now end in -vg.sh\n- RainerScript: add function parse_json()\n- RainerScript: add function substring()\n- RainerScript: add function http_request()\n- RainerScript: add function previous_is_suspended()\n  This function returns a boolean indicating if the previous action is\n  suspended (0 - no, 1 - yes). This is useful if arbitrary processing\n  (other than calling actions) should be made depending on that state.\n  A prime example for this is probably calling a ruleset.\n  closes https://github.com/rsyslog/rsyslog/issues/1939\n- Patches from BSD projects have been imported\n  ... as far as they still apply. Some patches that patched BSD-specific\n  code were broadened to be more generic.\n- script bugfix: invalid function names were silently ignored\n  no error message was produced\n  thanks to Matt Ezell for providing the patch.\n- rainerscript: add int2hex() function\n- rainerscript: add is_time() function\n  Thanks to Stephen Workman for implementing this.\n- RainerScript: add function script_error() and error-reporting support\n  This permits script functions that could fail to report errors back, so\n  that the user can handle them if desired. We use an errno-style of\n  interface. That means script_error() needs to be called after functions\n  that supports it. It will return either 0 (all OK) or something else\n  (an error condition).\n  The commit also modifies the parse_time() function to use the new\n  interface. First of all, this is useful for users, and secondly we\n  needed a capability to craft a testbench test.\n  closes https://github.com/rsyslog/rsyslog/issues/1978\n- testbench: fixed build problem of testbench tools under Alpine Linux\n- added --enable-libsystemd configure option to enforce use of libsystemd\n  so we can fail the build on platforms where this is required\n- core/glbl: remove long-unused option $optimizeforuniprocessor\n  This was still available, but had no effect (for ~10 years or so). The\n  plumbing is now removed. If someone tries to use the option, an\n  error message is generated.\n  closes https://github.com/rsyslog/rsyslog/issues/2280\n- core/queue: emit better status messages at rsyslog shutdown\n  this helps to diagnose issue - unfortunately we need more work to ensure\n  that the messages always make it to the user. This is a start and\n  hopefully useful at least for the testbench, possibly more.\n- fixed a couple of build issues with gcc-7 (in less frequently used modules)\n- fixed a couple of build issues on the arm platform (actually raspbian)\n- impstats: fix invalid counter definitions for getrusage() reporting \n  some of the counters were defined as  int (32 bit) vs. intctr_t (64 bit).\n  On some platforms \"long\" seems to be 64bit, and getrusage() provides\n  what we store as int via long. So this caused truncation and/or overflow.\n  This had undefined effects. Most often, everything worked fine\n  for values smaller than 2^31 but sometimes we got negative values.\n  closes https://github.com/rsyslog/rsyslog/issues/1517\n- imudp bugfix: potential segfault in ratelimiting\n  The rate-limiter inside imudp was not set to be thread safe, but was\n  used across multiple threads. This worked in default configuration,\n  but failed when RepeatedMsgReduction was set to \"on\".\n  Note that it in general is a bug to use a rate-limiter in\n  non-threadsafe mode across multiple threads. This also causes invalid\n  rate limiting counts in the default case.\n  closes https://github.com/rsyslog/rsyslog/issues/441\n  fixes https://github.com/rsyslog/rsyslog/issues/2132\n- imptcp bugfix: access to free'ed memory\n  When notifyconnectionclose was on, a string buffer was accessed immediately\n  after it was freed (as part of the connection close operation).\n  Detected by LLVM ASAN.\n- mmanon bugfix: fix wrong ipv6 embedded recognition\n  mmanon recognized IPv6 with embedded IPv4 that have too few (16 bit) fields.\n  example: 13:abd:45:0.0.0.0\n  closes https://github.com/rsyslog/rsyslog/issues/2357\n- imfile bugfix: not detecting files in directory when wildcards are used.\n  When directories and files are created at the same time,\n  imfile may missed subdirs or file if the machine is on high load.\n  The handling has been enhanced to scan newly created directories ALWAYS for\n  matching files.\n  fixes https://github.com/rsyslog/rsyslog/issues/2271\n  However there still exist problems with multilevel directory configurations.\n  Details are discussed in https://github.com/rsyslog/rsyslog/issues/2354\n  Fixes for the remaining issues are expected for 8.33.0.\n- script bugfix: improper string-to-number conversion for negative numbers\n- core/action bugfix: 100% CPU utilization on suspension of output module\n    Triggering condition:\n    * output module using the legacy transaction interface\n      (e.g. omelasticsearch, omlibdbi)\n    * output module needs to suspend itself\n  In these cases, rsyslog enters a busy loop trying to resolve the\n  suspend condition. The bug is rooted in rsyslog core action code.\n  This patch fixes it by inserting a 1-second sleep during calls\n  to the resume handler.\n  Note: we cannot sleep exactly as long as tryResume needs. This\n  would require larger refactoring, which probably is not worth for\n  the legacy interface. The current solution is almost as good, as\n  the one second sleep has very little overhead on a real system.\n  Thus we have chosen that approach.\n  This patch now also ensures that failed messages are properly\n  handled and do not cause eternal hang.\n  closes https://github.com/rsyslog/rsyslog/issues/2113\n- core/variables bugfix: bare $! cannot be used in set statement\n  fixes https://github.com/rsyslog/rsyslog/issues/326\n- core bugfix: auto commit of actions improperly handled\n  The internal state variable bHadAutoCommit was handled in thread-unsafe way\n  and most probably caused (hard to see) issues when action instances were\n  run on multiple worker threads. It looks like the state variable was\n  forgotten to move over to worker state when action workers were introduced.\n  closes https://github.com/rsyslog/rsyslog/issues/2046\n- core bugfix: filename length limitation of 199 bytes\n  file names (including path names) longer than 199 bytes could not be\n  handled at many places. This has now been uplifted to 4KiB after careful\n  review for the largest size supported among all relevant platforms.\n- core bugfix: undefined behavior due to integer overflow\n  when searching strings, we may have an (unsigned) integer overflow\n  which can lead to misaddressing.\n  Detected by clang ubsan.\n- core bugfix: race on LocalHostIP property during startup\n  The way the default was set could lead to a race if e.g. two internal\n  messages were emitted at startup when the property was not yet set. This\n  has been seen to happen in practice. It had no bad effect except a very\n  small stationary memory leak, but made using thread analyzers unreliable\n  (as it was rightfully detected as a problem).\n  closes https://github.com/rsyslog/rsyslog/issues/2012\n- bugfix: potential segfault on startup\n  timezone info table was \"sorted\" even though it may be NULL. There is\n  no practical case known where this lead to an actual abort, but in\n  theory it would be possible. If so, it would happen immediately on\n  startup.\n  Detected by clang ubsan.\n- omhiredis bugfix: rsyslog segfault on startup if no template is specified\n- omprog bugfix: argv[0] not set when using binary without arguments\n  When using the omprog plugin with a binary without arguments, argv[0] (the\n  name of the binary) is not set, causing binaries that depend on this value\n  being set to crash or misbehave.\n  This patch also mildly refactors omprog argv[] creations, albeit some more\n  refactoring would be useful.\n  closes https://github.com/rsyslog/rsyslog/issues/1858\n- core: refactoring of rsyslog's cstr \"class\"\n  Function cstrGetSzStrNoNULL shall modified the string buffer on each call,\n  albeit it is considered a \"read-only\" function. It currently adds a '\\0'\n  at the end. This is bad, especially when multiple threads access the same\n  string. As always the same data is written, it was not causing real issues\n  (except unnecessary cache writes), but it polluted the thread debugger and\n  as such prevent more elaborate automated tests.\n- parent directory creation function refactored\n  This should not cause any change of behavior, but is worth noting in case\n  we see a regression not caught by the CI system.\n- mmsnmptrapd bugfix: potential misaddressing\n  This only occurred in situations when the system was totally out of memory.\n- imkafka: fix potential small resource leak\n  If rdkafka handle cannot fully populated, cleanup is added. Previously, we\n  could leak a handle if e.g. no brokers were available. Note that this was\n  a cosmetic leak, as proper processing is not possible in any case and the\n  leak is once per listener, so not growing. But we now also ensure that\n  proper error reporting and handling is done in any case. Previously, we\n  may have some misleading error messages if the defunct kafka handle was\n  used.\n  closes https://github.com/rsyslog/rsyslog/issues/2084\n- imkafka bugfix: do not emit error message on regular state\n  This was misunderstood as an error state and could spam the system\n  log considerably. Regression from 8.31.0.\n- omkafka: expose operational status to user where useful\n  omkafka emits many useful operational status messages only to the debug\n  log. After careful review, we have exposed many of these as user error\n  and warning message (ex: librdkafka queue full, so user knows why we\n  suspend the plugin temporarily). This may have made the module too\n  chatty. If so, one can always filter out messages via configuration. And\n  if we really went overboard, we can undo those parts with the next\n  release. So it's better to give a bit more than less, as this definitely\n  eases troubleshooting for users.\n  closes https://github.com/rsyslog/rsyslog/pull/2334\n- omkafka bugfix: potential message duplication\n  If a message that already failed in librdkafka was resubmitted and that\n  resubmit also failed, it got duplicated.\n- omkafka: fix multithreading\n  omkafka has several issue if multiple worker instances are used. This commit\n  actually make the module use a single worker thread at max. Reasoning:\n  Librdkafka creates background threads itself. So omkafka basically needs to move\n  memory buffers over to librdkafka, which then does the heavy hauling. As such, we\n  think that it is best to run max one wrkr instance of omkafka -- otherwise we just\n  get additional locking (contention) overhead without any real gain. As such,\n  we use a global mutex for doAction which ensures only one worker can be active\n  at any given time. That mutex is also used to guard utility functions (like\n  tryResume) which may also be accessed by multiple workers in parallel.\n  Note: shall this method be changed, the kafka connection/suspension handling needs\n  to be refactored. The current code assumes that all workers share state information\n  including librdkafka handles.\n  closes https://github.com/rsyslog/rsyslog/issues/2313\n- omkafka bugfix: potential misaddressing\n  The failed message list is improperly cleaned. This is a regression\n  from recent commit 4eae19e089b5a83da679fe29398c6b2c10003793, which\n  was introduced in 8.31.0.\n  This problem is more likely to happen under heavy load or bad\n  connectivity, when the local librdkafka queue overruns or message\n  delivery times out.\n  closes https://github.com/rsyslog/rsyslog/issues/2184\n  closes https://github.com/rsyslog/rsyslog/issues/2067\n- omkafka bugfix: build fails with older versions of librdkafka\n  closes https://github.com/rsyslog/rsyslog/issues/2168\n- omgssapi bugfix: fix compiler warnings with gcc-7\n  closes https://github.com/rsyslog/rsyslog/issues/2097\n- dnscache bugfix: entries were cached based on IP AND port number\n  That  hash key which is used to find out already cached dns entry gets\n  incorrectly computed from the whole sockaddr_storage\n  (sockaddr_in/sockaddr_in6) structure including a sin_port (which doesn't\n  have a static value) instead of only an address, thus creating redundant\n  dns cache entries/consuming more space. This lead to potentially high memory\n  usage and ineffectiveness of the case. It could be considered a memory leak.\n  Thanks to Martin Osvald for the patch.\n  see also: https://github.com/rsyslog/rsyslog/pull/2160\n- omkafka bugfix: fixed memory leak\n  a memory leak occurred when librdkafka communicated error/status information\n  to omkafka. this seems to happen relatively frequently, so this leak\n  could be pretty problematic.\n- mmdblookup bugfix: replace thread-unsafe strtok() by thread-safe counterpart\n  Many thanks to Will Storey (github user @horgh) for mentioning this and\n  his phantastic help in debugging this rsyslog problem!\n- pmnormalize bugfix: remove unsave \"strcat\" implementation\n- rainerscript bugfix: ltrim() and rtrim function misaddressing\n  This could lead to a segfault and was triggered by certain input data\n  schemes. For example, a ltrim(\" a\") could lead to the fault.\n- imklog bugfix: local host IP was hardcoded to 127.0.0.1\n  This is now taken from the global localHostIP setting, which is used\n  consistent across all modules.\n  Also, the removed (2012?) directive $klogLocalIPIF has been added\n  again but directly marked as removed. That way, an informative error\n  message is generated if someone tries to use it.\n  closes https://github.com/rsyslog/rsyslog/issues/2276\n- cleanup: remove obsolete pre-KSI GuardTime signature interface\n  this is no longer functional starting Jan 2018 as it reached end of life\n  closes https://github.com/rsyslog/rsyslog/issues/2128\n- cleanup: obsolete definition SOL_TCP replaced by newer IPPROTO_TCP\n  this should not have any effect at all except better portability, but is\n  worth mentioning in the ChangeLog nevertheless.\n- lookup tables: fixed undefined behavior detected by UBSan\n- CI testing\n  - ARM (via Raspberry PI) added to CI system\n  - Debian 9 added to CI system\n  - omgssapi and usertools components are now also tested in Travis\n  - test coverage on BSD has been enhanced\n------------------------------------------------------------------------------\nVersion 8.31.0 [v8-stable] 2017-11-28\n- NEW BUILD DEPENDENCY: ommongodb now requires libmongo-c\n  instead of deprecated libmongo-client.\n- remove systemd embedded code, use libsystemd instead\n  Since the early days rsyslog used the original systemd embedded\n  interface code. This version now uses libsystemd where available.\n  If we do not find libsystemd, we assume the system does not use\n  systemd, which is a safe assumption nowadays. This ensures we use the\n  fresh interface code and also removes bloat from our project.\n  closes https://github.com/rsyslog/rsyslog/issues/1933\n- mmanon: add support for IPv6 addresses with embedded IPv4 address\n  While this format is uncommon, it may still be present in logs and as\n  such should be supported. It is configurable via individual settings,\n  though. Especially the number of bits to anonymize may be desired to\n  be different than in pure IPv6.\n- ommongodb: big refactoring, more or less a feature-enhanced rewrite\n  New features are :\n  * Handle TLS connection to mongodb\n  * Handle MongoDB Replicasets\n  * Added the 'ssl_ca' and 'ssl_cert' directives to configure tls connection\n  * Added 'uristr' directive to configure the connection uri in the form\n    of 'mongodb://...'\n  Now uses the official mongo-c-driver library instead of the deprecated\n  mongo-client library\n  Special thanks to Hugo Soszynski and Jérémie Jourdin for there hard work\n  to make this a reality!\n  See also: https://github.com/rsyslog/rsyslog/pull/1917\n- rainerscript: add parse_time() function\n  Thanks to Stephen Workman for implementing this.\n- omelasticsearch: add LF to every elastic response for error file\n  error file content was written without LF after each message, making\n  it hard to work with and monitor.\n  Thanks to Yaroslav Bo for the patch.\n- omelasticsearch: add pipeline support\n  supports static and dynamic ElasticSearch pipeline parameter.\n  closes https://github.com/rsyslog/rsyslog/issues/1411\n  Thanks to github users scibi and WaeCo for the implementation.\n- lmsig_ksi_ls12: support asynchronous mode of libksi\n- omprog: added error handling and transaction support for external plugins\n  This permits much better integration of external output modules.\n  Special thanks to Joan Sala for providing this work!\n- imzmq3/omzmq3: marked as deprecated, modules will be remove in v8.41\n  see also: https://github.com/rsyslog/rsyslog/issues/2100\n- imzmq3/omzmq3: fixed build issues with gcc-7\n- core: emit error message on abnormal input thread termination\n  This indicates a serious issue of which the user should be notified.\n  Was not done so far and caused grief when troubleshooting issues.\n- core: refactored locking for json variable access\n  refactored the method so that it consistent in all functions and easier\n  to follow. Most importantly, now an as simple as possible locking paradigm\n  of lock ... unlock within the function. Hopefully easier to understand\n  both for humans and static code analyzers.\n- core: refactored creation of UDP sockets\n  was very old, hard to follow code; streamlined that a bit\n- core/dnscache: refactor locking\n  keep a simple lock ... unlock scheme within the function. That is\n  easier to follow for both humans as well as static analyzers.\n  Also removes Coverity scan CID 185419\n- rainerscript: use crypto-grade random number generator for random() function\n  We now use /dev/urandom if available. If not, we fall back to the weak PRNG.\n- imkafka: improve error reporting and cleanup refactoring\n- imkafka bugfix: segfault if \"broker\" parameter is not specified\n  Now emits warning message instead and uses hardcoded default\n  (which usually matches where the kafka broker can be found).\n  fixes https://github.com/rsyslog/rsyslog/issues/2085\n- omkafka: improve error reporting\n- omkafka: slight speedup do to refactoring of LIST class\n  double-linked list was used for temporarily undeliverable message tracking\n  where singly-linked list was sufficient. Changed that.\n- TCP syslog: support SNI when connecting as a client\n  This is done if a hostname is configured and turned off if an IP is used.\n  Thanks to Art O Cathain for the patch.\n  see also https://github.com/rsyslog/rsyslog/pull/1393\n- msg variable bugfix: potential segfault on variable access\n  A segfault is likely to happen if during processing a variable with\n  more than one path component is accessed (e.g. $!path!var) and NO\n  variables oft hat kind (local, message, global) are defined at all.\n  closes https://github.com/rsyslog/rsyslog/issues/1920\n- ratelimiting bugfix: data race in Linux-like ratelimiter\n  access to the Linux-like ratelimiter was not properly synchronized, and\n  the system rate-limiter was not using it in any case.\n  This could lead to the rate-limit settings not being properly\n  respected, but no \"hard error\".\n- core/template bugfix: potential NULL pointer access at config load\n  could happen if the config was loaded and the parameters could not properly\n  be processed. If so, this occurred only during the startup phase.\n  Detected by Coverity scan, CID 185318\n- core/json var subsystem bugfix: segfault in MsgSetPropsViaJSON\n  Invalid libfastjson API use lead to double-free. This was most importantly\n  triggered by mmexternal (but could potentially be triggered by other\n  uses as well)\n  closes https://github.com/rsyslog/rsyslog/issues/1822\n- core/wrkr threads bugfix: race condition\n  During e.g. shutdown it could happen that a worker thread was started\n  and immediately be requested to terminate. In such situations there was\n  a race the prevented proper initialization. This could lead to follow-on\n  problems.\n  We believe (but could not proof) that this also could lead to a hang of\n  the termination process. Thus we claim to close an issue tracker down\n  here below, but are not 100% certain it really closes it (we hope for\n  user feedback on this). In any case, the thread debugger showed invalid\n  operations and this has been fixed, so it is useful in any case.\n  closes https://github.com/rsyslog/rsyslog/issues/1959\n- core/wtp: potential hang during shutdown\n  when the wtp worker is cancelled in the final stage of shutting down\n  while the mutex is locked and there is one worker left, the system\n  will hang. The reason is that the cancelled thread could not free the\n  mutex that the other needs in order to shut down orderly.\n  Detected with clang thread sanitizer.\n- omfwd bugfix: generate error message on connection failure\n- imtcp bugfix: \"streamdriver.mode\" parameter could not be set to 0\n- imjournal bugfix: module was defunctional\n  The open function was broken by commit 92ac801, resulting in\n  no data being ever read from the journal.\n  patch bases on the idea of Radovan Sroka given here:\n  https://github.com/rsyslog/rsyslog/issues/1895#issuecomment-339017357\n  but follows the current imjournal-paradigm of having the journal\n  handle inside a global variable.\n  see also https://github.com/rsyslog/rsyslog/issues/1895\n  closes https://github.com/rsyslog/rsyslog/issues/1897\n- imjournal: refactor error handling, fix error messages\n  imjournal did not try to recover from errors and used the error state\n  returned by journal functions incorrectly, resulting in misleading\n  error messages. Fixed this and also increased the number of error\n  messages so that it now is easier to diagnose problems with this module.\n  Also a little bit of internal brush-up.\n -mmdblookup bugfix: fix potential segfault due to threading issues\n  libmaxminddb seems to have issues when running under multiple threads. As\n  a first measure, we prevent mmdblookup now from running on more than one\n  thread concurrently.\n  see also: https://github.com/rsyslog/rsyslog/issues/1885#issuecomment-344882616\n- omelasticsearch bugfix: operational error messages not passed to user\n  This lead to sometimes hard to diagnose problem. Note that for obvious\n  reasons the amount of messages from omelasticsearch has increased; this\n  is not a sign of a problem in itself -- but it may reveal problems that\n  existed before and went unnoticed. Also note that too-verbose messages\n  can be filtered out via regular rsyslog methods (e.g. message discarding\n  based on content).\n- omkafka bugfixes\n  * statistics counter maxoutqsize could not be reset\n    Thanks to github user flisky for the patch.\n  * potential hang condition\n    omkafka did not release a mutex under some error conditions (most\n    notably out of memory on specific alloc calls). This lead to a hang\n    during actively processing messages or during shutdown (at latest).\n    This could happen only if dynamic topics were configured.\n    Detected by Coverity Scan, CID  185781 (originally 185721, detected\n    as a different issue by Coverity after code refactoring done in regard\n    to 185721 -- then the problem became more obvious).\n  * file handle leak, which could occur when local buffering\n    of messages was needed\n  * invalid load of failedmsg file on startup if disabled\n    error \"rsyslogd: omkafka: could not load failed messages from \"\n    \"file (null) error -2027 - failed messages will not be resend.\"\n    occurs because, despite `keepFailedMessages=\"off\"` as a default,\n    omkafka still tries to check for and load a `(none)` file which\n    triggers an IO error of sorts according to the 2027 link above.\n    Obviously, it probably shouldn't try load the file if\n    `keepFailedMessages` is not enabled.\n    Thanks to github user JPvRiel for a very good error report and\n    analysis.\n    closes https://github.com/rsyslog/rsyslog/issues/1765\n  * various config parameters did not work\n    These were not even recognized when used and lead to a config startup\n    error message:\n    ~ closeTimeout\n    ~ reopenOnHup\n    ~ resubmitOnFailure\n    ~ keepFailedMessages\n    ~ failedMsgFile\n    closes https://github.com/rsyslog/rsyslog/issues/2052\n  * considerable memory leak\n    Whenever a message could (temporarily) not be delivered to kafka,\n    a non-trivial amount of memory was leaked. This could sum up to\n    quite a big memory leak.\n    fixes https://github.com/rsyslog/rsyslog/issues/1991\n  * some small memory leaks fixed\n    most of them cosmetic or a few bytes statically (not growing as\n    omkafka was used) -- thus we do not mention each one explicitly.\n    For more details, see git commit log or this pull request:\n    https://github.com/rsyslog/rsyslog/pull/2051\n- kafka bugfix: problem on invalid kafka configuration values\n  omkafka ended up in an endless loop and high cpu.\n  imkafka tried to subscribe to a not connected kafka server.\n  closes https://github.com/rsyslog/rsyslog/issues/1806\n- [io]mgssapi: fix build problems (regression from 8.30.0)\n- [io]czmq: fix build problems on some platforms (namely gcc 7, clang 5)\n- tcpsrv bugfix: potential hang during shutdown\n- queue bugfix: potential hang during shutdown\n- queue bugfix: NULL pointer dereference during config processing\n  If the queue parameters were incorrectly given, a NULL pointer dereference\n  could happen during config parsing. Once post that stage, no problem could\n  occur.\n  Detected by Coverity scan, CID 185339\n- imczmq bugfix: segfault\n  happened in a call to\n    371: zcert_destroy(&serverCert) called from rcvData().\n  Thanks to ~achiketa Prachanda for the patch.\n- imfile: some small performance enhancements\n  Thanks to Peter Portante for the patch\n- omfile: handle file open error via SUSPEND mode\n  For a while, an open file error lead to suspension as the error was\n  not detected by the rule engine. This has changed with fixes\n  in 8.30.0. I asked users what they prefer (and expect) and\n  everyone meant it should still be handled via suspension. See\n  github tracker below for more details.\n  closes https://github.com/rsyslog/rsyslog/issues/1832\n- omfile bugfix: race during directory creation can lead to loop\n  There was a race where two threads were competing for directory creation\n  which could lead to none succeeding and a flood of error message like this\n  \"error during config processing: omfile: creating parent directories for\n  file\". This has been solved.\n  Thanks to Niko Kortström for the patch.\n- imudp: improve error reporting\n  When udp listener cannot be created, an error message containing\n  the ip-address and port is put out.\n  closes https://github.com/rsyslog/rsyslog/issues/1899\n- omrelp bugfix: incorrect error handling\n  if librelp with TLS but without Authentication was included, librelp\n  did not emit the correct error message due to invalid error code\n  check. It also did not err-out but instead suspended itself.\n  Detected by Coverity scan, CID 185362\n- [io]mrelp bugfix: segfault on startup if configured cert not readable\n  When the certificate file specified in the omrelp/imrelp configuration\n  can't be accessed, e.g. because it doesn't exist or you don't have\n  permission to do so, a Segmentation Fault will appear when you start\n  Rsyslog. This commit fixes that problem.\n  closes https://github.com/rsyslog/rsyslog/issues/1869\n- mmanon fix: make build under gcc 7\n  Thanks to William Dauchy for the patch\n- mmpstrucdata bugfix: formatting error of ']' char\n  This was invalidly formatted as '\"'. Thanks to github user\n  wu3396 for the error report including the patch idea.\n  closes https://github.com/rsyslog/rsyslog/issues/1826\n- mmexternalb bugfix: memory leak\n- core/stats bugfix: memory leak if sender stats or tracking are enabled\n- core bugfix: potential segfault during startup\n  A NULL pointer could be accessed if there was a problem with the\n  timezone parameters.  Affects only startup, once started, no problem\n  existed.\n  Detected by Coverity scan; CID 185414\n- core bugfix: potential race in variable handling\n  Root of variable tree is accessed prior to locking access to it.\n  This introduces a race that may result in various kinds of\n  misaddressing.\n  Found while reviewing code, no bug report exists.\n- core bugfix: potential segfault when shutting down rsyslog\n  when rulesets are nested a segfault can occur when shutting down\n  rsyslog. the reason is that rule sets are destructed in load order,\n  which means a \"later\" ruleset may still be active when an \"earlier\"\n  one was already destructed. In these cases, a \"call\" can invalidly\n  call into the earlier ruleset, which is destructed and so leads to\n  invalid memory access. If a segfault actually happens depends on the\n  OS, but it is highly probable.\n  The cure is to split the queue shutdown sequence. In a first step,\n  all worker threads are terminated and the queue set to enqOnly.\n  While some are terminated, it is still possible that the others\n  enqueue messages into the queue (which are then just placed into the\n  queue, not processed). After this happens, a call can no longer\n  be issued (as there are no more workers). So then we can destruct\n  the rulesets in any order.\n  closes https://github.com/rsyslog/rsyslog/issues/1122\n- core/action bugfix: potential misaddressing when processing hard errors\n  For batches that did fail in an output module, the rsyslog core\n  tries to find offending messages that generate hard (non-recoverable)\n  errors. During this process, the action templates for each message\n  are copied into a temporary buffer. That copy was invalidly sized,\n  actually copying only the first template string. As such, outputs\n  that requested more template strings AND had errors in batch submission\n  received uninitialized pointers. This could lead to all sorts of\n  problems.\n  see also https://github.com/rsyslog/rsyslog/issues/1885\n  closes https://github.com/rsyslog/rsyslog/issues/1906\n- template object bugfix: NULL pointer access on invalid parameters\n  could happen only during startup\n  Detected by Coverity scan, CID 185376\n- omjournal bugfix: NULL pointer access on invalid parameters\n  could happen only during startup\n- omelasticsearch bugfix: configured credentials not used during health check\n  Authentication credentials were not applied during health check,\n  permission to use unsigned CERTS was not applied to regular data post.\n  closes https://github.com/rsyslog/rsyslog/issues/1949\n- omelasticsearch bugfix: abort on unavailable ES server\n  Depending on the state of unavailability (libcurl return code),\n  omelasticsearch tries to process a NULL return message, what\n  leads to a segfault.\n  This fixes the problem and introduces better error handling and\n  better error messages.\n  see also https://github.com/rsyslog/rsyslog/issues/1885\n- omelasticsearch: fix memory leak and potential misaddressing\n  Commit 96b5fce introduced regressions, leading to potential misaddressing\n  and a very probable memory leak. This commit fixes the issues and\n  hardens the module to better detect some error cases in the\n  future.\n  It also adds valgrind-based testbench tests which ensure that no\n  pointer errors exist. If they had been in place, the regressions\n  would never have been undetected.\n  Note that commit 96b5fce was introduced in 8.23.0 on Nov, 15th 2016.\n  Many thanks to Yaroslav Bo for alerting me on the root problem and\n  providing a very good analysis and guidance.\n  see also https://github.com/rsyslog/rsyslog/issues/1906\n  see also https://github.com/rsyslog/rsyslog/issues/1964\n  closes https://github.com/rsyslog/rsyslog/issues/1962\n- omelasticsearch bugfix: output from libcurl to stdout\n  omelasticsearch made libcurl output messages to stdout. This\n  commit fixes that. It also automatically enables libcurl verbose\n  mode during debug runs - it needs to be seen if this is smart or\n  not (previously, code needed to be commented in).\n  closes https://github.com/rsyslog/rsyslog/issues/1909\n- iczmq bugfix: potential memory leak\n- imptcp bugfix: potential misaddressing\n  When during a connection request the remote peer could not be\n  identified, imptcp could misaddress memory if it is configured\n  to emit messages on connection open.\n  Detected by clang 5.0 static analyzer.\n- imptcp: potential buffer overflow\n  if the local hostname or IP is larger than NI_MAXHOST-1, an internal\n  buffer is overflowed. This is irrespective of any input data.\n  Detected by Coverity scan, CID 185390\n- core/nsd_gtls: fix potential uninitialized data access\n  could occur during certificate check\n  found by clang 5.0 static analyzer\n- stats bugfix: potential program hang\n  due to missing unlock. This could only occur if pstats was set to\n  CEE-format logging (very uncommon) AND if the system runs out of\n  memory (in which case other things go pretty bad as well).\n  found by Coverity scan\n- omfwd bugfix: memory leak if network namespaces are used\n  very seldom used feature, occurs only during error case\n  found by Coverity scan.\n- core: potential misaddressing when accessing JSON properties\n  When a JSON property is accessed in template processing, memory may\n  have been misaddressed or a double-free may occur while obtaining the\n  property.\n  This was detected by a Coverity scan.\n- gcry crypto provider bugfixes: potential misaddressing and memory leak\n  If the config parameters were invalid, a misaddressing could occur. If so,\n  this happens only during startup.\n  Also, a memory leak existed when the crypto provider errored out. This could\n  build up if it were used in frequently-changing dynafiles. This was\n  detected by Coverity scan, CID 185360.\n- core/file stream object bugfix: memory leak\n  If a multiline read errored out, a line buffer could be leaked.\n  Detected by Coverity scan, CID 185328\n- imdiag bugfix: double mutex unlock when working with stats\n  Note: while this could potentially lead to a program hang, it affected\n  only testbench execution as imdiag is a testbench-only tool.\n  Detected by Coverity scan, CID 185348 and 185350\n- fixed several minor and cosmetic issues found by Coverity scan\n  including false positives. For details see \"$ git log\". All noteworthy\n  issues are separately mentioned in this ChangeLog. The ones not mentioned\n  are for example problems that can only occur during out of memory\n  conditions, under which it is extremely likely tha the rsyslog process\n  will be killed in any case\n- testbench:\n  * added compile-check for [io]mgssapi, mmcount\n  * harden tests against hanging previous instances\n  * re-enable RELP tests on Solaris\n  * added basic test for imjournal\n  * added threading tests via valgrind's helgrind tool\n  * added valgrind test for kafka modules\n  * added capability to run elasticsearch tests with\n    a) different ElasticSearch versions\n    b) independently from OS-installed version\n    This also sets base to enable more elaborate ES tests\n  * further relaxed timing of dynstats tests, as they tend to create\n    false positives on slow machines\n- CI: improved test coverage on FreeBSD\n- Travis: clang static analyzer 5.0 now run over all source files\n- build: make compile warning-free under gcc 7\n------------------------------------------------------------------------------\nVersion 8.30.0 [v8-stable] 2017-10-17\n- NEW BUILD REQUIREMENTS\n  * libfastjson 0.99.7 is now mandatory\n    the new version is required to support case-insensitive variable\n    comparisons, which are now the default\n  * when building imjournal, libsystemd-journal >= 234 is now recommended\n    This is to support the imjournal enhancement. Note that it is possible\n    to build with lower version, but this will degrade imjournal functionality.\n- CHANGE OF BEHAVIOR: all variables are now case-insensitive by default\n  Formerly, JSON based variables ($!, $., $/) were case-sensitive.\n  Turn old default back on: global(variables.casesensitive=\"on\")\n  See ChangeLog entry below for more details.\n- core: handle (JSON) variables in case-insensitive way\n  The variable system inside rsyslog is JSON based (for easy consumption\n  of JSON input, the prime source of structured data). In JSON, keys\n  (\"variable names\") are case-sensitive. This causes constant problems\n  inside rsyslog configurations. A major nit is that case-insensitivity\n  option inside templates (even if turned on) does not work with JSON\n  keys because they of inner workings*1.\n  It is much more natural to treat keys in a case-INsensitive way (e.g.\n  \"$!Key\" and \"$!key\" are the same). We do not expect any real problems\n  out of this, as key names only differing in case is highly unlikely.\n  However, as it is possible we provide a way to enable case-sensitivity\n  via the global(variables.casesensitive=\"on\") global config object.\n  Note that the default is to do case-insensitive matches. The reason\n  is that this is the right thing to do in almost all cases, and we do\n  not envision any problems at all in existing deployments.\n  *1 Note: case-insensitivity in rsyslog is achieved by converting all\n  names to lower case. So that the higher speed of strcmp() can be used.\n  The template option does actually that, convert the template keys to\n  lower case. Unfortunately, this does not work with JSON, as JSON keys\n  are NOT converted to lower case.\n  closes https://github.com/rsyslog/rsyslog/issues/1805\n- imjournal: made switching to persistent journal in runtime possible\n  with this patch imjournal can continue logging after switch to\n  persistent journal without need to restart rsyslog service\n  Thanks to github user jvymazal for the patch\n- mmanon: complete refactor and enhancements\n  - add pseudonymization mode\n  - add address randomization mode\n  - add support for IPv6 (this also supports various replacement modes)\n    closes https://github.com/rsyslog/rsyslog/issues/1614\n  also fixes bugs\n  - in IPv4 address recognition\n    closes https://github.com/rsyslog/rsyslog/issues/1720\n  - in IPv4 simple mode to-be-anonymized bits can get wrong\n    closes https://github.com/rsyslog/rsyslog/issues/1717\n- imfile: add \"fileoffset\" metadata\n  This permits to send the offset from which the message was read together\n  with the message text.\n  Thanks to github user derekjsonar for the initial implementation which\n  we extended to use the message start offset.\n- RainerScript: add ltrim and rtrim functions\n  closes https://github.com/rsyslog/rsyslog/issues/1711\n- core: report module name when suspending action\n  Thanks to Orion Poplawski for the patch.\n- core: add ability to limit number of error messages going to stderr\n  This permits to put a hard limit on the number of messages that can\n  go to stderr. If for nothing else, this capability is helpful for the\n  testbench. It permits to reduce spamming the test log while still\n  providing the ability to see initial error messages. Might also be\n  useful for some practical deployments.\n  global parameter: global(errorMessagesToStderr.maxNumber)\n- tcpsrv subsystem: improve clarity of some error messages\n  operating system error message are added to some messages, providing\n  better advise of what actually is the error cause\n- imptcp: include module name in error msg\n- imtcp: include module name in error msg\n- tls improvement: better error message if certificate file cannot be read\n- omfwd: slightly improved error messages during config parsing\n  They now contain config file/line number information where this was missing.\n- ommysql improvements\n  * Return specific code for unrecoverable errors. This makes retry processing\n    more performant and robust.\n  * error messages improved\n  * Update to utilize native v8 transactional interface. Previously, it used\n    the v7 interface with v8 emulation.\n  * treat server and client-generated messages differently\n    Server-generated error messages are considered non-recoverable, while\n    client generated once point into connection problems (which simply can\n    be retried). This is part of the improvements towards better\n    message-induced errors. Previous commits did only handle SQL parsing\n    errors, now we aim to address all of the message-induced error. We assume\n    that all server-generated errors are such - mysql API unfortunately does\n    not provide a clear indication of what type if error this is and it is\n    out of question to check for hundreds of error codes.\n    closes https://github.com/rsyslog/rsyslog/issues/1830\n- ommysql bugfix: do not duplicate entries on failed transaction\n  If a multi-message batch contains data errors, messages may be\n  duplicated as connection close is implicit commit (not rollback).\n  This patch introduces a specific rollback request in those cases.\n  closes https://github.com/rsyslog/rsyslog/issues/1829\n- imtcp bugfix: parameter priorityString was ignored\n  defaults were always used\n- template/bugfix: invalid template option conflict detection\n  This prevented \"option.casesensitive\" to be used with the SQL and JSON\n  options.\n- core/actions: fix handling of data-induced errors\n  Rsyslog core should try to detect data-induced (unrecoverable) errors\n  during action processing. An example of such is invalid SQL statements.\n  If the action returns a data error, rsyslog shall retry individual\n  messages from a batch in an effort to log those without errors. The others\n  shall be dropped.\n  This logic was temporarily disabled after the switch to the new v8\n  transaction interface. Now this bug is fixed and the testbench has been\n  amended to detect problems in the future.\n  closes https://github.com/rsyslog/rsyslog/issues/974\n- core/action bugfix: no \"action suspended\" message during retry processing\n  The action engine does not emit \"action suspended\" messages but \"resumed\"\n  ones in retry processing. This is wrong, as they are a strong indication\n  that something does not work correctly. Nevertheless, \"resumed\" messages\n  were emitted, which was very puzzling for the user.\n  This patch fixes it so that \"suspend\" messages are given during retry\n  processing. These do not contain a retry timestamp, providing evidence\n  that a retry is currently being tried.\n  closes https://github.com/rsyslog/rsyslog/issues/1069\n- core/ratelimit bugfix: race can lead to segfault\n  There was a race in iminternalAddMsg(), where the mutex is\n  released and after that the passed message object is accessed.\n  If the mainloop iterates in between, the msg may have already\n  been deleted by this time, resulting in a segfault.\n  Most importantly, there is no need to release the mutex lock\n  early, as suggested by current code. Inside mainloop the mutex\n  is acquired when it is time to do so, so at worst we'll have a\n  very slight wait there (which really does not matter at all).\n  This only happens if a large number of internal messages are emitted.\n  closes https://github.com/rsyslog/rsyslog/issues/1828\n- core bugfix: rsyslog aborts if errmsg is generated in early startup\n  Note that the segfault can occur only during early startup. Once\n  rsyslog has started, everything works reliably. This condition can\n  especially be triggered by specifying invalid TLS default certificates.\n  closes https://github.com/rsyslog/rsyslog/issues/1783\n  closes https://github.com/rsyslog/rsyslog/issues/1786\n- core bugfix: informational messages was logged with error severity\n  When the main loop reaped a child process (a normal action), this was\n  reported as an error. This caused user confusion. Now it is reported as\n  an informational message.\n- core bugfix: --enable-debugless build was broken\n  This was a regression from the v8.29.0 debug enhancements\n  Thanks to Stephen Workman for the patch.\n- queue bugfix: file write error message was incorrect\n  when a queue was restarted from disk file, it almost always\n  emitted a message claiming\n  \"file opened for non-append write, but already contains xxx bytes\"\n  This message was wrong and did not indicate a real error condition.\n  The predicate check was incorrect.\n  closes https://github.com/rsyslog/rsyslog/issues/170 (kind of)\n- omrelp bugfix:  segfault when rebindinterval parameter is used\n- imudp bugfix: UDP oversize message not properly handled\n  When a message larger than supported by the UDP stack is to be sent,\n  EMSGSIZE is returned, but not specifically handled. That in turn\n  will lead to action suspension. However, this does not make sense\n  because messages over the UDP max message size simply cannot be sent.\n  closes https://github.com/rsyslog/rsyslog/issues/1654\n- core bugfix: memory corruption during configuration parsing\n  when omfwd is used with the $streamdriverpermittedpeers legacy\n  parameter, a memory corruption can occur. This depends on the\n  length of the provided strings and probably the malloc subsystem.\n  Once config parsing succeeds, no problem can happen.\n  Thanks to Brent Douglas for initially reporting this issue and\n  providing great analysis.\n  Thanks to github user bwdoll for analyzing this bug and providing\n  a suggested fix (which is almost what this commit includes).\n  closes https://github.com/rsyslog/rsyslog/issues/1408\n  closes https://github.com/rsyslog/rsyslog/issues/1474\n- core bugfix: race on worker thread termination during shutdown\n  The testbench got some occasionally failing tests. Review of\n  them brought up the idea that there is a race during worker\n  threat termination. Further investigation showed that this\n  might be a long-standing issue, but so far did not really\n  surface as the timing was almost always correct. However,\n  with the new functionality to emit a message on worker\n  shutdown (v8.29), the timing got more complex and now this\n  seemed to occasionally surface.\n  closes https://github.com/rsyslog/rsyslog/issues/1754\n- omelasticsearch: avoid ES5 warnings while sending json in bulkmode\n  do this by adding proper content type header to ES request\n  Thanks to William Dauchy for the patch\n- omelasticsearch bugfix: incompatibility with newer ElasticSearch version\n  ElasticSearch changed its API in newer versions. When \"bulkmode\" is enabled\n  in omelasticsearch, rsyslog seems to consider all responses from Elasticsearch\n  as errors, even the successful ones. As a consequence, every single request\n  ends up being logged into the error file.\n  closes https://github.com/rsyslog/rsyslog/issues/1731\n  Thanks to Vincent Quéméner for the patch.\n- imptcp bugfix: invalid mutex addressing on some platforms\n  code did not compile on platforms without atomic instructions\n  Thanks to github user petiepooo for the patch\n- imptcp bugfix: do not accept missing port in legacy listener definition\n  If legacy listener definition was used, a missing port was accepted during\n  the config read phase but errored out upon listener activation. This now\n  errors out directly when processing the config directive.\n------------------------------------------------------------------------------\nVersion 8.29.0 [v8-stable] 2017-08-08\n- imptcp: add experimental parameter \"multiline\"\n  This enables a heuristic to support multiline messages on raw tcp syslog\n  connections.\n- imptcp: framing-related error messages now also indicate remote peer\n  This is the case e.g. for oversize messages.\n- imtcp: framing-related error messages now also indicate remote peer\n  This is the case e.g. for oversize messages.\n- imptcp: add session statistics counter\n    - session.opened\n    - session.openfailed\n    - session.closed\n- imtcp: add ability to specify GnuTLS priority string\n  This permits to set cipher details on a very low level.\n- impstats: add new resource counter \"openfiles\"\n- pmnormalize: new parser module\n  Parser module that uses liblognorm to parse incoming messages.\n- core/queue: provide informational messages on thread startup and shutdown\n  This provides better insight into operational state of rsyslog and is useful\n  in monitoring system health. Note that this causes the emission of messages\n  not previously seen. They are of syslog.informational priority.\n- omfwd/udp: improve error reporting, deprecate maxerrormessages parameter\n  Generally improved udp-related error messages (e.g. they now contain the\n  socket number, which makes it easier to related them to errors reported by\n  net.c subsystem).\n  We also deprecated (removed) the \"maxerrormessages\" configuration parameters.\n  It provided some very rough rate-limiting capabilities and was introduced\n  before we had native rate-limiters. The default was that only the first 5\n  error messages were actually reported. For long-running instances, that\n  meant that in many cases no errors were ever reported. We now use the default\n  internal message rate limiter, which works far better and ensures that also\n  long-running instances will be able to emit error messages after prolonged\n  runtime. In contrast, this also means that users will see more error\n  messages from rsyslog, but that should actually improve the end user\n  experience.\n- core: add parameters debug.file and debug.whitelist\n  allows one to generate debug log output only of specific files\n  Background information available at:\n  https://www.linkedin.com/pulse/improving-rsyslog-debug-output-jan-gerhards\n- core/net.c: improve UDP socket creation error messages\n- omfwd/udp: add \"udp.sendbuf\" parameter\n- core: make rsyslog internal message rate-limiter configurable\n  New parameters \"internalmsg.ratelimit.interval\" and \"internalmsg.ratelimit.burst\"\n  have been added.\n- omelasticsearch bugfixes and changed ES5 API support:\n  * avoid 404 during health check\n    Omelasticsearch responds differently to HTTP HEAD and GET requests and\n    returns correct state only on GET requests. This patch works around\n    that ES bug and always does a GET request even when technically a HEAD\n    request would be sufficient.\n  * avoid ES5 warnings while sending json\n    ES5 is generating warnings when sending json without the proper header:\n    $ curl -i -H \"Content-Type: text/json\" -XGET 'http://elasticsearch5:9200/' \\\n      -d '{}\\n'\n    HTTP/1.1 200 OK\n    Warning: 299 Elasticsearch-5.4.3-eed30a8 \"Content type detection for rest\n    requests is deprecated. Specify the content type using the [Content-Type]\n    header.\" \"Wed, 26 Jul 2017 14:33:28 GMT\"\n    no issue on previous version.\n    Now, the header is set as application/json. It works for all versions\n    (tested on ES2 and ES5) we also handle the bulkmode where it should be\n    set to application/x-ndjson\n    closes https://github.com/rsyslog/rsyslog/issues/1546\n  * bugfix for memory leak while writing error file\n  Thanks to William Dauchy for providing the patches\n- imfile bugfix: wildcard detection issue on path wildcards\n  Wildcards mode was not properly detected when wildcards\n  were only used in a directory name on startup.\n  This caused imfile not to create a proper dynamic filewatch.\n  closes: https://github.com/rsyslog/rsyslog/issues/1672\n- omfwd bugfix: always give reason for suspension\n  In many cases, no error message were emitted when omfwd\n  went into action suspension, which was confusing for end\n  users. This patch enables explicit error messages in all\n  those cases.\n  closes https://github.com/rsyslog/rsyslog/issues/782\n- omfwd bugfix: configured compression level was not properly used\n  Thanks to Harshvardhan Shrivastava for the patch.\n- imptcp bugfix: potential socket leak on session shutdown\n  imptcp first tries to remove a to-be-shut-down socket from the\n  epoll set, and errors out if that does not work. In that case, the\n  underlying socket will be leaked.\n  This patch refactors the code; most importantly, it is not necessary\n  to remove the socket from the epoll set, as this happens automatically\n  on close. As such, we simply remove that part of the code, which\n  also removes the root cause of the socket leak.\n- omfwd/omudpspoof bugfix: switch udp client sockets to nonblocking mode\n  On very busy systems, we see \"udp send error 11\" inside the logs, and the requesting\n  action is being suspended (and later resumed). During the suspension period (in\n  default configuration), messages are lost. Error 11 translates to EAGAIN and the\n  cause of this problem is that the system is running out of UDP buffer space. This\n  can happen on very busy systems (with busy networks).\n  It is not an error per se. Doing a short wait will resolve the issue. The real root\n  cause of the issue is that omfwd uses a nonblocking socket for sending. If it were\n  blocking, the OS would block until the situation is resolved. The need for a\n  non-blocking sockets is a purely historical one. In the days of single-threaded\n  processing (pre v3), everything needed to be done by multiplexing, and blocking was\n  not permitted. Since then, the engine has dramatically changed. Actions now run on\n  their own thread(s). As such, there is no longer a hard need to use non-blocking i/o\n  for sending data. Many other output plugins also do blocking wait (e.g. omelasticsearch).\n  As such, the real root cause of the trouble is unnecessarily using non-blocking mode,\n  and consequently the right solution is to change that.\n  Note that using blocking i/o might change some timing inside rsyslog, especially\n  during shutdown. So theoretical there is regression potential in that area. However,\n  the core is designed to handle that situation (e.g. there is special shutdown code to\n  handle the blocking case), so this does not stand against the \"proper\" solution.\n  This patch applies the change on the rsyslog core level, within net.c. The only\n  users of the changed functionality are omfwd and omudpspoof. Imudp is unaffected as\n  it requests server sockets.\n  Note that according to the sendto() man page, there is a second cause for the EAGAIN\n  error, this is when the system temporarily runs out of ephemeral ports. It is not\n  100% clear if this can also happen in the blocking case. However, if so, we can argue\n  this is a case where we really want the default retry logic. So for the time being,\n  it is appropriate to not handle EAGAIN in a special case any longer.\n  closes https://github.com/rsyslog/rsyslog/issues/1665\n- imklog: fix permitnonkernelfacility not working\n- impstats bugfix: impstats does not handle HUP\n  If the parameter \"log.file\" is specified, impstats writes its own\n  log file. However, HUP is not handled for this file, which makes\n  the functionality unusable with log rotation. It is also counter-\n  intuitive for users.\n  This patch enables correct HUP processing. As a sideline, it also\n  introduces a generic HUP processing framework for non-action type\n  of loadable modules.\n  closes https://github.com/rsyslog/rsyslog/issues/1662\n  closes https://github.com/rsyslog/rsyslog/issues/1663\n- core bugfix: segfault after configuration errors\n- core/queue bugfixes:\n  * Fix behavior of PersistStateInterval\n    If PersistStateInterval=1, then each log line read should cause the state file\n    to be updated, but this was not happening because nRecords was being post-increment.\n    Thanks to Anthony Howe for the patch.\n  * potential problem during deserialization\n    if queue object deserialization fails, invalid memory blocks might be\n    free'ed.\n    For more information see https://github.com/rsyslog/rsyslog/pull/1647\n    Thanks to Derek Smith for the patch.\n- core bugfix: message garbled after message modification\n  The MsgDup() function will return a garbled message object under these\n  conditions: The message was originally created with message length equal or\n  larger to CONF_RAWMSG_BUFSIZE. This makes rsyslog store the message in\n  dynamically allocated buffer space. Then, a component reduces the message\n  size to a size lower than CONGF_RAWMSG_BUFSIZE. A frequent sample is the\n  parser removing a known-bad LF at the end of the messages. Then, MsgDup is\n  executed. It checks the message size and finds that it is below\n  CONF_RAWMSG_BUFSIZE, which make it copy the msg object internal buffer\n  instead of the dynamically allocated one. That buffer was not written to in\n  the first place, so uninitialized data is copied. Note that no segfault can\n  happen, as the copied location was properly allocated, just not used in\n  this processing flow. In the end result, the new message object contains\n  garbage data. Whenever the new object is used (e.g. in a async ruleset or\n  action) that garbage will be used. Whenever the old object is accessed,\n  correct data will be used. Both types of access can happen inside the\n  same processing flow, which makes the problem appear to be random.\n  closes https://github.com/rsyslog/rsyslog/issues/1658\n- lmsig_ksi: removed pre-KSI_LS12 components\n  As of GuardTime, the provider, these no longer work due to backend\n  changes. The lmsig_ksi_ls12 module shall be used instead. This is\n  available since 8.27.0.\n- testbench bugfix: hang in tests if omstdout is not present\n  Many tests depend on omstdout. Given the fact that omstdout\n  is really only useful for the testbench (at least that's the intent),\n  we now require --enable-omstdout if --enable-testbench is given.\n  The alternative would have been to disable all those tests that\n  need it, which would have lead to considerable less testbench\n  coverage.\n  closes https://github.com/rsyslog/rsyslog/issues/1649\n------------------------------------------------------------------------------\nVersion 8.28.0 [v8-stable] 2017-06-27\n- NEW BUILD REQUIREMENT: librelp 1.2.14 (to build relp components)\n  This was necessary because imrelp requires an API introduced in 1.2.14.\n- omfwd: add parameter \"tcp_frameDelimiter\"\n- omkafka: large refactor of kafka subsystem\n  This offers improvements and greatly increases reliability.\n  Closes https://github.com/rsyslog/rsyslog/issues/1559\n  Closes https://github.com/rsyslog/rsyslog/issues/1584\n  Closes https://github.com/rsyslog/rsyslog/issues/1515\n  Closes https://github.com/rsyslog/rsyslog/issues/1052\n  May fix https://github.com/rsyslog/rsyslog/issues/1230\n- imfile: improved handling of atomically renamed file (w/ wildcards)\n  if a file is atomically renamed, the state file is also being renamed,\n  so processing continues as if the original name were kept.\n  see also: https://github.com/rsyslog/rsyslog/issues/1417\n- imfile: add capability to truncate oversize messages or split into multiple\n  also in this case an error message is emitted. Both of these actions are\n  configurable. This also solves memory issues when an endregex does not\n  match for prolonged time. In that case, large parts of the file were\n  previously buffered, which could cause big problems in case e.g. the\n  endregex was simply wrong and never matched. For the later, see also\n  https://github.com/rsyslog/rsyslog/issues/1552\n- mmdblookup\n  * upgraded from \"contrib\" to \"fully supported\" state\n  * refactored and simplified code\n  * added ability to specify custom names for extracted fields\n  * added ability to specify container name for extracted fields\n  * bugfix: fixed multiple memory leaks\n- imptcp: add new parameter \"flowControl\"\n- imrelp: add \"maxDataSize\" config parameter\n  Thanks to Nathan Brown for the patch.\n- multiple modules: gtls: improve error if certificate file can't be opened\n- omsnare: allow different tab escapes\n  Thanks to Shane P. Lawrence for the patch.\n- omelasticsearch: converted to use libfastjson instead of json-c\n  json-c was used for historical purposes, and it's source included\n  within the rsyslog source tree. We now use libfastjson inside all\n  components.\n- imjournal: _PID fallback\n  * added fallback for _PID property when SYSLOG_PID is not available\n  * introduced new option \"usepid\" which sets which property should\n    rsyslog use, it has 3 states system|syslog|both, default is both\n  * deprecated \"usepidfromsystem\" option, still can be used\n    and override the \"usepid\"\n  * it is possible to revert previous default with usepid=\"syslog\"\n  Thanks to Radovan Sroka for the patch\n- multiple modules: add better error messages when regcomp is failing\n- omhiredis: fix build warnings\n  Thanks to Brian Knox for the fix.\n- imfile bugfix: files mv-ed in into directory were not handled\n  Thanks to Zachary M. Zhao for the patch.\n  see also https://github.com/rsyslog/rsyslog/issues/1588\n- omprog bugfix: execve() incorrectly called\n  this caused failures on some but not all platforms\n  Thanks to 張君天(Chun-Tien Chang) and Matthew Seaman for the patch.\n- imfile bugfix: multiline timeout did not work if state file exists\n  The timeout feature for multiline reads does not correctly work for\n  files for which a state file existed. This is usually the case for files\n  that had been processed by a previous run and that still exist on the\n  new start. For all other files, especially those monitored by a\n  wildcard and newly created after the rsyslog start, timeout worked as\n  expected.\n  closes https://github.com/rsyslog/rsyslog/issues/1445\n- lmsig_ksi-ls12 bugfix: build problems on some platforms\n- core bugfix: invalid object type assertion\n  This lead to aborts due to failing assertion. Note that this could only\n  happen during debugging runs which includes runtime instrumentation,\n  something that never should be done in a stable production build.\n  So this did not affect ordinary users, only developers in with\n  deep debugging settings.\n- regression fix: local hostname was not always detected properly...\n  ... on early start (w/o network). Introduced in 8.27.0.\n  Thanks to github user jvymazal for the patch and whissi for\n  reporting and helping with the analysis.\n- bugfix: format security issues in zmq3 modules\n  see also: https://github.com/rsyslog/rsyslog/pull/1565\n  Thanks to Thomas D. (whissi) for the patch.\n- bugfix build system: add libksi only to those binaries that need it\n  Thanks to Allan Park for the patch.\n- bugfix KSI ls12 components: invalid tree height calculation\n  Thanks to Allan Park for the patch.\n- testbench/CI enhancements\n  * re-enable and add kafka tests\n    Kafka tests were disabled in 8.27.0 (a regression from imkafka).\n  * better testbench coverage for mmdblookup\n  * lmsig_ksi-ls12 is now being built at least on Centos7\n------------------------------------------------------------------------------\nVersion 8.27.0 [v8-stable] 2017-05-16\n- imkafka: add module\n- imptcp enhancements:\n  * optionally emit an error message if incoming messages are truncated\n  * optionally emit connection tracking message (on connection create and\n    close)\n  * add \"maxFrameSize\" parameter to specify the maximum size permitted\n    in octet-counted mode\n  * add parameter \"discardTruncatedMsg\" to permit truncation of\n    oversize messages\n  * improve octect-counted mode detection: if the octet count is larger\n    then the set frame size (or overly large in general), it is now\n    assumed that octet-stuffing mode is used. This probably solves a\n    number of issues seen in real deployments.\n- imtcp enhancements:\n  * add parameter \"discardTruncatedMsg\" to permit truncation of\n    oversize messages\n  * add \"maxFrameSize\" parameter to specify the maximum size permitted\n    in octet-counted mode\n- imfile bugfix: \"file not found error\" repeatedly being reported\n  for configured non-existing file. In polling mode, this message\n  appeared once in each polling cycle, causing a potentially very large\n  amount of error messages. Note that they were usually emitted too\n  infrequently to trigger the error message rate limiter, albeit often\n  enough to be a major annoyance.\n- imfile: in inotify mode, add error message if configured file cannot\n  be found\n- imfile: add parameter \"fileNotFoundError\" to optionally disable\n  \"file not found\" error messages\n- core: replaced gethostbyname() with getaddrinfo() call\n  Gethostbyname() is generally considered obsolete, is not reentrant and\n  cannot really work with IPv6. Changed the only place in rsyslog where\n  this call remained.\n  Thanks to github user jvymazal for the patch\n- omkafka: add \"origin\" field to stats output\n  See also https://github.com/rsyslog/rsyslog/issues/1508\n  Thanks to Yury Bushmelev for providing the patch.\n- imuxsock: rate-limiting also uses process name\n  both for the actual limit processing as well as warning messages emitted\n  see also https://github.com/rsyslog/rsyslog/pull/1520\n  Thanks to github user jvymazal for the patch\n- Added new module: KSI log signing ver. 1.2 (lmsig_ksi_ls12)\n- rsyslog base functionality now builds on osx (Mac)\n  Thanks to github user hdatma for his help in getting this done.\n- build now works on solaris again\n- imfile: fix cross-platform build issue\n  see also https://github.com/rsyslog/rsyslog/issues/1494\n  Thanks to Felix Janda for bug report and solution suggestion.\n- bugfix core: segfault when no parser could parse message\n  This could happen if the default parser chain was changed and the\n  RFC3164 parser was not included. Never seen in practice, just by\n  experimenting in lab.\n- bugfix core: rate-limit internal messages when going to external log system\n  Rate-limiting was only applied to messages processed internally.\n  While the external logging system probably also applies rate-limiting,\n  it would be preferable that rsyslog applies the same policies on\n  internal messages, no matter where they go. This is now the case.\n- bugfix core: when obtaining local hostname, a NULL pointer could be\n  accessed. This depends on many factors, among them that no local host\n  name is configured in rsyslog.conf AND the local system configuration\n  also is set to an empty hostname.\n  Thanks to github user jvymazal for the patch.\n- bugfix core: on shutdown, stderr was written to, even if already closed\n  This lead to messages going to whatever was associated with file\n  descriptor two.\n  Thanks to Allan Park for the patch.\n- bugfix core: perform MainqObj destruction only when not NULL already\n  This affects the config object; in theory may lead to misaddressing during\n  config parsing.\n  Thanks to github user jvymazal for the patch\n- bugfix core: memory leak when internal messages not processed internally\n  In this case, the message object is not destructed, resulting in\n  a memory leak. Usually, this is no problem due to the low number\n  of internal message, but it can become an issue if a large number\n  of messages is emitted.\n  closes https://github.com/rsyslog/rsyslog/issues/1548\n  closes https://github.com/rsyslog/rsyslog/issues/1531\n- bugfix imptcp: potential overflow in octet count computation\n  when a very large octet count was specified, the counter could overflow\n------------------------------------------------------------------------------\nVersion 8.26.0 [v8-stable] 2017-04-04\n- NEW BUILD REQUIREMENT: liblognorm 2.0.3 is required for mmnormalize\n  If mmnormalize is not built, the build requirements are unchanged.\n  The new version is necessary because it contains an enhanced API for a\n  new mmnormalize feature.\n- enable internal error messages at all times\n  This is an important change to the design of the rsyslog core internal\n  error message system. Previous code could deadlock if internal messages were\n  issued inside queue processing code, which effectively limited error-reporting\n  capabilities. This change makes it possible to call error messages from any\n  part of the code at any time.\n  As a side-effect, this also fixes an issue where rsyslog could deadlock if\n  imuxsock submited messages to the system log socket when that socket blocked.\n  This was a rare race, albeit consistently reproducible and also seen in\n  practice. The work-around for this issue was to set\n     global(processInternalMessages=\"on\")\n  in rsyslog.conf. With the new code, this race can never happen again. The new\n  code also sets stage for emitting better error messages, especially in places\n  where we previously refrained from doing so and messages went only to the\n  debug log. For some file output and queue subsystem related messages, this\n  is already done, but there is still further work required.\n  Note well: this is a redesign of an important core component. While intensely\n  tested, this may still have some larger regression potential than usual code\n  changes.\n- core: added logging name of source of rate-limited messages\n  This adds the name to the rate-limiting message itself, making it easier\n  to identify the actual source of \"spam\" messages.\n  Thanks to github user jvymazal for the patch.\n- omfwd: omfwd: add support for network namespaces\n  Thanks to Bastian Stender for the patch.\n- imrelp: honor input name if provided when submitting to impstats\n  Thanks to Jon Henry for the patch.\n- imptcp: add ability to set owner/group/access perms for uds\n  Thanks to Nathan Brown for implementing this feature.\n- mmnormalize: add ability to load a rulebase from action() parameter\n  This is especially useful for small rulebases, as it avoids having\n  a separate rulebase file.\n  closes https://github.com/rsyslog/rsyslog/issues/625\n- pmrfc3164 improvements\n  - permit to ignore leading space in MSG\n  - permit to use at-sign in host names\n  - permit to require tag to end in colon\n  Thanks to github user bdolez for the contribution\n- add new global parameter \"umask\"\n  This is equivalent to \"$umask\" and permits to convert that construct\n  to new-style config format.\n  closes https://github.com/rsyslog/rsyslog/issues/1382\n- core: make use of -T command line option more secure\n  When the -T option is used, a chdir is now done right after chroot. It must\n  be noted, though, that -T is a testing option and has no intent to provide\n  real security. So this change does not mean it actually is sufficiently\n  secure.\n  Thanks to github user jvymazal for the patch.\n- omfile: add error if both file and dynafile are set\n- bugfix: build problem on MacOS (not a supported platform)\n  Thanks to FX Coudert for the fix.\n- regression fix: in 8.25, str2num() returned error on empty string\n  past behavior was to return 0 in this case; past behavior was reinstantiated\n  Thanks to github user jvymazal for the patch.\n- bugfix omsnmp: improper handling of new-style configuration parameters\n  Thanks to Radovan Sroka for the patch.\n- bugfix: rsyslog identifies itself as \"liblogging-stdlog\" in internal messages\n  This occurred when liblogging-stdlog was used, and was used by default (without\n  explicit configuration). This is a regression of the new default, which does\n  not correctly call stdlog_open() in the default case.\n  closes https://github.com/rsyslog/rsyslog/issues/1442\n- bugfix imfile: wrong files were monitored when using multiple imfile inputs\n  The bug was introduced by the changes for the multilevel wildcard feature\n  in 8.25.0. We have to handle FileCreate events different if the directory\n  watch is configured or added dynamically.\n  closes https://github.com/rsyslog/rsyslog/issues/1452\n- bugfix: setting net.aclResolveHostname/net.acladdhostnameonfail segfaults\n  When compiling using hardened gcc (gentoo), specifying net.aclResolveHostname\n  or net.acladdhostnameonfail results in rsyslogd segfaulting on startup.\n  Thanks to Radovan Sroka for the patch.\n- bugfix: immark emitted error messages with text \"imuxsock\"\n  Thanks to Chris Pilkington for the patch.\n- bugfix tcpflood: build failed if RELP was disabled\n- fix gcc6 compiler warnings\n  This also fixes a small bug with incorrectly working deprecated -u\n  command line option.\n  Thanks to Nikola Pajkovsky for the patch.\n- the output module array passing interface has been removed\n  It wasn't functional since the v8 update, and the only user was omoracle,\n  which is a contributed module that is no longer maintained. So we\n  removed that interface to streamline the code. Should it ever be needed\n  again, we could check the 8.25 code base. Note, though, that that code\n  still needs to be adjusted to the v8 engine.\n- testbench:\n  * tcpflood now automatically enters silent mode during Travis CI testing\n    This reduces testbench output, which is limited under Travis.\n  * the libqpid-proton package is no longer available for Ubuntu trusty. As\n    such, we disabled its use in Travis on this platform. Right now, this\n    means omamqp1 module is no longer tested on trusty.\n------------------------------------------------------------------------------\nVersion 8.25.0 [v8-stable] 2017-02-21\n- imfile: add support for wildcards in directory names\n  This now permits to monitor newly created directories without altering\n  the configuration.\n- add new global option \"parser.PermitSlashInProgramname\"\n- mmdblookup: fix build issues, code cleanup\n  Thanks to Dan Molik for the patch.\n- improved debug output for queue corruption cases\n- an error message is now displayed when a directory owner cannot be set\n  This mostly happens with omfile and dynafile. The new messages\n  facilitates troubleshooting.\n- rainerscript:\n  * add new function ipv42num\n  * add new function num2ipv4\n- bugfix: ratelimiter does not work correctly is time is set back\n  Thanks to github user hese10 for the patch.\n  see also https://github.com/rsyslog/rsyslog/issues/1354\n- core: fix potential message loss in old-style transactional interface\n  This was experienced for example by omrelp. Could loose one message per\n  broken connection, iff that message did not make it to the unacked list.\n- bugfix queue subsystem: queue corrupted if certain msg props are used\n  The core issues was in the msg object deserializer, which had the wrong\n  deserialization sequence. That in turn lead to queue corruption issues.\n  Corruption of disk queue (or disk part of DA queue) always happens if\n  the \"json\" property (message variables) is present and \"structured-data\"\n  property is also present. This causes rsyslog to serialize to the\n  queue in wrong property sequence, which will lead to error -2308 on\n  deserialization.\n  Seems to be a long-standing bug. Depending on version used, some or\n  all messages in disk queue may be lost.\n  closes https://github.com/rsyslog/rsyslog/issues/1404\n- bugfix imjournal: fixed situation when time goes backwards\n  This is resolving the situation when system is after reboot and\n  boot_id doesn't match so cursor pointing into \"future\".\n  Usually sd_journal_next jump to head of journal due to journal\n  approximation, but when system time goes backwards and cursor is\n  still invalid, rsyslog stops logging.\n  We use sd_journal_get_cursor to validate our cursor.\n  When cursor is invalid we are trying to jump to the head of journal\n  This problem with time should not affect persistent journal,\n  but if cursor has been intentionally compromised it could stop\n  logging even with persistent journal.\n- bugfix: bFlushOnTxEnd == 0 not honored when writing w/o async writer\n  If bFlushOnTXEnd is set, we need to flush on transaction end - in\n  any case. It is not relevant if this is using background writes\n  (which then become pretty slow) or not. And, similarly, no flush\n  happens when it is not set.\n  see also https://github.com/rsyslog/rsyslog/issues/1297\n- bugfix core: str2num mishandling empty strings\n  If str2num() receives an empty string, misaddressing happens.\n  This theoretically can lead to a segfault if a RainerScript function\n  is used inside the configuration which calls code that could trigger\n  this bug.\n  closes https://github.com/rsyslog/rsyslog/issues/1412\n- bugfix rainerscript: set/unset statement do not check variable name validity\n  Only JSON-based variables can be use with set and unset. Unfortunately,\n  this restriction is not checked. If an invalid variable is given\n  (e.g. $invalid), this is not detected upon config processing on\n  startup. During execution phase, this can lead to a segfault, a\n  memory leak or other types of problems.\n  Thanks to github user mostolog for reporting and helping to analyze\n  this issue.\n  see also https://github.com/rsyslog/rsyslog/issues/1376\n  closes https://github.com/rsyslog/rsyslog/issues/1377\n- bugfix mmrm1stspace: last character of rawmsg property was doubled\n- bugfix: rsyslog loops on freebsd when trying to write /dev/console\n  Rsyslog 8.23.0 loops on FreeBSD when trying to access a (now revoked)\n  /dev/console file descriptor, as per Alexandre's original bug report [1].\n  The original patch fixes the problem when tryTTYRecover() sees errno 6 ENXIO.\n  Running FreeBSD 10-stable here and getting errno 5 EIO, same as Xavier gets\n  in his 2016 bug report [2].\n  New patch [3] includes errno 5 to tryTTYRecover() in runtime/stream.c and\n  fixes the problem for me, on multiple machines.\n  [1] https://github.com/rsyslog/rsyslog/issues/371\n  [2] https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=211033\n  [3] https://bz-attachments.freebsd.org/attachment.cgi?id=178452\n  closes https://github.com/rsyslog/rsyslog/issues/1351\n  Thanks to Damien Fleuriot for the patch.\n- bugfix imtcp: fix very small (cosmetic) memory leak\n  For each listener, the name of an assigned ruleset is not freed. This\n  is cosmetic, because it is a very small static leak AND it needs to\n  be kept until end of run anyways (and at end of run the OS frees it).\n  However, the leak breaks memleak checks in the testbench.\n- fix build issues on some platforms (detected on newer Fedora)\n------------------------------------------------------------------------------\nVersion 8.24.0 [v8-stable] 2017-01-10\n- rsyslog now builds on AIX\n  see also: https://github.com/rsyslog/rsyslog/pull/1247\n  Thanks to github user purnimam1 and the team at IBM\n  Note: the rsyslog project has no AIX platform to ensure that future versions\n  will remain buildable on AIX. If you would like to contribute resources,\n  please contact the rsyslog team.\n- mmdblookup: new maxminddb lookup message modify plugin\n  Thanks to 饶琛琳 (github user chenryn) for the contribution\n- mmrm1stspace: new module; removes first space in MSG if present\n- KSI signature provider: file permissions can now be specified\n  This happens via parameters equal to those used by omfile itself.\n  Note that KSI files can have different permissions/owner than the log\n  files themself.\n  Thanks to Allan Park for the patch.\n- omzmq: new features\n  Thanks to Brian Knox for the patch.\n- change: when the hostname is empty, we now use \"localhost-empty-hostname\"\n  In 8.23.0, \"localhost\" was used in this case, but that could be misleading.\n  The new name makes the error condition (gethostname() should always return\n  a non-empty name) more obvious.\n- omelasticsearch: remove \"asyncrepl\" config parameter\n  The _bulk index endpoint on ElasticSearch 5.0 no longer\n  ignores the ?replication=async query parameter. It was deprecated\n  since 1.5 and silently ignored in 2.x but passing it to a 5.x\n  instance breaks omelasticsearch with a 400 response.\n  closes https://github.com/rsyslog/rsyslog/issues/1250\n- omfwd: Add support for bind-to-device (see below on same for imudp)\n- imudp: Add support for bind-to-device\n  Add support for bind-to-device option to omfwd and imudp modules.\n  Configured using device=\"name\". Only new syntax format is supported.\n  e.g.,\n  input(type=\"imudp\" port=[\"10514\"] device=\"eth0\" name=\"udp\")\n  Action(type=\"omfwd\" Target=\"192.168.1.23\" Port=\"10514\" Device=\"eth0\")\n  see also https://github.com/rsyslog/rsyslog/pull/1261\n  Thanks to David Ahern for the patch.\n- imudp: limit rcvbufsize parameter to max 1GiB\n- rainerscript: implement new \"call_indirect\" statement\n- bugfix imjournal: make state file handling more robust\n  There is a bug in rsyslog which is caused by not very atomic writes of\n  imjournal statefile. It's hardly reproducible but there is a way.\n  fscanf error appears only when rsyslog reads an empty statefile which\n  causes that imjournal is stopped so no logging from journal is\n  performed. When the statefile contains random bytes error appears\n  again but from journal and imjournal is stopped too.\n  In this patch Rsyslog writes imjournal statefile more atomically and\n  secure. Reading the statefile is more robust and doesn't affect\n  imjournal module so when corrupted statefile is read imjournal\n  ignores statefile, continues with logging and it doesn't stop. Logger\n  can be used as a test if it's logging or not.\n  Patch introduces a new option with both old and new config format\n  \"IgnoreNonValidStateFile\" which is \"on\" by default and it can turn\n  off ignorance of non valid statefile.\n  Thanks to github user tomassykora for the patch.\n- bugfix core: lookup table reload was not properly integrated\n  The opcode was not handled, what lead to misleading messages\n  in debug log. Since we run debug builds more strictly, it also\n  causes an assertion to trigger, thus aborting the test\n- bugfix core: potential deadlock on shutdown\n  could happen when rsyslog was started and quickly shut down OR when\n  coincidentally a new thread was spawend \"with bad timing\" around the time\n  of shutdown.\n  See also https://github.com/rsyslog/rsyslog/pull/1274\n  Thanks to github user tomassykora for the final patch and Rado Sroka for\n  the analysis and an initial patch.\n- bugfix ommongodb: did not work in v8 due to invalid indirection\n  Thanks to Benoit Dolez for the patch.\n- bugfix ommongodb: fix tryResume handling\n  To make tryResume working, the connection to mongodb need to be closed.\n  Thus close it on \"insert error\".\n  Thanks to Benoit Dolez for the patch.\n- bugfix omfwd: retry processing was not done correctly, could stall\n  see also https://github.com/rsyslog/rsyslog/pull/1261\n  Thanks to David Ahern for the patch.\n- bugfix imuxsock: segfault non shutdown when $OmitLocalLogging is on\n  Imuxsock tries to close socket on index 0 which ends with segfault.\n  Thanks to Tomas Sykora for the patch.\n- testbench:\n  * empty-hostname test did not work correctly\n  * improve debugging by better output\n------------------------------------------------------------------------------\nVersion 8.23.0 [v8-stable] 2016-11-15\n- NEW BUILD REQUIREMENT: libfastjson 0.99.3\n  This was introduced in 8.20.0 as a suggestion and has now become a hard\n  requirement. See 8.20.0 ChangeLog entry for more details.\n- KSI signatures: removed SHA2-224 hash algorithm\n  This is considered insecure and no longer supported by the underlying\n  KSI library. If still used within a configuration, a descriptive error\n  message is emitted during config processing.\n  Thanks to Henri Lakk for the initial patch.\n- imfile: new timeout feature for multi-line reads\n  When using startmsg.regex, messages are held until the next one is written.\n  We now provide a \"readTimeout\" parameter family (see doc) to timeout such\n  reads and ensure messages are not held for a very long time.\n  see also https://github.com/rsyslog/rsyslog/issues/1133\n- omfile: improve robustness against network file system failures\n  in case of failure, a close and re-open is tried, which often solves the\n  issue (and wasn't handle before this patch).\n  see also https://github.com/rsyslog/rsyslog/pull/1161\n  Thanks to github user hese10 for the patch.\n- pmaixforwardedfrom: support for AIX syslogd -s option\n  if syslog in AIX started with \"-s\" option, AIX syslog adds only \"From \"\n  instead of \"Message forwarded from \". With this patch, both are now\n  detected.\n  Thanks to github user patelritesh for the patch.\n- omelasticsearch: add ability to specify max http request size\n  This permits to keep batches below ES-configured limits.\n  Thanks to github user barakshechter for the patch.\n- omelasticsearch: high availability addressing of ElasticSearch cluster\n  allow one to specify an array of servers, which is tried until a working\n  one is found (and given up only if none works).\n  Thanks to github user barakshechter for the patch.\n- omelasticsearch: make compatible with ElasticSearch 2.x and 5.x\n  fixes omelasticsearch logs response from ElasticSearch 5.0 _bulk\n  endpoint as error\n  See also https://github.com/rsyslog/rsyslog/pull/1253\n  Thanks to Christian Rodemeyer for the patch.\n- omhiredis: add dynakey attribute.\n  If set to on, this causes omhiredis to treat the key attribute as the\n  name of a template so that you can build a dynamic redis queue name\n  or list key.\n  see also: https://github.com/rsyslog/rsyslog/pull/1218\n  Thanks to github user bobthemighty for the patch\n- omtcl: new contributed module\n  see also https://github.com/rsyslog/rsyslog/pull/1041\n  Please note: contributed modules are not directly supported by the \n  project. You might want to contact the author for questions.\n  Thanks to Francisco Castro for contributing it.\n- RainerScript: provide a capability to set environment variables\n  via 'global(environment=\"var=val\")' config statement.\n  This is most importantly for things like HTTP_PROXY.\n  see also https://github.com/rsyslog/rsyslog/issues/1209\n- lookup tables: improved error checking\n  Thanks to Janmejay Singh for the patch.\n- queue subsystem: add configuration parameter \"queue.samplinginterval\"\n  Supports sampling of messages (as often used in data transmission).\n  Thanks to Zachary M. Zhao for the patch.\n- bugfix core: errmsg.LogError now switches to dfltErrLogger just before shutdown\n  Thanks to Janmejay Singh for the patches.\n- bugfix core: fixed un-freed memory in non-transactional action using string-passing\n  closes https://github.com/rsyslog/rsyslog/issues/968\n  Thanks to Janmejay Singh for the patches.\n- rsgtutil: option to specify KSI publications file certificate constraints\n  see also https://github.com/rsyslog/rsyslog/issues/1207\n- omprog: bugfixes and enhancements\n  - omprog resource leak fix (fd leak)\n  - omprog got ability to force-kill process if it doesn't die in 5 seconds\n    (linux specific)\n  - child-process lifecycle debugging aid (in form of logs) (mainLoop and\n    omprog cleanup both log pid at child-death, mainLoop reaping is now\n    visible to user, as opposed to being a mystery, because omprog didn't\n    seem to anticipate it in terms of code)\n  Thanks to Janmejay Singh for the patches.\n  see also https://github.com/rsyslog/rsyslog/pull/1155\n- bugfix imfile: ReopenOnTruncate processing, file open processing\n  This fixes\n   * ReopenOnTruncate was only honored when a state file existed\n      see https://github.com/rsyslog/rsyslog/issues/1090\n    * open processing could run into a loop\n      see https://github.com/rsyslog/rsyslog/issues/1174\n  This is done via refactoring the open file handling, which provides\n  overall cleaner and easier-to-follow code.\n  Thanks to Owen Smith for analyzing the problem and providing a\n  prototype PR which greatly helped towards the final solution.\n- bugfix omlibdbi: libdbi-driver-sqlite3/2 requires to provide a path to\n  database split into two strings:\n  * absolute path, where the database file sits\n  * database filename itself.\n  This was previously not done.\n  Thanks to github user aleek for the patch.\n- bugfix RainerScript: issue in prifilt() function\n  Initialize func-data(and to-be-freed flag) correctly for prifilt\n  function-node\n  Thanks to Janmejay Singh for the patch.\n- bugfix omrelp: invalid module name imrelp was used in some error messages\n  Thanks to Chris Pilkington for the patch.\n- bugfix core: abort when persisting object state\n  This causes a segfault. It happens whenever an object state larger\n  than 4095 byte is persisted. Then, incorrectly a try to rollover to\n  a new state file is tried, which will lead to a division by zero\n  as the necessary variables for this operation are not set because we\n  are NOT in circular mode.\n  This problem can happen wherever state files are written. It has been\n  experienced with imfile and queue files.\n  Many thanks to github user mostolog for his help in reproducing the issue,\n  which was very important to finally nail down this long-standing bug.\n  closes https://github.com/rsyslog/rsyslog/issues/1239\n  closes https://github.com/rsyslog/rsyslog/issues/1162\n  closes https://github.com/rsyslog/rsyslog/issues/1074\n- bugfix: segfault if hostname is unset on system\n  happens when gethostname() returns empty string. This will cause\n  the createon of the localhostname prop_t to fail, which in turn\n  leads to a NULL pointer dereference when emitting local messages.\n  As we emit a startup message by default, this had usually lead\n  to a segfault on startup.\n  Thanks to Erik Potter and github user mostolog for their help\n  in analyzing this problem.\n  closes https://github.com/rsyslog/rsyslog/issues/1040\n  closes https://github.com/rsyslog/rsyslog/issues/335\n- bugfix external module perl skeleton: did not work properly\n  Thanks to github user Igorjan666 for the patch.\n- bugfix build system: Fix detection of pthread_setschedparam() on platforms\n  such as FreeBSD\n  see also https://github.com/rsyslog/rsyslog/pull/1147\n  Thanks to Matthew Seaman for the patch.\n- bugfix omelasticsearch: modifies constant memory under some circumstances\n  Function computeBaseUrl may modify its serverParam parameter, but\n  this may contain the constant string \"localhost\". Depending on the\n  platform, this can lead to a segfault.\n  Noticed while working on compiler warnings, not seen in practice.\n- \"bugfix\": theoretical queue file corruption when more than MAX_INT files\n  closes https://github.com/rsyslog/rsyslog/issues/1202\n- bug fix/KSI: LOGSIG11 missing in the beginning of KSI log signature file\n  When logging with KSI is not working properly for whatever reason, an\n  empty .ksisig file is created (which by itself is not an issue). However,\n  later it looks like this file is re-used, but it is not checked whether it\n  already contains the magic LOGSIG11 in the beginning of the file. This leads\n  to a log signature file which has correct content but is missing the\n  LOGSIG11 magic in the beginning.\n- bugfix template processor: missing escaping of backslash in json mode\n  Thanks to github user mostolog for providing the patch.\n- build environment: --enable-debug now defaults to new \"auto\" mode\n  previously, DEBUG mode (and thus assert() macros) was disabled by default\n  and explicitly needed to be enabled by providing the --enable-debug\n  ./configure switch. Now, a new --enable-debug=auto mode has been added\n  and made the default. It enables DEBUG mode if we build from git and only\n  disables it when a release build is done (from the release tarball). This\n  aims at better error checking during testbench runs and developer testing.\n- testbench improvements\n  * improved testbench file generation tool\n    Thanks to Pascal Withopf for the patch.\n  * added some plumbing for extended tests which work by overriding OS APIs\n  * imfile ReopenOnTruncate option is now being tested\n  * the CI environment now runs most tests in debug mode, but some in\n    release mode to cover potential release-mode races\n  * template json option is now being tested\n  * object state persisting received a basic test\n  * added test for empty hostnames\n  * added tests for omprog\n------------------------------------------------------------------------------\nVersion 8.22.0 [v8-stable] 2016-10-04\n- ompgsql: add template support\n  Thanks to Radu Gheorghe for implementing this.\n- generate somewhat better error message on config file syntax error\n  a common case (object at invalid location) has received it's own error\n  message; for the rest we still rely on the generic flex/bison handler\n- bugfix:omhiredis reconnects after failure\n  previously it could loose messages under such conditions.\n  Thanks to Bob Gregory for the patch.\n- general cleanup and code improvement\n  mostly guided by compiler warnings induced by newer opensuse buildbot\n  environment\n------------------------------------------------------------------------------\nVersion 8.21.0 [v8-stable] 2016-08-23\n- CHANGE OF BEHAVIOR:\n  by default, internal messages are no longer logged via the internal\n  bridge to rsyslog but via the syslog() API call [either directly or\n  via liblogging). For the typical single-rsyslogd-instance installation this\n  is mostly unnoticeable (except for some additional latency). If multiple\n  instances are run, only the \"main\" (the one processing system log messages)\n  will see all messages. To return to the old behavior, do either of those\n  two:\n  1) add in rsyslog.conf:\n     global(processInternalMessages=\"on\")\n  2) export the environment variable RSYSLOG_DFLT_LOG_INTERNAL=1 \n     This will set a new default - the value can still be overwritten via\n     rsyslog.conf (method 1). Note that the environment variable must be\n     set in your **startup script**.\n  For more information, please visit\n  https://www.rsyslog.com/rsyslog-error-reporting-improved/\n- slightly improved TLS syslog error messages\n- queue subsystem: improved robustness\n  The .qi file is now persisted whenever an existing queue file is fully\n  written and a new file is begun. This helps with rsyslog aborts, including\n  the common case where the OS issues kill -9 because of insufficiently\n  configured termination timeout (this is an OS config error, but a frequent\n  one). Also, a situation where an orphaned empty file could be left in the\n  queue work directory has been fixed. We expect that this change causes\n  fewer permanent queue failures.\n- bugfix: build failed on some platforms due to missing include files\n------------------------------------------------------------------------------\nVersion 8.20.0 [v8-stable] 2016-07-12\n- NEW BUILD REQUIREMENT: librelp, was 1.2.5, now is 1.2.12\n  This is only needed if --enable-relp is used. The new version is needed\n  to support the new timeout parameter in omrelp.\n- NEW BUILD SUGGESTION: libfastjson 0.99.3\n  while not strictly necessary, previous versions of libfastjson have a bug\n  in unicode processing that can result in non US-ASCII characters to be\n  improperly encoded and may (very unlikely) also cause a segfault.\n  This version will become mandatory in rsyslog 8.23.0\n- omrelp: add configurable connection timeout\n  Thanks to Nathan Brown for implementing this feature.\n- pmrfc3164: add support for slashes in hostname\n  added parameter \"permit.slashesinhostname\" to support this, off by default\n  [Note that the RFC5424 always supported this, as 5424 is a different\n  standard]\n- bugfix omfile: handle chown() failure correctly\n  If the file creation succeeds, but chown() failed, the file was\n  still writen, even if the user requested that this should be treated\n  as a failure case. This is corrected now.\n  Also, some refactoring was done to create better error messages.\n- omfile now better conveys status of unwritable files back to core\n- config files recursively including themselves are now detected\n  and an error message is emitted in that case; Previously, this\n  misconfiguration resulted in rsyslog loop and abort during startup.\n  closes https://github.com/rsyslog/rsyslog/issues/1058\n- refactored code to not emit compiler warnings in \"strict mode\"\n  We changed the compiler warning settings to be rather strict and cleaned up\n  the code to work without generating any warning messages.\n  This results in an overall even more improved code quality, which will now\n  also be enforced via our CI systems.\n- bugfix: fix some issues with action CommitTransaction() handling\n  An action that returns an error from CommitTransaction() caused a\n  loop in rsyslog action processing. Similarly, retry processing was not\n  properly handled in regard to CommitTransaction().\n  This is a first shot at fixing the situation. It solves the\n  immediate problems, but does not implement the full desired\n  functionality (like error file).\n  see also https://github.com/rsyslog/rsyslog/issues/974\n  see also https://github.com/rsyslog/rsyslog/issues/500\n- bugfix omqmqp1: connecting to the message bus fails on nonstandard port\n  Thanks to Ken Giusti for the patch.\n  see also: https://github.com/rsyslog/rsyslog/pull/1064\n- testbench/CI enhancements\n  * new tests for RELP components\n  * new tests for core action processing and retry\n  * travis tests now also run against all unstable versions of supporting\n    libraries. This helps to track interdependency problems early.\n  * new tests for hostname parsing\n  * new tests for RainerScript comparisons\n------------------------------------------------------------------------------\nVersion 8.19.0 [v8-stable] 2016-05-31\n- NEW BUILD REQUIREMENT: autoconf-archive\n- omelasticsearch: add option to permit unsigned certs (experimentally)\n  This adds plumbing as suggested by Joerg Heinemann and Radu Gheorghe,\n  but is otherwise untested. Chances are good it works. If you use it,\n  please let us know your experience and most importantly any bug\n  reports you may have.\n  closes https://github.com/rsyslog/rsyslog/issues/89\n- imrelp: better error codes on unavailability of TLS options\n  Most importantly, we will tell the user in clear words if specific TLS\n  options are not available due to too-old GnuTLS.\n  closes https://github.com/rsyslog/rsyslog/issues/1019\n- default stack size for inputs has been explicitly set to 4MiB\n  for most platforms, this means a reduction from the default of 10MiB, however\n  it may mean an increase for micro-libc's (some may have as low as 80KiB by\n  default).\n- testbench: We are now using libfaketime instead of faketime command line\n  tool. Make sure you have installed the library and not just the binary!\n- refactor stringbuf\n  * use only a single string buffer\n    ... both for the internal representation as well as the C-String one.\n    The module originally tried to support embedded NUL characters, which\n    over time has proven to be not necessary. Rsyslog always encodes\n    NUL into escape sequences.\n    Also, the dual buffers were used inconsistently, which could lead to\n    subtle bugs. With the single buffer, this does no longer happen and\n    we also get some improved performance (should be noticeable)\n    and reduced memory use (a bit).\n    closes https://github.com/rsyslog/rsyslog/issues/1033\n  * removed no longer used code\n  * internal API changes to reflect new needs\n  * performance improvements\n  * miscellaneous minor cleanup\n- fix: potential misaddressing in template config processing\n  This could cause segfault on startup. Happens when template name shorter\n  than two chars and outname is not set. Once we are over startup, things\n  work reliably.\n- bugfix omfile: async output file writing does not respect flushing\n  neither parameter flushInterval nor flushOnTXEnd=\"on\" was respected.\n  closes https://github.com/rsyslog/rsyslog/issues/1054\n- bugfix imfile: corrupted multi-line message when state data was persisted\n  see also https://github.com/rsyslog/rsyslog/issues/874\n  Thanks to Magnus Hyllander for the analysis and a patch suggestion.\n- bugfix imfile: missing newline after first line of multiline message\n  see also https://github.com/rsyslog/rsyslog/issues/843\n  Thanks to Magnus Hyllander for the patch.\n- bugfix: dynstats unusedMetricTtl bug\n  Thanks to Janmejay Singh for fixing this.\n- bugfix build system: build was broken on SunOS\n  Thanks to Filip Hajny for the patch.\n- bugfix: afterRun entry point not correctly called\n  The entry point was called at the wrong spot, only when the thread\n  had not already terminated by itself. This could cause various\n  cleanup to not be done. This affected e.g. imjournal.\n  closes https://github.com/rsyslog/rsyslog/issues/882\n- bugfix dynstats: do not leak file handles\n  Thanks to Janmejay Singh for the patch.\n- bugfix omelasticsearch: disable libCURL signal handling\n  previously, this could lead to segfaults on connection timeout\n  see also https://github.com/rsyslog/rsyslog/pull/1007\n  Thanks to Sai Ke WANG for the patch.\n- bugfix omelasticsearch: some regressions were fixed\n  * error file was no longer written\n  * fix for some potential misaddressings\n- improved wording: gnutls error message points to potential cause\n  What GnutTLS returns us is very unspecific and somewhat misleading, so\n  we point to what it most probably is (broken connect).\n  see also https://github.com/rsyslog/rsyslog/issues/846\n- some general code improvements\n  * \"fixed\" cosmetic memory leaks at shutdown\n- build system bugfix: configure can't find gss_acquire_cred on Solaris\n  Thanks to github user vlmarek for the patch.\n- improvements to the CI environment\n  * improvements on the non-raciness of some tests\n  * imdiag: avoid races in detecting queue empty status\n    This resolves cases where the testbench terminated rsyslog too early,\n    resulting in potential message loss and test failure.\n  * omkafka has now dynamic tests\n    Thanks to Janmejay Singh for implementing them.\n  * try to merge PR to master and run tests; this guards against cross-PR\n    regressions and wasn't caught previously. Note that we skip this test\n    if we cannot successfully merge. So this is not a replacement for a\n    daily full \"all-project integration test run\".\n  * travis has finally enabled elasticsearch tests\n    ES was unfortunately not being regularly tested for quite a while due to\n    missing environment. This lead to some regressions becoming undetected.\n    These were now discovered thanks to the new support on travis. Also, this\n    guards against future regressions.\n  * imfile has now additional tests and overall better coverage\n  * omfile has now additional tests\n------------------------------------------------------------------------------\nVersion 8.18.0 [v8-stable] 2016-04-19\n- testbench: When running privdrop tests testbench tries to drop\n  user to \"rsyslog\", \"syslog\" or \"daemon\" when running as root and\n  you don't explicit set RSYSLOG_TESTUSER environment variable.\n  Make sure the unprivileged testuser can write into tests/ dir!\n- templates: add option to convert timestamps to UTC\n  closes https://github.com/rsyslog/rsyslog/issues/730\n- omjournal: fix segfault (regression in 8.17.0)\n- imptcp: added AF_UNIX support\n  Thanks to Nathan Brown for implementing this feature.\n- new template options\n  * compressSpace\n  * date-utc\n- redis: support for authentication\n  Thanks to Manohar Ht for the patch\n- omkafka: makes kafka-producer on-HUP restart optional \n  As of now, omkafka kills and re-creates kafka-producer on HUP. This\n  is not always desirable. This change introduces an action param\n  (reopenOnHup=\"on|off\") which allows user to control re-cycling of\n  kafka-producer.\n  It defaults to on (for backward compatibility). Off allows user to\n  ignore HUP as far as kafka-producer is concerned.\n  Thanks to Janmejay Singh for implementing this feature\n- imfile: new \"FreshStartTail\" input parameter\n  Thanks to Curu Wong for implementing this.\n- omjournal: fix libfastjson API issues\n  This module accessed private data members of libfastjson\n- ommongodb: fix json API issues\n  This module accessed private data members of libfastjson\n- testbench improvements (more tests and more thorough tests)\n  among others:\n  - tests for omjournal added\n  - tests for KSI subsystem\n  - tests for privilege drop statements\n  - basic test for RELP with TLS\n  - some previously disabled tests have been re-enabled\n- dynamic stats subsystem: a couple of smaller changes\n  they also involve the format, which is slightly incompatible to\n  previous version. As this was out only very recently (last version),\n  we considered this as acceptable.\n  Thanks to Janmejay Singh for developing this.\n- foreach loop: now also iterates over objects (not just arrays)\n  Thanks to Janmejay Singh for developing this.\n- improvements to the CI environment\n- enhancement: queue subsystem is more robst in regard to some corruptions\n  It is now detected if a .qi file states that the queue contains more\n  records than there are actually inside the queue files. Previously this\n  resulted in an emergency switch to direct mode, now the problem is only\n  reported but processing continues.\n- enhancement: Allow rsyslog to bind UDP ports even w/out specific\n  interface being up at the moment.\n  Alternatively, rsyslog could be ordered after networking, however,\n  that might have some negative side effects. Also IP_FREEBIND is\n  recommended by systemd documentation.\n  Thanks to Nirmoy Das and Marius Tomaschewski for the patch.\n- cleanup: removed no longer needed json-c compatibility layer\n  as we now always use libfastjson, we do not need to support old\n  versions of json-c (libfastjson was based on the newest json-c\n  version at the time of the fork, which is the newest in regard\n  to the compatibility layer)\n- new External plugin for sending metrics to SPM Monitoring SaaS\n  Thanks to Radu Gheorghe for the patch.\n- bugfix imfile: fix memory corruption bug when appending @cee\n  Thanks to Brian Knox for the patch.\n- bugfix: memory misallocation if position.from and position.to is used\n  a negative amount of memory is tried to be allocated if position.from\n  is smaller than the buffer size (at least with json variables). This\n  usually leads to a segfault.\n  closes https://github.com/rsyslog/rsyslog/issues/915\n- bugfix: fix potential memleak in TCP allowed sender definition\n  depending on circumstances, a very small leak could happen on each\n  HUP. This was caused by an invalid macro definition which did not rule\n  out side effects.\n- bugfix: $PrivDropToGroupID actually did a name lookup\n  ... instead of using the provided ID\n- bugfix: small memory leak in imfile\n  Thanks to Tomas Heinrich for the patch.\n- bugfix: double free in jsonmesg template\n  There has to be actual json data in the message (from mmjsonparse,\n  mmnormalize, imjournal, ...) to trigger the crash.\n  Thanks to Tomas Heinrich for the patch.\n- bugfix: incorrect formatting of stats when CEE/Json format is used\n  This lead to ill-formed json being generated\n- bugfix omfwd: new-style keepalive action parameters did not work \n  due to being inconsistently spelled inside the code. Note that legacy\n  parameters $keepalive... always worked\n  see also: https://github.com/rsyslog/rsyslog/issues/916\n  Thanks to Devin Christensen for alerting us and an analysis of the\n  root cause.\n- bugfix: memory leaks in logctl utility\n  Detected by clang static analyzer. Note that these leaks CAN happen in\n  practice and may even be pretty large. This was probably never detected\n  because the tool is not often used.\n- bugfix omrelp: fix segfault if no port action parameter was given\n  closes https://github.com/rsyslog/rsyslog/issues/911\n- bugfix imtcp: Messages not terminated by a NL were discarded \n  ... upon connection termination.\n  Thanks to Tomas Heinrich for the patch.\n------------------------------------------------------------------------------\nVersion 8.17.0 [v8-stable] 2016-03-08\n- NEW REQUIREMENT: libfastjson\n  see also:\n  http://blog.gerhards.net/2015/12/rsyslog-and-liblognorm-will-switch-to.html\n- new testbench requirement: faketime command line tool\n  This is used to generate a controlled environment for time-based tests; if\n  not available, tests will gracefully be skipped.\n- improve json variable performance\n  We use libfastjson's alternative hash function, which has been\n  proven to be much faster than the default one (which stems\n  back to libjson-c). This should bring an overall performance\n  improvement for all operations involving variable processing.\n  closes https://github.com/rsyslog/rsyslog/issues/848\n- new experimental feature: lookup table support\n  Note that at this time, this is an experimental feature which is not yet\n  fully supported by the rsyslog team. It is introduced in order to gain\n  more feedback and to make it available as early as possible because many\n  people consider it useful.\n  Thanks to Janmejay Singh for implementing this feature\n- new feature: dynamic statistics counters\n  which may be changed during rule processing\n  Thanks to Janmejay Singh for suggesting and implementing this feature\n- new contributed plugin: omamqp1 for AMQP 1.0-compliant brokers\n  Thanks to Ken Giusti for this module\n- new set of UTC-based $now family of variables ($now-utc, $year-utc, ...)\n- simplified locking when accessing message and local variables\n  this simplifies the code and slightly increases performance if such\n  variables are heavily accessed.\n- new global parameter \"debug.unloadModules\"\n  This permits to disable unloading of modules, e.g.  to make valgrind\n  reports more useful (without a need to recompile).\n- timestamp handling: guard against invalid dates\n  We do not permit dates outside of the year 1970..2100\n  interval. Note that network-receivers do already guard\n  against this, so the new guard only guards against invalid\n  system time.\n- imfile: add \"trimlineoverbytes\" input parameter\n  Thanks to github user JindongChen for the patch.\n- ommongodb: add support for extended json format for dates\n  Thanks to Florian Bücklers for the patch.\n- omjournal: add support for templates\n  see also: https://github.com/rsyslog/rsyslog/pull/770\n  Thanks to github user bobthemighty for the patch\n- imuxsock: add \"ruleset\" input parameter\n- testbench: framework improvement: configs can be included in test file\n  they do no longer need to be in a separate file, which saves a bit\n  of work when working with them. This is supported for simple tests with\n  a single running rsyslog instance\n  Thanks to Janmejay Singh for inspiring me with a similar method in\n  liblognorm testbench.\n- imptcp: performance improvements\n  Thanks to Janmejay Singh for implementing this improvement\n- made build compile (almost) without warnings\n  still some warnings are suppressed where this is currently required\n- improve interface definition in some modules, e.g. mmanon, mmsequence\n  This is more an internal cleanup and should have no actual affect to\n  the end user.\n- solaris build: MAXHOSTNAMELEN properly detected\n- build system improvement: ability to detect old hiredis libs\n  This permits to automatically build omhiredis on systems where the\n  hiredis libs do not provide a pkgconfig file. Previously, this\n  required manual configuration.\n  Thanks to github user jaymell for the patch.\n- rsgtutil: dump mode improvements\n  * auto-detect signature file type\n  * ability to dump hash chains for log extraction files\n- build system: fix build issues with clang\n  clang builds often failed with a missing external symbol\n  \"rpl_malloc\". This was caused by checks in configure.ac,\n  which checked for specific GNU semantics. As we do not need\n  them (we never ask malloc for zero bytes), we can safely\n  remove the macros.\n  Note that we routinely run clang static analyzer in CI and\n  it also detects such calls as invalid.\n  closes https://github.com/rsyslog/rsyslog/issues/834\n- bugfix: unixtimestamp date format was incorrectly computed\n  The problem happened in leap year from March til then end\n  of year and healed itself at the beginning of the next year.\n  During the problem period, the timestamp was 24 hours too low.\n  fixes https://github.com/rsyslog/rsyslog/issues/830\n- bugfix: date-ordinal date format was incorrectly computed\n  same root cause aus for unixtimestamp and same triggering\n  condition. During the affected perido, the ordinal was one\n  too less.\n- bugfix: some race when shutting down input module threads\n  this had little, if at all, effect on real deployments as it resulted\n  in a small leak right before rsyslog termination. However, it caused\n  trouble with the testbench (and other QA tools).\n  Thanks to Peter Portante for the patch and both Peter and Janmejay\n  Singh for helping to analyze what was going on.\n- bugfix tcpflood: did not handle connection drops correct in TLS case\n  note that tcpflood is a testbench too. The bug caused some testbench\n  instability, but had no effect on deployments.\n- bugfix: abort if global parameter value was wrong \n  If so, the abort happened during startup. Once started,\n  all was stable.\n- bugfix omkafka: fix potential NULL pointer addressing\n  this happened when the topic cache was full and an entry\n  needed to be evicted\n- bugfix impstats: @cee cookie was prefixed to wrong format (json vs. cee)\n  Thanks to Volker Fröhlich for the fix.\n- bugfix imfile: fix race during startup that could lead to some duplication\n  If a to-be-monitored file was created after inotify was initialized\n  but before startup was completed, the first chunk of data from this\n  file could be duplicated. This should have happened very rarely in\n  practice, but caused occasional testbench failures.\n  see also: https://github.com/rsyslog/rsyslog/issues/791\n- bugfix: potential loss of single message at queue shutdown\n  see also: https://github.com/rsyslog/rsyslog/issues/262\n- bugfix: potential deadlock with heavy variable access\n  When making heavy use of global, local and message variables, a deadlock\n  could occur. While it is extremely unlikely to happen, we have at least\n  seen one incarnation of this problem in practice.\n- bugfix ommysql: on some platforms, serverport parameter had no effect\n  This was caused by an invalid code sequence which's outcome depends on\n  compiler settings.\n- bugfix omelasticsearch: invalid pointer dereference\n  The actual practical impact is not clear. This came up when working\n  on compiler warnings.\n  Thanks to David Lang for the patch.\n- bugfix omhiredis: serverport config parameter did not reliably work\n  depended on environment/compiler used to build\n- bugfix rsgtutil: -h command line option did not work\n  Thanks to Henri Lakk for the patch.\n- bugfix lexer: hex numbers were not properly represented\n  see: https://github.com/rsyslog/rsyslog/pull/771\n  Thanks to Sam Hanes for the patch.\n- bugfix TLS syslog: intermittent errors while sending data\n  Regression from commit 1394e0b. A symptom often seen was the message\n  \"unexpected GnuTLS error -50 in nsd_gtls.c:530\"\n- bugfix imfile: abort on startup if no slash was present in file name param\n  Thanks to Brian Knox for the patch.\n- bugfix rsgtutil: fixed abort when using short command line options\n  Thanks to Henri Lakk \n- bugfix rsgtutil: invalid computation of log record extraction file\n  This caused verification to fail because the hash chain was actually\n  incorrect. Depended on the input data set.\n  closes https://github.com/rsyslog/rsyslog/issues/832\n- bugfix build system: KSI components could only be build if in default path\n------------------------------------------------------------------------------\nVersion 8.16.0 [v8-stable] 2016-01-26\n- rsgtutil: Added extraction support including loglines and hash chains. \n  More details on how to extract loglines can be found in the rsgtutil\n  manpage. See also: https://github.com/rsyslog/rsyslog/issues/561   \n- clean up doAction output module interface\n  We started with char * pointers, but used different types of pointers\n  over time. This lead to alignment warnings. In practice, I think this\n  should never cause any problems (at least there have been no reports\n  in the 7 or so years we do this), but it is not clean. The interface is\n  now cleaned up. We do this in a way that does not require modifications\n  to modules that just use string parameters. For those with message\n  parameters, have a look at e.g. mmutf8fix to see how easy the\n  required change is.\n- new system properties for $NOW properties based on UTC\n  This permits to express current system time in UTC.\n  See also https://github.com/rsyslog/rsyslog/issues/729\n- impstats: support broken ElasticSearch JSON implementation\n  ES 2.0 no longer supports valid JSON and disallows dots inside names.\n  This adds a new \"json-elasticsearch\" format option which replaces\n  those dots by the bang (\"!\") character. So \"discarded.full\" becomes\n  \"discarded!full\".\n  This is a workaround. A method that will provide more control over\n  replacements will be implemented some time in the future. For\n  details, see below-quoted issue tracker.\n  closes https://github.com/rsyslog/rsyslog/issues/713\n- omelasticsearch: craft better URLs\n  Elasticsearch is confused by url's ending in a bare '?' or '&'. While\n  this is valid, those are no longer produced.\n  Thanks to Benno Evers for the patch.\n- imfile: add experimental \"reopenOnTruncate\" parameter\n  Thanks to Matthew Wang for the patch.\n- bugfix imfile: proper handling of inotify initialization failure\n  Thanks to Zachary Zhao for the patch.\n- bugfix imfile: potential segfault due to improper handling of ev var\n  This occurs in inotify mode, only.\n  Thanks to Zachary Zhao and Peter Portante for the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/718\n- bugfix imfile: potential segfault under heavy load.\n  This occurs in inotify mode when using wildcards, only.\n  The root cause is dropped IN_IGNORED inotify events which be dropped\n  in circumstance of high input pressure and frequent rotation, and\n  according to wikipeida, they can also be dropped in other conditions.\n  Thanks to Zachary Zhao for the patch.\n  closes https://github.com/rsyslog/rsyslog/issues/723\n- bugfix ommail: invalid handling of server response\n  if that response was split into different read calls. Could lead to\n  error-termination of send operation. Problem is pretty unlikely to\n  occur in standard setups (requires slow connection to SMTP server).\n  Thank to github user haixingood for the patch.\n- bugfix omelasticsearch: custom serverport was ignored on some platforms\n  Thanks to Benno Evers for the patch.\n- bugfix: tarball did not include some testbench files\n  Thanks to Thomas D. (whissi) for the patch.\n- bugfix: memory misaddressing during config parsing string template\n  This occurred if an (invalid) template option larger than 63 characters\n  was given.\n  Thanks to git hub user c6226 for the patch.\n- bugfix imzmq: memory leak\n  Thanks to Jeremy Liang for the patch.\n- bugfix imzmq: memory leak\n  Thanks to github user xushengping for the patch.\n- bugfix omzmq: memory leak\n  Thanks to Jack Lin for the patch.\n- some code improvement and cleanup\n------------------------------------------------------------------------------\nVersion 8.15.0 [v8-stable] 2015-12-15\n- KSI Lib: Updated code to run with libksi 3.4.0.5 \n  Also libksi 3.4.0.x is required to build rsyslog if ksi support\n  is enabled. New libpackages have been build as well. \n- KSI utilities: Added option to ser publication url.\n  Since libksi 3.4.0.x, there is no default publication url anymore. \n  The publication url has to be set using the --publications-server\n  Parameter, otherwise the ksi signature cannot be verified. UserID\n  and UserKey can also be set by parameter now.   \n  Closes https://github.com/rsyslog/rsyslog/issues/581\n- KSI Lib: Fixed wrong TLV container for KSI signatures from 0905 to 0906. \n  closes https://github.com/rsyslog/rsyslog/issues/587\n- KSI/GT Lib: Fixed multiple issues found using static analyzer \n- performance improvement for configs with heavy use of JSON variables\n  Depending on the config, this can be a very big gain in performance.\n- added pmpanngfw: contributed module for translating Palo Alto Networks logs. \n  see also: https://github.com/rsyslog/rsyslog/pull/573\n  Thanks to Luigi Mori for the contribution. \n- testbench: Changed valgrind option for imtcp-tls-basic-vg.sh\n  For details see: https://github.com/rsyslog/rsyslog/pull/569\n- pmciscoios: support for asterisk before timestamp added\n  thanks to github user c0by for the patch\n  see also: https://github.com/rsyslog/rsyslog/pull/583\n- solr external output plugin much enhanced\n  see also: https://github.com/rsyslog/rsyslog/pull/529\n  Thanks to Radu Gheorghe for the patch.\n- omrabbitmq: improvements\n  thanks to Luigi Mori for the patch\n  see also: https://github.com/rsyslog/rsyslog/pull/580\n- add support for libfastjson (as a replacement for json-c)\n- KSI utilities: somewhat improved error messages\n  Thanks to Henri Lakk for the patch.\n  see also: https://github.com/rsyslog/rsyslog/pull/588\n- pmciscoios: support for some format variations\n  Thanks to github user c0by for the patch\n- support grok via new contributed module mmgrok\n  Thanks to 饶琛琳 (github user chenryn) for the contribution.\n- omkafka: new statistics counter \"maxoutqsize\"\n  Thanks to 饶琛琳 (github user chenryn) for the contribution.\n- improvements for 0mq modules:\n  * omczmq - suspend / Retry handling - the output plugin can now recover\n    from some error states due to issues with plugin startup or message sending\n  * omczmq - refactored topic handling code for ZMQ_PUB output to be a little\n    more efficient\n  * omczmq - added ability to set a timeout for sends\n  * omczmq - set topics can be in separate frame (default) or part of message\n    frame (configurable)\n  * omczmq - code cleanup\n  * imczmq - code cleanup\n  * imczmq - fixed a couple of cases where vars could be used uninitialized\n  * imczmq - ZMQ_ROUTER support\n  * imczmq - Fix small memory leak from not freeing sockets  when done with them\n  * allow creation of on demand ephemeral CurveZMQ certs for encryption.\n    Clients may specify clientcertpath=\"*\" to indicate they want an on\n    demand generated cert.\n  Thanks to Brian Knox for the contributions.\n- cleanup on code to unset a variable\n  under extreme cases (very, very unlikely), the old code could also lead\n  to erroneous processing\n- omelasticsearch: build on FreeBSD\n  Thanks to github user c0by for the patch\n- pmciscoios: fix some small issues clang static analyzer detected\n- testbench: many improvements and some new tests\n  note that there still is a number of tests which are somewhat racy\n- overall code improvements thanks to clang static analyzer\n- gnutls fix: Added possible fix for gnutls issue #575\n  see also: https://github.com/rsyslog/rsyslog/issues/575\n  Thanks to Charles Southerland for the patch\n- bugfix omkafka: restore ability to build on all platforms\n  Undo commit aea09800643343ab8b6aa205b0f10a4be676643b\n  because that lead to build failures on various important platforms.\n  This means it currently is not possible to configure the location\n  of librdkafka, but that will affect far fewer people.\n  closes: https://github.com/rsyslog/rsyslog/issues/596\n- bugfix omkafka: fix potentially negative partition number\n  Thanks to Tait Clarridge for providing a patch.\n- bugfix: solve potential race in creation of additional action workers\n  Under extreme circumstances, this could lead to segfault. Note that we\n  detected this problem thanks to ASAN address sanitizer in combination\n  with a very extreme testbench test. We do not think that this issue\n  was ever reported in practice.\n- bugfix: potential memory leak in config parsing\n  Thanks to github user linmujia for the patch\n- bugfix: small memory leak in loading template config\n  This happened when a plugin was used inside the template. Then, the\n  memory for the template name was never freed.\n  Thanks to github user xushengping for the fix.\n- bugfix: fix extra whitespace in property expansions\n  Address off-by-one issues introduced in f3bd7a2 resulting in extra\n  whitespace in property expansions\n  Thanks to Matthew Gabeler-Lee for the patch.\n- bugfix: mmfields leaked memory if very large messages were processed\n  detected by clang static analyzer\n- bugfix: mmfields could add garbage data to field\n  this happened when very large fields were to be processed.\n  Thanks to Peter Portante for reporting this.\n- bugfix: omhttpfs now also compiles with older json-c lib\n- bugfix: memory leak in (contributed) module omhttpfs\n  Thanks to git hub user c6226 for the patch.\n- bugfix: parameter mismatch in error message for wrap() function\n- bugfix: parameter mismatch in error message for random() function\n- bugfix: divide by zero if max() function was provided zero\n- bugfix: invalid mutex handling in omfile async write mode\n  could lead to segfault, even though highly unlikely (caught by\n  testbench on a single platform)\n- bugfix: fix inconsistent number processing\n  Unfortunately, previous versions of the rule engine tried to\n  support oct and hex, but that wasn't really the case.\n  Everything based on JSON was just dec-converted. As this was/is\n  the norm, we fix that inconsistency by always using dec.\n  Luckily, oct and hex support was never documented and could\n  probably only have been activated by constant numbers.\n- bugfix: timezone() object: fix NULL pointer dereference\n  This happened during startup when the offset or id parameter was not\n  given. Could lead to a segfault at startup.\n  Detected by clang static analyzer.\n- bugfix omfile: memory addressing error if very long outchannel name used\n  Thanks to github user c6226 for the patch.\n------------------------------------------------------------------------------\nVersion 8.14.0 [v8-stable] 2015-11-03\n- Added possibility to customize librdkafka location\n  see also: https://github.com/rsyslog/rsyslog/pull/502\n  Thanks to Matthew Wang for the patch.\n- add property \"rawmsg-after-pri\"\n- bugfix: potential misaddresseing in imfile\n  Could happen when wildcards were used.\n  see also https://github.com/rsyslog/rsyslog/issues/532\n  see also https://github.com/rsyslog/rsyslog/issues/534\n  Thanks to zhangdaoling for the bugfix.\n- bugfix: re_extract RainerScript function did not work\n  Thanks to Janmejay Singh for the patch\n------------------------------------------------------------------------------\nVersion 8.13.0 [v8-stable] 2015-09-22\n- ZeroMQ enhancements:\n  * Added the ability to set a static publishing topic per action as an\n    alternative to constructing topics with templates\n    Contributor: Luca Bocassi\n  * ZMQ_PUB socket now defaults to bind and ZMQ_SUB socket now defaults to\n    connect - Contributor: Luca Bocassi\n- Redis enhancements:\n  * Can now LPUSH to a Redis list in \"queue\" mode - Contributor: Brian Knox\n  * Can now PUBLISH to a Redis channel in \"publish\" mode\n    Contributor: Brian Knox\n- build requirement for rsyslog/mmnormalize is now liblognorm 1.1.2 or above\n- mmnormalize: liblognorm error messages are now emitted via regular\n  rsyslog error reporting mechanism (aka \"are now logged\")\n  This is possible due to a new API in liblognorm 1.1.2;\n  Note that the amount of error messages depends on the version of\n  liblognorm used.\n- add support for TCP client side keep-alives\n  Thanks to github user tinselcity for the patch.\n- bugfix: imtcp/TLS hangs on dropped packets\n  see also https://github.com/rsyslog/rsyslog/issues/318\n  Thanks to github user tinselcity for the patch.\n- bugfix testbench: some tests using imptcp are run if module is disabled\n  Thanks to Michael Biebl for reporting this\n  see also https://github.com/rsyslog/rsyslog/issues/524\n- bugfix omkafka: Fixes a bug not accepting new messages anymore. \n  see also: https://github.com/rsyslog/rsyslog/pull/472\n  Thanks to Janmejay Singh\n- bugfix: Parallel build issue \"cannot find ../runtime/.libs/librsyslog.a:\n  No such file or directory\" (#479) fixed.\n  Thanks to Thomas D. (Whissi) for the patch.\n- bugfix: Added missing mmpstrucdata testfiles into makefile.\n  see also: https://github.com/rsyslog/rsyslog/issues/484\n- bugfix: Reverted FIX for issue #392 as it had unexpected side effects.\n  The new fix duplicates the Listener object for static files (like\n  done for dynamic files already), resolving issue #392 and #490. \n  see also https://github.com/rsyslog/rsyslog/pull/490 \n- bugfix: issues in queue subsystem if syncqueuefiles was enabled\n  * Error 14 was generated on the .qi file directory handle.\n    As the .qi filestream does not have a directory set, fsync\n    was called on an empty directory causing a error 14 in debug log.\n  * When queue files existed on startup, the bSyncQueueFiles\n    strm property was not set to 1. This is now done in the\n    qqueueLoadPersStrmInfoFixup function.\n- bugfix/testbench: tcpflood tool could abort when random data was added\n  see also: https://github.com/rsyslog/rsyslog/issues/506\n  Thanks to Louis Bouchard for the fix\n- rscryutil: Added support to decrypt a not closed log file.\n  Thanks to wizard1024 for the patch.\n------------------------------------------------------------------------------\nVersion 8.12.0 [v8-stable] 2015-08-11\n- Harmonize resetConfigVariables values and defaults\n  see also https://github.com/rsyslog/rsyslog/pull/413\n  Thanks to Tomas Heinrich for the patch.\n- GT/KSI: fix some issues in signature file format and add conversion tool\n  The file format is incompatible to previous format, but tools have been\n  upgraded to handle both and also an option been added to convert from\n  old to new format.\n- bugfix: ommysql did not work when gnutls was enabled\n  as it turned out, this was due to a check for GnuTLS functions\n  with the side-effect that\n  AC_CHECK_LIB, by default, adds the lib to LIBS, if there is no\n  explicit action, what was the case here. So everything was now\n  linked against GnuTLS, which in turn made ommysql fail.\n  Thanks to Thomas D. (whissi) for the analysis of the ommysql/gnutls\n  problem and Thomas Heinrich for pointing out that AC_CHECK_LIB might\n  be the culprit.\n- bugfix omfile: potential memory leak on file close\n  see also: https://github.com/rsyslog/rsyslog/pull/423\n  Thanks to Robert Schiele for the patch.\n- bugfix omfile: potential race in dynafile detection/creation\n  This could lead to a segfault.\n  Thanks to Tomas Heinrich for the patch.\n- bugfix omfile: Fix race-condition detection in path-creation code\n  The affected code is used to detect a race condition in between\n  testing for the existence of a directory and creating it if it didn't\n  exist.  The variable tracking the number of attempts wasn't reset for\n  subsequent elements in the path, thus limiting the number of\n  reattempts to one per the whole path, instead of one per each path\n  element.\n  This solution was provided by Martin Poole.\n- bugfix parser subsystem: potential misaddressing in SanitizeMsg()\n  could lead to a segfault\n  Thanks to Tomas Heinrich for the patch.\n- imfile: files moved outside of directory are now (properly) handled\n- bugfix: imfile: segfault when using startmsg.regex if first log line\n  doesn't match \n  Thanks to Ciprian Hacman for the patch.\n- bugfix imfile: file table was corrupted when on file deletion\n  This could happen when a file that was statically configured (not via an\n  wildcard) was deleted.\n- bugfix ompgsql: transaction were improperly handled\n  now transaction support is solidly disabled until we have enough requests\n  to implement it again. Module still works fine in single insert mode.\n  closes https://github.com/rsyslog/rsyslog/issues/399\n- bugfix mmjsonparse: memory leak if non-cee-json message is processed\n  see also https://github.com/rsyslog/rsyslog/pull/383\n  Thanks to Anton Matveenko for the patch\n- testbench: remove raciness from UDP based tests\n- testbench: added bash into all scripts making it mandatory\n- bugfix testbench: Fixed problem building syslog_caller util when \n  liblogging-stdlog is not available. \n  Thanks to Louis Bouchard for the patch\n- bugfix rscryutil.1: Added fix checking for generate_man_pages condition\n  Thanks to Radovan Sroka for the patch\n- bugfix freebsd console: \\n (NL) is prepended with \\r (CR) in console\n  output on freebsd only. For more details see here: \n  https://github.com/rsyslog/rsyslog/issues/372\n  Thanks to AlexandreFenyo for the patch\n------------------------------------------------------------------------------\nVersion 8.11.0 [v8-stable] 2015-06-30\n- new signature provider for Keyless Signature Infrastructure (KSI) added\n- build system: re-enable use of \"make distcheck\"\n- add new signature provider for Kesless Signature Infrastructure (KSI)\n  This has also been added to existing tooling; KSI is kind of v2 of\n  the Guardtime functionality and has been added in the appropriate\n  places.\n- bugfix imfile: regex multiline mode ignored escapeLF option\n  Thanks to Ciprian Hacman for reporting the problem\n  closes https://github.com/rsyslog/rsyslog/issues/370\n- bugfix omkafka: fixed several concurrency issues, most of them related\n  to dynamic topics.\n  Thanks to Janmejay Singh for the patch.\n- bugfix: execonlywhenpreviousissuspended did not work correctly\n  This especially caused problems when an action with this attribute was\n  configured with an action queue.\n- bugfix core engine: ensured global variable atomicity\n  This could lead to problems in RainerScript, as well as probably in other\n  areas where global variables are used inside rsyslog. I wouldn't outrule\n  it could lead to segfaults.\n  Thanks to Janmejay Singh for the patch.\n- bugfix imfile: segfault when using startmsg.regex because of empty log line\n  closes https://github.com/rsyslog/rsyslog/issues/357\n  Thanks to Ciprian Hacman for the patch.\n- bugfix: build problem on Solaris\n  Thanks to Dagobert Michelsen for reporting this and getting us up to\n  speed on the openCWS build farm.\n- bugfix: build system strndup was used even if not present\n  now added compatibility function. This came up on Solaris builds.\n  Thanks to Dagobert Michelsen for reporting the problem.\n  closes https://github.com/rsyslog/rsyslog/issues/347\n- bugfix imjournal: do not pass empty messages to rsyslog core\n  this causes a crash of the daemon\n  see also https://github.com/rsyslog/rsyslog/pull/412\n  Thanks to Tomas Heinrich for the patch.\n- bugfix imjournal: cosmetic memory leak\n  very small and an shutdown only, so did not affect operations\n  see also https://github.com/rsyslog/rsyslog/pull/411\n  Thanks to Tomas Heinrich for the patch.\n------------------------------------------------------------------------------\nVersion 8.10.0 [v8-stable] 2015-05-19\n- imfile: add capability to process multi-line messages based on regex\n  input parameter \"endmsg.regex\" was added for that purpose. The new\n  mode provides much more power in processing different multiline-formats.\n- pmrfc3164: add new parameters\n  * \"detect.yearAfterTimestamp\"\n    This supports timestamps as generated e.g. by some Aruba Networks\n    equipment.\n  * \"permit.squareBracesInHostname\"\n    Permits to use \"hostnames\" in the form of \"[127.0.0.1]\"; also seen in\n    Aruba Networks equipment, but we strongly assume this can also happen\n    in other cases, especially with IPv6.\n- supplementary groups are now set when dropping privileges\n  closes https://github.com/rsyslog/rsyslog/issues/296\n  Thanks to Zach Lisinski for the patch.\n- imfile: added brace glob expansion to wildcard\n  Thanks to Zach Lisinski for the patch.\n- zmq: add the ability for zeromq input and outputs to advertise their\n  presence on UDP via the zbeacon API.\n  Thanks to Brian Knox for the contribution.\n- added omhttpfs: contributed module for writing to HDFS via HTTP\n  Thanks to sskaje for the contribution.\n- Configure option \"--disable-debug-symbols\" added which is disabled per\n  default. If you set the new option, configure won't set the appropriate\n  compiler flag to generate debug symbols anymore.\n- When building from git source we now require rst2man and yacc (or a\n  replacement like bison).\n  That isn't any new requirement, we only added missing configure checks.\n- Configure option \"--enable-generate-man-pages\" is now disabled for non git\n  source builds per default but enforced when building from git source.\n- mmpstrucdata: some code cleanup\n  removed lots of early development debug outputs\n- bugfix imuxsock: fix a memory leak that happened with large messages\n  ... when annotation was enabled.\n  Thanks to github user c6226 for the patch\n- bugfix omhttpfs: memory leak\n  Thanks to github user c6226 for the patch\n- bugfix imuxsock: fix a crash when setting a hostname\n  Setting a hostname via the legacy directive would lead to a crash\n  during shutdown caused by a double-free.\n  Thanks to Tomas Heinrich for the patch.\n- bugfix: memory leak in mmpstrucdata\n  Thanks to Grégoire Seux for reporting this issue.\n  closes https://github.com/rsyslog/rsyslog/issues/310\n- bugfix (minor): default action name: assigned number was one off\n  see also https://github.com/rsyslog/rsyslog/pull/340\n  Thanks to Tomas Heinrich for the patch.\n- bugfix: memory leak in imfile\n  A small leak happened each time a new file was monitored based on\n  a wildcard. Depending on the rate of file creation, this could result\n  in a serious memory leak.\n------------------------------------------------------------------------------\nVersion 8.9.0 [v8-stable] 2015-04-07\n- omprog: add option \"hup.forward\" to forwards HUP to external plugins\n  This was suggested by David Lang so that external plugins (and other\n  programs) can also do HUP-specific processing. The default is not\n  to forward HUP, so no change of behavior by default.\n- imuxsock: added capability to use regular parser chain\n  Previously, this was a fixed format, that was known to be spoken on\n  the system log socket. This also adds new parameters:\n  - sysSock.useSpecialParser module parameter\n  - sysSock.parseHostname module parameter\n  - useSpecialParser input parameter\n  - parseHostname input parameter\n- 0mq: improvements in input and output modules\n  See module READMEs, part is to be considered experimental.\n  Thanks to Brian Knox for the contribution.\n- imtcp: add support for ip based bind for imtcp -> param \"address\"\n  Thanks to github user crackytsi for the patch.\n- bugfix: MsgDeserialize out of sync with MsgSerialize for StrucData\n  This lead to failure of disk queue processing when structured data was\n  present. Thanks to github user adrush for the fix.\n- bugfix imfile: partial data loss, especially in readMode != 0\n  closes https://github.com/rsyslog/rsyslog/issues/144\n- bugfix: potential large memory consumption with failed actions\n  see also https://github.com/rsyslog/rsyslog/issues/253\n- bugfix: omudpspoof: invalid default send template in RainerScript format\n  The file format template was used, which obviously does not work for\n  forwarding. Thanks to Christopher Racky for alerting us.\n  closes https://github.com/rsyslog/rsyslog/issues/268\n- bugfix: size-based legacy config statements did not work properly\n  on some platforms, they were incorrectly handled, resulting in all\n  sorts of \"interesting\" effects (up to segfault on startup)\n- build system: added option --without-valgrind-testbench\n  ... which provides the capability to either enforce or turn off\n  valgrind use inside the testbench. Thanks to whissi for the patch.\n- rsyslogd: fix misleading typos in error messages\n  Thanks to Ansgar Püster for the fixes.\n------------------------------------------------------------------------------\nVersion 8.8.0 [v8-stable] 2015-02-24\n- omkafka: add support for dynamic topics and auto partitioning\n  Thanks to Tait Clarridge for the patches.\n- imtcp/imptcp: support for broken Cisco ASA TCP syslog framing\n- omfwd: more detailed error messages in case of UDP send error\n- TLS syslog: enable capability to turn on GnuTLS debug logging\n  This provides better diagnostics in hard-to-diagnose cases,\n  especially when GnuTLS is extra-picky about certificates.\n- bugfix: $AbortOnUncleanConfig did not work\n- improve rsyslogd -v output and error message with meta information\n  version number is now contained in error message and build platform in\n  version output. This helps to gets rid of the usual \"which version\"\n  question on mailing list, support forums, etc...\n- bugfix imtcp: octet-counted framing cannot be turned off\n- bugfix: build problems on Illuminos\n  Thanks to Andrew Stormont for the patch\n- bugfix: invalid data size for iMaxLine global property\n  It was defined as int, but inside the config system it was declared as\n  size type, which uses int64_t. With legacy config statements, this could\n  lead to misaddressing, which usually meant the another config variable was\n  overwritten (depending on memory layout).\n  closes https://github.com/rsyslog/rsyslog/issues/205\n- bugfix: negative values for maxMessageSize global parameter were permitted\n------------------------------------------------------------------------------\nVersion 8.7.0 [v8-stable] 2015-01-13\n- add message metadata \"system\" to msg object\n  this permits to store metadata alongside the message\n- imfile: add support for \"filename\" metadata\n  this is useful in cases where wildcards are used\n- imptcp: make stats counter names consistent with what imudp, imtcp uses\n- added new module \"omkafka\" to support writing to Apache Kafka\n- omfwd: add new \"udp.senddelay\" parameter\n- mmnormalize enhancements\n  Thanks to Janmejay Singh for the patch.\n- RainerScript \"foreach\" iterator and array reading support\n  Thanks to Janmejay Singh for the patch.\n- now requires liblognorm >= 1.0.2\n- add support for systemd >= 209 library names\n- BSD \"ntp\" facility (value 12) is now also supported in filter\n  Thanks to Douglas K. Rand of Iteris, Inc. for the patch.\n  Note: this patch was released under ASL 2.0 (see email-conversation).\n- bugfix: global(localHostName=\"xxx\") was not respected in all modules\n- bugfix: emit correct error message on config-file-not-found\n  closes https://github.com/rsyslog/rsyslog/issues/173\n- bugfix: impstats emitted invalid JSON format (if JSON was selected)\n- bugfix: (small) memory leak in omfile's outchannel code\n  Thanks to Koral Ilgun for reporting this issue.\n- bugfix: imuxsock did not deactivate some code not supported by platform\n  Among potential other problems, this caused build failure under Solaris.\n  Note that this build problem just made a broader problem appear that so\n  far always existed but was not visible.\n  closes https://github.com/rsyslog/rsyslog/issues/185\n------------------------------------------------------------------------------\nVersion 8.6.0 [v8-stable] 2014-12-02\nNOTE: This version also incorporates all changes and enhancements made for\nv8.5.0, but in a stable release. For details see immediately below.\n- configuration-setting rsyslogd command line options deprecated\n  For most of them, there are now proper configuration objects. Some few\n  will be completely dropped if nobody insists on them.  Additional info at\n  http://blog.gerhards.net/2014/11/phasing-out-legacy-command-line-options.html\n- new and enhanced plugins for 0mq. These are currently experimental.\n  Thanks to Brian Knox who contributed the modules and is their author.\n- empty rulesets have been permitted. They no longer raise a syntax error.\n- add parameter -N3 to enable config check of partial config file\n  Use for config include files. Disables checking if any action exists at\n  all.\n- rsyslogd -e option has finally been removed\n  It is deprecated since many years.\n- testbench improvements\n  Testbench is now more robust and has additional tests.\n- testbench is now by default disabled\n  To enable it, use --enable-testbench. This was done as the testbench now\n  does better checking if required modules are present and this in turn\n  would lead to configure error messages where non previously were if we\n  would leave --enable-testbench on by default. Thus we have turned it off.\n  This should not be an issue for those few testbench users.\n- add new RainerScript functions warp() and replace()\n  Thanks to Singh Janmejay for the patch.\n- mmnormalize can now also work on a variable\n  Thanks to Singh Janmejay for the patch.\n- new property date options for day ordinal and week number\n  Thanks to github user arrjay for the patch\n- remove --enable-zlib configure option, we always require it\n  It's hard to envision a system without zlib, so we turn this off\n  closes https://github.com/rsyslog/rsyslog/issues/76\n- slight source-tree restructuring: contributed modules are now in their\n  own ./contrib directory. The idea is to make it clearer to the end user\n  which plugins are supported by the rsyslog project (those in ./plugins).\n- bugfix: imudp makes rsyslog hang on shutdown when more than 1 thread used\n  closes https://github.com/rsyslog/rsyslog/issues/126\n- bugfix: not all files closed on auto-backgrounding startup\n  This could happen when not running under systemd. Some low-numbered\n  fds were not closed in that case.\n- bugfix: typo in queue configuration parameter\n  made parameter unusable\n  Thanks to Bojan Smojver for the patch.\n- bugfix: uninitialized buffer off-by-one error in hostname generation\n  The DNS cache used uninitialized memory, which could lead to\n  invalid hostname generation.\n  Thanks to Jarrod Sayers for alerting us and providing analysis and\n  patch recommendations.\n- bugfix imuxsock: possible segfault when SysSock.Use=\"off\"\n  Thanks to alexjfisher for reporting this issue.\n  closes https://github.com/rsyslog/rsyslog/issues/140\n- bugfix: RainerScript: invalid ruleset names were accepted\n  during ruleset definition, but could of course not be used when\n  e.g. calling a ruleset.\n  IMPORTANT: this may cause existing configurations to error out on start,\n  as they invalid names could also be used e.g. when assigning rulesets.\n- bugfix: some module entry points were not called for all modules\n  callbacks like endCnfLoad() were primarily being called for input\n  modules. This has been corrected. Note that this bugfix has some\n  regression potential.\n- bugfix omlibdbi: connection was taken down in wrong thread\n  this could have consequences depending on the driver being used. In\n  general, it looks more like a cosmetic issue. For example, with\n  MySQL it lead to a small memory but also an annoying message about\n  a thread not properly torn down.\n- imttcp was removed because it was an incomplete experimental module\n- pmrfc3164sd because it was a custom module nobody used\n  We used to keep this as a sample inside the tree, but whoever wants\n  to look at it can check in older versions inside git.\n- omoracle was removed because it was orphaned and did not build/work\n  for quite some years and nobody was interested in fixing it\n---------------------------------------------------------------------------\nVersion 8.5.0 [v8-stable] 2014-10-24\n- imfile greatly refactored and support for wildcards added\n- PRI-handling code refactored for more clarity and robustness\n- ommail: add support for RainerScript config system [action() object]\n  This finally adds support for the new config style. Also, we now permit\n  to set a constant subject text without the need to create a template for\n  it.\n- refactored the auto-backgrounding method\n  The code is now more robust and also offers possibilities for enhanced\n  error reporting in the future. This is also assumed to fix some races\n  where a system startup script hang due to \"hanging\" rsyslogd.\n- make gntls tcp syslog driver emit more error messages\n  Messages previously emitted only to the debug log are now emitted as\n  syslog error messages. It has shown that they contain information \n  helpful to the user for troubleshooting config issues. Note that this\n  change is a bit experimental, as we are not sure if there are situations\n  where large amounts of error messages may be emitted.\n- bugfix: imfile did not complain if configured file did not exist\n  closes https://github.com/rsyslog/rsyslog/issues/137\n- bugfix: build failure on systems which don't have json_tokener_errors\n  Older versions of json-c need to use a different API (which don't exists\n  on newer versions, unfortunately...)\n  Thanks to Thomas D. for reporting this problem.\n- imgssapi: log remote peer address in some error messages\n  Thanks to Bodik for the patch.\n---------------------------------------------------------------------------\nVersion 8.4.3 [v8-stable] 2014-10-??\n- ommail: minor bugfixes & improvements\n  * timestamps were 1 hour out when using daylight saving times when\n    viewing emails in most email clients due to incorrect date format\n  * X-Mailer header had a typo in it\n  * To: header was duplicated once per recipient (this is permitted,\n    but an address list is a better choice nowadays)\n  Thanks to github user cacheus for the patches.\n- bugfix imkmsg: infinite loop on OpenVZ VMs \n  Thanks to github user PaulSD for the patch\n  closes https://github.com/rsyslog/rsyslog/pull/138\n- bugfix: typo in queue configuration parameter made parameter unusable\n  Thanks to Bojan Smojver for the patch.\n- bugfix: uninitialized buffer off-by-one error in hostname generation\n  The DNS cache used uninitialized memory, which could lead to\n  invalid hostname generation.\n  Thanks to Jarrod Sayers for alerting us and providing analysis and\n  patch recommendations.\n- bugfix imfile: segfault on startup in \"inotify\" mode\n  A segfault happened when more than one file was monitored.\n- bugfix imfile: could make rsyslog exit in inotify mode\n- bugfix: rsgtutil sometimes crashed in verify mode if file did not exist\n- bugfix imklog: pri was miscalculated\n  actually, the pri was totally off the real value for PRIs > 9\n- bugfix imfile:file processing in inotify mode was stalled sometimes\n  closes https://github.com/rsyslog/rsyslog/issues/134\n- bugfix: imjournal did not build properly\n  The build succeeded, but the module did not load due to a type in\n  a support function name, which kept unresolved during load.\n- bugfix: mmcount did no longer build\n  note that this is untested -- users of this module should file a bug if\n  the new (trivial) code is broken [if there are any users, thus I did not\n  invest time in testing...]\n  closes https://github.com/rsyslog/rsyslog/issues/129\n- bugfix imuxsock: possible segfault when SysSock.Use=\"off\"\n  Thanks to alexjfisher for reporting this issue.\n  closes https://github.com/rsyslog/rsyslog/issues/140\n---------------------------------------------------------------------------\nVersion 8.4.2 [v8-stable] 2014-10-02\n- bugfix: the fix for CVE-2014-3634 did not handle all cases\n  This is corrected now.\n  see also: CVE-2014-3683\n- fixed a build problem on some platforms\n  Thanks to Olaf for the patch\n- behavior change: \"msg\" of messages with invalid PRI set to \"rawmsg\"\n  When the PRI is invalid, the rest of the header cannot be valid. So\n  we move all of it to MSG and do not try to parse it out. Note that\n  this is not directly related to the security issue but rather done\n  because it makes most sense.\n---------------------------------------------------------------------------\nVersion 8.4.1 [v8-stable] 2014-09-30\n- imudp: add for bracketing mode, which makes parsing stats easier\n- permit at-sign in variable names\n  closes: https://github.com/rsyslog/rsyslog/issues/110\n- bugfix: fix syntax error in anon_cc_numbers.py script\n  Thanks to github user anthcourtney for the patch.\n  closes: https://github.com/rsyslog/rsyslog/issues/109\n- bugfix: ompgsql: don't loose uncommitted data on retry\n  Thanks to Jared Johnson and Axel Rau for the patch.\n- bugfix: imfile: if a state file for a different file name was set,\n  that different file (name) was monitored instead of the configured\n  one. Now, the state file is deleted and the correct file monitored.\n  closes: https://github.com/rsyslog/rsyslog/issues/103\n- bugfix: omudpspoof: source port was invalid\n  Thanks to Pavel Levshin for the patch\n- bugfix: build failure on systems which don't have json_tokener_errors\n  Older versions of json-c need to use a different API (which don't exists\n  on newer versions, unfortunately...)\n  Thanks to Thomas D. for reporting this problem.\n- bugfix: omelasticsearch does not work with broken/changed ES 1.0+ API\n  closes: https://github.com/rsyslog/rsyslog/issues/104\n- bugfix: mmanon did not properly anonymize IP addresses starting with '9'\n  Thanks to defa-at-so36.net for reporting this problem.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=529\n- bugfix: build problems on SuSe Linux\n  Thanks Andreas Stieger for the patch\n- bugfix: omelasticsearch error file did not work correctly on ES 1.0+\n  due to a breaking change in the ElasticSearch API.\n  see also: https://github.com/rsyslog/rsyslog/issues/104\n- bugfix: potential abort when a message with PRI > 191 was processed\n  if the \"pri-text\" property was used in active templates, this could\n  be abused to a remote denial of service from permitted senders\n  see also: CVE-2014-3634\n---------------------------------------------------------------------------\nVersion 8.4.0 [v8-stable] 2014-08-18\n- this is the new stable branch, which incorporates all enhancements of\n  rsyslog 8.3.\n---------------------------------------------------------------------------\nVersion 8.3.5 [v8-devel] 2014-08-05\n- mmjsonparse: support selectable cookie and target containers\n  This permits to put different meanings into a json formatted syslog\n  message, e.g. the \"traditional\" cee or cim data.\n- bugfix: mmjsonparse did not build with json-c < 0.10\n  This was a regression introduced some time in the past in order to\n  support API changes in json-c. Now we check for the version and use\n  proper code.\n- omprog: emit error message via syslog() if loading binary fails\n  This happens after forking, so omprog has no longer access to rsyslog's\n  regular error reporting functions. Previously, this meant any error\n  message was lost. Now it is emitted via regular syslog (which may end up\n  in a different instance, if multiple instances run...)\n- couple of patches imported from v7-stable (7.6.4)\n---------------------------------------------------------------------------\nVersion 8.3.4 [v8-devel] 2014-07-11\n- new pmciscoios parser supporting various Cisco IOS formats\n- RFC3164 timestamp parser now accepts timezones and subsecond resolution\n  ... at least for some common formats and where we could do so without\n  running risk of breaking proper formats (or introducing regressions)\n- new parser config object -- permits to define custom parser definitions\n- new tzinfo config object -- permits to define time zone offsets\n  This is a utility object that currently is being used by some parsers.\n- bugfix: mishandling of input modules not supporting new input instances\n  If they did not support this, accidentally the output module part of the\n  module union was written, leading to unpredictable results. Note: all\n  core modules do support this interface, but some contributed or very\n  old ones do not.\n- bugfix: double-free when ruleset() parser parameters were used\n  While unlikely, this could cause stability issues even after the\n  config phase.\n---------------------------------------------------------------------------\nVersion 8.3.3 [v8-devel] 2014-06-26\n- unify input object naming\n  imudp now supports \"name\" parameter, as other inputs do. \"inputname\" has\n  been deprecated, but can still be used. Same applies to \"appendport\"\n  subparameter\". Thanks to \"Nick Syslog\" for the suggestion.\n- made the missing (contributed) modules build under v8 [import from 8.2.2]\n  Modules:\n  * mmrfc5424addhmac\n  * omrabbitmq\n  * omgssapi\n  * omhdfs\n  * omzmq3\n- added a cleanup process (janitor); permits to close omfile files after a\n  timeout\n- make omgssapi build under v8.3 [import vom v8.2]\n  note that we could do this to the stable, because there is NO regression\n  chance at all: only omgssapi was changed, and this module did NOT work\n  previously.\n- removed obsolete --disable-fsstnd configure option\n  Thanks to Thomas D. for alerting us.\n  Closes: https://github.com/rsyslog/rsyslog/issues/72\n---------------------------------------------------------------------------\nVersion 8.3.2 [v8-devel] 2014-05-02\n- new template options for date extraction:\n  - year\n  - month\n  - day\n  - wday\n  - hour\n  - minute\n  - second\n  - tzoffshour\n  - tzoffsmin\n  - tzoffsdirection\n  - wdayname\n  For string templates, these are property options and they are \n  prefixed with \"date-\" (e.g. \"date-year\", \"date-month\", ...)\n  see also: https://github.com/rsyslog/rsyslog/issues/65\n- bugfix: mmexternal remove framing char before processing JSON reply\n  This did not have any real bad effects, but caused unnecessary\n  processing, as empty replies were not properly detected. Otherwise,\n  the bug was not noticeable from the user's PoV.\n- bugfix: mmexternal segfault due to invalid free in non-json input mode\n  closes: https://github.com/rsyslog/rsyslog/issues/70\n- bugfix: mmexternal segfault when external plugin sent invalid reply\n  ... or no reply at all. This happened if the reply was improper JSON.\n  Now, we emit an error message in those cases.\n  see also: https://github.com/rsyslog/rsyslog/issues/69\n- bugfix: mmexternal did potentially pass incomplete data to restarted\n  external plugin\n  This could happen if EPIPE was returned \"too late\", in which case the\n  beginning of the data could be lost.\n- bugfix: mmexternal did not properly process messages over 4KiB\n  The data to be passed to the external plugin was truncated after 4KiB.\n  see: https://github.com/rsyslog/rsyslog/issues/64\n- imrelp: added support for per-listener ruleset and inputname\n  see: https://github.com/rsyslog/rsyslog/pull/63\n  Thanks to bobthesecurityguy github user for the patch\n---------------------------------------------------------------------------\nVersion 8.3.1 [v8-devel] 2014-04-24\n- external message modification interface now support modifying message PRI\n- \"jsonmesg\" property will include uuid only if one was previously generated\n  This is primarily a performance optimization. Whenever the message uuid\n  is gotten, it is generated when not already present. As we used the\n  regular setter, this means that always the uuid was generated, which is\n  quite time-consuming. This has now been changed so that it only is\n  generated if it already exists. That also matches more closely the \n  semantics, as \"jsonmesg\" should not make modifications to the message.\n  Note that the same applies to \"fulljson\" passing mode for external\n  plugins.\n- added plugin to rewrite message facility and/or severity\n  Name: fac-sever-rewrite.py\n- permits to build against json-c 0.12\n  Unfortunately, json-c had an ABI breakage, so this is necessary. Note\n  that versions prior to 0.12 had security issues (CVE-2013-6370,\n  CVE-2013-6371) and so it is desirable to link against the new version.\n  Thanks to Thomas D. for the patch. Note that at least some distros\n  have fixed the security issue in older versions of json-c, so this\n  seems to apply mostly when building from sources.\n- bugfix: using UUID property could cause segfault\n- bugfix/mmexternal: memory leak\n- bugfix: memory leak when using \"jsonmesg\" property\n- bugfix: mmutf8fix did not detect two invalid sequences\n  Thanks to Axel Rau for the patch.\n- bugfix: build problems with lexer.l on some platforms\n  For some reason, the strdup() prototype and others are missing. I admit\n  that I don't know why, as this happens only in 8.3.0+ and there is no\n  indication of changes to the affected files. In any case, we need to\n  fix this, and the current solution works at least as an interim one.\n---------------------------------------------------------------------------\nVersion 8.3.0 [v8-devel] 2014-04-10\n- new plugin for anonymizing credit card numbers\n  Thanks to Peter Slavov for providing the code.\n- external message modification modules are now supported\n  They are bound via the new native module \"mmexternal\". Also, a sample\n  skeleton for an external python message modification module has been\n  added.\n- new $jsonmesg property with JSON representation of whole message object\n  closes: https://github.com/rsyslog/rsyslog/issues/19\n- improved error message for invalid field extraction in string template\n  see also:\n  http://kb.monitorware.com/problem-with-field-based-extraction-t12299.html\n- fix build problems on Solaris\n- NOTE: a json-c API that we begun to use requires the compiler to be in\n  c99 mode. By default, we select it automatically. If you modify this and\n  use gcc, be sure to include \"-std=c99\" in your compiler flags. This seems\n  to be necessary only for older versions of gcc.\n---------------------------------------------------------------------------\nVersion 8.2.3 [v8-stable] 2014-??-??\n- bugfix: ommysql: handle/mem leak upon termination of worker thread\n  This could become bad if the (instance) worker threads are often\n  started and terminated. But it takes quite a while to show effect.\n---------------------------------------------------------------------------\nVersion 8.2.2 [v8-stable] 2014-06-02\n- made the missing (contributed) modules build under v8\n  Note that we could do this to the stable, because there is NO regression\n  chance at all: only the modules themselves were changed, and they did\n  NOT work at all previously. Please also note that most of these modules\n  did not yet receive real testing. As we don't have the necessary\n  environments (easily enough available), we depend on users submitting\n  error reports and helping to iron out any issues that may arise.\n  Modules:\n  * mmrfc5424addhmac\n  * omrabbitmq\n  * omgssapi\n  * omhdfs\n  * omzmq3\n---------------------------------------------------------------------------\nVersion 8.2.1 [v8-stable] 2014-04-17\n- permits to build against json-c 0.12\n  Unfortunately, json-c had an ABI breakage, so this is necessary. Note\n  that versions prior to 0.12 had security issues (CVE-2013-6370,\n  CVE-2013-6371) and so it is desirable to link against the new version.\n  Thanks to Thomas D. for the patch. Note that at least some distros\n  have fixed the security issue in older versions of json-c, so this\n  seems to apply mostly when building from sources.\n- doc is no longer shipped as part of the rsyslog tarball\n  Instead, the rsyslog-doc project creates its own tarball. This is the\n  result of a mailing list discussion after the 8.2.0 release with a\n  tarball-in-tarball approach, which was disliked by almost all distro\n  maintainers. This move also has the advantage of de-coupling the\n  release cycles of both projects a bit (which turned out to be a bit\n  problematic in practice).\n- bugfix: mmutf8fix did not detect two invalid sequences\n  Thanks to Axel Rau for the patch.\n---------------------------------------------------------------------------\nVersion 8.2.0 [v8-stable] 2014-04-02\nThis starts a new stable branch based on 8.1.6 plus the following changes:\n- we now use doc from the rsyslog-doc project\n  As such, the ./doc subtree has been removed. Instead, a cache of the\n  rsyslog-doc project's files has been included in ./rsyslog-doc.tar.gz.\n  Note that the exact distribution mode for the doc is still under\n  discussion and may change in future releases.\n  This was agreed upon on the rsyslog mailing list. For doc issues\n  and corrections, be sure to work with the rsyslog-doc project. It is\n  currently hosted at https://github.com/rsyslog/rsyslog-doc\n- add support for specifying the liblogging-stdlog channel spec\n  new global parameter \"stdlog.channelspec\"\n- add \"defaultnetstreamdrivercertfile\" global variable to set a default\n  for the certfile. \n  Thanks to Radu Gheorghe for the patch.\n- omelasticsearch: add new \"usehttps\" parameter for secured connections\n  Thanks to Radu Gheorghe for the patch.\n- \"action resumed\" message now also specifies module type\n  which makes troubleshooting a bit easier. Note that we cannot output all\n  the config details (like destination etc) as this would require much more\n  elaborate code changes, which we at least do not like to do in the\n  stable version.\n- add capability to override GnuTLS path in build process\n  Thanks to Clayton Shotwell for the patch\n- better and more consistent action naming, action queues now always \n  contain the word \"queue\" after the action name\n- bugfix: ompipe did resume itself even when it was still in error\n  See: https://github.com/rsyslog/rsyslog/issues/35\n  Thanks to github user schplat for reporting\n- bugfix: ompipe used invalid default template\n  This is a regression from an old change (didn't track it down precisely,\n  but over a year ago). It used the Forwarding template instead of\n  the file template (so we have a full syslog header). This fix corrects\n  it back to previous behavior, but new scripts that used the wrong\n  format may now need to have the RSYSLOG_ForwardingFormat template\n  explicitly be applied.\n  closes: https://github.com/rsyslog/rsyslog/issues/50\n---------------------------------------------------------------------------\nVersion 8.1.6 [release candidate] 2014-02-20\n- omfile: permit to set global defaults for action parameters\n  Thanks to Nathan Brown for the patch.\n  See also: https://github.com/rsyslog/rsyslog/pull/23\n- add capability to escape control characters in the C way of doing it\n  adds new global parameter \"parser.escapeControlCharactersCStyle\"\n  Thanks to Nathan Brown for the patch.\n  See also: https://github.com/rsyslog/rsyslog/pull/13\n- parser global parameters can now be set using RainerScript global()\n  Thanks to Nathan Brown for the patch.\n  See also: https://github.com/rsyslog/rsyslog/pull/23\n- omprog: guard program-to-be-executed against CTL-C\n  This can frequently happen in debug mode, where rsyslog is terminated\n  by ctl-c. In any case, SIGINT is not meant to control the child process,\n  so it should be blocked.\n- omprog bugfix: parameter \"forceSingleInstance\" is NOT mandatory\n- add new jsonr property replacer option\n  Thanks to Nathan Brown for the patch.\n- added external plugin interface\n- ommongodb: add authentication support (untested)\n  Thanks to JT for the patch.\n  See also: https://github.com/rsyslog/rsyslog/pull/17\n- bugfix: json templates are improperly created\n  Strings miss the terminating NUL character, which obviously can lead\n  to all sorts of problems.\n  See also: https://github.com/rsyslog/rsyslog/issues/27\n  Thanks to Alain for the analysis and the patch.\n- ompgsql bugfix: improper handling of auto-backgrounding mode \n  If rsyslog was set to auto-background itself (default code behavior, but\n  many distros now turn it off for good reason), ompgsql could not\n  properly connect. This could even lead to a segfault. The core reason\n  was that a PG session handle was kept open over a fork, something that\n  is explicitly forbidden in the PG API.\n  Thanks to Alain for the analysis and the patch.\n- bugfix: ommongodb's template parameter was mandatory but should have\n  been optional\n  Thanks to Alain for the analysis and the patch.\n- bugfix: end of batch processing was not 100% correct. Could lead to\n  outputs not properly writing messages. At least omelasticsearch did not\n  write anything to the database due to this bug.\n  See: https://github.com/rsyslog/rsyslog/issues/10\n  Thanks to Radu Gheorghe for reporting the issue.\n---------------------------------------------------------------------------\nVersion 8.1.5 [devel] 2014-01-24\n- omprog: ability to execute multiple program instances per action\n  It can now execute one program instance per worker thread. This is\n  generally a very good thing the have performance wise. Usually, this\n  should cause no problems with the invoked program. For that reason,\n  we have decided to make this the default mode of operation. If not\n  desired, it can be turned off via the 'forceSingleInstance=\"on\"'\n  action parameter.\n  CHANGE OF BEHAVIOR: previous versions did always execute only one\n  instance per action, no matter how many workers were active. If\n  your program has special needs, you need to change your configuration.\n- imfile now supports inotify (but must be explicitly turned on)\n- imfile no longer has a limit on number of monitored files\n- added ProcessInternalMessages global system parameter\n  This permits to inject rsyslog status messages into *another* main\n  syslogd or the journal.\n- new dependency: liblogging-stdlog (for submitting to external logger)\n- bugfix: imuxsock input parameters were not accepted\n  due to copy&paste error. Thanks to Andy Goldstein for the fix.\n---------------------------------------------------------------------------\nVersion 8.1.4 [devel] 2014-01-10\n- add exec_template() RainerScript function\n- imrelp: support for TCP KEEPALIVE added\n- bumped librelp dependency to 1.2.2 to support new KEEPALIVE feature\n- Add directives for numerically specifying GIDs/UIDs\n  The already present directives (FileOwner, FileGroup, DirOwner,\n  DirGroup) translate names to numerical IDs, which depends on the user\n  information being available during rsyslog's startup. This can fail if\n  the information is obtained over a network or from a service such as\n  SSSD. The new directives provide a way to specify the numerical IDs\n  directly and bypass the lookup.\n  Thanks to Tomas Heinrich for the patch.\n- bugfix: action commitTransaction() processing did not properly handle\n  suspended actions\n- bugfix: omelasticsearch fail.es stats counter was improperly maintained\n---------------------------------------------------------------------------\nVersion 8.1.3 [devel] 2013-12-06\n\nTHIS VERSION CAN BE CONSIDERED A \"NORMAL\" DEVEL RELEASE. It's no longer\nhighly experimental. This assertion is based on real-world feedback.\n\n- changes to the strgen module interface\n- new output module interface for transactional modules\n- performance improvements\n  * reduced number of malloc/frees due to further changes to the\n    output module interface\n  * reduced number of malloc/frees during string template processing\n    We now re-use once allocated string template memory for as long\n    as the worker thread exists. This saves us from doing new memory\n    allocs (and their free counterpart) when the next message is\n    processed. The drawback is that the cache always is the size of\n    the so-far largest message processed. This is not considered a\n    problem, as in any case a single messages' memory footprint should\n    be far lower than that of a whole set of messages (especially on\n    busy servers).\n  * used variable qualifiers (const, __restrict__) to hopefully help\n    the compiler generate somewhat faster code\n- failed action detection more precisely for a number of actions\n  If an action  uses string parameter passing but is non-transactional \n  it can be executed immediately, giving a quicker indication of\n  action failure.\n- bugfix: limiting queue disk space did not work properly\n  * queue.maxdiskspace actually initializes queue.maxfilesize\n  * total size of queue files was not checked against\n    queue.maxdiskspace for disk assisted queues.\n  Thanks to Karol Jurak for the patch.\n---------------------------------------------------------------------------\nVersion 8.1.2 [experimental] 2013-11-28\n- support for liblognorm1 added - results in performance improvements\n  Thanks to Pavel Levshin for his work in this regard.\n- support for jemalloc added via --enable-jemalloc\n  Thanks to Pavel Levshin for suggesting jemalloc\n  Note that build system is experimental at this stage.\n- queue defaults have changed\n  * high water mark is now dynamically 90% of queue size\n  * low water makr is now dynamically 70% of queue size\n  * queue.discardMark is now dynamically 98% of queue size\n  * queue.workerThreadMinimumMessage set to queue.size / num workers\n  For queues with very low queue.maxSize (< 100), \"emergency\" defaults\n  will be used.\n- bugfix: disk queues created files in wrong working directory\n  if the $WorkDirectory was changed multiple times, all queues only\n  used the last value set.\n- bugfix: legacy directive $ActionQueueWorkerThreads was not honored\n- bugfix: mmrfc5424addhmac: \"key\" parameter was not properly processed\n---------------------------------------------------------------------------\nVersion 8.1.1 [experimental] 2013-11-19\n- bugfix: STOP/discard(~) was mostly NOT honored\n  This lead to execution of config code that was not meant to be executed.\n- bugfix: memory leak on worker thread termination\n- bugfix: potential segfault in omfile under heavy load\n  Thanks to Pavel Levshin for alerting us.\n- bugfix: mmsequence: instance mode did not work\n  Thanks to Pavel Levshin for the patch\n- bugfix: segfault on startup when certain script constructs are used\n  e.g. \"if not $msg ...\"\n- omhiredis: now supports v8 output module interface and works again\n  Thanks to Pavel Levshin for the patch\n- mmaudit: now supports v8 output module interface and work again\n- bugfix: potential abort on startup in debug mode\n  This depends on template type being used. The root cause was a \n  non-necessary debug output, which were at the wrong spot (leftover from\n  initial testing).\n  Thanks to Pavel Levshin for alerting us and providing a patch\n  proposal.\n---------------------------------------------------------------------------\nVersion 8.1.0 [experimental] 2013-11-15\n- rewritten core engine for higher performance and new features\n  In detail:\n  * completely rewritten rule execution engine\n  * completely changed output module interface\n  * remodelled output module interface\n  * enabled important output modules to support full concurrent\n    operation\n  The core engine has been considerably changed and must be considered\n  experimental at this stage. Note that it does not yet include all\n  features planned for v8, but is close to this goal. In theory, the\n  engine should perform much better, especially on complex configurations\n  and busy servers. Most importantly, actions instances can now be called\n  concurrently from worker threads and many important output modules\n  support multiple concurrent action instances natively.\n- module omruleset is no longer enabled by default.\n  Note that it has been deprecated in v7 and been replaced by the \"call\"\n  statement. Also, it can still be build without problems, the option must\n  just explicitly be given.\n---------------------------------------------------------------------------\nVersion 7.6.8 [v7.6-stable] 2014-10-??\n- bugfix: typo in queue configuration parameter made parameter unusable\n  Thanks to Bojan Smojver for the patch.\n- bugfix imuxsock: possible segfault when SysSock.Use=\"off\"\n  Thanks to alexjfisher for reporting this issue.\n  closes https://github.com/rsyslog/rsyslog/issues/140\n- bugfix: uninitialized buffer off-by-one error in hostname generation\n  The DNS cache used uninitialized memory, which could lead to\n  invalid hostname generation.\n  Thanks to Jarrod Sayers for alerting us and providing analysis and\n  patch recommendations.\n- remove zpipe (a testing tool) from --enable-diagtools\n  This tool is no longer maintained and currently not used inside the\n  testbench. We keep it in the source tree for the time being in case that\n  it may be used in the future.\n- bugfix: imjournal did not build properly\n  The build succeeded, but the module did not load due to a type in\n  a support function name, which kept unresolved during load.\n- bugfix imklog: pri was miscalculated\n  actually, the pri was totally off the real value for PRIs > 9\n- bugfix rsgtutil: sometimes crashed in verify mode if file did not exist\n- bugfix rsgtutil: some errors/problems at end of file were not reported\n  * The verification function in rsgtutil tool did not report deletion of\n    whole signed blocks of lines from the end of the log file.\n  * The verification function in rsgtutil tool did not report extra\n    (unsigned) lines at the end of the log file. \n  Thanks to Henri Lakk for the patch.\n- bugfix: error: json_tokener_errors undeclared when overriding PKGCONFIG\n  If PKGCONFIG settings for json-c were overridden, presence of\n  json_tokener_errors was not properly detected.\n  closes: https://github.com/rsyslog/rsyslog/issues/143\n  Thanks to Alex Fisher for alerting us and the patch.\n---------------------------------------------------------------------------\nVersion 7.6.7 [v7.6-stable] 2014-10-02\n- bugfix: the fix for CVE-2014-3634 did not handle all cases\n  This is corrected now.\n  see also: CVE-2014-3683\n- fixed a build problem on some platforms\n  Thanks to Olaf for the patch\n- behavior change: \"msg\" of messages with invalid PRI set to \"rawmsg\"\n  When the PRI is invalid, the rest of the header cannot be valid. So\n  we move all of it to MSG and do not try to parse it out. Note that\n  this is not directly related to the security issue but rather done\n  because it makes most sense.\n---------------------------------------------------------------------------\nVersion 7.6.6 [v7.6-stable] 2014-09-30\n- bugfix: potential abort when a message with PRI > 191 was processed\n  if the \"pri-text\" property was used in active templates, this could\n  be abused to a remote denial of service from permitted senders\n  see also: CVE-2014-3634\n- bugfix: potential segfault on startup on 64 bit systems\n  This happened immediately on startup during config processing. Once\n  rsyslog got past this stage, it could not happen.\n- bugfix: build problems on SuSe Linux\n  Thanks Andreas Stieger for the patch\n---------------------------------------------------------------------------\nVersion 7.6.5 [v7.6-stable] 2014-09-17\n- bugfix: in 7.6.4, pri-based filters did not work correctly\n  messages were distributed to the wrong bins.\n- bugfix: build problems on systems without atomic instructions\n  e.g. RHEL 5; backport from v8\n---------------------------------------------------------------------------\nVersion 7.6.4 [v7.6-stable] 2014-09-12\n- add --enable-generate-man-pages configure switch (default: enabled)\n  This forces generation of man pages, even if cached ones exists. This\n  \"fixes\" a typical release tarball nit. While it is hackish, the\n  benefit is clear given the history of failed tarball releases since\n  we changed the cached man page handling. It was just too easy to get\n  that wrong.\n- removed obsolete --disable-fsstnd configure option\n  Thanks to Thomas D. for alerting us.\n  Closes: https://github.com/rsyslog/rsyslog/issues/72\n- permits to build against json-c 0.12\n  Unfortunately, json-c had an ABI breakage, so this is necessary. Note\n  that versions prior to 0.12 had security issues (CVE-2013-6370,\n  CVE-2013-6371) and so it is desirable to link against the new version.\n  Thanks to Thomas D. for the patch. Note that at least some distros\n  have fixed the security issue in older versions of json-c, so this\n  seems to apply mostly when building from sources.\n- new omfile default module parameters\n  * filecreatemode\n  * fileowner\n  * fileownernum\n  * filegroup\n  * filegroupnum\n  * dirowner\n  * dirownernum\n  * dirgroup\n  * dirgroupnum\n  Thanks to Karol Jurak for the patch.\n- bugfix: memory leak in TCP TLS mode\n- bugfix: imfile: if a state file for a different file name was set,\n  that different file (name) was monitored instead of the configured\n  one. Now, the state file is deleted and the correct file monitored.\n  closes: https://github.com/rsyslog/rsyslog/issues/103\n- bugfix: using UUID property could cause segfault\n- bugfix: mmutf8fix did not detect two invalid sequences\n  Thanks to Axel Rau for the patch.\n- bugfix: file descriptor leak with Guardtime signatures\n  When a .gtstate file is opened it is never closed. This is especially\n  bad when dynafiles frequently get evicted from dynafile cache and be\n  re-opened again.\n- bugfix: busy loop in tcp listener when running out of file descriptors\n  Thanks to Susant Sahani for the patch.\n- bugfix: mishandling of input modules not supporting new input instances\n  If they did not support this, accidentally the output module part of the\n  module union was written, leading to unpredictable results. Note: all\n  core modules do support this interface, but some contributed or very\n  old ones do not.\n- bugfix: double-free when ruleset() parser parameters were used\n  While unlikely, this could cause stability issues even after the\n  config phase.\n- bugfix: output modules with parameters with multiple passing modes\n  could caused strange behavior including aborts\n  This was due to the fact that the action module only preserved and\n  processed the last set passing mode. Note that this was not a problem\n  for the plugins provided by the rsyslog git: none of them uses different\n  passing modes.\n  Thanks to Tomas Heinrich for providing a very detailed bug report.\n- various fixes after coverity scan\n  These do not address issues seen in practice but those seen by the tool.\n  Some of them may affect practical deployments.\n  Thanks to Tomas Heinrich for the patches.\n- bugfix imuxsock: \"Last message repeated...\" was not emitted at shutdown\n  The \"Last message repeated...\" notice didn't get printed if rsyslog was\n  shut down before the repetition was broken.\n  Thanks to Tomas Heinrich for the patch.\n- bugfix: make dist failed when GUARDTIME or LIBGCRYPT feature was disabled\n- bugfix: mmjsonparse did not build with json-c < 0.10\n  This was a regression introduced some time in the past in order to\n  support API changes in json-c. Now we check for the version and use\n  proper code.\n- bugfix: mmanon did not properly anonymize IP addresses starting with '9'\n  Thanks to defa-at-so36.net for reporting this problem.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=529\n---------------------------------------------------------------------------\nVersion 7.6.3 [v7.6-stable] 2014-03-27\n- add capability to override GnuTLS path in build process\n  Thanks to Clayton Shotwell for the patch\n- support for librelp 1.2.5\n  Support new return states of librelp 1.2.5 to emit better error messages\n  For obvious reasons, librelp 1.2.5 is now required.\n- bugfix: ompipe used invalid default template\n  This is a regression from an old change (didn't track it down precisely,\n  but over a year ago). It used the Forwarding template instead of\n  the file template (so we have a full syslog header). This fix corrects\n  it back to previous behavior, but new scripts that used the wrong\n  format may now need to have the RSYSLOG_ForwardingFormat template\n  explicitly be applied.\n  closes: https://github.com/rsyslog/rsyslog/issues/50\n- bugfix: ompipe did emit many suspension messages for /dev/xconsole\n  (hopefully now) closes: https://github.com/rsyslog/rsyslog/issues/35\n  When it was present, but nobody reading from it. The problem\n  is the way the rsyslog v7 engine tries to resolve failures in outputs.\n  It does some retries, and along those lines some state information gets\n  lost and it is close to impossible to retain it. However, the actual\n  root problem is that ompipe does not reliably detect if it is able to\n  recover. The problem here is that it actually does not know this\n  before it does an actual write. These two things together mess up the\n  logic that suppresses invalid resumption/suspension messages\n  (actually, the plugin switches state really that often).\n  Nevertheless, the prime problem with /dev/xconsole (and probably\n  most other pipes as well) is that it gets full. So I have now added\n  code that checks, during resume processing, if the pipe is writable.\n  If it is not, resume is deferred. That should address the case.\n---------------------------------------------------------------------------\nVersion 7.6.2 [v7.6-stable] 2014-03-17\n- support for librelp 1.2.4\n  This was necessary due to the problems with librelp 1.2.3 API stability.\n  We now use the new native 1.2.4 APIs to learn about the state of\n  librelp's TLS support.\n  For obvious reasons, librelp 1.2.4 is now required.\n---------------------------------------------------------------------------\nVersion 7.6.1 [v7.6-stable] 2014-03-13\n- added \"action.reportSuspension\" action parameter\n  This now permits to control handling on a per-action basis rather to\n  the previous \"global setting only\".\n- \"action resumed\" message now also specifies module type\n  which makes troubleshooting a bit easier. Note that we cannot output all\n  the config details (like destination etc) as this would require much more\n  elaborate code changes, which we at least do not like to do in the\n  stable version.\n- better and more consistent action naming, action queues now always \n  contain the word \"queue\" after the action name\n- add support for \"tls-less\" librelp\n  we now require librelp 1.2.3, as we need the new error code definition\n  See also: https://github.com/rsyslog/librelp/issues/1\n- build system improvements\n  * autoconf subdir option\n  * support for newer json-c packages\n  Thanks to Michael Biebl for the patches.\n- imjournal enhancements:\n  * log entries with empty message field are no longer ignored\n  * invalid facility and severity values are replaced by defaults\n  * new config parameters to set default facility and severity\n  Thanks to Tomas Heinrich for implementing this\n- bugfix: ompipe did resume itself even when it was still in error\n  See: https://github.com/rsyslog/rsyslog/issues/35\n  Thanks to github user schplat for reporting\n- bugfix: \"action xxx suspended\" did report incorrect error code\n- bugfix: ommongodb's template parameter was mandatory but should have\n  been optional\n  Thanks to Alain for the analysis and the patch.\n- bugfix: only partial doc was put into distribution tarball\n  Thanks to Michael Biebl for alerting us.\n  see also: https://github.com/rsyslog/rsyslog/issues/31\n- bugfix: async ruleset did process already-deleted messages\n  Thanks to John Novotny for the patch.\n---------------------------------------------------------------------------\nVersion 7.6.0 [v7.6-stable] 2014-02-12\nThis starts a new stable branch based on 7.5.8 plus the following changes:\n- bugfix: imuxsock input parameters were not accepted\n  due to copy&paste error. Thanks to Andy Goldstein for the fix.\n- added ProcessInternalMessages global system parameter\n  This permits to inject rsyslog status messages into *another* main\n  syslogd or the journal.\n- new dependency: liblogging-stdlog (for submitting to external logger)\n- bugfix: json templates are improperly created\n  Strings miss the terminating NUL character, which obviously can lead\n  to all sorts of problems.\n  See also: https://github.com/rsyslog/rsyslog/issues/27\n  Thanks to Alain for the analysis and the patch.\n- ompgsql bugfix: improper handling of auto-backgrounding mode \n  If rsyslog was set to auto-background itself (default code behavior, but\n  many distros now turn it off for good reason), ompgsql could not\n  properly connect. This could even lead to a segfault. The core reason\n  was that a PG session handle was kept open over a fork, something that\n  is explicitly forbidden in the PG API.\n  Thanks to Alain for the analysis and the patch.\n---------------------------------------------------------------------------\nVersion 7.5.8 [v7-release candidate] 2014-01-09\n- add exec_template() RainerScript function\n- add debug.onShutdown and debug.logFile global parameters\n  These enable the new \"debug on shutdown\" mode, which can be used to\n  track hard to find problems that occur during system shutdown.\n- Add directives for numerically specifying GIDs/UIDs\n  The already present directives (FileOwner, FileGroup, DirOwner,\n  DirGroup) translate names to numerical IDs, which depends on the user\n  information being available during rsyslog's startup. This can fail if\n  the information is obtained over a network or from a service such as\n  SSSD. The new directives provide a way to specify the numerical IDs\n  directly and bypass the lookup.\n  Thanks to Tomas Heinrich for the patch.\n- actions now report if they suspend and resume themselves\n  this is by default on and controllable by the action.reportSuspension\n  global parameter\n- bugfix: omelasticsearch fail.es stats counter was improperly maintained\n- bugfix: mmrfc5424addhmac: \"key\" parameter was not properly processed\n- add new impstats action counters:\n  * suspended\n  * suspended.duration\n  * resumed\n---------------------------------------------------------------------------\nVersion 7.5.7 [v7-devel] 2013-11-25\n- queue defaults have changed\n  * high water mark is now dynamically 90% of queue size\n  * low water makr is now dynamically 70% of queue size\n  * queue.discardMark is now dynamically 98% of queue size\n  * queue.workerThreadMinimumMessage set to queue.size / num workers\n  For queues with very low queue.maxSize (< 100), \"emergency\" defaults\n  will be used.\n- worker thread pool handling has been improved\n  Among others, permits pool to actually shrink (was quite hard with\n  previous implementation. This will also improve performance and/or\n  lower system overhead on busy systems.\n  Thanks to Pavel Levshin for the enhancement.\n- bugfix: mmpstrucdata generated inaccessible properties\n- bugfix: RainerScript optimizer did not optimize PRI filters\n  things like \"if $syslogfacility-text == \"local3\"\" were not converted\n  to PRIFILT. This was a regression introduced in 7.5.6.\n- bugfix: legacy directive $ActionQueueWorkerThreads was not honored\n- bugfix: segfault on startup when certain script constructs are used\n  e.g. \"if not $msg ...\"\n- bugfix: ommysql lost configfile/section parameters after first close\n  This means that when a connection was broken, it was probably\n  re-instantiated with different parameters than configured.\n- bugfix: regression in template processing with subtrees in templates\n  Thanks to Pavel Levshin for the fix\n- bugfix: regular worker threads are not properly (re)started if DA\n  mode is active.\n  This occurs only under rare conditions, but definitely is a bug that\n  needed to be addressed. It probably is present since version 4.\n  Note that this patch has not been applied to v7.4-stable, as it\n  is very unlikely to happen and the fix itself has some regression\n  potential (the fix looks very solid, but it addresses a core component).\n  Thanks to Pavel Levshin for the fix\n- now emit warning message if om with msg passing mode uses action queue\n  These can modify the message, and this causes races.\n- bugfix: $SystemLogUseSysTimeStamp/$SystemLogUsePIDFromSystem did not work\n  Thanks to Tomas Heinrich for the patch.\n---------------------------------------------------------------------------\nVersion 7.5.6 [devel] 2013-10-29\n- impstats: add capability to bind to a ruleset\n- improved performance of RainerScript variable access\n  by refactoring the whole body of variable handling code. This also\n  solves some of the anomalies experienced in some versions of rsyslog.\n  All variable types are now handled in unified code, including\n  access via templates.\n- RainerScript: make use of 64 bit for numbers where available\n  Thanks to Pavel Levshin for enhancement.\n- slight performance optimization if GCC is used\n  We give branch prediction hints for the frequent RETiRet macro which is\n  used for error handling. Some slight performance gain is to be expected\n  from that.\n- removed global variable support\n  The original idea was not well thought out and global variables, as\n  implemented, worked far different from what anybody would expect. As\n  such, we consider the current approach as an experiment that did not\n  work out and opt to removing it, clearing the way for a better future\n  solution. Note: global vars were introduced in 7.5.3 on Sept, 11th 2013.\n- new module mmsequence, primarily used for action load balancing\n  Thanks to Pavel Levshin for contributing this module.\n- bugfix: unset statement always worked on message var, even if local\n  var was given\n- imudp: support for binding to ruleset added\n- bugfix: segfault if variable was assigned to non-container subtree\n  Thanks to Pavel Levshin for the fix\n- bugfix: imuxsock did not support addtl sockets if syssock was disabled\n  Thanks to Pavel Levshin for the fix\n- bugfix: running imupd on multiple threads lead to segfault if recvmmsg\n  is available\n- bugfix: imudp when using recvmmsg could report wrong sender IP\n- bugfix: segfault if re_extract() function was used and no match found\n- bugfix: omelasticsearch did not compile on platforms without atomic\n  instructions\n- bugfix: potential misaddressing on startup if property-filter was used\n  This could happen if the property name was longer than 127 chars, a case\n  that would not happen in practice.\n- bugfix: invalid property filter was not properly disabled in ruleset\n  Note: the cosmetic memory leak introduced with that patch in 7.4.5 is\n  now also fixed.\n- imported bugfixes from 7.4.6 stable release\n---------------------------------------------------------------------------\nVersion 7.5.5 [devel] 2013-10-16\n- imfile: permit to monitor an unlimited number of files\n- imptcp: add \"defaultTZ\" input parameter\n- imudp: support for multiple receiver threads added\n- imudp: add \"dfltTZ\" input config parameter\n- bugfix: memory leak in mmnormalize\n- bugfix: mmutf8fix did not properly handle invalid UTF-8 at END of message\n  if the very last character sequence was too long, this was not detected\n  Thanks to Risto Vaarandi for reporting this problem.\n- mmanon: removed the check for specific \"terminator characters\" after \n  last octet. As it turned out, this didn't work in practice as there\n  was an enormous set of potential terminator chars -- so removing\n  them was the best thing to do. Note that this may change behavior of\n  existing installations. Yet, we still consider this an important\n  bugfix, that should be applied to the stable branch.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=477\n  Thanks to Muri Cicanor for initiating the discussion\n- now requires libestr 0.1.7 as early versions had a nasty bug in\n  string comparisons\n- bugfix: mmanon did not detect all IP addresses in rewrite mode\n  The problem occurred if two IPs were close to each other and the first one\n  was shrunk.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=485\n  Thanks to micah-at-riseup.net for reporting this bug\n- bugfix: mmanon sometimes used invalid replacement char in simple mode\n  depending on configuration sequence, the replacement character was set\n  to 's' instead of the correct value. Most importantly, it was set to\n  's' if simple mode was selected and no replacement char set.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=484\n  Thanks to micah-at-riseup.net for reporting this bug\n- bugfix: memory leak in mmnormalize\n- bugfix: array-based ==/!= comparisons lead to invalid results\n  This was a regression introduced in 7.3.5 bei the PRI optimizer\n---------------------------------------------------------------------------\nVersion 7.5.4 [devel] 2013-10-07\n- mmpstrucdata: new module to parse RFC5424 structured data into json\n  message properties\n- change main/ruleset queue defaults to be more enterprise-like\n  new defaults are queue.size 100,000 max workers 2, worker\n  activation after 40,000 msgs are queued, batch size 256. These settings\n  are much more useful for enterprises and will not hurt low-end systems\n  that much. This is part of our re-focus on enterprise needs.\n- omfwd: new action parameter \"maxErrorMessages\" added\n- omfile: new module parameters to set action defaults added\n  * dirCreateMode\n  * fileCreateMode\n- mmutf8fix: new module to fix invalid UTF-8 sequences\n- imuxsock: handle unlimited number of additional listen sockets\n- doc: improve usability by linking to relevant web resources\n  The idea is to enable users to quickly find additional information,\n  samples, HOWTOs and the like on the main site.\n  At the same time, (very) slightly remove memory footprint when\n  few listeners are monitored.\n- bugfix: omfwd parameter streamdrivermode was not properly handled\n  it was always overwritten by whatever value was set via the \n  legacy directive $ActionSendStreamDriverMode\n- imtcp: add streamdriver.name module parameter\n  permits overriding the system default stream driver (gtls, ptcp)\n- bugfix: build system: libgcrypt.h needed even if libgrcypt was disabled\n  Thanks to Jonny Törnbom for reporting this problem\n- imported bugfixes from 7.4.4\n---------------------------------------------------------------------------\nVersion 7.5.3 [devel] 2013-09-11\n- imfile: support for escaping LF characters added\n  embedded LF in syslog messages cause a lot of trouble. imfile now has\n  the capability to escape them to \"#012\" (just like the regular control\n  character escape option). This requires new-style input statements to be\n  used. If legacy configuration statements are used, LF escaping is always\n  turned off to preserve compatibility.\n  NOTE: if input() statements were already used, there is a CHANGE OF\n        BEHAVIOR: starting with this version, escaping is enabled by\n\tdefault. So if you do not want it, you need to add\n\tescapeLF=\"off\"\n\tto the input statement. Given the trouble LFs cause and the fact\n\tthat the majority of installations still use legacy config, we\n\tconsidered this behavior change acceptable and useful.\n  see also: http://blog.gerhards.net/2013/09/imfile-multi-line-messages.html\n- add support for global and local variables\n- bugfix: queue file size was not correctly processed\n  this could lead to using one queue file per message for sizes >2GiB\n  Thanks to Tomas Heinrich for the patch.\n- add main_queue() configuration object to configure main message queue\n- bugfix: stream compression in imptcp caused timestamp to be corrupted\n- imudp: add ability to specify SO_RCVBUF size (rcvbufSize parameter)\n- imudp: use inputname for statistics, if configured\n- impstats: add process resource usage counters [via getrusage()]\n- impstats: add parameter \"resetCounters\" to report delta values\n  possible for most, but not all, counters. See doc for details.\n- librelp 1.2.0 is now required\n- make use of new librelp generic error reporting facility\n  This leads to more error messages being passed to the user and\n  thus simplified troubleshooting.\n- bugfix: very small memory leak in imrelp\n  more or less cosmetic, a single memory block was not freed, but this\n  only happens immediately before termination (when the OS automatically\n  frees all memory). Still an annoyance e.g. in valgrind.\n- fix compile problem in debug build\n- imported fixes from 7.4.4\n---------------------------------------------------------------------------\nVersion 7.5.2 [devel] 2013-07-04\n- librelp 1.1.4 is now required\n  We use API extensions for better error reporting and higher performance.\n- omrelp: use transactional mode to make imrelp emit bulk sends\n- omrelp: add \"windowSize\" parameter to set custom RELP window size\n- bugfix: double-free in omelasticsearch\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=461\n  a security advisory for this bug is available at:\n     http://www.lsexperts.de/advisories/lse-2013-07-03.txt\n  CVE: CVE-2013-4758 \n  PLEASE NOTE: This issue only existed if omelasticsearch was used\n  in a non-default configuration, where the \"errorfile\" parameter\n  was specified. Without that parameter set, the bug could not\n  be triggered.\n  Thanks to Markus Vervier and Marius Ionescu for providing a detailed\n  bug report. Special thanks to Markus for coordinating his security\n  advisory with us.\n- doc: fixed various typos\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=391\n  Thanks to Georgi Georgiev for the patch.\n---------------------------------------------------------------------------\nVersion 7.5.1 [devel] 2013-06-26\n- librelp 1.1.3 is required - older versions can lead to a segfault\n- add mmfields, which among others supports easy parsing of CEF messages\n- omrelp:\n  * new parameter \"compression.prioritystring\" to control encryption\n    parameters used by GnuTLS\n- imrelp:\n  * new parameter \"compression.dhbits\" to control the number of\n    bits being used for Diffie-Hellman key generation\n  * new parameter \"compression.prioritystring\" to control encryption\n    parameters used by GnuTLS\n  * support for impstats added\n  * support for setting permitted peers (client authentication) added\n  * bugfix: potential segfault at startup on invalid config parameters\n- imjournal: imported patches from 7.4.1\n- omprog: add support for command line parameters\n- added experimental TCP stream compression (imptcp only, currently)\n- added BSD-specific syslog facilities\n  * \"console\"\n  * \"bsd_security\" - this is called \"security\" under BSD, but that name\n    was unfortunately already taken by some standard facility. So I \n    did the (hopefully) second-best thing and renamed it a little.\n- imported fixes from 7.4.2 (especially build problems on FreeBSD)\n- bugfix: imptcp did not properly initialize compression status variable\n  could lead to segfault if stream:always compression mode was selected\n---------------------------------------------------------------------------\nVersion 7.5.0 [devel] 2013-06-11\n- imrelp: implement \"ruleset\" module parameter\n- imrelp/omrelp: add TLS & compression (zip) support\n- omrelp: add \"rebindInterval\" parameter\n- add -S command line option to specify IP address to use for RELP client\n  connections\n  Thanks to Axel Rau for the patch.\n---------------------------------------------------------------------------\nVersion 7.4.11  [v7.4-stable] *never released*\n- imjournal enhancements:\n  * log entries with empty message field are no longer ignored\n  * invalid facility and severity values are replaced by defaults\n  * new config parameters to set default facility and severity\n  Thanks to Tomas Heinrich for implementing this\n---------------------------------------------------------------------------\nVersion 7.4.10  [v7.4-stable] 2014-02-12\n- bugfix: json templates are improperly created\n  Strings miss the terminating NUL character, which obviously can lead\n  to all sorts of problems.\n  See also: https://github.com/rsyslog/rsyslog/issues/27\n  Thanks to Alain for the analysis and the patch.\n- ompgsql bugfix: improper handling of auto-backgrounding mode \n  If rsyslog was set to auto-background itself (default code behavior, but\n  many distros now turn it off for good reason), ompgsql could not\n  properly connect. This could even lead to a segfault. The core reason\n  was that a PG session handle was kept open over a fork, something that\n  is explicitly forbidden in the PG API.\n  Thanks to Alain for the analysis and the patch.\n---------------------------------------------------------------------------\nVersion 7.4.9  [v7.4-stable] 2014-01-22\n- added ProcessInternalMessages global system parameter\n  This permits to inject rsyslog status messages into *another* main\n  syslogd or the journal.\n- new dependency: liblogging-stdlog (for submitting to external logger)\n- bugfix: imuxsock input parameters were not accepted\n  due to copy&paste error. Thanks to Andy Goldstein for the fix.\n- bugfix: potential double-free in RainerScript equal comparison\n  happens if the left-hand operand is JSON object and the right-hand\n  operand is a non-string that does not convert to a number (for\n  example, it can be another JSON object, probably the only case that\n  could happen in practice). This is very unlikely to be triggered.\n- bugfix: some RainerScript Json(Variable)/string comparisons were wrong\n---------------------------------------------------------------------------\nVersion 7.4.8  [v7.4-stable] 2014-01-08\n- rsgtutil provides better error messages on unfinished signature blocks\n- bugfix: guard against control characters in internal (error) messages\n  Thanks to Ahto Truu for alerting us.\n- bugfix: immark did emit messages under kern.=info instead of syslog.=info\n  Note that his can potentially break existing configurations that\n  rely on immark sending as kern.=info. Unfortunately, we cannot leave\n  this unfixed as we never should emit messages under the kern facility.\n---------------------------------------------------------------------------\nVersion 7.4.7  [v7.4-stable] 2013-12-10\n- bugfix: limiting queue disk space did not work properly\n  * queue.maxdiskspace actually initializes queue.maxfilesize\n  * total size of queue files was not checked against\n    queue.maxdiskspace for disk assisted queues.\n  Thanks to Karol Jurak for the patch.\n- bugfix: linux kernel-like ratelimiter did not work properly with all\n  inputs (for example, it did not work with imdup). The reason was that\n  the PRI value was used, but that needed parsing of the message, which\n  was done too late.\n- bugfix: disk queues created files in wrong working directory\n  if the $WorkDirectory was changed multiple times, all queues only\n  used the last value set.\n- bugfix: legacy directive $ActionQueueWorkerThreads was not honored\n- bugfix: segfault on startup when certain script constructs are used\n  e.g. \"if not $msg ...\"\n- bugfix: imuxsock: UseSysTimeStamp config parameter did not work correctly\n  Thanks to Tomas Heinrich for alerting us and providing a solution\n  suggestion.\n- bugfix: $SystemLogUseSysTimeStamp/$SystemLogUsePIDFromSystem did not work\n  Thanks to Tomas Heinrich for the patch.\n- improved checking of queue config parameters on startup\n- bugfix: call to ruleset with async queue did not use the queue\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=443\n- bugfix: if imtcp is loaded and no listeners are configured (which is\n  uncommon), rsyslog crashes during shutdown.\n---------------------------------------------------------------------------\nVersion 7.4.6  [v7.4-stable] 2013-10-31\n- bugfix: potential abort during HUP\n  This could happen when one of imklog, imzmq3, imkmsg, impstats,\n  imjournal, or imuxsock were under heavy load during a HUP.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=489\n  Thanks to Guy Rozendorn for reporting the problem and Peval Levshin for\n  his analysis.\n- bugfix: imtcp flowControl parameter incorrectly defaulted to \"off\"\n  This could cause message loss on systems under heavy load and was\n  a change-of-behavior to previous version. This is a regression\n  most probably introduced in 5.9.0 (but did not try hard to find the\n  exact point of its introduction).\n- now requires libestr 0.1.9 as earlier versions lead to problems with\n  number handling in RainerScript\n- bugfix: memory leak in strlen() RainerScript function\n  Thanks to Gregoire Seux for reporting this bug.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=486\n- bugfix: buffer overrun if re_extract function was called for submatch 50\n  Thanks to Pavel Levshin for reporting the problem and its location.\n- bugfix: memleak in re_extract() function\n  Thanks to Pavel Levshin for reporting this problem.\n- bugfix: potential abort in RainerScript optimizer\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=488\n  Thanks to Thomas Doll for reporting the problem and Pavel Levshin for\n  fixing it.\n- bugfix: memory leak in omhiredis\n  Thanks to Pavel Levshin for the fix\n- bugfix: segfault if variable was assigned to non-container subtree\n  Thanks to Pavel Levshin for the fix\n---------------------------------------------------------------------------\nVersion 7.4.5  [v7.4-stable] 2013-10-22\n- mmanon: removed the check for specific \"terminator characters\" after \n  last octet. As it turned out, this didn't work in practice as there\n  was an enormous set of potential terminator chars -- so removing\n  them was the best thing to do. Note that this may change behavior of\n  existing installations. Yet, we still consider this an important\n  bugfix, that should be applied to the stable branch.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=477\n  Thanks to Muri Cicanor for initiating the discussion\n- now requires libestr 0.1.8 as early versions had a nasty bug in\n  string comparisons\n- omelasticsearch: add failed.httprequests stats counter\n- bugfix: invalid property filter was not properly disabled in ruleset\n  Note that this bugfix introduces a very slight memory leak, which is\n  cosmetic, as it just holds data until termination that is no longer\n  needed. It is just the part of the config that was invalid. We will\n  \"fix\" this \"issue\" in the devel version first, as the fix is a bit\n  too intrusive to do without hard need in the stable version.\n- bugfix: segfault if re_extract() function was used and no match found\n- bugfix: potential misaddressing on startup if property-filter was used\n  This could happen if the property name was longer than 127 chars, a case\n  that would not happen in practice.\n- bugfix: omelasticsearch: correct failed.http stats counter\n- bugfix: omelasticsearch: did not correctly initialize stats counters\n- bugfix: omelasticsearch: failed.es counter was only maintained in bulk mode\n  This usually did not lead to any problems, because they are in static\n  memory, which is initialized to zero by the OS when the plugin is\n  loaded. But it may cause problems especially on systems that do not\n  support atomic instructions - in this case the associated mutexes also\n  did not get properly initialized.\n- bugfix: mmanon did not detect all IP addresses in rewrite mode\n  The problem occurred if two IPs were close to each other and the first one\n  was shrunk.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=485\n  Thanks to micah-at-riseup.net for reporting this bug\n- bugfix: mmanon sometimes used invalid replacement char in simple mode\n  depending on configuration sequence, the replacement character was set\n  to 's' instead of the correct value. Most importantly, it was set to\n  's' if simple mode was selected and no replacement char set.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=484\n  Thanks to micah-at-riseup.net for reporting this bug\n- bugfix: memory leak in mmnormalize\n- bugfix: array-based ==/!= comparisons lead to invalid results\n  This was a regression introduced in 7.3.5 bei the PRI optimizer\n- bugfix: omprog blocked signals to executed programs\n  The made it impossible to send signals to programs executed via\n  omprog.\n  Thanks to Risto Vaarandi for the analysis and a patch.\n- bugfix: doc: imuxsock legacy param $SystemLogSocketParseTrusted was\n  misspelled\n  Thanks to David Lang for alerting us\n- bugfix: imfile \"facility\" input parameter improperly handled\n  caused facility not to be set, and severity to be overwritten with\n  the facility value.\n  Thanks to forum user dmunny for reporting this bug.\n- bugfix: small memory leak in imfile when $ResetConfigVariables was used\n  Thanks to Grégory Nuyttens for reporting this bug and providing a fix\n- bugfix: segfault on startup if TLS was used but no CA cert set\n- bugfix: segfault on startup if TCP TLS was used but no cert or key set\n- bugfix: some more build problems with newer json-c versions\n  Thanks to Michael Biebl for mentioning the problem.\n- bugfix: build system: libgcrypt.h needed even if libgrcypt was disabled\n  Thanks to Jonny Törnbom for reporting this problem\n---------------------------------------------------------------------------\nVersion 7.4.4  [v7.4-stable] 2013-09-03\n- better error messages in GuardTime signature provider\n  Thanks to Ahto Truu for providing the patch.\n- make rsyslog use the new json-c pkgconfig file if available\n  Thanks to the Gentoo team for the patches.\n- bugfix: imfile parameter \"persistStateInterval\" was unusable\n  due to a case typo in imfile; work-around was to use legacy config\n  Thanks to Brandon Murphy for reporting this bug.\n- bugfix: TLV16 flag encoding error in signature files from GT provider\n  This fixes a problem where the TLV16 flag was improperly encoded.\n  Unfortunately, existing files already have the bug and may not properly\n  be processed. The fix uses constants from the GuardTime API lib to\n  prevent such problems in the future.\n  Thanks to Ahto Truu for providing the patch.\n- bugfix: slightly malformed SMTP handling in ommail\n- bugfix: segfault in omprog if no template was provided (now dflt is used)\n- bugfix: segfault in ompipe if no template was provided (now dflt is used)\n- bugfix: segfault in omsnmp if no template was provided (now dflt is used)\n- bugfix: some omsnmp optional config params were flagged as mandatory\n- bugfix: segfault in omelasticsearch when resuming queued messages\n  after restarting Elasticsearch\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=464\n- bugfix: imtcp addtlframedelimiter could not be set to zero\n  Thanks to Chris Norton for alerting us.\n- doc bugfix: remove no-longer existing omtemplate from developer doc\n  was specifically mentioned as a sample for creating new plugins\n  Thanks to Yannick Brosseau for alerting us of this problem.\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=473\n---------------------------------------------------------------------------\nVersion 7.4.3  [v7.4-stable] 2013-07-18\n- bugfix: queue file size was not correctly processed\n  this could lead to using one queue file per message for sizes >2GiB\n  Thanks to Tomas Heinrich for the patch.\n- bugfix: $QHOUR/$HHOUR were always \"00\" or \"01\"\n  regression some time between v5 and here\n  Thanks to forum user rjmcinty for reporting this bug\n- bugfix: testbench tool chkseq did improperly report invalid file\n  This happened when permitted duplicate values existed in the very\n  last lines, right before end-of-file.\n  Thanks to Radu Gheorghe for reporting this bug.\n---------------------------------------------------------------------------\nVersion 7.4.3  [v7.4-stable] 2013-07-18\n- bugfix: memory leak if disk queues were used and json data present\n- bugfix: CEE/json data was lost during disk queue operation\n- bugfix: potential segfault during startup on invalid config\n  could happen if invalid actions were present, which could lead\n  to improper handling in optimizer.\n- bugfix: 100% CPU utilization when DA queue became full\n- bugfix: omlibdbi did not properly close connection on some errors\n  This happened to errors occurring in Begin/End Transaction entry\n  points.\n- cosmetic bugfix: file name buffer was not freed on disk queue destruction\n  This was an extremely small one-time per run memleak, so nothing of\n  concern. However, it bugs under valgrind and similar memory debuggers.\n- fix build on FreeBSD\n  Thanks to Christiano Rolim for the patch\n---------------------------------------------------------------------------\nVersion 7.4.2  [v7.4-stable] 2013-07-04\n- bugfix: in RFC5425 TLS, multiple wildcards in auth could cause segfault\n- bugfix: RainerScript object required parameters were not properly\n  checked - this could result to segfaults on startup if parameters\n  were missing.\n- bugfix: double-free in omelasticsearch\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=461\n  a security advisory for this bug is available at:\n     http://www.lsexperts.de/advisories/lse-2013-07-03.txt\n  CVE: CVE-2013-4758 \n  PLEASE NOTE: This issue only existed if omelasticsearch was used\n  in a non-default configuration, where the \"errorfile\" parameter\n  was specified. Without that parameter set, the bug could not\n  be triggered.\n  Thanks to Markus Vervier and Marius Ionescu for providing a detailed\n  bug report. Special thanks to Markus for coordinating his security\n  advisory with us.\n- bugfix: omrelp potential segfault at startup on invalid config parameters\n- bugfix: small memory leak when $uptime property was used\n- bugfix: potential segfault on rsyslog termination in imudp\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=456\n- bugfix: lmsig_gt abort on invalid configuration parameters\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=448\n  Thanks to Risto Laanoja for the patch.\n- imtcp: fix typo in \"listner\" parameter, which is \"listener\"\n  Currently, both names are accepted.\n- solved build problems on FreeBSD\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=457\n  closes: http://bugzilla.adiscon.com/show_bug.cgi?id=458\n  Thanks to Christiano for reporting and suggesting patches\n- solved build problems on CENTOS5\n---------------------------------------------------------------------------\nVersion 7.4.1  [v7.4-stable] 2013-06-17\n- imjournal: add ratelimiting capability\n  The original imjournal code did not support ratelimiting at all. We\n  now have our own ratelimiter. This can mitigate against journal\n  database corruption, when the journal re-sends old data. This is a\n  current bug in systemd journal, but we won't outrule this to happen\n  in the future again. So it is better to have a safeguard in place.\n  By default, we permit 20,000 messages within 10 minutes. This may\n  be a bit restrictive, but given the risk potential it seems reasonable.\n  Users requiring larger traffic flows can always adjust the value.\n- bugfix: potential loop in rate limiting\n  if the message that tells about rate-limiting gets rate-limited itself,\n  it will potentially create and endless loop\n- bugfix: potential segfault in imjournal if journal DB is corrupted\n- bugfix: prevent a segfault in imjournal if state file is not defined\n- bugfix imzmq3: potent"
        },
        {
          "name": "KNOWN_ISSUES",
          "type": "blob",
          "size": 0.28515625,
          "content": "This lists known issue with dependencies and such.\n\nLibfaketime 0.99.7 has a bug that can cause segfaults during testbench\nruns. If you experience them, either use --disable-libfaketime configure\nswitch or go back to an older version.\nsee also: https://github.com/rsyslog/rsyslog/issues/2099\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 10.802734375,
          "content": "sbin_PROGRAMS =\npkglib_LTLIBRARIES =\n\npkgconfigdir = $(libdir)/pkgconfig\n\nEXTRA_DIST = \\\n\tREADME.md \\\n\tplatform/README \\\n\tplatform/freebsd/rsyslogd \\\n\tplatform/slackware/rc.rsyslogd \\\n\tplatform/redhat/rsyslog.conf \\\n\tcontrib/README \\\n\tCONTRIBUTING.md \\\n\tCOPYING \\\n\tCOPYING.LESSER \\\n\tCOPYING.ASL20 \\\n\tcontrib/gnutls/ca.pem \\\n\tcontrib/gnutls/cert.pem \\\n\tcontrib/gnutls/key.pem\n\nSUBDIRS = compat runtime grammar . plugins/immark plugins/imuxsock plugins/imtcp plugins/imudp plugins/omtesting\n# external plugin driver is always enabled (core component)\nSUBDIRS += plugins/mmexternal\n\nif ENABLE_RSYSLOGD\nSUBDIRS += tools\nendif\n\nif ENABLE_IMKLOG\nSUBDIRS += plugins/imklog\nendif\n\nif ENABLE_IMKMSG\nSUBDIRS += contrib/imkmsg\nendif\n\nif ENABLE_IMPSTATS\nSUBDIRS += plugins/impstats\nendif\n\nif ENABLE_IMSOLARIS\nSUBDIRS += plugins/imsolaris\nendif\n\nif ENABLE_GSSAPI\nSUBDIRS += plugins/omgssapi plugins/imgssapi\nendif\n\nif ENABLE_RELP\nSUBDIRS += plugins/omrelp plugins/imrelp\nendif\n\nif ENABLE_OMFILE_HARDENED\nSUBDIRS += contrib/omfile-hardened\nendif\n\nif ENABLE_MYSQL\nSUBDIRS += plugins/ommysql\nendif\n\nif ENABLE_OMLIBDBI\nSUBDIRS += plugins/omlibdbi\nendif\n\nif ENABLE_PGSQL\nSUBDIRS += plugins/ompgsql\nendif\n\nif ENABLE_SNMP\nSUBDIRS += plugins/omsnmp\nendif\n\nif ENABLE_OMSTDOUT\nSUBDIRS += plugins/omstdout\nendif\n\nif ENABLE_PMCISCONAMES\nSUBDIRS += contrib/pmcisconames\nendif\n\nif ENABLE_PMCISCOIOS\nSUBDIRS += plugins/pmciscoios\nendif\n\nif ENABLE_PMNULL\nSUBDIRS += plugins/pmnull\nendif\n\nif ENABLE_PMNORMALIZE\nSUBDIRS += plugins/pmnormalize\nendif\n\nif ENABLE_PMAIXFORWARDEDFROM\nSUBDIRS += contrib/pmaixforwardedfrom\nendif\n\nif ENABLE_PMSNARE\nSUBDIRS += contrib/pmsnare\nendif\n\nif ENABLE_PMPANNGFW\nSUBDIRS += contrib/pmpanngfw\nendif\n\nif ENABLE_PMLASTMSG\nSUBDIRS += plugins/pmlastmsg\nendif\n\nif ENABLE_OMRULESET\nSUBDIRS += plugins/omruleset\nendif\n\nif ENABLE_OMUDPSPOOF\nSUBDIRS += plugins/omudpspoof\nendif\n\nif ENABLE_OMMONGODB\nSUBDIRS += plugins/ommongodb\nendif\n\nif ENABLE_OMHIREDIS\nSUBDIRS += contrib/omhiredis\nendif\n\nif ENABLE_OMCZMQ\nSUBDIRS += contrib/omczmq\nendif\n\nif ENABLE_OMRABBITMQ\nSUBDIRS += contrib/omrabbitmq\nendif\n\nif ENABLE_IMCZMQ\nSUBDIRS += contrib/imczmq\nendif\n\nif ENABLE_OMUXSOCK\nSUBDIRS += plugins/omuxsock\nendif\n\nif ENABLE_OMHDFS\nSUBDIRS += plugins/omhdfs\nendif\n\nif ENABLE_OMJOURNAL\nSUBDIRS += plugins/omjournal\nendif\n\nif ENABLE_IMJOURNAL\nSUBDIRS += plugins/imjournal\nendif\n\nif ENABLE_ELASTICSEARCH\nSUBDIRS += plugins/omelasticsearch\nendif\n\nif ENABLE_CLICKHOUSE\nSUBDIRS += plugins/omclickhouse\nendif\n\nif ENABLE_OMHTTP\nSUBDIRS += contrib/omhttp\nendif\n\nif ENABLE_SNMP\nSUBDIRS += plugins/omsnmp\nendif\n\nif ENABLE_MMSNMPTRAPD\nSUBDIRS += plugins/mmsnmptrapd\nendif\n\nif ENABLE_IMFILE\nSUBDIRS += plugins/imfile\nendif\n\nif ENABLE_IMDOCKER\nSUBDIRS += contrib/imdocker\nendif\n\nif ENABLE_IMPTCP\nSUBDIRS += plugins/imptcp\nendif\n\nif ENABLE_IMDIAG\nSUBDIRS += plugins/imdiag\nendif\n\nif ENABLE_MAIL\nSUBDIRS += plugins/ommail\nendif\n\nif ENABLE_FMHTTP\nSUBDIRS += plugins/fmhttp\nendif\n\nif ENABLE_FMHASH\nSUBDIRS += contrib/fmhash\nendif\n\nif ENABLE_FMUNFLATTEN\nSUBDIRS += contrib/fmunflatten\nendif\n\nif ENABLE_FFAUP\nSUBDIRS += contrib/ffaup\nendif\n\nif ENABLE_OMKAFKA\nSUBDIRS += plugins/omkafka\nendif\n\nif ENABLE_IMKAFKA\nSUBDIRS += plugins/imkafka\nendif\n\nif ENABLE_OMAZUREEVENTHUBS\nSUBDIRS += plugins/omazureeventhubs\nendif\n\nif ENABLE_IMDTLS\nSUBDIRS += plugins/imdtls\nendif\n\nif ENABLE_OMDTLS\nSUBDIRS += plugins/omdtls\nendif\n\nif ENABLE_OMPROG\nSUBDIRS += plugins/omprog\nendif\n\nif ENABLE_RFC3195\nSUBDIRS += plugins/im3195\nendif\n\nif ENABLE_MMNORMALIZE\nSUBDIRS += plugins/mmnormalize\nendif\n\nif ENABLE_MMJSONPARSE\nSUBDIRS += plugins/mmjsonparse\nendif\n\nif ENABLE_MMGROK\nSUBDIRS += contrib/mmgrok\nendif\n\nif ENABLE_MMAUDIT\nSUBDIRS += plugins/mmaudit\nendif\n\nif ENABLE_MMANON\nSUBDIRS += plugins/mmanon\nendif\n\nif ENABLE_MMRM1STSPACE\nSUBDIRS += plugins/mmrm1stspace\nendif\n\nif ENABLE_MMUTF8FIX\nSUBDIRS += plugins/mmutf8fix\nendif\n\nif ENABLE_MMCOUNT\nSUBDIRS += contrib/mmcount\nendif\n\nif ENABLE_MMSEQUENCE\nSUBDIRS += contrib/mmsequence\nendif\n\nif ENABLE_MMDBLOOKUP\nSUBDIRS += plugins/mmdblookup\nendif\n\nif ENABLE_MMDARWIN\nSUBDIRS += contrib/mmdarwin\nendif\n\nif ENABLE_MMFIELDS\nSUBDIRS += plugins/mmfields\nendif\n\nif ENABLE_MMPSTRUCDATA\nSUBDIRS += plugins/mmpstrucdata\nendif\n\nif ENABLE_MMRFC5424ADDHMAC\nSUBDIRS += contrib/mmrfc5424addhmac\nendif\n\n# omhttpfs\nif ENABLE_OMHTTPFS\nSUBDIRS += contrib/omhttpfs\nendif\n\n# omamqp1\nif ENABLE_OMAMQP1\nSUBDIRS += contrib/omamqp1\nendif\n\n# imbatchreport\nif ENABLE_IMBATCHREPORT\nSUBDIRS += contrib/imbatchreport\nendif\n\n# omtcl\nif ENABLE_OMTCL\nSUBDIRS += contrib/omtcl\nendif\n\n# mmkubernetes\nif ENABLE_MMKUBERNETES\nSUBDIRS += contrib/mmkubernetes\nendif\n\n# impcap\nif ENABLE_IMPCAP\nSUBDIRS += contrib/impcap\nendif\n\n# imtuxedoulog\nif ENABLE_IMTUXEDOULOG\nSUBDIRS += contrib/imtuxedoulog\nendif\n\n# improg\nif ENABLE_IMPROG\nSUBDIRS += contrib/improg\nendif\n\n# imhttp\nif ENABLE_IMHTTP\nSUBDIRS += contrib/imhttp\nendif\n\n# mmtaghostname\nif ENABLE_MMTAGHOSTNAME\nSUBDIRS += contrib/mmtaghostname\nendif\n\n# imdb2diag\nif ENABLE_PMDB2DIAG\nSUBDIRS += contrib/pmdb2diag\nendif\n\n# imhiredis\nif ENABLE_IMHIREDIS\nSUBDIRS += contrib/imhiredis\nendif\n\n# tests are added as last element, because tests may need different\n# modules that need to be generated first\nSUBDIRS += tests\n\n\n\nDISTCHECK_CONFIGURE_FLAGS=\n# make sure \"make distcheck\" tries to build all modules. This means that\n# a developer must always have an environment where every supporting library\n# is available. If that is not the case, the respective configure option may\n# temporarily be removed below. The intent behind forcing everthing to compile\n# in a make distcheck is so that we detect code that accidently was not updated\n# when some global update happened.\nDISTCHECK_CONFIGURE_FLAGS+= \\\n\t--enable-silent-rules \\\n\t--enable-rsyslogd \\\n\t--enable-omstdout \\\n\t--enable-imdiag \\\n\t--enable-testbench \\\n\t--enable-valgrind\n# currently not supported in make distcheck:\n# --enable-pgsql-tests\n# --enable-extended-tests --> should probably never be enabled due to runtime\n\nif ENABLE_DEFAULT_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= \\\n\t--enable-diagtools \\\n\t--enable-impstats \\\n\t--enable-imptcp \\\n\t--enable-klog \\\n\t--enable-mail \\\n\t--enable-mmanon \\\n\t--enable-mmaudit \\\n\t--enable-mmcount \\\n\t--enable-mmexternal \\\n\t--enable-mmfields \\\n\t--enable-mmjsonparse \\\n\t--enable-mmpstrucdata \\\n\t--enable-mmrm1stspace \\\n\t--enable-mmsequence \\\n\t--enable-mmutf8fix \\\n\t--enable-omruleset \\\n\t--enable-omuxsock \\\n\t--enable-pmaixforwardedfrom \\\n\t--enable-pmciscoios \\\n\t--enable-pmcisconames \\\n\t--enable-pmlastmsg \\\n\t--enable-pmnull \\\n\t--enable-pmsnare \\\n\t--enable-usertools\n\nelse\nDISTCHECK_CONFIGURE_FLAGS+= \\\n\t--disable-default-tests\nendif  # if ENABLE_DEFAULT_TESTS\n\nif ENABLE_IMPROG\nDISTCHECK_CONFIGURE_FLAGS+= --enable-improg\nendif\n\nif ENABLE_IMHTTP\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imhttp\nendif\n\nif ENABLE_OMPROG\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omprog\nendif\n\nif ENABLE_GSSAPI\nDISTCHECK_CONFIGURE_FLAGS+= --enable-gssapi-krb5\nendif\n\nif ENABLE_PMNORMALIZE\nDISTCHECK_CONFIGURE_FLAGS+= --enable-pmnormalize\nendif\n\nif ENABLE_MMDBLOOKUP\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mmdblookup\nendif\n\nif ENABLE_MMDARWIN\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mmdarwin\nendif\n\nif ENABLE_MMNORMALIZE\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mmnormalize\nendif\n\nif ENABLE_OMMONGODB\nDISTCHECK_CONFIGURE_FLAGS+= --enable-ommongodb\nendif\n\nif ENABLE_OMHIREDIS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omhiredis\nendif\n\nif ENABLE_MMSNMPTRAPD\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mmsnmptrapd\nendif\n\nif ENABLE_OMLIBDBI\nDISTCHECK_CONFIGURE_FLAGS+= --enable-libdbi\nendif\n\nif ENABLE_LIBGCRYPT\nDISTCHECK_CONFIGURE_FLAGS+= --enable-libgcrypt\nendif\n\nif ENABLE_OMHTTP\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omhttp\nendif\n\nif ENABLE_OMHTTPFS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omhttpfs\nendif\n\nif ENABLE_OMTCL\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omtcl\nendif\n\nif ENABLE_SNMP\nDISTCHECK_CONFIGURE_FLAGS+= --enable-snmp\nendif\n\nif ENABLE_SNMP_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-snmp-tests\nendif\n\nif ENABLE_FMHTTP\nDISTCHECK_CONFIGURE_FLAGS+= --enable-fmhttp\nendif\n\nif ENABLE_OMUDPSPOOF\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omudpspoof\nendif\n\nif ENABLE_PGSQL\nDISTCHECK_CONFIGURE_FLAGS+= --enable-pgsql\nendif\n\nif ENABLE_GNUTLS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-gnutls\nendif\n\nif ENABLE_GNUTLS_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-gnutls-tests\nelse\nDISTCHECK_CONFIGURE_FLAGS+= --disable-gnutls-tests\nendif\n\nif ENABLE_OPENSSL\nDISTCHECK_CONFIGURE_FLAGS+= --enable-openssl\nendif\n\nif ENABLE_MYSQL\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mysql\nendif\nif ENABLE_MYSQL_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mysql-tests\nendif\n\nif ENABLE_ELASTICSEARCH\nDISTCHECK_CONFIGURE_FLAGS+= --enable-elasticsearch\nendif\nif ENABLE_ELASTICSEARCH_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-elasticsearch-tests\nendif\n\nif ENABLE_CLICKHOUSE\nDISTCHECK_CONFIGURE_FLAGS+= --enable-clickhouse\nendif\nif ENABLE_CLICKHOUSE_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-clickhouse-tests\nendif\n\nif ENABLE_MMGROK\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mmgrok\nendif\n\nif ENABLE_RELP\nDISTCHECK_CONFIGURE_FLAGS+= --enable-relp --enable-omrelp-default-port=13515\nendif\n\nif ENABLE_IMKAFKA\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imkafka\nendif\nif ENABLE_OMKAFKA\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omkafka\nendif\nif ENABLE_KAFKA_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-kafka-tests\nendif\n\nif ENABLE_OMAZUREEVENTHUBS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omazureeventhubs\nendif\n\nif ENABLE_IMDTLS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imdtls\nendif\n\nif ENABLE_OMDTLS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omdtls\nendif\n\nif ENABLE_IMJOURNAL\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imjournal\nendif\nif ENABLE_OMJOURNAL\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omjournal\nendif\nif ENABLE_JOURNAL_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-journal-tests\nendif\n\nif ENABLE_IMCZMQ\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imczmq\nendif\nif ENABLE_OMCZMQ\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omczmq\nendif\n\nif ENABLE_MMTAGHOSTNAME\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mmtaghostname\nendif\n\nif ENABLE_IMTUXEDOULOG\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imtuxedolog\nendif\n\nif ENABLE_PMDB2DIAG\nDISTCHECK_CONFIGURE_FLAGS+= --enable-pmdb2diag\nendif\n\nif ENABLE_IMBATCHREPORT\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imbatchreport\nendif\n\nif ENABLE_IMFILE\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imfile\nendif\n\nif ENABLE_IMFILE_TESTS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imfile-tests\nelse\nDISTCHECK_CONFIGURE_FLAGS+= --disable-imfile-tests\nendif\n\nif ENABLE_IMPCAP\nDISTCHECK_CONFIGURE_FLAGS+= --enable-impcap\nendif\n\nif ENABLE_IMDOCKER\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imdocker\nendif\n\nif ENABLE_OMRABBITMQ\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omrabbitmq\nendif\n\nif ENABLE_MMKUBERNETES\nDISTCHECK_CONFIGURE_FLAGS+= --enable-mmkubernetes\nendif\n\nif ENABLE_OMAMQP1\nDISTCHECK_CONFIGURE_FLAGS+= --enable-omamqp1\nendif\n\nif ENABLE_DISTCHECK_WORKAROUND\nDISTCHECK_CONFIGURE_FLAGS+= --disable-testbench\nelse\nDISTCHECK_CONFIGURE_FLAGS+= --enable-testbench\nendif\n\nif ENABLE_IMHIREDIS\nDISTCHECK_CONFIGURE_FLAGS+= --enable-imhiredis\nendif\n\ndist-hook:\n\t$(AM_V_GEN)echo $(VERSION) > $(distdir)/.tarball-version\n\nACLOCAL_AMFLAGS = -I m4\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0.060546875,
          "content": "This file has been superseded by ChangeLog. Please see there.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.0615234375,
          "content": "see README.md -- this file here is just required for autotools\n"
        },
        {
          "name": "README.AIX",
          "type": "blob",
          "size": 2.6728515625,
          "content": "**AIX is NOT a supported platform**\n\nNevertheless, we try to make it at least \"best effort supported\nplatform\", but so far we have many issues towards that goal.\n\nFull details are tracked in this github issue:\n    https://github.com/rsyslog/rsyslog/issues/2597\n\nThe rest of this document contains some information that we found so\nfar and that helps us, and may help you, getting rsyslog to compile\non AIX.\n\nNote: as said in the issue tracke, we do currently NOT have a compile\nenvironment, which is the major stumbling spot on the way to make\nrsyslog reliably compile and run under AIX.\n\nGetting an environment\n----------------------\nIBM provides time-limited virtual boxes via the PDP program after\na company registered as a business partner. Not sure how long they\ncan actually be used for open source projects.\n\nSetting up an environment\n-------------------------\nAs it looks, AIX supports software installation via a (special?) version\nof yum. At the base, it seems to support RPM, which seems to be\npreinstalled with the OS.\n\nIn theory the script yum.sh from\nhttps://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/ezinstall/ppc/\nshould install a version of yum. In practice, this does at least not\nwork on PDP virtual boxes as they seem to have insufficient disk space\nand connectivity.\n\nManual installation should be possible, but on our first try disk space\nwas far too low to even unpack the tarballs (support request opened, will\nupdate doc once I know better).\n\nSee README.AIX.IBM for some build instructions from IBM once you\nmanaged to install yum.\n\nAdditional packages are required. We use\n   http://www.bullfreeware.com/\nto get them.\n\nNote: you need to\n* manually search for the RPM via the search box\n* manually download the RPM\n  we used only the core rpm without dependencies, this worked\n  on a system that was current after yum install\n* manually install the downloaded rpm vi \"rpm -i pkg.rpm\"\n* we needed these packages:\n  - flex\n  - bison\n\n\nAIX HELP\n--------\n* extend a FS assuming there is still physical disk space:\n  # actual commands used in PDP box\n  chfs -s size=200M /tmp\n  chfs -a size=4G /home\n  chfs -a size=3G /opt\n  chfs -a size=1500M /var\n\n* install yum:\n  - some step missing....\n  - have \n  - do\n       rpm -i *.rpm\n       # may bring up already installed packages, if so delete rpm file\n    until install works\n\n* if something goes wrong with yum update (libintl!), re-install expansion pack\n  mkdir pkg\n  cp ../rpm.rte.xxxx .\n  inutoc .\n  installp -acFNXYd . rpm.rte\n\n* use \"gmake\" instead of \"make\"\n\nTO BE MERGED CONTENT\ndownload rpm base files: https://www.ibm.com/developerworks/community/forums/html/topic?id=595f661f-d7bf-4e07-a296-1202751d30e2\n\nrm .toc \ninutoc . \ninstallp -acgXYd . rpm.rte \n"
        },
        {
          "name": "README.AIX.IBM",
          "type": "blob",
          "size": 1.873046875,
          "content": "This file was thankfully provided by IBM in 2018. We could not yet use it\nto try a build (see README.AIX).\n\n................................................................................\n\n- Run yum.sh(attached). This will setup yum on AIX.\n\n- Install AIX xlc compiler.\n\n- Install various packages required for setting up build environment:\n   yum install automake autoconf bash gettext gettext-devel libtool m4 make pkg-config zlib zlib-devel git gnutls gnutls-devel info flex nettle nettle-devel p11-kit-devel libffi libffi-devel gmp gmp-devel\n\n- Update all the packages using 'yum update'.\n\n- Install following rpm's from http://www.bullfreeware.com:\n  flex-2.5.35-2, libiconv-1.14-1, byacc-1.9.20121003-1\n\n- All the required packages are installed. We can now use git clone to get all the source code:\n  git clone https://github.com/rsyslog/liblogging.git\n  git clone https://github.com/rsyslog/libfastjson.git\n  git clone https://github.com/rsyslog/libestr.git\n  git clone https://github.com/rsyslog/rsyslog.git\n\n- To build rsyslog, we first build liblogging, libfastjson, libestr and then build rsyslog:\n\t-> Export following environment variables:\n\n\t   export M4=/opt/freeware/bin/m4\n\t   export PATH=$PATH:/usr/vac/bin:/opt/freeware/bin\n\t   export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/opt/freeware/lib/pkgconfig\n\n\t-> First build dependent libraries json-c-0.12, libestr-0.1.9, liblogging-1.0.4 as follows:\n\t  # cd libfastjson\n\t  # ./configure\n\t  # make\n\t  # make install\n\t  # cd ../libestr\n\t  # ./configure\n\t  # make\n\t  # make install\n\t  # cd ../liblogging\n\t  # ./configure --disable-man-pages\n\t  # make\n\t  # make install\n\n\t  Note that you should use --disable-man-pages with configure for liblogging.\n\n\t-> Now build rsyslog using following commands:\n\t   # cd rsyslog\n\t   # ./configure --enable-imfile --disable-uuid --disable-generate-man-pages --enable-imdiag --enable-omruleset\n\t   # make\n\t   # make install\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8935546875,
          "content": "Rsyslog - what is it?\n=====================\n\n[![Help Contribute to Open Source](https://www.codetriage.com/rsyslog/rsyslog/badges/users.svg)](https://www.codetriage.com/rsyslog/rsyslog)\n\nRsyslog is a **r**ocket-fast **sys**tem for **log** processing.\n\nIt offers high-performance, great security features and a modular design.\nWhile it started as a regular syslogd, rsyslog has evolved into a kind of swiss\narmy knife of logging, being able to accept inputs from a wide variety of sources,\ntransform them, and output to the results to diverse destinations.\n\nRsyslog can deliver over one million messages per second  to local destinations\nwhen limited processing is applied (based on v7, December 2013). Even with\nremote destinations and more elaborate processing the performance is usually\nconsidered \"stunning\".\n\nMailing List\n============\nhttp://lists.adiscon.net/mailman/listinfo/rsyslog\n\nInstalling rsyslog\n==================\nMost distributions carry rsyslog in their repository. So you usually just need\nto use the package manager to install it. Note that on non-systemd systems (most\nnotably Ubuntu), rsyslog usually is already installed.\n\nProject-Provided Packages\n----------------------------\nUnfortunately, distributions often do not catch up with the pace of rsyslog\ndevelopment and as such only offer old versions. To solve that problem, we have\ncreated packages for current versions ourselves.\n\nThey are available for:\n * RPM-based systems: https://www.rsyslog.com/rhelcentos-rpms/\n * Ubuntu: https://www.rsyslog.com/ubuntu-repository/\n * Debian: https://www.rsyslog.com/debian-repository/\n\nBuilding from Source\n--------------------\nFollow the instructions at: https://www.rsyslog.com/doc/v8-stable/installation/build_from_repo.html\n\n### Build Environment\n\nIn general, you need\n\n* pkg-config\n* libestr\n* liblogging (stdlog component, for testbench)\n\nIt is best to build these from source.\n\n#### CentOS 6 / RHEL\n\nFor json-c, we need:\n```\nexport PKG_CONFIG_PATH=/lib64/pkgconfig/\n```\n\n```\nsudo yum install git valgrind autoconf automake flex bison python-docutils python-sphinx json-c-devel libuuid-devel libgcrypt-devel zlib-devel openssl-devel libcurl-devel gnutls-devel mysql-devel postgresql-devel libdbi-dbd-mysql libdbi-devel net-snmp-devel\n```\n\n#### Ubuntu\n\nAdd Adiscon repository:\n```\napt-get update && apt-get install -y software-properties-common\nadd-apt-repository -y ppa:adiscon/v8-stable\n```\n\n*Note:* if you are a developer who wants to work with git master branch,\nadding the Adiscon repository is probably not a good idea. It then\nis better to also compile the supporting libraries from source, because\nnewer versions of rsyslog may need newer versions of the libraries than\nthere are in the repositories.\nLibraries in question are at least: libestr, liblognorm, libfastjson.\n\nNeeded packages to build with omhiredis support:\n```\napt-get update && apt-get install -y build-essential pkg-config libestr-dev libfastjson-dev zlib1g-dev uuid-dev libgcrypt20-dev libhiredis-dev uuid-dev libgcrypt11-dev liblogging-stdlog-dev flex bison\n```\n\nAditional packages for other modules:\n```\nlibdbi-dev libmysqlclient-dev postgresql-client libpq-dev libnet-dev librdkafka-dev libgrok-dev libgrok1 libgrok-dev libpcre3-dev libtokyocabinet-dev libglib2.0-dev libmongo-client-dev\n```\n\nFor KSI, from the Adiscon PPA:\n```\nsudo apt-get install libksi0 libksi-devel\n```\n\n#### Debian\n\n```\nsudo apt install build-essential pkg-config libestr-dev libfastjson-dev zlib1g-dev uuid-dev libgcrypt20-dev libcurl4-gnutls-dev zlib1g-dev liblogging-stdlog-dev flex bison\n```\n\n*Note:* For certain libraries version requirements might be higher,\nin that case adding debian backports repositories might help.\nFor example installing with apt libfastjson-dev -t stretch-backports.\n\n\nAditional packages for other modules:\n```\nlibdbi-dev libmysqlclient-dev postgresql-client libpq-dev libnet-dev librdkafka-dev libgrok-dev libgrok1 libgrok-dev libpcre3-dev libtokyocabinet-dev libglib2.0-dev libmongo-client-dev\n```\n\n\n\n#### openSUSE 13\n\n```\nsudo zypper install gcc make autoconf automake libtool libcurl-devel flex bison valgrind python-docutils libjson-devel uuid-devel libgcrypt-devel libgnutls-devel libmysqlclient-devel libdbi-devel libnet-devel postgresql-devel net-snmp-devellibuuid-devel libdbi-drivers-dbd-mysql\n```\n\nFor the testbench VMs:\n```\nsudo zypper install gvim mutt\n```\n\n#### SUSE LINUX Enterprise Server 11\n\nAvailable packages:\n```\nzypper install gcc make autoconf libtool flex bison\n```\n\nMissing packages:\n```\nlibcurl-devel valgrind python-docutils uuid-devel libgcrypt-devel libgnutls-devel libmysqlclient-devel libdbi-devel postgresql-devel net-snmp-devel libdbi-drivers-dbd-mysql json-c zlib-dev libdbi\n```\n\nReporting Bugs\n==============\n\nTalk to the mailing list if you think something is a bug. Often, it's just a\nmatter of doing some config trickery.\n\nFile bugs at: https://github.com/rsyslog/rsyslog/issues\n\nHow to Contribute\n=================\nContributions to rsyslog are very welcome. Fork and send us your Pull Requests.\n\nFor more information about contributing, see the\n[CONTRIBUTING](CONTRIBUTING.md) file.\n\nNote that it is easy to add output plugins using languages like Python or\nPerl. So if you need to connect to a system which is not yet supported, you\ncan easily do so via an external plugin. For more information see the\n[README](plugins/external/README.md) file in the external plugin directory.\n\nDocumentation\n=============\nThe main rsyslog documentation is available in HTML format. To read\nit, point your web browser to ./doc/manual.html. Alternatively,\nyou can view the documentation for *the most recent rsyslog version*\nonline at: https://www.rsyslog.com/doc/\n\nProject Philosophy\n==================\nWe are an open source project in all aspects and very open to outside feedback\nand contribution. We base our work on standards and try to solve all real-world\nneeds (of course, we occasionally fail tackling actually all needs ;)). While\nthe project is primarily sponsored by Adiscon, technical development is\nindependent from company goals and most decisions are solely based on mailing\nlist discussion results. There is an active community around rsyslog.\n\nThere is no such thing like being an official member of the rsyslog team. The\nclosest to that is being subscribed to the mailing list:\nhttp://lists.adiscon.net/mailman/listinfo/rsyslog\n\nThis method of open discussions is modelled after the IETF process, which is\nprobably the best-known and most successive collaborative standards body.\n\nProject Funding\n===============\nRsyslog's main sponsor Adiscon tries to fund rsyslog by selling custom\ndevelopment and support contracts. Adiscon does NOT license rsyslog under a\ncommercial license (this is simply impossible for anyone due to rsyslog's\nlicense structure).\n\nAny third party is obviously also free to offer custom development, support\nand rsyslog consulting. We gladly merge results of such third-party work into\nthe main repository (assuming it matches the few essential things written\ndown in our contribution policy).\n"
        },
        {
          "name": "action.c",
          "type": "blob",
          "size": 84.1259765625,
          "content": "/* action.c\n *\n * Implementation of the action object.\n *\n * File begun on 2007-08-06 by RGerhards (extracted from syslogd.c)\n *\n * Some notes on processing (this hopefully makes it easier to find\n * the right code in question): For performance reasons, this module\n * uses different methods of message submission based on the user-selected\n * configuration. This code is similar, but can not be abstracted because\n * of the performance-affecting differences in it. As such, it is often\n * necessary to triple-check that everything works well in *all* modes.\n * The different modes (and calling sequence) are:\n *\n * if set iExecEveryNthOccur > 1 || iSecsExecOnceInterval\n * - doSubmitToActionQComplex\n *   handles mark message reduction, but in essence calls\n * - actionWriteToAction\n * - doSubmitToActionQ\n *   (now queue engine processing)\n * if(pThis->bWriteAllMarkMsgs == RSFALSE)\n * - doSubmitToActionQNotAllMark\n * - doSubmitToActionQ (and from here like in the else case below!)\n * else\n * - doSubmitToActionQ\n * - qqueueEnqObj\n *   (now queue engine processing)\n *\n * Note that bWriteAllMakrMsgs on or off creates almost the same processing.\n * The difference ist that if WriteAllMarkMsgs is not set, we need to\n * preprocess the batch and drop mark messages which are not yet due for\n * writing.\n *\n * After dequeue, processing is as follows:\n * - processBatchMain\n * - processMsgMain (direct entry for DIRECT queue!)\n * - ...\n *\n * MORE ON PROCESSING, QUEUES and FILTERING\n * All filtering needs to be done BEFORE messages are enqueued to an\n * action. In previous code, part of the filtering was done at the\n * \"remote end\" of the action queue, which lead to problems in\n * non-direct mode (because then things run asynchronously). In order\n * to solve this problem once and for all, I have changed the code so\n * that all filtering is done before enq, and processing on the\n * dequeue side of action processing now always executes whatever is\n * enqueued. This is the only way to handle things consistently and\n * (as much as possible) in a queue-type agnostic way. However, it is\n * a rather radical change, which I unfortunately needed to make from\n * stable version 5.8.1 to 5.8.2. If new problems pop up, you now know\n * what may be their cause. In any case, the way it is done now is the\n * only correct one.\n * A problem is that, under fortunate conditions, we use the current\n * batch for the output system as well. This is very good from a performance\n * point of view, but makes the distinction between enq and deq side of\n * the queue a bit hard. The current idea is that the filter condition\n * alone is checked at the deq side of the queue (seems to be unavoidable\n * to do it that way), but all other complex conditons (like failover\n * handling) go into the computation of the filter condition. For\n * non-direct queues, we still enqueue only what is acutally necessary.\n * Note that in this case the rest of the code must ensure that the filter\n * is set to \"true\". While this is not perfect and not as simple as\n * we would like to see it, it looks like the best way to tackle that\n * beast.\n * rgerhards, 2011-06-15\n *\n * Copyright 2007-2022 Rainer Gerhards and Adiscon GmbH.\n *\n * This file is part of rsyslog.\n *\n * Rsyslog is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Rsyslog is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Rsyslog.  If not, see <http://www.gnu.org/licenses/>.\n *\n * A copy of the GPL can be found in the file \"COPYING\" in this distribution.\n */\n#include \"config.h\"\n#include <stdio.h>\n#include <assert.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <strings.h>\n#include <time.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <json.h>\n\n#include \"rsyslog.h\"\n#include \"dirty.h\"\n#include \"template.h\"\n#include \"action.h\"\n#include \"modules.h\"\n#include \"cfsysline.h\"\n#include \"srUtils.h\"\n#include \"errmsg.h\"\n#include \"batch.h\"\n#include \"wti.h\"\n#include \"rsconf.h\"\n#include \"datetime.h\"\n#include \"unicode-helper.h\"\n#include \"atomic.h\"\n#include \"ruleset.h\"\n#include \"parserif.h\"\n#include \"statsobj.h\"\n\n/* AIXPORT : cs renamed to legacy_cs as clashes with libpthreads variable in complete file*/\n#ifdef _AIX\n#define cs legacy_cs\n#endif\n\nPRAGMA_INGORE_Wswitch_enum\n\n#ifndef O_LARGEFILE\n#define O_LARGEFILE 0\n#endif\n\n#define NO_TIME_PROVIDED 0 /* indicate we do not provide any cached time */\n\n/* forward definitions */\nstatic rsRetVal ATTR_NONNULL() processBatchMain(void *pVoid, batch_t *pBatch, wti_t * const pWti);\nstatic rsRetVal doSubmitToActionQ(action_t * const pAction, wti_t * const pWti, smsg_t*);\nstatic rsRetVal doSubmitToActionQComplex(action_t * const pAction, wti_t * const pWti, smsg_t*);\nstatic rsRetVal doSubmitToActionQNotAllMark(action_t * const pAction, wti_t * const pWti, smsg_t*);\nstatic void ATTR_NONNULL() actionSuspend(action_t * const pThis, wti_t * const pWti);\nstatic void ATTR_NONNULL() actionRetry(action_t * const pThis, wti_t * const pWti);\n\n/* object static data (once for all instances) */\nDEFobjCurrIf(obj)\nDEFobjCurrIf(datetime)\nDEFobjCurrIf(module)\nDEFobjCurrIf(statsobj)\nDEFobjCurrIf(ruleset)\n\n\ntypedef struct configSettings_s {\n\tint bActExecWhenPrevSusp;\t\t\t/* execute action only when previous one was suspended? */\n\tint bActionWriteAllMarkMsgs;\t\t\t/* should all mark messages be unconditionally written? */\n\tint iActExecOnceInterval;\t\t\t/* execute action once every nn seconds */\n\tint iActExecEveryNthOccur;\t\t\t/* execute action every n-th occurrence (0,1=always) */\n\ttime_t iActExecEveryNthOccurTO;\t\t\t/* timeout for n-occurrence setting (in seconds, 0=never) */\n\tint glbliActionResumeInterval;\n\tint glbliActionResumeRetryCount;\t\t/* how often should suspended actions be retried? */\n\tint bActionRepMsgHasMsg;\t\t\t/* last messsage repeated... has msg fragment in it */\n\tuchar *pszActionName;\t\t\t\t/* short name for the action */\n\t/* action queue and its configuration parameters */\n\tqueueType_t ActionQueType;\t\t\t/* type of the main message queue above */\n\tint iActionQueueSize;\t\t\t\t/* size of the main message queue above */\n\tint iActionQueueDeqBatchSize;\t\t\t/* batch size for action queues */\n\tint iActionQHighWtrMark;\t\t\t/* high water mark for disk-assisted queues */\n\tint iActionQLowWtrMark;\t\t\t\t/* low water mark for disk-assisted queues */\n\tint iActionQDiscardMark;\t\t\t/* begin to discard messages */\n\tint iActionQDiscardSeverity;\n\t/* by default, discard nothing to prevent unintentional loss */\n\tint iActionQueueNumWorkers;\t\t\t/* number of worker threads for the mm queue above */\n\tuchar *pszActionQFName;\t\t\t\t/* prefix for the main message queue file */\n\tint64 iActionQueMaxFileSize;\n\tint iActionQPersistUpdCnt;\t\t\t/* persist queue info every n updates */\n\tint bActionQSyncQeueFiles;\t\t\t/* sync queue files */\n\tint iActionQtoQShutdown;\t\t\t/* queue shutdown */\n\tint iActionQtoActShutdown;\t\t\t/* action shutdown (in phase 2) */\n\tint iActionQtoEnq;\t\t\t\t/* timeout for queue enque */\n\tint iActionQtoWrkShutdown;\t\t\t/* timeout for worker thread shutdown */\n\tint iActionQWrkMinMsgs;\t\t\t\t/* minimum messages per worker needed to start a new one */\n\tint bActionQSaveOnShutdown;\t\t\t/* save queue on shutdown (when DA enabled)? */\n\tint64 iActionQueMaxDiskSpace;\t\t\t/* max disk space allocated 0 ==> unlimited */\n\tint iActionQueueDeqSlowdown;\t\t\t/* dequeue slowdown (simple rate limiting) */\n\tint iActionQueueDeqtWinFromHr;\t\t\t/* hour begin of time frame when queue is to be dequeued */\n\tint iActionQueueDeqtWinToHr;\t\t\t/* hour begin of time frame when queue is to be dequeued */\n} configSettings_t;\n\n\nstatic configSettings_t cs;\t\t\t\t\t/* our current config settings */\n\n/* tables for interfacing with the v6 config system */\nstatic struct cnfparamdescr cnfparamdescr[] = {\n\t{ \"name\", eCmdHdlrGetWord, 0 }, /* legacy: actionname */\n\t{ \"type\", eCmdHdlrString, CNFPARAM_REQUIRED }, /* legacy: actionname */\n\t{ \"action.errorfile\", eCmdHdlrString, 0 },\n\t{ \"action.errorfile.maxsize\", eCmdHdlrInt, 0 },\n\t{ \"action.writeallmarkmessages\", eCmdHdlrBinary, 0 }, /* legacy: actionwriteallmarkmessages */\n\t{ \"action.execonlyeverynthtime\", eCmdHdlrInt, 0 }, /* legacy: actionexeconlyeverynthtime */\n\t{ \"action.execonlyeverynthtimetimeout\", eCmdHdlrInt, 0 }, /* legacy: actionexeconlyeverynthtimetimeout */\n\t{ \"action.execonlyonceeveryinterval\", eCmdHdlrInt, 0 }, /* legacy: actionexeconlyonceeveryinterval */\n\t{ \"action.execonlywhenpreviousissuspended\", eCmdHdlrBinary, 0 },\n\t/* legacy: actionexeconlywhenpreviousissuspended */\n\t{ \"action.repeatedmsgcontainsoriginalmsg\", eCmdHdlrBinary, 0 }, /* legacy: repeatedmsgcontainsoriginalmsg */\n\t{ \"action.resumeretrycount\", eCmdHdlrInt, 0 }, /* legacy: actionresumeretrycount */\n\t{ \"action.reportsuspension\", eCmdHdlrBinary, 0 },\n\t{ \"action.reportsuspensioncontinuation\", eCmdHdlrBinary, 0 },\n\t{ \"action.resumeintervalmax\", eCmdHdlrPositiveInt, 0 },\n\t{ \"action.resumeinterval\", eCmdHdlrInt, 0 },\n\t{ \"action.externalstate.file\", eCmdHdlrString, 0 },\n\t{ \"action.copymsg\", eCmdHdlrBinary, 0 }\n};\nstatic struct cnfparamblk pblk =\n\t{ CNFPARAMBLK_VERSION,\n\t  sizeof(cnfparamdescr)/sizeof(struct cnfparamdescr),\n\t  cnfparamdescr\n\t};\n\n\n/* primarily a helper for debug purposes, get human-readble name of state */\n/* currently not needed, but may be useful in the future! */\n#if 0\nstatic const char *\nbatchState2String(const batch_state_t state)\n{\n\tswitch(state) {\n\tcase BATCH_STATE_RDY:\n\t\treturn \"BATCH_STATE_RDY\";\n\tcase BATCH_STATE_BAD:\n\t\treturn \"BATCH_STATE_BAD\";\n\tcase BATCH_STATE_SUB:\n\t\treturn \"BATCH_STATE_SUB\";\n\tcase BATCH_STATE_COMM:\n\t\treturn \"BATCH_STATE_COMM\";\n\tcase BATCH_STATE_DISC:\n\t\treturn \"BATCH_STATE_DISC\";\n\tdefault:\n\t\treturn \"ERROR, batch state not known!\";\n\t}\n}\n#endif // #if 0\n\n/* ------------------------------ methods ------------------------------ */\n\n/* This function returns the \"current\" time for this action. Current time\n * is not necessarily real-time. In order to enhance performance, current\n * system time is obtained the first time an action needs to know the time\n * and then kept cached inside the action structure. Later requests will\n * always return that very same time. Wile not totally accurate, it is far\n * accurate in most cases and considered \"acurate enough\" for all cases.\n * When changing the threading model, please keep in mind that this\n * logic needs to be changed should we once allow more than one parallel\n * call into the same action (object). As this is currently not supported,\n * we simply cache the time inside the action object itself, after it\n * is under mutex protection.\n * Side-note: the value -1 is used as tActNow, because it also is the\n * error return value of time(). So we would do a retry with the next\n * invocation if time() failed. Then, of course, we would probably already\n * be in trouble, but for the sake of performance we accept this very,\n * very slight risk.\n * This logic has been added as part of an overall performance improvment\n * effort inspired by David Lang. -- rgerhards, 2008-09-16\n * Note: this function does not use the usual iRet call conventions\n * because that would provide little to no benefit but complicate things\n * a lot. So we simply return the system time.\n */\nstatic time_t\ngetActNow(action_t * const pThis)\n{\n\tassert(pThis != NULL);\n\tif(pThis->tActNow == -1) {\n\t\tpThis->tActNow = datetime.GetTime(NULL); /* good time call - the only one done */\n\t\tif(pThis->tLastExec > pThis->tActNow) {\n\t\t\t/* if we are traveling back in time, reset tLastExec */\n\t\t\tpThis->tLastExec = (time_t) 0;\n\t\t}\n\t}\n\n\treturn pThis->tActNow;\n}\n\n\n/* resets action queue parameters to their default values. This happens\n * after each action has been created in order to prevent any wild defaults\n * to be used. It is somewhat against the original spirit of the config file\n * reader, but I think it is a good thing to do.\n * rgerhards, 2008-01-29\n */\nstatic rsRetVal\nactionResetQueueParams(void)\n{\n\tDEFiRet;\n\n\tcs.ActionQueType = QUEUETYPE_DIRECT;\t\t/* type of the main message queue above */\n\tcs.iActionQueueSize = 1000;\t\t\t/* size of the main message queue above */\n\tcs.iActionQueueDeqBatchSize = 16;\t\t/* default batch size */\n\tcs.iActionQHighWtrMark = -1;\t\t\t/* high water mark for disk-assisted queues */\n\tcs.iActionQLowWtrMark = -1;\t\t\t/* low water mark for disk-assisted queues */\n\tcs.iActionQDiscardMark = -1;\t\t\t/* begin to discard messages */\n\tcs.iActionQDiscardSeverity = 8;\t\t\t/* discard warning and above */\n\tcs.iActionQueueNumWorkers = 1;\t\t\t/* number of worker threads for the mm queue above */\n\tcs.iActionQueMaxFileSize = 1024*1024;\n\tcs.iActionQPersistUpdCnt = 0;\t\t\t/* persist queue info every n updates */\n\tcs.bActionQSyncQeueFiles = 0;\n\tcs.iActionQtoQShutdown = 0;\t\t\t/* queue shutdown */\n\tcs.iActionQtoActShutdown = 1000;\t\t/* action shutdown (in phase 2) */\n\tcs.iActionQtoEnq = 50;\t\t\t\t/* timeout for queue enque */\n\tcs.iActionQtoWrkShutdown = 60000;\t\t/* timeout for worker thread shutdown */\n\tcs.iActionQWrkMinMsgs = -1;\t\t\t/* minimum messages per worker needed to start a new one */\n\tcs.bActionQSaveOnShutdown = 1;\t\t\t/* save queue on shutdown (when DA enabled)? */\n\tcs.iActionQueMaxDiskSpace = 0;\n\tcs.iActionQueueDeqSlowdown = 0;\n\tcs.iActionQueueDeqtWinFromHr = 0;\n\tcs.iActionQueueDeqtWinToHr = 25;\t\t/* 25 disables time windowed dequeuing */\n\n\tcs.glbliActionResumeRetryCount = 0;\t\t/* I guess it is smart to reset this one, too */\n\n\tfree(cs.pszActionQFName);\n\tcs.pszActionQFName = NULL;\t\t\t/* prefix for the main message queue file */\n\n\tRETiRet;\n}\n\n/* free action worker data table\n*/\nstatic void freeWrkrDataTable(action_t * const pThis)\n{\n\tint freeSpot;\n\tfor(freeSpot = 0; freeSpot < pThis->wrkrDataTableSize; ++freeSpot) {\n\t\tif(pThis->wrkrDataTable[freeSpot] != NULL) {\n\t\t\tpThis->pMod->mod.om.freeWrkrInstance(pThis->wrkrDataTable[freeSpot]);\n\t\t\tpThis->wrkrDataTable[freeSpot] = NULL;\n\t\t}\n\t}\n\tfree(pThis->wrkrDataTable);\n\treturn;\n}\n\n/* destructs an action descriptor object\n * rgerhards, 2007-08-01\n */\nrsRetVal actionDestruct(action_t * const pThis)\n{\n\tDEFiRet;\n\tassert(pThis != NULL);\n\n\tif(!strcmp((char*)modGetName(pThis->pMod), \"builtin:omdiscard\")) {\n\t\t/* discard actions will be optimized out */\n\t\tFINALIZE;\n\t}\n\n\tif(pThis->pQueue != NULL) {\n\t\tqqueueDestruct(&pThis->pQueue);\n\t}\n\n\t/* destroy stats object, if we have one (may not always be\n\t * be the case, e.g. if turned off)\n\t */\n\tif(pThis->statsobj != NULL)\n\t\tstatsobj.Destruct(&pThis->statsobj);\n\n\tif(pThis->pModData != NULL)\n\t\tpThis->pMod->freeInstance(pThis->pModData);\n\n\tif(pThis->fdErrFile != -1)\n\t\tclose(pThis->fdErrFile);\n\tpthread_mutex_destroy(&pThis->mutErrFile);\n\tpthread_mutex_destroy(&pThis->mutAction);\n\tpthread_mutex_destroy(&pThis->mutWrkrDataTable);\n\tfree((void*)pThis->pszErrFile);\n\tfree((void*)pThis->pszExternalStateFile);\n\tfree(pThis->pszName);\n\tfree(pThis->ppTpl);\n\tfree(pThis->peParamPassing);\n\tfreeWrkrDataTable(pThis);\n\nfinalize_it:\n\tfree(pThis);\n\tRETiRet;\n}\n\n\n/* Disable action, this means it will never again be usable\n * until rsyslog is reloaded. Use only as a last resort, but\n * depends on output module.\n * rgerhards, 2007-08-02\n */\nstatic inline void\nactionDisable(action_t *__restrict__ const pThis)\n{\n\tpThis->bDisabled = 1;\n}\n\n\n\n/* create a new action descriptor object\n * rgerhards, 2007-08-01\n * Note that it is vital to set proper initial values as the v6 config\n * system depends on these!\n */\nrsRetVal actionConstruct(action_t **ppThis)\n{\n\tDEFiRet;\n\taction_t *pThis;\n\n\tassert(ppThis != NULL);\n\n\tCHKmalloc(pThis = (action_t*) calloc(1, sizeof(action_t)));\n\tpThis->iResumeInterval = 30;\n\tpThis->iResumeIntervalMax = 1800; /* max interval default is half an hour */\n\tpThis->iResumeRetryCount = 0;\n\tpThis->pszName = NULL;\n\tpThis->pszErrFile = NULL;\n\tpThis->maxErrFileSize = 0;\n\tpThis->currentErrFileSize = 0;\n\tpThis->pszExternalStateFile = NULL;\n\tpThis->fdErrFile = -1;\n\tpThis->bWriteAllMarkMsgs = 1;\n\tpThis->iExecEveryNthOccur = 0;\n\tpThis->iExecEveryNthOccurTO = 0;\n\tpThis->iSecsExecOnceInterval = 0;\n\tpThis->bExecWhenPrevSusp = 0;\n\tpThis->bRepMsgHasMsg = 0;\n\tpThis->bDisabled = 0;\n\tpThis->isTransactional = 0;\n\tpThis->bReportSuspension = -1; /* indicate \"not yet set\" */\n\tpThis->bReportSuspensionCont = -1; /* indicate \"not yet set\" */\n\tpThis->bCopyMsg = 0;\n\tpThis->tLastOccur = datetime.GetTime(NULL);\t/* done once per action on startup only */\n\tpThis->iActionNbr = loadConf->actions.iActionNbr;\n\tpthread_mutex_init(&pThis->mutErrFile, NULL);\n\tpthread_mutex_init(&pThis->mutAction, NULL);\n\tpthread_mutex_init(&pThis->mutWrkrDataTable, NULL);\n\tINIT_ATOMIC_HELPER_MUT(pThis->mutCAS);\n\n\t/* indicate we have a new action */\n\tloadConf->actions.iActionNbr++;\n\nfinalize_it:\n\t*ppThis = pThis;\n\tRETiRet;\n}\n\n\n/* action construction finalizer\n */\nrsRetVal\nactionConstructFinalize(action_t *__restrict__ const pThis, struct nvlst *lst)\n{\n\tDEFiRet;\n\tuchar pszAName[64]; /* friendly name of our action */\n\n\tif(!strcmp((char*)modGetName(pThis->pMod), \"builtin:omdiscard\")) {\n\t\t/* discard actions will be optimized out */\n\t\tFINALIZE;\n\t}\n\t/* generate a friendly name for us action stats */\n\tif(pThis->pszName == NULL) {\n\t\tsnprintf((char*) pszAName, sizeof(pszAName), \"action-%d-%s\",\n\t\t\tpThis->iActionNbr, pThis->pMod->pszName);\n\t\tpThis->pszName = ustrdup(pszAName);\n\t}\n\n\t/* cache transactional attribute */\n\tpThis->isTransactional = pThis->pMod->mod.om.supportsTX;\n\tif(pThis->isTransactional) {\n\t\tint i;\n\t\tfor(i = 0 ; i < pThis->iNumTpls ; ++i) {\n\t\t\tif(pThis->peParamPassing[i] != ACT_STRING_PASSING) {\n\t\t\t\tLogError(0, RS_RET_INVLD_OMOD, \"action '%s'(%d) is transactional but \"\n\t\t\t\t\t\t\"parameter %d \"\n\t\t\t\t\t\t\"uses invalid parameter passing mode -- disabling \"\n\t\t\t\t\t\t\"action. This is probably caused by a pre-v7 \"\n\t\t\t\t\t\t\"output module that needs upgrade.\",\n\t\t\t\t\t\tpThis->pszName, pThis->iActionNbr, i);\n\t\t\t\tactionDisable(pThis);\n\t\t\t\tABORT_FINALIZE(RS_RET_INVLD_OMOD);\n\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/* support statistics gathering */\n\tCHKiRet(statsobj.Construct(&pThis->statsobj));\n\tCHKiRet(statsobj.SetName(pThis->statsobj, pThis->pszName));\n\tCHKiRet(statsobj.SetOrigin(pThis->statsobj, (uchar*)\"core.action\"));\n\n\tSTATSCOUNTER_INIT(pThis->ctrProcessed, pThis->mutCtrProcessed);\n\tCHKiRet(statsobj.AddCounter(pThis->statsobj, UCHAR_CONSTANT(\"processed\"),\n\t\tctrType_IntCtr, CTR_FLAG_RESETTABLE, &pThis->ctrProcessed));\n\n\tSTATSCOUNTER_INIT(pThis->ctrFail, pThis->mutCtrFail);\n\tCHKiRet(statsobj.AddCounter(pThis->statsobj, UCHAR_CONSTANT(\"failed\"),\n\t\tctrType_IntCtr, CTR_FLAG_RESETTABLE, &pThis->ctrFail));\n\n\tSTATSCOUNTER_INIT(pThis->ctrSuspend, pThis->mutCtrSuspend);\n\tCHKiRet(statsobj.AddCounter(pThis->statsobj, UCHAR_CONSTANT(\"suspended\"),\n\t\tctrType_IntCtr, CTR_FLAG_RESETTABLE, &pThis->ctrSuspend));\n\tSTATSCOUNTER_INIT(pThis->ctrSuspendDuration, pThis->mutCtrSuspendDuration);\n\tCHKiRet(statsobj.AddCounter(pThis->statsobj, UCHAR_CONSTANT(\"suspended.duration\"),\n\t\tctrType_IntCtr, 0, &pThis->ctrSuspendDuration));\n\n\tSTATSCOUNTER_INIT(pThis->ctrResume, pThis->mutCtrResume);\n\tCHKiRet(statsobj.AddCounter(pThis->statsobj, UCHAR_CONSTANT(\"resumed\"),\n\t\tctrType_IntCtr, CTR_FLAG_RESETTABLE, &pThis->ctrResume));\n\n\tCHKiRet(statsobj.ConstructFinalize(pThis->statsobj));\n\n\t/* create our queue */\n\n\t/* generate a friendly name for the queue */\n\tsnprintf((char*) pszAName, sizeof(pszAName), \"%s queue\",\n\t\t pThis->pszName);\n\n\t/* now check if we can run the action in \"firehose mode\" during stage one of\n\t * its processing (that is before messages are enqueued into the action q).\n\t * This is only possible if some features, which require strict sequence, are\n\t * not used. Thankfully, that is usually the case. The benefit of firehose\n\t * mode is much faster processing (and simpler code) -- rgerhards, 2010-06-08\n\t */\n\tif(   pThis->iExecEveryNthOccur > 1\n\t   || pThis->iSecsExecOnceInterval\n\t  ) {\n\t\tDBGPRINTF(\"info: firehose mode disabled for action because \"\n\t\t          \"iExecEveryNthOccur=%d, iSecsExecOnceInterval=%d\\n\",\n\t\t\t  pThis->iExecEveryNthOccur, pThis->iSecsExecOnceInterval);\n\t\tpThis->submitToActQ = doSubmitToActionQComplex;\n\t} else if(pThis->bWriteAllMarkMsgs) {\n\t\t/* full firehose submission mode, default case*/\n\t\tpThis->submitToActQ = doSubmitToActionQ;\n\t} else {\n\t\t/* nearly full-speed submission mode */\n\t\tpThis->submitToActQ = doSubmitToActionQNotAllMark;\n\t}\n\n\t/* create queue */\n\t/* action queues always (for now) have just one worker. This may change when\n\t * we begin to implement an interface the enable output modules to request\n\t * to be run on multiple threads. So far, this is forbidden by the interface\n\t * spec. -- rgerhards, 2008-01-30\n\t */\n\tCHKiRet(qqueueConstruct(&pThis->pQueue, cs.ActionQueType, 1, cs.iActionQueueSize,\n\t\t\t\t\tprocessBatchMain));\n\tobj.SetName((obj_t*) pThis->pQueue, pszAName);\n\tqqueueSetpAction(pThis->pQueue, pThis);\n\n\tif(lst == NULL) { /* use legacy params? */\n\t\t/* ... set some properties ... */\n#\t\tdefine setQPROP(func, directive, data) \\\n\t\tCHKiRet_Hdlr(func(pThis->pQueue, data)) { \\\n\t\t\tLogError(0, NO_ERRCODE, \"Invalid \" #directive \", \\\n\t\t\t\terror %d. Ignored, running with default setting\", iRet); \\\n\t\t}\n#\t\tdefine setQPROPstr(func, directive, data) \\\n\t\tCHKiRet_Hdlr(func(pThis->pQueue, data, (data == NULL)? 0 : strlen((char*) data))) { \\\n\t\t\tLogError(0, NO_ERRCODE, \"Invalid \" #directive \", \\\n\t\t\t\terror %d. Ignored, running with default setting\", iRet); \\\n\t\t}\n\t\tsetQPROP(qqueueSetsizeOnDiskMax, \"$ActionQueueMaxDiskSpace\", cs.iActionQueMaxDiskSpace);\n\t\tsetQPROP(qqueueSetiDeqBatchSize, \"$ActionQueueDequeueBatchSize\", cs.iActionQueueDeqBatchSize);\n\t\tsetQPROP(qqueueSetMaxFileSize, \"$ActionQueueFileSize\", cs.iActionQueMaxFileSize);\n\t\tsetQPROPstr(qqueueSetFilePrefix, \"$ActionQueueFileName\", cs.pszActionQFName);\n\t\tsetQPROP(qqueueSetiPersistUpdCnt, \"$ActionQueueCheckpointInterval\", cs.iActionQPersistUpdCnt);\n\t\tsetQPROP(qqueueSetbSyncQueueFiles, \"$ActionQueueSyncQueueFiles\", cs.bActionQSyncQeueFiles);\n\t\tsetQPROP(qqueueSettoQShutdown, \"$ActionQueueTimeoutShutdown\", cs.iActionQtoQShutdown );\n\t\tsetQPROP(qqueueSettoActShutdown, \"$ActionQueueTimeoutActionCompletion\", cs.iActionQtoActShutdown);\n\t\tsetQPROP(qqueueSettoWrkShutdown, \"$ActionQueueWorkerTimeoutThreadShutdown\", cs.iActionQtoWrkShutdown);\n\t\tsetQPROP(qqueueSettoEnq, \"$ActionQueueTimeoutEnqueue\", cs.iActionQtoEnq);\n\t\tsetQPROP(qqueueSetiHighWtrMrk, \"$ActionQueueHighWaterMark\", cs.iActionQHighWtrMark);\n\t\tsetQPROP(qqueueSetiLowWtrMrk, \"$ActionQueueLowWaterMark\", cs.iActionQLowWtrMark);\n\t\tsetQPROP(qqueueSetiDiscardMrk, \"$ActionQueueDiscardMark\", cs.iActionQDiscardMark);\n\t\tsetQPROP(qqueueSetiDiscardSeverity, \"$ActionQueueDiscardSeverity\", cs.iActionQDiscardSeverity);\n\t\tsetQPROP(qqueueSetiMinMsgsPerWrkr, \"$ActionQueueWorkerThreadMinimumMessages\", cs.iActionQWrkMinMsgs);\n\t\tsetQPROP(qqueueSetiNumWorkerThreads, \"$ActionQueueWorkerThreads\", cs.iActionQueueNumWorkers);\n\t\tsetQPROP(qqueueSetbSaveOnShutdown, \"$ActionQueueSaveOnShutdown\", cs.bActionQSaveOnShutdown);\n\t\tsetQPROP(qqueueSetiDeqSlowdown,    \"$ActionQueueDequeueSlowdown\", cs.iActionQueueDeqSlowdown);\n\t\tsetQPROP(qqueueSetiDeqtWinFromHr,  \"$ActionQueueDequeueTimeBegin\", cs.iActionQueueDeqtWinFromHr);\n\t\tsetQPROP(qqueueSetiDeqtWinToHr,    \"$ActionQueueDequeueTimeEnd\", cs.iActionQueueDeqtWinToHr);\n\t} else {\n\t\t/* we have v6-style config params */\n\t\tqqueueSetDefaultsActionQueue(pThis->pQueue);\n\t\tqqueueApplyCnfParam(pThis->pQueue, lst);\n\t}\n\tqqueueCorrectParams(pThis->pQueue);\n\n#\tundef setQPROP\n#\tundef setQPROPstr\n\n\tqqueueDbgPrint(pThis->pQueue);\n\n\tDBGPRINTF(\"Action %p: queue %p created\\n\", pThis, pThis->pQueue);\n\n\tif(pThis->bUsesMsgPassingMode && pThis->pQueue->qType != QUEUETYPE_DIRECT) {\n\t\tparser_warnmsg(\"module %s with message passing mode uses \"\n\t\t\t\"non-direct queue. This most probably leads to undesired \"\n\t\t\t\"results. For message modificaton modules (mm*), this means \"\n\t\t\t\"that they will have no effect - \"\n\t\t\t\"see https://www.rsyslog.com/mm-no-queue/\", (char*)modGetName(pThis->pMod));\n\t}\n\n\t/* and now reset the queue params (see comment in its function header!) */\n\tactionResetQueueParams();\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n\n/* set the global resume interval\n */\nrsRetVal actionSetGlobalResumeInterval(int iNewVal)\n{\n\tcs.glbliActionResumeInterval = iNewVal;\n\treturn RS_RET_OK;\n}\n\n\n/* returns the action state name in human-readable form\n * returned string must not be modified.\n * rgerhards, 2009-05-07\n */\nstatic uchar *getActStateName(action_t * const pThis, wti_t * const pWti)\n{\n\tswitch(getActionState(pWti, pThis)) {\n\t\tcase ACT_STATE_RDY:\n\t\t\treturn (uchar*) \"rdy\";\n\t\tcase ACT_STATE_ITX:\n\t\t\treturn (uchar*) \"itx\";\n\t\tcase ACT_STATE_RTRY:\n\t\t\treturn (uchar*) \"rtry\";\n\t\tcase ACT_STATE_SUSP:\n\t\t\treturn (uchar*) \"susp\";\n\t\tcase ACT_STATE_DATAFAIL:\n\t\t\treturn (uchar*) \"datafail\";\n\t\tdefault:\n\t\t\treturn (uchar*) \"ERROR/UNKNWON\";\n\t}\n}\n\n\n/* returns a suitable return code based on action state\n * rgerhards, 2009-05-07\n */\nstatic rsRetVal getReturnCode(action_t * const pThis, wti_t * const pWti)\n{\n\tDEFiRet;\n\n\tswitch(getActionState(pWti, pThis)) {\n\t\tcase ACT_STATE_RDY:\n\t\t\tiRet = RS_RET_OK;\n\t\t\tbreak;\n\t\tcase ACT_STATE_ITX:\n\t\t\tif(pWti->actWrkrInfo[pThis->iActionNbr].bHadAutoCommit) {\n\t\t\t\tpWti->actWrkrInfo[pThis->iActionNbr].bHadAutoCommit = 0; /* auto-reset */\n\t\t\t\tiRet = RS_RET_PREVIOUS_COMMITTED;\n\t\t\t} else {\n\t\t\t\tiRet = RS_RET_DEFER_COMMIT;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ACT_STATE_RTRY:\n\t\t\tiRet = RS_RET_SUSPENDED;\n\t\t\tbreak;\n\t\tcase ACT_STATE_SUSP:\n\t\t\tiRet = RS_RET_ACTION_FAILED;\n\t\t\tbreak;\n\t\tcase ACT_STATE_DATAFAIL:\n\t\t\tiRet = RS_RET_DATAFAIL;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tDBGPRINTF(\"Invalid action engine state %u, program error\\n\",\n\t\t\t\t  getActionState(pWti, pThis));\n\t\t\tiRet = RS_RET_ERR;\n\t\t\tbreak;\n\t}\n\n\tRETiRet;\n}\n\n\n/* set the action to a new state\n * rgerhards, 2007-08-02\n */\nstatic void\nactionSetState(action_t * const pThis, wti_t * const pWti, uint8_t newState)\n{\n\tsetActionState(pWti, pThis, newState);\n\tDBGPRINTF(\"action[%s] transitioned to state: %s\\n\",\n\t\t  pThis->pszName, getActStateName(pThis, pWti));\n}\n\n/* Handles the transient commit state. So far, this is\n * mostly a dummy...\n * rgerhards, 2007-08-02\n */\nstatic void actionCommitted(action_t * const pThis, wti_t * const pWti)\n{\n\tactionSetState(pThis, pWti, ACT_STATE_RDY);\n}\n\n\n/* set action state according to external state file (if configured)\n*/\nstatic rsRetVal ATTR_NONNULL()\ncheckExternalStateFile(action_t *const pThis, wti_t *const pWti)\n{\n\tchar filebuf[1024];\n\tint fd = -1;\n\tint r;\n\tDEFiRet;\n\n\tDBGPRINTF(\"checking external state file\\n\");\n\n\tif(pThis->pszExternalStateFile == NULL) {\n\t\tFINALIZE;\n\t}\n\n\tfd = open(pThis->pszExternalStateFile, O_RDONLY|O_CLOEXEC);\n\tif(fd == -1) {\n\t\tdbgprintf(\"could not read external state file\\n\");\n\t\tFINALIZE;\n\t}\n\n\tr = read(fd, filebuf, sizeof(filebuf) - 1);\n\tif(r < 1) {\n\t\tdbgprintf(\"checkExternalStateFile read() returned %d\\n\", r);\n\t\tFINALIZE;\n\t}\n\n\tfilebuf[r] = '\\0';\n\tdbgprintf(\"external state file content: '%s'\\n\", filebuf);\n\t/* trim trailing whitespace */\n\tfor(int j = r-1 ; j > 0 ; --j) {\n\t\tif(filebuf[j] == '\\n' || filebuf[j] == '\\t' || filebuf[j] == ' ') {\n\t\t\tfilebuf[j] = '\\0';\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!strcmp(filebuf, \"SUSPENDED\")) {\n\t\tLogMsg(0, RS_RET_SUSPENDED, LOG_WARNING,\n\t\t      \"action '%s' suspended (module '%s') by external state file\",\n\t\t      pThis->pszName, pThis->pMod->pszName);\n\t\tactionRetry(pThis, pWti);\n\t\tABORT_FINALIZE(RS_RET_SUSPENDED);\n\t}\n\nfinalize_it:\n\tif(fd != -1) {\n\t\tclose(fd);\n\t}\n\tDBGPRINTF(\"done checking external state file, iRet=%d\\n\", iRet);\n\tRETiRet;\n}\n\n\n/* we need to defer setting the action's own bReportSuspension state until\n * after the full config has been processed. So the most simple case to do\n * that is here. It's not a performance problem, as it happens infrequently.\n * it's not a threading race problem, as always the same value will be written.\n * As we need to do this in several places, we have moved the code to its own\n * helper function.\n */\nstatic void\nsetSuspendMessageConfVars(action_t *__restrict__ const pThis)\n{\n\tif(pThis->bReportSuspension == -1)\n\t\tpThis->bReportSuspension = runConf->globals.bActionReportSuspension;\n\tif(pThis->bReportSuspensionCont == -1) {\n\t\tpThis->bReportSuspensionCont = runConf->globals.bActionReportSuspensionCont;\n\t\tif(pThis->bReportSuspensionCont == -1)\n\t\t\tpThis->bReportSuspensionCont = 1;\n\t}\n}\n\n\n/* set action to \"rtry\" state.\n * rgerhards, 2007-08-02\n */\nstatic void ATTR_NONNULL() actionRetry(action_t * const pThis, wti_t * const pWti)\n{\n\tsetSuspendMessageConfVars(pThis);\n\tactionSetState(pThis, pWti, ACT_STATE_RTRY);\n\tif(pThis->bReportSuspension) {\n\t\tLogMsg(0, RS_RET_SUSPENDED, LOG_WARNING,\n\t\t      \"action '%s' suspended (module '%s'), retry %d. There should \"\n\t\t      \"be messages before this one giving the reason for suspension.\",\n\t\t      pThis->pszName, pThis->pMod->pszName,\n\t\t      getActionNbrResRtry(pWti, pThis));\n\t}\n\tincActionResumeInRow(pWti, pThis);\n}\n\n/* Suspend action, this involves changing the action state as well\n * as setting the next retry time.\n * if we have more than 10 retries, we prolong the\n * retry interval. If something is really stalled, it will\n * get re-tried only very, very seldom - but that saves\n * CPU time. TODO: maybe a config option for that?\n * rgerhards, 2007-08-02\n */\nstatic void ATTR_NONNULL()\nactionSuspend(action_t * const pThis, wti_t * const pWti)\n{\n\ttime_t ttNow;\n\tint suspendDuration;\n\tchar timebuf[32];\n\n\tDBGPRINTF(\"actionSuspend: enter\\n\");\n\tsetSuspendMessageConfVars(pThis);\n\n\t/* note: we can NOT use a cached timestamp, as time may have evolved\n\t * since caching, and this would break logic (and it actually did so!)\n\t */\n\tdatetime.GetTime(&ttNow);\n\tsuspendDuration = pThis->iResumeInterval * (getActionNbrResRtry(pWti, pThis) / 10 + 1);\n\tif(pThis->iResumeIntervalMax > 0 && suspendDuration > pThis->iResumeIntervalMax) {\n\t\tsuspendDuration = pThis->iResumeIntervalMax;\n\t}\n\tpThis->ttResumeRtry = ttNow + suspendDuration;\n\tactionSetState(pThis, pWti, ACT_STATE_SUSP);\n\tpThis->ctrSuspendDuration += suspendDuration;\n\tif(getActionNbrResRtry(pWti, pThis) == 0) {\n\t\tSTATSCOUNTER_INC(pThis->ctrSuspend, pThis->mutCtrSuspend);\n\t}\n\n\tif(   pThis->bReportSuspensionCont\n\t   || (pThis->bReportSuspension && getActionNbrResRtry(pWti, pThis) == 0) ) {\n\t\tctime_r(&pThis->ttResumeRtry, timebuf);\n\t\ttimebuf[strlen(timebuf)-1] = '\\0'; /* strip LF */\n\t\tLogMsg(0, RS_RET_SUSPENDED, LOG_WARNING,\n\t\t\t      \"action '%s' suspended (module '%s'), next retry is %s, retry nbr %d. \"\n\t\t\t      \"There should be messages before this one giving the reason for suspension.\",\n\t\t\t      pThis->pszName, pThis->pMod->pszName, timebuf,\n\t\t\t      getActionNbrResRtry(pWti, pThis));\n\t}\n\tDBGPRINTF(\"action '%s' suspended, earliest retry=%lld (now %lld), iNbrResRtry %d, \"\n\t\t  \"duration %d\\n\",\n\t\t  pThis->pszName, (long long) pThis->ttResumeRtry, (long long) ttNow,\n\t\t  getActionNbrResRtry(pWti, pThis), suspendDuration);\n}\n\n\n/* actually do retry processing. Note that the function receives a timestamp so\n * that we do not need to call the (expensive) time() API.\n * Note that we do the full retry processing here, doing the configured number of\n * iterations. -- rgerhards, 2009-05-07\n * We need to guard against module which always return RS_RET_OK from their tryResume()\n * entry point. This is invalid, but has harsh consequences: it will cause the rsyslog\n * engine to go into a tight loop. That obviously is not acceptable. As such, we track the\n * count of iterations that a tryResume returning RS_RET_OK is immediately followed by\n * an unsuccessful call to doAction(). If that happens more than 10 times, we assume\n * the return acutally is a RS_RET_SUSPENDED. In order to go through the various\n * resumption stages, we do this for every 10 requests. This magic number 10 may\n * not be the most appropriate, but it should be thought of a \"if nothing else helps\"\n * kind of facility: in the first place, the module should return a proper indication\n * of its inability to recover. -- rgerhards, 2010-04-26.\n */\nstatic rsRetVal ATTR_NONNULL()\nactionDoRetry(action_t * const pThis, wti_t * const pWti)\n{\n\tint iRetries;\n\tint iSleepPeriod;\n\tint bTreatOKasSusp;\n\tDEFiRet;\n\n\tassert(pThis != NULL);\n\n\tiRetries = 0;\n\twhile((*pWti->pbShutdownImmediate == 0) && getActionState(pWti, pThis) == ACT_STATE_RTRY) {\n\t\tDBGPRINTF(\"actionDoRetry: %s enter loop, iRetries=%d, ResumeInRow %d\\n\",\n\t\t\tpThis->pszName, iRetries, getActionResumeInRow(pWti, pThis));\n\t\t\tiRet = pThis->pMod->tryResume(pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData);\n\t\tDBGPRINTF(\"actionDoRetry: %s action->tryResume returned %d\\n\", pThis->pszName, iRet);\n\t\tif((getActionResumeInRow(pWti, pThis) > 9) && (getActionResumeInRow(pWti, pThis) % 10 == 0)) {\n\t\t\tbTreatOKasSusp = 1;\n\t\t\tsetActionResumeInRow(pWti, pThis, 0);\n\t\t\tiRet = RS_RET_SUSPENDED;\n\t\t} else {\n\t\t\tbTreatOKasSusp = 0;\n\t\t}\n\t\tif((iRet == RS_RET_OK) && (!bTreatOKasSusp)) {\n\t\t\tDBGPRINTF(\"actionDoRetry: %s had success RDY again (iRet=%d)\\n\",\n\t\t\t\t  pThis->pszName, iRet);\n\t\t\tSTATSCOUNTER_INC(pThis->ctrResume, pThis->mutCtrResume);\n\t\t\tif(pThis->bReportSuspension) {\n\t\t\t\tLogMsg(0, RS_RET_RESUMED, LOG_INFO, \"action '%s' \"\n\t\t\t\t\t      \"resumed (module '%s')\",\n\t\t\t\t\t      pThis->pszName, pThis->pMod->pszName);\n\t\t\t}\n\t\t\tactionSetState(pThis, pWti, ACT_STATE_RDY);\n\t\t} else if(iRet == RS_RET_SUSPENDED || bTreatOKasSusp) {\n\t\t\t/* max retries reached? */\n\t\t\tDBGPRINTF(\"actionDoRetry: %s check for max retries, iResumeRetryCount \"\n\t\t\t\t  \"%d, iRetries %d\\n\",\n\t\t\t\t  pThis->pszName, pThis->iResumeRetryCount, iRetries);\n\t\t\tif((pThis->iResumeRetryCount != -1 && iRetries >= pThis->iResumeRetryCount)) {\n\t\t\t\tactionSuspend(pThis, pWti);\n\t\t\t\tif(getActionNbrResRtry(pWti, pThis) < 20)\n\t\t\t\t\tincActionNbrResRtry(pWti, pThis);\n\t\t\t} else {\n\t\t\t\t++iRetries;\n\t\t\t\tiSleepPeriod = pThis->iResumeInterval;\n\t\t\t\tDBGPRINTF(\"actionDoRetry: sleeping now %d seconds\\n\", iSleepPeriod);\n\t\t\t\tsrSleep(iSleepPeriod, 0);\n\t\t\t\tif(*pWti->pbShutdownImmediate) {\n\t\t\t\t\tABORT_FINALIZE(RS_RET_FORCE_TERM);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if(iRet == RS_RET_DISABLE_ACTION) {\n\t\t\tactionDisable(pThis);\n\t\t}\n\t}\n\n\tif(getActionState(pWti, pThis) == ACT_STATE_RDY) {\n\t\tsetActionNbrResRtry(pWti, pThis, 0);\n\t}\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* special retry handling if disabled via file: simply wait for the file\n * to indicate whether or not it is ready again\n */\nstatic rsRetVal ATTR_NONNULL()\nactionDoRetry_extFile(action_t *const pThis, wti_t *const pWti)\n{\n\tint iRetries;\n\tint iSleepPeriod;\n\tDEFiRet;\n\n\tassert(pThis != NULL);\n\n\tDBGPRINTF(\"actionDoRetry_extFile: enter, actionState: %d\\n\",getActionState(pWti, pThis));\n\tiRetries = 0;\n\twhile((*pWti->pbShutdownImmediate == 0) && getActionState(pWti, pThis) == ACT_STATE_RTRY) {\n\t\tDBGPRINTF(\"actionDoRetry_extFile: %s enter loop, iRetries=%d, ResumeInRow %d\\n\",\n\t\t\tpThis->pszName, iRetries, getActionResumeInRow(pWti, pThis));\n\t\t\tiRet = checkExternalStateFile(pThis, pWti);\n\t\tDBGPRINTF(\"actionDoRetry_extFile: %s checkExternalStateFile returned %d\\n\", pThis->pszName, iRet);\n\t\tif(iRet == RS_RET_OK) {\n\t\t\tDBGPRINTF(\"actionDoRetry_extFile: %s had success RDY again (iRet=%d)\\n\",\n\t\t\t\t  pThis->pszName, iRet);\n\t\t\tif(pThis->bReportSuspension) {\n\t\t\t\tLogMsg(0, RS_RET_RESUMED, LOG_INFO, \"action '%s' \"\n\t\t\t\t      \"resumed (module '%s') via external state file\",\n\t\t\t\t      pThis->pszName, pThis->pMod->pszName);\n\t\t\t}\n\t\t\tactionSetState(pThis, pWti, ACT_STATE_RDY);\n\t\t} else if(iRet == RS_RET_SUSPENDED) {\n\t\t\t/* max retries reached? */\n\t\t\tDBGPRINTF(\"actionDoRetry_extFile: %s check for max retries, iResumeRetryCount \"\n\t\t\t\t  \"%d, iRetries %d\\n\",\n\t\t\t\t  pThis->pszName, pThis->iResumeRetryCount, iRetries);\n\t\t\tif((pThis->iResumeRetryCount != -1 && iRetries >= pThis->iResumeRetryCount)) {\n\t\t\t\tDBGPRINTF(\"actionDoRetry_extFile: did not work out, suspending\\n\");\n\t\t\t\tactionSuspend(pThis, pWti);\n\t\t\t\tpWti->execState.bPrevWasSuspended = 1;\n\t\t\t\tif(getActionNbrResRtry(pWti, pThis) < 20)\n\t\t\t\t\tincActionNbrResRtry(pWti, pThis);\n\t\t\t} else {\n\t\t\t\t++iRetries;\n\t\t\t\tiSleepPeriod = pThis->iResumeInterval;\n\t\t\t\tsrSleep(iSleepPeriod, 0);\n\t\t\t\tif(*pWti->pbShutdownImmediate) {\n\t\t\t\t\tABORT_FINALIZE(RS_RET_FORCE_TERM);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if(iRet == RS_RET_DISABLE_ACTION) {\n\t\t\tactionDisable(pThis);\n\t\t}\n\t}\n\n\tif(getActionState(pWti, pThis) == ACT_STATE_RDY) {\n\t\tsetActionNbrResRtry(pWti, pThis, 0);\n\t}\n\nfinalize_it:\n\tRETiRet;\n}\n\nstatic rsRetVal\nactionCheckAndCreateWrkrInstance(action_t * const pThis, const wti_t *const pWti)\n{\n\tint locked = 0;\n\tDEFiRet;\n\tif(pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData == NULL) {\n\t\tDBGPRINTF(\"wti %p: we need to create a new action worker instance for \"\n\t\t\t  \"action %d\\n\", pWti, pThis->iActionNbr);\n\t\tCHKiRet(pThis->pMod->mod.om.createWrkrInstance(&(pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData),\n\t\t\t\t\t\t               pThis->pModData));\n\t\tpWti->actWrkrInfo[pThis->iActionNbr].pAction = pThis;\n\t\tsetActionState(pWti, pThis, ACT_STATE_RDY); /* action is enabled */\n\n\t\t/* maintain worker data table -- only needed if wrkrHUP is requested! */\n\n\t\tpthread_mutex_lock(&pThis->mutWrkrDataTable);\n\t\tlocked = 1;\n\t\tint freeSpot;\n\t\tfor(freeSpot = 0 ; freeSpot < pThis->wrkrDataTableSize ; ++freeSpot)\n\t\t\tif(pThis->wrkrDataTable[freeSpot] == NULL)\n\t\t\t\tbreak;\n\t\tif(pThis->nWrkr == pThis->wrkrDataTableSize) {\n\t\t\tvoid *const newTable = realloc(pThis->wrkrDataTable,\n\t\t\t\t(pThis->wrkrDataTableSize + 1) * sizeof(void*));\n\t\t\tif(newTable == NULL) {\n\t\t\t\tDBGPRINTF(\"actionCheckAndCreateWrkrInstance: out of \"\n\t\t\t\t\t\"memory realloc wrkrDataTable\\n\")\n\t\t\t\tABORT_FINALIZE(RS_RET_OUT_OF_MEMORY);\n\t\t\t}\n\t\t\tpThis->wrkrDataTable = newTable;\n\t\t\tpThis->wrkrDataTableSize++;\n\t\t}\n\t\tpThis->wrkrDataTable[freeSpot] = pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData;\n\t\tpThis->nWrkr++;\n\t\tDBGPRINTF(\"wti %p: created action worker instance %d for \"\n\t\t\t  \"action %d\\n\", pWti, pThis->nWrkr, pThis->iActionNbr);\n\t}\nfinalize_it:\n\tif(locked) {\n\t\tpthread_mutex_unlock(&pThis->mutWrkrDataTable);\n\t}\n\tRETiRet;\n}\n\n/* try to resume an action -- rgerhards, 2007-08-02\n * changed to new action state engine -- rgerhards, 2009-05-07\n */\nstatic rsRetVal\nactionTryResume(action_t * const pThis, wti_t * const pWti)\n{\n\tDEFiRet;\n\ttime_t ttNow = NO_TIME_PROVIDED;\n\n\tDBGPRINTF(\"actionTryResume: enter\\n\");\n\n\tif(getActionState(pWti, pThis) == ACT_STATE_SUSP) {\n\t\t/* if we are suspended, we need to check if the timeout expired.\n\t\t * for this handling, we must always obtain a fresh timestamp. We used\n\t\t * to use the action timestamp, but in this case we will never reach a\n\t\t * point where a resumption is actually tried, because the action timestamp\n\t\t * is always in the past. So we can not avoid doing a fresh time() call\n\t\t * here. -- rgerhards, 2009-03-18\n\t\t */\n\t\tdatetime.GetTime(&ttNow); /* cache \"now\" */\n\t\tif(ttNow >= pThis->ttResumeRtry) {\n\t\t\tactionSetState(pThis, pWti, ACT_STATE_RTRY); /* back to retries */\n\t\t}\n\t}\n\n\tif(getActionState(pWti, pThis) == ACT_STATE_RTRY) {\nDBGPRINTF(\"actionTryResume calls actionDoRetry\\n\");\n\t\tCHKiRet(actionDoRetry(pThis, pWti));\n\t}\n\n\tif(Debug && (getActionState(pWti, pThis) == ACT_STATE_RTRY ||\n\t\tgetActionState(pWti, pThis) == ACT_STATE_SUSP)) {\n\t\tif(ttNow == NO_TIME_PROVIDED) /* use cached result if we have it */\n\t\t\tdatetime.GetTime(&ttNow);\n\t\tdbgprintf(\"actionTryResume: action[%s] state: %s, next retry (if applicable): %u [now %u]\\n\",\n\t\t\tpThis->pszName, getActStateName(pThis, pWti),\n\t\t\t(unsigned) pThis->ttResumeRtry, (unsigned) ttNow);\n\t}\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* prepare an action for performing work. This involves trying to recover it,\n * depending on its current state.\n * rgerhards, 2009-05-07\n */\nstatic rsRetVal ATTR_NONNULL()\nactionPrepare(action_t *__restrict__ const pThis, wti_t *__restrict__ const pWti)\n{\n\tDEFiRet;\n\nDBGPRINTF(\"actionPrepare[%s]: enter\\n\", pThis->pszName);\n\tCHKiRet(actionCheckAndCreateWrkrInstance(pThis, pWti));\n\tCHKiRet(actionTryResume(pThis, pWti));\n\nDBGPRINTF(\"actionPrepare[%s]: after calling actionTryResume\\n\", pThis->pszName);\n\n\t/* if we are now ready, we initialize the transaction and advance\n\t * action state accordingly\n\t */\n\tif(getActionState(pWti, pThis) == ACT_STATE_RDY) {\n\t\tiRet = checkExternalStateFile(pThis, pWti);\n\t\tif(iRet == RS_RET_SUSPENDED) {\n\t\t\tDBGPRINTF(\"actionPrepare[%s]: SUSPENDED via external state file, \"\n\t\t\t\t\"doing retry processing\\n\", pThis->pszName);\n\t\t\tCHKiRet(actionDoRetry_extFile(pThis, pWti));\n\t\t}\n\t\tiRet = pThis->pMod->mod.om.beginTransaction(pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData);\n\t\tswitch(iRet) {\n\t\t\tcase RS_RET_OK:\n\t\t\t\tactionSetState(pThis, pWti, ACT_STATE_ITX);\n\t\t\t\tbreak;\n\t\t\tcase RS_RET_SUSPENDED:\n\t\t\t\tactionRetry(pThis, pWti);\n\t\t\t\tbreak;\n\t\t\tcase RS_RET_DISABLE_ACTION:\n\t\t\t\tactionDisable(pThis);\n\t\t\t\tbreak;\n\t\t\tdefault:FINALIZE;\n\t\t}\n\t}\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* prepare the calling parameters for doAction()\n * rgerhards, 2009-05-07\n */\nstatic rsRetVal\nprepareDoActionParams(action_t * __restrict__ const pAction,\n\t\t      wti_t * __restrict__ const pWti,\n\t\t      smsg_t *__restrict__ const pMsg,\n\t\t      struct syslogTime *ttNow)\n{\n\tint i;\n\tstruct json_object *json;\n\tactWrkrIParams_t *iparams;\n\tactWrkrInfo_t *__restrict__ pWrkrInfo;\n\tDEFiRet;\n\n\tpWrkrInfo = &(pWti->actWrkrInfo[pAction->iActionNbr]);\n\tif(pAction->isTransactional) {\n\t\tCHKiRet(wtiNewIParam(pWti, pAction, &iparams));\n\t\tfor(i = 0 ; i < pAction->iNumTpls ; ++i) {\n\t\t\tCHKiRet(tplToString(pAction->ppTpl[i], pMsg,\n\t\t\t\t\t    &actParam(iparams, pAction->iNumTpls, 0, i),\n\t\t\t\t            ttNow));\n\t\t}\n\t} else {\n\t\tfor(i = 0 ; i < pAction->iNumTpls ; ++i) {\n\t\t\tswitch(pAction->peParamPassing[i]) {\n\t\t\tcase ACT_STRING_PASSING:\n\t\t\t\tCHKiRet(tplToString(pAction->ppTpl[i], pMsg,\n\t\t\t\t\t   &(pWrkrInfo->p.nontx.actParams[i]),\n\t\t\t\t\t   ttNow));\n\t\t\t\tbreak;\n\t\t\t/* note: ARRAY_PASSING mode has been removed in 8.26.0; if it\n\t\t\t * is ever needed again, it can be found in 8.25.0.\n\t\t\t * rgerhards 2017-03-06\n\t\t\t */\n\t\t\tcase ACT_MSG_PASSING:\n\t\t\t\tpWrkrInfo->p.nontx.actParams[i].param = (void*) pMsg;\n\t\t\t\tbreak;\n\t\t\tcase ACT_JSON_PASSING:\n\t\t\t\tCHKiRet(tplToJSON(pAction->ppTpl[i], pMsg, &json, ttNow));\n\t\t\t\tpWrkrInfo->p.nontx.actParams[i].param = (void*) json;\n\t\t\t\tbreak;\n\t\t\tdefault:dbgprintf(\"software bug/error: unknown \"\n\t\t\t\t\"pAction->peParamPassing[%d] %d in prepareDoActionParams\\n\",\n\t\t\t\t\t  i, (int) pAction->peParamPassing[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\nfinalize_it:\n\tRETiRet;\n}\n\n\nvoid\nreleaseDoActionParams(action_t *__restrict__ const pAction, wti_t *__restrict__ const pWti, int action_destruct)\n{\n\tint j;\n\tactWrkrInfo_t *__restrict__ pWrkrInfo;\n\n\tpWrkrInfo = &(pWti->actWrkrInfo[pAction->iActionNbr]);\n\tfor(j = 0 ; j < pAction->iNumTpls ; ++j) {\n\t\tif (action_destruct) {\n\t\t\tif (ACT_STRING_PASSING == pAction->peParamPassing[j]) {\n\t\t\t\tfree(pWrkrInfo->p.nontx.actParams[j].param);\n\t\t\t\tpWrkrInfo->p.nontx.actParams[j].param = NULL;\n\t\t\t\tpWrkrInfo->p.nontx.actParams[j].lenBuf = 0;\n\t\t\t\tpWrkrInfo->p.nontx.actParams[j].lenStr = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tswitch(pAction->peParamPassing[j]) {\n\t\t\tcase ACT_ARRAY_PASSING:\n\t\t\t\tLogError(0, RS_RET_ERR, \"plugin error: no longer supported \"\n\t\t\t\t\t\"ARRAY_PASSING mode is used (see action.c)\");\n\t\t\t\treturn;\n\t\t\tcase ACT_JSON_PASSING:\n\t\t\t\tjson_object_put((struct json_object*)\n\t\t\t\t\t\t\t\tpWrkrInfo->p.nontx.actParams[j].param);\n\t\t\t\tpWrkrInfo->p.nontx.actParams[j].param = NULL;\n\t\t\t\tpWrkrInfo->p.nontx.actParams[j].lenBuf = 0;\n\t\t\t\tpWrkrInfo->p.nontx.actParams[j].lenStr = 0;\n\t\t\t\tbreak;\n\t\t\tcase ACT_STRING_PASSING:\n\t\t\tcase ACT_MSG_PASSING:\n\t\t\t\t/* no need to do anything with these */\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn;\n}\n\n\n/* This is used in resume processing. We only finally know that a resume\n * worked when we have been able to actually process a messages. As such,\n * we need to do some cleanup and status tracking in that case.\n */\nstatic void\nactionSetActionWorked(action_t *__restrict__ const pThis, wti_t *__restrict__ const pWti)\n{\n\tsetActionResumeInRow(pWti, pThis, 0);\n}\n\nstatic rsRetVal\nhandleActionExecResult(action_t *__restrict__ const pThis,\n\twti_t *__restrict__ const pWti,\n\tconst rsRetVal ret)\n{\n\tDEFiRet;\n\tswitch(ret) {\n\t\tcase RS_RET_OK:\n\t\t\tactionCommitted(pThis, pWti);\n\t\t\tactionSetActionWorked(pThis, pWti); /* we had a successful call! */\n\t\t\tbreak;\n\t\tcase RS_RET_DEFER_COMMIT:\n\t\t\tactionSetActionWorked(pThis, pWti); /* we had a successful call! */\n\t\t\t/* we are done, action state remains the same */\n\t\t\tbreak;\n\t\tcase RS_RET_PREVIOUS_COMMITTED:\n\t\t\t/* action state remains the same, but we had a commit. */\n\t\t\tpWti->actWrkrInfo[pThis->iActionNbr].bHadAutoCommit = 1;\n\t\t\tactionSetActionWorked(pThis, pWti); /* we had a successful call! */\n\t\t\tbreak;\n\t\tcase RS_RET_DISABLE_ACTION:\n\t\t\tactionDisable(pThis);\n\t\t\tbreak;\n\t\tcase RS_RET_SUSPENDED:\n\t\t\tactionRetry(pThis, pWti);\n\t\t\tbreak;\n\t\tdefault:/* error happened - if it hits us here, we assume the message cannot\n\t\t\t * be processed but an retry makes no sense. Usually, this should be\n\t\t\t * return code RS_RET_DATAFAIL. -- rgerhards, 2017-10-06\n\t\t\t */\n\t\t\tLogError(0, ret, \"action '%s' (module '%s') \"\n\t\t\t\t\"message lost, could not be processed. Check for \"\n\t\t\t\t\"additional error messages before this one.\",\n\t\t\t\tpThis->pszName, pThis->pMod->pszName);\n\t\t\tactionSetState(pThis, pWti, ACT_STATE_DATAFAIL);\n\t\t\tbreak;\n\t}\n\tiRet = getReturnCode(pThis, pWti);\n\n\tRETiRet;\n}\n\n/* call the DoAction output plugin entry point\n * rgerhards, 2008-01-28\n */\nstatic rsRetVal\nactionCallDoAction(action_t *__restrict__ const pThis,\n\tactWrkrIParams_t *__restrict__ const iparams,\n\twti_t *__restrict__ const pWti)\n{\n\tvoid *param[CONF_OMOD_NUMSTRINGS_MAXSIZE];\n\tint i;\n\tDEFiRet;\n\n\tDBGPRINTF(\"entering actionCalldoAction(), state: %s, actionNbr %d\\n\",\n\t\t  getActStateName(pThis, pWti), pThis->iActionNbr);\n\n\tpWti->actWrkrInfo[pThis->iActionNbr].bHadAutoCommit = 0;\n\t/* for this interface, we need to emulate the old style way\n\t * of parameter passing.\n\t */\n\tfor(i = 0 ; i < pThis->iNumTpls ; ++i) {\n\t\tparam[i] = actParam(iparams, pThis->iNumTpls, 0, i).param;\n\t}\n\n\tiRet = pThis->pMod->mod.om.doAction(param,\n\t\t\t\t            pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData);\n\tiRet = handleActionExecResult(pThis, pWti, iRet);\n\tRETiRet;\n}\n\n\n/* call the commitTransaction output plugin entry point */\nstatic rsRetVal ATTR_NONNULL()\nactionCallCommitTransaction(action_t * const pThis,\n\twti_t *const pWti,\n\tactWrkrIParams_t *__restrict__ const iparams, const int nparams)\n{\n\tDEFiRet;\n\n\tDBGPRINTF(\"entering actionCallCommitTransaction[%s], state: %s, nMsgs %u\\n\",\n\t\t  pThis->pszName, getActStateName(pThis, pWti), nparams);\n\n\tiRet = pThis->pMod->mod.om.commitTransaction(\n\t\t    pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData,\n\t\t    iparams, nparams);\n\tDBGPRINTF(\"actionCallCommitTransaction[%s] state: %s \"\n\t\t\"mod commitTransaction returned %d\\n\",\n\t\tpThis->pszName, getActStateName(pThis, pWti), iRet);\n\tiRet = handleActionExecResult(pThis, pWti, iRet);\n\tRETiRet;\n}\n\n\n/* process a message\n * this readies the action and then calls doAction()\n * rgerhards, 2008-01-28\n */\nstatic rsRetVal\nactionProcessMessage(action_t * const pThis, void *actParams, wti_t * const pWti)\n{\n\tDEFiRet;\n\n\tCHKiRet(actionPrepare(pThis, pWti));\n\tif(pThis->pMod->mod.om.SetShutdownImmdtPtr != NULL)\n\t\tpThis->pMod->mod.om.SetShutdownImmdtPtr(pThis->pModData, pWti->pbShutdownImmediate);\n\tif(getActionState(pWti, pThis) == ACT_STATE_ITX)\n\t\tCHKiRet(actionCallDoAction(pThis, actParams, pWti));\n\n\tiRet = getReturnCode(pThis, pWti);\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* the following function uses the new-style transactional interface */\nstatic rsRetVal\ndoTransaction(action_t *__restrict__ const pThis, wti_t *__restrict__ const pWti,\n\tactWrkrIParams_t *__restrict__ const iparams, const int nparams)\n{\n\tactWrkrInfo_t *wrkrInfo;\n\tint i;\n\tDEFiRet;\n\n\tDBGPRINTF(\"doTransaction[%s] enter\\n\", pThis->pszName);\n\twrkrInfo = &(pWti->actWrkrInfo[pThis->iActionNbr]);\n\tif(pThis->pMod->mod.om.commitTransaction != NULL) {\n\t\tDBGPRINTF(\"doTransaction: have commitTransaction IF, using that, pWrkrInfo %p\\n\", wrkrInfo);\n\t\tCHKiRet(actionCallCommitTransaction(pThis, pWti, iparams, nparams));\n\t} else { /* note: this branch is for compatibility with old TX modules */\n\t\tDBGPRINTF(\"doTransaction: action '%s', currIParam %d\\n\",\n\t\t\t   pThis->pszName, wrkrInfo->p.tx.currIParam);\n\t\tfor(i = 0 ; i < nparams ; ++i) {\n\t\t\t/* Note: we provide the message's base iparam - actionProcessMessage()\n\t\t\t * uses this as *base* address.\n\t\t\t */\n\t\t\tiRet = actionProcessMessage(pThis,\n\t\t\t\t&actParam(iparams, pThis->iNumTpls, i, 0), pWti);\n\t\t\tDBGPRINTF(\"doTransaction: action %d, processing msg %d, result %d\\n\",\n\t\t\t   pThis->iActionNbr, i,iRet);\n\t\t\tif(iRet == RS_RET_SUSPENDED) {\n\t\t\t\t--i; /* we need to re-submit */\n\t\t\t\t/* note: we are suspended and need to retry. In order not to\n\t\t\t\t * hammer the CPU, we now do a voluntarly wait of 1 second.\n\t\t\t\t * The rest will be handled by the standard retry handler.\n\t\t\t\t */\n\t\t\t\tsrSleep(1, 0);\n\t\t\t} else if(iRet != RS_RET_DEFER_COMMIT && iRet != RS_RET_PREVIOUS_COMMITTED &&\n\t\t\t   iRet != RS_RET_OK) {\n\t\t\t\tFINALIZE; /* let upper peer handle the error condition! */\n\t\t\t}\n\t\t}\n\t}\nfinalize_it:\n\tif(iRet == RS_RET_DEFER_COMMIT || iRet == RS_RET_PREVIOUS_COMMITTED)\n\t\tiRet = RS_RET_OK; /* this is expected for transactional action! */\n\tRETiRet;\n}\n\n\n/* Commit try committing (do not handle retry processing and such) */\nstatic rsRetVal ATTR_NONNULL()\nactionTryCommit(action_t *__restrict__ const pThis, wti_t *__restrict__ const pWti,\n\tactWrkrIParams_t *__restrict__ const iparams, const int nparams)\n{\n\tDEFiRet;\n\n\tDBGPRINTF(\"actionTryCommit[%s] enter\\n\", pThis->pszName);\n\tCHKiRet(actionPrepare(pThis, pWti));\n\n\tCHKiRet(doTransaction(pThis, pWti, iparams, nparams));\n\n\tif(getActionState(pWti, pThis) == ACT_STATE_ITX) {\n\t\tiRet = pThis->pMod->mod.om.endTransaction(pWti->actWrkrInfo[pThis->iActionNbr].actWrkrData);\n\t\tswitch(iRet) {\n\t\t\tcase RS_RET_OK:\n\t\t\t\tactionCommitted(pThis, pWti);\n\t\t\t\tbreak;\n\t\t\tcase RS_RET_SUSPENDED:\n\t\t\t\tactionRetry(pThis, pWti);\n\t\t\t\tbreak;\n\t\t\tcase RS_RET_DISABLE_ACTION:\n\t\t\t\tactionDisable(pThis);\n\t\t\t\tbreak;\n\t\t\tcase RS_RET_DEFER_COMMIT:\n\t\t\t\tDBGPRINTF(\"output plugin error: endTransaction() returns RS_RET_DEFER_COMMIT \"\n\t\t\t\t\t  \"- ignored\\n\");\n\t\t\t\tactionCommitted(pThis, pWti);\n\t\t\t\tbreak;\n\t\t\tcase RS_RET_PREVIOUS_COMMITTED:\n\t\t\t\tDBGPRINTF(\"output plugin error: endTransaction() returns RS_RET_PREVIOUS_COMMITTED \"\n\t\t\t\t\t  \"- ignored\\n\");\n\t\t\t\tactionCommitted(pThis, pWti);\n\t\t\t\tbreak;\n\t\t\tdefault:/* permanent failure of this message - no sense in retrying. This is\n\t\t\t\t * not yet handled (but easy TODO)\n\t\t\t\t */\n\t\t\t\tDBGPRINTF(\"action[%s]: actionTryCommit receveived iRet %d\\n\",\n\t\t\t\t\tpThis->pszName, iRet);\n\t\t\t\tFINALIZE;\n\t\t}\n\t}\n\tiRet = getReturnCode(pThis, pWti);\n\nfinalize_it:\n\tRETiRet;\n}\n\n/* If a transcation failed, we write the error file (if configured).\n */\nstatic void ATTR_NONNULL()\nactionWriteErrorFile(action_t *__restrict__ const pThis, const rsRetVal ret,\n\tactWrkrIParams_t *__restrict__ const iparams, const int nparams)\n{\n\tfjson_object *etry=NULL;\n\tint bNeedUnlock = 0;\n\n\tSTATSCOUNTER_INC(pThis->ctrFail, pThis->mutCtrFail);\n\n\tif(pThis->pszErrFile == NULL) {\n\t\tDBGPRINTF(\"action %s: commit failed, no error file set, silently \"\n\t\t\t\"discarding %d messages\\n\", pThis->pszName, nparams);\n\t\tgoto done;\n\t}\n\n\tDBGPRINTF(\"action %d commit failed, writing %u messages (%d tpls) to error file\\n\",\n\t\tpThis->iActionNbr, nparams, pThis->iNumTpls);\n\n\tpthread_mutex_lock(&pThis->mutErrFile);\n\tbNeedUnlock = 1;\n\n\tif(pThis->fdErrFile == -1) {\n\t\tpThis->fdErrFile = open(pThis->pszErrFile,\n\t\t\t\t\tO_WRONLY|O_CREAT|O_APPEND|O_LARGEFILE|O_CLOEXEC,\n\t\t\t\t\tS_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP);\n\t\tif(pThis->fdErrFile == -1) {\n\t\t\tLogError(errno, RS_RET_ERR, \"action %s: error opening error file %s\",\n\t\t\t\tpThis->pszName, pThis->pszErrFile);\n\t\t\tgoto done;\n\t\t}\n\t\tif (pThis->maxErrFileSize > 0) {\n\t\t\tstruct stat statbuf;\n\t\t\tif (fstat(pThis->fdErrFile, &statbuf) == -1) {\n\t\t\t\tLogError(errno, RS_RET_ERR, \"failed to fstat %s\", pThis->pszErrFile);\n\t\t\t\tgoto done;\n\t\t\t}\n\t\t\tpThis->currentErrFileSize = statbuf.st_size;\n\t\t}\n\t}\n\n\tfor(int i = 0 ; i < nparams ; ++i) {\n\t\tif((etry = fjson_object_new_object()) == NULL)\n\t\t\tgoto done;\n\t\tfjson_object_object_add(etry, \"action\", fjson_object_new_string((char*)pThis->pszName));\n\t\tfjson_object_object_add(etry, \"status\", fjson_object_new_int(ret));\n\t\tfor(int j = 0 ; j < pThis->iNumTpls ; ++j) {\n\t\t\tchar tplname[20];\n\t\t\tsnprintf(tplname, sizeof(tplname), \"template%d\", j);\n\t\t\ttplname[sizeof(tplname)-1] = '\\0';\n\t\t\tfjson_object_object_add(etry, tplname,\n\t\t\t\tfjson_object_new_string((char*)actParam(iparams, 1, i, j).param));\n\t\t}\n\n\t\tchar *const rendered = strdup((char*)fjson_object_to_json_string(etry));\n\t\tif(rendered == NULL)\n\t\t\tgoto done;\n\n\t\tsize_t toWrite = strlen(rendered) + 1;\n\t\t// Check if need to truncate the amount of bytes to write\n\t\tif (pThis->maxErrFileSize > 0) {\n\t\t\tif (pThis->currentErrFileSize + toWrite > pThis->maxErrFileSize) {\n\t\t\t\t// Truncate to the pending available\n\t\t\t\ttoWrite = pThis->maxErrFileSize - pThis->currentErrFileSize;\n\t\t\t}\n\t\t\tpThis->currentErrFileSize += toWrite;\n\t\t}\n\t\tif(toWrite > 0) {\n\t\t\t/* note: we use the '\\0' inside the string to store a LF - we do not\n\t\t\t * otherwise need it and it safes us a copy/realloc.\n\t\t\t */\n\t\t\trendered[toWrite-1] = '\\n'; /* NO LONGER A STRING! */\n\t\t\tconst ssize_t wrRet = write(pThis->fdErrFile, rendered, toWrite);\n\t\t\tif(wrRet != (ssize_t) toWrite) {\n\t\t\t\tLogError(errno, RS_RET_IO_ERROR,\n\t\t\t\t\t\"action %s: error writing errorFile %s, write returned %lld\",\n\t\t\t\t\tpThis->pszName, pThis->pszErrFile, (long long) wrRet);\n\t\t\t}\n\t\t}\n\t\tfree(rendered);\n\n\t\tfjson_object_put(etry);\n\t\tetry = NULL;\n\t}\ndone:\n\tif(bNeedUnlock) {\n\t\tpthread_mutex_unlock(&pThis->mutErrFile);\n\t}\n\tfjson_object_put(etry);\n\treturn;\n}\n\n\nstatic rsRetVal\nactionTryRemoveHardErrorsFromBatch(action_t *__restrict__ const pThis, wti_t *__restrict__ const pWti,\n\tactWrkrIParams_t *const new_iparams, unsigned *new_nMsgs)\n{\n\tactWrkrInfo_t *const wrkrInfo = &(pWti->actWrkrInfo[pThis->iActionNbr]);\n\tconst unsigned nMsgs = wrkrInfo->p.tx.currIParam;\n\tactWrkrIParams_t oneParamSet[CONF_OMOD_NUMSTRINGS_MAXSIZE];\n\trsRetVal ret;\n\tDEFiRet;\n\n\t*new_nMsgs = 0;\n\tfor(unsigned i = 0 ; i < nMsgs ; ++i) {\n\t\tsetActionResumeInRow(pWti, pThis, 0); // make sure we do not trigger OK-as-SUSPEND handling\n\t\tmemcpy(&oneParamSet, &actParam(wrkrInfo->p.tx.iparams, pThis->iNumTpls, i, 0),\n\t\t\tsizeof(actWrkrIParams_t) * pThis->iNumTpls);\n\t\tret = actionTryCommit(pThis, pWti, oneParamSet, 1);\n\t\tif(ret == RS_RET_SUSPENDED) {\n\t\t\tmemcpy(new_iparams + (*new_nMsgs * pThis->iNumTpls), &oneParamSet,\n\t\t\t\tsizeof(actWrkrIParams_t) * pThis->iNumTpls);\n\t\t\t++(*new_nMsgs);\n\t\t} else if(ret != RS_RET_OK) {\n\t\t\tactionWriteErrorFile(pThis, ret, oneParamSet, 1);\n\t\t}\n\t}\n\tRETiRet;\n}\n\n/* Note: we currently need to return an iRet, as this is used in\n * direct mode. TODO: However, it may be worth further investigating this,\n * as it looks like there is no ultimate consumer of this code.\n * rgerhards, 2013-11-06\n */\nstatic rsRetVal ATTR_NONNULL()\nactionCommit(action_t *__restrict__ const pThis, wti_t *__restrict__ const pWti)\n{\n\tactWrkrInfo_t *const wrkrInfo = &(pWti->actWrkrInfo[pThis->iActionNbr]);\n\t/* Variables that permit us to override the batch of messages */\n\tunsigned nMsgs = 0;\n\tactWrkrIParams_t *iparams = NULL;\n\tint needfree_iparams = 0; // work-around for clang static analyzer false positive\n\tDEFiRet;\n\n\tDBGPRINTF(\"actionCommit[%s]: enter, %d msgs\\n\", pThis->pszName, wrkrInfo->p.tx.currIParam);\n\tif(!pThis->isTransactional || pWti->actWrkrInfo[pThis->iActionNbr].p.tx.currIParam == 0) {\n\t\tFINALIZE;\n\t} else if(getActionState(pWti, pThis) == ACT_STATE_SUSP) {\n\t\t/* if we are suspended, we already tried everything to recover the\n\t\t * action - and failed. So all we can do here is write the error file.\n\t\t */\n\t\tactionWriteErrorFile(pThis, iRet, wrkrInfo->p.tx.iparams, wrkrInfo->p.tx.currIParam);\n\t\tFINALIZE;\n\t}\n\tDBGPRINTF(\"actionCommit[%s]: processing...\\n\", pThis->pszName);\n\n\t/* we now do one try at commiting the whole batch. Usually, this will\n\t * succeed. If so, we are happy and done. If not, we dig into the details\n\t * of finding out if we have a non-temporary error and try to handle this\n\t * as well as retry processing. Due to this logic we do a bit more retries\n\t * than configured (if temporary failure), but this unavoidable and should\n\t * do no real harm. - rgerhards, 2017-10-06\n\t */\n\tiRet = actionTryCommit(pThis, pWti, wrkrInfo->p.tx.iparams, wrkrInfo->p.tx.currIParam);\nDBGPRINTF(\"actionCommit[%s]: return actionTryCommit %d\\n\", pThis->pszName, iRet);\n\tif(iRet == RS_RET_OK) {\n\t\tFINALIZE;\n\t}\n\n\t/* check if this was a single-message batch. If it had a datafail error, we\n\t * are done. If it is a multi-message batch, we need to sort out the individual\n\t * message states.\n\t */\n\tif(wrkrInfo->p.tx.currIParam == 1) {\n\t\tneedfree_iparams = 0;\n\t\tiparams = wrkrInfo->p.tx.iparams;\n\t\tnMsgs = wrkrInfo->p.tx.currIParam;\n\t\tif(iRet == RS_RET_DATAFAIL) {\n\t\t\tFINALIZE;\n\t\t}\n\t} else {\n\t\tDBGPRINTF(\"actionCommit[%s]: somewhat unhappy, full batch of %d msgs returned \"\n\t\t\t\"status %d. Trying messages as individual actions.\\n\",\n\t\t\tpThis->pszName, wrkrInfo->p.tx.currIParam, iRet);\n\t\tCHKmalloc(iparams = malloc(sizeof(actWrkrIParams_t) * pThis->iNumTpls\n\t\t\t* wrkrInfo->p.tx.currIParam));\n\t\tneedfree_iparams = 1;\n\t\tactionTryRemoveHardErrorsFromBatch(pThis, pWti, iparams, &nMsgs);\n\t}\n\n\tif(nMsgs == 0) {\n\t\tABORT_FINALIZE(RS_RET_OK); // here, we consider everyting OK\n\t}\n\n\t/* We still have some messages with suspend error. So now let's do our\n\t * \"regular\" retry and suspend processing.\n\t */\n\tDBGPRINTF(\"actionCommit[%s]: unhappy, we still have %d uncommitted messages.\\n\",\n\t\tpThis->pszName, nMsgs);\n\tint bDone = 0;\n\tdo {\n\t\tiRet = actionTryCommit(pThis, pWti, iparams, nMsgs);\n\t\tDBGPRINTF(\"actionCommit[%s]: in retry loop, iRet %d\\n\",\n\t\t\tpThis->pszName, iRet);\n\t\tif(iRet == RS_RET_FORCE_TERM) {\n\t\t\tABORT_FINALIZE(RS_RET_FORCE_TERM);\n\t\t} else if(iRet == RS_RET_SUSPENDED) {\n\t\t\tiRet = actionDoRetry(pThis, pWti);\n\t\t\tDBGPRINTF(\"actionCommit[%s]: actionDoRetry returned %d\\n\",\n\t\t\t\tpThis->pszName, iRet);\n\t\t\tif(iRet == RS_RET_FORCE_TERM) {\n\t\t\t\tABORT_FINALIZE(RS_RET_FORCE_TERM);\n\t\t\t} else if(iRet != RS_RET_OK) {\n\t\t\t\tactionWriteErrorFile(pThis, iRet, iparams, nMsgs);\n\t\t\t\tbDone = 1;\n\t\t\t}\n\t\t\tcontinue;\n\t\t} else if(iRet == RS_RET_OK ||\n\t\t          iRet == RS_RET_SUSPENDED ||\n\t\t\t  iRet == RS_RET_ACTION_FAILED) {\n\t\t\tbDone = 1;\n\t\t}\n\t\tif(getActionState(pWti, pThis) == ACT_STATE_RDY  ||\n\t\t   getActionState(pWti, pThis) == ACT_STATE_SUSP) {\n\t\t\tbDone = 1;\n\t\t}\n\t} while(!bDone);\nfinalize_it:\n\tDBGPRINTF(\"actionCommit[%s]: done, iRet %d\\n\", pThis->pszName, iRet);\n\tif(needfree_iparams) {\n\t\tfree(iparams);\n\t}\n\twrkrInfo->p.tx.currIParam = 0; /* reset to beginning */\n\tRETiRet;\n}\n\n/* Commit all active transactions in *DIRECT mode* */\nvoid ATTR_NONNULL()\nactionCommitAllDirect(wti_t *__restrict__ const pWti)\n{\n\tint i;\n\taction_t *pAction;\n\n\tfor(i = 0 ; i < runConf->actions.iActionNbr ; ++i) {\n\t\tpAction = pWti->actWrkrInfo[i].pAction;\n\t\tif(pAction == NULL)\n\t\t\tcontinue;\n\t\tDBGPRINTF(\"actionCommitAllDirect: action %d, state %u, nbr to commit %d \"\n\t\t\t  \"isTransactional %d\\n\",\n\t\t\t  i, getActionStateByNbr(pWti, i), pWti->actWrkrInfo->p.tx.currIParam,\n\t\t\t  pAction->isTransactional);\n\t\tif(pAction->pQueue->qType == QUEUETYPE_DIRECT)\n\t\t\tactionCommit(pAction, pWti);\n\t}\n}\n\n/* process a single message. This is both called if we run from the\n * consumer side of an action queue as well as directly from the main\n * queue thread if the action queue is set to \"direct\".\n */\nstatic rsRetVal\nprocessMsgMain(action_t *__restrict__ const pAction,\n\twti_t *__restrict__ const pWti,\n\tsmsg_t *__restrict__ const pMsg,\n\tstruct syslogTime *ttNow)\n{\n\tDEFiRet;\n\n\tCHKiRet(prepareDoActionParams(pAction, pWti, pMsg, ttNow));\n\n\tif(pAction->isTransactional) {\n\t\tpWti->actWrkrInfo[pAction->iActionNbr].pAction = pAction;\n\t\tDBGPRINTF(\"action '%s': is transactional - executing in commit phase\\n\", pAction->pszName);\n\t\tactionPrepare(pAction, pWti);\n\t\tiRet = getReturnCode(pAction, pWti);\n\t\tFINALIZE;\n\t}\n\n\tiRet = actionProcessMessage(pAction,\n\t\t\t\t    pWti->actWrkrInfo[pAction->iActionNbr].p.nontx.actParams,\n\t\t\t\t    pWti);\n\tif(pAction->bNeedReleaseBatch)\n\t\treleaseDoActionParams(pAction, pWti, 0);\nfinalize_it:\n\tif(iRet == RS_RET_OK) {\n\t\tif(pWti->execState.bDoAutoCommit)\n\t\t\tiRet = actionCommit(pAction, pWti);\n\t}\n\tRETiRet;\n}\n\n/* This entry point is called by the ACTION queue (not main queue!)\n */\nstatic rsRetVal ATTR_NONNULL()\nprocessBatchMain(void *__restrict__ const pVoid,\n\tbatch_t *__restrict__ const pBatch,\n\twti_t *__restrict__ const pWti)\n{\n\taction_t *__restrict__ const pAction = (action_t*__restrict__ const) pVoid;\n\tint i;\n\tstruct syslogTime ttNow;\n\tDEFiRet;\n\n\twtiResetExecState(pWti, pBatch);\n\t/* indicate we have not yet read the date */\n\tttNow.year = 0;\n\n\tfor(i = 0 ; i < batchNumMsgs(pBatch) && !*pWti->pbShutdownImmediate ; ++i) {\n\t\tif(batchIsValidElem(pBatch, i)) {\n\t\t\t/* we do not check error state below, because aborting would be\n\t\t\t * more harmful than continuing.\n\t\t\t */\n\t\t\trsRetVal localRet = processMsgMain(pAction, pWti, pBatch->pElem[i].pMsg, &ttNow);\n\t\t\tDBGPRINTF(\"processBatchMain: i %d, processMsgMain iRet %d\\n\", i, localRet);\n\t\t\tif(   localRet == RS_RET_OK\n\t\t\t   || localRet == RS_RET_DEFER_COMMIT\n\t\t\t   || localRet == RS_RET_ACTION_FAILED\n\t\t\t   || localRet == RS_RET_PREVIOUS_COMMITTED ) {\n\t\t\t\tbatchSetElemState(pBatch, i, BATCH_STATE_COMM);\n\t\t\t\tDBGPRINTF(\"processBatchMain: i %d, COMM state set\\n\", i);\n\t\t\t}\n\t\t}\n\t}\n\n\tiRet = actionCommit(pAction, pWti);\n\tRETiRet;\n}\n\n\n/* remove an action worker instance from our table of\n * workers. To be called from worker handler (wti).\n */\nvoid\nactionRemoveWorker(action_t *const __restrict__ pAction,\n\tvoid *const __restrict__ actWrkrData)\n{\n\tpthread_mutex_lock(&pAction->mutWrkrDataTable);\n\tpAction->nWrkr--;\n\tfor(int w = 0 ; w < pAction->wrkrDataTableSize ; ++w) {\n\t\tif(pAction->wrkrDataTable[w] == actWrkrData) {\n\t\t\tpAction->wrkrDataTable[w] = NULL;\n\t\t\tbreak; /* done */\n\t\t}\n\t}\n\tpthread_mutex_unlock(&pAction->mutWrkrDataTable);\n}\n\n\n/* call the HUP handler for a given action, if such a handler is defined.\n * Note that the action must be able to service HUP requests concurrently\n * to any current doAction() processing.\n */\nrsRetVal\nactionCallHUPHdlr(action_t * const pAction)\n{\n\tDEFiRet;\n\n\tassert(pAction != NULL);\n\tDBGPRINTF(\"Action %p checks HUP hdlr, act level: %p, wrkr level %p\\n\",\n\t\tpAction, pAction->pMod->doHUP, pAction->pMod->doHUPWrkr);\n\n\tif(pAction->pMod->doHUP != NULL) {\n\t\tCHKiRet(pAction->pMod->doHUP(pAction->pModData));\n\t}\n\n\tif(pAction->pMod->doHUPWrkr != NULL) {\n\t\tpthread_mutex_lock(&pAction->mutWrkrDataTable);\n\t\tfor(int i = 0 ; i < pAction->wrkrDataTableSize ; ++i) {\n\t\t\tdbgprintf(\"HUP: table entry %d: %p %s\\n\", i,\n\t\t\t\tpAction->wrkrDataTable[i],\n\t\t\t\tpAction->wrkrDataTable[i] == NULL ? \"[unused]\" : \"\");\n\t\t\tif(pAction->wrkrDataTable[i] != NULL) {\n\t\t\t\tconst rsRetVal localRet\n\t\t\t\t\t= pAction->pMod->doHUPWrkr(pAction->wrkrDataTable[i]);\n\t\t\t\tif(localRet != RS_RET_OK) {\n\t\t\t\t\tDBGPRINTF(\"HUP handler returned error state %d - \"\n\t\t\t\t\t\t  \"ignored\\n\", localRet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpthread_mutex_unlock(&pAction->mutWrkrDataTable);\n\t}\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* set the action message queue mode\n * TODO: probably move this into queue object, merge with MainMsgQueue!\n * rgerhards, 2008-01-28\n */\nstatic rsRetVal setActionQueType(void __attribute__((unused)) *pVal, uchar *pszType)\n{\n\tDEFiRet;\n\n\tif (!strcasecmp((char *) pszType, \"fixedarray\")) {\n\t\tcs.ActionQueType = QUEUETYPE_FIXED_ARRAY;\n\t\tDBGPRINTF(\"action queue type set to FIXED_ARRAY\\n\");\n\t} else if (!strcasecmp((char *) pszType, \"linkedlist\")) {\n\t\tcs.ActionQueType = QUEUETYPE_LINKEDLIST;\n\t\tDBGPRINTF(\"action queue type set to LINKEDLIST\\n\");\n\t} else if (!strcasecmp((char *) pszType, \"disk\")) {\n\t\tcs.ActionQueType = QUEUETYPE_DISK;\n\t\tDBGPRINTF(\"action queue type set to DISK\\n\");\n\t} else if (!strcasecmp((char *) pszType, \"direct\")) {\n\t\tcs.ActionQueType = QUEUETYPE_DIRECT;\n\t\tDBGPRINTF(\"action queue type set to DIRECT (no queueing at all)\\n\");\n\t} else {\n\t\tLogError(0, RS_RET_INVALID_PARAMS, \"unknown actionqueue parameter: %s\", (char *) pszType);\n\t\tiRet = RS_RET_INVALID_PARAMS;\n\t}\n\tfree(pszType); /* no longer needed */\n\n\tRETiRet;\n}\n\n\n/* This submits the message to the action queue in case we do NOT need to handle repeat\n * message processing. That case permits us to gain lots of freedom during processing\n * and thus speed. This is also utilized to submit messages in more complex cases once\n * the complex logic has been applied ;)\n * rgerhards, 2010-06-08\n */\nstatic rsRetVal ATTR_NONNULL()\ndoSubmitToActionQ(action_t * const pAction, wti_t * const pWti, smsg_t *pMsg)\n{\n\tstruct syslogTime ttNow; // TODO: think if we can buffer this in pWti\n\tDEFiRet;\n\n\tDBGPRINTF(\"action '%s': called, logging to %s (susp %d/%d, direct q %d)\\n\",\n\t\tpAction->pszName, module.GetStateName(pAction->pMod),\n\t\tpAction->bExecWhenPrevSusp, pWti->execState.bPrevWasSuspended,\n\t\tpAction->pQueue->qType == QUEUETYPE_DIRECT);\n\n\tif(   pAction->bExecWhenPrevSusp\n\t   && !pWti->execState.bPrevWasSuspended) {\n\t\tDBGPRINTF(\"action '%s': NOT executing, as previous action was \"\n\t\t\t  \"not suspended\\n\", pAction->pszName);\n\t\tFINALIZE;\n\t}\n\n\tSTATSCOUNTER_INC(pAction->ctrProcessed, pAction->mutCtrProcessed);\n\tif(pAction->pQueue->qType == QUEUETYPE_DIRECT) {\n\t\tttNow.year = 0;\n\t\tiRet = processMsgMain(pAction, pWti, pMsg, &ttNow);\n\t} else {/* in this case, we do single submits to the queue.\n\t\t * TODO: optimize this, we may do at least a multi-submit!\n\t\t */\n\t\tiRet = qqueueEnqMsg(pAction->pQueue, eFLOWCTL_NO_DELAY,\n\t\t\tpAction->bCopyMsg ? MsgDup(pMsg) : MsgAddRef(pMsg));\n\t}\n\tpWti->execState.bPrevWasSuspended =\n\t\t(iRet == RS_RET_SUSPENDED || iRet == RS_RET_ACTION_FAILED);\n\n\tif (iRet == RS_RET_ACTION_FAILED)\t/* Increment failed counter */\n\t\tSTATSCOUNTER_INC(pAction->ctrFail, pAction->mutCtrFail);\n\n\tDBGPRINTF(\"action '%s': set suspended state to %d\\n\",\n\t\tpAction->pszName, pWti->execState.bPrevWasSuspended);\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* This function builds up a batch of messages to be (later)\n * submitted to the action queue.\n * Important: this function MUST not be called with messages that are to\n * be discarded due to their \"prevWasSuspended\" state. It will not check for\n * this and submit all messages to the queue for execution. So these must\n * be filtered out before calling us (what is done currently!).\n */\nrsRetVal\nactionWriteToAction(action_t * const pAction, smsg_t *pMsg, wti_t * const pWti)\n{\n\tDEFiRet;\n\n\t/* first, we check if the action should actually be called. The action-specific\n\t * $ActionExecOnlyEveryNthTime permits us to execute an action only every Nth\n\t * time. So we need to check if we need to drop the (otherwise perfectly executable)\n\t * action for this reason. Note that in case we need to drop it, we return RS_RET_OK\n\t * as the action was properly \"passed to execution\" from the upper layer's point\n\t * of view. -- rgerhards, 2008-08-07.\n\t */\n\tif(pAction->iExecEveryNthOccur > 1) {\n\t\t/* we need to care about multiple occurrences */\n\t\tif(   pAction->iExecEveryNthOccurTO > 0\n\t\t   && (getActNow(pAction) - pAction->tLastOccur) > pAction->iExecEveryNthOccurTO) {\n\t\t  \tDBGPRINTF(\"n-th occurrence handling timed out (%d sec), restarting from 0\\n\",\n\t\t\t\t  (int) (getActNow(pAction) - pAction->tLastOccur));\n\t\t\tpAction->iNbrNoExec = 0;\n\t\t\tpAction->tLastOccur = getActNow(pAction);\n\t\t   }\n\t\tif(pAction->iNbrNoExec < pAction->iExecEveryNthOccur - 1) {\n\t\t\t++pAction->iNbrNoExec;\n\t\t\tDBGPRINTF(\"action %p passed %d times to execution - less than configured - discarding\\n\",\n\t\t\t  pAction, pAction->iNbrNoExec);\n\t\t\tFINALIZE;\n\t\t} else {\n\t\t\tpAction->iNbrNoExec = 0; /* we execute the action now, so the number of no execs is down to */\n\t\t}\n\t}\n\n\tDBGPRINTF(\"Called action(complex case), logging to %s\\n\", module.GetStateName(pAction->pMod));\n\n\t/* now check if we need to drop the message because otherwise the action would be too\n\t * frequently called. -- rgerhards, 2008-04-08\n\t * Note that the check for \"pAction->iSecsExecOnceInterval > 0\" is not necessary from\n\t * a purely logical point of view. However, if safes us to check the system time in\n\t * (those common) cases where ExecOnceInterval is not used. -- rgerhards, 2008-09-16\n\t */\n\tif(pAction->iSecsExecOnceInterval > 0 &&\n\t   pAction->iSecsExecOnceInterval + pAction->tLastExec > getActNow(pAction)) {\n\t\t/* in this case we need to discard the message - its not yet time to exec the action */\n\t\tDBGPRINTF(\"action not yet ready again to be executed, onceInterval %d, tCurr %d, tNext %d\\n\",\n\t\t\t  (int) pAction->iSecsExecOnceInterval, (int) getActNow(pAction),\n\t\t\t  (int) (pAction->iSecsExecOnceInterval + pAction->tLastExec));\n\t\tFINALIZE;\n\t}\n\n\t/* we use reception time, not dequeue time - this is considered more appropriate and also faster ;)\n\t * rgerhards, 2008-09-17 */\n\tpAction->tLastExec = getActNow(pAction); /* re-init time flags */\n\tpAction->f_time = pMsg->ttGenTime;\n\n\t/* When we reach this point, we have a valid, non-disabled action.\n\t * So let's enqueue our message for execution. -- rgerhards, 2007-07-24\n\t */\n\tiRet = doSubmitToActionQ(pAction, pWti, pMsg);\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* Call configured action, most complex case with all features supported (and thus slow).\n * rgerhards, 2010-06-08\n */\n\nPRAGMA_DIAGNOSTIC_PUSH;\nPRAGMA_IGNORE_Wempty_body;\nstatic rsRetVal\ndoSubmitToActionQComplex(action_t * const pAction, wti_t * const pWti, smsg_t *pMsg)\n{\n\tDEFiRet;\n\n\td_pthread_mutex_lock(&pAction->mutAction);\n\tpthread_cleanup_push(mutexCancelCleanup, &pAction->mutAction);\n\tDBGPRINTF(\"Called action %p (complex case), logging to %s\\n\",\n\t\t  pAction, module.GetStateName(pAction->pMod));\n\n\tpAction->tActNow = -1; /* we do not yet know our current time (clear prev. value) */\n\t// TODO: can we optimize the \"now\" handling again (was batch, I guess...)?\n\n\t/* don't output marks to recently written outputs */\n\tif(pAction->bWriteAllMarkMsgs == 0\n\t   && (pMsg->msgFlags & MARK) && (getActNow(pAction) - pAction->f_time) < MarkInterval / 2) {\n\t\tABORT_FINALIZE(RS_RET_OK);\n\t}\n\n\t/* call the output driver */\n\tiRet = actionWriteToAction(pAction, pMsg, pWti);\n\nfinalize_it:\n\td_pthread_mutex_unlock(&pAction->mutAction);\n\tpthread_cleanup_pop(0); /* remove mutex cleanup handler */\n\n\tRETiRet;\n}\nPRAGMA_DIAGNOSTIC_POP\n\n\n/* helper to activateActions, it activates a specific action.\n */\nDEFFUNC_llExecFunc(doActivateActions)\n{\n\trsRetVal localRet;\n\taction_t * const pThis = (action_t*) pData;\n\tlocalRet = qqueueStart(runConf, pThis->pQueue);\n\tif(localRet != RS_RET_OK) {\n\t\tif(runConf->globals.bAbortOnFailedQueueStartup) {\n\t\t\tfprintf(stderr, \"rsyslogd: error %d starting up action queue, \"\n\t\t\t\t\"abortOnFailedQueueStartup is set, so we abort rsyslog now.\", localRet);\n\t\t\tfflush(stderr);\n\t\t\texit(1); /* \"good\" exit, this is intended here */\n\t\t}\n\t\tLogError(0, localRet, \"error starting up action queue\");\n\t\tif(localRet == RS_RET_FILE_PREFIX_MISSING) {\n\t\t\tLogError(0, localRet, \"file prefix (work directory?) \"\n\t\t\t\t\t\"is missing\");\n\t\t}\n\t\tactionDisable(pThis);\n\t}\n\tDBGPRINTF(\"Action %s[%p]: queue %p started\\n\", modGetName(pThis->pMod),\n\t\t  pThis, pThis->pQueue);\n\treturn RS_RET_OK; /* we ignore errors, we can not do anything either way */\n}\n\n\n/* This function \"activates\" the action after privileges have been dropped. Currently,\n * this means that the queues are started.\n * rgerhards, 2011-05-02\n */\nrsRetVal\nactivateActions(void)\n{\n\tDEFiRet;\n\tiRet = ruleset.IterateAllActions(runConf, doActivateActions, NULL);\n\tRETiRet;\n}\n\n\n\n/* This submits the message to the action queue in case where we need to handle\n * bWriteAllMarkMessage == RSFALSE only. Note that we use a non-blocking CAS loop\n * for the synchronization. Here, we just modify the filter condition to be false when\n * a mark message must not be written. However, in this case we must save the previous\n * filter as we may need it in the next action (potential future optimization: check if this is\n * the last action TODO).\n * rgerhards, 2010-06-08\n */\nstatic rsRetVal\ndoSubmitToActionQNotAllMark(action_t * const pAction, wti_t * const pWti, smsg_t * const pMsg)\n{\n\tint doProcess = 1;\n\ttime_t lastAct;\n\tDEFiRet;\n\n\t/* TODO: think about the whole logic. If messages come in out of order, things\n\t * tend to become a bit unreliable. On the other hand, this only happens if we have\n\t * very high traffic, in which this use case here is not really affected (as the\n\t * MarkInterval is pretty corase).\n\t */\n\t/* CAS loop, we write back a bit early, but that's OK... */\n\t/* we use reception time, not dequeue time - this is considered more appropriate and\n\t * also faster ;) -- rgerhards, 2008-09-17 */\n\tdo {\n\t\tlastAct = pAction->f_time;\n\t\tif(pMsg->msgFlags & MARK) {\n\t\t\tif((pMsg->ttGenTime - lastAct) < MarkInterval / 2) {\n\t\t\t\tdoProcess = 0;\n\t\t\t\tDBGPRINTF(\"action was recently called, ignoring mark message\\n\");\n\t\t\t\tbreak; /* do not update timestamp for non-written mark messages */\n\t\t\t}\n\t\t}\n\t} while(ATOMIC_CAS_time_t(&pAction->f_time, lastAct,\n\t\tpMsg->ttGenTime, &pAction->mutCAS) == 0);\n\n\tif(doProcess) {\n\t\tDBGPRINTF(\"Called action(NotAllMark), processing via '%s'\\n\",\n\t\t\t  module.GetStateName(pAction->pMod));\n\t\tiRet = doSubmitToActionQ(pAction, pWti, pMsg);\n\t}\n\n\tRETiRet;\n}\n\n\n/* apply all params from param block to action. This supports the v6 config system.\n * Defaults must have been set appropriately during action construct!\n * rgerhards, 2011-08-01\n */\nstatic rsRetVal\nactionApplyCnfParam(action_t * const pAction, struct cnfparamvals * const pvals)\n{\n\tint i;\n\n\tfor(i = 0 ; i < pblk.nParams ; ++i) {\n\t\tif(!pvals[i].bUsed)\n\t\t\tcontinue;\n\t\tif(!strcmp(pblk.descr[i].name, \"name\")) {\n\t\t\tpAction->pszName = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblk.descr[i].name, \"type\")) {\n\t\t\tcontinue; /* this is handled seperately during module select! */\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.errorfile\")) {\n\t\t\tpAction->pszErrFile = es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.errorfile.maxsize\")) {\n\t\t\tpAction->maxErrFileSize = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.externalstate.file\")) {\n\t\t\tpAction->pszExternalStateFile = es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.writeallmarkmessages\")) {\n\t\t\tpAction->bWriteAllMarkMsgs = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.execonlyeverynthtime\")) {\n\t\t\tpAction->iExecEveryNthOccur = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.execonlyeverynthtimetimeout\")) {\n\t\t\tpAction->iExecEveryNthOccurTO = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.execonlyonceeveryinterval\")) {\n\t\t\tpAction->iSecsExecOnceInterval = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.execonlywhenpreviousissuspended\")) {\n\t\t\tpAction->bExecWhenPrevSusp = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.repeatedmsgcontainsoriginalmsg\")) {\n\t\t\tpAction->bRepMsgHasMsg = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.resumeretrycount\")) {\n\t\t\tpAction->iResumeRetryCount = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.reportsuspension\")) {\n\t\t\tpAction->bReportSuspension = (int) pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.reportsuspensioncontinuation\")) {\n\t\t\tpAction->bReportSuspensionCont = (int) pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.copymsg\")) {\n\t\t\tpAction->bCopyMsg = (int) pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.resumeinterval\")) {\n\t\t\tpAction->iResumeInterval = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"action.resumeintervalmax\")) {\n\t\t\tpAction->iResumeIntervalMax = pvals[i].val.d.n;\n\t\t} else {\n\t\t\tdbgprintf(\"action: program error, non-handled \"\n\t\t\t  \"param '%s'\\n\", pblk.descr[i].name);\n\t\t}\n\t}\n\treturn RS_RET_OK;\n}\n\n\n/* add an Action to the current selector\n * The pOMSR is freed, as it is not needed after this function.\n * Note: this function pulls global data that specifies action config state.\n * rgerhards, 2007-07-27\n */\nrsRetVal\naddAction(action_t **ppAction, modInfo_t *pMod, void *pModData,\n\t  omodStringRequest_t *pOMSR, struct cnfparamvals *actParams,\n\t  struct nvlst * const lst)\n{\n\tDEFiRet;\n\tint i;\n\tint iTplOpts;\n\tuchar *pTplName;\n\taction_t *pAction;\n\tchar errMsg[512];\n\n\tassert(ppAction != NULL);\n\tassert(pMod != NULL);\n\tassert(pOMSR != NULL);\n\tDBGPRINTF(\"Module %s processes this action.\\n\", module.GetName(pMod));\n\n\tCHKiRet(actionConstruct(&pAction)); /* create action object first */\n\tpAction->pMod = pMod;\n\tpAction->pModData = pModData;\n\tif(actParams == NULL) { /* use legacy systemn */\n\t\tpAction->pszName = cs.pszActionName;\n\t\tpAction->iResumeInterval = cs.glbliActionResumeInterval;\n\t\tpAction->iResumeRetryCount = cs.glbliActionResumeRetryCount;\n\t\tpAction->bWriteAllMarkMsgs = cs.bActionWriteAllMarkMsgs;\n\t\tpAction->bExecWhenPrevSusp = cs.bActExecWhenPrevSusp;\n\t\tpAction->iSecsExecOnceInterval = cs.iActExecOnceInterval;\n\t\tpAction->iExecEveryNthOccur = cs.iActExecEveryNthOccur;\n\t\tpAction->iExecEveryNthOccurTO = cs.iActExecEveryNthOccurTO;\n\t\tpAction->bRepMsgHasMsg = cs.bActionRepMsgHasMsg;\n\t\tcs.iActExecEveryNthOccur = 0; /* auto-reset */\n\t\tcs.iActExecEveryNthOccurTO = 0; /* auto-reset */\n\t\tcs.bActionWriteAllMarkMsgs = 1; /* auto-reset */\n\t\tcs.pszActionName = NULL;\t/* free again! */\n\t} else {\n\t\tactionApplyCnfParam(pAction, actParams);\n\t}\n\n\t/* check if we can obtain the template pointers - TODO: move to separate function? */\n\tpAction->iNumTpls = OMSRgetEntryCount(pOMSR);\n\tassert(pAction->iNumTpls >= 0); /* only debug check because this \"can not happen\" */\n\t/* please note: iNumTpls may validly be zero. This is the case if the module\n\t * does not request any templates. This sounds unlikely, but an actual example is\n\t * the discard action, which does not require a string. -- rgerhards, 2007-07-30\n\t */\n\tif(pAction->iNumTpls > 0) {\n\t\t/* we first need to create the template arrays */\n\t\tCHKmalloc(pAction->ppTpl = (struct template **)calloc(pAction->iNumTpls, sizeof(struct template *)));\n\t\tCHKmalloc(pAction->peParamPassing = (paramPassing_t*)calloc(pAction->iNumTpls,\n\t\t\tsizeof(paramPassing_t)));\n\t}\n\n\tpAction->bUsesMsgPassingMode = 0;\n\tpAction->bNeedReleaseBatch = 0;\n\tfor(i = 0 ; i < pAction->iNumTpls ; ++i) {\n\t\tCHKiRet(OMSRgetEntry(pOMSR, i, &pTplName, &iTplOpts));\n\t\t/* Ok, we got everything, so it now is time to look up the template\n\t\t * (Hint: templates MUST be defined before they are used!)\n\t\t */\n\t\tif(!(iTplOpts & OMSR_TPL_AS_MSG)) {\n\t\t   \tif((pAction->ppTpl[i] =\n\t\t\t\ttplFind(loadConf, (char*)pTplName, strlen((char*)pTplName))) == NULL) {\n\t\t\t\tsnprintf(errMsg, sizeof(errMsg),\n\t\t\t\t\t \" Could not find template %d '%s' - action disabled\",\n\t\t\t\t\t i, pTplName);\n\t\t\t\terrno = 0;\n\t\t\t\tLogError(0, RS_RET_NOT_FOUND, \"%s\", errMsg);\n\t\t\t\tABORT_FINALIZE(RS_RET_NOT_FOUND);\n\t\t\t}\n\t\t\t/* check required template options */\n\t\t\tif(   (iTplOpts & OMSR_RQD_TPL_OPT_SQL)\n\t\t\t   && (pAction->ppTpl[i]->optFormatEscape == 0)) {\n\t\t\t\terrno = 0;\n\t\t\t\tLogError(0, RS_RET_RQD_TPLOPT_MISSING, \"Action disabled.\"\n\t\t\t\t\t\t\" To use this action, you have to specify \"\n\t\t\t\t\t\t\"the SQL or stdSQL option in your template!\\n\");\n\t\t\t\tABORT_FINALIZE(RS_RET_RQD_TPLOPT_MISSING);\n\t\t\t}\n\t\t}\n\n\t\t/* set parameter-passing mode */\n\t\tif(iTplOpts & OMSR_TPL_AS_ARRAY) {\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t} else if(iTplOpts & OMSR_TPL_AS_MSG) {\n\t\t\tpAction->peParamPassing[i] = ACT_MSG_PASSING;\n\t\t\tpAction->bUsesMsgPassingMode = 1;\n\t\t} else if(iTplOpts & OMSR_TPL_AS_JSON) {\n\t\t\tpAction->peParamPassing[i] = ACT_JSON_PASSING;\n\t\t\tpAction->bNeedReleaseBatch = 1;\n\t\t} else {\n\t\t\tpAction->peParamPassing[i] = ACT_STRING_PASSING;\n\t\t}\n\n\t\tDBGPRINTF(\"template: '%s' assigned\\n\", pTplName);\n\t}\n\n\tpAction->pMod = pMod;\n\tpAction->pModData = pModData;\n\n\tCHKiRet(actionConstructFinalize(pAction, lst));\n\n\t*ppAction = pAction; /* finally store the action pointer */\n\nfinalize_it:\n\tif(iRet == RS_RET_OK)\n\t\tiRet = OMSRdestruct(pOMSR);\n\telse {\n\t\t/* do not overwrite error state! */\n\t\tOMSRdestruct(pOMSR);\n\t\tif(pAction != NULL)\n\t\t\tactionDestruct(pAction);\n\t}\n\n\tRETiRet;\n}\n\n\n/* Reset config variables to default values.\n * rgerhards, 2009-11-12\n */\nstatic rsRetVal\nresetConfigVariables(uchar __attribute__((unused)) *pp, void __attribute__((unused)) *pVal)\n{\n\tcs.iActExecOnceInterval = 0;\n\tcs.bActExecWhenPrevSusp = 0;\n\treturn RS_RET_OK;\n}\n\n\n/* initialize (current) config variables.\n * Used at program start and when a new scope is created.\n */\nstatic void\ninitConfigVariables(void)\n{\n\tcs.bActionWriteAllMarkMsgs = 1;\n\tcs.glbliActionResumeRetryCount = 0;\n\tcs.bActExecWhenPrevSusp = 0;\n\tcs.iActExecOnceInterval = 0;\n\tcs.iActExecEveryNthOccur = 0;\n\tcs.iActExecEveryNthOccurTO = 0;\n\tcs.glbliActionResumeInterval = 30;\n\tcs.glbliActionResumeRetryCount = 0;\n\tcs.bActionRepMsgHasMsg = 0;\n\tif(cs.pszActionName != NULL) {\n\t\tfree(cs.pszActionName);\n\t\tcs.pszActionName = NULL;\n\t}\n\tactionResetQueueParams();\n}\n\n\nrsRetVal\nactionNewInst(struct nvlst *lst, action_t **ppAction)\n{\n\tstruct cnfparamvals *paramvals;\n\tmodInfo_t *pMod;\n\tuchar *cnfModName = NULL;\n\tomodStringRequest_t *pOMSR;\n\tvoid *pModData;\n\taction_t *pAction;\n\tDEFiRet;\n\n\tparamvals = nvlstGetParams(lst, &pblk, NULL);\n\tif(paramvals == NULL) {\n\t\tABORT_FINALIZE(RS_RET_PARAM_ERROR);\n\t}\n\tdbgprintf(\"action param blk after actionNewInst:\\n\");\n\tcnfparamsPrint(&pblk, paramvals);\n\tcnfModName = (uchar*)es_str2cstr(paramvals[cnfparamGetIdx(&pblk, (\"type\"))].val.d.estr, NULL);\n\tif((pMod = module.FindWithCnfName(loadConf, cnfModName, eMOD_OUT)) == NULL) {\n\t\tLogError(0, RS_RET_MOD_UNKNOWN, \"module name '%s' is unknown\", cnfModName);\n\t\tABORT_FINALIZE(RS_RET_MOD_UNKNOWN);\n\t}\n\tCHKiRet(pMod->mod.om.newActInst(cnfModName, lst, &pModData, &pOMSR));\n\n\tif((iRet = addAction(&pAction, pMod, pModData, pOMSR, paramvals, lst)) == RS_RET_OK) {\n\t\t/* check if the module is compatible with select features\n\t\t * (currently no such features exist) */\n\t\tloadConf->actions.nbrActions++;\t/* one more active action! */\n\t\t*ppAction = pAction;\n\t} else {\n\t\t// TODO: cleanup\n\t}\n\nfinalize_it:\n\tfree(cnfModName);\n\tcnfparamvalsDestruct(paramvals, &pblk);\n\tRETiRet;\n}\n\nrsRetVal actionClassInit(void)\n{\n\tDEFiRet;\n\t/* request objects we use */\n\tCHKiRet(objGetObjInterface(&obj)); /* this provides the root pointer for all other queries */\n\tCHKiRet(objUse(datetime, CORE_COMPONENT));\n\tCHKiRet(objUse(module, CORE_COMPONENT));\n\tCHKiRet(objUse(statsobj, CORE_COMPONENT));\n\tCHKiRet(objUse(ruleset, CORE_COMPONENT));\n\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionname\", 0, eCmdHdlrGetWord, NULL, &cs.pszActionName, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuefilename\", 0, eCmdHdlrGetWord, NULL,\n\t\t&cs.pszActionQFName, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuesize\", 0, eCmdHdlrInt, NULL, &cs.iActionQueueSize,\n\t\tNULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionwriteallmarkmessages\", 0, eCmdHdlrBinary, NULL,\n\t\t&cs.bActionWriteAllMarkMsgs, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuedequeuebatchsize\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQueueDeqBatchSize, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuemaxdiskspace\", 0, eCmdHdlrSize, NULL,\n\t\t&cs.iActionQueMaxDiskSpace, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuehighwatermark\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQHighWtrMark, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuelowwatermark\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQLowWtrMark, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuediscardmark\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQDiscardMark, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuediscardseverity\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQDiscardSeverity, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuecheckpointinterval\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQPersistUpdCnt, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuesyncqueuefiles\", 0, eCmdHdlrBinary, NULL,\n\t\t&cs.bActionQSyncQeueFiles, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuetype\", 0, eCmdHdlrGetWord, setActionQueType, NULL, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueueworkerthreads\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQueueNumWorkers, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuetimeoutshutdown\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQtoQShutdown, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuetimeoutactioncompletion\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQtoActShutdown, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuetimeoutenqueue\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQtoEnq, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueueworkertimeoutthreadshutdown\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQtoWrkShutdown, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueueworkerthreadminimummessages\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQWrkMinMsgs, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuemaxfilesize\", 0, eCmdHdlrSize, NULL,\n\t\t&cs.iActionQueMaxFileSize, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuesaveonshutdown\", 0, eCmdHdlrBinary, NULL,\n\t\t&cs.bActionQSaveOnShutdown, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuedequeueslowdown\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQueueDeqSlowdown, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuedequeuetimebegin\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQueueDeqtWinFromHr, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionqueuedequeuetimeend\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActionQueueDeqtWinToHr, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionexeconlyeverynthtime\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActExecEveryNthOccur, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionexeconlyeverynthtimetimeout\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActExecEveryNthOccurTO, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionexeconlyonceeveryinterval\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.iActExecOnceInterval, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"repeatedmsgcontainsoriginalmsg\", 0, eCmdHdlrBinary, NULL,\n\t\t&cs.bActionRepMsgHasMsg, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionexeconlywhenpreviousissuspended\", 0, eCmdHdlrBinary, NULL,\n\t\t&cs.bActExecWhenPrevSusp, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"actionresumeretrycount\", 0, eCmdHdlrInt, NULL,\n\t\t&cs.glbliActionResumeRetryCount, NULL));\n\tCHKiRet(regCfSysLineHdlr((uchar *)\"resetconfigvariables\", 1, eCmdHdlrCustomHandler,\n\t\tresetConfigVariables, NULL, NULL));\n\n\tinitConfigVariables(); /* first-time init of config setings */\n\nfinalize_it:\n\tRETiRet;\n}\n\n/* vi:set ai:\n */\n"
        },
        {
          "name": "action.h",
          "type": "blob",
          "size": 5.072265625,
          "content": "/* action.h\n * Header file for the action object\n *\n * File begun on 2007-08-06 by RGerhards (extracted from syslogd.c, which\n * was under BSD license at the time of rsyslog fork)\n *\n * Copyright 2007-2018 Adiscon GmbH.\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#ifndef\tACTION_H_INCLUDED\n#define\tACTION_H_INCLUDED 1\n\n#include \"syslogd-types.h\"\n#include \"queue.h\"\n\n/* external data */\nextern int glbliActionResumeRetryCount;\n\n/* the following struct defines the action object data structure\n */\nstruct action_s {\n\ttime_t\tf_time;\t\t/* used for \"max. n messages in m seconds\" processing */\n\ttime_t\ttActNow;\t/* the current time for an action execution. Initially set to -1 and\n\t\t\t\t   populated on an as-needed basis. This is a performance optimization. */\n\ttime_t\ttLastExec;\t/* time this action was last executed */\n\tint\tiActionNbr;\t/* this action's number (ID) */\n\tsbool\tbExecWhenPrevSusp;/* execute only when previous action is suspended? */\n\tsbool\tbWriteAllMarkMsgs;\n\t/* should all mark msgs be written (not matter how recent the action was executed)? */\n\tsbool\tbReportSuspension;/* should suspension (and reactivation) of the action reported */\n\tsbool\tbReportSuspensionCont;\n\tsbool\tbDisabled;\n\tsbool\tisTransactional;\n\tsbool\tbCopyMsg;\n\tint\tiSecsExecOnceInterval; /* if non-zero, minimum seconds to wait until action is executed again */\n\ttime_t\tttResumeRtry;\t/* when is it time to retry the resume? */\n\tint\tiResumeInterval;/* resume interval for this action */\n\tint\tiResumeIntervalMax;/* maximum resume interval for this action --> -1: unbounded */\n\tint\tiResumeRetryCount;/* how often shall we retry a suspended action? (-1 --> eternal) */\n\tint\tiNbrNoExec;\t/* number of matches that did not yet yield to an exec */\n\tint\tiExecEveryNthOccur;/* execute this action only every n-th occurrence (with n=0,1 -> always) */\n\tint  \tiExecEveryNthOccurTO;/* timeout for n-th occurrence feature */\n\ttime_t  tLastOccur;\t/* time last occurrence was seen (for timing them out) */\n\tstruct modInfo_s *pMod;/* pointer to output module handling this selector */\n\tvoid\t*pModData;\t/* pointer to module data - content is module-specific */\n\tsbool\tbRepMsgHasMsg;\t/* \"message repeated...\" has msg fragment in it (0-no, 1-yes) */\n\trsRetVal (*submitToActQ)(action_t *, wti_t*, smsg_t*);/* function submit message to action queue */\n\trsRetVal (*qConstruct)(struct queue_s *pThis);\n\tsbool\tbUsesMsgPassingMode;\n\tsbool\tbNeedReleaseBatch; /* do we need to release batch ressources? Depends on ParamPassig modes... */\n\tint\tiNumTpls;\t/* number of array entries for template element below */\n\tstruct template **ppTpl;/* array of template to use - strings must be passed to doAction\n\t\t\t\t * in this order. */\n\tparamPassing_t *peParamPassing;\t/* mode of parameter passing to action for that template */\n\tqqueue_t *pQueue;\t/* action queue */\n\tpthread_mutex_t mutAction; /* primary action mutex */\n\tuchar *pszName;\t\t/* action name */\n\tDEF_ATOMIC_HELPER_MUT(mutCAS)\n\t/* error file */\n\tconst char *pszErrFile;\n\tint fdErrFile;\n\tsize_t maxErrFileSize;\n\tsize_t currentErrFileSize;\n\tpthread_mutex_t mutErrFile;\n\t/* external stat file system */\n\tconst char *pszExternalStateFile;\n\t/* for per-worker HUP processing */\n\tpthread_mutex_t mutWrkrDataTable; /* protects table structures */\n\tvoid **wrkrDataTable;\n\tint wrkrDataTableSize;\n\tint nWrkr;\n\t/* for statistics subsystem */\n\tstatsobj_t *statsobj;\n\tSTATSCOUNTER_DEF(ctrProcessed, mutCtrProcessed)\n\tSTATSCOUNTER_DEF(ctrFail, mutCtrFail)\n\tSTATSCOUNTER_DEF(ctrSuspend, mutCtrSuspend)\n\tSTATSCOUNTER_DEF(ctrSuspendDuration, mutCtrSuspendDuration)\n\tSTATSCOUNTER_DEF(ctrResume, mutCtrResume)\n};\n\n\n/* function prototypes\n */\nrsRetVal actionConstruct(action_t **ppThis);\nrsRetVal actionConstructFinalize(action_t *pThis, struct nvlst *lst);\nrsRetVal actionDestruct(action_t *pThis);\nrsRetVal actionSetGlobalResumeInterval(int iNewVal);\nrsRetVal actionDoAction(action_t *pAction);\nrsRetVal actionWriteToAction(action_t *pAction, smsg_t *pMsg, wti_t*);\nrsRetVal actionCallHUPHdlr(action_t *pAction);\nrsRetVal actionClassInit(void);\nrsRetVal addAction(action_t **ppAction, modInfo_t *pMod, void *pModData, omodStringRequest_t *pOMSR,\n\tstruct cnfparamvals *actParams, struct nvlst *lst);\nrsRetVal activateActions(void);\nrsRetVal actionNewInst(struct nvlst *lst, action_t **ppAction);\nrsRetVal actionProcessCnf(struct cnfobj *o);\nvoid actionCommitAllDirect(wti_t *pWti);\nvoid actionRemoveWorker(action_t *const pAction, void *const actWrkrData);\nvoid releaseDoActionParams(action_t * const pAction, wti_t * const pWti, int action_destruct);\n\n#endif /* #ifndef ACTION_H_INCLUDED */\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.890625,
          "content": "#!/bin/sh\n# Run this to generate all the initial makefiles, etc.\n# Licensed under ASL 2.0 (as of email conversation with original\n# author Michael Biebl on 2016-12-04).\n\nsrcdir=$(dirname $0)\ntest -z \"$srcdir\" && srcdir=.\n\ntest -f $srcdir/configure.ac || {\n    printf '**Error**: Directory \"%s\" does not look like the\\n' \"$srcdir\"\n    printf ' top-level package directory'\n    exit 1\n}\n\nif test -z \"$*\"; then\n  echo \"**Warning**: I am going to run \\`configure' with no arguments.\"\n  echo \"If you wish to pass any to it, please specify them on the\"\n  echo \\`$0\\'\" command line.\"\n  echo\nfi\n\n(cd $srcdir && autoreconf --verbose --force --install) || exit 1\n\nconf_flags=\"--cache-file=config.cache\"\n\nif test x$NOCONFIGURE = x; then\n  echo Running $srcdir/configure $conf_flags \"$@\" ...\n  $srcdir/configure $conf_flags \"$@\" \\\n  && echo Now type \\`make\\' to compile. || exit 1\nelse\n  echo Skipping configure process.\nfi\n"
        },
        {
          "name": "compat",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 112.123046875,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ(2.61)\nAC_INIT([rsyslog],[8.2502.0.master],[rsyslog@lists.adiscon.com])   # UPDATE on release\nAC_DEFINE(VERSION_YEAR,  24, [year part of real rsyslog version])  # UPDATE on release\nAC_DEFINE(VERSION_MONTH, 12, [month part of real rsyslog version]) # UPDATE on release\n\nAM_INIT_AUTOMAKE([subdir-objects])\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nunamestr=$(uname)\nif test \"$unamestr\" = \"AIX\"; then\n\tAC_ARG_ENABLE(aix64bits,\n\t\t[AS_HELP_STRING([--enable-aix64bits],[Enable compilation of rsyslog using 64 bits @<:@default=no@:>@])],\n\t        [case \"${enableval}\" in\n\t         yes) enable_aix64bits=\"yes\" ;;\n\t          no) enable_aix64bits=\"no\" ;;\n\t           *) AC_MSG_ERROR(bad value ${enableval} for --enable-aix64bits) ;;\n\t         esac],\n\t\t[enable_aix64bits=no]\n\t)\n\n\tCFLAGS=\"$CFLAGS -D_LINUX_SOURCE_COMPAT\"\n\tLDFLAGS=\"-brtl\"\n\tif test \"x$enable_aix64bits\" == \"xyes\"; then\n\t\tCFLAGS=\"$CFLAGS -q64\"\n\t\tLDFLAGS=\"$LDFLAGS -b64\"\n\t\tAR_CFLAGS=\"-X64 $AR_CFLAGS\"\n\t\tNM=\"$(which nm) -X64 rcu\"\n\tfi\nfi\n\nAC_CONFIG_SRCDIR([ChangeLog])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_HEADERS([config.h])\n\nAC_USE_SYSTEM_EXTENSIONS\n\n# Checks for programs.\nAC_PROG_LEX\nAC_PROG_YACC\nAC_PROG_CC\nAC_PROG_CC_C99\nAC_DISABLE_STATIC\n# AIXPORT START: enable dlopen\nif test \"$unamestr\" = \"AIX\"; then\n\tAC_LIBTOOL_DLOPEN\nfi\n# AIXPORT end\nAC_PROG_LIBTOOL\nAC_CANONICAL_HOST\n\nif test \"$GCC\" = \"yes\"\nthen\n\tm4_ifdef([AX_IS_RELEASE], [\n\t\tAX_IS_RELEASE([git-directory])\n\t\tm4_ifdef([AX_COMPILER_FLAGS], [\n\t\t\tAX_COMPILER_FLAGS(,,,,[-Wunused-parameter -Wmissing-field-initializers])\n\t\t\t# unfortunately, AX_COMPILER_FLAGS does not provide a way to override\n\t\t\t# the default -Wno-error=warning\" flags. So we do this via sed below.\n\t\t\t# Note: we *really* want to have this error out during CI testing!\n\t\t\t# rgerhards, 2018-05-09\n\t\t\tWARN_CFLAGS=\"$(echo \"$WARN_CFLAGS\" | sed s/-Wno-error=/-W/g)\"\n\t\t], [\n\t\t\tCFLAGS=\"$CFLAGS -W -Wall -Wformat-security -Wshadow -Wcast-align -Wpointer-arith -Wmissing-format-attribute -g\"\n\t\t\tAC_MSG_WARN([missing AX_COMPILER_FLAGS macro, not using it])\n\t\t])\n\t], [\n\t\tCFLAGS=\"$CFLAGS -W -Wall -Wformat-security -Wshadow -Wcast-align -Wpointer-arith -Wmissing-format-attribute -g\"\n\t\tAC_MSG_WARN([missing AX_IS_RELEASE macro, not using AX_COMPILER_FLAGS macro because of this])\n\t])\nelse\n\tAC_MSG_WARN([compiler is not GCC or close compatible, not using ax_compiler_flags because of this (CC=$CC)])\nfi\n\nPKG_PROG_PKG_CONFIG\n\nAC_ARG_VAR(CONF_FILE_PATH, Configuration file path (default : /etc/rsyslog.conf))\nif test \"$ac_cv_env_CONF_FILE_PATH_set\" = \"set\"; then\n\tAC_DEFINE_UNQUOTED(PATH_CONFFILE,  \"${ac_cv_env_CONF_FILE_PATH_value}\", \"Configuration file path (default : /etc/rsyslog.conf)\")\nfi\n\nAC_ARG_VAR(PID_FILE_PATH, Pid file path (default : /var/run/rsyslogd.pid))\nif test \"$ac_cv_env_PID_FILE_PATH_set\" = \"set\"; then\n\tAC_DEFINE_UNQUOTED(PATH_PIDFILE,  \"${ac_cv_env_PID_FILE_PATH_value}\", \"Pid file path (default : /var/run/rsyslogd.pid)\")\nfi\n\n\n# modules we require\nPKG_CHECK_MODULES(LIBESTR, libestr >= 0.1.9)\n\nPKG_CHECK_MODULES([LIBFASTJSON], [libfastjson >= 0.99.8],,)\n\nAC_DEFINE_UNQUOTED([PLATFORM_ID], [\"${host}\"], [platform id for display purposes])\n# we don't mind if we don't have the lsb_release utility. But if we have, it's\n# nice to have the extra information.\nAC_DEFINE_UNQUOTED([PLATFORM_ID_LSB], [\"`lsb_release -d`\"], [platform id for display purposes])\n\necho HOST: ${host}\ncase \"${host}\" in\n  *-*-linux*)\n    AC_DEFINE([OS_LINUX], [1], [Indicator for a Linux OS])\n    os_type=\"linux\"\n  ;;\n  *-*-*darwin*|*-*-dragonfly*|*-*-freebsd*|*-*-netbsd*|*-*-openbsd*)\n    AC_DEFINE([OS_BSD], [1], [Indicator for a BSD OS])\n    os_type=\"bsd\"\n  ;;\n  *-apple-*)\n    AC_DEFINE([OS_APPLE], [1], [Indicator for APPLE OS])\n    os_type=\"apple\"\n  ;;\n  *-*-kfreebsd*)\n    # kernel is FreeBSD, but userspace is glibc - i.e. like linux\n    # do not DEFINE OS_BSD\n    os_type=\"bsd\"\n  ;;\n  *-*-solaris*)\n    os_type=\"solaris\"\n    AC_DEFINE([OS_SOLARIS], [1], [Indicator for a Solaris OS])\n    AC_DEFINE([_POSIX_PTHREAD_SEMANTICS], [1], [Use POSIX pthread semantics])\n    AC_DEFINE([_XOPEN_SOURCE], [600], [Use X/Open CAE Specification])\n    CPPFLAGS=\"-std=c99 $CPPFLAGS\"\n    CFLAGS=\"-std=c99 $CFLAGS\"\n    SOL_LIBS=\"-lsocket -lnsl\"\n    # Solaris libuuid does not ship with a pkgconfig file so override the appropriate\n    # variables (but only if they have not been set by the user).\n    LIBUUID_CFLAGS=${LIBUUID_CFLAGS:= }\n    LIBUUID_LIBS=${LIBUUID_LIBS:=-luuid}\n    AC_SUBST(SOL_LIBS)\n  ;;\n  *-*-aix*)\n    os_type=\"aix\"\n    AC_DEFINE([OS_AIX], [1], [Indicator for a AIX OS])\n  ;;\nesac\nAM_CONDITIONAL(OS_APPLE, test x$os_type == xapple)\nAM_CONDITIONAL(OS_LINUX, test x$os_type == xlinux)\nAM_CONDITIONAL(OS_AIX, test x$os_type == xaix)\n\nAM_PATH_PYTHON(,, [:])\n\n# Running from git source?\nin_git_src=no\nAS_IF([test -d \"$srcdir\"/.git && ! test -f  \"$srcdir\"/.tarball-version], [in_git_src=yes])\n\n\nAC_DEFINE_UNQUOTED([HOSTENV], \"$host\", [the host environment, can be queried via a system variable])\n\n# Some Unix systems, like Gnu Hurd, don't define PATH_MAX\nAC_MSG_CHECKING([for PATH_MAX])\nAC_COMPILE_IFELSE( [AC_LANG_PROGRAM([[#include <limits.h>]],\n                                    [[char checker[PATH_MAX];]])],\n                   [\n                      AC_MSG_RESULT([yes])\n                    ],\n                    [\n                      AC_MSG_RESULT([no, mocking PATH_MAX = 4096])\n                      AC_DEFINE([PATH_MAX], 4096, [replacement for missing PATH_MAX])\n                      AC_DEFINE([MAXPATHLEN], 4096, [replacement for missing PATH_MAX]) # we assume this does not exit\n                    ]\n                 )\n\n# Checks for libraries.\nsave_LIBS=$LIBS\nLIBS=\nAC_SEARCH_LIBS(clock_gettime, rt)\nRT_LIBS=$LIBS\nAC_SEARCH_LIBS(mq_getattr, rt)\nRT_LIBS=\"$RT_LIBS $LIBS\"\nLIBS=\nAC_SEARCH_LIBS(dlopen, dl)\nDL_LIBS=$LIBS\nLIBS=$save_LIBS\n\nAC_SUBST(RT_LIBS)\nAC_SUBST(DL_LIBS)\n\n# Checks for header files.\nAC_HEADER_RESOLV\nAC_HEADER_STDC\nAC_HEADER_SYS_WAIT\nAC_CHECK_HEADER([arpa/inet.h],[],[],[\n  [#ifdef HAVE_ARPA_INET_H\n     # include <arpa/inet.h>\n     #endif\n  ]\n])\nAC_CHECK_HEADERS([libgen.h],[],[],[\n  [#ifdef HAVE_LIBGEN_H\n     # include <libgen.h>\n     #endif\n  ]\n])\nAC_CHECK_HEADERS([malloc.h],[],[],[\n  [#ifdef HAVE_MALLOC_H\n     # include <malloc.h>\n     #endif\n  ]\n])\nAC_CHECK_HEADERS([fcntl.h locale.h netdb.h netinet/in.h paths.h stddef.h stdlib.h string.h sys/file.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h sys/stat.h unistd.h utmp.h utmpx.h sys/epoll.h sys/prctl.h sys/select.h getopt.h linux/close_range.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_C_INLINE\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_MODE_T\nAC_TYPE_UID_T\nAC_TYPE_UINT8_T\nAC_HEADER_TIME\nAC_STRUCT_TM\nAC_C_VOLATILE\n\nsa_includes=\"\\\n$ac_includes_default\n#if HAVE_SYS_SOCKET_H\n# include <sys/socket.h>\n#endif\n\"\nAC_CHECK_MEMBERS([struct sockaddr.sa_len],,,[$sa_includes])\n\n# Checks for library functions.\nAC_FUNC_CHOWN\nAC_FUNC_FORK\nAC_PROG_GCC_TRADITIONAL\nAC_FUNC_SELECT_ARGTYPES\nAC_TYPE_SIGNAL\nAC_FUNC_STAT\nAC_FUNC_STRERROR_R\nAC_FUNC_VPRINTF\nAC_CHECK_FUNCS([flock recvmmsg basename alarm clock_gettime gethostbyname gethostname gettimeofday localtime_r memset mkdir regcomp select setsid socket strcasecmp strchr strdup strerror strndup strnlen strrchr strstr strtol strtoul uname ttyname_r getline malloc_trim prctl epoll_create epoll_create1 fdatasync syscall lseek64 asprintf close_range])\nAC_CHECK_FUNC([setns], [AC_DEFINE([HAVE_SETNS], [1], [Define if setns exists.])])\nAC_CHECK_TYPES([off64_t])\n\nAC_CHECK_HEADERS([sys/inotify.h], [rsyslog_sysinotify=yes])\nAC_CHECK_FUNCS([inotify_init], [rsyslog_inotify_init=yes])\nAM_CONDITIONAL(ENABLE_INOTIFY, test x$rsyslog_sysinotify = xyes -a x$rsyslog_inotify_init = xyes)\n\n# getifaddrs is in libc (mostly) or in libsocket (eg Solaris 11) or not defined (eg Solaris 10)\nAC_SEARCH_LIBS([getifaddrs], [socket], [AC_DEFINE(HAVE_GETIFADDRS, [1], [set define])])\n\n# the check below is probably ugly. If someone knows how to do it in a better way, please\n# let me know! -- rgerhards, 2010-10-06\nAC_CHECK_DECL([SCM_CREDENTIALS], [AC_DEFINE(HAVE_SCM_CREDENTIALS, [1], [set define])], [], [#include <sys/types.h>\n#include <sys/socket.h>])\nAC_CHECK_DECL([SO_TIMESTAMP], [AC_DEFINE(HAVE_SO_TIMESTAMP, [1], [set define])], [], [#include <sys/types.h>\n#include <sys/socket.h>])\nAC_CHECK_DECL([SYS_gettid], [AC_DEFINE(HAVE_SYS_gettid, [1], [set define])], [], [#include <sys/syscall.h>])\nAC_CHECK_MEMBER([struct sysinfo.uptime], [AC_DEFINE(HAVE_SYSINFO_UPTIME, [1], [set define])], [], [#include <sys/sysinfo.h>])\nAC_CHECK_DECL([GLOB_NOMAGIC], [AC_DEFINE(HAVE_GLOB_NOMAGIC, [1], [set define])], [], [#include <glob.h>])\n\n# Check for MAXHOSTNAMELEN\nAC_MSG_CHECKING(for MAXHOSTNAMELEN)\nAC_TRY_COMPILE([\n\t#include <sys/param.h>\n\t#include <netdb.h>\n\t], [\n\treturn MAXHOSTNAMELEN;\n\t]\n\t,\n\tAC_MSG_RESULT(yes)\n\t,\n\t# note: we use 1024 here, which should be far more than needed by any system. If that's too low, we simply\n\t# life with the need to change it. Most of the code doesn't need it anyways, but there are a few places\n\t# where it actually is needed and it makes no sense to change them.\n\tAC_DEFINE(MAXHOSTNAMELEN, 1024, [Define with a value if your <sys/param.h> does not define MAXHOSTNAMELEN])\n\tAC_MSG_RESULT(no; defined as 64)\n)\n\n# check if GNU's ld is used\n\n# Check for __builtin_expect()\nAC_MSG_CHECKING([for __builtin_expect()])\nAC_LINK_IFELSE([AC_LANG_PROGRAM(, return __builtin_expect(main != 0, 1))],\n               [AC_DEFINE(HAVE_BUILTIN_EXPECT, 1,\n                          Define to 1 if compiler supports __builtin_expect)\n                AC_MSG_RESULT([yes])],\n               [AC_MSG_RESULT([no])])\n\n# check for availability of atomic operations\n# Note: this switch is primarily for the testbench, so that we can try\n# to build w/o automic operations on systems that actually support them.\n# Usually, atomic operations should be used when available as this\n# speeds up processig.\n# note that when automic operations are enabled but not available, they\n# will silently NOT be used!\nAC_ARG_ENABLE(atomic-operations,\n        [AS_HELP_STRING([--enable-atomic-operations],[Enable atomic operation support @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_atomic_operations=\"yes\" ;;\n          no) enable_atomic_operations=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-atomic-operations) ;;\n         esac],\n        [enable_atomic_operations=yes]\n)\nif test \"$enable_atomic_operations\" = \"yes\"; then\n\tRS_ATOMIC_OPERATIONS\n\tRS_ATOMIC_OPERATIONS_64BIT\nfi\n\n# fall back to POSIX sems for atomic operations (cpu expensive)\nAC_CHECK_HEADERS([semaphore.h sys/syscall.h])\n\n\n# Additional module directories\nAC_ARG_WITH(moddirs,\n        [AS_HELP_STRING([--with-moddirs=DIRS],[Additional module search paths appended to @<:@$libdir/rsyslog@:>@])],\n        [_save_IFS=$IFS ; IFS=$PATH_SEPARATOR ; moddirs=\"\"\n         for w in ${with_moddirs} ;\n         do\n                 case $w in\n                 \"\") continue ;; */) ;; *)  w=\"${w}/\" ;;\n                 esac\n                 for m in ${moddirs} ;\n                 do\n                         test \"x$w\" = \"x${libdir}/${PACKAGE}/\"   || \\\n                         test \"x$w\" = \"x$m\" || test \"x$w\" = \"x/\" && \\\n                         continue 2\n                 done\n                 case $moddirs in\n                 \"\") moddirs=\"$w\" ;; *) moddirs=\"${moddirs}:${w}\" ;;\n                 esac\n         done ; IFS=$_save_IFS],[moddirs=\"\"]\n)\nAM_CONDITIONAL(WITH_MODDIRS, test x$moddirs != x)\nAC_SUBST(moddirs)\n\n\n# Large file support\n# http://www.gnu.org/software/autoconf/manual/html_node/System-Services.html#index-AC_005fSYS_005fLARGEFILE-1028\nAC_SYS_LARGEFILE\ncase \"${enable_largefile}\" in\n  no) ;;\n  *) enable_largefile=\"yes\" ;;\nesac\n\n# Regular expressions\nAC_ARG_ENABLE(regexp,\n        [AS_HELP_STRING([--enable-regexp],[Enable regular expressions support @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_regexp=\"yes\" ;;\n          no) enable_regexp=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-regexp) ;;\n         esac],\n        [enable_regexp=yes]\n)\nAM_CONDITIONAL(ENABLE_REGEXP, test x$enable_regexp = xyes)\nif test \"$enable_regexp\" = \"yes\"; then\n        AC_DEFINE(FEATURE_REGEXP, 1, [Regular expressions support enabled.])\nfi\n\n# zlib support\nPKG_CHECK_MODULES([ZLIB], [zlib], [found_zlib=yes], [found_zlib=no])\nAS_IF([test \"x$found_zlib\" = \"xno\"], [\n        AC_SEARCH_LIBS([inflate], [z], [AC_CHECK_HEADER([zlib.h], [found_zlib=yes])])\n        if test \"x$found_zlib\" = \"xno\" ; then\n                AC_MSG_ERROR([zlib library and headers not found])\n        fi\n        ZLIB_LIBS=\"-lz\"\n        AC_SUBST(ZLIB_LIBS)\n])\n\n\n#hash implementations header checks\nAC_ARG_ENABLE(fmhash,\n\t[AS_HELP_STRING([--enable-fmhash],[Enable fmhash support @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_fmhash=\"yes\" ;;\n          no) enable_fmhash=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-fmhash) ;;\n         esac],\n\t[enable_fmhash=yes]\n)\n\nAC_ARG_ENABLE(libcap-ng,\n        [AS_HELP_STRING([--enable-libcap-ng],[Enable dropping capabilities to only the necessary set @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_libcapng=\"yes\" ;;\n          no) enable_libcapng=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable_libcapng) ;;\n         esac],\n        [enable_libcapng=no]\n)\n\nif test \"$enable_libcapng\" = \"yes\"; then\n        PKG_CHECK_MODULES(\n                [LIBCAPNG_PRESENT],\n                [libcap-ng],\n                [AC_DEFINE([ENABLE_LIBCAPNG_PRESENT], [1], [Indicator that libcap-ng is present])],\n                [AC_MSG_ERROR(libcap-ng is not present.)]\n        )\n        PKG_CHECK_MODULES(\n                [LIBCAPNG],\n                [libcap-ng >= 0.8.2],\n                [AC_DEFINE([ENABLE_LIBCAPNG], [1], [Indicator that libcap-ng is present])],\n                [AC_MSG_ERROR([libcap-ng is present, but outdated - need 0.8.2 or above.])]\n        )\n        CFLAGS=\"$CFLAGS $LIBCAPNG_CFLAGS\"\n        LIBS=\"$LIBS $LIBCAPNG_LIBS\"\nfi\n\n\nAC_ARG_ENABLE(fmhash-xxhash,\n\t[AS_HELP_STRING([--enable-fmhash-xxhash],[Enable xxhash in fmhash support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_fmhash_xxhash=\"yes\" ;;\n          no) enable_fmhash_xxhash=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-fmhash-xxhash) ;;\n         esac],\n\t[enable_fmhash_xxhash=no]\n)\n\nAM_CONDITIONAL(ENABLE_FMHASH, [test \"x$enable_fmhash\" = \"xyes\" || test \"x$enable_fmhash_xxhash\" = \"xyes\"])\n\nAM_CONDITIONAL(ENABLE_FMHASH_XXHASH, test x$enable_fmhash_xxhash = xyes)\nif test \"$enable_fmhash_xxhash\" = \"yes\"; then\n\tAC_CHECK_LIB([xxhash], [XXH64], [\n\t\tAC_CHECK_HEADER([xxhash.h], [\n\t\t\tAC_DEFINE(USE_HASH_XXHASH, 1,\n\t\t\t\t  [Using XXHASH for hash64.])\n\t\t\tHASH_XXHASH_LIBS=\"-lxxhash\"\n\t\t\tAC_SUBST(HASH_XXHASH_LIBS)],\n\t\t\t[AC_MSG_ERROR([Unable to add XXHASH support for hash64.])])\n\t])\nfi\n\n\n#faup header checks\nAC_ARG_ENABLE(ffaup,\n\t[AS_HELP_STRING([--enable-ffaup],[Enable ffaup support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_ffaup=\"yes\" ;;\n          no) enable_ffaup=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-ffaup) ;;\n         esac],\n\t[enable_ffaup=no]\n)\n\nAM_CONDITIONAL(ENABLE_FFAUP, test x$enable_ffaup = xyes)\nif test \"$enable_ffaup\" = \"yes\"; then\n\tAC_CHECK_LIB([faupl], [faup_init], [\n\t\tAC_CHECK_HEADER([faup/faup.h], [\n\t\t\tFAUP_LIBS=\"-lfaupl\"\n\t\t\tAC_SUBST(FAUP_LIBS)],\n\t\t\t[AC_MSG_ERROR([Unable to add faup support for URL parsing.])])\n\t])\nfi\n\n\n# rscript function unflatten\nAC_ARG_ENABLE(fmunflatten,\n\t[AS_HELP_STRING([--enable-fmunflatten],[Enable fmunflatten support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_fmunflatten=\"yes\" ;;\n          no) enable_fmunflatten=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-fmunflatten) ;;\n         esac],\n\t[enable_fmunflatten=no]\n)\nAM_CONDITIONAL(ENABLE_FMUNFLATTEN, test x$enable_fmunflatten = xyes)\n\n\n#gssapi\nAC_ARG_ENABLE(gssapi_krb5,\n\t[AS_HELP_STRING([--enable-gssapi-krb5],[Enable GSSAPI Kerberos 5 support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_gssapi_krb5=\"yes\" ;;\n          no) enable_gssapi_krb5=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-gssapi-krb5) ;;\n         esac],\n\t[enable_gssapi_krb5=no]\n)\n\ncase \"${os_type}\" in\nsolaris) GSSLIB=gss ;;\n*)       GSSLIB=gssapi_krb5 ;;\nesac\n\nif test $enable_gssapi_krb5 = yes; then\n\tAC_CHECK_LIB($GSSLIB, gss_acquire_cred, [\n\t\tAC_CHECK_HEADER(gssapi/gssapi.h, [\n\t\t\tAC_DEFINE(USE_GSSAPI,,\n\t\t\t\t  Define if you want to use GSSAPI)\n\t\t\tGSS_LIBS=\"-l$GSSLIB\"\n\t\t\tAC_SUBST(GSS_LIBS)\n\t\t])\n\t])\nfi\nAM_CONDITIONAL(ENABLE_GSSAPI, test x$enable_gssapi_krb5 = xyes)\n\n\n# shall the testbench try to run test that require root permissions?\n# This is uncommon. Test skip if run under non-root, but that pollutes the\n# testbench result. So the default is not to do that.\nAC_ARG_ENABLE(root_tests,\n        [AS_HELP_STRING([--enable-root-tests],[enable root tests in testbench @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_root_tests=\"yes\" ;;\n          no) enable_root_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-root-tests) ;;\n         esac],\n        [enable_root_tests=no]\n)\nAM_CONDITIONAL(ENABLE_ROOT_TESTS, test x$enable_root_tests = xyes)\n\n# multithreading via pthreads\nif test \"$os_type\" != \"solaris\"\nthen\n\tAC_CHECK_HEADERS(\n\t\t[pthread.h],\n\t\t[\n\t\t\tAC_CHECK_LIB(\n\t\t\t\t[pthread],\n\t\t\t\t[pthread_create],\n\t\t\t\t[\n\t\t\t\t\tPTHREADS_LIBS=\"-lpthread\"\n\t\t\t\t\tif test \"$unamestr\" = \"AIX\"; then\n\t\t\t\t\tcase \"${CC}\" in\n\t\t\t\t\t\t*xlc*|*xlC*) PTHREADS_CFLAGS=\"-qthreaded\" ;;\n\t\t\t\t\t\t*) PTHREADS_CFLAGS=\"-lpthreads\" ;;\n\t\t\t\t\tesac\n\t\t\t\t\telse\n\t\t\t\t\t\tPTHREADS_CFLAGS=\"-pthread\"\n\t\t\t\t\tfi\n\t\t\t\t\tAC_SUBST(PTHREADS_LIBS)\n\t\t\t\t\tAC_SUBST(PTHREADS_CFLAGS)\n\t\t\t\t],\n\t\t\t\t[AC_MSG_FAILURE([pthread is missing])],\n\t\t\t\t[-lpthread]\n\t\t\t)\n\t\t],\n\t\t[AC_MSG_FAILURE([pthread is missing])]\n\t)\nfi\n\nAC_CHECK_LIB(\n  [pthread],\n\t[pthread_rwlockattr_setkind_np],\n\t[AC_DEFINE(\n\t   [HAVE_PTHREAD_RWLOCKATTR_SETKIND_NP],\n\t\t [1],\n\t\t [Set-kind available for rwlock attr.])])\n\nAC_CHECK_LIB(\n  [pthread],\n\t[pthread_setname_np],\n\t[AC_DEFINE(\n\t   [HAVE_PTHREAD_SETNAME_NP],\n\t\t [1],\n\t\t [Can set thread-name.])])\n\nAC_SEARCH_LIBS(\n    [pthread_setschedparam],\n    [pthread],\n    [\n      rsyslog_have_pthread_setschedparam=yes\n      AC_DEFINE([HAVE_PTHREAD_SETSCHEDPARAM],\n\t[1],\n\t[Can set thread scheduling parameters])\n    ],\n    [\n      rsyslog_have_pthread_setschedparam=no\n    ]\n)\nAC_CHECK_HEADERS(\n    [sched.h],\n    [\n      rsyslog_have_sched_h=yes\n    ],\n    [\n      rsyslog_have_sched_h=no\n    ]\n)\nif test \"$rsyslog_have_pthread_setschedparam\" = \"yes\" -a \"$rsyslog_have_sched_h\" = \"yes\"; then\n\tsave_LIBS=$LIBS\n\tLIBS=\n\tAC_SEARCH_LIBS(sched_get_priority_max, rt)\n\tif test \"x$ac_cv_search\" != \"xno\"; then\n\t\tAC_CHECK_FUNCS(sched_get_priority_max)\n\tfi\n\tIMUDP_LIBS=$LIBS\n\tAC_SUBST(IMUDP_LIBS)\n\tLIBS=$save_LIBS\nfi\n\nif test \"$unamestr\" = \"AIX\"; then\nenable_klog=\"no\"\nelse\n# klog\nAC_ARG_ENABLE(klog,\n        [AS_HELP_STRING([--enable-klog],[Integrated klog functionality @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_klog=\"yes\" ;;\n          no) enable_klog=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-klog) ;;\n         esac],\n        [enable_klog=\"yes\"]\n)\nfi\nAM_CONDITIONAL(ENABLE_IMKLOG, test x$enable_klog = xyes)\nAM_CONDITIONAL(ENABLE_IMKLOG_BSD, test x$os_type = xbsd)\nAM_CONDITIONAL(ENABLE_IMKLOG_LINUX, test x$os_type = xlinux)\nAM_CONDITIONAL(ENABLE_IMKLOG_SOLARIS, test x$os_type = xsolaris)\n\n# kmsg\nAC_ARG_ENABLE(kmsg,\n        [AS_HELP_STRING([--enable-kmsg],[Kmsg structured kernel logs functionality @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_kmsg=\"yes\" ;;\n          no) enable_kmsg=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-kmsg) ;;\n         esac],\n        [enable_kmsg=\"no\"]\n)\nAM_CONDITIONAL(ENABLE_IMKMSG, test x$enable_kmsg = xyes)\n\n# imjournal\nAC_ARG_ENABLE(imjournal,\n        [AS_HELP_STRING([--enable-imjournal],[Systemd journal message import @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imjournal=\"yes\" ;;\n          no) enable_imjournal=\"no\" ;;\n         optional) enable_imjournal=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imjournal) ;;\n         esac],\n        [enable_imjournal=\"no\"]\n)\nimjournal_use_dummy=\"no\"\nif test \"x$enable_imjournal\" = \"xyes\" -o \"x$enable_imjournal\" = \"xoptional\"; then\n\tPKG_CHECK_MODULES([LIBSYSTEMD_JOURNAL], [libsystemd >= 234] , [AC_DEFINE(NEW_JOURNAL, 1, [new systemd present])] , [\n\t    PKG_CHECK_MODULES([LIBSYSTEMD_JOURNAL], [libsystemd >= 209] , , [\n\t        PKG_CHECK_MODULES([LIBSYSTEMD_JOURNAL], [libsystemd-journal >= 197], , [\n                    AS_IF([test x$enable_imjournal = xyes],\n                        AC_MSG_FAILURE([imjournal support libraries are missing])\n\t            )\n                    imjournal_use_dummy=\"yes\"\n                 ])\n\t    ])\n\t])\nfi\nAM_CONDITIONAL(IMJOURNAL_USE_DUMMY, test x$imjournal_use_dummy = xyes)\nAM_CONDITIONAL(ENABLE_IMJOURNAL, test x$enable_imjournal = xyes -o x$enable_imjournal = xoptional)\n\n# use libsystemd\nAC_ARG_ENABLE(libsystemd,\n        [AS_HELP_STRING([--enable-libsystemd],[Enable libsystemd mode @<:@default=auto@:>@])],\n        [case \"${enableval}\" in\n          yes) enable_libsystemd=\"yes\" ;;\n           no) enable_libsystemd=\"no\" ;;\n         auto) enable_libsystemd=\"auto\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-libsystemd) ;;\n         esac],\n        [enable_libsystemd=\"auto\"]\n)\nif test \"$enable_libsystemd\" = \"yes\"; then\n\tPKG_CHECK_MODULES([LIBSYSTEMD], [libsystemd],\n\t\t[ AC_DEFINE(HAVE_LIBSYSTEMD, 1, [libsystemd present]) ]\n\t)\nfi\nif test \"$enable_libsystemd\" = \"auto\"; then\n\tPKG_CHECK_MODULES([LIBSYSTEMD], [libsystemd],\n\t\t[ AC_DEFINE(HAVE_LIBSYSTEMD, 1, [libsystemd present])\n\t\t  AC_MSG_NOTICE([--enable-libsystemd in auto mode])\n\t\t  enable_libsystemd=\"yes\"\n\t\t],\n\t\t[ AC_MSG_WARN([libsystemd not present - disabling systemd support])\n\t\t  enable_libsystemd=\"no\"\n\t\t]\n\t)\n\tAC_MSG_NOTICE([--enable-libsystemd in auto mode, enable-libsystemd is set to ${enable_libsystemd}])\nfi\n\n# inet\nAC_ARG_ENABLE(inet,\n        [AS_HELP_STRING([--enable-inet],[Enable automatic load of omfwd and limit build of networking libraries @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_inet=\"yes\" ;;\n          no) enable_inet=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-inet) ;;\n         esac],\n        [enable_inet=\"yes\"]\n)\nAM_CONDITIONAL(ENABLE_INET, test x$enable_inet = xyes)\nif test \"$enable_inet\" = \"yes\"; then\n        AC_DEFINE(SYSLOG_INET, 1, [network support is integrated.])\nfi\n\n# jemalloc\nAC_ARG_ENABLE(jemalloc,\n        [AS_HELP_STRING([--enable-jemalloc],[Enable jemalloc support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_jemalloc=\"yes\" ;;\n          no) enable_jemalloc=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-jemalloc) ;;\n         esac],\n        [enable_jemalloc=\"no\"]\n)\nAM_CONDITIONAL(ENABLE_JEMALLOC, test x$enable_jemalloc = xyes)\nif test \"$enable_jemalloc\" = \"yes\"; then\n  AC_CHECK_LIB(\n    [jemalloc],\n    [malloc_stats_print],\n    [RT_LIBS=\"$RT_LIBS -ljemalloc\"\n     AC_DEFINE(HAVE_JEMALLOC, 1, [jemalloc support is integrated.])\n    ],\n    [AC_MSG_FAILURE([jemalloc library is missing])],\n    []\n    )\nfi\n\n\n# support for unlimited select() syscall\nAC_ARG_ENABLE(unlimited_select,\n        [AS_HELP_STRING([--enable-unlimited-select],[Enable unlimited select() syscall @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_unlimited_select=\"yes\" ;;\n          no) enable_unlimited_select=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-unlimited-select) ;;\n         esac],\n        [enable_unlimited_select=\"no\"]\n)\nif test \"$enable_unlimited_select\" = \"yes\"; then\n        AC_DEFINE(USE_UNLIMITED_SELECT, 1, [If defined, the select() syscall won't be limited to a particular number of file descriptors.])\nfi\n\n\n# debug\nAC_ARG_ENABLE(debug,\n        [AS_HELP_STRING([--enable-debug],[Enable debug mode @<:@default=auto@:>@])],\n        [case \"${enableval}\" in\n          yes) enable_debug=\"yes\" ;;\n           no) enable_debug=\"no\" ;;\n         auto) enable_debug=\"auto\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;\n         esac],\n        [enable_debug=\"auto\"]\n)\nif test \"$enable_debug\" = \"auto\"; then\n\tif test \"x$in_git_src\" = \"xyes\"; then\n\t\tenable_debug=\"yes\"\n\telse\n\t\tenable_debug=\"no\"\n\tfi\n\tAC_MSG_NOTICE([enable-debug in auto mode, enable-debug is set to ${enable_debug}])\nfi\nif test \"$enable_debug\" = \"yes\"; then\n        AC_DEFINE(DEBUG, 1, [Defined if debug mode is enabled (its easier to check).])\nfi\nif test \"$enable_debug\" = \"no\"; then\n        AC_DEFINE(NDEBUG, 1, [Defined if debug mode is disabled.])\nfi\n\n\n# debug-symbols\nAC_ARG_ENABLE(debug_symbols,\n        [AS_HELP_STRING([--disable-debug-symbols],[Disable debugging symbols @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_debug_symbols=\"yes\" ;;\n          no) enable_debug_symbols=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --disable-debug-symbols) ;;\n         esac],\n        [enable_debug_symbols=\"yes\"]\n)\n\n\n# total debugless: highest performance, but no way at all to enable debug\n# logging\nAC_ARG_ENABLE(debugless,\n        [AS_HELP_STRING([--enable-debugless],[Enable runtime instrumentation mode @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_debugless=\"yes\" ;;\n          no) enable_debugless=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-debugless) ;;\n         esac],\n        [enable_debugless=\"no\"]\n)\nif test \"$enable_debugless\" = \"yes\"; then\n        AC_DEFINE(DEBUGLESS, 1, [Defined if debugless mode is enabled.])\nfi\n\n\n# valgrind\nAC_ARG_ENABLE(valgrind,\n        [AS_HELP_STRING([--enable-valgrind],[Enable somes special code that rsyslog core developers consider useful for testing. Do NOT use if you don't exactly know what you are doing, except if told so by rsyslog developers. NOT to be used by distro maintainers for building regular packages. @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_valgrind=\"yes\" ;;\n          no) enable_valgrind=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-valgrind) ;;\n         esac],\n        [enable_valgrind=\"no\"]\n)\nif test \"$enable_valgrind\" = \"yes\"; then\n        AC_DEFINE(VALGRIND, 1, [Defined if valgrind support settings are to be enabled (e.g. prevents dlclose()).])\nfi\n\n\n# compile diagnostic tools (small helpers usually not needed)\nAC_ARG_ENABLE(diagtools,\n        [AS_HELP_STRING([--enable-diagtools],[Enable diagnostic tools @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_diagtools=\"yes\" ;;\n          no) enable_diagtools=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-diagtools) ;;\n         esac],\n        [enable_diagtools=no]\n)\nAM_CONDITIONAL(ENABLE_DIAGTOOLS, test x$enable_diagtools = xyes)\n\n\n# compile end-user tools\nAC_ARG_ENABLE(usertools,\n        [AS_HELP_STRING([--enable-usertools],[Enable end user tools @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_usertools=\"yes\" ;;\n          no) enable_usertools=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-usertools) ;;\n         esac],\n        [enable_usertools=no]\n)\nAM_CONDITIONAL(ENABLE_USERTOOLS, test x$enable_usertools = xyes)\n\n\n# MySQL support\nAC_ARG_ENABLE(mysql,\n        [AS_HELP_STRING([--enable-mysql],[Enable MySql database support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mysql=\"yes\" ;;\n          no) enable_mysql=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mysql) ;;\n         esac],\n        [enable_mysql=no]\n)\nAS_IF([test \"x$enable_mysql\" = \"xyes\"],[\n  PKG_CHECK_MODULES([MYSQL],[mysqlclient],,[\n    AC_CHECK_PROG(\n      [MYSQL_CONFIG],\n      [mysql_config],\n      [mysql_config],\n      [no],,\n    )\n    AS_IF([test \"x${MYSQL_CONFIG}\" = \"xno\"],[\n      AC_MSG_FAILURE([mysql_config not found - usually a package named mysql-dev, libmysql-dev or similar, is missing - install it to fix this issue])\n    ])\n    MYSQL_CFLAGS=`$MYSQL_CONFIG --cflags`\n    MYSQL_LIBS=`$MYSQL_CONFIG --libs`\n  ])\n  AC_MSG_CHECKING(if we have mysql_library_init)\n  save_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS $MYSQL_CFLAGS\"\n  save_LIBS=\"$LIBS\"\n  AC_CHECK_LIB(\n    [mysqlclient],\n    [mysql_init],\n    ,\n    [AC_MSG_FAILURE([MySQL library is missing])],\n    [$MYSQL_LIBS]\n  )\n  LIBS=\"$LIBS $MYSQL_LIBS\"\n  AC_TRY_LINK(\n    [#include <mysql.h>\n     #include <stdio.h>],\n    [mysql_library_init(0, NULL, NULL)],\n    [have_mysql_library_init=yes],\n    [have_mysql_library_init=no])\n  CFLAGS=\"$save_CFLAGS\"\n  LIBS=\"$save_LIBS\"\n])\nAM_CONDITIONAL(ENABLE_MYSQL, test x$enable_mysql = xyes)\nif test \"$have_mysql_library_init\" = \"yes\"; then\n  AC_DEFINE([HAVE_MYSQL_LIBRARY_INIT], [1], [mysql_library_init available])\nfi\nAC_SUBST(MYSQL_CFLAGS)\nAC_SUBST(MYSQL_LIBS)\n\n\n# PostgreSQL support\nAC_ARG_ENABLE(pgsql,\n        [AS_HELP_STRING([--enable-pgsql],[Enable PostgreSQL database support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pgsql=\"yes\" ;;\n          no) enable_pgsql=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pgsql) ;;\n         esac],\n        [enable_pgsql=no]\n)\nif test \"x$enable_pgsql\" = \"xyes\"; then\n\tPKG_CHECK_MODULES([PGSQL], [libpq],, [\n\t  AC_CHECK_PROG(\n\t    [PG_CONFIG],\n\t    [pg_config],\n\t    [pg_config],\n\t    [no],,,\n\t  )\n\t  if test \"x${PG_CONFIG}\" = \"xno\"; then\n\t    AC_MSG_FAILURE([pg_config not found])\n\t  fi\n\t  AC_CHECK_LIB(\n\t    [pq],\n\t    [PQconnectdb],\n\t    [PGSQL_CFLAGS=\"-I`$PG_CONFIG --includedir`\"\n\t     PGSQL_LIBS=\"-L`$PG_CONFIG --libdir` -lpq\"\n\t    ],\n\t    [AC_MSG_FAILURE([PgSQL library is missing])],\n\t    [-L`$PG_CONFIG --libdir`]\n\t  )\n\t])\n\tAC_CHECK_LIB(\n\t  [pq],\n\t  [PGsslInUse],\n\t  [AC_DEFINE([HAVE_PGSSLINUSE], [1], [PGsslInUse function available])]\n\t)\nfi\nAM_CONDITIONAL(ENABLE_PGSQL, test x$enable_pgsql = xyes)\nAC_SUBST(PGSQL_CFLAGS)\nAC_SUBST(PGSQL_LIBS)\n\n# libdbi support\nAC_ARG_ENABLE(libdbi,\n        [AS_HELP_STRING([--enable-libdbi],[Enable libdbi database support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_libdbi=\"yes\" ;;\n          no) enable_libdbi=\"no\" ;;\n          optional) enable_libdbi=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-libdbi) ;;\n         esac],\n        [enable_libdbi=no]\n)\nlibdbi_use_dummy=\"no\"\nif test \"x$enable_libdbi\" = \"xyes\" -o x$enable_libdbi = xoptional; then\n  AC_CHECK_HEADERS(\n    [dbi/dbi.h],,[\n        AS_IF([test x$enable_libdbi = xyes],\n            AC_MSG_FAILURE([libdbi is missing])\n\t)\n        libdbi_use_dummy=\"yes\"\n     ]\n  )\n  AC_CHECK_LIB(\n    [dbi],\n    [dbi_initialize],\n    [LIBDBI_CFLAGS=\"\"\n     LIBDBI_LIBS=\"-ldbi\"\n    ], [\n        AS_IF([test x$enable_libdbi = xyes],\n            AC_MSG_FAILURE([libdbi is missing])\n\t)\n        libdbi_use_dummy=\"yes\"\n     ]\n  )\n  AC_CHECK_LIB(\n    [dbi],\n    [dbi_initialize_r],\n    [AC_DEFINE([HAVE_DBI_R], [1], [Define to 1 if libdbi supports the new plugin-safe interface])]\n  )\n  AC_CHECK_LIB(\n    [dbi],\n    [dbi_conn_transaction_begin],\n    [AC_DEFINE([HAVE_DBI_TXSUPP], [1], [Define to 1 if libdbi supports transactions])]\n  )\nfi\nAM_CONDITIONAL(LIBDBI_USE_DUMMY, test x$libdbi_use_dummy = xyes)\nAM_CONDITIONAL(ENABLE_OMLIBDBI, test x$enable_libdbi = xyes -o x$enable_libdbi = xoptional)\nAC_SUBST(LIBDBI_CFLAGS)\nAC_SUBST(LIBDBI_LIBS)\n\n\n# SNMP support\nAC_ARG_ENABLE(snmp,\n        [AS_HELP_STRING([--enable-snmp],[Enable SNMP support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_snmp=\"yes\" ;;\n          no) enable_snmp=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-snmp) ;;\n         esac],\n        [enable_snmp=no]\n)\nif test \"x$enable_snmp\" = \"xyes\"; then\n  AC_CHECK_HEADERS(\n    [net-snmp/net-snmp-config.h],,\n    [AC_MSG_FAILURE([Net-SNMP is missing])]\n  )\n  AC_CHECK_LIB(\n    [netsnmp],\n    [snmp_timeout],\n    [SNMP_CFLAGS=\"\"\n     SNMP_LIBS=\"-lnetsnmp\"\n    ],\n    [AC_MSG_FAILURE([Net-SNMP library is missing])]\n  )\nfi\nAM_CONDITIONAL(ENABLE_SNMP, test x$enable_snmp = xyes)\nAC_SUBST(SNMP_CFLAGS)\nAC_SUBST(SNMP_LIBS)\n\n# SNMP Test Support\nAC_ARG_ENABLE(snmp-tests,\n        [AS_HELP_STRING([--enable-snmp-tests],[Enable omsnmp tests @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_snmp_tests=\"yes\" ;;\n          no) enable_snmp_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-snmp-tests) ;;\n         esac],\n        [enable_snmp_tests=no]\n)\nAM_CONDITIONAL(ENABLE_SNMP_TESTS, test x$enable_snmp_tests = xyes)\n\n# uuid support\nAC_ARG_ENABLE(uuid,\n        [AS_HELP_STRING([--enable-uuid],[Enable support for uuid generation @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_uuid=\"yes\" ;;\n          no) enable_uuid=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-uuid) ;;\n         esac],\n        [enable_uuid=yes]\n)\nif test \"x$enable_uuid\" = \"xyes\"; then\n\tPKG_CHECK_MODULES([LIBUUID], [uuid])\n\tAC_DEFINE(USE_LIBUUID, 1, [Define if you want to enable libuuid support])\nfi\nAM_CONDITIONAL(ENABLE_UUID, test x$enable_uuid = xyes)\n\n\n# elasticsearch support\nAC_ARG_ENABLE(elasticsearch,\n        [AS_HELP_STRING([--enable-elasticsearch],[Enable elasticsearch output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_elasticsearch=\"yes\" ;;\n          no) enable_elasticsearch=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-elasticsearch) ;;\n         esac],\n        [enable_elasticsearch=no]\n)\nif test \"x$enable_elasticsearch\" = \"xyes\"; then\n\tPKG_CHECK_MODULES([CURL], [libcurl])\n\tLT_LIB_M\nfi\nAM_CONDITIONAL(ENABLE_ELASTICSEARCH, test x$enable_elasticsearch = xyes)\n\n\n# clickhouse support\nAC_ARG_ENABLE(clickhouse,\n        [AS_HELP_STRING([--enable-clickhouse],[Enable clickhouse output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_clickhouse=\"yes\" ;;\n          no) enable_clickhouse=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-clickhouse) ;;\n         esac],\n        [enable_clickhouse=no]\n)\nif test \"x$enable_clickhouse\" = \"xyes\"; then\n\tPKG_CHECK_MODULES([CURL], [libcurl])\n\tLT_LIB_M\nfi\nAM_CONDITIONAL(ENABLE_CLICKHOUSE, test x$enable_clickhouse = xyes)\n\n\n# omhttp support\nAC_ARG_ENABLE(omhttp,\n        [AS_HELP_STRING([--enable-omhttp],[Enable http output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omhttp=\"yes\" ;;\n          no) enable_omhttp=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omhttp) ;;\n         esac],\n        [enable_omhttp=no]\n)\nif test \"x$enable_omhttp\" = \"xyes\"; then\n        PKG_CHECK_MODULES([CURL], [libcurl])\n        LT_LIB_M\nfi\nAM_CONDITIONAL(ENABLE_OMHTTP, test x$enable_omhttp = xyes)\n\n\n# capability to enable elasticsearch testbench tests. This requries that an ES test\n# environment is present on the local (127.0.0.1) machine.\n# we support a \"minimal\" mode to take care of travis where we cannot run all tests\n# due to runtime constraints\nAC_ARG_ENABLE(elasticsearch_tests,\n        [AS_HELP_STRING([--enable-elasticsearch-tests],[enable Elasticsearch specific tests in testbench @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_elasticsearch_tests=\"yes\" ;;\n          no) enable_elasticsearch_tests=\"no\" ;;\n         minimal) enable_elasticsearch_tests=\"minimal\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-elasticsearch-tests) ;;\n         esac],\n        [enable_elasticsearch_tests=no]\n)\nAM_CONDITIONAL(ENABLE_ELASTICSEARCH_TESTS, test x$enable_elasticsearch_tests = xyes)\nAM_CONDITIONAL(ENABLE_ELASTICSEARCH_TESTS_MINIMAL, test x$enable_elasticsearch_tests = xminimal -o x$enable_elasticsearch_tests = xyes)\n\n\n# capability to enable clickhouse testbench tests. This requries that a test\n# environment is present on the local (127.0.0.1) machine.\nAC_ARG_ENABLE(clickhouse_tests,\n        [AS_HELP_STRING([--enable-clickhouse-tests],[enable Elasticsearch specific tests in testbench @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_clickhouse_tests=\"yes\" ;;\n          no) enable_clickhouse_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-clickhouse-tests) ;;\n         esac],\n        [enable_clickhouse_tests=no]\n)\nAM_CONDITIONAL(ENABLE_CLICKHOUSE_TESTS, test x$enable_clickhouse_tests = xyes)\n\n\n# openssl support\nAC_ARG_ENABLE(openssl,\n        [AS_HELP_STRING([--enable-openssl],[Enable openssl support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_openssl=\"yes\" ;;\n          no) enable_openssl=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-openssl) ;;\n         esac],\n        [enable_openssl=no]\n)\nif test \"x$enable_openssl\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(OPENSSL, openssl)\n\tAC_DEFINE([ENABLE_OPENSSL], [1], [Indicator that openssl is present])\n\tsave_libs=$LIBS\nfi\nAM_CONDITIONAL(ENABLE_OPENSSL, test x$enable_openssl = xyes)\n\nAC_ARG_ENABLE(openssl_crypto_provider,\n        [AS_HELP_STRING([--enable-opensslcrypto],[Enable openssl crypto provider @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_openssl_crypto_provider=\"yes\" ;;\n          no) enable_openssl_crypto_provider=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-openssl) ;;\n         esac],\n        [enable_openssl_crypto_provider=no]\n)\nif test \"x$enable_openssl\" = \"xyes\" && test \"x$enable_openssl_crypto_provider\" = \"xyes\"; then\n\tAC_CHECK_LIB(\n\t\t[crypto],\n\t\t[EVP_CIPHER_get_block_size],\n\t\t[enable_openssl_crypto_provider=\"yes\"\n\t\tAC_DEFINE([ENABLE_OPENSSL_CRYPTO_PROVIDER], [1], [Indicator that openssl(EVP_CIPHER_get_block_size) is present])\n\t\t],\n\t\t[AC_MSG_WARN([The ossl encryption provider will not be enabled (EVP_CIPHER_get_block_size is missing)])]\n\t)\nfi\n\n# GnuTLS support\nAC_ARG_ENABLE(gnutls,\n        [AS_HELP_STRING([--enable-gnutls],[Enable GNU TLS support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_gnutls=\"yes\" ;;\n          no) enable_gnutls=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-gnutls) ;;\n         esac],\n        [enable_gnutls=no]\n)\nif test \"x$enable_gnutls\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(GNUTLS, gnutls >= 1.4.0)\n\tAC_DEFINE([ENABLE_GNUTLS], [1], [Indicator that GnuTLS is present])\n\tsave_libs=$LIBS\n\tLIBS=\"$LIBS $GNUTLS_LIBS\"\n\tAC_CHECK_FUNCS(gnutls_certificate_set_retrieve_function,,)\n\tAC_CHECK_FUNCS(gnutls_certificate_type_set_priority,,)\n\tLIBS=$save_libs\nfi\n\nAM_CONDITIONAL(ENABLE_GNUTLS, test x$enable_gnutls = xyes)\n\nAC_ARG_ENABLE(gnutls-tests,\n        [AS_HELP_STRING([--enable-gnutls-tests],[Enable gnutls tests @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_gnutls_tests=\"yes\" ;;\n          no) enable_gnutls_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-gnutls-tests) ;;\n         esac],\n        [if [[ \"$enable_gnutls\" == \"yes\" ]]; then\n\t\tenable_gnutls_tests=yes\n\telse\n\t\tenable_gnutls_tests=no\n\tfi]\n)\nif  [[ \"$enable_gnutls_tests\" == \"yes\" ]] && [[ \"$enable_gnutls\" != \"yes\" ]]; then\n\t\tAC_MSG_WARN([gnutls-tests can not be enabled without gnutls support. Disabling gnutls tests...])\n\t\tenable_gnutls_tests=\"no\"\nfi\n\nAM_CONDITIONAL(ENABLE_GNUTLS_TESTS, test x$enable_gnutls_tests = xyes)\n\n\n# libgcrypt support\nAC_ARG_ENABLE(libgcrypt,\n        [AS_HELP_STRING([--enable-libgcrypt],[Enable log file encryption support (libgcrypt) @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_libgcrypt=\"yes\" ;;\n          no) enable_libgcrypt=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-libgcrypt) ;;\n         esac],\n        [enable_libgcrypt=yes]\n)\nif test \"x$enable_libgcrypt\" = \"xyes\"; then\n\tAC_PATH_PROG([LIBGCRYPT_CONFIG],[libgcrypt-config],[no])\n        if test \"x${LIBGCRYPT_CONFIG}\" = \"xno\"; then\n           AC_MSG_FAILURE([libgcrypt-config not found in PATH])\n        fi\n        AC_CHECK_LIB(\n\t\t[gcrypt],\n        \t[gcry_cipher_open],\n        \t[LIBGCRYPT_CFLAGS=\"`${LIBGCRYPT_CONFIG} --cflags`\"\n        \tLIBGCRYPT_LIBS=\"`${LIBGCRYPT_CONFIG} --libs`\"\n        \t],\n        \t[AC_MSG_FAILURE([libgcrypt is missing])],\n        \t[`${LIBGCRYPT_CONFIG} --libs --cflags`]\n        \t)\n\tAC_DEFINE([ENABLE_LIBGCRYPT], [1], [Indicator that LIBGCRYPT is present])\nfi\nAM_CONDITIONAL(ENABLE_LIBGCRYPT, test x$enable_libgcrypt = xyes)\nAM_CONDITIONAL(ENABLE_RSCRYUTIL, test x$enable_libgcrypt = xyes || test x$enable_openssl_crypto_provider = xyes)\nAM_CONDITIONAL(ENABLE_OPENSSL_CRYPTO_PROVIDER, test x$enable_openssl_crypto_provider = xyes)\nAC_SUBST(LIBGCRYPT_CFLAGS)\nAC_SUBST(LIBGCRYPT_LIBS)\n\n# libzstd support\nAC_ARG_ENABLE(libzstd,\n        [AS_HELP_STRING([--enable-libzstd],[Enable log file compression support via libzstd @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_libzstd=\"yes\" ;;\n          no) enable_libzstd=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-libzstd) ;;\n         esac],\n        [enable_libzstd=no]\n)\nif test \"x$enable_libzstd\" = \"xyes\"; then\n    save_LIBS=\"$LIBS\"\n    PKG_CHECK_MODULES([ZSTD], zstd >= 1.4.0, [],\n        [\n\tLIBS=\"$LIBS -lzstd\"\n\tZSTD_LIBS=\"-lzstd\"\n\tAC_SUBST(ZSTD_LIBS)\n\tAC_SEARCH_LIBS(ZSTD_compressStream2, zstd,\n            [AC_COMPILE_IFELSE(\n                [AC_LANG_PROGRAM(\n                    [[ #include <zstd.h> ]],\n                    [[\n\t\t       ZSTD_CCtx* cctx = ZSTD_createCCtx();\n\t\t       ZSTD_CCtx_setParameter(cctx, ZSTD_c_nbWorkers, 5);\n                    ]]\n                )],\n                [],\n                [AC_MSG_ERROR([libzstd version must be >= 1.4.0])]\n            )],\n            [AC_MSG_ERROR([libzstd not found])]\n        )]\n    )\n    LIBS=\"$save_LIBS\"\nfi\nAM_CONDITIONAL(ENABLE_LIBZSTD, test x$enable_libzstd = xyes)\n\n\n# support for building the rsyslogd runtime\nAC_ARG_ENABLE(rsyslogrt,\n        [AS_HELP_STRING([--enable-rsyslogrt],[Build rsyslogrt @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_rsyslogrt=\"yes\" ;;\n          no) enable_rsyslogrt=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-rsyslogrt) ;;\n         esac],\n        [enable_rsyslogrt=yes]\n)\nif test \"x$enable_rsyslogrt\" = \"xyes\"; then\n  RSRT_CFLAGS1=\"-I\\$(top_srcdir)/runtime -I\\$(top_srcdir) -I\\$(top_srcdir)/grammar\"\n  RSRT_LIBS1=\"\\$(top_builddir)/runtime/librsyslog.la\"\nfi\nAM_CONDITIONAL(ENABLE_RSYSLOGRT, test x$enable_rsyslogrt = xyes)\nRSRT_CFLAGS=\"\\$(RSRT_CFLAGS1) \\$(LIBESTR_CFLAGS) \\$(LIBFASTJSON_CFLAGS) \\$(LIBSYSTEMD_CFLAGS)\"\nif test \"$GCC\" = \"yes\"; then\n  RSRT_CFLAGS=\"$RSRT_CFLAGS -W -Wall -Wformat-security -Wshadow -Wcast-align -Wpointer-arith -Wmissing-format-attribute\"\n  if $CC -Werror=implicit-function-declaration -x c -c /dev/null -o /dev/null 2>/dev/null; then\n    RSRT_CFLAGS=\"$RSRT_CFLAGS -Werror=implicit-function-declaration\"\n  elif $CC -Werror-implicit-function-declaration -x c -c /dev/null -o /dev/null 2>/dev/null; then\n    RSRT_CFLAGS=\"$RSRT_CFLAGS -Werror-implicit-function-declaration\"\n  fi\n\n  if test \"x$enable_debug_symbols\" = \"xyes\"; then\n    RSRT_CFLAGS=\"$RSRT_CFLAGS -g\"\n  fi\nfi\nRSRT_CFLAGS=\"$RSRT_CFLAGS $WARN_CFLAGS\"\nRSRT_LIBS=\"\\$(RSRT_LIBS1) \\$(LIBESTR_LIBS) \\$(LIBFASTJSON_LIBS) \\$(LIBSYSTEMD_LIBS)\"\nAC_SUBST(RSRT_CFLAGS1)\nAC_SUBST(RSRT_LIBS1)\nAC_SUBST(RSRT_CFLAGS)\nAC_SUBST(RSRT_LIBS)\n\n\n# support for NOT building rsyslogd (useful for source-based packaging systems)\nAC_ARG_ENABLE(rsyslogd,\n        [AS_HELP_STRING([--enable-rsyslogd],[Build rsyslogd @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_rsyslogd=\"yes\" ;;\n          no) enable_rsyslogd=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-rsyslogd) ;;\n         esac],\n        [enable_rsyslogd=yes]\n)\nAM_CONDITIONAL(ENABLE_RSYSLOGD, test x$enable_rsyslogd = xyes)\n\n\n# capability to enable an extended testbench. By default, this is off. The reason\n# for this switch is that some test simply take too long to execute them on a regular\n# basis. So we enable to skip them, while the majority of tests can still be used. The\n# idea is that at least \"make distcheck\" executes the extended testbench, and also\n# developers should explicitely enable it after important changes. -- rgerhards, 2010-04-12\nAC_ARG_ENABLE(extended_tests,\n        [AS_HELP_STRING([--enable-extended-tests],[extended testbench @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_extended_tests=\"yes\" ;;\n          no) enable_extended_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-extended-tests) ;;\n         esac],\n        [enable_extended_tests=no]\n)\nAM_CONDITIONAL(ENABLE_EXTENDED_TESTS, test x$enable_extended_tests = xyes)\n\n\n# capability to enable MySQL testbench tests. This requries that a Syslog database\n# with the default schema has been created on the local (127.0.0.1) MySQL server and\n# a user \"rsyslog\" with password \"testbench\" exists, is able to login with default\n# parameters and has sufficient (read: all) privileges on that database.\n# rgerhards, 2011-03-09\nAC_ARG_ENABLE(mysql_tests,\n        [AS_HELP_STRING([--enable-mysql-tests],[enable MySQL specific tests in testbench @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mysql_tests=\"yes\" ;;\n          no) enable_mysql_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mysql-tests) ;;\n         esac],\n        [enable_mysql_tests=no]\n)\nAM_CONDITIONAL(ENABLE_MYSQL_TESTS, test x$enable_mysql_tests = xyes)\n\n\n# capability to enable PostgreSQL testbench tests. This requries that a Syslog database\n# with the default schema (see plugins/ompgsql/createDB.sql) has been created on the\n# local (127.0.0.1) PostgreSQL server and a user \"rsyslog\" with password \"testbench\"\n# exists, is able to login with default parameters and has sufficient (read: all)\n# privileges on that database\nAC_ARG_ENABLE(pgsql_tests,\n        [AS_HELP_STRING([--enable-pgsql-tests],[enable PostgreSQL specific tests in testbench @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pgsql_tests=\"yes\" ;;\n          no) enable_pgsql_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pgsql-tests) ;;\n         esac],\n        [enable_pgsql_tests=no]\n)\nAM_CONDITIONAL(ENABLE_PGSQL_TESTS, test x$enable_pgsql_tests = xyes)\n\n\n# Mail support (so far we do not need a library, but we need to turn this on and off)\nAC_ARG_ENABLE(mail,\n        [AS_HELP_STRING([--enable-mail],[Enable mail support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mail=\"yes\" ;;\n          no) enable_mail=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mail) ;;\n         esac],\n        [enable_mail=no]\n)\nAM_CONDITIONAL(ENABLE_MAIL, test x$enable_mail = xyes)\n\n\nAC_ARG_ENABLE(fmhttp,\n        [AS_HELP_STRING([--enable-fmhttp],[Enable fmhttp @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_fmhttp=\"yes\" ;;\n          no) enable_fmhttp=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-fmhttp) ;;\n         esac],\n        [enable_fmhttp=yes]\n)\nif test \"$enable_fmhttp\" = \"yes\"; then\n        PKG_CHECK_MODULES([CURL], [libcurl])\nfi\nAM_CONDITIONAL(ENABLE_FMHTTP, test x$enable_fmhttp = xyes)\n\n\n# imdiag support\n# This is a core testbench tool. You need to enable it if you want to\n# use not only a small subset of the testbench.\nAC_ARG_ENABLE(imdiag,\n        [AS_HELP_STRING([--enable-imdiag],[Enable imdiag @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imdiag=\"yes\" ;;\n          no) enable_imdiag=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imdiag) ;;\n         esac],\n        [enable_imdiag=no]\n)\nif test \"x$enable_imdiag\" = \"xyes\"; then\n\tAC_DEFINE([ENABLE_IMDIAG], [1], [Indicator that IMDIAG is present])\nfi\nAM_CONDITIONAL(ENABLE_IMDIAG, test x$enable_imdiag = xyes)\n\n\n# mmnormalize\nAC_ARG_ENABLE(mmnormalize,\n        [AS_HELP_STRING([--enable-mmnormalize],[Enable building mmnormalize support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmnormalize=\"yes\" ;;\n          no) enable_mmnormalize=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmnormalize) ;;\n         esac],\n        [enable_mmnormalize=no]\n)\nif test \"x$enable_mmnormalize\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(LIBLOGNORM, lognorm >= 2.0.3)\n\n\tsave_CFLAGS=\"$CFLAGS\"\n\tsave_LIBS=\"$LIBS\"\n\n\tCFLAGS=\"$CFLAGS $LIBLOGNORM_CFLAGS\"\n\tLIBS=\"$LIBS $LIBLOGNORM_LIBS\"\n\n\tAX_CHECK_DEFINED([[#include <lognorm-features.h>]],LOGNORM_REGEX_SUPPORTED,[lognorm_regex_supported=\"yes\"],)\n\n\tCFLAGS=\"$save_CFLAGS\"\n\tLIBS=\"$save_LIBS\"\nfi\nAM_CONDITIONAL(LOGNORM_REGEX_SUPPORTED, test x$lognorm_regex_supported = xyes)\nAM_CONDITIONAL(ENABLE_MMNORMALIZE, test x$enable_mmnormalize = xyes)\n\n# mmnjsonparse\nAC_ARG_ENABLE(mmjsonparse,\n        [AS_HELP_STRING([--enable-mmjsonparse],[Enable building mmjsonparse support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmjsonparse=\"yes\" ;;\n          no) enable_mmjsonparse=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmjsonparse) ;;\n         esac],\n        [enable_mmjsonparse=no]\n)\nAM_CONDITIONAL(ENABLE_MMJSONPARSE, test x$enable_mmjsonparse = xyes)\n\n# mmgrok\nAC_ARG_ENABLE(mmgrok,\n        [AS_HELP_STRING([--enable-mmgrok],[Enable building mmgrok support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmgrok=\"yes\" ;;\n          no) enable_mmgrok=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmgrok) ;;\n        esac],\n        [enable_mmgrok=no]\n)\nif test \"x$enable_mmgrok\" = \"xyes\"; then\n        AC_CHECK_HEADERS([grok.h])\n\tGLIB_CFLAGS=\"$(pkg-config --cflags glib-2.0)\"\n\tGLIB_LIBS=\"$(pkg-config --libs glib-2.0)\"\nfi\nAM_CONDITIONAL(ENABLE_MMGROK, test x$enable_mmgrok = xyes)\nAC_SUBST(GLIB_CFLAGS)\nAC_SUBST(GLIB_LIBS)\n\n# mmaudit\nAC_ARG_ENABLE(mmaudit,\n        [AS_HELP_STRING([--enable-mmaudit],[Enable building mmaudit support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmaudit=\"yes\" ;;\n          no) enable_mmaudit=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmaudit) ;;\n         esac],\n        [enable_mmaudit=no]\n)\nAM_CONDITIONAL(ENABLE_MMAUDIT, test x$enable_mmaudit = xyes)\n\n\n# mmanon\nAC_ARG_ENABLE(mmanon,\n        [AS_HELP_STRING([--enable-mmanon],[Enable building mmanon support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmanon=\"yes\" ;;\n          no) enable_mmanon=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmanon) ;;\n         esac],\n        [enable_mmanon=no]\n)\nAM_CONDITIONAL(ENABLE_MMANON, test x$enable_mmanon = xyes)\n\n\n# mmrm1stspace\nAC_ARG_ENABLE(mmrm1stspace,\n        [AS_HELP_STRING([--enable-mmrm1stspace],[Enable building mmrm1stspace support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmrm1stspace=\"yes\" ;;\n          no) enable_mmrm1stspace=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmrm1stspace) ;;\n         esac],\n        [enable_mmrm1stspace=no]\n)\nAM_CONDITIONAL(ENABLE_MMRM1STSPACE, test x$enable_mmrm1stspace = xyes)\n\n\n# mmutf8fix\nAC_ARG_ENABLE(mmutf8fix,\n        [AS_HELP_STRING([--enable-mmutf8fix],[Enable building mmutf8fix support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmutf8fix=\"yes\" ;;\n          no) enable_mmutf8fix=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmutf8fix) ;;\n         esac],\n        [enable_mmutf8fix=no]\n)\nAM_CONDITIONAL(ENABLE_MMUTF8FIX, test x$enable_mmutf8fix = xyes)\n\n\n# mmcount\nAC_ARG_ENABLE(mmcount,\n        [AS_HELP_STRING([--enable-mmcount],[Enable message counting @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmcount=\"yes\" ;;\n          no) enable_mmcount=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmcount) ;;\n         esac],\n        [enable_mmcount=no]\n)\nAM_CONDITIONAL(ENABLE_MMCOUNT, test x$enable_mmcount = xyes)\n\n\n# mmsequence\nAC_ARG_ENABLE(mmsequence,\n        [AS_HELP_STRING([--enable-mmsequence],[Enable sequence generator @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmsequence=\"yes\" ;;\n          no) enable_mmsequence=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmsequence) ;;\n         esac],\n        [enable_mmsequence=no]\n)\nAM_CONDITIONAL(ENABLE_MMSEQUENCE, test x$enable_mmsequence = xyes)\n\n\n\n# mmdblookup\nAC_ARG_ENABLE(mmdblookup,\n        [AS_HELP_STRING([--enable-mmdblookup],[Enable mmdb lookup helper @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmdblookup=\"yes\" ;;\n          no) enable_mmdblookup=\"no\" ;;\n         optional) enable_mmdblookup=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmdblookup) ;;\n         esac],\n        [enable_mmdblookup=no]\n)\nAM_CONDITIONAL(ENABLE_MMDBLOOKUP, test x$enable_mmdblookup = xyes -o x$enable_mmdblookup = xoptional)\nmmdblookup_use_dummy=\"no\"\nif test x$enable_mmdblookup = xoptional -o x$enable_mmdblookup = xyes; then\n        #PKG_CHECK_MODULES(LIBMAXMINDDB, libmaxminddb) -- does not work - later?\n        AC_CHECK_HEADERS([maxminddb.h], [\n\t], [\n\t\tAS_IF([test x$enable_mmdblookup = xyes],\n\t\t\tAC_MSG_ERROR(libmaxminddb library for mmdblookup could not be found)\n\t\t)\n\t\tmmdblookup_use_dummy=\"yes\"\n\t\tAC_DEFINE([ENABLE_MMBDLOOKUP_DUMMY], [1], [Indicator that we need to build a dummy module])\n\t])\nfi\nAM_CONDITIONAL(MMDBLOOKUP_USE_DUMMY, test x$mmdblookup_use_dummy = xyes)\n\n\n# mmdarwin\nAC_ARG_ENABLE(mmdarwin,\n        [AS_HELP_STRING([--enable-mmdarwin],[Enable mmdb lookup helper @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmdarwin=\"yes\" ;;\n          no) enable_mmdarwin=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmdarwin) ;;\n         esac],\n        [enable_mmdarwin=no]\n)\nif test \"x$enable_mmdarwin\"; then\n        AC_CHECK_HEADERS([protocol.h])\nfi\nAM_CONDITIONAL(ENABLE_MMDARWIN, test x$enable_mmdarwin = xyes)\n\n\n\n\n# mmfields\nAC_ARG_ENABLE(mmfields,\n        [AS_HELP_STRING([--enable-mmfields],[Enable building mmfields support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmfields=\"yes\" ;;\n          no) enable_mmfields=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmfields) ;;\n         esac],\n        [enable_mmfields=no]\n)\nAM_CONDITIONAL(ENABLE_MMFIELDS, test x$enable_mmfields = xyes)\n\n# mmpstrucdata\nAC_ARG_ENABLE(mmpstrucdata,\n        [AS_HELP_STRING([--enable-mmpstrucdata],[Enable building mmpstrucdata support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmpstrucdata=\"yes\" ;;\n          no) enable_mmpstrucdata=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmpstrucdata) ;;\n         esac],\n        [enable_mmpstrucdata=no]\n)\nAM_CONDITIONAL(ENABLE_MMPSTRUCDATA, test x$enable_mmpstrucdata = xyes)\n\n\n# mmrfc5424addhmac\nAC_ARG_ENABLE(mmrfc5424addhmac,\n        [AS_HELP_STRING([--enable-mmrfc5424addhmac],[Enable building mmrfc5424addhmac support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmrfc5424addhmac=\"yes\" ;;\n          no) enable_mmrfc5424addhmac=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmrfc5424addhmac) ;;\n         esac],\n        [enable_mmrfc5424addhmac=no]\n)\nif test \"x$enable_mmrfc5424addhmac\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(OPENSSL, openssl >= 0.9.7)\n#AC_CHECK_LIB([crypto],[CRYPTO_new_ex_data], [], [AC_MSG_ERROR([OpenSSL libraries required])])\n#AC_CHECK_LIB([ssl],[SSL_library_init], [], [AC_MSG_ERROR([OpenSSL libraries required])])\n#AC_CHECK_HEADERS([openssl/crypto.h openssl/x509.h openssl/pem.h openssl/ssl.h openssl/err.h],[],[AC_MSG_ERROR([OpenSSL headers required])])\nfi\nAM_CONDITIONAL(ENABLE_MMRFC5424ADDHMAC, test x$enable_mmrfc5424addhmac = xyes)\n\n\n# experimental omfile-hardened module\nAC_ARG_ENABLE(omfile-hardened,\n        [AS_HELP_STRING([--enable-omfile-hardened],[Enable omfile-hardened support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omfile_hardened=\"yes\" ;;\n          no) enable_omfile_hardened=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omfile-hardened) ;;\n         esac],\n        [enable_omfile_hardened=no]\n)\nAM_CONDITIONAL(ENABLE_OMFILE_HARDENED, test x$enable_omfile_hardened = xyes)\n\n\n# RELP support\nAC_ARG_ENABLE(relp,\n        [AS_HELP_STRING([--enable-relp],[Enable RELP support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_relp=\"yes\" ;;\n          no) enable_relp=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-relp) ;;\n         esac],\n        [enable_relp=no]\n)\nif test \"x$enable_relp\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(RELP, relp >= 1.2.14)\n\tAC_DEFINE([ENABLE_RELP], [1], [Indicator that RELP is present])\n        save_CFLAGS=\"$CFLAGS\"\n        save_LIBS=\"$LIBS\"\n\n        CFLAGS=\"$CFLAGS $RELP_CFLAGS\"\n        LIBS=\"$LIBS $RELP_LIBS\"\n\t# Export RELP Version for testbench tools\n\tRELP_VERSION=\"$(pkg-config --modversion relp)\"\n\tAC_DEFINE_UNQUOTED([RELP_VERSION], \"${RELP_VERSION}\", [Define version of librelp used.])\n\n        AC_CHECK_FUNC([relpSrvSetOversizeMode],\n                      [AC_DEFINE([HAVE_RELPSRVSETOVERSIZEMODE], [1], [Define if relpSrvSetOversizeMode exists.])])\n        AC_CHECK_FUNC([relpSrvSetLstnAddr],\n                      [AC_DEFINE([HAVE_RELPSRVSETLSTNADDR], [1], [Define if relpSrvSetLstnAddr exists.])])\n        AC_CHECK_FUNC([relpEngineSetTLSLibByName],\n                      [AC_DEFINE([HAVE_RELPENGINESETTLSLIBBYNAME], [1], [Define if relpEngineSetTLSLibByName exists.])])\n        AC_CHECK_FUNC([relpSrvSetTlsConfigCmd],\n                      [AC_DEFINE([HAVE_RELPENGINESETTLSCFGCMD], [1], [Define if relpSrvSetTlsConfigCmd exists.])])\n        AC_CHECK_FUNC([relpSrvSetTlsConfigCmd],\n                      [HAVE_RELPENGINESETTLSCFGCMD=1])\n\n        CFLAGS=\"$save_CFLAGS\"\n        LIBS=\"$save_LIBS\"\nfi\nAM_CONDITIONAL(ENABLE_RELP, test x$enable_relp = xyes)\nAM_CONDITIONAL([USE_RELPENGINESETTLSCFGCMD], [test \"x$HAVE_RELPENGINESETTLSCFGCMD\" = x1])\n\n# RELP default port\nAC_ARG_ENABLE(omrelp-default-port,\n        [AS_HELP_STRING([--enable-omrelp-default-port],[set omrelp default port @<:@default=514@:>@])],\n\t[ AC_DEFINE_UNQUOTED(RELP_DFLT_PT, \"${enableval}\", [default port for omrelp]) ],\n\t[ AC_DEFINE(RELP_DFLT_PT, \"514\", [default port for omrelp]) ]\n)\n\n\n\n# GuardTime KSI LOGSIG 12 support\nAC_ARG_ENABLE(ksi-ls12,\n        [AS_HELP_STRING([--enable-ksi-ls12],[Enable log file signing support via GuardTime KSI LS12 @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_ksi_ls12=\"yes\" ;;\n          no) enable_ksi_ls12=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-ksi-ls12) ;;\n         esac],\n        [enable_ksi_ls12=no]\n)\nif test \"x$enable_ksi_ls12\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(GT_KSI_LS12, libksi >= 3.19.0)\nfi\nAM_CONDITIONAL(ENABLE_KSI_LS12, test x$enable_ksi_ls12 = xyes)\n\n# liblogging-stdlog support\n# we use liblogging-stdlog inside the testbench, which is why we need to check for it in any case\nPKG_CHECK_MODULES(LIBLOGGING_STDLOG, liblogging-stdlog >= 1.0.3,\n        [AC_DEFINE(HAVE_LIBLOGGING_STDLOG, 1, [Define to 1 if liblogging-stdlog is available.])\n        found_liblogging_stdlog=\"yes\"],\n        [AC_MSG_NOTICE([liblogging-stdlog not found, parts of the testbench will not run])]\n)\n\nAC_ARG_ENABLE(liblogging-stdlog,\n        [AS_HELP_STRING([--enable-liblogging-stdlog],[Enable liblogging-stdlog support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_liblogging_stdlog=\"yes\" ;;\n          no) enable_liblogging_stdlog=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-liblogging-stdlog) ;;\n         esac],\n        [enable_liblogging_stdlog=no]\n)\nif test \"x$enable_liblogging_stdlog\" = \"xyes\" -a \"x$found_liblogging_stdlog\" != \"xyes\"; then\n\tAC_MSG_ERROR(--enable-liblogging-stdlog set but liblogging-stdlog was not found)\nfi\nAM_CONDITIONAL(ENABLE_LIBLOGGING_STDLOG, [test \"x$enable_liblogging_stdlog\" = \"xyes\"])\n\n# RFC 3195 support\nAC_ARG_ENABLE(rfc3195,\n        [AS_HELP_STRING([--enable-rfc3195],[Enable RFC3195 support @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_rfc3195=\"yes\" ;;\n          no) enable_rfc3195=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-rfc3195) ;;\n         esac],\n        [enable_rfc3195=no]\n)\nif test \"x$enable_rfc3195\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(LIBLOGGING, liblogging-rfc3195 >= 1.0.1)\nfi\nAM_CONDITIONAL(ENABLE_RFC3195, test x$enable_rfc3195 = xyes)\n\n\n# enable/disable the testbench (e.g. because some important parts\n# are missing)\nAC_ARG_ENABLE(testbench,\n        [AS_HELP_STRING([--enable-testbench],[testbench enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_testbench=\"yes\" ;;\n          no) enable_testbench=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-testbench) ;;\n         esac],\n        [enable_testbench=no]\n)\n\n# Add a capability to turn off libfaketime tests. Unfortunately, libfaketime\n# becomes more and more problematic in newer versions and causes aborts\n# on some platforms. This provides the ability to turn it off. In the\n# longer term, we should consider writing our own replacement.\nAC_ARG_ENABLE(libfaketime,\n        [AS_HELP_STRING([--enable-libfaketime],[libfaketime enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_libfaketime=\"yes\" ;;\n          no) enable_libfaketime=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-libfaketime) ;;\n         esac],\n        [enable_libfaketime=no]\n)\nAM_CONDITIONAL(ENABLE_LIBFAKETIME, test \"x${enable_libfaketime}\" = \"xyes\")\n\n# this permits to control the \"default tests\" in testbench runs. These\n# are those tests that do not need a special configure option. There are\n# some situations where we really want to turn them of so that we can\n# run tests only for a specific component (e.g. ElasticSearch).\n# This also enables us to do some parallel testing even while the\n# testbench is not yet able to support make -j check\nAC_ARG_ENABLE(default-tests,\n        [AS_HELP_STRING([--enable-default-tests],[default-tests enabled @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_default_tests=\"yes\" ;;\n          no) enable_default_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-default-tests) ;;\n         esac],\n        [enable_default_tests=yes]\n)\nAM_CONDITIONAL(ENABLE_DEFAULT_TESTS, test \"x${enable_default_tests}\" = \"xyes\")\n\nAC_CHECK_PROG(IP, [ip], [yes], [no])\nif test \"x${IP}\" = \"xno\"; then\n\tAC_MSG_NOTICE([Will not check network namespace functionality as 'ip' (part of iproute2) is not available.])\nfi\nAM_CONDITIONAL(ENABLE_IP, test \"x${IP}\" = \"xyes\")\n\n\n# valgrind-testbench\nAC_ARG_WITH([valgrind_testbench],\n        [AS_HELP_STRING([--without-valgrind-testbench], [Don't use valgrind in testbench])]\n)\n\nif test \"x$with_valgrind_testbench\" != \"xno\"; then\n        AC_CHECK_PROG(VALGRIND, [valgrind], [valgrind], [no])\n\n        if test \"x$enable_testbench\" = \"xyes\" && test \"x$VALGRIND\" = \"xno\"; then\n                if test \"x$with_valgrind_testbench\" = \"xyes\"; then\n                        AC_MSG_ERROR([valgrind is missing but forced with --with-valgrind-testbench. Either install valgrind or remove the option!])\n                else\n                        AC_MSG_WARN([valgrind is missing -- testbench won't use valgrind!])\n                fi\n        else\n                AC_MSG_NOTICE([testbench will use valgrind])\n        fi\nelse\n\tAC_MSG_NOTICE([testbench won't use valgrind due to set --without-valgrind-testbench option])\nfi\nAM_CONDITIONAL([HAVE_VALGRIND], [test \"x$with_valgrind_testbench\" != \"xno\" && test \"x$VALGRIND\" != \"xno\"])\n\n# ability to disable helgrind tests - we at least need this for\n# clang coverage reports, where we cannot suppress the races\nAC_ARG_ENABLE(helgrind,\n        [AS_HELP_STRING([--enable-helgrind],[valgrind helgrind enabled @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_helgrind=\"yes\" ;;\n          no) enable_helgrind=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-helgrind) ;;\n         esac],\n        [enable_helgrind=yes]\n)\nAM_CONDITIONAL(ENABLE_HELGRIND, test x$enable_helgrind = xyes)\n\n# settings for the batch report input module\nAC_ARG_ENABLE(imbatchreport,\n        [AS_HELP_STRING([--enable-imbatchreport],[batch report input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imbatchreport=\"yes\" ;;\n          no) enable_imbatchreport=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imbatchreport) ;;\n         esac],\n        [enable_imbatchreport=no]\n)\nAM_CONDITIONAL(ENABLE_IMBATCHREPORT, test x$enable_imbatchreport = xyes)\n\n# settings for the db2diag parser module\nAC_ARG_ENABLE(pmdb2diag,\n        [AS_HELP_STRING([--enable-pmdb2diag],[db2diag parser module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmdb2diag=\"yes\" ;;\n          no) enable_pmdb2diag=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmdb2diag) ;;\n         esac],\n        [enable_pmdb2diag=no]\n)\nAM_CONDITIONAL(ENABLE_PMDB2DIAG, test x$enable_pmdb2diag = xyes)\n\n# settings for the file input module\nAC_ARG_ENABLE(imfile,\n        [AS_HELP_STRING([--enable-imfile],[file input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imfile=\"yes\" ;;\n          no) enable_imfile=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imfile) ;;\n         esac],\n        [enable_imfile=no]\n)\nif test \"x$enable_imfile\" = \"xyes\"; then\n\tAC_CHECK_FUNCS(port_create,,)\n\tAC_MSG_CHECKING(for Solaris File Events Notification API support)\n\tAC_TRY_COMPILE([\n\t\t#include <port.h>\n\t\t#include <sys/port.h>\n\t\t], [\n\t\treturn PORT_SOURCE_FILE;\n\t\t]\n\t\t,\n\t\tAC_DEFINE(HAVE_PORT_SOURCE_FILE, 1, [Enable FEN support for imfile])\n\t\tAC_MSG_RESULT(yes)\n\t\t,\n\t\tAC_MSG_RESULT(no)\n\t)\nfi\nAM_CONDITIONAL(ENABLE_IMFILE, test x$enable_imfile = xyes)\n\nAC_ARG_ENABLE(imfile-tests,\n        [AS_HELP_STRING([--enable-imfile-tests],[Enable imfile tests @<:@default=yes@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imfile_tests=\"yes\" ;;\n          no) enable_imfile_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imfile-tests) ;;\n         esac],\n        [enable_imfile_tests=yes]\n)\nif  [[ \"$enable_imfile_tests\" == \"yes\" ]] && [[ \"$enable_imfile\" != \"yes\" ]]; then\n\t\tAC_MSG_WARN([imfile-tests can not be enabled without imfile support. Disabling imfile tests...])\n\t\tenable_imfile_tests=\"no\"\nfi\nAM_CONDITIONAL(ENABLE_IMFILE_TESTS, test x$enable_imfile_tests = xyes)\n\n\n# settings for the docker log input module\nAC_ARG_ENABLE(imdocker,\n        [AS_HELP_STRING([--enable-imdocker],[input docker module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imdocker=\"yes\" ;;\n          no) enable_imdocker=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imdocker) ;;\n         esac],\n        [enable_imdocker=no]\n)\nif test \"x$enable_imdocker\" = \"xyes\"; then\n\tAC_CHECK_HEADERS([curl/curl.h])\n\tPKG_CHECK_MODULES([CURL], [libcurl >= 7.40.0])\nfi\nAM_CONDITIONAL(ENABLE_IMDOCKER, test x$enable_imdocker = xyes)\n\nAC_ARG_ENABLE(imdocker-tests,\n        [AS_HELP_STRING([--enable-imdocker-tests],[Enable imdocker tests @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imdocker_tests=\"yes\" ;;\n          no) enable_imdocker_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imdocker-tests) ;;\n         esac],\n        [enable_imdocker_tests=no]\n)\n\nAM_CONDITIONAL(ENABLE_IMDOCKER_TESTS, test x$enable_imdocker_tests = xyes)\n\n\n# settings for the tuxedo ULOG input module\nAC_ARG_ENABLE(imtuxedoulog,\n        [AS_HELP_STRING([--enable-imtuxedoulog],[tuxedo ULOG input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imtuxedoulog=\"yes\" ;;\n          no) enable_imtuxedoulog=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imtuxedoulog) ;;\n         esac],\n        [enable_imtuxedoulog=no]\n)\nAM_CONDITIONAL(ENABLE_IMTUXEDOULOG, test x$enable_imtuxedoulog = xyes)\n\n# settings for the external program input module\nAC_ARG_ENABLE(improg,\n        [AS_HELP_STRING([--enable-improg],[external program input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_improg=\"yes\" ;;\n          no) enable_improg=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-improg) ;;\n         esac],\n        [enable_improg=no]\n)\nAM_CONDITIONAL(ENABLE_IMPROG, test x$enable_improg = xyes)\n\n# settings for the external http input module\nAC_ARG_ENABLE(imhttp,\n        [AS_HELP_STRING([--enable-imhttp],[external http input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imhttp=\"yes\" ;;\n          no) enable_imhttp=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imhttp) ;;\n         esac],\n        [enable_imhttp=no]\n)\nif test \"x$enable_imhttp\" = \"xyes\"; then\n  AC_CHECK_HEADERS(\n    [civetweb.h],,\n    [AC_MSG_FAILURE([civetweb is missing])]\n  )\n  AC_SEARCH_LIBS(mg_version, civetweb)\n\n  PKG_CHECK_MODULES(APU, apr-util-1 >= 1.0)\n  save_CFLAGS=\"$CFLAGS\"\n  save_LIBS=\"$LIBS\"\n\n  CFLAGS=\"$CFLAGS $APU_CFLAGS\"\n  LIBS=\"$LIBS $APU_LIBS\"\n\n  AC_CHECK_HEADERS([apr_md5.h])\n  AC_CHECK_HEADERS([apr_base64.h])\n  AC_SEARCH_LIBS(apr_base64_decode, aprutil-1)\n  AC_SEARCH_LIBS(apr_password_validate, aprutil-1)\n\n  CIVETWEB_LIBS=-lcivetweb\n  AC_SUBST(CIVETWEB_LIBS)\n\n  CFLAGS=\"$save_CFLAGS\"\n  LIBS=\"$save_LIBS\"\nfi\nAM_CONDITIONAL(ENABLE_IMHTTP, test x$enable_imhttp = xyes)\n\n# settings for the door input module (under solaris, thus default off)\nAC_ARG_ENABLE(imsolaris,\n        [AS_HELP_STRING([--enable-imsolaris],[solaris input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imsolaris=\"yes\" ;;\n          no) enable_imsolaris=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imsolaris) ;;\n         esac],\n        [enable_imsolaris=no]\n)\nAM_CONDITIONAL(ENABLE_IMSOLARIS, test x$enable_imsolaris = xyes)\n\n# settings for the ptcp input module\nAC_ARG_ENABLE(imptcp,\n        [AS_HELP_STRING([--enable-imptcp],[plain tcp input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imptcp=\"yes\" ;;\n          no) enable_imptcp=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imptcp) ;;\n         esac],\n        [enable_imptcp=no]\n)\nAM_CONDITIONAL(ENABLE_IMPTCP, test x$enable_imptcp = xyes)\n\n\n# settings for the pstats input module\nAC_ARG_ENABLE(impstats,\n        [AS_HELP_STRING([--enable-impstats],[periodic statistics module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_impstats=\"yes\" ;;\n          no) enable_impstats=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-impstats) ;;\n         esac],\n        [enable_impstats=no]\n)\nAM_CONDITIONAL(ENABLE_IMPSTATS, test x$enable_impstats = xyes)\n\n# settings for the pcap input module\nAC_ARG_ENABLE(impcap,\n        [AS_HELP_STRING([--enable-impcap],[libpcap input module enabled @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_impcap=\"yes\" ;;\n          no) enable_impcap=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-impcap) ;;\n         esac],\n        [enable_impcap=no]\n)\n\nif test \"x$enable_impcap\" = \"xyes\"; then\n\t\t\t\tAC_CHECK_HEADERS([pcap.h],\n\t\t\t\t[AC_MSG_NOTICE([pcap found])],\n\t\t\t\tAC_MSG_ERROR([libpcap library and headers not found])\n\t\t\t\t)\nfi\nAM_CONDITIONAL(ENABLE_IMPCAP, test x$enable_impcap = xyes)\n\n# settings for the omprog output module\nAC_ARG_ENABLE(omprog,\n        [AS_HELP_STRING([--enable-omprog],[Compiles omprog module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omprog=\"yes\" ;;\n          no) enable_omprog=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omprog) ;;\n         esac],\n        [enable_omprog=no]\n)\nAM_CONDITIONAL(ENABLE_OMPROG, test x$enable_omprog = xyes)\n\n\n# settings for omudpspoof\nAC_ARG_ENABLE(omudpspoof,\n        [AS_HELP_STRING([--enable-omudpspoof],[Compiles omudpspoof module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omudpspoof=\"yes\" ;;\n          no) enable_omudpspoof=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omudpspoof) ;;\n         esac],\n        [enable_omudpspoof=no]\n)\n\nif test \"x$enable_omudpspoof\" = \"xyes\"; then\n  AC_CHECK_HEADERS(\n    [libnet.h],,\n    [AC_MSG_FAILURE([libnet is missing])]\n  )\n  AC_CHECK_LIB(\n    [net],\n    [libnet_init],\n    [UDPSPOOF_CFLAGS=\"\"\n     UDPSPOOF_LIBS=\"-lnet\"\n    ],\n    [AC_MSG_FAILURE([libnet is missing])]\n  )\nfi\nAM_CONDITIONAL(ENABLE_OMUDPSPOOF, test x$enable_omudpspoof = xyes)\nAC_SUBST(UDPSPOOF_CFLAGS)\nAC_SUBST(UDPSPOOF_LIBS)\n\n\n# settings for omstdout\nAC_ARG_ENABLE(omstdout,\n        [AS_HELP_STRING([--enable-omstdout],[Compiles stdout module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omstdout=\"yes\" ;;\n          no) enable_omstdout=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omstdout) ;;\n         esac],\n        [enable_omstdout=no]\n)\nAM_CONDITIONAL(ENABLE_OMSTDOUT, test x$enable_omstdout = xyes)\n\nAM_CONDITIONAL(ENABLE_TESTBENCH, test x$enable_testbench = xyes)\nif test \"x$enable_testbench\" = \"xyes\"; then\n\tif test \"x$enable_imdiag\" != \"xyes\"; then\n\t\tAC_MSG_ERROR(\"--enable-testbench requires --enable-imdiag\")\n\tfi\n\tif test \"x$enable_omstdout\" != \"xyes\"; then\n\t\tAC_MSG_ERROR(\"--enable-testbench requires --enable-omstdout\")\n\tfi\nfi\n\n\n# settings for omjournal\nAC_ARG_ENABLE(omjournal,\n        [AS_HELP_STRING([--enable-omjournal],[Compiles omjournal @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omjournal=\"yes\" ;;\n          no) enable_omjournal=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omjournal) ;;\n         esac],\n        [enable_omjournal=no]\n)\nif test \"x$enable_omjournal\" = \"xyes\"; then\n\tPKG_CHECK_MODULES([LIBSYSTEMD_JOURNAL], [libsystemd >= 209] ,, [\n\t    PKG_CHECK_MODULES([LIBSYSTEMD_JOURNAL], [libsystemd-journal >= 197])\n\t])\nfi\nAM_CONDITIONAL(ENABLE_OMJOURNAL, test x$enable_omjournal = xyes)\n\n# capability to enable journal testbench tests. They have very special requirements,\n# so it does not make sense to have them run by default.\n# Also note that as of now, they have a pretty high rate of false positives due\n# to bugs in the journal.\n# see also https://github.com/rsyslog/rsyslog/issues/2931#issuecomment-416914707\nAC_ARG_ENABLE(journal_tests,\n        [AS_HELP_STRING([--enable-journal-tests],[enable systemd journal specific tests in testbench @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_journal_tests=\"yes\" ;;\n          no) enable_journal_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-journal-tests) ;;\n         esac],\n        [enable_journal_tests=no]\n)\nAM_CONDITIONAL(ENABLE_JOURNAL_TESTS, test x$enable_journal_tests = xyes)\n\n\n# settings for pmlastmsg\nAC_ARG_ENABLE(pmlastmsg,\n        [AS_HELP_STRING([--enable-pmlastmsg],[Compiles lastmsg parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmlastmsg=\"yes\" ;;\n          no) enable_pmlastmsg=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmlastmsg) ;;\n         esac],\n        [enable_pmlastmsg=no]\n)\nAM_CONDITIONAL(ENABLE_PMLASTMSG, test x$enable_pmlastmsg = xyes)\n\n\n# settings for pmcisconames\nAC_ARG_ENABLE(pmcisconames,\n        [AS_HELP_STRING([--enable-pmcisconames],[Compiles cisconames parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmcisconames=\"yes\" ;;\n          no) enable_pmcisconames=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmcisconames) ;;\n         esac],\n        [enable_pmcisconames=no]\n)\nAM_CONDITIONAL(ENABLE_PMCISCONAMES, test x$enable_pmcisconames = xyes)\n\n\n# settings for pmciscoios\nAC_ARG_ENABLE(pmciscoios,\n        [AS_HELP_STRING([--enable-pmciscoios],[Compiles ciscoios parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmciscoios=\"yes\" ;;\n          no) enable_pmciscoios=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmciscoios) ;;\n         esac],\n        [enable_pmciscoios=no]\n)\nAM_CONDITIONAL(ENABLE_PMCISCOIOS, test x$enable_pmciscoios = xyes)\n\n\n# settings for pmnull\nAC_ARG_ENABLE(pmnull,\n        [AS_HELP_STRING([--enable-pmnull],[Compiles null parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmnull=\"yes\" ;;\n          no) enable_pmnull=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmnull) ;;\n         esac],\n        [enable_pmnull=no]\n)\nAM_CONDITIONAL(ENABLE_PMNULL, test x$enable_pmnull = xyes)\n\n\n# settings for pmnormalize\nAC_ARG_ENABLE(pmnormalize,\n        [AS_HELP_STRING([--enable-pmnormalize],[Compiles normalizer parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmnormalize=\"yes\" ;;\n          no) enable_pmnormalize=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmnormalize) ;;\n         esac],\n        [enable_pmnormalize=no]\n)\nAM_CONDITIONAL(ENABLE_PMNORMALIZE, test x$enable_pmnormalize = xyes)\n\n\n# settings for pmaixforwardedfrom\nAC_ARG_ENABLE(pmaixforwardedfrom,\n        [AS_HELP_STRING([--enable-pmaixforwardedfrom],[Compiles aixforwardedfrom parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmaixforwardedfrom=\"yes\" ;;\n          no) enable_pmaixforwardedfrom=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmaixforwardedfrom) ;;\n         esac],\n        [enable_pmaixforwardedfrom=no]\n)\nAM_CONDITIONAL(ENABLE_PMAIXFORWARDEDFROM, test x$enable_pmaixforwardedfrom = xyes)\n\n\n# settings for pmsnare\nAC_ARG_ENABLE(pmsnare,\n        [AS_HELP_STRING([--enable-pmsnare],[Compiles snare parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmsnare=\"yes\" ;;\n          no) enable_pmsnare=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmsnare) ;;\n         esac],\n        [enable_pmsnare=no]\n)\nAM_CONDITIONAL(ENABLE_PMSNARE, test x$enable_pmsnare = xyes)\n\n\n# settings for pmpanngfw\nAC_ARG_ENABLE(pmpanngfw,\n        [AS_HELP_STRING([--enable-pmpanngfw],[Compiles Palo Alto Networks parser module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_pmpanngfw=\"yes\" ;;\n          no) enable_pmpanngfw=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-pmpanngfw) ;;\n         esac],\n        [enable_pmpanngfw=no]\n)\nAM_CONDITIONAL(ENABLE_PMPANNGFW, test x$enable_pmpanngfw = xyes)\n\n\n# settings for omruleset\nAC_ARG_ENABLE(omruleset,\n        [AS_HELP_STRING([--enable-omruleset],[Compiles ruleset forwarding module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omruleset=\"yes\" ;;\n          no) enable_omruleset=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omruleset) ;;\n         esac],\n        [enable_omruleset=no]\n)\nAM_CONDITIONAL(ENABLE_OMRULESET, test x$enable_omruleset = xyes)\n\n\n# settings for omuxsock\nAC_ARG_ENABLE(omuxsock,\n        [AS_HELP_STRING([--enable-omuxsock],[Compiles omuxsock module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omuxsock=\"yes\" ;;\n          no) enable_omuxsock=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omuxsock) ;;\n         esac],\n        [enable_omuxsock=no]\n)\nAM_CONDITIONAL(ENABLE_OMUXSOCK, test x$enable_omuxsock = xyes)\n\n\n# settings for mmsnmptrapd message modification module\nAC_ARG_ENABLE(mmsnmptrapd,\n        [AS_HELP_STRING([--enable-mmsnmptrapd],[Compiles mmsnmptrapd module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmsnmptrapd=\"yes\" ;;\n          no) enable_mmsnmptrapd=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmsnmptrapd) ;;\n         esac],\n        [enable_mmsnmptrapd=no]\n)\nAM_CONDITIONAL(ENABLE_MMSNMPTRAPD, test x$enable_mmsnmptrapd = xyes)\n\n\n# settings for the omhdfs;\nAC_ARG_ENABLE(omhdfs,\n        [AS_HELP_STRING([--enable-omhdfs],[Compiles omhdfs module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omhdfs=\"yes\" ;;\n          no) enable_omhdfs=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omhdfs) ;;\n         esac],\n        [enable_omhdfs=no]\n)\nif test \"x$enable_omhdfs\"; then\n\tAC_CHECK_HEADERS([hdfs.h hadoop/hdfs.h])\nfi\nAM_CONDITIONAL(ENABLE_OMHDFS, test x$enable_omhdfs = xyes)\n\n# support for kafka input output\nAC_ARG_ENABLE(omkafka,\n        [AS_HELP_STRING([--enable-omkafka],[Compiles kafka output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omkafka=\"yes\" ;;\n          no) enable_omkafka=\"no\" ;;\n         optional) enable_omkafka=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omkafka) ;;\n         esac],\n        [enable_omkafka=no]\n)\nAC_ARG_ENABLE(imkafka,\n        [AS_HELP_STRING([--enable-imkafka],[Compiles kafka input and output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imkafka=\"yes\" ;;\n          no) enable_imkafka=\"no\" ;;\n         optional) enable_imkafka=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imkafka) ;;\n         esac],\n        [enable_imkafka=no]\n)\n\nAC_ARG_ENABLE(omazureeventhubs_tests,\n        [AS_HELP_STRING([--enable-omazureeventhubs-tests],[Enable Omazureeventhubs tests @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omazureeventhubs_tests=\"yes\" ;;\n          no) enable_omazureeventhubs_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omazureeventhubs-tests) ;;\n         esac],\n        [enable_omazureeventhubs_tests=no]\n)\nAM_CONDITIONAL(ENABLE_OMAZUREEVENTHUBS_TESTS, test x$enable_omazureeventhubs_tests = xyes)\n\nAC_ARG_ENABLE(kafka_tests,\n        [AS_HELP_STRING([--enable-kafka-tests],[Enable Kafka tests, needs Java @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_kafka_tests=\"yes\" ;;\n          no) enable_kafka_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-kafka-tests) ;;\n         esac],\n        [enable_kafka_tests=no]\n)\nAM_CONDITIONAL(ENABLE_KAFKA_TESTS, test x$enable_kafka_tests = xyes)\n\nAC_ARG_ENABLE(kafka_static,\n        [AS_HELP_STRING([--enable-kafka-static],[Enable static library linking for Kafka modules. Removes dependency for rdkafka.so. @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_kafka_static=\"yes\" ;;\n          no) enable_kafka_static=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-kafka-static) ;;\n         esac],\n        [enable_kafka_static=no]\n)\nAM_CONDITIONAL(ENABLE_KAFKA_STATIC, test x$enable_kafka_static = xyes)\n\n# omkafka works with older library\nomkafka_use_dummy=\"no\"\nif test \"$enable_omkafka\" = \"yes\" -o \"$enable_omkafka\" = \"optional\"; then\n\tPKG_CHECK_MODULES([LIBRDKAFKA], [rdkafka >= 0.9.1],, [\n\t\tPKG_CHECK_MODULES([LIBRDKAFKA], [librdkafka],, [\n\t\t\tAC_CHECK_LIB([rdkafka], [rd_kafka_last_error], [\n\t\t\t\tAC_MSG_WARN([librdkafka is missing but library present, using -lrdkafka])\n\t\t\t\tLIBRDKAFKA_LIBS=-lrdkafka\n\t\t\t], [\n\t\t\t\tAS_IF([test \"$enable_omkafka\" = \"yes\"],\n\t\t\t\t\tAC_MSG_ERROR([could not find rdkafka library])\n\t\t\t\t)\n\t\t\t\tAC_MSG_NOTICE([omkafka: no suiteable build environment, use omkafka dummy])\n\t\t\t\tomkafka_use_dummy=yes\n\t\t\t\tAC_DEFINE([ENABLE_OMKAFKA_DUMMY], [1], [Indicator that we need to build a dummy omkafka module])\n\t\t\t])\n\t\t])\n\t])\nfi\nAM_CONDITIONAL(OMKAFKA_USE_DUMMY, test x$omkafka_use_dummy = xyes)\nif test \"$enable_omkafka\" = \"yes\" -o \"$enable_omkafka\" = \"optional\" && test \"$omkafka_use_dummy\" = \"no\"; then\n\tAC_CHECK_HEADERS([librdkafka/rdkafka.h])\n\n\t# Add additional dependencies if statically linking rdkafka\n\tif test \"x$enable_kafka_static\" = \"xyes\"; then\n\t\tPKG_CHECK_MODULES([LIBLZ4], [liblz4],, [\n\t\t\tAC_CHECK_LIB([lz4], [LZ4_compress], [\n\t\t\t\tAC_MSG_WARN([liblz4 is missing but library present, using -llz4])\n\t\t\t\tLIBRDKAFKA_LIBS=-llz4\n\t\t\t], [\n\t\t\t\tAC_MSG_ERROR([could not find liblz4 library])\n\t\t\t])\n\t\t])\n\tfi\nfi\n\nimkafka_use_dummy=\"no\"\n# imkafka needs newer library\nif test \"x$enable_imkafka\" = \"xyes\" -o \"$enable_imkafka\" = \"optional\"; then\n\tPKG_CHECK_MODULES([LIBRDKAFKA], [rdkafka >= 0.9.1],, [\n\t\tAC_CHECK_LIB([rdkafka], [rd_kafka_consumer_poll], [\n\t\t\tAC_MSG_WARN([librdkafka is missing but library present, using -lrdkafka])\n\t\t\tLIBRDKAFKA_LIBS=-lrdkafka\n\t\t], [\n\t\t\tAS_IF([test \"$enable_imkafka\" = \"yes\"],\n\t\t\t\tAC_MSG_ERROR([could not find sufficiently current rdkafka library])\n\t\t\t)\n\t\t\tAC_MSG_NOTICE([imkafka: no suiteable build environment, use imkafka dummy])\n\t\t\timkafka_use_dummy=yes\n\t\t\tAC_DEFINE([ENABLE_IMKAFKA_DUMMY], [1], [Indicator that we need to build a dummy imkafka module])\n\t\t])\n\t])\nfi\nAM_CONDITIONAL(IMKAFKA_USE_DUMMY, test x$imkafka_use_dummy = xyes)\nif test \"$enable_imkafka\" = \"yes\" -o \"$enable_imkafka\" = \"optional\" && test \"$imkafka_use_dummy\" = \"no\"; then\n\tAC_CHECK_HEADERS([librdkafka/rdkafka.h])\n\n\t# Add additional dependencies if statically linking rdkafka\n\tif test \"x$enable_kafka_static\" = \"xyes\"; then\n\t\tPKG_CHECK_MODULES([LIBLZ4], [liblz4],, [\n\t\t\tAC_CHECK_LIB([lz4], [LZ4_compress], [\n\t\t\t\tAC_MSG_WARN([liblz4 is missing but library present, using -llz4])\n\t\t\t\tLIBRDKAFKA_LIBS=-llz4\n\t\t\t], [\n\t\t\t\tAC_MSG_ERROR([could not find liblz4 library])\n\t\t\t])\n\t\t])\n\tfi\nfi\n\nif test \"x$enable_omkafka\" = \"xyes\" && test \"x$enable_imkafka\" = \"xyes\"; then\n\tif test \"x$enable_kafka_tests\" = \"xyes\"; then\n\t\tAX_PROG_JAVAC #we don't need javac, but macro documentation says JAVAC *must* be checked before JAVA\n\t\tAX_PROG_JAVA\n\t\tAC_CHECK_PROG(WGET, [wget], [yes], [no])\n\t\tif test \"x${WGET}\" = \"xno\"; then\n\t\t\tAC_MSG_FAILURE([wget, which is a kafka-tests dependency, not found])\n\t\tfi\n\t\tAC_CHECK_PROG(READLINK, [readlink], [yes], [no])\n\t\tif test \"x${READLINK}\" = \"xno\"; then\n\t\t\tAC_MSG_FAILURE([readlink, which is a kafka-tests dependency, not found])\n\t\tfi\n\tfi\nelse\n\tif test \"x$enable_kafka_tests\" = \"xyes\"; then\n\t\tAC_MSG_WARN([kafka-tests can not be enabled without omkafka and imkafka support. Disabling enable_kafka_tests...])\n\t\tenable_kafka_tests=\"no\"\n\tfi\nfi\nAM_CONDITIONAL(ENABLE_OMKAFKA, test x$enable_omkafka = xyes -o x$enable_omkafka = xoptional)\nAM_CONDITIONAL(ENABLE_IMKAFKA, test x$enable_imkafka = xyes -o x$enable_imkafka = xoptional)\n\n\n# omazureeventhubs support for output module\nAC_ARG_ENABLE(omazureeventhubs,\n        [AS_HELP_STRING([--enable-omazureeventhubs],[Compiles AzureEventHubs output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omazureeventhubs=\"yes\" ;;\n          no) enable_omazureeventhubs=\"no\" ;;\n         optional) enable_omazureeventhubs=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omazureeventhubs) ;;\n         esac],\n        [enable_omazureeventhubs=no]\n)\n\n# PROTON PROTOCOL SUPPORT for omazureeventhubs\n# uses qpid-proton library\nif test \"x$enable_omazureeventhubs\" = \"xyes\"; then\n        PKG_CHECK_MODULES(PROTON, libqpid-proton >= 0.13)\n        AC_SUBST(PROTON_CFLAGS)\n        AC_SUBST(PROTON_LIBS)\nfi\nif test \"x$enable_omazureeventhubs\" = \"xyes\"; then\n        PKG_CHECK_MODULES(PROTON_PROACTOR, libqpid-proton-proactor >= 0.13)\n        AC_SUBST(PROTON_PROACTOR_CFLAGS)\n        AC_SUBST(PROTON_PROACTOR_LIBS)\nfi\nAM_CONDITIONAL(ENABLE_OMAZUREEVENTHUBS, test x$enable_omazureeventhubs = xyes)\n# END PROTON\n\nif test \"x$enable_omazureeventhubs\" = \"xyes\"; then\n\tif test \"x$enable_omazure_tests\" = \"xyes\"; then\n\t\tAC_MSG_NOTICE([omazureveenthubs: TEST Suite enabled, requires Azure Environment variables!])\n\tfi\nelse\n\tif test \"x$enable_omazure_tests\" = \"xyes\"; then\n\t\tAC_MSG_WARN([Omazureeventhubs Tests can not be enabled omazureveenthubs support. Disabling enable_omazure_tests...])\n\t\tenable_omazure_tests=\"no\"\n\tfi\nfi\n\n# Static QPID-Proton support?\nAC_ARG_ENABLE(qpidproton_static,\n        [AS_HELP_STRING([--enable-qpidproton_static],[Enable static library linking for qpid-proton (required by omazureeventhubs module). Removes dependency for libqpid-proton*.so. @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_qpidproton_static=\"yes\" ;;\n          no) enable_qpidproton_static=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-qpidproton_static) ;;\n         esac],\n        [enable_qpidproton_static=no]\n)\nAM_CONDITIONAL(ENABLE_QPIDPROTON_STATIC, test x$enable_qpidproton_static = xyes)\n\n#MONGODB SUPPORT\nAC_ARG_ENABLE(ommongodb,\n        [AS_HELP_STRING([--enable-ommongodb],[Compiles ommongodb module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_ommongodb=\"yes\" ;;\n          no) enable_ommongodb=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-ommongodb) ;;\n         esac],\n        [enable_ommongodb=no]\n)\nif test \"x$enable_ommongodb\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(LIBMONGOC, libmongoc-1.0)\n    AC_CHECK_FUNCS(mongoc_client_set_ssl_opts,,)\n\nfi\nAM_CONDITIONAL(ENABLE_OMMONGODB, test x$enable_ommongodb = xyes)\n# end of mongodb code\n\n\n# BEGIN IMDTLS INPUT SUPPORT\nAC_ARG_ENABLE(imdtls,\n        [AS_HELP_STRING([--enable-imdtls],[Compiles DTLS syslog input module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imdtls=\"yes\" ;;\n          no) enable_imdtls=\"no\" ;;\n         optional) enable_imdtls=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imdtls) ;;\n         esac],\n        [enable_imdtls=no]\n)\nif test \"x$enable_imdtls\" = \"xyes\"; then\n        PKG_CHECK_MODULES(OPENSSL, openssl >= 1.1.0)\nfi\nAM_CONDITIONAL(ENABLE_IMDTLS, test x$enable_imdtls = xyes)\n# END IMDTLS INPUT\n\n# BEGIN OMDTLS INPUT SUPPORT\nAC_ARG_ENABLE(omdtls,\n        [AS_HELP_STRING([--enable-omdtls],[Compiles DTLS syslog output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omdtls=\"yes\" ;;\n          no) enable_omdtls=\"no\" ;;\n         optional) enable_omdtls=\"optional\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omdtls) ;;\n         esac],\n        [enable_omdtls=no]\n)\nif test \"x$enable_omdtls\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(OPENSSL, openssl >= 1.0.2)\nfi\nAM_CONDITIONAL(ENABLE_OMDTLS, test x$enable_omdtls = xyes)\n# END OMDTLS INPUT\n\n\n# BEGIN CZMQ INPUT SUPPORT\nAC_ARG_ENABLE(imczmq,\n        [AS_HELP_STRING([--enable-imczmq],[Compiles imczmq output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_imczmq=\"yes\" ;;\n          no) enable_imczmq=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-imczmq) ;;\n         esac],\n        [enable_imczmq=no]\n)\nif test \"x$enable_imczmq\" = \"xyes\"; then\n\tPKG_CHECK_MODULES(CZMQ, libczmq >= 4.0.0)\nfi\nAM_CONDITIONAL(ENABLE_IMCZMQ, test x$enable_imczmq = xyes)\n# END CZMQ INPUT\n\n\n# BEGIN CZMQ OUTPUT SUPPORT\nAC_ARG_ENABLE(omczmq,\n        [AS_HELP_STRING([--enable-omczmq],[Compiles omczmq output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omczmq=\"yes\" ;;\n          no) enable_omczmq=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omczmq) ;;\n         esac],\n        [enable_omczmq=no]\n)\nif test \"x$enable_omczmq\" = \"xyes\"; then\n   PKG_CHECK_MODULES(CZMQ, libczmq >= 4.0.0)\nfi\nAM_CONDITIONAL(ENABLE_OMCZMQ, test x$enable_omczmq = xyes)\n\n# END CZMQ SUPPORT\n\n\n# BEGIN RABBITMQ OUTPUT SUPPORT\n\nAC_ARG_ENABLE(omrabbitmq,\n        [AS_HELP_STRING([--enable-omrabbitmq],[Compiles omrabbitmq output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omrabbitmq=\"yes\" ;;\n          no) enable_omrabbitmq=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omrabbitmq) ;;\n         esac],\n        [enable_omrabbitmq=no]\n)\nif test \"x$enable_omrabbitmq\" = \"xyes\"; then\n        PKG_CHECK_MODULES(RABBITMQ, librabbitmq >= 0.2.0)\n        AC_SUBST(RABBITMQ_CFLAGS)\n        AC_SUBST(RABBITMQ_LIBS)\nfi\nAM_CONDITIONAL(ENABLE_OMRABBITMQ, test x$enable_omrabbitmq = xyes)\n\n# END RABBITMQ SUPPORT\n\n# HIREDIS SUPPORT\n\nAC_ARG_ENABLE(imhiredis,\n         [AS_HELP_STRING([--enable-imhiredis],[Compiles imhiredis input module @<:@default=no@:>@])],\n         [case \"${enableval}\" in\n          yes) enable_imhiredis=\"yes\" ;;\n           no) enable_imhiredis=\"no\" ;;\n          optional) enable_imhiredis=\"optional\" ;;\n            *) AC_MSG_ERROR(bad value ${enableval} for --enable-imhiredis) ;;\n          esac],\n         [enable_imhiredis=no]\n)\nAC_ARG_ENABLE(omhiredis,\n        [AS_HELP_STRING([--enable-omhiredis],[Compiles omhiredis template module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omhiredis=\"yes\" ;;\n          no) enable_omhiredis=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omhiredis) ;;\n         esac],\n        [enable_omhiredis=no]\n)\n\nAC_ARG_ENABLE(redis_tests,\n        [AS_HELP_STRING([--enable-redis-tests],[Enable redis tests, needs redis-server @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_redis_tests=\"yes\" ;;\n          no) enable_redis_tests=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-redis-tests) ;;\n         esac],\n        [enable_redis_tests=no]\n)\nAM_CONDITIONAL(ENABLE_REDIS_TESTS, test x$enable_redis_tests = xyes)\n\nif test \"x$enable_omhiredis\" = \"xyes\" -o \"x$enable_imhiredis\" = \"xyes\" ; then\n    PKG_CHECK_MODULES(HIREDIS, hiredis >= 0.10.1, [],\n        [AC_SEARCH_LIBS(redisConnectWithTimeout, hiredis,\n            [AC_COMPILE_IFELSE(\n                [AC_LANG_PROGRAM(\n                    [[ #include <hiredis/hiredis.h> ]],\n                    [[ #define major 0\n                       #define minor 10\n                       #define patch 1\n                       #if (( HIREDIS_MAJOR > major ) || \\\n                         (( HIREDIS_MAJOR == major ) && ( HIREDIS_MINOR > minor )) || \\\n                         (( HIREDIS_MAJOR == major ) && ( HIREDIS_MINOR == minor ) && ( HIREDIS_PATCH >= patch ))) \\\n                       /* OK */\n                       #else\n                       # error Hiredis version must be >= major.minor.path\n                       #endif\n                    ]]\n                )],\n                [],\n                [AC_MSG_ERROR([hiredis version must be >= 0.10.1])]\n            )],\n            [AC_MSG_ERROR([hiredis not found])]\n        )]\n    )\nfi\n\nif test \"x$enable_imhiredis\" = \"xyes\" ; then\n    PKG_CHECK_MODULES(LIBEVENT, [libevent >= 2.0, libevent_pthreads],\n        # libevent found\n        [\n            HIREDIS_LIBS=\"$HIREDIS_LIBS -levent -levent_pthreads\"\n        ],\n        # libevent not found\n        [AC_MSG_ERROR([no libevent >= 2.0 found with pthreads support, imhiredis cannot use pub/sub])])\nfi\n\nif test \"x$enable_imhiredis\" = \"xyes\" || test \"x$enable_omhiredis\" = \"xyes\"; then\n\tif test \"x$enable_redis_tests\" = \"xyes\"; then\n\t\tAC_CHECK_PROG(REDIS, [redis-server], [yes], [no])\n\t\tif test \"x${REDIS}\" = \"xno\"; then\n\t\t\tAC_MSG_FAILURE([redis-server, which is a redis-tests dependency, not found])\n\t\tfi\n\tfi\nelse\n\tif test \"x$enable_redis_tests\" = \"xyes\"; then\n\t\tAC_MSG_WARN([redis-tests can not be enabled without imhiredis or omhiredis support.\n                        Disabling enable_redis_tests...])\n\t\tenable_redis_tests=\"no\"\n\tfi\nfi\n\nAM_CONDITIONAL(ENABLE_OMHIREDIS, test x$enable_omhiredis = xyes)\nAM_CONDITIONAL(ENABLE_IMHIREDIS, test x$enable_imhiredis = xyes)\n\n# END HIREDIS SUPPORT\n\n\n# HTTPFS SUPPORT\n\nAC_ARG_ENABLE(omhttpfs,\n        [AS_HELP_STRING([--enable-omhttpfs],[Compiles omhttpfs template module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omhttpfs=\"yes\" ;;\n          no) enable_omhttpfs=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omhttpfs) ;;\n         esac],\n        [enable_omhttpfs=no]\n)\n\nif test \"x$enable_omhttpfs\" = \"xyes\"; then\n\tAC_CHECK_HEADERS([curl/curl.h])\n\tPKG_CHECK_MODULES([CURL], [libcurl])\n\tLT_LIB_M\n\t#PKG_CHECK_MODULES(HTTPFS, curl >= 7.0.0)\nfi\nAM_CONDITIONAL(ENABLE_OMHTTPFS, test x$enable_omhttpfs = xyes)\n\n# END HTTPFS SUPPORT\n\n# AMQP 1.0 PROTOCOL SUPPORT\n# uses the Proton protocol library\n\nAC_ARG_ENABLE(omamqp1,\n        [AS_HELP_STRING([--enable-omamqp1],[Compiles omamqp1 output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omamqp1=\"yes\" ;;\n          no) enable_omamqp1=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omamqp1) ;;\n         esac],\n        [enable_omamqp1=no]\n)\nif test \"x$enable_omamqp1\" = \"xyes\"; then\n        PKG_CHECK_MODULES(PROTON, libqpid-proton >= 0.9)\n        AC_SUBST(PROTON_CFLAGS)\n        AC_SUBST(PROTON_LIBS)\nfi\nAM_CONDITIONAL(ENABLE_OMAMQP1, test x$enable_omamqp1 = xyes)\n\n# END AMQP 1.0 PROTOCOL SUPPORT\n\n# TCL SUPPORT\n\nAC_ARG_ENABLE(omtcl,\n        [AS_HELP_STRING([--enable-omtcl],[Compiles omtcl output module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_omtcl=\"yes\" ;;\n          no) enable_omtcl=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-omtcl) ;;\n         esac],\n        [enable_omtcl=no]\n)\n\nif test \"x$enable_omtcl\" = \"xyes\"; then\n\tSC_PATH_TCLCONFIG\n\tSC_LOAD_TCLCONFIG\n\tAC_SUBST(TCL_INCLUDE_SPEC)\nfi\nAM_CONDITIONAL(ENABLE_OMTCL, test x$enable_omtcl = xyes)\n\n# END TCL SUPPORT\n\n# mmkubernetes - Kubernetes metadata support\n\nAC_ARG_ENABLE(mmkubernetes,\n        [AS_HELP_STRING([--enable-mmkubernetes],\n            [Enable compilation of the mmkubernetes module @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmkubernetes=\"yes\" ;;\n          no) enable_mmkubernetes=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmkubernetes) ;;\n         esac],\n        [enable_mmkubernetes=no]\n)\nif test \"x$enable_mmkubernetes\" = \"xyes\"; then\n        PKG_CHECK_MODULES([CURL], [libcurl])\n        PKG_CHECK_MODULES(LIBLOGNORM, lognorm >= 2.0.3)\n\n        save_CFLAGS=\"$CFLAGS\"\n        save_LIBS=\"$LIBS\"\n\n        CFLAGS=\"$CFLAGS $LIBLOGNORM_CFLAGS\"\n        LIBS=\"$LIBS $LIBLOGNORM_LIBS\"\n\n        AC_CHECK_FUNC([ln_loadSamplesFromString],\n                      [AC_DEFINE([HAVE_LOADSAMPLESFROMSTRING], [1], [Define if ln_loadSamplesFromString exists.])],\n                      [AC_DEFINE([NO_LOADSAMPLESFROMSTRING], [1], [Define if ln_loadSamplesFromString does not exist.])])\n\n        CFLAGS=\"$save_CFLAGS\"\n        LIBS=\"$save_LIBS\"\nfi\nAM_CONDITIONAL(ENABLE_MMKUBERNETES, test x$enable_mmkubernetes = xyes)\n\n# END Kubernetes metadata support\n\n\n# mmtaghostname\nAC_ARG_ENABLE(mmtaghostname,\n        [AS_HELP_STRING([--enable-mmtaghostname],[Enable Tag and Hostname messages' modifier @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_mmtaghostname=\"yes\" ;;\n          no) enable_mmtaghostname=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-mmtaghostname) ;;\n         esac],\n        [enable_mmtaghostname=no]\n)\nAM_CONDITIONAL(ENABLE_MMTAGHOSTNAME, test x$enable_mmtaghostname = xyes)\n#END mmtaghostname\n\n# man pages\nhave_to_generate_man_pages=\"no\"\ngit_src_have_to_generate_man_pages=\"yes\" # default to use when building from git source\nAC_ARG_ENABLE(generate-man-pages,\n        [AS_HELP_STRING([--enable-generate-man-pages],[Generate man pages from source @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) have_to_generate_man_pages=\"yes\" ;;\n          no) have_to_generate_man_pages=\"no\" ;\n              git_src_have_to_generate_man_pages=\"no\"\n\t      ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-generate-man-pages) ;;\n         esac],\n        [have_to_generate_man_pages=no]\n)\n\n\n# This provides a work-around to use \"make distcheck\" without\n# running tests (mode used pre 2018-07-02)\nAC_ARG_ENABLE(distcheck-workaround,\n        [AS_HELP_STRING([--enable-distcheck-workaround],[enable to use make distcheck without runing testbench inside it @<:@default=no@:>@])],\n        [case \"${enableval}\" in\n         yes) enable_distcheck_workaround=\"yes\" ;;\n          no) enable_distcheck_workaround=\"no\" ;;\n           *) AC_MSG_ERROR(bad value ${enableval} for --enable-distcheck_workaround) ;;\n         esac],\n        [enable_distcheck_workaround=\"no\"]\n)\nAM_CONDITIONAL(ENABLE_DISTCHECK_WORKAROUND, test x$enable_distcheck_workaround = xyes)\n\n\nif test \"x$in_git_src\" = \"xyes\"; then\n        AC_MSG_NOTICE([Running from git source])\n\n        have_to_generate_man_pages=$git_src_have_to_generate_man_pages\n\n        if test \"x$LEX\" != \"xflex\"; then\n                AC_MSG_ERROR([flex program is needed to build rsyslog, please install flex.])\n        fi\n\n        if test \"x$YACC\" = \"xyacc\"; then\n                # AC_PROG_YACC only checks for yacc replacements, not for yacc itself\n                AC_CHECK_PROG([YACC_FOUND], [yacc], [yes], [no])\n                if test \"x$YACC_FOUND\" = \"xno\"; then\n                        AC_MSG_ERROR([A yacc program is needed to build rsyslog, please install bison.])\n                fi\n        fi\nelse\n        AC_MSG_NOTICE([Not running from git source])\nfi\n\nAM_CONDITIONAL(ENABLE_GENERATE_MAN_PAGES, test x$have_to_generate_man_pages = xyes)\n\n# rst2man\nAC_CHECK_PROGS([RST2MAN], [rst2man rst2man.py], [false])\nif test \"x$have_to_generate_man_pages\" = \"xyes\" && test \"x$RST2MAN\" = \"xfalse\"; then\n        AC_MSG_ERROR([rst2man is required when building from git source or --enable-generate-man-pages option was set, please install python-docutils.])\nfi\n\n\nAC_CONFIG_FILES([Makefile \\\n\t\truntime/Makefile \\\n\t\tcompat/Makefile \\\n\t\tgrammar/Makefile \\\n\t\ttools/Makefile \\\n\t\tplugins/imudp/Makefile \\\n\t\tplugins/imtcp/Makefile \\\n\t\tplugins/im3195/Makefile \\\n\t\tplugins/imgssapi/Makefile \\\n\t\tplugins/imuxsock/Makefile \\\n\t\tplugins/imjournal/Makefile \\\n\t\tplugins/immark/Makefile \\\n\t\tplugins/imklog/Makefile \\\n\t\tplugins/omhdfs/Makefile \\\n\t\tplugins/omkafka/Makefile \\\n\t\tplugins/omprog/Makefile \\\n\t\tplugins/mmexternal/Makefile \\\n\t\tplugins/omstdout/Makefile \\\n\t\tplugins/omjournal/Makefile \\\n\t\tplugins/pmciscoios/Makefile \\\n\t\tplugins/pmnull/Makefile \\\n\t\tplugins/pmnormalize/Makefile \\\n\t\tplugins/omruleset/Makefile \\\n\t\tplugins/omuxsock/Makefile \\\n\t\tplugins/imfile/Makefile \\\n\t\tplugins/imsolaris/Makefile \\\n\t\tplugins/imptcp/Makefile \\\n\t\tplugins/impstats/Makefile \\\n\t\tplugins/imrelp/Makefile \\\n\t\tplugins/imdiag/Makefile \\\n\t\tplugins/imkafka/Makefile \\\n\t\tplugins/omtesting/Makefile \\\n\t\tplugins/omgssapi/Makefile \\\n\t\tplugins/ommysql/Makefile \\\n\t\tplugins/ompgsql/Makefile \\\n\t\tplugins/omrelp/Makefile \\\n\t\tplugins/omlibdbi/Makefile \\\n\t\tplugins/ommail/Makefile \\\n\t\tplugins/fmhttp/Makefile \\\n\t\tplugins/omsnmp/Makefile \\\n\t\tplugins/omudpspoof/Makefile \\\n\t\tplugins/ommongodb/Makefile \\\n\t\tplugins/mmnormalize/Makefile \\\n\t\tplugins/mmjsonparse/Makefile \\\n\t\tplugins/mmaudit/Makefile \\\n\t\tplugins/mmanon/Makefile \\\n\t\tplugins/mmrm1stspace/Makefile \\\n\t\tplugins/mmutf8fix/Makefile \\\n\t\tplugins/mmfields/Makefile \\\n\t\tplugins/mmpstrucdata/Makefile \\\n\t\tplugins/omelasticsearch/Makefile \\\n\t\tplugins/omclickhouse/Makefile \\\n\t\tplugins/mmsnmptrapd/Makefile \\\n\t\tplugins/pmlastmsg/Makefile \\\n\t\tplugins/mmdblookup/Makefile \\\n\t\tplugins/omazureeventhubs/Makefile \\\n\t\tplugins/imdtls/Makefile \\\n\t\tplugins/omdtls/Makefile \\\n\t\tcontrib/mmdarwin/Makefile \\\n\t\tcontrib/omhttp/Makefile \\\n\t\tcontrib/fmhash/Makefile \\\n\t\tcontrib/fmunflatten/Makefile \\\n\t\tcontrib/ffaup/Makefile \\\n\t\tcontrib/pmsnare/Makefile \\\n\t\tcontrib/pmpanngfw/Makefile \\\n\t\tcontrib/pmaixforwardedfrom/Makefile \\\n\t\tcontrib/omhiredis/Makefile \\\n\t\tcontrib/omrabbitmq/Makefile \\\n\t\tcontrib/imkmsg/Makefile \\\n\t\tcontrib/mmgrok/Makefile \\\n\t\tcontrib/mmcount/Makefile \\\n\t\tcontrib/omczmq/Makefile \\\n\t\tcontrib/imczmq/Makefile \\\n\t\tcontrib/mmsequence/Makefile \\\n\t\tcontrib/mmrfc5424addhmac/Makefile \\\n\t\tcontrib/pmcisconames/Makefile \\\n\t\tcontrib/omhttpfs/Makefile \\\n\t\tcontrib/omamqp1/Makefile \\\n\t\tcontrib/omtcl/Makefile \\\n\t\tcontrib/imbatchreport/Makefile \\\n\t\tcontrib/omfile-hardened/Makefile \\\n\t\tcontrib/mmkubernetes/Makefile \\\n\t\tcontrib/impcap/Makefile \\\n\t\tcontrib/imtuxedoulog/Makefile \\\n\t\tcontrib/improg/Makefile \\\n\t\tcontrib/imhttp/Makefile \\\n\t\tcontrib/mmtaghostname/Makefile \\\n\t\tcontrib/imdocker/Makefile \\\n\t\tcontrib/pmdb2diag/Makefile \\\n\t\tcontrib/imhiredis/Makefile \\\n\t\ttests/set-envvars \\\n\t\ttests/Makefile])\nAC_OUTPUT\n\necho \"****************************************************\"\necho \"rsyslog will be compiled with the following settings:\"\necho\necho \"    Large file support enabled:               $enable_largefile\"\necho \"    Networking support enabled:               $enable_inet\"\necho \"    Regular expressions support enabled:      $enable_regexp\"\necho \"    rsyslog runtime will be built:            $enable_rsyslogrt\"\necho \"    rsyslogd will be built:                   $enable_rsyslogd\"\necho \"    have to generate man pages:               $have_to_generate_man_pages\"\necho \"    Unlimited select() support enabled:       $enable_unlimited_select\"\necho \"    uuid support enabled:                     $enable_uuid\"\necho \"    Log file signing support via KSI LS12:    $enable_ksi_ls12\"\necho \"    Log file gcry encryption support:         $enable_libgcrypt\"\necho \"    Log file ossl encryption support:         $enable_openssl_crypto_provider\"\necho \"    Log file compression via zstd support:    $enable_libzstd\"\necho \"    anonymization support enabled:            $enable_mmanon\"\necho \"    message counting support enabled:         $enable_mmcount\"\necho \"    liblogging-stdlog support enabled:        $enable_liblogging_stdlog\"\necho \"    libsystemd enabled:                       $enable_libsystemd\"\necho \"    kafka static linking enabled:             $enable_kafka_static\"\necho \"    qpid proton static linking enabled:       $enable_qpidproton_static\"\necho \"    atomic operations enabled:                $enable_atomic_operations\"\necho \"    libcap-ng support enabled:                $enable_libcapng\"\n\necho\necho \"---{ input plugins }---\"\nif test \"$unamestr\" != \"AIX\"; then\necho \"    Klog functionality enabled:               $enable_klog ($os_type)\"\nfi\necho \"    /dev/kmsg functionality enabled:          $enable_kmsg\"\necho \"    plain tcp input module enabled:           $enable_imptcp\"\necho \"    DTLS udp input module enabled:            $enable_imdtls\"\necho \"    imdiag enabled:                           $enable_imdiag\"\necho \"    file input module enabled:                $enable_imfile\"\necho \"    docker log input module enabled:          $enable_imdocker\"\necho \"    Solaris input module enabled:             $enable_imsolaris\"\necho \"    periodic statistics module enabled:       $enable_impstats\"\necho \"    imczmq input module enabled:              $enable_imczmq\"\necho \"    imjournal input module enabled:           $enable_imjournal\"\nif test \"$enable_imjournal\" = \"optional\"; then\necho \"        imjournal use dummy:                  $imjournal_use_dummy\"\nfi\necho \"    imbatchreport input module enabled:       $enable_imbatchreport\"\necho \"    imkafka module will be compiled:          $enable_imkafka\"\nif test \"$enable_imkafka\" = \"optional\"; then\necho \"        imkafka use dummy:                    $imkafka_use_dummy\"\nfi\necho \"    impcap input module enabled:              $enable_impcap\"\necho \"    imtuxedoulog module will be compiled:     $enable_imtuxedoulog\"\necho \"    improg input module enabled:              $enable_improg\"\necho \"    imhttp input module enabled:              $enable_imhttp\"\necho \"    imhiredis input module enabled:           $enable_imhiredis\"\necho\necho \"---{ output plugins }---\"\necho \"    Mail support enabled:                     $enable_mail\"\necho \"    omfile-hardened module will be compiled:  $enable_omfile_hardened\"\necho \"    omprog module will be compiled:           $enable_omprog\"\necho \"    omstdout module will be compiled:         $enable_omstdout\"\necho \"    omjournal module will be compiled:        $enable_omjournal\"\necho \"    omhdfs module will be compiled:           $enable_omhdfs\"\necho \"    omelasticsearch module will be compiled:  $enable_elasticsearch\"\necho \"    omclickhouse module will be compiled:     $enable_clickhouse\"\necho \"    omhttp module will be compiled:           $enable_omhttp\"\necho \"    omruleset module will be compiled:        $enable_omruleset\"\necho \"    omudpspoof module will be compiled:       $enable_omudpspoof\"\necho \"    omuxsock module will be compiled:         $enable_omuxsock\"\necho \"    omczmq module will be compiled:           $enable_omczmq\"\necho \"    omrabbitmq module will be compiled:       $enable_omrabbitmq\"\necho \"    omhttpfs module will be compiled:         $enable_omhttpfs\"\necho \"    omamqp1 module will be compiled:          $enable_omamqp1\"\necho \"    omtcl module will be compiled:            $enable_omtcl\"\necho \"    omkafka module will be compiled:          $enable_omkafka\"\necho \"    omhiredis module will be compiled:        $enable_omhiredis\"\necho \"    omazureeventhubs module will be compiled: $enable_omazureeventhubs\"\necho \"    omdtls module will be compiled:           $enable_omdtls\"\necho\necho \"---{ parser modules }---\"\necho \"    pmlastmsg module will be compiled:        $enable_pmlastmsg\"\necho \"    pmcisconames module will be compiled:     $enable_pmcisconames\"\necho \"    pmciscoios module will be compiled:       $enable_pmciscoios\"\necho \"    pmnull module will be compiled:           $enable_pmnull\"\necho \"    pmnormalize module will be compiled:      $enable_pmnormalize\"\necho \"    pmaixforwardedfrom module w.be compiled:  $enable_pmaixforwardedfrom\"\necho \"    pmsnare module will be compiled:          $enable_pmsnare\"\necho \"    pmdb2diag module will be compiled:        $enable_pmdb2diag\"\necho \"    pmpanngfw module will be compiled:        $enable_pmpanngfw\"\necho\necho \"---{ message modification modules }---\"\necho \"    mmnormalize module will be compiled:      $enable_mmnormalize\"\necho \"    mmjsonparse module will be compiled:      $enable_mmjsonparse\"\necho \"    mmgrok module will be compiled:           $enable_mmgrok\"\necho \"    mmjaduit module will be compiled:         $enable_mmaudit\"\necho \"    mmsnmptrapd module will be compiled:      $enable_mmsnmptrapd\"\necho \"    mmutf8fix enabled:                        $enable_mmutf8fix\"\necho \"    mmrfc5424addhmac enabled:                 $enable_mmrfc5424addhmac\"\necho \"    mmpstrucdata enabled:                     $enable_mmpstrucdata\"\necho \"    mmsequence enabled:                       $enable_mmsequence\"\necho \"    mmdblookup enabled:                       $enable_mmdblookup\"\necho \"    mmdarwin enabled:                         $enable_mmdarwin\"\necho \"    mmfields enabled:                         $enable_mmfields\"\necho \"    mmrm1stspace module enabled:              $enable_mmrm1stspace\"\necho \"    mmkubernetes enabled:                     $enable_mmkubernetes\"\necho \"    mmtaghostname enabled:                    $enable_mmtaghostname\"\necho\necho \"---{ database support }---\"\necho \"    MySql support enabled:                    $enable_mysql\"\necho \"    libdbi support enabled:                   $enable_libdbi\"\nif test \"$enable_libdbi\" = \"optional\"; then\necho \"        libdbi use dummy:                     $libdbi_use_dummy\"\nfi\necho \"    PostgreSQL support enabled:               $enable_pgsql\"\necho \"    mongodb support enabled:                  $enable_ommongodb\"\necho \"    hiredis support enabled:                  $enable_omhiredis\"\necho\necho \"---{ protocol support }---\"\necho \"    openssl network stream driver enabled:    $enable_openssl\"\necho \"    GnuTLS network stream driver enabled:     $enable_gnutls\"\necho \"    GSSAPI Kerberos 5 support enabled:        $enable_gssapi_krb5\"\necho \"    RELP support enabled:                     $enable_relp\"\necho \"    SNMP support enabled:                     $enable_snmp\"\necho\necho \"---{ function modules }---\"\necho \"    fmhttp enabled:                           $enable_fmhttp\"\necho \"    fmhash enabled:                           $enable_fmhash\"\necho \"    fmhash with xxhash enabled:               $enable_fmhash_xxhash\"\necho \"    fmunflatten enabled:                      $enable_fmunflatten\"\necho \"    ffaup enabled:                            $enable_ffaup\"\necho\necho \"---{ debugging support }---\"\necho \"    distcheck workaround enabled:             $enable_distcheck_workaround\"\necho \"    Testbench enabled:                        $enable_testbench\"\necho \"    valgrind tests enabled:                   $with_valgrind_testbench\"\necho \"    valgrind helgrind tests enabled:          $enable_helgrind\"\necho \"    Default tests enabled:                    $enable_default_tests\"\necho \"    Testbench libfaketime tests enabled:      $enable_libfaketime\"\necho \"    Extended Testbench enabled:               $enable_extended_tests\"\necho \"    MySQL Tests enabled:                      $enable_mysql_tests\"\necho \"    Elasticsearch Tests:                      $enable_elasticsearch_tests\"\necho \"    ClickHouse Tests:                         $enable_clickhouse_tests\"\necho \"    PostgreSQL Tests enabled:                 $enable_pgsql_tests\"\necho \"    Kafka Tests enabled:                      $enable_kafka_tests\"\necho \"    Redis Tests enabled:                      $enable_redis_tests\"\necho \"    Omazureeventhubs Tests enabled:           $enable_omazureeventhubs_tests\"\necho \"    Imdocker Tests enabled:                   $enable_imdocker_tests\"\necho \"    gnutls tests enabled:                     $enable_gnutls_tests\"\necho \"    imfile tests enabled:                     $enable_imfile_tests\"\necho \"    systemd journal tests enabled:            $enable_journal_tests\"\necho \"    SNMP Tests enabled:                       $enable_snmp_tests\"\necho \"    Debug mode enabled:                       $enable_debug\"\necho \"    (total) debugless mode enabled:           $enable_debugless\"\necho \"    Diagnostic tools enabled:                 $enable_diagtools\"\necho \"    End-User tools enabled:                   $enable_usertools\"\necho \"    Valgrind support settings enabled:        $enable_valgrind\"\necho\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "devtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "dirty.h",
          "type": "blob",
          "size": 2.2060546875,
          "content": "/* This file is an aid to support non-modular object accesses\n * while we do not have fully modularized everything. Once this is\n * done, this file can (and should) be deleted. Presence of it\n * also somewhat indicates that the runtime library is not really\n * yet a runtime library, because it depends on some functionality\n * residing somewhere else.\n *\n * Copyright 2007-2023 Rainer Gerhards and Adiscon GmbH.\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#ifndef\tDIRTY_H_INCLUDED\n#define\tDIRTY_H_INCLUDED 1\n\nrsRetVal __attribute__((deprecated)) multiSubmitMsg(multi_submit_t *pMultiSub);\nrsRetVal ATTR_NONNULL() multiSubmitMsg2(multi_submit_t *const pMultiSub); /* friends only! */\nrsRetVal submitMsg2(smsg_t *pMsg);\nrsRetVal __attribute__((deprecated)) submitMsg(smsg_t *pMsg);\nrsRetVal multiSubmitFlush(multi_submit_t *pMultiSub);\nrsRetVal logmsgInternal(const int iErr, const syslog_pri_t pri, const uchar *const msg, int flags);\nrsRetVal __attribute__((deprecated)) parseAndSubmitMessage(const uchar *hname,\n\tconst uchar *hnameIP, const uchar *msg, const int len,\n\tconst int flags, const flowControl_t flowCtlType,\n\tprop_t *pInputName, const struct syslogTime *stTime,\n\tconst time_t ttGenTime, ruleset_t *pRuleset);\nrsRetVal createMainQueue(qqueue_t **ppQueue, uchar *pszQueueName, struct nvlst *lst);\nrsRetVal startMainQueue(rsconf_t *cnf, qqueue_t *pQueue);\nint get_bHadHUP(void);\n\nextern int MarkInterval;\n#define CONF_VERIFY_PARTIAL_CONF 0x02\t\t/* bit: partial configuration to be checked */\nextern int iConfigVerify;\t\t\t/* is this just a config verify run? */\nextern int bHaveMainQueue;\n\n#endif /* #ifndef DIRTY_H_INCLUDED */\n"
        },
        {
          "name": "grammar",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "outchannel.c",
          "type": "blob",
          "size": 6.8818359375,
          "content": "/* This is the output channel processing code of rsyslog.\n * Output channels - in the long term - will define how\n * messages will be sent to whatever file or other medium.\n * Currently, they mainly provide a way to store some file-related\n * information (most importantly the maximum file size allowed).\n * Please see syslogd.c for license information.\n * begun 2005-06-21 rgerhards\n *\n * Copyright (C) 2005-2016 Adiscon GmbH\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include \"config.h\"\n\n#include \"rsyslog.h\"\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include \"stringbuf.h\"\n#include \"outchannel.h\"\n#include \"rsconf.h\"\n#include \"debug.h\"\n\n/* Constructs a outchannel list object. Returns pointer to it\n * or NULL (if it fails).\n */\nstruct outchannel* ochConstruct(void)\n{\n\tstruct outchannel *pOch;\n\tif((pOch = calloc(1, sizeof(struct outchannel))) == NULL)\n\t\treturn NULL;\n\t\n\t/* basic initialisaion is done via calloc() - need to\n\t * initialize only values != 0. */\n\n\tif(loadConf->och.ochLast == NULL)\n\t{ /* we are the first element! */\n\t\tloadConf->och.ochRoot = loadConf->och.ochLast = pOch;\n\t}\n\telse\n\t{\n\t\tloadConf->och.ochLast->pNext = pOch;\n\t\tloadConf->och.ochLast = pOch;\n\t}\n\n\treturn(pOch);\n}\n\n\n/* skips the next comma and any whitespace\n * in front and after it.\n */\nstatic void skip_Comma(char **pp)\n{\n\tregister char *p;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\n\tp = *pp;\n\twhile(isspace((int)*p))\n\t\t++p;\n\tif(*p == ',')\n\t\t++p;\n\twhile(isspace((int)*p))\n\t\t++p;\n\t*pp = p;\n}\n\n/* helper to ochAddLine. Parses a comma-delimited field\n * The field is delimited by SP or comma. Leading whitespace\n * is \"eaten\" and does not become part of the field content.\n */\nstatic rsRetVal get_Field(uchar **pp, uchar **pField)\n{\n\tDEFiRet;\n\tregister uchar *p;\n\tcstr_t *pStrB = NULL;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\tassert(pField != NULL);\n\n\tskip_Comma((char**)pp);\n\tp = *pp;\n\n\tCHKiRet(cstrConstruct(&pStrB));\n\n\t/* copy the field */\n\twhile(*p && *p != ' ' && *p != ',') {\n\t\tCHKiRet(cstrAppendChar(pStrB, *p++));\n\t}\n\n\t*pp = p;\n\tcstrFinalize(pStrB);\n\tCHKiRet(cstrConvSzStrAndDestruct(&pStrB, pField, 0));\n\nfinalize_it:\n\tif(iRet != RS_RET_OK) {\n\t\tif(pStrB != NULL)\n\t\t\tcstrDestruct(&pStrB);\n\t}\n\n\tRETiRet;\n}\n\n\n/* helper to ochAddLine. Parses a off_t type from the\n * input line.\n * returns: 0 - ok, 1 - failure\n */\nstatic int get_off_t(uchar **pp, off_t *pOff_t)\n{\n\tregister uchar *p;\n\toff_t val;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\tassert(pOff_t != NULL);\n\n\tskip_Comma((char**)pp);\n\tp = *pp;\n\n\tval = 0;\n\twhile(*p && isdigit((int)*p)) {\n\t\tval = val * 10 + (*p - '0');\n\t\t++p;\n\t}\n\n\t*pp = p;\n\t*pOff_t = val;\n\n\treturn 0;\n}\n\n\n/* helper to ochAddLine. Parses everything from the\n * current position to the end of line and returns it\n * to the caller. Leading white space is removed, but\n * not trailing.\n */\nstatic rsRetVal get_restOfLine(uchar **pp, uchar **pBuf)\n{\n\tDEFiRet;\n\tregister uchar *p;\n\tcstr_t *pStrB = NULL;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\tassert(pBuf != NULL);\n\n\tskip_Comma((char**)pp);\n\tp = *pp;\n\n\tCHKiRet(cstrConstruct(&pStrB));\n\n\t/* copy the field */\n\twhile(*p) {\n\t\tCHKiRet(cstrAppendChar(pStrB, *p++));\n\t}\n\n\t*pp = p;\n\tcstrFinalize(pStrB);\n\tCHKiRet(cstrConvSzStrAndDestruct(&pStrB, pBuf, 0));\n\nfinalize_it:\n\tif(iRet != RS_RET_OK) {\n\t\tif(pStrB != NULL)\n\t\t\tcstrDestruct(&pStrB);\n\t}\n\n\tRETiRet;\n}\n\n\n/* Add a new outchannel line\n * returns pointer to new object if it succeeds, NULL otherwise.\n * An outchannel line is primarily a set of fields delemited by commas.\n * There might be some whitespace between the field (but not within)\n * and the commas. This can be removed.\n */\nstruct outchannel *ochAddLine(char* pName, uchar** ppRestOfConfLine)\n{\n\tstruct outchannel *pOch;\n\tuchar *p;\n\n\tassert(pName != NULL);\n\tassert(ppRestOfConfLine != NULL);\n\n\tif((pOch = ochConstruct()) == NULL)\n\t\treturn NULL;\n\t\n\tpOch->iLenName = strlen(pName);\n\tpOch->pszName = (char*) malloc(pOch->iLenName + 1);\n\tif(pOch->pszName == NULL) {\n\t\tdbgprintf(\"ochAddLine could not alloc memory for outchannel name!\");\n\t\tpOch->iLenName = 0;\n\t\treturn NULL;\n\t\t/* I know - we create a memory leak here - but I deem\n\t\t * it acceptable as it is a) a very small leak b) very\n\t\t * unlikely to happen. rgerhards 2004-11-17\n\t\t */\n\t}\n\tmemcpy(pOch->pszName, pName, pOch->iLenName + 1);\n\n\t/* now actually parse the line */\n\tp = *ppRestOfConfLine;\n\tassert(p != NULL);\n\n\t/* get params */\n\tget_Field(&p, &pOch->pszFileTemplate);\n\tif(*p) get_off_t(&p, &pOch->uSizeLimit);\n\tif(*p) get_restOfLine(&p, &pOch->cmdOnSizeLimit);\n\n\t*ppRestOfConfLine = p;\n\treturn(pOch);\n}\n\n\n/* Find a outchannel object based on name. Search\n * currently is case-sensitive (should we change?).\n * returns pointer to outchannel object if found and\n * NULL otherwise.\n * rgerhards 2004-11-17\n */\nstruct outchannel *ochFind(char *pName, int iLenName)\n{\n\tstruct outchannel *pOch;\n\n\tassert(pName != NULL);\n\n\tpOch = loadConf->och.ochRoot;\n\twhile(pOch != NULL &&\n\t      !(pOch->iLenName == iLenName &&\n\t        !strcmp(pOch->pszName, pName)\n\t        ))\n\t\t{\n\t\t\tpOch = pOch->pNext;\n\t\t}\n\treturn(pOch);\n}\n\n/* Destroy the outchannel structure. This is for de-initialization\n * at program end. Everything is deleted.\n * rgerhards 2005-02-22\n */\nvoid ochDeleteAll(void)\n{\n\tstruct outchannel *pOch, *pOchDel;\n\n\tpOch = runConf->och.ochRoot;\n\twhile(pOch != NULL) {\n\t\tdbgprintf(\"Delete Outchannel: Name='%s'\\n \", pOch->pszName == NULL? \"NULL\" : pOch->pszName);\n\t\tpOchDel = pOch;\n\t\tpOch = pOch->pNext;\n\t\tif(pOchDel->pszName != NULL)\n\t\t\tfree(pOchDel->pszName);\n\t\tif(pOchDel->pszFileTemplate != NULL)\n\t\t\tfree(pOchDel->pszFileTemplate);\n\t\tif(pOchDel->cmdOnSizeLimit != NULL)\n\t\t\tfree(pOchDel->cmdOnSizeLimit);\n\t\tfree(pOchDel);\n\t}\n}\n\n\n/* Print the outchannel structure. This is more or less a\n * debug or test aid, but anyhow I think it's worth it...\n */\nvoid ochPrintList(rsconf_t *cnf)\n{\n\tstruct outchannel *pOch;\n\n\tpOch = cnf->och.ochRoot;\n\twhile(pOch != NULL) {\n\t\tdbgprintf(\"Outchannel: Name='%s'\\n\", pOch->pszName == NULL? \"NULL\" : pOch->pszName);\n\t\tdbgprintf(\"\\tFile Template: '%s'\\n\", pOch->pszFileTemplate == NULL ? \"NULL\" :\n\t\t\t(char*) pOch->pszFileTemplate);\n\t\tdbgprintf(\"\\tMax Size.....: %lu\\n\", (long unsigned) pOch->uSizeLimit);\n\t\tdbgprintf(\"\\tOnSizeLimtCmd: '%s'\\n\", pOch->cmdOnSizeLimit == NULL ? \"NULL\" :\n\t\t\t(char*) pOch->cmdOnSizeLimit);\n\t\tpOch = pOch->pNext; /* done, go next */\n\t}\n}\n/* vi:set ai:\n */\n"
        },
        {
          "name": "outchannel.h",
          "type": "blob",
          "size": 1.2275390625,
          "content": "/* This is the header for the output channel code of rsyslog.\n * begun 2005-06-21 rgerhards\n *\n * Copyright(C) 2005-2012 Adiscon GmbH\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#ifndef OUTCHANNEL_H\n#define OUTCHANNEL_H\nstruct outchannel {\n\tstruct outchannel *pNext;\n\tchar *pszName;\n\tint iLenName;\n\tuchar *pszFileTemplate;\n\toff_t\tuSizeLimit;\n\tuchar *cmdOnSizeLimit;\n};\n\nstruct outchannel* ochConstruct(void);\nstruct outchannel *ochAddLine(char* pName, unsigned char** pRestOfConfLine);\nstruct outchannel *ochFind(char *pName, int iLenName);\nvoid ochDeleteAll(void);\nvoid ochPrintList(rsconf_t *cnf);\n#endif /* #ifdef OUTCHANNEL_H */\n"
        },
        {
          "name": "parse.c",
          "type": "blob",
          "size": 13.3271484375,
          "content": "/* parsing routines for the counted string class. for generic\n * informaton see parse.h.\n *\n * begun 2005-09-15 rgerhards\n *\n * Copyright 2005-2017 Adiscon GmbH.\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include \"config.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <ctype.h>\n#include <arpa/inet.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include \"rsyslog.h\"\n#include \"net.h\" /* struct NetAddr */\n#include \"parse.h\"\n#include \"debug.h\"\n\n/* ################################################################# *\n * private members                                                   *\n * ################################################################# */\n\n\n\n/* ################################################################# *\n * public members                                                    *\n * ################################################################# */\n\n\n/**\n * Destruct a rsPars object and its associated string.\n * rgerhards, 2005-09-26\n */\nrsRetVal rsParsDestruct(rsParsObj *pThis)\n{\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\n\tif(pThis->pCStr != NULL)\n\t\trsCStrDestruct(&pThis->pCStr);\n\tRSFREEOBJ(pThis);\n\treturn RS_RET_OK;\n}\n\n\n/**\n * Construct a rsPars object.\n */\nrsRetVal rsParsConstruct(rsParsObj **ppThis)\n{\n\trsParsObj *pThis;\n\n\tassert(ppThis != NULL);\n\n\tif((pThis = (rsParsObj*) calloc(1, sizeof(rsParsObj))) == NULL)\n\t\treturn RS_RET_OUT_OF_MEMORY;\n\n\trsSETOBJTYPE(pThis, OIDrsPars);\n\n\t*ppThis = pThis;\n\treturn RS_RET_OK;\n}\n\n/**\n * Construct a rsPars object and populate it with a\n * classical zero-terinated C-String.\n * rgerhards, 2005-09-27\n */\nrsRetVal rsParsConstructFromSz(rsParsObj **ppThis, unsigned char *psz)\n{\n\tDEFiRet;\n\trsParsObj *pThis;\n\tcstr_t *pCS;\n\n\tassert(ppThis != NULL);\n\tassert(psz != NULL);\n\n\t/* create string for parser */\n\tCHKiRet(rsCStrConstructFromszStr(&pCS, psz));\n\n\t/* create parser */\n\tif((iRet = rsParsConstruct(&pThis)) != RS_RET_OK) {\n\t\trsCStrDestruct(&pCS);\n\t\tFINALIZE;\n\t}\n\n\t/* assign string to parser */\n\tif((iRet = rsParsAssignString(pThis, pCS)) != RS_RET_OK) {\n\t\trsParsDestruct(pThis);\n\t\tFINALIZE;\n\t}\n\t*ppThis = pThis;\n\nfinalize_it:\n\tRETiRet;\n}\n\n/**\n * Assign the to-be-parsed string.\n */\nrsRetVal rsParsAssignString(rsParsObj *pThis, cstr_t *pCStr)\n{\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\trsCHECKVALIDOBJECT(pCStr, OIDrsCStr);\n\t\n\tpThis->pCStr = pCStr;\n\tpThis->iCurrPos = 0;\n\n\treturn RS_RET_OK;\n}\n\n/* parse an integer. The parse pointer is advanced to the\n * position directly after the last digit. If no digit is\n * found at all, an error is returned and the parse pointer\n * is NOT advanced.\n * PORTABILITY WARNING: this function depends on the\n * continues representation of digits inside the character\n * set (as in ASCII).\n * rgerhards 2005-09-27\n */\nrsRetVal parsInt(rsParsObj *pThis, int* pInt)\n{\n\tunsigned char *pC;\n\tint iVal;\n\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\tassert(pInt != NULL);\n\n\tiVal = 0;\n\tpC = rsCStrGetBufBeg(pThis->pCStr) + pThis->iCurrPos;\n\n\t/* order of checks is important, else we might do\n\t * mis-addressing! (off by one)\n\t */\n\tif(pThis->iCurrPos >= rsCStrLen(pThis->pCStr))\n\t\treturn RS_RET_NO_MORE_DATA;\n\tif(!isdigit((int)*pC))\n\t\treturn RS_RET_NO_DIGIT;\n\n\twhile(pThis->iCurrPos < rsCStrLen(pThis->pCStr) && isdigit((int)*pC)) {\n\t\tiVal = iVal * 10 + *pC - '0';\n\t\t++pThis->iCurrPos;\n\t\t++pC;\n\t}\n\n\t*pInt = iVal;\n\n\treturn RS_RET_OK;\n}\n\n/* Skip everything up to a specified character.\n * Returns with ParsePointer set BEHIND this character.\n * Returns RS_RET_OK if found, RS_RET_NOT_FOUND if not\n * found. In that case, the ParsePointer is moved to the\n * last character of the string.\n * 2005-09-19 rgerhards\n */\nrsRetVal parsSkipAfterChar(rsParsObj *pThis, char c)\n{\n\tregister unsigned char *pC;\n\tDEFiRet;\n\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\n\tpC = rsCStrGetBufBeg(pThis->pCStr);\n\n\twhile(pThis->iCurrPos < rsCStrLen(pThis->pCStr)) {\n\t\tif(pC[pThis->iCurrPos] == c)\n\t\t\tbreak;\n\t\t++pThis->iCurrPos;\n\t}\n\n\t/* delimiter found? */\n\tif(pC[pThis->iCurrPos] == c) {\n\t\tif(pThis->iCurrPos+1 < rsCStrLen(pThis->pCStr)) {\n\t\t\tiRet = RS_RET_OK;\n\t\t\tpThis->iCurrPos++; /* 'eat' delimiter */\n\t\t} else {\n\t\t\tiRet = RS_RET_FOUND_AT_STRING_END;\n\t\t}\n\t} else {\n\t\tiRet = RS_RET_NOT_FOUND;\n\t}\n\n\tRETiRet;\n}\n\n/* Skip whitespace. Often used to trim parsable entries.\n * Returns with ParsePointer set to first non-whitespace\n * character (or at end of string).\n * If bRequireOne is set to true, at least one whitespace\n * must exist, else an error is returned.\n */\nrsRetVal parsSkipWhitespace(rsParsObj *pThis)\n{\n\tregister unsigned char *pC;\n\tDEFiRet;\n\n\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\n\tpC = rsCStrGetBufBeg(pThis->pCStr);\n\n\twhile(pThis->iCurrPos < rsCStrLen(pThis->pCStr)) {\n\t\tif(!isspace((int)*(pC+pThis->iCurrPos)))\n\t\t\tbreak;\n\t\t++pThis->iCurrPos;\n\t}\n\n\tRETiRet;\n}\n\n/* Parse string up to a delimiter.\n *\n * Input:\n * cDelim - the delimiter. Note that SP within a value always is a delimiter,\n * so cDelim is actually an *additional* delimiter.\n *   The following two are for whitespace stripping,\n *   0 means \"no\", 1 \"yes\"\n *   - bTrimLeading\n *   - bTrimTrailing\n *   - bConvLower - convert string to lower case?\n *\n * Output:\n * ppCStr Pointer to the parsed string - must be freed by caller!\n */\nrsRetVal parsDelimCStr(rsParsObj *pThis, cstr_t **ppCStr, char cDelim, int bTrimLeading, int bTrimTrailing,\n\tint bConvLower)\n{\n\tDEFiRet;\n\tregister unsigned char *pC;\n\tcstr_t *pCStr = NULL;\n\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\n\tCHKiRet(rsCStrConstruct(&pCStr));\n\n\tif(bTrimLeading)\n\t\tparsSkipWhitespace(pThis);\n\n\tpC = rsCStrGetBufBeg(pThis->pCStr) + pThis->iCurrPos;\n\n\twhile(pThis->iCurrPos < rsCStrLen(pThis->pCStr) && *pC != cDelim) {\n\t\tCHKiRet(cstrAppendChar(pCStr, bConvLower ? tolower(*pC) : *pC));\n\t\t++pThis->iCurrPos;\n\t\t++pC;\n\t}\n\t\n\tif(pThis->iCurrPos < cstrLen(pThis->pCStr)) { //BUGFIX!!\n\t\t++pThis->iCurrPos; /* eat delimiter */\n\t}\n\n\t/* We got the string, now take it and see if we need to\n\t * remove anything at its end.\n\t */\n\tcstrFinalize(pCStr);\n\n\tif(bTrimTrailing) {\n\t\tcstrTrimTrailingWhiteSpace(pCStr);\n\t}\n\n\t/* done! */\n\t*ppCStr = pCStr;\n\nfinalize_it:\n\tif(iRet != RS_RET_OK) {\n\t\tif(pCStr != NULL)\n\t\t\trsCStrDestruct(&pCStr);\n\t}\n\n\tRETiRet;\n}\n\n/* Parse a quoted string (\"-some-data\") from the given position.\n * Leading whitespace before the first quote is skipped. During\n * parsing, escape sequences are detected and converted:\n * \\\\ - backslash character\n * \\\" - quote character\n * any other value \\<somechar> is reserved for future use.\n *\n * After return, the parse pointer is paced after the trailing\n * quote.\n *\n * Output:\n * ppCStr Pointer to the parsed string - must be freed by caller and\n *        does NOT include the quotes.\n * rgerhards, 2005-09-19\n */\nrsRetVal parsQuotedCStr(rsParsObj *pThis, cstr_t **ppCStr)\n{\n\tregister unsigned char *pC;\n\tcstr_t *pCStr = NULL;\n\tDEFiRet;\n\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\n\tCHKiRet(parsSkipAfterChar(pThis, '\"'));\n\tpC = rsCStrGetBufBeg(pThis->pCStr) + pThis->iCurrPos;\n\n\t/* OK, we most probably can obtain a value... */\n\tCHKiRet(cstrConstruct(&pCStr));\n\n\twhile(pThis->iCurrPos < cstrLen(pThis->pCStr)) {\n\t\tif(*pC == '\"') {\n\t\t\tbreak;\t/* we are done! */\n\t\t} else if(*pC == '\\\\') {\n\t\t\t++pThis->iCurrPos;\n\t\t\t++pC;\n\t\t\tif(pThis->iCurrPos < cstrLen(pThis->pCStr)) {\n\t\t\t\t/* in this case, we copy the escaped character\n\t\t\t\t * to the output buffer (but do not rely on this,\n\t\t\t\t * we might later introduce other things, like \\007!\n\t\t\t\t */\n\t\t\t\tCHKiRet(cstrAppendChar(pCStr, *pC));\n\t\t\t}\n\t\t} else { /* regular character */\n\t\t\tCHKiRet(cstrAppendChar(pCStr, *pC));\n\t\t}\n\t\t++pThis->iCurrPos;\n\t\t++pC;\n\t}\n\t\n\tif(*pC == '\"') {\n\t\t++pThis->iCurrPos; /* 'eat' trailing quote */\n\t} else {\n\t\t/* error - improperly quoted string! */\n\t\tcstrDestruct(&pCStr);\n\t\tABORT_FINALIZE(RS_RET_MISSING_TRAIL_QUOTE);\n\t}\n\n\tcstrFinalize(pCStr);\n\n\t/* done! */\n\t*ppCStr = pCStr;\n\nfinalize_it:\n\tif(iRet != RS_RET_OK) {\n\t\tif(pCStr != NULL)\n\t\t\tcstrDestruct(&pCStr);\n\t}\n\n\tRETiRet;\n}\n\n/*\n * Parsing routine for IPv4, IPv6 and domain name wildcards.\n *\n * Parses string in the format <addr>[/bits] where\n * addr can be a IPv4 address (e.g.: 127.0.0.1), IPv6 address (e.g.: [::1]),\n * full hostname (e.g.: localhost.localdomain) or hostname wildcard\n * (e.g.: *.localdomain).\n */\nrsRetVal parsAddrWithBits(rsParsObj *pThis, struct NetAddr **pIP, int *pBits)\n{\n\tregister uchar *pC;\n\tuchar *pszIP = NULL;\n\tuchar *pszTmp;\n\tstruct addrinfo hints, *res = NULL;\n\tcstr_t *pCStr;\n\tDEFiRet;\n\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\tassert(pIP != NULL);\n\tassert(pBits != NULL);\n\n\tCHKiRet(cstrConstruct(&pCStr));\n\n\tparsSkipWhitespace(pThis);\n\tpC = rsCStrGetBufBeg(pThis->pCStr) + pThis->iCurrPos;\n\n\t/* we parse everything until either '/', ',' or\n\t * whitespace. Validity will be checked down below.\n\t */\n\twhile(pThis->iCurrPos < rsCStrLen(pThis->pCStr)\n\t      && *pC != '/' && *pC != ',' && !isspace((int)*pC)) {\n\t\tif((iRet = cstrAppendChar(pCStr, *pC)) != RS_RET_OK) {\n\t\t\tcstrDestruct (&pCStr);\n\t\t\tFINALIZE;\n\t\t}\n\t\t++pThis->iCurrPos;\n\t\t++pC;\n\t}\n\t\n\tcstrFinalize(pCStr);\n\n\t/* now we have the string and must check/convert it to\n\t * an NetAddr structure.\n\t */\n\tCHKiRet(cstrConvSzStrAndDestruct(&pCStr, &pszIP, 0));\n\n\tif((*pIP = calloc(1, sizeof(struct NetAddr))) == NULL)\n\t\tABORT_FINALIZE(RS_RET_OUT_OF_MEMORY);\n\t\n\tif (*((char*)pszIP) == '[') {\n\t\tpszTmp = (uchar*)strchr ((char*)pszIP, ']');\n\t\tif (pszTmp == NULL) {\n\t\t\tfree (*pIP);\n\t\t\tABORT_FINALIZE(RS_RET_INVALID_IP);\n\t\t}\n\t\t*pszTmp = '\\0';\n\n\t\tmemset (&hints, 0, sizeof (struct addrinfo));\n\t\thints.ai_family = AF_INET6;\n\t\thints.ai_flags  = AI_NUMERICHOST;\n\n\t\tswitch(getaddrinfo ((char*)pszIP+1, NULL, &hints, &res)) {\n\t\tcase 0:\n\t\t\t(*pIP)->addr.NetAddr = malloc (res->ai_addrlen);\n\t\t\tmemcpy ((*pIP)->addr.NetAddr, res->ai_addr, res->ai_addrlen);\n\t\t\tfreeaddrinfo (res);\n\t\t\tbreak;\n\t\tcase EAI_NONAME:\n\t\t\t/* The \"address\" is not an IP prefix but a wildcard */\n\t\t\tF_SET((*pIP)->flags, ADDR_NAME|ADDR_PRI6);\n\t\t\t(*pIP)->addr.HostWildcard = strdup ((const char*)pszIP+1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfree (*pIP);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\n\t\tif(*pC == '/') {\n\t\t\t/* mask bits follow, let's parse them! */\n\t\t\t++pThis->iCurrPos; /* eat slash */\n\t\t\tif((iRet = parsInt(pThis, pBits)) != RS_RET_OK) {\n\t\t\t\tfree((*pIP)->addr.NetAddr);\n\t\t\t\tfree((*pIP)->addr.HostWildcard);\n\t\t\t\tfree (*pIP);\n\t\t\t\tFINALIZE;\n\t\t\t}\n\t\t\t/* we need to refresh pointer (changed by parsInt()) */\n\t\t\tpC = rsCStrGetBufBeg(pThis->pCStr) + pThis->iCurrPos;\n\t\t} else {\n\t\t\t/* no slash, so we assume a single host (/128) */\n\t\t\t*pBits = 128;\n\t\t}\n\t} else { /* now parse IPv4 */\n\t\tmemset (&hints, 0, sizeof (struct addrinfo));\n\t\thints.ai_family = AF_INET;\n\t\thints.ai_flags  = AI_NUMERICHOST;\n\n\t\tswitch(getaddrinfo ((char*)pszIP, NULL, &hints, &res)) {\n\t\tcase 0:\n\t\t\t(*pIP)->addr.NetAddr = malloc (res->ai_addrlen);\n\t\t\tmemcpy ((*pIP)->addr.NetAddr, res->ai_addr, res->ai_addrlen);\n\t\t\tfreeaddrinfo (res);\n\t\t\tbreak;\n\t\tcase EAI_NONAME:\n\t\t\t/* The \"address\" is not an IP prefix but a wildcard */\n\t\t\tF_SET((*pIP)->flags, ADDR_NAME);\n\t\t\t(*pIP)->addr.HostWildcard = strdup ((const char*)pszIP);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfree (*pIP);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\n\t\tif(*pC == '/') {\n\t\t\t/* mask bits follow, let's parse them! */\n\t\t\t++pThis->iCurrPos; /* eat slash */\n\t\t\tif((iRet = parsInt(pThis, pBits)) != RS_RET_OK) {\n\t\t\t\tfree((*pIP)->addr.NetAddr);\n\t\t\t\tfree((*pIP)->addr.HostWildcard);\n\t\t\t\tfree (*pIP);\n\t\t\t\tFINALIZE;\n\t\t\t}\n\t\t\t/* we need to refresh pointer (changed by parsInt()) */\n\t\t\tpC = rsCStrGetBufBeg(pThis->pCStr) + pThis->iCurrPos;\n\t\t} else {\n\t\t\t/* no slash, so we assume a single host (/32) */\n\t\t\t*pBits = 32;\n\t\t}\n\t}\n\n\t/* skip to next processable character */\n\twhile(pThis->iCurrPos < rsCStrLen(pThis->pCStr)\n\t      && (*pC == ',' || isspace((int)*pC))) {\n\t\t++pThis->iCurrPos;\n\t\t++pC;\n\t}\n\n\tiRet = RS_RET_OK;\n\nfinalize_it:\n\tfree(pszIP);\n\tRETiRet;\n}\n\n\n/* tell if the parsepointer is at the end of the\n * to-be-parsed string. Returns 1, if so, 0\n * otherwise. rgerhards, 2005-09-27\n */\nint parsIsAtEndOfParseString(rsParsObj *pThis)\n{\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\n\treturn (pThis->iCurrPos < rsCStrLen(pThis->pCStr)) ? 0 : 1;\n}\n\n\n/* return the position of the parse pointer\n */\nint rsParsGetParsePointer(rsParsObj *pThis)\n{\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\n\tif(pThis->iCurrPos < rsCStrLen(pThis->pCStr))\n\t\treturn pThis->iCurrPos;\n\telse\n\t\treturn rsCStrLen(pThis->pCStr) - 1;\n}\n\n/* peek at the character at the parse pointer\n * the caller must ensure that the parse pointer is not\n * at the end of the parse buffer (e.g. by first calling\n * parsIsAtEndOfParseString).\n * rgerhards, 2005-09-27\n */\nchar parsPeekAtCharAtParsPtr(rsParsObj *pThis)\n{\n\trsCHECKVALIDOBJECT(pThis, OIDrsPars);\n\tassert(pThis->iCurrPos < rsCStrLen(pThis->pCStr));\n\t\n\treturn(*(pThis->pCStr->pBuf + pThis->iCurrPos));\n}\n\n/* return the current position inside the parse object.\n * rgerhards, 2007-07-04\n */\nint parsGetCurrentPosition(rsParsObj *pThis)\n{\n\treturn pThis->iCurrPos;\n}\n\n\n/*\n * Local variables:\n *  c-indent-level: 8\n *  c-basic-offset: 8\n *  tab-width: 8\n * End:\n * vi:set ai:\n */\n"
        },
        {
          "name": "parse.h",
          "type": "blob",
          "size": 3.6435546875,
          "content": "/* parsing routines for the counted string class. These\n * routines provide generic parsing aid as well some fairly\n * complex routines targeted toward specific needs.\n *\n * General information - read this:\n * All routines work on a single CStr object, which must be supplied\n * during construction. The parse class keeps an internal pointer of\n * where the next parse operation is to start (you could also say\n * this is where the last parse operation stopped).\n *\n * Each parse operation carried out by this package starts from the\n * parse pointer, parses the caller-requested element (e.g. an\n * integer or delemited string) and the update the parse pointer. If\n * the caller tries to parse beyond the end of the original string,\n * an error is returned. In general, all functions return a parsRet\n * error code and all require the parseObj to be the first parameter.\n * The to-be-parsed string provided to the parse object MUST NOT be\n * freed or modified by the caller during the lifetime of the parse\n * object. However, the caller must free it when it is no longer needed.\n * Optinally, the parse object can be instructed to do that. All objects\n * returned by the parse routines must be freed by the caller. For\n * simpler data types (like integers), the caller must provide the\n * necessary buffer space.\n *\n * begun 2005-09-09 rgerhards\n *\n * Copyright (C) 2005-2012 Adiscon GmbH\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#ifndef _PARSE_H_INCLUDED__\n#define _PARSE_H_INCLUDED__ 1\n\n#include \"stringbuf.h\"\n\n/**\n * The parse object\n */\nstruct rsParsObject\n{\n#ifndef NDEBUG\n\trsObjID OID;\t\t\t/**< object ID */\n#endif\n\tcstr_t *pCStr;\t\t/**< pointer to the string object we are parsing */\n\tsize_t iCurrPos;\t/**< current parsing position (char offset) */\n};\ntypedef struct rsParsObject rsParsObj;\n\n\n/* BEGIN \"inline\"-like functions */\n/* END \"inline\"-like functions */\n\nint rsParsGetParsePointer(rsParsObj *pThis);\n\n/**\n * Construct a rsPars object.\n */\nrsRetVal rsParsConstruct(rsParsObj **ppThis);\nrsRetVal rsParsAssignString(rsParsObj *pThis, cstr_t *pCStr);\n\n/* parse an integer. The parse pointer is advanced */\nrsRetVal parsInt(rsParsObj *pThis, int* pInt);\n\n/* Skip whitespace. Often used to trim parsable entries. */\nrsRetVal parsSkipWhitespace(rsParsObj *pThis);\n\n/* Parse string up to a delimiter.\n *\n * Input:\n * cDelim - the delimiter\n *   The following two are for whitespace stripping,\n *   0 means \"no\", 1 \"yes\"\n *   - bTrimLeading\n *   - bTrimTrailing\n *\n * Output:\n * ppCStr Pointer to the parsed string\n */\nrsRetVal parsDelimCStr(rsParsObj *pThis, cstr_t **ppCStr, char cDelim, int bTrimLeading,\nint bTrimTrailing, int bConvLower);\n\nrsRetVal parsSkipAfterChar(rsParsObj *pThis, char c);\nrsRetVal parsQuotedCStr(rsParsObj *pThis, cstr_t **ppCStr);\nrsRetVal rsParsConstructFromSz(rsParsObj **ppThis, unsigned char *psz);\nrsRetVal rsParsDestruct(rsParsObj *pThis);\nint parsIsAtEndOfParseString(rsParsObj *pThis);\nint parsGetCurrentPosition(rsParsObj *pThis);\nchar parsPeekAtCharAtParsPtr(rsParsObj *pThis);\nrsRetVal parsAddrWithBits(rsParsObj *pThis, netAddr_t **pIP, int *pBits);\n\n#endif\n"
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "pom.xml",
          "type": "blob",
          "size": 1.4130859375,
          "content": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n  http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>com.rsyslog</groupId>\n  <artifactId>rsyslog</artifactId>\n  <version>8.1.6</version>\n  <packaging>jar</packaging>\n  <name>rsyslog java part</name>\n  <url>https://github.com/rsyslog/rsyslog</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <build>\n    <sourceDirectory>java</sourceDirectory>\n\n    <plugins>\n      <!-- Create jar of sources and javadocs -->\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-source-plugin</artifactId>\n        <version>2.2.1</version>\n        <executions>\n          <execution>\n            <id>attach-sources</id>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-javadoc-plugin</artifactId>\n        <version>2.9.1</version>\n        <executions>\n          <execution>\n            <id>attach-javadocs</id>\n            <goals>\n              <goal>jar</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n\n  </build>\n</project>\n"
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample.conf",
          "type": "blob",
          "size": 13.17578125,
          "content": "# This is a sample configuation file for rsyslogd. See the\n# doc/manual.html for details. If you can not find the\n# manual set, please visit\n#\n#    https://www.rsyslog.com/doc/\n#\n# to obtain it online.\n#\n# WARNING: We do NOT keep the comments in this file always\n#          up to date. Be sure to consult the doc set that\n#          came with your package, especially the file on\n#          rsyslog.conf - it probably has some better information\n#          than is provided here in comments. The main purpose\n#          of sample.conf is to show you some actual directives,\n#\t   not to be the authorative doc source.\n#\n# Please note that rsyslogd by default\n# reads /etc/rsyslogd.conf (and NOT /etc/syslogd.conf!).\n#\n# A commented sample configuration. More a man page than a real\n# sample ;)\n#\n# We try to keep things as consistent with existing syslog implementation\n# as possible. We use \"$\" to start lines that contain new directives.\n\n# We limit who can send us messages:\n$AllowedSender UDP, 192.0.2.0/24, 10.0.0.1  # all machines in 192.0.2 as well as 10.0.0.1\n$AllowedSender TCP, 10.0.0.1 # for TCP, we allow only 10.0.0.1\n# remove the AllowedSender directives if you do not want to limit\n# who can send rsyslogd messages (not recommended)\n\n# Templates are a key feature of rsyslog. They allow one to specify any\n# format a user might want. Every output in rsyslog uses templates - this\n# holds true for files, user messages and so on. The database writer\n# expects its template to be a proper SQL statement - so this is highly\n# customizable too. You might ask how does all of this work when no templates\n# at all are specified. Good question ;) The answer is simple, though. Templates\n# compatible with the stock syslogd formats are hardcoded into rsyslog. So if\n# no template is specified, we use one of these hardcoded templates. Search for\n# \"template_\" in syslogd.c and you will find the hardcoded ones.\n#\n# A template consists of a template directive, a name, the actual template text\n# and optional options. A sample is:\n#\n# $template MyTemplateName,\"\\7Text %property% some more text\\n\",<options>\n#\n# The \"$template\" is the template directive. It tells rsyslog that this\n# line contains a template.\n#\n# \"MyTemplateName\" is the template name. All other config lines refer to\n# this name.\n#\n# The text within quotes is the actual template text. The backslash is \n# a escape character, much as in C. It does all these \"cool\" things. For\n# example, \\7 rings the bell (this is an ASCII value), \\n is a new line.\n# C programmers and perl coders have the advantage of knowing this, but the\n# set in rsyslog is a bit restricted currently. All text in the template\n# is used literally, except for things within percent signs. These are \n# properties and allow you access to the contents of the syslog message.\n# Properties are accessed via the property replacer (nice name, huh) and\n# it can do cool things, too. For example, it can pick a substring or\n# do date-specific formatting. More on this is below, on some lines of the\n# property replacer.\n#\n# The <options> part is optional. It carries options that influence the\n# template as whole. Details are below. Be sure NOT to mistake template\n# options with property options - the later ones are processed by the\n# property replacer and apply to a SINGLE property, only (and not the\n# whole template).\n#\n# Template options are case-insensitive. Currently defined are:\n# sql - format the string suitable for a SQL statement. This will replace single\n#       quotes (\"'\") by two single quotes (\"''\") inside each field. This option MUST\n#       be specified when a template is used for writing to a database, otherwise SQL\n#       injection might occur.\n#\n# \tPlease note that the database writer *checks* that the sql option is\n#\tpresent in the template. If it is not present, the write database action\n#\tis disabled. This is to guard you against accidential forgetting it and\n#\tthen becoming vulnerable for SQL injection.\n#\tThe sql option can also be useful with files - especially if you want\n#\tto run them on another machine for performance reasons. However, do NOT\n#\tuse it if you do not have a real need for it - among others, it takes\n#\tsome toll on the processing time. Not much, but on a really busy system\n#\tyou might notice it ;)\n#\n# To escape:\n# % = \\%\n# \\ = \\\\\n# --> '\\' is used to escape (as in C)\n#$template TraditionalFormat,%timegenerated% %HOSTNAME% %syslogtag%%msg%\\n\"\n#\n# Properties can be accessed by the property replacer. They are accessed\n# inside the template by putting them between percent signs. Properties\n# can be modifed by the property replacer. The full syntax is as follows:\n#\n# %propname:fromChar:toChar:options%\n#\n# propname is the name of the property to access. This IS case-sensitive!\n# Currently supported are:\n# msg\t\tthe MSG part of the message (aka \"the message\" ;))\n# rawmsg\tthe message excactly as it was received from the\n#\t\tsocket. Should be useful for debugging.\n# UxTradMsg\twill disappear soon - do NOT use!\n# HOSTNAME\thostname from the message\n# source\talias for HOSTNAME\n# syslogtag\tTAG from the message\n# PRI\t\tPRI part of the message - undecoded (single value)\n# IUT\t\tthe monitorware InfoUnitType - used when talking to a\n#\t\tMonitorWare backend (also for phpLogCon)\n# syslogfacility\tthe facility from the message - in numerical form\n# syslogpriority\tthe priority (actully severity!) from the\n#\t\t\tmessage - in numerical form\n# timegenerated\ttimestamp when the message was RECEIVED. Always in high\n#\t\tresolution\n# timereported\ttimestamp from the message. Resolution depends on what\n#\t\twas provided in the message (in most cases, only seconds)\n# TIMESTAMP\talias for timereported\n#\n# Other properties might be available at the time you read this. Be sure\n# to consult the property replacer documentation in the doc set for all\n# properties.\n#\n# FromChar and toChar are used to build substrings. They specify the\n# offset within the string that should be copied. Offset counting\n# starts at 1, so if you need to obtain the first 2 characters of the\n# message text, you can use this syntax: \"%msg:1:2%\".\n# If you do not whish to specify from and to, but you want to\n# specify options, you still need to include the colons. For example,\n# if you would like to convert the full message text to lower case\n# only, use \"%msg:::lowercase%\".\n#\n# property options are case-insensitive, currently defined are:\n# uppercase\tconvert property to lowercase only\n# lowercase\tconvert property text to uppercase only\n# drop-last-lf\tThe last LF in the message (if any), is dropped. \n#\t\tEspecially useful for PIX.\n# date-mysql\tformat as mysql date\n# date-rfc3164\tformat as RFC 3164 date\n# date-rfc3339\tformat as RFC 3339 date\n# escape-cc\tNOT yet implemented\n\n# Below find some samples of what a template can do. Have a good\n# time finding out what they do [or just tun them] ;)\n\n# A template that resambles traditional syslogd file output:\n$template TraditionalFormat,\"%timegenerated% %HOSTNAME% %syslogtag%%msg:::drop-last-lf%\\n\"\n\n# a template useful for debugging format issues\n$template DEBUG,\"Debug line with all properties:\\nFROMHOST: '%FROMHOST%', HOSTNAME: '%HOSTNAME%', PRI: %PRI%,\\nsyslogtag '%syslogtag%', programname: '%programname%', APP-NAME: '%APP-NAME%', PROCID: '%PROCID%', MSGID: '%MSGID%',\\nTIMESTAMP: '%TIMESTAMP%', STRUCTURED-DATA: '%STRUCTURED-DATA%',\\nmsg: '%msg%'\\nescaped msg: '%msg:::drop-cc%'\\nrawmsg: '%rawmsg%'\\n\\n\"\n#\n# A template that resembles RFC 3164 on-the-wire format:\n# (yes, there is NO space betwen syslogtag and msg! that's important!)\n$template RFC3164fmt,\"<%PRI%>%TIMESTAMP% %HOSTNAME% %syslogtag%%msg%\"\n\n# a template resembling traditional wallmessage format:\n$template wallmsg,\"\\r\\n\\7Message from syslogd@%HOSTNAME% at %timegenerated% ...\\r\\n %syslogtag%%msg%\\n\\r\"\n\n# The template below emulates winsyslog format, but we need to check the time\n# stamps used. for now, it is good enough ;) This format works best with\n# other members of the MonitorWare product family. It is also a good sample\n# where you can see the property replacer in action.\n$template WinSyslogFmt,\"%HOSTNAME%,%timegenerated:1:10:date-rfc3339%,%timegenerated:12:19:date-rfc3339%,%timegenerated:1:10:date-rfc3339%,%timegenerated:12:19:date-rfc3339%,%syslogfacility%,%syslogpriority%,%syslogtag%%msg%\\n\"\n\n# A template used for database writing (notice it *is* an actual\n# sql-statement):\n$template dbFormat,\"insert into SystemEvents (Message, Facility,FromHost, Priority, DeviceReportedTime, ReceivedAt, InfoUnitID, SysLogTag) values ('%msg%', %syslogfacility%, '%HOSTNAME%',%syslogpriority%, '%timereported:::date-mysql%', '%timegenerated:::date-mysql%', %iut%, '%syslogtag%')\",sql\n\n# Selector lines are somewhat different from stock syslogd. With\n# rsyslog, you can add a semicolon \";\" after the target and then\n# the template name. That will assign this template to the respective\n# action. If no template name is given, a hardcoded template is used.\n# If a template name is given, but the template was not defined, the\n# selector line is DEACTIVATED.\n#\n# #############\n# # IMPORTANT #\n# #############\n# Templates MUST be defined BEFORE they are used! It is OK to\n# intermix template definitions and selector lines within the\n# config file, but each template MUST be defined before it is\n# used the first time!\n#\n\n# We have some very rough samples here - This sample file focusses\n# on the new syntax, so we do NOT describe all possible selections.\n# Use the syslog.conf if you are interested to see how to select\n# based on facility and severits (aka priority).\n\n*.*\t\t/var/log/winsyslog-like.log;WinSyslogFmt\n\n# A selector using the traditional format defined above:\n*.*\t\t/var/log/traditionalfile.log;TraditionalFormat\n\n# And another one using the hardcoded traditional format:\n*.*\t\t/var/log/anothertraditionalfile.log\n\n# Templates are also fully supportd for forwarding:\n*.*\t\t@172.19.2.16;RFC3164fmt\n\n# And this finally is a database action\n# The semicolon at the end is not necessary,\n# but some previous versions of  rsyslogd had a bug that\n# made them abort if it were missing. As Dennis Olvany\n# pointed out, it would be extremely nice to have this\n# semicolon in the sample conf - so we did in a previous\n# version and it still sticks around ;)\n*.*\t\t>hostname,dbname,userid,password;\n# It uses the default schema (MonitorWare format). The parameters\n# should be self-explanatory.\n\n# And this one uses the template defined above:\n*.*\t\t>hostname,dbname,userid,password;dbFormat\n\n\n#\n# Rsyslog supports TCP-based syslog. To enable receiving TCP messages,\n# use the -t <port> command line option (where port is the port it\n# shall listen to. To forward messages to the remote host, you must\n# specify a forwarding action and include the host and port. TCP\n# and UDP-based forwarding has basically the same syntax, except that\n# TCP delivery is triggered by specifying a second at-sign (@) in the\n# message.\n# This is UDP forwarding to port 514:\n*.*\t\t@172.19.2.16\n# This is UDP forwarding to port 1514:\n*.*\t\t@172.19.2.16:1514\n# This is TCP forwarding to port 1514:\n*.*\t\t@@172.19.2.16:1514\n# The second @-sign is all you need (except, of course, a tcp-capable\n# syslogd like rsyslogd ;)).\n# Of course, you can also specify a template with TCP:\n*.*\t\t@@172.19.2.16:1514;RFC3164Fmt\n# There are also some options you can select. These come between\n# paranthesis. Available are:\n# z<number> - turn on compression, number is compression mode 0 - none, 9 max\n# o         - (tcp only) use octet counting for framing EXPERIMENTAL\n#\n# Forward via TCP with maximum compression and octet couting framing:\n*.*\t\t@@(z9,o)172.19.2.16:1514;RFC3164Fmt\n# Forward via UDP with maximum compression to port 1514\n*.*\t\t@(z9)172.19.2.16:1514\n\n# We also support property-based filters, which allow for nice\n# things. Let's for example assume that you receive a lot of\n# nonsense messages with \"ID-4711\" in the message text. You know\n# that you will never need these messages. So you simply discard them\n:msg, contains, \"ID-4711\"\t~\n\n# or you would like to store messages from a specific host to\n# a different file:\n:FROMHOST, isequal,\"myhost.example.com\"\t/var/log/myhost.log\n\n# everyting that does not contain \"error\" should also be\n# discarded\n:msg, !contains, \"error\" \t~\n# and the rest go to a seperate file\n*.*\t/var/log/error\n# (keep in mind that the two directives shown immediately\n# above must be kept in that order to actually work)\n\n# you can also execute a script. Let's assume, for example, you need\n# to execute \"turn-diesel-generator-on\" when \"power failed\" is contained\n# in a message... ;)\n:msg, contains, \"power failed\"\t^turn-diesel-generator-on\n# (The script is passed the syslog message as first and only parameter.\n# Other parameters can currently not be specified.)\n\n# Note that boolean operations (other than not [!]) are not\n# currently supported. As such, you can not filter out different\n# facilities from different machines - hopefully later ;)\n\n# \n# A final world. rsyslog is considered a part of Adiscon's MonitorWare product line.\n# As such, you can find current information as well as information on the\n# other product line members on http://www.monitorware.com. Please be warned, there\n# are a number of closed-source commercial Windows applications among these products ;)\n#\n# You might want to check the GPL'ed phpLogCon (http://www.phplogcon.org)\n# as a web-based front-end to a syslog message database.\n#\n# I hope this work is useful.\n# 2005-09-27 Rainer Gerhards <rgerhards@adiscon.com>\n#\n"
        },
        {
          "name": "solaris",
          "type": "tree",
          "content": null
        },
        {
          "name": "syslog-tst.conf",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "template.c",
          "type": "blob",
          "size": 76.095703125,
          "content": "/* This is the template processing code of rsyslog.\n * begun 2004-11-17 rgerhards\n *\n * Copyright 2004-2019 Rainer Gerhards and Adiscon\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Note: there is a tiny bit of code left where I could not get any response\n * from the author if this code can be placed under ASL2.0. I have guarded this\n * with #ifdef STRICT_GPLV3. Only if that macro is defined, the code will be\n * compiled. Otherwise this feature is not present. The plan is to do a\n * different implementation in the future to get rid of this problem.\n * rgerhards, 2012-08-25\n */\n#include \"config.h\"\n\n#include \"rsyslog.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <assert.h>\n#include <json.h>\n#include \"stringbuf.h\"\n#include \"syslogd-types.h\"\n#include \"template.h\"\n#include \"msg.h\"\n#include \"dirty.h\"\n#include \"obj.h\"\n#include \"errmsg.h\"\n#include \"strgen.h\"\n#include \"rsconf.h\"\n#include \"msg.h\"\n#include \"parserif.h\"\n#include \"unicode-helper.h\"\n\nPRAGMA_INGORE_Wswitch_enum\n/* static data */\nDEFobjCurrIf(obj)\nDEFobjCurrIf(strgen)\n\n/* tables for interfacing with the v6 config system */\nstatic struct cnfparamdescr cnfparamdescr[] = {\n\t{ \"name\", eCmdHdlrString, 1 },\n\t{ \"type\", eCmdHdlrString, 1 },\n\t{ \"string\", eCmdHdlrString, 0 },\n\t{ \"plugin\", eCmdHdlrString, 0 },\n\t{ \"subtree\", eCmdHdlrString, 0 },\n\t{ \"option.stdsql\", eCmdHdlrBinary, 0 },\n\t{ \"option.sql\", eCmdHdlrBinary, 0 },\n\t{ \"option.json\", eCmdHdlrBinary, 0 },\n\t{ \"option.jsonf\", eCmdHdlrBinary, 0 },\n\t{ \"option.casesensitive\", eCmdHdlrBinary, 0 }\n};\nstatic struct cnfparamblk pblk =\n\t{ CNFPARAMBLK_VERSION,\n\t  sizeof(cnfparamdescr)/sizeof(struct cnfparamdescr),\n\t  cnfparamdescr\n\t};\n\nstatic struct cnfparamdescr cnfparamdescrProperty[] = {\n\t{ \"name\", eCmdHdlrString, 1 },\n\t{ \"outname\", eCmdHdlrString, 0 },\n\t{ \"dateformat\", eCmdHdlrString, 0 },\n\t{ \"date.inutc\", eCmdHdlrBinary, 0 },\n\t{ \"compressspace\", eCmdHdlrBinary, 0 },\n\t{ \"caseconversion\", eCmdHdlrString, 0 },\n\t{ \"controlcharacters\", eCmdHdlrString, 0 },\n\t{ \"securepath\", eCmdHdlrString, 0 },\n\t{ \"format\", eCmdHdlrString, 0 },\n\t{ \"position.from\", eCmdHdlrInt, 0 },\n\t{ \"position.to\", eCmdHdlrInt, 0 },\n\t{ \"position.relativetoend\", eCmdHdlrBinary, 0 },\n\t{ \"field.number\", eCmdHdlrInt, 0 },\n\t{ \"field.delimiter\", eCmdHdlrInt, 0 },\n\t{ \"regex.expression\", eCmdHdlrString, 0 },\n\t{ \"regex.type\", eCmdHdlrString, 0 },\n\t{ \"regex.nomatchmode\", eCmdHdlrString, 0 },\n\t{ \"regex.match\", eCmdHdlrInt, 0 },\n\t{ \"regex.submatch\", eCmdHdlrInt, 0 },\n\t{ \"droplastlf\", eCmdHdlrBinary, 0 },\n\t{ \"fixedwidth\", eCmdHdlrBinary, 0 },\n\t{ \"datatype\", eCmdHdlrString, 0 },\n\t{ \"onempty\", eCmdHdlrString, 0 },\n\t{ \"mandatory\", eCmdHdlrBinary, 0 },\n\t{ \"spifno1stsp\", eCmdHdlrBinary, 0 }\n};\nstatic struct cnfparamblk pblkProperty =\n\t{ CNFPARAMBLK_VERSION,\n\t  sizeof(cnfparamdescrProperty)/sizeof(struct cnfparamdescr),\n\t  cnfparamdescrProperty\n\t};\n\nstatic struct cnfparamdescr cnfparamdescrConstant[] = {\n\t{ \"value\", eCmdHdlrString, 1 },\n\t{ \"format\", eCmdHdlrString, 0 },\n\t{ \"outname\", eCmdHdlrString, 0 }\n};\nstatic struct cnfparamblk pblkConstant =\n\t{ CNFPARAMBLK_VERSION,\n\t  sizeof(cnfparamdescrConstant)/sizeof(struct cnfparamdescr),\n\t  cnfparamdescrConstant\n\t};\n\n\n#ifdef FEATURE_REGEXP\nDEFobjCurrIf(regexp)\nstatic int bFirstRegexpErrmsg = 1; /**< did we already do a \"can't load regexp\" error message? */\n#endif\n\n/* helper to tplToString and strgen's, extends buffer */\n#define ALLOC_INC 128\nrsRetVal\nExtendBuf(actWrkrIParams_t *__restrict__ const iparam, const size_t iMinSize)\n{\n\tuchar *pNewBuf;\n\tsize_t iNewSize;\n\tDEFiRet;\n\n\tiNewSize = (iMinSize / ALLOC_INC + 1) * ALLOC_INC;\n\tCHKmalloc(pNewBuf = (uchar*) realloc(iparam->param, iNewSize));\n\tiparam->param = pNewBuf;\n\tiparam->lenBuf = iNewSize;\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* This functions converts a template into a string.\n *\n * The function takes a pointer to a template and a pointer to a msg object\n * as well as a pointer to an output buffer and its size. Note that the output\n * buffer pointer may be NULL, size 0, in which case a new one is allocated.\n * The output buffer is grown as required. It is the caller's duty to free the\n * buffer when it is done. Note that it is advisable to reuse memory, as this\n * offers big performance improvements.\n * rewritten 2009-06-19 rgerhards\n */\nrsRetVal\ntplToString(struct template *__restrict__ const pTpl,\n\t    smsg_t *__restrict__ const pMsg,\n\t    actWrkrIParams_t *__restrict__ const iparam,\n\t    struct syslogTime *const ttNow)\n{\n\tDEFiRet;\n\tstruct templateEntry *__restrict__ pTpe;\n\tsize_t iBuf;\n\tunsigned short bMustBeFreed = 0;\n\tuchar *pVal;\n\trs_size_t iLenVal = 0;\n\tint need_comma = 0;\n\n\tif(pTpl->pStrgen != NULL) {\n\t\tCHKiRet(pTpl->pStrgen(pMsg, iparam));\n\t\tFINALIZE;\n\t}\n\n\tif(pTpl->bHaveSubtree) {\n\t\t/* only a single CEE subtree must be provided */\n\t\t/* note: we could optimize the code below, however, this is\n\t\t * not worth the effort, as this passing mode is not expected\n\t\t * in subtree mode and so most probably only used for debug & test.\n\t\t */\n\t\tgetJSONPropVal(pMsg, &pTpl->subtree, &pVal, &iLenVal, &bMustBeFreed);\n\t\tif(iLenVal >= (rs_size_t)iparam->lenBuf) /* we reserve one char for the final \\0! */\n\t\t\tCHKiRet(ExtendBuf(iparam, iLenVal + 1));\n\t\tmemcpy(iparam->param, pVal, iLenVal+1);\n\t\tFINALIZE;\n\t}\n\t\n\t/* we have a \"regular\" template with template entries */\n\n\t/* loop through the template. We obtain one value\n\t * and copy it over to our dynamic string buffer. Then, we\n\t * free the obtained value (if requested). We continue this\n\t * loop until we got hold of all values.\n\t */\n\tpTpe = pTpl->pEntryRoot;\n\tiBuf = 0;\n\tconst int extra_space = (pTpl->optFormatEscape == JSONF) ? 1 : 3;\n\tif(pTpl->optFormatEscape == JSONF) {\n\t\tif(iparam->lenBuf < 2) /* we reserve one char for the final \\0! */\n\t\t\tCHKiRet(ExtendBuf(iparam, 2));\n\t\tiBuf = 1;\n\t\t*iparam->param = '{';\n\t}\n\twhile(pTpe != NULL) {\n\t\tif(pTpe->eEntryType == CONSTANT) {\n\t\t\tpVal = (uchar*) pTpe->data.constant.pConstant;\n\t\t\tiLenVal = pTpe->data.constant.iLenConstant;\n\t\t\tbMustBeFreed = 0;\n\t\t} else \tif(pTpe->eEntryType == FIELD) {\n\t\t\tpVal = (uchar*) MsgGetProp(pMsg, pTpe, &pTpe->data.field.msgProp,\n\t\t\t\t\t\t   &iLenVal, &bMustBeFreed, ttNow);\n\t\t\t/* we now need to check if we should use SQL option. In this case,\n\t\t\t * we must go over the generated string and escape '\\'' characters.\n\t\t\t * rgerhards, 2005-09-22: the option values below look somewhat misplaced,\n\t\t\t * but they are handled in this way because of legacy (don't break any\n\t\t\t * existing thing).\n\t\t\t */\n\t\t\tif(pTpl->optFormatEscape == SQL_ESCAPE)\n\t\t\t\tdoEscape(&pVal, &iLenVal, &bMustBeFreed, SQL_ESCAPE);\n\t\t\telse if(pTpl->optFormatEscape == JSON_ESCAPE)\n\t\t\t\tdoEscape(&pVal, &iLenVal, &bMustBeFreed, JSON_ESCAPE);\n\t\t\telse if(pTpl->optFormatEscape == STDSQL_ESCAPE)\n\t\t\t\tdoEscape(&pVal, &iLenVal, &bMustBeFreed, STDSQL_ESCAPE);\n\t\t} else {\n\t\t\tDBGPRINTF(\"TplToString: invalid entry type %d\\n\", pTpe->eEntryType);\n\t\t\tpVal = (uchar*) \"*LOGIC ERROR*\";\n\t\t\tiLenVal = sizeof(\"*LOGIC ERROR*\") - 1;\n\t\t\tbMustBeFreed = 0;\n\t\t}\n\t\t/* got source, now copy over */\n\t\tif(iLenVal > 0) { /* may be zero depending on property */\n\t\t\t/* first, make sure buffer fits */\n\t\t\tif(iBuf + iLenVal + extra_space >= iparam->lenBuf) /* we reserve one char for the final \\0! */\n\t\t\t\tCHKiRet(ExtendBuf(iparam, iBuf + iLenVal + 1));\n\n\t\t\tif(need_comma) {\n\t\t\t\tmemcpy(iparam->param + iBuf, \", \", 2);\n\t\t\t\tiBuf += 2;\n\t\t\t}\n\t\t\tmemcpy(iparam->param + iBuf, pVal, iLenVal);\n\t\t\tiBuf += iLenVal;\n\t\t\tif(pTpl->optFormatEscape == JSONF) {\n\t\t\t\tneed_comma = 1;\n\t\t\t}\n\t\t}\n\n\t\tif((pTpl->optFormatEscape == JSONF) && (pTpe->pNext == NULL)) {\n\t\t\t/* space was reserved while processing field above\n\t\t\t   (via extra_space in ExtendBuf() new size formula. */\n\t\t\tmemcpy(iparam->param + iBuf, \"}\\n\", 2);\n\t\t\tiBuf += 2;\n\t\t}\n\n\t\tif(bMustBeFreed) {\n\t\t\tfree(pVal);\n\t\t\tbMustBeFreed = 0;\n\t\t}\n\n\t\tpTpe = pTpe->pNext;\n\t}\n\n\tif(iBuf == iparam->lenBuf) {\n\t\t/* in the weired case of an *empty* template, this can happen.\n\t\t * it is debatable if we should really fix it here or simply\n\t\t * forbid that case. However, performance toll is minimal, so\n\t\t * I tend to permit it. -- 2010-11-05 rgerhards\n\t\t */\n\t\tCHKiRet(ExtendBuf(iparam, iBuf + 1));\n\t}\n\tiparam->param[iBuf] = '\\0';\n\tiparam->lenStr = iBuf;\n\t\nfinalize_it:\n\tif(bMustBeFreed) {\n\t\tfree(pVal);\n\t\tbMustBeFreed = 0;\n\t}\n\n\tRETiRet;\n}\n\n\n/* This functions converts a template into a json object.\n * For further general details, see the very similar funtion\n * tpltoString().\n * rgerhards, 2012-08-29\n */\nrsRetVal\ntplToJSON(struct template *pTpl, smsg_t *pMsg, struct json_object **pjson, struct syslogTime *ttNow)\n{\n\tstruct templateEntry *pTpe;\n\trs_size_t propLen;\n\tunsigned short bMustBeFreed;\n\tuchar *pVal;\n\tstruct json_object *json, *jsonf;\n\trsRetVal localRet;\n\tDEFiRet;\n\n\tif(pTpl->bHaveSubtree){\n\t\tif(jsonFind(pMsg, &pTpl->subtree, pjson) != RS_RET_OK)\n\t\t\t*pjson = NULL;\n\t\tif(*pjson == NULL) {\n\t\t\t/* we need to have a root object! */\n\t\t\t*pjson = json_object_new_object();\n\t\t} else {\n\t\t\tjson_object_get(*pjson); /* inc refcount */\n\t\t}\n\t\tFINALIZE;\n\t}\n\n\tjson = json_object_new_object();\n\tfor(pTpe = pTpl->pEntryRoot ; pTpe != NULL ; pTpe = pTpe->pNext) {\n\t\tif(pTpe->eEntryType == CONSTANT) {\n\t\t\tif(pTpe->fieldName == NULL)\n\t\t\t\tcontinue;\n\t\t\tjsonf = json_object_new_string((char*) pTpe->data.constant.pConstant);\n\t\t\tjson_object_object_add(json, (char*)pTpe->fieldName, jsonf);\n\t\t} else \tif(pTpe->eEntryType == FIELD) {\n\t\t\tif(pTpe->data.field.msgProp.id == PROP_CEE        ||\n\t\t\t   pTpe->data.field.msgProp.id == PROP_LOCAL_VAR  ||\n\t\t\t   pTpe->data.field.msgProp.id == PROP_GLOBAL_VAR   ) {\n\t\t\t\tlocalRet = msgGetJSONPropJSON(pMsg, &pTpe->data.field.msgProp, &jsonf);\n\t\t\t\tif(localRet == RS_RET_OK) {\n\t\t\t\t\tjson_object_object_add(json, (char*)pTpe->fieldName, json_object_get(jsonf));\n\t\t\t\t} else {\n\t\t\t\t\tDBGPRINTF(\"tplToJSON: error %d looking up property %s\\n\",\n\t\t\t\t\t\t  localRet, pTpe->fieldName);\n\t\t\t\t\tif(pTpe->data.field.options.bMandatory) {\n\t\t\t\t\t\tjson_object_object_add(json, (char*)pTpe->fieldName, NULL);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else  {\n\t\t\t\tpVal = (uchar*) MsgGetProp(pMsg, pTpe, &pTpe->data.field.msgProp,\n\t\t\t\t\t\t\t   &propLen, &bMustBeFreed, ttNow);\n\t\t\t\tif(pTpe->data.field.options.bMandatory || propLen > 0) {\n\t\t\t\t\tjsonf = json_object_new_string_len((char*)pVal, propLen+1);\n\t\t\t\t\tjson_object_object_add(json, (char*)pTpe->fieldName, jsonf);\n\t\t\t\t}\n\t\t\t\tif(bMustBeFreed) { /* json-c makes its own private copy! */\n\t\t\t\t\tfree(pVal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tassert(iRet == RS_RET_OK);\n\t*pjson = json;\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* Helper to doEscape. This is called if doEscape\n * runs out of memory allocating the escaped string.\n * Then we are in trouble. We can\n * NOT simply return the unmodified string because this\n * may cause SQL injection. But we also can not simply\n * abort the run, this would be a DoS. I think an appropriate\n * measure is to remove the dangerous \\' characters (SQL). We\n * replace them by \\\", which will break the message and\n * signatures eventually present - but this is the\n * best thing we can do now (or does anybody\n * have a better idea?). rgerhards 2004-11-23\n * added support for escape mode (see doEscape for details).\n * if mode = SQL_ESCAPE, then backslashes are changed to slashes.\n * rgerhards 2005-09-22\n */\nstatic void doEmergencyEscape(register uchar *p, int mode)\n{\n\twhile(*p) {\n\t\tif((mode == SQL_ESCAPE||mode == STDSQL_ESCAPE) && *p == '\\'') {\n\t\t\t*p = '\"';\n\t\t} else if(mode == JSON_ESCAPE) {\n\t\t\tif(*p == '\"') {\n\t\t\t\t*p = '\\'';\n\t\t\t} else if(*p == '\\\\' ) {\n\t\t\t\t*p = '/';\n\t\t\t}\n\t\t} else if((mode == SQL_ESCAPE) && *p == '\\\\') {\n\t\t\t*p = '/';\n\t\t}\n\t\t++p;\n\t}\n}\n\n\n/* SQL-Escape a string. Single quotes are found and\n * replaced by two of them. A new buffer is allocated\n * for the provided string and the provided buffer is\n * freed. The length is updated. Parameter pbMustBeFreed\n * is set to 1 if a new buffer is allocated. Otherwise,\n * it is left untouched.\n * --\n * We just discovered a security issue. MySQL is so\n * \"smart\" to not only support the standard SQL mechanism\n * for escaping quotes, but to also provide its own (using\n * c-type syntax with backslashes). As such, it is actually\n * possible to do sql injection via rsyslogd. The cure is now\n * to escape backslashes, too. As we have found on the web, some\n * other databases seem to be similar \"smart\" (why do we have standards\n * at all if they are violated without any need???). Even better, MySQL's\n * smartness depends on config settings. So we add a new option to this\n * function that allows the caller to select if they want to standard or\n * \"smart\" encoding ;)\n * --\n * Parameter \"mode\" is STDSQL_ESCAPE, SQL_ESCAPE \"smart\" SQL engines, or\n * JSON_ESCAPE for everyone requiring escaped JSON (e.g. ElasticSearch).\n * 2005-09-22 rgerhards\n */\nrsRetVal\ndoEscape(uchar **pp, rs_size_t *pLen, unsigned short *pbMustBeFreed, int mode)\n{\n\tDEFiRet;\n\tuchar *p = NULL;\n\tint iLen;\n\tcstr_t *pStrB = NULL;\n\tuchar *pszGenerated;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\tassert(pLen != NULL);\n\tassert(pbMustBeFreed != NULL);\n\n\t/* first check if we need to do anything at all... */\n\tif(mode == STDSQL_ESCAPE)\n\t\tfor(p = *pp ; *p && *p != '\\'' ; ++p)\n\t\t\t;\n\telse if(mode == SQL_ESCAPE)\n\t\tfor(p = *pp ; *p && *p != '\\'' && *p != '\\\\' ; ++p)\n\t\t\t;\n\telse if(mode == JSON_ESCAPE)\n\t\tfor(p = *pp ; *p &&  (*p == '\"' || *p == '\\\\' ) ; ++p)\n\t\t\t;\n\t/* when we get out of the loop, we are either at the\n\t * string terminator or the first character to escape */\n\tif(p && *p == '\\0')\n\t\tFINALIZE; /* nothing to do in this case! */\n\n\tp = *pp;\n\tiLen = *pLen;\n\tCHKiRet(cstrConstruct(&pStrB));\n\n\twhile(*p) {\n\t\tif((mode == SQL_ESCAPE || mode == STDSQL_ESCAPE) && *p == '\\'') {\n\t\t\tCHKiRet(cstrAppendChar(pStrB, (mode == STDSQL_ESCAPE) ? '\\'' : '\\\\'));\n\t\t\tiLen++;\t/* reflect the extra character */\n\t\t} else if((mode == SQL_ESCAPE) && *p == '\\\\') {\n\t\t\tCHKiRet(cstrAppendChar(pStrB, '\\\\'));\n\t\t\tiLen++;\t/* reflect the extra character */\n\t\t} else if((mode == JSON_ESCAPE) &&  (*p == '\"' || *p == '\\\\' )) {\n\t\t\tCHKiRet(cstrAppendChar(pStrB, '\\\\'));\n\t\t\tiLen++;\t/* reflect the extra character */\n\t\t}\n\t\tCHKiRet(cstrAppendChar(pStrB, *p));\n\t\t++p;\n\t}\n\tcstrFinalize(pStrB);\n\tCHKiRet(cstrConvSzStrAndDestruct(&pStrB, &pszGenerated, 0));\n\n\tif(*pbMustBeFreed)\n\t\tfree(*pp); /* discard previous value */\n\n\t*pp = pszGenerated;\n\t*pLen = iLen;\n\t*pbMustBeFreed = 1;\n\nfinalize_it:\n\tif(iRet != RS_RET_OK) {\n\t\tdoEmergencyEscape(*pp, mode);\n\t\tif(pStrB != NULL)\n\t\t\tcstrDestruct(&pStrB);\n\t}\n\n\tRETiRet;\n}\n\n\n/* Constructs a template entry object. Returns pointer to it\n * or NULL (if it fails). Pointer to associated template list entry\n * must be provided.\n */\nstatic struct templateEntry* tpeConstruct(struct template *pTpl)\n{\n\tstruct templateEntry *pTpe;\n\n\tassert(pTpl != NULL);\n\n\tif((pTpe = calloc(1, sizeof(struct templateEntry))) == NULL)\n\t\treturn NULL;\n\t\n\t/* basic initialization is done via calloc() - need to\n\t * initialize only values != 0. */\n\n\tif(pTpl->pEntryLast == NULL){\n\t\t/* we are the first element! */\n\t\tpTpl->pEntryRoot = pTpl->pEntryLast  = pTpe;\n\t} else {\n\t\tpTpl->pEntryLast->pNext = pTpe;\n\t\tpTpl->pEntryLast  = pTpe;\n\t}\n\tpTpl->tpenElements++;\n\n\treturn(pTpe);\n}\n\n\n/* Helper function to apply case-sensitivity to templates.\n */\nstatic void\napply_case_sensitivity(struct template *pTpl)\n{\n\tif(pTpl->optCaseSensitive) return;\n\n\tstruct templateEntry *pTpe;\n\n\tfor(pTpe = pTpl->pEntryRoot ; pTpe != NULL ; pTpe = pTpe->pNext) {\n\t\tif(pTpe->eEntryType == FIELD) {\n\t\t\tif(pTpe->data.field.msgProp.id == PROP_CEE        ||\n\t\t\t   pTpe->data.field.msgProp.id == PROP_LOCAL_VAR  ||\n\t\t\t   pTpe->data.field.msgProp.id == PROP_GLOBAL_VAR   ) {\n\t\t\t\tuchar* p;\n\t\t\t\tp = pTpe->fieldName;\n\t\t\t\tfor ( ; *p; ++p) *p = tolower(*p);\n\t\t\t\tp = pTpe->data.field.msgProp.name;\n\t\t\t\tfor ( ; *p; ++p) *p = tolower(*p);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/* Constructs a template list object. Returns pointer to it\n * or NULL (if it fails).\n */\nstatic struct template*\ntplConstruct(rsconf_t *conf)\n{\n\tstruct template *pTpl;\n\tif((pTpl = calloc(1, sizeof(struct template))) == NULL)\n\t\treturn NULL;\n\t\n\t/* basic initialisation is done via calloc() - need to\n\t * initialize only values != 0. */\n\n\tif(conf->templates.last == NULL)\t{\n\t\t/* we are the first element! */\n\t\tconf->templates.root = conf->templates.last = pTpl;\n\t} else {\n\t\tconf->templates.last->pNext = pTpl;\n\t\tconf->templates.last = pTpl;\n\t}\n\n\treturn(pTpl);\n}\n\n\n/* helper to tplAddLine. Parses a constant and generates\n * the necessary structure.\n * Parameter \"bDoEscapes\" is to support legacy vs. v6+ config system. In\n * legacy, we must do escapes ourselves, whereas v6+ passes in already\n * escaped strings (which we are NOT permitted to further escape, this would\n * cause invalid result strings!). Note: if escapes are not permitted,\n * quotes (\") are just a regular character and do NOT terminate the constant!\n */\nstatic rsRetVal\ndo_Constant(unsigned char **pp, struct template *pTpl, int bDoEscapes)\n{\n\tregister unsigned char *p;\n\tcstr_t *pStrB;\n\tstruct templateEntry *pTpe;\n\tint i;\n\tDEFiRet;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\tassert(pTpl != NULL);\n\n\tp = *pp;\n\n\tCHKiRet(cstrConstruct(&pStrB));\n\t/* process the message and expand escapes\n\t * (additional escapes can be added here if needed)\n\t */\n\twhile(*p && *p != '%' && !(bDoEscapes && *p == '\\\"')) {\n\t\tif(bDoEscapes && *p == '\\\\') {\n\t\t\tswitch(*++p) {\n\t\t\t\tcase '\\0':\n\t\t\t\t\t/* the best we can do - it's invalid anyhow... */\n\t\t\t\t\tcstrAppendChar(pStrB, *p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'n':\n\t\t\t\t\tcstrAppendChar(pStrB, '\\n');\n\t\t\t\t\t++p;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'r':\n\t\t\t\t\tcstrAppendChar(pStrB, '\\r');\n\t\t\t\t\t++p;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '\\\\':\n\t\t\t\t\tcstrAppendChar(pStrB, '\\\\');\n\t\t\t\t\t++p;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '%':\n\t\t\t\t\tcstrAppendChar(pStrB, '%');\n\t\t\t\t\t++p;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0': /* numerical escape sequence */\n\t\t\t\tcase '1':\n\t\t\t\tcase '2':\n\t\t\t\tcase '3':\n\t\t\t\tcase '4':\n\t\t\t\tcase '5':\n\t\t\t\tcase '6':\n\t\t\t\tcase '7':\n\t\t\t\tcase '8':\n\t\t\t\tcase '9':\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile(*p && isdigit((int)*p)) {\n\t\t\t\t\t\ti = i * 10 + *p++ - '0';\n\t\t\t\t\t}\n\t\t\t\t\tcstrAppendChar(pStrB, i);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcstrAppendChar(pStrB, *p++);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tcstrAppendChar(pStrB, *p++);\n\t}\n\n\tif((pTpe = tpeConstruct(pTpl)) == NULL) {\n\t\trsCStrDestruct(&pStrB);\n\t\tABORT_FINALIZE(RS_RET_OUT_OF_MEMORY);\n\t}\n\tpTpe->eEntryType = CONSTANT;\n\tcstrFinalize(pStrB);\n\t/* We obtain the length from the counted string object\n\t * (before we delete it). Later we might take additional\n\t * benefit from the counted string object.\n\t * 2005-09-09 rgerhards\n\t */\n\tpTpe->data.constant.iLenConstant = rsCStrLen(pStrB);\n\tCHKiRet(cstrConvSzStrAndDestruct(&pStrB, &pTpe->data.constant.pConstant, 0));\n\n\t*pp = p;\n\nfinalize_it:\n\tRETiRet;\n}\n\n/* Helper that checks to see if a property already has a format\n * type defined\n */\nstatic int hasFormat(struct templateEntry *pTpe) {\n\treturn (\n\t\tpTpe->data.field.options.bCSV ||\n\t\tpTpe->data.field.options.bJSON ||\n\t\tpTpe->data.field.options.bJSONf ||\n\t\tpTpe->data.field.options.bJSONr\n\t);\n}\n\n/* Helper to do_Parameter(). This parses the formatting options\n * specified in a template variable. It returns the passed-in pointer\n * updated to the next processed character.\n */\nstatic void doOptions(unsigned char **pp, struct templateEntry *pTpe)\n{\n\tregister unsigned char *p;\n\tunsigned char Buf[64];\n\tsize_t i;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\tassert(pTpe != NULL);\n\n\tp = *pp;\n\n\twhile(*p && *p != '%' && *p != ':') {\n\t\t/* outer loop - until end of options */\n\t\tmemset(Buf, 0, sizeof(Buf)); /* silence valgrind warnings */\n\t\ti = 0;\n\t\twhile((i < sizeof(Buf)-1) &&\n\t\t      *p && *p != '%' && *p != ':' && *p != ',') {\n\t\t\t/* inner loop - until end of ONE option */\n\t\t\tBuf[i++] = tolower((int)*p);\n\t\t\t++p;\n\t\t}\n\t\tBuf[i] = '\\0'; /* terminate */\n\t\t/* check if we need to skip oversize option */\n\t\twhile(*p && *p != '%' && *p != ':' && *p != ',')\n\t\t\t++p;\t/* just skip */\n\t\tif(*p == ',')\n\t\t\t++p; /* eat ',' */\n\t\t/* OK, we got the option, so now lets look what\n\t\t * it tells us...\n\t\t */\n\t\tif(!strcmp((char*)Buf, \"date-mysql\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtMySQLDate;\n\t\t} else if(!strcmp((char*)Buf, \"date-pgsql\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtPgSQLDate;\n\t\t} else if(!strcmp((char*)Buf, \"date-rfc3164\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtRFC3164Date;\n\t\t} else if(!strcmp((char*)Buf, \"date-rfc3164-buggyday\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtRFC3164BuggyDate;\n\t\t} else if(!strcmp((char*)Buf, \"date-rfc3339\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtRFC3339Date;\n\t\t} else if(!strcmp((char*)Buf, \"date-unixtimestamp\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtUnixDate;\n\t\t} else if(!strcmp((char*)Buf, \"date-subseconds\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtSecFrac;\n\t\t} else if(!strcmp((char*)Buf, \"date-wdayname\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtWDayName;\n\t\t} else if(!strcmp((char*)Buf, \"date-wday\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtWDay;\n\t\t} else if(!strcmp((char*)Buf, \"date-year\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtYear;\n\t\t} else if(!strcmp((char*)Buf, \"date-month\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtMonth;\n\t\t} else if(!strcmp((char*)Buf, \"date-day\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtDay;\n\t\t} else if(!strcmp((char*)Buf, \"date-hour\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtHour;\n\t\t} else if(!strcmp((char*)Buf, \"date-minute\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtMinute;\n\t\t} else if(!strcmp((char*)Buf, \"date-second\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtSecond;\n\t\t} else if(!strcmp((char*)Buf, \"date-tzoffshour\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtTZOffsHour;\n\t\t} else if(!strcmp((char*)Buf, \"date-tzoffsmin\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtTZOffsMin;\n\t\t} else if(!strcmp((char*)Buf, \"date-tzoffsdirection\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtTZOffsDirection;\n\t\t} else if (!strcmp((char*)Buf, \"date-ordinal\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtOrdinal;\n\t\t} else if (!strcmp((char*)Buf, \"date-week\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtWeek;\n\t\t} else if (!strcmp((char*)Buf, \"date-iso-week\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtISOWeek;\n\t\t} else if (!strcmp((char*)Buf, \"date-iso-week-year\")) {\n\t\t\tpTpe->data.field.eDateFormat = tplFmtISOWeekYear;\n\t\t} else if(!strcmp((char*)Buf, \"date-utc\")) {\n\t\t\tpTpe->data.field.options.bDateInUTC = 1;\n\t\t} else if(!strcmp((char*)Buf, \"lowercase\")) {\n\t\t\tpTpe->data.field.eCaseConv = tplCaseConvLower;\n\t\t} else if(!strcmp((char*)Buf, \"uppercase\")) {\n\t\t\tpTpe->data.field.eCaseConv = tplCaseConvUpper;\n\t\t} else if(!strcmp((char*)Buf, \"sp-if-no-1st-sp\")) {\n\t\t\tpTpe->data.field.options.bSPIffNo1stSP = 1;\n\t\t} else if(!strcmp((char*)Buf, \"compressspace\")) {\n\t\t\tpTpe->data.field.options.bCompressSP = 1;\n\t\t} else if(!strcmp((char*)Buf, \"escape-cc\")) {\n\t\t\tpTpe->data.field.options.bEscapeCC = 1;\n\t\t} else if(!strcmp((char*)Buf, \"drop-cc\")) {\n\t\t\tpTpe->data.field.options.bDropCC = 1;\n\t\t} else if(!strcmp((char*)Buf, \"space-cc\")) {\n\t\t\tpTpe->data.field.options.bSpaceCC = 1;\n\t\t} else if(!strcmp((char*)Buf, \"drop-last-lf\")) {\n\t\t\tpTpe->data.field.options.bDropLastLF = 1;\n\t\t} else if(!strcmp((char*)Buf, \"secpath-drop\")) {\n\t\t\tpTpe->data.field.options.bSecPathDrop = 1;\n\t\t} else if(!strcmp((char*)Buf, \"secpath-replace\")) {\n\t\t\tpTpe->data.field.options.bSecPathReplace = 1;\n\t\t} else if(!strcmp((char*)Buf, \"pos-end-relative\")) {\n\t\t\tpTpe->data.field.options.bFromPosEndRelative = 1;\n\t\t} else if(!strcmp((char*)Buf, \"fixed-width\")) {\n\t\t\tpTpe->data.field.options.bFixedWidth = 1;\n\t\t} else if(!strcmp((char*)Buf, \"csv\")) {\n\t\t\tif(hasFormat(pTpe)) {\n\t\t\t\tLogError(0, NO_ERRCODE, \"error: can only specify \"\n\t\t\t\t\t\"one option out of (json, jsonf, jsonr, jsonfr, csv) - csv ignored\");\n\t\t\t} else {\n\t\t\t\tpTpe->data.field.options.bCSV = 1;\n\t\t\t}\n\t\t} else if(!strcmp((char*)Buf, \"json\")) {\n\t\t\tif(hasFormat(pTpe)) {\n\t\t\t\tLogError(0, NO_ERRCODE, \"error: can only specify \"\n\t\t\t\t\t\"one option out of (json, jsonf, jsonr, jsonfr, csv) - json ignored\");\n\t\t\t} else {\n\t\t\t\tpTpe->data.field.options.bJSON = 1;\n\t\t\t}\n\t\t} else if(!strcmp((char*)Buf, \"jsonf\")) {\n\t\t\tif(hasFormat(pTpe)) {\n\t\t\t\tLogError(0, NO_ERRCODE, \"error: can only specify \"\n\t\t\t\t\t\"one option out of (json, jsonf, jsonr, jsonfr, csv) - jsonf ignored\");\n\t\t\t} else {\n\t\t\t\tpTpe->data.field.options.bJSONf = 1;\n\t\t\t}\n\t\t} else if(!strcmp((char*)Buf, \"jsonr\")) {\n\t\t\tif(hasFormat(pTpe)) {\n\t\t\t\tLogError(0, NO_ERRCODE, \"error: can only specify \"\n\t\t\t\t\t\"one option out of (json, jsonf, jsonr, jsonfr, csv) - jsonr ignored\");\n\t\t\t} else {\n\t\t\t\tpTpe->data.field.options.bJSONr = 1;\n\t\t\t}\n\t\t} else if(!strcmp((char*)Buf, \"jsonfr\")) {\n\t\t\tif(hasFormat(pTpe)) {\n\t\t\t\tLogError(0, NO_ERRCODE, \"error: can only specify \"\n\t\t\t\t\t\"one option out of (json, jsonf, jsonr, jsonfr, csv) - jsonfr ignored\");\n\t\t\t} else {\n\t\t\t\tpTpe->data.field.options.bJSONfr = 1;\n\t\t\t}\n\t\t} else if(!strcmp((char*)Buf, \"mandatory-field\")) {\n\t\t\t pTpe->data.field.options.bMandatory = 1;\n\t\t} else {\n\t\t\tLogError(0, NO_ERRCODE, \"template error: invalid field option '%s' \"\n\t\t\t\t\"specified - ignored\", Buf);\n\t\t }\n\t}\n\n\t*pp = p;\n}\n\n/* helper to tplAddLine. Parses a parameter and generates\n * the necessary structure.\n */\nstatic rsRetVal\ndo_Parameter(uchar **pp, struct template *pTpl)\n{\n\tuchar *p;\n\tcstr_t *pStrProp = NULL;\n\tcstr_t *pStrField = NULL;\n\tstruct templateEntry *pTpe;\n\tint iNum;\t/* to compute numbers */\n#ifdef FEATURE_REGEXP\n\t/* APR: variables for regex */\n\trsRetVal iRetLocal;\n\tint longitud;\n\tunsigned char *regex_char;\n\tunsigned char *regex_end;\n#endif\n\tDEFiRet;\n\n\tassert(pp != NULL);\n\tassert(*pp != NULL);\n\tassert(pTpl != NULL);\n\n\tp = (uchar*) *pp;\n\tCHKiRet(cstrConstruct(&pStrProp));\n\tCHKmalloc(pTpe = tpeConstruct(pTpl));\n\tpTpe->eEntryType = FIELD;\n\n\twhile(*p && *p != '%' && *p != ':') {\n\t\tcstrAppendChar(pStrProp, *p);\n\t\t++p;\n\t}\n\n\t/* got the name */\n\tcstrFinalize(pStrProp);\n\n\tCHKiRet(msgPropDescrFill(&pTpe->data.field.msgProp, cstrGetSzStrNoNULL(pStrProp),\n\t\tcstrLen(pStrProp)));\n\n\t/* Check frompos, if it has an R, then topos should be a regex */\n\tif(*p == ':') {\n\t\tpTpe->bComplexProcessing = 1;\n\t\t++p; /* eat ':' */\n#ifdef FEATURE_REGEXP\n\t\tif(*p == 'R') {\n\t\t\t/* APR: R found! regex alarm ! :) */\n\t\t\t++p;\t/* eat ':' */\n\n\t\t\t/* first come the regex type */\n\t\t\tif(*p == ',') {\n\t\t\t\t++p; /* eat ',' */\n\t\t\t\tif(p[0] == 'B' && p[1] == 'R' && p[2] == 'E' && (p[3] == ',' || p[3] == ':')) {\n\t\t\t\t\tpTpe->data.field.typeRegex = TPL_REGEX_BRE;\n\t\t\t\t\tp += 3; /* eat indicator sequence */\n\t\t\t\t} else if(p[0] == 'E' && p[1] == 'R' && p[2] == 'E' && (p[3] == ',' || p[3] == ':')) {\n\t\t\t\t\tpTpe->data.field.typeRegex = TPL_REGEX_ERE;\n\t\t\t\t\tp += 3; /* eat indicator sequence */\n\t\t\t\t} else {\n\t\t\t\t\tLogError(0, NO_ERRCODE, \"error: invalid regular expression \"\n\t\t\t\t\t\t\t\"type, rest of line %s\", (char*) p);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* now check for submatch ID */\n\t\t\tpTpe->data.field.iSubMatchToUse = 0;\n\t\t\tif(*p == ',') {\n\t\t\t\t/* in this case a number follows, which indicates which match\n\t\t\t\t * shall be used. This must be a single digit.\n\t\t\t\t */\n\t\t\t\t++p; /* eat ',' */\n\t\t\t\tif(isdigit((int) *p)) {\n\t\t\t\t\tpTpe->data.field.iSubMatchToUse = *p - '0';\n\t\t\t\t\t++p; /* eat digit */\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* now pull what to do if we do not find a match */\n\t\t\tif(*p == ',') {\n\t\t\t\t++p; /* eat ',' */\n\t\t\t\tif(p[0] == 'D' && p[1] == 'F' && p[2] == 'L' && p[3] == 'T'\n\t\t\t\t   && (p[4] == ',' || p[4] == ':')) {\n\t\t\t\t\tpTpe->data.field.nomatchAction = TPL_REGEX_NOMATCH_USE_DFLTSTR;\n\t\t\t\t\tp += 4; /* eat indicator sequence */\n\t\t\t\t} else if(p[0] == 'B' && p[1] == 'L' && p[2] == 'A' && p[3] == 'N' && p[4] == 'K'\n\t\t\t\t          && (p[5] == ',' || p[5] == ':')) {\n\t\t\t\t\tpTpe->data.field.nomatchAction = TPL_REGEX_NOMATCH_USE_BLANK;\n\t\t\t\t\tp += 5; /* eat indicator sequence */\n\t\t\t\t} else if(p[0] == 'F' && p[1] == 'I' && p[2] == 'E' && p[3] == 'L' && p[4] == 'D'\n\t\t\t\t          && (p[5] == ',' || p[5] == ':')) {\n\t\t\t\t\tpTpe->data.field.nomatchAction = TPL_REGEX_NOMATCH_USE_WHOLE_FIELD;\n\t\t\t\t\tp += 5; /* eat indicator sequence */\n\t\t\t\t} else if(p[0] == 'Z' && p[1] == 'E' && p[2] == 'R' && p[3] == 'O'\n\t\t\t\t          && (p[4] == ',' || p[4] == ':')) {\n\t\t\t\t\tpTpe->data.field.nomatchAction = TPL_REGEX_NOMATCH_USE_ZERO;\n\t\t\t\t\tp += 4; /* eat indicator sequence */\n\t\t\t\t} else if(p[0] == ',') { /* empty, use default */\n\t\t\t\t\tpTpe->data.field.nomatchAction = TPL_REGEX_NOMATCH_USE_DFLTSTR;\n\t\t\t\t\t /* do NOT eat indicator sequence, as this was already eaten - the\n\t\t\t\t\t  * comma itself is already part of the next field.\n\t\t\t\t\t  */\n\t\t\t\t} else {\n\t\t\t\t\tLogError(0, NO_ERRCODE, \"template %s error: invalid regular \"\n\t\t\t\t\t\t\"expression type, rest of line %s\",\n\t\t\t\t\t\tpTpl->pszName, (char*) p);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* now check for match ID */\n\t\t\tpTpe->data.field.iMatchToUse = 0;\n\t\t\tif(*p == ',') {\n\t\t\t\t/* in this case a number follows, which indicates which match\n\t\t\t\t * shall be used. This must be a single digit.\n\t\t\t\t */\n\t\t\t\t++p; /* eat ',' */\n\t\t\t\tif(isdigit((int) *p)) {\n\t\t\t\t\tpTpe->data.field.iMatchToUse = *p - '0';\n\t\t\t\t\t++p; /* eat digit */\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(*p != ':') {\n\t\t\t\t/* There is something more than an R , this is invalid ! */\n\t\t\t\t/* Complain on extra characters */\n\t\t\t\tLogError(0, NO_ERRCODE, \"error: invalid character in frompos \"\n\t\t\t\t\t\t\"after \\\"R\\\", property: '%%%s'\", (char*) *pp);\n\t\t\t} else {\n\t\t\t\tpTpe->data.field.has_regex = 1;\n\t\t\t\tdbgprintf(\"we have a regexp and use match #%d, submatch #%d\\n\",\n\t\t\t\t\t  pTpe->data.field.iMatchToUse, pTpe->data.field.iSubMatchToUse);\n\t\t\t}\n\t\t} else {\n\t\t\t/* now we fall through the \"regular\" FromPos code */\n#endif /* #ifdef FEATURE_REGEXP */\n\t\t\tif(*p == 'F') {\n#ifdef STRICT_GPLV3\n\t\t\t\tpTpe->data.field.field_expand = 0;\n#endif\n\t\t\t\t/* we have a field counter, so indicate it in the template */\n\t\t\t\t++p; /* eat 'F' */\n\t\t\t\tif (*p == ':') {\n\t\t\t\t\t/* no delimiter specified, so use the default (HT) */\n\t\t\t\t\tpTpe->data.field.has_fields = 1;\n\t\t\t\t\tpTpe->data.field.field_delim = 9;\n\t\t\t\t} else if (*p == ',') {\n\t\t\t\t\t++p; /* eat ',' */\n\t\t\t\t\t/* configured delimiter follows, so we need to obtain\n\t\t\t\t\t * it. Important: the following number must be the\n\t\t\t\t\t * **DECIMAL** ASCII value of the delimiter character.\n\t\t\t\t\t */\n\t\t\t\t\tpTpe->data.field.has_fields = 1;\n\t\t\t\t\tif(!isdigit((int)*p)) {\n\t\t\t\t\t\t/* complain and use default */\n\t\t\t\t\t\tLogError(0, NO_ERRCODE, \"error: invalid character in \"\n\"frompos after \\\"F,\\\", property: '%%%s' - using 9 (HT) as field delimiter\",\n\t\t\t\t\t\t    (char*) *pp);\n\t\t\t\t\t\tpTpe->data.field.field_delim = 9;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tiNum = 0;\n\t\t\t\t\t\twhile(isdigit((int)*p))\n\t\t\t\t\t\t\tiNum = iNum * 10 + *p++ - '0';\n\t\t\t\t\t\tif(iNum < 0 || iNum > 255) {\n\t\t\t\t\t\t\tLogError(0, NO_ERRCODE, \"error: non-USASCII delimiter \"\n\"character value %d in template - using 9 (HT) as substitute\", iNum);\n\t\t\t\t\t\t\tpTpe->data.field.field_delim = 9;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpTpe->data.field.field_delim = iNum;\n#\t\t\t\t\t\t\tifdef STRICT_GPLV3\n\t\t\t\t\t\t\tif (*p == '+') {\n\t\t\t\t\t\t\t\tpTpe->data.field.field_expand = 1;\n\t\t\t\t\t\t\t\tp ++;\n\t\t\t\t\t\t\t}\n#\t\t\t\t\t\t\tendif\n\t\t\t\t\t\t\tif(*p == ',') { /* real fromPos? */\n\t\t\t\t\t\t\t\t++p;\n\t\t\t\t\t\t\t\tiNum = 0;\n\t\t\t\t\t\t\t\twhile(isdigit((int)*p))\n\t\t\t\t\t\t\t\t\tiNum = iNum * 10 + *p++ - '0';\n\t\t\t\t\t\t\t\tpTpe->data.field.iFromPos = iNum;\n\t\t\t\t\t\t\t} else if(*p != ':') {\n\t\t\t\t\t\t\t\tparser_errmsg(\"error: invalid character \"\n\t\t\t\t\t\t\t\t\"'%c' in frompos after \\\"F,\\\", property: '%s' \"\n\t\t\t\t\t\t\t\t\"be sure to use DECIMAL character \"\n\t\t\t\t\t\t\t\t\"codes!\", *p, (char*) *pp);\n\t\t\t\t\t\t\t\tABORT_FINALIZE(RS_RET_SYNTAX_ERROR);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* invalid character after F, so we need to reject\n\t\t\t\t\t * this.\n\t\t\t\t\t */\n\t\t\t\t\tLogError(0, NO_ERRCODE, \"error: invalid character in frompos \"\n\t\t\t\t\t\t\"after \\\"F\\\", property: '%%%s'\", (char*) *pp);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/* we now have a simple offset in frompos (the previously \"normal\" case) */\n\t\t\t\tiNum = 0;\n\t\t\t\twhile(isdigit((int)*p))\n\t\t\t\t\tiNum = iNum * 10 + *p++ - '0';\n\t\t\t\tpTpe->data.field.iFromPos = iNum;\n\t\t\t\t/* skip to next known good */\n\t\t\t\twhile(*p && *p != '%' && *p != ':') {\n\t\t\t\t\t/* TODO: complain on extra characters */\n\t\t\t\t\tdbgprintf(\"error: extra character in frompos: '%s'\\n\", p);\n\t\t\t\t\t++p;\n\t\t\t\t}\n\t\t\t}\n#ifdef FEATURE_REGEXP\n\t\t}\n#endif /* #ifdef FEATURE_REGEXP */\n\t}\n\t/* check topos  (holds an regex if FromPos is \"R\"*/\n\tif(*p == ':') {\n\t\t++p; /* eat ':' */\n\n#ifdef FEATURE_REGEXP\n\t\tif (pTpe->data.field.has_regex) {\n\t\t\tdbgprintf(\"debug: has regex \\n\");\n\t\t\t/* APR 2005-09 I need the string that represent the regex */\n\t\t\t/* The regex end is: \"--end\" */\n\t\t\t/* TODO : this is hardcoded and cant be escaped, please change */\n\t\t\tregex_end = (unsigned char*) strstr((char*)p, \"--end\");\n\t\t\tif (regex_end == NULL) {\n\t\t\t\tdbgprintf(\"error: can not find regex end in: '%s'\\n\", p);\n\t\t\t\tpTpe->data.field.has_regex = 0;\n\t\t\t} else {\n\t\t\t\t/* We get here ONLY if the regex end was found */\n\t\t\t\tlongitud = regex_end - p;\n\t\t\t\t/* Malloc for the regex string */\n\t\t\t\tregex_char = (unsigned char *) malloc(longitud + 1);\n\t\t\t\tif(regex_char == NULL) {\n\t\t\t\t\tdbgprintf(\"Could not allocate memory for template parameter!\\n\");\n\t\t\t\t\tpTpe->data.field.has_regex = 0;\n\t\t\t\t\tABORT_FINALIZE(RS_RET_OUT_OF_MEMORY);\n\t\t\t\t}\n\n\t\t\t\t/* Get the regex string for compiling later */\n\t\t\t\tmemcpy(regex_char, p, longitud);\n\t\t\t\tregex_char[longitud] = '\\0';\n\t\t\t\tdbgprintf(\"debug: regex detected: '%s'\\n\", regex_char);\n\t\t\t\t/* Now i compile the regex */\n\t\t\t\t/* Remember that the re is an attribute of the Template entry */\n\t\t\t\tif((iRetLocal = objUse(regexp, LM_REGEXP_FILENAME)) == RS_RET_OK) {\n\t\t\t\t\tint iOptions;\n\t\t\t\t\tiOptions = (pTpe->data.field.typeRegex == TPL_REGEX_ERE) ? REG_EXTENDED : 0;\n\t\t\t\t\tint errcode;\n\t\t\t\t\tif((errcode = regexp.regcomp(&(pTpe->data.field.re),\n\t\t\t\t\t\t(char*) regex_char, iOptions) != 0)) {\n\t\t\t\t\t\tchar errbuff[512];\n\t\t\t\t\t\tregexp.regerror(errcode, &(pTpe->data.field.re),\n\t\t\t\t\t\t\terrbuff, sizeof(errbuff));\n\t\t\t\t\t\tDBGPRINTF(\"Template.c: Error in regular expression: %s\\n\", errbuff);\n\t\t\t\t\t\tpTpe->data.field.has_regex = 2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* regexp object could not be loaded */\n\t\t\t\t\tdbgprintf(\"error %d trying to load regexp library - this may be desired \"\n\t\t\t\t\t\"and thus OK\", iRetLocal);\n\t\t\t\t\tif(bFirstRegexpErrmsg) {\n\t\t\t\t\t/* prevent flood of messages, maybe even an endless loop! */\n\t\t\t\t\t\tbFirstRegexpErrmsg = 0;\n\t\t\t\t\t\tLogError(0, NO_ERRCODE, \"regexp library could not be loaded \"\n\t\t\t\t\t\t\t\"(error %d), regexp ignored\", iRetLocal);\n\t\t\t\t\t}\n\t\t\t\t\tpTpe->data.field.has_regex = 2;\n\t\t\t\t}\n\n\t\t\t\t/* Finally we move the pointer to the end of the regex\n\t\t\t\t * so it aint parsed twice or something weird */\n\t\t\t\tp = regex_end + 5/*strlen(\"--end\")*/;\n\t\t\t\tfree(regex_char);\n\t\t\t}\n\t\t} else if(*p == '$') {\n\t\t\t/* shortcut for \"end of message */\n\t\t\tp++; /* eat '$' */\n\t\t\t/* in this case, we do a quick, somewhat dirty but totally\n\t\t\t * legitimate trick: we simply use a topos that is higher than\n\t\t\t * potentially ever can happen. The code below checks that no copy\n\t\t\t * will occur after the end of string, so this is perfectly legal.\n\t\t\t * rgerhards, 2006-10-17\n\t\t\t */\n\t\t\tpTpe->data.field.iToPos = 9999999;\n\t\t} else {\n\t\t\t/* fallthrough to \"regular\" ToPos code */\n#endif /* #ifdef FEATURE_REGEXP */\n\n\t\t\tif(pTpe->data.field.has_fields == 1) {\n\t\t\t\tiNum = 0;\n\t\t\t\twhile(isdigit((int)*p))\n\t\t\t\t\tiNum = iNum * 10 + *p++ - '0';\n\t\t\t\tpTpe->data.field.iFieldNr = iNum;\n\t\t\t\tif(*p == ',') { /* get real toPos? */\n\t\t\t\t\t++p;\n\t\t\t\t\tiNum = 0;\n\t\t\t\t\twhile(isdigit((int)*p))\n\t\t\t\t\t\tiNum = iNum * 10 + *p++ - '0';\n\t\t\t\t\tpTpe->data.field.iToPos = iNum;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tiNum = 0;\n\t\t\t\twhile(isdigit((int)*p))\n\t\t\t\t\tiNum = iNum * 10 + *p++ - '0';\n\t\t\t\tpTpe->data.field.iToPos = iNum;\n\t\t\t}\n\t\t\t/* skip to next known good */\n\t\t\twhile(*p && *p != '%' && *p != ':') {\n\t\t\t\t/* TODO: complain on extra characters */\n\t\t\t\tdbgprintf(\"error: extra character in frompos: '%s'\\n\", p);\n\t\t\t\t++p;\n\t\t\t}\n#ifdef FEATURE_REGEXP\n\t\t}\n#endif /* #ifdef FEATURE_REGEXP */\n\t}\n\n\t/* check options */\n\tif(*p == ':') {\n\t\t++p; /* eat ':' */\n\t\tdoOptions(&p, pTpe);\n\t}\n\n\tif(pTpe->data.field.options.bFromPosEndRelative) {\n\t\tif(pTpe->data.field.iToPos > pTpe->data.field.iFromPos) {\n\t\t\tiNum = pTpe->data.field.iToPos;\n\t\t\tpTpe->data.field.iToPos = pTpe->data.field.iFromPos;\n\t\t\tpTpe->data.field.iFromPos = iNum;\n\t\t}\n\t} else {\n\t\tif(pTpe->data.field.iToPos < pTpe->data.field.iFromPos) {\n\t\t\tiNum = pTpe->data.field.iToPos;\n\t\t\tpTpe->data.field.iToPos = pTpe->data.field.iFromPos;\n\t\t\tpTpe->data.field.iFromPos = iNum;\n\t\t}\n\t}\n\n\n\t/* check field name */\n\tif(*p == ':') {\n\t\t++p; /* eat ':' */\n\t\tCHKiRet(cstrConstruct(&pStrField));\n\t\twhile(*p != ':' && *p != '%' && *p != '\\0') {\n\t\t\tcstrAppendChar(pStrField, *p);\n\t\t\t++p;\n\t\t}\n\t\tcstrFinalize(pStrField);\n\t}\n\n\t/* save field name - if none was given, use the property name instead */\n\tif(pStrField == NULL) {\n\t\tif(pTpe->data.field.msgProp.id == PROP_CEE || pTpe->data.field.msgProp.id == PROP_LOCAL_VAR) {\n\t\t\t/* in CEE case, we remove \"$!\"/\"$.\" from the fieldname - it's just our indicator */\n\t\t\tpTpe->fieldName = ustrdup(cstrGetSzStrNoNULL(pStrProp)+2);\n\t\t\tpTpe->lenFieldName = cstrLen(pStrProp)-2;\n\t\t} else {\n\t\t\tpTpe->fieldName = ustrdup(cstrGetSzStrNoNULL(pStrProp));\n\t\t\tpTpe->lenFieldName = cstrLen(pStrProp);\n\t\t}\n\t} else {\n\t\tpTpe->fieldName = ustrdup(cstrGetSzStrNoNULL(pStrField));\n\t\tpTpe->lenFieldName = ustrlen(pTpe->fieldName);\n\t\tcstrDestruct(&pStrField);\n\t}\n\tif(pTpe->fieldName == NULL) {\n\t\tDBGPRINTF(\"template/do_Parameter: fieldName is NULL!\\n\");\n\t\tABORT_FINALIZE(RS_RET_OUT_OF_MEMORY);\n\t}\n\tif(*p) ++p; /* eat '%' */\n\t*pp = p;\nfinalize_it:\n\tif(pStrProp != NULL)\n\t\tcstrDestruct(&pStrProp);\n\tRETiRet;\n}\n\n\n/* Add a new entry for a template module.\n * returns pointer to new object if it succeeds, NULL otherwise.\n * rgerhards, 2010-05-31\n */\nstatic rsRetVal\ntplAddTplMod(struct template *pTpl, uchar** ppRestOfConfLine)\n{\n\tuchar *pSrc;\n\tuchar szMod[2048];\n\tunsigned lenMod;\n\tstrgen_t *pStrgen;\n\tDEFiRet;\n\n\tpSrc = *ppRestOfConfLine;\n\tlenMod = 0;\n\twhile(*pSrc && !isspace(*pSrc) && lenMod < sizeof(szMod) - 1) {\n\t\tszMod[lenMod] = *pSrc++;\n\t\tlenMod++;\n\n\t}\n\tszMod[lenMod] = '\\0';\n\t*ppRestOfConfLine = pSrc;\n\tCHKiRet(strgen.FindStrgen(&pStrgen, szMod));\n\tpTpl->pStrgen = pStrgen->pModule->mod.sm.strgen;\n\tDBGPRINTF(\"template bound to strgen '%s'\\n\", szMod);\n\t/* check if the name potentially contains some well-known options\n\t * Note: we have opted to let the name contain all options. This sounds\n\t * useful, because the strgen MUST actually implement a specific set\n\t * of options. Doing this via the name looks to the enduser as if the\n\t * regular syntax were used, and it make sure the strgen postively\n\t * acknowledged implementing the option. -- rgerhards, 2011-03-21\n\t */\n\tif(lenMod > 6 && !strcasecmp((char*) szMod + lenMod - 7, \",stdsql\")) {\n\t\tpTpl->optFormatEscape = STDSQL_ESCAPE;\n\t\tDBGPRINTF(\"strgen supports the stdsql option\\n\");\n\t} else if(lenMod > 3 && !strcasecmp((char*) szMod+ lenMod - 4, \",sql\")) {\n\t\tpTpl->optFormatEscape = SQL_ESCAPE;\n\t\tDBGPRINTF(\"strgen supports the sql option\\n\");\n\t} else if(lenMod > 4 && !strcasecmp((char*) szMod+ lenMod - 4, \",json\")) {\n\t\tpTpl->optFormatEscape = JSON_ESCAPE;\n\t\tDBGPRINTF(\"strgen supports the json option\\n\");\n\t}\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* Add a new template line\n * returns pointer to new object if it succeeds, NULL otherwise.\n */\nstruct template *tplAddLine(rsconf_t *conf, const char* pName, uchar** ppRestOfConfLine)\n{\n\tstruct template *pTpl;\n\tunsigned char *p;\n\tint bDone;\n\tsize_t i;\n\trsRetVal localRet;\n\n\tassert(pName != NULL);\n\tassert(ppRestOfConfLine != NULL);\n\tif((pTpl = tplConstruct(conf)) == NULL)\n\t\treturn NULL;\n\t\n\tDBGPRINTF(\"tplAddLine processing template '%s'\\n\", pName);\n\tpTpl->iLenName = strlen(pName);\n\tpTpl->pszName = (char*) malloc(pTpl->iLenName + 1);\n\tif(pTpl->pszName == NULL) {\n\t\tdbgprintf(\"tplAddLine could not alloc memory for template name!\");\n\t\tpTpl->iLenName = 0;\n\t\treturn NULL;\n\t\t/* I know - we create a memory leak here - but I deem\n\t\t * it acceptable as it is a) a very small leak b) very\n\t\t * unlikely to happen. rgerhards 2004-11-17\n\t\t */\n\t}\n\tmemcpy(pTpl->pszName, pName, pTpl->iLenName + 1);\n\n\t/* now actually parse the line */\n\tp = *ppRestOfConfLine;\n\tassert(p != NULL);\n\n\twhile(isspace((int)*p))/* skip whitespace */\n\t\t++p;\n\t\n\tswitch(*p) {\n\tcase '\"': /* just continue */\n\t\tbreak;\n\tcase '=':\n\t\t*ppRestOfConfLine = p + 1;\n\t\tlocalRet = tplAddTplMod(pTpl, ppRestOfConfLine);\n\t\tif(localRet != RS_RET_OK) {\n\t\t\tLogError(0, localRet, \"Template '%s': error %d defining template via strgen module\",\n\t\t\t\t\tpTpl->pszName, localRet);\n\t\t\t/* we simply make the template defunct in this case by setting\n\t\t\t * its name to a zero-string. We do not free it, as this would\n\t\t\t * require additional code and causes only a very small memory\n\t\t\t * consumption. Memory is freed, however, in normal operation\n\t\t\t * and most importantly by HUPing syslogd.\n\t\t\t */\n\t\t\t*pTpl->pszName = '\\0';\n\t\t}\n\t\treturn NULL;\n\tdefault:\n\t\tdbgprintf(\"Template '%s' invalid, does not start with '\\\"'!\\n\", pTpl->pszName);\n\t\t/* we simply make the template defunct in this case by setting\n\t\t * its name to a zero-string. We do not free it, as this would\n\t\t * require additional code and causes only a very small memory\n\t\t * consumption.\n\t\t */\n\t\t*pTpl->pszName = '\\0';\n\t\treturn NULL;\n\t}\n\t++p;\n\n\t/* we finally go to the actual template string - so let's have some fun... */\n\tbDone = *p ? 0 : 1;\n\twhile(!bDone) {\n\t\tswitch(*p) {\n\t\t\tcase '\\0':\n\t\t\t\tbDone = 1;\n\t\t\t\tbreak;\n\t\t\tcase '%': /* parameter */\n\t\t\t\t++p; /* eat '%' */\n\t\t\t\tif(do_Parameter(&p, pTpl) != RS_RET_OK) {\n\t\t\t\t\tdbgprintf(\"tplAddLine error: parameter invalid\");\n\t\t\t\t\treturn NULL;\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tdefault: /* constant */\n\t\t\t\tdo_Constant(&p, pTpl, 1);\n\t\t\t\tbreak;\n\t\t}\n\t\tif(*p == '\"') {/* end of template string? */\n\t\t\t++p;\t/* eat it! */\n\t\t\tbDone = 1;\n\t\t}\n\t}\n\t\n\t/* we now have the template - let's look at the options (if any)\n\t * we process options until we reach the end of the string or\n\t * an error occurs - whichever is first.\n\t */\n\twhile(*p) {\n\t\twhile(isspace((int)*p))/* skip whitespace */\n\t\t\t++p;\n\n\t\tif(*p != ',')\n\t\t\tbreak;\n\t\t++p; /* eat ',' */\n\n\t\twhile(isspace((int)*p))/* skip whitespace */\n\t\t\t++p;\n\n\t\t/* read option word */\n\t\tchar optBuf[128] = { '\\0' }; /* buffer for options - should be more than enough... */\n\t\ti = 0;\n\t\twhile((i < (sizeof(optBuf) - 1))\n\t\t      && *p && *p != '=' && *p !=',' && *p != '\\n') {\n\t\t\toptBuf[i++] = tolower((int)*p);\n\t\t\t++p;\n\t\t}\n\t\toptBuf[i] = '\\0';\n\n\t\tif(*p == '\\n')\n\t\t\t++p;\n\n\t\t/* as of now, the no form is nonsense... but I do include\n\t\t * it anyhow... ;) rgerhards 2004-11-22\n\t\t */\n\t\tif(!strcmp(optBuf, \"stdsql\")) {\n\t\t\tpTpl->optFormatEscape = STDSQL_ESCAPE;\n\t\t} else if(!strcmp(optBuf, \"json\")) {\n\t\t\tpTpl->optFormatEscape = JSON_ESCAPE;\n\t\t} else if(!strcmp(optBuf, \"sql\")) {\n\t\t\tpTpl->optFormatEscape = SQL_ESCAPE;\n\t\t} else if(!strcmp(optBuf, \"nosql\")) {\n\t\t\tpTpl->optFormatEscape = NO_ESCAPE;\n\t\t} else if(!strcmp(optBuf, \"casesensitive\")) {\n\t\t\tpTpl->optCaseSensitive = 1;\n\t\t} else {\n\t\t\tdbgprintf(\"Invalid option '%s' ignored.\\n\", optBuf);\n\t\t}\n\t}\n\n\t*ppRestOfConfLine = p;\n\tapply_case_sensitivity(pTpl);\n\n\treturn(pTpl);\n}\n\nstatic rsRetVal\ncreateConstantTpe(struct template *pTpl, struct cnfobj *o)\n{\n\tstruct templateEntry *pTpe;\n\tes_str_t *value = NULL; /* init just to keep compiler happy - mandatory parameter */\n\tint i;\n\tint is_jsonf = 0;\n\tstruct cnfparamvals *pvals = NULL;\n\tstruct json_object *json = NULL;\n\tstruct json_object *jval = NULL;\n\tuchar *outname = NULL;\n\tDEFiRet;\n\n\t/* pull params */\n\tpvals = nvlstGetParams(o->nvlst, &pblkConstant, NULL);\n\tif(pvals == NULL) {\n\t\tparser_errmsg(\"error processing template parameters\");\n\t\tABORT_FINALIZE(RS_RET_MISSING_CNFPARAMS);\n\t}\n\tcnfparamsPrint(&pblkConstant, pvals);\n\t\n\tfor(i = 0 ; i < pblkConstant.nParams ; ++i) {\n\t\tif(!pvals[i].bUsed)\n\t\t\tcontinue;\n\t\tif(!strcmp(pblkConstant.descr[i].name, \"value\")) {\n\t\t\tvalue = pvals[i].val.d.estr;\n\t\t} else if(!strcmp(pblkConstant.descr[i].name, \"outname\")) {\n\t\t\toutname = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblkConstant.descr[i].name, \"format\")) {\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"jsonf\", sizeof(\"jsonf\")-1)) {\n\t\t\t\tis_jsonf = 1;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid format type '%s' for constant\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else {\n\t\t\tLogError(0, RS_RET_INTERNAL_ERROR,\n\t\t\t\t\"template:constantTpe: program error, non-handled \"\n\t\t\t\t\"param '%s'\\n\", pblkConstant.descr[i].name);\n\t\t}\n\t}\n\n\tif(is_jsonf && outname == NULL) {\n\t\tparser_errmsg(\"constant set to format jsonf, but outname not specified - aborting\");\n\t\tABORT_FINALIZE(RS_RET_ERR);\n\t}\n\n\t/* just double-check */\n\tassert(value != NULL);\n\n\t/* apply */\n\tCHKmalloc(pTpe = tpeConstruct(pTpl));\n\tes_unescapeStr(value);\n\tpTpe->eEntryType = CONSTANT;\n\tpTpe->fieldName = outname;\n\tif(outname != NULL)\n\t\tpTpe->lenFieldName = ustrlen(outname);\n\tif(is_jsonf) {\n\t\tCHKmalloc(json = json_object_new_object());\n\t\tconst char *sz = es_str2cstr(value, NULL);\n\t\tCHKmalloc(sz);\n\t\tCHKmalloc(jval = json_object_new_string(sz));\n\t\tfree((void*)sz);\n\t\tjson_object_object_add(json, (char*)outname, jval);\n\t\tCHKmalloc(sz = json_object_get_string(json));\n\t\tconst size_t len_json = strlen(sz) - 4;\n\t\tCHKmalloc(pTpe->data.constant.pConstant = (uchar*) strndup(sz+2, len_json));\n\t\tpTpe->data.constant.iLenConstant = ustrlen(pTpe->data.constant.pConstant);\n\t\tjson_object_put(json);\n\t} else {\n\t\tpTpe->data.constant.iLenConstant = es_strlen(value);\n\t\tpTpe->data.constant.pConstant = (uchar*)es_str2cstr(value, NULL);\n\t}\n\nfinalize_it:\n\tif(pvals != NULL)\n\t\tcnfparamvalsDestruct(pvals, &pblkConstant);\n\tRETiRet;\n}\n\nstatic rsRetVal\ncreatePropertyTpe(struct template *pTpl, struct cnfobj *o)\n{\n\tstruct templateEntry *pTpe;\n\tuchar *name = NULL;\n\tuchar *outname = NULL;\n\tint i;\n\tint droplastlf = 0;\n\tint spifno1stsp = 0;\n\tint mandatory = 0;\n\tint frompos = -1;\n\tint topos = 0;\n\tint topos_set = 0;\n\tint fieldnum = -1;\n\tint fielddelim = 9; /* default is HT (USACSII 9) */\n\tint fixedwidth = 0;\n\tint re_matchToUse = 0;\n\tint re_submatchToUse = 0;\n\tint bComplexProcessing = 0;\n\tint bPosRelativeToEnd = 0;\n\tint bDateInUTC = 0;\n\tint bCompressSP = 0;\n\tunsigned dataType = TPE_DATATYPE_STRING;\n\tunsigned onEmpty = TPE_DATAEMPTY_KEEP;\n\tchar *re_expr = NULL;\n\tstruct cnfparamvals *pvals = NULL;\n\tenum {F_NONE, F_CSV, F_JSON, F_JSONF, F_JSONR, F_JSONFR} formatType = F_NONE;\n\tenum {CC_NONE, CC_ESCAPE, CC_SPACE, CC_DROP} controlchr = CC_NONE;\n\tenum {SP_NONE, SP_DROP, SP_REPLACE} secpath = SP_NONE;\n\tenum tplFormatCaseConvTypes caseconv = tplCaseConvNo;\n\tenum tplFormatTypes datefmt = tplFmtDefault;\n\tenum tplRegexType re_type = TPL_REGEX_BRE;\n\tenum tlpRegexNoMatchType re_nomatchType = TPL_REGEX_NOMATCH_USE_DFLTSTR;\n\tDEFiRet;\n\n\t/* pull params */\n\tpvals = nvlstGetParams(o->nvlst, &pblkProperty, NULL);\n\tif(pvals == NULL) {\n\t\tparser_errmsg(\"error processing template entry config parameters\");\n\t\tABORT_FINALIZE(RS_RET_MISSING_CNFPARAMS);\n\t}\n\tcnfparamsPrint(&pblkProperty, pvals);\n\t\n\tfor(i = 0 ; i < pblkProperty.nParams ; ++i) {\n\t\tif(!pvals[i].bUsed)\n\t\t\tcontinue;\n\t\tif(!strcmp(pblkProperty.descr[i].name, \"name\")) {\n\t\t\tname = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"datatype\")) {\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"string\", sizeof(\"string\")-1)) {\n\t\t\t\tdataType = TPE_DATATYPE_STRING;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"number\", sizeof(\"number\")-1)) {\n\t\t\t\tdataType = TPE_DATATYPE_NUMBER;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"bool\", sizeof(\"bool\")-1)) {\n\t\t\t\tdataType = TPE_DATATYPE_BOOL;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"auto\", sizeof(\"auto\")-1)) {\n\t\t\t\tdataType = TPE_DATATYPE_AUTO;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid dataType '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"onempty\")) {\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"keep\", sizeof(\"keep\")-1)) {\n\t\t\t\tonEmpty = TPE_DATAEMPTY_KEEP;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"skip\", sizeof(\"skip\")-1)) {\n\t\t\t\tonEmpty = TPE_DATAEMPTY_SKIP;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"null\", sizeof(\"null\")-1)) {\n\t\t\t\tonEmpty = TPE_DATAEMPTY_NULL;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid onEmpty value '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"droplastlf\")) {\n\t\t\tdroplastlf = pvals[i].val.d.n;\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"fixedwidth\")) {\n\t\t\tfixedwidth = pvals[i].val.d.n;\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"mandatory\")) {\n\t\t\tmandatory = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"spifno1stsp\")) {\n\t\t\tspifno1stsp = pvals[i].val.d.n;\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"outname\")) {\n\t\t\toutname = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"position.from\")) {\n\t\t\tfrompos = pvals[i].val.d.n;\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"position.to\")) {\n\t\t\ttopos = pvals[i].val.d.n;\n\t\t\ttopos_set = 1;\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"position.relativetoend\")) {\n\t\t\tbPosRelativeToEnd = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"field.number\")) {\n\t\t\tfieldnum = pvals[i].val.d.n;\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"field.delimiter\")) {\n\t\t\tfielddelim = pvals[i].val.d.n;\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"regex.expression\")) {\n\t\t\tre_expr = es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\tbComplexProcessing = 1;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"regex.type\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"BRE\", sizeof(\"BRE\")-1)) {\n\t\t\t\tre_type = TPL_REGEX_BRE;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"ERE\", sizeof(\"ERE\")-1)) {\n\t\t\t\tre_type = TPL_REGEX_ERE;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid regex.type '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"regex.nomatchmode\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"DFLT\", sizeof(\"DFLT\")-1)) {\n\t\t\t\tre_nomatchType = TPL_REGEX_NOMATCH_USE_DFLTSTR;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"BLANK\", sizeof(\"BLANK\")-1)) {\n\t\t\t\tre_nomatchType = TPL_REGEX_NOMATCH_USE_BLANK;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"FIELD\", sizeof(\"FIELD\")-1)) {\n\t\t\t\tre_nomatchType = TPL_REGEX_NOMATCH_USE_WHOLE_FIELD;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"ZERO\", sizeof(\"ZERO\")-1)) {\n\t\t\t\tre_nomatchType = TPL_REGEX_NOMATCH_USE_ZERO;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid format type '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"regex.match\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tre_matchToUse = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"regex.submatch\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tre_submatchToUse = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"format\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"csv\", sizeof(\"csv\")-1)) {\n\t\t\t\tformatType = F_CSV;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"json\", sizeof(\"json\")-1)) {\n\t\t\t\tformatType = F_JSON;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"jsonf\", sizeof(\"jsonf\")-1)) {\n\t\t\t\tformatType = F_JSONF;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"jsonr\", sizeof(\"jsonr\")-1)) {\n\t\t\t\tformatType = F_JSONR;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"jsonfr\", sizeof(\"jsonfr\")-1)) {\n\t\t\t\tformatType = F_JSONFR;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid format type '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"controlcharacters\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"escape\", sizeof(\"escape\")-1)) {\n\t\t\t\tcontrolchr = CC_ESCAPE;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"space\", sizeof(\"space\")-1)) {\n\t\t\t\tcontrolchr = CC_SPACE;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"drop\", sizeof(\"drop\")-1)) {\n\t\t\t\tcontrolchr = CC_DROP;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid controlcharacter mode '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"securepath\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"drop\", sizeof(\"drop\")-1)) {\n\t\t\t\tsecpath = SP_DROP;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"replace\", sizeof(\"replace\")-1)) {\n\t\t\t\tsecpath = SP_REPLACE;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid securepath mode '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"caseconversion\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"lower\", sizeof(\"lower\")-1)) {\n\t\t\t\tcaseconv = tplCaseConvLower;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"upper\", sizeof(\"upper\")-1)) {\n\t\t\t\tcaseconv = tplCaseConvUpper;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid caseconversion type '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"compressspace\")) {\n\t\t\tbComplexProcessing = 1;\n\t\t\tbCompressSP = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"date.inutc\")) {\n\t\t\tbDateInUTC = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblkProperty.descr[i].name, \"dateformat\")) {\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"mysql\", sizeof(\"mysql\")-1)) {\n\t\t\t\tdatefmt = tplFmtMySQLDate;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"pgsql\", sizeof(\"pgsql\")-1)) {\n\t\t\t\tdatefmt = tplFmtPgSQLDate;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"rfc3164\", sizeof(\"rfc3164\")-1)) {\n\t\t\t\tdatefmt = tplFmtRFC3164Date;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"rfc3164-buggyday\",\n\t\t\t\tsizeof(\"rfc3164-buggyday\")-1)) {\n\t\t\t\tdatefmt = tplFmtRFC3164BuggyDate;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"rfc3339\", sizeof(\"rfc3339\")-1)) {\n\t\t\t\tdatefmt = tplFmtRFC3339Date;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"unixtimestamp\",\n\t\t\t\tsizeof(\"unixtimestamp\")-1)) {\n\t\t\t\tdatefmt = tplFmtUnixDate;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"subseconds\", sizeof(\"subseconds\")-1)) {\n\t\t\t\tdatefmt = tplFmtSecFrac;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"wdayname\", sizeof(\"wdayname\")-1)) {\n\t\t\t\tdatefmt = tplFmtWDayName;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"wday\", sizeof(\"wday\")-1)) {\n\t\t\t\tdatefmt = tplFmtWDay;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"year\", sizeof(\"year\")-1)) {\n\t\t\t\tdatefmt = tplFmtYear;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"month\", sizeof(\"month\")-1)) {\n\t\t\t\tdatefmt = tplFmtMonth;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"day\", sizeof(\"day\")-1)) {\n\t\t\t\tdatefmt = tplFmtDay;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"hour\", sizeof(\"hour\")-1)) {\n\t\t\t\tdatefmt = tplFmtHour;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"minute\", sizeof(\"minute\")-1)) {\n\t\t\t\tdatefmt = tplFmtMinute;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"second\", sizeof(\"second\")-1)) {\n\t\t\t\tdatefmt = tplFmtSecond;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"tzoffshour\", sizeof(\"tzoffshour\")-1)) {\n\t\t\t\tdatefmt = tplFmtTZOffsHour;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"tzoffsmin\", sizeof(\"tzoffsmin\")-1)) {\n\t\t\t\tdatefmt = tplFmtTZOffsMin;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"tzoffsdirection\",\n\t\t\t\tsizeof(\"tzoffsdirection\")-1)) {\n\t\t\t\tdatefmt = tplFmtTZOffsDirection;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"ordinal\", sizeof(\"ordinal\")-1)) {\n\t\t\t\tdatefmt = tplFmtOrdinal;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"week\", sizeof(\"week\")-1)) {\n\t\t\t\tdatefmt = tplFmtWeek;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid date format '%s' for property\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else {\n\t\t\tdbgprintf(\"template:propertyTpe: program error, non-handled \"\n\t\t\t  \"param '%s'\\n\", pblkProperty.descr[i].name);\n\t\t}\n\t}\n\tif (name == NULL) {\n\t\tCHKmalloc(name = (uchar*)strdup(\"\"));\n\t}\n\tif(outname == NULL) {\n\t\t/* we need to drop \"$!\" prefix, if present */\n\t\tif(ustrlen(name) >= 2 && !strncmp((char*)name, \"$!\", 2))\n\t\t\toutname = ustrdup(name + 2);\n\t\telse\n\t\t\toutname = ustrdup(name);\n\t}\n\n\t/* sanity check */\n\tif(topos_set == 0 && frompos != -1)\n\t\ttopos = 2000000000; /* large enough ;) */\n\tif(frompos == -1 && topos_set != 0)\n\t\tfrompos = 0;\n\tif(bPosRelativeToEnd) {\n\t\tif(topos > frompos) {\n\t\t\tLogError(0, RS_RET_ERR, \"position.to=%d is higher than postion.from=%d \"\n\t\t\t\t\t\"in 'relativeToEnd' mode\\n\", topos, frompos);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\t} else {\n\t\tif((topos >= 0) && (topos < frompos)) {\n\t\t\tLogError(0, RS_RET_ERR, \"position.to=%d is lower than postion.from=%d\\n\",\n\t\t\t\ttopos, frompos);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\t}\n\tif(fieldnum != -1 && re_expr != NULL) {\n\t\tLogError(0, RS_RET_ERR, \"both field extraction and regex extraction \"\n\t\t\t\t\"specified - this is not possible, remove one\");\n\t\tABORT_FINALIZE(RS_RET_ERR);\n\t}\n\n\t/* apply */\n\tCHKmalloc(pTpe = tpeConstruct(pTpl));\n\tpTpe->eEntryType = FIELD;\n\tCHKiRet(msgPropDescrFill(&pTpe->data.field.msgProp, name, strlen((char*)name)));\n\tpTpe->data.field.options.bDropLastLF = droplastlf;\n\tpTpe->data.field.options.bSPIffNo1stSP = spifno1stsp;\n\tpTpe->data.field.options.bMandatory = mandatory;\n\tpTpe->data.field.options.bFixedWidth = fixedwidth;\n\tpTpe->data.field.options.dataType = dataType;\n\tpTpe->data.field.options.onEmpty = onEmpty;\n\tpTpe->data.field.eCaseConv = caseconv;\n\tswitch(formatType) {\n\tcase F_NONE:\n\t\t/* all set ;) */\n\t\tbreak;\n\tcase F_CSV:\n\t\tpTpe->data.field.options.bCSV = 1;\n\t\tbreak;\n\tcase F_JSON:\n\t\tpTpe->data.field.options.bJSON = 1;\n\t\tbreak;\n\tcase F_JSONF:\n\t\tpTpe->data.field.options.bJSONf = 1;\n\t\tbreak;\n\tcase F_JSONR:\n\t\tpTpe->data.field.options.bJSONr = 1;\n\t\tbreak;\n\tcase F_JSONFR:\n\t\tpTpe->data.field.options.bJSONfr = 1;\n\t\tbreak;\n\t}\n\tswitch(controlchr) {\n\tcase CC_NONE:\n\t\t/* all set ;) */\n\t\tbreak;\n\tcase CC_ESCAPE:\n\t\tpTpe->data.field.options.bEscapeCC = 1;\n\t\tbreak;\n\tcase CC_SPACE:\n\t\tpTpe->data.field.options.bSpaceCC = 1;\n\t\tbreak;\n\tcase CC_DROP:\n\t\tpTpe->data.field.options.bDropCC = 1;\n\t\tbreak;\n\t}\n\tswitch(secpath) {\n\tcase SP_NONE:\n\t\t/* all set ;) */\n\t\tbreak;\n\tcase SP_DROP:\n\t\tpTpe->data.field.options.bSecPathDrop = 1;\n\t\tbreak;\n\tcase SP_REPLACE:\n\t\tpTpe->data.field.options.bSecPathReplace = 1;\n\t\tbreak;\n\t}\n\tpTpe->fieldName = outname;\n\tif(outname != NULL)\n\t\tpTpe->lenFieldName = ustrlen(outname);\n\toutname = NULL;\n\tpTpe->bComplexProcessing = bComplexProcessing;\n\tpTpe->data.field.eDateFormat = datefmt;\n\tpTpe->data.field.options.bDateInUTC = bDateInUTC;\n\tpTpe->data.field.options.bCompressSP = bCompressSP;\n\tif(fieldnum != -1) {\n\t\tpTpe->data.field.has_fields = 1;\n\t\tpTpe->data.field.iFieldNr = fieldnum;\n\t\tpTpe->data.field.field_delim = fielddelim;\n\t}\n\tif(frompos != -1) {\n\t\tpTpe->data.field.iFromPos = frompos;\n\t\tpTpe->data.field.iToPos = topos;\n\t\tpTpe->data.field.options.bFromPosEndRelative = bPosRelativeToEnd;\n\t}\n\tif(re_expr != NULL) {\n\t\trsRetVal iRetLocal;\n\t\tpTpe->data.field.typeRegex = re_type;\n\t\tpTpe->data.field.nomatchAction = re_nomatchType;\n\t\tpTpe->data.field.iMatchToUse = re_matchToUse;\n\t\tpTpe->data.field.iSubMatchToUse = re_submatchToUse;\n\t\tpTpe->data.field.has_regex = 1;\n\t\tif((iRetLocal = objUse(regexp, LM_REGEXP_FILENAME)) == RS_RET_OK) {\n\t\t\tint iOptions;\n\t\t\tiOptions = (pTpe->data.field.typeRegex == TPL_REGEX_ERE) ? REG_EXTENDED : 0;\n\t\t\tif(regexp.regcomp(&(pTpe->data.field.re), (char*) re_expr, iOptions) != 0) {\n\t\t\t\tLogError(0, NO_ERRCODE, \"error compiling regex '%s'\", re_expr);\n\t\t\t\tpTpe->data.field.has_regex = 2;\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else {\n\t\t\t/* regexp object could not be loaded */\n\t\t\tif(bFirstRegexpErrmsg) { /* prevent flood of messages, maybe even an endless loop! */\n\t\t\t\tbFirstRegexpErrmsg = 0;\n\t\t\t\tLogError(0, NO_ERRCODE, \"regexp library could not be loaded (error %d), \"\n\t\t\t\t\t\t\"regexp ignored\", iRetLocal);\n\t\t\t}\n\t\t\tpTpe->data.field.has_regex = 2;\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\t}\n\nfinalize_it:\n\tif(pvals != NULL)\n\t\tcnfparamvalsDestruct(pvals, &pblkProperty);\n\tfree(name);\n\tfree(outname);\n\tRETiRet;\n}\n\n/* create a template in list mode, is build from sub-objects */\nstatic rsRetVal\ncreateListTpl(struct template *pTpl, struct cnfobj *o)\n{\n\tstruct objlst *lst;\n\tDEFiRet;\n\n\tdbgprintf(\"create template from subobjs\\n\");\n\tobjlstPrint(o->subobjs);\n\n\tfor(lst = o->subobjs ; lst != NULL ; lst = lst->next) {\n\t\tswitch(lst->obj->objType) {\n\t\tcase CNFOBJ_PROPERTY:\n\t\t\tCHKiRet(createPropertyTpe(pTpl, lst->obj));\n\t\t\tbreak;\n\t\tcase CNFOBJ_CONSTANT:\n\t\t\tCHKiRet(createConstantTpe(pTpl, lst->obj));\n\t\t\tbreak;\n\t\tdefault:dbgprintf(\"program error: invalid object type %d \"\n\t\t\t\t  \"in createLstTpl\\n\", lst->obj->objType);\n\t\t\tbreak;\n\t\t}\n\t\tnvlstChkUnused(lst->obj->nvlst);\n\t}\nfinalize_it:\n\tRETiRet;\n}\n\n/* Add a new template via the v6 config system.  */\nrsRetVal ATTR_NONNULL()\ntplProcessCnf(struct cnfobj *o)\n{\n\tstruct template *pTpl = NULL;\n\tstruct cnfparamvals *pvals = NULL;\n\tint lenName = 0; /* init just to keep compiler happy: mandatory parameter */\n\tchar *name = NULL;\n\tuchar *tplStr = NULL;\n\tuchar *plugin = NULL;\n\tuchar *p;\n\tmsgPropDescr_t subtree;\n\tsbool bHaveSubtree = 0;\n\tenum { T_STRING, T_PLUGIN, T_LIST, T_SUBTREE }\n\t\ttplType = T_STRING; /* init just to keep compiler happy: mandatory parameter */\n\tint i;\n\tint o_sql=0, o_stdsql=0, o_jsonf=0, o_json=0, o_casesensitive=0; /* options */\n\tint numopts;\n\trsRetVal localRet;\n\tDEFiRet;\n\n\tpvals = nvlstGetParams(o->nvlst, &pblk, NULL);\n\tif(pvals == NULL) {\n\t\tparser_errmsg(\"error processing template config parameters\");\n\t\tABORT_FINALIZE(RS_RET_MISSING_CNFPARAMS);\n\t}\n\tcnfparamsPrint(&pblk, pvals);\n\t\n\tfor(i = 0 ; i < pblk.nParams ; ++i) {\n\t\tif(!pvals[i].bUsed)\n\t\t\tcontinue;\n\t\tif(!strcmp(pblk.descr[i].name, \"name\")) {\n\t\t\tlenName = es_strlen(pvals[i].val.d.estr);\n\t\t\tname = es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblk.descr[i].name, \"type\")) {\n\t\t\tif(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"string\", sizeof(\"string\")-1)) {\n\t\t\t\ttplType = T_STRING;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"plugin\", sizeof(\"plugin\")-1)) {\n\t\t\t\ttplType = T_PLUGIN;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"list\", sizeof(\"list\")-1)) {\n\t\t\t\ttplType = T_LIST;\n\t\t\t} else if(!es_strbufcmp(pvals[i].val.d.estr, (uchar*)\"subtree\", sizeof(\"subtree\")-1)) {\n\t\t\t\ttplType = T_SUBTREE;\n\t\t\t} else {\n\t\t\t\tuchar *typeStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid template type '%s'\",\n\t\t\t\t\ttypeStr);\n\t\t\t\tfree(typeStr);\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t}\n\t\t} else if(!strcmp(pblk.descr[i].name, \"string\")) {\n\t\t\ttplStr = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblk.descr[i].name, \"subtree\")) {\n\t\t\tuchar *st_str = es_getBufAddr(pvals[i].val.d.estr);\n\t\t\tif(st_str[0] != '$' || st_str[1] != '!') {\n\t\t\t\tchar *cstr = es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tLogError(0, RS_RET_ERR, \"invalid subtree \"\n\t\t\t\t\t\"parameter, variable must start with '$!' but \"\n\t\t\t\t\t\"var name is '%s'\", cstr);\n\t\t\t\tfree(cstr);\n\t\t\t\tfree(name); /* overall assigned */\n\t\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t\t} else {\n\t\t\t\tuchar *cstr;\n\t\t\t\tcstr  = (uchar*)es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t\t\tCHKiRet(msgPropDescrFill(&subtree, cstr, ustrlen(cstr)));\n\t\t\t\tfree(cstr);\n\t\t\t\tbHaveSubtree = 1;\n\t\t\t}\n\t\t} else if(!strcmp(pblk.descr[i].name, \"plugin\")) {\n\t\t\tplugin = (uchar*) es_str2cstr(pvals[i].val.d.estr, NULL);\n\t\t} else if(!strcmp(pblk.descr[i].name, \"option.stdsql\")) {\n\t\t\to_stdsql = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"option.sql\")) {\n\t\t\to_sql = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"option.json\")) {\n\t\t\to_json = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"option.jsonf\")) {\n\t\t\to_jsonf = pvals[i].val.d.n;\n\t\t} else if(!strcmp(pblk.descr[i].name, \"option.casesensitive\")) {\n\t\t\to_casesensitive = pvals[i].val.d.n;\n\t\t} else {\n\t\t\tdbgprintf(\"template: program error, non-handled \"\n\t\t\t  \"param '%s'\\n\", pblk.descr[i].name);\n\t\t}\n\t}\n\n\t/* the following check is just for clang static anaylzer: this condition\n\t * cannot occur if all is setup well, because \"name\" is a required parameter\n\t * inside the param block and so the code should err out above.\n\t */\n\tif(name == NULL) {\n\t\tDBGPRINTF(\"template/tplProcessConf: logic error name == NULL - pblk wrong?\\n\");\n\t\tABORT_FINALIZE(RS_RET_ERR);\n\t}\n\n\t/* do config sanity checks */\n\tif(tplStr  == NULL) {\n\t\tif(tplType == T_STRING) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' of type string needs \"\n\t\t\t\t\"string parameter\", name);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\t} else {\n\t\tif(tplType != T_STRING) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' is not a string \"\n\t\t\t\t\"template but has a string specified - ignored\", name);\n\t\t}\n\t}\n\n\tif(plugin  == NULL) {\n\t\tif(tplType == T_PLUGIN) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' of type plugin needs \"\n\t\t\t\t\"plugin parameter\", name);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\t} else {\n\t\tif(tplType != T_PLUGIN) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' is not a plugin \"\n\t\t\t\t\"template but has a plugin specified - ignored\", name);\n\t\t}\n\t}\n\n\tif(!bHaveSubtree) {\n\t\tif(tplType == T_SUBTREE) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' of type subtree needs \"\n\t\t\t\t\"subtree parameter\", name);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\t} else {\n\t\tif(tplType != T_SUBTREE) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' is not a subtree \"\n\t\t\t\t\"template but has a subtree specified - ignored\", name);\n\t\t}\n\t}\n\n\tif(o->subobjs  == NULL) {\n\t\tif(tplType == T_LIST) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' of type list has \"\n\t\t\t\t\"no parameters specified\", name);\n\t\t\tABORT_FINALIZE(RS_RET_ERR);\n\t\t}\n\t} else {\n\t\tif(tplType != T_LIST) {\n\t\t\tLogError(0, RS_RET_ERR, \"template '%s' is not a list \"\n\t\t\t\t\"template but has parameters specified - ignored\", name);\n\t\t}\n\t}\n\n\tnumopts = 0;\n\tif(o_sql) ++numopts;\n\tif(o_stdsql) ++numopts;\n\tif(o_json) ++numopts;\n\tif(o_jsonf) ++numopts;\n\tif(numopts > 1) {\n\t\tLogError(0, RS_RET_ERR, \"template '%s' has multiple incompatible \"\n\t\t\t\"options of sql, stdsql or json specified\", name);\n\t\tABORT_FINALIZE(RS_RET_ERR);\n\t}\n\n\t/* config ok */\n\tif((pTpl = tplConstruct(loadConf)) == NULL) {\n\t\tDBGPRINTF(\"template.c: tplConstruct failed!\\n\");\n\t\tABORT_FINALIZE(RS_RET_ERR);\n\t}\n\tpTpl->pszName = name;\n\tpTpl->iLenName = lenName;\n\t\n\tswitch(tplType) {\n\tcase T_STRING:\tp = tplStr;\n\t\t\twhile(*p) {\n\t\t\t\tswitch(*p) {\n\t\t\t\t\tcase '%': /* parameter */\n\t\t\t\t\t\t++p; /* eat '%' */\n\t\t\t\t\t\tCHKiRet(do_Parameter(&p, pTpl));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault: /* constant */\n\t\t\t\t\t\tdo_Constant(&p, pTpl, 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\tcase T_PLUGIN:\tp = plugin;\n\t\t\t/* TODO: the use of tplAddTplMod() can be improved! */\n\t\t\tlocalRet = tplAddTplMod(pTpl, &p);\n\t\t\tif(localRet != RS_RET_OK) {\n\t\t\t\tLogError(0, localRet, \"template '%s': error %d \"\n\t\t\t\t\t\t\"defining template via plugin (strgen) module\",\n\t\t\t\t\t\tpTpl->pszName, localRet);\n\t\t\t\tABORT_FINALIZE(localRet);\n\t\t\t}\n\t\t\tbreak;\n\tcase T_LIST:\tcreateListTpl(pTpl, o);\n\t\t\tbreak;\n\tcase T_SUBTREE:\tmemcpy(&pTpl->subtree, &subtree, sizeof(msgPropDescr_t));\n\t\t\tpTpl->bHaveSubtree = 1;\n\t\t\tbreak;\n\t}\n\t\n\tpTpl->optFormatEscape = NO_ESCAPE;\n\tif(o_stdsql)\n\t\tpTpl->optFormatEscape = STDSQL_ESCAPE;\n\telse if(o_sql)\n\t\tpTpl->optFormatEscape = SQL_ESCAPE;\n\telse if(o_json)\n\t\tpTpl->optFormatEscape = JSON_ESCAPE;\n\telse if(o_jsonf)\n\t\tpTpl->optFormatEscape = JSONF;\n\n\tif(o_casesensitive)\n\t\tpTpl->optCaseSensitive = 1;\n\tapply_case_sensitivity(pTpl);\nfinalize_it:\n\tfree(tplStr);\n\tfree(plugin);\n\tif(pvals != NULL)\n\t\tcnfparamvalsDestruct(pvals, &pblk);\n\tif(iRet != RS_RET_OK) {\n\t\tif(pTpl != NULL) {\n\t\t\t/* we simply make the template defunct in this case by setting\n\t\t\t * its name to a zero-string. We do not free it, as this would\n\t\t\t * require additional code and causes only a very small memory\n\t\t\t * consumption. TODO: maybe in next iteration...\n\t\t\t */\n\t\t\t*pTpl->pszName = '\\0';\n\t\t}\n\t}\n\n\tRETiRet;\n}\n\n\n/* Find a template object based on name. Search\n * currently is case-sensitive (should we change?).\n * returns pointer to template object if found and\n * NULL otherwise.\n * rgerhards 2004-11-17\n */\nstruct template *tplFind(rsconf_t *conf, char *pName, int iLenName)\n{\n\tstruct template *pTpl;\n\n\tassert(pName != NULL);\n\n\tpTpl = conf->templates.root;\n\twhile(pTpl != NULL &&\n\t      !(pTpl->iLenName == iLenName &&\n\t        !strcmp(pTpl->pszName, pName)\n\t        ))\n\t\t{\n\t\t\tpTpl = pTpl->pNext;\n\t\t}\n\treturn(pTpl);\n}\n\n/* Destroy the template structure. This is for de-initialization\n * at program end. Everything is deleted.\n * rgerhards 2005-02-22\n * I have commented out dbgprintfs, because they are not needed for\n * \"normal\" debugging. Uncomment them, if they are needed.\n * rgerhards, 2007-07-05\n */\nvoid tplDeleteAll(rsconf_t *conf)\n{\n\tstruct template *pTpl, *pTplDel;\n\tstruct templateEntry *pTpe, *pTpeDel;\n\n\tpTpl = conf->templates.root;\n\twhile(pTpl != NULL) {\n\t\tpTpe = pTpl->pEntryRoot;\n\t\twhile(pTpe != NULL) {\n\t\t\tpTpeDel = pTpe;\n\t\t\tpTpe = pTpe->pNext;\n\t\t\tswitch(pTpeDel->eEntryType) {\n\t\t\tcase UNDEFINED:\n\t\t\t\tbreak;\n\t\t\tcase CONSTANT:\n\t\t\t\tfree(pTpeDel->data.constant.pConstant);\n\t\t\t\tbreak;\n\t\t\tcase FIELD:\n\t\t\t\t/* check if we have a regexp and, if so, delete it */\n#ifdef FEATURE_REGEXP\n\t\t\t\tif(pTpeDel->data.field.has_regex != 0) {\n\t\t\t\t\tif(objUse(regexp, LM_REGEXP_FILENAME) == RS_RET_OK) {\n\t\t\t\t\t\tregexp.regfree(&(pTpeDel->data.field.re));\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t\tmsgPropDescrDestruct(&pTpeDel->data.field.msgProp);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfree(pTpeDel->fieldName);\n\t\t\tfree(pTpeDel);\n\t\t}\n\t\tpTplDel = pTpl;\n\t\tpTpl = pTpl->pNext;\n\t\tfree(pTplDel->pszName);\n\t\tif(pTplDel->bHaveSubtree)\n\t\t\tmsgPropDescrDestruct(&pTplDel->subtree);\n\t\tfree(pTplDel);\n\t}\n}\n\n\n/* Destroy all templates obtained from conf file\n * preserving hardcoded ones. This is called from init().\n */\nvoid tplDeleteNew(rsconf_t *conf)\n{\n\tstruct template *pTpl, *pTplDel;\n\tstruct templateEntry *pTpe, *pTpeDel;\n\n\n\tif(conf->templates.root == NULL || conf->templates.lastStatic == NULL)\n\t\treturn;\n\n\tpTpl = conf->templates.lastStatic->pNext;\n\tconf->templates.lastStatic->pNext = NULL;\n\tconf->templates.last = conf->templates.lastStatic;\n\twhile(pTpl != NULL) {\n\t\tpTpe = pTpl->pEntryRoot;\n\t\twhile(pTpe != NULL) {\n\t\t\tpTpeDel = pTpe;\n\t\t\tpTpe = pTpe->pNext;\n\t\t\tswitch(pTpeDel->eEntryType) {\n\t\t\tcase UNDEFINED:\n\t\t\t\tbreak;\n\t\t\tcase CONSTANT:\n\t\t\t\tfree(pTpeDel->data.constant.pConstant);\n\t\t\t\tbreak;\n\t\t\tcase FIELD:\n#ifdef FEATURE_REGEXP\n\t\t\t\t/* check if we have a regexp and, if so, delete it */\n\t\t\t\tif(pTpeDel->data.field.has_regex != 0) {\n\t\t\t\t\tif(objUse(regexp, LM_REGEXP_FILENAME) == RS_RET_OK) {\n\t\t\t\t\t\tregexp.regfree(&(pTpeDel->data.field.re));\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t\tmsgPropDescrDestruct(&pTpeDel->data.field.msgProp);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfree(pTpeDel);\n\t\t}\n\t\tpTplDel = pTpl;\n\t\tpTpl = pTpl->pNext;\n\t\tfree(pTplDel->pszName);\n\t\tif(pTplDel->bHaveSubtree)\n\t\t\tmsgPropDescrDestruct(&pTplDel->subtree);\n\t\tfree(pTplDel);\n\t}\n}\n\n/* Store the pointer to the last hardcoded template */\nvoid tplLastStaticInit(rsconf_t *conf, struct template *tpl)\n{\n\tconf->templates.lastStatic = tpl;\n}\n\n/* Print the template structure. This is more or less a\n * debug or test aid, but anyhow I think it's worth it...\n */\nvoid tplPrintList(rsconf_t *conf)\n{\n\tstruct template *pTpl;\n\tstruct templateEntry *pTpe;\n\n\tpTpl = conf->templates.root;\n\twhile(pTpl != NULL) {\n\t\tdbgprintf(\"Template: Name='%s' \", pTpl->pszName == NULL? \"NULL\" : pTpl->pszName);\n\t\tif(pTpl->optFormatEscape == SQL_ESCAPE)\n\t\t\tdbgprintf(\"[SQL-Format (MySQL)] \");\n\t\telse if(pTpl->optFormatEscape == JSON_ESCAPE)\n\t\t\tdbgprintf(\"[JSON-Escaped Format] \");\n\t\telse if(pTpl->optFormatEscape == STDSQL_ESCAPE)\n\t\t\tdbgprintf(\"[SQL-Format (standard SQL)] \");\n\t\telse if(pTpl->optFormatEscape == JSONF)\n\t\t\tdbgprintf(\"[JSON fields] \");\n\t\tif(pTpl->optCaseSensitive)\n\t\t\tdbgprintf(\"[Case Sensitive Vars] \");\n\t\tdbgprintf(\"\\n\");\n\t\tpTpe = pTpl->pEntryRoot;\n\t\twhile(pTpe != NULL) {\n\t\t\tdbgprintf(\"\\tEntry(%lx): type %d, \", (unsigned long) pTpe, pTpe->eEntryType);\n\t\t\tswitch(pTpe->eEntryType) {\n\t\t\tcase UNDEFINED:\n\t\t\t\tdbgprintf(\"(UNDEFINED)\");\n\t\t\t\tbreak;\n\t\t\tcase CONSTANT:\n\t\t\t\tdbgprintf(\"(CONSTANT), value: '%s'\",\n\t\t\t\t\tpTpe->data.constant.pConstant);\n\t\t\t\tbreak;\n\t\t\tcase FIELD:\n\t\t\t\tdbgprintf(\"(FIELD), value: '%d' \", pTpe->data.field.msgProp.id);\n\t\t\t\tif(pTpe->data.field.msgProp.id == PROP_CEE) {\n\t\t\t\t\tdbgprintf(\"[EE-Property: '%s'] \", pTpe->data.field.msgProp.name);\n\t\t\t\t} else if(pTpe->data.field.msgProp.id == PROP_LOCAL_VAR) {\n\t\t\t\t\tdbgprintf(\"[Local Var: '%s'] \", pTpe->data.field.msgProp.name);\n\t\t\t\t}\n\t\t\t\tswitch(pTpe->data.field.eDateFormat) {\n\t\t\t\tcase tplFmtDefault:\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtMySQLDate:\n\t\t\t\t\tdbgprintf(\"[Format as MySQL-Date] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtPgSQLDate:\n\t\t\t\t\tdbgprintf(\"[Format as PgSQL-Date] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtRFC3164Date:\n\t\t\t\t\tdbgprintf(\"[Format as RFC3164-Date] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtRFC3339Date:\n\t\t\t\t\tdbgprintf(\"[Format as RFC3339-Date] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtUnixDate:\n\t\t\t\t\tdbgprintf(\"[Format as Unix timestamp] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtSecFrac:\n\t\t\t\t\tdbgprintf(\"[fractional seconds, only] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtRFC3164BuggyDate:\n\t\t\t\t\tdbgprintf(\"[Format as buggy RFC3164-Date] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtWDayName:\n\t\t\t\t\tdbgprintf(\"[Format as weekday name] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtYear:\n\t\t\t\t\tdbgprintf(\"[Format as year] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtMonth:\n\t\t\t\t\tdbgprintf(\"[Format as month] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtDay:\n\t\t\t\t\tdbgprintf(\"[Format as day] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtHour:\n\t\t\t\t\tdbgprintf(\"[Format as hour] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtMinute:\n\t\t\t\t\tdbgprintf(\"[Format as minute] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtSecond:\n\t\t\t\t\tdbgprintf(\"[Format as second] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtTZOffsHour:\n\t\t\t\t\tdbgprintf(\"[Format as offset hour] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtTZOffsMin:\n\t\t\t\t\tdbgprintf(\"[Format as offset minute] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtTZOffsDirection:\n\t\t\t\t\tdbgprintf(\"[Format as offset direction] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtWDay:\n\t\t\t\t\tdbgprintf(\"[Format as weekday] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtOrdinal:\n\t\t\t\t\tdbgprintf(\"[Format as ordinal] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplFmtWeek:\n\t\t\t\t\tdbgprintf(\"[Format as week] \");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdbgprintf(\"[UNKNOWN eDateFormat %d] \", pTpe->data.field.eDateFormat);\n\t\t\t\t}\n\t\t\t\tswitch(pTpe->data.field.eCaseConv) {\n\t\t\t\tcase tplCaseConvNo:\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplCaseConvLower:\n\t\t\t\t\tdbgprintf(\"[Converted to Lower Case] \");\n\t\t\t\t\tbreak;\n\t\t\t\tcase tplCaseConvUpper:\n\t\t\t\t\tdbgprintf(\"[Converted to Upper Case] \");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bEscapeCC) {\n\t\t\t\t  \tdbgprintf(\"[escape control-characters] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bDropCC) {\n\t\t\t\t  \tdbgprintf(\"[drop control-characters] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bSpaceCC) {\n\t\t\t\t  \tdbgprintf(\"[replace control-characters with space] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bSecPathDrop) {\n\t\t\t\t  \tdbgprintf(\"[slashes are dropped] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bSecPathReplace) {\n\t\t\t\t  \tdbgprintf(\"[slashes are replaced by '_'] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bSPIffNo1stSP) {\n\t\t\t\t  \tdbgprintf(\"[SP iff no first SP] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bCSV) {\n\t\t\t\t  \tdbgprintf(\"[format as CSV (RFC4180)]\");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bJSON) {\n\t\t\t\t\tdbgprintf(\"[format as JSON] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bJSONf) {\n\t\t\t\t\tdbgprintf(\"[format as JSON field] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bJSONr) {\n\t\t\t\t\tdbgprintf(\"[format as JSON without re-escaping] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bJSONfr) {\n\t\t\t\t\tdbgprintf(\"[format as JSON field without re-escaping] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bMandatory) {\n\t\t\t\t\tdbgprintf(\"[mandatory field] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.options.bDropLastLF) {\n\t\t\t\t  \tdbgprintf(\"[drop last LF in msg] \");\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.has_fields == 1) {\n\t\t\t\t  \tdbgprintf(\"[substring, field #%d only (delimiter %d)] \",\n\t\t\t\t\t\tpTpe->data.field.iFieldNr, pTpe->data.field.field_delim);\n\t\t\t\t}\n\t\t\t\tif(pTpe->data.field.iFromPos != 0 || pTpe->data.field.iToPos != 0) {\n\t\t\t\t  \tdbgprintf(\"[substring, from character %d to %d] \",\n\t\t\t\t\t\tpTpe->data.field.iFromPos,\n\t\t\t\t\t\tpTpe->data.field.iToPos);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(pTpe->bComplexProcessing)\n\t\t\t\tdbgprintf(\"[COMPLEX]\");\n\t\t\tdbgprintf(\"\\n\");\n\t\t\tpTpe = pTpe->pNext;\n\t\t}\n\t\tpTpl = pTpl->pNext; /* done, go next */\n\t}\n}\n\nint tplGetEntryCount(struct template *pTpl)\n{\n\tassert(pTpl != NULL);\n\treturn(pTpl->tpenElements);\n}\n\nrsRetVal templateInit(void)\n{\n\tDEFiRet;\n\tCHKiRet(objGetObjInterface(&obj));\n\tCHKiRet(objUse(strgen, CORE_COMPONENT));\n\nfinalize_it:\n\tRETiRet;\n}\n"
        },
        {
          "name": "template.h",
          "type": "blob",
          "size": 7.8828125,
          "content": "/* This is the header for template processing code of rsyslog.\n * begun 2004-11-17 rgerhards\n *\n * Copyright (C) 2004-2013 by Rainer Gerhards and Adiscon GmbH\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Note: there is a tiny bit of code left where I could not get any response\n * from the author if this code can be placed under ASL2.0. I have guarded this\n * with #ifdef STRICT_GPLV3. Only if that macro is defined, the code will be\n * compiled. Otherwise this feature is not present. The plan is to do a\n * different implementation in the future to get rid of this problem.\n * rgerhards, 2012-08-25\n */\n\n#ifndef\tTEMPLATE_H_INCLUDED\n#define\tTEMPLATE_H_INCLUDED 1\n\n#include <json.h>\n#include <libestr.h>\n#include \"regexp.h\"\n#include \"stringbuf.h\"\n\nstruct template {\n\tstruct template *pNext;\n\tchar *pszName;\n\tint iLenName;\n\trsRetVal (*pStrgen)(const smsg_t*const, actWrkrIParams_t *const iparam);\n\tsbool bHaveSubtree;\n\tmsgPropDescr_t subtree;\t/* subtree property name for subtree-type templates */\n\tint tpenElements; /* number of elements in templateEntry list */\n\tstruct templateEntry *pEntryRoot;\n\tstruct templateEntry *pEntryLast;\n\tchar optFormatEscape;\t/* in text fields, */\n#\tdefine NO_ESCAPE 0\t/* 0 - do not escape, */\n#\tdefine SQL_ESCAPE 1\t/* 1 - escape \"the MySQL way\"  */\n#\tdefine STDSQL_ESCAPE 2  /* 2 - escape quotes by double quotes, */\n#\tdefine JSON_ESCAPE 3\t/* 3 - escape double quotes for JSON.  */\n#\tdefine JSONF 4\t\t/* 4 - not a real escape - template contains json fields only */\n\t/* following are options. All are 0/1 defined (either on or off).\n\t * we use chars because they are faster than bit fields and smaller\n\t * than short...\n\t */\n\tchar optCaseSensitive;  /* case-sensitive variable property references, default False, 0 */\n};\n\nenum EntryTypes { UNDEFINED = 0, CONSTANT = 1, FIELD = 2 };\nenum tplFormatTypes { tplFmtDefault = 0, tplFmtMySQLDate = 1,\n\t\t\ttplFmtRFC3164Date = 2, tplFmtRFC3339Date = 3, tplFmtPgSQLDate = 4,\n\t\t\ttplFmtSecFrac = 5, tplFmtRFC3164BuggyDate = 6, tplFmtUnixDate = 7,\n\t\t\ttplFmtWDayName = 8, tplFmtYear = 9, tplFmtMonth = 10, tplFmtDay = 11,\n\t\t\ttplFmtHour = 12, tplFmtMinute = 13, tplFmtSecond = 14,\n\t\t\ttplFmtTZOffsHour = 15, tplFmtTZOffsMin = 16, tplFmtTZOffsDirection = 17,\n\t\t\ttplFmtWDay = 18, tplFmtOrdinal = 19, tplFmtWeek = 20,\n\t\t\ttplFmtISOWeek = 21, tplFmtISOWeekYear = 22};\nenum tplFormatCaseConvTypes { tplCaseConvNo = 0, tplCaseConvUpper = 1, tplCaseConvLower = 2 };\nenum tplRegexType { TPL_REGEX_BRE = 0, /* posix BRE */\n\t\t    TPL_REGEX_ERE = 1  /* posix ERE */\n\t\t  };\n\n#include \"msg.h\"\n\n/* a specific parse entry */\nstruct templateEntry {\n\tstruct templateEntry *pNext;\n\tenum EntryTypes eEntryType;\n\tuchar *fieldName;\t/**< field name to be used for structured output */\n\tint lenFieldName;\n\tsbool bComplexProcessing; /**< set if complex processing (options, etc) is required */\n\tunion {\n\t\tstruct {\n\t\t\tuchar *pConstant;\t/* pointer to constant value */\n\t\t\tint iLenConstant;\t/* its length */\n\t\t} constant;\n\t\tstruct {\n\t\t\tmsgPropDescr_t msgProp;\t/* property to be used */\n\t\t\tunsigned iFromPos;\t/* for partial strings only chars from this position ... */\n\t\t\tunsigned iToPos;\t/* up to that one... */\n\t\t\tunsigned iFieldNr;\t/* for field extraction: field to extract */\n#ifdef FEATURE_REGEXP\n\t\t\tregex_t re;\t/* APR: this is the regular expression */\n\t\t\tshort has_regex;\n\t\t\tshort iMatchToUse;/* which match should be obtained (10 max) */\n\t\t\tshort iSubMatchToUse;/* which submatch should be obtained (10 max) */\n\t\t\tenum tplRegexType typeRegex;\n\t\t\tenum tlpRegexNoMatchType {\n\t\t\t\tTPL_REGEX_NOMATCH_USE_DFLTSTR = 0,\n\t\t\t\t/* use the (old style) default \"**NO MATCH**\" string */\n\t\t\t\tTPL_REGEX_NOMATCH_USE_BLANK = 1, /* use a blank string */\n\t\t\t\tTPL_REGEX_NOMATCH_USE_WHOLE_FIELD = 2, /* use the full field contents\n\t\t\t\t\t\t\t\t\tthat we were searching in*/\n\t\t\t\tTPL_REGEX_NOMATCH_USE_ZERO = 3 /* use  0 (useful for numerical values) */\n\t\t\t}  nomatchAction;\t/**< what to do if we do not have a match? */\n\n#endif\n\t\t\tunsigned has_fields; /* support for field-counting: field to extract */\n\t\t\tunsigned char field_delim; /* support for field-counting: field delimiter char */\n#ifdef STRICT_GPLV3\n\t\t\tint field_expand;\t/* use multiple instances of the field delimiter as a single one? */\n#endif\n\n\n\t\t\tenum tplFormatTypes eDateFormat;\n\t\t\tenum tplFormatCaseConvTypes eCaseConv;\n\t\t\tstruct { \t\t/* bit fields! */\n\t\t\t\tunsigned bDropCC: 1;\t\t/* drop control characters? */\n\t\t\t\tunsigned bSpaceCC: 1;\t\t/* change control characters to spaceescape? */\n\t\t\t\tunsigned bEscapeCC: 1;\t\t/* escape control characters? */\n\t\t\t\tunsigned bCompressSP: 1;\t/* compress multiple spaces to a single one? */\n\t\t\t\tunsigned bDropLastLF: 1;\t/* drop last LF char in msg (PIX!) */\n\t\t\t\tunsigned bSecPathDrop: 1;\t/* drop slashes, replace dots, empty string */\n\t\t\t\tunsigned bSecPathReplace: 1;\t/* replace slashes, replace dots, empty string */\n\t\t\t\tunsigned bSPIffNo1stSP: 1;\t/* be a space if 1st pos if field is no space*/\n\t\t\t\tunsigned bCSV: 1;\t\t/* format field in CSV (RFC 4180) format */\n\t\t\t\tunsigned bJSON: 1;\t\t/* format field JSON escaped */\n\t\t\t\tunsigned bJSONf: 1;\t\t/* format field JSON *field* (n/v pair) */\n\t\t\t\tunsigned bJSONr: 1;\t\t/* format field JSON non escaped */\n\t\t\t\tunsigned bJSONfr: 1;\t\t/* format field JSON *field* non escaped (n/v pair) */\n\t\t\t\tunsigned bMandatory: 1;\t\t/* mandatory field - emit even if empty */\n\t\t\t\tunsigned bFromPosEndRelative: 1;/* is From/To-Pos relative to end of string? */\n\t\t\t\tunsigned bFixedWidth: 1;\t/* space pad to toChar if string is shorter */\n\t\t\t\tunsigned bDateInUTC: 1;\t\t/* should date be expressed in UTC? */\n\t\t\t\t#define TPE_DATATYPE_STRING 0\n\t\t\t\t#define TPE_DATATYPE_NUMBER 1\n\t\t\t\t#define TPE_DATATYPE_BOOL 2\n\t\t\t\t#define TPE_DATATYPE_AUTO 3 /* NOTE: bit field values exhausted! */\n\t\t\t\tunsigned dataType: 2;\n\t\t\t\t#define TPE_DATAEMPTY_KEEP 0\n\t\t\t\t#define TPE_DATAEMPTY_SKIP 1\n\t\t\t\t#define TPE_DATAEMPTY_NULL 2\n\t\t\t\tunsigned onEmpty: 2;\n\t\t\t} options;\t\t/* options as bit fields */\n\t\t} field;\n\t} data;\n};\n\n\n/* interfaces */\nBEGINinterface(tpl) /* name must also be changed in ENDinterface macro! */\nENDinterface(tpl)\n#define tplCURR_IF_VERSION 1 /* increment whenever you change the interface structure! */\n\n/* prototypes */\nPROTOTYPEObj(tpl);\n\n\nstruct template *tplAddLine(rsconf_t *conf, const char* pName, unsigned char** pRestOfConfLine);\nstruct template *tplFind(rsconf_t *conf, char *pName, int iLenName);\nint tplGetEntryCount(struct template *pTpl);\nvoid tplDeleteAll(rsconf_t *conf);\nvoid tplDeleteNew(rsconf_t *conf);\nvoid tplPrintList(rsconf_t *conf);\nvoid tplLastStaticInit(rsconf_t *conf, struct template *tpl);\nrsRetVal ExtendBuf(actWrkrIParams_t *const iparam, const size_t iMinSize);\nint tplRequiresDateCall(struct template *pTpl);\n/* note: if a compiler warning for undefined type tells you to look at this\n * code line below, the actual cause is that you currently MUST include template.h\n * BEFORE msg.h, even if your code file does not actually need it.\n * rgerhards, 2007-08-06\n */\nrsRetVal tplToJSON(struct template *pTpl, smsg_t *pMsg, struct json_object **, struct syslogTime *ttNow);\nrsRetVal doEscape(uchar **pp, rs_size_t *pLen, unsigned short *pbMustBeFreed, int escapeMode);\nrsRetVal\ntplToString(struct template *__restrict__ const pTpl,\n\t    smsg_t *__restrict__ const pMsg,\n\t    actWrkrIParams_t *__restrict__ const iparam,\n\t    struct syslogTime *const ttNow);\n\nrsRetVal templateInit(void);\nrsRetVal tplProcessCnf(struct cnfobj *o);\n\n#endif /* #ifndef TEMPLATE_H_INCLUDED */\n/* vim:set ai:\n */\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "threads.c",
          "type": "blob",
          "size": 8.2841796875,
          "content": "/* threads.c\n *\n * This file implements threading support helpers (and maybe the thread object)\n * for rsyslog.\n *\n * File begun on 2007-12-14 by RGerhards\n *\n * Copyright 2007-2016 Adiscon GmbH.\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n#include \"config.h\"\n\n#include <stdlib.h>\n#include <string.h>\n#include <signal.h>\n#include <errno.h>\n#include <pthread.h>\n#include <assert.h>\n#ifdef HAVE_SYS_PRCTL_H\n#  include <sys/prctl.h>\n#endif\n\n#include \"rsyslog.h\"\n#include \"dirty.h\"\n#include \"linkedlist.h\"\n#include \"threads.h\"\n#include \"srUtils.h\"\n#include \"errmsg.h\"\n#include \"glbl.h\"\n#include \"unicode-helper.h\"\n#include \"rsconf.h\"\n\n/* linked list of currently-known threads */\nstatic linkedList_t llThrds;\n\n/* methods */\n\n/* Construct a new thread object\n */\nstatic rsRetVal\nthrdConstruct(thrdInfo_t **ppThis)\n{\n\tDEFiRet;\n\tthrdInfo_t *pThis;\n\n\tassert(ppThis != NULL);\n\n\tCHKmalloc(pThis = calloc(1, sizeof(thrdInfo_t)));\n\tpthread_mutex_init(&pThis->mutThrd, NULL);\n\tpthread_cond_init(&pThis->condThrdTerm, NULL);\n\t*ppThis = pThis;\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* Destructs a thread object. The object must not be linked to the\n * linked list of threads. Please note that the thread should have been\n * stopped before. If not, we try to do it.\n */\nstatic rsRetVal thrdDestruct(thrdInfo_t *pThis)\n{\n\tDEFiRet;\n\tassert(pThis != NULL);\n\n\tpthread_mutex_lock(&pThis->mutThrd);\n\tif(pThis->bIsActive == 1) {\n\t\tpthread_mutex_unlock(&pThis->mutThrd);\n\t\tthrdTerminate(pThis);\n\t} else {\n\t\tpthread_mutex_unlock(&pThis->mutThrd);\n\t\tpthread_join(pThis->thrdID, NULL);\n\t}\n\n\t/* call cleanup function, if any */\n\tif(pThis->pAfterRun != NULL)\n\t\tpThis->pAfterRun(pThis);\n\n\tpthread_mutex_destroy(&pThis->mutThrd);\n\tpthread_cond_destroy(&pThis->condThrdTerm);\n\tfree(pThis->name);\n\tfree(pThis);\n\n\tRETiRet;\n}\n\n\n/* terminate a thread via the non-cancel interface\n * This is a separate function as it involves a bit more of code.\n * rgerhads, 2009-10-15\n */\nstatic rsRetVal\nthrdTerminateNonCancel(thrdInfo_t *pThis)\n{\n\tstruct timespec tTimeout;\n\tint ret;\n\tint was_active;\n\tDEFiRet;\n\tassert(pThis != NULL);\n\n\tDBGPRINTF(\"request term via SIGTTIN for input thread '%s' %p\\n\",\n\t\t  pThis->name, (void*) pThis->thrdID);\n\n\tpThis->bShallStop = RSTRUE;\n\td_pthread_mutex_lock(&pThis->mutThrd);\n\ttimeoutComp(&tTimeout, runConf->globals.inputTimeoutShutdown);\n\twas_active = pThis->bIsActive;\n\twhile(was_active) {\n\t\tif(dbgTimeoutToStderr) {\n\t\t\tfprintf(stderr, \"rsyslogd debug: info: trying to cooperatively stop \"\n\t\t\t\t\"input %s, timeout %d ms\\n\", pThis->name, runConf->globals.inputTimeoutShutdown);\n\t\t}\n\t\tDBGPRINTF(\"thread %s: initiating termination, timeout %d ms\\n\",\n\t\t\tpThis->name, runConf->globals.inputTimeoutShutdown);\n\t\tconst int r = pthread_kill(pThis->thrdID, SIGTTIN);\n\t\tif(r != 0) {\n\t\t\tLogError(r, RS_RET_INTERNAL_ERROR, \"error terminating thread %s \"\n\t\t\t\t\"this may cause shutdown issues\", pThis->name);\n\t\t}\n\t\tret = d_pthread_cond_timedwait(&pThis->condThrdTerm, &pThis->mutThrd, &tTimeout);\n\t\tif(ret == ETIMEDOUT) {\n\t\t\tDBGPRINTF(\"input thread term: timeout expired waiting on thread %s \"\n\t\t\t\t\"termination - canceling\\n\", pThis->name);\n\t\t\tif(dbgTimeoutToStderr) {\n\t\t\t\tfprintf(stderr, \"rsyslogd debug: input thread term: \"\n\t\t\t\t\t\"timeout expired waiting on thread %s \"\n\t\t\t\t\t\"termination - canceling\\n\", pThis->name);\n\t\t\t}\n\t\t\tpthread_cancel(pThis->thrdID);\n\t\t\tbreak;\n\t\t} else if(ret != 0) {\n\t\t\tchar errStr[1024];\n\t\t\tint err = ret;\n\t\t\trs_strerror_r(err, errStr, sizeof(errStr));\n\t\t\tDBGPRINTF(\"input thread term: cond_wait returned with error %d: %s\\n\",\n\t\t\t\t  err, errStr);\n\t\t}\n\t\twas_active = pThis->bIsActive;\n\t}\n\td_pthread_mutex_unlock(&pThis->mutThrd);\n\n\tif(was_active) {\n\t\tDBGPRINTF(\"non-cancel input thread termination FAILED for thread %s %p\\n\",\n\t\t\t  pThis->name, (void*) pThis->thrdID);\n\t} else {\n\t\tDBGPRINTF(\"non-cancel input thread termination succeeded for thread %s %p\\n\",\n\t\t\t  pThis->name, (void*) pThis->thrdID);\n\t}\n\n\tRETiRet;\n}\n\n\n/* terminate a thread gracefully.\n */\nrsRetVal thrdTerminate(thrdInfo_t *pThis)\n{\n\tDEFiRet;\n\tassert(pThis != NULL);\n\n\tif(pThis->bNeedsCancel) {\n\t\tDBGPRINTF(\"request term via canceling for input thread %s\\n\", pThis->name);\n\t\tif(dbgTimeoutToStderr) {\n\t\t\tfprintf(stderr, \"rsyslogd debug: request term via canceling for \"\n\t\t\t\t\"input thread %s\\n\", pThis->name);\n\t\t}\n\t\tpthread_cancel(pThis->thrdID);\n\t} else {\n\t\tthrdTerminateNonCancel(pThis);\n\t}\n\tpthread_join(pThis->thrdID, NULL); /* wait for input thread to complete */\n\n\tRETiRet;\n}\n\n\n/* terminate all known threads gracefully.\n */\nrsRetVal thrdTerminateAll(void)\n{\n\tDEFiRet;\n\tllDestroy(&llThrds);\n\tRETiRet;\n}\n\n\n/* This is an internal wrapper around the user thread function. Its\n * purpose is to handle all the necessary housekeeping stuff so that the\n * user function needs not to be aware of the threading calls. The user\n * function call has just \"normal\", non-threading semantics.\n * rgerhards, 2007-12-17\n */\nstatic ATTR_NORETURN void*\nthrdStarter(void *const arg)\n{\n\tDEFiRet;\n\tthrdInfo_t *const pThis = (thrdInfo_t*) arg;\n#\tif defined(HAVE_PRCTL) && defined(PR_SET_NAME)\n\tuchar thrdName[32] = \"in:\";\n#\tendif\n\n\tassert(pThis != NULL);\n\tassert(pThis->pUsrThrdMain != NULL);\n\n#\tif defined(HAVE_PRCTL) && defined(PR_SET_NAME)\n\tustrncpy(thrdName+3, pThis->name, 20);\n\tdbgOutputTID((char*)thrdName);\n\n\t/* set thread name - we ignore if the call fails, has no harsh consequences... */\n\tif(prctl(PR_SET_NAME, thrdName, 0, 0, 0) != 0) {\n\t\tDBGPRINTF(\"prctl failed, not setting thread name for '%s'\\n\", pThis->name);\n\t} else {\n\t\tDBGPRINTF(\"set thread name to '%s'\\n\", thrdName);\n\t}\n#\tendif\n\n\t/* block all signals except SIGTTIN and SIGSEGV */\n\tsigset_t sigSet;\n\tsigfillset(&sigSet);\n\tsigdelset(&sigSet, SIGTTIN);\n\tsigdelset(&sigSet, SIGSEGV);\n\tpthread_sigmask(SIG_BLOCK, &sigSet, NULL);\n\n\t/* setup complete, we are now ready to execute the user code. We will not\n\t * regain control until the user code is finished, in which case we terminate\n\t * the thread.\n\t */\n\tiRet = pThis->pUsrThrdMain(pThis);\n\n\tif(iRet == RS_RET_OK) {\n\t\tdbgprintf(\"thrdStarter: usrThrdMain %s - 0x%lx returned with iRet %d, exiting now.\\n\",\n\t\t\t  pThis->name, (unsigned long) pThis->thrdID, iRet);\n\t} else {\n\t\tLogError(0, iRet, \"main thread of %s terminated abnormally\", pThis->name);\n\t}\n\n\t/* signal master control that we exit (we do the mutex lock mostly to\n\t * keep the thread debugger happer, it would not really be necessary with\n\t * the logic we employ...)\n\t */\n\td_pthread_mutex_lock(&pThis->mutThrd);\n\tpThis->bIsActive = 0;\n\tpthread_cond_signal(&pThis->condThrdTerm);\n\td_pthread_mutex_unlock(&pThis->mutThrd);\n\n\tpthread_exit(0);\n}\n/* Start a new thread and add it to the list of currently\n * executing threads. It is added at the end of the list.\n * rgerhards, 2007-12-14\n */\nrsRetVal thrdCreate(rsRetVal (*thrdMain)(thrdInfo_t*), rsRetVal(*afterRun)(thrdInfo_t *),\n\tsbool bNeedsCancel, uchar *name)\n{\n\tDEFiRet;\n\tthrdInfo_t *pThis;\n#if defined (_AIX)\n\tpthread_attr_t aix_attr;\n#endif\n\n\tassert(thrdMain != NULL);\n\n\tCHKiRet(thrdConstruct(&pThis));\n\tpThis->bIsActive = 1;\n\tpThis->pUsrThrdMain = thrdMain;\n\tpThis->pAfterRun = afterRun;\n\tpThis->bNeedsCancel = bNeedsCancel;\n\tpThis->name = ustrdup(name);\n#if defined (_AIX)\n\tpthread_attr_init(&aix_attr);\n\tpthread_attr_setstacksize(&aix_attr, 4096*512);\n\tpthread_create(&pThis->thrdID, &aix_attr, thrdStarter, pThis);\n#else\n\tpthread_create(&pThis->thrdID, &default_thread_attr, thrdStarter, pThis);\n#endif\n\tCHKiRet(llAppend(&llThrds, NULL, pThis));\n\nfinalize_it:\n\tRETiRet;\n}\n\n\n/* initialize the thread-support subsystem\n * must be called once at the start of the program\n */\nrsRetVal thrdInit(void)\n{\n\tDEFiRet;\n\tiRet = llInit(&llThrds, (rsRetVal (*)(void*)) thrdDestruct, NULL, NULL);\n\tRETiRet;\n}\n\n\n/* de-initialize the thread subsystem\n * must be called once at the end of the program\n */\nrsRetVal thrdExit(void)\n{\n\tDEFiRet;\n\tiRet = llDestroy(&llThrds);\n\tRETiRet;\n}\n\n\n/* vi:set ai:\n */\n"
        },
        {
          "name": "threads.h",
          "type": "blob",
          "size": 1.75390625,
          "content": "/* Definition of the threading support module.\n *\n * Copyright 2007-2012 Adiscon GmbH.\n *\n * This file is part of rsyslog.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *       -or-\n *       see COPYING.ASL20 in the source distribution\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n#ifndef THREADS_H_INCLUDED\n#define THREADS_H_INCLUDED\n\n/* the thread object */\nstruct thrdInfo {\n\tpthread_mutex_t mutThrd;/* mutex for handling long-running operations and shutdown */\n\tpthread_cond_t condThrdTerm;/* condition: thread terminates (used just for shutdown loop) */\n\tint bIsActive;\t\t/* Is thread running? */\n\tint bShallStop;\t\t/* set to 1 if the thread should be stopped ? */\n\trsRetVal (*pUsrThrdMain)(struct thrdInfo*); /* user thread main to be called in new thread */\n\trsRetVal (*pAfterRun)(struct thrdInfo*);   /* cleanup function */\n\tpthread_t thrdID;\n\tsbool bNeedsCancel;\t/* must input be terminated by pthread_cancel()? */\n\tuchar *name;\t\t/* a thread name, mainly for user interaction */\n};\n\n/* prototypes */\nrsRetVal thrdExit(void);\nrsRetVal thrdInit(void);\nrsRetVal thrdTerminate(thrdInfo_t *pThis);\nrsRetVal thrdTerminateAll(void);\nrsRetVal thrdCreate(rsRetVal (*thrdMain)(thrdInfo_t*), rsRetVal(*afterRun)(thrdInfo_t *), sbool, uchar*);\n\n/* macros (replace inline functions) */\n\n#endif /* #ifndef THREADS_H_INCLUDED */\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "travis.yml-TODO-RECONSIDER",
          "type": "blob",
          "size": 3.3349609375,
          "content": "sudo: required\n\nos:\n - osx\n - linux\n\nlanguage: c\n\ncompiler:\n  - gcc\n\n\nenv:\n  global:\n    - secure: DsTuVAZg5omWT652Xnz/ZG20nJ5ShdTDXPQA01HscUhjAzcuMYsCPp889QoLip+3O5yYH6/oH2WprQA6ZQQMt+7idNRo6ennu7tPQiHEBm/lK2Yq1W6r6tOb1zmSalbIVWV2cGTdKOOuHAatgmp/L70WjOlCrtLvPT+JQ9AkzLU=\n    - RSYSLOG_STATSURL=\"http://build.rsyslog.com/testbench-failedtest.php\"\n    - SUDO=sudo\n\naddons:\n  apt:\n    update: true\n\nmatrix:\n  allow_failures:\n    # the following is left in commented out to provide a sample of how\n    # this feature is used for multiple build matrix entries\n    #- env: RUN=\"docker-alpine.sh\"\n    #- env: RUN=\"docker-ubuntu-devel.sh\"\n    #- env: RUN=\"run-osx.sh\", CFLAGS=\"-g\"\n\n  exclude:\n     - compiler: \"gcc\"\n  include:\n     - os: linux\n       language: minimal\n       services: docker\n       env: RUN=\"travis-run-compile-tests.sh\"\n\n# right now does not work, so keep commented out\n#     - os: linux\n#       services: docker\n#       env: RUN=\"docker-ubuntu-devel.sh\"\n\n     - os: linux\n       compiler: \"clang\"\n       services:\n         - mysql\n         - postgresql\n       env: RUN=\"run.sh\",CHECK=\"YES\", ESTEST=\"YES\", CFLAGS=\"-g -O1 -fsanitize=address -fno-color-diagnostics\"\n\n     - os: linux\n       dist: xenial\n       compiler: \"gcc\"\n       services:\n         - docker\n       env: RUN=\"run.sh\",CHECK=\"YES\", IMDOCKER=\"YES\", MINIMAL_BUILD=\"YES\", EXTRA_CONFIGURE=\"--disable-default-tests --disable-elasticsearch --disable-impstats --disable-imfile --disable-imptcp --disable-gnutls -disable-openssl --disable-relp --disable-pmsnare --disable-pmlastmsg --disable-ommongodb\"\n\n#     - os: linux\n#       compiler: \"clang\"\n#       services:\n#         - mysql\n#         - postgresql\n#       env: RUN=\"run.sh\",CFLAGS=\"-fsanitize=undefined,nullability,unsigned-integer-overflow -fno-sanitize-recover=undefined,nullability,unsigned-integer-overflow -g -O3 -fno-omit-frame-pointer -fno-color-diagnostics\", UBSAN_OPTIONS=\"print_stacktrace=1\", CHECK=\"YES\", ESTEST=\"YES\", KAFKA=\"YES\"\n\n     - os: linux\n       compiler: \"clang\"\n       # we run this test without assert() enabled, so that we get \"production timing\"\n       services:\n         - mysql\n         - postgresql\n       env: RUN=\"run.sh\",AD_PPA=\"v8-devel\", CHECK=\"YES\", CFLAGS=\"-g -O1 -fsanitize=address -fno-color-diagnostics\", CONFIGURE_FLAGS=\"--disable-debug\"\n\n     - os: linux\n       compiler: \"gcc\"\n       services:\n         - mysql\n         - postgresql\n       env: RUN=\"run.sh\",BUILD_FROM_TARBALL=\"YES\", GROK=\"YES\", IMHTTP=\"YES\", CHECK=\"YES\", CFLAGS=\"-g -O2\", RS_TESTBENCH_VALGRIND_EXTRA_OPTS=\"--gen-suppressions=all\", EXTRA_CONFIGURE=\"--disable-default-tests --disable-elasticsearch --disable-impstats --disable-imfile --disable-imptcp --disable-gnutls -disable-openssl --disable-relp --disable-pmsnare --disable-pmlastmsg\"\n\n#     - os: linux\n#       compiler: \"gcc\"\n#       services:\n#         - mysql\n#         - postgresql\n#       env: RUN=\"run.sh\",BUILD_FROM_TARBALL=\"YES\", CHECK=\"YES\", CFLAGS=\"-g -O2\", RS_TESTBENCH_VALGRIND_EXTRA_OPTS=\"--suppressions=travis/trusty.supp --gen-suppressions=all\", EXTRA_CONFIGURE=\"--disable-default-tests\"\n#       dist: trusty\n\n     - os: osx\n       compiler: \"clang\"\n       env: RUN=\"run-osx.sh\", CFLAGS=\"-g\"\n\n     - os: linux\n       # CRON/Coverity entry!\n       compiler: \"gcc\"\n       env: RUN=\"run-cron.sh\",DO_COVERITY=\"YES\",DO_CRON=\"YES\", KAFKA=\"YES\", GROK=\"YES\", IMHTTP=\"YES\"\n\n\nscript:\n   - devtools/ci/travis/do-run.sh\n"
        }
      ]
    }
  ]
}