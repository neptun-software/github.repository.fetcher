{
  "metadata": {
    "timestamp": 1736709683411,
    "page": 49,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LongSoft/UEFITool",
      "stars": 4534,
      "defaultBranch": "new_engine",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.08203125,
          "content": "#################\n## Qt\n#################\nmoc_*.*\nui_*.*\nqrc_*.*\n\n#################\n## Qt Creator\n#################\n*.pro.user.*\n\n#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n\n[Dd]ebug/\n[Rr]elease/\nx64/\nbuild/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n#############\n## Windows detritus\n#############\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n.directory\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n\n#############\n## Python\n#############\n\n*.py[co]\n\n# Packages\n*.egg\n*.egg-info\ndist/\nbuild/\neggs/\nparts/\nvar/\nsdist/\ndevelop-eggs/\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n#############\n## qmake / make\n#############\n*.o\nMakefile\n\nuefitool_plugin_import.cpp\nUEFITool.app/\nUEFITool/XCBuildData\nUEFIDump/UEFIDump\nUEFIExtract/UEFIExtract\nUEFIExtract/guids.csv\nUEFIFind/UEFIFind\n.qmake.stash\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\nDerivedData\n*.xcodeproj\ncompile_commands.json\nCMakeScripts\nUEFITool/qrc_uefitool.cpp\nXcodeQT5\nXcodeQT6\n*.dSYM\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.1484375,
          "content": "CMAKE_MINIMUM_REQUIRED(VERSION 3.22)\n\nPROJECT(UEFITool_everything)\n\nADD_SUBDIRECTORY(UEFIExtract)\nADD_SUBDIRECTORY(UEFIFind)\nADD_SUBDIRECTORY(UEFITool)\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.2666015625,
          "content": "Copyright (c) 2015, Nikolaj Schlej\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.16796875,
          "content": "# UEFITool\n\nUEFITool is a viewer and editor of firmware images conforming to UEFI Platform Interface (PI) Specifications.\n\n![UEFITool icon](https://raw.githubusercontent.com/LongSoft/UEFITool/new_engine/UEFITool/icons/uefitool_64x64.png \"UEFITool icon\")  \n![CI Status](https://github.com/LongSoft/UEFITool/actions/workflows/main.yml/badge.svg?branch=new_engine) [![Scan Status](https://scan.coverity.com/projects/17209/badge.svg?flat=1)](https://scan.coverity.com/projects/17209) [![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=LongSoft_UEFITool&metric=alert_status)](https://sonarcloud.io/summary/new_code?id=LongSoft_UEFITool)\n\n\n## Very Brief Introduction to UEFI\n\nUnified Extensible Firmware Interface or UEFI is a post-BIOS firmware specification originally written by Intel for Itanium architecture and than adapted for X86 systems.  \nThe first EFI-compatible x86 firmwares were used on Apple Macintosh systems in 2006 and PC motherboard vendors started putting UEFI-compatible firmwares on their boards in 2011.  \nIn 2015 there are numerous systems using UEFI-compatible firmware including PCs, Macs, Tablets and Smartphones on x86, x86-64 and ARM architectures.  \nMore information on UEFI is available on [UEFI Forum official site](http://www.uefi.org/faq) and in [Wikipedia](http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface).  \n  \n## Very Brief Introduction to UEFITool\n\nUEFITool is a cross-platform open source application written in C++/Qt, that parses UEFI-compatible firmware image into a tree structure, verifies image's integrity and provides a GUI to manipulate image's elements.  \nProject development started in the middle of 2013 because of the lack of cross-platform open source utilities for tinkering with UEFI images.  \n\nIn the beginning of 2015 the major refactoring round was started to make the program compatible with newer UEFI features including FFSv3 volumes and fixed image elements. \nIt's in development right now with the following features still missing:\n* Editor part, i.e image reconstruction routines\n* Console UI\n\nThe missing parts are in development and the version with a new engine will be made as soon as image reconstruction works again.\n\n## Derived projects\n\nThere are some other projects that use UEFITool's engine:\n* UEFIExtract, which uses ffsParser to parse supplied firmware image into a tree structure and dumps the parsed structure recursively on the FS. Jethro Beekman's [tree](https://github.com/jethrogb/uefireverse) utility can be used to work with the extracted tree.\n* UEFIFind, which uses ffsParser to find image elements containing a specified pattern. It was developed for [UBU](https://winraid.level1techs.com/t/tool-guide-news-uefi-bios-updater-ubu/30357) project.\n\n## Alternatives\n\nRight now there are some alternatives to UEFITool that you could find useful too:\n* **[FMMT](https://github.com/tianocore/edk2/tree/master/BaseTools/Source/Python/FMMT)** by TianoCore. Python-based open source toolset for modifying EDK2-based UEFI firmware images. Does not support any IBV customizations, but is _official_, and lives in EDK2 repository.\n* **[Fiano](https://github.com/linuxboot/fiano)** by Google and Facebook. Go-based cross-platform open source toolset for modifying UEFI firmware images.\n* **[PhoenixTool](https://forums.mydigitallife.net/threads/tool-to-insert-replace-slic-in-phoenix-insyde-dell-efi-bioses.13194)** by [AndyP](https://forums.mydigitallife.net/members/andyp.39295). Windows-only freeware GUI application written in C#. Used mostly for SLIC-related modifications, but it not limited to this task. Requires Microsoft .NET 3.5 to work properly. Supports unpacking firmware images from various vendor-specific formats like encrypted HP update files and Dell installers.\n* **[uefi-firmware-parser](https://github.com/theopolis/uefi-firmware-parser)** by [Teddy Reed](https://github.com/theopolis). Cross-platform open source console application written in Python. Very tinker-friendly due to use of Python. Can be used in scripts to automate firmware patching.\n* **[Chipsec](https://github.com/chipsec/chipsec)** by Intel. Cross-platform partially open source console application written in Python and C. Can be used to test Intel-based platforms for various security-related misconfigurations, but also has NVRAM parser and other components aimed to firmware modification.\n\n## Installation\n\nYou can either use [pre-built binaries for Windows and macOS](https://github.com/LongSoft/UEFITool/releases) or build a binary yourself.  \n* To build a binary that uses Qt library (UEFITool) you need a C++ compiler and an instance of [Qt5 or Qt6](https://www.qt.io) library. Install both of them, get the sources, generate makefiles using qmake (`qmake ./UEFITool/uefitool.pro`) and use your system's make command on that generated files (i.e. `nmake release`, `make release` and so on). Qt6-based builds can also use CMAKE as an altearnative build system.\n* To build a binary that doesn't use Qt (UEFIExtract, UEFIFind), you need a C++ compiler and [CMAKE](https://cmake.org) utility to generate a makefile for your OS and build environment. Install both of them, get the sources, generate makefiles using cmake (`cmake UEFIExtract`) and use your system's make command on that generated files (i.e. `nmake release`, `make release` and so on). Non-Qt builds can also use Meson as an alternative build system.\n\n## Known issues\n\n* Image editing is currently only possible using an outdated and unsupported UEFITool 0.28 (`old_engine` branch) and the tools based on it (`UEFIReplace`, `UEFIPatch`). This is the top priority [issue #67](https://github.com/LongSoft/UEFITool/issues/67), which is being worked on, albeit slowly (due to the amount of coding and testing required to implement it correctly). \n* Some vendor-specific firmware update files can be opened incorrectly or can't be opened at all. This includes encrypted HP update files, Dell HDR and EXE files, some InsydeFlash FD files and so on. Enabling support for such files will require massive amount of reverse-engineering which is almost pointless because the updated image can be obtained from BIOS chip where it's already decrypted and unpacked.\n* Intel Firmware Interface Table (FIT) editing is not supported right now. FIT contains pointers to various image components that must be loaded before executing the first CPU instruction from the BIOS chip. Those components include CPU microcode updates, binaries and settings used by BIOS Guard and Boot Guard technologies and some other stuff. More information on FIT can be obtained [here](https://edc.intel.com/content/www/us/en/design/products-and-solutions/software-and-services/firmware-and-bios/firmware-interface-table/firmware-interface-table/).\n* Windows builds of `UEFIExtract` might encouter an issue with folder paths being longer than 260 bytes (`MAX_PATH`) on some input files (see [issue #363](https://github.com/LongSoft/UEFITool/issues/363)). This is a [known Windows limitation](https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry), that can be fixed by enabling long paths support via Windows Registry and adding a manifest to the executable file that requires such support. `UEFIExtract` has the required manifest additions since version `A67`, and the required registry file is provided by Microsoft on the page linked above, but this workaround is only awailable starting with Windows 10 build 1067.   \n\n## Bug repellents\n\n* [Coverity Scan](https://scan.coverity.com/projects/17209) - static analyzer for C, C++, C#, JavaScript, Ruby, or Python code.\n* [SonarCloud](https://sonarcloud.io/project/overview?id=LongSoft_UEFITool) - cloud-based code analysis service.\n* [PVS-Studio](https://pvs-studio.com/en/pvs-studio/?utm_source=github&utm_medium=organic&utm_campaign=open_source) - static analyzer for C, C++, C#, and Java code.\n* [CodeQL](https://codeql.github.com/docs/codeql-overview/about-codeql) - code analysis engine developed by GitHub to automate security checks.\n\n## GUID Database\n\nEvery new release includes an update to the database of known UEFI-related GUIDs build with help of [Linux Vendor Firmware Service](https://fwupd.org).\n\nYou can download the up-to-date version of that database using [this link](https://fwupd.org/lvfs/shards/export/csv).\n"
        },
        {
          "name": "UEFIExtract",
          "type": "tree",
          "content": null
        },
        {
          "name": "UEFIFind",
          "type": "tree",
          "content": null
        },
        {
          "name": "UEFITool",
          "type": "tree",
          "content": null
        },
        {
          "name": "appstream",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzzing",
          "type": "tree",
          "content": null
        },
        {
          "name": "kaitai_regenerate.sh",
          "type": "blob",
          "size": 1.7158203125,
          "content": "#!/bin/bash\n\nUTARGET=$(uname)\n\n# Determine platform\nif [ \"$UTARGET\" = \"Darwin\" ]; then\n  export UPLATFORM=\"mac\"\n  export UFIND=\"find -E\"\n  export UFINDOPT=\"\"\n  export USEDOPT=\"''\"\nelif [ \"$UTARGET\" = \"Linux\" ]; then\n  export UPLATFORM=\"linux_$(uname -m)\"\n  export UFIND=\"find\"\n  export UFINDOPT=\"-regextype posix-extended\"\n  export USEDOPT=\"\"\nelse\n  export UPLATFORM=\"$UTARGET\"\n  echo \"Please run this script on Linux or macOS\"\nfi\n\n# Generate\necho \"Attempting to to generate parsers from Kaitai KSY files on ${UPLATFORM}...\"\nkaitai-struct-compiler --target cpp_stl --cpp-standard 11 --outdir common/generated common/ksy/* || exit 1\n\n# Show generated files\n${UFIND} common/generated ${UFINDOPT} \\\n -regex '.*\\.(cpp|h)' \\\n -print || exit 1\n\n# Replace global includes for kaitai with local ones (<> -> \"\")\n${UFIND} common/generated ${UFINDOPT} \\\n -regex '.*\\.(cpp|h)' \\\n -exec sed -i ${USEDOPT} '/^#include <kaitai/s/[<>]/\\\"/g' {} + || exit 1\n\n# Add .. to the include path for kaitai includes\n${UFIND} common/generated ${UFINDOPT} \\\n -regex '.*\\.(cpp|h)' \\\n -exec sed -i ${USEDOPT} '/^#include \\\"kaitai\\//s/kaitai\\//..\\/kaitai\\//g' {} + || exit 1\n\n# Suppress \"p__root - unused parameter\" warning\n${UFIND} common/generated ${UFINDOPT} \\\n -regex '.*\\.(cpp)' \\\n -exec sed -i ${USEDOPT} '/^    m__root = this;/s/;/; (void)p__root;/g' {} + || exit 1\n\n# Add uint64_t to enum structure_ids_t\n${UFIND} common/generated ${UFINDOPT} \\\n -regex '.*\\.(h)' \\\n -exec sed -i ${USEDOPT} '/^    enum structure_ids_t {/s/{/: uint64_t {/g' {} + || exit 1\n\n# Suppress type downcast warning in ami_nvar.cpp\n${UFIND} common/generated ${UFINDOPT} \\\n -name 'ami_nvar.cpp' \\\n -exec sed -i ${USEDOPT} 's/_offset = _io()->pos();/_offset = (int32_t)_io()->pos();/g' {} + || exit 1\n\nexit 0\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 0.2421875,
          "content": "project('UEFITool', ['c', 'cpp'],\n  version: 'A69',\n  license: 'BSD-2-Clause',\n  meson_version: '>=0.45.0',\n  default_options : ['c_std=c11', 'cpp_std=c++11'],\n)\n\nzlib = dependency('zlib')\n\nsubdir('common')\nsubdir('UEFIExtract')\nsubdir('UEFIFind')\n"
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 0.060546875,
          "content": "sonar.projectKey=LongSoft_UEFITool\nsonar.organization=longsoft"
        },
        {
          "name": "version.h",
          "type": "blob",
          "size": 0.5810546875,
          "content": "/* version.h\n\nCopyright (c) 2019, Nikolaj Schlej. All rights reserved.\nThis program and the accompanying materials\nare licensed and made available under the terms and conditions of the BSD License\nwhich accompanies this distribution.  The full text of the license may be found at\nhttp://opensource.org/licenses/bsd-license.php\n\nTHE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.\n\n*/\n\n#ifndef VERSION_H\n#define VERSION_H\n\n#define PROGRAM_VERSION \"NE alpha 69\" \" (\" __DATE__ \")\"\n\n#endif // VERSION_H\n"
        }
      ]
    }
  ]
}