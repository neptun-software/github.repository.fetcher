{
  "metadata": {
    "timestamp": 1736710229384,
    "page": 956,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zardus/preeny",
      "stars": 1583,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.015625,
          "content": "build*\n*.so\n*.o\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.9775390625,
          "content": "cmake_minimum_required (VERSION 2.6)\nproject (Preeny)\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nadd_library(common-preeny STATIC src/logging.c)\n\n# Malloc\nadd_library(crazyrealloc SHARED src/crazyrealloc.c)\ntarget_link_libraries(crazyrealloc common-preeny dl)\nadd_library(mallocwatch SHARED src/mallocwatch.c)\ntarget_link_libraries(mallocwatch common-preeny dl)\n\n# Signals\nadd_library(dealarm SHARED src/dealarm.c)\ntarget_link_libraries(dealarm common-preeny)\nadd_library(desigact SHARED src/desigact.c)\ntarget_link_libraries(desigact common-preeny)\nadd_library(startstop SHARED src/startstop.c)\ntarget_link_libraries(startstop common-preeny)\n\n# Defork\nadd_library(defork SHARED src/defork.c)\ntarget_link_libraries(defork common-preeny)\n\n# Deptrace\nadd_library(deptrace SHARED src/deptrace.c)\ntarget_link_libraries(deptrace common-preeny)\n\n# Sleep\nadd_library(desleep SHARED src/desleep.c)\ntarget_link_libraries(desleep common-preeny)\n\n# Socket\nadd_library(desock SHARED src/desock.c)\ntarget_link_libraries(desock common-preeny dl pthread)\nadd_library(desock_dup SHARED src/desock_dup.c)\ntarget_link_libraries(desock_dup common-preeny dl)\nadd_library(ensock SHARED src/ensock.c)\ntarget_link_libraries(ensock common-preeny dl)\nadd_library(writeout SHARED src/writeout.c)\ntarget_link_libraries(writeout common-preeny dl)\n\n# Random\nadd_library(desrand SHARED src/desrand.c)\ntarget_link_libraries(desrand common-preeny dl)\nadd_library(derand SHARED src/derand.c)\ntarget_link_libraries(derand common-preeny dl)\n\n# Time\nadd_library(detime SHARED src/detime.c)\ntarget_link_libraries(detime common-preeny dl)\n\n# UID\nadd_library(deuid SHARED src/deuid.c)\ntarget_link_libraries(deuid common-preeny dl)\n\n# Patch\nadd_library(patch SHARED src/patch.c)\ntarget_link_libraries(patch common-preeny ini_config dl)\n\n# EOF killer\nadd_library(eofkiller SHARED src/eofkiller.c)\ntarget_link_libraries(eofkiller common-preeny dl)\n\n# Canary\nadd_library(getcanary SHARED src/getcanary.c)\ntarget_link_libraries(getcanary common-preeny dl)\nadd_library(setcanary SHARED src/setcanary.c)\ntarget_link_libraries(setcanary common-preeny dl)\n\n# SetSTDIN\nadd_library(setstdin SHARED src/setstdin.c)\ntarget_link_libraries(setstdin common-preeny dl)\n\n# nowrite\nadd_library(nowrite SHARED src/nowrite.c)\ntarget_link_libraries(nowrite common-preeny dl)\n\n# Tests\nadd_executable(test_hello test/hello.c)\nadd_executable(test_rand test/rand.c)\nadd_executable(test_realloc test/realloc.c)\nadd_executable(test_sleep test/sleep.c)\nadd_executable(test_sock test/sock.c)\nadd_executable(test_uid test/uid.c)\nadd_executable(test_setstdin_read  test/setstdin_read.c)\nadd_executable(test_setstdin_fread test/setstdin_fread.c)\nadd_executable(test_setstdin_getc  test/setstdin_getc.c)\nadd_executable(test_nowrite test/nowrite.c)\n\n\n\n# Scripts\nfile(COPY ${CMAKE_SOURCE_DIR}/test/run_tests.sh DESTINATION ${CMAKE_BINARY_DIR})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.3369140625,
          "content": "Copyright (c) 2015, Yan Shoshitaishvili and others (https://github.com/zardus/preeny/graphs/contributors)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.216796875,
          "content": ".PHONY: all dist test clean\n\nall: dist test\n\ndist:\n\t$(MAKE) -C src clean\n\t$(MAKE) -C src dist\n\ntest:\n\t$(MAKE) -C test\n\nclean:\n\t$(MAKE) -C src clean\n\t$(MAKE) -C test clean\n\trm -rf *-*-*/\n\narchinfo:\n\t$(MAKE) -C src archinfo\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4453125,
          "content": "# preeny\n\nPreeny helps you pwn noobs by making it easier to interact with services locally.\nIt disables `fork()`, `rand()`, and `alarm()` and, if you want, can convert a server application to a console one using clever/hackish tricks, and can even patch binaries!\n\nPreeny has the following modules:\n\n| Name | Summary |\n|------|---------|\n| dealarm | Disables alarm() |\n| defork | Disables fork() |\n| deptrace | Disables ptrace() |\n| derand | Disables rand() and random() |\n| desigact | Disables sigaction() |\n| desock | Channels socket communication to the console |\n| desock\\_dup | Channels socket communication to the console (simpler method) |\n| ensock | The opposite of desock -- like an LD\\_PRELOAD version of socat! |\n| desrand | Does tricky things with srand() to control randomness. |\n| detime | Makes time() always return the same value. |\n| desleep | Makes sleep() and usleep() do nothing. |\n| mallocwatch | When ltrace is inconvenient, mallocwatch provides info on heap operations. |\n| writeout | Some binaries write() to fd 0, expecting it to be a two-way socket. This makes that work (by redirecting to fd 1). |\n| patch | Patches programs at load time. |\n| startstop | Sends SIGSTOP to itself on startup, to suspend the process. |\n| crazyrealloc | ensures that whatever is being reallocated is always moved to a new location in memory, thus free()ing the old. |\n| deuid | Change the UID and effective UID of a process |\n| eofkiller | Exit on EOF on several read functions |\n| getcanary | Dumps the canary on program startup (x86 and amd64 only at the moment). |\n| setcanary | Overwrites the canary with a user-provided one on program startup (amd64-only at the moment). |\n| setstdin  | Sets user defined STDIN data instead of real one, overriding `read`, `fread`, `fgetc`, `getc` and `getchar` calls. Read [here](#stdin-substitution) for more info |\n| nowrite | Forces open() to open files in readonly mode. Downgrading from readwrite or writeonly mode, and taking care of append, mktemp and other write-related flags as well |\n\n## Building\n\npreeny's patch functionality uses `libini_config` to read `.ini` files.\n\n* On debian-based distros, you can install `libini-config-dev`.\n* On Arch-based distros, you can install `ding-libs`.\n* On Fedora-based distros, you can install `libini_config-devel`.\n\nAlso deexec uses `seccomp` to setup a filter to blacklist `execve` like calls.\n\n* On debian-based distros, you can install `libseccomp-dev`.\n* On Arch-based distros, you can install `libseccomp`.\n* On Fedora-based distros, you can install `libseccomp-devel`.\n\nIf you're not running a debian, Arch, or Fedora based distro, you've brought the pain upon yourself.\n\nYou can build preeny by doing:\n\n    make\n\nIt'll create a directory named after the OS and architecture type, then put the libraries there.\n\n### Cross-compilation\n\nIf you need to build 32-bit x86 preeny libs on a 64-bit x86 host, you can do:\n\n    make ARCH=i386\n\nAlternatively, if you want to utilize a cross-compiler, pass the `CC` variable to `make`.  For example:\n\n    make -i CC=mips-malta-linux-gnu-gcc\n\nBecause some modules fail in cross-complilation, it's recommended to use `make -i`.\n\n### CMake\n\nYou can also build the project with cmake. Look at the cmake-build-*.sh scripts for example on how.\n\n## Usage\n\nLet's say that you have an application that you want to interact with on the commandline, but it a) forks, b) sets an alarm which makes it hard to take your time studying its behavior, and c) demands to be connected to even if you don't want to do that.\nYou can do:\n\n```bash\nLD_PRELOAD=x86_64-linux-gnu/desock.so:x86_64-linux-gnu/defork.so:x86_64-linux-gnu/dealarm.so \\\n  ~/code/security/codegate/2015/rodent/rodent\n```\n\nPretty awesome stuff!  Of course, you can pick and choose which preloads you want:\n\n```bash\necho 'No fork or alarm for you, but I still want to netcat!'\nLD_PRELOAD=x86_64-linux-gnu/defork.so:x86_64-linux-gnu/dealarm.so ~/code/security/codegate/2015/rodent/rodent\n\necho 'Ok, go ahead and fork, but no alarm. Time to brute force that canary.'\nLD_PRELOAD=x86_64-linux-gnu/dealarm.so ~/code/security/codegate/2015/rodent/rodent\n```\n\nHave fun!\n\n## Simple Things\n\nThe simple functionality in preeny is disabling of fork and alarm.\n\nCTF services frequently use alarm to help mitigate hung connections from players, but this has the effect of being frustrating when you're debugging the service.\n\nFork is sometimes frustrating because some tools are unable to follow fork on some platforms and, when they do follow fork, the parent is oftentimes abandoned in the background, needing to be terminated manually afterwards.\n\n`dealarm.so` replaces `alarm()` with a function that just does a `return 0`.\n`defork.so` does the same thing to `fork()`, means that the program will think that the fork has succeeded and that it's the child.\n\n## Derandomization\n\nIt's often easiest to test your exploits without extra randomness, and then ease up on the cheating little by little.\nPreeny ships with two modules to help: `derand` and `desrand`.\n\n`derand.so` replaces `rand()` and `random()` and returns a configurable value. Just specify it in the RAND environment (or go with the default of 42):\n\n```bash\n# this will return 42 on each rand() call\nLD_PRELOAD=x86_64-linux-gnu/derand.so tests/rand\n\n# this will return 1337 on each rand() call\nRAND=1337 LD_PRELOAD=x86_64-linux-gnu/derand.so tests/rand\n```\n\nFor slightly more complex things, `desrand.so` lets you override the `srand` function to your liking.\n\n```bash\n# this simply sets the seed to 42\nLD_PRELOAD=x86_64-linux-gnu/desrand.so tests/rand\n\n# this sets the seed to 1337\nSEED=1337 LD_PRELOAD=x86_64-linux-gnu/desrand.so tests/rand\n\n# this sets the seed to such that the first \"rand() % 128\" will be 10\nWANT=10 MOD=128 LD_PRELOAD=x86_64-linux-gnu/desrand.so tests/rand\n\n# finally, this makes the *third* \"rand() % 128\" be 10\nSKIP=2 WANT=10 MOD=128 LD_PRELOAD=x86_64-linux-gnu/desrand.so tests/rand\n```\n\n`desrand` does all this by brute-forcing the seed value, so keep in mind that startup speed will get considerably slower as `MOD` increases.\n\n## De-socketing\n\nCertain tools (such as American Fuzzy Lop, for example) are unable to handle network binaries.\nPreeny includes two \"de-socketing\" modules.\n`desock.so` neuters `socket()`, `bind()`, `listen()`, and `accept()`, making it return sockets that are, through hackish ways, synchronized to `stdin` and `stdout`.\n`desock_dup.so` is a simpler version for programs that dup accepted sockets over file descriptors 0, 1, and 2.\n\nA discussion of the different ways to de-socket program, and why Preeny does it the way it does, can be found [here](https://github.com/zardus/preeny/issues/10).\n\n## En-socketing\n\nYou can also use preeny to turn a normal binary into a socket binary! Just set the `PORT` environment variable (default is 1337) and preload `ensock.so`!\n\n## Preload patching\n\n`patch.so` patches binaries!\nThis is done before program start, by triggering the patcher from a constructor function in `patch.so`.\nPatches are specified in a `.ini` format, and applied by including `patch.so` in `LD_PRELOAD` and providing a patch file specified by the `PATCH` environment variable.\nFor example:\n\n```ShellSession\n# tests/hello\nHello world!\n# cat hello.p\n[hello]\naddress=0x4005c4\ncontent='4141414141'\n\n[world]\naddress=0x4005ca\ncontent='6161616161'\n# PATCH=\"hello.p\" LD_PRELOAD=x86_64-linux-gnu/patch.so tests/hello\n--- section hello in file hello.p specifies 5-byte patch at 0x4005c4\n--- section world in file hello.p specifies 5-byte patch at 0x4005ca\nAAAAA aaaaa!\n\n```\n\nHaving different patch files and just enabling/disabling them via preload is oftentimes easier than modifying the underlying binary.\n\n## STDIN substitution\n\n`setstdin.so` allows to replace `STDIN` with user defined data. It overrides `read`, `fread`, `fgetc`, `getc` and `getchar` calls, and\nreturn user defined data when binary asks for some `STDIN`.\n\n`setstdin` first tries to get user defined data form `PREENY_STDIN` environment variabe, if this variable is not defined, it tries to read data\nfrom file, defined in `PREENY_STDIN_FILENAME` environment variable. If both are not defined, `setstdin` uses some default value.\n\n```ShellSession\n$ PREENY_STDIN=New_message LD_PRELOAD=src/setstdin.so test/setstdin_read\nN|ew|_me|ssag|e|\n\n$ echo \"Some other message\" > tmp_file\n$ PREENY_STDIN_FILENAME=tmp_file LD_PRELOAD=src/setstdin.so test/setstdin_getc\nS|o|m|e| |o|t|h|e|r| |m|e|s|s|a|g|e|\n\n$ LD_PRELOAD=src/setstdin.so test/setstdin_fread\nD|ef|aul|t se|tstdi|n valu|e. Plea|se set P|REENY_STD|IN or PREE|NY_STDIN_FI|LENAME envir|onment variab|les to set you|r own value\n\n```\n"
        },
        {
          "name": "cmake-build-multiarch.sh",
          "type": "blob",
          "size": 0.1474609375,
          "content": "#!/bin/sh\nmkdir -p build_x64 build_x86\nCFLAGS=-m32 CXXFLAGS=-m32 cmake . -Bbuild_x86\n(cd build_x86 && make)\ncmake . -Bbuild_x64\n(cd build_x64 && make)\n"
        },
        {
          "name": "cmake-build.sh",
          "type": "blob",
          "size": 0.0576171875,
          "content": "#/bin/sh\nmkdir -p build\ncmake . -Bbuild\n(cd build && make)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}