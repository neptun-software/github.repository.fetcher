{
  "metadata": {
    "timestamp": 1736709697388,
    "page": 70,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xiph/rnnoise",
      "stars": 4253,
      "defaultBranch": "main",
      "files": [
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0361328125,
          "content": "Jean-Marc Valin <jmvalin@jmvalin.ca>\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.57421875,
          "content": "Copyright (c) 2007-2017, 2024 Jean-Marc Valin\nCopyright (c) 2023 Amazon\nCopyright (c) 2017, Mozilla\nCopyright (c) 2005-2017, Xiph.Org Foundation\nCopyright (c) 2003-2004, Mark Borgerding\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n- Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n\n- Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\n- Neither the name of the Xiph.Org Foundation nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 4.83203125,
          "content": "ACLOCAL_AMFLAGS = -I m4\n\nAM_CFLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/src $(DEPS_CFLAGS)\n\ndist_doc_DATA = COPYING AUTHORS README\n\ninclude_HEADERS = include/rnnoise.h\n\nlib_LTLIBRARIES = librnnoise.la\nnoinst_HEADERS = src/arch.h  \\\n\t\t src/celt_lpc.h  \\\n\t\t src/cpu_support.h \\\n\t\t src/common.h  \\\n\t\t src/denoise.h \\\n\t\t src/_kiss_fft_guts.h  \\\n\t\t src/kiss_fft.h  \\\n\t\t src/nnet.h \\\n\t\t src/nnet_arch.h \\\n\t\t src/opus_types.h  \\\n\t\t src/pitch.h  \\\n\t\t src/rnn.h  \\\n\t\t src/rnnoise_data.h \\\n\t\t src/vec_neon.h \\\n\t\t src/vec.h \\\n\t\t src/vec_avx.h \\\n\t\t src/x86/x86_arch_macros.h \\\n\t\t src/x86/x86cpu.h \\\n\t\t src/x86/dnn_x86.h\n\nRNNOISE_SOURCES = \\\n\tsrc/denoise.c \\\n\tsrc/rnn.c \\\n\tsrc/pitch.c \\\n\tsrc/kiss_fft.c \\\n\tsrc/celt_lpc.c \\\n\tsrc/nnet.c \\\n\tsrc/nnet_default.c \\\n\tsrc/parse_lpcnet_weights.c \\\n\tsrc/rnnoise_data.c \\\n\tsrc/rnnoise_tables.c\n\nRNNOISE_SOURCES_SSE4_1 = src/x86/nnet_sse4_1.c\nRNNOISE_SOURCES_AVX2 = src/x86/nnet_avx2.c\n\nX86_RTCD = src/x86/x86_dnn_map.c \\\n\t   src/x86/x86cpu.c\n\nif RNN_ENABLE_X86_RTCD\nRNNOISE_SOURCES += $(X86_RTCD) $(RNNOISE_SOURCES_SSE4_1) $(RNNOISE_SOURCES_AVX2)\nendif\n\nlibrnnoise_la_SOURCES = $(RNNOISE_SOURCES)\nlibrnnoise_la_LIBADD = $(DEPS_LIBS) $(lrintf_lib) $(LIBM)\nlibrnnoise_la_LDFLAGS = -no-undefined \\\n -version-info @OP_LT_CURRENT@:@OP_LT_REVISION@:@OP_LT_AGE@\n\nnoinst_PROGRAMS = dump_features dump_weights_blob\nif OP_ENABLE_EXAMPLES\nnoinst_PROGRAMS += examples/rnnoise_demo\nendif\n\nexamples_rnnoise_demo_SOURCES = examples/rnnoise_demo.c\nexamples_rnnoise_demo_LDADD = librnnoise.la\n\ndump_features_SOURCES = src/dump_features.c src/denoise.c src/pitch.c src/celt_lpc.c src/kiss_fft.c src/parse_lpcnet_weights.c src/rnnoise_tables.c\ndump_features_LDADD = $(LIBM)\ndump_features_CFLAGS = $(AM_CFLAGS) -DTRAINING\n\ndump_weights_blob_SOURCES = src/write_weights.c\ndump_weights_blob_LDADD = $(LIBM)\ndump_weights_blob_CFLAGS = $(AM_CFLAGS) -DDUMP_BINARY_WEIGHTS\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = rnnoise.pc\n\ndebug:\n\t$(MAKE) CFLAGS=\"${CFLAGS} -O0 -ggdb -DOP_ENABLE_ASSERTIONS\" all\n\nEXTRA_DIST = \\\n rnnoise.pc.in \\\n rnnoise-uninstalled.pc.in \\\n doc/Doxyfile.in \\\n doc/Makefile\n\n# Targets to build and install just the library without the docs\nlibrnnoise install-librnnoise: NO_DOXYGEN = 1\n\nrnnoise: all\ninstall-rnnoise: install\n\n# Or just the docs\ndocs: doc/doxygen-build.stamp\n\ninstall-docs:\n\t@if [ -z \"$(NO_DOXYGEN)\" ]; then \\\n\t  ( cd doc && \\\n\t    echo \"Installing documentation in $(DESTDIR)$(docdir)\"; \\\n\t    $(INSTALL) -d $(DESTDIR)$(docdir)/html/search; \\\n\t    for f in `find html -type f \\! -name \"installdox\"` ; do \\\n\t      $(INSTALL_DATA) $$f $(DESTDIR)$(docdir)/$$f;     \\\n\t    done ) \\\n\tfi\n\ndoc/doxygen-build.stamp: doc/Doxyfile \\\n                         $(top_srcdir)/include/*.h\n\t@[ -n \"$(NO_DOXYGEN)\" ] || ( cd doc && doxygen && touch $(@F) )\n\n\nif HAVE_DOXYGEN\n\n# Or everything (by default)\nall-local: docs\n\ninstall-data-local: install-docs\n\nclean-local:\n\t$(RM) -r doc/html\n\t$(RM) -r doc/latex\n\t$(RM) doc/doxygen-build.stamp\n\nuninstall-local:\n\t$(RM) -r $(DESTDIR)$(docdir)/html\n\nendif\n\n# We check this every time make is run, with configure.ac being touched to\n# trigger an update of the build system files if update_version changes the\n# current PACKAGE_VERSION (or if package_version was modified manually by a\n# user with either AUTO_UPDATE=no or no update_version script present - the\n# latter being the normal case for tarball releases).\n#\n# We can't just add the package_version file to CONFIGURE_DEPENDENCIES since\n# simply running autoconf will not actually regenerate configure for us when\n# the content of that file changes (due to autoconf dependency checking not\n# knowing about that without us creating yet another file for it to include).\n#\n# The MAKECMDGOALS check is a gnu-make'ism, but will degrade 'gracefully' for\n# makes that don't support it.  The only loss of functionality is not forcing\n# an update of package_version for `make dist` if AUTO_UPDATE=no, but that is\n# unlikely to be a real problem for any real user.\n$(top_srcdir)/configure.ac: force\n\t@case \"$(MAKECMDGOALS)\" in \\\n\t    dist-hook)                             exit 0       ;; \\\n\t    dist-* | dist | distcheck | distclean) _arg=release ;; \\\n\tesac; \\\n\tif ! $(top_srcdir)/update_version $$_arg 2> /dev/null; then \\\n\t    if [ ! -e $(top_srcdir)/package_version ]; then \\\n\t\techo 'PACKAGE_VERSION=\"unknown\"' > $(top_srcdir)/package_version; \\\n\t    fi; \\\n\t    . $(top_srcdir)/package_version || exit 1; \\\n\t    [ \"$(PACKAGE_VERSION)\" != \"$$PACKAGE_VERSION\" ] || exit 0; \\\n\tfi; \\\n\ttouch $@\n\nforce:\n\n# Create a minimal package_version file when make dist is run.\ndist-hook:\n\techo 'PACKAGE_VERSION=\"$(PACKAGE_VERSION)\"' > $(top_distdir)/package_version\n\n\n.PHONY: rnnoise install-rnnoise docs install-docs\n\nif RNN_ENABLE_X86_RTCD\nSSE4_1_OBJ = $(RNNOISE_SOURCES_SSE4_1:.c=.lo)\n$(SSE4_1_OBJ): CFLAGS += $(OPUS_X86_SSE4_1_CFLAGS)\n\nAVX2_OBJ = $(RNNOISE_SOURCES_AVX2:.c=.lo)\n$(AVX2_OBJ): CFLAGS += $(OPUS_X86_AVX2_CFLAGS)\nendif\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 5.66015625,
          "content": "RNNoise is a noise suppression library based on a recurrent neural network.\nA description of the algorithm is provided in the following paper:\n\nJ.-M. Valin, A Hybrid DSP/Deep Learning Approach to Real-Time Full-Band Speech\nEnhancement, Proceedings of IEEE Multimedia Signal Processing (MMSP) Workshop,\narXiv:1709.08243, 2018.\nhttps://arxiv.org/pdf/1709.08243.pdf\n\nAn interactive demo of version 0.1 is available at: https://jmvalin.ca/demo/rnnoise/\n\nTo compile, just type:\n% ./autogen.sh\n% ./configure\n% make\n\nOptionally:\n% make install\n\nIt is recommended to either set -march= in the CFLAGS to an architecture\nwith AVX2 support or to add --enable-x86-rtcd to the configure script\nso that AVX2 (or SSE4.1) can at least be used as an option.\nNote that the autogen.sh script will automatically download the model files\nfrom the Xiph.Org servers, since those are too large to put in Git.\n\nWhile it is meant to be used as a library, a simple command-line tool is\nprovided as an example. It operates on RAW 16-bit (machine endian) mono\nPCM files sampled at 48 kHz. It can be used as:\n\n% ./examples/rnnoise_demo <noisy speech> <output denoised>\n\nThe output is also a 16-bit raw PCM file.\nNOTE AGAIN, THE INPUT and OUTPUT ARE IN RAW FORMAT, NOT WAV.\n\nThe latest version of the source is available from\nhttps://gitlab.xiph.org/xiph/rnnoise .  The GitHub repository\nis a convenience copy.\n\n== Training ==\n\nThe models distributed with RNNoise are now trained using only the publicly\navailable datasets listed below and using the training precedure described\nhere. Exact results will still depend on the the exact mix of data used,\non how long the training is performed and on the various random seeds involved.\n\nTo train an RNNoise model, you need both clean speech data, and noise data.\nBoth need to be sampled at 48 kHz, in 16-bit PCM format (machine endian).\nClean speech data can be obtained from the datasets listed in the datasets.txt\nfile, or by downloaded the already-concatenation of those files in\nhttps://media.xiph.org/rnnoise/data/tts_speech_48k.sw\nFor noise data, we suggest the background_noise.sw and foreground_noise.sw\n(or later versions) noise files from https://media.xiph.org/rnnoise/data/\nThe foreground_noise.sw file contains noise signals that are meant to be added\nto the background noise (e.g. keyboard sounds). Optionally, the foreground noise\nfile can even be denoised with a traditional denoiser (e.g. libspeexdsp) to\nkeep only the transient components.\n\nThe first step is to take the speech and noise, and mix them in a variety of ways\nto simulate real life conditions (including pauses, filtering and more).\nAssuming the files are called speech.pcm and noise.pcm, start by generating\nthe training feature data with:\n\n% ./dump_features speech.pcm background_noise.pcm foreground_noise.pcm features.f32 <count>\nwhere <count> is the number of sequences to process. The number of sequences\nshould be at least 10000, but the more the better (200000 or more is recommended).\n\nOptionally, training can also simulate reverberation, in which case room impulse\nresponses (RIR) are also needed. Limited RIR data is available at:\nhttps://media.xiph.org/rnnoise/data/measured_rirs-v2.tar.gz\nThe format for those is raw 32-bit floating-point (files are little endian).\nAssuming a list of all the RIR files is contained in a rir_list.txt file,\nthe training feature data can be generated with:\n\n% ./dump_features -rir_list rir_list.txt speech.pcm background_noise.pcm foreground_noise.pcm features.f32 <count>\n\nTo make the feature generation faster, you can use the script provided in\nscript/dump_features_parallel.sh (you will need to modify the script if you\nwant to add RIR augmentation).\n\nTo use it:\n% script/dump_features_parallel.sh ./dump_features speech.pcm background_noise.pcm foreground_noise.pcm features.f32 <count> rir_list.txt\nwhich will run nb_processes processes, each for count sequences, and\nconcatenate the output to a single file.\n\nOnce the feature file is computed, you can start the training with:\n% python3 train_rnnoise.py features.f32 output_directory\n\nChoose a number of epochs (using --epochs) that leads to about 75000 weight\nupdates. The training will produce .pth files, e.g. rnnoise_50.pth .\nThe next step is to convert the model to C files using:\n\n% python3 dump_rnnoise_weights.py --quantize rnnoise_50.pth rnnoise_c\n\nwhich will produce the rnnoise_data.c and rnnoise_data.h files in the\nrnnoise_c directory.\n\nCopy these files to src/ and then build RNNoise using the instructions above.\n\nFor slightly better results, a trained model can be used to remove any noise\nfrom the \"clean\" training speech, before restaring the denoising process\nagain (no need to do that more than once).\n\n== Loadable Models ==\n\nThe model format has changed since v0.1.1. Models now use a binary\n\"machine endian\" format. To output a model in that format, build RNNoise\nwith that model and use the dump_weights_blob executable to output a\nweights_blob.bin binary file. That file can then be used with the\nrnnoise_model_from_file() API call. Note that the model object MUST NOT\nbe deleted while the RNNoise state is active and the file MUST NOT\nbe closed.\n\nTo avoid including the default model in the build (e.g. to reduce download\nsize) and rely only on model loading, add -DUSE_WEIGHTS_FILE to the CFLAGS.\nTo be able to load different models, the model size (and header file) needs\nto patch the size use during build. Otherwise the model will not load\nWe provide a \"little\" model with half as an alternative. To use the smaller\nmodel, rename rnnoise_data_little.c to rnnoise_data.c. It is possible\nto build both the regular and little binary weights and load any of them\nat run time since the little model has the same size as the regular one\n(except for the increased sparsity).\n"
        },
        {
          "name": "TRAINING-README",
          "type": "blob",
          "size": 0.3037109375,
          "content": "(1) cd src ; ./compile.sh\n\n(2) ./denoise_training signal.raw noise.raw count > training.f32\n\n    (note the matrix size and replace 500000 87 below)\n\n(3) cd training ; ./bin2hdf5.py ../src/training.f32 500000 87 training.h5\n\n(4) ./rnn_train.py\n\n(5) ./dump_rnn.py weights.hdf5 ../src/rnn_data.c ../src/rnn_data.h\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.2421875,
          "content": "#!/bin/sh\n# Run this to set up the build system: configure, makefiles, etc.\nset -e\n\nsrcdir=`dirname $0`\ntest -n \"$srcdir\" && cd \"$srcdir\"\n\n./download_model.sh\n\necho \"Updating build configuration files for rnnoise, please wait....\"\n\nautoreconf -isf\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 4.45703125,
          "content": "# autoconf source script for generating configure\n\ndnl The package_version file will be automatically synced to the git revision\ndnl by the update_version script when configured in the repository, but will\ndnl remain constant in tarball releases unless it is manually edited.\nm4_define([CURRENT_VERSION],\n          m4_esyscmd([ ./update_version 2>/dev/null || true\n                       if test -e package_version; then\n                           . ./package_version\n                           printf \"$PACKAGE_VERSION\"\n                       else\n                           printf \"unknown\"\n                       fi ]))\n\nAC_INIT([rnnoise],[CURRENT_VERSION],[jmvalin@jmvalin.ca])\nAC_CONFIG_SRCDIR([src/denoise.c])\nAC_CONFIG_MACRO_DIR([m4])\n\nAC_USE_SYSTEM_EXTENSIONS\nAC_SYS_LARGEFILE\n\nAM_INIT_AUTOMAKE([1.11 foreign no-define dist-zip subdir-objects])\nAM_MAINTAINER_MODE([enable])\n\nAC_C_INLINE\n\nLT_INIT\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nAC_DEFINE([RNNOISE_BUILD], [], [This is a build of the library])\n\ndnl Library versioning for libtool.\ndnl Please update these for releases.\ndnl CURRENT, REVISION, AGE\ndnl - library source changed -> increment REVISION\ndnl - interfaces added/removed/changed -> increment CURRENT, REVISION = 0\ndnl - interfaces added -> increment AGE\ndnl - interfaces removed -> AGE = 0\n\nOP_LT_CURRENT=4\nOP_LT_REVISION=1\nOP_LT_AGE=4\n\nAC_SUBST(OP_LT_CURRENT)\nAC_SUBST(OP_LT_REVISION)\nAC_SUBST(OP_LT_AGE)\n\nCC_CHECK_CFLAGS_APPEND(\n  [-pedantic -Wall -Wextra -Wno-sign-compare -Wno-parentheses -Wno-long-long])\n\n# Platform-specific tweaks\ncase $host in\n  *-mingw*)\n    # -std=c89 causes some warnings under mingw.\n    CC_CHECK_CFLAGS_APPEND([-U__STRICT_ANSI__])\n    # We need WINNT>=0x501 (WindowsXP) for getaddrinfo/freeaddrinfo.\n    # It's okay to define this even when HTTP support is disabled, as it only\n    #  affects header declarations, not linking (unless we actually use some\n    #  XP-only functions).\n    AC_DEFINE_UNQUOTED(_WIN32_WINNT,0x501,\n     [We need at least WindowsXP for getaddrinfo/freeaddrinfo])\n    host_mingw=true\n    ;;\nesac\nAM_CONDITIONAL(OP_WIN32, test \"$host_mingw\" = \"true\")\n\nAC_ARG_ENABLE([assertions],\n  AS_HELP_STRING([--enable-assertions], [Enable assertions in code]),,\n  enable_assertions=no)\n\nAS_IF([test \"$enable_assertions\" = \"yes\"], [\n  AC_DEFINE([OP_ENABLE_ASSERTIONS], [1], [Enable assertions in code])\n])\n\nAC_ARG_ENABLE([examples],\n  AS_HELP_STRING([--disable-examples], [Do not build example applications]),,\n  enable_examples=yes)\nAM_CONDITIONAL([OP_ENABLE_EXAMPLES], [test \"$enable_examples\" = \"yes\"])\n\nAC_ARG_ENABLE([dnn-debug-float],\n              AS_HELP_STRING([--enable-dnn-debug-float], [Use floating-point DNN computation everywhere]),,\n  enable_dnn_debug_float=no)\n\nAS_IF([test \"$enable_dnn_debug_float\" = \"no\"], [\n       AC_DEFINE([DISABLE_DEBUG_FLOAT], [1], [Disable DNN debug float])\n])\n\nOPUS_X86_SSE4_1_CFLAGS='-msse4.1'\nOPUS_X86_AVX2_CFLAGS='-mavx -mfma -mavx2'\nAC_SUBST([OPUS_X86_SSE4_1_CFLAGS])\nAC_SUBST([OPUS_X86_AVX2_CFLAGS])\nAC_ARG_ENABLE([x86-rtcd],\n  AS_HELP_STRING([--enable-x86-rtcd], [x86 rtcd]),,\n  enable_x86_rtcd=no)\nAM_CONDITIONAL([RNN_ENABLE_X86_RTCD], [test \"$enable_x86_rtcd\" = \"yes\"])\n\nAS_IF([test \"$enable_x86_rtcd\" = \"yes\"], [\n  AC_DEFINE([RNN_ENABLE_X86_RTCD], [1], [Enable x86 rtcd])\n  AC_DEFINE([CPU_INFO_BY_ASM], [1], [RTCD from ASM only for now])\n])\n\nAS_CASE([\"$ac_cv_search_lrintf\"],\n  [\"no\"],[],\n  [\"none required\"],[],\n  [lrintf_lib=\"$ac_cv_search_lrintf\"])\n\nLT_LIB_M\n\nAC_SUBST([lrintf_lib])\n\nCC_ATTRIBUTE_VISIBILITY([default], [\n  CC_FLAG_VISIBILITY([CFLAGS=\"${CFLAGS} -fvisibility=hidden\"])\n])\n\ndnl Check for doxygen\nAC_ARG_ENABLE([doc],\n  AS_HELP_STRING([--disable-doc], [Do not build API documentation]),,\n  [enable_doc=yes]\n)\n\nAS_IF([test \"$enable_doc\" = \"yes\"], [\n  AC_CHECK_PROG([HAVE_DOXYGEN], [doxygen], [yes], [no])\n  AC_CHECK_PROG([HAVE_DOT], [dot], [yes], [no])\n],[\n  HAVE_DOXYGEN=no\n])\n\nAM_CONDITIONAL([HAVE_DOXYGEN], [test \"$HAVE_DOXYGEN\" = \"yes\"])\n\nAC_CONFIG_FILES([\n  Makefile\n  rnnoise.pc\n  rnnoise-uninstalled.pc\n  doc/Doxyfile\n])\nAC_CONFIG_HEADERS([config.h])\nAC_OUTPUT\n\nAC_MSG_NOTICE([\n------------------------------------------------------------------------\n  $PACKAGE_NAME $PACKAGE_VERSION: Automatic configuration OK.\n\n    Assertions ................... ${enable_assertions}\n\n    Hidden visibility ............ ${cc_cv_flag_visibility}\n\n    API code examples ............ ${enable_examples}\n    API documentation ............ ${enable_doc}\n------------------------------------------------------------------------\n])\n"
        },
        {
          "name": "datasets.txt",
          "type": "blob",
          "size": 8.7890625,
          "content": "The following clean speech datasets can be used to train RNNoise.\nA good choice is to include all the data from these datasets, except for\nhi_fi_tts for which only a small subset is recommended (since it's very large\nbut has few speakers). Note that this data typically needs to be resampled\nbefore it can be used.\n\nhttps://www.openslr.org/resources/30/si_lk.tar.gz\nhttps://www.openslr.org/resources/32/af_za.tar.gz\nhttps://www.openslr.org/resources/32/st_za.tar.gz\nhttps://www.openslr.org/resources/32/tn_za.tar.gz\nhttps://www.openslr.org/resources/32/xh_za.tar.gz\nhttps://www.openslr.org/resources/37/bn_bd.zip\nhttps://www.openslr.org/resources/37/bn_in.zip\nhttps://www.openslr.org/resources/41/jv_id_female.zip\nhttps://www.openslr.org/resources/41/jv_id_male.zip\nhttps://www.openslr.org/resources/42/km_kh_male.zip\nhttps://www.openslr.org/resources/43/ne_np_female.zip\nhttps://www.openslr.org/resources/44/su_id_female.zip\nhttps://www.openslr.org/resources/44/su_id_male.zip\nhttps://www.openslr.org/resources/61/es_ar_female.zip\nhttps://www.openslr.org/resources/61/es_ar_male.zip\nhttps://www.openslr.org/resources/63/ml_in_female.zip\nhttps://www.openslr.org/resources/63/ml_in_male.zip\nhttps://www.openslr.org/resources/64/mr_in_female.zip\nhttps://www.openslr.org/resources/65/ta_in_female.zip\nhttps://www.openslr.org/resources/65/ta_in_male.zip\nhttps://www.openslr.org/resources/66/te_in_female.zip\nhttps://www.openslr.org/resources/66/te_in_male.zip\nhttps://www.openslr.org/resources/69/ca_es_female.zip\nhttps://www.openslr.org/resources/69/ca_es_male.zip\nhttps://www.openslr.org/resources/70/en_ng_female.zip\nhttps://www.openslr.org/resources/70/en_ng_male.zip\nhttps://www.openslr.org/resources/71/es_cl_female.zip\nhttps://www.openslr.org/resources/71/es_cl_male.zip\nhttps://www.openslr.org/resources/72/es_co_female.zip\nhttps://www.openslr.org/resources/72/es_co_male.zip\nhttps://www.openslr.org/resources/73/es_pe_female.zip\nhttps://www.openslr.org/resources/73/es_pe_male.zip\nhttps://www.openslr.org/resources/74/es_pr_female.zip\nhttps://www.openslr.org/resources/75/es_ve_female.zip\nhttps://www.openslr.org/resources/75/es_ve_male.zip\nhttps://www.openslr.org/resources/76/eu_es_female.zip\nhttps://www.openslr.org/resources/76/eu_es_male.zip\nhttps://www.openslr.org/resources/77/gl_es_female.zip\nhttps://www.openslr.org/resources/77/gl_es_male.zip\nhttps://www.openslr.org/resources/78/gu_in_female.zip\nhttps://www.openslr.org/resources/78/gu_in_male.zip\nhttps://www.openslr.org/resources/79/kn_in_female.zip\nhttps://www.openslr.org/resources/79/kn_in_male.zip\nhttps://www.openslr.org/resources/80/my_mm_female.zip\nhttps://www.openslr.org/resources/83/irish_english_male.zip\nhttps://www.openslr.org/resources/83/midlands_english_female.zip\nhttps://www.openslr.org/resources/83/midlands_english_male.zip\nhttps://www.openslr.org/resources/83/northern_english_female.zip\nhttps://www.openslr.org/resources/83/northern_english_male.zip\nhttps://www.openslr.org/resources/83/scottish_english_female.zip\nhttps://www.openslr.org/resources/83/scottish_english_male.zip\nhttps://www.openslr.org/resources/83/southern_english_female.zip\nhttps://www.openslr.org/resources/83/southern_english_male.zip\nhttps://www.openslr.org/resources/83/welsh_english_female.zip\nhttps://www.openslr.org/resources/83/welsh_english_male.zip\nhttps://www.openslr.org/resources/86/yo_ng_female.zip\nhttps://www.openslr.org/resources/86/yo_ng_male.zip\nhttps://www.openslr.org/resources/109/hi_fi_tts_v0.tar.gz\n\nThe corresponding citations for all these datasets are:\n\n  @inproceedings{demirsahin-etal-2020-open,\n    title = {{Open-source Multi-speaker Corpora of the English Accents in the British Isles}},\n    author = {Demirsahin, Isin and Kjartansson, Oddur and Gutkin, Alexander and Rivera, Clara},\n    booktitle = {Proceedings of The 12th Language Resources and Evaluation Conference (LREC)},\n    month = may,\n    year = {2020},\n    pages = {6532--6541},\n    address = {Marseille, France},\n    publisher = {European Language Resources Association (ELRA)},\n    url = {https://www.aclweb.org/anthology/2020.lrec-1.804},\n    ISBN = {979-10-95546-34-4},\n  }\n  @inproceedings{kjartansson-etal-2020-open,\n    title = {{Open-Source High Quality Speech Datasets for Basque, Catalan and Galician}},\n    author = {Kjartansson, Oddur and Gutkin, Alexander and Butryna, Alena and Demirsahin, Isin and Rivera, Clara},\n    booktitle = {Proceedings of the 1st Joint Workshop on Spoken Language Technologies for Under-resourced languages (SLTU) and Collaboration and Computing for Under-Resourced Languages (CCURL)},\n    year = {2020},\n    pages = {21--27},\n    month = may,\n    address = {Marseille, France},\n    publisher = {European Language Resources association (ELRA)},\n    url = {https://www.aclweb.org/anthology/2020.sltu-1.3},\n    ISBN = {979-10-95546-35-1},\n  }\n\n\n  @inproceedings{guevara-rukoz-etal-2020-crowdsourcing,\n    title = {{Crowdsourcing Latin American Spanish for Low-Resource Text-to-Speech}},\n    author = {Guevara-Rukoz, Adriana and Demirsahin, Isin and He, Fei and Chu, Shan-Hui Cathy and Sarin, Supheakmungkol and Pipatsrisawat, Knot and Gutkin, Alexander and Butryna, Alena and Kjartansson, Oddur},\n    booktitle = {Proceedings of The 12th Language Resources and Evaluation Conference (LREC)},\n    year = {2020},\n    month = may,\n    address = {Marseille, France},\n    publisher = {European Language Resources Association (ELRA)},\n    url = {https://www.aclweb.org/anthology/2020.lrec-1.801},\n    pages = {6504--6513},\n    ISBN = {979-10-95546-34-4},\n  }\n  @inproceedings{he-etal-2020-open,\n    title = {{Open-source Multi-speaker Speech Corpora for Building Gujarati, Kannada, Malayalam, Marathi, Tamil and Telugu Speech Synthesis Systems}},\n    author = {He, Fei and Chu, Shan-Hui Cathy and Kjartansson, Oddur and Rivera, Clara and Katanova, Anna and Gutkin, Alexander and Demirsahin, Isin and Johny, Cibu and Jansche, Martin and Sarin, Supheakmungkol and Pipatsrisawat, Knot},\n    booktitle = {Proceedings of The 12th Language Resources and Evaluation Conference (LREC)},\n    month = may,\n    year = {2020},\n    address = {Marseille, France},\n    publisher = {European Language Resources Association (ELRA)},\n    pages = {6494--6503},\n    url = {https://www.aclweb.org/anthology/2020.lrec-1.800},\n    ISBN = \"{979-10-95546-34-4}\",\n  }\n\n\n  @inproceedings{kjartansson-etal-tts-sltu2018,\n    title = {{A Step-by-Step Process for Building TTS Voices Using Open Source Data and Framework for Bangla, Javanese, Khmer, Nepali, Sinhala, and Sundanese}},\n    author = {Keshan Sodimana and Knot Pipatsrisawat and Linne Ha and Martin Jansche and Oddur Kjartansson and Pasindu De Silva and Supheakmungkol Sarin},\n    booktitle = {Proc. The 6th Intl. Workshop on Spoken Language Technologies for Under-Resourced Languages (SLTU)},\n    year  = {2018},\n    address = {Gurugram, India},\n    month = aug,\n    pages = {66--70},\n    URL   = {http://dx.doi.org/10.21437/SLTU.2018-14}\n  }\n\n\n  @inproceedings{oo-etal-2020-burmese,\n    title = {{Burmese Speech Corpus, Finite-State Text Normalization and Pronunciation Grammars with an Application to Text-to-Speech}},\n    author = {Oo, Yin May and Wattanavekin, Theeraphol and Li, Chenfang and De Silva, Pasindu and Sarin, Supheakmungkol and Pipatsrisawat, Knot and Jansche, Martin and Kjartansson, Oddur and Gutkin, Alexander},\n    booktitle = {Proceedings of The 12th Language Resources and Evaluation Conference (LREC)},\n    month = may,\n    year = {2020},\n    pages = \"6328--6339\",\n    address = {Marseille, France},\n    publisher = {European Language Resources Association (ELRA)},\n    url = {https://www.aclweb.org/anthology/2020.lrec-1.777},\n    ISBN = {979-10-95546-34-4},\n  }\n  @inproceedings{van-niekerk-etal-2017,\n    title = {{Rapid development of TTS corpora for four South African languages}},\n    author = {Daniel van Niekerk and Charl van Heerden and Marelie Davel and Neil Kleynhans and Oddur Kjartansson and Martin Jansche and Linne Ha},\n    booktitle = {Proc. Interspeech 2017},\n    pages = {2178--2182},\n    address = {Stockholm, Sweden},\n    month = aug,\n    year  = {2017},\n    URL   = {http://dx.doi.org/10.21437/Interspeech.2017-1139}\n  }\n\n  @inproceedings{gutkin-et-al-yoruba2020,\n    title = {{Developing an Open-Source Corpus of Yoruba Speech}},\n    author = {Alexander Gutkin and I{\\c{s}}{\\i}n Demir{\\c{s}}ahin and Oddur Kjartansson and Clara Rivera and K\\d{\\'o}lá Túb\\d{\\`o}sún},\n    booktitle = {Proceedings of Interspeech 2020},\n    pages = {404--408},\n    month = {October},\n    year = {2020},\n    address = {Shanghai, China},\n    publisher = {International Speech and Communication Association (ISCA)},\n    doi = {10.21437/Interspeech.2020-1096},\n    url = {http://dx.doi.org/10.21437/Interspeech.2020-1096},\n  }\n\n@article{bakhturina2021hi,\n  title={{Hi-Fi Multi-Speaker English TTS Dataset}},\n  author={Bakhturina, Evelina and Lavrukhin, Vitaly and Ginsburg, Boris and Zhang, Yang},\n  journal={arXiv preprint arXiv:2104.01497},\n  year={2021}\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "download_model.sh",
          "type": "blob",
          "size": 0.7626953125,
          "content": "#!/bin/sh\nset -e\n\nhash=`cat model_version`\nmodel=rnnoise_data-$hash.tar.gz\n\nif [ ! -f $model ]; then\n        echo \"Downloading latest model\"\n        wget https://media.xiph.org/rnnoise/models/$model\nfi\n\nif command -v sha256sum\nthen\n   echo \"Validating checksum\"\n   checksum=\"$hash\"\n   checksum2=$(sha256sum $model | awk '{print $1}')\n   if [ \"$checksum\" != \"$checksum2\" ]\n   then\n      echo \"Aborting due to mismatching checksums. This could be caused by a corrupted download of $model.\"\n      echo \"Consider deleting local copy of $model and running this script again.\"\n      exit 1\n   else\n      echo \"checksums match\"\n   fi\nelse\n   echo \"Could not find sha256 sum; skipping verification. Please verify manually that sha256 hash of ${model} matches ${1}.\"\nfi\n\n\ntar xvomf $model\n\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "model_version",
          "type": "blob",
          "size": 0.0634765625,
          "content": "5e7841199cf2947fc32f6eeaf6faffab5c2dd3da69e6a6e4830625a10285a09d\n"
        },
        {
          "name": "rnnoise-uninstalled.pc.in",
          "type": "blob",
          "size": 0.3125,
          "content": "# rnnoise uninstalled pkg-config file\n\nprefix=\nexec_prefix=\nlibdir=${pcfiledir}/.libs\nincludedir=${pcfiledir}/@top_srcdir@/include\n\nName: rnnoise uninstalled\nDescription: RNN-based noise suppression (not installed)\nVersion: @PACKAGE_VERSION@\nConflicts:\nLibs: ${libdir}/librnnoise.la @lrintf_lib@\nCflags: -I${includedir}\n"
        },
        {
          "name": "rnnoise.pc.in",
          "type": "blob",
          "size": 0.2861328125,
          "content": "# rnnoise installed pkg-config file\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: rnnoise\nDescription: RNN-based noise suppression\nVersion: @PACKAGE_VERSION@\nConflicts:\nLibs: -L${libdir} -lrnnoise\nLibs.private: @lrintf_lib@\nCflags: -I${includedir}/\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "torch",
          "type": "tree",
          "content": null
        },
        {
          "name": "training",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_version",
          "type": "blob",
          "size": 2.279296875,
          "content": "#!/bin/bash\n\n# Creates and updates the package_version information used by configure.ac\n# (or other makefiles).  When run inside a git repository it will use the\n# version information that can be queried from it unless AUTO_UPDATE is set\n# to 'no'.  If no version is currently known it will be set to 'unknown'.\n#\n# If called with the argument 'release', the PACKAGE_VERSION will be updated\n# even if AUTO_UPDATE=no, but the value of AUTO_UPDATE shall be preserved.\n# This is used to force a version update whenever `make dist` is run.\n#\n# The exit status is 1 if package_version is not modified, else 0 is returned.\n#\n# This script should NOT be included in distributed tarballs, because if a\n# parent directory contains a git repository we do not want to accidentally\n# retrieve the version information from it instead.  Tarballs should ship\n# with only the package_version file.\n#\n# Ron <ron@debian.org>, 2012.\n\nSRCDIR=$(dirname $0)\n\nif [ -e \"$SRCDIR/package_version\" ]; then\n    . \"$SRCDIR/package_version\"\nfi\n\nif [ \"$AUTO_UPDATE\" = no ]; then\n    [ \"$1\" = release ] || exit 1\nelse\n    AUTO_UPDATE=yes\nfi\n\n# We run `git status` before describe here to ensure that we don't get a false\n# -dirty from files that have been touched but are not actually altered in the\n# working dir.\nGIT_VERSION=$(cd \"$SRCDIR\" && git status > /dev/null 2>&1 \\\n                           && git describe --tags --match 'v*' --dirty 2> /dev/null)\nGIT_VERSION=${GIT_VERSION#v}\n\nif [ -n \"$GIT_VERSION\" ]; then\n\n    [ \"$GIT_VERSION\" != \"$PACKAGE_VERSION\" ] || exit 1\n    PACKAGE_VERSION=\"$GIT_VERSION\"\n\nelif [ -z \"$PACKAGE_VERSION\" ]; then\n    # No current package_version and no git ...\n    # We really shouldn't ever get here, because this script should only be\n    # included in the git repository, and should usually be export-ignored.\n    PACKAGE_VERSION=\"unknown\"\nelse\n    exit 1\nfi\n\ncat > \"$SRCDIR/package_version\" <<-EOF\n\t# Automatically generated by update_version.\n\t# This file may be sourced into a shell script or makefile.\n\n\t# Set this to 'no' if you do not wish the version information\n\t# to be checked and updated for every build.  Most people will\n\t# never want to change this, it is an option for developers\n\t# making frequent changes that they know will not be released.\n\tAUTO_UPDATE=$AUTO_UPDATE\n\n\tPACKAGE_VERSION=\"$PACKAGE_VERSION\"\nEOF\n"
        }
      ]
    }
  ]
}