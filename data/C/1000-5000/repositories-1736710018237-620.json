{
  "metadata": {
    "timestamp": 1736710018237,
    "page": 620,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Snaipe/Criterion",
      "stars": 2065,
      "defaultBranch": "bleeding",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 2.435546875,
          "content": ".compile: &compile\n  configure_script: meson -Db_lundef=false build\n  compile_script: ninja -C build\n\n.test: &test\n  test_script: ninja -C build test\n\n.pipeline: &pipeline\n  info_script: |\n    meson --version\n    ninja --version\n  <<: *compile\n  <<: *test\n\nDebian (gcc)_task:\n  container:\n    image: debian:11\n  setup_script: |-\n    apt-get update\n    apt-get install -y build-essential pkg-config meson ninja-build cmake git libgit2-dev libffi-dev libnanomsg-dev python3-pip\n    pip3 install cram==0.7\n  <<: *pipeline\n\nAlpine (gcc,x86_64)_task:\n  container:\n    image: amd64/alpine:3\n  setup_script: &alpine-deps |-\n    apk add --no-cache build-base pkgconf meson ninja cmake git libgit2-dev libffi-dev py3-pip\n    pip3 install cram==0.7\n  <<: *pipeline\n\nAlpine (gcc,i386)_task:\n  container:\n    image: i386/alpine:3\n  setup_script: *alpine-deps\n  <<: *pipeline\n\nAlpine (gcc,arm32v6)_task:\n  arm_container:\n    image: arm32v6/alpine:3\n  setup_script: *alpine-deps\n  <<: *pipeline\n\nAlpine (gcc,arm32v7)_task:\n  arm_container:\n    image: arm32v7/alpine:3\n  setup_script: *alpine-deps\n  <<: *pipeline\n\nAlpine (gcc,aarch64)_task:\n  arm_container:\n    image: arm64v8/alpine:3\n  setup_script: *alpine-deps\n  <<: *pipeline\n\nMacOS_task:\n  macos_instance:\n    image: ghcr.io/cirruslabs/macos-ventura-base:latest\n  env:\n    PKG_CONFIG_PATH: ${PKG_CONFIG_PATH}:/usr/local/opt/libffi/lib/pkgconfig\n  setup_script: |-\n    brew install meson cmake pkg-config libffi libgit2 nanomsg\n    sudo pip3 install cram==0.7\n  <<: *pipeline\n\nFreeBSD_task:\n  freebsd_instance:\n    image_family: freebsd-13-1\n  setup_script: |-\n    pkg install -y gettext-tools pkgconf cmake meson git libffi libgit2 nanomsg\n    python3 -m ensurepip\n    python3 -m pip install --upgrade pip\n    python3 -m pip install cram==0.7\n  <<: *pipeline\n\nWindows (mingw-gcc)_task:\n  windows_container:\n    image: cirrusci/windowsservercore:cmake\n    os_version: 2019\n  env:\n    PATH: C:\\\\Python;C:\\\\Python\\\\Scripts;C:\\\\ProgramData\\\\chocolatey\\\\lib\\\\ninja\\\\tools;%PATH%\n  setup_script: |-\n    choco install -y --no-progress python311 --params \"/InstallDir:C:\\Python\"\n    choco install -y --no-progress ninja cmake\n    pip install meson cram==0.7\n    git config --global core.autocrlf false\n    patch --forward --directory=\"C:\\\\Python\\\\Lib\\\\site-packages\\\\cram\" < ci/cram-fix-winenv.patch\n    patch --forward --directory=\"C:\\\\Python\\\\Lib\\\\site-packages\\\\cram\" < ci/cram-ignore-cr.patch\n  <<: *compile\n  test_script: meson devenv -C build ninja test\n"
        },
        {
          "name": ".dist-filter.sh",
          "type": "blob",
          "size": 0.0908203125,
          "content": "#!/usr/bin/env sh\n\nfor f in \"${MESON_DIST_ROOT}\"/subprojects/*/; do\n  rm -rf \"$f/.git/\"\ndone\n"
        },
        {
          "name": ".githooks",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.162109375,
          "content": "*~\n*.sw[op]\n.*.sw[op]\nbuild\nsubprojects/debugbreak\nsubprojects/klib\nsubprojects/boxfort\nsubprojects/libffi\nsubprojects/libgit2\nsubprojects/nanomsg\nsubprojects/nanopb\n"
        },
        {
          "name": ".uncrustify.cfg",
          "type": "blob",
          "size": 10.1826171875,
          "content": "#\n# uncrustify config file (initially based on the linux kernel coding style)\n#\n\ninput_tab_size                  = 4             # original tab size\noutput_tab_size                 = 4             # new tab size\n\nnewlines                        = lf            # \\n\n\nutf8_force                      = true\nutf8_bom                        = remove\n\n# Indent\n\nindent_with_tabs                = 0             # 1=indent to level only, 2=indent with tabs\nindent_columns                  = 4             # indents are 4 cols\nindent_continue                 = 8             # line continuations are indented by 8 columns\nindent_label                    = -4            # pos: absolute col, neg: relative column\nindent_xml_string               = 2             # embedded XML indents are 2 cols\nindent_ctor_init                = 4             # indent c++ ctor initializer list\nindent_switch_case              = 4             # indent 'case' inside switch statements\nindent_namespace                = false\nindent_extern                   = false\nindent_class                    = false\nindent_class_colon              = true\nindent_access_spec_body         = true\n\n# Newlines\n\nnl_max                          = 2             # no duplicate blank lines\nnl_func_paren                   = remove        # \"int foo()\" vs \"int foo\\n()\"\nnl_func_decl_start              = ignore\nnl_func_decl_empty              = remove\nnl_func_decl_args               = ignore\nnl_func_decl_end                = remove\nnl_enum_brace                   = remove        # \"enum {\" vs \"enum \\n {\"\nnl_union_brace                  = remove        # \"union {\" vs \"union \\n {\"\nnl_struct_brace                 = remove        # \"struct {\" vs \"struct \\n {\"\nnl_do_brace                     = remove        # \"do {\" vs \"do \\n {\"\nnl_if_brace                     = remove        # \"if () {\" vs \"if () \\n {\"\nnl_for_brace                    = remove        # \"for () {\" vs \"for () \\n {\"\nnl_else_brace                   = remove        # \"else {\" vs \"else \\n {\"\nnl_while_brace                  = remove        # \"while () {\" vs \"while () \\n {\"\nnl_switch_brace                 = remove        # \"switch () {\" vs \"switch () \\n {\"\nnl_brace_while                  = remove        # \"} while\" vs \"} \\n while\" - cuddle while\nnl_brace_else                   = remove        # \"} else\" vs \"} \\n else\" - cuddle else\nnl_namespace_brace              = force         # \"namespace name {\" vs \"namespace name \\n {\"\nnl_func_var_def_blk             = 0\nnl_fcall_brace                  = remove        # \"list_for_each() {\" vs \"list_for_each()\\n{\"\nnl_fdef_brace                   = add           # \"int foo() {\" vs \"int foo()\\n{\"\nnl_after_label_colon            = false         # \"fail:\\nfree(foo);\" vs \"fail: free(foo);\"\nnl_start_of_file                = remove\nnl_end_of_file                  = force\nnl_end_of_file_min              = 1\nnl_comment_func_def             = 1\nnl_assign_leave_one_liners      = true\nnl_class_leave_one_liners       = true\nnl_enum_leave_one_liners        = true\nnl_getset_leave_one_liners      = true\nnl_func_leave_one_liners        = true\nnl_cpp_lambda_leave_one_liners  = true\nnl_while_leave_one_liners       = false\nnl_if_leave_one_liners          = false\nnl_multi_line_define            = true\nnl_func_call_start_multi_line   = false\nnl_func_call_end_multi_line     = false\n\n# Source code modifications\n\nmod_paren_on_return             = remove        # \"return 1;\" vs \"return (1);\"\nmod_full_brace_if               = ignore        # \"if (a) a--;\" vs \"if (a) { a--; }\"\nmod_full_brace_for              = ignore        # \"for () a--;\" vs \"for () { a--; }\"\nmod_full_brace_do               = force         # \"do a--; while ();\" vs \"do { a--; } while ();\"\nmod_full_brace_while            = ignore        # \"while (a) a--;\" vs \"while (a) { a--; }\"\nmod_full_brace_nl               = 3             # don't remove if more than 3 newlines\n\n# Spacing\n\nsp_addr                         = remove\nsp_after_angle                  = force\nsp_after_byref                  = remove\nsp_after_byref_func             = remove\nsp_after_cast                   = force        # \"(int) a\" vs \"(int)a\"\nsp_after_class_colon            = force\nsp_after_comma                  = force\nsp_after_dc                     = remove\nsp_after_new                    = force\nsp_after_operator               = remove\nsp_after_operator_sym           = remove\nsp_after_ptr_star               = remove        # \"int *foo\" vs \"int * foo\"\nsp_after_ptr_star_func          = remove\nsp_after_semi                   = force\nsp_after_semi_for               = force\nsp_after_semi_for_empty         = remove\nsp_after_sparen                 = force         # \"if () {\" vs \"if (){\"\nsp_after_type                   = force\nsp_angle_paren                  = remove\nsp_angle_shift                  = ignore\nsp_angle_word                   = force\nsp_arith                        = force\nsp_assign                       = add\nsp_assign_default               = force\nsp_attribute_paren              = remove\nsp_balance_nested_parens        = false\nsp_before_angle                 = remove\nsp_before_byref                 = force\nsp_before_byref_func            = force\nsp_before_case_colon            = remove\nsp_before_class_colon           = force\nsp_before_comma                 = remove\nsp_before_dc                    = remove\nsp_before_ellipsis              = remove\nsp_before_nl_cont               = force\nsp_before_ptr_star              = force         # \"int*\" vs \"int *\"\nsp_before_ptr_star_func         = force\nsp_before_semi                  = remove\nsp_before_semi_for              = remove\nsp_before_semi_for_empty        = remove\nsp_before_sparen                = force         # \"if (\" vs \"if(\"\nsp_before_square                = remove\nsp_before_tr_emb_cmt            = force\nsp_before_unnamed_byref         = force\nsp_between_ptr_star             = remove        # \"int **\" vs \"int * *\"\nsp_bool                         = force\nsp_brace_catch                  = force\nsp_brace_else                   = force         # \"}else\" vs \"} else\"\nsp_brace_finally                = force\nsp_brace_typedef                = force\nsp_case_label                   = force\nsp_catch_brace                  = force\nsp_catch_paren                  = force\nsp_cmt_cpp_start                = force\nsp_compare                      = force\nsp_cond_colon                   = add\nsp_cond_question                = add\nsp_cpp_cast_paren               = force\nsp_defined_paren                = force\nsp_deref                        = remove\nsp_else_brace                   = force         # \"else{\" vs \"else {\"\nsp_endif_cmt                    = force\nsp_enum_assign                  = force\nsp_finally_brace                = force\nsp_fparen_brace                 = force\nsp_func_call_paren              = remove        # \"foo (\" vs \"foo(\"\nsp_func_call_user_paren         = remove\nsp_func_class_paren             = remove\nsp_func_def_paren               = remove        # \"int foo (){\" vs \"int foo(){\"\nsp_func_proto_paren             = remove        # \"int foo ();\" vs \"int foo();\"\nsp_getset_brace                 = force\nsp_incdec                       = remove\nsp_inside_angle                 = remove\nsp_inside_braces                = force         # \"{ 1 }\" vs \"{1}\"\nsp_inside_braces_empty          = remove\nsp_inside_braces_enum           = force         # \"{ 1 }\" vs \"{1}\"\nsp_inside_braces_struct         = force         # \"{ 1 }\" vs \"{1}\"\nsp_inside_fparen                = remove\nsp_inside_fparens               = remove\nsp_inside_paren                 = remove\nsp_inside_paren_cast            = remove\nsp_inside_sparen                = remove\nsp_inside_square                = remove\nsp_inv                          = remove\nsp_macro                        = force\nsp_macro_func                   = force\nsp_member                       = remove\nsp_not                          = remove\nsp_num_before_tr_emb_cmt        = 1\nsp_paren_brace                  = force\nsp_paren_comma                  = ignore\nsp_paren_paren                  = remove        # \"((\" vs \"( (\"\nsp_pp_concat                    = force\nsp_pp_stringify                 = remove\nsp_return_paren                 = force         # \"return (1);\" vs \"return(1);\"\nsp_sign                         = remove\nsp_sizeof_paren                 = force         # \"sizeof (int)\" vs \"sizeof(int)\"\nsp_sparen_brace                 = force\nsp_special_semi                 = remove\nsp_square_fparen                = remove\nsp_template_angle               = add\nsp_throw_paren                  = force\nsp_try_brace                    = force\n\ncmt_sp_before_star_cont         = 0\ncmt_sp_after_star_cont          = 1\n\n# Positioning\n\npos_arith                       = lead\npos_assign                      = trail\npos_bool                        = lead\npos_compare                     = lead\npos_conditional                 = lead\npos_comma                       = trail\npos_class_comma                 = trail\npos_class_colon                 = lead\n\n# Alignment\n\nalign_with_tabs                 = false         # use tabs to align\nalign_on_tabstop                = false         # align on tabstops\nalign_enum_equ_span             = 4             # '=' in enum definition\nalign_nl_cont                   = true\nalign_assign_span               = 0\nalign_struct_init_span          = 3             # align stuff in a structure init '= { }'\nalign_right_cmt_span            = 3\nalign_pp_define_span            = 2\nalign_pp_define_gap             = 4\nalign_func_params               = false\nalign_var_struct_span           = 0\n\n# Comment\n\ncmt_indent_multi                = true\ncmt_c_group                     = false\ncmt_c_nl_start                  = false\ncmt_c_nl_end                    = false\ncmt_cpp_group                   = true\ncmt_cpp_nl_start                = false\ncmt_cpp_nl_end                  = false\ncmt_cpp_to_c                    = true\ncmt_star_cont                   = false\ncmt_multi_check_last            = true\n\neat_blanks_after_open_brace     = true\neat_blanks_before_close_brace   = true\n\n# Preprocessor\n\npp_indent                       = remove\npp_space                        = force\npp_space_count                  = 1\n\n# Misc\n\nset cpp_cast nonstd             # nonstd cast attributes\nset compare Op                  # typical (A) Op (B) macro scenarios\nset func_call_user _ N_         # gettext macros\nset attribute CR_FORMAT CR_API CR_PURE CR_INLINE\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.392578125,
          "content": "Maintainers:\n\n* Franklin \"Snaipe\" Mathieu <franklinmathieu@gmail.com>\n* László \"MrAnno\" Várady <laszlo.varady@protonmail.com>\n\nContributors:\n\n* Adeel \"am11\" Mujahid <adeelbm@outlook.com>\n* Alexander Kalentev <okalent@gwdg.de>\n* Ben \"blinskey\" Linskey <ben@benlinskey.com>\n* Ben Linskey <ben@benlinskey.com>\n* Bruno BELANYI <bruno@belanyi.fr>\n* Chad Estioco <chadestioco@gmail.com>\n* David Carlier <dcarlier@filias.info>\n* Ersikan <julien.philippon@epitech.eu>\n* Ethiraric <florian.sabourin@epitech.eu>\n* Florent Poinsard <florent.poinsard@outlook.fr>\n* Gerald Senarclens de Grancy <oss@senarclens.eu>\n* Howard \"hppritcha\" Pritchard <howardp@lanl.gov>\n* Kare Nuorteva <kare.nuorteva@me.com>\n* Karim DRIDI <seth.holth@gmail.com>\n* Kevin \"kevinoid\" Locke <kevin@kevinlocke.name>\n* László \"MrAnno\" Várady <laszlo.varady@balabit.com>\n* Masayuki Nagamachi <masayuki.nagamachi@gmail.com>\n* Matthias \"ailu\" Günzel <a1lu@arcor.de>\n* Matthias Rahlf <matthias@webding.de>\n* Mauricio López-Quintana Conesa <dev0005@simelo.tech>\n* Oleksii Vilchanskyi <oleksii.vilchanskyi@gmail.com>\n* Orion Poplawski <orion@nwra.com>\n* Paul Khuat-Duy <paul.khuat-duy@epita.fr>\n* Sam Zaydel <szaydel@gmail.com>\n* Steffen \"stv0g\" Vogel <post@steffenvogel.de>\n* Tim Gates <tim.gates@iress.com>\n* Tomasz Sieprawski <tomasz@sieprawski.eu>\n* gabrielvv <gabrielvautrin@gmail.com>\n* kaidowei <kaidowei@users.noreply.github.com>\n* offa <bm-dev@yandex.com>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.591796875,
          "content": "# Contributing\n\nContributions are welcomed, but must follow a simple set of rules in order to\nbe merged.\n\n**Please follow these conventions if you want your pull request(s) accepted.**\n\n## General\n\n* Try to respect a 80 chars column limit. Not mandatory, but appreciated.\n* No trash files. Trash files are by-products of the compilation process, or\n  generated files that does not need to be under version control.\n* Pull requests must pass the style check. See \"Passing the style check\" section below.\n* Pull requests must compile and work properly.\n* Pull requests must pass all tests.\n* Pull requests must be mergeable without conflicts.\n* Number of commits in a pull request should be kept to one commit and all\n  additional commits must be squashed.\n* You may have more than one commit in a pull request if the commits are\n  separate changes, otherwise squash them.\n* Keep your commit messages simple and concise. Good commit messages start\n  with a verb ('Add', 'Fix', ...).\n* Commit messages should follow the format `topic: message`, e.g. `cli: Added --foo flag`.\n  In cases where multiple topics are relevant, use a comma-separated list of topics, e.g.\n  `api,float: Fixed printf format specifiers for long double`\n\n## Passing the style check\n\nThis project use an automated style checking process for pull requests defined as\nan uncrustify configuration file named `.uncrustify.cfg`.\n\nTo ease the development process, a pre-commit hook is installable by running\n`.githooks/install.sh` from the project root directory. This pre-commit hook\nchecks for style, outputs a diff of the changes that need to be done, and\nproduces a patch to fix them automatically.\n\nAs the automatic style checker is bound to have errors, parts of the code\nthat make the checker fail because of their tricky grammar (e.g. Duff devices)\nmay be enclosed by `/* *INDENT-OFF* */` and `/* *INDENT-ON* */` to disable\nthe style checker on the region. Note that this feature should be used\n*exceptionally*, and that the maintainer will always have the last word regarding\nstylistic choices that cannot pass the style check.\n\n## Testing\n\nTesting your changes is important. When you submit a pull request, the CI system\nwill trigger a build to test your changes on various platforms; however, to speed\nup the initial development process, it's best to test it locally at first.\n\nThe following commands should get you going with a workable test system:\n\n```\n$ meson setup --buildtype debug build\n$ meson compile -C build\n$ meson test -C build\n```\n\nMake sure you have cram 0.7 installed before running ctest; Criterion uses cram\ninternally for its system tests:\n\n```\n$ pip install --user cram==0.7\n\nor alternatively\n\n$ sudo pip install cram==0.7\n```\n\n## Translations\n\n* You can contribute new translation files for output messages, on the\n  condition that you are fluent with the language itself.\n* Each correction on existing translations must be followed by a\n  rationale (\"why would the translation be better if the change is applied?\")\n\n## Project Directory Structure\n\n    .\n    |-- ci, .github, .cirrus.yml: CI and release pipeline\n    |-- dependencies, subprojects: Dependencies for building libcriterion\n    |-- dev: Developer files\n    |-- doc: Sphinx documentation files\n    |-- include/criterion: Public API\n    |-- src: Sources for libcriterion\n    |   |-- capi\n    |   |-- compat: Cross-platform abstractions for platform-dependent code\n    |   |-- core: Core mechanisms used to run the tests\n    |   |-- csptr: Smart pointers\n    |   |-- entry: Entry-point related sources, and default main function\n    |   |-- io: IO related functions, redirections\n    |   |-- log: Output providers, all the output logic in general\n    |   |-- protocol: Criterion Protocol Buffers\n    |   `-- string: String manipulation functions, i18n\n    |-- po: Translation files, i18n stuff\n    |-- samples: Sample Criterion tests\n    `-- test: Unit and functional tests\n\n## Release Checklist\n\n### Preparing release candidate\n\n* [ ] Make sure `bleeding` builds on all platforms and all tests passes.\n* [ ] `git checkout master`\n* [ ] `git merge bleeding --no-commit --no-ff`\n* [ ] Bump project version (`meson.build`)\n* [ ] Bump ABI version when needed (`meson.build`)\n* [ ] Update ChangeLog\n* [ ] `git commit -m \"release: vX.Y.Z\"`\n* [ ] `git tag -s vX.Y.Z-rc`\n* [ ] `git push origin vX.Y.Z-rc master`\n\nAfter publishing the RC tag, each new push on master will produce a new release candidate.\nThe `bleeding` branch is fast-forwarded automatically during the RC period.\n\n### Finalizing release\n\nAfter a 1-2 week RC period, the final version can be released:\n\n* [ ] `git checkout master`\n* [ ] `git tag -s vX.Y.Z`\n* [ ] `git push origin vX.Y.Z`\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 16.751953125,
          "content": "2023-04-29  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.4.2\n    * Fix: fixed crash in assert failure reporting when there was no diff.\n      If the user-provided function to stringify an object was bugged and\n      produced equal output for non-equal objects, thus producing an empty\n      diff, Criterion crashed trying to access an unset parameter list.\n    * Fix: fixed crashing tests when Criterion was compiled with nanopb>=0.4.7\n      (Balazs Scheidler).\n    * Fix: fixed deadlock when test timeout was specified and the system was\n      overloaded.\n    * Fix: fixed segfault if map_shdr fails (David Gloe).\n    * Fix: fixed memory leak on test failure (Jookia).\n    * Fix: fixed gt() and ge().\n    * Fix: escape XML/JSON reports.\n    * Misc: converted klib and debugbreak submodules to subprojects\n      (Cristian Prieto).\n    * Misc: various documentation fixes (Yuri Victorovich, Jonas Schulze).\n    * Misc: various updates to dependencies.\n\n    The full git changelog may be accessed with `git log v2.4.1..v2.4.2`.\n\n2022-04-13  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.4.1\n    * Fix: compiling tests with link-time-optimization no longer causes\n      the tests to not get detected and run.\n    * Fix: theories now correctly iterate through the argument matrix. This\n      manifested as theories running the expected number of times, but\n      always using the first possible combination of parameters.\n    * Fix: fixed leak due to not calling git_libgit2_shutdown. This should\n      appease valgrind and the address sanitizer.\n    * Misc: added suggestion to run ldconfig in installation documentation\n      (Gerald Senarclens de Grancy).\n\n    The full git changelog may be accessed with `git log v2.4.0..v2.4.1`.\n\n2022-01-03  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.4.0\n    * Addition: added new experimental assertion API. The API brings a more\n      generic approach for comparing values of arbitrary types, alongside\n      value diffing on error.\n    * Addition: added --color=<always|never|auto> CLI switch to explicitly\n      add or strip colors from the test runner output.\n    * Addition: added --encoding CLI switch to control the use of unicode\n      in the test runner output.\n    * Addition: added ARM (v6/v7) and ARM64 support. Huge kudos to László\n      Várady (MrAnno) for fixing most of the issues and testing on real\n      hardware.\n    * Addition: added directory support to write test reports via --output.\n      If the provided path is an existing directory, the report will be\n      created in that directory, and the report file is named after the\n      binary (László Várady).\n    * Addition: added support for setting RPATH for pkg-config users\n      (-Drpath-in-pkgconfig=enabled).\n    * Breaking: the runner now exits with a non-zero exit status on warning\n      by default. --ignore-warnings has been added to restore the old behaviour.\n    * Breaking: changed '-' to mean stdout rather than stderr.\n      /dev/stderr can instead be used to signify stderr, even on Windows.\n    * Breaking: switched build system from CMake to Meson.\n    * Deprecation: --ascii and CRITERION_USE_ASCII are deprecated in favor of\n      passing --encoding=C or setting LC_ALL=C.\n    * Fix: fixed c++ allocator to work with older compiler versions.\n    * Fix: fixed CRITERION_DISABLE_TIME_MEASUREMENTS=1 not being picked up.\n    * Fix: allow log functions to be called from runner-side report hooks.\n    * Fix: allow assertions to execute in fixtures (init/fini).\n    * Fix: test std{out,err} is now discarded when operating in quiet mode.\n      They are also discarded when the runner output is redirected via\n      --output.\n    * Fix: cr_file_match_str now fails if the input is longer than the\n      expected value (Ethiraric).\n    * Fix: cr_file_match_str passes when both the input and expected value\n      are empty (Ethiraric).\n    * Fix: fixed throw assertion not failing when nothing throws.\n    * Fix: fixed major slowdowns from running criterion in container\n      environments with a high open file descriptor limit.\n    * Fix: fixed libcriterion.so not being loadable on WSL due to the stack\n      not being executable.\n    * Fix: worked around msync not properly working on WSL and causing the\n      runner to break.\n    * Fix: fixed use-after-free in fprintf_locale.\n    * Fix: fixed cr_file_match_file matching only the last block (Ethiraric).\n    * Fix: fixed TAP test description format. TAP mandates that details must\n      use a YAML format, while Criterion directly dumped the description\n      string in the detail section.\n    * Fix: fixed TAP output to comment out blank lines, since the TAP spec\n      doesn't say anything about blank lines, and some parsers have trouble\n      with them.\n    * Fix: fixed c++20 incompatibility with the criterion allocator (Ersikan).\n    * Fix: fixed escape of special characters in XML output (Paul Khuat-Duy).\n    * Fix: fixed crash when passing an empty string to cr_log_info (Ersikan).\n    * Fix: fixed compilation errors on macOS (Kare Nuorteva, László Várady).\n    * Fix: fixed --debug flag aborting runner with gdbserver >= 8.3.\n    * Fix: fixed gdb stepping issue with '--debug' on macOS (Apple silicon).\n    * Misc: various documentation fixes (Oleksii Vilchanskyi, Sam Zaydel, Karim\n      Dridi, Florent Poinsard, Tim Gates, László Várady, Japroz Saini).\n    * Misc: various updates to dependencies (László Várady).\n    * Misc: various build system fixes (Tomasz Sieprawski, László Várady).\n    * Misc: various fixes to the autotools example (Bruno Belany).\n    * Misc: from now on, --debug will fall back to the idle method in case no\n      debugger can be found.\n\n    The full git changelog may be accessed with `git log v2.3.3..v2.4.0`.\n\n2018-11-05  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.3.3\n    * Fix: Clang 5.0.x was producing test executables that caused Criterion to\n      fork-bomb the host system. The issue has been fixed, and Criterion\n      now pro-actively aborts itself if it detects a fork-bomb loop to avoid\n      similar issues in the future.\n\n    The full git changelog may be accessed with `git log v2.3.2..v2.3.3`.\n\n2017-04-08  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.3.2\n    * Fix: timings were always reporting `0`; they are now working as expected.\n\n    The full git changelog may be accessed with `git log v2.3.1..v2.3.2`.\n\n2017-02-07  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.3.1\n    * Fix: correctly handle malformed --debug parameter\n    * Fix: replaced the cryptic message when the debugger is not present with a more explicit one.\n    * Fix: cache section limits on report hooks for significantly better performance.\n    * Fix: don't report passing assertions by default for significantly better performance.\n    * Addition: added --full-stats CLI switch to report passing assertions for compatibility purposes.\n\n    The full git changelog may be accessed with `git log v2.3.0-1..v2.3.1`.\n\n2016-12-07  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.3.0-1\n    This is a re-release of v2.3.0.\n\n    There are no substantial changes in the release, only fixes in the build\n    system. If you are not building criterion from source, you can ignore this\n    changelog.\n\n    * Fix: Updated version strings in messages\n    * Fix: The build system now searches for local installations of non-criterion-specific dependencies.\n\n2016-09-18  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.3.0\n    * Addition: added German translation files (Matthias \"ailu\" Günzel).\n    * Addition: added a pkg-config file.\n    * Addition: allow tests to be skipped with cr_skip_test() (Matthias \"ailu\" Günzel).\n    * Addition: assertions on wide-strings are now available (Kevin \"kevinoid\" Locke).\n    * Addition: crash-mode with --crash to raise a trap when an assertion fails for debugging purposes (Matthias \"ailu\" Günzel).\n    * Addition: debugging mode with --debug.\n    * Addition: global test timeout with --timeout.\n    * Addition: header files in the public API now have doxygen documentation (Matthias \"ailu\" Günzel).\n    * Addition: test filtering now works on windows.\n    * Addition: user logging API with cr_log, cr_log_info, cr_log_warning, and cr_log_error.\n    * Breaking: dropped support for MinGW, use MinGW-w64.\n    * Breaking: dropped support for Windows XP, use Windows 7 and later.\n    * Breaking: log_pre_init and log_pre_test in the internal logger API now takes an additional parameter.\n    * Breaking: the SOVERSION now follows the SONAME major independently of the project version.\n    * Change: --pattern has been renamed to --filter.\n    * Change: removed dependency on PCRE for filtering (Matthias \"ailu\" Günzel).\n    * Change: sections of all loaded shared modules are now inspected for tests and hooks.\n    * Change: setting .exit_code = 0 now enforces the exit code of the test to be 0.\n    * Change: string assertions now print the contents of string parameters (\"kaidowei\").\n    * Change: xml reports now includes elapsed times (\"kaidowei\").\n    * Deprecation: --no-early-exit is now a no-op and should no longer be used.\n    * Deprecation: internal logging API is no longer public, fallbacks to the new logging API.\n    * Fix: fail-fast now works correctly.\n    * Fix: fixed FindCriterion.cmake with the correct package name (László \"MrAnno\" Várady).\n    * Fix: position-independent executables now work.\n    * Fix: string assertions no longer crash with a NULL parameter (\"kaidowei\").\n    * Fix: the data pipe no longer gets corrupted when running a large quantity of assertions in parallel.\n    * Fix: using dmalloc on tests now works.\n    * Fix: using the GOLD linker rather than BFD now works.\n    * Fix: using the musl C library now works.\n\n2016-06-20  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.2.2\n    * Fix: fixed deadlocks when tests are terminated too fast\n    * Fix: fixed crash during test teardown if spawning new threads in the test\n    * Fix: fixed memory leak in disabled tests\n\n2016-02-06  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.2.1\n    * Fix: fixed criterion not being embeddable with CMake's `add_directory`\n    * Fix: fixed resource leaks in the child pump thread\n    * Fix: fixed redirected standard streams being leaked by cr_(assert|expect)_std(out|err)\n    * Fix: fixed out of bounds during assert message sending\n    * Fix: fixed naming convention conflicts for internal variables used by the implementation of cr_assert\n    * Fix: fixed empty format string warning with GCC 4.8\n    * Fix: fixed file-to-file comparison assert message being corrupted\n\n2015-12-08  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.2.0\n    * Breaking: Renamed all unprefixed internal macros and functions that were\n      exposed in the API, and moved them to criterion/internal.\n      This shouldn't break your code if you did not use these in the first\n      place.\n    * Change: Added language-specific wrapping logic to decouple the language\n      the tests are written in from the test runner.\n    * Change: Rewrote the reporting logic to allow multiple test reports to be\n      written using any format.\n    * Addition: Added parallel jobs for the test runner.\n    * Addition: Added C++ allocator for STL collections based on\n      cr_malloc/cr_free.\n    * Addition: Added criterion::parameters in C++ for simpler parameter list\n      generation.\n    * Addition: Added saner defaults when the tests detect they run under\n      valgrind.\n    * Addition: Added basic Objective-C language support.\n    * Addition: Added JUnit XML reporting.\n    * Addition: Added JSON reporting.\n    * Addition: Added dynamic reporter registration.\n    * Addition: Added back support for GCC 4.6 when compiling C tests.\n    * Addition: Added single test execution mode.\n    * Removal: Removed all deprecated 1.x unprefixed assertion macros.\n    * Fix: Fixed some memory corruption happening on rare occasions on assert\n      messages.\n    * Fix: Fixed deadlocks happening at random when a large quantity of assert\n      is present.\n    * Fix: Fixed the library not compiling with the intel compiler collection.\n    * Deprecation: All cr_assume_strings_* macros are deprecated in favor of\n      cr_assume_str_*.\n    * Deprecation: All cr_assume_arrays_* macros are deprecated in favor of\n      cr_assume_arr_*.\n\n2015-11-25  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.1.1\n    * Fix: Fixed bug where the TAP output access the assert message after\n      it has been freed, causing it to print garbage.\n\n2015-09-21  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.1.0\n    * Addition: Added file mocking utilities\n    * Addition: Added parameterized tests\n\n2015-09-20  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.0.2\n    * Fix: Fixed rare bug where tests from only one compilation unit would run.\n\n2015-09-19  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.0.1\n    * Fix: Fixed wrong setjmp() usage making tests compiled with optimisations\n      crash.\n\n2015-09-14  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 2.0.0\n    * Breaking: ABI incompatibility with prior versions of criterion. You\n      **must** recompile your tests.\n    * Breaking: cr_abort_test(NULL) does not compile anymore.\n    * Change: Changed all assertion macros to accept a printf format string as a\n      message.\n    * Change: Made the API C++11-compatible.\n    * Change: Made the library ISO C compliant. You can now compile the library\n      with VC 14+.\n    * Addition: Added support for theories.\n    * Addition: Added ability to test the exit status of a test.\n    * Addition: Added C++11 throw assertions.\n    * Addition: Added assert message localization.\n    * Addition: Added test timeouts.\n    * Addition: Added test standard i/o redirection & file comparison assertions.\n    * Removal: Removed the deprecated prefixless assertion macros\n    * Deprecation: Deprecated cr_abort_test.\n    * Deprecation: cr_{assert,expect}_strings_* and cr_{assert,expect}_arrays_*\n      are deprecated in favor of cr_{assert,expect}_str_* and\n      cr_{assert,expect}_arr_* respectively.\n\n2015-08-20  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 1.3.1\n    * Fixed OS X and Windows section iterations\n    * Fixed report hooks not working on OS X and Windows\n    * Fixed duplicated output when writing in PRE_ALL to a redirected stdout/err\n    * Added -S switch to display filenames in their short version\n\n2015-08-05  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 1.3.0\n    * Turned the library into a shared library.\n    * Added extended globbing for --pattern (requires PCRE)\n    * Switched to a CMake build system\n    * Fixed windows builds & output\n    * Added basic windows SEH-to-signal translator\n\n2015-04-26  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 1.2.1\n    * Added a cr_ prefix to all assertion macros. Old macros are deprecated\n    and will be removed in a future version.\n\n2015-04-15  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 1.2.0\n    * Added native Windows support through MinGW\n    * Fixed inaccurate statistics on disabled and crashing tests\n    * Fixed asserts not aborting the test when used in functions\n    * Fixed programs not compiling when no tests are declared\n    * Added assert_null to test for pointer nullity\n    * Added assert_arrays_eq_cmp for padded struct arrays equality\n\n    * Added i18n support\n    * Added fr_FR localization\n\n2015-03-24  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 1.1.0\n    * Refactored logging system\n    * Changed output format to a better-looking one\n    * Added Syntactic coloration\n\n    * Added test suite separation\n    * Added test suite statistics\n\n    * Added --list option\n    * Added --fail-fast option\n    * Added --pattern option\n\n2015-03-18  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 1.0.0\n    * Added test timings\n    * Changed assert prototypes\n    * ANSI compliance over header files\n    * Windows + FreeBSD compatibility\n\n2015-03-11  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 0.3.0\n    * A logging interface\n    * Various readme and documentation changes\n    * Default CLI options & environment variables\n    * Mac OS X compatibility\n    * Comparison assertions, floating-point equality assertions\n\n2015-02-06  Franklin \"Snaipe\" Mathieu  <franklinmathieu@gmail.com>\n\n    * criterion: version 0.2.0\n    * Added criterion internals.\n    * Added Test, ReportHook, assert and expect macros.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.087890625,
          "content": "The MIT License (MIT)\n\nCopyright © 2015-2017 Franklin \"Snaipe\" Mathieu <http://snai.pe/>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0009765625,
          "content": "<h1><img src=\"doc/criterion-title.png\" height=\"96\" alt=\"Criterion Logo\" /></h1>\n\n[![Build Status](https://api.cirrus-ci.com/github/Snaipe/Criterion.svg)](https://cirrus-ci.com/github/Snaipe/Criterion)\n[![Coverage Status](https://img.shields.io/codecov/c/github/Snaipe/Criterion/bleeding.svg)](https://codecov.io/github/Snaipe/Criterion?branch=bleeding)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/Snaipe/Criterion/blob/master/LICENSE)\n[![Version](https://img.shields.io/github/release/Snaipe/Criterion.svg?label=version)](https://github.com/Snaipe/Criterion/releases/latest)\n[![Documentation (Stable)](https://img.shields.io/badge/docs-stable-green)][online-docs]\n[![Documentation (Bleeding)](https://img.shields.io/badge/docs-bleeding-orange)][online-docs-latest]\n\nA dead-simple, yet extensible, C and C++ unit testing framework.\n\n![Screencast](./doc/screencast.gif)\n\n## Philosophy\n\nMost test frameworks for C require a lot of boilerplate code to\nset up tests and test suites -- you need to create a main,\nthen register new test suites, then register the tests within\nthese suites, and finally call the right functions.\n\nThis gives the user great control, at the unfortunate cost of simplicity.\n\nCriterion follows the KISS principle, while keeping the control\nthe user would have with other frameworks:\n\n* [x] C99 and C++11 compatible.\n* [x] Tests are automatically registered when declared.\n* [x] Implements a xUnit framework structure.\n* [x] A default entry point is provided, no need to declare a main\n  unless you want to do special handling.\n* [x] Test are isolated in their own process, crashes and signals can be\n  reported and tested.\n* [x] Unified interface between C and C++: include the criterion header and it *just* works.\n* [x] Supports parameterized tests and theories.\n* [x] Progress and statistics can be followed in real time with report hooks.\n* [x] TAP output format can be enabled with an option.\n* [x] Runs on Linux, FreeBSD, macOS, and Windows (Compiling with MinGW GCC and Visual Studio 2015+).\n\n## Downloads\n\n### Packages\n\n| Platform | Command |\n| --- | --- |\n**Ubuntu** (>=21.04) / **Debian** (>=11) | `apt-get install libcriterion-dev`\n**Gentoo** | `emerge -a dev-libs/criterion`\n**Arch Linux** ([AUR][aur]) | `pacaur -S criterion`\n**macOS** | `brew install criterion`\n**Nix** | `nix-shell -p criterion`\n**FreeBSD** | `pkg install criterion`\n\nIf you'd like to see Criterion included in your favorite distribution, please reach out to their package maintainers team.\n\n### Binary archives\n\nBinary releases for Linux x86\\_64 are available [on the release page](https://github.com/Snaipe/Criterion/releases).\n\nIf you have a different platform, you can still [build the library from source](http://criterion.readthedocs.org/en/latest/setup.html#installation).\n\n## Developer Resources\n\n### Documentation\n\nAn online documentation is available on [ReadTheDocs][online-docs]\n([PDF][pdf-docs] | [Zip][zip-docs] | [Epub][epub-docs])\n\n### Samples\n\nSample tests can be found in the [sample directory][samples].\n\n* [A simple test][sample-simple]\n* [Using multiple suites][sample-suites]\n* [Writing assertions][sample-asserts]\n* [Adding test fixtures][sample-fixtures]\n* [Tests with signals][sample-signal]\n* [Using report hooks][sample-report]\n\n### Getting help\n\n| Channel | Description |\n| --- | --- |\n[![Ask a question in GitHub discussions](https://img.shields.io/badge/github-Ask%20a%20question-46BC99.svg)][gh-discussions] | Ask a question in GitHub discussions\n[![Subscribe to the mailing list](https://img.shields.io/badge/ml-criterion@freelists.org-46BC99.svg)][mailing-list] | Criterion mailing list on freelists.org\n\n### Misc\n\n* [autotools skeleton for projects with criterion tests][autotools]\n* [CMake find module for Criterion][find-module]\n\n## Credits\n\nCriterion is built with the following projects:\n\n* [boxfort](https://github.com/diacritic/BoxFort)\n* [debugbreak](https://github.com/MrAnno/debugbreak)\n* [libffi](https://sourceware.org/libffi/)\n* [klib](http://attractivechaos.github.io/klib/)\n* [libcsptr](https://github.com/Snaipe/libcsptr)\n* [nanomsg](http://nanomsg.org/)\n* [nanopb](http://koti.kapsi.fi/jpa/nanopb/)\n\nLogo made by [Paul Bouigue](http://www.cargocollective.com/pbouigue).\n\n[online-docs]: http://criterion.readthedocs.org/\n[online-docs-latest]: http://criterion.readthedocs.org/en/latest\n[pdf-docs]: http://readthedocs.org/projects/criterion/downloads/pdf/latest/\n[zip-docs]: http://readthedocs.org/projects/criterion/downloads/htmlzip/latest/\n[epub-docs]: http://readthedocs.org/projects/criterion/downloads/epub/latest/\n\n[samples]: ./samples/\n[sample-simple]: ./samples/simple.c\n[sample-suites]: ./samples/suites.c\n[sample-asserts]: ./samples/asserts.c\n[sample-fixtures]: ./samples/fixtures.c\n[sample-signal]: ./samples/signal.c\n[sample-report]: ./samples/report.c\n\n[autotools]: ./dev/autotools\n[find-module]: ./dev/FindCriterion.cmake\n\n[aur]: https://aur.archlinux.org/packages/criterion/\n\n[mailing-list]: http://www.freelists.org/list/criterion\n[gh-discussions]: https://github.com/Snaipe/Criterion/discussions/new?category=q-a\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 7.041015625,
          "content": "project('criterion', 'c',\n\t\tmeson_version   : '>= 0.55.0',\n\t\tlicense         : 'MIT',\n\t\tversion         : '2.4.2',\n\t\tdefault_options : ['c_std=c11', 'cpp_std=c++11', 'warning_level=2'])\n\nabi_version = '3.2.0'\n\n# standard install directories\nprefix    = get_option('prefix')\nlocaledir = get_option('localedir')\n\n# Helper scripts\nauxdir  = join_paths(meson.current_source_dir(), 'ci')\nisdir   = join_paths(auxdir, 'isdir.py')\n\npython3 = find_program('python3')\ngit     = find_program('git', required: false)\n\n# Get the right version\n\nis_git_repo = run_command([isdir, '.git'], check: false).returncode() == 0\n\nversion = 'v' + meson.project_version()\nif git.found() and is_git_repo\n\tgit_version = run_command([git.full_path(), 'describe', '--dirty', '--tags'], check: false).stdout().strip()\n\tbranch = run_command([git.full_path(), 'rev-parse', '--abbrev-ref', 'HEAD'], check: false).stdout().strip()\n\tif branch == 'HEAD'\n\t\tbranch = run_command([git.full_path(), 'rev-parse', 'HEAD'], check: false).stdout().strip()\n\tendif\n\tif git_version != ''\n\t\tversion = git_version\n\tendif\n\tif branch != 'master'\n\t\tversion = '@0@ (@1@)'.format(version, branch)\n\tendif\nendif\n\nhas_cxx = add_languages('cpp', required: get_option('cxx-support'))\n\ncc = meson.get_compiler('c')\n\nadd_project_arguments(\n\tcc.get_supported_arguments([\n\t\t'-Wno-unused-parameter',\n\t\t'-Wno-unused-value',\n\t\t'-fvisibility=hidden',\n\t\t'-fexceptions',\n\n\t\t# MSVC-specific stuff\n\t\t'/SAFESEH:NO',\n\t\t'/source-charset:utf-8',\n\t]),\n\t'-DCRITERION_BUILDING_DLL=1',\n\t'-DPB_ENABLE_MALLOC=1',\n\t'-DPB_NO_PACKED_STRUCTS=1',\n\t'-D_GNU_SOURCE',\n\tlanguage: ['c', 'cpp'])\n\nif target_machine.system() == 'windows'\n\tadd_project_arguments(\n\t\t\t'-DVC_EXTRALEAN',\n\t\t\t'-DWIN32_LEAN_AND_MEAN',\n\t\t\t'-D_CRT_RAND_S',\n\t\t\t'-D_CRT_SECURE_NO_WARNINGS=1',\n\t\t\t'-D_WIN32_WINNT=0x600',\n\t\t\tlanguage: ['c', 'cpp'])\nendif\n\nchecks = [\n\t{'fn': 'clock_gettime'},\n\t{'fn': 'fopencookie'},\n\t{'fn': 'funopen'},\n\t{'fn': 'getcwd'},\n\t{'fn': 'isatty'},\n\t{'fn': 'nl_langinfo'},\n\t{'fn': 'open_memstream'},\n\t{'fn': 'strtok_r'},\n\t{'fn': 'strtok_s'},\n\n\t{'sym': 'CLOCK_MONOTONIC_RAW', 'header': 'time.h'},\n\n\t{'prefix': 'Win32', 'fn':  'GetCurrentDirectory'},\n\t{'prefix': 'Win32', 'fn':  'PathIsRelative'},\n\t{'prefix': 'Win32', 'hdr': 'synchapi.h'}\n]\n\nconfig = configuration_data()\nconfig.set('package', meson.project_name())\nconfig.set('version', version)\nconfig.set('localedir', '@0@/@1@'.format(prefix, localedir))\n\nconfig.set('MINGW_DEFINE_OFF_T', get_option('mingw-define-off_t'))\n\ncheck_prelude = '''\n#define _GNU_SOURCE\n'''\n\nforeach check : checks\n\tchk_prefix = check.get('prefix', '')\n\tif chk_prefix != ''\n\t\tchk_prefix = chk_prefix + '_'\n\tendif\n\n\tresult = false\n\tif check.has_key('fn')\n\t\tname = check.get('fn')\n\t\tresult = cc.has_function(name, prefix: check_prelude)\n\telif check.has_key('sym')\n\t\tname = check.get('sym')\n\t\tresult = cc.has_header_symbol(check.get('header'), name, prefix: check_prelude)\n\telif check.has_key('hdr')\n\t\tname = check.get('hdr')\n\t\tresult = cc.has_header(name)\n\tendif\n\n\tname = 'HAVE_@1@@0@'.format(name.to_upper(), chk_prefix.to_upper())\n\tconfig.set(name, result)\nendforeach\n\ni18n = import('i18n')\ndo_i18n = get_option('i18n')\n\nsubdir('po')\n\nif get_option('dev')\n\tconfig.set('ENABLE_VALGRIND_ERRORS', true)\nendif\n\ncriterion_includedir = include_directories(\n\t'dependencies/valgrind/include',\n\n\t'include',\n\t'src',\n)\n\ndeps = []\n\ncmake = import('cmake')\n\ndebugbreak = dependency('debugbreak')\n\nklib = dependency('klib')\n\nthreads = dependency('threads')\n\nnanomsg = dependency('nanomsg', required: get_option('wrap_mode') == 'nofallback')\nif (not nanomsg.found()\n\tor get_option('wrap_mode') == 'forcefallback'\n\tor 'nanomsg' in get_option('force_fallback_for'))\n\n\tnanomsg_opts = cmake.subproject_options()\n\tnanomsg_opts.add_cmake_defines({\n\t\t'NN_TESTS': false,\n\t\t'NN_TOOLS': false,\n\t\t'NN_STATIC_LIB': true,\n\t\t'BUILD_SHARED_LIBS': false,\n\t\t'CMAKE_POSITION_INDEPENDENT_CODE': true,\n\t})\n\tnanomsg_proj = cmake.subproject('nanomsg-cmake', options: nanomsg_opts)\n\tnanomsg = nanomsg_proj.dependency('nanomsg')\n\t# nanomsg has a bad include file hierarchy when used from source\n\tconfig.set('NN_H', '<src/nn.h>')\n\tconfig.set('NN_REQREP_H', '<src/reqrep.h>')\n\n\t# Required by nanomsg\n\tdeps += [\n\t\tcc.find_library('anl', required: false),\n\t\tcc.find_library('ws2_32', required: false),\n\t\tcc.find_library('mswsock', required: false),\n\t]\n\n\t# Required on windows to avoid symbols being dllimport-ed on a static lib\n\tadd_project_arguments('-DNN_STATIC_LIB', language: ['c', 'cpp'])\nelse\n\tconfig.set('NN_H', '<nanomsg/nn.h>')\n\tconfig.set('NN_REQREP_H', '<nanomsg/reqrep.h>')\nendif\n\nnanopb = dependency('nanopb', required: get_option('wrap_mode') == 'nofallback', method: 'cmake',\n\t\t\t\t\tmodules: ['nanopb::protobuf-nanopb-static'])\nmust_regenerate_pb = nanopb.found()\nif (not nanopb.found()\n\tor get_option('wrap_mode') == 'forcefallback'\n\tor 'nanopb' in get_option('force_fallback_for'))\n\n\tnanopb_opts = cmake.subproject_options()\n\tnanopb_opts.add_cmake_defines({\n\t\t'nanopb_BUILD_GENERATOR': false,\n\t\t'BUILD_SHARED_LIBS': false,\n\t\t'CMAKE_C_FLAGS': '-DPB_ENABLE_MALLOC=1 -DPB_NO_PACKED_STRUCTS=1',\n\t\t'CMAKE_POSITION_INDEPENDENT_CODE': true,\n\t})\n\tnanopb_proj = cmake.subproject('nanopb-cmake', options: nanopb_opts)\n\tnanopb = nanopb_proj.dependency('protobuf-nanopb-static')\nendif\n\nlibgit2 = dependency('libgit2', required: get_option('wrap_mode') == 'nofallback')\nif ((not libgit2.found() and get_option('diffs').enabled())\n\tor get_option('wrap_mode') == 'forcefallback'\n\tor 'libgit2' in get_option('force_fallback_for'))\n\n\tlibgit2_opts = cmake.subproject_options()\n\tlibgit2_opts.add_cmake_defines({\n\t\t'BUILD_SHARED_LIBS': false,\n\t\t'BUILD_CLAR': false,\n\t\t'USE_ICONV': false,\n\t\t'USE_SSH': false,\n\t\t'USE_GSSAPI': false,\n\t\t'USE_OPENSSL': false,\n\t\t'VALGRIND': false,\n\t\t'CURL': false,\n\t\t'WINHTTP': false,\n\t\t'CMAKE_DISABLE_FIND_PACKAGE_HTTP_Parser': true,\n\t\t'CMAKE_DISABLE_FIND_PACKAGE_ZLIB': true,\n\t\t'CMAKE_DISABLE_FIND_PACKAGE_Iconv': true,\n\t\t'CMAKE_DISABLE_FIND_PACKAGE_Security': true,\n\t\t'CMAKE_POSITION_INDEPENDENT_CODE': true,\n\t})\n\tlibgit2_proj = cmake.subproject('libgit2-cmake', options: libgit2_opts)\n\tlibgit2 = libgit2_proj.dependency('git2')\nendif\n\nboxfort = dependency('boxfort', fallback: ['boxfort', 'boxfort'], default_options: ['default_library=static'])\nlibffi = dependency('libffi', required: get_option('theories'), fallback: ['libffi', 'ffi_dep'],\n\t\t\t\t\tdefault_options: ['default_library=static'])\n\n# optional platform-dependent standard libs\nlibrt = cc.find_library('rt', required: false)\nlibm  = cc.find_library('m',  required: false)\n\nif not do_i18n.disabled()\n\tlibintl = cc.find_library('intl', required: false)\n\thas_gettext_fn = cc.has_header_symbol('libintl.h', 'gettext', dependencies: [libintl], required: do_i18n)\n\n\tdeps += libintl\n\tconfig.set('ENABLE_NLS', has_gettext_fn)\nendif\n\nif target_machine.system() == 'windows'\n\tconfig.set10('HAVE_WIN32_THREADS', true)\nelse\n\tconfig.set10('HAVE_PTHREADS', true)\nendif\n\ndeps += [\n\tdebugbreak,\n\tklib,\n\tthreads,\n\tboxfort,\n\tlibffi,\n\tlibgit2,\n\tnanomsg,\n\tnanopb,\n\tlibrt,\n\tlibm,\n]\n\nmeson.add_dist_script('.dist-filter.sh')\n\nsubdir('include')\nsubdir('src')\n\nif get_option('samples')\n\tsubdir('samples')\nendif\n\nif get_option('tests')\n\tsubdir('test')\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.58203125,
          "content": "option('tests', type: 'boolean', value: true)\noption('dev',   type: 'boolean', value: false)\noption('samples', type: 'boolean', value: true)\n\noption('cxx-support', type: 'feature', value: 'auto')\noption('i18n',        type: 'feature', value: 'auto')\noption('theories',    type: 'feature', value: 'enabled')\noption('diffs',       type: 'feature', value: 'enabled')\n\n# Platform-specific workarounds\noption('mingw-define-off_t', type: 'boolean', value: false)\n\noption('rpath-in-pkgconfig', type: 'feature', value: 'auto',\n       description: 'Sets RPATH for users in the Criterion pkg-config file')\n"
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}