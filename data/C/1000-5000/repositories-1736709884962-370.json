{
  "metadata": {
    "timestamp": 1736709884962,
    "page": 370,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "util-linux/util-linux",
      "stars": 2742,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.212890625,
          "content": "[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\n\n[*.[ch]]\nindent_style = tab\nindent_size = 8\ntrim_trailing_whitespace = true\n\n[*.sym]\nindent_style = tab\nindent_size = 4\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.775390625,
          "content": "#\n# generic stuff\n#\n*.deps\n*.gcda\n*.gcno\n*.gcov\n*.la\n*.lo\n*.pc\n*.pyc\n*.so\n*.so.*\n*.static\n*.swp\n*.vim\n*.[ao]\n*~\n*.1\n*.3\n*.5\n*.8\n*.stamp\n.clang_complete\n.deps\n.dirstamp\n.libs\n.tarball-version\n.version\nABOUT-NLS\naclocal.m4\nar-lib\nautom4te.cache\ncompile\nconfig.cache\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.rpath\nconfig.status\nconfig.sub\nconfig/ltmain.sh\nconfig/py-compile\nconfig/test-driver\nconfigure\ncscope.out\ndepcomp\nerrnos.h\nGPATH\nGRTAGS\nGTAGS\nGSYMS\nINSTALL\ninstall-sh\nlibtool\nm4/*.m4\nm4/libtool.m4.orig\nMakefile\nMakefile.in\nmissing\nmkinstalldirs\nstamp-h\nstamp-h.in\nstamp-h1\nsyscalls.h\ntags\ntest-suite.log\ntests/failures\ntests/run.sh.log\ntests/run.sh.trs\nupdate.log\nylwrap\n\n#\n# binaries\n#\n/addpart\n/agetty\n/bits\n/build*/\n/blkdiscard\n/blkid\n/blkpr\n/blkzone\n/blockdev\n/cal\n/cfdisk\n/chcpu\n/chfn\n/chmem\n/choom\n/chrt\n/chsh\n/col\n/colcrt\n/colrm\n/column\n/coresched\n/ctrlaltdel\n/delpart\n/dmesg\n/eject\n/enosys\n/exch\n/fadvise\n/fallocate\n/fdformat\n/fdisk\n/fincore\n/findfs\n/findmnt\n/flock\n/fsck\n/fsck.cramfs\n/fsck.minix\n/fsfreeze\n/fstrim\n/getopt\n/hardlink\n/hexdump\n/hwclock\n/ionice\n/ipcmk\n/ipcrm\n/ipcs\n/irqtop\n/isosize\n/kill\n/last\n/ldattach\n/line\n/logger\n/login\n/look\n/losetup\n/lsblk\n/lsclocks\n/lscpu\n/lsfd\n/lsipc\n/lsirq\n/lslocks\n/lslogins\n/lsmem\n/lsns\n/mcookie\n/mesg\n/mkfs\n/mkfs.bfs\n/mkfs.cramfs\n/mkfs.minix\n/mkswap\n/more\n/mount\n/mountpoint\n/namei\n/newgrp\n/nologin\n/nsenter\n/partx\n/pg\n/pipesz\n/pivot_root\n/prlimit\n/raw\n/readprofile\n/rename\n/renice\n/resizepart\n/rev\n/rfkill\n/rtcwake\n/runuser\n/sample-*\n/script\n/scriptlive\n/scriptreplay\n/setarch\n/setpgid\n/setpriv\n/setsid\n/setterm\n/sfdisk\n/su\n/sulogin\n/swaplabel\n/swapoff\n/swapon\n/switch_root\n/taskset\n/test_*\n/tunelp\n/uclampset\n/ul\n/umount\n/unshare\n/utmpdump\n/uuidd\n/uuidgen\n/uuidparse\n/vipw\n/waitpid\n/wall\n/wdctl\n/whereis\n/wipefs\n/write\n/zramctl\n/lsclocks\n/lastlog2\n"
        },
        {
          "name": ".packit.yaml",
          "type": "blob",
          "size": 2.4833984375,
          "content": "---\n# vi:ts=2 sw=2 et:\n#\n# Docs: https://packit.dev/docs/\n\nspecfile_path: .packit_rpm/util-linux.spec\nfiles_to_sync:\n  - .packit.yaml\n  - src: .packit_rpm/util-linux.spec\n    dest: util-linux.spec\nupstream_package_name: util-linux\ndownstream_package_name: util-linux\n# `git describe` returns in util-linux's case 'v2.37.2-xxx' which breaks RPM version\n# # detection (that expects 2.37.2-xxx'). Let's tweak the version string accordingly\nupstream_tag_template: \"v{version}\"\nsrpm_build_deps: []\n\nactions:\n  post-upstream-clone:\n    # Use a spec file from Fedora Rawhide\n    - \"git clone https://src.fedoraproject.org/rpms/util-linux.git .packit_rpm --depth=1\"\n    # Drop the \"sources\" file so rebase-helper doesn't think we're a dist-git\n    - \"rm -fv .packit_rpm/sources\"\n    # Drop all patches, since they're already included in the tarball\n    - \"sed -ri '/^Patch[0-9]+:/d' .packit_rpm/util-linux.spec\"\n    # Install additional dependencies we need for the build/tests\n    - \"sed -i '/^### Dependencies/aBuildRequires: autoconf automake bc bison flex iproute libtool procps-ng socat sqlite3 sqlite-devel' .packit_rpm/util-linux.spec\"\n    # We need to call autogen, since we use a custom tarball\n    - \"sed -i '/^unset LINGUAS/a./autogen.sh' .packit_rpm/util-linux.spec\"\n    # Enable tests after build\n    - \"sed -i '/^### Macros/a%define _with_check 1' .packit_rpm/util-linux.spec\"\n    # Ignore unpackaged files\n    - \"sed -i '1 i%define _unpackaged_files_terminate_build 0' .packit_rpm/util-linux.spec\"\n    # Enable -Werror\n    - \"sed -i 's/^%configure /%configure --enable-werror /' .packit_rpm/util-linux.spec\"\n  create-archive:\n    # We need to override the default create-archive action, since we need to tweak\n    # the resulting tarball and add a .tarball-version file to it, otherwise\n    # util-linux fails to detect its version during build\n    - \"bash -c 'echo $PACKIT_PROJECT_VERSION >.tarball-version'\"\n    - \"bash -c 'git archive --prefix ${PACKIT_PROJECT_NAME_VERSION}/ --add-file .tarball-version --output .packit_rpm/${PACKIT_PROJECT_NAME_VERSION}.tar.gz HEAD'\"\n    - \"bash -c 'echo .packit_rpm/${PACKIT_PROJECT_NAME_VERSION}.tar.gz'\"\n\n# Available targets can be listed via `copr-cli list-chroots`\njobs:\n  # Build test\n  - &copr\n    job: copr_build\n    trigger: pull_request\n    targets:\n      - fedora-rawhide-aarch64\n      - fedora-rawhide-i386\n      - fedora-rawhide-ppc64le\n      - fedora-rawhide-s390x\n      - fedora-rawhide-x86_64\n  - <<: *copr\n    trigger: commit\n    branch: master\n  - <<: *copr\n    trigger: release\n"
        },
        {
          "name": ".shellcheckrc",
          "type": "blob",
          "size": 0.033203125,
          "content": "disable=SC2034  # unused variable\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 43.5,
          "content": "\n                            util-linux\n\nMAINTAINER:\n\n      Karel Zak <kzak@redhat.com>\n\n\nPAST MAINTAINERS:\n\n      Adrian Bunk <bunk@stusta.de>\n      Andries E. Brouwer <aeb@cwi.nl>\n\n\nAUTHORS (merged projects & commands):\n\n      blkdiscard:      Lukas Czerner <lczerner@redhat.com>\n      blkpr:           zhenwei pi <pizhenwei@bytedance.com>\n      blkzone:         Shaun Tancheff <shaun@tancheff.com>\n                       Damien Le Moal <damien.lemoal@wdc.com>\n      enosys:          Thomas Weißschuh <thomas@t-8ch.de>\n      fallocate:       Eric Sandeen <sandeen@redhat.com>\n                       Karel Zak <kzak@redhat.com>\n                       Matěj Cepl <mcepl@redhat.com>\n      fincore:         Masatake YAMATO <yamato@redhat.com>\n      findmnt:         Karel Zak <kzak@redhat.com>\n      flock:           H. Peter Anvin <hpa@zytor.com>\n      fsck:            [merged from e2fsprogs]\n                       Theodore Ts'o <tytso@mit.edu>\n      fstrim:          Lukas Czerner <lczerner@redhat.com>\n      fsfreeze:        Hajime Taira <htaira@redhat.com>\n      getopt:          Frodo Looijaard <frodol@dds.nl>\n      hardlink:        Jakub Jelinek <jakub@redhat.com>\n      hwclock:         Bryan Henderson <bryanh@giraffe-data.com>\n      ipcmk:           Hayden James <hayden.james@gmail.com>\n      irqtop/lsirq:    Zhenwei Pi <pizhenwei@bytedance.com>\n                       Sami Kerola <kerolasa@iki.fi>\n      last/lastb:      [merged from sysvinit]\n                       Miquel van Smoorenburg <miquels@cistron.nl>\n      ldattach:        Tilman Schmidt <tilman@imap.cc>\n      libblkid:        [merged from e2fsprogs]\n                       Theodore Ts'o <tytso@mit.edu>\n      libmount:        Karel Zak <kzak@redhat.com>\n      libuuid:         Theodore Ts'o <tytso@mit.edu>\n      liblastlog2:     Thorsten Kukuk <kukuk@suse.com>\n      lscpu:           Cai Qian <qcai@redhat.com>\n      lsclocks:        Thomas Weißschuh <thomas@t-8ch.de>\n      lsblk:           Milan Broz <gmazyland@gmail.com>\n                       Karel Zak <kzak@redhat.com>\n      lsfd:            Masatake YAMATO <yamato@redhat.com>\n      lsipc:           Ondrej Oprala <ooprala@redhat.com>\n                       Karel Zak <kzak@redhat.com>\n      lslocks:         Davidlohr Bueso <dave@gnu.org>\n      lslogins:        Ondrej Oprala <ooprala@redhat.com>\n      lsmem/chmem:     Heiko Carstens <heiko.carstens@de.ibm.com>\n      mountpoint:      Karel Zak <kzak@redhat.com>\n      nsenter:         Eric W. Biederman <ebiederm@xmission.com>\n      prlimit:         Davidlohr Bueso <dave@gnu.org>\n      runuser:         [derived from coreutils su(1)]\n                       Karel Zak <kzak@redhat.com>\n      resizepart:      Vivek Goyal <vgoyal@redhat.com>\n      rfkill:          Johannes Berg <johannes@sipsolutions.net>\n                       Marcel Holtmann <marcel@holtmann.org>\n                       Tim Gardner <tim.gardner@canonical.com>\n      rtcwake:         David Brownell <david-b@pacbell.net>\n                       Bernhard Walle <bwalle@suse.de>\n      schedutils:      Robert Love <rlove@rlove.org>\n      setarch:         Elliot Lee <sopwith@redhat.com>\n                       Jindrich Novy <jnovy@redhat.com>\n      setpriv:         Andy Lutomirski <luto@amacapital.net>\n      simpleinit:      Richard Gooch <rgooch@atnf.csiro.au>\n      su:              [merged from coreutils]\n                       Free Software Foundation, Inc.\n                       SUSE Linux Products GmbH\n      sulogin:         [merged from sysvinit]\n                       Miquel van Smoorenburg\n      switch_root:     Peter Jones <pjones@redhat.com>\n                       Jeremy Katz <katzj@redhat.com>\n      uclampse:        Qais Yousef <qyousef@layalina.io>\n      unshare:         Mikhail Gusarov <dottedmag@dottedmag.net>\n      utmpdump:        [merged from sysvinit]\n                       Danek Duvall <duvall@alumni.princeton.edu>\n                       Miquel van Smoorenburg <miquels@cistron.nl>\n      waitpid:         Thomas Weißschuh <thomas@t-8ch.de>\n      wipefs:          Karel Zak <kzak@redhat.com>\n      swaplabel:       Jason Borden <jborden@bluehost.com>\n                       Karel Zak <kzak@redhat.com>\n      zramctl:         Timofey Titovets <nefelim4ag@gmail.com>\n                       Karel Zak <kzak@redhat.com>\n\n\nCONTRIBUTORS:\n\n      95p <seven-master@hotmail.de>\n      Aaron Lu <aaron.lu@intel.com>\n      A. Bram Neijt <bneijt@gmail.com>\n      A. Costa <agcosta@gis.net>\n      Adam Jackson <ajax@redhat.com>\n      Adriaan de Groot <groot@kde.org>\n      Adrian Knoth <adi@drcomp.erfurt.thur.de>\n      Adrian Reber <areber@redhat.com>\n      Ævar Arnfjörð Bjarmason <avarab@gmail.com>\n      ahmogit <ahmogit@zplane.com>\n      Alain Guibert <alguibert+ulng@free.fr>\n      Alan Curry <pacman@TheWorld.com>\n      Alan Jenkins <alan.christopher.jenkins@gmail.com>\n      Alan Wendt <alan@ezlink.com>\n      Alban Crequy <alban@kinvolk.io>\n      Alberto Ruiz <aruiz@gnome.org>\n      Alden Tondettar <alden.tondettar@gmail.com>\n      Alejandro Martinez Ruiz <alex@nowcomputing.com>\n      Alex <aleksandrosansan@gmail.com>\n      Alexander F Rødseth <xyproto@archlinux.org>\n      Alexander Kuleshov <kuleshovmail@gmail.com>\n      Alexander Shishkin <virtuoso@slind.org>\n      Alexander Troosh <trush@yandex.ru>\n      Alexandra Surdina <alexandrasurdina@gmail.com>\n      Alexandre Ghiti <alexandre.ghiti@canonical.com>\n      Alexandre Peixoto Ferreira <alexandref75@gmail.com>\n      Alex Bligh <alex@alex.org.uk>\n      Alexey Galakhov <agalakhov@gmail.com>\n      Alexey Gladkov <gladkov.alexey@gmail.com>\n      Alexey Obitotskiy <aleksey.obitotskiy@intel.com>\n      Alex Ivanov <yourbestfriend@openmailbox.org>\n      Alex Xu (Hello71) <alex_y_xu@yahoo.ca>\n      Ali Saidi <alisaidi@amazon.com>\n      Alison Chaiken <alison@she-devel.com>\n      Allon Mureinik <amureini@redhat.com>\n      Alon Bar-Lev <alon.barlev@gmail.com>\n      Alvaro M. Echevarria\n      Américo Wang <xiyou.wangcong@gmail.com>\n      Anatoly Pugachev <matorola@gmail.com>\n      Andrea Galbusera <gizero@gmail.com>\n      Andreas Bießmann <biessmann@corscience.de>\n      Andreas Dilger <adilger@sun.com>\n      Andreas Henriksson <andreas@fatal.se>\n      Andreas Hindborg <andreas.hindborg@wdc.com>\n      Andreas Schwab <schwab@linux-m68k.org>\n      Andreas Vogel <Andreas.Vogel@anvo-it.de>\n      Andrew G. Morgan <morgan@kernel.org>\n      Andre Wild <wild@linux.vnet.ibm.com>\n      Andrew McGill <list2008@lunch.za.net>\n      Andrew Nayenko <resver@gmail.com>\n      Andrew Price <anprice@redhat.com>\n      Andrew Savchenko <bircoph@altlinux.org>\n      Andrew Shapiro <anshapiro@gmail.com>\n      Andrew Vagin <avagin@openvz.org>\n      Andrew Wilcox <AWilcox@Wilcox-Tech.com>\n      Andrey Albershteyn <aalbersh@redhat.com>\n      Andrii Bordunov <andrew.bordunov@gmail.com>\n      Andrius Štikonas <andrius@stikonas.eu>\n      Andrzej Krzysztofowicz <ankry@mif.pg.gda.pl>\n      Andy Grover <agrover@redhat.com>\n      Andy Lutomirski <luto@amacapital.net>\n      Aner Perez <aner@mi-bohio.net>\n      Anna Jonna Ármannsdóttir <annajonna@gmail.com>\n      Anthony Iliopoulos <ailiop@suse.com>\n      Anthony Rumble <arumble@extro.ucc.su.OZ.AU>\n      Antoine Beaupré <anarcat@debian.org>\n      Anton Blanchard <anton@samba.org>\n      Antonio Ceballos Roa <aceballos@gmail.com>\n      Antonio Ospite <ao2@ao2.it>\n      Anton V. Boyarshinov <boyarsh@altlinux.org>\n      Anya <anya@neverten.org>\n      Aravind Ramesh <Aravind.Ramesh@wdc.com>\n      Ard Biesheuvel <ard.biesheuvel@linaro.org>\n      Arif E. Nugroho <arif_endro@yahoo.com>\n      Arkadiusz Miśkiewicz <arekm@maven.pl>\n      Armin Begovic <armin.begovic@hotmail.com>\n      Arnaud Mouiche <arnaud.mouiche@invoxia.com>\n      Arun Persaud <arun@nubati.net>\n      Attila Áfra <attila.afra@gmail.com>\n      Aurelien Aptel <aaptel@suse.com>\n      Aurelien Jarno <aurel32@debian.org>\n      Aurelien LAJOIE <orel@melix.net>\n      Austin English <austinenglish@gmail.com>\n      Awal Garg <awalgarg@gmail.com>\n      Bader Zaidan <bzaidan@studentsforliberty.org>\n      Balint Cristian <cbalint@redhat.com>\n      Bastian Friedrich <bastian.friedrich@collax.com>\n      Bastian Krause <bst@pengutronix.de>\n      Bauke Jan Douma <bjdouma@xs4all.nl>\n      benaryorg <binary@benary.org>\n      Ben Frankel <ben.frankel7@gmail.com>\n      Ben Hutchings <ben@decadent.org.uk>\n      Benjamin Robin <dev@benjarobin.fr>\n      Benjamin Romer <benjamin.romer@unisys.com>\n      Benno Schulenberg <bensberg@justemail.net>\n      Bernardo Innocenti <bernie@codewiz.org>\n      Bernhard Voelker <mail@bernhard-voelker.de>\n      Bernhard Walle <bwalle@suse.de>\n      Bert van Hall <bert.vanhall@avionic-design.de>\n      Bill Pemberton <wfp5p@virginia.edu>\n      Bill Pemberton <wfp5p@worldbroken.com>\n      Bill Reynolds <bill@goshawk.lanl.gov>\n      biubiuzy <294772273@qq.com>\n      Bjarni Ingi Gislason <bjarniig@rhi.hi.is>\n      Björn Jacke <bj@sernet.de>\n      Bjørn Mork <bjorn@mork.no>\n      blacknon <blacknon@orebibou.com>\n      Bob Proulx <rwp@hprwp.fc.hp.com>\n      Boris Egorov <egorov@linux.com>\n      Boyuan Yang <073plan@gmail.com>\n      Božidar Putanec <bozidarp@yahoo.com>\n      Brad Forschinger <bnjf@bnjf.id.au>\n      Brian Carnes <bmcarnes@gmail.com>\n      Bruno Heridet <delapouite@gmail.com>\n      Bryn M. Reeves <bmr@errorists.org>\n      B Watson <yalhcru@gmail.com>\n      Cai Qian <qcai@redhat.com>\n      Carlo Caione <carlo@endlessm.com>\n      Carlos Maiolino <cmaiolino@redhat.com>\n      Carlos Santos <casantos@datacom.ind.br>\n      Casper Ti. Vector <caspervector@gmail.com>\n      Chandan B Rajenda <chandan@linux.vnet.ibm.com>\n      changlianzhi <changlianzhi@uniontech.com>\n      chanthmiao <chanthmiao@outlook.com>\n      chas williams - CONTRACTOR <chas@cmf.nrl.navy.mil>\n      Chen Qi <Qi.Chen@windriver.com>\n      Chistyj Arkadij <chstarkd@gmail.com>\n      Chow Loong Jin <hyperair@ubuntu.com>\n      Chris Down <chris@chrisdown.name>\n      Chris Frost <chris@frostnet.net>\n      Chris Hofstaedtler <zeha@debian.org>\n      Chris MacGregor <chrismacgregor@google.com>\n      Chris Metcalf <cmetcalf@mellanox.com>\n      Chris Morin <chris.morin2@gmail.com>\n      Christian Bartolomäus <use_v6@aglaz.de>\n      Christian Brauner <brauner@kernel.org>\n      Christian Finnberg <christian@finnberg.net>\n      Christian Göttsche <cgzones@googlemail.com>\n      Christian Hesse <mail@eworm.de>\n      Christian von Roques <roques@juliet.ka.sub.org>\n      Christian Wiese <chris@opensde.org>\n      Christoph Anton Mitterer <mail@christoph.anton.mitterer.name>\n      Christophe Blaess <Christophe@Blaess.fr>\n      Christoph Egger <christoph@debian.org>\n      Christopher James Halse Rogers <raof@ubuntu.com>\n      Christoph Hellwig <hch@infradead.org>\n      Christoph Junghans <ottxor@gentoo.org>\n      Christoph Lameter <clameter@miriam.fuller.edu>\n      Chris Webb <chris@arachsys.com>\n      Claus Hindsgaul <claus_h@image.dk>\n      Cliff Wickman <cpw@sgi.com>\n      Clytie Siddall <clytie@riverland.net.au>\n      Cody Maloney <cmaloney@theoreticalchaos.com>\n      Colin Gillespie <colin@cgillespie.xyz>\n      Colin Watson <cjwatson@canonical.com>\n      Cong Wang <xiyou.wangcong@gmail.com>\n      Corentin Chary <corentincj@iksaif.net>\n      Cristian Rodríguez <crrodriguez@opensuse.org>\n      Cristian Zmole <chiarel@tragdate.ninja>\n      Csaba Kos <csaba.kos@gmail.com>\n      csbo98 <boliu98@foxmail.com>\n      Daan De Meyer <daan.j.demeyer@gmail.com>\n      Daisuke Yamashita <yamad@mb.infoweb.ne.jp>\n      Damien Goutte-Gattat <dgouttegattat@incenp.org>\n      Damien Le Moal <damien.lemoal@wdc.com>\n      dana <dana@dana.is>\n      Daniel Drake <drake@endlessm.com>\n      Daniel Engberg <daniel.engberg.lists@pyret.net>\n      Daniele Pizzolli <dan+dev@toel.it>\n      Daniel Kahn Gillmor <dkg@fifthhorseman.net>\n      Daniel Mierswa <impulze@impulze.org>\n      Daniel Nylander <po@danielnylander.se>\n      Daniel Peukert <daniel@peukert.cc>\n      Daniel Quinlan <quinlan@yggdrasil.com>\n      Daniel Shahaf <danielsh@apache.org>\n      Daniel Stodden <daniel.stodden@googlemail.com>\n      Daniel Thumim <dthumim@mit.edu>\n      Daniel Trebbien <dtrebbien@gmail.com>\n      Darren Salt <linux@youmustbejoking.demon.co.uk>\n      Darsey Litzenberger <dlitz@dlitz.net>\n      Dave Jones <davej@fedoraproject.org>\n      Dave Reisner <dreisner@archlinux.org>\n      David Anes <david.anes@suse.com>\n      David Brownell <david-b@pacbell.net>\n      David Cantrell <david@cantrell.org.uk>\n      David Engraf <david.engraf@sysgo.com>\n      David Flor <493294@mail.muni.cz>\n      David Gibson <david@gibson.dropbear.id.au>\n      David Holland <dholland@hcs.harvard.edu>\n      Davidlohr Bueso <davidlohr@hp.com>\n      David Miller <davem@davemloft.net>\n      David Prévot <david@tilapin.org>\n      David Shea <dshea@redhat.com>\n      David Woodhouse <dwmw2@infradead.org>\n      Debarshi Ray <rishi@fedoraproject.org>\n      Deiz <silverwraithii@gmail.com>\n      Denis Chaplygin <dchaplyg@redhat.com>\n      Denis ChengRq <crquan@gmail.com>\n      Dennis Gilmore <dennis@ausil.us>\n      Dennis H Jensen <dennis.h.jensen@siemens.com>\n      Dennis Jensen <dennis.h.jensen@siemens.com>\n      Diego Elio 'Flameeyes' Pettenò <flameeyes@gmail.com>\n      Dima Kogan <dkogan@cds.caltech.edu>\n      Dimitri John Ledkov <xnox@ubuntu.com>\n      Dirk Mueller <dmueller@suse.com>\n      Disconnect3d <dominik.b.czarnota@gmail.com>\n      Dmitriy Chestnykh <dm.chestnykh@gmail.com>\n      Dmitry V. Levin <ldv@altlinux.org>\n      Đoàn Trần Công Danh <congdanhqx@gmail.com>\n      Dong Hao <haodong@linux.vnet.ibm.com>\n      Dongli Zhang <dongli.zhang@oracle.com>\n      Dongsu Park <dongsu.park@profitbricks.com>\n      Douglas E. Quale\n      Doug Quale <quale@saavik.cs.wisc.edu>\n      Dov Grobgeld <dov.grobgeld@gmail.com>\n      Dragan Simic <dsimic@manjaro.org>\n      Dr. David Alan Gilbert <dave@treblig.org>\n      Dusty Mabe <dusty@dustymabe.com>\n      Earl Chew <earl_chew@yahoo.com>\n      Ed Carp\n      Eduard Bloch <blade@debian.org>\n      edupont <emeric.dupont@agol.org>\n      Edward Chron <echron@arista.com>\n      Egor Chelak <egor.chelak@gmail.com>\n      Elan Ruusamäe <glen@delfi.ee>\n      Eli Schwartz <eschwartz@archlinux.org>\n      ellcs <me@ellcs.de>\n      Elliott Mitchell <ehem+util-linux@drgnwing.com>\n      Emir SARI <emir_sari@icloud.com>\n      Enze Li <lienze@kylinos.cn>\n      Eric Badger <ebadger@purestorage.com>\n      Eric Biggers <ebiggers@google.com>\n      Eric Desrochers <eric.desrochers@canonical.com>\n      Érico Nogueira <erico.erc@gmail.com>\n      Érico Rolim <erico.erc@gmail.com>\n      Eric Rannaud <e@nanocritical.com>\n      Eric Rasmussen <ear@usfirst.org>\n      Eric Sandeen <sandeen@redhat.com>\n      Eric Simpson <esimpson@ca.ibm.com>\n      Eric S. Raymond <esr@thyrsus.com>\n      Eric W. Biederman <ebiederm@xmission.com>\n      Erik Troan\n      Ernesto A. Fernández <ernesto.mnd.fernandez@gmail.com>\n      Erwan Velu <e.velu@criteo.com>\n      Eryu Guan <guaneryu@gmail.com>\n      Etienne Mollier <etienne.mollier@mailoo.org>\n      Eugene Yunak <eugene@yunak.eu>\n      Evan Green <evangreen86@gmail.com>\n      Evgeniy Yakushev <yen81@mail.ru>\n      Evgeny Vereshchagin <evvers@ya.ru>\n      Fabian Frederick <fabf@skynet.be>\n      Fabian Groffen <grobian@gentoo.org>\n      Fabian.Kirsch@dlr.de <Fabian.Kirsch@dlr.de>\n      Fabian Vogt <fvogt@suse.de>\n      Fabrice Fontaine <fontaine.fabrice@gmail.com>\n      Federico Simoncelli <fsimonce@redhat.com>\n      FeRD (Frank Dana) <ferdnyc@gmail.com>\n      Filipe Brandenburger <filbranden@google.com>\n      Filipe Manana <fdmanana@kernel.org>\n      Flávio Leitner <fleitner@redhat.com>\n      Florentin Duneau <fduneau@gmail.com>\n      Florian Weimer <fweimer@redhat.com>\n      Florian Zumbiehl <florz@florz.de>\n      Forest Bond <forest@alittletooquiet.net>\n      Francesco Cosoleto <cosoleto@gmail.com>\n      Francisco Javier Tsao Santín <tsao@gpul.org>\n      Franck Bui <fbui@suse.com>\n      Franco Fichtner <franco@opnsense.org>\n      François Revol <revol@free.fr>\n      Fran Diéguez <frandieguez@ubuntu.com>\n      Frank Mayhar <fmayhar@google.com>\n      Frank Schaefer <kelledin@gmail.com>\n      Frantisek Sumsal <frantisek@sumsal.cz>\n      Frédéric Bothamy <frederic.bothamy@free.fr>\n      Frederick Grose <fgrose@sugarlabs.org>\n      Frédéric Marchal <fmarchal@perso.be>\n      Frederik \"Freso\" S. Olesen <freso@freso.dk>\n      Fred Mora <fmora@datto.com>\n      fREW Schmidt <frioux@gmail.com>\n      Fridolin Pokorny <fpokorny@redhat.com>\n      Gabor Kelemen <kelemeng@gnome.hu>\n      Gabriel Barazer <gabriel@oxeva.fr>\n      Gabriel Burt <gburt@novell.com>\n      Gabriel de Perthuis <g2p.code@gmail.com>\n      Gabriele Giacone <1o5g4r8o@gmail.com>\n      Gabriel M. Schuyler <schuyler@easiest.com>\n      Gaël PORTAY <gael.portay@collabora.com>\n      Gao Xiang <hsiangkao@redhat.com>\n      Georg Schiesser <georg.schiesser@opentech.at>\n      Georgy Yakovlev <gyakovlev@gentoo.org>\n      Gerald Schaefer <gerald.schaefer@de.ibm.com>\n      Gerhard Schneider <gs@ilfb.tuwien.ac.at>\n      Gero Treuner <gero@70t.de>\n      Gerrit Renker <gerrit@erg.abdn.ac.uk>\n      Giacomo <giacomo.perale@gmail.com>\n      Gilles Espinasse <g.esp@free.fr>\n      Giulio Orsero <giulioo@gmail.com>\n      Giuseppe Scrivano <gscrivan@redhat.com>\n      Gleb Fotengauer-Malinovskiy <glebfm@altlinux.org>\n      Goffredo Baroncelli <kreijack@inwind.it>\n      Goldwyn Rodrigues <rgoldwyn@suse.com>\n      Grady Martin <admin@nosuck.org>\n      G.raud Meyer <graud@gmx.com>\n      Guan Xin <guanx.bac@gmail.com>\n      Gui Hecheng <guihc.fnst@cn.fujitsu.com>\n      Guillem Jover <guillem@hadrons.org>\n      Gunnar Ritter <g-r@bigfoot.de>\n      Gustavo Zacarias <gustavo@zacarias.com.ar>\n      Hajime Taira <htaira@redhat.com>\n      Hamish Coleman <hamish@zot.org>\n      Hannes Müller <>\n      Hannes Reinecke <hare@suse.de>\n      Hans de Goede <hdegoede@redhat.com>\n      Hans Holmberg <hans.holmberg@wdc.com>\n      Harald Hoyer <harald@redhat.com>\n      Harry Mallon <hjmallon@gmail.com>\n      Hayden James <hayden.james@gmail.com>\n      Heiko Carstens <heiko.carstens@de.ibm.com>\n      Heinrich Schuchardt <xypron.glpk@gmx.de>\n      heitbaum <rudi@heitbaum.com>\n      Helge Deller <deller@gmx.de>\n      Helmut Grohne <helmut@subdivi.de>\n      Hendrik Lönngren <wikibugs@googlemail.com>\n      Henne Vogelsang <hvogel@opensuse.org>\n      Hermann Beckers <hjb-news@onlinehome.de>\n      Hideki EIRAKU <hdk@igel.co.jp>\n      Hill Ma <maahiuzeon@gmail.com>\n      Hiroaki Sengoku <sengoku@senri.gcd.org>\n      H.J. Lu <hlu@eecs.wsu.edu>\n      H. Peter Anvin <hpa@zytor.com>\n      Huang Shijie <shijie@os.amperecomputing.com>\n      HUANG Wei <weih@opera.com>\n      Hugh Dickins <hughd@google.com>\n      Hugo Osvaldo Barrera <hugo@barrera.io>\n      Humberto Zuazaga\n      Huschaam Hussain <Huschaam.Hussain@hp.com>\n      Hushan Jia <hushan.jia@gmail.com>\n      Ian Jones <ian@contractcoder.biz>\n      Ian Kent <raven@themaw.net>\n      Ian Wienand <iwienand@redhat.com>\n      Icenowy Zheng <icenowy@aosc.io>\n      igo95862 <igo95862@yandex.ru>\n      Igor Bazhitov <igor.bazhitov@gmail.com>\n      Igor Gnatenko <i.gnatenko.brain@gmail.com>\n      ihno <ihno@suse.de>\n      Ilias Mamedov <arknir@yandex.ru>\n      Imre Kaloz <kaloz@openwrt.org>\n      Ingo Brückl <ib@wupperonline.de>\n      Isaac Dunham <ibid.ag@gmail.com>\n      Issam E. Maghni <issam.e.maghni@mailbox.org>\n      Ivan Delalande <colona@arista.com>\n      Ivan Mironov <mironov.ivan@gmail.com>\n      Jaakko Hyvätti <HYVATTI@cc.helsinki.fi>\n      Jakob Unterwurzacher <jakobunt@gmail.com>\n      Jakub Bogusz <qboosh@pld-linux.org>\n      Jakub Hrozek <jhrozek@redhat.com>\n      Jakub Wilk <jwilk@jwilk.net>\n      James Bottomley <James.Bottomley@HansenPartnership.com>\n      James Buren <ryuo@frugalware.org>\n      James Calligeros <jcalligeros99@gmail.com>\n      James Clarke <jrtc27@jrtc27.com>\n      James Hunt <james.hunt@ubuntu.com>\n      James Le Cuirot <chewi@aura-online.co.uk>\n      James Peach <jpeach@apache.org>\n      James Sanford <jsanfordgit@froop.com>\n      James Youngman <jay@gnu.org>\n      Jan Chren (rindeal) <dev.rindeal@gmail.com>\n      Jan Engelhardt <jengelh@inai.de>\n      Jan Kara <jack@suse.cz>\n      Jan Macku <jamacku@redhat.com>\n      Jann Horn <jannh@google.com>\n      Jan Samek <samekh@email.cz>\n      Jan Sarenik <jsarenik@redhat.com>\n      Jan (yac) Matějka <JMatejka@suse.cz>\n      Jan \"Yenya\" Kasprzak <kas@fi.muni.cz>\n      Jan Zeleny <jzeleny@redhat.com>\n      Jari Aalto <jari.aalto@cante.net>\n      Jaromir Capik <jcapik@redhat.com>\n      Jason Borden <jborden@bluehost.com>\n      Jason Vas Dias <jvdias@redhat.com>\n      Jean-Loup 'clippix' Bogalho <clippix@lse.epita.fr>\n      Jean-Philippe ROMAIN <jean-philippe.romain@st.com>\n      Jeff Layton <jlayton@kernel.org>\n      Jeff Mahoney <jeffm@suse.com>\n      Jeffrey Bastian <jbastian@redhat.com>\n      Jeffrey Ferreira <jeffpferreira@gmail.com>\n      Jens Kristian Søgaard <jens@mermaidconsulting.dk>\n      Jeremi Piotrowski <jpiotrowski@linux.microsoft.com>\n      Jeremy Fitzhardinge <jeremy@suite.sw.oz.au>\n      Jeremy Huntwork <jhuntwork@lightcubesolutions.com>\n      Jeremy Katz <katzj@fedoraproject.org>\n      Jeremy Linton <jeremy.linton@arm.com>\n      Jeremy Linton <lintonrjeremy@gmail.com>\n      Jeroen Oortwijn <oortwijn@gmail.com>\n      Jesper Dahl Nyerup <nyerup@one.com>\n      Jesse Thilo <jesse.thilo@pobox.com>\n      Jiaxun Yang <jiaxun.yang@flygoat.com>\n      jiazhenyuan <jiazhenyuan@uniontech.com>\n      Jim Meyering <jim@meyering.net>\n      Jim Patterson <jimp@wegrok.net>\n      Jindrich Makovicka <makovick@gmail.com>\n      Jindrich Novy <jnovy@redhat.com>\n      Jiro SEKIBA <jir@unicus.jp>\n      JJ-Meng <472537476@qq.com>\n      Joe Hansen <joedalton2@yahoo.dk>\n      Johan Herland <johan@herland.net>\n      Johannes Altmanninger <aclopte@gmail.com>\n      Johannes Berg <johannes@sipsolutions.net>\n      Johannes Nixdorf <mixi@shadowice.org>\n      Johannes Thumshirn <johannes.thumshirn@wdc.com>\n      John Baublitz <jbaublitz@redhat.com>\n      John David Anglin <dave@parisc-linux.org>\n      John Garry <john.garry@huawei.com>\n      John Groves <jgroves@micron.com>\n      John Keeping <john.keeping@lineone.net>\n      John Lindgren <john.lindgren@tds.net>\n      John Paul Morrison <jmorriso@rflab.ee.ubc.ca>\n      John W Higgins <wishdev@gmail.com>\n      John W. Linville <linville@tuxdriver.com>\n      Jonathan Ketchker <jonathan@ketchker.com>\n      Jonathan Liu <net147@gmail.com>\n      Jon Grant <jg@jguk.org>\n      Jon Ringle <jon@ringle.org>\n      Jookia <contact@jookia.org>\n      Jordi Mas i Hernàndez <jmas@softcatala.org>\n      Jörg Jenderek <joerg.jen.der.ek@gmx.net>\n      Joseph Parmelee <jparmele@wildbear.com>\n      Josep Puigdemont <josep.puigdemont@gmail.com>\n      Jose Riha <jose1711@gmail.com>\n      Josh Triplett <josh@joshtriplett.org>\n      Joshua Hudson <joshudson@gmail.com>\n      Joshua Watt <jpewhacker@gmail.com>\n      Josiah Worcester <josiahw@gmail.com>\n      Jouke Witteveen <j.witteveen@gmail.com>\n      Juerg Haefliger <juerg.haefliger@canonical.com>\n      Juha Laiho <jlaiho@ichaos.nullnet.fi>\n      Jun Hamano <junio@shadow.twinsun.com>\n      Junichi Uekawa <uekawa@google.com>\n      Junxiao Bi <junxiao.bi@oracle.com>\n      Justin B Rye <jbr@edlug.org.uk>\n      Justin Chen <justinpopo6@gmail.com>\n      J William Piggott <elseifthen@gmx.com>\n      KaiGai Kohei <kaigai@kaigai.gr.jp>\n      Kai Lüke <kailueke@riseup.net>\n      Kalev Soikonen <ksop@hot.ee>\n      Kaligule <Code@schauderbasis.de>\n      Kay Sievers <kay.sievers@vrfy.org>\n      Kees Cook <kees.cook@canonical.com>\n      Ken Kopin <kenkopin@gmail.com>\n      Kenneth Van Alstyne <kvanalstyne@knightpoint.com>\n      Kent Overstreet <kent.overstreet@gmail.com>\n      Kenyon Ralph <kenyon@kenyonralph.com>\n      kernc <kerncece@gmail.com>\n      Kevin E. Martin <martin@cs.unc.edu>\n      Kevin Fenzi <kevin@scrye.com>\n      kevin.granade@gmail.com <kevin.granade@gmail.com>\n      Kevin Hao <kexin.hao@windriver.com>\n      Kevin Locke <kevin@kevinlocke.name>\n      Khem Raj <raj.khem@gmail.com>\n      Kirill Elagin <kirelagin@gmail.com>\n      Kir Kolyshkin <kir@openvz.org>\n      Konstantin Khlebnikov <khlebnikov@yandex-team.ru>\n      kraptor <kraptor@kraptor.com>\n      Kunihiko IMAI <kimai@iodata.jp>\n      KyleMahlkuch <Kyle.Mahlkuch@ibm.com>\n      Lada Trimasova <ltrimas@synopsys.com>\n      LaMont Jones <lamont@debian.org>\n      Lars Wirzenius\n      Laurent Vivier <laurent@vivier.eu>\n      Lauri Nurmi <lanurmi@iki.fi>\n      Lawrence Rust <lawrence@softsystem.co.uk>\n      Lennard Hofmann <lennard.hofmann@web.de>\n      Lennart Poettering <lennart@poettering.net>\n      Leon <adigitoleo@protonmail.com>\n      Liam Ryan <liamryandev@gmail.com>\n      Libor Bukata <lbukata@gmail.com>\n      Linus Torvalds <torvalds@linux-foundation.org>\n      lishengyu <lishengyu@uniontech.com>\n      Li Zefan <lizf@cn.fujitsu.com>\n      Lorenzo Beretta <vc.net.loreb@gmail.com>\n      LoSh <losh@example.com>\n      Lubomir Kundrak <lkundrak@redhat.com>\n      Lubomir Rintel <lkundrak@v3.sk>\n      Luca Boccassi <bluca@debian.org>\n      Luca Boccassi <luca.boccassi@microsoft.com>\n      Luca BRUNO <luca.bruno@coreos.com>\n      Luca Ceresoli <luca@lucaceresoli.net>\n      Luciano Chavez <lnx1138@us.ibm.com>\n      Ludwig Nussel <ludwig.nussel@suse.de>\n      Luiz Angelo Daros de Luca <luizluca@gmail.com>\n      Lukas Czerner <lczerner@redhat.com>\n      Łukasz Stelmach <l.stelmach@samsung.com>\n      Makoto Kato <makoto.kt@gmail.com>\n      Mamatha Inamdar <mamatha4@linux.vnet.ibm.com>\n      Manatsu Takahashi <takahashi.manatsu@gmail.com>\n      Mantas Mikulėnas <grawity@gmail.com>\n      Manuel Bentele <development@manuel-bentele.de>\n      Marc-Antoine Perennou <Marc-Antoine@Perennou.com>\n      Marcel Holtmann <marcel@holtmann.org>\n      Marcel Waldvogel <marcel.waldvogel@trifence.ch>\n      Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>\n      Marco Colombo <m.colombo@ed.ac.uk>\n      Marco d'Itri <md@Linux.IT>\n      Marcos Mello <marcosfrm@gmail.com>\n      Marcos Paulo de Souza <marcos.souza.org@gmail.com>\n      Marek Michalkiewicz <marekm@i17linuxb.ists.pwr.wroc.pl>\n      Marek Otahal <markotahal@gmail.com>\n      Marek Polacek <mmpolacek@gmail.com>\n      Mario Blättermann <mario.blaettermann@gmail.com>\n      Mark Barbone <mark.l.barbone@gmail.com>\n      Mark Hindley <mark@hindley.org.uk>\n      Mark McLoughlin <markmc@redhat.com>\n      Mark Sheppard <mark@ddf.net>\n      Mark Tinguely <mark.tinguely@hpe.com>\n      Markus Mayer <mmayer@broadcom.com>\n      Markus Rinne <markus.ka.rinne@gmail.com>\n      Martin K. Petersen <martin.petersen@oracle.com>\n      Martin Roukala (né Peres) <martin.roukala@mupuf.org>\n      Martin Schlemmer <azarah@gentoo.org>\n      Martin Schulze <joey@infodrom.org>\n      Martin Steigerwald <ms@teamix.de>\n      Masami Hiramatsu <mhiramat@kernel.org>\n      Masami Ichikawa <masami256@gmail.com>\n      Masanari Iida <standby24x7@gmail.com>\n      Masatake YAMATO <yamato@redhat.com>\n      Masato Suzuki <masato.suzuki@wdc.com>\n      Masayoshi Mizuma <m.mizuma@jp.fujitsu.com>\n      Mateusz Marciniec <mateuszmar2@gmail.com>\n      Matthew Garrett <mjg59@srcf.ucam.org>\n      Matthew Harm Bekkema <id@mbekkema.name>\n      Matthew Krupcale <mkrupcale@matthewkrupcale.com>\n      Matthias Gerstner <matthias.gerstner@suse.de>\n      Matthias König <mk@phasorlab.de>\n      Mattias Nissler <mnissler@chromium.org>\n      Matti Niemenmaa <matti.niemenmaa+git@iki.fi>\n      Mauricio Faria de Oliveira <mfo@canonical.com>\n      Maurizio Lombardi <m.lombardi85@gmail.com>\n      maximilian attems <max@stro.at>\n      Maxim Levitsky <maximlevitsky@gmail.com>\n      Maxim V. Dziumanenko <mvd@mylinux.com.ua>\n      Max Klinger <max@fs.lmu.de>\n      Meelis Roos <mroos@linux.ee>\n      Merlin Büge <merlin.buege@tuhh.de>\n      Mesutcan Kurt <mesutcank@gmail.com>\n      Michael Bunk <bunk@iat.uni-leipzig.de>\n      michael-dev <michael-dev@fami-braun.de>\n      Michael Forney <mforney@mforney.org>\n      Michael Glad <glad@daimi.aau.dk>\n      Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>\n      Michael Kerrisk <mtk.manpages@gmail.com>\n      Michael Marineau <michael.marineau@coreos.com>\n      Michael Piefel <piefel@informatik.hu-berlin.de>\n      Michael Trapp <michael.trapp@sap.com>\n      Michał Bartoszkiewicz <mbartoszkiewicz@gmail.com>\n      Michal Biesek <michalbiesek@gmail.com>\n      Michal Humpula <michal.humpula@hudrydum.cz>\n      Michal Luscon <mluscon@redhat.com>\n      Michal Schmidt <mschmidt@redhat.com>\n      Michal Suchanek <msuchanek@suse.de>\n      Michel Robitaille <robitail@IRO.UMontreal.CA>\n      Mike Frysinger <vapier@gentoo.org>\n      Mike Gilbert <floppym@gentoo.org>\n      Mike Hommey <mh@glandium.org>\n      Mikel Olasagasti Uranga <hey_neken@mundurat.net>\n      Mike Place <mp@saltstack.com>\n      Mikhail Gusarov <dottedmag@dottedmag.net>\n      Mikhail Vorobyov <m.vorobyov@cs.msu.ru>\n      Miklos Szeredi <mszeredi@suse.cz>\n      Mikulas Patocka <mpatocka@redhat.com>\n      Milan Bouchet-Valat <nalimilan@club.fr>\n      Milan Broz <gmazyland@gmail.com>\n      Ming Lei <tom.leiming@gmail.com>\n      Miquel van Smoorenburg <miquels@maestro.htsa.aha.nl>\n      Mitchum DSouza\n      Moritz Muehlenhoff <jmm@inutil.org>\n      M.S.Colclough <m.s.colclough@bham.ac.uk>\n      Namhyung Kim <namhyung@gmail.com>\n      Naohiro Aota <naohiro.aota@wdc.com>\n      Narthorn <narthorn@gmail.com>\n      Natanael Copa <ncopa@alpinelinux.org>\n      Nate Clark <nate@neworld.us>\n      Nathan Rossi <nathan.rossi@xilinx.com>\n      Nathan Sharp <nwsharp@live.com>\n      NeilBrown <neilb@suse.com>\n      Neil Horman <nhorman@tuxdriver.com>\n      nick black <dankamongmen@gmail.com>\n      nick black <nick.black@sprezzatech.com>\n      Nick Holloway <Nick.Holloway@pyrites.org.uk>\n      Nicolai Dagestad <nicolai@dagestad.fr>\n      Nicolai Langfeldt <janl@math.uio.no>\n      Nicolas Boichat <nicolas@boichat.ch>\n      Nicolas Caramelli <caramelli.devel@gmail.com>\n      Nicolas Melot <nicolas.melot@ericsson.com>\n      Nicolas Provost <nprovost@quadriv.com>\n      Niklas Hambüchen <mail@nh2.me>\n      Nik Nyby <nikolas@gnu.org>\n      Nikolay Borisov <nborisov@suse.com>\n      Nikolay Sivov <nsivov@codeweavers.com>\n      Nilgün Belma Bugüner <nilgun@buguner.name.tr>\n      nl6720 <nl6720@gmail.com>\n      Noel Cragg <noel@squeezehead.com>\n      Noel Kuntze <noel@familie-kuntze.de>\n      Norbert Buchmuller <norbi@nix.hu>\n      OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>\n      Oliver Falk <oliver@linux-kernel.at>\n      Olivier Blin <blino@mandriva.com>\n      Olivier Mengué <dolmen@cpan.org>\n      Ondrej Oprala <ooprala@redhat.com>\n      Osamu Aoki <osamu@debian.org>\n      osexp2000 <osexp2000@gmail.com>\n      Pádraig Brady <P@draigBrady.com>\n      Pali Rohár <pali.rohar@gmail.com>\n      panchenbo <panchenbo@uniontech.com>\n      Pankaj Raghav <p.raghav@samsung.com>\n      Pascal Terjan <pterjan@mandriva.com>\n      Patrice Dumas <pertusus@free.fr>\n      Patrick Plagwitz <patrick.plagwitz@fau.de>\n      Patrick Steinhardt <ps@pks.im>\n      Paul Asmuth <paul@asmuth.com>\n      Paul Eggert <eggert@cs.ucla.edu>\n      Paul Fox <pgf@laptop.org>\n      Paulius Zaleckas <paulius.zaleckas@teltonika.lt>\n      Paul Laffitte <plaffitt@gmail.com>\n      Paul Menzel <paulepanter@users.sourceforge.net>\n      Paul M <paul@chezp4ul.fr>\n      Paul Sarena <paul@sarena.ca>\n      Pavel Butsykin <pbutsykin@virtuozzo.com>\n      Pavel Maryanov <acid@jack.kiev.ua>\n      pcpa <paulo.cesar.pereira.de.andrade@gmail.com>\n      Pedro Albuquerque <pmra@protonmail.com>\n      Pedro Miguel Carvalho <PedroMC@pmc.com.pt>\n      Pedro Ribeiro <p.m42.ribeiro@gmail.com>\n      Pedro Tammela <pctammela@mojatatu.com>\n      peppe <g1pi@libero.it>\n      Peter Breitenlohner <peb@mppmu.mpg.de>\n      Peter Cordes <peter@cordes.ca>\n      Peter De Wachter <pdewacht@gmail.com>\n      Peter Hoeg <peter@speartail.com>\n      Peter Jones <pjones@redhat.com>\n      Peter Orbaek <poe@daimi.aau.dk>\n      Peter Rajnoha <prajnoha@redhat.com>\n      Peter Tobias <tobias@server.et-inf.fho-emden.de>\n      Peter Tyser <ptyser@xes-inc.com>\n      Peter Ujfalusi <peter.ujfalusi@linux.intel.com>\n      Peter Volkov <pva@gentoo.org>\n      Peter Wu <peter@lekensteyn.nl>\n      Petr Písař <petr.pisar@atlas.cz>\n      Petr Štetiar <ynezz@true.cz>\n      Petr Uzel <petr.uzel@suse.cz>\n      Petr Vorel <pvorel@suse.cz>\n      Phan Vinh Thinh <teppi82@gmail.com>\n      Philip Hazelden <philip.hazelden@gmail.com>\n      Philippe Reynes <philippe.reynes@softathome.com>\n      Philipp Marek <philipp.marek@linbit.com>\n      Philip Prindeville <philipp@redfish-solutions.com>\n      Philipp Thomas <pth@suse.de>\n      Phillip Susi <psusi@ubuntu.com>\n      Phil Ruffwind <rf@rufflewind.com>\n      Pierre Hauweele <antegallya@gmail.com>\n      Pierre Labastie <pierre.labastie@neuf.fr>\n      Pietro Castelli\n      Pino Toscano <toscano.pino@tiscali.it>\n      Platon Pronko <platon7pronko@gmail.com>\n      Portisch <hugo.portisch@yahoo.de>\n      Po-Yu Chuang <ratbert@faraday-tech.com>\n      Prarit Bhargava <prarit@redhat.com>\n      Qais Yousef <qyousef@layalina.io>\n      Quentin Rameau <quinq@fifth.space>\n      Radka Skvarilova <rskvaril@redhat.com>\n      Rafael Aquini <aquini@redhat.com>\n      Rafael Ferreira <rafael.f.f1@gmail.com>\n      Rafael Fontenelle <rafaelff@gnome.org>\n      Rafael Fontenelle <rffontenelle@gmail.com>\n      Rafal Luzynski <digitalfreak@lingonborough.com>\n      Rafał Miłecki <rafal@milecki.pl>\n      Raghavendra D Prabhu <rprabhu@wnohang.net>\n      Rainer Gerhards <rgerhards@adiscon.com>\n      Rajeev V. Pillai <rajeevvp@gmail.com>\n      Ram Pai <linuxram@us.ibm.com>\n      Randolph Bentson <bentson@grieg.seaslug.org>\n      Randy Dunlap <randy.dunlap@oracle.com>\n      Raphael S. Carvalho <raphaelsc@cloudius-systems.com>\n      Rasmus Villemoes <rasmus.villemoes@prevas.dk>\n      ratijas <me@ratijas.tk>\n      Raul Gutierrez Segales <rgs@itevenworks.net>\n      Ray Wang <wanglei1123@gmail.com>\n      Remus-Gabriel Chelu <remusgabriel.chelu@disroot.org>\n      Rian Hunter <rian@alum.mit.edu>\n      Richard Allen <rsaxvc@rsaxvc.net>\n      Richard Fuchs <rfuchs@sipwise.com>\n      Richard Tollerton <rich.tollerton@ni.com>\n      Richard Weinberger <richard@nod.at>\n      Richard W.M. Jones <rjones@redhat.com>\n      Richard Yann <yann.richard@uhb.fr>\n      Richard Yao <ryao@gentoo.org>\n      Rickard Faith <faith@cs.unc.edu>\n      Rick Sladkey <jrs@world.std.com>\n      Riku Voipio <riku.voipio@iki.fi>\n      Rik van Riel <riel@redhat.com>\n      rilysh <nightquick@proton.me>\n      Rishabh Thukral <rthukral@arista.com>\n      Ritika Srivastava <ritika.srivastava@oracle.com>\n      ritikrajdev <ritikrajdev761@gmail.com>\n      Robert Förster <Dessa@gmake.de>\n      Robert Millan <rmh@debian.org>\n      Roberto Bergantinos Corpas <rbergant@redhat.com>\n      Robert Schiele <rschiele@gmail.com>\n      Roddy Shuler <roddy@endlessm.com>\n      Rodrigo Campos <rodrigo@sdfg.com.ar>\n      Rodrigo Stulzer Lopes <rodrigo@conectiva.com.br>\n      Roland Kammerer <roland.kammerer@linbit.com>\n      Rolf Fokkens <rolf@rolffokkens.nl>\n      Romain Bouvier <skunnyk@alteroot.org>\n      Romain Izard <romain.izard.pro@gmail.com>\n      Romain Naour <romain.naour@gmail.com>\n      Ronan Pigott <ronan@rjp.ie>\n      Ronny Chevalier <chevalier.ronny@gmail.com>\n      Ron Sommeling <sommel@sci.kun.nl>\n      Rosen Penev <rosenp@gmail.com>\n      Ross Biro <biro@yggdrasil.com>\n      Ross Burton <ross.burton@arm.com>\n      Rostislav Skudnov <rostislav@tuxera.com>\n      Roy Peled <the.roy.peled@gmail.com>\n      Ruediger Meier <ruediger.meier@ga-group.nl>\n      Rui Zhao (renyuneyun) <renyuneyun@gmail.com>\n      Rupesh Girase <rgirase@redhat.com>\n      Ryan Finnie <ryan@finnie.org>\n      Samanta Navarro <ferivoz@riseup.net>\n      Sami Kerola <kerolasa@iki.fi>\n      Sami Liedes <sami.liedes@iki.fi>\n      Sami Loone <sami@loone.fi>\n      Samir Benmendil <me@rmz.io>\n      Sam James <sam@gentoo.org>\n      Sam Morris <sam@robots.org.uk>\n      Samuel Dionne-Riel <samuel@dionne-riel.com>\n      Samuel Ortiz <sameo@linux.intel.com>\n      Samuel Thibault <samuel.thibault@aquilenet.fr>\n      Sam Varshavchik <mrsam@courier-mta.com>\n      Sam Voss <sam.voss@gmail.com>\n      Sander van Malssen <svm@kozmix.ow.nl>\n      Santiago Vila Doncel <sanvila@unex.es>\n      Sascha Sommer <ssommer@suse.de>\n      Sassan Panahinejad <sassan@sassan.me.uk>\n      Scott James Remnant <scott@ubuntu.com>\n      Scott Moser <smoser@ubuntu.com>\n      Scott Shambarger <devel@shambarger.net>\n      Scott Telford <st@epcc.ed.ac.uk>\n      Sean Anderson <seanga2@gmail.com>\n      Sebastian Andrzej Siewior <sebastian@breakpoint.cc>\n      Sebastian Krahmer <krahmer@suse.de>\n      Sebastian Pipping <sebastian@pipping.org>\n      Sebastian Pucilowski <smopucilowski@gmail.com>\n      Sebastian Rasmussen <sebras@gmail.com>\n      Sebastian Schrader <sebastian.schrader@ossmail.de>\n      Sébastien Helleu <flashcode@flashtux.org>\n      Seong-ho Cho <darkcircle.0426@gmail.com>\n      Serge Hallyn <serge.hallyn@ubuntu.com>\n      Sergei Antonov <saproj@gmail.com>\n      Sergey Gusarov <laborer2008@gmail.com>\n      Seth Girvan <snth@snthhacks.com>\n      Sevan Janiyan <venture37@geeklan.co.uk>\n      sewn <sewn@disroot.org>\n      sgargel <sgargel@yahoo.it>\n      Shachar Shemesh <shachar@debian.org>\n      Shahid Laher <govellius@gmail.com>\n      Shaun Tancheff <shaun@tancheff.com>\n      Shigeki Morishima <s.morishima@fujitsu.com>\n      Shigeki Morishima <s.morishima@jp.fujitsu.com>\n      Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>\n      Shunsuke Nakamura <nakamura.shun@jp.fujitsu.com>\n      Simon Mihevc <simonmihevc@email.si>\n      Sinan Kaya <sinan.kaya@microsoft.com>\n      sluidfoe <sluidfoe@gmail.com>\n      Smitty <me@smitop.com>\n      Sol Boucher <sboucher@cmu.edu>\n      Søren Holm <sgh@sgh.dk>\n      Soumendra Ganguly <soumendraganguly@gmail.com>\n      SOUMENDRA GANGULY <soumendra@indra.local>\n      s.p@orbitalfox.com <s.p@orbitalfox.com>\n      Stanislav Brabec <sbrabec@suse.cz>\n      Stefan Krah <stefan@bytereef.org>\n      Stefan Schubert <schubi@suse.de>\n      Stef Walter <stefw@redhat.com>\n      Stepan Kasal <skasal@redhat.com>\n      Štěpán Němec <snemec@redhat.com>\n      Stéphane Aulery <lkppo@free.fr>\n      Stephan Maka <stephan@spaceboyz.net>\n      Stephan Müller <fruktopus@gmail.com>\n      Stephen Gallimore\n      Stephen Hemminger <shemminger@vyatta.com>\n      Stephen Kitt <steve@sk2.org>\n      Stephen Tweedie <sct@dcs.ed.ac.uk>\n      Steve Grubb <sgrubb@redhat.com>\n      Steve Kenton <skenton@ou.edu>\n      Steven J. Magnani <steve@digidescorp.com>\n      Steven S. Dick <ssd@nevets.oau.org>\n      Steven Smith <sos22@archy.org.uk>\n      Steve Philp\n      Stewart Smith <stewart@linux.vnet.ibm.com>\n      Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>\n      Sumanth Korikkar <sumanthk@linux.ibm.com>\n      Sven Eckelmann <sven.eckelmann@gmx.de>\n      Sven Jost <sven.jost@googlemail.com>\n      Sven Wiltink <swiltink@transip.nl>\n      Sweet Tea Dorminy <sweettea@mit.edu>\n      taiyu <taiyu.len@gmail.com>\n      Takeshi Hamasaki <hmatrjp@users.sourceforge.jp>\n      tamz <totemz@protonmail.com>\n      Temuri Doghonadze <temuri.doghonadze@gmail.com>\n      Terry Burton <tez@terryburton.co.uk>\n      Thayne McCombs <thayne@lucidchart.com>\n      Theodore Ts'o <tytso@mit.edu>\n      Thiébaud Weksteen <tweek@google.com>\n      Thierry Reding <thierry.reding@avionic-design.de>\n      Thierry Vignaud <thierry.vignaud@gmail.com>\n      Thomas Abraham <tabraham@suse.com>\n      Thomas Bächler <thomas@archlinux.org>\n      Thomas Deutschmann <whissi@gentoo.org>\n      Thomas Fehr <fehr@suse.de>\n      Thomas Haller <thaller@redhat.com>\n      Thomas Petazzoni <thomas.petazzoni@free-electrons.com>\n      Thomas Schwinge <thomas@codesourcery.com>\n      Thomas Voss <mail@thomasvoss.com>\n      Thomas Weißschuh <thomas@t-8ch.de>\n      Thorsten Glaser <tg@mirbsd.org>\n      Thorsten Kukuk <kukuk@suse.com>\n      Thorsten Wilmer <wilmer.thorsten@gmail.com>\n      Tilman Schmidt <tilman@imap.cc>\n      Tim Gardner <tim.gardner@canonical.com>\n      Tim Hildering <hilderingt@posteo.net>\n      Timo Juhani Lindfors <timo.lindfors@iki.fi>\n      Timo Warns <Warns@Pre-Sense.DE>\n      Tim Waugh <twaugh@redhat.com>\n      Tj <hacker@iam.tj>\n      Tobias Klauser <tklauser@distanz.ch>\n      Tobias Stoeckmann <tobias@stoeckmann.org>\n      Todd Lewis <todd_lewis@unc.edu>\n      Todd Lewis <utoddl@email.unc.edu>\n      ToddRK <ToddRK@example.com>\n      Todd Zullinger <tmz@pobox.com>\n      Tomas Winkler <tomas.winkler@intel.com>\n      Tomasz Wojdat <tpwojdat@gmail.com>\n      Tom Gundersen <teg@jklm.no>\n      Tomislav Krznar <tomislav.krznar@gmail.com>\n      Tommi Kyntola <kynde@iki.fi>\n      Tommy Thorn\n      Tomoaki Teshima <tomoaki.teshima@gmail.com>\n      Tom Prince <tom.prince@ualberta.net>\n      Toni Uhlig <matzeton@googlemail.com>\n      Tony Asleson <tasleson@redhat.com>\n      Toomas Losin <tlo@lenrek.net>\n      Topi Miettinen <toiwoton@gmail.com>\n      Torsten Hilbrich <torsten.hilbrich@secunet.com>\n      Toshi Kani <toshi.kani@hp.com>\n      Trần Ngọc Quân <vnwildman@gmail.com>\n      Troy Rollo <linux@troy.rollo.name>\n      Tycho Andersen <tycho@tycho.ws>\n      u2386 <hugo.cavan2386@gmail.com>\n      unknown <wubogujing@gmail.com>\n      utoddl <todd_lewis@unc.edu>\n      Vaclav Dolezal <vdolezal@redhat.com>\n      Valerie Aurora <vaurora@redhat.com>\n      Valery Ushakov <uwe@stderr.spb.ru>\n      Vasant Hegde <hegdevasant@linux.vnet.ibm.com>\n      Vasilis Liaskovitis <vliaskovitis@suse.com>\n      Vicente Jimenez Aguilar <googuy@gmail.com>\n      Vicki Pfau <vi@endrift.com>\n      Victor Dodon <dodonvictor@gmail.com>\n      Viktor Rosendahl (BMW) <viktor.rosendahl@gmail.com>\n      Ville Skyttä <ville.skytta@iki.fi>\n      Vincent Deffontaines <vincent@gryzor.com>\n      Vincent McIntyre <vincent.mcintyre@csiro.au>\n      Vincent Smeets <Vincent.VSmeets@GMail.com>\n      Vincent Stehlé <vincent.stehle@arm.com>\n      Vinnie Magro <vmagro@fb.com>\n      Vitezslav Cizek <vcizek@suse.cz>\n      Vladimir Brednikov <vbrednikov@gmail.com>\n      Vladimir Slavik <vslavik@redhat.com>\n      Vladimir 'φ-coder/phcoder' Serbinenko <phcoder@gmail.com>\n      Vojtěch Eichler <vojta.eich@gmail.com>\n      Vojtech Trefny <vtrefny@redhat.com>\n      Volker Kuhlmann <v.kuhlmann@elec.canterbury.ac.nz>\n      Volker Schatz <oss@volkerschatz.com>\n      Vratislav Podzimek <vpodzime@redhat.com>\n      Waldemar Brodkorb <wbx@openadk.org>\n      WANG Chao <wcwxyz@gmail.com>\n      Wang Shilong <wshilong@ddn.com>\n      WANG Xuerui <git@xen0n.name>\n      Wanlong Gao <wanlong.gao@gmail.com>\n      Warner Losh <imp@FreeBSD.org>\n      Wayne Pollock <profwaynepollock@gmail.com>\n      Wayne R. Roth <wayneroth42@gmail.com>\n      Wei-Lun Chao <bluebat@member.fsf.org>\n      Werner Almesberger <almesber@bernina.ethz.ch>\n      Werner Fink <werner@suse.de>\n      Wieland Hoffmann <themineo@gmail.com>\n      William Pitcock <nenolod@dereferenced.org>\n      Will Johansson <will.johansson@gmail.com>\n      Will Jordan <will.jordan@gmail.com>\n      Wojtek Kaniewski <wojtekka@toxygen.net>\n      Wolfgang Richter <wolf@cs.cmu.edu>\n      Wolfram Sang <wsa@kernel.org>\n      W. Trevor King <wking@tremily.us>\n      WUEBBELS, Josef <Josef.WUEBBELS@mtu.de>\n      Wylmer Wang <wantinghard@gmail.com>\n      W.Z. Venema\n      Xi Ruoyao <xry111@xry111.site>\n      Yann Droneaud <yann@droneaud.fr>\n      Yannick Le Pennec <yannick.lepennec@live.fr>\n      Yegor Yefremov <yegorslists@googlemail.com>\n      Yonatan Goldschmidt <yon.goldschmidt@gmail.com>\n      Yoshihiro Takahashi <ytakahashi@miraclelinux.com>\n      Yousong Zhou <yszhou4tech@gmail.com>\n      Yuezhang Mo <Yuezhang.Mo@sony.com>\n      Yuri Chornoivan <yurchor@ukr.net>\n      Yuriy M. Kaminskiy <yumkam@gmail.com>\n      Yuriy Nazarov <nazarov.yuriy.pavlovich@gmail.com>\n      Yu Zhiguo <yuzg@cn.fujitsu.com>\n      Zachary Catlin <z@zc.is>\n      Zac Medico <zmedico@gentoo.org>\n      Zane van Iperen <zane@zanevaniperen.com>\n      Zbigniew Jędrzejewski-Szmek <zbyszek@in.waw.pl>\n      Zdenek Behan <rain@matfyz.cz>\n      Zeeshan Ali (Khattak) <zeeshanak@gnome.org>\n      zeyun chen <chenzeyun.zju@gmail.com>\n      zhanchengbin <zhanchengbin1@huawei.com>\n      zhenwei pi <pizhenwei@bytedance.com>\n      Zhi Li <lizhi1215@gmail.com>\n      zuoqian <zuoqian2023@gmail.com>\n      Мирослав Николић <miroslavnikolic@rocketmail.com>\n      наб <nabijaczleweli@nabijaczleweli.xyz>\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.0947265625,
          "content": "See version control history.\n\nhttps://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/log\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 10.90234375,
          "content": "AM_CPPFLAGS = \\\n\t-include config.h \\\n\t-I$(top_srcdir)/include \\\n\t-DLOCALEDIR=\\\"$(localedir)\\\" \\\n\t-D_PATH_RUNSTATEDIR=\\\"${runstatedir}\\\" \\\n\t-D_PATH_LOCALSTATEDIR=\\\"${localstatedir}\\\" \\\n\t-D_PATH_SYSCONFSTATICDIR=\\\"${sysconfstaticdir}\\\"\n\nif USE_VENDORDIR\nAM_CPPFLAGS += \\\n\t-D_PATH_VENDORDIR=\\\"${vendordir}\\\"\nendif\n\nif FUZZING_ENGINE\nif !OSS_FUZZ\nAM_CPPFLAGS += \\\n\t-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\nendif\nendif\n\nif WITH_COVERAGE\nAM_CPPFLAGS += \\\n\t-include $(top_srcdir)/include/coverage.h\nendif\n\nAM_CFLAGS = -fsigned-char $(WARN_CFLAGS)\nAM_CXXFLAGS = $(AM_CFLAGS)\nAM_LDFLAGS = $(ASAN_LDFLAGS) $(UBSAN_LDFLAGS) $(FUZZING_ENGINE_LDFLAGS) $(COVERAGE_LDFLAGS)\n\n# Add gettext stuff to the global LDADD for systems with separate libintl\n# library. The LTLIBINTL is generated by AM_GNU_GETTEXT macro.\n#\nLDADD = $(LTLIBINTL)\n\nLIB_FUZZING_ENGINE ?= -fsanitize=fuzzer\n\n# Paths to in-tree libraries (use ul_ prefix to avoid possible collisions) Note\n# that blkid.h, libmount.h, libfdisk.h and libsmartcols.h are generated and\n# stored in build dirs.\n#\nul_libblkid_incdir = $(top_builddir)/libblkid/src\nul_libmount_incdir = $(top_builddir)/libmount/src\nul_libsmartcols_incdir = $(top_builddir)/libsmartcols/src\nul_libfdisk_incdir  = $(top_builddir)/libfdisk/src\nul_liblastlog2_incdir  = $(top_srcdir)/liblastlog2/src\nul_libuuid_incdir  = $(top_srcdir)/libuuid/src\n\nbashcompletiondir = @bashcompletiondir@\n\ndist_noinst_HEADERS =\ndist_noinst_DATA =\nnoinst_PROGRAMS =\nEXTRA_LTLIBRARIES =\nusrbin_exec_PROGRAMS =\nusrsbin_exec_PROGRAMS =\nman_MANS =\npkgconfig_DATA =\nusrlib_exec_LTLIBRARIES =\nsecurelib_exec_LTLIBRARIES =\nbin_PROGRAMS =\nsbin_PROGRAMS =\ndist_usrbin_exec_SCRIPTS =\nsystemdsystemunit_DATA =\ntmpfiles_DATA =\ndist_bashcompletion_DATA =\ncheck_PROGRAMS =\ndist_check_SCRIPTS =\n\nBUILT_SOURCES =\n\nPATHFILES =\nADOCFILES_COMMON =\nMANPAGES =\nMANLINKS =\n\nINSTALL_EXEC_HOOKS =\nUNINSTALL_HOOKS =\nINSTALL_DATA_HOOKS =\nCLEAN_LOCALS =\nCHECK_LOCALS =\n\nEXTRA_DIST =\nCLEANFILES =\n\nSUBDIRS = po\n\nif ENABLE_ASCIIDOC\nif ENABLE_POMAN\nSUBDIRS += po-man\nendif\nendif\n\nRCS_FIND_IGNORE = \\( -name SCCS -o -name BitKeeper -o -name .svn -o \\\n\t\t-name CVS -o -name .pc -o -name .hg -o -name .git \\) -prune -o\n\nACLOCAL_AMFLAGS = -I m4\n\nEXTRA_DIST += \\\n\t.version \\\n\tautogen.sh \\\n\tDocumentation \\\n\tpo/update-potfiles \\\n\tREADME.licensing\n\ninclude tools/Makemodule.am\ninclude include/Makemodule.am\ninclude lib/Makemodule.am\ninclude libuuid/Makemodule.am\ninclude liblastlog2/Makemodule.am\ninclude libblkid/Makemodule.am\ninclude libmount/Makemodule.am\ninclude libsmartcols/Makemodule.am\ninclude libfdisk/Makemodule.am\n\ninclude schedutils/Makemodule.am\ninclude text-utils/Makemodule.am\ninclude term-utils/Makemodule.am\ninclude login-utils/Makemodule.am\ninclude sys-utils/Makemodule.am\ninclude misc-utils/Makemodule.am\ninclude disk-utils/Makemodule.am\ninclude lsfd-cmd/Makemodule.am\n\ninclude pam_lastlog2/Makemodule.am\ninclude bash-completion/Makemodule.am\ninclude man-common/Makemodule.am\n\ninclude Documentation/Makemodule.am\ninclude tests/Makemodule.am\n\n# Meson files\nEXTRA_DIST += \\\n\tmeson.build \\\n\tmeson_options.txt \\\n\ttools/meson-make-manpage-stub.sh \\\n\ttools/meson-make-symlink.sh \\\n\t\\\n\tinclude/meson.build \\\n\tlibblkid/meson.build \\\n\tlibmount/meson.build \\\n\tlibmount/python/meson.build \\\n\tmisc-utils/meson.build \\\n\tlibsmartcols/meson.build \\\n\ttext-utils/meson.build \\\n\tpo/meson.build \\\n\tlib/meson.build \\\n\tlibuuid/meson.build \\\n\tliblastlog2/meson.build \\\n\tsys-utils/meson.build \\\n\tlibfdisk/meson.build \\\n\tterm-utils/meson.build \\\n\tdisk-utils/meson.build \\\n\tlogin-utils/meson.build\n\n# pylibmountexec module must be installed after usrlib_exec libraries,\n# otherwise the libtool relink step will fail to find libmount.la and\n# will try -lmount which is possibly not available.\n# The same for securelib_exec and liblastlog2.la\n#\n# So introduce this dependency rule:\n# install-pylibmountexecLTLIBRARIES: install-usrlib_execLTLIBRARIES\n# install-securelib_execLTLIBRARIES: install-usrlib_execLTLIBRARIES\n@verbatim_extra_dependency@\n\n#\n# Don't rely on configure.ac AC_CONFIG_FILES for install paths.\n#\n# The paths should be expanded at make time rather than configure:\n#  - to support 'make install prefix=/foo DESTDIR=/foo'\n#  - to recursively expands the paths (e.g. AC_CONFIG_FILES expands\n#    '@usrsbin_execdir@' to ${exec_prefix}/sbin')\n#\nedit_cmd = sed \\\n\t -e 's|@prefix[@]|$(prefix)|g' \\\n\t -e 's|@exec_prefix[@]|$(exec_prefix)|g' \\\n\t -e 's|@sysconfdir[@]|$(sysconfdir)|g' \\\n\t -e 's|@datadir[@]|$(datadir)|g' \\\n\t -e 's|@sbindir[@]|$(sbindir)|g' \\\n\t -e 's|@bindir[@]|$(bindir)|g' \\\n\t -e 's|@docdir[@]|$(docdir)|g' \\\n\t -e 's|@includedir[@]|$(includedir)|g' \\\n\t -e 's|@runstatedir[@]|$(runstatedir)|g' \\\n\t -e 's|@localstatedir[@]|$(localstatedir)|g' \\\n\t -e 's|@usrlib_execdir[@]|$(usrlib_execdir)|g' \\\n\t -e 's|@usrbin_execdir[@]|$(usrbin_execdir)|g' \\\n\t -e 's|@usrsbin_execdir[@]|$(usrsbin_execdir)|g' \\\n\t -e 's|@SOCKET_LIBS[@]|$(SOCKET_LIBS)|g' \\\n\t -e 's|@VERSION[@]|$(VERSION)|g' \\\n\t -e 's|@ADJTIME_PATH[@]|$(ADJTIME_PATH)|g' \\\n\t -e 's|@LIBUUID_VERSION[@]|$(LIBUUID_VERSION)|g' \\\n\t -e 's|@LIBLASTLOG2_VERSION[@]|$(LIBLASTLOG2_VERSION)|g' \\\n\t -e 's|@LIBMOUNT_VERSION[@]|$(LIBMOUNT_VERSION)|g' \\\n\t -e 's|@LIBMOUNT_MAJOR_VERSION[@]|$(LIBMOUNT_MAJOR_VERSION)|g' \\\n\t -e 's|@LIBMOUNT_MINOR_VERSION[@]|$(LIBMOUNT_MINOR_VERSION)|g' \\\n\t -e 's|@LIBMOUNT_PATCH_VERSION[@]|$(LIBMOUNT_PATCH_VERSION)|g' \\\n\t -e 's|@LIBSMARTCOLS_VERSION[@]|$(LIBSMARTCOLS_VERSION)|g' \\\n\t -e 's|@LIBFDISK_PC_REQUIRES[@]|$(LIBFDISK_PC_REQUIRES)|g' \\\n\t -e 's|@LIBFDISK_VERSION[@]|$(LIBFDISK_VERSION)|g' \\\n\t -e 's|@LIBFDISK_MAJOR_VERSION[@]|$(LIBFDISK_MAJOR_VERSION)|g' \\\n\t -e 's|@LIBFDISK_MINOR_VERSION[@]|$(LIBFDISK_MINOR_VERSION)|g' \\\n\t -e 's|@LIBFDISK_PATCH_VERSION[@]|$(LIBFDISK_PATCH_VERSION)|g' \\\n\t -e 's|@LIBBLKID_VERSION[@]|$(LIBBLKID_VERSION)|g'\n\nif HAVE_SELINUX\nedit_cmd += -e 's|@LIBSELINUX[@]|libselinux|g'\nelse\nedit_cmd += -e 's|@LIBSELINUX[@]||g'\nendif\n\nif HAVE_CRYPTSETUP\nif CRYPTSETUP_VIA_DLOPEN\nedit_cmd += -e 's|@LIBCRYPTSETUP[@]||g'\nedit_cmd += -e 's|@LIBDL[@]|-ldl|g'\nelse\nedit_cmd += -e 's|@LIBCRYPTSETUP[@]|libcryptsetup|g'\nedit_cmd += -e 's|@LIBDL[@]||g'\nendif\nelse\nedit_cmd += -e 's|@LIBCRYPTSETUP[@]||g'\nedit_cmd += -e 's|@LIBDL[@]||g'\nendif\n\nif USE_VENDORDIR\nedit_cmd += -e 's|@vendordir[@]|$(vendordir)|g'\nelse\nedit_cmd += -e 's|@vendordir[@]||g'\nendif\n\nCLEANFILES += $(PATHFILES) $(EXTRA_LTLIBRARIES)\nEXTRA_DIST += $(PATHFILES:=.in)\n\n$(PATHFILES): Makefile\n\t@ rm -f $@ $@.tmp\n\t$(AM_V_at) $(MKDIR_P) $$(dirname $@)\n\t$(AM_V_GEN) srcdir=''; \\\n\t\ttest -f ./$@.in || srcdir=$(srcdir)/; \\\n\t\t$(edit_cmd) $${srcdir}$@.in >$@.tmp\n\t@ mv $@.tmp $@\n\n\nif ENABLE_ASCIIDOC\nEXTRA_DIST += $(ADOCFILES_COMMON) $(MANPAGES) $(MANLINKS)\nman_MANS += $(MANPAGES) $(MANLINKS)\n\n$(MANPAGES): $(ADOCFILES_COMMON)\n\nasciidoc_man_cmd = $(ASCIIDOCTOR) \\\n\t-b manpage \\\n\t-a 'release-version=$(VERSION)' \\\n\t-a 'package-docdir=$(docdir)' \\\n\t-a 'VERSION=$(VERSION)' \\\n\t-a 'ADJTIME_PATH=$(ADJTIME_PATH)' \\\n\t--load-path '$(abs_srcdir)/tools' \\\n\t--require asciidoctor-includetracker\n\nif HAVE_ASCIIDOCTOR_FAILURE_LEVEL\nasciidoc_man_cmd += --failure-level ERROR\nendif\n\nSUFFIXES = .1.adoc .3.adoc .5.adoc .8.adoc .1 .3 .5 .8\n.1.adoc.1 .3.adoc.3 .5.adoc.5 .8.adoc.8:\n\t$(AM_V_GEN) test -f ./$@ || \\\n\t\t$(MKDIR_P) $$(dirname $@) && \\\n\t\t$(asciidoc_man_cmd) --base-dir=$(abs_srcdir) \\\n\t\t\t\t    --destination-dir $(abs_builddir)/$$(dirname $@) $<\n\n-include \\\n\t$(abs_builddir)/**.1.deps \\\n\t$(abs_builddir)/**.3.deps \\\n\t$(abs_builddir)/**.5.deps \\\n\t$(abs_builddir)/**.8.deps\n\n$(MANLINKS): $(MANPAGES)\ngen-man: $(man_MANS)\n\n# Standard \"make\" follows BUILD_* macros from ./configure, and in this case, it\n# ignores man pages for disabled tools, but for distribution tarball, we need\n# to generate all man-pages (to avoid dependence on asciidoc). [kzak Jan-2022]\ngen-man-dist:\n\t@list=`find -name *.adoc -not -path \"*/man-common/*\" -not -path \"*/po-man/*\" | sed -e 's/\\.adoc//g'`; \\\n\tmissing=`for p in $$list; do test -f $$p || echo $$p; done`; \\\n\tif test -n \"$$missing\"; then \\\n\t\t$(MAKE) $(AM_MAKEFLAGS) $$missing; \\\n\tfi;\n\n\n# !ENABLE_ASCIIDOC\nelse\n\nif HAVE_MANPAGES\nEXTRA_DIST += $(ADOCFILES_COMMON) $(MANPAGES) $(MANLINKS)\nman_MANS += $(MANPAGES) $(MANLINKS)\nendif\n\ngen-man:\ngen-man-dist:\nendif\n\n\n# Arrange so that .tarball-version appears only in the distribution\n# tarball, and never in a checked-out repository.\ndist-hook: gen-man-dist\n\techo $(VERSION) > $(distdir)/.tarball-version\n# Set ChangeLog tag reference.\n\tsed -i \"s!log!log?h=v$(VERSION)!\" $(distdir)/ChangeLog\n\ndistclean-local:\n\t-find . -name \\*~ -o -name \\*.orig -o -name \\*.rej | xargs rm -f\n\trm -rf autom4te.cache\n\n\ncheckincludes:\n\t@find * $(RCS_FIND_IGNORE) \\\n\t\t-name '*.[hcS]' -type f -print | sort -u \\\n\t\t| xargs $(top_srcdir)/tools/checkincludes.pl\n\ncheckconfig:\n\t@find * $(RCS_FIND_IGNORE) \\\n\t\t-name '*.[hcS]' -type f -print | sort -u \\\n\t\t| xargs $(top_srcdir)/tools/checkconfig.sh $(top_srcdir)\n\ncheckmans:\n\t@$(top_srcdir)/tools/checkadoc-missing.sh\n\t@$(top_srcdir)/tools/checkadoc-repeat.sh\n\ncheckxalloc:\n\t@ $(top_srcdir)/tools/checkxalloc.sh\n\ncheckdecl:\n\t@ $(top_srcdir)/tools/checkdecl.sh\n\ncheckcompletion:\n\t@ $(top_srcdir)/tools/checkcompletion.sh $(top_srcdir)\n\ncheckusage:\n\t@ $(top_srcdir)/tools/checkusage.sh \\\n\t\t$(bin_PROGRAMS) $(sbin_PROGRAMS) \\\n\t\t$(usrbin_exec_PROGRAMS) $(usrsbin_exec_PROGRAMS)\nchecklibdoc:\n\t@ $(top_srcdir)/tools/checklibdocs.sh \\\n\t\t$(top_srcdir)/libmount/src/libmount.sym \\\n\t\t$(top_srcdir)/libmount/docs/libmount-sections.txt\n\t@ $(top_srcdir)/tools/checklibdocs.sh \\\n\t\t$(top_srcdir)/libfdisk/src/libfdisk.sym \\\n\t\t$(top_srcdir)/libfdisk/docs/libfdisk-sections.txt\n\t@ $(top_srcdir)/tools/checklibdocs.sh \\\n\t\t$(top_srcdir)/libsmartcols/src/libsmartcols.sym \\\n\t\t$(top_srcdir)/libsmartcols/docs/libsmartcols-sections.txt\n\t@ $(top_srcdir)/tools/checklibdocs.sh \\\n\t\t$(top_srcdir)/libblkid/src/libblkid.sym \\\n\t\t$(top_srcdir)/libblkid/docs/libblkid-sections.txt\n\nDISTCHECK_CONFIGURE_FLAGS = \\\n\t--disable-makeinstall-chown \\\n\t--disable-use-tty-group \\\n\t--disable-silent-rules \\\n\t--disable-rpath \\\n\t--enable-all-programs \\\n\t--enable-gtk-doc \\\n\t--with-python \\\n\t--with-bashcompletiondir=$$dc_install_base/$(bashcompletiondir) \\\n\t--with-systemdsystemunitdir=$$dc_install_base/$(systemdsystemunitdir) \\\n\t--with-tmpfilesdir=$$dc_install_base/$(tmpfilesdir)\n\nBUILT_SOURCES += .version\n.version:\n\techo $(VERSION) > $@-t && mv $@-t $@\n\nCHANGELOG_FILE = v$(VERSION)-ChangeLog\n\n$(CHANGELOG_FILE):\n\t@ if test \"x$$PREVIOUS_VERSION\" == \"x\"; then \\\n\t\techo \"Usage make changelog PREVIOUS_VERSION=<version>\"; \\\n\t\texit 1; \\\n\tfi\n\t@ echo \"Changes between v$(PREVIOUS_VERSION) and v$(VERSION)\" > $(CHANGELOG_FILE)\n\t@ echo \"--------------------------------------------\" >> $(CHANGELOG_FILE)\n\t@ echo >> $(CHANGELOG_FILE)\n\t$(AM_V_GEN) git log --stat v$(PREVIOUS_VERSION)..HEAD >> $(CHANGELOG_FILE)\n#\n#\n# smatch scan -- smatch and cgcc are expected in $PATH\n#\nchecksmatch:\n\t$(MAKE) CHECK=\"smatch --data=$(abs_top_srcdir)/tools/smatch-data\" CC=cgcc\n\ncheck-programs: $(check_PROGRAMS)\n\nchangelog: $(CHANGELOG_FILE)\n\ninstall-exec-hook: $(INSTALL_EXEC_HOOKS)\n\nuninstall-hook: $(UNINSTALL_HOOKS)\n\ninstall-data-hook: $(INSTALL_DATA_HOOKS)\n\nclean-local: $(CLEAN_LOCALS)\n\ncheck-local: $(CHECK_LOCALS)\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 76.283203125,
          "content": "util-linux 2.40: Jan 24 2024\n* see Documentation/releases/v2.40-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.40/v2.40-ChangeLog\n\nutil-linux 2.39: May 17 2023\n* see Documentation/releases/v2.39-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.39/v2.39-ChangeLog\n\nutil-linux 2.39-rc2: Apr 19 2023\n* see Documentation/releases/v2.39-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.39/v2.39-rc3-ChangeLog\n\nutil-linux 2.39-rc2: Apr 04 2023\n* see Documentation/releases/v2.39-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.39/v2.39-rc2-ChangeLog\n\nutil-linux 2.39-rc1: Mar 10 2023\n* see Documentation/releases/v2.39-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.39/v2.39-rc1-ChangeLog\n\nutil-linux 2.38: Mar 28 2022\n* see Documentation/releases/v2.38-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.38/v2.38-ChangeLog\n\nutil-linux 2.38-rc4: Mar 16 2022\n* see Documentation/releases/v2.38-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.38/v2.38-rc4-ChangeLog\n\nutil-linux 2.38-rc3: Mar 15 2022\n* see Documentation/releases/v2.38-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.38/v2.38-rc3-ChangeLog\n\nutil-linux 2.38-rc2: Mar 04 2022\n* see Documentation/releases/v2.38-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.38/v2.38-rc2-ChangeLog\n\nutil-linux 2.38-rc1: Jan 31 2022\n* see Documentation/releases/v2.38-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.38/v2.38-rc1-ChangeLog\n\nutil-linux 2.37: Jun 1 2021\n* see Documentation/releases/v2.37-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.37/v2.37-ChangeLog\n\nutil-linux 2.37-rc2: May 10 2021\n* see Documentation/releases/v2.37-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.37/v2.37-rc2-ChangeLog\n\nutil-linux 2.37-rc1: Apr 12 2021\n* see Documentation/releases/v2.37-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.37/v2.37-rc1-ChangeLog\n\nutil-linux 2.36: Jul 23 2020\n* see Documentation/releases/v2.36-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.36/v2.36-ChangeLog\n\nutil-linux 2.36-rc2: Jul 09 2020\n* see Documentation/releases/v2.36-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.36/v2.36-rc2-ChangeLog\n\nutil-linux 2.36-rc1: Jun 09 2020\n* see Documentation/releases/v2.36-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.36/v2.36-rc1-ChangeLog\n\nutil-linux 2.35: Jan 21 2020\n* see Documentation/releases/v2.35-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.35/v2.35-ChangeLog\n\nutil-linux 2.35-rc2: Jan 8 2020\n* see Documentation/releases/v2.35-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.35/v2.35-rc2-ChangeLog\n\nutil-linux 2.35-rc1: Dec 11 2019\n* see Documentation/releases/v2.35-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.35/v2.35-rc1-ChangeLog\n\nutil-linux 2.34: Jun 14 2019\n* see Documentation/releases/v2.34-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.34/v2.34-ChangeLog\n\nutil-linux 2.34-rc2: May 30 2019\n* see Documentation/releases/v2.34-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.34/v2.34-rc2-ChangeLog\n\nutil-linux 2.34-rc1: Apr 30 2019\n* see Documentation/releases/v2.34-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.34/v2.34-rc1-ChangeLog\n\nutil-linux 2.33: Nov 6 2018\n* see Documentation/releases/v2.33-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.33/v2.33-ChangeLog\n\nutil-linux 2.33-rc2: Oct 19 2018\n* see Documentation/releases/v2.33-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.33/v2.33-rc2-ChangeLog\n\nutil-linux 2.33-rc1: Sep 25 2018\n* see Documentation/releases/v2.33-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.33/v2.33-rc1-ChangeLog\n\nutil-linux 2.32: Mar 21 2018\n* see Documentation/releases/v2.32-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.32/v2.32-ChangeLog\n\nutil-linux 2.32-rc2: Mar 01 2018\n* see Documentation/releases/v2.32-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.32/v2.32-rc2-ChangeLog\n\nutil-linux 2.32-rc1: Feb 13 2018\n* see Documentation/releases/v2.32-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.32/v2.32-rc1-ChangeLog\n\nutil-linux 2.31: Oct 19 2017\n* see Documentation/releases/v2.31-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.31/v2.31-ChangeLog\n\nutil-linux 2.31-rc2: Oct 03 2017\n* see Documentation/releases/v2.31-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.31/v2.31-rc2-ChangeLog\n\nutil-linux 2.31-rc1: Sep 22 2017\n* see Documentation/releases/v2.31-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.31/v2.31-rc1-ChangeLog\n\nutil-linux 2.30: Jun 02 2017\n* see Documentation/releases/v2.30-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.30/v2.30-ChangeLog\n\nutil-linux 2.30-rc2: May 12 2017\n* see Documentation/releases/v2.30-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.30/v2.30-rc2-ChangeLog\n\nutil-linux 2.30-rc1: May 12 2017\n* see Documentation/releases/v2.30-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.30/v2.30-rc1-ChangeLog\n\nutil-linux 2.29: Nov 8 2016\n* see Documentation/releases/v2.29-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.29/v2.29-ChangeLog\n\nutil-linux 2.29-rc2: Oct 19 2016\n* see Documentation/releases/v2.29-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.29/v2.29-rc2-ChangeLog\n\nutil-linux 2.29-rc1: Sep 30 2016\n* see Documentation/releases/v2.29-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.29/v2.29-rc1-ChangeLog\n\nutil-linux 2.28: Apr 12 2016\n* see Documentation/releases/v2.28-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.28/v2.28-ChangeLog\n\nutil-linux 2.28-rc2: Mar 29 2016\n* see Documentation/releases/v2.28-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.28/v2.28-rc2-ChangeLog\n\nutil-linux 2.28-rc1: Mar 11 2016\n* see Documentation/releases/v2.28-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.28/v2.28-rc1-ChangeLog\n\nutil-linux 2.27: Sep 07 2015\n* see Documentation/releases/v2.27-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.27/v2.27-ChangeLog\n\nutil-linux 2.27-rc2: Aug 24 2015\n* see Documentation/releases/v2.27-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.27/v2.27-rc2-ChangeLog\n\nutil-linux 2.27-rc1: Jul 31 2015\n* see Documentation/releases/v2.27-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.27/v2.27-rc1-ChangeLog\n\nutil-linux 2.26: Feb 19 2015\n* see Documentation/releases/v2.26-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.26/v2.26-ChangeLog\n\nutil-linux 2.26-rc2: Feb 4 2015\n* see Documentation/releases/v2.26-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.26/v2.26-rc2-ChangeLog\n\nutil-linux 2.26-rc1: Jan 14 2015\n* see Documentation/releases/v2.26-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.26/v2.26-rc1-ChangeLog\n\nutil-linux 2.25: Jul 22 2014\n* see Documentation/releases/v2.25-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.25/v2.25-ChangeLog\n\nutil-linux 2.25-rc2: Jul 2 2014\n* see Documentation/releases/v2.25-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.25/v2.25-rc2-ChangeLog\n\nutil-linux 2.25-rc1: Jun 18 2014\n* see Documentation/releases/v2.25-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.25/v2.25-rc1-ChangeLog\n\nutil-linux 2.24: Oct 21 2013\n* see Documentation/releases/v2.24-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.24/v2.24-ChangeLog\n\nutil-linux 2.24-rc2: Oct 11 2013\n* see Documentation/releases/v2.24-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.24/v2.24-rc2-ChangeLog\n\nutil-linux 2.24-rc1: Sep 27 2013\n* see Documentation/releases/v2.24-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.24/v2.24-rc1-ChangeLog\n\nutil-linux 2.23: Apr 25 2013\n* see Documentation/releases/v2.23-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.23/v2.23-ChangeLog\n\nutil-linux 2.23-rc2: Apr 10 2013\n* see Documentation/releases/v2.23-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.23/v2.23-rc2-ChangeLog\n\nutil-linux 2.23-rc1: Mar 22 2013\n* see Documentation/releases/v2.23-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.23/v2.23-rc1-ChangeLog\n\nutil-linux 2.22: Sep 04 2012\n* see Documentation/releases/v2.22-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.22/v2.22-ChangeLog\n\nutil-linux 2.22-rc2: Aug 15 2012\n* see Documentation/releases/v2.22-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.22/v2.22-rc2-ChangeLog\n\nutil-linux 2.22-rc1: Jul 27 2012\n* see Documentation/releases/v2.22-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.22/v2.22-rc1-ChangeLog\n\nutil-linux 2.21: Feb 24 2012\n* see Documentation/releases/v2.21-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.21/v2.21-ChangeLog\n\nutil-linux 2.21-rc2: Feb 06 2012\n* see Documentation/releases/v2.21-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.21/v2.21-rc2-ChangeLog\n\nutil-linux 2.21-rc1: Jan 18 2012\n* see Documentation/releases/v2.21-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.21/v2.21-rc1-ChangeLog\n\nutil-linux 2.20: Aug 29 2011\n* see Documentation/releases/v2.20-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.20/v2.20-ChangeLog\n\nutil-linux 2.20-rc2: Aug 17 2011\n* see Documentation/releases/v2.20-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.20/v2.20-rc2-ChangeLog\n\nutil-linux 2.20-rc1: Jul 29 2011\n* see Documentation/releases/v2.20-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.20/v2.20-rc1-ChangeLog\n\nutil-linux 2.19: Feb 10 2011\n* see Documentation/releases/v2.19-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.19/v2.19-ChangeLog\n\nutil-linux 2.19-rc3: Jan 25 2011\n* see Documentation/releases/v2.19-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.19/v2.19-rc3-ChangeLog\n\nutil-linux 2.19-rc2: Jan 25 2011\n* see Documentation/releases/v2.19-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.19/v2.19-rc2-ChangeLog\n\nutil-linux 2.19-rc1: Jan 05 2011\n* see Documentation/releases/v2.19-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.19/v2.19-rc1-ChangeLog\n\nutil-linux-ng 2.18: Jun 30 2010\n* see Documentation/releases/v2.18-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.18/v2.18-ChangeLog\n\nutil-linux-ng 2.18-rc2: Jun 18 2010\n* see Documentation/releases/v2.18-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.18/v2.18-rc2-ChangeLog\n\nutil-linux-ng 2.18-rc1: Jun 7 2010\n* see Documentation/releases/v2.18-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.18/v2.18-rc1-ChangeLog\n\nutil-linux-ng 2.17: Jan 8 2010\n* see Documentation/releases/v2.17-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.17/v2.17-ChangeLog\n\nutil-linux-ng 2.17-rc3: Dec 10 2009\n* see Documentation/releases/v2.17-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.17/v2.17-rc3-ChangeLog\n\nutil-linux-ng 2.17-rc2: Dec 9 2009\n* see Documentation/releases/v2.17-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.17/v2.17-rc2-ChangeLog\n\nutil-linux-ng 2.17-rc1: Nov 20 2009\n* see Documentation/releases/v2.17-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.17/v2.17-rc1-ChangeLog\n\nutil-linux-ng 2.16: Jul  2009\n* see Documentation/releases/v2.16-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.16/v2.16-ChangeLog\n\nutil-linux-ng 2.16-rc2: Jul 2 2009\n* see Documentation/releases/v2.16-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.16/v2.16-rc2-ChangeLog\n\nutil-linux-ng 2.16-rc1: Jun 28 2009\n* see Documentation/releases/v2.16-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.16/v2.16-rc1-ChangeLog\n\nutil-linux-ng 2.15: May 5 2009\n* see Documentation/releases/v2.15-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.15/v2.15-ChangeLog\n\nutil-linux-ng 2.15-rc2: Apr 17 2009\n* see Documentation/releases/v2.15-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.15/v2.15-rc2-ChangeLog\n\nutil-linux-ng 2.15-rc1: Mar 18 2009\n* see Documentation/releases/v2.15-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.15/v2.15-rc1-ChangeLog\n\nutil-linux-ng 2.14: Jun 9 2008\n* see Documentation/releases/v2.14-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.14/v2.14-ChangeLog\n\nutil-linux-ng 2.14-rc3: May 19 2008\n* see Documentation/releases/v2.14-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.14/v2.14-rc3-ChangeLog\n\nutil-linux-ng 2.14-rc2: Apr 28 2008\n* see Documentation/releases/v2.14-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.14/v2.14-rc2-ChangeLog\n\nutil-linux-ng 2.14-rc1: Apr 16 2008\n* see Documentation/releases/v2.14-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.14/v2.14-rc1-ChangeLog\n\nutil-linux-ng 2.13: Aug 28 2007\n* see Documentation/releases/v2.13-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.13/v2.13-ChangeLog\n\nutil-linux-ng 2.13-rc3: Aug 8 2007\n* see Documentation/releases/v2.13-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.13/v2.13-rc3-ChangeLog\n\nutil-linux-ng 2.13-rc2: Jul 17 2007\n* see Documentation/releases/v2.13-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.13/v2.13-rc2-ChangeLog\n\nutil-linux-ng 2.13-rc1: Jul 4 2007\n* see Documentation/releases/v2.13-ReleaseNotes or the complete changelog at\n  https://www.kernel.org/pub/linux/utils/util-linux/v2.13/v2.13-rc1-ChangeLog\n\nutil-linux 2.13-pre7\n\n* mount: default to cifs instead of smbfs for sources\n         starting with // (Lars Mueller)\n* flock: documentation updates (H. Peter Anvin)\n* new translation: id\n* updated translations: de, it, sl, uk\n\nutil-linux 2.13-pre6\n\n* getopt: updated to 1.1.4\n* replaced all *llseek variants with lseek\n* misc build system, code and docs cleanups and fixes\n* updated translations: fr, it\n\nutil-linux 2.13-pre5\n\n* {fsck,mkfs}.cramfs: updated to cramfs-1.1\n* {fsck,mkfs}.cramfs: removed PAGE_CACHE_SIZE usage\n* umount: fix \"umount -n -r\" (Derick Swanepoel)\n* misc build system and code cleanups and fixes\n* updated translation: ca\n\nutil-linux 2.13-pre4\n\n* don't build fdisk on m68k (Mike Frysinger)\n* misc build system and documentation fixes\n* removed program: clear\n\nutil-linux 2.13-pre3\n\n* misc build system fixes\n* cfdisk: fix a segfault with ReiserFS partitions\n* umount: disallow -r option for non-root users\n* updated translations: da, fr, it, nl, ru, sl, tr\n\nutil-linux 2.13-pre2\n\n* flock: replaced with flock-2.0.2 by H. Peter Anvin\n* misc build system fixes, libtool is no longer used\n* misc code fixes\n* updated translations: ca, fi, fr, nl, ru, tr\n\nutil-linux 2.13-pre1\n\n* use GNU autoconf/automake/libtool for building\n* added schedutils\n* removed support for curses implementations other than ncurses\n* removed programs: arch, passwd, rescuept, setfdprm, sln\n* removed mkminix-0.1/\n* misc fixes and documentation updates\n* new translation: vi\n* updated translations: ca, de, fi, fr, it, nl, ru, tr\n\nutil-linux 2.12q\n\n* updated translation: nl\n\nutil-linux 2.12q-pre2\n\n* sfdisk: document -G option in --help output\n* updated translations: ca, et, fr\n\nutil-linux 2.12q-pre1\n\n* new maintainer\n* sfdisk: add -G option (Andries Brouwer)\n* updated translations: de, es, ru, sv, tr\n\nutil-linux 2.12p\n\n* cfdisk: fix number of new partition when partitions not in disk order\n* fdisk: fix Sun label handling in sector mode\n* mkfs: never truncate filename (not that that ever happened)\n* more: fix redraw flaw\n\nutil-linux 2.12n,o\n\n* lomount: revert patch from 2.12j\n* lptune.8: -T option is obsolete\n* mkswap, mkswap.8, swapon: support labels\n  (use HAVE_BLKID=no as long as the blkid library doesn't support this)\n* umount: allow user unmounting repeatedly mounted nfs mounts\n\nutil-linux 2.12m\n\n* cfdisk: recognize JFS, support reiserfs labels (flavio.stanchina@tin.it)\n* mount: fix option parsing bug\n* mount.8: several updates\n* swapon.8: document -v option\n\nutil-linux 2.12l\n\n* Makefile: remove cat-id-tbl.c upon make clean\n* fdisk: fixed a bug that would cause a non-update of a sun disklabel\n* fdisk: use sectorsize instead of 512 for SGI (Eric Y. Theriault)\n* fdisk: use __attribute__((packed)) for alpha, ARM: avoid unaligned accesses\n* hwclock: actually use HAVE_tm_gmtoff\n* swapon: fix priority handling\n* umount: refuse to unmount an empty string\n\nutil-linux 2.12k\n\n* cfdisk: fixed a signed character bug causing problems for Spanish users\n* configure, MCONFIG: detect gcc 3.4.0 and use -mtune option (Matthew Burgess)\n* configure: do not run ./conftest (for cross compilation) (NIIBE Yutaka)\n* fsck.cramfs: try to get correct PAGE_CACHE_SIZE\n* losetup: try to give better error messages\n* readprofile: default map file is /boot/System.map\n* rdev.8: added historical info on ramdisk\n* New French, Spanish, Swedish and Turkish messages\n\nutil-linux 2.12j\n\n* cal: highlight today (Pádraig Brady)\n* lomount: stop reading passwd at NUL, fix lo_encrypt key_size (Wolfram Kleff)\n* losetup: add -f option to find an unused loop device\n  (Alexander Wigen, Remco van Mook)\n* more: code cleanup (Joachim Henke)\n* mount: add \"group\" mount option (Martin Dickopp)\n* sfdisk: fix 2.6.8 BLKRRPART ioctl damage (Eric Lammerts)\n* swapon: let swapon -a skip the swapfiles marked \"noauto\" (Dale R. Worley)\n* umount: fix problem with empty mtab (Bryan Kadzban)\n* umount: use special umount program if it exists (Ram Pai)\n* New Danish and French messages\n\nutil-linux 2.12i\n\n* MCONFIG: fix build conditions\n* chfn, chsh: add error checking\n* cytune: use local header cyclades.h\n* fdisk: fix default SGI volume header size (Eric Sandeen)\n* fstab.c: use strsignal() instead of sys_siglist[]\n* hwclock: use <sys/io.h> when available on i386\n* hwclock: don't try KDGHWCLK on archs other than __m68k__\n* sfdisk: correct typo in __attribute__used nonsense\n* sfdisk: use PACKED on __arm__ (Jeroen Dobbelaere)\n* sfdisk: fix warning printout\n\nutil-linux 2.12e,f,g,h\n\n* cfdisk: avoid crash if no partition table\n* elvtune: tell user that this only works on 2.4 kernels\n* lomount: clear passwords after use\n* mount: accept comments (introduced by \\;) in fstab - withdrawn again\n* mount: accept comments (specified by comment=) in fstab\n* mount: support ocfs, ocfs2\n* [u]mount: be more careful with malloc, try to avoid OOM with many mounts\n* sfdisk: __attribute__used nonsense to support gcc 3.4\n* shutdown: do not unmount various virtual filesystems\n\nutil-linux 2.12c,d\n\n* mount.8: added recent ext2 mount options\n* mount: support jfs mount-by-label, improve reiserfs support\n* sfdisk: remove strange \"ends in a digit\" heuristic\n* *fdisk: use common disksize() routine\n\nutil-linux 2.12b\n\n* chsh: improved error message\n* dmesg: ask kernel proper buffer size\n* losetup: handle 64-bit offsets\n* blockdev: also report BLKGETSIZE64 result\n* blockdev, elvtune, fdisk: handle new kernel _IOR,_IOW defines\n* fdisk: remove strange \"ends in a digit\" heuristic\n* fdisk: also list Solaris as possible type for 0x82\n* mount: added --rbind option\n* mount: use blkid, uuid libraries when available\n* mount: support reiserfs mount by label\n* mount: attempt to use the right definition of dev_t in struct loopinfo\n* mount.8: jfs mount options added\n* readprofile: new -s option\n* rename.1: added ref to mmv.1\n* replay: renamed to scriptreplay; correct typos\n* script: do not use locale for time delay floating point number format\n* sfdisk: error messages to stderr\n* New Catalan, Dutch, Finnish, French, German, Spanish, Swedish, Turkish,\n  Ukrainian messages\n\nutil-linux 2.12a\n\n* chfn, chsh, login, vipw: SElinux support\n* fdisk: fix for kernels 2.4.15-2.4.17\n* fdisk: fix when all partitions are in use\n* hwclock: add a timeout when waiting for a clock update (Göran Weinholt)\n* ipcs: compilation fix\n* ipcs: shminfo.shmall gives pages\n* login: use getutline() instead of getutid()\n* login: fix for 64-bit time_t\n* mount: efs support\n* partx: bigendian fix\n* readprofile: support for 64-bit addresses\n* setterm: fix klogctl error message (Joern Heissler)\n* setterm.1: clarification\n* sfdisk: fix check for is_ide_cdrom_or_tape\n* umount: skip proc, devfs, devpts on umount -a\n\nutil-linux 2.12\n\n* losetup: cryptoloop support\n* losetup: -p option specifies fd for passphrase\n* fdisk: sgi layout fix\n* mount: -p option specifies fd for passphrase\n* mount: recognize some PCDOS floppies\n* umount: in \"umount name\", first try to interpret \"name\" as a mount point\n\nutil-linux 2.12pre\n\n* Catalan messages (Antoni Bella Pérez)\n* Danish messages (Claus Hindsgaul)\n* Dutch messages (Taco Witte)\n* Finnish messages (Lauri Nurmi)\n* French messages (Michel Robitaille)\n* German messages (Michael Piefel)\n* Slovenian messages (Primož Peterlin)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* cfdisk: localize the Y/N answer, improve printing localized messages\n* cfdisk: make various variables long long - some disks are close to 2 TB\n* cfdisk: use BLKGETSIZE64\n* fdisk: make various variables unsigned to lengthen the life of 32-bit vars\n* fdisk: some sgi fixes (Phillip Kesling)\n* fdisk: k=1000, K=1024\n* fdisk: removed last occurrences of HDIO_REQ\n* fdisk: use BLKGETSIZE64\n* hwclock: fix rtc test (Heiko Zuerker)\n* login: set a timeout on printing the timeout message (Robert Ambrose)\n* md5: x86_64 fix (mmj)\n* more: POSIX fixes\n* mount: do not supply MS_MGC_VAL when there are conflicting flags\n* mount: ncp and smb are called smbfs and ncpfs - global change\n* mount: add support for xvm mount by label (Eric Sandeen)\n* mount: correct hfs magic recognition\n* mount: keep original umask - it influences the mount call (mmj)\n* raw.8: documented unbinding of raw devices\n* readprofile: fixed off-by eight error (Werner Almesberger)\n* script: add -c option (Wayne Davison)\n* sfdisk.8: added an example of partitioning with logical partitions\n* sfdisk: only add a AA55 signature for DOS-type partition tables\n* tailf: new (Rik Faith)\n\nutil-linux 2.11z\n\n* Catalan messages (Antoni Bella Pérez)\n* Danish messages (Claus Hindsgaul)\n* Dutch messages (Taco Witte)\n* Finnish messages (Lauri Nurmi)\n* French messages (Michel Robitaille) - HURRAY!\n* German messages (Michael Piefel)\n* Slovenian messages (Primož Peterlin)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* getopt: replaced getopt-1.1.2 by getopt-1.1.3 (Frodo Looijaard)\n* mkcramfs: change default blocksize for ia64 and alpha\n* more.help: removed (it is built-in now, and translated)\n* mount: add -i option (inhibit calling external mount programs)\n* mount: change default: do resolve symlinks\n* readprofile: look for System.map also in /boot/System.map-`uname -r` (mmj)\n* sfdisk: also translate \"start\" and \"end\"; s/MB/MiB/\n\nutil-linux 2.11y\n\n* Danish messages (Claus Hindsgaul)\n* Finnish messages (Lauri Nurmi)\n* German messages (Michael Piefel)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* cfdisk: improve escape seq recognition when compiled with slang\n* fdisk: decimal units\n* hwclock/rtc.c: minor cleanup (Joachim Henke)\n* ipcs: compilation fix\n* more: kill external help file (Joachim Henke)\n* mount: fix LABEL= handling for user umount\n* mount: don't abort on read error on photocds (György Kövesdi)\n* mount.8: add dmask and fmask vfat mount options\n* pg: compilation fix (Joachim Henke)\n* script: localized time strings (Göran Uddeborg)\n* setterm: accept devfs name (Joachim Henke)\n* simpleinit: security: refuse initctl_fd if setting FD_CLOEXEC fails\n* umount: allow user umount after mount by label or uuid\n\nutil-linux 2.11x\n\n* Danish messages (Claus Hindsgaul)\n* Dutch messages (Taco Witte)\n* Finnish messages (Lauri Nurmi)\n* German messages (Michael Piefel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* cfdisk: correct error printout\n* fdisk: allow addition of a new partition when logicals all used\n  but primary free\n* hwclock: detect systime jumps backward during setting hwclock\n* mkfs.cramfs: do not mmap all files simultaneously\n* mkfs.cramfs: make blocksize settable\n* mkfs.minix: correct error printout\n* mkswap.8: now max 32 swapspaces\n* mount: new --rbind flag, for recursive loopback mounts\n* mount, umount: new -O option (Michael K. Johnson)\n* mount.8: -O and win95 options documented\n* setpwnam.c: open temp pw file with O_EXCL\n* simpleinit: fix for \"spawn too fast\" (Denis Vlasenko)\n* swapon: new -e option (Erik Troan)\n\nutil-linux 2.11w\n\n* cfdisk, fdisk: allow slightly larger disk sizes\n* fdisk: Makefile: also for m68 (sun3) (Kaj-Michael Lang)\n* fdisk: allow to use the last partial cylinder, change display format\n* fdisk: do not ask partition number in case there is only one choice\n* fdisk: new sunlabel fix\n* login: fix possible local root exploit (Wojciech Purczyński)\n* more: bigendian fix\n\nutil-linux 2.11v\n\n* Catalan messages (Antoni Bella Pérez)\n* Finnish messages (Lauri Nurmi)\n* Very few Russian messages (panivan@yandex.ru)\n* Slovenian messages (Primož Peterlin)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* fdisk: add -C, -H, -S command line options\n* fdisk: allow changing type 0\n* mkswap: enable use of > 2GB swapspace\n* more: translation fix\n* mount: set umask (Sebastian Krahmer)\n* mount: test both le and be version of cramfs magic (Olaf Hering)\n* mount: recognize Oracle magic\n* pg: use fseeko64 and ftello64 when available\n\nutil-linux 2.11u\n\n* Danish messages (Claus Hindsgaul)\n* German messages (Michael Piefel)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* configure: for fsck.cramfs, mkfs.cramfs: add test for libz\n* text-utils/Makefile: pg fix (Toomas Rosin)\n* po/Makefile: typo fix (Silvan Minghetti)\n* agetty: use same test as login does to find utmp entry\n* fdisk: fix for fdisk on empty disk (Michael D. Black)\n* hwclock: compilation fix on alpha\n* mount: add mount by label for jfs (Christoph Hellwig)\n* mount: add mount by label for evms (Luciano Chavez)\n* mount: allow regular files when guessing (Michal Svec)\n* partx/gpt.c: fix size computation (Matt Domsch)\n* readprofile: new option -b (David Mosberger)\n* umount: don't umount devfs upon umount -a (David Gilbert)\n\nutil-linux 2.11t\n\n* fdformat: remove test on major\n* fsck.cramfs: added NLS\n* fdisk: fix device names with sundisklabels under devfs (Kaj-Michael Lang)\n* fdisk: minor polishing\n* hwclock: also handle ENOTTY ioctl return (Maciej W. Rozycki)\n* hwclock: minor polishing\n* ipcrm.8: minor polishing\n* mkfs.cramfs: added NLS\n* mkfs.cramfs: added -v (verbose) option, and made default silent\n* mount: patch for make -j (RedHat)\n* swapoff: minor polishing\n\nutil-linux 2.11s\n\n* Estonian messages (Meelis Roos)\n* French messages: some minor corrections\n* German messages (Michael Piefel)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* MCONFIG: allow \"make DISABLE_NLS=yes <target>\" (Peter Breitenlohner)\n* configure: don't run ./conftest - better for cross-compilation (Magnus Damm)\n* fdisk: fixes for disks with OSF/1 label\n* fsck.cramfs: new (from kernel source)\n* hwclock: improved adjtime handling (James P. Rutledge)\n* hwclock: remove shhopts stuff\n* ipcs: remove unused heading (Michael Kerrisk)\n* line: replace by C version - the sh version was broken (Gunnar Ritter)\n* login: default root path: added /usr/local/[s]bin (RedHat)\n* mkfs.cramfs: new (from kernel source)\n* mount: when no type is known, assume that prefix // implies samba (RedHat)\n* mount -a: avoid stat on devices that have noauto option (Jeroen Mostert)\n* mount by label: ignore RAID partitions (RedHat)\n* [u]mount: fstab.c fix (ejb@ql.org)\n* pg: new (Gunnar Ritter)\n* sfdisk: small BSD partition fix\n* swapoff -a: also do swapoff on all files found in /proc/swaps\n* swapon -a: skip files already found in /proc/swaps\n\nutil-linux 2.11r\n\n* Estonian messages (Meelis Roos)\n* German messages (Michael Piefel)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* MCONFIG: move $(CFLAGS) to the end to allow overrides (Kevin P. Fleming)\n* cal: tiny fix (Mitsuru Chinen)\n* fdisk: avoid <linux/hdreg.h>\n* fdisk: x86_64 patch (Mads Martin Jørgensen)\n* hwclock.8: zoneinfo is now in /usr/share\n* mkswap: report in KiB instead of bytes.\n\nutil-linux 2.11q\n\n* fdisk: geometry improvement\n* login: open tty fix (Denis Vlasenko)\n* more: wide character patches (Mitsuru Chinen)\n* mount: complain on mount-by-label when label is not unique (Matt Copping)\n* partx: add GUID Partition Tables (Matt Domsch)\n\nutil-linux 2.11p\n\n* Danish messages (Claus Hindsgaul)\n* German messages (Karl Eichwalder)\n* Spanish messages (Santiago Vila Doncel)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* ipcrm: make POSIX compatible (Andre Corwin Mazzone)\n* ipcrm.8: idem\n* kill: fixed Makefile\n* login: setsid fixes\n* mkswap: max size of swap space is very large (Peter Chubb)\n* mount: JFS support for mount-by-label (hch)\n* nfsmount: check for <rpcsvc/nfs_prot.h> (hch)\n* readprofile: keep track of line numbers (John Levon)\n* umount: fix for MNT_DETACH\n\nutil-linux 2.11o\n\n* Estonian messages (Meelis Roos)\n* Japanese messages (Daisuke Yamashita)\n* Spanish messages (Santiago Vila Doncel)\n* cal: option -s: Sunday is first day of the week\n* cal.1: updated\n* cfdisk: give not only bytes but also MB or GB for clarity.\n* colrm: wide character fix (Elliot Lee)\n* *fdisk: added Darwin types (Vincent Bourgonjen)\n* fstab.5: updated\n* hexdump: -C option\n* hwclock: cmos.c: do not include <asm/io.h> on alpha\n* mount: improved detection of ufs (and slowdown of detection of iso9660)\n* mount.8: added info on * in /etc/filesystems, shortname option of vfat,\n  mount --move, udf, return codes\n* raw: try /dev/raw/rawctl when /dev/rawctl fails (Thierry Vignaud)\n* rc.serial: removed - setserial is no longer in util-linux (kromJx)\n* README.admutil: removed - only of historical interest\n* README.bootutils-0.1: removed - only of historical interest\n* script: security fix\n* sfdisk: improved geometry detection; wider columns; default disks from\n  /proc/partitions\n* umount: permission test owner umount\n* wall.1: added suid restriction\n\nutil-linux 2.11n\n\n* Danish messages (Claus Hindsgaul)\n* German messages (Karl Eichwalder)\n* Swedish messages (Christian Rose)\n* Turkish messages now in UTF-8 (Nilgün Belma Bugüner)\n* blockdev: add --report option\n* cal: fix for wide multibyte-char (Motonobu Ichimura)\n* cfdisk: recognize ext3 and reiserfs (Flavio Stanchina)\n* fsck.minix: i18n changes\n* ipc.{info,texi}: minor correction\n* login: compilation fix (Jaroslaw J. Pyszny)\n* mount.8: tmpfs mount options (Karl Eichwalder)\n* mount: recognize minix v2\n* mount: support mount-by-label also for lvm (Kirby Bohling)\n* mount: order guessing of fstypes according to seek offset\n* pivot_root: compilation fix for ia64\n* readprofile: byte order auto-detection (Werner Almesberger)\n\nutil-linux 2.11m\n\n* Danish messages (Claus Hindsgaul)\n* German messages (Karl Eichwalder)\n* Swedish messages (Christian Rose)\n* Turkish messages (Nilgün Belma Bugüner)\n* fdisk: added netbsd type (Steven J. Hill)\n* more: fix for unsigned char (Rusty Russell)\n* mount: added sysv magic (Tim Launchbury)\n* setterm: fixed \"setterm -foreground default\"\n\nutil-linux 2.11l\n\n* Danish messages (Claus Hindsgaul)\n* banner: removed - it is in bsdgames\n* fdisk: show partitions with empty type but some other nonzero field\n* login: copy the static struct that getpwnam() returns before calling\n  PAM routines that might themselves use getpwnam(). Abort on problems.\n  (Olaf Kirch)\n* mount: added jfs magic (Christoph Hellwig)\n* renice: report the correct new priority after a setpriority()\n* umount: add lazy unmount (Christoph Hellwig)\n\nutil-linux 2.11k\n\n  Various potential buffer overflows were pointed out by awayzzz@digibel.org.\n  Fixes in agetty, hwclock, namei, readprofile, simpleinit, vipw.\n  (Also added a few [f]close() calls - entirely superfluously.)\n\n* agetty: avoid possible buffer overflow\n* cfdisk: recognize xfs (Nathan Scott)\n* cytune: added close()\n* fdformat: added close()\n* fdisk: added fclose()\n* hwclock: avoid possible buffer overflow\n* mkfs.minix: added fclose()\n* mount: remove the assumption that 635 is the default mount port\n* namei: avoid possible buffer overflow\n* rdev: added closedir()\n* readprofile: avoid possible buffer overflow\n* sfdisk: added fclose()\n* simpleinit: avoid possible buffer overflow\n* swapon: added fclose()\n* umount: use tcp when mount was done using tcp (James D Strandboge)\n* vipw: avoid possible buffer overflow\n\nutil-linux 2.11j\n\n* fdisk: fix for AIX label (Olaf Hering)\n* fdisk: fix for creating DOS label when BSD label is present\n* mount.8: added remark about blocksize to ext2 sb= mount option description.\n* partitiontype: new, not installed\n\nutil-linux 2.11i\n\n* testincl: do not run conftest (Brian Murphy)\n* blockdev: corrected ioctl numbers now that BLKBSZGET is in 2.4.10pre3\n* cal: fixed for Hungarian locale\n* cal: fixed for multibyte locales (Pablo Saratxaga)\n* fdisk: avoid superfluous warning about DOS partitions\n* line: new, to support SCO shell scripts (Christoph Hellwig)\n* mount: added vxfs magic\n* passwd: tiny fix for ARM (Ken Cox)\n* replay: replay typescript with timings (Joey Hess)\n* script: add -t flag for timing (Joey Hess)\n\nutil-linux 2.11h\n\n* Turkish messages (Nilgün Belma Bugüner)\n* Danish messages (Claus Hindsgaul)\n* banner: minor fix (awayzzz@digibel.org)\n* mkfs.minix: minix v2 fix\n* more.1: improved (Edward Betts)\n* mount.8: corrected description of the nwfs uni_xlate mount option\n* vipw: make temp files of mode 0600 (Bill Nottingham)\n* wall: avoid writing to /dev/:0\n\nutil-linux 2.11g\n\n* MCONFIG & configure: fix for gcc 3.0\n  Note that nfsmount_xdr.c may give warnings with gcc 3.0, essentially\n  because of defines in <rpc/xdr.h> that use things like ntohl(*buf++)\n  where ntohl(x) is a macro with several occurrences of x.\n* blockdev: support for the get/set blocksize ioctls\n  [not yet in the 2.4.5 kernel]\n* fdisk: added Linux/PA-RISC type (Matt Taggart)\n* mount: minor fix (Andrey J. Melnikoff)\n* mount: added some ext3 stuff (Andrew Morton)\n* mount: added heuristics for reiserfs (Andrew Morton)\n* mount.8: added ext3 and reiserfs docs (Andrew Morton)\n\nutil-linux 2.11f\n\n* Czech messages (Jiří Pavlovský)\n* fdisk: fix for \"reorder\" expert command\n  (use of sfdisk afterwards is still recommended)\n* mount: minor fixes\n\nutil-linux 2.11e\n\n* Danish messages (Claus Hindsgaul)\n* Brazilian Portuguese messages (Rodrigo Stulzer Lopes)\n* agetty: give tty mode 0600 instead of 0622\n* cal: improved manpage\n* cfdisk: add user-friendliness in case of empty disk (Matthew Wilcox)\n* dmesg: improved manpage\n* fdisk: SuperH fix (ISHIKAWA Mutsumi)\n* hwclock: accept alpha options in both upper and lower case\n  (so as to make the man page correct)\n* hwclock: add option --noadjtime (Henrique M. Holschuh)\n* login: child must have controlling tty (Michał Moskal)\n* more: don't seek unseekable input (David Whedon)\n* mount: upon request by Richard Gooch: if the mount point is specified\n  as symlink, put symlink, not actual mount point in mtab.\n  (This avoids the long and ugly devfs names, but may break things.\n  Please complain in case of problems.)\n* mount: with mount -a -t nfs:\n  if we used fallback to nfs v3, don't do so for subsequent mounts\n* mount: add heuristics for ext3 (Andrew Morton)\n* mount: added quota info to mount.8\n* mount: allow comma-separated type lists, also in fstab\n* raw: small fix for ppc\n\nutil-linux 2.11d\n\n* fdisk: fix for OSF (Will Woods)\n* chsh: compilation fix (Ronald Wahl)\n\nutil-linux 2.11c\n\n* Czech messages (Jiří Pavlovský)\n* German messages (Elrond)\n* Makefile/MCONFIG improvements (Peter Breitenlohner)\n* fdisk: added a few partition types\n* fdisk: correct partition numbering for sgi partitions (Nathan Scott)\n* fdisk: make it compile on hppa by arbitrarily treating hppa like powerpc\n  (Matt Taggart)\n* fsck.minix: improved localisation (Elrond)\n* getopt: updated to version 1.1.2 (Frodo Looijaard)\n* hwclock: fixes for IA64 (Thorsten Kukuk)\n* hwclock: use /dev/vc/1 when devfs is used (Thomas Koeller)\n* hwclock: more devfs support (e.g. /dev/misc/rtc)\n* ipcs: add spaces in output (DeWitt Clinton),\n  correct some error messages (Bobby de Vos)\n* login: fix TIOCNOTTY (Andreas Haumer, Adam J. Richter)\n* login: add btmp logging of unsuccessful login attempts (Erik Troan)\n* login: avoid a SIGHUP race with PAM enabled (Peter 'Luna' Runestig)\n* login: copy the static result returned by gethostbyname to avoid\n  corruption by pam_authenticate via pam_ldap (Andreas Damm)\n* login: removed the REDHAT_IGNORED_MAILSIZE hack\n* login: unconditionally do vhangup\n* login: zero PAM_USER when no username was given (Arkadiusz Miśkiewicz)\n* look: dictionary now under /usr/share (Erik Troan)\n* mount: add sanitize_env() (Solar Designer)\n* mount: another heuristic for vfat (Michal Svec)\n* mount: xfs magic has only one endianness (Nathan Scott)\n* mount: return failure when tcp used and portmap returns 0 (H. J. Lu)\n* rdev: allow unlimited recursion to find the long devfs names\n  Also, allow major,minor pair the specify device (request by Russell Coker)\n* readprofile: array bound check (Andrew Morton)\n* script: transmit window changes to child (Joey Hess)\n* sfdisk: endian fix for ppc (Gregory Geiselhart)\n* sfdisk: new feature: sign is offset from default (Byron Stanoszek)\n* sfdisk: add some default devices to list (Luca Montecchiani)\n* sfdisk: no partition table on ide tape\n* shutdown: close files, unblock signals (Richard Gooch)\n* simpleinit: block signals in handlers; add no_reboot option (Richard Gooch)\n* swapdev: deleted, it was last used with Linux 0.12.\n* umount: mips does support umount2 (Maciej W. Rozycki)\n* umount: add sanitize_env() (Solar Designer)\n* umount: fix exit status\n* wall: do not forget 80th character (Thorsten Kukuk)\n\nutil-linux 2.11b:\n\n* Danish messages (Claus Hindsgaul)\n* umount: mips does not support umount2 (Christoph Martin)\n* fdisk: tiny fix\n* mount.8: adfs options documented, xfs corrected\n\nutil-linux 2.11a:\n\n* tsort: deleted - it is part of GNU textutils 2.0\n* mount: fix rootdev() (Richard Kettlewell)\n* mount: fix gid of mtab file\n* mount: try /proc/filesystems after /etc/filesystems if the latter ends in \"*\"\n* fdisk: added a few system types\n\nutil-linux 2.11:\n\n* Jump to 2.11 to note that libc-4.5.26 is no longer supported,\n  and we require libc-4.6.27 (since now snprintf is used).\n  Also, kbdrate has now been removed. Find it in kbd-1.05.\n  Added -D_FILE_OFFSET_BITS=64 to CFLAGS.\n* Danish messages (Claus Hindsgaul)\n* fdisk: avoid loop in case of extended without logical\n* ipcs: corrected interchanged report on msg_rtime/msg_stime (Arun Kumar U)\n* kill: updated manpage\n* last: very much faster with mmap (Marek Zelem)\n* login: Applied PAM patch by David MacKenzie <djm@web.us.uu.net>\n* login: do a setsid in the child (Erik Troan)\n* mount: make \"mount 192.168.1.8:/ /a -o bg\" work again (Bjoern Voigt)\n* mount: added constant MS_MOVE\n* readprofile: added -M option, updated manpage (Andrew Morton)\n* setsid: fork when it would fail otherwise (John Fremlin)\n* simpleinit: updated (Richard Gooch et al.)\n* vipw: also offer to edit shadow file (Erik Troan)\n* xfs docs (Nathan Scott)\n\nutil-linux 2.10s:\n\n* Danish messages (Claus Hindsgaul)\n* fixes to make gcc happy (Joseph S. Myers)\n* fix for more on parisc (Richard Hirst)\n* change rdev to search subdirectories of /dev (Paul Clements)\n* ul fix (Masao Kawamura) - set columns correctly\n* cal fix (Brendan Kehoe) - don't overflow weekday array in Gaelic\n* fdisk fix (niles@scyld.com) - flush stdout\n* fdisk fix - don't forget to write out empty label\n* login: make default tty mode 0600\n* script: refuse to write typescript if that is a symlink\n* script: accept -V to output version\n* whereis: also search /usr/share/man.\n* hwclock: improve locale handling\n* hwclock: fix for Nautilus (Neoklis Kyriazis)\n* isosize: new\n\nutil-linux 2.10r:\n\n* mount: support mount by uuid or label for xfs (Nathan Scott)\n* mount: added probe for minix on bigendian systems (Nathan Scott)\n* mount: added probes for cramfs, hfs, hpfs and adfs (Sepp Wijnands)\n* mount: change setup; let umount remove at most one line from /etc/mtab\n* mount: improve man page\n* more, col, colcrt, colrm, column, ul: nls improvements (Masao Kawamura)\n\nutil-linux 2.10q:\n\n* mount: accept nonnumeric uid= and gid= options\n* write and wall: security improvement\n* fixed fdformat flaw (Werner Almesberger)\n* use right mountport upon umount (Glenn Lingle)\n* simpleinit / need / initctl stuff (Richard Gooch)\n* Portuguese messages (Rodrigo Stulzer Lopes et al.)\n\nutil-linux 2.10p:\n\n* mount: don't set up a loop file with -o loop,remount (Marc Mutz)\n* fdisk: changes for sectorsize different from 512\n* more: standout fix (Paul Vojta)\n* more: improve usage message (Lincoln Myers)\n* logger: Added -d option to use datagrams (Gerwin Pfab)\n* cal: Added -3 option to also print prev/next month (Michael Charles Pruznick)\n* French messages (Christophe Merlet)\n* Japanese messages (Daisuke Yamashita)\n\nutil-linux 2.10o:\n\n* fdformat: fixed to work with kernel 2.4.0test6 (Marek Wojtowicz)\n* losetup: also return status when only showing loop device status (ewt)\n* mount: do not retry ro if mount was ro; improve error message\n* login: not installed suid\n* getopt: by default install aux files in /usr/share/misc\n\nutil-linux 2.10n:\n\n* added blockdev.8\n* change to elvtune (andrea)\n* fixed overrun in agetty (vii@penguinpowered.com)\n* shutdown: prefer umounting by mount point (rgooch)\n* fdisk: added plan9\n* fdisk: remove empty links in chain of extended partitions\n* mount: define ALWAYS_STAT\n* mount: add replace, after, before, over, bind\n* umount: also free loop device when not writing mtab\n* lomount: try both /dev/loopN and /dev/loop/N\n* hwclock: handle both /dev/rtc and /dev/efirtc (Bill Nottingham)\n* script: added -f (flush) option (Ivan Schreter)\n* script: added -q (quiet) option (Per Andreas Buer)\n* getopt: updated to version 1.1.0 (Frodo Looijaard)\n* Czech messages (Jiří Pavlovský)\n\nutil-linux 2.10m:\n\n* chfn fix when PAM is used (Martin-D. Lacasse)\n* do not use LC_NUMERIC part of locale in hwclock when writing /etc/adjtime\n* mount status return from smb or ncp fix (Mark Peloquin)\n* mount new option -l: also print label when listing mounts\n* mount add heuristic for xfs (Martin K. Petersen)\n* mount UUID and label cache (Erik Troan)\n* mount improve check for `already mounted' in case of label or uuid\n* fdisk partition names more devfs-friendly\n* fdisk bsdlabel large disk support\n* setterm.1: options documented (Colin Watson)\n* rename correction\n* German, Spanish, French, Italian, Portuguese messages\n  (Roger Luethi, Beth Powell, Alvaro Antunes)\n\nutil-linux 2.10l:\n\n* Merged losetup.c and lomount.c\n* ANSIfied everything\n\nutil-linux 2.10k:\n\n* NFS version 4 mount support (Trond Myklebust)\n* hwclock fix (Stefan Ring)\n* Added -p option to col, as required by SUS (Joseph S. Myers)\n\nutil-linux 2.10j:\n\n* fdisk fixes (Michal Jaegermann)\n\nutil-linux 2.10i:\n\n* new directory partx (with code to play with, not to use)\n* minor fdisk changes\n\nutil-linux 2.10h:\n\n* Added pivot_root (Werner Almesberger)\n* Added elvtune (Andrea Arcangeli)\n* Added need and extended simpleinit and shutdown (Richard Gooch)\n* Removed all #include <linux/fs.h>\n* errno fixes (Joseph S. Myers)\n* IA-64 fixes (Michael K. Johnson)\n* fdisk fixes for OSF/1 on Alpha (David Huggins-Daines)\n* fdisk sectorsize fix (Greg Hosler)\n* mount speed= option to enable mounting bad CDROMs (Marco d'Itri)\n* ipcrm deletes several things at once (Frank Zago)\n\nutil-linux 2.10g:\n\n* fdisk can now sort partitions into order [untested, beware!]\n* Update of mkswap for sparc64 (jj)\n* Update of raw (Stephen Tweedie):\n  Control file was /dev/raw, now /dev/rawctl\n  Access files were /dev/raw*, now /dev/raw/raw*\n* Czech messages (Jiří Pavlovský)\n* German messages (Daniel Egger)\n* losetup locks memory (Frank v Waveren)\n\nutil-linux 2.10f:\n\n* Security fix for mount (okir)\n* Avoid infinite loop in namei (Brett Wuth)\n* added clock-ppc.c (from Matsuura Takanori), not merged yet\n* deleted clockB subdirectory\n* recognize mkdosfs string (Michal Svec)\n\nutil-linux 2.10e:\n\n* New: rename\n* Added option to mkswap so that user can override pagesize\n* fdisk -l now reads /proc/partitions when no device was given\n* Fixed fdisk.8 (James Manning)\n* Added devpts info to mount.8 (Elrond)\n* Newline fix for logger output to stdout (Henri Spencer)\n\nutil-linux 2.10d:\n\n* Do not try to mount something as udf without good reason\n* Do not loop in umount if there is a stale lock file\n* Allow fdisk twice as many cylinders\n* Fixed non-casefolding search in look (Markus Demleitner)\n\nutil-linux 2.10c:\n\n* Various compilation fixes\n\nutil-linux 2.10b:\n\n* Fixed smbmount problem (Andrew Tridgell)\n* Fixed ddate problem with the day after St. Tib's Day (Brad)\n* German messages (Elrond)\n* Made kill a bit more standard compliant\n* Made some more programs output a version\n\nutil-linux 2.10a:\n\n* Japanese messages (Daisuke Yamashita)\n* French messages and several Debian fixes (Vincent Renardias)\n* Fixed infinite loop in mkfs.minix\n\nutil-linux 2.10:\n\n* Added BSD disklabel code to rescuept\n* Added blockdev utility\n* Fix losetup return code\n* Fix unit display in cfdisk\n* Do not redefine _PATH_MAILDIR (so that recent systems can have /var/mail)\n* Added --localtime option to hwclock;\n  added third line (LOCAL/UTC) to /etc/adjtime.\n* Add -H option to agetty (David Holland)\n\nutil-linux 2.9z:\n\n* Japanese messages (Daisuke Yamashita)\n* Czech messages (Jiří Pavlovský)\n* Added some udf stuff to mount.8\n* Added ioctl for fdisk on bsdlabels\n\nutil-linux 2.9y:\n\n* Wide character support (Bruno Haible)\n* German messages and some small fixes (Elrond)\n* Small fix to owner mount option (Erik Troan)\n* Don't sleep so long in clock/kd.c (Christian T. Steigies)\n\nutil-linux 2.9x:\n\n* German messages and a i18n fix (Elrond)\n* mount option: allow the owner to mount a device (RedHat)\n* ugly: let login open console with O_NONBLOCK (Maciej W. Rozycki)\n* UGLY: let login ignore mail that is precisely 523 bytes long (RedHat)\n* added mkfs.bfs, mkfs.bfs.8\n* mount now recognizes qnx4 and bfs partitions\n* rescuept now recognizes Unixware partitions\n* hwclock fix on m68k (Roman Hodek)\n* several minor things\n\nutil-linux 2.9w:\n\n* Updated mount.8 (Yann Droneaud)\n* Improved makefiles\n* Fixed flaw in fdisk\n\nutil-linux 2.9v:\n\n* cfdisk no longer believes the kernel's HDGETGEO\n  (and may be able to partition a 2 TB disk)\n\nutil-linux 2.9u:\n\n* Czech more.help and messages (Jiří Pavlovský)\n* Japanese messages (Daisuke Yamashita)\n* fdisk fix (Klaus G. Wagner)\n* mount fix (Hirokazu Takahashi)\n* agetty: enable hardware flow control (Thorsten Kranzkowski)\n* minor cfdisk improvements\n* fdisk no longer accepts a default device\n* Makefile fix\n\nutil-linux 2.9t:\n\n* national language support for hwclock\n* Japanese messages (both by Daisuke Yamashita)\n* German messages and some misc i18n fixes (Elrond)\n* Czech messages (Jiří Pavlovský)\n* wall fixed for /dev/pts/xx ttys\n* make last and wall use getutent() (Sascha Schumann)\n  [Maybe this is bad: last reading all of wtmp may be too slow.\n   Revert in case people complain.]\n* documented UUID= and LABEL= in fstab.5\n* added some partition types\n* swapon: warn only if verbose\n\nutil-linux 2.9s:\n\n* tunelp patch (Andrea Arcangeli)\n* fixed mount race (HJLu)\n* German messages (Elrond)\n\nutil-linux 2.9[pqr]:\n\n* errno->errsv patch (Arnaldo Carvalho de Melo)\n* hwclock patch for the Award 4.50g BIOS \"2094\" bug. (Dave Coffin)\n* fdisk patch to correct deletion of last logical partition\n\nutil-linux 2.9o:\n\n* fix to login by Ambrose C. Li\n* improvement to mcookie inspired by a patch from Rik Faith\n* more i18n by Arnaldo Carvalho de Melo; pt_BR locale\n\nutil-linux 2.9n:\n\n* Added -u option to logger (write to user-specified socket; Martin Schultze)\n* Added mount.smb script contributed by Greg Galperin\n* Some more national language support\n* mkfs.minix argument parsing fixed\n* write fixed for /dev/pts/xx ttys\n* configure adapted for the case of <scsi/scsi.h> that needs u_char.\n\nutil-linux 2.9m:\n\n* Added national language support (misiek@pld.ORG.PL)\n* minor improvements in mount, fdisk, cfdisk, agetty, more\n\nutil-linux 2.9l:\n\n* Added /dev/port use to hwclock again - it may be necessary for Jensen.\n\nutil-linux 2.9k:\n\n* major reshuffle of hwclock stuff; added sparc and alpha code\n* fdisk fix\n* tiny shutdown fix\n\nutil-linux 2.9j:\n\n* added configure\n* merged three lists of partition types in *fdisk\n* multi page display in cfdisk\n* test for getlogin() == \"\";\n* start fixup hwclock\n\nutil-linux 2.9i:\n\n* fixed 2.9h typo in more\n* added -m: `Monday is 1st day' option to cal (Jean-Francois Bignolles)\n* changed PAM stuff in login.c (+- mjohnson)\n* added warning to cfdisk in case of multiple bootable partitions\n* added 2048-byte sector support in fdisk (Oliver Schaertel)\n\nutil-linux 2.9h:\n\n* mount recognizes \"uid=useruid\" and \"gid=usergid\" in /etc/fstab.\n* documented the fact that \"mount -t smb\" will call /sbin/mount.smb.\n* mount gives clear error message when fstab does not end in newline.\n* swapon checks mode of file\n* cfdisk got a more specific exit status (Enrique Zanardi)\n\nutil-linux 2.9g:\n\n* mount updates (locking, \"users\" keyword, \"/etc/filesystems\",\n  \"proto\" and \"vers\" options in nfsmount, ...)\n\nutil-linux 2.9f:\n\n* made ul handle lines of arbitrary length (Scott Maxwell)\n* killed some C/H/S nonsense in fdisk\n* fixes for archs with unsigned char type (Ambrose Li)\n* fdisk fixes for power pc (Tom Rini)\n* added a define for NCURSES_CONST\n* fixes for list of signals in kill.c\n* fixes for user name length in last.c\n\nutil-linux 2.9e:\n\n* added a forgotten declaration to login.c (Christian Oyarzun)\n\nutil-linux 2.9d:\n\n* fixed segfault in umount caused by Wilcox' patch (Steffen Zahn)\n* added lnz stuff to fdisk\n\nutil-linux 2.9c:\n\n* refixed PAM stuff in login.c that was broken in 2.8.\n\nutil-linux 2.9b:\n\n* split README into INSTALL and HISTORY\n* added a sentence to swapon.8\n* behavior of write on non-ASCII fixed\n* hwclock adapted to survive a failing mktime()\n\nutil-linux 2.9a:\n\n* added an include to lib/my_reboot.c so that __GLIBC__ is defined\n* added setlocale() to login-utils/chfn.c\n* do not recompute MAIL in login-utils/login.c\n\nutil-linux 2.9:\n\nHIGHLIGHTS for version 2.9:\n\n1) Removed programs:\n   - strings. There is a version in binutils.\n   - frag. (Moved to historic in 2.4, crept back in 2.5. Gone again.)\n1a) Not yet removed program:\n   - setfdprm. It also is in fdutils-5.2 (with an exceptionally\n     ugly man page).\n1b) Removed directory:\n   - bsd. (The routine getopt() is in libc. err() moved to lib.)\n2) Improvements:\n   - ddate has been fixed to count down to the new, right X-day\n   - look is now willing to search non-English dictionaries\n     (i.e., uses locale)\n   - cal now knows that Dutch day abbreviations have length 2 only\n   - mcookie does not block when no random stuff is available\n   - shutdown got a configuration file /etc/shutdown.conf\n   - fdisk now reads SGI disk labels (thanks to Andreas Neuper)\n   - mkswap now knows about new swap areas; mkswap.8 has been rewritten\n   - umount knows about umount2() and forced unmounting of nfs mounts\n     (however, I don't think it really works)\n   - mount is now willing to handle file names with embedded spaces\n   - mount can now mount things by UUID or volume name\n3) Uglifications:\n   - swap.h has been replaced by a private swap_constants.h since\n     <linux/swap.h> does not compile\n   - reboot has become a private routine, since libc5 and glibc2 conflict\n   - a mkminix-0.1 directory contains some patches to let mkfs.minix\n     work under DOS. (Untested.)\n4) Numerous other small changes.\n\n0xF) Send questions and/or patches to util-linux@math.uio.no\n\nutil-linux 2.9 was released by Andries Brouwer - aeb@cwi.nl\nThe address util-linux@math.uio.no reaches Rik, Andries, Peter,\nMichael, Erik, Nicolai and possibly others.  Hwclock stuff is\nforwarded to Bryan.\n\nutil-linux 2.8:\n\nHIGHLIGHTS for version 2.8:\n\n1) New programs:\n   - getopt(1) by Frodo Looijaard replaces the older bsd based version.\n     Keywords: Backward compatible, supports --long options.\n1) Removed programs:\n   - chroot: is no longer in util-linux.  Get it free with GNU sh-utils\n   - hostid: No-one could figure out the right way for this program to\n\t\twork.  Another hostid program is included in poeigl\n\t\t(see the LSM, Primary-site: ftp.daimi.aau.dk /pub/linux/poe)\n2) Various portability enhancements.  Among other things hwclock now works\n   a lot better on non Intel architectures.  Should compile with libc 4, 5\n   and 6 as well as old and recent kernels.  People using non-intel hardware\n   are encouraged to send patches.\n3) rev now only limits linelength to memory capacity\n4) dmesg now uses a buffer that matches the kernel buffer in size (8KB)\n\n\nutil-linux 2.7:\n\nHIGHLIGHTS for version 2.7:\n\n1) util-linux now _requires_ ncurses.  Several programs are completely\n   converted to use terminfo (instead of termcap).\n\n2) Removed programs:\n   - clock: Dropped entirely.  Use hwclock (included).\n   - sync: is in gnu fileutils.\n   - setserial: Is being maintained by Ted Ts'o, he recommends\n\tsetserial-2.12 (2.13 is bad luck)\n   - clear: Included in ncurses\n   - hostname, domainname, dnsdomainname: It's in net-utils.\n   - lpcntl.\n\n3) Bugfixes, additions:\n   - cfdisk: A much improved version. All known bugs have been fixed.\n   - sfdisk: A command line fdisk type utility, formerly called fdisk-3.04.\n   - SECURITY: All known holes in login, chfn, chsh and others have been\n     plugged.  UPGRADE NOW if you haven't already fixed them yourself.\n   - Should work with libc 4, 5 and 6 (gnulibc), on m68k, intel, alpha\n     and sparc.\n\n4) Problems:\n   - The rpcgen that comes in NetKit-B-0.09 is broken.  At least as\n     packaged with RedHat 4.2 (NetKit-B-0.09-6).  There are several\n     ways to deal with this:\n     - Don't run rpcgen, the needed pre-generated sources are included\n       (nfsmount_xdr.c).  You must hack mount/Makefile to do this.\n     - Edit the source emitted by rpcgen so it can compile.  This is very\n       simple if you know C.\n     - Disable the NFS parts of mount.  You have to edit mount/Makefile\n       to do this.\n     - Use some other rpcgen.\n\nutil-linux 2.6.1\n\nThis release was never made public\n\nSee notes for 2.6 for installation instructions.\n\nThis is a incremental release containing some fixes.  A new release\nwill be made later fixing the outstanding bugs.\n- Things compiles and works better with recent releases of kernel,\n  ncurses, and so forth: fdisk, more\n- Some fixes to make things compile out of the box on alphas.\n- There has been reported a problem with login and /etc/usertty.  It\n  should be fixed.  If you still have problems get a recent MAKEDEV and\n  use it to make new tty devices.  They were renumbered sometime during\n  the 1.3 phase of the kernel.\n- ipcs now displays the key of the structures.\n- A (harmless?) overflow bug was fixed in login.\n\nOutstanding bugs:\n- login/getty has a denial of service problem.\n- Several places needs a bit more polish.\n- There are a _lot_ of nonfatal warnings when compiling mount.  This will\n  not necessarily be fixed.\n\n\nutil-linux 2.6\n\nHIGHLIGHTS for version 2.6:\n\n0) The first release with me at the helm.  PLEASE SEND PATCHES AND\n   UPDATES TO: util-linux@math.uio.no.\n\n1) Removed programs:\n   - md5sum, dsplit: available in GNU textutils.\n   - syslogd: Sysklogd is now preferred.  It is available at\n\ttsx-11.mit.edu:/pub/sources/sbin\n\tsunsite.unc.edu:/pub/Linux/system/Daemons\n\n2) Bugfixes, additions:\n   - SECURITY: All known holes in mount have been fixed.  UPGRADE NOW\n     if you haven't already!\n   - Portability enhancements to the minix filesystem utils (m68k and\n     Arm patches).\n   - passwd/chsh/chfn will not mess up the passwd file on a NIS machine\n   - others too numerous to enumerate.\n\n3) New programs:\n   - vigr (it's like vipw)\n   - Introducing hwclock.  A complete rewrite of the latest available\n     clock source.  It supports intel/CMOS, /dev/rtc and linux/m68k\n     system clock interfaces.  Clock supports the same things but is now\n     obsolete and will not be present in the next release.  Start using\n     hwclock now.  Please.\n\n\nutil-linux 2.5\n\nHIGHLIGHTS for version 2.5:\n0) Nicolai Langfeldt is taking over maintenance of util-linux, with the\n   help of a few others (Michael K. Johnson, Andries Brouwer, and Rik\n   Faith).\n\n   PLEASE SEND PATCHES AND UPDATES TO: util-linux@math.uio.no\n\n1) The following packages have been removed.  Please use the up-to-date,\n   canonical versions of these packages from the listed places:\n\n    timezone support (/usr/lib/zoneinfo, libz.a, zic, zdump):\n        elsie.nci.nih.gov:/pub/tzcode95d.tar.gz\n        elsie.nci.nih.gov:/pub/tzdata95h.tar.gz\n    MAKEDEV-C:\n        sunsite.unc.edu:/pub/Linux/system/Admin/MAKEDEV-C-1.5.tar.gz\n    MAKEDEV:\n        sunsite.unc.edu:/pub/Linux/system/Admin/MAKEDEV-2.2.tar.gz\n    md5sum:\n        prep.ai.mit.edu:/pub/gnu/textutils-1.3.tar.gz\n        [The GNU version is now compatible with the Plumb/Lankester\n        version.]\n    ksymoops:\n        Now bundled with the kernel in linux/scripts.\n\n2) update_state has been removed\n3) fdisk now supports NetBSD disklabels courtesy of Bernhard Fastenrath\n   <fasten@athene.informatik.uni-bonn.de> (and > 8GB disks, courtesy of\n   Andries Brouwer)\n4) mount improved -- many patches from Andries Brouwer for greatly improved\n   error reporting\n5) ddate, chkdupexe, and other programs have been improved and bug fixed\n6) util-linux is now a source-only distribution\n7) mcookie generates better random numbers and will use /dev/random or\n   /dev/audio if available\n8) chfn, chsh, passwd, and vipw have been updated with security patches\n   from Zefram <A.Main@dcs.warwick.ac.uk>.  Now, they all use the same\n   locking, and several security holes have been patched.  Further, chsh\n   and chfn can be configured at compile time to require a password before\n   updates and chsh can be configured to only use shells from /etc/shells.\n\n\nHIGHLIGHTS for version 2.4 (2.3 was never released):\n0) Michael K. Johnson <johnsonm@nigel.vnet.net> is the interim maintainer\n   while Rik Faith is working on PhD work.\n1) login now makes the login tty mode 600 and places it in group \"tty\"\n2) wall, and write will not write dangerous escape sequences\n3) wall and write can be run setgid \"tty\".  If util-linux is compiled for\n   this option, \"mesg y\" will only set group write instead of group/other\n   write.\n4) fdisk and cfdisk have been patched with the latest llseek.c.  Although I\n   had a lot of bug reports about fdisk from util-linux-2.2, I was unable\n   to reproduce any of the problems.  Some of the problems appeared to be\n   related to a failure to reboot the machine after changing the partition\n   table, and some may have been due to a specific kernel revision problem.\n   However, this doesn't seem to account for all of the bug reports -- if\n   this version gives you problem, please send as complete a bug report as\n   possible.\n5) chkdupexe from Nicolai Langfeldt (janl@ifi.uio.no)\n6) ctrlaltdel now installs into /sbin instead of /usr/sbin\n7) mkfs replacement from Ron Sommeling (sommel@sci.kun.nl)\n8) lpcntl removed.  Use tunelp instead.\n9) ksymoops from Greg McGary <gkm@magilla.cichlid.com>\n10) mkfs.minix now clears the first 512 bytes of the file system so that\n    Minix disks won't be confused with MSDOS disks (Daniel Quinlan\n    (quinlan@yggdrasil.com))\n11) mkswap should now work on an Alpha running Linux\n12) frag removed.  See\n    sunsite.unc.edu:/pub/Linux/system/Filesystems/defrag-0.6.tar.gz for the\n    latest version.\n13) mount patches from Andries.Brouwer@cwi.nl and Dan Quinlan\n    (quinlan@yggdrasil.com).\n14) MAKEDEV and MAKEDEV-C updated to the latest versions.\n15) Paths updated for FSSTND 1.2.  This means that you may need to make\n    some links.  The links you need to make we system dependent.  The\n    ultimate goal is to rename /var/adm to /var/log and have a symbolic\n    link from /var/adm to /var/log during the transition period.  If you\n    are running an ELF system, you probably won't have to do anything.  The\n    bottom line is that the following files must exist or be pointers to\n    the old version (used internally by the a.out libraries):\n\n             New                 Old\n\n        /var/log/wtmp       /var/adm/wtmp\n        /var/log/lastlog    /var/adm/lastlog\n        /var/run/utmp       /var/adm/utmp\n\nHIGHLIGHTS for version 2.2:\n1) This is primarily a quick bug-fix release for version 2.1\n2) mkfs wrapper added back in, since e2fsprogs only supplies an fsck wrapper\n3) selection removed, since someone appears to be maintaining it now.  See\n   sunsite.unc.edu:/pub/linux/kernel/patches/console for recent sources.\n   For the time being, I'm keeping a copy in the historic subdirectory of\n   util-linux.  A \"make install\" should work find from within that\n   directory.\n4) Note that other floppy utilities are available from:\n    ftp.imag.fr:pub/Linux/ZLIBC/fdutils/fdutils-4.1.src.tar.gz\n    sunsite.unc.edu:/pub/Linux/system/Misc/fdutils-4.1.src.tar.gz\n    tsx-11.mit.edu:/pub/linux/sources/sbin/fdutils-4.1.src.tar.gz\n\n\nHIGHLIGHTS for version 2.1:\n\n1) Directory structure rearrange, with configuration support for those who\n   use shadow passwords and System V init (no support is provided for these\n   things, but your utilities won't get overwritten if you do a \"make\n   install\" after you properly edit MCONFIG).\n2) fdisk and cfdisk should work as expected with 2GB+ disk drives\n3) As usual, lots of stuff was updated and added, including mount, vipw,\n   readprofile\n4) Some stuff was also deleted, and can now be found elsewhere:\n    fsck wrapper: tsx-11.mit.edu:/pub/linux/ALPHA/ext2fs/e2fsprogs*\n    pwd, su: prep.ai.mit.edu:/pub/gnu/sh-utils*\n    ed: prep.ai.mit.edu:/pub/gnu/ed*\n    od: prep.ai.mit.edu:/pub/gnu/textutils*\n    uudecode/uuencode: prep.ai.mit.edu:/pub/gnu/sharutils*\n    bdflush/update: ftp.funet.fi:/pub/OS/Linux/PEOPLE/Linus/v1.1/bdflush*\n\n\n\nPARTIAL HISTORY OF UTIL-LINUX:\n\nbsd:\n    Nothing in this directory gets installed, but some BSD programs need\n    this support:\n        err.c: 8.1 (Berkeley) 6/4/93\n        err.h: 8.1 (Berkeley) 6/2/93\n        getopt.c: 4.13 (Berkeley) 2/23/91\n        pathnames.h: 5.3 (Berkeley) 5/9/89 with extensive modifications for\n                     Linux\n\ndisk-utils:\n    cfdisk: 0.8 BETA (>2GB) from Kevin E. Martin (martin@cs.unc.edu) with\n            modifications for disks > 2GB.\n            ftp.cs.unc.edu:/pub/users/martin/linux/cfdisk-0.8.tar.gz\n    fdformat: Werner Almesberger (almesber@nessie.cs.id.ethz.ch), with\n              modifications by Marcel Mol (marcel@dutecad.et.tudelft.nl)).\n              Later, updated with a September 1992 version by Werner.\n    fdisk: A. V. Le Blanc (LeBlanc@mcc.ac.uk) fdisk 1.5 release, with\n           patched from Kevin Martin for DOS and OS/2 compatibility (1.5a);\n           Rik Faith (1.5b, 2.0).\n    fsck.minix, mkfs.minix: Linus Torvalds, with modifications by: Rik\n                            Faith (faith@cs.unc.edu), Scott Heavner\n                            (sdh@po.cwru.edu), Dr. Wettstein\n                            (greg%wind.uucp@plains.nodak.edu), Daniel\n                            Quinlan (quinlan@yggdrasil.com).\n    mkfs: David Engel (david@ods.com) and Fred N. van Kempen\n          (waltje@uWalt.NL.Mugnet.ORG)\n          Version 1.9 from Ron Sommeling (sommel@sci.kun.nl)\n    mkswap: Linus Torvalds, with modifications by Mike Jagdis\n            (jaggy@purplet.demon.co.uk. )\n            Version for Alpha from\n            cage.cs.arizona.edu:/pub/davidm/linux/mkswap-axp-950503.tar.gz\n    setfdprm: Werner Almesberger (almesber@nessie.cs.id.ethz.ch)\n              Note that more floppy utilities are available from:\n                ftp.imag.fr:pub/Linux/ZLIBC/fdutils/fdutils-4.1.src.tar.gz\n                sunsite.unc.edu:/pub/Linux/system/Misc/fdutils-4.1.src.tar.gz\n                tsx-11.mit.edu:/pub/linux/sources/sbin/fdutils-4.1.src.tar.gz\n    llseek.c: from Remy Card's e2fsprogs-0.5b.tar.gz (21Mar95 version) from:\n                sunsite.unc.edu:/pub/Linux/system/Filesystems/ext2\n\ngames:\n    banner: (8.3 (Berkeley) 4/2/94)\n            ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n\nlogin-utils:\n    agetty: W. Z. Venema, ported by Peter Orbaek <poe@daimi.aau.dk>.\n            ftp.daimi.aau.dk:/pub/linux/poe/poeigl-1.37.tar.gz\n    chfn: Salvatore Valente <svalente@athena.mit.edu>\n    chsh: Salvatore Valente <svalente@athena.mit.edu>\n    last: 5.11 w/year (Berkeley) 6/29/88; Port by Michael Haardt with\n          changes by Peter Orbaek.\n          ftp://ftp.daimi.aau.dk/pub/linux/poe/admutil-1.16.tar.gz\n    login: 5.40 (Berkeley) 5/9/89; with ports by Michael Glad and Peter Orbaek\n           ftp.daimi.aau.dk:/pub/linux/poe/poeigl-1.37.tar.gz\n    mesg: 8.2 (Berkeley) 1/21/94\n          ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n    newgrp: Michael Haardt, with modifications by Peter Orbaek.\n            ftp://ftp.daimi.aau.dk/pub/linux/poe/admutil-1.16.tar.gz\n    passwd: Peter Orbaek, with yp modifications by Alvaro Martinez\n            Echevarria (alvaro@enano.etsit.upm.es)\n            ftp://ftp.daimi.aau.dk/pub/linux/poe/admutil-1.16.tar.gz\n    shutdown: Peter Orbaek, with new modifications by Stephen Tweedie, Rik\n              Faith, and Dave (gentzel@nova.enet.dec.com).\n              ftp://ftp.daimi.aau.dk/pub/linux/poe/admutil-1.16.tar.gz\n    simpleinit: Peter Orbaek\n                ftp.daimi.aau.dk:/pub/linux/poe/poeigl-1.37.tar.gz\n    vipw: 5.16 (Berkeley) 3/3/91, with modifications by Mike Grupenhoff\n          <kashmir@umiacs.UMD.EDU>\n    wall: 8.2 (Berkeley) 11/16/93 (With changes so that damaging escape\n          sequences cannot be sent.)\n          ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n\n\nmisc-utils:\n    cal: 8.4 (Berkeley) 4/2/94, with modifications by Rik Faith and\n         Hein@student.tu-clausthal.de (Jochen Hein).\n         ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n    chkdupexe: Version 1.2 from \"Nicolai Langfeldt\" <janl@ifi.uio.no>\n    clear: Rik Faith\n    ddate: Druel the Chaotic aka Jeremy Johnson aka mpython@gnu.ai.mit.edu,\n           with modifications by Lee Harvey Oswald Smith, K.S.C. and\n           substantial updates from Rev. Bro. Lee H:. O:. Smith, KYTP\n    domainname: Peter Orbaek\n            ftp.daimi.aau.dk:/pub/linux/poe/poeigl-1.37.tar.gz\n    dsplit: David Arnstein (arnstein@netcom.com)\n            gatekeeper.dec.com:/pub/usenet/comp.sources.misc/volume40/dsplit\n    getopt (getoptprog): jhunix.hcf.jhu.edu:\n           /pub/public_domain_software/NetBSD/usr/src/usr.bin/getopt\n\t   replaced by getopt-1.0.3.tar.gz from Frodo Looijaard,\n\t   found at http://huizen.dds.nl/~frodol\n    hostid: Mitch DSouza (m.dsouza@mrc-apu.cam.ac.uk)\n            ftp.daimi.aau.dk:/pub/linux/poe/poeigl-1.37.tar.gz\n    hostname/dnsdomainname: Peter Tobias <tobias@server.et-inf.fho-emden.de>\n              This version (1.6) should also be available soon in:\n              nic.funet.fi:/pub/OS/Linux/PEOPLE/Linus/net-source/base/NetKit-A*\n    kill: BSD version, modified by Salvatore Valente <svalente@mit.edu>\n    logger: 8.1 (Berkeley) 6/6/93, with modifications by Rik Faith\n            ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n    look.c: 8.1 (Berkeley) 6/14/93, with modifications by Rik Faith\n            ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n    mcookie: Rik Faith (faith@cs.unc.edu)\n    md5sum: Branki Lankester and Colin Plumb.  The MD5 message-digest\n            algorithm is in the Public Domain.  This implementation\n            calculates message-digest information only, and can NOT be used\n            for encryption.  Therefore it is exportable from the USA.\n            Original sources in the MIT version of PGP 2.6.2.\n    namei: Roger S. Southwick, with modifications by Steve Tell.\n    reset: Rik Faith\n    script: 5.13 (Berkeley) 3/5/91, with modifications by Rick Sladkey\n            (jrs@world.std.com), Harald Koenig\n            (koenig@nova.tat.physik.uni-tuebingen.de).\n    setterm: Gordon Irlam (gordoni@cs.ua.oz.au), with modifications by\n             Peter MacDonald, Mika Liljeberg (liljeber@cs.Helsinki.FI),\n             John Walder (j-walder@uiuc.edu) [for dosemu].\n    tsort: 5.3 (Berkeley) 6/1/90\n           wuarchive.wustl.edu:/mirrors/4.3-reno\n    whereis: 5.5 (Berkeley) 4/18/91\n             wuarchive.wustl.edu:/mirrors/4.3-reno\n    write: 8.1 (Berkeley) 6/6/93, with modifications by Mike Grupenhoff\n           (kashmir@umiacs.umd.edu).  With changes so that damaging escape\n           sequences cannot be sent.\n           ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n\n\nmount:\n    mount, umount, swapon\n\n    Rick Sladkey put together the mount-0.99.6.tar.Z package, and Stephen\n    Tweedie provided updates.  The utilities were originally from that\n    package (all appear to be by Doug Quale (quale@saavik.cs.wisc.edu),\n    with modifications by H. J. Lu (hlu@eecs.wsu.edu) on 11/25/92; Rick\n    Sladkey (jrs@world.std.com) in January 1993; and Stephen Tweedie\n    <sct@dcs.ed.ac.uk> on 8 October 1993.  This distribution mount now\n    supports NFS stuff.  I have modified the man pages.  I have also added\n    a small patch from Hamish Glen Coleman (t933093@minyos.xx.rmit.OZ.AU)\n    which restores the -o semantics.\n\n    Updated with Rick Sladkey's mount-0.99.14.tar.gz package, and with\n    extra patches from Rick.  Adam J. Richter allowed -t option to be\n    optional. Patrick J. Volkerding (volkerdi@mhd1.moorhead.msus.edu) and\n    Mitchum DSouza both provided patches that fixed the (null) problem when\n    not using -t. Mitchum DSouza\n    (mitch@mrc-applied-psychology.cambridge.ac.uk) added support for loop\n    device mounts. Sebastian Lederer\n    (lederer@next-pc.informatik.uni-bonn.de) added support for sending an\n    unmount RPC call to the server when an NFS-filesystem is unmounted.\n    Sander van Malssen (svm@kozmix.hacktic.nl) added support for remounting\n    readonly file systems readonly.  Mike Grupenhoff\n    <kashmir@umiacs.UMD.EDU> added a probe of the superblock for the type\n    before /proc/filesystems is checked.  Andries.Brouwer@cwi.nl fixed up\n    error reporting.\n\n    Updated with patches from Andries.Brouwer@cwi.nl and Dan Quinlan\n    (quinlan@yggdrasil.com).  And more patches from Andries and others.\n\nhistoric/selection: The complete selection-1.5 package, by Andrew Haylett\n    <ajh@gec-mrc.co.uk>, 17th June 1993, is included in the historic tree.\n    Kernel patches are no longer necessary for modern kernels, but these\n    were tiny so I left them in for historical reasons.  The Makefile was\n    modified for this distribution.  With changes from Rick Sladkey.\n\nsys-utils:\n    arch: Rik Faith <faith@cs.unc.edu>\n    chroot: Rick Sladkey <jrs@world.std.com>\n    clock: Originally from the timesrc-1.2.tar.Z package, Charles Hedrick,\n           hedrick@cs.rutgers.edu (V1.0); Rob Hooft, hooft@chem.ruu.nl\n           (V1.1); Harald Koenig (koenig@nova.tat.physik.uni-tuebingen.de)\n           (V1.2).  With additional changes: Hamish Coleman\n           (hamish@zot.apana.org.au) (V1.2a); Alan Modra\n           (alan@spri.levels.unisa.edu.au (V1.3, V1.4).\n    ctrlaltdel: Peter Orbaek <poe@daimi.aau.dk>\n                ftp://ftp.daimi.aau.dk/pub/linux/poe/admutil-1.16.tar.gz\n    cytune: Nick Simicish (njs@scifi.emi.net) and Rik Faith (faith@cs.unc.edu)\n    dmesg: Theodore Ts'o (tytso@athena.mit.edu); Rick Sladkey\n           (jrs@world.std.com)\n    ipcrm: From the ipcdelta.tar.z distribution by krishna\n           balasub@cis.ohio-state.edu on 3/15/93.  ipc.info and ipc.texi\n           are also from that distribution.\n    ipcs: Also from the ipcdelta.tar.z distribution by krishna\n          balasub@cis.ohio-state.edu, with patches from Mike Jagdis\n          (jaggy@purplet.demon.co.uk)\n    kbdrate: Rik Faith (faith@cs.unc.edu), with patches from\n             Andries.Brouwer@cwi.nl and John Bowman\n             (bowman@hagar.ph.utexas.edu)\n    ksymoops: 1.7 from Greg McGary <gkm@magilla.cichlid.com>\n    rdev: almesber@nessie.cs.id.ethz.ch (Werner Almesberger), with\n          modifications from Peter MacDonald, Stephen Tweedie\n          (sct@dcs.ed.ac.uk), and Dave (gentzel@nova.enet.dec.com)\n    readprofile: Alessandro Rubini from readprofile-2.0.tar.gz\n    renice: 8.1 (Berkeley) 6/9/93\n            ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n    setserial: Michael K. Johnson (johnsonm@stolaf.edu) re-released Rick\n               Sladkey's setserial in January 1993, with changes by\n               Theodore Ts'o (tytso@mit.edu).  I think that Theodore also\n               did extensive changes for version 2.01, I can't find any\n               notes about this in the documentation. However, Theodore\n               Ts'o (tytso@ATHENA.MIT.EDU) released version 2.10, and that\n               is now included.\n    setsid: Rick Sladkey <jrs@world.std.com>\n    sln: Mike Parker and David MacKenzie (from Linux's libc)\n    sync: Nick Holloway, with thanks to James Bonfield\n    tunelp: Michael K. Johnson (johnsonm@nigel.vnet.net)\n\n\nsyslogd:\n   5.45 (Berkeley) 3/2/91\n\n   Most of the changes for syslogd come from Rick Sladkey\n   (jrs@world.std.com), but I'd like to thank other people who sent in\n   changes (which usually got forwarded to Rick): Carsten Paeth\n   (calle@calle.in-berlin.de) and Kaz Sasayama (kaz@lilia.iijnet.or.jp).\n\ntext-utils:\n    col: 5.3 (Berkeley) 2/2/91; with patches from Andries.Brouwer@cwi.nl\n         and Carl Christofferson (cchris@connected.com)\n         wuarchive.wustl.edu:/mirrors/4.3-reno/{bin,usr.bin}\n    colcrt: 8.1 (Berkeley) 6/6/93 (Bill Joy)\n            ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n    colrm: 5.4 (Berkeley) 6/1/90 (Jeff Schriebman)\n    column: 8.3 (Berkeley) 4/2/94\n            ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n    hexdump: 5.5 (Berkeley) 6/1/90\n             wuarchive.wustl.edu:/mirrors/4.3-reno/{bin,usr.bin}\n    more: 5.19 (Berkeley) 6/29/88 (Eric Shienbrood, Geoff Peck, John Foderaro)\n    rev: 5.2 (Berkeley) 3/21/92; with modifications by Charles Hannum\n         (mycroft@gnu.ai.mit.edu), Brian Koehmstedt (bpk@gnu.ai.mit.edu),\n         bjdouma@xs4all.nl\n         wuarchive.wustl.edu:/mirrors/4.3-reno/{bin,usr.bin}\n    strings: 5.10 (Berkeley) 5/23/91; with patches from Vitor Duarte\n             <vad@fct.unl.pt>\n             wuarchive.wustl.edu:/mirrors/4.3-reno/{bin,usr.bin}\n    ul: 8.1 (Berkeley) 6/6/93\n        ftp.cdrom.com:/pub/bsd-sources/4.4BSD-Lite/usr/src/usr.bin\n\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 4.8828125,
          "content": "\n\t\t\t\t  util-linux\n\n\t\tutil-linux is a random collection of Linux utilities\n\n     Note: for the years 2006-2010 this project was named \"util-linux-ng\".\n\nCOMPILE & INSTALL:\n\n      See Documentation/howto-compilation.txt.\n\nMAILING LIST:\n\n      E-MAIL:  util-linux@vger.kernel.org\n      URL:     http://vger.kernel.org/vger-lists.html#util-linux\n      ARCHIVE: https://lore.kernel.org/util-linux/\n\n      The mailing list will reject email messages that contain:\n       - more than 100K characters\n       - html\n       - spam phrases/keywords\n      See: http://vger.kernel.org/majordomo-info.html#taboo\n\nIRC CHANNEL:\n\n      #util-linux at libera.chat:\n\n      irc://irc.libera.chat/util-linux\n\n      The IRC channel and Mailing list are for developers and project\n      maintainers. For end users it is recommended to utilize the\n      distribution's support system.\n\nBUG REPORTING:\n\n      E-MAIL: util-linux@vger.kernel.org\n      Web:    https://github.com/util-linux/util-linux/issues\n\n      Bug reports with sensitive or private information: Karel Zak <kzak@redhat.com>\n\n      This project has no resources to provide support for distribution specific\n      issues. For end users it is recommended to utilize the distribution's\n      support system.\n\nNLS (PO TRANSLATIONS):\n\n      PO files are maintained by:\n\t  https://translationproject.org/domain/util-linux.html\n\nVERSION SCHEMA:\n\n      Standard releases:\n\t  <major>.<minor>[.<maint>]\n\t     major = fatal and deep changes\n\t     minor = typical release with new features\n\t     maint = maintenance releases; bug fixes only\n\n      Development releases:\n\t <major>.<minor>-rc<N>\n\nSOURCE CODE:\n\n Download archive:\n\t  https://www.kernel.org/pub/linux/utils/util-linux/\n\n See also:\n     Documentation/howto-contribute.txt\n     Documentation/howto-build-sys.txt\n     Documentation/howto-pull-request.txt\n\n SCM (Source Code Management) Repository:\n\n    Primary repository:\n\t  git clone git://git.kernel.org/pub/scm/utils/util-linux/util-linux.git\n\n    Backup repository:\n\t  git clone https://github.com/util-linux/util-linux.git\n\n    Web interfaces:\n\t  https://git.kernel.org/cgit/utils/util-linux/util-linux.git\n\t  https://github.com/util-linux/util-linux\n\n      Note: the GitHub repository may contain temporary development branches too.\n\n      The kernel.org repository contains master (current development) and stable/*\n      (maintenance) branches only. All master or stable/* changes are always pushed\n      to both repositories at the same time.\n\n    Repository Branches: 'git branch -a'\n\t  Master Branch:\n\t   - Continuously developed, no feature freeze or translation freezes.\n\t   - Day-to-day status is: 'it works for me'. This means that its\n\t     normal state is useful but not well tested.\n\n\t  Stable Branches:\n\t   - Public releases.\n\t   - Branch name: stable/v<major>.<minor>.\n\t   - Created from the 'master' branch.\n\t   - The release candidates and final release are always based\n             on the stable branch.\n\t   - Maintenance releases are part of, and belong to, their respective\n\t     stable branch. As such, they are tags(<major>.<minor>.<maint>) and\n\t     not branches of their own. They are not part of, visible in, or\n\t     have anything to do with the 'master' development branch. In git\n\t     terminology: maintenance releases are not reachable from 'master'.\n\t   - When initially cloned (as with the 'git clone' command given above),\n\t     these branches are created as 'remote tracking branches' and are\n\t     only visible by using the -a or -r options to 'git branch'. To\n\t     create a local branch, use the desired tag with this command:\n\t     'git checkout -b v2.29.2 v2.29.2'\n\n    Tags: 'git tag'\n\t   - v<version> tag is created in the stable branch for every release.\n\t   - v<version>-devel is created in the master branch to start work on the next release.\n\t   - All tags are signed by the maintainer's PGP key.\n\n\nWORKFLOW EXAMPLE:\n\n    Development                     Releases\n    (Master Branch)                 (Stable/vX.Y Branch)\n\n    - Sync latest translations\n      from translationproject.org\n    - Tag v<X.Y+1>-devel            - Fork from master to stable/v<X.Y> branch\n                                      - Code stabilization\n                                    - RC1 (Tag v<X.Y>-rc1)\n                                      - Backport bug fixes\n                                    - RC2 (Tag v<X.Y>-rc2)\n                                      - po/ and po-man/ translations available on\n                                        translationproject.org/\n                                      - Wait 7-17 days for translators\n                                      - Sync latest translations\n                                      - Backport bug fixes\n                                    - Final release v<X.Y> (Tag v<X.Y>)\n                                      ...\n                                    - Release v<X.Y>.1\n                                      ...\n                                    - Release v<X.Y>.2\n\n"
        },
        {
          "name": "README.licensing",
          "type": "blob",
          "size": 1.0126953125,
          "content": "\nThe project util-linux doesn't use the same license for all of the code.\nThere is code under:\n\n   * GPL-1.0-or-later   - GNU General Public License version 1, or any later version\n\n   * GPL-2.0-only       - GNU General Public License version 2\n\n   * GPL-2.0-or-later   - GNU General Public License version 2, or any later version\n\n   * GPL-3.0-or-later   - GNU General Public License version 3, or any later version\n\n   * LGPL-2.1-or-later  - GNU Lesser General Public License 2.1 or any later version\n\n   * MIT                - MIT License\n\n   * BSD-2-Clause       - Simplified BSD License\n\n   * BSD-3-Clause       - BSD 3-Clause \"New\" or \"Revised\" License\n\n   * BSD-4-Clause-UC    - BSD 4-Clause University of California-Specific\n\n   * EUPL-1.2           - European Union Public Licence version 1.2\n\n   * Public Domain\n\nPlease, check the source code for more details. A license is usually at the start\nof each source file.\n\nThe ./COPYING file (GPL-2.0-or-later) is the default license for code without\nan explicitly defined license.\n\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 4.140625,
          "content": "#!/bin/sh\n\n#\n# Helps generate autoconf/automake stuff, when code is checked out from SCM.\n#\n# Copyright (C) 2006-2010 - Karel Zak <kzak@redhat.com>\n#\n\nsrcdir=`dirname $0`\ntest -z \"$srcdir\" && srcdir=.\n\nTHEDIR=`pwd`\ncd $srcdir\nDIE=0\n\nwarn_mesg ()\n{\n\techo\n\techo \"WARNING: $1\"\n\ttest -z \"$2\" ||\n\t\techo \"       $2\"\n\techo\n}\n\nerror_mesg ()\n{\n\techo\n\techo \"ERROR: $1\"\n\ttest -z \"$2\" ||\n\t\techo \"       $2\"\n\techo\n\tDIE=1\n}\n\n# provide simple gettext backward compatibility\nautopoint_fun ()\n{\n\t# we have to deal with set -e ...\n\tret=\"0\"\n\n\t# check against this hardcoded set of alternative gettext versions\n\tgt_ver=`gettext --version |\\\n\t\tsed -n -e 's/.* \\(0\\.17\\|0\\.18\\|0\\.18\\.[1-2]\\)$/\\1/p'`\n\n\tif [ -n \"$gt_ver\" ]; then\n\t\twarn_mesg \"warning: forcing autopoint to use old gettext $gt_ver\"\n\t\trm -f configure.ac.autogenbak\n\t\tsed -i.autogenbak configure.ac \\\n\t\t\t-e \"s/\\(AM_GNU_GETTEXT_VERSION\\).*/\\1([$gt_ver])/\"\n\tfi\n\n\tautopoint \"$@\" || ret=$?\n\n\tif [ -n \"$gt_ver\" ]; then\n\t\tmv configure.ac.autogenbak configure.ac\n\tfi\n\n\treturn $ret\n}\n\ntest -f sys-utils/mount.c ||\n\terror_mesg \"You must run this script in the top-level util-linux directory.\"\n\n(autopoint --version) < /dev/null > /dev/null 2>&1 ||\n\terror_mesg \"You must have autopoint installed to generate the util-linux build system.\" \"The autopoint command is part of the GNU gettext package.\"\n\n(autoconf --version) < /dev/null > /dev/null 2>&1 ||\n\terror_mesg \"You must have autoconf installed to generate the util-linux build system.\"\n\n(autoheader --version) < /dev/null > /dev/null 2>&1 ||\n\terror_mesg \"You must have autoheader installed to generate the util-linux build system.\"  \"The autoheader command is part of the GNU autoconf package.\"\n\n[ -x \"$(command -v gettext)\" -o -x \"$(command -v xgettext)\" ] ||\n\twarn_mesg \"You need have [x]gettext binary installed to update po/ stuff.\"\n\n(flex --version) < /dev/null > /dev/null 2>&1 ||\n\terror_mesg \"You must have flex installed to build the util-linux.\"\n\nif ! (bison --version) < /dev/null > /dev/null 2>&1; then\n\terror_mesg \"You must have bison installed to build the util-linux.\"\nelse\n\tlexver=$(bison --version | awk '/^bison \\(GNU [Bb]ison\\)/ { print $4 }')\n\tcase \"$lexver\" in\n\t\t[2-9].*)\n\t\t\t;;\n\t\t*)\n\t\t\terror_mesg \"You must have bison version >= 2.x, but you have $lexver.\"\n\t\t\t;;\n\tesac\nfi\n\n\nLIBTOOLIZE=libtoolize\ncase `uname` in Darwin*) LIBTOOLIZE=glibtoolize ;; esac\nif ! ($LIBTOOLIZE --version) < /dev/null > /dev/null 2>&1; then\n\terror_mesg \"You must have libtool-2 installed to generate the util-linux build system.\"\nelse\n\tltver=$($LIBTOOLIZE --version | awk '/^[g]*libtoolize/ { print $4 }')\n\tltver=${ltver:-\"none\"}\n\ttest ${ltver##2.} = \"$ltver\" &&\n\t\terror_mesg \"You must have libtool version >= 2.x.x, but you have $ltver.\"\nfi\n\n(automake --version) < /dev/null > /dev/null 2>&1 ||\n\terror_mesg \"You must have automake installed to generate the util-linux build system.\"\n\nif test \"$DIE\" -eq 1; then\n\texit 1\nfi\n\necho\necho \"Generating build-system with:\"\necho \"   autopoint:  $(autopoint --version | head -1)\"\necho \"   aclocal:    $(aclocal --version | head -1)\"\necho \"   autoconf:   $(autoconf --version | head -1)\"\necho \"   autoheader: $(autoheader --version | head -1)\"\necho \"   automake:   $(automake --version | head -1)\"\necho \"   libtoolize: $($LIBTOOLIZE --version | head -1)\"\necho \"   flex:       $(flex --version | head -1)\"\necho \"   bison:      $(bison --version | head -1)\"\necho\n\nrm -rf autom4te.cache\n\nset -e\npo/update-potfiles\nautopoint_fun --force $AP_OPTS\nif ! grep -q datarootdir po/Makefile.in.in; then\n\techo \"INFO: autopoint does not honor dataroot variable, patching.\"\n\tsed -i -e 's/^datadir *=\\(.*\\)/datarootdir = @datarootdir@\\\ndatadir = @datadir@/g' po/Makefile.in.in\nfi\n$LIBTOOLIZE --force $LT_OPTS\n\n# patch libtool\nif test -f tools/libtool.m4.patch; then\n\tif test -L m4/libtool.m4; then\n\t\tcp m4/libtool.m4 m4/libtool.m4.org\n\t\trm m4/libtool.m4\n\t\tmv m4/libtool.m4.org m4/libtool.m4\n\tfi\n\tset +e\n\tpatch --batch --dry -p1 < tools/libtool.m4.patch > /dev/null 2>&1\n\tif [ \"$?\" -eq 0 ]; then\n\t\tpatch -p1 --batch < tools/libtool.m4.patch\n\tfi\n\tset -e\nfi\n\naclocal -I m4 $AL_OPTS\nautoconf $AC_OPTS\nautoheader $AH_OPTS\n\nautomake --add-missing $AM_OPTS\n\n\ncd \"$THEDIR\"\n\necho\necho \"Now type '$srcdir/configure' and 'make' to compile.\"\necho\n\n\n"
        },
        {
          "name": "bash-completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 94.7333984375,
          "content": "AC_INIT([util-linux],\n\tm4_esyscmd([tools/git-version-gen .tarball-version]),\n\t[kzak@redhat.com], [],\n\t[https://www.kernel.org/pub/linux/utils/util-linux/])\n\n\nAC_PREREQ([2.64])\n\nAC_CONFIG_AUX_DIR([config])\nAC_CONFIG_MACRO_DIR([m4])\ndnl AC_USE_SYSTEM_EXTENSIONS must be called before any macros that run\ndnl the compiler (like LT_INIT) to avoid autoconf errors.\nAC_USE_SYSTEM_EXTENSIONS\nAM_INIT_AUTOMAKE([-Wall -Wno-portability foreign 1.10 tar-pax no-dist-gzip dist-xz subdir-objects])\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])],\n\t\t\t    [AC_SUBST([AM_DEFAULT_VERBOSITY], [1])])\nm4_ifdef([AM_PROG_AR], [AM_PROG_AR])\n\nAC_CONFIG_SRCDIR([sys-utils/mount.c])\nAC_PREFIX_DEFAULT([/usr])\n\ndnl version details from <major>.<minor>[-<suffix>]\nPACKAGE_VERSION_MAJOR=$(echo $PACKAGE_VERSION | awk -F. '{print $1}')\nPACKAGE_VERSION_MINOR=$(echo $PACKAGE_VERSION | awk -F. '{\n\t\t\t\t\t\t   sub(\"-.*\",\"\",$2); print $2}')\nPACKAGE_VERSION_RELEASE=$(echo $PACKAGE_VERSION | awk -F. '{\n\t\t     sub(\"-.*\",\"\",$3); print $3 ~ /^@<:@0-9@:>@+$/ ? $3 : 0}')\n\ndnl libblkid version\nLIBBLKID_VERSION=\"$PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_RELEASE\"\nLIBBLKID_DATE=\"24-Jan-2024\"\nLIBBLKID_LT_MAJOR=1\nLIBBLKID_LT_MINOR=1\nLIBBLKID_LT_MICRO=0\nLIBBLKID_VERSION_INFO=`expr $LIBBLKID_LT_MAJOR + $LIBBLKID_LT_MINOR`:$LIBBLKID_LT_MICRO:$LIBBLKID_LT_MINOR\n\ndnl libuuid version\nLIBUUID_VERSION=\"$PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_RELEASE\"\nLIBUUID_LT_MAJOR=1\nLIBUUID_LT_MINOR=3\nLIBUUID_LT_MICRO=0\nLIBUUID_VERSION_INFO=`expr $LIBUUID_LT_MAJOR + $LIBUUID_LT_MINOR`:$LIBUUID_LT_MICRO:$LIBUUID_LT_MINOR\n\ndnl liblastlog2 version\nLIBLASTLOG2_VERSION=\"$PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_RELEASE\"\nLIBLASTLOG2_LT_MAJOR=2\nLIBLASTLOG2_LT_MINOR=0\nLIBLASTLOG2_LT_MICRO=0\nLIBLASTLOG2_VERSION_INFO=`expr $LIBLASTLOG2_LT_MAJOR + $LIBLASTLOG2_LT_MINOR`:$LIBLASTLOG2_LT_MICRO:$LIBLASTLOG2_LT_MINOR\n\ndnl libmount version\nLIBMOUNT_VERSION=\"$PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_RELEASE\"\nLIBMOUNT_LT_MAJOR=1\nLIBMOUNT_LT_MINOR=1\nLIBMOUNT_LT_MICRO=0\nLIBMOUNT_VERSION_INFO=`expr $LIBMOUNT_LT_MAJOR + $LIBMOUNT_LT_MINOR`:$LIBMOUNT_LT_MICRO:$LIBMOUNT_LT_MINOR\n\ndnl libsmartcols version\nLIBSMARTCOLS_VERSION=\"$PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_RELEASE\"\nLIBSMARTCOLS_LT_MAJOR=1\nLIBSMARTCOLS_LT_MINOR=1\nLIBSMARTCOLS_LT_MICRO=0\nLIBSMARTCOLS_VERSION_INFO=`expr $LIBSMARTCOLS_LT_MAJOR + $LIBSMARTCOLS_LT_MINOR`:$LIBSMARTCOLS_LT_MICRO:$LIBSMARTCOLS_LT_MINOR\n\ndnl libfdisk version\nLIBFDISK_VERSION=\"$PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_RELEASE\"\nLIBFDISK_LT_MAJOR=1\nLIBFDISK_LT_MINOR=1\nLIBFDISK_LT_MICRO=0\nLIBFDISK_VERSION_INFO=`expr $LIBFDISK_LT_MAJOR + $LIBFDISK_LT_MINOR`:$LIBFDISK_LT_MICRO:$LIBFDISK_LT_MINOR\n\n# Check whether exec_prefix=/usr:\nAS_CASE([$exec_prefix:$prefix],\n[NONE:NONE | NONE:/usr | /usr:*],\n  [AC_MSG_NOTICE([Default --exec-prefix detected.])\n   AS_CASE([$bindir],  ['${exec_prefix}/bin'],  [bindir=/bin;   AC_MSG_NOTICE([  --bindir defaults to /bin])  ])\n   AS_CASE([$sbindir], ['${exec_prefix}/sbin'], [sbindir=/sbin; AC_MSG_NOTICE([  --sbindir defaults to /sbin])])\n   AS_CASE([$libdir],  ['${exec_prefix}/lib'],  [libdir=/lib;   AC_MSG_NOTICE([  --libdir defaults to /lib])  ])\n   AS_CASE([$libdir],  ['${exec_prefix}/lib64'],[libdir=/lib64; AC_MSG_NOTICE([  --libdir defaults to /lib64])  ])\n  ]\n)\n\n# Check whether prefix=/usr\nAS_CASE([$prefix],\n[NONE | /usr],\n  [AC_MSG_NOTICE([Default --prefix detected.])\n   AS_CASE([$localstatedir], [NONE | '${prefix}/var' | \"${prefix}\"/var ],\n\t   [localstatedir=/var; AC_MSG_NOTICE([  --localstatedir defaults to /var])])\n   AS_CASE([$sysconfdir], [NONE | '${prefix}/etc' | \"${prefix}\"/etc ],\n\t   [sysconfdir=/etc; AC_MSG_NOTICE([  --sysconfdir defaults to /etc])])\n\n  ]\n)\nAC_SUBST([localstatedir])\n\n\n# default for old versions without $runstatedir\nAS_IF([test x\"$runstatedir\" = x], [runstatedir='${localstatedir}/run'])\n\n# our default if $localstatedir unchanged\nAS_CASE([$localstatedir:$runstatedir],\n [NONE:'${localstatedir}/run' | /var:'${localstatedir}/run' | NONE:'/run' ],\n   [runstatedir=/run; AC_MSG_NOTICE([  --runstatedir defaults to /run])]\n)\nAC_SUBST([runstatedir])\n\n\n# The original default values of {bin,sbin,lib}dir\nusrbin_execdir='${exec_prefix}/bin'\nAC_SUBST([usrbin_execdir])\n\nusrsbin_execdir='${exec_prefix}/sbin'\nAC_SUBST([usrsbin_execdir])\n\nAS_CASE([$libdir],\n ['${exec_prefix}/'* | '${prefix}/'* | /usr/* | \"${prefix}\"/* ],\n   [usrlib_execdir=$libdir],\n [usrlib_execdir='${exec_prefix}'$libdir]\n)\nAC_SUBST([usrlib_execdir])\n\nsecurelib_execdir='${libdir}/security'\nAC_SUBST([securelib_execdir])\n\n# static configuration maintained by packages (e.g. /usr/lib)\nAC_ARG_VAR([SYSCONFSTATICDIR],\n\t   [Path to static system configuration, default ${prefix}/lib])\nAS_IF([test \"x$SYSCONFSTATICDIR\" = x],\n      [sysconfstaticdir='${prefix}/lib'],\n      [sysconfstaticdir=$SYSCONFSTATICDIR])\nAC_SUBST([sysconfstaticdir])\n\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_PROG_MKDIR_P\nAC_PROG_YACC\nAC_PROG_SED\n\n# Don't use autotools integrated LEX/YACC support for libsmartcols\nAC_PATH_PROG([FLEX], [flex])\nAC_PATH_PROG([BISON], [bison])\n\nAC_CANONICAL_HOST\nAC_C_CONST\nAC_C_VOLATILE\n\ndnl Compiler warnings\nUL_WARN_ADD([-fno-common])\nUL_WARN_ADD([-Wall])\nUL_WARN_ADD([-Wextra])\n\nUL_WARN_ADD([-Waddress-of-packed-member])\nUL_WARN_ADD([-Wdiscarded-qualifiers])\nUL_WARN_ADD([-Wembedded-directive])\nUL_WARN_ADD([-Wextra-semi])\nUL_WARN_ADD([-Wformat-security])\nUL_WARN_ADD([-Wimplicit-function-declaration])\nUL_WARN_ADD([-Wmissing-declarations])\nUL_WARN_ADD([-Wmissing-parameter-type])\nUL_WARN_ADD([-Wmissing-prototypes])\nUL_WARN_ADD([-Wnested-externs])\nUL_WARN_ADD([-Wno-missing-field-initializers])\nUL_WARN_ADD([-Wold-style-definition])\nUL_WARN_ADD([-Wpointer-arith])\nUL_WARN_ADD([-Wredundant-decls])\nUL_WARN_ADD([-Wsign-compare])\nUL_WARN_ADD([-Wstrict-prototypes])\nUL_WARN_ADD([-Wtype-limits])\nUL_WARN_ADD([-Wuninitialized])\nUL_WARN_ADD([-Wunused-but-set-parameter])\nUL_WARN_ADD([-Wunused-but-set-variable])\nUL_WARN_ADD([-Wunused-parameter])\nUL_WARN_ADD([-Wunused-result])\nUL_WARN_ADD([-Wunused-variable])\nUL_WARN_ADD([-Wvla])\nUL_WARN_ADD([-Walloca])\n\nAC_ARG_ENABLE([werror],\n  AS_HELP_STRING([--enable-werror], [make all compiler warnings into errors]),\n  [], [enable_werror=no]\n)\nAS_IF([test \"x$enable_werror\" = xyes], [\n  UL_WARN_ADD([-Werror])\n],[\n  UL_WARN_ADD([-Werror=sequence-point])\n])\n\nAC_SUBST([WARN_CFLAGS])\n\n\nUL_WARN_ADD([-Wno-clobbered], [BSD_WARN_CFLAGS])\nAC_SUBST([BSD_WARN_CFLAGS])\n\nUL_WARN_ADD([-Wno-cast-function-type], [PYTHON_WARN_CFLAGS])\nAC_SUBST([PYTHON_WARN_CFLAGS])\n\n\nAC_ARG_ENABLE([asan],\n  AS_HELP_STRING([--enable-asan], [compile with Address Sanitizer]),\n  [], [enable_asan=no]\n)\nAS_IF([test \"x$enable_asan\" = xyes], [\n  UL_WARN_ADD([-fsanitize=address])\n  ASAN_LDFLAGS=\"-fsanitize=address\"\n])\nAC_SUBST([ASAN_LDFLAGS])\n\nAC_ARG_ENABLE([ubsan],\n  AS_HELP_STRING([--enable-ubsan], [compile with UBsan]),\n  [], [enable_ubsan=no]\n)\nAS_IF([test \"x$enable_ubsan\" = xyes], [\n  UL_WARN_ADD([-fsanitize=undefined])\n  UBSAN_LDFLAGS=\"-fsanitize=undefined\"\n])\nAC_SUBST([UBSAN_LDFLAGS])\n\nAC_ARG_ENABLE([fuzzing-engine],\n  AS_HELP_STRING([--enable-fuzzing-engine], [compile with fuzzing engine]),\n  [], [enable_fuzzing_engine=no]\n)\nAS_IF([test \"x$enable_fuzzing_engine\" = xyes && test \"x$LIB_FUZZING_ENGINE\" = x], [\n  UL_WARN_ADD([-fno-omit-frame-pointer])\n  UL_WARN_ADD([-gline-tables-only])\n  UL_WARN_ADD([-fsanitize=fuzzer-no-link])\n  FUZZING_ENGINE_LDFLAGS=\"-fsanitize=fuzzer-no-link\"\n])\nAC_SUBST([FUZZING_ENGINE_LDFLAGS])\nAC_PROG_CXX\nAM_CONDITIONAL([FUZZING_ENGINE], [test \"x$enable_fuzzing_engine\" = xyes])\nAM_CONDITIONAL([OSS_FUZZ], [test \"x$LIB_FUZZING_ENGINE\" != x])\n\nAC_ARG_ENABLE([coverage],\n  AS_HELP_STRING([--enable-coverage], [compile with gcov]),\n  [], [enable_coverage=no]\n)\nAS_IF([test \"x$enable_coverage\" = xyes], [\n  UL_WARN_ADD([--coverage])\n  COVERAGE_LDFLAGS=\"--coverage\"\n])\nAC_SUBST([COVERAGE_LDFLAGS])\nAM_CONDITIONAL([WITH_COVERAGE], [test \"x$enable_coverage\" = xyes])\n\ndnl libtool-2\nLT_INIT\n\ndnl check supported linker flags\nAX_CHECK_VSCRIPT\n\nm4_ifndef([PKG_PROG_PKG_CONFIG],\n  [m4_fatal([Could not locate the pkg-config autoconf\n    macros. These are usually located in /usr/share/aclocal/pkg.m4.\n    If your macros are in a different location, try setting the\n    environment variable AL_OPTS=\"-I/other/macro/dir\" before running\n    ./autogen.sh or autoreconf again. Make sure pkg-config is installed.])])\nPKG_PROG_PKG_CONFIG\nPKG_INSTALLDIR(['${usrlib_execdir}/pkgconfig'])\n\nGTK_DOC_CHECK([1.10])\nAC_PATH_PROG([XSLTPROC], [xsltproc])\n\n\nlinux_os=no\nbsd_os=no\ngnu_os=no\nAS_CASE([${host_os}],\n  [*linux*],\n     [linux_os=yes],\n  [*darwin*],\n     [darwin_os=yes],\n  [*bsd*],\n     [bsd_os=yes],\n  [gnu*],\n     [gnu_os=yes])\nAM_CONDITIONAL([LINUX], [test \"x$linux_os\" = xyes])\nAM_CONDITIONAL([DARWIN], [test \"x$darwin_os\" = xyes])\nAM_CONDITIONAL([BSD], [test \"x$bsd_os\" = xyes])\nAM_CONDITIONAL([HURD], [test \"x$gnu_os\" = xyes])\n\nAS_IF([test  \"x$darwin_os\" = xyes], [\n  AC_DEFINE([_DARWIN_C_SOURCE], [1], [Enable MAP_ANON in sys/mman.h on Mac OS X])\n])\n\ndnl define ARCH_<NAME> conditionals\nUL_SET_ARCH([I86], [i?86-*])\nUL_SET_ARCH([86_64], [x86_64*])\nUL_SET_ARCH([IA64], [ia64*])\nUL_SET_ARCH([S390], [s390*])\nUL_SET_ARCH([SPARC], [sparc*])\nUL_SET_ARCH([PPC], [ppc*|powerpc*])\nUL_SET_ARCH([M68K], [m68*])\nUL_SET_ARCH([MIPS], [mips*])\nUL_SET_ARCH([HPPA], [hppa*|parisc*])\n\nAC_SYS_LARGEFILE\nAC_HEADER_ASSERT\nAC_STRUCT_TIMEZONE\nUL_YEAR2038_INIT\nAC_SYS_YEAR2038_RECOMMENDED\n\ndnl Don't forget to maintain alternatively allowed versions in autogen.sh!\nAM_GNU_GETTEXT_VERSION([0.18.3])\nAM_GNU_GETTEXT([external])\n\nAS_IF([test -d \"$srcdir/po\"], [\n  ALL_LINGUAS=`cd $srcdir/po > /dev/null && echo *.po | sed 's/\\.po//g'`\n], [dnl echo $ALL_LINGUAS | sed 's/ /\\n/g' | sort -u | column -xc 72 -o ' ' | sed 's/^/\\t/'\n  ALL_LINGUAS=\"\n\taf      am      ar      as      be      bg      bn      bn_IN   ca\n\tcs      cy      da      de      el      en_GB   es      et      eu_ES\n\tfa      fi      fr      gl      gu      he      hi      hr      hu\n\thy      id      is      it      ja      ka      kn      ko      ku\n\tlo      lt      lv      mk      ml      mr      ms      my      nb\n\tnl      nn      no      nso     or      pa      pl      pt      pt_BR\n\tro      ru      si      sk      sl      sq      sr      sr@Latn sv\n\tta      te      th      tr      uk      ur      vi      zh_CN   zh_TW\n\tzu\n\"])\n\nAC_CHECK_HEADERS([linux/compiler.h linux/blkpg.h linux/major.h], [], [], [\n#ifdef HAVE_LINUX_COMPILER_H\n#include <linux/compiler.h>\n#endif\n])\nAC_CHECK_HEADERS([ \\\n\tasm/io.h \\\n\tbyteswap.h \\\n\tendian.h \\\n\terr.h \\\n\terrno.h \\\n\tfcntl.h \\\n\tgetopt.h \\\n\tinttypes.h \\\n\tlastlog.h \\\n\tlibutil.h \\\n\tlinux/audit.h \\\n\tlinux/bpf.h \\\n\tlinux/blkzoned.h \\\n\tlinux/btrfs.h \\\n\tlinux/capability.h \\\n\tlinux/cdrom.h \\\n\tlinux/falloc.h \\\n\tlinux/fd.h \\\n\tlinux/fiemap.h \\\n\tlinux/landlock.h \\\n\tlinux/kcmp.h \\\n\tlinux/net_namespace.h \\\n\tlinux/nsfs.h \\\n\tlinux/pr.h \\\n\tlinux/raw.h \\\n\tlinux/securebits.h \\\n\tlinux/tiocl.h \\\n\tlinux/version.h \\\n\tlinux/watchdog.h \\\n\tlinux/if_alg.h \\\n\tlocale.h \\\n\tmntent.h \\\n\tnet/if_dl.h \\\n\tnet/if.h \\\n\tnetinet/in.h \\\n\tpaths.h \\\n\tpty.h \\\n\tsecurity/pam_appl.h \\\n\tsecurity/pam_modules.h \\\n\tshadow.h \\\n\tstdint.h \\\n\tstdio_ext.h \\\n\tstdlib.h \\\n\tsys/disk.h \\\n\tsys/disklabel.h \\\n\tsys/endian.h \\\n\tsys/file.h \\\n\tsys/ioccom.h \\\n\tsys/ioctl.h \\\n\tsys/io.h \\\n\tsys/mkdev.h \\\n\tsys/mount.h \\\n\tsys/param.h \\\n\tsys/pidfd.h \\\n\tsys/prctl.h \\\n\tsys/resource.h \\\n\tsys/sendfile.h \\\n\tsys/signalfd.h \\\n\tsys/socket.h \\\n\tsys/sockio.h \\\n\tsys/stat.h \\\n\tsys/statfs.h \\\n\tsys/swap.h \\\n\tsys/syscall.h \\\n\tsys/sysmacros.h \\\n\tsys/time.h \\\n\tsys/timex.h \\\n\tsys/ttydefaults.h \\\n\tsys/types.h \\\n\tsys/ucred.h \\\n\tsys/un.h \\\n\tsys/vfs.h \\\n\tsys/xattr.h \\\n\tunistd.h \\\n\tutmp.h \\\n\tutmpx.h \\\n])\n\n# There is a collision in old kernel-headers. The both files mount.h and fs.h\n# define MS_* macros. Fixed by kernel commit e462ec50cb5fad19f6003a3d8087f4a0945dd2b1.\n#\nAC_CHECK_HEADERS([linux/fs.h ], [], [],\n [#ifdef HAVE_SYS_MOUNT_H\n   # include <linux/fs.h>\n   # include <sys/mount.h>\n  #endif\n])\n\nAC_CHECK_HEADERS([linux/mount.h ], [], [],\n [#ifdef HAVE_LINUX_MOUNT_H\n   # include <linux/mount.h>\n   #endif\n])\n\nAC_CHECK_HEADERS([linux/gsmmux.h ], [], [],\n [#ifdef LINUX_GSMMUX_H\n   # include <linux/gsmmux.h>\n   #endif\n])\n\nAC_CHECK_HEADERS([security/pam_misc.h],\n\t\t[AM_CONDITIONAL([HAVE_LINUXPAM], [true])],\n\t\t[AM_CONDITIONAL([HAVE_LINUXPAM], [false])], [\n#ifdef HAVE_SECURITY_PAM_APPL_H\n#include <security/pam_appl.h>\n#endif\n])\n\nAC_CHECK_DECLS([BLK_ZONE_REP_CAPACITY], [], [], [\n\t#include <linux/blkzoned.h>\n])\n\nAC_CHECK_DECLS([PR_REP_CAPACITY], [], [], [\n\t#include <linux/pr.h>\n])\n\nAC_CHECK_HEADERS([security/openpam.h], [], [], [\n#ifdef HAVE_SECURITY_PAM_APPL_H\n#include <security/pam_appl.h>\n#endif\n])\n\nAC_CHECK_HEADERS([langinfo.h],\n\t\t[AM_CONDITIONAL([HAVE_LANGINFO_H], [true])],\n\t\t[AM_CONDITIONAL([HAVE_LANGINFO_H], [false])])\n\nAC_MSG_CHECKING([whether langinfo.h defines ALTMON_x constants])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n\t#include <langinfo.h>\n]], [[\n\tchar *str;\n\tstr = nl_langinfo (ALTMON_1);\n\tstr = nl_langinfo (ALTMON_2);\n\tstr = nl_langinfo (ALTMON_3);\n\tstr = nl_langinfo (ALTMON_4);\n\tstr = nl_langinfo (ALTMON_5);\n\tstr = nl_langinfo (ALTMON_6);\n\tstr = nl_langinfo (ALTMON_7);\n\tstr = nl_langinfo (ALTMON_8);\n\tstr = nl_langinfo (ALTMON_9);\n\tstr = nl_langinfo (ALTMON_10);\n\tstr = nl_langinfo (ALTMON_11);\n\tstr = nl_langinfo (ALTMON_12);\n]])], [\n\tAC_MSG_RESULT([yes])\n\tAC_DEFINE([HAVE_LANGINFO_ALTMON], [1],\n\t\t[Define if langinfo.h defines ALTMON_x constants])\n], [\n\tAC_MSG_RESULT([no])\n])\n\n\nAC_MSG_CHECKING([whether langinfo.h defines _NL_ABALTMON_x constants])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n\t#include <langinfo.h>\n]], [[\n\tchar *str;\n\tstr = nl_langinfo (_NL_ABALTMON_1);\n\tstr = nl_langinfo (_NL_ABALTMON_2);\n\tstr = nl_langinfo (_NL_ABALTMON_3);\n\tstr = nl_langinfo (_NL_ABALTMON_4);\n\tstr = nl_langinfo (_NL_ABALTMON_5);\n\tstr = nl_langinfo (_NL_ABALTMON_6);\n\tstr = nl_langinfo (_NL_ABALTMON_7);\n\tstr = nl_langinfo (_NL_ABALTMON_8);\n\tstr = nl_langinfo (_NL_ABALTMON_9);\n\tstr = nl_langinfo (_NL_ABALTMON_10);\n\tstr = nl_langinfo (_NL_ABALTMON_11);\n\tstr = nl_langinfo (_NL_ABALTMON_12);\n]])], [\n\tAC_MSG_RESULT([yes])\n\tAC_DEFINE([HAVE_LANGINFO_NL_ABALTMON], [1],\n\t\t[Define if langinfo.h defines _NL_ABALTMON_x constants])\n], [\n\tAC_MSG_RESULT([no])\n])\n\n\ndnl Convert some ac_cv_header_* variables to have_*\ndnl\nhave_linux_audit_h=$ac_cv_header_linux_audit_h\nhave_linux_blkzoned_h=$ac_cv_header_linux_blkzoned_h\nhave_linux_btrfs_h=$ac_cv_header_linux_btrfs_h\nhave_linux_capability_h=$ac_cv_header_linux_capability_h\nhave_linux_kcmp_h=$ac_cv_header_linux_kcmp_h\nhave_linux_mount_h=$ac_cv_header_linux_mount_h\nhave_linux_pr_h=$ac_cv_header_linux_pr_h\nhave_linux_raw_h=$ac_cv_header_linux_raw_h\nhave_linux_securebits_h=$ac_cv_header_linux_securebits_h\nhave_linux_version_h=$ac_cv_header_linux_version_h\nhave_linux_watchdog_h=$ac_cv_header_linux_watchdog_h\nhave_pty_h=$ac_cv_header_pty_h\nhave_security_openpam_h=$ac_cv_header_security_openpam_h\nhave_security_pam_appl_h=$ac_cv_header_security_pam_appl_h\nhave_security_pam_misc_h=$ac_cv_header_security_pam_misc_h\nhave_security_pam_modules_h=$ac_cv_header_security_pam_modules_h\nhave_shadow_h=$ac_cv_header_shadow_h\nhave_sys_signalfd_h=$ac_cv_header_sys_signalfd_h\nhave_utmpx_h=$ac_cv_header_utmpx_h\nhave_mntent_h=$ac_cv_header_mntent_h\nhave_sys_vfs_h=$ac_cv_header_sys_vfs_h\nhave_linux_bpf_h=$ac_cv_header_linux_bpf_h\n\nAS_CASE([$linux_os:$have_linux_version_h],\n  [yes:no],\n    [AC_MSG_ERROR([kernel headers required on Linux])]\n)\n\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#include <time.h>\n#include <unistd.h>\n]], [[\n    int a = 0;\n    struct tm *tm = localtime(0);\n    if (a == -1)  /* false */\n\tsleep(tm->tm_gmtoff);\n]])],\n[AC_DEFINE([HAVE_TM_GMTOFF], [1], [Does struct tm have a field tm_gmtoff?])\n])\n\nAC_CHECK_TYPES([struct mount_attr], [], [], [[#include <linux/mount.h>]])\nAC_CHECK_TYPES([enum fsconfig_command], [], [], [[#include <linux/mount.h>]])\n\nAC_CHECK_MEMBERS([struct termios.c_line],,,\n    [[#include <termios.h>]])\n\nAC_CHECK_MEMBERS([struct stat.st_mtim.tv_nsec],,,\n    [[#include <sys/stat.h>]])\n\nAC_CHECK_TYPES([struct statx], [], [], [[#include <sys/stat.h>]])\nAC_CHECK_MEMBERS([struct statx.stx_mnt_id],,,\n    [[#include <sys/stat.h>]])\n\nAC_CHECK_DECLS([_NL_TIME_WEEK_1STDAY],[],[],[[#include <langinfo.h>]])\n\nAC_CHECK_DECL([environ],\n\t[AC_DEFINE([HAVE_ENVIRON_DECL], [1],\n\t\t[Define to 1 if have **environ prototype])],\n)\n\nAC_CHECK_DECL([strsignal],\n\t[AC_DEFINE([HAVE_STRSIGNAL_DECL], [1],\n\t\t[Define to 1 if have strsignal function prototype])],\n)\n\nAC_CHECK_DECL([BPF_OBJ_NAME_LEN],\n\t      [have_bpf_obj_name_len=yes], [have_bpf_obj_name_len=no],\n\t      [#include <linux/bpf.h>])\nAC_CHECK_DECL([BPF_TAG_SIZE],\n\t      [have_bpf_tag_size=yes], [have_bpf_tag_size=no],\n\t      [#include <linux/bpf.h>])\n\nAC_CHECK_DECL([TIOCGLCKTRMIOS],\n\t      [have_tiocglcktrmios=yes], [have_tiocglcktrmios=no],\n\t      [#include <sys/ioctl.h>])\nAC_CHECK_DECL([SOCK_CLOEXEC],\n\t      [have_sock_cloexec=yes], [have_sock_cloexec=no],\n\t      [#include <sys/types.h>\n\t       #include <sys/socket.h>])\nAC_CHECK_DECL([SOCK_NONBLOCK],\n\t      [have_sock_nonblock=yes], [have_sock_nonblock=no],\n\t      [#include <sys/types.h>\n\t       #include <sys/socket.h>])\nAC_CHECK_DECL([SO_PASSCRED],\n\t      [have_so_passcred=yes], [have_so_passcred=no],\n\t      [#include <sys/types.h>\n\t       #include <sys/socket.h>])\n\nAC_CHECK_DECLS([VMADDR_CID_LOCAL], [], [], [\n\t       #include <sys/socket.h>\n\t       #include <linux/vm_sockets.h>])\n\nAC_CHECK_FUNCS([ \\\n\tcachestat \\\n\tclearenv \\\n\tclose_range \\\n\teaccess \\\n\terr \\\n\terrx \\\n\texplicit_bzero \\\n\t__fpending \\\n\t__fpurge \\\n\tfpurge \\\n\tfnmatch \\\n\tfsconfig \\\n\tfsmount \\\n\tfsopen \\\n\tfspick \\\n\tfsync \\\n\tgetdomainname \\\n\tgetdtablesize \\\n\tgetexecname \\\n\tgetmntinfo \\\n\tgetrandom \\\n\tgetrlimit \\\n\tgetsgnam \\\n\tgetttynam \\\n\tinotify_init \\\n\tjrand48 \\\n\tlandlock_create_ruleset \\\n\tlandlock_add_rule \\\n\tlandlock_restrict_self \\\n\tlchown \\\n\tlgetxattr \\\n\tllistxattr \\\n\tllseek \\\n\tnewlocale \\\n\tmempcpy \\\n\tmkostemp \\\n\tmove_mount \\\n\tmount_setattr \\\n\tnanosleep \\\n\tntp_gettime \\\n\topen_tree \\\n\tpersonality \\\n\tpidfd_getfd \\\n\tpidfd_open \\\n\tpidfd_send_signal \\\n\tposix_fadvise \\\n\tprctl \\\n\tqsort_r \\\n\treallocarray \\\n\trenameat2 \\\n\trpmatch \\\n\tscandirat \\\n\tsched_setattr \\\n\tsched_setscheduler \\\n\t__secure_getenv \\\n\tsecure_getenv \\\n\tsendfile \\\n\tsetprogname \\\n\tsetresgid \\\n\tsetresuid \\\n\tsigqueue \\\n\tsrandom \\\n\tstatx \\\n\tstrnchr \\\n\tstrndup \\\n\tstrnlen \\\n\tstrtod_l \\\n\tsysconf \\\n\tsysinfo \\\n\ttimegm \\\n\tusleep \\\n\tuselocale \\\n\tutimensat \\\n\tvwarnx \\\n\twarn \\\n\twarnx \\\n])\nAC_FUNC_FSEEKO\n\nAC_CHECK_FUNCS([futimens], [have_futimens=yes])\nAC_CHECK_FUNCS([getusershell], [have_getusershell=yes],[have_getusershell=no])\nAC_CHECK_FUNCS([inotify_init1], [have_inotify_init1=yes])\nAC_CHECK_FUNCS([ioperm iopl], [have_io=yes])\nAC_CHECK_FUNCS([openat fstatat unlinkat], [have_openat=yes], [have_openat=no])\nAC_CHECK_FUNCS([open_memstream], [have_open_memstream=yes],[have_open_memstream=no])\nAC_CHECK_FUNCS([reboot], [have_reboot=yes],[have_reboot=no])\nAC_CHECK_FUNCS([updwtmpx updwtmpx], [have_gnu_utmpx=yes], [have_gnu_utmpx=no])\n\nAM_CONDITIONAL([HAVE_OPENAT], [test \"x$have_openat\" = xyes])\nAM_CONDITIONAL([HAVE_LINUX_LANDLOCK_H], [test \"x$ac_cv_header_linux_landlock_h\" = xyes])\n\nhave_setns_syscall=\"yes\"\nUL_CHECK_SYSCALL([setns])\nAS_IF([test \"x$ul_cv_syscall_setns\" = xno], [\n   have_setns_syscall=\"no\"\n])\n\nUL_CHECK_SYSCALL([pidfd_getfd])\nUL_CHECK_SYSCALL([pidfd_open])\nUL_CHECK_SYSCALL([pidfd_send_signal])\nUL_CHECK_SYSCALL([close_range])\nUL_CHECK_SYSCALL([fsconfig])\nUL_CHECK_SYSCALL([fsmount])\nUL_CHECK_SYSCALL([fsopen])\nUL_CHECK_SYSCALL([fspick])\nUL_CHECK_SYSCALL([mount_setattr])\nUL_CHECK_SYSCALL([move_mount])\nUL_CHECK_SYSCALL([open_tree])\n\nAS_IF([test \"x$ul_cv_syscall_fsconfig\" = xno ||\n       test \"x$ul_cv_syscall_fsmount\" = xno ||\n       test \"x$ul_cv_syscall_fsopen\" = xno ||\n       test \"x$ul_cv_syscall_fspick\" = xno ||\n       test \"x$ul_cv_syscall_mount_setattr\" = xno ||\n       test \"x$ul_cv_syscall_move_mount\" = xno ||\n       test \"x$ul_cv_syscall_open_tree\" = xno],\n   [\n\thave_mountfd_api=\"no\"\n   ],[\n        have_mountfd_api=\"yes\"\n\tAC_DEFINE([HAVE_MOUNTFD_API], [1], [Define to 1 if you want to use mount API based on FDs.])\n   ])\n\n\nUL_CHECK_SYSCALL([statmount])\nUL_CHECK_SYSCALL([listmount])\n\nAS_IF([test \"x$ul_cv_syscall_statmount\" = xno ||\n       test \"x$ul_cv_syscall_listmount\" = xno],\n   [\n\thave_statmount_api=\"no\"\n   ],[\n\thave_statmount_api=\"yes\"\n\tAC_DEFINE([HAVE_STATMOUNT_API], [1], [Define to 1 if you want to use statmount API.])\n   ])\n\n\nAC_CHECK_FUNCS([isnan], [],\n\t[AC_CHECK_LIB([m], [isnan], [MATH_LIBS=\"-lm\"])]\n\t[AC_CHECK_LIB([m], [__isnan], [MATH_LIBS=\"-lm\"])]\n)\nAC_SUBST([MATH_LIBS])\n\n\ndnl lib/mononotic.c may require -lrt\nAC_CHECK_FUNCS([clock_gettime], [],\n\t[AC_CHECK_LIB([rt], [clock_gettime], [REALTIME_LIBS=\"-lrt\"])]\n)\n\nhave_timer=\"no\"\nAC_CHECK_FUNCS([timer_create],\n\t[have_timer=\"yes\"],\n\t[AC_CHECK_LIB([rt], [timer_create], [\n\t\thave_timer=\"yes\"\n\t\tREALTIME_LIBS=\"-lrt\"\n\t\tAC_DEFINE([HAVE_TIMER_CREATE], [1], [Define if timer_create exist in -lrt])\n\t],[\n\t\tAC_SEARCH_LIBS([timer_create], [rt], [\n\t\t\tAC_MSG_RESULT(yes)\n\t\t\thave_timer=\"yes\"\n\t\t\tREALTIME_LIBS=\"-lrt -lpthread\"\n\t\t\tAC_DEFINE([HAVE_TIMER_CREATE], [1], [Define if timer_create exist in -lrt -lpthread])\n\t\t],[], [-lpthread]\n\t\t)\n\t])]\n)\n\nAC_SUBST([REALTIME_LIBS])\n\nAS_IF([test x\"$have_timer\" = xno], [\n       AC_CHECK_FUNCS([setitimer], [have_timer=\"yes\"], [have_timer=\"no\"])\n])\n\n\nAC_CHECK_LIB([rtas], [rtas_get_sysparm], [\n\tRTAS_LIBS=\"-lrtas\"\n\tAC_DEFINE([HAVE_LIBRTAS], [1], [Define if librtas exists])\n])\nAC_SUBST([RTAS_LIBS])\n\n\nAC_CHECK_MEMBER([struct sockaddr.sa_len],\n\t\tAC_DEFINE([HAVE_SA_LEN], [1], [Define if struct sockaddr contains sa_len]), [],\n\t[#include <sys/types.h>\n\t #include <sys/socket.h>])\n\nSOCKET_LIBS=\nAC_SEARCH_LIBS([socket], [socket],\n\t[AS_IF([test x\"$ac_cv_search_socket\" != x\"none required\"],\n\t\t[SOCKET_LIBS=\"$SOCKET_LIBS -lsocket\"])\n])\nAC_SUBST([SOCKET_LIBS])\n\n\nhave_dirfd=no\nAC_CHECK_FUNCS([dirfd], [have_dirfd=yes], [have_dirfd=no])\nAS_IF([test x\"$have_dirfd\" = xno], [\n\tAC_CHECK_DECLS([dirfd],\n\t\t[have_dirfd=yes], [have_dirfd=no],\n\t\t[#include <sys/types.h>\n\t\t #include <dirent.h>])\n])\n\nhave_ddfd=no\nAS_IF([test x\"$have_dirfd\" = xno], [\n\tAC_CHECK_MEMBERS([DIR.dd_fd],\n\t\t[have_ddfd=yes], [have_ddfd=no],\n\t\t[#include <sys/types.h>\n\t\t #include <dirent.h>])\n])\n\nAM_CONDITIONAL([HAVE_DIRFD], [test \"x$have_dirfd\" = xyes || test \"x$have_ddfd\" = xyes])\n\nMQ_LIBS=\nAC_CHECK_LIB([rt], [mq_open], [MQ_LIBS=\"-lrt\"])\nAC_SUBST([MQ_LIBS])\n\nAC_MSG_CHECKING([whether program_invocation_short_name is defined])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n\t#include <errno.h>\n]], [[\n\tprogram_invocation_short_name = \"test\";\n]])], [\n\tAC_MSG_RESULT([yes])\n\tAC_DEFINE([HAVE_PROGRAM_INVOCATION_SHORT_NAME], [1],\n\t\t[Define if program_invocation_short_name is defined])\n], [\n\tAC_MSG_RESULT([no])\n])\n\n\nAC_MSG_CHECKING([whether __progname is defined])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([extern char *__progname;],\n\t   [if (*__progname == 0) return 1;])],\n\t   AC_DEFINE([HAVE___PROGNAME], [1], [Define if __progname is defined])\n\t   AC_MSG_RESULT([yes]),\n\t   AC_MSG_RESULT([no]))\n\nAC_CHECK_DECL([IOC_OPAL_GET_STATUS],\n\t[AC_DEFINE([HAVE_OPAL_GET_STATUS], [1],\n\t\t[Define to 1 if OPAL status ioctl is defined])],,\n\t      [#include <linux/sed-opal.h>])\n\ndnl Static compilation\nm4_define([UL_STATIC_PROGRAMS], [blkid, fdisk, losetup, mount, nsenter, partx, sfdisk, umount, unshare])\n\nAC_ARG_ENABLE([static-programs],\n  [AS_HELP_STRING([--enable-static-programs=LIST],\n      [link static the programs in LIST (comma-separated,\n      supported for ]m4_defn([UL_STATIC_PROGRAMS])[)])])\n\nAS_CASE([$enable_static_programs],\n  [yes],\n    [enable_static_programs=m4_quote(UL_STATIC_PROGRAMS)],\n  [no],\n    [enable_static_programs=]\n)\n\ndnl Set all the individual AM_CONDITIONALs\nm4_foreach([UL_PRG], m4_defn([UL_STATIC_PROGRAMS]), [\n  AS_CASE([,$enable_static_programs,],\n   [*,UL_PRG,*], [static_[]UL_PRG=yes]\n  )\n  AS_IF([test \"x$static_[]UL_PRG\" = xyes], [AC_MSG_NOTICE([enable static build: UL_PRG.])])\n  AM_CONDITIONAL([HAVE_STATIC_]m4_toupper(UL_PRG),\n    [test \"x$static_[]UL_PRG\" = xyes])\n])\n\n\nAC_ARG_ENABLE([all-programs],\n  AS_HELP_STRING([--disable-all-programs], [disable everything, might be overridden by --enable-<name>]),\n  [], [enable_all_programs=undefined]\n)\n\nAS_CASE([$enable_all_programs],\n  [yes], [AC_MSG_WARN([force to build all programs by default])\n\t  ul_default_estate=check],\n  [no],  [AC_MSG_WARN([disable all programs and man pages by default])\n\t  ul_default_estate=no]\n)\n\n\nAC_ARG_ENABLE([asciidoc],\n  AS_HELP_STRING([--disable-asciidoc], [do not generate man pages from asciidoc]),\n  [], [UL_DEFAULT_ENABLE([asciidoc], [check])]\n)\nUL_BUILD_INIT([asciidoc])\nUL_REQUIRES_PROGRAM([asciidoc], [ASCIIDOCTOR], [asciidoctor], [man pages])\nAM_CONDITIONAL([ENABLE_ASCIIDOC], [test \"x$build_asciidoc\" = xyes])\nhave_asciidoctor_failure_level=no\nAS_IF([test \"x$build_asciidoc\" = xyes], [\n       AC_MSG_CHECKING([whether ${ASCIIDOCTOR} supports --failure-level])\n       AS_IF([${ASCIIDOCTOR} --help | grep failure-level >/dev/null 2>&1 ], [\n         AC_MSG_RESULT([yes])\n         have_asciidoctor_failure_level=yes\n       ], [\n         AC_MSG_RESULT([no])\n       ])\n])\nAM_CONDITIONAL([HAVE_ASCIIDOCTOR_FAILURE_LEVEL], [test \"x$have_asciidoctor_failure_level\" = xyes])\n\nhave_manpages=no\nAS_IF([test -f \"$srcdir/sys-utils/mount.8\"], [\n   AC_MSG_NOTICE([re-use already generated man-pages.])\n   have_manpages=yes]\n)\nAM_CONDITIONAL([HAVE_MANPAGES], [test \"x$have_manpages\" = xyes])\n\n\nAC_ARG_ENABLE([poman],\n  AS_HELP_STRING([--disable-poman], [do not generate translated man pages]),\n  [], [UL_DEFAULT_ENABLE([poman], [check])]\n)\nUL_BUILD_INIT([poman])\nUL_REQUIRES_PROGRAM([poman], [PO4A], [po4a], [translated man pages])\nAM_CONDITIONAL([ENABLE_POMAN], [test \"x$build_poman\" = xyes])\n\n\nAX_CHECK_TLS\n\nhave_pty=no\nAC_ARG_WITH([util], AS_HELP_STRING([--without-util], [compile without libutil]),\n  [], [with_util=auto]\n)\nAS_IF([test \"x$with_util\" = xno], [\n  AM_CONDITIONAL([HAVE_UTIL], [false])\n  have_util=no\n], [\n  UL_CHECK_LIB([util], [openpty])\n])\n\nAS_IF([test \"x$have_pty_h\" = xyes && test \"x$have_sys_signalfd_h\" = xyes && test \"x$have_util\" = xyes], [\n   AM_CONDITIONAL([HAVE_PTY], [true])\n   AC_DEFINE([HAVE_PTY], [1], [have PTY support])\n   have_pty=yes\n], [\n   AM_CONDITIONAL([HAVE_PTY], [false])\n])\n\nAC_CHECK_TYPES([union semun], [], [], [[\n#include <sys/sem.h>\n]])\nAC_CHECK_TYPES([loff_t])\n\n\nAC_ARG_ENABLE([widechar],\n  AS_HELP_STRING([--disable-widechar], [do not compile wide character support]),\n  [], [enable_widechar=check]\n)\nUL_BUILD_INIT([widechar])\nUL_REQUIRES_COMPILE([widechar], [[\n  #include <wchar.h>\n  #include <wctype.h>\n  #include <stdio.h>\n  #include <stdlib.h>\n  ]], [[\n    wchar_t wc;\n    wint_t w;\n    w = fgetwc(stdin);\n    if (w == WEOF) exit(1);\n    wc = w;\n    fputwc(wc,stdout);\n  ]],\n  [wchar_t support])\n\nAS_IF([test \"x$build_widechar\" = xyes ], [\n  AC_DEFINE([HAVE_WIDECHAR], [1], [Do we have wide character support?])\n])\n\n\nAC_CHECK_TYPES([cpu_set_t], [have_cpu_set_t=yes], [], [[\n#include <sched.h>\n]])\n\nAM_CONDITIONAL([HAVE_CPU_SET_T], [test \"x$have_cpu_set_t\" = xyes])\n\nAC_CHECK_TYPES([sighandler_t], [], [], [[\n#include <signal.h>\n]])\n\nAC_CHECK_DECLS([CPU_ALLOC], [], [], [[\n#include <sched.h>\n]])\n\n# on Solaris, you can't mix and match standards, since we use c99\n# apparently at this stage, XOPEN_SOURCE will conflict.  As workaround,\n# check for crypt.h and use that without XOPEN_SOURCE.\nhave_crypt=no\nAC_CHECK_HEADERS([crypt.h])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_CRYPT_H\n#include <crypt.h>\n#else\n#define _XOPEN_SOURCE\n#include <unistd.h>\n#endif\n]], [[\nchar *c = crypt(\"abc\",\"pw\");\n]])],[\n  have_libcrypt=no\n  have_crypt=yes\n],[\n  UL_SET_LIBS([-lcrypt])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n  #ifdef HAVE_CRYPT_H\n  #include <crypt.h>\n  #else\n  #define _XOPEN_SOURCE\n  #include <unistd.h>\n  #endif\n  ]], [[\n  char *c = crypt(\"abc\",\"pw\");\n  ]])],[\n  have_libcrypt=yes\n  have_crypt=yes\n  ],[\n  AC_MSG_WARN([crypt() is not available])\n  ])\n  UL_RESTORE_LIBS\n])\nAM_CONDITIONAL([HAVE_LIBCRYPT], [test \"x$have_libcrypt\" = xyes])\n\n\nAC_ARG_WITH([selinux],\n  AS_HELP_STRING([--with-selinux], [compile with SELinux support]),\n  [], [with_selinux=no]\n)\n\nAS_IF([test \"x$with_selinux\" = xno], [\n  AM_CONDITIONAL([HAVE_SELINUX], [false])\n], [\n  PKG_CHECK_MODULES([SELINUX], [libselinux >= 2.5], [have_selinux=yes], [have_selinux=no])\n  AS_CASE([$with_selinux:$have_selinux],\n    [yes:no], [AC_MSG_ERROR([SELinux selected but libselinux not found or too old])]\n  )\n  AS_IF([test \"x$have_selinux\" = xyes], [\n    AC_DEFINE([HAVE_LIBSELINUX], [1], [Define if SELinux is available])\n    UL_PKG_STATIC([SELINUX_LIBS_STATIC], [libselinux])\n    AM_CONDITIONAL([HAVE_SELINUX], [true])\n\n    UL_SET_LIBS([$SELINUX_LIBS])\n    # This function is missing in old libselinux 1.xx versions\n    AC_CHECK_FUNCS([security_get_initial_context])\n    UL_RESTORE_LIBS\n  ])\n])\nAC_SUBST([SELINUX_LIBS])\nAC_SUBST([SELINUX_LIBS_STATIC])\n\n\nAC_ARG_WITH([audit],\n  AS_HELP_STRING([--with-audit], [compile with audit support]),\n  [], [with_audit=no]\n)\n\nAS_IF([test \"x$with_audit\" = xno], [\n  AM_CONDITIONAL([HAVE_AUDIT], [false])\n], [\n  UL_CHECK_LIB([audit], [audit_log_user_message])\n  AS_CASE([$with_audit:$have_audit],\n    [yes:no],\n      [AC_MSG_ERROR([Audit selected but libaudit not found (or does not support audit_log_user_message())])]\n  )\n])\n\nAC_ARG_WITH([udev], AS_HELP_STRING([--without-udev], [compile without udev support]),\n  [], [with_udev=auto]\n)\n\nAS_IF([test \"x$with_udev\" = xno], [\n  AM_CONDITIONAL([HAVE_UDEV], [false])\n], [\n  UL_CHECK_LIB([udev], [udev_new])\n  AS_CASE([$with_udev:$have_udev],\n    [yes:no],\n      [AC_MSG_ERROR([udev selected but libudev not found])]\n  )\n])\n\n\ndnl wide-char ncurses\nAC_ARG_WITH([ncursesw],\n  AS_HELP_STRING([--without-ncursesw], [do not build with wide-char ncurses]),\n  [], [with_ncursesw=auto]\n)\nhave_ncursesw=no\nhave_ncursesw_header=no\nAS_IF([test \"x$with_ncursesw\" != xno], [\n  UL_NCURSES_CHECK([ncursesw])\n  AS_IF([test \"x$have_ncursesw\" = xyes], [\n    AC_CHECK_HEADERS([ncursesw/ncurses.h], [have_ncursesw_header=yes])\n    AC_CHECK_HEADERS([ncursesw/term.h])\n\n    # Define HAVE_NCURSES_H only if check for HAVE_NCURSESW_NCURSES_H is\n    # unsuccessful to avoid too many *_H permitations in config.h\n    AS_IF([test \"x$have_ncursesw_header\" = xno], [\n\t   AC_CHECK_HEADERS([ncurses.h], [have_ncursesw_header=yes])\n\t   AC_CHECK_HEADERS([term.h])\n    ])\n    AS_IF([test \"x$have_ncursesw_header\" = xno], [have_ncursesw=no])\n  ])\n  AS_IF([test \"x$have_ncursesw\" = xyes], [\n    CURSES_LIB_NAME=\"ncursesw\"\n    AC_DEFINE([HAVE_LIBNCURSESW], [1], [Define if ncursesw library available])\n  ])\n])\nAS_CASE([$with_ncursesw:$have_ncursesw],\n  [yes:no], [AC_MSG_ERROR([ncursesw selected, but library not found])])\n\n\ndnl non-wide ncurses\nAC_ARG_WITH([ncurses],\n  AS_HELP_STRING([--with-ncurses], [build with non-wide ncurses]),\n  [], [with_ncurses=auto]\n)\nhave_ncurses=no\nhave_ncurses_header=no\nAS_CASE([$with_ncurses:$build_widechar],\n  [yes:yes], [AC_MSG_ERROR([wide-char support enabled, but non-wide ncurses selects])])\n\nAS_IF([test \"x$have_ncursesw\" = xno && test \"x$with_ncurses\" != xno ], [\n  UL_NCURSES_CHECK([ncurses])\n  AS_IF([test \"x$have_ncurses\" = xyes], [\n    AC_CHECK_HEADERS([ncurses/ncurses.h], [have_ncurses_header=yes])\n    AC_CHECK_HEADERS([ncurses/term.h])\n\n    # Define HAVE_NCURSES_H only if check for HAVE_NCURSES_NCURSES_H is\n    # unsuccessful to avoid too many *_H permitations in config.h\n    AS_IF([test \"x$have_ncurses_header\" = xno], [\n\t   AC_CHECK_HEADERS([ncurses.h], [have_ncurses_header=yes])\n\t   AC_CHECK_HEADERS([term.h])\n    ])\n    AS_IF([test \"x$have_ncurses_header\" = xno], [have_ncurses=no])\n  ])\n  AS_IF([test \"x$have_ncurses\" = xyes], [\n    CURSES_LIB_NAME=\"ncurses\"\n    AC_DEFINE([HAVE_LIBNCURSES], [1], [Define if ncurses library available])\n  ])\n])\nAS_CASE([$with_ncurses:$have_ncurses],\n  [yes:no], [AC_MSG_ERROR([ncurses selected, but library not found])])\n\nAC_SUBST([NCURSES_CFLAGS])\nAC_SUBST([NCURSES_LIBS])\nAM_CONDITIONAL([HAVE_NCURSES], [test \"x$have_ncursesw\" = xyes || test \"x$have_ncurses\" = xyes])\n\n\nAC_ARG_WITH([slang],\n  AS_HELP_STRING([--with-slang], [compile cfdisk with slang rather than ncurses]),\n  [], [with_slang=no]\n)\nhave_slang=no\nAS_IF([test \"x$with_slang\" = xyes], [\n  AC_CHECK_HEADERS([slang.h slang/slang.h])\n  AC_CHECK_HEADERS([slcurses.h slang/slcurses.h],\n\t\t   [have_slang=yes], [], [\n#ifdef HAVE_SLANG_H\n#include <slang.h>\n#elif defined(HAVE_SLANG_SLANG_H)\n#include <slang/slang.h>\n#endif\n])\n  AS_IF([test \"x$have_slang\" = xno], [\n    AC_MSG_ERROR([slang selected but slcurses.h not found])],\n    [CURSES_LIB_NAME=slang\n  ])\n])\nAM_CONDITIONAL([HAVE_SLANG], [test \"x$have_slang\" = xyes])\n\n\nAS_IF([test \"x$have_slang\" = xyes || test \"x$have_ncursesw\" = xyes || test \"x$have_ncurses\" = xyes], [\n\tAC_CHECK_LIB([$CURSES_LIB_NAME], use_default_colors, [\n\t\t     AC_DEFINE(HAVE_USE_DEFAULT_COLORS, 1,\n\t\t\t       [Define if curses library has the use_default_colors().])\n\t])\n\tAC_CHECK_LIB([$CURSES_LIB_NAME], resizeterm, [\n\t\t     AC_DEFINE(HAVE_RESIZETERM, 1,\n\t\t\t       [Define if curses library has the resizeterm().])\n\t])\n])\n\n\nAC_ARG_WITH([tinfo], AS_HELP_STRING([--without-tinfo], [compile without libtinfo]),\n  [], [with_tinfo=auto]\n)\nhave_tinfo=no\nhave_tinfow=no\nAS_IF([test \"x$with_tinfo\" != xno], [\n  AS_IF([test \"x$have_ncursesw\" = xyes], [\n    UL_TINFO_CHECK([tinfow])\n  ])\n  AS_IF([test \"x$have_tinfow\" = xno], [\n    UL_TINFO_CHECK([tinfo])\n  ])\n])\nAC_SUBST([TINFO_LIBS])\nAC_SUBST([TINFO_LIBS_STATIC])\nAC_SUBST([TINFO_CFLAGS])\nAM_CONDITIONAL([HAVE_TINFO], [test \"x$have_tinfo\" = xyes || test \"x$have_tinfow\" = xyes])\nAS_IF([test \"x$have_tinfo\" = xyes || test \"x$have_tinfow\" = xyes], [\n  AC_DEFINE(HAVE_LIBTINFO, 1, [Define if libtinfo or libtinfow available.])\n])\n\n\nAC_ARG_WITH([readline],\n  AS_HELP_STRING([--without-readline], [do not build with GNU Readline support]),\n  [], [with_readline=auto]\n)\n\nAS_IF([test \"x$with_readline\" = xno], [\n  AM_CONDITIONAL([HAVE_READLINE], [false])\n], [\n  UL_CHECK_LIB([readline], [readline])\n  AS_CASE([$with_readline:$have_readline],\n    [yes:no],\n      [AC_MSG_ERROR([readline selected but libreadline not found ])],\n    [*:yes],\n      [READLINE_LIBS=\"-lreadline\"\n       READLINE_LIBS_STATIC=\"-lreadline $TINFO_LIBS_STATIC\"]\n  )\n])\nAC_SUBST([READLINE_LIBS])\nAC_SUBST([READLINE_LIBS_STATIC])\n\n\nAC_ARG_WITH([utempter],\n  AS_HELP_STRING([--with-utempter], [compile script(1) with libutempter]),\n  [], [with_utempter=no]\n)\n\nAS_IF([test \"x$with_utempter\" = xyes], [\n  UL_CHECK_LIB([utempter], [utempter_add_record])\n  AS_IF([test \"x$have_utempter\" = xno], [\n    AC_MSG_ERROR([utempter selected but libutempter not found])\n  ])\n], [\n  AM_CONDITIONAL([HAVE_UTEMPTER], [false])\n])\n\n\ndnl\ndnl libuuid\ndnl\nAC_ARG_ENABLE([libuuid],\n  AS_HELP_STRING([--disable-libuuid], [do not build libuuid and uuid utilities]),\n  [], [UL_DEFAULT_ENABLE([libuuid], [yes])]\n)\nUL_BUILD_INIT([libuuid])\nAC_SUBST([LIBUUID_VERSION])\nAC_SUBST([LIBUUID_VERSION_INFO])\nAM_CONDITIONAL(BUILD_LIBUUID, test \"x$build_libuuid\" = xyes)\n\nAC_ARG_ENABLE([libuuid-force-uuidd],\n  AS_HELP_STRING([--enable-libuuid-force-uuidd], [support uuidd even though the daemon is not built]),\n  [], [enable_libuuid_force_uuidd=no]\n)\n\nAS_IF([test \"x$build_libuuid\" = xyes], [\n  AC_DEFINE(HAVE_LIBUUID, 1, [Define to 1 if you have the -luuid.])\n])\n\ndnl\ndnl liblastlog2\ndnl\nAC_ARG_ENABLE([liblastlog2],\n  AS_HELP_STRING([--disable-liblastlog2], [do not build liblastlog2 and lastlog2 utilities]),\n  [], [UL_DEFAULT_ENABLE([liblastlog2], [yes])]\n)\nUL_BUILD_INIT([liblastlog2])\n\nhave_sqlite3=no\nAS_IF([test \"x$build_liblastlog2\" = xyes], [\n  PKG_CHECK_MODULES([SQLITE3], [sqlite3], [have_sqlite3=yes], [have_sqlite3=no])\n])\nUL_REQUIRES_HAVE([liblastlog2], [sqlite3], [sqlite3 library])\nAC_SUBST([SQLITE3_LIBS])\n\nAC_SUBST([LIBLASTLOG2_VERSION])\nAC_SUBST([LIBLASTLOG2_VERSION_INFO])\nAC_DEFINE_UNQUOTED([LIBLASTLOG2_VERSION], [\"$LIBLASTLOG2_VERSION\"], [liblastlog2 version string])\nAM_CONDITIONAL([BUILD_LIBLASTLOG2], [test \"x$build_liblastlog2\" = xyes])\nAM_CONDITIONAL([BUILD_LIBLASTLOG2_TESTS], [test \"x$build_liblastlog2\" = xyes && test \"x$enable_static\" = xyes])\n\n\nAC_ARG_ENABLE([pam_lastlog2],\n  AS_HELP_STRING([--disable-pam-lastlog2], [do not build PAM lastlog2 module]),\n  [], [UL_DEFAULT_ENABLE([pam_lastlog2], [check])]\n)\nUL_BUILD_INIT([pam_lastlog2])\nUL_REQUIRES_BUILD([pam_lastlog2], [liblastlog2])\nUL_REQUIRES_HAVE([pam_lastlog2], [security_pam_modules_h], [pam_modules.h header file])\nAM_CONDITIONAL([BUILD_PAM_LASTLOG2], [test \"x$build_pam_lastlog2\" = xyes])\n\n\ndnl\ndnl libblkid\ndnl\nAC_ARG_ENABLE([libblkid],\n  AS_HELP_STRING([--disable-libblkid], [do not build libblkid and many related utilities]),\n  [], [UL_DEFAULT_ENABLE([libblkid], [check])]\n)\nUL_BUILD_INIT([libblkid])\nUL_REQUIRES_HAVE([libblkid], [openat], [openat functions])\nUL_REQUIRES_HAVE([libblkid], [dirfd,ddfd], [dirfd or ddfd function])\nAC_SUBST([LIBBLKID_DATE])\nAC_SUBST([LIBBLKID_VERSION])\nAC_SUBST([LIBBLKID_VERSION_INFO])\nAC_DEFINE_UNQUOTED([LIBBLKID_VERSION], [\"$LIBBLKID_VERSION\"], [libblkid version string])\nAC_DEFINE_UNQUOTED([LIBBLKID_DATE], [\"$LIBBLKID_DATE\"], [libblkid date string])\nAS_IF([test \"x$build_libblkid\" = xyes], [\n  AC_DEFINE([HAVE_LIBBLKID], [1], [Define to 1 if you have the -lblkid.])\n])\nAM_CONDITIONAL([BUILD_LIBBLKID], [test \"x$build_libblkid\" = xyes])\nAM_CONDITIONAL([BUILD_LIBBLKID_TESTS], [test \"x$build_libblkid\" = xyes && test \"x$enable_static\" = xyes])\n\ndnl\ndnl libmount\ndnl\nAC_ARG_ENABLE([libmount],\n  AS_HELP_STRING([--disable-libmount], [do not build libmount]),\n  [], [UL_DEFAULT_ENABLE([libmount], [check])]\n)\nUL_BUILD_INIT([libmount])\nUL_REQUIRES_BUILD([libmount], [libblkid])\nUL_REQUIRES_HAVE([libmount], [dirfd,ddfd], [dirfd or ddfd function])\nUL_REQUIRES_HAVE([libmount], [mntent_h], [mntent.h header file])\nUL_REQUIRES_HAVE([libmount], [sys_vfs_h], [sys/vfs.h header file])\nAM_CONDITIONAL([BUILD_LIBMOUNT], [test \"x$build_libmount\" = xyes])\nAM_CONDITIONAL([BUILD_LIBMOUNT_TESTS], [test \"x$build_libmount\" = xyes && test \"x$enable_static\" = xyes])\nAS_IF([test \"x$build_libmount\" = xyes], [\n  AC_DEFINE(HAVE_LIBMOUNT, 1, [Define if libmount available.])\n  AS_IF([test \"x$have_setns_syscall\" = \"xyes\"], [\n    AC_DEFINE([USE_LIBMOUNT_SUPPORT_NAMESPACES], [1], [Define to 1 if want to support namepaces.])\n  ],[\n    AC_MSG_WARN([libmount will be compiled without namespaces support])\n  ])\n])\n\nAC_SUBST([LIBMOUNT_VERSION])\nAC_SUBST([LIBMOUNT_MAJOR_VERSION], $PACKAGE_VERSION_MAJOR)\nAC_SUBST([LIBMOUNT_MINOR_VERSION], $PACKAGE_VERSION_MINOR)\nAC_SUBST([LIBMOUNT_PATCH_VERSION], $PACKAGE_VERSION_RELEASE)\nAC_SUBST([LIBMOUNT_VERSION_INFO])\nAC_DEFINE_UNQUOTED([LIBMOUNT_VERSION], [\"$LIBMOUNT_VERSION\"], [libmount version string])\n\nAC_ARG_ENABLE([libmount-mountfd-support],\n  AS_HELP_STRING([--disable-libmount-mountfd-support], [do not use new mount API based on FDs]),\n  [], [enable_libmount_mountfd_support=check]\n)\nUL_BUILD_INIT([libmount_mountfd_support])\nUL_REQUIRES_BUILD([libmount_mountfd_support], [libmount])\nUL_REQUIRES_LINUX([libmount_mountfd_support])\nUL_REQUIRES_HAVE([libmount_mountfd_support], [mountfd_api], [mount FDs based API])\nUL_REQUIRES_HAVE([libmount_mountfd_support], [linux_mount_h], [linux/mount.h])\nAS_IF([test \"x$build_libmount_mountfd_support\" = xyes ], [\n  AC_DEFINE([USE_LIBMOUNT_MOUNTFD_SUPPORT], [1], [Enable support for new mount FD based kernel API])\n])\n\n\ndnl\ndnl libsmartcols\ndnl\nAC_ARG_ENABLE([libsmartcols],\n  AS_HELP_STRING([--disable-libsmartcols], [do not build libsmartcols]),\n  [], [UL_DEFAULT_ENABLE([libsmartcols], [yes])]\n)\nUL_BUILD_INIT([libsmartcols])\nAM_CONDITIONAL([BUILD_LIBSMARTCOLS], [test \"x$build_libsmartcols\" = xyes])\n\nAC_SUBST([LIBSMARTCOLS_VERSION])\nAC_SUBST([LIBSMARTCOLS_VERSION_INFO])\nAC_DEFINE_UNQUOTED([LIBSMARTCOLS_VERSION], [\"$LIBSMARTCOLS_VERSION\"], [libsmartcols version string])\n\n\ndnl\ndnl libfdisk\ndnl\nAC_ARG_ENABLE([libfdisk],\n  AS_HELP_STRING([--disable-libfdisk], [do not build libfdisk]),\n  [], [UL_DEFAULT_ENABLE([libfdisk], [check])]\n)\nUL_BUILD_INIT([libfdisk])\nUL_REQUIRES_BUILD([libfdisk], [libuuid])\nAM_CONDITIONAL([BUILD_LIBFDISK], [test \"x$build_libfdisk\" = xyes])\nAM_CONDITIONAL([BUILD_LIBFDISK_TESTS], [test \"x$build_libfdisk\" = xyes && test \"x$enable_static\" = xyes])\n\nAS_IF([test \"x$build_libblkid\" = xyes],\n  [LIBFDISK_PC_REQUIRES=\"uuid blkid\"],[LIBFDISK_PC_REQUIRES=\"uuid\"])\nAC_SUBST([LIBFDISK_PC_REQUIRES])\n\nAC_SUBST([LIBFDISK_VERSION])\nAC_SUBST([LIBFDISK_MAJOR_VERSION], $PACKAGE_VERSION_MAJOR)\nAC_SUBST([LIBFDISK_MINOR_VERSION], $PACKAGE_VERSION_MINOR)\nAC_SUBST([LIBFDISK_PATCH_VERSION], $PACKAGE_VERSION_RELEASE)\nAC_SUBST([LIBFDISK_VERSION_INFO])\nAC_DEFINE_UNQUOTED([LIBFDISK_VERSION], [\"$LIBFDISK_VERSION\"], [libfdisk version string])\n\n\nAC_ARG_ENABLE([fdisks],\n  AS_HELP_STRING([--disable-fdisks], [do not build fdisk(8), sfdisk(8) and cfdisk(8)]),\n  [], [UL_DEFAULT_ENABLE([fdisks], [check])]\n)\nenable_fdisk=$enable_fdisks\nenable_sfdisk=$enable_fdisks\nenable_cfdisk=$enable_fdisks\n\nUL_BUILD_INIT([fdisk])\nUL_REQUIRES_HAVE([fdisk], [openat], [openat functions])\nUL_REQUIRES_HAVE([fdisk], [dirfd,ddfd], [dirfd or ddfd function])\nUL_REQUIRES_BUILD([fdisk], [libfdisk])\nUL_REQUIRES_BUILD([fdisk], [libsmartcols])\nAM_CONDITIONAL([BUILD_FDISK], [test \"x$build_fdisk\" = xyes])\n\n\nUL_BUILD_INIT([sfdisk])\nUL_REQUIRES_HAVE([sfdisk], [openat], [openat functions])\nUL_REQUIRES_HAVE([sfdisk], [dirfd,ddfd], [dirfd or ddfd function])\nUL_REQUIRES_BUILD([sfdisk], [libfdisk])\nUL_REQUIRES_BUILD([sfdisk], [libsmartcols])\nAM_CONDITIONAL([BUILD_SFDISK], [test \"x$build_sfdisk\" = xyes])\n\n\nUL_BUILD_INIT([cfdisk])\nUL_REQUIRES_BUILD([cfdisk], [libfdisk])\nUL_REQUIRES_BUILD([cfdisk], [libsmartcols])\nUL_REQUIRES_HAVE([cfdisk], [open_memstream], [open_memstream function])\nUL_REQUIRES_HAVE([cfdisk], [ncursesw,slang,ncurses], [ncursesw, ncurses or slang library])\nAM_CONDITIONAL([BUILD_CFDISK], [test \"x$build_cfdisk\" = xyes])\n\n\nAC_ARG_ENABLE([mount],\n  AS_HELP_STRING([--disable-mount], [do not build mount(8) and umount(8)]),\n  [], [UL_DEFAULT_ENABLE([mount], [check])]\n)\nUL_BUILD_INIT([mount])\nUL_REQUIRES_LINUX([mount])\nUL_REQUIRES_BUILD([mount], [libmount])\nAM_CONDITIONAL([BUILD_MOUNT], [test \"x$build_mount\" = xyes])\n\n\nAC_ARG_ENABLE([losetup],\n  AS_HELP_STRING([--disable-losetup], [do not build losetup]),\n  [], [UL_DEFAULT_ENABLE([losetup], [check])]\n)\nUL_BUILD_INIT([losetup])\nUL_REQUIRES_LINUX([losetup])\nUL_REQUIRES_BUILD([losetup], [libsmartcols])\nAM_CONDITIONAL([BUILD_LOSETUP], [test \"x$build_losetup\" = xyes])\n\nAC_ARG_ENABLE([zramctl],\n  AS_HELP_STRING([--disable-zramctl], [do not build zramctl]),\n  [], [UL_DEFAULT_ENABLE([zramctl], [check])]\n)\nUL_BUILD_INIT([zramctl])\nUL_REQUIRES_LINUX([zramctl])\nUL_REQUIRES_BUILD([zramctl], [libsmartcols])\nAM_CONDITIONAL([BUILD_ZRAMCTL], [test \"x$build_zramctl\" = xyes])\n\nAC_ARG_ENABLE([fsck],\n  AS_HELP_STRING([--disable-fsck], [do not build fsck]),\n  [], [UL_DEFAULT_ENABLE([fsck], [check])]\n)\nUL_BUILD_INIT([fsck])\nUL_REQUIRES_BUILD([fsck], [libmount])\nAM_CONDITIONAL([BUILD_FSCK], [test \"x$build_fsck\" = xyes])\n\n\nAC_ARG_ENABLE([partx],\n  AS_HELP_STRING([--disable-partx], [do not build addpart, delpart, partx]),\n  [], [UL_DEFAULT_ENABLE([partx], [check])]\n)\nUL_BUILD_INIT([partx])\nUL_REQUIRES_LINUX([partx])\nUL_REQUIRES_BUILD([partx], [libblkid])\nUL_REQUIRES_BUILD([partx], [libsmartcols])\nAM_CONDITIONAL([BUILD_PARTX], [test \"x$build_partx\" = xyes])\n\n\nAC_ARG_ENABLE([uuidd],\n  AS_HELP_STRING([--disable-uuidd], [do not build the uuid daemon]),\n  [], [UL_DEFAULT_ENABLE([uuidd], [check])]\n)\nUL_BUILD_INIT([uuidd])\nUL_REQUIRES_BUILD([uuidd], [libuuid])\nUL_REQUIRES_HAVE([uuidd], [timer], [timer_create function])\nUL_REQUIRES_HAVE([uuidd], [sys_signalfd_h], [sys/signalfd.h header])\nAS_IF([test \"x$build_uuidd\" = xyes || test \"x$enable_libuuid_force_uuidd\" = xyes], [\n  AC_DEFINE([HAVE_UUIDD], [1], [Define to 1 if you want to use uuid daemon.])\n])\nAM_CONDITIONAL([BUILD_UUIDD], [test \"x$build_uuidd\" = xyes])\n\n\nAC_ARG_ENABLE([uuidgen],\n  AS_HELP_STRING([--disable-uuidgen], [do not build uuidgen]),\n  [], [UL_DEFAULT_ENABLE([uuidgen], [check])]\n)\nUL_BUILD_INIT([uuidgen])\nUL_REQUIRES_BUILD([uuidgen], [libuuid])\nAM_CONDITIONAL([BUILD_UUIDGEN], [test \"x$build_uuidgen\" = xyes])\n\nUL_BUILD_INIT([uuidparse], [check])\nUL_REQUIRES_BUILD([uuidparse], [libuuid])\nUL_REQUIRES_BUILD([uuidparse], [libsmartcols])\nAM_CONDITIONAL([BUILD_UUIDPARSE], [test \"x$build_uuidparse\" = xyes])\n\nAC_ARG_ENABLE([blkid],\n  AS_HELP_STRING([--disable-blkid], [do not build blkid(8)]),\n  [], [UL_DEFAULT_ENABLE([blkid], [check])]\n)\nUL_BUILD_INIT([blkid])\nUL_REQUIRES_BUILD([blkid], [libblkid])\nAM_CONDITIONAL([BUILD_BLKID], [test \"x$build_blkid\" = xyes])\n\nUL_BUILD_INIT([findfs], [check])\nUL_REQUIRES_BUILD([findfs], [libblkid])\nAM_CONDITIONAL([BUILD_FINDFS], [test \"x$build_findfs\" = xyes])\n\nAC_ARG_ENABLE([wipefs],\n  AS_HELP_STRING([--disable-wipefs], [do not build wipefs]),\n  [], [UL_DEFAULT_ENABLE([wipefs], [check])]\n)\nUL_BUILD_INIT([wipefs])\nUL_REQUIRES_BUILD([wipefs], [libblkid])\nUL_REQUIRES_BUILD([wipefs], [libsmartcols])\nAM_CONDITIONAL([BUILD_WIPEFS], [test \"x$build_wipefs\" = xyes])\n\nUL_BUILD_INIT([findmnt], [check])\nUL_REQUIRES_BUILD([findmnt], [libmount])\nUL_REQUIRES_BUILD([findmnt], [libblkid])\nUL_REQUIRES_BUILD([findmnt], [libsmartcols])\nAM_CONDITIONAL([BUILD_FINDMNT], [test \"x$build_findmnt\" = xyes])\n\n\nAC_ARG_ENABLE([mountpoint],\n  AS_HELP_STRING([--disable-mountpoint], [do not build mountpoint]),\n  [], [UL_DEFAULT_ENABLE([mountpoint], [check])]\n)\nUL_BUILD_INIT([mountpoint])\nUL_REQUIRES_BUILD([mountpoint], [libmount])\nAM_CONDITIONAL([BUILD_MOUNTPOINT], [test \"x$build_mountpoint\" = xyes])\n\n\nAC_ARG_ENABLE([fallocate],\n  AS_HELP_STRING([--disable-fallocate], [do not build fallocate]),\n  [], [UL_DEFAULT_ENABLE([fallocate], [check])]\n)\nUL_BUILD_INIT([fallocate])\nUL_REQUIRES_LINUX([fallocate])\nUL_REQUIRES_SYSCALL_CHECK([fallocate], [UL_CHECK_SYSCALL([fallocate])])\nAM_CONDITIONAL([BUILD_FALLOCATE], [test \"x$build_fallocate\" = xyes])\n\nAS_IF([test \"x$build_fallocate\" = xyes], [\n  dnl check for valid fallocate() function\n  dnl with 32 bits glibc 2.10, fallocate() exists but not fallocate64()\n  dnl when _FILE_OFFSET_BITS==64, fallocate() is redirect to fallocate64()\n  dnl and program can't be linked.\n  dnl AC_CHECK_FUNC can't catch such errors since it's redefining\n  dnl function prototype.\n  AC_MSG_CHECKING([for valid fallocate() function])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#ifdef HAVE_LINUX_FALLOC_H\n# include <linux/falloc.h>\n#endif\n#ifdef HAVE_FCNTL_H\n# include <fcntl.h>\n#endif\n]],[[\n   long ret;\n   ret = fallocate(0, FALLOC_FL_KEEP_SIZE, 0xfffffffful, 0xfffffffful);\n   if (ret != 0) {\n      return 1;\n   }\n   ]])],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_FALLOCATE], [1], [Have valid fallocate() function])],[\n  AC_MSG_RESULT([no])])\n])\n\nAS_IF([test \"x$build_fallocate\" = xyes], [\n  dnl check for valid posix_fallocate() function\n  AC_MSG_CHECKING([for valid posix_fallocate() function])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#ifdef HAVE_LINUX_FALLOC_H\n# include <linux/falloc.h>\n#endif\n#ifdef HAVE_FCNTL_H\n# include <fcntl.h>\n#endif\n]],[[\n   long ret;\n   ret = posix_fallocate(0, 0xfffffffful, 0xfffffffful);\n   if (ret != 0) {\n      return 1;\n   }\n   ]])],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_POSIX_FALLOCATE], [1], [Have valid posix_fallocate() function])],[\n  AC_MSG_RESULT([no])])\n])\n\n\nAC_ARG_ENABLE([unshare],\n  AS_HELP_STRING([--disable-unshare], [do not build unshare]),\n  [], [UL_DEFAULT_ENABLE([unshare], [check])]\n)\nUL_BUILD_INIT([unshare])\nUL_REQUIRES_LINUX([unshare])\nUL_REQUIRES_SYSCALL_CHECK([unshare], [UL_CHECK_SYSCALL([unshare])])\nUL_REQUIRES_HAVE([unshare], [linux_capability_h], [linux/capability.h header file])\nAM_CONDITIONAL([BUILD_UNSHARE], [test \"x$build_unshare\" = xyes])\n\nAC_MSG_CHECKING([for valid unshare() function])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <sched.h>\n]],[[\n   int ret;\n   ret = unshare(0);\n   if (ret != 0) {\n      return 1;\n   }\n   ]])],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_UNSHARE], [1], [Have valid unshare() function])],\n[\n  AC_MSG_RESULT([no])\n])\n\n\nAC_ARG_ENABLE([nsenter],\n  AS_HELP_STRING([--disable-nsenter], [do not build nsenter]),\n  [], [UL_DEFAULT_ENABLE([nsenter], [check])]\n)\nUL_BUILD_INIT([nsenter])\nUL_REQUIRES_LINUX([nsenter])\nUL_REQUIRES_HAVE([nsenter], [setns_syscall], [setns syscall])\nAM_CONDITIONAL([BUILD_NSENTER], [test \"x$build_nsenter\" = xyes])\n\nAC_MSG_CHECKING([for valid setns() function])\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <sched.h>\n#include <errno.h>\n]],[[\n   int ret;\n   ret = setns(0, 0);\n   if (ret != EINVAL && ret != EBADF && ret != EPERM) {\n      return 1;\n   }\n   ]])],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_SETNS], [1], [Have valid setns() function])],\n[\n  AC_MSG_RESULT([no])\n])\n\n\nAC_ARG_WITH([cap_ng],\n  AS_HELP_STRING([--without-cap-ng], [compile without libcap-ng]),\n  [], [with_cap_ng=auto]\n)\nAS_IF([test \"x$with_cap_ng\" = xno], [\n  AM_CONDITIONAL([HAVE_CAP_NG], [false])\n  have_cap_ng=no\n],[\n  UL_CHECK_LIB([cap-ng], [capng_apply], [cap_ng])\n])\n\n\nAC_ARG_ENABLE([setpriv],\n  AS_HELP_STRING([--disable-setpriv], [do not build setpriv]),\n  [], [UL_DEFAULT_ENABLE([setpriv], [check])]\n)\nUL_BUILD_INIT([setpriv])\nUL_REQUIRES_LINUX([setpriv])\nUL_REQUIRES_HAVE([setpriv], [linux_securebits_h], [linux/securebits.h header file])\nUL_REQUIRES_HAVE([setpriv], [linux_capability_h], [linux/capability.h header file])\nUL_REQUIRES_HAVE([setpriv], [cap_ng], [libcap-ng library])\nAM_CONDITIONAL([BUILD_SETPRIV], [test \"x$build_setpriv\" = xyes])\n\nAC_ARG_ENABLE([hardlink],\n  AS_HELP_STRING([--disable-hardlink], [do not build hardlink]),\n  [], [UL_DEFAULT_ENABLE([hardlink], [check])]\n)\nUL_BUILD_INIT([hardlink])\nAM_CONDITIONAL([BUILD_HARDLINK], [test \"x$build_hardlink\" = xyes])\n\n\nAC_ARG_ENABLE([eject],\n  AS_HELP_STRING([--disable-eject], [do not build eject]),\n  [], [UL_DEFAULT_ENABLE([eject], [check])]\n)\nUL_BUILD_INIT([eject])\nUL_REQUIRES_LINUX([eject])\nUL_REQUIRES_BUILD([eject], [libmount])\nAM_CONDITIONAL([BUILD_EJECT], [test \"x$build_eject\" = xyes])\n\n\nAC_ARG_ENABLE([agetty],\n  AS_HELP_STRING([--disable-agetty], [do not build agetty]),\n  [], [UL_DEFAULT_ENABLE([agetty], [check])]\n)\nUL_BUILD_INIT([agetty])\nUL_REQUIRES_HAVE([agetty], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([agetty], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_AGETTY], [test \"x$build_agetty\" = xyes])\nAS_IF([test \"x$have_futimens\" = xyes && test \"x$have_inotify_init1\" = xyes ], [\n  AC_DEFINE([AGETTY_RELOAD], [1], [Enable agetty --reload feature])\n],[\n  AC_MSG_WARN([futimens or inotify_init1 not found; agetty(8) will not provide ---reload functionality])\n])\n\n\nAC_ARG_ENABLE([plymouth_support],\n  AS_HELP_STRING([--disable-plymouth_support], [do not care about plymouth in sulogin(8) and agetty(8)]),\n  [], [enable_plymouth_support=check]\n)\nUL_BUILD_INIT([plymouth_support])\nUL_REQUIRES_HAVE([plymouth_support], [tiocglcktrmios], [TIOCGLCKTRMIOS flag])\nUL_REQUIRES_HAVE([plymouth_support], [sock_cloexec], [SOCK_CLOEXEC flag])\nUL_REQUIRES_HAVE([plymouth_support], [sock_nonblock], [SOCK_NONBLOCK flag])\nUL_REQUIRES_HAVE([plymouth_support], [so_passcred], [SO_PASSCRED flag])\nAM_CONDITIONAL([USE_PLYMOUTH_SUPPORT], [test \"x$build_plymouth_support\" = xyes])\nAS_IF([test \"x$build_plymouth_support\" = xyes ], [\n    AC_DEFINE([USE_PLYMOUTH_SUPPORT], [1], [Enable plymouth support feature for sulogin and agetty])\n])\n\n\nAC_ARG_WITH([libz],\n  AS_HELP_STRING([--without-libz], [compile without libz]),\n  [], [with_libz=auto]\n)\nAS_IF([test \"x$with_libz\" = xno], [have_z=no], [\n  AC_CHECK_LIB([z], [crc32], [have_z=yes], [have_z=no])\n])\n\nAC_ARG_WITH([libmagic],\n  AS_HELP_STRING([--without-libmagic], [compile without libmagic]),\n  [], [with_libmagic=auto]\n)\nAS_IF([test \"x$with_libmagic\" = xno], [have_magic=no], [\n  AC_CHECK_LIB([magic], [magic_open], [\n    AC_CHECK_HEADER(magic.h, [\n      AC_DEFINE([HAVE_MAGIC], [1], [Define to 1 if you have the libmagic present.])\n      MAGIC_LIBS=\"-lmagic\"\n    ])\n  ])\n])\nAC_SUBST([MAGIC_LIBS])\n\n\nAC_ARG_ENABLE([cramfs],\n  AS_HELP_STRING([--disable-cramfs], [do not build fsck.cramfs, mkfs.cramfs]),\n  [], [UL_DEFAULT_ENABLE([cramfs], [check])]\n)\nUL_BUILD_INIT([cramfs])\nUL_REQUIRES_HAVE([cramfs], [z], [z library])\nAM_CONDITIONAL([BUILD_CRAMFS], [test \"x$build_cramfs\" = xyes])\n\n\nAC_ARG_ENABLE([bfs],\n  AS_HELP_STRING([--disable-bfs], [do not build mkfs.bfs]),\n  [], [UL_DEFAULT_ENABLE([bfs], [yes])]\n)\nUL_BUILD_INIT([bfs])\nAM_CONDITIONAL([BUILD_BFS], [test \"x$build_bfs\" = xyes])\n\n\nAC_ARG_ENABLE([minix],\n  AS_HELP_STRING([--disable-minix], [do not build fsck.minix, mkfs.minix]),\n  [], [UL_DEFAULT_ENABLE([minix], [yes])]\n)\nUL_BUILD_INIT([minix])\nAM_CONDITIONAL([BUILD_MINIX], [test \"x$build_minix\" = xyes])\n\n\nAC_ARG_ENABLE([fdformat],\n  AS_HELP_STRING([--enable-fdformat], [build fdformat]),\n  [], [UL_DEFAULT_ENABLE([fdformat], [no])]\n)\nUL_BUILD_INIT([fdformat])\nUL_REQUIRES_LINUX([fdformat])\nAM_CONDITIONAL([BUILD_FDFORMAT], [test \"x$build_fdformat\" = xyes])\n\n\nAC_ARG_ENABLE([hwclock],\n  AS_HELP_STRING([--disable-hwclock], [do not build hwclock]),\n  [], [UL_DEFAULT_ENABLE([hwclock], [check])]\n)\nhave_linuxdummy=$linux_os\n\nUL_BUILD_INIT([hwclock])\nUL_REQUIRES_HAVE([hwclock], [io, linuxdummy], [ioperm iopl function or Linux])\nAM_CONDITIONAL([BUILD_HWCLOCK], [test \"x$build_hwclock\" = xyes])\n\nAC_ARG_ENABLE([hwclock_cmos],\n  AS_HELP_STRING([--disable-hwclock-cmos], [do not use CMOS clock]),\n  [], [enable_hwclock_cmos=check]\n)\nUL_BUILD_INIT([hwclock_cmos])\nUL_REQUIRES_BUILD([hwclock_cmos], [hwclock])\nUL_REQUIRES_ARCH([hwclock_cmos], [i?86-*,x86_64*])\nAM_CONDITIONAL([USE_HWCLOCK_CMOS], [test \"x$build_hwclock_cmos\" = xyes])\nAS_IF([test \"x$build_hwclock_cmos\" = xyes ], [\n    AC_DEFINE([USE_HWCLOCK_CMOS], [1], [Define to 1 if want to use CMOS clock.])\n])\n\nAC_ARG_ENABLE([hwclock_gplv3],\n  AS_HELP_STRING([--disable-hwclock-gplv3], [do not use datetime parsing GPLv3 code]),\n  [], [enable_hwclock_gplv3=yes]\n)\nAM_CONDITIONAL([USE_HWCLOCK_GPLv3_DATETIME], [test \"x$enable_hwclock_gplv3\" = xyes])\nAS_IF([test \"x$enable_hwclock_gplv3\" = xyes ], [\n    AC_DEFINE([USE_HWCLOCK_GPLv3_DATETIME], [1], [use datetime parsing GPLv3 code to hwclock])\n])\n\n\nAC_ARG_ENABLE([mkfs],\n  AS_HELP_STRING([--disable-mkfs], [do not build mkfs(8)]),\n  [], [UL_DEFAULT_ENABLE([mkfs], [check])]\n)\nUL_BUILD_INIT([mkfs])\nAM_CONDITIONAL([BUILD_MKFS], [test \"x$build_mkfs\" = xyes])\n\nUL_BUILD_INIT([isosize], [yes])\nAM_CONDITIONAL([BUILD_ISOSIZE], [test \"x$build_isosize\" = xyes])\n\n\nAC_ARG_ENABLE([fstrim],\n  AS_HELP_STRING([--disable-fstrim], [do not build fstrim(8)]),\n  [], [UL_DEFAULT_ENABLE([fstrim], [check])]\n)\nUL_BUILD_INIT([fstrim])\nUL_REQUIRES_LINUX([fstrim])\nUL_REQUIRES_BUILD([fstrim], [libmount])\nAM_CONDITIONAL([BUILD_FSTRIM], [test \"x$build_fstrim\" = xyes])\n\n\nAC_ARG_ENABLE([swapon],\n  AS_HELP_STRING([--disable-swapon], [do not build swapon(8) and swapoff(8)]),\n  [], [UL_DEFAULT_ENABLE([swapon], [check])]\n)\nUL_BUILD_INIT([swapon])\nUL_REQUIRES_LINUX([swapon])\nUL_REQUIRES_SYSCALL_CHECK([swapon], [UL_CHECK_SYSCALL([swapon])], [swapon])\nUL_REQUIRES_SYSCALL_CHECK([swapon], [UL_CHECK_SYSCALL([swapoff])], [swapoff])\nUL_REQUIRES_BUILD([swapon], [libblkid])\nUL_REQUIRES_BUILD([swapon], [libmount])\nUL_REQUIRES_BUILD([swapon], [libsmartcols])\nAM_CONDITIONAL([BUILD_SWAPON], [test \"x$build_swapon\" = xyes])\nAC_CHECK_FUNCS([swapon])\nAC_CHECK_FUNCS([swapoff])\n\n\nAC_ARG_ENABLE([lsblk],\n  AS_HELP_STRING([--disable-lsblk], [do not build lsblk]),\n  [], [UL_DEFAULT_ENABLE([lsblk], [check])]\n)\nUL_BUILD_INIT([lsblk])\nUL_REQUIRES_LINUX([lsblk])\nUL_REQUIRES_BUILD([lsblk], [libblkid])\nUL_REQUIRES_BUILD([lsblk], [libmount])\nUL_REQUIRES_BUILD([lsblk], [libsmartcols])\nAM_CONDITIONAL([BUILD_LSBLK], [test \"x$build_lsblk\" = xyes])\n\n\nAC_ARG_ENABLE([lscpu],\n  AS_HELP_STRING([--disable-lscpu], [do not build lscpu]),\n  [], [UL_DEFAULT_ENABLE([lscpu], [check])]\n)\nUL_BUILD_INIT([lscpu])\nUL_REQUIRES_LINUX([lscpu])\nUL_REQUIRES_BUILD([lscpu], [libsmartcols])\nUL_REQUIRES_HAVE([lscpu], [cpu_set_t], [cpu_set_t type])\nAM_CONDITIONAL([BUILD_LSCPU], [test \"x$build_lscpu\" = xyes])\n\nAC_ARG_ENABLE([lsfd],\n  AS_HELP_STRING([--disable-lsfd], [do not build lsfd]),\n  [], [UL_DEFAULT_ENABLE([lsfd], [check])]\n)\nUL_BUILD_INIT([lsfd])\nUL_REQUIRES_LINUX([lsfd])\nUL_REQUIRES_BUILD([lsfd], [libsmartcols])\nUL_REQUIRES_HAVE([lsfd], [linux_bpf_h], [linux/bpf.h header file])\nUL_REQUIRES_HAVE([lsfd], [bpf_obj_name_len], [BPF_OBJ_NAME_LEN macro in linux/bpf.h])\nUL_REQUIRES_HAVE([lsfd], [bpf_tag_size], [BPF_TAG_SIZE macro in linux/bpf.h])\nAM_CONDITIONAL([BUILD_LSFD], [test \"x$build_lsfd\" = xyes])\n\nAC_ARG_ENABLE([lslogins],\n  AS_HELP_STRING([--disable-lslogins], [do not build lslogins]),\n  [], [UL_DEFAULT_ENABLE([lslogins], [check])]\n)\nUL_BUILD_INIT([lslogins])\nUL_REQUIRES_BUILD([lslogins], [libsmartcols])\nUL_REQUIRES_HAVE([lslogins], [shadow_h], [shadow.h header])\nUL_REQUIRES_HAVE([lslogins], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([lslogins], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_LSLOGINS], [test \"x$build_lslogins\" = xyes])\n\n\nUL_BUILD_INIT([chcpu], [check])\nUL_REQUIRES_LINUX([chcpu])\nUL_REQUIRES_HAVE([chcpu], [cpu_set_t], [cpu_set_t type])\nAM_CONDITIONAL([BUILD_CHCPU], [test \"x$build_chcpu\" = xyes])\n\n\nAC_ARG_ENABLE([wdctl],\n  AS_HELP_STRING([--disable-wdctl], [do not build wdctl]),\n  [], [UL_DEFAULT_ENABLE([wdctl], [check])]\n)\nUL_BUILD_INIT([wdctl])\nUL_REQUIRES_LINUX([wdctl])\nUL_REQUIRES_BUILD([wdctl], [libsmartcols])\nUL_REQUIRES_HAVE([wdctl], [linux_watchdog_h], [linux/watchdog.h header file])\nAM_CONDITIONAL([BUILD_WDCTL], [test \"x$build_wdctl\" = xyes])\n\n\nUL_BUILD_INIT([swaplabel], [check])\nUL_REQUIRES_BUILD([swaplabel], [libblkid])\nAM_CONDITIONAL([BUILD_SWAPLABEL], [test \"x$build_swaplabel\" = xyes])\n\n\nUL_BUILD_INIT([mkswap], [yes])\nAM_CONDITIONAL([BUILD_MKSWAP], [test \"x$build_mkswap\" = xyes])\nAS_IF([test \"x$build_mkswap\" = xyes && test \"x$build_libuuid\" != xyes], [\n  AC_MSG_WARN([uuid library is not found; mkswap(8) will not generate UUIDs])\n])\n\n\nAC_ARG_ENABLE([cal],\n  AS_HELP_STRING([--disable-cal], [do not build cal]),\n  [], [UL_DEFAULT_ENABLE([cal], [check])]\n)\nUL_BUILD_INIT([cal])\nAM_CONDITIONAL([BUILD_CAL], [test \"x$build_cal\" = xyes])\n\nAC_ARG_ENABLE([logger],\n  AS_HELP_STRING([--disable-logger], [do not build logger]),\n  [], [UL_DEFAULT_ENABLE([logger], [check])]\n)\nUL_BUILD_INIT([logger])\nAM_CONDITIONAL([BUILD_LOGGER], [test \"x$build_logger\" = xyes])\n\nUL_BUILD_INIT([look], [yes])\nAM_CONDITIONAL([BUILD_LOOK], [test \"x$build_look\" = xyes])\n\nUL_BUILD_INIT([mcookie], [yes])\nAM_CONDITIONAL([BUILD_MCOOKIE], [test \"x$build_mcookie\" = xyes])\n\nUL_BUILD_INIT([namei], [yes])\nAM_CONDITIONAL([BUILD_NAMEI], [test \"x$build_namei\" = xyes])\n\nmatriplet=\"$($CC -print-multiarch 2>/dev/null || true)\"\nif test \"x$matriplet\" != \"x\"; then\n  AC_DEFINE_UNQUOTED([MULTIARCHTRIPLET], [\"$matriplet\"],\n  [\"Multi-arch triplet for whereis library search path\"])\nfi\nAC_ARG_ENABLE([whereis],\n  AS_HELP_STRING([--disable-whereis], [do not build whereis]),\n  [], [UL_DEFAULT_ENABLE([whereis], [check])]\n)\nUL_BUILD_INIT([whereis])\nAM_CONDITIONAL([BUILD_WHEREIS], [test \"x$build_whereis\" = xyes])\n\nAC_ARG_ENABLE([pipesz],\n  AS_HELP_STRING([--disable-pipesz], [do not build pipesz]),\n  [], [UL_DEFAULT_ENABLE([pipesz], [check])]\n)\nUL_BUILD_INIT([pipesz])\nUL_REQUIRES_LINUX([pipesz])\nAM_CONDITIONAL([BUILD_PIPESZ], [test \"x$build_pipesz\" = xyes])\n\nUL_BUILD_INIT([fadvise], [check])\nUL_REQUIRES_LINUX([fadvise])\nAM_CONDITIONAL([BUILD_FADVISE], [test \"x$build_fadvise\" = xyes])\n\nAC_ARG_ENABLE([waitpid],\n  AS_HELP_STRING([--disable-waitpid], [do not build waitpid]),\n  [], [UL_DEFAULT_ENABLE([waitpid], [check])]\n)\nUL_BUILD_INIT([waitpid])\nUL_REQUIRES_LINUX([waitpid])\nUL_REQUIRES_SYSCALL_CHECK([waitpid], [UL_CHECK_SYSCALL([pidfd_open])], [pidfd_open])\nAM_CONDITIONAL([BUILD_WAITPID], [test \"x$build_waitpid\" = xyes])\n\nAC_ARG_ENABLE([enosys],\n  AS_HELP_STRING([--disable-enosys], [do not build enosys]),\n  [], [UL_DEFAULT_ENABLE([enosys], [check])]\n)\nUL_BUILD_INIT([enosys])\nUL_REQUIRES_LINUX([enosys])\nUL_REQUIRES_HAVE([enosys], [linux_audit_h], [linux/audit.h header file])\nAS_IF([test \"x$build_enosys\" = xyes], [\n  AC_MSG_CHECKING([for valid audit arch])\n  AC_COMPILE_IFELSE(\n    [AC_LANG_PROGRAM([[#include \"${srcdir}/include/audit-arch.h\"]])],\n    [AC_MSG_RESULT([yes])],\n    [AC_MSG_RESULT([no])\n     build_enosys=no\n    ])\n])\nAM_CONDITIONAL([BUILD_ENOSYS], [test \"x$build_enosys\" = xyes])\n\nUL_BUILD_INIT([lsclocks], [check])\nUL_REQUIRES_LINUX([lsclocks])\nUL_REQUIRES_BUILD([lsclocks], [libsmartcols])\nAM_CONDITIONAL([BUILD_LSCLOCKS], [test \"x$build_lsclocks\" = xyes])\n\nUL_BUILD_INIT([getopt], [yes])\nAM_CONDITIONAL([BUILD_GETOPT], [test \"x$build_getopt\" = xyes])\n\n\nUL_BUILD_INIT([blockdev], [check])\nUL_REQUIRES_LINUX([blockdev])\nAM_CONDITIONAL([BUILD_BLOCKDEV], [test \"x$build_blockdev\" = xyes])\n\n\nUL_BUILD_INIT([prlimit], [check])\nUL_REQUIRES_LINUX([prlimit])\nUL_REQUIRES_BUILD([prlimit], [libsmartcols])\nUL_REQUIRES_SYSCALL_CHECK([prlimit], [UL_CHECK_SYSCALL([prlimit64])], [prlimit64])\nAM_CONDITIONAL([BUILD_PRLIMIT], [test \"x$build_prlimit\" = xyes])\nAS_IF([test \"x$build_prlimit\" = xyes], [\n  dnl check for valid prlimit() function\n  AC_MSG_CHECKING([for valid prlimit() function])\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <stddef.h>\n]],[[\n   int ret;\n   ret = prlimit(0, RLIMIT_AS, NULL, NULL);\n   if (ret != 0) {\n      return 1;\n   }\n   ]])],[\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([HAVE_PRLIMIT], [1], [Have valid prlimit() function])],[\n  AC_MSG_RESULT([no])])\n])\n\n\n\nUL_BUILD_INIT([lslocks], [check])\nUL_REQUIRES_LINUX([lslocks])\nUL_REQUIRES_BUILD([lslocks], [libmount])\nUL_REQUIRES_BUILD([lslocks], [libsmartcols])\nAM_CONDITIONAL([BUILD_LSLOCKS], [test \"x$build_lslocks\" = xyes])\n\n\nAC_ARG_ENABLE([switch_root],\n  AS_HELP_STRING([--disable-switch_root], [do not build switch_root]),\n  [], [UL_DEFAULT_ENABLE([switch_root], [check])]\n)\nUL_BUILD_INIT([switch_root])\nUL_REQUIRES_LINUX([switch_root])\nUL_REQUIRES_HAVE([switch_root], [openat], [openat function])\nUL_REQUIRES_HAVE([switch_root], [dirfd,ddfd], [dirfd or ddfd function])\nAM_CONDITIONAL([BUILD_SWITCH_ROOT], [test \"x$build_switch_root\" = xyes])\n\n\nAC_ARG_ENABLE([pivot_root],\n  AS_HELP_STRING([--disable-pivot_root], [do not build pivot_root]),\n  [], [UL_DEFAULT_ENABLE([pivot_root], [check])]\n)\nUL_BUILD_INIT([pivot_root])\nUL_REQUIRES_LINUX([pivot_root])\nUL_REQUIRES_SYSCALL_CHECK([pivot_root], [UL_CHECK_SYSCALL([pivot_root])])\nAM_CONDITIONAL([BUILD_PIVOT_ROOT], [test \"x$build_pivot_root\" = xyes])\n\n\nUL_BUILD_INIT([flock], [check])\nUL_REQUIRES_HAVE([flock], [timer], [timer_create/setitimer function])\nAM_CONDITIONAL([BUILD_FLOCK], [test \"x$build_flock\" = xyes])\n\n\nAC_ARG_ENABLE([lsmem],\n  AS_HELP_STRING([--disable-lsmem], [do not build lsmem]),\n  [], [UL_DEFAULT_ENABLE([lsmem], [check])]\n)\nUL_BUILD_INIT([lsmem])\nUL_REQUIRES_LINUX([lsmem])\nUL_REQUIRES_BUILD([lsmem], [libsmartcols])\nAM_CONDITIONAL([BUILD_LSMEM], [test \"x$build_lsmem\" = xyes])\n\n\nAC_ARG_ENABLE([chmem],\n  AS_HELP_STRING([--disable-chmem], [do not build chmem]),\n  [], [UL_DEFAULT_ENABLE([chmem], [check])]\n)\nUL_BUILD_INIT([chmem])\nUL_REQUIRES_LINUX([chmem])\nAM_CONDITIONAL([BUILD_CHMEM], [test \"x$build_chmem\" = xyes])\n\n\nAC_ARG_ENABLE([ipcmk],\n  AS_HELP_STRING([--disable-ipcmk], [do not build ipcmk]),\n  [], [UL_DEFAULT_ENABLE([ipcmk], [check])]\n)\nUL_BUILD_INIT([ipcmk])\nUL_EXCLUDE_ARCH([ipcmk], [*darwin*])\nAM_CONDITIONAL([BUILD_IPCMK], [test \"x$build_ipcmk\" = xyes])\n\nAC_ARG_ENABLE([ipcrm],\n  AS_HELP_STRING([--disable-ipcrm], [do not build ipcrm]),\n  [], [UL_DEFAULT_ENABLE([ipcrm], [check])]\n)\nUL_BUILD_INIT([ipcrm])\nUL_EXCLUDE_ARCH([ipcrm], [*darwin*])\nAM_CONDITIONAL([BUILD_IPCRM], [test \"x$build_ipcrm\" = xyes])\n\nAC_ARG_ENABLE([ipcs],\n  AS_HELP_STRING([--disable-ipcs], [do not build ipcs]),\n  [], [UL_DEFAULT_ENABLE([ipcs], [check])]\n)\nUL_BUILD_INIT([ipcs])\nUL_EXCLUDE_ARCH([ipcs], [*darwin*])\nAM_CONDITIONAL([BUILD_IPCS], [test \"x$build_ipcs\" = xyes])\n\n\nAC_ARG_ENABLE([irqtop],\n  AS_HELP_STRING([--disable-irqtop], [do not build irqtop]),\n  [], [UL_DEFAULT_ENABLE([irqtop], [check])]\n)\nUL_BUILD_INIT([irqtop])\nUL_REQUIRES_LINUX([irqtop])\nUL_REQUIRES_BUILD([irqtop], [libsmartcols])\nUL_REQUIRES_HAVE([irqtop], [open_memstream], [open_memstream function])\nUL_REQUIRES_HAVE([irqtop], [ncursesw,slang,ncurses], [ncursesw, ncurses or slang library])\nAM_CONDITIONAL([BUILD_IRQTOP], [test \"x$build_irqtop\" = xyes])\n\nAC_ARG_ENABLE([lsirq],\n  AS_HELP_STRING([--disable-lsirq], [do not build lsirq]),\n  [], [UL_DEFAULT_ENABLE([lsirq], [check])]\n)\nUL_BUILD_INIT([lsirq])\nUL_REQUIRES_LINUX([lsirq])\nUL_REQUIRES_BUILD([lsirq], [libsmartcols])\nAM_CONDITIONAL([BUILD_LSIRQ], [test \"x$build_lsirq\" = xyes])\n\n\nUL_BUILD_INIT([choom], [check])\nUL_REQUIRES_LINUX([choom])\nAM_CONDITIONAL([BUILD_CHOOM], [test \"x$build_choom\" = xyes])\n\nUL_BUILD_INIT([lsipc], [check])\nUL_REQUIRES_LINUX([lsipc])\nUL_REQUIRES_BUILD([lsipc], [libsmartcols])\nAM_CONDITIONAL([BUILD_LSIPC], [test \"x$build_lsipc\" = xyes])\n\nAC_ARG_ENABLE([lsns],\n  AS_HELP_STRING([--disable-lsns], [do not build lsns]),\n  [], [UL_DEFAULT_ENABLE([lsns], [check])]\n)\nUL_BUILD_INIT([lsns])\nUL_REQUIRES_LINUX([lsns])\nUL_REQUIRES_BUILD([lsns], [libsmartcols])\nUL_REQUIRES_BUILD([lsns], [libmount])\nAM_CONDITIONAL([BUILD_LSNS], [test \"x$build_lsns\" = xyes])\n\nUL_BUILD_INIT([renice], [yes])\nAM_CONDITIONAL([BUILD_RENICE], [test \"x$build_renice\" = xyes])\n\n\nAC_ARG_ENABLE([rfkill],\n  AS_HELP_STRING([--disable-rfkill], [do not build rfkill]),\n  [], [UL_DEFAULT_ENABLE([rfkill], [check])]\n)\nUL_BUILD_INIT([rfkill])\nUL_REQUIRES_LINUX([rfkill])\nUL_REQUIRES_BUILD([rfkill], [libsmartcols])\nAM_CONDITIONAL([BUILD_RFKILL], [test \"x$build_rfkill\" = xyes])\n\n\nUL_BUILD_INIT([setpgid], [yes])\nAM_CONDITIONAL([BUILD_SETPGID], [test \"x$build_setpgid\" = xyes])\n\nUL_BUILD_INIT([setsid], [yes])\nAM_CONDITIONAL([BUILD_SETSID], [test \"x$build_setsid\" = xyes])\n\nUL_BUILD_INIT([readprofile], [check])\nUL_REQUIRES_LINUX([readprofile])\nAM_CONDITIONAL([BUILD_READPROFILE], [test \"x$build_readprofile\" = xyes])\n\nAC_ARG_ENABLE([dmesg],\n  AS_HELP_STRING([--disable-dmesg], [do not build dmesg]),\n  [], [UL_DEFAULT_ENABLE([dmesg], [check])]\n)\nUL_BUILD_INIT([dmesg])\nUL_REQUIRES_LINUX([dmesg])\nAM_CONDITIONAL([BUILD_DMESG], [test \"x$build_dmesg\" = xyes])\n\nUL_BUILD_INIT([ctrlaltdel], [check])\nUL_REQUIRES_LINUX([ctrlaltdel])\ndnl we assume reboot() to be the 1-argument variant, because even considering\ndnl widely used alternative C libraries like uclibc, dietlibc and musl,\ndnl reboot() with multiple arguments is yet only found in glibc versions\ndnl earlier than 2.x.\nUL_REQUIRES_HAVE([ctrlaltdel], [reboot], [reboot function])\nAM_CONDITIONAL([BUILD_CTRLALTDEL], [test \"x$build_ctrlaltdel\" = xyes])\n\nAC_ARG_ENABLE([exch],\n  AS_HELP_STRING([--disable-exch], [do not build exch]),\n  [], [UL_DEFAULT_ENABLE([exch], [check])]\n)\nUL_BUILD_INIT([exch])\nUL_REQUIRES_LINUX([exch])\nUL_REQUIRES_SYSCALL_CHECK([exch], [UL_CHECK_SYSCALL([renameat2])])\nAM_CONDITIONAL([BUILD_EXCH], [test \"x$build_exch\" = xyes])\n\nUL_BUILD_INIT([fincore], [check])\nUL_REQUIRES_LINUX([fincore])\nUL_REQUIRES_BUILD([fincore], [libsmartcols])\nAM_CONDITIONAL([BUILD_FINCORE], [test \"x$build_fincore\" = xyes])\n\nUL_BUILD_INIT([fsfreeze], [check])\nUL_REQUIRES_LINUX([fsfreeze])\nAM_CONDITIONAL([BUILD_FSFREEZE], [test \"x$build_fsfreeze\" = xyes])\n\nUL_BUILD_INIT([blkdiscard], [check])\nUL_REQUIRES_LINUX([blkdiscard])\nAM_CONDITIONAL([BUILD_BLKDISCARD], [test \"x$build_blkdiscard\" = xyes])\n\nUL_BUILD_INIT([blkzone], [check])\nUL_REQUIRES_LINUX([blkzone])\nUL_REQUIRES_HAVE([blkzone], [linux_blkzoned_h], [linux/blkzoned.h header])\nAM_CONDITIONAL([BUILD_BLKZONE], [test \"x$build_blkzone\" = xyes])\n\nUL_BUILD_INIT([blkpr], [check])\nUL_REQUIRES_LINUX([blkpr])\nUL_REQUIRES_HAVE([blkpr], [linux_pr_h], [linux/pr.h header])\nAM_CONDITIONAL([BUILD_BLKPR], [test \"x$build_blkpr\" = xyes])\n\nUL_BUILD_INIT([ldattach], [check])\nUL_REQUIRES_LINUX([ldattach])\nAM_CONDITIONAL([BUILD_LDATTACH], [test \"x$build_ldattach\" = xyes])\n\nUL_BUILD_INIT([rtcwake], [check])\nUL_REQUIRES_LINUX([rtcwake])\nAM_CONDITIONAL([BUILD_RTCWAKE], [test \"x$build_rtcwake\" = xyes])\n\nUL_BUILD_INIT([setarch], [check])\nUL_REQUIRES_LINUX([setarch])\nAM_CONDITIONAL([BUILD_SETARCH], [test \"x$build_setarch\" = xyes])\n\n\n# build_scriptutils= is just configure-only variable to control\n# script, scriptreplay and scriptlive\nAC_ARG_ENABLE([scriptutils],\n  AS_HELP_STRING([--disable-scriptutils], [do not build script, scriptreplay and scriptlive]),\n  [], [UL_DEFAULT_ENABLE([scriptutils], [check])]\n)\n\nUL_ENABLE_ALIAS([script], [scriptutils])\nUL_BUILD_INIT([script])\nUL_REQUIRES_HAVE([script], [pty], [openpty function (libutil)])\nAM_CONDITIONAL([BUILD_SCRIPT], [test \"x$build_script\" = xyes])\n\nUL_ENABLE_ALIAS([scriptreplay], [scriptutils])\nUL_BUILD_INIT([scriptreplay])\nAM_CONDITIONAL([BUILD_SCRIPTREPLAY], [test \"x$build_scriptreplay\" = xyes])\n\nUL_ENABLE_ALIAS([scriptlive], [scriptutils])\nUL_BUILD_INIT([scriptlive])\nUL_REQUIRES_HAVE([scriptlive], [pty], [openpty function (libutil)])\nAM_CONDITIONAL([BUILD_SCRIPTLIVE], [test \"x$build_scriptlive\" = xyes])\n\n\nUL_BUILD_INIT([bits], [yes])\nAM_CONDITIONAL([BUILD_BITS], [test \"x$build_bits\" = xyes])\n\nUL_BUILD_INIT([col], [check])\nUL_REQUIRES_COMPILE([col], [#include <limits.h>], [__GLIBC__], [building for glibc])\nAM_CONDITIONAL([BUILD_COL], [test \"x$build_col\" = xyes])\n\nUL_BUILD_INIT([colcrt], [yes])\nAM_CONDITIONAL([BUILD_COLCRT], [test \"x$build_colcrt\" = xyes])\n\nUL_BUILD_INIT([colrm], [yes])\nAM_CONDITIONAL([BUILD_COLRM], [test \"x$build_colrm\" = xyes])\n\nUL_BUILD_INIT([column], [check])\nUL_REQUIRES_BUILD([column], [libsmartcols])\nAM_CONDITIONAL([BUILD_COLUMN], [test \"x$build_column\" = xyes])\n\nAC_ARG_ENABLE([hexdump],\n  AS_HELP_STRING([--disable-hexdump], [do not build hexdump]),\n  [], [UL_DEFAULT_ENABLE([hexdump], [check])]\n)\nUL_BUILD_INIT([hexdump])\nAM_CONDITIONAL([BUILD_HEXDUMP], [test \"x$build_hexdump\" = xyes])\n\nUL_BUILD_INIT([rev], [yes])\nAM_CONDITIONAL([BUILD_REV], [test \"x$build_rev\" = xyes])\n\n\nAC_ARG_ENABLE([tunelp],\n  AS_HELP_STRING([--enable-tunelp], [build tunelp]),\n  [], [UL_DEFAULT_ENABLE([tunelp], [no])]\n)\nUL_BUILD_INIT([tunelp])\nUL_REQUIRES_LINUX([tunelp])\nAM_CONDITIONAL([BUILD_TUNELP], [test \"x$build_tunelp\" = xyes])\n\n\nAC_ARG_ENABLE([kill],\n  AS_HELP_STRING([--disable-kill], [do not build kill]),\n  [], [UL_DEFAULT_ENABLE([kill], [check])]\n)\nUL_BUILD_INIT([kill])\nUL_REQUIRES_LINUX([kill])\nAM_CONDITIONAL([BUILD_KILL], [test \"x$build_kill\" = xyes])\n\n\nAC_ARG_ENABLE([last],\n  AS_HELP_STRING([--disable-last], [do not build last]),\n  [], [UL_DEFAULT_ENABLE([last], [check])]\n)\nUL_BUILD_INIT([last])\nUL_REQUIRES_HAVE([last], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([last], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_LAST], [test \"x$build_last\" = xyes])\n\n\nAC_ARG_ENABLE([utmpdump],\n  AS_HELP_STRING([--disable-utmpdump], [do not build utmpdump]),\n  [], [UL_DEFAULT_ENABLE([utmpdump], [check])]\n)\nUL_BUILD_INIT([utmpdump])\nUL_REQUIRES_HAVE([utmpdump], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([utmpdump], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_UTMPDUMP], [test \"x$build_utmpdump\" = xyes])\n\n\nAC_ARG_ENABLE([line],\n  AS_HELP_STRING([--enable-line], [build line]),\n  [], [UL_DEFAULT_ENABLE([line], [no])]\n)\nUL_BUILD_INIT([line])\nAM_CONDITIONAL([BUILD_LINE], [test \"x$build_line\" = xyes])\n\n\nAC_ARG_ENABLE([mesg],\n  AS_HELP_STRING([--disable-mesg], [do not build mesg]),\n  [], [UL_DEFAULT_ENABLE([mesg], [yes])]\n)\nUL_BUILD_INIT([mesg])\nAM_CONDITIONAL([BUILD_MESG], [test \"x$build_mesg\" = xyes])\n\n\nAC_ARG_ENABLE([raw],\n  AS_HELP_STRING([--disable-raw], [do not build raw]),\n  [], [UL_DEFAULT_ENABLE([raw], [check])]\n)\nUL_BUILD_INIT([raw])\nUL_REQUIRES_LINUX([raw])\nUL_REQUIRES_HAVE([raw], [linux_raw_h], [raw.h header file])\nAM_CONDITIONAL([BUILD_RAW], [test \"x$build_raw\" = xyes])\n\n\nAC_ARG_ENABLE([rename],\n  AS_HELP_STRING([--disable-rename], [do not build rename]),\n  [], [UL_DEFAULT_ENABLE([rename], [yes])]\n)\nUL_BUILD_INIT([rename])\nAM_CONDITIONAL([BUILD_RENAME], [test \"x$build_rename\" = xyes])\n\n\nAC_ARG_ENABLE([vipw],\n  AS_HELP_STRING([--enable-vipw], [build vipw]),\n  [], [UL_DEFAULT_ENABLE([vipw], [no])]\n)\nUL_BUILD_INIT([vipw])\nUL_REQUIRES_HAVE([vipw], [shadow_h], [shadow.h header])\nAM_CONDITIONAL([BUILD_VIPW], [test \"x$build_vipw\" = xyes])\n\n\nAC_ARG_ENABLE([newgrp],\n  AS_HELP_STRING([--enable-newgrp], [build newgrp]),\n  [], [UL_DEFAULT_ENABLE([newgrp], [no])]\n)\nUL_BUILD_INIT([newgrp])\nUL_REQUIRES_HAVE([newgrp], [crypt], [crypt function])\nAM_CONDITIONAL([BUILD_NEWGRP], [test \"x$build_newgrp\" = xyes])\n\n\nAC_ARG_WITH([user], AS_HELP_STRING([--without-user], [compile without libuser (remote chsh)]),\n  [], [with_user=check]\n)\nhave_user=no\nAS_IF([test \"x$with_user\" != xno], [\n  PKG_CHECK_MODULES(LIBUSER,[libuser >= 0.58], [have_user=yes], [have_user=no])\n  AS_CASE([$with_user:$have_user],\n    [yes:no],\n      [AC_MSG_ERROR([user selected but libuser not found])],\n    [*:yes],\n      [AC_DEFINE([HAVE_LIBUSER], [1], [Define if libuser is available])]\n  )\n  # temporary solution, libuser has stupid .pc where are exported all\n  # private dependencies to Requires: instead of Requires.private:\n  AS_IF([test \"x$have_user\" = xyes], [\n    LIBUSER_LIBS=-luser\n  ])\n])\nAM_CONDITIONAL([HAVE_USER], [test \"x$have_user\" = xyes])\n\nAC_ARG_ENABLE([chfn-chsh-password],\n  AS_HELP_STRING([--disable-chfn-chsh-password], [do not require the user to enter the password in chfn and chsh]),\n  [], [enable_chfn_chsh_password=yes]\n)\n\nAC_ARG_ENABLE([chfn-chsh],\n  AS_HELP_STRING([--disable-chfn-chsh], [do not build chfn and chsh]),\n  [], [UL_DEFAULT_ENABLE([chfn_chsh], [check])]\n)\nUL_BUILD_INIT([chfn_chsh])\nUL_REQUIRES_HAVE([chfn_chsh], [shadow_h], [shadow.h header])\nUL_REQUIRES_HAVE([chfn_chsh], [getusershell], [getusershell function])\n\nAS_IF([test \"x$enable_chfn_chsh_password\" = xyes || test \"x$have_user\" = xyes], [\n  UL_REQUIRES_HAVE([chfn_chsh], [security_pam_appl_h], [PAM header file])\n  AC_DEFINE([CHFN_CHSH_PASSWORD], [1], [Should chfn and chsh require the user to enter the password?])\n])\nAM_CONDITIONAL([BUILD_CHFN_CHSH], [test \"x$build_chfn_chsh\" = xyes])\nAM_CONDITIONAL([CHFN_CHSH_PASSWORD], [test \"x$enable_chfn_chsh_password\" = xyes])\n\nAC_ARG_ENABLE([chsh-only-listed],\n  AS_HELP_STRING([--disable-chsh-only-listed], [chsh: allow shells not in /etc/shells]),\n  [], enable_chsh_only_listed=yes\n)\n\nAS_IF([test \"x$enable_chsh_only_listed\" = xyes], [\n  AC_DEFINE([ONLY_LISTED_SHELLS], [1], [Should chsh allow only shells in /etc/shells?])\n])\n\n\nAC_ARG_ENABLE([login],\n  AS_HELP_STRING([--disable-login], [do not build login]),\n  [], [UL_DEFAULT_ENABLE([login], [check])]\n)\nUL_BUILD_INIT([login])\nUL_REQUIRES_HAVE([login], [security_pam_appl_h], [PAM header file])\nUL_REQUIRES_HAVE([login], [security_pam_misc_h, security_openpam_h], [PAM conversation functions])\nUL_REQUIRES_HAVE([login], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([login], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_LOGIN], [test \"x$build_login\" = xyes])\n\nAC_ARG_ENABLE([login-chown-vcs],\n  AS_HELP_STRING([--enable-login-chown-vcs], [let login chown /dev/vcsN]),\n  [], [enable_login_chown_vcs=no]\n)\n\nAS_IF([test \"x$enable_login_chown_vcs\" = xyes], [\n  AC_DEFINE([LOGIN_CHOWN_VCS], [1], [Should login chown /dev/vcsN?])\n])\n\nAC_ARG_ENABLE([login-stat-mail],\n  AS_HELP_STRING([--enable-login-stat-mail], [let login stat() the mailbox]),\n  [], [enable_login_stat_mail=no]\n)\n\nAS_IF([test \"x$enable_login_stat_mail\" = xyes], [\n  AC_DEFINE([LOGIN_STAT_MAIL], [1], [Should login stat() the mailbox?])\n])\n\nAC_ARG_ENABLE([login-lastlog],\n  AS_HELP_STRING([--enable-login-lastlog], [program login writes lastlog entries]),\n  [], [enable_login_lastlogin=no]\n)\n\nAS_IF([test \"x$enable_login_lastlogin\" != xno], [\n  AC_DEFINE([USE_LOGIN_LASTLOG],\n\t    [1],\n\t    [Define if program login writes lastlog entries])\n])\n\nAC_ARG_ENABLE([nologin],\n  AS_HELP_STRING([--disable-nologin], [do not build nologin]),\n  [], [UL_DEFAULT_ENABLE([nologin], [yes])]\n)\nUL_BUILD_INIT([nologin])\nAM_CONDITIONAL([BUILD_NOLOGIN], [test \"x$build_nologin\" = xyes])\n\n\nAC_ARG_ENABLE([sulogin],\n  AS_HELP_STRING([--disable-sulogin], [do not build sulogin]),\n  [], [UL_DEFAULT_ENABLE([sulogin], [check])]\n)\nUL_BUILD_INIT([sulogin])\nUL_REQUIRES_HAVE([sulogin], [crypt], [crypt function])\nUL_REQUIRES_HAVE([sulogin], [shadow_h], [shadow.h header])\nAM_CONDITIONAL([BUILD_SULOGIN], [test \"x$build_sulogin\" = xyes])\n\n\nAC_ARG_ENABLE([su],\n  AS_HELP_STRING([--disable-su], [do not build su]),\n  [], [UL_DEFAULT_ENABLE([su], [check])]\n)\nUL_BUILD_INIT([su])\nUL_REQUIRES_HAVE([su], [security_pam_appl_h], [PAM header file])\nUL_REQUIRES_HAVE([su], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([su], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_SU], [test \"x$build_su\" = xyes])\n\n\nAC_ARG_ENABLE([runuser],\n  AS_HELP_STRING([--disable-runuser], [do not build runuser]),\n  [], [UL_DEFAULT_ENABLE([runuser], [check])]\n)\nUL_BUILD_INIT([runuser])\nUL_REQUIRES_HAVE([runuser], [security_pam_appl_h], [PAM header file])\nUL_REQUIRES_HAVE([runuser], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([runuser], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_RUNUSER], [test \"x$build_runuser\" = xyes])\n\n\nAC_ARG_ENABLE([ul],\n  AS_HELP_STRING([--disable-ul], [do not build ul]),\n  [], [UL_DEFAULT_ENABLE([ul], [check])]\n)\nUL_BUILD_INIT([ul])\nUL_REQUIRES_HAVE([ul], [ncursesw, ncurses], [ncursesw or ncurses libraries])\nAM_CONDITIONAL([BUILD_UL], [test \"x$build_ul\" = xyes])\n\n\nAC_ARG_ENABLE([more],\n  AS_HELP_STRING([--disable-more], [do not build more]),\n  [], [UL_DEFAULT_ENABLE([more], [check])]\n)\nUL_BUILD_INIT([more])\nUL_REQUIRES_HAVE([more], [ncursesw, ncurses], [ncursesw or ncurses libraries])\nUL_REQUIRES_HAVE([more], [sys_signalfd_h], [sys/signalfd.h header])\nAM_CONDITIONAL([BUILD_MORE], [test \"x$build_more\" = xyes])\n\n\nAC_ARG_ENABLE([pg],\n  AS_HELP_STRING([--enable-pg], [build pg]),\n  [], [UL_DEFAULT_ENABLE([pg], [no])]\n)\nUL_BUILD_INIT([pg])\nUL_REQUIRES_HAVE([pg], [ncursesw, ncurses], [ncursesw or ncurses library])\nAM_CONDITIONAL([BUILD_PG], [test \"x$build_pg\" = xyes])\n\n\nAC_ARG_ENABLE([setterm],\n  AS_HELP_STRING([--disable-setterm], [do not build setterm]),\n  [], [UL_DEFAULT_ENABLE([setterm], [check])]\n)\nUL_BUILD_INIT([setterm])\nUL_REQUIRES_LINUX([setterm])\nUL_REQUIRES_HAVE([setterm], [ncursesw, ncurses], [ncursesw or ncurses library])\nAM_CONDITIONAL([BUILD_SETTERM], [test \"x$build_setterm\" = xyes])\n\n# build_schedutils= is just configure-only variable to control\n# ionice, taskset, coresched and chrt\nAC_ARG_ENABLE([schedutils],\n  AS_HELP_STRING([--disable-schedutils], [do not build chrt, ionice, taskset, coresched]),\n  [], [UL_DEFAULT_ENABLE([schedutils], [check])]\n)\n\n\nUL_ENABLE_ALIAS([ionice], [schedutils])\nUL_BUILD_INIT([ionice])\nUL_REQUIRES_SYSCALL_CHECK([ionice],\n\t[UL_CHECK_SYSCALL([ioprio_set],\n\t  [alpha],\t[442],\n\t  [i*86],\t[289],\n\t  [ia64*],\t[1274],\n\t  [powerpc*],\t[273],\n\t  [s390*],\t[282],\n\t  [sparc*],\t[196],\n\t  [sh*],\t[288],\n\t  [x86_64*],\t[251])],\n\t[ioprio_set])\n\nUL_REQUIRES_SYSCALL_CHECK([ionice],\n\t[UL_CHECK_SYSCALL([ioprio_get],\n\t  [alpha],\t[443],\n\t  [i*86],\t[290],\n\t  [ia64*],\t[1275],\n\t  [powerpc*],\t[274],\n\t  [s390*],\t[283],\n\t  [sparc*],\t[218],\n\t  [sh*],\t[289],\n\t  [x86_64*],\t[252])],\n\t[ioprio_get])\n\nAM_CONDITIONAL([BUILD_IONICE], [test \"x$build_ionice\" = xyes])\n\n\nUL_ENABLE_ALIAS([taskset], [schedutils])\nUL_BUILD_INIT([taskset])\nUL_REQUIRES_HAVE([taskset], [cpu_set_t], [cpu_set_t type])\nUL_REQUIRES_SYSCALL_CHECK([taskset],\n\t[UL_CHECK_SYSCALL([sched_getaffinity])],\n\t[sched_getaffinity])\nAM_CONDITIONAL([BUILD_TASKSET], [test \"x$build_taskset\" = xyes])\n\n\nUL_ENABLE_ALIAS([coresched], [schedutils])\nUL_BUILD_INIT([coresched])\nUL_REQUIRES_SYSCALL_CHECK([coresched],\n\t[UL_CHECK_SYSCALL([prctl])],\n\t[prctl])\nAM_CONDITIONAL([BUILD_CORESCHED], [test \"x$build_coresched\" = xyes])\n\n\nhave_schedsetter=no\nAS_IF([test \"x$ac_cv_func_sched_setscheduler\" = xyes], [have_schedsetter=yes],\n      [test \"x$ac_cv_func_sched_setattr\" = xyes], [have_schedsetter=yes])\n\nUL_ENABLE_ALIAS([chrt], [schedutils])\nUL_BUILD_INIT([chrt])\nUL_REQUIRES_HAVE([chrt], [schedsetter], [sched_set functions])\nAM_CONDITIONAL([BUILD_CHRT], [test \"x$build_chrt\" = xyes])\n\nAS_IF([test \"x$build_chrt\" = xyes], [\n\tUL_CHECK_SYSCALL([sched_setattr])\n])\n\nUL_ENABLE_ALIAS([uclampset], [schedutils])\nUL_BUILD_INIT([uclampset])\nUL_REQUIRES_SYSCALL_CHECK([uclampset],\n\t[UL_CHECK_SYSCALL([sched_setattr])], [sched_setattr])\nAM_CONDITIONAL([BUILD_UCLAMPSET], [test \"x$build_uclampset\" = xyes])\n\n\nAC_ARG_ENABLE([wall],\n  AS_HELP_STRING([--disable-wall], [do not build wall]),\n  [], [UL_DEFAULT_ENABLE([wall], [check])]\n)\nUL_BUILD_INIT([wall])\nUL_REQUIRES_HAVE([wall], [utmpx_h], [utmpx.h header])\nAM_CONDITIONAL([BUILD_WALL], [test \"x$build_wall\" = xyes])\n\n\nAC_ARG_ENABLE([write],\n  AS_HELP_STRING([--enable-write], [build write]),\n  [], [UL_DEFAULT_ENABLE([write], [no])]\n)\nUL_BUILD_INIT([write])\nUL_REQUIRES_HAVE([write], [utmpx_h], [utmpx.h header])\nUL_REQUIRES_HAVE([write], [gnu_utmpx], [GNU utmpx functions])\nAM_CONDITIONAL([BUILD_WRITE], [test \"x$build_write\" = xyes])\n\n\nAC_ARG_WITH([btrfs],\n  AS_HELP_STRING([--without-btrfs], [do not build with btrfs support]),\n  [], [with_btrfs=check]\n)\nhave_btrfs=no\nAS_IF([test \"x$with_btrfs\" != xno], [\n  AS_CASE([$with_btrfs:$have_linux_btrfs_h],\n    [yes:no],\n    [AC_MSG_ERROR([btrfs selected but linux/btrfs.h not found])],\n    [check:no],\n       [AC_MSG_WARN([linux/btrfs.h not found, do not build with btrfs support])],\n    [*:yes],\n       [have_btrfs=yes\n\tAC_DEFINE([HAVE_BTRFS_SUPPORT], [1], [Define if btrfs stuff is available])]\n  )\n])\nAM_CONDITIONAL([HAVE_BTRFS], [test \"x$have_btrfs\" = xyes])\n\n\nAC_ARG_WITH([systemd],\n  AS_HELP_STRING([--without-systemd], [do not build with systemd support]),\n  [], [with_systemd=check]\n)\n\nhave_systemd=no\nAS_IF([test \"x$with_systemd\" != xno], [\n  # new version -- all libsystemd-* libs merged into libsystemd\n  PKG_CHECK_MODULES([SYSTEMD], [libsystemd], [have_systemd=yes], [have_systemd=no])\n  # old versions\n  AS_IF([test \"x$have_systemd\" != \"xyes\"], [\n    PKG_CHECK_MODULES([SYSTEMD_DAEMON], [libsystemd-daemon],\n\t\t      [have_systemd_daemon=yes], [have_systemd_daemon=no])\n    PKG_CHECK_MODULES([SYSTEMD_JOURNAL], [libsystemd-journal],\n\t\t      [have_systemd_journal=yes], [have_systemd_journal=no])\n    AS_IF([test \"x$have_systemd_daemon\" = \"xyes\" && test \"x$have_systemd_journal\" = \"xyes\" ],[\n\t   have_systemd=yes])\n  ])\n  AS_CASE([$with_systemd:$have_systemd],\n    [yes:no],\n      [AC_MSG_ERROR([systemd expected but libsystemd not found])],\n    [*:yes],\n       AC_DEFINE([HAVE_LIBSYSTEMD], [1], [Define if libsystemd is available])\n       AC_DEFINE([USE_SYSTEMD], [1], [Define if systemd support is wanted ])\n       AC_CHECK_DECLS([sd_session_get_username], [], [], [#include <systemd/sd-login.h>])\n  )\n])\nAM_CONDITIONAL([HAVE_SYSTEMD], [test \"x$have_systemd\" = xyes])\n\n\nAC_ARG_WITH([systemdsystemunitdir],\n  AS_HELP_STRING([--with-systemdsystemunitdir=DIR], [directory for systemd unit files (requires systemd support)]),\n  [], [\n  AS_IF([test \"x$have_systemd\" = xyes], [\n    PKG_CHECK_VAR([with_systemdsystemunitdir], [systemd], [systemdsystemunitdir],\n      [],\n      [with_systemdsystemunitdir=no])\n  ])\n])\nAS_IF([test \"x$with_systemdsystemunitdir\" != \"xno\"], [\n  AC_SUBST([systemdsystemunitdir], [$with_systemdsystemunitdir])\n])\n\nAC_ARG_WITH([tmpfilesdir],\n  AS_HELP_STRING([--with-tmpfilesdir=DIR], [directory for tmpfiles. See tmpfiles.d(5) for details]),\n  [], [\n  AS_IF([test \"x$have_systemd\" = xyes], [\n    PKG_CHECK_VAR([with_tmpfilesdir], [systemd], [tmpfilesdir],\n      [],\n      [with_tmpfilesdir=no])\n  ])\n])\nAS_IF([test \"x$with_tmpfilesdir\" != \"xno\"], [\n  AC_SUBST([tmpfilesdir], [$with_tmpfilesdir])\n])\n\nAC_ARG_WITH([smack],\n  AS_HELP_STRING([--with-smack], [build with SMACK support]),\n  [], [with_smack=no]\n)\nAS_IF([test \"x$with_smack\" = xyes], [\n  AC_DEFINE([HAVE_SMACK], [1], [Add SMACK support])\n])\n\nAC_ARG_WITH([econf],\n  AS_HELP_STRING([--without-econf], [do not use libeconf]),\n  [], [with_econf=check]\n)\n\nhave_econf=no\nAS_IF([test \"x$with_econf\" != xno], [\n  PKG_CHECK_MODULES([ECONF], [libeconf],\n     [have_econf=yes\n      AC_CHECK_LIB([econf], [econf_readConfig], [\n\t  AC_DEFINE([HAVE_ECONF_READCONFIG], [1], [Define if econf_readConfig exist in -leconf])\n\t  ])\n     ],\n     [have_econf=no]\n  )\n  AS_CASE([$with_econf:$have_econf],\n    [yes:no],\n      [AC_MSG_ERROR([libeconf expected but libeconf not found])],\n    [*:yes],\n       AC_DEFINE([HAVE_LIBECONF], [1], [Define if libeconf is available])\n  )\n])\nAM_CONDITIONAL([HAVE_ECONF], [test \"x$have_econf\" = xyes])\n\nAC_ARG_WITH([vendordir],\n  AS_HELP_STRING([--with-vendordir=DIR], [Directory for distribution provided configuration files]),\n  [], []\n)\nAC_SUBST([vendordir], [$with_vendordir])\nAM_CONDITIONAL([USE_VENDORDIR], [test \"x$with_vendordir\" != x])\nAS_IF([test \"x$with_vendordir\" != x], [\n  AC_DEFINE([USE_VENDORDIR], [1], [Define to 1 to use vendordir])\n])\n\n\nAC_ARG_ENABLE([bash-completion],\n  AS_HELP_STRING([--disable-bash-completion], [do not install bash completion files]),\n  [], [enable_bash_completion=yes]\n)\n\nAM_CONDITIONAL([BUILD_BASH_COMPLETION], [test \"x$enable_bash_completion\" = xyes])\n\nAC_ARG_WITH([bashcompletiondir],\n  AS_HELP_STRING([--with-bashcompletiondir=DIR], [Bash completions directory]),\n  [], [\n  AS_IF([test \"x$enable_bash_completion\" = xyes], [\n    PKG_CHECK_VAR([with_bashcompletiondir], [bash-completion], [completionsdir],\n      [],\n      [with_bashcompletiondir=${datadir}/bash-completion/completions])\n  ])\n])\nAS_IF([test \"x$enable_bash_completion\" = xyes], [\n  AC_SUBST([bashcompletiondir], [$with_bashcompletiondir])\n])\n\n\nAC_ARG_WITH([python],\n  AS_HELP_STRING([--without-python], [do not build python bindings, use --with-python={2,3} to force version]),\n  [], [with_python=check withval=check]\n)\n\nhave_python=no\nhave_libpython=no\nAS_IF([test \"x$with_python\" != xno], [\n  # We follow distributions default and look for PKG module name \"python\"\n  # (minimal version is 2) but if major version is explicitly specified by\n  # --with-python=2 or --with-python=3 then we look for PKG module \"python2\" or\n  # \"python3\".\n  AS_IF([test \"x$withval\" != xno && test \"x$withval\" != xyes && test \"x$withval\" != xcheck],\n\t[pymajor=\"$withval\"; PYTHON=python${pymajor}], [pymajor=\"2\"])\n\n  # check for python interpreter\n  AM_PATH_PYTHON([$pymajor], [have_python=yes], [have_python=no])\n  AS_CASE([$with_python:$have_python],\n    [yes:no],\n      [AC_MSG_ERROR([python selected but python interpreter not found])],\n    [check:no],\n       [AC_MSG_WARN([python interpreter not found, do not build python bindings])],\n    [*:yes],\n       # check for python development stuff\n       [\n         PKG_CHECK_MODULES([PYTHON], [python-$PYTHON_VERSION], [have_libpython=yes], [have_libpython=no])\n\n         # https://github.com/util-linux/util-linux/issues/2366\n         AX_COMPARE_VERSION([$PYTHON_VERSION], [ge], [3.12], [\n           UL_WARN_ADD([-Wno-error=redundant-decls], [PYTHON_CFLAGS])\n         ])\n       ]\n  )\n])\n\n\nAC_ARG_ENABLE([pylibmount],\n  AS_HELP_STRING([--disable-pylibmount], [do not build pylibmount]),\n  [], [UL_DEFAULT_ENABLE([pylibmount], [check])]\n)\nUL_BUILD_INIT([pylibmount])\nUL_REQUIRES_HAVE([pylibmount], [libpython], [libpython])\nUL_REQUIRES_BUILD([pylibmount], [libmount])\nAM_CONDITIONAL([BUILD_PYLIBMOUNT], [test \"x$build_pylibmount\" = \"xyes\"])\n\n# We need to introduce a verbatim dependency into the Makefile, without automake\n# trying to interpret it, so push it as a AM_SUBST_NOTMAKE variable.\nverbatim_extra_dependency='\n\n# pylibmountexec module must be installed after usrlib_exec libraries,\n# otherwise the libtool relink step will fail to find libmount.la and\n# will try -lmount which is possibly not available.\ninstall-pylibmountexecLTLIBRARIES: install-usrlib_execLTLIBRARIES\ninstall-securelib_execLTLIBRARIES: install-usrlib_execLTLIBRARIES\n\n'\nAC_SUBST([verbatim_extra_dependency])\nAM_SUBST_NOTMAKE([verbatim_extra_dependency])\n\nAC_ARG_ENABLE([pg-bell],\n  AS_HELP_STRING([--disable-pg-bell], [let pg not ring the bell on invalid keys]),\n  [], [enable_pg_bell=yes]\n)\n\nAS_IF([test \"x$enable_pg_bell\" = xyes], [\n  AC_DEFINE([PG_BELL], [1], [Should pg ring the bell on invalid keys?])\n])\n\n\nAC_DEFUN([FS_PATHS_DEFAULT], [/sbin:/sbin/fs.d:/sbin/fs])\nAC_ARG_ENABLE([fs-paths-default],\n  AS_HELP_STRING([--enable-fs-paths-default=paths], [default search path for fs helpers @<:@FS_PATHS_DEFAULT@:>@]),\n  [AS_CASE([$enableval],\n    [yes], [fs_paths_defaults=\"FS_PATHS_DEFAULT\"],\n    [no],  [fs_paths_defaults=\"\"],\n    [fs_paths_defaults=\"$enableval\"]\n  )],\n  [fs_paths_defaults=\"FS_PATHS_DEFAULT\"]\n)\nAC_ARG_ENABLE([fs-paths-extra],\n  AS_HELP_STRING([--enable-fs-paths-extra=paths], [additional search paths for fs helpers]),\n  [AS_CASE([$enableval],\n     [yes|no], [fs_paths_extra=\"\"],\n     [fs_paths_extra=\"$enableval\"]\n  )],\n  [fs_paths_extra=\"\"]\n)\nfs_paths=\"$fs_paths_defaults\"\nAS_IF([test \"x$fs_paths_extra\" != \"x\"], [\n  AS_IF([test \"x$fs_paths\" != \"x\"], [\n    fs_paths=\"${fs_paths}:\"\n  ])\n  fs_paths=\"${fs_paths}${fs_paths_extra}\"\n])\nAC_DEFINE_UNQUOTED([FS_SEARCH_PATH], \"$fs_paths\", [search path for fs helpers])\n\n\nAC_ARG_ENABLE([use-tty-group],\n  AS_HELP_STRING([--disable-use-tty-group], [do not install wall and write setgid tty]),\n  [], [enable_use_tty_group=yes]\n)\nAM_CONDITIONAL([USE_TTY_GROUP], [test \"x$enable_use_tty_group\" = xyes])\n\nAS_IF([test \"x$enable_use_tty_group\" = xyes], [\n  AC_DEFINE([USE_TTY_GROUP], [1], [Should wall and write be installed setgid tty?])\n])\n\n\nAC_ARG_ENABLE([sulogin-emergency-mount],\n  AS_HELP_STRING([--enable-sulogin-emergency-mount],\n\t\t [use emergency mount of /dev and /proc for sulogin]),\n  [], [enable_sulogin_emergency_mount=no]\n)\n\nAS_IF([test \"x$enable_sulogin_emergency_mount\" = xyes], [\n  AS_IF([test \"x$linux_os\" = xyes], [ ],\n\t[AC_MSG_ERROR([--enable-sulogin-emergency-mount selected for non-linux system])])\n  AC_DEFINE([USE_SULOGIN_EMERGENCY_MOUNT], [1],\n\t    [Should sulogin use an emergency mount of /dev and /proc?])\n])\n\n\nAC_ARG_ENABLE([usrdir-path],\n  AS_HELP_STRING([--enable-usrdir-path], [use only /usr paths in PATH env. variable (recommended on systems with /bin -> /usr/bin symlinks)]),\n  [], [enable_usrdir_path=no]\n)\n\nAS_IF([test \"x$enable_usrdir_path\" = xyes], [\n  AC_DEFINE([USE_USRDIR_PATHS_ONLY], [1], [Define to 1 to remove /bin and /sbin from PATH env.variable])\n])\n\n\nAC_ARG_ENABLE([makeinstall-chown],\n  AS_HELP_STRING([--disable-makeinstall-chown], [do not do chown-like operations during \"make install\"]),\n  [], [enable_makeinstall_chown=yes]\n)\nAM_CONDITIONAL([MAKEINSTALL_DO_CHOWN], [test \"x$enable_makeinstall_chown\" = xyes])\n\n\nAC_ARG_ENABLE([makeinstall-setuid],\n  AS_HELP_STRING([--disable-makeinstall-setuid], [do not do setuid chmod operations during \"make install\"]),\n  [], [enable_makeinstall_setuid=yes]\n)\nAM_CONDITIONAL([MAKEINSTALL_DO_SETUID], [test \"x$enable_makeinstall_setuid\" = xyes])\n\n\nAC_ARG_ENABLE([makeinstall-tty-setgid],\n\t      AS_HELP_STRING([--disable-makeinstall-tty-setgid], [do not setgid for wall, and write during \"make install\"]),\n  [], [enable_makeinstall_tty_setgid=yes]\n)\nAM_CONDITIONAL([MAKEINSTALL_DO_TTY_SETGID], [test \"x$enable_makeinstall_tty_setgid\" = xyes])\n\n\n\nAC_ARG_ENABLE([colors-default],\n  AS_HELP_STRING([--disable-colors-default], [do not colorize output from utils by default]),\n  [], [enable_colors_default=yes]\n)\nAS_IF([test \"x$enable_colors_default\" = xyes], [\n  AC_DEFINE([USE_COLORS_BY_DEFAULT], [1], [Enables colorized output from utils by default])\n])\n\n\nAC_ARG_WITH([cryptsetup],\n  AS_HELP_STRING([--with-cryptsetup], [compile with cryptsetup support]),\n  [], [with_cryptsetup=no]\n)\n\nAS_IF([test \"x$with_cryptsetup\" = xno], [\n  AM_CONDITIONAL([HAVE_CRYPTSETUP], [false])\n  AM_CONDITIONAL([CRYPTSETUP_VIA_DLOPEN], [false])\n], [\n  PKG_CHECK_MODULES([CRYPTSETUP], [libcryptsetup],\n\t[AC_DEFINE([HAVE_CRYPTSETUP], [1], [Define if cryptsetup is available])\n\t UL_PKG_STATIC([CRYPTSETUP_LIBS_STATIC], [libcryptsetup])\n\t AM_CONDITIONAL([HAVE_CRYPTSETUP], [true])\n\t SAVE_CFLAGS=\"$CFLAGS\"\n\t CFLAGS=\"$CRYPTSETUP_CFLAGS $CFLAGS\"\n\t SAVE_LIBS=\"$LIBS\"\n\t LIBS=\"$CRYPTSETUP_LIBS $LIBS\"\n\t AC_CHECK_LIB([cryptsetup], [crypt_activate_by_signed_key], [\n\t  AC_DEFINE([HAVE_CRYPT_ACTIVATE_BY_SIGNED_KEY], [1], [Define if crypt_activate_by_signed_key exist in -lcryptsetup])\n\t ])\n\t AS_IF([test \"x$with_cryptsetup\" = xdlopen], [\n\t  LIBS=\"-ldl $LIBS\"\n\t  AC_CHECK_LIB([dl], [dlsym], [\n\t    AC_DEFINE([CRYPTSETUP_VIA_DLOPEN], [1], [Define if cryptsetup is to be loaded via dlopen])\n\t    AM_CONDITIONAL([CRYPTSETUP_VIA_DLOPEN], [true])\n\t   ], [AC_MSG_ERROR([libdl required to build with cryptsetup support])])\n\t ], [\n\t  AM_CONDITIONAL([CRYPTSETUP_VIA_DLOPEN], [false])\n\t ])\n\t CFLAGS=\"$SAVE_CFLAGS\"\n\t LIBS=\"$SAVE_LIBS\"\n\t have_cryptsetup=yes],\n\t[have_cryptsetup=no\n   AM_CONDITIONAL([HAVE_CRYPTSETUP], [false])\n   AM_CONDITIONAL([CRYPTSETUP_VIA_DLOPEN], [false])\n  ])\n\n  AS_CASE([$with_cryptsetup:$have_cryptsetup],\n    [yes:no], [AC_MSG_WARN([cryptsetup selected but libcryptsetup not found])]\n  )\n])\nAC_SUBST([CRYPTSETUP_LIBS])\nAC_SUBST([CRYPTSETUP_LIBS_STATIC])\n\n\nAC_ARG_VAR([SUID_CFLAGS],\n\t   [CFLAGS used for binaries which are usually with the suid bit])\nAC_ARG_VAR([SUID_LDFLAGS],\n\t   [LDFLAGS used for binaries which are usually with the suid bit])\n\nAC_ARG_VAR([DAEMON_CFLAGS],\n\t   [CFLAGS used for binaries which are usually executed as daemons])\nAC_ARG_VAR([DAEMON_LDFLAGS],\n\t   [LDFLAGS used for binaries which are usually executed as daemons])\n\nAC_ARG_VAR([SOLIB_CFLAGS],\n\t   [CFLAGS used for shared libraries])\nAC_ARG_VAR([SOLIB_LDFLAGS],\n\t   [LDFLAGS used for shared libraries])\n\nAC_ARG_VAR([ADJTIME_PATH],\n\t   [Path to hwclock adjtime file, default /etc/adjtime])\nAS_IF([test \"x$ADJTIME_PATH\" = x], [ADJTIME_PATH=\"/etc/adjtime\"])\nAC_DEFINE_UNQUOTED([CONFIG_ADJTIME_PATH], \"$ADJTIME_PATH\", [Path to hwclock adjtime file])\n\nif test \"x${build_alias}\" != \"x${host_alias}\"; then\n  AC_MSG_NOTICE([setting link_all_deplibs=unknown for libtool])\n  # work around Debian patch to libtool breaking cross-compiles\n  # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=702737\n  # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=297726\n  link_all_deplibs=unknown\nfi\n\n\nLIBS=\"\"\n\n\nAC_CONFIG_HEADERS([config.h])\n\n#\n# Don't use configure.ac to replace install paths! See Makefile PATHFILES for\n# more details.\n#\nAC_CONFIG_FILES([\nMakefile\nlibblkid/docs/Makefile\nlibblkid/docs/version.xml\nlibblkid/src/blkid.h\nlibfdisk/docs/Makefile\nlibfdisk/docs/version.xml\nlibfdisk/src/libfdisk.h\nlibmount/docs/Makefile\nlibmount/docs/version.xml\nlibmount/src/libmount.h\nlibsmartcols/docs/Makefile\nlibsmartcols/docs/version.xml\nlibsmartcols/src/libsmartcols.h\npo/Makefile.in\npo-man/Makefile\n])\n\nAC_OUTPUT\n\nAC_MSG_RESULT([\n        ${PACKAGE}  ${VERSION}\n\n        prefix:                    ${prefix}\n        exec prefix:               ${exec_prefix}\n\n        bindir:                    ${bindir}\n        sbindir:                   ${sbindir}\n        libdir:                    ${libdir}\n        usrbin_execdir:            ${usrbin_execdir}\n        usrsbin_execdir:           ${usrsbin_execdir}\n        usrlib_execdir:            ${usrlib_execdir}\n\n        localstatedir:             ${localstatedir}\n        runstatedir:               ${runstatedir}\n        includedir:                ${includedir}\n        sysconfdir:                ${sysconfdir}\n        sysconfstaticdir:          ${sysconfstaticdir}\n\n        vendordir:                 ${with_vendordir}\n\n        Python:                    ${PYTHON}\n        Python version:            ${PYTHON_VERSION}\n        Python libs:               ${pyexecdir}\n\n        Bash completions:          ${with_bashcompletiondir}\n        Systemd support:           ${have_systemd}\n        Systemd unitdir:           ${with_systemdsystemunitdir}\n        tmpfilesdir:               ${with_tmpfilesdir}\n        libeconf support:          ${have_econf}\n        Btrfs support:             ${have_btrfs}\n        lastlog2 support:          ${build_liblastlog2}\n        Wide-char support:         ${build_widechar}\n        libcryptsetup support:     ${have_cryptsetup}\n\n        Manual pages:              ${build_asciidoc}\n        Manual pages translated:   ${build_poman}\n\n        compiler:                  ${CC} / ${CXX}\n        suid cflags:               ${SUID_CFLAGS}\n        ldflags:                   ${LDFLAGS}\n        suid ldflags:              ${SUID_LDFLAGS}\n        ASAN enabled:              ${enable_asan}\n        Fuzzing enabled:           ${enable_fuzzing_engine}\n        Coverage enabled           ${enable_coverage}\n\n        cflags:                    ${CFLAGS}\n\n        warnings:\n\n${WARN_CFLAGS}\n\n Type 'make' or 'make <utilname>' to compile.\n])\n"
        },
        {
          "name": "disk-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libblkid",
          "type": "tree",
          "content": null
        },
        {
          "name": "libfdisk",
          "type": "tree",
          "content": null
        },
        {
          "name": "liblastlog2",
          "type": "tree",
          "content": null
        },
        {
          "name": "libmount",
          "type": "tree",
          "content": null
        },
        {
          "name": "libsmartcols",
          "type": "tree",
          "content": null
        },
        {
          "name": "libuuid",
          "type": "tree",
          "content": null
        },
        {
          "name": "login-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "lsfd-cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "man-common",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 102.8662109375,
          "content": "project('util-linux', 'c',\n        version : run_command('tools/git-version-gen', check: true).stdout(),\n        meson_version: '>=0.60.0',\n        license : 'GPLv2+',\n        default_options : [\n          'c_std=c99',\n          'cpp_std=c++11',\n        ])\n\nfs = import('fs')\npkgconfig = import('pkgconfig')\n\n# soname versions; This never change because we use symbol versioning. There is also\n# API version (LIB*_VERSION macros) and it follow package version.\nlibblkid_version = '1.1.0'\nlibblkid_date = '01-Jun-2021'\nlibuuid_version = '1.3.0'\nliblastlog2_version = '2.0.0'\nlibmount_version = '1.1.0'\nlibsmartcols_version = '1.1.0'\nlibfdisk_version = '1.1.0'\n\nprefixdir = get_option('prefix')\nif not fs.is_absolute(prefixdir)\n        error('Prefix is not absolute: \"@0@\"'.format(prefixdir))\nendif\nbindir = prefixdir / get_option('bindir')\nsbindir = prefixdir / get_option('sbindir')\nsysconfstaticdir = prefixdir / 'lib'\ndocdir = prefixdir / get_option('datadir') / 'doc' / 'util-linux'\nmandir = prefixdir / get_option('mandir')\nrunstatedir = '/run'\nlocalstatedir = '/var'\nexecprefixdir = prefixdir\nsysconfdir = prefixdir / get_option('sysconfdir')\nusrbin_exec_dir = execprefixdir / bindir\nusrsbin_exec_dir = execprefixdir / sbindir\nbash_completion = dependency('bash-completion', required : get_option('build-bash-completion'))\n\nvendordir = get_option('vendordir')\n\nadd_project_arguments('-D_GNU_SOURCE', '-fsigned-char', language : 'c')\n\nif host_machine.system() == 'darwin'\n  add_project_arguments('-D_DARWIN_C_SOURCE', language : 'c')\nendif\n\ncc = meson.get_compiler('c')\n\nconf = configuration_data()\nconf.set_quoted('PACKAGE', meson.project_name())\nconf.set_quoted('PACKAGE_VERSION', meson.project_version())\npackage_string = '@0@ @1@'.format(meson.project_name(), meson.project_version())\nconf.set_quoted('PACKAGE_STRING', package_string)\n\npc_version = []\npc_version = meson.project_version().split('-')[0].split('.')\n\nif pc_version.length() < 3\n    pc_version += '0'\nendif\n\npc_version = '.'.join(pc_version)\n\nconf.set_quoted('LIBBLKID_VERSION', pc_version)\nconf.set_quoted('LIBBLKID_DATE', libblkid_date)\n\nconf.set('bindir', bindir)\nconf.set('sbindir', sbindir)\nconf.set('runstatedir', runstatedir)\nconf.set('localstatedir', localstatedir)\nconf.set('sysconfdir', sysconfdir)\nconf.set('usrbin_execdir', usrbin_exec_dir)\nconf.set('usrsbin_execdir', usrsbin_exec_dir)\nconf.set('docdir', docdir)\nconf.set_quoted('_PATH_SYSCONFSTATICDIR', sysconfstaticdir)\nconf.set_quoted('_PATH_RUNSTATEDIR', runstatedir)\nconf.set_quoted('_PATH_LOCALSTATEDIR', localstatedir)\nconf.set_quoted('CONFIG_ADJTIME_PATH', '/etc/adjtime')\nconf.set_quoted('ADJTIME_PATH', '/etc/adjtime') # yes, both are used :(\n\nconf.set_quoted('_PATH_VENDORDIR', vendordir)\nconf.set('USE_VENDORDIR', vendordir == '' ? false : 1)\n\nbuild_libblkid = get_option('build-libblkid').allowed()\nconf.set('HAVE_LIBBLKID', build_libblkid ? 1 : false)\nsummary('libblkid', build_libblkid ? 'enabled' : 'disabled', section : 'components')\n\nbuild_libuuid = not get_option('build-libuuid').disabled()\nconf.set('HAVE_LIBUUID', build_libuuid ? 1 : false)\nsummary('libuuid', build_libuuid ? 'enabled' : 'disabled', section : 'components')\n\nlib_sqlite3 = dependency('sqlite3', required : get_option('build-liblastlog2'))\nbuild_liblastlog2 = get_option('build-liblastlog2').require(lib_sqlite3.found()).allowed()\nconf.set('HAVE_LIBLASTLOG2', build_liblastlog2 ? 1 : false)\nsummary('liblastlog2', build_liblastlog2 ? 'enabled' : 'disabled', section : 'components')\n\nlogin_lastlogin = get_option('login-lastlogin')\nconf.set('USE_LOGIN_LASTLOG', login_lastlogin ? 1 : false)\nsummary('login-lastlogin', login_lastlogin ? 'enabled' : 'disabled', section : 'components')\n\nhave_mountfd_api = cc.has_type('struct mount_attr', prefix : '#include <linux/mount.h>')\nconf.set('HAVE_STRUCT_MOUNT_ATTR', have_mountfd_api ? 1 : false)\nconf.set('HAVE_MOUNTFD_API', have_mountfd_api ? 1 : false)\n\n\nhave_struct_statx = cc.has_type('struct statx', prefix : '#include <sys/stat.h>')\nconf.set('HAVE_STRUCT_STATX', have_struct_statx ? 1 : false)\nhave = cc.has_member('struct statx', 'stx_mnt_id',\n                     prefix : '#include <linux/stat.h>')\nconf.set('HAVE_STRUCT_STATX_STX_MNT_ID', have ? 1 : false)\n\n\nhave_statmount = cc.has_type('struct statmount', prefix : '#include <linux/mount.h>')\nhave_listmount = cc.has_header_symbol('linux/mount.h', 'LSMT_ROOT')\n\n# kernel headers provides the syscall, but there is not SYS_xxx yet\nif have_statmount and not cc.has_header_symbol('bits/syscall.h', 'SYS_statmount')\n  conf.set('SYS_statmount', '__NR_statmount')\nendif\nif have_listmount and not cc.has_header_symbol('bits/syscall.h', 'SYS_listmount')\n  conf.set('SYS_listmount', '__NR_listmount')\nendif\n\nconf.set('HAVE_STATMOUNT_API', have_statmount and have_listmount ? 1 : false)\n\n\nhave_sys_vfs_header = cc.has_header('sys/vfs.h')\n\nbuild_libmount = get_option('build-libmount').require(\n  get_option('build-libblkid').allowed() \\\n  and have_sys_vfs_header \\\n).allowed()\n\nconf.set('HAVE_LIBMOUNT', build_libmount ? 1 : false)\nconf.set('USE_LIBMOUNT_SUPPORT_NAMESPACES', 1)\nconf.set('USE_LIBMOUNT_MOUNTFD_SUPPORT', have_mountfd_api ? 1 : false)\nsummary('libmount', build_libmount ? 'enabled' : 'disabled', section : 'components')\n\nbuild_libsmartcols = not get_option('build-libsmartcols').disabled()\nconf.set('HAVE_LIBSMARTCOLS', build_libsmartcols ? 1 : false)\nsummary('libsmartcols', build_libsmartcols ? 'enabled' : 'disabled', section : 'components')\n\nbuild_libfdisk = not get_option('build-libfdisk').require(get_option('build-libblkid').allowed()).disabled()\nconf.set('HAVE_LIBFDISK', build_libfdisk ? 1 : false)\nsummary('libfdisk', build_libfdisk ? 'enabled' : 'disabled', section : 'components')\n\nbuild_uuidd = not get_option('build-uuidd').disabled()\nconf.set('HAVE_UUIDD', build_uuidd ? 1 : false)\nsummary('uuidd', build_uuidd ? 'enabled' : 'disabled', section : 'components')\n\nstatic_programs = get_option('static-programs')\nneed_static_libs = static_programs.length() > 0 # a rough estimate...\nsummary('static programs', static_programs)\n\nLINUX = host_machine.system() in ['linux']\nBSD = host_machine.system() in ['dragonfly', 'freebsd', 'netbsd', 'openbsd']\n\n############################################################\n\ncode = '''\n#include <wchar.h>\n#include <wctype.h>\n#include <stdio.h>\n#include <stdlib.h>\nint main(void) {\n  wchar_t wc;\n  wint_t w;\n  w = fgetwc(stdin);\n  if (w == WEOF)\n    return 1;\n  wc = w;\n  fputwc(wc,stdout);\n  return 0;\n}\n'''\nhave = cc.compiles(code, name : 'wchar_t support')\nif not have and get_option('widechar').enabled()\n  error('widechar support requested but unavailable')\nendif\nif get_option('ncurses').enabled() and get_option('widechar').enabled()\n  error('widechar support is incompatible with non-wide ncurses')\nendif\nconf.set('HAVE_WIDECHAR', have ? 1 : false)\n\nheaders = '''\n        byteswap.h\n        crypt.h\n        endian.h\n        err.h\n        errno.h\n        fcntl.h\n        getopt.h\n        inttypes.h\n        langinfo.h\n        lastlog.h\n        libutil.h\n        locale.h\n        mntent.h\n        paths.h\n        pty.h\n        shadow.h\n        stdint.h\n        stdio_ext.h\n        stdlib.h\n        string.h\n        strings.h\n        unistd.h\n        utmp.h\n        utmpx.h\n        asm/io.h\n        linux/blkzoned.h\n        linux/capability.h\n        linux/cdrom.h\n        linux/compiler.h\n        linux/falloc.h\n        linux/fd.h\n        linux/fs.h\n\tlinux/fiemap.h\n\tlinux/gsmmux.h\n        linux/if_alg.h\n        linux/landlock.h\n        linux/kcmp.h\n        linux/net_namespace.h\n        linux/nsfs.h\n        linux/mount.h\n        linux/pr.h\n        linux/securebits.h\n        linux/tiocl.h\n        linux/version.h\n        linux/watchdog.h\n        net/if.h\n        net/if_dl.h\n        netinet/in.h\n        security/openpam.h\n        security/pam_appl.h\n        security/pam_misc.h\n        security/pam_modules.h\n        sys/disk.h\n        sys/disklabel.h\n        sys/endian.h\n        sys/file.h\n        sys/io.h\n        sys/ioccom.h\n        sys/ioctl.h\n        sys/mkdev.h\n        sys/mount.h\n        sys/param.h\n        sys/pidfd.h\n        sys/prctl.h\n        sys/resource.h\n\tsys/sendfile.h\n        sys/signalfd.h\n        sys/socket.h\n        sys/sockio.h\n        sys/stat.h\n        sys/statfs.h\n        sys/swap.h\n        sys/syscall.h\n        sys/sysmacros.h\n        sys/time.h\n        sys/timex.h\n        sys/ttydefaults.h\n        sys/types.h\n        sys/ucred.h\n        sys/un.h\n        sys/vfs.h\n\tsys/xattr.h\n'''.split()\n\nlib_m = cc.find_library('m')\n\nlib_tinfo = dependency(\n  'tinfo',\n  disabler : true,\n  required : get_option('tinfo'))\n\nlib_ncursesw = dependency(\n  'ncursesw',\n  required : get_option('ncursesw'))\nif lib_ncursesw.found()\n  headers += ['ncursesw/ncurses.h',\n              'ncursesw/term.h',\n              'ncurses.h',\n              'term.h']\n  lib_ncurses = disabler()\nelse\n  lib_ncurses = dependency(\n    'ncurses',\n    disabler : true,\n    required : get_option('ncurses'))\n  headers += ['ncurses.h',\n              'term.h']\nendif\n\nconf.set('HAVE_LIBNCURSESW', lib_ncursesw.found())\nconf.set('HAVE_LIBNCURSES', lib_ncurses.found())\nconf.set('HAVE_NCURSES', lib_ncursesw.found() or lib_ncurses.found())\n\nlib_slang = dependency(\n  'slang',\n  required : get_option('slang'))\nif lib_slang.found()\n  headers += ['slang.h',\n              'slang/slang.h',\n              'slcurses.h',\n              'slang/slcurses.h']\nendif\nconf.set('HAVE_SLANG', lib_slang.found())\n\nforeach curses_libs : [lib_slang, lib_ncursesw, lib_ncurses]\n  if curses_libs.found()\n    have = cc.has_function('use_default_colors', dependencies : curses_libs)\n    conf.set('HAVE_USE_DEFAULT_COLORS', have ? 1 : false)\n    have = cc.has_function('resizeterm', dependencies : curses_libs)\n    conf.set('HAVE_RESIZETERM', have ? 1 : false)\n    break\n  endif\nendforeach\n\nlib_z = dependency(\n  'zlib',\n  disabler : true,\n  required : get_option('zlib'))\n\nlib_readline = dependency(\n  'readline',\n  required : get_option('readline'))\nconf.set('HAVE_LIBREADLINE', lib_readline.found() ? 1 : false)\n\nlib_readline_static = dependency(\n  'readline',\n  static : true,\n  required : need_static_libs ? get_option('readline') : disabler())\n\nif meson.version().version_compare('>= 0.59.0')\n  lib_intl = dependency(\n    'intl',\n    required : get_option('nls'))\n  conf.set('ENABLE_NLS', lib_intl.found() ? 1 : false)\nelse\n  if get_option('nls').enabled()\n    error('nls is not supported with meson before 0.59.0')\n  endif\n  lib_intl = dependency('', required : false)\nendif\n\nlib_user = dependency(\n  'libuser',\n  version : '>= 0.58',\n  required : get_option('libuser'))\nconf.set('HAVE_LIBUSER', lib_user.found() ? 1 : false)\n\nlib_util = cc.find_library(\n  'util',\n  required : get_option('libutil'))\nconf.set('HAVE_LIBUTIL', lib_util.found() ? 1 : false)\n\nlib_utempter = cc.find_library(\n  'utempter',\n  required : get_option('libutempter'))\nconf.set('HAVE_LIBUTEMPTER', lib_utempter.found() ? 1 : false)\n\nsystemd = dependency(\n  'systemd',\n  required : get_option('systemd'))\n\nlib_systemd = dependency(\n  'libsystemd',\n  required : get_option('systemd'))\nconf.set('HAVE_LIBSYSTEMD', lib_systemd.found() ? 1 : false)\nconf.set('USE_SYSTEMD', lib_systemd.found() ? 1 : false)\n\nhave = cc.has_function(\n  'sd_session_get_username',\n  dependencies : lib_systemd)\nconf.set('HAVE_DECL_SD_SESSION_GET_USERNAME', have ? 1 : false)\n\nlib_udev = dependency(\n  'libudev',\n  required : get_option('systemd'))\nconf.set('HAVE_LIBUDEV', lib_udev.found() ? 1 : false)\n\nlib_crypt = cc.find_library('crypt', required : get_option('build-newgrp'))\nif not lib_crypt.found()\n  lib_crypt = cc.find_library('crypt', required : get_option('build-sulogin'))\nendif\n\npam_requirement = get_option('build-login').enabled() or \\\n    get_option('build-chfn-chsh').enabled() or \\\n    get_option('build-su').enabled() or \\\n    get_option('build-runuser').enabled()\nlib_pam = cc.find_library(\n  'pam',\n  disabler : true,\n  required : pam_requirement)\nif lib_pam.found()\n  lib_pam_misc = cc.find_library(\n    'pam_misc',\n    disabler : true,\n    required : pam_requirement)\n  lib_pam = [lib_pam, lib_pam_misc]\nelse\n  lib_pam_misc = declare_dependency()\nendif\n\nlib_cryptsetup = dependency(\n  'libcryptsetup',\n  required : get_option('cryptsetup'))\nconf.set('HAVE_CRYPTSETUP', lib_cryptsetup.found() ? 1 : false)\n\ncryptsetup_dlopen = not get_option('cryptsetup').disabled() and get_option('cryptsetup-dlopen').enabled()\nif cryptsetup_dlopen\n  if meson.version().version_compare('>= 0.62.0')\n    lib_dl = dependency('dl')\n  else\n    lib_dl = cc.find_library('dl')\n  endif\n  conf.set('CRYPTSETUP_VIA_DLOPEN', 1)\n  summary('cryptsetup support (dlopen)',\n          'enabled',\n          section : 'components')\nelse\n  summary('cryptsetup support',\n          lib_cryptsetup.found()  ? 'enabled' : 'disabled',\n          section : 'components')\nendif\n\nhave = cc.has_function(\n  'crypt_activate_by_signed_key',\n  dependencies : lib_cryptsetup)\nconf.set('HAVE_CRYPT_ACTIVATE_BY_SIGNED_KEY', have ? 1 : false)\n\nlib_cap_ng = dependency(\n  'libcap-ng',\n  required : get_option('build-setpriv'))\nif not lib_cap_ng.found()\n  lib_cap_ng = disabler()\nendif\n\nlib_selinux = dependency(\n  'libselinux',\n  version : '>= 2.5',\n  required : get_option('selinux'))\nconf.set('HAVE_LIBSELINUX', lib_selinux.found() ? 1 : false)\n\nlib_magic = dependency(\n  'libmagic',\n  required : get_option('magic'))\nconf.set('HAVE_MAGIC', lib_magic.found() ? 1 : false)\n\nlib_econf = dependency(\n  'libeconf',\n  required : get_option('econf'))\nconf.set('HAVE_LIBECONF', lib_econf.found() ? 1 : false)\n\nhave = cc.has_function(\n  'econf_readConfig',\n  dependencies : lib_econf)\nconf.set('HAVE_ECONF_READCONFIG', have ? 1 : false)\n\nlib_audit = dependency(\n  'audit',\n  required : get_option('audit'))\nconf.set('HAVE_LIBAUDIT', lib_audit.found() ? 1 : false)\n\nconf.set('HAVE_SMACK', not get_option('smack').disabled())\n\n\nforeach header : headers\n  have = cc.has_header(header)\n  conf.set('HAVE_' + header.underscorify().to_upper(), have ? 1 : false)\nendforeach\n\nheader = 'linux/btrfs.h'\nenable_btrfs = cc.has_header(header,\n                             required : get_option('btrfs'))\nconf.set('HAVE_' + header.underscorify().to_upper(), enable_btrfs ? 1 : false)\nconf.set('HAVE_BTRFS_SUPPORT', enable_btrfs ? 1 : false)\n\nprefix = conf.get('HAVE_LINUX_COMPILER_H') ? '#include <linux/compiler.h>' : ''\nforeach header : [\n  'linux/blkpg.h',\n  'linux/major.h',\n]\n  have = cc.has_header(header,\n                       prefix : prefix)\n  conf.set('HAVE_' + header.underscorify().to_upper(), have ? 1 : false)\nendforeach\n\nhave = cc.has_header('sched.h')\nconf.set10('HAVE_DECL_CPU_ALLOC', have)\nhave_cpu_set_t = cc.has_type('cpu_set_t', args : '-D_GNU_SOURCE', prefix : '#include <sched.h>')\nconf.set('HAVE_CPU_SET_T', have_cpu_set_t ? 1 : false)\n\nhave = cc.has_header_symbol('unistd.h', 'environ', args : '-D_GNU_SOURCE')\nconf.set('HAVE_ENVIRON_DECL', have ? 1 : false)\n\nhave = cc.has_header_symbol('signal.h', 'sighandler_t', args : '-D_GNU_SOURCE')\nconf.set('HAVE_SIGHANDLER_T', have ? 1 : false)\n\nhave = cc.has_function('strsignal')\nconf.set10('HAVE_STRSIGNAL_DECL', have)\n\nhave = cc.has_type('union semun',\n                   prefix : '#include <sys/sem.h>')\nconf.set('HAVE_UNION_SEMUN', have ? 1 : false)\n\nhave = cc.has_type('loff_t',\n                   args : '-D_GNU_SOURCE',\n                   prefix : '#include <sys/types.h>')\nconf.set('HAVE_LOFF_T', have ? 1 : false)\n\nhave = cc.compiles('''\n   #define _GNU_SOURCE 1\n   #include <langinfo.h>\n   int main(void) {\n        char *str;\n        str = nl_langinfo (ALTMON_1);\n        str = nl_langinfo (ALTMON_2);\n        str = nl_langinfo (ALTMON_3);\n        str = nl_langinfo (ALTMON_4);\n        str = nl_langinfo (ALTMON_5);\n        str = nl_langinfo (ALTMON_6);\n        str = nl_langinfo (ALTMON_7);\n        str = nl_langinfo (ALTMON_8);\n        str = nl_langinfo (ALTMON_9);\n        str = nl_langinfo (ALTMON_10);\n        str = nl_langinfo (ALTMON_11);\n        str = nl_langinfo (ALTMON_12);\n        return 0;\n   }\n   ''',\n  name : 'langinfo.h defines ALTMON_x constants')\nconf.set('HAVE_LANGINFO_ALTMON', have ? 1 : false)\n\nhave = cc.compiles('''\n   #define _GNU_SOURCE 1\n   #include <langinfo.h>\n   int main(void) {\n        char *str;\n        str = nl_langinfo (_NL_ABALTMON_1);\n        str = nl_langinfo (_NL_ABALTMON_2);\n        str = nl_langinfo (_NL_ABALTMON_3);\n        str = nl_langinfo (_NL_ABALTMON_4);\n        str = nl_langinfo (_NL_ABALTMON_5);\n        str = nl_langinfo (_NL_ABALTMON_6);\n        str = nl_langinfo (_NL_ABALTMON_7);\n        str = nl_langinfo (_NL_ABALTMON_8);\n        str = nl_langinfo (_NL_ABALTMON_9);\n        str = nl_langinfo (_NL_ABALTMON_10);\n        str = nl_langinfo (_NL_ABALTMON_11);\n        str = nl_langinfo (_NL_ABALTMON_12);\n        return 0;\n   }\n   ''',\n  name : 'langinfo.h defines _NL_ABALTMON_x constants')\nconf.set('HAVE_LANGINFO_NL_ABALTMON', have ? 1 : false)\n\nhave = cc.compiles('''\n   #define _GNU_SOURCE 1\n   #include <langinfo.h>\n   int main(void) {\n        char *str;\n        str = nl_langinfo (_NL_TIME_WEEK_1STDAY);\n        return 0;\n   }\n   ''',\n  name : 'langinfo.h defines _NL_TIME_WEEK_1STDAY constant')\nconf.set('HAVE_DECL__NL_TIME_WEEK_1STDAY', have ? 1 : false)\n\nfuncs = '''\n        cachestat\n        clearenv\n        close_range\n        __fpurge\n        fpurge\n        __fpending\n        secure_getenv\n        __secure_getenv\n        eaccess\n        err\n        errx\n        explicit_bzero\n        fnmatch\n        fseeko\n        fsconfig\n        fsmount\n        fsopen\n        fspick\n        fsync\n        getttynam\n        utimensat\n        getdomainname\n        getdtablesize\n        getexecname\n        getmntinfo\n        getrandom\n        getrlimit\n        getsgnam\n        inotify_init\n        jrand48\n        landlock_create_ruleset\n        landlock_add_rule\n        landlock_restrict_self\n        lchown\n        lgetxattr\n        llistxattr\n        llseek\n        newlocale\n        mkostemp\n        move_mount\n        mount_setattr\n        nanosleep\n        ntp_gettime\n        open_tree\n        personality\n        pidfd_getfd\n        pidfd_open\n        pidfd_send_signal\n        posix_fadvise\n        prctl\n        qsort_r\n        reallocarray\n        renameat2\n        rpmatch\n        scandirat\n        setprogname\n        sendfile\n        setns\n        setresgid\n        setresuid\n        sched_setattr\n        sched_setscheduler\n        sigqueue\n        srandom\n        statx\n        strnchr\n        strndup\n        strnlen\n        strtod_l\n        sysconf\n        sysinfo\n        swapon\n        swapoff\n        timegm\n        unshare\n        usleep\n        uselocale\n        utimensat\n        vwarnx\n        warn\n        warnx\n        prlimit\n\n        openat\n        fstatat\n        unlinkat\n        ioperm\n        iopl\n        futimens\n        inotify_init1\n        open_memstream\n        reboot\n        getusershell\n'''.split()\n\nforeach func: funcs\n  have = cc.has_function(func)\n  # For autotools compatibility, use either #define FOO 1 or #undef FOO.\n  # This makes little sense, but is necessary to avoid warnings about\n  # redefined macros from Python.h, which uses this convention.\n  conf.set('HAVE_' + func.to_upper(), have ? 1 : false)\nendforeach\n\nhave_mempcpy = cc.has_function('mempcpy', prefix: '#include <string.h>', args: '-D_GNU_SOURCE')\nconf.set('HAVE_MEMPCPY', have_mempcpy ? 1 : false)\n\nhave = conf.get('HAVE_FUTIMENS') in [1] and conf.get('HAVE_INOTIFY_INIT1') in [1]\nconf.set('AGETTY_RELOAD', have ? 1 : false)\nif not have\n  warning('futimens or inotify_init1 not found; agetty(8) will not provide --reload functionality')\nendif\n\nhave_dirfd = (cc.has_function('dirfd') or\n              cc.has_header_symbol('dirent.h', 'dirfd',\n                                   prefix : '#include <sys/types.h>'))\nconf.set('HAVE_DIRFD', have_dirfd ? 1 : false)\n\nhave_ddfd = cc.has_member('DIR', 'dd_fd',\n                          prefix : '''\n                          #include <sys/types.h>\n                          #include <dirent.h>\n                          ''')\nconf.set('HAVE_DECL_DDFD', have_ddfd ? 1 : false)\n\nhave = cc.has_member('struct tm', 'tm_gmtoff',\n                     args : '-D_GNU_SOURCE',\n                     prefix : '''\n                     #include <time.h>\n                     #include <unistd.h>\n                     ''')\nconf.set('HAVE_TM_GMTOFF', have ? 1 : false)\n\n\n\nhave = cc.has_type('enum fsconfig_command', prefix : '#include <linux/mount.h>')\nconf.set('HAVE_ENUM_FSCONFIG_COMMAND', have ? 1 : false)\n\nhave = cc.has_member('struct termios', 'c_line',\n                     prefix : '#include <termios.h>')\nconf.set('HAVE_STRUCT_TERMIOS_C_LINE', have ? 1 : false)\n\nhave = cc.has_member('struct stat', 'st_mtim.tv_nsec',\n                     args : '-D_GNU_SOURCE',\n                     prefix : '#include <sys/stat.h>')\nconf.set('HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC', have ? 1 : false)\n\n# replacement for AC_STRUCT_TIMEZONE\nhave = cc.has_member('struct tm', 'tm_zone',\n                     args : '-D_GNU_SOURCE',\n                     prefix : '#include <time.h>')\nconf.set('HAVE_STRUCT_TM_TM_ZONE', have ? 1 : false)\n\nhave = cc.has_header_symbol('time.h', 'tzname', args: '-D_GNU_SOURCE')\nconf.set('HAVE_DECL_TZNAME', have ? 1 : false)\n\nhave = cc.has_header_symbol('linux/blkzoned.h', 'BLK_ZONE_REP_CAPACITY')\nconf.set('HAVE_DECL_BLK_ZONE_REP_CAPACITY', have ? 1 : false)\n\nhave = cc.has_header_symbol('linux/pr.h', 'PR_REP_CAPACITY')\nconf.set('HAVE_DECL_PR_REP_CAPACITY', have ? 1 : false)\n\ncode = '''\n#include <time.h>\n#if !@0@\nextern char *tzname[];\n#endif\nint main(void) {\n  return tzname ? 0 : 1;\n}\n'''.format(have ? 1 : 0)\nhave = cc.compiles(code, name : 'using tzname[]')\nconf.set('HAVE_TZNAME', have ? 1 : false)\n\nhave = cc.sizeof('time_t', prefix : '#include <time.h>')\nif have < 8\n  add_global_arguments('-D_TIME_BITS=64', language : 'c')\n  have = cc.sizeof('time_t', args : '-D_TIME_BITS=64', prefix : '#include <time.h>')\n  if have < 8\n    if get_option('allow-32bit-time')\n      warning('Could not make time_t 64bits wide')\n    else\n      error('Could not make time_t 64bits wide')\n    endif\n  endif\nendif\n\nsocket_libs = []\nif not cc.has_function('socket')\n  socket_libs += cc.find_library('socket', required : true)\n  have = cc.has_function('socket',\n                         dependencies : socket_libs)\n  if not have\n    error('socket() function not available')\n  endif\nendif\n\nlib_rt = cc.find_library('rt', required : false)\nrealtime_libs = []\nhave = cc.has_function('clock_gettime')\nif not have\n  if lib_rt.found()\n    realtime_libs += lib_rt\n    have = cc.has_function('clock_gettime',\n                          dependencies : realtime_libs)\n  endif\nendif\nconf.set('HAVE_CLOCK_GETTIME', have ? 1 : false)\n\nthread_libs = dependency('threads')\n\nhave = cc.has_function('timer_create')\nif not have\n  if lib_rt.found()\n    realtime_libs = [lib_rt]\n    have = cc.has_function('timer_create',\n                           dependencies : realtime_libs)\n  endif\n  if not have\n    realtime_libs += thread_libs\n    have = cc.has_function('timer_create',\n                           dependencies : realtime_libs)\n  endif\nendif\nconf.set('HAVE_TIMER_CREATE', have ? 1 : false)\nif not have\n  have = cc.has_function('setitimer')\n  conf.set('HAVE_SETITIMER', have ? 1 : false)\nendif\n\nrtas_libs = cc.find_library('rtas', required : false)\nconf.set('HAVE_LIBRTAS', rtas_libs.found() ? 1 : false)\n\nmath_libs = []\nif not cc.has_header_symbol('math.h', 'isnan')\n  lib = cc.find_library('m', required : true)\n  if (cc.has_function('isnan', dependencies : lib) and\n      cc.has_function('__isnan', dependencies : lib))\n    math_libs += lib\n  endif\nendif\n\nhave = cc.has_header_symbol('errno.h', 'program_invocation_short_name',\n                            args : '-D_GNU_SOURCE')\nconf.set('HAVE_PROGRAM_INVOCATION_SHORT_NAME', have ? 1 : false)\n\ncode = '''\nextern char *__progname;\nint main(void) {\n    return (*__progname != 0);\n}\n'''\nhave = cc.compiles(code, name : 'using __progname')\nconf.set('HAVE___PROGNAME', have ? 1 : false)\n\nhave_pty = conf.get('HAVE_PTY_H').to_string() == '1' \\\n           and conf.get('HAVE_SYS_SIGNALFD_H').to_string() == '1'\nconf.set('HAVE_PTY', have_pty ? 1 : false)\n\nhave_opal_get_status= cc.has_header_symbol('linux/sed-opal.h', 'IOC_OPAL_GET_STATUS')\nconf.set('HAVE_OPAL_GET_STATUS', have_opal_get_status ? 1 : false)\n\nbuild_plymouth_support = get_option('build-plymouth-support')\nhave_tiocglcktrmios = cc.has_header_symbol(\n  'sys/ioctl.h', 'TIOCGLCKTRMIOS',\n  required : build_plymouth_support.enabled())\nhave_sock_cloexec = cc.has_header_symbol(\n  'sys/socket.h', 'SOCK_CLOEXEC',\n  prefix : '#include <sys/types.h>',\n  required : build_plymouth_support.enabled())\nhave_sock_nonblock = cc.has_header_symbol(\n  'sys/socket.h', 'SOCK_NONBLOCK',\n  prefix : '#include <sys/types.h>',\n  required : build_plymouth_support.enabled())\nhave_so_passcred = cc.has_header_symbol(\n  'sys/socket.h', 'SO_PASSCRED',\n  args : ['-D_GNU_SOURCE'],\n  prefix : '#include <sys/types.h>',\n  required : build_plymouth_support.enabled())\n\nhave = cc.has_header_symbol('linux/vm_sockets.h', 'VMADDR_CID_LOCAL',\n                            prefix : '#include <sys/socket.h>')\nconf.set('HAVE_DECL_VMADDR_CID_LOCAL', have ? 1 : false)\n\nbuild_plymouth_support = (not build_plymouth_support.disabled() and \n                          have_tiocglcktrmios and\n                          have_sock_cloexec and\n                          have_sock_nonblock and\n                          have_so_passcred)\nconf.set('ENABLE_PLYMOUTH_SUPPORT', build_plymouth_support ? 1 : false)\nsummary('plymouth support',\n        build_plymouth_support  ? 'enabled' : 'disabled',\n        section : 'components')\n\n# check for valid fallocate() function\n# with 32 bits glibc 2.10, fallocate() exists but not fallocate64()\n# when _FILE_OFFSET_BITS==64, fallocate() is redirect to fallocate64()\n# and program can't be linked.\ncode = '''\n#define _GNU_SOURCE\n#include <unistd.h>\n#include <fcntl.h>\n\nint main(void) {\n   long ret;\n   ret = fallocate(0, FALLOC_FL_KEEP_SIZE, 0xfffffffful, 0xfffffffful);\n   return ret == 0 ? 0 : 1;\n}\n'''\nhave = cc.links(code, name : 'fallocate() function')\nconf.set('HAVE_FALLOCATE', have ? 1 : false)\n\ncode = '''\n#include <unistd.h>\n#include <fcntl.h>\n\nint main(void) {\n   long ret;\n   ret = posix_fallocate(0, 0xfffffffful, 0xfffffffful);\n   return ret == 0 ? 0 : 1;\n}\n'''\nhave = cc.links(code, name : 'posix_fallocate() function')\nconf.set('HAVE_POSIX_FALLOCATE', have ? 1 : false)\n\nuse_hwclock_cmos = host_machine.cpu_family() in ['x86', 'x86_64']\nmessage('Use CMOS clock: @0@'.format(use_hwclock_cmos))\nconf.set('USE_HWCLOCK_CMOS', use_hwclock_cmos ? 1 : false)\n\nconf.set('HAVE_TLS', get_option('use-tls') ? 1 : false)\nconf.set('PG_BELL', get_option('pg-bell') ? 1 : false)\nconf.set('USE_COLORS_BY_DEFAULT', get_option('colors-default') ? 1 : false)\n\nis_glibc = cc.has_header_symbol('limits.h', '__GLIBC__')\n\n############################################################\n\n\nfs_search_path = get_option('fs-search-path')\nfs_search_path_extra = get_option('fs-search-path-extra')\nif fs_search_path_extra != ''\n  fs_search_path = ':'.join(fs_search_path, fs_search_path_extra)\nendif\nconf.set_quoted('FS_SEARCH_PATH', fs_search_path)\n\nsystemdsystemunitdir = ''\nif systemd.found()\n  systemdsystemunitdir = systemd.get_variable(pkgconfig : 'systemdsystemunitdir')\nendif\n\nsysvinit = get_option('sysvinit').enabled()\nsysvinitrcdir = sysconfdir + '/init.d'\n\nprogram_tests = get_option('program-tests')\n\nchfn_chsh_password = get_option('chfn-chsh-password') or lib_user.found()\nconf.set('CHFN_CHSH_PASSWORD', chfn_chsh_password ? 1 : false)\n\nhave = get_option('chsh-only-listed')\nconf.set('ONLY_LISTED_SHELLS', have ? 1 : false)\n\nhave = get_option('use-tty-group')\nconf.set('USE_TTY_GROUP', have ? 1 : false)\n\nbison = find_program('bison')\nflex = find_program('flex')\nsed = find_program('sed')\n\nbuild_hwclock = not get_option('build-hwclock').disabled()\nbison_gen = generator(\n  bison,\n  output : ['@BASENAME@.tab.c', '@BASENAME@.tab.h'],\n  arguments : ['@INPUT@', '--defines=@OUTPUT1@', '--output=@OUTPUT0@'])\n\npython_program = find_program('python3', 'python', native : true)\n\nmeson_make_symlink = meson.current_source_dir() + '/tools/meson-make-symlink.sh'\nmeson_make_manpage_stub = meson.current_source_dir() + '/tools/meson-make-manpage-stub.sh'\n\nconfigure_file(\n  output : 'config.h',\n  configuration : conf)\n\nadd_project_arguments('-include', meson.current_build_dir() / 'config.h', language : 'c')\n\ncompiler_flags = [\n  '-fno-common',\n\n  '-Waddress-of-packed-member',\n  '-Wdiscarded-qualifiers',\n  '-Wembedded-directive',\n  '-Wextra-semi',\n  '-Wformat-security',\n  '-Wimplicit-function-declaration',\n  '-Wmissing-declarations',\n  '-Wmissing-parameter-type',\n  '-Wmissing-prototypes',\n  '-Wnested-externs',\n  '-Wno-missing-field-initializers',\n  '-Wold-style-definition',\n  '-Wpointer-arith',\n  '-Wredundant-decls',\n  '-Wsign-compare',\n  '-Wstrict-prototypes',\n  '-Wtype-limits',\n  '-Wuninitialized',\n  '-Wunused-but-set-parameter',\n  '-Wunused-but-set-variable',\n  '-Wunused-parameter',\n  '-Wunused-result',\n  '-Wunused-variable',\n  '-Wvla',\n  '-Walloca',\n]\nforeach compiler_flag : compiler_flags\n  if cc.has_argument(compiler_flag)\n    add_project_arguments(compiler_flag, language : 'c')\n  endif\nendforeach\n\nmanadocs = []\nmanlinks = {}\n\nbashcompletions = []\nbashcompletionslinks = {}\n\nsubdir('include')\nsubdir('lib')\nsubdir('libblkid')\nsubdir('libmount')\nsubdir('libsmartcols')\nsubdir('libuuid')\nsubdir('liblastlog2')\nsubdir('libfdisk')\nsubdir('pam_lastlog2')\nsubdir('login-utils')\nsubdir('sys-utils')\nsubdir('disk-utils')\nsubdir('misc-utils')\nsubdir('text-utils')\nsubdir('term-utils')\nsubdir('lsfd-cmd')\nsubdir('po')\n\nincludes = [dir_include,\n            dir_libsmartcols,\n            dir_libfdisk,\n            dir_libuuid,\n            dir_liblastlog2,\n            dir_sys_utils]\n\nexes = []\n\nopt = not get_option('build-chfn-chsh').disabled()\nexe = executable(\n  'chfn',\n  chfn_sources,\n  chfn_chsh_sources,\n  include_directories : includes,\n  link_with : [lib_common, logindefs_c],\n  dependencies : chfn_chsh_deps,\n  install_dir : usrbin_exec_dir,\n  install_mode : 'rwsr-xr-x',\n  install : opt,\n  build_by_default : opt)\n\nexe2 = executable(\n  'chsh',\n  'login-utils/chsh.c',\n  'lib/shells.c',\n  chfn_chsh_sources,\n  include_directories : includes,\n  link_with : lib_common,\n  dependencies : chfn_chsh_deps,\n  install_dir : usrbin_exec_dir,\n  install_mode : 'rwsr-xr-x',\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += [exe, exe2]\n  manadocs += ['login-utils/chfn.1.adoc', 'login-utils/chsh.1.adoc']\n  bashcompletions += ['chfn', 'chsh']\nendif\n\nexe = executable(\n  'test_islocal',\n  test_islocal_sources,\n  include_directories : includes,\n  c_args : '-DTEST_PROGRAM',\n  build_by_default : program_tests)\nexes += exe\n\nexe = executable(\n  'test-consoles',\n  test_consoles_sources,\n  c_args : ['-DTEST_PROGRAM'],\n  include_directories : includes,\n  link_with : lib_common,\n  build_by_default : program_tests)\nexes += exe\n\nopt = not get_option('build-last').disabled()\nexe = executable(\n  'last',\n  last_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  meson.add_install_script(meson_make_symlink,\n                           'last',\n                           usrbin_exec_dir / 'lastb')\n  manadocs += ['login-utils/last.1.adoc']\n  manlinks += {'lastb.1': 'last.1'}\n  bashcompletions += ['last']\n  bashcompletionslinks += {'lastb': 'last'}\nendif\n\nopt = not get_option('build-nologin').disabled()\nexe = executable(\n  'nologin',\n  'login-utils/nologin.c',\n  include_directories : includes,\n  install_dir : sbindir,\n  link_with : [lib_common],\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/nologin.8.adoc']\nendif\n\nopt = not get_option('build-utmpdump').disabled()\nexe = executable(\n  'utmpdump',\n  'login-utils/utmpdump.c',\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/utmpdump.1.adoc']\n  bashcompletions += ['utmpdump']\nendif\n\nopt = get_option('build-su').require(have_pty).allowed()\nexe = executable(\n  'su',\n  'login-utils/su.c',\n  'login-utils/su-common.c',\n  'login-utils/su-common.h',\n  'lib/shells.c',\n  pty_session_c,\n  monotonic_c,\n  include_directories : includes,\n  link_with : [lib_common, logindefs_c],\n  dependencies : [lib_pam,\n                  lib_pam_misc,\n                  lib_util,\n                  realtime_libs],\n  install_mode : 'rwsr-xr-x',\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/su.1.adoc']\n  bashcompletions += ['su']\nendif\n\nopt = not get_option('build-newgrp').disabled()\nexe = executable(\n  'newgrp',\n  'login-utils/newgrp.c',\n  include_directories : includes,\n  dependencies : [lib_crypt],\n  install_dir : usrbin_exec_dir,\n  install_mode : 'rwsr-xr-x',\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/newgrp.1.adoc']\n  bashcompletions += ['newgrp']\nendif\n\nopt = not get_option('build-lslogins').disabled()\nexe = executable(\n  'lslogins',\n  'login-utils/lslogins.c',\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols,\n               logindefs_c] +\n               (build_liblastlog2 ? [lib_lastlog2] : []),\n  dependencies : [lib_selinux,\n                  lib_systemd],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/lslogins.1.adoc']\n  bashcompletions += ['lslogins']\nendif\n\nopt = not get_option('build-vipw').disabled()\nexe = executable(\n  'vipw',\n  'login-utils/vipw.c',\n  'login-utils/setpwnam.h',\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_selinux],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  meson.add_install_script(meson_make_symlink,\n                           'vipw',\n                           usrbin_exec_dir / 'vigr')\n  manadocs += ['login-utils/vipw.8.adoc']\n  meson.add_install_script(meson_make_symlink,\n                           'vipw.8',\n                           mandir / 'man8/vigr.8')\nendif\n\nopt = get_option('build-runuser').require(have_pty).allowed()\nexe = executable(\n  'runuser',\n  'login-utils/runuser.c',\n  'login-utils/su-common.c',\n  'login-utils/su-common.h',\n  'lib/shells.c',\n  pty_session_c,\n  monotonic_c,\n  include_directories : includes,\n  link_with : [lib_common, logindefs_c],\n  dependencies : [lib_pam,\n                  lib_pam_misc,\n                  lib_util,\n                  realtime_libs],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/runuser.1.adoc']\n  bashcompletionslinks += {'runuser': 'su'}\nendif\n\n############################################################\n\nopt = not get_option('build-bits').disabled()\nexe = executable(\n  'bits',\n  bits_sources,\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/bits.1.adoc']\n  bashcompletions += ['bits']\nendif\n\nopt = not get_option('build-col').require(is_glibc).disabled()\nexe = executable(\n  'col',\n  col_sources,\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/col.1.adoc']\n  bashcompletions += ['col']\nendif\n\nopt = not get_option('build-colcrt').disabled()\nexe = executable(\n  'colcrt',\n  colcrt_sources,\n  include_directories : includes,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/colcrt.1.adoc']\n  bashcompletions += ['colcrt']\nendif\n\nopt = not get_option('build-colrm').disabled()\nexe = executable(\n  'colrm',\n  colrm_sources,\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/colrm.1.adoc']\n  bashcompletions += ['colrm']\nendif\n\nopt = not get_option('build-rev').disabled()\nexe = executable(\n  'rev',\n  rev_sources,\n  include_directories : includes,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/rev.1.adoc']\n  bashcompletions += ['rev']\nendif\n\nexe = executable(\n  'column',\n  column_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/column.1.adoc']\n  bashcompletions += ['column']\nendif\n\nopt = not get_option('build-line').disabled()\nexe = executable(\n  'line',\n  line_sources,\n  include_directories : includes,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/line.1.adoc']\nendif\n\nopt = not get_option('build-pg').disabled()\nexe = executable(\n  'pg',\n  pg_sources,\n  link_with : lib_common,\n  include_directories : includes,\n  dependencies : [lib_tinfo,\n                  curses_libs],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/pg.1.adoc']\n  bashcompletions += ['pg']\nendif\n\nopt = not get_option('build-ul').disabled()\nexe = executable(\n  'ul',\n  ul_sources,\n  include_directories : includes,\n  dependencies : [lib_tinfo,\n                  curses_libs],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['text-utils/ul.1.adoc']\n  bashcompletions += ['ul']\nendif\n\nopt = not get_option('build-more').disabled()\nexe = executable(\n  'more',\n  more_sources,\n  link_with : [lib_common],\n  include_directories : includes,\n  dependencies : [lib_tinfo,\n                  curses_libs,\n\t\t  lib_magic],\n  install : opt,\n  build_by_default : opt)\nexe2 = executable(\n  'test_more',\n  more_sources,\n  link_with : [lib_common],\n  include_directories : includes,\n  c_args : '-DTEST_PROGRAM',\n  dependencies : [lib_tinfo,\n                  curses_libs,\n\t\t  lib_magic],\n  build_by_default : opt and program_tests)\nexes += exe\nif opt and not is_disabler(exe)\n  exes += [exe, exe2]\n  manadocs += ['text-utils/more.1.adoc']\n  bashcompletions += ['more']\nendif\n\nif not get_option('build-hexdump').disabled()\n  exe = executable(\n    'hexdump',\n    hexdump_sources,\n    include_directories : includes,\n    link_with : [lib_common,\n                 lib_tcolors],\n    install_dir : usrbin_exec_dir)\nelse\n  exe = disabler()\nendif\nif not is_disabler(exe)\n    exes += exe\n    manadocs += ['text-utils/hexdump.1.adoc']\n    bashcompletions += ['hexdump']\nendif\n\nopt = not get_option('build-lsmem').disabled()\nexe = executable(\n  'lsmem',\n  lsmem_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/lsmem.1.adoc']\n  bashcompletions += ['lsmem']\nendif\n\nopt = not get_option('build-chmem').disabled()\nexe = executable(\n  'chmem',\n  chmem_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/chmem.8.adoc']\n  bashcompletions += ['chmem']\nendif\n\nopt = not get_option('build-choom').disabled()\nexe = executable(\n  'choom',\n  choom_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/choom.1.adoc']\n  bashcompletions += ['choom']\nendif\n\nhas_seminfo_type = cc.has_type('struct seminfo', args : '-D_GNU_SOURCE', prefix : '#include <sys/sem.h>')\n\nopt = get_option('build-ipcmk').require(has_seminfo_type).allowed()\nexe = executable(\n  'ipcmk',\n  ipcmk_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/ipcmk.1.adoc']\n  bashcompletions += ['ipcmk']\nendif\n\nopt = get_option('build-ipcrm').require(has_seminfo_type).allowed()\nexe = executable(\n  'ipcrm',\n  ipcrm_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/ipcrm.1.adoc']\n  bashcompletions += ['ipcrm']\nendif\n\nopt = not get_option('build-ipcs').require(has_seminfo_type).disabled()\nexe = executable(\n  'ipcs',\n  ipcs_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/ipcs.1.adoc']\n  bashcompletions += ['ipcs']\nendif\n\nopt = not get_option('build-rfkill').disabled()\nexe = executable(\n  'rfkill',\n  rfkill_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/rfkill.8.adoc']\n  bashcompletions += ['rfkill']\nendif\n\nexe = executable(\n  'renice',\n  renice_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/renice.1.adoc']\n  bashcompletions += ['renice']\nendif\n\nexe = executable(\n  'setpgid',\n  setpgid_sources,\n  include_directories: includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/setpgid.1.adoc']\n  bashcompletions += ['setpgid']\nendif\n\nexe = executable(\n  'setsid',\n  setsid_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/setsid.1.adoc']\n  bashcompletions += ['setsid']\nendif\n\nexe = executable(\n  'readprofile',\n  readprofile_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrsbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/readprofile.8.adoc']\n  bashcompletions += ['readprofile']\nendif\n\nopt = not get_option('build-tunelp').disabled()\nexe = executable(\n  'tunelp',\n  tunelp_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/tunelp.8.adoc']\n  bashcompletions += ['tunelp']\nendif\n\nopt = get_option('build-fstrim').require(have_sys_vfs_header).allowed()\nexe = executable(\n  'fstrim',\n  fstrim_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [mount_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/fstrim.8.adoc']\n  bashcompletions += ['fstrim']\nendif\n\nopt = get_option('build-dmesg').require(cc.has_header('sys/klog.h')).allowed()\nexe = executable(\n  'dmesg',\n  dmesg_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_tcolors],\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/dmesg.1.adoc']\n  bashcompletions += ['dmesg']\nendif\n\nexe = executable(\n  'test_dmesg',\n  dmesg_sources,\n  include_directories : dir_include,\n  c_args : '-DTEST_DMESG',\n  link_with : [lib_common,\n               lib_tcolors],\n  build_by_default : program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nopt = get_option('build-ctrlaltdel').allowed()\nexe = executable(\n  'ctrlaltdel',\n  ctrlaltdel_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/ctrlaltdel.8.adoc']\n  bashcompletions += ['ctrlaltdel']\nendif\n\nhave_linux_fs_h = conf.get('HAVE_LINUX_FS_H').to_string() == '1'\n\nopt = get_option('build-fsfreeze').require(have_linux_fs_h).allowed()\nexe = executable(\n  'fsfreeze',\n  fsfreeze_sources,\n  include_directories : includes,\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/fsfreeze.8.adoc']\n  bashcompletions += ['fsfreeze']\nendif\n\nopt = get_option('build-blkdiscard').require(have_linux_fs_h).allowed()\nexe = executable(\n  'blkdiscard',\n  blkdiscard_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [blkid_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/blkdiscard.8.adoc']\n  bashcompletions += ['blkdiscard']\nendif\n\nopt = get_option('build-blkzone').require(have_linux_fs_h).allowed()\nexe = executable(\n  'blkzone',\n  blkzone_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/blkzone.8.adoc']\n  bashcompletions += ['blkzone']\nendif\n\nopt = get_option('build-blkpr').require(cc.has_header('linux/pr.h')).allowed()\nexe = executable(\n  'blkpr',\n  blkpr_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/blkpr.8.adoc']\nendif\n\nopt = get_option('build-ldattach').require(cc.has_header('linux/if.h')).allowed()\nexe = executable(\n  'ldattach',\n  ldattach_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/ldattach.8.adoc']\n  bashcompletions += ['ldattach']\nendif\n\nhave_linux_rtc_h = cc.has_header('linux/rtc.h')\n\nopt = get_option('build-rtcwake').require(have_linux_rtc_h).allowed()\nexe = executable(\n  'rtcwake',\n  rtcwake_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/rtcwake.8.adoc']\n  bashcompletions += ['rtcwake']\nendif\n\nopt = get_option('build-setarch').require(cc.has_header('sys/personality.h')).allowed()\nexe = executable(\n  'setarch',\n  setarch_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/setarch.8.adoc']\n  bashcompletions += ['setarch']\nendif\n\nif opt\n  setarch_links = ['uname26', 'linux32', 'linux64']\n  setarch_links_arch = {\n    's390x' :   ['s390', 's390x'],\n    'x86' :     ['i386'],\n    'x86_64' :  ['i386', 'x86_64'],\n    'ppc64' :   ['ppc', 'ppc64', 'ppc32'],\n    'space64' : ['sparc', 'sparc64', 'sparc32', 'sparc32bash'],\n    'mips64' :  ['mips', 'mips64', 'mips32'],\n    'ia64' :    ['i386', 'ia64'],\n    'hppa' :    ['parisc', 'parisc64', 'parisc32'],\n  }\n  setarch_links += setarch_links_arch.get(host_machine.cpu_family(), [])\n\n  foreach link: setarch_links\n    meson.add_install_script(meson_make_symlink,\n                            'setarch',\n                            usrbin_exec_dir / link)\n    manlinks += {link + '.8': 'setarch.8'}\n  endforeach\nendif\n\nopt = not get_option('build-eject').disabled()\nexe = executable(\n  'eject',\n  eject_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [mount_dep],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exe = exe\n  manadocs += ['sys-utils/eject.1.adoc']\n  bashcompletions += ['eject']\nendif\n\nopt = not get_option('build-losetup').disabled()\nexe = executable(\n  'losetup',\n  losetup_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  manadocs += ['sys-utils/losetup.8.adoc']\n  exes += exe\n  bashcompletions += ['losetup']\nendif\n\nopt = opt and 'losetup' in static_programs\nexe = executable(\n  'losetup.static',\n  losetup_sources,\n  include_directories : includes,\n  link_args : ['--static'],\n  link_with : [lib_common,\n               lib_smartcols.get_static_lib()],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\nendif\n\nopt = not get_option('build-zramctl').disabled()\nexe = executable(\n  'zramctl',\n  zramctl_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/zramctl.8.adoc']\n  bashcompletions += ['zramctl']\nendif\n\nexe = executable(\n  'prlimit',\n  prlimit_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/prlimit.1.adoc']\n  bashcompletions += ['prlimit']\nendif\n\nopt = not get_option('build-lsns').disabled()\nexe = executable(\n  'lsns',\n  lsns_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [mount_dep],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/lsns.8.adoc']\n  bashcompletions += ['lsns']\nendif\n\nopt = not get_option('build-mount').disabled()\nexe = executable(\n  'mount',\n  mount_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [lib_selinux, mount_dep],\n  install_mode : 'rwsr-xr-x',\n  install : opt,\n  build_by_default : opt)\nexe2 = executable(\n  'umount',\n  umount_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [mount_dep],\n  install_mode : 'rwsr-xr-x',\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += [exe, exe2]\n  manadocs += ['sys-utils/fstab.5.adoc',\n\t\t    'sys-utils/mount.8.adoc',\n\t            'sys-utils/umount.8.adoc']\n  bashcompletions += ['mount', 'umount']\nendif\n\nopt2 = opt and 'mount' in static_programs\nexe = executable(\n  'mount.static',\n  mount_sources,\n  include_directories : includes,\n  link_args : ['--static'],\n  link_with : [lib_common,\n               lib_smartcols_static],\n  dependencies : [mount_static_dep],\n  install : opt2,\n  build_by_default : opt2)\nif opt2 and not is_disabler(exe)\n  exes += exe\nendif\n\nopt2 = opt and 'umount' in static_programs\nexe = executable(\n  'umount.static',\n  umount_sources,\n  include_directories : includes,\n  link_args : ['--static'],\n  link_with : [lib_common],\n  dependencies : [mount_static_dep],\n  install : opt2,\n  build_by_default : opt2)\nif opt2 and not is_disabler(exe)\n  exes += exe\nendif\n\n# setuid?\n\nopt = not get_option('build-swapon').disabled()\nexe = executable(\n  'swapon',\n  swapon_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [blkid_dep, mount_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/swapon.8.adoc']\n  bashcompletions += ['swapon']\nendif\n\nopt = not get_option('build-swapoff').disabled()\nexe = executable(\n  'swapoff',\n  swapoff_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [blkid_dep, mount_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manlinks += {'swapoff.8': 'swapon.8'}\n  bashcompletions += ['swapoff']\nendif\n\nexe = executable(\n  'lscpu',\n  lscpu_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [rtas_libs],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/lscpu.1.adoc']\n  bashcompletions += ['lscpu']\nendif\n\nopt = get_option('build-chcpu').require(have_cpu_set_t).allowed()\nexe = executable(\n  'chcpu',\n  chcpu_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/chcpu.8.adoc']\n  bashcompletions += ['chcpu']\nendif\n\nexe = executable(\n  'wdctl',\n  wdctl_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/wdctl.8.adoc']\n  bashcompletions += ['wdctl']\nendif\n\nopt = not get_option('build-mountpoint').disabled()\nexe = executable(\n  'mountpoint',\n  mountpoint_sources,\n  include_directories : includes,\n  dependencies : [mount_dep],\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/mountpoint.1.adoc']\n  bashcompletions += ['mountpoint']\nendif\n\nopt = not get_option('build-fallocate').disabled()\nexe = executable(\n  'fallocate',\n  fallocate_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/fallocate.1.adoc']\n  bashcompletions += ['fallocate']\nendif\n\nopt = not get_option('build-pivot_root').disabled()\nexe = executable(\n  'pivot_root',\n  pivot_root_sources,\n  include_directories : includes,\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/pivot_root.8.adoc']\n  bashcompletions += ['pivot_root']\nendif\n\nopt = not get_option('build-switch_root').disabled()\nif opt and not have_dirfd and not have_ddfd\n  error('neither dirfd nor ddfd are available')\nendif\nexe = executable(\n  'switch_root',\n  switch_root_sources,\n  include_directories : includes,\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/switch_root.8.adoc']\nendif\n\nopt = not get_option('build-unshare').disabled()\nexe = executable(\n  'unshare',\n  unshare_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [mount_dep],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/unshare.1.adoc']\n  bashcompletions += ['unshare']\nendif\n\nopt = opt and 'unshare' in static_programs\nexe = executable(\n  'unshare.static',\n  unshare_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [mount_dep],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\nendif\n\nopt = not get_option('build-nsenter').disabled()\nexe = executable(\n  'nsenter',\n  nsenter_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_selinux],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/nsenter.1.adoc']\n  bashcompletions += ['nsenter']\nendif\n\nopt = opt and 'nsenter' in static_programs\nexe = executable(\n  'nsenter.static',\n  nsenter_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_selinux],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\nendif\n\nopt = not get_option('build-setpriv').disabled() and lib_cap_ng.found()\nexe = executable(\n  'setpriv',\n  setpriv_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_cap_ng],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/setpriv.1.adoc']\n  bashcompletions += ['setpriv']\nendif\n\nopt = not get_option('build-flock').disabled()\nexe = executable(\n  'flock',\n  flock_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : realtime_libs,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/flock.1.adoc']\n  bashcompletions += ['flock']\nendif\n\nopt = not get_option('build-lsirq').disabled()\nexe = executable(\n  'lsirq',\n  lsirq_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/lsirq.1.adoc']\n  bashcompletions += ['lsirq']\nendif\n\nopt = not get_option('build-irqtop').disabled()\nexe = executable(\n  'irqtop',\n  irqtop_sources,\n  include_directories : includes,\n  dependencies : [realtime_libs, curses_libs],\n  link_with : [lib_common,\n               lib_smartcols,\n\t       lib_tcolors],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/irqtop.1.adoc']\n  bashcompletions += ['irqtop']\nendif\n\nopt = not get_option('build-ipcs').disabled()\nexe = executable(\n  'lsipc',\n  lsipc_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/lsipc.1.adoc']\n  bashcompletions += ['lsipc']\nendif\n\nopt = build_hwclock\nexe = executable(\n  'hwclock',\n  hwclock_sources,\n  include_directories : includes,\n  link_with :    [lib_common],\n  dependencies : [lib_m,\n                  lib_audit],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['sys-utils/hwclock.8.adoc', 'sys-utils/adjtime_config.5.adoc']\n  bashcompletions += ['hwclock']\nendif\n\nopt = not get_option('build-mkfs').disabled()\nexe = executable(\n  'mkfs',\n  mkfs_sources,\n  include_directories : includes,\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/mkfs.8.adoc']\n  bashcompletions += ['mkfs']\nendif\n\nopt = not get_option('build-bfs').disabled()\nexe = executable(\n  'mkfs.bfs',\n  mkfs_bfs_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/mkfs.bfs.8.adoc']\n  bashcompletions += ['mkfs.bfs']\nendif\n\nopt = not get_option('build-isosize').disabled()\nexe = executable(\n  'isosize',\n  isosize_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/isosize.8.adoc']\n  bashcompletions += ['isosize']\nendif\n\nexe = executable(\n  'mkswap',\n  mkswap_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_uuid],\n  dependencies: [blkid_dep, lib_selinux],\n  install_dir : sbindir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/mkswap.8.adoc']\n  bashcompletions += ['mkswap']\nendif\n\nexe = executable(\n  'swaplabel',\n  swaplabel_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_uuid],\n  dependencies : [blkid_dep],\n  install_dir : sbindir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/swaplabel.8.adoc']\n  bashcompletions += ['swaplabel']\nendif\n\nopt = not get_option('build-fsck').disabled()\nexe = executable(\n  'fsck',\n  fsck_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [blkid_dep, mount_dep, realtime_libs],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/fsck.8.adoc']\n  bashcompletions += ['fsck']\nendif\n\nopt = not get_option('build-minix').disabled()\nexe = executable(\n  'mkfs.minix',\n  mkfs_minix_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nexe2 = executable(\n  'test_mkfs_minix',\n  mkfs_minix_sources,\n  include_directories : includes,\n  c_args : '-DTEST_SCRIPT',\n  link_with : [lib_common],\n  build_by_default : opt and program_tests)\nexe3 = executable(\n  'fsck.minix',\n  fsck_minix_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += [exe, exe2, exe3]\n  manadocs += ['disk-utils/mkfs.minix.8.adoc','disk-utils/fsck.minix.8.adoc']\n  bashcompletions += ['mkfs.minix', 'fsck.minix']\nendif\n\nopt = not get_option('build-cramfs').disabled()\nexe = executable(\n  'mkfs.cramfs',\n  mkfs_cramfs_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_z],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nexe2 = executable(\n  'fsck.cramfs',\n  fsck_cramfs_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_z],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += [exe, exe2]\n  manadocs += ['disk-utils/mkfs.cramfs.8.adoc','disk-utils/fsck.cramfs.8.adoc']\n  bashcompletions += ['mkfs.cramfs', 'fsck.cramfs']\nendif\n\nopt = not get_option('build-raw').disabled()\nif opt\n  cc.has_header('linux/raw.h', required: opt)\nendif\nexe = executable(\n  'raw',\n  raw_sources,\n  include_directories : includes,\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/raw.8.adoc']\n  bashcompletions += ['raw']\nendif\n\nopt = not get_option('build-fdformat').disabled()\nexe = executable(\n  'fdformat',\n  fdformat_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/fdformat.8.adoc']\n  bashcompletions += ['fdformat']\nendif\n\nopt = get_option('build-blockdev').require(LINUX).allowed()\nexe = executable(\n  'blockdev',\n  blockdev_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/blockdev.8.adoc']\n  bashcompletions += ['blockdev']\nendif\n\nopt = not get_option('build-fdisks').disabled()\nif opt and not have_dirfd and not have_ddfd\n  error('neither dirfd nor ddfd are available')\nendif\nexe = executable(\n  'fdisk',\n  fdisk_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_fdisk,\n               lib_smartcols,\n               lib_tcolors],\n  dependencies : [lib_readline],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  bashcompletions += ['fdisk']\nendif\n\nopt2 = opt and 'fdisk' in static_programs\nexe = executable(\n  'fdisk.static',\n  fdisk_sources,\n  link_args : ['--static'],\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_tcolors,\n               lib_fdisk_static,\n               lib_smartcols.get_static_lib()],\n  dependencies : [lib_readline_static],\n  install_dir : sbindir,\n  install : opt2,\n  build_by_default : opt2)\nif opt2 and not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sfdisk',\n  sfdisk_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_fdisk,\n               lib_smartcols,\n               lib_tcolors],\n  dependencies : [lib_readline],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  bashcompletions += ['sfdisk']\nendif\n\nopt2 = opt and 'sfdisk' in static_programs\nexe = executable(\n  'sfdisk.static',\n  sfdisk_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_tcolors,\n               lib_fdisk_static,\n               lib_smartcols.get_static_lib()],\n  dependencies : [lib_readline_static],\n  install_dir : sbindir,\n  install : opt2,\n  build_by_default : opt2)\nif opt2 and not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'cfdisk',\n  cfdisk_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_fdisk,\n               lib_smartcols,\n               lib_tcolors],\n  dependencies : [curses_libs, mount_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['disk-utils/fdisk.8.adoc',\n\t\t    'disk-utils/sfdisk.8.adoc',\n\t\t    'disk-utils/cfdisk.8.adoc']\n  bashcompletions += ['cfdisk']\nendif\n\nopt = not get_option('build-partx').disabled()\nexe = executable(\n  'addpart',\n  addpart_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nexe2 = executable(\n  'delpart',\n  delpart_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nexe3 = executable(\n  'resizepart',\n  resizepart_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nexe4 = executable(\n  'partx',\n  partx_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [blkid_dep],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += [exe, exe2, exe3, exe4]\n  manadocs += ['disk-utils/addpart.8.adoc',\n\t\t    'disk-utils/delpart.8.adoc',\n\t\t    'disk-utils/resizepart.8.adoc',\n\t\t    'disk-utils/partx.8.adoc']\n  bashcompletions += ['addpart', 'delpart', 'resizepart', 'partx']\nendif\nopt = opt and 'partx' in static_programs\nexe = executable(\n  'addpart.static',\n  addpart_sources,\n  include_directories : includes,\n  link_args : ['--static'],\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nexe2 = executable(\n  'delpart.static',\n  delpart_sources,\n  include_directories : includes,\n  link_args : ['--static'],\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nexe3 = executable(\n  'resizepart.static',\n  resizepart_sources,\n  include_directories : includes,\n  link_args : ['--static'],\n  link_with : [lib_common],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nexe4 = executable(\n  'partx.static',\n  partx_sources,\n  include_directories : includes,\n  link_args : ['--static'],\n  link_with : [lib_common,\n               lib_smartcols.get_static_lib()],\n  dependencies : [blkid_static_dep],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\n\nif opt and not is_disabler(exe)\n  exes += [exe, exe2, exe3, exe4]\nendif\n\n############################################################\n\nopt = get_option('build-script').require(have_pty).allowed()\nexe = executable(\n  'script',\n  script_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_util,\n                  lib_utempter,\n                  realtime_libs,\n                  math_libs],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/script.1.adoc']\n  bashcompletions += ['script']\nendif\n\nexe = executable(\n  'test_script',\n  script_sources,\n  include_directories : includes,\n  c_args : '-DTEST_SCRIPT',\n  link_with : [lib_common],\n  dependencies : [lib_util,\n                  lib_utempter,\n                  realtime_libs,\n                  math_libs],\n  build_by_default : opt and program_tests)\nif opt and not is_disabler(exe)\n  exes += exe\nendif\n\nopt = get_option('build-scriptutils').require(have_pty).allowed()\nexe = executable(\n  'scriptlive',\n  scriptlive_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_util,\n                  realtime_libs,\n                  math_libs],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/scriptlive.1.adoc']\n  bashcompletions += ['scriptlive']\nendif\n\nexe = executable(\n  'scriptreplay',\n  scriptreplay_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [math_libs],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/scriptreplay.1.adoc']\n  bashcompletions += ['scriptreplay']\nendif\n\nopt = not get_option('build-agetty').disabled()\nexe = executable(\n  'agetty',\n  agetty_sources,\n  include_directories : includes,\n  link_with : [lib_common, logindefs_c],\n  dependencies : [BSD ? lib_util : [], lib_systemd],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/agetty.8.adoc']\nendif\n\nopt = not get_option('build-setterm').disabled()\nexe = executable(\n  'setterm',\n  setterm_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [curses_libs],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/setterm.1.adoc']\n  bashcompletions += ['setterm']\nendif\n\nopt = not get_option('build-mesg').disabled()\nexe = executable(\n  'mesg',\n  mesg_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/mesg.1.adoc']\n  bashcompletions += ['mesg']\nendif\n\ntty_setgid = get_option('tty-setgid')\nif tty_setgid\n  tty_install_mode = [ 'rwxr-sr-x', 'root', 'tty' ]\nelse\n  tty_install_mode = [ false, false, false ]\nendif\n\nopt = not get_option('build-wall').disabled()\nexe = executable(\n  'wall',\n  wall_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_systemd],\n  install_dir : usrbin_exec_dir,\n  install_mode : tty_install_mode,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/wall.1.adoc']\n  bashcompletions += ['wall']\nendif\n\n# chgrp tty $(DESTDIR)$(usrbin_execdir)/wall\n# chmod g+s $(DESTDIR)$(usrbin_execdir)/wall\n\nopt = not get_option('build-write').disabled()\nexe = executable(\n  'write',\n  write_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_systemd],\n  install_dir : usrbin_exec_dir,\n  install_mode : tty_install_mode,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['term-utils/write.1.adoc']\n  bashcompletions += ['write']\nendif\n\n# chgrp tty $(DESTDIR)$(usrbin_execdir)/write\n# chmod g+s $(DESTDIR)$(usrbin_execdir)/write\n\nopt = not get_option('build-login').disabled()\nexe = executable(\n  'login',\n  login_sources,\n  include_directories : includes,\n  link_with : [lib_common, logindefs_c],\n  dependencies : [lib_pam,\n                  lib_audit,\n                  lib_selinux],\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/login.1.adoc']\nendif\n\nopt = not get_option('build-sulogin').disabled()\nexe = executable(\n  'sulogin',\n  sulogin_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_crypt,\n                  lib_selinux],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['login-utils/sulogin.8.adoc']\nendif\n\nopt = not get_option('build-cal').disabled()\nexe = executable(\n  'cal',\n  cal_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_tcolors],\n  dependencies : [curses_libs],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/cal.1.adoc']\n  bashcompletions += ['cal']\nendif\n\nopt = not get_option('build-logger').disabled()\nexe = executable(\n  'logger',\n  logger_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [lib_systemd],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/logger.1.adoc']\n  bashcompletions += ['logger']\nendif\n\nexe = executable(\n  'test_logger',\n  logger_sources,\n  include_directories : includes,\n  c_args : '-DTEST_LOGGER',\n  link_with : [lib_common],\n  dependencies : [lib_systemd],\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nopt = not get_option('build-look').disabled()\nexe = executable(\n  'look',\n  look_sources,\n  include_directories : includes,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/look.1.adoc']\n  bashcompletions += ['look']\nendif\n\nopt = not get_option('build-mcookie').disabled()\nexe = executable(\n  'mcookie',\n  mcookie_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/mcookie.1.adoc']\n  bashcompletions += ['mcookie']\nendif\n\nif build_liblastlog2\n  exe = executable(\n    'lastlog2',\n    lastlog2_sources,\n    include_directories : includes,\n    link_with : [lib_common, lib_lastlog2],\n    install_dir : usrbin_exec_dir,\n    install : true)\n  exes += exe\n  manadocs += ['misc-utils/lastlog2.8.adoc']\n  bashcompletions += ['lastlog2']\n  manadocs += ['liblastlog2/man/lastlog2.3.adoc',\n               'liblastlog2/man/ll2_write_entry.3.adoc',\n\t       'liblastlog2/man/ll2_read_entry.3.adoc',\n\t       'liblastlog2/man/ll2_import_lastlog.3.adoc',\n\t       'liblastlog2/man/ll2_read_all.3.adoc',\n\t       'liblastlog2/man/ll2_remove_entry.3.adoc',\n\t       'liblastlog2/man/ll2_rename_user.3.adoc',\n\t       'liblastlog2/man/ll2_update_login_time.3.adoc'\n\t       ]\nendif\n\nopt = not get_option('build-namei').disabled()\nexe = executable(\n  'namei',\n  namei_sources,\n  include_directories : includes,\n  dependencies : [lib_selinux],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/namei.1.adoc']\n  bashcompletions += ['namei']\nendif\n\nopt = not get_option('build-whereis').disabled()\nexe = executable(\n  'whereis',\n  whereis_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/whereis.1.adoc']\n  bashcompletions += ['whereis']\nendif\n\nopt = not get_option('build-lslocks').disabled()\nexe = executable(\n  'lslocks',\n  lslocks_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [mount_dep],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/lslocks.8.adoc']\n  bashcompletions += ['lslocks']\nendif\n\nopt = not get_option('build-lsblk').disabled()\nexe = executable(\n  'lsblk',\n  lsblk_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_tcolors,\n               lib_smartcols],\n  dependencies : [blkid_dep, lib_udev, mount_dep],\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/lsblk.8.adoc']\n  bashcompletions += ['lsblk']\nendif\n\nerrnos_h = custom_target('errnos.h',\n  input : 'tools/all_errnos',\n  output : 'errnos.h',\n  command : ['tools/all_errnos', sed.full_path(), '@OUTPUT@',\n             cc.cmd_array(), get_option('c_args')],\n)\n\nopt = not get_option('build-lsfd').require(lib_rt.found()).disabled() \\\n      and cc.has_header_symbol('linux/bpf.h', 'BPF_OBJ_NAME_LEN') \\\n      and cc.has_header_symbol('linux/bpf.h', 'BPF_TAG_SIZE')\nexe = executable(\n  'lsfd',\n  lsfd_sources, errnos_h,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [lib_rt],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['lsfd-cmd/lsfd.1.adoc']\nendif\n\nexe = executable(\n  'uuidgen',\n  uuidgen_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_uuid],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/uuidgen.1.adoc']\n  bashcompletions += ['uuidgen']\nendif\n\nexe = executable(\n  'uuidparse',\n  uuidparse_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_uuid,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/uuidparse.1.adoc']\n  bashcompletions += ['uuidparse']\nendif\n\nopt = build_uuidd\nexe = executable(\n  'uuidd',\n  uuidd_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_uuid],\n  dependencies : [realtime_libs,\n                  lib_systemd],\n  install_dir : usrsbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nexe2 = executable(\n  'test_uuidd',\n  test_uuidd_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_uuid],\n  dependencies : thread_libs,\n  build_by_default : opt and program_tests)\nif not is_disabler(exe)\n  exes += [exe, exe2]\n  manadocs += ['misc-utils/uuidd.8.adoc']\n  bashcompletions += ['uuidd']\nendif\n\nopt = build_libblkid\nexe = executable(\n  'blkid',\n  blkid_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [blkid_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/blkid.8.adoc']\n  bashcompletions += ['blkid']\nendif\n\nopt = opt and 'blkid' in static_programs\nexe = executable(\n  'blkid.static',\n  blkid_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  dependencies : [blkid_static_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-mkfs',\n  'libblkid/samples/mkfs.c',\n  include_directories : includes,\n  dependencies : [blkid_dep])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-partitions',\n  'libblkid/samples/partitions.c',\n  include_directories : includes,\n  dependencies : [blkid_dep])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-superblocks',\n  'libblkid/samples/superblocks.c',\n  include_directories : includes,\n  dependencies : [blkid_dep])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-topology',\n  'libblkid/samples/topology.c',\n  include_directories : includes,\n  dependencies : [blkid_dep])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_blkid_fuzz_sample',\n  'libblkid/src/fuzz.c',\n  include_directories: includes,\n  dependencies : [blkid_dep],\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\n############################################################\n\nopt = not get_option('build-findfs').disabled()\nexe = executable(\n  'findfs',\n  findfs_sources,\n  include_directories : includes,\n  dependencies : [blkid_dep],\n  install_dir : sbindir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/findfs.8.adoc']\n  bashcompletions += ['findfs']\nendif\n\nexe = executable(\n  'wipefs',\n  wipefs_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [blkid_dep],\n  install_dir : sbindir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/wipefs.8.adoc']\n  bashcompletions += ['wipefs']\nendif\n\nopt = not get_option('build-findmnt').disabled()\nexe = executable(\n  'findmnt',\n  findmnt_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  dependencies : [blkid_dep, lib_udev, mount_dep],\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/findmnt.8.adoc']\n  bashcompletions += ['findmnt']\nendif\n\nopt = not get_option('build-kill').disabled()\nexe = executable(\n  'kill',\n  kill_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/kill.1.adoc']\nendif\n\nopt = not get_option('build-rename').disabled()\nexe = executable(\n  'rename',\n  rename_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/rename.1.adoc']\n  bashcompletions += ['rename']\nendif\n\nopt = not get_option('build-getopt').disabled()\nexe = executable(\n  'getopt',\n  getopt_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/getopt.1.adoc']\n  bashcompletions += ['getopt']\nendif\n\nexe = executable(\n  'fincore',\n  fincore_sources,\n  include_directories : includes,\n  link_with : [lib_common,\n               lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : true)\nif not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/fincore.1.adoc']\n  bashcompletions += ['fincore']\nendif\n\nopt = get_option('build-hardlink').allowed()\nexe = executable(\n  'hardlink',\n  hardlink_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/hardlink.1.adoc']\n  bashcompletions += ['hardlink']\nendif\n\nopt = get_option('build-pipesz').allowed()\nexe = executable(\n  'pipesz',\n  pipesz_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/pipesz.1.adoc']\n  bashcompletions += ['pipesz']\nendif\n\nexe = executable(\n  'test_cal',\n  cal_sources,\n  include_directories : includes,\n  c_args : '-DTEST_CAL',\n  link_with : [lib_common,\n               lib_tcolors],\n  dependencies : [curses_libs],\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nhave_posix_fadvise = conf.get('HAVE_POSIX_FADVISE').to_string() == '1'\n\nopt = get_option('build-fadvise').require(have_posix_fadvise).allowed()\nexe = executable(\n  'fadvise',\n  fadvise_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/fadvise.1.adoc']\n  bashcompletions += ['fadvise']\nendif\n\nopt = get_option('build-waitpid').require(LINUX and conf.get('HAVE_PIDFD_OPEN').to_string() == '1').allowed()\nexe = executable(\n  'waitpid',\n  waitpid_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/waitpid.1.adoc']\n  bashcompletions += ['waitpid']\nendif\n\nsyscalls_h = custom_target('syscalls.h',\n  input : 'tools/all_syscalls',\n  output : 'syscalls.h',\n  command : ['tools/all_syscalls', sed.full_path(), '@OUTPUT@',\n             cc.cmd_array(), get_option('c_args')],\n)\n\nhave_linux_audit_h = cc.has_header('linux/audit.h')\nhave_audit_arch_native = cc.compiles(fs.read('include/audit-arch.h'), name : 'has AUDIT_ARCH_NATIVE')\n\nopt = get_option('build-enosys').require(have_linux_audit_h and have_audit_arch_native).allowed()\nexe = executable(\n  'enosys',\n  'misc-utils/enosys.c', syscalls_h, errnos_h,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/enosys.1.adoc']\n  bashcompletions += ['enosys']\nendif\n\nopt = get_option('build-lsclocks').require(have_linux_rtc_h).allowed()\nexe = executable(\n  'lsclocks',\n  lsclocks_sources,\n  include_directories : includes,\n  link_with : [lib_common, lib_smartcols],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/lsclocks.1.adoc']\n  bashcompletions += ['lsclocks']\nendif\n\nopt = get_option('build-exch').require(conf.get('HAVE_RENAMEAT2').to_string() == '1').allowed()\nexe = executable(\n  'exch',\n  exch_sources,\n  include_directories : includes,\n  link_with : [lib_common],\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\nif opt and not is_disabler(exe)\n  exes += exe\n  manadocs += ['misc-utils/exch.1.adoc']\n  bashcompletions += ['exch']\nendif\n\n############################################################\n\nopt = not get_option('build-schedutils').disabled()\nexe = executable(\n  'chrt',\n  'schedutils/chrt.c',\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\n\nexe2 = executable(\n  'ionice',\n  'schedutils/ionice.c',\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\n\nexe3 = executable(\n  'taskset',\n  'schedutils/taskset.c',\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\n\nexe4 = executable(\n  'uclampset',\n  'schedutils/uclampset.c',\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\n\nexe5 = executable(\n  'coresched',\n  'schedutils/coresched.c',\n  include_directories : includes,\n  link_with : lib_common,\n  install_dir : usrbin_exec_dir,\n  install : opt,\n  build_by_default : opt)\n\nif opt and not is_disabler(exe)\n  exes += [exe, exe2, exe3, exe4, exe5]\n  manadocs += ['schedutils/chrt.1.adoc',\n               'schedutils/ionice.1.adoc',\n               'schedutils/taskset.1.adoc',\n               'schedutils/uclampset.1.adoc',\n               'schedutils/coresched.1.adoc']\n  bashcompletions += ['chrt', 'ionice', 'taskset', 'uclampset', 'coresched']\nendif\n\n############################################################\n\n# TODO: when autotools compat is not needed, s/_/-/g in file names?\n\nexe = executable(\n  'test_ttyutils',\n  'lib/ttyutils.c',\n  c_args : ['-DTEST_PROGRAM_TTYUTILS'],\n  include_directories : dir_include,\n  link_with : lib_common,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_blkdev',\n  'lib/blkdev.c',\n  c_args : ['-DTEST_PROGRAM_BLKDEV'],\n  include_directories : dir_include,\n  link_with : lib_common,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_ismounted',\n  'lib/ismounted.c',\n  c_args : ['-DTEST_PROGRAM_ISMOUNTED'],\n  include_directories : dir_include,\n  link_with : lib_common,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_mangle',\n  'lib/mangle.c',\n  c_args : ['-DTEST_PROGRAM_MANGLE'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_strutils',\n  'lib/strutils.c',\n  c_args : ['-DTEST_PROGRAM_STRUTILS'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_colors',\n  'lib/colors.c',\n  'lib/color-names.c',\n  c_args : ['-DTEST_PROGRAM_COLORS'],\n  include_directories : dir_include,\n  link_with : [lib_common, lib_tcolors],\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_randutils',\n  'lib/randutils.c',\n  c_args : ['-DTEST_PROGRAM_RANDUTILS'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nif conf.get('HAVE_OPENAT').to_string() == '1' \\\n   and conf.get('HAVE_DIRFD').to_string() == '1'\n  exe = executable(\n    'test_procfs',\n    'lib/procfs.c',\n    c_args : ['-DTEST_PROGRAM_PROCFS'],\n    include_directories : dir_include,\n    link_with : lib_common,\n    build_by_default: program_tests)\n  if not is_disabler(exe)\n    exes += exe\n  endif\n\n  exe = executable(\n    'test_path',\n    'lib/path.c',\n    'lib/fileutils.c',\n    have_cpu_set_t ? 'lib/cpuset.c' : [],\n    c_args : ['-DTEST_PROGRAM_PATH'],\n    include_directories : dir_include,\n    link_with : lib_common,\n    build_by_default: program_tests)\n  if not is_disabler(exe)\n    exes += exe\n  endif\nendif\n\nif have_pty\n  exe = executable(\n    'test_pty',\n    pty_session_c,\n    monotonic_c,\n    c_args : ['-DTEST_PROGRAM_PTY'],\n    include_directories : dir_include,\n    link_with : [lib_common],\n    dependencies : [lib_m,\n                    realtime_libs,\n                    lib_util],\n    build_by_default: program_tests)\n  if not is_disabler(exe)\n    exes += exe\n  endif\nendif\n\nif LINUX\n  exe = executable(\n    'test_cpuset',\n    'lib/cpuset.c',\n    c_args : ['-DTEST_PROGRAM_CPUSET'],\n    include_directories : dir_include,\n    build_by_default: program_tests)\n  if not is_disabler(exe)\n    exes += exe\n  endif\nendif\n\nexe = executable(\n  'test_sysfs',\n  'lib/sysfs.c',\n  'lib/path.c',\n  'lib/buffer.c',\n  'lib/mbsalign.c',\n  'lib/fileutils.c',\n  have_cpu_set_t ? 'lib/cpuset.c' : [],\n  c_args : ['-DTEST_PROGRAM_SYSFS'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_pager',\n  'lib/pager.c',\n  c_args : ['-DTEST_PROGRAM_PAGER'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_linux_version',\n  'lib/linux_version.c',\n  c_args : ['-DTEST_PROGRAM_LINUXVERSION'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_fileutils',\n  'lib/fileutils.c',\n  c_args : ['-DTEST_PROGRAM_FILEUTILS'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_canonicalize',\n  'lib/canonicalize.c',\n  c_args : ['-DTEST_PROGRAM_CANONICALIZE'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_timeutils',\n  'lib/timeutils.c',\n  'lib/strutils.c',\n  c_args : ['-DTEST_PROGRAM_TIMEUTILS'],\n  include_directories : dir_include,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_pwdutils',\n  'lib/pwdutils.c',\n  c_args : ['-DTEST_PROGRAM'],\n  include_directories : dir_include,\n  link_with : lib_common,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_logindefs',\n  'lib/logindefs.c',\n  c_args : ['-DTEST_PROGRAM'],\n  include_directories : dir_include,\n  link_with : [lib_common, logindefs_c],\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\n############################################################\n\nexe = executable(\n  'test_uuid_parser',\n  'libuuid/src/test_uuid.c',\n  include_directories : [dir_include, dir_libuuid],\n  link_with : lib_uuid,\n  dependencies : socket_libs,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_uuid_time',\n  test_uuid_time_sources,\n  include_directories : [dir_include],\n  link_with : lib_uuid,\n  c_args : '-DTEST_PROGRAM',\n  build_by_default : program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\n############################################################\n\nlibfdisk_tests_cflags = ['-DTEST_PROGRAM']\nlibfdisk_tests_ldadd = [lib_fdisk_static, lib_uuid]\nlibfdisk_tests_ldadd_deps = [blkid_dep]\n\nexe = executable(\n  'test_fdisk_ask',\n  'libfdisk/src/ask.c',\n  c_args : libfdisk_tests_cflags,\n  include_directories : lib_fdisk_includes,\n  link_with : libfdisk_tests_ldadd,\n  dependencies : libfdisk_tests_ldadd_deps,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_fdisk_gpt',\n  'libfdisk/src/gpt.c',\n  c_args : libfdisk_tests_cflags,\n  include_directories : lib_fdisk_includes,\n  link_with : libfdisk_tests_ldadd,\n  dependencies : libfdisk_tests_ldadd_deps,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_fdisk_utils',\n  'libfdisk/src/utils.c',\n  c_args : libfdisk_tests_cflags,\n  include_directories : lib_fdisk_includes,\n  link_with : libfdisk_tests_ldadd,\n  dependencies : libfdisk_tests_ldadd_deps,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_fdisk_script',\n  'libfdisk/src/script.c',\n  c_args : libfdisk_tests_cflags,\n  include_directories : lib_fdisk_includes,\n  link_with : libfdisk_tests_ldadd,\n  dependencies : libfdisk_tests_ldadd_deps,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_fdisk_version',\n  'libfdisk/src/version.c',\n  c_args : libfdisk_tests_cflags,\n  include_directories : lib_fdisk_includes,\n  link_with : libfdisk_tests_ldadd,\n  dependencies : libfdisk_tests_ldadd_deps,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_fdisk_item',\n  'libfdisk/src/item.c',\n  c_args : libfdisk_tests_cflags,\n  include_directories : lib_fdisk_includes,\n  link_with : libfdisk_tests_ldadd,\n  dependencies : libfdisk_tests_ldadd_deps,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nsample_fdisk_ldadd = [lib_common, lib_fdisk]\n\nexe = executable(\n  'sample-fdisk-mkpart',\n  'libfdisk/samples/mkpart.c',\n  include_directories : lib_fdisk_includes,\n  link_with : sample_fdisk_ldadd)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-fdisk-mkpart-fullspec',\n  'libfdisk/samples/mkpart-fullspec.c',\n  include_directories : lib_fdisk_includes,\n  link_with : sample_fdisk_ldadd)\nif not is_disabler(exe)\n  exes += exe\nendif\n\n############################################################\n\nexe = executable(\n  'test_cap',\n  'tests/helpers/test_cap.c',\n  include_directories : includes,\n  dependencies : [lib_cap_ng],\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_mbsencode',\n  'tests/helpers/test_mbsencode.c',\n  include_directories : includes,\n  link_with : lib_common,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_byteswap',\n  'tests/helpers/test_byteswap.c',\n  include_directories : includes,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_md5',\n  'tests/helpers/test_md5.c',\n  md5_c,\n  include_directories : includes,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_sha1',\n  'tests/helpers/test_sha1.c',\n  sha1_c,\n  include_directories : includes,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_pathnames',\n  'tests/helpers/test_pathnames.c',\n  include_directories : includes,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_strerror',\n  'tests/helpers/test_strerror.c',\n  include_directories : includes,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_sysinfo',\n  'tests/helpers/test_sysinfo.c',\n  include_directories : includes,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_sigreceive',\n  'tests/helpers/test_sigreceive.c',\n  include_directories : includes,\n  link_with : lib_common,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_sigstate',\n  'tests/helpers/test_sigstate.c',\n  include_directories : includes,\n  link_with : lib_common,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_tiocsti',\n  'tests/helpers/test_tiocsti.c',\n  include_directories : includes,\n  build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_uuid_namespace',\n  'tests/helpers/test_uuid_namespace.c',\n  predefined_c,\n  unpack_c,\n  unparse_c,\n  include_directories : includes,\n  build_by_default: program_tests)\nexes += exe\n\nif LINUX and lib_rt.found()\n  exe = executable(\n    'test_mkfds',\n    'tests/helpers/test_mkfds.c',\n    'tests/helpers/test_mkfds.h',\n    'tests/helpers/test_mkfds_ppoll.c',\n    include_directories : includes,\n    dependencies : [lib_rt],\n    build_by_default: program_tests)\n  exes += exe\nendif\n\nexe = executable(\n  'test_enosys',\n  'tests/helpers/test_enosys.c',\n  include_directories : includes,\n  build_by_default: program_tests)\nexes += exe\n\n############################################################\n\nif conf.get('HAVE_OPENAT').to_string() == '1'\n  exe = executable(\n    'sample-scols-tree',\n    'libsmartcols/samples/tree.c',\n    include_directories : includes,\n    link_with : [lib_smartcols, lib_common],\n    build_by_default: program_tests)\n  if not is_disabler(exe)\n    exes += exe\n  endif\nendif\n\nexe = executable(\n  'sample-scols-title',\n  'libsmartcols/samples/title.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-scols-wrap',\n  'libsmartcols/samples/wrap.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-scols-continuous',\n  'libsmartcols/samples/continuous.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-scols-continuous-json',\n  'libsmartcols/samples/continuous-json.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-scols-maxout',\n  'libsmartcols/samples/maxout.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-scols-fromfile',\n  'libsmartcols/samples/fromfile.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-scols-grouping-simple',\n  'libsmartcols/samples/grouping-simple.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-scols-grouping-overlay',\n  'libsmartcols/samples/grouping-overlay.c',\n  include_directories : includes,\n  link_with : [lib_smartcols, lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'sample-mount-overwrite',\n  'libmount/samples/overwrite.c',\n  include_directories : includes,\n  dependencies : [mount_dep],\n  link_with : [lib_common])\nif not is_disabler(exe)\n  exes += exe\nendif\n\nexe = executable(\n  'test_boilerplate',\n  'Documentation/boilerplate.c',\n   include_directories : includes,\n   build_by_default: program_tests)\nif not is_disabler(exe)\n  exes += exe\nendif\n\n############################################################\n\n# Let the test runner know whether we're running under asan and export\n# some paths. We use a file on disk so that it is possible to run the\n# test scripts from commandline without setting any variables.\nconfigure_file(output : 'meson.conf',\n               capture : true,\n               command : ['echo',\n                          '''asan=@0@\nPYTHON=@1@\n'''.format(get_option('b_sanitize')=='address' ? 'yes' : '',\n           python_program.full_path())])\n\nrun_sh = find_program('tests/run.sh')\nrun_target(\n  'check',\n  command : [run_sh,\n             '--srcdir=' + meson.current_source_dir(),\n             '--builddir=' + meson.current_build_dir(),\n             '--parallel',\n             '--nonroot'],\n  depends : exes)\n\n\nmanadocs += ['lib/terminal-colors.d.5.adoc']\nif build_libblkid\n  manadocs += ['libblkid/libblkid.3.adoc']\nendif\n\nif build_libuuid\n  manadocs += [\n    'libuuid/man/uuid.3.adoc',\n    'libuuid/man/uuid_clear.3.adoc',\n    'libuuid/man/uuid_compare.3.adoc',\n    'libuuid/man/uuid_copy.3.adoc',\n    'libuuid/man/uuid_generate.3.adoc',\n    'libuuid/man/uuid_is_null.3.adoc',\n    'libuuid/man/uuid_parse.3.adoc',\n    'libuuid/man/uuid_time.3.adoc',\n    'libuuid/man/uuid_unparse.3.adoc']\n  manlinks += {\n    'uuid_generate_random.3': 'uuid_generate.3',\n    'uuid_generate_time.3': 'uuid_generate.3',\n    'uuid_generate_time_safe.3': 'uuid_generate.3',\n  }\nendif\n\nasciidoctor = find_program('asciidoctor', required : false)\nif asciidoctor.found()\n  foreach adoc : manadocs\n    name = adoc.split('/')[-1]\n    page = name.split('.adoc')[0]\n    section = page.split('.')[-1]\n    mandirn = mandir / 'man' + section\n    input = adoc\n\n    custom_target(\n      page,\n      command : [ asciidoctor,\n\t  '-b', 'manpage',\n\t  '-a', 'VERSION=' + meson.project_version(),\n\t  '-a', 'release-version=' + meson.project_version(),\n\t  '-a', 'ADJTIME_PATH=/etc/adjtime',\n\t  '-a', 'package-docdir=' + docdir,\n\t  '--base-dir=' + meson.current_source_dir(),\n          '--destination-dir=' + meson.current_build_dir(),\n          '--load-path', '@SOURCE_ROOT@/tools',\n          '--require', 'asciidoctor-includetracker',\n\t  '@INPUT@'],\n      input : input,\n      output : [page],\n      depfile : page + '.deps',\n      install: true,\n      install_dir : mandirn)\n  endforeach\n\n  foreach link_name, target : manlinks\n    link_section = link_name.split('.')[-1]\n    target_section = target.split('.')[-1]\n    meson.add_install_script(meson_make_manpage_stub,\n      'man' + target_section / target,\n      mandir / 'man' + link_section / link_name)\n  endforeach\nendif\n\nif bash_completion.found()\n  foreach completion : bashcompletions\n    install_data(\n      'bash-completion' / completion,\n      install_dir : bash_completion.get_variable(pkgconfig : 'completionsdir')\n    )\n  endforeach\n  foreach link_name, target : bashcompletionslinks\n    meson.add_install_script(meson_make_symlink,\n      target,\n      bash_completion.get_variable(pkgconfig : 'completionsdir') / link_name)\n  endforeach\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 12.2783203125,
          "content": "# enable various dependencies (no prefixes)\n\noption('tinfo',       type : 'feature')\noption('ncursesw',    type : 'feature')\noption('ncurses',     type : 'feature')\noption('slang',       type : 'feature', value : 'disabled',\n       description : 'compile cfdisk with slang rather than ncurses')\noption('cryptsetup',  type : 'feature')\noption('cryptsetup-dlopen',  type : 'feature')\noption('zlib',        type : 'feature')\noption('readline',    type : 'feature')\noption('nls',         type : 'feature')\noption('libutil',     type : 'feature')\noption('libutempter', type : 'feature')\noption('libpcre2-posix',     type : 'feature')\noption('libuser',     type : 'feature')\noption('selinux',     type : 'feature', value : 'disabled')\noption('audit',       type : 'feature', value : 'disabled')\noption('smack',       type : 'feature', value : 'disabled')\noption('magic',       type : 'feature')\noption('econf',       type : 'feature')\noption('systemd',     type : 'feature')\noption('sysvinit',    type : 'feature', value : 'disabled',\n       description : 'build and install sysvinit startup scripts')\noption('btrfs',       type : 'feature')\noption('widechar',    type : 'feature',\n       description : 'compile with wide character support')\n\n# enable building of various programs and features (\"build-\" prefix)\n\noption('build-python', type : 'feature', value : 'auto',\n       description : 'build python extension module')\noption('python', type : 'string', value : 'python3',\n       description : 'build extension module for this python')\n\noption('build-libblkid', type : 'feature',\n       description : 'build libblkid and many related utilities')\noption('build-libuuid', type : 'feature',\n       description : 'build libuuid and uuid utilities')\noption('build-liblastlog2', type : 'feature',\n       description : 'build liblastlog2 and lastlog2 utilities')\noption('build-pam-lastlog2', type : 'feature',\n       description : 'build PAM lastlog2 module')\noption('build-libmount', type : 'feature',\n       description : 'build libmount')\noption('build-libsmartcols', type : 'feature',\n       description : 'build libsmartcols')\noption('build-libfdisk', type : 'feature',\n       description : 'build libfdisk')\n\n\noption('build-fdisks', type : 'feature',\n       description : 'build fdisk(8), sfdisk(8) and cfdisk(8)')\noption('build-mount', type : 'feature',\n       description : 'build mount(8) and umount(8)')\noption('build-swapon', type : 'feature',\n       description : 'build swapon')\noption('build-swapoff', type : 'feature',\n       description : 'build swapoff')\noption('build-chcpu', type : 'feature',\n       description : 'build chcpu')\noption('build-losetup', type : 'feature',\n       description : 'build losetup')\noption('build-zramctl', type : 'feature',\n       description : 'build zramctl')\noption('build-lsns', type : 'feature',\n       description : 'build lsns')\noption('build-mkfs', type : 'feature',\n       description : 'build mkfs')\noption('build-fsck', type : 'feature',\n       description : 'build fsck')\noption('build-partx', type : 'feature',\n       description : 'build addpart, delpart, partx')\noption('build-script', type : 'feature',\n       description : 'build script')\noption('build-scriptutils', type : 'feature',\n       description : 'build scriptutils')\noption('build-bits', type : 'feature',\n       description : 'build bits')\noption('build-col', type : 'feature',\n       description : 'build col')\noption('build-colcrt', type : 'feature',\n       description : 'build colcrt')\noption('build-colrm', type : 'feature',\n       description : 'build colrm')\noption('build-rev', type : 'feature',\n       description : 'build rev')\n\noption('build-uuidd', type : 'feature',\n       description : 'build the uuid daemon')\n\noption('build-choom', type : 'feature',\n       description : 'build choom')\noption('build-isosize', type : 'feature',\n       description : 'build isosize')\noption('build-waitpid', type : 'feature',\n       description : 'build waitpid')\noption('build-wipefs', type : 'feature',\n       description : 'build wipefs')\noption('build-mountpoint', type : 'feature',\n       description : 'build mountpoint')\noption('build-fallocate', type : 'feature',\n       description : 'build fallocate')\noption('build-unshare', type : 'feature',\n       description : 'build unshare')\noption('build-nsenter', type : 'feature',\n       description : 'build nsenter')\noption('build-setpriv', type : 'feature',\n       description : 'build setpriv')\noption('build-hardlink', type : 'feature',\n       description : 'build hardlink')\noption('build-eject', type : 'feature',\n       description : 'build eject')\noption('build-agetty', type : 'feature',\n       description : 'build agetty')\noption('build-cramfs', type : 'feature',\n       description : 'build fsck.cramfs, mkfs.cramfs')\noption('build-bfs', type : 'feature',\n       description : 'build mkfs.bfs')\noption('build-minix', type : 'feature',\n       description : 'build fsck.minix, mkfs.minix')\noption('build-fdformat', type : 'feature', value : 'disabled',\n       description : 'build fdformat')\noption('build-blockdev', type : 'feature',\n       description : 'build blockdev')\noption('build-hwclock', type : 'feature',\n       description : 'build hwclock')\noption('build-lslogins', type : 'feature',\n       description : 'build lslogins')\noption('build-wdctl', type : 'feature',\n       description : 'build wdctl')\noption('build-cal', type : 'feature',\n       description : 'build cal')\noption('build-logger', type : 'feature',\n       description : 'build logger')\noption('build-look', type : 'feature',\n       description : 'build look')\noption('build-mcookie', type : 'feature',\n       description : 'build mcookie')\noption('build-namei', type : 'feature',\n       description : 'build namei')\noption('build-whereis', type : 'feature',\n       description : 'build whereis')\noption('build-lsblk', type : 'feature',\n       description : 'build lsblk')\noption('build-lslocks', type : 'feature',\n       description : 'build lslocks')\noption('build-findmnt', type : 'feature',\n       description : 'build findmnt')\noption('build-lsfd', type : 'feature',\n       description : 'build lsfd')\noption('build-switch_root', type : 'feature',\n       description : 'switch_root')\noption('build-pivot_root', type : 'feature',\n       description : 'build pivot_root')\noption('build-flock', type : 'feature',\n       description : 'build flock')\noption('build-lsmem', type : 'feature',\n       description : 'build lsmem')\noption('build-lsirq', type : 'feature',\n       description : 'build lsirq')\noption('build-irqtop', type : 'feature',\n       description : 'build irqtop')\noption('build-chmem', type : 'feature',\n       description : 'build chmem')\noption('build-ipcmk', type : 'feature',\n       description : 'build ipcmk')\noption('build-ipcrm', type : 'feature',\n       description : 'build ipcrm')\noption('build-ipcs', type : 'feature',\n       description : 'build ipcs')\noption('build-rfkill', type : 'feature',\n       description : 'build rfkill')\noption('build-tunelp', type : 'feature',\n       description : 'build tunelp')\noption('build-fstrim', type : 'feature',\n       description : 'build fstrim')\noption('build-dmesg', type : 'feature',\n       description : 'build dmesg')\noption('build-ctrlaltdel', type : 'feature',\n       description : 'build ctrlaltdel')\noption('build-exch', type : 'feature',\n       description : 'build exch')\noption('build-fsfreeze', type : 'feature',\n       description : 'build fsfreeze')\noption('build-blkdiscard', type : 'feature',\n       description : 'build blkdiscard')\noption('build-blkzone', type : 'feature',\n       description : 'build blkzone')\noption('build-blkpr', type : 'feature',\n       description : 'build blkpr')\noption('build-ldattach', type : 'feature',\n       description : 'build ldattach')\noption('build-rtcwake', type : 'feature',\n       description : 'build rtcwake')\noption('build-setarch', type : 'feature',\n       description : 'build setarch')\noption('build-kill', type : 'feature',\n       description : 'build kill')\noption('build-last', type : 'feature',\n       description : 'build last')\noption('build-utmpdump', type : 'feature',\n       description : 'build utmpdump')\noption('build-line', type : 'feature',\n       description : 'build line')\noption('build-mesg', type : 'feature',\n       description : 'build mesg')\noption('build-raw', type : 'feature', value : 'disabled',\n       description : 'build raw')\noption('build-rename', type : 'feature',\n       description : 'build rename')\noption('build-vipw', type : 'feature',\n       description : 'build vipw')\noption('build-newgrp', type : 'feature',\n       description : 'build newgrp')\noption('build-chfn-chsh', type : 'feature',\n       description : 'build chfn and chsh')\noption('build-login', type : 'feature',\n       description : 'build login')\noption('build-nologin', type : 'feature',\n       description : 'build nologin')\noption('build-sulogin', type : 'feature',\n       description : 'build sulogin')\noption('build-su', type : 'feature',\n       description : 'build su')\noption('build-runuser', type : 'feature',\n       description : 'build runuser')\noption('build-ul', type : 'feature',\n       description : 'build ul')\noption('build-more', type : 'feature',\n       description : 'build more')\noption('build-pg', type : 'feature',\n       description : 'build pg')\noption('build-pipesz', type : 'feature',\n       description : 'build pipesz')\noption('build-fadvise', type : 'feature',\n       description : 'build fadvise')\noption('build-enosys', type : 'feature',\n       description : 'build enosys')\noption('build-lsclocks', type : 'feature',\n       description : 'build lsclocks')\noption('build-getopt', type : 'feature',\n       description : 'build getopt')\noption('build-setterm', type : 'feature',\n       description : 'build setterm')\noption('build-schedutils', type : 'feature',\n       description : 'build chrt, ionice, taskset, coresched')\noption('build-wall', type : 'feature',\n       description : 'build wall')\noption('build-write', type : 'feature',\n       description : 'build write')\noption('build-bash-completion', type : 'feature',\n       description : 'install bash completion files')\noption('build-pylibmount', type : 'feature',\n       description : 'build pylibmount')\noption('build-hexdump', type : 'feature',\n       description : 'build hexdump')\noption('build-findfs', type : 'feature',\n       description : 'build findfs')\n\n# static programs\n\noption('static-programs', type : 'array',\n       value : [],\n       choices : ['losetup', 'mount', 'umount', 'fdisk', 'sfdisk', 'blkid', 'nsenter', 'unshare', 'partx'],\n       description : 'list of programs to also build with static linking')\n\n# feature selection and other configuration\n\noption('program-tests',\n       type: 'boolean', value : true,\n       description : 'build test programs')\n\noption('chfn-chsh-password',\n       type : 'boolean', value : true,\n       description : 'require the user to enter the password in chfn and chsh')\noption('chsh-only-listed',\n       type : 'boolean', value : true,\n       description : 'chsh: only allow shells in /etc/shells')\noption('use-tty-group',\n       type : 'boolean', value : true,\n       description : 'install wall and write setgid tty')\noption('build-plymouth-support',\n       type : 'feature',\n       description : 'support plymouth feature in sulogin and agetty')\noption('use-tls',\n       type : 'boolean', value : true,\n       description : 'use thread-local storage')\noption('pg-bell',\n       type : 'boolean', value : true,\n       description : 'should pg ring the bell on invalid keys?')\noption('colors-default', type: 'boolean', value: true,\n       description: 'Enables colorized output from utils by default')\noption('allow-32bit-time', type: 'boolean', value: false,\n       description: 'Allow 32bit time_t type')\n\noption('fs-search-path',\n       type : 'string',\n       value : '/sbin:/sbin/fs.d:/sbin/fs',\n       description : 'default search path for fs helpers')\noption('fs-search-path-extra',\n       type : 'string',\n       description : 'additional search path for fs helpers')\noption('vendordir',\n       type: 'string',\n       description : 'directory for distribution provided econf files')\n\noption('pamlibdir', type : 'string',\n       description : 'directory for PAM modules')\noption('login-lastlogin', type : 'boolean',\n       value : false,\n       description : 'program login writes lastlog entries')\n\noption('tty-setgid', type : 'boolean',\n       value : true,\n       description : 'setgid tty group for wall and write programs')\n"
        },
        {
          "name": "misc-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "pam_lastlog2",
          "type": "tree",
          "content": null
        },
        {
          "name": "po-man",
          "type": "tree",
          "content": null
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "schedutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "sys-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "term-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "text-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "util-linux.doap",
          "type": "blob",
          "size": 1.4814453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF xml:lang=\"en\"\n         xmlns=\"http://usefulinc.com/ns/doap#\"\n         xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n         xmlns:foaf=\"http://xmlns.com/foaf/0.1/\">\n  <Project rdf:about=\"https://www.kernel.org/pub/linux/utils/util-linux/\">\n    <name>util-linux</name>\n    <homepage rdf:resource=\"https://www.kernel.org/pub/linux/utils/util-linux/\" />\n    <shortdesc>\n      util-linux is a random collection of Linux utilities\n    </shortdesc>\n    <description>\n      util-linux is a random collection of Linux utilities.\n      Note that in years 2006-2010 this project used the name \"util-linux-ng\".\n    </description>\n    <bug-database rdf:resource=\"https://github.com/util-linux/util-linux/issues\" />\n    <mailing-list rdf:resource=\"http://vger.kernel.org/vger-lists.html#util-linux\" />\n    <download-page rdf:resource=\"https://www.kernel.org/pub/linux/utils/util-linux/\" />\n    <programming-language>C</programming-language>\n    <repository>\n      <GitRepository>\n        <location rdf:resource=\"git://git.kernel.org/pub/scm/utils/util-linux/util-linux.git\"/>\n        <browse rdf:resource=\"https://git.kernel.org/cgit/utils/util-linux/util-linux.git\"/>\n      </GitRepository>\n    </repository>\n    <maintainer>\n      <foaf:Person>\n        <foaf:name>Karel Zak</foaf:name>\n        <foaf:mbox rdf:resource=\"mailto:kzak@redhat.com\" />\n      </foaf:Person>\n    </maintainer>\n  </Project>\n</rdf:RDF>\n"
        }
      ]
    }
  ]
}