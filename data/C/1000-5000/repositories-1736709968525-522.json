{
  "metadata": {
    "timestamp": 1736709968525,
    "page": 522,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tezc/sc",
      "stars": 2291,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.1611328125,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -4\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: None\nAlignConsecutiveDeclarations: None\nAlignConsecutiveMacros: None\nAlignEscapedNewlines: Right\nAlignOperands: Align\nAlignTrailingComments: true\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: No\nBinPackArguments: true\nBinPackParameters: true\n\nBraceWrapping:\n  AfterCaseLabel: false\n  AfterClass:      false\n  AfterControlStatement: Never\n  AfterEnum:       true\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 8\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: false\nForEachMacros:\n  - sc_array_foreach\n  - sc_list_foreach\n  - sc_list_foreach_safe\n  - sc_map_foreach\n  - sc_map_foreach_key\n  - sc_map_foreach_value\n  - sc_queue_foreach\nIncludeBlocks: Regroup\nIncludeCategories:\n  - Regex:           '^(\"[.a-zA-Z0-9_-]+\\.h\")'\n    Priority:        1\n\n  # Local headers: \"foo/bar.h\"\n  - Regex:           '^(\"[.a-zA-Z0-9_/-]+\\.h\")'\n    Priority:        2\n\n  # C Header: <foo.h>, <net/foo.h>, etc\n  - Regex:           '^(<[.a-zA-Z0-9_/-]+\\.h>)'\n    Priority:        3\n\nIncludeIsMainRegex: '(Test)?$'\nIndentPPDirectives: None\nIndentGotoLabels: false\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentWidth: 8\nIndentWrappedFunctionNames: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\n\nPenaltyBreakAssignment: 10\nPenaltyBreakBeforeFirstCallParameter: 30\nPenaltyBreakComment: 10\nPenaltyBreakFirstLessLess: 0\nPenaltyBreakString: 10\nPenaltyExcessCharacter: 100\nPenaltyReturnTypeOnItsOwnLine: 60\n\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    CaseSensitive\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: true\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: false\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Latest\nTabWidth: 8\nUseTab: Always\n...\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0224609375,
          "content": "*.h linguist-language=C"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4482421875,
          "content": "# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n**/build*\n**/cmake*\n*.idea*\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.37890625,
          "content": "cmake_minimum_required(VERSION 3.5.1)\nproject(sc_lib C)\ninclude(CTest)\ninclude(CheckCCompilerFlag)\n\nenable_testing()\n\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Debug\")\nendif ()\n\nmessage(STATUS \"Build type ${CMAKE_BUILD_TYPE}\")\n\noption(SC_BUILD_TEST \"Build tests\" ON)\nif (NOT SC_BUILD_TEST)\n    message(STATUS \"Turned off building tests because SC is a subproject.\")\n    message(STATUS \"Turned off coverage because SC is a subproject.\")\nendif ()\n\nif (NOT ${CMAKE_BUILD_TYPE} MATCHES \"Debug\" AND NOT ${CMAKE_BUILD_TYPE} MATCHES \"Coverage\")\n    SET(SC_BUILD_TEST OFF CACHE BOOL \"Turn off sc_lib tests\" FORCE)\n    message(STATUS \"Not building tests, SC tests are supported in Debug build only.\")\nendif ()\n\noption(SC_USE_WRAP \"Use --wrap to test libc function failures\" ON)\nif (NOT SC_USE_WRAP)\n    message(STATUS \"Turned off --wrap.\")\nendif()\n\nadd_subdirectory(array)\nadd_subdirectory(buffer)\nadd_subdirectory(condition)\nadd_subdirectory(crc32)\nadd_subdirectory(heap)\nadd_subdirectory(ini)\nadd_subdirectory(linked-list)\nadd_subdirectory(logger)\nadd_subdirectory(map)\nadd_subdirectory(memory-map)\nadd_subdirectory(mutex)\nadd_subdirectory(option)\nadd_subdirectory(queue)\nadd_subdirectory(perf)\nadd_subdirectory(sc)\nadd_subdirectory(signal)\nadd_subdirectory(socket)\nadd_subdirectory(string)\nadd_subdirectory(time)\nadd_subdirectory(timer)\nadd_subdirectory(thread)\nadd_subdirectory(uri)\n\n# --------------------------------------------------------------------------- #\n# --------------------- Test Configuration Start ---------------------------- #\n# --------------------------------------------------------------------------- #\nif (SC_BUILD_TEST)\n    # ----------------------- - Code Coverage Start ----------------------------- #\n\n    if (${CMAKE_BUILD_TYPE} MATCHES \"Coverage\")\n        if (\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\")\n            add_compile_options(--coverage)\n            link_libraries(gcov)\n        else ()\n            message(FATAL_ERROR \"Only GCC is supported for coverage\")\n        endif ()\n    endif ()\n\n    add_custom_target(coverage)\n    add_custom_command(\n            TARGET coverage\n            COMMAND lcov --capture --directory .\n            --output-file coverage.info --rc lcov_branch_coverage=1 --rc lcov_excl_br_line='assert'\n            COMMAND lcov --remove coverage.info '/usr/*' '*example*' '*test*'\n            --output-file coverage.info --rc lcov_branch_coverage=1 --rc lcov_excl_br_line='assert'\n            COMMAND lcov --list coverage.info --rc lcov_branch_coverage=1 --rc lcov_excl_br_line='assert'\n    )\n\n    # -------------------------- Code Coverage End ------------------------------ #\n\n    SET(MEMORYCHECK_COMMAND_OPTIONS\n            \"-q --log-fd=2 --trace-children=yes --track-origins=yes       \\\n           --leak-check=full --show-leak-kinds=all \\\n           --error-exitcode=255\")\n\n    add_custom_target(valgrind ${CMAKE_COMMAND}\n            -E env CTEST_OUTPUT_ON_FAILURE=1\n            ${CMAKE_CTEST_COMMAND} -C $<CONFIG>\n            --overwrite MemoryCheckCommandOptions=${MEMORYCHECK_COMMAND_OPTIONS}\n            --verbose -T memcheck WORKING_DIRECTORY ${CMAKE_BINARY_DIR})\n\n    add_custom_target(check ${CMAKE_COMMAND}\n            -E env CTEST_OUTPUT_ON_FAILURE=1\n            ${CMAKE_CTEST_COMMAND} -C $<CONFIG> --verbose\n            WORKING_DIRECTORY ${CMAKE_BINARY_DIR})\n\n    add_dependencies(coverage check)\n\nendif ()\n# ----------------------- Test Configuration End ---------------------------- #\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4697265625,
          "content": "\nBSD-3-Clause\n\nCopyright 2021 Ozan Tezcan\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.5537109375,
          "content": "## Overview\n\n[![License: BSD](https://img.shields.io/badge/License-BSD-blue.svg)](https://opensource.org/licenses/bsd-3-clause)\n[![codecov](https://codecov.io/gh/tezc/sc/branch/master/graph/badge.svg?token=O8ZHQ0XZ30)](https://codecov.io/gh/tezc/sc)\n\nPortable, stand-alone C libraries and data structures. (C99)\n\nEach folder is stand-alone with a single header/source pair in it. There is no  \nbuild for libraries, just copy files you want. \n\ne.g., If you want the logger, copy sc_log.h and sc_log.c to your project.\n\n#### Features\n\n- High performance & minimal memory usage\n- Portability between many operating systems and architectures\n- Tests with 100% branch coverage and multiple sanitizers\n- Drag & drop source code distribution\n\n### Test\nThere is 100% branch-coverage on Linux and CI runs on\n\n<pre>\nOS         : Linux, MacOS, FreeBSD and Windows  \nCompilers  : GCC, Clang, MSVC  \nArch       : x64, aarch64, armv6(32 bit), armv7(32 bit), ppc64le, s390x(big endian), riscv64  \nSanitizers : valgrind and clang/gcc sanitizers(address, undefined, thread)\n</pre>\n\n### List\n\n| Library                        | Description                                                                                 |\n|--------------------------------|---------------------------------------------------------------------------------------------|\n| **[array](array)**             | Generic array/vector                                                                        |\n| **[buffer](buffer)**           | Buffer for encoding/decoding variables, best fit for protocol/serialization implementations |\n| **[condition](condition)**     | Condition wrapper for Posix and Windows                                                     |\n| **[crc32](crc32)**             | Crc32c, uses crc32c CPU instruction if available                                            |\n| **[heap](heap)**               | Min heap which can be used as max heap/priority queue as well                               | \n| **[ini](ini)**                 | Ini parser                                                                                  |\n| **[linked list](linked-list)** | Intrusive linked list                                                                       |\n| **[logger](logger)**           | Logger                                                                                      |\n| **[map](map)**                 | A high performance open addressing hashmap                                                  |\n| **[memory map](memory-map)**   | Mmap wrapper for Posix and Windows                                                          |\n| **[mutex](mutex)**             | Mutex wrapper for Posix and Windows                                                         |\n| **[option](option)**           | Cmdline argument parser. Very basic one                                                     |\n| **[perf](perf)**               | Benchmark utility to get performance counters info via perf_event_open()                    | \n| **[queue](queue)**             | Generic queue which can be used as dequeue/stack/list as well                               |\n| **[sc](sc)**                   | Utility functions                                                                           |\n| **[signal](signal)**           | Signal safe snprintf & Signal handler (handling CTRL+C, printing backtrace on crash etc)    |\n| **[socket](socket)**           | Pipe / tcp sockets(also unix domain sockets) /Epoll/Kqueue/WSAPoll for Posix and Windows    |\n| **[string](string)**           | Length prefixed, null terminated C strings.                                                 |\n| **[thread](thread)**           | Thread wrapper for Posix and Windows.                                                       |\n| **[time](time)**               | Time and sleep functions for Posix and Windows                                              |\n| **[timer](timer)**             | Hashed timing wheel implementation with fast poll / cancel ops                              |\n| **[uri](uri)**                 | A basic uri parser                                                                          |\n  \n-\n\n#### Q&A\n\n-----\n* **Is it any better than library X ?**  \n  I often use these libraries for high performance server-side applications. Also,  \n  I care about readable and easy to debug code. In summary, these libraries show  \n  my taste(trade-offs) about performance/api-design/readability. You may or may  \n  not like it.\n\n\n* **Why don't you change API here at X, so it will be easier to use?**  \n  Send a pull request please but be sure you don't introduce an undefined  \n  behavior. It's possible to provide better APIs, especially to generic libraries,  \n  if you don't care about undefined behaviors. I try to avoid it.\n\n\n* **What is the most efficient way to use these libraries?**  \n  Just like any other code. Add to your project as source files and ideally use   \n  -O3 -flto + PGO. It may not make any difference for your use case though.\n\n\n* **Is library X being used in any product?**  \n  Some libraries are used in the production but please always test yourself.\n\n\n* **Is there any release?**   \n  Please use the master branch. It's considered stable.\n\n\n* **Will you keep API stable?**   \n  Please don't expect a stable API. These libraries are quite  \n  small (most of them are less than a few hundreds lines of code) and ideally you  \n  are supposed to read the code and understand what it does and adapt it to your   \n  needs. So, you should not update libraries blindly. I expect you to handle  \n  any possible API differences easily. That being said, I'll do my best to keep  \n  API stable."
        },
        {
          "name": "array",
          "type": "tree",
          "content": null
        },
        {
          "name": "buffer",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.474609375,
          "content": "codecov:\n  require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"70...100\"\n  status:\n    project:\n      default:\n        # basic\n        target: auto\n        threshold: 90%\n    patch:\n      default:\n        # basic\n        target: auto\n        threshold: 90%\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\ncomment:\n  layout: \"reach,diff,flags,files,footer\"\n  behavior: default\n  require_changes: no\n\n"
        },
        {
          "name": "condition",
          "type": "tree",
          "content": null
        },
        {
          "name": "crc32",
          "type": "tree",
          "content": null
        },
        {
          "name": "heap",
          "type": "tree",
          "content": null
        },
        {
          "name": "ini",
          "type": "tree",
          "content": null
        },
        {
          "name": "linked-list",
          "type": "tree",
          "content": null
        },
        {
          "name": "logger",
          "type": "tree",
          "content": null
        },
        {
          "name": "map",
          "type": "tree",
          "content": null
        },
        {
          "name": "memory-map",
          "type": "tree",
          "content": null
        },
        {
          "name": "mutex",
          "type": "tree",
          "content": null
        },
        {
          "name": "option",
          "type": "tree",
          "content": null
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "queue",
          "type": "tree",
          "content": null
        },
        {
          "name": "sc",
          "type": "tree",
          "content": null
        },
        {
          "name": "signal",
          "type": "tree",
          "content": null
        },
        {
          "name": "socket",
          "type": "tree",
          "content": null
        },
        {
          "name": "string",
          "type": "tree",
          "content": null
        },
        {
          "name": "thread",
          "type": "tree",
          "content": null
        },
        {
          "name": "time",
          "type": "tree",
          "content": null
        },
        {
          "name": "timer",
          "type": "tree",
          "content": null
        },
        {
          "name": "uri",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}