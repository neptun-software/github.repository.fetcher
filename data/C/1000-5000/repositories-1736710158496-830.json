{
  "metadata": {
    "timestamp": 1736710158496,
    "page": 830,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "LIJI32/SameBoy",
      "stars": 1729,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# Always use LF line endings for shaders\n*.fsh text eol=lf\n*.metal text eol=lf\n\nHexFiend/* linguist-vendored\n*.inc linguist-language=C\nCore/*.h linguist-language=C\nSDL/*.h linguist-language=C\nWindows/*.h linguist-language=C\nXdgThumbnailer/*.h linguist-language=C\nCocoa/*.h linguist-language=Objective-C\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": "build"
        },
        {
          "name": "AppleCommon",
          "type": "tree",
          "content": null
        },
        {
          "name": "BESS.md",
          "type": "blob",
          "size": 19.365234375,
          "content": "# BESS – Best Effort Save State 1.0\n\n## Motivation\n\nBESS is a save state format specification designed to allow different emulators, as well as majorly different versions of the same emulator, to import save states from other BESS-compliant save states. BESS works by appending additional, implementation-agnostic information about the emulation state. This allows a single save state file to be read as both a fully-featured, implementation specific save state which includes detailed timing information; and as a portable \"best effort\" save state that represents a state accurately enough to be restored in casual use-cases.\n\n## Specification\n\nEvery integer used in the BESS specification is stored in Little Endian encoding.\n\n### BESS footer\n\nBESS works by appending a detectable footer at the end of an existing save state format. The footer uses the following format:\n\n| Offset from end of file | Content                                               |\n|-------------------------|-------------------------------------------------------|\n| -8                      | Offset to the first BESS Block, from the file's start |\n| -4                      | The ASCII string 'BESS'                               |\n\n### BESS blocks\n\nBESS uses a block format where each block contains the following header:\n\n| Offset | Content                               |\n|--------|---------------------------------------|\n| 0      | A four-letter ASCII identifier        |\n| 4      | Length of the block, excluding header |\n\nEvery block is followed by another block, until the END block is reached. If an implementation encounters an unsupported block, it should be completely ignored (Should not have any effect and should not trigger a failure). \n\n#### NAME block\n\nThe NAME block uses the `'NAME'` identifier, and is an optional block that contains the name of the emulator that created this save state. While optional, it is highly recommended to be included in every implementation – it allows the user to know which emulator and version is compatible with the native save state format contained in this file. When used, this block should come first.\n\nThe length of the NAME block is variable, and it only contains the name and version of the originating emulator in ASCII.\n\n\n#### INFO block\n\nThe INFO block uses the `'INFO'` identifier, and is an optional block that contains information about the ROM this save state originates from. When used, this block should come before `CORE` but after `NAME`. This block is 0x12 bytes long, and it follows this structure:\n\n| Offset | Content                                          |\n|--------|--------------------------------------------------|\n| 0x00   | Bytes 0x134-0x143 from the ROM (Title)           |\n| 0x10   | Bytes 0x14E-0x14F from the ROM (Global checksum) |\n\n#### CORE block\n\nThe CORE block uses the `'CORE'` identifier, and is a required block that contains both core state information, as well as basic information about the BESS version used. This block must be the first block, unless the `NAME` or `INFO` blocks exist then it must come directly after them. An implementation should not enforce block order on blocks unknown to it for future compatibility.\n\nThe length of the CORE block is 0xD0 bytes, but implementations are expected to ignore any excess bytes. Following the BESS block header, the structure is as follows:\n\n| Offset | Content                                |\n|--------|----------------------------------------|\n| 0x00   | Major BESS version as a 16-bit integer |\n| 0x02   | Minor BESS version as a 16-bit integer |\n\nBoth major and minor versions should be 1. Implementations are expected to reject incompatible majors, but still attempt to read newer minor versions.\n\n| Offset | Content                                |\n|--------|----------------------------------------|\n| 0x04   | A four-character ASCII model identifier |\n\nBESS uses a four-character string to identify Game Boy models:\n\n * The first letter represents mutually-incompatible families of models and is required. The allowed values are `'G'` for the original Game Boy family, `'S'` for the Super Game Boy family, and `'C'` for the Game Boy Color and Advance family.\n* The second letter represents a specific model within the family, and is optional (If an implementation does not distinguish between specific models in a family, a space character may be used). The allowed values for family G are `'D'` for DMG and `'M'` for MGB; the allowed values for family S are `'N'` for NTSC, `'P'` for PAL, and `'2'` for SGB2; and the allowed values for family C are `'C'` for CGB, and `'A'` for the various GBA line models.\n* The third letter represents a specific CPU revision within a model, and is optional (If an implementation does not distinguish between revisions, a space character may be used). The allowed values for model GD (DMG) are `'0'` and `'A'`, through `'C'`; the allowed values for model CC (CGB) are `'0'` and `'A'`, through `'E'`; the allowed values for model CA (AGB, AGS, GBP) are `'0'`, `'A'` and `'B'`; and for every other model this value must be a space character.\n* The last character is used for padding and must be a space character.\n\nFor example; `'GD  '` represents a DMG of an unspecified revision, `'S   '` represents some model of the SGB family, and `'CCE '` represent a CGB using CPU revision E.\n\n| Offset | Content                                                |\n|--------|--------------------------------------------------------|\n| 0x08   | The value of the PC register                           |\n| 0x0A   | The value of the AF register                           |\n| 0x0C   | The value of the BC register                           |\n| 0x0E   | The value of the DE register                           |\n| 0x10   | The value of the HL register                           |\n| 0x12   | The value of the SP register                           |\n| 0x14   | The value of IME (0 or 1)                              |\n| 0x15   | The value of the IE register                           |\n| 0x16   | Execution state (0 = running; 1 = halted; 2 = stopped) |\n| 0x17   | Reserved, must be 0                                    |\n| 0x18   | The values of every memory-mapped register (128 bytes) |\n\nThe values of memory-mapped registers should be written 'as-is' to memory as if the actual ROM wrote them, with the following exceptions and note:\n* Unused registers have Don't-Care values which should be ignored\n* Unused register bits have Don't-Care values which should be ignored\n* If the model is CGB or newer, the value of KEY0 (FF4C) must be valid as it determines DMG mode\n    * Bit 2 determines DMG mode. A value of 0x04 usually denotes DMG mode, while a value of `0x80` usually denotes CGB mode.\n* Object priority is derived from KEY0 (FF4C) instead of OPRI (FF6C) because OPRI can be modified after booting, but only the value of OPRI during boot ROM execution takes effect\n* If a register doesn't exist on the emulated model (For example, KEY0 (FF4C) on a DMG), its value should be ignored.\n* BANK (FF50) should be 0 if the boot ROM is still mapped, and 1 otherwise, and must be valid.\n* Implementations should not start a serial transfer when writing the value of SB\n* Similarly, no value of NRx4 should trigger a sound pulse on save state load\n* And similarly again, implementations should not trigger DMA transfers when writing the values of DMA or HDMA5\n* The value store for DIV will be used to set the internal divisor to `DIV << 8`\n* Implementation should apply care when ordering the write operations (For example, writes to NR52 must come before writes to the other APU registers)\n\n| Offset | Content                                                            |\n|--------|--------------------------------------------------------------------|\n| 0x98   | The size of RAM (32-bit integer)                                   |\n| 0x9C   | The offset of RAM from file start (32-bit integer)                 |\n| 0xA0   | The size of VRAM (32-bit integer)                                  |\n| 0xA4   | The offset of VRAM from file start (32-bit integer)                |\n| 0xA8   | The size of MBC RAM (32-bit integer)                               |\n| 0xAC   | The offset of MBC RAM from file start (32-bit integer)             |\n| 0xB0   | The size of OAM (=0xA0, 32-bit integer)                            |\n| 0xB4   | The offset of OAM from file start (32-bit integer)                 |\n| 0xB8   | The size of HRAM (=0x7F, 32-bit integer)                           |\n| 0xBC   | The offset of HRAM from file start (32-bit integer)                |\n| 0xC0   | The size of background palettes (=0x40 or 0, 32-bit integer)       |\n| 0xC4   | The offset of background palettes from file start (32-bit integer) |\n| 0xC8   | The size of object palettes (=0x40 or 0, 32-bit integer)           |\n| 0xCC   | The offset of object palettes from file start (32-bit integer)     |\n\nThe contents of large buffers are stored outside of BESS structure so data from an implementation's native save state format can be reused. The offsets are absolute offsets from the save state file's start. Background and object palette sizes must be 0 for models prior to Game Boy Color.\n\nAn implementation needs handle size mismatches gracefully. For example, if too large MBC RAM size is specified, the superfluous data should be ignored. On the other hand, if a too small VRAM size is specified (For example, if it's a save state from an emulator emulating a CGB in DMG mode, and it didn't save the second CGB VRAM bank), the implementation is expected to set that extra bank to all zeros.\n\n#### XOAM block\n\nThe XOAM block uses the `'XOAM'` identifier, and is an optional block that contains the data of extra OAM (addresses `0xFEA0-0xFEFF`). This block length must be `0x60`. Implementations that do not emulate this extra range are free to ignore the excess bytes, and to not create this block.\n\n\n#### MBC block\n\nThe MBC block uses the `'MBC '` identifier, and is an optional block that is only used when saving states of ROMs that use an MBC. The length of this block is variable and must be divisible by 3.\n\nThis block contains an MBC-specific number of 3-byte-long pairs that represent the values of each MBC register. For example, for MBC5 the contents would look like:\n\n| Offset | Content                               |\n|--------|---------------------------------------|\n| 0x0    | The value 0x0000 as a 16-bit integer  |\n| 0x2    | 0x0A if RAM is enabled, 0 otherwise   |\n| 0x3    | The value 0x2000 as a 16-bit integer  |\n| 0x5    | The lower 8 bits of the ROM bank      |\n| 0x6    | The value 0x3000 as a 16-bit integer  |\n| 0x8    | The bit 9 of the ROM bank             |\n| 0x9    | The value 0x4000 as a 16-bit integer  |\n| 0xB    | The current RAM bank                  |\n\nAn implementation should parse this block as a series of writes to be made. Values outside the `0x0000-0x7FFF` and `0xA000-0xBFFF`  ranges are not allowed. Implementations must perform the writes in order (i.e. not reverse, sorted, or any other transformation on their order)\n\n#### RTC block\nThe RTC block uses the `'RTC '` identifier, and is an optional block that is used while emulating an MBC3 with an RTC. The contents of this block are identical to 64-bit RTC saves from VBA, which are also used by SameBoy and different emulators such as BGB.\n\nThe length of this block is 0x30 bytes long and it follows the following structure:\n\n| Offset | Content                                                                |\n|--------|------------------------------------------------------------------------|\n| 0x00   | Current seconds (1 byte), followed by 3 bytes of padding               |\n| 0x04   | Current minutes (1 byte), followed by 3 bytes of padding               |\n| 0x08   | Current hours (1 byte), followed by 3 bytes of padding                 |\n| 0x0C   | Current days (1 byte), followed by 3 bytes of padding                  |\n| 0x10   | Current high/overflow/running (1 byte), followed by 3 bytes of padding |\n| 0x14   | Latched seconds (1 byte), followed by 3 bytes of padding               |\n| 0x18   | Latched minutes (1 byte), followed by 3 bytes of padding               |\n| 0x1C   | Latched hours (1 byte), followed by 3 bytes of padding                 |\n| 0x20   | Latched days (1 byte), followed by 3 bytes of padding                  |\n| 0x24   | Latched high/overflow/running (1 byte), followed by 3 bytes of padding |\n| 0x28   | UNIX timestamp at the time of the save state (64-bit)                  |\n\n#### HUC3 block\nThe HUC3 block uses the `'HUC3'` identifier, and is an optional block that is used while emulating an HuC3 cartridge to store RTC and alarm information. The contents of this block are identical to HuC3 RTC saves from SameBoy.\n\nThe length of this block is 0x11 bytes long and it follows the following structure:\n\n| Offset | Content                                               |\n|--------|-------------------------------------------------------|\n| 0x00   | UNIX timestamp at the time of the save state (64-bit) |\n| 0x08   | RTC minutes (16-bit)                                  |\n| 0x0A   | RTC days (16-bit)                                     |\n| 0x0C   | Scheduled alarm time minutes (16-bit)                 |\n| 0x0E   | Scheduled alarm time days (16-bit)                    |\n| 0x10   | Alarm enabled flag (8-bits, either 0 or 1)            |\n\n#### TPP1 block\nThe TPP1 block uses the `'TPP1'` identifier, and is an optional block that is used while emulating a TPP1 cartridge to store RTC information. This block can be omitted if the ROM header does not specify the inclusion of a RTC.\n\nThe length of this block is 0x11 bytes long and it follows the following structure:\n\n| Offset | Content                                               |\n|--------|-------------------------------------------------------|\n| 0x00   | UNIX timestamp at the time of the save state (64-bit) |\n| 0x08   | The current RTC data (4 bytes)                        |\n| 0x0C   | The latched RTC data (4 bytes)                        |\n| 0x10   | The value of the MR4 register (8-bits)                |\n\n\n#### MBC7 block\nThe MBC7 block uses the `'MBC7'` identifier, and is an optional block that is used while emulating an MBC7 cartridge to store the EEPROM communication state and motion control state.\n\nThe length of this block is 0xA bytes long and it follows the following structure:\n\n| Offset | Content                                               |\n|--------|-------------------------------------------------------|\n| 0x00   | Flags (8-bits)                                        |\n| 0x01   | Argument bits left (8-bits)                           |\n| 0x02   | Current EEPROM command (16-bits)                      |\n| 0x04   | Pending bits to read (16-bits)                        |\n| 0x06   | Latched gyro X value (16-bits)                        |\n| 0x08   | Latched gyro Y value (16-bits)                        |\n\nThe meaning of the individual bits in flags are:\n * Bit 0: Latch ready; set after writing `0x55` to `0xAX0X` and reset after writing `0xAA` to `0xAX1X`\n * Bit 1: EEPROM DO line\n * Bit 2: EEPROM DI line\n * Bit 3: EEPROM CLK line\n * Bit 4: EEPROM CS line\n * Bit 5: EEPROM write enable; set after an `EWEN` command, reset after an `EWDS` command\n * Bits 6-7: Unused.\n\nThe current EEPROM command field has bits pushed to its LSB first, padded with zeros. For example, if the ROM clocked a single `1` bit, this field should contain `0b1`; if the ROM later clocks a `0` bit, this field should contain `0b10`.\n\nIf the currently transmitted command has an argument, the \"Argument bits left\" field should contain the number argument bits remaining. Otherwise, it should contain 0.\n\nThe \"Pending bits to read\" field contains the pending bits waiting to be shifted into the DO signal, MSB first, padded with ones.\n\n#### SGB block\n\nThe SGB block uses the `'SGB '` identifier, and is an optional block that is only used while emulating an SGB or SGB2 *and* SGB commands enabled. Implementations must not save this block on other models or when SGB commands are disabled, and should assume SGB commands are disabled if this block is missing.\n\nThe length of this block is 0x39 bytes, but implementations should allow and ignore excess data in this block for extensions. The block follows the following structure:\n\n| Offset | Content                                                                                                                  |\n|--------|--------------------------------------------------------------------------------------------------------------------------|\n| 0x00   | The size of the border tile data (=0x2000, 32-bit integer)                                                               |\n| 0x04   | The offset of the border tile data (SNES tile format, 32-bit integer)                                                    |\n| 0x08   | The size of the border tilemap (=0x800, 32-bit integer)                                                                  |\n| 0x0C   | The offset of the border tilemap (LE 16-bit sequences, 32-bit integer)                                                   |\n| 0x10   | The size of the border palettes (=0x80, 32-bit integer)                                                                  |\n| 0x14   | The offset of the border palettes (LE 16-bit sequences, 32-bit integer)                                                  |\n| 0x18   | The size of active colorization palettes (=0x20, 32-bit integer)                                                         |\n| 0x1C   | The offset of the active colorization palettes (LE 16-bit sequences, 32-bit integer)                                     |\n| 0x20   | The size of RAM colorization palettes (=0x1000, 32-bit integer)                                                          |\n| 0x24   | The offset of the RAM colorization palettes (LE 16-bit sequences, 32-bit integer)                                        |\n| 0x28   | The size of the attribute map (=0x168, 32-bit integer)                                                                   |\n| 0x2C   | The offset of the attribute map (32-bit integer)                                                                         |\n| 0x30   | The size of the attribute files (=0xfd2, 32-bit integer)                                                                 |\n| 0x34   | The offset of the attribute files (32-bit integer)                                                                       |\n| 0x38   | Multiplayer status (1 byte); high nibble is player count (1, 2 or 4), low nibble is current player (Where Player 1 is 0) |\n\nIf only some of the size-offset pairs are available (for example, partial HLE SGB implementation), missing fields are allowed to have 0 as their size, and implementations are expected to fall back to a sane default.\n\n#### END block\nThe END block uses the `'END '` identifier, and is a required block that marks the end of BESS data. Naturally, it must be the last block. The length of the END block must be 0.\n\n## Validation and Failures\n\nOther than previously specified required fail conditions, an implementation is free to decide what format errors should abort the loading of a save file. Structural errors (e.g. a block with an invalid length, a file offset that is outside the file's range, or a missing END block) should be considered as irrecoverable errors. Other errors that are considered fatal by SameBoy's implementation:\n* Duplicate CORE block\n* A known block, other than NAME, appearing before CORE\n* An invalid length for the XOAM, RTC, SGB or HUC3 blocks\n* An invalid length of MBC (not a multiple of 3)\n* A write outside the $0000-$7FFF and $A000-$BFFF ranges in the MBC block\n* An SGB block on a save state targeting another model\n* An END block with non-zero length"
        },
        {
          "name": "BootROMs",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 0.0390625,
          "content": "See https://sameboy.github.io/changelog/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.63671875,
          "content": "# SameBoy Coding and Contribution Guidelines\n\n## Issues\n\nGitHub Issues are the most effective way to report a bug or request a feature in SameBoy. When reporting a bug, make sure you use the latest stable release, and make sure you mention the SameBoy frontend (Cocoa, SDL, Libretro) and operating system you're using. If you're using Linux/BSD/etc, or you build your own copy of SameBoy for another reason, give as much details as possible on your environment.\n\nIf your bug involves a crash, please attach a crash log or a core dump. If you're using Linux/BSD/etc, or if you're using the Libretro core, please attach the `sameboy` binary (or `libretro_sameboy` library) in that case.\n\nIf your bug is a regression, it'd be extremely helpful if you can report the the first affected version. You get extra credits if you use `git bisect` to point the exact breaking commit.\n\nIf your bug is an emulation bug (Such as a failing test ROM), and you have access to a Game Boy you can test on, please confirm SameBoy is indeed behaving differently from hardware, and report both the emulated model and revision in SameBoy, and the hardware revision you're testing on.\n\nIf your issue is a feature request, demonstrating use cases can help me better prioritize it.\n\n## Pull Requests\n\nTo allow quicker integration into SameBoy's master branch, contributors are asked to follow SameBoy's style and coding guidelines. Keep in mind that despite the seemingly strict guidelines, all pull requests are welcome – not following the guidelines does not mean your pull request will not be accepted, but it will require manual tweaks from my side for integrating.\n\n### Languages and Compilers\n\nSameBoy's core, SDL frontend, Libretro frontend, and automatic tester (Folders `Core`, `SDL` & `OpenDialog`, `libretro`, and `Tester`; respectively) are all written in C11. The Cocoa frontend, SameBoy's fork of Hex Fiend, JoyKit and the Quick Look previewer (Folders `Cocoa`, `HexFiend`, `JoyKit` and `QuickLook`; respectively) are all written in ARC-enabled Objective-C. The SameBoot ROMs (Under `BootROMs`) are written in rgbds-flavor SM83 assembly, with build tools in C11. The shaders (inside `Shaders`) are written in a polyglot GLSL and Metal style, with a few GLSL- and Metal-specific sources. The build system uses standalone Make, in the GNU flavor. Avoid adding new languages (C++, Swift, Python, CMake...) to any of the existing sub-projects.\n\nSameBoy's main target compiler is Clang, but GCC is also supported when targeting Linux and Libretro. Other compilers (e.g. MSVC) are not supported, and unless there's a good reason, there's no need to go out of your way to add specific support for them. Extensions that are supported by both compilers (Such as `typeof`) may be used if it makes sense. It's OK if you can't test one of these compilers yourself; once you push a commit, the CI bot will let you know if you broke something.\n\n### Third Party Libraries and Tools\n\nAvoid adding new required dependencies; run-time and compile-time dependencies alike. Most importantly, avoid linking against GPL licensed libraries (LGPL libraries are fine), so SameBoy can retain its Expat license.\n\n### Spacing, Indentation and Formatting\n\nIn all files and languages (Other than Makefiles when required), 4 spaces are used for indentation. Unix line endings (`\\n`) are used exclusively, even in Windows-specific source files. (`\\r` and `\\t` shouldn't appear in any source file). Opening braces belong on the same line as their control flow directive, and on their own line when following a function prototype. The `else` keyword always starts on its own line. The `case` keyword is indented relative to its `switch` block, and the code inside a `case` is indented relative to its label. A control flow keyword should have a space between it and the following `(`, commas should follow a space, and operator (except `.` and `->`) should be surrounded by spaces.\n\nControl flow statements must use `{}`, with the exception of `if` statements that only contain a single `break`, `continue`, or trivial `return` statements. If `{}`s are omitted, the statement must be on the same line as the `if` condition. Functions that do not have any argument must be specified as `(void)`, as mandated by the C standard. The `sizeof` and `typeof` operators should be used as if they're functions (With `()`). `*`, when used to declare pointer types (including functions that return pointers), and when used to dereference a pointer, is attached to the right side (The variable name) – not to the left, and not with spaces on both sides.\n\nNo strict limitations on a line's maximum width, but use your best judgement if you think a statement would benefit from an additional line break.\n\nWell formatted code example:\n\n```\nstatic void my_function(void)\n{\n    GB_something_t *thing = GB_function(&gb, GB_FLAG_ONE | GB_FLAG_TWO, sizeof(thing));\n    if (GB_is_thing(thing)) return;\n    \n    switch (*thing) {\n        case GB_QUACK:\n            // Something\n        case GB_DUCK:\n            // Something else\n    }\n}\n```\n\nBadly formatted code example:\n```\nstatic void my_function(){\n        GB_something_t* thing=GB_function(&gb , GB_FLAG_ONE|GB_FLAG_TWO , sizeof thing);\n        if( GB_is_thing ( thing ) )\n                return;\n\n        switch(* thing)\n        {\n        case GB_QUACK:\n                // Something\n        case GB_DUCK:\n                // Something else\n        }\n}\n```\n\n### Other Coding Conventions\n\nThe primitive types to be used in SameBoy are `unsigned` and `signed` (Without the `int` keyword), the `(u)int*_t` types, `char *` for UTF-8 strings, `double` for non-integer numbers, and `bool` for booleans (Including in Objective-C code, avoid `BOOL`). As long as it's not mandated by a 3rd-party API (e.g. `int` when using file descriptors), avoid using other primitive types. Use `const` whenever possible. \n\nMost C names should be `lower_case_snake_case`. Constants and macros use `UPPER_CASE_SNAKE_CASE`. Type definitions use a `_t` suffix. Type definitions, as well as non-static (exported) core symbols, should be prefixed with `GB_` (SameBoy's core is intended to be used as a library, so it shouldn't contaminate the global namespace without prefixes). Exported symbols that are only meant to be used by other parts of the core should still get the `GB_` prefix, but their header definition should be inside `#ifdef GB_INTERNAL`.\n\nFor Objective-C naming conventions, use Apple's conventions (Some old Objective-C code mixes these with the C naming convention; new code should use Apple's convention exclusively). The name prefix for SameBoy classes and constants is `GB`. JoyKit's prefix is `JOY`, and Hex Fiend's prefix is `HF`.\n\nIn all languages, prefer long, unambiguous names over short ambiguous ones.\n"
        },
        {
          "name": "Cocoa",
          "type": "tree",
          "content": null
        },
        {
          "name": "Core",
          "type": "tree",
          "content": null
        },
        {
          "name": "FreeDesktop",
          "type": "tree",
          "content": null
        },
        {
          "name": "HexFiend",
          "type": "tree",
          "content": null
        },
        {
          "name": "JoyKit",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4599609375,
          "content": "  All files and directories in this repository, except for the iOS and HexFiend\n  directories, are licensed under the Expat License:\n  \nExpat License\n\nCopyright (c) 2015-2024 Lior Halphon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n  \n  The files contained under the iOS directory in this repository are subject to\n  this addition condition:\n  \n  A written permission from Lior Halphon is required to distribute copies or\n  substantial portions of the Software in a digital marketplace, such as\n  Apple's App Store."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 32.853515625,
          "content": "# Make hacks\n.INTERMEDIATE:\n\n# Set target, configuration, version and destination folders\n\nPLATFORM := $(shell uname -s)\nifneq ($(findstring MINGW,$(PLATFORM)),)\nPLATFORM := windows32\nUSE_WINDRES := true\nendif\n\nifneq ($(findstring MSYS,$(PLATFORM)),)\nPLATFORM := windows32\nendif\n\nDL_EXT := so\n\nifeq ($(PLATFORM),windows32)\n_ := $(shell chcp 65001)\nEXESUFFIX:=.exe\nNATIVE_CC = clang -IWindows -Wno-deprecated-declarations --target=x86_64-pc-windows\nSDL_AUDIO_DRIVERS ?= xaudio2 sdl\nelse\nEXESUFFIX:=\nNATIVE_CC := cc\nSDL_AUDIO_DRIVERS ?= sdl\nendif\n\nPB12_COMPRESS := build/pb12$(EXESUFFIX)\n\nifeq ($(PLATFORM),Darwin)\nDEFAULT := cocoa\nENABLE_OPENAL ?= 1\nDL_EXT := dylib\nelse\nDEFAULT := sdl\nendif\n\nNULL := /dev/null\nifeq ($(PLATFORM),windows32)\nNULL := NUL\nendif\n\nPREFIX ?= /usr/local\nifneq ($(shell which xdg-open 2> $(NULL))$(FREEDESKTOP),)\n# Running on an FreeDesktop environment, configure for (optional) installation\nDESTDIR ?= \nDATA_DIR ?= $(PREFIX)/share/sameboy/\nFREEDESKTOP ?= true\nendif\n\ndefault: $(DEFAULT)\n\nifeq ($(MAKECMDGOALS),)\nMAKECMDGOALS := $(DEFAULT)\nendif\n\nifneq ($(DISABLE_TIMEKEEPING),)\nCFLAGS += -DGB_DISABLE_TIMEKEEPING\nCPPP_FLAGS += -DGB_DISABLE_TIMEKEEPING\nelse\nCPPP_FLAGS += -UGB_DISABLE_TIMEKEEPING\nendif\n\nifneq ($(DISABLE_REWIND),)\nCFLAGS += -DGB_DISABLE_REWIND\nCPPP_FLAGS += -DGB_DISABLE_REWIND\nCORE_FILTER += Core/rewind.c\nelse\nCPPP_FLAGS += -UGB_DISABLE_REWIND\nendif\n\nifneq ($(DISABLE_DEBUGGER),)\nCFLAGS += -DGB_DISABLE_DEBUGGER\nCPPP_FLAGS += -DGB_DISABLE_DEBUGGER\nCORE_FILTER += Core/debugger.c Core/sm83_disassembler.c Core/symbol_hash.c\nDISABLE_CHEAT_SEARCH := 1\nelse\nCPPP_FLAGS += -UGB_DISABLE_DEBUGGER\nendif\n\nifneq ($(DISABLE_CHEATS),)\nCFLAGS += -DGB_DISABLE_CHEATS\nCPPP_FLAGS += -DGB_DISABLE_CHEATS\nCORE_FILTER += Core/cheats.c\nDISABLE_CHEAT_SEARCH := 1\nelse\nCPPP_FLAGS += -UGB_DISABLE_CHEATS\nendif\n\nifneq ($(DISABLE_CHEAT_SEARCH),)\nCFLAGS += -DGB_DISABLE_CHEAT_SEARCH\nCPPP_FLAGS += -DGB_DISABLE_CHEAT_SEARCH\nCORE_FILTER += Core/cheat_search.c\nelse\nCPPP_FLAGS += -UGB_DISABLE_CHEAT_SEARCH\nendif\n\nifneq ($(CORE_FILTER)$(DISABLE_TIMEKEEPING),)\nifneq ($(MAKECMDGOALS),lib)\n$(error SameBoy features can only be disabled when compiling the 'lib' target)\nendif\nendif\n\nCPPP_FLAGS += -UGB_INTERNAL\n\n\ninclude version.mk\nCOPYRIGHT_YEAR := $(shell grep -oE \"20[2-9][0-9]\" LICENSE)\nexport VERSION\nCONF ?= debug\n\nBIN := build/bin\nOBJ := build/obj\nINC := build/include/sameboy\nLIBDIR := build/lib\nPKGCONF_DIR := $(LIBDIR)/pkgconfig\nPKGCONF_FILE := $(PKGCONF_DIR)/sameboy.pc\n\nBOOTROMS_DIR ?= $(BIN)/BootROMs\n\nifdef DATA_DIR\nCFLAGS += -DDATA_DIR=\"\\\"$(DATA_DIR)\\\"\"\nendif\n\n# Set tools\n\n# Use clang if it's available.\nifeq ($(origin CC),default)\nifneq (, $(shell which clang 2> $(NULL)))\nCC := clang \nendif\nendif\n\n# Find libraries with pkg-config if available.\nifneq (, $(shell which pkg-config 2> $(NULL)))\n# But not on macOS, it's annoying, and not on Haiku, where OpenGL is broken\nifeq ($(filter Darwin Haiku,$(PLATFORM)),)\nPKG_CONFIG := pkg-config\nendif\nendif\n\nifeq ($(PLATFORM),windows32)\n# To force use of the Unix version instead of the Windows version\nMKDIR := $(shell which mkdir)\nelse\nMKDIR := mkdir\nendif\n\nifeq ($(CONF),native_release)\noverride CONF := release\nLDFLAGS += -march=native -mtune=native\nCFLAGS += -march=native -mtune=native\nendif\n\nifeq ($(CONF),fat_release)\noverride CONF := release\nFAT_FLAGS += -arch x86_64 -arch arm64\nendif\n\nIOS_MIN := 11.0\n\nIOS_PNGS := $(shell ls iOS/*.png iOS/*.car)\n# Support out-of-PATH RGBDS\nRGBASM  := $(RGBDS)rgbasm\nRGBLINK := $(RGBDS)rgblink\nRGBGFX  := $(RGBDS)rgbgfx\n\n# RGBASM 0.7+ deprecate and remove `-h`\nRGBASM_FLAGS := $(if $(filter $(shell echo 'println __RGBDS_MAJOR__ || (!__RGBDS_MAJOR__ && __RGBDS_MINOR__ > 6)' | $(RGBASM) -), $$0), -h,) --include $(OBJ)/BootROMs/ --include BootROMs/\n# RGBGFX 0.6+ replace `-h` with `-Z`, and need `-c embedded`\nRGBGFX_FLAGS := $(if $(filter $(shell echo 'println __RGBDS_MAJOR__ || (!__RGBDS_MAJOR__ && __RGBDS_MINOR__ > 5)' | $(RGBASM) -), $$0), -h -u, -Z -u -c embedded)\n\n\n# Set compilation and linkage flags based on target, platform and configuration\n\nOPEN_DIALOG = OpenDialog/gtk.c\n\nifeq ($(PLATFORM),windows32)\nOPEN_DIALOG = OpenDialog/windows.c\nendif\n\nifeq ($(PLATFORM),Darwin)\nOPEN_DIALOG = OpenDialog/cocoa.m\nendif\n\n# These must come before the -Wno- flags\nWARNINGS += -Werror -Wall -Wno-unknown-warning -Wno-unknown-warning-option -Wno-missing-braces\nWARNINGS += -Wno-nonnull -Wno-unused-result -Wno-multichar -Wno-int-in-bool-context -Wno-format-truncation -Wno-nullability-completeness\n\n# Only add this flag if the compiler supports it\nifeq ($(shell $(CC) -x c -c $(NULL) -o $(NULL) -Werror -Wpartial-availability 2> $(NULL); echo $$?),0)\nWARNINGS += -Wpartial-availability\nendif\n\n# GCC's implementation of this warning has false positives, so we skip it\nifneq ($(shell $(CC) --version 2>&1 | grep \"gcc\"), )\nWARNINGS += -Wno-maybe-uninitialized\nendif\n\nCFLAGS += $(WARNINGS)\n\nCFLAGS += -std=gnu11 -D_GNU_SOURCE -DGB_VERSION='\"$(VERSION)\"' -DGB_COPYRIGHT_YEAR='\"$(COPYRIGHT_YEAR)\"' -I. -D_USE_MATH_DEFINES\nifneq ($(PLATFORM),windows32)\nCFLAGS += -fPIC\nendif\n\nifneq (,$(UPDATE_SUPPORT))\nCFLAGS += -DUPDATE_SUPPORT\nendif\n\nifeq (,$(PKG_CONFIG))\nSDL_CFLAGS := $(shell sdl2-config --cflags)\nSDL_LDFLAGS := $(shell sdl2-config --libs) -lpthread\n\nifeq ($(PLATFORM),Darwin)\nSDL_LDFLAGS += -framework AppKit\nendif\n\n# We cannot detect the presence of OpenAL dev headers,\n# so we must do this manually\nifeq ($(ENABLE_OPENAL),1)\nSDL_CFLAGS += -DENABLE_OPENAL\nifeq ($(PLATFORM),Darwin)\nSDL_LDFLAGS += -framework OpenAL\nelse\nSDL_LDFLAGS += -lopenal\nendif\nSDL_AUDIO_DRIVERS += openal\nendif\nelse # ifneq ($(PKG_CONFIG),)\nSDL_CFLAGS := $(shell $(PKG_CONFIG) --cflags sdl2)\nSDL_LDFLAGS := $(shell $(PKG_CONFIG) --libs sdl2) -lpthread\n\n# Allow OpenAL to be disabled even if the development libraries are available\nifneq ($(ENABLE_OPENAL),0)\nifneq ($(shell $(PKG_CONFIG) --exists openal && echo 0),)\nSDL_CFLAGS += $(shell $(PKG_CONFIG) --cflags openal) -DENABLE_OPENAL\nSDL_LDFLAGS += $(shell $(PKG_CONFIG) --libs openal)\nSDL_AUDIO_DRIVERS += openal\nendif\nendif\n\nifneq ($(shell $(PKG_CONFIG) --exists gio-unix-2.0 || echo 0),)\nGIO_CFLAGS = $(error The Gio library could not be found)\nGIO_LDFLAGS = $(error The Gio library could not be found)\nelse\nGIO_CFLAGS := $(shell $(PKG_CONFIG) --cflags gio-unix-2.0) -DG_LOG_USE_STRUCTURED\nGIO_LDFLAGS := $(shell $(PKG_CONFIG) --libs gio-unix-2.0)\nifeq ($(CONF),debug)\nGIO_CFLAGS += -DG_ENABLE_DEBUG\nelse\nGIO_CFLAGS += -DG_DISABLE_ASSERT\nendif\nendif\n\nifneq ($(shell $(PKG_CONFIG) --exists gdk-pixbuf-2.0 || echo 0),)\nGDK_PIXBUF_CFLAGS = $(error The Gdk-Pixbuf library could not be found)\nGDK_PIXBUF_LDFLAGS = $(error The Gdk-Pixbuf library could not be found)\nelse\nGDK_PIXBUF_CFLAGS := $(shell $(PKG_CONFIG) --cflags gdk-pixbuf-2.0)\nGDK_PIXBUF_LDFLAGS := $(shell $(PKG_CONFIG) --libs gdk-pixbuf-2.0)\nendif\nendif\n\nifeq (,$(PKG_CONFIG))\nGL_LDFLAGS := -lGL\nelse\nGL_CFLAGS := $(shell $(PKG_CONFIG) --cflags gl)\nGL_LDFLAGS := $(shell $(PKG_CONFIG) --libs gl || echo -lGL)\nendif\n\nifeq ($(PLATFORM),windows32)\nCFLAGS += -IWindows -Drandom=rand --target=x86_64-pc-windows\nLDFLAGS += -lmsvcrt -lcomdlg32 -luser32 -lshell32 -lole32 -ladvapi32 -lSDL2main -Wl,/MANIFESTFILE:NUL --target=x86_64-pc-windows\n\nSDL_LDFLAGS := -lSDL2\nGL_LDFLAGS := -lopengl32\nifneq ($(REDIST_XAUDIO),)\nCFLAGS += -DREDIST_XAUDIO\nLDFLAGS += -lxaudio2_9redist\nsdl: $(BIN)/SDL/xaudio2_9redist.dll\nendif\nelse\nLDFLAGS += -lc -lm\n# libdl is not available as a standalone library in Haiku\nifneq ($(PLATFORM),Haiku)\nLDFLAGS += -ldl\nendif\nendif\n\nifeq ($(MAKECMDGOALS),_ios)\nOBJ := build/obj-ios\nSYSROOT := $(shell xcodebuild -sdk iphoneos -version Path 2> $(NULL))\nifeq ($(SYSROOT),)\n$(error Could not find an iOS SDK)\nendif\nCFLAGS += -arch arm64 -miphoneos-version-min=$(IOS_MIN) -isysroot $(SYSROOT) -IAppleCommon -DGB_DISABLE_DEBUGGER\nCORE_FILTER += Core/debugger.c Core/sm83_disassembler.c Core/symbol_hash.c Core/cheat_search.c\nLDFLAGS += -arch arm64\nOCFLAGS += -x objective-c -fobjc-arc -Wno-deprecated-declarations -isysroot $(SYSROOT)\nLDFLAGS += -miphoneos-version-min=$(IOS_MIN)  -isysroot $(SYSROOT)\nIOS_INSTALLER_LDFLAGS := $(LDFLAGS) -lobjc -framework CoreServices -framework Foundation\nLDFLAGS += -lobjc -framework UIKit -framework Foundation -framework CoreGraphics -framework Metal -framework MetalKit -framework AudioToolbox -framework AVFoundation -framework QuartzCore -framework CoreMotion -framework CoreVideo -framework CoreMedia -framework CoreImage -framework UserNotifications -framework GameController -weak_framework CoreHaptics -framework MobileCoreServices -lcompression\nCODESIGN := codesign -fs -\nelse\nifeq ($(PLATFORM),Darwin)\nSYSROOT := $(shell xcodebuild -sdk macosx -version Path 2> $(NULL))\nifeq ($(SYSROOT),)\nSYSROOT := /Library/Developer/CommandLineTools/SDKs/$(shell ls /Library/Developer/CommandLineTools/SDKs/ | grep \"[0-9]\\.\" | tail -n 1)\nendif\nifeq ($(SYSROOT),/Library/Developer/CommandLineTools/SDKs/)\n$(error Could not find a macOS SDK)\nendif\n\nCFLAGS += -F/Library/Frameworks -mmacosx-version-min=10.9 -isysroot $(SYSROOT) -IAppleCommon\nOCFLAGS += -x objective-c -fobjc-arc -Wno-deprecated-declarations -isysroot $(SYSROOT)\nLDFLAGS += -mmacosx-version-min=10.9 -isysroot $(SYSROOT)\nGL_LDFLAGS := -framework OpenGL\nendif\nCFLAGS += -Wno-deprecated-declarations\nifeq ($(PLATFORM),windows32)\nCFLAGS += -Wno-deprecated-declarations # Seems like Microsoft deprecated every single LIBC function\nLDFLAGS += -Wl,/NODEFAULTLIB:libcmt.lib\nendif\nendif\n\nLIBFLAGS := -nostdlib -Wl,-r\nifneq ($(PLATFORM),Darwin)\nLIBFLAGS += -no-pie\nendif\n\nifeq ($(CONF),debug)\nCFLAGS += -g\nelse ifeq ($(CONF), release)\nCFLAGS += -O3 -ffast-math -DNDEBUG\n# The frontend code is not time-critical, prefer reducing the size for less memory use and better cache utilization \nifeq ($(shell $(CC) -x c -c $(NULL) -o $(NULL) -Werror -Oz 2> $(NULL); echo $$?),0)\nFRONTEND_CFLAGS += -Oz\nelse\nFRONTEND_CFLAGS += -Os\nendif\n\n# Don't use function outlining. I breaks Obj-C ARC optimizations and Apple never bothered to fix it. It also hardly has any effect on file size.\nifeq ($(shell $(CC) -x c -c $(NULL) -o $(NULL) -Werror -mno-outline 2> $(NULL); echo $$?),0)\nFRONTEND_CFLAGS += -mno-outline\nLDFLAGS += -mno-outline\nendif\n\nSTRIP := strip\nLDFLAGS += -flto\nCFLAGS += -flto\nLDFLAGS += -Wno-lto-type-mismatch # For GCC's LTO\n\nelse\n$(error Invalid value for CONF: $(CONF). Use \"debug\", \"release\" or \"native_release\")\nendif\n\nCODESIGN := true\nifeq ($(PLATFORM),Darwin)\nLDFLAGS += -Wl,-exported_symbols_list,$(NULL)\nSTRIP := strip -x\nCODESIGN := codesign -fs -\nendif\n\nifeq ($(PLATFORM),windows32)\nLDFLAGS +=  -fuse-ld=lld\nendif\n\n\n# Define our targets\n\nifeq ($(PLATFORM),windows32)\nSDL_TARGET := $(BIN)/SDL/sameboy.exe $(BIN)/SDL/sameboy_debugger.exe $(BIN)/SDL/SDL2.dll\nTESTER_TARGET := $(BIN)/tester/sameboy_tester.exe\nelse\nSDL_TARGET := $(BIN)/SDL/sameboy\nTESTER_TARGET := $(BIN)/tester/sameboy_tester\nendif\n\ncocoa: $(BIN)/SameBoy.app\nxdg-thumbnailer: $(BIN)/XdgThumbnailer/sameboy-thumbnailer\nsdl: $(SDL_TARGET) $(BIN)/SDL/dmg_boot.bin $(BIN)/SDL/mgb_boot.bin $(BIN)/SDL/cgb0_boot.bin $(BIN)/SDL/cgb_boot.bin $(BIN)/SDL/agb_boot.bin $(BIN)/SDL/sgb_boot.bin $(BIN)/SDL/sgb2_boot.bin $(BIN)/SDL/LICENSE $(BIN)/SDL/registers.sym $(BIN)/SDL/background.bmp $(BIN)/SDL/Shaders $(BIN)/SDL/Palettes\nbootroms: $(BIN)/BootROMs/agb_boot.bin $(BIN)/BootROMs/cgb_boot.bin $(BIN)/BootROMs/cgb0_boot.bin $(BIN)/BootROMs/dmg_boot.bin $(BIN)/BootROMs/mgb_boot.bin $(BIN)/BootROMs/sgb_boot.bin $(BIN)/BootROMs/sgb2_boot.bin\ntester: $(TESTER_TARGET) $(BIN)/tester/dmg_boot.bin $(BIN)/tester/cgb_boot.bin $(BIN)/tester/agb_boot.bin $(BIN)/tester/sgb_boot.bin $(BIN)/tester/sgb2_boot.bin\n_ios: $(BIN)/SameBoy-iOS.app $(OBJ)/installer\nios-ipa: $(BIN)/SameBoy-iOS.ipa\nios-deb: $(BIN)/SameBoy-iOS.deb\nifeq ($(PLATFORM),windows32)\nlib: $(LIBDIR)/libsameboy.dll\nelse\nlib: $(LIBDIR)/libsameboy.o $(LIBDIR)/libsameboy.a $(LIBDIR)/libsameboy.$(DL_EXT)\nendif\nall: sdl tester libretro lib\nifeq ($(PLATFORM),Darwin)\nall: cocoa ios-ipa ios-deb\nendif\nifneq ($(FREEDESKTOP),)\nall: xdg-thumbnailer\nendif\n\n# Get a list of our source files and their respective object file targets\n\nCORE_SOURCES := $(filter-out $(CORE_FILTER),$(shell ls Core/*.c))\nCORE_HEADERS := $(shell ls Core/*.h)\nSDL_SOURCES := $(shell ls SDL/*.c) $(OPEN_DIALOG) $(patsubst %,SDL/audio/%.c,$(SDL_AUDIO_DRIVERS))\nTESTER_SOURCES := $(shell ls Tester/*.c)\nIOS_SOURCES := $(filter-out iOS/installer.m, $(shell ls iOS/*.m)) $(shell ls AppleCommon/*.m)\nCOCOA_SOURCES := $(shell ls Cocoa/*.m) $(shell ls HexFiend/*.m) $(shell ls JoyKit/*.m) $(shell ls AppleCommon/*.m)\nQUICKLOOK_SOURCES := $(shell ls QuickLook/*.m) $(shell ls QuickLook/*.c)\nXDG_THUMBNAILER_SOURCES := $(shell ls XdgThumbnailer/*.c)\n\nifeq ($(PLATFORM),windows32)\nCORE_SOURCES += $(shell ls Windows/*.c)\nendif\n\nCORE_OBJECTS := $(patsubst %,$(OBJ)/%.o,$(CORE_SOURCES))\nPUBLIC_HEADERS := $(patsubst Core/%,$(INC)/%,$(CORE_HEADERS))\nCOCOA_OBJECTS := $(patsubst %,$(OBJ)/%.o,$(COCOA_SOURCES))\nIOS_OBJECTS := $(patsubst %,$(OBJ)/%.o,$(IOS_SOURCES))\nQUICKLOOK_OBJECTS := $(patsubst %,$(OBJ)/%.o,$(QUICKLOOK_SOURCES))\nSDL_OBJECTS := $(patsubst %,$(OBJ)/%.o,$(SDL_SOURCES))\nTESTER_OBJECTS := $(patsubst %,$(OBJ)/%.o,$(TESTER_SOURCES))\nXDG_THUMBNAILER_OBJECTS := $(patsubst %,$(OBJ)/%.o,$(XDG_THUMBNAILER_SOURCES)) $(OBJ)/XdgThumbnailer/resources.c.o\n\nlib: $(PUBLIC_HEADERS)\n\n# Automatic dependency generation\n\nifneq ($(filter-out ios ios-ipa ios-deb clean bootroms libretro %.bin, $(MAKECMDGOALS)),)\n-include $(CORE_OBJECTS:.o=.dep)\nifneq ($(filter $(MAKECMDGOALS),sdl),)\n-include $(SDL_OBJECTS:.o=.dep)\nendif\nifneq ($(filter $(MAKECMDGOALS),tester),)\n-include $(TESTER_OBJECTS:.o=.dep)\nendif\nifneq ($(filter $(MAKECMDGOALS),cocoa),)\n-include $(COCOA_OBJECTS:.o=.dep)\nendif\nifneq ($(filter $(MAKECMDGOALS),_ios),)\n-include $(IOS_OBJECTS:.o=.dep)\nendif\nendif\n\n$(OBJ)/SDL/%.dep: SDL/%\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(SDL_CFLAGS) $(GL_CFLAGS) -MT $(OBJ)/$^.o -M $^ -c -o $@\n\t\n$(OBJ)/OpenDialog/%.dep: OpenDialog/%\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(SDL_CFLAGS) $(GL_CFLAGS) -MT $(OBJ)/$^.o -M $^ -c -o $@\n\n$(OBJ)/%.dep: %\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) -MT $(OBJ)/$^.o -M $^ -c -o $@\n\n# Compilation rules\n\n$(OBJ)/Core/%.c.o: Core/%.c\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(FAT_FLAGS) -DGB_INTERNAL -c $< -o $@\n\n$(OBJ)/SDL/%.c.o: SDL/%.c\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(FRONTEND_CFLAGS) $(FAT_FLAGS) $(SDL_CFLAGS) $(GL_CFLAGS) -c $< -o $@\n\n$(OBJ)/XdgThumbnailer/%.c.o: XdgThumbnailer/%.c\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(GIO_CFLAGS) $(GDK_PIXBUF_CFLAGS) -DG_LOG_DOMAIN='\"sameboy-thumbnailer\"' -c $< -o $@\n# Make sure not to attempt compiling this before generating the resource code.\n$(OBJ)/XdgThumbnailer/emulate.c.o: $(OBJ)/XdgThumbnailer/resources.h\n# Silence warnings for this. It is code generated not by us, so we do not want `-Werror` to break\n# compilation with some version of the generator and/or compiler.\n$(OBJ)/XdgThumbnailer/%.c.o: $(OBJ)/XdgThumbnailer/%.c\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(GIO_CFLAGS) $(GDK_PIXBUF_CFLAGS) -DG_LOG_DOMAIN='\"sameboy-thumbnailer\"' -w -c $< -o $@\n\n$(OBJ)/XdgThumbnailer/resources.c $(OBJ)/XdgThumbnailer/resources.h: %: XdgThumbnailer/resources.gresource.xml $(BIN)/BootROMs/cgb_boot_fast.bin\n\t-@$(MKDIR) -p $(dir $@)\n\tCC=$(CC) glib-compile-resources --dependency-file $@.mk --generate-phony-targets --generate --target $@ $<\n-include $(OBJ)/XdgThumbnailer/resources.c.mk $(OBJ)/XdgThumbnailer/resources.h.mk\n\n$(OBJ)/OpenDialog/%.c.o: OpenDialog/%.c\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(SDL_CFLAGS) $(GL_CFLAGS) -c $< -o $@\n\n\n$(OBJ)/%.c.o: %.c\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(FRONTEND_CFLAGS) $(FAT_FLAGS) -c $< -o $@\n\t\n# HexFiend requires more flags\n$(OBJ)/HexFiend/%.m.o: HexFiend/%.m\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(FRONTEND_CFLAGS) $(FAT_FLAGS) $(OCFLAGS) -c $< -o $@ -fno-objc-arc -include HexFiend/HexFiend_2_Framework_Prefix.pch\n\t\n$(OBJ)/%.m.o: %.m\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(CFLAGS) $(FRONTEND_CFLAGS) $(FAT_FLAGS) $(OCFLAGS) -c $< -o $@\n\n# iOS Port\n\n$(BIN)/SameBoy-iOS.app: $(BIN)/SameBoy-iOS.app/SameBoy \\\n                        $(IOS_PNGS) \\\n                        iOS/License.html \\\n                        iOS/Info.plist \\\n                        $(BIN)/SameBoy-iOS.app/dmg_boot.bin \\\n                        $(BIN)/SameBoy-iOS.app/mgb_boot.bin \\\n                        $(BIN)/SameBoy-iOS.app/cgb0_boot.bin \\\n                        $(BIN)/SameBoy-iOS.app/cgb_boot.bin \\\n                        $(BIN)/SameBoy-iOS.app/agb_boot.bin \\\n                        $(BIN)/SameBoy-iOS.app/sgb_boot.bin \\\n                        $(BIN)/SameBoy-iOS.app/sgb2_boot.bin \\\n\t\t\t\t\t\t$(BIN)/SameBoy-iOS.app/LaunchScreen.storyboardc \\\n                        Shaders\n\t$(MKDIR) -p $(BIN)/SameBoy-iOS.app\n\tcp $(IOS_PNGS) $(BIN)/SameBoy-iOS.app\n\tsed \"s/@VERSION/$(VERSION)/;s/@COPYRIGHT_YEAR/$(COPYRIGHT_YEAR)/\" < iOS/Info.plist > $(BIN)/SameBoy-iOS.app/Info.plist\n\tsed \"s/@COPYRIGHT_YEAR/$(COPYRIGHT_YEAR)/\" < iOS/License.html > $(BIN)/SameBoy-iOS.app/License.html\n\t$(MKDIR) -p $(BIN)/SameBoy-iOS.app/Shaders\n\tcp Shaders/*.fsh Shaders/*.metal $(BIN)/SameBoy-iOS.app/Shaders\n\t$(CODESIGN) $@\n\n$(BIN)/SameBoy-iOS.app/SameBoy: $(CORE_OBJECTS) $(IOS_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS)\nifeq ($(CONF), release)\n\t$(STRIP) $@\nendif\n\n$(OBJ)/installer: iOS/installer.m\n\t$(CC) $< -o $@ $(IOS_INSTALLER_LDFLAGS) $(CFLAGS)\n\n# Cocoa Port\n\n$(BIN)/SameBoy.app: $(BIN)/SameBoy.app/Contents/MacOS/SameBoy \\\n                    $(shell ls Cocoa/*.icns Cocoa/*.png) \\\n                    Cocoa/License.html \\\n                    Cocoa/Info.plist \\\n                    Misc/registers.sym \\\n                    $(BIN)/SameBoy.app/Contents/Resources/dmg_boot.bin \\\n                    $(BIN)/SameBoy.app/Contents/Resources/mgb_boot.bin \\\n                    $(BIN)/SameBoy.app/Contents/Resources/cgb0_boot.bin \\\n                    $(BIN)/SameBoy.app/Contents/Resources/cgb_boot.bin \\\n                    $(BIN)/SameBoy.app/Contents/Resources/agb_boot.bin \\\n                    $(BIN)/SameBoy.app/Contents/Resources/sgb_boot.bin \\\n                    $(BIN)/SameBoy.app/Contents/Resources/sgb2_boot.bin \\\n                    $(patsubst %.xib,%.nib,$(addprefix $(BIN)/SameBoy.app/Contents/Resources/,$(shell cd Cocoa;ls *.xib))) \\\n                    $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator \\\n\t\t\t\t\t$(BIN)/SameBoy.app/Contents/PlugIns/Thumbnailer.appex \\\n\t\t\t\t\t$(BIN)/SameBoy.app/Contents/PlugIns/Previewer.appex \\\n                    Shaders\n\t$(MKDIR) -p $(BIN)/SameBoy.app/Contents/Resources\n\tcp Cocoa/*.icns Cocoa/*.png Misc/registers.sym $(BIN)/SameBoy.app/Contents/Resources/\n\tsed \"s/@VERSION/$(VERSION)/;s/@COPYRIGHT_YEAR/$(COPYRIGHT_YEAR)/\" < Cocoa/Info.plist > $(BIN)/SameBoy.app/Contents/Info.plist\n\tsed \"s/@COPYRIGHT_YEAR/$(COPYRIGHT_YEAR)/\" < Cocoa/License.html > $(BIN)/SameBoy.app/Contents/Resources/Credits.html\n\t$(MKDIR) -p $(BIN)/SameBoy.app/Contents/Resources/Shaders\n\tcp Shaders/*.fsh Shaders/*.metal $(BIN)/SameBoy.app/Contents/Resources/Shaders\n\t$(MKDIR) -p $(BIN)/SameBoy.app/Contents/Library/QuickLook/\nifeq ($(CONF), release)\n\t$(CODESIGN) $@\nendif\n\n# We place the dylib inside the Quick Look plugin, because Quick Look plugins run in a very strict sandbox\n\n$(BIN)/SameBoy.app/Contents/MacOS/SameBoy: $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/MacOS/SameBoy.dylib\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) -o $@ $(LDFLAGS) $(FAT_FLAGS) -rpath @executable_path/../Library/QuickLook/SameBoy.qlgenerator/ -Wl,-reexport_library,$^\n\t\n$(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/MacOS/SameBoy.dylib: $(COCOA_OBJECTS) $(CORE_OBJECTS) $(QUICKLOOK_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS) $(FAT_FLAGS) -shared -install_name @rpath/Contents/MacOS/SameBoy.dylib -framework OpenGL -framework AudioUnit -framework AVFoundation -framework CoreVideo -framework CoreMedia -framework IOKit -framework PreferencePanes -framework Carbon -framework QuartzCore -framework Security -framework WebKit -weak_framework Metal -weak_framework MetalKit -weak_framework QuickLookThumbnailing -weak_framework QuickLookUI -framework Quicklook -framework AppKit -Wl,-exported_symbols_list,QuickLook/exports.sym -Wl,-exported_symbol,_main\nifeq ($(CONF), release)\n\t$(STRIP) $@\n\t$(CODESIGN) $@\nendif\n\n$(BIN)/SameBoy.app/Contents/Resources/%.nib: Cocoa/%.xib\n\tibtool --target-device mac --minimum-deployment-target 10.9 --compile $@ $^ 2>&1 | cat -\n\t\n$(BIN)/SameBoy-iOS.app/%.storyboardc: iOS/%.storyboard\n\tibtool --target-device iphone --target-device ipad --minimum-deployment-target $(IOS_MIN) --compile $@ $^ 2>&1 | cat -\n\n# Quick Look generators\n\n$(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator: $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/MacOS/SameBoyQL \\\n                            \t\t\t\t\t\t\t\t\t   $(shell ls QuickLook/*.png) \\\n\t\t\t\t\t\t\t\t\t\t                           QuickLook/Info.plist \\\n\t\t\t\t\t\t\t\t\t\t                           $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/Resources/cgb_boot_fast.bin\n\t$(MKDIR) -p $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/Resources\n\tcp QuickLook/*.png $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/Resources/\n\tsed \"s/@VERSION/$(VERSION)/;s/@COPYRIGHT_YEAR/$(COPYRIGHT_YEAR)/\" < QuickLook/Info.plist > $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/Info.plist\nifeq ($(CONF), release)\n\t$(CODESIGN) $@\nendif\n\n$(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/MacOS/SameBoyQL: $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/MacOS/SameBoy.dylib\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) -o $@ $(LDFLAGS) $(FAT_FLAGS) -bundle -Wl,-reexport_library,$^ -rpath @loader_path/../../\nifeq ($(CONF), release)\n\t$(STRIP) $@\nendif\n\n$(BIN)/SameBoy.app/Contents/PlugIns/Thumbnailer.appex: $(BIN)/SameBoy.app/Contents/PlugIns/Thumbnailer.appex/Contents/MacOS/Thumbnailer \\\n   \t\t\t\t\t\t\t\t\t\t\t\t\t   QuickLook/Thumbnailer.plist \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t   QuickLook/plugin.entitlements\n\tsed \"s/@VERSION/$(VERSION)/;s/@COPYRIGHT_YEAR/$(COPYRIGHT_YEAR)/\" < QuickLook/Thumbnailer.plist > $(BIN)/SameBoy.app/Contents/PlugIns/Thumbnailer.appex/Contents/Info.plist\n\t$(CODESIGN) --entitlements QuickLook/plugin.entitlements $@\n\n$(BIN)/SameBoy.app/Contents/PlugIns/Thumbnailer.appex/Contents/MacOS/Thumbnailer: $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/MacOS/SameBoy.dylib\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) -o $@ $(LDFLAGS) $(FAT_FLAGS) -e _NSExtensionMain -framework Foundation -Wl,-reexport_library,$^ -rpath @loader_path/../../../../Library/QuickLook/SameBoy.qlgenerator/ \nifeq ($(CONF), release)\n\t$(STRIP) $@\nendif\n\n$(BIN)/SameBoy.app/Contents/PlugIns/Previewer.appex: $(BIN)/SameBoy.app/Contents/PlugIns/Previewer.appex/Contents/MacOS/Previewer \\\n  \t\t\t\t\t\t\t\t\t\t\t\t\t QuickLook/Previewer.plist \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t QuickLook/plugin.entitlements\n\tsed \"s/@VERSION/$(VERSION)/;s/@COPYRIGHT_YEAR/$(COPYRIGHT_YEAR)/\" < QuickLook/Previewer.plist > $(BIN)/SameBoy.app/Contents/PlugIns/Previewer.appex/Contents/Info.plist\n\t$(CODESIGN) --entitlements QuickLook/plugin.entitlements $@\n\n$(BIN)/SameBoy.app/Contents/PlugIns/Previewer.appex/Contents/MacOS/Previewer: $(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/MacOS/SameBoy.dylib\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) -o $@ $(LDFLAGS) $(FAT_FLAGS) -e _NSExtensionMain -framework Foundation -Wl,-reexport_library,$^ -rpath @loader_path/../../../../Library/QuickLook/SameBoy.qlgenerator/ \nifeq ($(CONF), release)\n\t$(STRIP) $@\nendif\n\n# cgb_boot_fast.bin is not a standard boot ROM, we don't expect it to exist in the user-provided\n# boot ROM directory.\n$(BIN)/SameBoy.app/Contents/Library/QuickLook/SameBoy.qlgenerator/Contents/Resources/cgb_boot_fast.bin: $(BIN)/BootROMs/cgb_boot_fast.bin\n\t-@$(MKDIR) -p $(dir $@)\n\tcp -f $^ $@\n\n# XDG thumbnailer\n\n$(BIN)/XdgThumbnailer/sameboy-thumbnailer: $(CORE_OBJECTS) $(XDG_THUMBNAILER_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS) $(GIO_LDFLAGS) $(GDK_PIXBUF_LDFLAGS)\n\n# SDL Port\n\n# Unix versions build only one binary\n$(BIN)/SDL/sameboy: $(CORE_OBJECTS) $(SDL_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS) $(FAT_FLAGS) $(SDL_LDFLAGS) $(GL_LDFLAGS)\nifeq ($(CONF), release)\n\t$(STRIP) $@\n\t$(CODESIGN) $@\nendif\n\n# Windows version builds two, one with a console and one without it\n$(BIN)/SDL/sameboy.exe: $(CORE_OBJECTS) $(SDL_OBJECTS) $(OBJ)/Windows/resources.o\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS) $(SDL_LDFLAGS) $(GL_LDFLAGS) -Wl,/subsystem:windows\n\n$(BIN)/SDL/sameboy_debugger.exe: $(CORE_OBJECTS) $(SDL_OBJECTS) $(OBJ)/Windows/resources.o\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS) $(SDL_LDFLAGS) $(GL_LDFLAGS) -Wl,/subsystem:console\n\nifneq ($(USE_WINDRES),)\n$(OBJ)/%.o: %.rc\n\t-@$(MKDIR) -p $(dir $@)\n\twindres --preprocessor cpp -DVERSION=\\\"$(VERSION)\\\" -DCOPYRIGHT_YEAR=\\\"$(COPYRIGHT_YEAR)\\\" $^ $@\nelse\n$(OBJ)/%.res: %.rc\n\t-@$(MKDIR) -p $(dir $@)\n\trc /fo $@ /dVERSION=\\\"$(VERSION)\\\" /dCOPYRIGHT_YEAR=\\\"$(COPYRIGHT_YEAR)\\\" $^ \n\n%.o: %.res\n\tcvtres /OUT:\"$@\" $^\nendif\n\n# Copy required DLL files for the Windows port\n$(BIN)/SDL/%.dll:\n\t-@$(MKDIR) -p $(dir $@)\n\t@$(eval MATCH := $(shell where $$LIB:$(notdir $@)))\n\tcp \"$(MATCH)\" $@\n\n# Tester\n\n$(BIN)/tester/sameboy_tester: $(CORE_OBJECTS) $(TESTER_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS)\nifeq ($(CONF), release)\n\t$(STRIP) $@\n\t$(CODESIGN) $@\nendif\n\n$(BIN)/tester/sameboy_tester.exe: $(CORE_OBJECTS) $(SDL_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $^ -o $@ $(LDFLAGS) -Wl,/subsystem:console\n\n$(BIN)/tester/%.bin: $(BOOTROMS_DIR)/%.bin\n\t-@$(MKDIR) -p $(dir $@)\n\tcp -f $< $@\n\n$(BIN)/SameBoy.app/Contents/Resources/%.bin: $(BOOTROMS_DIR)/%.bin\n\t-@$(MKDIR) -p $(dir $@)\n\tcp -f $< $@\n\n$(BIN)/SameBoy-iOS.app/%.bin: $(BOOTROMS_DIR)/%.bin\n\t-@$(MKDIR) -p $(dir $@)\n\tcp -f $< $@\n\n$(BIN)/SDL/%.bin: $(BOOTROMS_DIR)/%.bin\n\t-@$(MKDIR) -p $(dir $@)\n\tcp -f $< $@\n\n$(BIN)/SDL/LICENSE: LICENSE\n\t-@$(MKDIR) -p $(dir $@)\n\tgrep -v \"^  \" $< > $@\n\n$(BIN)/SDL/registers.sym: Misc/registers.sym\n\t-@$(MKDIR) -p $(dir $@)\n\tcp -f $< $@\n\n$(BIN)/SDL/background.bmp: SDL/background.bmp\n\t-@$(MKDIR) -p $(dir $@)\n\tcp -f $< $@\n\n$(BIN)/SDL/Shaders: $(wildcard Shaders/*.fsh)\n\t-@$(MKDIR) -p $@\n\tcp -f $^ $@\n\ttouch $@\n\n$(BIN)/SDL/Palettes: Misc/Palettes\n\t-@$(MKDIR) -p $@\n\tcp -f $</* $@\n\ttouch $@\n\n# Boot ROMs\n\n$(OBJ)/%.2bpp: %.png\n\t-@$(MKDIR) -p $(dir $@)\n\t$(RGBGFX) $(RGBGFX_FLAGS) -o $@ $<\n\n$(OBJ)/BootROMs/SameBoyLogo.pb12: $(OBJ)/BootROMs/SameBoyLogo.2bpp $(PB12_COMPRESS)\n\t-@$(MKDIR) -p $(dir $@)\n\t\"$(realpath $(PB12_COMPRESS))\" < $< > $@\n\t\n$(PB12_COMPRESS): BootROMs/pb12.c\n\t-@$(MKDIR) -p $(dir $@)\n\t$(NATIVE_CC) -std=c99 -Wall -Werror $< -o $@\n\n$(BIN)/BootROMs/cgb0_boot.bin: BootROMs/cgb_boot.asm\n$(BIN)/BootROMs/agb_boot.bin: BootROMs/cgb_boot.asm\n$(BIN)/BootROMs/cgb_boot_fast.bin: BootROMs/cgb_boot.asm\n$(BIN)/BootROMs/sgb2_boot.bin: BootROMs/sgb_boot.asm\n\n$(BIN)/BootROMs/%.bin: BootROMs/%.asm $(OBJ)/BootROMs/SameBoyLogo.pb12\n\t-@$(MKDIR) -p $(dir $@)\n\t$(RGBASM) $(RGBASM_FLAGS) -o $@.tmp $<\n\t$(RGBLINK) -x -o $@ $@.tmp\n\t@rm $@.tmp\n\n# Libretro Core (uses its own build system)\nlibretro:\n\tCC=$(CC) CFLAGS=\"$(WARNINGS)\" $(MAKE) -C libretro BOOTROMS_DIR=$(abspath $(BOOTROMS_DIR)) BIN=$(abspath $(BIN))\n\n# Install for Linux, and other FreeDesktop platforms.\nifneq ($(FREEDESKTOP),)\ninstall: $(BIN)/XdgThumbnailer/sameboy-thumbnailer sdl $(shell find FreeDesktop) XdgThumbnailer/sameboy.thumbnailer\n\tinstall -d $(DESTDIR)$(DATA_DIR)/Shaders\n\tinstall -d $(DESTDIR)$(DATA_DIR)/Palettes\n\tinstall -d $(DESTDIR)$(DATA_DIR)/BootROMs\n\tinstall -d $(DESTDIR)$(PREFIX)/bin\n\tinstall -d $(DESTDIR)$(PREFIX)/share/thumbnailers\n\tinstall -d $(DESTDIR)$(PREFIX)/share/mime\n\tinstall -d $(DESTDIR)$(PREFIX)/share/applications\n\t\n\t(cd $(BIN)/SDL && find . \\! -name sameboy -type f -exec install -m 644 {} \"$(abspath $(DESTDIR))$(DATA_DIR)/{}\" \\; )\n\tinstall -m 755 -s $(BIN)/SDL/sameboy $(DESTDIR)$(PREFIX)/bin/sameboy\n\tinstall -m 755 -s $(BIN)/XdgThumbnailer/sameboy-thumbnailer $(DESTDIR)$(PREFIX)/bin/sameboy-thumbnailer\n\tinstall -m 644 XdgThumbnailer/sameboy.thumbnailer $(DESTDIR)$(PREFIX)/share/thumbnailers/sameboy.thumbnailer\nifeq ($(DESTDIR),)\n\txdg-mime install --novendor FreeDesktop/sameboy.xml\n\txdg-desktop-menu install --novendor FreeDesktop/sameboy.desktop\n\tfor size in 16 32 64 128 256 512; do \\\n\t\txdg-icon-resource install --novendor --theme hicolor --size $$size --context apps FreeDesktop/AppIcon/$${size}x$${size}.png sameboy; \\\n\t\txdg-icon-resource install --novendor --theme hicolor --size $$size --context mimetypes FreeDesktop/Cartridge/$${size}x$${size}.png x-gameboy-rom; \\\n\t\txdg-icon-resource install --novendor --theme hicolor --size $$size --context mimetypes FreeDesktop/ColorCartridge/$${size}x$${size}.png x-gameboy-color-rom; \\\n\tdone\nelse\n\tinstall -m 644 FreeDesktop/sameboy.xml $(DESTDIR)$(PREFIX)/share/mime/sameboy.xml\n\tinstall -m 644 FreeDesktop/sameboy.desktop $(DESTDIR)$(PREFIX)/share/applications/sameboy.desktop\n\tfor size in 16x16 32x32 64x64 128x128 256x256 512x512; do \\\n\t\tinstall -d $(DESTDIR)$(PREFIX)/share/icons/hicolor/$$size/apps; \\\n\t\tinstall -d $(DESTDIR)$(PREFIX)/share/icons/hicolor/$$size/mimetypes; \\\n\t\tinstall -m 644 FreeDesktop/AppIcon/$$size.png $(DESTDIR)$(PREFIX)/share/icons/hicolor/$$size/apps/sameboy.png; \\\n\t\tinstall -m 644 FreeDesktop/Cartridge/$$size.png $(DESTDIR)$(PREFIX)/share/icons/hicolor/$$size/mimetypes/x-gameboy-rom.png; \\\n\t\tinstall -m 644 FreeDesktop/ColorCartridge/$$size.png $(DESTDIR)$(PREFIX)/share/icons/hicolor/$$size/mimetypes/x-gameboy-color-rom.png; \\\n\tdone\nendif\nendif\n\nios: bootroms\n\t@$(MAKE) _ios\n\n$(BIN)/SameBoy-iOS.ipa: ios iOS/sideload.entitlements\n\t$(MKDIR) -p $(OBJ)/Payload\n\tcp -rf $(BIN)/SameBoy-iOS.app $(OBJ)/Payload/SameBoy-iOS.app\n\tcodesign -fs - --entitlements iOS/sideload.entitlements $(OBJ)/Payload/SameBoy-iOS.app\n\t(cd $(OBJ) && zip -q $(abspath $@) -r Payload)\n\trm -rf $(OBJ)/Payload\n\n\n$(BIN)/SameBoy-iOS.deb: $(OBJ)/debian-binary $(OBJ)/control.tar.gz $(OBJ)/data.tar.gz\n\t-@$(MKDIR) -p $(dir $@)\n\t(cd $(OBJ) && ar cr $(abspath $@) $(notdir $^))\n\t\n$(OBJ)/data.tar.gz: ios iOS/jailbreak.entitlements iOS/installer.entitlements\n\t$(MKDIR) -p $(OBJ)/private/var/containers/\n\tcp -rf $(BIN)/SameBoy-iOS.app $(OBJ)/private/var/containers/SameBoy-iOS.app\n\tcp build/obj-ios/installer $(OBJ)/private/var/containers/SameBoy-iOS.app\n\tcodesign -fs - --entitlements iOS/installer.entitlements $(OBJ)/private/var/containers/SameBoy-iOS.app/installer\n\tcodesign -fs - --entitlements iOS/jailbreak.entitlements $(OBJ)/private/var/containers/SameBoy-iOS.app\n\t(cd $(OBJ) && tar -czf $(abspath $@) --format ustar --uid 501 --gid 501 --numeric-owner ./private)\n\trm -rf $(OBJ)/private/\n\t\n$(OBJ)/control.tar.gz: iOS/deb-postinst iOS/deb-prerm iOS/deb-control\n\t-@$(MKDIR) -p $(dir $@)\n\tsed \"s/@VERSION/$(VERSION)/\" < iOS/deb-control > $(OBJ)/control\n\tln iOS/deb-postinst $(OBJ)/postinst\n\tln iOS/deb-prerm $(OBJ)/prerm\n\t(cd $(OBJ) && tar -czf $(abspath $@) --format ustar --uid 501 --gid 501 --numeric-owner ./control ./postinst ./prerm)\n\trm $(OBJ)/control $(OBJ)/postinst $(OBJ)/prerm\n\t\n$(OBJ)/debian-binary:\n\t-@$(MKDIR) -p $(dir $@)\n\techo 2.0 > $@\n    \n$(LIBDIR)/libsameboy.o: $(CORE_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t@# This is a somewhat simple hack to force Clang and GCC to build a native object file out of one or many LTO objects\n\techo \"static const char __attribute__((used)) x=0;\"| $(CC) $(filter-out -flto,$(CFLAGS)) $(FAT_FLAGS) -c -x c - -o $(OBJ)/lto_hack.o\n\t@# And this is a somewhat complicated hack to invoke the correct LTO-enabled LD command in a mostly cross-platform nature\n\t$(CC) $(FAT_FLAGS) $(CFLAGS) $(LIBFLAGS) $^ $(OBJ)/lto_hack.o -o $@\n\t-@rm $(OBJ)/lto_hack.o\n    \n$(LIBDIR)/libsameboy.a: $(LIBDIR)/libsameboy.o\n\t-@$(MKDIR) -p $(dir $@)\n\t-@rm -f $@\n\tar -crs $@ $^\n\t\n$(LIBDIR)/libsameboy.$(DL_EXT): $(CORE_OBJECTS)\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(LDFLAGS) -shared $(FAT_FLAGS) $(CFLAGS) $^ -o $@\nifeq ($(CONF), release)\n\t$(STRIP) $@\n\t$(CODESIGN) $@\nendif\n\n$(PKGCONF_FILE): sameboy.pc.in\n\t-@$(MKDIR) -p $(dir $@)\n\t-@rm -f $@\n\tsed -e 's,@prefix@,$(PREFIX),' \\\n\t\t-e 's/@version@/$(VERSION)/' $< > $@\n\nlib-install: lib $(PKGCONF_FILE)\n\tinstall -d $(DESTDIR)$(PREFIX)/lib/pkgconfig\n\tinstall -d $(DESTDIR)$(PREFIX)/include/sameboy\n\tinstall -m 644 $(LIBDIR)/libsameboy.a $(LIBDIR)/libsameboy.$(DL_EXT) $(DESTDIR)$(PREFIX)/lib/\n\tinstall -m 644 $(INC)/* $(DESTDIR)$(PREFIX)/include/sameboy/\n\tinstall -m 644 $(PKGCONF_FILE) $(DESTDIR)$(PREFIX)/lib/pkgconfig\n\t\n# Windows dll\n\n# To avoid Windows' sort.exe\nSORT = $(dir $(shell which grep))\\sort.exe\n\n$(OBJ)/names: $(CORE_OBJECTS)\n\tllvm-nm -gU $(CORE_OBJECTS) -P | grep -Eo \"^GB_[^ ]+\" | $(SORT) -u > $@\n\n$(OBJ)/exports: $(PUBLIC_HEADERS)\n\tgrep -Eho \"\\bGB_[a-zA-Z0-9_]+\\b\" $^ | $(dir $(shell which grep))\\sort.exe -u > $@\n\n$(OBJ)/exports.def: $(OBJ)/exports $(OBJ)/names\n\techo LIBRARY libsameboy > $@\n\techo EXPORTS >> $@\n\tcomm -12 $^ >> $@\n\n$(LIBDIR)/libsameboy.dll: $(CORE_OBJECTS) | $(OBJ)/exports.def\n\t-@$(MKDIR) -p $(dir $@)\n\t$(CC) $(LDFLAGS) -Wl,-lldmingw -Wl,/def:$(OBJ)/exports.def -shared $(CFLAGS) $^ -o $@\n\t\n# CPPP doesn't like multibyte characters, so we replace the single quote character before processing so it doesn't complain\n$(INC)/%.h: Core/%.h\n\t-@$(MKDIR) -p $(dir $@)\n\tsed \"s/'/@SINGLE_QUOTE@/g\" $^ | cppp $(CPPP_FLAGS) | sed \"s/@SINGLE_QUOTE@/'/g\" > $@\n\t\n# Clean\nclean:\n\trm -rf build\n\n.PHONY: libretro tester cocoa ios _ios ios-ipa ios-deb liblib-unsupported bootroms\n"
        },
        {
          "name": "Misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "OpenDialog",
          "type": "tree",
          "content": null
        },
        {
          "name": "QuickLook",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9111328125,
          "content": "# SameBoy\n\nSameBoy is an open source Game Boy (DMG) and Game Boy Color (CGB) emulator, written in portable C. It has a native Cocoa frontend for macOS, an SDL frontend for other operating systems, and a libretro core. It also includes a text-based debugger with an expression evaluator. Visit [the website](https://sameboy.github.io/).\n\n## Features\nFeatures common to both Cocoa and SDL versions:\n * Supports Game Boy (DMG) and Game Boy Color (CGB) emulation\n * Lets you choose the model you want to emulate regardless of ROM\n * High quality 96KHz audio\n * Battery save support\n * Save states\n * Includes open source DMG and CGB boot ROMs:\n   * Complete support for (and documentation of) *all* game-specific palettes in the CGB boot ROM, for accurate emulation of Game Boy games on a Game Boy Color\n   * Supports manual palette selection with key combinations, with 4 additional new palettes (A + B + direction)\n   * Supports palette selection in a CGB game, forcing it to run in 'paletted' DMG mode, if ROM allows doing so.\n   * Support for games with a non-Nintendo logo in the header\n   * No long animation in the DMG boot\n * Advanced text-based debugger with an expression evaluator, disassembler, conditional breakpoints, conditional watchpoints, backtracing and other features\n * Extremely high accuracy\n * Emulates [PCM_12 and PCM_34 registers](https://github.com/LIJI32/GBVisualizer)\n * T-cycle accurate emulation of LCD timing effects, supporting the Demotronic trick, Prehistorik Man, [GBVideoPlayer](https://github.com/LIJI32/GBVideoPlayer) and other tech demos\n * Real time clock emulation\n * Retina/High DPI display support, allowing a wider range of scaling factors without artifacts\n * Optional frame blending (Requires OpenGL 3.2 or later)\n * Several [scaling algorithms](https://sameboy.github.io/scaling/) (Including exclusive algorithms like OmniScale and Anti-aliased Scale2x; Requires OpenGL 3.2 or later or Metal)\n\nFeatures currently supported only with the Cocoa version:\n * Native Cocoa interface, with support for all system-wide features, such as drag-and-drop and smart titlebars\n * Game Boy Camera support\n \n[Read more](https://sameboy.github.io/features/).\n\n## Compatibility\nSameBoy passes all of [blargg's test ROMs](http://gbdev.gg8.se/wiki/articles/Test_ROMs#Blargg.27s_tests), all of [mooneye-gb's](https://github.com/Gekkio/mooneye-gb) tests (Some tests require the original boot ROMs), and all of [Wilbert Pol's tests](https://github.com/wilbertpol/mooneye-gb/tree/master/tests/acceptance). SameBoy should work with most games and demos, please [report](https://github.com/LIJI32/SameBoy/issues/new) any broken ROM. The latest results for SameBoy's automatic tester are available [here](https://sameboy.github.io/automation/).\n\n## Contributing\nSameBoy is an open-source project licensed under the Expat license (with an additional exception for the iOS folder), and you're welcome to contribute by creating issues, implementing new features, improving emulation accuracy and fixing existing open issues. You can read the [contribution guidelines](CONTRIBUTING.md) to make sure your contributions are as effective as possible.\n\n## Compilation\nSameBoy requires the following tools and libraries to build:\n * clang (Recommended; required for macOS) or GCC\n * make\n * macOS Cocoa frontend: macOS SDK and Xcode (For command line tools and ibtool)\n * SDL frontend: libsdl2\n * [rgbds](https://github.com/gbdev/rgbds/releases/), for boot ROM compilation\n * [cppp](https://github.com/LIJI32/cppp), for cleaning up headers when compiling SameBoy as a library\n\nOn Windows, SameBoy also requires:\n * Visual Studio (For headers, etc.)\n * [GnuWin](http://gnuwin32.sourceforge.net/)\n * Running vcvars64 before running make. Make sure all required tools and libraries are in %PATH% and %lib%, respectively. (see [Build FAQ](https://github.com/LIJI32/SameBoy/blob/master/build-faq.md) for more details on Windows compilation)\n\nTo compile, simply run `make`. The targets are:\n * `cocoa` (Default for macOS)\n * `sdl` (Default for everything else)\n * `lib` (Creates libsameboy.o and libsameboy.a for statically linking SameBoy, as well as a headers directory with corresponding headers; currently not supported on Windows due to linker limitations)\n * `ios` (Plain iOS .app bundle), `ios-ipa` (iOS IPA archive for side-loading), `ios-deb` (iOS deb package for jailbroken devices)\n * `libretro`\n * `bootroms`\n * `tester` \n\nYou may also specify `CONF=debug` (default), `CONF=release`, `CONF=native_release` or `CONF=fat_release`  to control optimization, symbols and multi-architectures. `native_release` is faster than `release`, but is optimized to the host's CPU and therefore is not portable. `fat_release` is exclusive to macOS and builds x86-64 and ARM64 fat binaries; this requires using a recent enough `clang` and macOS SDK using `xcode-select`, or setting them explicitly with `CC=` and `SYSROOT=`, respectively. All other configurations will build to your host architecture, except for the iOS targets. You may set `BOOTROMS_DIR=...` to a directory containing precompiled boot ROM files, otherwise the build system will compile and use SameBoy's own boot ROMs.\n\nThe SDL port will look for resource files with a path relative to executable and inside the directory specified by the `DATA_DIR` variable. If you are packaging SameBoy, you may wish to override this by setting the `DATA_DIR` variable during compilation to the target path of the directory containing all files (apart from the executable, that's not necessary) from the `build/bin/SDL` directory in the source tree. Make sure the variable ends with a `/` character. On FreeDesktop environments, `DATA_DIR` will default to `/usr/local/share/sameboy/`. `PREFIX` and `DESTDIR` follow their standard usage and default to an empty string an `/usr/local`, respectively\n\nLinux, BSD, and other FreeDesktop users can run `sudo make install` to install SameBoy as both a GUI app and a command line tool.\n\nSameBoy is compiled and tested on macOS, Ubuntu and 64-bit Windows 10.\n"
        },
        {
          "name": "SDL",
          "type": "tree",
          "content": null
        },
        {
          "name": "Shaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tester",
          "type": "tree",
          "content": null
        },
        {
          "name": "Windows",
          "type": "tree",
          "content": null
        },
        {
          "name": "XdgThumbnailer",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-faq.md",
          "type": "blob",
          "size": 2.9853515625,
          "content": "# macOS Specific Issues\n## Attempting to build the Cocoa frontend fails with NSInternalInconsistencyException\n\nWhen building on macOS, the build system will make a native Cocoa app by default. In this case, the build system uses the Xcode `ibtool` command to build user interface files. If this command fails, you can fix this issue by starting Xcode and letting it install components. After this is done, you should be able to close Xcode and build successfully.\n\n## Attempting to build the SDL frontend on macOS fails on linking\n\nSameBoy on macOS expects you to have SDL2 installed via Brew, and not as a framework. Older versions expected it to be installed as a framework, but this is no longer the case.\n\n# Windows Build Process\n\n## Tools and Libraries Installation\n\nFor the various tools and libraries, follow the below guide to ensure easy, proper configuration for the build environment:\n\n### SDL2\n\nFor [libSDL2](https://libsdl.org/download-2.0.php), download the Visual C++ Development Library pack. Place the extracted files within a known folder for later. Both the `\\x64\\` and `\\include\\` paths will be needed.  \n\nThe following examples will be referenced later: \n\n- `C:\\SDL2\\lib\\x64\\*`\n- `C:\\SDL2\\include\\*`\n\n### rgbds\n\nAfter downloading [rgbds](https://github.com/gbdev/rgbds/releases/), ensure that it is added to the `%PATH%`. This may be done by adding it to the user's or SYSTEM's Environment Variables, or may be added to the command line at compilation time via `set path=%path%;C:\\path\\to\\rgbds`.  \n\n### GnuWin\n\nEnsure that the `gnuwin32\\bin\\` directory is included in `%PATH%`. Like rgbds above, this may instead be manually included on the command line before installation: `set path=%path%;C:\\path\\to\\gnuwin32\\bin`. \n\n## Building\n\nWithin a command prompt in the project directory:\n\n```\nvcvars64\nset lib=%lib%;C:\\SDL2\\lib\\x64\nset include=%include%;C:\\SDL2\\include\nmake\n```\nPlease note that these directories (`C:\\SDL2\\*`) are the examples given within the \"SDL Port\" section above. Ensure that your `%PATH%` properly includes `rgbds` and `gnuwin32\\bin`, and that the `lib` and `include` paths include the appropriate SDL2 directories.\n\n## Common Errors\n\n### Error -1073741819\n\nIf encountering an error that appears as follows:\n\n``` make: *** [build/bin/BootROMs/dmg_boot.bin] Error -1073741819```\n\nSimply run `make` again, and the process will continue. This appears to happen occasionally with `build/bin/BootROMs/dmg_boot.bin` and `build/bin/BootROMs/sgb2_boot.bin`. It does not affect the compiled output. This appears to be an issue with GnuWin.\n\n### The system cannot find the file specified (`usr/bin/mkdir`)\n\nIf errors arise (i.e., particularly with the `CREATE_PROCESS('usr/bin/mkdir')` calls, also verify that Git for Windows has not been installed with full Linux support. If it has, remove `C:\\Program Files\\Git\\usr\\bin` from the SYSTEM %PATH% until after compilation. This happens because the Git for Windows version of `which` is used instead of the GnuWin one, and it returns a Unix-style path instead of a Windows one.\n"
        },
        {
          "name": "iOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "libretro",
          "type": "tree",
          "content": null
        },
        {
          "name": "sameboy.pc.in",
          "type": "blob",
          "size": 0.2412109375,
          "content": "prefix=@prefix@\nexec_prefix=${prefix}\nincludedir=${prefix}/include\nlibdir=${prefix}/lib\n \nName: sameboy\nDescription: SameBoy's emulation core as a library\nVersion: @version@\nCflags: -I${includedir}\nLibs: -L${libdir} -lsameboy\nLibs.private: -lm -lc"
        },
        {
          "name": "version.mk",
          "type": "blob",
          "size": 0.013671875,
          "content": "VERSION := 1.0"
        }
      ]
    }
  ]
}