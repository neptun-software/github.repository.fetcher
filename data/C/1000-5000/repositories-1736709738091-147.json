{
  "metadata": {
    "timestamp": 1736709738091,
    "page": 147,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "contiki-os/contiki",
      "stars": 3729,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.373046875,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text=auto whitespace=trailing-space\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n*.c text\n*.h text\n*.java text\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n*.ihex binary\n*.s37 binary\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6669921875,
          "content": "*.a\n*.bin\n*.map\n*.png\n*.log\n*.elf\n*.zip\n*.d\n*.ihex\n*.pyc\n*.redbee-econotag\n*.econotag \n*.native\n*.z1\n*.minimal-net\n*.sky\n*.wismote\n*.esb\n*.avr-raven\n*.exp5438\n*.mbxxx\n*.win32\n*.apple2enh\n*.atarixl\n*.c128\n*.c64\n*.cc2538dk\n*.zoul\n*.jn516x\n*.srf06-cc26xx\n*.ev-aducrf101mkxz\n*.report\nsummary\n*.summary\n*.runerr\n*.runlog\n*.faillog\n*.orig\n*~\n.DS_Store\nobj_*\nsymbols.*\nMakefile.target\ndoc/html\ndoc/latex\npatches-*\ntools/tunslip\ntools/tunslip6\nbuild\ntools/coffee-manager/build/\ntools/cooja/dist/\ntools/collect-view/build/\ntools/collect-view/dist/\nCOOJA.testlog\ntools/cooja/apps/mrm/lib/\ntools/cooja/apps/mspsim/lib/\ntools/cooja/apps/powertracker/lib/\ntools/cooja/apps/serial_socket/lib/\ntools/coffee-manager/coffee.jar\ntools/cooja/apps/avrora/lib/cooja_avrora.jar\ntools/cooja/apps/collect-view/cooja-collect-view.jar\n\n# sdcc build artifacts\ncontiki-cc2530dk.lib\n*.ihx\n*.hex\n*.mem\n*.lk\n*.omf\n*.cdb\n*.banks\n*.cc2530dk\n\n# VC++ build artifacts\n*.exp\n*.ilk\n*.lib\n*.pdb\n*.prg\n*.dsc\n\n#cc65 build artifacts\n*.s\n*.eth\n*.dsk\n*.po\n*.atr\n*.d64\n*.d71\n*.d81\n\n# Cooja Build Artifacts\n*.cooja\n\n#regression tests artifacts\n*.testlog\n*.log.prog\nregression-tests/[0-9][0-9]-*/report\nregression-tests/[0-9][0-9]-*/org/\n\n# rl78 build artifacts\n*.eval-adf7xxxmb4z\n*.eval-adf7xxxmb4z.srec\n\n# cscope files\ncscope.*\n\n# vim swap files\n*.swp\n*.swo\n\n# x86 UEFI files\ncpu/x86/uefi/Makefile.uefi\ncpu/x86/uefi/edk2\n\n# galileo bsp files\nplatform/galileo/bsp/libc/Makefile.libc\nplatform/galileo/bsp/libc/i586-elf/\nplatform/galileo/bsp/libc/newlib-2.2.0-1*\nplatform/galileo/bsp/grub/src/\nplatform/galileo/bsp/grub/bin/\n\n# galileo build and debug artefacts\n*.galileo\n*.galileo.dll\n*.galileo.efi\nLOG_OPENOCD\n\n# nRF52 build artifacts\n*.jlink\n*.nrf52dk\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.732421875,
          "content": "[submodule \"tools/mspsim\"]\n\tpath = tools/mspsim\n\turl = https://github.com/contiki-os/mspsim.git\n[submodule \"tools/cc2538-bsl\"]\n\tpath = tools/cc2538-bsl\n\turl = https://github.com/JelmerT/cc2538-bsl.git\n[submodule \"cpu/cc26xx-cc13xx/lib/cc26xxware\"]\n\tpath = cpu/cc26xx-cc13xx/lib/cc26xxware\n\turl = https://github.com/contiki-os/cc26xxware.git\n[submodule \"cpu/cc26xx-cc13xx/lib/cc13xxware\"]\n\tpath = cpu/cc26xx-cc13xx/lib/cc13xxware\n\turl = https://github.com/contiki-os/cc13xxware.git\n[submodule \"platform/stm32nucleo-spirit1/stm32cube-lib\"]\n\tpath = platform/stm32nucleo-spirit1/stm32cube-lib\n\turl = https://github.com/STclab/stm32nucleo-spirit1-lib\n\n[submodule \"tools/sensniff\"]\n\tpath = tools/sensniff\n\turl = https://github.com/g-oikonomou/sensniff.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 6.95703125,
          "content": "# Workaround for the issue found in the stable image promoted on Dec 1, 2016.\n# See https://github.com/travis-ci/travis-ci/issues/6928#issuecomment-264227708\ngroup: deprecated\nsudo: required\ndist: precise\n\nnotifications:\n  email: false\nlanguage: c #NOTE: this will set CC=gcc which might cause trouble\nbefore_script:\n  - WGET=\"travis_retry wget --continue --tries=20 --waitretry=10 --retry-connrefused --no-dns-cache --timeout 300\"\n  - sudo apt-get -qq update\n\n  ## Support building a binary that is identical to the CI\n  - echo -n \"Contiki will be compiled with RELSTR=\" ; git --git-dir .git describe --tags --always\n\n  ## Install doxygen\n  - if [ ${BUILD_CATEGORY:-0} = doxygen ] ; then\n      sudo add-apt-repository ppa:libreoffice/ppa -y && sudo apt-get -qq update &&\n      sudo apt-get --no-install-suggests --no-install-recommends -qq install doxygen  &&\n      doxygen --version ;\n    fi\n\n  ## Install msp430 toolchain\n  - sudo apt-get -qq install lib32z1\n  - $WGET http://simonduq.github.io/resources/mspgcc-4.7.2-compiled.tar.bz2 &&\n    tar xjf mspgcc*.tar.bz2 -C /tmp/ &&\n    sudo cp -f -r /tmp/msp430/* /usr/local/ &&\n    rm -rf /tmp/msp430 mspgcc*.tar.bz2 &&\n    msp430-gcc --version\n\n  ## Install avr toolchain\n  - $WGET http://atiselsts.github.io/resources/avr-gcc-4.9.2-compiled.tar.bz2 &&\n    tar xjf avr-gcc*.tar.bz2 -C /tmp/ &&\n    sudo cp -f -r /tmp/avr-gcc/* /usr/local/ &&\n    rm -rf /tmp/avr-gcc avr-gcc*.tar.bz2 &&\n    avr-gcc --version\n\n  ## Install 32-bit compatibility libraries\n  - sudo apt-get -qq install libc6:i386 libgcc1:i386 gcc-4.6-base:i386\n      libstdc++5:i386 libstdc++6:i386\n\n  ## Install old APCS ARM toolchain for mc1233x and mbxxx\n  - if [ ${BUILD_ARCH:-0} = arm-apcs ] ; then\n      $WGET https://raw.githubusercontent.com/wiki/malvira/libmc1322x/files/arm-2008q3-66-arm-none-eabi-i686-pc-linux-gnu.tar.bz2 &&\n      tar xjf arm-2008q3*.tar.bz2 -C /tmp/ &&\n      sudo cp -f -r /tmp/arm-2008q3/* /usr/ &&\n      rm -rf /tmp/arm-2008q3 arm-2008q3*.tar.bz2 &&\n      sudo apt-get -qq install libconfig-dev uuid-dev libqrencode-dev &&\n      arm-none-eabi-gcc --version ;\n    fi\n\n  ## Install mainline ARM toolchain and srecord.\n  - if [ ${BUILD_ARCH:-0} = arm-aapcs ] ; then\n      sudo apt-get -qq install srecord &&\n      $WGET https://launchpad.net/gcc-arm-embedded/5.0/5-2015-q4-major/+download/gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 &&\n      tar xjf gcc-arm-none-eabi-5_2-2015q4-20151219-linux.tar.bz2 -C /tmp/ &&\n      sudo cp -f -r /tmp/gcc-arm-none-eabi-5_2-2015q4/* /usr/local/ &&\n      rm -rf /tmp/gcc-arm-none-eabi-* gcc-arm-none-eabi-*-linux.tar.bz2 &&\n      arm-none-eabi-gcc --version ;\n    fi\n\n  ## Install RL78 GCC toolchain\n  - sudo apt-get install libncurses5:i386 zlib1g:i386\n  - $WGET http://adamdunkels.github.io/contiki-fork/gnurl78-v13.02-elf_1-2_i386.deb &&\n    sudo dpkg -i gnurl78*.deb\n\n  ## Install SDCC from a purpose-built bundle\n  - if [ ${BUILD_ARCH:-0} = 8051 ] ; then\n      $WGET https://raw.githubusercontent.com/wiki/g-oikonomou/contiki-sensinode/files/sdcc.tar.gz &&\n      tar xzf sdcc.tar.gz -C /tmp/ &&\n      sudo cp -f -r /tmp/sdcc/* /usr/local/ &&\n      rm -rf /tmp/sdcc sdcc.tar.gz &&\n      sdcc --version &&\n      sudo apt-get -qq install srecord ;\n    fi\n\n  ## Clone and build cc65 when testing 6502 ports\n  - if [ ${BUILD_ARCH:-0} = 6502 ] ; then\n      git clone https://github.com/cc65/cc65 /tmp/cc65 &&\n      make -C /tmp/cc65 bin apple2enh atarixl c64 c128 &&\n      sudo make -C /tmp/cc65 avail &&\n      cc65 --version ;\n    fi\n\n  ## Install NXP toolchain\n  - if [ ${BUILD_ARCH:-0} = jn516x ] ; then\n      $WGET http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part1.tar.bz2 &&\n      $WGET http://simonduq.github.io/resources/ba-elf-gcc-4.7.4-part2.tar.bz2 &&\n      $WGET http://simonduq.github.io/resources/jn516x-sdk-4163-1416.tar.bz2 &&\n      mkdir /tmp/jn516x-sdk /tmp/ba-elf-gcc &&\n      tar xjf jn516x-sdk-*.tar.bz2 -C /tmp/jn516x-sdk &&\n      tar xjf ba-elf-gcc-*part1.tar.bz2 -C /tmp/ba-elf-gcc &&\n      tar xjf ba-elf-gcc-*part2.tar.bz2 -C /tmp/ba-elf-gcc &&\n      sudo cp -f -r /tmp/jn516x-sdk /usr/ &&\n      sudo cp -f -r /tmp/ba-elf-gcc /usr/ &&\n      export PATH=/usr/ba-elf-gcc/bin:$PATH &&\n      rm -rf /tmp/ba-elf-gcc* /tmp/jn516x-sdk* &&\n      ba-elf-gcc --version ;\n    fi\n    \n  ## Install mainline ARM toolchain and download nRF52 SDK\n  - if [ ${BUILD_ARCH:-0} = nrf52dk ] ; then\n      sudo add-apt-repository -y ppa:team-gcc-arm-embedded/ppa &&\n      sudo apt-get -qq update &&\n      sudo apt-get -qq install gcc-arm-embedded srecord &&\n      arm-none-eabi-gcc --version &&\n      $WGET https://developer.nordicsemi.com/nRF5_IoT_SDK/nRF5_IoT_SDK_v0.9.x/nrf5_iot_sdk_3288530.zip &&\n      mkdir /tmp/nrf52-sdk &&\n      unzip nrf5_iot_sdk_3288530.zip -d /tmp/nrf52-sdk &&\n      export NRF52_SDK_ROOT=/tmp/nrf52-sdk ;\n    fi\n\n  ## Compile cooja.jar only when it's going to be needed\n  - if [ ${BUILD_CATEGORY:-sim} = sim ] ; then\n      java -version &&\n      ant -q -f tools/cooja/build.xml jar &&\n      sudo java -Xshare:dump -version ;\n    fi\n\nscript:\n  ## regression-tests/Makefile handles most of generic logic\n  - \"make -C regression-tests/??-$BUILD_TYPE RUNALL=true summary\"\n\nafter_script:\n  ## Print cooja test logs\n  - \"[ ${BUILD_CATEGORY:-sim} = sim ] && tail regression-tests/??-$BUILD_TYPE/*.testlog\"\n  ## Print a basic summary\n  - \"echo 'Summary:'; cat regression-tests/??-$BUILD_TYPE/summary\"\n  - \"FAILS=`grep -c  ' FAIL ' regression-tests/??-$BUILD_TYPE/summary`\"\n  ## This will detect whether the build should pass or fail\n  - \"test $FAILS -eq 0; exit $?\"\n\n\nenv:\n  ## This magically kick-off parallel jobs for each of the for the sets\n  ## of environment variable defined below\n  - BUILD_TYPE='doxygen'  BUILD_CATEGORY='doxygen'\n  - BUILD_TYPE='compile-base' BUILD_CATEGORY='compile'\n  - BUILD_TYPE='compile-tools' BUILD_CATEGORY='compile'\n  - BUILD_TYPE='collect'\n  - BUILD_TYPE='collect-lossy'\n  - BUILD_TYPE='rpl'\n  - BUILD_TYPE='rpl-non-storing'\n  - BUILD_TYPE='large-rpl'\n  - BUILD_TYPE='rime'\n  - BUILD_TYPE='ipv6'\n  - BUILD_TYPE='ip64' MAKE_TARGETS='cooja'\n  - BUILD_TYPE='hello-world'\n  - BUILD_TYPE='base'\n# XXX: netperf disabled b/c it's flaky\n#  - BUILD_TYPE='netperf' MAKE_TARGETS='cooja'\n  - BUILD_TYPE='shell'\n  - BUILD_TYPE='elfloader'\n# Tests under the ipv4 dir are individually disabled. Thus the entire job can be off\n#  - BUILD_TYPE='ipv4'\n  - BUILD_TYPE='ipv6-apps'\n  - BUILD_TYPE='compile-8051-ports' BUILD_CATEGORY='compile' BUILD_ARCH='8051'\n  - BUILD_TYPE='compile-arm-apcs-ports' BUILD_CATEGORY='compile' BUILD_ARCH='arm-apcs'\n  - BUILD_TYPE='compile-6502-ports' BUILD_CATEGORY='compile' BUILD_ARCH='6502'\n  - BUILD_TYPE='compile-arm-ports' BUILD_CATEGORY='compile' BUILD_ARCH='arm-aapcs'\n  - BUILD_TYPE='compile-nxp-ports' BUILD_CATEGORY='compile' BUILD_ARCH='jn516x'\n  - BUILD_TYPE='compile-nrf52-ports' BUILD_CATEGORY='compile' BUILD_ARCH='nrf52dk'\n  - BUILD_TYPE='slip-radio' MAKE_TARGETS='cooja'\n  - BUILD_TYPE='llsec' MAKE_TARGETS='cooja'\n  - BUILD_TYPE='compile-avr' BUILD_CATEGORY='compile' BUILD_ARCH='avr-rss2'\n  - BUILD_TYPE='ieee802154'\n  - BUILD_TYPE='tsch'\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.990234375,
          "content": "Code Contributions\n==================\n\nDo you have a new cool feature that you'd like to contribute to\nContiki? Or a fix for a bug? Great! The Contiki project loves code\ncontributions, improvements, and bugfixes, but we require that they\nfollow a set of guidelines and that they are contributed in a specific\nway.\n\nAdditional rules apply for contributions of a new hardware platform.\n\nGeneral Advice\n--------------\n\nThe chance of getting your pull request accepted increases considerably\nif you adhere to the following rules in addition to the aforementioned\nformatting and naming standards:\n\n* Ensure that all contributed files have a valid copyright statement\n  and an open-source license.\n* Do not bundle commits that are unrelated to each other -- create\n  separate pull requests instead.\n* Adhere to ISO C99 in all C language source files. Exceptions are\n  allowed for those platform-dependent source files that rely on the\n  extensions of a specific set of compilers.\n* Clean up the commit history. \"git rebase -i\" is useful for this purpose.\n* Do not include executable binary files, because they are usually\n  rejected for security reasons. Instead, provide instructions for how\n  to compile the file, so that a trusted member of the merge team can\n  commit it.\n* Write a descriptive pull request message. Explain the advantages and\n  disadvantages of your proposed changes.\n* Before starting to work on a major contribution, discuss your idea\n  with experienced Contiki programmers (e.g., on the contiki-developers\n  mailing list) to avoid wasting time on things that have no chance of\n  getting merged into Contiki.\n\nSource code that goes into the mainline Contiki repository must be of\ninterest to a large part of the Contiki community. It must be\nwell-tested and the merge team must have confidence that the code can\nbe maintained over a longer period. See below for more details\npertaining to platform contributions.\n\nContributions that have been made in research projects, and typically\ndo not get maintained thereafter, are better suited for inclusion in\nthe Contiki projects repository.\n\nStructuring Commits\n-------------------\n\n* Write descriptive commit messages. They don't have to be very long,\n  but you should mention what the commit achieves. Commit messages\n  like \"modified foo/bar.c\" are not helpful, should not be used, and\n  are likely to result in you having to re-write them.\n* Please do not add / remove irrelevant new line markers. Don't remove\n  the new line marker at the EOF.\n* Please, make sure that your patch doesn't add lines with trailing\n  whitespaces. If you run uncrustify as discussed above, this should\n  get taken care of for you automatically.\n* More generally speaking, make sure that each commit in your history\n  only includes changes necessary to implement whatever it is the\n  commit is trying to achieve. All changes should be mentioned in the\n  commit message.\n\nCode Formatting\n---------------\n\nWe require that all code contributed to the Contiki tree follows the\nsame code formatting as the existing Contiki code. We are very strict\non this.\n\nCode must be formatted according to\n[contiki/doc/code-style.c](https://github.com/contiki-os/contiki/blob/master/doc/code-style.c).\n\nThe Contiki source tree contains scripts to assist with correct code formatting\nand we recommend [Uncrustify](http://uncrustify.sourceforge.net/) as the\npreferred auto formatter. Everything is under\n[tools/code-style](https://github.com/contiki-os/contiki/tree/master/tools/code-style).\n\nIf you wish, you can format all changed resources in your working tree\nautomatically if the\n[tools/code-style/uncrustify-changed.sh](https://github.com/contiki-os/contiki/blob/master/tools/code-style/uncrustify-changed.sh)\nscript is added as a [Git pre-commit\nhook](http://git-scm.com/book/en/Customizing-Git-Git-Hooks) to your Git\nconfiguration.\n\nHere are some examples of what you can do:\n* To check a file's style without changing the file on disk, you can run this:\n`./tools/code-style/uncrustify-check-style.sh <path-to-file>`\nThis script will only accept a single file as its argument.\n\n* To auto format a file (and change it on disk) you can run this:\n`./tools/code-style/uncrustify-fix-style.sh <path-to-file>`\n\n* `uncrustify-fix-style.sh` will accept a space-delimited list of files as its argument. Thus, you can auto-format an entire directory by running something like this:\n``./tools/code-style/uncrustify-fix-style.sh `find cpu/cc2538 -type f -name \"*.[ch]\"` ``\n\nThis is _not_ a silver bullet and developer intervention is still required. Below are some examples of code which will get misformatted by uncrustify:\n* Math symbol following a cast to a typedef\n```\n  a = (uint8_t) ~P0_1; /* Cast to a typedef. Space gets added here (incorrect) */\n  a = (int)~P0_1;      /* Cast to a known type. Space gets removed (correct) */\n  a = (uint8_t)P0_1;   /* Variable directly after the cast. Space gets removed (correct) */\n```\n\n* `while(<condition>);` will become `while(<condition>) ;` (space incorrectly added after closing paren)\n\n* ﻿﻿`asm(\"wfi\");` becomes `asm (\"wfi\");`: A space gets added before the opening paren, because the `asm` keyword stops this from getting interpreted as a normal function call / macro invocation. This is only a problem with `asm`. For instance, ﻿﻿`foo(\"bar\");` gets formatted correctly.\n\nNaming\n------\n\nWe require that all code contributed to the Contiki tree follow the\nContiki source code naming standard:\n\n* File names are composed of lower-case characters and dashes. Like\n  this: simple-udp.c\n* Variable and function names are composed of lower-case characters\n  and underscores. Like this: simple_udp_send();\n* Variable and function names that are visible outside of their module\n  must begin with the name of the module. Like this:\n  simple_udp_send(), which is in the simple-udp module, declared in\n  simple-udp.h, and implemented in simple-udp.c.\n* C macros are composed of upper-case characters and underscores. Like\n  this: PROCESS_THREAD().\n* Configuration definitions begin with the module name and CONF_. Like\n  this: PROCESS_CONF_NUMEVENTS.\n\nHow to Contribute Code\n----------------------\n\nWhen your code is formatted according to the Contiki code style and\nfollows the Contiki naming standard, it is time to send it to the\nContiki maintainers to look at!\n\nAll code contributions to Contiki are submitted as [Github pull\nrequests](https://help.github.com/articles/using-pull-requests). Pull\nrequests will be reviewed and accepted according to the guidelines\nfound in the next section.\n\nThe basic guidelines to to start a Pull-Request:\n* Create a new branch for your modifications. This branch should be based on the latest contiki master branch.\n* If you already added the commits to another branch you can [cherry-pick](http://git-scm.com/docs/git-cherry-pick) them onto your new branch.\n* Push the new branch to github.\n* Raise the new Pull Requests on this new branch. Raising a Pull Request for the master branch is almost always a bad idea.\n* If changes are requested do not close the pull request but rewrite your history. [Details about rewriting your history](http://git-scm.com/book/en/Git-Tools-Rewriting-History)\n* You now force-push the changes to github. The pull-request is automatically updated.\n\nIn Git terminology this is equivalent to:\n* Make sure you have the original contiki repo as origin.\n```bash\n$ git remote -v\ncontiki-orig     https://github.com/contiki-os/contiki.git\n```\n* If not add it\n```bash\n$ git remote add contiki-orig https://github.com/contiki-os/contiki.git\n```\n* Make sure you have the latest version of your remotes\n```bash\n$ git remote update\n```\n* Create a new branch \"my_new_feature\" based on the latest contiki master branch\n```bash\n$ git checkout contiki-orig/master -b my_new_feature\n```\n* Add your work. For example by cherry-picking your changes from another branch.\n```bash\n$ git cherry-pick <HASH OF COMMIT>\n```\n* Push to _your_ github repository\n```bash\n$ git push origin my_new_feature\n```\n* Make a Pull Request for that branch\n* Rewrite your history if requested\n```bash\n$ git rebase -i contiki-orig/master\n```\n* As rewriting your history can break things you must force-push the changes. **Warning**: Force-pushing normally is dangerous and you might break things. Make sure you are never force-pushing branches other people are supposed to work with.\n```bash\n$ git push origin my_new_feature -f\n```\n* NOTE: To avoid all the pain of selectively picking commits, rebasing and force-pushing - begin your development with a branch OTHER THAN your master branch, and push changes to that branch after any local commits.\n\nPull Request Merging Policy\n---------------------------\n\nPull requests (PRs) are reviewed by the [merge team](https://github.com/orgs/contiki-os/people).\nGenerally, PRs require two \"+1\" before they can be merged by someone on the merge team.\nThe since Contiki 3.0, the merging policy is the following:\n* The PR receives **one \"-1\"** from a merge team member (along with specific feedback). The PR is closed. A \"-1\" must be accompanied with a clear explanation why the PR will not be considered for inclusion.\n* The PR receives **two \"+1\"** from merge team members. The PR is merged.\n* The PR was inactive for **two months**. A team member may either:\n  * Comment \"Is there any interest for this PR? Is there any work pending on it? If not I will close it in **one month**.\" Back to initial state in case of activity, close otherwise.\n  * Comment \"I approve this PR. If nobody disapproves within **one month**, I will merge it.\" Back to initial state in case of activity, merge otherwise.\n\nThere is an exception to the rule.\nCode that requires esoteric expertise such as some applications, platforms or tools can be merged after a single \"+1\" from its domain expert.\n\nTravis / Regression testing\n---------------------------\n\n[Travis](https://travis-ci.org/) is a service that runs regression\ntests. If you make a pull-request for Contiki this is automatically\nforwarded to Travis and regression tests are run. A box with\ninformation about the state of you pull request should show up after a\nminute or two.\n\nIf the test fails it is likely that something is wrong with your\ncode. Please look carefully at the log. It might also be that some\npackage on the testing VM was updated and causes the build to fail. If\nyou are sure that is is not your code causing the tests to fail start\na new issue describing the problem. Also note this in your pull\nrequest.\n\nYou can also register at [Travis](https://travis-ci.org/) for\nfree. Once you activated your Contiki repository, every push will be\ntested at Travis. The configuration is part of the contiki repository\nand testing will therefore work out-of-the-box. At Travis you then get\nan overview of the state of each of your branches.\n\nNew Platforms\n-------------\nA new hardware port will be considered for inclusion in mainline Contiki\nif it satisfies the following rules:\n\n* There must be at least one person willing and committed to maintain it.\nThey may but do not have to be the people who wrote the code. Similarly,\nthey may but do not have to be affiliated with the hardware manufacturer.\nIn the first instance, code maintenance would mean keeping the port up to\nspeed by submitting pull requests as Contiki moves forward. In the longer\nterm, people who maintain a reasonable level of commitment and who demonstrate\nthat they know what they're doing may be invited to become repo collaborators.\n* The hardware must be commercially available and of interest to a wide audience.\nIn other words, ports for bespoke hardware built for e.g. a specific project /\na single customer / niche markets are more suitable for a Contiki fork.\n* The code must strictly adhere to the Contiki code style, as discussed above.\n* The new files must have a clear copyright notice and license header. Contiki's\npreferred software license is the\n[3-clause BSD](http://opensource.org/licenses/BSD-3-Clause).\nOther licenses may also be considered\nas long as they are compatible with the 3-clause BSD (e.g. the Apache 2.0 license).\nConversely, code distributed under GPL cannot be considered. The same applies to\nbespoke licenses, such as those allowing use or redistribution only together with\ncertain kinds of hardware.\n* The port must demonstrate a certain degree of completeness and maturity. Common sense\napplies here.\n* The port must be accompanied by examples demonstrating basic functionality. This could\nbe a set of examples under `examples/<new-hardware-port>` and/or documentation of\nwhich existing examples are meant to work.\n* The port must provide compile regression tests by extending the existing travis\nintegration testing framework. Again, we can't specify explicitly\nwhat those tests should be, but something more interesting than hello-world is expected.\n* The work must be documented. The documentation could be README.md files\nunder the platform / cpu / example dirs or wiki pages. Doxygen comments are\nalso encouraged. The documentation should include:\n  * A getting started guide, including a list of tools required to use the platform\n(e.g. toolchain, software to program the device), where to get them from and brief notes\nhow to install them (can simply be a list of links to external guides)\n  * A list of things which will work off the shelf\n  * A list of things which are not meant to work, if any\n  * Additional reading resources (e.g. datasheets, hardware user guides, web resources)\n  * A ToDo list, if applicable.\n* It must be possible to use the port using free software. We do not discourage the\nuse of commercial software (e.g. support for a commercial toolchain), quite the opposite.\nHowever, we will insist on the existence of a free alternative for everything.\n\nAfter the port has been accepted, things meant to work off the shelf should\nkeep working off the shelf as Contiki moves forward.\n\nWe appreciate that, for many people, contributing to Contiki is a spare time\nactivity and our expectations from port maintainers take this into\nconsideration. All we ask from maintainers is to comment on and address\nrelevant pull requests at a reasonable frequency and to make sure travis keeps\npassing. In other words, we just want platforms to stay healthy over time and\nto thus avoid becoming very broken / obsolete.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.9501953125,
          "content": "Contiki is licensed under the 3-clause BSD license. This license gives\neveryone the right to use and distribute the code, either in binary or\nsource code format, as long as the copyright license is retained in\nthe source code.\n\nThe copyright for different parts of the code is held by different\npeople and organizations, but the code is licensed under the same type\nof license. The license text is:\n\n * Copyright (c) (Year), (Name of copyright holder)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE\n * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile.include",
          "type": "blob",
          "size": 7.875,
          "content": "# -*- makefile -*-\n\nifndef CONTIKI\n  ${error CONTIKI not defined! You must specify where Contiki resides}\nendif\n\nifeq ($(TARGET),)\n  -include Makefile.target\n  ifeq ($(TARGET),)\n    ${info TARGET not defined, using target 'native'}\n    TARGET=native\n  else\n    ${info using saved target '$(TARGET)'}\n  endif\nendif\n\nifeq ($(DEFINES),)\n  -include Makefile.$(TARGET).defines\n  ifneq ($(DEFINES),)\n    ${info using saved defines '$(DEFINES)'}\n  endif\nendif\n\nifndef HOST_OS\n  ifeq ($(OS),Windows_NT)\n  ## TODO: detect more specific Windows set-ups,\n  ## e.g. CygWin, MingW, VisualC, Watcom, Interix\n    HOST_OS := Windows\n  else\n    HOST_OS := $(shell uname)\n  endif\nendif\n\n#More debug information when running in CI\nifdef CI\n  ifeq ($(CI),true)\n    V = 1\n  endif\nendif\n\nusage:\n\t@echo \"make MAKETARGETS... [TARGET=(TARGET)] [savetarget] [targets]\"\n\ntargets:\n\t@ls -1 $(CONTIKI)/platform $(TARGETDIRS) | grep -v CVS\n\nsavetarget:\n\t-@rm -f Makefile.target\n\t@echo \"saving Makefile.target\"\n\t@echo >Makefile.target \"TARGET = $(TARGET)\"\n\nsavedefines:\n\t-@rm -f Makefile.$(TARGET).defines\n\t@echo \"saving Makefile.$(TARGET).defines\"\n\t@echo >Makefile.$(TARGET).defines \"DEFINES = $(DEFINES)\"\n\nOBJECTDIR = obj_$(TARGET)\n\nLOWERCASE = -abcdefghijklmnopqrstuvwxyz\nUPPERCASE = _ABCDEFGHIJKLMNOPQRSTUVWXYZ\nTARGET_UPPERCASE := ${strip ${shell echo $(TARGET) | sed y!$(LOWERCASE)!$(UPPERCASE)!}}\nCFLAGS += -DCONTIKI=1 -DCONTIKI_TARGET_$(TARGET_UPPERCASE)=1\n\nMODULES += core/sys core/dev core/lib\n\n# Include IPv6, IPv4, and/or Rime\n\nHAS_STACK = 0\nifeq ($(CONTIKI_WITH_IPV4),1)\n  HAS_STACK = 1\n  CFLAGS += -DNETSTACK_CONF_WITH_IPV4=1\n  MODULES += core/net/ipv4 core/net/ip\nendif\n\nifeq ($(CONTIKI_WITH_RIME),1)\n  HAS_STACK = 1\n  CFLAGS += -DNETSTACK_CONF_WITH_RIME=1 \n  MODULES += core/net/rime\nendif\n\n# Make IPv6 the default stack\nifeq ($(HAS_STACK),0)\nifneq ($(CONTIKI_WITH_IPV6),0)\nCONTIKI_WITH_IPV6 = 1\nendif\nendif\n\nifeq ($(CONTIKI_WITH_IPV6),1)\n  CFLAGS += -DNETSTACK_CONF_WITH_IPV6=1\n  ifneq ($(CONTIKI_WITH_RPL),0)\n  \tCONTIKI_WITH_RPL = 1\n  endif\n  MODULES += core/net/ipv6 core/net/ip\nendif\n\nifeq ($(CONTIKI_WITH_RPL),1)\n    CFLAGS += -DUIP_CONF_IPV6_RPL=1\n    MODULES += core/net/rpl\nelse\n    CFLAGS += -DUIP_CONF_IPV6_RPL=0\nendif\n\nCONTIKI_SOURCEFILES += $(CONTIKIFILES)\n\nCONTIKIDIRS += ${addprefix $(CONTIKI)/core/,dev lib net net/llsec net/mac net/rime \\\n                 net/rpl sys cfs ctk lib/ctk loader . }\n\noname = ${patsubst %.c,%.o,${patsubst %.S,%.o,$(1)}}\n\nCONTIKI_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(CONTIKI_SOURCEFILES)}}\n\nPROJECT_OBJECTFILES = ${addprefix $(OBJECTDIR)/,${call oname, $(PROJECT_SOURCEFILES)}}\n\n# Provide way to create $(OBJECTDIR) if it has been removed by make clean\n$(OBJECTDIR):\n\tmkdir $@\n\nuniq = $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1)))\n\n### Include application makefiles\n\nifdef APPS\n  APPDS = ${wildcard ${foreach DIR, $(APPDIRS), ${addprefix $(DIR)/, $(APPS)}}} \\\n             ${wildcard ${addprefix $(CONTIKI)/apps/, $(APPS)} \\\n             ${addprefix $(CONTIKI)/platform/$(TARGET)/apps/, $(APPS)} \\\n             $(APPS)}\n  APPINCLUDES = ${foreach APP, $(APPS), ${wildcard ${foreach DIR, $(APPDS), $(DIR)/Makefile.$(APP)}}}\n  -include $(APPINCLUDES)\n  APP_SOURCES = ${foreach APP, $(APPS), $($(APP)_src)}\n  DSC_SOURCES = ${foreach APP, $(APPS), $($(APP)_dsc)}\n  CONTIKI_SOURCEFILES += $(APP_SOURCES) $(DSC_SOURCES)\nendif\n\n### Include target makefile (TODO Unsafe?)\n\ntarget_makefile := $(wildcard $(CONTIKI)/platform/$(TARGET)/Makefile.$(TARGET) ${foreach TDIR, $(TARGETDIRS), $(TDIR)/$(TARGET)/Makefile.$(TARGET)})\n\n# Check if the target makefile exists, and create the object directory if necessary.\nifeq ($(strip $(target_makefile)),)\n  ${error The target platform \"$(TARGET)\" does not exist (maybe it was misspelled?)}\nelse\n  ifneq (1, ${words $(target_makefile)})\n    ${error More than one TARGET Makefile found: $(target_makefile)}\n  endif\n  include $(target_makefile)\nendif\n\nifdef MODULES\n  UNIQUEMODULES = $(call uniq,$(MODULES))\n  MODULEDIRS = ${wildcard ${addprefix $(CONTIKI)/, $(UNIQUEMODULES)}}\n  MODULES_SOURCES = ${foreach d, $(MODULEDIRS), ${subst ${d}/,,${wildcard $(d)/*.c}}}\n  CONTIKI_SOURCEFILES += $(MODULES_SOURCES)\n  APPDS += $(MODULEDIRS)\nendif\n\n### Verbosity control. Use  make V=1  to get verbose builds.\n\nifeq ($(V),1)\n  TRACE_CC =\n  TRACE_LD =\n  TRACE_AR =\n  TRACE_AS =\n  Q=\nelse\n  TRACE_CC = @echo \"  CC       \" $<\n  TRACE_LD = @echo \"  LD       \" $@\n  TRACE_AR = @echo \"  AR       \" $@\n  TRACE_AS = @echo \"  AS       \" $<\n  Q=@\nendif\n\n### Forward comma-separated list of arbitrary defines to the compiler\n\nCOMMA := ,\nCFLAGS += ${addprefix -D,${subst $(COMMA), ,$(DEFINES)}}\n\n### Setup directory search path for source and header files\n\nCONTIKI_TARGET_DIRS_CONCAT = ${addprefix ${dir $(target_makefile)}, \\\n                               $(CONTIKI_TARGET_DIRS)}\nCONTIKI_CPU_DIRS_CONCAT    = ${addprefix $(CONTIKI_CPU)/, \\\n                               $(CONTIKI_CPU_DIRS)}\n\nSOURCEDIRS = . $(PROJECTDIRS) $(CONTIKI_TARGET_DIRS_CONCAT) \\\n             $(CONTIKI_CPU_DIRS_CONCAT) $(CONTIKIDIRS) $(APPDS) $(EXTERNALDIRS) ${dir $(target_makefile)}\n\nvpath %.c $(SOURCEDIRS)\nvpath %.S $(SOURCEDIRS)\n\nCFLAGS += ${addprefix -I,$(SOURCEDIRS) $(CONTIKI)}\n\n### Check for a git repo and pass version if found\n### git.exe in Windows cmd shells may require no stderr redirection\nifndef RELSTR\nRELSTR:=${shell git --git-dir ${CONTIKI}/.git describe --tags --always}\nendif\n\nifneq ($(RELSTR),)\nCFLAGS += -DCONTIKI_VERSION_STRING=\\\"Contiki-$(RELSTR)\\\"\nendif\n\n### Automatic dependency generation\n\nifneq ($(MAKECMDGOALS),clean)\n-include ${addprefix $(OBJECTDIR)/,$(CONTIKI_SOURCEFILES:.c=.d) \\\n                                   $(PROJECT_SOURCEFILES:.c=.d)}\nendif\n\n### See http://make.paulandlesley.org/autodep.html#advanced\n\ndefine FINALIZE_DEPENDENCY\ncp $(@:.o=.d) $(@:.o=.$$$$); \\\nsed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \\\nrm -f $(@:.o=.$$$$)\nendef\n\nclean:\n\t-rm -f *~ *core core *.srec \\\n\t*.lst *.map \\\n\t*.cprg *.bin *.data contiki*.a *.firmware core-labels.S *.ihex *.ini \\\n\t*.ce *.co\n\trm -rf $(CLEAN)\n\t-rm -rf $(OBJECTDIR)\n\ndistclean: clean\n\t-rm -f ${addsuffix .$(TARGET),$(CONTIKI_PROJECT)}\n\n-include $(CONTIKI)/platform/$(TARGET)/Makefile.customrules-$(TARGET)\n\nifndef CUSTOM_RULE_C_TO_CE\n%.ce: %.c\n\t$(TRACE_CC)\n\t$(Q)$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@\n\t$(STRIP) --strip-unneeded -g -x $@\nendif\n\nifndef CUSTOM_RULE_C_TO_OBJECTDIR_O\n$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)\n\t$(TRACE_CC)\n\t$(Q)$(CC) $(CFLAGS) -MMD -c $< -o $@\n\t@$(FINALIZE_DEPENDENCY)\nendif\n\nifndef CUSTOM_RULE_S_TO_OBJECTDIR_O\n$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)\n\t$(TRACE_AS)\n\t$(Q)$(AS) $(ASFLAGS) -o $@ $<\nendif\n\nifndef CUSTOM_RULE_C_TO_O\n%.o: %.c\n\t$(TRACE_CC)\n\t$(Q)$(CC) $(CFLAGS) -c $< -o $@\nendif\n\n\nifndef CUSTOM_RULE_C_TO_CO\n%.co: %.c\n\t$(TRACE_CC)\n\t$(Q)$(CC) $(CFLAGS) -DAUTOSTART_ENABLE -c $< -o $@\nendif\n\nifndef AROPTS\n  AROPTS = rcf\nendif\n\nifndef CUSTOM_RULE_ALLOBJS_TO_TARGETLIB\ncontiki-$(TARGET).a: $(CONTIKI_OBJECTFILES)\n\t$(TRACE_AR)\n\t$(Q)$(AR) $(AROPTS) $@ $^\nendif\n\nifndef LD\n  LD = $(CC)\nendif\n\nifndef CUSTOM_RULE_LINK\n%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a\n\t$(TRACE_LD)\n\t$(Q)$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} \\\n\t    ${filter %.a,$^} $(TARGET_LIBFILES) -o $@\nendif\n\n%.ramprof: %.$(TARGET)\n\t$(NM) -S -td --size-sort $< | grep -i \" [abdrw] \" | cut -d' ' -f2,4\n\n%.flashprof: %.$(TARGET)\n\t$(NM) -S -td --size-sort $< | grep -i \" [t] \" | cut -d' ' -f2,4\n\n# Don't treat %.$(TARGET) as an intermediate file because it is\n# in fact the primary target.\n.PRECIOUS: %.$(TARGET)\n\n# Cancel the predefined implict rule for compiling and linking\n# a single C source into a binary to force GNU make to consider\n# the match-anything rule below instead.\n%: %.c\n\n# Match-anything pattern rule to allow the project makefiles to\n# abstract from the actual binary name. It needs to contain some\n# command in order to be a rule, not just a prerequisite.\n%: %.$(TARGET)\n\t@\n"
        },
        {
          "name": "README-BUILDING.md",
          "type": "blob",
          "size": 4.5986328125,
          "content": "The Contiki build system\n========================\n\nThe Contiki build system is designed to make it easy to compile Contiki\napplications for different hardware platforms or into a simulation platform by\nsimply supplying different parameters to the make command, without having to\nedit makefiles or modify the application code.\n\nThe file example project in examples/hello-world/ shows how the Contiki build\nsystem works. The hello-world.c application can be built into a complete\nContiki system by running make in the examples/hello-world/ directory. Running\nmake without parameters will build a Contiki system using the native target.\nThe native target is a special Contiki platform that builds an entire Contiki\nsystem as a program that runs on the development system. After compiling the\napplication for the native target it is possible to run the Contiki system with\nthe application by running the file hello-world.native. To compile the\napplication and a Contiki system for the ESB platform the command make\nTARGET=esb is used. This produces a hello-world.esb file that can be loaded\ninto an ESB board.\n\nTo compile the hello-world application into a stand-alone executable that can\nbe loaded into a running Contiki system, the command make hello-world.ce is\nused. To build an executable file for the ESB platform, make TARGET=esb\nhello-world.ce is run.\n\nTo avoid having to type TARGET= every time make is run, it is possible to run\nmake TARGET=esb savetarget to save the selected target as the default target\nplatform for subsequent invocations of make. A file called Makefile.target\ncontaining the currently saved target is saved in the project's directory.\n\nBeside TARGET= there's DEFINES= which allows to set arbitrary variables for the\nC preprocessor in form of a comma-separated list. Again it is possible to avoid\nhaving to re-type i.e. DEFINES=MYTRACE,MYVALUE=4711 by running make TARGET=esb\nDEFINES=MYTRACE,MYVALUE=4711 savedefines. A file called Makefile.esb.defines is\nsaved in the project's directory containing the currently saved defines for the\nESB platform.\n\nMakefiles used in the Contiki build system The Contiki build system is composed\nof a number of Makefiles. These are:\n\n* Makefile: the project's makefile, located in the project directory.\n\n* Makefile.include: the system-wide Contiki makefile, located in the root of\n  the Contiki source tree.\n\n* Makefile.$(TARGET) (where $(TARGET) is the name of the platform that is\n  currently being built): rules for the specific platform, located in the\n  platform's subdirectory in the platform/ directory.\n\n* Makefile.$(CPU) (where $(CPU) is the name of the CPU or microcontroller\n  architecture used on the platform for which Contiki is built): rules for the\n  CPU architecture, located in the CPU architecture's subdirectory in the cpu/\n  directory.\n\n* Makefile.$(APP) (where $(APP) is the name of an application in the apps/\n  directory): rules for applications in the apps/ directories. Each application\n  has its own makefile.\n\nThe Makefile in the project's directory is intentionally simple. It specifies\nwhere the Contiki source code resides in the system and includes the\nsystem-wide Makefile, Makefile.include. The project's makefile can also define\nin the APPS variable a list of applications from the apps/ directory that\nshould be included in the Contiki system. The Makefile used in the hello-world\nexample project looks like this:\n\n    CONTIKI_PROJECT = hello-world\n    all: $(CONTIKI_PROJECT)\n\n    CONTIKI = ../..\n    include $(CONTIKI)/Makefile.include\n\nFirst, the location of the Contiki source code tree is given by defining the\nCONTIKI variable. Next, the name of the application is defined. Finally, the\nsystem-wide Makefile.include is included.\n\nThe Makefile.include contains definitions of the C files of the core Contiki\nsystem. Makefile.include always reside in the root of the Contiki source tree.\nWhen make is run, Makefile.include includes the Makefile.$(TARGET) as well as\nall makefiles for the applications in the APPS list (which is specified by the\nproject's Makefile).\n\nMakefile.$(TARGET), which is located in the platform/$(TARGET)/ directory,\ncontains the list of C files that the platform adds to the Contiki system. This\nlist is defined by the CONTIKI_TARGET_SOURCEFILES variable. The\nMakefile.$(TARGET) also includes the Makefile.$(CPU) from the cpu/$(CPU)/\ndirectory.\n\nThe Makefile.$(CPU) typically contains definitions for the C compiler used for\nthe particular CPU. If multiple C compilers are used, the Makefile.$(CPU) can\neither contain a conditional expression that allows different C compilers to be\ndefined, or it can be completely overridden by the platform specific makefile\nMakefile.$(TARGET).\n"
        },
        {
          "name": "README-EXAMPLES.md",
          "type": "blob",
          "size": 6.1787109375,
          "content": "Contiki Examples\n================\n\nThe examples/ directory contains a few examples that will help you get\nstarted with Contiki.\n\nTo run the example programs, you need either to be running Linux or FreeBSD (or\nany other UNIX-type system), or install Cygwin if you are running Microsoft\nWindows [http://cygwin.com](http://cygwin.com). As a minimum you will need to\nhave the gcc C compiler installed. To run the examples in the 'netsim' target,\nyou need to have GTK 1.x development libraries installed. These are usually\ncalled 'gtk-devel', 'libgtk1-devel' or similar in your Linux software\ninstallation programs.\n\ncompile-platforms/\n------------------\n\nA test script that compiles Contiki for a number of platforms and reports any\nerrors found during the build.\n\nemail/\n------\n\nAn email program supporting SMTP. It can be compiled and run in the 'win32'\ntarget by typing the following commands:\n\n    cd examples/email\n    make\n    ./email-client.win32\n\nMost likely you'll have to adjust the TCP/IP values set in main() in\nplatform/win32/contiki-main.c to match your needs.\n\nPlease consult cpu/native/net/README-WPCAP.md as well.\n\nesb/\n----\n\nA set of demo applications for the ESB board.\n\nftp/\n----\n\nAn FTP client supporting download. It can be compiled and run in the 'win32'\ntarget by typing the following commands:\n\n    cd examples/ftp\n    make\n    ./ftp-client.win32\n\nMost likely you'll have to adjust the TCP/IP values set in main() in\nplatform/win32/contiki-main.c to match your needs.\n\nPlease consult cpu/native/net/README-WPCAP.md as well.\n\nhello-world/\n------------\n\nA really simple Contiki program that shows how to write Contiki programs. To\ncompile and test the program, go into the hello-world directory:\n\n    cd examples/hello-world\n\nRun the 'make' command.\n\n    make\n\nThis will compile the hello-world program in the 'native' target.  This causes\nthe entire Contiki operating system and the hello-world application to be\ncompiled into a single program that can be run by typing the following command:\n\n    ./hello-world.native\n\nThis will print out the following text:\n\n    Contiki initiated, now starting process scheduling\n    Hello, world\n\nThe program will then appear to hang, and must be stopped by pressing the C key\nwhile holding down the Control key.\n\nirc/\n----\n\nAn IRC client. It can be compiled and run in the 'win32' target by\ntyping the following commands:\n\n    cd examples/irc\n    make\n    ./irc-client.win32\n\nMost likely you'll have to adjust the TCP/IP values set in main() in\nplatform/win32/contiki-main.c to match your needs.\n\nPlease consult cpu/native/net/README-WPCAP.md as well.\n\nmulti-threading/\n----------------\n\nA quite simple demonstration of the Contiki multi-threading library\nemploying two worker threads each running a recursive function. It\ncan be compiled and run in the 'native' target by typing the\nfollowing commands:\n\n    cd examples/multi-threading\n    make\n    ./multi-threading.native\n\nrime/\n-----\n\nContains a set of examples on how to use the Rime communications\nstack. To run those examples in the 'netsim' target (a very simple\nContiki network simulator), compile the programs with:\n\n    make TARGET=netsim\n\nYou will need to have GTK 1.x development libraries installed.\n\nRun the different programs:\n\n    ./test-abc.netsim\n    ./test-meshroute.netsim\n    ./test-rudolph0.netsim\n    ./test-rudolph1.netsim\n    ./test-treeroute.netsim\n    ./test-trickle.netsim\n\nMost of the examples requires you to click with the middle mouse\nbutton on one of the simulated nodes for something to happen.\n\nsky/\n----\n\nExamples inteded for running on the Tmote Sky board. To compile those, you need\nto have msp430-gcc (the gcc C compiler for the MSP430 microcontroller)\ninstalled.\n\nThe follwing programs are included:\n\n- blink.c          A simple program that blinks the on-board LEDs\n- sky-collect.c    Collects sensor data and energy profile values to a sink.\n  Press the \"user\" button on the Tmote Sky that is connected to the PC to make\n  the node a sink.\n- test-button.c    Toggles the LEDs when the button is pressed.\n- test-cfs.c       Tests the 1 mb flash memory of the Tmote Sky\n\ntelnet-server/\n--------------\n\nA simple TCP telnet server with a simple command shell. It can be\ncompiled and run in the 'minimal-net' target by typing the following\ncommands:\n\n    cd examples/telnet-server\n    make\n    ./telnet-server.minimal-net\n\nMost likely you'll have to adjust the TCP/IP values set in main() in\nplatform/minimal-net/contiki-main.c to match your needs.\n\nPlease consult cpu/native/net/README-WPCAP.md as well if you are running\nMicrosoft Windows.\n\nwebbrowser/\n-----------\n\nA text mode web browser supporting links and forms. It can be compiled\nand run in the 'win32' target by typing the following commands:\n\n    cd examples/webbrowser\n    make\n    ./webbrowser.win32\n\nMost likely you'll have to adjust the TCP/IP values set in main() in\nplatform/win32/contiki-main.c to match your needs.\n\nPlease consult cpu/native/net/README-WPCAP.md as well.\n\nwebserver/\n----------\n\nA web server supporting dynamic content creation using \"scripts\" which\nare actually compiled-in C-functions. It can be compiled and run in the\n'minimal-net' target by typing the following commands:\n\n    cd examples/webserver\n    make\n    ./webserver-example.minimal-net\n\nAs an alternative to the static and dynamic compiled-in content the web\nserver can instead support \"external\" static-only content loaded from\nany storage supported by the 'Contiki File System' (CFS) interface. To\ncompile it in the 'minimal-net' target and have it load files from disk\nuse the following command:\n\n    make HTTPD-CFS=1\n\nMost likely you'll have to adjust the TCP/IP values set in main() in\nplatform/minimal-net/contiki-main.c to match your needs.\n\nPlease consult cpu/native/net/README-WPCAP.md as well if you are running\nMicrosoft Windows.\n\nwget/\n-----\n\nA command line program that retrieves files from web servers and saves them\nusing the 'Contiki File System' (CFS). It can be compiled and run in the\n'minimal-net' target by typing the following commands:\n\n    cd examples/wget\n    make\n    ./wget.minimal-net\n\nMost likely you'll have to adjust the TCP/IP values set in main() in\nplatform/minimal-net/contiki-main.c to match your needs.\n\nPlease consult cpu/native/net/README-WPCAP.md as well if you are running\nMicrosoft Windows.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.8115234375,
          "content": "The Contiki Operating System\n============================\n\n[![Build Status](https://travis-ci.org/contiki-os/contiki.svg?branch=master)](https://travis-ci.org/contiki-os/contiki/branches)\n\nContiki is an open source operating system that runs on tiny low-power\nmicrocontrollers and makes it possible to develop applications that\nmake efficient use of the hardware while providing standardized\nlow-power wireless communication for a range of hardware platforms.\n\nContiki is used in numerous commercial and non-commercial systems,\nsuch as city sound monitoring, street lights, networked electrical\npower meters, industrial monitoring, radiation monitoring,\nconstruction site monitoring, alarm systems, remote house monitoring,\nand so on.\n\nFor more information, see the Contiki website:\n\n[http://contiki-os.org](http://contiki-os.org)\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpu",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "regression-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}