{
  "metadata": {
    "timestamp": 1736710069662,
    "page": 682,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "djpohly/dwl",
      "stars": 1935,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0537109375,
          "content": "dwl\n*.o\n*-protocol.c\n*-protocol.h\n.ccls-cache\nconfig.h\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.255859375,
          "content": "# Changelog\n\n* [0.5](#0.5)\n\n## 0.5\n\n### Added\n\n* Allow configure x and y position of outputs ([#301][301])\n* Implement repeatable keybindings ([#368][368])\n* Print app id in printstatus() output ([#381][381])\n* Display client count in monocle symbol ([#387][387])\n* Export XCURSOR_SIZE to fix apps using an older version of Qt ([#425][425])\n* Support for wp-fractional-scale-v1 (through wlr_scene: [wlroots!3511][wlroots!3511])\n* dwl now sends `wl_surface.preferred_buffer_scale` (through wlr_scene: [wlroots!4269][wlroots!4269])\n* Add support for xdg-shell v6 ([#465][465])\n* Add support for wp-cursor-shape-v1 ([#444][444])\n* Add desktop file ([#484][484])\n* Add macro to easily configure colors ([#466][466])\n* Color of urgent clients are now red ([#494][494])\n* New flag `-d` and option `log_level` to change the wlroots debug level\n* Add CHANGELOG.md ([#501][501])\n\n[301]: https://github.com/djpohly/dwl/pull/301\n[368]: https://github.com/djpohly/dwl/pull/368\n[381]: https://github.com/djpohly/dwl/pull/381\n[387]: https://github.com/djpohly/dwl/issues/387\n[425]: https://github.com/djpohly/dwl/pull/425\n[wlroots!4269]: https://gitlab.freedesktop.org/wlroots/wlroots/-/merge_requests/4269\n[wlroots!3511]: https://gitlab.freedesktop.org/wlroots/wlroots/-/merge_requests/3511\n[465]: https://github.com/djpohly/dwl/pull/465\n[444]: https://github.com/djpohly/dwl/pull/444\n[484]: https://github.com/djpohly/dwl/pull/484\n[466]: https://github.com/djpohly/dwl/issues/466\n[494]: https://github.com/djpohly/dwl/pull/494\n[501]: https://github.com/djpohly/dwl/pull/501\n\n\n### Changed\n\n* Replace `tags` with `TAGCOUNT` in config.def.h ([#403][403])\n* Pop ups are now destroyed when focusing another client ([#408][408])\n* dwl does not longer respect size hints, instead clip windows if they are\n  larger than they should be ([#455][455])\n* The version of wlr-layer-shell-unstable-v1 was lowered to 3 (from 4)\n* Use the same border color as dwm ([#494][494])\n\n[403]: https://github.com/djpohly/dwl/pull/403\n[408]: https://github.com/djpohly/dwl/pull/409\n[455]: https://github.com/djpohly/dwl/pull/455\n[494]: https://github.com/djpohly/dwl/pull/494\n\n\n### Removed\n\n* Remove unused `rootcolor` option ([#401][401])\n* Remove support for wlr-input-inhibitor-unstable-v1 ([#430][430])\n* Remove support for KDE idle protocol ([#431][431])\n\n[401]: https://github.com/djpohly/dwl/pull/401\n[430]: https://github.com/djpohly/dwl/pull/430\n[431]: https://github.com/djpohly/dwl/pull/431\n\n\n### Fixed\n\n* Fix crash when creating a layer surface with all outputs disabled\n  ([#421][421])\n* Fix other clients being shown as focused if the focused client have pop ups\n  open ([#408][408])\n* Resize fullscreen clients when updating monitor mode\n* dwl no longer crash at exit like sometimes did\n* Fullscreen background appearing above clients ([#487][487])\n* Fix a segfault when user provides invalid xkb_rules ([#518][518])\n\n[421]: https://github.com/djpohly/dwl/pull/421\n[408]: https://github.com/djpohly/dwl/issues/408\n[487]: https://github.com/djpohly/dwl/issues/487\n[518]: https://github.com/djpohly/dwl/pull/518\n\n\n### Contributors\n\n* A Frederick Christensen\n* Angelo Antony\n* Ben Collerson\n* Devin J. Pohly\n* Forrest Bushstone\n* gan-of-culture\n* godalming123\n* Job79\n* link2xt\n* Micah Gorrell\n* Nikita Ivanov\n* Palanix\n* pino-desktop\n* Weiseguy\n* Yves Zoundi\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.91015625,
          "content": "dwl - dwm for Wayland\n\nCopyright Â© 2020 dwl team\n\nSee also the files LICENSE.tinywl, LICENSE.dwm and LICENSE.sway.\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\n----\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "LICENSE.dwm",
          "type": "blob",
          "size": 1.9638671875,
          "content": "Portions of dwl based on dwm code are used under the following license:\n\nMIT/X Consortium License\n\nÂ© 2006-2019 Anselm R Garbe <anselm@garbe.ca>\nÂ© 2006-2009 Jukka Salmi <jukka at salmi dot ch>\nÂ© 2006-2007 Sander van Dijk <a dot h dot vandijk at gmail dot com>\nÂ© 2007-2011 Peter Hartlich <sgkkr at hartlich dot com>\nÂ© 2007-2009 Szabolcs Nagy <nszabolcs at gmail dot com>\nÂ© 2007-2009 Christof Musik <christof at sendfax dot de>\nÂ© 2007-2009 Premysl Hruby <dfenze at gmail dot com>\nÂ© 2007-2008 Enno Gottox Boland <gottox at s01 dot de>\nÂ© 2008 Martin Hurton <martin dot hurton at gmail dot com>\nÂ© 2008 Neale Pickett <neale dot woozle dot org>\nÂ© 2009 Mate Nagy <mnagy at port70 dot net>\nÂ© 2010-2016 Hiltjo Posthuma <hiltjo@codemadness.org>\nÂ© 2010-2012 Connor Lane Smith <cls@lubutu.com>\nÂ© 2011 Christoph Lohmann <20h@r-36.net>\nÂ© 2015-2016 Quentin Rameau <quinq@fifth.space>\nÂ© 2015-2016 Eric Pruitt <eric.pruitt@gmail.com>\nÂ© 2016-2017 Markus Teich <markus.teich@stusta.mhn.de>\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "LICENSE.sway",
          "type": "blob",
          "size": 1.0361328125,
          "content": "Copyright (c) 2016-2017 Drew DeVault\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE.tinywl",
          "type": "blob",
          "size": 7.044921875,
          "content": "dwl is originally based on TinyWL, which is used under the following license:\n\nThis work is licensed under CC0, which effectively puts it in the public domain.\n\n---\n\nCreative Commons Legal Code\n\nCC0 1.0 Universal\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\n    HEREUNDER.\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for\nthe purpose of contributing to a commons of creative, cultural and\nscientific works (\"Commons\") that the public can reliably and without fear\nof later claims of infringement build upon, modify, incorporate in other\nworks, reuse and redistribute as freely as possible in any form whatsoever\nand for any purposes, including without limitation commercial purposes.\nThese owners may contribute to the Commons to promote the ideal of a free\nculture and the further production of creative, cultural and scientific\nworks, or to gain reputation or greater distribution for their Work in\npart through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any\nexpectation of additional consideration or compensation, the person\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work, voluntarily\nelects to apply CC0 to the Work and publicly distribute the Work under its\nterms, with knowledge of his or her Copyright and Related Rights in the\nWork and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not\nlimited to, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display,\n     communicate, and translate a Work;\n ii. moral rights retained by the original author(s) and/or performer(s);\niii. publicity and privacy rights pertaining to a person's image or\n     likeness depicted in a Work;\n iv. rights protecting against unfair competition in regards to a Work,\n     subject to the limitations in paragraph 4(a), below;\n  v. rights protecting the extraction, dissemination, use and reuse of data\n     in a Work;\n vi. database rights (such as those arising under Directive 96/9/EC of the\n     European Parliament and of the Council of 11 March 1996 on the legal\n     protection of databases, and under any national implementation\n     thereof, including any amended or successor version of such\n     directive); and\nvii. other similar, equivalent or corresponding rights throughout the\n     world based on applicable law or treaty, and any national\n     implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention\nof, applicable law, Affirmer hereby overtly, fully, permanently,\nirrevocably and unconditionally waives, abandons, and surrenders all of\nAffirmer's Copyright and Related Rights and associated claims and causes\nof action, whether now known or unknown (including existing as well as\nfuture claims and causes of action), in the Work (i) in all territories\nworldwide, (ii) for the maximum duration provided by applicable law or\ntreaty (including future time extensions), (iii) in any current or future\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\nincluding without limitation commercial, advertising or promotional\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\nmember of the public at large and to the detriment of Affirmer's heirs and\nsuccessors, fully intending that such Waiver shall not be subject to\nrevocation, rescission, cancellation, termination, or any other legal or\nequitable action to disrupt the quiet enjoyment of the Work by the public\nas contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason\nbe judged legally invalid or ineffective under applicable law, then the\nWaiver shall be preserved to the maximum extent permitted taking into\naccount Affirmer's express Statement of Purpose. In addition, to the\nextent the Waiver is so judged Affirmer hereby grants to each affected\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\nirrevocable and unconditional license to exercise Affirmer's Copyright and\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\nmaximum duration provided by applicable law or treaty (including future\ntime extensions), (iii) in any current or future medium and for any number\nof copies, and (iv) for any purpose whatsoever, including without\nlimitation commercial, advertising or promotional purposes (the\n\"License\"). The License shall be deemed effective as of the date CC0 was\napplied by Affirmer to the Work. Should any part of the License for any\nreason be judged legally invalid or ineffective under applicable law, such\npartial invalidity or ineffectiveness shall not invalidate the remainder\nof the License, and in such case Affirmer hereby affirms that he or she\nwill not (i) exercise any of his or her remaining Copyright and Related\nRights in the Work or (ii) assert any associated claims and causes of\naction with respect to the Work, in either case contrary to Affirmer's\nexpress Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\n    surrendered, licensed or otherwise affected by this document.\n b. Affirmer offers the Work as-is and makes no representations or\n    warranties of any kind concerning the Work, express, implied,\n    statutory or otherwise, including without limitation warranties of\n    title, merchantability, fitness for a particular purpose, non\n    infringement, or the absence of latent or other defects, accuracy, or\n    the present or absence of errors, whether or not discoverable, all to\n    the greatest extent permissible under applicable law.\n c. Affirmer disclaims responsibility for clearing rights of other persons\n    that may apply to the Work or any use thereof, including without\n    limitation any person's Copyright and Related Rights in the Work.\n    Further, Affirmer disclaims responsibility for obtaining any necessary\n    consents, permissions or other rights required for any use of the\n    Work.\n d. Affirmer understands and acknowledges that Creative Commons is not a\n    party to this document and has no duty or obligation with respect to\n    this CC0 or use of the Work.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.462890625,
          "content": ".POSIX:\n.SUFFIXES:\n\ninclude config.mk\n\n# flags for compiling\nDWLCPPFLAGS = -I. -DWLR_USE_UNSTABLE -D_POSIX_C_SOURCE=200809L -DVERSION=\\\"$(VERSION)\\\" $(XWAYLAND)\nDWLDEVCFLAGS = -g -pedantic -Wall -Wextra -Wdeclaration-after-statement -Wno-unused-parameter -Wno-sign-compare -Wshadow -Wunused-macros\\\n\t-Werror=strict-prototypes -Werror=implicit -Werror=return-type -Werror=incompatible-pointer-types\n\n# CFLAGS / LDFLAGS\nPKGS      = wlroots wayland-server xkbcommon libinput $(XLIBS)\nDWLCFLAGS = `$(PKG_CONFIG) --cflags $(PKGS)` $(DWLCPPFLAGS) $(DWLDEVCFLAGS) $(CFLAGS)\nLDLIBS    = `$(PKG_CONFIG) --libs $(PKGS)` $(LIBS)\n\nall: dwl\ndwl: dwl.o util.o\n\t$(CC) dwl.o util.o $(LDLIBS) $(LDFLAGS) $(DWLCFLAGS) -o $@\ndwl.o: dwl.c config.mk config.h client.h cursor-shape-v1-protocol.h xdg-shell-protocol.h wlr-layer-shell-unstable-v1-protocol.h\nutil.o: util.c util.h\n\n# wayland-scanner is a tool which generates C headers and rigging for Wayland\n# protocols, which are specified in XML. wlroots requires you to rig these up\n# to your build system yourself and provide them in the include path.\nWAYLAND_SCANNER   = `$(PKG_CONFIG) --variable=wayland_scanner wayland-scanner`\nWAYLAND_PROTOCOLS = `$(PKG_CONFIG) --variable=pkgdatadir wayland-protocols`\n\nxdg-shell-protocol.h:\n\t$(WAYLAND_SCANNER) server-header \\\n\t\t$(WAYLAND_PROTOCOLS)/stable/xdg-shell/xdg-shell.xml $@\nwlr-layer-shell-unstable-v1-protocol.h:\n\t$(WAYLAND_SCANNER) server-header \\\n\t\tprotocols/wlr-layer-shell-unstable-v1.xml $@\ncursor-shape-v1-protocol.h:\n\t$(WAYLAND_SCANNER) server-header \\\n\t\t$(WAYLAND_PROTOCOLS)/staging/cursor-shape/cursor-shape-v1.xml $@\n\nconfig.h:\n\tcp config.def.h $@\nclean:\n\trm -f dwl *.o *-protocol.h\n\ndist: clean\n\tmkdir -p dwl-$(VERSION)\n\tcp -R LICENSE* Makefile README.md client.h config.def.h\\\n\t\tconfig.mk protocols dwl.1 dwl.c util.c util.h dwl.desktop\\\n\t\tdwl-$(VERSION)\n\ttar -caf dwl-$(VERSION).tar.gz dwl-$(VERSION)\n\trm -rf dwl-$(VERSION)\n\ninstall: dwl\n\tmkdir -p $(DESTDIR)$(PREFIX)/bin\n\tcp -f dwl $(DESTDIR)$(PREFIX)/bin\n\tchmod 755 $(DESTDIR)$(PREFIX)/bin/dwl\n\tmkdir -p $(DESTDIR)$(MANDIR)/man1\n\tcp -f dwl.1 $(DESTDIR)$(MANDIR)/man1\n\tchmod 644 $(DESTDIR)$(MANDIR)/man1/dwl.1\n\tmkdir -p $(DESTDIR)$(DATADIR)/wayland-sessions\n\tcp -f dwl.desktop $(DESTDIR)$(DATADIR)/wayland-sessions/dwl.desktop\n\tchmod 644 $(DESTDIR)$(DATADIR)/wayland-sessions/dwl.desktop\nuninstall:\n\trm -f $(DESTDIR)$(PREFIX)/bin/dwl $(DESTDIR)$(MANDIR)/man1/dwl.1 $(DESTDIR)$(DATADIR)/wayland-sessions/dwl.desktop\n\n.SUFFIXES: .c .o\n.c.o:\n\t$(CC) $(CPPFLAGS) $(DWLCFLAGS) -c $<\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.4375,
          "content": "# dwl - dwm for Wayland\n\n> ### â ï¸ Migrated to Codeberg\n>\n> This project has [migrated to Codeberg](https://codeberg.org/dwl/dwl).\n\n\nJoin us on our IRC channel: [#dwl on Libera Chat]  \nOr on our [Discord server].\n\ndwl is a compact, hackable compositor for [Wayland] based on [wlroots]. It is\nintended to fill the same space in the Wayland world that dwm does in X11,\nprimarily in terms of philosophy, and secondarily in terms of functionality.\nLike dwm, dwl is:\n\n- Easy to understand, hack on, and extend with patches\n- One C source file (or a very small number) configurable via `config.h`\n- Limited to 2200 SLOC to promote hackability\n- Tied to as few external dependencies as possible\n\ndwl is not meant to provide every feature under the sun. Instead, like dwm, it\nsticks to features which are necessary, simple, and straightforward to implement\ngiven the base on which it is built. Implemented default features are:\n\n- Any features provided by dwm/Xlib: simple window borders, tags, keybindings,\n  client rules, mouse move/resize. Providing a built-in status bar is an\n  exception to this goal, to avoid dependencies on font rendering and/or\n  drawing libraries when an external bar could work well.\n- Configurable multi-monitor layout support, including position and rotation\n- Configurable HiDPI/multi-DPI support\n- Idle-inhibit protocol which lets applications such as mpv disable idle\n  monitoring\n- Provide information to external status bars via stdout/stdin\n- Urgency hints via xdg-activate protocol\n- Support screen lockers via ext-session-lock-v1 protocol\n- Various Wayland protocols\n- XWayland support as provided by wlroots (can be enabled in `config.mk`)\n- Zero flickering - Wayland users naturally expect that \"every frame is perfect\"\n- Layer shell popups (used by Waybar)\n- Damage tracking provided by scenegraph API\n\nFeatures under consideration (possibly as patches) are:\n\n- Protocols made trivial by wlroots\n- Implement the text-input and input-method protocols to support IME once ibus\n  implements input-method v2 (see https://github.com/ibus/ibus/pull/2256 and\n  https://github.com/djpohly/dwl/pull/235)\n\nFeature *non-goals* for the main codebase include:\n\n- Client-side decoration (any more than is necessary to tell the clients not to)\n- Client-initiated window management, such as move, resize, and close, which can\n  be done through the compositor\n- Animations and visual effects\n\n## Building dwl\n\ndwl has the following dependencies:\n```\nlibinput\nwayland\nwlroots (compiled with the libinput backend)\nxkbcommon\nwayland-protocols (compile-time only)\npkg-config (compile-time only)\n```\nIf you enable X11 support:\n```\nlibxcb\nlibxcb-wm\nwlroots (compiled with X11 support)\nXwayland (runtime only)\n```\n\nSimply install these (and their `-devel` versions if your distro has separate\ndevelopment packages) and run `make`.  If you wish to build against a Git\nversion of wlroots, check out the [wlroots-next branch].\n\nTo enable XWayland, you should uncomment its flags in `config.mk`.\n\n## Configuration\n\nAll configuration is done by editing `config.h` and recompiling, in the same\nmanner as dwm. There is no way to separately restart the window manager in\nWayland without restarting the entire display server, so any changes will take\neffect the next time dwl is executed.\n\nAs in the dwm community, we encourage users to share patches they have created.\nCheck out the [patches page on our wiki]!\n\n## Running dwl\n\ndwl can be run on any of the backends supported by wlroots. This means you can\nrun it as a separate window inside either an X11 or Wayland session, as well\nas directly from a VT console. Depending on your distro's setup, you may need\nto add your user to the `video` and `input` groups before you can run dwl on\na VT. If you are using `elogind` or `systemd-logind` you need to install\npolkit; otherwise you need to add yourself in the `seat` group and\nenable/start the seatd daemon.\n\nWhen dwl is run with no arguments, it will launch the server and begin handling\nany shortcuts configured in `config.h`. There is no status bar or other\ndecoration initially; these are instead clients that can be run within\nthe Wayland session.\nDo note that the background color is black.\n\nIf you would like to run a script or command automatically at startup, you can\nspecify the command using the `-s` option. This command will be executed as a\nshell command using `/bin/sh -c`.  It serves a similar function to `.xinitrc`,\nbut differs in that the display server will not shut down when this process\nterminates. Instead, dwl will send this process a SIGTERM at shutdown and wait\nfor it to terminate (if it hasn't already). This makes it ideal for execing into\na user service manager like [s6], [anopa], [runit], or [`systemd --user`].\n\nNote: The `-s` command is run as a *child process* of dwl, which means that it\ndoes not have the ability to affect the environment of dwl or of any processes\nthat it spawns. If you need to set environment variables that affect the entire\ndwl session, these must be set prior to running dwl. For example, Wayland\nrequires a valid `XDG_RUNTIME_DIR`, which is usually set up by a session manager\nsuch as `elogind` or `systemd-logind`.  If your system doesn't do this\nautomatically, you will need to configure it prior to launching `dwl`, e.g.:\n\n    export XDG_RUNTIME_DIR=/tmp/xdg-runtime-$(id -u)\n    mkdir -p $XDG_RUNTIME_DIR\n    dwl\n\n### Status information\n\nInformation about selected layouts, current window title, app-id, and\nselected/occupied/urgent tags is written to the stdin of the `-s` command (see\nthe `printstatus()` function for details).  This information can be used to\npopulate an external status bar with a script that parses the information.\nFailing to read this information will cause dwl to block, so if you do want to\nrun a startup command that does not consume the status information, you can\nclose standard input with the `<&-` shell redirection, for example:\n\n    dwl -s 'foot --server <&-'\n\nIf your startup command is a shell script, you can achieve the same inside the\nscript with the line\n\n    exec <&-\n\nTo get a list of status bars that work with dwl consult our [wiki].\n\n## Replacements for X applications\n\nYou can find a [list of useful resources on our wiki].\n\n## Acknowledgements\n\ndwl began by extending the TinyWL example provided (CC0) by the sway/wlroots\ndevelopers. This was made possible in many cases by looking at how sway\naccomplished something, then trying to do the same in as suckless a way as\npossible.\n\nMany thanks to suckless.org and the dwm developers and community for the\ninspiration, and to the various contributors to the project, including:\n\n- Alexander Courtis for the XWayland implementation\n- Guido Cella for the layer-shell protocol implementation, patch maintenance,\n  and for helping to keep the project running\n- Stivvo for output management and fullscreen support, and patch maintenance\n\n\n[Discord server]: https://discord.gg/jJxZnrGPWN\n[#dwl on Libera Chat]: https://web.libera.chat/?channels=#dwl\n[Wayland]: https://wayland.freedesktop.org/\n[wlroots]: https://gitlab.freedesktop.org/wlroots/wlroots/\n[wlroots-next branch]: https://github.com/djpohly/dwl/tree/wlroots-next\n[patches page on our wiki]: https://github.com/djpohly/dwl/wiki/Patches\n[s6]: https://skarnet.org/software/s6/\n[anopa]: https://jjacky.com/anopa/\n[runit]: http://smarden.org/runit/faq.html#userservices\n[`systemd --user`]: https://wiki.archlinux.org/title/Systemd/User\n[wiki]: https://github.com/djpohly/dwl/wiki#compatible-status-bars\n[list of useful resources on our wiki]:\n    https://github.com/djpohly/dwl/wiki#migrating-from-x\n"
        },
        {
          "name": "client.h",
          "type": "blob",
          "size": 9.4208984375,
          "content": "/*\n * Attempt to consolidate unavoidable suck into one file, away from dwl.c.  This\n * file is not meant to be pretty.  We use a .h file with static inline\n * functions instead of a separate .c module, or function pointers like sway, so\n * that they will simply compile out if the chosen #defines leave them unused.\n */\n\n/* Leave these functions first; they're used in the others */\nstatic inline int\nclient_is_x11(Client *c)\n{\n#ifdef XWAYLAND\n\treturn c->type == X11Managed || c->type == X11Unmanaged;\n#endif\n\treturn 0;\n}\n\nstatic inline struct wlr_surface *\nclient_surface(Client *c)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn c->surface.xwayland->surface;\n#endif\n\treturn c->surface.xdg->surface;\n}\n\nstatic inline int\ntoplevel_from_wlr_surface(struct wlr_surface *s, Client **pc, LayerSurface **pl)\n{\n\tstruct wlr_xdg_surface *xdg_surface, *tmp_xdg_surface;\n\tstruct wlr_surface *root_surface;\n\tstruct wlr_layer_surface_v1 *layer_surface;\n\tClient *c = NULL;\n\tLayerSurface *l = NULL;\n\tint type = -1;\n#ifdef XWAYLAND\n\tstruct wlr_xwayland_surface *xsurface;\n#endif\n\n\tif (!s)\n\t\treturn -1;\n\troot_surface = wlr_surface_get_root_surface(s);\n\n#ifdef XWAYLAND\n\tif ((xsurface = wlr_xwayland_surface_try_from_wlr_surface(root_surface))) {\n\t\tc = xsurface->data;\n\t\ttype = c->type;\n\t\tgoto end;\n\t}\n#endif\n\n\tif ((layer_surface = wlr_layer_surface_v1_try_from_wlr_surface(root_surface))) {\n\t\tl = layer_surface->data;\n\t\ttype = LayerShell;\n\t\tgoto end;\n\t}\n\n\txdg_surface = wlr_xdg_surface_try_from_wlr_surface(root_surface);\n\twhile (xdg_surface) {\n\t\ttmp_xdg_surface = NULL;\n\t\tswitch (xdg_surface->role) {\n\t\tcase WLR_XDG_SURFACE_ROLE_POPUP:\n\t\t\tif (!xdg_surface->popup || !xdg_surface->popup->parent)\n\t\t\t\treturn -1;\n\n\t\t\ttmp_xdg_surface = wlr_xdg_surface_try_from_wlr_surface(xdg_surface->popup->parent);\n\n\t\t\tif (!tmp_xdg_surface)\n\t\t\t\treturn toplevel_from_wlr_surface(xdg_surface->popup->parent, pc, pl);\n\n\t\t\txdg_surface = tmp_xdg_surface;\n\t\t\tbreak;\n\t\tcase WLR_XDG_SURFACE_ROLE_TOPLEVEL:\n\t\t\tc = xdg_surface->data;\n\t\t\ttype = c->type;\n\t\t\tgoto end;\n\t\tcase WLR_XDG_SURFACE_ROLE_NONE:\n\t\t\treturn -1;\n\t\t}\n\t}\n\nend:\n\tif (pl)\n\t\t*pl = l;\n\tif (pc)\n\t\t*pc = c;\n\treturn type;\n}\n\n/* The others */\nstatic inline void\nclient_activate_surface(struct wlr_surface *s, int activated)\n{\n\tstruct wlr_xdg_toplevel *toplevel;\n#ifdef XWAYLAND\n\tstruct wlr_xwayland_surface *xsurface;\n\tif ((xsurface = wlr_xwayland_surface_try_from_wlr_surface(s))) {\n\t\twlr_xwayland_surface_activate(xsurface, activated);\n\t\treturn;\n\t}\n#endif\n\tif ((toplevel = wlr_xdg_toplevel_try_from_wlr_surface(s)))\n\t\twlr_xdg_toplevel_set_activated(toplevel, activated);\n}\n\nstatic inline uint32_t\nclient_set_bounds(Client *c, int32_t width, int32_t height)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn 0;\n#endif\n\tif (wl_resource_get_version(c->surface.xdg->toplevel->resource) >=\n\t\t\tXDG_TOPLEVEL_CONFIGURE_BOUNDS_SINCE_VERSION && width >= 0 && height >= 0\n\t\t\t&& (c->bounds.width != width || c->bounds.height != height)) {\n\t\tc->bounds.width = width;\n\t\tc->bounds.height = height;\n\t\treturn wlr_xdg_toplevel_set_bounds(c->surface.xdg->toplevel, width, height);\n\t}\n\treturn 0;\n}\n\nstatic inline const char *\nclient_get_appid(Client *c)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn c->surface.xwayland->class;\n#endif\n\treturn c->surface.xdg->toplevel->app_id;\n}\n\nstatic inline void\nclient_get_clip(Client *c, struct wlr_box *clip)\n{\n\tstruct wlr_box xdg_geom = {0};\n\t*clip = (struct wlr_box){\n\t\t.x = 0,\n\t\t.y = 0,\n\t\t.width = c->geom.width - c->bw,\n\t\t.height = c->geom.height - c->bw,\n\t};\n\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn;\n#endif\n\n\twlr_xdg_surface_get_geometry(c->surface.xdg, &xdg_geom);\n\tclip->x = xdg_geom.x;\n\tclip->y = xdg_geom.y;\n}\n\nstatic inline void\nclient_get_geometry(Client *c, struct wlr_box *geom)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c)) {\n\t\tgeom->x = c->surface.xwayland->x;\n\t\tgeom->y = c->surface.xwayland->y;\n\t\tgeom->width = c->surface.xwayland->width;\n\t\tgeom->height = c->surface.xwayland->height;\n\t\treturn;\n\t}\n#endif\n\twlr_xdg_surface_get_geometry(c->surface.xdg, geom);\n}\n\nstatic inline Client *\nclient_get_parent(Client *c)\n{\n\tClient *p = NULL;\n#ifdef XWAYLAND\n\tif (client_is_x11(c) && c->surface.xwayland->parent)\n\t\ttoplevel_from_wlr_surface(c->surface.xwayland->parent->surface, &p, NULL);\n#endif\n\tif (c->surface.xdg->toplevel->parent)\n\t\ttoplevel_from_wlr_surface(c->surface.xdg->toplevel->parent->base->surface, &p, NULL);\n\treturn p;\n}\n\nstatic inline const char *\nclient_get_title(Client *c)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn c->surface.xwayland->title;\n#endif\n\treturn c->surface.xdg->toplevel->title;\n}\n\nstatic inline int\nclient_is_float_type(Client *c)\n{\n\tstruct wlr_xdg_toplevel *toplevel;\n\tstruct wlr_xdg_toplevel_state state;\n\n#ifdef XWAYLAND\n\tif (client_is_x11(c)) {\n\t\tstruct wlr_xwayland_surface *surface = c->surface.xwayland;\n\t\txcb_size_hints_t *size_hints = surface->size_hints;\n\t\tsize_t i;\n\t\tif (surface->modal)\n\t\t\treturn 1;\n\n\t\tfor (i = 0; i < surface->window_type_len; i++)\n\t\t\tif (surface->window_type[i] == netatom[NetWMWindowTypeDialog]\n\t\t\t\t\t|| surface->window_type[i] == netatom[NetWMWindowTypeSplash]\n\t\t\t\t\t|| surface->window_type[i] == netatom[NetWMWindowTypeToolbar]\n\t\t\t\t\t|| surface->window_type[i] == netatom[NetWMWindowTypeUtility])\n\t\t\t\treturn 1;\n\n\t\treturn size_hints && size_hints->min_width > 0 && size_hints->min_height > 0\n\t\t\t&& (size_hints->max_width == size_hints->min_width\n\t\t\t\t|| size_hints->max_height == size_hints->min_height);\n\t}\n#endif\n\n\ttoplevel = c->surface.xdg->toplevel;\n\tstate = toplevel->current;\n\treturn toplevel->parent || (state.min_width != 0 && state.min_height != 0\n\t\t&& (state.min_width == state.max_width\n\t\t\t|| state.min_height == state.max_height));\n}\n\nstatic inline int\nclient_is_rendered_on_mon(Client *c, Monitor *m)\n{\n\t/* This is needed for when you don't want to check formal assignment,\n\t * but rather actual displaying of the pixels.\n\t * Usually VISIBLEON suffices and is also faster. */\n\tstruct wlr_surface_output *s;\n\tint unused_lx, unused_ly;\n\tif (!wlr_scene_node_coords(&c->scene->node, &unused_lx, &unused_ly))\n\t\treturn 0;\n\twl_list_for_each(s, &client_surface(c)->current_outputs, link)\n\t\tif (s->output == m->wlr_output)\n\t\t\treturn 1;\n\treturn 0;\n}\n\nstatic inline int\nclient_is_stopped(Client *c)\n{\n\tint pid;\n\tsiginfo_t in = {0};\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn 0;\n#endif\n\n\twl_client_get_credentials(c->surface.xdg->client->client, &pid, NULL, NULL);\n\tif (waitid(P_PID, pid, &in, WNOHANG|WCONTINUED|WSTOPPED|WNOWAIT) < 0) {\n\t\t/* This process is not our child process, while is very unluckely that\n\t\t * it is stopped, in order to do not skip frames assume that it is. */\n\t\tif (errno == ECHILD)\n\t\t\treturn 1;\n\t} else if (in.si_pid) {\n\t\tif (in.si_code == CLD_STOPPED || in.si_code == CLD_TRAPPED)\n\t\t\treturn 1;\n\t\tif (in.si_code == CLD_CONTINUED)\n\t\t\treturn 0;\n\t}\n\n\treturn 0;\n}\n\nstatic inline int\nclient_is_unmanaged(Client *c)\n{\n#ifdef XWAYLAND\n\treturn c->type == X11Unmanaged;\n#endif\n\treturn 0;\n}\n\nstatic inline void\nclient_notify_enter(struct wlr_surface *s, struct wlr_keyboard *kb)\n{\n\tif (kb)\n\t\twlr_seat_keyboard_notify_enter(seat, s, kb->keycodes,\n\t\t\t\tkb->num_keycodes, &kb->modifiers);\n\telse\n\t\twlr_seat_keyboard_notify_enter(seat, s, NULL, 0, NULL);\n}\n\nstatic inline void\nclient_restack_surface(Client *c)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\twlr_xwayland_surface_restack(c->surface.xwayland, NULL,\n\t\t\t\tXCB_STACK_MODE_ABOVE);\n#endif\n\treturn;\n}\n\nstatic inline void\nclient_send_close(Client *c)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c)) {\n\t\twlr_xwayland_surface_close(c->surface.xwayland);\n\t\treturn;\n\t}\n#endif\n\twlr_xdg_toplevel_send_close(c->surface.xdg->toplevel);\n}\n\nstatic inline void\nclient_set_border_color(Client *c, const float color[static 4])\n{\n\tint i;\n\tfor (i = 0; i < 4; i++)\n\t\twlr_scene_rect_set_color(c->border[i], color);\n}\n\nstatic inline void\nclient_set_fullscreen(Client *c, int fullscreen)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c)) {\n\t\twlr_xwayland_surface_set_fullscreen(c->surface.xwayland, fullscreen);\n\t\treturn;\n\t}\n#endif\n\twlr_xdg_toplevel_set_fullscreen(c->surface.xdg->toplevel, fullscreen);\n}\n\nstatic inline uint32_t\nclient_set_size(Client *c, uint32_t width, uint32_t height)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c)) {\n\t\twlr_xwayland_surface_configure(c->surface.xwayland,\n\t\t\t\tc->geom.x, c->geom.y, width, height);\n\t\treturn 0;\n\t}\n#endif\n\tif (width == c->surface.xdg->toplevel->current.width\n\t\t\t&& height ==c->surface.xdg->toplevel->current.height)\n\t\treturn 0;\n\treturn wlr_xdg_toplevel_set_size(c->surface.xdg->toplevel, width, height);\n}\n\nstatic inline void\nclient_set_tiled(Client *c, uint32_t edges)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn;\n#endif\n\tif (wl_resource_get_version(c->surface.xdg->resource)\n\t\t\t>= XDG_TOPLEVEL_STATE_TILED_RIGHT_SINCE_VERSION) {\n\t\twlr_xdg_toplevel_set_tiled(c->surface.xdg->toplevel, edges);\n\t} else {\n\t\twlr_xdg_toplevel_set_maximized(c->surface.xdg->toplevel, edges != WLR_EDGE_NONE);\n\t}\n}\n\nstatic inline void\nclient_set_suspended(Client *c, int suspended)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c)) {\n\t\twlr_xwayland_surface_set_withdrawn(c->surface.xwayland, suspended);\n\t\treturn;\n\t}\n#endif\n\n\twlr_xdg_toplevel_set_suspended(c->surface.xdg->toplevel, suspended);\n}\n\nstatic inline int\nclient_wants_focus(Client *c)\n{\n#ifdef XWAYLAND\n\treturn client_is_unmanaged(c)\n\t\t&& wlr_xwayland_or_surface_wants_focus(c->surface.xwayland)\n\t\t&& wlr_xwayland_icccm_input_model(c->surface.xwayland) != WLR_ICCCM_INPUT_MODEL_NONE;\n#endif\n\treturn 0;\n}\n\nstatic inline int\nclient_wants_fullscreen(Client *c)\n{\n#ifdef XWAYLAND\n\tif (client_is_x11(c))\n\t\treturn c->surface.xwayland->fullscreen;\n#endif\n\treturn c->surface.xdg->toplevel->requested.fullscreen;\n}\n"
        },
        {
          "name": "config.def.h",
          "type": "blob",
          "size": 7.7392578125,
          "content": "/* Taken from https://github.com/djpohly/dwl/issues/466 */\n#define COLOR(hex)    { ((hex >> 24) & 0xFF) / 255.0f, \\\n                        ((hex >> 16) & 0xFF) / 255.0f, \\\n                        ((hex >> 8) & 0xFF) / 255.0f, \\\n                        (hex & 0xFF) / 255.0f }\n/* appearance */\nstatic const int sloppyfocus               = 1;  /* focus follows mouse */\nstatic const int bypass_surface_visibility = 0;  /* 1 means idle inhibitors will disable idle tracking even if it's surface isn't visible  */\nstatic const unsigned int borderpx         = 1;  /* border pixel of windows */\nstatic const float bordercolor[]           = COLOR(0x444444ff);\nstatic const float focuscolor[]            = COLOR(0x005577ff);\nstatic const float urgentcolor[]           = COLOR(0xff0000ff);\n/* To conform the xdg-protocol, set the alpha to zero to restore the old behavior */\nstatic const float fullscreen_bg[]         = {0.1, 0.1, 0.1, 1.0}; /* You can also use glsl colors */\n\n/* tagging - TAGCOUNT must be no greater than 31 */\n#define TAGCOUNT (9)\n\n/* logging */\nstatic int log_level = WLR_ERROR;\n\nstatic const Rule rules[] = {\n\t/* app_id     title       tags mask     isfloating   monitor */\n\t/* examples:\n\t{ \"Gimp\",     NULL,       0,            1,           -1 },\n\t*/\n\t{ \"firefox\",  NULL,       1 << 8,       0,           -1 },\n};\n\n/* layout(s) */\nstatic const Layout layouts[] = {\n\t/* symbol     arrange function */\n\t{ \"[]=\",      tile },\n\t{ \"><>\",      NULL },    /* no layout function means floating behavior */\n\t{ \"[M]\",      monocle },\n};\n\n/* monitors */\nstatic const MonitorRule monrules[] = {\n\t/* name       mfact nmaster scale layout       rotate/reflect                x    y */\n\t/* example of a HiDPI laptop monitor:\n\t{ \"eDP-1\",    0.5,  1,      2,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL,   -1,  -1 },\n\t*/\n\t/* defaults */\n\t{ NULL,       0.55, 1,      1,    &layouts[0], WL_OUTPUT_TRANSFORM_NORMAL,   -1,  -1 },\n};\n\n/* keyboard */\nstatic const struct xkb_rule_names xkb_rules = {\n\t/* can specify fields: rules, model, layout, variant, options */\n\t/* example:\n\t.options = \"ctrl:nocaps\",\n\t*/\n\t.options = NULL,\n};\n\nstatic const int repeat_rate = 25;\nstatic const int repeat_delay = 600;\n\n/* Trackpad */\nstatic const int tap_to_click = 1;\nstatic const int tap_and_drag = 1;\nstatic const int drag_lock = 1;\nstatic const int natural_scrolling = 0;\nstatic const int disable_while_typing = 1;\nstatic const int left_handed = 0;\nstatic const int middle_button_emulation = 0;\n/* You can choose between:\nLIBINPUT_CONFIG_SCROLL_NO_SCROLL\nLIBINPUT_CONFIG_SCROLL_2FG\nLIBINPUT_CONFIG_SCROLL_EDGE\nLIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN\n*/\nstatic const enum libinput_config_scroll_method scroll_method = LIBINPUT_CONFIG_SCROLL_2FG;\n\n/* You can choose between:\nLIBINPUT_CONFIG_CLICK_METHOD_NONE\nLIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS\nLIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER\n*/\nstatic const enum libinput_config_click_method click_method = LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS;\n\n/* You can choose between:\nLIBINPUT_CONFIG_SEND_EVENTS_ENABLED\nLIBINPUT_CONFIG_SEND_EVENTS_DISABLED\nLIBINPUT_CONFIG_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE\n*/\nstatic const uint32_t send_events_mode = LIBINPUT_CONFIG_SEND_EVENTS_ENABLED;\n\n/* You can choose between:\nLIBINPUT_CONFIG_ACCEL_PROFILE_FLAT\nLIBINPUT_CONFIG_ACCEL_PROFILE_ADAPTIVE\n*/\nstatic const enum libinput_config_accel_profile accel_profile = LIBINPUT_CONFIG_ACCEL_PROFILE_ADAPTIVE;\nstatic const double accel_speed = 0.0;\n/* You can choose between:\nLIBINPUT_CONFIG_TAP_MAP_LRM -- 1/2/3 finger tap maps to left/right/middle\nLIBINPUT_CONFIG_TAP_MAP_LMR -- 1/2/3 finger tap maps to left/middle/right\n*/\nstatic const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TAP_MAP_LRM;\n\n/* If you want to use the windows key for MODKEY, use WLR_MODIFIER_LOGO */\n#define MODKEY WLR_MODIFIER_ALT\n\n#define TAGKEYS(KEY,SKEY,TAG) \\\n\t{ MODKEY,                    KEY,            view,            {.ui = 1 << TAG} }, \\\n\t{ MODKEY|WLR_MODIFIER_CTRL,  KEY,            toggleview,      {.ui = 1 << TAG} }, \\\n\t{ MODKEY|WLR_MODIFIER_SHIFT, SKEY,           tag,             {.ui = 1 << TAG} }, \\\n\t{ MODKEY|WLR_MODIFIER_CTRL|WLR_MODIFIER_SHIFT,SKEY,toggletag, {.ui = 1 << TAG} }\n\n/* helper for spawning shell commands in the pre dwm-5.0 fashion */\n#define SHCMD(cmd) { .v = (const char*[]){ \"/bin/sh\", \"-c\", cmd, NULL } }\n\n/* commands */\nstatic const char *termcmd[] = { \"foot\", NULL };\nstatic const char *menucmd[] = { \"bemenu-run\", NULL };\n\nstatic const Key keys[] = {\n\t/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */\n\t/* modifier                  key                 function        argument */\n\t{ MODKEY,                    XKB_KEY_p,          spawn,          {.v = menucmd} },\n\t{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },\n\t{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },\n\t{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },\n\t{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },\n\t{ MODKEY,                    XKB_KEY_d,          incnmaster,     {.i = -1} },\n\t{ MODKEY,                    XKB_KEY_h,          setmfact,       {.f = -0.05} },\n\t{ MODKEY,                    XKB_KEY_l,          setmfact,       {.f = +0.05} },\n\t{ MODKEY,                    XKB_KEY_Return,     zoom,           {0} },\n\t{ MODKEY,                    XKB_KEY_Tab,        view,           {0} },\n\t{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_C,          killclient,     {0} },\n\t{ MODKEY,                    XKB_KEY_t,          setlayout,      {.v = &layouts[0]} },\n\t{ MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },\n\t{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },\n\t{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },\n\t{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },\n\t{ MODKEY,                    XKB_KEY_e,         togglefullscreen, {0} },\n\t{ MODKEY,                    XKB_KEY_0,          view,           {.ui = ~0} },\n\t{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_parenright, tag,            {.ui = ~0} },\n\t{ MODKEY,                    XKB_KEY_comma,      focusmon,       {.i = WLR_DIRECTION_LEFT} },\n\t{ MODKEY,                    XKB_KEY_period,     focusmon,       {.i = WLR_DIRECTION_RIGHT} },\n\t{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_less,       tagmon,         {.i = WLR_DIRECTION_LEFT} },\n\t{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_greater,    tagmon,         {.i = WLR_DIRECTION_RIGHT} },\n\tTAGKEYS(          XKB_KEY_1, XKB_KEY_exclam,                     0),\n\tTAGKEYS(          XKB_KEY_2, XKB_KEY_at,                         1),\n\tTAGKEYS(          XKB_KEY_3, XKB_KEY_numbersign,                 2),\n\tTAGKEYS(          XKB_KEY_4, XKB_KEY_dollar,                     3),\n\tTAGKEYS(          XKB_KEY_5, XKB_KEY_percent,                    4),\n\tTAGKEYS(          XKB_KEY_6, XKB_KEY_asciicircum,                5),\n\tTAGKEYS(          XKB_KEY_7, XKB_KEY_ampersand,                  6),\n\tTAGKEYS(          XKB_KEY_8, XKB_KEY_asterisk,                   7),\n\tTAGKEYS(          XKB_KEY_9, XKB_KEY_parenleft,                  8),\n\t{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Q,          quit,           {0} },\n\n\t/* Ctrl-Alt-Backspace and Ctrl-Alt-Fx used to be handled by X server */\n\t{ WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_Terminate_Server, quit, {0} },\n\t/* Ctrl-Alt-Fx is used to switch to another VT, if you don't know what a VT is\n\t * do not remove them.\n\t */\n#define CHVT(n) { WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_XF86Switch_VT_##n, chvt, {.ui = (n)} }\n\tCHVT(1), CHVT(2), CHVT(3), CHVT(4), CHVT(5), CHVT(6),\n\tCHVT(7), CHVT(8), CHVT(9), CHVT(10), CHVT(11), CHVT(12),\n};\n\nstatic const Button buttons[] = {\n\t{ MODKEY, BTN_LEFT,   moveresize,     {.ui = CurMove} },\n\t{ MODKEY, BTN_MIDDLE, togglefloating, {0} },\n\t{ MODKEY, BTN_RIGHT,  moveresize,     {.ui = CurResize} },\n};\n"
        },
        {
          "name": "config.mk",
          "type": "blob",
          "size": 0.2939453125,
          "content": "_VERSION = 0.5\nVERSION  = `git describe --tags --dirty 2>/dev/null || echo $(_VERSION)`\n\nPKG_CONFIG = pkg-config\n\n# paths\nPREFIX = /usr/local\nMANDIR = $(PREFIX)/share/man\nDATADIR = $(PREFIX)/share\n\nXWAYLAND =\nXLIBS =\n# Uncomment to build XWayland support\n#XWAYLAND = -DXWAYLAND\n#XLIBS = xcb xcb-icccm\n"
        },
        {
          "name": "dwl.1",
          "type": "blob",
          "size": 3.296875,
          "content": ".Dd January 8, 2021\n.Dt DWL 1\n.Os\n.Sh NAME\n.Nm dwl\n.Nd dwm for Wayland\n.Sh SYNOPSIS\n.Nm\n.Op Fl v\n.Op Fl d\n.Op Fl s Ar startup command\n.Sh DESCRIPTION\n.Nm\nis a Wayland compositor based on wlroots.\nIt is intended to fill the same space in the Wayland world that\n.Nm dwm\ndoes for X11.\n.Pp\nWhen given the\n.Fl v\noption,\n.Nm\nwrites its name and version to standard error and exits unsuccessfully.\n.Pp\nWhen given the\n.Fl d\noption,\n.Nm\nenables full wlroots logging, including debug information.\n.Pp\nWhen given the\n.Fl s\noption,\n.Nm\nstarts a shell process running\n.Ar command\nwhen starting.\nWhen stopping, it sends\n.Dv SIGTERM\nto the child process and waits for it to exit.\n.Pp\nUsers are encouraged to customize\n.Nm\nby editing the sources, in particular\n.Pa config.h .\nThe default key bindings are as follows:\n.Bl -tag -width 20n -offset indent -compact\n.It Mod-[1-9]\nShow only all windows with a tag.\n.It Mod-Ctrl-[1-9]\nShow all windows with a tag.\n.It Mod-Shift-[1-9]\nMove window to a single tag.\n.It Mod-Ctrl-Shift-[1-9]\nToggle tag for window.\n.It Mod-p\nSpawn\n.Nm bemenu-run .\n.It Mod-Shift-Return\nSpawn\n.Nm foot .\n.It Mod-[jk]\nMove focus down/up the stack.\n.It Mod-[id]\nIncrease/decrease number of windows in master area.\n.It Mod-[hl]\nDecrease/increase master area.\n.It Mod-Return\nMove window on top of stack or switch top of stack with second window.\n.It Mod-Tab\nShow only all windows with previous tag.\n.It Mod-Shift-c\nClose window.\n.It Mod-t\nSwitch to tabbed layout.\n.It Mod-f\nSwitch to floating layout.\n.It Mod-m\nSwitch to monocle layout.\n.It Mod-Space\nSwitch to previous layout.\n.It Mod-Shift-Space\nToggle floating state of window.\n.It Mod-e\nToggle fullscreen state of window.\n.It Mod-0\nShow all windows.\n.It Mod-Shift-0\nSet all tags for window.\n.It Mod-,\nMove focus to previous monitor.\n.It Mod-.\nMove focus to next monitor.\n.It Mod-Shift-,\nMove window to previous monitor.\n.It Mod-Shift-.\nMove window to next monitor.\n.It Mod-Shift-q\nQuit\n.Nm .\n.El\nThese might differ depending on your keyboard layout.\n.Sh ENVIRONMENT\nThese environment variables are used by\n.Nm :\n.Bl -tag -width XDG_RUNTIME_DIR\n.It Ev XDG_RUNTIME_DIR\nA directory where temporary user files, such as the Wayland socket,\nare stored.\n.It Ev XDG_CONFIG_DIR\nA directory containing configuration of various programs and\nlibraries, including libxkbcommon.\n.It Ev DISPLAY , WAYLAND_DISPLAY , WAYLAND_SOCKET\nTell how to connect to an underlying X11 or Wayland server.\n.It Ev WLR_*\nVarious variables specific to wlroots.\n.It Ev XKB_* , XLOCALEDIR , XCOMPOSEFILE\nVarious variables specific to libxkbcommon.\n.It Ev XCURSOR_PATH\nList of directories to search for XCursor themes in.\n.It Ev HOME\nA directory where there are always dear files there for you.\nWaiting for you to clean them up.\n.El\n.Pp\nThese are set by\n.Nm :\n.Bl -tag -width WAYLAND_DISPLAY\n.It Ev WAYLAND_DISPLAY\nTell how to connect to\n.Nm .\n.It Ev DISPLAY\nIf using\n.Nm Xwayland ,\ntell how to connect to the\n.Nm Xwayland\nserver.\n.El\n.Sh EXAMPLES\nStart\n.Nm\nwith s6 in the background:\n.Dl dwl -s 's6-svscan <&-'\n.Sh SEE ALSO\n.Xr foot 1 ,\n.Xr bemenu 1 ,\n.Xr dwm 1 ,\n.Xr xkeyboard-config 7\n.Sh CAVEATS\nThe child process's standard input is connected with a pipe to\n.Nm .\nIf the child process neither reads from the pipe nor closes its\nstandard input,\n.Nm\nwill freeze after a while due to it blocking when writing to the full\npipe buffer.\n.Sh BUGS\nAll of them.\n"
        },
        {
          "name": "dwl.c",
          "type": "blob",
          "size": 91.287109375,
          "content": "/*\n * See LICENSE file for copyright and license details.\n */\n#include <getopt.h>\n#include <libinput.h>\n#include <linux/input-event-codes.h>\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/wait.h>\n#include <time.h>\n#include <unistd.h>\n#include <wayland-server-core.h>\n#include <wlr/backend.h>\n#include <wlr/backend/libinput.h>\n#include <wlr/render/allocator.h>\n#include <wlr/render/wlr_renderer.h>\n#include <wlr/types/wlr_compositor.h>\n#include <wlr/types/wlr_cursor.h>\n#include <wlr/types/wlr_cursor_shape_v1.h>\n#include <wlr/types/wlr_data_control_v1.h>\n#include <wlr/types/wlr_data_device.h>\n#include <wlr/types/wlr_drm.h>\n#include <wlr/types/wlr_linux_dmabuf_v1.h>\n#include <wlr/types/wlr_export_dmabuf_v1.h>\n#include <wlr/types/wlr_fractional_scale_v1.h>\n#include <wlr/types/wlr_gamma_control_v1.h>\n#include <wlr/types/wlr_idle_inhibit_v1.h>\n#include <wlr/types/wlr_idle_notify_v1.h>\n#include <wlr/types/wlr_input_device.h>\n#include <wlr/types/wlr_keyboard.h>\n#include <wlr/types/wlr_layer_shell_v1.h>\n#include <wlr/types/wlr_output.h>\n#include <wlr/types/wlr_output_layout.h>\n#include <wlr/types/wlr_output_management_v1.h>\n#include <wlr/types/wlr_pointer.h>\n#include <wlr/types/wlr_presentation_time.h>\n#include <wlr/types/wlr_primary_selection.h>\n#include <wlr/types/wlr_primary_selection_v1.h>\n#include <wlr/types/wlr_scene.h>\n#include <wlr/types/wlr_screencopy_v1.h>\n#include <wlr/types/wlr_seat.h>\n#include <wlr/types/wlr_server_decoration.h>\n#include <wlr/types/wlr_session_lock_v1.h>\n#include <wlr/types/wlr_single_pixel_buffer_v1.h>\n#include <wlr/types/wlr_subcompositor.h>\n#include <wlr/types/wlr_viewporter.h>\n#include <wlr/types/wlr_virtual_keyboard_v1.h>\n#include <wlr/types/wlr_xcursor_manager.h>\n#include <wlr/types/wlr_xdg_activation_v1.h>\n#include <wlr/types/wlr_xdg_decoration_v1.h>\n#include <wlr/types/wlr_xdg_output_v1.h>\n#include <wlr/types/wlr_xdg_shell.h>\n#include <wlr/util/log.h>\n#include <xkbcommon/xkbcommon.h>\n#ifdef XWAYLAND\n#include <wlr/xwayland.h>\n#include <xcb/xcb.h>\n#include <xcb/xcb_icccm.h>\n#endif\n\n#include \"util.h\"\n\n/* macros */\n#define MAX(A, B)               ((A) > (B) ? (A) : (B))\n#define MIN(A, B)               ((A) < (B) ? (A) : (B))\n#define CLEANMASK(mask)         (mask & ~WLR_MODIFIER_CAPS)\n#define VISIBLEON(C, M)         ((M) && (C)->mon == (M) && ((C)->tags & (M)->tagset[(M)->seltags]))\n#define LENGTH(X)               (sizeof X / sizeof X[0])\n#define END(A)                  ((A) + LENGTH(A))\n#define TAGMASK                 ((1u << TAGCOUNT) - 1)\n#define LISTEN(E, L, H)         wl_signal_add((E), ((L)->notify = (H), (L)))\n#define LISTEN_STATIC(E, H)     do { static struct wl_listener _l = {.notify = (H)}; wl_signal_add((E), &_l); } while (0)\n\n/* enums */\nenum { CurNormal, CurPressed, CurMove, CurResize }; /* cursor */\nenum { XDGShell, LayerShell, X11Managed, X11Unmanaged }; /* client types */\nenum { LyrBg, LyrBottom, LyrTile, LyrFloat, LyrFS, LyrTop, LyrOverlay, LyrBlock, NUM_LAYERS }; /* scene layers */\n#ifdef XWAYLAND\nenum { NetWMWindowTypeDialog, NetWMWindowTypeSplash, NetWMWindowTypeToolbar,\n\tNetWMWindowTypeUtility, NetLast }; /* EWMH atoms */\n#endif\n\ntypedef union {\n\tint i;\n\tuint32_t ui;\n\tfloat f;\n\tconst void *v;\n} Arg;\n\ntypedef struct {\n\tunsigned int mod;\n\tunsigned int button;\n\tvoid (*func)(const Arg *);\n\tconst Arg arg;\n} Button;\n\ntypedef struct Monitor Monitor;\ntypedef struct {\n\t/* Must keep these three elements in this order */\n\tunsigned int type; /* XDGShell or X11* */\n\tstruct wlr_box geom; /* layout-relative, includes border */\n\tMonitor *mon;\n\tstruct wlr_scene_tree *scene;\n\tstruct wlr_scene_rect *border[4]; /* top, bottom, left, right */\n\tstruct wlr_scene_tree *scene_surface;\n\tstruct wl_list link;\n\tstruct wl_list flink;\n\tunion {\n\t\tstruct wlr_xdg_surface *xdg;\n\t\tstruct wlr_xwayland_surface *xwayland;\n\t} surface;\n\tstruct wl_listener commit;\n\tstruct wl_listener map;\n\tstruct wl_listener maximize;\n\tstruct wl_listener unmap;\n\tstruct wl_listener destroy;\n\tstruct wl_listener set_title;\n\tstruct wl_listener fullscreen;\n\tstruct wlr_box prev; /* layout-relative, includes border */\n\tstruct wlr_box bounds;\n#ifdef XWAYLAND\n\tstruct wl_listener activate;\n\tstruct wl_listener associate;\n\tstruct wl_listener dissociate;\n\tstruct wl_listener configure;\n\tstruct wl_listener set_hints;\n#endif\n\tunsigned int bw;\n\tuint32_t tags;\n\tint isfloating, isurgent, isfullscreen;\n\tuint32_t resize; /* configure serial of a pending resize */\n} Client;\n\ntypedef struct {\n\tuint32_t mod;\n\txkb_keysym_t keysym;\n\tvoid (*func)(const Arg *);\n\tconst Arg arg;\n} Key;\n\ntypedef struct {\n\tstruct wl_list link;\n\tstruct wlr_keyboard *wlr_keyboard;\n\n\tint nsyms;\n\tconst xkb_keysym_t *keysyms; /* invalid if nsyms == 0 */\n\tuint32_t mods; /* invalid if nsyms == 0 */\n\tstruct wl_event_source *key_repeat_source;\n\n\tstruct wl_listener modifiers;\n\tstruct wl_listener key;\n\tstruct wl_listener destroy;\n} Keyboard;\n\ntypedef struct {\n\t/* Must keep these three elements in this order */\n\tunsigned int type; /* LayerShell */\n\tstruct wlr_box geom;\n\tMonitor *mon;\n\tstruct wlr_scene_tree *scene;\n\tstruct wlr_scene_tree *popups;\n\tstruct wlr_scene_layer_surface_v1 *scene_layer;\n\tstruct wl_list link;\n\tint mapped;\n\tstruct wlr_layer_surface_v1 *layer_surface;\n\n\tstruct wl_listener destroy;\n\tstruct wl_listener map;\n\tstruct wl_listener unmap;\n\tstruct wl_listener surface_commit;\n} LayerSurface;\n\ntypedef struct {\n\tconst char *symbol;\n\tvoid (*arrange)(Monitor *);\n} Layout;\n\nstruct Monitor {\n\tstruct wl_list link;\n\tstruct wlr_output *wlr_output;\n\tstruct wlr_scene_output *scene_output;\n\tstruct wlr_scene_rect *fullscreen_bg; /* See createmon() for info */\n\tstruct wl_listener frame;\n\tstruct wl_listener destroy;\n\tstruct wl_listener request_state;\n\tstruct wl_listener destroy_lock_surface;\n\tstruct wlr_session_lock_surface_v1 *lock_surface;\n\tstruct wlr_box m; /* monitor area, layout-relative */\n\tstruct wlr_box w; /* window area, layout-relative */\n\tstruct wl_list layers[4]; /* LayerSurface::link */\n\tconst Layout *lt[2];\n\tunsigned int seltags;\n\tunsigned int sellt;\n\tuint32_t tagset[2];\n\tdouble mfact;\n\tint gamma_lut_changed;\n\tint nmaster;\n\tchar ltsymbol[16];\n};\n\ntypedef struct {\n\tconst char *name;\n\tfloat mfact;\n\tint nmaster;\n\tfloat scale;\n\tconst Layout *lt;\n\tenum wl_output_transform rr;\n\tint x, y;\n} MonitorRule;\n\ntypedef struct {\n\tconst char *id;\n\tconst char *title;\n\tuint32_t tags;\n\tint isfloating;\n\tint monitor;\n} Rule;\n\ntypedef struct {\n\tstruct wlr_scene_tree *scene;\n\n\tstruct wlr_session_lock_v1 *lock;\n\tstruct wl_listener new_surface;\n\tstruct wl_listener unlock;\n\tstruct wl_listener destroy;\n} SessionLock;\n\n/* function declarations */\nstatic void applybounds(Client *c, struct wlr_box *bbox);\nstatic void applyrules(Client *c);\nstatic void arrange(Monitor *m);\nstatic void arrangelayer(Monitor *m, struct wl_list *list,\n\t\tstruct wlr_box *usable_area, int exclusive);\nstatic void arrangelayers(Monitor *m);\nstatic void axisnotify(struct wl_listener *listener, void *data);\nstatic void buttonpress(struct wl_listener *listener, void *data);\nstatic void chvt(const Arg *arg);\nstatic void checkidleinhibitor(struct wlr_surface *exclude);\nstatic void cleanup(void);\nstatic void cleanupkeyboard(struct wl_listener *listener, void *data);\nstatic void cleanupmon(struct wl_listener *listener, void *data);\nstatic void closemon(Monitor *m);\nstatic void commitlayersurfacenotify(struct wl_listener *listener, void *data);\nstatic void commitnotify(struct wl_listener *listener, void *data);\nstatic void createdecoration(struct wl_listener *listener, void *data);\nstatic void createidleinhibitor(struct wl_listener *listener, void *data);\nstatic void createkeyboard(struct wlr_keyboard *keyboard);\nstatic void createlayersurface(struct wl_listener *listener, void *data);\nstatic void createlocksurface(struct wl_listener *listener, void *data);\nstatic void createmon(struct wl_listener *listener, void *data);\nstatic void createnotify(struct wl_listener *listener, void *data);\nstatic void createpointer(struct wlr_pointer *pointer);\nstatic void cursorframe(struct wl_listener *listener, void *data);\nstatic void destroydragicon(struct wl_listener *listener, void *data);\nstatic void destroyidleinhibitor(struct wl_listener *listener, void *data);\nstatic void destroylayersurfacenotify(struct wl_listener *listener, void *data);\nstatic void destroylock(SessionLock *lock, int unlocked);\nstatic void destroylocksurface(struct wl_listener *listener, void *data);\nstatic void destroynotify(struct wl_listener *listener, void *data);\nstatic void destroysessionlock(struct wl_listener *listener, void *data);\nstatic void destroysessionmgr(struct wl_listener *listener, void *data);\nstatic Monitor *dirtomon(enum wlr_direction dir);\nstatic void focusclient(Client *c, int lift);\nstatic void focusmon(const Arg *arg);\nstatic void focusstack(const Arg *arg);\nstatic Client *focustop(Monitor *m);\nstatic void fullscreennotify(struct wl_listener *listener, void *data);\nstatic void handlesig(int signo);\nstatic void incnmaster(const Arg *arg);\nstatic void inputdevice(struct wl_listener *listener, void *data);\nstatic int keybinding(uint32_t mods, xkb_keysym_t sym);\nstatic void keypress(struct wl_listener *listener, void *data);\nstatic void keypressmod(struct wl_listener *listener, void *data);\nstatic int keyrepeat(void *data);\nstatic void killclient(const Arg *arg);\nstatic void locksession(struct wl_listener *listener, void *data);\nstatic void maplayersurfacenotify(struct wl_listener *listener, void *data);\nstatic void mapnotify(struct wl_listener *listener, void *data);\nstatic void maximizenotify(struct wl_listener *listener, void *data);\nstatic void monocle(Monitor *m);\nstatic void motionabsolute(struct wl_listener *listener, void *data);\nstatic void motionnotify(uint32_t time);\nstatic void motionrelative(struct wl_listener *listener, void *data);\nstatic void moveresize(const Arg *arg);\nstatic void outputmgrapply(struct wl_listener *listener, void *data);\nstatic void outputmgrapplyortest(struct wlr_output_configuration_v1 *config, int test);\nstatic void outputmgrtest(struct wl_listener *listener, void *data);\nstatic void pointerfocus(Client *c, struct wlr_surface *surface,\n\t\tdouble sx, double sy, uint32_t time);\nstatic void printstatus(void);\nstatic void quit(const Arg *arg);\nstatic void rendermon(struct wl_listener *listener, void *data);\nstatic void requeststartdrag(struct wl_listener *listener, void *data);\nstatic void requestmonstate(struct wl_listener *listener, void *data);\nstatic void resize(Client *c, struct wlr_box geo, int interact);\nstatic void run(char *startup_cmd);\nstatic void setcursor(struct wl_listener *listener, void *data);\nstatic void setcursorshape(struct wl_listener *listener, void *data);\nstatic void setfloating(Client *c, int floating);\nstatic void setfullscreen(Client *c, int fullscreen);\nstatic void setgamma(struct wl_listener *listener, void *data);\nstatic void setlayout(const Arg *arg);\nstatic void setmfact(const Arg *arg);\nstatic void setmon(Client *c, Monitor *m, uint32_t newtags);\nstatic void setpsel(struct wl_listener *listener, void *data);\nstatic void setsel(struct wl_listener *listener, void *data);\nstatic void setup(void);\nstatic void spawn(const Arg *arg);\nstatic void startdrag(struct wl_listener *listener, void *data);\nstatic void tag(const Arg *arg);\nstatic void tagmon(const Arg *arg);\nstatic void tile(Monitor *m);\nstatic void togglefloating(const Arg *arg);\nstatic void togglefullscreen(const Arg *arg);\nstatic void toggletag(const Arg *arg);\nstatic void toggleview(const Arg *arg);\nstatic void unlocksession(struct wl_listener *listener, void *data);\nstatic void unmaplayersurfacenotify(struct wl_listener *listener, void *data);\nstatic void unmapnotify(struct wl_listener *listener, void *data);\nstatic void updatemons(struct wl_listener *listener, void *data);\nstatic void updatetitle(struct wl_listener *listener, void *data);\nstatic void urgent(struct wl_listener *listener, void *data);\nstatic void view(const Arg *arg);\nstatic void virtualkeyboard(struct wl_listener *listener, void *data);\nstatic Monitor *xytomon(double x, double y);\nstatic void xytonode(double x, double y, struct wlr_surface **psurface,\n\t\tClient **pc, LayerSurface **pl, double *nx, double *ny);\nstatic void zoom(const Arg *arg);\n\n/* variables */\nstatic const char broken[] = \"broken\";\nstatic pid_t child_pid = -1;\nstatic int locked;\nstatic void *exclusive_focus;\nstatic struct wl_display *dpy;\nstatic struct wlr_backend *backend;\nstatic struct wlr_scene *scene;\nstatic struct wlr_scene_tree *layers[NUM_LAYERS];\nstatic struct wlr_scene_tree *drag_icon;\n/* Map from ZWLR_LAYER_SHELL_* constants to Lyr* enum */\nstatic const int layermap[] = { LyrBg, LyrBottom, LyrTop, LyrOverlay };\nstatic struct wlr_renderer *drw;\nstatic struct wlr_allocator *alloc;\nstatic struct wlr_compositor *compositor;\nstatic struct wlr_session *session;\n\nstatic struct wlr_xdg_shell *xdg_shell;\nstatic struct wlr_xdg_activation_v1 *activation;\nstatic struct wlr_xdg_decoration_manager_v1 *xdg_decoration_mgr;\nstatic struct wl_list clients; /* tiling order */\nstatic struct wl_list fstack;  /* focus order */\nstatic struct wlr_idle_notifier_v1 *idle_notifier;\nstatic struct wlr_idle_inhibit_manager_v1 *idle_inhibit_mgr;\nstatic struct wlr_layer_shell_v1 *layer_shell;\nstatic struct wlr_output_manager_v1 *output_mgr;\nstatic struct wlr_gamma_control_manager_v1 *gamma_control_mgr;\nstatic struct wlr_virtual_keyboard_manager_v1 *virtual_keyboard_mgr;\nstatic struct wlr_cursor_shape_manager_v1 *cursor_shape_mgr;\n\nstatic struct wlr_cursor *cursor;\nstatic struct wlr_xcursor_manager *cursor_mgr;\n\nstatic struct wlr_session_lock_manager_v1 *session_lock_mgr;\nstatic struct wlr_scene_rect *locked_bg;\nstatic struct wlr_session_lock_v1 *cur_lock;\nstatic struct wl_listener lock_listener = {.notify = locksession};\n\nstatic struct wlr_seat *seat;\nstatic struct wl_list keyboards;\nstatic unsigned int cursor_mode;\nstatic Client *grabc;\nstatic int grabcx, grabcy; /* client-relative */\n\nstatic struct wlr_output_layout *output_layout;\nstatic struct wlr_box sgeom;\nstatic struct wl_list mons;\nstatic Monitor *selmon;\n\n#ifdef XWAYLAND\nstatic void activatex11(struct wl_listener *listener, void *data);\nstatic void associatex11(struct wl_listener *listener, void *data);\nstatic void configurex11(struct wl_listener *listener, void *data);\nstatic void createnotifyx11(struct wl_listener *listener, void *data);\nstatic void dissociatex11(struct wl_listener *listener, void *data);\nstatic xcb_atom_t getatom(xcb_connection_t *xc, const char *name);\nstatic void sethints(struct wl_listener *listener, void *data);\nstatic void xwaylandready(struct wl_listener *listener, void *data);\nstatic struct wlr_xwayland *xwayland;\nstatic xcb_atom_t netatom[NetLast];\n#endif\n\n/* configuration, allows nested code to access above variables */\n#include \"config.h\"\n\n/* attempt to encapsulate suck into one file */\n#include \"client.h\"\n\n/* function implementations */\nvoid\napplybounds(Client *c, struct wlr_box *bbox)\n{\n\t/* set minimum possible */\n\tc->geom.width = MAX(1, c->geom.width);\n\tc->geom.height = MAX(1, c->geom.height);\n\n\tif (c->geom.x >= bbox->x + bbox->width)\n\t\tc->geom.x = bbox->x + bbox->width - c->geom.width;\n\tif (c->geom.y >= bbox->y + bbox->height)\n\t\tc->geom.y = bbox->y + bbox->height - c->geom.height;\n\tif (c->geom.x + c->geom.width + 2 * c->bw <= bbox->x)\n\t\tc->geom.x = bbox->x;\n\tif (c->geom.y + c->geom.height + 2 * c->bw <= bbox->y)\n\t\tc->geom.y = bbox->y;\n}\n\nvoid\napplyrules(Client *c)\n{\n\t/* rule matching */\n\tconst char *appid, *title;\n\tuint32_t i, newtags = 0;\n\tconst Rule *r;\n\tMonitor *mon = selmon, *m;\n\n\tc->isfloating = client_is_float_type(c);\n\tif (!(appid = client_get_appid(c)))\n\t\tappid = broken;\n\tif (!(title = client_get_title(c)))\n\t\ttitle = broken;\n\n\tfor (r = rules; r < END(rules); r++) {\n\t\tif ((!r->title || strstr(title, r->title))\n\t\t\t\t&& (!r->id || strstr(appid, r->id))) {\n\t\t\tc->isfloating = r->isfloating;\n\t\t\tnewtags |= r->tags;\n\t\t\ti = 0;\n\t\t\twl_list_for_each(m, &mons, link)\n\t\t\t\tif (r->monitor == i++)\n\t\t\t\t\tmon = m;\n\t\t}\n\t}\n\twlr_scene_node_reparent(&c->scene->node, layers[c->isfloating ? LyrFloat : LyrTile]);\n\tsetmon(c, mon, newtags);\n}\n\nvoid\narrange(Monitor *m)\n{\n\tClient *c;\n\twl_list_for_each(c, &clients, link) {\n\t\tif (c->mon == m) {\n\t\t\twlr_scene_node_set_enabled(&c->scene->node, VISIBLEON(c, m));\n\t\t\tclient_set_suspended(c, !VISIBLEON(c, m));\n\t\t}\n\t}\n\n\twlr_scene_node_set_enabled(&m->fullscreen_bg->node,\n\t\t\t(c = focustop(m)) && c->isfullscreen);\n\n\tstrncpy(m->ltsymbol, m->lt[m->sellt]->symbol, LENGTH(m->ltsymbol));\n\n\tif (m->lt[m->sellt]->arrange)\n\t\tm->lt[m->sellt]->arrange(m);\n\tmotionnotify(0);\n\tcheckidleinhibitor(NULL);\n}\n\nvoid\narrangelayer(Monitor *m, struct wl_list *list, struct wlr_box *usable_area, int exclusive)\n{\n\tLayerSurface *layersurface;\n\tstruct wlr_box full_area = m->m;\n\n\twl_list_for_each(layersurface, list, link) {\n\t\tstruct wlr_layer_surface_v1 *wlr_layer_surface = layersurface->layer_surface;\n\t\tstruct wlr_layer_surface_v1_state *state = &wlr_layer_surface->current;\n\n\t\tif (exclusive != (state->exclusive_zone > 0))\n\t\t\tcontinue;\n\n\t\twlr_scene_layer_surface_v1_configure(layersurface->scene_layer, &full_area, usable_area);\n\t\twlr_scene_node_set_position(&layersurface->popups->node,\n\t\t\t\tlayersurface->scene->node.x, layersurface->scene->node.y);\n\t\tlayersurface->geom.x = layersurface->scene->node.x;\n\t\tlayersurface->geom.y = layersurface->scene->node.y;\n\t}\n}\n\nvoid\narrangelayers(Monitor *m)\n{\n\tint i;\n\tstruct wlr_box usable_area = m->m;\n\tuint32_t layers_above_shell[] = {\n\t\tZWLR_LAYER_SHELL_V1_LAYER_OVERLAY,\n\t\tZWLR_LAYER_SHELL_V1_LAYER_TOP,\n\t};\n\tLayerSurface *layersurface;\n\tif (!m->wlr_output->enabled)\n\t\treturn;\n\n\t/* Arrange exclusive surfaces from top->bottom */\n\tfor (i = 3; i >= 0; i--)\n\t\tarrangelayer(m, &m->layers[i], &usable_area, 1);\n\n\tif (memcmp(&usable_area, &m->w, sizeof(struct wlr_box))) {\n\t\tm->w = usable_area;\n\t\tarrange(m);\n\t}\n\n\t/* Arrange non-exlusive surfaces from top->bottom */\n\tfor (i = 3; i >= 0; i--)\n\t\tarrangelayer(m, &m->layers[i], &usable_area, 0);\n\n\t/* Find topmost keyboard interactive layer, if such a layer exists */\n\tfor (i = 0; i < LENGTH(layers_above_shell); i++) {\n\t\twl_list_for_each_reverse(layersurface,\n\t\t\t\t&m->layers[layers_above_shell[i]], link) {\n\t\t\tif (!locked && layersurface->layer_surface->current.keyboard_interactive\n\t\t\t\t\t&& layersurface->mapped) {\n\t\t\t\t/* Deactivate the focused client. */\n\t\t\t\tfocusclient(NULL, 0);\n\t\t\t\texclusive_focus = layersurface;\n\t\t\t\tclient_notify_enter(layersurface->layer_surface->surface, wlr_seat_get_keyboard(seat));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid\naxisnotify(struct wl_listener *listener, void *data)\n{\n\t/* This event is forwarded by the cursor when a pointer emits an axis event,\n\t * for example when you move the scroll wheel. */\n\tstruct wlr_pointer_axis_event *event = data;\n\twlr_idle_notifier_v1_notify_activity(idle_notifier, seat);\n\t/* TODO: allow usage of scroll whell for mousebindings, it can be implemented\n\t * checking the event's orientation and the delta of the event */\n\t/* Notify the client with pointer focus of the axis event. */\n\twlr_seat_pointer_notify_axis(seat,\n\t\t\tevent->time_msec, event->orientation, event->delta,\n\t\t\tevent->delta_discrete, event->source);\n}\n\nvoid\nbuttonpress(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_pointer_button_event *event = data;\n\tstruct wlr_keyboard *keyboard;\n\tuint32_t mods;\n\tClient *c;\n\tconst Button *b;\n\n\twlr_idle_notifier_v1_notify_activity(idle_notifier, seat);\n\n\tswitch (event->state) {\n\tcase WLR_BUTTON_PRESSED:\n\t\tcursor_mode = CurPressed;\n\t\tif (locked)\n\t\t\tbreak;\n\n\t\t/* Change focus if the button was _pressed_ over a client */\n\t\txytonode(cursor->x, cursor->y, NULL, &c, NULL, NULL, NULL);\n\t\tif (c && (!client_is_unmanaged(c) || client_wants_focus(c)))\n\t\t\tfocusclient(c, 1);\n\n\t\tkeyboard = wlr_seat_get_keyboard(seat);\n\t\tmods = keyboard ? wlr_keyboard_get_modifiers(keyboard) : 0;\n\t\tfor (b = buttons; b < END(buttons); b++) {\n\t\t\tif (CLEANMASK(mods) == CLEANMASK(b->mod) &&\n\t\t\t\t\tevent->button == b->button && b->func) {\n\t\t\t\tb->func(&b->arg);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase WLR_BUTTON_RELEASED:\n\t\t/* If you released any buttons, we exit interactive move/resize mode. */\n\t\t/* TODO should reset to the pointer focus's current setcursor */\n\t\tif (!locked && cursor_mode != CurNormal && cursor_mode != CurPressed) {\n\t\t\twlr_cursor_set_xcursor(cursor, cursor_mgr, \"default\");\n\t\t\tcursor_mode = CurNormal;\n\t\t\t/* Drop the window off on its new monitor */\n\t\t\tselmon = xytomon(cursor->x, cursor->y);\n\t\t\tsetmon(grabc, selmon, 0);\n\t\t\treturn;\n\t\t} else {\n\t\t\tcursor_mode = CurNormal;\n\t\t}\n\t\tbreak;\n\t}\n\t/* If the event wasn't handled by the compositor, notify the client with\n\t * pointer focus that a button press has occurred */\n\twlr_seat_pointer_notify_button(seat,\n\t\t\tevent->time_msec, event->button, event->state);\n}\n\nvoid\nchvt(const Arg *arg)\n{\n\twlr_session_change_vt(session, arg->ui);\n}\n\nvoid\ncheckidleinhibitor(struct wlr_surface *exclude)\n{\n\tint inhibited = 0, unused_lx, unused_ly;\n\tstruct wlr_idle_inhibitor_v1 *inhibitor;\n\twl_list_for_each(inhibitor, &idle_inhibit_mgr->inhibitors, link) {\n\t\tstruct wlr_surface *surface = wlr_surface_get_root_surface(inhibitor->surface);\n\t\tstruct wlr_scene_tree *tree = surface->data;\n\t\tif (exclude != surface && (bypass_surface_visibility || (!tree\n\t\t\t\t|| wlr_scene_node_coords(&tree->node, &unused_lx, &unused_ly)))) {\n\t\t\tinhibited = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\twlr_idle_notifier_v1_set_inhibited(idle_notifier, inhibited);\n}\n\nvoid\ncleanup(void)\n{\n#ifdef XWAYLAND\n\twlr_xwayland_destroy(xwayland);\n\txwayland = NULL;\n#endif\n\twl_display_destroy_clients(dpy);\n\tif (child_pid > 0) {\n\t\tkill(child_pid, SIGTERM);\n\t\twaitpid(child_pid, NULL, 0);\n\t}\n\twlr_xcursor_manager_destroy(cursor_mgr);\n\twlr_output_layout_destroy(output_layout);\n\twl_display_destroy(dpy);\n\t/* Destroy after the wayland display (when the monitors are already destroyed)\n\t   to avoid destroying them with an invalid scene output. */\n\twlr_scene_node_destroy(&scene->tree.node);\n}\n\nvoid\ncleanupkeyboard(struct wl_listener *listener, void *data)\n{\n\tKeyboard *kb = wl_container_of(listener, kb, destroy);\n\n\twl_event_source_remove(kb->key_repeat_source);\n\twl_list_remove(&kb->link);\n\twl_list_remove(&kb->modifiers.link);\n\twl_list_remove(&kb->key.link);\n\twl_list_remove(&kb->destroy.link);\n\tfree(kb);\n}\n\nvoid\ncleanupmon(struct wl_listener *listener, void *data)\n{\n\tMonitor *m = wl_container_of(listener, m, destroy);\n\tLayerSurface *l, *tmp;\n\tint i;\n\n\tfor (i = 0; i <= ZWLR_LAYER_SHELL_V1_LAYER_OVERLAY; i++)\n\t\twl_list_for_each_safe(l, tmp, &m->layers[i], link)\n\t\t\twlr_layer_surface_v1_destroy(l->layer_surface);\n\n\twl_list_remove(&m->destroy.link);\n\twl_list_remove(&m->frame.link);\n\twl_list_remove(&m->link);\n\tm->wlr_output->data = NULL;\n\twlr_output_layout_remove(output_layout, m->wlr_output);\n\twlr_scene_output_destroy(m->scene_output);\n\twlr_scene_node_destroy(&m->fullscreen_bg->node);\n\n\tclosemon(m);\n\tfree(m);\n}\n\nvoid\nclosemon(Monitor *m)\n{\n\t/* update selmon if needed and\n\t * move closed monitor's clients to the focused one */\n\tClient *c;\n\tif (wl_list_empty(&mons)) {\n\t\tselmon = NULL;\n\t} else if (m == selmon) {\n\t\tint nmons = wl_list_length(&mons), i = 0;\n\t\tdo /* don't switch to disabled mons */\n\t\t\tselmon = wl_container_of(mons.next, selmon, link);\n\t\twhile (!selmon->wlr_output->enabled && i++ < nmons);\n\t}\n\n\twl_list_for_each(c, &clients, link) {\n\t\tif (c->isfloating && c->geom.x > m->m.width)\n\t\t\tresize(c, (struct wlr_box){.x = c->geom.x - m->w.width, .y = c->geom.y,\n\t\t\t\t.width = c->geom.width, .height = c->geom.height}, 0);\n\t\tif (c->mon == m)\n\t\t\tsetmon(c, selmon, c->tags);\n\t}\n\tfocusclient(focustop(selmon), 1);\n\tprintstatus();\n}\n\nvoid\ncommitlayersurfacenotify(struct wl_listener *listener, void *data)\n{\n\tLayerSurface *layersurface = wl_container_of(listener, layersurface, surface_commit);\n\tstruct wlr_layer_surface_v1 *wlr_layer_surface = layersurface->layer_surface;\n\tstruct wlr_output *wlr_output = wlr_layer_surface->output;\n\tstruct wlr_scene_tree *layer = layers[layermap[wlr_layer_surface->current.layer]];\n\n\t/* For some reason this layersurface have no monitor, this can be because\n\t * its monitor has just been destroyed */\n\tif (!wlr_output || !(layersurface->mon = wlr_output->data))\n\t\treturn;\n\n\tif (layer != layersurface->scene->node.parent) {\n\t\twlr_scene_node_reparent(&layersurface->scene->node, layer);\n\t\twlr_scene_node_reparent(&layersurface->popups->node, layer);\n\t\twl_list_remove(&layersurface->link);\n\t\twl_list_insert(&layersurface->mon->layers[wlr_layer_surface->current.layer],\n\t\t\t\t&layersurface->link);\n\t}\n\tif (wlr_layer_surface->current.layer < ZWLR_LAYER_SHELL_V1_LAYER_TOP)\n\t\twlr_scene_node_reparent(&layersurface->popups->node, layers[LyrTop]);\n\n\tif (wlr_layer_surface->current.committed == 0\n\t\t\t&& layersurface->mapped == wlr_layer_surface->surface->mapped)\n\t\treturn;\n\tlayersurface->mapped = wlr_layer_surface->surface->mapped;\n\n\tarrangelayers(layersurface->mon);\n}\n\nvoid\ncommitnotify(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, commit);\n\n\tif (client_surface(c)->mapped)\n\t\tresize(c, c->geom, (c->isfloating && !c->isfullscreen));\n\n\t/* mark a pending resize as completed */\n\tif (c->resize && c->resize <= c->surface.xdg->current.configure_serial)\n\t\tc->resize = 0;\n}\n\nvoid\ncreatedecoration(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_xdg_toplevel_decoration_v1 *dec = data;\n\twlr_xdg_toplevel_decoration_v1_set_mode(dec, WLR_XDG_TOPLEVEL_DECORATION_V1_MODE_SERVER_SIDE);\n}\n\nvoid\ncreateidleinhibitor(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_idle_inhibitor_v1 *idle_inhibitor = data;\n\tLISTEN_STATIC(&idle_inhibitor->events.destroy, destroyidleinhibitor);\n\n\tcheckidleinhibitor(NULL);\n}\n\nvoid\ncreatekeyboard(struct wlr_keyboard *keyboard)\n{\n\tstruct xkb_context *context;\n\tstruct xkb_keymap *keymap;\n\tKeyboard *kb = keyboard->data = ecalloc(1, sizeof(*kb));\n\tkb->wlr_keyboard = keyboard;\n\n\t/* Prepare an XKB keymap and assign it to the keyboard. */\n\tcontext = xkb_context_new(XKB_CONTEXT_NO_FLAGS);\n\tkeymap = xkb_keymap_new_from_names(context, &xkb_rules,\n\t\tXKB_KEYMAP_COMPILE_NO_FLAGS);\n\tif (!keymap)\n\t\tdie(\"createkeyboard: failed to compile keymap\");\n\n\twlr_keyboard_set_keymap(keyboard, keymap);\n\txkb_keymap_unref(keymap);\n\txkb_context_unref(context);\n\twlr_keyboard_set_repeat_info(keyboard, repeat_rate, repeat_delay);\n\n\t/* Here we set up listeners for keyboard events. */\n\tLISTEN(&keyboard->events.modifiers, &kb->modifiers, keypressmod);\n\tLISTEN(&keyboard->events.key, &kb->key, keypress);\n\tLISTEN(&keyboard->base.events.destroy, &kb->destroy, cleanupkeyboard);\n\n\twlr_seat_set_keyboard(seat, keyboard);\n\n\tkb->key_repeat_source = wl_event_loop_add_timer(\n\t\t\twl_display_get_event_loop(dpy), keyrepeat, kb);\n\n\t/* And add the keyboard to our list of keyboards */\n\twl_list_insert(&keyboards, &kb->link);\n}\n\nvoid\ncreatelayersurface(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_layer_surface_v1 *wlr_layer_surface = data;\n\tLayerSurface *layersurface;\n\tstruct wlr_layer_surface_v1_state old_state;\n\tstruct wlr_scene_tree *l = layers[layermap[wlr_layer_surface->pending.layer]];\n\n\tif (!wlr_layer_surface->output)\n\t\twlr_layer_surface->output = selmon ? selmon->wlr_output : NULL;\n\n\tif (!wlr_layer_surface->output) {\n\t\twlr_layer_surface_v1_destroy(wlr_layer_surface);\n\t\treturn;\n\t}\n\n\tlayersurface = wlr_layer_surface->data = ecalloc(1, sizeof(LayerSurface));\n\tlayersurface->type = LayerShell;\n\tLISTEN(&wlr_layer_surface->surface->events.commit,\n\t\t\t&layersurface->surface_commit, commitlayersurfacenotify);\n\tLISTEN(&wlr_layer_surface->events.destroy, &layersurface->destroy,\n\t\t\tdestroylayersurfacenotify);\n\tLISTEN(&wlr_layer_surface->surface->events.map, &layersurface->map,\n\t\t\tmaplayersurfacenotify);\n\tLISTEN(&wlr_layer_surface->surface->events.unmap, &layersurface->unmap,\n\t\t\tunmaplayersurfacenotify);\n\n\tlayersurface->layer_surface = wlr_layer_surface;\n\tlayersurface->mon = wlr_layer_surface->output->data;\n\tlayersurface->scene_layer = wlr_scene_layer_surface_v1_create(l, wlr_layer_surface);\n\tlayersurface->scene = layersurface->scene_layer->tree;\n\tlayersurface->popups = wlr_layer_surface->surface->data = wlr_scene_tree_create(l);\n\n\tlayersurface->scene->node.data = layersurface;\n\n\twl_list_insert(&layersurface->mon->layers[wlr_layer_surface->pending.layer],\n\t\t\t&layersurface->link);\n\n\t/* Temporarily set the layer's current state to pending\n\t * so that we can easily arrange it\n\t */\n\told_state = wlr_layer_surface->current;\n\twlr_layer_surface->current = wlr_layer_surface->pending;\n\tlayersurface->mapped = 1;\n\tarrangelayers(layersurface->mon);\n\twlr_layer_surface->current = old_state;\n}\n\nvoid\ncreatelocksurface(struct wl_listener *listener, void *data)\n{\n\tSessionLock *lock = wl_container_of(listener, lock, new_surface);\n\tstruct wlr_session_lock_surface_v1 *lock_surface = data;\n\tMonitor *m = lock_surface->output->data;\n\tstruct wlr_scene_tree *scene_tree = lock_surface->surface->data =\n\t\twlr_scene_subsurface_tree_create(lock->scene, lock_surface->surface);\n\tm->lock_surface = lock_surface;\n\n\twlr_scene_node_set_position(&scene_tree->node, m->m.x, m->m.y);\n\twlr_session_lock_surface_v1_configure(lock_surface, m->m.width, m->m.height);\n\n\tLISTEN(&lock_surface->events.destroy, &m->destroy_lock_surface, destroylocksurface);\n\n\tif (m == selmon)\n\t\tclient_notify_enter(lock_surface->surface, wlr_seat_get_keyboard(seat));\n}\n\nvoid\ncreatemon(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised by the backend when a new output (aka a display or\n\t * monitor) becomes available. */\n\tstruct wlr_output *wlr_output = data;\n\tconst MonitorRule *r;\n\tsize_t i;\n\tMonitor *m = wlr_output->data = ecalloc(1, sizeof(*m));\n\tm->wlr_output = wlr_output;\n\n\twlr_output_init_render(wlr_output, alloc, drw);\n\n\t/* Initialize monitor state using configured rules */\n\tfor (i = 0; i < LENGTH(m->layers); i++)\n\t\twl_list_init(&m->layers[i]);\n\tm->tagset[0] = m->tagset[1] = 1;\n\tfor (r = monrules; r < END(monrules); r++) {\n\t\tif (!r->name || strstr(wlr_output->name, r->name)) {\n\t\t\tm->mfact = r->mfact;\n\t\t\tm->nmaster = r->nmaster;\n\t\t\twlr_output_set_scale(wlr_output, r->scale);\n\t\t\tm->lt[0] = m->lt[1] = r->lt;\n\t\t\twlr_output_set_transform(wlr_output, r->rr);\n\t\t\tm->m.x = r->x;\n\t\t\tm->m.y = r->y;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* The mode is a tuple of (width, height, refresh rate), and each\n\t * monitor supports only a specific set of modes. We just pick the\n\t * monitor's preferred mode; a more sophisticated compositor would let\n\t * the user configure it. */\n\twlr_output_set_mode(wlr_output, wlr_output_preferred_mode(wlr_output));\n\n\t/* Set up event listeners */\n\tLISTEN(&wlr_output->events.frame, &m->frame, rendermon);\n\tLISTEN(&wlr_output->events.destroy, &m->destroy, cleanupmon);\n\tLISTEN(&wlr_output->events.request_state, &m->request_state, requestmonstate);\n\n\twlr_output_enable(wlr_output, 1);\n\tif (!wlr_output_commit(wlr_output))\n\t\treturn;\n\n\twl_list_insert(&mons, &m->link);\n\tprintstatus();\n\n\t/* The xdg-protocol specifies:\n\t *\n\t * If the fullscreened surface is not opaque, the compositor must make\n\t * sure that other screen content not part of the same surface tree (made\n\t * up of subsurfaces, popups or similarly coupled surfaces) are not\n\t * visible below the fullscreened surface.\n\t *\n\t */\n\t/* updatemons() will resize and set correct position */\n\tm->fullscreen_bg = wlr_scene_rect_create(layers[LyrFS], 0, 0, fullscreen_bg);\n\twlr_scene_node_set_enabled(&m->fullscreen_bg->node, 0);\n\n\t/* Adds this to the output layout in the order it was configured in.\n\t *\n\t * The output layout utility automatically adds a wl_output global to the\n\t * display, which Wayland clients can see to find out information about the\n\t * output (such as DPI, scale factor, manufacturer, etc).\n\t */\n\tm->scene_output = wlr_scene_output_create(scene, wlr_output);\n\tif (m->m.x < 0 || m->m.y < 0)\n\t\twlr_output_layout_add_auto(output_layout, wlr_output);\n\telse\n\t\twlr_output_layout_add(output_layout, wlr_output, m->m.x, m->m.y);\n\tstrncpy(m->ltsymbol, m->lt[m->sellt]->symbol, LENGTH(m->ltsymbol));\n}\n\nvoid\ncreatenotify(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised when wlr_xdg_shell receives a new xdg surface from a\n\t * client, either a toplevel (application window) or popup,\n\t * or when wlr_layer_shell receives a new popup from a layer.\n\t * If you want to do something tricky with popups you should check if\n\t * its parent is wlr_xdg_shell or wlr_layer_shell */\n\tstruct wlr_xdg_surface *xdg_surface = data;\n\tClient *c = NULL;\n\tLayerSurface *l = NULL;\n\n\tif (xdg_surface->role == WLR_XDG_SURFACE_ROLE_POPUP) {\n\t\tstruct wlr_box box;\n\t\tint type = toplevel_from_wlr_surface(xdg_surface->surface, &c, &l);\n\t\tif (!xdg_surface->popup->parent || type < 0)\n\t\t\treturn;\n\t\txdg_surface->surface->data = wlr_scene_xdg_surface_create(\n\t\t\t\txdg_surface->popup->parent->data, xdg_surface);\n\t\tif ((l && !l->mon) || (c && !c->mon))\n\t\t\treturn;\n\t\tbox = type == LayerShell ? l->mon->m : c->mon->w;\n\t\tbox.x -= (type == LayerShell ? l->geom.x : c->geom.x);\n\t\tbox.y -= (type == LayerShell ? l->geom.y : c->geom.y);\n\t\twlr_xdg_popup_unconstrain_from_box(xdg_surface->popup, &box);\n\t\treturn;\n\t} else if (xdg_surface->role == WLR_XDG_SURFACE_ROLE_NONE)\n\t\treturn;\n\n\t/* Allocate a Client for this surface */\n\tc = xdg_surface->data = ecalloc(1, sizeof(*c));\n\tc->surface.xdg = xdg_surface;\n\tc->bw = borderpx;\n\n\twlr_xdg_toplevel_set_wm_capabilities(xdg_surface->toplevel,\n\t\t\tWLR_XDG_TOPLEVEL_WM_CAPABILITIES_FULLSCREEN);\n\n\tLISTEN(&xdg_surface->surface->events.commit, &c->commit, commitnotify);\n\tLISTEN(&xdg_surface->surface->events.map, &c->map, mapnotify);\n\tLISTEN(&xdg_surface->surface->events.unmap, &c->unmap, unmapnotify);\n\tLISTEN(&xdg_surface->events.destroy, &c->destroy, destroynotify);\n\tLISTEN(&xdg_surface->toplevel->events.set_title, &c->set_title, updatetitle);\n\tLISTEN(&xdg_surface->toplevel->events.request_fullscreen, &c->fullscreen,\n\t\t\tfullscreennotify);\n\tLISTEN(&xdg_surface->toplevel->events.request_maximize, &c->maximize,\n\t\t\tmaximizenotify);\n}\n\nvoid\ncreatepointer(struct wlr_pointer *pointer)\n{\n\tif (wlr_input_device_is_libinput(&pointer->base)) {\n\t\tstruct libinput_device *libinput_device = (struct libinput_device*)\n\t\t\twlr_libinput_get_device_handle(&pointer->base);\n\n\t\tif (libinput_device_config_tap_get_finger_count(libinput_device)) {\n\t\t\tlibinput_device_config_tap_set_enabled(libinput_device, tap_to_click);\n\t\t\tlibinput_device_config_tap_set_drag_enabled(libinput_device, tap_and_drag);\n\t\t\tlibinput_device_config_tap_set_drag_lock_enabled(libinput_device, drag_lock);\n\t\t\tlibinput_device_config_tap_set_button_map(libinput_device, button_map);\n\t\t}\n\n\t\tif (libinput_device_config_scroll_has_natural_scroll(libinput_device))\n\t\t\tlibinput_device_config_scroll_set_natural_scroll_enabled(libinput_device, natural_scrolling);\n\n\t\tif (libinput_device_config_dwt_is_available(libinput_device))\n\t\t\tlibinput_device_config_dwt_set_enabled(libinput_device, disable_while_typing);\n\n\t\tif (libinput_device_config_left_handed_is_available(libinput_device))\n\t\t\tlibinput_device_config_left_handed_set(libinput_device, left_handed);\n\n\t\tif (libinput_device_config_middle_emulation_is_available(libinput_device))\n\t\t\tlibinput_device_config_middle_emulation_set_enabled(libinput_device, middle_button_emulation);\n\n\t\tif (libinput_device_config_scroll_get_methods(libinput_device) != LIBINPUT_CONFIG_SCROLL_NO_SCROLL)\n\t\t\tlibinput_device_config_scroll_set_method (libinput_device, scroll_method);\n\n\t\tif (libinput_device_config_click_get_methods(libinput_device) != LIBINPUT_CONFIG_CLICK_METHOD_NONE)\n\t\t\tlibinput_device_config_click_set_method (libinput_device, click_method);\n\n\t\tif (libinput_device_config_send_events_get_modes(libinput_device))\n\t\t\tlibinput_device_config_send_events_set_mode(libinput_device, send_events_mode);\n\n\t\tif (libinput_device_config_accel_is_available(libinput_device)) {\n\t\t\tlibinput_device_config_accel_set_profile(libinput_device, accel_profile);\n\t\t\tlibinput_device_config_accel_set_speed(libinput_device, accel_speed);\n\t\t}\n\t}\n\n\twlr_cursor_attach_input_device(cursor, &pointer->base);\n}\n\nvoid\ncursorframe(struct wl_listener *listener, void *data)\n{\n\t/* This event is forwarded by the cursor when a pointer emits an frame\n\t * event. Frame events are sent after regular pointer events to group\n\t * multiple events together. For instance, two axis events may happen at the\n\t * same time, in which case a frame event won't be sent in between. */\n\t/* Notify the client with pointer focus of the frame event. */\n\twlr_seat_pointer_notify_frame(seat);\n}\n\nvoid\ndestroydragicon(struct wl_listener *listener, void *data)\n{\n\t/* Focus enter isn't sent during drag, so refocus the focused node. */\n\tfocusclient(focustop(selmon), 1);\n\tmotionnotify(0);\n}\n\nvoid\ndestroyidleinhibitor(struct wl_listener *listener, void *data)\n{\n\t/* `data` is the wlr_surface of the idle inhibitor being destroyed,\n\t * at this point the idle inhibitor is still in the list of the manager */\n\tcheckidleinhibitor(wlr_surface_get_root_surface(data));\n}\n\nvoid\ndestroylayersurfacenotify(struct wl_listener *listener, void *data)\n{\n\tLayerSurface *layersurface = wl_container_of(listener, layersurface, destroy);\n\n\twl_list_remove(&layersurface->link);\n\twl_list_remove(&layersurface->destroy.link);\n\twl_list_remove(&layersurface->map.link);\n\twl_list_remove(&layersurface->unmap.link);\n\twl_list_remove(&layersurface->surface_commit.link);\n\twlr_scene_node_destroy(&layersurface->scene->node);\n\tfree(layersurface);\n}\n\nvoid\ndestroylock(SessionLock *lock, int unlock)\n{\n\twlr_seat_keyboard_notify_clear_focus(seat);\n\tif ((locked = !unlock))\n\t\tgoto destroy;\n\n\twlr_scene_node_set_enabled(&locked_bg->node, 0);\n\n\tfocusclient(focustop(selmon), 0);\n\tmotionnotify(0);\n\ndestroy:\n\twl_list_remove(&lock->new_surface.link);\n\twl_list_remove(&lock->unlock.link);\n\twl_list_remove(&lock->destroy.link);\n\n\twlr_scene_node_destroy(&lock->scene->node);\n\tcur_lock = NULL;\n\tfree(lock);\n}\n\nvoid\ndestroylocksurface(struct wl_listener *listener, void *data)\n{\n\tMonitor *m = wl_container_of(listener, m, destroy_lock_surface);\n\tstruct wlr_session_lock_surface_v1 *surface, *lock_surface = m->lock_surface;\n\n\tm->lock_surface = NULL;\n\twl_list_remove(&m->destroy_lock_surface.link);\n\n\tif (lock_surface->surface != seat->keyboard_state.focused_surface)\n\t\treturn;\n\n\tif (locked && cur_lock && !wl_list_empty(&cur_lock->surfaces)) {\n\t\tsurface = wl_container_of(cur_lock->surfaces.next, surface, link);\n\t\tclient_notify_enter(surface->surface, wlr_seat_get_keyboard(seat));\n\t} else if (!locked) {\n\t\tfocusclient(focustop(selmon), 1);\n\t} else {\n\t\twlr_seat_keyboard_clear_focus(seat);\n\t}\n}\n\nvoid\ndestroynotify(struct wl_listener *listener, void *data)\n{\n\t/* Called when the xdg_toplevel is destroyed. */\n\tClient *c = wl_container_of(listener, c, destroy);\n\twl_list_remove(&c->destroy.link);\n\twl_list_remove(&c->set_title.link);\n\twl_list_remove(&c->fullscreen.link);\n#ifdef XWAYLAND\n\tif (c->type != XDGShell) {\n\t\twl_list_remove(&c->activate.link);\n\t\twl_list_remove(&c->associate.link);\n\t\twl_list_remove(&c->configure.link);\n\t\twl_list_remove(&c->dissociate.link);\n\t\twl_list_remove(&c->set_hints.link);\n\t} else\n#endif\n\t{\n\t\twl_list_remove(&c->commit.link);\n\t\twl_list_remove(&c->map.link);\n\t\twl_list_remove(&c->unmap.link);\n\t}\n\tfree(c);\n}\n\nvoid\ndestroysessionlock(struct wl_listener *listener, void *data)\n{\n\tSessionLock *lock = wl_container_of(listener, lock, destroy);\n\tdestroylock(lock, 0);\n}\n\nvoid\ndestroysessionmgr(struct wl_listener *listener, void *data)\n{\n\twl_list_remove(&lock_listener.link);\n\twl_list_remove(&listener->link);\n}\n\nMonitor *\ndirtomon(enum wlr_direction dir)\n{\n\tstruct wlr_output *next;\n\tif (!wlr_output_layout_get(output_layout, selmon->wlr_output))\n\t\treturn selmon;\n\tif ((next = wlr_output_layout_adjacent_output(output_layout,\n\t\t\tdir, selmon->wlr_output, selmon->m.x, selmon->m.y)))\n\t\treturn next->data;\n\tif ((next = wlr_output_layout_farthest_output(output_layout,\n\t\t\tdir ^ (WLR_DIRECTION_LEFT|WLR_DIRECTION_RIGHT),\n\t\t\tselmon->wlr_output, selmon->m.x, selmon->m.y)))\n\t\treturn next->data;\n\treturn selmon;\n}\n\nvoid\nfocusclient(Client *c, int lift)\n{\n\tstruct wlr_surface *old = seat->keyboard_state.focused_surface;\n\tint unused_lx, unused_ly, old_client_type;\n\tClient *old_c = NULL;\n\tLayerSurface *old_l = NULL;\n\n\tif (locked)\n\t\treturn;\n\n\t/* Raise client in stacking order if requested */\n\tif (c && lift)\n\t\twlr_scene_node_raise_to_top(&c->scene->node);\n\n\tif (c && client_surface(c) == old)\n\t\treturn;\n\n\tif ((old_client_type = toplevel_from_wlr_surface(old, &old_c, &old_l)) == XDGShell) {\n\t\tstruct wlr_xdg_popup *popup, *tmp;\n\t\twl_list_for_each_safe(popup, tmp, &old_c->surface.xdg->popups, link)\n\t\t\twlr_xdg_popup_destroy(popup);\n\t}\n\n\t/* Put the new client atop the focus stack and select its monitor */\n\tif (c && !client_is_unmanaged(c)) {\n\t\twl_list_remove(&c->flink);\n\t\twl_list_insert(&fstack, &c->flink);\n\t\tselmon = c->mon;\n\t\tc->isurgent = 0;\n\t\tclient_restack_surface(c);\n\n\t\t/* Don't change border color if there is an exclusive focus or we are\n\t\t * handling a drag operation */\n\t\tif (!exclusive_focus && !seat->drag)\n\t\t\tclient_set_border_color(c, focuscolor);\n\t}\n\n\t/* Deactivate old client if focus is changing */\n\tif (old && (!c || client_surface(c) != old)) {\n\t\t/* If an overlay is focused, don't focus or activate the client,\n\t\t * but only update its position in fstack to render its border with focuscolor\n\t\t * and focus it after the overlay is closed. */\n\t\tif (old_client_type == LayerShell && wlr_scene_node_coords(\n\t\t\t\t\t&old_l->scene->node, &unused_lx, &unused_ly)\n\t\t\t\t&& old_l->layer_surface->current.layer >= ZWLR_LAYER_SHELL_V1_LAYER_TOP) {\n\t\t\treturn;\n\t\t} else if (old_c && old_c == exclusive_focus && client_wants_focus(old_c)) {\n\t\t\treturn;\n\t\t/* Don't deactivate old client if the new one wants focus, as this causes issues with winecfg\n\t\t * and probably other clients */\n\t\t} else if (old_c && !client_is_unmanaged(old_c) && (!c || !client_wants_focus(c))) {\n\t\t\tclient_set_border_color(old_c, bordercolor);\n\n\t\t\tclient_activate_surface(old, 0);\n\t\t}\n\t}\n\tprintstatus();\n\n\tif (!c) {\n\t\t/* With no client, all we have left is to clear focus */\n\t\twlr_seat_keyboard_notify_clear_focus(seat);\n\t\treturn;\n\t}\n\n\t/* Change cursor surface */\n\tmotionnotify(0);\n\n\t/* Have a client, so focus its top-level wlr_surface */\n\tclient_notify_enter(client_surface(c), wlr_seat_get_keyboard(seat));\n\n\t/* Activate the new client */\n\tclient_activate_surface(client_surface(c), 1);\n}\n\nvoid\nfocusmon(const Arg *arg)\n{\n\tint i = 0, nmons = wl_list_length(&mons);\n\tif (nmons)\n\t\tdo /* don't switch to disabled mons */\n\t\t\tselmon = dirtomon(arg->i);\n\t\twhile (!selmon->wlr_output->enabled && i++ < nmons);\n\tfocusclient(focustop(selmon), 1);\n}\n\nvoid\nfocusstack(const Arg *arg)\n{\n\t/* Focus the next or previous client (in tiling order) on selmon */\n\tClient *c, *sel = focustop(selmon);\n\tif (!sel || sel->isfullscreen)\n\t\treturn;\n\tif (arg->i > 0) {\n\t\twl_list_for_each(c, &sel->link, link) {\n\t\t\tif (&c->link == &clients)\n\t\t\t\tcontinue; /* wrap past the sentinel node */\n\t\t\tif (VISIBLEON(c, selmon))\n\t\t\t\tbreak; /* found it */\n\t\t}\n\t} else {\n\t\twl_list_for_each_reverse(c, &sel->link, link) {\n\t\t\tif (&c->link == &clients)\n\t\t\t\tcontinue; /* wrap past the sentinel node */\n\t\t\tif (VISIBLEON(c, selmon))\n\t\t\t\tbreak; /* found it */\n\t\t}\n\t}\n\t/* If only one client is visible on selmon, then c == sel */\n\tfocusclient(c, 1);\n}\n\n/* We probably should change the name of this, it sounds like\n * will focus the topmost client of this mon, when actually will\n * only return that client */\nClient *\nfocustop(Monitor *m)\n{\n\tClient *c;\n\twl_list_for_each(c, &fstack, flink)\n\t\tif (VISIBLEON(c, m))\n\t\t\treturn c;\n\treturn NULL;\n}\n\nvoid\nfullscreennotify(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, fullscreen);\n\tsetfullscreen(c, client_wants_fullscreen(c));\n}\n\nvoid\nhandlesig(int signo)\n{\n\tif (signo == SIGCHLD) {\n#ifdef XWAYLAND\n\t\tsiginfo_t in;\n\t\t/* wlroots expects to reap the XWayland process itself, so we\n\t\t * use WNOWAIT to keep the child waitable until we know it's not\n\t\t * XWayland.\n\t\t */\n\t\twhile (!waitid(P_ALL, 0, &in, WEXITED|WNOHANG|WNOWAIT) && in.si_pid\n\t\t\t\t&& (!xwayland || in.si_pid != xwayland->server->pid))\n\t\t\twaitpid(in.si_pid, NULL, 0);\n#else\n\t\twhile (waitpid(-1, NULL, WNOHANG) > 0);\n#endif\n\t} else if (signo == SIGINT || signo == SIGTERM) {\n\t\tquit(NULL);\n\t}\n}\n\nvoid\nincnmaster(const Arg *arg)\n{\n\tif (!arg || !selmon)\n\t\treturn;\n\tselmon->nmaster = MAX(selmon->nmaster + arg->i, 0);\n\tarrange(selmon);\n}\n\nvoid\ninputdevice(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised by the backend when a new input device becomes\n\t * available. */\n\tstruct wlr_input_device *device = data;\n\tuint32_t caps;\n\n\tswitch (device->type) {\n\tcase WLR_INPUT_DEVICE_KEYBOARD:\n\t\tcreatekeyboard(wlr_keyboard_from_input_device(device));\n\t\tbreak;\n\tcase WLR_INPUT_DEVICE_POINTER:\n\t\tcreatepointer(wlr_pointer_from_input_device(device));\n\t\tbreak;\n\tdefault:\n\t\t/* TODO handle other input device types */\n\t\tbreak;\n\t}\n\n\t/* We need to let the wlr_seat know what our capabilities are, which is\n\t * communiciated to the client. In dwl we always have a cursor, even if\n\t * there are no pointer devices, so we always include that capability. */\n\t/* TODO do we actually require a cursor? */\n\tcaps = WL_SEAT_CAPABILITY_POINTER;\n\tif (!wl_list_empty(&keyboards))\n\t\tcaps |= WL_SEAT_CAPABILITY_KEYBOARD;\n\twlr_seat_set_capabilities(seat, caps);\n}\n\nint\nkeybinding(uint32_t mods, xkb_keysym_t sym)\n{\n\t/*\n\t * Here we handle compositor keybindings. This is when the compositor is\n\t * processing keys, rather than passing them on to the client for its own\n\t * processing.\n\t */\n\tint handled = 0;\n\tconst Key *k;\n\tfor (k = keys; k < END(keys); k++) {\n\t\tif (CLEANMASK(mods) == CLEANMASK(k->mod) &&\n\t\t\t\tsym == k->keysym && k->func) {\n\t\t\tk->func(&k->arg);\n\t\t\thandled = 1;\n\t\t}\n\t}\n\treturn handled;\n}\n\nvoid\nkeypress(struct wl_listener *listener, void *data)\n{\n\tint i;\n\t/* This event is raised when a key is pressed or released. */\n\tKeyboard *kb = wl_container_of(listener, kb, key);\n\tstruct wlr_keyboard_key_event *event = data;\n\n\t/* Translate libinput keycode -> xkbcommon */\n\tuint32_t keycode = event->keycode + 8;\n\t/* Get a list of keysyms based on the keymap for this keyboard */\n\tconst xkb_keysym_t *syms;\n\tint nsyms = xkb_state_key_get_syms(\n\t\t\tkb->wlr_keyboard->xkb_state, keycode, &syms);\n\n\tint handled = 0;\n\tuint32_t mods = wlr_keyboard_get_modifiers(kb->wlr_keyboard);\n\n\twlr_idle_notifier_v1_notify_activity(idle_notifier, seat);\n\n\t/* On _press_ if there is no active screen locker,\n\t * attempt to process a compositor keybinding. */\n\tif (!locked && event->state == WL_KEYBOARD_KEY_STATE_PRESSED)\n\t\tfor (i = 0; i < nsyms; i++)\n\t\t\thandled = keybinding(mods, syms[i]) || handled;\n\n\tif (handled && kb->wlr_keyboard->repeat_info.delay > 0) {\n\t\tkb->mods = mods;\n\t\tkb->keysyms = syms;\n\t\tkb->nsyms = nsyms;\n\t\twl_event_source_timer_update(kb->key_repeat_source,\n\t\t\t\tkb->wlr_keyboard->repeat_info.delay);\n\t} else {\n\t\tkb->nsyms = 0;\n\t\twl_event_source_timer_update(kb->key_repeat_source, 0);\n\t}\n\n\tif (handled)\n\t\treturn;\n\n\t/* Pass unhandled keycodes along to the client. */\n\twlr_seat_set_keyboard(seat, kb->wlr_keyboard);\n\twlr_seat_keyboard_notify_key(seat, event->time_msec,\n\t\tevent->keycode, event->state);\n}\n\nvoid\nkeypressmod(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised when a modifier key, such as shift or alt, is\n\t * pressed. We simply communicate this to the client. */\n\tKeyboard *kb = wl_container_of(listener, kb, modifiers);\n\t/*\n\t * A seat can only have one keyboard, but this is a limitation of the\n\t * Wayland protocol - not wlroots. We assign all connected keyboards to the\n\t * same seat. You can swap out the underlying wlr_keyboard like this and\n\t * wlr_seat handles this transparently.\n\t */\n\twlr_seat_set_keyboard(seat, kb->wlr_keyboard);\n\t/* Send modifiers to the client. */\n\twlr_seat_keyboard_notify_modifiers(seat,\n\t\t&kb->wlr_keyboard->modifiers);\n}\n\nint\nkeyrepeat(void *data)\n{\n\tKeyboard *kb = data;\n\tint i;\n\tif (!kb->nsyms || kb->wlr_keyboard->repeat_info.rate <= 0)\n\t\treturn 0;\n\n\twl_event_source_timer_update(kb->key_repeat_source,\n\t\t\t1000 / kb->wlr_keyboard->repeat_info.rate);\n\n\tfor (i = 0; i < kb->nsyms; i++)\n\t\tkeybinding(kb->mods, kb->keysyms[i]);\n\n\treturn 0;\n}\n\nvoid\nkillclient(const Arg *arg)\n{\n\tClient *sel = focustop(selmon);\n\tif (sel)\n\t\tclient_send_close(sel);\n}\n\nvoid\nlocksession(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_session_lock_v1 *session_lock = data;\n\tSessionLock *lock;\n\twlr_scene_node_set_enabled(&locked_bg->node, 1);\n\tif (cur_lock) {\n\t\twlr_session_lock_v1_destroy(session_lock);\n\t\treturn;\n\t}\n\tlock = session_lock->data = ecalloc(1, sizeof(*lock));\n\tfocusclient(NULL, 0);\n\n\tlock->scene = wlr_scene_tree_create(layers[LyrBlock]);\n\tcur_lock = lock->lock = session_lock;\n\tlocked = 1;\n\n\tLISTEN(&session_lock->events.new_surface, &lock->new_surface, createlocksurface);\n\tLISTEN(&session_lock->events.destroy, &lock->destroy, destroysessionlock);\n\tLISTEN(&session_lock->events.unlock, &lock->unlock, unlocksession);\n\n\twlr_session_lock_v1_send_locked(session_lock);\n}\n\nvoid\nmaplayersurfacenotify(struct wl_listener *listener, void *data)\n{\n\tLayerSurface *l = wl_container_of(listener, l, map);\n\tmotionnotify(0);\n}\n\nvoid\nmapnotify(struct wl_listener *listener, void *data)\n{\n\t/* Called when the surface is mapped, or ready to display on-screen. */\n\tClient *p, *w, *c = wl_container_of(listener, c, map);\n\tMonitor *m;\n\tint i;\n\n\t/* Create scene tree for this client and its border */\n\tc->scene = client_surface(c)->data = wlr_scene_tree_create(layers[LyrTile]);\n\twlr_scene_node_set_enabled(&c->scene->node, c->type != XDGShell);\n\tc->scene_surface = c->type == XDGShell\n\t\t\t? wlr_scene_xdg_surface_create(c->scene, c->surface.xdg)\n\t\t\t: wlr_scene_subsurface_tree_create(c->scene, client_surface(c));\n\tc->scene->node.data = c->scene_surface->node.data = c;\n\n\t/* Handle unmanaged clients first so we can return prior create borders */\n\tif (client_is_unmanaged(c)) {\n\t\tclient_get_geometry(c, &c->geom);\n\t\t/* Unmanaged clients always are floating */\n\t\twlr_scene_node_reparent(&c->scene->node, layers[LyrFloat]);\n\t\twlr_scene_node_set_position(&c->scene->node, c->geom.x + borderpx,\n\t\t\tc->geom.y + borderpx);\n\t\tif (client_wants_focus(c)) {\n\t\t\tfocusclient(c, 1);\n\t\t\texclusive_focus = c;\n\t\t}\n\t\tgoto unset_fullscreen;\n\t}\n\n\tfor (i = 0; i < 4; i++) {\n\t\tc->border[i] = wlr_scene_rect_create(c->scene, 0, 0, bordercolor);\n\t\tc->border[i]->node.data = c;\n\t}\n\n\t/* Initialize client geometry with room for border */\n\tclient_set_tiled(c, WLR_EDGE_TOP | WLR_EDGE_BOTTOM | WLR_EDGE_LEFT | WLR_EDGE_RIGHT);\n\tclient_get_geometry(c, &c->geom);\n\tc->geom.width += 2 * c->bw;\n\tc->geom.height += 2 * c->bw;\n\n\t/* Insert this client into client lists. */\n\twl_list_insert(&clients, &c->link);\n\twl_list_insert(&fstack, &c->flink);\n\n\t/* Set initial monitor, tags, floating status, and focus:\n\t * we always consider floating, clients that have parent and thus\n\t * we set the same tags and monitor than its parent, if not\n\t * try to apply rules for them */\n\t /* TODO: https://github.com/djpohly/dwl/pull/334#issuecomment-1330166324 */\n\tif (c->type == XDGShell && (p = client_get_parent(c))) {\n\t\tc->isfloating = 1;\n\t\twlr_scene_node_reparent(&c->scene->node, layers[LyrFloat]);\n\t\tsetmon(c, p->mon, p->tags);\n\t} else {\n\t\tapplyrules(c);\n\t}\n\tprintstatus();\n\nunset_fullscreen:\n\tm = c->mon ? c->mon : xytomon(c->geom.x, c->geom.y);\n\twl_list_for_each(w, &clients, link)\n\t\tif (w != c && w->isfullscreen && m == w->mon && (w->tags & c->tags))\n\t\t\tsetfullscreen(w, 0);\n}\n\nvoid\nmaximizenotify(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised when a client would like to maximize itself,\n\t * typically because the user clicked on the maximize button on\n\t * client-side decorations. dwl doesn't support maximization, but\n\t * to conform to xdg-shell protocol we still must send a configure.\n\t * Since xdg-shell protocol v5 we should ignore request of unsupported\n\t * capabilities, just schedule a empty configure when the client uses <5\n\t * protocol version\n\t * wlr_xdg_surface_schedule_configure() is used to send an empty reply. */\n\tClient *c = wl_container_of(listener, c, maximize);\n\tif (wl_resource_get_version(c->surface.xdg->resource)\n\t\t\t< XDG_TOPLEVEL_WM_CAPABILITIES_SINCE_VERSION)\n\t\twlr_xdg_surface_schedule_configure(c->surface.xdg);\n}\n\nvoid\nmonocle(Monitor *m)\n{\n\tClient *c;\n\tint n = 0;\n\n\twl_list_for_each(c, &clients, link) {\n\t\tif (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)\n\t\t\tcontinue;\n\t\tresize(c, m->w, 0);\n\t\tn++;\n\t}\n\tif (n)\n\t\tsnprintf(m->ltsymbol, LENGTH(m->ltsymbol), \"[%d]\", n);\n\tif ((c = focustop(m)))\n\t\twlr_scene_node_raise_to_top(&c->scene->node);\n}\n\nvoid\nmotionabsolute(struct wl_listener *listener, void *data)\n{\n\t/* This event is forwarded by the cursor when a pointer emits an _absolute_\n\t * motion event, from 0..1 on each axis. This happens, for example, when\n\t * wlroots is running under a Wayland window rather than KMS+DRM, and you\n\t * move the mouse over the window. You could enter the window from any edge,\n\t * so we have to warp the mouse there. There is also some hardware which\n\t * emits these events. */\n\tstruct wlr_pointer_motion_absolute_event *event = data;\n\twlr_cursor_warp_absolute(cursor, &event->pointer->base, event->x, event->y);\n\tmotionnotify(event->time_msec);\n}\n\nvoid\nmotionnotify(uint32_t time)\n{\n\tdouble sx = 0, sy = 0;\n\tClient *c = NULL, *w = NULL;\n\tLayerSurface *l = NULL;\n\tint type;\n\tstruct wlr_surface *surface = NULL;\n\n\t/* time is 0 in internal calls meant to restore pointer focus. */\n\tif (time) {\n\t\twlr_idle_notifier_v1_notify_activity(idle_notifier, seat);\n\n\t\t/* Update selmon (even while dragging a window) */\n\t\tif (sloppyfocus)\n\t\t\tselmon = xytomon(cursor->x, cursor->y);\n\t}\n\n\t/* Update drag icon's position */\n\twlr_scene_node_set_position(&drag_icon->node, cursor->x, cursor->y);\n\n\t/* If we are currently grabbing the mouse, handle and return */\n\tif (cursor_mode == CurMove) {\n\t\t/* Move the grabbed client to the new position. */\n\t\tresize(grabc, (struct wlr_box){.x = cursor->x - grabcx, .y = cursor->y - grabcy,\n\t\t\t.width = grabc->geom.width, .height = grabc->geom.height}, 1);\n\t\treturn;\n\t} else if (cursor_mode == CurResize) {\n\t\tresize(grabc, (struct wlr_box){.x = grabc->geom.x, .y = grabc->geom.y,\n\t\t\t.width = cursor->x - grabc->geom.x, .height = cursor->y - grabc->geom.y}, 1);\n\t\treturn;\n\t}\n\n\t/* Find the client under the pointer and send the event along. */\n\txytonode(cursor->x, cursor->y, &surface, &c, NULL, &sx, &sy);\n\n\tif (cursor_mode == CurPressed && !seat->drag) {\n\t\tif ((type = toplevel_from_wlr_surface(\n\t\t\t\t seat->pointer_state.focused_surface, &w, &l)) >= 0) {\n\t\t\tc = w;\n\t\t\tsurface = seat->pointer_state.focused_surface;\n\t\t\tsx = cursor->x - (type == LayerShell ? l->geom.x : w->geom.x);\n\t\t\tsy = cursor->y - (type == LayerShell ? l->geom.y : w->geom.y);\n\t\t}\n\t}\n\n\t/* If there's no client surface under the cursor, set the cursor image to a\n\t * default. This is what makes the cursor image appear when you move it\n\t * off of a client or over its border. */\n\tif (!surface && !seat->drag)\n\t\twlr_cursor_set_xcursor(cursor, cursor_mgr, \"default\");\n\n\tpointerfocus(c, surface, sx, sy, time);\n}\n\nvoid\nmotionrelative(struct wl_listener *listener, void *data)\n{\n\t/* This event is forwarded by the cursor when a pointer emits a _relative_\n\t * pointer motion event (i.e. a delta) */\n\tstruct wlr_pointer_motion_event *event = data;\n\t/* The cursor doesn't move unless we tell it to. The cursor automatically\n\t * handles constraining the motion to the output layout, as well as any\n\t * special configuration applied for the specific input device which\n\t * generated the event. You can pass NULL for the device if you want to move\n\t * the cursor around without any input. */\n\twlr_cursor_move(cursor, &event->pointer->base, event->delta_x, event->delta_y);\n\tmotionnotify(event->time_msec);\n}\n\nvoid\nmoveresize(const Arg *arg)\n{\n\tif (cursor_mode != CurNormal && cursor_mode != CurPressed)\n\t\treturn;\n\txytonode(cursor->x, cursor->y, NULL, &grabc, NULL, NULL, NULL);\n\tif (!grabc || client_is_unmanaged(grabc) || grabc->isfullscreen)\n\t\treturn;\n\n\t/* Float the window and tell motionnotify to grab it */\n\tsetfloating(grabc, 1);\n\tswitch (cursor_mode = arg->ui) {\n\tcase CurMove:\n\t\tgrabcx = cursor->x - grabc->geom.x;\n\t\tgrabcy = cursor->y - grabc->geom.y;\n\t\twlr_cursor_set_xcursor(cursor, cursor_mgr, \"fleur\");\n\t\tbreak;\n\tcase CurResize:\n\t\t/* Doesn't work for X11 output - the next absolute motion event\n\t\t * returns the cursor to where it started */\n\t\twlr_cursor_warp_closest(cursor, NULL,\n\t\t\t\tgrabc->geom.x + grabc->geom.width,\n\t\t\t\tgrabc->geom.y + grabc->geom.height);\n\t\twlr_cursor_set_xcursor(cursor, cursor_mgr, \"se-resize\");\n\t\tbreak;\n\t}\n}\n\nvoid\noutputmgrapply(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_output_configuration_v1 *config = data;\n\toutputmgrapplyortest(config, 0);\n}\n\nvoid\noutputmgrapplyortest(struct wlr_output_configuration_v1 *config, int test)\n{\n\t/*\n\t * Called when a client such as wlr-randr requests a change in output\n\t * configuration. This is only one way that the layout can be changed,\n\t * so any Monitor information should be updated by updatemons() after an\n\t * output_layout.change event, not here.\n\t */\n\tstruct wlr_output_configuration_head_v1 *config_head;\n\tint ok = 1;\n\n\twl_list_for_each(config_head, &config->heads, link) {\n\t\tstruct wlr_output *wlr_output = config_head->state.output;\n\t\tMonitor *m = wlr_output->data;\n\n\t\twlr_output_enable(wlr_output, config_head->state.enabled);\n\t\tif (!config_head->state.enabled)\n\t\t\tgoto apply_or_test;\n\t\tif (config_head->state.mode)\n\t\t\twlr_output_set_mode(wlr_output, config_head->state.mode);\n\t\telse\n\t\t\twlr_output_set_custom_mode(wlr_output,\n\t\t\t\t\tconfig_head->state.custom_mode.width,\n\t\t\t\t\tconfig_head->state.custom_mode.height,\n\t\t\t\t\tconfig_head->state.custom_mode.refresh);\n\n\t\t/* Don't move monitors if position wouldn't change, this to avoid\n\t\t * wlroots marking the output as manually configured */\n\t\tif (m->m.x != config_head->state.x || m->m.y != config_head->state.y)\n\t\t\twlr_output_layout_add(output_layout, wlr_output,\n\t\t\t\t\tconfig_head->state.x, config_head->state.y);\n\t\twlr_output_set_transform(wlr_output, config_head->state.transform);\n\t\twlr_output_set_scale(wlr_output, config_head->state.scale);\n\t\twlr_output_enable_adaptive_sync(wlr_output,\n\t\t\t\tconfig_head->state.adaptive_sync_enabled);\n\napply_or_test:\n\t\tif (test) {\n\t\t\tok &= wlr_output_test(wlr_output);\n\t\t\twlr_output_rollback(wlr_output);\n\t\t} else {\n\t\t\tok &= wlr_output_commit(wlr_output);\n\t\t}\n\t}\n\n\tif (ok)\n\t\twlr_output_configuration_v1_send_succeeded(config);\n\telse\n\t\twlr_output_configuration_v1_send_failed(config);\n\twlr_output_configuration_v1_destroy(config);\n\n\t/* TODO: use a wrapper function? */\n\tupdatemons(NULL, NULL);\n}\n\nvoid\noutputmgrtest(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_output_configuration_v1 *config = data;\n\toutputmgrapplyortest(config, 1);\n}\n\nvoid\npointerfocus(Client *c, struct wlr_surface *surface, double sx, double sy,\n\t\tuint32_t time)\n{\n\tstruct timespec now;\n\tint internal_call = !time;\n\n\tif (sloppyfocus && !internal_call && c && !client_is_unmanaged(c))\n\t\tfocusclient(c, 0);\n\n\t/* If surface is NULL, clear pointer focus */\n\tif (!surface) {\n\t\twlr_seat_pointer_notify_clear_focus(seat);\n\t\treturn;\n\t}\n\n\tif (internal_call) {\n\t\tclock_gettime(CLOCK_MONOTONIC, &now);\n\t\ttime = now.tv_sec * 1000 + now.tv_nsec / 1000000;\n\t}\n\n\t/* Let the client know that the mouse cursor has entered one\n\t * of its surfaces, and make keyboard focus follow if desired.\n\t * wlroots makes this a no-op if surface is already focused */\n\twlr_seat_pointer_notify_enter(seat, surface, sx, sy);\n\twlr_seat_pointer_notify_motion(seat, time, sx, sy);\n\n}\n\nvoid\nprintstatus(void)\n{\n\tMonitor *m = NULL;\n\tClient *c;\n\tuint32_t occ, urg, sel;\n\tconst char *appid, *title;\n\n\twl_list_for_each(m, &mons, link) {\n\t\tocc = urg = 0;\n\t\twl_list_for_each(c, &clients, link) {\n\t\t\tif (c->mon != m)\n\t\t\t\tcontinue;\n\t\t\tocc |= c->tags;\n\t\t\tif (c->isurgent)\n\t\t\t\turg |= c->tags;\n\t\t}\n\t\tif ((c = focustop(m))) {\n\t\t\ttitle = client_get_title(c);\n\t\t\tappid = client_get_appid(c);\n\t\t\tprintf(\"%s title %s\\n\", m->wlr_output->name, title ? title : broken);\n\t\t\tprintf(\"%s appid %s\\n\", m->wlr_output->name, appid ? appid : broken);\n\t\t\tprintf(\"%s fullscreen %u\\n\", m->wlr_output->name, c->isfullscreen);\n\t\t\tprintf(\"%s floating %u\\n\", m->wlr_output->name, c->isfloating);\n\t\t\tsel = c->tags;\n\t\t} else {\n\t\t\tprintf(\"%s title \\n\", m->wlr_output->name);\n\t\t\tprintf(\"%s appid \\n\", m->wlr_output->name);\n\t\t\tprintf(\"%s fullscreen \\n\", m->wlr_output->name);\n\t\t\tprintf(\"%s floating \\n\", m->wlr_output->name);\n\t\t\tsel = 0;\n\t\t}\n\n\t\tprintf(\"%s selmon %u\\n\", m->wlr_output->name, m == selmon);\n\t\tprintf(\"%s tags %u %u %u %u\\n\", m->wlr_output->name, occ, m->tagset[m->seltags],\n\t\t\t\tsel, urg);\n\t\tprintf(\"%s layout %s\\n\", m->wlr_output->name, m->ltsymbol);\n\t}\n\tfflush(stdout);\n}\n\nvoid\nquit(const Arg *arg)\n{\n\twl_display_terminate(dpy);\n}\n\nvoid\nrendermon(struct wl_listener *listener, void *data)\n{\n\t/* This function is called every time an output is ready to display a frame,\n\t * generally at the output's refresh rate (e.g. 60Hz). */\n\tMonitor *m = wl_container_of(listener, m, frame);\n\tClient *c;\n\tstruct wlr_output_state pending = {0};\n\tstruct wlr_gamma_control_v1 *gamma_control;\n\tstruct timespec now;\n\n\t/* Render if no XDG clients have an outstanding resize and are visible on\n\t * this monitor. */\n\twl_list_for_each(c, &clients, link)\n\t\tif (c->resize && !c->isfloating && client_is_rendered_on_mon(c, m) && !client_is_stopped(c))\n\t\t\tgoto skip;\n\n\t/*\n\t * HACK: The \"correct\" way to set the gamma is to commit it together with\n\t * the rest of the state in one go, but to do that we would need to rewrite\n\t * wlr_scene_output_commit() in order to add the gamma to the pending\n\t * state before committing, instead try to commit the gamma in one frame,\n\t * and commit the rest of the state in the next one (or in the same frame if\n\t * the gamma can not be committed).\n\t */\n\tif (m->gamma_lut_changed) {\n\t\tgamma_control = wlr_gamma_control_manager_v1_get_control(gamma_control_mgr, m->wlr_output);\n\t\tm->gamma_lut_changed = 0;\n\n\t\tif (!wlr_gamma_control_v1_apply(gamma_control, &pending))\n\t\t\tgoto commit;\n\n\t\tif (!wlr_output_test_state(m->wlr_output, &pending)) {\n\t\t\twlr_gamma_control_v1_send_failed_and_destroy(gamma_control);\n\t\t\tgoto commit;\n\t\t}\n\t\twlr_output_commit_state(m->wlr_output, &pending);\n\t\twlr_output_schedule_frame(m->wlr_output);\n\t} else {\ncommit:\n\t\twlr_scene_output_commit(m->scene_output, NULL);\n\t}\n\nskip:\n\t/* Let clients know a frame has been rendered */\n\tclock_gettime(CLOCK_MONOTONIC, &now);\n\twlr_scene_output_send_frame_done(m->scene_output, &now);\n\twlr_output_state_finish(&pending);\n}\n\nvoid\nrequeststartdrag(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_seat_request_start_drag_event *event = data;\n\n\tif (wlr_seat_validate_pointer_grab_serial(seat, event->origin,\n\t\t\tevent->serial))\n\t\twlr_seat_start_pointer_drag(seat, event->drag, event->serial);\n\telse\n\t\twlr_data_source_destroy(event->drag->source);\n}\n\nvoid\nrequestmonstate(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_output_event_request_state *event = data;\n\twlr_output_commit_state(event->output, event->state);\n\tupdatemons(NULL, NULL);\n}\n\nvoid\nresize(Client *c, struct wlr_box geo, int interact)\n{\n\tstruct wlr_box *bbox = interact ? &sgeom : &c->mon->w;\n\tstruct wlr_box clip;\n\tclient_set_bounds(c, geo.width, geo.height);\n\tc->geom = geo;\n\tapplybounds(c, bbox);\n\n\t/* Update scene-graph, including borders */\n\twlr_scene_node_set_position(&c->scene->node, c->geom.x, c->geom.y);\n\twlr_scene_node_set_position(&c->scene_surface->node, c->bw, c->bw);\n\twlr_scene_rect_set_size(c->border[0], c->geom.width, c->bw);\n\twlr_scene_rect_set_size(c->border[1], c->geom.width, c->bw);\n\twlr_scene_rect_set_size(c->border[2], c->bw, c->geom.height - 2 * c->bw);\n\twlr_scene_rect_set_size(c->border[3], c->bw, c->geom.height - 2 * c->bw);\n\twlr_scene_node_set_position(&c->border[1]->node, 0, c->geom.height - c->bw);\n\twlr_scene_node_set_position(&c->border[2]->node, 0, c->bw);\n\twlr_scene_node_set_position(&c->border[3]->node, c->geom.width - c->bw, c->bw);\n\n\t/* this is a no-op if size hasn't changed */\n\tc->resize = client_set_size(c, c->geom.width - 2 * c->bw,\n\t\t\tc->geom.height - 2 * c->bw);\n\tclient_get_clip(c, &clip);\n\twlr_scene_subsurface_tree_set_clip(&c->scene_surface->node, &clip);\n}\n\nvoid\nrun(char *startup_cmd)\n{\n\t/* Add a Unix socket to the Wayland display. */\n\tconst char *socket = wl_display_add_socket_auto(dpy);\n\tif (!socket)\n\t\tdie(\"startup: display_add_socket_auto\");\n\tsetenv(\"WAYLAND_DISPLAY\", socket, 1);\n\n\t/* Start the backend. This will enumerate outputs and inputs, become the DRM\n\t * master, etc */\n\tif (!wlr_backend_start(backend))\n\t\tdie(\"startup: backend_start\");\n\n\t/* Now that the socket exists and the backend is started, run the startup command */\n\tif (startup_cmd) {\n\t\tint piperw[2];\n\t\tif (pipe(piperw) < 0)\n\t\t\tdie(\"startup: pipe:\");\n\t\tif ((child_pid = fork()) < 0)\n\t\t\tdie(\"startup: fork:\");\n\t\tif (child_pid == 0) {\n\t\t\tdup2(piperw[0], STDIN_FILENO);\n\t\t\tclose(piperw[0]);\n\t\t\tclose(piperw[1]);\n\t\t\texecl(\"/bin/sh\", \"/bin/sh\", \"-c\", startup_cmd, NULL);\n\t\t\tdie(\"startup: execl:\");\n\t\t}\n\t\tdup2(piperw[1], STDOUT_FILENO);\n\t\tclose(piperw[1]);\n\t\tclose(piperw[0]);\n\t}\n\tprintstatus();\n\n\t/* At this point the outputs are initialized, choose initial selmon based on\n\t * cursor position, and set default cursor image */\n\tselmon = xytomon(cursor->x, cursor->y);\n\n\t/* TODO hack to get cursor to display in its initial location (100, 100)\n\t * instead of (0, 0) and then jumping. still may not be fully\n\t * initialized, as the image/coordinates are not transformed for the\n\t * monitor when displayed here */\n\twlr_cursor_warp_closest(cursor, NULL, cursor->x, cursor->y);\n\twlr_cursor_set_xcursor(cursor, cursor_mgr, \"default\");\n\n\t/* Run the Wayland event loop. This does not return until you exit the\n\t * compositor. Starting the backend rigged up all of the necessary event\n\t * loop configuration to listen to libinput events, DRM events, generate\n\t * frame events at the refresh rate, and so on. */\n\twl_display_run(dpy);\n}\n\nvoid\nsetcursor(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised by the seat when a client provides a cursor image */\n\tstruct wlr_seat_pointer_request_set_cursor_event *event = data;\n\t/* If we're \"grabbing\" the cursor, don't use the client's image, we will\n\t * restore it after \"grabbing\" sending a leave event, followed by a enter\n\t * event, which will result in the client requesting set the cursor surface */\n\tif (cursor_mode != CurNormal && cursor_mode != CurPressed)\n\t\treturn;\n\t/* This can be sent by any client, so we check to make sure this one is\n\t * actually has pointer focus first. If so, we can tell the cursor to\n\t * use the provided surface as the cursor image. It will set the\n\t * hardware cursor on the output that it's currently on and continue to\n\t * do so as the cursor moves between outputs. */\n\tif (event->seat_client == seat->pointer_state.focused_client)\n\t\twlr_cursor_set_surface(cursor, event->surface,\n\t\t\t\tevent->hotspot_x, event->hotspot_y);\n}\n\nvoid\nsetcursorshape(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_cursor_shape_manager_v1_request_set_shape_event *event = data;\n\tif (cursor_mode != CurNormal && cursor_mode != CurPressed)\n\t\treturn;\n\t/* This can be sent by any client, so we check to make sure this one is\n\t * actually has pointer focus first. If so, we can tell the cursor to\n\t * use the provided cursor shape. */\n\tif (event->seat_client == seat->pointer_state.focused_client)\n\t\twlr_cursor_set_xcursor(cursor, cursor_mgr,\n\t\t\t\t\t\t\t   wlr_cursor_shape_v1_name(event->shape));\n}\n\nvoid\nsetfloating(Client *c, int floating)\n{\n\tc->isfloating = floating;\n\tif (!c->mon)\n\t\treturn;\n\twlr_scene_node_reparent(&c->scene->node, layers[c->isfullscreen\n\t\t\t? LyrFS : c->isfloating ? LyrFloat : LyrTile]);\n\tarrange(c->mon);\n\tprintstatus();\n}\n\nvoid\nsetfullscreen(Client *c, int fullscreen)\n{\n\tc->isfullscreen = fullscreen;\n\tif (!c->mon)\n\t\treturn;\n\tc->bw = fullscreen ? 0 : borderpx;\n\tclient_set_fullscreen(c, fullscreen);\n\twlr_scene_node_reparent(&c->scene->node, layers[c->isfullscreen\n\t\t\t? LyrFS : c->isfloating ? LyrFloat : LyrTile]);\n\n\tif (fullscreen) {\n\t\tc->prev = c->geom;\n\t\tresize(c, c->mon->m, 0);\n\t} else {\n\t\t/* restore previous size instead of arrange for floating windows since\n\t\t * client positions are set by the user and cannot be recalculated */\n\t\tresize(c, c->prev, 0);\n\t}\n\tarrange(c->mon);\n\tprintstatus();\n}\n\nvoid\nsetgamma(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_gamma_control_manager_v1_set_gamma_event *event = data;\n\tMonitor *m = event->output->data;\n\tm->gamma_lut_changed = 1;\n\twlr_output_schedule_frame(m->wlr_output);\n}\n\nvoid\nsetlayout(const Arg *arg)\n{\n\tif (!selmon)\n\t\treturn;\n\tif (!arg || !arg->v || arg->v != selmon->lt[selmon->sellt])\n\t\tselmon->sellt ^= 1;\n\tif (arg && arg->v)\n\t\tselmon->lt[selmon->sellt] = (Layout *)arg->v;\n\tstrncpy(selmon->ltsymbol, selmon->lt[selmon->sellt]->symbol, LENGTH(selmon->ltsymbol));\n\tarrange(selmon);\n\tprintstatus();\n}\n\n/* arg > 1.0 will set mfact absolutely */\nvoid\nsetmfact(const Arg *arg)\n{\n\tfloat f;\n\n\tif (!arg || !selmon || !selmon->lt[selmon->sellt]->arrange)\n\t\treturn;\n\tf = arg->f < 1.0 ? arg->f + selmon->mfact : arg->f - 1.0;\n\tif (f < 0.1 || f > 0.9)\n\t\treturn;\n\tselmon->mfact = f;\n\tarrange(selmon);\n}\n\nvoid\nsetmon(Client *c, Monitor *m, uint32_t newtags)\n{\n\tMonitor *oldmon = c->mon;\n\n\tif (oldmon == m)\n\t\treturn;\n\tc->mon = m;\n\tc->prev = c->geom;\n\n\t/* Scene graph sends surface leave/enter events on move and resize */\n\tif (oldmon)\n\t\tarrange(oldmon);\n\tif (m) {\n\t\t/* Make sure window actually overlaps with the monitor */\n\t\tresize(c, c->geom, 0);\n\t\tc->tags = newtags ? newtags : m->tagset[m->seltags]; /* assign tags of target monitor */\n\t\tsetfullscreen(c, c->isfullscreen); /* This will call arrange(c->mon) */\n\t\tsetfloating(c, c->isfloating);\n\t}\n\tfocusclient(focustop(selmon), 1);\n}\n\nvoid\nsetpsel(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised by the seat when a client wants to set the selection,\n\t * usually when the user copies something. wlroots allows compositors to\n\t * ignore such requests if they so choose, but in dwl we always honor\n\t */\n\tstruct wlr_seat_request_set_primary_selection_event *event = data;\n\twlr_seat_set_primary_selection(seat, event->source, event->serial);\n}\n\nvoid\nsetsel(struct wl_listener *listener, void *data)\n{\n\t/* This event is raised by the seat when a client wants to set the selection,\n\t * usually when the user copies something. wlroots allows compositors to\n\t * ignore such requests if they so choose, but in dwl we always honor\n\t */\n\tstruct wlr_seat_request_set_selection_event *event = data;\n\twlr_seat_set_selection(seat, event->source, event->serial);\n}\n\nvoid\nsetup(void)\n{\n\tint i, sig[] = {SIGCHLD, SIGINT, SIGTERM, SIGPIPE};\n\tstruct sigaction sa = {.sa_flags = SA_RESTART, .sa_handler = handlesig};\n\tsigemptyset(&sa.sa_mask);\n\n\tfor (i = 0; i < LENGTH(sig); i++)\n\t\tsigaction(sig[i], &sa, NULL);\n\n\twlr_log_init(log_level, NULL);\n\n\t/* The Wayland display is managed by libwayland. It handles accepting\n\t * clients from the Unix socket, manging Wayland globals, and so on. */\n\tdpy = wl_display_create();\n\n\t/* The backend is a wlroots feature which abstracts the underlying input and\n\t * output hardware. The autocreate option will choose the most suitable\n\t * backend based on the current environment, such as opening an X11 window\n\t * if an X11 server is running. */\n\tif (!(backend = wlr_backend_autocreate(dpy, &session)))\n\t\tdie(\"couldn't create backend\");\n\n\t/* Initialize the scene graph used to lay out windows */\n\tscene = wlr_scene_create();\n\tfor (i = 0; i < NUM_LAYERS; i++)\n\t\tlayers[i] = wlr_scene_tree_create(&scene->tree);\n\tdrag_icon = wlr_scene_tree_create(&scene->tree);\n\twlr_scene_node_place_below(&drag_icon->node, &layers[LyrBlock]->node);\n\n\t/* Autocreates a renderer, either Pixman, GLES2 or Vulkan for us. The user\n\t * can also specify a renderer using the WLR_RENDERER env var.\n\t * The renderer is responsible for defining the various pixel formats it\n\t * supports for shared memory, this configures that for clients. */\n\tif (!(drw = wlr_renderer_autocreate(backend)))\n\t\tdie(\"couldn't create renderer\");\n\n\t/* Create shm, drm and linux_dmabuf interfaces by ourselves.\n\t * The simplest way is call:\n\t *      wlr_renderer_init_wl_display(drw);\n\t * but we need to create manually the linux_dmabuf interface to integrate it\n\t * with wlr_scene. */\n\twlr_renderer_init_wl_shm(drw, dpy);\n\n\tif (wlr_renderer_get_dmabuf_texture_formats(drw)) {\n\t\twlr_drm_create(dpy, drw);\n\t\twlr_scene_set_linux_dmabuf_v1(scene,\n\t\t\t\twlr_linux_dmabuf_v1_create_with_renderer(dpy, 4, drw));\n\t}\n\n\t/* Autocreates an allocator for us.\n\t * The allocator is the bridge between the renderer and the backend. It\n\t * handles the buffer creation, allowing wlroots to render onto the\n\t * screen */\n\tif (!(alloc = wlr_allocator_autocreate(backend, drw)))\n\t\tdie(\"couldn't create allocator\");\n\n\t/* This creates some hands-off wlroots interfaces. The compositor is\n\t * necessary for clients to allocate surfaces and the data device manager\n\t * handles the clipboard. Each of these wlroots interfaces has room for you\n\t * to dig your fingers in and play with their behavior if you want. Note that\n\t * the clients cannot set the selection directly without compositor approval,\n\t * see the setsel() function. */\n\tcompositor = wlr_compositor_create(dpy, 6, drw);\n\twlr_subcompositor_create(dpy);\n\twlr_data_device_manager_create(dpy);\n\twlr_export_dmabuf_manager_v1_create(dpy);\n\twlr_screencopy_manager_v1_create(dpy);\n\twlr_data_control_manager_v1_create(dpy);\n\twlr_primary_selection_v1_device_manager_create(dpy);\n\twlr_viewporter_create(dpy);\n\twlr_single_pixel_buffer_manager_v1_create(dpy);\n\twlr_fractional_scale_manager_v1_create(dpy, 1);\n\n\t/* Initializes the interface used to implement urgency hints */\n\tactivation = wlr_xdg_activation_v1_create(dpy);\n\tLISTEN_STATIC(&activation->events.request_activate, urgent);\n\n\tgamma_control_mgr = wlr_gamma_control_manager_v1_create(dpy);\n\tLISTEN_STATIC(&gamma_control_mgr->events.set_gamma, setgamma);\n\n\t/* Creates an output layout, which a wlroots utility for working with an\n\t * arrangement of screens in a physical layout. */\n\toutput_layout = wlr_output_layout_create();\n\tLISTEN_STATIC(&output_layout->events.change, updatemons);\n\twlr_xdg_output_manager_v1_create(dpy, output_layout);\n\n\t/* Configure a listener to be notified when new outputs are available on the\n\t * backend. */\n\twl_list_init(&mons);\n\tLISTEN_STATIC(&backend->events.new_output, createmon);\n\n\t/* Set up our client lists, the xdg-shell and the layer-shell. The xdg-shell is a\n\t * Wayland protocol which is used for application windows. For more\n\t * detail on shells, refer to the article:\n\t *\n\t * https://drewdevault.com/2018/07/29/Wayland-shells.html\n\t */\n\twl_list_init(&clients);\n\twl_list_init(&fstack);\n\n\txdg_shell = wlr_xdg_shell_create(dpy, 6);\n\tLISTEN_STATIC(&xdg_shell->events.new_surface, createnotify);\n\n\tlayer_shell = wlr_layer_shell_v1_create(dpy, 3);\n\tLISTEN_STATIC(&layer_shell->events.new_surface, createlayersurface);\n\n\tidle_notifier = wlr_idle_notifier_v1_create(dpy);\n\n\tidle_inhibit_mgr = wlr_idle_inhibit_v1_create(dpy);\n\tLISTEN_STATIC(&idle_inhibit_mgr->events.new_inhibitor, createidleinhibitor);\n\n\tsession_lock_mgr = wlr_session_lock_manager_v1_create(dpy);\n\twl_signal_add(&session_lock_mgr->events.new_lock, &lock_listener);\n\tLISTEN_STATIC(&session_lock_mgr->events.destroy, destroysessionmgr);\n\tlocked_bg = wlr_scene_rect_create(layers[LyrBlock], sgeom.width, sgeom.height,\n\t\t\t(float [4]){0.1, 0.1, 0.1, 1.0});\n\twlr_scene_node_set_enabled(&locked_bg->node, 0);\n\n\t/* Use decoration protocols to negotiate server-side decorations */\n\twlr_server_decoration_manager_set_default_mode(\n\t\t\twlr_server_decoration_manager_create(dpy),\n\t\t\tWLR_SERVER_DECORATION_MANAGER_MODE_SERVER);\n\txdg_decoration_mgr = wlr_xdg_decoration_manager_v1_create(dpy);\n\tLISTEN_STATIC(&xdg_decoration_mgr->events.new_toplevel_decoration, createdecoration);\n\n\t/*\n\t * Creates a cursor, which is a wlroots utility for tracking the cursor\n\t * image shown on screen.\n\t */\n\tcursor = wlr_cursor_create();\n\twlr_cursor_attach_output_layout(cursor, output_layout);\n\n\t/* Creates an xcursor manager, another wlroots utility which loads up\n\t * Xcursor themes to source cursor images from and makes sure that cursor\n\t * images are available at all scale factors on the screen (necessary for\n\t * HiDPI support). Scaled cursors will be loaded with each output. */\n\tcursor_mgr = wlr_xcursor_manager_create(NULL, 24);\n\tsetenv(\"XCURSOR_SIZE\", \"24\", 1);\n\n\t/*\n\t * wlr_cursor *only* displays an image on screen. It does not move around\n\t * when the pointer moves. However, we can attach input devices to it, and\n\t * it will generate aggregate events for all of them. In these events, we\n\t * can choose how we want to process them, forwarding them to clients and\n\t * moving the cursor around. More detail on this process is described in\n\t * https://drewdevault.com/2018/07/17/Input-handling-in-wlroots.html\n\t *\n\t * And more comments are sprinkled throughout the notify functions above.\n\t */\n\tLISTEN_STATIC(&cursor->events.motion, motionrelative);\n\tLISTEN_STATIC(&cursor->events.motion_absolute, motionabsolute);\n\tLISTEN_STATIC(&cursor->events.button, buttonpress);\n\tLISTEN_STATIC(&cursor->events.axis, axisnotify);\n\tLISTEN_STATIC(&cursor->events.frame, cursorframe);\n\n\tcursor_shape_mgr = wlr_cursor_shape_manager_v1_create(dpy, 1);\n\tLISTEN_STATIC(&cursor_shape_mgr->events.request_set_shape, setcursorshape);\n\n\t/*\n\t * Configures a seat, which is a single \"seat\" at which a user sits and\n\t * operates the computer. This conceptually includes up to one keyboard,\n\t * pointer, touch, and drawing tablet device. We also rig up a listener to\n\t * let us know when new input devices are available on the backend.\n\t */\n\twl_list_init(&keyboards);\n\tLISTEN_STATIC(&backend->events.new_input, inputdevice);\n\tvirtual_keyboard_mgr = wlr_virtual_keyboard_manager_v1_create(dpy);\n\tLISTEN_STATIC(&virtual_keyboard_mgr->events.new_virtual_keyboard, virtualkeyboard);\n\tseat = wlr_seat_create(dpy, \"seat0\");\n\tLISTEN_STATIC(&seat->events.request_set_cursor, setcursor);\n\tLISTEN_STATIC(&seat->events.request_set_selection, setsel);\n\tLISTEN_STATIC(&seat->events.request_set_primary_selection, setpsel);\n\tLISTEN_STATIC(&seat->events.request_start_drag, requeststartdrag);\n\tLISTEN_STATIC(&seat->events.start_drag, startdrag);\n\n\toutput_mgr = wlr_output_manager_v1_create(dpy);\n\tLISTEN_STATIC(&output_mgr->events.apply, outputmgrapply);\n\tLISTEN_STATIC(&output_mgr->events.test, outputmgrtest);\n\n\twlr_scene_set_presentation(scene, wlr_presentation_create(dpy, backend));\n\n#ifdef XWAYLAND\n\t/*\n\t * Initialise the XWayland X server.\n\t * It will be started when the first X client is started.\n\t */\n\txwayland = wlr_xwayland_create(dpy, compositor, 1);\n\tif (xwayland) {\n\t\tLISTEN_STATIC(&xwayland->events.ready, xwaylandready);\n\t\tLISTEN_STATIC(&xwayland->events.new_surface, createnotifyx11);\n\n\t\tsetenv(\"DISPLAY\", xwayland->display_name, 1);\n\t} else {\n\t\tfprintf(stderr, \"failed to setup XWayland X server, continuing without it\\n\");\n\t}\n#endif\n}\n\nvoid\nspawn(const Arg *arg)\n{\n\tif (fork() == 0) {\n\t\tdup2(STDERR_FILENO, STDOUT_FILENO);\n\t\tsetsid();\n\t\texecvp(((char **)arg->v)[0], (char **)arg->v);\n\t\tdie(\"dwl: execvp %s failed:\", ((char **)arg->v)[0]);\n\t}\n}\n\nvoid\nstartdrag(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_drag *drag = data;\n\tif (!drag->icon)\n\t\treturn;\n\n\tdrag->icon->data = &wlr_scene_drag_icon_create(drag_icon, drag->icon)->node;\n\tLISTEN_STATIC(&drag->icon->events.destroy, destroydragicon);\n}\n\nvoid\ntag(const Arg *arg)\n{\n\tClient *sel = focustop(selmon);\n\tif (!sel || (arg->ui & TAGMASK) == 0)\n\t\treturn;\n\n\tsel->tags = arg->ui & TAGMASK;\n\tfocusclient(focustop(selmon), 1);\n\tarrange(selmon);\n\tprintstatus();\n}\n\nvoid\ntagmon(const Arg *arg)\n{\n\tClient *sel = focustop(selmon);\n\tif (sel)\n\t\tsetmon(sel, dirtomon(arg->i), 0);\n}\n\nvoid\ntile(Monitor *m)\n{\n\tunsigned int i, n = 0, mw, my, ty;\n\tClient *c;\n\n\twl_list_for_each(c, &clients, link)\n\t\tif (VISIBLEON(c, m) && !c->isfloating && !c->isfullscreen)\n\t\t\tn++;\n\tif (n == 0)\n\t\treturn;\n\n\tif (n > m->nmaster)\n\t\tmw = m->nmaster ? m->w.width * m->mfact : 0;\n\telse\n\t\tmw = m->w.width;\n\ti = my = ty = 0;\n\twl_list_for_each(c, &clients, link) {\n\t\tif (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)\n\t\t\tcontinue;\n\t\tif (i < m->nmaster) {\n\t\t\tresize(c, (struct wlr_box){.x = m->w.x, .y = m->w.y + my, .width = mw,\n\t\t\t\t.height = (m->w.height - my) / (MIN(n, m->nmaster) - i)}, 0);\n\t\t\tmy += c->geom.height;\n\t\t} else {\n\t\t\tresize(c, (struct wlr_box){.x = m->w.x + mw, .y = m->w.y + ty,\n\t\t\t\t.width = m->w.width - mw, .height = (m->w.height - ty) / (n - i)}, 0);\n\t\t\tty += c->geom.height;\n\t\t}\n\t\ti++;\n\t}\n}\n\nvoid\ntogglefloating(const Arg *arg)\n{\n\tClient *sel = focustop(selmon);\n\t/* return if fullscreen */\n\tif (sel && !sel->isfullscreen)\n\t\tsetfloating(sel, !sel->isfloating);\n}\n\nvoid\ntogglefullscreen(const Arg *arg)\n{\n\tClient *sel = focustop(selmon);\n\tif (sel)\n\t\tsetfullscreen(sel, !sel->isfullscreen);\n}\n\nvoid\ntoggletag(const Arg *arg)\n{\n\tuint32_t newtags;\n\tClient *sel = focustop(selmon);\n\tif (!sel)\n\t\treturn;\n\tnewtags = sel->tags ^ (arg->ui & TAGMASK);\n\tif (!newtags)\n\t\treturn;\n\n\tsel->tags = newtags;\n\tfocusclient(focustop(selmon), 1);\n\tarrange(selmon);\n\tprintstatus();\n}\n\nvoid\ntoggleview(const Arg *arg)\n{\n\tuint32_t newtagset = selmon ? selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK) : 0;\n\n\tif (!newtagset)\n\t\treturn;\n\n\tselmon->tagset[selmon->seltags] = newtagset;\n\tfocusclient(focustop(selmon), 1);\n\tarrange(selmon);\n\tprintstatus();\n}\n\nvoid\nunlocksession(struct wl_listener *listener, void *data)\n{\n\tSessionLock *lock = wl_container_of(listener, lock, unlock);\n\tdestroylock(lock, 1);\n}\n\nvoid\nunmaplayersurfacenotify(struct wl_listener *listener, void *data)\n{\n\tLayerSurface *layersurface = wl_container_of(listener, layersurface, unmap);\n\n\tlayersurface->mapped = 0;\n\twlr_scene_node_set_enabled(&layersurface->scene->node, 0);\n\tif (layersurface == exclusive_focus)\n\t\texclusive_focus = NULL;\n\tif (layersurface->layer_surface->output\n\t\t\t&& (layersurface->mon = layersurface->layer_surface->output->data))\n\t\tarrangelayers(layersurface->mon);\n\tif (layersurface->layer_surface->surface ==\n\t\t\tseat->keyboard_state.focused_surface)\n\t\tfocusclient(focustop(selmon), 1);\n\tmotionnotify(0);\n}\n\nvoid\nunmapnotify(struct wl_listener *listener, void *data)\n{\n\t/* Called when the surface is unmapped, and should no longer be shown. */\n\tClient *c = wl_container_of(listener, c, unmap);\n\tif (c == grabc) {\n\t\tcursor_mode = CurNormal;\n\t\tgrabc = NULL;\n\t}\n\n\tif (client_is_unmanaged(c)) {\n\t\tif (c == exclusive_focus)\n\t\t\texclusive_focus = NULL;\n\t\tif (client_surface(c) == seat->keyboard_state.focused_surface)\n\t\t\tfocusclient(focustop(selmon), 1);\n\t} else {\n\t\twl_list_remove(&c->link);\n\t\tsetmon(c, NULL, 0);\n\t\twl_list_remove(&c->flink);\n\t}\n\n\twlr_scene_node_destroy(&c->scene->node);\n\tprintstatus();\n\tmotionnotify(0);\n}\n\nvoid\nupdatemons(struct wl_listener *listener, void *data)\n{\n\t/*\n\t * Called whenever the output layout changes: adding or removing a\n\t * monitor, changing an output's mode or position, etc. This is where\n\t * the change officially happens and we update geometry, window\n\t * positions, focus, and the stored configuration in wlroots'\n\t * output-manager implementation.\n\t */\n\tstruct wlr_output_configuration_v1 *config =\n\t\twlr_output_configuration_v1_create();\n\tClient *c;\n\tstruct wlr_output_configuration_head_v1 *config_head;\n\tMonitor *m;\n\n\t/* First remove from the layout the disabled monitors */\n\twl_list_for_each(m, &mons, link) {\n\t\tif (m->wlr_output->enabled)\n\t\t\tcontinue;\n\t\tconfig_head = wlr_output_configuration_head_v1_create(config, m->wlr_output);\n\t\tconfig_head->state.enabled = 0;\n\t\t/* Remove this output from the layout to avoid cursor enter inside it */\n\t\twlr_output_layout_remove(output_layout, m->wlr_output);\n\t\tclosemon(m);\n\t\tmemset(&m->m, 0, sizeof(m->m));\n\t\tmemset(&m->w, 0, sizeof(m->w));\n\t}\n\t/* Insert outputs that need to */\n\twl_list_for_each(m, &mons, link)\n\t\tif (m->wlr_output->enabled\n\t\t\t\t&& !wlr_output_layout_get(output_layout, m->wlr_output))\n\t\t\twlr_output_layout_add_auto(output_layout, m->wlr_output);\n\t/* Now that we update the output layout we can get its box */\n\twlr_output_layout_get_box(output_layout, NULL, &sgeom);\n\n\t/* Make sure the clients are hidden when dwl is locked */\n\twlr_scene_node_set_position(&locked_bg->node, sgeom.x, sgeom.y);\n\twlr_scene_rect_set_size(locked_bg, sgeom.width, sgeom.height);\n\n\twl_list_for_each(m, &mons, link) {\n\t\tif (!m->wlr_output->enabled)\n\t\t\tcontinue;\n\t\tconfig_head = wlr_output_configuration_head_v1_create(config, m->wlr_output);\n\n\t\t/* Get the effective monitor geometry to use for surfaces */\n\t\twlr_output_layout_get_box(output_layout, m->wlr_output, &m->m);\n\t\tm->w = m->m;\n\t\twlr_scene_output_set_position(m->scene_output, m->m.x, m->m.y);\n\n\t\twlr_scene_node_set_position(&m->fullscreen_bg->node, m->m.x, m->m.y);\n\t\twlr_scene_rect_set_size(m->fullscreen_bg, m->m.width, m->m.height);\n\n\t\tif (m->lock_surface) {\n\t\t\tstruct wlr_scene_tree *scene_tree = m->lock_surface->surface->data;\n\t\t\twlr_scene_node_set_position(&scene_tree->node, m->m.x, m->m.y);\n\t\t\twlr_session_lock_surface_v1_configure(m->lock_surface, m->m.width,\n\t\t\t\t\tm->m.height);\n\t\t}\n\n\t\t/* Calculate the effective monitor geometry to use for clients */\n\t\tarrangelayers(m);\n\t\t/* Don't move clients to the left output when plugging monitors */\n\t\tarrange(m);\n\t\t/* make sure fullscreen clients have the right size */\n\t\tif ((c = focustop(m)) && c->isfullscreen)\n\t\t\tresize(c, m->m, 0);\n\n\t\tm->gamma_lut_changed = 1;\n\t\tconfig_head->state.enabled = 1;\n\t\tconfig_head->state.mode = m->wlr_output->current_mode;\n\t\tconfig_head->state.x = m->m.x;\n\t\tconfig_head->state.y = m->m.y;\n\t}\n\n\tif (selmon && selmon->wlr_output->enabled) {\n\t\twl_list_for_each(c, &clients, link)\n\t\t\tif (!c->mon && client_surface(c)->mapped)\n\t\t\t\tsetmon(c, selmon, c->tags);\n\t\tfocusclient(focustop(selmon), 1);\n\t\tif (selmon->lock_surface) {\n\t\t\tclient_notify_enter(selmon->lock_surface->surface,\n\t\t\t\t\twlr_seat_get_keyboard(seat));\n\t\t\tclient_activate_surface(selmon->lock_surface->surface, 1);\n\t\t}\n\t}\n\n\t/* FIXME: figure out why the cursor image is at 0,0 after turning all\n\t * the monitors on.\n\t * Move the cursor image where it used to be. It does not generate a\n\t * wl_pointer.motion event for the clients, it's only the image what it's\n\t * at the wrong position after all. */\n\twlr_cursor_move(cursor, NULL, 0, 0);\n\n\twlr_output_manager_v1_set_configuration(output_mgr, config);\n}\n\nvoid\nupdatetitle(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, set_title);\n\tif (c == focustop(c->mon))\n\t\tprintstatus();\n}\n\nvoid\nurgent(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_xdg_activation_v1_request_activate_event *event = data;\n\tClient *c = NULL;\n\ttoplevel_from_wlr_surface(event->surface, &c, NULL);\n\tif (!c || c == focustop(selmon))\n\t\treturn;\n\n\tif (client_surface(c)->mapped)\n\t\tclient_set_border_color(c, urgentcolor);\n\tc->isurgent = 1;\n\tprintstatus();\n}\n\nvoid\nview(const Arg *arg)\n{\n\tif (!selmon || (arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])\n\t\treturn;\n\tselmon->seltags ^= 1; /* toggle sel tagset */\n\tif (arg->ui & TAGMASK)\n\t\tselmon->tagset[selmon->seltags] = arg->ui & TAGMASK;\n\tfocusclient(focustop(selmon), 1);\n\tarrange(selmon);\n\tprintstatus();\n}\n\nvoid\nvirtualkeyboard(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_virtual_keyboard_v1 *keyboard = data;\n\tcreatekeyboard(&keyboard->keyboard);\n}\n\nMonitor *\nxytomon(double x, double y)\n{\n\tstruct wlr_output *o = wlr_output_layout_output_at(output_layout, x, y);\n\treturn o ? o->data : NULL;\n}\n\nvoid\nxytonode(double x, double y, struct wlr_surface **psurface,\n\t\tClient **pc, LayerSurface **pl, double *nx, double *ny)\n{\n\tstruct wlr_scene_node *node, *pnode;\n\tstruct wlr_surface *surface = NULL;\n\tClient *c = NULL;\n\tLayerSurface *l = NULL;\n\tint layer;\n\n\tfor (layer = NUM_LAYERS - 1; !surface && layer >= 0; layer--) {\n\t\tif (!(node = wlr_scene_node_at(&layers[layer]->node, x, y, nx, ny)))\n\t\t\tcontinue;\n\n\t\tif (node->type == WLR_SCENE_NODE_BUFFER)\n\t\t\tsurface = wlr_scene_surface_try_from_buffer(\n\t\t\t\t\twlr_scene_buffer_from_node(node))->surface;\n\t\t/* Walk the tree to find a node that knows the client */\n\t\tfor (pnode = node; pnode && !c; pnode = &pnode->parent->node)\n\t\t\tc = pnode->data;\n\t\tif (c && c->type == LayerShell) {\n\t\t\tc = NULL;\n\t\t\tl = pnode->data;\n\t\t}\n\t}\n\n\tif (psurface) *psurface = surface;\n\tif (pc) *pc = c;\n\tif (pl) *pl = l;\n}\n\nvoid\nzoom(const Arg *arg)\n{\n\tClient *c, *sel = focustop(selmon);\n\n\tif (!sel || !selmon || !selmon->lt[selmon->sellt]->arrange || sel->isfloating)\n\t\treturn;\n\n\t/* Search for the first tiled window that is not sel, marking sel as\n\t * NULL if we pass it along the way */\n\twl_list_for_each(c, &clients, link)\n\t\tif (VISIBLEON(c, selmon) && !c->isfloating) {\n\t\t\tif (c != sel)\n\t\t\t\tbreak;\n\t\t\tsel = NULL;\n\t\t}\n\n\t/* Return if no other tiled window was found */\n\tif (&c->link == &clients)\n\t\treturn;\n\n\t/* If we passed sel, move c to the front; otherwise, move sel to the\n\t * front */\n\tif (!sel)\n\t\tsel = c;\n\twl_list_remove(&sel->link);\n\twl_list_insert(&clients, &sel->link);\n\n\tfocusclient(sel, 1);\n\tarrange(selmon);\n}\n\n#ifdef XWAYLAND\nvoid\nactivatex11(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, activate);\n\n\t/* Only \"managed\" windows can be activated */\n\tif (c->type == X11Managed)\n\t\twlr_xwayland_surface_activate(c->surface.xwayland, 1);\n}\n\nvoid\nassociatex11(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, associate);\n\n\tLISTEN(&client_surface(c)->events.map, &c->map, mapnotify);\n\tLISTEN(&client_surface(c)->events.unmap, &c->unmap, unmapnotify);\n}\n\nvoid\nconfigurex11(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, configure);\n\tstruct wlr_xwayland_surface_configure_event *event = data;\n\tif (!c->mon)\n\t\treturn;\n\tif (c->isfloating || c->type == X11Unmanaged)\n\t\tresize(c, (struct wlr_box){.x = event->x, .y = event->y,\n\t\t\t\t.width = event->width, .height = event->height}, 0);\n\telse\n\t\tarrange(c->mon);\n}\n\nvoid\ncreatenotifyx11(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_xwayland_surface *xsurface = data;\n\tClient *c;\n\n\t/* Allocate a Client for this surface */\n\tc = xsurface->data = ecalloc(1, sizeof(*c));\n\tc->surface.xwayland = xsurface;\n\tc->type = xsurface->override_redirect ? X11Unmanaged : X11Managed;\n\tc->bw = borderpx;\n\n\t/* Listen to the various events it can emit */\n\tLISTEN(&xsurface->events.associate, &c->associate, associatex11);\n\tLISTEN(&xsurface->events.dissociate, &c->dissociate, dissociatex11);\n\tLISTEN(&xsurface->events.request_activate, &c->activate, activatex11);\n\tLISTEN(&xsurface->events.request_configure, &c->configure, configurex11);\n\tLISTEN(&xsurface->events.set_hints, &c->set_hints, sethints);\n\tLISTEN(&xsurface->events.set_title, &c->set_title, updatetitle);\n\tLISTEN(&xsurface->events.destroy, &c->destroy, destroynotify);\n\tLISTEN(&xsurface->events.request_fullscreen, &c->fullscreen, fullscreennotify);\n}\n\nvoid\ndissociatex11(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, dissociate);\n\twl_list_remove(&c->map.link);\n\twl_list_remove(&c->unmap.link);\n}\n\nxcb_atom_t\ngetatom(xcb_connection_t *xc, const char *name)\n{\n\txcb_atom_t atom = 0;\n\txcb_intern_atom_reply_t *reply;\n\txcb_intern_atom_cookie_t cookie = xcb_intern_atom(xc, 0, strlen(name), name);\n\tif ((reply = xcb_intern_atom_reply(xc, cookie, NULL)))\n\t\tatom = reply->atom;\n\tfree(reply);\n\n\treturn atom;\n}\n\nvoid\nsethints(struct wl_listener *listener, void *data)\n{\n\tClient *c = wl_container_of(listener, c, set_hints);\n\tstruct wlr_surface *surface = client_surface(c);\n\tif (c == focustop(selmon))\n\t\treturn;\n\n\tc->isurgent = xcb_icccm_wm_hints_get_urgency(c->surface.xwayland->hints);\n\n\tif (c->isurgent && surface && surface->mapped)\n\t\tclient_set_border_color(c, urgentcolor);\n\n\tprintstatus();\n}\n\nvoid\nxwaylandready(struct wl_listener *listener, void *data)\n{\n\tstruct wlr_xcursor *xcursor;\n\txcb_connection_t *xc = xcb_connect(xwayland->display_name, NULL);\n\tint err = xcb_connection_has_error(xc);\n\tif (err) {\n\t\tfprintf(stderr, \"xcb_connect to X server failed with code %d\\n. Continuing with degraded functionality.\\n\", err);\n\t\treturn;\n\t}\n\n\t/* Collect atoms we are interested in. If getatom returns 0, we will\n\t * not detect that window type. */\n\tnetatom[NetWMWindowTypeDialog] = getatom(xc, \"_NET_WM_WINDOW_TYPE_DIALOG\");\n\tnetatom[NetWMWindowTypeSplash] = getatom(xc, \"_NET_WM_WINDOW_TYPE_SPLASH\");\n\tnetatom[NetWMWindowTypeToolbar] = getatom(xc, \"_NET_WM_WINDOW_TYPE_TOOLBAR\");\n\tnetatom[NetWMWindowTypeUtility] = getatom(xc, \"_NET_WM_WINDOW_TYPE_UTILITY\");\n\n\t/* assign the one and only seat */\n\twlr_xwayland_set_seat(xwayland, seat);\n\n\t/* Set the default XWayland cursor to match the rest of dwl. */\n\tif ((xcursor = wlr_xcursor_manager_get_xcursor(cursor_mgr, \"default\", 1)))\n\t\twlr_xwayland_set_cursor(xwayland,\n\t\t\t\txcursor->images[0]->buffer, xcursor->images[0]->width * 4,\n\t\t\t\txcursor->images[0]->width, xcursor->images[0]->height,\n\t\t\t\txcursor->images[0]->hotspot_x, xcursor->images[0]->hotspot_y);\n\n\txcb_disconnect(xc);\n}\n#endif\n\nint\nmain(int argc, char *argv[])\n{\n\tchar *startup_cmd = NULL;\n\tint c;\n\n\twhile ((c = getopt(argc, argv, \"s:hdv\")) != -1) {\n\t\tif (c == 's')\n\t\t\tstartup_cmd = optarg;\n\t\telse if (c == 'd')\n\t\t\tlog_level = WLR_DEBUG;\n\t\telse if (c == 'v')\n\t\t\tdie(\"dwl \" VERSION);\n\t\telse\n\t\t\tgoto usage;\n\t}\n\tif (optind < argc)\n\t\tgoto usage;\n\n\t/* Wayland requires XDG_RUNTIME_DIR for creating its communications socket */\n\tif (!getenv(\"XDG_RUNTIME_DIR\"))\n\t\tdie(\"XDG_RUNTIME_DIR must be set\");\n\tsetup();\n\trun(startup_cmd);\n\tcleanup();\n\treturn EXIT_SUCCESS;\n\nusage:\n\tdie(\"Usage: %s [-v] [-d] [-s startup command]\", argv[0]);\n}\n"
        },
        {
          "name": "dwl.desktop",
          "type": "blob",
          "size": 0.0732421875,
          "content": "[Desktop Entry]\nName=dwl\nComment=dwm for Wayland\nExec=dwl\nType=Application\n"
        },
        {
          "name": "protocols",
          "type": "tree",
          "content": null
        },
        {
          "name": "util.c",
          "type": "blob",
          "size": 0.5087890625,
          "content": "/* See LICENSE.dwm file for copyright and license details. */\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"util.h\"\n\nvoid\ndie(const char *fmt, ...) {\n\tva_list ap;\n\n\tva_start(ap, fmt);\n\tvfprintf(stderr, fmt, ap);\n\tva_end(ap);\n\n\tif (fmt[0] && fmt[strlen(fmt)-1] == ':') {\n\t\tfputc(' ', stderr);\n\t\tperror(NULL);\n\t} else {\n\t\tfputc('\\n', stderr);\n\t}\n\n\texit(1);\n}\n\nvoid *\necalloc(size_t nmemb, size_t size)\n{\n\tvoid *p;\n\n\tif (!(p = calloc(nmemb, size)))\n\t\tdie(\"calloc:\");\n\treturn p;\n}\n"
        },
        {
          "name": "util.h",
          "type": "blob",
          "size": 0.1337890625,
          "content": "/* See LICENSE.dwm file for copyright and license details. */\n\nvoid die(const char *fmt, ...);\nvoid *ecalloc(size_t nmemb, size_t size);\n"
        }
      ]
    }
  ]
}