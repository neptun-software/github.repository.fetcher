{
  "metadata": {
    "timestamp": 1736710006126,
    "page": 595,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "taviso/ctypes.sh",
      "stars": 2112,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.216796875,
          "content": "bash-4.3.30\nbash-4.3.30.tar.gz\n*.log\n*.status\n*.sw?\n*.udb\n*.o\n*.so\n*~\nautom4te.cache/\nMakefile\nsrc/.deps/\nstamp-h1\nsrc/.libs/\nconfig.h\n*.la\n*.lo\nctypes.sh\nMakefile.in\nconfig.h.in\nsrc/Makefile.in\naclocal.m4\nlibtool\nINSTALL\n"
        },
        {
          "name": ".hgignore",
          "type": "blob",
          "size": 0.1640625,
          "content": "syntax: glob\nbash-4.3.30\nbash-4.3.30.tar.gz\n*.log\n*.status\n*.sw?\n*.udb\n*.o\n*.so\n*~\nautom4te.cache/\nMakefile\nsrc/.deps/\nstamp-h1\nsrc/.libs/\nconfig.h\n*.la\n*.lo\nctypes.sh\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.078125,
          "content": "Tavis Ormandy @taviso   Original Author\nConrad Meyer @cemeyer   FreeBSD Support\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Tavis Ormandy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.2353515625,
          "content": "2023-08-07 Tavis Ormandy <taviso@gmail.com>\n\tUpdate to support new dynamic arrays in bash 5.2\n\n2020-07-08 Tavis Ormandy <taviso@gmail.com>\n\tUpdate libdwarves to handle more modern dwarf data.\n\n* various\nInitial automake and libtool support\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.1181640625,
          "content": "SUBDIRS = src\nbin_SCRIPTS = ctypes.sh\nEXTRA_DIST = include test lib\n\nCLEANFILES = $(bin_SCRIPTS)\nACLOCAL_AMFLAGS = -I m4\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0.0400390625,
          "content": "See the ctypes.sh wiki for release news.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.0087890625,
          "content": "README.md"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.4345703125,
          "content": "# ctypes.sh\n\nThis is `ctypes.sh`, a foreign function interface for bash.\n\n`ctypes.sh` is a bash plugin that provides a foreign function interface directly\nin your shell. In other words, it allows you to call routines in shared\nlibraries from within bash.\n\nA (very) simple example will help illustrate:\n\n```bash\n$ dlcall puts \"hello, world\"\nhello, world\n\n# A more complex example, use libm to calculate sin(PI/2)\n$ dlopen libm.so.6\n0x172ebf0\n$ dlcall -r double sin double:1.57079632679489661923\ndouble:1.000000\n```\n\n`ctypes.sh` can extend bash scripts to accomplish tasks that were previously\nimpossible, or would require external helpers to be written.\n\n`ctypes.sh` makes it possible to use\n[GTK](https://github.com/taviso/ctypes.sh/blob/master/test/gtk.sh) natively in\nyour shell scripts, or write a [high-performance http daemon](https://github.com/cemeyer/httpd.sh).\n\nSee more examples [here](https://github.com/taviso/ctypes.sh/tree/master/test)\n\n## prerequisites\n\n`ctypes.sh` is dependent on the following libraries and programs:\n\n* libffi\n* bash\n* libelf (optional)\n* elfutils (optional)\n* libdwarf / libdw (optional)\n\n\n### Fedora\n\nFor recent Fedora, this should be enough:\n\n`sudo yum install elfutils-devel dnf-utils`\n\nNow you can use the `debuginfo-install` command to install debugging symbols for automatic structure support.\n\n### Ubuntu\n\nFor recent Ubuntu, this should be enough:\n\n`sudo apt install autoconf libltdl-dev libffi-dev libelf-dev elfutils libdw-dev pkg-config`\n\nIf you want to use automatic struct support (recommended), you should also make\nyou have [ddebs available](https://wiki.ubuntu.com/Debug%20Symbol%20Packages).\n\n## install\n\n`ctypes.sh` can be installed from source like this:\n\n```bash\n$ git clone https://github.com/taviso/ctypes.sh.git\n$ cd ctypes.sh\n$ ./autogen.sh\n$ ./configure\n$ make\n$ [sudo] make install\n```\n\nBy default `ctypes.sh` is installed into `/usr/local/bin` and\n`/usr/local/lib`. You can overload the prefix path by defining the\n`PREFIX` environment variable before installing.\n\n```bash\n$ PREFIX=$HOME make install\n```\n\n## example\n\n```bash\nsource ctypes.sh\nputs () {\n  dlcall puts \"$@\"\n  return $?\n}\n\nputs \"hello, world\"\n```\n\n## Here is what people have been saying about ctypes.sh:\n\n* \"that's disgusting\"\n* \"this has got to stop\"\n* \"you've gone too far with this\"\n* \"is this a joke?\"\n* \"I never knew the c could stand for Cthulhu.\"\n\nYou can read more about ctypes.sh and see it in action on the [Wiki](https://github.com/taviso/ctypes.sh/wiki)\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.2041015625,
          "content": "* dlclose should unset array entries\n    * probably need to use hash_walk\n* finish documentation\n    * Explain how do you get the address of a string/array/whatever\n    * declare some common structs for users\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.025390625,
          "content": "#!/bin/sh\nautoreconf -vif\n"
        },
        {
          "name": "build-aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.04296875,
          "content": "#! /bin/sh\necho please run autogen.sh first\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 4.8291015625,
          "content": "AC_PREREQ([2.59])\nAC_INIT([ctypes.sh], [1.2], [ctypesdotsh@googlegroups.com])\nAC_CONFIG_SRCDIR([src/callback.c])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_LIBOBJ_DIR([lib])\nAM_INIT_AUTOMAKE([subdir-objects])\nLT_INIT([disable-static])\nAC_SEARCH_LIBS(dlopen, [dl c])\nAC_CHECK_LIB([elf], [gelf_getehdr], [], [\n    disable_struct_support=yes;\n    AC_MSG_WARN([libelf is not available, struct support will not be available])\n])\nAC_CHECK_LIB([dw], [dwfl_version], [], [\n    disable_struct_support=yes;\n    AC_MSG_WARN([elfutils is not available, struct support will not be available])\n])\nAC_CONFIG_HEADERS([config.h])\nPKG_CHECK_MODULES([FFI], [libffi >= 3])\nPKG_CHECK_MODULES([ZLIB], [zlib])\nAC_CHECK_HEADERS([dlfcn.h fcntl.h inttypes.h limits.h memory.h stdint.h stdlib.h string.h strings.h sys/param.h sys/time.h unistd.h], [], [\n    AC_MSG_ERROR([a critical header could not be found])\n])\nAC_CHECK_HEADERS([dwarf.h libelf.h link.h elfutils/libdwfl.h], [], [\n    disable_struct_support=yes;\n    AC_MSG_WARN([a header needed for struct support was not found])\n])\nAC_CHECK_FUNCS([strchr strdup strrchr strtol strtoul malloc realloc strtod], [], [\n    AC_MSG_ERROR([a critical standard function could not be found])\n])\nAC_CHECK_FUNCS([gelf_getehdr dwfl_version dl_iterate_phdr], [], [\n    disable_struct_support=yes;\n    AC_MSG_WARN([a function needed for struct support was not found])\n])\nAC_CHECK_HEADER_STDBOOL\nAC_PROG_CC\nAC_FUNC_ALLOCA\nAC_FUNC_OBSTACK\n\n# Debian split libtool into multiple packages, so LT_INIT is not enough to\n# be certain some LT_* macro is available.\nm4_ifndef([LT_SYS_DLSEARCH_PATH], [m4_fatal([You may need to install libltdl-dev])])\nm4_ifndef([LT_SYS_MODULE_EXT], [m4_fatal([You may need to install libltdl-dev])])\n\nLT_SYS_DLSEARCH_PATH\nLT_SYS_MODULE_EXT\n\nSAVED_CPPFLAGS=\"${CPPFLAGS}\"\nSAVED_LDFLAGS=\"${LDFLAGS}\"\n\n# temporarily configure my build flags\nCPPFLAGS=\"${CPPFLAGS} -I${srcdir}/include\"\n\n# locate the bash binary so we can test if it works.\nAC_PATH_PROG([BASH_ABS_PATH], [bash])\n\n# Verify I can see bash structure definitions\nAC_CHECK_MEMBER([struct builtin.name],\n                [],\n                [AC_MSG_FAILURE([builtin structure not available])],\n                [[#include \"builtins.h\"]])\n\nAM_CONDITIONAL([ENABLE_STRUCTS], [test \"x$disable_struct_support\" != \"xyes\"])\n\n# Does enable -f work with a very simple plugin?\nLDFLAGS=\"${LDFLAGS} -shared -fPIC\"\n\nAC_MSG_CHECKING([whether a minimal bash plugin compiles])\nAC_LINK_IFELSE([AC_LANG_SOURCE([[\n    #include <stddef.h>\n    #include <unistd.h>\n\n    #include \"builtins.h\"\n\n    int conftest_function(WORD_LIST *list)\n    {\n        exit(EXIT_SUCCESS);\n    }\n\n    struct builtin conftest_struct = {\n        .name       = \"conftest\",\n        .function   = conftest_function,\n        .flags      = BUILTIN_ENABLED,\n        .long_doc   = NULL,\n        .short_doc  = NULL,\n        .handle     = NULL,\n    };\n]])], [\n    AC_MSG_RESULT([yes])\n    AC_MSG_CHECKING([loading simple plugin])\n    if bash -c \"enable -f ./conftest${ac_exeext} conftest && conftest || exit 1\"; then\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n        AC_MSG_FAILURE([bash plugins do not appear to work], 1)\n    fi\n], [\n    AC_MSG_RESULT([no])\n    AC_MSG_FAILURE([unable to build a test extension], 1)\n])\n\n# If this test fails, the distribution has built bash incorrectly and may need\n# to append -Wl,-export-dynamic to the linker command line. Without exported\n# symbols, plugins cannot interact with bash.\nAC_MSG_CHECKING([whether bash symbols are exported])\nAC_LINK_IFELSE([AC_LANG_SOURCE([[\n    #include <stddef.h>\n    #include <unistd.h>\n\n    #include \"builtins.h\"\n\n    int conftest_function(WORD_LIST *list)\n    {\n        exit(num_shell_builtins\n                ? EXIT_SUCCESS\n                : EXIT_FAILURE);\n    }\n\n    struct builtin conftest_struct = {\n        .name       = \"conftest\",\n        .function   = conftest_function,\n        .flags      = BUILTIN_ENABLED,\n        .long_doc   = NULL,\n        .short_doc  = NULL,\n        .handle     = NULL,\n    };\n]])], [\n    AC_MSG_RESULT([yes])\n    AC_MSG_CHECKING([loading plugin with external references])\n    if bash -c \"enable -f ./conftest${ac_exeext} conftest && conftest || exit 1\"; then\n        AC_MSG_RESULT([yes])\n    else\n        AC_MSG_RESULT([no])\n        AC_MSG_FAILURE([report this bug to your distribution; bash may be built incorrectly], 1)\n    fi\n], [\n    AC_MSG_RESULT([no])\n    AC_MSG_FAILURE([unable to build a test extension], 1)\n])\n\nLDFLAGS=\"${SAVED_LDFLAGS}\"\nCPPFLAGS=\"${SAVED_CPPFLAGS}\"\n\nAS_IF([test \"x$disable_struct_support\" == \"xyes\"], [\n      AS_BOX([!!! AUTOMATIC STRUCT SUPPORT IS DISABLED DUE TO MISSING DEPENDENCIES !!!], [*])\n      AC_SUBST([struct], [])\n      AC_SUBST([sizeof], [])\n], [\n      AC_SUBST([struct], [struct])\n      AC_SUBST([sizeof], [sizeof])\n])\n\nAC_SUBST([soext], [$shrext_cmds])\nAC_CONFIG_FILES([Makefile src/Makefile ctypes.sh])\nAC_OUTPUT\n"
        },
        {
          "name": "ctypes.sh.in",
          "type": "blob",
          "size": 0.7578125,
          "content": "function initialize_ctypes_module()\n{\n    local prefix=@prefix@\n    local exec_prefix=@exec_prefix@\n    local -a builtins=(\n        callback\n        dlcall\n        dlclose\n        dlopen\n        dlsym\n        pack\n        unpack\n        @struct@\n        @sizeof@\n    )\n\n    enable -f ctypes@soext@ ${builtins[@]} &> /dev/null || {\n        # is it possible user doesn't have dir in library search path?\n        enable -f @libdir@/ctypes@soext@ ${builtins[@]} || {\n            echo \"can't find the ctypes@soext@ library, run make install?\" 1>&2\n        }\n    }\n}\n\ninitialize_ctypes_module && unset initialize_ctypes_module\n\n# Declare some convenient constants\ndeclare -r NULL=pointer:0\ndeclare -r STDIN_FILENO=int:0\ndeclare -r STDOUT_FILENO=int:1\ndeclare -r STDERR_FILENO=int:2\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}