{
  "metadata": {
    "timestamp": 1736710186695,
    "page": 880,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Cisco-Talos/pyrebox",
      "stars": 1658,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.748046875,
          "content": "*.d\n*.o\n*.pyc\n/.gdbinit\npyrebox/config.h\npyrebox.conf\n*.so\ndocs/build\n/pyrebox_venv\n/win_agent_32.exe.conf\n/win_agent_64.exe.conf\nguest/win/*.exe\nguest/linux/linux_agent_32\nguest/linux/linux_agent_64\nguest/linux/test_64\nguest/linux/test_32\n*.a\n\n\n\n\n\n\n\n/qemu/.doctrees\n/qemu/config-devices.*\n/qemu/config-all-devices.*\n/qemu/config-all-disas.*\n/qemu/config-host.*\n/qemu/config-target.*\n/qemu/config.status\n/qemu/config-temp\n/qemu/elf2dmp\n/qemu/trace-events-all\n/qemu/trace/generated-events.h\n/qemu/trace/generated-events.c\n/qemu/trace/generated-helpers-wrappers.h\n/qemu/trace/generated-helpers.h\n/qemu/trace/generated-helpers.c\n/qemu/trace/generated-tcg-tracers.h\n/qemu/ui/shader/texture-blit-frag.h\n/qemu/ui/shader/texture-blit-vert.h\n/qemu/ui/shader/texture-blit-flip-vert.h\n/qemu/ui/input-keymap-*.c\n/qemu/*-timestamp\n/qemu/*-softmmu\n/qemu/*-darwin-user\n/qemu/*-linux-user\n/qemu/*-bsd-user\n/qemu/ivshmem-client\n/qemu/ivshmem-server\n/qemu/libdis*\n/qemu/libuser\n/qemu/linux-headers/asm\n/qemu/qga/qapi-generated\n/qemu/qapi-gen-timestamp\n/qemu/qapi/qapi-builtin-types.[ch]\n/qemu/qapi/qapi-builtin-visit.[ch]\n/qemu/qapi/qapi-commands-*.[ch]\n/qemu/qapi/qapi-commands.[ch]\n/qemu/qapi/qapi-emit-events.[ch]\n/qemu/qapi/qapi-events-*.[ch]\n/qemu/qapi/qapi-events.[ch]\n/qemu/qapi/qapi-introspect.[ch]\n/qemu/qapi/qapi-types-*.[ch]\n/qemu/qapi/qapi-types.[ch]\n/qemu/qapi/qapi-visit-*.[ch]\n/qemu/qapi/qapi-visit.[ch]\n/qemu/qapi/qapi-doc.texi\n/qemu/qemu-doc.html\n/qemu/qemu-doc.info\n/qemu/qemu-doc.txt\n/qemu/qemu-edid\n/qemu/qemu-img\n/qemu/qemu-nbd\n/qemu/qemu-options.def\n/qemu/qemu-options.texi\n/qemu/qemu-img-cmds.texi\n/qemu/qemu-img-cmds.h\n/qemu/qemu-io\n/qemu/qemu-ga\n/qemu/qemu-bridge-helper\n/qemu/qemu-keymap\n/qemu/qemu-monitor.texi\n/qemu/qemu-monitor-info.texi\n/qemu/qemu-version.h\n/qemu/qemu-version.h.tmp\n/qemu/module_block.h\n/qemu/scsi/qemu-pr-helper\n/qemu/vhost-user-scsi\n/qemu/vhost-user-blk\n/qemu/fsdev/virtfs-proxy-helper\n*.tmp\n*.[1-9]\n*.a\n*.aux\n*.cp\n*.exe\n*.msi\n*.dll\n*.so\n*.mo\n*.fn\n*.ky\n*.log\n*.pdf\n*.pod\n*.cps\n*.fns\n*.kys\n*.pg\n*.pyc\n*.toc\n*.tp\n*.vr\n*.d\n!qemu/scripts/qemu-guest-agent/fsfreeze-hook.d\n*.o\n.sdk\n*.gcda\n*.gcno\n*.gcov\n/qemu/pc-bios/bios-pq/status\n/qemu/pc-bios/edk2-*.fd\n/qemu/pc-bios/vgabios-pq/status\n/qemu/pc-bios/optionrom/linuxboot.asm\n/qemu/pc-bios/optionrom/linuxboot.bin\n/qemu/pc-bios/optionrom/linuxboot.raw\n/qemu/pc-bios/optionrom/linuxboot.img\n/qemu/pc-bios/optionrom/linuxboot_dma.asm\n/qemu/pc-bios/optionrom/linuxboot_dma.bin\n/qemu/pc-bios/optionrom/linuxboot_dma.raw\n/qemu/pc-bios/optionrom/linuxboot_dma.img\n/qemu/pc-bios/optionrom/pvh.asm\n/qemu/pc-bios/optionrom/pvh.bin\n/qemu/pc-bios/optionrom/pvh.raw\n/qemu/pc-bios/optionrom/pvh.img\n/qemu/pc-bios/optionrom/multiboot.asm\n/qemu/pc-bios/optionrom/multiboot.bin\n/qemu/pc-bios/optionrom/multiboot.raw\n/qemu/pc-bios/optionrom/multiboot.img\n/qemu/pc-bios/optionrom/kvmvapic.asm\n/qemu/pc-bios/optionrom/kvmvapic.bin\n/qemu/pc-bios/optionrom/kvmvapic.raw\n/qemu/pc-bios/optionrom/kvmvapic.img\n/qemu/pc-bios/s390-ccw/s390-ccw.elf\n/qemu/pc-bios/s390-ccw/s390-ccw.img\n/qemu/docs/built\n/qemu/docs/interop/qemu-ga-qapi.texi\n/qemu/docs/interop/qemu-ga-ref.html\n/qemu/docs/interop/qemu-ga-ref.info*\n/qemu/docs/interop/qemu-ga-ref.txt\n/qemu/docs/interop/qemu-qmp-qapi.texi\n/qemu/docs/interop/qemu-qmp-ref.html\n/qemu/docs/interop/qemu-qmp-ref.info*\n/qemu/docs/interop/qemu-qmp-ref.txt\n/qemu/docs/version.texi\n*.tps\n.stgit-*\n.git-submodule-status\ncscope.*\ntags\nTAGS\ndocker-src.*\n*~\n*.ast_raw\n*.depend_raw\n/qemu/trace.h\n/qemu/trace.c\n/qemu/trace-ust.h\n/qemu/trace-ust.h\n/qemu/trace-dtrace.h\n/qemu/trace-dtrace.dtrace\n/qemu/trace-root.h\n/qemu/trace-root.c\n/qemu/trace-ust-root.h\n/qemu/trace-ust-root.h\n/qemu/trace-ust-all.h\n/qemu/trace-ust-all.c\n/qemu/trace-dtrace-root.h\n/qemu/trace-dtrace-root.dtrace\n/qemu/trace-ust-all.h\n/qemu/trace-ust-all.c\n/qemu/target/arm/decode-sve.inc.c\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.0283203125,
          "content": "[submodule \"qemu/roms/seabios\"]\n\tpath = qemu/roms/seabios\n\turl = https://git.qemu.org/git/seabios.git/\n[submodule \"qemu/roms/SLOF\"]\n\tpath = qemu/roms/SLOF\n\turl = https://git.qemu.org/git/SLOF.git\n[submodule \"qemu/roms/ipxe\"]\n\tpath = qemu/roms/ipxe\n\turl = https://git.qemu.org/git/ipxe.git\n[submodule \"qemu/roms/openbios\"]\n\tpath = qemu/roms/openbios\n\turl = https://git.qemu.org/git/openbios.git\n[submodule \"qemu/roms/openhackware\"]\n\tpath = qemu/roms/openhackware\n\turl = https://git.qemu.org/git/openhackware.git\n[submodule \"qemu/roms/qemu-palcode\"]\n\tpath = qemu/roms/qemu-palcode\n\turl = https://git.qemu.org/git/qemu-palcode.git\n[submodule \"qemu/roms/sgabios\"]\n\tpath = qemu/roms/sgabios\n\turl = https://git.qemu.org/git/sgabios.git\n[submodule \"qemu/dtc\"]\n\tpath = qemu/dtc\n\turl = https://git.qemu.org/git/dtc.git\n[submodule \"qemu/roms/u-boot\"]\n\tpath = qemu/roms/u-boot\n\turl = https://git.qemu.org/git/u-boot.git\n[submodule \"qemu/roms/skiboot\"]\n\tpath = qemu/roms/skiboot\n\turl = https://git.qemu.org/git/skiboot.git\n[submodule \"qemu/roms/QemuMacDrivers\"]\n\tpath = qemu/roms/QemuMacDrivers\n\turl = https://git.qemu.org/git/QemuMacDrivers.git\n[submodule \"qemu/ui/keycodemapdb\"]\n\tpath = qemu/ui/keycodemapdb\n\turl = https://git.qemu.org/git/keycodemapdb.git\n[submodule \"qemu/capstone\"]\n\tpath = qemu/capstone\n\turl = https://git.qemu.org/git/capstone.git\n[submodule \"qemu/roms/seabios-hppa\"]\n\tpath = qemu/roms/seabios-hppa\n    url = https://git.qemu.org/git/seabios-hppa.git\n[submodule \"qemu/roms/u-boot-sam460ex\"]\n\tpath = qemu/roms/u-boot-sam460ex\n\turl = https://git.qemu.org/git/u-boot-sam460ex.git\n[submodule \"qemu/tests/fp/berkeley-testfloat-3\"]\n\tpath = qemu/tests/fp/berkeley-testfloat-3\n    url = https://git.qemu.org/git/berkeley-testfloat-3.git\n[submodule \"qemu/tests/fp/berkeley-softfloat-3\"]\n\tpath = qemu/tests/fp/berkeley-softfloat-3\n    url = https://git.qemu.org/git/berkeley-softfloat-3.git\n[submodule \"qemu/roms/edk2\"]\n\tpath = qemu/roms/edk2\n    url = https://git.qemu.org/git/edk2.git\n[submodule \"qemu/slirp\"]\n\tpath = qemu/slirp\n\turl = https://git.qemu.org/git/libslirp.git\n"
        },
        {
          "name": ".pyrebox-i386",
          "type": "blob",
          "size": 0.1513671875,
          "content": "#!/usr/bin/env bash\nBASEDIR=$(dirname \"$0\")\nLD_LIBRARY_PATH=$BASEDIR/sleuthkit/tsk/.libs:$LD_LIBRARY_PATH $BASEDIR/qemu/i386-softmmu/qemu-system-i386 \"$@\"\n"
        },
        {
          "name": ".pyrebox-x86_64",
          "type": "blob",
          "size": 0.1552734375,
          "content": "#!/usr/bin/env bash\nBASEDIR=$(dirname \"$0\")\nLD_LIBRARY_PATH=$BASEDIR/sleuthkit/tsk/.libs:$LD_LIBRARY_PATH $BASEDIR/qemu/x86_64-softmmu/qemu-system-x86_64 \"$@\"\n"
        },
        {
          "name": "BUILD.rst",
          "type": "blob",
          "size": 1.509765625,
          "content": "Building PyREBox\n================\n\n- Installing dependencies\n\n  * For Debian based distributions: \n      \n    ``apt-get install build-essential zlib1g-dev pkg-config libglib2.0-dev binutils-dev libboost-all-dev autoconf libtool libssl-dev libpixman-1-dev libpython-dev python-pip virtualenv python-capstone``\n\n  * For RHEL based distributions: \n      \n    ``dnf install make automake gcc gcc-c++ kernel-devel zlib-devel pkgconf-pkg-config glib2-devel binutils-devel boost-devel autoconf libtool openssl-devel pixman-devel python2-devel python2-pip python2-virtualenv capstone-python``\n\n  * Required python packages (see the next paragraph for installation instructions):\n      \n    ``ipython>=5,<6 sphinx sphinx-autobuild prettytable pefile capstone distorm3 pycrypto pytz``\n\n- We strongly recommend to use a virtual env to install your python dependencies. If you have a local installation of volatility, it will intefere with the volatility package used by PyREBox.\n\n  * Create the virtual env:\n  \n    ``virtualenv pyrebox_venv`` \n\n  * Once it has been created, activate it in order to install your python dependencies:\n\n    ``source pyrebox_venv/bin/activate``\n\n  * To install the python dependencies you can use pip: \n      \n    ``pip install -r requirements.txt``\n\n  * Do not forget to activate your virtual env every time you want to start PyREBox!\n\n    ``source pyrebox_venv/bin/activate``\n  \n- Project configuration and building\n\n  ``./build.sh``\n\nInstalling PyREBox\n==================\n\nPyREBox package installation is not yet supported.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.8466796875,
          "content": "# -------------------------------------------------------------------------------\n#\n#   Copyright (C) 2017 Cisco Talos Security Intelligence and Research Group\n#\n#   PyREBox: Python scriptable Reverse Engineering Sandbox\n#   Author: Jonas Zaddach\n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License version 2 as\n#   published by the Free Software Foundation.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program; if not, write to the Free Software\n#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#   MA 02110-1301, USA.\n#\n# -------------------------------------------------------------------------------\n\nFROM ubuntu:16.04\nMAINTAINER Jonas Zaddach\n\nENV PREFIX /home\n\n#Install packages\nRUN apt-get update\nRUN apt-get install -y build-essential zlib1g-dev pkg-config \\\n                       libglib2.0-dev binutils-dev libboost-all-dev \\\n                       autoconf libtool libssl-dev libpixman-1-dev \\\n                       libpython-dev python-pip \\\n                       git curl vim\n\n#upgrade pip\nRUN pip install --upgrade pip\n\n#clone pybox\nRUN git clone https://github.com/Cisco-Talos/pyrebox pyrebox\nWORKDIR pyrebox\nRUN pip install -r requirements.txt\nRUN ./build.sh\nRUN cp /usr/local/lib/python2.7/dist-packages/capstone/lib/libcapstone.so /usr/local/lib\nRUN ldconfig\n\n#OPTIONAL: Copy VM in. Left as an example\n\n#RUN mkdir /images\n#ADD files/template_pybox_vm_winxp.tar.gz /images\n#RUN echo \"./start_i386.sh /images/xpsp3.qcow2\" > ~/.bash_history\n\nEXPOSE 5900\nENTRYPOINT [\"/bin/bash\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.6240234375,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year}  {fullname}\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  {signature of Ty Coon}, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.857421875,
          "content": "# -------------------------------------------------------------------------------\n#\n#   Copyright (C) 2017 Cisco Talos Security Intelligence and Research Group\n#\n#   PyREBox: Python scriptable Reverse Engineering Sandbox\n#   Author: Xabier Ugarte-Pedrero\n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License version 2 as\n#   published by the Free Software Foundation.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program; if not, write to the Free Software\n#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#   MA 02110-1301, USA.\n#\n# -------------------------------------------------------------------------------\n\ninclude qemu/config-host.mak\nDEFINES=-I. -I..\n\nCC=gcc\nCPP=g++\nPYTHON_CFLAGS = -I./pyrebox/ -I/usr/include/python2.7 -I/usr/include/python2.7 -fno-strict-aliasing -DNDEBUG -fwrapv  -fstack-protector --param=ssp-buffer-size=4\nPYTHON_LIBS = -L/usr/lib/python2.7/config -lpthread -ldl -lutil -lm -lpython2.7 -Wl,-O1 -Wl,-Bsymbolic-functions -Xlinker -export-dynamic\nCFLAGS=-Wall -O2 -g -fPIC -MMD -std=c++11 -std=gnu++11 \nCFLAGS+=$(PYTHON_CFLAGS)\nLDFLAGS=-g -shared \nLDFLAGS+=$(PYTHON_LIBS)\n\n#Triggers for i386-softmmu\n\n%-i386-softmmu.o: %.c \n\t@$(CC) $(CFLAGS) $(DEFINES) -I./qemu/i386-softmmu -c -o $@ $< ; \\\n\techo $(CPP) $@ ;\n\n%-i386-softmmu.o: %.cpp\n\t@$(CPP) $(CFLAGS) $(DEFINES) -I./qemu/i386-softmmu -c -o $@ $< ; \\\n\techo $(CPP) $@ ;\n\n%-i386-softmmu.so: %-i386-softmmu.o pyrebox/trigger_helpers-i386-softmmu.o pyrebox/utils-i386-softmmu.o\n\t@$(CPP) -Wno-builtin-macro-redefined  $(CFLAGS) $(DEFINES) -I./qemu/i386-softmmu -shared -o $@ $^ ; \\\n\techo $(CPP) $@\n\n#Triggers for x86-64-softmmu\n\n%-x86_64-softmmu.o: %.c \n\t@$(CC) $(CFLAGS) $(DEFINES) -I./qemu/x86_64-softmmu -c -o $@ $< ; \\\n\techo $(CPP) $@ ;\n\n%-x86_64-softmmu.o: %.cpp\n\t@$(CPP) $(CFLAGS) $(DEFINES) -I./qemu/x86_64-softmmu -c -o $@ $< ; \\\n\techo $(CPP) $@ ;\n\n%-x86_64-softmmu.so: %-x86_64-softmmu.o pyrebox/trigger_helpers-x86_64-softmmu.o pyrebox/utils-x86_64-softmmu.o\n\t@$(CPP) -Wno-builtin-macro-redefined  $(CFLAGS) $(DEFINES) -I./qemu/x86_64-softmmu -shared -o $@ $^ ; \\\n\techo $(CPP) $@\n\nclean-triggers:\n\trm -f triggers/*.so triggers/*.o triggers/*.d exploit_detect/*.so exploit_detect/*.o exploit_detect/*.d\n\ndocumentation: \n\t$(MAKE) -C ./docs/ html \n\n#We place these 2 rules so that we can compile more comfortably from this directory\nall: \n\trm -f pyrebox-i386\n\trm -f pyrebox-x86_64\n\tcp -f .pyrebox-i386 pyrebox-i386\n\tcp -f .pyrebox-x86_64 pyrebox-x86_64\n\t@[ ! -f ./sleuthkit/Makefile ] && ./build.sh --reconfigure || true\n\t@$(MAKE) -C ./qemu $@\n\nclean: clean-triggers clean-sleuthkit\t\n\t@$(MAKE) -C ./qemu $@\n\nclean-sleuthkit:\n\t@[ -f ./sleuthkit/Makefile ] && $(MAKE) -C ./sleuthkit clean || true\n\ntest_scripts:\n\tflake8 ./scripts --count --select=E901,E999,F821,F822,F823 --show-source --statistics\n\tflake8 ./scripts --count --exit-zero --max-complexity=20 --max-line-length=127 --statistics\n\ntest_plugins:\n\tflake8 ./plugins --count --select=E901,E999,F821,F822,F823 --show-source --statistics\n\tflake8 ./plugins --count --exit-zero --max-complexity=20 --max-line-length=127 --statistics\n\ntest_pyrebox_test:\n\tflake8 ./pyrebox_test --count --select=E901,E999,F821,F822,F823 --show-source --statistics\n\tflake8 ./pyrebox_test --count --exit-zero --max-complexity=20 --max-line-length=127 --statistics\n\ntest_pyrebox:\n\tflake8 ./pyrebox/*.py --count --select=E901,E999,F821,F822,F823 --show-source --statistics\n\tflake8 ./pyrebox/*.py --count --exit-zero --max-complexity=20 --max-line-length=127 --statistics\n\ntest: \n\t@$(MAKE) test_scripts test_pyrebox_test test_pyrebox test_plugins\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 11.380859375,
          "content": "================\nARCHIVED PROJECT\n================\n\nTHIS PROJECT HAS BEEN ARCHIVED AND ITS ISSUE QUEUE IS LOCKED. THE PROJECT WILL BE KEPT PUBLIC ONLY FOR REFERENCE PURPORSES.\n\n\n.. image:: docs/media/pyrebox_logo_light_bg.png \n\n.. _QEMU: http://qemu.org/\n.. _DECAF: https://github.com/sycurelab/DECAF \n.. _S2E: https://github.com/dslab-epfl/s2e\n.. _AVATAR: https://github.com/avatartwo \n.. _PANDA: https://github.com/panda-re/panda\n.. _Volatility: http://www.volatilityfoundation.org/ \n.. _BUILD: BUILD.rst \n.. _here: https://github.com/Cisco-Talos/pyrebox/issues\n.. _slides: https://github.com/Cisco-Talos/pyrebox/tree/master/docs/pyrebox_hitb_ams.pdf\n.. _available: https://github.com/Cisco-Talos/pyrebox/tree/master/docs/pyrebox_euskalhack.pdf\n.. _scripts: https://github.com/Cisco-Talos/pyrebox/tree/master/scripts\n.. _readthedocs.io: https://pyrebox.readthedocs.io/en/latest/\n.. _questions: https://github.com/Cisco-Talos/pyrebox/issues?utf8=%E2%9C%93&q=is%3Aissue%20label%3Aquestion%20\n.. _presentation: https://www.youtube.com/watch?v=F2voG87obzM\n.. _Contest: https://volatility-labs.blogspot.com/2017/11/results-from-5th-annual-2017-volatility.html \n\nPyREBox is a Python scriptable Reverse Engineering sandbox. It is based on QEMU, and its goal is \nto aid reverse engineering by providing dynamic analysis and debugging capabilities from a \ndifferent perspective. PyREBox allows to inspect a running QEMU VM, modify its memory or \nregisters, and to instrument its execution, by creating simple scripts in python to automate \nany kind of analysis. QEMU (when working as a whole-system-emulator) emulates a complete \nsystem (CPU, memory, devices...). By using VMI techniques, it does not require to perform any \nmodification into the guest operating system, as it transparently retrieves information from \nits memory at run-time.\n\n\nSeveral academic projects such as DECAF_, PANDA_, S2E_, or AVATAR_, have previously leveraged QEMU \nbased instrumentation to overcome reverse engineering tasks. These projects allow to write plugins \nin C/C++, and implement several advanced features such as dynamic taint analysis, symbolic execution, \nor even record and replay of execution traces. With PyREBox, we aim to apply this technology focusing \non keeping the design simple, and on the usability of the system for threat analysts.\n\nPyREBox won the Volatility Plugin Contest_ in 2017!\n\nThis tool was presented at HITB Amsterdam 2018. You can see the slides_, or watch the presentation_. It\nwas also presented at the third edition of EuskalHack Security Congress (slides available_).\n\nWhat's new\n==========\n\nRemember to pull the latest version of PyREBox in order to enjoy its latest features. PyREBox is under\nactive development and new cool features are yet to come! The master branch should always contain an stable\nversion, while the dev branches contain the latest, work-in progress features. The following announcement\nlist refers to the master branch, and the date when the development changes were merged into master.\n\n- [Dec 5,  2019] **Beta version of PyREBox3, ready on the python3migration branch**. The tool has been ported to Python3 and Volatility3. Plugins have not been ported yet.\n- [Jun 21, 2019] **Upgraded QEMU to version 4.0.0, with MTTCG (multi-threaded TCG) support.** Special thanks to @richsurgenor for his valuable contributions to this upgrade.\n- [Jun 17, 2019] Merge of dev branch (Malware monitor 2).\n- [Jun 17, 2019] Mouse movement automation.\n- [Jun 17, 2019] Upgraded volatility.\n- [Oct 17, 2018] Added API function to get system time from windows guests.\n- [Oct 17, 2018] Added support for symbols in BP (breakpoint) class.\n- [Oct 17, 2018] Added symbol cache (host file). See example configuration files (pyrebox.conf.WinXPSP3x86).\n- [Oct 17, 2018] Changed symbol fetching to obtain DLL files from disk.\n- [Oct 10, 2018] Added experimental support to fetch non-mapped memory pages.\n- [0ct 10, 2018] Added The Sleuth Kit integration\n- [Aug 02, 2018] Added autorun scripts.\n- [Jul 26, 2018] Uploaded slides of EuskalHack 2018 presentation.\n- [Jul 02, 2018] Fixes to provide CentOS 7 support. \n- [Jun 25, 2018] Added scripts presented at EuskalHack 2018.\n- [May 31, 2018] Upgraded to Qemu v2.12.0.\n- [May 29, 2018] Added the possibility to call trigger functions (in C/C++) from python scripts.\n- [May 29, 2018] **Changed the callback parameter format.** See documentation. Default is still the old-style.\n- [Apr 28, 2018] Created a development branch for new and potentially unstable features in PyREBox.\n- [Apr 13, 2018] Presented PyREBox at HITB Amsterdam (CommSec track).\n- [Apr 13, 2018] Added malware monitoring scripts (mw_mon).\n- [Mar 08, 2018] **Triggers are now called for every process in the system (not only monitored processes). See documentation**\n- [Mar 08, 2018] **Changed memory read/write callback parameters. See documentation and examples.** \n- [Mar 08, 2018] Added physical memory address read/write breakpoints.\n- [Mar 08, 2018] Added module load and remove callbacks.\n- [Nov 02, 2017] Added guest agent for linux 32 and 64 bits.\n- [Oct 23, 2017] Added guest agent for Windows 32 and 64 bits.\n- [Oct 11, 2017] Added linux module symbol parsing.\n- [Sep 22, 2017] Added support for module reloading.\n- [Sep 20, 2017] Added custom function callback to BP class.\n- [Sep 20, 2017] Upgraded to Qemu v2.10.0.\n- [Aug 31, 2017] Partial support for linux guests.\n\nInstall\n=======\n\nA build script is provided. For specific details about dependencies, please see BUILD_. We also provide a Dockerfile.\n\nDocumentation\n=============\n\nThe documentation of this project is hosted at readthedocs.io_.\n\nBugs, questions and support\n===========================\n\nIf you think you've found a bug, please report it here_.\n\nBefore creating a new issue, please go through the questions_ opened by other users before.\n\nThis program is provided \"AS IS\", and no support is guaranteed. That said, in order to help\nus solve your issues, please include as much information as possible in order to reproduce the bug:\n\n- Operating system used to compile and run PyREBox.\n- The specific operating system version and emulation target you are using.\n- Shell command / script / task you were trying to run.\n- Any information about the error such as error messages, Python (or IPython) stack trace, or QEMU stack trace.\n- Any other relevant information\n\nRoadmap\n=======\n\n- VM image configuration and management console.\n- Support for ARM, MIPS, and other architectures.\n- Finish support for GNU/Linux guest systems (see issues).\n\n\nStarting a VM\n=============\n\nPyREBox is based on QEMU, so in order to start a VM withing PyREBox, you need to run it exactly as you\nwere booting up a QEMU VM. A couple of example scripts are provided: ``start_i386.sh``, ``start_x86_64.sh``,\nyou can use them as an example.\n\nThe only QEMU monitor option supported currently is *stdio* (``-monitor stdio``).\n\n\nGoals of this project\n=====================\n\n- Provide a whole system emulation platform with a simple interface for inspecting the emulated guest system.\n\n  * Fine grained instrumentation of system events.\n  * Integrated Virtual Machine Introspection (VMI), based on volatility. No agent or driver needs to be installed into the guest.\n  * An IPython based shell interface.\n  * A Python based scripting engine, that allows to integrate into the scripts any of the security tools based on this language (one of the biggest ecosystems).\n- Have a clean design, de-coupled from QEMU. Many projects that are built over QEMU do not evolve when QEMU gets upgraded, missing new features and optimizations, as well as security updates. In order to achieve this, PyREBox is implemented as an independent module that can be compiled together with QEMU requiring a minimal set of modifications. \n- Support for different architectures. Currently, PyREBox only supports Windows for x86 and x86-64 bit architectures, but its design allows to support other architectures such as ARM, MIPS, or PowerPC, and other operating systems as well.\n\n\nIPython shell\n=============\n\nStarting a PyREBox shell is as easy as typing the ``sh`` command on QEMU’s monitor. It will immediately start an IPython\nshell. This shell records the command history as well as the defined variables. For instance, you can save a\nvalue and recover it later at a different point of the execution, when you start the shell again. PyREBox takes\nadvantage of all the available features in IPython such as auto-completion, command history, multi-line editing, and\nautomated command help generation.\n\nPyREBox will allow you to debug the system (or a process) in a fairly stealthy way. Unlike traditional debuggers which stay\nin the system being debugged (even modifying the memory of the debugged process to insert breakpoints), PyREBox stays\ncompletely outside the inspected system, and it does not require the installation of any driver or component into\nthe guest.\n\n.. image:: docs/media/breakpoint.gif \n\nPyREBox offers a complete set of commands to inspect and modify the state of the running VM. Just type ``list_commands``\nto obtain a complete list. You can run any volatility plugin just by typing ``vol`` and the corresponding volatility command.\nFor a complete list of available volatility plugins, you\ncan type ``list_vol_commands``. This list is generated automatically, so it will also show any volatility plugin you\ninstall on PyREBox's ``volatility/`` path. \n\nYou can also define your own commands! It is as simple as declaring a function in a script, and loading it.\n\nIf you need something more expressive than a command, you can write a Python snippet leveraging the API. For a detailed\ndescription of the API, see `Documentation`_ or type ``help(api)`` in the shell.\n\n.. image:: docs/media/stack.gif\n\n\nScripting\n=========\n\nPyREBox allows to dynamically load scripts that can register callback functions that are called when certain events\noccur, like instructions executed, memory read/written, processes created/destroyed, and so on. \n\nGiven that PyREBox is integrated with Volatility, it will let you take advantage of all the volatility plugins for\nmemory forensics in your python scripts. Many of the most famous reverse engineering tools are implemented in Python or\nat least have Python bindings. Our approach allows to integrate any of these tools into a script.\n\nFinally, given that python callbacks can introduce a performance penalty on frequent events such as\ninstructions executed, it is also possible to create *triggers*. *Triggers* are native-code plug-in’s (developed in C/C++)\nthat can be inserted dynamically at run-time on any event just before the Python callback is executed. This allows to\nlimit the number of events that hit the python code, as well as to precompute values in native code.\n\nIn this repository you will find example scripts_ that can help you to write your owncode . Contributions are welcome!\n\n\nAcknowledgement\n===============\n\nFirst of all, PyREBox would not be possible without QEMU_ and Volatility_. We thank to their developers and\nmaintainers for such a great work.\n\nPyREBox is inspired by several academic projects, such as DECAF_, or PANDA_. In fact, many of the callbacks\nsupported by PyREBox are equivalent to those found in DECAF_, and the concepts behind the instrumentation\nare based on these works. \n\nPyREBox benefits from third-party code, which can be found under the directory pyrebox/third_party. \nFor each third-party project, we include an indication of its original license, the original source\ncode files taken from the project, as well as the modified versions of the source code files (if applicable),\nused by PyREBox.\n"
        },
        {
          "name": "autorun",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 4.064453125,
          "content": "#!/bin/bash\n\n# -------------------------------------------------------------------------------\n#\n#   Copyright (C) 2017 Cisco Talos Security Intelligence and Research Group\n#\n#   PyREBox: Python scriptable Reverse Engineering Sandbox\n#   Author: Xabier Ugarte-Pedrero\n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License version 2 as\n#   published by the Free Software Foundation\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program; if not, write to the Free Software\n#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#   MA 02110-1301, USA.\n#\n# -------------------------------------------------------------------------------\n\nroot_path=$(pwd)\npyrebox_path=$root_path/pyrebox\nvolatility_path=$root_path/volatility\nqemu_path=$root_path/qemu\nsleuthkit_path=$root_path/sleuthkit\nshow_help=\"no\"\ndebug=\"no\"\nrebuild_vol=\"no\"\nreconfigure=\"no\"\njobs=8\n\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nNC='\\033[0m'\n\nfor opt do\n  optarg=`expr \"x$opt\" : 'x[^=]*=\\(.*\\)'`\n  case \"$opt\" in\n  --help|-h) show_help=\"yes\"\n  ;;\n  --debug) debug=\"yes\"\n  ;;\n  --reconfigure) reconfigure=\"yes\"\n  ;;\n  --jobs=*) jobs=$optarg\n  ;;\n  *) echo \"ERROR: unknown option $opt\"; show_help=\"yes\"\n  ;;\n  esac\ndone\n\nif test x\"$show_help\" = x\"yes\" ; then\ncat << EOF\nUsage: configure [options]\nOptions: [defaults in brackets after descriptions]\nEOF\necho \"Standard options:\"\necho \"  --help                       print this message\"\necho \"  --debug                      compile for debug\"\necho \"  --jobs=n                     build using n parallel processes\"\necho \"  --reconfigure                reconfigure pyrebox\"\necho \"\"\nexit 1\nfi\n\n#----------------------- QEMU -----------------------\nif [ x\"${reconfigure}\" = xyes ] || [ ! -f ${qemu_path}/config-host.mak ] || [ ! -f ${sleuthkit_path}/Makefile ]; then\n    echo -e \"\\n${GREEN}[*] Configuring The Sleuth Kit...${NC}\\n\"\n    cd ${sleuthkit_path}\n    ./bootstrap\n    if [ $? -ne 0 ]; then\n        echo -e \"\\n${RED}[!] Could not configure The Sleuth Kit!${NC}\\n\"\n        exit 1\n    fi\n    ./configure\n    if [ $? -ne 0 ]; then\n        echo -e \"\\n${RED}[!] Could not configure The Sleuth Kit!${NC}\\n\"\n        exit 1\n    fi\n    cd $root_path\n\n\n    echo -e \"\\n${GREEN}[*] Configuring qemu...${NC}\\n\"\n    git submodule deinit -f .\n    git submodule init\n    git submodule update -f --recursive\n    cd ${qemu_path}\n    qemu_configure_flags=\"\"\n    if [ x\"${debug}\" = xyes ]\n    then\n      qemu_configure_flags='--enable-debug'\n    fi\n    ./configure --disable-docs --disable-libiscsi --target-list=i386-softmmu,x86_64-softmmu ${qemu_configure_flags}\n    if [ $? -ne 0 ]; then\n        echo -e \"\\n${RED}[!] Could not configure QEMU${NC}\\n\"\n        exit 1\n    fi\n\n    #----------------------- PYREBOX -----------------------\n\n    echo -e \"\\n${GREEN}[*] Configuring pyrebox...${NC}\\n\"\n\n    config_h=$pyrebox_path/config.h\n    test -f $config_h && rm $config_h\n    echo \"//# Automatically generated by configure - do not modify\" > $config_h\n    echo \"#define VOLATILITY_PATH \\\"$volatility_path\\\"\" >> $config_h\n    echo \"#define PYREBOX_PATH \\\"$pyrebox_path\\\"\" >> $config_h\n    echo \"#define ROOT_PATH \\\"$root_path\\\"\" >> $config_h\n\nfi\n\n#----------------------- PYREBOX -----------------------\necho -e \"${GREEN}\\n[*] Building The Sleuth Kit...${NC}\\n\"\ncd $sleuthkit_path\nmake -j${jobs}\nif ! [ -f $sleuthkit_path/tsk/.libs/libtsk.so ]; then\n    echo -e \"${RED}\\n[!] Oops... build failed!${NC}\\n\"\n    exit 1\nfi\n\necho -e \"${GREEN}\\n[*] Building pyrebox...${NC}\\n\"\ncd $root_path\nmake -j${jobs}\nif ! [ -f qemu/i386-softmmu/qemu-system-i386 ]; then\n    echo -e \"${RED}\\n[!] Oops... build failed!${NC}\\n\"\n    exit 1\nfi\nif ! [ -f qemu/x86_64-softmmu/qemu-system-x86_64 ]; then\n    echo -e \"${RED}\\n[!] Oops... build failed!${NC}\\n\"\n    exit 1\nfi\necho -e \"${GREEN}\\n\\n[*] Done, enjoy!${NC}\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "exploit_detect",
          "type": "tree",
          "content": null
        },
        {
          "name": "generic_unpacker",
          "type": "tree",
          "content": null
        },
        {
          "name": "guest",
          "type": "tree",
          "content": null
        },
        {
          "name": "mw_monitor",
          "type": "tree",
          "content": null
        },
        {
          "name": "mw_monitor2",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyrebox-i386",
          "type": "blob",
          "size": 0.1513671875,
          "content": "#!/usr/bin/env bash\nBASEDIR=$(dirname \"$0\")\nLD_LIBRARY_PATH=$BASEDIR/sleuthkit/tsk/.libs:$LD_LIBRARY_PATH $BASEDIR/qemu/i386-softmmu/qemu-system-i386 \"$@\"\n"
        },
        {
          "name": "pyrebox-x86_64",
          "type": "blob",
          "size": 0.1552734375,
          "content": "#!/usr/bin/env bash\nBASEDIR=$(dirname \"$0\")\nLD_LIBRARY_PATH=$BASEDIR/sleuthkit/tsk/.libs:$LD_LIBRARY_PATH $BASEDIR/qemu/x86_64-softmmu/qemu-system-x86_64 \"$@\"\n"
        },
        {
          "name": "pyrebox.conf.Win7SP0x64",
          "type": "blob",
          "size": 0.9833984375,
          "content": "[MODULES]\nplugins.guest_agent: False\nscripts.script_example: False\nscripts.script_example_min: False\nscripts.vol_test: False\nscripts.proc_bp: False\nscripts.mem_write_test: False\nscripts.page_write_execute_trigger: False\nscripts.getset_var_example: False\nscripts.bp_range_test: False\nscripts.mem_write_breakpoint_test: False\nmw_monitor.mw_monitor: False\npyrebox_test.test_0_vmi_create_proc: False\npyrebox_test.test_1_block_begin: False\npyrebox_test.test_2_opt_block_begin: False\npyrebox_test.test_3_opt_insn_begin: False\npyrebox_test.test_4_mem_write: False\npyrebox_test.test_5_mem_read: False\npyrebox_test.test_6_keystroke: False\npyrebox_test.test_7_nic_test: False\npyrebox_test.test_8_opcode_range: False\npyrebox_test.test_9_tlb_and_context_change: False\npyrebox_test.test_10_block_end: False\npyrebox_test.test_11_insn_end: False\npyrebox_test.test_12_load_remove_module: False\n\n[VOL]\nprofile: Win7SP0x64\n\n[AGENT]\nname: win_agent_64.exe\nconf: win_agent_64.exe.conf \n\n[SYMBOL_CACHE]\npath: symbols.Win7SP0x64\n"
        },
        {
          "name": "pyrebox.conf.WinXPSP3x86",
          "type": "blob",
          "size": 1.107421875,
          "content": "[MODULES]\nplugins.guest_agent: False\nscripts.script_example: False\nscripts.script_example_min: False\nscripts.vol_test: False\nscripts.proc_bp: False\nscripts.mem_write_test: False\nscripts.page_write_execute_trigger: False\nscripts.getset_var_example: False\nscripts.bp_range_test: False\nscripts.mem_write_breakpoint_test: False\nmw_monitor.mw_monitor: False \nmw_monitor2.interproc: True \nmw_monitor2.coverage: False\nmw_monitor2.api_tracer: False \nmw_monitor2.generic_unpacker: False\npyrebox_test.test_0_vmi_create_proc: False\npyrebox_test.test_1_block_begin: False\npyrebox_test.test_2_opt_block_begin: False\npyrebox_test.test_3_opt_insn_begin: False\npyrebox_test.test_4_mem_write: False\npyrebox_test.test_5_mem_read: False\npyrebox_test.test_6_keystroke: False\npyrebox_test.test_7_nic_test: False\npyrebox_test.test_8_opcode_range: False\npyrebox_test.test_9_tlb_and_context_change: False\npyrebox_test.test_10_block_end: False\npyrebox_test.test_11_insn_end: False\npyrebox_test.test_12_load_remove_module: False\n\n[VOL]\nprofile: WinXPSP3x86\n\n[AGENT]\nname: win_agent_32.exe\nconf: win_agent_32.exe.conf \n\n[SYMBOL_CACHE]\npath: symbols.WinXPSP3x86\n"
        },
        {
          "name": "pyrebox",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyrebox_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "qemu",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0869140625,
          "content": "ipython>=5,<6\nsphinx\nsphinx-autobuild\nprettytable\npefile\ncapstone\ndistorm3\npycrypto\npytz\n"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 10.234375,
          "content": "# -------------------------------------------------------------------------------\n#\n#   Copyright (C) 2018 Cisco Talos Security Intelligence and Research Group\n#\n#   PyREBox: Python scriptable Reverse Engineering Sandbox\n#   Author: Xabier Ugarte-Pedrero\n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License version 2 as\n#   published by the Free Software Foundation.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program; if not, write to the Free Software\n#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n#   MA 02110-1301, USA.\n#\n# -------------------------------------------------------------------------------\n\n# -------------------------------------------------------------------------------\n#                                PyREBox run.py \n#                                ==============\n#\n#   USAGE:  Configure the following environment variables.\n#\n#           VM_IMAGE = \n#           VM_SNAPSHOT = \n#           PYREBOX_PATH = \n#           RAM = \n#           TIMEOUT = \n#           CONFIG_PATH = \n#           AUTORUN_CONF_PATH = \n#\n#   or provide them as parameters to start_pyrebox\n#\n#\n#           (Optionally, depending on which modules are enabled on\n#           the pyrebox configuration file (CONFIG_PATH))\n#       \n#           GENERIC_UNPACKER_CONF_PATH =\n#\n# -------------------------------------------------------------------------------\n\n\nfrom threading import Thread\nimport argparse\nimport subprocess\nimport os\nimport signal\nimport fcntl\nimport time\nimport sys\n\n# Maximum time we wait for the unload \n# process to finish before we kill the\n# process\nMAX_UNLOAD_TIME = 60\n\nVM_IMAGE = os.environ.get(\"VM_IMAGE\", None)\nVM_SNAPSHOT = os.environ.get(\"VM_SNAPSHOT\", None)\nPYREBOX_PATH = os.environ.get(\"PYREBOX_PATH\", None)\nRAM = os.environ.get(\"RAM\", None)\nTIMEOUT = os.environ.get(\"TIMEOUT\", 60 * 5)\nCONFIG_PATH = os.environ.get(\"CONFIG_PATH\", \"pyrebox.conf\")\nAUTORUN_CONF_PATH = os.environ.get(\"AUTORUN_CONF_PATH\", \"autorun.conf\")\n\n# Process handle\np = None\n\ndef log(s, std_log_file = None):\n    if std_log_file:\n        with open(std_log_file, \"a\") as f:\n            f.write(s + \"\\n\")\n    else:\n        print(s)\n\ndef signal_handler(sig, frame):\n    global p\n    if p:\n        print(\"Killing PyREBox process...\")\n        os.killpg(os.getpgid(p.pid), signal.SIGKILL)\n        p = None\n    sys.exit(0)\n\ndef start_pyrebox(vm_image = VM_IMAGE,\n                vm_snapshot = VM_SNAPSHOT,\n                pyrebox_path = PYREBOX_PATH,\n                ram = RAM,\n                timeout_analysis = TIMEOUT,\n                config = CONFIG_PATH,\n                autorun_config = AUTORUN_CONF_PATH,\n                std_log_file = None):\n    global p\n\n    signal.signal(signal.SIGINT, signal_handler)\n    signal.signal(signal.SIGTERM, signal_handler)\n\n    try:\n        if vm_image is None or not os.path.isfile(vm_image):\n            raise ValueError(\"The specified path for the VM image is incorrect.\")\n        if vm_snapshot is None or (not isinstance(vm_snapshot, str) and not isinstance(vm_snapshot, unicode)):\n            raise ValueError(\"The specified snapshot is not a valid string\")\n        if ram is None:\n            raise ValueError(\"The specified value for RAM is not valid\")\n        if pyrebox_path is None or (not os.path.isfile(pyrebox_path) and not os.path.islink(pyrebox_path)):\n            raise ValueError(\"The specified pyrebox path is not a valid file\")\n        if timeout_analysis is None or not isinstance(timeout_analysis, int):\n            raise ValueError(\"The specified timeout is not a valid int value\")\n        if config is None or not os.path.isfile(config):\n            raise ValueError(\"The specified path for the config file is not valid\")\n        if autorun_config is None or (not isinstance(autorun_config, str) and not isinstance(autorun_config, unicode)):\n            raise ValueError(\"The specified path for the autorun config file is not valid\")\n\n        # Autorun module handle (so that we can unload it)\n        module_handle = None\n\n        try:\n            #Insert this as commands\n            pyrebox_command = \"{pyrebox_path} -monitor stdio -m {ram} -usb -usbdevice tablet \" + \\\n                              \"-drive file={vm_img},index=0,media=disk,format=qcow2,cache=unsafe \" + \\\n                              \"-vnc 127.0.0.1:0 -loadvm {snapshot} -conf {config_path} -net none\"\n\n            pyrebox_command = pyrebox_command.format(vm_img=vm_image,\n                                                     snapshot=vm_snapshot,\n                                                     pyrebox_path=pyrebox_path,\n                                                     ram = ram,\n                                                     config_path = config)\n\n            # Make sure we set environment variable\n            pyrebox_env = os.environ.copy()\n            pyrebox_env[\"AUTORUN_CONF_PATH\"] = autorun_config\n            current_ld_library_path = os.getenv('LD_LIBRARY_PATH', '')\n            p = subprocess.Popen(args=pyrebox_command,\n                                 env=pyrebox_env,\n                                 stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE, shell=True,\n                                 env={\"LD_LIBRARY_PATH\": \"sleuthkit/tsk/.libs:%s\" % (current_ld_library_path)}\n                                 # Open the process on a new session\n                                 preexec_fn=os.setsid)\n\n            log(\"Started PyREBox...\", std_log_file)\n            fl = fcntl.fcntl(p.stdout, fcntl.F_GETFL)\n            fcntl.fcntl(p.stdout, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n            fl = fcntl.fcntl(p.stderr, fcntl.F_GETFL)\n            fcntl.fcntl(p.stderr, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n        except Exception as e:\n            msg = \"Error loading PyREBox: %s\" % str(e)\n            log(msg, std_log_file)\n            if p:\n                os.killpg(os.getpgid(p.pid), signal.SIGKILL)\n                p = None\n            raise Exception(msg)\n\n        start_time = time.time()\n        while True:\n            #Wait analysis timeout \n            if (time.time() - start_time) > timeout_analysis:\n                msg = \"PyREBox did not finish in %d seconds\" % timeout_analysis\n                log(msg, std_log_file)\n\n                if module_handle is not None:\n                    # Unload the mwmon module\n                    p.stdin.write(\"unload_module %d\\n\" % module_handle)\n                else:\n                    log(\"Cannot unload modules, because module handle was not recorded\", std_log_file)\n\n                # Set a 60 second timeout for unload to happen\n                start_time = time.time()\n                timeout_unload = MAX_UNLOAD_TIME \n                while True:\n                    if (time.time() - start_time) > timeout_unload:\n                        msg = \"Module unload did not happen in time\"\n                        log(msg, std_log_file)\n                        if p:\n                            os.killpg(os.getpgid(p.pid), signal.SIGKILL)\n                            p = None\n                        raise Exception(msg) \n\n                    time.sleep(0.1)\n\n                    try:\n                        s = p.stderr.read()\n                        if len(s.strip()) > 0:\n                            log(s, std_log_file)\n                    except Exception as e:\n                        pass\n\n                    try:\n                        s = p.stdout.read()\n                        if len(s.strip()) > 0:\n                            log(s, std_log_file)\n\n                        if \"[autorun.autorun] All modules unloaded\" in s:\n                            break\n                    except Exception as e:\n                        continue\n\n                # Exit from first loop if we forced analysis stop\n                break\n\n            time.sleep(0.1)\n\n            try:    \n                s = p.stderr.read()\n                if len(s.strip()) > 0:\n                    log(s, std_log_file)\n            except Exception as e:\n                pass\n\n            try:\n                s = p.stdout.read()\n                if len(s.strip()) > 0:\n                    log(s, std_log_file)\n                if \"[autorun.autorun] All modules unloaded\" in s:\n                    break\n                if \"Module loaded:\" in s:\n                    import re\n                    m = re.search(r\"Module\\sloaded:\\s([0-9]+)\", s)\n                    if m:\n                        module_handle = int(m.group(1))\n            except Exception as e:\n                continue\n\n        if p:\n            os.killpg(os.getpgid(p.pid), signal.SIGKILL)\n            p = None\n\n        return True\n    except Exception as e:\n        log(\"Exception occurred while running PyREBox: %s\" % str(e), std_log_file)\n        if p:\n            os.killpg(os.getpgid(p.pid), signal.SIGKILL)\n            p = None\n        return False\n\nif __name__ == \"__main__\":\n    #Parse arguments\n    parser = argparse.ArgumentParser(description='Start PyREBox')\n    parser.add_argument(\"--image\", help=\"Path to VM image\")\n    parser.add_argument(\"--snapshot\", help=\"Snapshot to load\")\n    parser.add_argument(\"--path\", help=\"PyREBox path\")\n    parser.add_argument(\"--ram\", help=\"RAM memory to load the image (in Mb)\")\n    parser.add_argument(\"--timeout\", help=\"Analysis timeout, in seconds\")\n    parser.add_argument(\"--config\", help=\"Path to pyrebox configuration file\")\n    parser.add_argument(\"--autorun_config\", help=\"Path to autorun configuration file\")\n    args = parser.parse_args()\n\n    start_pyrebox(vm_image = args.image if args.image else VM_IMAGE,\n                vm_snapshot = args.snapshot if args.snapshot else VM_SNAPSHOT,\n                pyrebox_path = args.path if args.path else PYREBOX_PATH, \n                ram = args.ram if args.ram else RAM,\n                timeout_analysis = int(args.timeout) if args.timeout else TIMEOUT,\n                config = args.config if args.config else CONFIG_PATH,\n                autorun_config = args.autorun_config if args.autorun_config else AUTORUN_CONF_PATH,\n                std_log_file = \"pyrebox_run.log\")\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sleuthkit",
          "type": "tree",
          "content": null
        },
        {
          "name": "start_i386.sh",
          "type": "blob",
          "size": 0.98046875,
          "content": "#!/usr/bin/env bash\n\n#This script is provided as an example of a possible QEMU / Pyrebox configuration\n#for a Windows XP SP3, 32 bit analysis target.\n\n#It assumes that pyrebox.conf.WinXPSP3x86 exists, and contains the list\n#of scripts to be loaded on startup, as well as the configuration parameter\n#that indicates Volatility the profile to apply.\n\n#The QEMU parameters specified will start a VM with:\n#   * 256 MiB of RAM\n#   * Usb support\n#   * A main hard-drive, provided as a qcow2 image as the first parameter for the script\n#   * Starts a VNC server on 127.0.0.1 for showing the system display\n#   * Redirects the QEMU monitor to stdio (only configuration supported currently)\n\nif [ -z \"$2\" ]\nthen\n    snapshot=\"\"\nelse\n    snapshot=\"-loadvm $2\"\nfi\n\nBASEDIR=$(dirname \"$0\")\ncp $BASEDIR/pyrebox.conf.WinXPSP3x86 $BASEDIR/pyrebox.conf\n$BASEDIR/pyrebox-i386 -monitor stdio -net none -m 256 -usb -usbdevice tablet -drive file=$1,index=0,media=disk,format=qcow2,cache=unsafe -vnc 127.0.0.1:0 ${snapshot}\n"
        },
        {
          "name": "start_x86_64.sh",
          "type": "blob",
          "size": 0.962890625,
          "content": "#!/usr/bin/env bash\n\n#This script is provided as an example of a possible QEMU / Pyrebox configuration\n#for a Windows 7 SP 0 64 bit analysis target.\n\n#It assumes that pyrebox.conf.Win7SP0x64 exists, and contains the list\n#of scripts to be loaded on startup, as well as the configuration parameter\n#that indicates Volatility the profile to apply.\n\n#The QEMU parameters specified will start a VM with:\n#   * 512 MiB of RAM\n#   * Usb support\n#   * A main hard-drive, provided as a qcow2 image as the first parameter for the script\n#   * Starts a VNC server on 127.0.0.1 for showing the system display\n#   * Redirects the QEMU monitor to stdio (only configuration supported currently)\n\nif [ -z \"$2\" ]\nthen\n    snapshot=\"\"\nelse\n    snapshot=\"-loadvm $2\"\nfi\n\nBASEDIR=$(dirname \"$0\")\ncp $BASEDIR/pyrebox.conf.Win7SP0x64 $BASEDIR/pyrebox.conf\n$BASEDIR/pyrebox-x86_64 -monitor stdio -net none -m 512 -usb -drive file=$1,index=0,media=disk,format=qcow2,cache=unsafe -vnc 127.0.0.1:0 ${snapshot} \n"
        },
        {
          "name": "triggers",
          "type": "tree",
          "content": null
        },
        {
          "name": "volatility",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}