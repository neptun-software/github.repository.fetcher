{
  "metadata": {
    "timestamp": 1736709756359,
    "page": 182,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "babbleberry/rpi4-osdev",
      "stars": 3513,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.013671875,
          "content": "www.rpi4os.com"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 6.8828125,
          "content": "Creative Commons Legal Code\n\nCC0 1.0 Universal\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\n    HEREUNDER.\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for\nthe purpose of contributing to a commons of creative, cultural and\nscientific works (\"Commons\") that the public can reliably and without fear\nof later claims of infringement build upon, modify, incorporate in other\nworks, reuse and redistribute as freely as possible in any form whatsoever\nand for any purposes, including without limitation commercial purposes.\nThese owners may contribute to the Commons to promote the ideal of a free\nculture and the further production of creative, cultural and scientific\nworks, or to gain reputation or greater distribution for their Work in\npart through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any\nexpectation of additional consideration or compensation, the person\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work, voluntarily\nelects to apply CC0 to the Work and publicly distribute the Work under its\nterms, with knowledge of his or her Copyright and Related Rights in the\nWork and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not\nlimited to, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display,\n     communicate, and translate a Work;\n ii. moral rights retained by the original author(s) and/or performer(s);\niii. publicity and privacy rights pertaining to a person's image or\n     likeness depicted in a Work;\n iv. rights protecting against unfair competition in regards to a Work,\n     subject to the limitations in paragraph 4(a), below;\n  v. rights protecting the extraction, dissemination, use and reuse of data\n     in a Work;\n vi. database rights (such as those arising under Directive 96/9/EC of the\n     European Parliament and of the Council of 11 March 1996 on the legal\n     protection of databases, and under any national implementation\n     thereof, including any amended or successor version of such\n     directive); and\nvii. other similar, equivalent or corresponding rights throughout the\n     world based on applicable law or treaty, and any national\n     implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention\nof, applicable law, Affirmer hereby overtly, fully, permanently,\nirrevocably and unconditionally waives, abandons, and surrenders all of\nAffirmer's Copyright and Related Rights and associated claims and causes\nof action, whether now known or unknown (including existing as well as\nfuture claims and causes of action), in the Work (i) in all territories\nworldwide, (ii) for the maximum duration provided by applicable law or\ntreaty (including future time extensions), (iii) in any current or future\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\nincluding without limitation commercial, advertising or promotional\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\nmember of the public at large and to the detriment of Affirmer's heirs and\nsuccessors, fully intending that such Waiver shall not be subject to\nrevocation, rescission, cancellation, termination, or any other legal or\nequitable action to disrupt the quiet enjoyment of the Work by the public\nas contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason\nbe judged legally invalid or ineffective under applicable law, then the\nWaiver shall be preserved to the maximum extent permitted taking into\naccount Affirmer's express Statement of Purpose. In addition, to the\nextent the Waiver is so judged Affirmer hereby grants to each affected\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\nirrevocable and unconditional license to exercise Affirmer's Copyright and\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\nmaximum duration provided by applicable law or treaty (including future\ntime extensions), (iii) in any current or future medium and for any number\nof copies, and (iv) for any purpose whatsoever, including without\nlimitation commercial, advertising or promotional purposes (the\n\"License\"). The License shall be deemed effective as of the date CC0 was\napplied by Affirmer to the Work. Should any part of the License for any\nreason be judged legally invalid or ineffective under applicable law, such\npartial invalidity or ineffectiveness shall not invalidate the remainder\nof the License, and in such case Affirmer hereby affirms that he or she\nwill not (i) exercise any of his or her remaining Copyright and Related\nRights in the Work or (ii) assert any associated claims and causes of\naction with respect to the Work, in either case contrary to Affirmer's\nexpress Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\n    surrendered, licensed or otherwise affected by this document.\n b. Affirmer offers the Work as-is and makes no representations or\n    warranties of any kind concerning the Work, express, implied,\n    statutory or otherwise, including without limitation warranties of\n    title, merchantability, fitness for a particular purpose, non\n    infringement, or the absence of latent or other defects, accuracy, or\n    the present or absence of errors, whether or not discoverable, all to\n    the greatest extent permissible under applicable law.\n c. Affirmer disclaims responsibility for clearing rights of other persons\n    that may apply to the Work or any use thereof, including without\n    limitation any person's Copyright and Related Rights in the Work.\n    Further, Affirmer disclaims responsibility for obtaining any necessary\n    consents, permissions or other rights required for any use of the\n    Work.\n d. Affirmer understands and acknowledges that Creative Commons is not a\n    party to this document and has no duty or obligation with respect to\n    this CC0 or use of the Work.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2421875,
          "content": "Writing a \"bare metal\" operating system for Raspberry Pi 4\n==========================================================\n\nIntroduction\n------------\n\nAs a tech CEO, I don't write code any more. And I've recently realised just how much I miss it.\n\nCurrently in the throes of a nationwide \"lockdown\" due to Covid-19 (and having been spared my usual commute), I've found myself with more hours in the day. I have taken this time for myself and used it to fulfil a childhood ambition - to write a **bare metal** operating system that runs on commercial hardware.\n\nWhat does bare metal mean?\n--------------------------\n\nWhen we buy a computer or a tablet/smartphone it typically comes with some basic software pre-installed. You'll likely be familiar with watching Microsoft Windows, Mac OS, iOS, Android or maybe even Linux start up as you power the device (or **boot** it) for the first time. These are all operating systems - software designed to make computer chips work out of the box for mere mortals like you and me. They help us interact with the machine by drawing to a screen, processing messages from devices like keyboards & mice, working with networking hardware to connect you to the Internet, allowing us to playback sound and much, much more.\n\nSoftware developers around the world then build applications (apps) that run on top of these operating systems. These apps talk to the hardware via the operating system (**OS**), so this complex code doesn't have to be written over and over again. As a result, it's possible to be a software developer without knowing much about hardware at all! It's the OS that does the hard work that allows us to use apps like Facebook, Instagram, WhatsApp, TikTok etc.\n\nIt's fair to say that _computers can't do anything useful without an OS_. They just sit there waiting to be told what to do. So, why is it that only software giants like Microsoft, Apple and Google get to tell the majority of computers what to do as they're being switched on? Why can't we? Well, we can, and that is what bare metal programming is.\n\nChoice of hardware\n------------------\n\nIf you're excited by the prospect of telling a computer what to do then you need an interest in hardware. The computer chip that's going to do your bidding is called a **CPU** (Central Processing Unit) - it's the beating heart of every computer device. Lots of companies have designed such CPUs over the years, but two - Intel and Arm - are most widely adopted. These each have their advantages and disadvantages. If you own a smartphone, it's highly likely that it's running on a chip designed by Arm. If you own a laptop running Microsoft Windows then it's likely to be running on an Intel chip. You'll want to develop an understanding of both **architectures** eventually, but I've chosen an Arm device for this project.\n\nThe new [Raspberry Pi 4 Model B](https://www.raspberrypi.org/products/raspberry-pi-4-model-b/) is a low-cost computer that runs on a 1.5 GHz 64-bit quad-core Arm Cortex-A72 processor. It's a device that many millions of people worldwide use, and so it's exciting to write bare metal code for it. Imagine that somebody else might one day use your OS! The **RPi4** also has some useful attached hardware that will help us along the way.\n\nHardware prerequisites\n----------------------\n\nYou'll need some hardware to get started with writing your OS:\n\n * An RPi4 with a dedicated power supply and HDMI lead\n * A monitor/TV connected to the RPi4 via HDMI\n * A micro-SD card to boot the RPi4 from\n * A computer to write your code on e.g. a Windows/Mac laptop (the **dev machine**)\n\nYou'll need to make sure that you can write to the micro-SD card using your dev machine. For me, that meant buying an SD card adapter, because the micro-SD card was too small for the slot in my laptop. You may need the same, or even a USB SD card reader too if your laptop doesn't have one built-in.\n\nOther incredibly useful hardware that you simply can't do without:\n\n * A pair of eyebrow tweezers (I borrowed these from my wife!) - useful to insert/remove the micro-SD card into the tiny slot on the RPi4\n * A [USB to serial TTL cable](https://www.amazon.co.uk/gp/product/B01N4X3BJB/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1) - useful to see what your OS is doing long before you can write information to the screen\n\nSoftware prerequisites\n----------------------\n\nIf you can't get someone else's OS running, you likely won't be able to write your own. So I started by flashing the SD card with Raspbian - Raspberry Pi's recommended OS. I used the very neat [Imager tool](https://www.raspberrypi.org/downloads/) that they make available on their website to do this.\n\nHook up your RPi4 and make sure it boots into Raspbian. There are plenty of resources online to help you achieve/troubleshoot this. Getting Raspbian up will test that your hardware setup is working properly. Note: because I connected my RPi4 to my (not brilliant) TV, I needed to make an edit in the _config.txt_ file on the SD card (setting the `hdmi_safe` parameter to 1) to ensure that I could see the screen. Without that, it was just black. If you're still having trouble, check out the other _config.txt_ video options [here on the Raspberry Pi website](https://www.raspberrypi.com/documentation/computers/config_txt.html#video-options).\n\nDon't proceed until you get Raspbian running!\n\n---\n\nThe RPi4 runs on an Arm Cortex-A72 processor. Your dev machine is likely running on an Intel processor. You'll therefore need some software that helps you build code to run on a different architecture. This is called a **cross-compiler**.\n\nUsing Arm's compiler for Linux\n------------------------------\n\nDownload and unpack [Arm's gcc compiler](https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads). For reasons that I won't go into here, you'll need to use the \"AArch64 ELF bare-metal target\". Since I'm using WSL on Windows 10 to emulate Ubuntu, I downloaded the x86_64 Linux hosted cross-compiler.\n\nI also advocate installing GNU make - you'll need it soon enough. Because I'm using WSL, for me that was simply a matter of typing `sudo apt install make` and entering my password.\n\nUsing clang on Mac OS X (Apple Silicon or Intel)\n------------------------------------------------\n\nDownload and install XCode from the App Store. This will give you a raft of developer tools for free, including `make`.\n\nI recommend using [Homebrew](https://docs.brew.sh/Installation) to install LLVM. For me, Homebrew was already installed, so this was a simple case of typing `brew install llvm`.\n\nLLVM will give you all you need to start building for Raspberry Pi bare metal on Mac. It even works on my M1 MacBook Pro with Apple Silicon, which runs an ARM processor rather than an Intel processsor.\n\nBuilding directly on a Raspberry Pi 4\n-------------------------------------\n\nYou can read more about how to build on the Pi itself [here](./RPI-BUILD.md).\n\n_Now you're ready to start writing your OS!_\n\n[Go to part1-bootstrapping >](./part1-bootstrapping/)\n\nAcknowledgements\n----------------\n\nNot all of the code here is my original work, but has been collated from and inspired by some fantastic contributors.\n\nThanks go to:\n\n * Zoltan Baldaszti's \"Bare metal Raspberry Pi 3 tutorials\" [(github)](https://github.com/bztsrc/raspi3-tutorial/)\n\nDo reach out if you would like to be acknowledged here too!\n"
        },
        {
          "name": "RPI-BUILD.md",
          "type": "blob",
          "size": 2.8271484375,
          "content": "Writing a \"bare metal\" operating system for Raspberry Pi 4\n==========================================================\n\nBuilding on the RPi4 itself\n---------------------------\n\nIt's possible (but not super-simple) to follow this tutorial on the Raspberry Pi without need for an additional build device.\n\nPerhaps the easiest route is to firstly re-image your Pi to use the 64-bit Raspberry Pi OS (Beta), and then use a pre-built cross-compiler:\n\n * Download a zipped _.img_ image file from the [64-bit image list](https://downloads.raspberrypi.org/raspios_arm64/images/), picking the newest update\n * Unzip it and use the [Raspberry Pi Imager](https://www.raspberrypi.org/software/) to write it to your SD card, selecting \"Use custom\" from the options and pointing it at your downloaded _.img_ file\n * Boot the Pi and follow the setup wizard to ensure you have a working Internet connection\n * Just for luck, run `sudo apt update`\n\nYou'll then need to download a cross-compiler from the Arm website.\n\nWhat you're looking for is the current [AArch64 ELF bare-metal target (aarch64-none-elf)](https://developer.arm.com/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-aarch64-aarch64-none-elf.tar.xz). If this link is somehow broken, you can use Google to search for \"Arm GNU-A linux hosted cross compilers\".\n\nThen unpack the archive using `tar -xf <filename>`. You'll end up with a _gcc_ directory (albeit with a slightly longer name), which itself contains a _bin_ subdirectory, wherein you'll find the _gcc_ executable (again - with a longer name!). Remember this path.\n\nNote: you can avoid re-imaging the Pi, by instead [building a cross-compiler yourself](https://wiki.osdev.org/GCC_Cross-Compiler).\n\nNow let's build something:\n\n * Use `git` to clone this repo: `git clone https://github.com/babbleberry/rpi4-osdev.git`\n * Decide which part you want to build - I like testing with _part5-framebuffer_ (it's visual, so you'll know when it works!)\n * Copy the _Makefile.gcc_ to _Makefile_\n * Edit the _Makefile_ and ensure the `GCCPATH` variable points to the _bin_ subdirectory where your cross-compiler is to be found\n * Type `make` at the command line and it should build without errors\n\nIf you want to then boot with this, you'll need to copy the _kernel8.img_ file to a prepped SD card as the tutorial discusses. For the purposes of testing this process, I did the following (NOTE: it will trash your OS install unless you backup the old files so you can move them back later):\n\n * `sudo cp kernel8.img /boot`\n * Then edit _/boot/config.txt_ to include only these lines (for _part5-framebuffer_ anyway, otherwise read the tutorial in full for any necessary config changes for other parts...):\n\n```c\nhdmi_group=1\nhdmi_mode=16\ncore_freq_min=500\n```\n\nReboot and you should see the _part5-framebuffer_ demo firing up!\n\n[Go to part1-bootstrapping >](./part1-bootstrapping/)\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.1259765625,
          "content": "remote_theme: pages-themes/cayman@v0.2.0\nurl: \"https://www.rpi4os.com\"\nplugins:\n     - jekyll-remote-theme\n     - jekyll-sitemap\n"
        },
        {
          "name": "_includes",
          "type": "tree",
          "content": null
        },
        {
          "name": "google69636ed483fc239e.html",
          "type": "blob",
          "size": 0.0517578125,
          "content": "google-site-verification: google69636ed483fc239e.html"
        },
        {
          "name": "part1-bootstrapping",
          "type": "tree",
          "content": null
        },
        {
          "name": "part10-multicore",
          "type": "tree",
          "content": null
        },
        {
          "name": "part11-breakout-smp",
          "type": "tree",
          "content": null
        },
        {
          "name": "part12-wgt",
          "type": "tree",
          "content": null
        },
        {
          "name": "part13-interrupts",
          "type": "tree",
          "content": null
        },
        {
          "name": "part14-spi-ethernet",
          "type": "tree",
          "content": null
        },
        {
          "name": "part15-tcpip-webserver",
          "type": "tree",
          "content": null
        },
        {
          "name": "part2-building",
          "type": "tree",
          "content": null
        },
        {
          "name": "part3-helloworld",
          "type": "tree",
          "content": null
        },
        {
          "name": "part4-miniuart",
          "type": "tree",
          "content": null
        },
        {
          "name": "part5-framebuffer",
          "type": "tree",
          "content": null
        },
        {
          "name": "part6-breakout",
          "type": "tree",
          "content": null
        },
        {
          "name": "part7-bluetooth",
          "type": "tree",
          "content": null
        },
        {
          "name": "part8-breakout-ble",
          "type": "tree",
          "content": null
        },
        {
          "name": "part9-sound",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}