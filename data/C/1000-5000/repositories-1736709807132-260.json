{
  "metadata": {
    "timestamp": 1736709807132,
    "page": 260,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "enjoy-digital/litex",
      "stars": 3112,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.078125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Tilde files\n*~\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\n!litex/build\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# VS Code settings\n.vscode\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 57.5,
          "content": "[> 2024.12, released on January 7th 2025\n----------------------------------------\n\n[> Fixed\n--------\n- **tools/litex_client**                     : Fixed error handling and timeout management ([1225bf45](https://github.com/enjoy-digital/litex/commit/1225bf45), [fc529dca](https://github.com/enjoy-digital/litex/commit/fc529dca), [b9cc5c58](https://github.com/enjoy-digital/litex/commit/b9cc5c58)).\n- **soc/cores/led**                          : Fixed WS2812 LED count calculation ([PR #2142](https://github.com/enjoy-digital/litex/pull/2142)).\n- **build/vhd2v_converter**                  : Fixed instance handling and robustness ([PR #2145](https://github.com/enjoy-digital/litex/pull/2145), [8254a349f](https://github.com/enjoy-digital/litex/commit/8254a349f)).\n- **soc/cores/jtag**                         : Fixed ECP5JTAG initialization for Diamond/Trellis toolchains ([4368d5a9e](https://github.com/enjoy-digital/litex/commit/4368d5a9e)).\n- **litespi**                                : Fixed SPI Flash erase functionality and debug output ([e61196b1c](https://github.com/enjoy-digital/litex/commit/e61196b1c), [63fa4fda8](https://github.com/enjoy-digital/litex/commit/63fa4fda8)).\n- **liteeth/phy/pcs_1000basex**              : Fixed deadlock in AUTONEG_WAIT_ABI state and improved RX alignment ([e5746c8](https://github.com/enjoy-digital/liteeth/commit/e5746c8)).\n- **liteeth/phy/pcs_1000basex**              : Fixed RX Config consistency check and cleanup pass ([20e9ea6](https://github.com/enjoy-digital/liteeth/commit/20e9ea6), [cd2274d](https://github.com/enjoy-digital/liteeth/commit/cd2274d)).\n- **litepcie/software/kernel**               : Fixed compilation warnings and removed unused functions ([867c818](https://github.com/enjoy-digital/litepcie/commit/867c818)).\n- **platforms/limesdr_mini_v2**              : Fixed SPI Flash pinout (MOSI <-> MISO) ([3b8c558](https://github.com/litex-hub/litex-boards/commit/3b8c558)).\n- **efinix_trion_t20_bga256_dev_kit**        : Fixed ClockSignal handling ([77cb9a5](https://github.com/litex-hub/litex-boards/commit/77cb9a5)).\n\n[> Added\n--------\n- **cpu/zynqmp**                             : Added SGMII support via PL and optional PTP ([PR #2095](https://github.com/enjoy-digital/litex/pull/2095)).\n- **liteeth/phy**                            : Improved 1000BaseX/2500BaseX PCS/PHYs ([PR #174](https://github.com/enjoy-digital/liteeth/pull/174)).\n- **cpu/urv**                                : Added uRV CPU support (RISC-V CPU use in White Rabbit project) ([PR #2098](https://github.com/enjoy-digital/litex/pull/2098)).\n- **tools/litex_client**                     : Added memory regions table, auto-refresh, and binary file read/write support ([d3258a398](https://github.com/enjoy-digital/litex/commit/d3258a398), [3875a4c1f](https://github.com/enjoy-digital/litex/commit/3875a4c1f), [95f37a82e](https://github.com/enjoy-digital/litex/commit/95f37a82e)).\n- **tools/litex_client**                     : Added endianness configuration for memory accesses ([71e802aec](https://github.com/enjoy-digital/litex/commit/71e802aec)).\n- **cores/clock/intel**                      : Added reset support to Intel PLLs ([PR #2139](https://github.com/enjoy-digital/litex/pull/2139)).\n- **cores/cpu/vexiiriscv**                   : Added PMP support and MACSG (DMA-based Ethernet) support ([PR #2130](https://github.com/enjoy-digital/litex/pull/2130)).\n- **build/altera/quartus**                   : Added `.svf` generation for OpenFPGALoader compatibility ([e91d4d1a3](https://github.com/enjoy-digital/litex/commit/e91d4d1a3)).\n- **build/efinix**                           : Added SEU (Single Event Upset) interface ([PR #2128](https://github.com/enjoy-digital/litex/pull/2128)).\n- **soc/cores/bitbang/i2c**                  : Added `connect_pads` parameter for flexible I2C pad handling ([fdd7c97ce](https://github.com/enjoy-digital/litex/commit/fdd7c97ce)).\n- **platforms/xilinx_zcu102**                : Added all SFP connectors ([0eabebf](https://github.com/litex-hub/litex-boards/commit/0eabebf)).\n- **targets/sipeed_tang_nano_20k**           : Added SPI Flash and HDMI support ([2d25408](https://github.com/litex-hub/litex-boards/commit/2d25408)).\n- **targets/embedfire_rise_pro**             : Added support for EmbedFire Rise Pro ([d7f2b5a](https://github.com/litex-hub/litex-boards/commit/d7f2b5a)).\n- **targets/alibaba_vu13p**                  : Added support for Alibaba VU13P ([e8e833d](https://github.com/litex-hub/litex-boards/commit/e8e833d)).\n- **targets/efinix_ti375_c529_dev_kit**      : Added VexII Ethernet support ([4c61bac](https://github.com/litex-hub/litex-boards/commit/4c61bac)).\n- **targets/efinix_trion_t20_mipi_dev_kit**  : Added simple flash fix ([1727d30](https://github.com/litex-hub/litex-boards/commit/1727d30)).\n- **targets/machdyne_mozart_mx2**            : Added support for Mozart MX2 ([399f10f](https://github.com/litex-hub/litex-boards/commit/399f10f)).\n- **targets/tec0117**                        : Updated to work with Apicula ([9d68972](https://github.com/litex-hub/litex-boards/commit/9d68972)).\n\n[> Changed\n----------\n- **tools/litex_client**                     : Improved GUI presentation and memory region display ([5c156b499](https://github.com/enjoy-digital/litex/commit/5c156b499), [d3258a398](https://github.com/enjoy-digital/litex/commit/d3258a398)).\n- **liteeth/phy/pcs_1000basex**              : Refactored RX Config consistency check and improved timers ([b783639](https://github.com/enjoy-digital/liteeth/commit/b783639), [fe69248](https://github.com/enjoy-digital/liteeth/commit/fe69248)).\n- **liteeth/phy/a7_1000basex**               : Updated ALIGN_COMMA_WORD/RXCDR_CFG settings from Xilinx wizard ([04fc888](https://github.com/enjoy-digital/liteeth/commit/04fc888)).\n- **liteeth/mac/core**                       : Switched to LiteXModule for better modularity ([f30d6ef](https://github.com/enjoy-digital/liteeth/commit/f30d6ef)).\n\n[> 2024.08, released on September 27th 2024\n-------------------------------------------\n\t[> Fixed\n\t--------\n\t- cpu/zynq7000                  : Fixed AXI version to AXI3.\n\t- build/vhd2v_converter         : Fixed instance replace robustness.\n\t- tools/litex_json2renode       : Corrected VexRiscv variants (#1984).\n\t- software/liblitespi           : Fixed xor-used-pow bug (#2001).\n\t- soc                           : Fixed AHB2Wishbone bridge creation (#1998).\n\t- soc                           : Fixed parameters propagation for AXI data-width conversion (#1997).\n\t- soc/cores/clock/colognechip   : Fixed and reworked locked signal handling.\n\t- litesdcard                    : Fixed data_i sampling (https://github.com/enjoy-digital/litesdcard/pull/34).\n\t- litespi/mmap                  : Fixed dummy bits (https://github.com/litex-hub/litespi/pull/71).\n\t- sim/verilator                 : Fixed .fst empty dump with short simulation.\n\n\t[> Added\n\t--------\n\t- cpu/vexiiriscv                : Added initial support (#1923).\n\t- builder                       : Added default generation of exports with default names to output_dir (#1978).\n\t- litex.gen                     : Added byte size definitions and use them in targets/json2dts.\n\t- litepcie                      : Added external QPLL support/sharing for Xilinx Artix7.\n\t- cores/zynq7000/mp             : Improved integration, added peripherals supports (#1994).\n\t- software/bios                 : Generalized IRQ handling approach between CPUs.\n\t- cores/video                   : Added fifo_depth parameter to add_video_framebuffer (#1931).\n\t- gen/common                    : Added byte size definitions (KILOBYTE, MEGABYTE, GIGABYTE).\n\t- tools/litex_json2dts_linux    : Simplified CPU architecture/RISC-V ISA.\n\t- soc                           : Added add_spi_master method (#1985).\n\t- tools/litex_json2dts_zephyr   : Added spimaster/spiflash handlers (#1985).\n\t- tools/litex_json2renode       : Added .elf bios option (#1984).\n\t- cores                         : Added Watchdog core and Zephyr support (#1996).\n\t- soc                           : Added add_spi_ram method (#2028).\n\t- build                         : Added initial Apicula (Gowin) Platform support (#2036).\n\t- build                         : Added initial Agilex5 support.\n\t- liteeth/mac                   : Improved broadcast filtering logic in Hybrid Mode (https://github.com/enjoy-digital/liteeth/pull/165).\n\t- soc/cores/hyperbus            : Rewritten HyperRAM core to enhance performance and add new features (#2053).\n\t- litedram                      : Added bank_byte_alignement parameter for improvded address mapping (https://github.com/enjoy-digital/litedram/pull/360).\n\t- build/efinix                  : Added support for more primitives and improved clocking support. (#2060, #2075).\n\t- software/bios                 : Added spiram support (#2058).\n\t- liteeth/etherbone             : Added 64-bit support to Etherbone.\n\t- liteeth/liteeth_gen           : Added XGMII support (PHY handled externally).\n\t- soc/interconnect/stream       : Added optional CSR to Multiplexer/Demultiplexer and Crossbar module.\n\t- tools/litex_json2dts_zephyr   : Improved support/update ((#1974).\n\t- soc/cores/jtag                : Added Spartan7 support (#2076).\n\t- liteeth/phy                   : Added 1000BASEX support for Virtex7 (https://github.com/enjoy-digital/liteeth/pull/171).\n\t- liteeth/phy                   : Improved RGMII support on Efinix Titanium/Trion (https://github.com/enjoy-digital/liteeth/pull/168).\n\t- liteiclink/serdes             : Added GTH/Virtex7 support (https://github.com/enjoy-digital/liteeth/pull/23).\n\t- litespi/phy                   : Improved logic and cleanup (https://github.com/litex-hub/litespi/pull/73).\n\t- litespi/mmap                  : Added write support for SPIRAM devices (https://github.com/litex-hub/litespi/pull/70).\n\t- build/efinix                  : Improved name elaboration for Signals/Clocks to simplify user design.\n\n\t[> Changed\n\t----------\n\t- integration/builder           : Changed export behavior to now generate csr.csv and csr.json by default to output_dir.\n\t- csr_bus                       : Added .re signal (#1999).\n\n[> 2024.04, released on June 5th 2024\n-------------------------------------\n\t[> Fixed\n\t--------\n\t- integration/soc               : Fixed typo in cpu mem_bus axi-via-wb downconvert\n\t- interconnect/ahb/AHB2Wishbone : Fixed size check that was too restrictive.\n\t- liteeth/phy/gw5rgmii          : Fixed Clk assignments.\n\t- build/efinix/programmer       : Updated for compatibility with latest Efinity versions.\n\t- litespi/software:             : Fixed SPI Flash Clk Divider computation when with L2 Cache.\n\t- litepcie/us(p)pciephy         : Fixed x8 / 256-bit wide case.\n\t- litex_sim/serial2console      : Fixed RX backpressure handling.\n\t- litedram/frontend/avalon      : Fixed and cleaned-up.\n\t- litex_sim/video               : Fixed pixel format to RGBA.\n\t- build/xilinx/common           : Fixed missing clk parameter on XilinxSDRTristateImpl.\n\t- soc/interconnect              : Fixed CSR/LiteXModule issue on WishboneSRAM/AXILiteSRAM.\n\n\t[> Added\n\t--------\n\t- build/openfpgaloader          : Added kwargs support to flash for specific/less common cases.\n\t- cpu/gowin_emcu                : Improved/Cleaned-up.\n\t- interconnect/ahb              : Added data_width/address_width parameters.\n\t- interconnect/ahb              : Added proper byte/sel support to AHB2Wishbone.\n\t- cpu/gowin_ae350               : Added initial support.\n\t- cpu/naxriscv                  : Updated arch definition and added rvc configuration parameters.\n\t- cpu/vexriscv_smp              : Added csr/clint/plic base address configuration parameters.\n\t- liteeth/phy                   : Added 7-Series/Ultrascale(+) 2500BaseX PHYs.\n\t- litespi/sdrphy:               : Allowed flash parameter to be None.\n\t- litespi/integration           : Improved integration and simplifications.\n\t- export/builder                : Added import/merge of Sub-SoCs .json files.\n\t- cpu/vexriscv_smp              : Added reset_address/vector support.\n\t- litex_sim                     : Added jtagremote support.\n\t- soc/add_master                : Added region support to allow/limit access to a specific region.\n\t- litex_json2dts_linux          : Added ip= bootarg when local/remote ips are defined.\n\t- cores/jtag                    : Added JTAGBone support for Zynq.\n\t- cores/ram/lattice_nx          : Improved timings.\n\t- liteeth_gen                   : Added QPLL/BUFH/BUFG parameters for A7 1000BaseX PHY.\n\t- litex_sim                     : Added Video Color Bar support.\n\t- cpu/neorv32                   : Updated to v1.9.7.\n\t- cores/hyperbus                : Added latency configuration and variable latency support.\n\t- cpu/cv32e41p                  : Added ISR support.\n\t- litesdcard                    : Improved SDPHYClocker (Timings).\n\t- cpu/vexriscv_smp              : Added baremetal IRQ support.\n\t- cpu/naxriscv                  : Added baremetal IRQ support.\n\t- cpu/zynqmp                    : Added Ethernet, UART, I2C support and improved AXI Master.\n\t- build/efinix                  : Added reconfiguration interface support.\n\t- build/efinix                  : Added tx_output_load configuration support.\n    - cpu/eos_s3                    : Updated qlal4s3b_cell_macro clock and reset signals.\n    - build/quicklogic              : Updated f4pga Makefile.\n    - build/microsemi               : Updated libero_soc toolchain.\n\n\t[> Changed\n\t----------\n\n[> 2023.12, released on December 25th 2023\n------------------------------------------\n\t[> Fixed\n\t--------\n\t- liteeth/arp           : Fixed response on table update.\n\t- litesata/us(p)sataphy : Fixed data_width=32 case.\n\t- clock/lattice_ecp5    : Fixed phase calculation.\n\t- interconnect/axi      : Fixed AXILite2CSR read access (1 CSR cycle instead of 2).\n\n\t[> Added\n\t--------\n\t- cpu/naxriscv          : Added SMP support.\n\t- cpu/neorv32           : Added Debug support and update core complex.\n\t- cpu/vexriscv_smp      : Added hardware breakpoints support.\n\t- build/colognechip     : Added initial support.\n\t- soc/cores/video       : Added VTG/DMA synchronization stage to VideoFramebuffer.\n\t- litepcie/dma          : Improved LitePCIeDMADescriptorSplitter timings.\n\t- interconnect/wishbone : Added linear burst support to DownConverter.\n\t- integration/SoC       : Added with_jtagbone/with_uartbone support.\n\t- soc/cores             : Added Ti60F100 HyperRAM support.\n\t- build/xilinx          : Added initial OpenXC7 support (and improved Yosys-NextPnr).\n\t- build/efinix          : Added JTAG-UART/JTAGBone support.\n\t- interconnect/wishbone : Added byte/word addressing support.\n\t- cores/uart            : Added 64-bit addressing support to Stream2Wishbone.\n\t- tools                 : Added 64-bit addressing support to litex_server/client.\n\t- cores/cpu             : Added 64-bit support to CPUNone.\n\t- cores/cpu             : Added KianV (RV32IMA) initial support.\n\t- litedram              : Added initial GW5DDRPHY (compiles but not yet working).\n\t- build/gowin           : Added GowinTristate implementation.\n\t- litepcie              : Simplify/Cleanup Ultrascale(+) integration and allow .xci generation from .tcl.\n\t- litepcie              : Initial 64-bit DMA suppport.\n\t- bios                  : Added bios_format / --bios-format to allow enabling float/double printf.\n\t- soc/cores/clock       : Added proper clock feedback support on Efinix TRIONPLL/TITANIUMPLL.\n\t- liteiclink/phy        : Added Efinix support/examples on Trion/Titanium.\n\t- liteiclink/serwb      : Reused Etherbone from LiteEth to avoid code duplication.\n\t- interconnect          : Added 64-bit support to Wishbone/AXI-Lite/AXI.\n\t- jtag                  : Fixed firmware upload over JTAG-UART.\n\t- jtag                  : Improved speed (~X16) on JTABone/JTAGUART on all supported devices (Xilinx, Altera, Efinix, etc...)\n\t- litesata/phy          : Added GTHE4 support on Ultrascale+.\n\t- litex_boards          : Added Machdyne's Mozart with the Sechzig ML1 module support.\n\t- liteiclink            : Added clk_ratio of 1:2, 1:4 on Efinix/SerWB to make clocking more flexible.\n\n\t[> Changed\n\t----------\n\t- build/osfpga          : Removed initial support (would need feedbacks/updates).\n\t- python3               : Updated minimum python3 version to 3.7 (To allow more than 255 arguments in functions).\n\n[> 2023.08, released on September 14th 2023\n-------------------------------------------\n\n\t[> Fixed\n\t--------\n\t- lattice/programmer  : Fixed ECPDAP frequency specification.\n\t- soc/add_spi_sdcard  : Fixed Tristate build.\n\t- csr/fields          : Fixed access type checks.\n\t- software/liblitespi : Fixed support with debug.\n\t- cpu/vexriscv_smp    : Fixed compilation with Gowin toolchain (ex for Tang Nano 20K Linux).\n\t- liteiclink/serwb    : Fixed 7-Series initialization corner cases.\n\t- liteeth/core/icmp   : Fixed length check on LiteEthICMPEcho before passing data to buffer.\n\t- LiteXModule/CSR     : Fixed CSR collection order causing CSR clock domain to be changed.\n\t- litepcie/US(P)      : Fixed root cause of possible MSI deadlock.\n\t- soc/add_uart        : Fixed stub behavior (sink/source swap).\n\t- build/efinix        : Fixed AsyncFIFO issues (Minimum of 2 buffer stages).\n\t- software/gcc        : Fixed Ubuntu 22.04 GCC compilation issues.\n\t- build/efinix        : Fixed hardcoded version.\n\t- litedram/gw2ddrphy  : Fixed latencies and tested on Tang Primer 20K.\n\n\t[> Added\n\t--------\n\t- soc/cores/video              : Added low resolution video modes.\n\t- interconnect                 : Added initial AvalonMM support.\n\t- soc/interconnect/packet      : Avoided bypass of dispatcher with a single slave.\n\t- build/add_period_constraints : Improved generic platform and simplify specific platforms.\n\t- gen/fhdl/verilog             : Added parameter to avoid register initialization (required for ASIC).\n\t- litedram                     : Added clamshell topology support.\n\t- stream/Pipeline              : Added dynamic pipeline creation capability.\n\t- build/xilinx/vivado          : Added project commands to allow adding commands just after project creation.\n\t- soc/software                 : Moved helpers to hw/common.h.\n\t- tools/litex_json2dts_linux   : Added sys_clk to device tree and fixed dts warning.\n\t- tools/litex_json2dts_zephyr  : Added LiteSD defines.\n\t- build/yosys                  : Added quiet capability.\n\t- build/efinix                 : Improved Titanium support (PLL, DRIVE_STRENGTH, SLEW).\n\t- build/openfpgaloader         : Added -fpga-part and -index-chain support.\n\t- soc/add_spi_flash            : Added software_debug support.\n\t- software/liblitespi          : Added read_id support.\n\t- litex_boards                 : Added QMtech XC7K325T, VCU128, SITLINV_STVL7325_V2, Enclustra XU8/PE3 support.\n\t- liteeth                      : Added Ultrascale+ GTY/GTH SGMII/1000BaseX PHYs.\n\t- soc/add_pcie                 : Added msi_type parameter to select MSI, MSI-Multi-Vector or MSI-X.\n\t- soc/add_pcie                 : Added msi_width parameter to select MSI width.\n\t- litepcie                     : Added 7-Series MSI-X capability/integration.\n\t- liteiclink                   : Improved GTH3/GTH4 support and similarity with Wizard's generated code.\n\t- liteeth_gen                  : Added SGMII/1000BaseX PHYs support.\n\t- litesata/dma                 : Added multi-sector support.\n\t- liteeth/mac                  : Added TX Slots write-only mode for improved resource usage when software does not read buffer.\n\t- liteeth/core                 : Added DHCP support for CPU-less hardware stack.\n\t- liteeth/core/icmp            : Added fifo_depth parameter on LiteEthICMPEcho.\n\t- gen/fhdl/verilog             : Improved signal sort by name instead of duid to improve reproducibility.\n\t- litedram/frontend/dma        : Added last generation on end of DMA for LiteDRAMDMAReader.\n\t- litepcie/frontend/dma        : Added optional integrated data-width converter and data_width parameters to simplify integration/user logic.\n\t- soc/add_uartbone/sata/sdcard : Added support for multiple instances in gateware as for the other cores.\n\t- liteeth_gen                  : Added raw UDP port support.\n\t- build/vivado                 : Added .dcp generation also after synthesis and placement.\n\t- gen:                         : Added initial LiteXContext to easily get build properties (platform, device, toolchain, etc...)\n\t- litepcie/endpoint/tlp        : Added optional Configuration/PTM TLP support to Packetizer/Depacketizer.\n\t- liteth/arp                   : Added proper multi-entries ARP table.\n\t- liteiclink/serdes            : Added tx/rx_clk sharing capabilities on Xilinx transceivers.\n\t- soc/cores/spi                : Added new SPIMMAP core allowing SPI accesses through MMAP.\n\t- soc/interconnect/stream      : Added pipe_valid/pipe_ready parameters to BufferizeEndpoints.\n\t- soc/cores/clock              : Added initial GW5A support.\n\t- build/efinix                 : Added initial EfinixDDROutput/Input and simplified IOs exclusion.\n\t- soc/interconnect             : Improved DMA Bus to use the same Bus Standard than the CPU DMA Bus.\n\t- liteeth/phy                  : Added Artix7 2500BASE-X PHY.\n\t- liteeth/phy                  : Added Gowin Arora V RGMII PHY (GW5RGMII).\n\t- liteeth/phy                  : Added Titanium RGMII PHY (Tested with Ti60 F225 + RGMII adapter board).\n\t- build/io                     : Added ClkInput/Ouput IO abstraction to simplify some Efinix designs.\n\n\t[> Changed\n\t----------\n\t- litex/gen                    : Added local version of genlib.cdc/misc to better decouple with Migen and prepare Amaranth's compat use.\n\t- soc/add_uartbone             : Renamed name parameter to uart_name (for consistency with other cores).\n\n[> 2023.04, released on May 8th 2023\n------------------------------------\n\n\t[> Fixed\n\t--------\n\t- build/xilinx/vivado : Fixed Verilog include path.\n\t- builder/meson       : Fixed version comparison.\n\t- liblitedram         : Fixed write leveling with x4 modules.\n\t- integration/soc     : Fixed alignment of origin on size.\n\t- litex_sim           : Fixed ram_init.\n\t- libbase/i2c         : Fixed various issues.\n\t- integration/soc     : Fixed/Removed soc_region_cls workaround.\n\t- cores/gpio          : Fixed IRQ generation.\n\t- litex_sim           : Fixed --with-etherbone.\n\t- build/efinix        : Fixed iface.py execution order.\n\t- cpu/Vex/NaxRiscv    : Fixed IRQ numbering (0 reserved).\n\t- cpu/rocket          : Fixed compilation with newer binutils.\n\t- cpu/soc             : Fixed CPU IRQ reservation.\n\t- litepcie/software   : Fixed compilation with DMA_CHECK_DATA commented.\n\t- litedram/dma        : Fixed rdata connection (omit list update since LiteX AXI changes).\n\t- litepcie/US(P)      : Fixed possible MSI deadlock.\n\t- cores/usb_ohci      : Fixed build issue (usb_clk_freq wrapped as int).\n\n\t[> Added\n\t--------\n\t- clock/intel         : Added StratixVPLL.\n\t- cores/dma           : Added FIFO on WishboneDMAReader to pipeline reads and allow bursting.\n\t- liblitedram         : Improved SPD read with sdram_read_spd function.\n\t- bios/liblitedram    : Added utils and used them to print memory sizes.\n\t- build/parser        : Added a method to search default value for an argument.\n\t- litex_setup         : Added Arch Linux RISC-V/OR1K/POWER-PC GCC toolchain install.\n\t- cores/pwm           : Added reset signal (to allow external reset/synchronization).\n\t- cpu/cva6            : Updated.\n\t- cores/prbs          : Improved timings.\n\t- litex_sim           : Allowed enabling SDRAM BIST.\n\t- liblitedram         : Refactored BIST functions and added sdram_hw_test.\n\t- soc/software        : Added extern C (required to link with cpp code).\n\t- cpu/VexRiscv-SMP    : Avoided silent generation failure.\n\t- cores/spi_flash     : Added Ultrascale support.\n\t- clock/gowin_gw1n    : Fixed simulation warnings.\n\t- liblitedram         : Various improvements/cleanups.\n\t- cpu/Naxriscv        : Exposed FPU parameter.\n\t- cores/xadc          : Refactored/Cleaned up.\n\t- cores/dna           : Added initial Ultrascale(+) support and reduced default clk_divider to 2.\n\t- cores/usb_ohci      : Added support for multiple ports.\n\t- litex_cli           : Added binary support for register dump.\n\t- cpu/NaxRiscv        : Enabled FPU in crt0.S.\n\t- core/icap           : Added initial Ultrascale(+) support and clk_divider parameter.\n\t- litex_sim           : Added initial video support.\n\t- soc/add_video       : Added framebuffer region definition.\n\t- litex_term          : Avoided use of multiprocessing.\n\t- cores/esc           : Added initial ESC core with DSHOT 150/300/600 support.\n\t- litex_json2dts      : Allowed/Prepared Rocket support and made it more generic.\n\t- gen/common          : Added Open/Unsigned/Signed signal definition and updated cores to use it.\n\t- global              : Added initial list of sponsors/partners.\n\t- build/xilinx        : Improved Xilinx US/US+ support.\n\t- build/platform      : Added get_bitstream_extension method.\n\t- cpu/VexRiscvSMP     : Added standard variant.\n\t- cpu/cva6            : Added 32-bit variant support and various improvements.\n\t- clock/gowin         : Added GW2AR support.\n\t- build/efinix        : Added option to select active/passive SPI mode.\n\t- cores/bitbang       : Added documentation.\n\t- litex_term          : Improved connection setup.\n\t- clock/gowin         : Improved VCO config computation and added CLKOUTP/CLKOUTD/CLKOUTD3 support.\n\t- cpu/rocket          : Reworked variants.\n\t- liblitesdcard       : Avoided use of stop transmission for writes when only one block.\n\t- installation        : Simplified/Improved ci.yml/MANIFEST.in/setup.py.\n\t- cores/pwm           : Added MultiChannelPWM support.\n\t- soc/add_pcie        : Exposed more DMA parameters.\n\t- litepcie/dma        : Improved LitePCIeDMAStatus timings.\n\t- litepcie_gen        : Exposed 64-bit support.\n\t- litepcie/dma        : Better configuration decoupling between DMAWriter/Reader.\n\t- litepcie/dma        : Allowed software to get DMA status.\n\t- litepcie/phy        : Replaced Xilinx generated core on 7-series Verilog with Migen/LiteX code.\n\t- litepcie/msi        : Improved MSI filtering.\n\t- litepcie_gen        : Added MSI rate limiting on Ultrascale(+) to avoid stall issues.\n\t- liteiclink/prbs     : Improved PRBS RX timings.\n\t- liteiclink/gty/gth  : Added power-down signal on GTYQuadPLL and GTHQuadPLL.\n\t- litelclink/gty/gth  : Integrated 7-series improvements.\n\t- litelclink/gty/gth  : Added DRP interface on QuadPLL.\n\t- litedram/bist       : Ensured proper completion of writes.\n\t- litedram/bist       : Replicated data for large data-width.\n\t- litedram/ci         : Allowed tests to run in parallel.\n\t- litedram/gw2ddrphy  : Improvements to remove warnings in simulation.\n\t- liblitespi/spiflash : Add erasee and write functions.\n\t- liblitespi/Spiflash : Add write from sdcard file function.\n\n\t[> Changed\n\t----------\n\t- builder/export      : Added soc-csv/-json/--svd arguments (in addition to csr-xy).\n\t- litepcie/phy        : Retained only Gen3/4 support and removed Gen2.\n\n[> 2022.12, released on January 2th 2023\n----------------------------------------\n\n\t[> Fixed\n\t--------\n\t- bios                              : Fix missing CONFIG_BIOS_NO_DELAYS update.\n\t- axi/AXIDownConverter              : Fix unaligned accesses.\n\t- cpu/rocket                        : Fix fulld/fullq variants typos.\n\t- cores/video                       : Fix red/blue channel swap (and apply similar changes to litex_boards).\n\t- software/demo                     : Fix compilation with Nix.\n\t- cpu/cv32e41p                      : Fix IRQs.\n\t- interconnect/csr                  : Allow CSR collection at the top-level.\n\t- interconnect/csr                  : Fix CSR with 64-bit bus width.\n\t- build/sim                         : Disable more useless warnings (-Wno-COMBDLY and -Wno-CASEINCOMPLETE).\n\t- intel                             : Fix constraints issues preventing the build with some boards/versions.\n\t- axi/axi_lite                      : Fix combinatorial loop on ax.valid/ax.ready.\n\t- soc/cores/video/VideoS7GTPHDMIPHY : Fix typo.\n\t- integration/export                : Fix CSR base address definition when with_csr_base_define=False.\n\n\n\t[> Added\n\t--------\n\t- soc                        : Add new \"x\" (executable) mode to SoCRegion.\n\t- cpu/NaxRiscv               : Update to latest and add parameters.\n\t- soc                        : Propagate address_width on dynamically created interfaces.\n\t- get_mem_data               : Add data_width support.\n\t- cores/dma                  : Allow defining ready behavior on idle.\n\t- axi                        : Improvements/Simplifications.\n\t- axi_stream                 : Improvements/Simplifications.\n\t- yosys_nextpnr              : Add flow3 option to abc9 mode.\n\t- yosys_nextpnr              : Refactor args.\n\t- vivado                     : Allow directive configuration.\n\t- jtag                       : Add Efinix JTAG support.\n\t- clock/intel                : Improve pll calculation.\n\t- stream/ClockDomainCrossing : Expose buffered parameter.\n\t- tools/remote               : Add Etherbone packets retransmisson.\n\t- build                      : Add VHDL2VConverter to simplify GHDL->Verilog conversion.\n\t- cpu/microwatt              : Switch to VHDL2VConverter.\n\t- cpu/neorv32                : Switch to VHDL2VConverter.\n\t- axi                        : Differentiate AXI3/AXI4.\n\t- stream/Monitor             : Add packet count and add reset/latch control from logic.\n\t- spi                        : Create spi directory and integrate SPIBone + improvements.\n\t- interconnect/csr           : Add optional fixed CSR mapping.\n\t- fhdl/verilog               : Improve code presentation/attribute generation.\n\t- gen/common                 : Add new LiteXModule to simplify user designs and avoid some Migen common issues.\n\t- soc/SoCBusHandler          : Integrate interconnect code to simplify reuse.\n\t- gen/common                 : Add reduction functions.\n\t- vhd2v                      : Use GHDL directly (Instead of GHDL + Yosys).\n\t- cpu/openc906               : Update, add more peripherals to mem_map and add debug variant.\n\t- soc/software/i2c           : Add non 8bit i2c mem address support.\n\t- gen/fhdl                   : Add LiteXHierarchyExplorer to generate SoC hierarchy.\n\t- gen/fhd                    : Add timescale generation.\n\t- build                      : Add LitexArgumentParser to customize/simplify argument parsing.\n\t- json2renode                : Update.\n\t- logging                    : Allow logging level to be configured from user scripts.\n\t- soc/cores/cpu              : Allow enabling/disabling reset address check.\n\t- integration/export         : Directly generate extract/replace mask from Python.\n\t- cpu/zync7000               : Add axi_gp_slave support.\n\n\t[> Changed\n\t----------\n\t- ci       : Bump to Ubutu 22.04.\n\t- soc_core : Move add_interrupt/add_wb_master/add_wb_slave/register_mem/register_rom to compat.\n\t- software : Do not build software as PIE.\n\t- ci       : Add microwatt/neorv32 test + requirements (GHDL).\n\t- ci       : Switch GCC toolchain installs to distro install.\n\n\n[> 2022.08, released on September 12th 2022\n-------------------------------------------\n\n\t[> Fixed\n\t--------\n\t- cpu/vexriscv:               Fix compilation with new binutils.\n\t- soc/LiteXSocArgumentParser: Fix --cpu-type parsing.\n\t- litex_sim:                  Fix --with-ethernet.\n\t- liblitesdcard:              Fix SDCard initialization corner cases.\n\t- liblitedram:                Enable sdram_init/mr_write for SDRAM.\n\t- export/get_memory_x:        Replace SPIFlash with ROM.\n\t- soc/cores/video:            Fix operation with some monitors (set data to 0 during blanking).\n\t- tools/remote/comm_usb:      Fix multi-word reads/writes.\n\t- build/lattice/oxide:        Fix ES posfix on device name.\n\t- interconnect/axi:           Fix AXIArbiter corner case.\n\t- litex_server/client:        Fix remapping over CommPCIe.\n\t- LitePCIe:                   Fix LiteUART support with multi-boards.\n\n\t[> Added\n\t--------\n\t- litex_setup:            Add -tag support for install/update.\n\t- tools:                  Add initial LiteX standalone SoC generator.\n\t- cores/ram:              Add Xilinx's FIFO_SYNC_MACRO equivalent.\n\t- LitePCIe:               Always use 24-bit depth fields on LitePCIeBuffering to simplify software.\n\t- gen/fhdl:               Integrate Migen namer to give us more flexibility.\n\t- fhdl/memory:            Prefix memory files with build name to simplify reuse/integration.\n\t- cpu/rocket:             Add more variants.\n\t- cores/video:            Enable driving both + and - diff outs to compensate hardware issues.\n\t- build:                  Add intial OSFPGA Foedag/Raptor build backend.\n\t- cpu/cva5:               Add initial CVA5 CPU support (ex Taiga).\n\t- LiteSATA:               Add IRQ and Identify support.\n\t- clock/intel:            Improve to find the best PLL config.\n\t- cpu/cva6:               Add initial CVA6 CPU support (ex Ariane).\n\t- bios:                   Improve config flags.\n\t- tools:                  Add I2s/MMCM support to litex_json2dts_zephyr.\n\t- clock/gowin:            Add GW2A support.\n\t- bios:                   Disable LTO (does not work in all cases, needs to be investigated).\n\t- CI:                     Test more RISC-V CPUs and OpenRisc CPUs in CI.\n\t- bios:                   Add CONFIG_NO_BOOT to allow disabling boot sequence.\n\t- export:                 Allow disabling CSR_BASE define in csr.h.\n\t- build/openocd:          Update for compatibility with upstream OpenOCD.\n\t- cpu/openc906:           Add initial OpenC906 support (open version of the Allwinner's D1 chip).\n\t- soc:                    Add automatic bridging between AXI <-> AXI-Lite <-> Wishbone.\n\t- soc:                    Add AXI-Full bus support.\n\t- interconnect:           Add AXI DownConverted and Interconnect/Crossbar.\n\t- interconnect:           Create axi directory and split code.\n\t- soc:                    Modify SoC finalization order for more flexibility.\n\t- soc:                    Add --bus-interconnect parameter to select interconect: shared/crossbar.\n\t- valentyusb:             Package and install it with LiteX.\n\t- bios/mem_list:          Align Mem Regions.\n\t- build:                  Introduce GenericToolchain to cleanup/simplify build backends.\n\t- soc/etherbone:          Expose broadcast capability.\n\t- build/lattice:          Add MCLK frequency support.\n\t- cpu/cva6:               Add IRQ support.\n\t- cores/clock:            Add manual placement support to ECP5PLL.\n\t- cores/leds:             Add polarity support.\n\t- cpu/neorv32:            Switch to new NeoRV32 LiteX Core Complex and add variants support.\n\t- cores/gpio:             Add optional reset value.\n\t- litex_client:           Add --host support for remote operation.\n\t- sim/verilator:          Add jobs number support (to limit RAM usage with large SoCs/CPUs).\n\t- soc/SocBusHandler       Add get_address_width method to simplify peripheral integration.\n\t- bios:                   Expose BIOS console parameters (to enable/disable history/autocomplete).\n\t- bios:                   Expose BIOS LTO configuration.\n\t- litex_json2renode:      Update.\n\t- build:                  Introduce YosysNextPNRToolchain to cleanup/simplify Yosys support.\n\t- bios:                   Add buttons support/command.\n\t- litex_client:           Add XADC/Identifier/Leds/Buttons support to GUI.\n\t- cpu/NaxRiscv:           Update.\n\t- build/generic_platofrm: Add add_connector methode to allow extending connectors.\n\t- litex_server/client:    Add initial information exchange between server/client.\n\t- LitePCIe:               Improve 64-bit support.\n\t- interconnect/axi:       Add missing optional signals.\n\t- interconnect/wishbone:  Improve DownConverter efficiency.\n\n\t[> Changed\n\t----------\n\t- LiteX-Boards : Remove short import support on platforms/targets.\n\t- tools:         Rename litex_gen to litex_periph_gen.\n\t- LiteX-Boards:  Only generate SoC/Software headers when --build is set\n\t- Symbiflow:     Rename to F4PGA.\n\t- mkmsscimg:     Rename to crcfbigen.\n\n[> 2022.04, released on May 3th 2022\n------------------------------------\n\n\t[> Fixed\n\t--------\n\t- software/bios/mem_write: Fix write address increment.\n\t- software/liblitedram:    Improve calibration corner case on 7-series (SDRAM_PHY_DELAY_JUMP).\n\t- software/liblitedram:    Fix delay reconfiguration issue on ECP5/DDR3.\n\t- cores/jtag:              Fix chain parameter on XilinxJTAG.\n\t- soc/arguments:           Fix l2_size handling.\n\t- cpu/vexriscv_smp:        Fix pbus_width when using direct LiteDRAM interface.\n\t- libbase/i2c/i2c_poll:    Also check for write in i2c_scan (some chips are write only).\n\t- build/vivado:            Fix timing constraints application on nets/ports.\n\n    [> Added\n\t--------\n\t- litex_setup:        Add minimal/standard/full install configs.\n\t- soc/arguments:      Improve default/help, add parser groups.\n\t- LiteSPI/phy:        Simplify integration on targets.\n\t- openocd/stream:     Simplify ECP5 JTAG-UART/JTAGBone use.\n\t- tools/litex_cli:    Allow passing reg name to --read/--write.\n\t- soc/add_spi_sdcard: Allow optional Tristate (useful on ULX3S).\n\t- software/bios:      Add new mem_cmd memory comparison command.\n\t- cpu/rocket:         Increase IRQ lines to 8.\n\t- cpu/serv:           Add MDU support.\n\t- cpu/marocchino:     Add initial support.\n\t- cpu/eos_s3:         Add LiteX BIOS/Bare Metal software support.\n\t- litex_sim:          Add .json support for --rom/ram/sdram-init.\n\t- soc/add_uart:       Allow multiple UARTs in the same design.\n\t- cores/cpu:          Add out-of-tree support.\n\t- build/xilinx:       Add initial Yosys/NextPnr support on Artix7 (and Zynq7000 with Artix7 fabric).\n\t- add_source:         Add optional copy to gateware directory.\n\t- cores/jtag:         Add initial JTAG-UART/JTAGBone Altera/Intel support.\n\t- LiteScope:          Add Samplerate support.\n\t- cores/bitbang:      Add optional I2C initialization by CPU.\n\t- libliteeth/tftp:    Add blocksize support an increase to 1024 bytes (allow 64MB filesize).\n\t- soc/add_sdram:      Make AXI integration more flexible (remove some specific Rocket hardcoding).\n\t- cpu/neorv32:        Add initial support (RV32I, VHDL converted to Verilog through GHDL-Yosys-synth).\n\t- cpu/naxriscv:       Add initial support (RV32IMA & RV64IMA, already able to run Linux).\n\t- interconnect/axi:   Add AXI UpConverter.\n\t- soc/add_sdram:      Allow data_width upconversion directly on AXI (avoid switching to Wishbone).\n\t- bios/memtest:       Optimize memspeed loop for better accuracy.\n\t- build/sim:          Allow custom modules to be in custom path.\n\t- build/OpenFPGA:     Add initial OpenFPGA build backend (Currently targeting SOFA chips).\n\t- build/efinix:       Add initial MIPI TX/RX support (and test on Trion/Titanium).\n\t- cores/video:        VTG improvements to support more Video chips.\n\t- cores/xadc:         Improve Zynq Ultrascale+ support.\n\t- LiteScope:          Optimize waveform upload speed.\n\t- LitePCIe:           Add LTSSM tracer capability to debug PCIe bringup issues.\n\t- cores/hyperbus:     Refactor core and improve performances (Automatic burst detection).\n\t- cores/jtag:         Add Zynq UltraScale+.\n\t- cores/ram:          Add Ultrascale+ HBM2 wrapper.\n\t- litex_json2renode:  Improve and add support for more CPUs.\n\t- cores/cpu:          Add initial FireV support.\n\t- litex_cli:          Add --csr-csv support and minimal GUI (based on DearPyGui).\n\t- litescope_cli:      Add minimal GUI (based on DearPyGui).\n\t- build/gowin:        Add powershell support.\n\t- LitePCIe:           Add initial 64-bit addressing support (Only for 64-bit datapath for now).\n\t- software/bios:      Add Main RAM test (when not pre-initialized).\n\t- build/trellis:      Enable bitstream compression on ECP5 by default.\n\t- soc/add_etherbone:  Increase buffer_depth to 16 (to improve etherbone bursting).\n\t- builder:            Add get_bios_filename/get_bitstream_filename methods to simplify targets.\n\t- cpu/vexriscv_smp:   Re-integrate Linux-on-LiteX−VexRiscv specific changes/mapping.\n\t- tools/litex_sim:    Allow RAM/SDRAM initialization from .json files (similar to hardware).\n\t- soc/cpu:            Expose optional CPU configuration parameters to users (ex VexRiscv-SMP/NaxRiscv).\n\t- soc:                Improve logs.\n\t- build/Efinix:       Add Atmel programmer.\n\t- stream/cdc:         Add optional common reset.\n\t- LiteDRAM:           Decouple DQ/DQS widths on S7DDRPHY.\n\t- cores/ws2812:       Improve timings at low sys_clk_freq.\n\t- soc/builder:        Add --no-compile (similar to --no-compile-gateware --no-compile-software).\n\t- software/demo:      Add --mem parameter to allow compilation for execution in ROM/RAM.\n\t- cpu/naxrsicv:       Add JTAG debug support.\n\t- cores/usb_fifo:     Re-implement FT245PHYSYnchronous.\n\t- cores/jtag:         Add JTAGBone/JTAG-UART support on Zynq/ZynqMP.\n\t- interconnect/sram:  Add SRAM burst support.\n\t- liblitesata:        Improve SATA init.\n\t- soc/cpu:            Improve command line listing.\n\t- soc/cores/uart:     Decouple data/address width on Stream2Wishbone.\n\n\t[> Changed\n\t----------\n\t- Fully deprecate SoCSDRAM/SPIFlash core (replaced by LiteSPI).\n\t- UART \"bridge\" name deprecated in favor of \"crossover\" (already supported).\n\t- \"external\" CPU class support deprecated (replaced by out-of-tree support).\n\t- lxterm/lxserver/lxsim short names deprecated (used long litex_xy names).\n\t- Deprecate JTAG-Atlantic support (Advantageously replaced by JTAG-UART).\n\n[> 2021.12, released on January 5th 2022\n----------------------------------------\n\n\t[> Fixed\n\t--------\n\t- software/linker:      Fix initialized global variables.\n\t- build/xilinx:         Fix Ultrascale SDROutput/Input.\n\t- cpu/rocket/crt0.s:    Fix alignements.\n\t- core/video:           Fix missing ClockDomainsRenamer in specific DRAM's width case.\n\t- mor1kx:               Fix --cpu-type=None --with-ethernet case.\n\t- build/lattice:        Fix LatticeiCE40SDROutputImpl.\n\t- soc/interconnect/axi: Fix 4KB bursts.\n\n\t[> Added\n\t--------\n\t- integration/builder:      Check if full software re-build is required when a CPU is used.\n\t- cores/clock:              Add Gowin PLL support.\n\t- build/gowin:              Add initial HyperRam support.\n\t- build/gowin:              Add differential Input/Output support.\n\t- build/lattice:            Add DDRTristate support.\n\t- cores/gpio:               Add external Tristate support.\n\t- tools/json2dts:           Make it more generic (now also used with OpenRisc/Mor1kx).\n\t- cpu/rocket:               Add SMP support (up to quad-core).\n\t- software/bios/boot:       Allow frame reception to time out (for litex_term auto-calibration).\n\t- tools/litex_term:         Add automatic settings calibration and --safe mode.\n\t- build/quicklogic:         Add initial support.\n\t- cores/icap/7-Series:      Add register read capability.\n\t- cores/video:              Add RGB565 support to VideoFrameBuffer.\n\t- soc:                      Raise custom SoCError Exception and disable traceback/exception.\n\t- soc/add_pcie:             Automatically set Endpoint's endianness to PHY's endianness.\n\t- build/efinix:             Add initial Trion and Titanium support.\n\t- fhdl/verilog:             Cleanup/Simplify verilog generation.\n\t- fhdl/memory:              Cleanup/Simplify and add support for Efinix case.\n\t- cpu/ibex:                 Add interrupt support.\n\t- tools/litex_client:       Add --length parameter for MMAP read accesses.\n\t- software/bios/cpu:        Add CPU tests in CI.\n\t- litex_sim/xgmii_ethernet: Improve models.\n\t- litex_setup:              Cleanup/Simplify and switch to proper \"--\" commands (with retro-compat).\n\t- cores/jtag:               Add ECP5 support.\n\t- cores/led:                Add WS2812/NeoPixel core.\n\t- cpu/femtorv:              Finish integration and add variants support.\n\t- cpu/eos-s3:               Add initial support.\n\t- build/anlogic:            Add initial support.\n\t- cpu/microwatt:            Add Xilinx multiplier support.\n\t- cpu/vexriscv/cfu:         Improve integration.\n\t- soc/interconnect:         Add initial AHB support (AHB2Wishbone).\n\t- cpu/gowin_emcu:           Add initial Gowin EMCU support.\n\t- cpu/zynq7000:             Add initial BIOS/software support.\n\t- cpu/zynq7000:             Add TCL support.\n\t- core/prbs:                Add error behaviour configuration on saturation.\n\t- software/bios:            Add write size option to mem_write cmd.\n\t- LitePCIe/phy:             Cleanup 7-Series PHY integration.\n\t- LitePCIe/dma              Add LitePCIeDMAStatus module.\n\t- LitePCIe/software:        Improve kernel/user-space utilities.\n\t- LiteDRAM/litedram_gen:    Improve ECP5 support.\n\t- LiteDRAM/phy:             Add initial LPDDR5 support.\n\t- LiteDRAM/frontend:        Refactor DRAM FIFO and add optional bypass mode.\n\t- LiteEth/core:             Add 32-bit/64-bit datapath support.\n\t- LiteEth/phy:              Add 10Gbps / Xilinx XGMII support.\n\t- LiteEth/phy:              Add 1Gbps  / Efinix RGMII support.\n\t- LiteSPI/phy:              Simplify SDR/DDR PHYs.\n\t- LiteHyperBus:             Add 16-bit support.\n\n\t[> Changed\n\t----------\n\t- software: Replace libbase with picolibc (new requirements: meson/ninja).\n\t- amaranth: Switch from nMigen to Amaranth HDL.\n\n[> 2021.08, released on September 15th 2021\n-------------------------------------------\n\n\t[> Fixed\n\t--------\n\t- wishbone/UpConverter: Fix SEL propagation.\n\t- cores/i2s:            Fix SYNC sampling.\n\t- BIOS/lib*:            Fix GCC warnings.\n\t- cpu/software:         Fix stack alignment issues.\n\t- cpu/blackparrot:      Fix integration.\n\t- interconnect/axi:     Fix valid signal in connect_to_pads for axi lite.\n\t- software/hw/common:   Fix _csr_rd_buf/_csr_wr_buf for sizeof(buf[0]) < CSR_DW_BYTES case.\n\t- software/soc.h:       Fix interoperability with assembly.\n\t- interconnect/stream:  Fix n=1 case on Multiplexer/Demultiplexer.\n\t- interconnect/axi:     Fix BURST_WRAP case on AXIBurst2Beat.\n\t- cpu/VexRiscv-SMP:     Fix build without a memory bus.\n\t- cpu/software:         Fix CLANG detection.\n\t- build/software:       Force a fresh software build when cpu-type/variant is changed.\n\t- cores/uart:           Fix TX reset level.\n\t- BIOS:                 Fix PHDR link error.\n\t- BIOS:                 Fix build-id link error.\n\t- LiteDRAM:             Fix Artix7/DDR3 calibraiton at low speed.\n\n\t[> Added\n\t--------\n\t- cores/video:               Add 7-Series HDMI PHY over GTPs.\n\t- cores/jtagbone:            Allow JTAG chain selection.\n\t- programmer:                Add iCESugar programmer.\n\t- cpu/vexriscv:              Add CFU support.\n\t- soc/controller:            Add separate SoC/CPU reset fields.\n\t- BIOS/liblitedram:          Add debug capabilities, minor improvements.\n\t- cpu/femtoRV:               Add initial FemtoRV support.\n\t- cores/uart:                Cleaned-up, Add optional TX-Flush.\n\t- cores/usb_ohci:            Add initial SpinalHDL's USB OHCI support (integrated in Linux-on-LiteX-Vexriscv).\n\t- stream:                    Add Gate Module.\n\t- soc/builder:               Allow linking external software packages.\n\t- soc/software:              Allow registering init functions.\n\t- cores/ram:                 Add init support to Nexus LRAM.\n\t- cores/spi:                 Add Manual CS Mode for bulk transfers.\n\t- cores/VexRiscv-SMP:        Make [ID]TLB size configurable.\n\t- dts:                       Add GPIO IRQ support.\n\t- programmer/DFUProg:        Allow to specify alt interace and to not reboot.\n\t- cores/clock/ecp5:          Add dynamic phase adjustment signals.\n\t- tools/litex_sim:           Mode SDRAM settings to LiteDRAM's DFI model.\n\t- build/gowin:               Add AsyncResetSynchronizer/DDRInput/DDROutput implementations.\n\t- build/gowin:               Add On-Chip-Oscillator support.\n\t- build/gowin:               Add initial timing constraints support.\n\t- build/attr_translate:      Simplify/Cleanup.\n\t- programmer/OpenFPGALoader: Add cable and freq options.\n\t- interconnect/packet:       Improve PacketFIFO to handle payload/param separately.\n\t- clock/ecp5:                Add 4-output support.\n\t- LiteSPI:                   Simplified/Cleaned-up, new MMAP architecture, applied to LiteX-Boards.\n\t- soc:                       Add LiteSPI integration code.\n\t- LitePCIe:                  DMA/Controller Simplified/Cleaned-up.\n\t- soc/add_cpu:               Add memory mapping overrides to build log and make an exception for the CPUNone case.\n\t- programmer:                Add ECPprogProgrammer.\n\t- soc/software:              Add Random access option to memtest.\n\t- tools:                     Add Renode generator script.\n\t- tools:                     Add Zephyr DTS generator script.\n\t- build/io:                  Add DDRTristate.\n\t- cpu/VexRiscv:              Restructure config flags for dcache/icache presence.\n\t- litex_sim:                 Improve RAM/SDRAM integration and make it closer to LiteX-Boards targets.\n\t- build/sim:                 Add ODDR/IDDR/DDRSTristate simulation models.\n\t- litex_sim:                 Add SPIFlash support.\n\t- LiteSPI:                   Add DDR support and integration in LiteX (rate=1:1, 1:2).\n\t- build/Vivado:              Make pre_synthesis/placement/routing commands similar to platform_commands.\n\t- LiteDRAM:                  Refactor C code generator.\n\t- LiteDRAM:                  Improve LPDDR4 support.\n\t- LiteDRAM:                  Reduce ECC granularity.\n\n\t[> Changed\n\t----------\n\t- soc_core: --integrated-rom-file argument renamed to --integrated-rom-init.\n\n\n[> 2021.04, released on May 3th 2021\n------------------------------------\n\n\t[> Fixed\n\t--------\n\t- litex_term:         Fix Windows/OS-X support.\n\t- soc/USB-ACM:        Fix reset clock domain.\n\t- litex_json2dts:     Various fixes/improvements.\n\t- cores/clock:        Fix US(P)IDELAYCTRL reset sequence.\n\t- cpu/Vexriscv:       Fix Lite variant ABI (has multiplier so can use rv32im).\n\t- BIOS:               Fix various compiler warnings.\n\t- LiteSDCard:         Fix various issues, enable multiblock reads/writes and improve performance.\n\t- CSR:                Fix address wrapping within a CSRBank.\n\t- soc/add_etherbone:  Fix UDPIPCore clock domain.\n\t- stream/Gearbox:     Fix some un-supported cases.\n\t- cpu/VexRiscv-SMP:   Fix build on Intel/Altera devices with specific RAM implementation.\n\t- timer:              Fix AutoDoc.\n\t- Microwatt/Ethernet: Fix build.\n\t- soc/software:       Link with compiler instead of ld.\n\n\t[> Added\n\t--------\n\t- Lattice-NX:             Allow up to 320KB RAMs.\n\t- BIOS:                   Allow compilation with UART disabled.\n\t- litex_json2dts:         Simplify/Improve and allow VexRiscv/Mor1kx support.\n\t- BIOS/i2c:               Improve cmd_i2c.\n\t- BIOS/liblitedram:       Various improvements for DDR4/LPDDR.\n\t- cores/Timer:            Add initial unit test.\n\t- cores:                  Add initial JTAGBone support on Xilinx FPGAs.\n\t- litex_term:             Improve JTAG-UART support.\n\t- litex_server:           Add JTAGBone support.\n\t- VexRiscv-SMP:           Add --without-out-of-order and --with-wishbone-memory capabilities.\n\t- BIOS:                   Allow specify TRIPLE with LITEX_ENV_CC_TRIPLE.\n\t- litex_client:           Add simple --read/--write support.\n\t- OpenFPGALoader:         Add flash method.\n\t- litex_sim:              Add GTKWave savefile generator.\n\t- litex_term:             Add nios2-terminal support.\n\t- cpu/mor1kx:             Add initial SMP support.\n\t- interconnect/axi:       Add tkeep support.\n\t- cores/gpio:             Add IRQ support to GPIOIn.\n\t- cpu:                    Add initial lowRISC's Ibex support.\n\t- build/xilinx/Vivado:    Allow tcl script to be added as ip.\n\t- cores/uart:             Rewrite PHYs to reduce resource usage and improve readability.\n\t- cores/pwm:              Add configurable default enable/width/period values.\n\t- cores/leds:             Add optional dimming (through PWM).\n\t- soc/add_pcie:           Allow disabling MSI when not required.\n\t- export/svd:             Add constants to SVD export.\n\t- BIOS:                   Allow dynamic Ethernet IP address.\n\t- BIOS:                   Add boot command to boot from memory.\n\t- cores:                  Add simple VideoOut core with Terminal, ColorBards, Framebuffer + various PHYs (VGA, DVI, HDMI, etc...).\n\t- csr/EventSourceProcess: Add rising edge support and edge selection.\n\t- soc/integration:        Cleanup/Simplify soc_core/builder.\n\t- soc/integrated_rom:     Add automatic BIOS ROM resize to minimize blockram usage and improve flexibility.\n\t- interconnect/axi:       Add AXILite Clock Domain Crossing.\n\t- cores/xadc:             Add Ultrascale support.\n\t- soc/add_ethernet:       Allow nrxslots/ntxslots configuration.\n\t- cpu/VexRiscv-SMP:       Integrate FPU/RVC support.\n\t- soc/add_csr:            Add auto-allocation mode and switch to it in LiteX's code base.\n\t- soc/BIOS:               Add method to check BIOS requirements during the build and improve error message when not satisfied.\n\t- LiteEth:                Add initial timestamping support.\n\t- litex_client:           Add optional filter to --regs.\n\t- LiteDRAM:               Add LPDDR4 support.\n\t- BIOS/netboot:           Allow specifying .json file.\n\t- cores/clock:            Add initial Gowin GW1N PLL support.\n\t- LiteSDCard:             Add IRQ support.\n\n\t[> Changed\n\t----------\n\t- platforms/targets: Move all platforms/targets to https://github.com/litex-hub/litex-boards.\n\t- litex_term:        Remove flashing capability.\n\t- cores/uart:        Disable dynamic baudrate by default (Unused and save resources).\n\n[> 2020.12, released on December 30th 2020\n------------------------------------------\n\n\t[> Fixed\n\t--------\n\t- fix SDCard writes.\n\t- fix crt0 .data initialize on SERV/Minerva.\n\t- fix Zynq7000 AXI HP Slave integration.\n\n\t[> Added\n\t--------\n\t- Wishbone2CSR: Add registered version and use it on system with SDRAM.\n\t- litex_json2dts: Add Mor1kx DTS generation support.\n\t- Build: Add initial Radiant support for NX FPGA family.\n\t- SoC: Allow ROM to be optionally writable (for contents overwrite over UARTBone/Etherbone).\n\t- LiteSDCard: Improve BIOS support.\n\t- UARTBone: Add clock domain support.\n\t- Clocking: Uniformize reset on iCE40PLL/ECP5PLL.\n\t- LiteDRAM: Improve calibration and add BIOS debug commands.\n\t- Clocking: Add initial Ultrascale+ support.\n\t- Sim: Allow dynamic enable/disable of tracing.\n\t- BIOS: Improve memtest and report.\n\t- BIOS: Rename/reorganize commands.\n\t- litex_server: Simplify usage with PCIe and add debug parameter.\n\t- LitePCIe: Add Ultrascale(+) support up to Gen3 X16.\n\t- LiteSATA: Add BIOS/Boot integration.\n\t- Add litex_cli to provides common RemoteClient functions: get identifier, dump regs, etc...\n\t- LiteDRAM: Simplify BIST integration.\n\t- Toolchains/Programmers: Improve checks/error reporting.\n\t- BIOS: add leds command.\n\t- SoC: Do a full reset of the SoC on reboot (not only the CPU).\n\t- Etherbone: Improve efficiency/performance.\n\t- LiteDRAM: Improve DDR4/DDR3 calibration.\n\t- Build: Add initial Oxide support for NX FPGA family.\n\t- Clock/RAM: Reorganize for better modularity.\n\t- SPI-OPI: Various improvements for Betrusted.\n\t- litex_json2dts: Improvements to use it with mor1kx and VexRiscv-SMP.\n\t- Microwatt: Add IRQ support.\n\t- BIOS: Add i2c_scan command.\n\t- Builder: Simplify Documentation generation with --doc args on targets.\n\t- CSR: Add documentation to EventManager registers.\n\t- BIOS: Allow disabling timestamp for reproducible builds.\n\t- Symbiflow: Remove workarounds on targets.\n\t- litex_server: Simplify use on PCIe, allow direct CommXY use in scripts to bypass litex_server.\n\t- Zynq7000: Improve PS7 configuration support (now supporting .xci/preset/dict)\n\t- CV32E40P: Improve OBI efficiency.\n\t- litex_term: Improve upload speed with CRC check enabled, deprecate --no-crc (no longer useful).\n\t- BIOS: Add mem_list command to list available memory and use mem_xy commands on them.\n\t- litex_term: Add Crossover and JTAG_UART support.\n\t- Software: Add minimal bare metal demo app.\n\t- UART: Add Crossover+Bridge support.\n\t- VexRiscv-SMP: Integrate AES support.\n\t- LitePCIe: Allow AXI mastering from FPGA (AXI-Lite and Full).\n\t- mor1kx: Add standard+fpu and linux+fpu variants.\n\n\t[> Changed\n\t----------\n\t- BIOS: commands have been renamed/reorganized.\n\t- LiteDRAM: rdcmdphase/wrcmdphase no longer exposed.\n\t- CSR: change default csr_data_width from 8 to 32.\n\n[> 2020.08, released on August 7th 2020\n---------------------------------------\n\n\t[> Fixed\n\t--------\n\t- Fix flush_cpu_icache on VexRiscv.\n\t- Fix `.data` section placed in rom (#566)\n\n\t[> Added\n\t--------\n\t- Properly integrate Minerva CPU.\n\t- Add nMigen dependency.\n\t- Pluggable CPUs.\n\t- BIOS history, autocomplete.\n\t- Improve boards's programmers.\n\t- Add Microwatt CPU support (with GHDL-Yosys-plugin support for FOSS toolchains).\n\t- Speedup Memtest using an LFSR.\n\t- Add LedChaser on boards.\n\t- Improve WishboneBridge.\n\t- Improve Diamond constraints.\n\t- Use InterconnectPointToPoint when 1 master,1 slave and no address translation.\n\t- Add CV32E40P CPU support (ex RI5CY).\n\t- JTAG UART with uart_name=jtag_uart (validated on Spartan6, 7-Series, Ultrascale(+)).\n\t- Add Symbiflow experimental support on Arty.\n\t- Add SDCard (SPI and SD modes) boot from FAT/exFAT filesystems with FatFs.\n\t- Simplify boot with boot.json configuration file.\n\t- Revert to a single crt0 (avoid ctr/xip variants).\n\t- Add otional DMA bus for Cache Coherency on CPU(s) with DMA/Cache Coherency interface.\n\t- Add AXI-Lite bus standard support.\n\t- Add VexRiscv SMP CPU support.\n\n\t[> Changed\n\t----------\n\t- Add --build --load arguments to targets.\n\t- Deprecate soc.interconnect.wishbone.UpConverter (will be rewritten if useful).\n\t- Deprecate soc.interconnect.wishbone.CSRBank (Does not seem to be used by anyone).\n\t- Move soc.interconnect.wishbone2csr.WB2CSR to soc.interconnect.wishbone.Wishbone2CSR.\n\t- Move soc.interconnect.wishbonebridge.WishboneStreamingBridge to soc.cores.uart.Stream2Wishbone.\n\t- Rename --gateware-toolchain target parameter to --toolchain.\n\t- Integrate Zynq's PS7 as a regular CPU (zynq7000) and deprecate SoCZynq.\n\n[> 2020.04, released on April 28th, 2020\n----------------------------------------\n\n\t[> Description\n\t--------------\n\tFirst release of LiteX and the ecosystem of cores!\n\n\tLiteX is a Migen/MiSoC based Core/SoC builder that provides the infrastructure to easily create\n\tCores/SoCs (with or without CPU).\n\n\tThe common components of a SoC are provided directly:\n\t- Buses and Streams (Wishbone, AXI, Avalon-ST)\n\t- Interconnect\n\t- Common cores (RAM, ROM, Timer, UART, etc...)\n\t- CPU wrappers/integration\n\t- etc...\n\tAnd SoC creation capabilities can be greatly extended with the ecosystem of LiteX cores (DRAM,\n\tPCIe, Ethernet, SATA, etc...) that can be integrated/simulated/build easily with LiteX.\n\n\tIt also provides build backends for open-source and vendors toolchains.\n\n\t[> Fixed\n\t--------\n\t- NA\n\n\t[> Added\n\t--------\n\t- NA\n\n\t[> Changed\n\t----------\n\t- https://github.com/enjoy-digital/litex/pull/399: Converting LiteX to use Python modules.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 13.623046875,
          "content": "LiteX ecosystem would not exist without the collaborative work of contributors! Here is below the\nlist of all the LiteX contributors.\n\nIn the source code, each file list the main authors/contributors:\n- author(s) that created the initial content.\n- contributor(s) that added essential features/improvements.\n\nIf you think you should be in this list and don't find yourself, write to florent@enjoy-digital.fr\nand we'll fix it!\n\nContributors:\nCopyright (c) 2021      Acathla-fr <fabien@acathla.tk>\nCopyright (c) 2023      Adam Henault <henault.adam@gmail.com>\nCopyright (c) 2023      AEW2015 <lavatech.co@gmail.com>\nCopyright (c) 2011-2015 Alain Péteut <alain.peteut@yahoo.com>\nCopyright (c) 2022      Alan Green <alan.green@gmail.com>\nCopyright (c) 2023-2024 Alexey Morozov <31707428+alexey-morozov@users.noreply.github.com>\nCopyright (c) 2019      Ambroz Bizjak <ambrop7@gmail.com>\nCopyright (c) 2021      Andreas Galauner <andreas@galauner.de>\nCopyright (c) 2021-2024 Andrew Dennison <andrew.dennison@motec.com.au>\nCopyright (c) 2021-2022 Andrew E Wilson <lavatech.co@gmail.com>\nCopyright (c) 2021      Andy Kitchen <kitchen.andy+git@gmail.com>\nCopyright (c) 2018-2023 Antmicro <Antmicro.com>\nCopyright (c) 2019      Antony Pavlov <antonynpavlov@gmail.com>\nCopyright (c) 2019      Antti Lukats <Antti.Lukats@googlemail.com>\nCopyright (c) 2019-2020 Arnaud Durand <arnaud.durand@unifr.ch>\nCopyright (c) 2022-2023 Arne Jansen <arne@die-jansens.de>\nCopyright (c) 2023      Artur Kowalski <artur.kowalski@3mdeb.com>\nCopyright (c) 2019      atommann <atommann@gmail.com>\nCopyright (c) 2023      awyxx <robyawyx@gmail.com>\nCopyright (c) 2022      Bastian Löher <b.loeher@gsi.de>\nCopyright (c) 2022      Ben Stobbs <ben@stobbs.com>\nCopyright (c) 2021      Benjamin Henrion <zoobab@gmail.com>\nCopyright (c) 2019-2020 Benjamin Herrenschmidt <benh@kernel.crashing.org>\nCopyright (c) 2021      Blake Smith <blakesmith0@gmail.com>\nCopyright (c) 2012-2013 Brandon Hamilton <brandon.hamilton@gmail.com>\nCopyright (c) 2022      Brian Swetland <swetland@frotz.net>\nCopyright (c) 2017-2023 bunnie <bunnie@kosagi.com>\nCopyright (c) 2019      Caleb Jamison <cbjamo@gmail.com>\nCopyright (c) 2021      Camilo Andres Vera Ruiz <camilovera9811@gmail.com>\nCopyright (c) 2021-2024 Charles-Henri Mousset <ch.mousset@gmail.com>\nCopyright (c) 2019      chmousset <ch.mousset@gmail.com>\nCopyright (c) 2018      Chris Ballance <chris.ballance@physics.ox.ac.uk>\nCopyright (c) 2021      Chris Osterwood <osterwood@capablerobot.com>\nCopyright (c) 2020-2022 Christian Klarhorst <cklarhor@techfak.uni-bielefeld.de>\nCopyright (c) 2024      CLappin <ciaran.lappin@microsemi.com>\nCopyright (c) 2022      curliph <curliph@gmail.com>\nCopyright (c) 2019      Daniel Kucera <daniel.kucera@gmail.com>\nCopyright (c) 2023      dasdgw <michifrank2@gmx.de>\nCopyright (c) 2020      Dave Marples <dave@marples.net>\nCopyright (c) 2024      David A Roberts <d@vidr.cc>\nCopyright (c) 2013      David Carne <davidcarne@gmail.com>\nCopyright (c) 2020-2021 David Jablonski <dayjaby@gmail.com>\nCopyright (c) 2020-2021 David Lattimore <dml@chromium.org>\nCopyright (c) 2022      David Lobato <dav.lobato@gmail.com>\nCopyright (c) 2020-2022 David Sawatzke <d-git@sawatzke.dev>\nCopyright (c) 2018-2020 David Shah <dave@ds0.me>\nCopyright (c) 2020      davidcorrigan714 <davidcorrigan714@gmail.com>\nCopyright (c) 2018      Deano Calver <me@deanoc.com>\nCopyright (c) 2021-2022 developandplay <34752929+developandplay@users.noreply.github.com>\nCopyright (c) 2024      Dmitry Derevyanko <nrndda@gmail.com>\nCopyright (c) 2018-2024 Dolu1990 <charles.papon.90@gmail.com>\nCopyright (c) 2023      Eli Schwartz <eschwartz93@gmail.com>\nCopyright (c) 2022      Eric Matthews <ematthew@sfu.ca>\nCopyright (c) 2021      Evan Lojewski <github@meklort.com>\nCopyright (c) 2018      Ewen McNeill <ewen@naos.co.nz>\nCopyright (c) 2014      Fabien Marteau <fabien.marteau@armadeus.com>\nCopyright (c) 2019      fb@frank-buss.de <fb@frank-buss.de>\nCopyright (c) 2020      Feliks <feliks.montez@gmail.com>\nCopyright (c) 2017-2018 Felix Held <felix-github@felixheld.de>\nCopyright (c) 2024      Fernando Oleo Blanco <irvise@irvise.xyz>\nCopyright (c) 2020      Filipe Laíns <lains@archlinux.org>\nCopyright (c) 2024      Fin Maaß <f.maass@vogl-electronic.com>\nCopyright (c) 2012-2024 Florent Kermarrec <florent@enjoy-digital.fr>\nCopyright (c) 2019      Francis Lam <flam@alum.mit.edu>\nCopyright (c) 2020-2022 Franck Jullien <franck.jullien@collshade.fr>\nCopyright (c) 2019-2024 Gabriel L. Somlo <gsomlo@gmail.com>\nCopyright (c) 2021      Gary Wong <gtw@gnu.org>\nCopyright (c) 2018-2023 gatecat <gatecat@ds0.me>\nCopyright (c) 2020-2021 Geert Uytterhoeven <geert@linux-m68k.org>\nCopyright (c) 2021      George Hilliard <thirtythreeforty@gmail.com>\nCopyright (c) 2019      Giammarco Zacheo <g.zacheo@gmail.com>\nCopyright (c) 2023      Giulio Girardi <giulio.girardi@protechgroup.it>\nCopyright (c) 2021      Google <Google.com>\nCopyright (c) 2017      Greg Darke <greg@tsukasa.net.au>\nCopyright (c) 2020-2022 Greg Davill <greg.davill@gmail.com>\nCopyright (c) 2021      Guillaume REMBERT <zguig52@gmail.com>\nCopyright (c) 2014-2015 Guy Hutchison <ghutchis@gmail.com>\nCopyright (c) 2020-2024 Gwenhael Goavec-Merou <gwenhael@enjoy-digital.fr>\nCopyright (c) 2021-2024 Hans Baier <foss@hans-baier.de>\nCopyright (c) 2022-2023 Icenowy Zheng <icenowy@aosc.io>\nCopyright (c) 2019-2022 Ilia Sergachev <ilia@sergachev.ch>\nCopyright (c) 2020      Ilya Epifanov <elijah.epifanov@gmail.com>\nCopyright (c) 2021      Jakub Piecuch <j.piecuch96@gmail.com>\nCopyright (c) 2021      Jan Luebbe <jlu@pengutronix.de>\nCopyright (c) 2014      Jannis Harder <jix@jixco.de>\nCopyright (c) 2024      jdavidberger <j.david.berger@gmail.com>\nCopyright (c) 2018      Jean-François Nguyen <jf@lambdaconcept.com>\nCopyright (c) 2023      Jeremy Herbert <jeremy.006@gmail.com>\nCopyright (c) 2022      Jevin Sweval <jevinsweval@gmail.com>\nCopyright (c) 2023      Jiajie Chen <c@jia.je>\nCopyright (c) 2024      Jiaxun Yang <jiaxun.yang@flygoat.com>\nCopyright (c) 2015      Joe Britton <joe.britton@gmail.com>\nCopyright (c) 2017      Joel Addison <joel@addison.net.au>\nCopyright (c) 2020-2023 Joel Stanley <joel@jms.id.au>\nCopyright (c) 2023      Johan Carlsson <johan.carlsson@teenage.engineering>\nCopyright (c) 2022      Johannes Rudolph <johannes.rudolph@gmail.com>\nCopyright (c) 2023      Jonathan Bisson <bjonnh@users.noreply.github.com>\nCopyright (c) 2023      Joris Lee <lqq@sioiot.com>\nCopyright (c) 2024      Joshua Wise <joshua@joshuawise.com>\nCopyright (c) 2023      Josuah Demangeon <me@josuah.net>\nCopyright (c) 2024      JoyBed <46244284+JoyBed@users.noreply.github.com>\nCopyright (c) 2020      Jędrzej Boczar <yendreij@gmail.com>\nCopyright (c) 2019      Kees Jongenburger <kees.jongenburger@gmail.com>\nCopyright (c) 2013      Kenneth Ryerson <kryerson@vermeer.com>\nCopyright (c) 2020      kessam <61152217+kessam@users.noreply.github.com>\nCopyright (c) 2019-2020 Konrad Beckmann <konrad.beckmann@gmail.com>\nCopyright (c) 2021      Konstantin <buecheko@protonmail.com>\nCopyright (c) 2019      Kurt Kiefer <kekiefer@gmail.com>\nCopyright (c) 2019      Larry Doolittle <ldoolitt@recycle.lbl.gov>\nCopyright (c) 2012-2013 Lars-Peter Clausen <lars@metafoo.de>\nCopyright (c) 2023      Lasse Dalegaard <dalegaard@gmail.com>\nCopyright (c) 2020-2022 Leon Schuermann <leon@is.currently.online>\nCopyright (c) 2024      Liam Murphy <liampm32@gmail.com>\nCopyright (c) 2023      Lukas F. Hartmann <lukas@mntre.com>\nCopyright (c) 2024      Mai-Lapyst <67418776+Mai-Lapyst@users.noreply.github.com>\nCopyright (c) 2024      Marcin Dawidowicz <40853321+mdejw@users.noreply.github.com>\nCopyright (c) 2022-2023 Marcus Comstedt <marcus@mc.pp.se>\nCopyright (c) 2021      Marek Czerski <m.czerski@ap-tech.pl>\nCopyright (c) 2021      Marek Materzok <tilk@tilk.eu>\nCopyright (c) 2019      Martin Cornil <martin.cornil@railnova.eu>\nCopyright (c) 2022      Massimiliano Giacometti <massimiliano.giacometti@planv.tech>\nCopyright (c) 2021      Matt Johnston <matt@codeconstruct.com.au>\nCopyright (c) 2017      Matt Kelly <Matthew.Joseph.Kelly@gmail.com>\nCopyright (c) 2023      Matteo Marzaro <m.marzaro@protechgroup.it>\nCopyright (c) 2024      Matthias Breithaupt <m.breithaupt@vogl-electronic.com>\nCopyright (c) 2024      Meinhard Kissich <privat@meinhard-kissich.at>\nCopyright (c) 2019-2022 Michael Betz <michibetz@gmail.com>\nCopyright (c) 2012      Michael Walle <michael@walle.cc>\nCopyright (c) 2022      Mikolaj Sowinski <mikolaj.sowinski@gmail.com>\nCopyright (c) 2021-2022 Mikołaj Sowiński <msowinski@technosystem.com.pl>\nCopyright (c) 2019-2021 Miodrag Milanovic <mmicko@gmail.com>\nCopyright (c) 2022      mkuhn99 <manuel.kuhn@uni-bielefeld.de>\nCopyright (c) 2022      mohamedElbouazzati <elbouazzati.mohamed.2e@gmail.com>\nCopyright (c) 2019      msloniewski <marcin.sloniewski@gmail.com>\nCopyright (c) 2023      Nate Slager <slagernate@gmail.com>\nCopyright (c) 2021      Nathaniel R. Lewis <linux.robotdude@gmail.com>\nCopyright (c) 2021-2022 Navaneeth Bhardwaj <navan93@gmail.com>\nCopyright (c) 2021      Nick Østergaard <oe.nick@gmail.com>\nCopyright (c) 2024      Nicolas Gaudin <67331098+Nicolas-Gaudin@users.noreply.github.com>\nCopyright (c) 2013      Nina Engelhardt <nakengelhardt@gmail.com>\nCopyright (c) 2015      numato <sales@numato.com>\nCopyright (c) 2024      Nuntipat Narkthong <nuntipat@gmail.com>\nCopyright (c) 2021      Nick Østergaard <oe.nick@gmail.com>\nCopyright (c) 2020      Owen Kirby <oskirby@gmail.com>\nCopyright (c) 2015      Olof Kindgren <olof.kindgren@gmail.com>\nCopyright (c) 2019-2022 Pascal Cotret <pascal.cotret@gmail.com>\nCopyright (c) 2021      Paul Mackerras <paulus@ozlabs.org>\nCopyright (c) 2020      Paul Sajna <sajattack@gmail.com>\nCopyright (c) 2018      Paul Schulz <paul@mawsonlakes.org>\nCopyright (c) 2020-2024 Pepijn de Vos <pepijndevos@gmail.com>\nCopyright (c) 2018      phlipped <phlipped@gmail.com>\nCopyright (c) 2020      Piense <piense@gmail.com>\nCopyright (c) 2017      Pierre-Olivier Vauboin <po@lambdaconcept>\nCopyright (c) 2020      Piotr Esden-Tempski <piotr@esden.net>\nCopyright (c) 2015      psmears <patrick@smears.org>\nCopyright (c) 2023      Radek Pesina <radek.pesina@motec.com.au>\nCopyright (c) 2020      Rangel Ivanov <rangelivanov88@gmail.com>\nCopyright (c) 2021-2022 RapidSilicon <RapidSilicon.com>\nCopyright (c) 2020-2021 Raptor Engineering Development Team <support@raptorengineering.com>\nCopyright (c) 2023      Rasmus Pedersen <rasmus.pedersen@sky.uk>\nCopyright (c) 2021      Ray Molenkamp <github@lazydodo.com>\nCopyright (c) 2022-2024 Richard Tucker <richard.tucker@motec.com.au>\nCopyright (c) 2023      riktw <rik@justanotherelectronicsblog.com>\nCopyright (c) 2020      rob-ng15 <58272847+rob-ng15@users.noreply.github.com>\nCopyright (c) 2013-2016 Robert Jordens <jordens@gmail.com>\nCopyright (c) 2013      Robert Jördens <jordens@gmail.com>\nCopyright (c) 2021      Robert Wilbrandt <robert@stamm-wilbrandt.de>\nCopyright (c) 2015      Rohit Kumar Singh <rohit91.2008@gmail.com>\nCopyright (c) 2021      Romain Dolbeau <romain@dolbeau.org>\nCopyright (c) 2022      Rouven Broszeit <roubro1991@gmx.de>\nCopyright (c) 2023      rowanG077 <goemansrowan@gmail.com>\nCopyright (c) 2020      rprinz08 <richard.prinz@min.at>\nCopyright (c) 2015      Ryan Verner <ryan.verner@gmail.com>\nCopyright (c) 2019-2021 Sadullah Canakci <sadullahcanakci@gmail.com>\nCopyright (c) 2020      Samuel Lindemer <samuel.lindemer@gmail.com>\nCopyright (c) 2018-2022 Sean Cross <sean@xobs.io>\nCopyright (c) 2011-2016 Sebastien Bourdeauducq <sb@m-labs.hk>\nCopyright (c) 2021      Sergiu Mosanu <sm7ed@virginia.edu>\nCopyright (c) 2017-2018 Sergiusz Bazanski <q3k@q3k.org>\nCopyright (c) 2020      Shawn Anastasio <shawn@anastas.io>\nCopyright (c) 2020-2021 Shawn Hoffman <godisgovernment@gmail.com>\nCopyright (c) 2020      shuffle2 <godisgovernment@gmail.com>\nCopyright (c) 2021      Simon Thornington <simon.thornington@gmail.com>\nCopyright (c) 2018-2022 Stafford Horne <shorne@gmail.com>\nCopyright (c) 2020      Stephane Gourichon <stephane.gourichon@fidergo.fr>\nCopyright (c) 2022      stnolting <stnolting@gmail.com>\nCopyright (c) 2022-2023 stone3311 <fenstein12@googlemail.com>\nCopyright (c) 2020      Stéphane Gourichon <stephane.gourichon@fidergo.fr>\nCopyright (c) 2022      Sylvain Lefebvre <sylvain.lefebvre@inria.fr>\nCopyright (c) 2021-2024 Sylvain Munaut <tnt@246tNt.com>\nCopyright (c) 2022-2023 Thomas Watson <twatson52@icloud.com>\nCopyright (c) 2017-2021 Tim 'mithro' Ansell <me@mith.ro>\nCopyright (c) 2023      Tim Paine <3105306+timkpaine@users.noreply.github.com>\nCopyright (c) 2019      Tom Keddie <git@bronwenandtom.com>\nCopyright (c) 2021-2022 tongchen126 <tongchen126@gmail.com>\nCopyright (c) 2020      Vadim Kaushan <admin@disasm.info>\nCopyright (c) 2021-2022 Vadzim Dambrouski <pftbest@gmail.com>\nCopyright (c) 2019      Vamsi K Vytla <vamsi.vytla@gmail.com>\nCopyright (c) 2020-2022 Vamsi Vytla <vamsi.vytla@gmail.com>\nCopyright (c) 2020-2023 Vegard Storheil Eriksen <zyp@jvnv.net>\nCopyright (c) 2022-2023 Victor Suarez Rovere <suarezvictor@gmail.com>\nCopyright (c) 2019      vytautasb <v.buitvydas@limemicro.com>\nCopyright (c) 2013      Werner Almesberger <werner@almesberger.net>\nCopyright (c) 2015-2021 whitequark <whitequark@whitequark.org>\nCopyright (c) 2015-2022 William D. Jones <thor0505@comcast.net>\nCopyright (c) 2022      Wolfgang Nagele <mail@wnagele.com>\nCopyright (c) 2021      wuhanstudio <wuhanstudio@qq.com>\nCopyright (c) 2022      xhe <xw897002528@gmail.com>\nCopyright (c) 2020      Xiretza <xiretza@xiretza.xyz>\nCopyright (c) 2013-2015 Yann Sionneau <yann.sionneau@gmail.com>\nCopyright (c) 2015      Yves Delley <hack@delley.net>\nCopyright (c) 2020      Yehowshua Immanuel <yimmanuel3@gatech.edu>\nCopyright (c) 2021      Yoshimasa Niwa <niw@niw.at>\nCopyright (c) 2015      Yves Delley <hack@delley.net>\nCopyright (c) 2015      Zach Smith <IAmSparticle@gmail.com>\nCopyright (c) 2021      zyp <zyp@jvnv.net>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.0205078125,
          "content": "BSD 2-Clause License\n\nThe LiteX framework provides a convenient and efficient infrastructure to create\nFPGA Cores/SoCs, to explore various digital design architectures and create full\nFPGA based systems.\n\nUnless otherwise noted, LiteX is copyright (C) 2012-2024 Enjoy-Digital & LiteX developers.\nUnless otherwise noted, MiSoC is copyright (C) 2012-2015 Enjoy-Digital.\nUnless otherwise noted, MiSoC is copyright (C) 2007-2015 M-Labs Ltd.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nOther authors retain ownership of their contributions. If a submission can\nreasonably be considered independently copyrightable, it's yours and we\nencourage you to claim it with appropriate copyright notices. This submission\nthen falls under the \"otherwise noted\" category. All submissions are strongly\nencouraged to use the two-clause BSD license reproduced above.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0966796875,
          "content": "graft litex\ninclude CHANGES.md\ninclude CONTRIBUTORS\ngraft doc\n\nexclude litex_setup.py\n\nprune test\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.3037109375,
          "content": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/enjoy-digital/litex/master/doc/litex.png\"></p>\n\n```\n             Copyright 2012-2024 / Enjoy-Digital & LiteX developers\n```\n[![](https://github.com/enjoy-digital/litex/workflows/ci/badge.svg)](https://github.com/enjoy-digital/litex/actions)\n![License](https://img.shields.io/badge/License-BSD%202--Clause-orange.svg)\n\n# Welcome to LiteX!\n\n\nThe LiteX framework provides a convenient and efficient infrastructure to create FPGA Cores/SoCs, to explore various digital design architectures and create [full FPGA based  systems](https://github.com/enjoy-digital/litex/wiki/Projects).\n\n**LiteX SoC builder framework quick tour/overview: [Slides](https://docs.google.com/presentation/d/1mQOWqgmyQxpjLAzFwCulqgkp0TuxmaIDYp5iUfPqqIk/edit?usp=sharing)**\n\n**Want to get started and/or looking for documentation? Make sure to visit the [Wiki](https://github.com/enjoy-digital/litex/wiki)!**\n\n**A question or want to get in touch? Join us on [Discord](https://discord.gg/PkJwjDbxeG) or on our IRC channel: [#litex at irc.libera.chat]**.\n\nLiteX provides all the common components required to easily create an FPGA Core/SoC:\n - :heavy_check_mark: Buses and Streams (Wishbone, AXI, Avalon-ST) and their  interconnect.\n - :heavy_check_mark: Simple cores: RAM, ROM, Timer, UART, JTAG, etc….\n - :heavy_check_mark: Complex cores through the ecosystem of cores: [LiteDRAM](https://github.com/enjoy-digital/litedram), [LitePCIe](https://github.com/enjoy-digital/litepcie), [LiteEth](https://github.com/enjoy-digital/liteeth), [LiteSATA](https://github.com/enjoy-digital/litesata), etc...\n - :heavy_check_mark: Various CPUs & ISAs: RISC-V, OpenRISC, LM32, Zynq, X86 (through a PCIe), etc...\n - :heavy_check_mark: Mixed languages support with VHDL/Verilog/(n)Migen/Spinal-HDL/etc... integration capabilities.\n - :heavy_check_mark: Powerful debug infrastructure through the various [bridges](https://github.com/enjoy-digital/litex/wiki/Use-Host-Bridge-to-control-debug-a-SoC) and [Litescope](https://github.com/enjoy-digital/litescope).\n - :heavy_check_mark: Direct/Fast simulation through [Verilator](https://www.veripool.org/verilator/).\n - :heavy_check_mark: Build backends for open-source and vendors toolchains.\n - :heavy_check_mark: And a lot more... :)\n\nBy combining LiteX with the ecosystem of cores, creating complex SoCs becomes a lot easier than with traditional approaches while providing better portability and flexibility: Here is for example a Multi-core Linux Capable SoC based on VexRiscv-SMP CPU, LiteDRAM, LiteSATA built and integrated with LiteX, running on a cheap repurposed [Acorn CLE215+ Mining Board](https://github.com/enjoy-digital/litex/wiki/Use-LiteX-on-the-Acorn-CLE-215):\n![](https://user-images.githubusercontent.com/1450143/103343266-f8cc9a00-4a8b-11eb-9444-f02e1522a490.png)\nFor more info, have a look at [Linux-on-LiteX-Vexriscv](https://github.com/litex-hub/linux-on-litex-vexriscv) project and try running Linux on your FPGA board!\n\nLiteX's digital logic is currently described with [Migen](https://github.com/m-labs/migen) which does not prevent users to create mixed language projects:\n- It's very common and easy to integrate VHDL/Verilog/SystemVerilog/nMigen/Spinal-HDL code in LiteX!\n- It's also very common to do the opposite and generate the LiteX design as a verilog file and integrate it in a traditional flow.\n\n\nLiteX was initially developed by [Enjoy-Digital](http://enjoy-digital.fr/) to create projects for clients (and we are still using it for that :)) and trying to take the different clients' requirements/needs consideration made, we think, the framework very flexible:\n - Some users only want to use it to easily interconnect their existing VHDL/Verilog/SV cores.\n - Some users are only interested to reuse the PCIe/Ethernet/SATA/etc cores as regular core and just integrate them in their traditional flow.\n - Some users with a hardware background start with the above approaches and then switch later to the full Python flow since find it more efficient.\n - Some users with a software background and fluent with Python start playing with FPGAs while they would probably never touch FPGA otherwise :)\n - Etc...\n\nWe are well aware that everyone has a different background, so it's up to you to pick the right approach with LiteX that will be convenient for you!\n\nTo get started we encourage you to read the [wiki](https://github.com/enjoy-digital/litex/wiki).\n\nYou already have a FPGA board(s)? Visit [LiteX-Boards](https://github.com/litex-hub/litex-boards) to see if your board(s) is already supported!\n\nThe framework is also far from perfect and we'll be happy to have your [feedback or/and contributions](https://github.com/enjoy-digital/litex/wiki/Feedback-Contribution-Support).\n\nHave fun! :wink:\n\nWe share this project under a permissive BSD 2-Clause License, inspired by our fantastic community and supportive clients. If LiteX benefits your research, hobby, or commercial projects, we kindly ask for your positive collaboration and respect for the effort involved.\n\nThank you for helping us improve LiteX and being part of our community!\n\n# Typical LiteX design flow:\n```\n                                      +---------------+\n                                      |FPGA toolchains|\n                                      +----^-----+----+\n                                           |     |\n                                        +--+-----v--+\n                       +-------+        |           |\n                       | Migen +-------->           |\n                       +-------+        |           |        Your design\n                                        |   LiteX   +---> ready to be used!\n                                        |           |\n              +----------------------+  |           |\n              |LiteX Cores Ecosystem +-->           |\n              +----------------------+  +-^-------^-+\n               (Eth, SATA, DRAM, USB,     |       |\n                PCIe, Video, etc...)      +       +\n                                         board   target\n                                         file    file\n```\nLiteX already supports various softcores CPUs: VexRiscv, Rocket, LM32, Mor1kx, PicoRV32, BlackParrot and is compatible with the LiteX's Cores Ecosystem:\n\n| Name                                                         | Build Status                                                                                                                       | Description               |\n| ------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------- | ------------------------- |\n| [LiteX-Boards](http://github.com/litex-hub/litex-boards)     | [![](https://github.com/litex-hub/litex-boards/workflows/ci/badge.svg)](https://github.com/litex-hub/litex-boards/actions)         | Boards support            |\n| [LiteDRAM](http://github.com/enjoy-digital/litedram)         | [![](https://github.com/enjoy-digital/litedram/workflows/ci/badge.svg)](https://github.com/enjoy-digital/litedram/actions)         | DRAM                      |\n| [LiteEth](http://github.com/enjoy-digital/liteeth)           | [![](https://github.com/enjoy-digital/liteeth/workflows/ci/badge.svg)](https://github.com/enjoy-digital/liteeth/actions)           | Ethernet                  |\n| [LitePCIe](http://github.com/enjoy-digital/litepcie)         | [![](https://github.com/enjoy-digital/litepcie/workflows/ci/badge.svg)](https://github.com/enjoy-digital/litepcie/actions)         | PCIe                      |\n| [LiteSATA](http://github.com/enjoy-digital/litesata)         | [![](https://github.com/enjoy-digital/litesata/workflows/ci/badge.svg)](https://github.com/enjoy-digital/litesata/actions)         | SATA                      |\n| [LiteSDCard](http://github.com/enjoy-digital/litesdcard)     | [![](https://github.com/enjoy-digital/litesdcard/workflows/ci/badge.svg)](https://github.com/enjoy-digital/litesdcard/actions)     | SD card                   |\n| [LiteICLink](http://github.com/enjoy-digital/liteiclink)     | [![](https://github.com/enjoy-digital/liteiclink/workflows/ci/badge.svg)](https://github.com/enjoy-digital/liteiclink/actions)     | Inter-Chip communication  |\n| [LiteJESD204B](http://github.com/enjoy-digital/litejesd204b) | [![](https://github.com/enjoy-digital/litejesd204b/workflows/ci/badge.svg)](https://github.com/enjoy-digital/litejesd204b/actions) | JESD204B                  |\n| [LiteSPI](http://github.com/litex-hub/litespi)               | [![](https://github.com/litex-hub/litespi/workflows/ci/badge.svg)](https://github.com/litex-hub/litespi/actions)                   | SPI/SPI-Flash               |\n| [LiteScope](http://github.com/enjoy-digital/litescope)       | [![](https://github.com/enjoy-digital/litescope/workflows/ci/badge.svg)](https://github.com/enjoy-digital/litescope/actions)       | Logic analyzer            |\n\n# Examples of designs built with LiteX:\nCustom PCIe SDI Capture/Playback board built around LitePCIe and integrated with LiteX, allowing full control of the SDI flow and very low latency.\n![](https://user-images.githubusercontent.com/1450143/103343791-282fd680-4a8d-11eb-82bd-c068ac1ad293.png)\nAlternative firmware/gateware for the SDS1104X-E Scope:\n![enter image description here](https://user-images.githubusercontent.com/1450143/124901562-6977e480-dfe2-11eb-9071-4344d1146968.png)\nHBM2 test infrastructure on Forest Kitten 33:\n![enter image description here](https://user-images.githubusercontent.com/1450143/124902018-d4c1b680-dfe2-11eb-89c4-8b498605c34d.png)\n\nTo discover more products/projects built with LiteX, visit the [projects page](https://github.com/enjoy-digital/litex/wiki/Projects) on the Wiki.\n\n# Sponsors/Partners:\n\nA huge shoutout to our awesome industrial clients who have given us the green light to incorporate some of the developments we initially created for them directly into LiteX! These innovative developments often provide the building blocks for the features that the wider community can then use and improve upon. Your support has been instrumental for the project, and we are incredibly grateful for your partnership. Thanks!\n\n![](https://github.com/enjoy-digital/litex/assets/1450143/444d8fc2-3092-487c-b52f-bdd776b790a4.png)\n\n# Papers, Presentations, Tutorials, Links\n**FPGA lessons/tutorials:**\n- https://github.com/enjoy-digital/fpga_101\n\n**Migen tutorial:**\n- https://m-labs.hk/migen/manual\n\n**OSDA 2019 paper/slides:**\n- https://osda.gitlab.io/19/1.1.pdf\n- https://osda.gitlab.io/19/1.1-slides.pdf\n\n**Linux on LiteX-Vexriscv:**\n- https://github.com/litex-hub/linux-on-litex-vexriscv\n\n**RISC-V Getting Started Guide:**\n- https://risc-v-getting-started-guide.readthedocs.io/en/latest/\n\n**LiteX vs. Vivado First Impressions:**\n- https://www.bunniestudios.com/blog/?p=5018\n\n**35C3 - Snakes and Rabbits - How CCC shaped an open hardware success:**\n- https://www.youtube.com/watch?v=AlmVxR0417c\n\n**Tim has to many projects - LatchUp Edition:**\nhttps://www.youtube.com/watch?v=v7WrTmexod0\n\n\n# Sub-packages\n**litex.gen**\nProvides specific or experimental modules to generate HDL that are not integrated in Migen.\n\n**litex.build:**\nProvides tools to build FPGA bitstreams (interface to vendor toolchains) and to simulate HDL code or full SoCs.\n\n**litex.soc:**\nProvides definitions/modules to build cores (bus, bank, flow), cores and tools to build a SoC from such cores.\n\n# Quick start guide\n1. Install Python 3.6+ and FPGA vendor's development tools and/or [Verilator](http://www.veripool.org/).\n2. Install Migen/LiteX and the LiteX's cores:\n\n```sh\n$ wget https://raw.githubusercontent.com/enjoy-digital/litex/master/litex_setup.py\n$ chmod +x litex_setup.py\n$ ./litex_setup.py --init --install --user (--user to install to user directory) --config=(minimal, standard, full)\n```\n  Later, if you need to update all repositories:\n```sh\n$ ./litex_setup.py --update\n```\n\n> **Note:** On MacOS, make sure you have [HomeBrew](https://brew.sh) installed. Then do, ``brew install wget``.\n\n> **Note:** On Windows, it's possible you'll have to set `SHELL` environment variable to `SHELL=cmd.exe`.\n\n3. Install a RISC-V toolchain (Only if you want to test/create a SoC with a CPU):\n```sh\n$ pip3 install meson ninja\n$ ./litex_setup.py --gcc=riscv\n```\n\n4. Build the target of your board...:\n\nGo to litex-boards/litex_boards/targets and execute the target you want to build.\n\n5. ... and/or install [Verilator](http://www.veripool.org/) and test LiteX directly on your computer without any FPGA board:\n\nOn Linux (Ubuntu):\n```sh\n$ sudo apt install libevent-dev libjson-c-dev verilator\n$ litex_sim --cpu-type=vexriscv\n```\n\nOn MacOS:\n```sh\n$ brew install json-c verilator libevent\n$ brew cask install tuntap\n$ litex_sim --cpu-type=vexriscv\n```\n\n6. Run a terminal program on the board's serial port at 115200 8-N-1.\n\n  You should get the BIOS prompt like the one below.\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/enjoy-digital/litex/master/doc/bios_screenshot.png\"></p>\n\n# Community\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/enjoy-digital/litex/master/doc/litex-hub.png\" width=\"400\"></p>\n\nOver the years a friendly community has grown around LiteX and the ecosystem of cores. Feedbacks and contributions have already greatly improved the project, EnjoyDigital still leads the development but it is now a community project and collaborative projects created around/with LiteX can be found at https://github.com/litex-hub.\n\n# Contact\nE-mail: florent@enjoy-digital.fr\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "litex",
          "type": "tree",
          "content": null
        },
        {
          "name": "litex_setup.py",
          "type": "blob",
          "size": 19.26171875,
          "content": "#!/usr/bin/env python3\n\nimport os\nimport sys\nimport time\nimport subprocess\nimport shutil\nimport hashlib\nimport argparse\n\nimport urllib.request\n\nstart_time   = time.time()\ncurrent_path = os.path.abspath(os.curdir)\npython3      = sys.executable\n\n# Helpers ------------------------------------------------------------------------------------------\n\ndef colorer(s, color=\"bright\"):\n    header  = {\n        \"bright\"    : \"\\x1b[1m\",\n        \"green\"     : \"\\x1b[1m\\x1b[32m\",\n        \"cyan\"      : \"\\x1b[1m\\x1b[36m\",\n        \"red\"       : \"\\x1b[1m\\x1b[31m\",\n        \"yellow\"    : \"\\x1b[1m\\x1b[33m\",\n        \"underline\" : \"\\x1b[1m\\x1b[4m\"}[color]\n    trailer = \"\\x1b[0m\"\n    return header + str(s) + trailer\n\ndef print_banner():\n    b  = []\n    b.append(\"          __   _ __      _  __         \")\n    b.append(\"         / /  (_) /____ | |/_/         \")\n    b.append(\"        / /__/ / __/ -_)>  <           \")\n    b.append(\"       /____/_/\\\\__/\\\\__/_/|_|         \")\n    b.append(\"     Build your hardware, easily!      \")\n    b.append(\"          LiteX Setup utility.         \")\n    b.append(\"\")\n    print(\"\\n\".join(b))\n\ndef print_status(status, underline=False):\n    exec_time = (time.time() - start_time)\n    print(colorer(f\"[{exec_time:8.3f}]\", color=\"green\") + \" \" + colorer(status))\n    if underline:\n        print(colorer(f\"[{exec_time:8.3f}]\", color=\"green\") + \" \" + colorer(\"-\"*len(status)))\n\ndef print_error(status):\n    exec_time = (time.time() - start_time)\n    print(colorer(f\"[{exec_time:8.3f}]\", color=\"red\") + \" \" + colorer(status))\n\nclass SetupError(Exception):\n    def __init__(self):\n        sys.stderr = None # Error already described, avoid traceback/exception.\n\n# Git repositories ---------------------------------------------------------------------------------\n\n# Get SHA1: git rev-parse --short=7 HEAD\n\nclass GitRepo:\n    def __init__(self, url, clone=\"regular\", develop=True, sha1=None, branch=\"master\", tag=None):\n        assert clone in [\"regular\", \"recursive\"]\n        self.url     = url\n        self.clone   = clone\n        self.develop = develop\n        self.sha1    = sha1\n        self.branch  = branch\n        self.tag     = tag\n\n\ngit_repos = {\n    # HDL.\n    # ----\n    \"migen\":    GitRepo(url=\"https://github.com/m-labs/\", clone=\"recursive\", sha1=0xccaee68e14d3636e1d8fb2e0864dd89b1b1f7384),\n\n    # LiteX SoC builder.\n    # ------------------\n    \"pythondata-software-picolibc\":    GitRepo(url=\"https://github.com/litex-hub/\", clone=\"recursive\"),\n    \"pythondata-software-compiler_rt\": GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"litex\":                           GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n\n    # LiteX Cores Ecosystem.\n    # ----------------------\n    \"liteiclink\":   GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"liteeth\":      GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"litedram\":     GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"litepcie\":     GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"litesata\":     GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"litesdcard\":   GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"litescope\":    GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"litejesd204b\": GitRepo(url=\"https://github.com/enjoy-digital/\", tag=True),\n    \"litespi\":      GitRepo(url=\"https://github.com/litex-hub/\",     tag=True),\n\n    # LiteX Misc Cores.\n    # -----------------\n    \"valentyusb\":         GitRepo(url=\"https://github.com/litex-hub/\", branch=\"hw_cdc_eptri\"),\n\n    # LiteX Boards.\n    # -------------\n    \"litex-boards\": GitRepo(url=\"https://github.com/litex-hub/\", clone=\"regular\", tag=True),\n\n    # LiteX pythondata.\n    # -----------------\n    # Generic.\n    \"pythondata-misc-tapcfg\":      GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-misc-usb_ohci\":    GitRepo(url=\"https://github.com/litex-hub/\", clone=\"recursive\"),\n\n    # LM32 CPU(s).\n    \"pythondata-cpu-lm32\":         GitRepo(url=\"https://github.com/litex-hub/\"),\n\n    # OpenRISC CPU(s).\n    \"pythondata-cpu-mor1kx\":       GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-marocchino\":   GitRepo(url=\"https://github.com/litex-hub/\"),\n\n    # OpenPower CPU(s).\n    \"pythondata-cpu-microwatt\":    GitRepo(url=\"https://github.com/litex-hub/\", sha1=0xc69953aff92),\n\n    # RISC-V CPU(s).\n    \"pythondata-cpu-blackparrot\":  GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-cv32e40p\":     GitRepo(url=\"https://github.com/litex-hub/\", clone=\"recursive\"),\n    \"pythondata-cpu-cv32e41p\":     GitRepo(url=\"https://github.com/litex-hub/\", clone=\"recursive\"),\n    \"pythondata-cpu-cva5\":         GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-cva6\":         GitRepo(url=\"https://github.com/litex-hub/\", clone=\"recursive\"),\n    \"pythondata-cpu-ibex\":         GitRepo(url=\"https://github.com/litex-hub/\", clone=\"recursive\", sha1=0xd3d53df),\n    \"pythondata-cpu-minerva\":      GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-naxriscv\":     GitRepo(url=\"https://github.com/litex-hub/\", branch=\"smp\"),\n    \"pythondata-cpu-picorv32\":     GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-rocket\":       GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-serv\":         GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-vexiiriscv\":   GitRepo(url=\"https://github.com/litex-hub/\", branch=\"main\"),\n    \"pythondata-cpu-vexriscv\":     GitRepo(url=\"https://github.com/litex-hub/\"),\n    \"pythondata-cpu-vexriscv-smp\": GitRepo(url=\"https://github.com/litex-hub/\", clone=\"recursive\"),\n}\n\n# Installs -----------------------------------------------------------------------------------------\n\n# Minimal: Only Migen + LiteX.\nminimal_repos = [\"migen\", \"litex\"]\n\n# Standard: Migen + LiteX + Cores + Software + Popular CPUs (LM32, Mor1kx, SERV, VexRiscv).\nstandard_repos = list(git_repos.keys())\nstandard_repos.remove(\"pythondata-cpu-blackparrot\")\nstandard_repos.remove(\"pythondata-cpu-cv32e40p\")\nstandard_repos.remove(\"pythondata-cpu-cv32e41p\")\nstandard_repos.remove(\"pythondata-cpu-cva5\")\nstandard_repos.remove(\"pythondata-cpu-cva6\")\nstandard_repos.remove(\"pythondata-cpu-ibex\")\nstandard_repos.remove(\"pythondata-cpu-marocchino\")\nstandard_repos.remove(\"pythondata-cpu-minerva\")\nstandard_repos.remove(\"pythondata-cpu-microwatt\")\nstandard_repos.remove(\"pythondata-cpu-picorv32\")\nstandard_repos.remove(\"pythondata-cpu-rocket\")\n\n# Full: Migen + LiteX + Cores + Software + All CPUs.\nfull_repos = list(git_repos.keys())\n\n# Installs:\ninstall_configs = {\n    \"minimal\"  : minimal_repos,\n    \"standard\" : standard_repos,\n    \"full\"     : full_repos,\n}\n\n# Script location / auto-update --------------------------------------------------------------------\n\ndef litex_setup_location_check():\n    # Check if script is executed inside a cloned LiteX repository or alongside?\n    if os.path.exists(\".gitignore\"):\n        global current_path\n        current_path = os.path.join(current_path, \"../\")\n\ndef litex_setup_auto_update():\n    litex_setup_url = \"https://raw.githubusercontent.com/enjoy-digital/litex/master/litex_setup.py\"\n    current_sha1 = hashlib.sha1(open(os.path.realpath(__file__)).read().encode(\"utf-8\")).hexdigest()\n    print_status(\"LiteX Setup auto-update...\")\n    try:\n        import requests\n        r = requests.get(litex_setup_url)\n        if r.status_code != 404:\n            upstream_sha1 = hashlib.sha1(r.content).hexdigest()\n            if current_sha1 != upstream_sha1:\n                print_status(\"LiteX Setup is obsolete, updating.\")\n                with open(os.path.realpath(__file__), \"wb\") as f:\n                    f.write(r.content)\n                os.execl(python3, python3, *sys.argv)\n            else:\n                print_status(\"LiteX Setup is up to date.\")\n    except:\n        pass\n\n# Git helpers --------------------------------------------------------------------------------------\n\ndef git_checkout(sha1=None, tag=None):\n    assert not ((sha1 is None) and (tag is None))\n    if sha1 is not None:\n        os.system(f\"git checkout {sha1:07x}\")\n    if tag is not None:\n        sha1_tag_cmd = [\"git\", \"rev-list\", \"-n 1\", tag]\n        sha1_tag     = subprocess.check_output(sha1_tag_cmd).decode(\"UTF-8\")[:-1]\n        os.system(f\"git checkout {sha1_tag}\")\n\ndef git_tag(tag=None):\n    assert tag is not None\n    os.system(f\"git tag {tag}\")\n    os.system(f\"git push --tags\")\n\n# Git repositories initialization ------------------------------------------------------------------\n\ndef litex_setup_init_repos(config=\"standard\", tag=None, dev_mode=False):\n    print_status(\"Initializing Git repositories...\", underline=True)\n    for name in install_configs[config]:\n        repo = git_repos[name]\n        os.chdir(os.path.join(current_path))\n        if not os.path.exists(name):\n            # Clone Repo.\n            print_status(f\"Cloning {name} Git repository...\")\n            repo_url = repo.url\n            if dev_mode:\n                repo_url = repo_url.replace(\"https://github.com/\", \"git@github.com:\")\n            subprocess.check_call(\"git clone {url} {options}\".format(\n                url     = repo_url + name + \".git\",\n                options = \"--recursive\" if repo.clone == \"recursive\" else \"\"\n                ), shell=True)\n            os.chdir(os.path.join(current_path, name))\n            # Use specific Branch.\n            subprocess.check_call(\"git checkout \" + repo.branch, shell=True)\n            # Use specific Tag (Optional).\n            if repo.tag is not None:\n                # Priority to passed tag (if specified).\n                if tag is not None:\n                    git_checkout(tag=tag)\n                    continue\n                # Else fallback to repo tag (if specified).\n                if isinstance(repo.tag, str):\n                    git_checkout(tag=tag)\n                    continue\n            # Use specific SHA1 (Optional).\n            if repo.sha1 is not None:\n                git_checkout(sha1=repo.sha1)\n        else:\n            print_status(f\"{name} Git Repo already present.\")\n\n# Git repositories update --------------------------------------------------------------------------\n\ndef litex_setup_update_repos(config=\"standard\", tag=None):\n    print_status(\"Updating Git repositories...\", underline=True)\n    for name in install_configs[config]:\n        repo = git_repos[name]\n        os.chdir(os.path.join(current_path))\n        # Check if Repo is present.\n        if not os.path.exists(name):\n            print_error(f\"{name} Git repository is not initialized, please run --init first.\")\n            raise SetupError\n        # Update Repo.\n        print_status(f\"Updating {name} Git repository...\")\n        os.chdir(os.path.join(current_path, name))\n        subprocess.check_call(\"git checkout \" + repo.branch, shell=True)\n        subprocess.check_call(\"git pull --ff-only\", shell=True)\n        # Recursive Update (Optional).\n        if repo.clone == \"recursive\":\n            subprocess.check_call(\"git submodule update --init --recursive\", shell=True)\n        # Use specific Tag (Optional).\n        if repo.tag is not None:\n            # Priority to passed tag (if specified).\n            if tag is not None:\n                git_checkout(tag=tag)\n                continue\n            # Else fallback to repo tag (if specified).\n            if isinstance(repo.tag, str):\n                git_checkout(tag=tag)\n                continue\n        # Use specific SHA1 (Optional).\n        if repo.sha1 is not None:\n            git_checkout(sha1=repo.sha1)\n\n# Git repositories install -------------------------------------------------------------------------\n\ndef litex_setup_install_repos(config=\"standard\", user_mode=False):\n    print_status(\"Installing Git repositories...\", underline=True)\n    for name in install_configs[config]:\n        repo = git_repos[name]\n        os.chdir(os.path.join(current_path))\n        # Install Repo.\n        if repo.develop:\n            print_status(f\"Installing {name} Git repository...\")\n            os.chdir(os.path.join(current_path, name))\n            subprocess.check_call(\"\\\"{python3}\\\" -m pip install --editable . {options}\".format(\n                python3 = sys.executable,\n                options = \"--user\" if user_mode else \"\",\n                ), shell=True)\n    if user_mode:\n        if \".local/bin\" not in os.environ.get(\"PATH\", \"\"):\n            print_status(\"Make sure that ~/.local/bin is in your PATH\")\n            print_status(\"export PATH=$PATH:~/.local/bin # temporary (limited to the current terminal)\")\n            print_status(\"or add the previous line into your ~/.bashrc to permanently update PATH\")\n\n# Git repositories freeze --------------------------------------------------------------------------\n\ndef litex_setup_freeze_repos(config=\"standard\"):\n    print_status(\"Freezing config of Git repositories...\", underline=True)\n    r = \"git_repos = {\\n\"\n    for name in install_configs[config]:\n        repo = git_repos[name]\n        os.chdir(os.path.join(current_path, name))\n        git_sha1_cmd = [\"git\", \"rev-parse\", \"--short=7\", \"HEAD\"]\n        git_sha1     = subprocess.check_output(git_sha1_cmd).decode(\"UTF-8\")[:-1]\n        git_url_cmd  = [\"git\", \"remote\", \"get-url\", \"origin\"]\n        git_url      = subprocess.check_output(git_url_cmd).decode(\"UTF-8\")[:-1]\n        git_url      = git_url.replace(f\"{name}.git\", \"\")\n        r += \" \"*4\n        r += f'\"{name}\" : GitRepo(url=\"{git_url}\",\\n'\n        r += f'{\" \"*8}clone   = \"{repo.clone}\",\\n'\n        r += f'{\" \"*8}develop = {repo.develop},\\n'\n        r += f'{\" \"*8}sha1    = 0x{git_sha1},\\n'\n        r += f'{\" \"*8}branch  = \"{repo.branch}\"'\n        r += f'\\n{\" \"*4}),\\n'\n    r += \"}\\n\"\n    print(r)\n\n# Git repositories release -------------------------------------------------------------------------\n\ndef litex_setup_release_repos(tag):\n    print_status(f\"Making release {tag}...\", underline=True)\n    confirm = input(\"Please confirm by pressing Y:\")\n    if confirm.upper() == \"Y\":\n        for name in install_configs[\"full\"]:\n            if name in [\"migen\"]:\n                continue\n            repo = git_repos[name]\n            os.chdir(os.path.join(current_path, name))\n            # Tag Repo.\n            print_status(f\"Tagging {name} Git repository as {tag}...\")\n            git_tag(tag=tag)\n    else:\n        print_status(f\"Not confirmed, exiting.\")\n\n# GCC toolchains install ---------------------------------------------------------------------------\n\n# RISC-V toolchain.\n# -----------------\n\ndef riscv_gcc_install():\n    # Linux.\n    # ------\n    if sys.platform.startswith(\"linux\"):\n        os_release = (open(\"/etc/os-release\").read()).lower()\n        # Fedora.\n        if \"fedora\" in os_release:\n            os.system(\"dnf install gcc-riscv64-linux-gnu\")\n        # Arch.\n        elif \"arch\" in os_release:\n            os.system(\"pacman -S riscv64-linux-gnu-gcc\")\n        # Alpine.\n        elif \"alpine\" in os_release:\n            os.system(\"apk add gcc-cross-embedded\")\n        # Ubuntu.\n        else:\n            os.system(\"apt install gcc-riscv64-unknown-elf\")\n\n    # Mac OS.\n    # -------\n    elif sys.platform.startswith(\"darwin\"):\n        os.system(\"brew install riscv-tools\")\n\n    # Manual installation.\n    # --------------------\n    else:\n        NotImplementedError(f\"RISC-V GCC requires manual installation on {sys.platform}.\")\n\n# PowerPC toolchain.\n# -----------------\n\ndef powerpc_gcc_install():\n    # Linux.\n    # ------\n    if sys.platform.startswith(\"linux\"):\n        os_release = (open(\"/etc/os-release\").read()).lower()\n        # Fedora.\n        if \"fedora\" in os_release:\n            os.system(\"dnf install gcc-powerpc64le-linux-gnu\") # FIXME: binutils-multiarch?\n        # Arch (AUR repository).\n        elif \"arch\" in os_release:\n            os.system(\"yay -S powerpc64le-linux-gnu-gcc\")\n        # Alpine.\n        elif \"alpine\" in os_release:\n            os.system(\"apk add gcc binutils-ppc64le\")\n        # Ubuntu.\n        else:\n            os.system(\"apt install gcc-powerpc64le-linux-gnu binutils-multiarch\")\n\n    # Manual installation.\n    # --------------------\n    else:\n        NotImplementedError(f\"PowerPC GCC requires manual installation on {sys.platform}.\")\n\n# OpenRISC toolchain.\n# -------------------\n\ndef openrisc_gcc_install():\n    # Linux.\n    # ------\n    if sys.platform.startswith(\"linux\"):\n        os_release = (open(\"/etc/os-release\").read()).lower()\n        # Fedora.\n        if \"fedora\" in os_release:\n            os.system(\"dnf install gcc-or1k-elf\")\n        # Arch.\n        elif \"arch\" in os_release:\n            os.system(\"pacman -S or1k-elf-gcc\")\n        # Alpine.\n        elif \"alpine\" in os_release:\n            os.system(\"apk add gcc-cross-embedded\")\n        # Ubuntu.\n        else:\n            os.system(\"apt install gcc-or1k-elf\")\n\n    # Manual installation.\n    # --------------------\n    else:\n        NotImplementedError(f\"OpenRISC GCC requires manual installation on {sys.platform}.\")\n\n# Run ----------------------------------------------------------------------------------------------\n\ndef main():\n    print_banner()\n    parser = argparse.ArgumentParser()\n\n    # Git Repositories.\n    parser.add_argument(\"--init\",      action=\"store_true\", help=\"Initialize Git repositories.\")\n    parser.add_argument(\"--update\",    action=\"store_true\", help=\"Update Git repositories.\")\n    parser.add_argument(\"--install\",   action=\"store_true\", help=\"Install Git repositories.\")\n    parser.add_argument(\"--user\",      action=\"store_true\", help=\"Install in User-Mode.\")\n    parser.add_argument(\"--config\",    default=\"standard\",  help=\"Install config (minimal, standard, full).\")\n    parser.add_argument(\"--tag\",       default=None,        help=\"Use version from release tag.\")\n\n    # GCC toolchains.\n    parser.add_argument(\"--gcc\", default=None, help=\"Install GCC Toolchain (riscv, powerpc or openrisc).\")\n\n    # Development mode.\n    parser.add_argument(\"--dev\",     action=\"store_true\", help=\"Development-Mode (no Auto-Update of litex_setup.py / Switch to git@github.com URLs).\")\n    parser.add_argument(\"--freeze\",  action=\"store_true\", help=\"Freeze and display current config.\")\n    parser.add_argument(\"--release\", default=None,        help=\"Make release.\")\n\n    # Retro-compatibility.\n    parser.add_argument(\"compat_args\", nargs=\"*\", help=\"Retro-Compatibility arguments (init, update, install or gcc).\")\n    args = parser.parse_args()\n\n    # Handle compat_args.\n    if args.compat_args is not None:\n        for arg in args.compat_args:\n            if arg in [\"init\", \"update\", \"install\"]:\n                setattr(args, arg, True)\n            if arg in [\"gcc\"]:\n                args.gcc = \"riscv\"\n\n    # Location/Auto-Update.\n    litex_setup_location_check()\n    if not args.dev:\n        litex_setup_auto_update()\n\n    # Init.\n    if args.init:\n        ci_run   = (os.environ.get(\"GITHUB_ACTIONS\") == \"true\")\n        dev_mode = args.dev and (not ci_run)\n        litex_setup_init_repos(config=args.config, tag=args.tag, dev_mode=dev_mode)\n\n    # Update.\n    if args.update:\n        litex_setup_update_repos(config=args.config, tag=args.tag)\n\n    # Install.\n    if args.install:\n        litex_setup_install_repos(config=args.config, user_mode=args.user)\n\n    # Freeze.\n    if args.freeze:\n        litex_setup_freeze_repos(config=args.config)\n\n    # Release.\n    if args.release:\n        litex_setup_release_repos(tag=args.release)\n\n    # GCC.\n    os.chdir(os.path.join(current_path))\n    if args.gcc == \"riscv\":\n        riscv_gcc_install()\n    if args.gcc == \"powerpc\":\n        powerpc_gcc_install()\n    if args.gcc == \"openrisc\":\n        openrisc_gcc_install()\n\nif __name__ == \"__main__\":\n    main()\n    \n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.87890625,
          "content": "#!/usr/bin/env python3\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fp:\n    long_description = fp.read()\n\n\nsetup(\n    name                          = \"litex\",\n    version                       = \"2024.08\",\n    description                   = \"Python SoC/Core builder for building FPGA based systems.\",\n    long_description              = long_description,\n    long_description_content_type = \"text/markdown\",\n    author                        = \"Florent Kermarrec\",\n    author_email                  = \"florent@enjoy-digital.fr\",\n    url                           = \"http://enjoy-digital.fr\",\n    download_url                  = \"https://github.com/enjoy-digital/litex\",\n    test_suite                    = \"test\",\n    license                       = \"BSD\",\n    python_requires               = \"~=3.7\",\n    install_requires              = [\n        \"migen\",\n        \"packaging\",\n        \"pyserial\",\n        \"requests\",\n    ],\n    extras_require                = {\n        \"develop\": [\n          \"meson\"\n          \"pexpect\"\n          \"setuptools\"\n          \"requests\"\n        ]\n    },\n    packages                       = find_packages(exclude=(\"test*\", \"sim*\", \"doc*\")),\n    include_package_data           = True,\n    package_data                   = {\n        'litex.soc.doc': ['static/*']\n    },\n    platforms                      = [\"Any\"],\n    keywords                       = \"HDL ASIC FPGA hardware design\",\n    classifiers                    = [\n        \"Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)\",\n        \"Environment :: Console\",\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n    ],\n    entry_points                   = {\n        \"console_scripts\": [\n            # Terminal/Server/Client.\n            \"litex_term   = litex.tools.litex_term:main\",\n            \"litex_server = litex.tools.litex_server:main\",\n            \"litex_cli    = litex.tools.litex_client:main\",\n\n            # SoC Generators.\n            \"litex_soc_gen    = litex.tools.litex_soc_gen:main\",\n            \"litex_periph_gen = litex.tools.litex_periph_gen:main\",\n\n            # Simulation.\n            \"litex_sim=litex.tools.litex_sim:main\",\n\n            # Demos.\n            \"litex_bare_metal_demo=litex.soc.software.demo.demo:main\",\n\n            # Export tools.\n            \"litex_json2dts_linux  = litex.tools.litex_json2dts_linux:main\",\n            \"litex_json2dts_zephyr = litex.tools.litex_json2dts_zephyr:main\",\n            \"litex_json2renode     = litex.tools.litex_json2renode:main\",\n\n            # Development tools.\n            \"litex_read_verilog = litex.tools.litex_read_verilog:main\",\n            \"litex_contributors = litex.tools.litex_contributors:main\",\n        ],\n    },\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}