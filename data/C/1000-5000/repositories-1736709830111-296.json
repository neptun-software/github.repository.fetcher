{
  "metadata": {
    "timestamp": 1736709830111,
    "page": 296,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jonashaag/bjoern",
      "stars": 3018,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.193359375,
          "content": ";; For Emacs users, this will ensure that Emacs uses two-space indents for all\n;; of the files in the bjoern project.\n((nil . ((indent-tabs-mode . nil)\n\t\t (tab-width . 2)\n\t\t (c-basic-offset . 2))))\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2197265625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.py]\nindent_size = 4\n\n[{Makefile,*.sh}]\nindent_style = tab\nindent_size = 8\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "*.pyc\n*.swp\n*~\nbuild/\ndist/\nMANIFEST\nbjoern.egg-info/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1953125,
          "content": "[submodule \"http-parser\"]\n  path = http-parser\n  url = https://github.com/joyent/http-parser\n[submodule \"statsd-c-client\"]\n  path = statsd-c-client\n  url = https://github.com/romanbsd/statsd-c-client\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 3.6123046875,
          "content": "3.2.2 (Sep 11, 2022)\n    - #228, 235 Fix libev paths (Ian Swanson, Nicolas Damgaard Larsen)\n    - #234 Set ``wsgi.input_terminated`` (Nathan Hoad)\n    - Update PyPI description\n\n3.2.1 (Feb 14, 2022)\n    - Fix release\n\n3.2.0 (Feb 13, 2022)\n    - #173 Fix segfault with old interpreters (Goldstein)\n    - #171 Implement FileWrapper.close()\n    - Fix FileWrapper/sendfile with offset\n    - #184 Fix compile flags\n    - #218 Fix SERVER_PORT (Souheil Chelfouh)\n\n3.1.0 (Nov 3, 2019)\n    - #169 Fix blocking accept() (Ionut Negru)\n    - #164 Add support for statsd metrics/events (Mohammad Gufran)\n    - #162 Fix Expect: 100-Continue support (Tom Brennan)\n\n3.0.1 (June 6, 2019)\n    - Fix #158, #160: Correct string type for WSGI environ\n\n3.0.0 (May 7, 2019)\n    - Fix #91: Support for SIGTERM/SIGINT handling\n\n2.2.3 (Oct 22, 2018)\n    - Fix #144: Proper handling of EAGAIN/EINTR (Adam Bouhenguel)\n\n2.2.2 (Aug 15, 2018)\n    - Fix #138: Use Latin1 encoding for unicode strings\n    - Fix #139: Never use chunked responses for HTTP 204 and 304\n\n2.2.1 (June 4, 2018)\n    - Fix #133: Segmentation fault with very long HTTP headers (@szabolcsbalogh)\n\n2.2.0 (Mar 19, 2018)\n    - Fix #130: filewrapper must work with any read()able object\n\n2.1.0 (Mar 1, 2018)\n    - Fix #128: Fix support for io.BytesIO and other pseudo-files\n    - Fix sendfile on BSD and OSX\n\n2.0.5 (Feb 14, 2018)\n    - Fix #122: WSGI environ SERVER_PORT is now a str (Simon Biewald)\n    - Fix #122: WSGI environ SERVER_{PORT,HOST} are now always set (Simon Biewald)\n    - Fix #125: Missing GIL locking (@szabolcsbalogh)\n\n2.0.4 (Nov 22, 2017)\n    - Fix Python 2 segfault\n\n2.0.3 (Nov 20, 2017)\n    - Fix segfault with HTTP header (晏旭瑞)\n\n2.0.2 (Nov 19, 2017)\n    - Fix segfault with large HTTP header\n    - Fix Python 3 unicode header handling\n\n2.0.1 (Sep 1, 2017)\n    - Fix setup.py and `bjoern.version` attribute\n\n2.0.0 (Aug 31, 2017)\n    - Python 3 support (Hua Yanghao, Isaiah Peng). Note that due to the size\n      of this update, version 2.0.0 may be less stable than version 1.4.3.\n\n1.4.3 (Apr 2016)\n    - Fix #88: Infinite loop due to misuse of POSIX API\n\n1.4.2 (Jan 2015)\n    - CVE-2015-0219, see https://www.djangoproject.com/weblog/2015/jan/13/security/\n\n1.4.1 (Aug 2014)\n    - Fix FreeBSD build (Olivier Duchateau)\n\n1.4 (Aug 2014)\n    - Rewrite socket initialization/handling in Python. Makes it possible to\n      run bjoern on ordinary Python `socket.socket` objects. (Jonas Haag)\n\n1.3.4 (Sep 2013)\n    - Fix version 1.3.3\n\n1.3.3 (Sep 2013)\n    - Support for SO_REUSEPORT (David Wilson, #69)\n\n1.3.2 (June 2013)\n    - FreeBSD (sendfile) support (Olivier Duchateu)\n\n1.3.1 (Apr 2013)\n    - Default to keep-alive for HTTP/1.1 connections (James Little, #51)\n\n1.3 (Apr 2013)\n    - Unix socket support (contributed by https://github.com/k3d3)\n    - Restored OS X compatibility (contributed by Patrick Lucas)\n    - Fixed 64bit compile errors\n    - Fixed WSGI filewrapper suppotr (#57)\n    - Tickets closed: #35, #36, #38, #40, #43, #44, #45, #49, #19, #59, #60, #57\n\n1.2 (Apr 2011)\n    - sendfile() support\n    - Python 2.5 compatibility\n\n1.1.1 (Feb 2011)\n    - Fixed a severe memory leak: didn't release the bodies of HTTP requests\n\n1.1 (Jan 2011)\n    - Implemented HTTP/1.1 and 1.0 persistent connections as well as HTTP/1.1\n      chunked responses\n    - Added 'REMOTE_ADDR' (client's IP address) to the WSGI dictionary (#18)\n    - Fixed a possible inifite loop. Thanks to Alexander Shigin for adivce and tests\n    - Split 'bjoern.run' into '.listen' and '.run' while not breaking the old\n      API (contributed by Sergey Shepelev)\n    - Tickets closed: #10, #18, #21, #24, #26, #27, #28, #31\n\n1.0 (Dec 2010)\n    First release on PyPI\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.0625,
          "content": "\n    Copyright (c) 2010-2013 Jonas Haag <jonas@lophus.org> and contributors.\n    All rights reserved.\n    License: 2-clause-BSD (Berkley Software Distribution) license\n\n    http://github.com/jonashaag/bjoern\n\n    Noteworthy contributions by:\n        Patrick Lucas <me@patricklucas.com> (2012) -- OS X support\n        Evan Klitzke <evan@eklitzke.org> (2011)\n        Sergey Shepelev <temotor@gmail.com> (2010) -- listen()/run() separation\n        Alexander Shigin <shigin@msiu.ru> (2010)\n        Kristoffer Kleine <kris.kleine@yahoo.de> (2010) -- setup.py file\n        Friedrich Weber <fred@reichbier.de> (2010) -- Python 2.5 support\n\n    For a full list of contributors have a look at the Git logs.\n\nThe full text of the 2-clause BSD license follows.\n\nThe 2-clause Berkley Software Distribution license\n==================================================\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.068359375,
          "content": "include http-parser/http_parser.[ch]\ninclude bjoern/*\ninclude LICENSE\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.19921875,
          "content": "SOURCE_DIR\t= bjoern\nBUILD_DIR\t= build\nPYTHON\t?= python2\n\nPYTHON_INCLUDE\t= $(shell ${PYTHON}-config --includes)\nPYTHON_LDFLAGS\t= $(shell ${PYTHON}-config --ldflags)\n\nHTTP_PARSER_DIR\t= http-parser\nHTTP_PARSER_OBJ = $(HTTP_PARSER_DIR)/http_parser.o\nHTTP_PARSER_SRC = $(HTTP_PARSER_DIR)/http_parser.c\n\nSTATSD_CLIENT_DIR = statsd-c-client\nSTATSD_CLIENT_OBJ = $(STATSD_CLIENT_DIR)/statsd-client.o\nSTATSD_CLIENT_SRC = $(STATSD_CLIENT_DIR)/statsd-client.c\n\nobjects\t\t= $(HTTP_PARSER_OBJ) $(STATSD_CLIENT_OBJ) \\\n\t\t  $(patsubst $(SOURCE_DIR)/%.c, $(BUILD_DIR)/%.o, \\\n\t\t             $(wildcard $(SOURCE_DIR)/*.c))\n\nCPPFLAGS\t+= $(PYTHON_INCLUDE) -I . -I $(SOURCE_DIR) -I $(HTTP_PARSER_DIR) -I $(STATSD_CLIENT_DIR)\nCFLAGS\t\t+= $(FEATURES) -std=c99 -fno-strict-aliasing -fcommon -fPIC -Wall\nLDFLAGS\t\t+= $(PYTHON_LDFLAGS) -l ev -shared -fcommon\n\nifneq ($(WANT_SIGINT_HANDLING), no)\nFEATURES\t+= -D WANT_SIGINT_HANDLING\nendif\n\nifneq ($(WANT_SIGNAL_HANDLING), no)\nFEATURES\t+= -D WANT_SIGNAL_HANDLING\nendif\n\nifndef SIGNAL_CHECK_INTERVAL\nFEATURES\t+= -D SIGNAL_CHECK_INTERVAL=0.1\nendif\n\nifeq ($(WANT_STATSD), yes)\nFEATURES\t+= -D WANT_STATSD\nelse\nfilter_out\t= $(foreach v,$(2),$(if $(findstring $(1),$(v)),,$(v)))\nobjects\t\t:= $(call filter_out,statsd,$(objects))\nendif\n\nifeq ($(WANT_STATSD_TAGS), yes)\nFEATURES\t+= -D WANT_STATSD_TAGS\nendif\n\nall: prepare-build $(objects) _bjoernmodule\n\nprint-env:\n\t@echo CFLAGS=$(CFLAGS)\n\t@echo CPPFLAGS=$(CPPFLAGS)\n\t@echo LDFLAGS=$(LDFLAGS)\n\t@echo args=$(HTTP_PARSER_SRC) $(wildcard $(SOURCE_DIR)/*.c)\n\nopt: clean\n\tCFLAGS='-O3' make\n\nsmall: clean\n\tCFLAGS='-Os' make\n\n_bjoernmodule:\n\t@echo ' -> ' $(CC) $(CPPFLAGS) $(CFLAGS) $(objects) $(LDFLAGS) -o $(BUILD_DIR)/_bjoern.so\n\t@$(CC) $(CPPFLAGS) $(CFLAGS) $(objects) $(LDFLAGS) -o $(BUILD_DIR)/_bjoern.so\n\t@PYTHONPATH=$$PYTHONPATH:$(BUILD_DIR) ${PYTHON} -c \"import bjoern\"\n\nagain: clean all\n\ndebug:\n\tCFLAGS='${CFLAGS} -D DEBUG -g' make again\n\n$(BUILD_DIR)/%.o: $(SOURCE_DIR)/%.c\n\t@echo ' -> ' $(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@\n\t@$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@\n\n# foo.o: shortcut to $(BUILD_DIR)/foo.o\n%.o: $(BUILD_DIR)/%.o\n\n\nprepare-build:\n\t@mkdir -p $(BUILD_DIR)\n\nclean:\n\t@rm -rf $(BUILD_DIR)/*\n\ndistclean:\n\t@rm -rf dist/\n\nAB\t\t= ab -c 100 -n 10000\nTEST_URL\t= \"http://127.0.0.1:8080/a/b/c?k=v&k2=v2\"\n\nab: ab1 ab2 ab3 ab4\n\nab1:\n\t$(AB) $(TEST_URL)\nab2:\n\t@echo 'asdfghjkl=asdfghjkl&qwerty=qwertyuiop' > /tmp/bjoern-post.tmp\n\t$(AB) -p /tmp/bjoern-post.tmp $(TEST_URL)\nab3:\n\t$(AB) -k $(TEST_URL)\nab4:\n\t@echo 'asdfghjkl=asdfghjkl&qwerty=qwertyuiop' > /tmp/bjoern-post.tmp\n\t$(AB) -k -p /tmp/bjoern-post.tmp $(TEST_URL)\n\nwget:\n\twget -O - -q -S $(TEST_URL)\n\nvalgrind:\n\tvalgrind --leak-check=full --show-reachable=yes ${PYTHON} tests/empty.py\n\ncallgrind:\n\tvalgrind --tool=callgrind ${PYTHON} tests/wsgitest-round-robin.py\n\nmemwatch:\n\twatch -n 0.5 \\\n\t  'cat /proc/$$(pgrep -n ${PYTHON})/cmdline | tr \"\\0\" \" \" | head -c -1; \\\n\t   echo; echo; \\\n\t   tail -n +25 /proc/$$(pgrep -n ${PYTHON})/smaps'\n\npackages:\n\t${PYTHON} setup.py sdist\n\t$(MAKE) -C packaging all\n\nupload: packages\n\ttwine upload dist/*.tar.gz dist/*.whl\n\n$(HTTP_PARSER_OBJ):\n\t$(MAKE) -C $(HTTP_PARSER_DIR) http_parser.o CFLAGS_DEBUG_EXTRA=-fPIC CFLAGS_FAST_EXTRA=-fPIC\n\n$(STATSD_CLIENT_OBJ):\n\t$(MAKE) -C $(STATSD_CLIENT_DIR) statsd-client.o CFLAGS=-fPIC\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.7939453125,
          "content": "bjoern: Fast And Ultra-Lightweight HTTP/1.1 WSGI Server\n=======================================================\n\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n   :alt: Join the chat at https://gitter.im/jonashaag/bjoern\n   :target: https://gitter.im/jonashaag/bjoern?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\nA screamingly fast, ultra-lightweight WSGI_ server for CPython 2 and CPython 3,\nwritten in C using Marc Lehmann's high performance libev_ event loop and\nRyan Dahl's http-parser_.\n\nWhy It's Cool\n~~~~~~~~~~~~~\nbjoern is the *fastest*, *smallest* and *most lightweight* WSGI server out there,\nfeaturing\n\n* ~ 1000 lines of C code\n* Memory footprint ~ 600KB\n* Python 2 and Python 3 support (thanks @yanghao!)\n* Single-threaded and without coroutines or other crap\n* Can bind to TCP `host:port` addresses and Unix sockets (thanks @k3d3!)\n* Full persistent connection (\"*keep-alive*\") support in both HTTP/1.0 and 1.1,\n  including support for HTTP/1.1 chunked responses\n\nInstallation\n~~~~~~~~~~~~\n``pip install bjoern``. See `wiki <https://github.com/jonashaag/bjoern/wiki/Installation>`_ for details.\n\nUsage\n~~~~~\n\nFlask example\n-------------\n\n.. code-block:: python\n\n   from flask import Flask\n\n   app = Flask(__name__)\n\n   @app.route(\"/\")\n   def hello_world():\n       return \"Hello, World!\"\n\n   if __name__ == \"__main__\":\n       import bjoern\n\n       bjoern.run(app, \"127.0.0.1\", 8000)\n\n\nAdvanced usage\n--------------\n\n.. code-block:: python\n\n   # Bind to TCP host/port pair:\n   bjoern.run(wsgi_application, host, port)\n\n   # TCP host/port pair, enabling SO_REUSEPORT if available.\n   bjoern.run(wsgi_application, host, port, reuse_port=True)\n\n   # Bind to Unix socket:\n   bjoern.run(wsgi_application, 'unix:/path/to/socket')\n\n   # Bind to abstract Unix socket: (Linux only)\n   bjoern.run(wsgi_application, 'unix:@socket_name')\n\n   # Enable statsd metrics. See instrumentation.md for details.\n   bjoern.run(wsgi_application, host, port, statsd=...)\n\nAlternatively, the mainloop can be run separately:\n\n.. code-block:: python\n\n   bjoern.listen(wsgi_application, host, port)\n   bjoern.run()\n\n   # With metrics. See instrumentation.md for details.\n   bjoern.listen(wsgi_application, host, port)\n   bjoern.run(statsd=...)\n\nYou can also simply pass a Python socket(-like) object. Note that you are responsible\nfor initializing and cleaning up the socket in that case.\n\n.. code-block:: python\n\n   bjoern.server_run(socket_object, wsgi_application)\n   bjoern.server_run(filedescriptor_as_integer, wsgi_application)\n\n   # This needs manual compilation with `WANT_STATSD=yes`\n   bjoern.server_run(socket_object, wsgi_application, enable_statsd=True)\n\n.. _WSGI:         http://www.python.org/dev/peps/pep-0333/\n.. _libev:        http://software.schmorp.de/pkg/libev.html\n.. _http-parser:  https://github.com/joyent/http-parser\n"
        },
        {
          "name": "bjoern.py",
          "type": "blob",
          "size": 3.23828125,
          "content": "import os\nimport socket\nimport _bjoern\n\n\n_default_instance = None\nDEFAULT_LISTEN_BACKLOG = 1024\n\ndef bind_and_listen(host, port=None, reuse_port=False,\n                    listen_backlog=DEFAULT_LISTEN_BACKLOG):\n    if host.startswith(\"unix:@\"):\n        # Abstract UNIX socket: \"unix:@foobar\"\n        sock = socket.socket(socket.AF_UNIX)\n        sock.bind('\\0' + host[6:])\n    elif host.startswith(\"unix:\"):\n        # UNIX socket: \"unix:/tmp/foobar.sock\"\n        sock = socket.socket(socket.AF_UNIX)\n        sock.bind(host[5:])\n    else:\n        # IP socket\n        sock = socket.socket(socket.AF_INET)\n        # Set SO_REUSEADDR to make the IP address available for reuse\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if reuse_port:\n            # Enable \"receive steering\" on FreeBSD and Linux >=3.9. This allows\n            # multiple independent bjoerns to bind to the same port (and\n            # ideally also set their CPU affinity), resulting in more efficient\n            # load distribution.  https://lwn.net/Articles/542629/\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        sock.bind((host, port))\n\n    sock.setblocking(False)\n\n    sock.listen(listen_backlog)\n\n    return sock\n\n\ndef server_run(sock, wsgi_app, statsd=None):\n    args = [sock, wsgi_app]\n\n    if _bjoern.features.get('has_statsd'):\n        if statsd:\n            args.extend([int(statsd['enable']), statsd['host'], statsd['port'], statsd['ns'], statsd.get('tags')])\n        else:\n            args.extend([0, None, 0, None, None])\n\n    _bjoern.server_run(*args)\n\n\ndef listen(wsgi_app, host, port=None, reuse_port=False,\n           listen_backlog=DEFAULT_LISTEN_BACKLOG):\n    \"\"\"\n    Makes bjoern listen to 'host:port' and use 'wsgi_app' as WSGI application.\n    (This does not run the server mainloop.)\n\n    'reuse_port' -- whether to set SO_REUSEPORT (if available on platform)\n    'listen_backlog' -- listen backlog value (default: 1024)\n    \"\"\"\n    global _default_instance\n    if _default_instance:\n        raise RuntimeError(\"Only one global server instance possible\")\n    sock = bind_and_listen(host, port, reuse_port,\n                           listen_backlog=listen_backlog)\n    _default_instance = (sock, wsgi_app)\n\n    return sock\n\n\ndef run(*args, **kwargs):\n    \"\"\"\n    run(*args, **kwargs):\n        Calls listen(*args, **kwargs) and starts the server mainloop.\n\n    run():\n        Starts the server mainloop. listen(...) has to be called before calling\n        run() without arguments.\"\n    \"\"\"\n    global _default_instance\n\n    statsd = kwargs.pop('statsd', None)\n\n    if args or kwargs:\n        # Called as `bjoern.run(wsgi_app, host, ...)`\n        listen(*args, **kwargs)\n    else:\n        # Called as `bjoern.run()`\n        if not _default_instance:\n            raise RuntimeError(\"Must call bjoern.listen(wsgi_app, host, ...) \"\n                               \"before calling bjoern.run() without \"\n                               \"arguments.\")\n\n    sock, wsgi_app = _default_instance\n    try:\n        server_run(sock, wsgi_app, statsd)\n    finally:\n        if sock.family == socket.AF_UNIX:\n            filename = sock.getsockname()\n            if filename[0] != '\\0':\n                os.unlink(sock.getsockname())\n        sock.close()\n        _default_instance = None\n"
        },
        {
          "name": "bjoern",
          "type": "tree",
          "content": null
        },
        {
          "name": "http-parser",
          "type": "commit",
          "content": null
        },
        {
          "name": "instrumentation.md",
          "type": "blob",
          "size": 2.755859375,
          "content": "## Instrumentation\n\nBjoern can export connection and request metrics to statsd. If you want support for instrumentation you must compile\nbjoern manually with\n\n```bash\nBJOERN_WANT_STATSD=yes python setup.py install\n# or\nWANT_STATSD=yes make all\n```\n\nyou can also enable Dogstatsd tags support by compiling with\n\n```bash\nBJOERN_WANT_STATSD=yes BJOERN_WANT_STATSD_TAGS=yes python setup.py install\n# or\nWANT_STATSD=yes WANT_STATSD_TAGS=yes make all\n```\n\nAfter building with statsd support you can enable statsd metrics on server boot by setting `enable_statsd=True`, e.g.\n\n```python\nbjoern.listen(wsgi_application, host, port)\nbjoern.run(statsd={'enable': True, 'host': '...', port: ..., ns: 'bjoern'})\n\n# With tags\n# Note that the tags parameter takes a comma separated string of tags, not a list of strings.\nbjoern.run(statsd={'enable': True, 'host': '...', port: ..., ns: 'bjoern', 'tags': 'app:my-app-name,zone:central-europe'})\n```\n\nFollowing metrics are exposed:\n\n| Name | Type | Description |\n|:------:|:------:|:-------------|\n| `conn.accept.error` | increment | Incremented if bjoern fails to accept the socket connection from client |\n| `conn.accept.success` | increment | Incremented when a socket connection is accepted successfully |\n| `req.error.client_disconnected` | increment | Incremented if client disconnects before bjoern could read request |\n| `req.error.read` | increment | Incremented if bjoern fails to read request data from a valid connection |\n| `req.error.parse` | increment | Incremented if bjoern fails to parse the content as valid HTTP request |\n| `req.success.read` | increment | Incremented every time a request is read and parsed successfully |\n| `req.error.internal` | increment | Incremented if bjoern fails to successfully call the WSGI application |\n| `req.active` | increment | Incremented when a request is accepted as a valid one and bjoern is expecting more data from client |\n| `req.done` | increment | Incremented when a request is read and parsed completely and no more data is expected from client, server is expected to send response now |\n| `req.aborted` | increment | Incremented if the request is aborted before it was read or parsed completely. At the moment this is same as `req.error.read` but logically these are two different things and will diverge in future |\n| `resp.active` | increment | Incremented when bjoern is sending response and |\n| `resp.done` | increment | Incremented when bjoern is done sending the response |\n| `resp.done.keepalive` | increment | Incremented when the response is sent but the connection is kept alive |\n| `resp.conn.close` | increment | Incremented when the response is sent and connection is closed |\n| `resp.aborted` | increment | Incremented when there is an error in sending response. At this point the connection is also closed |\n\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0087890625,
          "content": "requests\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.5302734375,
          "content": "import os\nimport glob\nfrom setuptools import setup, Extension\n\nlong_description = open(os.path.join(os.path.dirname(__file__), \"README.rst\")).read()\n\nWANT_SIGINT_HANDLING = os.environ.get('BJOERN_WANT_SIGINT_HANDLING', True)\nWANT_SIGNAL_HANDLING = os.environ.get('BJOERN_WANT_SIGNAL_HANDLING', True)\nSIGNAL_CHECK_INTERVAL = os.environ.get('BJOERN_SIGNAL_CHECK_INTERVAL', '0.1')\nWANT_STATSD = os.environ.get('BJOERN_WANT_STATSD', False)\nWANT_STATSD_TAGS = os.environ.get('BJOERN_WANT_STATSD_TAGS', False)\n\ncompile_flags = [('SIGNAL_CHECK_INTERVAL', SIGNAL_CHECK_INTERVAL)]\nif WANT_SIGNAL_HANDLING:\n    compile_flags.append(('WANT_SIGNAL_HANDLING', 'yes'))\nif WANT_SIGINT_HANDLING:\n    compile_flags.append(('WANT_SIGINT_HANDLING', 'yes'))\nif WANT_STATSD:\n    compile_flags.append(('WANT_STATSD', 'yes'))\n    if WANT_STATSD_TAGS:\n        compile_flags.append(('WANT_STATSD_TAGS', 'yes'))\n\nSOURCE_FILES = [os.path.join('http-parser', 'http_parser.c')] + \\\n               [os.path.join('statsd-c-client', 'statsd-client.c')] + \\\n               sorted(glob.glob(os.path.join('bjoern', '*.c')))\n\nif not WANT_STATSD:\n    SOURCE_FILES.remove('statsd-c-client/statsd-client.c')\n    SOURCE_FILES.remove('bjoern/statsd_tags.c')\n\nbjoern_extension = Extension(\n    '_bjoern',\n    sources       = SOURCE_FILES,\n    libraries     = ['ev'],\n    include_dirs  = ['http-parser', 'statsd-c-client', '/usr/include/libev',\n                     '/opt/local/include', '/opt/homebrew/include', '/usr/local/include'],\n    library_dirs  = ['/opt/homebrew/lib/', '/usr/local/lib'],\n    define_macros = compile_flags,\n    extra_compile_args = ['-std=c99', '-fno-strict-aliasing', '-fcommon',\n                          '-fPIC', '-Wall', '-Wextra', '-Wno-unused-parameter',\n                          '-Wno-missing-field-initializers', '-g'],\n)\n\nsetup(\n    name         = 'bjoern',\n    author       = 'Jonas Haag',\n    author_email = 'jonas@lophus.org',\n    license      = '2-clause BSD',\n    url          = 'https://github.com/jonashaag/bjoern',\n    description  = 'A screamingly fast Python 2 + 3 WSGI server written in C.',\n    version      = '3.2.2',\n    long_description = long_description,\n    classifiers  = ['Development Status :: 4 - Beta',\n                    'License :: OSI Approved :: BSD License',\n                    'Programming Language :: C',\n                    'Programming Language :: Python :: 2',\n                    'Programming Language :: Python :: 3',\n                    'Topic :: Internet :: WWW/HTTP :: WSGI :: Server'],\n    py_modules   = ['bjoern'],\n    ext_modules  = [bjoern_extension]\n)\n"
        },
        {
          "name": "statsd-c-client",
          "type": "commit",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}