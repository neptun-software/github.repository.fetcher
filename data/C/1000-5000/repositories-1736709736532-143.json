{
  "metadata": {
    "timestamp": 1736709736532,
    "page": 143,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "varnishcache/varnish-cache",
      "stars": 3737,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.064453125,
          "content": "((c-mode . ((indent-tabs-mode . t)\n\t    (c-file-style . \"BSD\"))))\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1865234375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nmax_line_length = 80\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{c,h}]\nindent_style = tab\nindent_size = 8\ntab_width = 8\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.423828125,
          "content": "# Matches ALL Makefile and Makefile.in occurrences\nMakefile\nMakefile.in\n\n# ...\n_*\n.deps/\n.libs/\n*.o\n*.a\n*.lo\n*.la\n*~\n*.sw[op]\n*.trs\n*.log\n\n# Various auto-tools artifacts\n/aclocal.m4\n/autom4te.cache/\n/build-aux\n/compile\n/config.guess\n/config.h\n/config.h.in\n/config.status\n/config.sub\n/configure\n/configure.lineno\n/depcomp\n/install-sh\n/libtool\n/ltmain.sh\n/m4/libtool.m4\n/m4/ltoptions.m4\n/m4/ltsugar.m4\n/m4/ltversion.m4\n/m4/lt~obsolete.m4\n/missing\n/stamp-h1\n/varnishapi.pc\n/varnishapi-uninstalled.pc\nTAGS\ntags\ncscope.*out\n.dirstamp\n\n# Default vcl made from bin/varnishd/default.vcl\n/bin/varnishd/builtin_vcl.c\n/etc/builtin.vcl\n\n# Various auto-generated code snippets\n/bin/varnishd/vhp_hufdec.h\n/bin/varnishd/vhp_gen_hufdec\n/bin/varnishtest/vtc_h2_dectbl.h\n/include/vcl.h\n/include/vrt_obj.h\n/include/vmod_abi.h\n/include/tbl/vcl_returns.h\n/include/tbl/vrt_stv_var.h\n/include/tbl/vcl_context.h\n/include/vcs_version.h\n/lib/libvcc/vcc_fixed_token.c\n/lib/libvcc/vcc_obj.c\n/lib/libvcc/vcc_token_defs.h\n/lib/libvcc/vcc_types.h\n/lib/libvarnishapi/vsl2rst\n/lib/libvarnishapi/vxp_fixed_token.c\n/lib/libvarnishapi/vxp_tokens.h\n\n# Stats\n/lib/libvsc/VSC_*.c\n/lib/libvsc/VSC_*.h\n/lib/libvsc/VSC_*.rst\n/lib/libvsc/counters.rst\n\n# Misc. generated files for included vmods.\n/vmod/VSC_*.c\n/vmod/VSC_*.h\n/vmod/vcc_*_if.c\n/vmod/vcc_*_if.h\n/vmod/vmod_*.rst\n\n# Man-files and binaries\n/man/*.1\n/man/*.3\n/man/*.7\n/doc/sphinx/include\n/bin/varnishadm/varnishadm\n/bin/varnishd/varnishd\n/bin/varnishhist/varnishhist\n/bin/varnishlog/varnishlog\n/bin/varnishncsa/varnishncsa\n/bin/varnishstat/varnishstat\n/bin/varnishstat/varnishstat_help_gen\n/bin/varnishstat/varnishstat_curses_help.c\n/bin/varnishstat/vsc2rst\n/bin/varnishtest/teken_state.h\n/bin/varnishtest/varnishtest\n/bin/varnishtop/varnishtop\n\n# Doc-stuff generated from xml\n/doc/*.html\n/doc/sphinx/build/\n/doc/sphinx/conf.py\n/doc/sphinx/reference/vmod_*.generated.rst\n\n\n# graphviz-generated\n/doc/graphviz/*.pdf\n\n# NetBeans insists on this\n/nbproject/private/\n\n# Test droppings\n/bin/varnishd/*_test\n/bin/varnishtest/tests/*.log-t\n/include/vrt_test*\n/include/vbm_test\n/lib/libvarnish/*_test\n/lib/libvarnishapi/*_test\n\n# GCOV droppings\n*.gcda\n*.gcno\n\n# vtc-bisect.sh default vtc\n/bisect.vtc\n\n# vtest.sh droppings\n/tools/tmp/\n/tools/_vtest_tmp/\n/tools/varnish-cache/\n/tools/vt_key\n/tools/vt_key.pub\n\n# fuzzers\n/bin/varnishd/esi_parse_fuzzer\n\n# Coverity output\n/cov-int\n/myproject.tgz\n\n# Witness droppings\nwitness.dot\nwitness.svg\n\n# Flexelint droppings\n_.fl\n_.fl.old\n"
        },
        {
          "name": ".lgtm.yml",
          "type": "blob",
          "size": 0.1669921875,
          "content": "queries:\n  - exclude: cpp/empty-block\n  - exclude: cpp/missing-header-guard\n  - exclude: cpp/short-global-name\nextraction:\n  cpp:\n    prepare:\n      packages: \"python3.7\"\n"
        },
        {
          "name": ".syntastic_c_config",
          "type": "blob",
          "size": 0.048828125,
          "content": "let g:syntastic_c_include_dirs = [\".\", \"include\"]\n"
        },
        {
          "name": "CONTRIBUTING",
          "type": "blob",
          "size": 0.8642578125,
          "content": "Contributing to Varnish Cache\n=============================\n\nOfficial development tree is here:\n\n    https://github.com/varnishcache/varnish-cache\n\nThese days we prefer patches as pull requests directly to that tree.\n\nBugreports go there too.\n\nOur main project communication is through our developer IRC channel::\n\n\t#varnish-hacking on server irc.linpro.no\n\n(That channel is not for user questions, use the #varnish channel for that.)\n\nMondays at 15:00 EU time we hold our weekly \"bugwash\" where we go\nthrough new (and old) tickets.  It speeds things up a lot if you\ncan join the channel and answer questions directly when we go over\nthe ticket.\n\nGitHub pull requests\n--------------------\n\nPull requests are handled like other tickets.\n\nTrivial pull requests (fix typos, etc) are welcomed, but they may be committed\nby a core team member and the author credited in the commit message.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.0927734375,
          "content": "\nPlease note that this file is no longer maintained.  Please refer to the\nchanges files in doc/"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.708984375,
          "content": "\t\t      Installation Instructions\n\nSee https://varnish-cache.org/docs/trunk/installation/install_source.html\nfor complete and up to date install instructions.\n\nThis file only mentions the basic steps:\n\n* Install prerequisites\n\n* When building from the source repository, run\n\n\tsh autogen.sh\n\n* To build and install Varnish, run\n\n\tsh configure\n\tmake\n\tmake install\n\nVarnish will store run-time state in /var/run/varnishd; you may\nwant to tune this using configure's --localstatedir parameter.\n\nAdditional configure options of interest:\n\n  --enable-developer-warnings\n                          enable strict warnings (default is NO)\n  --enable-debugging-symbols\n                          enable debugging symbols (default is NO)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4228515625,
          "content": "The compilation of software known as \"Varnish Cache\" is distributed\nunder the following terms:\n\nCopyright (c) 2006 Verdens Gang AS\nCopyright (c) 2006-2021 Varnish Software AS\nAll rights reserved.\n\nSPDX-License-Identifier: BSD-2-Clause\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.0205078125,
          "content": "ACLOCAL_AMFLAGS = -I m4 -I .\n\nSUBDIRS = include lib bin vmod etc doc man contrib\n\nTESTS = tools/magic_check.sh\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = varnishapi.pc\n\nm4dir = $(datadir)/aclocal\nm4_DATA = varnish.m4 varnish-legacy.m4\n\nCLEANFILES = \\\n\tcscope.in.out \\\n\tcscope.out \\\n\tcscope.po.out \\\n\twitness.dot \\\n\twitness.svg\n\nEXTRA_DIST = \\\n\t$(TESTS) \\\n\tREADME.rst \\\n\tREADME.Packaging \\\n\tLICENSE \\\n\tautogen.sh \\\n\tvarnishapi.pc.in \\\n\tvarnish.m4 \\\n\tvarnish-legacy.m4 \\\n\tvsc.am \\\n\tvtc.am \\\n\twflags.py\n\nCONFIGURE_DEPENDENCIES = wflags.py\n\nAM_DISTCHECK_CONFIGURE_FLAGS = \\\n    --enable-developer-warnings \\\n    --enable-debugging-symbols \\\n    --enable-dependency-tracking \\\n    --with-contrib \\\n    CFLAGS=\"$(EXTCFLAGS)\"\n\nif WITH_UNWIND\nAM_DISTCHECK_CONFIGURE_FLAGS += --with-unwind\nendif\n\ninstall-data-local:\n\t$(install_sh) -d -m 0755 $(DESTDIR)$(localstatedir)/varnish\n\n\ndistclean-local:\n\tfind . '(' -name '*.gcda' -o -name '*.gcda' ')' -exec rm '{}' ';'\n\ndistcleancheck_listfiles = \\\n\tfind . -type f -exec sh -c 'test -f $(srcdir)/$$1 || echo $$1' \\\n\t\tsh '{}' ';'\n\nvtest-clean:\n\t$(am__remove_distdir)\n\n# XXX: This is a hack to ensure we have a built source tree when\n# running make dist If we had used non-recursive make we could have\n# solved it better, but we don't, so use this at least for now.\nLICENSE: all\n\n# XXX: This is a similar hack to ensure we have a built varnishtest\n# (and technically any other binary that may be involved in a VTC)\n# before we try to run tests anywhere in the tree.\ncheck-recursive: all\n\n# XXX: This is the exact same hack since some parts of the documentation\n# are generated as regular targets but needed by the html special target.\nhtml-recursive: all\n\ncscope:\n\t-rm -f cscope*\n\tfind . -name '*.[hcS]' > cscope.files\n\tcscope -b\n\ngcov_digest:\n\t${PYTHON} tools/gcov_digest.py -o _gcov\n\nwitness.dot: all\n\t$(MAKE) check AM_VTC_LOG_FLAGS=-pdebug=+witness\n\t$(AM_V_GEN) $(srcdir)/tools/witness.sh witness.dot bin/varnishtest/ \\\n\t\tvmod/\n\n.dot.svg:\n\t$(AM_V_GEN) $(DOT) -Tsvg $< >$@\n\nwitness: witness.svg\n\n.PHONY: cscope witness.dot\n"
        },
        {
          "name": "README.Packaging",
          "type": "blob",
          "size": 0.775390625,
          "content": "Packaging\n=========\n\nVarnish Cache packaging files are kept outside of the main distribution.\n\nThe main reason for this is to decouple the development work from the packaging work.\n\nWe want to be able to tag a release and do a tarball release without having\nto wait for the packagers to finish their work/changes.\n\n\nOfficial packages\n-----------------\n\nThe official Debian and Redhat packages are built by the Varnish Cache team\nand made available on https://packagecloud.io/varnishcache/ .\n\nPackaging files and scripts for Debian and Redhat:\n\n    https://github.com/varnishcache/pkg-varnish-cache\n\n\nThird-party packages\n--------------------\n\nVarnish Cache is built and packaged in many different operating systems and\ndistributions. Please see https://varnish-cache.org/ for more information.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 0.935546875,
          "content": "..\n\tCopyright (c) 2016-2020 Varnish Software AS\n\tSPDX-License-Identifier: BSD-2-Clause\n\tSee LICENSE file for full text of license\n\nVarnish Cache\n=============\n\nThis is Varnish Cache, the high-performance HTTP accelerator.\n\nDocumentation and additional information about Varnish is available on\nhttps://www.varnish-cache.org/\n\nTechnical questions about Varnish and this release should be addressed\nto <varnish-misc@varnish-cache.org>.\n\nPlease see CONTRIBUTING for how to contribute patches and report bugs.\n\nFor questions about commercial support and services related to Varnish\nsee the `Varnish HTTP Cache Business page\n<https://varnish-cache.org/business/index.html>`_ .\n\n.. |ccibadge| image:: https://circleci.com/gh/varnishcache/varnish-cache/tree/master.svg?style=svg\n    :target: https://circleci.com/gh/varnishcache/varnish-cache/tree/master\n.. _vtest: https://varnish-cache.org/vtest/\n\nCircleCI tests: |ccibadge|\n\nMore platforms are tested via vtest_\n"
        },
        {
          "name": "autogen.des",
          "type": "blob",
          "size": 0.9345703125,
          "content": "#!/bin/sh\n#\n# Use this when doing code development\n\nSRCDIR=${SRCDIR:-$(dirname \"$0\")}\n\nset -ex\n\nmake -k distclean > /dev/null 2>&1 || true\n\n# Prefer CLANG if we have it, and have not given preferences\nif command -v clang >/dev/null && test -z \"$CC\" ; then\n\tCC=clang\n\texport CC\nfi\n\nif [ \"x$DST\" != \"x\" ] ; then\n\t:\nelif [ \"x`uname`\" = \"xFreeBSD\" ] ; then\n\tDST=\"--prefix=/usr/local --mandir=/usr/local/man\"\nelse\n\tDST=\"--prefix=/opt/varnish --mandir=/opt/varnish/man\"\nfi\n\nPERSISTENT=--with-persistent-storage\n\nif [ `uname -m` = \"s390x\" ] ; then\n\t# ASLR makes this impossible\n\tPERSISTENT=\nfi\n\nrm -f $SRCDIR/configure\nautoreconf -i -v $SRCDIR\n\n# NB: Workaround for make distcheck not working with\n# NB: FreeBSD's make on -current\n# env MAKE=gmake \\\n$SRCDIR/configure \\\n    $DST \\\n    --enable-maintainer-mode \\\n    --enable-developer-warnings \\\n    --enable-debugging-symbols \\\n    --enable-dependency-tracking \\\n    ${PERSISTENT} \\\n    --with-contrib \\\n    \"$@\"\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.0712890625,
          "content": "#!/bin/sh\n#\n# Use autogen.des when doing code development\n\nautoreconf -i\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 25.22265625,
          "content": "AC_PREREQ([2.69])\nAC_COPYRIGHT([Copyright (c) 2006 Verdens Gang AS\nCopyright (c) 2006-2024 Varnish Software\nCopyright 2010-2024 UPLEX - Nils Goroll Systemoptimierung])\nAC_REVISION([$Id$])\nAC_INIT([Varnish], [trunk], [varnish-dev@varnish-cache.org])\nAC_CONFIG_SRCDIR(include/miniobj.h)\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_USE_SYSTEM_EXTENSIONS\n\nPACKAGE_BRANCH=${PACKAGE_VERSION%.*}\nAC_SUBST([PACKAGE_BRANCH])\nAC_DEFINE_UNQUOTED([PACKAGE_BRANCH], [\"$PACKAGE_BRANCH\"],\n\t[Define the branch of this package.])\n\nCFLAGS=\"$CFLAGS -DZ_PREFIX\"\n\n# save command line CFLAGS for use in VCC_CC (to pass through things like -m64)\n# and make distcheck configure\nOCFLAGS=\"$CFLAGS\"\nEXTCFLAGS=\"$CFLAGS\"\nAC_SUBST(EXTCFLAGS)\n\nAC_CANONICAL_TARGET\nAC_LANG(C)\n\nAM_MAINTAINER_MODE([disable])\nAM_INIT_AUTOMAKE([1.13 foreign color-tests parallel-tests subdir-objects])\nAM_EXTRA_RECURSIVE_TARGETS([recheck])\nAM_SILENT_RULES([yes])\nAC_DISABLE_STATIC\nLT_INIT\n\n# Checks for programs.\nAC_PROG_CC\n# XXX remove the next line when AC_PREREQ >= 2.70 and\n# replace with check of $ac_prog_cc_stdc\nAC_PROG_CC_C99\n\nAX_PTHREAD(,[AC_MSG_ERROR([Could not configure pthreads support])])\n\nLIBS=\"$PTHREAD_LIBS $LIBS\"\nCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\nCC=\"$PTHREAD_CC\"\n\nAC_PROG_INSTALL\n\nAC_ARG_WITH([rst2man],\n  AS_HELP_STRING([--with-rst2man=PATH], [Location of rst2man (auto)]),\n  [RST2MAN=\"$withval\"],\n  [AC_CHECK_PROGS(RST2MAN,\n    [rst2man-3.6 rst2man-3 rst2man rst2man.py],\n    [no])])\nif test \"x$RST2MAN\" = \"xno\"; then\n  AC_MSG_ERROR(\n    [rst2man is needed to build Varnish, please install python3-docutils.])\nfi\n\nAC_ARG_WITH([sphinx-build],\n  AS_HELP_STRING([--with-sphinx-build=PATH], [Location of sphinx-build (auto)]),\n  [SPHINX=\"$withval\"],\n  [AC_CHECK_PROGS(SPHINX,\n    [sphinx-build-3.6 sphinx-build-3 sphinx-build],\n    [no])])\nif test \"x$SPHINX\" = \"xno\"; then\n  AC_MSG_ERROR(\n    [sphinx-build is needed to build Varnish, please install python3-sphinx.])\nfi\n\nAC_ARG_WITH([rst2html],\n  AS_HELP_STRING([--with-rst2html=PATH], [Location of rst2html (auto)]),\n  [RST2HTML=\"$withval\"],\n  [AC_CHECK_PROGS(RST2HTML,\n     [rst2html-3.6 rst2html-3 rst2html rst2html.py],\n     \"no\")])\n\nif test \"x$RST2HTML\" = \"xno\"; then\n   AC_MSG_ERROR(\n     [rst2html not found - (Weird, we found rst2man?!)])\nfi\n\nAC_ARG_VAR([DOT], [The dot program from graphviz to build SVG graphics])\nAM_MISSING_PROG([DOT], [dot])\nAC_CHECK_PROGS([DOT], [dot])\n\n# Define VMOD flags\n_VARNISH_VMOD_LDFLAGS\n\n# Check for python.\n_VARNISH_CHECK_PYTHON\n\n# Check for libraries.\n_VARNISH_SEARCH_LIBS(pthread, pthread_create, [thr pthread c_r])\n_VARNISH_CHECK_LIB(dl, dlopen)\n_VARNISH_CHECK_LIB(socket, socket)\n_VARNISH_CHECK_LIB(nsl, getaddrinfo)\n\nAC_SUBST(NET_LIBS, \"${SOCKET_LIBS} ${NSL_LIBS}\")\n\n# Userland slab allocator from Solaris, ported to other systems\nAC_CHECK_HEADERS([umem.h])\n\n# More portable vmb.h\nAC_CHECK_HEADERS([stdatomic.h])\n\n# XXX: This _may_ be for OS/X\nLT_LIB_M\nAC_SUBST(LIBM)\n\nm4_ifndef([PKG_PROG_PKG_CONFIG], [m4_fatal([pkg.m4 missing, please install pkg-config])])\nPKG_PROG_PKG_CONFIG\nif test -n $PKG_CONFIG; then\n   PKG_CHECK_MODULES([PCRE2], [libpcre2-8])\nelse\n   AC_CHECK_PROG(PCRE2_CONFIG, pcre2-config, pcre2-config)\n   AC_ARG_WITH(pcre2-config,\n               AS_HELP_STRING([--with-pcre2-config=PATH],\n                              [Location of PCRE2 pcre2-config (auto)]),\n               [pcre2_config=\"$withval\"],\n               [pcre2_config=\"\"])\n\n  if test \"x$pcre2_config\" != \"x\" ; then\n    AC_MSG_CHECKING(for $pcre2_config)\n\n    if test -f $pcre2_config ; then\n      PCRE2_CONFIG=$pcre2_config\n      AC_MSG_RESULT(yes)\n    else\n      AC_MSG_RESULT(no - searching PATH)\n    fi\n  fi\n  if test \"x$PCRE2_CONFIG\" = \"x\"; then\n    AC_CHECK_PROGS(PCRE2_CONFIG, pcre2-config)\n  fi\n  PCRE2_CFLAGS=`$PCRE2_CONFIG --cflags`\n  PCRE2_LIBS=`$PCRE2_CONFIG --libs8`\nfi\nAC_SUBST(PCRE2_CFLAGS)\nAC_SUBST(PCRE2_LIBS)\n\nsave_LIBS=\"${LIBS}\"\nLIBS=\"${LIBS} ${PCRE2_LIBS}\"\nAC_CHECK_FUNCS([pcre2_set_depth_limit_8], [\n  AC_DEFINE([HAVE_PCRE2_SET_DEPTH_LIMIT], [1], [Use pcre2_set_depth_limit()])\n])\nLIBS=\"${save_LIBS}\"\n\n# --enable-pcre2-jit\nAC_ARG_ENABLE(pcre2-jit,\n  AS_HELP_STRING([--enable-pcre2-jit],\n    [use the PCRE2 JIT compiler (default is YES)]),\n    [],\n    [enable_pcre2_jit=yes])\nif test \"$enable_pcre2_jit\" = yes; then\n  AC_DEFINE([USE_PCRE2_JIT], [1], [Use the PCRE2 JIT compiler])\nfi\n\n\nAC_CHECK_HEADERS([edit/readline/readline.h],\n\t[AC_DEFINE([HAVE_LIBEDIT], [1], [Define if we have libedit])\n\tLIBEDIT_LIBS=\"-ledit\"],\n\n\t[PKG_CHECK_MODULES([LIBEDIT], [libedit],\n\t\t[\n\t\t# having the module does not imply having the header\n\t\tAC_SUBST(LIBEDIT_CFLAGS)\n\t\tAC_SUBST(LIBEDIT_LIBS)\n\t\tsave_CFLAGS=\"${CFLAGS}\"\n\t\tCFLAGS=\"${CFLAGS} ${LIBEDIT_CFLAGS}\"\n\t\tAC_CHECK_HEADERS([editline/readline.h],\n\t\t\t\t  [AC_DEFINE([HAVE_LIBEDIT], [1], [Define if we have libedit])],\n\t\t\t\t  [AC_MSG_ERROR([Found libedit, but header file is missing. Hint: Install dev package?])])\n\t\tCFLAGS=\"${save_CFLAGS}\"\n\t\t],\n\t\t[\n\t\t # AX_LIB_READLINE overwrites LIBS which leads to every binary getting\n\t\t # linked against libreadline uselessly. So we re-use LIBEDIT_LIBS which\n\t\t # we have for libedit to add the lib specifically where needed\n\t\t save_LIBS=\"${LIBS}\"\n\t\t AX_LIB_READLINE\n\t\t LIBS=\"${save_LIBS}\"\n\t\t if test \"$ax_cv_lib_readline\" = \"no\"; then\n\t\t\tAC_MSG_ERROR([neither libedit nor another readline compatible library found])\n\t\t fi\n\t\t if test \"x$ax_cv_lib_readline_history\" != \"xyes\"; then\n\t\t\tAC_MSG_ERROR([need readline history support])\n\t\t fi\n\t\t LIBEDIT_LIBS=\"$ax_cv_lib_readline\"\n\t\t])\n\t])\n\nPKG_CHECK_MODULES([CURSES], [ncursesw], [], [\n\tPKG_CHECK_MODULES([CURSES], [ncurses], [], [\n\t\tPKG_CHECK_MODULES([CURSES], [curses], [], [\nAX_WITH_CURSES\nif test \"x$ax_cv_curses\" != xyes; then\n\tAC_MSG_ERROR([requires an X/Open-compatible Curses library])\nfi\nCURSES_LIBS=\"$CURSES_LIB\"\n\t\t])\n\t])\n])\nAC_SUBST([CURSES_CFLAGS])\nAC_SUBST([CURSES_LIBS])\n\nsave_CFLAGS=\"${CFLAGS}\"\nCFLAGS=\"${CFLAGS} ${CURSES_CFLAGS}\"\nAC_CHECK_HEADERS([ncursesw/curses.h ncursesw.h ncurses/curses.h ncurses.h curses.h])\nCFLAGS=\"${save_CFLAGS}\"\n\n# Checks for header files.\nAC_CHECK_HEADERS([sys/filio.h])\nAC_CHECK_HEADERS([sys/personality.h])\nAC_CHECK_HEADERS([pthread_np.h], [], [], [#include <pthread.h>])\nAC_CHECK_HEADERS([priv.h])\nAC_CHECK_HEADERS([fnmatch.h], [], [AC_MSG_ERROR([fnmatch.h is required])])\n\n# Checks for library functions.\nAC_CHECK_FUNCS([setppriv])\nAC_CHECK_FUNCS([fallocate])\nAC_CHECK_FUNCS([closefrom])\nAC_CHECK_FUNCS([getpeereid])\nAC_CHECK_FUNCS([getpeerucred])\nAC_CHECK_FUNCS([fnmatch], [], [AC_MSG_ERROR([fnmatch(3) is required])])\n\nsave_LIBS=\"${LIBS}\"\nLIBS=\"${PTHREAD_LIBS}\"\nAC_CHECK_FUNCS([pthread_setname_np])\nAC_CHECK_FUNCS([pthread_mutex_isowned_np])\nAC_CHECK_FUNCS([pthread_getattr_np])\nLIBS=\"${save_LIBS}\"\n\nAC_CHECK_DECL([__SUNPRO_C], [SUNCC=\"yes\"], [SUNCC=\"no\"])\n\nAC_ARG_ENABLE(ubsan,\n\tAS_HELP_STRING([--enable-ubsan],\n\t\t[enable undefined behavior sanitizer (default is NO)]),\n\t[\n\t\tAC_DEFINE([ENABLE_UBSAN], [1],\n\t\t\t[Define to 1 if UBSAN is enabled.])\n\t\tUBSAN_FLAGS=-fsanitize=undefined\n\t])\n\nAC_ARG_ENABLE(tsan,\n\tAS_HELP_STRING([--enable-tsan],\n\t\t[enable thread sanitizer (default is NO)]),\n\t[\n\t\tAC_DEFINE([ENABLE_TSAN], [1],\n\t\t\t[Define to 1 if TSAN is enabled.])\n\t\tTSAN_FLAGS=-fsanitize=thread\n\t])\n\nAC_ARG_ENABLE(asan,\n\tAS_HELP_STRING([--enable-asan],\n\t\t[enable address sanitizer (default is NO)]),\n\t[\n\t\tAC_DEFINE([ENABLE_ASAN], [1],\n\t\t\t[Define to 1 if ASAN sanitizer is enabled.])\n\t\tASAN_FLAGS=-fsanitize=address\n\t])\n\nif test -n \"$ASAN_FLAGS\"; then\n\tAX_CHECK_COMPILE_FLAG(\n\t\t[$ASAN_FLAGS -fsanitize-address-use-after-scope],\n\t\t[ASAN_FLAGS=\"$ASAN_FLAGS -fsanitize-address-use-after-scope\"])\nfi\n\nAC_ARG_ENABLE(msan,\n\tAS_HELP_STRING([--enable-msan],\n\t\t[enable memory sanitizer (default is NO)]),\n\t[\n\t\tAC_DEFINE([ENABLE_MSAN], [1],\n\t\t\t[Define to 1 if MSAN is enabled.])\n\t\tMSAN_FLAGS=-fsanitize=memory\n\t])\n\nif test \"x$UBSAN_FLAGS$TSAN_FLAGS$ASAN_FLAGS$MSAN_FLAGS\" != \"x\"; then\n\tAC_DEFINE([ENABLE_SANITIZER], [1],\n\t\t[Define to 1 if any sanitizer is enabled.])\n\tSAN_FLAGS=\"$ASAN_FLAGS $UBSAN_FLAGS $TSAN_FLAGS $MSAN_FLAGS\"\n\tSAN_CFLAGS=\"$SAN_FLAGS -fPIC -fPIE -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\"\n\tSAN_LDFLAGS=\n\tsave_CFLAGS=$CFLAGS\n\tCFLAGS=\"${CFLAGS} -Werror=unused-command-line-argument\"\n\tAX_CHECK_LINK_FLAG([-pie], [SAN_LDFLAGS=-pie])\n\tCFLAGS=$save_CFLAGS\n\tcase $CC in\n\tgcc*)\n\t\tSAN_CFLAGS=\"$SAN_CFLAGS -fuse-ld=gold\"\n\t\t;;\n\tesac\n\tCFLAGS=\"$CFLAGS $SAN_CFLAGS\"\n\tLDFLAGS=\"$LDFLAGS $SAN_LDFLAGS\"\nfi\n\nAC_ARG_ENABLE(workspace-emulator,\n\tAS_HELP_STRING([--enable-workspace-emulator],\n\t\t[emulate workspace allocations (default is NO)]),\n    [], [enable_workspace_emulator=no])\n\nAM_CONDITIONAL([ENABLE_WORKSPACE_EMULATOR],\n\t[test \"$enable_workspace_emulator\" = yes])\n\nAM_COND_IF([ENABLE_WORKSPACE_EMULATOR], [\n\tAC_CHECK_HEADERS([sanitizer/asan_interface.h])\n\tAC_DEFINE([ENABLE_WORKSPACE_EMULATOR], [1],\n              [Define to 1 if the workspace emulator is enabled])\n])\n\n# Use jemalloc on Linux\nJEMALLOC_LDADD=\nAC_ARG_WITH([jemalloc],\n            [AS_HELP_STRING([--with-jemalloc],\n              [use jemalloc memory allocator.  Default is yes on Linux,  no elsewhere])],\n            [],\n            [with_jemalloc=check])\n\ncase $target in\n    *-*-linux*)\n        if test \"x$with_jemalloc\" != xno; then\n            AC_CHECK_LIB([jemalloc], [malloc_conf],\n                  [JEMALLOC_LDADD=\"-ljemalloc\"],\n                  [AC_MSG_WARN([No system jemalloc found, using system malloc])])\n\tfi\n\t;;\nesac\nAC_SUBST(JEMALLOC_LDADD)\n\nAC_CHECK_FUNCS([setproctitle])\n\nAC_SEARCH_LIBS(backtrace, [execinfo], [AC_CHECK_HEADERS([[execinfo.h]])])\n\n# if the default libexecinfo on alpine causes issues, you can use libunwind\nAC_ARG_WITH([unwind],\n            [AS_HELP_STRING([--with-unwind],\n              [use libunwind to print stacktraces (use libexecinfo otherwise). Recommended on alpine linux. Defaults to auto.])])\n\nif test \"$with_unwind\" != no; then\n    case $target in\n    *-*-darwin*)\n        # Always present but .pc is not installed\n        have_unwind=yes\n        ;;\n    *)\n        PKG_CHECK_MODULES([LIBUNWIND], [libunwind], [have_unwind=yes],\n                [have_unwind=no])\n        ;;\n    esac\nfi\n\nif test \"$with_unwind\" = yes && test \"$have_unwind\" != yes; then\n        AC_MSG_ERROR([Could not find libunwind])\nfi\n\nif test \"$have_unwind\" = yes; then\n    AC_DEFINE([WITH_UNWIND], [1],\n              [Define to 1 to use libunwind instead of libexecinfo])\nelif test \"$ac_cv_search_backtrace\" = no; then\n\tAC_MSG_ERROR([Could not find backtrace() support])\nelif test \"$ac_cv_header_execinfo_h\" = no; then\n\tAC_MSG_ERROR([Could not find execinfo.h])\nfi\n\nAM_CONDITIONAL([WITH_UNWIND], [test \"$have_unwind\" = yes])\n\ncase $target in\n*-*-darwin*)\n\t# white lie - we don't actually test it\n\t# present but not functional\n\tAC_MSG_CHECKING([whether daemon() works])\n\tAC_MSG_RESULT([no])\n\tac_cv_func_daemon=no\n\t;;\n*)\n\tAC_CHECK_FUNCS([daemon])\n\t;;\nesac\nAM_CONDITIONAL(HAVE_DAEMON, [test \"x$ac_cv_func_daemon\" != \"xno\"])\n\nAC_SYS_LARGEFILE\n\nsave_LIBS=\"${LIBS}\"\nLIBS=\"${LIBS} ${RT_LIBS}\"\nAC_CHECK_FUNCS([clock_gettime])\nAC_CHECK_FUNCS([gethrtime])\nLIBS=\"${save_LIBS}\"\n\nif test \"x$ac_cv_func_gethrtime\" = xyes && \\\n   test \"x$ac_cv_func_clock_gettime\" = xyes ; then\n  AC_MSG_CHECKING(if clock_gettime is faster than gethrtime)\n  AC_RUN_IFELSE(\n    [AC_LANG_PROGRAM([[\n#include <sys/time.h>\n#include <time.h>\n#include <stdio.h>\n\nstatic hrtime_t cl()\n{\n\tstruct timespec ts;\n\n\t(void) clock_gettime(CLOCK_MONOTONIC, &ts);\n\treturn (ts.tv_sec * 1e9 + ts.tv_nsec);\n}\n    ]],[[\n\thrtime_t s, c, e, t_hr, t_cl;\n\tint i, r, wins;\n\n\twins = 0;\n\tfor (r = 0; r < 10; r++) {\n\t\tc = 0;\n\t\ts = gethrtime();\n\t\tfor (i=0; i<100000; i++)\n\t\t\tc += gethrtime();\n\t\te = gethrtime();\n\t\tt_hr = e - s;\n\t\tfprintf(stderr, \"hrtime\\t\\t%12lu check %lu\\n\",\n\t\t    (unsigned long)t_hr, (unsigned long)c);\n\n\t\tc = 0;\n\t\ts = gethrtime();\n\t\tfor (i=0; i<100000; i++)\n\t\t\tc += cl();\n\t\te = gethrtime();\n\t\tt_cl = e - s;\n\t\tfprintf(stderr, \"clock_gettime\\t%12lu check %lu\\n\",\n\t\t    (unsigned long)t_cl, (unsigned long)c);\n\n\t\tif (t_cl * 2 < t_hr)\n\t\t\twins++;\n\t}\n\tfprintf(stderr, \"clock_gettime wins %d/%d\\n\", wins, r);\n\tif (2 * wins >= r)\n\t\treturn (0);\n\treturn (1);\n    ]])],\n    [AC_MSG_RESULT(yes)\n    ],\n    [AC_MSG_RESULT(no)\n     AC_DEFINE([USE_GETHRTIME], [1], [Define if gethrtime is preferred])\n    ]\n  )\nfi\n\n# --enable-kqueue\nAC_ARG_ENABLE(kqueue,\n    AS_HELP_STRING([--enable-kqueue],\n\t[use kqueue if available (default is YES)]),\n    ,\n    [enable_kqueue=yes])\n\nif test \"$enable_kqueue\" = yes; then\n\tAC_CHECK_FUNCS([kqueue])\nelse\n\tac_cv_func_kqueue=no\nfi\n\n# --enable-epoll\nAC_ARG_ENABLE(epoll,\n    AS_HELP_STRING([--enable-epoll],\n\t[use epoll if available (default is YES)]),\n    ,\n    [enable_epoll=yes])\n\nif test \"$enable_epoll\" = yes; then\n\tAC_CHECK_FUNCS([epoll_ctl])\nelse\n\tac_cv_func_epoll_ctl=no\nfi\n\n# --enable-ports\nAC_ARG_ENABLE(ports,\n    AS_HELP_STRING([--enable-ports],\n\t[use ports if available (default is YES)]),\n    ,\n    [enable_ports=yes])\n\nif test \"$enable_ports\" = yes; then\n\tAC_CHECK_FUNCS([port_create])\nelse\n\tac_cv_func_port_create=no\nfi\n\n# --with-persistent-storage\nAC_ARG_WITH(persistent-storage,\n    AS_HELP_STRING([--with-persistent-storage],\n\t[use deprecated persistent storage (default is NO)]),\n    [],\n    [with_persistent_storage=no])\n\nif test \"$with_persistent_storage\" = yes; then\n\tAC_DEFINE([WITH_PERSISTENT_STORAGE], [1],\n\t\t[Define to 1 to build the deprecated persistent storage.])\nfi\n\nAM_CONDITIONAL([WITH_PERSISTENT_STORAGE],\n\t[test \"$with_persistent_storage\" = yes])\n\nAM_MISSING_HAS_RUN\n\nAC_CHECK_MEMBER([struct sockaddr.sa_len],\n\t[AC_DEFINE([HAVE_STRUCT_SOCKADDR_SA_LEN], [1],\n\t\t[Define if sa_len is present in struct sockaddr])],\n\t[], [#include <sys/socket.h>])\n\nAC_CHECK_DECL([SO_ACCEPTFILTER],\n    AC_DEFINE(HAVE_ACCEPT_FILTERS,1,[Define to 1 if you have accept filters]),\n    [], [\n        #include <sys/types.h>\n        #include <sys/socket.h>\n    ])\n\nAC_CHECK_DECL([SO_RCVTIMEO],\n    [],\n    AC_MSG_ERROR([SO_RCVTIMEO is needed to build Varnish.]), [\n        #include <sys/types.h>\n        #include <sys/socket.h>\n    ])\n\nAC_CHECK_DECL([SO_SNDTIMEO],\n    [],\n    AC_MSG_ERROR([SO_SNDTIMEO is needed to build Varnish.]), [\n        #include <sys/types.h>\n        #include <sys/socket.h>\n    ])\n\n# Check if the OS supports TCP_KEEP(CNT|IDLE|INTVL) socket options\nsave_LIBS=\"${LIBS}\"\nLIBS=\"${LIBS} ${NET_LIBS}\"\nAC_CACHE_CHECK([for TCP_KEEP(CNT|IDLE|INTVL) socket options],\n  [ac_cv_have_tcp_keep],\n  [AC_RUN_IFELSE(\n    [AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <errno.h>\n    ]],[[\nint s = socket(AF_INET, SOCK_STREAM, 0);\nint i = 5;\nif (s < 0 && errno == EPROTONOSUPPORT)\n  s = socket(AF_INET6, SOCK_STREAM, 0);\nif (setsockopt(s, IPPROTO_TCP, TCP_KEEPCNT, &i, sizeof i))\n  return (1);\nif (setsockopt(s, IPPROTO_TCP, TCP_KEEPIDLE, &i, sizeof i))\n  return (1);\nif (setsockopt(s, IPPROTO_TCP, TCP_KEEPINTVL, &i, sizeof i))\n  return (1);\nreturn (0);\n    ]])],\n    [ac_cv_have_tcp_keep=yes],\n    [ac_cv_have_tcp_keep=no])\n  ])\nif test \"$ac_cv_have_tcp_keep\" = yes; then\n   AC_DEFINE([HAVE_TCP_KEEP], [1], [Define if OS supports TCP_KEEP* socket options])\nelse\n   # Check TCP_KEEPALIVE on macOs which uses seconds as idle time unit like TCP_KEEPIDLE\n   AC_CACHE_CHECK([for TCP_KEEPALIVE socket option],\n     [ac_cv_have_tcp_keepalive],\n     [AC_RUN_IFELSE(\n     [AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <errno.h>\n    ]],[[\nint s = socket(AF_INET, SOCK_STREAM, 0);\nint i = 5;\nif (s < 0)\n  return (1);\nif (setsockopt(s, IPPROTO_TCP, TCP_KEEPALIVE, &i, sizeof i))\n  return (1);\nreturn 0;\n    ]])],\n    [ac_cv_have_tcp_keepalive=yes],\n    [ac_cv_have_tcp_keepalive=no])\n  ])\n  if test \"$ac_cv_have_tcp_keepalive\" = yes; then\n     AC_DEFINE([HAVE_TCP_KEEPALIVE], [1], [Define if OS supports TCP_KEEPALIVE socket option])\n  fi\nfi\nLIBS=\"${save_LIBS}\"\n\n# Check if the OS supports TCP_FASTOPEN socket option\nsave_LIBS=\"${LIBS}\"\nLIBS=\"${LIBS} ${NET_LIBS}\"\nAC_CACHE_CHECK([for TCP_FASTOPEN socket option],\n  [ac_cv_have_tcp_fastopen],\n  [AC_RUN_IFELSE(\n    [AC_LANG_PROGRAM([[\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <errno.h>\n\n#ifndef SOL_TCP\n#  define SOL_TCP IPPROTO_TCP\n#endif\n    ]],[[\nint s = socket(AF_INET, SOCK_STREAM, 0);\nint i = 5;\nif (s < 0 && errno == EPROTONOSUPPORT)\n  s = socket(AF_INET6, SOCK_STREAM, 0);\nif (setsockopt(s, SOL_TCP, TCP_FASTOPEN, &i, sizeof i))\n  return (1);\nreturn (0);\n    ]])],\n    [ac_cv_have_tcp_fastopen=yes],\n    [ac_cv_have_tcp_fastopen=no])\n  ])\nif test \"$ac_cv_have_tcp_fastopen\" = yes; then\n   AC_DEFINE([HAVE_TCP_FASTOPEN], [1], [Define if OS supports TCP_FASTOPEN socket option])\nfi\nLIBS=\"${save_LIBS}\"\n\nAC_CHECK_FUNCS([close_range])\n\n# Check for working close_range()\nif test \"$ac_cv_func_close_range\" = yes; then\nAC_CACHE_CHECK([if close_range is working],\n  [ac_cv_have_working_close_range],\n  [AC_RUN_IFELSE(\n    [AC_LANG_PROGRAM([[\n#include <unistd.h>\n    ]],[[\nreturn (close_range(0, 2, 0));\n    ]])],\n    [ac_cv_have_working_close_range=yes],\n    [ac_cv_have_working_close_range=no])\n  ])\nfi\nif test \"x$ac_cv_have_working_close_range\" = xyes; then\n   AC_DEFINE([HAVE_WORKING_CLOSE_RANGE], [1],\n\t     [Define if OS has working close_range()])\nfi\n\n# Run-time directory\nif test \"${localstatedir}\" = '${prefix}/var' ; then\n   VARNISH_STATE_DIR='/var/run'\nelse\n   VARNISH_STATE_DIR='${localstatedir}/varnish'\nfi\nAC_SUBST(VARNISH_STATE_DIR)\n\n# Default configuration directory.\npkgsysconfdir='${sysconfdir}/varnish'\nAC_SUBST(pkgsysconfdir)\n\n# VMOD variables\nAC_SUBST(vmoddir, [$\\(pkglibdir\\)/vmods])\nAC_SUBST(VMODTOOL, [$\\(top_srcdir\\)/lib/libvcc/vmodtool.py])\nAC_SUBST(VSCTOOL, [$\\(top_srcdir\\)/lib/libvsc/vsctool.py])\n\n# Check for linker script support\ngl_LD_VERSION_SCRIPT\n\n#######################################################################\n# Now that we're done using the compiler to look for functions and\n# libraries, set CFLAGS to what we want them to be for our own code\n\n# This is a test to see how much havoc Jenkins exposes.\n#\n# The reason for -Wno-error=unused-result is a glibc/gcc interaction\n# idiocy where write is marked as warn_unused_result, causing build\n# failures.\n\nWFLAGS=\n\nAX_CHECK_COMPILE_FLAG([-Wall],\n     [CFLAGS=\"${CFLAGS} -Wall\"\n      WFLAGS=\"${WFLAGS} -Wall\"])\n\nif test \"$SUNCC\" = \"yes\" ; then\n    SUNCC_CFLAGS=\" \\\n\t-errwarn=%all,no%E_EMPTY_TRANSLATION_UNIT,no%E_END_OF_LOOP_CODE_NOT_REACHED,no%E_UNRECOGNIZED_PRAGMA_IGNORED,no%E_STATEMENT_NOT_REACHED,no%E_INITIALIZATION_TYPE_MISMATCH,no%E_ARG_INCOMPATIBLE_WITH_ARG_L,no%E_ASSIGNMENT_TYPE_MISMATCH,no%E_FUNC_HAS_NO_RETURN_STMT,no%E_FUNC_NO_RET_RET \\\n\t-errtags=yes \\\n\t-xatomic=studio \\\n\t\"\n    AX_CHECK_COMPILE_FLAG([${SUNCC_CFLAGS}],\n\t[CFLAGS=\"${CFLAGS} ${SUNCC_CFLAGS}\"\n\t WFLAGS=\"${WFLAGS} ${SUNCC_CFLAGS}\"])\nelse\n    AX_CHECK_COMPILE_FLAG([-Werror],\n\t[CFLAGS=\"${CFLAGS} -Werror\"\n\t WFLAGS=\"${WFLAGS} -Werror\"])\nfi\n\ncase $target in\n    *-*-darwin*)\n\tAX_CHECK_COMPILE_FLAG([-Wno-expansion-to-defined],\n\t[CFLAGS=\"${CFLAGS} -Wno-expansion-to-defined\"\n\t WFLAGS=\"${WFLAGS} -Wno-expansion-to-defined\"])\n\t;;\nesac\n\nAX_CHECK_COMPILE_FLAG([-Werror=unused-result],\n    [CFLAGS=\"${CFLAGS} -Wno-error=unused-result\"\n     WFLAGS=\"${WFLAGS} -Wno-error=unused-result\"],\n    [AX_CHECK_COMPILE_FLAG([-Wunused-result],\n     [CFLAGS=\"${CFLAGS} -Wno-unused-result\"\n      WFLAGS=\"${WFLAGS} -Wno-unused-result\"])])\n\n# This corresponds to FreeBSD's WARNS level 6\nDEVELOPER_CFLAGS=`$PYTHON $srcdir/wflags.py`\nif test $? -ne 0 ; then\n  AC_MSG_ERROR([wflags.py failure])\nfi\n\n# zlib-specific flags\nAC_SUBST(VGZ_CFLAGS)\n\n# Support for visibility attribute (zlib)\nAC_CACHE_CHECK([whether we have support for visibility attributes],\n\t[ac_cv_have_viz],\n\t[AC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM([[\n\t\t\tint __attribute__((visibility (\"hidden\"))) foo;\n\t\t]],[])],\n\t\t[ac_cv_have_viz=yes],\n\t\t[ac_cv_have_viz=no])\n])\n\nAS_IF([test $ac_cv_have_viz = yes], [\n\tAC_DEFINE([HAVE_HIDDEN], [1],\n\t\t[Define to 1 if visibility attribute hidden is available.])])\n\n# --enable-stack-protector\nAC_ARG_ENABLE(stack-protector,\n       AS_HELP_STRING([--enable-stack-protector],[enable stack protector (default is YES)]),\n       [],\n       [enable_stack_protector=yes])\n\nif test \"x$enable_stack_protector\" != \"xno\"; then\n\tAX_CHECK_COMPILE_FLAG([-fstack-protector],\n\t\tAX_CHECK_LINK_FLAG([-fstack-protector],\n\t\t\t[DEVELOPER_CFLAGS=\"${DEVELOPER_CFLAGS} -fstack-protector\"], [], []),\n\t\t[], [])\nfi\n\n# --enable-developer-warnings\nAC_ARG_ENABLE(developer-warnings,\n\tAS_HELP_STRING([--enable-developer-warnings],[enable strict warnings (default is NO)]),\n\t[],\n\t[enable_developer_warnings=no])\n\nif test \"x$SUNCC\" != \"xyes\" && test \"x$enable_developer_warnings\" != \"xno\"; then\n\t# no known way to specifically disabling missing-field-initializers\n\t# warnings keeping the rest of -Wextra\n\tAX_CHECK_COMPILE_FLAG([-Wno-missing-field-initializers],\n\t\t[DEVELOPER_CFLAGS=\"${DEVELOPER_CFLAGS} -Wno-missing-field-initializers\"],\n\t\t[DEVELOPER_CFLAGS=\"${DEVELOPER_CFLAGS} -Wno-extra\"],\n\t\t[])\n\n\tCFLAGS=\"${CFLAGS} ${DEVELOPER_CFLAGS}\"\n\tWFLAGS=\"${WFLAGS} ${DEVELOPER_CFLAGS}\"\nfi\n\n# gcc on solaris needs -fstack-protector when calling gcc in linker\n# mode but libtool does not pass it on, so we need to trick it\n# specifically\ncase $CFLAGS in\n  *-fstack-protector*)\n    case $target in\n      *-*-solaris*)\n\tcase $CC in\n\t  gcc*)\n\t    AM_LT_LDFLAGS=\"${AM_LT_LDFLAGS} -Wc,-fstack-protector\"\n\t    ;;\n\tesac\n\t;;\n    esac\n    ;;\nesac\n\nAC_SUBST(AM_LT_LDFLAGS)\n\n# --enable-coverage\nAC_ARG_ENABLE(coverage,\n\tAS_HELP_STRING([--enable-coverage],\n\t\t[enable coverage (implies debugging symbols, default is NO)]),\n\t[],\n\t[enable_coverage=no])\n\n# --enable-debugging-symbols\nAC_ARG_ENABLE(debugging-symbols,\n\tAS_HELP_STRING([--enable-debugging-symbols],\n\t\t[enable debugging symbols (default is NO)]),\n\t[],\n\t[enable_debugging_symbols=no])\n\nif test \"$enable_coverage\" != no; then\n\tAC_DEFINE([ENABLE_COVERAGE], [1], [Define to 1 if code coverage is enabled.])\n\tsave_CFLAGS=$CFLAGS\n\tCFLAGS=\n\tAX_CHECK_COMPILE_FLAG([--coverage],\n\t\t[COV_FLAGS=--coverage],\n\t\t[AX_CHECK_COMPILE_FLAG([-fprofile-arcs -ftest-coverage],\n\t\t\t[COV_FLAGS=\"-fprofile-arcs -ftest-coverage\"])])\n\tAX_CHECK_COMPILE_FLAG([-fprofile-abs-path],\n\t\t[COV_FLAGS=\"$COV_FLAGS -fprofile-abs-path\"])\n\tAX_CHECK_COMPILE_FLAG([-fPIC], [COV_FLAGS=\"$COV_FLAGS -fPIC\"])\n\tCFLAGS=$COV_FLAGS\n\tAC_CHECK_FUNCS([__gcov_flush])\n\tAC_CHECK_FUNCS([__gcov_dump])\n\tAC_CHECK_FUNCS([__llvm_gcov_flush])\n\tCFLAGS=\"$save_CFLAGS $COV_FLAGS\"\n\tenable_debugging_symbols=yes\nfi\n\nif test \"$enable_debugging_symbols\" != no; then\n\tif test \"x$SUNCC\" = \"xyes\" ; then\n\t\tCFLAGS=\"${CFLAGS} -O0 -g\"\n\telse\n\t\tCFLAGS=\"${CFLAGS} -O0 -g -fno-inline\"\n\tfi\nfi\n\n# --enable-oss-fuzz\nAC_ARG_ENABLE(oss-fuzz,\n\tAS_HELP_STRING([--enable-oss-fuzz],\n\t\t[enable build tweaks for OSS-Fuzz (default is NO)]),\n\t[],\n\t[enable_oss_fuzz=no])\n\nAM_CONDITIONAL(ENABLE_OSS_FUZZ, [test \"$enable_oss_fuzz\" != no])\n\n# Command line for compiling VCL code.  I wish there were a simple way\n# to figure this out dynamically without introducing a run-time\n# dependency on libtool.\nAC_ARG_VAR([VCC_CC], [C compiler command line for VCL code])\nif test \"$ac_cv_env_VCC_CC_set\" = \"set\"; then\n\tVCC_CC=\"$ac_cv_env_VCC_CC_value\"\nelse\n\tcase $target in\n\t*-*-darwin*)\n\t\tVCC_CC=\"cc $OCFLAGS\"\n\t\t;;\n\t*)\n\t\tVCC_CC=\"$PTHREAD_CC $OCFLAGS\"\n\t\t;;\n\tesac\n\n\tsave_CFLAGS=\"$CFLAGS\"\n\tsave_CC=\"$CC\"\n\tCFLAGS=\n\tCC=\"$VCC_CC\"\n\tAX_CHECK_COMPILE_FLAG(\n\t\t[-fno-var-tracking-assignments],\n\t\t[VCC_CC=\"$VCC_CC -fno-var-tracking-assignments\"])\n\tCFLAGS=\"$save_CFLAGS\"\n\tCC=\"$save_CC\"\n\n\tcase $target in\n\t*-*-solaris*)\n\t\tcase $PTHREAD_CC in\n\t\t*gcc*)\n\t\t\tVCC_CC=\"exec $VCC_CC %w $PTHREAD_CFLAGS -fpic -shared -o %o %s\"\n\t\t\t;;\n\t\t*cc)\n\t\t\tVCC_CC=\"exec $VCC_CC %w -errwarn=%%all,no%%E_STATEMENT_NOT_REACHED,no%E_C99_INTEGER_PROMOTION $PTHREAD_CFLAGS -Kpic -G -o %o %s\"\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t*-*-darwin*)\n\t\tVCC_CC=\"exec $VCC_CC %w -dynamiclib -Wl,-undefined,dynamic_lookup -o %o %s\"\n\t\t;;\n\t*)\n\t\tVCC_CC=\"exec $VCC_CC %w $PTHREAD_CFLAGS $SAN_CFLAGS -fpic -shared -Wl,-x -o %o %s\"\n\t\t;;\n\tesac\nfi\n\nif test \"$ac_cv_env_VCC_WARN_set\" = set; then\n\tVCC_WARN=$ac_cv_env_VCC_WARN_value\nelse\n\tVCC_WARN=$WFLAGS\nfi\n\nOCFLAGS=\"$OCFLAGS $WFLAGS\"\n\nAC_DEFINE_UNQUOTED([VCC_CC],\"$VCC_CC\",[C compiler command line for VCL code])\nAC_DEFINE_UNQUOTED([VCC_WARN],\"$VCC_WARN\",[C compiler warnings for VCL code])\n\n# Stupid automake needs this\nVTC_TESTS=\"$(cd $srcdir/bin/varnishtest && echo tests/*.vtc)\"\nAC_SUBST(VTC_TESTS)\nAM_SUBST_NOTMAKE(VTC_TESTS)\n\nVMOD_TESTS=\"$(cd $srcdir/vmod && echo tests/*.vtc)\"\nAC_SUBST(VMOD_TESTS)\nAM_SUBST_NOTMAKE(VMOD_TESTS)\n\nAC_ARG_WITH([contrib],\n\t[AS_HELP_STRING([--with-contrib],\n\t\t[Build Varnish with external contributions.])])\n\nAM_CONDITIONAL([WITH_CONTRIB], [test \"$with_contrib\" = yes])\nCONTRIB_TESTS=\"$(cd $srcdir/contrib && echo tests/*.vtc)\"\nAC_SUBST(CONTRIB_TESTS)\nAM_SUBST_NOTMAKE(CONTRIB_TESTS)\n\nAM_COND_IF([WITH_CONTRIB], [\n\tAC_DEFINE([WITH_CONTRIB], [1],\n\t\t[Define to 1 when Varnish is built with contributions.])\n])\n\n# Make sure this include dir exists\nAC_CONFIG_COMMANDS([mkdir], [$MKDIR_P doc/sphinx/include])\n\n# Generate output\nAC_CONFIG_FILES([\n    Makefile\n    bin/Makefile\n    bin/varnishadm/Makefile\n    bin/varnishd/Makefile\n    bin/varnishlog/Makefile\n    bin/varnishstat/Makefile\n    bin/varnishtop/Makefile\n    bin/varnishhist/Makefile\n    bin/varnishtest/Makefile\n    bin/varnishncsa/Makefile\n    contrib/Makefile\n    doc/Makefile\n    doc/graphviz/Makefile\n    doc/sphinx/Makefile\n    doc/sphinx/conf.py\n    etc/Makefile\n    include/Makefile\n    lib/Makefile\n    lib/libvsc/Makefile\n    lib/libvarnish/Makefile\n    lib/libvarnishapi/Makefile\n    lib/libvcc/Makefile\n    lib/libvgz/Makefile\n    man/Makefile\n    varnishapi.pc\n    varnishapi-uninstalled.pc\n    vmod/Makefile\n])\n\nAC_OUTPUT\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "flint.lnt",
          "type": "blob",
          "size": 9.873046875,
          "content": "// Copyright (c) 2013-2020 Varnish Software AS\n// SPDX-License-Identifier: BSD-2-Clause\n// See LICENSE file for full text of license\n\n/*\n * Toplevel control file for FlexeLint\n */\n\n//d__flexelint_v9__=1\n+fan\n\n// No automatic custody\n-ffc\n\n-hm4\n\n///////////////////////////////////////////////////////////////////////\n// electives\n//+e9*\n-e904\n-e935\n-e955\n-e956\n//+e958   // report internal struct padding\n//+e959   // report struct tail/size padding\n-e960\n-e961\n-efile(966, \"/usr/include/*\")\t// unused indir include\n-efile(966, \"../../include/tbl/*\")\n-e964\n-e970\n-e971\n-e9012\n-e9021\n-e9022\n-e9023\n-e9024\n-e9026\n-e9034\n-e9037\n-e9042\n-e9048\n-e9050\n-e9051\n-e9067\n+e9071\t// defined macro '...' is reserved to the compiler\n+e9075\t// external symbol without declaration\n-esym(9075, main)\n-e9085\n-e9105\n-e9107\n-e9109\n-e9113\n-e9131\n-e9132\n-e9133\n-e9136\n-e9140\n-e9141\n-e9147\t// we dont use & on func_pointers\n-e9149\n-e9158\n-e9159\n-e9165\n///////////////////////////////////////////////////////////////////////\n\n\n// This does not work with pcre2.h, the injected /* lint ... */ comments\n// interfere with macro argument concatenation.  Clear flexelint bug\n// because it does not happen when run with -p\n// -emacro((835),*)\t// A zero has been given as ___ argument to operator '___\n\n-e835\t// A zero has been given as ___ argument to operator '___\n\n///////////////////////////////////////////////////////////////////////\n// build/config related\n\n-efile(451, \"tbl/*.h\")\t\t// No include guard\n-efile(537, \"tbl/*.h\")\t\t// Repeated include\n-efile(967, \"tbl/*.h\")\t\t// No include guard\n\n-efile(451, \"../../include/vut_options.h\")\t\t// No include guard\n-efile(451, \"../../include/vapi/vapi_options.h\")\t// No include guard\n\n-efile(451, ../../config.h)\t// No include guard\n-efile(766, ../../config.h)\t// Header file '___' not used in module '___'\n\n+libh(../../config.h)\n\n-esym(768, vmod_priv)\t// global struct member '___' (___) not referenced\n\n///////////////////////////////////////////////////////////////////////\n// Thread/locking, too many false positives still\n-e454\t\t// A thread mutex has been locked but not unlocked___\n-e455\t\t// A thread mutex that had not been locked is being unlocked\n-e456\t\t// Two execution paths are being combined with different mutex lock states\n-e457\t\t// unprotected write access\n-e458\t\t// unprotected access\n-e459\t\t// unprotected access\n\n///////////////////////////////////////////////////////////////////////\n// General stylistic issues\n-e663\t\t// Suspicious array to pointer conversion\n//-e574\t\t// Signed-unsigned mix with relational\n-e641\t\t// Converting enum '...' to int\n-e716\t\t// while(1) ...\n-e726\t\t// Extraneous comma ignored\n-e728\t\t// Symbol ... not explicitly initialized\n-e737\t\t// Loss of sign in promotion from int to unsigned int\n-e763\t\t// Redundant declaration for symbol '...' previously declared\n-e717\t\t// do ... while(0);\n-e777\t\t// Testing floats for equality\n-e785\t\t// Too few initializers for aggregate\n-e786\t\t// String concatenation within initializer\n\n-e788\t\t// enum constant '___' not used within defaulted switch\n\n-esym(818, argv)\t// Pointer parameter '...' could be declared as pointing to const\n\n-e850\t\t// loop variable modified in loop\n\n/*\n * va_list's are opaque for a reason, but we pretend to FlexeLint that it\n * is just a void*, so it proposes constification, which is not generally OK,\n * for instance on register-spilling architectures.\n * XXX: Maybe 'ap' is a badly chosen conventional name here...\n */\n-esym(818, ap)\t\t// Pointer parameter '...' could be declared as pointing to const\n\n-efunc(789, main)\t// Assigning address of auto variable '...' to static\n\n// +e958\t\t// padding\n\n///////////////////////////////////////////////////////////////////////\n// System/Posix/Iso-C library related\n\n-emacro(747, isnan)     // significant coercion\n-emacro(506, isinf)\t// Constant value Boolean\n-emacro(866, isinf)\t// Unusual use of '?' in argument to sizeof\n-emacro(736, isinf)\t// Loss of precision\n\n// ignore retval\n-esym(534, printf)\n-esym(534, fprintf)\n-esym(534, vfprintf)\n-esym(534, sprintf)\n-esym(534, fputc)\n\n-esym(534, memset)\n-esym(534, memcpy)\n-esym(534, memmove)\n\n-esym(534, strcat)\n-esym(534, strcpy)\n-esym(534, strncpy)\n\n-esym(534, sleep)\n-esym(534, usleep)\n\n\n///////////////////////////////////////////////////////////////////////\n// Vmod/vmodtool.py\n\n//-esym(14, vmod_enum_*)\t\t// Symbol '___' previously defined (___)\n//-esym(759, vmod_enum_*)\t\t// header declaration for symbol '___' defined at (___)\n//-esym(765, vmod_enum_*)\t\t// external '___' (___) could be made static\n\n///////////////////////////////////////////////////////////////////////\n// <vut.h>\n\n-sem(VUT_Error, r_no)\n\n///////////////////////////////////////////////////////////////////////\n// <vas.h>\n\n-sem(VAS_Fail, r_no)\t\t// does not return\n-emacro(506, assert)\t\t// constant value boolean\n-emacro(827, assert)\t\t// loop not reachable\n-emacro(774, assert)\t\t// boolean always true\n-emacro(731, assert)\t\t// boolean arg to eq/non-eq\n-emacro(731, xxxassert)\t\t// arg to eq/non-eq\n-emacro(527, WRONG)\t\t// unreachable code\n-emacro(774, VALID_OBJ)\t\t// boolean always true\n-emacro(506, VALID_OBJ)\t\t// Constant value Boolean\n\n-emacro(506, v_static_assert)\t// Constant value Boolean\n-esym(751, __vassert_*)\t\t// local typedef '___' (___) not referenced\n\n///////////////////////////////////////////////////////////////////////\n// Places where we use x<<0 for reasons of symmetry\n\n-emacro(835, VCT_SP)\t\t// A zero has been given as ___ argument to operator '___'\n-emacro(835, VSL_COPT_TAIL)\t// A zero has been given as ___ argument to operator '___'\n-emacro(835, SLT_F_UNUSED)\t// A zero has been given as ___ argument to operator '___'\n-emacro(835, ARGV_COMMENT)\t// A zero has been given as ___ argument to operator '___'\n-emacro(835, F_SEEN_ixIX)\t// A zero has been given as ___ argument to operator '___'\n-emacro(835, VEX_OPT_CASELESS)\t// A zero has been given as ___ argument to operator '___'\n\n///////////////////////////////////////////////////////////////////////\n// <vsb.h>\n\n-esym(759, VSB_*)\t\t// header decl could be moved\n-esym(765, VSB_*)\t\t// extern could be made static\n-esym(714, VSB_*)\t\t// symb not ref\n-sem(VSB_new, @p == (1p ? 1p : malloc(1)))\n-sem(VSB_delete, custodial(1))\n\n// ignore retval\n-esym(534, VSB_cat)\n-esym(534, VSB_bcat)\n-esym(534, VSB_putc)\n-esym(534, VSB_printf)\n-esym(534, VSB_vprintf)\n\n///////////////////////////////////////////////////////////////////////\n// <vte.h>\n\n// ignore retval\n-esym(534, VTE_cat)\n-esym(534, VTE_putc)\n-esym(534, VTE_printf)\n\n///////////////////////////////////////////////////////////////////////\n// <vtree.h>\n\n// -emacro(801, VRBT_*)\t\t// goto considered bad\n-emacro(527, VRBT_*)\t\t// unreachable code\n-emacro(740, VRBT_*)\t\t// unusual pointer cast\n-emacro(438, VRBT_*)\t\t// last value assigned not used\n-emacro(613, VRBT_*)\t// Possible use of null pointer 'child' in left argument to\n-emacro(838, VRBT_*)\t// Previously assigned value to variable 'child' has not been used\n-emacro(50, VRBT_GENERATE_*) // Attempted to take the address of a non-lvalue\n-emacro(506, VRBT_GENERATE_*) // Constant value Boolean\n-emacro(845, VRBT_GENERATE_*) // The left argument to operator '&&' is certain to be 0\n-emacro(774, VRBT_GENERATE_*) // Boolean within 'if' always evaluates to False\n-esym(534, *_VRBT_REMOVE)\t// ignore retval\n-esym(534, *_VRBT_INSERT)\t// ignore retval\n\n///////////////////////////////////////////////////////////////////////\n// <vqueue.h>\n\n-esym(755, VLIST_*)\t// Global macro not ref.\n-esym(755, VSLIST_*)\n-esym(755, VSTAILQ_*)\n-esym(755, VTAILQ_*)\n\n// 506 = constant value boolean\n-emacro(506, VTAILQ_FOREACH_REVERSE_SAFE)\n-emacro(506, VTAILQ_FOREACH_SAFE)\n-emacro(506, VSTAILQ_FOREACH_SAFE) // constant value boolean\n\n// 826 = Suspicious pointer-to-pointer conversion (area to o small)\n-emacro((826), VTAILQ_LAST)\n-emacro((826), VTAILQ_PREV)\n\n-emacro(740, VTAILQ_LAST) // Unusual pointer cast (incompatible indirect types)\n-emacro(740, VTAILQ_PREV) // Unusual pointer cast (incompatible indirect types)\n\n-esym(754, \"*::vtqh_first\")\t// local struct member '...' not referenced\n\n///////////////////////////////////////////////////////////////////////\n// <vdef.h>\n-emacro(527, NEEDLESS)\t// unreachable code\n-emacro(160, _vtake)\t// The sequence '( {' is non standard\n+rw( __typeof__ )\n\n///////////////////////////////////////////////////////////////////////\n// <vrt.h>\n-emacro(446, TOSTRAND, TOSTRANDS)\t// side effect in initializer\n\n///////////////////////////////////////////////////////////////////////\n// <libvarnishapi>\n\n-esym(765, vsl_vbm_bitclr)\n-esym(759, vsl_vbm_bitclr)\n-esym(765, vsl_vbm_bitset)\n-esym(759, vsl_vbm_bitset)\n-esym(765, vsm_diag)\n-esym(759, vsm_diag)\n\n///////////////////////////////////////////////////////////////////////\n// \"miniobj.h\"\n\n-emacro(774, REPLACE)\n\n\n// It is ok to default after handling a few select SLT_* tags\n-esym(788, VSL_tag_e::SLT_*)\t//  enum constant '...' not used within defaulted switch\n\n-esym(785,VSL_tags)\t\t\t\t// Sparse array\n\n///////////////////////////////////////////////////////////////////////\n// readline etc.\n\n-esym(534, add_history)\n\n///////////////////////////////////////////////////////////////////////\n// -lcurses\n-esym(534, beep)\n-esym(534, curs_set)\n-esym(534, delwin)\n-esym(534, doupdate)\n-esym(534, endwin)\n-esym(534, initscr)\n-esym(534, intrflush)\n-esym(534, keypad)\n-esym(534, mvprintw)\n-esym(534, waddnstr)\n-esym(534, mvwprintw)\n-esym(534, nodelay)\n-esym(534, noecho)\n-esym(534, nonl)\n-esym(534, raw)\n-esym(534, waddch)\n-esym(534, wattr_off)\n-esym(534, wattr_on)\n-esym(534, wbkgd)\n-esym(534, werase)\n-esym(534, wmove)\n-esym(534, wnoutrefresh)\n-esym(534, wprintw)\n-esym(534, wredrawln)\n-esym(534, wrefresh)\n\n///////////////////////////////////////////////////////////////////////\n// Noise reduction, review periodically\n\n-e459\t// unlocked access from func-ptr\n-e679\t// Suspicious Truncation in arithmetic expression combining with pointer\n-e712\t// Loss of precision (___) (___ to ___)\n-e713\t// Loss of precision (___) (___ to ___)\n-e732\t// Loss of sign (___) (___ to ___)\n-e734\t// Loss of precision (___) (___ bits to ___ bits)\n-e747\t// Significant prototype coercion (___) ___ to ___\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "varnish-legacy.m4",
          "type": "blob",
          "size": 4.0576171875,
          "content": "# varnish-legacy.m4 - Macros to locate Varnish header files. -*- Autoconf -*-\n# serial 4 (varnish-4.0)\n\n# Copyright (c) 2013-2016 Varnish Software AS\n# All rights reserved.\n#\n# Author: Tollef Fog Heen <tfheen@varnish-software.com>\n#\n# SPDX-License-Identifier: BSD-2-Clause\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n# SUCH DAMAGE.\n#\n\n# For compatibility with autoconf < 2.63b\nm4_ifndef([AS_VAR_COPY],\n  [m4_define([AS_VAR_COPY],\n     [AS_LITERAL_IF([$1[]$2], [$1=$$2], [eval $1=\\$$2])])])\n\n# backward compatibility with older pkg-config\n# PKG_CHECK_VAR(VARIABLE, MODULE, CONFIG-VARIABLE,\n# [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])\n# -------------------------------------------\n# Retrieves the value of the pkg-config variable for the given module.\nm4_ifndef([PKG_CHECK_VAR], [\nAC_DEFUN([PKG_CHECK_VAR],\n[AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl\nAC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl\n\n_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\nAS_VAR_COPY([$1], [pkg_cv_][$1])\n\nAS_VAR_IF([$1], [\"\"], [$5], [$4])dnl\n])\n])\n\n# VARNISH_VMOD_INCLUDE_DIR([])\n# ----------------------------\n\nAC_DEFUN([VARNISH_VMOD_INCLUDES],\n[\nm4_pattern_forbid([^_?VARNISH[A-Z_]+$])\nm4_pattern_allow([^VARNISH_VMOD(_INCLUDE_DIR|TOOL)$])\n# Check for pkg-config\nPKG_CHECK_EXISTS([varnishapi],[],[\n\tif test -z \"$PKG_CONFIG\"; then\n\t\tAC_MSG_FAILURE(\n[The pkg-config script could not be found or is too old.  Make sure it\nis in your PATH or set the PKG_CONFIG environment variable to the full\npath to pkg-config.\n\nTo get pkg-config, see <http://www.freedesktop.org/wiki/Software/pkg-config/>.])\n\telse\n\t\tAC_MSG_FAILURE(\n[pkg-config was unable to locate the varnishapi configuration data.\n\nPlease check config.log or adjust the PKG_CONFIG_PATH environment\nvariable if you installed software in a non-standard prefix.])\n\tfi\n])\n\nVARNISH_PKG_GET_VAR([VAPI_INCLUDE_DIR], [pkgincludedir])\n_CPPFLAGS=\"$CPPFLAGS\"\nVMOD_INCLUDES=\"-I$VAPI_INCLUDE_DIR\"\nCPPFLAGS=\"$VMOD_INCLUDES $CPPFLAGS\"\nAC_CHECK_HEADERS([vsha256.h cache/cache.h])\nCPPFLAGS=\"$_CPPFLAGS\"\nAC_SUBST([VMOD_INCLUDES])\n])# VARNISH_VMOD_INCLUDE_DIR\n\n# VARNISH_VMOD_DIR([])\n# --------------------\n\nAC_DEFUN([VARNISH_VMOD_DIR],\n[\nVARNISH_PKG_GET_VAR([VMOD_DIR], [vmoddir])\nAC_SUBST([VMOD_DIR])\n])\n\n# VARNISH_VMODTOOL([])\n# --------------------\n\nAC_DEFUN([VARNISH_VMODTOOL],\n[\nAC_CHECK_PROGS(PYTHON, [python3.10 python3.9 python3.8 python3.7 python3.6 dnl\n python3.5 python3.4 python3 python, \"no\"])\nif test \"x$PYTHON\" = \"xno\"; then\n  AC_MSG_ERROR([Python >= 3.4 is needed to build, please install python.])\nfi\nVARNISH_PKG_GET_VAR([VMODTOOL], [vmodtool])\nAC_SUBST([VMODTOOL])\n])\n\n# VARNISH_PKG_GET_VAR([VARIABLE, PC_VAR_NAME])\n# -------------------------------\n\nAC_DEFUN([VARNISH_PKG_GET_VAR],\n[\n# Uses internal function for now..\npkg_failed=no\n_PKG_CONFIG([$1], [variable=][$2], [varnishapi])\nif test \"$pkg_failed\" = \"yes\"; then\n   AC_MSG_FAILURE([$2][ not defined, too old Varnish?])\nfi\nAS_VAR_COPY([$1], [pkg_cv_][$1])\n])\n"
        },
        {
          "name": "varnish.m4",
          "type": "blob",
          "size": 20.2958984375,
          "content": "# Copyright (c) 2016-2020 Varnish Software AS\n# All rights reserved.\n#\n# Author: Dridi Boukelmoune <dridi.boukelmoune@gmail.com>\n#\n# SPDX-License-Identifier: BSD-2-Clause\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#\n# 1. Redistributions of source code must retain the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer.\n# 2. Redistributions in binary form must reproduce the above\n#    copyright notice, this list of conditions and the following\n#    disclaimer in the documentation and/or other materials\n#    provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n# OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# varnish.m4 - Macros to build against Varnish.         -*- Autoconf -*-\n# serial 12 (varnish-7.5.0)\n#\n# This collection of macros helps create VMODs or tools interacting with\n# Varnish Cache using the GNU build system (autotools). In order to work\n# from a source checkout, recommended versions of autotools are 2.68 for\n# autoconf, 1.12 for automake and 2.2.6 for libtool. For pkg-config, at\n# least version 0.21 is required ; it should be available even on old\n# platforms. Only pkg-config is needed when building from a dist archive.\n#\n# Macros whose name start with an underscore are private and may change at\n# any time. Public macros starting with VARNISH_ are documented and will\n# maintain backwards compatibility with older versions of Varnish Cache.\n\n# _VARNISH_CHECK_LIB(LIB, FUNC)\n# -----------------------------\nAC_DEFUN([_VARNISH_CHECK_LIB], [\n\tsave_LIBS=\"${LIBS}\"\n\tLIBS=\"\"\n\tAC_CHECK_LIB([$1], [$2])\n\tAC_SUBST(m4_toupper($1_LIBS), \"$LIBS\")\n\tLIBS=\"${save_LIBS}\"\n])\n\n# _VARNISH_SEARCH_LIBS(VAR, FUNC, LIBS)\n# -------------------------------------\nAC_DEFUN([_VARNISH_SEARCH_LIBS], [\n\tsave_LIBS=\"${LIBS}\"\n\tLIBS=\"\"\n\tAC_SEARCH_LIBS([$2], [$3])\n\tAC_SUBST(m4_toupper($1_LIBS), \"$LIBS\")\n\tLIBS=\"${save_LIBS}\"\n])\n\n# _VARNISH_PKG_CONFIG\n# --------------------\nAC_DEFUN([_VARNISH_PKG_CONFIG], [\n\tPKG_PROG_PKG_CONFIG([0.21])\n\n\tPKG_CHECK_MODULES([VARNISHAPI], [varnishapi])\n\tAC_SUBST([VARNISH_VERSION], [$($PKG_CONFIG --modversion varnishapi)])\n\n\tPKG_CHECK_VAR([VARNISHAPI_PREFIX], [varnishapi], [prefix])\n\tPKG_CHECK_VAR([VARNISHAPI_DATAROOTDIR], [varnishapi], [datarootdir])\n\tPKG_CHECK_VAR([VARNISHAPI_LIBDIR], [varnishapi], [libdir])\n\tPKG_CHECK_VAR([VARNISHAPI_BINDIR], [varnishapi], [bindir])\n\tPKG_CHECK_VAR([VARNISHAPI_SBINDIR], [varnishapi], [sbindir])\n\tPKG_CHECK_VAR([VARNISHAPI_VCLDIR], [varnishapi], [vcldir])\n\tPKG_CHECK_VAR([VARNISHAPI_VMODDIR], [varnishapi], [vmoddir])\n\n\tPKG_CHECK_VAR([VMODTOOL], [varnishapi], [vmodtool])\n\tPKG_CHECK_VAR([VSCTOOL], [varnishapi], [vsctool])\n\n\tAC_SUBST([VARNISH_LIBRARY_PATH],\n\t\t[$VARNISHAPI_LIBDIR:$VARNISHAPI_LIBDIR/varnish])\n\n\tAC_SUBST([VARNISH_TEST_PATH],\n\t\t[$VARNISHAPI_SBINDIR:$VARNISHAPI_BINDIR:$PATH])\n\n\tdnl Inherit Varnish's prefix if undefined\n\tdnl Also the libdir for multi-lib systems\n\tif test \"$prefix\" = NONE\n\tthen\n\t\tac_default_prefix=$VARNISHAPI_PREFIX\n\t\tlibdir=$VARNISHAPI_LIBDIR\n\tfi\n\n\tdnl Define the VCL directory for automake\n\tvcldir=$($PKG_CONFIG --define-variable=datadir=$datadir \\\n\t\t--variable=vcldir varnishapi)\n\tAC_SUBST([vcldir])\n\n\tdnl Define the VCL directory for this package\n\tAC_SUBST([pkgvcldir], [\\${vcldir}/\\${PACKAGE}])\n])\n\n# _VARNISH_CHECK_DEVEL\n# --------------------\nAC_DEFUN([_VARNISH_CHECK_DEVEL], [\n\n\tAC_REQUIRE([_VARNISH_PKG_CONFIG])\n\n\t[_orig_cppflags=$CPPFLAGS]\n\t[CPPFLAGS=$VARNISHAPI_CFLAGS]\n\n\tAC_CHECK_HEADERS([vsha256.h cache/cache.h], [],\n\t\t[AC_MSG_ERROR([Missing Varnish development files.])])\n\n\t[CPPFLAGS=$_orig_cppflags]\n])\n\n# _VARNISH_CHECK_PYTHON\n# ---------------------\nAC_DEFUN([_VARNISH_CHECK_PYTHON], [\n\tm4_define_default([_AM_PYTHON_INTERPRETER_LIST],\n\t\t[python3 python3.10 python3.9 python3.8 python3.7 python3.6 dnl\n\t\tpython3.5 python3.4 python])\n\tAM_PATH_PYTHON([3.4], [], [\n\t\tAC_MSG_ERROR([Python >= 3.4 is required.])\n\t])\n\n])\n\n# _VARNISH_VMOD_LDFLAGS\n# ---------------------\nAC_DEFUN([_VARNISH_VMOD_LDFLAGS], [\n\n\tAC_SUBST([VMOD_LDFLAGS],\n\t\t\"-module -export-dynamic -avoid-version -shared\")\n\n])\n\n# _VARNISH_VMOD_CONFIG\n# --------------------\nAC_DEFUN([_VARNISH_VMOD_CONFIG], [\n\tdnl Check the VMOD toolchain\n\tAC_REQUIRE([AC_USE_SYSTEM_EXTENSIONS])\n\tAC_REQUIRE([AC_LANG_C])\n\tAC_REQUIRE([AC_PROG_CC])\n\tAC_REQUIRE([AC_PROG_CC_C99])\n\n\tAC_REQUIRE([_VARNISH_PKG_CONFIG])\n\tAC_REQUIRE([_VARNISH_CHECK_DEVEL])\n\tAC_REQUIRE([_VARNISH_CHECK_PYTHON])\n\tAC_REQUIRE([_VARNISH_VMOD_LDFLAGS])\n\n\tAC_REQUIRE([AC_PROG_CPP])\n\tAC_REQUIRE([AC_PROG_CPP_WERROR])\n\n\tAS_IF([test -z \"$RST2MAN\"], [\n\t\tAC_MSG_ERROR([rst2man is needed to build VMOD manuals.])\n\t])\n\n\tdnl Expose the location of the std and directors VMODs\n\tAC_SUBST([VARNISHAPI_VMODDIR])\n\n\tdnl Expose Varnish's aclocal directory to automake\n\tAC_SUBST([VARNISHAPI_DATAROOTDIR])\n\n\tdnl Define the VMOD directory for libtool\n\tvmoddir=$($PKG_CONFIG --define-variable=libdir=$libdir \\\n\t\t--variable=vmoddir varnishapi)\n\tAC_SUBST([vmoddir])\n\n\tdnl Define an automake silent execution for vmodtool\n\t[am__v_VMODTOOL_0='@echo \"  VMODTOOL\" $''@;']\n\t[am__v_VMODTOOL_1='']\n\t[am__v_VMODTOOL_='$(am__v_VMODTOOL_$(AM_DEFAULT_VERBOSITY))']\n\t[AM_V_VMODTOOL='$(am__v_VMODTOOL_$(V))']\n\tAC_SUBST([am__v_VMODTOOL_0])\n\tAC_SUBST([am__v_VMODTOOL_1])\n\tAC_SUBST([am__v_VMODTOOL_])\n\tAC_SUBST([AM_V_VMODTOOL])\n\n\tdnl Substitute an alias for compatibility reasons\n\tAC_SUBST([VMOD_TEST_PATH], [$VARNISH_TEST_PATH])\n])\n\n# _VARNISH_VMOD(NAME, MODE)\n# -------------------------\nAC_DEFUN([_VARNISH_VMOD], [\n\n\tAC_REQUIRE([_VARNISH_VMOD_CONFIG])\n\n\tVMOD_FILE=\"\\$(abs_builddir)/.libs/libvmod_$1.so\"\n\tAC_SUBST(m4_toupper(VMOD_$1_FILE), [$VMOD_FILE])\n\n\tVMOD_IMPORT=\"$1 from \\\\\\\"$VMOD_FILE\\\\\\\"\"\n\tAC_SUBST(m4_toupper(VMOD_$1), [$VMOD_IMPORT])\n\n\tdnl Define the VCL directory for automake\n\tAC_SUBST([vmod_$1_vcldir], [\\${vcldir}/$1])\n\n\tm4_case([$2],\n\t\t[static],\n\t\t[m4_pushdef([VCC_SRC], [\\$(srcdir)/vmod_$1.vcc])],\n\t\t[generated],\n\t\t[m4_pushdef([VCC_SRC],\n\t\t\t[\\$(builddir)/vmod_$1.vcc \\$(srcdir)/vmod_$1.vcc])],\n\t\t[AC_MSG_ERROR([Unknown mode $2])])\n\n\tAC_SUBST(m4_toupper(BUILD_VMOD_$1), [\"\n\n\\$(libvmod_$1_la_OBJECTS): vcc_$1_if.c vcc_$1_if.h\n\n\\$(libvmod_$1_la_OBJECTS): \\$(nodist_libvmod_$1_la_SOURCES)\n\nvcc_$1_if.h vmod_$1.rst vmod_$1.man.rst: vcc_$1_if.c\n\nvcc_$1_if.c: vmod_$1.vcc\n\t\\$(A\"\"M_V_VMODTOOL) \\$(PYTHON) \\$(VMODTOOL) -o vcc_$1_if VCC_SRC\n\nvmod_$1.3: vmod_$1.man.rst\n\t\\$(A\"\"M_V_GEN) \\$(RST2MAN) vmod_$1.man.rst vmod_$1.3\n\nclean: clean-vmod-$1\n\ndistclean: clean-vmod-$1\n\nclean-vmod-$1:\n\trm -f vcc_$1_if.c vcc_$1_if.h\n\trm -f vmod_$1.rst vmod_$1.man.rst vmod_$1.3\n\n\"])dnl\n\tAM_SUBST_NOTMAKE(m4_toupper(BUILD_VMOD_$1))dnl\n\tm4_popdef([VCC_SRC])dnl\n])\n\n# VARNISH_VMODS(NAMES)\n# --------------------\n# Since: Varnish 4.1.4\n#\n# Since Varnish 5.1.0:\n# - vmod_*_vcldir added\n#\n# Set up the VMOD tool-chain to build the collection of NAMES modules. The\n# definition of key variables is made available for use in Makefile rules\n# to build the modules:\n#\n# - VMOD_LDFLAGS (the recommended flags to link VMODs)\n# - VMOD_TEST_PATH (an alias for VARNISH_TEST_PATH)\n# - VMODTOOL (to generate a VMOD's interface)\n# - vmoddir (the install prefix for VMODs)\n# - vmod_*_vcldir (the install prefix for the VMODs VCL files)\n#\n# Configuring your VMOD build with libtool can be as simple as:\n#\n#     AM_CFLAGS = $(VARNISHAPI_CFLAGS)\n#     AM_LDFLAGS = $(VARNISHAPI_LIBS) $(VMOD_LDFLAGS)\n#\n#     vmod_LTLIBRARIES = libvmod_foo.la\n#\n#     [...]\n#\n# Turnkey build rules are generated for each module, they are provided as\n# a convenience mechanism but offer no means of customizations. They make\n# use of the VMODTOOL variable automatically.\n#\n# For example, if you define the following in configure.ac:\n#\n#     VARNISH_VMODS([foo bar])\n#\n# Two build rules will be available for use in Makefile.am for vmod-foo\n# and vmod-bar:\n#\n#     vmod_LTLIBRARIES = libvmod_foo.la libvmod_bar.la\n#\n#     [...]\n#\n#     @BUILD_VMOD_FOO@\n#     @BUILD_VMOD_BAR@\n#\n# These two set of make rules are independent and may be used in separate\n# sub-directories. You still need to declare the generated VCC interfaces\n# in your library's sources. The generated files should be declared this\n# way:\n#\n#     nodist_libvmod_foo_la_SOURCES = vcc_foo_if.c vcc_foo_if.h\n#     nodist_libvmod_bar_la_SOURCES = vcc_bar_if.c vcc_bar_if.h\n#\n# The generated rules also build the manual page, all you need to do is to\n# declare the generated pages:\n#\n#     dist_man_MANS = vmod_foo.3 vmod_bar.3\n#\n# However, it requires RST2MAN to be defined beforehand in configure.ac\n# and it is for now the VMOD's maintainer job to manage it. On the other\n# hand python detection is done and the resulting PYTHON variable to use\n# the VMODTOOL. Since nothing requires RST2MAN to be written in python, it\n# is left outside of the scope. You may even define a phony RST2MAN to\n# skip man page generation as it is often the case from a dist archive\n# (usually /bin/true when the manual is distributed).\n#\n# Two notable variables are exposed from Varnish's pkg-config:\n#\n# - VARNISHAPI_VMODDIR (locate vmod-std and vmod-directors in your tests)\n# - VARNISHAPI_DATAROOTDIR (for when aclocal is called from a Makefile)\n#\n# For example in your root Makefile.am:\n#\n#     ACLOCAL_AMFLAGS = -I m4 -I ${VARNISHAPI_DATAROOTDIR}/aclocal\n#\n# The VARNISH_VERSION variable will be set even if the VARNISH_PREREQ macro\n# wasn't called. Although many things are set up to facilitate out-of-tree\n# VMOD maintenance, initialization of autoconf, automake and libtool is\n# still the maintainer's responsibility. It cannot be avoided.\n#\n# Once your VMOD is built, you can use varnishtest to run test cases. For\n# that you can rely on automake's default test driver, and all you need\n# is a minimal setup:\n#\n#     AM_TESTS_ENVIRONMENT = \\\n#         PATH=\"$(VARNISH_TEST_PATH):$(PATH)\" \\\n#         LD_LIBRARY_PATH=\"$(VARNISH_LIBRARY_PATH)\"\n#     TEST_EXTENSIONS = .vtc\n#     VTC_LOG_COMPILER = varnishtest -v\n#     AM_VTC_LOG_FLAGS = -Dvmod_foo=\"$(VMOD_FOO)\" -Dvmod_bar=\"$(VMOD_BAR)\"\n#\n# Setting up the different paths is mostly relevant when you aren't building\n# against the system installation of Varnish. In the case of the PATH, you\n# may also need to preserve the original PATH if you run commands outside of\n# the Varnish distribution in your test cases (as shown above).\n#\n# The $(VMOD_*) variables contain a proper import statement if the relevant\n# VMOD was built in the same directory as the test runner. With the example\n# above you could import VMODs this way in a test case:\n#\n#     varnish v1 -vcl+backend {\n#         import std;\n#         import ${vmod_bar};\n#\n#         [...]\n#     } -start\n#\n# Once your test suite is set up, all you need is to do is declare your test\n# cases and `make check` will work out of the box.\n#\n#     TESTS = <your VTC files>\n#\n# At this point almost everything is taken care of, and your autotools-based\n# build is ready for prime time. However if you want your VMODs to build and\n# run the test suite from a dist archive, don't forget to embed your VCC\n# file and the test cases:\n#\n#     EXTRA_DIST = vmod_foo.vcc vmod_bar.vcc $(TESTS)\n#\n# If a VMOD is actually a combination of both a library and VCL sub-routines,\n# automake directories are available for installation:\n#\n#     vmod_foo_vcl_DATA = some_addition.vcl\n#\n# This way the end-user's VCL only needs few lines of code to start using both\n# VMODs and VCLs assuming Varnish's default vmod_path and vcl_path were not\n# changed:\n#\n#     vcl 4.0;\n#\n#     import foo;\n#     import bar;\n#\n#     include \"foo/some_addition.vcl\";\n#\n# Now, you can focus on writing this VMOD of yours.\n#\nAC_DEFUN([VARNISH_VMODS], [\n\tm4_foreach([_vmod_name],\n\t\tm4_split(m4_normalize([$1])),\n\t\t[_VARNISH_VMOD(_vmod_name, [static])])\n])\n\n# VARNISH_VMODS_GENERATED(NAMES)\n# ------------------------------\n# Since: Varnish 6.5.0\n#\n# Varnish 6.5 adds the possibility to transparently work with a generated VCC\n# file. The VCC file would then be created in the build directory, which is\n# incompatible with how the VARNISH_VMODS macro operates.\n#\n# If that VCC file only needs to be generated once and is distributed, builds\n# from the dist archive will have the VCC file in the source directory.\n#\n# With Varnish's ability to run VMODTOOL in a VPATH build both scenarios are\n# taken care of. This macro works otherwise exactly like VARNISH_VMODS.\n#\nAC_DEFUN([VARNISH_VMODS_GENERATED], [\n\tm4_foreach([_vmod_name],\n\t\tm4_split(m4_normalize([$1])),\n\t\t[_VARNISH_VMOD(_vmod_name, [generated])])\n])\n\n# _VARNISH_VSC_CONFIG\n# --------------------\nAC_DEFUN([_VARNISH_VSC_CONFIG], [\n\n\tAC_REQUIRE([_VARNISH_PKG_CONFIG])\n\tAC_REQUIRE([_VARNISH_CHECK_DEVEL])\n\tAC_REQUIRE([_VARNISH_CHECK_PYTHON])\n\n\tdnl Define an automake silent execution for vmodtool\n\t[am__v_VSCTOOL_0='@echo \"  VSCTOOL \" $''@;']\n\t[am__v_VSCTOOL_1='']\n\t[am__v_VSCTOOL_='$(am__v_VSCTOOL_$(AM_DEFAULT_VERBOSITY))']\n\t[AM_V_VSCTOOL='$(am__v_VSCTOOL_$(V))']\n\tAC_SUBST([am__v_VSCTOOL_0])\n\tAC_SUBST([am__v_VSCTOOL_1])\n\tAC_SUBST([am__v_VSCTOOL_])\n\tAC_SUBST([AM_V_VSCTOOL])\n])\n\n# _VARNISH_COUNTER(NAME)\n# ----------------------\nAC_DEFUN([_VARNISH_COUNTER], [\n\n\tAC_REQUIRE([_VARNISH_VSC_CONFIG])\n\n\tVSC_RULES=\"\n\nVSC_$1.h: $1.vsc\n\t\\$(A\"\"M_V_VSCTOOL) \\$(PYTHON) \\$(VSCTOOL) -h \\$(srcdir)/$1.vsc\n\nVSC_$1.c: $1.vsc\n\t\\$(A\"\"M_V_VSCTOOL) \\$(PYTHON) \\$(VSCTOOL) -c \\$(srcdir)/$1.vsc\n\nVSC_$1.rst: $1.vsc\n\t\\$(A\"\"M_V_VSCTOOL) \\$(PYTHON) \\$(VSCTOOL) -r \\$(srcdir)/$1.vsc >VSC_$1.rst\n\nclean: clean-vsc-$1\n\ndistclean: clean-vsc-$1\n\nclean-vsc-$1:\n\trm -f VSC_$1.h VSC_$1.c VSC_$1.rst\n\n\"\n\n\tAC_SUBST(m4_toupper(BUILD_VSC_$1), [$VSC_RULES])\n\tAM_SUBST_NOTMAKE(m4_toupper(BUILD_VSC_$1))\n])\n\n# VARNISH_COUNTERS(NAMES)\n# -----------------------\n# Since: Varnish 6.0.0\n#\n# In order to manipulate custom counters that tools like varnishstat can\n# report, it is possible to do that via a VMOD. This macro allows you\n# to declare sets of counters, but does not associate them automatically\n# with their respective VMODs:\n#\n#     VARNISH_COUNTERS([foo bar])\n#\n# Two build rules will be available for use in Makefile.am for the counters\n# foo and bar:\n#\n#     @BUILD_VSC_FOO@\n#     @BUILD_VSC_BAR@\n#\n# They take care of turning foo.vsc and bar.vsc into C code and RST\n# documentation. Now let's imagine a vmod_baz uses the counters foo.\n#\n# Just like the vcc_*_if.[ch] files, you need to manually add the generated\n# sources to the appropriate VMODs:\n#\n#     nodist_libvmod_baz_la_SOURCES = \\\n#             vcc_baz_if.c \\\n#             vcc_baz_if.h \\\n#             VSC_foo.c \\\n#             VSC_foo.h\n#\n# Don't forget to add foo.vsc and bar.vsc to EXTRA_DIST.\n#\n# You can then include the counters documentation somewhere in the VMOD's\n# VCC descriptor:\n#\n#     COUNTERS\n#     ========\n#\n#     .. include:: VSC_foo.rst\n#\n# Doing so, you can add the generated RST as a dependency of the manual in\n# Makefile.am:\n#\n#     vmod_baz.3: VSC_foo.rst\n#\n# That should be all you need to do to start implementing custom counters.\n#\nAC_DEFUN([VARNISH_COUNTERS], [\n\tm4_foreach([_vsc_name],\n\t\tm4_split(m4_normalize([$1])),\n\t\t[_VARNISH_COUNTER(_vsc_name)])\n])\n\n# _VARNISH_UTILITY(NAME)\n# ----------------------\nAC_DEFUN([_VARNISH_UTILITY], [\n\n\tVUT_RULES=\"\n\n$1_synopsis.rst: $1\n\t\\$(A\"\"M_V_GEN) ./$1 --synopsis >$1_synopsis.rst\n\n$1_options.rst: $1\n\t\\$(A\"\"M_V_GEN) ./$1 --options >$1_options.rst\n\n$1.rst: $1_synopsis.rst $1_options.rst\n\nclean: clean-vut-$1\n\ndistclean: clean-vut-$1\n\nclean-vut-$1:\n\trm -f $1_synopsis.rst $1_options.rst\n\n\"\n\n\tAC_SUBST(m4_toupper(GENERATE_$1_DOCS), [$VUT_RULES])\n\tAM_SUBST_NOTMAKE(m4_toupper(GENERATE_$1_DOCS))\n\n])\n\n# VARNISH_UTILITIES(NAMES)\n# ------------------------\n# Since: Varnish 5.2.0\n#\n# To write programs that consume the VSM, and in particular the VSL, it is\n# possible since Varnish 5.2.0 to use the VUT (Varnish UTility) API already\n# used by varnishlog, varnishstat and the other utilities from the standard\n# Varnish distribution.\n#\n# This API can optionally be used to generate part of the manual: the synopsis\n# and the list of options. The generated RST files can then be included from\n# the main RST file that is written manually.\n#\n# For example, if you define the following in configure.ac:\n#\n#     VARNISH_UTILITIES([foo bar])\n#\n# Two build rules will be available for use in Makefile.am for the programs\n# foo and bar:\n#\n#     bin_PROGRAMS = foo bar\n#\n#     [...]\n#\n#     @GENERATE_FOO_DOCS@\n#     @GENERATE_BAR_DOCS@\n#\n# If the API is used in a way that enables the generation of the synopsis and\n# the list of options, they will automatically be regenerated whenever the foo\n# and bar programs are rebuilt, and marked as dependencies for RST manuals\n# named foo.rst and bar.rst.\n#\n# In the manual you can then include the generated documentation in the\n# relevant sections:\n#\n#     SYNOPSIS\n#     ========\n#\n#     .. include:: foo_synopsis.rst\n#     foo |synopsis|\n#\n#     DESCRIPTION\n#     ===========\n#\n#     [...]\n#\n#     The following options are available:\n#\n#     .. include:: foo_options.rst\n#\n# This however won't work in a VPATH build, so instead of authoring foo.rst\n# and bar.rst, a better solution is to create foo.rst.in and bar.rst.in files\n# and add them to the AC_CONFIG_FILES macro in configure.ac. For example, if\n# foo.rst.in and bar.rst.in are located in the src/ directory:\n#\n#    AC_CONFIG_FILES([\n#    \t[...]\n#    \tsrc/foo.rst\n#    \tsrc/bar.rst\n#    ])\n#\n# Then you can include the build directory, either relative or absolute, to\n# the include directives:\n#\n#     SYNOPSIS\n#     ========\n#\n#     .. include:: @builddir@/foo_synopsis.rst\n#     foo |synopsis|\n#\n#     DESCRIPTION\n#     ===========\n#\n#     [...]\n#\n#     The following options are available:\n#\n#     .. include:: @builddir@/foo_options.rst\n#\n# This will ensure that foo.rst and bar.rst always find the generated files\n# when the source directory is different from the build directory. It is the\n# maintainer's responsibility to build the actual manuals.\n#\nAC_DEFUN([VARNISH_UTILITIES], [\n\tm4_foreach([_vut_name],\n\t\tm4_split(m4_normalize([$1])),\n\t\t[_VARNISH_UTILITY(_vut_name)])\n])\n\n# VARNISH_PREREQ(MINIMUM-VERSION, [MAXIMUM-VERSION])\n# --------------------------------------------------\n# Since: Varnish 4.1.4\n#\n# Since Varnish 5.1.0:\n# - VARNISH_TEST_PATH added\n# - VARNISH_LIBRARY_PATH added\n# - VARNISHAPI_LIBDIR added\n# - VARNISHAPI_VCLDIR added\n# - vcldir added\n# - pkgvcldir added\n#\n# Since Varnish 5.2.0:\n# - VSCTOOL added\n#\n# Verify that the version of Varnish Cache found by pkg-config is at least\n# MINIMUM-VERSION. If MAXIMUM-VERSION is specified, verify that the version\n# is strictly below MAXIMUM-VERSION.\n#\n# Once the requirements are met, the following variables can be used in\n# Makefiles:\n#\n# - VARNISH_TEST_PATH (for the test suite environment)\n# - VARNISH_LIBRARY_PATH (for both public and private libraries)\n# - VARNISH_VERSION (also available in autoconf)\n#\n# The following variables are available in autoconf, read from the varnish\n# pkg-config:\n#\n# - VARNISHAPI_CFLAGS\n# - VARNISHAPI_LIBS\n# - VARNISHAPI_PREFIX\n# - VARNISHAPI_DATAROOTDIR\n# - VARNISHAPI_LIBDIR\n# - VARNISHAPI_BINDIR\n# - VARNISHAPI_SBINDIR\n# - VARNISHAPI_VCLDIR\n# - VARNISHAPI_VMODDIR\n# - VMODTOOL\n# - VSCTOOL\n#\n# In addition, two directories are set up for installation in automake:\n#\n# - vcldir\n# - pkgvcldir\n#\n# The vcldir is where Varnish will by default look up VCL files using relative\n# paths not found in its sysconfdir (by default /etc/varnish). The pkgvcldir on\n# the other hand is a recommended location for your package's VCL files, it\n# defaults to \"${vcldir}/${PACKAGE}\".\n#\n# This provides a namespace facility for installed VCL files needing including\n# other VCL files, which can be overridden if the package name is not desired.\n#\nAC_DEFUN([VARNISH_PREREQ], [\n\tAC_REQUIRE([_VARNISH_PKG_CONFIG])\n\tAC_MSG_CHECKING([for Varnish])\n\tAC_MSG_RESULT([$VARNISH_VERSION])\n\n\tAS_VERSION_COMPARE([$VARNISH_VERSION], [$1], [\n\t\tAC_MSG_ERROR([Varnish version $1 or higher is required.])\n\t])\n\n\ttest $# -gt 1 &&\n\tAS_VERSION_COMPARE([$2], [$VARNISH_VERSION], [\n\t\tAC_MSG_ERROR([Varnish version below $2 is required.])\n\t])\n])\n"
        },
        {
          "name": "varnishapi-uninstalled.pc.in",
          "type": "blob",
          "size": 0.4404296875,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nbindir=@bindir@\nsbindir=@sbindir@\nlibdir=@libdir@\nincludedir=@includedir@\npkgincludedir=${includedir}/@PACKAGE@\ndatarootdir=@datarootdir@\ndatadir=@datadir@\npkgdatadir=${datadir}/@PACKAGE@\nvmoddir=${libdir}/@PACKAGE@/vmods\nbuilddir=@abs_top_builddir@\nsrcdir=@abs_top_srcdir@\n\nName: VarnishAPI\nDescription: Varnish API\nVersion: @PACKAGE_VERSION@\nCflags: -I${includedir}/@PACKAGE@\nLibs: -L${libdir} -lvarnishapi\n"
        },
        {
          "name": "varnishapi.pc.in",
          "type": "blob",
          "size": 0.5263671875,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nbindir=@bindir@\nsbindir=@sbindir@\nlibdir=@libdir@\nsysconfdir=@sysconfdir@\npkgsysconfdir=@pkgsysconfdir@\nincludedir=@includedir@\npkgincludedir=${includedir}/@PACKAGE@\ndatarootdir=@datarootdir@\ndatadir=@datadir@\npkgdatadir=${datadir}/@PACKAGE@\nvcldir=${pkgdatadir}/vcl\nvmoddir=${libdir}/@PACKAGE@/vmods\nvmodtool=${pkgdatadir}/vmodtool.py\nvsctool=${pkgdatadir}/vsctool.py\n\nName: VarnishAPI\nDescription: Varnish API\nVersion: @PACKAGE_VERSION@\nCflags: -I${pkgincludedir}\nLibs: -L${libdir} -lvarnishapi\n"
        },
        {
          "name": "vmod",
          "type": "tree",
          "content": null
        },
        {
          "name": "vsc.am",
          "type": "blob",
          "size": 0.783203125,
          "content": "## Generic rule to generate C code from VSC files. VSC files must be listed\n## in the $(VSC_SRC) variable. The $(VSCTOOL) variable must point to the\n## location of vsctool.py, normally set up by varnish.m4 at configure time.\n## The resulting $(VSC_GEN) variable must be added to $(BUILT_SOURCES). The\n## $(VSC_RST) variable references RST file names for manual pages includes.\n\nVSC_GEN = $(VSC_SRC:.vsc=.c) $(VSC_SRC:.vsc=.h)\n\nVSC_RST = $(VSC_SRC:.vsc=.rst)\n\n_VSC_RST = $(VSC_SRC:.vsc=.rst_)\n\n$(VSC_GEN) $(VSC_RST): $(VSCTOOL)\n\nSUFFIXES = .vsc .c .h .rst\n\n.vsc.c:\n\t$(AM_V_GEN) $(PYTHON) $(VSCTOOL) -c $<\n\n.vsc.h:\n\t$(AM_V_GEN) $(PYTHON) $(VSCTOOL) -h $<\n\n.vsc.rst:\n\t$(AM_V_GEN) $(PYTHON) $(VSCTOOL) -r $< >${@}_\n\t@mv ${@}_ $@\n\nclean-local: vsc-clean\n\nvsc-clean:\n\trm -f $(VSC_GEN) $(VSC_RST) $(_VSC_RST)\n"
        },
        {
          "name": "vtc.am",
          "type": "blob",
          "size": 0.7509765625,
          "content": "## This file helps set up a varnishtest execution without a traditional\n## pre-defined list of tests. Test cases are expected to be located in a\n## tests/ directory relative to the Makefile's source directory.\n##\n## When a difference is detected, a refresh is triggered by calling the\n## vtc-refresh-tests target that must be defined in the including Makefile.\n##\n## The current assumption is that all the tests for the Makefile are VTCs\n## and may be revisited if needed.\n\nVTC_LOG_COMPILER = $(top_builddir)/bin/varnishtest/varnishtest -v -i\nTEST_EXTENSIONS = .vtc\n\ncheck: vtc-check-tests\n\nvtc-check-tests:\n\t@mkdir -p tests ; \\\n\tLC_ALL=C; \\\n\tif [ \"$$(cd $(srcdir) && echo tests/*.vtc)\" != \"$(TESTS)\" ]; then \\\n\t\tcd $(top_builddir) && ./config.status --recheck ; \\\n\tfi\n"
        },
        {
          "name": "wflags.py",
          "type": "blob",
          "size": 3.8662109375,
          "content": "#!/usr/bin/env python3\n#\n# Copyright (c) 2021 Varnish Software AS\n# All rights reserved.\n#\n# Author: Poul-Henning Kamp <phk@phk.freebsd.dk>\n#\n# SPDX-License-Identifier: BSD-2-Clause\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n# SUCH DAMAGE.\n#\n\n''' Figure out what developer-warnings CC can grok '''\n\nimport os\nimport sys\nimport subprocess\nimport tempfile\n\nDESIRABLE_OPTIONS = [\n    \"-fstack-protector-strong\",\n    \"-Werror\",\n    \"-Wall\",\n]\n\nDESIRABLE_WFLAGS = [\n    \"-Wcast-align\",\n    \"-Wcast-qual\",\n    \"-Wchar-subscripts\",\n    \"-Wempty-body\",\n    \"-Wextra\",\n    \"-Wformat -Wformat-y2k\",\n    \"-Wformat -Wformat-zero-length\",\n    \"-Wmissing-field-initializers\",\n    \"-Wmissing-prototypes\",\n    \"-Wnested-externs\",\n    \"-Wpointer-arith\",\n    \"-Wpointer-sign\",\n    \"-Wreturn-type\",\n    \"-Wshadow\",\n    \"-Wstrict-aliasing\",\n    \"-Wstrict-prototypes\",\n    \"-Wstring-plus-int\",\n    \"-Wswitch\",\n    \"-Wunused-parameter\",\n    \"-Wunused-parameters\",\n    \"-Wunused-result\",\n    \"-Wunused-but-set-variable\",\n    \"-Wwrite-strings\",\n]\n\nUNDESIRABLE_WFLAGS = [\n    \"-Wno-system-headers\", # Outside of our control\n    \"-Wno-thread-safety\", # Does not understand our mutexes are wrapped\n    \"-Wno-sign-compare\", # Fixable\n]\n\n\ndef cc(compiler, opt, obj, src):\n    a = compiler.split()\n    a += [\"-c\"]\n    if opt is not None:\n        a += opt.split()\n    a += [\"-o\", obj, src]\n\n    try:\n        j = subprocess.check_output(a, stderr=subprocess.STDOUT)\n    except subprocess.CalledProcessError as err:\n        if err.output:\n            j = err.output\n        else:\n            j = (\"Returncode %d\" % err.returncode).encode('utf8')\n    return (j)\n\n\ndef main():\n    compiler = os.environ.get(\"CC\", \"cc\")\n\n    src_file = tempfile.NamedTemporaryFile(suffix='.c')\n    src_file.write(b'int main(int argc, char **argv) {(void)argc;(void)argv;return(0);}\\n')\n    src_file.flush()\n    obj_file = tempfile.NamedTemporaryFile(suffix='.o')\n\n    j = cc(compiler, None, obj_file.name, src_file.name)\n    if j:\n        sys.stderr.write(compiler + \" failed without flags\\n\\t\" +\n                         j.decode('utf8') + '\\n')\n        sys.exit(1)\n\n    use_flags = []\n    for i in DESIRABLE_OPTIONS + DESIRABLE_WFLAGS + UNDESIRABLE_WFLAGS:\n        j = cc(compiler, i, obj_file.name, src_file.name)\n        if not j:\n            use_flags.append(i)\n        else:\n            sys.stderr.write(compiler + \" cannot \" + i + '\\n')\n            if b'error: unrecognized command line option' in j:\n                # LLVM\n                pass\n            elif b'warning: unknown warning option' in j:\n                # GCC\n                pass\n            else:\n                sys.stderr.write(\"\\n\\t\" + j.decode('utf8') + '\\n')\n    print(\" \".join(use_flags))\n\nif __name__ == \"__main__\":\n    main()\n"
        }
      ]
    }
  ]
}