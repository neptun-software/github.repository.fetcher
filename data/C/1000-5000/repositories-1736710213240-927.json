{
  "metadata": {
    "timestamp": 1736710213240,
    "page": 927,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "letoram/arcan",
      "stars": 1614,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".fossil-settings",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "build\n.vscode\n.DS_Store\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 49.173828125,
          "content": "## 0.7.1\n## Lua\n * Changed builtin 'print' function to emit a parser friendly output when not traced\n * Added monitor commands for backtrace, eval, locals, stepping and specialised dumps\n * Added breakpoint hooks for all transitions into VM execution\n\n## 0.7.0\n## Core\n * Wired in rendertarget vobj export for hwenc, opt-in via target\\_flags on rectgt\n * Add basic positional audio support\n\n## Platform\n * posix/glob : add asynch form\n * egl-dri: add nvidia\\_gbmbo_fix option to fix scanout allocation for (some) nvidia GPUs\n * egl-dri: fixes to CRTC picking logic\n\n## Lua\n * add overloaded glob\\_resource that can return an open\\_nonblock table\n * add alttext slot for image\\_tracetag\n * add audio\\_position / audio\\_listener for setting a video object as positional audio reference\n * add basic text\\_surface for simplified text with a rendering path similar to tui windows\n * image\\_access\\_storage\n * add audio\\_reconfigure for toggling hrtfs and switching between outputs\n * prohibit bytecode in system\\_load\n\n## Distribution\n * builtin/mouse opt-in rmb drag, unified theme handling, drop native_ path\n\n## Shmif\n * add interop helper for arcan\\_shmif\\_bchunk\\_resolve to help translate fd-local path\n * add a \\_primary slot for ACCESSIBILITY\n * add an internal-catch segment for ACCESSIBILITY\n * default-route ACESSIBILITY internal-catch to map a TUI window feed through encode in OCR mode\n * add RHINT\\_EMPTY to use SHMIF\\_SIGVID for clocking without GPU transfers\n * fixes several C++ interop problems with header definition\n * drop VOBJ substructure, passing vector objects as BCHUNK is much less complex\n\n## Net\n * IPv6 discovery controls added\n * add -c file for assigning lua scriptable command-line overrides\n * headless runner for arcan-net host appl can be access via ANET\\_RUNNER env.\n * spawning server-side Lua runner if matching appl found, controls message routing\n * introduce rekeying command for forward secrecy, placeholder PQ step-up and resumption\n * add support for directory file store/retrieval\n\n## Decode\n * tts now exposes more input labels (INC/DEC/SETRATE)\n * tts flush speech buffers on reset\\_target\n * tts exposes endpause control\n * add 'spell' protocol for generating suggestions, dependency: hunspell\n\n## Tui\n * Copy window widget re-added as a forced input-label toggle to all tui windows\n * Readline: better position suggestion on overflow\n * Readline: add option to supply completion popup title\n * Readline: add option to provide per-item help-text\n * Readline: fix padding error when stepping history to shorter items\n * Expose accessibility window as mappable type\n * Expose cursor state constrols\n * Tui: prevent cursor from moving out of screen bounds\n * Lua Bindings: add helper :tempfile, :tempdir, :mkdir, :funlink, :fmkdir\n * Lua Bindings: nbio fixes\n\n## VRbridge\n * Merge in pending- OHMD Xreal Air/2/2Pro support\n\n## 0.6.3\n## Lua\n * inbound events now have a 'frame' tag for pairing with verbose-frame notification\n * util:random\\_interval(low,high) added for CSPRNG non-biased interval RNG\n * util:random\\_bytes(len) added for CSPRNG byte string\n * target_input long messages are now marked as multipart\n * convey tui/tpack state in resize events\n * target\\_anchorhint added for informing clients about positioning and hierarchy\n * video\\_displaymode expose eotf / coordinates for primaries and contents light levels\n * open\\_nonblock can now adopt an existing iostream into a target vid\n * input\\_remap\\_translation overloaded form for serializing backing keymap\n * clockreq no longer forwarded for frameserver event handler\n * image\\_metadata added for annotating a vid used when streaming/sharing/scanout HDR contents\n * functions creating files now apply a separate WRITEMASK (split from USERMASK)\n\n## Core\n * respect border attribute in text rasteriser\n * added frame\\_id to external events that pairs with shmif-SIGVID signals\n * optional tracy build for profiling (-DENABLE\\_TRACY)\n * frameserver clock(stepframe) event handling extended (see shmif)\n\n## Tui\n * nbio asynch type confusion fix (function becomes pcall:userdata)\n * nbio close without explicit flush\n * dock subtype exposed for bar/tray like integration\n * add 'swallow' request for new windows\n * cursor(caret) style and color override controls\n * readline: add completion style control (border)\n * readline: allow attached popup to replace in-band completion\n * readline: history traversal early-stop fixed\n * fixes for screencopy on proxy window\n * refactored deprecated tsm-screen away out of tui (1/2)\n\n## Net\n * allow h264 passthrough, sidestepping local encode\n * re-add afsrv\\_net, have it support directory, source and sink access modes.\n * split a12:// into a12:// and a12s:// ARCAN_CONNPATH with the former permitting connecting to unknowns\n * add interactive accept/reject/trust for arcan-net use\n * reserve 'outbound' domain for interactively added outbound keys\n * enforce domain separation for allowed pubkeys\n * directory mode now splits out into sandboxed worker processes\n * directory mode can now specify permissions per tag-group\n * directory mode dynamic push appl from client with permission\n * directory mode notification of appl updates and sources coming / leaving\n * directory mode registration of dynamic sinks\n * directory mode sourcing dynamic sinks (sink-inbound only)\n * directory mode source-sink pairing 'reachable source' and 'tunnel' transfer modes\n * changed packaging format for appls\n * net\\_open(\"@stdin\") can now be used to access a per-directory-appl messaging group\n * local broadcast domain discovery added, both through net\\_discover and arcan-net\n\n## Terminal\n * SGR reset fix, add CNL / CPL\n * Add interp=st for suckless terminal based state machine\n\n## Platform\n * paths: prioritise \\_APPL_TEMP over \\_APPL in load order\n * audio: engine audio split out into platform bit\n * audio: stub platform added\n * egl-dri: evict streams\n * egl-dri: default to atomic over legacy\n * egl-dri: retain device tracking for unmapped display\n * egl-dri: add hdr infoframe metadata to platform\n\n## Shmif\n * add audio only- segment type\n * wire up ext venc resize for compressed video passthrough\n * extend hdr vsub with more metadata\n * dropped unused rhints and rename hdr16f (version bump)\n * CLOCKREQ extended with options for latching to specific msc/vblank events\n\n## Decode\n * defer REGISTER until proto argument has been parsed, let text register as TUI\n * libuvc path now uses FFMPEG for h264 and mjpeg\n\n## Package / Build\n * console: added binding for shutdown\n * builtin/mouse: bugfixes to two-sample mode\n * expose audio stub platform\n\n## 0.6.2.1\n## Lua\n * nbio-linebuffer callback read truncation edge case fixed\n * message\\_target and valid\\_vid now work on WORLDID for LWA\n * event handler can now be attached to WORLDID for outer WM integration\n * more shmif events mapped to arcantarget handlers (bchunk-io, state)\n * snapshot/restore did not respect namespace api change\n * nbio- read return value to cancel out\n * nbio read-to-tbl allow read\\_cap field to limit lines per call\n\n## Terminal\n * switch lash over to xpcall for better error messages\n * forward traw record to lash mode as well\n * improve altscreen- vt100 signalling races on resize storms\n * bitop inclusion stack garbage\n\n## Tui\n * embedding modes improved and working\n * multiple fixes to subwindow processing being tagged to parent\n * readline: reduced reallocation frequency\n * readline: only right-complete when at end of string\n * readline+lua: allow hint- annotations (\\0\\0) to suggestions\n * lua: state transfer bchunk transfers fixed\n * nbio: write-queue fail to requeue fix for dgram\n * lua: expose 'unix' (domain/dgram) to tui-fopen\n\n## Wayland\n * xdg-toplevel scale factor input regression\n\n## Platform\n * evdev: masked SH+space not setting keysym\n\n## Build\n * add stub builtin/legacy.lua\n * increase verbosity for debug builds (include macro expansion meta)\n\n## 0.6.2\n\n## Net\n * Protocol: add intent to HELLO (source or sink)\n * Drop connection on intent conflict (source connect to source or sink to sink)\n * Move keystore to statepath subdir (a12)\n * Added Sweep Discovery mode\n * Initial connection for host-tags should now be faster\n * Connpath=a12://tag@ resolution fixed for one-off source-push connections\n * Congestion control blocking issue resolved\n * First drafts of 'directory' mode for hosting arcan appls\n * Arcan-net can now list and download appls from an arcan-net directory server\n * Fonts now cache when A12\\_CACHE\\_DIR is provided\n * Binary transfers now stream-compress with zstd\n\n## Lua\n * net\\_discover added, use this to find other a12 clients\n * define\\_linktarget semantics reworked\n * open\\_nonblock class functions (nbio) extended with more read/write options\n * net\\_open re-enabled for use with tags from net\\_discover\n * target\\_displayhint extended with forwarding subsegment cookie for embedded surfaces\n * viewport events now propagate embedded surface scaling preferences\n * input events can now carry a destination segment cookie\n * list\\_namespaces for enumerating namespaces, nsname:/path to all resource functions\n * glob\\_resource second argument form string type for user namespaces\n\n## Terminal\n * permit ARCAN\\_STATEPATH to propagate into child env\n * the basic/recovery cli (arg=cli) now has a lua shell mode(cli=lua) with tui-lua bindings\n * add controls for stderr propagation\n * add control for tpackani recording from start\n\n## Shmif\n * add EXTERNAL\\_NETSTATE for fsrv\\_net to convey known-set changes\n * add handover\\_exec\\_pipe mode call with better fd inheritance semantics\n * fixed bug with TPACK- window sometimes causing null-deref on resize storms\n * TPACK- window size cap bumped\n * TPACK size calculation wasn't correctly applied, with edge-case force-disconnects\n\n## Tui\n * Readline: added history navigation inputs\n * Readline: cleaned up API for history/completion controls, reduced callbacks\n * Readline: delete last word implemented\n * Readline: draw/navigate completion set on request\n * Readline: add insertion prefix controls\n * Readline: add paste forward control\n * General: fixes to view-state and other handler propagations\n * General: handover-embed and other wnd-hints working\n * General: tpackani format added for recording\n * Input: added send\\_key and send\\_mouse\n\n## Frameservers\n * Encode: (linux) add support for a v4l2-loopback sink\n * Encode: synched to ffmpeg-5.0 api\n * Net: added 'sweep' discovery mode\n * Decode: added protocol=pdf (dependency, mupdf) mode\n * Decode: added protocol=list for probing\n\n## Engine\n * Added -C, (control) mode for replacing ANR watchdog with debug-interface\n * Monitor modes now disable default scripting error state dump\n * -O monitoring mode behaviour / output reworked\n * Negative monitoring samplerate will only write crash dumps\n\n## Build\n * Vendored static freetype build evicted\n\n## 0.6.1\n\n## Engine\n * Disable watchdog during launch_external\n * Require a full scanout cycle before marking crash recover as over\n * Use attachment density if no displayhint on fsrv with tpack font-init\n * Re-add event queue drain management\n * More aggressive pipeline dirty state tracking\n * Fixed jpeg identification courtesy of Salotz\n\n## Frameservers\n * ARCAN_FRAMESERVER_DEBUGSTALL is now performed after \\_open and the pid is sent as 'ident'\n * Terminal: added autofit argument to keep\\_alive\n * Terminal: save and rebuild 'dead' terminal window on resize\n * Terminal: 'pipe' mode sidesteps pty\n * Terminal: live-redefinition of colours, overlay server-side palette on terminal one\n * Terminal: exec-mode sets ident to command\n * Terminal: (cli) ident is updated with path and execution mode\n * Terminal: (cli) forward error messages on handover allocation rejection\n * Terminal: (cli) add 'debugstall' command to add time for debug- attach\n\n## Tui\n * Lowered the constraint for wndhint to also work for main window\n * Tpack is now the only output, local rasterization is dead - long live server side text\n * Recolor/runtime palette remapping through target\\_graphmode\n * Extended colour slots to cover a 16- legacy group\n * Allow indexed cell attribute flag (fg.r, bg.r becomes colour slot index + lookup)\n * add FAILURE message notification type\n * Add handlers for seeking contents and content\\_size call to indicate scrolling support\n\n## Lua\n * Whitelist os.date\n * Add 'forget' analogfilter option to discard/release device\n * Extend map\\_video\\_display to allow layer-index and offsets\n * Extend video\\_displaymodes with controls for depth (low, deep, hdr) and vrr- target rate\n * target\\_fonthint and target\\_displayhint return the last known cell w/h that tpack might use\n * Allow suspend\\_target, resume\\_target for controlling preroll state transition\n * bond\\_target sent the wrong pipe pair ends\n * Set default font density to match platform ppcm on init\n * update HPPCM/VPPCM on rendertarget\\_reconfigure on WORLDID\n * Strictened definition of launch\\_target\n * Add target\\_geohint for dynamic language/position updates\n * added input\\_remap\\_translation for runtime input platform tuning\n * relink\\_target now properly accounts for different anchor points\n * reduce unnecessary pushstrings where pushlstring/pushliteral would suffice\n * image\\_parent - add overloaded form for testing full hierarchy\n * add input\\_raw entry point for out-of-loop io event processing (footgun warning)\n * add mapping hint for ROTATE\\_180\n * add placeholder user-namespace selector for glob-resource\n\n## Build\n * A whole lot of FreeBSD build fixes courtesy of J.Beich\n * Wrong ALIGNED\\_SIMD args set courtesy of moon-chilled\n * sdl2 first-build fix courtesy of Lahvuun\n\n## Distribution\n * New hookscript: 'hook/alloc\\_debug.lua' that forces backtrace into image-tag for all allocations\n * builtin/string.lua: add string.unpack\\_shmif\\_argstr\n * builtin/mouse.lua: simplified convenience patterns added to mouse\\_setup/mouse\\_input\n\n## Shmif\n * Shmifext- allocator interface for server- directed FBO color allocation\n * Add graphmode palette definition to preroll stage\n * Preroll EAGAIN kernel race causing premature shutdown fixed\n * Ensure control socket or page never gets allocated on 0,1,2\n * Two edge condition races on crash- triggered migration during resize\n * shmif-server: spawn\\_client support function added/working\n\n## Platform\n * Egl-dri: don't forward modifiers for linear/invalid\n * Lwa: use shmifext allocator interface for mapped rendertargets\n * Lwa: set last-words on script-error / arcan\\_fatal\n * Lwa: forward density to font renderer\n * Lwa: fix buffer-export fail handling\n * Agp/Video: add support for hardware composition layers\n * Agp/Video: Allow mapped vstores to support dirty regions\n * Agp/Video: fixes to float/half-float FBO allocation\n * Egl-dri: direct-scanout of 'sane- video objects' (e.g. FBO without post-processing)\n * Egl-dri: let preferred display buffer resolution drive map_video_display\n * Egl-dri: single-buffered drawing mode for fullscreen mapped tui/terminal clients\n * Egl-dri: set platform buffer decay flush on transition eglSurface <-> FBO\n * Egl-dri: add buffer quality mode transitions (LDR-SDR-Deep-HDR)\n * Sdl2: mouse wheel/button input fixes\n * Sdl2: automatic window resizes HIDPI resize-loop fixes\n * Evdev: runtime switching xkb keylayout (libxkbcommon builds)\n\n## Wayland\n * arcan-wayland did not pack drm/dma-buf right, causing import failures\n * egl-shm mode working (bridge converts to dma-buf before fwd)\n * enable dma-buf by default\n * drop zxdg-shell-unstable-v6\n * older client termination on mouse-wheel version check fixed\n * xdg-decor set with the wrong surface state\n * link in pulse/native in -exec tmpdir pulse/native\n * handle no XDG\\_RUNTIME\\_DIR case for normal and -exec\n\n## Tools\n * added tool arcan-dbgcapture for use as a /proc/core\\_pattern to help core dump management\n\n## Networking\n * enable redirect_exit connection point immediately on client connection\n * Swap out DEFLATE for ZSTD\n * added experimental keystore\n * add 'forward' connection modes (arcan-net -l port -exec shmif-bin) (arcan-net host)\n * add basic congestion control on video backpuffer pressure\n * respect origo-ll flags (y-axis inversion for some clients)\n * refactoring / cleanup to logging and control structures, preparing for video passthrough\n\n## 0.6.0\n## Engine\n * Position fix to anchor_image/center_image when using CR anchor\n * Automatically switch/re-exec to _sdl / _lwa depending on env (in X, WL, ...)\n * Consolidated synchronization strategies from platform into 'conductor'\n * Conductor gets strategies for latency/powersave (immediate, processing, powersave, adaptive, tight)\n * Multiple hookscripts can now be chained together regardless of appl\n * New hookscript: external_input, allow external input drivers\n * New hookscript: shutdown, add automatic timer driven shutdown\n * New hookscript: timed/periodic dumps, snapshot the engine scene graph for easier debugging\n * OpenCTM support/parsing removed from 3d core\n * Rendertarget proxies, let platform layers intercept FBO drawing\n * render_text no longer preserves style across invocation\n * vrbridge: fallback to bin/arcan_vr if ext_vr database entry could not be found\n * db-tool: incorrect constraints fixed on sql-ddl\n * server-side rendering for Tpack backed windows\n\n## Networking\n * a12 protocol implementation added, proxy-tool and connection manager arcan-net added\n * afsrv_net dropped in favor of arcan-net (lua:net_listen will still route through it)\n\n## Shmif\n * segment request extended with split-dir and position-dir hints\n * input events extended with eyetracker inputs\n * keyinput/cursor input dropped (only used by encode-vnc)\n * cleaned up some of the error/status logging\n * HANDOVER allocation / exec should now work properly, so one connection can be used to negotiate another\n * fixes to live-lock race condition in some crash recovery scenarios.\n * a12:// handling for CONNPATH added\n * support for default implementation handlers for certain segment types (DEBUG)\n * crash recovery speeds more aggressive on linux with inotify support on connpoint\n * default debug-interface added, safe gdb/lldb attach bootstrap\n * handover token provided for handover- embedding with child-parent or parent-child control\n * arcan_shmif_bgcopy helper function aded for threaded bchunk etc. response\n * contents hints now cover both min/max constraints as well as h/v scrolling metadata\n * when TPACK buffer format is used, size calculation is based on packed size\n * _VOBJ apad storage type support for providing 2D/3D vector data\n * default event-queue sizes bumped to 127/127)\n * dequeue overwrites event store on use (0xff)\n * SEGREQ now takes desired dimensions hit to avoid possible resize roundtrip\n * default maximum segment size bumped\n\n## Tui\n * COPY_WINDOW feature extended with annotation tools, editing and highlighting\n * Color selection extended with attribute for UI element (status-menu bar)\n * Multiple fixes to customised exposed bindings\n * Bufferwnd component added, acts as a quick-embed text/hex-editor\n * Listwnd component added, act as a basic menu/popup/option list\n * Removed the 'screens-' abstraction, turned out to not be useful enough\n * getxy(), scrolling, keyinput propagation bugs fixed\n * Bindings moved to separate repository, github.com/letoram/tui-bindings\n * Renders to 'RPACK' format for offloading text rendering to server side if TUI_RPACK env. is set.\n * ALTERNATE screen mode now default, pending removal of line mode (re-add as linewnd widget)\n * mouse behaviour preference moved to context flag\n * (BREAKING) moved bitfield to bitmask in order to make bindings less of a pain\n * add a bchunk-handler for stdin/stdout to allow runtime redirection\n\n## Frameservers\n * Terminal: Loosened default restriction on exec control after spawn\n * Terminal: Add first draft 'Vt100'-free CLI\n * Decode: Video shutdown on some libvlc builds fixed\n * Decode: Refactored to support more format cores\n * Decode: Added text-to-speach\n * Decode: UVC capture supports more formats\n * Decode: Added type-probe and 3D model hooks\n * Encode: Added support for A12 output, VNC input translation fixes\n * Remoting: Added support for connecting to A12 servers\n\n## Built-in Helpers\n * Added builtin/decorator.lua for quick- surface decoration controls\n * Added builtin/wayland.lua for meta-wayland/xwayland compositor helper\n * Added builtin/osdkbd.lua for an on-screen keyboard factory\n\n## Packaging / Build\n * egl-dri / sdl platform builds can now coexist on the same machine\n * egl-dri BUILD_PRESET=everything added, builds arcan, arcan_sdl, arcan_headless\n * egl-dri HYBRID_SDL, HYBRID_HEADLESS options added\n * egl-dri nvidia/EGLstreams initialisation/scanout changes for > 385\n * cmake build system simplified (thanks L. Bobrov)\n * sdl2 - add basic window drag resize support\n * the simple 'console' window manager is now included in the default install\n * hook scripts are moved from builtin/scripts/hook to builtin/hooks\n * basic work- docker images in github.com/letoram/arcan-docker\n * arcan-net and libarcan-a12 built by default\n * small -DCLIENT_LIBRARY_BUILD added, which provides only shmif+tui+a12/net code\n * osx/big sur fixes (requires homebrew)\n\n## Lua\n * Added focus_target to specify a frameserver that gets latency/synch priority\n   when deciding what to synch to which display\n * target flag option for blocking adopt / handover\n * loadstring() is now permitted on debuglevels > 0\n * appl_arguments() function added, lets script re-retrieve initial argv\n * added rendertarget_bind function to reassign rendertarget to output segment\n * stepframe_target can now provide dirty region information\n * deprecated load_movie removed (use launch_decode)\n * define_arcantarget expanded to cover more shmif- features\n * instant_image_transform/reset_image_transform now takes an optional slot mask\n * coroutines added to whitelist\n * target_seek now also allows seeking in z axis\n * benchmark functions now allow appending to the trace buffer\n * play_audio/load_asample now take tables for buffer creation as well\n * rendertarget_metrics added to get stats about ongoing transforms\n * image_shader is allowed on rendertarget for bindtargets\n * bond_target and open_nonblock now allows extended type hints\n * image_clip functions now allow an out-of-hierarchy clipping target\n * (lwa) add arcantarget_hint for sending labelhints\n * allow link_image to match scale with parent (for W/H)\n * add relink_image for retaining world-space coordinates at link time\n * image_resize_storage on rendertargets can now change scissor/viewport\n\n## Platform/Egl-Dri\n * Change CRTC allocation / management\n * Better dirty region tracking\n * Direct Scanout heuristics reworked\n * Defer KD_GRAPHICS until first frame\n * Add FP16, 1010102 output modes\n * Add hooks for fencing\n * Mode selection heuristics that biases on higher refresh\n * Buffer import consolated into one set of helper functions in shmifext\n * (+agp) Buffer import layering reworked to account for modifiers/multiplane/mailbox\n * Work towards adaptive FBO- indirection or FBO-color0 from scanout memory\n\n## Platform\n * sdl2: various mouse / input fixes\n * sdl2: fixed GL crashes when on linux/mesa drivers\n * sdl2: basic drag resize implementation\n * lwa/agp: better response during resizes\n * agp: wire up context robustness to crash recovery\n * agp: multiple fixes to blend-mode setup\n * headless platform: provide encode-frameserver virtual display \"output\"\n * openbsd: add rendernode support\n\n## Wayland\n * arcan-wayland now has basic support for Xwayland, with per X client isolation\n * tracing groups can now be set through text-name (e.g. -trace xwl,alloc,seat)\n * wiring for zwp_dma_buf and zwp_confined_pointer\n\n## Vrbridge\n * added in-source build of OpenHMD\n\n## Misc. Tools\n * new tool, arcan-trayicon - generic wrapper for registering clients as tray icons\n * new tool, adbginject - for force- opening a DEBUG segment inside a process\n * external input driver for eye trackers (github.com/letoram/arcan-devices)\n * external input driver for stream decks (github.com/letoram/arcan-devices)\n\n## 0.5.5\n## Engine\n* added support for sliced vstores (cubemap, 3d texture)\n* rendertarget_ids are now exposed as a uniform (for stereo rendering)\n* ugly 1-tick animation timer discard bug fixed\n* fixed video layer display- duplication bug on crash recovery\n* synchronization layer refactor for future multi-GPU/on-demand and multithreaded\n  client processing\n* added system scripts namespace for better sharing between projects\n* expose target_flag controls for deferred / script-locked resize control\n\n## Lua\n* Switched the default careful usermask to match usermask\n* updated function, build_3dbox - added face split option\n* depth function controls added\n* new function, image_storage_slice - for converting and synching a sliced store\n* new function + builtin uniform, rendertarget_id => rtgt_id - for distinguishing\n  between target rendertarget at the shader stage\n* new functions for 3d mesh and navigation: build_sphere, build_cylinder, step3d_model\n* updated 3d motion functions to accept interpolation function arguments\n* exit_silent argument added to shutdown so clients switch to recover state\n* displayhint constants fixed for maximized and fullscreen states\n* mesh_shader now behaves like image_shader (string and numerical ids accepted)\n* histogram_impose can now work with row offsets\n* update_handler on frameserver in terminal state will be _fatal rejected\n* load_fail forward fix to asynchronous image loading\n* build_plane now also permits a vertically oriented mesh\n* image_tesselation function now expose depth buffer controls\n* resample_image extended to allow source vstore snapshotting\n* fix to crash recovery being misinterpreted for -b :self\n* open_nonblock now also supports domain sockets\n* new function, rendertarget_range for masking out rendering of objects based on order\n* add EXIT_SILENT option to shutdown() to allow clients to live on after display server shutdown\n* resettransform now returns remaining time for each transform slot\n* improved (debug build only) trace output on script errors in callback\n* added entry point _fatal(msg)->str triggered on scripting error for better custom error reporting\n\n## Packaging\n* voidlinux - packages upstreamed for (arcan, durden, arcan-wayland, xarcan, aclip, aloadimage)\n\n## Platform\n* restructure to allow more complicated accelerated handle passing\n* egl-dri: tty- switch regression fix\n* egl-dri: context management reworked in preparation of threaded/mixed 10-bit/8-bit outputs\n* linux/openbsd: much improved privilege separation support\n\n## Shmif\n* devicehint- now carries metadata about accepted buffer formats\n* default handlers (when client provides no implementation) for pushed segments are now supported\n* ground work for hidden fallback implementation of force-pushed subsegments\n* last_word mechanism added to communicate a user-readable string for abnormal termination\n* ground work for 'per-scanline' like dirty transfers\n* add helper function, arcan_shmif_handover_exec for delegating subwindows to child processes\n\n## Terminal\n* reworked timing code (again)\n* force-push debug segment now provides a default state debug output window\n\n## Decode\n* Add support for starting position hint\n* Noaudio argument added\n* Add default bindings for seek controls\n* Add optional (default off) libuvc based webcam access\n\n## Waybridge\n* Added support for xdg_wm_base protocol\n* eglSwapBuffer() client livelock race fixed\n* mouse wheel scrolling fixes\n* added controls for specifying temp folder prefix in -exec mode\n\n## VRbridge\n* Add support for resetting default \"forward\" orientation\n\n## Tui\n* subwindow semantics simplified\n* add support for dynamic loading\n* controls for setting semantic label to color mapping\n* fix to writestr / erase_region dirty- tracking\n\n## Tools\n* added acfgfs tool to mount durden- like menus as a FUSE filesystem\n\n## Build\n* multiple rpath / osx build fixes\n* add controls for manual disable fsrv archetypes\n* dropped a number of < 3.0 cmake behaviors and bumped required version\n* egl-dri platform now defaults to adding arcan binary suid\n*\n\n## 0.5.4\n### Engine\n* VR support now covers the full path from bridge communicating metadata and limb\n  discovery/loss/map/updates.\n* (71939f) -0,-1 pipes and filters input setup added, covered in\n  [AWK for Multimedia](https://arcan-fe.com/2017/10/05/awk-for-realtime-multimedia/).\n* format-string render functions extended with vid-subimage blit\n* generate GUIDs for launched frameservers\n\n### Lua\n* New function: define_linktarget used to create an offscreen render pipeline that\n  is tied to the pipeline of another rendertarget.\n* New function: subsystem_reset used to rebuild subsystems (video only for now) to\n  allow live driver upgrades, active GPU switching and so on - without losing state\n* Updated function: camtag_model, change to allow forcing destination rendertarget\n* Updated function: image_tesselation, expose index access\n* Updated function: render_text, added evid,w,h and Evid,w,h,x1,y1,x2,y2\n* Updated function: launch_avfeed, added guid as return\n* Forward current cached GUID on device hint\n\n### SHMIF\n* Persist GUID across migration\n* Allow incoming devicehint events to update 'last known guid'\n* Removed reconnect backoff delay\n\n### Terminal/Tui\n* Support for ligatures improved\n* Highlighting/Inverse/Full-Block cursor changed for better visibility\n* Added controls to \"screenshot\" the current window into a new (input label: COPY_WINDOW)\n* Copy Windows can be set to be the primary clipboard receiver (input label: SELECT_TOGGLE)\n\n### Platform\n* Add preinit stage to event and video subsystems for acquiring / dropping privileges\n* Added chacha20 csprng and cipher\n* OpenBSD: added mouse support\n* Egl-Dri: swap-GPU slot added to db- based configuration\n* SDL2: improved keyboard and mouse support\n\n### Tools/VRbridge\n* Initial support for OpenHMD\n\n### Tools/Xarcan\n* Ported to OpenBSD\n\n### Tools/Waybridge\n* Fixes to subsurface allocations\n* -egl-shm argument added, perform shm->dma_buf conversion in bridge to offload server\n* single exec mode (arcan-wayland -exec /my/bin) for stronger separation between clients\n* add support for rebuilding client (crash recovery and migration) described in (crash-resilient wayland compositing)[https://arcan-fe.com/2017/12/24/crash-resilient-wayland-compositing/]\n* basic seccomp syscall filtering\n\n### Tools/Netproxy\n* First draft version, will be the main focus of the 0.6- series of releases.\n\n## 0.5.3\n### Engine\n* Refactored frameserver- spawning parts to cut down on duplicated code paths and make\n  setup/control more streamlined.\n* Added support for tessellated 2D object, with more fine-grained control over individual\n  vertices.\n* Extended agp_mesh_store to cover what will be needed for full glTF2.\n* Crash-recovery procedure for external clients now also applies to scripting layer\n  errors when there is no fallback appl set.\n* Reworked font/format string code to bleed less state and automatically re-raster if the\n  outer object is attached to a rendertarget with a different output density.\n* Added additional anchoring points to linked images\n  (center-left, center-top, center-right, center-bottom)\n* VR- mapping work for binding external sensor \"limbs\" to 3d models.\n\n### Lua\n* New function: image_tesselation, used to change subdivisions in s and t directions,\n  and to access and change individual mesh attributes.\n* New function: rendertarget_reconfigure, used to change the target density of a\n  rendertarget.\n* New functions: vr_map_limb, vr_metadata\n* Updated function: define_rendertarget. It now returns status, accepts more mode flags\n  (MSAA) and allows target density specification.\n* Updated function: alloc_surface. It now allows additional backend storage formats,\n  (FP16, FP32, alpha-less, RGB565, ...)\n* Updated function: link_image, added additional anchoring points\n\n### SHMIF\n* New library, arcan-shmif-server. This is used for proxying / multiplexing additional\n  connection unto an established one. Primary targets for this lib is a networking proxy\n  and for TUI/Terminal to support delegating decode/rendering to other processes.\n* Added support for HANDOVER subsegments, these are subsegments that mutate into primary\n  segments in order to reuse a connection to negotiate new clients without exposing a\n  listening channel.\n\n### TUI/Terminal\n* Dissemination article: https://arcan-fe.com/2017/07/12/the-dawn-of-a-new-command-line-interface/\n* support for bitmapped fonts (PSFv2) as an optional path for faster rendering on weak hardware.\n* Built-in bitmapped terminus for three densities/sizes (small, normal, large) as fallback.\n* Added dynamic color-scheme updates.\n* Rendering-layer reworked to support shaping, custom blits, ...\n* Experimental double buffered mode (ARCAN_ARG=dblbuf)\n* Experimental smooth scrolling in normal mode (ARCAN_ARG=scroll=4)\n* Experimental shaping mode kerning for non-monospace fonts (ARCAN_ARG=shape)\n* Experimental ligature/substitution mode for BiDi/i8n/\"code fonts\" via Harfbuzz (ARCAN_ARG=substitute)\n* Lua bindings and tool for testing them out (src/tools/ltui)\n\n### Platform\n* Refactored use of environment variables to a configuration API\n* EGL-DRI: VT switching should be noticeably more robust, EGL libraries can now be dynamically\n  loaded/reloaded to account for upgrades or per-GPU sets of libraries.\n* AGP: Updated GLES2 backend to work better with BCM drivers.\n* Evdev: Added optional support for using xkblayouts to populate the utf8 field.\n* EGL-GLES: quick fixes to bring BCM blobs back to life on rPI.\n* OpenBSD: initial port bring-up, keyboard input and graphics working.\n* SDL2: added SDL2 based video/event platform implementation, some input issues left to sort\n  out before 1.2 support can be deprecated and this be the default on OSX.\n\n### Tools\n* Aloadimage: basic support for SVG images\n* Doc: started refactoring lua API documentation format to double as IDL for re-use of lua API\n  as privileged drawing and WM- protocol.\n\n### Tools/Waybridge\n* XKB- Layout transfer support, basic pointer and pointer surface (wl_seat)\n* Damage Regions, dma-buf forwarding (wl_surf)\n* More stubs (data_device/data_device manager/data_offer/data source)\n* zxdg-shell mostly working (toplevel, positioners, popup)\n* added support for relative_pointer motion\n\n## 0.5.2\n### Engine\n* LED subsystem reworked: Support hotplug, synthesized LED devices, added support for a\n  FIFO protocol for communicating with external LED controllers\n* Accelerated Graphics: refactored to be dynamically (re-)loadable, getting closer to\n  multi-vendor-multi-GPU support and GPU hotplugging.\n* Driver backend update: external-launch reloads accelerated graphics library, getting\n  closer to runtime driver upgrades\n* Initial HMD/VR support: Early stages, spawn a subprocess for device control and input\n  fusion/sampling with mapping to a virtual skeleton\n* Allow direct-to-drain enqueue for out-of-band high-priority events\n\n### Tools (src/tools) / Backends (separate repositories)\n* waybridge: (new) (alpha state, see wiki wayland notes) wayland protocol service\n* xarcan: (new) xserver with shmif driver backend\n* qemu: input state- fixes, closer to working multi-display and virgil support\n* SDL: improved synchronization, mouse and multi-window support\n* vrbridge: (new) basic integration skeleton and partial PSVR support (unusable)\n* aclip: (new) clipboard manager for translation between appl- and command-line\n* aloadimage: (new) image viewer with parser sandboxing\n* shmmon: (new) debugging tool for inspection of shmif- connection dumps or single client\n          state from scraping proc\n* openal: patched backend can now be built standalone, back to working state for LWA\n\n### Shmif\n* New segid subtypes: WIDGET, BRIDGE\\_X11, BRIDGE\\_WL, SERVICE\n* Two new sub-libraries: shmif\\_ext (extended accelerated rendering setup convenience) and\n  shmif\\_tui (text user interface)\n* _open_ext added exposing additional initial-registration fields\n* Extended connection protocol to include a preroll stage which act as a collection\n  phase for fonts, outputs, language, etc. in order to cut down on initial setup complexity\n  and reduce connect-to-draw latency.\n* added \\_initial structure that conveys information gathered during the preroll stage\n* add VSIGNAL RHINT to support event- based notification on frame delivery for some I/O\n  multiplexation edge cases\n* Engine-side reservable misc- buffer added to shmpage layout for specialized I/O devices\n  that would saturate the event queues when dealing with latency-sensitive high-samplerate\n  input devices\n* Negotiable extended mapping for synchronizing gamma/color information\n* Negotiable (placeholder/incomplete) extended mapping for supporting HDR source contents\n* Negotiable (placeholder/incomplete) extended mapping for vector content transfer\n\n### Platform\n* egl-dri: backlight support exposed as a LED controller, VT switch stability fixes,\n  EGLStreams support moved from the egl-nvidia platform, removed egl-nvidia, add switchable\n  synchronization strategies for fast, adaptive or conservative.\n* evdev: devices with LEDs now get mapped to a corresponding LED controller.\n* agp: exposed more color packing formats.\n\n### Terminal\n* Tuning to resize/- refresh cpu v latency tradeoffs\n* Refactored codebase and split out drawing/shmif- integration etc. into using shmif\\_tui.\n* Minor bugfixes related to color parsing, added blink speed control\n\n### Lua\n* Deprecated: LED\\_CONTROLLERS constant\n* target- event propagation extended:\n* Added functions: hmd\\_setup, define\\_arcantarget (LWA only, experimental)\n* Updated functions: controller\\_leds, set\\_led, set\\_led\\_intensity, set\\_led\\_rgb,\n                     open\\_nonblock, audio\\_gain, video\\_displaygamma, decode\\_modifiers,\n                     target\\_flags, add\\_3dmesh\n* Added constants: TARGET\\_ALLOW(CM,LODEF,HDR,VECTOR,INPUT)\n* Added aliases: image\\_surface, image\\_surface\\_storage,\n                 image\\_surface\\_resolve (dropped properties suffix)\n* Updated events: display\\_state (additional fields for backlight)\n                  input (status: extended label fields, device reference, device domain)\n                  target (expose \"bchunkstate\", \"preroll\")\n\n### LWA\n * partial/incomplete: requesting/rendering to subsegments\n   (icon, titlebar, popup, ...) via define\\_arcantarget\n * improvements to runtime DPI switching and automated resize-response\n * runtime server controlled 'default font' and 'default font size' switching\n\n## 0.5.1\n### Lua\n\t\t* New functions: target_devicehint (control accelerated device use and connection points),\n\t\t                 video_displaygamma (access low-level display gamma ramps),\n\t\t                 rendertarget_vids (enumerate rendertarget- attachments)\n\t\t* Update functions: target_displayhint(synch controls), set_context_attachment(can now query),\n\t\t                    rendertarget_forceupdate(change rate after creation), target_seek(can now\n\t\t                    specify seek domain), system_collapse (can now disable frameserver-vid\n                                    adoption)\n### Shmif\n\t\t* Added shmif_ext support library for reusing the boiler plate in setting up\n                  egl surfaces, creating contexts and performing handle passing.\n\t\t* Audio buffer negotiation is now allowed to  now switch samplerate\n\t\t* Structure for specifying viewport-border region extended to handle varying t/l/d/r\n\t\t* Support for live migration between connection points\n\t\t* Extended the number of RESET states to account for server crash recovery\n\n### Engine\n\t\t* image loading and guard thread stack size and safety edge condition fixes\n\t\t* allow shmif- connections to negotiate deviating audio samplerate\n\n### Frameservers\n\t\t* Added optional tesseract-ocr support to encode frameserver.\n\t\t* Removed resamplers from game\n\t\t* Terminal: mouse protocol support, better resize filtering, better scrolling step size\n\t\tcontrols, fixed font descriptor leak, OSC set title and bracket paste support\n\n### Platform\n\t\t* Support for egl-dri on BSDs\n\t\t* Input platform for FreeBSD/console\n\t\t* Display mapping semantics improved for SDL/egl-dri\n\t\t* Improved synch- control for multiple displays\n\t\t* linux/event, renamed to evdev, better (but still not good) VT switching support\n\t\t* evdev, MT event formatting fixes\n\t\t* evdev, better recovery in the event of SIGTERM\n\n### Hijack\n\t\t* sdl12 hijack library reworked to use dummy- drivers for A/V\n\t\t* xlib hijack library for partially broken SDL12/SDL2 games that rely on dangling\n\t\t  X/GLX symbols\n\n## 0.5.0\n### Lua\n\t\t* New functions: net_discover, video_synchronization, resize_video_canvas,\n\t\tvideo_displaydscr, video_displaymodes, map_video_display, system_identstr,\n\t\tsystem_collapse, switch_appl, build_pointcloud, image_state,\n\t\tcursor_setstorage, cursor_position, move_cursor, nudge_cursor,\n\t\tresize_cursor, image_mipmap, alloc_surface, tag_image_transform,\n\t\tresample_image, target_reject, target_updatehandler, pacify_target,\n\t\tbond_target, rendertarget_detach, rendertarget_forceupdate,\n\t\trendertarget_noclear, target_flags, target_parent, target_displayhint,\n\t\ttarget_fonthint, target_alloc, open_nonblock, accept_target,\n\t\tdefine_feedtarget, define_nulltarget, util:hash, util:to_base64,\n\t\tutil:from_base64, get_keys, match_keys, list_target_tags,\n\t\ttarget_configurations, audio_buffer_size, crop_image, center_image,\n\t\timage_access_storage, image_resize_storage, image_matchstorage,\n\t\tbuild_pointcloud, system_defaultfont, frameserver_debugstall,\n\t\tinput_capabilities, input_samplebase, set_context_attachment,\n\t\tvideo_display_state, shader_ugroup\n\n\t\t* Removed deprecated: launch_target_capabilities, game_cmdline,\n\t\tswitch_theme, list_games, game_info, game_family, game_genres pause_audio,\n\t\tinstance_image, camtaghmd_model, default_movie_queueopts,\n\t\tdefault_movie_queueopts_override, net_refresh\n\n\t\t* New constants: GL_VERSION, SHADER_LANGUAGE, FRAMESERVER_MODES, APPLID,\n\t\tAPI_ENGINE_BUILD KEY_CONFIG, KEY_TARGET, HINT_FIT, HINT_CROP, HINT_YFLIP,\n\t\tHINT_ROTATE_CW_90, HINT_ROTATE_CCW_90, SHARED_RESOURCE, SYS_APPL_RESOURCE,\n\t\tALL_RESOURCES, INTERP_LINEAR, INTERP_SINE, INTERP_EXPIN, INTERP_EXPOUT,\n\t\tINTERP_EXPINOUT, ANCHOR_UL, ANCHOR_UR, ANCHOR_LL, ANCHOR_LR, ANCHOR_C,\n\t\tVRES_AUTORES, EXIT_SUCCESS, EXIT_FAILURE, MAX_TARGETW, MAX_TARGETH,\n\t\tTYPE_FRAMESERVER, TYPE_3DOBJECT, TARGET_SYNCHRONOUS, TARGET_NOALPHA,\n\t\tTARGET_VSTORE_SYNCH, TARGET_VERBOSE, TARGET_AUTOCLOCK,\n\t\tTARGET_NOBUFFERPASS, DISPLAY_STANDBY, DISPLAY_OFF, DISPLAY_SUSPEND,\n\t\tDISPLAY_ON, RENDERTARGET_NOSCALE, RENDERTARGET_SCALE, READBACK_MANUAL,\n\t\tHISTOGRAM_SPLIT, HISTOGRAM_MERGE, HISTOGRAM_NOALPHA, TD_HINT_CONTINUED,\n\t\tTD_HINT_INVISIBLE, TD_HINT_UNFOCUSED, TD_HINT_IGNORE, FONT_PT_SZ,\n\t\tCRASH_SOURCE\n\n    * Calctarget callback table get, histogram_impose and frequency\n    * Frameserver_terminated events renamed to terminated\n    * Support for coverage tracking trace build\n    * Added color support to output messages\n    * Added interpolation function specifier to move/rotate/blend/resize\n\t\t* Transformation chains can have callback tags associated with completion,\n\t\t\tthis also works as a timer implementation.\n\t\t* Added support for native/accelerated cursor rendering\n    * System_collapse for switching running appl or dropping all resource\n    * Allocations that are not strictly connected to frameservers\n    * _display_state callback\n    * Input class for frameserver/remoting originated input (cursor_input, key_input)\n    * Net discovery events propagated\n    * Automated frameserver- looping dropped,\n      in favour of manual management on terminated events\n    * Monitor state format properly escape Lua strings\n\t\t* Text rendering functions provide additional metrics and has a tabled\n\t\t\tversion where %2 indices ignore format string characters\n    * Link_image can now specify anchor point\n\n### Engine\n    * Database module rewritten, target/configuration/appl key-value store\n    * Namespace rewritten, RESOURCE/APPL split into multiple fine-grained namespaces\n    * Interpolation state exposed as shader built-in\n    * Output dimensions exposed as shader built-in\n    * Better transformation caching and dirty invalidation\n    * Bugfixes to 2D/3D picking\n    * Support for post- Lua init hook scripts (primarily intended for testing and\n      automation purposes).\n    * First refactoring of memory allocation resources using different\n      interface that tracks alignment, metatype etc.\n    * Support for adoption / fallback application in the event of an\n      error in the Lua state machine\n    * Dropped support for framequeues\n\t\t* Font rendering support for default- system font and specifying format\n\t\t  related to system font\n\t\t* Fallback font chains to switch other fonts when glyphs are missing\n\t\t* Cheap, \"shallow\" clipping added to reduce stencil- buffer use\n\t\t* More fine grained control over frameserver data routing\n\t\t* Support for shader instancing through uniform groups\n\t\t* Framesets now act as null_surface + sharestorage calls\n\n### Platform\n    * EGL-GLES split into regular EGL-GLES primarily for\n      ARM devices, and the Linux/KMS specific EGL-DRI with the distant\n\t\t\trelative EGL-NVIDIA.\n    * Interface expanded to support multi-monitor, dynamic synchronization switching\n    * X11 and Linux (evdev) platform support expanded with better input management\n    * Support for DRI render-nodes, accelerated buffering passing\n    * OpenGL used stripped from video/3d/frameserver\n      into AGP (arcan graphics platform) to support lower level graphics APIs\n      and software rendering.\n\n### General\n    * Much improved documentation, automated testing, build tracking and tagging.\n    * Re-organized large parts of the source tree\n    * Switched majority of component licensing from GPL to BSD\n\t\t* AWB / Gridle moved out to own .gits, defunct/unsupported\n\t\t* Added support for LWA, lightweight arcan. A special build that uses\n\t\t\tanother arcan instance as display server.\n\t\t* Much improved support for HDPI and mixed-DPI displays\n\n### Shmif\n    * Support for non-authoritative connections via CONNPATH and CONNKEY\n    * Support for multiple- segments,\n    * More aggressive cookie/dynamic integrity check\n    * Cleanup / simplify connection and setup API\n    * Shmif resize heuristics switched to reduce stalls / latency\n\t\t* Support for multiple video buffers / segment\n\t\t* Support for multiple audio buffers / segment\n\t\t* Support for Communicating buffer dimensions\n\t\t* More fine-grained control over I/O multiplexation, guard threads,\n\t\t  synchronization, blocking vs tearing\n\t\t* Type-model changes, SEGID can register as: LWA, NETWORK_SERVER,\n\t\t\tNETWORK_CLIENT, MEDIA, TERMINAL, REMOTING, ENCODER, SENSOR, GAME,\n\t\t\tAPPLICATION, BROWSER, VM, HMD_SBS, HMD_L, HMD_R, POPUP, ICON, TITLEBAR,\n\t\t\tCURSOR, ACCESSIBILITY, CLIPBOARD, CLIPBOARD_PASTE\n\t\t* target_command- changes: -FDTRANSFER, +BCHUNK_IN, +BCHUNK_OUT,\n\t\t\t+SEEKCONTENT, +DISPLAYHINT, +STREAMSET, +MESSAGE, +FONTHINT, +GEOHINT\n\t\t* external_command- changes: +FAILURE, +BUFFERSTREAM, +STATESIZE, +FLUSHAUD,\n\t\t\t+SEGREQ, +KEYINPUT, +CURSORINPUT, +CURSORHINT, +VIEWPORT, +CONTENT,\n\t\t\t+LABELHINT, +REGISTER, +ALERT, +CLOCKREQ\n\n### Frameservers\n    * Added terminal frameserver\n    * ARCAN_FRAMESERVER_DEBUGSTALL switched to allow infinite or specific- sleep\n    * VNC server support added to encode\n    * Remoting frameserver added (primitive at the moment, support vnc client)\n    * Decode_ default switched from av/ffmpeg to libvlc\n    * Libretro graphing moved to a possible debug secondary segment\n\n## 0.4.0\n### General\n- Monitoring mode now uses the same namespace as themes, can now load .lua crashdumps\n- The core-engine builds and runs on arm/egl devices (e.g. raspberry PI), no working input layer or resolution switching controls yet. _math performance is horrible before we get working ARMv6 + NEON optimized options.\n- Frameserver API cleaned up, reworked build-system and source organisation.\n- Optional avfeed- frameserver added, this is just a skeleton to ease writing custom data sources ( corresponding lua calls are launch_avfeed) and needs to be enabled build-time.\n- Frameservers can now (except on windows) be built in a split- mode, where each subtype (movie, encode, libretro etc.) gets its own binary.\n- Alignment issues when running SIMD optimized math adjusted\n- OSX support partially re-added, no packaging / UI work as of yet.\n- Monitoring mode changed slightly, instead of forking, we now set envvar and re-exec ourselves to accommodate for systems with broken broken fork() support (seriously OSX...)\n\n### LUA\n- initial API documentation coverage now at 100%, language and descriptive qualities for individual pages still have a lot to go, this will be improved gradually.\n- system_load now accepts an optional trigger to disable _fatal calls when asked to load a broken script\n- target_coreopt added to force key,val options to target frameserver\n- target_verbose hints frameservers and their internal processing to expose more detailed data (e.g. pts/framecount/frameskipping for decode and encode)\n- define_calctarget added, similar in style to a recordtarget (without any audio) that exposes buffer data as a callback to a provided lua function\n- target_synchronous disables PTS enforcement and blocks on sync with frameserver and with GPU (only for very specific uses)\n- exposing lua api to the VM is delayed until just before the themename() entry-point\n- all C<->LUA functions are now mapped to a LUA_TRACE(luasymbolname) macro (where ctx refers to the lua_State pointer) for engine dev. to ease customized tracing, by default, the macro is just empty.\n- system_snapshot function added (similar to a crashdump but can be invoked by script dev.)\n- image_children now returns correct VIDs\n- more functions aggressively shut down if a broken VID is provided\n\n### Frameservers/Libretro\n- Support for Core Options\n- Support for 3D Cores (may cause some problems with certain window managers\n    as we need to spawn full windows to get access to an off-screen FBO)\n- Improved support for analog devices and filtering\n- Rollback based input latency masking support added (experimental)\n\n### Database tool\n- Improved builddb times and fixes for libretro core scanning\n- Now adds support for .descr files in games/target folder to disable and override scanning\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 2.4716796875,
          "content": "This file summarizes the basic licenses that apply to\nthe different parts of the project.\n\nKey Licenses:\n      3-Clause BSD (see data/distr/LICENSE.BSD)\n      GPLv2+       (see data/distr/LICENSE.GPL)\n      LGPL         (see data/distr/LICENSE.LGPL)\n\nBasic Engine Components:\n Dependencies:\n * OpenAL (default, openAL-soft, LGPL)\n * PNG (+Zlib, Zlib License)\n * Freetype (BSD-like FT license or GPLv2)\n * SQLite3 (Public Domain)\n\n External Projects included or referenced:\n external/kissfft - 3-Clause BSD, (c) Mark Borgerdin\n external/hidapi - 3-Clause BSD, (c) Alan Ott\n\nengine/* 3-Claused BSD with exceptions / attribution as follows:\n      /arcan_lua.c - GPLv2 as an artifical restriction\n                     plan is to relicense as BSD with 1.0 release.\n      /arcan_ttf.* - Derived version from Sam Lantingas SDL_ttf (Zlib license)\n      /arcan_math.c - public domain\n      /arcan_math_simd.c - public domain\n\nCMakeLists, platform/CMakeLists.* 3-Clause BSD\nplatform/agp/ 3-Clause BSD, Public Domain\nplatform/arcan/ 3-Clause BSD\nplatform/darwin/ 3-Clause BSD, Public Domain\nplatform/stub/ Public Domain\nplatform/cmake/ individually licensed, picked from various projects\n\nframeserver/graphing/ 3-Clause BSD\nframeserver/ntsc/ LGPL (affects highjack- library and libretro- frameserver)\nframeserver/resampler 3-Clause BSD\nframeserver/shl Public Domain (David Herrmann)\n\nshmif/ 3-Clause BSD\n\nshmif/tui 3-Clause BSD, MIT, LGPLv2+(shl_hash)\n          Terminus Font, uses SIL OPEN FONT LICENSE 1.1 (scripts.sil.org/OFL)\n          Copyright 2012 Dimitar Toshkov Zhekov\n          Copyright 2013 Kim Silkebaekken, Nikolay Pavlov, Carl X Su\n\nhijack/ 3-Clause BSD, Public Domain\ndoc/* and media files in data/resources CC-BY-30\n\ntools/netproxy/ See individual README.md\n\nexamples/ Public Domain\ntests/ Public Domain\ndistr/scripts/builtin/json.lua MIT (c) 2019 rxi (github.com/rxi)\ndistr/scripts/ Public Domain\n\nSpecific Platforms:\n SDL: (dependency) SDL1.2/SDL2, LGPL.\n EGL-DRI: (dependency) GLES, OpenGL3 or GLES3\n LWA: LGPL- tainted build, as we statically link a modified openAL-soft backend\n\nDefault Frameservers:\n\tnet-cl, net-srv, net-shared, 3-Clause BSD (depends: libapr (apache licensed))\n\tlibretro, GPLv2+ (depends: blarrg NTSC)\n        encode, 3-Clause BSD (depends: FFMPEG, GPLv2+ licensed)\n        decode-vlc, 3-Clause BSD (depends: libvlc-, LGPL)\n        remoting, 3-Clause BSD (depends: libvncserver, GPLv2+)\n  terminal, MIT (see COPYING in terminal/default/tsm), manually included dep.)\n\t          srcery-colorscheme, MIT\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 10.658203125,
          "content": "This file contains the bare minimum details for quickly getting to know what\nthe main components are and where to go for further information.\n\n# Points of Information\n\nA lot of information and articles about the engine and various features can be\nfound at the [wiki](https://github.com/letoram/arcan/wiki). For offline use,\nyou can also clone the repository itself. When the dust settles, these will\nbe cleaned up and consolidated into a more structured pdf.\n\n    git clone https://github.com/letoram/arcan.wiki\n\nThe Lua scripting API is present in the 'doc' folder, with a .lua file\ndescribing each exposed API function. The wiki has a set of exercises that\nhelps navigate the API itself, with solutions in the tests/exercises folder of\nthe main source repository.\n\n# Development Structure\n\nDevelopment is currently discussed in the IRC channel, #arcan on irc.freenode.net.\nMost activity goes into topic branches that are created and given a checklist\nfile of planned changes. When all changes in a topic branch are finished, it is\nmerged into master and tagged as a new minor release, then the branch is deleted.\n\nImportant bugs and bugfixes goes into master immediately, other changes should\nbe directed towards the topic branch in question. You can use `git branch -a` to\nsee the list of current branches, where the feature branches follow the pattern\nof 'subsystem-version', such as shmif-056.\n\n# Important Layers\n\n* SHMIF, which resides in the src/shmif subdirectory, is the IPC subsystem\n  that is used to glue all the pieces together. See the section further\n\tbelow for more details.\n\n* Frameservers, found in the src/frameservers subdirectory, are default\n  implementations of 'one-purpose' clients. Each fill one archetype out of\n\t'encode' (transform+output), 'decode' (acquisition+transform+input),\n\t'remoting' (connect to external system), 'net' (service discovery and\n\tcommunication), 'terminal' (special management for terminal emulators),\n\t'game' (special management for games). These are chainloaded via\n\t'arcan_frameserver' that do environment cleanup, sandbox setup and so on.\n\n* Platform, found in src/platform, contains low level system integration\n  primitives. It is further split up into video (display control), agp\n\t(accelerated graphics, a mid-level graphics API) and event (event driven\n\tinput/ouput device control). Improved device support and so on goes here.\n\n* Core engine: found in src/engine, contains the actual feature implementation\n  and business logic. It is further broken down into a translation unit per\n  logical group, e.g. audio, video, event processing, scheduling (conductor),\n  and so on.\n\n* Lua-engine: found in src/engine/arcan_lua.c, exposing the higher level API\n  that is controlled via lua script files. Modifications to this layer are\n\tdiscouraged as they require a lot of additional testing, documentation and\n\tquality work. If you really need to extend the engine features at this level\n\tfor your own projects, look into the system\\_load facility for pulling in\n\tshared libraries that hook into the Lua VM.\n\n* Lua-support: found in distr/scripts. These are built-in support scripts that\n\tother applications can re-use, but also for more generic hook-scripts that can\n  be invoked regardless of application at startup.\n\n* Database: found in engine/arcan\\_db.c and a CLI tool in src/tools/db. Keeps\n  both engine configuration, whitelist of external programs that can be launched\n\tand shared key/value configuration store for external programs and for scripts.\n\n* Namespaces: the engine splits its inputs and outputs for persistant and temporary\n  storage into multiple namespaces that regulate function and access permissions.\n  See the arcan manpage for more details on these.\n\n# Appl\n\nThis is the (shorthand for application) set of scripts that is running via the\nLua- part of the engine. They always follow the naming convention of a folder\nwith the base name of the appl with at least a .lua script file inside ith the\nsame base name (so myexample/myexample.lua) and a function that is invoked when\nthe engine is ready. This function also has the same basename.\n\nAn minimal example would thus be:\n\n    mkdir test ; echo \"function test() print('hi'); shutdown(); end\" > test/test.lua\n\nThis should be runnable simply throught:\n\n    /path/to/arcan ./test\n\n# Client APIs\n\nIn addition to the high-level Lua scripts that drive the engine iteself, there\nare APIs for extending engine capabilities and features externally. There is a\nlow-level API (shmif) and a high-level API (tui).\n\n## SHMIF\n\nSHMIF is the heart of the engine - it is the IPC system that is used both to\ncompartmentalise engine features into separate processes and used to implement\nsupport for connecting external clients, input drivers, etc.\n\nWhile the are many details to the API itself, refer to the\narcan\\_shmif\\_control.h and arcan\\_shmif\\_interop.h header files (primarily)\nfor functions and parameters.\n\nBrief summary of the key concepts are as follows:\n\n* 'Connection Point' : a single-use connection slot defined by the currently\n  running appl. Think of it as an address to a UI component or role. It is\n\tconsumed on use and has to be re-opened by the appl.\n\n* Segment : a typed (type:hint to appl as to purpose) IPC container built\n  on top of shared memory. By default, tt carries ring buffers for event\n\ttransfers, as well as video and audio buffers. It can also be extended to\n  handle accelerated graphics or specialised transfer modes for VR, colour\n  management and so on.\n\n* Primary Segment : The segment tied to a connection point.\n\n* Subsegment : A segment that has been allocated through an existing\n  segment rather than consuming a new connection point.\n\n* Migration / Fallback : The act of reconstructing/renogiating a client\n  from one connection point to another. The fallback is simply a default\n\tconnection point that a client will migrate to if the current connection\n\tis severed.\n\nIf a client doesn't inherit a connection point handle in its environment,\nthe ARCAN\\_CONNPATH environment is silently used to find the socket tied\nto a connection point.\n\nExamples of use can be found in tests/examples/frameservers.\n\n## TUI\n\nTUI is a higher level API for creating text-dominant (but support embedding\nmedia contents) applications. It resides on a level of abstraction above\nncurses and the likes, but much below that of typical UI/widget toolkits.\n\nMore documentation and other language bindings will be written as the last\nfew features are getting finalized.\n\nThe strongest example of its use is that of the terminal frameserver, see\nthe code in src/frameservers/terminal/default.\n\n# Tests and Examples\n\nThere are a number of different tests and examples to run. Most of them can\nbe found in the tests/ directory, where a README.md will point you further.\n\nThe exemption to this is the Lua API itself, as the .lua files in the doc\nfolder contains both passing tests /example of use, and failing tests.\nThese are extracted using a support script, docgen.rb inside of that folder.\n\n# Debugging Tools\n\nSince the engine runs under soft-realtime conditions, normal breakpoint based\ndebugging quickly becomes very disruptive, and tracing sources becomes more\nimportant to get valuable information. In this section a few such sources and\ntactics are listed.\n\n## Tracy\n\nArcan has native optional built-in support for the Tracy tracer. Enabling it\ncomes with some caveats (-DENABLE_TRACY=ON). First is to expect that it will\nhold a tcp port (default 8086) open and that any personal data exposed might\nbe accessed this way, which is part of the point. Thus is it not intended to\nrun on normal day-to-day production devices.\n\nSecond is that it collides with crash recovery, so regular Lua scripting\nerrors will become stalls. If running Arcan as the primary display server,\nthis means that the display will be unusable. Be sure to have a second\nconnection path, e.g. ssh or a12 into an afsrv\\_terminal.\n\n\n## Watchdog\n\nWhen running a low level platform where arcan acts as the display server,\nthere is a watchdog active that will first SIGINT (causing the Lua VM to reset)\nand if watchdog still isn't set, SIGKILL. When attaching a debugger, disable\nthe watchdog with:\n\n    set arcan_watchdog_ping=0\n\nwhich is allocated in arcan\\_conductor\\_enable\\_watchdog().\n\n## Engine invocation\n\nThe -q and -g arguments are useful tools for improving debugging. The -q\nargument waits a certain number of 25Hz ticks, makes a snapshot of the scene\ngraph and metadata and shut down. The result will be stored in the\nARCAN\\_LOGPATH environment.\n\nThe 'M' and 'O' arguments are also useful for debugging. These control the\nsampling period and target (file or another arcan instance) for periodically\nsnapshotting in the same format as -q. This allows you to quickly write\ninspection tools that track changes and so on.\n\nThe -g argument increases a DEBUGLEVEL variable in the Lua space, but also\nincreases the verbosity of stderr output from the engine itself.\n\n## Lua Layer\n\nThe default 'debug' table of the lua language (e.g. debug.traceback()) is\nincluded. The same snapshot feature that is invoked with -q can be triggered\nvia system\\_snapshot() calls.\n\nThe lua\\_tracetag() function allows you to assign an arbitrary string to\nany video object refence, which is very useful for finding them in snapshots.\n\nThe benchmark\\_enable and benchmark\\_data functions provides continuous\nmeasurements on frame timing data, rendering costs and so on.\n\nThere is also an appl specific hook, applname\\_fatal(inmsg) that allows you to\nappend/expose more state in the returned string before the interpreter is shut\ndown and handover/crash recovery or shutdown is invoked.\n\nAlthough you cannot call any engine functions anymore, you still have access to\nthe global state of your script, and can thus add your own crash state data to\nmake it easier to debug your scripts.\n\n## Shmif/frameservers\n\nThe communication for a shmif client can be inspected by first setting the\nARCAN\\_SHMIF\\_DEBUG=1 variable.\n\nFor frameservers, the ARCAN\\_FRAMESERVER\\_DEBUGSTALL environment can be set\nto a number of seconds that it should wait. This provides a time window for\nattaching a debugger,\n\nThere is also a 'shmmon' tool that attempts\nto snapshot and dump state of individual connections if given access to the\nmemory pages (proc like interface)\n\n## Specialized 'DEBUG' windows\n\nA unique feature to arcan is that segments can be pushed to a client as a\nway of announcing desired input/output of a specific type. One such type is\n'debug' and allows compliant applications to get dedicated IPC channels for\nattaching debug data that can be composed and managed like any other client\nwindow.\n\nThese can be created via calls to 'target\\_alloc' using the vid of the\nclient as its target.\n\nShould the client fail to provide such debug interface, a hidden one inside\nshmif will take its place and provide more debugging options.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.455078125,
          "content": "Arcan\n=====\n\nArcan is a powerful development framework for creating virtually anything from\nuser interfaces for specialized embedded applications all the way to full-blown\nstandalone desktop environments.\n\nAt its heart lies a robust and portable multimedia engine, with a well-tested\nand well-documented Lua scripting interface. The development emphasizes\nsecurity, debuggability and performance -- guided by a principle of least\nsurprise in terms of API design.\n\nFor more details about capabilities, design, goals, current development,\nroadmap, changelogs, notes on contributing and so on, please refer to the\n[arcan-wiki](https://github.com/letoram/arcan/wiki).\n\nThere is also a [website](https://arcan-fe.com) that collects other links,\nannouncements, releases, videos / presentations and so on.\n\n* For community contact, check out the IRC channel #arcan on irc.libera.chat\n  and/or the [discord (invite-link)](https://discord.com/invite/sdNzrgXMn7)\n\n* For developer information, see the HACKING.md\n\nThe github repository is going defunct thanks to Microsofts incresingly abusive\npractices, and we are thus moving to self-hosted Fossil. The repository will be\nsynched to github for the time being, but no active development activities\nthere. See [fossil.arcan-fe.com](https://fossil.arcan-fe.com).\n\nGetting Started\n====\n\nSome distributions, e.g. [voidlinux](https://voidlinux.org) have most of arcan\nas part of its packages, so you can save yourself some work going for one of\nthose. Other ones with an active community would be through Nix (for example:\nnix-shell -p arcan.all-wrapped).\n\nDocker- container templates (mainly used for headless development and testing)\ncan be found here, quality varies wildly from bad to poor (just like Docker):\n[dockerfiles](https://github.com/letoram/arcan-docker).\n\n## Compiling from Source\n\nThere are many ways to tune the build steps in order to reduce dependencies.\nThere are even more ways to configure and integrate the components depending\non what you are going for; running as a native desktop or as an application\nruntime inside another desktop?\n\nMost options are exposed via the build output from running cmake on the src\ndirectory.\n\nFor the sake of simplicity over size, there is a build preset, 'everything'\nwhich is the one we will use here.\n\n### Dependencies\n\nSpecific package names depend on your distribution, but common ones are:\n\n    sqlite3, openal-soft, sdl2, opengl, luajit, gbm, kms, freetype, harfbuzz\n    libxkbcommon\n\nFor more encoding and decoding options you might also want:\n\n    libvlc-core (videolan), the ffmpeg suite, leptonica + tesseract (ocr)\n    libvncserver libusb1, v4l2-loopback, mupdf\n\nFirst we need some in-source dependencies that are cloned manually for now:\n\n    git clone https://github.com/letoram/arcan.git\n    cd arcan/external/git\n    ./clone.sh\n    cd ../../\n\nThese are typically not needed, the main use is for ensuring certain build\noptions that might vary between distributions (luajit) and to ensure that a\nrecoverable desktop can be statically linked and executed in an otherwise\nbroken userspace (so embedded bringup). The one exception is OpenAL which is\npatched to be used by a special (arcan-lwa) build. This is slated for\nrefactoring to remove that dependency, but there are other priorities in the\nway.\n\n### Compiling\n\nNow we can configure and build the main engine:\n\n    mkdir build\n    cd build\n    cmake -DBUILD_PRESET=\"everything\" ../src\n\nLike with other CMake based projects, you can add:\n\n    -DCMAKE_BUILD_TYPE=Debug\n\nTo switch from a release build to a debug one.\n\nWhen it has finished probing dependencies, you will get a report of which\ndependencies that has been found and which features that were turned on/off,\nor alert you if some of the required dependencies could not be found.\n\nMake and install like normal (i.e. make, sudo make install). A number of\nbinaries are produced, with the 'main' one being called simply arcan. To\ntest 'in source' (without installing) you should be able to run:\n\n     ./arcan -T ../data/scripts -p ../data/resources ../data/appl/welcome\n\nThe -T argument sets our built-in/shared set of scripts, the -p where shared\nresources like fonts and so on can be found, and the last argument being\nthe actual 'script' to run.\n\nWith installation, this should reduce to:\n\n     arcan welcome\n\nIt will automatically try to figure out if it should be a native display\nserver or run nested within another or even itself based on the presence\nof various environment variables (DISPLAY, WAYLAND\\_DISPLAY, ARCAN\\_CONNPATH).\n\n'welcome' is a name of a simple builtin welcome screen, *that will shut down\nautomatically after a few seconds*.\n\nFor something of more directly useful, you can try the builtin appl 'console':\n\n    arcan console\n\nWhich should work just like your normal console command-line, but with the\nadded twist of being able to run (arcan compatible) graphical applications\nas well. For other projects, see the 'Related Projects' further below.\n\nIf input devices are misbehaving, the quick and dirty 'eventtest' in:\n\n    arcan /path/to/arcan/tests/interactive/eventtest\n\nMight be useful in figuring out who to blame.\n\n### SUID Notes\n\nThe produced egl-dri platform 'arcan' binary installs suid by default. This is\nnot strictly necessary unless some specific features are desired, e.g. laptop\nbacklight controls on Linux as those require access to sysfs and friends.\n\nIf that is not relevant, you can strip the suid property on the binary, but do\nnote that your current user still requires access to relevant /dev/input/event\nand /dev/dri/cardN and /dev/dri/renderN files to work properly -- otherwise\ninput and/or graphics devices might not be detected or useable.\n\nThe binary does split off into a non-suid part that the main engine runs off\nof, see posix/psep\\_open.c for auditing what is being run with higher\nprivileges as well as the code for dropping privileges. The privileged process\nis responsible for negotiating device access, implementing virtual-terminal\nswitching and as a watchdog for recovering the main process on live locks or\nsome GPU failures.\n\n### Hook-Scripts\n\nAnother way to extend engine behavior regardless of the appl being used are\nso called hook-scripts. These reside inside the 'system script path' covered\nby the -T command-line argument, or the default of shared/arcan/scripts.\n\nThe idea is that these should be able to provide 'toggle on' features that\nwould need cooperation from within the engine, in order to do quick custom\nmodifications or help bridge other tools.\n\nA good example is 'external\\_input':\n\n    arcan -H hooks/external_input.lua -H hooks/external_input.lua myappl\n\nThis would open up two connection points, 'extio\\_1', 'extio\\_2' that will\nallow one client to connect and provide input that will appear to the 'myappl'\nappl as coming from the engine.\n\nThese are covered in more detail in the manpage.\n\n### Networking\n\nArcan-net is a binary that allows you to forward one or many arcan clients over\na network. It is built by default, and can be triggered both as a separate\nnetwork tool as well as being launched indirectly from shmif by setting\nARCAN\\_CONNPATH=a12://id@host:port, or when issuing a migration request by the\nwindow manager.\n\nSee also: src/a12/net/README.md and src/a12/net/HACKING.md.\n\n### Wayland\n\nThe 'arcan-wayland' or 'waybridge', as it is refered to in some places is\nbinary adds support for wayland and X clients (via Xwayland). It can be run as\neither a global system service, e.g.\n\n    arcan-wayland -xwl\n\nOr on a case by case basis, like:\n\n    arcan-wayland -exec weston-terminal\n\nFor a compliant wayland client, and:\n\n    arcan-wayland -exec-x11 xterm\n\nFor an X client. The 'per case' basis is recommended as it is safer and more\nsecure than letting multiple clients share the same bridge process, at a\nnegilable cost. The downside is that some complex clients that rely on making\nmultiple distinct wayland connections may fail to work properly. Firefox is a\nknown offender.\n\nThere is a number of tuning and troubleshooting options due to the complexity\nof using wayland, consult the manpage and the --help toggle.\n\n### Database\n\nAll runtime configuration is consolidated into a database, either the default\n'arcan.sqlite' one or an explicitly set one (arcan -d mydb.sqlite).\n\nThis is used for platform specific options, engine specific options and for\ntrusted clients that the running scripts are allowed to start. It is also used\nas a configuration key-value store for any arcan applications that are running.\n\nAs a quick example, this is how to inspect and modify keys that 'Durden'\nare currently using:\n\n    arcan_db show_appl durden\n    arcan_db add_appl_kv durden shadow_on true\n\nAdvanced configuration for some video platforms can be set via the reserved\narcan appl name. This would, for instance, set the primary graphics card\ndevice name for the 'egl-dri' platform version:\n\n    arcan_db add_appl_kv arcan video_device=/dev/dri/card2\n\nTo add 'launch targets', you can use something like:\n\n    arcan_db add_target net BIN /usr/bin/arcan-net -l netfwd\n    arcan_db add_config arcan-net default 10.0.0.10 6666\n    arcan_db add_target xterm BIN /usr/bin/arcan-wayland -exec-x11\n\nThis allow applications to start a program as a trusted child (that inherits\nits connection primitives rather than to try and find them using some OS\ndependent namespace). The example above would have spawned arcan-net in the\nlocal mode where clients connecting to the 'netfwd' connpath would be\nredirected to the server listening at 10.0.0.10:6666.\n\nThere are many controls and options for this tool, so it is suggested that you\nlook at its manpage for further detail and instructions.\n\n### Headless Mode\n\nThe 'everything' build option should also produce a binary called\n'arcan\\_headless', at least on BSDs and Linux. This binary can be used to run\narcan without interfering with your other graphics and display system. Given\naccess to a 'render node' (/dev/dri/renderD128 and so on) and it should also\nwork fine inside containers and other strict sandboxing solutions.\n\nTo make it useful, it can record/stream to a virtual screen. An example of\nsuch a setup following the example above would be:\n\n    ARCAN_VIDEO_ENCODE=protocol=vnc arcan_headless console\n\nAssuming the build-system found the libvncserver dependency, this should\nleave you with an exposed (insecure, unprotected, ...) vnc server at\nlocalhost+5900. See afsrv\\_encode for a list of arguments that can be added\nto the encode environment in order to control what happens.\n\nFunding\n=======\n\nThis project is funded through [NGI0 Entrust](https://nlnet.nl/entrust), a fund\nestablished by [NLnet](https://nlnet.nl) with financial support from the\nEuropean Commission's [Next Generation Internet](https://ngi.eu) program. Learn\nmore at the [NLnet project page](https://nlnet.nl/Arcan-A12).\n\n[<img src=\"https://nlnet.nl/logo/banner.png\" alt=\"NLnet foundation logo\" width=\"20%\" />](https://nlnet.nl)\n[<img src=\"https://nlnet.nl/image/logos/NGI0_tag.svg\" alt=\"NGI Zero Logo\" width=\"20%\" />](https://nlnet.nl/entrust)\n\nRelated Projects\n================\n\nIf you are not interested in developing something of your own, you will\nlikely find little use with the parts of this project alone. Here are some\nprojects that you might want to look into:\n\n* [Durden](https://github.com/letoram/durden) is the main desktop\n  environment that uses this project as its display server.\n\n* [Safespaces](https://github.com/letoram/safespaces) is an experimental\n  VR/3D desktop environment.\n\n* [Pipeworld](https://github.com/letoram/pipeworld) is a dataflow\n  (think excel) programming environment\n\n* [Arcan-Devices](https://github.com/letoram/arcan-devices) accumulates\n  extra drivers.\n\nTo get support for more types of clients and so on, there is also:\n\n* Wayland support (see Wayland section above, and src/wayland/README.md).\n\n* [QEmu](https://github.com/letoram/qemu) a patched QEmu version that\n  adds a -ui arcan option.\n\n* [Xarcan](https://github.com/letoram/xarcan) is a patched Xorg that\n  allows you to run an X session 'as a window'.\n\n* [nvim-arcan](https://github.com/letoram/nvim-arcan) is a neovim frontend\n  that act as a native arcan client.\n\nTools\n=====\n\nThere is also a number of helper tools that can be used to add certain\nfeatures, such as support for VR devices and tray-icons. These are built\nseparately and can be found in the tools/ subdirectory. They have their\nown separate build systems and corresponding README.md files.\n\nThey work on the assumption that arcan and its respective libraries have been\nbuilt and installed. They are lockstepped and versioned to the engine, so if\nyou upgrade it, make sure to rebuild the tools as well.\n\nThe main tools of interest are:\n\n## Acfgfs\n\nAcfgfs is a tool that lets you mount certain arcan applications as a FUSE\nfile-system. The application has to explicitly support it. For the Durden\ndesktop environment, you can use global/settings/system/control=somename\nand then:\n\n    arcan_cfgfs --control=/path/to/durden/ipc/somename /mnt/desktop\n\nAnd desktop control / configuration should be exposed in the specified\nmountpoint.\n\n## Aclip\n\nAclip is a clipboard manager similar to Xclip. It allows for bridging the\nclipboard between a desktop environment like Durden, and that of an X server.\n\nThis requires that clipboard bridging has been allowed (disabled by default for\nsecurity reasons). In Durden this is activated via\nglobal/settings/system/clipboard where you can control how much clipboard\naccess the tool gets.\n\n## Aloadimage\n\nAloadimage is a simple sandboxing image loader, similar to xloadimage. It is\nuseful both for testing client behavior when developing applications using\narcan, but also as an image viewer in its own right, with reasonably fast image\nloading, basic playlist controls and so on.\n\n## Vrbridge\n\nVR bridge is an optional input driver that provides the arcan\\_vr binary which\nadds support for various head-mounted displays. More detailed instructions on\nits setup and use can be found as part of the Safespaces project mentioned in\nthe 'Related Projects 'section.\n\n## Trayicon\n\nArcan-trayicon is a tool that chain-loads another arcan client, along with two\nreference images (active and inactive). It tries to register itself in the\nicon-tray of a running arcan application, though it must explicitly enable the\nsupport. In Durden, this is done via the path:\n\n    global/settings/statusbar/buttons/right/add_external=tray\n\nThen you can use:\n\n    ARCAN_CONNPATH=tray arcan-trayicon active.svg inactive.svg afsrv_terminal\n\nOr some other arcan client that will then be loaded when the tray button is\nclicked, confined into a popup and then killed off as the popup is destroyed.\nThis is a quick and convenient way to wrap various system services and external\ncommand scripts.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0078125,
          "content": "0.6.3.4\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}