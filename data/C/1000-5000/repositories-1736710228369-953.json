{
  "metadata": {
    "timestamp": 1736710228369,
    "page": 953,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TritonDataCenter/smartos-live",
      "stars": 1588,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.529296875,
          "content": ".*.swp\n/0-*-stamp\n/1-*-stamp\n/build.env\n/configure-build\n/configure-projects\n/illumos-adjunct*.tgz\n/illumos-extra-*.tgz\n/log\n/manifest.new\n/output\n/output*.old\n/output-iso\n/output-usb\n/output-vmware\n/projects\n/proto\n/proto.boot\n/proto.images\n/proto.strap\n/proto.tests\n/src/*.o\n/src/bootparams\n/src/disk_size\n/src/disklist\n/src/fswatcher\n/src/img/tmp\n/src/measure_terminal\n/src/node-*/src/*.o\n/src/node-*/src/mapfile_node\n/src/node-kstat/.lock-wscript\n/src/node-kstat/build\n/src/nomknod.so.32\n/src/nomknod.so.64\n/src/piadm\n/src/removable_disk\n/src/smartdc/bin/qemu-exec\n/src/sysevent\n/src/vm/tests.tar.gz\n/src/vmunbundle\n/src/zfs_recv\n/src/zfs_send\n/src/zoneevent\n/tools/builder/*.o\n/tools/builder/builder\n/tools/builder/users.c\n/tools/builder/users.c.tmp\n/tools/cryptpass\n/tools/format_image/*.o\n/tools/format_image/format_image\n/tools/javascriptlint/build\n/tools/javascriptlint/spidermonkey/src/build\n/tools/pwgen\n/tools/pwgen-2.06/configure\nboot.manifest.d/\nboot.manifest.gen\nmancheck.conf\nmanifest.d/\nmanifest.gen\npkgsrc/*.tgz\nsrc/cryptpass\nsrc/diskinfo\nsrc/disklayout\nsrc/fssstat\nsrc/json\nsrc/mkzpool\nsrc/node-dtrace-provider/build\nsrc/node-dtrace-provider/node_modules\nsrc/node-dtrace-provider/src/build\nsrc/node-libuuid/build\nsrc/smartdc/bin/pkgsrc-setup\nsrc/smartdc/bin/sdc-factoryreset\nsrc/smartdc/bin/sdc-lastcomm\nsrc/smartdc/bin/sdc-zfs-io-throttle\nsrc/smartdc/lib/ntp_config\nsrc/smartdc/lib/sdc-on-tty\nsrc/sysinfo_mod.so\nsrc/vm/node_modules/props.js\nsrc/zonememstat\nsrc/zonemon\ntests.manifest.gen\ntools/pwgen-2.06/Makefile\ntools/pwgen-2.06/autom4te.cache\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0888671875,
          "content": "[submodule \"deps/eng\"]\n\tpath = deps/eng\n\turl = https://github.com/tritondatacenter/eng.git\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.337890625,
          "content": "<!--\n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n-->\n\n<!--\n    Copyright 2019 Joyent, Inc.\n    Copyright 2024 MNX Cloud, Inc.\n-->\n\n# Triton Contribution Guidelines\n\nThanks for using SmartOS and for considering contributing to it!\n\n## Code\n\nAll changes to Triton project repositories go through code review via a GitHub\npull request.\n\nIf you're making a substantial change, you probably want to contact developers\n[on the mailing list or IRC](README.md#community) first. If you have any trouble\nwith the contribution process, please feel free to contact developers [on the\nmailing list or IRC](README.md#community). Note that larger Triton project\nchanges are typically designed and discussed via [\"Requests for Discussion\n(RFDs)\"](https://github.com/TritonDataCenter/rfd).\n\nSmartOS repositories use the [Triton Engineering\nGuidelines](https://github.com/TritonDataCenter/eng/blob/master/docs/index.md).\nNotably:\n\n* The #master or #main branch should be first-customer-ship (FCS) quality at all\n  times. Don't push anything until it's tested.\n* All repositories should be \"make check\" clean at all times.\n* All repositories should have tests that run cleanly at all times.\n\n## Issues\n\nThere are two separate issue trackers that are relevant for SmartOS code:\n\n* An internal JIRA instance.\n\n  A JIRA ticket has an ID like `OS-7260`, where \"OS\" is the JIRA project\n  name -- in this case used by the\n  [smartos-live](https://github.com/TritonDataCenter/smartos-live) and related\n  repos. A read-only view of most JIRA tickets is made available at\n  <https://smartos.org/bugview/> (e.g.\n  <https://smartos.org/bugview/OS-7260>).\n* GitHub issues for the relevant repo, e.g.\n  <https://github.com/TritonDataCenter/smartos-ui/issues>.\n\nBefore Triton was open sourced, Joyent engineering used a private JIRA instance.\nWhile we continue to use JIRA internally, we also use GitHub issues for\ntracking -- primarily to allow interaction with those without access to JIRA.\n\n## Code of Conduct\n\nAll persons and/or organizations contributing to, or intercting with our\nrepositories or communities are required to abide by the\n[illumos Code of Conduct][coc].\n\n[coc]: https://github.com/TritonDataCenter/illumos-joyent/blob/master/CODE_OF_CONDUCT.md\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 14.845703125,
          "content": "/*\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\n\n/*\n * Copyright 2022 Joyent, Inc.\n * Copyright 2024 MNX Cloud, Inc.\n */\n\n@Library('jenkins-joylib@v1.0.8') _\n\npipeline {\n\n    options {\n        buildDiscarder(logRotator(numToKeepStr: '30'))\n        timestamps()\n        parallelsAlwaysFailFast()\n    }\n    // Don't assign a specific agent for the entire job, in order to better\n    // share resources across jobs. Otherwise, we'd tie up an agent here for\n    // the duration of all stages for a given build, despite it not doing any\n    // actual work.\n    agent none\n\n    parameters {\n        string(\n            name: 'PLAT_CONFIGURE_ARGS',\n            defaultValue: '',\n            description:\n                'Arguments to smartos-live\\'s configure script.\\n' +\n                'By setting any of these, we only run the <b>\"default\"</b>\\n' +\n                'Jenkins pipeline stage using the user-supplied value.<br/>' +\n                '<dl>\\n' +\n                '<dt>-c</dt>\\n' +\n                '<dd>clobber Illumos before each build [default: no]</dd>\\n' +\n                '<dt>-d</dt>\\n' +\n                '<dd>build Illumos in DEBUG mode only [default: no]</dd>\\n' +\n                '<dt>-h</dt>\\n' +\n                '<dd>this message</dd>\\n' +\n                '<dt>-p gcc10</dt>\\n' +\n                '<dd>primary compiler version [default: gcc10]</dd>\\n' +\n                '<dt>-P password</dt>\\n' +\n                '<dd>platform root password [default: randomly chosen]</dd>\\n' +\n                '<dt>-S</dt>\\n' +\n                '<dd>do *not* run smatch [default is to run smatch]</dd>\\n' +\n                '<dt>-s gcc14</dt>\\n' +\n                '<dd>shadow compilers, comma delimited (gcc14,gcc#) [default: none]</dd>\\n' +\n                '</dl>'\n        )\n        text(\n            name: 'CONFIGURE_PROJECTS',\n            defaultValue:\n                'illumos-extra: master: origin\\n' +\n                'illumos: master: origin\\n' +\n                'local/kbmd: master: origin\\n' +\n                'local/kvm-cmd: master: origin\\n' +\n                'local/kvm: master: origin\\n' +\n                'local/mdata-client: master: origin\\n' +\n                'local/ur-agent: master: origin',\n            description:\n                'This parameter is used by smartos-live to decide ' +\n                'which branches to checkout and configure.</br>\\n' +\n                'The string is formatted:<br/>' +\n                '<pre>\\n' +\n                '&lt;relative path to ./projects&gt;:&lt;branch name&gt;:[optional git URL]\\n' +\n                '</pre>' +\n                'In place of a full git url, the keyword \\'origin\\' ' +\n                'is allowed in order to specify the default github remote URL.'\n        )\n        // The default choice() is the first list item\n        choice(\n            name: 'PLATFORM_BUILD_FLAVOR',\n            choices: ['triton', 'smartos', 'triton-and-smartos'],\n            description:\n                '<p><dl>\\n' +\n                '<dt>triton</dt>' +\n                  '<dd>the default, build a platform image and publish it</dd>\\n' +\n                '<dt>smartos</dt>' +\n                  '<dd>build a platform image and smartos artifacts, but do ' +\n                  'not publish a Triton platform image</dd>\\n' +\n                '<dt>triton-and-smartos</dt>' +\n                  '<dd>build both of the above</dd>\\n' +\n                '</dl>' +\n                'The following are the SmartOS artifacts that will be ' +\n                'published when selecting one of the smartos options: ' +\n                '<ul>\\n' +\n                '  <li>SmartOS iso image</li>\\n' +\n                '  <li>SmartOS usb image</li>\\n' +\n                '  <li>SmartOS vmware image</li>\\n' +\n                '  <li>SmartOS Changelog file</li>\\n' +\n                '</ul></p>'\n        )\n        booleanParam(\n            name: 'BUILD_STRAP_CACHE',\n            defaultValue: false,\n            description: 'This parameter declares whether to build and ' +\n                'upload a new strap-cache as part of this build. This ' +\n                'should only be true when triggered by a push to illumos-extra.'\n        )\n        booleanParam(\n            name: 'ONLY_BUILD_STRAP_CACHE',\n            defaultValue: false,\n            description: '<p>This parameter declares that this build should ' +\n                '<b>only</b> build and upload the strap cache tarball. This ' +\n                'is useful in cases where a push to illumos-extra coincides ' +\n                'with an otherwise broken platform build.</p>'\n        )\n    }\n    stages {\n        stage('check') {\n            agent {\n                node {\n                    label 'platform:true && image_ver:21.4.0 && pkgsrc_arch:x86_64 && ' +\n                    'dram:16gb && !virt:kvm && fs:pcfs && fs:ufs && jenkins_agent:3'\n                    customWorkspace \"workspace/smartos-${BRANCH_NAME}-check\"\n                }\n            }\n            steps{\n                sh('''\nset -o errexit\nset -o pipefail\n./tools/build_jenkins -c -F check\n                ''')\n            }\n            post {\n                // We don't notify here, as that doesn't add much\n                // value. The checks should always pass, and it's unlikely\n                // that developers will care when they do. If they don't\n                // pass, then the (likely) GitHub PR will be updated with a\n                // failure status, and the developer can then investigate.\n\n                // https://jenkins.io/doc/pipeline/steps/ws-cleanup/\n                // We don't clean on build failure so that there's a chance to\n                // investigate the breakage. Hopefully, a subsequent successful\n                // build will then clean up the workspace, though that's not\n                // guaranteed for abandoned branches.\n                always {\n                    cleanWs cleanWhenSuccess: true,\n                        cleanWhenFailure: false,\n                        cleanWhenAborted: true,\n                        cleanWhenNotBuilt: true,\n                        deleteDirs: true\n                }\n            }\n        }\n\tstage('build-variants') {\n        parallel {\n            stage('default') {\n                agent {\n                    // There seems to be a Jenkins bug where ${WORKSPACE} isn't\n                    // resolved at the time of node declaration, so we can't reuse\n                    // that when setting our custom workspace for each separate\n                    // pipeline stage (to allow users the chance of inspecting\n                    // workspaces from different pipeline stages after the build\n                    // completes).\n                    // Use ${BRANCH_NAME} instead.\n                    node {\n                        label 'platform:true && image_ver:21.4.0 && pkgsrc_arch:x86_64 && ' +\n                        'dram:16gb && !virt:kvm && fs:pcfs && fs:ufs && jenkins_agent:3'\n                        customWorkspace \"workspace/smartos-${BRANCH_NAME}-default\"\n                    }\n                }\n                when {\n                    // We only want to trigger most pipeline stages on either a\n                    // push to master, or an explicit build request from a user.\n                    // Otherwise, every push to a PR branch would cause a build,\n                    // which might be excessive. The exception is the 'check' stage\n                    // above, which is ~ a 2 minute build.\n                    beforeAgent true\n                    allOf {\n                        anyOf {\n                            branch 'master'\n                            triggeredBy cause: 'UserIdCause'\n                        }\n                        environment name: 'ONLY_BUILD_STRAP_CACHE', value: 'false'\n                    }\n                }\n                steps {\n                    sh('git clean -fdx')\n                    sh('''\nset -o errexit\nset -o pipefail\nexport ENGBLD_BITS_UPLOAD_IMGAPI=true\n./tools/build_jenkins -c -S default\n                    ''')\n                }\n                post {\n                    always {\n                        archiveArtifacts artifacts: 'output/default/**',\n                            onlyIfSuccessful: false,\n                            allowEmptyArchive: true\n                        cleanWs cleanWhenSuccess: true,\n                            cleanWhenFailure: false,\n                            cleanWhenAborted: true,\n                            cleanWhenNotBuilt: true,\n                            deleteDirs: true\n                        joySlackNotifications(\n                            channel: 'smartos', comment: 'default')\n                    }\n                }\n            }\n            stage('debug') {\n                agent {\n                    node {\n                        label 'platform:true && image_ver:21.4.0 && pkgsrc_arch:x86_64 && ' +\n                            'dram:16gb && !virt:kvm && fs:pcfs && fs:ufs && jenkins_agent:3'\n                        customWorkspace \"workspace/smartos-${BRANCH_NAME}-debug\"\n                    }\n                }\n                when {\n                    beforeAgent true\n                    allOf {\n                        anyOf {\n                            branch 'master'\n                            triggeredBy cause: 'UserIdCause'\n                        }\n                        // If a user has set PLAT_CONFIGURE_ARGS, that\n                        // suggests we may have been asked for a special debug, or\n                        // gcc, etc. build. In that case, don't bother building\n                        // any stages which may duplicate the arguments they\n                        // specified. The same goes for the rest of the pipeline\n                        // stages.\n                        environment name: 'PLAT_CONFIGURE_ARGS', value: ''\n                        environment name: 'ONLY_BUILD_STRAP_CACHE', value: 'false'\n                    }\n                }\n                steps {\n                    sh('git clean -fdx')\n                    sh('''\nset -o errexit\nset -o pipefail\nexport PLAT_CONFIGURE_ARGS=\"-d $PLAT_CONFIGURE_ARGS\"\n./tools/build_jenkins -c -d -S debug\n                ''')\n                }\n                post {\n                    always {\n                        archiveArtifacts artifacts: 'output/debug/**',\n                            onlyIfSuccessful: false,\n                            allowEmptyArchive: true\n                        cleanWs cleanWhenSuccess: true,\n                            cleanWhenFailure: false,\n                            cleanWhenAborted: true,\n                            cleanWhenNotBuilt: true,\n                            deleteDirs: true\n                        joySlackNotifications(\n                            channel: 'smartos', comment: 'debug')\n                    }\n                }\n            }\n            stage('gcc14') {\n                agent {\n                    node {\n                        label 'platform:true && image_ver:21.4.0 && pkgsrc_arch:x86_64 && ' +\n                            'dram:16gb && !virt:kvm && fs:pcfs && fs:ufs && jenkins_agent:3'\n                        customWorkspace \"workspace/smartos-${BRANCH_NAME}-gcc14\"\n                    }\n                }\n                when {\n                    beforeAgent true\n                    allOf {\n                        anyOf {\n                            branch 'master'\n                            triggeredBy cause: 'UserIdCause'\n                        }\n                        environment name: 'PLAT_CONFIGURE_ARGS', value: ''\n                        environment name: 'ONLY_BUILD_STRAP_CACHE', value: 'false'\n                    }\n                }\n                steps {\n                    sh('git clean -fdx')\n                    sh('''\nexport PLAT_CONFIGURE_ARGS=\"-p gcc14 -r $PLAT_CONFIGURE_ARGS\"\n# enough to make sure we don't pollute the main Manta dir\n# Also for now we implicitly promise that the gcc14 deliverables are DEBUG,\n# but we could choose to make -gcc14 *and* -debug-gcc14 stages later and alter\n# PLATFORM_DEBUG_SUFFIX accordingly.\nexport PLATFORM_DEBUG_SUFFIX=-gcc14\n./tools/build_jenkins -c -d -S gcc14\n                    ''')\n                }\n                post {\n                    always {\n                        archiveArtifacts artifacts: 'output/gcc14/**',\n                            onlyIfSuccessful: false,\n                            allowEmptyArchive: true\n                        cleanWs cleanWhenSuccess: true,\n                            cleanWhenFailure: false,\n                            cleanWhenAborted: true,\n                            cleanWhenNotBuilt: true,\n                            deleteDirs: true\n                        joySlackNotifications(\n                            channel: 'smartos', comment: 'gcc14')\n                    }\n                }\n            }\n            stage('strap-cache') {\n                agent {\n                    node {\n                        label 'platform:true && image_ver:21.4.0 && pkgsrc_arch:x86_64 && ' +\n                            'dram:16gb && !virt:kvm && fs:pcfs && fs:ufs && jenkins_agent:3'\n                        customWorkspace \"workspace/smartos-${BRANCH_NAME}-strap-cache\"\n                    }\n                }\n                when {\n                    beforeAgent true\n                    // We only build strap-cache as a result of a push to\n                    // illumos-extra. See the Jenkinsfile in that repository\n                    // which has a build(..) step for smartos-live that sets\n                    // this environment value.\n                    anyOf {\n                        environment name: 'BUILD_STRAP_CACHE', value: 'true'\n                        environment name: 'ONLY_BUILD_STRAP_CACHE', value: 'true'\n                    }\n                }\n                steps {\n                    sh('git clean -fdx')\n                    sh('''\nset -o errexit\nset -o pipefail\nexport MANTA_TOOLS_PATH=/root/bin/\n./tools/build_jenkins -c -F strap-cache -S strap-cache\n                    ''')\n                }\n                post {\n                    always {\n                        archiveArtifacts artifacts: 'output/strap-cache/**',\n                            onlyIfSuccessful: false,\n                            allowEmptyArchive: true\n                        cleanWs cleanWhenSuccess: true,\n                            cleanWhenFailure: false,\n                            cleanWhenAborted: true,\n                            cleanWhenNotBuilt: true,\n                            deleteDirs: true\n                        joySlackNotifications(\n                            channel: 'smartos', comment: 'strap-cache')\n                    }\n                }\n            }\n\t}\n\t}\n    }\n    post {\n        always {\n            joySlackNotifications(\n                channel: 'jenkins', comment: 'pipeline complete')\n            joySlackNotifications(\n                channel: 'smartos', comment: 'pipeline complete')\n        }\n    }\n}\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 23.6689453125,
          "content": "#\n# This file and its contents are supplied under the terms of the\n# Common Development and Distribution License (\"CDDL\"), version 1.0.\n# You may only use this file in accordance with the terms of version\n# 1.0 of the CDDL.\n#\n# A full copy of the text of the CDDL should have accompanied this\n# source.  A copy of the CDDL is also available via the Internet at\n# http://www.illumos.org/license/CDDL.\n#\n\n#\n# Copyright 2022 Joyent, Inc.\n# Copyright 2022 MNX Cloud, Inc.\n#\n\n#\n# We allow build.env not to exist in case build automation expects to run\n# generic 'make check' actions without actually running ./configure in\n# advance of a full build.\n#\nifeq ($(MAKECMDGOALS),check)\n-include build.env\nelse\ninclude build.env\nendif\n\nROOT =\t\t$(PWD)\nPROTO =\t\t$(ROOT)/proto\nSTRAP_PROTO =\t$(ROOT)/proto.strap\nMPROTO =\t$(ROOT)/manifest.d\nBOOT_MPROTO =\t$(ROOT)/boot.manifest.d\nBOOT_PROTO =\t$(ROOT)/proto.boot\nIMAGES_PROTO =\t$(ROOT)/proto.images\nTESTS_PROTO =\t$(ROOT)/proto.tests\n\n# On Darwin/OS X we support running 'make check'\nifeq ($(shell uname -s),Darwin)\nPATH =\t\t/bin:/usr/bin:/usr/sbin:/sbin:/opt/local/bin\nNATIVE_CC =\tgcc\nelse\nPATH =\t\t/usr/bin:/usr/sbin:/sbin:/opt/local/bin\nNATIVE_CC =\t/opt/local/bin/gcc\nendif\n\nBUILD_PLATFORM := $(shell uname -v)\n\n#\n# This number establishes a maximum for smartos-live, illumos-extra, and\n# illumos-joyent.  Support for it can and should be added to other projects\n# as time allows.  The default value on large (16 GB or more) zones/systems\n# is 128; on smaller systems it is 8.  You can override this in the usual way;\n# i.e.,\n#\n# gmake world live MAX_JOBS=32\n#\nCRIPPLED_HOST :=\t$(shell [[ `prtconf -m 2>/dev/null || echo 999999` -lt \\\n    16384 ]] && echo yes || echo no)\nifeq ($(CRIPPLED_HOST),yes)\nMAX_JOBS ?=\t8\nelse\nMAX_JOBS ?=\t$(shell tools/optimize_jobs)\nendif\n\n#\n# deps/eng is a submodule that includes build tools, ensure it gets checked out\n#\nENGBLD_REQUIRE := $(shell git submodule update --init deps/eng)\n\nLOCAL_SUBDIRS :=\t$(shell ls projects/local)\nPKGSRC =\t$(ROOT)/pkgsrc\nMANIFEST =\tmanifest.gen\nBOOT_MANIFEST =\tboot.manifest.gen\nJSSTYLE =\t$(ROOT)/tools/jsstyle/jsstyle\nJSLINT =\t$(ROOT)/tools/javascriptlint/build/install/jsl\nCSTYLE =\t$(ROOT)/tools/cstyle\nMANCHECK =\t$(ROOT)/tools/mancheck/mancheck\nMANCF =\t\t$(ROOT)/tools/mancf/mancf\nTZCHECK =\t$(ROOT)/tools/tzcheck/tzcheck\nUCODECHECK =\t$(ROOT)/tools/ucodecheck/ucodecheck\n\nCTFBINDIR = \\\n\t$(ROOT)/projects/illumos/usr/src/tools/proto/*/opt/onbld/bin/i386\nCTFMERGE =\t$(CTFBINDIR)/ctfmerge\nCTFCONVERT =\t$(CTFBINDIR)/ctfconvert\n\nSUBDIR_DEFS = \\\n\tCTFMERGE=$(CTFMERGE) \\\n\tCTFCONVERT=$(CTFCONVERT) \\\n\tMAX_JOBS=$(MAX_JOBS)\n\nADJUNCT_TARBALL :=\t$(shell ls `pwd`/illumos-adjunct*.tgz 2>/dev/null \\\n\t| tail -n1 && echo $?)\n\nSTAMPFILE :=\t$(ROOT)/proto/buildstamp\n\nMANCF_FILE :=\t$(ROOT)/proto/usr/share/man/man.cf\n\nWORLD_MANIFESTS := \\\n\t$(MPROTO)/illumos.manifest \\\n\t$(MPROTO)/live.manifest \\\n\t$(MPROTO)/man.manifest \\\n\t$(MPROTO)/illumos-extra.manifest\n\nMANCHECK_CONFS := \\\n\t$(ROOT)/man/mancheck.conf \\\n\t$(ROOT)/projects/illumos/mancheck.conf \\\n\t$(ROOT)/projects/illumos-extra/mancheck.conf \\\n\t$(shell ls projects/local/*/mancheck.conf 2>/dev/null)\n\nBOOT_MANIFESTS := \\\n\t$(BOOT_MPROTO)/illumos.manifest\n\nSUBDIR_MANIFESTS :=\t$(LOCAL_SUBDIRS:%=$(MPROTO)/%.sd.manifest)\n\nTEST_IPS_MANIFEST_ROOT = projects/illumos/usr/src/pkg/manifests\n\n#\n# To avoid cross-repository flag days, the list of IPS manifest\n# files which define the files included in the test archive is\n# stored in the illumos-joyent.git repository. By including the\n# following Makefile, we get the $(TEST_IPS_MANIFEST_FILES) macro.\n#\ninclude projects/illumos/usr/src/Makefile.testarchive\n\nTEST_IPS_MANIFESTS = $(TEST_IPS_MANIFEST_FILES:%=$(TEST_IPS_MANIFEST_ROOT)/%)\nTESTS_MANIFEST = $(ROOT)/tests.manifest.gen\n\nBOOT_VERSION :=\tboot-$(shell [[ -f $(ROOT)/configure-buildver ]] && \\\n    echo $$(head -n1 $(ROOT)/configure-buildver)-)$(shell head -n1 $(STAMPFILE))\nBOOT_TARBALL :=\toutput/$(BOOT_VERSION).tgz\n\nIMAGES_VERSION :=\timages-$(shell [[ -f $(ROOT)/configure-buildver ]] && \\\n    echo $$(head -n1 $(ROOT)/configure-buildver)-)$(shell head -n1 $(STAMPFILE))\nIMAGES_TARBALL :=\toutput/$(IMAGES_VERSION).tgz\n\nTESTS_VERSION :=\ttests-$(shell [[ -f $(ROOT)/configure-buildver ]] && \\\n    echo $$(head -n1 $(ROOT)/configure-buildver)-)$(shell head -n1 $(STAMPFILE))\nTESTS_TARBALL :=\toutput/$(TESTS_VERSION).tgz\n\nCTFTOOLS_TARBALL := $(ROOT)/output/ctftools/ctftools.tar.gz\n\nSTRAP_CACHE_TARBALL := $(ROOT)/output/strap-cache/proto.tar.gz\n\nifdef PLATFORM_PASSWORD\nPLATFORM_PASSWORD_OPT=-p $(PLATFORM_PASSWORD)\nendif\n\nTOOLS_TARGETS = \\\n\t$(MANCHECK) \\\n\t$(MANCF) \\\n\t$(TZCHECK) \\\n\t$(UCODECHECK) \\\n\ttools/cryptpass\n\nworld: 0-preflight-stamp 0-strap-stamp 0-illumos-stamp 0-extra-stamp \\\n\t0-livesrc-stamp 0-local-stamp 0-tools-stamp 0-devpro-stamp \\\n\t$(TOOLS_TARGETS)\n\nlive: world manifest boot $(TOOLS_TARGETS) $(MANCF_FILE) mancheck\n\t@echo $(SUBDIR_MANIFESTS)\n\tmkdir -p ${ROOT}/log\n\t./tools/build_live -m $(ROOT)/$(MANIFEST) -o $(ROOT)/output \\\n\t    $(PLATFORM_PASSWORD_OPT) $(ROOT)/proto\n\nboot: $(BOOT_TARBALL)\n\n.PHONY: pkgsrc\npkgsrc:\n\tcd $(PKGSRC) && gmake install\n\n$(BOOT_TARBALL): world manifest\n\tpfexec rm -rf $(BOOT_PROTO)\n\tmkdir -p $(BOOT_PROTO)/etc/version/\n\tmkdir -p $(ROOT)/output\n\tpfexec ./tools/builder/builder $(ROOT)/$(BOOT_MANIFEST) \\\n\t    $(BOOT_PROTO) $(ROOT)/proto\n\tcp $(STAMPFILE) $(BOOT_PROTO)/etc/version/boot\n\t(cd $(BOOT_PROTO) && pfexec gtar czf $(ROOT)/$@ .)\n\n#\n# Create proforma images for use in assembling bootable USB device images.  The\n# images tar file is used by \"make coal\" and \"make usb\" in \"sdc-headnode.git\"\n# to create Triton boot and installation media.\n#\n$(IMAGES_PROTO)/4gb.img: boot\n\trm -f $@\n\tmkdir -p $(IMAGES_PROTO)\n\t./tools/build_boot_image -p 4 -r $(ROOT)\n\n$(IMAGES_PROTO)/8gb.img: boot\n\trm -f $@\n\tmkdir -p $(IMAGES_PROTO)\n\t./tools/build_boot_image -p 8 -r $(ROOT)\n\n$(IMAGES_PROTO)/16gb.img: boot\n\trm -f $@\n\tmkdir -p $(IMAGES_PROTO)\n\t./tools/build_boot_image -p 16 -r $(ROOT)\n\n$(IMAGES_TARBALL): $(IMAGES_PROTO)/4gb.img $(IMAGES_PROTO)/8gb.img \\\n\t$(IMAGES_PROTO)/16gb.img\n\tcd $(IMAGES_PROTO) && gtar -Scvz --owner=0 --group=0 -f $(ROOT)/$@ *\n\nimages-tar: $(IMAGES_TARBALL)\n\n#\n# Manifest construction.  There are 5 sources for manifests we need to collect\n# in $(MPROTO) before running the manifest tool.  One each comes from\n# illumos, illumos-extra, and the root of live (covering mainly what's in src).\n# Additional manifests come from each of $(LOCAL_SUBDIRS), which may choose\n# to construct them programmatically.\n#\n# These all end up in $(MPROTO), where we tell tools/build_manifest to look;\n# it will pick up every file in that directory and treat it as a manifest.\n#\n# In addition, a separate manifest is generated in similar manner for the\n# boot tarball.\n#\n# Look ma, no for loops in these shell fragments!\n#\nmanifest: $(MANIFEST) $(BOOT_MANIFEST)\n\nmancheck.conf: $(MANCHECK_CONFS)\n\tcat $(MANCHECK_CONFS) >$@ 2>/dev/null\n\n.PHONY: mancheck\nmancheck: manifest mancheck.conf $(MANCHECK)\n\t$(MANCHECK) -f manifest.gen -s -c $(ROOT)/mancheck.conf\n\n$(MPROTO) $(BOOT_MPROTO):\n\tmkdir -p $@\n\n$(MPROTO)/live.manifest: src/manifest | $(MPROTO)\n\tgmake DESTDIR=$(MPROTO) DESTNAME=live.manifest \\\n\t    -C src manifest\n\n$(MPROTO)/man.manifest: man/manifest | $(MPROTO)\n\tcp man/manifest $@\n\n$(MPROTO)/illumos.manifest: projects/illumos/manifest | $(MPROTO)\n\tcp projects/illumos/manifest $(MPROTO)/illumos.manifest\n\n$(BOOT_MPROTO)/illumos.manifest: projects/illumos/manifest | $(BOOT_MPROTO)\n\tcp projects/illumos/boot.manifest $(BOOT_MPROTO)/illumos.manifest\n\n$(MPROTO)/illumos-extra.manifest: 0-extra-stamp \\\n    projects/illumos-extra/manifest | $(MPROTO)\n\tgmake DESTDIR=$(MPROTO) DESTNAME=illumos-extra.manifest \\\n\t    -C projects/illumos-extra manifest; \\\n\n$(MPROTO)/%.sd.manifest: projects/local/%/Makefile projects/local/%/manifest\n\tcd $(ROOT)/projects/local/$* && \\\n\t    if [[ -f Makefile.joyent ]]; then \\\n\t\tgmake DESTDIR=$(MPROTO) DESTNAME=$*.sd.manifest \\\n\t\t    -f Makefile.joyent manifest; \\\n\t    else \\\n\t\tgmake DESTDIR=$(MPROTO) DESTNAME=$*.sd.manifest \\\n\t\t    manifest; \\\n\t    fi\n\n$(MANIFEST): $(WORLD_MANIFESTS) $(SUBDIR_MANIFESTS)\n\t-rm -f $@\n\t./tools/build_manifest $(MPROTO) | ./tools/sorter > $@\n\n$(BOOT_MANIFEST): $(BOOT_MANIFESTS)\n\t-rm -f $@\n\t./tools/build_manifest $(BOOT_MPROTO) | ./tools/sorter > $@\n\n$(TESTS_MANIFEST): world\n\t-rm -f $@\n\techo \"f tests.manifest.gen 0444 root sys\" >> $@\n\techo \"f tests.buildstamp 0444 root sys\" >> $@\n\tcat $(TEST_IPS_MANIFESTS) | \\\n\t    ./tools/generate-manifest-from-ips.nawk | \\\n\t    ./tools/sorter >> $@\n\n\n#\n# We want a copy of the buildstamp in the tests archive, but\n# don't want to call it 'buildstamp' since that would potentially\n# overwrite the same file in the platform.tgz if they were\n# ever extracted to the same area for investigation. Juggle a bit.\n#\n$(TESTS_TARBALL): $(TESTS_MANIFEST)\n\tpfexec rm -f $@\n\tpfexec rm -rf $(TESTS_PROTO)\n\tmkdir -p $(TESTS_PROTO)\n\tcp $(STAMPFILE) $(ROOT)/tests.buildstamp\n\tpfexec ./tools/builder/builder $(TESTS_MANIFEST) $(TESTS_PROTO) \\\n\t    $(PROTO) $(ROOT)\n\tpfexec gtar -C $(TESTS_PROTO) -I pigz -cf $@ .\n\trm $(ROOT)/tests.buildstamp\n\ntests-tar: $(TESTS_TARBALL)\n\n#\n# Update source code from parent repositories.  We do this for each local\n# project as well as for illumos, illumos-extra, and smartos-live via the\n# update_base tool.\n#\nupdate: update-base $(LOCAL_SUBDIRS:%=%.update)\n\t-rm -f 0-local-stamp\n\n.PHONY: update-base\nupdate-base:\n\t./tools/update_base\n\n.PHONY: %.update\n%.update:\n\tcd $(ROOT)/projects/local/$* && \\\n\t    if [[ -f Makefile.joyent ]]; then \\\n\t\tgmake -f Makefile.joyent update; \\\n\t    else \\\n\t\tgmake update; \\\n\t    fi\n\t-rm -f 0-subdir-$*-stamp\n\n0-local-stamp: $(LOCAL_SUBDIRS:%=0-subdir-%-stamp)\n\ttouch $@\n\n0-subdir-%-stamp: 0-illumos-stamp\n\t@echo \"========== building $* ==========\"\n\tcd \"$(ROOT)/projects/local/$*\" && \\\n\t    if [[ -f Makefile.joyent ]]; then \\\n\t\tgmake -f Makefile.joyent $(SUBDIR_DEFS) DESTDIR=$(PROTO) \\\n\t\t    world install; \\\n\t    else \\\n\t\tgmake $(SUBDIR_DEFS) DESTDIR=$(PROTO) world install; \\\n\t    fi\n\ttouch $@\n\n0-devpro-stamp:\n\t[ ! -d projects/devpro ] || \\\n\t    (cd projects/devpro && gmake DESTDIR=$(PROTO) install)\n\ttouch $@\n\n$(STAMPFILE):\n\tmkdir -p $(ROOT)/proto\n\tif [[ -z $$BUILDSTAMP ]]; then \\\n\t    BUILDSTAMP=$$(TZ=UTC date \"+%Y%m%dT%H%M%SZ\"); \\\n\tfi ; \\\n\techo \"$$BUILDSTAMP\" >$(STAMPFILE)\n\n0-illumos-stamp: 0-strap-stamp $(STAMPFILE)\n\t@if [[ \"$(ILLUMOS_CLOBBER)\" = \"yes\" ]]; then \\\n\t\t(cd $(ROOT) && MAX_JOBS=$(MAX_JOBS) ./tools/clobber_illumos) \\\n\tfi\n\t(cd $(ROOT) && MAX_JOBS=$(MAX_JOBS) ./tools/build_illumos)\n\ttouch $@\n\nFORCEARG_yes=-f\n\n# Check any build requirements that are easy to catch early.\n0-preflight-stamp:\n\t$(ROOT)/tools/preflight\n\ttouch $@\n\n# build our proto.strap area\n0-strap-stamp:\n\t$(ROOT)/tools/build_strap make \\\n\t    -a $(ADJUNCT_TARBALL) -d $(STRAP_PROTO) -j $(MAX_JOBS) \\\n\t    $(FORCEARG_$(FORCE_STRAP_REBUILD))\n\ttouch $@\n\n# build a proto.strap cache tarball\n$(STRAP_CACHE_TARBALL):\n\t$(ROOT)/tools/build_strap make \\\n\t    -a $(ADJUNCT_TARBALL) -d $(STRAP_PROTO) -j $(MAX_JOBS) \\\n            -o $(STRAP_CACHE_TARBALL) $(FORCEARG_$(FORCE_STRAP_REBUILD))\n\n# build a CTF tools tarball\n$(CTFTOOLS_TARBALL): 0-strap-stamp $(STAMPFILE)\n\t$(ROOT)/tools/build_ctftools make \\\n\t    -j $(MAX_JOBS) -o $(CTFTOOLS_TARBALL)\n\n# additional illumos-extra content for proto itself\n0-extra-stamp: 0-preflight-stamp 0-illumos-stamp\n\t(cd $(ROOT)/projects/illumos-extra && \\\n\t    gmake $(SUBDIR_DEFS) DESTDIR=$(PROTO) \\\n\t    install)\n\ttouch $@\n\n0-livesrc-stamp: 0-illumos-stamp 0-strap-stamp 0-extra-stamp\n\t@echo \"========== building src ==========\"\n\t(cd $(ROOT)/src && \\\n\t    gmake -j$(MAX_JOBS) NATIVEDIR=$(STRAP_PROTO) \\\n\t    DESTDIR=$(PROTO) && \\\n\t    gmake NATIVEDIR=$(STRAP_PROTO) DESTDIR=$(PROTO) install)\n\t(cd $(ROOT)/man/ && gmake install DESTDIR=$(PROTO) $(SUBDIR_DEFS))\n\ttouch $@\n\n0-tools-stamp: 0-pwgen-stamp\n\t(cd $(ROOT)/tools/builder && gmake builder)\n\t(cd $(ROOT)/tools/format_image && gmake)\n\ttouch $@\n\n0-pwgen-stamp:\n\t(cd ${ROOT}/tools/pwgen-* && autoconf && ./configure && \\\n\t    make && cp pwgen ${ROOT}/tools)\n\ttouch $@\n\ntools/cryptpass: src/cryptpass.c\n\t$(NATIVE_CC) -Wall -W -O2 -o $@ $<\n\n$(MANCF_FILE): $(MANCF) $(MANIFEST)\n\t@rm -f $@\n\t$(MANCF) -t -f $(MANIFEST) > $@\n\n.PHONY: $(MANCF)\n$(MANCF): 0-illumos-stamp\n\t(cd tools/mancf && gmake mancf CC=$(NATIVE_CC) $(SUBDIR_DEFS))\n\n.PHONY: $(MANCHECK)\n$(MANCHECK): 0-illumos-stamp\n\t(cd tools/mancheck && gmake mancheck CC=$(NATIVE_CC) $(SUBDIR_DEFS))\n\n.PHONY: $(TZCHECK)\n$(TZCHECK): 0-illumos-stamp\n\t(cd tools/tzcheck && gmake tzcheck CC=$(NATIVE_CC) $(SUBDIR_DEFS))\n\n.PHONY: $(UCODECHECK)\n$(UCODECHECK): 0-illumos-stamp\n\t(cd tools/ucodecheck && gmake ucodecheck CC=$(NATIVE_CC) $(SUBDIR_DEFS))\n\njsl: $(JSLINT)\n\n$(JSLINT):\n\t@(cd $(ROOT)/tools/javascriptlint; make CC=$(NATIVE_CC) install)\n\ncheck: $(JSLINT)\n\t@(cd $(ROOT)/src && make check)\n\nclean:\n\t./tools/clobber_illumos\n\trm -f $(MANIFEST) $(BOOT_MANIFEST) $(TESTS_MANIFEST)\n\trm -rf $(MPROTO)/* $(BOOT_MPROTO)/*\n\t(cd $(ROOT)/src && gmake clean)\n\t[ ! -d $(ROOT)/projects/illumos-extra ] || \\\n\t    (cd $(ROOT)/projects/illumos-extra && gmake clean)\n\t[ ! -d projects/local ] || for dir in $(LOCAL_SUBDIRS); do \\\n\t\tcd $(ROOT)/projects/local/$${dir} && \\\n\t\tif [[ -f Makefile.joyent ]]; then \\\n\t\t\tgmake -f Makefile.joyent clean; \\\n\t\telse \\\n\t\t\tgmake clean; \\\n\t\tfi; \\\n\tdone\n\t(cd $(PKGSRC) && gmake clean)\n\t(cd $(ROOT) && rm -rf $(PROTO))\n\t(cd $(ROOT) && [ -h $(STRAP_PROTO) ] || rm -rf $(STRAP_PROTO))\n\t(cd $(ROOT) && rm -f $(STRAP_PROTO))\n\t(cd $(ROOT) && pfexec rm -rf $(BOOT_PROTO))\n\t(cd $(ROOT) && pfexec rm -rf $(IMAGES_PROTO))\n\t(cd $(ROOT) && pfexec rm -rf $(TESTS_PROTO))\n\t(cd $(ROOT) && mkdir -p $(PROTO) $(BOOT_PROTO) \\\n\t    $(IMAGES_PROTO) $(TESTS_PROTO))\n\trm -f tools/cryptpass\n\t(cd tools/builder && gmake clean)\n\t(cd tools/format_image && gmake clean)\n\t(cd tools/mancheck && gmake clean)\n\t(cd tools/mancf && gmake clean)\n\t(cd tools/tzcheck && gmake clean)\n\t(cd tools/ucodecheck && gmake clean)\n\t(cd man && gmake clean)\n\trm -f mancheck.conf\n\trm -f 0-*-stamp 1-*-stamp\n\nclobber: clean\n\tpfexec rm -rf output/* output-iso/* output-usb/*\n\niso: live\n\t./tools/build_boot_image -I -r $(ROOT)\n\nusb: live\n\t./tools/build_boot_image -r $(ROOT)\n\n#\n# Targets and macros to create Triton manifests and publish build artifacts.\n#\n\n#\n# The build itself doesn't add debug suffixes to its outputs when running\n# in the 'ILLUMOS_ENABLE_DEBUG=exclusive' (configure -d) mode, so the settings\n# below add suffixes to the bits-dir copies of these files as appropriate.\n# The 'PUB_' prefix below indicates published build artifacts.\n#\n# This is all overridden if PLATFORM_DEBUG_SUFFIX is defined in the environment,\n# however.\n#\nifeq ($(ILLUMOS_ENABLE_DEBUG),exclusive)\n    PLATFORM_DEBUG_SUFFIX ?= -debug\nendif\n\nBUILD_NAME\t\t\t?= platform\n\n#\n# Values specific to the 'platform' build.\n#\nPLATFORM_BITS_DIR\t\t= $(ROOT)/output/bits/platform$(PLATFORM_DEBUG_SUFFIX)\nPLATFORM_BRANCH ?= $(shell git symbolic-ref HEAD | awk -F/ '{print $$3}')\n\nCTFTOOLS_BITS_DIR\t\t= $(ROOT)/output/ctftools/bits\n\nSTRAP_CACHE_BITS_DIR\t\t= $(ROOT)/output/strap-cache/bits\n\n#\n# PUB_BRANCH_DESC indicates the different 'projects' branches used by the build.\n# Our shell script uniqifies the branches used, then emits a\n# hyphen-separated string of 'projects' branches *other* than ones which\n# match $PLATFORM_BRANCH (the branch of smartos-live.git itself).\n# While this doesn't perfectly disambiguate builds from different branches,\n# it is good enough for our needs.\n#\nPUB_BRANCH_DESC\t\t= $(shell ./tools/projects_branch_desc $(PLATFORM_BRANCH))\n\nPLATFORM_TIMESTAMP\t\t= $(shell head -n1 $(STAMPFILE))\nPLATFORM_STAMP\t\t\t= $(PLATFORM_BRANCH)$(PUB_BRANCH_DESC)-$(PLATFORM_TIMESTAMP)\n\nPLATFORM_TARBALL_BASE\t\t= platform-$(PLATFORM_TIMESTAMP).tgz\nPLATFORM_TARBALL\t\t= output/$(PLATFORM_TARBALL_BASE)\n\nPUB_IMAGES_BASE\t\t\t= images$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz\nPUB_BOOT_BASE\t\t\t= boot$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz\nPUB_TESTS_BASE\t\t\t= tests$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz\n\nPUB_PLATFORM_IMG_BASE\t\t= platform$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).tgz\nPUB_PLATFORM_MF_BASE\t\t= platform$(PLATFORM_DEBUG_SUFFIX)-$(PLATFORM_STAMP).imgmanifest\n\nPUB_PLATFORM_MF\t\t\t= $(PLATFORM_BITS_DIR)/$(PUB_PLATFORM_MF_BASE)\nPUB_PLATFORM_TARBALL\t\t= $(PLATFORM_BITS_DIR)/$(PUB_PLATFORM_IMG_BASE)\n\nPUB_IMAGES_TARBALL\t\t= $(PLATFORM_BITS_DIR)/$(PUB_IMAGES_BASE)\nPUB_BOOT_TARBALL\t\t= $(PLATFORM_BITS_DIR)/$(PUB_BOOT_BASE)\nPUB_TESTS_TARBALL\t\t= $(PLATFORM_BITS_DIR)/$(PUB_TESTS_BASE)\n\nPLATFORM_IMAGE_UUID\t\t?= $(shell uuid -v4)\n\n#\n# platform-publish, platform-bits-upload and platform-bits-upload-latest\n# are analogous to the 'publish', 'bits-upload' and 'bits-upload-latest'\n# targets defined in the eng.git Makefile.defs and Makefile.targ files.\n# Typically a user would 'make world && make live' before invoking any\n# of these targets, though the '*-release' targets are likely more convenient.\n# Those are not dependencies to allow more flexibility during the publication\n# process.\n#\n# The platform-bits-publish|upload targets are also used for pushing\n# SmartOS releases to Manta.\n#\n\n\n.PHONY: common-platform-publish\ncommon-platform-publish:\n\t@echo \"# Publish common platform$(PLATFORM_DEBUG_SUFFIX) bits\"\n\tmkdir -p $(PLATFORM_BITS_DIR)\n\tcp $(PLATFORM_TARBALL) $(PUB_PLATFORM_TARBALL)\n\tcp $(TESTS_TARBALL) $(PUB_TESTS_TARBALL)\n\tfor config_file in configure-projects configure-build; do \\\n\t    if [[ -f $$config_file ]]; then \\\n\t        cp $$config_file $(PLATFORM_BITS_DIR); \\\n\t    fi; \\\n\tdone\n\techo $(PLATFORM_STAMP) > latest-build-stamp\n\t./tools/build_changelog\n\tcp output/gitstatus.json $(PLATFORM_BITS_DIR)\n\tcp output/changelog.txt $(PLATFORM_BITS_DIR)\n\n.PHONY: triton-platform-publish\ntriton-platform-publish: common-platform-publish\n\t@echo \"# Publish Triton-specific platform$(PLATFORM_DEBUG_SUFFIX) bits\"\n\tmkdir -p $(PLATFORM_BITS_DIR)\n\tcat src/platform.imgmanifest.in | sed \\\n\t    -e \"s/UUID/$(PLATFORM_IMAGE_UUID)/\" \\\n\t    -e \"s/VERSION_STAMP/$(PLATFORM_STAMP)/\" \\\n\t    -e \"s/BUILDSTAMP/$(PLATFORM_STAMP)/\" \\\n\t    -e \"s/SIZE/$$(stat --printf=\"%s\" $(PLATFORM_TARBALL))/\" \\\n\t    -e \"s#SHA#$$(digest -a sha1 $(PLATFORM_TARBALL))#\" \\\n\t    > $(PUB_PLATFORM_MF)\n\tcp $(IMAGES_TARBALL) $(PUB_IMAGES_TARBALL)\n\tcp $(BOOT_TARBALL) $(PUB_BOOT_TARBALL)\n\tcd $(ROOT)/output/bits/platform$(PLATFORM_DEBUG_SUFFIX)\n\trm -f platform$(PLATFORM_DEBUG_SUFFIX)-latest.imgmanifest\n\tln -s $(PUB_PLATFORM_MF_BASE) \\\n\t    platform$(PLATFORM_DEBUG_SUFFIX)-latest.imgmanifest\n\n#\n# The bits-upload.sh script in deps/eng is used to upload bits\n# either to a Manta instance under $ENGBLD_DEST_OUT_PATH (requiring $MANTA_USER,\n# $MANTA_KEY_ID and $MANTA_URL to be set in the environment, and\n# $MANTA_TOOLS_PATH pointing to the manta-client tools scripts) or, with\n# $ENGBLD_BITS_UPLOAD_LOCAL set to 'true', will upload to $ENGBLD_DEST_OUT_PATH\n# on a local filesystem. If $ENGBLD_BITS_UPLOAD_IMGAPI is set in the environment\n# it also publishes any images from the -D directory to\n# updates.tritondatacenter.com.\n#\n\nENGBLD_DEST_OUT_PATH ?=\t/public/builds\n\nifeq ($(ENGBLD_BITS_UPLOAD_LOCAL), true)\nBITS_UPLOAD_LOCAL_ARG = -L\nelse\nBITS_UPLOAD_LOCAL_ARG =\nendif\n\nifeq ($(ENGBLD_BITS_UPLOAD_IMGAPI), true)\nBITS_UPLOAD_IMGAPI_ARG = -p\nelse\nBITS_UPLOAD_IMGAPI_ARG =\nendif\n\nBITS_UPLOAD_BRANCH = $(PLATFORM_BRANCH)$(PUB_BRANCH_DESC)\n\nSMARTOS_DEST_OUT_PATH := $(ENGBLD_DEST_OUT_PATH)/SmartOS\n\nCTFTOOLS_DEST_OUT_PATH := \\\n    $(SMARTOS_DEST_OUT_PATH)/ctftools/$(BITS_UPLOAD_BRANCH)\n\nSTRAP_CACHE_DEST_OUT_PATH := \\\n    $(SMARTOS_DEST_OUT_PATH)/strap-cache/$(BITS_UPLOAD_BRANCH)\n\n.PHONY: platform-bits-upload\nplatform-bits-upload:\n\tPATH=$(MANTA_TOOLS_PATH):$(PATH) \\\n\t    $(ROOT)/deps/eng/tools/bits-upload.sh \\\n\t        -b $(BITS_UPLOAD_BRANCH) \\\n\t        $(BITS_UPLOAD_LOCAL_ARG) \\\n\t        $(BITS_UPLOAD_IMGAPI_ARG) \\\n\t        -D $(ROOT)/output/bits \\\n\t        -d $(ENGBLD_DEST_OUT_PATH)/$(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \\\n\t        -n $(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \\\n\t        -t $(PLATFORM_STAMP)\n\n#\n# Clear TIMESTAMP due to TOOLS-2241, where bits-upload would otherwise interpret\n# that environment variable as the '-t' option\n#\n.PHONY: platform-bits-upload-latest\nplatform-bits-upload-latest:\n\tPATH=$(MANTA_TOOLS_PATH):$(PATH) TIMESTAMP= \\\n\t    $(ROOT)/deps/eng/tools/bits-upload.sh \\\n\t        -b $(BITS_UPLOAD_BRANCH) \\\n\t        $(BITS_UPLOAD_LOCAL_ARG) \\\n\t        $(BITS_UPLOAD_IMGAPI_ARG) \\\n\t        -D $(ROOT)/output/bits \\\n\t        -d $(ENGBLD_DEST_OUT_PATH)/$(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX) \\\n\t        -n $(BUILD_NAME)$(PLATFORM_DEBUG_SUFFIX)\n\n#\n# ctftools and strap-cache do not fit well into the bits-upload.sh\n# infrastructure, as we need to differentiate based on aspects of our build\n# platform. So we do it by hand instead.\n#\n\n.PHONY: ctftools-bits-upload\nctftools-bits-upload: $(STAMPFILE)\n\tPATH=$(MANTA_TOOLS_PATH):$(PATH) ./tools/build_ctftools upload \\\n\t    -D $(CTFTOOLS_BITS_DIR) \\\n\t    -d $(CTFTOOLS_DEST_OUT_PATH) \\\n\t    -p $(BUILD_PLATFORM) \\\n\t    -t $(PLATFORM_TIMESTAMP)\n\n.PHONY: strap-cache-bits-upload\nstrap-cache-bits-upload: $(STAMPFILE)\n\tPATH=$(MANTA_TOOLS_PATH):$(PATH) ./tools/build_strap upload \\\n\t    -D $(STRAP_CACHE_BITS_DIR) \\\n\t    -d $(STRAP_CACHE_DEST_OUT_PATH) \\\n\t    -t $(PLATFORM_TIMESTAMP)\n\n#\n# A wrapper to build the additional components that a standard\n# SmartOS release needs.\n#\n.PHONY: smartos-build\nsmartos-build:\n\t./tools/build_boot_image -I -r $(ROOT)\n\t./tools/build_boot_image -r $(ROOT)\n\t./tools/build_vmware -r $(ROOT)\n\n.PHONY: smartos-publish\nsmartos-publish:\n\t@echo \"# Publish SmartOS platform $(PLATFORM_TIMESTAMP) images\"\n\tmkdir -p $(PLATFORM_BITS_DIR)\n\tcp output/platform-$(PLATFORM_TIMESTAMP)/root.password \\\n\t    $(PLATFORM_BITS_DIR)/SINGLE_USER_ROOT_PASSWORD.txt\n\tcp output-iso/platform-$(PLATFORM_TIMESTAMP).iso \\\n\t    $(PLATFORM_BITS_DIR)/smartos-$(PLATFORM_TIMESTAMP).iso\n\tcp output-usb/platform-$(PLATFORM_TIMESTAMP).usb.gz \\\n\t    $(PLATFORM_BITS_DIR)/smartos-$(PLATFORM_TIMESTAMP)-USB.img.gz\n\tcp output-vmware/smartos-$(PLATFORM_TIMESTAMP).vmwarevm.tar.gz \\\n\t\t$(PLATFORM_BITS_DIR)\n\t(cd $(PLATFORM_BITS_DIR) && \\\n\t    $(ROOT)/tools/smartos-index $(PLATFORM_TIMESTAMP) > index.html)\n\t(cd $(PLATFORM_BITS_DIR) && \\\n\t    /usr/bin/sum -x md5 * > md5sums.txt)\n\n.PHONY: ctftools-publish\nctftools-publish:\n\t@echo \"# Publish ctftools tarball\"\n\tmkdir -p $(CTFTOOLS_BITS_DIR)\n\tgit -C projects/illumos log -1 >$(CTFTOOLS_BITS_DIR)/gitstatus.illumos\n\tcp $(CTFTOOLS_TARBALL) $(CTFTOOLS_BITS_DIR)/ctftools.tar.gz\n\n.PHONY: strap-cache-publish\nstrap-cache-publish:\n\t@echo \"# Publish strap-cache tarball\"\n\tmkdir -p $(STRAP_CACHE_BITS_DIR)\n\tgit -C projects/illumos-extra log -1 \\\n\t    >$(STRAP_CACHE_BITS_DIR)/gitstatus.illumos-extra\n\tcp $(STRAP_CACHE_TARBALL) $(STRAP_CACHE_BITS_DIR)/proto.strap.tar.gz\n\n#\n# Define a series of phony targets that encapsulate a standard 'release' process\n# for both SmartOS and Triton platform builds. These are a convenience to allow\n# callers to invoke only two 'make' commands after './configure' has been run.\n# We can't combine these because our stampfile likely doesn't exist at the point\n# that the various build artifact Makefile macros are set, resulting in\n# misnamed artifacts. Thus, expected usage is:\n#\n# ./configure\n# make common-release; make triton-release\n#  or\n# make common-release; make triton-smartos-release\n# or\n# make common-release; make smartos-only-release\n#\n.PHONY: common-release\ncommon-release: \\\n    check \\\n    live \\\n    pkgsrc\n\n.PHONY: triton-release\ntriton-release: \\\n    images-tar \\\n    tests-tar \\\n    triton-platform-publish \\\n    platform-bits-upload\n\n.PHONY: triton-smartos-release\ntriton-smartos-release: \\\n    images-tar \\\n    tests-tar \\\n    triton-platform-publish \\\n    smartos-build \\\n    smartos-publish \\\n    platform-bits-upload\n\n.PHONY: smartos-only-release\nsmartos-only-release: \\\n    tests-tar \\\n    common-platform-publish \\\n    smartos-build \\\n    smartos-publish \\\n    platform-bits-upload\n\n.PHONY: ctftools-release\nctftools-release: \\\n    $(CTFTOOLS_TARBALL) \\\n    ctftools-publish \\\n    ctftools-bits-upload\n\n.PHONY: strap-cache-release\nstrap-cache-release: \\\n    $(STRAP_CACHE_TARBALL) \\\n    strap-cache-publish \\\n    strap-cache-bits-upload\n\nprint-%:\n\t@echo '$*=$($*)'\n\nFRC:\n\n.PHONY: manifest check jsl FRC\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 42.8203125,
          "content": "# Quickstart\n\n```\ngit clone https://github.com/TritonDataCenter/smartos-live.git\ncd smartos-live\n./configure\ngmake world\ngmake live\nls output/\n```\n\n# Overview\n\nThis repository is smartos-live, which builds a SmartOS platform image\ncontaining the illumos core OS components; a set of \"extra\" mostly\nthird-party software required by illumos, by other SmartOS software, or\nfor system management; and a collection of utilities comprising\nSmartOS-specific functionality found in `projects/local/`.\n\n# Contents\n\n- [Community](#community)\n- [Bug Reports](#bug-reports)\n- [Components of SmartOS](#components-of-smartos)\n- [Building SmartOS](#building-smartos)\n  * [Setting up a Build Environment](#setting-up-a-build-environment)\n  * [Common Tasks](#common-tasks)\n  * [Incremental Development](#incremental-development)\n  * [Proto Area](#proto-area)\n  * [Packaging and Manifests](#packaging-and-manifests)\n- [Contributing](#contributing)\n  * [Review](#review)\n  * [Upstreaming](#upstreaming)\n  * [Integration](#integration)\n  * [Testing changes](#testing-changes)\n\n# Community\n\nYou can interact with the SmartOS community in a number of ways. This\nincludes:\n\n* The *smartos-discuss*\n  [mailing list](https://smartos.topicbox.com/groups/smartos-discuss).\n  If you wish to send mail to the list you'll need to join, but you can view\n  and search the archives online without being a member.\n\n* In the *#smartos* IRC channel on the [Libera Chat IRC\n  network](https://libera.chat/).\n\n# Bug Reports\n\nIf you encounter a problem, please reach out for assistance. You can file a\n[GitHub issue](https://github.com/TritonDataCenter/smartos-live/issues) for\nany problem you encounter. When filing a bug, please include the platform\nversion that you're running and a description of the problem.\n\nIf there was an operating system crash dump or a program generated a\ncore dump, it would be greatly appreciated if you could make that\navailable.\n\nWhile there are multiple repositories that make up the smartos-live\nimage, if you're in doubt about where to file a bug or just are\nuncertain, please file it on the [SmartOS live issue\ntracker](https://github.com/TritonDataCenter/smartos-live/issues) and we'll\nhelp from there. It's more important that the bug is recorded and we can work\non solving it than it end up in the right location.\n\n# Components of SmartOS\n\nSmartOS is made up of several different components. These components are:\n\n## smartos-live\n\nThe [smartos-live](https://github.com/TritonDataCenter/smartos-live)\nrepository is the root of SmartOS. It has logic for how to build all of the\ndifferent components that make up SmartOS and has components that are\nspecific to the SmartOS live image environment. For example, it has tools\nlike `vmadm` and `imgadm`.\n\n## illumos-joyent\n\nThe [illumos-joyent](https://github.com/TritonDataCenter/illumos-joyent)\nrepository is the core of the operating system. It represents SmartOS's\nchild of [illumos-gate](https://github.com/illumos/illumos-gate). This\nhas the core kernel, libraries, and user commands.\n\nThe illumos-joyent code can be found in the smartos-live tree under\n`projects/illumos`. The SmartOS build only supports using illumos-joyent\nand not stock illumos-gate.\n\n## illumos-extra\n\nThe [illumos-extra](https://github.com/TritonDataCenter/illumos-extra)\nrepository contains a few different sets of software:\n\n1. Software which is held at a specific version that is required for the\nplatform to build. For example, GNU binutils fall into this category.\n1. Software which is required for illumos-gate to build and is required\nat run time. This category includes things like OpenSSL and libz.\n1. Extra software that we want to exist in the platform image at run\ntime. This category includes software like bash, curl, and Node.js.\n\nillumos-extra serves to make sure that we have the specific versions of\nsoftware that we require at build time. The theory is that given a basic\nworking build machine of any illumos vintage, we can build the rest of\nthe platform and get the specific patched versions of software we need\nfrom illumos-extra.\n\nThe illumos-extra code can be found in the smartos-live tree under\n`projects/illumos-extra`.\n\n### illumos-extra design\n\nillumos-extra operates in a different fashion from the rest of the tree.\nBecause it consists solely of third-party software, it operates in a\ndifferent way. This software is often built using the GNU autotools.\n\nRather than modifying the software directly like we do in the rest of\nthe platform, we instead maintain a series of patches that we apply to a\nstock release of the software, conventionally in a directory named\n`Patches`.\n\nillumos-extra will build the software at least once, but possibly more\ntimes. For example, most software doesn't support building both a 32-bit\nand 64-bit version of itself. We also build software that's required to\nbuild the platform image against the host-system during a bootstrap\nphase. For each version, we'll create a directory that uses the name and\nversion of the software appended with the bitness of the version and\nwhether or not it's the bootstrap phase. For example, if we were\nbuilding zlib-1.2.3.tar.gz, we'd see the following directories:\n\n```\n$ ls -1 libz/\n...\nzlib-1.2.3-32\nzlib-1.2.3-32strap\nzlib-1.2.3-64\nzlib-1.2.3-64strap\nzlib-1.2.3.tar.gz\n...\n```\n\nFinally, while many tarballs are part of the repository, to keep down\nthe ever increasing size of the repository, we are transitioning to\nhaving the contents stored externally and downloaded initially as part\nof the set up process.\n\n## Local Projects\n\nThere are a collection of extra projects that live in separate\nrepositories. Each of these projects lives in the `projects/local`\ndirectory of the smartos-live root. The local projects system defines a\nseries of Makefile targets that a local project is required to implement.\n\nThe current set of local projects include:\n\n* [illumos-kvm](https://github.com/TritonDataCenter/illumos-kvm)\n* [illumos-kvm-cmd](https://github.com/TritonDataCenter/illumos-kvm-cmd) aka\nQEMU\n* [mdata-client](https://github.com/TritonDataCenter/mdata-client)\n* [ur-agent](https://github.com/TritonDataCenter/sdc-ur-agent)\n\n# Building SmartOS\n\n## Setting up a Build Environment\n\nThe first step when building is to set up a build environment. The SmartOS\nbuild requires building on SmartOS.  As of the `base-64-lts 21.4.1` build\nimage, the SmartOS Platform Image must be 20220728 or newer. This can be done\nin VMware, on an existing SmartOS machine, or other virtualization. You must\nbuild inside of a non-global zone.\n\n### Minimum Platform Image\n\nBecause of changes in our build system regarding python3, you'll need to use a\nplatform that includes [OS-8397](https://smartos.org/bugview/OS-8397). Release\nbuilds as of 20220728T031731Z will satisfy this requirement.\n\n### Importing the Zone Image\n\nThe SmartOS build currently uses the `base-64-lts 21.4.1` image\nwhich has a UUID of `85d0f826-0131-11ed-973d-2bfeef68011c`. To import\nthe image, you should run the imgadm command from the global zone:\n\n```\n# imgadm import 85d0f826-0131-11ed-973d-2bfeef68011c\nImporting 85d0f826-0131-11ed-973d-2bfeef68011c (base-64-lts@21.4.1) from \"https://images.smartos.org\"\nGather image 85d0f826-0131-11ed-973d-2bfeef68011c ancestry\nMust download and install 1 image (148.6 MiB)\nDownload 1 image     [=======================>] 100% 148.62MB 497.77KB/s  5m 5s\nDownloaded image 85d0f826-0131-11ed-973d-2bfeef68011c (148.6 MiB)\n...82d1-03d16599f529 [=======================>] 100% 148.62MB   5.12MB/s    29s\nImported image 85d0f826-0131-11ed-973d-2bfeef68011c (base-64-lts@21.4.1)\n#\n```\n\n### Creating the Zone\n\nTo create a zone, you need to create a `joyent` branded zone with\n`vmadm`. We recommend that the zone have the following attributes:\n\n* The brand set to `\"joyent\"`\n* The `image_uuid` set to `\"85d0f826-0131-11ed-973d-2bfeef68011c\"`\n* At least 25 GiB of disk space specified in the `quota` property\n* At least 2-4 GiB of DRAM specified in the `max-physical-memory`\nproperty\n* 1.5-2x the amount of DRAM in the `max_swap` property\n* At least 1 network interface that can reach the Internet\n* The `fs_allowed` property set to `\"ufs,pcfs,tmpfs\"`\n\nFor more information, please see the vmadm manual page and its EXAMPLES\nsection. Once written, you can validate your JSON file by running `vmadm\nvalidate`. For example, if your JSON file was in /var/tmp/build.json you\nwould run:\n\n```\n# vmadm validate create -f /var/tmp/build.json\n```\n\nIf there are problems, then it will tell you which portions of the JSON\nare incorrect and need to be fixed. You can always check if a file is\nvalid JSON by using the `json` command as `json --validate -f\n/var/tmp/build.json`\n\nOnce that's done, then you can create the VM using vmadm as:\n\n```\n# vmadm create -f /var/tmp/build.json\n```\n### Setting Up the Zone\n\nWhile you can build as the root user, we recommend that you create a\nuser to do your day to day work as. If you do create that user there are\ntwo things that you should do:\n\n1. Make sure that the user has the 'Primary Administrator' privilege.\nThere are occasional parts of the build that require administrator\nprivileges and these will use `pfexec` to do so. To add a user to the\nprimary administrator role, as the root user in the zone, you should\nrun:\n\n```\n# usermod -P 'Primary Administrator' <user>\n```\n\n2. Make sure that the user's shell is set to `/bin/bash`. There have\noccasionally been build issues when using different shells.  Ultimately,\nthose are bugs. If you do use another shell and encounter issues,\n[please tell us](#bug-reports).\n\nThe final prerequisite is to make sure that `git` is installed. To do\nthat, you should run as your user:\n\n```\n$ pfexec pkgin -y in git\n...\n$\n```\n\nWith this, you should be all set in your new environment. The normal\nbuild process will make sure that any required packages are installed.\n\nIf you're running any of the release-engineering targets, the build will\nalso require Manta tools and `updates-imgadm` to be available on `$PATH`,\nbut most users are unlikely to need to build these targets.\n\n## Basic Build Pattern\n\nOnce the build zone has been configured, you can kick off a build in a\nfew easy steps:\n\n```\n$ git clone https://github.com/TritonDataCenter/smartos-live\n$ cd smartos-live\n$ ./configure\n$ gmake live\n```\n\nThis will produce a tarball that contains the platform. The platform\nwill be placed in the `output` directory and a symlink to the latest\ntarball will be there.\n\nThe configure script takes a few options that allow you to do a DEBUG\nbuild, configure shadow compilers, etc. See `./configure -h`.\n\n### Build Outputs\n\nBy default, running `gmake live` produces a directory and a tarball in\nthe `output` directory.  This can be used in Triton with the `sdcadm`\ncommands and can be used to boot through `ipxe` or other network boot\nloaders.\n\nIt is also possible to create ISO and USB images. These images default\nto the VGA console. To make an ISO or USB image you can run from the\nroot of the smartos-live repository:\n\n```\n$ ./tools/build_boot_image -r $ROOT\n$ ./tools/build_boot_image -I -r $ROOT\n$ ./tools/build_boot_image -I -r $ROOT -c ttyb # sets the default console to ttyb\n```\n\nThese will create images in the `output-usb` and `output-iso`\ndirectories based on the latest platform image.\n\n## Build Order and Common Targets\n\nWhen you kick off a smartos-live build (running `gmake live`), it will\nbuild components in the following order:\n\n1. illumos-extra bootstrap phase against the build system\n2. illumos-joyent\n3. illumos-extra main phase against the proto area\n4. smartos-live src against the proto area\n5. local projects against the proto area\n6. assemble packaging manifests\n7. assemble the platform tgz\n\nIf you run `gmake world` instead of `gmake live`, then the build will\nstop after all of the components have been built.\n\nThe following summarizes the primary targets used on a day to day basis:\n\n* `world`: Builds all the components\n* `live`: Assembles the live image from the built components\n* `check`: Runs various style and lint tools on code in smartos-live\n* `clean`: Removes built artifacts and intermediate objects\n* `update`: Updates all of the repositories to the latest\n* `iso`: Builds a CD-ROM ISO image, defaulting to the VGA console\n* `usb`: Builds a FAT 32 USB image, defaulting to the VGA console\n\n## Build Targets for Release Engineering\n\nThis section is likely to only interest users who perform release builds\nof SmartOS, or the Triton Platform Image.\n\nWhen performing release builds, the following are convenient targets\nwhich encapsulate the entire release process for a specific Triton\nand/or SmartOS build variety:\n\n* `common-release`: depends on `check`, `live` and `pkgsrc` targets and\n   needs to be run before a subsequent `make` invocation of any of\n   the `-release` targets below\n* `smartos-release`: builds, publishes and uploads SmartOS artifacts\n* `triton-release`: builds, publishes and uploads a Triton platform\n  image\n* `triton-and-smartos-release`: all of the above\n\nThe following are used by the targets listed above as part of the\nrelease engineering process when publishing release builds of the\nSmartOS and Triton platform image. There are varieties of each target\nfor both build flavors.\n\n* `*-publish`: stage bits from the output directory, preparing for\n  upload\n* `*-bits-upload`: upload bits to either Manta, a remote filesystem\n  and optionally, a Triton imgapi instance, defaulting to\n  `updates.tritondatacenter.com`\n* `*-bits-upload-latest`: as above, except attempt to re-upload the\n  latest built bits, useful in case of interrupted uploads\n\nThe `bits-upload` tool comes from\n[eng.git](http://github.com/TritonDataCenter/eng) which the build pulls in via\nthe `deps/eng` \"git submodule\" from the top-level of the workspace.\n\nThe upload can be influenced by the following shell environment\nvariables:\n\n* `ENGBLD_DEST_OUT_PATH`: The path where we wish to upload bits. This is\n  assumed to be relative to `$MANTA_USER` if using a Manta path.\n  Otherwise this can be set to a local (or NFS) path where we wish to\n  upload build arifacts.\n* `ENGBLD_BITS_UPLOAD_LOCAL`: If set to `true`, this causes us to simply\n  `cp(1)` bits to `$ENGBLD_DEST_OUT_PATH` rather than upload using\n  Manta tools.\n* `ENGBLD_BITS_UPLOAD_IMGAPI`: If set to `true`, this causes the build to\n  also attempt to upload any Triton images found in the `output/bits`\n  directory to an imgapi instance, which defaults to\n  `updates.tritondatacenter.com`.\n\nFor Manta and imgapi uploads, the following environment variables are\nused to configure the upload:\n\n* `MANTA_USER`\n* `MANTA_KEY_ID`\n* `MANTA_URL`\n* `UPDATES_IMGADM_URL`\n* `UPDATES_IMGADM_IDENTITY`\n* `UPDATES_IMGADM_CHANNEL`\n* `UPDATES_IMGADM_USER`\n\nFor details on the default values of these variables, and how they are\nused, see\n[bits-upload.sh](https://github.com/TritonDataCenter/eng/blob/master/tools/bits-upload.sh)\n\nFinally, release engineers may find the script\n[`build_jenkins`](/tools/build_jenkins) useful, intended to be run\ndirectly as part of a Jenkins job, invoking the targets above.\n\n## Common Tasks\n\n### Cleaning Up\n\nTo clean out all the built contents of the various repositories, there\nis a top level 'clean' target. This will remove all of the built\nartifacts, the proto area, and will descend into each component and\nclean them up. For example, this will end up running `dmake clobber` in\nillumos-joyent to clean up all of its contents.\n\nOccasionally, there are bugs which cause some files to be missed. If you\nencounter that, you can use git's `git clean -fdx` command to clean up.\nHowever, please be careful when using this command as if you have new\nfiles that aren't in the git repository, this will mistakenly remove\nthem. If you encounter cases where we're not properly removing files,\nplease report a bug.\n\n### Updating\n\nTo update all of the repositories that are part of the platform, you\nshould first make sure that all of your changes have been committed.\nOnce they have been, you can run the following from the root of the\nsmartos-live repository:\n\n```\n$ gmake update\n```\n\nWhich will go through and update every repository. If a repository has\nchanged, it will also remove the corresponding stamp file that controls\nits building. If you have local changes in the repository, then it will\nrebase your local changes (as though it had run `git pull --rebase`) on\ntop of everything.\n\nIf you haven't updated in a while, you may want to clean your\nrepositories and kick off a full build again before performing\nincremental building. Occasionally, there will be flag days that will\nrequire you to rerun `./configure` before proceeding.\n\n### Changing Branches\n\nMost of the time, all development happens on the `master` branch. All\nSmartOS images are built from the master branch and the general theory\nis that the master branch should always build, run, and be of a high\nenough quality that we could cut a release at any time.\n\nWhile developing, you may want to use local branches, sometimes there\nare longer lived branches that exist for project development or for\nreleases. To automate the configuration of branches when creating the\n`projects` directory, create a file called `configure-projects` in the\nroot of the smartos-live repository.\n\nThe `configure-projects` file takes the format:\n\n```\n<path relative to ./projects>:<project branch>:[project git repo URL or path]\n```\n\nThe special token `origin` can be used in place of a full git repo URL to denote\nthe standard github.com location for that project.  If no URL is given, we\ndefault to github.com.\n\nIf you update the branch name that corresponds to a repository, rerun\n`./configure` to make sure that every branch is set to the correct\none, except that of smartos-live which needs to be changed manually.\n\nNot all repositories have to be on the same branch. It's totally fine to\nmix and match.\n\n### Additional build customization\n\nSeveral variables can also be set in a shell script at the top of the\nsmartos-live repository called `configure-build` and are sourced by `configure`\nif this file exists. This allows you to override `configure` script defaults,\nor include additional pre-build customization.\n\nIf this file does not exist, the following defaults are set by `configure`:\n\n```\nPUBLISHER=\"joyent\"\nRELEASE_VER=\"joyent_147\"\nON_CLOSED_BINS_URL=\"https://us-central.manta.mnx.io/Joyent_Dev/public/releng/illumos/on-closed-bins.i386.tar.bz2\"\nON_CLOSED_BINS_ND_URL=\"https://us-central.manta.mnx.io/Joyent_Dev/public/releng/illumos/on-closed-bins-nd.i386.tar.bz2\"\nILLUMOS_ADJUNCT_TARBALL_URL=\"https://us-central.manta.mnx.io/Joyent_Dev/public/releng/adjuncts/illumos-adjunct.20210922.tgz\"\n```\n\n### Debug Builds\n\nBy default, all of SmartOS is built non-debug. It is possible to build a\ndebug build of SmartOS. This debug build primarily changes things by\ncreating a debug build of illumos. A debug build of illumos will result\nin various things such as:\n\n* Additional assertions\n* Additional log messages\n* Kernel memory debugging being enabled by default\n* Several daemons will enable user land memory debugging\n\nNote, the overhead of some things like kernel memory debugging is\nnon-trivial. Debug builds should not be used for performance testing. In\naddition, there will be substantially more memory used as a result.\n\nHowever, for development and bring up, a debug build can be invaluable.\nTo enable a debug build in a fresh build environment, you can specify\narguments when running `./configure` to take care of it. For example, you\nwould modify the normal workflow as follows:\n\n```\n$ git clone https://github.com/TritonDataCenter/smartos-live\n$ cd smartos-live\n$ ./configure -d\n$ gmake live\n```\n\nIf you have an existing build environment, you can modify the\n`illumos.sh` file that is generated to cause it to perform a debug\nbuild. However, if you have already built illumos, it is recommended\nthat you clobber it before doing anything else. For example:\n\n```\n$ gmake clobber\n$ vi projects/illumos/illumos.sh\n# Add -DF to the NIGHTLY_OPTIONS line\n$ gmake live\n```\n\nThe `-D` flag indicates that a debug build should be performed while the\n`-F` flag indicates that we should not perform both a debug and\nnon-debug build. This is done because we do not set up the build to\nsupport multiple proto-areas, this will end up just causing the system\nto clobber one build with the other. For more information on the nightly\nflags, see [nightly(1ONBLD)](https://illumos.org/man/1onbld/nightly)\n\n### Controlling Maximum Number of Jobs\n\nBy default, the build will determine the maximum number of jobs to use\nbased on the DRAM and CPU available in the zone. However, there are\ntimes where you may want to control this manually. To do this, you\nshould set the `MAX_JOBS` environment variable.\n\n## Incremental Development\n\nEach of the different build phases is represented with a stamp file that\nexists in the root of the smartos-live clone. These files are named based\non the directory. For example `0-illumos-stamp` and\n`0-subdir-mdata-client-stamp`.\n\nIf you remove one of these stamp files, the component will be rebuilt\nand anything which depends on it will be. For example, if you remove\n`0-illumos-stamp`, it will end up causing illumos-extra to be rebuilt\n(as it depends on the contents of illumos) and all of the local projects\nwill be rebuilt. Each of these components will be built incrementally.\nThey will not be rebuilt from scratch unless they are cleaned up.\n\nThe one project which is different here is illumos-extra. illumos-extra\nhas two stamps: the `0-strap-stamp` and the `0-extra-stamp`. The\n`0-strap-stamp` represents building the bootstrap phase of\nillumos-extra. This is the version of illumos-extra which builds the\ndependencies we need for the build. These are built against the host\nbuild system. After illumos is built, we then move onto the primary\nphase of illumos-extra where we build everything that we need against\nthe proto area. This represents the `0-extra-stamp`.\n\nTo rebuild most components you can simply remove the stamp file and\nbuild that stamp file again. For illumos and illumos-extra this may\nprove to be rather cumbersome. For incremental building of these\ncomponents, we recommend that you first build the system completely\nbefore performing any incremental work.\n\n### Incremental Building of illumos\n\nIf you are going to perform incremental building of illumos, you should\nfirst familiarize yourself with the [illumos Developer's\nGuide](https://www.illumos.org/books/dev/). If you simply remove the\n`0-illumos-stamp` file, this will perform an incremental nightly build.\n\nHowever, for most iterations, this can be cumbersome. Here, you can use\nthe `bldenv(1ONBLD)` tool. To use `bldenv`, follow the following steps\nfrom the root of the smartos-live repository:\n\n```\n$ cd projects/illumos/usr/src\n$ ./tools/proto/root_i386-nd/opt/onbld/bin/bldenv ../../illumos.sh\n```\n\nFrom here, you can follow the [illumos Developer's\nGuide](https://www.illumos.org/books/dev/workflow.html#incremental-building)\nwith respect to building individual components. If you build everything\nthat you need and it has no impact on other components in the broader\nSmartOS build, then once you are complete, you can run `gmake live` again.\nFor example, if you're iterating on a driver or command of some kind in\nthe platform then you can simply use `dmake install` to get the build\nartifacts into the proto area and then run `gmake live` at the top level\nof smartos-live to rebuild the platform image.\n\nIn addition, depending on what you're working on, you can also sometimes\ncopy over build artifacts over to the running system and use them out of\n`/var/tmp/`. For example, if you're iterating on a single command. Rather\nthan building the live image time and time again, a more common approach\nis to use `bldenv` and make that single command or library again and copy\nit over to a running system to test against. Even if the vast majority\nof development is done this way, it's still important to always test a\nfull build at the end.\n\nThe top-level tool `./tools/build_illumos` in the smartos-live\nrepository will execute an incremental nightly(1ONBLD) build. This will\nperform the same actions as if you removed the `0-illumos-stamp` and ran\n`gmake 0-illumos-stamp` at the top-level. However, manually invoking it\nwill not cause dependent items to be rebuilt. This comes with the same\nrisks and rewards of using `bldenv`.\n\n### Iterating on illumos-extra\n\nIf you're working on the bootstrap phase, make sure you're not using a cached\n`proto.strap` first. Using `./configure -r` will tell `./tools/build_strap` not\nto download a pre-built tarball for `proto.strap`, but instead do a full strap\nbuild of illumos-extra. Remember to explicitly `rm 0-strap-stamp`.\n\nWorking on illumos-extra can sometimes be frustrating if you're simply\nbuilding it from the top-level via the stamp each time. This is because\nsome parts of GCC and other software will often be rebuilt. It is\npossible to rebuild just a single directory by manually invoking what\nthe Makefile would do. Note, that this manual process requires you to\nuse the path of the repository that you're operating on.\n\nThe simplest way to figure out how to rebuild what you need is to examine the\nmake output from a build. For example, if you were iterating on gas and the root\nof the smartos-live repository was at `/home/rm/src/mdb_v8`, then you might run\na manual command like:\n\n```\n$ cd projects/illumos-extra/binutils\n$ STRAP= \\\n  CTFMERGE=/home/rm/src/mdb_v8/projects/illumos/usr/src/tools/proto/*/opt/onbld/bin/i386/ctfmerge \\\n  CTFCONVERT=/home/rm/src/mdb_v8/projects/illumos/usr/src/tools/proto/*/opt/onbld/bin/i386/ctfconvert \\\n  gmake DESTDIR=/home/rm/src/mdb_v8/proto install\n```\n\nPlease do not take the above command and run it in your environment.\nThis is meant to be an example. The actual illumos-extra per-directory\ninvocation may have changed. This will also vary whether or not you're\noperating during the bootstrap phase or not.\n\nBy default, running the `install` target will perform an incremental\nbuild. If a partial build has been completed, the source will not be\nextracted again and patches will not be applied. If you're changing any\npatches that apply or configure options, you should use the `clean`\ntarget inside of the target directory.\n\n### Iterating on vmadm and imgadm\n\nWhile working on `vmadm` and `imgadm` there often isn't a need to rebuild\nthe platform image every single time that you want to make a change. A\nscript called `tools/rsync-to` exists which will synchronize all of your\nlocal change from the smartos-live `src/vm` and `src/img` directories\nand apply them to the target server by copying them into `/var/tmp/` and\nthen performing a lofs mount.\n\n## Proto Area\n\nWhen various pieces of software build, they are eventually installed\ninto a proto area. The proto area represents the file system layout of\nwhat will become the platform image. For example, the contents of the\n`/usr` directory in the proto area will be used in the built platform\narea. Note, the entire contents of the proto area are not included. The\nspecific set of files is determined by the manifests, which will be\ndiscussed in a later section.\n\nThe root of the proto area is in the `proto` directory under the root of\nthe smartos-live git clone.\n\nBinaries in the proto area should be thought of as cross-compiled\nbinaries. While in our case, we are building x86 on x86, the binaries\nand libraries should not be assumed to work on the existing system. That\nsaid, in many cases you can get away with it. However, testing out of\nthe proto area is no substitute for doing full testing.\n\n## Packaging and Manifests\n\nThere are a lot of items which are installed into the proto area.\nHowever, not everything installed into the proto area is actually placed\ninside the live image. To determine the items that are a part of the\nlive image, each repository that makes up the platform has a `manifest`\nfile.\n\nThe manifest files for each repository are combined into one large\nmanifest file. This manifest file is used by the `builder` program found\nin smartos-live in the `tools/builder` directory.\n\nEach line of a manifest file contains a single file, directory, symlink,\nor hardlink directive. Comments are done with the `#` character. For example:\n\n```\n#\n# This is a file:\n# f path/to/file <perms> <user> <group>\n# This is a directory:\n# d path/to/dir <perms> <user> <group>\n# This is a symlink:\n# s <target>=<source>\n# This is a hardlink:\n# h <target>=<source>\n# For example:\n#\nd usr 0755 root sys\nd usr/bin 0755 root sys\nf usr/bin/grep 0555 root bin\nh usr/bin/egrep=usr/bin/grep\ns usr/bin/coolgrep=usr/bin/grep\n```\n\nSomething that we deliver should only ever be added to the manifest file\nfrom the repository that builds it. For example, because illumos-joyent\ndelivers `/usr/sbin/dtrace` it should be in the manifest file for\nillumos-joyent and not any other repository. Keeping them separate this\nway allows us to minimize build-time flag days that require updating\nmultiple repositories at once.\n\n### Device Drivers\n\nFor SmartOS, adding a device driver involves updating files that are\nassembled at run-time under vanilla illumos. You should check and update if\nnecessary the following files under `projects/illumos`:\n\n```\nusr/src/uts/intel/os/device_policy\nusr/src/uts/intel/os/driver_aliases\nusr/src/uts/intel/os/driver_classes\nusr/src/uts/intel/os/name_to_major\nusr/src/uts/intel/os/minor_perm\n```\n\n# Contributing\n\nAll the repositories contained within this build use GitHub pull requests for\nnew changes.\n\nAll changes should have an associated issue. You can use the [GitHub\nissue tracker](https://github.com/TritonDataCenter/smartos-live/issues). MNX\nemployees use an internal JIRA exposed at\n<https://smartos.org/bugview>. The commit message should be of this form:\n\n```\nTritonDataCenter/smartos-live#9999 make some changes (#23)\n\nTritonDataCenter/smartos-live#10000 make a related change\nReviewed by: Steve Reviewer <steve.reviewer@gmail.com>\nApproved by: Amy Approver <amy.approver@gmail.com>\n```\n\nThe first line should be the bug ID and title, optionally followed by the PR\nnumber as added by GitHub. After a blank line, the commit body should list any\nadditional bugs fixed in this change, along with the usual reviewer tags.\n\nIn addition to at least one code review, you will need to document your testing\nand gain \"integration approval\" (the Approved by tag).\n\nIf you would like to make a change to `illumos-joyent` specifically, please see\n[Upstreaming](#upstreaming) below.\n\n## Review\n\nIn general, before putting something up for review, some amount of\ntesting should have already been done. Once you post it for review, then\nyou need to seek out reviewers. A good first step for finding reviewers\nis to see who has worked on changes in similar areas. A good way to do\nthis is to use `git log` in portions of the source tree and note who the\nauthors, reviewers, and approvers have been. This can often be a good\nsource of trying to figure out who to ask.\n\nIf you're not sure of who to ask or are having trouble finding someone,\nthen consider asking in a public forum such as internal chat or IRC.\nEven if you're not sure if someone would make sense as a reviewer or\nnot, don't hesitate to reach out and folks will help you find or suggest\nreviewers. For more information on where to reach out, see\n[Community](#community).\n\n## Upstreaming\n\nIf you are making a change to `illumos-joyent`, please consider contributing\ndirectly to [illumos-gate](https://github.com/illumos/illumos-gate) instead.\nWe automatically merge this into `illumos-joyent` every working day, so your fix\nwill soon make it into SmartOS itself.\n\nThe default case should be contributing directly to upstream. However, in areas\nof significant divergence, such as `lx` brand or certain areas of the networking\nstack, this may not be the best choice.\n\n## Integration\n\nWhen thinking about integrating, the following are questions that you or\nyour approver should be asking:\n\n* Have I tested this in all the ways I can think of? Might this impact\nstandalone SmartOS or Triton in some way?\n* Have I documented any new commands or interfaces in manual pages?\n* Have I built this both debug and non-debug?\n* Have I reviewed the `git pbchk` output when working in bldenv in\nillumos-joyent?\n* Have I run any appropriate `make check` targets?\n* Have I looked for memory leaks?\n* Have I performed appropriate stress testing to try and find issues\nthat might only arise after prolonged use?\n* Is this a particularly risky change? If so, should I wait\nuntil the start of the next release cycle to integrate?\n* Are there any heads-up notices I need to send as part of this? For\nexample, this might happen because of a flag day.\n* Have I added a new tool that's required to run at build-time and\ntested this on older platform images?\n\nPrior to a PR being merged, it must have at least one code reviewer and one\napprover. They can be the same person, but two sets of eyes are preferred.\n\n## Testing changes\n\nA large part of development in the platform should be focused around\ntesting. Some components such as vmadm and DTrace have extensive test\nsuites. Other components often don't have as extensive test suites. Some\ncomponents, such as device drivers, often have none.\n\nYou should always ask yourself what kinds of unit tests or regression\ntests can we add that would cover this behavior and add that to the\ngeneral test suite wherever possible. Otherwise, the useful thing to do\nis to try and understand and think through all the different ways that\nyour change interacts with the system. What components have been changed\nand what has been impacted.\n\nFor example, if changing a public header in the operating system, the\nimpact can often be beyond just the software in the platform. That might\nimpact all the third-party software that is built via pkgsrc and so it\nmay be appropriate to compare pkgsrc bulk builds before and after the\nchange.\n\nIf changing a device driver, you may need to track down multiple\ngenerations of said hardware to test against to verify that there aren't\nregressions.\n\nAlong with the various build artifacts created by the SmartOS build that\ndeliver the operating system media, we produce a tarball containing the\ntest suites that were included in the 'illumos-joyent' repository.\n\nA wrapper script is included in the archive which can configure a test system\nto run these tests, will extract the tests to the correct location on the\nsystem, and will optionally execute some of the included test suites.\n\nIt has the following usage:\n\n```\n[root@kura ~]# /opt/smartos-test/bin/smartos-test -h\nUsage: smartos-test [-h] [-c] [-e] [-r] [-w] <path to tests.tgz>\n\nAt least one of -c, -e, -r is required.\n\n  -h       print usage\n  -c       configure the system for testing\n  -e       execute known tests\n  -f       skip the check to ensure platform version == test version\n  -r       snapshot or rollback to zones/opt@system-test-smartos-test\n           before doing any system configuration or test execution\n  -w       when mounting the lofs /usr, make it writable\n\n```\n\nDevelopers should extract the script from the test archive, then run it with an\nargument that points to the test archive, and use one or more of the options\n`-r`, `-c`, `-e`.\n\nWhen called with all of the options listed above, `smartos-test` will do the\nfollowing:\n\n* verify we're running on the global zone\n* verify that the user has indicated that no production data exists on this\n  system\n* verify that the test archive version matches the version of the running\n  SmartOS instance\n* take a named-snapshot of /opt if one doesn't already exist, or rollback to\n  that snapshot prior to extracting the tests to /opt\n* create an lofs-mount of /usr in order to extract portions of the test archive\n  that need to reside there\n* temporarily add any local user accounts needed to execute tests\n* download a pkgsrc bootstrap to /opt and install the pkgsrc dependencies\n  needed to run the tests\n* execute the tests serially, accumulating result codes\n* exit 0 if all tests passed, or 1 if one or more tests failed\n\nFor example:\n\n```\n[root@kura /var/tmp]# tar zvxf tests-test_archive-master-20191001T134222Z.tgz ./opt/smartos-test\nDecompressing 'tests-test_archive-master-20191001T134222Z.tgz' with '/usr/bin/gzcat'...\nx ./opt/smartos-test, 0 bytes, 0 tape blocks\nx ./opt/smartos-test/README, 958 bytes, 2 tape blocks\nx ./opt/smartos-test/bin, 0 bytes, 0 tape blocks\nx ./opt/smartos-test/bin/smartos-test, 10062 bytes, 20 tape blocks\n\n[root@kura /var/tmp]# ./opt/smartos-test/bin/smartos-test -rce ./tests-test_archive-master-20191001T134222Z.tgz\nPlatform version: 20191001T134222Z\n   Tests version: 20191001T134222Z\nTo setup and run these tests you must create the file:\n    /lib/sdc/.sdc-test-no-production-data\nafter ensuring you have no production data on this system.\n[root@kura /var/tmp]# touch /lib/sdc/.sdc-test-no-production-data\n\n[root@kura /var/tmp]# ./opt/smartos-test/bin/smartos-test -rce ./tests-test_archive-master-20191001T134222Z.tgz\nPlatform version: 20191001T134222Z\n   Tests version: 20191001T134222Z\nRunning zfs snapshot zones/opt@system-test-smartos-test\nCreating new lofs mount for /usr on /var/tmp/smartos-test-loopback\n820704 blocks\nRunning tar -xzf ./tests-test_archive-master-20191001T134222Z.tgz -C /var/tmp/smartos-test-loopback ./usr\nRunning mount -O -F lofs -o ro /var/tmp/smartos-test-loopback/usr /usr\nRunning tar -xzf ./tests-test_archive-master-20191001T134222Z.tgz -C / ./opt ./kernel ./tests.manifest.gen ./tests.buildstamp\nadding cyrus user\nadding ztest user\nRunning curl -kO https://pkgsrc.smartos.org/packages/SmartOS/bootstrap/bootstrap-2021Q4-tools.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 22.9M  100 22.9M    0     0   566k      0  0:00:41  0:00:41 --:--:--  577k\nRunning tar -zxpf bootstrap-2021Q4-tools.tar.gz -C /\nRunning ln -s /opt/tools /opt/local\nRunning pkgin -y in python27 sudo coreutils gcc7 gmake\nreading local summary...\nprocessing local summary...\nprocessing remote summary (https://pkgsrc.smartos.org/packages/SmartOS/2021Q4/tools/All)...\npkg_summary.xz                                                                                        100%  120KB 119.9KB/s   00:00\ncalculating dependencies...done.\n\n1 package to refresh:\n  bzip2-1.0.8\n\n13 packages to install:\n  libiconv-1.14nb3 tcp_wrappers-7.6.4 libffi-3.2.1nb4 gettext-lib-0.19.8.1 db4-4.8.30 openldap-client-2.4.47 cyrus-sasl-2.1.27\n  binutils-2.26.1nb1 python27-2.7.15nb1 sudo-1.8.26 coreutils-8.29nb1 gcc7-7.3.0nb4 gmake-4.2.1nb1\n\n1 to refresh, 0 to upgrade, 13 to install\n137M to download, 415M to install\n\nlibiconv-1.14nb3.tgz                                                                                  100% 2068KB 689.3KB/s   00:03\nlibffi-3.2.1nb4.tgz                                                                                   100%   59KB  59.4KB/s   00:00\ngettext-lib-0.19.8.1.tgz                                                                              100%   67KB  67.3KB/s   00:00\n\n.\n. (output omitted for brevity)\n.\n\ngcc7-7.3.0nb4: registering info file /opt/tools/gcc7/info/libquadmath.info\ninstalling gmake-4.2.1nb1...\ngmake-4.2.1nb1: registering info file /opt/tools/info/make.info\npkg_install warnings: 0, errors: 0\nreading local summary...\nprocessing local summary...\nmarking python27-2.7.15nb1 as non auto-removable\nmarking sudo-1.8.26 as non auto-removable\nmarking coreutils-8.29nb1 as non auto-removable\nmarking gcc7-7.3.0nb4 as non auto-removable\nmarking gmake-4.2.1nb1 as non auto-removable\nStarting test runs\n\nStarting test for bhyvetest with /opt/bhyvetest/bin/bhyvetest -ak\nStarting tests...\noutput directory: /var/tmp/bhyvetest.23953\nExecuting test /opt/bhyvetest/tst/mevent/lists.delete.exe ... passed\nExecuting test /opt/bhyvetest/tst/mevent/read.disable.exe ... passed\nExecuting test /opt/bhyvetest/tst/mevent/read.pause.exe ... passed\nExecuting test /opt/bhyvetest/tst/mevent/read.requeue.exe ... passed\n\n-------------\nResults\n-------------\n\nTests passed: 4\nTests failed: 0\nTests ran:    4\n\nCongrats, some tiny parts of bhyve aren't completely broken, the tests pass.\n\nStarting test-runner for crypto-tests with /opt/crypto-tests/runfiles/default.run\nTest: /opt/crypto-tests/tests/aes/kcf/setup (run as root)         [00:00] [PASS]\nTest: /opt/crypto-tests/tests/aes/kcf/aes_cbc_32 (run as root)    [00:00] [PASS]\nTest: /opt/crypto-tests/tests/aes/kcf/aes_ccm_32 (run as root)    [00:00] [PASS]\n\n.\n. (output omitted for brevity)\n.\n\nTest: /opt/util-tests/tests/vnic-mtu (run as root)                [00:00] [PASS]\nTest: /opt/util-tests/tests/xargs_test (run as root)              [00:00] [PASS]\nTest: /opt/util-tests/tests/awk/runtests.sh (run as nobody)       [02:35] [PASS]\nTest: /opt/util-tests/tests/ctf/precheck (run as root)            [00:00] [PASS]\nTest: /opt/util-tests/tests/ctf/ctftest (run as root)             [00:06] [PASS]\nTest: /opt/util-tests/tests/demangle/afl-fast (run as root)       [00:01] [PASS]\nTest: /opt/util-tests/tests/demangle/gcc-libstdc++ (run as root)  [00:00] [PASS]\nTest: /opt/util-tests/tests/demangle/llvm-stdcxxabi (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_00_blank (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_01_boolean (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_02_numbers (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_03_empty_arrays (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_04_number_arrays (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_05_strings (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_06_nested (run as root) [00:00] [PASS]\nTest: /opt/util-tests/tests/libnvpair_json/json_07_nested_arrays (run as root) [00:00] [PASS]\n\nResults Summary\nPASS      30\n\nRunning Time:   00:02:47\nPercent passed: 100.0%\nLog directory:  /var/tmp/test_results/20191002T101510\n[root@kura /var/tmp]#\n```\n\nNote that each test suite emits its own results summary. If any test suites\nfailed, the names of those suites are emitted by `smartos-test` just before\nthe script exits.\n\nWhen developers are adding tests to illumos, they should ensure that new\ntests are added to `$SRC/usr/src/pkg/manifests/\\*.p5m` as these IPS\nmanifests are used to generate the test archive during the SmartOS build.\n\n## Public Interfaces\n\nOne important thing to always think about is whether or not the thing\nthat's changing is a public interface or not. If this is a standard\ncommand or a library function that's been documented or is part of a\nmapfile section, then it probably is.\n\nWhen changing a public interface, you need to always pause and work\nthrough several cases and make sure that we aren't breaking backwards\ncompatibility.  Some questions to ask include ones like:\n\n1. If I take an old binary and use it against the new library, what\nhappens?\n2. If I had written a shell script that used a command and the output\nchanged, what will happen?\n3. What expectations come from standards or other system about these\nissues?\n\nThese are intended to help guide understand the impact and risk related\nto the change.\n\n## Mapfiles\n\nWe have a hard rule: a public mapfile version should not be added directly\nto illumos-joyent. Instead, if you need to add a new version to a mapfile,\nit should be done directly via contributing to illumos-gate.\n\nIf for some reason that's not feasible, then it should be added to a private\nversion and moved to a public version if/when it is upstreamed to illumos.\n\nIf the library in question is specific to illumos-joyent, then it's\nalright to version it. However, this is not true for the vast majority\nof libraries.\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 15.33203125,
          "content": "#!/usr/bin/bash\n#\n#\n# This file and its contents are supplied under the terms of the\n# Common Development and Distribution License (\"CDDL\"), version 1.0.\n# You may only use this file in accordance with the terms of version\n# 1.0 of the CDDL.\n#\n# A full copy of the text of the CDDL should have accompanied this\n# source.  A copy of the CDDL is also available via the Internet at\n# http://www.illumos.org/license/CDDL.\n#\n\n#\n# Copyright 2021 Joyent, Inc.\n# Copyright 2024 MNX Cloud, Inc.\n#\nshopt -s xpg_echo\nunalias -a\n\nPATH=/usr/bin:/usr/sbin:/sbin:/opt/local/bin:/opt/local/sbin\nexport PATH\n\nconf_arg0=$(basename $0)\nconf_arg0_dir=$(dirname $0)\nconf_root=$PWD\nconf_ips=\nconf_priv=\"pfexec\"\n\n#\n# Build defaults which are unlikely to change, but may be overridden by\n# configure-build.\n#\nsource default.configure-build\nif [[ -f configure-build ]]; then\n\tsource configure-build || fatal \"failed to source configure-build\"\nfi\n\n#\n# We configure the projects framework using a 'configure-projects' file. This\n# is a plain text file which contains the project name, the branch we wish to\n# build it at, and either a URL to a git repository or 'origin' to denote the\n# github.com/joyent/<repo> location. See create_projects.\n#\nread -r -d '' configure_projects < default.configure-projects\n\nfunction warn\n{\n\tlocal msg=\"$*\"\n\t[[ -z \"$msg\" ]] && msg=\"failed\"\n\techo \"$conf_arg0: $msg\" >&2\n}\n\nfunction fatal\n{\n\tlocal msg=\"$*\"\n\t[[ -z \"$msg\" ]] && msg=\"failed\"\n\techo \"$conf_arg0: $msg\" >&2\n\texit 1\n}\n\nfunction check_loc\n{\n\t[[ \"$(readlink -f \"$PWD\")\" != \"$(readlink -f \"$conf_arg0_dir\")\" ]] && \\\n\t    fatal \"configure must be run from inside $conf_arg0_dir\"\n\t[[ \"$(uname -s)\" != \"SunOS\" ]] && fatal \"build only works on SunOS\"\n\tif [[ \"$(uname -v)\" =~ \"joyent_\" ]]; then\n\t\t[[ \"$(zonename)\" == \"global\" ]] && fatal \\\n\t\t    \"building in a GZ on SmartOS is not supported\"\n\telse\n\t\techo \"Not on SmartOS, assuming IPS and sudo\"\n\t\tconf_ips=1\n\t\tconf_priv=\"sudo\"\n\tfi\n}\n\n#\n# Checkout a project at the specific branch if the repository doesn't exist,\n# or isn't already at the required branch. Warn if the repository contains\n# uncommitted contents.\n#\nfunction checkout_project\n{\n\tlocal dir=\"$1\"\n\tlocal branch=\"$2\"\n\tlocal url=\"$3\"\n\n\techo \"Using $url at $branch in $dir\"\n\n\tif [[ ! -d \"$dir\" ]]; then\n\t\tgit clone \"$url\" \"${dir}\" || fatal \"unable to clone $dir\"\n\tfi\n\n\tlocal cur=$(git -C ${dir} branch | grep \"^*\" | \\\n\t    awk 'BEGIN{ FS=\" \" } { print $2 }')\n\n\t# If our repository is already at the desired branch, then do nothing,\n\t# intentionally preserving whatever's in the repository.\n\tif [[ \"$cur \" != \"$branch\" ]]; then\n\t\tgit -C ${dir} checkout ${branch}\n\t\tif [[ $? -ne 0 ]]; then\n\n\t\t\t# If this is a remote branch, say 'refs/changes/34/1234/1',\n\t\t\t# then we might need to fetch it before being able to check it out.\n\t\t\techo \"unable to checkout $branch, attempting to fetch it ...\"\n\n\t\t\t# Use a local branch name without '/' chars so a detached head\n\t\t\t# doesn't confuse our standard parsing of 'git describe' output\n\t\t\tlocal branch_desc=$(echo $branch | sed -e 's/\\//_/g')\n\n\t\t\t# We assume the remote is named 'origin'.\n\t\t\tgit -C ${dir} fetch origin ${branch}:${branch_desc}\n\n\t\t\t# If the above fails, see if the project appears to be a GitHub\n\t\t\t# PR-xxx branch name, and if so, add the relevant refspec for\n\t\t\t# pull requests.\n\t\t\tif [[ $? -ne 0 ]]; then\n\t\t\t\tPR_NUMBER=$(echo \"${branch}\" | sed -nEe 's/^PR-([0-9]+)$/\\1/p')\n\t\t\t\tif [[ -n \"${PR_NUMBER}\" ]]; then\n\t\t\t\t\techo \"Branch appears to be from a PR, adding GitHub refspec\"\n\t\t\t\t\techo \"    +refs/pull/${PR_NUMBER}/head:refs/remotes/origin/${branch}\"\n\t\t\t\t\tgit -C ${dir} config --add remote.origin.fetch \\\n\t\t\t\t\t    +refs/pull/${PR_NUMBER}/head:refs/remotes/origin/${branch}\n\t\t\t\t\tgit -C ${dir} fetch || \\\n\t\t\t\t\t    fatal \"unable to fetch using PR refspec\"\n\t\t\t\telse\n\t\t\t\t\tfatal \"unable to fetch ${branch} from origin\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tgit -C ${dir} checkout ${branch_desc} || \\\n\t\t\t\tfatal \"unable to checkout ${branch_desc}\"\n\t\tfi\n\tfi\n\n\tgit -C ${dir} --no-pager show -s\n\tgit -C ${dir} describe --all --long --dirty | egrep -e '-dirty$' &&\n\t    echo \"Warning: ${dir} contains uncommitted changes!\"\n\techo\n\n\treturn 0\n}\n\n#\n# Read a flat file called 'configure-projects' of the form:\n# <project name>:<project branch>:[project git repo URL or path]\n#\n# The special token 'origin' can be used in place of a full git\n# repo URL to denote the standard github.com URL for that project.\n# If no URL is given, we default to github.com.\n#\n# Once the configure-projects file has been read (or we've parsed the\n# defaults), invoke checkout_project for each one.\n#\nfunction create_projects\n{\n\tlocal dir=\"projects/local\"\n\tlocal git_stem=\"https://github.com/joyent\"\n\n\t[[ -d \"$dir\" ]] || mkdir -p \"$dir\" || fatal \"failed to create $dir\"\n\n\tif [[ -f \"configure-projects\" ]]; then\n\t\t# note we're not attempting to merge configure-projects with the default\n\t\tread -r -d '' configure_projects  < configure-projects\n\t\techo \"Info: using the following configure-projects file:\"\n\t\techo \"$configure_projects\"\n\telse\n\t\techo \"Info: no configure-projects file found, using defaults.\"\n\tfi\n\techo \"$configure_projects\" | grep -v '^#' | while read -r line; do\n\t\tlocal project_dir=$(echo $line | cut -d: -f 1 | sed -e 's/ //g')\n\t\tlocal project_name=$(basename $project_dir)\n\t\tlocal git_name=\"${project_name}.git\"\n\t\tlocal project_branch=$(echo $line | cut -d: -f 2 | sed -e 's/ //g')\n\t\tlocal project_url=$(echo $line | cut -d: -f 3- | sed -e 's/ //g')\n\n\t\t# special cases for some projects\n\t\tcase ${project_name} in\n\t\t'kvm'|'kvm-cmd')\n\t\t\tgit_name=\"illumos-${project_name}.git\"\n\t\t\t;;\n\t\t'illumos')\n\t\t\tgit_name=\"illumos-joyent.git\"\n\t\t\t;;\n\t\t'ur-agent')\n\t\t\tgit_name=\"sdc-ur-agent.git\"\n\t\t\t;;\n\t\tesac\n\n\t\t# process URL keywords\n\t\tcase $project_url in\n\t\t'origin'|'')\n\t\t\tproject_url=\"$git_stem/$git_name\"\n\t\t\t;;\n\t\tesac\n\t\tcheckout_project \"projects/$project_dir\" \"$project_branch\" \\\n\t\t    \"$project_url\"\n\tdone || fatal \"Error encountered when creating projects directory\"\n}\n\nfunction install_pkgin\n{\n\tlocal pkglist\n\n\tpkglist=\"build-essential flex libxslt openjdk11 nodejs\"\n\tpkglist=\"$pkglist p5-XML-Parser gettext python27 py39-expat python39\"\n\tpkglist=\"$pkglist coreutils gsed pkg_alternatives cdrtools\"\n\tpkglist=\"$pkglist py27-sqlite3 nasm pigz smartos-build-tools\"\n\n\t$conf_priv pkgin -f update || fatal \"failed to update pkgsrc repository\"\n\n\t#\n\t# Remove legacy packages replaced by the smartos-build-tools package.\n\t#\n\tfor pkg in astmsgtools dmake rpcgen sgstools; do\n\t\tif pkg_info -qe $pkg; then\n\t\t\t$conf_priv pkg_delete ${pkg}\n\t\tfi\n\tdone\n\n\tfor pkg in $pkglist; do\n\t\tif ! pkg_info -qe $pkg; then\n\t\t\t$conf_priv pkgin -y install $pkg || fatal \\\n\t\t    \"failed to install $pkg\"\n\t\tfi\n\tdone\n}\n\nfunction install_ips\n{\n\tfatal \"Building on ips based systems has yet to be implemented\"\n}\n\nfunction install_packages\n{\n\tif [[ -z \"$conf_ips\" ]]; then\n\t\tinstall_pkgin\n\telse\n\t\tinstall_ips\n\tfi\n\t[[ $? -eq 0 ]] || fatal \"failed to install packages\"\n}\n\nfunction fetch_adjuncts\n{\n\tlocal tgz\n\t[[ -z \"$ILLUMOS_ADJUNCT_TARBALL_URL\" ]] && fatal \\\n\t    \"ILLUMOS_ADJUNCT_TARBALL_URL missing from configure\"\n\tcurl -O $ILLUMOS_ADJUNCT_TARBALL_URL\n\t[[ $? -eq 0 ]] || fatal \"failed to fetch adjuncts tarball\"\n}\n\nfunction fetch_closed\n{\n\tlocal ildir=\"projects/illumos\"\n\tlocal cld=\"on-closed-bin.i386.tar.bz2\"\n\tlocal clnd=\"on-closed-bin-nd.i386.tar.bz2\"\n\t[[ -z \"$ON_CLOSED_BINS_URL\" ]] && fatal \\\n\t    \"missing ON_CLOSED_BINS_URL from configure\"\n\t[[ -z \"$ON_CLOSED_BINS_ND_URL\" ]] && fatal \\\n\t    \"missing ON_CLOSED_BINS_ND_URL from configure\"\n\tif [[ ! -f $ildir/$cld ]]; then\n\t\tcurl $ON_CLOSED_BINS_URL -o $ildir/$cld || fatal \\\n\t\t\"failed to fetch closed bins (debug)\"\n\tfi\n\tif [[ ! -f $ildir/$clnd ]]; then\n\t\tcurl $ON_CLOSED_BINS_ND_URL -o $ildir/$clnd || fatal \\\n\t\t\"failed to fetch closed bins (non-debug)\"\n\tfi\n\tcd $ildir >/dev/null 2>&1 || fatal \"failed to cd into $ildir\"\n\ttar xpjf $cld || fatal \\\n\t    \"failed to extract closed bins (debug)\"\n\ttar xpjf $clnd || fatal \\\n\t    \"failed to extract closed bins (non-debug)\"\n\tcd - >/dev/null 2>&1\n}\n\nfunction generate_env\n{\n\t#\n\t# Note: since a nightly clobber build removes the whole proto, and we're\n\t# installing non-Illumos things there, we always use the -i option, and\n\t# ILLUMOS_CLOBBER is handled separately in Makefile.\n\t#\n\tlocal nopts=\"-CiLmMNnt\"\n\tlocal lprefix\n\n\tcase $ILLUMOS_ENABLE_DEBUG in\n\texclusive)\n\t\tnopts=\"${nopts}DF\" ;;\n\tyes)\n\t\tnopts=\"${nopts}D\" ;;\n\tno|\"\")\n\t\t;;\n\t*)\n\t\techo \"unknown debug option $ILLUMOS_ENABLE_DEBUG\" >&2\n\t\texit 2 ;;\n\tesac\n\n\tGNUC_ROOT=\"$conf_root/proto.strap/usr/gcc/$PRIMARY_COMPILER_VER\"\n\tPRIMARY_CC=\"gcc$PRIMARY_COMPILER_VER,$GNUC_ROOT/bin/gcc,gnu\"\n\tPRIMARY_CCC=\"gcc$PRIMARY_COMPILER_VER,$GNUC_ROOT/bin/g++,gnu\"\n\n\tSHADOW_CCS=\n\tSHADOW_CCCS=\n\n\tIFS=,\n\tfor cc in $SHADOW_COMPILERS; do\n\t\tgcc_ver=$(echo $cc | sed 's/^gcc//')\n\t\troot=\"$conf_root/proto.strap/usr/gcc/$gcc_ver\"\n\t\tSHADOW_CCS+=\" gcc${gcc_ver},$root/bin/gcc,gnu\"\n\t\tSHADOW_CCCS+=\" gcc${gcc_ver},$root/bin/g++,gnu\"\n\tdone\n\tunset IFS\n\n\tif [[ \"$ENABLE_SMATCH\" = \"yes\" ]]; then\n\t\tSHADOW_CCS+=\" smatch,\\$BUILD_TOOLS/onbld/bin/\\$MACH/smatch,smatch\"\n\tfi\n\n\tlprefix=$(echo $conf_root | tr / _)\n\t[[ $? -eq 0 ]] || fatal \"failed to create lock prefix\"\n\ncat > \"projects/illumos/illumos.sh\" <<EOF\nNIGHTLY_OPTIONS=\"$nopts\";\t\t\texport NIGHTLY_OPTIONS\nGATE=\"${RELEASE_VER}\";\t\t\t\texport GATE\nCODEMGR_WS=\"$conf_root/projects/illumos\";\texport CODEMGR_WS\n# NOTE: build_illumos modifies this initial constant\nMAX_JOBS=128\nmaxjobs() {\n        ncpu=\\`kstat -p cpu_info:::state | grep -c on-line\\`\n\tzcpucap=\\`pfexec mdata-get sdc:cpu_cap\\`\n\tif [[ \\$zcpucap -eq 0 || \\$zcpucap == \"\" ]]; then\n\t\tzcpu=\\${MAX_JOBS}\n\telse\n\t\tzcpu=\\`expr \\$zcpucap / 100\\`\n\tfi\n\tif [[ \\$zcpu -lt \\$ncpu ]]; then\n\t\texpr \\$zcpu + 2\n        elif [[ \\$(( \\$ncpu + 2 )) -lt \\${MAX_JOBS} ]]; then\n                expr \\$ncpu + 2\n        else\n                printf \"%d\\n\" \\${MAX_JOBS}\n        fi\n}\nDMAKE_MAX_JOBS=\\`maxjobs\\`;\t\t\texport DMAKE_MAX_JOBS\n\nPARENT_WS=\"\";\t\t\t\t\texport PARENT_WS\nCLONE_WS=\"http://hg.illumos.org/illumos-gate\"\texport CLONE_WS\nSTAFFER=\"nobody\";\t\t\t\texport STAFFER\nBUILD_PROJECT=\"\";\t\t\t\texport BUILD_PROJECT\nLOCKNAME=\"\\`whoami\\`_${lprefix}_nightly.lock\";\texport LOCKNAME\nATLOG=\"\\$CODEMGR_WS/log\";\t\t\texport ATLOG\nLOGFILE=\"\\$ATLOG/nightly.log\";\t\t\texport LOGFILE\nMACH=\\`uname -p\\`;\t\t\t\texport MACH\nON_CLOSED_BINS=\"\\$CODEMGR_WS/closed\";\t\texport ON_CLOSED_BINS\nREF_PROTO_LIST=\"\\$PARENT_WS/usr/src/proto_list_\\${MACH}\";\n\t\t\t\t\t\texport REF_PROTO_LIST\nROOT=\"$conf_root/proto\";\t\t\texport ROOT\nADJUNCT_PROTO=\"$conf_root/proto.strap\";\t\texport ADJUNCT_PROTO\nNATIVE_ADJUNCT=\"/opt/local\";\t\t\texport NATIVE_ADJUNCT\nSRC=\"\\$CODEMGR_WS/usr/src\";\t\t\texport SRC\nVERSION=\"\\$GATE\";\t\t\t\texport VERSION\nPARENT_ROOT=\"$conf_root/proto\";\t\t\texport PARENT_ROOT\nPARENT_TOOLS_ROOT=\"\\$PARENT_WS/usr/src/tools/proto/root_\\$MACH-nd\"\n\t\t\t\t\t\texport PARENT_TOOLS_ROOT\nPKGARCHIVE=\"\\${CODEMGR_WS}/packages/\\${MACH}/nightly\";\n\t\t\t\t\t\texport PKGARCHIVE\nPKGPUBLISHER_REDIST=\"${PUBLISHER}\";\t\texport PKGPUBLISHER_REDIST\nMAKEFLAGS=ek;\t\t\t\t\texport MAKEFLAGS\nUT_NO_USAGE_TRACKING=\"1\";\t\t\texport UT_NO_USAGE_TRACKING\nMULTI_PROTO=\"no\";\t\t\t\texport MULTI_PROTO\nBUILD_TOOLS=\"\\$SRC/tools/proto/root_\\${MACH}-nd/opt\";\n\t\t\t\t\t\texport BUILD_TOOLS\nSPRO_ROOT=/opt/SUNWspro;\t\t\texport SPRO_ROOT\nSPRO_VROOT=\\$SPRO_ROOT;\t\t\t\texport SPRO_VROOT\nGNU_ROOT=\"$conf_root/proto.strap/usr/gnu\"\texport GNU_ROOT\n# Use GCC as the primary compiler\n__GNUC=\"\";\t\t\t\t\texport __GNUC\n# root of \\$PRIMARY_CC\nGNUC_ROOT=\"$GNUC_ROOT\";\t\t\t\texport GNUC_ROOT\nPRIMARY_CC=\"$PRIMARY_CC\";\t\t\texport PRIMARY_CC\nPRIMARY_CCC=\"$PRIMARY_CCC\";\t\t\texport PRIMARY_CCC\nSHADOW_CCS=\"$SHADOW_CCS\";\t\t\texport SHADOW_CCS\nSHADOW_CCCS=\"$SHADOW_CCCS\";\t\t\texport SHADOW_CCCS\nJAVA_ROOT=/opt/local/java/openjdk11;\t\texport JAVA_ROOT\nFLEX=/opt/local/bin/flex;\t\t\texport FLEX\nGNUXGETTEXT=/opt/local/bin/xgettext;\t\texport GNUXGETTEXT\nPYTHON3=/opt/local/bin/python3.9;\t\texport PYTHON3\nPYTHON3_VERSION=3.9;\t\t\t\texport PYTHON3_VERSION\nPYTHON3_PKGVERS=-39;\t\t\t\texport PYTHON3_PKGVERS\nPYTHON3_SUFFIX='';\t\t\t\texport PYTHON3_SUFFIX\nBLD_JAVA_11='';\t\t\t\t\texport BLD_JAVA_11\n\n# Disable the split 32/64 perl module builds since smartos doesn't exec perl\n# via isaexec\n# export BUILDPERL32='#'\nexport BUILDPERL64='#'\n\n#\n# Note that this isn't the strap perl: that only really exists for the benefit\n# of projects/illumos-extra/openssl\n#\nPERL=/opt/local/bin/perl;\t\t\texport PERL\nELFDUMP=/usr/bin/elfdump;\t\t\texport ELFDUMP\nLORDER=/usr/bin/lorder;\t\t\t\texport LORDER\nMCS=/usr/bin/mcs;\t\t\t\texport MCS\nNM=/usr/bin/nm;\t\t\t\t\texport NM\nSTRIP=/usr/bin/strip;\t\t\t\texport STRIP\nTSORT=/usr/bin/tsort;\t\t\t\texport TSORT\nAR=/usr/bin/ar;\t\t\t\t\texport AR\n#\n# We override $MAKE in ./tools/build_illumos so we can properly\n# bootstrap the tools build.\n#\nif [[ -z \"\\$MAKE\" ]]; then\nMAKE=\"\\$SRC/tools/proto/root_i386-nd/opt/onbld/bin/i386/dmake\";\texport MAKE\nfi\n# As of illumos#16873, we no longer need to define LEX, as it's in tools.\n# As of illumos#16319, we no longer need to define YACC, as it's in tools.\nBISON=/opt/local/bin/bison;\t\t\texport BISON\nGM4=/opt/local/bin/gm4;\t\t\t\texport GM4\nASTBINDIR=/opt/local/ast/bin;\t\t\texport ASTBINDIR\nLD_TOXIC_PATH=\"\\$ROOT/lib:\\$ROOT/usr/lib\";\texport LD_TOXIC_PATH\n# generate buildversion for illumos buildversion module\nBUILDVERSION_EXEC=\"${conf_root}/tools/build_etcrelease -g\";\n\t\t\t\t\t\texport BUILDVERSION_EXEC\n\nEOF\n\t[[ $? -eq 0 ]] || fatal \"failed to write illumos nightly env file\"\n}\n\n#\n# This construction lets us place a block of text verbatim into $usage.\n#\nread -r -d '' usage <<EOF\n./configure [options]:\n\t-c\n\t\tclobber Illumos before each build [default: no]\n\t-d\n\t\tbuild Illumos in DEBUG mode only [default: no]\n\t-h\n\t\tthis message\n\t-p gcc10\n\t\tprimary compiler version [default: gcc10]\n\t-P password\n\t\tplatform root password [default: randomly chosen]\n\t-r\n\t\tfull strap build (no cache) [default: no]\n\t-S\n\t\tdo *not* run smatch [default is to run smatch]\n\t-s gcc10\n\t\tshadow compilers, comma delimited (gcc10,gcc#) [default: none]\nEOF\n\nwhile getopts \"cdhp:P:rSs:\" arg; do\n\tcase $arg in\n\tc)\n\t\tILLUMOS_CLOBBER=yes ;;\n\n\t#\n\t# We have only one proto area: we'll skip building non-debug here, as\n\t# the results are over-written by nightly.  If the user really wants a\n\t# sanity check build, they can specify =yes via the env var, or by\n\t# directly editing illumos.sh.\n\t#\n\td)\n\t\tILLUMOS_ENABLE_DEBUG=exclusive ;;\n\th)\n\t\techo \"$usage\"\n\t\texit 0 ;;\n\tp)\n\t\tPRIMARY_COMPILER=$OPTARG\n\t\tFORCE_STRAP_REBUILD=yes ;;\n\tP)\n\t\tPLATFORM_PASSWORD=\"$OPTARG\" ;;\n\tr)\n\t\tFORCE_STRAP_REBUILD=yes ;;\n\tS)\n\t\tENABLE_SMATCH=no ;;\n\ts)\n\t\tSHADOW_COMPILERS=$OPTARG\n\t\tFORCE_STRAP_REBUILD=yes ;;\n\t?)\n\t\techo \"$usage\" >&2\n\t\texit 2 ;;\n\tesac\ndone\n\n[[ -n \"$ILLUMOS_ENABLE_DEBUG\" ]] || ILLUMOS_ENABLE_DEBUG=no\n[[ -n \"$ILLUMOS_CLOBBER\" ]] || ILLUMOS_CLOBBER=no\n[[ -n \"$PRIMARY_COMPILER\" ]] || PRIMARY_COMPILER=gcc10\n[[ -n \"$ENABLE_SMATCH\" ]] || ENABLE_SMATCH=yes\n\nPRIMARY_COMPILER_VER=$(echo $PRIMARY_COMPILER | sed 's/^gcc//')\n\ncat >build.env <<EOF\nFORCE_STRAP_REBUILD=$FORCE_STRAP_REBUILD\nILLUMOS_CLOBBER=$ILLUMOS_CLOBBER\nILLUMOS_ENABLE_DEBUG=$ILLUMOS_ENABLE_DEBUG\nPRIMARY_COMPILER=$PRIMARY_COMPILER\nPRIMARY_COMPILER_VER=$PRIMARY_COMPILER_VER\nSHADOW_COMPILERS=$SHADOW_COMPILERS\nENABLE_SMATCH=$ENABLE_SMATCH\nEOF\n\n[[ -n \"$PLATFORM_PASSWORD\" ]] && \\\n\techo \"PLATFORM_PASSWORD=$PLATFORM_PASSWORD\" >> build.env\n\necho \"Doing pre-flight checks... \\c \"\ncheck_loc\necho \"done.\"\necho \"Creating and updating projects directory ...\"\ncreate_projects\necho \"done.\"\necho \"Installing packages ... \\c \"\ninstall_packages\necho \"done.\"\necho \"Fetching adjuncts tgz... \\c \"\nfetch_adjuncts\necho \"done.\"\necho \"Fetching and extracting closed bins ... \\c \"\nfetch_closed\necho \"done.\"\necho \"Generating illumos environment file... \\c \"\ngenerate_env\necho \"done.\"\n\ncat <<EOF\nConfiguration complete. To build the live image run:\ngmake world && gmake live\nEOF\n\n# Congrats, we made it\nexit 0\n"
        },
        {
          "name": "default.configure-build",
          "type": "blob",
          "size": 0.3935546875,
          "content": "PUBLISHER=\"joyent\"\nRELEASE_VER=\"joyent_147\"\nON_CLOSED_BINS_URL=\"https://us-central.manta.mnx.io/Joyent_Dev/public/releng/illumos/on-closed-bins.i386.tar.bz2\"\nON_CLOSED_BINS_ND_URL=\"https://us-central.manta.mnx.io/Joyent_Dev/public/releng/illumos/on-closed-bins-nd.i386.tar.bz2\"\nILLUMOS_ADJUNCT_TARBALL_URL=\"https://us-central.manta.mnx.io/Joyent_Dev/public/releng/adjuncts/illumos-adjunct.20220720.tgz\"\n"
        },
        {
          "name": "default.configure-projects",
          "type": "blob",
          "size": 0.1982421875,
          "content": "illumos-extra: master: origin\nillumos: master: origin\nlocal/kbmd: master: origin\nlocal/kvm-cmd: master: origin\nlocal/kvm: master: origin\nlocal/mdata-client: master: origin\nlocal/ur-agent: master: origin\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgsrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}