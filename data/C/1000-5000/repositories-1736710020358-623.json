{
  "metadata": {
    "timestamp": 1736710020358,
    "page": 623,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mstorsjo/llvm-mingw",
      "stars": 2059,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1279296875,
          "content": ".git\nllvm-project\nmingw-w64\nlldb-mi\nmake-*\nlibffi\ncpython*\npython-native\n**/*.exe\n**/*.dll\n**/*.lib\n**/*.pdb\n**/*.a\n*.tar.xz\n*.zip\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.083984375,
          "content": "/llvm-project\n/mingw-w64\n/lldb-mi\n/make-*\n/libffi\n/cpython*\n/python-native\n/toolchain\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.71875,
          "content": "FROM ubuntu:22.04\n\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt-get install -qqy --no-install-recommends \\\n    git wget bzip2 file unzip libtool pkg-config cmake build-essential \\\n    automake nasm gettext autopoint vim-tiny python3 \\\n    ninja-build ca-certificates curl less zip && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN git config --global user.name \"LLVM MinGW\" && \\\n    git config --global user.email root@localhost\n\nWORKDIR /build\n\nENV TOOLCHAIN_PREFIX=/opt/llvm-mingw\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\nARG DEFAULT_CRT=ucrt\n\nARG CFGUARD_ARGS=--enable-cfguard\n\n# Build everything that uses the llvm monorepo. We need to build the mingw runtime before the compiler-rt/libunwind/libcxxabi/libcxx runtimes.\nCOPY build-llvm.sh build-lldb-mi.sh strip-llvm.sh install-wrappers.sh build-mingw-w64.sh build-mingw-w64-tools.sh build-compiler-rt.sh build-libcxx.sh build-mingw-w64-libraries.sh build-openmp.sh ./\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h wrappers/*.cfg ./wrappers/\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX && \\\n    ./build-lldb-mi.sh $TOOLCHAIN_PREFIX && \\\n    ./strip-llvm.sh $TOOLCHAIN_PREFIX && \\\n    ./install-wrappers.sh $TOOLCHAIN_PREFIX && \\\n    ./build-mingw-w64.sh $TOOLCHAIN_PREFIX --with-default-msvcrt=$DEFAULT_CRT $CFGUARD_ARGS && \\\n    ./build-mingw-w64-tools.sh $TOOLCHAIN_PREFIX && \\\n    ./build-compiler-rt.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS && \\\n    ./build-libcxx.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS && \\\n    ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS && \\\n    ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers && \\\n    ./build-openmp.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS && \\\n    rm -rf /build/*\n\nENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH\n"
        },
        {
          "name": "Dockerfile.cross",
          "type": "blob",
          "size": 2.1796875,
          "content": "# Cross compile an llvm-mingw toolchain for windows.\n#\n# This needs to be built with --build-arg BASE=<image>, where image is the name\n# of a docker image that contains a working llvm-mingw cross compiler\n# from a similar enough version.\n#\n# This builds LLVM and all other build tools that need to run on the target\n# platform, but just copies over the runtime libraries from the existing\n# toolchain in the base docker image.\n\nARG BASE=mstorsjo/llvm-mingw:dev\nFROM $BASE\n\nRUN apt-get update -qq && \\\n    apt-get install -qqy libltdl-dev swig autoconf-archive && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY build-python.sh .\n\nARG WITH_PYTHON\n\nRUN if [ -n \"$WITH_PYTHON\" ]; then \\\n        ./build-python.sh /opt/python; \\\n    fi\n\nENV PATH=/opt/python/bin:$PATH\n\nARG CROSS_ARCH=x86_64\nENV CROSS_TOOLCHAIN_PREFIX=/opt/llvm-mingw-$CROSS_ARCH\n\nENV HOST=$CROSS_ARCH-w64-mingw32\n\nRUN if [ -n \"$WITH_PYTHON\" ]; then \\\n        ./build-python.sh $CROSS_TOOLCHAIN_PREFIX/python --host=$HOST && \\\n        mkdir -p $CROSS_TOOLCHAIN_PREFIX/bin && \\\n        cp $CROSS_TOOLCHAIN_PREFIX/python/bin/*.dll $CROSS_TOOLCHAIN_PREFIX/bin; \\\n    fi\n\nARG FULL_LLVM\n\nCOPY build-llvm.sh .\nRUN if [ -n \"$WITH_PYTHON\" ]; then ARG=\"--with-python\"; fi && \\\n    ./build-llvm.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST $ARG\n\nCOPY build-lldb-mi.sh .\nRUN ./build-lldb-mi.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nCOPY strip-llvm.sh .\nRUN ./strip-llvm.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\nCOPY build-mingw-w64.sh build-mingw-w64-tools.sh ./\nRUN ./build-mingw-w64-tools.sh $CROSS_TOOLCHAIN_PREFIX --skip-include-triplet-prefix --host=$HOST\n\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h wrappers/*.cfg ./wrappers/\nCOPY install-wrappers.sh .\nRUN ./install-wrappers.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nCOPY prepare-cross-toolchain.sh .\nRUN ./prepare-cross-toolchain.sh $TOOLCHAIN_PREFIX $CROSS_TOOLCHAIN_PREFIX $CROSS_ARCH\n\nCOPY build-make.sh .\nRUN ./build-make.sh $CROSS_TOOLCHAIN_PREFIX --host=$HOST\n\nARG TAG\nRUN ln -s $CROSS_TOOLCHAIN_PREFIX llvm-mingw-$TAG$CROSS_ARCH && \\\n    zip -9r /llvm-mingw-$TAG$CROSS_ARCH.zip llvm-mingw-$TAG$CROSS_ARCH && \\\n    ls -lh /llvm-mingw-$TAG$CROSS_ARCH.zip\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 5.26953125,
          "content": "FROM ubuntu:22.04\n\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt-get install -qqy --no-install-recommends \\\n    git wget bzip2 file unzip libtool pkg-config cmake build-essential \\\n    automake nasm gettext autopoint vim-tiny python3 \\\n    ninja-build ca-certificates curl less zip && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN git config --global user.name \"LLVM MinGW\" && \\\n    git config --global user.email root@localhost\n\nWORKDIR /build\n\nENV TOOLCHAIN_PREFIX=/opt/llvm-mingw\n\nARG FULL_LLVM\n\n# Build LLVM\nCOPY build-llvm.sh ./\nRUN ./build-llvm.sh $TOOLCHAIN_PREFIX\n\n# Build LLDB-MI\nCOPY build-lldb-mi.sh ./\nRUN ./build-lldb-mi.sh $TOOLCHAIN_PREFIX\n\n# Strip the LLVM install output immediately. (This doesn't reduce the\n# total docker image size as long as it is in a separate RUN layer though,\n# but reduces build times if tweaking the contents of strip-llvm.sh.)\n# Most of the size of the docker image comes from the build directory that\n# we keep in any case.\nCOPY strip-llvm.sh ./\nRUN ./strip-llvm.sh $TOOLCHAIN_PREFIX\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\n# Install the usual $TUPLE-clang binaries\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h wrappers/*.cfg ./wrappers/\nCOPY install-wrappers.sh ./\nRUN ./install-wrappers.sh $TOOLCHAIN_PREFIX\n\nARG DEFAULT_CRT=ucrt\n\nARG CFGUARD_ARGS=--enable-cfguard\n\n# Build MinGW-w64\nCOPY build-mingw-w64.sh ./\nRUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX --with-default-msvcrt=$DEFAULT_CRT $CFGUARD_ARGS\n\nCOPY build-mingw-w64-tools.sh ./\nRUN ./build-mingw-w64-tools.sh $TOOLCHAIN_PREFIX\n\n# Build compiler-rt\nCOPY build-compiler-rt.sh ./\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS\n\n# Build libunwind/libcxxabi/libcxx\nCOPY build-libcxx.sh ./\nRUN ./build-libcxx.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS\n\n# Build mingw-w64's extra libraries\nCOPY build-mingw-w64-libraries.sh ./\nRUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS\n\n# Build C test applications\nENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH\n\nCOPY test/*.c test/*.h test/*.idl ./test/\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        mkdir -p $arch && \\\n        for test in hello hello-tls crt-test setjmp; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe || exit 1; \\\n        done; \\\n        for test in autoimport-lib; do \\\n            $arch-w64-mingw32-clang $test.c -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1; \\\n        done; \\\n        for test in autoimport-main; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1; \\\n        done; \\\n        for test in idltest; do \\\n            # The IDL output isn't arch specific, but test each arch frontend \\\n            $arch-w64-mingw32-widl $test.idl -h -o $arch/$test.h && \\\n            $arch-w64-mingw32-clang $test.c -I$arch -o $arch/$test.exe -lole32 || exit 1; \\\n        done; \\\n        for test in stacksmash; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fstack-protector-strong || exit 1; \\\n        done; \\\n        for test in bufferoverflow; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -D_FORTIFY_SOURCE=2 -O2 || exit 1; \\\n        done; \\\n    done\n\n# Build C++ test applications\nCOPY test/*.cpp ./test/\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        mkdir -p $arch && \\\n        for test in hello-cpp hello-exception tlstest-main exception-locale exception-reduced global-terminate longjmp-cleanup; do \\\n            $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe || exit 1; \\\n        done; \\\n        for test in hello-exception; do \\\n            $arch-w64-mingw32-clang++ $test.cpp -static -o $arch/$test-static.exe || exit 1; \\\n        done; \\\n        for test in tlstest-lib throwcatch-lib; do \\\n            $arch-w64-mingw32-clang++ $test.cpp -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1; \\\n        done; \\\n        for test in throwcatch-main; do \\\n            $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1; \\\n        done; \\\n    done\n\n# Build sanitizers. Ubsan includes <typeinfo> from the C++ headers, so\n# we need to build this after libcxx.\n# $CFGUARD_ARGS is intentionally omitted here.\nRUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers\n\n# Sanitizers on windows only support x86.\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        case $arch in \\\n        i686|x86_64) \\\n            ;; \\\n        *) \\\n            continue \\\n            ;; \\\n        esac && \\\n        for test in stacksmash; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test-asan.exe -fsanitize=address -g -gcodeview -Wl,--pdb= || exit 1; \\\n        done; \\\n        for test in ubsan; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fsanitize=undefined -fno-sanitize-recover=all || exit 1; \\\n        done; \\\n    done\n\n# Build OpenMP\nCOPY build-openmp.sh ./\nRUN ./build-openmp.sh $TOOLCHAIN_PREFIX $CFGUARD_ARGS\n\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        for test in hello-omp; do \\\n            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fopenmp=libomp || exit 1; \\\n        done; \\\n    done\n\nRUN cd test && \\\n    for arch in $TOOLCHAIN_ARCHS; do \\\n        cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/bin/*.dll $arch || exit 1; \\\n    done\n"
        },
        {
          "name": "Dockerfile.system-clang",
          "type": "blob",
          "size": 1.3935546875,
          "content": "FROM ubuntu:24.04\n\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt-get install -qqy --no-install-recommends \\\n    git wget bzip2 file unzip libtool pkg-config cmake build-essential \\\n    automake nasm gettext autopoint vim-tiny python3 \\\n    ninja-build ca-certificates curl less zip && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Separate step for system-clang; the RUN line above is similar to other dockerfiles.\nRUN apt-get update -qq && \\\n    apt-get install -qqy clang-18 lld-18 llvm-18 && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN git config --global user.name \"LLVM MinGW\" && \\\n    git config --global user.email root@localhost\n\nWORKDIR /build\n\nENV TOOLCHAIN_PREFIX=/opt/llvm-mingw\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\nARG DEFAULT_CRT=ucrt\n\nARG CFGUARD_ARGS=--enable-cfguard\n\nCOPY build-all.sh build-llvm.sh install-wrappers.sh build-mingw-w64.sh build-mingw-w64-tools.sh build-compiler-rt.sh build-libcxx.sh build-mingw-w64-libraries.sh build-openmp.sh ./\nCOPY wrappers/*.sh wrappers/*.c wrappers/*.h wrappers/*.cfg ./wrappers/\nRUN ./build-all.sh $TOOLCHAIN_PREFIX --host-clang=clang-18 && \\\n    rm -rf /build/*\n\nENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH\n\n# Test the installation\nCOPY test/*.c test/*.cpp test/*.h test/*.idl test/*.rc test/Makefile ./test/\nCOPY run-tests.sh ./\nRUN RUN_I686=false RUN_X86_64=false ./run-tests.sh $TOOLCHAIN_PREFIX\n"
        },
        {
          "name": "Dockerfile.toolchain",
          "type": "blob",
          "size": 1.1767578125,
          "content": "FROM ubuntu:22.04\n\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=\"noninteractive\" apt-get install -qqy --no-install-recommends \\\n    git wget bzip2 file unzip libtool pkg-config cmake build-essential \\\n    automake nasm gettext autopoint vim-tiny python3 \\\n    ninja-build ca-certificates curl less zip && \\\n    apt-get clean -y && \\\n    rm -rf /var/lib/apt/lists/*\n\n\nRUN git config --global user.name \"LLVM MinGW\" && \\\n    git config --global user.email root@localhost\n\nWORKDIR /build\n\nENV TOOLCHAIN_PREFIX=/opt/llvm-mingw\n\nARG TOOLCHAIN_ARCHS=\"i686 x86_64 armv7 aarch64\"\n\n# Copy prebuilt toolchains for the current architecture.\n# Test executing a binary, to make sure that it works (i.e. it is not built\n# requiring a newer version of glibc or libstdc++ than what is available in\n# this container).\nRUN --mount=type=bind,source=toolchain,target=/toolchain \\\n    mkdir -p $TOOLCHAIN_PREFIX && ARCH=$(uname -m) && \\\n    tar xf /toolchain/linux-ucrt-$ARCH-toolchain/llvm-mingw-*-$ARCH.tar.xz --strip-components 1 -C $TOOLCHAIN_PREFIX && \\\n    ANY_ARCH=$(echo $TOOLCHAIN_ARCHS | awk '{print $1}') && \\\n    $TOOLCHAIN_PREFIX/bin/$ANY_ARCH-w64-mingw32-clang --version\n\nENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.06640625,
          "content": "The llvm-mingw project (the scripts for building and assembling a\ntoolchain, wrappers for executing tools and testcases) is licensed under\nthe ISC license.\n\nThis license only covers the components provided by llvm-mingw directly.\nThe final built toolchain is covered by the licenses of the individual\nexternal projects, primarily LLVM's Apache 2 license with LLVM exceptions.\n\nThe ISC license:\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8056640625,
          "content": "LLVM MinGW\n==========\n\nThis is a recipe for reproducibly building a\n[LLVM](https://llvm.org)/[Clang](https://clang.llvm.org/)/[LLD](https://lld.llvm.org/)\nbased mingw-w64 toolchain.\n\nBenefits of a LLVM based MinGW toolchain are:\n- Support for targeting ARM/ARM64 (while GCC obviously does support\n  these architectures, it doesn't support Windows on ARM)\n- A single toolchain targeting all four architectures (i686, x86_64,\n  armv7 and arm64) instead of separate compiler binaries for each\n  architecture\n- Support for generating debug info in PDB format\n- Support for Address Sanitizer and Undefined Behaviour Sanitizer\n- Since LLVM 16: Support for [Control Flow Guard](https://github.com/mstorsjo/llvm-mingw/issues/301)\n  (`-mguard=cf` compile and link flags)\n\nClang on its own can also be used as compiler in the normal GNU binutils\nbased environments though, so the main difference lies in replacing\nbinutils with LLVM based tools.\n\nReleases\n--------\n\nThe [GitHub Releases](https://github.com/mstorsjo/llvm-mingw/releases)\npage contains prebuilt toolchains that can be downloaded and installed\nby just unpacking them.\n\nThey come primarily in two different forms; packages named\n`llvm-mingw-<version>-<crt>-ubuntu-<distro_version>-<arch>.tar.xz`\nare cross compilers, that can be run on Linux, compiling binaries\nfor any of the 4 target Windows architectures. Packages named\n`llvm-mingw-<version>-<crt>-<arch>.zip` are native toolchains that\nrun on Windows (with binaries in the specified architecture), but\nwhich all can compile binaries for any of the 4 architectures.\n\nThe cross compilers come in versions running on either x86_64 or\naarch64. (They're built on Ubuntu, but hopefully do run on other\ncontempory distributions as well.)\n\nThere are packages with two different choices of CRT (C runtime) - the\nprimary target is UCRT (the Universal C Runtime). The UCRT\nis available preinstalled since Windows 10, but can be\n[installed](https://www.microsoft.com/en-us/download/details.aspx?id=50410)\non top of Vista or newer. The other legacy alternative is `msvcrt`,\nwhich produces binaries for (and uses) msvcrt.dll, which is a\nbuilt-in component in all versions of Windows. This allows running\ndirectly out of the box on older versions of Windows too, without\nensuring that the UCRT is installed, but msvcrt.dll is generally\nless featureful. Address Sanitizer only works properly with UCRT.\n\nIn addition to the downloadable toolchain packges, there are also\nprebuilt docker linux images containing the llvm-mingw toolchain,\navailable from [Docker Hub](https://hub.docker.com/r/mstorsjo/llvm-mingw/).\n\nThere are also [nightly builds](https://github.com/mstorsjo/llvm-mingw/releases/tag/nightly)\nwith the very latest versions of LLVM and mingw-w64 from git.\n\nBuilding from source\n--------------------\n\nThe toolchain can be compiled for installation in the current Unix\nenvironment, fetching sources as needed:\n\n    ./build-all.sh <target-dir>\n\nIt can also be built, reproducibly, into a Docker image:\n\n    docker build .\n\nIndividual components of the toolchain can be (re)built by running\nthe standalone shellscripts listed within `build-all.sh`. However, if\nthe source already is checked out, no effort is made to check out a\ndifferent version (if the build scripts have been updated to prefer\na different version) - and likewise, if configure flags in the build-\\*.sh\nscripts have changed, you might need to wipe the build directory under\neach project for the new configure options to be taken into use.\n\n\nBuilding in MSYS2\n-----------------\n\nTo build in MSYS2, install the following set of packages with `pacman -S --needed`:\n\n    git wget mingw-w64-x86_64-gcc mingw-w64-x86_64-ninja mingw-w64-x86_64-cmake make mingw-w64-x86_64-python3 autoconf libtool\n\n\nStatus\n------\n\nThe toolchain currently does support both C and C++, including support\nfor exception handling.\n\n\nKnown issues\n------------\n\nLLD, the LLVM linker, is what causes most of the major differences to the\nnormal GCC/binutils based MinGW.\n\n- As this toolchain uses a different CRT and C++ standard library than\n  most mingw toolchains, it is incompatible with object files and\n  static libraries built with other toolchains. Mixing DLLs from other\n  toolchains is supported, but only as long as CRT resources aren't\n  shared across DLL boundaries (no sharing of file handles etc, and memory\n  should be freed by the same DLL that allocated it).\n- The windres replacement, llvm-rc, isn't very mature and doesn't support\n  everything that GNU windres does.\n- The toolchain defaults to using the Universal CRT and targeting Windows 7.\n  These defaults can be changed in `build-mingw-w64.sh` though. The Universal\n  CRT is only available out of the box since Windows 10, but can be\n  [installed](https://www.microsoft.com/en-us/download/details.aspx?id=50410)\n  on Vista or newer. For x86, there are also releases that run on\n  msvcrt.dll.\n- The toolchain uses Windows native TLS support, which doesn't work properly\n  until Windows Vista. This has no effect on code not using thread local\n  variables.\n- The runtime libraries libunwind, libcxxabi and libcxx also assume that the\n  target is Windows 7 or newer.\n- Address sanitizer is only supported on x86.\n- LLD doesn't support linker script (in the COFF part of LLD). Linker script can be used for\n  reprogramming how the linker lays out the output, but is in most cases\n  in MinGW setups only used for passing lists of object files to link.\n  Passing lists of files can also be done with response files, which LLD does support.\n  (This was fixed in qmake in [v5.12.0](https://code.qt.io/cgit/qt/qtbase.git/commit/?id=d92c25b1b4ac0423a824715a08b2db2def4b6e25), to use response\n  files instead of linker script.)\n- Libtool based projects fail to link with llvm-mingw if the project contains\n  C++. (This often manifests with undefined symbols like `___chkstk_ms`,\n  `__alloca` or `___divdi3`.)\n  For such targets, libtool tries to detect which libraries to link\n  by invoking the compiler with `$CC -v` and picking up the libraries that\n  are linked by default, and then invoking the linker driver with `-nostdlib`\n  and specifying the default libraries manually. In doing so, libtool fails\n  to detect when clang is using compiler_rt instead of libgcc, because\n  clang refers to it as an absolute path to a static library, instead of\n  specifying a library path with `-L` and linking the library with `-l`.\n  Clang is [reluctant to changing this behaviour](https://reviews.llvm.org/D51440).\n  A [bug](https://debbugs.gnu.org/cgi/bugreport.cgi?bug=27866) has been filed\n  with libtool, but no fix has been committed, and as libtool files are\n  shipped with the projects that use them (bundled within the configure\n  script), one has to update the configure script in each project to avoid\n  the issue. This can either be done by installing libtool, patching it\n  and running `autoreconf -fi` in the project, or by manually applying the\n  fix on the shipped `configure` script. A patched version of libtool is\n  [shipped in MSYS2](https://github.com/msys2/MINGW-packages/blob/95b093e888/mingw-w64-libtool/0011-Pick-up-clang_rt-static-archives-compiler-internal-l.patch)\n  at least.\n- Libtool, when running on Windows, prefers using linker script over\n  response files, to pass long lists of object files to the linker driver,\n  but LLD doesn't support linker script (as described above). This issue\n  produces errors like `lld-link: error: .libs\\libfoobar.la.lnkscript: unknown file type`.\n  To fix this, the bundled libtool scripts has to be fixed like explained\n  above, but this fix requires changes both to `configure` and a separate\n  file named `ltmain.{in,sh}`. A fix for this is also\n  [shipped in MSYS2](https://github.com/msys2/MINGW-packages/blob/95b093e888/mingw-w64-libtool/0012-Prefer-response-files-over-linker-scripts-for-mingw-.patch).\n\nAdditionally, one may run into other minor differences between GCC and clang.\n\nPDB support\n-----------\n\nLLVM does [support](http://blog.llvm.org/2017/08/llvm-on-windows-now-supports-pdb-debug.html)\ngenerating debug info in the PDB format. Since GNU binutils based mingw\nenvironments don't support this, there's no predecent for what command\nline parameters to use for this, and llvm-mingw produces debug info in\nDWARF format by default.\n\nTo produce debug info in PDB format, you currently need to do the following\nchanges:\n\n- Add `-gcodeview` to the compilation commands (e.g. in\n  `wrappers/clang-target-wrapper.sh`), together with using `-g` as usual to\n  enable debug info in general.\n- Add `-Wl,--pdb=` to linking commands. This creates a PDB file at the same\n  location as the output EXE/DLL, but with a PDB extension. (By passing\n  `-Wl,--pdb=module.pdb` one can explicitly specify the name of the output\n  PDB file.)\n\nEven though LLVM supports this, there are some caveats with using it when\nbuilding in MinGW mode; Microsoft debuggers might have assumptions about\nthe C++ ABI used, which doesn't hold up with the Itanium ABI used in MinGW.\n"
        },
        {
          "name": "build-all.sh",
          "type": "blob",
          "size": 4.1201171875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nHOST_CLANG=\nLLVM_ARGS=\"\"\nMINGW_ARGS=\"\"\nCFGUARD_ARGS=\"--enable-cfguard\"\nHOST_ARGS=\"\"\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --enable-asserts)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        ;;\n    --host-clang|--host-clang=*)\n        HOST_CLANG=${1#--host-clang}\n        HOST_CLANG=${HOST_CLANG#=}\n        HOST_CLANG=${HOST_CLANG:-clang}\n        ;;\n    --full-llvm)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        FULL_LLVM=1\n        ;;\n    --disable-dylib)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        ;;\n    --disable-lldb)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        NO_LLDB=1\n        ;;\n    --disable-lldb-mi)\n        NO_LLDB_MI=1\n        ;;\n    --disable-clang-tools-extra)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        ;;\n    --with-default-msvcrt=*)\n        MINGW_ARGS=\"$MINGW_ARGS $1\"\n        ;;\n    --with-default-win32-winnt=*)\n        MINGW_ARGS=\"$MINGW_ARGS $1\"\n        ;;\n    --enable-cfguard)\n        CFGUARD_ARGS=\"--enable-cfguard\"\n        ;;\n    --disable-cfguard)\n        CFGUARD_ARGS=\"--disable-cfguard\"\n        ;;\n    --no-runtimes)\n        NO_RUNTIMES=1\n        ;;\n    --host=*)\n        HOST_ARGS=\"$HOST_ARGS $1\"\n        ;;\n    --no-tools)\n        NO_TOOLS=1\n        ;;\n    --wipe-runtimes)\n        WIPE_RUNTIMES=1\n        ;;\n    --clean-runtimes)\n        CLEAN_RUNTIMES=1\n        ;;\n    *)\n        if [ -n \"$PREFIX\" ]; then\n            echo Unrecognized parameter $1\n            exit 1\n        fi\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo \"$0 [--host-clang[=clang]] [--enable-asserts] [--disable-dylib] [--full-llvm] [--with-python] [--disable-lldb] [--disable-lldb-mi] [--disable-clang-tools-extra] [--host=triple] [--with-default-win32-winnt=0x601] [--with-default-msvcrt=ucrt] [--enable-cfguard|--disable-cfguard] [--no-runtimes] [--no-tools] [--wipe-runtimes] [--clean-runtimes] dest\"\n    exit 1\nfi\n\nfor dep in git cmake ${HOST_CLANG}; do\n    if ! command -v $dep >/dev/null; then\n        echo \"$dep not installed. Please install it and retry\" 1>&2\n        exit 1\n    fi\ndone\n\nif [ -n \"${HOST_CLANG}\" ] && [ \"${CFGUARD_ARGS}\" = \"--enable-cfguard\"  ]; then\n    \"${HOST_CLANG}\" -c -x c -o - - -Werror -mguard=cf </dev/null >/dev/null 2>/dev/null || CFGUARD_ARGS=\"--disable-cfguard\"\nfi\n\nif [ -z \"$NO_TOOLS\" ]; then\n    if [ -z \"${HOST_CLANG}\" ]; then\n        ./build-llvm.sh $PREFIX $LLVM_ARGS $HOST_ARGS\n        if [ -z \"$NO_LLDB\" ] && [ -z \"$NO_LLDB_MI\" ]; then\n            ./build-lldb-mi.sh $PREFIX $HOST_ARGS\n        fi\n        if [ -z \"$FULL_LLVM\" ]; then\n            ./strip-llvm.sh $PREFIX $HOST_ARGS\n        fi\n    fi\n    ./install-wrappers.sh $PREFIX $HOST_ARGS ${HOST_CLANG:+--host-clang=$HOST_CLANG}\n    ./build-mingw-w64-tools.sh $PREFIX $HOST_ARGS\nfi\nif [ -n \"$NO_RUNTIMES\" ]; then\n    exit 0\nfi\nif [ -n \"$WIPE_RUNTIMES\" ]; then\n    # Remove the runtime code built previously.\n    #\n    # This roughly matches the setup as if --no-runtimes had been passed,\n    # except that compiler-rt headers are left installed in lib/clang/*/include.\n    rm -rf $PREFIX/*-w64-mingw32 $PREFIX/lib/clang/*/lib\nfi\nif [ -n \"$CLEAN_RUNTIMES\" ]; then\n    export CLEAN=1\nfi\n./build-mingw-w64.sh $PREFIX $MINGW_ARGS $CFGUARD_ARGS\n./build-compiler-rt.sh $PREFIX $CFGUARD_ARGS\n./build-libcxx.sh $PREFIX $CFGUARD_ARGS\n./build-mingw-w64-libraries.sh $PREFIX $CFGUARD_ARGS\n./build-compiler-rt.sh $PREFIX --build-sanitizers # CFGUARD_ARGS intentionally omitted\n./build-openmp.sh $PREFIX $CFGUARD_ARGS\n"
        },
        {
          "name": "build-compiler-rt.sh",
          "type": "blob",
          "size": 4.8564453125,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nSRC_DIR=../lib/builtins\nBUILD_SUFFIX=\nBUILD_BUILTINS=TRUE\nENABLE_CFGUARD=1\nCFGUARD_CFLAGS=\"-mguard=cf\"\n\nwhile [ $# -gt 0 ]; do\n    if [ \"$1\" = \"--build-sanitizers\" ]; then\n        SRC_DIR=..\n        BUILD_SUFFIX=-sanitizers\n        SANITIZERS=1\n        BUILD_BUILTINS=FALSE\n        # Override the default cfguard options here; this unfortunately\n        # also overrides the user option if --enable-cfguard is passed\n        # before --build-sanitizers (although that combination isn't\n        # really intended/supported anyway).\n        CFGUARD_CFLAGS=\n        ENABLE_CFGUARD=\n    elif [ \"$1\" = \"--enable-cfguard\" ]; then\n        CFGUARD_CFLAGS=\"-mguard=cf\"\n        ENABLE_CFGUARD=1\n    elif [ \"$1\" = \"--disable-cfguard\" ]; then\n        CFGUARD_CFLAGS=\n        ENABLE_CFGUARD=\n    else\n        PREFIX=\"$1\"\n    fi\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo \"$0 [--build-sanitizers] [--enable-cfguard|--disable-cfguard] dest\"\n    exit 1\nfi\nif [ -n \"$SANITIZERS\" ] && [ -n \"$ENABLE_CFGUARD\" ]; then\n    echo \"warning: Sanitizers may not work correctly with Control Flow Guard enabled.\" 1>&2\nfi\n\nmkdir -p \"$PREFIX\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nexport PATH=\"$PREFIX/bin:$PATH\"\n\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nANY_ARCH=$(echo $ARCHS | awk '{print $1}')\nCLANG_RESOURCE_DIR=\"$(\"$PREFIX/bin/$ANY_ARCH-w64-mingw32-clang\" --print-resource-dir)\"\n\nif [ ! -d llvm-project/compiler-rt ] || [ -n \"$SYNC\" ]; then\n    CHECKOUT_ONLY=1 ./build-llvm.sh\nfi\n\nif command -v ninja >/dev/null; then\n    CMAKE_GENERATOR=\"Ninja\"\nelse\n    : ${CORES:=$(nproc 2>/dev/null)}\n    : ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n    : ${CORES:=4}\n\n    case $(uname) in\n    MINGW*)\n        CMAKE_GENERATOR=\"MSYS Makefiles\"\n        ;;\n    esac\nfi\n\ncd llvm-project/compiler-rt\n\nINSTALL_PREFIX=\"$CLANG_RESOURCE_DIR\"\n\nif [ -h \"$CLANG_RESOURCE_DIR/include\" ]; then\n    # Symlink to system headers; use a staging directory in case parts\n    # of the resource dir are immutable\n    WORKDIR=\"$(mktemp -d)\"; trap \"rm -rf $WORKDIR\" 0\n    INSTALL_PREFIX=\"$WORKDIR/install\"\nfi\n\n\nfor arch in $ARCHS; do\n    [ -z \"$CLEAN\" ] || rm -rf build-$arch$BUILD_SUFFIX\n    mkdir -p build-$arch$BUILD_SUFFIX\n    cd build-$arch$BUILD_SUFFIX\n    [ -n \"$NO_RECONF\" ] || rm -rf CMake*\n    cmake \\\n        ${CMAKE_GENERATOR+-G} \"$CMAKE_GENERATOR\" \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=\"$CLANG_RESOURCE_DIR\" \\\n        -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang \\\n        -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ \\\n        -DCMAKE_SYSTEM_NAME=Windows \\\n        -DCMAKE_AR=\"$PREFIX/bin/llvm-ar\" \\\n        -DCMAKE_RANLIB=\"$PREFIX/bin/llvm-ranlib\" \\\n        -DCMAKE_C_COMPILER_WORKS=1 \\\n        -DCMAKE_CXX_COMPILER_WORKS=1 \\\n        -DCMAKE_C_COMPILER_TARGET=$arch-w64-windows-gnu \\\n        -DCOMPILER_RT_DEFAULT_TARGET_ONLY=TRUE \\\n        -DCOMPILER_RT_USE_BUILTINS_LIBRARY=TRUE \\\n        -DCOMPILER_RT_BUILD_BUILTINS=$BUILD_BUILTINS \\\n        -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=FALSE \\\n        -DLLVM_CONFIG_PATH=\"\" \\\n        -DCMAKE_FIND_ROOT_PATH=$PREFIX/$arch-w64-mingw32 \\\n        -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \\\n        -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \\\n        -DSANITIZER_CXX_ABI=libc++ \\\n        -DCMAKE_C_FLAGS_INIT=\"$CFGUARD_CFLAGS\" \\\n        -DCMAKE_CXX_FLAGS_INIT=\"$CFGUARD_CFLAGS\" \\\n        $SRC_DIR\n    cmake --build . ${CORES:+-j${CORES}}\n    cmake --install . --prefix \"$INSTALL_PREFIX\"\n    mkdir -p \"$PREFIX/$arch-w64-mingw32/bin\"\n    if [ -n \"$SANITIZERS\" ]; then\n        case $arch in\n        aarch64)\n            # asan doesn't work on aarch64 or armv7; make this clear by omitting\n            # the installed files altogether.\n            rm \"$INSTALL_PREFIX/lib/windows/libclang_rt.asan\"*aarch64*\n            ;;\n        armv7)\n            rm \"$INSTALL_PREFIX/lib/windows/libclang_rt.asan\"*arm*\n            ;;\n        *)\n            mv \"$INSTALL_PREFIX/lib/windows/\"*.dll \"$PREFIX/$arch-w64-mingw32/bin\"\n            ;;\n        esac\n    fi\n    cd ..\ndone\n\nif [ \"$INSTALL_PREFIX\" != \"$CLANG_RESOURCE_DIR\" ]; then\n    # symlink to system headers - skip copy\n    rm -rf \"$INSTALL_PREFIX/include\"\n\n    cp -r \"$INSTALL_PREFIX/.\" $CLANG_RESOURCE_DIR\nfi\n"
        },
        {
          "name": "build-cross-tools.sh",
          "type": "blob",
          "size": 2.966796875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --with-python)\n        PYTHON=1\n        ;;\n    --disable-lldb)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        NO_LLDB=1\n        ;;\n    --disable-lldb-mi)\n        NO_LLDB_MI=1\n        ;;\n    --disable-clang-tools-extra)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        ;;\n    --no-llvm-tool-reuse)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        ;;\n    --disable-mingw-w64-tools)\n        NO_MINGW_W64_TOOLS=1\n        ;;\n    --full-llvm)\n        LLVM_ARGS=\"$LLVM_ARGS $1\"\n        FULL_LLVM=1\n        ;;\n    --disable-make)\n        NO_MAKE=1\n        ;;\n    *)\n        if [ -z \"$NATIVE\" ]; then\n            NATIVE=\"$1\"\n        elif [ -z \"$PREFIX\" ]; then\n            PREFIX=\"$1\"\n        elif [ -z \"$CROSS_ARCH\" ]; then\n            CROSS_ARCH=\"$1\"\n        else\n            echo Unrecognized parameter $1\n            exit 1\n        fi\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$CROSS_ARCH\" ]; then\n    echo $0 native prefix arch [--with-python] [--disable-lldb] [--disable-lldb-mi] [--disable-clang-tool-extra] [--disable-mingw-w64-tools] [--disable-make]\n    exit 1\nfi\n\nfor dep in git curl cmake; do\n    if ! command -v $dep >/dev/null; then\n        echo \"$dep not installed. Please install it and retry\" 1>&2\n        exit 1\n    fi\ndone\n\nexport PATH=\"$NATIVE/bin:$PATH\"\nHOST=$CROSS_ARCH-w64-mingw32\n\nif [ -n \"$PYTHON\" ]; then\n    PYTHON_NATIVE_PREFIX=\"$(cd \"$(dirname \"$0\")\" && pwd)/python-native\"\n    [ -d \"$PYTHON_NATIVE_PREFIX\" ] || rm -rf \"$PYTHON_NATIVE_PREFIX\"\n    ./build-python.sh $PYTHON_NATIVE_PREFIX\n    export PATH=\"$PYTHON_NATIVE_PREFIX/bin:$PATH\"\n    ./build-python.sh $PREFIX/python --host=$HOST\n    mkdir -p $PREFIX/bin\n    cp $PREFIX/python/bin/*.dll $PREFIX/bin\n    LLVM_ARGS=\"$LLVM_ARGS --with-python\"\nfi\n\n./build-llvm.sh $PREFIX --host=$HOST $LLVM_ARGS\nif [ -z \"$NO_LLDB\" ] && [ -z \"$NO_LLDB_MI\" ]; then\n    ./build-lldb-mi.sh $PREFIX --host=$HOST\nfi\nif [ -z \"$FULL_LLVM\" ]; then\n    ./strip-llvm.sh $PREFIX --host=$HOST\nfi\nif [ -z \"$NO_MINGW_W64_TOOLS\" ]; then\n    ./build-mingw-w64-tools.sh $PREFIX --skip-include-triplet-prefix --host=$HOST\nfi\n./install-wrappers.sh $PREFIX --host=$HOST\n./prepare-cross-toolchain.sh $NATIVE $PREFIX $CROSS_ARCH\nif [ -z \"$NO_MAKE\" ]; then\n    ./build-make.sh $PREFIX --host=$HOST\nfi\n"
        },
        {
          "name": "build-libcxx.sh",
          "type": "blob",
          "size": 3.6884765625,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nBUILD_STATIC=ON\nBUILD_SHARED=ON\nCFGUARD_CFLAGS=\"-mguard=cf\"\n\nwhile [ $# -gt 0 ]; do\n    if [ \"$1\" = \"--disable-shared\" ]; then\n        BUILD_SHARED=OFF\n    elif [ \"$1\" = \"--enable-shared\" ]; then\n        BUILD_SHARED=ON\n    elif [ \"$1\" = \"--disable-static\" ]; then\n        BUILD_STATIC=OFF\n    elif [ \"$1\" = \"--enable-static\" ]; then\n        BUILD_STATIC=ON\n    elif [ \"$1\" = \"--enable-cfguard\" ]; then\n        CFGUARD_CFLAGS=\"-mguard=cf\"\n    elif [ \"$1\" = \"--disable-cfguard\" ]; then\n        CFGUARD_CFLAGS=\n    else\n        PREFIX=\"$1\"\n    fi\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo \"$0 [--disable-shared] [--disable-static] [--enable-cfguard|--disable-cfguard] dest\"\n    exit 1\nfi\n\nmkdir -p \"$PREFIX\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\n\nexport PATH=\"$PREFIX/bin:$PATH\"\n\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nif [ ! -d llvm-project/libunwind ] || [ -n \"$SYNC\" ]; then\n    CHECKOUT_ONLY=1 ./build-llvm.sh\nfi\n\ncd llvm-project\n\nLLVM_PATH=\"$(pwd)/llvm\"\n\ncd runtimes\n\nif command -v ninja >/dev/null; then\n    CMAKE_GENERATOR=\"Ninja\"\nelse\n    : ${CORES:=$(nproc 2>/dev/null)}\n    : ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n    : ${CORES:=4}\n\n    case $(uname) in\n    MINGW*)\n        CMAKE_GENERATOR=\"MSYS Makefiles\"\n        ;;\n    esac\nfi\n\nfor arch in $ARCHS; do\n    [ -z \"$CLEAN\" ] || rm -rf build-$arch\n    mkdir -p build-$arch\n    cd build-$arch\n    [ -n \"$NO_RECONF\" ] || rm -rf CMake*\n    cmake \\\n        ${CMAKE_GENERATOR+-G} \"$CMAKE_GENERATOR\" \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=\"$PREFIX/$arch-w64-mingw32\" \\\n        -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang \\\n        -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ \\\n        -DCMAKE_CXX_COMPILER_TARGET=$arch-w64-windows-gnu \\\n        -DCMAKE_SYSTEM_NAME=Windows \\\n        -DCMAKE_C_COMPILER_WORKS=TRUE \\\n        -DCMAKE_CXX_COMPILER_WORKS=TRUE \\\n        -DLLVM_PATH=\"$LLVM_PATH\" \\\n        -DCMAKE_AR=\"$PREFIX/bin/llvm-ar\" \\\n        -DCMAKE_RANLIB=\"$PREFIX/bin/llvm-ranlib\" \\\n        -DLLVM_ENABLE_RUNTIMES=\"libunwind;libcxxabi;libcxx\" \\\n        -DLIBUNWIND_USE_COMPILER_RT=TRUE \\\n        -DLIBUNWIND_ENABLE_SHARED=$BUILD_SHARED \\\n        -DLIBUNWIND_ENABLE_STATIC=$BUILD_STATIC \\\n        -DLIBCXX_USE_COMPILER_RT=ON \\\n        -DLIBCXX_ENABLE_SHARED=$BUILD_SHARED \\\n        -DLIBCXX_ENABLE_STATIC=$BUILD_STATIC \\\n        -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=TRUE \\\n        -DLIBCXX_CXX_ABI=libcxxabi \\\n        -DLIBCXX_LIBDIR_SUFFIX=\"\" \\\n        -DLIBCXX_INCLUDE_TESTS=FALSE \\\n        -DLIBCXX_INSTALL_MODULES=ON \\\n        -DLIBCXX_INSTALL_MODULES_DIR=\"$PREFIX/share/libc++/v1\" \\\n        -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=FALSE \\\n        -DLIBCXXABI_USE_COMPILER_RT=ON \\\n        -DLIBCXXABI_USE_LLVM_UNWINDER=ON \\\n        -DLIBCXXABI_ENABLE_SHARED=OFF \\\n        -DLIBCXXABI_LIBDIR_SUFFIX=\"\" \\\n        -DCMAKE_C_FLAGS_INIT=\"$CFGUARD_CFLAGS\" \\\n        -DCMAKE_CXX_FLAGS_INIT=\"$CFGUARD_CFLAGS\" \\\n        ..\n\n    cmake --build . ${CORES:+-j${CORES}}\n    cmake --install .\n    cd ..\ndone\n"
        },
        {
          "name": "build-lldb-mi.sh",
          "type": "blob",
          "size": 4.13671875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2020 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\n: ${LLDB_MI_VERSION:=a6c8c66d70b13209f3dabba5b6aefb2c58c3976c}\nBUILDDIR=build\nunset HOST\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --host=*)\n        HOST=\"${1#*=}\"\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo $0 [--host=<triple>] dest\n    exit 1\nfi\n\nmkdir -p \"$PREFIX\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\n\nif [ ! -d lldb-mi ]; then\n    git clone https://github.com/lldb-tools/lldb-mi.git\n    CHECKOUT=1\nfi\n\nif [ -n \"$SYNC\" ] || [ -n \"$CHECKOUT\" ]; then\n    cd lldb-mi\n    [ -z \"$SYNC\" ] || git fetch\n    git checkout $LLDB_MI_VERSION\n    cd ..\nfi\n\nif command -v ninja >/dev/null; then\n    CMAKE_GENERATOR=\"Ninja\"\nelse\n    : ${CORES:=$(nproc 2>/dev/null)}\n    : ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n    : ${CORES:=4}\n\n    case $(uname) in\n    MINGW*)\n        CMAKE_GENERATOR=\"MSYS Makefiles\"\n        ;;\n    esac\nfi\n\nexport LLVM_DIR=\"$PREFIX\"\n\n# Try to find/guess the builddir under the llvm buildtree next by.\n# If LLVM was built without LLVM_INSTALL_TOOLCHAIN_ONLY, and the LLVM\n# installation directory hasn't been stripped, we should point the build there.\n# But as this isn't necessarily the case, point to the LLVM build directory\n# instead (which hopefully hasn't been removed yet).\nLLVM_SRC=\"$(pwd)/llvm-project/llvm\"\nif [ -d \"$LLVM_SRC\" ]; then\n    SUFFIX=${HOST+-}$HOST\n    for base in build build-asserts; do\n        if [ -d \"$LLVM_SRC/$base$SUFFIX\" ]; then\n            export LLVM_DIR=\"$LLVM_SRC/$base$SUFFIX\"\n            break\n        fi\n    done\nfi\n\nif [ -n \"$HOST\" ]; then\n    BUILDDIR=$BUILDDIR-$HOST\n\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_C_COMPILER=$HOST-gcc\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_CXX_COMPILER=$HOST-g++\"\n    case $HOST in\n    *-mingw32)\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_NAME=Windows\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_RC_COMPILER=$HOST-windres\"\n        ;;\n    *-linux*)\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_NAME=Linux\"\n        ;;\n    *)\n        echo \"Unrecognized host $HOST\"\n        exit 1\n        ;;\n    esac\n\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH=$LLVM_DIR\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY\"\nfi\n\nif [ -n \"$MACOS_REDIST\" ]; then\n    : ${MACOS_REDIST_ARCHS:=arm64 x86_64}\n    : ${MACOS_REDIST_VERSION:=10.12}\n    ARCH_LIST=\"\"\n    NATIVE=\n    for arch in $MACOS_REDIST_ARCHS; do\n        if [ -n \"$ARCH_LIST\" ]; then\n            ARCH_LIST=\"$ARCH_LIST;\"\n        fi\n        ARCH_LIST=\"$ARCH_LIST$arch\"\n        if [ \"$(uname -m)\" = \"$arch\" ]; then\n            NATIVE=1\n        fi\n    done\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_OSX_ARCHITECTURES=$ARCH_LIST\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOS_REDIST_VERSION\"\n    if [ -z \"$NATIVE\" ]; then\n        # If we're not building for the native arch, flag to CMake that we're\n        # cross compiling.\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_NAME=Darwin\"\n    fi\nfi\n\ncd lldb-mi\n\n[ -z \"$CLEAN\" ] || rm -rf $BUILDDIR\nmkdir -p $BUILDDIR\ncd $BUILDDIR\n[ -n \"$NO_RECONF\" ] || rm -rf CMake*\ncmake \\\n    ${CMAKE_GENERATOR+-G} \"$CMAKE_GENERATOR\" \\\n    -DCMAKE_INSTALL_PREFIX=\"$PREFIX\" \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    $CMAKEFLAGS \\\n    ..\n\ncmake --build . ${CORES:+-j${CORES}}\ncmake --install . --strip\n"
        },
        {
          "name": "build-llvm.sh",
          "type": "blob",
          "size": 10.0380859375,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\n: ${LLVM_VERSION:=llvmorg-19.1.6}\nASSERTS=OFF\nunset HOST\nBUILDDIR=\"build\"\nLINK_DYLIB=ON\nASSERTSSUFFIX=\"\"\nLLDB=ON\nCLANG_TOOLS_EXTRA=ON\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --disable-asserts)\n        ASSERTS=OFF\n        ASSERTSSUFFIX=\"\"\n        ;;\n    --enable-asserts)\n        ASSERTS=ON\n        ASSERTSSUFFIX=\"-asserts\"\n        ;;\n    --stage2)\n        STAGE2=1\n        BUILDDIR=\"$BUILDDIR-stage2\"\n        ;;\n    --thinlto)\n        LTO=\"thin\"\n        BUILDDIR=\"$BUILDDIR-thinlto\"\n        ;;\n    --lto)\n        LTO=\"full\"\n        BUILDDIR=\"$BUILDDIR-lto\"\n        ;;\n    --disable-dylib)\n        LINK_DYLIB=OFF\n        ;;\n    --full-llvm)\n        FULL_LLVM=1\n        ;;\n    --host=*)\n        HOST=\"${1#*=}\"\n        ;;\n    --with-python)\n        WITH_PYTHON=1\n        ;;\n    --disable-lldb)\n        unset LLDB\n        ;;\n    --disable-clang-tools-extra)\n        unset CLANG_TOOLS_EXTRA\n        ;;\n    --no-llvm-tool-reuse)\n        NO_LLVM_TOOL_REUSE=1\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nBUILDDIR=\"$BUILDDIR$ASSERTSSUFFIX\"\nif [ -z \"$CHECKOUT_ONLY\" ]; then\n    if [ -z \"$PREFIX\" ]; then\n        echo $0 [--enable-asserts] [--stage2] [--thinlto] [--lto] [--disable-dylib] [--full-llvm] [--with-python] [--disable-lldb] [--disable-clang-tools-extra] [--host=triple] dest\n        exit 1\n    fi\n\n    mkdir -p \"$PREFIX\"\n    PREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nfi\n\nif [ ! -d llvm-project ]; then\n    mkdir llvm-project\n    cd llvm-project\n    git init\n    git remote add origin https://github.com/llvm/llvm-project.git\n    cd ..\n    CHECKOUT=1\nfi\n\nif [ -n \"$SYNC\" ] || [ -n \"$CHECKOUT\" ]; then\n    cd llvm-project\n    # Check if the intended commit or tag exists in the local repo. If it\n    # exists, just check it out instead of trying to fetch it.\n    # (Redoing a shallow fetch will refetch the data even if the commit\n    # already exists locally, unless fetching a tag with the \"tag\"\n    # argument.)\n    if git cat-file -e \"$LLVM_VERSION\" 2> /dev/null; then\n        # Exists; just check it out\n        git checkout \"$LLVM_VERSION\"\n    else\n        case \"$LLVM_VERSION\" in\n        llvmorg-*)\n            # If $LLVM_VERSION looks like a tag, fetch it with the\n            # \"tag\" keyword. This makes sure that the local repo\n            # gets the tag too, not only the commit itself. This allows\n            # later fetches to realize that the tag already exists locally.\n            git fetch --depth 1 origin tag \"$LLVM_VERSION\"\n            git checkout \"$LLVM_VERSION\"\n            ;;\n        *)\n            git fetch --depth 1 origin \"$LLVM_VERSION\"\n            git checkout FETCH_HEAD\n            ;;\n        esac\n    fi\n    cd ..\nfi\n\n[ -z \"$CHECKOUT_ONLY\" ] || exit 0\n\nif [ -n \"$HOST\" ]; then\n    case $HOST in\n    *-mingw32)\n        TARGET_WINDOWS=1\n        ;;\n    esac\nelse\n    case $(uname) in\n    MINGW*)\n        TARGET_WINDOWS=1\n        ;;\n    esac\nfi\n\nif command -v ninja >/dev/null; then\n    CMAKE_GENERATOR=\"Ninja\"\nelse\n    : ${CORES:=$(nproc 2>/dev/null)}\n    : ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n    : ${CORES:=4}\n\n    case $(uname) in\n    MINGW*)\n        CMAKE_GENERATOR=\"MSYS Makefiles\"\n        ;;\n    esac\nfi\n\nCMAKEFLAGS=\"$LLVM_CMAKEFLAGS\"\n\nif [ -n \"$HOST\" ]; then\n    ARCH=\"${HOST%%-*}\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_C_COMPILER=$HOST-gcc\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_CXX_COMPILER=$HOST-g++\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_PROCESSOR=$ARCH\"\n    case $HOST in\n    *-mingw32)\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_NAME=Windows\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_RC_COMPILER=$HOST-windres\"\n        ;;\n    *-linux*)\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_NAME=Linux\"\n        ;;\n    *)\n        echo \"Unrecognized host $HOST\"\n        exit 1\n        ;;\n    esac\n\n    native=\"\"\n    for dir in llvm-project/llvm/build/bin llvm-project/llvm/build-asserts/bin; do\n        if [ -x \"$dir/llvm-tblgen.exe\" ]; then\n            native=\"$(pwd)/$dir\"\n            break\n        elif [ -x \"$dir/llvm-tblgen\" ]; then\n            native=\"$(pwd)/$dir\"\n            break\n        fi\n    done\n    if [ -z \"$native\" ] && command -v llvm-tblgen >/dev/null; then\n        native=\"$(dirname $(command -v llvm-tblgen))\"\n    fi\n\n\n    if [ -n \"$native\" ] && [ -z \"$NO_LLVM_TOOL_REUSE\" ]; then\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLVM_NATIVE_TOOL_DIR=$native\"\n    fi\n    CROSS_ROOT=$(cd $(dirname $(command -v $HOST-gcc))/../$HOST && pwd)\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH=$CROSS_ROOT\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY\"\n\n    BUILDDIR=$BUILDDIR-$HOST\n\n    if [ -n \"$WITH_PYTHON\" ] && [ -n \"$TARGET_WINDOWS\" ]; then\n        # The python3-config script requires executing with bash. It outputs\n        # an extra trailing space, which the extra 'echo' layer gets rid of.\n        EXT_SUFFIX=\"$(echo $(bash $PREFIX/python/bin/python3-config --extension-suffix))\"\n        PYTHON_RELATIVE_PATH=\"$(cd \"$PREFIX\" && echo python/lib/python*/site-packages)\"\n        PYTHON_INCLUDE_DIR=\"$(echo $PREFIX/python/include/python*)\"\n        PYTHON_LIB=\"$(echo $PREFIX/python/lib/libpython3.*.dll.a)\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLDB_ENABLE_PYTHON=ON\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DPYTHON_HOME=$PREFIX/python\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLDB_PYTHON_HOME=../python\"\n        # Relative to the lldb install root\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLDB_PYTHON_RELATIVE_PATH=$PYTHON_RELATIVE_PATH\"\n        # Relative to LLDB_PYTHON_HOME\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLDB_PYTHON_EXE_RELATIVE_PATH=bin/python3.exe\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLDB_PYTHON_EXT_SUFFIX=$EXT_SUFFIX\"\n\n        CMAKEFLAGS=\"$CMAKEFLAGS -DPython3_INCLUDE_DIRS=$PYTHON_INCLUDE_DIR\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DPython3_LIBRARIES=$PYTHON_LIB\"\n    fi\nelif [ -n \"$STAGE2\" ]; then\n    # Build using an earlier built and installed clang in the target directory\n    export PATH=\"$PREFIX/bin:$PATH\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_C_COMPILER=clang\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_CXX_COMPILER=clang++\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DLLVM_USE_LINKER=lld\"\nelse\n    # Native compilation with the system default compiler.\n\n    # Use a faster linker, if available.\n    if command -v ld.lld >/dev/null; then\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLVM_USE_LINKER=lld\"\n    elif command -v ld.gold >/dev/null; then\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLVM_USE_LINKER=gold\"\n    fi\nfi\n\nif [ -n \"$COMPILER_LAUNCHER\" ]; then\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_C_COMPILER_LAUNCHER=$COMPILER_LAUNCHER\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_CXX_COMPILER_LAUNCHER=$COMPILER_LAUNCHER\"\nfi\n\nif [ -n \"$LTO\" ]; then\n    CMAKEFLAGS=\"$CMAKEFLAGS -DLLVM_ENABLE_LTO=$LTO\"\nfi\n\nif [ -n \"$MACOS_REDIST\" ]; then\n    : ${MACOS_REDIST_ARCHS:=arm64 x86_64}\n    : ${MACOS_REDIST_VERSION:=10.12}\n    ARCH_LIST=\"\"\n    NATIVE=\n    for arch in $MACOS_REDIST_ARCHS; do\n        if [ -n \"$ARCH_LIST\" ]; then\n            ARCH_LIST=\"$ARCH_LIST;\"\n        fi\n        ARCH_LIST=\"$ARCH_LIST$arch\"\n        if [ \"$(uname -m)\" = \"$arch\" ]; then\n            NATIVE=1\n        fi\n    done\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_OSX_ARCHITECTURES=$ARCH_LIST\"\n    CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOS_REDIST_VERSION\"\n    if [ -z \"$NATIVE\" ]; then\n        # If we're not building for the native arch, flag to CMake that we're\n        # cross compiling, to let it build native versions of tools used\n        # during the build.\n        ARCH=\"$(echo $MACOS_REDIST_ARCHS | awk '{print $1}')\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_NAME=Darwin\"\n        CMAKEFLAGS=\"$CMAKEFLAGS -DCMAKE_SYSTEM_PROCESSOR=$ARCH\"\n    fi\nfi\n\nif [ -z \"$HOST\" ] && [ \"$(uname)\" = \"Darwin\" ]; then\n    if [ -n \"$LLDB\" ]; then\n        # Building LLDB for macOS fails unless building libc++ is enabled at the\n        # same time, or unless the LLDB tests are disabled.\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLDB_INCLUDE_TESTS=OFF\"\n        # Don't build our own debugserver - use the system provided one.\n        # The newly built debugserver needs to be properly code signed to work.\n        # This silences a cmake warning.\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLLDB_USE_SYSTEM_DEBUGSERVER=ON\"\n    fi\nfi\n\nTOOLCHAIN_ONLY=ON\nif [ -n \"$FULL_LLVM\" ]; then\n    TOOLCHAIN_ONLY=OFF\nfi\n\ncd llvm-project/llvm\n\nPROJECTS=\"clang;lld\"\nif [ -n \"$LLDB\" ]; then\n    PROJECTS=\"$PROJECTS;lldb\"\nfi\nif [ -n \"$CLANG_TOOLS_EXTRA\" ]; then\n    PROJECTS=\"$PROJECTS;clang-tools-extra\"\nfi\n\n[ -z \"$CLEAN\" ] || rm -rf $BUILDDIR\nmkdir -p $BUILDDIR\ncd $BUILDDIR\n[ -n \"$NO_RECONF\" ] || rm -rf CMake*\ncmake \\\n    ${CMAKE_GENERATOR+-G} \"$CMAKE_GENERATOR\" \\\n    -DCMAKE_INSTALL_PREFIX=\"$PREFIX\" \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DLLVM_ENABLE_ASSERTIONS=$ASSERTS \\\n    -DLLVM_ENABLE_PROJECTS=\"$PROJECTS\" \\\n    -DLLVM_TARGETS_TO_BUILD=\"ARM;AArch64;X86;NVPTX\" \\\n    -DLLVM_INSTALL_TOOLCHAIN_ONLY=$TOOLCHAIN_ONLY \\\n    -DLLVM_LINK_LLVM_DYLIB=$LINK_DYLIB \\\n    -DLLVM_TOOLCHAIN_TOOLS=\"llvm-ar;llvm-ranlib;llvm-objdump;llvm-rc;llvm-cvtres;llvm-nm;llvm-strings;llvm-readobj;llvm-dlltool;llvm-pdbutil;llvm-objcopy;llvm-strip;llvm-cov;llvm-profdata;llvm-addr2line;llvm-symbolizer;llvm-windres;llvm-ml;llvm-readelf;llvm-size;llvm-cxxfilt\" \\\n    ${HOST+-DLLVM_HOST_TRIPLE=$HOST} \\\n    $CMAKEFLAGS \\\n    ..\n\ncmake --build . ${CORES:+-j${CORES}}\ncmake --install . --strip\n\ncp ../LICENSE.TXT $PREFIX\n"
        },
        {
          "name": "build-make.sh",
          "type": "blob",
          "size": 1.7548828125,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nunset HOST\n\n: ${MAKE_VERSION:=4.4.1}\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --host=*)\n        HOST=\"${1#*=}\"\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo $0 [--host=triple] dest\n    exit 1\nfi\n\nmkdir -p \"$PREFIX\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\n\n: ${CORES:=$(nproc 2>/dev/null)}\n: ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n: ${CORES:=4}\n\ndownload() {\n    if command -v wget >/dev/null; then\n        wget \"$1\"\n    else\n        curl -LO \"$1\"\n    fi\n}\n\nif [ ! -d make-$MAKE_VERSION ]; then\n    download https://ftp.gnu.org/gnu/make/make-$MAKE_VERSION.tar.gz\n    tar -zxf make-$MAKE_VERSION.tar.gz\nfi\n\ncd make-$MAKE_VERSION\n\nif [ -n \"$HOST\" ]; then\n    CONFIGFLAGS=\"$CONFIGFLAGS --host=$HOST\"\n    CROSS_NAME=-$HOST\nfi\n\n[ -z \"$CLEAN\" ] || rm -rf build$CROSS_NAME\nmkdir -p build$CROSS_NAME\ncd build$CROSS_NAME\n../configure --prefix=\"$PREFIX\" $CONFIGFLAGS --program-prefix=mingw32- --enable-job-server LDFLAGS=\"-Wl,-s\"\nmake -j$CORES\nmake install-binPROGRAMS\n"
        },
        {
          "name": "build-mingw-w64-libraries.sh",
          "type": "blob",
          "size": 2.060546875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nUSE_CFLAGS=\"-g -O2 -mguard=cf\"\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --enable-cfguard)\n        USE_CFLAGS=\"-g -O2 -mguard=cf\"\n        ;;\n    --disable-cfguard)\n        USE_CFLAGS=\"-g -O2\"\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo \"$0 [--enable-cfguard|--disable-cfguard] dest\"\n    exit 1\nfi\nmkdir -p \"$PREFIX\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nexport PATH=\"$PREFIX/bin:$PATH\"\nunset CC\n\n: ${CORES:=$(nproc 2>/dev/null)}\n: ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n: ${CORES:=4}\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nif [ ! -d mingw-w64 ] || [ -n \"$SYNC\" ]; then\n    CHECKOUT_ONLY=1 ./build-mingw-w64.sh\nfi\n\ncd mingw-w64/mingw-w64-libraries\nfor lib in winpthreads winstorecompat; do\n    cd $lib\n    for arch in $ARCHS; do\n        [ -z \"$CLEAN\" ] || rm -rf build-$arch\n        mkdir -p build-$arch\n        cd build-$arch\n        arch_prefix=\"$PREFIX/$arch-w64-mingw32\"\n        ../configure --host=$arch-w64-mingw32 --prefix=\"$arch_prefix\" --libdir=\"$arch_prefix/lib\" \\\n            CFLAGS=\"$USE_CFLAGS\" \\\n            CXXFLAGS=\"$USE_CFLAGS\"\n        make -j$CORES\n        make install\n        cd ..\n        mkdir -p \"$arch_prefix/share/mingw32\"\n        install -m644 COPYING \"$arch_prefix/share/mingw32/COPYING.${lib}.txt\"\n    done\n    cd ..\ndone\n"
        },
        {
          "name": "build-mingw-w64-tools.sh",
          "type": "blob",
          "size": 4.3935546875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nunset HOST\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --skip-include-triplet-prefix)\n        SKIP_INCLUDE_TRIPLET_PREFIX=1\n        ;;\n    --host=*)\n        HOST=\"${1#*=}\"\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$CHECKOUT_ONLY\" ]; then\n    if [ -z \"$PREFIX\" ]; then\n        echo $0 [--skip-include-triplet-prefix] [--host=triple] dest\n        exit 1\n    fi\n\n    mkdir -p \"$PREFIX\"\n    PREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nfi\n\nif [ ! -d mingw-w64 ] || [ -n \"$SYNC\" ]; then\n    CHECKOUT_ONLY=1 ./build-mingw-w64.sh\nfi\n\ncd mingw-w64\n\nMAKE=make\nif command -v gmake >/dev/null; then\n    MAKE=gmake\nfi\n\n: ${CORES:=$(nproc 2>/dev/null)}\n: ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n: ${CORES:=4}\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n: ${TARGET_OSES:=${TOOLCHAIN_TARGET_OSES-mingw32 mingw32uwp}}\n\nif [ -n \"$HOST\" ]; then\n    CONFIGFLAGS=\"$CONFIGFLAGS --host=$HOST\"\n    CROSS_NAME=-$HOST\n    case $HOST in\n    *-mingw32)\n        EXEEXT=.exe\n        ;;\n    esac\nelse\n    case $(uname) in\n    MINGW*)\n        EXEEXT=.exe\n        ;;\n    esac\nfi\nif [ -n \"$MACOS_REDIST\" ]; then\n    if [ -z \"$CFLAGS\" ]; then\n        CFLAGS=\"-g -O2\"\n    fi\n    : ${MACOS_REDIST_ARCHS:=arm64 x86_64}\n    : ${MACOS_REDIST_VERSION:=10.12}\n    NONNATIVE_ARCH=\n    for arch in $MACOS_REDIST_ARCHS; do\n        CFLAGS=\"$CFLAGS -arch $arch\"\n        if [ \"$(uname -m)\" != \"$arch\" ]; then\n            case $arch in\n            arm64) NONNATIVE_ARCH=aarch64 ;;\n            *)     NONNATIVE_ARCH=$arch ;;\n            esac\n        fi\n    done\n    if [ -n \"$NONNATIVE_ARCH\" ]; then\n        # If we're not building for the native arch, flag that we're\n        # cross compiling.\n        CONFIGFLAGS=\"$CONFIGFLAGS --host=$NONNATIVE_ARCH-apple-darwin\"\n    fi\n    export CFLAGS=\"$CFLAGS -mmacosx-version-min=$MACOS_REDIST_VERSION\"\nfi\nif [ -n \"$SKIP_INCLUDE_TRIPLET_PREFIX\" ]; then\n    INCLUDEDIR=\"$PREFIX/include\"\nelse\n    INCLUDEDIR=\"$PREFIX/generic-w64-mingw32/include\"\nfi\nANY_ARCH=$(echo $ARCHS | awk '{print $1}')\n\ncd mingw-w64-tools/gendef\n[ -z \"$CLEAN\" ] || rm -rf build${CROSS_NAME}\nmkdir -p build${CROSS_NAME}\ncd build${CROSS_NAME}\n../configure --prefix=\"$PREFIX\" $CONFIGFLAGS\n$MAKE -j$CORES\n$MAKE install-strip\nmkdir -p \"$PREFIX/share/gendef\"\ninstall -m644 ../COPYING \"$PREFIX/share/gendef\"\ncd ../../widl\n[ -z \"$CLEAN\" ] || rm -rf build${CROSS_NAME}\nmkdir -p build${CROSS_NAME}\ncd build${CROSS_NAME}\n../configure --prefix=\"$PREFIX\" --target=$ANY_ARCH-w64-mingw32 --with-widl-includedir=\"$INCLUDEDIR\" $CONFIGFLAGS\n$MAKE -j$CORES\n$MAKE install-strip\nmkdir -p \"$PREFIX/share/widl\"\ninstall -m644 ../../../COPYING \"$PREFIX/share/widl\"\ncd ..\ncd \"$PREFIX/bin\"\n# The build above produced $ANY_ARCH-w64-mingw32-widl, add symlinks to it\n# with other prefixes.\nfor arch in $ARCHS; do\n    for target_os in $TARGET_OSES; do\n        if [ \"$arch\" != \"$ANY_ARCH\" ] || [ \"$target_os\" != \"mingw32\" ]; then\n            ln -sf $ANY_ARCH-w64-mingw32-widl$EXEEXT $arch-w64-$target_os-widl$EXEEXT\n        fi\n    done\ndone\nif [ -n \"$EXEEXT\" ]; then\n    # In a build of the tools for windows, we also want to provide an\n    # unprefixed one. If crosscompiling, we know what the native arch is;\n    # $HOST. If building natively, check the built clang to see what the\n    # default arch is.\n    if [ -z \"$HOST\" ] && [ -f clang$EXEEXT ]; then\n        HOST=$(./clang -dumpmachine | sed 's/-.*//')-w64-mingw32\n    fi\n    if [ -n \"$HOST\" ]; then\n        HOST_ARCH=\"${HOST%%-*}\"\n        # Only install an unprefixed symlink if $HOST is one of the architectures\n        # we are installing wrappers for.\n        case $ARCHS in\n        *$HOST_ARCH*)\n            ln -sf $HOST-widl$EXEEXT widl$EXEEXT\n            ;;\n        esac\n    fi\nfi\n"
        },
        {
          "name": "build-mingw-w64.sh",
          "type": "blob",
          "size": 4.240234375,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\n: ${DEFAULT_WIN32_WINNT:=0x601}\n: ${DEFAULT_MSVCRT:=ucrt}\n: ${MINGW_W64_VERSION:=d2ee971046e625c35e8818ac1634b00384342249}\n\nCFGUARD_FLAGS=\"--enable-cfguard\"\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --skip-include-triplet-prefix)\n        SKIP_INCLUDE_TRIPLET_PREFIX=1\n        ;;\n    --with-default-win32-winnt=*)\n        DEFAULT_WIN32_WINNT=\"${1#*=}\"\n        ;;\n    --with-default-msvcrt=*)\n        DEFAULT_MSVCRT=\"${1#*=}\"\n        ;;\n    --enable-cfguard)\n        CFGUARD_FLAGS=\"--enable-cfguard\"\n        ;;\n    --disable-cfguard)\n        CFGUARD_FLAGS=\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$CHECKOUT_ONLY\" ]; then\n    if [ -z \"$PREFIX\" ]; then\n        echo \"$0 [--skip-include-triplet-prefix] [--with-default-win32-winnt=0x601] [--with-default-msvcrt=ucrt] [--enable-cfguard|--disable-cfguard] dest\"\n        exit 1\n    fi\n\n    mkdir -p \"$PREFIX\"\n    PREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nfi\n\nif [ ! -d mingw-w64 ]; then\n    git clone https://github.com/mingw-w64/mingw-w64\n    CHECKOUT=1\nfi\n\ncd mingw-w64\n\nif [ -n \"$SYNC\" ] || [ -n \"$CHECKOUT\" ]; then\n    [ -z \"$SYNC\" ] || git fetch\n    git checkout $MINGW_W64_VERSION\nfi\n\n[ -z \"$CHECKOUT_ONLY\" ] || exit 0\n\nMAKE=make\nif command -v gmake >/dev/null; then\n    MAKE=gmake\nfi\n\ncase $(uname) in\nMINGW*|MSYS*)\n    CRT_CONFIG_FLAGS=\"--disable-dependency-tracking\"\n    ;;\nesac\n\nexport PATH=\"$PREFIX/bin:$PATH\"\n\nunset CC\n\n: ${CORES:=$(nproc 2>/dev/null)}\n: ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n: ${CORES:=4}\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nif [ -z \"$SKIP_INCLUDE_TRIPLET_PREFIX\" ]; then\n    HEADER_ROOT=\"$PREFIX/generic-w64-mingw32\"\nelse\n    HEADER_ROOT=\"$PREFIX\"\nfi\n\ncd mingw-w64-headers\n[ -z \"$CLEAN\" ] || rm -rf build\nmkdir -p build\ncd build\n../configure --prefix=\"$HEADER_ROOT\" \\\n    --enable-idl --with-default-win32-winnt=$DEFAULT_WIN32_WINNT --with-default-msvcrt=$DEFAULT_MSVCRT INSTALL=\"install -C\"\n$MAKE install\ncd ../..\nif [ -z \"$SKIP_INCLUDE_TRIPLET_PREFIX\" ]; then\n    for arch in $ARCHS; do\n        mkdir -p \"$PREFIX/$arch-w64-mingw32\"\n        if [ ! -e \"$PREFIX/$arch-w64-mingw32/include\" ]; then\n            ln -sfn ../generic-w64-mingw32/include \"$PREFIX/$arch-w64-mingw32/include\"\n        fi\n    done\nfi\n\ncd mingw-w64-crt\nfor arch in $ARCHS; do\n    [ -z \"$CLEAN\" ] || rm -rf build-$arch\n    mkdir -p build-$arch\n    cd build-$arch\n    case $arch in\n    armv7)\n        FLAGS=\"--disable-lib32 --disable-lib64 --enable-libarm32\"\n        ;;\n    aarch64)\n        FLAGS=\"--disable-lib32 --disable-lib64 --enable-libarm64\"\n        ;;\n    i686)\n        FLAGS=\"--enable-lib32 --disable-lib64\"\n        ;;\n    x86_64)\n        FLAGS=\"--disable-lib32 --enable-lib64\"\n        ;;\n    esac\n    FLAGS=\"$FLAGS --with-default-msvcrt=$DEFAULT_MSVCRT\"\n    ../configure --host=$arch-w64-mingw32 --prefix=\"$PREFIX/$arch-w64-mingw32\" $FLAGS $CFGUARD_FLAGS $CRT_CONFIG_FLAGS\n    $MAKE -j$CORES\n    $MAKE install\n    cd ..\ndone\ncd ..\n\nfor arch in $ARCHS; do\n    if [ ! -f $PREFIX/$arch-w64-mingw32/lib/libssp.a ]; then\n        # Create empty dummy archives, to avoid failing when the compiler\n        # driver adds \"-lssp -lssh_nonshared\" when linking.\n        llvm-ar rcs $PREFIX/$arch-w64-mingw32/lib/libssp.a\n        llvm-ar rcs $PREFIX/$arch-w64-mingw32/lib/libssp_nonshared.a\n    fi\n\n    mkdir -p \"$PREFIX/$arch-w64-mingw32/share/mingw32\"\n    for file in COPYING COPYING.MinGW-w64/COPYING.MinGW-w64.txt COPYING.MinGW-w64-runtime/COPYING.MinGW-w64-runtime.txt; do\n        install -m644 \"$file\" \"$PREFIX/$arch-w64-mingw32/share/mingw32\"\n    done\ndone\n"
        },
        {
          "name": "build-openmp.sh",
          "type": "blob",
          "size": 2.73046875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2020 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nCFGUARD_CFLAGS=\"-mguard=cf\"\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --enable-cfguard)\n        CFGUARD_CFLAGS=\"-mguard=cf\"\n        ;;\n    --disable-cfguard)\n        CFGUARD_CFLAGS=\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo \"$0 [--enable-cfguard|--disable-cfguard] dest\"\n    exit 1\nfi\n\nmkdir -p \"$PREFIX\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\n\nexport PATH=\"$PREFIX/bin:$PATH\"\n\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nif [ ! -d llvm-project/openmp ] || [ -n \"$SYNC\" ]; then\n    CHECKOUT_ONLY=1 ./build-llvm.sh\nfi\n\ncd llvm-project/openmp\n\nif command -v ninja >/dev/null; then\n    CMAKE_GENERATOR=\"Ninja\"\nelse\n    : ${CORES:=$(nproc 2>/dev/null)}\n    : ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n    : ${CORES:=4}\n\n    case $(uname) in\n    MINGW*)\n        CMAKE_GENERATOR=\"MSYS Makefiles\"\n        ;;\n    esac\nfi\n\nfor arch in $ARCHS; do\n    CMAKEFLAGS=\"\"\n    case $arch in\n    x86_64)\n        CMAKEFLAGS=\"$CMAKEFLAGS -DLIBOMP_ASMFLAGS=-m64\"\n        ;;\n    esac\n\n    [ -z \"$CLEAN\" ] || rm -rf build-$arch\n    mkdir -p build-$arch\n    cd build-$arch\n    [ -n \"$NO_RECONF\" ] || rm -rf CMake*\n\n    cmake \\\n        ${CMAKE_GENERATOR+-G} \"$CMAKE_GENERATOR\" \\\n        -DCMAKE_BUILD_TYPE=Release \\\n        -DCMAKE_INSTALL_PREFIX=\"$PREFIX/$arch-w64-mingw32\" \\\n        -DCMAKE_C_COMPILER=$arch-w64-mingw32-clang \\\n        -DCMAKE_CXX_COMPILER=$arch-w64-mingw32-clang++ \\\n        -DCMAKE_RC_COMPILER=$arch-w64-mingw32-windres \\\n        -DCMAKE_ASM_MASM_COMPILER=llvm-ml \\\n        -DCMAKE_SYSTEM_NAME=Windows \\\n        -DCMAKE_AR=\"$PREFIX/bin/llvm-ar\" \\\n        -DCMAKE_RANLIB=\"$PREFIX/bin/llvm-ranlib\" \\\n        -DLIBOMP_ENABLE_SHARED=TRUE \\\n        -DCMAKE_C_FLAGS_INIT=\"$CFGUARD_CFLAGS\" \\\n        -DCMAKE_CXX_FLAGS_INIT=\"$CFGUARD_CFLAGS\" \\\n        $CMAKEFLAGS \\\n        ..\n    cmake --build . ${CORES:+-j${CORES}}\n    cmake --install .\n    rm -f $PREFIX/$arch-w64-mingw32/bin/*iomp5md*\n    rm -f $PREFIX/$arch-w64-mingw32/lib/*iomp5md*\n    cd ..\ndone\n"
        },
        {
          "name": "build-python.sh",
          "type": "blob",
          "size": 4.42578125,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\n: ${LIBFFI_VERSION:=v3.4.6}\n: ${PYTHON_VERSION:=v3.12.7}\n: ${PYTHON_VERSION_MINGW:=d21f60d4a8bb03e0309fe3907b104f1878059f90}\n\nunset HOST\n\nBUILDDIR=build\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --host=*)\n        HOST=\"${1#*=}\"\n        BUILDDIR=$BUILDDIR-$HOST\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\n\nif [ -z \"$CHECKOUT_ONLY\" ]; then\n    if [ -z \"$PREFIX\" ]; then\n        echo $0 --host=triple dest\n        exit 1\n    fi\n\n    mkdir -p \"$PREFIX\"\n    PREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nfi\n\nMAKE=make\nif command -v gmake >/dev/null; then\n    MAKE=gmake\nfi\n\n: ${CORES:=$(nproc 2>/dev/null)}\n: ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n: ${CORES:=4}\n\nif [ ! -d libffi ]; then\n    git clone https://github.com/libffi/libffi.git\n    CHECKOUT_LIBFFI=1\nfi\n\nif [ -n \"$SYNC\" ] || [ -n \"$CHECKOUT_LIBFFI\" ]; then\n    cd libffi\n    [ -z \"$SYNC\" ] || git fetch\n    git reset --hard\n    git checkout $LIBFFI_VERSION\n    autoreconf -vfi\n    cd ..\nfi\n\nif [ -z \"$HOST\" ]; then\n    # Use a separate checkout for python for the native build;\n    # mingw builds use a separate fork, maintained by msys2\n    # which doesn't build on regular Unix\n    if [ ! -d cpython-native ]; then\n        git clone https://github.com/python/cpython.git cpython-native\n        CHECKOUT_PYTHON_NATIVE=1\n    fi\n\n    if [ -n \"$SYNC\" ] || [ -n \"$CHECKOUT_PYTHON_NATIVE\" ]; then\n        cd cpython-native\n        [ -z \"$SYNC\" ] || git fetch\n        git checkout $PYTHON_VERSION\n        cd ..\n    fi\n\n    [ -z \"$CHECKOUT_ONLY\" ] || exit 0\n\n    cd libffi\n    [ -z \"$CLEAN\" ] || rm -rf $BUILDDIR\n    mkdir -p $BUILDDIR\n    cd $BUILDDIR\n    ../configure --prefix=\"$PREFIX\" --disable-symvers --disable-docs\n    $MAKE -j$CORES\n    $MAKE install\n    cd ../..\n\n    cd cpython-native\n    [ -z \"$CLEAN\" ] || rm -rf $BUILDDIR\n    mkdir -p $BUILDDIR\n    cd $BUILDDIR\n    ../configure --prefix=\"$PREFIX\" \\\n        CFLAGS=\"-I$PREFIX/include\" CXXFLAGS=\"-I$PREFIX/include\" LDFLAGS=\"-L$PREFIX/lib -Wl,-s\" \\\n        --without-ensurepip \\\n        --disable-test-modules\n    $MAKE -j$CORES\n    $MAKE install\n    exit 0\nfi\n\n# Fetching\nif [ ! -d cpython-mingw ]; then\n    git clone https://github.com/msys2-contrib/cpython-mingw.git\n    CHECKOUT_PYTHON=1\nfi\n\nif [ -n \"$SYNC\" ] || [ -n \"$CHECKOUT_PYTHON\" ]; then\n    cd cpython-mingw\n    [ -z \"$SYNC\" ] || git fetch\n    git reset --hard\n    git checkout $PYTHON_VERSION_MINGW\n    autoreconf -vfi\n    cd ..\nfi\n\n[ -z \"$CHECKOUT_ONLY\" ] || exit 0\n\ncd libffi\n[ -z \"$CLEAN\" ] || rm -rf $BUILDDIR\nmkdir -p $BUILDDIR\ncd $BUILDDIR\n../configure --prefix=\"$PREFIX\" --host=$HOST --disable-symvers --disable-docs\n$MAKE -j$CORES\n$MAKE install\ncd ../..\n\ncd cpython-mingw\n[ -z \"$CLEAN\" ] || rm -rf $BUILDDIR\nmkdir -p $BUILDDIR\ncd $BUILDDIR\nBUILD=$(../config.guess) # Python configure requires build triplet for cross compilation\n# Locate the native python3 that we've built before, from the path\nNATIVE_PYTHON=\"$(command -v python3)\"\n\nexport CC=$HOST-gcc\nexport CXX=$HOST-g++\n\n../configure --prefix=\"$PREFIX\" --build=$BUILD --host=$HOST \\\n    CFLAGS=\"-I$PREFIX/include\" CXXFLAGS=\"-I$PREFIX/include\" LDFLAGS=\"-L$PREFIX/lib -Wl,-s\" \\\n    PKG_CONFIG_LIBDIR=\"$PREFIX/lib/pkgconfig\" \\\n    --with-build-python=\"$NATIVE_PYTHON\" \\\n    --enable-shared             \\\n    --with-system-ffi           \\\n    --without-ensurepip         \\\n    --without-c-locale-coercion \\\n    --disable-test-modules\n\n$MAKE -j$CORES\n$MAKE install\nfind $PREFIX/lib/python* -name __pycache__ | xargs rm -rf\n\n# Provide a versionless executable as well; msys2 does something similar\n# (for python3, python3w, python3-config, idle3 and pydoc3) after installing\n# a Python version that is supposed to be the primary Python.\ncp -a $PREFIX/bin/python3.exe $PREFIX/bin/python.exe\n\ncd ../..\n"
        },
        {
          "name": "copy-msys-dependencies.sh",
          "type": "blob",
          "size": 1.3232421875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2023 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nwhile [ $# -gt 0 ]; do\n    if [ -z \"$PREFIX\" ]; then\n        PREFIX=\"$1\"\n    elif [ -z \"$MSYS_ENV\" ]; then\n        MSYS_ENV=\"$1\"\n    else\n        echo Unrecognized parameter $1\n        exit 1\n    fi\n    shift\ndone\nif [ -z \"$MSYS_ENV\" ]; then\n    echo $0 prefix msys_env\n    exit 1\nfi\n\ncd $PREFIX/bin\nfor i in ld.lld.exe clang-*.exe lldb.exe; do\n    if [ ! -f \"$i\" ]; then\n        continue\n    fi\n    for f in $(ldd \"$i\" | grep /$MSYS_ENV | awk '{print $3}'); do\n        if [ ! -f \"$(basename $f)\" ]; then\n            echo Copying $f\n            cp $f .\n        fi\n    done\ndone\n"
        },
        {
          "name": "extract-docker.sh",
          "type": "blob",
          "size": 1.091796875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nif [ $# -lt 2 ]; then\n    echo $0 image dir\n    echo\n    echo This extracts \\'dir\\' from the docker image named \\'image\\' into the\n    echo current directory. NOTE: This removes the existing directory named\n    echo \\'dir\\' first.\n    exit 1\nfi\n\nimage=$1\ndir=$2\n\nrm -rf $(echo $dir | sed 's,^/,,')\ndocker run --rm $image tar -cf - $dir | tar -xvf -\n"
        },
        {
          "name": "install-wrappers.sh",
          "type": "blob",
          "size": 7.4794921875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nunset HOST\nunset HOST_CLANG\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --host-clang|--host-clang=*)\n        HOST_CLANG=${1#--host-clang}\n        HOST_CLANG=${HOST_CLANG#=}\n        HOST_CLANG=${HOST_CLANG:-clang}\n        ;;\n    --host=*)\n        HOST=\"${1#*=}\"\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo $0 [--host=triple] [--host-clang[=clang]] dest\n    exit 1\nfi\nmkdir -p \"$PREFIX\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\n\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n: ${TARGET_OSES:=${TOOLCHAIN_TARGET_OSES-mingw32 mingw32uwp}}\n\nif [ -n \"$HOST\" ] && [ -z \"$CC\" ]; then\n    CC=$HOST-gcc\nfi\n: ${CC:=cc}\n\nif [ -n \"$HOST\" ]; then\n    case $HOST in\n    *-mingw32)\n        EXEEXT=.exe\n        ;;\n    esac\nelse\n    case $(uname) in\n    MINGW*)\n        EXEEXT=.exe\n        ;;\n    esac\nfi\n\nif [ -n \"${HOST_CLANG}\" ]; then\n    HOST_CLANG_EXE=$(command -v $HOST_CLANG)\n    HOST_CLANG_VER=$(echo \"__clang_major__ __clang_minor__ __clang_patchlevel__\" | $HOST_CLANG_EXE -E -P -x c - | xargs printf '%d.%d.%d')\n\n    mkdir -p $PREFIX/bin\n\n    # ex. /usr/lib/llvm-17/lib/clang/17\n    resdir=$($HOST_CLANG -print-resource-dir)\n    # ex. /usr/lib/llvm-17\n    llvmdir=${resdir%/lib/clang/*}\n    # ex /lib/clang/17\n    clangres=${resdir#$llvmdir}\n\n    mkdir -p $PREFIX$clangres\n\n    # link the header directory, prevent modification\n    ln -snf $resdir/include $PREFIX$clangres/include\n\n    # Note: clang will detect the \"InstalledDir\" based on the path that was used to invoke the tools\n    # This might still have some hidden effects\n    printf '#!/bin/sh\\nsr=$(dirname \"$(dirname \"$(readlink -f \"$0\")\")\")\\nexec %s -resource-dir=\"$sr\"%s --sysroot=\"$sr\" --config-system-dir=\"$sr\"/bin \"$@\"\\n' \"$HOST_CLANG_EXE\" \"$clangres\" > $PREFIX/bin/clang\n    # printf '#!/bin/sh\\nsr=$(dirname \"$(dirname \"$(readlink -f \"$0\")\")\")\\nexec %s -resource-dir=\"$sr\"%s --sysroot=\"$sr\" \"$@\"\\n' \"$(readlink -f \"$HOST_CLANG_EXE\")\" \"$clangres\" > $PREFIX/bin/clang\n    chmod 755 $PREFIX/bin/clang\n    ln -sf clang $PREFIX/bin/clang++\n    ln -sf clang $PREFIX/bin/clang-cpp\n\n    echo \"Using existing clang $HOST_CLANG_EXE ($HOST_CLANG_VER)\"\n    $PREFIX/bin/clang -v\n\n    # prefer system llvm installation, but search in llvm private paths (eg. debian does not symlink all tools into /usr/bin)\n    llvmexec=\"$PATH:$llvmdir/bin\"\n\n    for exec in ld.lld llvm-ar llvm-ranlib llvm-nm llvm-objcopy llvm-strip llvm-rc llvm-cvtres \\\n                llvm-addr2line llvm-dlltool llvm-readelf llvm-size llvm-strings llvm-addr2line llvm-windres llvm-ml; do\n        execpath=$(PATH=$llvmexec command -v $exec) && ln -sf $execpath $PREFIX/bin/$exec\n    done\nfi\n\nif [ -n \"$MACOS_REDIST\" ]; then\n    : ${MACOS_REDIST_ARCHS:=arm64 x86_64}\n    : ${MACOS_REDIST_VERSION:=10.12}\n    for arch in $MACOS_REDIST_ARCHS; do\n        WRAPPER_FLAGS=\"$WRAPPER_FLAGS -arch $arch\"\n    done\n    WRAPPER_FLAGS=\"$WRAPPER_FLAGS -mmacosx-version-min=$MACOS_REDIST_VERSION\"\nfi\n\nif [ -n \"$EXEEXT\" ]; then\n    CLANG_MAJOR=$(basename $(echo $PREFIX/lib/clang/* | awk '{print $NF}') | cut -f 1 -d .)\n    WRAPPER_FLAGS=\"$WRAPPER_FLAGS -municode -DCLANG=\\\"clang-$CLANG_MAJOR\\\"\"\n    WRAPPER_FLAGS=\"$WRAPPER_FLAGS -DCLANG_SCAN_DEPS=\\\"clang-scan-deps-real\\\"\"\n    # The wrappers may use printf, but doesn't use anything that specifically\n    # needs full ansi compliance - prefer leaner binaries by using the CRT\n    # implementations.\n    WRAPPER_FLAGS=\"$WRAPPER_FLAGS -D__USE_MINGW_ANSI_STDIO=0\"\nfi\n\nmkdir -p \"$PREFIX/bin\"\ncp wrappers/*-wrapper.sh \"$PREFIX/bin\"\ncp wrappers/mingw32-common.cfg $PREFIX/bin\nfor arch in $ARCHS; do\n    cp wrappers/$arch-w64-windows-gnu.cfg $PREFIX/bin\ndone\nif [ -n \"$HOST\" ] && [ -n \"$EXEEXT\" ]; then\n    # TODO: If building natively on msys, pick up the default HOST value from there.\n    WRAPPER_FLAGS=\"$WRAPPER_FLAGS -DDEFAULT_TARGET=\\\"$HOST\\\"\"\n    for i in wrappers/*-wrapper.sh; do\n        cat $i | sed 's/^DEFAULT_TARGET=.*/DEFAULT_TARGET='$HOST/ > \"$PREFIX/bin/$(basename $i)\"\n    done\nfi\n$CC wrappers/clang-target-wrapper.c -o \"$PREFIX/bin/clang-target-wrapper$EXEEXT\" -O2 -Wl,-s $WRAPPER_FLAGS\n$CC wrappers/clang-scan-deps-wrapper.c -o \"$PREFIX/bin/clang-scan-deps-wrapper$EXEEXT\" -O2 -Wl,-s $WRAPPER_FLAGS\n$CC wrappers/llvm-wrapper.c -o \"$PREFIX/bin/llvm-wrapper$EXEEXT\" -O2 -Wl,-s $WRAPPER_FLAGS\nif [ -n \"$EXEEXT\" ]; then\n    # For Windows, we should prefer the executable wrapper, which also works\n    # when invoked from outside of MSYS.\n    CTW_SUFFIX=$EXEEXT\n    CTW_LINK_SUFFIX=$EXEEXT\n    CSDW=clang-scan-deps-wrapper$EXEEXT\nelse\n    CTW_SUFFIX=.sh\n    CSDW=clang-scan-deps\nfi\ncd \"$PREFIX/bin\"\nfor arch in $ARCHS; do\n    for target_os in $TARGET_OSES; do\n        for exec in clang clang++ gcc g++ c++ as; do\n            ln -sf clang-target-wrapper$CTW_SUFFIX $arch-w64-$target_os-$exec$CTW_LINK_SUFFIX\n        done\n        ln -sf $CSDW $arch-w64-$target_os-clang-scan-deps$CTW_LINK_SUFFIX\n        for exec in addr2line ar ranlib nm objcopy readelf size strings strip llvm-ar llvm-ranlib; do\n            if [ -n \"$EXEEXT\" ]; then\n                link_target=llvm-wrapper\n            else\n                case $exec in\n                llvm-*)\n                    link_target=$exec\n                    ;;\n                *)\n                    link_target=llvm-$exec\n                    ;;\n                esac\n            fi\n            ln -sf $link_target$EXEEXT $arch-w64-$target_os-$exec$EXEEXT || true\n        done\n        # windres and dlltool can't use llvm-wrapper, as that loses the original\n        # target arch prefix.\n        ln -sf llvm-windres$EXEEXT $arch-w64-$target_os-windres$EXEEXT\n        ln -sf llvm-dlltool$EXEEXT $arch-w64-$target_os-dlltool$EXEEXT\n        for exec in ld objdump; do\n            ln -sf $exec-wrapper.sh $arch-w64-$target_os-$exec\n        done\n    done\ndone\nif [ -n \"$EXEEXT\" ]; then\n    if [ ! -L clang$EXEEXT ] && [ -f clang$EXEEXT ] && [ ! -f clang-$CLANG_MAJOR$EXEEXT ]; then\n        mv clang$EXEEXT clang-$CLANG_MAJOR$EXEEXT\n    fi\n    if [ ! -L clang-scan-deps$EXEEXT ] && [ -f clang-scan-deps$EXEEXT ] && [ ! -f clang-scan-deps-real$EXEEXT ]; then\n        mv clang-scan-deps$EXEEXT clang-scan-deps-real$EXEEXT\n    fi\n    if [ -z \"$HOST\" ]; then\n        HOST=$(./clang-$CLANG_MAJOR -dumpmachine | sed 's/-.*//')-w64-mingw32\n    fi\n    HOST_ARCH=\"${HOST%%-*}\"\n    # Install unprefixed wrappers if $HOST is one of the architectures\n    # we are installing wrappers for.\n    case $ARCHS in\n    *$HOST_ARCH*)\n        for exec in clang clang++ gcc g++ c++ addr2line ar dlltool ranlib nm objcopy readelf size strings strip windres clang-scan-deps; do\n            ln -sf $HOST-$exec$EXEEXT $exec$EXEEXT\n        done\n        for exec in cc c99 c11; do\n            ln -sf clang$EXEEXT $exec$EXEEXT\n        done\n        for exec in ld objdump; do\n            ln -sf $HOST-$exec $exec\n        done\n        ;;\n    esac\nfi\n"
        },
        {
          "name": "prepare-cross-toolchain-unix.sh",
          "type": "blob",
          "size": 2.154296875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2022 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nif [ $# -lt 2 ]; then\n    echo $0 src dest\n    exit 1\nfi\nSRC=\"$1\"\nDEST=\"$2\"\n\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nCLANG_RESOURCE_DIR=\"$(\"$SRC/bin/clang\" --print-resource-dir)\"\nCLANG_VERSION=$(basename \"$CLANG_RESOURCE_DIR\")\n\n# Copy the clang resource files (include, lib, share). The clang cross\n# build installs the main headers, but since we didn't build the runtimes\n# (compiler-rt), we're lacking the files that are installed by them. The\n# compiler-rt build primarily installs some libs, but also a few files under\n# share, and headers for some of the runtime libraries.\n#\n# Instead of trying to merge these files on top of the headers installed\n# by the clang cross build, just wipe the existing files and copy the whole\n# resource directory from the complete toolchain. As long as it's a matching\n# version of clang, the headers that were installed by it should be identical.\n#\n# Alternatively, we could copy the lib and share subdirectories, and\n# copy the individual include subdirectories that are missing.\nrm -rf $DEST/lib/clang/$CLANG_VERSION\ncp -a $CLANG_RESOURCE_DIR $DEST/lib/clang/$CLANG_VERSION\n\n# Copy all arch-specific subdirectories plus the \"generic\" one, as is.\nfor arch in generic $ARCHS; do\n    rm -rf $DEST/$arch-w64-mingw32\n    cp -a $SRC/$arch-w64-mingw32 $DEST/$arch-w64-mingw32\ndone\n\n# Copy the libc++ module sources\nrm -rf $DEST/share/libc++\ncp -a $SRC/share/libc++ $DEST/share\n"
        },
        {
          "name": "prepare-cross-toolchain.sh",
          "type": "blob",
          "size": 2.9228515625,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nif [ $# -lt 3 ]; then\n    echo $0 src dest arch\n    exit 1\nfi\nSRC=\"$1\"\nDEST=\"$2\"\nCROSS_ARCH=\"$3\"\n\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nCLANG_RESOURCE_DIR=\"$(\"$SRC/bin/clang\" --print-resource-dir)\"\nCLANG_VERSION=$(basename \"$CLANG_RESOURCE_DIR\")\n\n# If linked to a shared libc++/libunwind, we need to bundle those DLLs\n# in the bin directory. For simplicity, copy all runtime DLLs to the\n# bin directory - that way, users who have this directory in $PATH\n# can run the executables they've built directly without fiddling\n# with copying them.\ncp $SRC/$CROSS_ARCH-w64-mingw32/bin/*.dll $DEST/bin\n\n# Copy the clang resource files (include, lib, share). The clang cross\n# build installs the main headers, but since we didn't build the runtimes\n# (compiler-rt), we're lacking the files that are installed by them. The\n# compiler-rt build primarily installs some libs, but also a few files under\n# share, and headers for some of the runtime libraries.\n#\n# Instead of trying to merge these files on top of the headers installed\n# by the clang cross build, just wipe the existing files and copy the whole\n# resource directory from the complete toolchain. As long as it's a matching\n# version of clang, the headers that were installed by it should be identical.\n#\n# Alternatively, we could copy the lib and share subdirectories, and\n# copy the individual include subdirectories that are missing.\nrm -rf $DEST/lib/clang/$CLANG_VERSION\ncp -a $CLANG_RESOURCE_DIR $DEST/lib/clang/$CLANG_VERSION\n\nmkdir -p $DEST/include\n# Copy over headers and arch specific files, converting a unix style\n# install (everything in arch specific subdirectories) into\n# what we'd have when built on Windows, as if build-mingw-w64.sh\n# was called with --skip-include-triplet-prefit, with all headers\n# in $DEST/include, and only keeping the bin and lib directories for the\n# individual architectures.\ncp -a $SRC/generic-w64-mingw32/include/. $DEST/include\nfor arch in $ARCHS; do\n    mkdir -p $DEST/$arch-w64-mingw32\n    for subdir in bin lib share; do\n        cp -a $SRC/$arch-w64-mingw32/$subdir $DEST/$arch-w64-mingw32\n    done\ndone\n\n# Copy the libc++ module sources\nrm -rf $DEST/share/libc++\ncp -a $SRC/share/libc++ $DEST/share\n"
        },
        {
          "name": "release-macos.sh",
          "type": "blob",
          "size": 1.359375,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2022 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -ex\n\nif [ $# -lt 1 ]; then\n    echo $0 tag\n    exit 1\nfi\n\nTAG=$1\n\n# macOS itself doesn't ship with libzstd; avoid picking up a zstd\n# dependency from libraries installed e.g. with homebrew.\nexport LLVM_CMAKEFLAGS=\"-DLLVM_ENABLE_ZSTD=OFF\"\n\nRELNAME=llvm-mingw-$TAG-ucrt-macos-universal\nDEST=$HOME/$RELNAME\nrm -rf $DEST\ntime CLEAN=1 SYNC=1 MACOS_REDIST=1 ./build-all.sh $DEST\ndir=$(pwd)\ncd $HOME\nTAR=tar\nif command -v gtar >/dev/null; then\n    TAR_FLAGS=\"--numeric-owner --owner=0 --group=0\"\n    TAR=gtar\nfi\n$TAR -Jcvf $dir/$RELNAME.tar.xz --format=ustar $TAR_FLAGS $RELNAME\nrm -rf $RELNAME\ncd $dir\nls -lh $RELNAME.tar.xz\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 2.5419921875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -ex\n\nif [ $# -lt 1 ]; then\n    echo $0 tag [nativeonly]\n    exit 1\nfi\n\nTAG=$1\n\nif [ \"$2\" = \"nativeonly\" ]; then\n    NATIVEONLY=1\nfi\n\ntime docker build -f Dockerfile . -t mstorsjo/llvm-mingw:latest -t mstorsjo/llvm-mingw:$TAG\n\nDISTRO=ubuntu-22.04-$(uname -m)\ndocker run --rm mstorsjo/llvm-mingw:latest sh -c \"cd /opt && mv llvm-mingw llvm-mingw-$TAG-ucrt-$DISTRO && tar -Jcvf - --format=ustar --numeric-owner --owner=0 --group=0 llvm-mingw-$TAG-ucrt-$DISTRO\" > llvm-mingw-$TAG-ucrt-$DISTRO.tar.xz\n\nif [ -n \"$NATIVEONLY\" ]; then\n    exit 0\nfi\n\ntime docker build -f Dockerfile.dev . -t mstorsjo/llvm-mingw:dev -t mstorsjo/llvm-mingw:dev-$TAG\n\ncleanup() {\n    for i in $temp_images; do\n        docker rmi --no-prune $i || true\n    done\n}\n\ntrap cleanup EXIT INT TERM\n\nfor arch in i686 x86_64 armv7 aarch64; do\n    temp=$(uuidgen)\n    temp_images=\"$temp_images $temp\"\n    time docker build -f Dockerfile.cross --build-arg BASE=mstorsjo/llvm-mingw:dev --build-arg CROSS_ARCH=$arch --build-arg TAG=$TAG-ucrt- --build-arg WITH_PYTHON=1 -t $temp .\n    ./extract-docker.sh $temp /llvm-mingw-$TAG-ucrt-$arch.zip\ndone\n\nmsvcrt_image=llvm-mingw-msvcrt-$(uuidgen)\ntemp_images=\"$temp_images $msvcrt_image\"\ntime docker build -f Dockerfile.dev -t $msvcrt_image --build-arg DEFAULT_CRT=msvcrt .\n\ndocker run --rm $msvcrt_image sh -c \"cd /opt && mv llvm-mingw llvm-mingw-$TAG-msvcrt-$DISTRO && tar -Jcvf - --format=ustar --numeric-owner --owner=0 --group=0 llvm-mingw-$TAG-msvcrt-$DISTRO\" > llvm-mingw-$TAG-msvcrt-$DISTRO.tar.xz\n\nfor arch in i686 x86_64; do\n    temp=$(uuidgen)\n    temp_images=\"$temp_images $temp\"\n    time docker build -f Dockerfile.cross --build-arg BASE=$msvcrt_image --build-arg CROSS_ARCH=$arch --build-arg TAG=$TAG-msvcrt- --build-arg WITH_PYTHON=1 -t $temp .\n    ./extract-docker.sh $temp /llvm-mingw-$TAG-msvcrt-$arch.zip\ndone\n"
        },
        {
          "name": "run-lldb-tests.sh",
          "type": "blob",
          "size": 4.3798828125,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2022 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -ex\n\nif [ $# -lt 1 ]; then\n    echo $0 prefix\n    exit 1\nfi\nPREFIX=\"$1\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nexport PATH=$PREFIX/bin:$PATH\n\n# We use tool names with explicit .exe suffixes here, so that it works both\n# in msys2 bash and in bash in WSL.\n: ${CXX:=clang++.exe}\n: ${LLDB:=lldb.exe}\n: ${OBJCOPY:=objcopy.exe}\n\nTARGET=$(clang.exe --version | grep Target: | awk '{print $2}')\nARCH=\"${TARGET%%-*}\"\n\ncd test\n\nTEST_DIR=\"$ARCH\"\n[ -z \"$CLEAN\" ] || rm -rf $TEST_DIR\n\nmkdir -p $TEST_DIR\n\n# Build an executable with DWARF debug info\n$CXX hello-exception.cpp -o $TEST_DIR/hello-exception-dwarf.exe -g\n\n# Build an executable with PDB debug info. Strip out any bundled DWARF debug info.\n$CXX hello-exception.cpp -o $TEST_DIR/hello-exception-pdb.exe -g -gcodeview -Wl,--pdb= -Wl,-s\n\n# Make a DWARF split debug info file with gnu debuglink.\ncp $TEST_DIR/hello-exception-dwarf.exe $TEST_DIR/hello-exception-split.exe\n$OBJCOPY --only-keep-debug $TEST_DIR/hello-exception-split.exe $TEST_DIR/hello-exception-split.dbg\n$OBJCOPY --strip-all $TEST_DIR/hello-exception-split.exe\n$OBJCOPY --add-gnu-debuglink=$TEST_DIR/hello-exception-split.dbg $TEST_DIR/hello-exception-split.exe\n\nfor i in libc++ libunwind; do\n    if [ -f $PREFIX/$ARCH-w64-mingw32/bin/$i.dll ]; then\n        cp $PREFIX/$ARCH-w64-mingw32/bin/$i.dll $TEST_DIR\n    fi\ndone\n\n\n# Test debugging a crashing executable, and check the backtrace of\n# the crash.\nOUT=lldb-test-out\nSCRIPT=lldb-test-script\ncat > $SCRIPT <<EOF\nrun\nbt\nEOF\nfor exe in hello-exception-dwarf.exe hello-exception-pdb.exe hello-exception-split.exe; do\n    $LLDB -b -s $SCRIPT -- $TEST_DIR/$exe -crash < /dev/null > $OUT 2>/dev/null\n    cat $OUT\n    grep -q \"Access violation\" $OUT\n    if [ \"$ARCH\" != \"armv7\" ] || [ \"$exe\" = \"hello-exception-pdb.exe\" ]; then\n        grep -q \"volatile int.*NULL.*0x42\" $OUT\n    fi\n    if [ \"$ARCH\" != \"armv7\" ]; then\n        # armv7 pdb gives \"val=<unavailable>\".\n        grep -q \"frame #0: .*hello-exception.*.exe.recurse(val=0) at hello-exception.cpp:\" $OUT\n        grep -q \"hello-exception.*.exe.recurse(val=10) at hello-exception.cpp:\" $OUT\n    fi\ndone\n\nexe=hello-exception-dwarf.exe\nif [ \"$ARCH\" = \"armv7\" ]; then\n    # LLDB works better on ARM with PDB than with DWARF.\n    exe=hello-exception-pdb.exe\nfi\n\n\n# Test running into a programmatic breakpoint (__debugbreak), check the\n# backtrace from there, and check that we can continue from it.\ncat > $SCRIPT <<EOF\nrun\nbt\ncont\nEOF\n$LLDB -b -s $SCRIPT -- $TEST_DIR/$exe -breakpoint < /dev/null > $OUT 2>/dev/null\ncat $OUT\ngrep -q \"stop reason = Exception 0x80000003\" $OUT\n# Not checking that __debugbreak is \"frame #0\"; on arm/aarch64, the program\n# counter points into the __debugbreak function, while on x86, it points to\n# the calling recurse function.\ngrep -q \"__debugbreak\" $OUT\nif [ \"$ARCH\" != \"armv7\" ]; then\n    grep -q \"hello-exception.*.exe.recurse(val=10) at hello-exception.cpp:\" $OUT\nfi\ngrep -q \"exited with status = 0\" $OUT\n\n\n# Test setting a breakpoint in LLDB, checking the backtrace when we hit it,\n# stepping from the breakpoint, and running to completion.\ncat > $SCRIPT <<EOF\nb done\nrun\nbt\nfinish\ncont\nEOF\n$LLDB -b -s $SCRIPT -- $TEST_DIR/$exe -noop < /dev/null > $OUT 2>/dev/null\ncat $OUT\ngrep -q \"Breakpoint 1: where = hello-exception.*.exe.done.* at hello-exception.cpp:\" $OUT\ngrep -q \"stop reason = breakpoint\" $OUT\ngrep -q \"frame #0: .*hello-exception.*.exe.done.* at hello-exception.cpp:\" $OUT\nif [ \"$ARCH\" != \"armv7\" ]; then\n    grep -q \"frame #0: .*hello-exception.*.exe.recurse(val=0) at hello-exception.cpp:\" $OUT\n    grep -q \"hello-exception.*.exe.recurse(val=10) at hello-exception.cpp:\" $OUT\nfi\ngrep -q \"exited with status = 0\" $OUT\n\nrm -f $OUT $SCRIPT\necho All tests succeeded\n"
        },
        {
          "name": "run-tests.sh",
          "type": "blob",
          "size": 3.8779296875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -ex\n\nif [ $# -lt 1 ]; then\n    echo $0 dest\n    exit 1\nfi\nPREFIX=\"$1\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nexport PATH=$PREFIX/bin:$PATH\n\n: ${CORES:=$(nproc 2>/dev/null)}\n: ${CORES:=$(sysctl -n hw.ncpu 2>/dev/null)}\n: ${CORES:=4}\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\nMAKE=make\nif command -v gmake >/dev/null; then\n    MAKE=gmake\nfi\n\ncase $(uname -s) in\nDarwin)\n    ;;\n*)\n    # Assume everything except macOS has got GNU make >= 4.0\n    MAKEOPTS=\"-O\"\nesac\n\ncd test\n\nHAVE_UWP=1\ncat<<EOF > is-ucrt.c\n#include <corecrt.h>\n#if __MSVCRT_VERSION__ < 0x1400 && !defined(_UCRT)\n#error not ucrt\n#endif\nEOF\nANY_ARCH=$(echo $ARCHS | awk '{print $1}')\nif ! $ANY_ARCH-w64-mingw32-gcc$TOOLEXT -E is-ucrt.c > /dev/null 2>&1; then\n    # If the default CRT isn't UCRT, we can't build for mingw32uwp.\n    unset HAVE_UWP\nfi\nrm -f is-ucrt.c\n\nif (echo \"int main(){}\" | $ANY_ARCH-w64-mingw32-gcc$TOOLEXT -x c++ - -o has-cfguard-test.exe -mguard=cf); then\n    if llvm-readobj$TOOLEXT --coff-load-config has-cfguard-test.exe | grep -q 'CF_INSTRUMENTED (0x100)'; then\n        HAVE_CFGUARD=1\n    elif [ -n \"$HAVE_CFGUARD\" ]; then\n        echo \"error: Toolchain doesn't seem to include Control Flow Guard support.\" 1>&2\n        rm -f has-cfguard-test.exe\n        exit 1\n    fi\n    rm -f has-cfguard-test.exe\nelif [ -n \"$HAVE_CFGUARD\" ]; then\n    echo \"error: Toolchain doesn't seem to include Control Flow Guard support.\" 1>&2\n    exit 1\nfi\n\n: ${TARGET_OSES:=${TOOLCHAIN_TARGET_OSES-$DEFAULT_OSES}}\n\nif [ -z \"$RUN_X86_64\" ] && [ -z \"$RUN_I686\" ]; then\n    case $(uname) in\n    MINGW*|MSYS*)\n        NATIVE_X86=1\n        RUN_X86_64=true\n        RUN_I686=true\n        ;;\n    *)\n        case $(uname -m) in\n        x86_64)\n            : ${RUN_X86_64:=wine}\n            : ${RUN_I686:=wine}\n            ;;\n        esac\n        ;;\n    esac\nfi\n\n\nfor arch in $ARCHS; do\n    case $arch in\n    i686)\n        RUN=\"$RUN_I686\"\n        COPY=\"$COPY_I686\"\n        NATIVE=\"$NATIVE_X86\"\n        HAVE_SANITIZERS=1\n        ;;\n    x86_64)\n        RUN=\"$RUN_X86_64\"\n        COPY=\"$COPY_X86_64\"\n        NATIVE=\"$NATIVE_X86\"\n        HAVE_SANITIZERS=1\n        ;;\n    armv7)\n        RUN=\"$RUN_ARMV7\"\n        COPY=\"$COPY_ARMV7\"\n        NATIVE=\"$NATIVE_ARMV7\"\n        unset HAVE_SANITIZERS\n        ;;\n    aarch64)\n        RUN=\"$RUN_AARCH64\"\n        COPY=\"$COPY_AARCH64\"\n        NATIVE=\"$NATIVE_AARCH64\"\n        unset HAVE_SANITIZERS\n        ;;\n    esac\n\n    TARGET=all\n    if [ -n \"$RUN\" ] && [ \"$RUN\" != \"false\" ]; then\n        TARGET=test\n        if [ \"$RUN\" = \"true\" ]; then\n            unset RUN\n        fi\n    fi\n    COPYARG=\"\"\n    if [ -n \"$COPY\" ]; then\n        COPYARG=\"COPY=$COPY\"\n    fi\n\n    TEST_DIR=\"$arch\"\n    [ -z \"$CLEAN\" ] || rm -rf $TEST_DIR\n    mkdir -p $TEST_DIR\n    cd $TEST_DIR\n    $MAKE -f ../Makefile ARCH=$arch HAVE_UWP=$HAVE_UWP HAVE_CFGUARD=$HAVE_CFGUARD HAVE_SANITIZERS=$HAVE_SANITIZERS NATIVE=$NATIVE RUNTIMES_SRC=$PREFIX/$arch-w64-mingw32/bin clean\n    $MAKE -f ../Makefile ARCH=$arch HAVE_UWP=$HAVE_UWP HAVE_CFGUARD=$HAVE_CFGUARD HAVE_SANITIZERS=$HAVE_SANITIZERS NATIVE=$NATIVE RUNTIMES_SRC=$PREFIX/$arch-w64-mingw32/bin RUN=\"$RUN\" $COPYARG $MAKEOPTS -j$CORES $TARGET\n    cd ..\ndone\necho All tests succeeded\n"
        },
        {
          "name": "strip-llvm.sh",
          "type": "blob",
          "size": 4.2099609375,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2018 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -e\n\nunset HOST\n\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n    --host=*)\n        HOST=\"${1#*=}\"\n        ;;\n    *)\n        PREFIX=\"$1\"\n        ;;\n    esac\n    shift\ndone\nif [ -z \"$PREFIX\" ]; then\n    echo $0 [--host=triple] dir\n    exit 1\nfi\ncd \"$PREFIX\"\n\nif [ -n \"$FULL_LLVM\" ]; then\n    exit 0\nfi\n\nif [ -n \"$HOST\" ]; then\n    case $HOST in\n    *-mingw32)\n        EXEEXT=.exe\n        ;;\n    esac\nfi\n\ncase $(uname) in\nMINGW*)\n    EXEEXT=.exe\n    ;;\nesac\n\ncd bin\nfor i in amdgpu-arch bugpoint c-index-test clang-* clangd clangd-* darwin-debug diagtool dsymutil find-all-symbols git-clang-format hmaptool ld64.lld* llc lldb-* lli llvm-* modularize nvptx-arch obj2yaml opt pp-trace sancov sanstats scan-build scan-view split-file verify-uselistorder wasm-ld yaml2obj libclang.dll *LTO.dll *Remarks.dll *.bat; do\n    basename=$i\n    if [ -n \"$EXEEXT\" ]; then\n        # Some in the list are expanded globs, some are plain names we list.\n        basename=${i%$EXEEXT}\n        i=$basename\n        if [ -e $basename$EXEEXT ]; then\n            i=$basename$EXEEXT\n        fi\n    fi\n    # Basename has got $EXEEXT stripped, but any other suffix kept intact.\n    case $basename in\n    *.sh)\n        ;;\n    clang++|clang-*.*|clang-cpp)\n        ;;\n    clang-format|git-clang-format)\n        ;;\n    clangd)\n        ;;\n    clang-scan-deps)\n        ;;\n    clang-tidy)\n        ;;\n    clang-target-wrapper*)\n        ;;\n    clang-*)\n        suffix=\"${basename#*-}\"\n        # Test removing all numbers from the suffix; if it is empty, the suffix\n        # was a plain number (as if the original name was clang-7); if it wasn't\n        # empty, remove the tool.\n        if [ \"$(echo $suffix | tr -d '[0-9]')\" != \"\" ]; then\n            rm -f $i\n        fi\n        ;;\n    llvm-ar|llvm-cvtres|llvm-dlltool|llvm-nm|llvm-objdump|llvm-ranlib|llvm-rc|llvm-readobj|llvm-strings|llvm-pdbutil|llvm-objcopy|llvm-strip|llvm-cov|llvm-profdata|llvm-addr2line|llvm-symbolizer|llvm-wrapper|llvm-windres|llvm-ml|llvm-readelf|llvm-size|llvm-cxxfilt)\n        ;;\n    ld64.lld|wasm-ld)\n        if [ -e $i ]; then\n            rm $i\n        fi\n        ;;\n    lldb|lldb-server|lldb-argdumper|lldb-instr|lldb-mi|lldb-vscode|lldb-dap)\n        ;;\n    *)\n        if [ -f $i ]; then\n            rm $i\n        elif [ -L $i ] && [ ! -e $(readlink $i) ]; then\n            # Remove dangling symlinks\n            rm $i\n        fi\n        ;;\n    esac\ndone\nif [ -n \"$EXEEXT\" ]; then\n    # Convert ld.lld from a symlink to a regular file, so we can remove\n    # the one it points to. On MSYS, and if packaging built toolchains\n    # in a zip file, symlinks are converted into copies.\n    if [ -L ld.lld$EXEEXT ]; then\n        cp ld.lld$EXEEXT tmp\n        rm ld.lld$EXEEXT\n        mv tmp ld.lld$EXEEXT\n    fi\n    # lld-link isn't used normally, but can be useful for debugging/testing,\n    # and is kept in unix setups. Removing it when packaging for windows,\n    # to conserve space.\n    rm -f lld$EXEEXT lld-link$EXEEXT\n    # Remove superfluous frontends; these aren't really used.\n    rm -f clang-cpp* clang++*\nfi\ncd ..\nrm -rf libexec\ncd share\ncd clang\nfor i in *; do\n    case $i in\n    clang-format*)\n        ;;\n    *)\n        rm -rf $i\n        ;;\n    esac\ndone\ncd ..\nrm -rf opt-viewer scan-build scan-view\nrm -rf man/man1/scan-build*\ncd ..\ncd include\nrm -rf clang clang-c clang-tidy lld llvm llvm-c lldb\ncd ..\ncd lib\nrm -f *.dll.a\nrm -f lib*.a\nfor i in *.so* *.dylib* cmake; do\n    case $i in\n    liblldb*|libclang-cpp*|libLLVM*)\n        ;;\n    *)\n        rm -rf $i\n        ;;\n    esac\ndone\ncd ..\n"
        },
        {
          "name": "test-libcxx-module.sh",
          "type": "blob",
          "size": 1.9384765625,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2024 Martin Storsjo\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nset -ex\n\nif [ $# -lt 1 ]; then\n    echo $0 prefix\n    exit 1\nfi\nPREFIX=\"$1\"\nPREFIX=\"$(cd \"$PREFIX\" && pwd)\"\nexport PATH=$PREFIX/bin:$PATH\n\n: ${ARCHS:=${TOOLCHAIN_ARCHS-i686 x86_64 armv7 aarch64}}\n\ncase $(uname) in\nMINGW*|MSYS*)\n    NATIVE=1\n    ;;\n*)\nesac\n\nfor arch in $ARCHS; do\n    # TODO: This should ideally use \"$CXX -print-file-name=libc++.modules.json\", then parse the json to find the relevant cppm file and include directory.\n    $arch-w64-mingw32-clang++ -I$PREFIX/share/libc++/v1 -std=gnu++23 -Wno-reserved-module-identifier -x c++-module -fmodule-output=std.pcm -o std.cppm.obj -c $PREFIX/share/libc++/v1/std.cppm\n    $arch-w64-mingw32-clang++ -I$PREFIX/share/libc++/v1 -std=gnu++23 -Wno-reserved-module-identifier -x c++-module -fmodule-output=std.compat.pcm -fmodule-file=std=std.pcm -o std.compat.cppm.obj -c $PREFIX/share/libc++/v1/std.compat.cppm\n    $arch-w64-mingw32-clang-scan-deps -format=p1689 -- $arch-w64-mingw32-clang++ -std=c++23 -c test/test-scan-deps.cpp -DEXPECT_$arch\ndone\n\nif [ -n \"$NATIVE\" ]; then\n    # Test the unprefixed clang-scan-deps wrapper.\n    clang-scan-deps -format=p1689 -- clang++ -std=c++23 -c test/test-scan-deps.cpp -DEXPECT_$(clang++ -dumpmachine | sed 's/-.*//')\nfi\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrappers",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}