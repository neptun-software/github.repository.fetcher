{
  "metadata": {
    "timestamp": 1736710080689,
    "page": 701,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jiangwenyuan/nuster",
      "stars": 1912,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.6865234375,
          "content": "FreeBSD_task:\n  freebsd_instance:\n    matrix:\n      image_family: freebsd-12-1\n  only_if: $CIRRUS_BRANCH =~ 'master|next'\n  install_script:\n    - pkg update -f && pkg upgrade -y && pkg install -y openssl git gmake lua53 socat\n  script:\n    - git clone https://github.com/VTest/VTest.git ../vtest\n    - make -C ../vtest\n    - gmake CC=clang V=1 ERR=1 TARGET=freebsd USE_ZLIB=1 USE_PCRE=1 USE_OPENSSL=1 USE_LUA=1 LUA_INC=/usr/local/include/lua53 LUA_LIB=/usr/local/lib LUA_LIB_NAME=lua-5.3\n    - ./haproxy -vv\n    - ldd haproxy\n    - env VTEST_PROGRAM=../vtest/vtest gmake reg-tests REGTESTS_TYPES=default,bug,devel || (for folder in /tmp/*regtest*/vtc.*; do cat $folder/INFO $folder/LOG; done && exit 1)\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.041015625,
          "content": "SUBVERS export-subst\nVERDATE export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.859375,
          "content": "# Below we forbid everything and only allow what we know, that's much easier\n# than blocking about 500 different test files and bug report outputs.\n/.*\n/*\n!/.cirrus.yml\n!/.gitattributes\n!/.github\n!/.gitignore\n!/.travis.yml\n!/CHANGELOG\n!/LICENSE\n!/BRANCHES\n!/Makefile\n!/README\n!/INSTALL\n!/CONTRIBUTING\n!/MAINTAINERS\n!/ROADMAP\n!/SUBVERS\n!/VERDATE\n!/VERSION\n!/contrib\n!/doc\n!/ebtree\n!/examples\n!/include\n!/src\n!/tests\n!/debian\n!/scripts\n!/reg-tests\n# Reject some generic files\n*.o\n*.a\n*~\n*.rej\n*.orig\n*.bak\n# And reject some specific files\n/contrib/base64/base64rev\n/contrib/halog/halog\n/contrib/ip6range/ip6range\n/contrib/iprange/iprange\n/contrib/systemd/haproxy.service\n/contrib/spoa_example/spoa\ncontrib/debug/flags\ncontrib/mod_defender/defender\ncontrib/modsecurity/modsecurity\ncontrib/hpack/decode\ncontrib/hpack/gen-rht\ncontrib/tcploop/tcploop\n/src/dlmalloc.c\n/tests/test_hashes\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.390625,
          "content": "# build status appears on https://travis-ci.com/haproxy/haproxy\n\ndist: focal\n\nlanguage: c\n\nbranches:\n  only:\n    - master\n    - next\n\nenv:\n  global:\n    - FLAGS=\"USE_ZLIB=1 USE_PCRE=1 USE_PCRE_JIT=1 USE_LUA=1 USE_OPENSSL=1 USE_SYSTEMD=1 USE_WURFL=1 WURFL_INC=contrib/wurfl WURFL_LIB=contrib/wurfl USE_DEVICEATLAS=1 DEVICEATLAS_SRC=contrib/deviceatlas USE_51DEGREES=1\"\n    - TMPDIR=/tmp\n    - FIFTYONEDEGREES_SRC=\"contrib/51d/src/pattern\"\n    - DEBUG_OPTIONS=\"DEBUG_STRICT=1\"\n\naddons:\n  apt:\n    update: true\n    packages: [ liblua5.3-dev, libsystemd-dev, libpcre2-dev, clang-9, socat, ninja-build, libpcre3-dev ]\n\ncache:\n  directories:\n  - download-cache\n  - ${HOME}/opt\n\nmatrix:\n  include:\n  - os: linux\n    arch: ppc64le\n    if: type == cron\n    compiler: gcc\n    env: TARGET=linux-glibc OPENSSL_VERSION=1.0.2u\n    name: openssl-1.0.2\n  - os: linux\n    arch: arm64\n    if: type == push\n    compiler: clang\n    env: TARGET=linux-glibc CC=clang-9\n    name: openssl-1.1.1\n  - os: linux\n    arch: s390x\n    if: type == push\n    compiler: gcc\n    env: TARGET=linux-glibc\n    name: openssl-1.1.1\n  - os: linux\n    if: type == cron\n    compiler: clang\n    env: TARGET=linux-glibc OPENSSL_VERSION=1.1.0l FIFTYONEDEGREES_SRC=\"contrib/51d/src/trie\" CC=clang-9\n    name: openssl-1.1.1 | 51d trie\n  - os: linux\n    env: DEBUG_OPTIONS=\"\"\n    if: type == cron\n    compiler: clang\n    env: TARGET=linux-glibc LIBRESSL_VERSION=3.0.2 CC=clang-9\n    name: libressl-3.0.2 | ERR=\n  - os: linux\n    if: type == cron\n    compiler: clang\n    env: TARGET=linux-glibc FLAGS=\"USE_SLZ=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_LUA=1 USE_OPENSSL=1 USE_SYSTEMD=1 USE_WURFL=1 WURFL_INC=contrib/wurfl WURFL_LIB=contrib/wurfl USE_51DEGREES=1\" CC=clang-9\n    before_script:\n      - git clone https://github.com/wtarreau/libslz\n      - cd libslz && make && make PREFIX=${HOME}/opt install && cd ..\n      - export SLZ_INC=${HOME}/opt/include SLZ_LIB=${HOME}/opt/lib\n      - export ADDLIB=\"-Wl,-rpath,$SLZ_LIB\"\n    name: openssl-1.1.1 | slz | pcre2\n\ninstall:\n  - git clone https://github.com/VTest/VTest.git ../vtest\n  # Special flags due to: https://github.com/vtest/VTest/issues/12\n  - make -C ../vtest FLAGS=\"-O2 -s -Wall\"\n  - |\n    if [ ! -z ${OPENSSL_VERSION+x} ] || [ ! -z ${LIBRESSL_VERSION+x} ] || [ ! -z ${BORINGSSL+x} ]; then\n       travis_wait bash -c 'scripts/build-ssl.sh >build-ssl.log 2>&1' || (cat build-ssl.log && exit 1)\n       export SSL_LIB=${HOME}/opt/lib SSL_INC=${HOME}/opt/include\n       export ADDLIB=\"-Wl,-rpath,$SSL_LIB\"\n    fi\n\nscript:\n  - if [ \"${CC%-*}\"  = \"clang\" ]; then export FLAGS=\"$FLAGS USE_OBSOLETE_LINKER=1\" DEBUG_CFLAGS=\"-g -fsanitize=address\" LDFLAGS=\"-fsanitize=address\" ASAN_OPTIONS=\"log_path=asan.log\"; fi\n  - make -C contrib/wurfl\n  - make -j3 CC=$CC CPU_CFLAGS.generic=\"-O1\" V=1 ERR=1 TARGET=$TARGET $FLAGS DEBUG_CFLAGS=\"$DEBUG_CFLAGS\" LDFLAGS=\"$LDFLAGS\" ADDLIB=\"$ADDLIB\" SSL_LIB=\"$SSL_LIB\" SSL_INC=\"$SSL_INC\" SLZ_LIB=\"$SLZ_LIB\" SLZ_INC=\"$SLZ_INC\" 51DEGREES_SRC=\"$FIFTYONEDEGREES_SRC\" EXTRA_OBJS=\"$EXTRA_OBJS\" $DEBUG_OPTIONS\n  - ./haproxy -vv\n  - if [ \"${TRAVIS_OS_NAME}\" = \"linux\" ]; then ldd haproxy; fi\n  - if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then otool -L haproxy; fi\n  - make reg-tests VTEST_PROGRAM=../vtest/vtest REGTESTS_TYPES=default,bug,devel\n  - |\n    if ls asan.log* 1>/dev/null 2>&1; then\n       cat asan.log*\n       exit 1\n    fi\n\nafter_failure:\n  - |\n    for folder in ${TMPDIR}/*regtest*/vtc.*; do\n      cat $folder/INFO\n      cat $folder/LOG\n    done\n"
        },
        {
          "name": "BRANCHES",
          "type": "blob",
          "size": 13.7158203125,
          "content": "HAProxy branches and life cycle\n===============================\n\nThe HAProxy project evolves quickly to stay up to date with modern features\nfound in web environments but also takes a great care of addressing bugs which\nmay affect deployed versions without forcing such users to upgrade when not\nneeded. For this reason the project is developed in branches.\n\nA branch is designated as two numbers separated by a dot, for example \"1.8\".\nThis numbering is historical. Each new development cycle increases the second\ndigit by one, and after it reaches '9' it goes back to zero and the first digit\nincreases by one. It effectively grows as a decimal number increased by 0.1 per\nversion.\n\nThe complete version is made of the branch suffixed with \"-dev\" followed by a\nsequence number during development, then by \".\" followed by a number when the\ndevelopment of that branch is finished and the branch enters a maintenance\nphase. The first release of a branch starts at \".0\". Immediately after \".0\" is\nissued, the next branch is created as \"-dev0\" as an exact copy of the previous\nbranch's \".0\" version. Thus we observe the following development sequence:\n\n ... 1.9-dev10 -> 1.9-dev11 -> 1.9.0 -> 2.0-dev0 -> 2.0-dev1 ... 2.0 -> ...\n\nOccasionally a series of \"-rc\" versions may be emitted between the latest -dev\nand the release to mark the end of development and start of stabilizing, though\nit's mostly a signal send to users that the release is approaching rather than\na change in the cycle as it is always hard to categorize patches.\n\nVery often the terms \"branch\" and \"version\" will be used interchangeably with\nonly the first two digits to designate \"the latest version of that branch\". So\nwhen someone asks you \"Could you please try the same on 1.8\", it means \"1.8.X\"\nwith X as high as possible, thus for example 1.8.20 if this one is available at\nthis moment.\n\nDuring the maintenance phase, a maintenance branch is created for the just\nreleased version. The development version remains in the development branch\ncalled \"master\", or sometimes \"-dev\". If branches are represented vertically\nand time horizontally, this will look like this:\n\n                     versions                                       branch\n  1.9-dev10  1.9-dev11  1.9.0  2.0-dev0  2.0-dev1  2.0-dev2\n   ----+--------+---------+-------+---------+---------+---------->  master\n                           \\\n                            \\          1.9.1         1.9.2\n                             `-----------+-------------+--------->   1.9\n\nEach released version (e.g. 1.9.0 above) appears once in the master branch so\nthat it is easy to list history of changes between versions.\n\nBefore version 1.4, development and maintenance were inter-mixed in the same\nbranch, which resulted in latest maintenance branches becoming unstable after\nsome point. This is why versions 1.3.14 and 1.3.15 became maintenance branches\non their own while the development pursued on 1.3 to stabilize again in the\nlatest versions.\n\nStarting with version 1.4.0, a rule has been set not to create new features\ninto a maintenance branch. It was not well respected and still created trouble\nwith certain 1.4 versions causing regressions and confusing users.\n\nSince 1.5.0 this \"no new feature\" rule has become strict and maintenance\nversions only contain bug fixes that are necessary in this branch. This means\nthat any version X.Y.Z is necessarily more stable than X.Y.W with W<Z.\n\nFor this reason there is absolutely no excuse for not updating a version within\nyour branch, as your version necessarily contains bugs that are fixed in any\nlater version in that same branch. Obviously when a branch is just released,\nthere will be some occasional bugs. And once in a while a fix for a recently\ndiscovered bug may have an undesired side effect called a regression. This must\nnever happen but this will happen from time to time, especially on recently\nreleased versions. This is often presented as an excuse by some users for not\nupdating but this is wrong, as the risk staying with an older version is much\nhigher than the risk of updating. If you fear there could be an issue with an\nupdate because you don't completely trust the version in your branch, it simply\nmeans you're using the wrong branch and need an older one.\n\nWhen a bug is reported in a branch, developers will systematically ask if the\nbug is present in the latest version of this branch (since developers don't\nlike to work on bugs that were already fixed). It's a good practice to perform\nthe update yourself and to test again before reporting the bug. Note, as long\nas you're using a supported branch, as indicated on the haproxy.org web site,\nyou don't need to upgrade to another branch to report a bug. However from time\nto time it may happen that a developer will ask you if you can try it in order\nto help narrow the problem down. But this will never be a requirement, just a\nquestion.\n\nOnce a bug is understood, it is tested on the development branch and fixed\nthere. Then the fix will be applied in turn to older branches, jumping from\none to the other in descending order. For example:\n\n               FIX\n     2.0-dev4  HERE       2.0-dev5     2.0-dev6\n   -----+-------V-------------+-----------+--------------> master\n   1.9.4         \\      1.9.5     1.9.6         1.9.7\n   --+------------o-------+---------+-------------+------> 1.9\n      1.8.18       \\          1.8.19         1.8.20\n   -----+-----------o------------+-------------+---------> 1.8\n\nThis principle ensures that you will always have a safe upgrade path from an\nolder branch to a newer: under no circumstances a bug that was already fixed\nin an older branch will still be present in a newer one. In the diagram above,\na bug reported for 1.8.18 would be fixed between 2.0-dev4 and 2.0-dev5. The\nfix will be backported into 1.9 and from there into 1.8. 1.9.5 will be issued\nwith the fix before 1.8.19 will be issued. This guarantees that for any version\n1.8 having the fix, there always exists a version 1.9 with it as well. So if\nyou would upgrade to 1.8.19 to benefit from the fix and the next day decide\nthat for whatever new feature you need to upgrade to 1.9, you'll have 1.9.5\navailable with the same set of fixes so you will not reintroduce a previously\nfixed problem.\n\nIn practice, it takes longer to release older versions than newer ones. There\nare two reasons to this. One is technical: the fixes often require some\nadaptations to be done for older versions. The other reason is stability: in\nspite of the great care and the tests, there is always a faint risk that a fix\nintroduces a regression. By leaving fixes exposed in more recent versions\nbefore appearing in older ones, there is a much smaller probability that such a\nregression remains undetected when the next version of the older branch is\nissued.\n\nSo the rule for the best stability is very simple:\n\n    STICK TO THE BRANCH THAT SUITS YOUR NEEDS AND APPLY ALL UPDATES.\n\nWith other projects, some people developed a culture of backporting only a\nselection of fixes into their own maintenance branch. Usually they consider\nthese fixes are critical, or security-related only. THIS IS TERRIBLY WRONG.\nIt is already very difficult for the developers who made the initial patch to\nfigure if and how it must be backported to an older branch, what extra patches\nit depends on to be safe, as you can imagine it is impossible for anyone else\nto make a safe guess about what to pick.\n\n     A VERSION WHICH ONLY CONTAINS A SELECTION OF FIXES IS WAY MORE\n     DANGEROUS AND LESS STABLE THAN ONE WITHOUT ANY OF THESE FIXES.\n\nBranches up to 1.8 are all designated as \"long-term supported\" (\"LTS\" for\nshort), which means that they are maintained for several years after the\nrelease. These branches were emitted at a pace of one per year since 1.5 in\n2014. As of 2019, 1.5 is still supported and widely used, eventhough it very\nrarely receives updates. After a few years these LTS branches enter a\n\"critical fixes only\" status, which means that they will rarely receive a fix\nbut if that a critital issue affects them, a release will be made, with or\nwithout any other fix. Once a version is not supported anymore, it will not\nreceive any fix at all and it will really be time for you to upgrade to a more\nrecent branch. Please note that even when an upgrade is needed, a great care is\ngiven to backwards compatibility so that most configs written for version 1.1\nstill work with little to no modification 16 years later on version 2.0.\n\nSince 1.9, the release pacing has increased to match faster moving feature sets\nand a faster stabilization of the technical foundations. The principle is now\nthe following:\n  - one release is emitted between October and December, with an odd version\n    number (such as \"1.9\"). This version heavily focuses on risky changes that\n    are considered necessary to develop new features. It can for example bring\n    nice performance improvements as well as invisible changes that will serve\n    later ; these versions will only be emitted for developers and highly\n    skilled users. They will not be maintained for a long time, they will\n    receive updates for 12 to 18 months only after which they will be marked\n    End-Of-Life (\"EOL\" for short). They may receive delicate fixes during their\n    maintenance cycle so users have to be prepared to see some breakage once in\n    a while as fixes are stabilizing. THESE VERSIONS MUST ABSOLUTELY NOT BE\n    PACKAGED BY OPERATING SYSTEM VENDORS.\n\n  - one release is emitted between May and June, with an even version number\n    (such as \"2.0\"). This version mostly relies on the technical foundations\n    brought by the previous release and tries hard not to apply risky changes.\n    Instead it will bring new user-visible features. Such versions will be\n    long-term supported and may be packaged by operating system vendors.\n\nThis development model provides better stability for end users and better\nfeedback for developers:\n  - regular users stick to LTS versions which rely on the same foundations\n    as the previous releases that had 6 months to stabilize. In terms of\n    stability it really means that the point zero version already accumulated\n    6 months of fixes and that it is much safer to use even just after it is\n    released.\n\n  - for developers, given that the odd versions are solely used by highly\n    skilled users, it's easier to get advanced traces and captures, and there\n    is less pressure during bug reports because there is no doubt the user is\n    autonomous and knows how to work around the issue or roll back to the last\n    working version.\n\nThus the release cycle from 1.8 to 2.2 should look like this:\n\n 1.8.0           1.9.0           2.0.0          2.1.0          2.2.0\n --+---------------+---------------+--------------+--------------+----> master\n    \\               \\               \\              \\              \\\n     \\               \\               \\              \\              `--> 2.2 LTS\n      \\               \\               \\              `--+--+--+---+---> 2.1\n       \\               \\               `----+-----+------+-------+----> 2.0 LTS\n        \\               `--+-+-+--+---+------+--------+-----|  EOL      1.9\n         `---+---+---+-----+-------+-----------+---------------+------> 1.8 LTS\n\nIn short the non-LTS odd releases can be seen as technological previews of the\nnext feature release, and will be terminated much earlier. The plan is to barely\nlet them overlap with the next non-LTS release, allowing advanced users to\nalways have the choice between the last two major releases.\n\nWith all this in mind, what version should you use ? It's quite simple:\n  - if you're a first-time HAProxy user, just use the version provided by your\n    operating system. Just take a look at the \"known bugs\" section on the\n    haproxy.org web site to verify that it's not affected by bugs that could\n    have an impact for you.\n\n  - if you don't want or cannot use the version shipped with your operating\n    system, it is possible that other people (including the package maintainer)\n    provide alternate versions. This is the case for Debian and Ubuntu for\n    example, where you can choose your distribution and pick the branch you\n    need here: https://haproxy.debian.net/\n\n  - if you want to build with specific options, apply some patches, you'll\n    have to build from sources. If you have little experience or are not\n    certain to devote regular time to perform this task, take an \"old\" branch\n    (i.e. 1-2 years old max, for example 1.8 when 2.0 is emitted). You'll avoid\n    most bugs and will not have to work too often to update your local version.\n\n  - if you need a fresh version for application development, or to benefit from\n    latest improvements, take the most recent version of the most recent branch\n    and keep it up to date. You may even want to use the Git version or nightly\n    snapshots.\n\n  - if you want to develop on HAProxy, use the master from the Git tree.\n\n  - if you want to follow HAProxy's development by doing some tests without\n    the burden of entering too much into the development process, just use the\n    -dev versions of the master branch. At some point you'll feel the urge to\n    switch to the Git version anyway as it will ultimately simplify your work.\n\n  - if you're installing it on unmanaged servers with little to no hostile\n    exposure, or your home router, you should pick the latest version in one\n    of the oldest supported branches. While it doesn't guarantee that you will\n    never have to upgrade it, at least as long as you don't use too complex a\n    setup, it's unlikely that you will need to update it often.\n\nAnd as a general rule, do not put a non-LTS version on a server unless you are\nabsolutely certain you are going to keep it up to date yourself and already\nplan to replace it once the following LTS version is issued. If you are not\ngoing to manage updates yourself, use pre-packaged versions exclusively and do\nnot expect someone else to have to deal with the burden of building from\nsources.\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 885.310546875,
          "content": "ChangeLog :\n===========\n\n2021/01/06 : 2.4-dev5\n    - BUG/MEDIUM: mux_h2: Add missing braces in h2_snd_buf()around trace+wakeup\n    - BUILD: hpack: hpack-tbl-t.h uses VAR_ARRAY but does not include compiler.h\n    - MINOR: time: increase the minimum wakeup interval to 60s\n    - MINOR: check: do not ignore a connection header for http-check send\n    - REGTESTS: complete http-check test\n    - CI: travis-ci: drop coverity scan builds\n    - MINOR: atomic: don't use ; to separate instruction on aarch64.\n    - IMPORT: xxhash: update to v0.8.0 that introduces stable XXH3 variant\n    - MEDIUM: xxhash: use the XXH3 functions to generate 64-bit hashes\n    - MEDIUM: xxhash: use the XXH_INLINE_ALL macro to inline all functions\n    - CLEANUP: xxhash: remove the unused src/xxhash.c\n    - MINOR: sample: add the xxh3 converter\n    - REGTESTS: add tests for the xxh3 converter\n    - MINOR: protocol: Create proto_quic QUIC protocol layer.\n    - MINOR: connection: Attach a \"quic_conn\" struct to \"connection\" struct.\n    - MINOR: quic: Redefine control layer callbacks which are QUIC specific.\n    - MINOR: ssl_sock: Initialize BIO and SSL objects outside of ssl_sock_init()\n    - MINOR: connection: Add a new xprt to connection.\n    - MINOR: ssl: Export definitions required by QUIC.\n    - MINOR: cfgparse: Do not modify the QUIC xprt when parsing \"ssl\".\n    - MINOR: tools: Add support for QUIC addresses parsing.\n    - MINOR: quic: Add definitions for QUIC protocol.\n    - MINOR: quic: Import C source code files for QUIC protocol.\n    - MINOR: listener: Add QUIC info to listeners and receivers.\n    - MINOR: server: Add QUIC definitions to servers.\n    - MINOR: ssl: SSL CTX initialization modifications for QUIC.\n    - MINOR: ssl: QUIC transport parameters parsing.\n    - MINOR: quic: QUIC socket management finalization.\n    - MINOR: cfgparse: QUIC default server transport parameters init.\n    - MINOR: quic: Enable the compilation of QUIC modules.\n    - MAJOR: quic: Make usage of ebtrees to store QUIC ACK ranges.\n    - MINOR: quic: Attempt to make trace more readable\n    - MINOR: quic: Make usage of the congestion control window.\n    - MINOR: quic: Flag RX packet as ack-eliciting from the generic parser.\n    - MINOR: quic: Code reordering to help in reviewing/modifying.\n    - MINOR: quic: Add traces to congestion avoidance NewReno callback.\n    - MINOR: quic: Display the SSL alert in ->ssl_send_alert() callback.\n    - MINOR: quic: Update the initial salt to that of draft-29.\n    - MINOR: quic: Add traces for in flght ack-eliciting packet counter.\n    - MINOR: quic: make a packet build fails when qc_build_frm() fails.\n    - MINOR: quic: Add traces for quic_packet_encrypt().\n    - MINOR: cache: Refactoring of secondary_key building functions\n    - MINOR: cache: Avoid storing responses whose secondary key was not correctly calculated\n    - BUG/MINOR: cache: Manage multiple headers in accept-encoding normalization\n    - MINOR: cache: Add specific secondary key comparison mechanism\n    - MINOR: http: Add helper functions to trim spaces and tabs\n    - MEDIUM: cache: Manage a subset of encodings in accept-encoding normalizer\n    - REGTESTS: cache: Simplify vary.vtc file\n    - REGTESTS: cache: Add a specific test for the accept-encoding normalizer\n    - MINOR: cache: Remove redundant test in http_action_req_cache_use\n    - MINOR: cache: Replace the \"process-vary\" option's expected values\n    - CI: GitHub Actions: enable daily Coverity scan\n    - BUG/MEDIUM: cache: Fix hash collision in `accept-encoding` handling for `Vary`\n    - MEDIUM: stick-tables: Add srvkey option to stick-table\n    - REGTESTS: add test for stickiness using \"srvkey addr\"\n    - BUILD: Makefile: disable -Warray-bounds until it's fixed in gcc 11\n    - BUG/MINOR: sink: Return an allocation failure in __sink_new if strdup() fails\n    - BUG/MINOR: lua: Fix memory leak error cases in hlua_config_prepend_path\n    - MINOR: lua: Use consistent error message 'memory allocation failed'\n    - CLEANUP: Compare the return value of `XXXcmp()` functions with zero\n    - CLEANUP: Apply the coccinelle patch for `XXXcmp()` on include/\n    - CLEANUP: Apply the coccinelle patch for `XXXcmp()` on contrib/\n    - MINOR: qpack: Add static header table definitions for QPACK.\n    - CLEANUP: qpack: Wrong comment about the draft for QPACK static header table.\n    - CLEANUP: quic: Remove useless QUIC event trace definitions.\n    - BUG/MINOR: quic: Possible CRYPTO frame building errors.\n    - MINOR: quic: Pass quic_conn struct to frame parsers.\n    - BUG/MINOR: quic: Wrong STREAM frames parsing.\n    - MINOR: quic: Drop packets with STREAM frames with wrong direction.\n    - CLEANUP: ssl: Remove useless loop in tlskeys_list_get_next()\n    - CLEANUP: ssl: Remove useless local variable in tlskeys_list_get_next()\n    - MINOR: ssl: make tlskeys_list_get_next() take a list element\n    - Revert \"BUILD: Makefile: disable -Warray-bounds until it's fixed in gcc 11\"\n    - BUG/MINOR: cfgparse: Fail if the strdup() for `rule->be.name` for `use_backend` fails\n    - CLEANUP: mworker: remove duplicate pointer tests in cfg_parse_program()\n    - CLEANUP: Reduce scope of `header_name` in http_action_store_cache()\n    - CLEANUP: Reduce scope of `hdr_age` in http_action_store_cache()\n    - CLEANUP: spoe: fix typo on `var_check_arg` comment\n    - BUG/MINOR: tcpcheck: Report a L7OK if the last evaluated rule is a send rule\n    - CI: github actions: build several popular \"contrib\" tools\n    - DOC: Improve the message printed when running `make` w/o `TARGET`\n    - BUG/MEDIUM: server: srv_set_addr_desc() crashes when a server has no address\n    - REGTESTS: add unresolvable servers to srvkey-addr\n    - BUG/MINOR: stats: Make stat_l variable used to dump a stat line thread local\n    - BUG/MINOR: quic: NULL pointer dereferences when building post handshake frames.\n    - SCRIPTS: improve announce-release to support different tag and versions\n    - SCRIPTS: make announce release support preparing announces before tag exists\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUG/MINOR: srv: do not init address if backend is disabled\n    - BUG/MINOR: srv: do not cleanup idle conns if pool max is null\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CLEANUP: few extra typo and fixes over last one (\"ot\" -> \"to\")\n\n2020/12/21 : 2.4-dev4\n    - BUG/MEDIUM: lb-leastconn: Reposition a server using the right eweight\n    - BUG/MEDIUM: mux-h1: Fix a deadlock when a 408 error is pending for a client\n    - BUG/MEDIUM: ssl/crt-list: bad behavior with \"commit ssl cert\"\n    - BUG/MAJOR: cache: Crash because of disabled entry not removed from the tree\n    - BUILD: SSL: fine guard for SSL_CTX_add_server_custom_ext call\n    - MEDIUM: cache: Add a secondary entry counter and insertion limitation\n    - MEDIUM: cache: Avoid going over duplicates lists too often\n    - MINOR: cache: Add a max-secondary-entries cache option\n    - CI: cirrus: drop CentOS 6 builds\n    - BUILD: Makefile: have \"make clean\" destroy .o/.a/.s in contrib subdirs as well\n    - MINOR: vars: replace static functions with global ones\n    - MINOR: opentracing: add ARGC_OT enum\n    - CONTRIB: opentracing: add the OpenTracing filter\n    - DOC: opentracing: add the OpenTracing filter section\n    - REGTESTS: make use of HAPROXY_ARGS and pass -dM by default\n    - BUG/MINOR: http: Establish a tunnel for all 2xx responses to a CONNECT\n    - BUG/MINOR: mux-h1: Don't set CS_FL_EOI too early for protocol upgrade requests\n    - BUG/MEDIUM: http-ana: Never for sending data in TUNNEL mode\n    - CLEANUP: mux-h2: Rename h2s_frt_make_resp_data() to be generic\n    - CLEANUP: mux-h2: Rename h2c_frt_handle_data() to be generic\n    - BUG/MEDIUM: mux-h1: Handle h1_process() failures on a pipelined request\n    - CLEANUP: debug: mark the RNG's seed as unsigned\n    - CONTRIB: halog: fix build issue caused by %L printf format\n    - CONTRIB: halog: mark the has_zero* functions unused\n    - CONTRIB: halog: fix signed/unsigned build warnings on counts and timestamps\n    - CONTRIB: debug: address \"poll\" utility build on non-linux platforms\n    - BUILD: plock: remove dead code that causes a warning in gcc 11\n    - BUILD: ssl: fine guard for SSL_CTX_get0_privatekey call\n    - BUG/MINOR: dns: SRV records ignores duplicated AR records\n    - DOC: fix \"smp_size\" vs \"sample_size\" in \"log\" directive arguments\n    - CLEANUP: assorted typo fixes in the code and comments\n    - DOC: assorted typo fixes in the documentation\n    - CI: codespell: whitelist \"te\" and \"nd\" words\n\n2020/12/11 : 2.4-dev3\n    - MINOR: log: Logging HTTP path only with %HPO\n    - BUG/MINOR: mux-h2/stats: make stream/connection proto errors more accurate\n    - MINOR: traces: add a new level \"error\" below the \"user\" level\n    - MINOR: mux-h2/trace: add traces at level ERROR for protocol errors\n    - BUG/MINOR: mux-h2/stats: not all GOAWAY frames are errors\n    - BUG/MINOR: lua: missing \"\\n\" in error message\n    - BUG/MINOR: lua: lua-load doesn't check its parameters\n    - BUG/MINOR: lua: Post init register function are not executed beyond the first one\n    - BUG/MINOR: lua: Some lua init operation are processed unsafe\n    - MINOR: actions: Export actions lookup functions\n    - MINOR: actions: add a function returning a service pointer from its name\n    - MINOR: cli: add a function to look up a CLI service description\n    - BUG/MINOR: lua: warn when registering action, conv, sf, cli or applet multiple times\n    - MINOR: cache: Improve accept_encoding_normalizer\n    - MINOR: cache: Add entry to the tree as soon as possible\n    - BUG/MINOR: trace: Wrong displayed trace level\n    - BUG/MAJOR: ring: tcp forward on ring can break the reader counter.\n    - MINOR: lua: simplify hlua_alloc() to only rely on realloc()\n    - MEDIUM: lua-thread: use atomics for memory accounting\n    - MINOR: lua-thread: remove struct hlua from function hlua_prepend_path()\n    - MEDIUM: lua-thread: make hlua_post_init() no longer use the runtime execution function\n    - MINOR: lua-thread: hlua_ctx_renew() is never called with main gL lua state\n    - MINOR: lua-thread: Use NULL context for main lua state\n    - MINOR: lua-thread: Stop usage of struct hlua for the global lua state\n    - MINOR: lua-thread: Replace embedded struct hlua_function by a pointer\n    - MINOR: lua-thread: Split hlua_init() function in two parts\n    - MINOR: lua-thread: make hlua_ctx_init() get L from its caller\n    - MINOR: lua-thread: Split hlua_load function in two parts\n    - MINOR: lua-thread: Split hlua_post_init() function in two parts\n    - MINOR: lua-thread: Add the \"thread\" core variable\n    - MEDIUM: lua-thread: No longer use locked context in initialization parts\n    - MEDIUM: lua-thread: Apply lock only if the parent state is the main thread\n    - MINOR: lua-thread: Replace global gL var with an array of states\n    - MINOR: lua-thread: Replace \"struct hlua_function\" allocation by dedicated function\n    - MINOR: lua-thread: Replace state_from by state_id\n    - MINOR: lua-thread: Store each function reference and init reference in array\n    - MEDIUM: lua-thread: Add the lua-load-per-thread directive\n    - MINOR: lua-thread: Add verbosity in errors\n    - REGTESTS: add a test for the threaded Lua code\n    - BUILD/MINOR: haproxy DragonFlyBSD affinity build update.\n    - DOC/MINOR: Fix formatting in Management Guide\n    - MINOR: cache: Do not store stale entry\n    - MINOR: cache: Add extra \"cache-control\" value checks\n    - MEDIUM: cache: Remove cache entry in case of POST on the same resource\n    - MINOR: cache: Consider invalid Age values as stale\n    - BUG/MEDIUM: lua-thread: some parts must be initialized once\n    - BUG/MINOR: lua-thread: close all states on deinit\n    - BUG/MINOR: listener: use sockaddr_in6 for IPv6\n    - BUG/MINOR: mux-h1: Handle keep-alive timeout for idle frontend connections\n    - MINOR: session: Add the idle duration field into the session\n    - MINOR: mux-h1: Update session idle duration when data are received\n    - MINOR: mux-h1: Reset session dates and durations info when the CS is detached\n    - MINOR: logs: Use session idle duration when no stream is provided\n    - MINOR: stream: Always get idle duration from the session\n    - MINOR: stream: Don't retrieve anymore timing info from the mux csinfo\n    - MINOR: mux-h1: Don't provide anymore timing info using cs_info structure\n    - MINOR: muxes: Remove get_cs_info callback function now useless\n    - MINOR: stream: Pass an optional input buffer when a stream is created\n    - MINOR: mux-h1: Add a flag to disable reads to wait opposite side\n    - MEDIUM: mux-h1: Use a h1c flag to block reads when splicing is in-progress\n    - MINOR: mux-h1: Introduce H1C_F_IS_BACK flag on the H1 connection\n    - MINOR: mux-h1: Separate parsing and formatting errors at H1 stream level\n    - MINOR: mux-h1: Split front/back h1 stream creation in 2 functions\n    - MINOR: mux-h1: Add a rxbuf into the H1 stream\n    - MINOR: mux-h1: Don't set CS flags in internal parsing functions\n    - MINOR: mux-h1: Add embryonic and attached states on the H1 connection\n    - MINOR: mux-h1: rework the h1_timeout_task() function\n    - MINOR: mux-h1: Reset more H1C flags when a H1 stream is destroyed\n    - MINOR: mux-h1: Disable reads if an error was reported on the H1 stream\n    - MINOR: mux-h1: Rework how shutdowns are handled\n    - MINOR: mux-h1: Rework h1_refresh_timeout to be easier to read\n    - MINOR: mux-h1: Process next request for IDLE connection only\n    - MINOR: mux-h1: Add a idle expiration date on the H1 connection\n    - MINOR: stick-tables: Add functions to update some values of a tracked counter\n    - MINOR: session: Add functions to increase http values of tracked counters\n    - MINOR: mux: Add a ctl parameter to get the exit status of the multiplexers\n    - MINOR: logs: Get the multiplexer exist status when no stream is provided\n    - MINOR: mux-h1: Add functions to send HTTP errors from the mux\n    - MAJOR: mux-h1: Create the client stream as later as possible\n    - DOC: config: Add notes about errors emitted by H1 mux\n    - CLEANUP: mux-h1: Rename H1C_F_CS_* flags and reorder H1C flags\n    - MINOR: http-ana: Remove useless update of t_idle duration of the stream\n    - CLEANUP: htx: Remove HTX_FL_UPGRADE unsued flag\n    - MEDIUM: http-ana: Don't process partial or empty request anymore\n    - CLEANUP: http-ana: Remove TX_WAIT_NEXT_RQ unsued flag\n    - CLEANUP: connection: Remove CS_FL_READ_PARTIAL flag\n    - REGTESTS: Fix proxy_protocol_tlv_validation\n    - MINOR: http-ana: Properly set message flags from the start-line flags\n    - MINOR: h1-htx/http-ana: Set BODYLESS flag on message in TUNNEL state\n    - MINOR: protocol: add a ->set_port() helper to address families\n    - MINOR: listener: automatically set the port when creating listeners\n    - MINOR: listener: now use a generic add_listener() function\n    - MEDIUM: ssl: fatal error with bundle + openssl < 1.1.1\n    - BUG/MEDIUM: stream: Xfer the input buffer to a fully created stream\n    - BUG/MINOR: stream: Don't use input buffer after the ownership xfer\n    - MINOR: protocol: remove the redundant ->sock_domain field\n    - MINOR: protocol: export protocol definitions\n    - CLEANUP: protocol: group protocol struct members by usage\n    - MINOR: protocol: add a set of ctrl_init/ctrl_close methods for setup/teardown\n    - MINOR: connection: use the control layer's init/close\n    - MINOR: udp: export udp_suspend_receiver() and udp_resume_receiver()\n    - BUG/MAJOR: spoa/python: Fixing return None\n    - DOC: spoa/python: Fixing typo in IP related error messages\n    - DOC: spoa/python: Rephrasing memory related error messages\n    - DOC: spoa/python: Fixing typos in comments\n    - BUG/MINOR: spoa/python: Cleanup references for failed Module Addobject operations\n    - BUG/MINOR: spoa/python: Cleanup ipaddress objects if initialization fails\n    - BUG/MEDIUM: spoa/python: Fixing PyObject_Call positional arguments\n    - BUG/MEDIUM: spoa/python: Fixing references to None\n    - DOC: email change of the DeviceAtlas maintainer\n    - MINOR: cache: Dump secondary entries in \"show cache\"\n    - CLEANUP: connection: use fd_stop_both() instead of conn_stop_polling()\n    - MINOR: stream-int: don't touch polling anymore on shutdown\n    - MINOR: connection: implement cs_drain_and_close()\n    - MINOR: mux-pt: take care of CS_SHR_DRAIN in shutr()\n    - MINOR: checks: use cs_drain_and_close() instead of draining the connection\n    - MINOR: checks: don't call conn_cond_update_polling() anymore\n    - CLEANUP: connection: open-code conn_cond_update_polling() and update the comment\n    - CLEANUP: connection: remove the unused conn_{stop,cond_update}_polling()\n    - BUG/MINOR: http-check: Use right condition to consider HTX message as full\n    - BUG/MINOR: tcpcheck: Don't rearm the check timeout on each read\n    - MINOR: tcpcheck: Only wait for more payload data on HTTP expect rules\n    - BUG/MINOR: tools: make parse_time_err() more strict on the timer validity\n    - BUG/MINOR: tools: Reject size format not starting by a digit\n    - MINOR: action: define enum for timeout type of the set-timeout rule\n    - MINOR: stream: prepare the hot refresh of timeouts\n    - MEDIUM: stream: support a dynamic server timeout\n    - MEDIUM: stream: support a dynamic tunnel timeout\n    - MEDIUM: http_act: define set-timeout server/tunnel action\n    - MINOR: frontend: add client timeout sample fetch\n    - MINOR: backend: add timeout sample fetches\n    - MINOR: stream: add sample fetches\n    - MINOR: stream: add timeout sample fetches\n    - REGTESTS: add regtest for http-request set-timeout\n    - CLEANUP: remove the unused fd_stop_send() in conn_xprt_shutw{,_hard}()\n    - CLEANUP: connection: remove the unneeded fd_stop_{recv,send} on read0/shutw\n    - MINOR: connection: remove sock-specific code from conn_sock_send()\n    - REORG: connection: move the socket iocb (conn_fd_handler) to sock.c\n    - MINOR: protocol: add a ->drain() function at the connection control layer\n    - MINOR: connection: make conn_sock_drain() use the control layer's ->drain()\n    - MINOR: protocol: add a pair of check_events/ignore_events functions at the ctrl layer\n    - MEDIUM: connection: make use of the control layer check_events/ignore_events\n\n2020/12/01 : 2.4-dev2\n    - BUILD: Make DEBUG part of .build_opts\n    - BUILD: Show the value of DEBUG= in haproxy -vv\n    - CI: Set DEBUG=-DDEBUG_STRICT=1 in GitHub Actions\n    - MINOR: stream: Add level 7 retries on http error 401, 403\n    - CLEANUP: remove unused function \"ssl_sock_is_ckch_valid\"\n    - BUILD: SSL: add BoringSSL guarding to \"RAND_keep_random_devices_open\"\n    - BUILD: SSL: do not \"update\" BoringSSL version equivalent anymore\n    - BUG/MEDIUM: http_act: Restore init of log-format list\n    - DOC: better describes how to configure a fallback crt\n    - BUG/MAJOR: filters: Always keep all offsets up to date during data filtering\n    - MINOR: cache: Prepare helper functions for Vary support\n    - MEDIUM: cache: Add the Vary header support\n    - MINOR: cache: Add a process-vary option that can enable/disable Vary processing\n    - BUG/CRITICAL: cache: Fix trivial crash by sending accept-encoding header\n    - BUG/MAJOR: peers: fix partial message decoding\n    - DOC: cache: Add new caching limitation information\n    - DOC: cache: Add information about Vary support\n    - DOC: better document the config file format and escaping/quoting rules\n    - DOC: Clarify %HP description in log-format\n    - CI: github actions: update LibreSSL to 3.3.0\n    - CI: github actions: enable 51degrees feature\n    - MINOR: fd/threads: silence a build warning with threads disabled\n    - BUG/MINOR: tcpcheck: Don't forget to reset tcp-check flags on new kind of check\n    - MINOR: tcpcheck: Don't handle anymore in-progress send rules in tcpcheck_main\n    - BUG/MAJOR: tcpcheck: Allocate input and output buffers from the buffer pool\n    - MINOR: tcpcheck: Don't handle anymore in-progress connect rules in tcpcheck_main\n    - MINOR: config: Deprecate and ignore tune.chksize global option\n    - MINOR: config: Add a warning if tune.chksize is used\n    - REORG: tcpcheck: Move check option parsing functions based on tcp-check\n    - MINOR: check: Always increment check health counter on CONPASS\n    - MINOR: tcpcheck: Add support of L7OKC on expect rules error-status argument\n    - DOC: config: Make disable-on-404 option clearer on transition conditions\n    - DOC: config: Move req.hdrs and req.hdrs_bin in L7 samples fetches section\n    - BUG/MINOR: http-fetch: Fix smp_fetch_body() when called from a health-check\n    - MINOR: plock: use an ARMv8 instruction barrier for the pause instruction\n    - MINOR: debug: add \"debug dev sched\" to stress the scheduler.\n    - MINOR: debug: add a trivial PRNG for scheduler stress-tests\n    - BUG/MEDIUM: lists: Lock the element while we check if it is in a list.\n    - MINOR: task: remove tasklet_insert_into_tasklet_list()\n    - MINOR: task: perform atomic counter increments only once per wakeup\n    - MINOR: task: remove __tasklet_remove_from_tasklet_list()\n    - BUG/MEDIUM: task: close a possible data race condition on a tasklet's list link\n    - BUG/MEDIUM: local log format regression.\n\n2020/11/21 : 2.4-dev1\n    - MINOR: ist: Add istend() function to return a pointer to the end of the string\n    - MINOR: sample: Add converters to parse FIX messages\n    - REGTEST: converter: Add a regtest for fix converters\n    - MINOR: sample: Add converts to parses MQTT messages\n    - REGTEST: converter: Add a regtest for MQTT converters\n    - MINOR: compat: automatically include malloc.h on glibc\n    - MEDIUM: pools: call malloc_trim() from pool_gc()\n    - MEDIUM: pattern: call malloc_trim() on pat_ref_reload()\n    - MINOR: pattern: move the update revision to the pat_ref, not the expression\n    - CLEANUP: pattern: delete the back refs at once during pat_ref_reload()\n    - MINOR: pattern: new sflag PAT_SF_REGFREE indicates regex_free() is needed\n    - MINOR: pattern: make the delete and prune functions more generic\n    - MEDIUM: pattern: link all final elements from the reference\n    - MEDIUM: pattern: change the pat_del_* functions to delete from the references\n    - MINOR: pattern: remerge the list and tree deletion functions\n    - MINOR: pattern: perform a single call to pat_delete_gen() under the expression\n    - CLEANUP: acl: don't reference the generic pattern deletion function anymore\n    - CLEANUP: pattern: remove pat_delete_fcts[] and pattern_head->delete()\n    - MINOR: pattern: introduce pat_ref_delete_by_ptr() to delete a valid reference\n    - MINOR: pattern: store a generation number in the reference patterns\n    - MEDIUM: pattern: only match patterns that match the current generation\n    - MINOR: pattern: add pat_ref_commit() to commit a previously inserted element\n    - MINOR: pattern: implement pat_ref_load() to load a pattern at a given generation\n    - MINOR: pattern: add pat_ref_purge_older() to purge old entries\n    - MEDIUM: pattern: make pat_ref_prune() rely on pat_ref_purge_older()\n    - MINOR: pattern: during reload, delete elements frem the ref, not the expression\n    - MINOR: pattern: prepare removal of a pattern from the list head\n    - MEDIUM: pattern: turn the pattern chaining to single-linked list\n    - CLEANUP: cfgparse: remove duplicate registration for transparent build options\n    - BUG/MINOR: ssl: don't report 1024 bits DH param load error when it's higher\n    - MINOR: http-htx: Add understandable errors for the errorfiles parsing\n    - MINOR: ssl: instantiate stats module\n    - MINOR: ssl: count client hello for stats\n    - MINOR: ssl: add counters for ssl sessions\n    - DOC: config: Fix a typo on ssl_c_chain_der\n    - MINOR: server: remove idle lock in srv_cleanup_connections\n    - BUILD: ssl: silence build warning on uninitialised counters\n    - BUILD: http-htx: fix build warning regarding long type in printf\n    - REGTEST: ssl: test wildcard and multi-type + exclusions\n    - BUG/MEDIUM: ssl/crt-list: correctly insert crt-list line if crt already loaded\n    - CI: Expand use of GitHub Actions for CI\n    - REGTEST: ssl: mark reg-tests/ssl/ssl_crt-list_filters.vtc as broken\n    - BUG/MINOR: pattern: a sample marked as const could be written\n    - BUG/MINOR: lua: set buffer size during map lookups\n    - MEDIUM: cache: Change caching conditions\n    - BUG/MINOR: stats: free dynamically stats fields/lines on shutdown\n    - BUG/MEDIUM: stats: prevent crash if counters not alloc with dummy one\n    - MINOR: peers: Add traces to peer_treat_updatemsg().\n    - BUG/MINOR: peers: Do not ignore a protocol error for dictionary entries.\n    - BUG/MINOR: peers: Missing TX cache entries reset.\n    - BUG/MEDIUM: peers: fix decoding of multi-byte length in stick-table messages\n    - BUG/MINOR: http-fetch: Extract cookie value even when no cookie name\n    - BUG/MINOR: http-fetch: Fix calls w/o parentheses of the cookie sample fetches\n    - BUG/MEDIUM: check: reuse srv proto only if using same mode\n    - MINOR: check: report error on incompatible proto\n    - MINOR: check: report error on incompatible connect proto\n    - BUG/MINOR: http-htx: Handle warnings when parsing http-error and http-errors\n    - BUG/MAJOR: spoe: Be sure to remove all references on a released spoe applet\n    - MINOR: spoe: Don't close connection in sync mode on processing timeout\n    - BUG/MINOR: tcpcheck: Don't warn on unused rules if check option is after\n    - MINOR: init: Fix the prototype for per-thread free callbacks\n    - MINOR: config/mux-h2: Return ERR_ flags from init_h2() instead of a status\n    - CLEANUP: config: Return ERR_NONE from config callbacks instead of 0\n    - MINOR: cfgparse: tighten the scope of newnameserver variable, free it on error.\n    - REGTEST: make ssl_client_samples and ssl_server_samples require to 2.2\n    - REGTESTS: Add sample_fetches/cook.vtc\n    - BUG/MEDIUM: filters: Forward all filtered data at the end of http filtering\n    - BUG/MINOR: http-ana: Don't wait for the body of CONNECT requests\n    - CLEANUP: flt-trace: Remove unused random-parsing option\n    - MINOR: flt-trace: Add an option to inhibits trace messages\n    - MINOR: flt-trace: Use a bitfield for the trace options\n    - REGTESTS: Add a script to test the random forwarding with several filters\n    - REGTESTS: mark the abns test as broken again\n    - REGTESTS: converter: add url_dec test\n    - CI: Stop hijacking the hosts file\n    - CI: Make the h2spec workflow more consistent with the VTest workflow\n    - CI: travis-ci: remove amd64, osx builds\n    - CI: travis-ci: arm64 are not allowed to fail anymore\n    - DOC: add missing 3.10 in the summary\n    - MINOR: ssl: remove client hello counters\n    - MEDIUM: stats: add counters for failed handshake\n    - MINOR: ssl: create common ssl_ctx init\n    - MEDIUM: cli/ssl: configure ssl on server at runtime\n    - REGTEST: server/cli_set_ssl.vtc requires OpenSSL\n    - DOC: coding-style: update a few rules about pointers\n    - BUG/MINOR: ssl: segv on startup when AKID but no keyid\n    - BUILD: ssl: use SSL_MODE_ASYNC macro instead of OPENSSL_VERSION\n    - BUG/MEDIUM: http-ana: Don't eval http-after-response ruleset on empty messages\n    - BUG/MEDIUM: ssl/crt-list: bundle support broken in crt-list\n    - BUG/MEDIUM: ssl: error when no certificate are found\n    - BUG/MINOR: ssl/crt-list: load bundle in crt-list only if activated\n    - BUG/MEDIUM: ssl/crt-list: fix error when no file found\n    - CI: Github Actions: enable prometheus exporter\n    - CI: Github Actions: remove LibreSSL-3.0.2 builds\n    - CI: Github Actions: enable BoringSSL builds\n    - CI: travis-ci: remove builds migrated to GH actions\n    - BUILD: makefile: enable crypt(3) for OpenBSD\n    - CI: Github Action: run \"apt-get update\" before packages restore\n    - BUILD: SSL: guard TLS13 ciphersuites with HAVE_SSL_CTX_SET_CIPHERSUITES\n    - CI: Pass the github.event_name to matrix.py\n    - CI: Clean up Windows CI\n    - DOC: clarify how to create a fallback crt\n    - CLEANUP: connection: do not use conn->owner when the session is known\n    - BUG/MAJOR: connection: reset conn->owner when detaching from session list\n    - REGTESTS: mark proxy_protocol_random_fail as broken\n    - BUG/MINOR: http_htx: Fix searching headers by substring\n    - MINOR: http_act: Add -m flag for del-header name matching method\n\n2020/11/05 : 2.4-dev0\n    - MINOR: version: it's development again.\n    - DOC: mention in INSTALL that it's development again\n\n2020/11/05 : 2.3.0\n    - CLEANUP: pattern: remove unused entry \"tree\" in pattern.val\n    - BUILD: ssl: use SSL_CTRL_GET_RAW_CIPHERLIST instead of OpenSSL versions\n    - BUG/MEDIUM: filters: Don't try to init filters for disabled proxies\n    - BUG/MINOR: proxy/server: Skip per-proxy/server post-check for disabled proxies\n    - BUG/MINOR: checks: Report a socket error before any connection attempt\n    - BUG/MINOR: server: Set server without addr but with dns in RMAINT on startup\n    - MINOR: server: Copy configuration file and line for server templates\n    - BUG/MEDIUM: mux-pt: Release the tasklet during an HTTP upgrade\n    - BUILD: ssl: use HAVE_OPENSSL_KEYLOG instead of OpenSSL versions\n    - MINOR: debug: don't count free(NULL) in memstats\n    - BUG/MINOR: filters: Skip disabled proxies during startup only\n    - MINOR: mux_h2: capitalize frame type in stats\n    - MINOR: mux_h2: add stat for total count of connections/streams\n    - MINOR: stats: do not display empty stat module title on html\n    - BUG/MEDIUM: stick-table: limit the time spent purging old entries\n    - BUG/MEDIUM: listener: only enable a listening listener if needed\n    - BUG/MEDIUM: listener: never suspend inherited sockets\n    - BUG/MEDIUM: listener: make the master also keep workers' inherited FDs\n    - MINOR: fd: add fd_want_recv_safe()\n    - MEDIUM: listeners: make use of fd_want_recv_safe() to enable early receivers\n    - REGTESTS: mark abns_socket as working now\n    - CLEANUP: mux-h2: Remove the h1 parser state from the h2 stream\n    - MINOR: sock: add a check against cross worker<->master socket activities\n    - CI: github actions: limit OpenSSL no-deprecated builds to \"default,bug,devel\" reg-tests\n    - BUG/MEDIUM: server: make it possible to kill last idle connections\n    - MINOR: mworker/cli: the master CLI use its own applet\n    - MINOR: ssl: define SSL_CTX_set1_curves_list to itself on BoringSSL\n    - BUILD: ssl: use feature macros for detecting ec curves manipulation support\n    - DOC: Add dns as an available domain to show stat\n    - BUILD: makefile: usual reorder of objects for faster builds\n    - DOC: update INSTALL to mention that TCC is supported\n    - DOC: mention in INSTALL that haproxy 2.3 is a stable version\n    - MINOR: version: mention that it's stable now\n\n2020/10/31 : 2.3-dev9\n    - CLEANUP: http_ana: remove unused assignation of `att_beg`\n    - BUG/MEDIUM: ssl: OCSP must work with BoringSSL\n    - BUG/MINOR: log: fix memory leak on logsrv parse error\n    - BUG/MINOR: log: fix risk of null deref on error path\n    - BUILD: ssl: more elegant OpenSSL early data support check\n    - CI: github actions: update h2spec to 2.6.0\n    - BUG/MINOR: cache: Check the return value of http_replace_res_status\n    - MINOR: cache: Store the \"Last-Modified\" date in the cache_entry\n    - MINOR: cache: Process the If-Modified-Since header in conditional requests\n    - MINOR: cache: Create res.cache_hit and res.cache_name sample fetches\n    - MINOR: mux-h2: register a stats module\n    - MINOR: mux-h2: add counters instance to h2c\n    - MINOR: mux-h2: add stats for received frame types\n    - MINOR: mux-h2: report detected error on stats\n    - MINOR: mux-h2: count open connections/streams on stats\n    - BUG/MINOR: server: fix srv downtime calcul on starting\n    - BUG/MINOR: server: fix down_time report for stats\n    - BUG/MINOR: lua: initialize sample before using it\n    - MINOR: cache: Add Expires header value parsing\n    - MINOR: ist: Add a case insensitive istmatch function\n    - BUG/MINOR: cache: Manage multiple values in cache-control header value\n    - BUG/MINOR: cache: Inverted variables in http_calc_maxage function\n    - MINOR: pattern: make pat_ref_append() return the newly added element\n    - MINOR: pattern: make pat_ref_add() rely on pat_ref_append()\n    - MINOR: pattern: export pat_ref_push()\n    - CLEANUP: pattern: use calloc() rather than malloc for structures\n    - CLEANUP: pattern: fix spelling/grammatical/copy-paste in comments\n\n2020/10/24 : 2.3-dev8\n    - MINOR: backend: replace the lbprm lock with an rwlock\n    - MINOR: lb/map: use seek lock and read locks where appropriate\n    - MINOR: lb/leastconn: only take a read lock in fwlc_get_next_server()\n    - MINOR: lb/first: use a read lock in fas_get_next_server()\n    - MINOR: lb/chash: use a read lock in chash_get_server_hash()\n    - BUG/MINOR: disable dynamic OCSP load with BoringSSL\n    - BUILD: ssl: make BoringSSL use its own version numbers\n    - CLEANUP: threads: don't register an initcall when not debugging\n    - MINOR: threads: change lock_t to an unsigned int\n    - CLEANUP: tree-wide: reorder a few structures to plug some holes around locks\n    - CLEANUP: task: remove the unused and mishandled global_rqueue_size\n    - BUG/MEDIUM: connection: Never cleanup server lists when freeing private conns\n    - MEDIUM: config: report that \"nbproc\" is deprecated\n    - BUG/MINOR: listener: close before free in `listener_accept`\n    - MINOR: ssl: 'ssl-load-extra-del-ext' removes the certificate extension\n    - BUG/MINOR: queue: properly report redistributed connections\n    - CONTRIB: tcploop: remove unused local variables in tcp_pause()\n    - BUILD: makefile: add entries to build common debugging tools\n    - BUG/MEDIUM: server: support changing the slowstart value from state-file\n    - MINOR: http: Add `enum etag_type http_get_etag_type(const struct ist)`\n    - MINOR: http: Add etag comparison function\n    - MEDIUM: cache: Store the ETag information in the cache_entry\n    - MEDIUM: cache: Add support for 'If-None-Match' request header\n    - REGTEST: cache: Add if-none-match test case\n    - CLEANUP: compression: Make use of http_get_etag_type()\n    - BUG/MINOR: http-ana: Don't send payload for internal responses to HEAD requests\n    - BUG/MAJOR: mux-h2: Don't try to send data if we know it is no longer possible\n    - MINOR: threads/debug: only report used lock stats\n    - MINOR: threads/debug: only report lock stats for used operations\n    - MINOR: proxy; replace the spinlock with an rwlock\n    - MINOR: server: read-lock the cookie during srv_set_dyncookie()\n    - MINOR: proxy/cli: only take a read lock in \"show errors\"\n    - OPTIM: queue: don't call pendconn_unlink() when the pendconn is not queued\n    - MINOR: queue: split __pendconn_unlink() in per-srv and per-prx\n    - MINOR: queue: reduce the locked area in pendconn_add()\n    - OPTIM: queue: make the nbpend counters atomic\n    - OPTIM: queue: decrement the nbpend and totpend counters outside of the lock\n    - MINOR: leastconn: take the queue length into account when queuing servers\n    - MEDIUM: fwlc: re-enable per-server queuing up to maxqueue\n    - Revert \"OPTIM: queue: don't call pendconn_unlink() when the pendconn is not queued\"\n    - MINOR: stats: support the \"up\" output modifier for \"show stat\"\n    - MINOR: stats: also support a \"no-maint\" show stat modifier\n    - MINOR: stats: indicate the number of servers in a backend's status\n    - MEDIUM: ssl: ssl-load-extra-del-ext work only with .crt\n    - REGTEST: ssl: test \"set ssl cert\" with separate key / crt\n    - DOC: management: apply the \"show stat\" modifiers to \"show stat\", not \"show info\"\n    - MINOR: stats: report server's user-configured weight next to effective weight\n    - CI: travis-ci: switch to Ubuntu 20.04\n    - CONTRIB: release-estimator: Add release estimating tool\n    - BUG/MEDIUM: queue: fix unsafe proxy pointer when counting nbpend\n    - BUG/MINOR: extcheck: add missing checks on extchk_setenv()\n\n2020/10/17 : 2.3-dev7\n    - CI: travis-ci: replace not defined SSL_LIB, SSL_INC for BotringSSL builds\n    - BUG/MINOR: init: only keep rlim_fd_cur if max is unlimited\n    - BUG/MINOR: mux-h2: do not stop outgoing connections on stopping\n    - MINOR: fd: report an error message when failing initial allocations\n    - MINOR: proto-tcp: make use of connect(AF_UNSPEC) for the pause\n    - MINOR: sock: add sock_accept_conn() to test a listening socket\n    - MINOR: protocol: make proto_tcp & proto_uxst report listening sockets\n    - MINOR: sockpair: implement the .rx_listening function\n    - CLEANUP: tcp: make use of sock_accept_conn() where relevant\n    - CLEANUP: unix: make use of sock_accept_conn() where relevant\n    - BUG/MINOR: listener: detect and handle shared sockets stopped in other processes\n    - CONTRIB: tcploop: implement a disconnect operation 'D'\n    - CLEANUP: protocol: intitialize all of the sockaddr when disconnecting\n    - BUG/MEDIUM: deinit: check fdtab before fdtab[fd].owner\n    - BUG/MINOR: connection: fix loop iter on connection takeover\n    - BUG/MEDIUM: connection: fix srv idle count on conn takeover\n    - MINOR: connection: improve list api usage\n    - MINOR: mux/connection: add a new mux flag for HOL risk\n    - MINOR: connection: don't check priv flag on free\n    - MEDIUM: backend: add new conn to session if mux marked as HOL blocking\n    - MEDIUM: backend: add reused conn to sess if mux marked as HOL blocking\n    - MEDIUM: h2: remove conn from session on detach\n    - MEDIUM: fcgi: remove conn from session on detach\n    - DOC: Describe reuse safe for HOL handling\n    - MEDIUM: proxy: remove obsolete \"mode health\"\n    - MEDIUM: proxy: remove obsolete \"monitor-net\"\n    - CLEANUP: protocol: remove the ->drain() function\n    - CLEANUP: fd: finally get rid of fd_done_recv()\n    - MINOR: connection: make sockaddr_alloc() take the address to be copied\n    - MEDIUM: listener: allocate the connection before queuing a new connection\n    - MINOR: session: simplify error path in session_accept_fd()\n    - MINOR: connection: add new error codes for accept_conn()\n    - MINOR: sock: rename sock_accept_conn() to sock_accepting_conn()\n    - MINOR: protocol: add a new function accept_conn()\n    - MINOR: sock: implement sock_accept_conn() to accept a connection\n    - MINOR: sockpair: implement sockpair_accept_conn() to accept a connection\n    - MEDIUM: listener: use protocol->accept_conn() to accept a connection\n    - MEDIUM: listener: remove the second pass of fd manipulation at the end\n    - MINOR: protocol: add a default I/O callback and put it into the receiver\n    - MINOR: log: set the UDP receiver's I/O handler in the receiver\n    - MINOR: protocol: register the receiver's I/O handler and not the protocol's\n    - CLEANUP: protocol: remove the now unused <handler> field of proto_fam->bind()\n    - DOC: improve the documentation for \"option nolinger\"\n    - BUG/MEDIUM: proxy: properly stop backends\n    - BUG/MEDIUM: task: bound the number of tasks picked from the wait queue at once\n    - MINOR: threads: augment rwlock debugging stats to report seek lock stats\n    - MINOR: threads: add the transitions to/from the seek state\n    - MEDIUM: task: use an upgradable seek lock when scanning the wait queue\n    - BUILD: listener: avoir a build warning when threads are disabled\n    - BUG/MINOR: peers: Possible unexpected peer seesion reset after collisions.\n    - MINOR: ssl: add volatile flags to ssl samples\n    - MEDIUM: backend: reuse connection if using a static sni\n    - BUG/MEDIUM: spoe: Unset variable instead of set it if no data provided\n    - BUG/MEDIUM: mux-h1: Get the session from the H1S when capturing bad messages\n    - BUG/MEDIUM: lb: Always lock the server when calling server_{take,drop}_conn\n    - DOC: fix typo in MAX_SESS_STKCTR\n\n2020/10/10 : 2.3-dev6\n    - REGTESTS: use \"command\" instead of \"which\" for better POSIX compatibility\n    - BUILD: makefile: Update feature flags for OpenBSD\n    - DOC: agent-check: fix typo in \"fail\" word expected reply\n    - DOC: crt: advise to move away from cert bundle\n    - BUG/MINOR: ssl/crt-list: exit on warning out of crtlist_parse_line()\n    - REGTEST: fix host part in balance-uri-path-only.vtc\n    - REGTEST: make ssl_client_samples and ssl_server_samples requiret to 2.3\n    - REGTEST: the iif converter test requires 2.3\n    - REGTEST: make agent-check.vtc require 1.8\n    - REGTEST: make abns_socket.vtc require 1.8\n    - REGTEST: make map_regm_with_backref require 1.7\n    - BUILD: makefile: Update feature flags for FreeBSD\n    - OPTIM: backend/random: never queue on the server, always on the backend\n    - OPTIM: backend: skip LB when we know the backend is full\n    - BUILD: makefile: Fix building with closefrom() support enabled\n    - BUILD: makefile: add an EXTRAVERSION variable to ease local naming\n    - MINOR: tools: support for word expansion of environment in parse_line\n    - BUILD: tools: fix minor build issue on isspace()\n    - BUILD: makefile: Enable closefrom() support on Solaris\n    - CLEANUP: ssl: Use structured format for error line report during crt-list parsing\n    - MINOR: ssl: Add error if a crt-list might be truncated\n    - MINOR: ssl: remove uneeded check in crtlist_parse_file\n    - BUG/MINOR: Fix several leaks of 'log_tag' in init().\n    - DOC: tcp-rules: Refresh details about L7 matching for tcp-request content rules\n    - MEDIUM: tcp-rules: Warn if a track-sc* content rule doesn't depend on content\n    - BUG/MINOR: tcpcheck: Set socks4 and send-proxy flags before the connect call\n    - DOC: ssl: new \"cert bundle\" behavior\n    - BUG/MEDIUM: queue: make pendconn_cond_unlink() really thread-safe\n    - CLEANUP: ssl: \"bundle\" is not an OpenSSL wording\n    - MINOR: counters: fix a typo in comment\n    - BUG/MINOR: stats: fix validity of the json schema\n    - REORG: stats: export some functions\n    - MINOR: stats: add stats size as a parameter for csv/json dump\n    - MINOR: stats: hide px/sv/li fields in applet struct\n    - REORG: stats: extract proxy json dump\n    - REORG: stats: extract proxies dump loop in a function\n    - MINOR: hlua: Display debug messages on stderr only in debug mode\n    - MINOR: stats: define the concept of domain for statistics\n    - MINOR: stats: define additional flag px cap on domain\n    - MEDIUM: stats: add delimiter for static proxy stats on csv\n    - MEDIUM: stats: define an API to register stat modules\n    - MEDIUM: stats: add abstract type to store counters\n    - MEDIUM: stats: integrate static proxies stats in new stats\n    - MINOR: stats: support clear counters for dynamic stats\n    - MINOR: stats: display extra proxy stats on the html page\n    - MINOR: stats: add config \"stats show modules\"\n    - MINOR: dns/stats: integrate dns counters in stats\n    - MINOR: stats: remove for loop declaration\n    - DOC: ssl: fix typo about ocsp files\n    - BUG/MINOR: peers: Inconsistency when dumping peer status codes.\n    - DOC: update INSTALL with supported OpenBSD / FreeBSD versions\n    - BUG/MINOR: proto_tcp: Report warning messages when listeners are bound\n    - CLEANUP: cache: Fix leak of cconf->c.name during config check\n    - CLEANUP: ssl: Release cached SSL sessions on deinit\n    - BUG/MINOR: mux-h1: Be sure to only set CO_RFL_READ_ONCE for the first read\n    - BUG/MINOR: mux-h1: Always set the session on frontend h1 stream\n    - MINOR: mux-h1: Don't wakeup the H1C when output buffer become available\n    - CLEANUP: sock-unix: Remove an unreachable goto clause\n    - BUG/MINOR: proxy: inc req counter on new syslog messages.\n    - BUG/MEDIUM: log: old processes with log foward section don't die on soft stop.\n    - MINOR: stats: inc req counter on listeners.\n    - MINOR: channel: new getword and getchar functions on channel.\n    - MEDIUM: log: syslog TCP support on log forward section.\n    - BUG/MINOR: proxy/log: frontend/backend and log forward names must differ\n    - DOC: re-work log forward bind statement documentation.\n    - DOC: fix a confusing typo on a regsub example\n    - BUILD: Add a DragonFlyBSD target\n    - BUG/MINOR: makefile: fix a tiny typo in the target list\n    - BUILD: makefile: Update feature flags for NetBSD\n    - CI: travis-ci: help Coverity to detect BUG_ON() as a real stop\n    - DOC: Add missing stats fields in the management doc\n    - BUG/MEDIUM: mux-fcgi: Don't handle pending read0 too early on streams\n    - BUG/MEDIUM: mux-h2: Don't handle pending read0 too early on streams\n    - DOC: Fix typos in configuration.txt\n    - BUG/MINOR: http: Fix content-length of the default 500 error\n    - BUG/MINOR: http-htx: Expect no body for 204/304 internal HTTP responses\n    - REGTESTS: mark abns_socket as broken\n    - MEDIUM: fd: always wake up one thread when enabling a foreing FD\n    - MEDIUM: listeners: don't bounce listeners management between queues\n    - MEDIUM: init: stop disabled proxies after initializing fdtab\n    - MEDIUM: listeners: make unbind_listener() converge if needed\n    - MEDIUM: deinit: close all receivers/listeners before scanning proxies\n    - MEDIUM: listeners: remove the now unused ZOMBIE state\n    - MINOR: listeners: do not uselessly try to close zombie listeners in soft_stop()\n    - CLEANUP: proxy: remove the first_to_listen hack in zombify_proxy()\n    - MINOR: listeners: introduce listener_set_state()\n    - MINOR: proxy: maintain per-state counters of listeners\n    - MEDIUM: proxy: remove the unused PR_STFULL state\n    - MEDIUM: proxy: remove the PR_STERROR state\n    - MEDIUM: proxy: remove state PR_STPAUSED\n    - MINOR: startup: don't rely on PR_STNEW to check for listeners\n    - CLEANUP: peers: don't use the PR_ST* states to mark enabled/disabled\n    - MEDIUM: proxy: replace proxy->state with proxy->disabled\n    - MEDIUM: proxy: remove start_proxies()\n    - MEDIUM: proxy: merge zombify_proxy() with stop_proxy()\n    - MINOR: listeners: check the current listener state in pause_listener()\n    - MINOR: listeners: check the current listener earlier state in resume_listener()\n    - MEDIUM: listener/proxy: make the listeners notify about proxy pause/resume\n    - MINOR: protocol: introduce protocol_{pause,resume}_all()\n    - MAJOR: signals: use protocol_pause_all() and protocol_resume_all()\n    - CLEANUP: proxy: remove the now unused pause_proxies() and resume_proxies()\n    - MEDIUM: proto_tcp: make the pause() more robust in multi-process\n    - BUG/MEDIUM: listeners: correctly report pause() errors\n    - MINOR: listeners: move fd_stop_recv() to the receiver's socket code\n    - CLEANUP: protocol: remove the ->disable_all method\n    - CLEANUP: listeners: remove unused disable_listener and disable_all_listeners\n    - MINOR: listeners: export enable_listener()\n    - MINOR: protocol: directly call enable_listener() from protocol_enable_all()\n    - CLEANUP: protocol: remove the ->enable_all method\n    - CLEANUP: listeners: remove the now unused enable_all_listeners()\n    - MINOR: protocol: rename the ->listeners field to ->receivers\n    - MINOR: protocol: replace ->pause(listener) with ->rx_suspend(receiver)\n    - MINOR: protocol: implement an ->rx_resume() method\n    - MINOR: listener: use the protocol's ->rx_resume() method when available\n    - MINOR: sock: provide a set of generic enable/disable functions\n    - MINOR: protocol: add a new pair of rx_enable/rx_disable methods\n    - MINOR: protocol: add a new pair of enable/disable methods for listeners\n    - MEDIUM: listeners: now use the listener's ->enable/disable\n    - MINOR: listeners: split delete_listener() in two versions\n    - MINOR: listeners: count unstoppable jobs on creation, not deletion\n    - MINOR: listeners: add a new stop_listener() function\n    - MEDIUM: proxy: make stop_proxy() now use stop_listener()\n    - MEDIUM: proxy: add mode PR_MODE_PEERS to flag peers frontends\n    - MEDIUM: proxy: centralize proxy status update and reporting\n    - MINOR: protocol: add protocol_stop_now() to instant-stop listeners\n    - MEDIUM: proxy: make soft_stop() stop most listeners using protocol_stop_now()\n    - MEDIUM: udp: implement udp_suspend() and udp_resume()\n    - MINOR: listener: add a few BUG_ON() statements to detect inconsistencies\n    - MEDIUM: listeners: always close master vs worker listeners\n    - BROKEN/MEDIUM: listeners: rework the unbind logic to make it idempotent\n    - MEDIUM: listener: let do_unbind_listener() decide whether to close or not\n    - CLEANUP: listeners: remove the do_close argument to unbind_listener()\n    - MINOR: listeners: move the LI_O_MWORKER flag to the receiver\n    - MEDIUM: receivers: add an rx_unbind() method in the protocols\n    - MINOR: listeners: split do_unbind_listener() in two\n    - MEDIUM: listeners: implement protocol level ->suspend/resume() calls\n    - MEDIUM: config: mark \"grace\" as deprecated\n    - MEDIUM: config: remove the deprecated and dangerous global \"debug\" directive\n    - BUG/MINOR: proxy: respect the proper format string in sig_pause/sig_listen\n    - MINOR: peers: heartbeat, collisions and handshake information for \"show peers\" command.\n    - BUILD: makefile: Enable getaddrinfo() on OS/X\n\n2020/09/25 : 2.3-dev5\n    - DOC: Fix typo in iif() example\n    - CLEANUP: Update .gitignore\n    - BUILD: introduce possibility to define ABORT_NOW() conditionally\n    - CI: travis-ci: help Coverity to recognize abort()\n    - BUG/MINOR: Fix type passed of sizeof() for calloc()\n    - CLEANUP: Do not use a fixed type for 'sizeof' in 'calloc'\n    - CLEANUP: tree-wide: use VAR_ARRAY instead of [0] in various definitions\n    - BUILD: connection: fix build on clang after the VAR_ARRAY cleanup\n    - BUG/MINOR: ssl: verifyhost is case sensitive\n    - BUILD: makefile: change default value of CC from gcc to cc\n    - CI: travis-ci: split asan step out of running tests\n    - BUG/MINOR: server: report correct error message for invalid port on \"socks4\"\n    - BUG/MEDIUM: ssl: Don't call ssl_sock_io_cb() directly.\n    - BUG/MINOR: ssl/crt-list: crt-list could end without a \\n\n    - BUG/MINOR: log-forward: fail on unknown keywords\n    - MEDIUM: log-forward: use \"dgram-bind\" instead of \"bind\" for the listener\n    - BUG/MEDIUM: log-forward: always quit on parsing errors\n    - MEDIUM: ssl: remove bundle support in crt-list and directories\n    - MEDIUM: ssl/cli: remove support for multi certificates bundle\n    - MINOR: ssl: crtlist_dup_ssl_conf() duplicates a ssl_bind_conf\n    - MINOR: ssl: crtlist_entry_dup() duplicates a crtlist_entry\n    - MEDIUM: ssl: emulates the multi-cert bundles in the crtlist\n    - MEDIUM: ssl: emulate multi-cert bundles loading in standard loading\n    - CLEANUP: ssl: remove test on \"multi\" variable in ckch functions\n    - CLEANUP: ssl/cli: remove test on 'multi' variable in CLI functions\n    - CLEANUP: ssl: remove utility functions for bundle\n    - DOC: explain bundle emulation in configuration.txt\n    - BUILD: fix build with openssl < 1.0.2 since bundle removal\n    - BUG/MINOR: log: gracefully handle the \"udp@\" address format for log servers\n    - BUG/MINOR: dns: gracefully handle the \"udp@\" address format for nameservers\n    - MINOR: listener: create a new struct \"settings\" in bind_conf\n    - MINOR: listener: move bind_proc and bind_thread to struct settings\n    - MINOR: listener: move the interface to the struct settings\n    - MINOR: listener: move the network namespace to the struct settings\n    - REORG: listener: create a new struct receiver\n    - REORG: listener: move the listening address to a struct receiver\n    - REORG: listener: move the receiving FD to struct receiver\n    - REORG: listener: move the listener's proto to the receiver\n    - MINOR: listener: make sock_find_compatible_fd() check the socket type\n    - REORG: listener: move the receiver part to a new file\n    - MINOR: receiver: link the receiver to its settings\n    - MINOR: receiver: link the receiver to its owner\n    - MINOR: listener: prefer to retrieve the socket's settings via the receiver\n    - MINOR: receiver: add a receiver-specific flag to indicate the socket is bound\n    - MINOR: listener: move the INHERITED flag down to the receiver\n    - MINOR: receiver: move the FOREIGN and V6ONLY options from listener to settings\n    - MINOR: sock: make sock_find_compatible_fd() only take a receiver\n    - MINOR: protocol: rename the ->bind field to ->listen\n    - MINOR: protocol: add a new ->bind() entry to bind the receiver\n    - MEDIUM: sock_inet: implement sock_inet_bind_receiver()\n    - MEDIUM: tcp: make use of sock_inet_bind_receiver()\n    - MEDIUM: udp: make use of sock_inet_bind_receiver()\n    - MEDIUM: sock_unix: implement sock_unix_bind_receiver()\n    - MEDIUM: uxst: make use of sock_unix_bind_receiver()\n    - MEDIUM: sockpair: implement sockpair_bind_receiver()\n    - MEDIUM: proto_sockpair: make use of sockpair_bind_receiver()\n    - MEDIUM: protocol: explicitly start the receiver before the listener\n    - MEDIUM: protocol: do not call proto->bind() anymore from bind_listener()\n    - MINOR: protocol: add a new proto_fam structure for protocol families\n    - MINOR: protocol: retrieve the family-specific fields from the family\n    - CLEANUP: protocol: remove family-specific fields from struct protocol\n    - MINOR: protocol: add a real family for existing FDs\n    - CLEANUP: tools: make str2sa_range() less awful for fd@ and sockpair@\n    - MINOR: tools: make str2sa_range() take more options than just resolve\n    - MINOR: tools: add several PA_O_PORT_* flags in str2sa_range() callers\n    - MEDIUM: tools: make str2sa_range() validate callers' port specifications\n    - MEDIUM: config: remove all checks for missing/invalid ports/ranges\n    - MINOR: tools: add several PA_O_* flags in str2sa_range() callers\n    - MINOR: listener: remove the inherited arg to create_listener()\n    - MINOR: tools: make str2sa_range() optionally return the fd\n    - MINOR: log: detect LOG_TARGET_FD from the fd and not from the syntax\n    - MEDIUM: tools: make str2sa_range() resolve pre-bound listeners\n    - MINOR: config: do not test an inherited socket again\n    - MEDIUM: tools: make str2sa_range() check for the sockpair's FD usability\n    - MINOR: tools: start to distinguish stream and dgram in str2sa_range()\n    - MEDIUM: tools: make str2sa_range() only report AF_CUST_UDP on listeners\n    - MINOR: tools: remove the central test for \"udp\" in str2sa_range()\n    - MINOR: cfgparse: add str2receiver() to parse dgram receivers\n    - MINOR: log-forward: use str2receiver() to parse the dgram-bind address\n    - MEDIUM: config: make str2listener() not accept datagram sockets anymore\n    - MINOR: listener: pass the chosen protocol to create_listeners()\n    - MINOR: tools: make str2sa_range() directly return the protocol\n    - MEDIUM: tools: make str2sa_range() check that the protocol has ->connect()\n    - MINOR: protocol: add the control layer type in the protocol struct\n    - MEDIUM: protocol: store the socket and control type in the protocol array\n    - MEDIUM: tools: make str2sa_range() use protocol_lookup()\n    - MEDIUM: proto_udp: replace last AF_CUST_UDP* with AF_INET*\n    - MINOR: tools: drop listener detection hack from str2sa_range()\n    - BUILD: sock_unix: add missing errno.h\n    - MINOR: sock_inet: report the errno string in binding errors\n    - MINOR: sock_unix: report the errno string in binding errors\n    - BUILD: sock_inet: include errno.h\n    - MINOR: h2/trace: also display the remaining frame length in traces\n    - BUG/MINOR: h2/trace: do not display \"stream error\" after a frame ACK\n    - BUG/MEDIUM: h2: report frame bits only for handled types\n    - BUG/MINOR: http-fetch: Don't set the sample type during the htx prefetch\n    - BUG/MINOR: Fix memory leaks cfg_parse_peers\n    - BUG/MINOR: config: Fix memory leak on config parse listen\n    - MINOR: backend: make the \"whole\" option of balance uri take only one bit\n    - MINOR: backend: add a new \"path-only\" option to \"balance uri\"\n    - REGTESTS: add a few load balancing tests\n    - BUG/MEDIUM: listeners: do not pause foreign listeners\n    - BUG/MINOR: listeners: properly close listener FDs\n    - BUILD: trace: include tools.h\n\n2020/09/11 : 2.3-dev4\n    - MINOR: hlua: Add error message relative to the Channel manipulation and HTTP mode\n    - BUG/MEDIUM: ssl: crt-list negative filters don't work\n    - DOC: overhauling github issue templates\n    - MEDIUM: cfgparse: Emit hard error on truncated lines\n    - DOC: cache: Use '<name>' instead of '<id>' in error message\n    - MINOR: cache: Reject duplicate cache names\n    - REGTEST: remove stray leading spaces in converteers_ref_cnt_never_dec.vtc\n    - MINOR: stats: prevent favicon.ico requests for stats page\n    - BUILD: tools: include auxv a bit later\n    - BUILD: task: work around a bogus warning in gcc 4.7/4.8 at -O1\n    - MEDIUM: ssl: Support certificate chaining for certificate generation\n    - MINOR: ssl: Support SAN extension for certificate generation\n    - MINOR: tcp: don't try to set/clear v6only on inherited sockets\n    - BUG/MINOR: reload: detect the OS's v6only status before choosing an old socket\n    - MINOR: reload: determine the foreing binding status from the socket\n    - MEDIUM: reload: stop passing listener options along with FDs\n    - BUG/MEDIUM: ssl: fix ssl_bind_conf double free w/ wildcards\n    - MEDIUM: fd: replace usages of fd_remove() with fd_stop_both()\n    - CLEANUP: fd: remove fd_remove() and rename fd_dodelete() to fd_delete()\n    - MINOR: fd: add a new \"exported\" flag and use it for all regular listeners\n    - MEDIUM: reload: pass all exportable FDs, not just listeners\n    - DOC: add description of pidfile in master-worker mode\n    - BUG/MINOR: reload: do not fail when no socket is sent\n    - REORG: tcp: move TCP actions from proto_tcp.c to tcp_act.c\n    - CLEANUP: tcp: stop exporting smp_fetch_src()\n    - REORG: tcp: move TCP sample fetches from proto_tcp.c to tcp_sample.c\n    - REORG: tcp: move TCP bind/server keywords from proto_tcp.c to cfgparse-tcp.c\n    - REORG: unix: move UNIX bind/server keywords from proto_uxst.c to cfgparse-unix.c\n    - REORG: sock: start to move some generic socket code to sock.c\n    - MINOR: sock: introduce sock_inet and sock_unix\n    - MINOR: tcp/udp/unix: make use of proto->addrcmp() to compare addresses\n    - MINOR: sock_inet: implement sock_inet_get_dst()\n    - REORG: inet: replace tcp_is_foreign() with sock_inet_is_foreign()\n    - REORG: sock_inet: move v6only_default from proto_tcp.c to sock_inet.c\n    - REORG: sock_inet: move default_tcp_maxseg from proto_tcp.c\n    - REORG: listener: move xfer_sock_list to sock.{c,h}.\n    - MINOR: sock: add interface and namespace length to xfer_sock_list\n    - MINOR: sock: implement sock_find_compatible_fd()\n    - MINOR: sock_inet: move the IPv4/v6 transparent mode code to sock_inet\n    - REORG: sock: move get_old_sockets() from haproxy.c\n    - MINOR: sock: do not use LI_O_* in xfer_sock_list anymore\n    - MINOR: sock: distinguish dgram from stream types when retrieving old sockets\n    - BUILD: sock_unix: fix build issue with isdigit()\n    - BUG/MEDIUM: http-ana: Don't wait to send 1xx responses received from servers\n    - MINOR: http-htx: Add an option to eval query-string when the path is replaced\n    - BUG/MINOR: http-rules: Replace path and query-string in \"replace-path\" action\n    - MINOR: http-htx: Handle an optional reason when replacing the response status\n    - MINOR: contrib/spoa-server: allow MAX_FRAME_SIZE override\n    - BUG/MAJOR: contrib/spoa-server: Fix unhandled python call leading to memory leak\n    - BUG/MINOR: contrib/spoa-server: Ensure ip address references are freed\n    - BUG/MINOR: contrib/spoa-server: Do not free reference to NULL\n    - BUG/MINOR: contrib/spoa-server: Updating references to free in case of failure\n    - BUG/MEDIUM: contrib/spoa-server: Fix ipv4_address used instead of ipv6_address\n    - CLEANUP: http: silence a cppcheck warning in get_http_auth()\n    - REGTEST: increase some short timeouts to make tests more reliable\n    - BUG/MINOR: threads: work around a libgcc_s issue with chrooting\n    - BUILD: thread: limit the libgcc_s workaround to glibc only\n    - MINOR: protocol: do not call proto->bind_all() anymore\n    - MINOR: protocol: do not call proto->unbind_all() anymore\n    - CLEANUP: protocol: remove all ->bind_all() and ->unbind_all() functions\n    - MAJOR: init: start all listeners via protocols and not via proxies anymore\n    - BUG/MINOR: startup: haproxy -s cause 100% cpu\n    - Revert \"BUG/MINOR: http-rules: Replace path and query-string in \"replace-path\" action\"\n    - BUG/MEDIUM: doc: Fix replace-path action description\n    - MINOR: http-rules: Add set-pathq and replace-pathq actions\n    - MINOR: http-fetch: Add pathq sample fetch\n    - REGTEST: Add a test for request path manipulations, with and without the QS\n    - MINOR: Commit .gitattributes\n    - CLEANUP: Update .gitignore\n    - BUG/MEDIUM: dns: Don't store additional records in a linked-list\n    - BUG/MEDIUM: dns: Be sure to renew IP address for already known servers\n    - MINOR: server: Improve log message sent when server address is updated\n    - DOC: ssl-load-extra-files only applies to certificates on bind lines\n    - BUG/MINOR: auth: report valid crypto(3) support depending on build options\n    - BUG/MEDIUM: mux-h1: always apply the timeout on half-closed connections\n    - BUILD: threads: better workaround for late loading of libgcc_s\n    - BUILD: compiler: reserve the gcc version checks to the gcc compiler\n    - BUILD: compiler: workaround a glibc madness around __attribute__()\n    - BUILD: intops: on x86_64, the bswap instruction is called bswapq\n    - BUILD: trace: always have an argument before variadic args in macros\n    - BUILD: traces: don't pass an empty argument for missing ones\n    - BUG/MINOR: haproxy: Free uri_auth->scope during deinit\n    - CLEANUP: Free old_argv on deinit\n    - CLEANUP: haproxy: Free post_proxy_check_list in deinit()\n    - CLEANUP: haproxy: Free per_thread_*_list in deinit()\n    - CLEANUP: haproxy: Free post_check_list in deinit()\n    - BUG/MEDIUM: pattern: Renew the pattern expression revision when it is pruned\n    - REORG: tools: move PARSE_OPT_* from tools.h to tools-t.h\n    - MINOR: sample: Add iif(<true>,<false>) converter\n\n2020/08/14 : 2.3-dev3\n    - SCRIPTS: git-show-backports: make -m most only show the left branch\n    - SCRIPTS: git-show-backports: emit the shell command to backport a commit\n    - BUILD: Makefile: require SSL_LIB, SSL_INC to be explicitly set\n    - CI: travis-ci: specify SLZ_LIB, SLZ_INC for travis builds\n    - BUG/MEDIUM: mux-h1: Refresh H1 connection timeout after a synchronous send\n    - CLEANUP: dns: typo in reported error message\n    - BUG/MAJOR: dns: disabled servers through SRV records never recover\n    - BUG/MINOR: spoa-server: fix size_t format printing\n    - DOC: spoa-server: fix false friends `actually`\n    - BUG/MINOR: ssl: fix memory leak at OCSP loading\n    - BUG/MEDIUM: ssl: memory leak of ocsp data at SSL_CTX_free()\n    - BUG/MEDIUM: map/lua: Return an error if a map is loaded during runtime\n    - MINOR: arg: Add an argument type to keep a reference on opaque data\n    - BUG/MINOR: converters: Store the sink in an arg pointer for debug() converter\n    - BUG/MINOR: lua: Duplicate map name to load it when a new Map object is created\n    - BUG/MINOR: arg: Fix leaks during arguments validation for fetches/converters\n    - BUG/MINOR: lua: Check argument type to convert it to IPv4/IPv6 arg validation\n    - BUG/MINOR: lua: Check argument type to convert it to IP mask in arg validation\n    - MINOR: hlua: Don't needlessly copy lua strings in trash during args validation\n    - BUG/MINOR: lua: Duplicate lua strings in sample fetches/converters arg array\n    - MEDIUM: lua: Don't filter exported fetches and converters\n    - MINOR: lua: Add support for userlist as fetches and converters arguments\n    - MINOR: lua: Add support for regex as fetches and converters arguments\n    - MINOR: arg: Use chunk_destroy() to release string arguments\n    - BUG/MINOR: snapshots: leak of snapshots on deinit()\n    - CLEANUP: ssl: ssl_sock_crt2der semicolon and spaces\n    - MINOR: ssl: add ssl_{c,s}_chain_der fetch methods\n    - CLEANUP: fix all duplicated semicolons\n    - BUG/MEDIUM: ssl: fix the ssl-skip-self-issued-ca option\n    - BUG/MINOR: ssl: ssl-skip-self-issued-ca requires >= 1.0.2\n    - BUG/MINOR: stats: use strncmp() instead of memcmp() on health states\n    - BUILD: makefile: don't disable -Wstringop-overflow anymore\n    - BUG/MINOR: ssl: double free w/ smp_fetch_ssl_x_chain_der()\n    - BUG/MEDIUM: htx: smp_prefetch_htx() must always validate the direction\n    - BUG/MEDIUM: ssl: never generates the chain from the verify store\n    - OPTIM: regex: PCRE2 use JIT match when JIT optimisation occured.\n    - BUG/MEDIUM: ssl: does not look for all SNIs before chosing a certificate\n    - CLEANUP: ssl: remove poorly readable nested ternary\n\n2020/07/31 : 2.3-dev2\n    - DOC: ssl: req_ssl_sni needs implicit TLS\n    - BUG/MEDIUM: arg: empty args list must be dropped\n    - BUG/MEDIUM: resolve: fix init resolving for ring and peers section.\n    - BUG/MAJOR: tasks: don't requeue global tasks into the local queue\n    - MINOR: tasks/debug: make the thread affinity BUG_ON check a bit stricter\n    - MINOR: tasks/debug: add a few BUG_ON() to detect use of wrong timer queue\n    - MINOR: tasks/debug: add a BUG_ON() check to detect requeued task on free\n    - BUG/MAJOR: dns: Make the do-resolve action thread-safe\n    - BUG/MEDIUM: dns: Release answer items when a DNS resolution is freed\n    - MEDIUM: htx: Add a flag on a HTX message when no more data are expected\n    - BUG/MEDIUM: stream-int: Don't set MSG_MORE flag if no more data are expected\n    - BUG/MEDIUM: http-ana: Only set CF_EXPECT_MORE flag on data filtering\n    - CLEANUP: dns: remove 45 \"return\" statements from dns_validate_dns_response()\n    - BUG/MINOR: htx: add two missing HTX_FL_EOI and remove an unexpected one\n    - BUG/MINOR: mux-fcgi: Don't url-decode the QUERY_STRING parameter anymore\n    - BUILD: tools: fix build with static only toolchains\n    - DOC: Use gender neutral language\n    - BUG/MINOR: debug: Don't dump the lua stack if it is not initialized\n    - BUG/MAJOR: dns: fix null pointer dereference in snr_update_srv_status\n    - BUG/MAJOR: dns: don't treat Authority records as an error\n    - CI : travis-ci : prepare for using stock OpenSSL\n    - CI: travis-ci : switch to stock openssl when openssl-1.1.1 is used\n    - MEDIUM: lua: Add support for the Lua 5.4\n    - BUG/MEDIUM: dns: Don't yield in do-resolve action on a final evaluation\n    - BUG/MINOR: lua: Abort execution of actions that yield on a final evaluation\n    - MINOR: tcp-rules: Return an internal error if an action yields on a final eval\n    - BUG/MINOR: tcp-rules: Preserve the right filter analyser on content eval abort\n    - BUG/MINOR: tcp-rules: Set the inspect-delay when a tcp-response action yields\n    - MEDIUM: tcp-rules: Use a dedicated expiration date for tcp ruleset\n    - MEDIUM: lua: Set the analyse expiration date with smaller wake_time only\n    - BUG/MEDIUM: connection: Be sure to always install a mux for sync connect\n    - MINOR: connection: Preinstall the mux for non-ssl connect\n    - MINOR: stream-int: Be sure to have a mux to do sends and receives\n    - BUG/MINOR: lua: Fix a possible null pointer deref on lua ctx\n    - SCRIPTS: announce-release: add the link to the wiki in the announce messages\n    - CI: travis-ci: use better name for Coverity scan job\n    - CI: travis-ci: use proper linking flags for SLZ build\n    - BUG/MEDIUM: backend: always attach the transport before installing the mux\n    - BUG/MEDIUM: tcp-checks: always attach the transport before installing the mux\n    - MINOR: connection: avoid a useless recvfrom() on outgoing connections\n    - MINOR: mux-h1: do not even try to receive if the connection is not fully set up\n    - MINOR: mux-h1: do not try to receive on backend before sending a request\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUG/MEDIUM: ssl: check OCSP calloc in ssl_sock_load_ocsp()\n\n2020/07/17 : 2.3-dev1\n    - MINOR: config: make strict limits enabled by default\n    - BUG/MINOR: acl: Fix freeing of expr->smp in prune_acl_expr\n    - BUG/MINOR: sample: Fix freeing of conv_exprs in release_sample_expr\n    - BUG/MINOR: haproxy: Free proxy->format_unique_id during deinit\n    - BUG/MINOR: haproxy: Add missing free of server->(hostname|resolvers_id)\n    - BUG/MINOR: haproxy: Free proxy->unique_id_header during deinit\n    - BUG/MINOR: haproxy: Free srule->file during deinit\n    - BUG/MINOR: haproxy: Free srule->expr during deinit\n    - BUG/MINOR: sample: Free str.area in smp_check_const_bool\n    - BUG/MINOR: sample: Free str.area in smp_check_const_meth\n    - CLEANUP: haproxy: Free proxy_deinit_list in deinit()\n    - CLEANUP: haproxy: Free post_deinit_list in deinit()\n    - CLEANUP: haproxy: Free server_deinit_list in deinit()\n    - CLEANUP: haproxy: Free post_server_check_list in deinit()\n    - CLEANUP: Add static void vars_deinit()\n    - CLEANUP: Add static void hlua_deinit()\n    - CLEANUP: contrib/prometheus-exporter: typo fixes for ssl reuse metric\n    - BUG/MEDIUM: lists: add missing store barrier on MT_LIST_BEHEAD()\n    - BUG/MEDIUM: lists: add missing store barrier in MT_LIST_ADD/MT_LIST_ADDQ\n    - MINOR: tcp: Support TCP keepalive parameters customization\n    - BUILD: tcp: condition TCP keepalive settings to platforms providing them\n    - MINOR: lists: rename some MT_LIST operations to clarify them\n    - MINOR: buffer: use MT_LIST_ADDQ() for buffer_wait lists additions\n    - MINOR: connection: use MT_LIST_ADDQ() to add connections to idle lists\n    - MINOR: tasks: use MT_LIST_ADDQ() when killing tasks.\n    - CONTRIB: da: fix memory leak in dummy function da_atlas_open()\n    - CI: travis-ci: speed up osx build by running brew scripted, switch to latest osx image\n    - BUG/MEDIUM: mux-h2: Don't add private connections in available connection list\n    - BUG/MEDIUM: mux-fcgi: Don't add private connections in available connection list\n    - MINOR: connection: Set the SNI on server connections before installing the mux\n    - MINOR: connection: Set new connection as private on reuse never\n    - MINOR: connection: Add a wrapper to mark a connection as private\n    - MEDIUM: connection: Add private connections synchronously in session server list\n    - MINOR: connection: Use a dedicated function to look for a session's connection\n    - MINOR: connection: Set the conncetion target during its initialisation\n    - MINOR: session: Take care to decrement idle_conns counter in session_unown_conn\n    - MINOR: server: Factorize code to deal with reuse of server idle connections\n    - MINOR: server: Factorize code to deal with connections removed from an idle list\n    - CLEANUP: connection: remove unused field idle_time from the connection struct\n    - BUG/MEDIUM: mux-h1: Continue to process request when switching in tunnel mode\n    - MINOR: raw_sock: Report the number of bytes emitted using the splicing\n    - MINOR: contrib/prometheus-exporter: Add missing global and per-server metrics\n    - MINOR: backend: Add sample fetches to get the server's weight\n    - BUG/MINOR: mux-fcgi: Handle empty STDERR record\n    - BUG/MINOR: mux-fcgi: Set conn state to RECORD_P when skipping the record padding\n    - BUG/MINOR: mux-fcgi: Set flags on the right stream field for empty FCGI_STDOUT\n    - BUG/MINOR: backend: fix potential null deref on srv_conn\n    - BUG/MEDIUM: log: issue mixing sampled to not sampled log servers.\n    - MEDIUM: udp: adds minimal proto udp support for message listeners.\n    - MEDIUM: log/sink: re-work and merge of build message API.\n    - MINOR: log: adds syslog udp message handler and parsing.\n    - MEDIUM: log: adds log forwarding section.\n    - MINOR: log: adds counters on received syslog messages.\n    - BUG/MEDIUM: fcgi-app: fix memory leak in fcgi_flt_http_headers\n    - BUG/MEDIUM: server: resolve state file handle leak on reload\n    - BUG/MEDIUM: server: fix possibly uninitialized state file on close\n    - BUG/MEDIUM: channel: Be aware of SHUTW_NOW flag when output data are peeked\n    - BUILD: config: address build warning on raspbian+rpi4\n    - BUG/MAJOR: tasks: make sure to always lock the shared wait queue if needed\n    - BUILD: config: fix again bugs gcc warnings on calloc\n\n2020/07/07 : 2.3-dev0\n    - [RELEASE] Released version 2.3-dev0\n    - MINOR: version: back to development, update status message\n\n2020/07/07 : 2.3-dev0\n    - exact copy of 2.2.0\n\n2020/07/07 : 2.2.0\n    - BUILD: mux-h2: fix typo breaking build when using DEBUG_LOCK\n    - CLEANUP: makefile: update the outdated list of DEBUG_xxx options\n    - BUILD: tools: make resolve_sym_name() return a const\n    - CLEANUP: auth: fix useless self-include of auth-t.h\n    - BUILD: tree-wide: cast arguments to tolower/toupper to unsigned char\n    - CLEANUP: assorted typo fixes in the code and comments\n    - WIP/MINOR: ssl: add sample fetches for keylog in frontend\n    - DOC: fix tune.ssl.keylog sample fetches array\n    - BUG/MINOR: ssl: check conn in keylog sample fetch\n    - DOC: configuration: various typo fixes\n    - MINOR: log: Remove unused case statement during the log-format string parsing\n    - BUG/MINOR: mux-h1: Fix the splicing in TUNNEL mode\n    - BUG/MINOR: mux-h1: Don't read data from a pipe if the mux is unable to receive\n    - BUG/MINOR: mux-h1: Disable splicing only if input data was processed\n    - BUG/MEDIUM: mux-h1: Disable splicing for the conn-stream if read0 is received\n    - MINOR: mux-h1: Improve traces about the splicing\n    - BUG/MINOR: backend: Remove CO_FL_SESS_IDLE if a client remains on the last server\n    - BUG/MEDIUM: connection: Don't consider new private connections as available\n    - BUG/MINOR: connection: See new connection as available only on reuse always\n    - DOC: configuration: remove obsolete mentions of H2 being converted to HTTP/1.x\n    - CLEANUP: ssl: remove unrelevant comment in smp_fetch_ssl_x_keylog()\n    - DOC: update INSTALL with new compiler versions\n    - DOC: minor update to coding style file\n    - MINOR: version: mention that it's an LTS release now\n\n2020/07/04 : 2.2-dev12\n    - BUG/MINOR: mux_h2: don't lose the leaving trace in h2_io_cb()\n    - MINOR: cli: make \"show sess\" stop at the last known session\n    - CLEANUP: buffers: remove unused buffer_wq_lock lock\n    - BUG/MEDIUM: buffers: always allocate from the local cache first\n    - MINOR: connection: align toremove_{lock,connections} and cleanup into idle_conns\n    - CONTRIB: debug: add missing flags SI_FL_L7_RETRY & SI_FL_D_L7_RETRY\n    - BUG/MEDIUM: connections: Don't increase curr_used_conns for shared connections.\n    - BUG/MEDIUM: checks: Increment the server's curr_used_conns\n    - REORG: buffer: rename buffer.c to dynbuf.c\n    - REORG: includes: create tinfo.h for the thread_info struct\n    - CLEANUP: pool: only include the type files from types\n    - MINOR: pools: move the LRU cache heads to thread_info\n    - BUG/MINOR: debug: fix \"show fd\" null-deref when built with DEBUG_FD\n    - MINOR: stats: add 3 new output values for the per-server idle conn state\n    - MINOR: activity: add per-thread statistics on FD takeover\n    - BUG/MINOR: server: start cleaning idle connections from various points\n    - MEDIUM: server: improve estimate of the need for idle connections\n    - MINOR: stats: add the estimated need of concurrent connections per server\n    - BUG/MINOR: threads: Don't forget to init each thread toremove_lock.\n    - BUG/MEDIUM: lists: Lock the element while we check if it is in a list.\n    - Revert \"BUG/MEDIUM: lists: Lock the element while we check if it is in a list.\"\n    - BUG/MINOR: haproxy: don't wake already stopping threads on exit\n    - BUG/MINOR: server: always count one idle slot for current thread\n    - MEDIUM: server: use the two thresholds for the connection release algorithm\n    - BUG/MINOR: http-rules: Fix ACLs parsing for http deny rules\n    - BUG/MINOR: sched: properly cover for a rare MT_LIST_ADDQ() race\n    - MINOR: mux-h1: avoid taking the toremove_lock in on dying tasks\n    - MINOR: mux-h2: avoid taking the toremove_lock in on dying tasks\n    - MINOR: mux-fcgi: avoid taking the toremove_lock in on dying tasks\n    - MINOR: pools: increase MAX_BASE_POOLS to 64\n    - DOC: ssl: add \"allow-0rtt\" and \"ciphersuites\" in crt-list\n    - BUG/MEDIUM: pattern: Add a trailing \\0 to match strings only if possible\n    - BUG/MEDIUM: log-format: fix possible endless loop in parse_logformat_string()\n    - BUG/MINOR: proxy: fix dump_server_state()'s misuse of the trash\n    - BUG/MINOR: proxy: always initialize the trash in show servers state\n    - MINOR: cli/proxy: add a new \"show servers conn\" command\n    - MINOR: server: skip servers with no idle conns earlier\n    - BUG/MINOR: server: fix the connection release logic regarding nearly full conditions\n    - MEDIUM: server: add a new pool-low-conn server setting\n    - BUG/MEDIUM: backend: always search in the safe list after failing on the idle one\n    - MINOR: backend: don't always takeover from the same threads\n    - MINOR: sched: make sched->task_list_size atomic\n    - MEDIUM: sched: create a new TASK_KILLED task flag\n    - MEDIUM: sched: implement task_kill() to kill a task\n    - MEDIUM: mux-h1: use task_kill() during h1_takeover() instead of task_wakeup()\n    - MEDIUM: mux-h2: use task_kill() during h2_takeover() instead of task_wakeup()\n    - MEDIUM: mux-fcgi: use task_kill() during fcgi_takeover() instead of task_wakeup()\n    - MINOR: list: Add MT_LIST_DEL_SAFE_NOINIT() and MT_LIST_ADDQ_NOCHECK()\n    - CLEANUP: connections: rename the toremove_lock to takeover_lock\n    - MEDIUM: connections: Don't use a lock when moving connections to remove.\n    - DOC: configuration: add missing index entries for tune.pool-{low,high}-fd-ratio\n    - DOC: configuration: fix alphabetical ordering for tune.pool-{high,low}-fd-ratio\n    - MINOR: config: add a new tune.idle-pool.shared global setting.\n    - MINOR: 51d: silence a warning about null pointer dereference\n    - MINOR: debug: add a new \"debug dev memstats\" command\n    - MINOR: log-format: allow to preserve spacing in log format strings\n    - BUILD: debug: avoid build warnings with DEBUG_MEM_STATS\n    - BUG/MAJOR: sched: make sure task_kill() always queues the task\n    - BUG/MEDIUM: muxes: Make sure nobody stole the connection before using it.\n    - BUG/MEDIUM: cli/proxy: don't try to dump idle connection state if there's none\n    - BUILD: haproxy: fix build error when RLIMIT_AS is not set\n    - BUG/MAJOR: sched: make it work also when not building with DEBUG_STRICT\n    - MINOR: log: add time second fraction field to rfc5424 log timestamp.\n    - BUG/MINOR: log: missing timezone on iso dates.\n    - BUG/MEDIUM: server: don't kill all idle conns when there are not enough\n    - MINOR: sched: split tasklet_wakeup() into tasklet_wakeup_on()\n    - BUG/MEDIUM: connections: Set the tid for the old tasklet on takeover.\n    - BUG/MEDIUM: connections: Let the xprt layer know a takeover happened.\n    - BUG/MINOR: http_act: don't check capture id in backend (2)\n    - BUILD: makefile: disable threads by default on OpenBSD\n    - BUILD: peers: fix build warning with gcc 4.2.1\n    - CI: cirrus-ci: exclude slow reg-tests\n\n2020/06/26 : 2.2-dev11\n    - REGTEST: Add a simple script to tests errorfile directives in proxy sections\n    - BUG/MEDIUM: fcgi-app: Resolve the sink if a fcgi-app logs in a ring buffer\n    - BUG/MINOR: spoe: correction of setting bits for analyzer\n    - BUG/MINOR: cfgparse: Support configurations without newline at EOF\n    - MINOR: cfgparse: Warn on truncated lines / files\n    - BUG/MINOR: http_ana: clarify connection pointer check on L7 retry\n    - MINOR: debug: add a new DEBUG_FD build option\n    - BUG/MINOR: tasks: make sure never to exceed max_processed\n    - MINOR: task: add a new pointer to current tasklet queue\n    - BUG/MEDIUM: task: be careful not to run too many tasks at TL_URGENT\n    - BUG/MINOR: cfgparse: Fix argument reference in PARSE_ERR_TOOMANY message\n    - BUG/MINOR: cfgparse: Fix calculation of position for PARSE_ERR_TOOMANY message\n    - BUG/MEDIUM: ssl: fix ssl_bind_conf double free\n    - MINOR: ssl: free bind_conf_node in crtlist_free()\n    - MINOR: ssl: free the crtlist and the ckch during the deinit()\n    - BUG/MINOR: ssl: fix build with ckch_deinit() and crtlist_deinit()\n    - BUG/MINOR: ssl/cli: certs added from the CLI can't be deleted\n    - MINOR: ssl: move the ckch/crtlist deinit to ssl_sock.c\n    - MEDIUM: tasks: apply a fair CPU distribution between tasklet classes\n    - MINOR: tasks: make current_queue an index instead of a pointer\n    - MINOR: tasks: add a mask of the queues with active tasklets\n    - MINOR: tasks: pass the queue index to run_task_from_list()\n    - MINOR: tasks: make run_tasks_from_lists() scan the queues itself\n    - MEDIUM: tasks: add a tune.sched.low-latency option\n    - BUG/MEDIUM: ssl/cli: 'commit ssl cert' crashes when no private key\n    - BUG/MINOR: cfgparse: don't increment linenum on incomplete lines\n    - MINOR: tools: make parse_line() always terminate the args list\n    - BUG/MINOR: cfgparse: report extraneous args *after* the string is allocated\n    - MINOR: cfgparse: sanitize the output a little bit\n    - MINOR: cli/ssl: handle trailing slashes in crt-list commands\n    - MINOR: ssl: add the ssl_s_* sample fetches for server side certificate\n    - BUG/MEDIUM: http-ana: Don't loop trying to generate a malformed 500 response\n    - BUG/MINOR: stream-int: Don't wait to send truncated HTTP messages\n    - BUG/MINOR: http-ana: Set CF_EOI on response channel for generated responses\n    - BUG/MINOR: http-ana: Don't wait to send 1xx responses generated by HAProxy\n    - MINOR: spoe: Don't systematically create new applets if processing rate is low\n    - DOC: fix some typos in the ssl_s_{s|i}_dn documentation\n    - BUILD: fix ssl_sample.c when building against BoringSSL\n    - CI: travis-ci: switch BoringSSL builds to ninja\n    - CI: extend spellchecker whitelist\n    - DOC: assorted typo fixes in the documentation\n    - CLEANUP: assorted typo fixes in the code and comments\n    - MINOR: http: Add support for http 413 status\n    - REGTEST: ssl: tests the ssl_f_* sample fetches\n    - REGTEST: ssl: add some ssl_c_* sample fetches test\n    - DOC: ssl: update the documentation of \"commit ssl cert\"\n    - BUG/MINOR: cfgparse: correctly deal with empty lines\n    - BUG/MEDIUM: fetch: Fix hdr_ip misparsing IPv4 addresses due to missing NUL\n\n2020/06/19 : 2.2-dev10\n    - BUILD: include: add sys/types before netinet/tcp.h\n    - BUG/MEDIUM: log: don't hold the log lock during writev() on a file descriptor\n    - BUILD: Remove nowarn for warnings that do not trigger\n    - BUG/MEDIUM: pattern: fix thread safety of pattern matching\n    - BUILD: Re-enable -Wimplicit-fallthrough\n    - BUG/MINOR: ssl: fix ssl-{min,max}-ver with openssl < 1.1.0\n    - BUILD: thread: add parenthesis around values of locking macros\n    - BUILD: proto_uxst: shut up yet another gcc's absurd warning\n    - BUG/MEDIUM: checks: Fix off-by-one in allocation of SMTP greeting cmd\n    - CI: travis-ci: use \"-O1\" for clang builds\n    - MINOR: haproxy: Add void deinit_and_exit(int)\n    - MINOR: haproxy: Make use of deinit_and_exit() for clean exits\n    - BUG/MINOR: haproxy: Free rule->arg.vars.expr during deinit_act_rules\n    - BUILD: compression: make gcc 10 happy with free_zlib()\n    - BUILD: atomic: add string.h for memcpy() on ARM64\n    - BUG/MINOR: http: make smp_fetch_body() report that the contents may change\n    - BUG/MINOR: tcp-rules: tcp-response must check the buffer's fullness\n    - BUILD: haproxy: mark deinit_and_exit() as noreturn\n    - BUG/MAJOR: vars: Fix bogus free() during deinit() for http-request rules\n    - BUG/MEDIUM: ebtree: use a byte-per-byte memcmp() to compare memory blocks\n    - MINOR: tools: add a new configurable line parse, parse_line()\n    - BUG/MEDIUM: cfgparse: use parse_line() to expand/unquote/unescape config lines\n    - BUG/MEDIUM: cfgparse: stop after a reasonable amount of fatal error\n    - MINOR: http: do not close connections anymore after internal responses\n    - BUG/MINOR: cfgparse: Add missing fatal++ in PARSE_ERR_HEX case\n    - BUG/MINOR: spoe: add missing key length check before checking key names\n    - MINOR: version: put the compiler version output into version.c not haproxy.c\n    - MINOR: compiler: always define __has_feature()\n    - MINOR: version: report the presence of the compiler's address sanitizer\n    - BUILD: Fix build by including haproxy/global.h\n    - BUG/MAJOR: connection: always disable ready events once reported\n    - CLEANUP: activity: remove unused counter fd_lock\n    - DOC: fd: make it clear that some fields ordering must absolutely be respected\n    - MINOR: activity: report the number of times poll() reports I/O\n    - MINOR: activity: rename confusing poll_* fields in the output\n    - MINOR: fd: Fix a typo in a coment.\n    - BUG/MEDIUM: fd: Don't fd_stop_recv() a fd we don't own.\n    - BUG/MEDIUM: fd: Call fd_stop_recv() when we just got a fd.\n    - MINOR: activity: group the per-loop counters at the top\n    - MINOR: activity: rename the \"stream\" field to \"stream_calls\"\n    - MEDIUM: fd: refine the fd_takeover() migration lock\n    - MINOR: fd: slightly optimize the fd_takeover double-CAS loop\n    - MINOR: fd: factorize the fd_takeover() exit path to make it safer\n    - MINOR: peers: do not use localpeer as an array anymore\n    - MEDIUM: peers: add the \"localpeer\" global option\n    - MEDIUM: fd: add experimental support for edge-triggered polling\n    - CONTRIB: debug: add the missing flags CO_FL_SAFE_LIST and CO_FL_IDLE_LIST\n    - MINOR: haproxy: process signals before runnable tasks\n    - MEDIUM: tasks: clean up the front side of the wait queue in wake_expired_tasks()\n    - MEDIUM: tasks: also process late wakeups in process_runnable_tasks()\n    - BUG/MINOR: cli: allow space escaping on the CLI\n    - BUG/MINOR: mworker/cli: fix the escaping in the master CLI\n    - BUG/MINOR: mworker/cli: fix semicolon escaping in master CLI\n    - REGTEST: http-rules: test spaces in ACLs\n    - REGTEST: http-rules: test spaces in ACLs with master CLI\n    - BUG/MAJOR: init: properly compute the default global.maxpipes value\n    - MEDIUM: map: make the \"clear map\" operation yield\n    - BUG/MEDIUM: stream-int: fix loss of CO_SFL_MSG_MORE flag in forwarding\n    - MINOR: mux_h1: Set H1_F_CO_MSG_MORE if we know we have more to send.\n    - BUG/MINOR: systemd: Wait for network to be online\n    - DOC: configuration: Unindent non-code sentences in the protobuf example\n    - DOC: configuration: http-check send was missing from matrix\n\n2020/06/11 : 2.2-dev9\n    - BUG/MINOR: http-htx: Don't forget to release the http reply in release function\n    - BUG/MINOR: http-htx: Fix a leak on error path during http reply parsing\n    - MINOR: checks: Remove dead code from process_chk_conn()\n    - REGTESTS: checks: Fix tls_health_checks when IPv6 addresses are used\n    - REGTESTS: Add missing OPENSSL to REQUIRE_OPTIONS for lua/txn_get_priv\n    - MINOR: lua: Use vars_unset_by_name_ifexist()\n    - CLEANUP: vars: Remove void vars_unset_by_name(const char*, size_t, struct sample*)\n    - MINOR: vars: Make vars_(un|)set_by_name(_ifexist|) return a success value\n    - MINOR: lua: Make `set_var()` and `unset_var()` return success\n    - MEDIUM: lua: Add `ifexist` parameter to `set_var`\n    - MEDIUM: ring: new section ring to declare custom ring buffers.\n    - REGTESTS: Add missing OPENSSL to REQUIRE_OPTIONS for compression/lua_validation\n    - REGTESTS: Require the version 2.2 to execute lua/set_var\n    - BUG/MEDIUM: checks: Refresh the conn-stream and the connection after a connect\n    - MINOR: checks: Remove useless tests on the connection and conn-stream\n    - BUG/MEDIUM: contrib/spoa: do not register python3.8 if --embed fail\n    - BUG/MEDIUM: connection: Ignore PP2 unique ID for stream-less connections\n    - BUG/MINOR: connection: Always get the stream when available to send PP2 line\n    - BUG/MEDIUM: backend: set the connection owner to the session when using alpn.\n    - MINOR: pools: compute an estimate of each pool's average needed objects\n    - MEDIUM: pools: directly free objects when pools are too much crowded\n    - REGTEST: Add connection/proxy_protocol_send_unique_id_alpn\n    - MINOR: http-ana: Make the function http_reply_to_htx() public\n    - MINOR: http-ana: Use proxy's error replies to emit 401/407 responses\n    - MINOR: http-rules: Use an action function to eval http-request auth rules\n    - CLEANUP: http: Remove unused HTTP message templates\n    - BUG/MEDIUM: checks: Don't blindly subscribe for receive if waiting for connect\n    - MINOR: checks: I/O callback function only rely on the data layer wake callback\n    - BUG/MINOR: lua: Add missing string length for lua sticktable lookup\n    - BUG/MEDIUM: logs: fix trailing zeros on log message.\n    - CI: cirrus-ci: skip reg-tests/connection/proxy_protocol_send_unique_id_alpn.vtc on CentOS 6\n    - BUG/MINOR: nameservers: fix error handling in parsing of resolv.conf\n    - BUG/MEDIUM: checks: Don't add a tcpcheck ruleset twice in the shared tree\n    - MEDIUM: ssl: use TLSv1.2 as the minimum default on bind lines\n    - CLEANUP: pools: use the regular lock for the flush operation on lockless pools\n    - SCRIPTS: publish-release: pass -n to gzip to remove timestamp\n    - MINOR: ring: re-work ring attach generic API.\n    - BUG/MINOR: error on unknown statement in ring section.\n    - MEDIUM: ring: add server statement to forward messages from a ring\n    - MEDIUM: ring: add new srv statement to support octet counting forward\n    - MINOR: ssl: set ssl-min-ver in ambiguous configurations\n    - CLEANUP: ssl: remove comment from dump_crtlist_sslconf()\n    - BUILD: sink: address build warning on 32-bit architectures\n    - BUG/MINOR: peers: fix internal/network key type mapping.\n    - CLEANUP: regex: remove outdated support for regex actions\n    - Revert \"MINOR: ssl: rework add cert chain to CTX to be libssl independent\"\n    - MINOR: mux-h1/proxy: Add a proxy option to disable clear h2 upgrade\n    - BUG/MEDIUM: lua: Reset analyse expiration timeout before executing a lua action\n    - DOC: add a line about comments in crt-list\n    - BUG/MEDIUM: hlua: Lock pattern references to perform set/add/del operations\n    - BUG/MINOR: checks: Fix test on http-check rulesets during config validity check\n    - BUG/MEDIUM: contrib/prometheus-exporter: Properly set flags to dump metrics\n    - BUG/MEDIUM: mworker: fix the copy of options in copy_argv()\n    - BUG/MINOR: init: -x can have a parameter starting with a dash\n    - BUG/MINOR: init: -S can have a parameter starting with a dash\n    - BUG/MEDIUM: mworker: fix the reload with an -- option\n    - BUG/MINOR: ssl: fix a trash buffer leak in some error cases\n    - BUG/MINOR: mworker: fix a memleak when execvp() failed\n    - MINOR: sample: Add secure_memcmp converter\n    - REORG: ebtree: move the C files from ebtree/ to src/\n    - REORG: ebtree: move the include files from ebtree to include/import/\n    - REORG: ebtree: clean up remains of the ebtree/ directory\n    - REORG: include: create new file haproxy/api-t.h\n    - REORG: include: create new file haproxy/api.h\n    - REORG: include: update all files to use haproxy/api.h or api-t.h if needed\n    - CLEANUP: include: remove common/config.h\n    - CLEANUP: include: remove unused template.h\n    - REORG: include: move MIN/MAX from tools.h to compat.h\n    - REORG: include: move SWAP/MID_RANGE/MAX_RANGE from tools.h to standard.h\n    - CLEANUP: include: remove unused common/tools.h\n    - REORG: include: move the base files from common/ to haproxy/\n    - REORG: include: move version.h to haproxy/\n    - REORG: include: move base64.h, errors.h and hash.h from common to to haproxy/\n    - REORG: include: move openssl-compat.h from common/ to haproxy/\n    - REORG: include: move ist.h from common/ to import/\n    - REORG: include: move the BUG_ON() code to haproxy/bug.h\n    - REORG: include: move debug.h from common/ to haproxy/\n    - CLEANUP: debug: drop unused function p_malloc()\n    - REORG: include: split buf.h into haproxy/buf-t.h and haproxy/buf.h\n    - REORG: include: move istbuf.h to haproxy/\n    - REORG: include: split mini-clist into haproxy/list and list-t.h\n    - REORG: threads: extract atomic ops from hathreads.h\n    - CLEANUP: threads: remove a few needless includes of hathreads.h\n    - REORG: include: split hathreads into haproxy/thread.h and haproxy/thread-t.h\n    - CLEANUP: thread: rename __decl_hathreads() to __decl_thread()\n    - REORG: include: move time.h from common/ to haproxy/\n    - REORG: include: move integer manipulation functions from standard.h to intops.h\n    - CLEANUP: include: remove excessive includes of common/standard.h\n    - REORG: include: move freq_ctr to haproxy/\n    - CLEANUP: pool: include freq_ctr.h and remove locally duplicated functions\n    - REORG: memory: move the pool type definitions to haproxy/pool-t.h\n    - REORG: memory: move the OS-level allocator to haproxy/pool-os.h\n    - MINOR: memory: don't let __pool_get_first() pick from the cache\n    - MEDIUM: memory: don't let pool_put_to_cache() free the objects itself\n    - MINOR: memory: move pool-specific path of the locked pool_free() to __pool_free()\n    - MEDIUM: memory: make local pools independent on lockless pools\n    - REORG: include: move common/memory.h to haproxy/pool.h\n    - REORG: include: move common/chunk.h to haproxy/chunk.h\n    - REORG: include: move activity to haproxy/\n    - REORG: include: move common/buffer.h to haproxy/dynbuf{,-t}.h\n    - REORG: include: move common/net_helper.h to haproxy/net_helper.h\n    - REORG: include: move common/namespace.h to haproxy/namespace{,-t}.h\n    - REORG: include: split common/regex.h into haproxy/regex{,-t}.h\n    - REORG: include: split common/xref.h into haproxy/xref{,-t}.h\n    - REORG: include: move common/ticks.h to haproxy/ticks.h\n    - REORG: include: split common/http.h into haproxy/http{,-t}.h\n    - REORG: include: split common/http-hdr.h into haproxy/http-hdr{,-t}.h\n    - REORG: include: move common/h1.h to haproxy/h1.h\n    - REORG: include: split common/htx.h into haproxy/htx{,-t}.h\n    - REORG: include: move hpack*.h to haproxy/ and split hpack-tbl\n    - REORG: include: move common/h2.h to haproxy/h2.h\n    - REORG: include: move common/fcgi.h to haproxy/\n    - REORG: include: move protocol.h to haproxy/protocol{,-t}.h\n    - REORG: tools: split common/standard.h into haproxy/tools{,-t}.h\n    - REORG: include: move dict.h to hparoxy/dict{,-t}.h\n    - REORG: include: move shctx to haproxy/shctx{,-t}.h\n    - REORG: include: move port_range.h to haproxy/port_range{,-t}.h\n    - REORG: include: move fd.h to haproxy/fd{,-t}.h\n    - REORG: include: move ring to haproxy/ring{,-t}.h\n    - REORG: include: move sink.h to haproxy/sink{,-t}.h\n    - REORG: include: move pipe.h to haproxy/pipe{,-t}.h\n    - CLEANUP: include: remove empty raw_sock.h\n    - REORG: include: move proto_udp.h to haproxy/proto_udp{,-t}.h\n    - REORG: include: move proto/proto_sockpair.h to haproxy/proto_sockpair.h\n    - REORG: include: move compression.h to haproxy/compression{,-t}.h\n    - REORG: include: move h1_htx.h to haproxy/h1_htx.h\n    - REORG: include: move http_htx.h to haproxy/http_htx{,-t}.h\n    - REORG: include: move hlua.h to haproxy/hlua{,-t}.h\n    - REORG: include: move hlua_fcn.h to haproxy/hlua_fcn.h\n    - REORG: include: move action.h to haproxy/action{,-t}.h\n    - REORG: include: move arg.h to haproxy/arg{,-t}.h\n    - REORG: include: move auth.h to haproxy/auth{,-t}.h\n    - REORG: include: move dns.h to haproxy/dns{,-t}.h\n    - REORG: include: move flt_http_comp.h to haproxy/\n    - REORG: include: move counters.h to haproxy/counters-t.h\n    - REORG: include: split mailers.h into haproxy/mailers{,-t}.h\n    - REORG: include: move capture.h to haproxy/capture{,-t}.h\n    - REORG: include: move frontend.h to haproxy/frontend.h\n    - REORG: include: move obj_type.h to haproxy/obj_type{,-t}.h\n    - REORG: include: move http_rules.h to haproxy/http_rules.h\n    - CLEANUP: include: remove unused mux_pt.h\n    - REORG: include: move mworker.h to haproxy/mworker{,-t}.h\n    - REORG: include: move ssl_utils.h to haproxy/ssl_utils.h\n    - REORG: include: move ssl_ckch.h to haproxy/ssl_ckch{,-t}.h\n    - REORG: move ssl_crtlist.h to haproxy/ssl_crtlist{,-t}.h\n    - REORG: include: move lb_chash.h to haproxy/lb_chash{,-t}.h\n    - REORG: include: move lb_fas.h to haproxy/lb_fas{,-t}.h\n    - REORG: include: move lb_fwlc.h to haproxy/lb_fwlc{,-t}.h\n    - REORG: include: move lb_fwrr.h to haproxy/lb_fwrr{,-t}.h\n    - REORG: include: move listener.h to haproxy/listener{,-t}.h\n    - REORG: include: move pattern.h to haproxy/pattern{,-t}.h\n    - REORG: include: move map to haproxy/map{,-t}.h\n    - REORG: include: move payload.h to haproxy/payload.h\n    - REORG: include: move sample.h to haproxy/sample{,-t}.h\n    - REORG: include: move protocol_buffers.h to haproxy/protobuf{,-t}.h\n    - REORG: include: move vars.h to haproxy/vars{,-t}.h\n    - REORG: include: split global.h into haproxy/global{,-t}.h\n    - REORG: include: move task.h to haproxy/task{,-t}.h\n    - REORG: include: move proto_tcp.h to haproxy/proto_tcp.h\n    - REORG: include: move signal.h to haproxy/signal{,-t}.h\n    - REORG: include: move tcp_rules.h to haproxy/tcp_rules.h\n    - REORG: include: move connection.h to haproxy/connection{,-t}.h\n    - REORG: include: move checks.h to haproxy/check{,-t}.h\n    - REORG: include: move http_fetch.h to haproxy/http_fetch.h\n    - REORG: include: move peers.h to haproxy/peers{,-t}.h\n    - REORG: include: move stick_table.h to haproxy/stick_table{,-t}.h\n    - REORG: include: move session.h to haproxy/session{,-t}.h\n    - REORG: include: move trace.h to haproxy/trace{,-t}.h\n    - REORG: include: move acl.h to haproxy/acl.h{,-t}.h\n    - REORG: include: split common/uri_auth.h into haproxy/uri_auth{,-t}.h\n    - REORG: move applet.h to haproxy/applet{,-t}.h\n    - REORG: include: move stats.h to haproxy/stats{,-t}.h\n    - REORG: include: move cli.h to haproxy/cli{,-t}.h\n    - REORG: include: move lb_map.h to haproxy/lb_map{,-t}.h\n    - REORG: include: move ssl_sock.h to haproxy/ssl_sock{,-t}.h\n    - REORG: include: move stream_interface.h to haproxy/stream_interface{,-t}.h\n    - REORG: include: move channel.h to haproxy/channel{,-t}.h\n    - REORG: include: move http_ana.h to haproxy/http_ana{,-t}.h\n    - REORG: include: move filters.h to haproxy/filters{,-t}.h\n    - REORG: include: move fcgi-app.h to haproxy/fcgi-app{,-t}.h\n    - REORG: include: move log.h to haproxy/log{,-t}.h\n    - REORG: include: move proxy.h to haproxy/proxy{,-t}.h\n    - REORG: include: move spoe.h to haproxy/spoe{,-t}.h\n    - REORG: include: move backend.h to haproxy/backend{,-t}.h\n    - REORG: include: move queue.h to haproxy/queue{,-t}.h\n    - REORG: include: move server.h to haproxy/server{,-t}.h\n    - REORG: include: move stream.h to haproxy/stream{,-t}.h\n    - REORG: include: move cfgparse.h to haproxy/cfgparse.h\n    - CLEANUP: hpack: export debug functions and move inlines to .h\n    - REORG: check: move the e-mail alerting code to mailers.c\n    - REORG: check: move tcpchecks away from check.c\n    - REORG: check: move email_alert* from proxy-t.h to mailers-t.h\n    - REORG: check: extract the external checks from check.{c,h}\n    - CLEANUP: include: don't include stddef.h directly\n    - CLEANUP: include: don't include proxy-t.h in global-t.h\n    - CLEANUP: include: move sample_data out of sample-t.h\n    - REORG: include: move the error reporting functions to from log.h to errors.h\n    - BUILD: reorder objects in the Makefile for faster builds\n    - CLEANUP: compiler: add a THREAD_ALIGNED macro and use it where appropriate\n    - CLEANUP: include: make atomic.h part of the base API\n    - REORG: include: move MAX_THREADS to defaults.h\n    - REORG: include: move THREAD_LOCAL and __decl_thread() to compiler.h\n    - CLEANUP: include: tree-wide alphabetical sort of include files\n    - REORG: include: make list-t.h part of the base API\n    - REORG: dgram: rename proto_udp to dgram\n\n2020/05/22 : 2.2-dev8\n    - MINOR: checks: Improve report of unexpected errors for expect rules\n    - MEDIUM: checks: Add matching on log-format string for expect rules\n    - DOC: Fix req.body and co documentation to be accurate\n    - MEDIUM: checks: Remove dedicated sample fetches and use response ones instead\n    - CLEANUP: checks: sort and rename tcpcheck_expect_type types\n    - MINOR: checks: Use dedicated actions to send log-format strings in send rules\n    - MINOR: checks: Simplify matching on HTTP headers in HTTP expect rules\n    - MINOR: checks/sample: Remove unnecessary tests on the sample session\n    - REGTEST: checks: Adapt SSL error message reported when connection is rejected\n    - MINOR: mworker: replace ha_alert by ha_warning when exiting successfuly\n    - MINOR: checks: Support log-format string to set the URI for HTTP send rules\n    - MINOR: checks: Support log-format string to set the body for HTTP send rules\n    - DOC: Be more explicit about configurable check ok/error/timeout status\n    - MINOR: checks: Make matching on HTTP headers for expect rules less obscure\n    - BUG/MEDIUM: lua: Fix dumping of stick table entries for STD_T_DICT\n    - BUG/MINOR: config: Make use_backend and use-server post-parsing less obscur\n    - REGTESTS: make the http-check-send test require version 2.2\n    - BUG/MINOR: http-ana: fix NTLM response parsing again\n    - BUG/MEDIUM: http_ana: make the detection of NTLM variants safer\n    - BUG/MINOR: cfgparse: Abort parsing the current line if an invalid \\x sequence is encountered\n    - MINOR: cfgparse: Improve error message for invalid \\x sequences\n    - CI: travis-ci: enable arm64 builds again\n    - MEDIUM: ssl: increase default-dh-param to 2048\n    - CI: travis-ci: skip pcre2 on arm64 build\n    - CI: travis-ci: extend the build time for SSL to 60 minutes\n    - CLEANUP: config: drop unused setting CONFIG_HAP_MEM_OPTIM\n    - CLEANUP: config: drop unused setting CONFIG_HAP_INLINE_FD_SET\n    - CLENAUP: config: move CONFIG_HAP_LOCKLESS_POOLS out of config.h\n    - CLEANUP: remove THREAD_LOCAL from config.h\n    - CI: travis-ci: upgrade LibreSSL versions\n    - DOC: assorted typo fixes in the documentation\n    - CI: extend spellchecker whitelist\n    - CLEANUP: assorted typo fixes in the code and comments\n    - MAJOR: contrib: porting spoa_server to support python3\n    - BUG/MEDIUM: checks: Subscribe to I/O events on an unfinished connect\n    - BUG/MINOR: checks: Don't subscribe to I/O events if it is already done\n    - BUG/MINOR: checks: Rely on next I/O oriented rule when waiting for a connection\n    - MINOR: checks: Don't try to send outgoing data if waiting to be able to send\n    - MINOR: sample: Move aes_gcm_dec implementation into sample.c\n    - MINOR: sample: Add digest and hmac converters\n    - BUG/MEDIUM: checks: Subscribe to I/O events only if a mux was installed\n    - BUG/MINOR: sample/ssl: Fix digest converter for openssl < 1.1.0\n    - BUG/MINOR: pools: use %u not %d to report pool stats in \"show pools\"\n    - BUG/MINOR: pollers: remove uneeded free in global init\n    - CLEANUP: select: enhance readability in init\n    - BUG/MINOR: soft-stop: always wake up waiting threads on stopping\n    - MINOR: soft-stop: let the first stopper only signal other threads\n    - BUILD: select: only declare existing local labels to appease clang\n    - BUG/MEDIUM: streams: Remove SF_ADDR_SET if we're retrying due to L7 retry.\n    - BUG/MEDIUM: stream: Only allow L7 retries when using HTTP.\n    - DOC: retry-on can only be used with mode http\n    - MEDIUM: ssl: allow to register callbacks for SSL/TLS protocol messages\n    - MEDIUM: ssl: split ssl_sock_msgcbk() and use a new callback mechanism\n    - MINOR: ssl: add a new function ssl_sock_get_ssl_object()\n    - MEDIUM: ssl: use ssl_sock_get_ssl_object() in fetchers where appropriate\n    - REORG: ssl: move macros and structure definitions to ssl_sock.h\n    - CLEANUP: ssl: remove the shsess_* macros\n    - REORG: move the crt-list structures in their own .h\n    - REORG: ssl: move the ckch structures to types/ssl_ckch.h\n    - CLEANUP: ssl: add ckch prototypes in proto/ssl_ckch.h\n    - REORG: ssl: move crtlist functions to src/ssl_crtlist.c\n    - CLEANUP: ssl: avoid circular dependencies in ssl_crtlist.h\n    - REORG: ssl: move the ckch_store related functions to src/ssl_ckch.c\n    - REORG: ssl: move ckch_inst functions to src/ssl_ckch.c\n    - REORG: ssl: move the crt-list CLI functions in src/ssl_crtlist.c\n    - REORG: ssl: move the CLI 'cert' functions to src/ssl_ckch.c\n    - REORG: ssl: move ssl configuration to cfgparse-ssl.c\n    - MINOR: ssl: remove static keyword in some SSL utility functions\n    - REORG: ssl: move ssl_sock_ctx and fix cross-dependencies issues\n    - REORG: ssl: move sample fetches to src/ssl_sample.c\n    - REORG: ssl: move utility functions to src/ssl_utils.c\n    - DOC: ssl: update MAINTAINERS file\n    - CI: travis-ci: switch arm64 builds to use openssl from distro\n    - MINOR: stats: Prepare for more accurate moving averages\n    - MINOR: stats: Expose native cum_req metric for a server\n    - MEDIUM: stats: Enable more accurate moving average calculation for stats\n    - BUILD: ssl: include buffer common headers for ssl_sock_ctx\n    - BUILD: ssl: include errno.h in ssl_crtlist.c\n    - CLEANUP: acl: remove unused assignment\n    - DOC/MINOR: halog: Add long help info for ic flag\n    - BUILD: ssl: fix build without OPENSSL_NO_ENGINE\n    - DOC: SPOE is no longer experimental\n    - BUG/MINOR: cache: Don't needlessly test \"cache\" keyword in parse_cache_flt()\n    - MINOR: config: Don't dump keywords if argument is NULL\n    - MEDIUM: checks: Make post-41 the default mode for mysql checks\n    - BUG/MINOR: logs: prevent double line returns in some events.\n    - MEDIUM: sink: build header in sink_write for log formats\n    - MEDIUM: logs: buffer targets now rely on new sink_write\n    - MEDIUM: sink: add global statement to create a new ring (sink buffer)\n    - MEDIUM: hpack: use a pool for the hpack table\n    - BUG/MAJOR: mux-fcgi: Stop sending loop if FCGI stream is blocked for any reason\n    - BUG/MEDIUM: ring: write-lock the ring while attaching/detaching\n    - MINOR: applet: adopt the wait list entry from the CLI\n    - MINOR: ring: make the applet code not depend on the CLI\n    - Revert \"MEDIUM: sink: add global statement to create a new ring (sink buffer)\"\n    - CI: travis-ci: fix libslz download URL\n    - MINOR: ssl: split config and runtime variable for ssl-{min,max}-ver\n    - CLEANUP: http_ana: Remove unused TXN flags\n    - BUG/MINOR: http-rules: Mark http return rules as final\n    - MINOR: http-htx: Add http_reply type based on what is used for http return rules\n    - CLEANUP: http-htx: Rename http_error structure into http_error_msg\n    - MINOR: http-rules: Use http_reply structure for http return rules\n    - MINOR: http-htx: Use a dedicated function to release http_reply objects\n    - MINOR: http-htx: Use a dedicated function to parse http reply arguments\n    - MINOR: http-htx: Use a dedicated function to check http reply validity\n    - MINOR: http-ana: Use a dedicated function to send a response from an http reply\n    - MEDIUM: http-rules: Rely on http reply for http deny/tarpit rules\n    - MINOR: http-htx: Store default error messages in a global http reply array\n    - MINOR: http-htx: Store messages of an http-errors section in a http reply array\n    - MINOR: http-htx: Store errorloc/errorfile messages in http replies\n    - MINOR: proxy: Add references on http replies for proxy error messages\n    - MINOR: http-htx: Use http reply from the http-errors section\n    - MINOR: http-ana: Use a TXN flag to prevent after-response ruleset evaluation\n    - MEDIUM: http-ana: Use http replies for HTTP error messages\n    - CLEANUP: http-htx: Remove unused storage of error messages in buffers\n    - MINOR: htx: Add a function to copy a buffer in an HTX message\n    - CLEANUP: channel: Remove channel_htx_copy_msg() function\n    - MINOR: http-ana: Add a function to write an http reply in an HTX message\n    - MINOR: http-htx/proxy: Add http-error directive using http return syntax\n    - DOC: Fix \"errorfile\" description in the configuration manual\n    - BUG/MINOR: checks: Respect check-ssl param when a port or an addr is specified\n    - BUILD: hpack: make sure the hpack table can still be built standalone\n    - CONTRIB: hpack: make use of the simplified standalone HPACK API\n    - MINOR: connection: add pp2-never-send-local to support old PP2 behavior\n\n2020/05/05 : 2.2-dev7\n    - MINOR: version: Show uname output in display_version()\n    - CI: run weekly OpenSSL \"no-deprecated\" builds\n    - CLEANUP: log: fix comment of parse_logformat_string()\n    - DOC: Improve documentation on http-request set-src\n    - MINOR: ssl/cli: disallow SSL options for directory in 'add ssl crt-list'\n    - MINOR: ssl/cli: restrain certificate path when inserting into a directory\n    - MINOR: ssl: add ssl-skip-self-issued-ca global option\n    - BUG/MINOR: ssl: default settings for ssl server options are not used\n    - MINOR: config: add a global directive to set default SSL curves\n    - BUG/MEDIUM: http-ana: Handle NTLM messages correctly.\n    - DOC: internals: update the SSL architecture schema\n    - BUG/MINOR: tools: fix the i386 version of the div64_32 function\n    - BUG/MINOR: mux-fcgi/trace: fix wrong set of trace flags in fcgi_strm_add_eom()\n    - BUG/MINOR: http: make url_decode() optionally convert '+' to SP\n    - DOC: option logasap does not depend on mode\n    - MEDIUM: memory: make pool_gc() run under thread isolation\n    - MINOR: contrib: make the peers wireshark dissector a plugin\n    - BUG/MINOR: http-ana: Throw a 500 error if after-response ruleset fails on errors\n    - BUG/MINOR: check: Update server address and port to execute an external check\n    - MINOR: mini-clist: Add functions to iterate backward on a list\n    - MINOR: checks: Add a way to send custom headers and payload during http chekcs\n    - MINOR: server: respect warning and alert semantic\n    - BUG/MINOR: checks: Respect the no-check-ssl option\n    - BUG/MEDIUM: server/checks: Init server check during config validity check\n    - CLEANUP: checks: Don't export anymore init_check and srv_check_healthcheck_port\n    - BUG/MINOR: checks: chained expect will not properly wait for enough data\n    - BUG/MINOR: checks: Forbid tcp-check lines in default section as documented\n    - MINOR: checks: Use an enum to describe the tcp-check rule type\n    - MINOR: checks: Simplify connection flag parsing in tcp-check connect\n    - MEDIUM: checks: rewind to the first inverse expect rule of a chain on new data\n    - MINOR: checks: simplify tcp expect config parser\n    - MINOR: checks: add min-recv tcp-check expect option\n    - MINOR: checks: add linger option to tcp connect\n    - MINOR: checks: define a tcp expect type\n    - MEDIUM: checks: rewrite tcp-check expect block\n    - MINOR: checks: Stop xform buffers to null-terminated string for tcp-check rules\n    - MINOR: checks: add rbinary expect match type\n    - MINOR: checks: Simplify functions to get step id and comment\n    - MEDIUM: checks: capture groups in expect regexes\n    - MINOR: checks: Don't use a static tcp rule list head\n    - MEDIUM: checks: Use a non-comment rule iterator to get next rule\n    - MEDIUM: proxy/checks: Register a keyword to parse tcp-check rules\n    - MINOR: checks: Set the tcp-check rule index during parsing\n    - MINOR: checks: define tcp-check send type\n    - MINOR: checks: define a tcp-check connect type\n    - MEDIUM: checks: Add implicit tcp-check connect rule\n    - MAJOR: checks: Refactor and simplify the tcp-check loop\n    - MEDIUM: checks: Associate a session to each tcp-check healthcheck\n    - MINOR: checks/vars: Add a check scope for variables\n    - MEDIUM: checks: Parse custom action rules in tcp-checks\n    - MINOR: checks: Add support to set-var and unset-var rules in tcp-checks\n    - MINOR: checks: Add the sni option for tcp-check connect rules\n    - MINOR: checks: Add the via-socks4 option for tcp-check connect rules\n    - MINOR: checks: Add the alpn option for tcp-check connect rules\n    - MINOR: ssl: Export a generic function to parse an alpn string\n    - MINOR: checks: Add the default option for tcp-check connect rules\n    - MINOR: checks: Add the addr option for tcp-check connect rule\n    - MEDIUM: checks: Support expression to set the port\n    - MEDIUM: checks: Support log-format strings for tcp-check send rules\n    - MINOR: log: Don't depends on a stream to process samples in log-format string\n    - MINOR: log: Don't systematically set LW_REQ when a sample expr is added\n    - MEDIUM: checks: Add a shared list of tcp-check rules\n    - MINOR: sample: add htonl converter\n    - MINOR: sample: add cut_crlf converter\n    - MINOR: sample: add ltrim converter\n    - MINOR: sample: add rtrim converter\n    - MINOR: checks: Use a name for the healthcheck status enum\n    - MINOR: checks: Add option to tcp-check expect rules to customize error status\n    - MINOR: checks: Merge tcp-check comment rules with the others at config parsing\n    - MINOR: checks: Add a sample fetch to extract a block from the input check buffer\n    - MEDIUM: checks: Add on-error/on-success option on tcp-check expect rules\n    - MEDIUM: checks: Add status-code sample expression on tcp-check expect rules\n    - MINOR: checks: Relax the default option for tcp-check connect rules\n    - MEDIUM: checks: Add a list of vars to set before executing a tpc-check ruleset\n    - MINOR: checks: Export the tcpcheck_eval_ret enum\n    - MINOR: checks: Use dedicated function to handle onsuccess/onerror messages\n    - MINOR: checks: Support custom functions to eval a tcp-check expect rules\n    - MEDIUM: checks: Implement redis check using tcp-check rules\n    - MEDIUM: checks: Implement ssl-hello check using tcp-check rules\n    - MEDIUM: checks: Implement smtp check using tcp-check rules\n    - MEDIUM: checks: Implement postgres check using tcp-check rules\n    - MEDIUM: checks: Implement MySQL check using tcp-check rules\n    - MEDIUM: checks: Implement LDAP check using tcp-check rules\n    - MEDIUM: checks: Implement SPOP check using tcp-check rules\n    - MINOR: server/checks: Move parsing of agent keywords in checks.c\n    - MINOR: server/checks: Move parsing of server check keywords in checks.c\n    - MEDIUM: checks: Implement agent check using tcp-check rules\n    - REGTEST: Adapt regtests about checks to recent changes\n    - MINOR: Produce tcp-check info message for pure tcp-check rules only\n    - MINOR: checks: Add an option to set success status of tcp-check expect rules\n    - MINOR: checks: Improve log message of tcp-checks on success\n    - MINOR: proxy/checks: Move parsing of httpchk option in checks.c\n    - MINOR: proxy/checks: Move parsing of tcp-check option in checks.c\n    - MINOR: proxy/checks: Register a keyword to parse http-check rules\n    - MINOR: proxy/checks: Move parsing of external-check option in checks.c\n    - MINOR: proxy/checks: Register a keyword to parse external-check rules\n    - MEDIUM: checks: Use a shared ruleset to store tcp-check rules\n    - MINOR: checks: Use an indirect string to represent the expect matching string\n    - MINOR: checks: Introduce flags to configure in tcp-check expect rules\n    - MINOR: standard: Add my_memspn and my_memcspn\n    - MINOR: checks: Add a reverse non-comment rule iterator to get last rule\n    - MAJOR: checks: Implement HTTP check using tcp-check rules\n    - MINOR: checks: Make resume conditions more explicit in tcpcheck_main()\n    - MINOR: connection: Add macros to know if a conn or a cs uses an HTX mux\n    - MEDIUM: checks: Refactor how data are received in tcpcheck_main()\n    - MINOR: checks/obj_type: Add a new object type for checks\n    - BUG/MINOR: obj_type: Handle stream object in obj_base_ptr() function\n    - MINOR: checks: Use the check as origin when a session is created\n    - MINOR: checks: Add a mux proto to health-check and tcp-check connect rule\n    - MINOR: connection: Add a function to install a mux for a health-check\n    - MAJOR: checks: Use the best mux depending on the protocol for health checks\n    - MEDIUM: checks: Implement default TCP check using tcp-check rules\n    - MINOR: checks: Remove unused code about pure TCP checks\n    - CLEANUP: checks: Reorg checks.c file to be more readable\n    - REGTEST: Fix reg-tests about health-checks to adapt them to recent changes\n    - MINOR: ist: Add a function to retrieve the ist pointer\n    - MINOR: checks: Use ist API as far as possible\n    - BUG/MEDIUM: checks: Be sure to subscribe for sends if outgoing data remains\n    - MINOR: checks: Use a tree instead of a list to store tcp-check rulesets\n    - BUG/MINOR: checks: Send the right amount of outgoing data for HTTP checks\n    - REGTEST: Add scripts to test based tcp-check health-checks\n    - Revert \"MEDIUM: checks: capture groups in expect regexes\"\n    - DOC: Add documentation about comments for tcp-check and http-check directives\n    - DOC: Fix the tcp-check and http-check directives layout\n    - BUG/MEDIUM: checks: Use the mux protocol specified on the server line\n    - MINOR: checks: Support mux protocol definition for tcp and http health checks\n    - BUG/MINOR: mux-fcgi: Be sure to have a connection as session's origin to use it\n    - MINOR: checks: Support list of status codes on http-check expect rules\n    - BUG/MEDIUM: checks: Unsubscribe to mux events when a conn-stream is destroyed\n    - REGTEST: Add a script to validate agent checks\n    - BUG/MINOR: server: Fix server_finalize_init() to avoid unused variable\n    - BUG/MEDIUM: checks: unsubscribe for events on the old conn-stream on connect\n    - BUG/MINOR: checks: Only use ssl_sock_is_ssl() if compiled with SSL support\n    - BUG/MINOR: checks/server: use_ssl member must be signed\n    - BUG/MEDIUM: sessions: Always pass the mux context as argument to destroy a mux\n    - BUG/MEDIUM: checks: Destroy the conn-stream before the session\n    - BUG/MINOR: checks: Fix PostgreSQL regex on the authentication packet\n    - CI: cirrus-ci: remove reg-tests/checks/tcp-check-ssl.vtc on CentOS 6\n    - MINOR: checks: Support HTTP/2 version (without '.0') for http-check send rules\n    - MINOR: checks: Use ver keyword to specify the HTTP version for http checks\n    - BUG/MINOR: checks: Remove wrong variable redeclaration\n    - BUG/MINOR: checks: Properly handle truncated mysql server messages\n    - CLEANUP: checks: Remove unused code when ldap server message is parsed\n    - MINOR: checks: Make the use of the check's server more explicit on connect\n    - BUG/MINOR: checks: Avoid incompatible cast when a binary string is parsed\n    - BUG/MINOR: checks: Remove bad call to free() when an expect rule is parsed\n    - BUG/MINOR: checks: Don't lose warning on proxy capability\n    - MINOR: log: Add \"Tu\" timer\n    - BUG/MINOR: checks: Set the output buffer length before calling parse_binary()\n    - BUG/MEDIUM: mux-h1: make sure we always have a timeout on front connections\n    - REGTEST: ssl: test the client certificate authentication\n    - DOC: give a more accurate description of what check does\n    - BUG/MEDIUM: capture: capture-req/capture-res converters crash without a stream\n    - BUG/MEDIUM: capture: capture.{req,res}.* crash without a stream\n    - BUG/MEDIUM: http: the \"http_first_req\" sample fetch could crash without a steeam\n    - BUG/MEDIUM: http: the \"unique-id\" sample fetch could crash without a steeam\n    - CLEANUP: http: add a few comments on certain functions' assumptions about streams\n    - BUG/MEDIUM: sample: make the CPU and latency sample fetches check for a stream\n    - MINOR: http-htx: Export functions to update message authority and host\n    - MINOR: checks: Don't support multiple host header for http-check send rule\n    - MINOR: checks: Skip some headers for http-check send rules\n    - MINOR: checks: Keep the Host header and the request uri synchronized\n    - CLEANUP: checks: Fix checks includes\n    - DOC: Fix send rules in the http-check connect example\n    - DOC: Add more info about request formatting in http-check send description\n    - REGTEST: http-rules: Require PCRE or PCRE2 option to run map_redirect script\n    - REGTEST: ssl: remove curl from the \"add ssl crt-list\" test\n    - REGTEST: ssl: improve the \"set ssl cert\" test\n    - CLEANUP: ssl: silence a build warning when threads are disabled\n    - BUG/MEDIUM: listener: mark the thread as not stuck inside the loop\n    - MINOR: threads: export the POSIX thread ID in panic dumps\n    - BUG/MINOR: debug: properly use long long instead of long for the thread ID\n    - BUG/MEDIUM: shctx: really check the lock's value while waiting\n    - BUG/MEDIUM: shctx: bound the number of loops that can happen around the lock\n    - MINOR: stream: report the list of active filters on stream crashes\n    - BUG/MEDIUM: mux-fcgi: Return from detach if server don't keep the connection\n    - BUG/MEDIUM: mux_fcgi: Free the FCGI connection at the end of fcgi_release()\n    - BUG/MEDIUM: mux-fcgi: Fix wrong test on FCGI_CF_KEEP_CONN in fcgi_detach()\n    - BUG/MEDIUM: connections: force connections cleanup on server changes\n    - BUG/MEDIUM: h1: Don't compare host and authority if only h1 headers are parsed\n    - BUG/MEDIUM: ssl: fix the id length check within smp_fetch_ssl_fc_session_id()\n    - CLEANUP: connections: align function declaration\n    - BUG/MINOR: sample: Set the correct type when a binary is converted to a string\n    - MEDIUM: checks/http-fetch: Support htx prefetch from a check for HTTP samples\n    - DOC: Document the log-format parameter for tcp-check send/send-binary rules\n    - MINOR: checks: Add support of payload-based sample fetches\n    - MINOR: checks: Add support of be_id, be_name, srv_id and srv_name sample fetches\n    - MINOR: checks: Add support of server side ssl sample fetches\n    - MINOR: checks: Add support of HTTP response sample fetches\n    - MINOR: http-htx: Support different methods to look for header names\n    - MINOR: checks: Set by default expect rule status to UNKNOWN during parsing\n    - BUG/MINOR: checks: Support multiple HTTP expect rules\n    - REGTEST: checks: Fix sync condition for agent-check\n    - MEDIUM: checks: Support matching on headers for http-check expect rules\n    - MINOR: lua: allow changing port with set_addr\n    - BUG/MINOR: da: Fix HTX message prefetch\n    - BUG/MINOR: wurfl: Fix HTX message prefetch\n    - BUG/MINOR: 51d: Fix HTX message prefetch\n    - MINOR: ist: add istadv() function\n    - MINOR: ist: add istissame() function\n    - MINOR: istbuf: add ist2buf() function\n    - BUG/MINOR: threads: fix multiple use of argument inside HA_ATOMIC_CAS()\n    - BUG/MINOR: threads: fix multiple use of argument inside HA_ATOMIC_UPDATE_{MIN,MAX}()\n    - DOC: update intro.txt for 2.2\n    - DOC: intro: add a contacts section\n\n2020/04/17 : 2.2-dev6\n    - BUG/MINOR: ssl: memory leak when find_chain is NULL\n    - CLEANUP: ssl: rename ssl_get_issuer_chain to ssl_get0_issuer_chain\n    - MINOR: ssl: rework add cert chain to CTX to be libssl independent\n    - BUG/MINOR: peers: init bind_proc to 1 if it wasn't initialized\n    - BUG/MINOR: peers: avoid an infinite loop with peers_fe is NULL\n    - BUG/MINOR: peers: Use after free of \"peers\" section.\n    - CI: github actions: add weekly h2spec test\n    - BUG/MEDIUM: mux_h1: Process a new request if we already received it.\n    - MINOR: build: Fix build in mux_h1\n    - CLEANUP: remove obsolete comments\n    - BUG/MEDIUM: dns: improper parsing of aditional records\n    - MINOR: ssl: skip self issued CA in cert chain for ssl_ctx\n    - MINOR: listener: add so_name sample fetch\n    - MEDIUM: stream: support use-server rules with dynamic names\n    - MINOR: servers: Add a counter for the number of currently used connections.\n    - MEDIUM: connections: Revamp the way idle connections are killed\n    - MINOR: cli: add a general purpose pointer in the CLI struct\n    - MINOR: ssl: add a list of bind_conf in struct crtlist\n    - REORG: ssl: move SETCERT enum to ssl_sock.h\n    - BUG/MINOR: ssl: ckch_inst wrongly inserted in crtlist_entry\n    - REORG: ssl: move some functions above crtlist_load_cert_dir()\n    - MINOR: ssl: use crtlist_free() upon error in directory loading\n    - MINOR: ssl: add a list of crtlist_entry in ckch_store\n    - MINOR: ssl: store a ptr to crtlist in crtlist_entry\n    - MINOR: ssl/cli: update pointer to store in 'commit ssl cert'\n    - MEDIUM: ssl/cli: 'add ssl crt-list' command\n    - REGTEST: ssl/cli: test the 'add ssl crt-list' command\n    - BUG/MINOR: ssl: entry->ckch_inst not initialized\n    - REGTEST: ssl/cli: change test type to devel\n    - REGTEST: make the PROXY TLV validation depend on version 2.2\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUG/MINOR: stats: Fix color of draining servers on stats page\n    - DOC: internals: Fix spelling errors in filters.txt\n    - MINOR: connections: Don't mark conn flags 0x00000001 and 0x00000002 as unused.\n    - REGTEST: make the unique-id test depend on version 2.0\n    - BUG/MEDIUM: dns: Consider the fact that dns answers are case-insensitive\n    - MINOR: ssl: split the line parsing of the crt-list\n    - MINOR: ssl/cli: support filters and options in add ssl crt-list\n    - MINOR: ssl: add a comment above the ssl_bind_conf keywords\n    - REGTEST: ssl/cli: tests options and filters w/ add ssl crt-list\n    - REGTEST: ssl: pollute the crt-list file\n    - BUG/CRITICAL: hpack: never index a header into the headroom after wrapping\n    - BUG/MINOR: protocol_buffer: Wrong maximum shifting.\n    - CLEANUP: src/fd.c: mask setsockopt with DISGUISE\n    - BUG/MINOR: ssl/cli: initialize fcount int crtlist_entry\n    - REGTEST: ssl/cli: add other cases of 'add ssl crt-list'\n    - CLEANUP: assorted typo fixes in the code and comments\n    - DOC: management: add the new crt-list CLI commands\n    - BUG/MINOR: ssl/cli: fix spaces in 'show ssl crt-list'\n    - MINOR: ssl/cli: 'del ssl crt-list' delete an entry\n    - MINOR: ssl/cli: replace dump/show ssl crt-list by '-n' option\n    - CI: use better SSL library definition\n    - CI: travis-ci: enable DEBUG_STRICT=1 for CI builds\n    - CI: travis-ci: upgrade openssl to 1.1.1f\n    - MINOR: ssl: improve the errors when a crt can't be open\n    - CI: cirrus-ci: rename openssl package after it is renamed in FreeBSD\n    - CI: adopt openssl download script to download all versions\n    - BUG/MINOR: ssl/cli: lock the ckch structures during crt-list delete\n    - MINOR: ssl/cli: improve error for bundle in add/del ssl crt-list\n    - MINOR: ssl/cli: 'del ssl cert' deletes a certificate\n    - BUG/MINOR: ssl: trailing slashes in directory names wrongly cached\n    - BUG/MINOR: ssl/cli: memory leak in 'set ssl cert'\n    - CLEANUP: ssl: use the refcount for the SSL_CTX'\n    - CLEANUP: ssl/cli: use the list of filters in the crtlist_entry\n    - BUG/MINOR: ssl: memleak of the struct cert_key_and_chain\n    - CLEANUP: ssl: remove a commentary in struct ckch_inst\n    - MINOR: ssl: initialize all list in ckch_inst_new()\n    - MINOR: ssl: free instances and SNIs with ckch_inst_free()\n    - MINOR: ssl: replace ckchs_free() by ckch_store_free()\n    - BUG/MEDIUM: ssl/cli: trying to access to free'd memory\n    - MINOR: ssl: ckch_store_new() alloc and init a ckch_store\n    - MINOR: ssl: crtlist_new() alloc and initialize a struct crtlist\n    - REORG: ssl: move some free/new functions\n    - MINOR: ssl: crtlist_entry_{new, free}\n    - BUG/MINOR: ssl: ssl_conf always set to NULL on crt-list parsing\n    - MINOR: ssl: don't alloc ssl_conf if no option found\n    - BUG/MINOR: connection: always send address-less LOCAL PROXY connections\n    - BUG/MINOR: peers: Incomplete peers sections should be validated.\n    - MINOR: init: report in \"haproxy -c\" whether there were warnings or not\n    - MINOR: init: add -dW and \"zero-warning\" to reject configs with warnings\n    - MINOR: init: report the compiler version in haproxy -vv\n    - CLEANUP: assorted typo fixes in the code and comments\n    - MINOR: init: report the haproxy version and executable path once on errors\n    - DOC: Make how \"option redispatch\" works more explicit\n    - BUILD: Makefile: add linux-musl to TARGET\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CLEANUP: http: Fixed small typo in parse_http_return\n    - DOC: hashing: update link to hashing functions\n\n2020/03/23 : 2.2-dev5\n    - CLEANUP: ssl: is_default is a bit in ckch_inst\n    - BUG/MINOR: ssl/cli: sni_ctx' mustn't always be used as filters\n    - DOC: ssl: clarify security implications of TLS tickets\n    - CLEANUP: remove support for Linux i686 vsyscalls\n    - CLEANUP: drop support for USE_MY_ACCEPT4\n    - CLEANUP: remove support for USE_MY_EPOLL\n    - CLEANUP: remove support for USE_MY_SPLICE\n    - CLEANUP: remove the now unused common/syscall.h\n    - BUILD: make dladdr1 depend on glibc version and not __USE_GNU\n    - BUILD: wdt: only test for SI_TKILL when compiled with thread support\n    - BUILD: Makefile: the compiler-specific flags should all be in SPEC_CFLAGS\n    - CLEANUP: ssl: separate the directory loading in a new function\n    - BUG/MINOR: buffers: MT_LIST_DEL_SAFE() expects the temporary pointer.\n    - BUG/MEDIUM: mt_lists: Make sure we set the deleted element to NULL;\n    - MINOR: init: move the maxsock calculation code to compute_ideal_maxsock()\n    - MEDIUM: init: always try to push the FD limit when maxconn is set from -m\n    - BUG/MAJOR: list: fix invalid element address calculation\n    - BUILD: stream-int: fix a few includes dependencies\n    - MINOR: mt_lists: Appease gcc.\n    - MINOR: lists: Implement function to convert list => mt_list and mt_list => list\n    - MINOR: servers: Kill priv_conns.\n    - MINOR: lists: fix indentation.\n    - BUG/MEDIUM: random: align the state on 2*64 bits for ARM64\n    - BUG/MEDIUM: connections: Don't assume the connection has a valid session.\n    - BUG/MEDIUM: pools: Always update free_list in pool_gc().\n    - BUG/MINOR: haproxy: always initialize sleeping_thread_mask\n    - BUG/MINOR: listener/mq: do not dispatch connections to remote threads when stopping\n    - BUG/MINOR: haproxy/threads: try to make all threads leave together\n    - Revert \"BUILD: travis-ci: enable s390x builds\"\n    - BUILD: travis-ci: enable regular s390x builds\n    - DOC: proxy_protocol: Reserve TLV type 0x05 as PP2_TYPE_UNIQUE_ID\n    - MINOR: proxy_protocol: Ingest PP2_TYPE_UNIQUE_ID on incoming connections\n    - MEDIUM: proxy_protocol: Support sending unique IDs using PPv2\n    - CLEANUP: connection: Add blank line after declarations in PP handling\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CI: add spellcheck github action\n    - DOC: correct typo in alert message about rspirep\n    - CI: travis: switch linux builds to clang-9\n    - MINOR: debug: add a new DISGUISE() macro to pass a value as identity\n    - MINOR: debug: consume the write() result in BUG_ON() to silence a warning\n    - MINOR: use DISGUISE() everywhere we deliberately want to ignore a result\n    - BUILD: pools: silence build warnings with DEBUG_MEMORY_POOLS and DEBUG_UAF\n    - CLEANUP: connection: Stop directly setting an ist's .ptr\n    - CI: travis: revert to clang-7 for BoringSSL tests\n    - BUILD: on ARM, must be linked to libatomic.\n    - BUILD: makefile: fix regex syntax in ARM platform detection\n    - BUG/MEDIUM: peers: resync ended with RESYNC_PARTIAL in wrong cases.\n    - REORG: ssl: move ssl_sock_load_cert()\n    - MINOR: ssl: pass ckch_inst to ssl_sock_load_ckchs()\n    - MEDIUM: ssl: allow crt-list caching\n    - MINOR: ssl: directories are loaded like crt-list\n    - BUG/MINOR: ssl: can't open directories anymore\n    - BUG/MEDIUM: spoe: dup agent's engine_id string from trash.area\n    - MINOR: fd: Use a separate lock for logs instead of abusing the fd lock.\n    - MINOR: mux_pt: Don't try to remove the connection from the idle list.\n    - MINOR: ssl/cli: show/dump ssl crt-list\n    - BUG/MINOR: ssl/cli: free the trash chunk in dump_crtlist\n    - MEDIUM: fd: Introduce a running mask, and use it instead of the spinlock.\n    - BUG/MINOR: ssl: memory leak in crtlist_parse_file()\n    - MINOR: tasks: Provide the tasklet to the callback.\n    - BUG/MINOR: ssl: memleak of struct crtlist_entry\n    - BUG/MINOR: pattern: Do not pass len = 0 to calloc()\n    - BUILD: makefile: fix expression again to detect ARM platform\n    - CI: travis: re-enable ASAN on clang\n    - CI: travis: proper group output redirection together with travis_wait\n    - DOC: assorted typo fixes in the documentation\n    - MINOR: wdt: Move the definitions of WDTSIG and DEBUGSIG into types/signal.h.\n    - BUG/MEDIUM: wdt: Don't ignore WDTSIG and DEBUGSIG in __signal_process_queue().\n    - MINOR: memory: Change the flush_lock to a spinlock, and don't get it in alloc.\n    - MINOR: ssl/cli: 'new ssl cert' command\n    - MINOR: ssl/cli: show certificate status in 'show ssl cert'\n    - MEDIUM: sessions: Don't be responsible for connections anymore.\n    - MEDIUM: servers: Split the connections into idle, safe, and available.\n    - MINOR: fd: Implement fd_takeover().\n    - MINOR: connections: Add a new mux method, \"takeover\".\n    - MINOR: connections: Make the \"list\" element a struct mt_list instead of list.\n    - MINOR: connections: Add a flag to know if we're in the safe or idle list.\n    - MEDIUM: connections: Attempt to get idle connections from other threads.\n    - MEDIUM: mux_h1: Implement the takeover() method.\n    - MEDIUM: mux_h2: Implement the takeover() method.\n    - MEDIUM: mux_fcgi: Implement the takeover() method.\n    - MEDIUM: connections: Kill connections even if we are reusing one.\n    - BUG/MEDIUM: connections: Don't forget to decrement idle connection counters.\n    - BUG/MINOR: ssl: Do not free garbage pointers on memory allocation failure\n    - BUG/MINOR: ssl: Correctly add the 1 for the sentinel to the number of elements\n    - BUG/MINOR: ssl: crtlist_dup_filters() must return NULL with fcount == 0\n    - BUG/MEDIUM: build: Fix compilation by spelling decl correctly.\n    - BUILD/MEDIUM: fd: Declare fd_mig_lock as extern.\n    - CI: run travis-ci builds on push only, skip pull requests\n    - CI: temporarily disable unstable travis arm64 builds\n    - BUG/MINOR: ssl/cli: free BIO upon error in 'show ssl cert'\n    - BUG/MINOR: connections: Make sure we free the connection on failure.\n    - BUG/MINOR: ssl/cli: fix a potential NULL dereference\n    - BUG/MEDIUM: h1: Make sure we subscribe before going into idle list.\n    - BUG/MINOR: connections: Set idle_time before adding to idle list.\n    - MINOR: muxes: Note that we can't usee a connection when added to the srv idle.\n    - REGTEST: increase timeouts on the seamless-reload test\n    - BUG/MINOR: haproxy/threads: close a possible race in soft-stop detection\n    - CLEANUP: haproxy/threads: don't check global_tasks_mask twice\n\n2020/03/09 : 2.2-dev4\n    - MEDIUM: buffer: remove the buffer_wq lock\n    - MINOR: ssl: move find certificate chain code to its own function\n    - MINOR: ssl: resolve issuers chain later\n    - MINOR: ssl: resolve ocsp_issuer later\n    - MINOR: ssl/cli: \"show ssl cert\" command should print the \"Chain Filename:\"\n    - BUG/MINOR: h2: reject again empty :path pseudo-headers\n    - MINOR: wdt: always clear sigev_value to make valgrind happy\n    - MINOR: epoll: always initialize all of epoll_event to please valgrind\n    - BUG/MINOR: sample: Make sure to return stable IDs in the unique-id fetch\n    - BUG/MEDIUM: ssl: chain must be initialized with sk_X509_new_null()\n    - BUILD: cirrus-ci: suppress OS version check when installing packages\n    - BUG/MINOR: http_ana: make sure redirect flags don't have overlapping bits\n    - CLEANUP: fd: remove the FD_EV_STATUS aggregate\n    - CLEANUP: fd: remove some unneeded definitions of FD_EV_* flags\n    - MINOR: fd: merge the read and write error bits into RW error\n    - BUG/MINOR: dns: ignore trailing dot\n    - MINOR: contrib/prometheus-exporter: Add the last heathcheck duration metric\n    - BUG/MINOR: http-htx: Do case-insensive comparisons on Host header name\n    - MINOR: mux-h1: Remove useless case-insensitive comparisons\n    - MINOR: rawsock: always mark the FD not ready when we're certain it happens\n    - MEDIUM: connection: make the subscribe() call able to wakeup if ready\n    - MEDIUM: connection: don't stop receiving events in the FD handler\n    - MEDIUM: mux-h1: do not blindly wake up the tasklet at end of request anymore\n    - BUG/MINOR: arg: don't reject missing optional args\n    - MINOR: tools: make sure to correctly check the returned 'ms' in date2std_log\n    - MINOR: debug: report the task handler's pointer relative to main\n    - BUG/MEDIUM: debug: make the debug_handler check for the thread in threads_to_dump\n    - MINOR: haproxy: export main to ease access from debugger\n    - MINOR: haproxy: export run_poll_loop\n    - MINOR: task: export run_tasks_from_list\n    - BUILD: tools: remove obsolete and conflicting trace() from standard.c\n    - MINOR: tools: add new function dump_addr_and_bytes()\n    - MINOR: tools: add resolve_sym_name() to resolve function pointers\n    - MINOR: debug: use resolve_sym_name() to dump task handlers\n    - MINOR: cli: make \"show fd\" rely on resolve_sym_name()\n    - MEDIUM: debug: add support for dumping backtraces of stuck threads\n    - MINOR: debug: call backtrace() once upon startup\n    - MINOR: ssl: add \"ca-verify-file\" directive\n    - BUG/MINOR: wdt: do not return an error when the watchdog couldn't be enabled\n    - BUILD: Makefile: include librt before libpthread\n    - MEDIUM: wdt: fall back to CLOCK_REALTIME if CLOCK_THREAD_CPUTIME is not available\n    - MINOR: wdt: do not depend on USE_THREAD\n    - MINOR: debug: report the number of entries in the backtrace\n    - MINOR: debug: improve backtrace() on aarch64 and possibly other systems\n    - MINOR: debug: use our own backtrace function on clang+x86_64\n    - MINOR: debug: dump the whole trace if we can't spot the starting point\n    - BUILD: tools: unbreak resolve_sym_name() on non-GNU platforms\n    - BUILD: tools: rely on __ELF__ not USE_DL to enable use of dladdr()\n    - CLEANUP: contrib/spoa_example: Fix several typos\n    - BUILD: makefile: do not modify the build options during make reg-tests\n    - BUG/MEDIUM: connection: stop polling for sending when the event is ready\n    - MEDIUM: stream-int: make sure to try to immediately validate the connection\n    - MINOR: tcp/uxst/sockpair: only ask for I/O when really waiting for a connect()\n    - MEDIUM: connection: only call ->wake() for connect() without I/O\n    - OPTIM: connection: disable receiving on disabled events when the run queue is too high\n    - OPTIM: mux-h1: subscribe rather than waking up at a few other places\n    - REGTEST: Add unique-id reg-test\n    - MINOR: stream: Add stream_generate_unique_id function\n    - MINOR: stream: Use stream_generate_unique_id\n    - BUG/MINOR: connection/debug: do not enforce !event_type on subscribe() anymore\n    - MINOR: ssl/cli: support crt-list filters\n    - MINOR: ssl: reach a ckch_store from a sni_ctx\n    - DOC: fix incorrect indentation of http_auth_*\n    - BUG/MINOR: ssl-sock: do not return an uninitialized pointer in ckch_inst_sni_ctx_to_sni_filters\n    - MINOR: debug: add CLI command \"debug dev write\" to write an arbitrary size\n    - MINOR: ist: Add `IST_NULL` macro\n    - MINOR: ist: Add `int isttest(const struct ist)`\n    - MINOR: ist: Add `struct ist istalloc(size_t)` and `void istfree(struct ist*)`\n    - CLEANUP: Use `isttest()` and `istfree()`\n    - MINOR: ist: Add `struct ist istdup(const struct ist)`\n    - MINOR: proxy: Make `header_unique_id` a `struct ist`\n    - MEDIUM: stream: Make the `unique_id` member of `struct stream` a `struct ist`\n    - OPTIM: startup: fast unique_id allocation for acl.\n    - DOC: configuration.txt: fix various typos\n    - DOC: assorted typo fixes in the documentation and Makefile\n    - BUG/MINOR: init: make the automatic maxconn consider the max of soft/hard limits\n    - BUG/MAJOR: proxy_protocol: Properly validate TLV lengths\n    - CLEANUP: proxy_protocol: Use `size_t` when parsing TLVs\n    - MINOR: buf: Add function to insert a string at an absolute offset in a buffer\n    - MINOR: htx: Add a function to return a block at a specific offset\n    - MINOR: htx: Use htx_find_offset() to truncate an HTX message\n    - MINOR: flt_trace: Use htx_find_offset() to get the available payload length\n    - BUG/MINOR: filters: Use filter offset to decude the amount of forwarded data\n    - BUG/MINOR: filters: Forward everything if no data filters are called\n    - BUG/MEDIUM: cache/filters: Fix loop on HTX blocks caching the response payload\n    - BUG/MEDIUM: compression/filters: Fix loop on HTX blocks compressing the payload\n    - BUG/MINOR: http-ana: Reset request analysers on a response side error\n    - BUG/MINOR: lua: Abort when txn:done() is called from a Lua action\n    - BUG/MINOR: lua: Ignore the reserve to know if a channel is full or not\n    - MINOR: lua: Add function to know if a channel is a response one\n    - MINOR: lua: Stop using the lua txn in hlua_http_get_headers()\n    - MINOR: lua: Stop using the lua txn in hlua_http_rep_hdr()\n    - MINOR: lua: Stop using lua txn in hlua_http_del_hdr() and hlua_http_add_hdr()\n    - MINOR: lua: Remove the flag HLUA_TXN_HTTP_RDY\n    - MINOR: lua: Rename hlua_action_wake_time() to hlua_set_wake_time()\n    - BUG/MINOR: lua: Init the lua wake_time value before calling a lua function\n    - BUG/MINOR: http-rules: Return ACT_RET_ABRT to abort a transaction\n    - BUG/MINOR: http-rules: Preserve FLT_END analyzers on reject action\n    - BUG/MINOR: http-rules: Fix a typo in the reject action function\n    - MINOR: cache/filters: Initialize the cache filter when stream is created\n    - MINOR: compression/filters: Initialize the comp filter when stream is created\n    - BUG/MINOR: rules: Preserve FLT_END analyzers on silent-drop action\n    - BUG/MINOR: rules: Return ACT_RET_ABRT when a silent-drop action is executed\n    - BUG/MINOR: rules: Increment be_counters if backend is assigned for a silent-drop\n    - BUG/MINOR: http-rules: Abort transaction when a redirect is applied on response\n    - BUILD: buffer: types/{ring.h,checks.h} should include buf.h, not buffer.h\n    - BUILD: ssl: include mini-clist.h\n    - BUILD: global: must not include common/standard.h but only types/freq_ctr.h\n    - BUILD: freq_ctr: proto/freq_ctr needs to include common/standard.h\n    - BUILD: listener: types/listener.h must not include standard.h\n    - BUG/MEDIUM: random: initialize the random pool a bit better\n    - BUG/MEDIUM: random: implement per-thread and per-process random sequences\n    - Revert \"BUG/MEDIUM: random: implement per-thread and per-process random sequences\"\n    - BUILD: cirrus-ci: get rid of unstable freebsd images\n    - MINOR: tools: add 64-bit rotate operators\n    - BUG/MEDIUM: random: implement a thread-safe and process-safe PRNG\n    - MINOR: backend: use a single call to ha_random32() for the random LB algo\n    - BUG/MINOR: checks/threads: use ha_random() and not rand()\n    - MINOR: sample: make all bits random on the rand() sample fetch\n    - MINOR: tools: add a generic function to generate UUIDs\n    - DOC: fix typo about no-tls-tickets\n    - DOC: improve description of no-tls-tickets\n    - DOC: assorted typo fixes in the documentation\n    - CLEANUP: remove unused code in 'my_ffsl/my_flsl' functions\n\n2020/02/25 : 2.2-dev3\n    - SCRIPTS: announce-release: place the send command in the mail's header\n    - SCRIPTS: announce-release: allow the user to force to overwrite old files\n    - SCRIPTS: backport: fix the master branch detection\n    - BUG/MINOR: http-act: Set stream error flag before returning an error\n    - BUG/MINOR: http-act: Fix bugs on error path during parsing of return actions\n    - BUG/MEDIUM: ssl/cli: 'commit ssl cert' wrong SSL_CTX init\n    - BUG/MEDIUM: tcp-rules: Fix track-sc* actions for L4/L5 TCP rules\n    - DOC: schematic of the SSL certificates architecture\n    - BUG/MAJOR: mux-h2: don't wake streams after connection was destroyed\n    - BUG/MINOR: unix: better catch situations where the unix socket path length is close to the limit\n    - BUILD: cirrus-ci: switch to \"snap\" images to unify openssl naming\n    - BUILD: cirrus-ci: workaround \"pkg install\" bug\n    - BUILD: cirrus-ci: add ERR=1 to freebsd builds\n    - BUG/MINOR: connection: correctly retry I/O on signals\n    - CLEANUP: mini-clist: simplify nested do { while(1) {} } while (0)\n    - BUILD: http_act: cast file sizes when reporting file size error\n    - BUG/MEDIUM: listener: only consider running threads when resuming listeners\n    - BUG/MINOR: listener: enforce all_threads_mask on bind_thread on init\n    - BUG/MINOR: tcp: avoid closing fd when socket failed in tcp_bind_listener\n    - MINOR: build: add aix72-gcc build TARGET and power{8,9} CPUs\n    - BUILD: travis-ci: no more allowed failures for openssl-1.0.2\n    - BUILD: travis-ci: harden builds, add ERR=1 (warning ought to be errors)\n    - BUILD: scripts/build-ssl.sh: use \"uname\" instead of ${TRAVIS_OS_NAME}\n    - BUG/MINOR: tcp: don't try to set defaultmss when value is negative\n    - SCRIPTS: make announce-release executable again\n    - BUG/MINOR: namespace: avoid closing fd when socket failed in my_socketat\n    - BUG/MEDIUM: muxes: Use the right argument when calling the destroy method.\n    - BUG/MINOR: mux-fcgi: Forbid special characters when matching PATH_INFO param\n    - CLEANUP: ssl: remove unused functions in openssl-compat.h\n    - MINOR: mux-fcgi: Make the capture of the path-info optional in pathinfo regex\n    - MINOR: tools: add is_idchar() to tell if a char may belong to an identifier\n    - MINOR: chunk: implement chunk_strncpy() to copy partial strings\n    - MINOR: sample/acl: use is_idchar() to locate the fetch/conv name\n    - MEDIUM: arg: make make_arg_list() stop after its own arguments\n    - MEDIUM: arg: copy parsed arguments into the trash instead of allocating them\n    - MEDIUM: arg: make make_arg_list() support quotes in arguments\n    - MINOR: sample: make sample_parse_expr() able to return an end pointer\n    - MEDIUM: log-format: make the LF parser aware of sample expressions' end\n    - BUG/MINOR: arg: report an error if an argument is larger than bufsize\n    - SCRIPTS: announce-release: use mutt -H instead of -i to include the draft\n    - BUILD: enable ERR=1 in github cygwin builds\n    - BUG/MINOR: arg: fix again incorrect argument length check\n    - MINOR: sample: regsub now supports backreferences\n    - BUG/MINOR: tools: also accept '+' as a valid character in an identifier\n    - MINOR: http-htx: Add a function to retrieve the headers size of an HTX message\n    - MINOR: filters: Forward data only if the last filter forwards something\n    - BUG/MINOR: filters: Count HTTP headers as filtered data but don't forward them\n    - BUG/MINOR: http-htx: Don't return error if authority is updated without changes\n    - BUG/MINOR: stream: Don't incr frontend cum_req counter when stream is closed\n    - BUG/MINOR: sample: exit regsub() in case of trash allocation error\n    - MINOR: ssl: add \"issuers-chain-path\" directive.\n    - REGTESTS: use \"command -v\" instead of \"which\"\n    - BUG/MINOR: http-ana: Matching on monitor-uri should be case-sensitive\n    - MINOR: http-ana: Match on the path if the monitor-uri starts by a /\n    - BUG/MINOR: ssl: Stop passing dynamic strings as format arguments\n    - BUG/MAJOR: http-ana: Always abort the request when a tarpit is triggered\n    - BUG/MINOR: mux: do not call conn_xprt_stop_recv() on buffer shortage\n    - MINOR: checks: do not call conn_xprt_stop_send() anymore\n    - CLEANUP: epoll: place the struct epoll_event in the stack\n    - MEDIUM: connection: remove the intermediary polling state from the connection\n    - MINOR: raw_sock: directly call fd_stop_send() and not conn_xprt_stop_send()\n    - MINOR: tcp/uxst/sockpair: use fd_want_send() instead of conn_xprt_want_send()\n    - MINOR: connection: remove the last calls to conn_xprt_{want,stop}_*\n    - CLEANUP: connection: remove the definitions of conn_xprt_{stop,want}_{send,recv}\n    - MINOR: connection: introduce a new receive flag: CO_RFL_READ_ONCE\n    - MINOR: mux-h1: pass CO_RFL_READ_ONCE to the lower layers when relevant\n    - MINOR: ist: add an iststop() function\n    - BUG/MINOR: http: http-request replace-path duplicates the query string\n    - CLEANUP: sample: use iststop instead of a for loop\n    - BUG/MEDIUM: shctx: make sure to keep all blocks aligned\n    - MINOR: compiler: move CPU capabilities definition from config.h and complete them\n    - BUG/MEDIUM: ebtree: don't set attribute packed without unaligned access support\n    - CLEANUP: http/h1: rely on HA_UNALIGNED_LE instead of checking for CPU families\n    - BUILD: fix recent build failure on unaligned archs\n    - MINOR: ssl: load the key from a dedicated file\n    - BUG/MINOR: ssl: load .key in a directory only after PEM\n    - MINOR: compiler: drop special cases of likely/unlikely for older compilers\n    - CLEANUP: conn: Do not pass a pointer to likely\n    - CLEANUP: net_helper: Do not negate the result of unlikely\n    - BUILD: remove obsolete support for -mregparm / USE_REGPARM\n    - CLEANUP: cfgparse: Fix type of second calloc() parameter\n    - BUILD: ssl: only pass unsigned chars to isspace()\n    - BUILD: general: always pass unsigned chars to is* functions\n    - BUG/MINOR: sample: fix the json converter's endian-sensitivity\n    - BUG/MEDIUM: ssl: fix several bad pointer aliases in a few sample fetch functions\n    - CLEANUP: fd: use a union in fd_rm_from_fd_list() to shut aliasing warnings\n    - CLEANUP: cache: use read_u32/write_u32 to access the cache entry's hash\n    - CLEANUP: stick-tables: use read_u32() to display a node's key\n    - CLEANUP: sample: use read_u64() in ipmask() to apply an IPv6 mask\n    - MINOR: pattern: fix all remaining strict aliasing issues\n    - CLEANUP: lua: fix aliasing issues in the address matching code\n    - CLEANUP: connection: use read_u32() instead of a cast in the netscaler parser\n    - BUILD: makefile: re-enable strict aliasing\n    - BUG/MINOR: connection: make sure to correctly tag local PROXY connections\n    - MINOR: compiler: add new alignment macros\n    - BUILD: ebtree: improve architecture-specific alignment\n    - MINOR: config: mark global.debug as deprecated\n    - BUILD: travis-ci: enable s390x builds\n    - MINOR: ssl/cli: 'show ssl cert' displays the chain\n    - MINOR: ssl/cli: 'show ssl cert'displays the issuer in the chain\n    - MINOR: ssl/cli: reorder 'show ssl cert' output\n    - CLEANUP: ssl: move issuer_chain tree and definition\n    - DOC: proxy-protocol: clarify IPv6 address representation in the spec\n\n2020/02/07 : 2.2-dev2\n    - BUILD: CI: temporarily mark openssl-1.0.2 as allowed failure\n    - MEDIUM: cli: Allow multiple filter entries for \"show table\"\n    - BUG/MEDIUM: netscaler: Don't forget to allocate storage for conn->src/dst.\n    - BUG/MINOR: ssl: ssl_sock_load_pem_into_ckch is not consistent\n    - BUILD: stick-table: fix build errors introduced by last stick-table change\n    - BUG/MINOR: cli: Missing arg offset for filter data values.\n    - MEDIUM: streams: Always create a conn_stream in connect_server().\n    - MEDIUM: connections: Get ride of the xprt_done callback.\n    - CLEANUP: changelog: remove the duplicate entry for 2.2-dev1\n    - BUILD: CI: move cygwin builds to Github Actions\n    - MINOR: cli: Report location of errors or any extra data for \"show table\"\n    - BUG/MINOR: ssl/cli: free the previous ckch content once a PEM is loaded\n    - CLEANUP: backend: remove useless test for inexistent connection\n    - CLEANUP: backend: shut another false null-deref in back_handle_st_con()\n    - CLEANUP: stats: shut up a wrong null-deref warning from gcc 9.2\n    - BUG/MINOR: ssl: increment issuer refcount if in chain\n    - BUG/MINOR: ssl: memory leak w/ the ocsp_issuer\n    - BUG/MINOR: ssl: typo in previous patch\n    - BUG/MEDIUM: connections: Set CO_FL_CONNECTED in conn_complete_session().\n    - BUG/MINOR: ssl/cli: ocsp_issuer must be set w/ \"set ssl cert\"\n    - MEDIUM: connection: remove CO_FL_CONNECTED and only rely on CO_FL_WAIT_*\n    - BUG/MEDIUM: 0rtt: Only consider the SSL handshake.\n    - MINOR: stream-int: always report received shutdowns\n    - MINOR: connection: remove CO_FL_SSL_WAIT_HS from CO_FL_HANDSHAKE\n    - MEDIUM: connection: use CO_FL_WAIT_XPRT more consistently than L4/L6/HANDSHAKE\n    - MINOR: connection: remove checks for CO_FL_HANDSHAKE before I/O\n    - MINOR: connection: do not check for CO_FL_SOCK_RD_SH too early\n    - MINOR: connection: don't check for CO_FL_SOCK_WR_SH too early in handshakes\n    - MINOR: raw-sock: always check for CO_FL_SOCK_WR_SH before sending\n    - MINOR: connection: remove some unneeded checks for CO_FL_SOCK_WR_SH\n    - BUG/MINOR: stktable: report the current proxy name in error messages\n    - BUG/MEDIUM: mux-h2: make sure we don't emit TE headers with anything but \"trailers\"\n    - MINOR: lua: Add hlua_prepend_path function\n    - MINOR: lua: Add lua-prepend-path configuration option\n    - MINOR: lua: Add HLUA_PREPEND_C?PATH build option\n    - BUILD: cfgparse: silence a bogus gcc warning on 32-bit machines\n    - BUG/MINOR: http-ana: Increment the backend counters on the backend\n    - BUG/MINOR: stream: Be sure to have a listener to increment its counters\n    - BUG/MEDIUM: streams: Move the conn_stream allocation outside #IF USE_OPENSSL.\n    - REGTESTS: make the set_ssl_cert test require version 2.2\n    - BUG/MINOR: ssl: Possible memleak when allowing the 0RTT data buffer.\n    - MINOR: ssl: Remove dead code.\n    - BUG/MEDIUM: ssl: Don't forget to free ctx->ssl on failure.\n    - BUG/MEDIUM: stream: Don't install the mux in back_handle_st_con().\n    - MEDIUM: streams: Don't close the connection in back_handle_st_con().\n    - MEDIUM: streams: Don't close the connection in back_handle_st_rdy().\n    - BUILD: CI: disable slow regtests on Travis\n    - BUG/MINOR: tcpchecks: fix the connect() flags regarding delayed ack\n    - BUG/MINOR: http-rules: Always init log-format expr for common HTTP actions\n    - BUG/MINOR: connection: fix ip6 dst_port copy in make_proxy_line_v2\n    - BUG/MINOR: dns: allow 63 char in hostname\n    - MINOR: proxy: clarify number of connections log when stopping\n    - DOC: word converter ignores delimiters at the start or end of input string\n    - MEDIUM: raw-sock: remove obsolete calls to fd_{cant,cond,done}_{send,recv}\n    - BUG/MINOR: ssl/cli: fix unused variable with openssl < 1.0.2\n    - MEDIUM: pipe/thread: reduce the locking overhead\n    - MEDIUM: pipe/thread: maintain a per-thread local cache of recently used pipes\n    - BUG/MEDIUM: pipe/thread: fix atomicity of pipe counters\n    - MINOR: tasks: move the list walking code to its own function\n    - MEDIUM: tasks: implement 3 different tasklet classes with their own queues\n    - MEDIUM: tasks: automatically requeue into the bulk queue an already running tasklet\n    - OPTIM: task: refine task classes default CPU bandwidth ratios\n    - BUG/MEDIUM: connections: Don't forget to unlock when killing a connection.\n    - MINOR: task: permanently flag tasklets waking themselves up\n    - MINOR: task: make sched->current also reflect tasklets\n    - MINOR: task: detect self-wakeups on tl==sched->current instead of TASK_RUNNING\n    - OPTIM: task: readjust CPU bandwidth distribution since last update\n    - MINOR: task: don't set TASK_RUNNING on tasklets\n    - BUG/MEDIUM: memory_pool: Update the seq number in pool_flush().\n    - MINOR: memory: Only init the pool spinlock once.\n    - BUG/MEDIUM: memory: Add a rwlock before freeing memory.\n    - BUG/MAJOR: memory: Don't forget to unlock the rwlock if the pool is empty.\n    - MINOR: ssl: ssl-load-extra-files configure loading of files\n    - SCRIPTS: add a new \"backport\" script to simplify long series of backports\n    - BUG/MINOR: ssl: we may only ignore the first 64 errors\n    - SCRIPTS: use /usr/bin/env bash instead of /bin/bash for scripts\n    - BUG/MINOR: ssl: clear the SSL errors on DH loading failure\n    - CLEANUP: hpack: remove a redundant test in the decoder\n    - CLEANUP: peers: Remove unused static function `free_dcache`\n    - CLEANUP: peers: Remove unused static function `free_dcache_tx`\n    - CONTRIB: debug: add missing flags SF_HTX and SF_MUX\n    - CONTRIB: debug: add the possibility to decode the value as certain types only\n    - CONTRIB: debug: support reporting multiple values at once\n    - BUG/MINOR: http-act: Use the good message to test strict rewritting mode\n    - MINOR: global: Set default tune.maxrewrite value during global structure init\n    - MINOR: http-rules: Set SF_ERR_PRXCOND termination flag when a header rewrite fails\n    - MINOR: http-htx: Emit a warning if an error file runs over the buffer's reserve\n    - MINOR: htx: Add a function to append an HTX message to another one\n    - MINOR: htx/channel: Add a function to copy an HTX message in a channel's buffer\n    - BUG/MINOR: http-ana: Don't overwrite outgoing data when an error is reported\n    - MINOR: dns: Dynamically allocate dns options to reduce the act_rule size\n    - MINOR: dns: Add function to release memory allocated for a do-resolve rule\n    - BUG/MINOR: http-ana: Reset HTX first index when HAPRoxy sends a response\n    - BUG/MINOR: http-ana: Set HTX_FL_PROXY_RESP flag if a server perform a redirect\n    - MINOR: http-rules: Add a flag on redirect rules to know the rule direction\n    - MINOR: http-rules: Handle the rule direction when a redirect is evaluated\n    - MINOR: http-ana: Rely on http_reply_and_close() to handle server error\n    - MINOR: http-ana: Add a function for forward internal responses\n    - MINOR: http-ana/http-rules: Use dedicated function to forward internal responses\n    - MEDIUM: http: Add a ruleset evaluated on all responses just before forwarding\n    - MEDIUM: http-rules: Add the return action to HTTP rules\n    - MEDIUM: http-rules: Support extra headers for HTTP return actions\n    - CLEANUP: lua: Remove consistency check for sample fetches and actions\n    - BUG/MINOR: http-ana: Increment failed_resp counters on invalid response\n    - MINOR: lua: Get the action return code on the stack when an action finishes\n    - MINOR: lua: Create the global 'act' object to register all action return codes\n    - MINOR: lua: Add act:wake_time() function to set a timeout when an action yields\n    - MEDIUM: lua: Add ability for actions to intercept HTTP messages\n    - REGTESTS: Add reg tests for the HTTP return action\n    - REGTESTS: Add a reg test for http-after-response rulesets\n    - BUILD: lua: silence a warning on systems where longjmp is not marked as noreturn\n    - MINOR: acl: Warn when an ACL is named 'or'\n    - CONTRIB: debug: also support reading values from stdin\n    - SCRIPTS: backport: use short revs and resolve the initial commit\n    - BUG/MINOR: acl: Fix type of log message when an acl is named 'or'\n\n2020/01/22 : 2.2-dev1\n    - DOC: this is development again\n    - MINOR: version: this is development again, update the status\n    - SCRIPTS: update create-release to fix the changelog on new branches\n    - CLEANUP: ssl: Clean up error handling\n    - BUG/MINOR: contrib/prometheus-exporter: decode parameter and value only\n    - BUG/MINOR: h1: Don't test the host header during response parsing\n    - BUILD/MINOR: trace: fix use of long type in a few printf format strings\n    - DOC: Clarify behavior of server maxconn in HTTP mode\n    - MINOR: ssl: deduplicate ca-file\n    - MINOR: ssl: compute ca-list from deduplicate ca-file\n    - MINOR: ssl: deduplicate crl-file\n    - CLEANUP: dns: resolution can never be null\n    - BUG/MINOR: http-htx: Don't make http_find_header() fail if the value is empty\n    - DOC: ssl/cli: set/commit/abort ssl cert\n    - BUG/MINOR: ssl: fix SSL_CTX_set1_chain compatibility for openssl < 1.0.2\n    - BUG/MINOR: fcgi-app: Make the directive pass-header case insensitive\n    - BUG/MINOR: stats: Fix HTML output for the frontends heading\n    - BUG/MINOR: ssl: fix X509 compatibility for openssl < 1.1.0\n    - DOC: clarify matching strings on binary fetches\n    - DOC: Fix ordered list in summary\n    - DOC: move the \"group\" keyword at the right place\n    - MEDIUM: init: prevent process and thread creation at runtime\n    - BUG/MINOR: ssl/cli: 'ssl cert' cmd only usable w/ admin rights\n    - BUG/MEDIUM: stream-int: don't subscribed for recv when we're trying to flush data\n    - BUG/MINOR: stream-int: avoid calling rcv_buf() when splicing is still possible\n    - BUG/MINOR: ssl/cli: don't overwrite the filters variable\n    - BUG/MEDIUM: listener/thread: fix a race when pausing a listener\n    - BUG/MINOR: ssl: certificate choice can be unexpected with openssl >= 1.1.1\n    - BUG/MEDIUM: mux-h1: Never reuse H1 connection if a shutw is pending\n    - BUG/MINOR: mux-h1: Don't rely on CO_FL_SOCK_RD_SH to set H1C_F_CS_SHUTDOWN\n    - BUG/MINOR: mux-h1: Fix conditions to know whether or not we may receive data\n    - BUG/MEDIUM: tasks: Make sure we switch wait queues in task_set_affinity().\n    - BUG/MEDIUM: checks: Make sure we set the task affinity just before connecting.\n    - MINOR: debug: replace popen() with pipe+fork() in \"debug dev exec\"\n    - MEDIUM: init: set NO_NEW_PRIVS by default when supported\n    - BUG/MINOR: mux-h1: Be sure to set CS_FL_WANT_ROOM when EOM can't be added\n    - BUG/MEDIUM: mux-fcgi: Handle cases where the HTX EOM block cannot be inserted\n    - BUG/MINOR: proxy: make soft_stop() also close FDs in LI_PAUSED state\n    - BUG/MINOR: listener/threads: always use atomic ops to clear the FD events\n    - BUG/MINOR: listener: also clear the error flag on a paused listener\n    - BUG/MEDIUM: listener/threads: fix a remaining race in the listener's accept()\n    - MINOR: listener: make the wait paths cleaner and more reliable\n    - MINOR: listener: split dequeue_all_listener() in two\n    - REORG: listener: move the global listener queue code to listener.c\n    - DOC: document the listener state transitions\n    - BUG/MEDIUM: kqueue: Make sure we report read events even when no data.\n    - BUG/MAJOR: dns: add minimalist error processing on the Rx path\n    - BUG/MEDIUM: proto_udp/threads: recv() and send() must not be exclusive.\n    - DOC: listeners: add a few missing transitions\n    - BUG/MINOR: tasks: only requeue a task if it was already in the queue\n    - MINOR: tasks: split wake_expired_tasks() in two parts to avoid useless wakeups\n    - DOC: proxies: HAProxy only supports 3 connection modes\n    - DOC: remove references to the outdated architecture.txt\n    - BUG/MINOR: log: fix minor resource leaks on logformat error path\n    - BUG/MINOR: mworker: properly pass SIGTTOU/SIGTTIN to workers\n    - BUG/MINOR: listener: do not immediately resume on transient error\n    - BUG/MINOR: server: make \"agent-addr\" work on default-server line\n    - BUG/MINOR: listener: fix off-by-one in state name check\n    - BUILD/MINOR: unix sockets: silence an absurd gcc warning about strncpy()\n    - MEDIUM: h1-htx: Add HTX EOM block when the message is in H1_MSG_DONE state\n    - MINOR: http-htx: Add some htx sample fetches for debugging purpose\n    - REGTEST: Add an HTX reg-test to check an edge case\n    - DOC: clarify the fact that replace-uri works on a full URI\n    - BUG/MINOR: sample: fix the closing bracket and LF in the debug converter\n    - BUG/MINOR: sample: always check converters' arguments\n    - MINOR: sample: Validate the number of bits for the sha2 converter\n    - BUG/MEDIUM: ssl: Don't set the max early data we can receive too early.\n    - MINOR: ssl/cli: 'show ssl cert' give information on the certificates\n    - BUG/MINOR: ssl/cli: fix build for openssl < 1.0.2\n    - MINOR: debug: support logging to various sinks\n    - MINOR: http: add a new \"replace-path\" action\n    - REGTEST: ssl: test the \"set ssl cert\" CLI command\n    - REGTEST: run-regtests: implement #REQUIRE_BINARIES\n    - MINOR: task: only check TASK_WOKEN_ANY to decide to requeue a task\n    - BUG/MAJOR: task: add a new TASK_SHARED_WQ flag to fix foreing requeuing\n    - BUG/MEDIUM: ssl: Revamp the way early data are handled.\n    - MINOR: fd/threads: make _GET_NEXT()/_GET_PREV() use the volatile attribute\n    - BUG/MEDIUM: fd/threads: fix a concurrency issue between add and rm on the same fd\n    - REGTEST: make the \"set ssl cert\" require version 2.1\n    - BUG/MINOR: ssl: openssl-compat: Fix getm_ defines\n    - BUG/MEDIUM: state-file: do not allocate a full buffer for each server entry\n    - BUG/MINOR: state-file: do not store duplicates in the global tree\n    - BUG/MINOR: state-file: do not leak memory on parse errors\n    - BUG/MAJOR: mux-h1: Don't pretend the input channel's buffer is full if empty\n    - BUG/MEDIUM: stream: Be sure to never assign a TCP backend to an HTX stream\n    - BUILD: ssl: improve SSL_CTX_set_ecdh_auto compatibility\n    - BUILD: travis-ci: link with ssl libraries using rpath instead of LD_LIBRARY_PATH/DYLD_LIBRARY_PATH\n    - BUILD: travis-ci: reenable address sanitizer for clang builds\n    - BUG/MINOR: checks: refine which errno values are really errors.\n    - BUG/MINOR: connection: only wake send/recv callbacks if the FD is active\n    - CLEANUP: connection: conn->xprt is never NULL\n    - MINOR: pollers: add a new flag to indicate pollers reporting ERR & HUP\n    - MEDIUM: tcp: make tcp_connect_probe() consider ERR/HUP\n    - REORG: connection: move tcp_connect_probe() to conn_fd_check()\n    - MINOR: connection: check for connection validation earlier\n    - MINOR: connection: remove the double test on xprt_done_cb()\n    - CLEANUP: connection: merge CO_FL_NOTIFY_DATA and CO_FL_NOTIFY_DONE\n    - MINOR: poller: do not call the IO handler if the FD is not active\n    - OPTIM: epoll: always poll for recv if neither active nor ready\n    - OPTIM: polling: do not create update entries for FD removal\n    - BUG/MEDIUM: checks: Only attempt to do handshakes if the connection is ready.\n    - BUG/MEDIUM: connections: Hold the lock when wanting to kill a connection.\n    - BUILD: CI: modernize cirrus-ci\n    - MINOR: config: disable busy polling on old processes\n    - MINOR: ssl: Remove unused variable \"need_out\".\n    - BUG/MINOR: h1: Report the right error position when a header value is invalid\n    - BUG/MINOR: proxy: Fix input data copy when an error is captured\n    - BUG/MEDIUM: http-ana: Truncate the response when a redirect rule is applied\n    - BUG/MINOR: channel: inject output data at the end of output\n    - BUG/MEDIUM: session: do not report a failure when rejecting a session\n    - MEDIUM: dns: implement synchronous send\n    - MINOR: raw_sock: make sure to disable polling once everything is sent\n    - MINOR: http: Add 410 to http-request deny\n    - MINOR: http: Add 404 to http-request deny\n    - CLEANUP: mux-h2: remove unused goto \"out_free_h2s\"\n    - BUILD: cirrus-ci: choose proper openssl package name\n    - BUG/MAJOR: listener: do not schedule a task-less proxy\n    - CLEANUP: server: remove unused err section in server_finalize_init\n    - REGTEST: set_ssl_cert.vtc: replace \"echo\" with \"printf\"\n    - BUG/MINOR: stream-int: Don't trigger L7 retry if max retries is already reached\n    - BUG/MEDIUM: tasks: Use the MT macros in tasklet_free().\n    - BUG/MINOR: mux-h2: use a safe list_for_each_entry in h2_send()\n    - BUG/MEDIUM: mux-h2: fix missing test on sending_list in previous patch\n    - CLEANUP: ssl: remove opendir call in ssl_sock_load_cert\n    - MEDIUM: lua: don't call the GC as often when dealing with outgoing connections\n    - BUG/MEDIUM: mux-h2: don't stop sending when crossing a buffer boundary\n    - BUG/MINOR: cli/mworker: can't start haproxy with 2 programs\n    - REGTEST: mcli/mcli_start_progs: start 2 programs\n    - BUG/MEDIUM: mworker: remain in mworker mode during reload\n    - DOC: clarify crt-base usage\n    - CLEANUP: compression: remove unused deinit_comp_ctx section\n    - BUG/MEDIUM: mux_h1: Don't call h1_send if we subscribed().\n    - BUG/MEDIUM: raw_sock: Make sur the fd and conn are sync.\n    - CLEANUP: proxy: simplify proxy_parse_rate_limit proxy checks\n    - BUG/MAJOR: hashes: fix the signedness of the hash inputs\n    - REGTEST: add sample_fetches/hashes.vtc to validate hashes\n    - BUG/MEDIUM: cli: _getsocks must send the peers sockets\n    - CLEANUP: cli: deduplicate the code in _getsocks\n    - BUG/MINOR: stream: don't mistake match rules for store-request rules\n    - BUG/MEDIUM: connection: add a mux flag to indicate splice usability\n    - BUG/MINOR: pattern: handle errors from fgets when trying to load patterns\n    - MINOR: connection: move the CO_FL_WAIT_ROOM cleanup to the reader only\n    - MINOR: stream-int: remove dependency on CO_FL_WAIT_ROOM for rcv_buf()\n    - MEDIUM: connection: get rid of CO_FL_CURR_* flags\n    - BUILD: pattern: include errno.h\n    - MEDIUM: mux-h2: do not try to stop sending streams on blocked mux\n    - MEDIUM: mux-fcgi: do not try to stop sending streams on blocked mux\n    - MEDIUM: mux-h2: do not make an h2s subscribe to itself on deferred shut\n    - MEDIUM: mux-fcgi: do not make an fstrm subscribe to itself on deferred shut\n    - REORG: stream/backend: move backend-specific stuff to backend.c\n    - MEDIUM: backend: move the connection finalization step to back_handle_st_con()\n    - MEDIUM: connection: merge the send_wait and recv_wait entries\n    - MEDIUM: xprt: merge recv_wait and send_wait in xprt_handshake\n    - MEDIUM: ssl: merge recv_wait and send_wait in ssl_sock\n    - MEDIUM: mux-h1: merge recv_wait and send_wait\n    - MEDIUM: mux-h2: merge recv_wait and send_wait event notifications\n    - MEDIUM: mux-fcgi: merge recv_wait and send_wait event notifications\n    - MINOR: connection: make the last arg of subscribe() a struct wait_event*\n    - MINOR: ssl: Add support for returning the dn samples from ssl_(c|f)_(i|s)_dn in LDAP v3 (RFC2253) format.\n    - DOC: Fix copy and paste mistake in http-response replace-value doc\n    - BUG/MINOR: cache: Fix leak of cache name in error path\n    - BUG/MINOR: dns: Make dns_query_id_seed unsigned\n    - BUG/MINOR: 51d: Fix bug when HTX is enabled\n    - MINOR: http-htx: Move htx sample fetches in the scope \"internal\"\n    - MINOR: http-htx: Rename 'internal.htx_blk.val' to 'internal.htx_blk.data'\n    - MINOR: http-htx: Make 'internal.htx_blk_data' return a binary string\n    - DOC: Add a section to document the internal sample fetches\n    - MINOR: mux-h1: Inherit send flags from the upper layer\n    - MINOR: contrib/prometheus-exporter: Add heathcheck status/code in server metrics\n    - BUG/MINOR: http-ana/filters: Wait end of the http_end callback for all filters\n    - BUG/MINOR: http-rules: Remove buggy deinit functions for HTTP rules\n    - BUG/MINOR: stick-table: Use MAX_SESS_STKCTR as the max track ID during parsing\n    - MEDIUM: http-rules: Register an action keyword for all http rules\n    - MINOR: tcp-rules: Always set from which ruleset a rule comes from\n    - MINOR: actions: Use ACT_RET_CONT code to ignore an error from a custom action\n    - MINOR: tcp-rules: Kill connections when custom actions return ACT_RET_ERR\n    - MINOR: http-rules: Return an error when custom actions return ACT_RET_ERR\n    - MINOR: counters: Add a counter to report internal processing errors\n    - MEDIUM: http-ana: Properly handle internal processing errors\n    - MINOR: http-rules: Add a rule result to report internal error\n    - MINOR: http-rules: Handle internal errors during HTTP rules evaluation\n    - MINOR: http-rules: Add more return codes to let custom actions act as normal ones\n    - MINOR: tcp-rules: Handle denied/aborted/invalid connections from TCP rules\n    - MINOR: http-rules: Handle denied/aborted/invalid connections from HTTP rules\n    - MINOR: stats: Report internal errors in the proxies/listeners/servers stats\n    - MINOR: contrib/prometheus-exporter: Export internal errors per proxy/server\n    - MINOR: counters: Remove failed_secu counter and use denied_resp instead\n    - MINOR: counters: Review conditions to increment counters from analysers\n    - MINOR: http-ana: Add a txn flag to support soft/strict message rewrites\n    - MINOR: http-rules: Handle all message rewrites the same way\n    - MINOR: http-rules: Add a rule to enable or disable the strict rewriting mode\n    - MEDIUM: http-rules: Enable the strict rewriting mode by default\n    - REGTEST: Fix format of set-uri HTTP request rule in h1or2_to_h1c.vtc\n    - MINOR: actions: Add a function pointer to release args used by actions\n    - MINOR: actions: Regroup some info about HTTP rules in the same struct\n    - MINOR: http-rules/tcp-rules: Call the defined action function first if defined\n    - MINOR: actions: Rename the act_flag enum into act_opt\n    - MINOR: actions: Add flags to configure the action behaviour\n    - MINOR: actions: Use an integer to set the action type\n    - MINOR: http-rules: Use a specific action type for some custom HTTP actions\n    - MINOR: http-rules: Make replace-header and replace-value custom actions\n    - MINOR: http-rules: Make set-header and add-header custom actions\n    - MINOR: http-rules: Make set/del-map and add/del-acl custom actions\n    - MINOR: http-rules: Group all processing of early-hint rule in its case clause\n    - MEDIUM: http-rules: Make early-hint custom actions\n    - MINOR: http-rule/tcp-rules: Make track-sc* custom actions\n    - MINOR: tcp-rules: Make tcp-request capture a custom action\n    - MINOR: http-rules: Add release functions for existing HTTP actions\n    - BUG/MINOR: http-rules: Fix memory releases on error path during action parsing\n    - MINOR: tcp-rules: Add release functions for existing TCP actions\n    - BUG/MINOR: tcp-rules: Fix memory releases on error path during action parsing\n    - MINOR: http-htx: Add functions to read a raw error file and convert it in HTX\n    - MINOR: http-htx: Add functions to create HTX redirect message\n    - MINOR: config: Use dedicated function to parse proxy's errorfiles\n    - MINOR: config: Use dedicated function to parse proxy's errorloc\n    - MEDIUM: http-htx/proxy: Use a global and centralized storage for HTTP error messages\n    - MINOR: proxy: Register keywords to parse errorfile and errorloc directives\n    - MINOR: http-htx: Add a new section to create groups of custom HTTP errors\n    - MEDIUM: proxy: Add a directive to reference an http-errors section in a proxy\n    - MINOR: http-rules: Update txn flags and status when a deny rule is executed\n    - MINOR: http-rules: Support an optional status on deny rules for http reponses\n    - MINOR: http-rules: Use same function to parse request and response deny actions\n    - MINOR: http-ana: Add an error message in the txn and send it when defined\n    - MEDIUM: http-rules: Support an optional error message in http deny rules\n    - REGTEST: Add a strict rewriting mode reg test\n    - REGEST: Add reg tests about error files\n    - MINOR: ssl: accept 'verify' bind option with 'set ssl cert'\n    - BUG/MINOR: ssl: ssl_sock_load_ocsp_response_from_file memory leak\n    - BUG/MINOR: ssl: ssl_sock_load_issuer_file_into_ckch memory leak\n    - BUG/MINOR: ssl: ssl_sock_load_sctl_from_file memory leak\n    - BUG/MINOR: http_htx: Fix some leaks on error path when error files are loaded\n    - CLEANUP: http-ana: Remove useless test on txn when the error message is retrieved\n    - BUILD: CI: introduce ARM64 builds\n    - BUILD: ssl: more elegant anti-replay feature presence check\n    - MINOR: proxy/http-ana: Add support of extra attributes for the cookie directive\n    - MEDIUM: dns: use Additional records from SRV responses\n    - CLEANUP: Consistently `unsigned int` for bitfields\n    - CLEANUP: pattern: remove the pat_time definition\n    - BUG/MINOR: http_act: don't check capture id in backend\n    - BUG/MINOR: ssl: fix build on development versions of openssl-1.1.x\n\n2019/11/25 : 2.2-dev0\n    - exact copy of 2.1.0\n\n2019/11/25 : 2.1.0\n    - BUG/MINOR: init: fix set-dumpable when using uid/gid\n    - MINOR: init: avoid code duplication while setting identify\n    - BUG/MINOR: ssl: ssl_pkey_info_index ex_data can store a dereferenced pointer\n    - BUG/MINOR: ssl: fix crt-list neg filter for openssl < 1.1.1\n    - MINOR: peers: Alway show the table info for disconnected peers.\n    - MINOR: peers: Add TX/RX heartbeat counters.\n    - MINOR: peers: Add debugging information to \"show peers\".\n    - BUG/MINOR: peers: Wrong null \"server_name\" data field handling.\n    - MINOR: ssl/cli: 'abort ssl cert' deletes an on-going transaction\n    - BUG/MEDIUM: mworker: don't fill the -sf argument with -1 during the reexec\n    - BUG/MINOR: peers: \"peer alive\" flag not reset when deconnecting.\n    - BUILD/MINOR: ssl: fix compiler warning about useless statement\n    - BUG/MEDIUM: stream-int: Don't loose events on the CS when an EOS is reported\n    - MINOR: contrib/prometheus-exporter: filter exported metrics by scope\n    - MINOR: contrib/prometheus-exporter: Add a param to ignore servers in maintenance\n    - BUILD: debug: Avoid warnings in dev mode with -02 because of some BUG_ON tests\n    - BUG/MINOR: mux-h1: Fix tunnel mode detection on the response path\n    - BUG/MINOR: http-ana: Properly catch aborts during the payload forwarding\n    - DOC: Update http-buffer-request description to remove the part about chunks\n    - BUG/MINOR: stream-int: Fix si_cs_recv() return value\n    - DOC: internal: document the init calls\n    - MEDIUM: dns: Add resolve-opts \"ignore-weight\"\n    - MINOR: ssl: ssl_sock_prepare_ctx() return an error code\n    - MEDIUM: ssl/cli: apply SSL configuration on SSL_CTX during commit\n    - MINOR: ssl/cli: display warning during 'commit ssl cert'\n    - MINOR: version: report the version status in \"haproxy -v\"\n    - MINOR: version: emit the link to the known bugs in output of \"haproxy -v\"\n    - DOC: Add documentation about the use-service action\n    - MINOR: ssl: fix possible null dereference in error handling\n    - BUG/MINOR: ssl: fix curve setup with LibreSSL\n    - BUG/MINOR: ssl: Stop passing dynamic strings as format arguments\n    - CLEANUP: ssl: check if a transaction exists once before setting it\n    - BUG/MINOR: cli: fix out of bounds in -S parser\n    - MINOR: ist: add ist_find_ctl()\n    - BUG/MAJOR: h2: reject header values containing invalid chars\n    - BUG/MAJOR: h2: make header field name filtering stronger\n    - BUG/MAJOR: mux-h2: don't try to decode a response HEADERS frame in idle state\n    - MINOR: h2: add a function to report H2 error codes as strings\n    - MINOR: mux-h2/trace: report the connection and/or stream error code\n    - SCRIPTS: create-release: show the correct origin name in suggested commands\n    - SCRIPTS: git-show-backports: add \"-s\" to proposed cherry-pick commands\n    - BUG/MEDIUM: trace: fix a typo causing an incorrect startup error\n    - BUILD: reorder the objects in the makefile\n    - DOC: mention in INSTALL haproxy 2.1 is a stable stable version\n    - MINOR: version: indicate that this version is stable\n\n2019/11/15 : 2.1-dev5\n    - BUG/MEDIUM: ssl/cli: don't alloc path when cert not found\n    - BUG/MINOR: ssl/cli: unable to update a certificate without bundle extension\n    - BUG/MINOR: ssl/cli: fix an error when a file is not found\n    - MINOR: ssl/cli: replace the default_ctx during 'commit ssl cert'\n    - DOC: fix date and http_date keywords syntax\n    - MINOR: peers: Add \"log\" directive to \"peers\" section.\n    - BUG/MEDIUM: mux-h1: Disable splicing for chunked messages\n    - BUG/MEDIUM: stream: Be sure to support splicing at the mux level to enable it\n    - MINOR: flt_trace: Rename macros to print trace messages\n    - MINOR: trace: Add a set of macros to trace events if HA is compiled with debug\n    - MEDIUM: stream/trace: Register a new trace source with its events\n    - MINOR: doc: http-reuse connection pool fix\n    - BUG/MEDIUM: stream: Be sure to release allocated captures for TCP streams\n    - MINOR: http-ana: Remove the unused function http_reset_txn()\n    - BUG/MINOR: action: do-resolve now use cached response\n    - BUG: dns: timeout resolve not applied for valid resolutions\n    - DOC: management: fix typo on \"cache_lookups\" stats output\n    - BUG/MINOR: stream: init variables when the list is empty\n    - BUG/MEDIUM: tasks: Make tasklet_remove_from_tasklet_list() no matter the tasklet.\n    - BUG/MINOR: queue/threads: make the queue unlinking atomic\n    - BUG/MEDIUM: Make sure we leave the session list in session_free().\n    - CLEANUP: session: slightly simplify idle connection cleanup logic\n    - MINOR: memory: also poison the area on freeing\n    - CLEANUP: cli: use srv_shutdown_streams() instead of open-coding it\n    - CLEANUP: stats: use srv_shutdown_streams() instead of open-coding it\n    - BUG/MEDIUM: listeners: always pause a listener on out-of-resource condition\n    - BUILD: contrib/da: remove an \"unused\" warning\n    - BUG/MEDIUM: filters: Don't call TCP callbacks for HTX streams\n    - MEDIUM: filters: Adapt filters API to allow again TCP filtering on HTX streams\n    - MINOR: freq_ctr: Make the sliding window sums thread-safe\n    - MINOR: stream: Remove the lock on the proxy to update time stats\n    - MINOR: counters: Add fields to store the max observed for {q,c,d,t}_time\n    - MINOR: stats: Report max times in addition of the averages for sessions\n    - MINOR: contrib/prometheus-exporter: Report metrics about max times for sessions\n    - BUG/MINOR: contrib/prometheus-exporter: Rename some metrics\n    - MINOR: contrib/prometheus-exporter: report the number of idle conns per server\n    - DOC: Add missing stats fields in the management manual\n    - BUG/MINOR: mux-h1: Properly catch parsing errors on payload and trailers\n    - BUG/MINOR: mux-h1: Don't set CS_FL_EOS on a read0 when receiving data to pipe\n    - MINOR: mux-h1: Set EOI on the conn-stream when EOS is reported in TUNNEL state\n    - MINOR: sink: Set the default max length for a message to BUFSIZE\n    - MINOR: ring: make the parse function automatically set the handler/release\n    - BUG/MINOR: log: make \"show startup-log\" use a ring buffer instead\n    - MINOR: stick-table: allow sc-set-gpt0 to set value from an expression\n\n2019/11/03 : 2.1-dev4\n    - BUG/MINOR: cli: don't call the kw->io_release if kw->parse failed\n    - BUG/MINOR: mux-h2: Don't pretend mux buffers aren't full anymore if nothing sent\n    - BUG/MAJOR: stream-int: Don't receive data from mux until SI_ST_EST is reached\n    - DOC: remove obsolete section about header manipulation\n    - BUG/MINOR: ssl/cli: cleanup on cli_parse_set_cert error\n    - MINOR: ssl/cli: rework the 'set ssl cert' IO handler\n    - BUILD: CI: comment out cygwin build, upgrade various ssl libraries\n    - DOC: Improve documentation of http-re(quest|sponse) replace-(header|value|uri)\n    - BUILD/MINOR: tools: shut up the format truncation warning in get_gmt_offset()\n    - BUG/MINOR: spoe: fix off-by-one length in UUID format string\n    - BUILD/MINOR: ssl: shut up a build warning about format truncation\n    - BUILD: do not disable -Wformat-truncation anymore\n    - MINOR: chunk: add chunk_istcat() to concatenate an ist after a chunk\n    - Revert \"MINOR: istbuf: add b_fromist() to make a buffer from an ist\"\n    - MINOR: mux: Add a new method to get informations about a mux.\n    - BUG/MEDIUM: stream_interface: Only use SI_ST_RDY when the mux is ready.\n    - BUG/MEDIUM: servers: Only set SF_SRV_REUSED if the connection if fully ready.\n    - MINOR: doc: fix busy-polling performance reference\n    - MINOR: config: allow no set-dumpable config option\n    - MINOR: init: always fail when setrlimit fails\n    - MINOR: ssl/cli: rework 'set ssl cert' as 'set/commit'\n    - CLEANUP: ssl/cli: remove leftovers of bundle/certs (it < 2)\n    - REGTEST: vtest can now enable mcli with its own flag\n    - BUG/MINOR: config: Update cookie domain warn to RFC6265\n    - MINOR: sample: add us/ms support to date/http_date\n    - BUG/MINOR: ssl/cli: check trash allocation in cli_io_handler_commit_cert()\n    - BUG/MEDIUM: mux-h2: report no available stream on a connection having errors\n    - BUG/MEDIUM: mux-h2: immediately remove a failed connection from the idle list\n    - BUG/MEDIUM: mux-h2: immediately report connection errors on streams\n    - BUG/MINOR: stats: properly check the path and not the whole URI\n    - BUG/MINOR: ssl: segfault in cli_parse_set_cert with old openssl/boringssl\n    - BUG/MINOR: ssl: ckch->chain must be initialized\n    - BUG/MINOR: ssl: double free on error for ckch->{key,cert}\n    - MINOR: ssl: BoringSSL ocsp_response does not need issuer\n    - BUG/MEDIUM: ssl/cli: fix dot research in cli_parse_set_cert\n    - MINOR: backend: Add srv_name sample fetche\n    - DOC: Add GitHub issue config.yml\n\n2019/10/25 : 2.1-dev3\n    - MINOR: mux-h2/trace: missing conn pointer in demux full message\n    - MINOR: mux-h2: add a per-connection list of blocked streams\n    - BUILD: ebtree: make eb_is_empty() and eb_is_dup() take a const\n    - BUG/MEDIUM: mux-h2: do not enforce timeout on long connections\n    - BUG/MEDIUM: tasks: Don't forget to decrement tasks_run_queue.\n    - BUG/MINOR: peers: crash on reload without local peer.\n    - BUG/MINOR: mux-h2/trace: Fix traces on h2c initialization\n    - MINOR: h1-htx: Update h1_copy_msg_data() to ease the traces in the mux-h1\n    - MINOR: htx: Adapt htx_dump() to be used from traces\n    - MINOR: mux-h1/trace: register a new trace source with its events\n    - MINOR: proxy: Store http-send-name-header in lower case\n    - MINOR: http: Remove headers matching the name of http-send-name-header option\n    - BUG/MINOR: mux-h1: Adjust header case when the server name is add to a request\n    - BUG/MINOR: mux-h1: Adjust header case when chunked encoding is add to a message\n    - MINOR: mux-h1: Try to wakeup the stream on output buffer allocation\n    - MINOR: fcgi: Add function to get the string representation of a record type\n    - MINOR: mux-fcgi/trace: Register a new trace source with its events\n    - BUG/MEDIUM: cache: make sure not to cache requests with absolute-uri\n    - DOC: clarify some points around http-send-name-header's behavior\n    - MEDIUM: mux-h2: support emitting CONTINUATION frames after HEADERS\n    - BUG/MINOR: mux-h1/mux-fcgi/trace: Fix position of the 4th arg in some traces\n    - DOC: fix typo in Prometheus exporter doc\n    - MINOR: h2: clarify the rules for how to convert an H2 request to HTX\n    - MINOR: htx: Add 2 flags on the start-line to have more info about the uri\n    - MINOR: http: Add a function to get the authority into a URI\n    - MINOR: h1-htx: Set the flag HTX_SL_F_HAS_AUTHORITY during the request parsing\n    - MEDIUM: http-htx: Keep the Host header and the request start-line synchronized\n    - MINOR: h1-htx: Only use the path of a normalized URI to format a request line\n    - MEDIUM: h2: make the request parser rebuild a complete URI\n    - MINOR: h2: report in the HTX flags when the request has an authority\n    - MEDIUM: mux-h2: do not map Host to :authority on output\n    - MEDIUM: h2: use the normalized URI encoding for absolute form requests\n    - MINOR: stats: mention in the help message support for \"json\" and \"typed\"\n    - MINOR: stats: get rid of the ST_CONVDONE flag\n    - MINOR: stats: replace the ST_* uri_auth flags with STAT_*\n    - MINOR: stats: always merge the uri_auth flags into the appctx flags\n    - MINOR: stats: set the appctx flags when initializing the applet only\n    - MINOR: stats: get rid of the STAT_SHOWADMIN flag\n    - MINOR: stats: make stats_dump_fields_json() directly take flags\n    - MINOR: stats: uniformize the calling convention of the dump functions\n    - MINOR: stats: support the \"desc\" output format modifier for info and stat\n    - MINOR: stats: prepare to add a description with each stat/info field\n    - MINOR: stats: make \"show stat\" and \"show info\"\n    - MINOR: stats: fill all the descriptions for \"show info\" and \"show stat\"\n    - BUG/MEDIUM: applet: always check a fast running applet's activity before killing\n    - BUILD: stats: fix missing '=' sign in array declaration\n    - MINOR: lists: add new macro LIST_SPLICE_END_DETACHED\n    - MINOR: list: add new macro MT_LIST_BEHEAD\n    - MEDIUM: task: Split the tasklet list into two lists.\n    - MINOR: h2: Document traps to be avoided on multithread.\n    - MINOR: lists: Try to use local variables instead of macro arguments.\n    - MINOR: lists: Fix alignement of \\ when relevant.\n    - MINOR: mux-h2: also support emitting CONTINUATION on trailers\n    - MINOR: ssl: crt-list do ckchn_lookup\n    - REORG: ssl: rename ckch_node to ckch_store\n    - REORG: ssl: move structures to ssl_sock.h\n    - MINOR: ssl: initialize the sni_keytypes_map as EB_ROOT\n    - MINOR: ssl: initialize explicitly the sni_ctx trees\n    - BUG/MINOR: ssl: abort on sni allocation failure\n    - BUG/MINOR: ssl: free the sni_keytype nodes\n    - BUG/MINOR: ssl: abort on sni_keytypes allocation failure\n    - MEDIUM: ssl: introduce the ckch instance structure\n    - MEDIUM: ssl: split ssl_sock_add_cert_sni()\n    - MINOR: ssl: ssl_sock_load_ckchn() can properly fail\n    - MINOR: ssl: ssl_sock_load_multi_ckchs() can properly fail\n    - MEDIUM: ssl: ssl_sock_load_ckchs() alloc a ckch_inst\n    - MINOR: ssl: ssl_sock_load_crt_file_into_ckch() is filling from a BIO\n    - MEDIUM: ssl/cli: 'set ssl cert' updates a certificate from the CLI\n    - MINOR: ssl: load the sctl in/from the ckch\n    - MINOR: ssl: load the ocsp in/from the ckch\n    - BUG/MEDIUM: ssl: NULL dereference in ssl_sock_load_cert_sni()\n    - BUG/MINOR: ssl: fix build without SSL\n    - BUG/MINOR: ssl: fix build without multi-cert bundles\n    - BUILD: ssl: wrong #ifdef for SSL engines code\n    - BUG/MINOR: ssl: fix OCSP build with BoringSSL\n    - BUG/MEDIUM: htx: Catch chunk_memcat() failures when HTX data are formatted to h1\n    - BUG/MINOR: chunk: Fix tests on the chunk size in functions copying data\n    - BUG/MINOR: mux-h1: Mark the output buffer as full when the xfer is interrupted\n    - MINOR: mux-h1: Xfer as much payload data as possible during output processing\n    - CLEANUP: h1-htx: Move htx-to-h1 formatting functions from htx.c to h1_htx.c\n    - BUG/MINOR: mux-h1: Capture ignored parsing errors\n    - MINOR: h1: Reject requests with different occurrences of the header host\n    - MINOR: h1: Reject requests if the authority does not match the header host\n    - REGTESTS: Send valid URIs in peers reg-tests and fix HA config to avoid warnings\n    - REGTESTS: Adapt proxy_protocol_random_fail.vtc to match normalized URI too\n    - BUG/MINOR: WURFL: fix send_log() function arguments\n    - BUG/MINOR: ssl: fix error messages for OCSP loading\n    - BUG/MINOR: ssl: can't load ocsp files\n    - MINOR: version: make the version strings variables, not constants\n    - BUG/MINOR: http-htx: Properly set htx flags on error files to support keep-alive\n    - MINOR: htx: Add a flag on HTX to known when a response was generated by HAProxy\n    - MINOR: mux-h1: Force close mode for proxy responses with an unfinished request\n    - BUILD: travis-ci: limit build to branches \"master\" and \"next\"\n    - BUILD/MEDIUM: threads: rename thread_info struct to ha_thread_info\n    - BUILD/SMALL: threads: enable threads on osx\n    - BUILD/MEDIUM: threads: enable cpu_affinity on osx\n    - MINOR: istbuf: add b_fromist() to make a buffer from an ist\n    - BUG/MINOR: cache: also cache absolute URIs\n    - BUG/MINOR: mworker/ssl: close openssl FDs unconditionally\n    - BUG/MINOR: tcp: Don't alter counters returned by tcp info fetchers\n    - BUG/MEDIUM: lists: Handle 1-element-lists in MT_LIST_BEHEAD().\n    - BUG/MEDIUM: mux_pt: Make sure we don't have a conn_stream before freeing.\n    - BUG/MEDIUM: tasklet: properly compute the sleeping threads mask in tasklet_wakeup()\n    - BUG/MAJOR: idle conns: schedule the cleanup task on the correct threads\n    - BUG/MEDIUM: task: make tasklets either local or shared but not both at once\n    - Revert e8826ded5fea3593d89da2be5c2d81c522070995.\n    - BUG/MEDIUM: mux_pt: Don't destroy the connection if we have a stream attached.\n    - BUG/MEDIUM: mux_pt: Only call the wake emthod if nobody subscribed to receive.\n    - REGTEST: mcli/mcli_show_info: launch a 'show info' on the master CLI\n    - CLEANUP: ssl: make ssl_sock_load_cert*() return real error codes\n    - CLEANUP: ssl: make ssl_sock_load_ckchs() return a set of ERR_*\n    - CLEANUP: ssl: make cli_parse_set_cert handle errcode and warnings.\n    - CLEANUP: ssl: make ckch_inst_new_load_(multi_)store handle errcode/warn\n    - CLEANUP: ssl: make ssl_sock_put_ckch_into_ctx handle errcode/warn\n    - CLEANUP: ssl: make ssl_sock_load_dh_params handle errcode/warn\n    - CLEANUP: bind: handle warning label on bind keywords parsing.\n    - BUG/MEDIUM: ssl: 'tune.ssl.default-dh-param' value ignored with openssl > 1.1.1\n    - BUG/MINOR: mworker/cli: reload fail with inherited FD\n    - BUG/MINOR: ssl: Fix fd leak on error path when a TLS ticket keys file is parsed\n    - BUG/MINOR: stick-table: Never exceed (MAX_SESS_STKCTR-1) when fetching a stkctr\n    - BUG/MINOR: cache: alloc shctx after check config\n    - BUG/MINOR: sample: Make the `field` converter compatible with `-m found`\n    - BUG/MINOR: server: check return value of fopen() in apply_server_state()\n    - REGTESTS: make seamless-reload depend on 1.9 and above\n    - REGTESTS: server/cli_set_fqdn requires version 1.8 minimum\n    - BUG/MINOR: dns: allow srv record weight set to 0\n    - BUG/MINOR: ssl: fix memcpy overlap without consequences.\n    - BUG/MINOR: stick-table: fix an incorrect 32 to 64 bit key conversion\n    - BUG/MEDIUM: pattern: make the pattern LRU cache thread-local and lockless\n    - BUG/MINOR: mux-h2: do not emit logs on backend connections\n    - CLEANUP: ssl: remove old TODO commentary\n    - CLEANUP: ssl: fix SNI/CKCH lock labels\n    - MINOR: ssl: OCSP functions can load from file or buffer\n    - MINOR: ssl: load sctl from buf OR from a file\n    - MINOR: ssl: load issuer from file or from buffer\n    - MINOR: ssl: split ssl_sock_load_crt_file_into_ckch()\n    - BUG/MINOR: ssl/cli: fix looking up for a bundle\n    - MINOR: ssl/cli: update ocsp/issuer/sctl file from the CLI\n    - MINOR: ssl: update ssl_sock_free_cert_key_and_chain_contents\n    - MINOR: ssl: copy a ckch from src to dst\n    - MINOR: ssl: new functions duplicate and free a ckch_store\n    - MINOR: ssl/cli: assignate a new ckch_store\n    - MEDIUM: cli/ssl: handle the creation of SSL_CTX in an IO handler\n    - BUG/MINOR: ssl/cli: fix build of SCTL and OCSP\n    - BUG/MINOR: ssl/cli: out of bounds when built without ocsp/sctl\n    - BUG/MINOR: ssl: fix build with openssl < 1.1.0\n    - BUG/MINOR: ssl: fix build of X509_chain_up_ref() w/ libreSSL\n    - MINOR: tcp: avoid confusion in time parsing init\n    - MINOR: debug: add a new \"debug dev stream\" command\n    - MINOR: cli/debug: validate addresses using may_access() in \"debug dev stream\"\n    - REORG: move CLI access level definitions to cli.h\n    - MINOR: cli: add an expert mode to hide dangerous commands\n    - MINOR: debug: make most debug CLI commands accessible in expert mode\n    - MINOR: stats/debug: maintain a counter of debug commands issued\n    - BUG/MEDIUM: debug: address a possible null pointer dereference in \"debug dev stream\"\n\n2019/10/01 : 2.1-dev2\n    - DOC: management: document reuse and connect counters in the CSV format\n    - DOC: management: document cache_hits and cache_lookups in the CSV format\n    - BUG/MINOR: dns: remove irrelevant dependency on a client connection\n    - MINOR: applet: make appctx use their own pool\n    - BUG/MEDIUM: checks: Don't attempt to receive data if we already subscribed.\n    - BUG/MEDIUM: http/htx: unbreak option http_proxy\n    - BUG/MINOR: backend: do not try to install a mux when the connection failed\n    - MINOR: mux-h2: Don't adjust anymore the amount of data sent in h2_snd_buf()\n    - BUG/MINOR: http_fetch: Fix http_auth/http_auth_group when called from TCP rules\n    - BUG/MINOR: http_htx: Initialize HTX error messages for TCP proxies\n    - BUG/MINOR: cache/htx: Make maxage calculation HTX aware\n    - BUG/MINOR: hlua: Make the function txn:done() HTX aware\n    - MINOR: proto_htx: Directly call htx_check_response_for_cacheability()\n    - MINOR: proto_htx: Rely on the HTX function to apply a redirect rules\n    - MINOR: proto_htx: Add the function htx_return_srv_error()\n    - MINOR: backend/htx: Don't rewind output data to set the sni on a srv connection\n    - MINOR: proto_htx: Don't stop forwarding when there is a post-connect processing\n    - DOC: htx: Update comments in HTX files\n    - CLEANUP: htx: Remove the unsued function htx_add_blk_type_size()\n    - MINOR: htx: Deduce the number of used blocks from tail and head values\n    - MINOR: htx: Use an array of char to store HTX blocks\n    - MINOR: htx: Slightly update htx_dump() to report better messages\n    - DOC: htx: Add internal documentation about the HTX\n    - MAJOR: http: Deprecate and ignore the option \"http-use-htx\"\n    - MEDIUM: mux-h2: Remove support of the legacy HTTP mode\n    - CLEANUP: h2: Remove functions converting h2 requests to raw HTTP/1.1 ones\n    - MINOR: connection: Remove the multiplexer protocol PROTO_MODE_HTX\n    - MINOR: stream: Rely on HTX analyzers instead of legacy HTTP ones\n    - MEDIUM: http_fetch: Remove code relying on HTTP legacy mode\n    - MINOR: config: Remove tests on the option 'http-use-htx'\n    - MINOR: stream: Remove tests on the option 'http-use-htx' in stream_new()\n    - MINOR: proxy: Remove tests on the option 'http-use-htx' during H1 upgrade\n    - MINOR: hlua: Remove tests on the option 'http-use-htx' to reject TCP applets\n    - MINOR: cache: Remove tests on the option 'http-use-htx'\n    - MINOR: contrib/prometheus-exporter: Remove tests on the option 'http-use-htx'\n    - CLEANUP: proxy: Remove the flag PR_O2_USE_HTX\n    - MINOR: proxy: Don't adjust connection mode of HTTP proxies anymore\n    - MEDIUM: backend: Remove code relying on the HTTP legacy mode\n    - MEDIUM: hlua: Remove code relying on the legacy HTTP mode\n    - MINOR: http_act: Remove code relying on the legacy HTTP mode\n    - MEDIUM: cache: Remove code relying on the legacy HTTP mode\n    - MEDIUM: compression: Remove code relying on the legacy HTTP mode\n    - MINOR: flt_trace: Remove code relying on the legacy HTTP mode\n    - MINOR: stats: Remove code relying on the legacy HTTP mode\n    - MAJOR: filters: Remove code relying on the legacy HTTP mode\n    - MINOR: stream: Remove code relying on the legacy HTTP mode\n    - MAJOR: http: Remove the HTTP legacy code\n    - MINOR: hlua: Remove useless test on TX_CON_WANT_* flags\n    - MINOR: proto_http: Remove unused http txn flags\n    - MINOR: proto_http: Remove the unused flag HTTP_MSGF_WAIT_CONN\n    - CLEANUP: proto_http: Group remaining flags of the HTTP transaction\n    - CLEANUP: channel: Remove the unused flag CF_WAKE_CONNECT\n    - CLEANUP: proto_http: Remove unecessary includes and comments\n    - CLEANUP: proto_http: Move remaining code from proto_http.c to proto_htx.c\n    - REORG: proto_htx: Move HTX analyzers & co to http_ana.{c,h} files\n    - BUG/MINOR: debug: Remove flags CO_FL_SOCK_WR_ENA/CO_FL_SOCK_RD_ENA\n    - MINOR: proxy: Remove support of the option 'http-tunnel'\n    - DOC: config: Update as a result of the legacy HTTP removal\n    - MEDIUM: config: Remove parsing of req* and rsp* directives\n    - MINOR: proxy: Remove the unused list of block rules\n    - MINOR: proxy/http_ana: Remove unused req_exp/rsp_exp and req_add/rsp_add lists\n    - DOC: config: Remove unsupported req* and rsp* keywords\n    - MINOR: global: Preset tune.max_http_hdr to its default value\n    - MINOR: http: Don't store raw HTTP errors in chunks anymore\n    - BUG/MINOR: session: Emit an HTTP error if accept fails only for H1 connection\n    - BUG/MINOR: session: Send a default HTTP error if accept fails for a H1 socket\n    - CLEANUP: mux-h2: Remove unused flags H2_SF_CHNK_*\n    - BUG/MINOR: checks: do not exit tcp-checks from the middle of the loop\n    - MINOR: config: Warn only if the option http-use-htx is used with \"no\" prefix\n    - BUG/MEDIUM: mux-h1: Trim excess server data at the end of a transaction\n    - MINOR: connection: add conn_get_src() and conn_get_dst()\n    - MINOR: frontend: switch to conn_get_{src,dst}() for logging and debugging\n    - MINOR: backend: switch to conn_get_{src,dst}() for port and address mapping\n    - MINOR: ssl: switch to conn_get_dst() to retrieve the destination address\n    - MINOR: tcp: replace various calls to conn_get_{from,to}_addr with conn_get_{src,dst}\n    - MINOR: stream-int: use conn_get_{src,dst} in conn_si_send_proxy()\n    - MINOR: stream/cli: use conn_get_{src,dst} in \"show sess\" and \"show peers\" output\n    - MINOR: log: use conn_get_{dst,src}() to retrieve the cli/frt/bck/srv/ addresses\n    - MINOR: http/htx: use conn_get_dst() to retrieve the destination address\n    - MINOR: lua: use conn_get_{src,dst} to retrieve connection addresses\n    - MINOR: http: check the source address via conn_get_src() in sample fetch functions\n    - CLEANUP: connection: remove the now unused conn_get_{from,to}_addr()\n    - MINOR: connection: add new src and dst fields\n    - MINOR: connection: use conn->{src,dst} instead of &conn->addr.{from,to}\n    - MINOR: ssl-sock: use conn->dst instead of &conn->addr.to\n    - MINOR: lua: switch to conn->dst for a connection's target address\n    - MINOR: peers: use conn->dst for the peer's target address\n    - MINOR: htx: switch from conn->addr.{from,to} to conn->{src,dst}\n    - MINOR: stream: switch from conn->addr.{from,to} to conn->{src,dst}\n    - MINOR: proxy: switch to conn->src in error snapshots\n    - MINOR: session: use conn->src instead of conn->addr.from\n    - MINOR: tcp: replace conn->addr.{from,to} with conn->{src,dst}\n    - MINOR: unix: use conn->dst for the target address in ->connect()\n    - MINOR: sockpair: use conn->dst for the target address in ->connect()\n    - MINOR: log: use conn->{src,dst} instead of conn->addr.{from,to}\n    - MINOR: checks: replace conn->addr.to with conn->dst\n    - MINOR: frontend: switch from conn->addr.{from,to} to conn->{src,dst}\n    - MINOR: http: convert conn->addr.from to conn->src in sample fetches\n    - MEDIUM: backend: turn all conn->addr.{from,to} to conn->{src,dst}\n    - MINOR: connection: create a new pool for struct sockaddr_storage\n    - MEDIUM: connection: make sure all address producers allocate their address\n    - MAJOR: connection: remove the addr field\n    - MINOR: connection: don't use clear_addr() anymore, just release the address\n    - MINOR: stream: add a new target_addr entry in the stream structure\n    - MAJOR: stream: store the target address into s->target_addr\n    - MINOR: peers: now remove the remote connection setup code\n    - MEDIUM: lua: do not allocate the remote connection anymore\n    - MEDIUM: backend: always release any existing prior connection in connect_server()\n    - MEDIUM: backend: remove impossible cases from connect_server()\n    - BUG/MINOR: mux-h1: Close server connection if input data remains in h1_detach()\n    - BUG/MEDIUM: tcp-checks: do not dereference inexisting conn_stream\n    - BUG/MINOR: http_ana: Be sure to have an allocated buffer to generate an error\n    - BUG/MINOR: http_htx: Support empty errorfiles\n    - BUG/CRITICAL: http_ana: Fix parsing of malformed cookies which start by a delimiter\n    - BUG/MEDIUM: protocols: add a global lock for the init/deinit stuff\n    - BUG/MINOR: proxy: always lock stop_proxy()\n    - MEDIUM: mux-h1: Add the support of headers adjustment for bogus HTTP/1 apps\n    - BUILD: threads: add the definition of PROTO_LOCK\n    - BUG/MEDIUM: lb-chash: Fix the realloc() when the number of nodes is increased\n    - BUG/MEDIUM: streams: Don't switch the SI to SI_ST_DIS if we have data to send.\n    - BUG/MINOR: log: make sure writev() is not interrupted on a file output\n    - DOC: improve the wording in CONTRIBUTING about how to document a bug fix\n    - MEDIUM: h1: Don't try to subscribe if we managed to read data.\n    - MEDIUM: h1: Don't wake the H1 tasklet if we got the whole request.\n    - REGTESTS: checks: exclude freebsd target for tcp-check_multiple_ports.vtc\n    - BUG/MINOR: hlua/htx: Reset channels analyzers when txn:done() is called\n    - BUG/MEDIUM: hlua: Check the calling direction in lua functions of the HTTP class\n    - MINOR: hlua: Don't set request analyzers on response channel for lua actions\n    - MINOR: hlua: Add a flag on the lua txn to know in which context it can be used\n    - BUG/MINOR: hlua: Only execute functions of HTTP class if the txn is HTTP ready\n    - BUG/MINOR: htx: Fix free space addresses calculation during a block expansion\n    - MINOR: ssl: merge ssl_sock_load_cert_file() and ssl_sock_load_cert_chain_file()\n    - MEDIUM: ssl: use cert_key_and_chain struct in ssl_sock_load_cert_file()\n    - MEDIUM: ssl: split the loading of the certificates\n    - MEDIUM: ssl: lookup and store in a ckch_node tree\n    - MEDIUM: ssl: load DH param in struct cert_key_and_chain\n    - BUG/MAJOR: queue/threads: avoid an AB/BA locking issue in process_srv_queue()\n    - MINOR: ssl: use STACK_OF for chain certs\n    - MINOR: ssl: add extra chain compatibility\n    - MINOR: ssl: check private key consistency in loading\n    - MINOR: ssl: do not look at DHparam with OPENSSL_NO_DH\n    - CLEANUP: ssl: ssl_sock_load_crt_file_into_ckch\n    - MINOR: ssl: clean ret variable in ssl_sock_load_ckchn\n    - MAJOR: fd: Get rid of the fd cache.\n    - MEDIUM: pollers: Remember the state for read and write for each threads.\n    - MEDIUM: mux-h2: don't try to read more than needed\n    - BUG/BUILD: ssl: fix build with openssl < 1.0.2\n    - BUG/MEDIUM: ssl: does not try to free a DH in a ckch\n    - BUG/MINOR: debug: fix a small race in the thread dumping code\n    - MINOR: wdt: also consider that waiting in the thread dumper is normal\n    - REGTESTS: checks: make 4be_1srv_health_checks more reliable\n    - BUILD: ssl: BoringSSL add EVP_PKEY_base_id\n    - BUG/MEDIUM: ssl: don't free the ckch in multi-cert bundle\n    - BUG/MINOR: ssl: fix ressource leaks on error\n    - BUG/MEDIUM: lb-chash: Ensure the tree integrity when server weight is increased\n    - BUG/MAJOR: http/sample: use a static buffer for raw -> htx conversion\n    - BUG/MINOR: stream-int: make sure to always release empty buffers after sending\n    - BUG/MEDIUM: ssl: open the right path for multi-cert bundle\n    - BUG/MINOR: stream-int: also update analysers timeouts on activity\n    - BUG/MEDIUM: mux-h2: unbreak receipt of large DATA frames\n    - BUG/MEDIUM: mux-h2: split the stream's and connection's window sizes\n    - BUG/MEDIUM: proxy: Make sure to destroy the stream on upgrade from TCP to H2\n    - DOC: Add 'Question.md' issue template, discouraging asking questions\n    - BUG/MEDIUM: fd: Always reset the polled_mask bits in fd_dodelete().\n    - BUG/MEDIUM: pollers: Clear the poll_send bits as well.\n    - BUILD: travis-ci: enable daily Coverity scan\n    - BUG/MINOR: mux-h2: don't refrain from sending an RST_STREAM after another one\n    - BUG/MINOR: mux-h2: use CANCEL, not STREAM_CLOSED in h2c_frt_handle_data()\n    - BUG/MINOR: mux-h2: do not send REFUSED_STREAM on aborted uploads\n    - BUG/MEDIUM: mux-h2: do not recheck a frame type after a state transition\n    - BUG/MINOR: mux-h2: always send stream window update before connection's\n    - BUG/MINOR: mux-h2: always reset rcvd_s when switching to a new frame\n    - BUG/MEDIUM: checks: make sure to close nicely when we're the last to speak\n    - BUG/MEDIUM: stick-table: Wrong stick-table backends parsing.\n    - CLEANUP: mux-h2: move the demuxed frame check code in its own function\n    - MINOR: cache: add method to cache hash\n    - MINOR: cache: allow caching of OPTIONS request\n    - BUG/MINOR: ssl: fix 0-RTT for BoringSSL\n    - MINOR: ssl: ssl_fc_has_early should work for BoringSSL\n    - BUG/MINOR: pools: don't mark the thread harmless if already isolated\n    - BUG/MINOR: buffers/threads: always clear a buffer's head before releasing it\n    - CLEANUP: buffer: replace b_drop() with b_free()\n    - CLEANUP: task: move the cpu_time field to the task-only part\n    - MINOR: cli: add two new states to print messages on the CLI\n    - MINOR: cli: add cli_msg(), cli_err(), cli_dynmsg(), cli_dynerr()\n    - CLEANUP: cli: replace all occurrences of manual handling of return messages\n    - BUG/MEDIUM: proxy: Don't forget the SF_HTX flag when upgrading TCP=>H1+HTX.\n    - BUG/MEDIUM: proxy: Don't use cs_destroy() when freeing the conn_stream.\n    - BUG/MINOR: lua: fix setting netfilter mark\n    - BUG/MINOR: Fix prometheus '# TYPE' and '# HELP' headers\n    - BUG/MEDIUM: lua: Fix test on the direction to set the channel exp timeout\n    - BUG/MINOR: stats: Wait the body before processing POST requests\n    - MINOR: fd: make sure to mark the thread as not stuck in fd_update_events()\n    - BUG/MEDIUM: mux_pt: Don't call unsubscribe if we did not subscribe.\n    - BUILD: travis-ci: trigger non-mainstream configurations only on daily builds.\n    - MINOR: debug: indicate the applet name when the task is task_run_applet()\n    - MINOR: tools: add append_prefixed_str()\n    - MINOR: lua: export applet and task handlers\n    - MEDIUM: debug: make the thread dump code show Lua backtraces\n    - BUG/MEDIUM: h1: Always try to receive more in h1_rcv_buf().\n    - MINOR: list: add LIST_SPLICE() to merge one list into another\n    - MINOR: tools: add a DEFNULL() macro to use NULL for empty args\n    - REORG: trace: rename trace.c to calltrace.c and mention it's not thread-safe\n    - MINOR: sink: create definitions a minimal code for event sinks\n    - MINOR: sink: add a support for file descriptors\n    - MINOR: trace: start to create a new trace subsystem\n    - MINOR: trace: add allocation of buffer-sized trace buffers\n    - MINOR: trace/cli: register the \"trace\" CLI keyword to list the sources\n    - MINOR: trace/cli: parse the \"level\" argument to configure the trace verbosity\n    - MINOR: trace/cli: add \"show trace\" to report trace state and statistics\n    - MINOR: trace: implement a very basic trace() function\n    - MINOR: trace: add the file name and line number in the prefix\n    - MINOR: trace: make trace() now also take a level in argument\n    - MINOR: trace: implement a call to a decode function\n    - MINOR: trace: add per-level macros to produce traces\n    - MINOR: trace: add a definition of typed arguments to trace()\n    - MINOR: trace: make sure to always stop the locking when stopping or pausing\n    - MINOR: trace: add the possibility to lock on some arguments\n    - MINOR: trace: parse the \"lock\" argument to trace\n    - MINOR: trace: retrieve useful pointers and enforce lock-on\n    - DOC: management: document the \"trace\" and \"show trace\" commands\n    - BUILD: trace: make the lockon_ptr const to silence a warning without threads\n    - BUG/MEDIUM: mux-h1: do not truncate trailing 0CRLF on buffer boundary\n    - BUG/MEDIUM: mux-h1: do not report errors on transfers ending on buffer full\n    - DOC: fixed typo in management.txt\n    - BUG/MINOR: mworker: disable SIGPROF on re-exec\n    - BUG/MEDIUM: listener/threads: fix an AB/BA locking issue in delete_listener()\n    - BUG/MEDIUM: url32 does not take the path part into account in the returned hash.\n    - MINOR: backend: Add srv_queue converter\n    - MINOR: sink: set the fd-type sinks to non-blocking\n    - MINOR: tools: add a function varint_bytes() to report the size of a varint\n    - MINOR: buffer: add functions to read/write varints from/to buffers\n    - MINOR: fd: add fd_write_frag_line() to send a fragmented line to an fd\n    - MINOR: sink: now call the generic fd write function\n    - MINOR: ring: add a new mechanism for retrieving/storing ring data in buffers\n    - MINOR: ring: add a ring_write() function\n    - MINOR: ring: add a generic CLI io_handler to dump a ring buffer\n    - MINOR: sink: add support for ring buffers\n    - MINOR: sink: implement \"show events\" to show supported sinks and dump the rings\n    - MINOR: sink: now report the number of dropped events on output\n    - MINOR: trace: support a default callback for the source\n    - MINOR: trace: extend the source location to 13 chars\n    - MINOR: trace: show thread number and source name in the trace\n    - MINOR: trace: change the TRACE() calling convention to put the args and cb last\n    - MINOR: connection: add the fc_pp_authority fetch -- authority TLV, from PROXYv2\n    - MINOR: tools: add a generic struct \"name_desc\" for name-description pairs\n    - MINOR: trace: replace struct trace_lockon_args with struct name_desc\n    - MINOR: trace: change the \"payload\" level to \"data\" and move it\n    - MINOR: trace: prepend the function name for developer level traces\n    - MINOR: trace: also report the trace level in the output\n    - MINOR: trace: change the detail_level to per-source verbosity\n    - MINOR: mux-h2/trace: register a new trace source with its events\n    - MINOR: mux-h2/trace: add the default decoding callback\n    - MEDIUM: mux-h2/trace: add lots of traces all over the code\n    - MINOR: mux-h2: add functions to convert an h2c/h2s state to a string\n    - MINOR: mux-h2/trace: add a new verbosity level \"clean\"\n    - MINOR: mux-h2/trace: only decode the start-line at verbosity other than \"minimal\"\n    - MINOR: mux-h2/trace: always report the h2c/h2s state and flags\n    - MINOR: mux-h2/trace: report h2s->id before h2c->dsi for the stream ID\n    - CLEANUP: mux-h2/trace: reformat the \"received\" messages for better alignment\n    - CLEANUP: mux-h2/trace: lower-case event names\n    - MINOR: trace: extend default event names to 12 chars\n    - BUG/MINOR: ring: fix the way watchers are counted\n    - MINOR: cli: extend the CLI context with a list and two offsets\n    - MINOR: mux-h2/trace: report the connection pointer and state before FRAME_H\n    - MEDIUM: ring: implement a wait mode for watchers\n    - BUG/MEDIUM: mux-h2/trace: do not dereference h2c->conn after failed idle\n    - BUG/MEDIUM: mux-h2/trace: fix missing braces added with traces\n    - BUG/MINOR: ring: b_peek_varint() returns a uint64_t, not a size_t\n    - CLEANUP: fd: remove leftovers of the fdcache\n    - MINOR: fd: add a new \"initialized\" bit in the fdtab struct\n    - MINOR: fd/log/sink: make the non-blocking initialization depend on the initialized bit\n    - MEDIUM: log: use the new generic fd_write_frag_line() function\n    - MINOR: log: add a target type instead of hacking the address family\n    - MEDIUM: log: add support for logging to a ring buffer\n    - MINOR: send-proxy-v2: sends authority TLV according to TLV received\n    - MINOR: build: add linux-glibc-legacy build TARGET\n    - BUG/MEDIUM: peers: local peer socket not bound.\n    - BUILD: connection: silence gcc warning with extra parentheses\n    - BUG/MINOR: http-ana: Reset response flags when 1xx messages are handled\n    - BUG/MINOR: h1: Properly reset h1m when parsing is restarted\n    - BUG/MINOR: mux-h1: Fix size evaluation of HTX messages after headers parsing\n    - BUG/MINOR: mux-h1: Don't stop anymore input processing when the max is reached\n    - BUG/MINOR: mux-h1: Be sure to update the count before adding EOM after trailers\n    - BUG/MEDIUM: cache: Properly copy headers splitted on several shctx blocks\n    - BUG/MEDIUM: cache: Don't cache objects if the size of headers is too big\n    - BUG/MINOR: mux-h1: Fix a possible null pointer dereference in h1_subscribe()\n    - MEDIUM: fd: remove the FD_EV_POLLED status bit\n    - MEDIUM: fd: simplify the fd_*_{recv,send} functions using BTS/BTR\n    - MINOR: fd: make updt_fd_polling() a normal function\n    - CONTRIB: debug: add new program \"poll\" to test poll() events\n    - BUG/MINOR: checks: stop polling for write when we have nothing left to send\n    - BUG/MINOR: checks: start sending the request right after connect()\n    - BUG/MINOR: checks: make __event_chk_srv_r() report success before closing\n    - BUG/MINOR: checks: do not uselessly poll for reads before the connection is up\n    - BUG/MINOR: mux-h1: Fix a UAF in cfg_h1_headers_case_adjust_postparser()\n    - BUILD: CI: add basic CentOS 6 cirrus build\n    - MINOR: contrib/prometheus-exporter: Report DRAIN/MAINT/NOLB status for servers\n    - BUG/MINOR: lb/leastconn: ignore the server weights for empty servers\n    - BUG/MAJOR: ssl: ssl_sock was not fully initialized.\n    - MEDIUM: fd: mark the FD as ready when it's inserted\n    - MINOR: fd: add two new calls fd_cond_{recv,send}()\n    - MEDIUM: connection: enable reading only once the connection is confirmed\n    - MINOR: fd: add two flags ERR and SHUT to describe FD states\n    - MEDIUM: fd: do not use the FD_POLL_* flags in the pollers anymore\n    - BUG/MEDIUM: connection: don't keep more idle connections than ever needed\n    - MINOR: stats: report the number of idle connections for each server\n    - BUILD: CI: skip reg-tests/connection/proxy_protocol_random_fail.vtc on CentOS 6\n    - BUILD/MINOR: auth: enabling for osx\n    - BUG/MINOR: listener: Fix a possible null pointer dereference\n    - BUG/MINOR: ssl: always check for ssl connection before getting its XPRT context\n    - MINOR: stats: Add JSON export from the stats page\n    - BUG/MINOR: filters: Properly set the HTTP status code on analysis error\n    - MINOR: sample: Add UUID-fetch\n    - CLEANUP: mux-h2: Remove unused flag H2_SF_DATA_CHNK\n    - BUG/MINOR: acl: Fix memory leaks when an ACL expression is parsed\n    - BUG/MINOR: backend: Fix a possible null pointer dereference\n    - BUG/MINOR: Missing stat_field_names (since f21d17bb)\n    - BUG/MEDIUM: stick-table: Properly handle \"show table\" with a data type argument\n    - BUILD: CI: temporarily disable ASAN\n    - MINOR: htx: Add a flag on HTX message to report processing errors\n    - MINOR: mux-h1: Report a processing error during output processing\n    - MINOR: http-ana: Handle HTX errors first during message analysis\n    - MINOR: http-ana: Remove err_state field from http_msg\n    - MINOR: config: Support per-proxy and per-server deinit functions callbacks\n    - MINOR: config: Support per-proxy and per-server post-check functions callbacks\n    - MINOR: http_fetch: Add sample fetches to get auth method/user/pass\n    - MINOR: istbuf: Add the function b_isteqi()\n    - MINOR: log: Provide a function to emit a log for an application\n    - MINOR: http: Add function to parse value of the header Status\n    - MEDIUM: mux-h1/h1-htx: move HTX convertion of H1 messages in dedicated file\n    - MINOR: h1-htx: Use the same function to copy message payload in all cases\n    - MINOR: muxes/htx: Ignore pseudo header during message formatting\n    - MINOR: fcgi: Add code related to FCGI protocol\n    - MEDIUM: fcgi-app: Add FCGI application and filter\n    - MEDIUM: mux-fcgi: Add the FCGI multiplexer\n    - MINOR: doc: Add documentation about the FastCGI support\n    - BUG/MINOR: build: Fix compilation of mux_fcgi.c when compiled without SSL\n    - BUILD: CI: install golang-1.13 when building BoringSSL\n    - BUG/MINOR: mux-h2: Be sure to have a connection to unsubcribe\n    - BUG/MINOR: mux-fcgi: Be sure to have a connection to unsubcribe\n    - CLEANUP: fcgi-app: Remove useless test on fcgi_conf pointer\n    - BUG/MINOR: mux-fcgi: Don't compare the filter name in its parsing callback\n    - BUG/MAJOR: mux-h2: Handle HEADERS frames received after a RST_STREAM frame\n    - BUG/MEDIUM: check/threads: make external checks run exclusively on thread 1\n    - MEDIUM: list: Separate \"locked\" list from regular list.\n    - MINOR: mt_lists: Add new macroes.\n    - MEDIUM: servers: Use LIST_DEL_INIT() instead of LIST_DEL().\n    - MINOR: mt_lists: Do nothing in MT_LIST_ADD/MT_LIST_ADDQ if already in list.\n    - MINOR: mt_lists: Give MT_LIST_ADD, MT_LIST_ADDQ and MT_LIST_DEL a return value.\n    - MEDIUM: tasklets: Make the tasklet list a struct mt_list.\n    - TESTS: Add a stress-test for mt_lists.\n    - BUILD: travis-ci: add PCRE2, SLZ build\n    - BUG/MINOR: build: fix event ports (Solaris)\n    - BUG/MEDIUM: namespace: fix fd leak in master-worker mode\n    - OPTIM: listeners: use tasklets for the multi-queue rings\n    - BUILD: makefile: work around yet another GCC fantasy (-Wstring-plus-int)\n    - BUG/MINOR: stream-int: Process connection/CS errors first in si_cs_send()\n    - BUG/MEDIUM: stream-int: Process connection/CS errors during synchronous sends\n    - BUG/MEDIUM: checks: make sure the connection is ready before trying to recv\n    - CLEANUP: task: remove impossible test\n    - CLEANUP: task: cache the task_per_thread pointer\n    - MINOR: task: split the tasklet vs task code in process_runnable_tasks()\n    - MINOR: task: introduce a thread-local \"sched\" variable for local scheduler stuff\n    - CLEANUP: mux-fcgi: Remove the unused function fcgi_strm_id()\n    - BUG/MINOR: mux-fcgi: Use a literal string as format in app_log()\n    - BUG/MEDIUM: tasklets: Make sure we're waking the target thread if it sleeps.\n    - MINOR: h2/trace: indicate 'F' or 'B' to locate the side of an h2c in traces\n    - MINOR: h2/trace: report the frame type when known\n    - BUG/MINOR: mux-h2: do not wake up blocked streams before the mux is ready\n    - BUG/MEDIUM: namespace: close open namespaces during soft shutdown\n    - MINOR: time: add timeofday_as_iso_us() to return instant time as ISO\n    - MINOR: sink: finally implement support for SINK_FMT_{TIMED,ISO}\n    - MINOR: sink: change ring buffer \"buf0\"'s format to \"timed\"\n    - BUG/MEDIUM: mux-h2: don't reject valid frames on closed streams\n    - BUG/MINOR: mux-fcgi: silence a gcc warning about null dereference\n    - BUG/MINOR: mux-h2: Fix missing braces because of traces in h2_detach()\n    - BUG/MINOR: mux-h2: Use the dummy error when decoding headers for a closed stream\n    - BUG/MAJOR: mux_h2: Don't consume more payload than received for skipped frames\n    - BUG/MINOR: mux-h1: Do h2 upgrade only on the first request\n    - BUG/MEDIUM: spoe: Use a different engine-id per process\n    - MINOR: spoe: Improve generation of the engine-id\n    - MINOR: spoe: Support the async mode with several threads\n    - MINOR: http: Add server name header from HTTP multiplexers\n    - CLEANUP: http-ana: Remove the unused function http_send_name_header()\n    - MINOR: stats: Add the support of float fields in stats\n    - BUG/MINOR: contrib/prometheus-exporter: Return the time averages in seconds\n    - DOC: Fix documentation about the cli command to get resolver stats\n    - BUG/MEDIUM: fcgi: fix missing list tail in sample fetch registration\n    - BUG/MINOR: stats: Add a missing break in a switch statement\n    - BUG/MINOR: lua: Properly initialize the buffer's fields for string samples in hlua_lua2(smp|arg)\n    - CLEANUP: lua: Get rid of obsolete (size_t *) cast in hlua_lua2(smp|arg)\n    - BUG/MEDIUM: lua: Store stick tables into the sample's `t` field\n    - CLEANUP: proxy: Remove `proxy_tbl_by_name`\n    - BUILD: ssl: fix a warning when built with openssl < 1.0.2\n    - DOC: replace utf-8 quotes by ascii ones\n    - BUG/MEDIUM: fd: HUP is an error only when write is active\n    - BUG/MINOR: action: do-resolve does not yield on requests with body\n    - Revert \"MINOR: cache: allow caching of OPTIONS request\"\n\n2019/07/16 : 2.1-dev1\n    - BUG/MEDIUM: h2/htx: Update data length of the HTX when the cookie list is built\n    - DOC: this is a development branch again.\n    - MEDIUM: Make 'block' directive fatal\n    - MEDIUM: Make 'redispatch' directive fatal\n    - MEDIUM: Make '(cli|con|srv)timeout' directive fatal\n    - MEDIUM: Remove 'option independant-streams'\n    - MINOR: sample: Add sha2([<bits>]) converter\n    - MEDIUM: server: server-state global file stored in a tree\n    - BUG/MINOR: lua/htx: Make txn.req_req_* and txn.res_rep_* HTX aware\n    - BUG/MINOR: mux-h1: Add the header connection in lower case in outgoing messages\n    - BUG/MEDIUM: compression: Set Vary: Accept-Encoding for compressed responses\n    - MINOR: htx: Add the function htx_change_blk_value_len()\n    - BUG/MEDIUM: htx: Fully update HTX message when the block value is changed\n    - BUG/MEDIUM: mux-h2: Reset padlen when several frames are demux\n    - BUG/MEDIUM: mux-h2: Remove the padding length when a DATA frame size is checked\n    - BUG/MEDIUM: lb_fwlc: Don't test the server's lb_tree from outside the lock\n    - BUG/MAJOR: sample: Wrong stick-table name parsing in \"if/unless\" ACL condition.\n    - BUILD: mworker: silence two printf format warnings around getpid()\n    - BUILD: makefile: use :space: instead of digits to count commits\n    - BUILD: makefile: adjust the sed expression of \"make help\" for solaris\n    - BUILD: makefile: do not rely on shell substitutions to determine git version\n    - BUG/MINOR: mworker-prog: Fix segmentation fault during cfgparse\n    - BUG/MINOR: spoe: Fix memory leak if failing to allocate memory\n    - BUG/MEDIUM: mworker: don't call the thread and fdtab deinit\n    - BUG/MEDIUM: stream_interface: Don't add SI_FL_ERR the state is < SI_ST_CON.\n    - BUG/MEDIUM: connections: Always add the xprt handshake if needed.\n    - BUG/MEDIUM: ssl: Don't do anything in ssl_subscribe if we have no ctx.\n    - BUG/MEDIUM: mworker/cli: command pipelining doesn't work anymore\n    - BUG/MINOR: htx: Save hdrs_bytes when the HTX start-line is replaced\n    - BUG/MAJOR: mux-h1: Don't crush trash chunk area when outgoing message is formatted\n    - BUG/MINOR: memory: Set objects size for pools in the per-thread cache\n    - BUG/MINOR: log: Detect missing sampling ranges in config\n    - BUG/MEDIUM: proto_htx: Don't add EOM on 1xx informational messages\n    - BUG/MEDIUM: mux-h1: Use buf_room_for_htx_data() to detect too large messages\n    - BUG/MINOR: mux-h1: Make format errors during output formatting fatal\n    - BUG/MEDIUM: ssl: Don't attempt to set alpn if we're not using SSL.\n    - BUG/MEDIUM: mux-h1: Always release H1C if a shutdown for writes was reported\n    - BUG/MINOR: mworker/cli: don't output a \\n before the response\n    - BUG/MEDIUM: checks: unblock signals in external checks\n    - BUG/MINOR: mux-h1: Skip trailers for non-chunked outgoing messages\n    - BUG/MINOR: mux-h1: Don't return the empty chunk on HEAD responses\n    - BUG/MEDIUM: connections: Always call shutdown, with no linger.\n    - BUG/MEDIUM: checks: Make sure the tasklet won't run if the connection is closed.\n    - BUG/MINOR: contrib/prometheus-exporter: Don't use channel_htx_recv_max()\n    - BUG/MINOR: hlua: Don't use channel_htx_recv_max()\n    - BUG/MEDIUM: channel/htx: Use the total HTX size in channel_htx_recv_limit()\n    - BUG/MINOR: hlua/htx: Respect the reserve when HTX data are sent\n    - BUG/MINOR: contrib/prometheus-exporter: Respect the reserve when data are sent\n    - BUG/MEDIUM: connections: Make sure we're unsubscribe before upgrading the mux.\n    - BUG/MEDIUM: servers: Authorize tfo in default-server.\n    - BUG/MEDIUM: sessions: Don't keep an extra idle connection in sessions.\n    - MINOR: server: Add \"no-tfo\" option.\n    - BUG/MINOR: contrib/prometheus-exporter: Don't try to add empty data blocks\n    - MINOR: action: Add the return code ACT_RET_DONE for actions\n    - BUG/MEDIUM: http/applet: Finish request processing when a service is registered\n    - BUG/MEDIUM: lb_fas: Don't test the server's lb_tree from outside the lock\n    - BUG/MEDIUM: mux-h1: Handle TUNNEL state when outgoing messages are formatted\n    - BUG/MINOR: mux-h1: Don't process input or ouput if an error occurred\n    - MINOR: stream-int: Factorize processing done after sending data in si_cs_send()\n    - BUG/MEDIUM: stream-int: Don't rely on CF_WRITE_PARTIAL to unblock opposite si\n    - DOC: contrib: spoa_server Add some hints for building spoa_server\n    - DOC: Fix typo in intro.txt\n    - BUG/MEDIUM: servers: Don't forget to set srv_cs to NULL if we can't reuse it.\n    - BUG/MINOR: ssl: revert empty handshake detection in OpenSSL <= 1.0.2\n    - MINOR: pools: release the pool's lock during the malloc/free calls\n    - MINOR: pools: always pre-initialize allocated memory outside of the lock\n    - MINOR: pools: make the thread harmless during the mmap/munmap syscalls\n    - BUG/MEDIUM: fd/threads: fix excessive CPU usage on multi-thread accept\n    - BUG/MINOR: server: Be really able to keep \"pool-max-conn\" idle connections\n    - BUG/MEDIUM: checks: Don't attempt to read if we destroyed the connection.\n    - BUG/MEDIUM: da: cast the chunk to string.\n    - DOC: Fix typos and grammer in configuration.txt\n    - CLEANUP: proto_tcp: Remove useless header inclusions.\n    - BUG/MEDIUM: servers: Fix a race condition with idle connections.\n    - MINOR: task: introduce work lists\n    - BUG/MAJOR: listener: fix thread safety in resume_listener()\n    - BUG/MEDIUM: mux-h1: Don't release h1 connection if there is still data to send\n    - BUG/MINOR: mux-h1: Correctly report Ti timer when HTX and keepalives are used\n    - BUG/MEDIUM: streams: Don't give up if we couldn't send the request.\n    - BUG/MEDIUM: streams: Don't redispatch with L7 retries if redispatch isn't set.\n    - BUG/MINOR: mux-pt: do not pretend there's more data after a read0\n    - BUG/MEDIUM: tcp-check: unbreak multiple connect rules again\n    - MEDIUM: mworker-prog: Add user/group options to program section\n    - REGTESTS: checks: tcp-check connect to multiple ports\n    - BUG/MEDIUM: threads: cpu-map designating a single thread/process are ignored\n\n2019/06/16 : 2.1-dev0\n    - exact copy of 2.0.0\n\n2019/06/16 : 2.0.0\n    - MINOR: fd: Don't use atomic operations when it's not needed.\n    - DOC: mworker-prog: documentation for the program section\n    - MINOR: http: add a new \"http-request replace-uri\" action\n    - BUG/MINOR: 51d/htx: The _51d_fetch method, and the methods it calls are now HTX aware.\n    - MINOR: 51d: Added dummy libraries for the 51Degrees module for testing.\n    - MINOR: mworker: change formatting in uptime field of \"show proc\"\n    - MINOR: mworker: add the HAProxy version in \"show proc\"\n    - MINOR: doc: Remove -Ds option in man page\n    - MINOR: doc: add master-worker in the man page\n    - MINOR: doc: mention HAPROXY_LOCALPEER in the man\n    - BUILD: Silence gcc warning about unused return value\n    - CLEANUP: 51d: move the 51d dummy lib to contrib/51d/src to match the real lib\n    - BUILD: travis-ci: add 51Degree device detection, update openssl to 1.1.1c\n    - MINOR: doc: update the manpage and usage message about -S\n    - BUILD/MINOR: 51d: Updated build registration output to indicate thatif the library is a dummy one or not.\n    - BUG/MEDIUM: h1: Don't wait for handshake if we had an error.\n    - BUG/MEDIUM: h1: Wait for the connection if the handshake didn't complete.\n    - BUG/MINOR: task: prevent schedulable tasks from starving under high I/O activity\n    - BUG/MINOR: fl_trace/htx: Be sure to always forward trailers and EOM\n    - BUG/MINOR: channel/htx: Call channel_htx_full() from channel_full()\n    - BUG/MINOR: http: Use the global value to limit the number of parsed headers\n    - BUG/MINOR: htx: Detect when tail_addr meet end_addr to maximize free rooms\n    - BUG/MEDIUM: htx: Don't change position of the first block during HTX analysis\n    - CLEANUP: channel: Remove channel_htx_fwd_payload() and channel_htx_fwd_all()\n    - BUG/MEDIUM: proto_htx: Introduce the state ENDING during forwarding\n    - MINOR: htx: Add 3 flags on the start-line to deal with the request schemes\n    - MINOR: h2: Set flags about the request's scheme on the start-line\n    - MINOR: mux-h1: Set flags about the request's scheme on the start-line\n    - MINOR: mux-h2: Forward clients scheme to servers checking start-line flags\n    - MEDIUM: server: server-state only rely on server name\n    - CLEANUP: connection: rename the wait_event.task field to .tasklet\n    - CLEANUP: tasks: rename task_remove_from_tasklet_list() to tasklet_remove_*\n    - BUG/MEDIUM: connections: Don't call shutdown() if we want to disable linger.\n    - DOC: add some environment variables in section 2.3\n    - BUILD: makefile: clarify the \"help\" output and list options\n    - BUG/MINOR: mux-h1: Wake busy mux for I/O when message is fully sent\n    - BUG: tasks: fix bug introduced by latest scheduler cleanup\n    - BUG/MEDIUM: mux-h2: fix early close with option abortonclose\n    - BUG/MEDIUM: connections: Don't use ALPN to pick mux when in mode TCP.\n    - BUG/MEDIUM: connections: Don't try to send early data if we have no mux.\n    - BUG/MEDIUM: mux-h2: properly account for the appended data in HTX\n    - BUILD: makefile: further clarify the \"help\" output and list targets\n    - BUILD: makefile: rename \"linux2628\" to \"linux-glibc\" and remove older targets\n    - BUILD: travis-ci: switch to linux-glibc instead of linux2628\n    - DOC: update few references to the linux* targets and change them to linux-glibc\n    - BUILD: makefile: detect and reject recently removed linux targets\n    - BUILD: makefile: enable linux namespaces by default on linux\n    - BUILD: makefile: enable TFO on linux platforms\n    - BUILD: makefile: enable getaddrinfo on the linux-glibc target\n    - DOC: small updates to the CONTRIBUTING file\n    - BUG/MEDIUM: ssl: Make sure we initiate the handshake after using early data.\n    - CLEANUP: removed obsolete examples an move a few to better places\n    - DOC: Fix typos in CONTRIBUTING\n    - DOC: update the outdated ROADMAP file\n    - DOC: create a BRANCHES file to explain the life cycle\n    - DOC: mention in INSTALL haproxy 2.0 is a long-term supported stable version\n    - BUILD: travis-ci: TFO and GETADDRINFO are now enabled by default\n    - BUILD: makefile: make the obsolete target detection compatible with make-3.80\n    - BUILD: tools: work around an internal compiler bug in gcc-3.4\n    - BUILD: pattern: work around an internal compiler bug in gcc-3.4\n    - BUILD: makefile: enable USE_RT on Solaris\n    - BUILD: makefile: do not use echo -n\n    - DOC: mention a few common build errors in the INSTALL file\n\n2019/06/11 : 2.0-dev7\n    - BUG/MEDIUM: mux-h2: make sure the connection timeout is always set\n    - MINOR: tools: add new bitmap manipulation functions\n    - MINOR: logs: use the new bitmap functions instead of fd_sets for encoding maps\n    - MINOR: chunks: Make sure trash_size is only set once.\n    - Revert \"MINOR: chunks: Make sure trash_size is only set once.\"\n    - MINOR: threads: serialize threads initialization\n    - MINOR peers: data structure simplifications for server names dictionary cache.\n    - DOC: peers: Update for dictionary cache entries for peers protocol.\n    - MINOR: dict: Store the length of the dictionary entries.\n    - MINOR: peers: A bit of optimization when encoding cached server names.\n    - MINOR: peers: Optimization for dictionary cache lookup.\n    - MEDIUM: tools: improve time format error detection\n    - BUG/MEDIUM: H1: When upgrading, make sure we don't free the buffer too early.\n    - BUG/MEDIUM: stream_interface: Make sure we call si_cs_process() if CS_FL_EOI.\n    - MINOR: threads: avoid clearing harmless twice in thread_release()\n    - MEDIUM: threads: add thread_sync_release() to synchronize steps\n    - BUG/MEDIUM: init/threads: prevent initialized threads from starting before others\n    - OPTIM/MINOR: init/threads: only call protocol_enable_all() on first thread\n    - BUG/MINOR: dict: race condition fix when inserting dictionary entries.\n    - MEDIUM: init/threads: don't use spinlocks during the init phase\n    - BUG/MINOR: cache/htx: Fix the counting of data already sent by the cache applet\n    - BUG/MEDIUM: compression/htx: Fix the adding of the last data block\n    - MINOR: flt_trace: Don't scrash the original offset during the random forwarding\n    - MAJOR: htx: Rework how free rooms are tracked in an HTX message\n    - MINOR: htx: Add the function htx_move_blk_before()\n    - Revert \"BUG/MEDIUM: H1: When upgrading, make sure we don't free the buffer too early.\"\n    - BUG/MINOR: http-rules: mention \"deny_status\" for \"deny\" in the error message\n    - MINOR: http: turn default error files to HTTP/1.1\n    - BUG/MEDIUM: h1: Don't try to subscribe if we had a connection error.\n    - BUG/MEDIUM: h1: Don't consider we're connected if the handshake isn't done.\n    - MINOR: contrib/spoa_server: Upgrade SPOP to 2.0\n    - BUG/MEDIUM: contrib/spoa_server: Set FIN flag on agent frames\n    - MINOR: contrib/spoa_server: Add random IP score\n    - DOC/MINOR: contrib/spoa_server: Fix typo in README\n\n2019/06/07 : 2.0-dev6\n    - BUG/MEDIUM: connection: fix multiple handshake polling issues\n    - MINOR: connection: also stop receiving after a SOCKS4 response\n    - MINOR: mux-h1: don't try to recv() before the connection is ready\n    - BUG/MEDIUM: mux-h1: only check input data for the current stream, not next one\n    - MEDIUM: mux-h1: don't use CS_FL_REOS anymore\n    - CLEANUP: connection: remove the now unused CS_FL_REOS flag\n    - CONTRIB: debug: add 4 missing connection/conn_stream flags\n    - MEDIUM: stream: make a full process_stream() loop when completing I/O on exit\n    - MINOR: server: increase the default pool-purge-delay to 5 seconds\n    - BUILD: tools: do not use the weak attribute for trace() on obsolete linkers\n    - BUG/MEDIUM: vars: make sure the scope is always valid when accessing vars\n    - BUG/MEDIUM: vars: make the tcp/http unset-var() action support conditions\n    - BUILD: task: fix a build warning when threads are disabled\n    - CLEANUP: peers: Remove tabs characters.\n    - CLEANUP: peers: Replace hard-coded values by macros.\n    - BUG/MINOR: peers: Wrong stick-table update message building.\n    - MINOR: dict: Add dictionary new data structure.\n    - MINOR: peers: Add a LRU cache implementation for dictionaries.\n    - MINOR: stick-table: Add \"server_name\" new data type.\n    - MINOR: cfgparse: Space allocation for \"server_name\" stick-table data type.\n    - MINOR: proxy: Add a \"server by name\" tree to proxy.\n    - MINOR: server: Add a dictionary for server names.\n    - MINOR: stream: Stickiness server lookup by name.\n    - MINOR: peers: Make peers protocol support new \"server_name\" data type.\n    - MINOR: stick-table: Make the CLI stick-table handler support dictionary entry data type.\n    - REGTEST: Add a basic server by name stickiness reg test.\n    - MINOR: peers: Add dictionary cache information to \"show peers\" CLI command.\n    - MINOR: peers: Replace hard-coded for peer protocol 64-bits value encoding by macros.\n    - MINOR: peers: Replace hard-coded values for peer protocol messaging by macros.\n    - CLEANUP: ssl: remove unneeded defined(OPENSSL_IS_BORINGSSL)\n    - BUILD: travis-ci improvements\n    - MINOR: SSL: add client/server random sample fetches\n    - BUG/MINOR: channel/htx: Don't alter channel during forward for empty HTX message\n    - BUG/MINOR: contrib/prometheus-exporter: Add HTX data block in one time\n    - BUG/MINOR: mux-h1: errflag must be set on H1S and not H1M during output processing\n    - MEDIUM: mux-h1: refactor output processing\n    - MINOR: mux-h1: Add the flag HAVE_O_CONN on h1s\n    - MINOR: mux-h1: Add h1_eval_htx_hdrs_size() to estimate size of the HTX headers\n    - MINOR: mux-h1: Don't count the EOM in the estimated size of headers\n    - MEDIUM: cache/htx: Always store info about HTX blocks in the cache\n    - MEDIUM: htx: Add the parsing of trailers of chunked messages\n    - MINOR: htx: Don't use end-of-data blocks anymore\n    - BUG/MINOR: mux-h1: Don't send more data than expected\n    - BUG/MINOR: flt_trace/htx: Only apply the random forwarding on the message body.\n    - BUG/MINOR: peers: Wrong \"server_name\" decoding.\n    - BUG/MEDIUM: servers: Don't attempt to destroy idle connections if disabled.\n    - MEDIUM: checks: Make sure we unsubscribe before calling cs_destroy().\n    - MEDIUM: connections: Wake the upper layer even if sending/receiving is disabled.\n    - MEDIUM: ssl: Handle subscribe by itself.\n    - MINOR: ssl: Make ssl_sock_handshake() static.\n    - MINOR: connections: Add a new xprt method, remove_xprt.\n    - MINOR: connections: Add a new xprt method, add_xprt().\n    - MEDIUM: connections: Introduce a handshake pseudo-XPRT.\n    - MEDIUM: connections: Remove CONN_FL_SOCK*\n    - BUG/MEDIUM: ssl: Don't forget to initialize ctx->send_recv and ctx->recv_wait.\n    - BUG/MINOR: peers: Wrong server name parsing.\n    - MINOR: server: really increase the pool-purge-delay default to 5 seconds\n    - BUG/MINOR: stream: don't emit a send-name-header in conn error or disconnect states\n    - MINOR: stream-int: use bit fields to match multiple stream-int states at once\n    - MEDIUM: stream-int: remove dangerous interval checks for stream-int states\n    - MEDIUM: stream-int: introduce a new state SI_ST_RDY\n    - MAJOR: stream-int: switch from SI_ST_CON to SI_ST_RDY on I/O\n    - MEDIUM: stream-int: make idle-conns switch to ST_RDY\n    - MEDIUM: stream: re-arrange the connection setup status reporting\n    - MINOR: stream-int: split si_update() into si_update_rx() and si_update_tx()\n    - MINOR: stream-int: make si_sync_send() from the send code of si_update_both()\n    - MEDIUM: stream: rearrange the events to remove the loop\n    - MEDIUM: stream: only loop on flags relevant to the analysers\n    - MEDIUM: stream: don't abusively loop back on changes on CF_SHUT*_NOW\n    - BUILD: stream-int: avoid a build warning in dev mode in si_state_bit()\n    - BUILD: peers: fix a build warning about an incorrect intiialization\n    - BUG/MINOR: time: make sure only one thread sets global_now at boot\n    - BUG/MEDIUM: tcp: Make sure we keep the polling consistent in tcp_probe_connect.\n\n2019/06/02 : 2.0-dev5\n    - BUILD: watchdog: use si_value.sival_int, not si_int for the timer's value\n    - BUILD: signals: FreeBSD has SI_LWP instead of SI_TKILL\n    - BUILD: watchdog: condition it to USE_RT\n    - MINOR: raw_sock: report global traffic statistics\n    - MINOR: stats: report the global output bit rate in human readable form\n    - BUG/MINOR: proto-htx: Try to keep connections alive on redirect\n    - BUG/MEDIUM: spoe: Don't use the SPOE applet after releasing it\n    - BUG/MINOR: lua: Set right direction and flags on new HTTP objects\n    - BUG/MINOR: mux-h2: Count EOM in bytes sent when a HEADERS frame is formatted\n    - BUG/MINOR: mux-h1: Report EOI instead EOS on parsing error or H2 upgrade\n    - BUG/MEDIUM: proto-htx: Not forward too much data when 1xx reponses are handled\n    - BUG/MINOR: htx: Remove a forgotten while loop in htx_defrag()\n    - DOC: fix typos\n    - BUG/MINOR: ssl_sock: Fix memory leak when disabling compression\n    - OPTIM: freq-ctr: don't take the date lock for most updates\n    - MEDIUM: mux-h2: avoid doing expensive buffer realigns when not absolutely needed\n    - CLEANUP: debug: remove the TRACE() macro\n    - MINOR: buffer: introduce b_make() to make a buffer from its parameters\n    - MINOR: buffer: add a new buffer ring API to manipulate rings of buffers\n    - MEDIUM: mux-h2: replace all occurrences of mbuf with a buffer ring\n    - MEDIUM: mux-h2: make the conditions to send based on mbuf, not just its tail\n    - MINOR: mux-h2: introduce h2_release_mbuf() to release all buffers in the mbuf ring\n    - MEDIUM: mux-h2: make the send() function iterate over all mux buffers\n    - CLEANUP: mux-h2: consistently use a local variable for the mbuf\n    - MINOR: mux-h2: report the mbuf's head and tail in \"show fd\"\n    - MAJOR: mux-h2: switch to next mux buffer on buffer full condition.\n    - BUILD: connections: shut up gcc about impossible out-of-bounds warning\n    - BUILD: ssl: fix latest LibreSSL reg-test error\n    - MINOR: cli/activity: remove \"fd_del\" and \"fd_skip\" from show activity\n    - MINOR: cli/activity: add 3 general purpose counters in development mode\n    - BUG/MAJOR: lb/threads: make sure the avoided server is not full on second pass\n    - BUG/MEDIUM: queue: fix the tree walk in pendconn_redistribute.\n    - BUG/MEDIUM: threads: fix double-word CAS on non-optimized 32-bit platforms\n    - MEDIUM: config: now alert when two servers have the same name\n    - MINOR: htx: Remove the macro IS_HTX_SMP() and always use IS_HTX_STRM() instead\n    - MINOR: htx: Move the macro IS_HTX_STRM() in proto/stream.h\n    - MINOR: htx: Store the head position instead of the wrap one\n    - MINOR: htx: Store start-line block's position instead of address of its payload\n    - MINOR: htx: Add functions to get the first block of an HTX message\n    - MINOR: mux-h2/htx: Get the start-line from the head when HEADERS frame is built\n    - MINOR: htx: Replace the function http_find_stline() by http_get_stline()\n    - CLEANUP: htx: Remove unused function htx_get_stline()\n    - MINOR: http/htx: Use sl_pos directly to replace the start-line\n    - MEDIUM: http/htx: Perform analysis relatively to the first block\n    - MINOR: channel/htx: Call channel_htx_recv_max() from channel_recv_max()\n    - MINOR: htx: Add function htx_get_max_blksz()\n    - BUG/MINOR: htx: Change htx_xfer_blk() to also count metadata\n    - MEDIUM: mux-h1: Use the count value received from the SI in h1_rcv_buf()\n    - MINOR: mux-h2: Use the count value received from the SI in h2_rcv_buf()\n    - MINOR: stream-int: Don't use the flag CO_RFL_KEEP_RSV anymore in si_cs_recv()\n    - MINOR: connection: Remove the unused flag CO_RFL_KEEP_RSV\n    - MINOR: mux-h2/htx: Support zero-copy when possible in h2_rcv_buf()\n    - MINOR: htx: Add a field to set the memory used by headers in the HTX start-line\n    - MINOR: h2/htx: Set hdrs_bytes on the SL when an HTX message is produced\n    - MINOR: mux-h1: Set hdrs_bytes on the SL when an HTX message is produced\n    - MINOR: htx: Be sure to xfer all headers in one time in htx_xfer_blks()\n    - MEDIUM: htx: 1xx messages are now part of the final reponses\n    - MINOR: channel/htx: Add function to forward headers of an HTX message\n    - MINOR: filters/htx: Use channel_htx_fwd_headers() after headers filtering\n    - MINOR: proto-htx: Use channel_htx_fwd_headers() to forward 1xx responses\n    - MEDIUM: htx: Store the first block position instead of the start-line one\n    - MINOR: stats/htx: don't use the first block position but the head one\n    - MINOR: channel/htx: Add functions to forward a part or all HTX payload\n    - MINOR: proto-htx: Use channel_htx_fwd_all() when unfiltered body are forwarded\n    - MEDIUM: filters/htx: Filter body relatively to the first block\n    - MINOR: htx: Optimize htx_drain() when all data are drained\n    - MINOR: htx: don't rely on htx_find_blk() anymore in the function htx_truncate()\n    - MINOR: htx: remove the unused function htx_find_blk()\n    - MINOR: htx: Remove support of pseudo headers because it is unused\n    - BUG/MEDIUM: http: fix \"http-request reject\" when not final\n    - MINOR: ssl: Make sure the underlying xprt's init method doesn't fail.\n    - MINOR: ssl: Don't forget to call the close method of the underlying xprt.\n    - MINOR: htx: rename htx_append_blk_value() to htx_add_data_atonce()\n    - MINOR: htx: make htx_add_data() return the transmitted byte count\n    - MEDIUM: htx: make htx_add_data() never defragment the buffer\n    - MINOR: activity: write totals on the \"show activity\" output\n    - MINOR: activity: report totals and average separately\n    - MEDIUM: poller: separate the wait time from the wake events\n    - MINOR: activity: report the number of failed pool/buffer allocations\n    - MEDIUM: buffers: relax the buffer lock a little bit\n    - MINOR: task: turn the WQ lock to an RW_LOCK\n    - MEDIUM: task: don't grab the WR lock just to check the WQ\n    - BUG/MEDIUM: mux-h1: Don't skip the TCP splicing when there is no more data to read\n    - MEDIUM: sessions: Introduce session flags.\n    - BUG/MEDIUM: h2: Don't forget to set h2s->cs to NULL after having free'd cs.\n    - BUG/MEDIUM: mux-h2: fix the conditions to end the h2_send() loop\n    - BUG/MEDIUM: mux-h2: don't refrain from offering oneself a used buffer\n    - BUG/MEDIUM: connection: Use the session to get the origin address if needed.\n    - MEDIUM: tasks: Get rid of active_tasks_mask.\n    - MEDIUM: connection: Upstream SOCKS4 proxy support\n    - BUILD: contrib/prometheus: fix build breakage caused by move of idle_pct\n    - BUG/MINOR: deinit/threads: make hard-stop-after perform a clean exit\n\n2019/05/22 : 2.0-dev4\n    - BUILD: enable freebsd builds on cirrus-ci\n    - BUG/MINOR: http_fetch: Rely on the smp direction for \"cookie()\" and \"hdr()\"\n    - MEDIUM: Make 'option forceclose' actually warn\n    - MEDIUM: Make 'resolution_pool_size' directive fatal\n    - DOC: management: place \"show activity\" at the right place\n    - MINOR: cli/activity: show the dumping thread ID starting at 1\n    - MINOR: task: export global_task_mask\n    - MINOR: cli/debug: add a thread dump function\n    - BUG/MEDIUM: streams: Don't use CF_EOI to decide if the request is complete.\n    - BUG/MEDIUM: streams: Try to L7 retry before aborting the connection.\n    - BUG/MINOR: debug: make ha_task_dump() always check the task before dumping it\n    - BUG/MINOR: debug: make ha_task_dump() actually dump the requested task\n    - MINOR: debug: make ha_thread_dump() and ha_task_dump() take a buffer\n    - BUG/MINOR: debug: don't check the call date on tasklets\n    - MINOR: thread: implement ha_thread_relax()\n    - MINOR: task: put barriers after each write to curr_task\n    - MINOR: task: always reset curr_task when freeing a task or tasklet\n    - MINOR: stream: detach the stream from its own task on stream_free()\n    - MEDIUM: debug/threads: implement an advanced thread dump system\n    - REGTEST: extend the check duration on tls_health_checks and mark it slow\n    - DOC: fix \"successful\" typo\n    - MINOR: init: setenv HAPROXY_CFGFILES\n    - MINOR: threads/init: synchronize the threads startup\n    - MEDIUM: init/mworker: make the pipe register function a regular initcall\n    - CLEANUP: memory: make the fault injection code use the OTHER_LOCK label\n    - CLEANUP: threads: remove the now unused START_LOCK label\n    - MINOR: init/threads: make the global threads an array of structs\n    - MINOR: threads: add each thread's clockid into the global thread_info\n    - CLEANUP: stream: remove an obsolete debugging test\n    - MINOR: tools: add dump_hex()\n    - MINOR: debug: implement ha_panic()\n    - MINOR: debug/cli: add some debugging commands for developers\n    - MINOR: tools: provide a may_access() function and make dump_hex() use it\n    - MINOR: debug: make ha_panic() report threads starting at 1\n    - REORG: compat: move some integer limit definitions from standard.h to compat.h\n    - REORG: threads: move the struct thread_info from global.h to hathreads.h\n    - MINOR: compat: make sure to always define clockid_t\n    - MINOR: threads: always place the clockid in the struct thread_info\n    - MINOR: threads: add a thread-local thread_info pointer \"ti\"\n    - MINOR: time: move the cpu, mono, and idle time to thread_info\n    - MINOR: time: add a function to retrieve another thread's cputime\n    - MINOR: debug: report each thread's cpu usage in \"show thread\"\n    - BUILD: threads: only assign the clock_id when supported\n    - BUILD: makefile: use USE_OBSOLETE_LINKER for solaris\n    - BUILD: makefile: remove -fomit-frame-pointer optimisation (solaris)\n    - MAJOR: polling: add event ports support (Solaris)\n    - BUG/MEDIUM: streams: Don't switch from SI_ST_CON to SI_ST_DIS on read0.\n    - CLEANUP: time: refine the test on _POSIX_TIMERS\n    - MINOR: compat: define a new empty type empty_t for non-implemented fields\n    - CLEANUP: time: switch clockid_t to empty_t when not available\n    - BUG/MINOR: mworker: Fix memory leak of mworker_proc members\n    - CLEANUP: objtype: make obj_type() and obj_type_name() take consts\n    - MINOR: debug: switch to SIGURG for thread dumps\n    - CLEANUP: threads: really move thread_info to hathreads.c\n    - MINOR: threads: make threads_{harmless|want_rdv}_mask constant 0 without threads\n    - CLEANUP: debug: always report harmless/want_rdv even without threads\n    - MINOR: threads: implement ha_tkill() and ha_tkillall()\n    - CLEANUP: debug: make use of ha_tkill() and remove ifdefs\n    - MINOR: stream: introduce a stream_dump() function and use it in stream_dump_and_crash()\n    - MINOR: debug: dump streams when an applet, iocb or stream is known\n    - MINOR: threads: add a \"stuck\" flag to the thread_info struct\n    - MINOR: threads: add a timer_t per thread in thread_info\n    - MAJOR: watchdog: implement a thread lockup detection mechanism\n    - MINOR: stream: remove the cpu time detection from process_stream()\n    - MINOR: connection: report the mux names in \"haproxy -vv\"\n    - CLEANUP: mux-h1: use \"H1\" and not \"h1\" as the mux's name\n    - BUG/MEDIUM: WURFL: segfault in wurfl-get() with missing info.\n    - MINOR: WURFL: call header_retireve_callback() in dummy library\n    - MINOR: WURFL: fixed Engine load failed error when wurfl-information-list contains wurfl_root_id\n    - MINOR: WURFL: shows log messages during module initialization\n    - MINOR: WURFL: removes heading wurfl-information-separator from wurfl-get-all() and wurfl-get() results\n    - MINOR: WURFL: wurfl_get() and wurfl_get_all() now return an empty string if device detection fails\n    - MEDIUM: WURFL: HTX awareness.\n    - MINOR: WURFL: module version bump to 2.0\n    - MINOR: WURFL: do not emit warnings when not configured\n    - CONTRIB: wurfl: address 3 build issues in the wurfl dummy library\n    - BUG/MEDIUM: init/threads: provide per-thread alloc/free function callbacks\n    - BUILD: travis: add sanitizers to travis-ci builds\n    - BUILD: time: remove the test on _POSIX_C_SOURCE\n    - CLEANUP: build: rename some build macros to use the USE_* ones\n    - CLEANUP: raw_sock: remove support for very old linux splice bug workaround\n    - BUG/MEDIUM: dns: make the port numbers unsigned\n    - MEDIUM: config: deprecate the antique req* and rsp* commands\n\n2019/05/15 : 2.0-dev3\n    - BUG/MINOR: peers: Really close the sessions with no heartbeat.\n    - CLEANUP: peers: remove useless annoying tabulations.\n    - CLEANUP: peers: replace timeout constants by macros.\n    - REGTEST: Enable again reg tests with HEAD HTTP method usage.\n    - DOC: The option httplog is no longer valid in a backend.\n    - DOC: peers: Peers protocol documentation update.\n    - REGTEST: remove unexpected \"nbthread\" statement from Lua test cases\n    - BUILD: Makefile: remove 11-years old workarounds for deprecated options\n    - BUILD: remove 10-years old error message for obsolete option USE_TCPSPLICE\n    - BUILD: Makefile: remove outdated support for dlmalloc\n    - BUILD: Makefile: consider a variable's origin and not its value for the options list\n    - BUILD: Makefile: also report disabled options in the BUILD_OPTIONS variable\n    - BUILD: Makefile: shorten default settings declaration\n    - BUILD: Makefile: clean up the target declarations\n    - BUILD: report the whole feature set with their status in haproxy -vv\n    - BUILD: pass all \"USE_*\" variables as -DUSE_* to the compiler\n    - REGTEST: script: make the script use the new features list\n    - REGTEST: script: remove platform-specific assigments of OPTIONS\n    - BUG/MINOR: peers: Missing initializations after peer session shutdown.\n    - BUG/MINOR: contrib/prometheus-exporter: Fix applet accordingly to recent changes\n    - BUILD/MINOR: listener: Silent a few signedness warnings.\n    - BUG/MINOR: mux-h1: Only skip invalid C-L headers on output\n    - BUG/MEDIUM: mworker: don't free the wrong child when not found\n    - BUG/MEDIUM: checks: Don't bother subscribing if we have a connection error.\n    - BUG/MAJOR: checks: segfault during tcpcheck_main\n    - BUILD: makefile: work around an old bug in GNU make-3.80\n    - BUILD: makefile: work around another bug in make 3.80\n    - BUILD: http: properly mark some struct as extern\n    - BUILD: chunk: properly declare pool_head_trash as extern\n    - BUILD: cache: avoid a build warning with some compilers/linkers\n    - MINOR: tools: make memvprintf() never pass a NULL target to vsnprintf()\n    - MINOR: tools: add an unsetenv() implementation\n    - BUILD: re-implement an initcall variant without using executable sections\n    - BUILD: use inttypes.h instead of stdint.h\n    - BUILD: connection: fix naming of ip_v field\n    - BUILD: makefile: fix build of IPv6 header on aix51\n    - BUILD: makefile: add _LINUX_SOURCE_COMPAT to build on AIX-51\n    - BUILD: define unsetenv on AIX 5.1\n    - BUILD: Makefile: disable shared cache on AIX 5.1\n    - MINOR: ssl: Add aes_gcm_dec converter\n    - REORG: mworker: move serializing functions to mworker.c\n    - REORG: mworker: move signals functions to mworker.c\n    - REORG: mworker: move IPC functions to mworker.c\n    - REORG: mworker: move signal handlers and related functions\n    - REORG: mworker: move mworker_cleanlisteners to mworker.c\n    - MINOR: mworker: calloc mworker_proc structures\n    - MINOR: mworker: don't use children variable anymore\n    - MINOR: cli: export cli_parse_default() definition in cli.h\n    - REORG: mworker/cli: move CLI functions to mworker.c\n    - MEDIUM: mworker-prog: implement program for master-worker\n    - MINOR: mworker/cli: show programs in 'show proc'\n    - BUG/MINOR: cli: correctly handle abns in 'show cli sockets'\n    - MINOR: cli: start addresses by a prefix in 'show cli sockets'\n    - MINOR: cli: export HAPROXY_CLI environment variable\n    - BUG/MINOR: htx: Preserve empty HTX messages with an unprocessed parsing error\n    - BUG/MINOR: proto_htx: Reset to_forward value when a message is set to DONE\n    - REGTEST: http-capture/h00000: Relax a regex matching the log message\n    - REGTEST: http-messaging/h00000: Fix the test when the HTX is enabled\n    - REGTEST: http-rules/h00003: Use a different client for requests expecting a 301\n    - REGTEST: log/b00000: Be sure the client always hits its timeout\n    - REGTEST: lua/b00003: Relax the regex matching the log message\n    - REGTEST: lua/b00003: Specify the HAProxy pid when the command ss is executed\n    - BUG/MEDIUM: peers: fix a case where peer session is not cleanly reset on release.\n    - BUG/MEDIUM: h2: Don't attempt to recv from h2_process_demux if we subscribed.\n    - BUG/MEDIUM: htx: fix random premature abort of data transfers\n    - BUG/MEDIUM: streams: Don't remove the SI_FL_ERR flag in si_update_both().\n    - BUG/MEDIUM: streams: Store prev_state before calling si_update_both().\n    - BUG/MEDIUM: stream: Don't clear the stream_interface flags in si_update_both.\n    - MINOR: initcall: Don't forget to define the __start/stop_init_##stg symbols.\n    - MINOR: threads: Implement thread_cpus_enabled() for FreeBSD.\n    - BUG/MEDIUM: pattern: assign pattern IDs after checking the config validity\n    - MINOR: skip get_gmtime where tm is unused\n    - MINOR: ssl: Activate aes_gcm_dec converter for BoringSSL\n    - BUG/MEDIUM: streams: Only re-run process_stream if we're in a connected state.\n    - BUG/MEDIUM: stream_interface: Don't bother doing chk_rcv/snd if not connected.\n    - BUG/MEDIUM: task/threads: address a fairness issue between local and global tasks\n    - BUG/MINOR: tasks: make sure the first task to be queued keeps its nice value\n    - BUG/MINOR: listener: renice the accept ring processing task\n    - MINOR: cli/listener: report the number of accepts on \"show activity\"\n    - MINOR: cli/activity: report the accept queue sizes in \"show activity\"\n    - BUG/MEDIUM: spoe: Queue message only if no SPOE applet is attached to the stream\n    - BUG/MEDIUM: spoe: Return an error if nothing is encoded for fragmented messages\n    - BUG/MINOR: spoe: Be sure to set tv_request when each message fragment is encoded\n    - BUG/MEDIUM: htx: Defrag if blocks position is changed and the payloads wrap\n    - BUG/MEDIUM: htx: Don't crush blocks payload when append is done on a data block\n    - MEDIUM: htx: Deprecate the option 'http-tunnel' and ignore it in HTX\n    - MINOR: proto_htx: Don't adjust transaction mode anymore in HTX analyzers\n    - BUG/MEDIUM: htx: Fix the process of HTTP CONNECT with h2 connections\n    - MINOR: mux-h1: Simplify handling of 1xx responses\n    - MINOR: stats/htx: Don't add \"Connection: close\" header anymore in stats responses\n    - MEDIUM: h1: Add an option to sanitize connection headers during parsing\n    - MEDIUM: mux-h1: Simplify the connection mode management by sanitizing headers\n    - MINOR: mux-h1: Don't release the conn_stream anymore when h1s is destroyed\n    - BUG/MINOR: mux-h1: Handle the flag CS_FL_KILL_CONN during a shutdown read/write\n    - MINOR: mux-h2: Add a mux_ops dedicated to the HTX mode\n    - MINOR: muxes: Add a flag to specify a multiplexer uses the HTX\n    - MINOR: stream: Set a flag when the stream uses the HTX\n    - MINOR: http: update the macro IS_HTX_STRM() to check the stream flag SF_HTX\n    - MINOR: http_fetch/htx: Use stream flags instead of px mode in smp_prefetch_htx\n    - MINOR: filters/htx: Use stream flags instead of px mode to instanciate a filter\n    - MINOR: muxes: Rely on conn_is_back() during init to handle front/back conn\n    - MEDIUM: muxes: Add an optional input buffer during mux initialization\n    - MINOR: muxes: Pass the context of the mux to destroy() instead of the connection\n    - MEDIUM: muxes: Be prepared to don't own connection during the release\n    - MEDIUM: connection: Add conn_upgrade_mux_fe() to handle mux upgrades\n    - MEDIUM: htx: Allow the option http-use-htx to be used on TCP proxies too\n    - MAJOR: proxy/htx: Handle mux upgrades from TCP to HTTP in HTX mode\n    - MAJOR: muxes/htx: Handle inplicit upgrades from h1 to h2\n    - MAJOR: htx: Enable the HTX mode by default for all proxies\n    - REGTEST: Use HTX by default and add '--no-htx' option to disable it\n    - BUG/MEDIUM: muxes: Don't dereference mux context if null in release functions\n    - CLEANUP: task: do not export rq_next anymore\n    - MEDIUM: tasks: improve fairness between the local and global queues\n    - MEDIUM: tasks: only base the nice offset on the run queue depth\n    - MINOR: tasks: restore the lower latency scheduling when niced tasks are present\n    - BUG/MEDIUM: map: Fix memory leak in the map converter\n    - BUG/MINOR: ssl: Fix 48 byte TLS ticket key rotation\n    - BUILD: task/thread: fix single-threaded build of task.c\n    - BUILD: cli/threads: fix build in single-threaded mode\n    - BUG/MEDIUM: muxes: Make sure we unsubcribed when destroying mux ctx.\n    - BUG/MEDIUM: h2: Make sure we're not already in the send_list in h2_subscribe().\n    - BUG/MEDIUM: h2: Revamp the way send subscriptions works.\n    - MINOR: connections: Remove the SUB_CALL_UNSUBSCRIBE flag.\n    - BUG/MEDIUM: Threads: Only use the gcc >= 4.7 builtins when using gcc >= 4.7.\n    - BUILD: address a few cases of \"static <type> inline foo()\"\n    - BUILD: do not specify \"const\" on functions returning structs or scalars\n    - BUILD: htx: fix a used uninitialized warning on is_cookie2\n    - MINOR: peers: Add a new command to the CLI for peers.\n    - DOC: update for \"show peers\" CLI command.\n    - BUG/MAJOR: lb/threads: fix insufficient locking on round-robin LB\n    - MEDIUM: mworker: store the leaving state of a process\n    - MEDIUM: mworker-prog: implements 'option start-on-reload'\n    - CLEANUP: mworker: remove the type field in mworker_proc\n    - MEDIUM: mworker/cli: export the HAPROXY_MASTER_CLI variable\n    - MINOR: cli: don't add a semicolon at the end of HAPROXY_CLI\n    - MINOR: mworker: export HAPROXY_MWORKER=1 when running in mworker mode\n    - MINOR: init: add a \"set-dumpable\" global directive to enable core dumps\n    - BUG/MINOR: listener/mq: correctly scan all bound threads under low load\n    - BUG/MINOR: mworker: mworker_kill should apply on every children\n    - BUG/MINOR: mworker: don't exit with an ambiguous value\n    - BUG/MINOR: mworker: ensure that we still quits with SIGINT\n    - REGTESTS: exclude tests that require ssl, pcre if no such feature is enabled\n    - BUG/MINOR: mux-h1: Process input even if the input buffer is empty\n    - BUG/MINOR: mux-h1: Don't switch the parser in busy mode if other side has done\n    - BUG/MEDIUM: mux-h1: Notify the stream waiting for TCP splicing if ibuf is empty\n    - BUG/MEDIUM: mux-h1: Enable TCP splicing to exchange data only\n    - MINOR: mux-h1: Handle read0 during TCP splicing\n    - BUG/MEDIUM: htx: Don't return the start-line if the HTX message is empty\n    - BUG/MAJOR: http_fetch: Get the channel depending on the keyword used\n    - BUG/MINOR: http_fetch/htx: Allow permissive sample prefetch for the HTX\n    - BUG/MINOR: http_fetch/htx: Use HTX versions if the proxy enables the HTX mode\n    - BUG/MEDIUM: tasks: Make sure we set TASK_QUEUED before adding a task to the rq.\n    - BUG/MEDIUM: tasks: Make sure we modify global_tasks_mask with the rq_lock.\n    - MINOR: tasks: Don't consider we can wake task with tasklet_wakeup().\n    - MEDIUM: tasks: No longer use rq.node.leaf_p as a lock.\n    - MINOR: tasks: Don't set the TASK_RUNNING flag when adding in the tasklet list.\n    - BUG/MEDIUM: applets: Don't use task_in_rq().\n    - BUG/MAJOR: task: make sure never to delete a queued task\n    - MINOR: task/thread: factor out a wake-up condition\n    - CLEANUP: task: remain consistent when using the task's handler\n    - MEDIUM: tasks: Merge task_delete() and task_free() into task_destroy().\n    - MEDIUM: tasks: Don't account a destroyed task as a runned task.\n    - BUG/MINOR: contrib/prometheus-exporter: Fix a typo in the run-queue metric type\n    - MINOR: contrib/prometheus-exporter: Remove usless rate metrics\n    - MINOR: contrib/prometheus-exporter: Rename some metrics to be more usable\n    - MINOR: contrib/prometheus-exporter: Follow best practices about metrics type\n    - BUG/MINOR: mworker: disable busy polling in the master process\n    - MEDIUM: tasks: Use __ha_barrier_store after modifying global_tasks_mask.\n    - MEDIUM: ssl: Give ssl_sock its own context.\n    - MEDIUM: connections: Move some fields from struct connection to ssl_sock_ctx.\n    - MEDIUM: ssl: provide its own subscribe/unsubscribe function.\n    - MEDIUM: connections: Provide a xprt_ctx for each xprt method.\n    - MEDIUM: ssl: provide our own BIO.\n    - BUILD/medium: ssl: Fix build with OpenSSL < 1.1.0\n    - MINOR: peers: adds counters on show peers about tasks calls.\n    - MEDIUM: enable travis-ci builds\n    - MINOR: fd: Add a counter of used fds.\n    - MEDIUM: connections: Add a way to control the number of idling connections.\n    - BUG/MEDIUM: maps: only try to parse the default value when it's present\n    - BUG/MINOR: acl: properly detect pattern type SMP_T_ADDR\n    - REGTEST: Missing REQUIRE_VERSION declarations.\n    - MINOR: proto_tcp: tcp-request content: enable set-dst and set-dst-var\n    - BUG/MEDIUM: h1: Don't parse chunks CRLF if not enough data are available\n    - BUG/MEDIUM: thread/http: Add missing locks in set-map and add-acl HTTP rules\n    - BUG/MEDIUM: stream: Don't request a server connection if a shutw was scheduled\n    - BUG/MINOR: 51d: Get the request channel to call CHECK_HTTP_MESSAGE_FIRST()\n    - BUG/MINOR: da: Get the request channel to call CHECK_HTTP_MESSAGE_FIRST()\n    - MINOR: gcc: Fix a silly gcc warning in connect_server()\n    - MINOR: ssl/cli: async fd io-handlers printable on show fd\n    - Revert \"CLEANUP: wurfl: remove dead, broken and unmaintained code\"\n    - BUILD: add USE_WURFL to the list of known build options\n    - MINOR: wurfl: indicate in haproxy -vv the wurfl version in use\n    - BUILD: wurfl: build fix for 1.9/2.0 code base\n    - CLEANUP: wurfl: removed deprecated methods\n    - DOC: wurfl: added point of contact in MAINTAINERS file\n    - MINOR: wurfl: enabled multithreading mode\n    - MINOR: contrib: dummy wurfl library\n    - MINOR: dns: dns_requester structures are now in a memory pool\n    - MINOR: dns: move callback affection in dns_link_resolution()\n    - MINOR: obj_type: new object type for struct stream\n    - MINOR: action: new '(http-request|tcp-request content) do-resolve' action\n    - MINOR: log: Extract some code to send syslog messages.\n    - REGTEST: replace LEVEL option by a more human readable one.\n    - REGTEST: rename the reg test files.\n    - REGTEST: adapt some reg tests after renaming.\n    - REGTEST: make the \"run-regtests\" script search for tests in reg-tests by default\n    - BUG/MAJOR: stream: Missing DNS context initializations.\n    - BUG/MEDIUM: stream: Fix the way early aborts on the client side are handled\n    - BUG/MINOR: spoe: Don't systematically wakeup SPOE stream in the applet handler\n    - BUG/MEDIUM: ssl: Return -1 on recv/send if we got EAGAIN.\n    - BUG/MAJOR: lb/threads: fix AB/BA locking issue in round-robin LB\n    - BUG/MAJOR: muxes: Use the HTX mode to find the best mux for HTTP proxies only\n    - BUG/MINOR: htx: Exclude TCP proxies when the HTX mode is handled during startup\n    - CLEANUP: task: report calls as unsigned in show sess\n    - MINOR: tasks/activity: report the context switch and task wakeup rates\n    - MINOR: stream: measure and report a stream's call rate in \"show sess\"\n    - MINOR: applet: measure and report an appctx's call rate in \"show sess\"\n    - BUILD: extend Travis CI config to support more platforms\n    - REGTEST: exclude osx and generic targets for 40be_2srv_odd_health_checks\n    - REGTEST: relax the IPv6 address format checks in converters_ipmask_concat_strcmp_field_word\n    - REGTEST: exclude OSX and generic targets from abns_socket.vtc\n    - BUILD: travis: remove the \"allow_failures\" entry\n    - BUG/MINOR: activity: always initialize the profiling variable\n    - MINOR: activity: make the profiling status per thread and not global\n    - MINOR: activity: enable automatic profiling turn on/off\n    - CLEANUP: standard: use proper const to addr_to_str() and port_to_str()\n    - BUG/MINOR: proto_http: properly reset the stream's call rate on keep-alive\n    - MINOR: connection: make the debugging helper functions safer\n    - MINOR: stream/debug: make a stream dump and crash function\n    - MEDIUM: appctx/debug: force a crash if an appctx spins over itself forever\n    - MEDIUM: stream/debug: force a crash if a stream spins over itself forever\n    - MEDIUM: streams: measure processing time and abort when detecting bugs\n    - BUILD/MEDIUM: contrib: Dummy DeviceAtlas API.\n    - MEDIUM: da: HTX mode support.\n    - BUG/MEDIUM: mux-h2: properly deal with too large headers frames\n    - BUG/MINOR: http: Call stream_inc_be_http_req_ctr() only one time per request\n    - BUG/MEDIUM: spoe: arg len encoded in previous frag frame but len changed\n    - MINOR: spoe: Use the sample context to pass frag_ctx info during encoding\n    - DOC: contrib/modsecurity: Typos and fix the reject example\n    - BUG/MEDIUM: contrib/modsecurity: If host header is NULL, don't try to strdup it\n    - MINOR: log: Add \"sample\" new keyword to \"log\" lines.\n    - MINOR: log: Enable the log sampling and load-balancing feature.\n    - DOC: log: Document the sampling and load-balancing logging feature.\n    - REGTEST: Add a new reg test for log load-balancing feature.\n    - BUG/MAJOR: map/acl: real fix segfault during show map/acl on CLI\n    - REGTEST: Make this reg test be Linux specific.\n    - CLEANUP: task: move the task_per_thread definition to task.h\n    - MINOR: activity: report context switch counts instead of rates\n    - MINOR: threads: Implement HA_ATOMIC_LOAD().\n    - BUG/MEDIUM: port_range: Make the ring buffer lock-free.\n    - BUG/MEDIUM: listener: Fix how unlimited number of consecutive accepts is handled\n    - MINOR: config: Test validity of tune.maxaccept during the config parsing\n    - CLEANUP: config: Don't alter listener->maxaccept when nbproc is set to 1\n    - BUG/MEDIUM: servers: fix typo \"src\" instead of \"srv\"\n    - BUG/MEDIUM: ssl: Don't pretend we can retry a recv/send if we got a shutr/w.\n    - BUG/MINOR: haproxy: fix rule->file memory leak\n    - BUG/MINOR: log: properly free memory on logformat parse error and deinit()\n    - BUG/MINOR: checks: free memory allocated for tasklets\n    - BUG/MEDIUM: pattern: fix memory leak in regex pattern functions\n    - BUG/MEDIUM: channels: Don't forget to reset output in channel_erase().\n    - BUG/MEDIUM: connections: Make sure we remove CO_FL_SESS_IDLE on disown.\n    - MINOR: threads: flatten the per-thread cpu-map\n    - MINOR: init/threads: remove the useless tids[] array\n    - MINOR: init/threads: make the threads array global\n    - BUG/MEDIUM: ssl: Use the early_data API the right way.\n    - BUG/MEDIUM: streams: Don't add CF_WRITE_ERROR if early data were rejected.\n    - MEDIUM: streams: Add the ability to retry a request on L7 failure.\n    - MEDIUM: streams: Add a way to replay failed 0rtt requests.\n    - MEDIUM: streams: Add a new keyword for retry-on, \"junk-response\"\n    - BUG/MINOR: stream: also increment the retry stats counter on L7 retries\n    - BUG/MEDIUM: checks: make sure the warmup task takes the server lock\n    - BUG/MINOR: logs/threads: properly split the log area upon startup\n    - BUILD: extend travis-ci matrix\n    - CLEANUP: Remove appsession documentation\n    - DOC: Fix typo in keyword matrix\n    - BUILD: remove \"build_libressl\" duplicate declaration\n    - BUILD: travis-ci: get back to osx without openssl support\n    - BUILD: enable several LibreSSL hacks, including\n    - BUILD: temporarily mark LibreSSL builds as allowed to fail\n    - BUILD: travis: TMPDIR replacement.\n    - BUG/MEDIUM: ssl: Don't attempt to use early data with libressl.\n    - MINOR: doc: Document allow-0rtt on the server line.\n    - MINOR: doc: Document the interaction of allow-0rtt and retry-on 0rtt-rejected.\n    - MEDIUM: proto: Change the prototype of the connect() method.\n    - MEDIUM: tcp: add the \"tfo\" option to support TCP fastopen on the server\n    - MINOR: config: Extract the code of \"stick-table\" line parsing.\n    - BUILD/MINOR: stick-table: Compilation fix.\n    - MEDIUM: stick-table: Stop handling stick-tables as proxies.\n    - MINOR: stick-tables: Add peers process binding computing.\n    - MINOR: stick-table: Add prefixes to stick-table names.\n    - MINOR: peers: Do not emit global stick-table names.\n    - DOC: Update for \"table\" lines in \"peers\" section.\n    - REGTEST: Add reg tests for \"table\" lines in \"peers\" sections.\n    - MEDIUM: regex: modify regex_comp() to atomically allocate/free the my_regex struct\n    - REGTEST: make the tls_health_checks test much faster\n    - REGTEST: make the \"table in peers\" test require v2.0\n    - BUG/MINOR: mux-h2: rely on trailers output not input to turn them to empty data\n    - BUG/MEDIUM: h2/htx: always fail on too large trailers\n    - MEDIUM: mux-h2: discard contents that are to be sent after a shutdown\n    - BUG/MEDIUM: mux-h2/htx: never wait for EOM when processing trailers\n    - BUG/MEDIUM: h2/htx: never leave a trailers block alone with no EOM block\n    - REGTEST: Flag some slow reg tests.\n    - REGTEST: Reg tests file renaming.\n    - REGTEST: Wrong renaming for one reg test.\n    - REGTEST: Wrong assumption in IP:port logging test.\n    - BUG/MINOR: mworker/ssl: close OpenSSL FDs on reload\n    - MINOR: systemd: Use the variables from /etc/default/haproxy\n    - MINOR: systemd: Make use of master socket in systemd unit\n    - MINOR: systemd: support /etc/sysconfig/ for redhat based distrib\n    - BUG/MEDIUM: stick-table: fix regression caused by a change in proxy struct\n    - BUG/MEDIUM: tasks: fix possible segfault on task_destroy()\n    - CLEANUP: task: remove unneeded tests before task_destroy()\n    - MINOR: mworker: support a configurable maximum number of reloads\n    - BUG/MINOR: mux-h2: fix the condition to close a cs-less h2s on the backend\n    - BUG/MEDIUM: spoe: Be sure the sample is found before setting its context\n    - BUG/MINOR: mux-h1: Fix the parsing of trailers\n    - BUG/MINOR: htx: Never transfer more than expected in htx_xfer_blks()\n    - MINOR: htx: Split on DATA blocks only when blocks are moved to an HTX message\n    - MINOR: htx: Don't try to append a trailer block with the previous one\n    - MINOR: htx: Remove support for unused OOB HTX blocks\n    - BUILD: travis-ci bugfixes and improvements\n    - BUG/MEDIUM: servers: Don't use the same srv flag for cookie-set and TFO.\n    - BUG/MEDIUM: h2: Make sure we set send_list to NULL in h2_detach().\n    - BUILD: ssl: fix again a libressl build failure after the openssl FD leak fix\n    - CLEANUP: ssl-sock: use HA_OPENSSL_VERSION_NUMBER instead of OPENSSL_VERSION_NUMBER\n    - BUILD: ssl: make libressl use its own version numbers\n    - CLEANUP: ssl: remove 57 occurrences of useless tests on LIBRESSL_VERSION_NUMBER\n    - MINOR: ssl: enable aes_gcm_dec on LibreSSL\n    - BUILD: ssl: fix libressl build again after aes-gcm-enc\n    - REORG: ssl: move openssl-compat from proto to common\n    - REORG: ssl: move some OpenSSL defines from ssl_sock to openssl-compat\n    - CLEANUP: ssl: never include openssl/*.h outside of openssl-compat.h anymore\n    - CLEANUP: ssl: make inclusion of openssl headers safe\n    - BUILD: add BoringSSL to travis-ci build matrix\n    - BUILD: threads: Add __ha_cas_dw fallback for single threaded builds\n    - BUG/MINOR: stream: Attach the read side on the response as soon as possible\n    - BUG/MEDIUM: http: Use pointer to the begining of input to parse message headers\n    - BUG/MEDIUM: h2: Don't check send_wait to know if we're in the send_list.\n    - BUG/MEDIUM: streams: Make sur SI_FL_L7_RETRY is set before attempting a retry.\n    - MEDIUM: streams: Add a new http action, disable-l7-retry.\n    - MINOR: streams: Introduce a new retry-on keyword, all-retryable-errors.\n    - BUG/MINOR: vars: Fix memory leak in vars_check_arg\n    - BUILD: travis-ci: make TMPDIR global variable in travis-ci\n    - CLEANUP: ssl: move the SSL_OP_* and SSL_MODE_* definitions to openssl-compat\n    - CLEANUP: ssl: remove ifdef around SSL_CTX_get_extra_chain_certs()\n    - CLEANUP: ssl: move all BIO_* definitions to openssl-compat\n    - BUILD: threads: fix again the __ha_cas_dw() definition\n    - BUG/MAJOR: mux-h2: do not add a stream twice to the send list\n    - Revert \"BUG/MINOR: vars: Fix memory leak in vars_check_arg\"\n    - BUG/MINOR: peers: Fix memory leak in cfg_parse_peers\n    - BUG/MINOR: htx: make sure to always initialize the HTTP method when parsing a buffer\n    - REGTEST: fix tls_health_checks random failures on MacOS in Travis-CI\n    - MINOR: spoe: Set the argument chunk size to 0 when SPOE variables are checked\n    - BUG/MINOR: vars: Fix memory leak in vars_check_arg\n    - BUG/MAJOR: ssl: segfault upon an heartbeat request\n    - MINOR: spoa-server: Clone the v1.7 spoa-example project\n    - MINOR: spoa-server: move some definition from spoa_server.c to spoa_server.h\n    - MINOR: spoa-server: Externalise debug functions\n    - MINOR: spoe-server: rename \"worker\" functions\n    - MINOR: spoa-server: Replace the thread init system by processes\n    - MINOR: spoa-server: With debug mode, start only one process\n    - MINOR: spoa-server: Allow registering external processes\n    - MINOR: spoa-server: Allow registering message processors\n    - MINOR: spoa-server: Load files\n    - MINOR: spoa-server: Prepare responses\n    - MINOR: spoa-server: Execute registered callbacks\n    - MINOR: spoa-server: Add Lua processing\n    - MINOR: spoa-server: Add python\n    - MINOR/DOC: spoe-server: Add documentation\n    - BUG/MEDIUM: connections: Don't forget to set xprt_ctx to NULL on close.\n    - MINOR: lists: add LIST_ADDED() to check if an element belongs to a list\n    - CLEANUP: mux-h2: use LIST_ADDED() instead of LIST_ISEMPTY() where relevant\n    - MINOR: mux-h2: add two H2S flags to report the need for shutr/shutw\n    - CLEANUP: mux-h2: simply use h2s->flags instead of ret in h2_deferred_shut()\n    - CLEANUP: connection: remove the handle field from the wait_event struct\n    - BUG/MINOR: log: Wrong log format initialization.\n    - BUG/MINOR: mux-h2: make the do_shut{r,w} functions more robust against retries\n    - BUG/MINOR: mworker: use after free when the PID not assigned\n    - MINOR: mux-h2: remove useless test on stream ID vs last in wake function\n    - MINOR: mux-h2: make h2_wake_some_streams() not depend on the CS flags\n    - MINOR: mux-h2: make h2s_wake_one_stream() the only function to deal with CS\n    - MINOR: mux-h2: make h2s_wake_one_stream() not depend on temporary CS flags\n    - BUG/MINOR: mux-h2: make sure to honor KILL_CONN in do_shut{r,w}\n    - CLEANUP: mux-h2: don't test for impossible CS_FL_REOS conditions\n    - MINOR: mux-h2: add macros to check multiple stream states at once\n    - MINOR: mux-h2: stop relying on CS_FL_REOS\n    - BUG/MEDIUM: mux-h2: Set EOI on the conn_stream during h2_rcv_buf()\n    - BUILD: debug: make gcc not complain on the ABORT_NOW() macro\n    - MINOR: debug: add a new BUG_ON macro\n    - MINOR: h2: Use BUG_ON() to enforce rules in subscribe/unsubscribe.\n    - MINOR: h1: Use BUG_ON() to enforce rules in subscribe/unsubscribe.\n    - MINOR: connections: Use BUG_ON() to enforce rules in subscribe/unsubscribe.\n    - BUILD: ist: turn the lower/upper case tables to literal on obsolete linkers\n\n2019/03/26 : 2.0-dev2\n    - CLEANUP: http: Remove unreachable code in parse_http_req_capture\n    - CLEANUP: stream: Remove bogus loop in conn_si_send_proxy\n    - MINOR: lists: Implement locked variations.\n    - MEDIUM: servers: Used a locked list for idle_orphan_conns.\n    - MEDIUM: servers: Reorganize the way idle connections are cleaned.\n    - BUG/MEDIUM: lists: Properly handle the case we're removing the first elt.\n    - MINOR: cfgparse: Add a cast to make gcc happier.\n    - BUG/MEDIUM: standard: Wrong reallocation size.\n    - BUG/MINOR: listener: keep accept rate counters accurate under saturation\n    - DOC: fix alphabetic ordering for \"tune.fail-alloc\" setting\n    - MAJOR: config: disable support for nbproc and nbthread in parallel\n    - MEDIUM: listener: keep a single thread-mask and warn on \"process\" misuse\n    - MAJOR: listener: do not hold the listener lock in listener_accept()\n    - MINOR: listener: maintain a per-thread count of the number of connections on a listener\n    - MINOR: tools: implement functions to look up the nth bit set in a mask\n    - MINOR: listener: pre-compute some thread counts per bind_conf\n    - MINOR: listener: implement multi-queue accept for threads\n    - MAJOR: listener: use the multi-queue for multi-thread listeners\n    - MINOR: activity: add accept queue counters for pushed and overflows\n    - MINOR: config: add global tune.listener.multi-queue setting\n    - MAJOR: threads: enable one thread per CPU by default\n    - DOC: update management.txt to reflect that threads are used by default\n    - BUG/MINOR: config: don't over-count the global maxsock value\n    - BUG/MEDIUM: list: fix the rollback on addq in the locked liss\n    - BUG/MEDIUM: list: fix LIST_POP_LOCKED's removal of the last pointer\n    - BUG/MEDIUM: list: add missing store barriers when updating elements and head\n    - MINOR: list: make the delete and pop operations idempotent\n    - MINOR: server: remove a few unneeded LIST_INIT calls after LIST_DEL_LOCKED\n    - BUG/MEDIUM: listener: use a self-locked list for the dequeue lists\n    - BUG/MEDIUM: listener: make sure the listener never accepts too many conns\n    - BUG/MEDIUM: list: correct fix for LIST_POP_LOCKED's removal of last element\n    - MINOR: listener: introduce listener_backlog() to report the backlog value\n    - MINOR: listener: do not needlessly set l->maxconn\n    - MINOR: proxy: do not change the listeners' maxconn when updating the frontend's\n    - MEDIUM: config: don't enforce a low frontend maxconn value anymore\n    - MINOR: peers: Add a message for heartbeat.\n    - MINOR: global: keep a copy of the initial rlim_fd_cur and rlim_fd_max values\n    - BUG/MINOR: init: never lower rlim_fd_max\n    - BUG/MINOR: checks: make external-checks restore the original rlim_fd_cur/max\n    - BUG/MINOR: mworker: be careful to restore the original rlim_fd_cur/max on reload\n    - MINOR: init: make the maxpipe computation more accurate\n    - MINOR: init: move some maxsock updates earlier\n    - MEDIUM: init: make the global maxconn default to what rlim_fd_cur permits\n    - REGTEST: fix a spurious \"nbthread 4\" in the connection test\n    - DOC: update the text related to the global maxconn value\n    - BUG/MAJOR: mux-h2: fix race condition between close on both ends\n    - MINOR: sample: Replace \"req.ungrpc\" smp fetch by a \"ungrpc\" converter.\n    - BUG/MEDIUM: list: fix again LIST_ADDQ_LOCKED\n    - MINOR: htx: unconditionally handle parsing errors in requests or responses\n    - MINOR: mux-h2: always pass HTX_FL_PARSING_ERROR between h2s and buf on RX\n    - BUG/MEDIUM: h2/htx: verify that :path doesn't contain invalid chars\n    - MINOR: sample: Code factorization \"ungrpc\" converter.\n    - MINOR: sample: Rework gRPC converter code.\n    - CLEANUP: wurfl: remove dead, broken and unmaintained code\n    - MINOR: config: relax the range checks on cpu-map\n    - BUG/MINOR: ssl: fix warning about ssl-min/max-ver support\n    - MINOR: sample: Extract some protocol buffers specific code.\n    - DOC: Remove tabs and fixed punctuation.\n    - MINOR: sample: Add a protocol buffers specific converter.\n    - REGTEST: Peers reg tests.\n    - REGTEST: Enable reg tests with HEAD HTTP method usage.\n    - MINOR: lists: add a LIST_DEL_INIT() macro\n    - MINOR: task: use LIST_DEL_INIT() to remove a task from the queue\n    - MINOR: listener: improve incoming traffic distribution\n    - MINOR: tools: implement my_flsl()\n    - MEDIUM: listener: change the LB algorithm again to use two round robins instead\n    - CLEANUP: listener: remove old thread bit mapping\n    - MINOR: listener: move thr_idx from the bind_conf to the listener\n    - BUG/MEDIUM: logs: Only attempt to free startup_logs once.\n    - BUG/MAJOR: config: Wrong maxconn adjustment.\n    - BUG/MEDIUM: 51d: fix possible segfault on deinit_51degrees()\n    - OPTIM: task: limit the impact of memory barriers in taks_remove_from_task_list()\n    - MINOR: fd: Remove debugging code.\n    - BUG/MEDIUM: listeners: Don't call fd_stop_recv() if fd_updt is NULL.\n    - MINOR: threads: Implement __ha_barrier_atomic*.\n    - MEDIUM: threads: Use __ATOMIC_SEQ_CST when using the newer atomic API.\n    - MINOR: threads: Add macros to do atomic operation with no memory barrier.\n    - MEDIUM: various: Use __ha_barrier_atomic* when relevant.\n    - MEDIUM: applets: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: xref: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: fd: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: freq_ctr: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: proxy: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: server: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: task: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: activity: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: backend: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: cache: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: checks: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: pollers: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: compression: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: spoe: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: threads: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: http: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: lb/threads: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: listeners: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: logs: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: memory: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: peers: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: proto_tcp: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: queues: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: sessions: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: ssl: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: stream: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: tcp_rules: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: time: Use the new _HA_ATOMIC_* macros.\n    - MEDIUM: vars: Use the new _HA_ATOMIC_* macros.\n    - MINOR: config: remove obsolete use of DEFAULT_MAXCONN at various places\n    - MINOR: config: continue to rely on DEFAULT_MAXCONN to set the minimum maxconn\n    - BUG/MEDIUM: list: fix incorrect pointer unlocking in LIST_DEL_LOCKED()\n    - BUG/MEDIUM: listener: make sure we don't pick stopped threads\n    - MEDIUM: list: Remove useless barriers.\n    - MEDIUM: list: Use _HA_ATOMIC_*\n    - MEDIUM: connections: Use _HA_ATOMIC_*\n    - BUG/MAJOR: tasks: Use the TASK_GLOBAL flag to know if we're in the global rq.\n    - BUG/MEDIUM: threads/fd: do not forget to take into account epoll_fd/pipes\n    - BUG/MEDIUM: init/threads: consider epoll_fd/pipes for automatic maxconn calculation\n    - BUG/MEDIUM: tasks: Make sure we wake sleeping threads if needed.\n    - BUG/MINOR: mux-h1: Don't report an error on EOS if no message was received\n    - BUG/MINOR: stats/htx: Call channel_add_input() when response headers are sent\n    - BUG/MINOR: lua/htx: Use channel_add_input() when response data are added\n    - BUG/MINOR: lua/htx: Don't forget to call htx_to_buf() when appropriate\n    - MINOR: stats: Add the status code STAT_STATUS_IVAL to handle invalid requests\n    - MINOR: stats: Move stuff about the stats status codes in stats files\n    - BUG/MINOR: stats: Be more strict on what is a valid request to the stats applet\n    - Revert \"REGTEST: Enable reg tests with HEAD HTTP method usage.\"\n    - BUILD: listener: shut up a build warning when threads are disabled\n    - BUILD: Makefile: allow the reg-tests target to be verbose\n    - BUILD: Makefile: resolve LEVEL before calling run-regtests\n    - BUG/MAJOR: spoe: Fix initialization of thread-dependent fields\n    - BUG/MAJOR: stats: Fix how huge POST data are read from the channel\n    - BUG/MINOR: http/counters: fix missing increment of fe->srv_aborts\n    - BUG/MEDIUM: mux-h2: Always wakeup streams with no id to avoid frozen streams\n    - MINOR: mux-h2: Set REFUSED_STREAM error to reset a stream if no data was never sent\n    - MINOR: muxes: Report the Last read with a dedicated flag\n    - MINOR: proto-http/proto-htx: Make error handling clearer during data forwarding\n    - BUILD: tools: fix a build warning on some 32-bit archs\n    - MINOR: init: report the list of optionally available services\n    - MEDIUM: proto_htx: Switch to infinite forwarding if there is no data filter\n    - BUG/MINOR: cache: Fully consume large requests in the cache applet\n    - BUG/MINOR: stats: Fully consume large requests in the stats applet\n    - BUG/MEDIUM: lua: Fully consume large requests when an HTTP applet ends\n    - MINOR: proto_http: Add function to handle the header \"Expect: 100-continue\"\n    - MINOR: proto_htx: Add function to handle the header \"Expect: 100-continue\"\n    - MINOR: stats/cache: Handle the header Expect when applets are registered\n    - MINOR: http/applets: Handle all applets intercepting HTTP requests the same way\n    - CLEANUP: cache: don't export http_cache_applet anymore\n    - MINOR: lua: Don't handle the header Expect in lua HTTP applets anymore\n    - BUG/MINOR: doc: Be accurate on the behavior on pool-purge-delay.\n    - Revert \"MEDIUM: proto_htx: Switch to infinite forwarding if there is no data filter\"\n    - BUG/MEDIUM: mux-h2: Make sure we destroyed the h2s once shutr/shutw is done.\n    - BUG/MEDIUM: mux-h2: Don't bother keeping the h2s if detaching and nothing to send.\n    - BUG/MEDIUM: mux-h2: Use the right list in h2_stop_senders().\n    - MINOR: mux-h2: copy small data blocks more often and reduce the number of pauses\n    - CLEANUP: mux-h2: add some comments to help understand the code\n    - BUG/MEDIUM: ssl: ability to set TLS 1.3 ciphers using ssl-default-server-ciphersuites\n    - BUG/MINOR: log: properly format IPv6 address when LOG_OPT_HEXA modifier is used.\n    - BUG/MEDIUM: h2: Try to be fair when sending data.\n    - BUG/MINOR: proto-http: Don't forward request body anymore on error\n    - MINOR: mux-h2: Remove useless test on ES flag in h2_frt_transfer_data()\n    - MINOR: connection: and new flag to mark end of input (EOI)\n    - MINOR: channel: Report EOI on the input channel if it was reached in the mux\n    - MEDIUM: mux-h2: Don't mix the end of the message with the end of stream\n    - MINOR: mux-h1: Set CS_FL_EOI the end of the message is reached\n    - BUG/MEDIUM: http/htx: Fix handling of the option abortonclose\n    - CLEANUP: muxes/stream-int: Remove flags CS_FL_READ_NULL and SI_FL_READ_NULL\n    - MEDIUM: proto_htx: Reintroduce the infinite forwarding on data\n    - BUG/MEDIUM: h2: only destroy the h2s if h2s->cs is NULL.\n    - BUG/MEDIUM: h2: Use the new sending_list in h2s_notify_send().\n    - BUG/MEDIUM: h2: Follow the same logic in h2_deferred_shut than in h2_snd_buf.\n    - BUG/MEDIUM: h2: Remove the tasklet from the task list if unsubscribing.\n    - BUG/MEDIUM: task/h2: add an idempotent task removal fucntion\n    - CLEANUP: task: only perform a LIST_DEL() when the list is not empty\n    - BUG/MEDIUM: mux-h2: make sure to always notify streams of EOS condition\n    - CONTRIB: debug: report the CS and CF's EOI flags\n    - MINOR: channel: don't unset CF_SHUTR_NOW after shutting down.\n\n2019/02/26 : 2.0-dev1\n    - MINOR: mux-h2: only increase the connection window with the first update\n    - REGTESTS: remove the expected window updates from H2 handshakes\n    - BUG/MINOR: mux-h2: make empty HEADERS frame return a connection error\n    - BUG/MEDIUM: mux-h2: mark that we have too many CS once we have more than the max\n    - MEDIUM: mux-h2: remove padlen during headers phase\n    - MINOR: h2: add a bit-based frame type representation\n    - MINOR: mux-h2: remove useless check for empty frame length in h2s_decode_headers()\n    - MEDIUM: mux-h2: decode HEADERS frames before allocating the stream\n    - MINOR: mux-h2: make h2c_send_rst_stream() use the dummy stream's error code\n    - MINOR: mux-h2: add a new dummy stream for the REFUSED_STREAM error code\n    - MINOR: mux-h2: fail stream creation more cleanly using RST_STREAM\n    - MINOR: buffers: add a new b_move() function\n    - MINOR: mux-h2: make h2_peek_frame_hdr() support an offset\n    - MEDIUM: mux-h2: handle decoding of CONTINUATION frames\n    - CLEANUP: mux-h2: remove misleading comments about CONTINUATION\n    - BUG/MEDIUM: servers: Don't try to reuse connection if we switched server.\n    - BUG/MEDIUM: tasks: Decrement tasks_run_queue in tasklet_free().\n    - BUG/MINOR: htx: send the proper authenticate header when using http-request auth\n    - BUG/MEDIUM: mux_h2: Don't add to the idle list if we're full.\n    - BUG/MEDIUM: servers: Fail if we fail to allocate a conn_stream.\n    - BUG/MAJOR: servers: Use the list api correctly to avoid crashes.\n    - BUG/MAJOR: servers: Correctly use LIST_ELEM().\n    - BUG/MAJOR: sessions: Use an unlimited number of servers for the conn list.\n    - BUG/MEDIUM: servers: Flag the stream_interface on handshake error.\n    - MEDIUM: servers: Be smarter when switching connections.\n    - MEDIUM: sessions: Keep track of which connections are idle.\n    - MINOR: payload: add sample fetch for TLS ALPN\n    - BUG/MEDIUM: log: don't mark log FDs as non-blocking on terminals\n    - MINOR: channel: Add the function channel_add_input\n    - MINOR: stats/htx: Call channel_add_input instead of updating channel state by hand\n    - BUG/MEDIUM: cache: Be sure to end the forwarding when XFER length is unknown\n    - BUG/MAJOR: htx: Return the good block address after a defrag\n    - MINOR: lb: allow redispatch when using consistent hash\n    - CLEANUP: mux-h2: fix end-of-stream flag name when processing headers\n    - BUG/MEDIUM: mux-h2: always restart reading if data are available\n    - BUG/MINOR: mux-h2: set the stream-full flag when leaving h2c_decode_headers()\n    - BUG/MINOR: mux-h2: don't check the CS count in h2c_bck_handle_headers()\n    - BUG/MINOR: mux-h2: mark end-of-stream after processing response HEADERS, not before\n    - BUG/MINOR: mux-h2: only update rxbuf's length for H1 headers\n    - BUG/MEDIUM: mux-h1: use per-direction flags to indicate transitions\n    - BUG/MEDIUM: mux-h1: make HTX chunking consistent with H2\n    - BUG/MAJOR: stream-int: Update the stream expiration date in stream_int_notify()\n    - BUG/MEDIUM: proto-htx: Set SI_FL_NOHALF on server side when request is done\n    - BUG/MEDIUM: mux-h1: Add a task to handle connection timeouts\n    - MINOR: mux-h2: make h2c_decode_headers() return a status, not a count\n    - MINOR: mux-h2: add a new dummy stream : h2_error_stream\n    - MEDIUM: mux-h2: make h2c_decode_headers() support recoverable errors\n    - BUG/MINOR: mux-h2: detect when the HTX EOM block cannot be added after headers\n    - MINOR: mux-h2: remove a misleading and impossible test\n    - CLEANUP: mux-h2: clean the stream error path on HEADERS frame processing\n    - MINOR: mux-h2: check for too many streams only for idle streams\n    - MINOR: mux-h2: set H2_SF_HEADERS_RCVD when a HEADERS frame was decoded\n    - BUG/MEDIUM: mux-h2: decode trailers in HEADERS frames\n    - MINOR: h2: add h2_make_h1_trailers to turn H2 headers to H1 trailers\n    - MEDIUM: mux-h2: pass trailers to H1 (legacy mode)\n    - MINOR: htx: add a new function to add a block without filling it\n    - MINOR: h2: add h2_make_htx_trailers to turn H2 headers to HTX trailers\n    - MEDIUM: mux-h2: pass trailers to HTX\n    - MINOR: mux-h1: parse the content-length header on output and set H1_MF_CLEN\n    - BUG/MEDIUM: mux-h1: don't enforce chunked encoding on requests\n    - MINOR: mux-h2: make HTX_BLK_EOM processing idempotent\n    - MINOR: h1: make the H1 headers block parser able to parse headers only\n    - MEDIUM: mux-h2: emit HEADERS frames when facing HTX trailers blocks\n    - MINOR: stream/htx: Add info about the HTX structs in \"show sess all\" command\n    - MINOR: stream: Add the subscription events of SIs in \"show sess all\" command\n    - MINOR: mux-h1: Add the subscription events in \"show fd\" command\n    - BUG/MEDIUM: h1: Get the h1m state when restarting the headers parsing\n    - BUG/MINOR: cache/htx: Be sure to count partial trailers\n    - BUG/MEDIUM: h1: In h1_init(), wake the tasklet instead of calling h1_recv().\n    - BUG/MEDIUM: server: Defer the mux init until after xprt has been initialized.\n    - MINOR: connections: Remove a stall comment.\n    - BUG/MEDIUM: cli: make \"show sess\" really thread-safe\n    - BUILD: add a new file \"version.c\" to carry version updates\n    - MINOR: stream/htx: add the HTX flags output in \"show sess all\"\n    - MINOR: stream/cli: fix the location of the waiting flag in \"show sess all\"\n    - MINOR: stream/cli: report more info about the HTTP messages on \"show sess all\"\n    - BUG/MINOR: lua: bad args are returned for Lua actions\n    - BUG/MEDIUM: lua: dead lock when Lua tasks are trigerred\n    - MINOR: htx: Add an helper function to get the max space usable for a block\n    - MINOR: channel/htx: Add HTX version for some helper functions\n    - BUG/MEDIUM: cache/htx: Respect the reserve when cached objects are served\n    - BUG/MINOR: stats/htx: Respect the reserve when the stats page is dumped\n    - DOC: regtest: make it clearer what the purpose of the \"broken\" series is\n    - REGTEST: mailers: add new test for 'mailers' section\n    - REGTEST: Add a reg test for health-checks over SSL/TLS.\n    - BUG/MINOR: mux-h1: Close connection on shutr only when shutw was really done\n    - MEDIUM: mux-h1: Clarify how shutr/shutw are handled\n    - BUG/MINOR: compression: Disable it if another one is already in progress\n    - BUG/MINOR: filters: Detect cache+compression config on legacy HTTP streams\n    - BUG/MINOR: cache: Disable the cache if any compression filter precedes it\n    - REGTEST: Add some informatoin to test results.\n    - MINOR: htx: Add a function to truncate all blocks after a specific offset\n    - MINOR: channel/htx: Add the HTX version of channel_truncate/erase\n    - BUG/MINOR: proto_htx: Use HTX versions to truncate or erase a buffer\n    - BUG/CRITICAL: mux-h2: re-check the frame length when PRIORITY is used\n    - DOC: Fix typo in req.ssl_alpn example (commit 4afdd138424ab...)\n    - DOC: http-request cache-use / http-response cache-store expects cache name\n    - REGTEST: \"capture (request|response)\" regtest.\n    - BUG/MINOR: lua/htx: Respect the reserve when data are send from an HTX applet\n    - REGTEST: filters: add compression test\n    - BUG/MEDIUM: init: Initialize idle_orphan_conns for first server in server-template\n    - BUG/MEDIUM: ssl: Disable anti-replay protection and set max data with 0RTT.\n    - DOC: Be a bit more explicit about allow-0rtt security implications.\n    - MINOR: mux-h1: make the mux_h1_ops struct static\n    - BUILD: makefile: add an EXTRA_OBJS variable to help build optional code\n    - BUG/MEDIUM: connection: properly unregister the mux on failed initialization\n    - BUG/MAJOR: cache: fix confusion between zero and uninitialized cache key\n    - REGTESTS: test case for map_regm commit 271022150d\n    - REGTESTS: Basic tests for concat,strcmp,word,field,ipmask converters\n    - REGTESTS: Basic tests for using maps to redirect requests / select backend\n    - DOC: REGTESTS README varnishtest -Dno-htx= define.\n    - MINOR: spoe: Make the SPOE filter compatible with HTX proxies\n    - MINOR: checks: Store the proxy in checks.\n    - BUG/MEDIUM: checks: Avoid having an associated server for email checks.\n    - REGTEST: Switch to vtest.\n    - REGTEST: Adapt reg test doc files to vtest.\n    - BUG/MEDIUM: h1: Make sure we destroy an inactive connectin that did shutw.\n    - BUG/MINOR: base64: dec func ignores padding for output size checking\n    - BUG/MEDIUM: ssl: missing allocation failure checks loading tls key file\n    - MINOR: ssl: add support of aes256 bits ticket keys on file and cli.\n    - BUG/MINOR: backend: don't use url_param_name as a hint for BE_LB_ALGO_PH\n    - BUG/MINOR: backend: balance uri specific options were lost across defaults\n    - BUG/MINOR: backend: BE_LB_LKUP_CHTREE is a value, not a bit\n    - MINOR: backend: move url_param_name/len to lbprm.arg_str/len\n    - MINOR: backend: make headers and RDP cookie also use arg_str/len\n    - MINOR: backend: add new fields in lbprm to store more LB options\n    - MINOR: backend: make the header hash use arg_opt1 for use_domain_only\n    - MINOR: backend: remap the balance uri settings to lbprm.arg_opt{1,2,3}\n    - MINOR: backend: move hash_balance_factor out of chash\n    - MEDIUM: backend: move all LB algo parameters into an union\n    - MINOR: backend: make the random algorithm support a number of draws\n    - BUILD/MEDIUM: da: Necessary code changes for new buffer API.\n    - BUG/MINOR: stick_table: Prevent conn_cur from underflowing\n    - BUG: 51d: Changes to the buffer API in 1.9 were not applied to the 51Degrees code.\n    - BUG/MEDIUM: stats: Get the right scope pointer depending on HTX is used or not\n    - DOC: add a missing space in the documentation for bc_http_major\n    - REGTEST: checks basic stats webpage functionality\n    - BUG/MEDIUM: servers: Make assign_tproxy_address work when ALPN is set.\n    - BUG/MEDIUM: connections: Add the CO_FL_CONNECTED flag if a send succeeded.\n    - DOC: add github issue templates\n    - MINOR: cfgparse: Extract some code to be re-used.\n    - CLEANUP: cfgparse: Return asap from cfg_parse_peers().\n    - CLEANUP: cfgparse: Code reindentation.\n    - MINOR: cfgparse: Useless frontend initialization in \"peers\" sections.\n    - MINOR: cfgparse: Rework peers frontend init.\n    - MINOR: cfgparse: Simplication.\n    - MINOR: cfgparse: Make \"peer\" lines be parsed as \"server\" lines.\n    - MINOR: peers: Make outgoing connection to SSL/TLS peers work.\n    - MINOR: cfgparse: SSL/TLS binding in \"peers\" sections.\n    - DOC: peers: SSL/TLS documentation for \"peers\"\n    - BUG/MINOR: startup: certain goto paths in init_pollers fail to free\n    - BUG/MEDIUM: checks: fix recent regression on agent-check making it crash\n    - BUG/MINOR: server: don't always trust srv_check_health when loading a server state\n    - BUG/MINOR: check: Wake the check task if the check is finished in wake_srv_chk()\n    - BUG/MEDIUM: ssl: Fix handling of TLS 1.3 KeyUpdate messages\n    - DOC: mention the effect of nf_conntrack_tcp_loose on src/dst\n    - BUG/MINOR: proto-htx: Return an error if all headers cannot be received at once\n    - BUG/MEDIUM: mux-h2/htx: Respect the channel's reserve\n    - BUG/MINOR: mux-h1: Apply the reserve on the channel's buffer only\n    - BUG/MINOR: mux-h1: avoid copying output over itself in zero-copy\n    - BUG/MAJOR: mux-h2: don't destroy the stream on failed allocation in h2_snd_buf()\n    - BUG/MEDIUM: backend: also remove from idle list muxes that have no more room\n    - BUG/MEDIUM: mux-h2: properly abort on trailers decoding errors\n    - MINOR: h2: declare new sets of frame types\n    - BUG/MINOR: mux-h2: CONTINUATION in closed state must always return GOAWAY\n    - BUG/MINOR: mux-h2: headers-type frames in HREM are always a connection error\n    - BUG/MINOR: mux-h2: make it possible to set the error code on an already closed stream\n    - BUG/MINOR: hpack: return a compression error on invalid table size updates\n    - MINOR: server: make sure pool-max-conn is >= -1\n    - BUG/MINOR: stream: take care of synchronous errors when trying to send\n    - CLEANUP: server: fix indentation mess on idle connections\n    - BUG/MINOR: mux-h2: always check the stream ID limit in h2_avail_streams()\n    - BUG/MINOR: mux-h2: refuse to allocate a stream with too high an ID\n    - BUG/MEDIUM: backend: never try to attach to a mux having no more stream available\n    - MINOR: server: add a max-reuse parameter\n    - MINOR: mux-h2: always consider a server's max-reuse parameter\n    - MEDIUM: stream-int: always mark pending outgoing SI_ST_CON\n    - MINOR: stream: don't wait before retrying after a failed connection reuse\n    - MEDIUM: h2: always parse and deduplicate the content-length header\n    - BUG/MINOR: mux-h2: always compare content-length to the sum of DATA frames\n    - CLEANUP: h2: Remove debug printf in mux_h2.c\n    - MINOR: cfgparse: make the process/thread parser support a maximum value\n    - MINOR: threads: make MAX_THREADS configurable at build time\n    - DOC: nbthread is no longer experimental.\n    - BUG/MINOR: listener: always fill the source address for accepted socketpairs\n    - BUG/MINOR: mux-h2: do not report available outgoing streams after GOAWAY\n    - BUG/MINOR: spoe: corrected fragmentation string size\n    - BUG/MINOR: task: fix possibly missed event in inter-thread wakeups\n    - BUG/MEDIUM: servers: Attempt to reuse an unfinished connection on retry.\n    - BUG/MEDIUM: backend: always call si_detach_endpoint() on async connection failure\n    - SCRIPTS: add the issue tracker URL to the announce script\n    - MINOR: peers: Extract some code to be reused.\n    - CLEANUP: peers: Indentation fixes.\n    - MINOR: peers: send code factorization.\n    - MINOR: peers: Add new functions to send code and reduce the I/O handler.\n    - MEDIUM: peers: synchronizaiton code factorization to reduce the size of the I/O handler.\n    - MINOR: peers: Move update receive code to reduce the size of the I/O handler.\n    - MINOR: peers: Move ack, switch and definition receive code to reduce the size of the I/O handler.\n    - MINOR: peers: Move high level receive code to reduce the size of I/O handler.\n    - CLEANUP: peers: Be more generic.\n    - MINOR: peers: move error handling to reduce the size of the I/O handler.\n    - MINOR: peers: move messages treatment code to reduce the size of the I/O handler.\n    - MINOR: peers: move send code to reduce the size of the I/O handler.\n    - CLEANUP: peers: Remove useless statements.\n    - MINOR: peers: move \"hello\" message treatment code to reduce the size of the I/O handler.\n    - MINOR: peers: move peer initializations code to reduce the size of the I/O handler.\n    - CLEANUP: peers: factor the error handling code in peer_treet_updatemsg()\n    - CLEANUP: peers: factor error handling in peer_treat_definedmsg()\n    - BUILD/MINOR: peers: shut up a build warning introduced during last cleanup\n    - BUG/MEDIUM: mux-h2: only close connection on request frames on closed streams\n    - CLEANUP: mux-h2: remove two useless but misleading assignments\n    - BUG/MEDIUM: checks: Check that conn_install_mux succeeded.\n    - BUG/MEDIUM: servers: Only destroy a conn_stream we just allocated.\n    - BUG/MEDIUM: servers: Don't add an incomplete conn to the server idle list.\n    - BUG/MEDIUM: checks: Don't try to set ALPN if connection failed.\n    - BUG/MEDIUM: h2: In h2_send(), stop the loop if we failed to alloc a buf.\n    - BUG/MEDIUM: peers: Handle mux creation failure.\n    - BUG/MEDIUM: servers: Close the connection if we failed to install the mux.\n    - BUG/MEDIUM: compression: Rewrite strong ETags\n    - BUG/MINOR: deinit: tcp_rep.inspect_rules not deinit, add to deinit\n    - CLEANUP: mux-h2: remove misleading leftover test on h2s' nullity\n    - BUG/MEDIUM: mux-h2: wake up flow-controlled streams on initial window update\n    - BUG/MEDIUM: mux-h2: fix two half-closed to closed transitions\n    - BUG/MEDIUM: mux-h2: make sure never to send GOAWAY on too old streams\n    - BUG/MEDIUM: mux-h2: do not abort HEADERS frame before decoding them\n    - BUG/MINOR: mux-h2: make sure response HEADERS are not received in other states than OPEN and HLOC\n    - MINOR: h2: add a generic frame checker\n    - MEDIUM: mux-h2: check the frame validity before considering the stream state\n    - CLEANUP: mux-h2: remove stream ID and frame length checks from the frame parsers\n    - BUG/MINOR: mux-h2: make sure request trailers on aborted streams don't break the connection\n    - DOC: compression: Update the reasons for disabled compression\n    - BUG/MEDIUM: buffer: Make sure b_is_null handles buffers waiting for allocation.\n    - DOC: htx: make it clear that htxbuf() and htx_from_buf() always return valid pointers\n    - MINOR: htx: never check for null htx pointer in htx_is_{,not_}empty()\n    - MINOR: mux-h2: consistently rely on the htx variable to detect the mode\n    - BUG/MEDIUM: peers: Peer addresses parsing broken.\n    - BUG/MEDIUM: mux-h1: Don't add \"transfer-encoding\" if message-body is forbidden\n    - BUG/MEDIUM: connections: Don't forget to remove CO_FL_SESS_IDLE.\n    - BUG/MINOR: stream: don't close the front connection when facing a backend error\n    - BUG/MEDIUM: mux-h2: wait for the mux buffer to be empty before closing the connection\n    - MINOR: stream-int: add a new flag to mention that we want the connection to be killed\n    - MINOR: connstream: have a new flag CS_FL_KILL_CONN to kill a connection\n    - BUG/MEDIUM: mux-h2: do not close the connection on aborted streams\n    - BUG/MINOR: server: fix logic flaw in idle connection list management\n    - MINOR: mux-h2: max-concurrent-streams should be unsigned\n    - MINOR: mux-h2: make sure to only check concurrency limit on the frontend\n    - MINOR: mux-h2: learn and store the peer's advertised MAX_CONCURRENT_STREAMS setting\n    - BUG/MEDIUM: mux-h2: properly consider the peer's advertised max-concurrent-streams\n    - MINOR: xref: Add missing barriers.\n    - MINOR: muxes: Don't bother to LIST_DEL(&conn->list) before calling conn_free().\n    - MINOR: debug: Add an option that causes random allocation failures.\n    - BUG/MEDIUM: backend: always release the previous connection into its own target srv_list\n    - BUG/MEDIUM: htx: check the HTX compatibility in dynamic use-backend rules\n    - BUG/MINOR: tune.fail-alloc: Don't forget to initialize ret.\n    - BUG/MINOR: backend: check srv_conn before dereferencing it\n    - BUG/MEDIUM: mux-h2: always omit :scheme and :path for the CONNECT method\n    - BUG/MEDIUM: mux-h2: always set :authority on request output\n    - BUG/MEDIUM: stream: Don't forget to free s->unique_id in stream_free().\n    - BUG/MINOR: threads: fix the process range of thread masks\n    - BUG/MINOR: config: fix bind line thread mask validation\n    - CLEANUP: threads: fix misleading comment about all_threads_mask\n    - CLEANUP: threads: use nbits to calculate the thread mask\n    - OPTIM: listener: optimize cache-line packing for struct listener\n    - MINOR: tools: improve the popcount() operation\n    - MINOR: config: keep an all_proc_mask like we have all_threads_mask\n    - MINOR: global: add proc_mask() and thread_mask()\n    - MINOR: config: simplify bind_proc processing using proc_mask()\n    - MINOR: threads: make use of thread_mask() to simplify some thread calculations\n    - BUG/MINOR: compression: properly report compression stats in HTX mode\n    - BUG/MINOR: task: close a tiny race in the inter-thread wakeup\n    - BUG/MAJOR: config: verify that targets of track-sc and stick rules are present\n    - BUG/MAJOR: spoe: verify that backends used by SPOE cover all their callers' processes\n    - BUG/MAJOR: htx/backend: Make all tests on HTTP messages compatible with HTX\n    - BUG/MINOR: config: make sure to count the error on incorrect track-sc/stick rules\n    - DOC: ssl: Clarify when pre TLSv1.3 cipher can be used\n    - DOC: ssl: Stop documenting ciphers example to use\n    - BUG/MINOR: spoe: do not assume agent->rt is valid on exit\n    - BUG/MINOR: lua: initialize the correct idle conn lists for the SSL sockets\n    - BUG/MEDIUM: spoe: initialization depending on nbthread must be done last\n    - BUG/MEDIUM: server: initialize the idle conns list after parsing the config\n    - BUG/MEDIUM: server: initialize the orphaned conns lists and tasks at the end\n    - MINOR: config: make MAX_PROCS configurable at build time\n    - BUG/MAJOR: spoe: Don't try to get agent config during SPOP healthcheck\n    - BUG/MINOR: config: Reinforce validity check when a process number is parsed\n    - BUG/MEDIUM: peers: check that p->srv actually exists before using p->srv->use_ssl\n    - CONTRIB: contrib/prometheus-exporter: Add a Prometheus exporter for HAProxy\n    - BUG/MINOR: mux-h1: verify the request's version before dropping connection: keep-alive\n    - BUG: 51d: In Hash Trie, multi header matching was affected by the header names stored globaly.\n    - MEDIUM: 51d: Enabled multi threaded operation in the 51Degrees module.\n    - BUG/MAJOR: stream: avoid double free on unique_id\n    - BUILD/MINOR: stream: avoid a build warning with threads disabled\n    - BUILD/MINOR: tools: fix build warning in the date conversion functions\n    - BUILD/MINOR: peers: remove an impossible null test in intencode()\n    - BUILD/MINOR: htx: fix some potential null-deref warnings with http_find_stline\n    - BUG/MEDIUM: peers: Missing peer initializations.\n    - BUG/MEDIUM: http_fetch: fix the \"base\" and \"base32\" fetch methods in HTX mode\n    - BUG/MEDIUM: proto_htx: Fix data size update if end of the cookie is removed\n    - BUG/MEDIUM: http_fetch: fix \"req.body_len\" and \"req.body_size\" fetch methods in HTX mode\n    - BUILD/MEDIUM: initcall: Fix build on MacOS.\n    - BUG/MEDIUM: mux-h2/htx: Always set CS flags before exiting h2_rcv_buf()\n    - MINOR: h2/htx: Set the flag HTX_SL_F_BODYLESS for messages without body\n    - BUG/MINOR: mux-h1: Add \"transfer-encoding\" header on outgoing requests if needed\n    - BUG/MINOR: mux-h2: Don't add \":status\" pseudo-header on trailers\n    - BUG/MINOR: proto-htx: Consider a XFER_LEN message as chunked by default\n    - BUG/MEDIUM: h2/htx: Correctly handle interim responses when HTX is enabled\n    - MINOR: mux-h2: Set HTX extra value when possible\n    - BUG/MEDIUM: htx: count the amount of copied data towards the final count\n    - MINOR: mux-h2: make the H2 MAX_FRAME_SIZE setting configurable\n    - BUG/MEDIUM: mux-h2/htx: send an empty DATA frame on empty HTX trailers\n    - BUG/MEDIUM: servers: Use atomic operations when handling curr_idle_conns.\n    - BUG/MEDIUM: servers: Add a per-thread counter of idle connections.\n    - MINOR: fd: add a new my_closefrom() function to close all FDs\n    - MINOR: checks: use my_closefrom() to close all FDs\n    - MINOR: fd: implement an optimised my_closefrom() function\n    - BUG/MINOR: fd: make sure my_closefrom() doesn't miss some FDs\n    - BUG/MAJOR: fd/threads, task/threads: ensure all spin locks are unlocked\n    - BUG/MAJOR: listener: Make sure the listener exist before using it.\n    - MINOR: fd: Use closefrom() as my_closefrom() if supported.\n    - BUG/MEDIUM: mux-h1: Report the right amount of data xferred in h1_rcv_buf()\n    - BUG/MINOR: channel: Set CF_WROTE_DATA when outgoing data are skipped\n    - MINOR: htx: Add function to drain data from an HTX message\n    - MINOR: channel/htx: Add function to skips output bytes from an HTX channel\n    - BUG/MAJOR: cache/htx: Set the start-line offset when a cached object is served\n    - BUG/MEDIUM: cache: Get objects from the cache only for GET and HEAD requests\n    - BUG/MINOR: cache/htx: Return only the headers of cached objects to HEAD requests\n    - BUG/MINOR: mux-h1: Always initilize h1m variable in h1_process_input()\n    - BUG/MEDIUM: proto_htx: Fix functions applying regex filters on HTX messages\n    - BUG/MEDIUM: h2: advertise to servers that we don't support push\n    - MINOR: standard: Add a function to parse uints (dotted notation).\n    - MINOR: arg: Add support for ARGT_PBUF_FNUM arg type.\n    - MINOR: http_fetch: add \"req.ungrpc\" sample fetch for gRPC.\n    - MINOR: sample: Add two sample converters for protocol buffers.\n    - DOC: sample: Add gRPC related documentation.\n\n2018/12/22 : 2.0-dev0\n    - BUG/MAJOR: connections: Close the connection before freeing it.\n    - REGTEST: Require the option LUA to run lua tests\n    - REGTEST: script: Process script arguments before everything else\n    - REGTEST: script: Evaluate the varnishtest command to allow quoted parameters\n    - REGTEST: script: Add the option --clean to remove previous log direcotries\n    - REGTEST: script: Add the option --debug to show logs on standard ouput\n    - REGTEST: script: Add the option --keep-logs to keep all log directories\n    - REGTEST: script: Add the option --use-htx to enable the HTX in regtests\n    - REGTEST: script: Print only errors in the results report\n    - REGTEST: Add option to use HTX prefixed by the macro 'no-htx'\n    - REGTEST: Make reg-tests target support argument.\n    - REGTEST: Fix a typo about barrier type.\n    - REGTEST: Be less Linux specific with a syslog regex.\n    - REGTEST: Missing enclosing quotes for ${tmpdir} macro.\n    - REGTEST: Exclude freebsd target for some reg tests.\n    - BUG/MEDIUM: h2: Don't forget to quit the sending_list if SUB_CALL_UNSUBSCRIBE.\n    - BUG/MEDIUM: mux-h2: Don't forget to quit the send list on error reports\n    - BUG/MEDIUM: dns: Don't prevent reading the last byte of the payload in dns_validate_response()\n    - BUG/MEDIUM: dns: overflowed dns name start position causing invalid dns error\n    - BUG/MINOR: compression/htx: Don't compress responses with unknown body length\n    - BUG/MINOR: compression/htx: Don't add the last block of data if it is empty\n    - MEDIUM: mux_h1: Implement h1_show_fd.\n    - REGTEST: script: Add support of alternatives in requited options list\n    - REGTEST: Add a basic test for the compression\n    - BUG/MEDIUM: mux-h2: don't needlessly wake up the demux on short frames\n    - REGTEST: A basic test for \"http-buffer-request\"\n    - BUG/MEDIUM: server: Also copy \"check-sni\" for server templates.\n    - MINOR: ssl: Add ssl_sock_set_alpn().\n    - MEDIUM: checks: Add check-alpn.\n    - wip\n\n2018/12/19 : 1.9.0\n    - BUG/MEDIUM: compression: Use the right buffer pointers to compress input data\n    - BUG/MINOR: mux_pt: Set CS_FL_WANT_ROOM when count is zero in rcv_buf() callback\n    - BUG/MEDIUM: connection: Add a new CS_FL_ERR_PENDING flag to conn_streams.\n    - CONTRIB: debug: teach the \"flags\" utility about new conn_stream flags\n    - BUG/MEDIUM: stream-int: always clear CS_FL_WANT_ROOM before receiving\n    - BUG/MEDIUM: mux-h2: also restart demuxing when data are pending in demux\n    - BUG/MEDIUM: mux-h2: restart demuxing as soon as demux data are available\n    - BUG/MEDIUM: h2: fix aggregated cookie length computation in HTX mode\n    - MINOR: mux-h2: report more h2c, last h2s and cs information on \"show fd\"\n    - CONTRIB: debug: report stream-int's flag SI_FL_CLEAN_ABRT\n    - MINOR: cli/stream: add the conn_stream in \"show sess\" output\n    - BUG/MINOR: mux-h2: don't report a fantom h2s in \"show fd\"\n    - BUG/MINOR: cli/fd: don't isolate the thread for each individual fd\n    - MINOR: objtype: report a few missing types in names and base pointers\n    - BUG/MEDIUM: mux-h2: make sure to report synchronous errors after EOS\n    - BUG/MEDIUM: mux-h2: report asynchronous errors in h2_wake_some_streams()\n    - BUG/MEDIUM: mux-h2: make sure the demux also wakes streams up on errors\n    - BUG/MINOR: mux-h1: report the correct frontend in error captures\n    - BUG/MEDIUM: stream-int: also wake the stream up on end of transfer\n    - MEDIUM: h2: properly check and deduplicate the content-length header in HTX\n    - BUG/MEDIUM: stream: Forward the right amount of data before infinite forwarding\n    - BUG/MINOR: proto_htx: Call the HTX version of the function managing client cookies\n    - BUG/MEDIUM: lua/htx: Handle EOM in receive/get_line calls in HTTP applets\n    - BUG/MINOR: lua: Return an error if a legacy HTTP applet doesn't send anything\n    - MINOR: compression: Remove the thread_local variable buf_output\n    - CLEANUP: connection: rename subscription events values and event field\n    - CLEANUP: connection: rename conn->mux_ctx to conn->ctx\n    - MINOR: connection: remove an unwelcome dependency on struct stream\n    - CLEANUP: stream-int: consistently call the si/stream_int functions\n    - BUG/MEDIUM: h1: Don't shutw/shutr the connection if we have keepalive.\n    - BUG/MEDIUM: H2: Make sure htx is set even on empty frames.\n    - BUG/MEDIUM: mux-h2: pass CS_FL_ERR_PENDING to h2_wake_some_streams()\n    - MEDIUM: stream-int: always consider all CS errors on the send side\n    - BUG/MEDIUM: h2: Make sure we don't set CS_FL_ERROR if there's still data.\n    - CLEANUP: mux-h2: implement h2s_notify_{send,recv} to report events to subscribers\n    - MINOR: mux-h2: add a new function h2s_alert() to call the data layer\n    - BUG/MEDIUM: mux-h2: make use of h2s_alert() to report aborts\n    - MINOR: connection: add cs_set_error() to set the error bits\n    - CLEANUP: mux-h2: make use of cs_set_error()\n    - BUG/MINOR: mux-h2: make sure we check the conn_stream in early data\n    - BUG/MEDIUM: h2: Don't wait for flow control if the connection had a shutr.\n    - MINOR: cli/show_fd: report that a connection is back or not\n    - SCRIPTS: add the slack channel URL to the announce script\n    - CLEANUP: remove my name and address from the copyright banner\n    - DOC: mention in the readme that 1.9 is a stable version now\n\n2018/12/16 : 1.9-dev11\n    - BUG/MEDIUM: connection: Don't use the provided conn_stream if it was tried.\n    - REGTEST/MINOR: remove double body specification for server txresp\n    - BUG/MEDIUM: connections: Remove error flags when retrying.\n    - REGTEST/MINOR: skip seamless-reload test with abns socket on freebsd\n    - REGTEST/MINOR: remove health-check that can make the test fail\n    - DOC: clarify that check-sni needs an argument.\n    - DOC: refer to check-sni in the documentation of sni\n    - BUG/MEDIUM: mux-h2: fix encoding of non-GET/POST methods\n    - BUG/MINOR: mux-h1: Fix conn_mode processing for headerless outgoing messages\n    - BUG/MEDIUM: mux-h1: Add a BUSY mode to not loop on pipelinned requests\n    - BUG/MEDIUM: mux-h1: Don't loop on the headers parsing if the read0 was received\n    - BUG/MEDIUM: htx: Always do a defrag if a block value is replace by a bigger one\n    - BUG/MEDIUM: mux-h2: Don't forget to set the CS_FL_EOS flag with htx.\n    - BUG/MINOR: hpack: fix off-by-one in header name encoding length calculation\n    - CLEANUP: hpack: no need to include chunk.h, only include buf.h\n    - MINOR: hpack: simplify the len to bytes conversion\n    - MINOR: hpack: use ist2bin() to copy header names in hpack_encode_header()\n    - MINOR: hpack: optimize header encoding for short names\n    - CONTRIB: hpack: add a compressed stream generator for the encoder\n    - MEDIUM: hpack: make it possible to encode any static header name\n    - MINOR: hpack: move the length computation and encoding functions to .h\n    - MINOR: hpack: provide a function to encode a short indexed header\n    - MINOR: hpack: provide a function to encode a long indexed header\n    - MINOR: hpack: provide new functions to encode the \":status\" header\n    - MEDIUM: mux-h2: make use of standard HPACK encoding functions for the status\n    - MINOR: hpack: provide a function to encode an HTTP method\n    - MEDIUM: mux-h2: make use of hpack_encode_method() to encode the method\n    - MINOR: hpack: provide a function to encode an HTTP scheme\n    - MEDIUM: mux-h2: make use of hpack_encode_scheme() to encode the scheme\n    - MINOR: hpack: provide a function to encode an HTTP path\n    - MEDIUM: mux-h2: make use of hpack_encode_path() to encode the path\n    - REGTEST: add the HTTP rules test involving HTX processing\n    - REORG: connection: centralize the conn_set_{tos,mark,quickack} functions\n    - MEDIUM: cli: rework the CLI proxy parser\n    - MINOR: cli: parse prompt command in the CLI proxy\n    - MINOR: cli: implements 'quit' in the CLI proxy\n    - BUG/MINOR: cli: wait for payload data even without prompt\n    - MEDIUM: cli: handle payload in CLI proxy\n    - MINOR: cli: use pcli_flags for prompt activation\n    - MINOR: compression: Rename the function check_legacy_http_comp_flt()\n    - MINOR: cache/htx: Don't use the same cache on HTX and legacy HTTP proxies\n    - MINOR: cache: Register the cache as a data filter only if response is cacheable\n    - MEDIUM: cache/htx: Add the HTX support into the cache\n    - MINOR: cache: Improve and simplify the cache configuration check\n    - MINOR: filters: Export the name of known filters\n    - MEDIUM: cache/compression: Add a way to safely combined compression and cache\n    - MEDIUM: cache: Require an explicit filter declaration if other filters are used\n    - REORG: htx: merge types+proto into common/htx.h\n    - REORG: http: create http_msg.c to place there some legacy HTTP parts\n    - REORG: h1: move legacy http functions to http_msg.c\n    - REORG: h1: move the h1_state definition to proto_http\n    - CLEANUP: h1: remove some occurrences of unneeded h1.h inclusions\n    - REORG: h1: merge types+proto into common/h1.h\n    - CLEANUP: stream: remove SF_TUNNEL, SF_INITIALIZED, SF_CONN_TAR\n    - MEDIUM: mux-h1: implement true zero-copy of DATA blocks\n    - MINOR: config: round up global.tune.bufsize to the next multiple of 2 void*\n    - BUG/MINOR: mux-h2: refrain from muxing during the preface\n    - BUG/MINOR: mux-h2: advertise a larger connection window size\n    - DOC: master CLI documentation in management.txt\n    - MINOR: mux-h2: avoid copying large blocks into full buffers\n    - MEDIUM: mux-h2: implement true zero-copy send of large HTX DATA blocks\n    - MINOR: mux-h2: force reads to be HTX-aligned in HTX mode\n    - MINOR: cli: change 'show proc' output of old processes\n    - BUG/MEDIUM: mux-h1: Fix the zero-copy on output for chunked messages\n    - BUG: dns: Prevent stack-exhaustion via recursion loop in dns_read_name\n    - BUG: dns: Prevent out-of-bounds read in dns_read_name()\n    - BUG: dns: Prevent out-of-bounds read in dns_validate_dns_response()\n    - BUG: dns: Fix out-of-bounds read via signedness error in dns_validate_dns_response()\n    - BUG: dns: Fix off-by-one write in dns_validate_dns_response()\n    - REGTEST: the cache regtest requires haproxy 1.9\n    - MEDIUM: cli: store CLI level in the appctx\n    - MEDIUM: cli: show and change CLI permissions\n    - CLEANUP: cli: use dedicated define instead of appctx ones\n    - MEDIUM: cli: handle CLI level from the master CLI\n    - BUG/MEDIUM: cli: handle correctly prefix and payload\n    - BUILD: Makefile: Implements the help target\n    - REGTESTS: adjust the http-rules regtest to support window updates\n    - BUG/MEDIUM: connections: Remove CS_FL_EOS | CS_FL_REOS on retry.\n    - BUG/MEDIUM: stream_interface: Don't report read0 if we were not connected.\n    - BUG/MEDIUM: connection: Just make sure we closed the fd on connection failure.\n    - MEDIUM: mux: Add an optional \"reset\" method.\n    - BUG/MEDIUM: mux-h1: Fix loop if server closes its connection with unparsed data\n    - MINOR: mux-h1: Add helper functions to wake a stream from recv or send\n    - BUG/MEDIUM: mux-h1: Wake the stream for send once the connection is established\n    - BUG/MEDIUM: connections: Don't attempt to reuse an unusable connection.\n    - MEDIUM: htx: Try to take a connection over if it has no owner.\n    - REGTEST: Reg testing improvements.\n    - REGTEST: Add a first test for health-checks.\n    - REGTEST: Reg test for \"check\" health-check option.\n    - REGTEST: level 1 health-check test 2.\n    - REGTEST: Add miscellaneous reg tests for health-checks.\n    - REGTEST: add a few HTTP messaging tests\n    - MINOR: lb: make the leastconn algorithm more accurate\n    - REGTEST: fix missing space in checks/s00001\n    - REGTEST: http-messaging: add \"option http-buffer-request\" for H2 tests\n    - BUG/MEDIUM: cache: fix random crash on filter parser's error path\n    - MINOR: connection: realign empty buffers in muxes, not transport layers\n    - MINOR: mux_h1/h2: simplify the zero-copy Rx alignment\n    - MINOR: backend: count the number of connect and reuse per server and per backend\n    - BUG/MINOR: stats: fix inversion of failed header rewrites and other statuses\n    - MINOR: tools: increase the number of ITOA strings to 16\n    - MINOR: cache: report the number of cache lookups and cache hits\n    - MEDIUM: tasks: check the global task mask instead of the thread number\n    - MINOR: mworker: set all_threads_mask and pid_bit to 1\n    - BUG/MINOR: proto_htx: Fix htx_res_set_status to also set the reason\n    - BUG/MINOR: stats: Parse post data for HTX streams\n    - MINOR: payload/htx: Adapt smp_fetch_len to be HTX aware\n    - MINOR: http_fecth: Implement body_len and body_size sample fetches for the HTX\n    - MAJOR: lua: Forbid calls to Channel functions for LUA scripts in HTTP proxies\n    - MEDIUM: lua/htx: Adapt functions of the HTTP to be compatible with HTX\n    - MINOR: lua/htx: Adapt the functions get_in_length and is_full to be HTX aware\n    - MAJOR: lua/htx: Adapt HTTP applets to support HTX messages\n    - MINOR: lua: Remove useless check on the messages state in HTTP functions\n    - BUG/MEDIUM: htx: When performing zero-copy, start from the right offset.\n    - BUG/MINOR: mworker: don't use unitialized mworker_proc struct\n    - MINOR: mworker/cli: indicate in the master prompt when a reload failed\n    - MINOR: cli: implements 'reload' on master CLI\n    - BUG/MEDIUM: log: Don't call sample_fetch_as_type if we don't have a stream.\n    - BUG/MEDIUM: mux-h1: make sure we always have at least one HTX block to send\n    - BUG/MAJOR: backend: only update server's counters when the server exists\n    - MINOR: tools: preset the port of fd-based \"sockets\" to zero\n    - BUG/MINOR: log: fix logging to both FD and IP\n    - REGTEST: Add a reg test for HTTP cookies.\n    - BUILD: ssl: Fix compilation without deprecated OpenSSL 1.1 APIs\n    - BUILD: thread: properly report multi-thread support\n    - BUG/MINOR: logs: leave startup-logs global and not per-thread\n    - BUG/MEDIUM: threads: don't close the thread waker pipe if not init\n    - BUG/MAJOR: compression/cache: Make it really works with these both filters\n    - BUG/MEDIUM: h2: Don't forget to destroy the h2s after deferred shut.\n    - MEDIUM: proxy: Set http-reuse safe as default.\n    - MEDIUM: servers: Add a command to limit the number of idling connections.\n    - MEDIUM: servers: Replace idle-timeout with pool-purge-delay.\n    - MEDIUM: mux: Destroy the stream before trying to add the conn to the idle list.\n    - MEDIUM: mux: provide the session to the init() and attach() method.\n    - MEDIUM: sessions: Don't keep an infinite number of idling connections.\n    - MEDIUM: servers: Be more agressive when adding H2 connection to idle lists.\n    - MEDIUM: mux_h2: Always set CS_FL_NOT_FIRST for new conn_streams.\n    - BUG/MEDIUM: htx/cache: use the correct class of error codes on abort\n    - BUG/MINOR: cache: also consider CF_SHUTR to abort delivery\n    - MINOR: pools: Cast to volatile int * instead of int *.\n    - MINOR: debug: make the ABORT_NOW macro use a volatile int\n    - BUG/MEDIUM: h2: Don't destroy the h2s if it still has a cs attached.\n    - BUG/MEDIUM: mux-h1: don't try to process an empty input buffer\n    - DOC: clarify the agent-check status line syntax\n    - BUG/MAJOR: hpack: fix length check for short names encoding\n    - DOC: split the README into README + INSTALL\n\n2018/12/08 : 1.9-dev10\n    - MINOR: htx: Rename functions htx_*_to_str() to be H1 specific\n    - BUG/MINOR: htx: Force HTTP/1.1 on H1 formatting when version is 1.1 or above\n    - BUG/MINOR: fix ssl_fc_alpn and actually add ssl_bc_alpn\n    - BUG/MEDIUM: mworker: stop proxies which have no listener in the master\n    - BUG/MEDIUM: h1: Destroy a connection after detach if it has no owner.\n    - BUG/MEDIUM: h2: Don't forget to wake the tasklet after shutr/shutw.\n    - BUG/MINOR: flt_trace/compression: Use the right flag to add the HTX support\n    - BUG/MEDIUM: stream_interface: Make REALLY sure we read all the data.\n    - MEDIUM: mux-h1: Revamp the way subscriptions are handled.\n    - BUG/MEDIUM: mux-h1: Always set CS_FL_RCV_MORE when data are received in h1_recv()\n    - MINOR: mux-h1: Make sure to return 1 in h1_recv() when needed\n    - BUG/MEDIUM: mux-h1: Release the mux H1 in h1_process() if there is no h1s\n    - BUG/MINOR: proto_htx: Truncate the request when an error is detected\n    - BUG/MEDIUM: h2: When sending in HTX, make sure the caller knows we sent all.\n    - BUG/MEDIUM: mux-h2: properly update the window size in HTX mode\n    - BUG/MEDIUM: mux-h2: make sure to always report HTX EOM when consumed by headers\n    - BUG/MEDIUM: mux-h2: stop sending HTX once the mux is blocked\n    - BUG/MEDIUM: mux-h2: don't send more HTX data than requested\n    - MINOR: mux-h2: stop on non-DATA and non-EOM HTX blocks\n    - BUG/MEDIUM: h1: Correctly report used data with no len.\n    - MEDIUM: h1: Realign the ibuf before calling rcv_buf if needed.\n    - BUG/MEDIUM: mux_pt: Always set CS_FL_RCV_MORE.\n    - MINOR: htx: make htx_from_buf() adjust the size only on new buffers\n    - MINOR: htx: add buf_room_for_htx_data() to help optimize buffer transfers\n    - MEDIUM: mux-h1: make use of buf_room_for_htx_data() instead of b_room()\n    - MEDIUM: mux-h1: attempt to zero-copy Rx DATA transfers\n    - MEDIUM: mux-h1: avoid a double copy on the Tx path whenever possible\n    - BUG/MEDIUM: stream-int: don't mark as blocked an empty buffer on Rx\n    - BUG/MINOR: mux-h1: Check h1m flags to set the server conn_mode on request path\n    - MEDIUM: htx: Rework conversion from a buffer to an htx structure\n    - MEDIUM: channel/htx: Add functions for forward HTX data\n    - MINOR: mux-h1: Don't adjust anymore the amount of data sent in h1_snd_buf()\n    - CLEANUP: htx: Fix indentation here and there in HTX files\n    - MINOR: mux-h1: Allow partial data consumption during outgoing data processing\n    - BUG/MEDIUM: mux-h2: use the correct offset for the HTX start line\n    - BUG/MEDIUM: mux-h2: stop sending using HTX on errors\n    - MINOR: mux-h1: Drain obuf if the output is closed after sending data\n    - BUG/MEDIUM: mworker: stop every tasks in the master\n    - BUG/MEDIUM: htx: Set the right start-line offset after a defrag\n    - BUG/MEDIUM: stream: Don't dereference s->txn when it is not there yet.\n    - BUG/MEDIUM: connections: Reuse an already attached conn_stream.\n    - MINOR: stream-int: add a new blocking condition on the remote connection\n    - BUG/MEDIUM: stream-int: don't attempt to receive if the connection is not established\n    - BUG/MEDIUM: lua: block on remote connection establishment\n    - BUG/MEDIUM: mworker: fix several typos in mworker_cleantasks()\n    - SCRIPTS/REGTEST: merge grep+sed into sed in run-regtests\n    - BUG/MEDIUM: connections: Split CS_FL_RCV_MORE into 2 flags.\n    - BUG/MEDIUM: h1: Don't free the connection if it's an outgoing connection.\n    - BUG/MEDIUM: h1: Set CS_FL_REOS if we had a read0.\n    - BUG/MEDIUM: mux-h1: Be sure to have a conn_stream to set CS_FL_REOS in h1_recv\n    - REGTEST: Move LUA reg test 4 to level 1.\n    - MINOR: ist: add functions to copy/uppercase/lowercase into a buffer or string\n    - MEDIUM: ist: always turn header names to lower case\n    - MINOR: h2: don't turn HTX header names to lower case anymore\n    - MEDIUM: ist: use local conversion arrays to case conversion\n    - MINOR: htx: switch to case sensitive search of lower case header names\n    - MINOR: mux-h1: Set CS_FL_EOS when read0 is detected and no data are pending\n    - BUG/MINOR: stream-int: Process read0 even if no data was received in si_cs_recv\n    - REGTEST: fix the Lua test file name in test lua/h00002 :-)\n    - REGTEST: add a basic test for HTTP rules manipulating headers\n    - BUG/MEDIUM: sample: Don't treat SMP_T_METH as SMP_T_STR.\n    - MINOR: sample: add bc_http_major\n    - BUG/MEDIUM: htx: fix typo in htx_replace_stline() making it fail all the time\n    - REGTEST: make the HTTP rules test compatible with HTTP/2 as well\n    - BUG/MEDIUM: h2: Don't try to chunk data when using HTX.\n    - MINOR: compiler: add a new macro ALREADY_CHECKED()\n    - BUILD: h2: mark the start line already checked to avoid warnings\n    - BUG/MINOR: mux-h1: Remove the connection header when it is useless\n\n2018/12/02 : 1.9-dev9\n    - BUILD/MINOR: ssl: fix build with non-alpn/non-npn libssl\n    - BUG/MINOR: mworker: Do not attempt to close(2) fd -1\n    - BUILD: compression: fix build error with DEFAULT_MAXZLIBMEM\n    - MINOR: compression: always create the compression pool\n    - BUG/MEDIUM: mworker: fix FD leak upon reload\n    - BUILD: htx: fix fprintf format inconsistency on 32-bit platforms\n    - BUILD: buffers: buf.h requires unistd to get ssize_t on libmusl\n    - MINOR: initcall: introduce a way to register init functions to call at boot\n    - MINOR: init: process all initcalls in order at boot time\n    - MEDIUM: init: convert all trivial registration calls to initcalls\n    - MINOR: thread: provide a set of lock initialisers\n    - MINOR: threads: add new macros to declare self-initializing locks\n    - MEDIUM: init: use self-initializing spinlocks and rwlocks\n    - MINOR: initcall: apply initcall to all register_build_opts() calls\n    - MINOR: initcall: use initcalls for most post_{check,deinit} and per_thread*\n    - MINOR: initcall: use initcalls for section parsers\n    - MINOR: memory: add a callback function to create a pool\n    - MEDIUM: init: use initcall for all fixed size pool creations\n    - MEDIUM: memory: use pool_destroy_all() to destroy all pools on deinit()\n    - MEDIUM: initcall: use initcalls for a few initialization functions\n    - MEDIUM: memory: make the pool cache an array and not a thread_local\n    - MINOR: ssl: free ctx when libssl doesn't support NPN\n    - BUG/MINOR: proto_htx: only mark connections private if NTLM is detected\n    - MINOR: h2: make struct h2_ops static\n    - BUG/MEDIUM: mworker: avoid leak of client socket\n    - REORG: mworker: declare master variable in global.h\n    - BUG/MEDIUM: listeners: CLOEXEC flag is not correctly set\n    - CLEANUP: http: Fix typo in init_http's comment\n    - BUILD: Makefile: Disable -Wcast-function-type if it exists.\n    - BUG/MEDIUM: h2: Don't bogusly error if the previous stream was closed.\n    - REGTEST/MINOR: script: add run-regtests.sh script\n    - REGTEST: Add a basic test for the cache.\n    - BUG/MEDIUM: mux_pt: Don't forget to unsubscribe() on attach.\n    - BUG/MINOR: ssl: ssl_sock_parse_clienthello ignores session id\n    - BUG/MEDIUM: connections: Wake the stream once the mux is chosen.\n    - BUG/MEDIUM: connections: Don't forget to detach the connection from the SI.\n    - BUG/MEDIUM: stream_interface: Don't check if the handshake is done.\n    - BUG/MEDIUM: stream_interface: Make sure we read all the data available.\n    - BUG/MEDIUM: h2: Call h2_process() if there's an error on the connection.\n    - REGTEST: Fix several issues.\n    - REGTEST: lua: check socket functionality from a lua-task\n    - BUG/MEDIUM: session: Remove the session from the session_list in session_free.\n    - BUG/MEDIUM: streams: Don't assume we have a CS in sess_update_st_con_tcp.\n    - BUG/MEDIUM: connections: Don't assume we have a mux in connect_server().\n    - BUG/MEDIUM: connections: Remove the connection from the idle list before destroy.\n    - BUG/MEDIUM: session: properly clean the outgoing connection before freeing.\n    - BUG/MEDIUM: mux_pt: Don't try to send if handshake is not done.\n    - MEDIUM: connections: Put H2 connections in the idle list if http-reuse always.\n    - MEDIUM: h2: Destroy a connection with no stream if it has no owner.\n    - MAJOR: sessions: Store multiple outgoing connections in the session.\n    - MEDIUM: session: Steal owner-less connections on end of transaction.\n    - MEDIUM: server: Be smarter about deciding to reuse the last server.\n    - BUG/MEDIUM: Special-case http_proxy when dealing with outgoing connections.\n    - BUG/MINOR: cfgparse: Fix transition between 2 sections with the same name\n    - BUG/MINOR: http: Use out buffer instead of trash to display error snapshot\n    - BUG/MINOR: htx: Fix block size calculation when a start-line is added/replaced\n    - BUG/MINOR: mux-h1: Fix processing of \"Connection: \" header on outgoing messages\n    - BUG/MEDIUM: mux-h1: Reset the H1 parser when an outgoing message is processed\n    - BUG/MINOR: proto_htx: Send outgoing data to client to start response processing\n    - BUG/MINOR: htx: Stop a header or a start line lookup on the first EOH or EOM\n    - BUG/MINOR: connection: report mux modes when HTX is supported\n    - MINOR: htx: add a function to cut the beginning of a DATA block\n    - MEDIUM: conn_stream: Add a way to get mux's info on a CS from the upper layer\n    - MINOR: mux-h1: Implement get_cs_info() callback\n    - MINOR: stream: Rely on CS's info if it exists and fallback on session's ones\n    - MINOR: proto_htx: Use conn_stream's info to set t_idle duration when possible\n    - MINOR: mux-h1: Don't rely on the stream anymore in h1_set_srv_conn_mode()\n    - MINOR: mux-h1: Write last chunk and trailers if not found in the HTX message\n    - MINOR: mux-h1: Be prepare to fail when EOM is added during trailers parsing\n    - MINOR: mux-h1: Subscribe to send in h1_snd_buf() when not all data have been sent\n    - MINOR: mux-h1: Consume channel's data in a loop in h1_snd_buf()\n    - MEDIUM: mux-h1: Add keep-alive outgoing connections in connections list\n    - MINOR: htx: Add function to add an HTX block just before another one\n    - MINOR: htx: Add function to iterate on an HTX message using HTX blocks\n    - MINOR: htx: Add a function to find the HTX block corresponding to a data offset\n    - MINOR: stats: Don't add end-of-data marker and trailers in the HTX response\n    - MEDIUM: htx: Change htx_sl to be a struct instead of an union\n    - MINOR: htx: Add the start-line offset for the HTX message in the HTX structure\n    - MEDIUM: htx: Don't rely on h1_sl anymore except during H1 header parsing\n    - MINOR: proto-htx: Use the start-line flags to set the HTTP messsage ones\n    - MINOR: htx: Add BODYLESS flags on the HTX start-line and the HTTP message\n    - MINOR: proto_htx: Use full HTX messages to send 100-Continue responses\n    - MINOR: proto_htx: Use full HTX messages to send 103-Early-Hints responses\n    - MINOR: proto_htx: Use full HTX messages to send 401 and 407 responses\n    - MINOR: proto_htx: Send valid HTX message when redir mode is enabled on a server\n    - MINOR: proto_htx: Send valid HTX message to send 30x responses\n    - MEDIUM: proto_htx: Convert all HTTP error messages into HTX\n    - MINOR: mux-h1: Process conn_mode on the EOH when no connection header is found\n    - MINOR: mux-h1: Change client conn_mode on an explicit close for the response\n    - MINOR: mux-h1: Capture bad H1 messages\n    - MAJOR: filters: Adapt filters API to be compatible with the HTX represenation\n    - MEDIUM: proto_htx/filters: Add data filtering during the forwarding\n    - MINOR: flt_trace: Adapt to be compatible with the HTX representation\n    - MEDIUM: compression: Adapt to be compatible with the HTX representation\n    - MINOR: h2: implement H2->HTX request header frame transcoding\n    - MEDIUM: mux-h2: register mux for both HTTP and HTX modes\n    - MEDIUM: mux-h2: make h2_rcv_buf() support HTX transfers\n    - MEDIUM: mux-h2: make h2_snd_buf() HTX-aware\n    - MEDIUM: mux-h2: add basic H2->HTX transcoding support for headers\n    - MEDIUM: mux-h2: implement emission of H2 headers frames from HTX blocks\n    - MEDIUM: mux-h2: implement the emission of DATA frames from HTX DATA blocks\n    - MEDIUM: mux-h2: support passing H2 DATA frames to HTX blocks\n    - BUG/MINOR: cfgparse: Fix the call to post parser of the last sections parsed\n    - BUG/MEDIUM: mux-h2: don't lose the first response header in HTX mode\n    - BUG/MEDIUM: mux-h2: remove the HTX EOM block on H2 response headers\n    - MINOR: listener: the mux_proto entry in the bind_conf is const\n    - MINOR: connection: create conn_get_best_mux_entry()\n    - MINOR: server: the mux_proto entry in the server is const\n    - MINOR: config: make sure to associate the proper mux to bind and servers\n    - MINOR: hpack: add \":path\" to the list of common header fields\n    - MINOR: h2: add new functions to produce an HTX message from an H2 response\n    - MINOR: mux-h2: mention that the mux is compatible with both sides\n    - MINOR: mux-h2: implement an outgoing stream allocator : h2c_bck_stream_new()\n    - MEDIUM: mux-h2: start to create the outgoing mux\n    - MEDIUM: mux-h2: implement encoding of H2 request on the backend side\n    - MEDIUM: mux-h2: make h2_frt_decode_headers() direction-agnostic\n    - MEDIUM: mux-h2: make h2_process_demux() capable of processing responses as well\n    - MEDIUM: mux-h2: Implement h2_attach().\n    - MEDIUM: mux-h2: Don't bother flagging outgoing connections as TOOMANY.\n    - REGTEST: Fix LEVEL 4 script 0 of \"connection\" module.\n    - MINOR: connection: Fix a comment.\n    - MINOR: mux: add a \"max_streams\" method.\n    - MEDIUM: servers: Add a way to keep idle connections alive.\n    - CLEANUP: fix typos in the htx subsystem\n    - CLEANUP: Fix typo in the chunk headers file\n    - CLEANUP: Fix typos in the h1 subsystem\n    - CLEANUP: Fix typos in the h2 subsystem\n    - CLEANUP: Fix a typo in the mini-clist header\n    - CLEANUP: Fix a typo in the proto_htx subsystem\n    - CLEANUP: Fix typos in the proto_tcp subsystem\n    - CLEANUP: Fix a typo in the signal subsystem\n    - CLEANUP: Fix a typo in the session subsystem\n    - CLEANUP: Fix a typo in the queue subsystem\n    - CLEANUP: Fix typos in the shctx subsystem\n    - CLEANUP: Fix typos in the socket pair protocol subsystem\n    - CLEANUP: Fix typos in the map management functions\n    - CLEANUP: Fix typo in the fwrr subsystem\n    - CLEANUP: Fix typos in the cli subsystem\n    - CLEANUP: Fix typo in the 51d subsystem\n    - CLEANUP: Fix a typo in the base64 subsystem\n    - CLEANUP: Fix a typo in the connection subsystem\n    - CLEANUP: Fix a typo in the protocol header file\n    - CLEANUP: Fix a typo in the checks header file\n    - CLEANUP: Fix typos in the file descriptor subsystem\n    - CLEANUP: Fix a typo in the listener subsystem\n    - BUG/MINOR: lb-map: fix unprotected update to server's score\n    - BUILD: threads: fix minor build warnings when threads are disabled\n\n2018/11/25 : 1.9-dev8\n    - REORG: config: extract the global section parser into cfgparse-global\n    - REORG: config: extract the proxy parser into cfgparse-listen.c\n    - BUILD: update the list of supported targets and compilers in makefile and readme\n    - BUILD: reorder the objects in the makefile\n    - BUILD: Makefile: make \"V=1\" show some of the commands that are executed\n    - BUILD: Makefile: add the quiet mode to a few more targets\n    - BUILD: Makefile: add \"$(Q)\" to clean, tags and cscope targets\n    - BUILD: Makefile: switch to quiet mode by default for CC/LD/AR\n    - MINOR: cli: format `show proc` to be more readable\n    - MINOR: cli: displays uptime in `show proc`\n    - MINOR: cli: show master information in 'show proc'\n    - BUG/MEDIUM: hpack: fix encoding of \"accept-ranges\" field\n    - MAJOR: mux-h1: Remove the rxbuf and decode HTTP messages in channel's buffer\n    - BUG/MINOR: mux-h1: Enable keep-alive on server side\n    - BUG/MEDIUM: mux-h1: Fix freeze when the kernel splicing is used\n    - BUG/MEDIUM: mux-h1: Don't set the flag CS_FL_RCV_MORE when nothing was parsed\n    - BUG/MINOR: stats/htx: Remove channel's output when the request is eaten\n    - BUG/MINOR: proto_htx: Fix request/response synchronisation on error\n    - MINOR: stream-int: Notify caller when an error is reported after a rcv_pipe()\n    - MINOR: stream-int: Notify caller when an error is reported after a rcv_buf()\n    - BUG/MINOR: stream-int: Don't call snd_buf() if there are still data in the pipe\n    - MINOR: stream-int: remove useless checks on CS and conn flags in si_cs_send()\n    - BUG/MINOR: config: Be aware of the HTX during the check of mux protocols\n    - BUG/MINOR: mux-htx: Fix bad test on h1c flags in h1_recv_allowed()\n    - MEDIUM: mworker: wait mode use standard init code path\n    - MINOR: log: introduce ha_notice()\n    - MINOR: mworker: use ha_notice to announce a new worker\n    - BUG/MEDIUM: http_fetch: Make sure name is initialized before http_find_header.\n    - MINOR: cli: add mworker_accept_wrapper to 'show fd'\n    - MEDIUM: signal: signal_unregister() removes every handlers\n    - BUG/MEDIUM: mworker: unregister the signals of main()\n    - MINOR: cli: add a few missing includes in proto/cli.h\n    - REORG: time/activity: move activity measurements to activity.{c,h}\n    - MINOR: activity: report the average loop time in \"show activity\"\n    - MINOR: activity: add configuration and CLI support for \"profiling.tasks\"\n    - MEDIUM: tasks: collect per-task CPU time and latency\n    - MINOR: sample: add cpu_calls, cpu_ns_avg, cpu_ns_tot, lat_ns_avg, lat_ns_tot\n    - MINOR: cli/activity: rename the stolen CPU time fields to mention milliseconds\n    - BUG/MINOR: cli: Fix memory leak\n    - BUG/MINOR: mworker: fix FD leak and memory leak in error path\n    - MINOR: poller: move the call of tv_update_date() back to the pollers\n    - MINOR: polling: add an option to support busy polling\n    - MINOR: server: Add \"alpn\" and \"npn\" keywords.\n    - MEDIUM: connection: Don't bother reactivating polling after connection retry.\n    - MAJOR: connections: Defer mux creation for outgoing connection if alpn is set.\n    - MEDIUM: ssl: Add ssl_bc_alpn and ssl_bc_npn sample fetches.\n    - MINOR: servers: Free [idle|safe|priv]_conns on exit.\n    - REGTEST: add the option to test only a specific set of files\n    - REGTEST: add a test for connections to a \"dispatch\" address\n    - BUG/MEDIUM: connections: Don't reset the conn flags in *connect_server().\n    - MINOR: server: Only defined conn_complete_server if USE_OPENSSL is set.\n    - BUG/MEDIUM: servers: Don't check if we have a conn_stream too soon.\n    - BUG/MEDIUM: sessions: Set sess->origin to NULL if the origin was destroyed.\n    - MEDIUM: servers: Store the connection in the SI until we have a mux.\n    - BUG/MEDIUM: h2: wake the processing task up after demuxing\n    - BUG/MEDIUM: h2: restart demuxing after releasing buffer space\n\n2018/11/18 : 1.9-dev7\n    - BUILD: cache: fix a build warning regarding too large an integer for the age\n    - CLEANUP: fix typos in the comments of the Makefile\n    - CLEANUP: fix a typo in a comment for the contrib/halog subsystem\n    - CLEANUP: fix typos in comments for the contrib/modsecurity subsystem\n    - CLEANUP: fix typos in comments for contrib/spoa_example\n    - CLEANUP: fix typos in comments for contrib/wireshark-dissectors\n    - DOC: Fix typos in README and CONTRIBUTING\n    - MINOR: log: slightly improve error message syntax on log failure\n    - DOC: logs: the format directive was missing from the second log part\n    - MINOR: log: report the number of dropped logs in the stats\n    - MEDIUM: log: add support for logging to existing file descriptors\n    - MEDIUM: log: support a new \"short\" format\n    - MEDIUM: log: add a new \"raw\" format\n    - BUG/MEDIUM: stream-int: change the way buffer room is requested by a stream-int\n    - BUG/MEDIUM: stream-int: convert some co_data() checks to channel_is_empty()\n    - MINOR: namespaces: don't build namespace.c if disabled\n    - BUILD/MEDIUM: threads/affinity: DragonFly build fix\n    - MINOR: http: Add new \"early-hint\" http-request action.\n    - MINOR: http: Make new \"early-hint\" http-request action really be parsed.\n    - MINOR: http: Implement \"early-hint\" http request rules.\n    - MINOR: doc: Add information about \"early-hint\" http-request action.\n    - DOC: early-hints: fix truncated line.\n    - MINOR: mworker: only close std{in,out,err} in daemon mode\n    - BUG/MEDIUM: log: don't CLOEXEC the inherited FDs\n    - BUG/MEDIUM: Make sure stksess is properly aligned.\n    - BUG/MEDIUM: stream-int: make failed splice_in always subscribe to recv\n    - BUG/MEDIUM: stream-int: clear CO_FL_WAIT_ROOM after splicing data in\n    - BUG/MINOR: stream-int: make sure not to go through the rcv_buf path after splice()\n    - CONTRIB: debug: fix build related to conn_stream flags change\n    - REGTEST: fix scripts 1 and 3 to accept development version\n    - BUG/MINOR: http_fetch: Remove the version part when capturing the request uri\n    - MINOR: http: Regroup return statements of http_req_get_intercept_rule at the end\n    - MINOR: http: Regroup return statements of http_res_get_intercept_rule at the end\n    - BUG/MINOR: http: Be sure to sent fully formed HTTP 103 responses\n    - MEDIUM: jobs: support unstoppable jobs for soft stop\n    - MEDIUM: listeners: support unstoppable listener\n    - MEDIUM: cli: worker socketpair is unstoppable\n    - BUG/MINOR: stream-int: set SI_FL_WANT_PUT in sess_establish()\n    - MINOR: stream: move the conn_stream specific calls to the stream-int\n    - BUG/MINOR: config: Copy default error messages when parsing of a backend starts\n    - CLEANUP: h2: minimum documentation for recent API changes\n    - MINOR: mux: implement a get_first_cs() method\n    - MINOR: stream-int: make conn_si_send_proxy() use cs_get_first()\n    - MINOR: stream-int: relax the forwarding rules in stream_int_notify()\n    - MINOR: stream-int: expand the flags to 32-bit\n    - MINOR: stream-int: rename SI_FL_WAIT_ROOM to SI_FL_RXBLK_ROOM\n    - MINOR: stream-int: introduce new SI_FL_RXBLK flags\n    - MINOR: stream-int: add new functions si_{rx,tx}_{blocked,endp_ready}()\n    - MINOR: stream-int: replace SI_FL_WANT_PUT with !SI_FL_RX_WAIT_EP\n    - MINOR: stream-int: use si_rx_blocked()/si_tx_blocked() to check readiness\n    - MEDIUM: stream-int: use si_rx_buff_{rdy,blk} to report buffer readiness\n    - MINOR: stream-int: replace si_{want,stop}_put() with si_rx_endp_{more,done}()\n    - MEDIUM: stream-int: update the endp polling status only at the end of si_cs_recv()\n    - MINOR: stream-int: make si_sync_recv() simply check ENDP before si_cs_recv()\n    - MINOR: stream-int: automatically mark applets as ready if they block on the channel\n    - MEDIUM: stream-int: fix the si_cant_put() calls used for end point readiness\n    - MEDIUM: stream-int: fix the si_cant_put() calls used for buffer readiness\n    - MEDIUM: stream-int: use si_rx_shut_blk() to indicate the SI is closed\n    - MEDIUM: stream-int: unconditionally call si_chk_rcv() in update and notify\n    - MEDIUM: stream-int: make use of si_rx_chan_{rdy,blk} to control the stream-int from the channel\n    - MINOR: stream-int: replace si_cant_put() with si_rx_room_{blk,rdy}()\n    - MEDIUM: connections: Wait until the connection is established to try to recv.\n    - MEDIUM: mux: Teach the mux_pt how to deal with idle connections.\n    - MINOR: mux: Add a new \"avail_streams\" method.\n    - MINOR: mux: Add a destroy() method.\n    - MINOR: sessions: Start to store the outgoing connection in sessions.\n    - MAJOR: connections: Detach connections from streams.\n    - MINOR: conn_stream: Add a flag to notify the mux it should flush its buffers\n    - MINOR: htx: Add proto_htx.c file\n    - MINOR: conn_stream: Add a flag to notify the mux it must respect the reserve\n    - MINOR: http: Add standalone functions to parse a start-line or a header\n    - MINOR: http: Call http_send_name_header with the stream instead of the txn\n    - MINOR: conn_stream: Add a flag to notify the SI some data were received\n    - MINOR: http: Add macros to check if a stream uses the HTX representation\n    - MEDIUM: proto_htx: Add HTX analyzers and use it when the mux H1 is used\n    - MEDIUM: mux-h1: Add dummy mux to handle HTTP/1.1 connections\n    - MEDIUM: mux-h1: Add parsing of incoming and ougoing HTTP messages\n    - MAJOR: mux-h1/proto_htx: Handle keep-alive connections in the mux\n    - MEDIUM: mux-h1: Add support of the kernel TCP splicing to forward data\n    - MEDIUM: htx: Add API to deal with the internal representation of HTTP messages\n    - MINOR: http_htx: Add functions to manipulate HTX messages in http_htx.c\n    - MINOR: proto_htx: Add some functions to handle HTX messages\n    - MAJOR: mux-h1/proto_htx: Switch mux-h1 and HTX analyzers on the HTX representation\n    - MINOR: http_htx: Add functions to replace part of the start-line\n    - MINOR: http_htx: Add functions to retrieve a specific occurrence of a header\n    - MINOR: proto_htx: Rewrite htx_apply_redirect_rule to handle HTX messages\n    - MINOR: proto_htx: Add the internal function htx_del_hdr_value\n    - MINOR: proto_htx: Add the internal function htx_fmt_res_line\n    - MINOR: proto_htx: Add functions htx_transform_header and htx_transform_header_str\n    - MINOR: proto_htx: Add functions htx_req_replace_stline and htx_res_set_status\n    - MINOR: proto_htx: Add function to build and send HTTP 103 responses\n    - MINOR: proto_htx: Add functions htx_req_get_intercept_rule and htx_res_get_intercept_rule\n    - MINOR: proto_htx: Add functions to apply req* and rsp* rules on HTX messages\n    - MINOR: proto_htx: Add functions to manage cookies on HTX messages\n    - MINOR: proto_htx: Add functions to check the cacheability of HTX messages\n    - MINOR: proto_htx: Add functions htx_send_name_header\n    - MINOR: proto_htx: Add functions htx_perform_server_redirect\n    - MINOR: proto_htx: Add functions to handle the stats applet\n    - MEDIUM: proto_htx: Adapt htx_process_req_common to handle HTX messages\n    - MEDIUM: proto_htx: Adapt htx_process_request to handle HTX messages\n    - MINOR: proto_htx: Adapt htx_process_tarpit to handle HTX messages\n    - MEDIUM: proto_htx: Adapt htx_wait_for_request_body to handle HTX messages\n    - MEDIUM: proto_htx: Adapt htx_process_res_common to handle HTX messages\n    - MINOR: http_fetch: Add smp_prefetch_htx\n    - MEDIUM: http_fetch: Adapt all fetches to handle HTX messages\n    - MEDIUM: mux-h1: Wait for connection establishment before consuming channel's data\n    - MINOR: stats/htx: Adapt the stats applet to handle HTX messages\n    - MINOR: stream: Don't reset sov value with HTX messages\n    - MEDIUM: mux-h1: Handle errors and timeouts in the stream\n    - MINOR: filters/htx: Forbid filters when the HTX is enabled on a proxy\n    - MINOR: lua/htx: Forbid lua usage when the HTX is enabled on a proxy\n    - CLEANUP: Fix some typos in the haproxy subsystem\n    - CLEANUP: Fix typos in the dns subsystem\n    - CLEANUP: Fix typos in the pattern subsystem\n    - CLEANUP: fix 2 typos in the xxhash subsystem\n    - CLEANUP: fix a few typos in the comments of the server subsystem\n    - CLEANUP: fix a misspell in tests/filltab25.c\n    - CLEANUP: fix a typo found in the stream subsystem\n    - CLEANUP: fix typos in comments in ebtree\n    - CLEANUP: fix typos in reg-tests\n    - CLEANUP: fix typos in the comments of the vars subsystem\n    - CLEANUP: fix typos in the hlua_fcn subsystem\n    - CLEANUP: fix typos in the proto_http subsystem\n    - CLEANUP: fix typos in the proxy subsystem\n    - CLEANUP: fix typos in the ssl_sock subsystem\n    - DOC: Fix typos in different subsections of the documentation\n    - DOC: fix a few typos in the documentation\n    - MINOR: Fix an error message thrown when we run out of memory\n    - MINOR: Fix typos in error messages in the proxy subsystem\n    - MINOR: fix typos in the examples files\n    - CLEANUP: Fix a typo in the stats subsystem\n    - CLEANUP: Fix typos in the acl subsystem\n    - CLEANUP: Fix typos in the cache subsystem\n    - CLEANUP: Fix typos in the cfgparse subsystem\n    - CLEANUP: Fix typos in the filters subsystem\n    - CLEANUP: Fix typos in the http subsystem\n    - CLEANUP: Fix typos in the log subsystem\n    - CLEANUP: Fix typos in the peers subsystem\n    - CLEANUP: Fix typos in the regex subsystem\n    - CLEANUP: Fix typos in the sample subsystem\n    - CLEANUP: Fix typos in the spoe subsystem\n    - CLEANUP: Fix typos in the standard subsystem\n    - CLEANUP: Fix typos in the stick_table subsystem\n    - CLEANUP: Fix typos in the task subsystem\n    - MINOR: Fix typo in error message in the standard subsystem\n    - CLEANUP: fix typos in the comments of hlua\n    - MINOR: Fix typo in the error 500 output of hlua\n    - MINOR: Fix a typo in a warning message in the spoe subsystem\n\n2018/11/11 : 1.9-dev6\n    - BUG/MEDIUM: tools: fix direction of my_ffsl()\n    - BUG/MINOR: cli: forward the whole command on master CLI\n    - BUG/MEDIUM: auth/threads: use of crypt() is not thread-safe\n    - MINOR: compat: automatically detect support for crypt_r()\n    - MEDIUM: auth/threads: make use of crypt_r() on systems supporting it\n    - DOC: split the http-request actions in their own section\n    - DOC: split the http-response actions in their own section\n    - BUG/MAJOR: stream-int: don't call si_cs_recv() in stream_int_chk_rcv_conn()\n    - BUG/MINOR: tasks: make sure wakeup events are properly reported to subscribers\n    - MINOR: stats: report the number of active jobs and listeners in \"show info\"\n    - MINOR: stats: report the number of active peers in \"show info\"\n    - MINOR: stats: report the number of currently connected peers\n    - MINOR: cli: show the number of reload in 'show proc'\n    - MINOR: cli: can't connect to the target CLI\n    - MEDIUM: mworker: does not create the CLI proxy when no listener\n    - MINOR: mworker: displays more information when leaving\n    - MEDIUM: mworker: exit with the incriminated exit code\n    - MINOR: mworker: displays a message when a worker is forked\n    - MEDIUM: mworker: leave when the master die\n    - CLEANUP: stream-int: retro-document si_cs_io_cb()\n    - BUG/MEDIUM: mworker: does not abort() in mworker_pipe_register()\n    - BUG/MEDIUM: stream-int: don't wake up for nothing during SI_ST_CON\n    - BUG/MEDIUM: cli: crash when trying to access a worker\n    - DOC: restore note about \"independant\" typo\n    - MEDIUM: stream: implement stream_buf_available()\n    - MEDIUM: appctx: check for allocation attempts in buffer allocation callbacks\n    - MINOR: stream-int: rename si_applet_{want|stop|cant}_{get|put}\n    - MINOR: stream-int: add si_done_{get,put} to indicate that we won't do it anymore\n    - MINOR: stream-int: use si_cant_put() instead of setting SI_FL_WAIT_ROOM\n    - MINOR: stream-int: make use of si_done_{get,put}() in shut{w,r}\n    - MINOR: stream-int: make it clear that si_ops cannot be null\n    - MEDIUM: stream-int: temporarily make si_chk_rcv() take care of SI_FL_WAIT_ROOM\n    - MINOR: stream-int: factor the SI_ST_EST state test into si_chk_rcv()\n    - MEDIUM: stream-int: make SI_FL_WANT_PUT reflect CF_DONT_READ\n    - MEDIUM: stream-int: always call si_chk_rcv() when we make room in the buffer\n    - MEDIUM: stream-int: make si_chk_rcv() check that SI_FL_WAIT_ROOM is cleared\n    - MINOR: stream-int: replace si_update() with si_update_both()\n    - MEDIUM: stream-int: make stream_int_update() aware of the lower layers\n    - CLEANUP: stream-int: remove the now unused si->update() function\n    - MEDIUM: stream-int: Rely only on SI_FL_WAIT_ROOM to stop data receipt\n    - MEDIUM: stream-int: Try to read data even if channel's buffer seems to be full\n    - BUG/MINOR: config: better detect the presence of the h2 pattern in npn/alpn\n\n2018/10/28 : 1.9-dev5\n    - BUILD: Makefile: add the new ERR variable to force -Werror\n    - MINOR: freq_ctr: add swrate_add_scaled() to work with large samples\n    - MINOR: stream_interface: Avoid calling si_cs_send/recv if not needed.\n    - CLEANUP: http: Remove the unused function http_find_header\n    - MINOR: h1: Export some functions parsing the value of some HTTP headers\n    - BUG/MEDIUM: stream-int: don't set SI_FL_WAIT_ROOM on CF_READ_DONTWAIT\n    - MINOR: proxy: add a new option \"http-use-htx\"\n    - BUG/MEDIUM: pools: fix the minimum allocation size\n    - MINOR: shctx: Shared objects block by block allocation.\n    - MINOR: cache: Larger HTTP objects caching.\n    - MINOR: shctx: Add a maximum object size parameter.\n    - MINOR: cache: Add \"max-object-size\" option.\n    - DOC: Update about the cache support for big objects.\n    - BUG/MINOR: cache: Crashes with \"total-max-size\" > 2047(MB).\n    - BUG/MINOR: cache: Wrong usage of shctx_init().\n    - BUG/MINOR: ssl: Wrong usage of shctx_init().\n    - MINOR: cache: Avoid usage of atoi() when parsing \"max-object-size\".\n    - MINOR: shctx: Change max. object size type to unsigned int.\n    - DOC: cache: Missing information about \"total-max-size\" and \"max-object-size\"\n    - CLEANUP: tools: fix misleading comment above function LIM2A\n    - MEDIUM: channel: merge back flags CF_WRITE_PARTIAL and CF_WRITE_EVENT\n    - BUG/MINOR: only mark connections private if NTLM is detected\n    - BUG/MINOR: only auto-prefer last server if lb-alg is non-deterministic\n    - MINOR: stream: don't prune variables if the list is empty\n    - MINOR: stream-int: add si_alloc_ibuf() to ease input buffer allocation\n    - MEDIUM: stream-int: replace channel_alloc_buffer() with si_alloc_ibuf() everywhere\n    - MEDIUM: stream: always call si_cs_recv() after a failed buffer allocation\n    - MEDIUM: stream: don't try to send first in process_stream()\n    - MEDIUM: stream-int: make si_update() synchronize flag changes before the I/O\n    - MEDIUM: stream-int: call si_cs_process() in stream_int_update_conn\n    - MINOR: stream-int: don't needlessly call tasklet_wakeup() in stream_int_chk_snd_conn()\n    - MINOR: stream-int: make stream_int_notify() not wake the tasklet up\n    - MINOR: stream-int: don't needlessly call si_cs_send() in si_cs_process()\n    - MINOR: mworker: number of reload in the life of a worker\n    - MEDIUM: mworker: each worker socketpair is a CLI listener\n    - REORG: mworker: move struct mworker_proc to global.h\n    - MINOR: server: export new_server() function\n    - MEDIUM: mworker: move proc_list gen before proxies startup\n    - MEDIUM: mworker: add proc_list in global.h\n    - MEDIUM: mworker: proxy for the master CLI\n    - MEDIUM: mworker: create CLI listeners from argv[]\n    - MEDIUM: cli: disable some keywords in the master\n    - MEDIUM: mworker: find the server ptr using a CLI prefix\n    - MEDIUM: cli: 'show proc' displays processus\n    - MEDIUM: cli: implement 'mode cli' proxy analyzers\n    - MINOR: cli: displays sockpair@ in \"show cli sockets\"\n    - MEDIUM: cli: enable \"show cli sockets\" for the master\n    - MINOR: cli: put @master @<relative pid> @!<pid> in the help\n    - MEDIUM: listeners: set O_CLOEXEC on the accepted FDs\n    - MEDIUM: mworker: stop the master proxy in the workers\n    - MEDIUM: channel: reorder the channel analyzers for the cli\n    - MEDIUM: cli: write a prompt for the CLI proxy of the master\n    - MINOR: cli: helper to write an response message and close\n    - MINOR: cache: Add \"Age\" header.\n    - REGTEST: make the IP+port logging test more reliable\n    - BUG/MINOR: memory: make the thread-local cache allocator set the debugging link\n    - BUG/MAJOR: http: http_txn_get_path() may deference an inexisting buffer\n    - BUG/MINOR: backend: assign the wait list after the error check\n\n2018/10/21 : 1.9-dev4\n    - BUILD: Allow configuration of pcre-config path\n    - DOC: clarify force-private-cache is an option\n    - BUG/MINOR: connection: avoid null pointer dereference in send-proxy-v2\n    - REORG: http: move the code to different files\n    - REORG: http: move HTTP rules parsing to http_rules.c\n    - CLEANUP: http: remove some leftovers from recent cleanups\n    - BUILD: Makefile: add a \"make opts\" target to simply show the build options\n    - BUILD: Makefile: speed up compiler options detection\n    - BUG/MINOR: backend: check that the mux installed properly\n    - BUG/MEDIUM: h2: check that the connection is still valid at the end of init()\n    - BUG/MEDIUM: h2: make h2_stream_new() return an error on memory allocation failure\n    - REGTEST/MINOR: compatibility: use unix@ instead of abns@ sockets\n    - MINOR: ssl: cleanup old openssl API call\n    - MINOR: ssl: generate-certificates for BoringSSL\n    - BUG/MEDIUM: buffers: Make sure we don't wrap in ci_insert_line2/b_rep_blk.\n    - MEDIUM: ssl: add support for ciphersuites option for TLSv1.3\n    - CLEANUP: haproxy: Remove unused variable\n    - CLEANUP: h1: Fix debug warnings for h1 headers\n    - CLEANUP: stick-tables: Remove unneeded double (()) around conditional clause\n    - MEDIUM: task: perform a single tree lookup per run queue batch\n    - BUG/MEDIUM: Cur/CumSslConns counters not threadsafe.\n    - BUG/MINOR: threads: move declaration of capabilities to config.h\n    - OPTIM: tools: optimize my_ffsl() for x86_64\n    - BUG/MINOR: h2: null-deref\n    - BUG/MINOR: checks: queues null-deref\n    - MINOR: connections: Introduce an unsubscribe method.\n    - MEDIUM: connections: Change struct wait_list to wait_event.\n    - BUG/MEDIUM: h2: Make sure we're not in the send list on flow control.\n    - BUG/MEDIUM: mworker: segfault receiving SIGUSR1 followed by SIGTERM.\n    - BUG/MEDIUM: stream: Make sure to unsubscribe before si_release_endpoint.\n    - MINOR: http: Move comment about some HTTP macros in the right header file\n    - MINOR: stats: Add missing include\n    - MINOR: http: Export some functions and do cleanup to prepare HTTP refactoring\n    - MEDIUM: http: Ignore http-pretend-keepalive option on frontend\n    - MEDIUM: http: Ignore http-tunnel option on backend\n    - MINOR: http: Use same flag for httpclose and forceclose options\n    - MINOR: h1: Add EOH marker during headers parsing\n    - MINOR: conn-stream: Add CL_FL_NOT_FIRST flag\n    - MINOR: h1: Change the union h1_sl to use indirect strings to store infos\n    - MINOR: h1: Add the flag H1_MF_NO_PHDR to not add pseudo-headers during parsing\n    - MINOR: log: make sess_log() support sess=NULL\n    - MINOR: chunk: add chunk_cpy() and chunk_cat()\n    - MEDIUM: h2: stop relying on H2_SS_IDLE / H2_SS_CLOSED\n    - CLEANUP: h2: rename h2c_snd_settings() to h2c_send_settings()\n    - MINOR: h2: don't try to send data before preface\n    - MINOR: h2: unify the mux init function\n    - MINOR: h2: retrieve the front proxy from the caller instead of the session\n    - MINOR: h2: split h2c_stream_new() into h2s_new() + h2c_frt_stream_new()\n    - MINOR: h2: add a new flag to quickly distinguish front vs back connection\n    - BUG/MEDIUM: mworker: don't poll on LI_O_INHERITED listeners\n    - BUG/MEDIUM: stream: don't crash on out-of-memory\n    - BUILD: compiler: add a new statement \"__unreachable()\"\n    - BUILD: lua: silence some compiler warnings about potential null derefs\n    - BUILD: ssl: fix null-deref warning in ssl_fc_cipherlist_str sample fetch\n    - BUILD: ssl: fix another null-deref warning in ssl_sock_switchctx_cbk()\n    - BUILD: stick-table: make sure not to fail on task_new() during initialization\n    - BUILD: peers: check allocation error during peers_init_sync()\n    - MINOR: tools: add a new function atleast2() to test masks for more than 1 bit\n    - MINOR: config: use atleast2() instead of my_popcountl() where relevant\n    - MEDIUM: fd/threads: only grab the fd's lock if the FD has more than one thread\n    - MAJOR: tasks: create per-thread wait queues\n    - OPTIM: tasks: group all tree roots per cache line\n    - DOC: Fix a few typos\n    - MINOR: pools: allocate most memory pools from an array\n    - MINOR: pools: split pool_free() in the lockfree variant\n    - MEDIUM: pools: implement a thread-local cache for pool entries\n    - BUG/MEDIUM: threads: fix thread_release() at the end of the rendez-vous point\n    - Revert \"BUILD: lua: silence some compiler warnings about potential null derefs\"\n    - BUILD: lua: silence some compiler warnings about potential null derefs (#2)\n    - MINOR: lua: all functions calling lua_yieldk() may return\n    - BUILD: lua: silence some compiler warnings after WILL_LJMP\n    - BUILD: Makefile: silence an option conflict warning with clang\n    - MINOR: server: Use memcpy() instead of strncpy().\n    - CLEANUP: state-file: make the path concatenation code a bit more consistent\n    - MINOR: build: Disable -Wstringop-overflow.\n    - MINOR: cfgparse: Write 130 as 128 as 0x82 and 0x80.\n    - MINOR: peers: use defines instead of enums to appease clang.\n    - DOC: fix reference to map files in MAINTAINERS\n    - MINOR: fd: centralize poll timeout computation in compute_poll_timeout()\n    - MINOR: poller: move time and date computation out of the pollers\n    - BUILD: memory: fix pointer declaration for atomic CAS\n    - BUILD: Makefile: add USE_RT to pass -lrt for clock_gettime() and friends\n    - MINOR: time: add now_mono_time() and now_cpu_time()\n    - MEDIUM: time: measure the time stolen by other threads\n    - BUILD: memory: fix free_list pointer declaration again for atomic CAS\n    - BUILD: compiler: rename __unreachable() to my_unreachable()\n    - BUG/MEDIUM: pools: Fix the usage of mmap()) with DEBUG_UAF.\n    - BUILD: memory: fix free_list pointer declaration again for atomic CAS\n    - BUG/MEDIUM: h2: Close connection if no stream is left an GOAWAY was sent.\n    - BUG/MEDIUM: connections: Remove subscription if going in idle mode.\n    - BUG/MEDIUM: stream: Make sure polling is right on retry.\n    - MINOR: h2: Make sure to return 1 in h2_recv() when needed.\n    - MEDIUM: connections: Don't directly mess with the polling from the upper layers.\n    - MINOR: streams: Call tasklet_free() after si_release_endpoint().\n    - MINOR: connection: Add a SUB_CALL_UNSUBSCRIBE event.\n    - MINOR: h2: Don't run tasks that are waiting to send if mux in full.\n    - MINOR: ebtree: save 8 bytes in struct eb32sc_node\n\n2018/09/29 : 1.9-dev3\n    - BUG/MINOR: h1: don't consider the status for each header\n    - MINOR: h1: report in the h1m struct if the HTTP version is 1.1 or above\n    - MINOR: h1: parse the Connection header field\n    - DOC: Fix typos in lua documentation\n    - MINOR: h1: Add H1_MF_XFER_LEN flag\n    - MINOR: http: add http_hdr_del() to remove a header from a list\n    - MINOR: h1: add headers to the list after controls, not before\n    - MEDIUM: h1: better handle transfer-encoding vs content-length\n    - MEDIUM: h1: deduplicate the content-length header\n    - BUG/MEDIUM: patterns: fix possible double free when reloading a pattern list\n    - BUG/MEDIUM: h1: Really skip all updates when incomplete messages are parsed\n    - CLEANUP/CONTRIB: hpack: remove some h1 build warnings\n    - BUG/MINOR: tools: fix set_net_port() / set_host_port() on IPv4\n    - BUG/MINOR: cli: make sure the \"getsock\" command is only called on connections\n    - MINOR: stktable: provide an unchecked version of stktable_data_ptr()\n    - MINOR: stream-int: make si_appctx() never fail\n    - BUILD: ssl_sock: remove build warnings on potential null-derefs\n    - BUILD: stats: remove build warnings on potential null-derefs\n    - BUILD: stream: address null-deref build warnings at -Wextra\n    - BUILD: http: address a couple of null-deref warnings at -Wextra\n    - BUILD: log: silent build warnings due to unchecked __objt_{server,applet}\n    - BUILD: dns: fix null-deref build warning at -Wextra\n    - BUILD: checks: silence a null-deref build warning at -Wextra\n    - BUILD: connection: silence a couple of null-deref build warnings at -Wextra\n    - BUILD: backend: fix 3 build warnings related to null-deref at -Wextra\n    - BUILD: sockpair: silence a build warning at -Wextra\n    - BUILD: build with -Wextra and sort out certain warnings\n    - BUG/CRITICAL: hpack: fix improper sign check on the header index value\n    - BUG/MEDIUM: http: Don't parse chunked body if there is no input data\n    - DOC: Update configuration doc about the maximum number of stick counters.\n    - BUG/MEDIUM: process_stream: Don't use si_cs_io_cb() in process_stream().\n    - MINOR: h2/stream_interface: Reintroduce te wake() method.\n    - BUG/MEDIUM: h2: Wake the task instead of calling h2_recv()/h2_process().\n    - BUG/MEDIUM: process_stream(): Don't wake the task if no new data was received.\n    - MEDIUM: lua: Add stick table support for Lua.\n\n2018/09/12 : 1.9-dev2\n    - BUG/MINOR: buffers: Fix b_slow_realign when a buffer is realign without output\n    - BUG/MEDIUM: threads: fix the no-thread case after the change to the sync point\n    - BUG/MEDIUM: servers: check the queues once enabling a server\n    - BUG/MEDIUM: queue: prevent a backup server from draining the proxy's connections\n    - MEDIUM: mux: Remove const on the buffer in mux->snd_buf()\n    - CLEANUP: backend: Move mux install to call it at only one place\n    - MINOR: conn_stream: add an tx buffer to the conn_stream\n    - MINOR: conn_stream: add cs_send() as a default snd_buf() function\n    - MINOR: backend: Try to find the best mux for outgoing connections\n    - MEDIUM: backend: don't rely on mux_pt_ops in connect_server()\n    - MINOR: mux: Add info about the supported side in alpn_mux_list structure\n    - MINOR: mux: Unlink ALPN and multiplexers to rather speak of mux protocols\n    - MINOR: mux: Print the list of existing mux protocols during HA startup\n    - MEDIUM: checks: use the new rendez-vous point to spread check result\n    - MEDIUM: haproxy: don't use sync_poll_loop() anymore in the main loop\n    - MINOR: threads: remove the previous synchronization point\n    - MAJOR: server: make server state changes synchronous again\n    - CLEANUP: server: remove the update list and the update lock\n    - BUG/MINOR: threads: Remove the unexisting lock label \"UPDATED_SERVERS_LOCK\"\n    - BUG/MEDIUM: stream_int: Don't check CO_FL_SOCK_RD_SH flag to trigger cs receive\n    - MINOR: mux: Change get_mux_proto to get an ist as parameter\n    - MINOR: mux: Improve the message with the list of existing mux protocols\n    - MINOR: mux/frontend: Add 'proto' keyword to force the mux protocol\n    - MINOR: mux/server: Add 'proto' keyword to force the multiplexer's protocol\n    - MEDIUM: mux: Use the mux protocol specified on bind/server lines\n    - BUG/MEDIUM: connection/mux: take care of serverless proxies\n    - MINOR: queue: make sure the pendconn is released before logging\n    - MINOR: stream: rename {srv,prx}_queue_size to *_queue_pos\n    - MINOR: queue: store the queue index in the stream when enqueuing\n    - MINOR: queue: replace the linked list with a tree\n    - MEDIUM: add set-priority-class and set-priority-offset\n    - MEDIUM: queue: adjust position based on priority-class and priority-offset\n    - DOC: update the roadmap about priority queues\n    - BUG/MINOR: ssl: empty connections reported as errors.\n    - MINOR: connections: Make rcv_buf mandatory and nuke cs_recv().\n    - MINOR: connections: Move rxbuf from the conn_stream to the h2s.\n    - MINOR: connections: Get rid of txbuf.\n    - MINOR: tasks: Allow tasklet_wakeup() to wakeup a task.\n    - MINOR: connections/mux: Add the wait reason(s) to wait_list.\n    - MINOR: stream_interface: Don't use si_cs_send() as a task handler.\n    - MINOR: stream_interface: Give stream_interface its own wait_list.\n    - MINOR: mux_h2: Don't use h2_send() as a callback.\n    - MINOR: checks: Add event_srv_chk_io().\n    - BUG/MEDIUM: tasks: Don't insert in the global rqueue if nbthread == 1\n    - BUG/MEDIUM: sessions: Don't use t->state.\n    - BUG/MEDIUM: ssl: fix missing error loading a keytype cert from a bundle.\n    - BUG/MEDIUM: ssl: loading dh param from certifile causes unpredictable error.\n    - BUG/MINOR: map: fix map_regm with backref\n    - DOC: dns: explain set server ... fqdn requires resolver\n    - DOC: add documentation for prio_class and prio_offset sample fetches.\n    - DOC: ssl: Use consistent naming for TLS protocols\n    - DOC: update the layering design notes\n    - MINOR: tasks: Don't special-case when nbthreads == 1\n    - MINOR: fd cache: And the thread_mask with all_threads_mask.\n    - BUG/MEDIUM: lua: socket timeouts are not applied\n    - BUG/MINOR: lua: fix extra 500ms added to socket timeouts\n    - BUG/MEDIUM: server: update our local state before propagating changes\n    - BUG/MEDIUM: cli/threads: protect all \"proxy\" commands against concurrent updates\n    - DOC: server/threads: document which functions need to be called with/without locks\n    - BUG/MEDIUM: cli/threads: protect some server commands against concurrent operations\n    - BUG/MEDIUM: streams: Don't forget to remove the si from the wait list.\n    - BUG/MEDIUM: tasklets: Add the thread as active when waking a tasklet.\n    - BUG/MEDIUM: stream-int: Check if the conn_stream exist in si_cs_io_cb.\n    - BUG/MEDIUM: H2: Activate polling after successful h2_snd_buf().\n    - BUG/MEDIUM: stream_interface: Call the wake callback after sending.\n    - BUG/MAJOR: queue/threads: make pendconn_redistribute not lock the server\n    - BUG/MEDIUM: connection: don't forget to always delete the list's head\n    - BUG/MEDIUM: lb/threads: always properly lock LB algorithms on maintenance operations\n    - BUG/MEDIUM: check/threads: do not involve the rendez-vous point for status updates\n    - BUG/MINOR: chunks: do not store -1 into chunk_printf() in case of error\n    - BUG/MEDIUM: http: don't store exp_replace() result in the trash's length\n    - BUG/MEDIUM: http: don't store url_decode() result in the samples's length\n    - BUG/MEDIUM: dns: don't store dns_build_query() result in the trash's length\n    - BUG/MEDIUM: map: don't store exp_replace() result in the trash's length\n    - BUG/MEDIUM: connection: don't store recv() result into trash.data\n    - BUG/MEDIUM: cli/ssl: don't store base64dec() result in the trash's length\n    - MINOR: chunk: remove impossible tests on negative chunk->data\n    - MINOR: sample: remove impossible tests on negative smp->data.u.str.data\n    - DOC: Fix spelling error in configuration doc\n    - REGTEST/MINOR: Missing mandatory \"ignore_unknown_macro\".\n    - REGTEST/MINOR: Add a new class of regression testing files.\n    - BUG/MEDIUM: unix: provide a ->drain() function\n    - MINOR: connection: make conn_sock_drain() work for all socket families\n    - BUG/MINOR: lua: Bad HTTP client request duration.\n    - REGEST/MINOR: Add reg testing files.\n    - BUG/MEDIUM: mux_pt: dereference the connection with care in mux_pt_wake()\n    - REGTEST/MINOR: Add a reg testing file for b406b87 commit.\n    - BUG/MEDIUM: lua: reset lua transaction between http requests\n    - MINOR: add be_conn_free sample fetch\n    - MINOR: Add srv_conn_free sample fetch\n    - BUG/MEDIUM: hlua: Make sure we drain the output buffer when done.\n    - MINOR: checks: Call wake_srv_chk() when we can finally send data.\n    - BUG/MEDIUM: stream_interface: try to call si_cs_send() earlier.\n    - BUG/MAJOR: thread: lua: Wrong SSL context initialization.\n    - REGTEST/MINOR: Add a reg testing file for 3e60b11.\n    - BUG/MEDIUM: hlua: Don't call RESET_SAFE_LJMP if SET_SAFE_LJMP returns 0.\n    - REGTEST/MINOR: lua: Add reg testing files for 70d318c.\n    - BUG/MEDIUM: dns/server: fix incomatibility between SRV resolution and server state file\n    - BUG/MEDIUM: ECC cert should work with TLS < v1.2 and openssl >= 1.1.1\n    - MINOR: tools: make date2str_log() take some consts\n    - MINOR: thread: implement HA_ATOMIC_XADD()\n    - BUG/MINOR: stream: use atomic increments for the request counter\n    - BUG/MEDIUM: session: fix reporting of handshake processing time in the logs\n    - BUG/MEDIUM: h2: fix risk of memory leak on malformated wrapped frames\n    - BUG/MAJOR: buffer: fix incorrect check in __b_putblk()\n    - MINOR: log: move the log code to sess_build_logline() to add extra arguments\n    - MINOR: log: make the backend fall back to the frontend when there's no stream\n    - MINOR: log: make sess_build_logline() not dereference a NULL stream for txn\n    - MINOR: log: don't unconditionally pick log info from s->logs\n    - CLEANUP: log: make the low_level lf_{ip,port,text,text_len} functions take consts\n    - MINOR: log: keep a copy of the backend connection early in sess_build_logline()\n    - MINOR: log: do not dereference a null stream to access captures\n    - MINOR: log: be sure not to dereference a null stream for a target\n    - MINOR: log: don't check the stream-int's conn_retries if the stream is NULL\n    - MINOR: log: use NULL for the unique_id if there is no stream\n    - MINOR: log: keep a copy of s->flags early to avoid a dereference\n    - MINOR: log: use zero as the request counter if there is no stream\n    - MEDIUM: log: make sess_build_logline() support being called with no stream\n    - MINOR: log: provide a function to emit a log for a session\n    - MEDIUM: h2: produce some logs on early errors that prevent streams from being created\n    - BUG/MINOR: h1: fix buffer shift after realignment\n    - MINOR: connection: make the initialization more consistent\n    - MINOR: connection: add new function conn_get_proxy()\n    - MINOR: connection: add new function conn_is_back()\n    - MINOR: log: One const should be enough.\n    - BUG/MINOR: dns: check and link servers' resolvers right after config parsing\n    - BUG/MINOR: http/threads: atomically increment the error snapshot ID\n    - MINOR: snapshot: restart on the event ID and not the stream ID\n    - MINOR: snapshot: split the error snapshots into common and proto-specific parts\n    - MEDIUM: snapshot: start to reorder the HTTP snapshot output a little bit\n    - MEDIUM: snapshot: implement a show() callback and use it for HTTP\n    - MINOR: proxy: add a new generic proxy_capture_error()\n    - MINOR: http: make the HTTP error capture rely on the generic proxy code\n    - MINOR: http: remove the pointer to the error snapshot in http_capture_bad_message()\n    - REORG: cli: move the \"show errors\" handler from http to proxy\n    - BUG/MEDIUM: snapshot: take the proxy's lock while dumping errors\n    - MEDIUM: snapshots: dynamically allocate the snapshots\n    - MEDIUM: snapshot: merge the captured data after the descriptor\n    - MEDIUM: mworker: remove register/unregister signal functions\n    - MEDIUM: mworker: use the haproxy poll loop\n    - BUG/MINOR: mworker: no need to stop peers for each proxy\n    - MINOR: mworker: mworker_cleanlisteners() delete the listeners\n    - MEDIUM: mworker: block SIGCHLD until the master is ready\n    - MEDIUM: mworker: never block SIG{TERM,INT} during reload\n    - MEDIUM: startup: unify signal init between daemon and mworker mode\n    - MINOR: mworker: don't deinit the poller fd when in wait mode\n    - MEDIUM: mworker: master wait mode use its own initialization\n    - MEDIUM: mworker: replace the master pipe by socketpairs\n    - MINOR: mworker: keep and clean the listeners\n    - MEDIUM: threads: close the thread-waker pipe during deinit\n    - MEDIUM: mworker: call per_thread deinit in mworker_reload()\n    - REORG: http: move the HTTP semantics definitions to http.h/http.c\n    - REORG: http: move http_get_path() to http.c\n    - REORG: http: move error codes production and processing to http.c\n    - REORG: http: move the log encoding tables to log.c\n    - REORG: http: move some header value processing functions to http.c\n    - BUG/MAJOR: kqueue: Don't reset the changes number by accident.\n    - MEDIUM: protocol: use a custom AF_MAX to help protocol parser\n    - MEDIUM: protocol: sockpair protocol\n    - TESTS: add a python wrapper for sockpair@\n    - BUG/MINOR: server: Crash when setting FQDN via CLI.\n    - BUG/MINOR: h2: report asynchronous end of stream on closed connections\n    - BUILD: fix build without thread\n    - BUG/MEDIUM: tasks: Don't forget to decrement task_list_size in tasklet_free().\n    - MEDIUM: connections: Don't reset the polling flags in conn_fd_handler().\n    - MEDIUM: connections/mux: Add a recv and a send+recv wait list.\n    - MEDIUM: connections: Get rid of the recv() method.\n    - MINOR: h2: Let user of h2_recv() and h2_send() know xfer has been done.\n    - MEDIUM: h2: always subscribe to receive if allowed.\n    - MEDIUM: h2: Don't use a wake() method anymore.\n    - MEDIUM: stream_interface: Make recv() subscribe when more data is needed.\n    - MINOR: connections: Add a \"handle\" field to wait_list.\n    - MEDIUM: mux_h2: Revamp the send path when blocking.\n    - MEDIUM: stream_interfaces: Starts receiving from the upper layers.\n    - MINOR: checks: Give checks their own wait_list.\n    - MINOR: conn_streams: Remove wait_list from conn_streams.\n    - REORG: h1: create a new h1m_state\n    - MINOR: h1: add the restart offsets into struct h1m\n    - MINOR: h1: remove the unused states from h1m_state\n    - MINOR: h1: provide a distinct init() function for request and response\n    - MINOR: h1: add a message flag to indicate that a message carries a response\n    - MINOR: h2: make sure h1m->err_pos field is correct on chunk error\n    - MINOR: h1: properly pre-initialize err_pos to -2\n    - MINOR: mux_h2: replace the req,res h1 messages with a single h1 message\n    - MINOR: h2: pre-initialize h1m->err_pos to -1 on the output path\n    - MEDIUM: h1: consider err_pos before deciding to accept a header name or not\n    - MEDIUM: h1: make the parser support a pointer to a start line\n    - MEDIUM: h1: let the caller pass the initial parser's state\n    - MINOR: h1: make the message parser support a null <hdr> argument\n    - MEDIUM: h1: support partial message parsing\n    - MEDIUM: h1: remove the useless H1_MSG_BODY state\n    - MINOR: h2: store the HTTP status into the H2S, not the H1M\n    - MINOR: h1: remove the HTTP status from the H1M struct\n    - MEDIUM: h1: implement the request parser as well\n    - MINOR: h1: add H1_MF_TOLOWER to decide when to turn header names to lower case\n    - MINOR: connection: pass the proxy when creating a connection\n    - BUG/MEDIUM: h2: Don't forget to empty the wait lists on destroy.\n    - BUG/MEDIUM: h2: Don't forget to set recv_wait_list to NULL in h2_detach.\n    - BUG/MAJOR: h2: reset the parser's state on mux buffer full\n\n2018/08/02 : 1.9-dev1\n    - BUG/MEDIUM: kqueue: Don't bother closing the kqueue after fork.\n    - DOC: cache: update sections and fix some typos\n    - BUILD/MINOR: deviceatlas: enable thread support\n    - BUG/MEDIUM: tcp-check: Don't lock the server in tcpcheck_main\n    - BUG/MEDIUM: ssl: don't allocate shctx several time\n    - BUG/MEDIUM: cache: bad computation of the remaining size\n    - BUILD: checks: don't include server.h\n    - BUG/MEDIUM: stream: fix session leak on applet-initiated connections\n    - BUILD/MINOR: haproxy : FreeBSD/cpu affinity needs pthread_np header\n    - BUILD/MINOR: Makefile : enabling USE_CPU_AFFINITY\n    - BUG/MINOR: ssl: CO_FL_EARLY_DATA removal is managed by stream\n    - BUG/MEDIUM: threads/peers: decrement, not increment jobs on quitting\n    - BUG/MEDIUM: h2: don't report an error after parsing a 100-continue response\n    - BUG/MEDIUM: peers: fix some track counter rules dont register entries for sync.\n    - BUG/MAJOR: thread/peers: fix deadlock on peers sync.\n    - BUILD/MINOR: haproxy: compiling config cpu parsing handling when needed\n    - MINOR: config: report when \"monitor fail\" rules are misplaced\n    - BUG/MINOR: mworker: fix validity check for the pipe FDs\n    - BUG/MINOR: mworker: detach from tty when in daemon mode\n    - MINOR: threads: Fix pthread_setaffinity_np on FreeBSD.\n    - BUG/MAJOR: thread: Be sure to request a sync between threads only once at a time\n    - BUILD: Fix LDFLAGS vs. LIBS re linking order in various makefiles\n    - BUG/MEDIUM: checks: Be sure we have a mux if we created a cs.\n    - BUG/MINOR: hpack: fix debugging output of pseudo header names\n    - BUG/MINOR: hpack: must reject huffman literals padded with more than 7 bits\n    - BUG/MINOR: hpack: reject invalid header index\n    - BUG/MINOR: hpack: dynamic table size updates are only allowed before headers\n    - BUG/MAJOR: h2: correctly check the request length when building an H1 request\n    - BUG/MINOR: h2: immediately close if receiving GOAWAY after the last stream\n    - BUG/MINOR: h2: try to abort closed streams as soon as possible\n    - BUG/MINOR: h2: \":path\" must not be empty\n    - BUG/MINOR: h2: fix a typo causing PING/ACK to be responded to\n    - BUG/MINOR: h2: the TE header if present may only contain trailers\n    - BUG/MEDIUM: h2: enforce the per-connection stream limit\n    - BUG/MINOR: h2: do not accept SETTINGS_ENABLE_PUSH other than 0 or 1\n    - BUG/MINOR: h2: reject incorrect stream dependencies on HEADERS frame\n    - BUG/MINOR: h2: properly check PRIORITY frames\n    - BUG/MINOR: h2: reject response pseudo-headers from requests\n    - BUG/MEDIUM: h2: remove connection-specific headers from request\n    - BUG/MEDIUM: h2: do not accept upper case letters in request header names\n    - BUG/MINOR: h2: use the H2_F_DATA_* macros for DATA frames\n    - BUG/MINOR: action: Don't check http capture rules when no id is defined\n    - BUG/MAJOR: hpack: don't pretend large headers fit in empty table\n    - BUG/MINOR: ssl: support tune.ssl.cachesize 0 again\n    - BUG/MEDIUM: mworker: also close peers sockets in the master\n    - BUG/MEDIUM: ssl engines: Fix async engines fds were not considered to fix fd limit automatically.\n    - BUG/MEDIUM: checks: a down server going to maint remains definitely stucked on down state.\n    - BUG/MEDIUM: peers: set NOLINGER on the outgoing stream interface\n    - BUG/MEDIUM: h2: fix handling of end of stream again\n    - MINOR: mworker: Update messages referencing exit-on-failure\n    - MINOR: mworker: Improve wording in `void mworker_wait()`\n    - CONTRIB: halog: Add help text for -s switch in halog program\n    - BUG/MEDIUM: email-alert: don't set server check status from a email-alert task\n    - BUG/MEDIUM: threads/vars: Fix deadlock in register_name\n    - MINOR: systemd: remove comment about HAPROXY_STATS_SOCKET\n    - DOC: notifications: add precisions about thread usage\n    - BUG/MEDIUM: lua/notification: memory leak\n    - MINOR: conn_stream: add new flag CS_FL_RCV_MORE to indicate pending data\n    - BUG/MEDIUM: stream-int: always set SI_FL_WAIT_ROOM on CS_FL_RCV_MORE\n    - BUG/MEDIUM: h2: automatically set CS_FL_RCV_MORE when the output buffer is full\n    - BUG/MEDIUM: h2: enable recv polling whenever demuxing is possible\n    - BUG/MEDIUM: h2: work around a connection API limitation\n    - BUG/MEDIUM: h2: debug incoming traffic in h2_wake()\n    - MINOR: h2: store the demux padding length in the h2c struct\n    - BUG/MEDIUM: h2: support uploading partial DATA frames\n    - MINOR: h2: don't demand that a DATA frame is complete before processing it\n    - BUG/MEDIUM: h2: don't switch the state to HREM before end of DATA frame\n    - BUG/MEDIUM: h2: don't close after the first DATA frame on tunnelled responses\n    - BUG/MEDIUM: http: don't disable lingering on requests with tunnelled responses\n    - BUG/MEDIUM: h2: fix stream limit enforcement\n    - BUG/MINOR: stream-int: don't try to receive again after receiving an EOS\n    - MINOR: sample: add len converter\n    - BUG: MAJOR: lb_map: server map calculation broken\n    - BUG: MINOR: http: don't check http-request capture id when len is provided\n    - MINOR: sample: rename the \"len\" converter to \"length\"\n    - BUG/MEDIUM: mworker: Set FD_CLOEXEC flag on log fd\n    - DOC/MINOR: intro: typo, wording, formatting fixes\n    - MINOR: netscaler: respect syntax\n    - MINOR: netscaler: remove the use of cip_magic only used once\n    - MINOR: netscaler: rename cip_len to clarify its uage\n    - BUG/MEDIUM: netscaler: use the appropriate IPv6 header size\n    - BUG/MAJOR: netscaler: address truncated CIP header detection\n    - MINOR: netscaler: check in one-shot if buffer is large enough for IP and TCP header\n    - MEDIUM: netscaler: do not analyze original IP packet size\n    - MEDIUM: netscaler: add support for standard NetScaler CIP protocol\n    - MINOR: spoe: add force-set-var option in spoe-agent configuration\n    - CONTRIB: iprange: Fix compiler warning in iprange.c\n    - CONTRIB: halog: Fix compiler warnings in halog.c\n    - BUG/MINOR: h2: properly report a stream error on RST_STREAM\n    - MINOR: mux: add flags to describe a mux's capabilities\n    - MINOR: stream-int: set flag SI_FL_CLEAN_ABRT when mux supports clean aborts\n    - BUG/MEDIUM: stream: don't consider abortonclose on muxes which close cleanly\n    - BUG/MEDIUM: checks: a server passed in maint state was not forced down.\n    - BUG/MEDIUM: lua: fix crash when using bogus mode in register_service()\n    - MINOR: http: adjust the list of supposedly cacheable methods\n    - MINOR: http: update the list of cacheable status codes as per RFC7231\n    - MINOR: http: start to compute the transaction's cacheability from the request\n    - BUG/MINOR: http: do not ignore cache-control: public\n    - BUG/MINOR: http: properly detect max-age=0 and s-maxage=0 in responses\n    - BUG/MINOR: cache: do not force the TX_CACHEABLE flag before checking cacheability\n    - MINOR: http: add a function to check request's cache-control header field\n    - BUG/MEDIUM: cache: do not try to retrieve host-less requests from the cache\n    - BUG/MEDIUM: cache: replace old object on store\n    - BUG/MEDIUM: cache: respect the request cache-control header\n    - BUG/MEDIUM: cache: don't cache the response on no-cache=\"set-cookie\"\n    - BUG/MAJOR: connection: refine the situations where we don't send shutw()\n    - BUG/MEDIUM: checks: properly set servers to stopping state on 404\n    - BUG/MEDIUM: h2: properly handle and report some stream errors\n    - BUG/MEDIUM: h2: improve handling of frames received on closed streams\n    - DOC/MINOR: configuration: typo, formatting fixes\n    - BUG/MEDIUM: h2: ensure we always know the stream before sending a reset\n    - BUG/MEDIUM: mworker: don't close stdio several time\n    - MINOR: don't close stdio anymore\n    - BUG/MEDIUM: http: don't automatically forward request close\n    - BUG/MAJOR: hpack: don't return direct references to the dynamic headers table\n    - MINOR: h2: add a function to report pseudo-header names\n    - DEBUG: hpack: make hpack_dht_dump() expose the output file\n    - DEBUG: hpack: add more traces to the hpack decoder\n    - CONTRIB: hpack: add an hpack decoder\n    - MEDIUM: h2: prepare a graceful shutdown when the frontend is stopped\n    - BUG/MEDIUM: h2: properly handle the END_STREAM flag on empty DATA frames\n    - BUILD: ssl: silence a warning when building without NPN nor ALPN support\n    - CLEANUP: rbtree: remove\n    - BUG/MEDIUM: ssl: cache doesn't release shctx blocks\n    - BUG/MINOR: lua: Fix default value for pattern in Socket.receive\n    - DOC: lua: Fix typos in comments of hlua_socket_receive\n    - BUG/MEDIUM: lua: Fix IPv6 with separate port support for Socket.connect\n    - BUG/MINOR: lua: Fix return value of Socket.settimeout\n    - MINOR: dns: Handle SRV record weight correctly.\n    - BUG/MEDIUM: mworker: execvp failure depending on argv[0]\n    - MINOR: hathreads: add support for gcc < 4.7\n    - BUILD/MINOR: ancient gcc versions atomic fix\n    - BUG/MEDIUM: stream: properly handle client aborts during redispatch\n    - MINOR: spoe: add register-var-names directive in spoe-agent configuration\n    - MINOR: spoe: Don't queue a SPOE context if nothing is sent\n    - DOC: clarify the scope of ssl_fc_is_resumed\n    - CONTRIB: debug: fix a few flags definitions\n    - BUG/MINOR: poll: too large size allocation for FD events\n    - MINOR: sample: add date_us sample\n    - BUG/MEDIUM: peers: fix expire date wasn't updated if entry is modified remotely.\n    - MINOR: servers: Don't report duplicate dyncookies for disabled servers.\n    - MINOR: global/threads: move cpu_map at the end of the global struct\n    - MINOR: threads: add a MAX_THREADS define instead of LONGBITS\n    - MINOR: global: add some global activity counters to help debugging\n    - MINOR: threads/fd: Use a bitfield to know if there are FDs for a thread in the FD cache\n    - BUG/MEDIUM: threads/polling: Use fd_cache_mask instead of fd_cache_num\n    - BUG/MEDIUM: fd: maintain a per-thread update mask\n    - MINOR: fd: add a bitmask to indicate that an FD is known by the poller\n    - BUG/MEDIUM: epoll/threads: use one epoll_fd per thread\n    - BUG/MEDIUM: kqueue/threads: use one kqueue_fd per thread\n    - BUG/MEDIUM: threads/mworker: fix a race on startup\n    - BUG/MINOR: mworker: only write to pidfile if it exists\n    - MINOR: threads: Fix build when we're not compiling with threads.\n    - BUG/MINOR: threads: always set an owner to the thread_sync pipe\n    - BUG/MEDIUM: threads/server: Fix deadlock in srv_set_stopping/srv_set_admin_flag\n    - BUG/MEDIUM: checks: Don't try to release undefined conn_stream when a check is freed\n    - BUG/MINOR: kqueue/threads: Don't forget to close kqueue_fd[tid] on each thread\n    - MINOR: threads: Use __decl_hathreads instead of #ifdef/#endif\n    - BUILD: epoll/threads: Add test on MAX_THREADS to avoid warnings when complied without threads\n    - BUILD: kqueue/threads: Add test on MAX_THREADS to avoid warnings when complied without threads\n    - CLEANUP: sample: Fix comment encoding of sample.c\n    - CLEANUP: sample: Fix outdated comment about sample casts functions\n    - BUG/MINOR: sample: Fix output type of c_ipv62ip\n    - CLEANUP: Fix typo in ARGT_MSK6 comment\n    - CLEANUP: standard: Use len2mask4 in str2mask\n    - MINOR: standard: Add str2mask6 function\n    - MINOR: config: Add support for ARGT_MSK6\n    - MEDIUM: sample: Add IPv6 support to the ipmask converter\n    - MINOR: config: Enable tracking of up to MAX_SESS_STKCTR stick counters.\n    - BUG/MINOR: cli: use global.maxsock and not maxfd to list all FDs\n    - MINOR: polling: make epoll and kqueue not depend on maxfd anymore\n    - MINOR: fd: don't report maxfd in alert messages\n    - MEDIUM: polling: start to move maxfd computation to the pollers\n    - CLEANUP: fd/threads: remove the now unused fdtab_lock\n    - MINOR: poll: more accurately compute the new maxfd in the loop\n    - CLEANUP: fd: remove the unused \"new\" field\n    - MINOR: fd: move the hap_fd_{clr,set,isset} functions to fd.h\n    - MEDIUM: select: make use of hap_fd_* functions\n    - MEDIUM: fd: use atomic ops for hap_fd_{clr,set} and remove poll_lock\n    - MEDIUM: select: don't use the old FD state anymore\n    - MEDIUM: poll: don't use the old FD state anymore\n    - MINOR: fd: pass the iocb and owner to fd_insert()\n    - BUG/MINOR: threads: Update labels array because of changes in lock_label enum\n    - MINOR: stick-tables: Adds support for new \"gpc1\" and \"gpc1_rate\" counters.\n    - BUG/MINOR: epoll/threads: only call epoll_ctl(DEL) on polled FDs\n    - DOC: don't suggest using http-server-close\n    - MINOR: introduce proxy-v2-options for send-proxy-v2\n    - BUG/MEDIUM: spoe: Always try to receive or send the frame to detect shutdowns\n    - BUG/MEDIUM: spoe: Allow producer to read and to forward shutdown on request side\n    - MINOR: spoe: Remove check on min_applets number when a SPOE context is queued\n    - MINOR: spoe: Always link a SPOE context with the applet processing it\n    - MINOR: spoe: Replace sending_rate by a frequency counter\n    - MINOR: spoe: Count the number of frames waiting for an ack for each applet\n    - MEDIUM: spoe: Use an ebtree to manage idle applets\n    - MINOR: spoa_example: Count the number of frames processed by each worker\n    - MINOR: spoe: Add max-waiting-frames directive in spoe-agent configuration\n    - MINOR: init: make stdout unbuffered\n    - MINOR: early data: Don't rely on CO_FL_EARLY_DATA to wake up streams.\n    - MINOR: early data: Never remove the CO_FL_EARLY_DATA flag.\n    - MINOR: compiler: introduce offsetoff().\n    - MINOR: threads: Introduce double-width CAS on x86_64 and arm.\n    - MINOR: threads: add test and set/reset operations\n    - MINOR: pools/threads: Implement lockless memory pools.\n    - MAJOR: fd/threads: Make the fdcache mostly lockless.\n    - MEDIUM: fd/threads: Make sure we don't miss a fd cache entry.\n    - MAJOR: fd: compute the new fd polling state out of the fd lock\n    - MINOR: epoll: get rid of the now useless fd_compute_new_polled_status()\n    - MINOR: kqueue: get rid of the now useless fd_compute_new_polled_status()\n    - MINOR: poll: get rid of the now useless fd_compute_new_polled_status()\n    - MINOR: select: get rid of the now useless fd_compute_new_polled_status()\n    - CLEANUP: fd: remove the now unused fd_compute_new_polled_status() function\n    - MEDIUM: fd: make updt_fd_polling() use atomics\n    - MEDIUM: poller: use atomic ops to update the fdtab mask\n    - MINOR: fd: move the fd_{add_to,rm_from}_fdlist functions to fd.c\n    - BUG/MINOR: fd/threads: properly dereference fdcache as volatile\n    - MINOR: fd: remove the unneeded last CAS when adding an fd to the list\n    - MINOR: fd: reorder fd_add_to_fd_list()\n    - BUG/MINOR: time/threads: ensure the adjusted time is always correct\n    - BUG/MEDIUM: standard: Fix memory leak in str2ip2()\n    - MINOR: init: emit warning when -sf/-sd cannot parse argument\n    - BUILD: fd/threads: fix breakage build breakage without threads\n    - DOC: Describe routing impact of using interface keyword on bind lines\n    - DOC: Mention -Ws in the list of available options\n    - BUG/MINOR: config: don't emit a warning when global stats is incompletely configured\n    - BUG/MINOR: fd/threads: properly lock the FD before adding it to the fd cache.\n    - BUG/MEDIUM: threads: fix the double CAS implementation for ARMv7\n    - BUG/MEDIUM: ssl: Don't always treat SSL_ERROR_SYSCALL as unrecovarable.\n    - BUILD/MINOR: memory: stdint is needed for uintptr_t\n    - BUG/MINOR: init: Add missing brackets in the code parsing -sf/-st\n    - DOC: lua: new prototype for function \"register_action()\"\n    - DOC: cfgparse: Warn on option (tcp|http)log in backend\n    - BUG/MINOR: ssl/threads: Make management of the TLS ticket keys files thread-safe\n    - MINOR: sample: add a new \"concat\" converter\n    - BUG/MEDIUM: ssl: Shutdown the connection for reading on SSL_ERROR_SYSCALL\n    - BUG/MEDIUM: http: Switch the HTTP response in tunnel mode as earlier as possible\n    - BUG/MEDIUM: ssl/sample: ssl_bc_* fetch keywords are broken.\n    - MINOR: ssl/sample: adds ssl_bc_is_resumed fetch keyword.\n    - CLEANUP: cfgparse: Remove unused label end\n    - CLEANUP: spoe: Remove unused label retry\n    - CLEANUP: h2: Remove unused labels from mux_h2.c\n    - CLEANUP: pools: Remove unused end label in memory.h\n    - CLEANUP: standard: Fix typo in IPv6 mask example\n    - BUG/MINOR: pools/threads: don't ignore DEBUG_UAF on double-word CAS capable archs\n    - BUG/MINOR: debug/pools: properly handle out-of-memory when building with DEBUG_UAF\n    - MINOR: debug/pools: make DEBUG_UAF also detect underflows\n    - MINOR: stats: display the number of threads in the statistics.\n    - BUG/MINOR: h2: Set the target of dbuf_wait to h2c\n    - BUG/MEDIUM: h2: always consume any trailing data after end of output buffers\n    - BUG/MEDIUM: buffer: Fix the wrapping case in bo_putblk\n    - BUG/MEDIUM: buffer: Fix the wrapping case in bi_putblk\n    - BUG/MEDIUM: spoe: Remove idle applets from idle list when HAProxy is stopping\n    - Revert \"BUG/MINOR: send-proxy-v2: string size must include ('\\0')\"\n    - MINOR: ssl: extract full pkey info in load_certificate\n    - MINOR: ssl: add ssl_sock_get_pkey_algo function\n    - MINOR: ssl: add ssl_sock_get_cert_sig function\n    - MINOR: connection: add proxy-v2-options ssl-cipher,cert-sig,cert-key\n    - MINOR: connection: add proxy-v2-options authority\n    - MINOR: systemd: Add section for SystemD sandboxing to unit file\n    - MINOR: systemd: Add SystemD's Protect*= options to the unit file\n    - MINOR: systemd: Add SystemD's SystemCallFilter option to the unit file\n    - CLEANUP: h2: rename misleading h2c_stream_close() to h2s_close()\n    - MINOR: h2: provide and use h2s_detach() and h2s_free()\n    - MEDIUM: h2: use a single buffer allocator\n    - MINOR/BUILD: fix Lua build on Mac OS X\n    - BUILD/MINOR: fix Lua build on Mac OS X (again)\n    - BUG/MINOR: session: Fix tcp-request session failure if handshake.\n    - CLEANUP: .gitignore: Ignore binaries from the contrib directory\n    - BUG/MINOR: unix: Don't mess up when removing the socket from the xfer_sock_list.\n    - DOC: buffers: clarify the purpose of the <from> pointer in offer_buffers()\n    - BUG/MEDIUM: h2: also arm the h2 timeout when sending\n    - BUG/MINOR: cli: Fix a crash when passing a negative or too large value to \"show fd\"\n    - CLEANUP: ssl: Remove a duplicated #include\n    - CLEANUP: cli: Remove a leftover debug message\n    - BUG/MINOR: cli: Fix a typo in the 'set rate-limit' usage\n    - BUG/MEDIUM: fix a 100% cpu usage with cpu-map and nbthread/nbproc\n    - BUG/MINOR: force-persist and ignore-persist only apply to backends\n    - BUG/MEDIUM: threads/unix: Fix a deadlock when a listener is temporarily disabled\n    - BUG/MAJOR: threads/queue: Fix thread-safety issues on the queues management\n    - BUG/MINOR: dns: don't downgrade DNS accepted payload size automatically\n    - TESTS: Add a testcase for multi-port + multi-server listener issue\n    - CLEANUP: dns: remove duplicate code in src/dns.c\n    - BUG/MINOR: seemless reload: Fix crash when an interface is specified.\n    - BUG/MINOR: cli: Ensure all command outputs end with a LF\n    - BUG/MINOR: cli: Fix a crash when sending a command with too many arguments\n    - BUILD: ssl: Fix build with OpenSSL without NPN capability\n    - BUG/MINOR: spoa-example: unexpected behavior for more than 127 args\n    - BUG/MINOR: lua: return bad error messages\n    - CLEANUP: lua/syntax: lua is a name and not an acronym\n    - BUG/MEDIUM: tcp-check: single connect rule can't detect DOWN servers\n    - BUG/MINOR: tcp-check: use the server's service port as a fallback\n    - BUG/MEDIUM: threads/queue: wake up other threads upon dequeue\n    - MINOR: log: stop emitting alerts when it's not possible to write on the socket\n    - BUILD/BUG: enable -fno-strict-overflow by default\n    - BUG/MEDIUM: fd/threads: ensure the fdcache_mask always reflects the cache contents\n    - DOC: log: more than 2 log servers are allowed\n    - MINOR: hash: add new function hash_crc32c\n    - MINOR: proxy-v2-options: add crc32c\n    - MINOR: accept-proxy: support proxy protocol v2 CRC32c checksum\n    - REORG: compact \"struct server\"\n    - MINOR: samples: add crc32c converter\n    - BUG/MEDIUM: h2: properly account for DATA padding in flow control\n    - BUG/MINOR: h2: ensure we can never send an RST_STREAM in response to an RST_STREAM\n    - BUG/MINOR: listener: Don't decrease actconn twice when a new session is rejected\n    - CLEANUP: map, stream: remove duplicate code in src/map.c, src/stream.c\n    - BUG/MINOR: lua: the function returns anything\n    - BUG/MINOR: lua funtion hlua_socket_settimeout don't check negative values\n    - CLEANUP: lua: typo fix in comments\n    - BUILD/MINOR: fix build when USE_THREAD is not defined\n    - MINOR: lua: allow socket api settimeout to accept integers, float, and doubles\n    - BUG/MINOR: hpack: fix harmless use of uninitialized value in hpack_dht_insert\n    - MINOR: cli/threads: make \"show fd\" report thread_sync_io_handler instead of \"unknown\"\n    - MINOR: cli: make \"show fd\" report the mux and mux_ctx pointers when available\n    - BUILD/MINOR: cli: fix a build warning introduced by last commit\n    - BUG/MAJOR: h2: remove orphaned streams from the send list before closing\n    - MINOR: h2: always call h2s_detach() in h2_detach()\n    - MINOR: h2: fuse h2s_detach() and h2s_free() into h2s_destroy()\n    - BUG/MEDIUM: h2/threads: never release the task outside of the task handler\n    - BUG/MEDIUM: h2: don't consider pending data on detach if connection is in error\n    - BUILD/MINOR: threads: always export thread_sync_io_handler()\n    - MINOR: mux: add a \"show_fd\" function to dump debugging information for \"show fd\"\n    - MINOR: h2: implement a basic \"show_fd\" function\n    - MINOR: cli: report cache indexes in \"show fd\"\n    - BUG/MINOR: h2: remove accidental debug code introduced with show_fd function\n    - BUG/MEDIUM: h2: always add a stream to the send or fctl list when blocked\n    - BUG/MINOR: checks: check the conn_stream's readiness and not the connection\n    - BUG/MINOR: fd: Don't clear the update_mask in fd_insert.\n    - BUG/MINOR: email-alert: Set the mailer port during alert initialization\n    - BUG/MINOR: cache: fix \"show cache\" output\n    - BUG/MAJOR: cache: fix random crashes caused by incorrect delete() on non-first blocks\n    - BUG/MINOR: spoe: Initialize variables used during conf parsing before any check\n    - BUG/MINOR: spoe: Don't release the context buffer in .check_timeouts callbaclk\n    - BUG/MINOR: spoe: Register the variable to set when an error occurred\n    - BUG/MINOR: spoe: Don't forget to decrement fpa when a processing is interrupted\n    - MINOR: spoe: Add metrics in to know time spent in the SPOE\n    - MINOR: spoe: Add options to store processing times in variables\n    - MINOR: log: move 'log' keyword parsing in dedicated function\n    - MINOR: log: Keep the ref when a log server is copied to avoid duplicate entries\n    - MINOR: spoe: Add loggers dedicated to the SPOE agent\n    - MINOR: spoe: Add support for option dontlog-normal in the SPOE agent section\n    - MINOR: spoe: use agent's logger to log SPOE messages\n    - MINOR: spoe: Add counters to log info about SPOE agents\n    - BUG/MAJOR: cache: always initialize newly created objects\n    - MINOR: servers: Support alphanumeric characters for the server templates names\n    - BUG/MEDIUM: threads: Fix the max/min calculation because of name clashes\n    - BUG/MEDIUM: connection: Make sure we have a mux before calling detach().\n    - BUG/MINOR: http: Return an error in proxy mode when url2sa fails\n    - MINOR: proxy: Add fe_defbe fetcher\n    - MINOR: config: Warn if resolvers has no nameservers\n    - BUG/MINOR: cli: Guard against NULL messages when using CLI_ST_PRINT_FREE\n    - MINOR: cli: Ensure the CLI always outputs an error when it should\n    - MEDIUM: sample: Extend functionality for field/word converters\n    - MINOR: export localpeer as an environment variable\n    - BUG/MEDIUM: kqueue: When adding new events, provide an output to get errors.\n    - BUILD: sample: avoid build warning in sample.c\n    - BUG/CRITICAL: h2: fix incorrect frame length check\n    - DOC: lua: update the links to the config and Lua API\n    - BUG/MINOR: pattern: Add a missing HA_SPIN_INIT() in pat_ref_newid()\n    - BUG/MAJOR: channel: Fix crash when trying to read from a closed socket\n    - BUG/MINOR: log: t_idle (%Ti) is not set for some requests\n    - BUG/MEDIUM: lua: Fix segmentation fault if a Lua task exits\n    - MINOR: h2: detect presence of CONNECT and/or content-length\n    - BUG/MEDIUM: h2: implement missing support for chunked encoded uploads\n    - BUG/MINOR: spoe: Fix counters update when processing is interrupted\n    - BUG/MINOR: spoe: Fix parsing of dontlog-normal option\n    - MEDIUM: cli: Add payload support\n    - MINOR: map: Add payload support to \"add map\"\n    - MINOR: ssl: Add payload support to \"set ssl ocsp-response\"\n    - BUG/MINOR: lua/threads: Make lua's tasks sticky to the current thread\n    - MINOR: sample: Add strcmp sample converter\n    - MINOR: http: Add support for 421 Misdirected Request\n    - BUG/MINOR: config: disable http-reuse on TCP proxies\n    - MINOR: ssl: disable SSL sample fetches when unsupported\n    - MINOR: ssl: add fetch 'ssl_fc_session_key' and 'ssl_bc_session_key'\n    - BUG/MINOR: checks: Fix check->health computation for flapping servers\n    - BUG/MEDIUM: threads: Fix the sync point for more than 32 threads\n    - BUG/MINOR, BUG/MINOR: lua: Put tasks to sleep when waiting for data\n    - MINOR: backend: implement random-based load balancing\n    - DOC/MINOR: clean up LUA documentation re: servers & array/table.\n    - MINOR: lua: Add server name & puid to LUA Server class.\n    - MINOR: lua: add get_maxconn and set_maxconn to LUA Server class.\n    - BUG/MINOR: map: correctly track reference to the last ref_elt being dumped\n    - BUG/MEDIUM: task: Don't free a task that is about to be run.\n    - MINOR: fd: Make the lockless fd list work with multiple lists.\n    - BUG/MEDIUM: pollers: Use a global list for fd shared between threads.\n    - MINOR: pollers: move polled_mask outside of struct fdtab.\n    - BUG/MINOR: lua: schedule socket task upon lua connect()\n    - BUG/MINOR: lua: ensure large proxy IDs can be represented\n    - BUG/MEDIUM: pollers/kqueue: use incremented position in event list\n    - BUG/MINOR: cli: don't stop cli_gen_usage_msg() when kw->usage == NULL\n    - BUG/MEDIUM: http: don't always abort transfers on CF_SHUTR\n    - BUG/MEDIUM: ssl: properly protect SSL cert generation\n    - BUG/MINOR: lua: Socket.send threw runtime error: 'close' needs 1 arguments.\n    - BUG/MINOR: spoe: Mistake in error message about SPOE configuration\n    - BUG/MEDIUM: spoe: Flags are not encoded in network order\n    - CLEANUP: spoe: Remove unused variables the agent structure\n    - DOC: spoe: fix a typo\n    - BUG/MEDIUM: contrib/mod_defender: Use network order to encode/decode flags\n    - BUG/MEDIUM: contrib/modsecurity: Use network order to encode/decode flags\n    - DOC: add some description of the pending rework of the buffer structure\n    - BUG/MINOR: ssl/lua: prevent lua from affecting automatic maxconn computation\n    - MINOR: lua: Improve error message\n    - BUG/MEDIUM: cache: don't cache when an Authorization header is present\n    - MINOR: ssl: set SSL_OP_PRIORITIZE_CHACHA\n    - BUG/MEDIUM: dns: Delay the attempt to run a DNS resolution on check failure.\n    - BUG/BUILD: threads: unbreak build without threads\n    - BUG/MEDIUM: servers: Add srv_addr default placeholder to the state file\n    - BUG/MEDIUM: lua/socket: Length required read doesn't work\n    - MINOR: tasks: Change the task API so that the callback takes 3 arguments.\n    - MAJOR: tasks: Create a per-thread runqueue.\n    - MAJOR: tasks: Introduce tasklets.\n    - MINOR: tasks: Make the number of tasks to run at once configurable.\n    - MAJOR: applets: Use tasks, instead of rolling our own scheduler.\n    - BUG/MEDIUM: stick-tables: Decrement ref_cnt in table_* converters\n    - MINOR: http: Log warning if (add|set)-header fails\n    - DOC: management: add the new wrew stats column\n    - MINOR: stats: also report the failed header rewrites warnings on the stats page\n    - BUG/MEDIUM: tasks: Don't forget to increase/decrease tasks_run_queue.\n    - BUG/MEDIUM: task: Don't forget to decrement max_processed after each task.\n    - MINOR: task: Also consider the task list size when getting global tasks.\n    - MINOR: dns: Implement `parse-resolv-conf` directive\n    - BUG/MEDIUM: spoe: Return an error when the wrong ACK is received in sync mode\n    - MINOR: task/notification: Is notifications registered ?\n    - BUG/MEDIUM: lua/socket: wrong scheduling for sockets\n    - BUG/MAJOR: lua: Dead lock with sockets\n    - BUG/MEDIUM: lua/socket: Notification error\n    - BUG/MEDIUM: lua/socket: Sheduling error on write: may dead-lock\n    - BUG/MEDIUM: lua/socket: Buffer error, may segfault\n    - DOC: contrib/modsecurity: few typo fixes\n    - DOC: SPOE.txt: fix a typo\n    - MAJOR: spoe: upgrade the SPOP version to 2.0 and remove the support for 1.0\n    - BUG/MINOR: contrib/spoa_example: Don't reset the status code during disconnect\n    - BUG/MINOR: contrib/mod_defender: Don't reset the status code during disconnect\n    - BUG/MINOR: contrib/modsecurity: Don't reset the status code during disconnect\n    - BUG/MINOR: contrib/mod_defender: update pointer on the end of the frame\n    - BUG/MINOR: contrib/modsecurity: update pointer on the end of the frame\n    - MINOR: task: Fix a compiler warning by adding a cast.\n    - MINOR: stats: also report the nice and number of calls for applets\n    - MINOR: applet: assign the same nice value to a new appctx as its owner task\n    - MINOR: task: Fix compiler warning.\n    - BUG/MEDIUM: tasks: Use the local runqueue when building without threads.\n    - MINOR: tasks: Don't define rqueue if we're building without threads.\n    - BUG/MINOR: unix: Make sure we can transfer abns sockets on seamless reload.\n    - MINOR: lua: Increase debug information\n    - BUG/MEDIUM: threads: handle signal queue only in thread 0\n    - BUG/MINOR: don't ignore SIG{BUS,FPE,ILL,SEGV} during signal processing\n    - BUG/MINOR: signals: ha_sigmask macro for multithreading\n    - BUG/MAJOR: map: fix a segfault when using http-request set-map\n    - DOC: regression testing: Add a short starting guide.\n    - MINOR: tasks: Make sure we correctly init and deinit a tasklet.\n    - BUG/MINOR: tasklets: Just make sure we don't pass a tasklet to the handler.\n    - BUG/MINOR: lua: Segfaults with wrong usage of types.\n    - BUG/MAJOR: ssl: Random crash with cipherlist capture\n    - BUG/MAJOR: ssl: OpenSSL context is stored in non-reserved memory slot\n    - BUG/MEDIUM: ssl: do not store pkinfo with SSL_set_ex_data\n    - MINOR: tests: First regression testing file.\n    - MINOR: reg-tests: Add reg-tests/README file.\n    - MINOR: reg-tests: Add a few regression testing files.\n    - DOC: Add new REGTEST tag info about reg testing.\n    - BUG/MEDIUM: fd: Don't modify the update_mask in fd_dodelete().\n    - MINOR: Some spelling cleanup in the comments.\n    - BUG/MEDIUM: threads: Use the sync point to check active jobs and exit\n    - MINOR: threads: Be sure to remove threads from all_threads_mask on exit\n    - REGTEST/MINOR: Wrong URI in a reg test for SSL/TLS.\n    - REGTEST/MINOR: Set HAPROXY_PROGRAM default value.\n    - REGTEST/MINOR: Add levels to reg-tests target.\n    - BUG/MAJOR: Stick-tables crash with segfault when the key is not in the stick-table\n    - BUG/BUILD: threads: unbreak build without threads\n    - BUG/MAJOR: stick_table: Complete incomplete SEGV fix\n    - MINOR: stick-tables: make stktable_release() do nothing on NULL\n    - BUG/MEDIUM: lua: possible CLOSE-WAIT state with '\\n' headers\n    - MINOR: startup: change session/process group settings\n    - MINOR: systemd: consider exit status 143 as successful\n    - REGTEST/MINOR: Wrong URI syntax.\n    - CLEANUP: dns: remove obsolete macro DNS_MAX_IP_REC\n    - CLEANUP: dns: inacurate comment about prefered IP score\n    - MINOR: dns: fix wrong score computation in dns_get_ip_from_response\n    - MINOR: dns: new DNS options to allow/prevent IP address duplication\n    - REGTEST/MINOR: Unexpected curl URL globling.\n    - BUG/MINOR: ssl: properly ref-count the tls_keys entries\n    - MINOR: h2: keep a count of the number of conn_streams attached to the mux\n    - BUG/MEDIUM: h2: don't accept new streams if conn_streams are still in excess\n    - MINOR: h2: add the mux and demux buffer lengths on \"show fd\"\n    - BUG/MEDIUM: h2: never leave pending data in the output buffer on close\n    - BUG/MEDIUM: h2: make sure the last stream closes the connection after a timeout\n    - MINOR: tasklet: Set process to NULL.\n    - MINOR: buffer: implement a new file for low-level buffer manipulation functions\n    - MINOR: buffer: switch buffer sizes and offsets to size_t\n    - MINOR: buffer: add a few basic functions for the new API\n    - MINOR: buffer: Introduce b_sub(), b_add(), and bo_add()\n    - MINOR: buffer: Add b_set_data().\n    - MINOR: buffer: introduce b_realign_if_empty()\n    - MINOR: compression: pass the channel to http_compression_buffer_end()\n    - MINOR: channel: add a few basic functions for the new buffer API\n    - MINOR: channel/buffer: use c_realign_if_empty() instead of buffer_realign()\n    - MINOR: channel/buffer: replace buffer_slow_realign() with channel_slow_realign() and b_slow_realign()\n    - MEDIUM: channel: make channel_slow_realign() take a swap buffer\n    - MINOR: h2: use b_slow_realign() with the trash as a swap buffer\n    - MINOR: buffer: remove buffer_slow_realign() and the swap_buffer allocation code\n    - MINOR: channel/buffer: replace b_{adv,rew} with c_{adv,rew}\n    - MINOR: buffer: replace calls to buffer_space_wraps() with b_space_wraps()\n    - MINOR: buffer: remove bi_getblk() and bi_getblk_nc()\n    - MINOR: buffer: split bi_contig_data() into ci_contig_data and b_config_data()\n    - MINOR: buffer: remove bi_ptr()\n    - MINOR: buffer: remove bo_ptr()\n    - MINOR: buffer: remove bo_end()\n    - MINOR: buffer: remove bi_end()\n    - MINOR: buffer: remove bo_contig_data()\n    - MINOR: buffer: merge b{i,o}_contig_space()\n    - MINOR: buffer: replace bo_getblk() with direction agnostic b_getblk()\n    - MINOR: buffer: replace bo_getblk_nc() with b_getblk_nc() which takes an offset\n    - MINOR: buffer: replace bi_del() and bo_del() with b_del()\n    - MINOR: buffer: convert most b_ptr() calls to c_ptr()\n    - MINOR: h1: make h1_measure_trailers() take the byte count in argument\n    - MINOR: h2: clarify the fact that the send functions are unsigned\n    - MEDIUM: h2: prevent the various mux encoders from modifying the buffer\n    - MINOR: h1: make h1_skip_chunk_crlf() not depend on b_ptr() anymore\n    - MINOR: h1: make h1_parse_chunk_size() not depend on b_ptr() anymore\n    - MINOR: h1: make h1_measure_trailers() use an offset and a count\n    - MEDIUM: h2: do not use buf->o anymore inside h2_snd_buf's loop\n    - MEDIUM: h2: don't use b_ptr() nor b_end() anymore\n    - MINOR: buffer: get rid of b_end() and b_to_end()\n    - MINOR: buffer: make b_getblk_nc() take const pointers\n    - MINOR: buffer: make b_getblk_nc() take size_t for the block sizes\n    - MEDIUM: connection: make xprt->snd_buf() take the byte count in argument\n    - MEDIUM: mux: make mux->snd_buf() take the byte count in argument\n    - MEDIUM: connection: make xprt->rcv_buf() use size_t for the count\n    - MEDIUM: mux: make mux->rcv_buf() take a size_t for the count\n    - MINOR: connection: add a flags argument to rcv_buf()\n    - MINOR: connection: add a new receive flag : CO_RFL_BUF_WET\n    - MINOR: buffer: get rid of b_ptr() and convert its last users\n    - MINOR: buffer: use b_room() to determine available space in a buffer\n    - MINOR: buffer: replace buffer_not_empty() with b_data() or c_data()\n    - MINOR: buffer: replace buffer_empty() with b_empty() or c_empty()\n    - MINOR: buffer: make bo_putchar() use b_tail()\n    - MINOR: buffer: replace buffer_full() with channel_full()\n    - MINOR: buffer: replace bi_space_for_replace() with ci_space_for_replace()\n    - MINOR: buffer: replace buffer_pending() with ci_data()\n    - MINOR: buffer: replace buffer_flush() with c_adv(chn, ci_data(chn))\n    - MINOR: buffer: use c_head() instead of buffer_wrap_sub(c->buf, p-o)\n    - MINOR: buffer: use b_orig() to replace most references to b->data\n    - MINOR: buffer: Use b_add()/bo_add() instead of accessing b->i/b->o.\n    - MINOR: channel: remove almost all references to buf->i and buf->o\n    - MINOR: channel: Add co_set_data().\n    - MEDIUM: channel: adapt to the new buffer API\n    - MINOR: checks: adapt to the new buffer API\n    - MEDIUM: h2: update to the new buffer API\n    - MINOR: buffer: remove unused bo_add()\n    - MEDIUM: spoe: use the new buffer API for the SPOE buffer\n    - MINOR: stats: adapt to the new buffers API\n    - MINOR: cli: use the new buffer API\n    - MINOR: cache: use the new buffer API\n    - MINOR: stream-int: use the new buffer API\n    - MINOR: stream: use wrappers instead of directly manipulating buffers\n    - MINOR: backend: use new buffer API\n    - MEDIUM: http: use wrappers instead of directly manipulating buffers states\n    - MINOR: filters: convert to the new buffer API\n    - MINOR: payload: convert to the new buffer API\n    - MEDIUM: h1: port to new buffer API.\n    - MINOR: flt_trace: adapt to the new buffer API\n    - MEDIUM: compression: start to move to the new buffer API\n    - MINOR: lua: use the wrappers instead of directly manipulating buffer states\n    - MINOR: buffer: convert part bo_putblk() and bi_putblk() to the new API\n    - MINOR: buffer: adapt buffer_slow_realign() and buffer_dump() to the new API\n    - MAJOR: start to change buffer API\n    - MINOR: buffer: remove the check for output on b_del()\n    - MINOR: buffer: b_set_data() doesn't truncate output data anymore\n    - MINOR: buffer: rename the \"data\" field to \"area\"\n    - MEDIUM: buffers: move \"output\" from struct buffer to struct channel\n    - MINOR: buffer: replace bi_fast_delete() with b_del()\n    - MINOR: buffer: replace b{i,o}_put* with b_put*\n    - MINOR: buffer: add a new file for ist + buffer manipulation functions\n    - MINOR: checks: use b_putist() instead of b_putstr()\n    - MINOR: buffers: remove b_putstr()\n    - CLEANUP: buffer: minor cleanups to buffer.h\n    - MINOR: buffers/channel: replace buffer_insert_line2() with ci_insert_line2()\n    - MINOR: buffer: replace buffer_replace2() with b_rep_blk()\n    - MINOR: buffer: rename the data length member to '->data'\n    - MAJOR: buffer: finalize buffer detachment\n    - MEDIUM: chunks: make the chunk struct's fields match the buffer struct\n    - MAJOR: chunks: replace struct chunk with struct buffer\n    - DOC: buffers: document the new buffers API\n    - DOC: buffers: remove obsolete docs about buffers\n    - MINOR: tasklets: Don't attempt to add a tasklet in the list twice.\n    - MINOR: connections/mux: Add a new \"subscribe\" method.\n    - MEDIUM: connections/mux: Revamp the send direction.\n    - MINOR: connection: simplify subscription by adding a registration function\n    - BUG/MINOR: http: Set brackets for the unlikely macro at the right place\n    - BUG/MINOR: build: Fix compilation with debug mode enabled\n    - BUILD: Generate sha256 checksums in publish-release\n    - MINOR: debug: Add check for CO_FL_WILL_UPDATE\n    - MINOR: debug: Add checks for conn_stream flags\n    - MINOR: ist: Add the function isteqi\n    - BUG/MEDIUM: threads: Fix the exit condition of the thread barrier\n    - BUG/MEDIUM: mux_h2: Call h2_send() before updating polling.\n    - MINOR: buffers: simplify b_contig_space()\n    - MINOR: buffers: split b_putblk() into __b_putblk()\n    - MINOR: buffers: add b_xfer() to transfer data between buffers\n    - DOC: add some design notes about the new layering model\n    - MINOR: conn_stream: add a new CS_FL_REOS flag\n    - MINOR: conn_stream: add an rx buffer to the conn_stream\n    - MEDIUM: conn_stream: add cs_recv() as a default rcv_buf() function\n    - MEDIUM: stream-int: automatically call si_cs_recv_cb() if the cs has data on wake()\n    - MINOR: h2: make each H2 stream support an intermediary input buffer\n    - MEDIUM: h2: make h2_frt_decode_headers() use an intermediary buffer\n    - MEDIUM: h2: make h2_frt_transfer_data() copy via an intermediary buffer\n    - MEDIUM: h2: centralize transfer of decoded frames in h2_rcv_buf()\n    - MEDIUM: h2: move headers and data frame decoding to their respective parsers\n    - MEDIUM: buffers: make b_xfer() automatically swap buffers when possible\n    - MEDIUM: h2: perform a single call to the data layer in demux()\n    - MEDIUM: h2: don't call data_cb->recv() anymore\n    - MINOR: h2: make use of CS_FL_REOS to indicate that end of stream was seen\n    - MEDIUM: h2: use the default conn_stream's receive function\n    - DOC: add more design feedback on the new layering model\n    - MINOR: h2: add the error code and the max/last stream IDs to \"show fd\"\n    - BUG/MEDIUM: stream-int: don't immediately enable reading when the buffer was reportedly full\n    - BUG/MEDIUM: stats: don't ask for more data as long as we're responding\n    - BUG/MINOR: servers: Don't make \"server\" in a frontend fatal.\n    - BUG/MEDIUM: tasks: make sure we pick all tasks in the run queue\n    - BUG/MEDIUM: tasks: Decrement rqueue_size at the right time.\n    - BUG/MEDIUM: tasks: use atomic ops for active_tasks_mask\n    - BUG/MEDIUM: tasks: Make sure there's no task left before considering inactive.\n    - MINOR: signal: don't pass the signal number anymore as the wakeup reason\n    - MINOR: tasks: extend the state bits from 8 to 16 and remove the reason\n    - MINOR: tasks: Add a flag that tells if we're in the global runqueue.\n    - BUG/MEDIUM: tasks: make __task_unlink_rq responsible for the rqueue size.\n    - MINOR: queue: centralize dequeuing code a bit better\n    - MEDIUM: queue: make pendconn_free() work on the stream instead\n    - DOC: queue: document the expected locking model for the server's queue\n    - MINOR: queue: make sure pendconn->strm->pend_pos is always valid\n    - MINOR: queue: use a distinct variable for the assigned server and the queue\n    - MINOR: queue: implement pendconn queue locking functions\n    - MEDIUM: queue: get rid of the pendconn lock\n    - MINOR: tasks: Make active_tasks_mask volatile.\n    - MINOR: tasks: Make global_tasks_mask volatile.\n    - MINOR: pollers: Add a way to wake a thread sleeping in the poller.\n    - MINOR: threads/queue: Get rid of THREAD_WANT_SYNC in the queue code.\n    - BUG/MEDIUM: threads/sync: use sched_yield when available\n    - MINOR: ssl: BoringSSL matches OpenSSL 1.1.0\n    - BUG/MEDIUM: h2: prevent orphaned streams from blocking a connection forever\n    - BUG/MINOR: config: stick-table is not supported in defaults section\n    - BUILD/MINOR: threads: unbreak build with threads disabled\n    - BUG/MINOR: threads: Handle nbthread == MAX_THREADS.\n    - BUG/MEDIUM: threads: properly fix nbthreads == MAX_THREADS\n    - MINOR: threads: move \"nbthread\" parsing to hathreads.c\n    - BUG/MEDIUM: threads: unbreak \"bind\" referencing an incorrect thread number\n    - MEDIUM: proxy_protocol: Convert IPs to v6 when protocols are mixed\n    - BUILD/MINOR: compiler: fix offsetof() on older compilers\n    - SCRIPTS: git-show-backports: add missing quotes to \"echo\"\n    - MINOR: threads: add more consistency between certain variables in no-thread case\n    - MEDIUM: hathreads: implement a more flexible rendez-vous point\n    - BUG/MEDIUM: cli: make \"show fd\" thread-safe\n\n2017/11/26 : 1.9-dev0\n\n2017/11/26 : 1.8.0\n    - BUG/MEDIUM: stream: don't automatically forward connect nor close\n    - BUG/MAJOR: stream: ensure analysers are always called upon close\n    - BUG/MINOR: stream-int: don't try to read again when CF_READ_DONTWAIT is set\n    - MEDIUM: mworker: Add systemd `Type=notify` support\n    - BUG/MEDIUM: cache: free callback to remove from tree\n    - CLEANUP: cache: remove unused struct\n    - MEDIUM: cache: enable the HTTP analysers\n    - CLEANUP: cache: remove wrong comment\n    - MINOR: threads/atomic: rename local variables in macros to avoid conflicts\n    - MINOR: threads/plock: rename local variables in macros to avoid conflicts\n    - MINOR: threads/atomic: implement pl_mb() in asm on x86\n    - MINOR: threads/atomic: implement pl_bts() on non-x86\n    - MINOR: threads/build: atomic: replace the few inlines with macros\n    - BUILD: threads/plock: fix a build issue on Clang without optimization\n    - BUILD: ebtree: don't redefine types u32/s32 in scope-aware trees\n    - BUILD: compiler: add a new type modifier __maybe_unused\n    - BUILD: h2: mark some inlined functions \"unused\"\n    - BUILD: server: check->desc always exists\n    - BUG/MEDIUM: h2: properly report connection errors in headers and data handlers\n    - MEDIUM: h2: add a function to emit an HTTP/1 request from a headers list\n    - MEDIUM: h2: change hpack_decode_headers() to only provide a list of headers\n    - BUG/MEDIUM: h2: always reassemble the Cookie request header field\n    - BUG/MINOR: systemd: ignore daemon mode\n    - CONTRIB: spoa_example: allow to compile outside HAProxy.\n    - CONTRIB: spoa_example: remove bref, wordlist, cond_wordlist\n    - CONTRIB: spoa_example: remove last dependencies on type \"sample\"\n    - CONTRIB: spoa_example: remove SPOE enums that are useless for clients\n    - CLEANUP: cache: reorder includes\n    - MEDIUM: shctx: use unsigned int for len and block_count\n    - MEDIUM: cache: \"show cache\" on the cli\n    - BUG/MEDIUM: cache: use key=0 as a condition for freeing\n    - BUG/MEDIUM: cache: refcount forbids to free the objects\n    - BUG/MEDIUM: cache fix cli_kws structure\n    - BUG/MEDIUM: deinit: correctly deinitialize the proxy and global listener tasks\n    - BUG/MINOR: ssl: Always start the handshake if we can't send early data.\n    - MINOR: ssl: Don't disable early data handling if we could not write.\n    - MINOR: pools: prepare functions to override malloc/free in pools\n    - MINOR: pools: implement DEBUG_UAF to detect use after free\n    - BUG/MEDIUM: threads/time: fix time drift correction\n    - BUG/MEDIUM: threads/time: maintain a common time reference between all threads\n    - MINOR: sample: Add \"thread\" sample fetch\n    - BUG/MINOR: Use crt_base instead of ca_base when crt is parsed on a server line\n    - BUG/MINOR: stream: fix tv_request calculation for applets\n    - BUG/MAJOR: h2: always remove a stream from the send list before freeing it\n    - BUG/MAJOR: threads/task: dequeue expired tasks under the WQ lock\n    - MINOR: ssl: Handle reading early data after writing better.\n    - MINOR: mux: Make sure every string is woken up after the handshake.\n    - MEDIUM: cache: store sha1 for hashing the cache key\n    - MINOR: http: implement the \"http-request reject\" rule\n    - MINOR: h2: send RST_STREAM before GOAWAY on reject\n    - MEDIUM: h2: don't gracefully close the connection anymore on Connection: close\n    - MINOR: h2: make use of client-fin timeout after GOAWAY\n    - MEDIUM: config: ensure that tune.bufsize is at least 16384 when using HTTP/2\n    - MINOR: ssl: Handle early data with BoringSSL\n    - BUG/MEDIUM: stream: always release the stream-interface on abort\n    - BUG/MEDIUM: cache: free ressources in chn_end_analyze\n    - MINOR: cache: move the refcount decrease in the applet release\n    - BUG/MINOR: listener: Allow multiple \"process\" options on \"bind\" lines\n    - MINOR: config: Support a range to specify processes in \"cpu-map\" parameter\n    - MINOR: config: Slightly change how parse_process_number works\n    - MINOR: config: Export parse_process_number and use it wherever it's applicable\n    - MINOR: standard: Add my_ffsl function to get the position of the bit set to one\n    - MINOR: config: Add auto-increment feature for cpu-map\n    - MINOR: config: Support partial ranges in cpu-map directive\n    - MINOR:: config: Remove thread-map directive\n    - MINOR: config: Add the threads support in cpu-map directive\n    - MINOR: config: Add threads support for \"process\" option on \"bind\" lines\n    - MEDIUM: listener: Bind listeners on a thread subset if specified\n    - CLEANUP: debug: Use DPRINTF instead of fprintf into #ifdef DEBUG_FULL/#endif\n    - CLEANUP: log: Rename Alert/Warning in ha_alert/ha_warning\n    - MINOR/CLEANUP: proxy: rename \"proxy\" to \"proxies_list\"\n    - CLEANUP: pools: rename all pool functions and pointers to remove this \"2\"\n    - DOC: update the roadmap file with the latest changes merged in 1.8\n    - DOC: fix mangled version in peers protocol documentation\n    - DOC: add initial peers protovol v2.0 documentation.\n    - DOC: mention William as maintainer of the cache and master-worker\n    - DOC: add Christopher and Emeric as maintainers of the threads\n    - MINOR: cache: replace a fprint() by an abort()\n    - MEDIUM: cache: max-age configuration keyword\n    - DOC: explain HTTP2 timeout behavior\n    - DOC: cache: configuration and management\n    - MAJOR: mworker: exits the master on failure\n    - BUG/MINOR: threads: don't drop \"extern\" on the lock in include files\n    - MINOR: task: keep a pointer to the currently running task\n    - MINOR: task: align the rq and wq locks\n    - MINOR: fd: cache-align fdtab and fdcache locks\n    - MINOR: buffers: cache-align buffer_wq_lock\n    - CLEANUP: server: reorder some fields in struct server to save 40 bytes\n    - CLEANUP: proxy: slightly reorder the struct proxy to reduce holes\n    - CLEANUP: checks: remove 16 bytes of holes in struct check\n    - CLEANUP: cache: more efficiently pack the struct cache\n    - CLEANUP: fd: place the lock at the beginning of struct fdtab\n    - CLEANUP: pools: align pools on a cache line\n    - DOC: config: add a few bits about how to configure HTTP/2\n    - BUG/MAJOR: threads/queue: avoid recursive locking in pendconn_get_next_strm()\n    - BUILD: Makefile: reorder object files by size\n\n2017/11/19 : 1.8-rc4\n    - BUG/MEDIUM: cache: does not cache if no Content-Length\n    - BUILD: thread/pipe: fix build without threads\n    - BUG/MINOR: spoe: check buffer size before acquiring or releasing it\n    - MINOR: debug/flags: Add missing flags\n    - MINOR: threads: Use __decl_hathreads to declare locks\n    - BUG/MINOR: buffers: Fix b_alloc_margin to be \"fonctionnaly\" thread-safe\n    - BUG/MAJOR: ebtree/scope: fix insertion and removal of duplicates in scope-aware trees\n    - BUG/MAJOR: ebtree/scope: fix lookup of next node in scope-aware trees\n    - MINOR: ebtree/scope: add a function to find next node from a parent\n    - MINOR: ebtree/scope: simplify the lookup functions by using eb32sc_next_with_parent()\n    - BUG/MEDIUM: mworker: Fix re-exec when haproxy is started from PATH\n    - BUG/MEDIUM: cache: use msg->sov to forward header\n    - MINOR: cache: forward data with headers\n    - MINOR: cache: disable cache if shctx_row_data_append fail\n    - BUG/MINOR: threads: tid_bit must be a unsigned long\n    - CLEANUP: tasks: Remove useless double test on rq_next\n    - BUG/MEDIUM: standard: itao_str/idx and quote_str/idx must be thread-local\n    - MINOR: tools: add a function to dump a scope-aware tree to a file\n    - MINOR: tools: improve the DOT dump of the ebtree\n    - MINOR: tools: emphasize the node being worked on in the tree dump\n    - BUG/MAJOR: ebtree/scope: properly tag upper nodes during insertion\n    - DOC: peers: Add a first version of peers protocol v2.1.\n    - CONTRIB: Wireshark dissector for HAProxy Peer Protocol.\n    - MINOR: mworker: display an accurate error when the reexec fail\n    - BUG/MEDIUM: mworker: wait again for signals when execvp fail\n    - BUG/MEDIUM: mworker: does not deinit anymore\n    - BUG/MEDIUM: mworker: does not close inherited FD\n    - MINOR: tests: add a python wrapper to test inherited fd\n    - BUG/MINOR: Allocate the log buffers before the proxies startup\n    - MINOR: tasks: Use a bitfield to track tasks activity per-thread\n    - MAJOR: polling: Use active_tasks_mask instead of tasks_run_queue\n    - MINOR: applets: Use a bitfield to track applets activity per-thread\n    - MAJOR: polling: Use active_appels_mask instead of applets_active_queue\n    - MEDIUM: applets: Don't process more than 200 active applets at once\n    - MINOR: stream: Add thread-mask of tasks/FDs/applets in \"show sess all\" command\n    - MINOR: SSL: Store the ASN1 representation of client sessions.\n    - MINOR: ssl: Make sure we don't shutw the connection before the handshake.\n    - BUG/MEDIUM: deviceatlas: ignore not valuable HTTP request data\n\n2017/11/11 : 1.8-rc3\n    - BUILD: use MAXPATHLEN instead of NAME_MAX.\n    - BUG/MAJOR: threads/checks: add 4 missing spin_unlock() in various functions\n    - BUG/MAJOR: threads/server: missing unlock in CLI fqdn parser\n    - BUG/MINOR: cli: do not perform an invalid action on \"set server check-port\"\n    - BUG/MAJOR: threads/checks: wrong use of SPIN_LOCK instead of SPIN_UNLOCK\n    - CLEANUP: checks: remove return statements in locked functions\n    - BUG/MINOR: cli: add severity in \"set server addr\" parser\n    - CLEANUP: server: get rid of return statements in the CLI parser\n    - BUG/MAJOR: cli/streams: missing unlock on exit \"show sess\"\n    - BUG/MAJOR: threads/dns: add missing unlock on allocation failure path\n    - BUG/MAJOR: threads/lb: fix missing unlock on consistent hash LB\n    - BUG/MAJOR: threads/lb: fix missing unlock on map-based hash LB\n    - BUG/MEDIUM: threads/stick-tables: close a race condition on stktable_trash_expired()\n    - BUG/MAJOR: h2: set the connection's task to NULL when no client timeout is set\n    - BUG/MAJOR: thread/listeners: enable_listener must not call unbind_listener()\n    - BUG/MEDIUM: threads: don't try to free build option message on exit\n    - MINOR: applets: no need to check for runqueue's emptiness in appctx_res_wakeup()\n    - MINOR: add master-worker in the warning about nbproc\n    - MINOR: mworker: allow pidfile in mworker + foreground\n    - MINOR: mworker: write parent pid in the pidfile\n    - MINOR: mworker: do not store child pid anymore in the pidfile\n    - MINOR: ebtree: implement the scope-aware functions for eb32\n    - MEDIUM: ebtree: specify the scope of every node inserted via eb32sc\n    - MINOR: ebtree: update the eb32sc parent node's scope on delete\n    - MEDIUM: ebtree: only consider the branches matching the scope in lookups\n    - MINOR: ebtree: implement eb32sc_lookup_ge_or_first()\n    - MAJOR: task: make use of the scope-aware ebtree functions\n    - MINOR: task: simplify wake_expired_tasks() to avoid unlocking in the loop\n    - MEDIUM: task: change the construction of the loop in process_runnable_tasks()\n    - MINOR: threads: use faster locks for the spin locks\n    - MINOR: tasks: only visit filled task slots after processing them\n    - MEDIUM: tasks: implement a lockless scheduler for single-thread usage\n    - BUG/MINOR: dns: Don't try to get the server lock if it's already held.\n    - BUG/MINOR: dns: Don't lock the server lock in snr_check_ip_callback().\n    - DOC: Add note about encrypted password CPU usage\n    - BUG/MINOR: h2: set the \"HEADERS_SENT\" flag on stream, not connection\n    - BUG/MEDIUM: h2: properly send an RST_STREAM on mux stream error\n    - BUG/MEDIUM: h2: properly send the GOAWAY frame in the mux\n    - BUG/MEDIUM: h2: don't try (and fail) to send non-existing data in the mux\n    - MEDIUM: h2: remove the H2_SS_RESET intermediate state\n    - BUG/MEDIUM: h2: fix some wrong error codes on connections\n    - BUILD: threads: Rename SPIN/RWLOCK macros using HA_ prefix\n    - BUILD: enable USE_THREAD for Solaris build.\n    - BUG/MEDIUM: h2: don't close the connection is there are data left\n    - MINOR: h2: don't re-enable the connection's task when we're closing\n    - BUG/MEDIUM: h2: properly set H2_SF_ES_SENT when sending the final frame\n    - BUG/MINOR: h2: correctly check for H2_SF_ES_SENT before closing\n    - MINOR: h2: add new stream flag H2_SF_OUTGOING_DATA\n    - BUG/MINOR: h2: don't send GOAWAY on failed response\n    - BUG/MEDIUM: splice/threads: pipe reuse list was not protected.\n    - BUG/MINOR: comp: fix compilation warning compiling without compression.\n    - BUG/MINOR: stream-int: don't set MSG_MORE on closed request path\n    - BUG/MAJOR: threads/tasks: fix the scheduler again\n    - BUG/MINOR; ssl: Don't assume we have a ssl_bind_conf because a SNI is matched.\n    - MINOR: ssl: Handle session resumption with TLS 1.3\n    - MINOR: ssl: Spell 0x10101000L correctly.\n    - MINOR: ssl: Handle sending early data to server.\n    - BUILD: ssl: fix build of backend without ssl\n    - BUILD: shctx: do not depend on openssl anymore\n    - BUG/MINOR: h1: the HTTP/1 make status code parser check for digits\n    - BUG/MEDIUM: h2: reject non-3-digit status codes\n    - BUG/MEDIUM: stream-int: Don't loss write's notifs when a stream is woken up\n    - BUG/MINOR: pattern: Rely on the sample type to copy it in pattern_exec_match\n    - BUG/MEDIUM: h2: split the function to send RST_STREAM\n    - BUG/MEDIUM: h1: ensure the chunk size parser can deal with full buffers\n    - MINOR: tools: don't use unlikely() in hex2i()\n    - BUG/MEDIUM: h2: support orphaned streams\n    - BUG/MEDIUM: threads/cli: fix \"show sess\" locking on release\n    - CLEANUP: mux: remove the unused \"release()\" function\n    - MINOR: cli: make \"show fd\" report the fd's thread mask\n    - BUG/MEDIUM: stream: don't ignore res.analyse_exp anymore\n    - CLEANUP: global: introduce variable pid_bit to avoid shifts with relative_pid\n    - MEDIUM: http: always reject the \"PRI\" method\n\n2017/11/03 : 1.8-rc2\n    - BUG/MINOR: send-proxy-v2: fix dest_len in make_tlv call\n    - BUG/MINOR: send-proxy-v2: string size must include ('\\0')\n    - MINOR: mux: Only define pipe functions on linux.\n    - MINOR: cache: Remove useless test for nonzero.\n    - MINOR: cache: Don't confuse act_return and act_parse_ret.\n    - BUG/MEDIUM: h2: don't try to parse incomplete H1 responses\n    - BUG/MEDIUM: checks/mux: always enable send-polling after connecting\n    - BUG/MAJOR: fix deadlock on healthchecks.\n    - BUG/MINOR: thread: fix a typo in the debug code\n    - BUILD: shctx: allow to be built without openssl\n    - BUG/MEDIUM: cache: don't try to resolve wrong filters\n    - BUG/MAJOR: buffers: fix get_buffer_nc() for data at end of buffer\n    - BUG/MINOR: freq: fix infinite loop on freq_ctr_period.\n    - BUG/MINOR: stdarg.h inclusion\n    - BUG/MINOR: dns: fix missing lock protection on server.\n    - BUG/MINOR: lua: fix missing lock protection on server.\n    - BUILD: enable USE_THREAD for OpenBSD build.\n    - BUG/MAJOR: mux_pt: don't dereference a connstream after ->wake()\n    - MINOR: thread: report multi-thread support in haproxy -vv\n\n2017/10/31 : 1.8-rc1\n    - BUG/MEDIUM: server: Allocate tmptrash before using it.\n    - CONTRIB: trace: add the possibility to place trace calls in the code\n    - CONTRIB: trace: try to display the function's return value on exit\n    - CONTRIB: trace: report the base name only for file names\n    - BUILD: ssl: support OPENSSL_NO_ASYNC #define\n    - MINOR: ssl: build with recent BoringSSL library\n    - BUG/MINOR: ssl: OCSP_single_get0_status can return -1\n    - BUG/MINOR: cli: restore \"set ssl tls-key\" command\n    - CLEANUP: cli: remove undocumented \"set ssl tls-keys\" command\n    - IMPORT: sha1: import SHA1 functions\n    - MINOR: sample: add the sha1 converter\n    - MINOR: sample: add the hex2i converter\n    - MINOR: stream-int: stop checking for useless connection flags in chk_snd_conn\n    - MINOR: ssl: don't abort after sending 16kB\n    - MINOR: connection: move the cleanup of flag CO_FL_WAIT_ROOM\n    - MINOR: connection: add flag CO_FL_WILL_UPDATE to indicate when updates are granted\n    - MEDIUM: connection: make use of CO_FL_WILL_UPDATE in conn_sock_shutw()\n    - MINOR: raw_sock: make use of CO_FL_WILL_UPDATE\n    - MINOR: ssl_sock: make use of CO_FL_WILL_UPDATE\n    - BUG/MINOR: checks: Don't forget to release the connection on error case.\n    - MINOR: buffer: add the buffer input manipulation functions\n    - BUG/MEDIUM: prevent buffers being overwritten during build_logline() execution\n    - MEDIUM: cfgparse: post section callback\n    - MEDIUM: cfgparse: post parsing registration\n    - MINOR: lua: add uuid to the Class Proxy\n    - MINOR: hlua: Add regex class\n    - MINOR: http: Mark the 425 code as \"Too Early\".\n    - MEDIUM: ssl: convert CBS (BoringSSL api) usage to neutral code\n    - MINOR: ssl: support Openssl 1.1.1 early callback for switchctx\n    - MINOR: ssl: generated certificate is missing in switchctx early callback\n    - MEDIUM: ssl: Handle early data with OpenSSL 1.1.1\n    - BUILD: Makefile: disable -Wunused-label\n    - MINOR: ssl/proto_http: Add keywords to take care of early data.\n    - BUG/MINOR: lua: const attribute of a string is overridden\n    - MINOR: ssl: Don't abuse ssl_options.\n    - MINOR: update proxy-protocol-v2 #define\n    - MINOR: merge ssl_sock_get calls for log and ppv2\n    - MINOR: add ALPN information to send-proxy-v2\n    - MEDIUM: h1: ensure that 1xx, 204 and 304 don't have a payload body\n    - CLEANUP: shctx: get ride of the shsess_packet{_hdr} structures\n    - MEDIUM: lists: list_for_each_entry{_safe}_from functions\n    - REORG: shctx: move lock functions and struct\n    - MEDIUM: shctx: allow the use of multiple shctx\n    - REORG: shctx: move ssl functions to ssl_sock.c\n    - MEDIUM: shctx: separate ssl and shctx\n    - MINOR: shctx: rename lock functions\n    - MINOR: h1: store the status code in the H1 message\n    - BUG/MINOR: spoe: Don't compare engine name and SPOE scope when both are NULL\n    - BUG/MINOR: spoa: Update pointer on the end of the frame when a reply is encoded\n    - MINOR: action: Add trk_idx inline function\n    - MINOR: action: Use trk_idx instead of tcp/http_trk_idx\n    - MINOR: action: Add a function pointer in act_rule struct to check its validity\n    - MINOR: action: Add function to check rules using an action ACT_ACTION_TRK_*\n    - MINOR: action: Add a functions to check http capture rules\n    - MINOR: action: Factorize checks on rules calling check_ptr if defined\n    - MINOR: acl: Pass the ACLs as an explicit parameter of build_acl_cond\n    - MEDIUM: spoe: Add support of ACLS to enable or disable sending of SPOE messages\n    - MINOR: spoe: Check uniqness of SPOE engine names during config parsing\n    - MEDIUM: spoe: Parse new \"spoe-group\" section in SPOE config file\n    - MEDIUM: spoe/rules: Add \"send-spoe-group\" action for tcp/http rules\n    - MINOR: spoe: Move message encoding in its own function\n    - MINOR: spoe: Add a type to qualify the message list during encoding\n    - MINOR: spoe: Add a generic function to encode a list of SPOE message\n    - MEDIUM: spoe/rules: Process \"send-spoe-group\" action\n    - BUG/MINOR: dns: Fix CLI keyword declaration\n    - MAJOR: dns: Refactor the DNS code\n    - BUG/MINOR: mailers: Fix a memory leak when email alerts are released\n    - MEDIUM: mailers: Init alerts during conf parsing and refactor their processing\n    - MINOR: mailers: Use pools to allocate email alerts and its tcpcheck_rules\n    - MINOR: standard: Add memvprintf function\n    - MINOR: log: Save alerts and warnings emitted during HAProxy startup\n    - MINOR: cli: Add \"show startup-logs\" command\n    - MINOR: startup: Extend the scope the MODE_STARTING flag\n    - MINOR: threads: Prepare makefile to link with pthread\n    - MINOR: threads: Add THREAD_LOCAL macro\n    - MINOR: threads: Add atomic-ops and plock includes in import dir\n    - MEDIUM: threads: Add hathreads header file\n    - MINOR: threads: Add mechanism to register per-thread init/deinit functions\n    - MINOR: threads: Add nbthread parameter\n    - MEDIUM: threads: Adds a set of functions to handle sync-point\n    - MAJOR: threads: Start threads to experiment multithreading\n    - MINOR: threads: Define the sync-point inside run_poll_loop\n    - MEDIUM: threads/buffers: Define and register per-thread init/deinit functions\n    - MEDIUM: threads/chunks: Transform trash chunks in thread-local variables\n    - MEDIUM: threads/time: Many global variables from time.h are now thread-local\n    - MEDIUM: threads/logs: Make logs thread-safe\n    - MEDIUM: threads/pool: Make pool thread-safe by locking all access to a pool\n    - MAJOR: threads/fd: Make fd stuffs thread-safe\n    - MINOR: threads/fd: Add a mask of threads allowed to process on each fd in fdtab array\n    - MEDIUM: threads/fd: Initialize the process mask during the call to fd_insert\n    - MINOR: threads/fd: Process cached events of FDs depending on the process mask\n    - MINOR: threads/polling: pollers now handle FDs depending on the process mask\n    - WIP: SQUASH WITH SYNC POINT\n    - MAJOR: threads/task: handle multithread on task scheduler\n    - MEDIUM: threads/signal: Add a lock to make signals thread-safe\n    - MEDIUM: threads/listeners: Make listeners thread-safe\n    - MEDIUM: threads/proxy: Add a lock per proxy and atomically update proxy vars\n    - MEDIUM: threads/server: Make connection list (priv/idle/safe) thread-safe\n    - MEDIUM: threads/server: Add a lock per server and atomically update server vars\n    - MINOR: threads/server: Add a lock to deal with insert in updates_servers list\n    - MEDIUM: threads/lb: Make LB algorithms (lb_*.c) thread-safe\n    - MEDIUM: threads/stick-tables: handle multithreads on stick tables\n    - MINOR: threads/sample: Change temp_smp into a thread local variable\n    - MEDIUM: threads/http: Make http_capture_bad_message thread-safe\n    - MINOR: threads/regex: Change Regex trash buffer into a thread local variable\n    - MAJOR: threads/applet: Handle multithreading for applets\n    - MAJOR: threads/peers: Make peers thread safe\n    - MAJOR: threads/buffer: Make buffer wait queue thread safe\n    - MEDIUM: threads/stream: Make streams list thread safe\n    - MAJOR: threads/ssl: Make SSL part thread-safe\n    - MEDIUM: threads/queue: Make queues thread-safe\n    - MAJOR: threads/map: Make acls/maps thread safe\n    - MEDIUM: threads/freq_ctr: Make the frequency counters thread-safe\n    - MEDIUM: thread/vars: Make vars thread-safe\n    - MEDIUM: threads/filters: Add init/deinit callback per thread\n    - MINOR: threads/filters: Update trace filter to add _per_thread callbacks\n    - MEDIUM: threads/compression: Make HTTP compression thread-safe\n    - MEDIUM: threads/lua: Makes the jmpbuf and some other buffers local to the current thread.\n    - MEDIUM: threads/lua: Add locks around the Lua execution parts.\n    - MEDIUM: threads/lua: Ensure that the launched tasks runs on the same threads than me\n    - MEDIUM: threads/lua: Cannot acces to the socket if we try to access from another thread.\n    - MEDIUM: threads/xref: Convert xref function to a thread safe model\n    - MEDIUM: threads/tasks: Add lock around notifications\n    - MEDIUM: thread/spoe: Make the SPOE thread-safe\n    - MEDIUM: thread/dns: Make DNS thread-safe\n    - MINOR: threads: Add thread-map config parameter in the global section\n    - MINOR: threads/checks: Add a lock to protect the pid list used by external checks\n    - MINOR: threads/checks: Set the task process_mask when a check is executed\n    - MINOR: threads/mailers: Add a lock to protect queues of email alerts\n    - MEDIUM: threads/server: Use the server lock to protect health check and cli concurrency\n    - MINOR: threads: Don't start when device a detection module is used\n    - BUG/MEDIUM: threads: Run the poll loop on the main thread too\n    - BUG/MINOR: threads: Add missing THREAD_LOCAL on static here and there\n    - MAJOR: threads: Offically enable the threads support in HAProxy\n    - BUG/MAJOR: threads/freq_ctr: fix lock on freq counters.\n    - BUG/MAJOR: threads/time: Store the time deviation in an 64-bits integer\n    - BUILD: stick-tables: silence an uninitialized variable warning\n    - BUG/MINOR: dns: Fix SRV records with the new thread code.\n    - MINOR: ssl: Remove the global allow-0rtt option.\n    - CLEANUP: threads: replace the last few 1UL<<tid with tid_bit\n    - CLEANUP: threads: rename process_mask to thread_mask\n    - MINOR: h1: add a function to measure the trailers length\n    - MINOR: threads: add a portable barrier for threads and non-threads\n    - BUG/MAJOR: threads/freq_ctr: use a memory barrier to detect changes\n    - BUG/MEDIUM: threads: Initialize the sync-point\n    - MEDIUM: connection: start to introduce a mux layer between xprt and data\n    - MINOR: connection: implement alpn registration of muxes\n    - MINOR: mux: register the pass-through mux for any ALPN string\n    - MEDIUM: session: use the ALPN token and proxy mode to select the mux\n    - MINOR: connection: report the major HTTP version from the MUX for logging (fc_http_major)\n    - MINOR: connection: introduce conn_stream\n    - MINOR: mux: add more methods to mux_ops\n    - MINOR: connection: introduce the conn_stream manipulation functions\n    - MINOR: mux_pt: implement remaining mux_ops methods\n    - MAJOR: connection : Split struct connection into struct connection and struct conn_stream.\n    - MINOR: connection: make conn_stream users also check for per-stream error flag\n    - MINOR: conn_stream: new shutr/w status flags\n    - MINOR: conn_stream: modify cs_shut{r,w} API to pass the desired mode\n    - MEDIUM: connection: make conn_sock_shutw() aware of lingering\n    - MINOR: connection: add cs_close() to close a conn_stream\n    - MEDIUM: mux_pt: make cs_shutr() / cs_shutw() properly close the connection\n    - MEDIUM: connection: replace conn_full_close() with cs_close()\n    - MEDIUM: connection: make mux->detach() release the connection\n    - MEDIUM: stream: do not forcefully close the client connection anymore\n    - MEDIUM: checks: exclusively use cs_destroy() to release a connection\n    - MEDIUM: connection: add a destroy callback\n    - MINOR: session: release the listener with the session, not the stream\n    - MEDIUM: session: make use of the connection's destroy callback\n    - CONTRIB: hpack: implement a reverse huffman table generator for hpack\n    - MINOR: hpack: implement the HPACK Huffman table decoder\n    - MINOR: hpack: implement the header tables management\n    - MINOR: hpack: implement the decoder\n    - MEDIUM: hpack: implement basic hpack encoding\n    - MINOR: h2: centralize all HTTP/2 protocol elements and constants\n    - MINOR: h2: create a very minimalistic h2 mux\n    - MINOR: h2: expose tune.h2.header-table-size to configure the table size\n    - MINOR: h2: expose tune.h2.initial-window-size to configure the window size\n    - MINOR: h2: expose tune.h2.max-concurrent-streams to limit the number of streams\n    - MINOR: h2: create the h2c struct and allocate its pool\n    - MINOR: h2: create the h2s struct and the associated pool\n    - MINOR: h2: handle two extra stream states for errors\n    - MINOR: h2: add a frame header descriptor for incoming frames\n    - MEDIUM: h2: allocate and release the h2c context on connection init/end\n    - MEDIUM: h2: implement basic recv/send/wake functions\n    - MEDIUM: h2: dynamically allocate the demux buffer on Rx\n    - MEDIUM: h2: implement the mux buffer allocator\n    - MINOR: h2: add the connection and stream flags listing the causes for blocking\n    - MINOR: h2: add function h2s_id() to report a stream's ID\n    - MINOR: h2: small function to know when the mux is busy\n    - MINOR: h2: new function h2c_error to mark an error on the connection\n    - MINOR: h2: new function h2s_error() to mark an error on a stream\n    - MINOR: h2: add h2_set_frame_size() to update the size in a binary frame\n    - MINOR: h2: new function h2_peek_frame_hdr() to retrieve a new frame header\n    - MINOR: h2: add a few functions to retrieve contents from a wrapping buffer\n    - MINOR: h2: add stream lookup function based on the stream ID\n    - MINOR: h2: create dummy idle and closed streams\n    - MINOR: h2: add the function to create a new stream\n    - MINOR: h2: update the {MUX,DEM}_{M,D}ALLOC flags on buffer availability\n    - MEDIUM: h2: start to consider the H2_CF_{MUX,DEM}_* flags for polling\n    - MINOR: h2: also terminate the connection on shutr\n    - MEDIUM: h2: properly consider all conditions for end of connection\n    - MEDIUM: h2: wake the connection up for send on pending streams\n    - MEDIUM: h2: start to implement the frames processing loop\n    - MINOR: h2: add a function to send a GOAWAY error frame\n    - MINOR: h2: match the H2 connection preface on init\n    - MEDIUM: h2: enable connection polling for send when a cs wants to emit\n    - MEDIUM: h2: enable reading again on the connection if it was blocked on stream buffer full\n    - MEDIUM: h2: process streams pending for sending\n    - MINOR: h2: send a real SETTINGS frame based on the configuration\n    - MEDIUM: h2: detect the presence of the first settings frame\n    - MINOR: h2: create a stream parser for the demuxer\n    - MINOR: h2: implement PING frames\n    - MEDIUM: h2: decode SETTINGS frames and extract relevant settings\n    - MINOR: h2: lookup the stream during demuxing\n    - MEDIUM: h2: honor WINDOW_UPDATE frames\n    - MINOR: h2: implement h2_send_rst_stream() to send RST_STREAM frames\n    - MINOR: h2: handle CONTINUATION frames\n    - MEDIUM: h2: partial implementation of h2_detach()\n    - MEDIUM: h2: unblock a connection when its current stream detaches\n    - MEDIUM: h2: basic processing of HEADERS frame\n    - MEDIUM: h2: don't use trash to decode headers!\n    - MEDIUM: h2: implement the response HEADERS frame to encode the H1 response\n    - MEDIUM: h2: send the H1 response body as DATA frames\n    - MEDIUM: h2: skip the response trailers if any\n    - MEDIUM: h2: properly continue to parse header block when facing a 1xx response\n    - MEDIUM: h2: send WINDOW_UPDATE frames for connection\n    - MEDIUM: h2: handle request body in DATA frames\n    - MINOR: h2: handle RST_STREAM frames\n    - MEDIUM: h2: send DATA+ES or RST_STREAM on shutw/shutr\n    - MINOR: h2: use a common function to signal some and all streams.\n    - MEDIUM: h2: handle GOAWAY frames\n    - MINOR: h2: centralize the check for the idle streams\n    - MINOR: h2: centralize the check for the half-closed(remote) streams\n    - MEDIUM: h2: silently ignore frames higher than last_id after GOAWAY\n    - MINOR: h2: properly reject PUSH_PROMISE frames coming from the client\n    - MEDIUM: h2: perform a graceful shutdown on \"Connection: close\"\n    - MEDIUM: h2: send a GOAWAY frame when dealing with an empty response\n    - MEDIUM: h2: apply a timeout to h2 connections\n    - BUG/MEDIUM: h2: fix incorrect timeout handling on the connection\n    - MEDIUM: shctx: forbid shctx to read more than expected\n    - MEDIUM: cache: configuration parsing and initialization\n    - MEDIUM: cache: store objects in cache\n    - MEDIUM: cache: deliver objects from cache\n\n2017/10/22 : 1.8-dev3\n    - REORG: ssl: move defines and methodVersions table upper\n    - MEDIUM: ssl: ctx_set_version/ssl_set_version func for methodVersions table\n    - MINOR: ssl: support ssl-min-ver and ssl-max-ver with crt-list\n    - MEDIUM: ssl: disable SSLv3 per default for bind\n    - BUG/MAJOR: ssl: fix segfault on connection close using async engines.\n    - BUG/MAJOR: ssl: buffer overflow using offloaded ciphering on async engine\n    - BUG/MINOR: ssl: do not call directly the conn_fd_handler from async_fd_handler\n    - BUG/MINOR: haproxy/cli : fix for solaris/illumos distros for CMSG* macros\n    - BUG/MEDIUM: build without openssl broken\n    - BUG/MINOR: warning: need_resend may be used uninitialized\n    - BUG/MEDIUM: misplaced exit and wrong exit code\n    - BUG/MINOR: Makefile: fix compile error with USE_LUA=1 in ubuntu16.04\n    - BUILD: scripts: make publish-release support bare repositories\n    - BUILD: scripts: add an automatic mode for publish-release\n    - BUILD: scripts: add a \"quiet\" mode to publish-release\n    - BUG/MAJOR: http: call manage_client_side_cookies() before erasing the buffer\n    - BUG/MINOR: buffers: Fix bi/bo_contig_space to handle full buffers\n    - CONTRIB: plug qdiscs: Plug queuing disciplines mini HOWTO.\n    - BUG/MINOR: acls: Set the right refflag when patterns are loaded from a map\n    - BUG/MINOR: ssl: Be sure that SSLv3 connection methods exist for openssl < 1.1.0\n    - BUG/MINOR: http/filters: Be sure to wait if a filter loops in HTTP_MSG_ENDING\n    - BUG/MEDIUM: peers: Peers CLOSE_WAIT issue.\n    - BUG/MAJOR: server: Segfault after parsing server state file.\n    - BUG/MEDIUM: unix: never unlink a unix socket from the file system\n    - scripts: create-release pass -n to tail\n    - SCRIPTS: create-release: enforce GIT_COMMITTER_{NAME|EMAIL} validity\n    - BUG/MEDIUM: fix segfault when no argument to -x option\n    - MINOR: warning on multiple -x\n    - MINOR: mworker: don't copy -x argument anymore in copy_argv()\n    - BUG/MEDIUM: mworker: don't reuse PIDs passed to the master\n    - BUG/MINOR: Wrong peer task expiration handling during synchronization processing.\n    - BUG/MINOR: cfgparse: Check if tune.http.maxhdr is in the range 1..32767\n    - BUG/MINOR: log: pin the front connection when front ip/ports are logged\n    - DOC: fix references to the section about the unix socket\n    - BUG/MINOR: stream: flag TASK_WOKEN_RES not set if task in runqueue\n    - MAJOR: task: task scheduler rework.\n    - MINOR: task/stream: tasks related to a stream must be init by the caller.\n    - MINOR: queue: Change pendconn_get_next_strm into private function\n    - MINOR: backends: Change get_server_sh/get_server_uh into private function\n    - MINOR: queue: Change pendconn_from_srv/pendconn_from_px into private functions\n    - MEDIUM: stream: make stream_new() always set the target and analysers\n    - MINOR: frontend: initialize HTTP layer after the debugging code\n    - MINOR: connection: add a .get_alpn() method to xprt_ops\n    - MINOR: ssl: add a get_alpn() method to ssl_sock\n    - MINOR: frontend: retrieve the ALPN name when available\n    - MINOR: frontend: report the connection's ALPN in the debug output\n    - MINOR: stream: don't set backend's nor response analysers on SF_TUNNEL\n    - MINOR: connection: send data before receiving\n    - MAJOR: applet: applet scheduler rework.\n    - BUG/MAJOR: frontend: don't dereference a null conn on outgoing connections\n    - BUG/MAJOR: cli: fix custom io_release was crushed by NULL.\n    - BUG/MAJOR: map: fix segfault during 'show map/acl' on cli.\n    - BUG/MAJOR: compression: Be sure to release the compression state in all cases\n    - MINOR: compression: Use a memory pool to allocate compression states\n    - BUG/MAJOR: applet: fix a freeze if data is immedately forwarded.\n    - DOC: fix references to the section about time format.\n    - BUG/MEDIUM: map/acl: fix unwanted flags inheritance.\n    - BUG/MAJOR: http: fix buffer overflow on loguri buffer.\n    - MINOR: ssl: compare server certificate names to the SNI on outgoing connections\n    - BUG/MINOR: stream: Don't forget to remove CF_WAKE_ONCE flag on response channel\n    - BUG/MINOR: http: Don't reset the transaction if there are still data to send\n    - BUG/MEDIUM: filters: Be sure to call flt_end_analyze for both channels\n    - MINOR: peers: Add additional information to stick-table definition messages.\n    - BUG/MINOR: http: properly handle all 1xx informational responses\n    - OPTIM: ssl: don't consider a small ssl_read() as an indication of end of buffer\n    - BUG/MINOR: peers: peer synchronization issue (with several peers sections).\n    - CLEANUP: hdr_idx: make some function arguments const where possible\n    - BUG/MINOR: Prevent a use-after-free on error scenario on option \"-x\".\n    - BUG/MINOR: lua: In error case, the safe mode is not removed\n    - BUG/MINOR: lua: executes the function destroying the Lua session in safe mode\n    - BUG/MAJOR: lua/socket: resources not detroyed when the socket is aborted\n    - BUG/MEDIUM: lua: bad memory access\n    - BUG/MINOR: Lua: variable already initialized\n    - DOC: update CONTRIBUTING regarding optional parts and message format\n    - DOC: update the list of OpenSSL versions in the README\n    - BUG/MINOR: http: Set the response error state in http_sync_res_state\n    - MINOR: http: Reorder/rewrite checks in http_resync_states\n    - MINOR: http: Switch requests/responses in TUNNEL mode only by checking txn flags\n    - BUG/MEDIUM: http: Switch HTTP responses in TUNNEL mode when body length is undefined\n    - MINOR: http: Rely on analyzers mask to end processing in forward_body functions\n    - BUG/MINOR: http: Fix bug introduced in previous patch in http_resync_states\n    - BUG/MINOR: contrib/modsecurity: BSD build fix\n    - BUG/MINOR: contrib/mod_defender: build fix\n    - BUG/MINOR: ssl: remove haproxy SSLv3 support when ssl lib have no SSLv3\n    - MINOR: ssl: remove an unecessary SSL_OP_NO_* dependancy\n    - BUILD: ssl: fix compatibility with openssl without TLSEXT_signature_*\n    - MINOR: tools: add a portable timegm() alternative\n    - BUILD: lua: replace timegm() with my_timegm() to fix build on Solaris 10\n    - DOC: Updated 51Degrees git URL to point to a stable version.\n    - BUG/MAJOR: http: Fix possible infinity loop in http_sync_(req|res)_state\n    - MINOR: memory: remove macros\n    - BUG/MINOR: lua: Fix Server.get_addr() port values\n    - BUG/MINOR: lua: Correctly use INET6_ADDRSTRLEN in Server.get_addr()\n    - MINOR: samples: Handle the type SMP_T_METH when we duplicate a sample in smp_dup\n    - MINOR: samples: Handle the type SMP_T_METH in smp_is_safe and smp_is_rw\n    - MINOR: samples: Don't allocate memory for SMP_T_METH sample when method is known\n    - BUG/MINOR: lua: always detach the tcp/http tasks before freeing them\n    - MINOR: task: always preinitialize the task's timeout in task_init()\n    - CLEANUP: task: remove all initializations to TICK_ETERNITY after task_new()\n    - BUG/MAJOR: lua: properly dequeue hlua_applet_wakeup() for new scheduler\n    - MINOR: lua: Add proxy as member of proxy object.\n    - DOC: lua: Proxy class doc update\n    - MINOR: lua: Add lists of frontends and backends\n    - BUG/MINOR: ssl: Fix check against SNI during server certificate verification\n    - BUG/MINOR: ssl: make use of the name in SNI before verifyhost\n    - MINOR: ssl: add a new error codes for wrong server certificates\n    - BUG/MEDIUM: stream: don't retry SSL connections which fail the SNI name check\n    - MINOR: ssl: add \"no-ca-names\" parameter for bind\n    - BUG/MINOR: lua: Fix bitwise logic for hlua_server_check_* functions.\n    - DOC: fix alphabetical order of \"show commands\" in management.txt\n    - MINOR: listener: add a function to return a listener's state as a string\n    - MINOR: cli: add a new \"show fd\" command\n    - BUG/MEDIUM: ssl: Fix regression about certificates generation\n    - MINOR: Add server port field to server state file.\n    - MINOR: ssl: allow to start without certificate if strict-sni is set\n    - MINOR: dns: Cache previous DNS answers.\n    - MINOR: obj: Add a new type of object, OBJ_TYPE_SRVRQ.\n    - Add a few functions to do unaligned access.\n    - MINOR: dns: Handle SRV records.\n    - MINOR: check: Fix checks when using SRV records.\n    - MINOR: doc: Document SRV label usage.\n    - BUILD/MINOR: cli: shut a minor gcc warning in \"show fd\"\n    - BUILD: ssl: replace SSL_CTX_get0_privatekey for openssl < 1.0.2\n    - BUILD/MINOR: build without openssl still broken\n    - BUG/MAJOR: stream: in stream_free(), close the front endpoint and not the origin\n    - CLEANUP: raw_sock: Use a better name for the constructor than __ssl_sock_deinit()\n    - MINOR: init: Fix CPU affinity setting on FreeBSD.\n    - MINOR: dns: Update analysis of TRUNCATED response for SRV records\n    - MINOR: dns: update record dname matching for SRV query types\n    - MINOR: dns: update dns response buffer reading pointer due to SRV record\n    - MINOR: dns: duplicate entries in resolution wait queue for SRV records\n    - MINOR: dns: make debugging function dump_dns_config() compatible with SRV records\n    - MINOR: dns: ability to use a SRV resolution for multiple backends\n    - MINOR: dns: enable caching of responses for server set by a SRV record\n    - MINOR: dns: new dns record type (RTYPE) for OPT\n    - MINOR: dns: enabled edns0 extension and make accpeted payload size tunable\n    - MINOR: dns: default \"hold obsolete\" timeout set to 0\n    - MINOR: chunks: add chunk_memcpy() and chunk_memcat()\n    - MINOR: session: add a streams field to the session struct\n    - MINOR: stream: link the stream to its session\n    - MEDIUM: session: do not free a session until no stream references it\n    - MINOR: ist: implement very simple indirect strings\n    - TESTS: ist: add a test file for the functions\n    - MINOR: http: export some of the HTTP parser macros\n    - BUG/MINOR: Wrong type used as argument for spoe_decode_buffer().\n    - BUG/MINOR: dns: server set by SRV records stay in \"no resolution\" status\n    - MINOR: dns: Maximum DNS udp payload set to 8192\n    - MINOR: dns: automatic reduction of DNS accpeted payload size\n    - MINOR: dns: make SRV record processing more verbose\n    - CLEANUP: dns: remove duplicated code in dns_resolve_recv()\n    - CLEANUP: dns: remove duplicated code in dns_validate_dns_response()\n    - BUG/MINOR: dns: wrong resolution interval lead to 100% CPU\n    - BUG/MEDIUM: dns: fix accepted_payload_size parser to avoid integer overflow\n    - BUG/MAJOR: lua: fix the impact of the scheduler changes again\n    - BUG/MEDIUM: lua: HTTP services must take care of body-less status codes\n    - MINOR: lua: properly process the contents of the content-length field\n    - BUG/MEDIUM: stream: properly set the required HTTP analysers on use-service\n    - OPTIM: lua: don't use expensive functions to parse headers in the HTTP applet\n    - OPTIM: lua: don't add \"Connection: close\" on the response\n    - REORG/MEDIUM: connection: introduce the notion of connection handle\n    - BUG/MINOR: stream-int: don't check the CO_FL_CURR_WR_ENA flag\n    - MEDIUM: connection: get rid of data->init() which was not for data\n    - MEDIUM: stream: make stream_new() allocate its own task\n    - CLEANUP: listener: remove the unused handler field\n    - MEDIUM: session: add a pointer to a struct task in the session\n    - MINOR: stream: provide a new stream creation function for connections\n    - MEDIUM: connection: remove useless flag CO_FL_DATA_RD_SH\n    - CLEANUP: connection: remove the unused conn_sock_shutw_pending()\n    - MEDIUM: connection: remove useless flag CO_FL_DATA_WR_SH\n    - DOC: add CLI info on privilege levels\n    - DOC: Refer to Mozilla TLS info / config generator\n    - MINOR: ssl: remove duplicate ssl_methods in struct bind_conf\n    - BUG/MEDIUM: http: Fix a regression bug when a HTTP response is in TUNNEL mode\n    - DOC: Add note about \"* \" prefix in CSV stats\n    - CLEANUP: memory: Remove unused function pool_destroy\n    - MINOR: listeners: Change listener_full and limit_listener into private functions\n    - MINOR: listeners: Change enable_listener and disable_listener into private functions\n    - MINOR: fd: Don't forget to reset fdtab[fd].update when a fd is added/removed\n    - MINOR: fd: Set owner and iocb field before inserting a new fd in the fdtab\n    - MINOR: backends: Make get_server_* functions explicitly static\n    - MINOR: applet: Check applets_active_queue before processing applets queue\n    - MINOR: chunks: Use dedicated function to init/deinit trash buffers\n    - MEDIUM: chunks: Realloc trash buffers only after the config is parsed and checked\n    - MINOR: logs: Use dedicated function to init/deinit log buffers\n    - MINOR: logs: Realloc log buffers only after the config is parsed and checked\n    - MINOR: buffers: Move swap_buffer into buffer.c and add deinit_buffer function\n    - MINOR: stick-tables: Make static_table_key a struct variable instead of a pointer\n    - MINOR: http: Use a trash chunk to store decoded string of the HTTP auth header\n    - MINOR: fd: Add fd_active function\n    - MINOR: fd: Use inlined functions to check fd state in fd_*_send/recv functions\n    - MINOR: fd: Move (de)allocation of fdtab and fdinfo in (de)init_pollers\n    - MINOR: freq_ctr: Return the new value after an update\n    - MEDIUM: check: server states and weight propagation re-work\n    - BUG/MEDIUM: epoll: ensure we always consider HUP and ERR\n    - MINOR: fd: Add fd_update_events function\n    - MINOR: polling: Use fd_update_events to update events seen for a fd\n    - BUG/MINOR: server: Remove FQDN requirement for using init-addr and state file\n    - Revert \"BUG/MINOR: server: Remove FQDN requirement for using init-addr and state file\"\n    - MINOR: ssl: rework smp_fetch_ssl_fc_cl_str without internal ssl use\n    - BUG/MEDIUM: http: Close streams for connections closed before a redirect\n    - BUG/MINOR: Lua: The socket may be destroyed when we try to access.\n    - MINOR: xref: Add a new xref system\n    - MEDIUM: xref/lua: Use xref for referencing cosocket relation between stream and lua\n    - MINOR: tasks: Move Lua notification from Lua to tasks\n    - MINOR: net_helper: Inline functions meant to be inlined.\n    - MINOR: cli: add socket commands and config to prepend informational messages with severity\n    - MINOR: add severity information to cli feedback messages\n    - BUILD: Makefile: add a function to detect support by the compiler of certain options\n    - BUILD: Makefile: shut certain gcc/clang stupid warnings\n    - BUILD: Makefile: improve detection of support for compiler warnings\n    - MINOR: peers: don't reference the incoming listener on outgoing connections\n    - MINOR: frontend: don't retrieve ALPN on the critical path\n    - MINOR: protocols: always pass a \"port\" argument to the listener creation\n    - MINOR: protocols: register the ->add function and stop calling them directly\n    - MINOR: unix: remove the now unused proto_uxst.h file\n    - MINOR: listeners: new function create_listeners\n    - MINOR: listeners: make listeners count consistent with reality\n    - MEDIUM: session: take care of incrementing/decrementing jobs\n    - MINOR: listener: new function listener_release\n    - MINOR: session: small cleanup of conn_complete_session()\n    - MEDIUM: session: factor out duplicated code for conn_complete_session\n    - MEDIUM: session: count the frontend's connections at a single place\n    - BUG/MEDIUM: compression: Fix check on txn in smp_fetch_res_comp_algo\n    - BUG/MINOR: compression: Check response headers before http-response rules eval\n    - BUG/MINOR: spoe: Don't rely on SPOE ctx in debug message when its creation failed\n    - BUG/MINOR: dns: Fix check on nameserver in snr_resolution_cb\n    - MINOR: ssl: Remove useless checks on bind_conf or bind_conf->is_ssl\n    - BUG/MINOR: contrib/mod_defender: close the va_list argp before return\n    - BUG/MINOR: contrib/modsecurity: close the va_list ap before return\n    - MINOR: tools: make my_htonll() more efficient on x86_64\n    - MINOR: buffer: add b_del() to delete a number of characters\n    - MINOR: buffer: add b_end() and b_to_end()\n    - MINOR: net_helper: add functions to read from vectors\n    - MINOR: net_helper: add write functions\n    - MINOR: net_helper: add 64-bit read/write functions\n    - MINOR: connection: adjust CO_FL_NOTIFY_DATA after removal of flags\n    - MINOR: ist: add a macro to ease const array initialization\n    - BUG/MEDIUM: server: unwanted behavior leaving maintenance mode on tracked stopping server\n    - BUG/MEDIUM: server: unwanted behavior leaving maintenance mode on tracked stopping server (take2)\n    - BUG/MINOR: log: fixing small memory leak in error code path.\n    - BUG/MINOR: contrib/halog: fixing small memory leak\n    - BUG/MEDIUM: tcp/http: set-dst-port action broken\n    - CLEANUUP: checks: don't set conn->handle.fd to -1\n    - BUG/MEDIUM: tcp-check: properly indicate polling state before performing I/O\n    - BUG/MINOR: tcp-check: don't quit with pending data in the send buffer\n    - BUG/MEDIUM: tcp-check: don't call tcpcheck_main() from the I/O handlers!\n    - BUG/MINOR: unix: properly check for octal digits in the \"mode\" argument\n    - MINOR: checks: make chk_report_conn_err() take a check, not a connection\n    - CLEANUP: checks: remove misleading comments and statuses for external process\n    - CLEANUP: checks: don't report report the fork() error twice\n    - CLEANUP: checks: do not allocate a connection for process checks\n    - TESTS: checks: add a simple test config for external checks\n    - BUG/MINOR: tcp-check: don't initialize then break a connection starting with a comment\n    - TESTS: checks: add a simple test config for tcp-checks\n    - MINOR: tcp-check: make tcpcheck_main() take a check, not a connection\n    - MINOR: checks: don't create then kill a dummy connection before tcp-checks\n    - MEDIUM: checks: make tcpcheck_main() indicate if it recycled a connection\n    - MEDIUM: checks: do not allocate a permanent connection anymore\n    - BUG/MEDIUM: cli: fix \"show fd\" crash when dumping closed FDs\n    - BUG/MEDIUM: http: Return an error when url_dec sample converter failed\n    - BUG/MAJOR: stream-int: don't re-arm recv if send fails\n    - BUILD/MINOR: 51d: fix warning when building with 51Degrees release version 3.2.12.12\n    - DOC: 51d: add 51Degrees git URL that points to release version 3.2.12.12\n    - DOC: 51d: Updated git URL and instructions for getting Hash Trie data files.\n    - MINOR: compiler: restore the likely() wrapper for gcc 5.x\n    - MINOR: session: remove the list of streams from struct session\n    - DOC: fix some typos\n    - MINOR: server: add the srv_queue() sample fetch method\n    - MINOR: payload: add new sample fetch functions to process distcc protocol\n    - MAJOR: servers: propagate server status changes asynchronously.\n    - BUG/MEDIUM: ssl: fix OCSP expiry calculation\n    - BUG/MINOR: stream-int: don't set MSG_MORE on SHUTW_NOW without AUTO_CLOSE\n    - MINOR: server: Handle weight increase in consistent hash.\n    - MINOR: checks: Add a new keyword to specify a SNI when doing SSL checks.\n    - BUG/MINOR: tools: fix my_htonll() on x86_64\n    - BUG/MINOR: stats: Clear a bit more counters with in cli_parse_clear_counters().\n    - BUG/MAJOR: lua: scheduled task is freezing.\n    - MINOR: buffer: add bo_del() to delete a number of characters from output\n    - MINOR: buffer: add a function to match against string patterns\n    - MINOR: buffer: add two functions to inject data into buffers\n    - MINOR: buffer: add buffer_space_wraps()\n    - REORG: channel: finally rename the last bi_* / bo_* functions\n    - MINOR: buffer: add bo_getblk() and bo_getblk_nc()\n    - MINOR: channel: make use of bo_getblk{,_nc} for their channel equivalents\n    - MINOR: channel: make the channel be a const in all {ci,co}_get* functions\n    - MINOR: ist: add ist0() to add a trailing zero to a string.\n    - BUG/MEDIUM: log: check result details truncated.\n    - MINOR: buffer: make bo_getblk_nc() not return 2 for a full buffer\n    - REORG: http: move some very http1-specific parts to h1.{c,h}\n    - REORG: http: move the HTTP/1 chunk parser to h1.{c,h}\n    - REORG: http: move the HTTP/1 header block parser to h1.c\n    - MEDIUM: http: make the chunk size parser only depend on the buffer\n    - MEDIUM: http: make the chunk crlf parser only depend on the buffer\n    - MINOR: h1: add struct h1m for basic HTTP/1 messages\n    - MINOR: http: add very simple header management based on double strings\n    - MEDIUM: h1: reimplement the http/1 response parser for the gateway\n    - REORG: connection: rename CO_FL_DATA_* -> CO_FL_XPRT_*\n    - MEDIUM: connection: make conn_sock_shutw() aware of lingering\n    - MINOR: connection: ensure conn_ctrl_close() also resets the fd\n    - MINOR: connection: add conn_stop_tracking() to disable tracking\n    - MINOR: tcp: use conn_full_close() instead of conn_force_close()\n    - MINOR: unix: use conn_full_close() instead of conn_force_close()\n    - MINOR: checks: use conn_full_close() instead of conn_force_close()\n    - MINOR: session: use conn_full_close() instead of conn_force_close()\n    - MINOR: stream: use conn_full_close() instead of conn_force_close()\n    - MINOR: stream: use conn_full_close() instead of conn_force_close()\n    - MINOR: backend: use conn_full_close() instead of conn_force_close()\n    - MINOR: stream-int: use conn_full_close() instead of conn_force_close()\n    - MINOR: connection: remove conn_force_close()\n    - BUG/MINOR: ssl: ocsp response with 'revoked' status is correct\n\n2017/06/02 : 1.8-dev2\n    - CLEANUP: server: moving netinet/tcp.h inclusion\n    - DOC: changed \"block\"(deprecated) examples to http-request deny\n    - DOC: add few comments to examples.\n    - DOC: update sample code for PROXY protocol\n    - DOC: mention lighttpd 1.4.46 implements PROXY\n    - MINOR server: Restrict dynamic cookie check to the same proxy.\n    - DOC: stick-table is available in frontend sections\n    - BUG/MINOR: server : no transparent proxy for DragonflyBSD\n    - BUILD/MINOR: stats: remove unexpected argument to stats_dump_json_header()\n    - BUILD/MINOR: tools: fix build warning in debug_hexdump()\n    - BUG/MINOR: dns: Wrong address family used when creating IPv6 sockets.\n    - BUG/MINOR: config: missing goto out after parsing an incorrect ACL character\n    - BUG/MINOR: arg: don't try to add an argument on failed memory allocation\n    - MEDIUM: server: Inherit CLI weight changes and agent-check weight responses\n    - BUG/MEDIUM: arg: ensure that we properly unlink unresolved arguments on error\n    - BUG/MEDIUM: acl: don't free unresolved args in prune_acl_expr()\n    - BUG/MEDIUM: servers: unbreak server weight propagation\n    - MINOR: lua: ensure the memory allocator is used all the time\n    - MINOR: cli: Add a command to send listening sockets.\n    - MINOR: global: Add an option to get the old listening sockets.\n    - MINOR: tcp: When binding socket, attempt to reuse one from the old proc.\n    - MINOR: doc: document the -x flag\n    - MINOR: proxy: Don't close FDs if not our proxy.\n    - MINOR: socket transfer: Set a timeout on the socket.\n    - MINOR: systemd wrapper: add support for passing the -x option.\n    - BUG/MINOR: server: Fix a wrong error message during 'usesrc' keyword parsing.\n    - BUG/MAJOR: Broken parsing for valid keywords provided after 'source' setting.\n    - CLEANUP: logs: typo: simgle => single\n    - BUG/MEDIUM: acl: proprely release unused args in prune_acl_expr()\n    - MEDIUM: config: don't check config validity when there are fatal errors\n    - BUG/MAJOR: Use -fwrapv.\n    - BUG/MINOR: server: don't use \"proxy\" when px is really meant.\n    - BUG/MEDIUM: http: Drop the connection establishment when a redirect is performed\n    - BUG/MINOR: server: missing default server 'resolvers' setting duplication.\n    - MINOR: server: Extract the code responsible of copying default-server settings.\n    - MINOR: server: Extract the code which finalizes server initializations after 'server' lines parsing.\n    - MINOR: server: Add 'server-template' new keyword supported in backend sections.\n    - MINOR: server: Add server_template_init() function to initialize servers from a templates.\n    - DOC: Add documentation for new \"server-template\" keyword.\n    - DOC: add layer 4 links/cross reference to \"block\" keyword.\n    - DOC: errloc/errorloc302/errorloc303 missing status codes.\n    - BUG/MEDIUM: lua: memory leak\n    - CLEANUP: lua: remove test\n    - BUG/MINOR: hash-balance-factor isn't effective in certain circumstances\n    - BUG/MINOR: change header-declared function to static inline\n    - REORG: spoe: move spoe_encode_varint / spoe_decode_varint from spoe to common\n    - MINOR: Add binary encoding request header sample fetch\n    - MINOR: proto-http: Add sample fetch wich returns all HTTP headers\n    - MINOR: Add ModSecurity wrapper as contrib\n    - BUG/MINOR: ssl: fix warnings about methods for opensslv1.1.\n    - DOC: update RFC references\n    - CONTRIB: tcploop: add action \"X\" to execute a command\n    - MINOR: server: cli: Add server FQDNs to server-state file and stats socket.\n    - BUG/MINOR: contrib/mod_security: fix build on FreeBSD\n    - BUG/MINOR: checks: don't send proxy protocol with agent checks\n    - MINOR: ssl: add prefer-client-ciphers\n    - MEDIUM: ssl: revert ssl/tls version settings relative to default-server.\n    - MEDIUM: ssl: ssl_methods implementation is reworked and factored for min/max tlsxx\n    - MEDIUM: ssl: calculate the real min/max TLS version and find holes\n    - MINOR: ssl: support TLSv1.3 for bind and server\n    - MINOR: ssl: show methods supported by openssl\n    - MEDIUM: ssl: add ssl-min-ver and ssl-max-ver parameters for bind and server\n    - MEDIUM: ssl: ssl-min-ver and ssl-max-ver compatibility.\n    - CLEANUP: retire obsoleted USE_GETSOCKNAME build option\n    - BUG/MAJOR: dns: Broken kqueue events handling (BSD systems).\n    - MINOR: sample: Add b64dec sample converter\n    - BUG/MEDIUM: lua: segfault if a converter or a sample doesn't return anything\n    - MINOR: cli: add ACCESS_LVL_MASK to store the access level\n    - MINOR: cli: add 'expose-fd listeners' to pass listeners FDs\n    - MEDIUM: proxy: zombify proxies only when the expose-fd socket is bound\n    - MEDIUM: ssl: add basic support for OpenSSL crypto engine\n    - MAJOR: ssl: add openssl async mode support\n    - MEDIUM: ssl: handle multiple async engines\n    - MINOR: boringssl: basic support for OCSP Stapling\n    - MEDIUM: mworker: replace systemd mode by master worker mode\n    - MEDIUM: mworker: handle reload and signals\n    - MEDIUM: mworker: wait mode on reload failure\n    - MEDIUM: mworker: try to guess the next stats socket to use with -x\n    - MEDIUM: mworker: exit-on-failure option\n    - MEDIUM: mworker: workers exit when the master leaves\n    - DOC: add documentation for the master-worker mode\n    - MEDIUM: systemd: Type=forking in unit file\n    - MAJOR: systemd-wrapper: get rid of the wrapper\n    - MINOR: log: Add logurilen tunable.\n    - CLEANUP: server.c: missing prototype of srv_free_dns_resolution\n    - MINOR: dns: smallest DNS fqdn size\n    - MINOR: dns: functions to manage memory for a DNS resolution structure\n    - MINOR: dns: parse_server() now uses srv_alloc_dns_resolution()\n    - REORG: dns: dns_option structure, storage of hostname_dn\n    - MINOR: dns: new snr_check_ip_callback function\n    - MAJOR: dns: save a copy of the DNS response in struct resolution\n    - MINOR: dns: implement a LRU cache for DNS resolutions\n    - MINOR: dns: make 'ancount' field to match the number of saved records\n    - MINOR: dns: introduce roundrobin into the internal cache (WIP)\n    - MAJOR/REORG: dns: DNS resolution task and requester queues\n    - BUILD: ssl: fix build with OPENSSL_NO_ENGINE\n    - MINOR: Add Mod Defender integration as contrib\n    - CLEANUP: str2mask return code comment: non-zero -> zero.\n    - MINOR: tools: make debug_hexdump() use a const char for the string\n    - MINOR: tools: make debug_hexdump() take a string prefix\n    - CLEANUP: connection: remove unused CO_FL_WAIT_DATA\n\n2017/04/03 : 1.8-dev1\n    - BUG/MEDIUM: proxy: return \"none\" and \"unknown\" for unknown LB algos\n    - BUG/MINOR: stats: make field_str() return an empty string on NULL\n    - DOC: Spelling fixes\n    - BUG/MEDIUM: http: Fix tunnel mode when the CONNECT method is used\n    - BUG/MINOR: http: Keep the same behavior between 1.6 and 1.7 for tunneled txn\n    - BUG/MINOR: filters: Protect args in macros HAS_DATA_FILTERS and IS_DATA_FILTER\n    - BUG/MINOR: filters: Invert evaluation order of HTTP_XFER_BODY and XFER_DATA analyzers\n    - BUG/MINOR: http: Call XFER_DATA analyzer when HTTP txn is switched in tunnel mode\n    - BUG/MAJOR: stream: fix session abort on resource shortage\n    - OPTIM: stream-int: don't disable polling anymore on DONT_READ\n    - BUG/MINOR: cli: allow the backslash to be escaped on the CLI\n    - BUG/MEDIUM: cli: fix \"show stat resolvers\" and \"show tls-keys\"\n    - DOC: Fix map table's format\n    - DOC: Added 51Degrees conv and fetch functions to documentation.\n    - BUG/MINOR: http: don't send an extra CRLF after a Set-Cookie in a redirect\n    - DOC: mention that req_tot is for both frontends and backends\n    - BUG/MEDIUM: variables: some variable name can hide another ones\n    - MINOR: lua: Allow argument for actions\n    - BUILD: rearrange target files by build time\n    - CLEANUP: hlua: just indent functions\n    - MINOR: lua: give HAProxy variable access to the applets\n    - BUG/MINOR: stats: fix be/sessions/max output in html stats\n    - MINOR: proxy: Add fe_name/be_name fetchers next to existing fe_id/be_id\n    - DOC: lua: Documentation about some entry missing\n    - DOC: lua: Add documentation about variable manipulation from applet\n    - MINOR: Do not forward the header \"Expect: 100-continue\" when the option http-buffer-request is set\n    - DOC: Add undocumented argument of the trace filter\n    - DOC: Fix some typo in SPOE documentation\n    - MINOR: cli: Remove useless call to bi_putchk\n    - BUG/MINOR: cli: be sure to always warn the cli applet when input buffer is full\n    - MINOR: applet: Count number of (active) applets\n    - MINOR: task: Rename run_queue and run_queue_cur counters\n    - BUG/MEDIUM: stream: Save unprocessed events for a stream\n    - BUG/MAJOR: Fix how the list of entities waiting for a buffer is handled\n    - BUILD/MEDIUM: Fixing the build using LibreSSL\n    - BUG/MEDIUM: lua: In some case, the return of sample-fetches is ignored (2)\n    - SCRIPTS: git-show-backports: fix a harmless typo\n    - SCRIPTS: git-show-backports: add -H to use the hash of the commit message\n    - BUG/MINOR: stream-int: automatically release SI_FL_WAIT_DATA on SHUTW_NOW\n    - CLEANUP: applet/lua: create a dedicated ->fcn entry in hlua_cli context\n    - CLEANUP: applet/table: add an \"action\" entry in ->table context\n    - CLEANUP: applet: remove the now unused appctx->private field\n    - DOC: lua: documentation about time parser functions\n    - DOC: lua: improve links\n    - DOC: lua: section declared twice\n    - MEDIUM: cli: 'show cli sockets' list the CLI sockets\n    - BUG/MINOR: cli: \"show cli sockets\" wouldn't list all processes\n    - BUG/MINOR: cli: \"show cli sockets\" would always report process 64\n    - CLEANUP: lua: rename one of the lua appctx union\n    - BUG/MINOR: lua/cli: bad error message\n    - MEDIUM: lua: use memory pool for hlua struct in applets\n    - MINOR: lua/signals: Remove Lua part from signals.\n    - DOC: cli: show cli sockets\n    - MINOR: cli: automatically enable a CLI I/O handler when there's no parser\n    - CLEANUP: memory: remove the now unused cli_parse_show_pools() function\n    - CLEANUP: applet: group all CLI contexts together\n    - CLEANUP: stats: move a misplaced stats context initialization\n    - MINOR: cli: add two general purpose pointers and integers in the CLI struct\n    - MINOR: appctx/cli: remove the cli_socket entry from the appctx union\n    - MINOR: appctx/cli: remove the env entry from the appctx union\n    - MINOR: appctx/cli: remove the \"be\" entry from the appctx union\n    - MINOR: appctx/cli: remove the \"dns\" entry from the appctx union\n    - MINOR: appctx/cli: remove the \"server_state\" entry from the appctx union\n    - MINOR: appctx/cli: remove the \"tlskeys\" entry from the appctx union\n    - CONTRIB: tcploop: add limits.h to fix build issue with some compilers\n    - MINOR/DOC: lua: just precise one thing\n    - DOC: fix small typo in fe_id (backend instead of frontend)\n    - BUG/MINOR: Fix the sending function in Lua's cosocket\n    - BUG/MINOR: lua: memory leak executing tasks\n    - BUG/MINOR: lua: bad return code\n    - BUG/MINOR: lua: memleak when Lua/cli fails\n    - MEDIUM: lua: remove Lua struct from session, and allocate it with memory pools\n    - CLEANUP: haproxy: statify unexported functions\n    - MINOR: haproxy: add a registration for build options\n    - CLEANUP: wurfl: use the build options list to report it\n    - CLEANUP: 51d: use the build options list to report it\n    - CLEANUP: da: use the build options list to report it\n    - CLEANUP: namespaces: use the build options list to report it\n    - CLEANUP: tcp: use the build options list to report transparent modes\n    - CLEANUP: lua: use the build options list to report it\n    - CLEANUP: regex: use the build options list to report the regex type\n    - CLEANUP: ssl: use the build options list to report the SSL details\n    - CLEANUP: compression: use the build options list to report the algos\n    - CLEANUP: auth: use the build options list to report its support\n    - MINOR: haproxy: add a registration for post-check functions\n    - CLEANUP: checks: make use of the post-init registration to start checks\n    - CLEANUP: filters: use the function registration to initialize all proxies\n    - CLEANUP: wurfl: make use of the late init registration\n    - CLEANUP: 51d: make use of the late init registration\n    - CLEANUP: da: make use of the late init registration code\n    - MINOR: haproxy: add a registration for post-deinit functions\n    - CLEANUP: wurfl: register the deinit function via the dedicated list\n    - CLEANUP: 51d: register the deinitialization function\n    - CLEANUP: da: register the deinitialization function\n    - CLEANUP: wurfl: move global settings out of the global section\n    - CLEANUP: 51d: move global settings out of the global section\n    - CLEANUP: da: move global settings out of the global section\n    - MINOR: cfgparse: add two new functions to check arguments count\n    - MINOR: cfgparse: move parsing of \"ca-base\" and \"crt-base\" to ssl_sock\n    - MEDIUM: cfgparse: move all tune.ssl.* keywords to ssl_sock\n    - MEDIUM: cfgparse: move maxsslconn parsing to ssl_sock\n    - MINOR: cfgparse: move parsing of ssl-default-{bind,server}-ciphers to ssl_sock\n    - MEDIUM: cfgparse: move ssl-dh-param-file parsing to ssl_sock\n    - MEDIUM: compression: move the zlib-specific stuff from global.h to compression.c\n    - BUG/MEDIUM: ssl: properly reset the reused_sess during a forced handshake\n    - BUG/MEDIUM: ssl: avoid double free when releasing bind_confs\n    - BUG/MINOR: stats: fix be/sessions/current out in typed stats\n    - MINOR: tcp-rules: check that the listener exists before updating its counters\n    - MEDIUM: spoe: don't create a dummy listener for outgoing connections\n    - MINOR: listener: move the transport layer pointer to the bind_conf\n    - MEDIUM: move listener->frontend to bind_conf->frontend\n    - MEDIUM: ssl: remote the proxy argument from most functions\n    - MINOR: connection: add a new prepare_bind_conf() entry to xprt_ops\n    - MEDIUM: ssl_sock: implement ssl_sock_prepare_bind_conf()\n    - MINOR: connection: add a new destroy_bind_conf() entry to xprt_ops\n    - MINOR: ssl_sock: implement ssl_sock_destroy_bind_conf()\n    - MINOR: server: move the use_ssl field out of the ifdef USE_OPENSSL\n    - MINOR: connection: add a minimal transport layer registration system\n    - CLEANUP: connection: remove all direct references to raw_sock and ssl_sock\n    - CLEANUP: connection: unexport raw_sock and ssl_sock\n    - MINOR: connection: add new prepare_srv()/destroy_srv() entries to xprt_ops\n    - MINOR: ssl_sock: implement and use prepare_srv()/destroy_srv()\n    - CLEANUP: ssl: move tlskeys_finalize_config() to a post_check callback\n    - CLEANUP: ssl: move most ssl-specific global settings to ssl_sock.c\n    - BUG/MINOR: backend: nbsrv() should return 0 if backend is disabled\n    - BUG/MEDIUM: ssl: for a handshake when server-side SNI changes\n    - BUG/MINOR: systemd: potential zombie processes\n    - DOC: Add timings events schemas\n    - BUILD: lua: build failed on FreeBSD.\n    - MINOR: samples: add xx-hash functions\n    - MEDIUM: regex: pcre2 support\n    - BUG/MINOR: option prefer-last-server must be ignored in some case\n    - MINOR: stats: Support \"select all\" for backend actions\n    - BUG/MINOR: sample-fetches/stick-tables: bad type for the sample fetches sc*_get_gpt0\n    - BUG/MAJOR: channel: Fix the definition order of channel analyzers\n    - BUG/MINOR: http: report real parser state in error captures\n    - BUILD: scripts: automatically update the branch in version.h when releasing\n    - MINOR: tools: add a generic hexdump function for debugging\n    - BUG/MAJOR: http: fix risk of getting invalid reports of bad requests\n    - MINOR: http: custom status reason.\n    - MINOR: connection: add sample fetch \"fc_rcvd_proxy\"\n    - BUG/MINOR: config: emit a warning if http-reuse is enabled with incompatible options\n    - BUG/MINOR: tools: fix off-by-one in port size check\n    - BUG/MEDIUM: server: consider AF_UNSPEC as a valid address family\n    - MEDIUM: server: split the address and the port into two different fields\n    - MINOR: tools: make str2sa_range() return the port in a separate argument\n    - MINOR: server: take the destination port from the port field, not the addr\n    - MEDIUM: server: disable protocol validations when the server doesn't resolve\n    - BUG/MEDIUM: tools: do not force an unresolved address to AF_INET:0.0.0.0\n    - BUG/MINOR: ssl: EVP_PKEY must be freed after X509_get_pubkey usage\n    - BUG/MINOR: ssl: assert on SSL_set_shutdown with BoringSSL\n    - MINOR: Use \"500 Internal Server Error\" for 500 error/status code message.\n    - MINOR: proto_http.c 502 error txt typo.\n    - DOC: add deprecation notice to \"block\"\n    - MINOR: compression: fix -vv output without zlib/slz\n    - BUG/MINOR: Reset errno variable before calling strtol(3)\n    - MINOR: ssl: don't show prefer-server-ciphers output\n    - OPTIM/MINOR: config: Optimize fullconn automatic computation loading configuration\n    - BUG/MINOR: stream: Fix how backend-specific analyzers are set on a stream\n    - MAJOR: ssl: bind configuration per certificat\n    - MINOR: ssl: add curve suite for ECDHE negotiation\n    - MINOR: checks: Add agent-addr config directive\n    - MINOR: cli: Add possiblity to change agent config via CLI/socket\n    - MINOR: doc: Add docs for agent-addr configuration variable\n    - MINOR: doc: Add docs for agent-addr and agent-send CLI commands\n    - BUILD: ssl: fix to build (again) with boringssl\n    - BUILD: ssl: fix build on OpenSSL 1.0.0\n    - BUILD: ssl: silence a warning reported for ERR_remove_state()\n    - BUILD: ssl: eliminate warning with OpenSSL 1.1.0 regarding RAND_pseudo_bytes()\n    - BUILD: ssl: kill a build warning introduced by BoringSSL compatibility\n    - BUG/MEDIUM: tcp: don't poll for write when connect() succeeds\n    - BUG/MINOR: unix: fix connect's polling in case no data are scheduled\n    - MINOR: server: extend the flags to 32 bits\n    - BUG/MINOR: lua: Map.end are not reliable because \"end\" is a reserved keyword\n    - MINOR: dns: give ability to dns_init_resolvers() to close a socket when requested\n    - BUG/MAJOR: dns: restart sockets after fork()\n    - MINOR: chunks: implement a simple dynamic allocator for trash buffers\n    - BUG/MEDIUM: http: prevent redirect from overwriting a buffer\n    - BUG/MEDIUM: filters: Do not truncate HTTP response when body length is undefined\n    - BUG/MEDIUM: http: Prevent replace-header from overwriting a buffer\n    - BUG/MINOR: http: Return an error when a replace-header rule failed on the response\n    - BUG/MINOR: sendmail: The return of vsnprintf is not cleanly tested\n    - BUG/MAJOR: ssl: fix a regression in ssl_sock_shutw()\n    - BUG/MAJOR: lua segmentation fault when the request is like 'GET ?arg=val HTTP/1.1'\n    - BUG/MEDIUM: config: reject anything but \"if\" or \"unless\" after a use-backend rule\n    - MINOR: http: don't close when redirect location doesn't start with \"/\"\n    - MEDIUM: boringssl: support native multi-cert selection without bundling\n    - BUG/MEDIUM: ssl: fix verify/ca-file per certificate\n    - BUG/MEDIUM: ssl: switchctx should not return SSL_TLSEXT_ERR_ALERT_WARNING\n    - MINOR: ssl: removes SSL_CTX_set_ssl_version call and cleanup CTX creation.\n    - BUILD: ssl: fix build with -DOPENSSL_NO_DH\n    - MEDIUM: ssl: add new sample-fetch which captures the cipherlist\n    - MEDIUM: ssl: remove ssl-options from crt-list\n    - BUG/MEDIUM: ssl: in bind line, ssl-options after 'crt' are ignored.\n    - BUG/MINOR: ssl: fix cipherlist captures with sustainable SSL calls\n    - MINOR: ssl: improved cipherlist captures\n    - BUG/MINOR: spoe: Fix soft stop handler using a specific id for spoe filters\n    - BUG/MINOR: spoe: Fix parsing of arguments in spoe-message section\n    - MAJOR: spoe: Add support of pipelined and asynchronous exchanges with agents\n    - MINOR: spoe: Add support for pipelining/async capabilities in the SPOA example\n    - MINOR: spoe: Remove SPOE details from the appctx structure\n    - MINOR: spoe: Add status code in error variable instead of hardcoded value\n    - MINOR: spoe: Send a log message when an error occurred during event processing\n    - MINOR: spoe: Check the scope of sample fetches used in SPOE messages\n    - MEDIUM: spoe: Be sure to wakeup the good entity waiting for a buffer\n    - MINOR: spoe: Use the min of all known max_frame_size to encode messages\n    - MAJOR: spoe: Add support of payload fragmentation in NOTIFY frames\n    - MINOR: spoe: Add support for fragmentation capability in the SPOA example\n    - MAJOR: spoe: refactor the filter to clean up the code\n    - MINOR: spoe: Handle NOTIFY frames cancellation using ABORT bit in ACK frames\n    - REORG: spoe: Move struct and enum definitions in dedicated header file\n    - REORG: spoe: Move low-level encoding/decoding functions in dedicated header file\n    - MINOR: spoe: Improve implementation of the payload fragmentation\n    - MINOR: spoe: Add support of negation for options in SPOE configuration file\n    - MINOR: spoe: Add \"pipelining\" and \"async\" options in spoe-agent section\n    - MINOR: spoe: Rely on alertif_too_many_arg during configuration parsing\n    - MINOR: spoe: Add \"send-frag-payload\" option in spoe-agent section\n    - MINOR: spoe: Add \"max-frame-size\" statement in spoe-agent section\n    - DOC: spoe: Update SPOE documentation to reflect recent changes\n    - MINOR: config: warn when some HTTP rules are used in a TCP proxy\n    - BUG/MEDIUM: ssl: Clear OpenSSL error stack after trying to parse OCSP file\n    - BUG/MEDIUM: cli: Prevent double free in CLI ACL lookup\n    - BUG/MINOR: Fix \"get map <map> <value>\" CLI command\n    - MINOR: Add nbsrv sample converter\n    - CLEANUP: Replace repeated code to count usable servers with be_usable_srv()\n    - MINOR: Add hostname sample fetch\n    - CLEANUP: Remove comment that's no longer valid\n    - MEDIUM: http_error_message: txn->status / http_get_status_idx.\n    - MINOR: http-request tarpit deny_status.\n    - CLEANUP: http: make http_server_error() not set the status anymore\n    - MEDIUM: stats: Add JSON output option to show (info|stat)\n    - MEDIUM: stats: Add show json schema\n    - BUG/MAJOR: connection: update CO_FL_CONNECTED before calling the data layer\n    - MINOR: server: Add dynamic session cookies.\n    - MINOR: cli: Let configure the dynamic cookies from the cli.\n    - BUG/MINOR: checks: attempt clean shutw for SSL check\n    - CONTRIB: tcploop: make it build on FreeBSD\n    - CONTRIB: tcploop: fix time format to silence build warnings\n    - CONTRIB: tcploop: report action 'K' (kill) in usage message\n    - CONTRIB: tcploop: fix connect's address length\n    - CONTRIB: tcploop: use the trash instead of NULL for recv()\n    - BUG/MEDIUM: listener: do not try to rebind another process' socket\n    - BUG/MEDIUM server: Fix crash when dynamic is defined, but not key is provided.\n    - CLEANUP: config: Typo in comment.\n    - BUG/MEDIUM: filters: Fix channels synchronization in flt_end_analyze\n    - TESTS: add a test configuration to stress handshake combinations\n    - BUG/MAJOR: stream-int: do not depend on connection flags to detect connection\n    - BUG/MEDIUM: connection: ensure to always report the end of handshakes\n    - MEDIUM: connection: don't test for CO_FL_WAKE_DATA\n    - CLEANUP: connection: completely remove CO_FL_WAKE_DATA\n    - BUG: payload: fix payload not retrieving arbitrary lengths\n    - BUILD: ssl: simplify SSL_CTX_set_ecdh_auto compatibility\n    - BUILD: ssl: fix OPENSSL_NO_SSL_TRACE for boringssl and libressl\n    - BUG/MAJOR: http: fix typo in http_apply_redirect_rule\n    - MINOR: doc: 2.4. Examples should be 2.5. Examples\n    - BUG/MEDIUM: stream: fix client-fin/server-fin handling\n    - MINOR: fd: add a new flag HAP_POLL_F_RDHUP to struct poller\n    - BUG/MINOR: raw_sock: always perfom the last recv if RDHUP is not available\n    - OPTIM: poll: enable support for POLLRDHUP\n    - MINOR: kqueue: exclusively rely on the kqueue returned status\n    - MEDIUM: kqueue: take care of EV_EOF to improve polling status accuracy\n    - MEDIUM: kqueue: only set FD_POLL_IN when there are pending data\n    - DOC/MINOR: Fix typos in proxy protocol doc\n    - DOC: Protocol doc: add checksum, TLV type ranges\n    - DOC: Protocol doc: add SSL TLVs, rename CHECKSUM\n    - DOC: Protocol doc: add noop TLV\n    - MEDIUM: global: add a 'hard-stop-after' option to cap the soft-stop time\n    - MINOR: dns: improve DNS response parsing to use as many available records as possible\n    - BUG/MINOR: cfgparse: loop in tracked servers lists not detected by check_config_validity().\n    - MINOR: server: irrelevant error message with 'default-server' config file keyword.\n    - MINOR: server: Make 'default-server' support 'backup' keyword.\n    - MINOR: server: Make 'default-server' support 'check-send-proxy' keyword.\n    - CLEANUP: server: code alignement.\n    - MINOR: server: Make 'default-server' support 'non-stick' keyword.\n    - MINOR: server: Make 'default-server' support 'send-proxy' and 'send-proxy-v2 keywords.\n    - MINOR: server: Make 'default-server' support 'check-ssl' keyword.\n    - MINOR: server: Make 'default-server' support 'force-sslv3' and 'force-tlsv1[0-2]' keywords.\n    - CLEANUP: server: code alignement.\n    - MINOR: server: Make 'default-server' support 'no-ssl*' and 'no-tlsv*' keywords.\n    - MINOR: server: Make 'default-server' support 'ssl' keyword.\n    - MINOR: server: Make 'default-server' support 'send-proxy-v2-ssl*' keywords.\n    - CLEANUP: server: code alignement.\n    - MINOR: server: Make 'default-server' support 'verify' keyword.\n    - MINOR: server: Make 'default-server' support 'verifyhost' setting.\n    - MINOR: server: Make 'default-server' support 'check' keyword.\n    - MINOR: server: Make 'default-server' support 'track' setting.\n    - MINOR: server: Make 'default-server' support 'ca-file', 'crl-file' and"
        },
        {
          "name": "CONTRIBUTING",
          "type": "blob",
          "size": 54.5185546875,
          "content": "                    HOW TO GET YOUR CODE ACCEPTED IN HAPROXY\n                   READ THIS CAREFULLY BEFORE SUBMITTING CODE\n\nTHIS DOCUMENT PROVIDES SOME RULES TO FOLLOW WHEN SENDING CONTRIBUTIONS. PATCHES\nNOT FOLLOWING THESE RULES WILL SIMPLY BE IGNORED IN ORDER TO PROTECT ALL OTHER\nRESPECTFUL CONTRIBUTORS' VALUABLE TIME.\n\n\nAbstract\n--------\n\nIf you have never contributed to HAProxy before, or if you did so and noticed\nthat nobody seems to be interested in reviewing your submission, please do read\nthis long document carefully. HAProxy maintainers are particularly demanding on\nrespecting certain simple rules related to general code and documentation style\nas well as splitting your patches and providing high quality commit messages.\nThe reason behind this is that your patch will be met multiple times in the\nfuture, when doing some backporting work or when bisecting a bug, and it is\ncritical that anyone can quickly decide if the patch is right, wrong, if it\nmisses something, if it must be reverted or needs to be backported. Maintainers\nare generally benevolent with newcomers and will help them provided their work\nindicates they have at least read this document. Some have improved over time,\nto the point of being totally trusted and gaining commit access so they don't\nneed to depend on anyone to pick their code. On the opposite, those who insist\nnot making minimal efforts however will simply be ignored.\n\n\nBackground\n----------\n\nHAProxy is a community-driven project. But like most highly technical projects\nit takes a lot of time to develop the skills necessary to be autonomous in the\nproject, and there is a very small core team helped by a small set of very\nactive participants. While most of the core team members work on the code as\npart of their day job, most participants do it on a voluntary basis during\ntheir spare time. The ideal model for developers is to spend their time:\n  1) developing new features\n  2) fixing bugs\n  3) doing maintenance backports\n  4) reviewing other people's code\n\nIt turns out that on a project like HAProxy, like many other similarly complex\nprojects, the time spent is exactly the opposite:\n  1) reviewing other people's code\n  2) doing maintenance backports\n  3) fixing bugs\n  4) developing new features\n\nA large part of the time spent reviewing code often consists in giving basic\nrecommendations that are already explained in this file. In addition to taking\ntime, it is not appealing for people willing to spend one hour helping others\nto do the same thing over and over instead of discussing the code design, and\nit tends to delay the start of code reviews.\n\nRegarding backports, they are necessary to provide a set of stable branches\nthat are deployed in production at many places. Load balancers are complex and\nnew features often induce undesired side effects in other areas, which we will\ncall bugs. Thus it's common for users to stick to a branch featuring everything\nthey need and not to upgrade too often. This backporting job is critical to the\necosystem's health and must be done regularly. Very often the person devoting\nsome time on backports has little to no information about the relevance (let\nalone importance) of a patch and is unlikely to be an expert in the area\naffected by the patch. It's the role of the commit message to explain WHAT\nproblem the patch tries to solve, WHY it is estimated that it is a problem, and\nHOW it tries to address it. With these elements, the person in charge of the\nbackports can decide whether or not to pick the patch. And if the patch does\nnot apply (which is common for older versions) they have information in the\ncommit message about the principle and choices that the initial developer made\nand will try to adapt the patch sticking to these principles. Thus, the time\nspent backporting patches solely depends on the code quality and the commit\nmessage details and accuracy.\n\nWhen it turns to fixing bugs, before declaring a bug, there is an analysis\nphase. It starts with \"is this behaviour expected\", \"is it normal\", \"under what\ncircumstances does it happen\", \"when did it start to happen\", \"was it intended\",\n\"was it just overlooked\", and \"how to fix it without breaking the initial\nintent\". A utility called \"git bisect\" is usually involved in determining when\nthe behaviour started to happen. It determines the first patch which introduced\nthe new behaviour. If the patch is huge, touches many areas, is really difficult\nto read because it needlessly reindents code or adds/removes line breaks out of\ncontext, it will be very difficult to figure what part of this patch broke the\nbehaviour. Then once the part is figured, if the commit message doesn't provide\na detailed description about the intent of the patch, i.e. the problem it was\ntrying to solve, why and how, the developer landing on that patch will really\nfeel powerless. And very often in this case, the fix for the problem will break\nsomething else or something that depended on the original patch.\n\nBut contrary to what it could look like, providing great quality patches is not\ndifficult, and developers will always help contributors improve their patches\nquality because it's in their interest as well. History has shown that first\ntime contributors can provide an excellent work when they have carefully read\nthis document, and that people coming from projects with different practices\ncan grow from first-time contributor to trusted committer in about 6 months.\n\n\nPreparation\n-----------\n\nIt is possible that you'll want to add a specific feature to satisfy your needs\nor one of your customers'. Contributions are welcome, however maintainers are\noften very picky about changes. Patches that change massive parts of the code,\nor that touch the core parts without any good reason will generally be rejected\nif those changes have not been discussed first.\n\nThe proper place to discuss your changes is the HAProxy Mailing List. There are\nenough skilled readers to catch hazardous mistakes and to suggest improvements.\nThere is no other place where you'll find as many skilled people on the project,\nand these people can help you get your code integrated quickly. You can\nsubscribe to it by sending an empty e-mail at the following address :\n\n                        haproxy+subscribe@formilux.org\n\nIt is not even necessary to subscribe, you can post there and verify via the\npublic list archives that your message was properly delivered. In this case you\nshould indicate in your message that you'd like responders to keep you CCed.\nPlease visit http://haproxy.org/ to figure available options to join the list.\n\nIf you have an idea about something to implement, *please* discuss it on the\nlist first. It has already happened several times that two persons did the same\nthing simultaneously. This is a waste of time for both of them. It's also very\ncommon to see some changes rejected because they're done in a way that will\nconflict with future evolutions, or that does not leave a good feeling. It's\nalways unpleasant for the person who did the work, and it is unpleasant in\ngeneral because people's time and efforts are valuable and would be better\nspent working on something else. That would not happen if these were discussed\nfirst. There is no problem posting work in progress to the list, it happens\nquite often in fact. Just prefix your mail subject with \"RFC\" (it stands for\n\"request for comments\") and everyone will understand you'd like some opinion\non your work in progress. Also, don't waste your time with the doc when\nsubmitting patches for review, only add the doc with the patch you consider\nready to merge (unless you need some help on the doc itself, of course).\n\nAnother important point concerns code portability. HAProxy requires gcc as the\nC compiler, and may or may not work with other compilers. However it's known to\nbuild using gcc 2.95 or any later version. As such, it is important to keep in\nmind that certain facilities offered by recent versions must not be used in the\ncode:\n\n  - declarations mixed in the code (requires gcc >= 3.x and is a bad practice)\n  - GCC builtins without checking for their availability based on version and\n    architecture ;\n  - assembly code without any alternate portable form for other platforms\n  - use of stdbool.h, \"bool\", \"false\", \"true\" : simply use \"int\", \"0\", \"1\"\n  - in general, anything which requires C99 (such as declaring variables in\n    \"for\" statements)\n\nSince most of these restrictions are just a matter of coding style, it is\nnormally not a problem to comply. Please read doc/coding-style.txt for all the\ndetails.\n\nWhen modifying some optional subsystem (SSL, Lua, compression, device detection\nengines), please make sure the code continues to build (and to work) when these\nfeatures are disabled. Similarly, when modifying the SSL stack, please always\nensure that supported OpenSSL versions continue to build and to work, especially\nif you modify support for alternate libraries. Clean support for the legacy\nOpenSSL libraries is mandatory, support for its derivatives is a bonus and may\noccasionally break eventhough a great care is taken. In other words, if you\nprovide a patch for OpenSSL you don't need to test its derivatives, but if you\nprovide a patch for a derivative you also need to test with OpenSSL.\n\nIf your work is very confidential and you can't publicly discuss it, you can\nalso mail willy@haproxy.org directly about it, but your mail may be waiting\nseveral days in the queue before you get a response, if you get a response at\nall. Retransmit if you don't get a response by one week. Please note that\ndirect sent e-mails to this address for non-confidential subjects may simply\nbe forwarded to the list or be deleted without notification. An auto-responder\nbot is in place to try to detect e-mails from people asking for help and to\nredirect them to the mailing list. Do not be surprised if this happens to you.\n\nIf you'd like a feature to be added but you think you don't have the skills to\nimplement it yourself, you should follow these steps :\n\n    1. discuss the feature on the mailing list. It is possible that someone\n       else has already implemented it, or that someone will tell you how to\n       proceed without it, or even why not to do it. It is also possible that\n       in fact it's quite easy to implement and people will guide you through\n       the process. That way you'll finally have YOUR patch merged, providing\n       the feature YOU need.\n\n    2. if you really can't code it yourself after discussing it, then you may\n       consider contacting someone to do the job for you. Some people on the\n       list might sometimes be OK with trying to do it.\n\nThe version control system used by the project (Git) keeps authorship\ninformation in the form of the patch author's e-mail address. This way you will\nbe credited for your work in the project's history. If you contract with\nsomeone to implement your idea you may have to discuss such modalities with\nthe person doing the work as by default this person will be mentioned as the\nwork's author.\n\n\nRules: the 12 laws of patch contribution\n----------------------------------------\n\nPeople contributing patches must apply the following rules. That may sound heavy\nat the beginning but it's common sense more than anything else and contributors\ndo not think about them anymore after a few patches.\n\n1) Comply with the license\n\n   Before modifying some code, you have read the LICENSE file (\"main license\")\n   coming with the sources, and all the files this file references. Certain\n   files may be covered by different licenses, in which case it will be\n   indicated in the files themselves. In any case, you agree to respect these\n   licenses and to contribute your changes under the same licenses. If you want\n   to create new files, they will be under the main license, or any license of\n   your choice that you have verified to be compatible with the main license,\n   and that will be explicitly mentioned in the affected files. The project's\n   maintainers are free to reject contributions proposing license changes they\n   feel are not appropriate or could cause future trouble.\n\n2) Develop on development branch, not stable ones\n\n   Your work may only be based on the latest development version. No development\n   is made on a stable branch. If your work needs to be applied to a stable\n   branch, it will first be applied to the development branch and only then will\n   be backported to the stable branch. You are responsible for ensuring that\n   your work correctly applies to the development version. If at any moment you\n   are going to work on restructuring something important which may impact other\n   contributors, the rule that applies is that the first sent is the first\n   served. However it is considered good practice and politeness to warn others\n   in advance if you know you're going to make changes that may force them to\n   re-adapt their code, because they did probably not expect to have to spend\n   more time discovering your changes and rebasing their work.\n\n3) Read and respect the coding style\n\n   You have read and understood \"doc/coding-style.txt\", and you're actively\n   determined to respect it and to enforce it on your coworkers if you're going\n   to submit a team's work. We don't care what text editor you use, whether it's\n   an hex editor, cat, vi, emacs, Notepad, Word, or even Eclipse. The editor is\n   only the interface between you and the text file. What matters is what is in\n   the text file in the end. The editor is not an excuse for submitting poorly\n   indented code, which only proves that the person has no consideration for\n   quality and/or has done it in a hurry (probably worse). Please note that most\n   bugs were found in low-quality code. Reviewers know this and tend to be much\n   more reluctant to accept poorly formatted code because by experience they\n   won't trust their author's ability to write correct code. It is also worth\n   noting that poor quality code is painful to read and may result in nobody\n   willing to waste their time even reviewing your work.\n\n4) Present clean work\n\n   The time it takes for you to polish your code is always much smaller than the\n   time it takes others to do it for you, because they always have to wonder if\n   what they see is intended (meaning they didn't understand something) or if it\n   is a mistake that needs to be fixed. And since there are less reviewers than\n   submitters, it is vital to spread the effort closer to where the code is\n   written and not closer to where it gets merged. For example if you have to\n   write a report for a customer that your boss wants to review before you send\n   it to the customer, will you throw on his desk a pile of paper with stains,\n   typos and copy-pastes everywhere ? Will you say \"come on, OK I made a mistake\n   in the company's name but they will find it by themselves, it's obvious it\n   comes from us\" ? No. When in doubt, simply ask for help on the mailing list.\n\n5) Documentation is very important\n\n   There are four levels of importance of quality in the project :\n\n   - The most important one, and by far, is the quality of the user-facing\n     documentation. This is the first contact for most users and it immediately\n     gives them an accurate idea of how the project is maintained. Dirty docs\n     necessarily belong to a dirty project. Be careful to the way the text you\n     add is presented and indented. Be very careful about typos, usual mistakes\n     such as double consonants when only one is needed or \"it's\" instead of\n     \"its\", don't mix US English and UK English in the same paragraph, etc.\n     When in doubt, check in a dictionary. Fixes for existing typos in the doc\n     are always welcome and chasing them is a good way to become familiar with\n     the project and to get other participants' respect and consideration.\n\n   - The second most important level is user-facing messages emitted by the\n     code. You must try to see all the messages your code produces to ensure\n     they are understandable outside of the context where you wrote them,\n     because the user often doesn't expect them. That's true for warnings, and\n     that's even more important for errors which prevent the program from\n     working and which require an immediate and well understood fix in the\n     configuration. It's much better to say \"line 35: compression level must be\n     an integer between 1 and 9\" than \"invalid argument at line 35\". In HAProxy,\n     error handling roughly represents half of the code, and that's about 3/4 of\n     the configuration parser. Take the time to do something you're proud of. A\n     good rule of thumb is to keep in mind that your code talks to a human and\n     tries to teach them how to proceed. It must then speak like a human.\n\n   - The third most important level is the code and its accompanying comments,\n     including the commit message which is a complement to your code and\n     comments. It's important for all other contributors that the code is\n     readable, fluid, understandable and that the commit message describes what\n     was done, the choices made, the possible alternatives you thought about,\n     the reason for picking this one and its limits if any. Comments should be\n     written where it's easy to have a doubt or after some error cases have been\n     wiped out and you want to explain what possibilities remain. All functions\n     must have a comment indicating what they take on input and what they\n     provide on output. Please adjust the comments when you copy-paste a\n     function or change its prototype, this type of lazy mistake is too common\n     and very confusing when reading code later to debug an issue. Do not forget\n     that others will feel really angry at you when they have to dig into your\n     code for a bug that your code caused and they feel like this code is dirty\n     or confusing, that the commit message doesn't explain anything useful and\n     that the patch should never have been accepted in the first place. That\n     will strongly impact your reputation and will definitely affect your\n     chances to contribute again!\n\n   - The fourth level of importance is in the technical documentation that you\n     may want to add with your code. Technical documentation is always welcome\n     as it helps others make the best use of your work and to go exactly in the\n     direction you thought about during the design. This is also what reduces\n     the risk that your design gets changed in the near future due to a misuse\n     and/or a poor understanding. All such documentation is actually considered\n     as a bonus. It is more important that this documentation exists than that\n     it looks clean. Sometimes just copy-pasting your draft notes in a file to\n     keep a record of design ideas is better than losing them. Please do your\n     best so that other ones can read your doc. If these docs require a special\n     tool such as a graphics utility, ensure that the file name makes it\n     unambiguous how to process it. So there are no rules here for the contents,\n     except one.  Please write the date in your file. Design docs tend to stay\n     forever and to remain long after they become obsolete. At this point that\n     can cause harm more than it can help. Writing the date in the document\n     helps developers guess the degree of validity and/or compare them with the\n     date of certain commits touching the same area.\n\n6) US-ASCII only!\n\n   All text files and commit messages are written using the US-ASCII charset.\n   Please be careful that your contributions do not contain any character not\n   printable using this charset, as they will render differently in different\n   editors and/or terminals. Avoid latin1 and more importantly UTF-8 which some\n   editors tend to abuse to replace some US-ASCII characters with their\n   typographic equivalent which aren't readable anymore in other editors. The\n   only place where alternative charsets are tolerated is in your name in the\n   commit message, but it's at your own risk as it can be mangled during the\n   merge. Anyway if you have an e-mail address, you probably have a valid\n   US-ASCII representation for it as well.\n\n7) Comments\n\n   Be careful about comments when you move code around. It's not acceptable that\n   a block of code is moved to another place leaving irrelevant comments at the\n   old place, just like it's not acceptable that a function is duplicated without\n   the comments being adjusted. The example below started to become quite common\n   during the 1.6 cycle, it is not acceptable and wastes everyone's time :\n\n      /* Parse switching <str> to build rule <rule>. Returns 0 on error. */\n      int parse_switching_rule(const char *str, struct rule *rule)\n      {\n       ...\n      }\n\n      /* Parse switching <str> to build rule <rule>. Returns 0 on error. */\n      void execute_switching_rule(struct rule *rule)\n      {\n       ...\n      }\n\n   This patch is not acceptable either (and it's unfortunately not that rare) :\n\n    +   if (!session || !arg || list_is_empty(&session->rules->head))\n    +         return 0;\n    +\n        /* Check if session->rules is valid before dereferencing it */\n        if (!session->rules_allocated)\n              return 0;\n\n    -   if (!arg || list_is_empty(&session->rules->head))\n    -         return 0;\n    -\n\n8) Short, readable identifiers\n\n   Limit the length of your identifiers in the code. When your identifiers start\n   to sound like sentences, it's very hard for the reader to keep on track with\n   what operation they are observing. Also long names force expressions to fit\n   on several lines which also cause some difficulties to the reader. See the\n   example below :\n\n       int file_name_len_including_global_path;\n       int file_name_len_without_global_path;\n       int global_path_len_or_zero_if_default;\n\n       if (global_path)\n               global_path_len_or_zero_if_default = strlen(global_path);\n       else\n               global_path_len_or_zero_if_default = 0;\n\n       file_name_len_without_global_path = strlen(file_name);\n       file_name_len_including_global_path =\n               file_name_len_without_global_path + 1 + /* for '/' */\n               global_path_len_or_zero_if_default ?\n                       global_path_len_or_zero_if_default : default_path_len;\n\n   Compare it to this one :\n\n       int f, p;\n\n       p = global_path ? strlen(global_path) : default_path_len;\n       f = p + 1 + strlen(file_name);  /* 1 for '/' */\n\n   A good rule of thumb is that if your identifiers start to contain more than\n   3 words or more than 15 characters, they can become confusing. For function\n   names it's less important especially if these functions are rarely used or\n   are used in a complex context where it is important to differentiate between\n   their multiple variants.\n\n9) Unified diff only\n\n   The best way to build your patches is to use \"git format-patch\". This means\n   that you have committed your patch to a local branch, with an appropriate\n   subject line and a useful commit message explaining what the patch attempts\n   to do. It is not strictly required to use git, but what is strictly required\n   is to have all these elements in the same mail, easily distinguishable, and\n   a patch in \"diff -up\" format (which is also the format used by Git). This\n   means the \"unified\" diff format must be used exclusively, and with the\n   function name printed in the diff header of each block. That significantly\n   helps during reviews. Keep in mind that most reviews are done on the patch\n   and not on the code after applying the patch. Your diff must keep some\n   context (3 lines above and 3 lines below) so that there's no doubt where the\n   code has to be applied. Don't change code outside of the context of your\n   patch (eg: take care of not adding/removing empty lines once you remove\n   your debugging code). If you are using Git (which is strongly recommended),\n   always use \"git show\" after doing a commit to ensure it looks good, and\n   enable syntax coloring that will automatically report in red the trailing\n   spaces or tabs that your patch added to the code and that must absolutely be\n   removed. These ones cause a real pain to apply patches later because they\n   mangle the context in an invisible way. Such patches with trailing spaces at\n   end of lines will be rejected.\n\n10) One patch per feature\n\n   Please cut your work in series of patches that can be independently reviewed\n   and merged. Each patch must do something on its own that you can explain to\n   someone without being ashamed of what you did. For example, you must not say\n   \"This is the patch that implements SSL, it was tricky\". There's clearly\n   something wrong there, your patch will be huge, will definitely break things\n   and nobody will be able to figure what exactly introduced the bug. However\n   it's much better to say \"I needed to add some fields in the session to store\n   the SSL context so this patch does this and doesn't touch anything else, so\n   it's safe\". Also when dealing with series, you will sometimes fix a bug that\n   one of your patches introduced. Please do merge these fixes (eg: using git\n   rebase -i and squash or fixup), as it is not acceptable to see patches which\n   introduce known bugs even if they're fixed later. Another benefit of cleanly\n   splitting patches is that if some of your patches need to be reworked after\n   a review, the other ones can still be merged so that you don't need to care\n   about them anymore. When sending multiple patches for review, prefer to send\n   one e-mail per patch than all patches in a single e-mail. The reason is that\n   not everyone is skilled in all areas nor has the time to review everything\n   at once. With one patch per e-mail, it's easy to comment on a single patch\n   without giving an opinion on the other ones, especially if a long thread\n   starts about one specific patch on the mailing list. \"git send-email\" does\n   that for you though it requires a few trials before getting it right.\n\n   If you can, please always put all the bug fixes at the beginning of the\n   series. This often makes it easier to backport them because they will not\n   depend on context that your other patches changed. As a hint, if you can't\n   do this, there are little chances that your bug fix can be backported.\n\n11) Real commit messages please!\n\n   The commit message is how you're trying to convince a maintainer to adopt\n   your work and maintain it as long as possible. A dirty commit message almost\n   always comes with dirty code. Too short a commit message indicates that too\n   short an analysis was done and that side effects are extremely likely to be\n   encountered. It's the maintainer's job to decide to accept this work in its\n   current form or not, with the known constraints. Some patches which rework\n   architectural parts or fix sensitive bugs come with 20-30 lines of design\n   explanations, limitations, hypothesis or even doubts, and despite this it\n   happens when reading them 6 months later while trying to identify a bug that\n   developers still miss some information about corner cases.\n\n   So please properly format your commit messages. To get an idea, just run\n   \"git log\" on the file you've just modified. Patches always have the format\n   of an e-mail made of a subject, a description and the actual patch. If you\n   are sending a patch as an e-mail formatted this way, it can quickly be\n   applied with limited effort so that's acceptable :\n\n     - A subject line (may wrap to the next line, but please read below)\n     - an empty line (subject delimiter)\n     - a non-empty description (the body of the e-mail)\n     - the patch itself\n\n   The subject describes the \"What\" of the change ; the description explains\n   the \"why\", the \"how\" and sometimes \"what next\". For example a commit message\n   looking like this will be rejected :\n\n     | From: Mr Foobar <foobar@example.com>\n     | Subject: BUG: fix typo in ssl_sock\n     |\n\n   This one as well (too long subject, not the right place for the details) :\n\n     | From: Mr Foobar <foobar@example.com>\n     | Subject: BUG/MEDIUM: ssl: use an error flag to prevent ssl_read() from\n     |    returning 0 when dealing with large buffers because that can cause\n     |    an infinite loop\n     |\n\n   This one ought to be used instead :\n\n     | From: Mr Foobar <foobar@example.com>\n     | Subject: BUG/MEDIUM: ssl: fix risk of infinite loop in ssl_sock\n     |\n     | ssl_read() must not return 0 on error or the caller may loop forever.\n     | Instead we add a flag to the connection to notify about the error and\n     | check it at all call places. This situation can only happen with large\n     | buffers so a workaround is to limit buffer sizes. Another option would\n     | have been to return -1 but it required to use signed ints everywhere\n     | and would have made the patch larger and riskier. This fix should be\n     | backported to versions 1.2 and upper.\n\n   It is important to understand that for any reader to guess the text above\n   when it's absent, it will take a huge amount of time. If you made the\n   analysis leading to your patch, you must explain it, including the ideas\n   you dropped if you had a good reason for this.\n\n   While it's not strictly required to use Git, it is strongly recommended\n   because it helps you do the cleanest job with the least effort. But if you\n   are comfortable with writing clean e-mails and inserting your patches, you\n   don't need to use Git.\n\n   But in any case, it is important that there is a clean description of what\n   the patch does, the motivation for what it does, why it's the best way to do\n   it, its impacts, and what it does not yet cover. And this is particularly\n   important for bugs. A patch tagged \"BUG\" must absolutely explain what the\n   problem is, why it is considered as a bug. Anybody, even non-developers,\n   should be able to tell whether or not a patch is likely to address an issue\n   they are facing. Indicating what the code will do after the fix doesn't help\n   if it does not say what problem is encountered without the patch. Note that\n   in some cases the bug is purely theorical and observed by reading the code.\n   In this case it's perfectly fine to provide an estimate about possible\n   effects. Also, in HAProxy, like many projects which take a great care of\n   maintaining stable branches, patches are reviewed later so that some of them\n   can be backported to stable releases.\n\n   While reviewing hundreds of patches can seem cumbersome, with a proper\n   formatting of the subject line it actually becomes very easy. For example,\n   here's how one can find patches that need to be reviewed for backports (bugs\n   and doc) between since commit ID 827752e :\n\n       $ git log --oneline 827752e.. | grep 'BUG\\|DOC'\n       0d79cf6 DOC: fix function name\n       bc96534 DOC: ssl: missing LF\n       10ec214 BUG/MEDIUM: lua: the lua function Channel:close() causes a segf\n       bdc97a8 BUG/MEDIUM: lua: outgoing connection was broken since 1.6-dev2\n       ba56d9c DOC: mention support for RFC 5077 TLS Ticket extension in start\n       f1650a8 DOC: clarify some points about SSL and the proxy protocol\n       b157d73 BUG/MAJOR: peers: fix current table pointer not re-initialized\n       e1ab808 BUG/MEDIUM: peers: fix wrong message id on stick table updates\n       cc79b00 BUG/MINOR: ssl: TLS Ticket Key rotation broken via socket comma\n       d8e42b6 DOC: add new file intro.txt\n       c7d7607 BUG/MEDIUM: lua: bad error processing\n       386a127 DOC: match several lua configuration option names to those impl\n       0f4eadd BUG/MEDIUM: counters: ensure that src_{inc,clr}_gpc0 creates a\n\n   It is made possible by the fact that subject lines are properly formatted and\n   always respect the same principle : one part indicating the nature and\n   severity of the patch, another one to indicate which subsystem is affected,\n   and the last one is a succinct description of the change, with the important\n   part at the beginning so that it's obvious what it does even when lines are\n   truncated like above. The whole stable maintenance process relies on this.\n   For this reason, it is mandatory to respect some easy rules regarding the\n   way the subject is built. Please see the section below for more information\n   regarding this formatting.\n\n   As a rule of thumb, your patch MUST NEVER be made only of a subject line,\n   it *must* contain a description. Even one or two lines, or indicating\n   whether a backport is desired or not. It turns out that single-line commits\n   are so rare in the Git world that they require special manual (hence\n   painful) handling when they are backported, and at least for this reason\n   it's important to keep this in mind.\n\n   Maintainers who pick your patch may slightly adjust the description as they\n   see fit. Do not see this as a failure to do a clean job, it just means they\n   think it will help them do their daily job this way. The code may also be\n   slightly adjusted before being merged (non-functional changes only, fix for\n   typos, tabs vs spaces for example), unless your patch contains a\n   Signed-off-By tag, in which case they will either modify it and mention the\n   changes after your Signed-off-By line, or (more likely) ask you to perform\n   these changes yourself. This ability to slightly adjust a patch before\n   merging is is the main reason for not using pull requests which do not\n   provide this facility and will require to iterate back and forth with the\n   submitter and significantly delay the patch inclusion.\n\n   Each patch fixing a bug MUST be tagged with \"BUG\", a severity level, an\n   indication of the affected subsystem and a brief description of the nature\n   of the issue in the subject line, and a detailed analysis in the message\n   body. The explanation of the user-visible impact and the need for\n   backporting to stable branches or not are MANDATORY. Bug fixes with no\n   indication will simply be rejected as they are very likely to cause more\n   harm when nobody is able to tell whether or not the patch needs to be\n   backported or can be reverted in case of regression.\n\n   When fixing a bug which is reproducible, if possible, the contributors are\n   strongly encouraged to write a regression testing VTC file for varnishtest\n   to add to reg-tests directory. More information about varnishtest may be\n   found in README file of reg-tests directory and in doc/regression-testing.txt\n   file.\n\n12) Discuss on the mailing list\n\n   Note, some first-time contributors might feel impressed or scared by posting\n   to a list. This list is frequented only by nice people who are willing to\n   help you polish your work so that it is perfect and can last long. What you\n   think could be perceived as a proof of incompetence or lack of care will\n   instead be a proof of your ability to work with a community. You will not be\n   judged nor blamed for making mistakes. The project maintainers are the ones\n   creating the most bugs and mistakes anyway, and nobody knows the project in\n   its entirety anymore so you're just like anyone else. And people who have no\n   consideration for other's work are quickly ejected from the list so the\n   place is as safe and welcoming to new contributors as it is to long time\n   ones.\n\n   When submitting changes, please always CC the mailing list address so that\n   everyone gets a chance to spot any issue in your code. It will also serve\n   as an advertisement for your work, you'll get more testers quicker and\n   you'll feel better knowing that people really use your work. It's often\n   convenient to prepend \"[PATCH]\" in front of your mail's subject to mention\n   that this e-mail contains a patch (or a series of patches), because it will\n   easily catch reviewer's attention. It's automatically done by tools such as\n   \"git format-patch\" and \"git send-email\". If you don't want your patch to be\n   merged yet and prefer to show it for discussion, better tag it as \"[RFC]\"\n   (stands for \"Request For Comments\") and it will be reviewed but not merged\n   without your approval. It is also important to CC any author mentioned in\n   the file you change, or a subsystem maintainers whose address is mentioned\n   in a MAINTAINERS file. Not everyone reads the list on a daily basis so it's\n   very easy to miss some changes. Don't consider it as a failure when a\n   reviewer tells you you have to modify your patch, actually it's a success\n   because now you know what is missing for your work to get accepted.  That's\n   why you should not hesitate to CC enough people. Don't copy people who have\n   no deal with your work area just because you found their address on the\n   list. That's the best way to appear careless about their time and make them\n   reject your changes in the future.\n\n\nPatch classifying rules\n-----------------------\n\nThere are 3 criteria of particular importance in any patch :\n  - its nature (is it a fix for a bug, a new feature, an optimization, ...)\n  - its importance, which generally reflects the risk of merging/not merging it\n  - what area it applies to (eg: http, stats, startup, config, doc, ...)\n\nIt's important to make these 3 criteria easy to spot in the patch's subject,\nbecause it's the first (and sometimes the only) thing which is read when\nreviewing patches to find which ones need to be backported to older versions.\nIt also helps when trying to find which patch is the most likely to have caused\na regression.\n\nSpecifically, bugs must be clearly easy to spot so that they're never missed.\nAny patch fixing a bug must have the \"BUG\" tag in its subject. Most common\npatch types include :\n\n  - BUG      fix for a bug. The severity of the bug should also be indicated\n             when known. Similarly, if a backport is needed to older versions,\n             it should be indicated on the last line of the commit message. The\n             commit message MUST ABSOLUTELY describe the problem and its impact\n             to non-developers. Any user must be able to guess if this patch is\n             likely to fix a problem they are facing. Even if the bug was\n             discovered by accident while reading the code or running an\n             automated tool, it is mandatory to try to estimate what potential\n             issue it might cause and under what circumstances. There may even\n             be security implications sometimes so a minimum analysis is really\n             required. Also please think about stable maintainers who have to\n             build the release notes, they need to have enough input about the\n             bug's impact to explain it. If the bug has been identified as a\n             regression brought by a specific patch or version, this indication\n             will be appreciated too. New maintenance releases are generally\n             emitted when a few of these patches are merged. If the bug is a\n             vulnerability for which a CVE identifier was assigned before you\n             publish the fix, you can mention it in the commit message, it will\n             help distro maintainers.\n\n  - CLEANUP  code cleanup, silence of warnings, etc... theoretically no impact.\n             These patches will rarely be seen in stable branches, though they\n             may appear when they remove some annoyance or when they make\n             backporting easier. By nature, a cleanup is always of minor\n             importance and it's not needed to mention it.\n\n  - DOC      updates to any of the documentation files, including README. Many\n             documentation updates are backported since they don't impact the\n             product's stability and may help users avoid bugs. So please\n             indicate in the commit message if a backport is desired. When a\n             feature gets documented, it's preferred that the doc patch appears\n             in the same patch or after the feature patch, but not before, as it\n             becomes confusing when someone working on a code base including\n             only the doc patch won't understand why a documented feature does\n             not work as documented.\n\n  - REORG    code reorganization. Some blocks may be moved to other places,\n             some important checks might be swapped, etc... These changes\n             always present a risk of regression. For this reason, they should\n             never be mixed with any bug fix nor functional change. Code is\n             only moved as-is. Indicating the risk of breakage is highly\n             recommended. Minor breakage is tolerated in such patches if trying\n             to fix it at once makes the whole change even more confusing. That\n             may happen for example when some #ifdefs need to be propagated in\n             every file consecutive to the change.\n\n  - BUILD    updates or fixes for build issues. Changes to makefiles also fall\n             into this category. The risk of breakage should be indicated if\n             known. It is also appreciated to indicate what platforms and/or\n             configurations were tested after the change.\n\n  - OPTIM    some code was optimised. Sometimes if the regression risk is very\n             low and the gains significant, such patches may be merged in the\n             stable branch. Depending on the amount of code changed or replaced\n             and the level of trust the author has in the change, the risk of\n             regression should be indicated. If the optimization depends on the\n             architecture or on build options, it is important to verify that\n             the code continues to work without it.\n\n  - RELEASE  release of a new version (development or stable).\n\n  - LICENSE  licensing updates (may impact distro packagers).\n\n  - REGTEST  updates to any of the regression testing files found in reg-tests\n             directory, including README or any documentation file.\n\n\nWhen the patch cannot be categorized, it's best not to put any type tag, and to\nonly use a risk or complexity information only as below. This is commonly the\ncase for new features, which development versions are mostly made of.\n\nThe importance, complexity of the patch, or severity of the bug it fixes must\nbe indicated when relevant. A single upper-case word is preferred, among :\n\n  - MINOR    minor change, very low risk of impact. It is often the case for\n             code additions that don't touch live code. As a rule of thumb, a\n             patch tagged \"MINOR\" is safe enough to be backported to stable\n             branches. For a bug, it generally indicates an annoyance, nothing\n             more.\n\n  - MEDIUM   medium risk, may cause unexpected regressions of low importance or\n             which may quickly be discovered. In short, the patch is safe but\n             touches working areas and it is always possible that you missed\n             something you didn't know existed (eg: adding a \"case\" entry or\n             an error message after adding an error code to an enum). For a bug,\n             it generally indicates something odd which requires changing the\n             configuration in an undesired way to work around the issue.\n\n  - MAJOR    major risk of hidden regression. This happens when large parts of\n             the code are rearranged, when new timeouts are introduced, when\n             sensitive parts of the session scheduling are touched, etc... We\n             should only exceptionally find such patches in stable branches when\n             there is no other option to fix a design issue. For a bug, it\n             indicates severe reliability issues for which workarounds are\n             identified with or without performance impacts.\n\n  - CRITICAL medium-term reliability or security is at risk and workarounds,\n             if they exist, might not always be acceptable. An upgrade is\n             absolutely required. A maintenance release may be emitted even if\n             only one of these bugs are fixed. Note that this tag is only used\n             with bugs. Such patches must indicate what is the first version\n             affected, and if known, the commit ID which introduced the issue.\n\nThe expected length of the commit message grows with the importance of the\nchange. While a MINOR patch may sometimes be described in 1 or 2 lines, MAJOR\nor CRITICAL patches cannot have less than 10-15 lines to describe exactly the\nimpacts otherwise the submitter's work will be considered as rough sabotage.\nIf you are sending a new patch series after a review, it is generally good to\nenumerate at the end of the commit description what changed from the previous\none as it helps reviewers quickly glance over such changes and not re-read the\nrest.\n\nFor BUILD, DOC and CLEANUP types, this tag is not always relevant and may be\nomitted.\n\nThe area the patch applies to is quite important, because some areas are known\nto be similar in older versions, suggesting a backport might be desirable, and\nconversely, some areas are known to be specific to one version. The area is a\nsingle-word lowercase name the contributor find clear enough to describe what\npart is being touched. The following list of tags is suggested but not\nexhaustive:\n\n  - examples  example files. Be careful, sometimes these files are packaged.\n\n  - tests     regression test files. No code is affected, no need to upgrade.\n\n  - reg-tests regression test files for varnishtest. No code is affected, no\n              need to upgrade.\n\n  - init      initialization code, arguments parsing, etc...\n\n  - config    configuration parser, mostly used when adding new config keywords\n\n  - http      the HTTP engine\n\n  - stats     the stats reporting engine\n\n  - cli       the stats socket CLI\n\n  - checks    the health checks engine (eg: when adding new checks)\n\n  - sample    the sample fetch system (new fetch or converter functions)\n\n  - acl       the ACL processing core or some ACLs from other areas\n\n  - filters   everything related to the filters core\n\n  - peers     the peer synchronization engine\n\n  - lua       the Lua scripting engine\n\n  - listeners everything related to incoming connection settings\n\n  - frontend  everything related to incoming connection processing\n\n  - backend   everything related to LB algorithms and server farm\n\n  - session   session processing and flags (very sensible, be careful)\n\n  - server    server connection management, queueing\n\n  - spoe      SPOE code\n\n  - ssl       the SSL/TLS interface\n\n  - proxy     proxy maintenance (start/stop)\n\n  - log       log management\n\n  - poll      any of the pollers\n\n  - halog     the halog sub-component in the contrib directory\n\n  - contrib   any addition to the contrib directory\n\n  - htx       general HTX subsystem\n\n  - mux-h1    HTTP/1.x multiplexer/demultiplexer\n\n  - mux-h2    HTTP/2 multiplexer/demultiplexer\n\n  - h1        general HTTP/1.x protocol parser\n\n  - h2        general HTTP/2 protocol parser\n\nOther names may be invented when more precise indications are meaningful, for\ninstance : \"cookie\" which indicates cookie processing in the HTTP core. Last,\nindicating the name of the affected file is also a good way to quickly spot\nchanges. Many commits were already tagged with \"stream_sock\" or \"cfgparse\" for\ninstance.\n\nIt is required that the type of change and the severity when relevant are\nindicated, as well as the touched area when relevant as well in the patch\nsubject. Normally, we would have the 3 most often. The two first criteria should\nbe present before a first colon (':'). If both are present, then they should be\ndelimited with a slash ('/'). The 3rd criterion (area) should appear next, also\nfollowed by a colon. Thus, all of the following subject lines are valid :\n\nExamples of subject lines :\n  - DOC: document options forwardfor to logasap\n  - DOC/MAJOR: reorganize the whole document and change indenting\n  - BUG: stats: connection reset counters must be plain ascii, not HTML\n  - BUG/MINOR: stats: connection reset counters must be plain ascii, not HTML\n  - MEDIUM: checks: support multi-packet health check responses\n  - RELEASE: Released version 1.4.2\n  - BUILD: stats: stdint is not present on solaris\n  - OPTIM/MINOR: halog: make fgets parse more bytes by blocks\n  - REORG/MEDIUM: move syscall redefinition to specific places\n\nPlease do not use square brackets anymore around the tags, because they induce\nmore work when merging patches, which need to be hand-edited not to lose the\nenclosed part.\n\nIn fact, one of the only square bracket tags that still makes sense is '[RFC]'\nat the beginning of the subject, when you're asking for someone to review your\nchange before getting it merged. If the patch is OK to be merged, then it can\nbe merge as-is and the '[RFC]' tag will automatically be removed. If you don't\nwant it to be merged at all, you can simply state it in the message, or use an\nalternate 'WIP/' prefix in front of your tag tag (\"work in progress\").\n\nThe tags are not rigid, follow your intuition first, and they may be readjusted\nwhen your patch is merged. It may happen that a same patch has a different tag\nin two distinct branches. The reason is that a bug in one branch may just be a\ncleanup or safety measure in the other one because the code cannot be triggered.\n\n\nWorking with Git\n----------------\n\nFor a more efficient interaction between the mainline code and your code, you\nare strongly encouraged to try the Git version control system :\n\n                        http://git-scm.com/\n\nIt's very fast, lightweight and lets you undo/redo your work as often as you\nwant, without making your mistakes visible to the rest of the world. It will\ndefinitely help you contribute quality code and take other people's feedback\nin consideration. In order to clone the HAProxy Git repository :\n\n   $ git clone http://git.haproxy.org/git/haproxy.git/       (development)\n\nIf you decide to use Git for your developments, then your commit messages will\nhave the subject line in the format described above, then the whole description\nof your work (mainly why you did it) will be in the body. You can directly send\nyour commits to the mailing list, the format is convenient to read and process.\n\nIt is recommended to create a branch for your work that is based on the master\nbranch :\n\n   $ git checkout -b 20150920-fix-stats master\n\nYou can then do your work and even experiment with multiple alternatives if you\nare not completely sure that your solution is the best one :\n\n   $ git checkout -b 20150920-fix-stats-v2\n\nThen reorder/merge/edit your patches :\n\n   $ git rebase -i master\n\nWhen you think you're ready, reread your whole patchset to ensure there is no\nformatting or style issue :\n\n   $ git show master..\n\nAnd once you're satisfied, you should update your master branch to be sure that\nnothing changed during your work (only needed if you left it unattended for days\nor weeks) :\n\n   $ git checkout -b 20150920-fix-stats-rebased\n   $ git fetch origin master:master\n   $ git rebase master\n\nYou can build a list of patches ready for submission like this :\n\n   $ git format-patch master\n\nThe output files are the patches ready to be sent over e-mail, either via a\nregular e-mail or via git send-email (carefully check the man page). Don't\ndestroy your other work branches until your patches get merged, it may happen\nthat earlier designs will be preferred for various reasons. Patches should be\nsent to the mailing list : haproxy@formilux.org and CCed to relevant subsystem\nmaintainers or authors of the modified files if their address appears at the\ntop of the file.\n\nPlease don't send pull requests, they are really inconvenient as they make it\nmuch more complicate to perform minor adjustments, and nobody benefits from\nany comment on the code while on a list all subscribers learn a little bit on\neach review of anyone else's code.\n\n\nWhat to do if your patch is ignored\n-----------------------------------\n\nAll patches merged are acknowledged by the maintainer who picked it. If you\ndidn't get an acknowledgement, check the mailing list archives to see if your\nmail was properly delivered there and possibly if anyone responded and you did\nnot get their response (please look at http://haproxy.org/ for the mailing list\narchive's address).\n\nIf you see that your mail is there but nobody responded, please recheck:\n  - was the subject clearly indicating that it was a patch and/or that you were\n    seeking some review?\n\n  - was your email mangled by your mail agent? If so it's possible that\n    nobody had the willingness yet to mention it.\n\n  - was your email sent as HTML? If so it definitely ended in spam boxes\n    regardless of the archives.\n\n  - did the patch violate some of the principles explained in this document?\n\nIf none of these cases matches, it might simply be that everyone was busy when\nyour patch was sent and that it was overlooked. In this case it's fine to\neither resubmit it or respond to your own email asking if anything's wrong\nabout it. In general don't expect a response after one week of silence, just\nbecause your email will not appear in anyone else's current window. So after\none week it's time to resubmit.\n\nAmong the mistakes that tend to make reviewers not respond are those who send\nmultiple versions of a patch in a row. It's natural for others then to wait for\nthe series to stabilize. And once it doesn't move anymore everyone forgot about\nit. As a rule of thumb, if you have to update your original email more than\ntwice, first double-check that your series is really ready for submission, and\nsecond, start a new thread and stop responding to the previous one. In this\ncase it is well appreciated to mention a version of your patch set in the\nsubject such as \"[PATCH v2]\", so that reviewers can immediately spot the new\nversion and not waste their time on the old one.\n\nIf you still do not receive any response, it is possible that you've already\nplayed your last card by not respecting the basic principles multiple times\ndespite being told about it several times, and that nobody is willing to spend\nmore of their time than normally needed with your work anymore. Your best\noption at this point probably is to ask \"did I do something wrong\" than to\nresend the same patches.\n\n\nHow to be sure to irritate everyone\n-----------------------------------\n\nAmong the best ways to quickly lose everyone's respect, there is this small\nselection, which should help you improve the way you work with others, if\nyou notice you're already practising some of them:\n  - repeatedly send improperly formatted commit messages, with no type or\n    severity, or with no commit message body. These ones require manual\n    edition, maintainers will quickly learn to recognize your name.\n\n  - repeatedly send patches which break something, and disappear or take a long\n    time to provide a fix.\n\n  - fail to respond to questions related to features you have contributed in\n    the past, which can further lead to the feature being declared unmaintained\n    and removed in a future version.\n\n  - send a new patch iteration without taking *all* comments from previous\n    review into consideration, so that the reviewer discovers they have to do\n    the exact same work again.\n\n  - \"hijack\" an existing thread to discuss something different or promote your\n    work. This will generally make you look like a fool so that everyone wants\n    to stay away from your e-mails.\n\n  - continue to send pull requests after having been explained why they are not\n    welcome.\n\n  - give wrong advices to people asking for help, or sending them patches to\n    try which make no sense, waste their time, and give them a bad impression\n    of the people working on the project.\n\n  - be disrespectful to anyone asking for help or contributing some work. This\n    may actually even get you kicked out of the list and banned from it.\n\n-- end\n"
        },
        {
          "name": "Download.md",
          "type": "blob",
          "size": 7.16796875,
          "content": "\n## Latest versions\n\nBranch | nuster version | Released   | Status              | Download\n------ | -------------- | --------   | ------              | --------\nmaster |                |            | HAProxy v2.4-dev3   |\n5.3    | 5.3.0.23       | 2020-12-19 | Mainline version    | [nuster-5.3.0.23.tar.gz][7]\n5.2    | 5.2.5.22       | 2020-12-19 | Stable version      | [nuster-5.2.5.22.tar.gz][6]\n5.1    | 5.1.0.21       | 2020-07-09 | Mainline version    | [nuster-5.1.0.21.tar.gz][5]\nH2.1   | 5.0.13.21      | 2020-07-09 | Unmaintained        | [nuster-5.0.13.21.tar.gz][4], renumbered to 5.1.0.21\nH2.0   | 4.0.1.20       | 2020-04-11 | Unmaintained        | ~nuster-4.0.1.20.tar.gz~\nH1.9   | 3.2.5.19       | 2020-04-13 | Critical fixes only | [nuster-3.2.5.19.tar.gz][3]\nH1.8   | 2.0.16.18      | 2020-04-13 | Critical fixes only | [nuster-2.0.16.18.tar.gz][2]\nH1.7   | 1.0.3.17       | 2019-11-02 | Unmaintained        | [nuster-1.0.3.17.tar.gz][1]\n\n[7]:https://github.com/jiangwenyuan/nuster/releases/download/v5.3.0.23/nuster-5.3.0.23.tar.gz\n[6]:https://github.com/jiangwenyuan/nuster/releases/download/v5.2.5.22/nuster-5.2.5.22.tar.gz\n[5]:https://github.com/jiangwenyuan/nuster/releases/download/v5.1.0.21/nuster-5.1.0.21.tar.gz\n[4]:https://github.com/jiangwenyuan/nuster/releases/download/v5.0.13.21/nuster-5.0.13.21.tar.gz\n[3]:https://github.com/jiangwenyuan/nuster/releases/download/v3.2.5.19/nuster-3.2.5.19.tar.gz\n[2]:https://github.com/jiangwenyuan/nuster/releases/download/v2.0.16.18/nuster-2.0.16.18.tar.gz\n[1]:https://github.com/jiangwenyuan/nuster/releases/download/v1.0.3.17/nuster-1.0.3.17.tar.gz\n\n## Versioning\n\nStarting with v5.2, nuster uses a new version system as NUSTER_VERSION.PATCH.HAPROXY_BRANCH.\n\n* NUSTER_VERSION\n  * Designated as two numbers separated by a dot, for example \"5.2\"\n  * Grows as a decimal number increased by 0.1 per version\n  * even version for stable release, based on HAProxy even version, only bugfixes will be backported, for example \"5.2\"\n  * odd version for mainline release, based on HAProxy odd version, new features, updates, bugfixes, for example \"5.1\"\n* PATCH: bug fixes, haproxy minor updates\n* HAPROXY_BRANCH: 21 stands for HAProxy v2.1.x, 22 for HAProxy v2.2.x\n\n## Legacy versions\n\nhttps://github.com/jiangwenyuan/nuster/releases\n\n| nuster version                                                              | Base HAProxy version\n| --------------                                                              | ---------------\n| [5.3.0.23](https://github.com/jiangwenyuan/nuster/releases/tag/v5.3.0.23)   | 2.3.2\n| [5.2.5.22](https://github.com/jiangwenyuan/nuster/releases/tag/v5.2.5.22)   | 2.2.6\n| [5.2.4.22](https://github.com/jiangwenyuan/nuster/releases/tag/v5.2.4.22)   | 2.2.5\n| [5.2.3.22](https://github.com/jiangwenyuan/nuster/releases/tag/v5.2.3.22)   | 2.2.3\n| [5.2.2.22](https://github.com/jiangwenyuan/nuster/releases/tag/v5.2.2.22)   | 2.2.2\n| [5.2.1.22](https://github.com/jiangwenyuan/nuster/releases/tag/v5.2.1.22)   | 2.2.0\n| [5.1.0.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.1.0.21)   | 2.1.7\n| [5.0.13.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.13.21) | 2.1.7\n| [5.2.0.22](https://github.com/jiangwenyuan/nuster/releases/tag/v5.2.0.22)   | 2.2.0\n| [5.0.12.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.12.21) | 2.1.7\n| [5.0.11.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.11.21) | 2.1.5\n| [5.0.10.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.10.21) | 2.1.4\n| [5.0.9.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.9.21)   | 2.1.4\n| [5.0.8.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.8.21)   | 2.1.4\n| [5.0.7.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.7.21)   | 2.1.4\n| [5.0.6.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.6.21)   | 2.1.4\n| [5.0.5.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.5.21)   | 2.1.4\n| [5.0.4.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.4.21)   | 2.1.4\n| [5.0.3.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.3.21)   | 2.1.4\n| [5.0.2.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.2.21)   | 2.1.4\n| [5.0.1.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.1.21)   | 2.1.4\n| [3.2.5.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.2.5.19)   | 1.9.15\n| [2.0.16.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.16.18) | 1.8.25\n| [5.0.0.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.0.21)   | 2.1.4\n|  4.0.1.20                                                                   | 2.0.14\n| [3.2.4.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.2.4.19)   | 1.9.15\n| [2.0.15.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.15.18) | 1.8.25\n| [5.0.0.21](https://github.com/jiangwenyuan/nuster/releases/tag/v5.0.0.21)   | 2.1.3\n| [2.0.14.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.14.18) | 1.8.24\n|  4.0.0.20                                                                   | 2.0.12\n| [3.2.3.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.2.3.19)   | 1.9.14\n| [3.2.2.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.2.2.19)   | 1.9.13\n| [2.0.13.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.13.18) | 1.8.23\n| [3.2.1.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.2.1.19)   | 1.9.13\n| [3.2.0.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.2.0.19)   | 1.9.13\n| [3.1.3.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.1.3.19)   | 1.9.12\n| [3.1.2.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.1.2.19)   | 1.9.12\n| [3.1.1.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.1.1.19)   | 1.9.12\n| [2.0.12.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.12.18) | 1.8.22\n| [1.0.3.17](https://github.com/jiangwenyuan/nuster/releases/tag/v1.0.3.17)   | 1.7.12\n| [3.1.0.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.1.0.19)   | 1.9.11\n| [3.0.0.19](https://github.com/jiangwenyuan/nuster/releases/tag/v3.0.0.19)   | 1.9.9\n| [2.0.11.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.11.18) | 1.8.21\n| [2.0.10.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.10.18) | 1.8.19\n| [2.0.9.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.9.18)   | 1.8.19\n| [2.0.8.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.8.18)   | 1.8.19\n| [2.0.7.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.7.18)   | 1.8.17\n| [2.0.6.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.6.18)   | 1.8.17\n| [2.0.5.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.5.18)   | 1.8.14\n| [2.0.4.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.4.18)   | 1.8.14\n| [2.0.3.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.3.18)   | 1.8.13\n| [2.0.2.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.2.18)   | 1.8.13\n| [2.0.1.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.1.18)   | 1.8.13\n| [2.0.0.18](https://github.com/jiangwenyuan/nuster/releases/tag/v2.0.0.18)   | 1.8.12\n| [1.1.1.18](https://github.com/jiangwenyuan/nuster/releases/tag/v1.1.1.18)   | 1.8.12\n| [1.0.2.17](https://github.com/jiangwenyuan/nuster/releases/tag/v1.0.2.17)   | 1.7.11\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 26.0693359375,
          "content": "Installation instructions for HAProxy\n=====================================\n\nThis is a development version, so it is expected to break from time to time,\nto add and remove features without prior notification and it should not be used\nin production. If you are not used to build from sources or if you are not used\nto follow updates then it is recommended that instead you use the packages\nprovided by your software vendor or Linux distribution. Most of them are taking\nthis task seriously and are doing a good job at backporting important fixes. If\nfor any reason you'd prefer to use a different version than the one packaged\nfor your system, you want to be certain to have all the fixes or to get some\ncommercial support, other choices are available at http://www.haproxy.com/.\n\n\nAreas covered in this document\n==============================\n\n1) Quick build & install\n2) Basic principles\n3) Build environment\n4) Dependencies\n5) Advanced build options\n6) How to install HAProxy\n\n\n1) Quick build & install\n========================\n\nIf you've already built HAProxy and are just looking for a quick reminder, here\nare a few build examples :\n\n  - recent Linux system with all options, make and install :\n    $ make clean\n    $ make -j $(nproc) TARGET=linux-glibc \\\n                USE_OPENSSL=1 USE_ZLIB=1 USE_LUA=1 USE_PCRE=1 USE_SYSTEMD=1\n    $ sudo make install\n\n  - FreeBSD and OpenBSD, build with all options :\n    $ gmake -j 4 TARGET=freebsd USE_OPENSSL=1 USE_ZLIB=1 USE_LUA=1 USE_PCRE=1\n\n  - embedded Linux, build using a cross-compiler :\n    $ make -j $(nproc) TARGET=linux-glibc USE_OPENSSL=1 USE_SLZ=1 USE_PCRE=1 \\\n                CC=/opt/cross/gcc730-arm/bin/gcc ADDLIB=-latomic\n\n  - Build with static PCRE on Solaris / UltraSPARC :\n    $ make TARGET=solaris CPU=ultrasparc USE_STATIC_PCRE=1\n\nFor more advanced build options or if a command above reports an error, please\nread the following sections.\n\n\n2) Basic principles\n===================\n\nHAProxy uses a single GNU Makefile which supports options on the command line,\nso that there is no need to hack a \"configure\" file to work on your system. The\nmakefile totally supports parallel build using \"make -j <jobs>\" where <jobs>\nmatches the number of usable processors, which on some platforms is returned by\nthe \"nproc\" utility. The explanations below may occasionally refer to some\noptions, usually in the form \"name=value\", which have to be passed to the\ncommand line. This means that the option has to be passed after the \"make\"\ncommand. For example :\n\n  $ make -j $(nproc) TARGET=generic USE_GZIP=1\n\nOne required option is TARGET, it must be set to a target platform name, which\nprovides a number of presets. The list of known platforms is displayed when no\ntarget is specified. It is not strictly required to use the exact target, you\ncan use a relatively similar one and adjust specific variables by hand.\n\nMost configuration variables are in fact booleans. Some options are detected and\nenabled by default if available on the target platform. This is the case for all\nthose named \"USE_<feature>\". These booleans are enabled by \"USE_<feature>=1\"\nand are disabled by \"USE_<feature>=\" (with no value). The last occurrence on the\ncommand line overrides any previous one. Example :\n\n  $ make TARGET=generic USE_THREAD=\n\nIn case of error or missing TARGET, a help screen is displayed. It is also\npossible to display a list of all known options using \"make help\".\n\n\n3) Build environment\n====================\n\nHAProxy requires a working GCC or Clang toolchain and GNU make :\n\n  - GNU make >= 3.80. Note that neither Solaris nor OpenBSD's make work with\n    the GNU Makefile. If you get many syntax errors when running \"make\", you\n    may want to retry with \"gmake\" which is the name commonly used for GNU make\n    on BSD systems.\n\n  - GCC >= 3.4 (up to 10.1 tested). Older versions can be made to work with a\n    few minor adaptations if really needed. Newer versions may sometimes break\n    due to compiler regressions or behaviour changes. The version shipped with\n    your operating system is very likely to work with no trouble. Clang >= 3.0\n    is also known to work as an alternative solution. Recent versions may emit\n    a bit more warnings that are worth reporting as they may reveal real bugs.\n    TCC (https://repo.or.cz/tinycc.git) is also usable for developers but will\n    not support threading and was found at least once to produce bad code in\n    some rare corner cases (since fixed). But it builds extremely quickly\n    (typically half a second for the whole project) and is very convenient to\n    run quick tests during API changes or code refactoring.\n\n  - GNU ld (binutils package), with no particular version. Other linkers might\n    work but were not tested.\n\nOn debian or Ubuntu systems and their derivatives, you may get all these tools\nat once by issuing the two following commands :\n\n  $ sudo apt-get update\n  $ sudo apt-get install build-essential\n\nOn Fedora, CentOS, RHEL and derivatives, you may get the equivalent packages\nwith the following command :\n\n  $ sudo yum groupinstall \"Development Tools\"\n\nPlease refer to your operating system's documentation for other systems.\n\nIt is also possible to build HAProxy for another system or platform using a\ncross-compiler but in this case you probably already have installed these\ntools.\n\nBuilding HAProxy may require between 10 and 40 MB of free space in the\ndirectory where the sources have been extracted, depending on the debugging\noptions involved.\n\n\n4) Dependencies\n===============\n\nHAProxy in its basic form does not depend on anything beyond a working libc.\nHowever a number of options are enabled by default, or are highly recommended,\nand these options will typically involve some external components or libraries,\ndepending on the targeted platform.\n\nOptional dependencies may be split into several categories :\n\n  - memory allocation\n  - regular expressions\n  - multi-threading\n  - password encryption\n  - cryptography\n  - compression\n  - lua\n  - device detection\n  - miscellaneous\n\n\n4.1) Memory allocation\n----------------------\nBy default, HAProxy uses the standard malloc() call provided by the libc. It\nmay also be built to use jemalloc, which is fast and thread-safe. In order to\nuse it, please add \"-ljemalloc\" to the ADDLIB variable. You may possibly also\nneed to append \"-lpthread\" and/or \"-ldl\" depending on the operating system.\n\n\n4.2) Regular expressions\n------------------------\nHAProxy may make use regular expressions (regex) to match certain patterns. The\nregex engine is provided by default in the libc. On some operating systems, it\nmight happen that the original regex library provided by the libc is too slow,\ntoo limited or even bogus. For example, on older Solaris versions up to 8, the\ndefault regex used not to properly extract group references, without reporting\ncompilation errors. Also, some early versions of the GNU libc used to include a\nregex engine which could be slow or even crash on certain patterns.\n\nIf you plan on importing a particularly heavy configuration involving a lot of\nregex, you may benefit from using some alternative regex implementations sur as\nPCRE. HAProxy natively supports PCRE and PCRE2, both in standard and JIT\nflavors (Just In Time). The following options are available depending on the\nlibrary version provided on your system :\n\n  - \"USE_PCRE=1\"         : enable PCRE version 1, dynamic linking\n  - \"USE_STATIC_PCRE=1\"  : enable PCRE version 1, static linking\n  - \"USE_PCRE_JIT=1\"     : enable PCRE version 1 in JIT mode\n  - \"USE_PCRE2=1\"        : enable PCRE version 2, dynamic linking\n  - \"USE_STATIC_PCRE2=1\" : enable PCRE version 2, static linking\n  - \"USE_PCRE2_JIT=1\"    : enable PCRE version 2 in JIT mode\n\nBoth of these libraries may be downloaded from https://www.pcre.org/.\n\nBy default, the include and library paths are figured from the \"pcre-config\"\nand \"pcre2-config\" utilities. If these ones are not installed or inaccurate\n(for example when cross-compiling), it is possible to force the path to include\nfiles using \"PCRE_INC\" and \"PCRE2_INC\" respectively, and the path to library\nfiles using \"PCRE_LIB\" and \"PCRE2_LIB\" respectively. For example :\n\n  $ make TARGET=generic \\\n    USE_PCRE2_JIT=1 PCRE2_INC=/opt/cross/include PCRE2_LIB=/opt/cross/lib\n\n\n4.3) Multi-threading\n--------------------\nOn some systems for which positive feedback was reported, multi-threading will\nbe enabled by default. When multi-threading is used, the libpthread library\n(POSIX threading) will be used. If the target system doesn't contain such a\nlibrary, it is possible to forcefully disable multi-threading by adding\n\"USE_THREAD=\" on the command line.\n\n\n4.4) Password encryption\n------------------------\nMany systems provide password encryption functions used for authentication. On\nsome systems these functions are part of the libc. On others, they're part of a\nseparate library called \"libcrypt\". The default targets are pre-configured\nbased on which system needs the library. It is possible to forcefully disable\nthe linkage against libcrypt by adding \"USE_LIBCRYPT=\" on the command line, or\nto forcefully enable it using \"USE_LIBCRYPT=1\".\n\n\n4.5) Cryptography\n-----------------\nFor SSL/TLS, it is necessary to use a cryptography library. HAProxy currently\nsupports the OpenSSL library, and is known to build ant work with branches\n0.9.8, 1.0.0, 1.0.1, 1.0.2, 1.1.0 and 1.1.1. OpenSSL follows a long-term\nsupport cycle similar to HAProxy's, and each of the branches above receives its\nown fixes, without forcing you to upgrade to another branch. There is no excuse\nfor staying vulnerable by not applying a fix available for your version. There\nis always a small risk of regression when jumping from one branch to another\none, especially when it's very new, so it's preferable to observe for a while\nif you use a different version than your system's defaults.\n\nTwo OpenSSL derivatives called LibreSSL and BoringSSL are reported to work as\nwell. While there are some efforts from the community to ensure they work well,\nOpenSSL remains the primary target and this means that in case of conflicting\nchoices, OpenSSL support will be favored over other options.\n\nIn order to enable SSL/TLS support, simply pass \"USE_OPENSSL=1\" on the command\nline and the default library present on your system will be used :\n\n  $ make TARGET=generic USE_OPENSSL=1\n\nIf you want to use a different version from the one provided by your system\n(which is not recommended due to the risk of missing security fixes), it is\npossible to indicate the path to the SSL include files using SSL_INC, and the\nSSL library files using SSL_LIB. Example :\n\n  $ make TARGET=generic \\\n    USE_OPENSSL=1 SSL_INC=/opt/ssl-1.1.1/include SSL_LIB=/opt/ssl-1.1.1/lib\n\nIn order to link OpenSSL statically against HAProxy, first download OpenSSL\nfrom https://www.openssl.org/ then build it with the \"no-shared\" keyword and\ninstall it to a local directory, so your system is not affected :\n\n  $ export STATICLIBSSL=/tmp/staticlibssl\n  $ ./config --prefix=$STATICLIBSSL no-shared\n  $ make && make install_sw\n\nThen when building haproxy, pass that path via SSL_INC and SSL_LIB :\n\n  $ make TARGET=generic \\\n    USE_OPENSSL=1 SSL_INC=$STATICLIBSSL/include SSL_LIB=$STATICLIBSSL/lib\n\nWhen building with OpenSSL on some systems, you may also need to enable support\nfor the \"libz\" library, which is visible if the linker complains about function\n\"deflateInit()\" not being found. In this case, simply append \"ADDLIB=-lz\" to\nthe command line.\n\nIt is worth mentioning that asynchronous cryptography engines are supported on\nOpenSSL 1.1.0 and above. Such engines are used to access hardware cryptography\nacceleration that might be present on your system.\n\n\n4.6) Compression\n----------------\nHAProxy can compress HTTP responses before delivering them to clients, in order\nto save network bandwidth. Two compression options are available. The first one\ninvolves the widely known zlib library, which is very likely installed on your\nsystem. In order to use zlib, simply pass \"USE_ZLIB=1\" to the command line. If\nthe library is not installed in your default system's path, it is possible to\nspecify the path to the include files using ZLIB_INC, and the path to the\nlibrary files using ZLIB_LIB :\n\n  $ make TARGET=generic \\\n    USE_ZLIB=1 ZLIB_INC=/opt/zlib-1.2.11/include ZLIB_LIB=/opt/zlib-1.2.11/lib\n\nHowever, zlib maintains an in-memory context for each compressed stream, which\nis not always welcome when dealing with large sites. An alternative solution is\nto use libslz instead, which doesn't consume memory, which is much faster, but\ncompresses slightly less efficiently. For this, please use \"USE_SLZ=1\", and\noptionally make \"SLZ_INC\" and \"SLZ_LIB\" point to the library's include and\nlibrary paths, respectively.\n\nZlib is commonly found on most systems, otherwise updates can be retrieved from\nhttp://www.zlib.net/. It is easy and fast to build, and new versions sometimes\nprovide better performance so it might be worth using an up-to-date one. Libslz\ncan be downloaded http://libslz.org/ and is even easier to build.\n\n\n4.7) Lua\n--------\nLua is an embedded programming language supported by HAProxy to provide more\nadvanced scripting capabilities. Only versions 5.3 and above are supported.\nIn order to enable Lua support, please specify \"USE_LUA=1\" on the command line.\nSome systems provide this library under various names to avoid conflicts with\nprevious versions. By default, HAProxy looks for \"lua5.3\", \"lua53\", \"lua\". If\nyour system uses a different naming, you may need to set the library name in\nthe \"LUA_LIB_NAME\" variable.\n\nIf Lua is not provided on your system, it can be very simply built locally. It\ncan be downloaded from https://www.lua.org/, extracted and built, for example :\n\n  $ cd /opt/lua-5.3.5\n  $ make linux\n\nThe path to the include files and library files may be set using \"LUA_INC\" and\n\"LUA_LIB\" respectively. For example :\n\n  $ make TARGET=generic \\\n    USE_LUA=1 LUA_INC=/opt/lua-5.3.5/src LUA_LIB=/opt/lua-5.3.5/src\n\n\n4.8) Device detection\n---------------------\nHAProxy supports several device detection modules relying on third party\nproducts. Some of them may provide free code, others free libs, others free\nevaluation licenses. Please read about their respective details in the\nfollowing files :\n\n    doc/DeviceAtlas-device-detection.txt   for DeviceAtlas\n    doc/51Degrees-device-detection.txt     for 51Degrees\n    doc/WURFL-device-detection.txt         for Scientiamobile WURFL\n\n\n4.9) Miscellaneous\n------------------\nSome systems have specificities. Usually these specificities are known and/or\ndetected and properly set for you. If you need to adjust the behaviour, here\nare the extra libraries that may be referenced at build time :\n\n  - USE_RT=1      build with librt, which is sometimes needed on some systems\n                  when using threads. It is set by default on Linux platforms,\n                  and may be disabled using \"USE_RT=\" if your system doesn't\n                  have one. You may have to set it as well if you face an error\n                  indicating that clock_gettime() was not found.\n\n  - USE_DL=1      build with libdl, which is usually needed for Lua and OpenSSL\n                  on Linux. It is automatically detected and may be disabled\n                  using \"USE_DL=\", though it should never harm.\n\n  - USE_SYSTEMD=1 enables support for the sdnotify features of systemd,\n                  allowing better integration with systemd on Linux systems\n                  which come with it. It is never enabled by default so there\n                  is no need to disable it.\n\n\n4.10) Common errors\n-------------------\nSome build errors may happen depending on the options combinations or the\nselected target. When facing build errors, if you know that your system is a\nbit special or particularly old, start from TARGET=generic, it is easier to\nstart from there and fix the remaining issues than trying to degrade another\ntarget. Common issues may include:\n\n  - clock_gettime() not found\n    => your system needs USE_RT=1\n\n  - __sync_sub_and_fetch undefined in cache.o\n    => your system needs either USE_PTHREAD_PSHARED=1 or USE_PRIVATE_CACHE=1\n\n  - many __sync_<something> errors in many files\n    => your gcc is too old, build without threads and with private cache.\n\n  - many openssl errors\n    => your OpenSSL version really is too old, do not enable OpenSSL\n\n\n5) How to build HAProxy\n=======================\n\nThis section assumes that you have already read section 2 (basic principles)\nand section 3 (build environment). It often refers to section 4 (dependencies).\n\nTo build haproxy, you have to choose your target OS amongst the following ones\nand assign it to the TARGET variable :\n\n  - linux-glibc         for Linux kernel 2.6.28 and above\n  - linux-glibc-legacy  for Linux kernel 2.6.28 and above without new features\n  - linux-musl          for Linux kernel 2.6.28 and above with musl libc\n  - solaris             for Solaris 10 and above\n  - freebsd             for FreeBSD 10 and above\n  - dragonfly           for DragonFlyBSD 4.3 and above\n  - netbsd              for NetBSD 8 and above\n  - osx                 for Mac OS/X\n  - openbsd             for OpenBSD 6.3 and above\n  - aix51               for AIX 5.1\n  - aix52               for AIX 5.2\n  - aix72-gcc           for AIX 7.2 (using gcc)\n  - cygwin              for Cygwin\n  - haiku               for Haiku\n  - generic             for any other OS or version.\n  - custom              to manually adjust every setting\n\nYou may also choose your CPU to benefit from some optimizations. This is\nparticularly important on UltraSparc machines. For this, you can assign\none of the following choices to the CPU variable :\n\n  - i686 for intel PentiumPro, Pentium 2 and above, AMD Athlon (32 bits)\n  - i586 for intel Pentium, AMD K6, VIA C3.\n  - ultrasparc : Sun UltraSparc I/II/III/IV processor\n  - power8 : IBM POWER8 processor\n  - power9 : IBM POWER9 processor\n  - native : use the build machine's specific processor optimizations. Use with\n    extreme care, and never in virtualized environments (known to break).\n  - generic : any other processor or no CPU-specific optimization. (default)\n\nAlternatively, you may just set the CPU_CFLAGS value to the optimal GCC options\nfor your platform. A second variable named SMALL_OPTS also supports passing a\nnumber of defines and compiler options usually for small systems. For better\nclarity it's recommended to pass the options which result in a smaller binary\n(like memory limits or -Os) into this variable.\n\nIf you are building for a different system than the one you're building on,\nthis is called \"cross-compiling\". HAProxy supports cross-compilation pretty\nwell and tries to ease it by letting you adjust paths to all libraries (please\nread section 4 on dependencies for more details). When cross-compiling, you\njust need to pass the path to your compiler in the \"CC\" variable, and the path\nto the linker in the \"LD\" variable. Most of the time, setting the CC variable\nis enough since LD points to it by default.\n\nBy default the build process runs in quiet mode and hide the details of the\ncommands that are executed. This allows to more easily catch build warnings\nand see what is happening. However it is not convenient at all to observe what\nflags are passed to the compiler nor what compiler is involved. Simply append\n\"V=1\" to the \"make\" command line to switch to verbose mode and display the\ndetails again. It is recommended to use this option when cross-compiling to\nverify that the paths are correct and that /usr/include is never invovled.\n\nYou may want to build specific target binaries which do not match your native\ncompiler's target. This is particularly true on 64-bit systems when you want\nto build a 32-bit binary. Use the ARCH variable for this purpose. Right now\nit only knows about a few x86 variants (i386,i486,i586,i686,x86_64), two\ngeneric ones (32,64) and sets -m32/-m64 as well as -march=<arch> accordingly.\nThis variable is only used to set ARCH_FLAGS to preset values, so if you know\nthe arch-specific flags that your system needs, you may prefer to set\nARCH_FLAGS instead. Note that these flags are passed both to the compiler and\nto the linker. For example, in order to build a 32-bit binary on an x86_64\nLinux system with SSL support without support for compression but when OpenSSL\nrequires ZLIB anyway :\n\n    $ make TARGET=linux-glibc ARCH=i386 USE_OPENSSL=1 ADDLIB=-lz\n\nRecent systems can resolve IPv6 host names using getaddrinfo(). This primitive\nis not present in all libcs and does not work in all of them either. Support in\nglibc was broken before 2.3. Some embedded libs may not properly work either,\nthus, support is disabled by default, meaning that some host names which only\nresolve as IPv6 addresses will not resolve and configs might emit an error\nduring parsing. If you know that your OS libc has reliable support for\ngetaddrinfo(), you can add USE_GETADDRINFO=1 on the make command line to enable\nit. This is the recommended option for most Linux distro packagers since it's\nworking fine on all recent mainstream distros. It is automatically enabled on\nSolaris 8 and above, as it's known to work.\n\nIf your system supports PCRE (Perl Compatible Regular Expressions), then you\nreally should build with libpcre which is between 2 and 10 times faster than\nother libc implementations. Regex are used for header processing (deletion,\nrewriting, allow, deny). Please see section 4 about dependencies to figure\nhow to build with PCRE support.\n\nIt is possible to add native support for SSL, by passing \"USE_OPENSSL=1\" on the\nmake command line. The libssl and libcrypto will automatically be linked with\nHAProxy. Some systems also require libz, so if the build fails due to missing\nsymbols such as deflateInit(), then try again with \"ADDLIB=-lz\". Please check\nsection 4 about dependencies for more information on how to build with OpenSSL.\n\nHAProxy can compress HTTP responses to save bandwidth. Please see section 4\nabout dependencies to see the available libraries and associated options.\n\nBy default, the DEBUG variable is set to '-g' to enable debug symbols. It is\nnot wise to disable it on uncommon systems, because it's often the only way to\nget a usable core when you need one. Otherwise, you can set DEBUG to '-s' to\nstrip the binary.\n\nIf the ERR variable is set to any non-empty value, then -Werror will be added\nto the compiler so that any build warning will trigger an error. This is the\nrecommended way to build when developing, and it is expected that contributed\npatches were tested with ERR=1.\n\nThe SSL stack supports session cache synchronization between all running\nprocesses. This involves some atomic operations and synchronization operations\nwhich come in multiple flavors depending on the system and architecture :\n\n  Atomic operations :\n    - internal assembler versions for x86/x86_64 architectures\n\n    - gcc builtins for other architectures. Some architectures might not\n      be fully supported or might require a more recent version of gcc.\n      If your architecture is not supported, you willy have to either use\n      pthread if supported, or to disable the shared cache.\n\n    - pthread (posix threads). Pthreads are very common but inter-process\n      support is not that common, and some older operating systems did not\n      report an error when enabling multi-process mode, so they used to\n      silently fail, possibly causing crashes. Linux's implementation is\n      fine. OpenBSD doesn't support them and doesn't build. FreeBSD 9 builds\n      and reports an error at runtime, while certain older versions might\n      silently fail. Pthreads are enabled using USE_PTHREAD_PSHARED=1.\n\n  Synchronization operations :\n    - internal spinlock : this mode is OS-independent, light but will not\n      scale well to many processes. However, accesses to the session cache\n      are rare enough that this mode could certainly always be used. This\n      is the default mode.\n\n    - Futexes, which are Linux-specific highly scalable light weight mutexes\n      implemented in user-space with some limited assistance from the kernel.\n      This is the default on Linux 2.6 and above and is enabled by passing\n      USE_FUTEX=1\n\n    - pthread (posix threads). See above.\n\nIf none of these mechanisms is supported by your platform, you may need to\nbuild with USE_PRIVATE_CACHE=1 to totally disable SSL cache sharing. Then it\nis better not to run SSL on multiple processes. Note that you don't need these\nfeatures if you only intend to use multi-threading and never multi-process.\n\nIf you need to pass other defines, includes, libraries, etc... then please\ncheck the Makefile to see which ones will be available in your case, and\nuse/override the USE_* variables from the Makefile.\n\nAIX 5.3 is known to work with the generic target. However, for the binary to\nalso run on 5.2 or earlier, you need to build with DEFINE=\"-D_MSGQSUPPORT\",\notherwise __fd_select() will be used while not being present in the libc, but\nthis is easily addressed using the \"aix52\" target. If you get build errors\nbecause of strange symbols or section mismatches, simply remove -g from\nDEBUG_CFLAGS.\n\nBuilding on AIX 7.2 works fine using the \"aix72-gcc\" TARGET. It adds two\nspecial CFLAGS to prevent the loading of AIXs xmem.h and var.h. This is done\nby defining the corresponding include-guards _H_XMEM and _H_VAR. Without\nexcluding those header-files the build fails because of redefinition errors.\nFurthermore, the atomic library is added to the LDFLAGS to allow for\nmultithreading via USE_THREAD.\n\nYou can easily define your own target with the GNU Makefile. Unknown targets\nare processed with no default option except USE_POLL=default. So you can very\nwell use that property to define your own set of options. USE_POLL can even be\ndisabled by setting USE_POLL=\"\". For example :\n\n  $ gmake TARGET=tiny USE_POLL=\"\" TARGET_CFLAGS=-fomit-frame-pointer\n\nIf you need to pass some defines to the preprocessor or compiler, you may pass\nthem all in the DEFINE variable. Example:\n\n  $ make TARGET=generic DEFINE=\"-DDEBUG_DONT_SHARE_POOLS -DDEBUG_MEMORY_POOLS\"\n\nThe ADDINC variable may be used to add some extra include paths; this is\nsometimes needed when cross-compiling. Similarly the ADDLIB variable may be\nused to specifify extra paths to library files. Example :\n\n  $ make TARGET=generic ADDINC=-I/opt/cross/include ADDLIB=-L/opt/cross/lib64\n\n\n6) How to install HAProxy\n=========================\n\nTo install haproxy, you can either copy the single resulting binary to the\nplace you want, or run :\n\n    $ sudo make install\n\nIf you're packaging it for another system, you can specify its root directory\nin the usual DESTDIR variable.\n\n-- end\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.9814453125,
          "content": "HAPROXY's license - 2006/06/15\n\nHistorically, haproxy has been covered by GPL version 2. However, an issue\nappeared in GPL which will prevent external non-GPL code from being built\nusing the headers provided with haproxy. My long-term goal is to build a core\nsystem able to load external modules to support specific application protocols.\n\nSince some protocols are found in rare environments (finance, industry, ...),\nsome of them might be accessible only after signing an NDA. Enforcing GPL on\nsuch modules would only prevent them from ever being implemented, while not\nproviding anything useful to ordinary users.\n\nFor this reason, I *want* to be able to support binary only external modules\nwhen needed, with a GPL core and GPL modules for standard protocols, so that\npeople fixing bugs don't keep them secretly to try to stay over competition.\n\nThe solution was then to apply the LGPL license to the exportable include\nfiles, while keeping the GPL for all the rest. This way, it still is mandatory\nto redistribute modified code under customer request, but at the same time, it\nis expressly permitted to write, compile, link and load non-GPL code using the\nLGPL header files and not to distribute them if it causes a legal problem.\n\nOf course, users are strongly encouraged to continue the work under GPL as long\nas possible, since this license has allowed useful enhancements, contributions\nand fixes from talented people around the world.\n\nDue to the incompatibility between the GPL and the OpenSSL licence, you must\napply the GPL/LGPL licence with the following exception:\nThis program is released under the GPL with the additional exemption that\ncompiling, linking, and/or using OpenSSL is allowed.\n\nThe text of the licenses lies in the \"doc\" directory. All the files provided in\nthis package are covered by the GPL unless expressly stated otherwise in them.\nEvery patch or contribution provided by external people will by default comply\nwith the license of the files it affects, or be rejected.\n\nWilly Tarreau - w@1wt.eu\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 3.2119140625,
          "content": "This file contains a list of people who are responsible for certain parts of\nthe HAProxy project and who have authority on them. This means that these\npeople have to be consulted before doing any change in the parts they maintain,\nincluding when fixing bugs. These persons are allowed to reject any change on\nthe parts they maintain, and in parallel they try their best to ensure these\nparts work well. Similarly, any change to these parts not being validated by\nthem will be rejected.\n\nThe best way to deal with such subsystems when sending patches is to send the\npatches to the mailing list and to CC these people. When no maintainer is\nlisted for a subsystem, you can simply send your changes the usual way, and it\nis also a sign that if you want to strengthen your skills on certain parts you\ncan become yourself a maintainer of the parts you care a lot about.\n\nPlease do not ask them to troubleshoot your bugs, it's not their job eventhough\nthey may occasionally help as time permits.\n\nList of maintainers\n-------------------\n\nLua\nMaintainer: Thierry Fournier <tfournier@arpalert.org>\nFiles: src/hlua.c, include/*/hlua.h\n\nMaps and pattern matching\nMaintainer: Thierry Fournier <tfournier@arpalert.org>\nFiles: src/map.c, src/pattern.c, include/*/map.h, include/*/pattern.h\n\nDNS\nMaintainer: Baptiste Assmann <bedis9@gmail.com>\nFiles: src/dns.c, include/*/dns.h\n\nSSL\nMaintainer: Emeric Brun <ebrun@haproxy.com>, William Lallemand <wlallemand@haproxy.com>\nFiles: src/cfgparse-ssl.c, src/ssl_*.c, include/*/ssl_*.h\n\nPeers\nMaintainer: Emeric Brun <ebrun@haproxy.com>\nFiles: src/peers.c, include/*/peers.h\n\nDoc to HTML converter (dconv)\nMaintainer: Cyril Bonté <cyril.bonte@free.fr>\nFiles: doc/*.txt\nNote: ask Cyril before changing any doc's format or structure.\n\nHealth checks\nFiles: src/checks.c, include/*/checks.h\nMaintainers: Simon Horman for external-check, Baptiste Assmann for tcp-check\nNote: health checks are fragile and have been broken many times, so please\n      consult the relevant maintainers if you want to change these specific\n      parts.\n\nMailers\nMaintainer: Simon Horman <horms@verge.net.au>\nFiles: src/mailers.c, include/*/mailers.h\n\nDeviceAtlas device identification\nMaintainer: David Carlier <dcarlier@deviceatlas.com>\nFiles: src/da.c, include/*/da.h\n\n51Degrees device identification\nMaintainer: Ben Shillito <ben@51degrees.com>\nFiles: src/51d.c\n\nCache\nMaintainer: William Lallemand <wlallemand@haproxy.com>\nFiles: src/cache.c, include/*/cache.h\n\nMaster-worker\nMaintainer: William Lallemand <wlallemand@haproxy.com>\nNote: Please CC William when touching src/haproxy.c and contrib/systemd\n\nSPOE\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/flt_spoe.c, include/*/spoe.h, contrib/spoa_example, doc/SPOE.txt\n\nMulti-threading\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nMaintainer: Emeric Brun <ebrun@haproxy.com>\nFiles: src/thread.c, include/*/thread.h\nNote: every change around the locking or synchronization point will require\n      approval from one of these maintainers. Problems which only appear when\n      nbthread is greater than 1 and which disappear otherwise are also\n      relevant.\n\nScientiaMobile WURFL Device Detection\nMaintainer: Paul Borile, Massimiliano Bellomi <wurfl-haproxy-support@scientiamobile.com>\nFiles: src/wurfl.c\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 44.025390625,
          "content": "# This GNU Makefile supports different OS and CPU combinations.\n#\n# You should use it this way :\n#   [g]make TARGET=os [ARCH=arch] [CPU=cpu] USE_xxx=1 ...\n#\n# When in doubt, invoke help, possibly with a known target :\n#   [g]make help\n#   [g]make help TARGET=linux-glibc\n#\n# By default the detailed commands are hidden for a cleaner output, but you may\n# see them by appending \"V=1\" to the make command.\n#\n# Valid USE_* options are enumerated in the \"use_opts\" variable and are listed\n# below. Most of them are automatically set by the TARGET, others have to be\n# explicitly specified :\n#   USE_EPOLL            : enable epoll() on Linux 2.6. Automatic.\n#   USE_KQUEUE           : enable kqueue() on BSD. Automatic.\n#   USE_EVPORTS          : enable event ports on SunOS systems. Automatic.\n#   USE_NETFILTER        : enable netfilter on Linux. Automatic.\n#   USE_PCRE             : enable use of libpcre for regex. Recommended.\n#   USE_PCRE_JIT         : enable JIT for faster regex on libpcre >= 8.32\n#   USE_PCRE2            : enable use of libpcre2 for regex.\n#   USE_PCRE2_JIT        : enable JIT for faster regex on libpcre2\n#   USE_POLL             : enable poll(). Automatic.\n#   USE_PRIVATE_CACHE    : disable shared memory cache of ssl sessions.\n#   USE_THREAD           : enable threads support.\n#   USE_PTHREAD_PSHARED  : enable pthread process shared mutex on sslcache.\n#   USE_STATIC_PCRE      : enable static libpcre. Recommended.\n#   USE_STATIC_PCRE2     : enable static libpcre2.\n#   USE_TPROXY           : enable transparent proxy. Automatic.\n#   USE_LINUX_TPROXY     : enable full transparent proxy. Automatic.\n#   USE_LINUX_SPLICE     : enable kernel 2.6 splicing. Automatic.\n#   USE_LIBCRYPT         : enable crypted passwords using -lcrypt\n#   USE_CRYPT_H          : set it if your system requires including crypt.h\n#   USE_GETADDRINFO      : use getaddrinfo() to resolve IPv6 host names.\n#   USE_OPENSSL          : enable use of OpenSSL. Recommended, but see below.\n#   USE_LUA              : enable Lua support.\n#   USE_FUTEX            : enable use of futex on kernel 2.6. Automatic.\n#   USE_ACCEPT4          : enable use of accept4() on linux. Automatic.\n#   USE_CLOSEFROM        : enable use of closefrom() on *bsd, solaris. Automatic.\n#   USE_PRCTL            : enable use of prctl(). Automatic.\n#   USE_ZLIB             : enable zlib library support.\n#   USE_SLZ              : enable slz library instead of zlib (pick at most one).\n#   USE_CPU_AFFINITY     : enable pinning processes to CPU on Linux. Automatic.\n#   USE_TFO              : enable TCP fast open. Supported on Linux >= 3.7.\n#   USE_NS               : enable network namespace support. Supported on Linux >= 2.6.24.\n#   USE_DL               : enable it if your system requires -ldl. Automatic on Linux.\n#   USE_RT               : enable it if your system requires -lrt. Automatic on Linux.\n#   USE_BACKTRACE        : enable backtrace(). Automatic on Linux.\n#   USE_DEVICEATLAS      : enable DeviceAtlas api.\n#   USE_51DEGREES        : enable third party device detection library from 51Degrees\n#   USE_WURFL            : enable WURFL detection library from Scientiamobile\n#   USE_SYSTEMD          : enable sd_notify() support.\n#   USE_OBSOLETE_LINKER  : use when the linker fails to emit __start_init/__stop_init\n#   USE_THREAD_DUMP      : use the more advanced thread state dump system. Automatic.\n#   USE_OT               : enable the OpenTracing filter\n#\n# Options can be forced by specifying \"USE_xxx=1\" or can be disabled by using\n# \"USE_xxx=\" (empty string). The list of enabled and disabled options for a\n# given TARGET is enumerated at the end of \"make help\".\n#\n# Variables useful for packagers :\n#   CC is set to \"cc\" by default and is used for compilation only.\n#   LD is set to \"cc\" by default and is used for linking only.\n#   ARCH may be useful to force build of 32-bit binary on 64-bit systems\n#   CFLAGS is automatically set for the specified CPU and may be overridden.\n#   LDFLAGS is automatically set to -g and may be overridden.\n#   DEP may be cleared to ignore changes to include files during development\n#   SMALL_OPTS may be used to specify some options to shrink memory usage.\n#   DEBUG may be used to set some internal debugging options.\n#   ERR may be set to non-empty to pass -Werror to the compiler\n#   ADDINC may be used to complete the include path in the form -Ipath.\n#   ADDLIB may be used to complete the library list in the form -Lpath -llib.\n#   DEFINE may be used to specify any additional define, which will be reported\n#          by \"haproxy -vv\" in CFLAGS.\n#   SILENT_DEFINE may be used to specify other defines which will not be\n#     reported by \"haproxy -vv\".\n#   EXTRA   is used to force building or not building some extra tools.\n#   DESTDIR is not set by default and is used for installation only.\n#           It might be useful to set DESTDIR if you want to install haproxy\n#           in a sandbox.\n#   PREFIX  is set to \"/usr/local\" by default and is used for installation only.\n#   SBINDIR is set to \"$(PREFIX)/sbin\" by default and is used for installation\n#           only.\n#   MANDIR  is set to \"$(PREFIX)/share/man\" by default and is used for\n#           installation only.\n#   DOCDIR  is set to \"$(PREFIX)/doc/haproxy\" by default and is used for\n#           installation only.\n#   HLUA_PREPEND_PATH may be used to prepend a folder to Lua's default package.path.\n#   HLUA_PREPEND_CPATH may be used to prepend a folder to Lua's default package.cpath.\n#\n# Other variables :\n#   PCRE_CONFIG    : force the binary path to get pcre config (by default\n#                                                              pcre-config)\n#   PCREDIR        : force the path to libpcre.\n#   PCRE_LIB       : force the lib path to libpcre (defaults to $PCREDIR/lib).\n#   PCRE_INC       : force the include path to libpcre ($PCREDIR/inc)\n#   PCRE2_CONFIG   : force the binary path to get pcre2 config (by default\n#                                                               pcre2-config)\n#   SSL_LIB        : force the lib path to libssl/libcrypto\n#   SSL_INC        : force the include path to libssl/libcrypto\n#   LUA_LIB        : force the lib path to lua\n#   LUA_INC        : force the include path to lua\n#   LUA_LIB_NAME   : force the lib name (or automatically evaluated, by order of\n#                                        priority : lua5.3, lua53, lua).\n#   OT_DEBUG       : compile the OpenTracing filter in debug mode\n#   OT_INC         : force the include path to libopentracing-c-wrapper\n#   OT_LIB         : force the lib path to libopentracing-c-wrapper\n#   OT_RUNPATH     : add RUNPATH for libopentracing-c-wrapper to haproxy executable\n#   IGNOREGIT      : ignore GIT commit versions if set.\n#   VERSION        : force haproxy version reporting.\n#   SUBVERS        : add a sub-version (eg: platform, model, ...).\n#   EXTRAVERSION   : local version string to append (e.g. build number etc)\n#   VERDATE        : force haproxy's release date.\n#   VTEST_PROGRAM  : location of the vtest program to run reg-tests.\n#   DEBUG_USE_ABORT: use abort() for program termination, see include/haproxy/bug.h for details\n\n# verbosity: pass V=1 for verbose shell invocation\nV = 0\nQ = @\nifeq ($V,1)\nQ=\nendif\n\n# Function used to detect support of a given option by the compiler.\n# Usage: CFLAGS += $(call cc-opt,option). Eg: $(call cc-opt,-fwrapv)\n# Note: ensure the referencing variable is assigned using \":=\" and not \"=\" to\n#       call it only once.\ncc-opt = $(shell set -e; if $(CC) $(1) -E -xc - -o /dev/null </dev/null >&0 2>&0; then echo \"$(1)\"; fi;)\n\n# same but emits $2 if $1 is not supported\ncc-opt-alt = $(shell set -e; if $(CC) $(1) -E -xc - -o /dev/null </dev/null >&0 2>&0; then echo \"$(1)\"; else echo \"$(2)\"; fi;)\n\n# Disable a warning when supported by the compiler. Don't put spaces around the\n# warning! And don't use cc-opt which doesn't always report an error until\n# another one is also returned.\n# Usage: CFLAGS += $(call cc-nowarn,warning). Eg: $(call cc-opt,format-truncation)\ncc-nowarn = $(shell set -e; if $(CC) -W$(1) -E -xc - -o /dev/null </dev/null >&0 2>&0; then echo \"-Wno-$(1)\"; fi;)\n\n#### Installation options.\nDESTDIR =\nPREFIX = /usr/local\nSBINDIR = $(PREFIX)/sbin\nMANDIR = $(PREFIX)/share/man\nDOCDIR = $(PREFIX)/doc/haproxy\n\n#### TARGET system\n# Use TARGET=<target_name> to optimize for a specific target OS among the\n# following list (use the default \"generic\" if uncertain) :\n#    linux-glibc, linux-glibc-legacy, linux-musl, solaris, freebsd, dragonfly,\n#    openbsd, netbsd, cygwin, haiku, aix51, aix52, aix72-gcc, osx, generic,\n#    custom\nTARGET =\n\n#### TARGET CPU\n# Use CPU=<cpu_name> to optimize for a particular CPU, among the following\n# list :\n#    generic, native, i586, i686, ultrasparc, power8, power9, custom\nCPU = generic\n\n#### Architecture, used when not building for native architecture\n# Use ARCH=<arch_name> to force build for a specific architecture. Known\n# architectures will lead to \"-m32\" or \"-m64\" being added to CFLAGS and\n# LDFLAGS. This can be required to build 32-bit binaries on 64-bit targets.\n# Currently, only 32, 64, x86_64, i386, i486, i586 and i686 are understood.\nARCH =\n\n#### Toolchain options.\nCC = cc\nLD = $(CC)\n\n#### Debug flags (typically \"-g\").\n# Those flags only feed CFLAGS so it is not mandatory to use this form.\nDEBUG_CFLAGS = -g\n\n#### Add -Werror when set to non-empty\nERR =\n\n#### May be used to force running a specific set of reg-tests\nREG_TEST_FILES =\nREG_TEST_SCRIPT=./scripts/run-regtests.sh\n\n#### Compiler-specific flags that may be used to disable some negative over-\n# optimization or to silence some warnings.\n# We rely on signed integer wraparound on overflow, however clang think it\n# can do whatever it wants since it's an undefined behavior, so use -fwrapv\n# to be sure we get the intended behavior.\nSPEC_CFLAGS := -Wall -Wextra -Wdeclaration-after-statement\nSPEC_CFLAGS += $(call cc-opt-alt,-fwrapv,$(call cc-opt,-fno-strict-overflow))\nSPEC_CFLAGS += $(call cc-nowarn,address-of-packed-member)\nSPEC_CFLAGS += $(call cc-nowarn,unused-label)\nSPEC_CFLAGS += $(call cc-nowarn,sign-compare)\nSPEC_CFLAGS += $(call cc-nowarn,unused-parameter)\nSPEC_CFLAGS += $(call cc-nowarn,clobbered)\nSPEC_CFLAGS += $(call cc-nowarn,missing-field-initializers)\nSPEC_CFLAGS += $(call cc-nowarn,cast-function-type)\nSPEC_CFLAGS += $(call cc-nowarn,string-plus-int)\nSPEC_CFLAGS += $(call cc-opt,-Wtype-limits)\nSPEC_CFLAGS += $(call cc-opt,-Wshift-negative-value)\nSPEC_CFLAGS += $(call cc-opt,-Wshift-overflow=2)\nSPEC_CFLAGS += $(call cc-opt,-Wduplicated-cond)\nSPEC_CFLAGS += $(call cc-opt,-Wnull-dereference)\n\nifneq ($(ERR),)\nSPEC_CFLAGS += -Werror\nendif\n\n#### Memory usage tuning\n# If small memory footprint is required, you can reduce the buffer size. There\n# are 2 buffers per concurrent session, so 16 kB buffers will eat 32 MB memory\n# with 1000 concurrent sessions. Putting it slightly lower than a page size\n# will prevent the additional parameters to go beyond a page. 8030 bytes is\n# exactly 5.5 TCP segments of 1460 bytes and is generally good. Useful tuning\n# macros include :\n#    SYSTEM_MAXCONN, BUFSIZE, MAXREWRITE, REQURI_LEN, CAPTURE_LEN.\n# Example: SMALL_OPTS = -DBUFSIZE=8030 -DMAXREWRITE=1030 -DSYSTEM_MAXCONN=1024\nSMALL_OPTS =\n\n#### Debug settings\n# You can enable debugging on specific code parts by setting DEBUG=-DDEBUG_xxx.\n# Use quotes and spaces if multiple options are needed (the DEBUG variables is\n# passed as-is to CFLAGS). Please check sources for their exact meaning or do\n# not use them at all. Some even more obscure ones might also be available\n# without appearing here. Currently defined DEBUG macros include DEBUG_FULL,\n# DEBUG_MEM_STATS, DEBUG_DONT_SHARE_POOLS, DEBUG_NO_LOCKLESS_POOLS, DEBUG_FD,\n# DEBUG_NO_LOCAL_POOLS, DEBUG_FAIL_ALLOC, DEBUG_STRICT_NOCRASH, DEBUG_HPACK,\n# DEBUG_AUTH, DEBUG_SPOE, DEBUG_UAF, DEBUG_THREAD, DEBUG_STRICT, DEBUG_DEV.\nDEBUG =\n\n#### Trace options\n# Use TRACE=1 to trace function calls to file \"trace.out\" or to stderr if not\n# possible.\nTRACE =\n\n#### Additional include and library dirs\n# Redefine this if you want to add some special PATH to include/libs\nADDINC =\nADDLIB =\n\n#### Specific macro definitions\n# Use DEFINE=-Dxxx to set any tunable macro. Anything declared here will appear\n# in the build options reported by \"haproxy -vv\". Use SILENT_DEFINE if you do\n# not want to pollute the report with complex defines.\n# The following settings might be of interest when SSL is enabled :\n#   LISTEN_DEFAULT_CIPHERS is a cipher suite string used to set the default SSL\n#           ciphers on \"bind\" lines instead of using OpenSSL's defaults.\n#   CONNECT_DEFAULT_CIPHERS is a cipher suite string used to set the default\n#           SSL ciphers on \"server\" lines instead of using OpenSSL's defaults.\nDEFINE =\nSILENT_DEFINE =\n\n#### extra programs to build\n# Force this to enable building extra programs or to disable them.\n# It's automatically appended depending on the targets.\nEXTRA =\n\n#### CPU dependent optimizations\n# Some CFLAGS are set by default depending on the target CPU. Those flags only\n# feed CPU_CFLAGS, which in turn feed CFLAGS, so it is not mandatory to use\n# them. You should not have to change these options. Better use CPU_CFLAGS or\n# even CFLAGS instead.\nCPU_CFLAGS.generic    = -O0\nCPU_CFLAGS.native     = -O2 -march=native\nCPU_CFLAGS.i586       = -O2 -march=i586\nCPU_CFLAGS.i686       = -O2 -march=i686\nCPU_CFLAGS.ultrasparc = -O6 -mcpu=v9 -mtune=ultrasparc\nCPU_CFLAGS.power8     = -O2 -mcpu=power8 -mtune=power8\nCPU_CFLAGS.power9     = -O2 -mcpu=power9 -mtune=power9\nCPU_CFLAGS            = $(CPU_CFLAGS.$(CPU))\n\n#### ARCH dependent flags, may be overridden by CPU flags\nARCH_FLAGS.32     = -m32\nARCH_FLAGS.64     = -m64\nARCH_FLAGS.i386   = -m32 -march=i386\nARCH_FLAGS.i486   = -m32 -march=i486\nARCH_FLAGS.i586   = -m32 -march=i586\nARCH_FLAGS.i686   = -m32 -march=i686\nARCH_FLAGS.x86_64 = -m64 -march=x86-64\nARCH_FLAGS        = $(ARCH_FLAGS.$(ARCH))\n\n#### Common CFLAGS\n# These CFLAGS contain general optimization options, CPU-specific optimizations\n# and debug flags. They may be overridden by some distributions which prefer to\n# set all of them at once instead of playing with the CPU and DEBUG variables.\nCFLAGS = $(ARCH_FLAGS) $(CPU_CFLAGS) $(DEBUG_CFLAGS) $(SPEC_CFLAGS)\n\n#### Common LDFLAGS\n# These LDFLAGS are used as the first \"ld\" options, regardless of any library\n# path or any other option. They may be changed to add any linker-specific\n# option at the beginning of the ld command line.\nLDFLAGS = $(ARCH_FLAGS) -g\n\n#### list of all \"USE_*\" options. These ones must be updated if new options are\n# added, so that the relevant options are properly added to the CFLAGS and to\n# the reported build options.\nuse_opts = USE_EPOLL USE_KQUEUE USE_NETFILTER                                 \\\n           USE_PCRE USE_PCRE_JIT USE_PCRE2 USE_PCRE2_JIT USE_POLL             \\\n           USE_PRIVATE_CACHE USE_THREAD USE_PTHREAD_PSHARED USE_BACKTRACE     \\\n           USE_STATIC_PCRE USE_STATIC_PCRE2 USE_TPROXY USE_LINUX_TPROXY       \\\n           USE_LINUX_SPLICE USE_LIBCRYPT USE_CRYPT_H                          \\\n           USE_GETADDRINFO USE_OPENSSL USE_LUA USE_FUTEX USE_ACCEPT4          \\\n           USE_CLOSEFROM USE_ZLIB USE_SLZ USE_CPU_AFFINITY USE_TFO USE_NS     \\\n           USE_DL USE_RT USE_DEVICEATLAS USE_51DEGREES USE_WURFL USE_SYSTEMD  \\\n           USE_OBSOLETE_LINKER USE_PRCTL USE_THREAD_DUMP USE_EVPORTS USE_OT   \\\n           USE_QUIC\n\n#### Target system options\n# Depending on the target platform, some options are set, as well as some\n# CFLAGS and LDFLAGS. All variables pre-set here will not appear in the build\n# options string. They may be set to any value, but are historically set to\n# \"implicit\" which eases debugging. You should not have to change anything\n# there unless you're adding support for a new platform.\ndefault_opts = $(foreach name,$(1),$(eval $(name)=implicit))\n\n# poll() is always supported, unless explicitly disabled by passing USE_POLL=\"\"\n# on the make command line.\nUSE_POLL   = default\n\n# Always enable threads support by default and let the Makefile detect if\n# HAProxy can be compiled with threads or not.\n\n# generic system target has nothing specific\nifeq ($(TARGET),generic)\n  set_target_defaults = $(call default_opts,USE_POLL USE_TPROXY)\nendif\n\n# Haiku\nifeq ($(TARGET),haiku)\n  TARGET_LDFLAGS = -lnetwork\n  set_target_defaults = $(call default_opts,USE_POLL USE_TPROXY)\nendif\n\n# For linux >= 2.6.28 and glibc\nifeq ($(TARGET),linux-glibc)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_DL USE_RT USE_CRYPT_H USE_NETFILTER  \\\n    USE_CPU_AFFINITY USE_THREAD USE_EPOLL USE_FUTEX USE_LINUX_TPROXY          \\\n    USE_ACCEPT4 USE_LINUX_SPLICE USE_PRCTL USE_THREAD_DUMP USE_NS USE_TFO     \\\n    USE_GETADDRINFO USE_BACKTRACE)\nifneq ($(shell echo __arm__/__aarch64__ | $(CC) -E -xc - | grep '^[^\\#]'),__arm__/__aarch64__)\n  TARGET_LDFLAGS=-latomic\nendif\nendif\n\n# For linux >= 2.6.28, glibc without new features\nifeq ($(TARGET),linux-glibc-legacy)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_DL USE_RT USE_CRYPT_H USE_NETFILTER  \\\n    USE_CPU_AFFINITY USE_THREAD USE_EPOLL USE_FUTEX USE_LINUX_TPROXY          \\\n    USE_ACCEPT4 USE_LINUX_SPLICE USE_PRCTL USE_THREAD_DUMP USE_GETADDRINFO)\nendif\n\n# For linux >= 2.6.28 and musl\nifeq ($(TARGET),linux-musl)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_DL USE_RT USE_CRYPT_H USE_NETFILTER  \\\n    USE_CPU_AFFINITY USE_THREAD USE_EPOLL USE_FUTEX USE_LINUX_TPROXY          \\\n    USE_ACCEPT4 USE_LINUX_SPLICE USE_PRCTL USE_THREAD_DUMP USE_NS USE_TFO     \\\n    USE_GETADDRINFO)\nifneq ($(shell echo __arm__/__aarch64__ | $(CC) -E -xc - | grep '^[^\\#]'),__arm__/__aarch64__)\n  TARGET_LDFLAGS=-latomic\nendif\nendif\n\n# Solaris 10 and above\nifeq ($(TARGET),solaris)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_CRYPT_H USE_GETADDRINFO USE_THREAD \\\n    USE_RT USE_OBSOLETE_LINKER USE_EVPORTS USE_CLOSEFROM)\n  TARGET_CFLAGS  = -DFD_SETSIZE=65536 -D_REENTRANT -D_XOPEN_SOURCE=500 -D__EXTENSIONS__\n  TARGET_LDFLAGS = -lnsl -lsocket\nendif\n\n# FreeBSD 10 and above\nifeq ($(TARGET),freebsd)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_CPU_AFFINITY USE_KQUEUE   \\\n    USE_ACCEPT4 USE_CLOSEFROM USE_GETADDRINFO)\nendif\n\n# DragonFlyBSD 4.3 and above\nifeq ($(TARGET),dragonfly)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_CPU_AFFINITY USE_KQUEUE   \\\n    USE_ACCEPT4 USE_CLOSEFROM USE_GETADDRINFO)\nendif\n\n# Mac OS/X\nifeq ($(TARGET),osx)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_CPU_AFFINITY USE_KQUEUE   \\\n    USE_GETADDRINFO)\n  EXPORT_SYMBOL  = -export_dynamic\nendif\n\n# OpenBSD 6.3 and above\nifeq ($(TARGET),openbsd)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_KQUEUE USE_ACCEPT4        \\\n    USE_CLOSEFROM USE_GETADDRINFO)\nendif\n\n# NetBSD 8 and above\nifeq ($(TARGET),netbsd)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_THREAD USE_KQUEUE USE_ACCEPT4 USE_CLOSEFROM   \\\n    USE_GETADDRINFO)\nendif\n\n# AIX 5.1 only\nifeq ($(TARGET),aix51)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_LIBCRYPT USE_OBSOLETE_LINKER USE_PRIVATE_CACHE)\n  TARGET_CFLAGS   = -Dss_family=__ss_family -Dip6_hdr=ip6hdr -DSTEVENS_API -D_LINUX_SOURCE_COMPAT -Dunsetenv=my_unsetenv\n  DEBUG_CFLAGS    =\nendif\n\n# AIX 5.2\nifeq ($(TARGET),aix52)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_LIBCRYPT USE_OBSOLETE_LINKER)\n  TARGET_CFLAGS   = -D_MSGQSUPPORT\n  DEBUG_CFLAGS    =\nendif\n\n# AIX 7.2 and above\nifeq ($(TARGET),aix72-gcc)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_THREAD USE_LIBCRYPT USE_OBSOLETE_LINKER USE_GETADDRINFO)\n  TARGET_CFLAGS   = -D_H_XMEM -D_H_VAR\n  TARGET_LDFLAGS  = -latomic\nendif\n\n# Cygwin\nifeq ($(TARGET),cygwin)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_OBSOLETE_LINKER)\n  # Cygwin adds IPv6 support only in version 1.7 (in beta right now). \n  TARGET_CFLAGS  = $(if $(filter 1.5.%, $(shell uname -r)), -DUSE_IPV6 -DAF_INET6=23 -DINET6_ADDRSTRLEN=46, )\nendif\n\n# set the default settings according to the target above\n$(set_target_defaults)\n\n#### Determine version, sub-version and release date.\n# If GIT is found, and IGNOREGIT is not set, VERSION, SUBVERS and VERDATE are\n# extracted from the last commit. Otherwise, use the contents of the files\n# holding the same names in the current directory.\n\nifeq ($(IGNOREGIT),)\nVERSION := $(shell [ -d .git/. ] && (git describe --tags --match 'v*' --abbrev=0 | cut -c 2-) 2>/dev/null)\nifneq ($(VERSION),)\n# OK git is there and works.\nSUBVERS := $(shell comms=`git log --format=oneline --no-merges v$(VERSION).. 2>/dev/null | wc -l | tr -d '[:space:]'`; commit=`(git log -1 --pretty=%h --abbrev=6) 2>/dev/null`; [ $$comms -gt 0 ] && echo \"-$$commit-$$comms\")\nVERDATE := $(shell git log -1 --pretty=format:%ci | cut -f1 -d' ' | tr '-' '/')\nendif\nendif\n\n# Last commit version not found, take it from the files.\nifeq ($(VERSION),)\nVERSION := $(shell cat VERSION 2>/dev/null || touch VERSION)\nendif\nifeq ($(SUBVERS),)\nSUBVERS := $(shell (grep -v '\\$$Format' SUBVERS 2>/dev/null || touch SUBVERS) | head -n 1)\nendif\nifeq ($(VERDATE),)\nVERDATE := $(shell (grep -v '^\\$$Format' VERDATE 2>/dev/null || touch VERDATE) | head -n 1 | cut -f1 -d' ' | tr '-' '/')\nendif\n\n# this one is always empty by default and appended verbatim\nEXTRAVERSION =\n\n#### Build options\n# Do not change these ones, enable USE_* variables instead.\nOPTIONS_CFLAGS  =\nOPTIONS_LDFLAGS =\nOPTIONS_OBJS    =\n\n#### Extra objects to be built and integrated (used only for development)\nEXTRA_OBJS =\n\n# Return USE_xxx=$(USE_xxx) if the variable was set from the environment or the\n# command line.\n# Usage:\n#   BUILD_OPTIONS += $(call ignore_implicit,USE_xxx)\nignore_implicit = $(if $(subst environment,,$(origin $(1))),         \\\n                       $(if $(subst command line,,$(origin $(1))),,  \\\n                            $(1)=$($(1))),                           \\\n                       $(1)=$($(1)))                                 \\\n\n# This variable collects all USE_* values except those set to \"implicit\". This\n# is used to report a list of all flags which were used to build this version.\n# Do not assign anything to it.\nBUILD_OPTIONS  := $(foreach opt,$(use_opts),$(call ignore_implicit,$(opt)))\nBUILD_FEATURES := $(foreach opt,$(patsubst USE_%,%,$(use_opts)),$(if $(USE_$(opt)),+$(opt),-$(opt)))\n\n# All USE_* options have their equivalent macro defined in the code (some might\n# possibly be unused though)\nOPTIONS_CFLAGS += $(foreach opt,$(use_opts),$(if $($(opt)),-D$(opt),))\n\nifneq ($(USE_LIBCRYPT),)\nifneq ($(TARGET),openbsd)\nifneq ($(TARGET),osx)\nOPTIONS_LDFLAGS += -lcrypt\nendif\nendif\nendif\n\nifneq ($(USE_SLZ),)\n# Use SLZ_INC and SLZ_LIB to force path to zlib.h and libz.{a,so} if needed.\nSLZ_INC =\nSLZ_LIB =\nOPTIONS_CFLAGS  += $(if $(SLZ_INC),-I$(SLZ_INC))\nOPTIONS_LDFLAGS += $(if $(SLZ_LIB),-L$(SLZ_LIB)) -lslz\nendif\n\nifneq ($(USE_ZLIB),)\n# Use ZLIB_INC and ZLIB_LIB to force path to zlib.h and libz.{a,so} if needed.\nZLIB_INC =\nZLIB_LIB =\nOPTIONS_CFLAGS  += $(if $(ZLIB_INC),-I$(ZLIB_INC))\nOPTIONS_LDFLAGS += $(if $(ZLIB_LIB),-L$(ZLIB_LIB)) -lz\nendif\n\nifneq ($(USE_POLL),)\nOPTIONS_OBJS   += src/ev_poll.o\nendif\n\nifneq ($(USE_EPOLL),)\nOPTIONS_OBJS   += src/ev_epoll.o\nendif\n\nifneq ($(USE_KQUEUE),)\nOPTIONS_OBJS   += src/ev_kqueue.o\nendif\n\nifneq ($(USE_EVPORTS),)\nOPTIONS_OBJS   += src/ev_evports.o\nendif\n\nifneq ($(USE_DL),)\nOPTIONS_LDFLAGS += -ldl\nendif\n\nifneq ($(USE_RT),)\nOPTIONS_LDFLAGS += -lrt\nendif\n\nifneq ($(USE_THREAD),)\nOPTIONS_LDFLAGS += -lpthread\nendif\n\nifneq ($(USE_BACKTRACE),)\nOPTIONS_LDFLAGS += -Wl,$(if $(EXPORT_SYMBOL),$(EXPORT_SYMBOL),--export-dynamic)\nendif\n\nifneq ($(USE_OPENSSL),)\nSSL_INC =\nSSL_LIB =\n# OpenSSL is packaged in various forms and with various dependencies.\n# In general -lssl is enough, but on some platforms, -lcrypto may be needed,\n# reason why it's added by default. Some even need -lz, then you'll need to\n# pass it in the \"ADDLIB\" variable if needed. If your SSL libraries are not\n# in the usual path, use SSL_INC=/path/to/inc and SSL_LIB=/path/to/lib.\nOPTIONS_CFLAGS  += $(if $(SSL_INC),-I$(SSL_INC))\nOPTIONS_LDFLAGS += $(if $(SSL_LIB),-L$(SSL_LIB)) -lssl -lcrypto\nifneq ($(USE_DL),)\nOPTIONS_LDFLAGS += -ldl\nendif\nOPTIONS_OBJS  += src/ssl_sample.o src/ssl_sock.o src/ssl_crtlist.o src/ssl_ckch.o src/ssl_utils.o src/cfgparse-ssl.o\nendif\nifneq ($(USE_QUIC),)\nOPTIONS_OBJS += src/quic_sock.o src/proto_quic.o src/xprt_quic.o src/quic_tls.o \\\n                src/quic_frame.o src/quic_cc.o src/quic_cc_newreno.o\nendif\n\n# The private cache option affect the way the shctx is built\nifeq ($(USE_PRIVATE_CACHE),)\nifneq ($(USE_PTHREAD_PSHARED),)\nOPTIONS_LDFLAGS += -lpthread\nendif\nendif\n\n# For nuster\nifeq ($(USE_OPENSSL),)\nifneq ($(USE_PTHREAD_PSHARED),)\nOPTIONS_CFLAGS  += -DNUSTER_USE_PTHREAD\nOPTIONS_LDFLAGS += -lpthread\nendif\nendif\nifneq ($(USE_LUA),)\ncheck_lua_lib = $(shell echo \"int main(){}\" | $(CC) -o /dev/null -x c - $(2) -l$(1) 2>/dev/null && echo $(1))\ncheck_lua_inc = $(shell if [ -d $(2)$(1) ]; then echo $(2)$(1); fi;)\n\nOPTIONS_CFLAGS  += $(if $(LUA_INC),-I$(LUA_INC))\nLUA_LD_FLAGS := -Wl,$(if $(EXPORT_SYMBOL),$(EXPORT_SYMBOL),--export-dynamic) $(if $(LUA_LIB),-L$(LUA_LIB))\nifeq ($(LUA_LIB_NAME),)\n# Try to automatically detect the Lua library\nLUA_LIB_NAME := $(firstword $(foreach lib,lua5.3 lua53 lua,$(call check_lua_lib,$(lib),$(LUA_LD_FLAGS))))\nifeq ($(LUA_LIB_NAME),)\n$(error unable to automatically detect the Lua library name, you can enforce its name with LUA_LIB_NAME=<name> (where <name> can be lua5.3, lua53, lua, ...))\nendif\nLUA_INC := $(firstword $(foreach lib,lua5.3 lua53 lua,$(call check_lua_inc,$(lib),\"/usr/include/\")))\nifneq ($(LUA_INC),)\nOPTIONS_CFLAGS  += -I$(LUA_INC)\nendif\nifneq ($(HLUA_PREPEND_PATH),)\nOPTIONS_CFLAGS  += -DHLUA_PREPEND_PATH=$(HLUA_PREPEND_PATH)\nBUILD_OPTIONS += HLUA_PREPEND_PATH=$(HLUA_PREPEND_PATH)\nendif\nifneq ($(HLUA_PREPEND_CPATH),)\nOPTIONS_CFLAGS  += -DHLUA_PREPEND_CPATH=$(HLUA_PREPEND_CPATH)\nBUILD_OPTIONS += HLUA_PREPEND_CPATH=$(HLUA_PREPEND_CPATH)\nendif\nendif\n\nOPTIONS_LDFLAGS += $(LUA_LD_FLAGS) -l$(LUA_LIB_NAME) -lm\nifneq ($(USE_DL),)\nOPTIONS_LDFLAGS += -ldl\nendif\nOPTIONS_OBJS    += src/hlua.o src/hlua_fcn.o\nendif\n\nifneq ($(USE_DEVICEATLAS),)\nifeq ($(USE_PCRE),)\n$(error the DeviceAtlas module needs the PCRE library in order to compile)\nendif\n# Use DEVICEATLAS_SRC and possibly DEVICEATLAS_INC and DEVICEATLAS_LIB to force path\n# to DeviceAtlas headers and libraries if needed.\nDEVICEATLAS_SRC =\nDEVICEATLAS_INC = $(DEVICEATLAS_SRC)\nDEVICEATLAS_LIB = $(DEVICEATLAS_SRC)\nifeq ($(DEVICEATLAS_SRC),)\nOPTIONS_LDFLAGS += -lda\nelse\nOPTIONS_OBJS\t+= $(DEVICEATLAS_LIB)/json.o\nOPTIONS_OBJS\t+= $(DEVICEATLAS_LIB)/dac.o\nendif\nOPTIONS_OBJS\t+= src/da.o\nOPTIONS_CFLAGS += $(if $(DEVICEATLAS_INC),-I$(DEVICEATLAS_INC))\nendif\n\nifneq ($(USE_51DEGREES),)\n# Use 51DEGREES_SRC and possibly 51DEGREES_INC and 51DEGREES_LIB to force path\n# to 51degrees headers and libraries if needed.\n51DEGREES_SRC =\n51DEGREES_INC = $(51DEGREES_SRC)\n51DEGREES_LIB = $(51DEGREES_SRC)\nOPTIONS_OBJS    += $(51DEGREES_LIB)/../cityhash/city.o\nOPTIONS_OBJS    += $(51DEGREES_LIB)/51Degrees.o\nOPTIONS_OBJS    += src/51d.o\nOPTIONS_CFLAGS  += $(if $(51DEGREES_INC),-I$(51DEGREES_INC))\nifeq ($(USE_THREAD),)\nOPTIONS_CFLAGS  += -DFIFTYONEDEGREES_NO_THREADING\nelse\nOPTIONS_OBJS    += $(51DEGREES_LIB)/../threading.o\nendif\n\nOPTIONS_LDFLAGS += $(if $(51DEGREES_LIB),-L$(51DEGREES_LIB)) -lm\nendif\n\nifneq ($(USE_WURFL),)\n# Use WURFL_SRC and possibly WURFL_INC and WURFL_LIB to force path\n# to WURFL headers and libraries if needed.\nWURFL_SRC =\nWURFL_INC = $(WURFL_SRC)\nWURFL_LIB = $(WURFL_SRC)\nOPTIONS_OBJS    += src/wurfl.o\nOPTIONS_CFLAGS  += $(if $(WURFL_INC),-I$(WURFL_INC))\nifneq ($(WURFL_DEBUG),)\nOPTIONS_CFLAGS  += -DWURFL_DEBUG\nendif\nifneq ($(WURFL_HEADER_WITH_DETAILS),)\nOPTIONS_CFLAGS  += -DWURFL_HEADER_WITH_DETAILS\nendif\nOPTIONS_LDFLAGS += $(if $(WURFL_LIB),-L$(WURFL_LIB)) -lwurfl\nendif\n\nifneq ($(USE_SYSTEMD),)\nOPTIONS_LDFLAGS += -lsystemd\nendif\n\nifneq ($(USE_PCRE)$(USE_STATIC_PCRE)$(USE_PCRE_JIT),)\nifneq ($(USE_PCRE2)$(USE_STATIC_PCRE2)$(USE_PCRE2_JIT),)\n$(error cannot compile both PCRE and PCRE2 support)\nendif\n# PCREDIR is used to automatically construct the PCRE_INC and PCRE_LIB paths,\n# by appending /include and /lib respectively. If your system does not use the\n# same sub-directories, simply force these variables instead of PCREDIR. It is\n# automatically detected but can be forced if required (for cross-compiling).\n# Forcing PCREDIR to an empty string will let the compiler use the default\n# locations.\n\nPCRE_CONFIG    \t:= pcre-config\nPCREDIR\t        := $(shell $(PCRE_CONFIG) --prefix 2>/dev/null || echo /usr/local)\nifneq ($(PCREDIR),)\nPCRE_INC        := $(PCREDIR)/include\nPCRE_LIB        := $(PCREDIR)/lib\nendif\n\nifeq ($(USE_STATIC_PCRE),)\n# dynamic PCRE\nOPTIONS_CFLAGS  += -DUSE_PCRE $(if $(PCRE_INC),-I$(PCRE_INC))\nOPTIONS_LDFLAGS += $(if $(PCRE_LIB),-L$(PCRE_LIB)) -lpcreposix -lpcre\nelse\n# static PCRE\nOPTIONS_CFLAGS  += -DUSE_PCRE $(if $(PCRE_INC),-I$(PCRE_INC))\nOPTIONS_LDFLAGS += $(if $(PCRE_LIB),-L$(PCRE_LIB)) -Wl,-Bstatic -lpcreposix -lpcre -Wl,-Bdynamic\nendif\nendif\n\nifneq ($(USE_PCRE2)$(USE_STATIC_PCRE2)$(USE_PCRE2_JIT),)\nPCRE2_CONFIG \t:= pcre2-config\nPCRE2DIR\t:= $(shell $(PCRE2_CONFIG) --prefix 2>/dev/null || echo /usr/local)\nifneq ($(PCRE2DIR),)\nPCRE2_INC       := $(PCRE2DIR)/include\nPCRE2_LIB       := $(PCRE2DIR)/lib\n\nifeq ($(PCRE2_WIDTH),)\nPCRE2_WIDTH\t= 8\nendif\n\nifneq ($(PCRE2_WIDTH),8)\nifneq ($(PCRE2_WIDTH),16)\nifneq ($(PCRE2_WIDTH),32)\n$(error PCRE2_WIDTH needs to be set to either 8,16 or 32)\nendif\nendif\nendif\n\n\nPCRE2_LDFLAGS\t:= $(shell $(PCRE2_CONFIG) --libs$(PCRE2_WIDTH) 2>/dev/null || echo -L/usr/local/lib -lpcre2-$(PCRE2_WIDTH))\n\nifeq ($(PCRE2_LDFLAGS),)\n$(error libpcre2-$(PCRE2_WIDTH) not found)\nelse\nifeq ($(PCRE2_WIDTH),8)\nPCRE2_LDFLAGS\t+= -lpcre2-posix\nendif\nendif\n\nOPTIONS_CFLAGS\t+= -DUSE_PCRE2 -DPCRE2_CODE_UNIT_WIDTH=$(PCRE2_WIDTH)\nOPTIONS_CFLAGS  += $(if $(PCRE2_INC), -I$(PCRE2_INC))\n\nifneq ($(USE_STATIC_PCRE2),)\nOPTIONS_LDFLAGS += $(if $(PCRE2_LIB),-L$(PCRE2_LIB)) -Wl,-Bstatic -L$(PCRE2_LIB) $(PCRE2_LDFLAGS) -Wl,-Bdynamic\nelse\nOPTIONS_LDFLAGS += $(if $(PCRE2_LIB),-L$(PCRE2_LIB)) -L$(PCRE2_LIB) $(PCRE2_LDFLAGS)\nendif\n\nendif\nendif\n\n#### Global compile options\nVERBOSE_CFLAGS = $(CFLAGS) $(TARGET_CFLAGS) $(SMALL_OPTS) $(DEFINE)\nCOPTS  = -Iinclude\n\nCOPTS += $(CFLAGS) $(TARGET_CFLAGS) $(SMALL_OPTS) $(DEFINE) $(SILENT_DEFINE)\nCOPTS += $(DEBUG) $(OPTIONS_CFLAGS) $(ADDINC)\n\nifneq ($(VERSION)$(SUBVERS)$(EXTRAVERSION),)\nCOPTS += -DCONFIG_HAPROXY_VERSION=\\\"$(VERSION)$(SUBVERS)$(EXTRAVERSION)\\\"\nendif\n\nifneq ($(VERDATE),)\nCOPTS += -DCONFIG_HAPROXY_DATE=\\\"$(VERDATE)\\\"\nendif\n\nifneq ($(TRACE),)\n# if tracing is enabled, we want it to be as fast as possible\nTRACE_COPTS := $(filter-out -O0 -O1 -O2 -pg -finstrument-functions,$(COPTS)) -O3 -fomit-frame-pointer\nCOPTS += -finstrument-functions\nendif\n\nifneq ($(USE_NS),)\nOPTIONS_OBJS  += src/namespace.o\nendif\n\nifneq ($(USE_OT),)\ninclude contrib/opentracing/Makefile\nendif\n\n#### Global link options\n# These options are added at the end of the \"ld\" command line. Use LDFLAGS to\n# add options at the beginning of the \"ld\" command line if needed.\nLDOPTS = $(TARGET_LDFLAGS) $(OPTIONS_LDFLAGS) $(ADDLIB)\n\nifeq ($V,1)\ncmd_CC = $(CC)\ncmd_LD = $(LD)\ncmd_AR = $(AR)\nelse\ncmd_CC = $(Q)echo \"  CC      $@\";$(CC)\ncmd_LD = $(Q)echo \"  LD      $@\";$(LD)\ncmd_AR = $(Q)echo \"  AR      $@\";$(AR)\nendif\n\nifeq ($(TARGET),)\nall:\n\t@echo \"Building HAProxy without specifying a TARGET is not supported.\"\n\t@echo\n\t@echo \"Usage:\"\n\t@echo\n\t@echo \"    $ make help                       # To print a full explanation.\"\n\t@echo \"    $ make TARGET=xxx USE_<feature>=1 # To build HAProxy.\"\n\t@echo\n\t@echo \"The most commonly used targets are:\"\n\t@echo\n\t@echo \"    linux-glibc    - Modern Linux with glibc\"\n\t@echo \"    linux-musl     - Modern Linux with musl\"\n\t@echo \"    freebsd        - FreeBSD\"\n\t@echo \"    openbsd        - OpenBSD\"\n\t@echo \"    netbsd         - NetBSD\"\n\t@echo \"    osx            - macOS\"\n\t@echo \"    solaris        - Solaris\"\n\t@echo\n\t@echo \"Choose the target which matches your OS the most in order to\"\n\t@echo \"gain the maximum performance out of it.\"\n\t@echo\n\t@echo \"Common features you might want to include in your build are:\"\n\t@echo\n\t@echo \"    USE_OPENSSL=1 - Support for TLS encrypted connections\"\n\t@echo \"    USE_ZLIB=1    - Support for HTTP response compression\"\n\t@echo \"    USE_PCRE=1    - Support for PCRE regular expressions\"\n\t@echo \"    USE_LUA=1     - Support for dynamic processing using Lua\"\n\t@echo\n\t@echo \"Use 'make help' to print a full explanation of supported targets\"\n\t@echo \"and features.\"\n\t@echo\n\t@exit 1\nelse\nifneq ($(filter $(TARGET), linux linux22 linux24 linux24e linux26 linux2628),)\nall:\n\t@echo\n\t@echo \"Target '$(TARGET)' was removed from HAProxy 2.0 due to being irrelevant and\"\n\t@echo \"often wrong. Please use 'linux-glibc' instead or define your custom target\"\n\t@echo \"by checking available options using 'make help TARGET=<your-target>'.\"\n\t@echo\n\t@exit 1\nelse\nall: haproxy $(EXTRA)\nendif\nendif\n\nOBJS =\n\nifneq ($(EXTRA_OBJS),)\nOBJS += $(EXTRA_OBJS)\nendif\n\nOBJS += src/mux_h2.o src/mux_fcgi.o src/http_ana.o src/stream.o                \\\n        src/mux_h1.o src/stats.o src/flt_spoe.o src/backend.o                  \\\n        src/tcpcheck.o src/server.o src/tools.o src/cli.o                      \\\n        src/cfgparse.o src/log.o src/cfgparse-listen.o src/check.o             \\\n        src/stick_table.o src/peers.o src/dns.o src/stream_interface.o         \\\n        src/sample.o src/http_htx.o src/haproxy.o src/http_act.o               \\\n        src/proxy.o src/pattern.o src/listener.o src/cache.o                   \\\n        src/http_fetch.o src/session.o src/connection.o src/sink.o             \\\n        src/task.o src/filters.o src/fcgi-app.o src/tcp_rules.o                \\\n        src/payload.o src/mux_pt.o src/flt_http_comp.o                         \\\n        src/cfgparse-global.o src/vars.o src/map.o src/debug.o                 \\\n        src/queue.o src/h1_htx.o src/compression.o src/mworker.o               \\\n        src/flt_trace.o src/acl.o src/trace.o src/proto_sockpair.o             \\\n        src/proto_tcp.o src/lb_chash.o src/htx.o src/xprt_handshake.o          \\\n        src/h1.o src/sock.o src/ring.o src/extcheck.o src/tcp_sample.o         \\\n        src/frontend.o src/h2.o src/channel.o src/applet.o                     \\\n        src/tcp_act.o src/http_rules.o src/fd.o src/raw_sock.o                 \\\n        src/pool.o src/mailers.o src/http_conv.o src/lb_fwrr.o                 \\\n        src/proto_uxst.o src/http.o src/lb_fwlc.o src/lb_fas.o                 \\\n        src/activity.o src/sock_unix.o src/protocol.o                          \\\n        src/mworker-prog.o src/signal.o src/proto_udp.o src/lb_map.o           \\\n        src/sock_inet.o src/ev_select.o src/cfgparse-tcp.o                     \\\n        src/action.o src/thread.o src/sha1.o src/ebmbtree.o                    \\\n        src/cfgparse-unix.o src/dict.o src/time.o                              \\\n        src/hpack-dec.o src/arg.o src/hpack-tbl.o src/eb64tree.o               \\\n        src/chunk.o src/shctx.o src/regex.o src/fcgi.o src/eb32tree.o          \\\n        src/eb32sctree.o src/dynbuf.o src/pipe.o src/lru.o                     \\\n        src/ebimtree.o src/uri_auth.o src/freq_ctr.o src/ebsttree.o            \\\n        src/ebistree.o src/auth.o src/wdt.o src/http_acl.o                     \\\n        src/hpack-enc.o src/hpack-huff.o src/ebtree.o src/base64.o             \\\n        src/hash.o src/dgram.o src/version.o src/fix.o src/mqtt.o\n\nOBJS += src/nuster/cache/engine.o src/nuster/cache/filter.o                    \\\n        src/nuster/nosql/engine.o src/nuster/nosql/filter.o                    \\\n        src/nuster/manager/stats.o src/nuster/manager/engine.o                 \\\n        src/nuster/manager/purger.o                                            \\\n        src/nuster/store/memory.o src/nuster/store/disk.o                      \\\n        src/nuster/shmem.o src/nuster/parser.o src/nuster/http.o               \\\n        src/nuster/key.o src/nuster/dict.o src/nuster/sample.o                 \\\n        src/nuster/misc.o src/nuster/nuster.o\nifneq ($(TRACE),)\nOBJS += src/calltrace.o\nendif\n\n# Used only for forced dependency checking. May be cleared during development.\nINCLUDES = $(wildcard include/*/*.h)\nDEP = $(INCLUDES) .build_opts\n\nhelp:\n\t$(Q)sed -ne \"/^[^#]*$$/q;s/^# \\{0,1\\}\\(.*\\)/\\1/;p\" Makefile\n\t$(Q)echo; \\\n\t   if [ -n \"$(TARGET)\" ]; then \\\n\t     if [ -n \"$(set_target_defaults)\" ]; then \\\n\t        echo \"Current TARGET: $(TARGET)\"; \\\n\t     else \\\n\t        echo \"Current TARGET: $(TARGET) (custom target)\"; \\\n\t     fi; \\\n\t   else \\\n\t     echo \"TARGET not set, you may pass 'TARGET=xxx' to set one among :\";\\\n\t     echo \"  linux-glibc, linux-glibc-legacy, solaris, freebsd, dragonfly, netbsd,\"; \\\n\t     echo \"  osx, openbsd, aix51, aix52, aix72-gcc, cygwin, haiku, generic,\"; \\\n\t     echo \"  custom\"; \\\n\t   fi\n\t$(Q)echo;echo \"Enabled features for TARGET '$(TARGET)' (disable with 'USE_xxx=') :\"\n\t$(Q)set -- $(foreach opt,$(patsubst USE_%,%,$(use_opts)),$(if $(USE_$(opt)),$(opt),)); echo \"  $$*\" | (fmt || cat) 2>/dev/null\n\t$(Q)echo;echo \"Disabled features for TARGET '$(TARGET)' (enable with 'USE_xxx=1') :\"\n\t$(Q)set -- $(foreach opt,$(patsubst USE_%,%,$(use_opts)),$(if $(USE_$(opt)),,$(opt))); echo \"  $$*\" | (fmt || cat) 2>/dev/null\n\n# Used only to force a rebuild if some build options change, but we don't do\n# it for certain targets which take no build options\nifneq (reg-tests, $(firstword $(MAKECMDGOALS)))\nbuild_opts = $(shell rm -f .build_opts.new; echo \\'$(TARGET) $(BUILD_OPTIONS) $(VERBOSE_CFLAGS) $(DEBUG)\\' > .build_opts.new; if cmp -s .build_opts .build_opts.new; then rm -f .build_opts.new; else mv -f .build_opts.new .build_opts; fi)\n.build_opts: $(build_opts)\nelse\n.build_opts:\nendif\n\nhaproxy: $(OPTIONS_OBJS) $(OBJS)\n\t$(cmd_LD) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\nobjsize: haproxy\n\t$(Q)objdump -t $^|grep ' g '|grep -F '.text'|awk '{print $$5 FS $$6}'|sort\n\n%.o:\t%.c $(DEP)\n\t$(cmd_CC) $(COPTS) -c -o $@ $<\n\ncontrib/halog/halog:\n\t$(Q)$(MAKE) -C contrib/halog halog CC='$(cmd_CC)' OPTIMIZE='$(COPTS)'\n\ncontrib/debug/flags:\n\t$(Q)$(MAKE) -C contrib/debug flags CC='$(cmd_CC)' OPTIMIZE='$(COPTS)'\n\ncontrib/debug/poll:\n\t$(Q)$(MAKE) -C contrib/debug poll CC='$(cmd_CC)' OPTIMIZE='$(COPTS)'\n\ncontrib/tcploop/tcploop:\n\t$(Q)$(MAKE) -C contrib/tcploop tcploop CC='$(cmd_CC)' OPTIMIZE='$(COPTS)'\n\n# rebuild it every time\n.PHONY: src/version.c\n\nsrc/calltrace.o: src/calltrace.c $(DEP)\n\t$(cmd_CC) $(TRACE_COPTS) -c -o $@ $<\n\nsrc/haproxy.o:\tsrc/haproxy.c $(DEP)\n\t$(cmd_CC) $(COPTS) \\\n\t      -DBUILD_TARGET='\"$(strip $(TARGET))\"' \\\n\t      -DBUILD_ARCH='\"$(strip $(ARCH))\"' \\\n\t      -DBUILD_CPU='\"$(strip $(CPU))\"' \\\n\t      -DBUILD_CC='\"$(strip $(CC))\"' \\\n\t      -DBUILD_CFLAGS='\"$(strip $(VERBOSE_CFLAGS))\"' \\\n\t      -DBUILD_OPTIONS='\"$(strip $(BUILD_OPTIONS))\"' \\\n\t      -DBUILD_DEBUG='\"$(strip $(DEBUG))\"' \\\n\t      -DBUILD_FEATURES='\"$(strip $(BUILD_FEATURES))\"' \\\n\t       -c -o $@ $<\n\ninstall-man:\n\t$(Q)install -v -d \"$(DESTDIR)$(MANDIR)\"/man1\n\t$(Q)install -v -m 644 doc/haproxy.1 \"$(DESTDIR)$(MANDIR)\"/man1\n\nEXCLUDE_DOCUMENTATION = lgpl gpl coding-style\nDOCUMENTATION = $(filter-out $(EXCLUDE_DOCUMENTATION),$(patsubst doc/%.txt,%,$(wildcard doc/*.txt)))\n\ninstall-doc:\n\t$(Q)install -v -d \"$(DESTDIR)$(DOCDIR)\"\n\t$(Q)for x in $(DOCUMENTATION); do \\\n\t\tinstall -v -m 644 doc/$$x.txt \"$(DESTDIR)$(DOCDIR)\" ; \\\n\tdone\n\ninstall-bin:\n\t$(Q)for i in haproxy $(EXTRA); do \\\n\t\tif ! [ -e \"$$i\" ]; then \\\n\t\t\techo \"Please run 'make' before 'make install'.\"; \\\n\t\t\texit 1; \\\n\t\tfi; \\\n\tdone\n\t$(Q)install -v -d \"$(DESTDIR)$(SBINDIR)\"\n\t$(Q)install -v haproxy $(EXTRA) \"$(DESTDIR)$(SBINDIR)\"\n\t$(Q)ln -s \"$(DESTDIR)$(SBINDIR)/haproxy\" \"$(DESTDIR)$(SBINDIR)/nuster\"\n\ninstall: install-bin install-man install-doc\n\nuninstall:\n\t$(Q)rm -f \"$(DESTDIR)$(MANDIR)\"/man1/haproxy.1\n\t$(Q)for x in $(DOCUMENTATION); do \\\n\t\trm -f \"$(DESTDIR)$(DOCDIR)\"/$$x.txt ; \\\n\tdone\n\t$(Q)-rmdir \"$(DESTDIR)$(DOCDIR)\"\n\t$(Q)rm -f \"$(DESTDIR)$(SBINDIR)\"/haproxy\n\t$(Q)rm -f \"$(DESTDIR)$(SBINDIR)\"/nuster\n\nclean:\n\t$(Q)rm -f *.[oas] src/*.[oas] haproxy test .build_opts .build_opts.new\n\t$(Q)for dir in . src include/* doc; do rm -f $$dir/*~ $$dir/*.rej $$dir/core; done\n\t$(Q)rm -f haproxy-$(VERSION).tar.gz haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)rm -f haproxy-$(VERSION) haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION) nohup.out gmon.out\n\t$(Q)rm -f contrib/*/*.[oas] contrib/*/*/*.[oas] contrib/*/*/*/*.[oas]\n\t$(Q)rm -f contrib/halog/halog contrib/debug/flags contrib/debug/poll contrib/tcploop/tcploop\n\t$(Q)rm -f src/nuster/*.[oas] src/nuster/*/*.[oas]\n\ntags:\n\t$(Q)find src include \\( -name '*.c' -o -name '*.h' \\) -print0 | \\\n\t   xargs -0 etags --declarations --members\n\ncscope:\n\t$(Q)find src include -name \"*.[ch]\" -print | cscope -q -b -i -\n\ntar:\tclean\n\t$(Q)ln -s . haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)\n\t$(Q)tar --exclude=haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/.git \\\n\t    --exclude=haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION) \\\n\t    --exclude=haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz \\\n\t    -cf - haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/* | gzip -c9 >haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)echo haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)rm -f haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)\n\ngit-tar:\n\t$(Q)git archive --format=tar --prefix=\"haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/\" HEAD | gzip -9 > haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)echo haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\nversion:\n\t@echo \"VERSION: $(VERSION)\"\n\t@echo \"SUBVERS: $(SUBVERS)\"\n\t@echo \"VERDATE: $(VERDATE)\"\n\n# never use this one if you don't know what it is used for.\nupdate-version:\n\t@echo \"Ready to update the following versions :\"\n\t@echo \"VERSION: $(VERSION)\"\n\t@echo \"SUBVERS: $(SUBVERS)\"\n\t@echo \"VERDATE: $(VERDATE)\"\n\t@echo \"Press [ENTER] to continue or Ctrl-C to abort now.\";read\n\techo \"$(VERSION)\" > VERSION\n\techo \"$(SUBVERS)\" > SUBVERS\n\techo \"$(VERDATE)\" > VERDATE\n\n# just display the build options\nopts:\n\t@echo -n 'Using: '\n\t@echo -n 'TARGET=\"$(strip $(TARGET))\" '\n\t@echo -n 'ARCH=\"$(strip $(ARCH))\" '\n\t@echo -n 'CPU=\"$(strip $(CPU))\" '\n\t@echo -n 'CC=\"$(strip $(CC))\" '\n\t@echo -n 'ARCH_FLAGS=\"$(strip $(ARCH_FLAGS))\" '\n\t@echo -n 'CPU_CFLAGS=\"$(strip $(CPU_CFLAGS))\" '\n\t@echo -n 'DEBUG_CFLAGS=\"$(strip $(DEBUG_CFLAGS))\" '\n\t@echo \"$(strip $(BUILD_OPTIONS))\"\n\t@echo 'COPTS=\"$(strip $(COPTS))\"'\n\t@echo 'LDFLAGS=\"$(strip $(LDFLAGS))\"'\n\t@echo 'LDOPTS=\"$(strip $(LDOPTS))\"'\n\t@echo 'OPTIONS_OBJS=\"$(strip $(OPTIONS_OBJS))\"'\n\t@echo 'OBJS=\"$(strip $(OBJS))\"'\n\nifeq (reg-tests, $(firstword $(MAKECMDGOALS)))\n  REGTEST_ARGS := $(wordlist 2, $(words $(MAKECMDGOALS)), $(MAKECMDGOALS))\n  $(eval $(REGTEST_ARGS):;@true)\nendif\n\n# Target to run the regression testing script files.\nreg-tests:\n\t$(Q)$(REG_TEST_SCRIPT) --type \"$(REGTESTS_TYPES)\" $(REGTEST_ARGS) $(REG_TEST_FILES)\n.PHONY: $(REGTEST_ARGS)\n\nreg-tests-help:\n\t@echo\n\t@echo \"To launch the reg tests for haproxy, first export to your environment \"\n\t@echo \"VTEST_PROGRAM variable to point to your vtest program:\"\n\t@echo \"    $$ export VTEST_PROGRAM=/opt/local/bin/vtest\"\n\t@echo \"or\"\n\t@echo \"    $$ setenv VTEST_PROGRAM /opt/local/bin/vtest\"\n\t@echo\n\t@echo \"The same thing may be done to set your haproxy program with HAPROXY_PROGRAM \"\n\t@echo \"but with ./haproxy as default value.\"\n\t@echo\n\t@echo \"To run all the tests:\"\n\t@echo \"    $$ make reg-tests\"\n\t@echo\n\t@echo \"You can also set the programs to be used on the command line:\"\n\t@echo \"    $$ VTEST_PROGRAM=<...> HAPROXY_PROGRAM=<...> make reg-tests\"\n\t@echo\n\t@echo \"To run tests with specific types:\"\n\t@echo \"    $$ REGTESTS_TYPES=slow,default make reg-tests\"\n\t@echo\n\t@echo \"with 'any' as default value for REGTESTS_TYPES variable.\"\n\t@echo\n\t@echo \"About the reg test types:\"\n\t@echo \"    any         : all the tests without distinction (this is the default\"\n\t@echo \"                  value of REGTESTS_TYPES.\"\n\t@echo \"    default     : dedicated to pure haproxy compliance tests.\"\n\t@echo \"    slow        : scripts which take non negligible time to run.\"\n\t@echo \"    bug         : scripts in relation with bugs they help to reproduce.\"\n\t@echo \"    broken      : scripts triggering known broken behaviors for which\"\n\t@echo \"                  there is still no fix.\"\n\t@echo \"    experimental: for scripts which are experimental, typically used to\"\n\t@echo \"                  develop new scripts.\"\n\t@echo\n\t@echo \"Note that 'reg-tests' target run '\"$(REG_TEST_SCRIPT)\"' script\"\n\t@echo \"(see --help option of this script for more information).\"\n\n.PHONY: reg-tests reg-tests-help\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.0673828125,
          "content": "The HAProxy documentation has been split into a number of different files for\nease of use.\n\nPlease refer to the following files depending on what you're looking for :\n\n  - INSTALL for instructions on how to build and install HAProxy\n  - BRANCHES to understand the project's life cycle and what version to use\n  - LICENSE for the project's license\n  - CONTRIBUTING for the process to follow to submit contributions\n\nThe more detailed documentation is located into the doc/ directory :\n\n  - doc/intro.txt for a quick introduction on HAProxy\n  - doc/configuration.txt for the configuration's reference manual\n  - doc/lua.txt for the Lua's reference manual\n  - doc/SPOE.txt for how to use the SPOE engine\n  - doc/network-namespaces.txt for how to use network namespaces under Linux\n  - doc/management.txt for the management guide\n  - doc/regression-testing.txt for how to use the regression testing suite\n  - doc/peers.txt for the peers protocol reference\n  - doc/coding-style.txt for how to adopt HAProxy's coding style\n  - doc/internals for developer-specific documentation (not all up to date)\n"
        },
        {
          "name": "README-CN.md",
          "type": "blob",
          "size": 33.0146484375,
          "content": "# nuster\n\n[Wiki](https://github.com/jiangwenyuan/nuster/wiki) | [English](README.md) | [中文](README-CN.md) | [日本語](README-JP.md)\n\n基于HAProxy的高性能HTTP缓存服务器和RESTful NoSQL缓存服务器。\n\n> 中文版更新可能不及时，最新版请参照英文版[README.md](README.md)\n\n# 目录\n\n* [介绍](#介绍)\n* [性能](#性能)\n* [入门指南](#入门指南)\n* [使用方法](#使用方法)\n* [指令](#指令)\n* [Cache](#cache)\n* [NoSQL](#nosql)\n* [管理](#管理)\n  * [统计](#统计)\n  * [开启关闭rule](#开启关闭rule)\n  * [更新生存时间](#更新生存时间)\n  * [清除](#清除)\n* [Store](#store)\n* [Sample fetches](#sample-fetches)\n* [FAQ](#faq)\n\n# 介绍\n\nnuster是一个基于HAProxy的高性能HTTP缓存服务器和RESTful NoSQL缓存服务器，完全兼容HAProxy，并且利用HAProxy的ACL功能来提供非常细致的缓存规则。\n\n## 特性\n\n### HTTP/TCP负载均衡器\n\nnuster可以作为HTTP/TCP负载均衡器使用。\n\n* 继承了HAProxy的所有特性，完全兼容HAProxy\n* 负载均衡\n* 前端后端HTTPS\n* HTTP压缩\n* HTTP重写重定向\n* HTTP信息增删改\n* HTTP2\n* 监控\n* 粘性\n* 访问控制\n* 内容切换\n\n### HTTP缓存服务器\n\nnuster也可以用作类似Varnish或者Nginx那样的HTTP缓存服务器，来缓存动态或者静态的HTTP资源。\n\n* HAProxy的所有特性(HTTPS, HTTP/2, ACL, etc)\n* 非常快\n* 强大的动态缓存功能\n  * 基于HTTP method, URI, path, query, header, cookies, etc\n  * 基于HTTP request or response contents, etc\n  * 基于environment variables, server state, etc\n  * 基于SSL version, SNI, etc\n  * 基于connection rate, number, byte, etc\n* 缓存管理\n* 缓存清除\n* 缓存统计信息\n* 缓存生存时间\n* 持久化\n\n### RESTful NoSQL缓存服务器\n\nnuster也可以用作RESTful NoSQL缓存服务器, 用HTTP `POST/GET/DELETE` 来 添加/取得/删除 Key/Value.\n\n可以像Memcached或者Redis那样放在应用和数据库之间作为内部KV缓存使用，也可以放在用户和应用之间作为面向用户的NoSQL使用。\n支持header, cookie等等，所以可以将不同的用户数据存到相同的路劲。\n\n* HAProxy的所有特性(HTTPS, HTTP/2, ACL, etc)\n* 有条件的缓存\n* 内部KV缓存\n* 面向用户缓存\n* 支持任何类型的数据\n* 支持所有编程语言，不需要特定的库，只需HTTP支持\n* 持久化\n\n# 性能\n\n非常快, 单进程模式下是nginx的3倍，多进程下nginx的2倍，varnish的3倍。\n\n详见[benchmark](https://github.com/jiangwenyuan/nuster/wiki/Performance-benchmark:-nuster-vs-nginx-vs-varnish)\n\n# 入门指南\n\n## 下载\n\n生产环境的话从[Download](Download.md)下载最新稳定版, 其他情况可以git clone。\n\n## 编译\n\n```\nmake TARGET=linux-glibc USE_LUA=1 LUA_INC=/usr/include/lua5.3 USE_OPENSSL=1 USE_PCRE=1 USE_ZLIB=1\nmake install PREFIX=/usr/local/nuster\n```\n\n> 添加`USE_PTHREAD_PSHARED=1`使用pthread\n\n> 如果不需要可以删除`USE_LUA=1 LUA_INC=/usr/include/lua5.3 USE_OPENSSL=1 USE_PCRE=1 USE_ZLIB=1`\n\n具体可以参考[HAProxy INSTALL](INSTALL)。\n\n## 配置文件\n\n准备一个配置文件: `nuster.cfg`\n\n```\nglobal\n    nuster cache on data-size 100m\n    nuster nosql on data-size 200m\n    master-worker # v3\ndefaults\n    mode http\nfrontend fe\n    bind *:8080\n    #bind *:4433 ssl crt example.com.pem alpn h2,http/1.1\n    use_backend be2 if { path_beg /_kv/ }\n    default_backend be1\nbackend be1\n    nuster cache on\n    nuster rule img ttl 1d if { path_beg /img/ }\n    nuster rule api ttl 30s if { path /api/some/api }\n    server s1 127.0.0.1:8081\n    server s2 127.0.0.1:8082\nbackend be2\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\nnuster监听8080端口，接受HTTP请求。\n`/_kv/`开头的请求分配到backend `be2`, 可以发送HTTP `POST/GET/DELETE`到`/_kv/any_key` 来 添加/取得/删除 Key/Value.\n其他的请求都被分配到backend `be1`, 并且会被转发到服务器`s1` or `s2`. 其中`/img/*`请求会被缓存1天，而`/api/some/api`会被缓存30秒。\n\n## 启动\n\n`/usr/local/nuster/sbin/nuster -f nuster.cfg`\n\n## Docker\n\n```\ndocker pull nuster/nuster\ndocker run -d -v /path/to/nuster.cfg:/etc/nuster/nuster.cfg:ro -p 8080:8080 nuster/nuster\n```\n\n# 使用方法\n\nnuster基于HAProxy, 支持所有的HAProxy指令。\n\n## 基本\n\n配置文件里有四个基本的`section`s: `global`, `defaults`, `frontend` and `backend`。\n\n* global\n  * 定义全局指令\n  * 需要定义`nuster cache on` or `nuster nosql on`，否则cache和nosql无法使用\n* defaults\n  * 定义`frontend`, `backend`的默认参数\n  * 可以在`frontend` or `backend` section重新定义\n* frontend\n  * 定义监听端口等等面向用户的设置\n* bankend\n  * 定义后端服务器等等设置\n  * 需要设置`nuster cache on` or `nuster nosql on`, 否则该backend没有nosql或者nosql功能\n  * 需要设置`nuster rule`\n\n可以定义多个`frontend` or `backend` . 如果定义了`nuster cache|nosql off`或者没有`nuster cache|nosql on|off`, nuster就是一个HAProxy。\n\n无法在`listen`里定义nuster。\n\n具体参考`/doc`下的HAProxy文档, 或者[在线HAProxy文档](https://cbonte.github.io/haproxy-dconv/)\n\n## As TCP loader balancer\n\n```\nfrontend mysql-lb\n   bind *:3306\n   mode tcp\n   default_backend mysql-cluster\nbackend mysql-cluster\n   balance roundrobin\n   mode tcp\n   server s1 10.0.0.101:3306\n   server s2 10.0.0.102:3306\n   server s3 10.0.0.103:3306\n```\n\n## As HTTP/HTTPS loader balancer\n\n```\nfrontend web-lb\n   bind *:80\n   #bind *:443 ssl crt XXX.pem\n   mode http\n   default_backend apps\nbackend apps\n   balance roundrobin\n   mode http\n   server s1 10.0.0.101:8080\n   server s2 10.0.0.102:8080\n   server s3 10.0.0.103:8080\n   #server s4 10.0.0.101:8443 ssl verify none\n```\n\n## As HTTP cache server\n\n```\nglobal\n    nuster cache on data-size 200m\nfrontend fe\n    bind *:8080\n    default_backend be\nbackend be\n    nuster cache on\n    nuster rule all\n    server s1 127.0.0.1:8081\n```\n\n## As RESTful NoSQL cache server\n\n```\nglobal\n    nuster nosql on data-size 200m\nfrontend fe\n    bind *:8080\n    default_backend be\nbackend be\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\n\n# 指令\n\n## global: nuster manager\n\n**syntax:**\n\n*nuster manager on|off [uri URI] [purge-method method]*\n\n**default:** *off*\n\n**context:** *global*\n\n定义并开启manager/stats/purge API, uri 和 purge method。\n\n默认是关闭的. 如果开启了，注意开启访问控制(see [FAQ](#how-to-restrict-access)).\n\n具体请参考[管理](#管理).\n\n### uri\n\n自定义管理URI, 默认是 `/nuster`\n\n### purge-method\n\n自定义PURGE用的HTTP method，默认是 `PURGE`.\n\n## global: nuster cache|nosql\n\n**syntax:**\n\n*nuster cache on|off [data-size size] [dict-size size] [dir DIR] [dict-cleaner n] [data-cleaner n] [disk-cleaner n] [disk-loader n] [disk-saver n] [clean-temp on|off] [always-check-disk on|off]*\n\n*nuster nosql on|off [data-size size] [dict-size size] [dir DIR] [dict-cleaner n] [data-cleaner n] [disk-cleaner n] [disk-loader n] [disk-saver n] [clean-temp on|off] [always-check-disk on|off]*\n\n**default:** *none*\n\n**context:** *global*\n\n控制是否开启cache或者nosql。\n\n会分配一块`data-size + dict-size`的共享内存来存储HTTP头，数据，key等等，临时数据从系统内存池分配。\n如果没有足够内存，新的请求不会被缓存直到有内存被释放。\n\n### data-size\n\n和`dict-size`一起决定内存块的大小。\n\n可以使用`m`, `M`, `g` 和 `G`.  默认是1MB，同时也是最小值。\n\n### dict-size\n\n决定hash table的大小.\n\n可以使用`m`, `M`, `g` 和 `G`.  默认是1MB，同时也是最小值。\n\n这个决定hash table buckets的大小，并非key的大小，key存在共享内存中。\n\n**dict-size(bucket数)** 不等于 **key数**. 就算key的数量超过了dict-size，只要整个共享内存有空间，新的key仍然可以被添加。\n\n不过如果key数超过dict-size(bucket数)性能也许会下降. dict-size可以设为大概的最大key数乘以8。当然越大越好。\n\n查看stats API:\n\n```\ndict.nosql.length:              131072\ndict.nosql.used:                0\n```\n\n如果`dict.nosql.used` 比`dict.nosql.length`大，调高`dict-size`比较好。\n\n> 将来版本会删除dict-size, 像第一版本那样自动伸缩\n\n### dir\n\n设置硬盘缓存文件的根目录，必须设置以开启硬盘缓存功能。\n\n如果开启了chroot，则真实路径为chroot+dir。比如\n\n```\nchroot /data\nnuster cache on dir /cache\n```\n\n那么缓存的实际存放目录为：/data/cache\n\n### dict-cleaner\n\n每次检查最多 `dict-cleaner` 个entry，无效的entry将被删除（默认1000）\n\n### data-cleaner\n\n每次检查最多 `data-cleaner` 个entry，无效的data将被删除（默认1000）\n\n当无效data比例超过20%时，内部的清理机制会加速清理，所以不建议修改这个值。\n\n### disk-cleaner\n\n每次检查最多 `disk-cleaner` 个硬盘缓存文件，无效的文件将被删除（默认100）\n\n### disk-loader\n\n启动后每次加载最多 `disk-loader` 个硬盘缓存文件的信息到内存（默认100）\n\n`USE_THREAD` 启用时, 会有一个单独的线程进行加载，这时忽略该参数。\n\n### disk-saver\n\n每次检查最多 `disk-saver` 个data，并将需要保存至硬盘的data保存到硬盘（默认100）\n\n详细请参考[Store](#disk).\n\n### clean-temp on|off\n\n`dir`定义的目录下会自动创建一个`.tmp`的目录来存储临时文件。\n\n该选项定义是否在启动时删除该目录下的临时文件。默认是off。\n\n### always-check-disk on|off\n\n定义是否总是检查硬盘有无缓存文件，特别是硬盘被多个实例共享时有可能缓存不能命中。\n\n默认是off。\n\n## proxy: nuster cache|nosql\n\n**syntax:**\n\n*nuster cache [on|off]*\n\n*nuster nosql [on|off]*\n\n**default:** *on*\n\n**context:** *backend*\n\n决定是否在这个backend开启cache/nosql。\n如果这个section有filter，记得放在最后。\n\n## proxy: nuster rule\n\n**syntax:**\n\n*nuster rule name [key KEY] [ttl auto|TTL] [extend EXTEND] [wait on|off|TIME] [use-stale on|off|TIME] [inactive off|TIME] [code CODE] [memory on|off] [disk on|off|sync] [etag on|off] [last-modified on|off] [if|unless condition]*\n\n**default:** *none*\n\n**context:** *backend*\n\n定义cache/nosql的生效条件，需要定义至少一个rule。\n\n```\nnuster cache on\n\n# cache request `/asdf` for 30 seconds\nnuster rule asdf ttl 30 if { path /asdf }\n\n# cache if the request path begins with /img/\nnuster rule img if { path_beg /img/ }\n\n# cache if the response header `cache` is `yes`\nacl resHdrCache res.hdr(cache) yes\nnuster rule r1 if resHdrCache\n```\n\n可以定义多个rule，按定义顺序先后匹配。\n\n```\nacl pathA path /a.html\nnuster cache on\nnuster rule all ttl 3600\nnuster rule path01 ttl 60 if pathA\n```\n\nrule `path01`永远不会被匹配。\n\n### name\n\n定义rule的name。 v5开始必须全局唯一。\n\n### key KEY\n\n定义cache/nosql的key, 由下列关键字加`.`组成\n\n * method:       http method, GET/POST...\n * scheme:       http or https\n * host:         the host in the request\n * uri:          first slash to end of the url\n * path:         the URL path of the request\n * delimiter:    '?' if query exists otherwise empty\n * query:        the whole query string of the request\n * header\\_NAME: the value of header `NAME`\n * cookie\\_NAME: the value of cookie `NAME`\n * param\\_NAME:  the value of query `NAME`\n * body:         the body of the request\n\nCACHE的默认key是 `method.scheme.host.uri`, NoSQL的默认key是 `GET.scheme.host.uri`.\n\nExample\n\n```\nGET http://www.example.com/q?name=X&type=Y\n\nhttp header:\nGET /q?name=X&type=Y HTTP/1.1\nHost: www.example.com\nASDF: Z\nCookie: logged_in=yes; user=nuster;\n```\n\n生成:\n\n * method:       GET\n * scheme:       http\n * host:         www.example.com\n * uri:          /q?name=X&type=Y\n * path:         /q\n * delimiter:    ?\n * query:        name=X&type=Y\n * header\\_ASDF: Z\n * cookie\\_user: nuster\n * param\\_type:  Y\n * body:         (empty)\n\n默认key产生`GET\\0http\\0www.example.com\\0/q?name=X&type=Y\\0`, 而`key method.scheme.host.path.header_ASDF.cookie_user.param_type` 则生成 `GET\\0http\\0www.example.com\\0/q\\0Z\\0nuster\\0Y\\0`.\n\n> `\\0`是NULL字符\n\n相同key的请求则会直接返回cache给客户端。\n\n### ttl auto|TTL\n\n设置缓存生存时间，过期后缓存会被删除。 可以使用 `d`, `h`, `m` and `s`。默认`0`秒.\n如果不希望失效则设为0\n\n当使用`auto`时, ttl自动使用`cache-control` header的`s-maxage` 或者`max-age`的值。\n\n> `cache-control`的其他指令没有处理。\n\nttl最大值2147483647.\n\n可以通过设置 `extend` 关键词来自动延长缓存的ttl。\n\n### extend EXTEND\n\n自动延长缓存ttl。\n\n#### 格式\n\nextend on|off|n1,n2,n3,n4\n\n默认: off.\n\nn1,n2,n3,n4: 小于100的正整数, n1 + n2 + n3之和也小于100. 他们定义四个时间段：\n\n```\ntime:       0                                                       ttl         ttl * (1 + n4%)\naccess:     |            A1             |   A2    |   A3    |   A4    |         |\n            |---------------------------|---------|---------|---------|---------|\npercentage: |<- (100 - n1 - n2 - n3)% ->|<- n1% ->|<- n2% ->|<- n3% ->|<- n4% ->|\n```\n\n满足下列条件缓存的ttl将被延长:\n\n1. A4 > A3 > A2\n2. 在 `ttl` 和 `ttl * (1 + n4%)` 之间有新的请求\n\n> `on` 其实是33,33,33,33\n\n### wait on|off|TIME [cache only]\n\n如果同时有相同的请求时是否等待缓存完成。`wait on`表示等待直到其他请求完成缓存，`wait TIME`表示等待TIME秒后缓存还没完成的话则转发到后端服务器。\n\n默认不会等待，相同的请求都被转发到后端，第一个请求会生成缓存(`wait off`)。\n\n注意只有当第一个请求完成某些初始化工作后其他的请求才会等待。\n\n> nosql模式下不会等待，相同的请求将被依次处理，最后一个请求的内容将被保存。\n\n最大值2147483647.\n\n### use-stale on|off|TIME [cache only]\n\n决定是否在更新缓存时是否使用过期的缓存，以及在后端宕机时是否使用过期缓存。\n\n当use-stale on时，在更新缓存时使用过期缓存。\n\n当use-stale off时，如果`wait off` 那么相同的请求将被传递到后端服务器否则等待。\n\n`use-stale TIME`则允许在因后端服务器宕机而导致更新缓存失败后继续使用缓存TIME秒。\n\n最大值2147483647.\n\n### inactive off|TIME\n\n当TIME秒内没有被访问过，则删除该缓存。默认为off。\n\n注意在TIME秒没被访问后缓存并不是百分百会删除。如果清理进程先于新的请求访问该缓存，那么缓存会被删除。如果新的请求先于清理进程访问该缓存，那么该缓存的最后访问时间就会被更新该缓存也不会被删除。并没有使用硬盘缓存文件的访问时间，当重启nuster后，缓存的最后访问时间会被设置为缓存被加载的时间。\n\n最大值：2147483647.\n\n### code CODE1,CODE2...\n\n默认只缓存200的响应，如果需要缓存其他的则可以添加，`all`会缓存任何状态码。\n\n```\ncache-rule only200\ncache-rule 200and404 code 200,404\ncache-rule all code all\n```\n\n### memory on|off\n\n是否保存数据到内存，默认on。\n\n详见[Store](#Store)\n\n### disk on|off|sync\n\n是否保存数据到硬盘，已经如何保存，默认off\n\n需要设置`memory on` 以使用 `disk sync`\n\n详见[Store](#Store)\n\n### etag on|off\n\n定义是否处理etag条件请求. 如果没有 `ETag` 则添加。\n\n默认off.\n\n### last-modified on|off\n\n定义是否处理last-modified条件请求. 如果没有 `Last-Modified` 则添加.\n\n默认off.\n\n### if|unless condition\n\n定义ACL条件\n\nACL分别在请求阶段和响应阶段执行。\n\n当下述条件满足时，会进行缓存：\n\n1. 在请求阶段ACL为真\n2. 请求阶段ACL为假，但是响应阶段ACL为真\n\n**当使用否定的ACL或者某些样本获取方法时，需要特别注意**\n\n比如\n\n1.  缓存以`/img/`开头的请求\n\n    nuster rule img if { path_beg /img/ }\n\n请求阶段要么为真要么为假，因为在响应阶段无法获取path所以永远为假。\n\n2. 缓存响应的http头部`Content-Type` 为 `image/jpeg`\n\n    nuster rule jpeg if { res.hdr(Content-Type) image/jpeg }\n\n因为在请求阶段无法获取res.hdr所以永远为假，在响应阶段要么为真要么为假。\n\n3. 以`/img/`开头，并且响应头 `Content-Type` 为`image/jpeg`时缓存\n\n如果定义为下面的规则，则不会成功：\n\n    nuster rule img if { path_beg /img/ } { res.hdr(Content-Type) image/jpeg }\n\n因为在响应阶段无法获取path所以永远为假，而在请求阶段无法获取res.hdr所以永远为假，那么这个ACL就永远无法匹配。\n\n需要如下来定义：\n\n    http-request set-var(txn.pathImg) path\n    acl pathImg var(txn.pathImg) -m beg /img/\n    acl resHdrCT res.hdr(Content-Type) image/jpeg\n    nuster rule r3 if pathImg resHdrCT\n\n或者`nuster.path`(v5):\n\n    nuster rule r3 if { nuster.path -m beg /img } { res.hdr(Content-Type) image/jpeg }\n\n4. 另一个例子，缓存所有不以 `/api/` 开头的请求\n\n下面不正确：\n\n    acl NoCache path_beg /api/\n    nuster rule r3 if !NoCache\n\n因为虽然在响应阶段path并不存在，所以NoCache永远为假，而 `!NoCache` 为真，所有的请求都会被缓存。\n\n需要改成:\n\n    http-request set-var(txn.path) path\n    acl NoCache var(txn.path) -m beg /api/\n    nuster rule r1 if !NoCache\n\n新sample fetch详见[Sample fetches](#sample-fetch)\n\n详见[HAProxy configuration](doc/configuration.txt)的**7. Using ACLs and fetching samples**\n\n# Cache\n\nnuster也可以用作类似Varnish或者Nginx那样的HTTP缓存服务器，来缓存动态或者静态的HTTP资源。\n出了HAProxy的SSL, HTTP, HTTP2, 重写重定向，增删改Header等等，还提供了下面的功能。\n\n```\nglobal\n    nuster cache on data-size 200m\nfrontend fe\n    bind *:8080\n    default_backend be\nbackend be\n    nuster cache on\n    nuster rule r1 if { path /a1 }\n    nuster rule r2 key method.scheme.host.path.delimiter.query.cookie_userId if { path /a2 }\n    nuster rule r3 ttl 10 if { path /a3 }\n    nuster rule r4 disk on if { path /a4 }\n\n    server s1 127.0.0.1:8081\n```\n\nnuster会依次检查rule, 先生成key然后查找，如果找到则返回缓存，否则就测试ACL, 如果ACL通过则缓存响应。\n\n# NoSQL\n\nnuster也可以用作RESTful NoSQL缓存服务器, 用HTTP `POST/GET/DELETE` 来 添加/取得/删除 Key/Value.\n\n## 基本操作\n\n### Set\n\n```\ncurl -v -X POST -d value1 http://127.0.0.1:8080/key1\ncurl -v -X POST --data-binary @icon.jpg http://127.0.0.1:8080/imgs/icon.jpg\n```\n\n### Get\n\n`curl -v http://127.0.0.1:8080/key1`\n\n### Delete\n\n`curl -v -X DELETE http://127.0.0.1:8080/key1`\n\n## Response\n\nCheck status code.\n\n* 200 OK\n  * POST/GET: 成功\n  * DELETE: 总是\n* 400 Bad request\n  * 空值\n  * 不正确的acl, rules, etc\n* 404 Not Found\n  * POST: rule tests失败\n  * GET: not found\n* 405 Method Not Allowed\n  * 其他的methods\n* 500 Internal Server Error\n  * 发生未知错误\n* 507 Insufficient Storage\n  * 超过data-size\n\n## Headers\n\nSupported headers in request\n\n| Name          | value                   | description\n| ------        | -----                   | -----------\n| content-type  | any   \t\t  | Will be returned as is in GET request\n| cache-control | `s-maxage` or `max-age` | used to set ttl when rule.ttl is `auto`\n\n## 分用户的data\n\n通过在key里加入header, cookie等等，可以将不同的用户数据存到相同的路劲。\n\n```\nnuster rule r1 key method.scheme.host.uri.header_userId if { path /mypoint }\nnuster rule r2 key method.scheme.host.uri.cookie_sessionId if { path /mydata }\n```\n\n### Set\n\n```\ncurl -v -X POST -d \"333\" -H \"userId: 1000\" http://127.0.0.1:8080/mypoint\ncurl -v -X POST -d \"555\" -H \"userId: 1001\" http://127.0.0.1:8080/mypoint\n\ncurl -v -X POST -d \"userA data\" --cookie \"sessionId=ijsf023xe\" http://127.0.0.1:8080/mydata\ncurl -v -X POST -d \"userB data\" --cookie \"sessionId=rosre329x\" http://127.0.0.1:8080/mydata\n```\n\n### Get\n\n```\ncurl -v http://127.0.0.1:8080/mypoint\n< 404 Not Found\n\ncurl -v -H \"userId: 1000\" http://127.0.0.1:8080/mypoint\n< 200 OK\n333\n\ncurl -v --cookie \"sessionId=ijsf023xe\" http://127.0.0.1:8080/mydata\n< 200 OK\nuserA data\n```\n\n## 客户端\n\n支持任何支持HTTP的客户端，库: `curl`, `postman`, python `requests`, go `net/http`, etc.\n\n# 管理\n\n可以通过`uri`定义一个endpoint并发送HTTP请求来进行管理。\n\n**定义并且开启**\n\n```\nnuster manager on uri /internal/nuster purge-method PURGEX\n```\n\n## 方法一览\n\n| METHOD | Endpoint         | description\n| ------ | --------         | -----------\n| GET    | /internal/nuster | 获得stats\n| POST   | /internal/nuster | 开启关闭rule, 更新ttl\n| DELETE | /internal/nuster | 高级Purge\n| PURGEX | /any/real/path   | 基础Purge\n\n## 统计\n\n可以通过GET `uri`定义的endpoint来获取统计信息。\n\n### Usage\n\n`curl http://127.0.0.1/nuster`\n\n### Output\n\n```\n**NUSTER**\nnuster.cache:                   on\nnuster.nosql:                   on\nnuster.manager:                 on\n\n**MANAGER**\nmanager.uri:                    /nuster\nmanager.purge_method:           PURGE\n\n**DICT**\ndict.cache.size:                1048576\ndict.cache.length:              131072\ndict.cache.used:                0\ndict.cache.cleanup_idx:         0\ndict.cache.sync_idx:            0\ndict.nosql.size:                1048576\ndict.nosql.length:              131072\ndict.nosql.used:                0\ndict.nosql.cleanup_idx:         0\ndict.nosql.sync_idx:            0\n\n**STORE MEMORY**\nstore.memory.cache.size:        2098200576\nstore.memory.cache.used:        1048960\nstore.memory.cache.count:       0\nstore.memory.nosql.size:        11534336\nstore.memory.nosql.used:        1048960\nstore.memory.nosql.count:       0\n\n**STORE DISK**\nstore.disk.cache.dir:           /tmp/nuster/cache\nstore.disk.cache.loaded:        yes\nstore.disk.nosql.dir:           /tmp/nuster/nosql\nstore.disk.nosql.loaded:        yes\n\n**STATS**\nstats.cache.total:              0\nstats.cache.hit:                0\nstats.cache.fetch:              0\nstats.cache.bypass:             0\nstats.cache.abort:              0\nstats.cache.bytes:              0\nstats.nosql.total:              0\nstats.nosql.get:                0\nstats.nosql.post:               0\nstats.nosql.delete:             0\n\n**PROXY cache app1**\napp1.rule.rule1:                state=on  memory=on  disk=off   ttl=10\napp1.rule.rule2:                state=on  memory=on  disk=on    ttl=10\napp1.rule.rule3:                state=on  memory=on  disk=sync  ttl=10\napp1.rule.rule4:                state=on  memory=off disk=on    ttl=10\napp1.rule.rule5:                state=on  memory=off disk=off   ttl=10\n\n**PROXY nosql app2**\napp2.rule.ruleA:                state=on  memory=on  disk=off   ttl=10\napp2.rule.ruleB:                state=on  memory=on  disk=on    ttl=10\napp2.rule.ruleC:                state=on  memory=on  disk=sync  ttl=10\napp2.rule.ruleD:                state=on  memory=off disk=on    ttl=10\napp2.rule.ruleE:                state=on  memory=off disk=off   ttl=10\n```\n\n## 开启关闭rule\n\nrule可以通过manager uri动态开启关闭，关闭的rule不会再进行匹配。\n\n***headers***\n\n| header | value       | description\n| ------ | -----       | -----------\n| state  | enable      | enable  rule\n|        | disable     | disable rule\n| name   | rule NAME   | the rule to be enabled/disabled\n|        | proxy NAME  | all rules of proxy NAME\n|        | *           | all rules\n\n相同name的rule都会被开启关闭。\n\n***Examples***\n\n* 关闭rule r1\n\n  `curl -X POST -H \"name: r1\" -H \"state: disable\" http://127.0.0.1/nuster`\n\n* 关闭backend app1b的所有rule\n\n  `curl -X POST -H \"name: app1b\" -H \"state: disable\" http://127.0.0.1/nuster`\n\n* 开启所有的rule\n\n  `curl -X POST -H \"name: *\" -H \"state: enable\" http://127.0.0.1/nuster`\n\n## 更新生存时间\n\n更改TTL，只会影响后续的新缓存，不会影响已经存在的缓存。\n\n***headers***\n\n| header | value      | description\n| ------ | -----      | -----------\n| ttl    | new TTL    | see `ttl` in `nuster rule`\n| name   | rule NAME  | the rule to be changed\n|        | proxy NAME | all rules of proxy NAME\n|        | *          | all rules\n\n***Examples***\n\n```\ncurl -X POST -H \"name: r1\" -H \"ttl: 0\" http://127.0.0.1/nuster\ncurl -X POST -H \"name: r2\" -H \"ttl: 2h\" http://127.0.0.1/nuster\n```\n\n### 同时设置state和ttl\n\n同时设置state和ttl\n\n```\ncurl -X POST -H \"name: r1\" -H \"ttl: 0\" -H \"state: enabled\" http://127.0.0.1/nuster\n```\n\n## 清除\n\n有两种清除模式:\n\n* 基础Purge: 发送 `purge-method MYPURGE` 定义的方法到想要删除的Path\n* 高级Purge: 发送DELETE 到manager uri\n\n### 基础Purge: 删除一个特定URL\n\n`curl -XPURGE http://127.0.0.1/imgs/test.jpg`\n\n根据rule生成key并删除那个key。只对GET请求生成的缓存有效。\n\n默认key 包含`Host`, 如果缓存时用了`http://example.com/test` 而在localhost删除是需要`Host` header:\n\n`curl -XPURGE -H \"Host: example.com\" http://127.0.0.1/test`\n\n对cache和nosql都有效，nosql模式相当于 `DELETE`。\n\n### 高级Purge: 通过name删除\n\n可以通过带上`name` header来 `PURGE`\n\n***headers***\n\n| header | value            | description\n| ------ | -----            | -----------\n| name   | nuster rule NAME | caches of rule ${NAME} will be purged\n|        | proxy NAME       | caches of proxy ${NAME}\n|        | *                | all caches\n\n***Examples***\n\n```\n# 删除所有缓存\ncurl -X DELETE -H \"name: *\" http://127.0.0.1/nuster\n# 删除backend applb的所有缓存\ncurl -X DELETE -H \"name: app1b\" http://127.0.0.1/nuster\n# 删除所有rule r1生成的缓存\ncurl -X DELETE -H \"name: r1\" http://127.0.0.1/nuster\n```\n\n### 高级Purge: 通过host删除\n\n通过带上`nuster-host`header来删除所有属于这个host的缓存。\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| host        | HOST         | the ${HOST}\n| nuster-host | HOST         | nuster-host存在则使用nuster-host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\ncurl -X DELETE -H \"nuster-host: 127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n### 高级Purge: 通过path删除\n\n默认情况下，query部分也包含在key中，所以相同的path不同的query会产生不同的缓存。\n\n比如`nuster rule imgs if { path_beg /imgs/ }`, 然后请求\n\n```\ncurl http://127.0.0.1/imgs/test.jpg?w=120&h=120\ncurl http://127.0.0.1/imgs/test.jpg?w=180&h=180\n```\n\n会生成两个缓存，因为query不一样。\n\n如果要删除这些缓存，可以\n\n***如果知道所有的query，那么可以一个一个删除***\n\n```\ncurl -XPURGE http://127.0.0.1/imgs/test.jpg?w=120&h=120\ncurl -XPURGE http://127.0.0.1/imgs/test.jpg?w=180&h=180\n```\n\n大多数情况下不知道所有的query\n\n***如果query部分不重要，则可以从key里面删除query***\n\n定义`nuster rule imgs key method.scheme.host.path if { path_beg /imgs }`, 这样的话只会生成一个缓存，那么就可以不用query删除缓存\n\n`curl -XPURGE http://127.0.0.1/imgs/test.jpg`\n\n大多数情况需要query\n\n***通过rule name删除***\n\n`curl -X PURGE -H \"name: imgs\" http://127.0.0.1/nuster/cache`\n\n但是如果rule被定义成了 `nuster rule static if { path_beg /imgs/ /css/ }`，则无法只删除imgs\n\n因此，可以通过path删除\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| path        | PATH         | caches with ${PATH} will be purged\n| host        | HOST         | and host is ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\n# 删除所有path是/imgs/test.jpg的缓存\ncurl -X DELETE -H \"path: /imgs/test.jpg\" http://127.0.0.1/nuster\n# 删除所有path是/imgs/test.jpg 并且host是127.0.0.1:8080的缓存\ncurl -X DELETE -H \"path: /imgs/test.jpg\" -H \"nuster-host: 127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n### 高级Purge: 通过正则删除\n\n也可以通过正则删除，所有匹配正则的缓存将被删除。\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| regex       | REGEX        | caches which path match with ${REGEX} will be purged\n| host \t      | HOST         | and host is ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\n# 删除所有 /imgs 开头 .jpg结尾的缓存\ncurl -X DELETE -H \"regex: ^/imgs/.*\\.jpg$\" http://127.0.0.1/nuster\n#delete all caches which path starts with /imgs and ends with .jpg and with host of 127.0.0.1:8080\ncurl -X DELETE -H \"regex: ^/imgs/.*\\.jpg$\" -H \"127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n**PURGE 注意事项**\n\n1. **开启访问控制**\n\n2. 如果有多个header，按照`name`, `path & host`, `path`, `regex & host`, `regex`, `host`的顺序处理\n\n   `curl -X DELETE -H \"name: rule1\" -H \"path: /imgs/a.jpg\"`: purge by name\n\n3. 如果有重复的header，处理第一个\n\n   `curl -X DELETE -H \"name: rule1\" -H \"name: rule2\"`: purge by `rule1`\n\n4. `regex` **不是 glob**\n\n   比如 /imgs下的.jpg文件是`^/imgs/.*\\.jpg$` 而不是 `/imgs/*.jpg`\n\n5. 只有disk load结束后才能通过proxy name or rule name or host or path or regex 来删除缓存文件。是否已经load结束可以查看stats URL。\n\n# Store\n\nNuster(cache和nosql) 支持多种后端存储. 目前支持memory和disk。计划添加其他后段。\n\n## Memory\n\n数据被存在一个大小由`data-size`定义的内存区域。重启后数据会消失。\n\n## Disk\n\n数据被存到硬盘由`dir`定义的目录下。重启后数据不会消失。\n\n有三种模式:\n\n* off:   默认，不保存到硬盘\n* on:    保存到硬盘\n* sync:  需要设置`memory on`。先保存至内存然后由master进程在一定时间后同步到硬盘，每次同步`dict-saver`个缓存。\n\n# Sample fetches\n\nNuster 加入了一些新的sample fetches\n\n## [cache] nuster.cache.hit: boolean\n\n表示是否是HIT缓存，可以像如下使用\n\n    http-response set-header x-cache hit if { nuster.cache.hit }\n\n## [cache|nosql] nuster.host: string\n\n类似HAProxy的 `req.hdr(Host)`，但是请求和响应中都可使用\n\n## [cache|nosql] nuster.uri: string\n\n等同于HAProxy的`capture.req.uri`.\n\n## [cache|nosql] nuster.path: string\n\n类似HAProxy的 `path`，但是请求和响应中都可使用\n\n## [cache|nosql] nuster.query: string\n\n类似HAProxy的 `query`，但是请求和响应中都可使用\n\n# FAQ\n\n## 无法启动，报错: not in master-worker mode\n\n在`global` 添加 `master-worker` 或者启动时使用`-W`参数。\n\n## 如何调试?\n\n带`-d`启动`nuster`\n\nnuster相关的调试信息以`[nuster`开头\n\n## 如何缓存POST请求?\n\n添加`option http-buffer-request`\n\n如果自定义了key的话需要使用`body`关键字\n\n请求body可能不完整，详见[HAProxy configuration](doc/configuration.txt) 的 **option http-buffer-request**小节\n\n另外可以为post请求单独设置一个后端\n\n## 如何做访问控制?\n\n类似\n\n```\nacl network_allowed src 127.0.0.1\nacl purge_method method PURGE\nhttp-request deny if purge_method !network_allowed\n```\n\n## 如何开启HTTP2?\n\n```\nbind :443 ssl crt pub.pem alpn h2,http/1.1\n```\n\n# Example\n\n```\nglobal\n    nuster cache on data-size 100m\n    nuster nosql on data-size 100m\n    master-worker # v3\n    # daemon\ndefaults\n    retries 3\n    option redispatch\n    timeout client  30s\n    timeout connect 30s\n    timeout server  30s\nfrontend web1\n    bind *:8080\n    mode http\n    acl pathPost path /search\n    use_backend app1a if pathPost\n    default_backend app1b\nbackend app1a\n    balance roundrobin\n    # mode must be http\n    mode http\n\n    # http-buffer-request must be enabled to cache post request\n    option http-buffer-request\n\n    acl pathPost path /search\n\n    # enable cache for this proxy\n    nuster cache\n\n    # cache /search for 120 seconds. Only works when POST/PUT\n    nuster rule rpost key method.scheme.host.uri.body ttl 120 if pathPost\n\n    server s1 10.0.0.10:8080\nbackend app1b\n    balance     roundrobin\n    mode http\n\n    nuster cache on\n\n    # cache /a.jpg, not expire\n    acl pathA path /a.jpg\n    nuster rule r1 ttl 0 if pathA\n\n    # cache /mypage, key contains cookie[userId], so it will be cached per user\n    acl pathB path /mypage\n    nuster rule r2 key method.scheme.host.path.delimiter.query.cookie_userId ttl 60 if pathB\n\n    # cache /a.html if response's header[cache] is yes\n    http-request set-var(txn.pathC) path\n    acl pathC var(txn.pathC) -m str /a.html\n    acl resHdrCache1 res.hdr(cache) yes\n    nuster rule r3 if pathC resHdrCache1\n\n    # cache /heavy for 100 seconds if be_conn greater than 10\n    acl heavypage path /heavy\n    acl tooFast be_conn ge 100\n    nuster rule heavy ttl 100 if heavypage tooFast\n\n    # cache all if response's header[asdf] is fdsa\n    acl resHdrCache2 res.hdr(asdf)  fdsa\n    nuster rule resCache ttl 0 if resHdrCache1\n\n    server s1 10.0.0.10:8080\n\nfrontend web2\n    bind *:8081\n    mode http\n    default_backend app2\nbackend app2\n    balance     roundrobin\n    mode http\n\n    # disable cache on this proxy\n    nuster cache off\n    nuster rule all\n\n    server s2 10.0.0.11:8080\n\nfrontend nosql_fe\n    bind *:9090\n    default_backend nosql_be\nbackend nosql_be\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\n# Contributing\n\n* Join the development\n* Give feedback\n* Report issues\n* Send pull requests\n* Spread nuster\n\n# License\n\nCopyright (C) 2017-present, [Jiang Wenyuan](https://github.com/jiangwenyuan), < koubunen AT gmail DOT com >\n\nAll rights reserved.\n\nLicensed under GPL, the same as HAProxy\n\nHAProxy and other sources license notices: see relevant individual files.\n"
        },
        {
          "name": "README-JP.md",
          "type": "blob",
          "size": 36.5654296875,
          "content": "# nuster\n\n[Wiki](https://github.com/jiangwenyuan/nuster/wiki) | [English](README.md) | [中文](README-CN.md) | [日本語](README-JP.md)\n\n高性能のHTTPキャッシュサーバーとRESTful NoSQLサーバー。\n\n> 最近版は英語の[README.md](README.md)　を参照ください\n\n# 目次\n\n* [紹介](#紹介)\n* [性能](#性能)\n* [入門](#入門)\n* [使用方法](#使用方法)\n* [ディレクティブ](#ディレクティブ)\n* [Cache](#cache)\n* [NoSQL](#nosql)\n* [管理](#管理)\n  * [統計](#統計)\n  * [Ruleの有効無効](#Ruleの有効無効)\n  * [生存期間更新](#生存期間更新)\n  * [削除](#削除)\n* [Store](#store)\n* [Sample fetches](#sample-fetches)\n* [FAQ](#faq)\n\n# 紹介\n\nnusterはHAProxyを元に開発したHTTPキャッシュサーバーとRESTful NoSQLサーバーで、HAProxyと互換性がある。\nそしてHAProxyのACLを利用して細かいキャッシュルールを定義できる。\n\n## 特徴\n\n### HTTP/TCPロードバランサ\n\nnusterはHAProxyのようにHTTP/TCPロードバランサとして使える。\n\n* HAProxyのすべての機能を持ち、HAProxyと互換性がある\n* ロード・バランシング\n* フロントエンドとバックエンド両方HTTPSサポート\n* HTTP圧縮\n* HTTPリライトとリダイレクト\n* HTTP修正\n* HTTP2\n* モニタリング\n* 粘り\n* アクセス制御\n* コンテンツスイッチング\n\n### HTTPキャッシュサーバー\n\nnusterはVarnishやNginxのように動的や静的なHTTPコンテンツをキャッシュするキャッシュサーバーとしても使える。\n\n* HAProxyのすべての機能(HTTPS, HTTP/2, ACL, etc)\n* とっても速い\n* 優れた動的キャッシュ機能\n  * Based on HTTP method, URI, path, query, header, cookies, etc\n  * Based on HTTP request or response contents, etc\n  * Based on environment variables, server state, etc\n  * Based on SSL version, SNI, etc\n  * Based on connection rate, number, byte, etc\n* キャッシュ管理\n* キャッシュ削除\n* キャッシュ統計\n* キャッシュ生存期間\n* パーシステンス\n\n### RESTful NoSQLキャッシュサーバー\n\nnusterはRESTful NoSQLキャッシュサーバーとしても使える、 HTTP `POST/GET/DELETE` でKey/Valueを登録・取得・削除する。\n\nMemcachedやRedisのようにアプリとデータベースの間に配置する内部KVキャッシュサーバーとして使えるし、アプリとユーザーの間に配置するユーザー向けのRESTful NoSQLキャッシュサーバーとしても使える。\nheaderやcookieなど識別できるので、同じエンドポイントにユーザー毎のデータを保存することができる。\n\n* HAProxyのすべての機能(HTTPS, HTTP/2, ACL, etc)\n* 条件付きキャッシュ\n* 内部KVキャッシュ\n* ユーザー向けRESTfulキャッシュ\n* あらゆる種類のデータをサポート\n* すべてHTTPができるプログラミング言語をサポート\n* パーシステンス\n\n# 性能\n\nスーパー速い\n\nシングルコアでnginxより3倍、マルチコアでnginxより2倍varnishより3倍のテスト結果があった。\n\n詳細は[benchmark](https://github.com/jiangwenyuan/nuster/wiki/Performance-benchmark:-nuster-vs-nginx-vs-varnish)\n\n# 入門\n\n## Download\n\n本番環境は[Download](Download.md)から, ほかはgit cloneで。\n\n## Build\n\n```\nmake TARGET=linux-glibc USE_LUA=1 LUA_INC=/usr/include/lua5.3 USE_OPENSSL=1 USE_PCRE=1 USE_ZLIB=1\nmake install PREFIX=/usr/local/nuster\n```\n\n> `USE_PTHREAD_PSHARED=1`でpthreadを使う\n\n> 必要なければ`USE_LUA=1 LUA_INC=/usr/include/lua5.3 USE_OPENSSL=1 USE_PCRE=1 USE_ZLIB=1`削除してもいい\n\n詳細は[HAProxy INSTALL](INSTALL)。\n\n## コンフィグファイル\n\n最低限のコンフィグファイル: `nuster.cfg`\n\n```\nglobal\n    nuster cache on data-size 100m\n    nuster nosql on data-size 200m\n    master-worker # v3から\ndefaults\n    mode http\nfrontend fe\n    bind *:8080\n    #bind *:4433 ssl crt example.com.pem alpn h2,http/1.1\n    use_backend be2 if { path_beg /_kv/ }\n    default_backend be1\nbackend be1\n    nuster cache on\n    nuster rule img ttl 1d if { path_beg /img/ }\n    nuster rule api ttl 30s if { path /api/some/api }\n    server s1 127.0.0.1:8081\n    server s2 127.0.0.1:8082\nbackend be2\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\nnusterは8080でリッスンしてHTTP requestsを受け取る.\n`/_kv/`のリクエストはbackend `be2`に行き, `/_kv/any_key`にHTTP `POST/GET/DELETE`を送信すればK/Vオブジェクトを登録・取得・削除できる。\n他のリクエストはbackend `be1`に行き, そしてサーバー`s1` or `s2`に行く。その中、`/img/*`は1日キャッシュされ、`/api/some/api`は30秒キャッシュされる。\n\n## 機能\n\n`/usr/local/nuster/sbin/nuster -f nuster.cfg`\n\n## Docker\n\n```\ndocker pull nuster/nuster\ndocker run -d -v /path/to/nuster.cfg:/etc/nuster/nuster.cfg:ro -p 8080:8080 nuster/nuster\n```\n\n# 使用方法\n\nnusterはHAProxyをベースに開発したので、HAProxyのすべての機能をサポートする。\n\n## Basic\n\n４つの基本`section`s: `global`, `defaults`, `frontend` and `backend`.\n\n* global\n  * globalなパラメータを設定\n  * `nuster cache on` or `nuster nosql on` は入れないとcacheやnosqlの機能を使えない\n* defaults\n  * 他の`frontend`, `backend`のディフォルトパラメータを設定\n  * `frontend` or `backend` で単独で再設定できる\n* frontend\n  * クライアントからリクエストを受ける側についてを設定する\n* bankend\n  * 受けたリクエストを振り分ける先のサーバについてを設定する\n  * `nuster cache on` or `nuster nosql on`は設定する必要ある\n  * `nuster rule`を定義する必要がある\n\n複数の`frontend` or `backend` 定義できる. `nuster cache off`設定したり, `nuster cache on|off`入れなかったりすると, nusterは全くHAProxy同様にとして動く。\n\n`listen`ではnusterを使えない。\n\n`/doc`したのドキュメントか[オンラインのHAProxyドキュメント](https://cbonte.github.io/haproxy-dconv/)を参照ください。\n\n## As TCP loader balancer\n\n```\nfrontend mysql-lb\n   bind *:3306\n   mode tcp\n   default_backend mysql-cluster\nbackend mysql-cluster\n   balance roundrobin\n   mode tcp\n   server s1 10.0.0.101:3306\n   server s2 10.0.0.102:3306\n   server s3 10.0.0.103:3306\n```\n\n## As HTTP/HTTPS loader balancer\n\n```\nfrontend web-lb\n   bind *:80\n   #bind *:443 ssl crt XXX.pem\n   mode http\n   default_backend apps\nbackend apps\n   balance roundrobin\n   mode http\n   server s1 10.0.0.101:8080\n   server s2 10.0.0.102:8080\n   server s3 10.0.0.103:8080\n   #server s4 10.0.0.101:8443 ssl verify none\n```\n\n## As HTTP cache server\n\n```\nglobal\n    nuster cache on data-size 200m\nfrontend fe\n    bind *:8080\n    default_backend be\nbackend be\n    nuster cache on\n    nuster rule all\n    server s1 127.0.0.1:8081\n```\n\n## As RESTful NoSQL cache server\n\n```\nglobal\n    nuster nosql on data-size 200m\nfrontend fe\n    bind *:8080\n    default_backend be\nbackend be\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\n\n# ディレクティブ\n\n## global: nuster manager\n\n**syntax:**\n\n*nuster manager on|off [uri URI] [purge-method method]*\n\n**default:** *off*\n\n**context:** *global*\n\nmanager/stats/purge APIを有効にする、URIとpurge methodを定義する\n\nディフォルトは無効で、有効にしたら、アクセス制御をしてください(see [FAQ](#how-to-restrict-access)).\n\n詳細は[管理](#管理)。\n\n### uri\n\nURIを定義する、ディフォルトは `/nuster`\n\n### purge-method\n\nHTTP methodを定義する。ディフォルトは `PURGE`。\n\n## global: nuster cache|nosql\n\n**syntax:**\n\n*nuster cache on|off [data-size size] [dict-size size] [dir DIR] [dict-cleaner n] [data-cleaner n] [disk-cleaner n] [disk-loader n] [disk-saver n] [clean-temp on|off] [always-check-disk on|off]*\n\n*nuster nosql on|off [data-size size] [dict-size size] [dir DIR] [dict-cleaner n] [data-cleaner n] [disk-cleaner n] [disk-loader n] [disk-saver n] [clean-temp on|off] [always-check-disk on|off]*\n\n**default:** *none*\n\n**context:** *global*\n\ncacheやnosqlを使うかどうかを決める。\n\nHTTPデータやキーなどを保存する、`data-size + dict-size`の大きさの共有メモリゾンを生成する。\nこのメモリゾンにメモリが足りない場合は、新しいリクエストはキャッシュしない。一時的なデータはメモリプールから申請する。\n\n### data-size\n\n`dict-size`と一緒に共有メモリゾンのサイズを決定する。\n\n単位`m`, `M`, `g` and `G`で、 ディフォルトは1MBで、最小値も1MBである。\n\n### dict-size\n\nhash tableのサイズを決める.\n\n単位`m`, `M`, `g` and `G`で、 ディフォルトは1MBで、最小値も1MBである。\n\nこれはhast tableのkeyの数を決めるわけではなく、bucketsのサイズを決めるのである。keyは共有メモリにある。\n\n**dict-size(buckets数)**は**keys数**と違って、 keyの数がこの数を超えても、共有メモリに容量さえあれば、新しいkeyは追加できる。\n\nでもkeyの数がdict-size(buckets数)を超えると、性能が落ちる可能性がある。`dict-size`は大体の最大key数かける８であれば十分。\n\nstats APIに\n```\ndict.nosql.length:              131072\ndict.nosql.used:                0\n```\n\nもし`dict.nosql.used` が`dict.nosql.length`より大きい場合、`dict-size`を上げたほうが良い。\n\n> 将来のバージョンはdict-sizeを削除するかもしれない, 初版のような自動リサイズを戻す。\n\n### dir\n\nパーシステンスのrootディレクトリを設定する、パーシステンス使うには必要。\n\nchrootある場合、実際の保存場所はchroot+dir。例えば\n\n```\nchroot /data\nnuster cache on dir /cache\n```\n\nキャッシュの実際の保存場所は/data/cache\n\n### dict-cleaner\n\n一回で最多`dict-cleaner`個のentries をチェックして, 無効なentriesは削除する(デフォルト、1000).\n\n### data-cleaner\n\n一回で最多`data-cleaner`個のdataをチェックして, 無効なdataは削除する(デフォルト、1000).\n\n無効なdataが20%を超えったら、削除プロセスが加速するので、この値を弄るのがおすすめしない。\n\n### disk-cleaner\n\n一回で最多`disk-cleaner`個のfileをチェックして, 無効なfileは削除する(デフォルト、100).\n\n### disk-loader\n\n起動後、一回で最多`disk-loader`個のfileをチェックして、情報をロードする(デフォルト、100).\n\n`USE_THREAD`の場合, 単独のthreadでロードする、このパラメータは無視する。\n\n### disk-saver\n\n一回で最多`disk-saver`個のdataをチェックして、ディスクに保存する必要あるデータを保存する(デフォルト、100).\n\n詳細は[Store](#disk)\n\n### clean-temp on|off\n\n`dir`で定義したディレクトリの下に一時ファイル保存用の`.tmp`というディレクトリが自動的生成される。\n\n起動時その一時ファイルを削除するかどうかを決める。ディフォルトはoff。\n\n### always-check-disk on|off\n\n常にディスクキャッシュをチェックする。特にディスクが複数のインスタンスに共有された場合キャッシュがスミする可能性がある。\n\n默认是off。\n\n## proxy: nuster cache|nosql\n\n**syntax:**\n\n*nuster cache [on|off]*\n\n*nuster nosql [on|off]*\n\n**default:** *on*\n\n**context:** *backend*\n\ncache/nosqlの有効無効を決める。\n他のfilterがある場合は、一番後ろ置く。\n\n## proxy: nuster rule\n\n**syntax:**\n\n*nuster rule name [key KEY] [ttl auto|TTL] [extend EXTEND] [wait on|off|TIME] [use-stale on|off|TIME] [inactive off|TIME] [code CODE] [memory on|off] [disk on|off|sync] [etag on|off] [last-modified on|off] [if|unless condition]*\n\n**default:** *none*\n\n**context:** *backend*\n\ncache/nosqlの有効条件を定義する、少なくとも１つは必要。\n\n```\nnuster cache on\n\n# cache request `/asdf` for 30 seconds\nnuster rule asdf ttl 30 if { path /asdf }\n\n# cache if the request path begins with /img/\nnuster rule img if { path_beg /img/ }\n\n# cache if the response header `cache` is `yes`\nacl resHdrCache res.hdr(cache) yes\nnuster rule r1 if resHdrCache\n```\n\n複数のruleを定義できる、定義順序で実行する。\n\n```\nacl pathA path /a.html\nnuster cache on\nnuster rule all ttl 3600\nnuster rule path01 ttl 60 if pathA\n```\n\nrule allはすべてをマッチングするので、rule `path01`は実行しない。\n\n### name\n\nこのruleのnameを定義する。v5以降はグローバルユニーク。\n\n### key KEY\n\ncache/nosqlのkeyを定義する。下記のkeywordと`.`との組み合わせ。\n\n * method:       http method, GET/POST...\n * scheme:       http or https\n * host:         the host in the request\n * uri:          first slash to end of the url\n * path:         the URL path of the request\n * delimiter:    '?' if query exists otherwise empty\n * query:        the whole query string of the request\n * header\\_NAME: the value of header `NAME`\n * cookie\\_NAME: the value of cookie `NAME`\n * param\\_NAME:  the value of query `NAME`\n * body:         the body of the request\n\nCACHEのディフォルトkeyは `method.scheme.host.uri` で, NoSQLのディフォルトkeyは`GET.scheme.host.uri`.\n\nExample\n\n```\nGET http://www.example.com/q?name=X&type=Y\n\nhttp header:\nGET /q?name=X&type=Y HTTP/1.1\nHost: www.example.com\nASDF: Z\nCookie: logged_in=yes; user=nuster;\n```\n\n下記を生成する:\n\n * method:       GET\n * scheme:       http\n * host:         www.example.com\n * uri:          /q?name=X&type=Y\n * path:         /q\n * delimiter:    ?\n * query:        name=X&type=Y\n * header\\_ASDF: Z\n * cookie\\_user: nuster\n * param\\_type:  Y\n * body:         (empty)\n\nディフォルトkeyは`GET\\0http.www.example.com\\0/q?name=X&type=Y\\0` で `key method.scheme.host.path.header_ASDF.cookie_user.param_type` は `GET\\0http.www.example.com\\0/q\\0Z\\0nuster\\0Y\\0`.\n\n> `\\0`はNULLキャラクター\n\nリクエストのkeyが同じなら、キャッシュを返す。\n\n### ttl auto|TTL\n\n生存期限を定義する。単位は `d`, `h`, `m`と`s`で、 ディフォルトは`0`秒。\n`0`の場合は失効しない。\n\n`auto`を使う場合、 ttl は自動的に`cache-control` headerの`s-maxage` か `max-age`の値に設定する。\n\n> `cache-control`の他のディレクティブは処理してない。\n\nttlのMaxは2147483647\n\n`extend`でttlを自動的に延長できる。\n\n### extend EXTEND\n\n自動的にttlを延長する。\n\n#### フォーマット\n\nextend on|off|n1,n2,n3,n4\n\nディフォルト: off.\n\nn1,n2,n3,n4: 100未満の整数, n1 + n2 + n3も100未満. ４つの時間帯を定義する：\n\n```\ntime:       0                                                       ttl         ttl * (1 + n4%)\naccess:     |            A1             |   A2    |   A3    |   A4    |         |\n            |---------------------------|---------|---------|---------|---------|\npercentage: |<- (100 - n1 - n2 - n3)% ->|<- n1% ->|<- n2% ->|<- n3% ->|<- n4% ->|\n```\n\n下記満たさればttlは自動的に延長する:\n\n1. A4 > A3 > A2\n2. `ttl` と `ttl * (1 + n4%)` の間に新たなリクエストが発生\n\n> `on` は 33,33,33,33\n\n### wait on|off|TIME [cache only]\n\n同時に来た同じなリクエストがキャッシュ完成するのを待つかどうか。 `wait on`はキャッシュ完成するまでまつ、 `wait TIME`はTIME秒待ってからバックエンドにフォーワードする。\n\nディフォルトは待たずに全部バックエンドにフォーワードする(`wait off`)。\n\n最初のリクエストが初期化をするまで他の同じなリクエストが来た場合は待たずにフォーワードする。\n\n> Nosqlモードではwaitしない。順番に処理して最後のリクエストの内容を保存する。\n\n最大値：2147483647.\n\n### use-stale on|off|TIME [cache only]\n\nキャッシュが更新されているときや、バックエンドのサーバーダウンで更新失敗した時に、失効済みのキャッシュを使うかどうかを決める。\n\n`use-stale on`: キャッシュが更新されている時、失効済みのキャッシュを使う。\n\n`use-stale off`(ディフォルト): `wait off`の場合、同じなリクエストがバックエンドにフォーワードする, `wait on|TIME` の場合は待つ。\n\n`use-stale TIME`: バックエンドのサーバーダウンで更新失敗した時に、失効済みのキャッシュをTIME秒間を使う。\n\n最大値：2147483647.\n\n### inactive off|TIME\n\n指定した期間を過ぎてアクセスがない場合キャッシュが削除される。ディフォルトはoff(0)。\n\nTIMEを過ぎると必ず削除されるというわけではない、cleanプロセスが先にcacheをアクセスする場合、削除されるけど、新しいリクエストが先に来る場合、キャッシュの最終アクセス時間が更新されキャッシュは削除されない。ディスクファイルの場合はファイルのアクセス時間使ってないため、nusterが再起動すると、最終アクセス時間はロード時間に設定する。\n\n最大値：2147483647.\n\n### code CODE1,CODE2...\n\nディフォルトは200のリスポンスしかキャッシュしない、ほかのものをキャッシュしたい場合は\n定義する。 `all`の場合は全てキャッシュする。\n\n```\ncache-rule only200\ncache-rule 200and404 code 200,404\ncache-rule all code all\n```\n\n### memory on|off\n\nメモリに保存するかどうか、ディフォルトon\n\n詳細は[Store](#Store)\n\n### disk on|off|sync\n\nディスクに保存するかどうか、どうやって保存するか、ディフォルトoff\n\n`disk sync` を使うには`memory on`を設定する必要がある。\n\n詳細は[Store](#Store)\n\n### etag on|off\n\netag条件付きリクエストの処理、 `ETag` なければ、追加する.\n\nディフォルトoff.\n\n### last-modified on|off\n\nlast-modified条件付きリクエストの処理、 `Last-Modified` なければ、追加する.\n\nディフォルトoff.\n\n### if|unless condition\n\nHAProxy ACLを使う。\n\nACLはリクエストとリスポンスの二段階で評価する\n\n下記満たせばキャッシュする：\n\n1. リクエスト段階でACLがtrue\n2. リクエスト段階でACLがfalseだが、リスポンス段階でtrue\n\n**否定のACLや特定のSample使う場合は要注意**\n\n例えば、\n\n1.  `/img/`で始まるリクエストをキャッシュする\n\n    nuster rule img if { path_beg /img/ }\n\nリクエスト段階でACLがtrueなら、キャッシュする、falseの場合はリスポンス段階でpath存在しないのでACLもfalseでキャッシュしない。\n\n2. リスポンスの`Content-Type` が `image/jpeg`の場合キャッシュする\n\n    nuster rule jpeg if { res.hdr(Content-Type) image/jpeg }\n\nリクエスト段階ではres.hdrがないため、falseで、リスポンス段階ではtrueもしくはfalse\n\n3. `/img/`で始まり、 リスポンスの`Content-Type` が`image/jpeg`ならキャッシュする\n\n下記は正常に動かない：\n\n    nuster rule img if { path_beg /img/ } { res.hdr(Content-Type) image/jpeg }\n\nリクエスト段階ではres.hdrがないためfalseで、リスポンス段階ではpath存在しないのでACLもfalseのため。\n\n下記なら大丈夫\n\n    http-request set-var(txn.pathImg) path\n    acl pathImg var(txn.pathImg) -m beg /img/\n    acl resHdrCT res.hdr(Content-Type) image/jpeg\n    nuster rule r3 if pathImg resHdrCT\n\nもしくは`nuster.path`(v5):\n\n    nuster rule r3 if { nuster.path -m beg /img } { res.hdr(Content-Type) image/jpeg }\n\n4. `/api/`で始まるリクエスト以外はキャッシュする\n\n下記は動かない：\n\n    acl NoCache path_beg /api/\n    nuster rule r3 if !NoCache\n\nリスポンス段階ではpathないため、NoCacheはfalseで `!NoCache`はいつもtrueなので、すべてのリクエストがキャッシュされる\n\n下記は大丈夫\n\n    http-request set-var(txn.path) path\n    acl NoCache var(txn.path) -m beg /api/\n    nuster rule r1 if !NoCache\n\n新しいsample取得方法は[Sample fetches](#sample-fetch)\n\n**7. Using ACLs and fetching samples** section in [HAProxy configuration](doc/configuration.txt)も参考\n\n# Cache\n\nnusterはVarnishやNginxのように動的や静的なHTTPコンテンツをキャッシュするキャッシュサーバーとしても使える。\n\nHAProxyのSSL, HTTP, HTTP2, リライト、リダイレクトなどの機能の他、nusterは下記も提供する。\n\n```\nglobal\n    nuster cache on data-size 200m\nfrontend fe\n    bind *:8080\n    default_backend be\nbackend be\n    nuster cache on\n    nuster rule r1 if { path /a1 }\n    nuster rule r2 key method.scheme.host.path.delimiter.query.cookie_userId if { path /a2 }\n    nuster rule r3 ttl 10 if { path /a3 }\n    nuster rule r4 disk on if { path /a4 }\n\n    server s1 127.0.0.1:8081\n```\n\nRuleを順番にチェックして、まずKeyを生成して探す。見つかったらキャッシュを返す。なければACLをテストして、Passした場合はバックエンドのレスポンスをキャッシュする。\n\n# NoSQL\n\nnusterはRESTful NoSQLキャッシュサーバーとしても使える、 HTTP `POST/GET/DELETE` でKey/Valueを登録・取得・削除する。\n\n## 基本操作\n\n### Set\n\n```\ncurl -v -X POST -d value1 http://127.0.0.1:8080/key1\ncurl -v -X POST --data-binary @icon.jpg http://127.0.0.1:8080/imgs/icon.jpg\n```\n\n### Get\n\n`curl -v http://127.0.0.1:8080/key1`\n\n### Delete\n\n`curl -v -X DELETE http://127.0.0.1:8080/key1`\n\n## Response\n\nCheck status code.\n\n* 200 OK\n  * POST/GET: 成功\n  * DELETE: 全部\n* 400 Bad request\n  * 空のvalue\n  * 違うacl, rules, etc\n* 404 Not Found\n  * POST: rule tests失敗\n  * GET: 存在しない\n* 405 Method Not Allowed\n  * 他のmethods\n* 500 Internal Server Error\n  * エラー発生\n* 507 Insufficient Storage\n  * dict-size超え\n\n## Headers\n\nSupported headers in request\n\n| Name          | value                   | description\n| ------        | -----                   | -----------\n| content-type  | any   \t\t  | Will be returned as is in GET request\n| cache-control | `s-maxage` or `max-age` | used to set ttl when rule.ttl is `auto`\n\n## userごとのdata\n\nkeyにheader や cookie を使えば、同じendpointにユーザーごとのデータを保存できる\n\n```\nnuster rule r1 key method.scheme.host.uri.header_userId if { path /mypoint }\nnuster rule r2 key method.scheme.host.uri.cookie_sessionId if { path /mydata }\n```\n\n### Set\n\n```\ncurl -v -X POST -d \"333\" -H \"userId: 1000\" http://127.0.0.1:8080/mypoint\ncurl -v -X POST -d \"555\" -H \"userId: 1001\" http://127.0.0.1:8080/mypoint\n\ncurl -v -X POST -d \"userA data\" --cookie \"sessionId=ijsf023xe\" http://127.0.0.1:8080/mydata\ncurl -v -X POST -d \"userB data\" --cookie \"sessionId=rosre329x\" http://127.0.0.1:8080/mydata\n```\n\n### Get\n\n```\ncurl -v http://127.0.0.1:8080/mypoint\n< 404 Not Found\n\ncurl -v -H \"userId: 1000\" http://127.0.0.1:8080/mypoint\n< 200 OK\n333\n\ncurl -v --cookie \"sessionId=ijsf023xe\" http://127.0.0.1:8080/mydata\n< 200 OK\nuserA data\n```\n\n## Clients\n\nあらゆるHTTPできるツールやライブラリ: `curl`, `postman`, python `requests`, go `net/http`, etc.\n\n# 管理\n\nNusterはランタイムでAPIで管理できる。uriを定義して、このURIにたいしてHTTPを投げることで、管理できる。\n\n**定義**\n\n```\nnuster manager on uri /internal/nuster purge-method PURGEX\n```\n\n## Usage matrix\n\n| METHOD | Endpoint         | description\n| ------ | --------         | -----------\n| GET    | /internal/nuster | get stats\n| POST   | /internal/nuster | enable and disable rule, update ttl\n| DELETE | /internal/nuster | advanced purge cache\n| PURGEX | /any/real/path   | basic purge\n\n## 統計\n\n\n### Usage\n\n`curl http://127.0.0.1/nuster`\n\n### Output\n\n```\n**NUSTER**\nnuster.cache:                   on\nnuster.nosql:                   on\nnuster.manager:                 on\n\n**MANAGER**\nmanager.uri:                    /nuster\nmanager.purge_method:           PURGE\n\n**DICT**\ndict.cache.size:                1048576\ndict.cache.length:              131072\ndict.cache.used:                0\ndict.cache.cleanup_idx:         0\ndict.cache.sync_idx:            0\ndict.nosql.size:                1048576\ndict.nosql.length:              131072\ndict.nosql.used:                0\ndict.nosql.cleanup_idx:         0\ndict.nosql.sync_idx:            0\n\n**STORE MEMORY**\nstore.memory.cache.size:        2098200576\nstore.memory.cache.used:        1048960\nstore.memory.cache.count:       0\nstore.memory.nosql.size:        11534336\nstore.memory.nosql.used:        1048960\nstore.memory.nosql.count:       0\n\n**STORE DISK**\nstore.disk.cache.dir:           /tmp/nuster/cache\nstore.disk.cache.loaded:        yes\nstore.disk.nosql.dir:           /tmp/nuster/nosql\nstore.disk.nosql.loaded:        yes\n\n**STATS**\nstats.cache.total:              0\nstats.cache.hit:                0\nstats.cache.fetch:              0\nstats.cache.bypass:             0\nstats.cache.abort:              0\nstats.cache.bytes:              0\nstats.nosql.total:              0\nstats.nosql.get:                0\nstats.nosql.post:               0\nstats.nosql.delete:             0\n\n**PROXY cache app1**\napp1.rule.rule1:                state=on  memory=on  disk=off   ttl=10\napp1.rule.rule2:                state=on  memory=on  disk=on    ttl=10\napp1.rule.rule3:                state=on  memory=on  disk=sync  ttl=10\napp1.rule.rule4:                state=on  memory=off disk=on    ttl=10\napp1.rule.rule5:                state=on  memory=off disk=off   ttl=10\n\n**PROXY nosql app2**\napp2.rule.ruleA:                state=on  memory=on  disk=off   ttl=10\napp2.rule.ruleB:                state=on  memory=on  disk=on    ttl=10\napp2.rule.ruleC:                state=on  memory=on  disk=sync  ttl=10\napp2.rule.ruleD:                state=on  memory=off disk=on    ttl=10\napp2.rule.ruleE:                state=on  memory=off disk=off   ttl=10\n```\n\n## Ruleの有効無効\n\n***headers***\n\n| header | value      | description\n| ------ | -----      | -----------\n| state  | enable     | 有効にする\n|        | disable    | 無効にする\n| name   | rule NAME  | NAMEという名前のruleを有効無効にする\n|        | proxy NAME | NAMEという名前のProxyのすべてのruleを\n|        | *          | すべてのrulesを\n\n***Examples***\n\n* rule r1を無効にする\n\n  `curl -X POST -H \"name: r1\" -H \"state: disable\" http://127.0.0.1/nuster`\n\n* proxy app1bのすべてのruleを無効\n\n  `curl -X POST -H \"name: app1b\" -H \"state: disable\" http://127.0.0.1/nuster`\n\n* すべてのruleを有効\n\n  `curl -X POST -H \"name: *\" -H \"state: enable\" http://127.0.0.1/nuster`\n\n## 生存期間更新\n\ncacheのTTLを変更する、既存のキャッシュは変更されない。\n\n***headers***\n\n| header | value      | description\n| ------ | -----      | -----------\n| ttl    | new TTL    | TTLに変更\n| name   | rule NAME  | NAMEという名前のruleのTTLを変更\n|        | proxy NAME | NAMEという名前のProxyのすべてのruleを\n|        | *          | すべてのrulesを\n\n***Examples***\n\n```\ncurl -X POST -H \"name: r1\" -H \"ttl: 0\" http://127.0.0.1/nuster\ncurl -X POST -H \"name: r2\" -H \"ttl: 2h\" http://127.0.0.1/nuster\n```\n\n### stateとTTLを同時に変更\n\n```\ncurl -X POST -H \"name: r1\" -H \"ttl: 0\" -H \"state: enabled\" http://127.0.0.1/nuster\n```\n\n## 削除\n\n２つもモードある:\n\n* basic: 削除したいPATHにHTTP method `purge-method MYPURGE` を送る\n* advanced: manager uri にDELETEを送る\n\n### Basic purge: １つURLをPurge\n\n`curl -XPURGE http://127.0.0.1/imgs/test.jpg`\n\nruleでキーを生成して、キャッシュを探して、あったらPurgeする。GETで生成したキャッシュのみ有効。\n\nHostを注意してください、例えば、 `http://example.com/test` のキャッシュの場合は：\n\n`curl -XPURGE -H \"Host: example.com\" http://127.0.0.1/test`\n\ncache とnosql両方使える。Nosqlの場合は `DELETE` と同様。\n\n### Advanced purge: nameでPurge\n\nruleのname、proxyのname、もしくは`*`でPurgeできる。\n\n***headers***\n\n| header | value      | description\n| ------ | -----      | -----------\n| name   | rule NAME  | rule ${NAME} で生成したキャッシュをPurge\n|        | proxy NAME | proxy ${NAME}のキャッシュをPurge\n|        | *          | すべてのキャッシュをPurge\n\n***Examples***\n\n```\n# すべてのキャッシュをPurge\ncurl -X DELETE -H \"name: *\" http://127.0.0.1/nuster\n\n# proxy app1bのすべてのキャッシュをPurge\ncurl -X DELETE -H \"name: app1b\" http://127.0.0.1/nuster\n\n# nuster-rule r1が生成したキャッシュをすべてPurgeする\n# つまり /imgs/* のキャッシュをすべてPurgeする\n# nuster-rule r1 imgs if { path_beg /imgs/ }\ncurl -X DELETE -H \"name: r1\" http://127.0.0.1/nuster\n```\n\n### Advanced purge: HostでPurge\n\nそのHostのすべてのキャッシュをPurgeできる。\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| host        | HOST         | the ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\n# 127.0.0.1:8080のすべてのキャッシュをPurge\ncurl -X DELETE -H \"nuster-host: 127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n### Advanced purge: pathでPurge\n\nディフォルトで同じpathでもqueryが違うなら、生成したキャッシュも違う。\n\n例えば `nuster-rule imgs if { path_beg /imgs/ }`,そして\n\n```\ncurl http://127.0.0.1/imgs/test.jpg?w=120&h=120\ncurl http://127.0.0.1/imgs/test.jpg?w=180&h=180\n```\nすると、２つのキャッシュが生成される。\n\npathでpurge以外は、いくつかの方法でPurgeできる。\n\n***一つずつ***\n\n```\ncurl -XPURGE http://127.0.0.1/imgs/test.jpg?w=120&h=120\ncurl -XPURGE http://127.0.0.1/imgs/test.jpg?w=180&h=180\n```\nでもqueryがわからない場合はできない。\n\n***もしqueryが重要ではないなら、カスタマイズのkeyを使う***\n\n`nuster rule imgs key method.scheme.host.path if { path_beg /imgs }`,すると１つのキャッシュしか生成されない。そして、queryなしでpurgeできる。\n\n`curl -XPURGE http://127.0.0.1/imgs/test.jpg`\n\nでもqueryが重要の場合はできない。\n\n***ruleでpurge***\n\n`curl -X DELETE -H \"name: imgs\" http://127.0.0.1/nuster\n\nすると、 `/imgs/test.jpg`だけでなく、他の `/imgs/*`もPurgeされる。\n\nなので、pathでPurge\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| path        | PATH         | caches with ${PATH} will be purged\n| host        | HOST         | and host is ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\n# pathが/imgs/test.jpg のキャッシュをPurge\ncurl -X DELETE -H \"path: /imgs/test.jpg\" http://127.0.0.1/nuster\n\n# pathが/imgs/test.jpgで hostが127.0.0.1:8080のキャッシュをPurge\ncurl -X DELETE -H \"path: /imgs/test.jpg\" -H \"nuster-host: 127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n### Advanced purge: regexでPurge\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| regex       | REGEX        | caches which path match with ${REGEX} will be purged\n| host \t      | HOST         | and host is ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\n# /img下の.jpgファイルのキャッシュをPurge\ncurl -X DELETE -H \"regex: ^/imgs/.*\\.jpg$\" http://127.0.0.1/nuster\n\n#/img下の.jpgファイルかつHostが 127.0.0.1:8080のキャッシュをPurge\ncurl -X DELETE -H \"regex: ^/imgs/.*\\.jpg$\" -H \"127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n**PURGE注意事項**\n\n1. **アクセス制御必ずを**\n\n2. 複数のheaderがある場合、`name`, `path & host`, `path`, `regex & host`, `regex`, `host`の順序で処理\n\n   `curl -X DELETE -H \"name: rule1\" -H \"path: /imgs/a.jpg\"`: purge by name\n\n3. 重複のheaderがある場合, 一番目のheaderを使う\n\n   `curl -X DELETE -H \"name: rule1\" -H \"name: rule2\"`: purge by `rule1`\n\n4. `regex` は `glob` **ではない**\n\n   /imgs配下のjpgファイルは  `/imgs/*.jpg`　ではなく、`^/imgs/.*\\.jpg$` である。\n\n5. proxy name or rule name or host or path or regexでキャッシュファイルを削除するのはdisk loadが完了してからじゃないといけないです。disk loadが完了しているかどうかはstats URLで確認できます。\n\n# Store\n\nNuster(cacheとnosql) は複数の保存先をサポートする。今はmemory とdisk２つある。\n\n## Memory\n\n大きさが`data-size`で定義されたメモリに保存する。再起動するとDataが消える。\n\n## Disk\n\nディスクの`dir`の下に保存する。再起動してもDataは消えない。\n\n* off:   ディフォルト、保存しない\n* on:    保存する\n* sync:  `memory on` が必須. メモリに保存して、後ほどmasterプロセスによってディスクに保存される、毎回`disk-saver`個のキャッシュが保存される。\n\n# Sample fetches\n\n下記のsample fetchesが使えます\n\n## [cache] nuster.cache.hit: boolean\n\nキャッシュHITかどうかを表します。\n\n    http-response set-header x-cache hit if { nuster.cache.hit }\n\n## [cache|nosql] nuster.host: string\n\nHAProxyの`req.hdr(Host)`と同じで、ただ request とresponse 両方使える.\n\n## [cache|nosql] nuster.uri: string\n\nHAProxyの`capture.req.uri`と同じ.\n\n## [cache|nosql] nuster.path: string\n\nHAProxyの`path`と同じで、ただ request とresponse 両方使える.\n\n## [cache|nosql] nuster.query: string\n\nHAProxyの`query`と同じで、ただ request とresponse 両方使える.\n\n# FAQ\n\n## 起動できない: not in master-worker mode\n\n`global`に`master-worker`を設定するか, `-W`で起動する\n\n## debug方法?\n\n`nuster`を`-d`で起動する。\n\nnusterに関するメッセージは`[nuster`を含む。\n\n## どうやってPOSTリクエストをキャッシュする?\n\n`option http-buffer-request`を設定\n\nカスタマイズしたkeyは`body`を入れること。\n\nPOST bodyは不完全な可能性があるので、**option http-buffer-request** section in [HAProxy configuration](doc/configuration.txt) を参照\n\n単独でPOST用のbackendを設置した方がいいかもしれない\n\n## アクセス制御方法?\n\n```\nacl network_allowed src 127.0.0.1\nacl purge_method method PURGE\nhttp-request deny if purge_method !network_allowed\n```\nみたいな\n\n## HTTP2使いたい\n\n```\nbind :443 ssl crt pub.pem alpn h2,http/1.1\n```\n\n# Example\n\n```\nglobal\n    nuster manager on uri /_/nuster purge-method MYPURGE\n    nuster cache on data-size 100m\n    nuster nosql on data-size 100m\n    # daemon\ndefaults\n    retries 3\n    option redispatch\n    timeout client  30s\n    timeout connect 30s\n    timeout server  30s\nfrontend web1\n    bind *:8080\n    mode http\n    acl pathPost path /search\n    use_backend app1a if pathPost\n    default_backend app1b\nbackend app1a\n    balance roundrobin\n    # mode must be http\n    mode http\n\n    # http-buffer-request must be enabled to cache post request\n    option http-buffer-request\n\n    acl pathPost path /search\n\n    # enable cache for this proxy\n    nuster cache\n\n    # cache /search for 120 seconds. Only works when POST/PUT\n    nuster rule rpost key method.scheme.host.uri.body ttl 120 if pathPost\n\n    server s1 10.0.0.10:8080\nbackend app1b\n    balance     roundrobin\n    mode http\n\n    nuster cache on\n\n    # cache /a.jpg, not expire\n    acl pathA path /a.jpg\n    nuster rule r1 ttl 0 if pathA\n\n    # cache /mypage, key contains cookie[userId], so it will be cached per user\n    acl pathB path /mypage\n    nuster rule r2 key method.scheme.host.path.delimiter.query.cookie_userId ttl 60 if pathB\n\n    # cache /a.html if response's header[cache] is yes\n    http-request set-var(txn.pathC) path\n    acl pathC var(txn.pathC) -m str /a.html\n    acl resHdrCache1 res.hdr(cache) yes\n    nuster rule r3 if pathC resHdrCache1\n\n    # cache /heavy for 100 seconds if be_conn greater than 10\n    acl heavypage path /heavy\n    acl tooFast be_conn ge 100\n    nuster rule heavy ttl 100 if heavypage tooFast\n\n    # cache all if response's header[asdf] is fdsa\n    acl resHdrCache2 res.hdr(asdf)  fdsa\n    nuster rule resCache ttl 0 if resHdrCache1\n\n    server s1 10.0.0.10:8080\n\nfrontend web2\n    bind *:8081\n    mode http\n    default_backend app2\nbackend app2\n    balance     roundrobin\n    mode http\n\n    # disable cache on this proxy\n    nuster cache off\n    nuster rule all\n\n    server s2 10.0.0.11:8080\n\nfrontend nosql_fe\n    bind *:9090\n    default_backend nosql_be\nbackend nosql_be\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\n# Contributing\n\n* Join the development\n* Give feedback\n* Report issues\n* Send pull requests\n* Spread nuster\n\n# License\n\nCopyright (C) 2017-present, [Jiang Wenyuan](https://github.com/jiangwenyuan), < koubunen AT gmail DOT com >\n\nAll rights reserved.\n\nLicensed under GPL, the same as HAProxy\n\nHAProxy and other sources license notices: see relevant individual files.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 39.896484375,
          "content": "# nuster\n\n[Wiki](https://github.com/jiangwenyuan/nuster/wiki) | [English](README.md) | [中文](README-CN.md) | [日本語](README-JP.md)\n\nA high-performance HTTP proxy cache server and RESTful NoSQL cache server based on HAProxy.\n\n# Table of Contents\n\n* [Introduction](#introduction)\n* [Performance](#performance)\n* [Getting Started](#getting-started)\n* [Usage](#usage)\n* [Directives](#directives)\n* [Cache](#cache)\n* [NoSQL](#nosql)\n* [Manager](#manager)\n  * [Stats](#stats)\n  * [Enable disable rules](#enable-and-disable-rule)\n  * [Update ttl](#update-ttl)\n  * [Purging](#purging)\n* [Store](#store)\n* [Sample fetches](#sample-fetches)\n* [FAQ](#faq)\n\n# Introduction\n\nnuster is a high-performance HTTP proxy cache server and RESTful NoSQL cache server based on HAProxy.\nIt is 100% compatible with HAProxy and takes full advantage of the ACL functionality of HAProxy to provide fine-grained caching policy based on the content of request, response or server status.\n\n## Features\n\n### As HTTP/TCP loader balancer\n\nnuster can be used as an HTTP/TCP load balancer just like HAProxy.\n\n* All features of HAProxy are inherited, 100% compatible with HAProxy\n* Load balancing\n* HTTPS supports on both frontend and backend\n* HTTP compression\n* HTTP rewriting and redirection\n* HTTP fixing\n* HTTP2\n* Monitoring\n* Stickiness\n* ACLs and conditions\n* Content switching\n\n### As HTTP cache server\n\nnuster can also be used as an HTTP proxy cache server like Varnish or Nginx to cache dynamic and static HTTP response.\n\n* All features from HAProxy(HTTPS, HTTP/2, ACL, etc)\n* Extremely fast\n* Powerful dynamic cache ability\n  * Based on HTTP method, URI, path, query, header, cookies, etc\n  * Based on HTTP request or response contents, etc\n  * Based on environment variables, server state, etc\n  * Based on SSL version, SNI, etc\n  * Based on connection rate, number, byte, etc\n* Cache management\n* Cache purging\n* Cache stats\n* Cache TTL\n* Disk persistence\n\n### As RESTful NoSQL cache server\n\nnuster can also be used as a RESTful NoSQL cache server, using HTTP `POST/GET/DELETE` to set/get/delete Key/Value object.\n\nIt can be used as an internal NoSQL cache sits between your application and database like Memcached or Redis as well as a user-facing NoSQL cache that sits between end-user and your application.\nIt supports headers, cookies, so you can store per-user data to the same endpoint.\n\n* All features from HAProxy(HTTPS, HTTP/2, ACL, etc)\n* Conditional cache\n* Internal KV cache\n* User facing RESTful cache\n* Support any kind of data\n* Support all programming languages as long as HTTP is supported\n* Disk persistence\n\n# Performance\n\nnuster is very fast, some test shows nuster is almost three times faster than nginx when both using single core, and nearly two times faster than nginx and three times faster than varnish when using all cores.\n\nSee [detailed benchmark](https://github.com/jiangwenyuan/nuster/wiki/Web-cache-server-performance-benchmark:-nuster-vs-nginx-vs-varnish-vs-squid)\n\n# Getting Started\n\n## Download\n\nDownload stable version from [Download](Download.md) page for production use, otherwise git clone the source code.\n\n## Build\n\n```\nmake TARGET=linux-glibc USE_LUA=1 LUA_INC=/usr/include/lua5.3 USE_OPENSSL=1 USE_PCRE=1 USE_ZLIB=1\nmake install PREFIX=/usr/local/nuster\n```\n\n> use `USE_PTHREAD_PSHARED=1` to use pthread lib\n\n> omit `USE_LUA=1 LUA_INC=/usr/include/lua5.3 USE_OPENSSL=1 USE_PCRE=1 USE_ZLIB=1` if unnecessary\n\nSee [HAProxy INSTALL](INSTALL) for details.\n\n## Create a config file\n\nA minimal config file: `nuster.cfg`\n\n```\nglobal\n    nuster cache on data-size 100m\n    nuster nosql on data-size 200m\n    master-worker # since v3\ndefaults\n    mode http\nfrontend fe\n    bind *:8080\n    #bind *:4433 ssl crt example.com.pem alpn h2,http/1.1\n    use_backend be2 if { path_beg /_kv/ }\n    default_backend be1\nbackend be1\n    nuster cache on\n    nuster rule img ttl 1d if { path_beg /img/ }\n    nuster rule api ttl 30s if { path /api/some/api }\n    server s1 127.0.0.1:8081\n    server s2 127.0.0.1:8082\nbackend be2\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\nnuster listens on port 8080 and accepts HTTP requests.\nRequests start with `/_kv/` go to backend `be2`, you can make `POST/GET/DELETE` requests to `/_kv/any_key` to `set/get/delete` K/V object.\nOther requests go to backend `be1`, and will be passed to servers `s1` or `s2`. Among those requests, `/img/*` will be cached for 1 day and `/api/some/api` will be cached for 30 seconds.\n\n## Start\n\n`/usr/local/nuster/sbin/nuster -f nuster.cfg`\n\n## Docker\n\n```\ndocker pull nuster/nuster\ndocker run -d -v /path/to/nuster.cfg:/etc/nuster/nuster.cfg:ro -p 8080:8080 nuster/nuster\n```\n\n# Usage\n\nnuster is based on HAProxy, all directives from HAProxy are supported in nuster.\n\n## Basic\n\nThere are four basic `section`s: `global`, `defaults`, `frontend` and `backend` as you can find out in the above config file.\n\n* global\n  * defines process-wide and often OS-specific parameters\n  * `nuster cache on` or `nuster nosql on` must be declared in this section in order to use cache or nosql functionality\n* defaults\n  * defines default parameters for all other `frontend`, `backend` sections\n  * and can be overwritten in specific `frontend` or `backend` section\n* frontend\n  * describes a set of listening sockets accepting client connections\n* backend\n  * describes a set of servers to which the proxy will connect to forward incoming connections\n  * `nuster cache on` or `nuster nosql on` must be declared in this section\n  * `nuster rule` must be declared here\n\nYou can define multiple `frontend` or `backend` sections. If `nuster cache|nosql off` is declared or no `nuster cache|nosql on|off` declared, nuster acts just like HAProxy, as a TCP and HTTP load balancer.\n\nAlthough `listen` is a complete proxy with its frontend and backend parts combined in one section, you cannot use nuster in `listen`, use `frontend` and `backend` pairs.\n\nYou can find HAProxy documentation in `/doc`, and [Online HAProxy Documentation](https://cbonte.github.io/haproxy-dconv/)\n\n## As TCP loader balancer\n\n```\nfrontend mysql-lb\n    bind *:3306\n    mode tcp\n    default_backend mysql-cluster\nbackend mysql-cluster\n    balance roundrobin\n    mode tcp\n    server s1 10.0.0.101:3306\n    server s2 10.0.0.102:3306\n    server s3 10.0.0.103:3306\n```\n\n## As HTTP/HTTPS loader balancer\n\n```\nfrontend web-lb\n    bind *:80\n    #bind *:443 ssl crt XXX.pem\n    mode http\n    default_backend apps\nbackend apps\n    balance roundrobin\n    mode http\n    server s1 10.0.0.101:8080\n    server s2 10.0.0.102:8080\n    server s3 10.0.0.103:8080\n    #server s4 10.0.0.101:8443 ssl verify none\n```\n\n## As HTTP cache server\n\n```\nglobal\n    nuster cache on data-size 200m\nfrontend fe\n    bind *:8080\n    mode http\n    default_backend be\nbackend be\n    mode http\n    nuster cache on\n    nuster rule all\n    server s1 127.0.0.1:8081\n```\n\n## As RESTful NoSQL cache server\n\n```\nglobal\n    nuster nosql on data-size 200m\nfrontend fe\n    bind *:8080\n    mode http\n    default_backend be\nbackend be\n    nuster nosql on\n    mode http\n    nuster rule r1 ttl 3600\n```\n\n# Directives\n\n## global: nuster manager\n\n**syntax:**\n\n*nuster manager on|off [uri URI] [purge-method method]*\n\n**default:** *off*\n\n**context:** *global*\n\nEnable manager/stats/purge API, define the endpoint and purge method.\n\nBy default, it is disabled. When it is enabled, remember to restrict the access(see [FAQ](#how-to-restrict-access)).\n\nSee [Manager](#manager) for details.\n\n### uri\n\nDefine endpoint URI, `/nuster` by default.\n\n### purge-method\n\nDefine a customized HTTP method to purge, it is `PURGE` by default.\n\n## global: nuster cache|nosql\n\n**syntax:**\n\n*nuster cache on|off [data-size size] [dict-size size] [dir DIR] [dict-cleaner n] [data-cleaner n] [disk-cleaner n] [disk-loader n] [disk-saver n] [clean-temp on|off] [always-check-disk on|off]*\n\n*nuster nosql on|off [data-size size] [dict-size size] [dir DIR] [dict-cleaner n] [data-cleaner n] [disk-cleaner n] [disk-loader n] [disk-saver n] [clean-temp on|off] [always-check-disk on|off]*\n\n**default:** *none*\n\n**context:** *global*\n\nDetermines whether to use cache/nosql or not.\n\nA memory zone with a size of `data-size + dict-size` will be created.\n\nExcept for temporary data created and destroyed within a request, all cache related data including HTTP response data, keys and overheads are stored in this memory zone and shared between all processes.\nIf no more memory can be allocated from this memory zone, new requests that should be cached according to defined rules will not be cached unless some memory is freed.\nTemporary data are stored in a memory pool which allocates memory dynamically from system in case there is no available memory in the pool.\nA global internal counter monitors the memory usage of all HTTP response data across all processes, new requests will not be cached if the counter exceeds `data-size`.\n\n### data-size\n\nDetermines the size of the memory zone along with `dict-size`.\n\nIt accepts units like `m`, `M`, `g` and `G`. By default, the size is 1024 * 1024 bytes, which is also the minimal size.\n\n### dict-size\n\nDetermines the size of memory used by the hash table.\n\nIt accepts units like `m`, `M`, `g` and `G`. By default, the size is 1024 * 1024 bytes, which is also the minimal size.\n\nNote that it only decides the memory used by hash table buckets, not keys. In fact, keys are stored in the memory zone which is limited by `data-size`.\n\n**dict-size(number of buckets)** is different from **number of keys**. New keys can still be added to the hash table even if the number of keys exceeds dict-size(number of buckets) as long as there is enough memory.\n\nNevertheless, it may lead to a potential performance drop if `number of keys` is greater than `dict-size(number of buckets)`. An approximate number of keys multiplied by 8 (normally) as `dict-size` should be fine. Basically, the bigger the better.\n\nEnable stats API and check following stats:\n\n```\ndict.nosql.length:              131072\ndict.nosql.used:                0\n```\n\nIf `dict.nosql.used` is greater than `dict.nosql.length`, then increase `dict-size` would be a good idea.\n\n> dict-size will be removed in a future release, automatically resizing the hash table in the first version will be added back.\n\n### dir\n\nSpecify the root directory of the disk persistence. This has to be set in order to use disk persistence.\n\nIf chroot is also set, the real directory is chroot+dir. For example\n\n```\nchroot /data\nnuster cache on dir /cache\n```\n\nCache is saved to /data/cache\n\n### dict-cleaner\n\nPrior to v2.x, manager tasks like removing invalid cache data, resetting dict entries are executed in iterations in each HTTP request. Corresponding indicators or pointers are increased or advanced in each iteration.\n\nIn v3.x these tasks are moved to the master process and also done in iterations, and these parameters can be set to control the number of times of certain task during one iteration.\n\nDuring one iteration no more than `dict-cleaner` entries are checked, invalid entries will be deleted (by default, 1000).\n\n### data-cleaner\n\nDuring one iteration no more than `data-cleaner` data are checked, invalid data will be deleted (by default, 1000).\n\nWhen the invalid data ratio is greater than 20%, an internal mechanism will speed up the clean process, so it is recommended not to change this from the default value.\n\n### disk-cleaner\n\nIf disk persistence is enabled, data are stored in files. These files are checked by master process and will be deleted if invalid, for example, expired.\n\nDuring one iteration no more than `disk-cleaner` files are checked, invalid files will be deleted (by default, 100).\n\n### disk-loader\n\nAfter the start of nuster, master process will load information about data previously stored on disk into memory.\n\nDuring one iteration no more than `disk-loader` files are loaded(by default, 100).\n\nIf `USE_THREAD` is used, a separate thread will be created to load disk files and this parameter is ignored.\n\n### disk-saver\n\nMaster process will save `disk sync` cache data periodically.\n\nDuring one iteration no more than `disk-saver` data are checked and saved to disk if necessary (by default, 100).\n\nSee [Store](#disk) for details.\n\n### clean-temp on|off\n\nUnder the directory defined by `dir`, a temporary directory `.tmp` will be created to store temporary files.\n\nUse this option to determine whether or not to remove those temporary files on startup.\n\nBy default, it is `off`.\n\n### always-check-disk on|off\n\nThe initial load of cached data on disk only happens on startup and has such if running in a scenario where the disk is shared across multiple instances, it can lead to missed cache calls.\nUsing this option, the disk is always checked for the cached data.\n\nBy default, it is `off`.\n\n## proxy: nuster cache|nosql\n\n**syntax:**\n\n*nuster cache [on|off]*\n\n*nuster nosql [on|off]*\n\n**default:** *on*\n\n**context:** *backend*\n\nDetermines whether or not to use cache/nosql on this proxy, additional `nuster rule` should be defined.\nIf there are filters on this proxy, put this directive after all other filters.\n\n## proxy: nuster rule\n\n**syntax:**\n\n*nuster rule name [key KEY] [ttl auto|TTL] [extend EXTEND] [wait on|off|TIME] [use-stale on|off|TIME] [inactive off|TIME] [code CODE] [memory on|off] [disk on|off|sync] [etag on|off] [last-modified on|off] [if|unless condition]*\n\n**default:** *none*\n\n**context:** *backend*\n\nDefine rule to specify cache/nosql creating conditions, properties. At least one rule should be defined.\n\n```\nnuster cache on\n\n# cache request `/asdf` for 30 seconds\nnuster rule asdf ttl 30 if { path /asdf }\n\n# cache if the request path begins with /img/\nnuster rule img if { path_beg /img/ }\n\n# cache if the response header `cache` is `yes`\nacl resHdrCache res.hdr(cache) yes\nnuster rule r1 if resHdrCache\n```\n\nIt is possible and recommended to declare multiple rules in the same section. The order is important because the matching process stops on the first match.\n\n```\nacl pathA path /a.html\nnuster cache on\nnuster rule all ttl 3600\nnuster rule path01 ttl 60 if pathA\n```\n\nrule `path01` will never match because the first rule will cache everything.\n\n### name\n\nDefine a name for this rule. Must be globally unique since v5.\n\n### key KEY\n\nDefine the key for cache/nosql, it takes a string combined by following keywords with `.` separator:\n\n * method:       http method, GET/POST...\n * scheme:       http or https\n * host:         the host in the request\n * uri:          first slash to end of the url\n * path:         the URL path of the request\n * delimiter:    '?' if query exists otherwise empty\n * query:        the whole query string of the request\n * header\\_NAME: the value of header `NAME`\n * cookie\\_NAME: the value of cookie `NAME`\n * param\\_NAME:  the value of query `NAME`\n * body:         the body of the request\n\nThe default key of CACHE is `method.scheme.host.uri`, and default key of NoSQL is `GET.scheme.host.uri`.\n\nExample\n\n```\nGET http://www.example.com/q?name=X&type=Y\n\nhttp header:\nGET /q?name=X&type=Y HTTP/1.1\nHost: www.example.com\nASDF: Z\nCookie: logged_in=yes; user=nuster;\n```\n\nShould result:\n\n * method:       GET\n * scheme:       http\n * host:         www.example.com\n * uri:          /q?name=X&type=Y\n * path:         /q\n * delimiter:    ?\n * query:        name=X&type=Y\n * header\\_ASDF: Z\n * cookie\\_user: nuster\n * param\\_type:  Y\n * body:         (empty)\n\nSo default key produces `GET\\0http\\0www.example.com\\0/q?name=X&type=Y\\0`, and `key method.scheme.host.path.header_ASDF.cookie_user.param_type` produces `GET\\0http\\0www.example.com\\0/q\\0Z\\0nuster\\0Y\\0`.\n\n> `\\0` is NULL character\n\nIf a request has the same key as a cached HTTP response data, then cached data will be sent to the client.\n\n### ttl auto|TTL\n\nSet a TTL on key, after the TTL has expired, the key will be deleted.\n\nIt accepts units like `d`, `h`, `m` and `s`. Default ttl is `0` which does not expire the key.\n\nWhen `auto` is used, the ttl is set to the value of `s-maxage` or `max-age` directive in the `cache-control` header.\n\n> Other directives of `cache-control` are not handled.\n\nThe max value of ttl is 2147483647.\n\nttl can be automatically extended by using `extend` keyword.\n\n### extend EXTEND\n\nAutomatically extend the ttl.\n\n#### Format\n\nextend on|off|n1,n2,n3,n4\n\nDefault: off.\n\nn1,n2,n3,n4: positive integer less than 100, and n1 + n2 + n3 is less than 100. Together they define four time slots as following:\n\n```\ntime:       0                                                       ttl         ttl * (1 + n4%)\naccess:     |            A1             |   A2    |   A3    |   A4    |         |\n            |---------------------------|---------|---------|---------|---------|\npercentage: |<- (100 - n1 - n2 - n3)% ->|<- n1% ->|<- n2% ->|<- n3% ->|<- n4% ->|\n```\n\nttl will be extended if:\n\n1. A4 > A3 > A2\n2. A new request takes place between `ttl` and `ttl * (1 + n4%)`\n\n> `on` equals to 33,33,33,33\n\n### wait on|off|TIME [cache only]\n\nWhen enabled, only one request at a time will be passed to backend server to create cache. Other identical requests will either wait until the cache is created(`wait on`) or for the time expires(`wait TIME`) and be forwarded to the backend server.\n\nBy default, identical requests are forwarded to backend server and the first one will create the cache(`wait off`).\n\nNote that other identical requests will not wait until the first request finished the initialization process(e.g. create a cache entry).\n\n> In nosql mode, there is no wait mode. Multiple identical POST requests are served in the order it was received, and the body of the last request will be saved as the content.\n\nThe max value of wait is 2147483647.\n\n### use-stale on|off|TIME [cache only]\n\nDetermines whether or not to serve stale cache to clients if it is being updated or the backend server is down.\n\nWhen use-stale is on, the stale cache will be used to serve clients.\n\nWhen use-stale is off, which is the default mode, same requests will be passed to the backend when the cache is being updated if `wait off` is set, otherwise wait if `wait on|TIME` is set.\n\n`use-stale TIME` permits using the stale cache to serve clients for TIME seconds if the cache cannot be updated due to backend error.\n\nThe max value of use-stale is 2147483647.\n\n### inactive off|TIME\n\nDetermines whether or not to delete the cache that are not accessed during TIME seconds regardless of the validity. By default, inactive is set to off(0).\n\nNote that it is not guaranteed that the cache get removed after TIME inactive. If the clean process accesses the cache first, then the data get removed. If a new request comes first, then the last access time of the cache gets updated and the cache will not be deleted. In the case of disk file, the atime of the file is not used, so when nuster restarts, the last access time is set to the loaded time.\n\nThe max value of inactive is 2147483647.\n\n### code CODE1,CODE2...\n\nCache only if the response status code is CODE.\n\nBy default, only 200 response is cached. You can use `all` to cache all responses.\n\n```\nnuster rule only200\nnuster rule 200and404 code 200,404\nnuster rule all code all\n```\n\n### memory on|off\n\nSave data to memory or not, default on.\n\nSee [Store](#Store) for details.\n\n### disk on|off|sync\n\nSave data to disk or not, and how, default off.\n\n`memory on` needs to be set in order to use `disk sync` mode.\n\nSee [Store](#Store) for details.\n\n### etag on|off\n\nEnable etag conditional requests handling. Add `ETag` header if absent.\n\nDefault off.\n\n### last-modified on|off\n\nEnable last-modified conditional requests handling. Add `Last-Modified` header if absent.\n\nDefault off.\n\n### if|unless condition\n\nDefine when to cache using HAProxy ACL.\n\nThe evaluation involves two stages: request stage and response stage.\n\nCache will be performed if:\n\n1. The evaluation in the request stage is true,\n2. The evaluation in the request stage is false but true in the response stage.\n\n**Please be very careful if you use negation in the condition or samples not available in certain stage**\n\nFor example,\n\n1.  Cache if the request path begins with `/img/`\n\n    nuster rule img if { path_beg /img/ }\n\nThis will work because the evaluation in the request stage will either be true or false and will never be true in the response stage as `path` is not available in the response stage.\n\n2. Cache if `Content-Type` in response is `image/jpeg`\n\n    nuster rule jpeg if { res.hdr(Content-Type) image/jpeg }\n\nThis will work because the evaluation in the request stage is always false as `res.hdr` is not available in the request stage, and will be either true or false in the response stage.\n\n3. Cache if the request path begins with `/img/` and `Content-Type` in response is `image/jpeg`\n\nIt won't work if you define the rule as:\n\n    nuster rule img if { path_beg /img/ } { res.hdr(Content-Type) image/jpeg }\n\nbecause `path` is not available in the response stage and `res.hdr` is not available in the request stage, so the evaluation will never be true.\n\nIn order the make this work, `path` needs to be allocated for further use in reponse stage:\n\n    http-request set-var(txn.pathImg) path\n    acl pathImg var(txn.pathImg) -m beg /img/\n    acl resHdrCT res.hdr(Content-Type) image/jpeg\n    nuster rule r3 if pathImg resHdrCT\n\nOr use `nuster.path`(v5):\n\n    nuster rule r3 if { nuster.path -m beg /img } { res.hdr(Content-Type) image/jpeg }\n\n4. Another example, cache if the request path does not begin with `/api/`\n\nIt won't work neither:\n\n    acl NoCache path_beg /api/\n    nuster rule r3 if !NoCache\n\nBecause the evaluation of `NoCache` against `/api/` in the request stage is true, and the negation is false, which is the desired state, but in response stage, the evaluation of `NoCache` is always false as `path` is not available in response stage, and it will be cached as the negation `!NoCache` is true.\n\nThis will work:\n\n    http-request set-var(txn.path) path\n    acl NoCache var(txn.path) -m beg /api/\n    nuster rule r1 if !NoCache\n\nSee [Sample fetches](#sample-fetch) for sample fetches introduced by nuster.\n\nSee **7. Using ACLs and fetching samples** section in [HAProxy configuration](doc/configuration.txt)\n\n# Cache\n\nnuster can be used as an HTTP proxy cache server like Varnish or Nginx to cache dynamic and static HTTP response.\n\nYou can use HAProxy functionalities to terminate SSL, normalize HTTP, support HTTP2, rewrite the URL or modify headers and so on, and additional functionalities provided by nuster to control cache.\n\n```\nglobal\n    nuster cache on data-size 200m\nfrontend fe\n    bind *:8080\n    mode http\n    default_backend be\nbackend be\n    mode http\n    nuster cache on\n    nuster rule r1 if { path /a1 }\n    nuster rule r2 key method.scheme.host.path.delimiter.query.cookie_userId if { path /a2 }\n    nuster rule r3 ttl 10 if { path /a3 }\n    nuster rule r4 disk on if { path /a4 }\n\n    server s1 127.0.0.1:8081\n```\n\nWhen a request is accepted, nuster will check the rules one by one. Key will be created and used to lookup in the cache, and if it's a HIT, the cached data will be returned to client. Otherwise the ACL will be tested, and if it passes the test, response will be cached.\n\n# NoSQL\n\nnuster can be used as a RESTful NoSQL cache server, using HTTP `POST/GET/DELETE` to set/get/delete Key/Value object.\n\n## Basic Operations\n\n### Set\n\n```\ncurl -v -X POST -d value1 http://127.0.0.1:8080/key1\ncurl -v -X POST --data-binary @icon.jpg http://127.0.0.1:8080/imgs/icon.jpg\n```\n\n### Get\n\n`curl -v http://127.0.0.1:8080/key1`\n\n### Delete\n\n`curl -v -X DELETE http://127.0.0.1:8080/key1`\n\n## Response\n\nCheck status code.\n\n* 200 OK\n  * POST/GET: succeeds\n  * DELETE: always\n* 400 Bad request\n  * empty value\n  * incorrect acl, rules, etc\n* 404 Not Found\n  * POST: failed on all rule tests\n  * GET: not found\n* 405 Method Not Allowed\n  * other methods\n* 500 Internal Server Error\n  * any error occurs\n* 507 Insufficient Storage\n  * exceeds max data-size\n\n## Headers\n\nSupported headers in request\n\n| Name          | value                   | description\n| ------        | -----                   | -----------\n| content-type  | any   \t\t  | Will be returned as is in GET request\n| cache-control | `s-maxage` or `max-age` | used to set ttl when rule.ttl is `auto`\n\n## Per-user data\n\nBy using header or cookie in key, you can save per-user data to the same endpoint.\n\n```\nnuster rule r1 key method.scheme.host.uri.header_userId if { path /mypoint }\nnuster rule r2 key method.scheme.host.uri.cookie_sessionId if { path /mydata }\n```\n\n### Set\n\n\n```\ncurl -v -X POST -d \"333\" -H \"userId: 1000\" http://127.0.0.1:8080/mypoint\ncurl -v -X POST -d \"555\" -H \"userId: 1001\" http://127.0.0.1:8080/mypoint\n\ncurl -v -X POST -d \"userA data\" --cookie \"sessionId=ijsf023xe\" http://127.0.0.1:8080/mydata\ncurl -v -X POST -d \"userB data\" --cookie \"sessionId=rosre329x\" http://127.0.0.1:8080/mydata\n```\n\n### Get\n\n```\ncurl -v http://127.0.0.1:8080/mypoint\n< 404 Not Found\n\ncurl -v -H \"userId: 1000\" http://127.0.0.1:8080/mypoint\n< 200 OK\n333\n\ncurl -v --cookie \"sessionId=ijsf023xe\" http://127.0.0.1:8080/mydata\n< 200 OK\nuserA data\n```\n\n## Clients\n\nYou can use any tools or libs which support HTTP: `curl`, `postman`, python `requests`, go `net/http`, etc.\n\n# Manager\n\nNuster can be managed via a manager API which endpoints is defined by `uri` and can be accessed by making HTTP requests along with some headers\n\n**Enable and define the endpoint uri and purge method**\n\n```\nnuster manager on uri /internal/nuster purge-method PURGEX\n```\n\n## Usage matrix\n\n| METHOD | Endpoint         | description\n| ------ | --------         | -----------\n| GET    | /internal/nuster | get stats\n| POST   | /internal/nuster | enable and disable rule, update ttl\n| DELETE | /internal/nuster | advanced purge cache\n| PURGEX | /any/real/path   | basic purge\n\n## Stats\n\nNuster stats can be accessed by making HTTP GET request to the endpoint defined by `uri`;\n\n### Usage\n\n`curl http://127.0.0.1/nuster`\n\n### Output\n\n```\n**NUSTER**\nnuster.cache:                   on\nnuster.nosql:                   on\nnuster.manager:                 on\n\n**MANAGER**\nmanager.uri:                    /nuster\nmanager.purge_method:           PURGE\n\n**DICT**\n# The size of the memory used by the cache dict in bytes defined by dict-size\ndict.cache.size:                1048576\n# The length of the cache dict array\ndict.cache.length:              131072\n# The number of used entries in the cache dict\ndict.cache.used:                0\ndict.cache.cleanup_idx:         0\ndict.cache.sync_idx:            0\ndict.nosql.size:                1048576\ndict.nosql.length:              131072\ndict.nosql.used:                0\ndict.nosql.cleanup_idx:         0\ndict.nosql.sync_idx:            0\n\n**STORE MEMORY**\n# The size of the cache memory store in bytes, approximate equals to dict-size + data-size\nstore.memory.cache.size:        2098200576\n# The size of used memory of the cache memory store\nstore.memory.cache.used:        1048960\n# The number of stored cache entries\nstore.memory.cache.count:       0\nstore.memory.nosql.size:        11534336\nstore.memory.nosql.used:        1048960\nstore.memory.nosql.count:       0\n\n**STORE DISK**\nstore.disk.cache.dir:           /tmp/nuster/cache\nstore.disk.cache.loaded:        yes\nstore.disk.nosql.dir:           /tmp/nuster/nosql\nstore.disk.nosql.loaded:        yes\n\n**STATS**\n# The total number of requests\nstats.cache.total:              0\n# The total number of HIT requests\nstats.cache.hit:                0\n# The total number of MISS requests\nstats.cache.fetch:              0\n# The total number of bypass requests\nstats.cache.bypass:             0\n# The total number of aborted requests\nstats.cache.abort:              0\n# The total response size in bytes served by cache\nstats.cache.bytes:              0\nstats.nosql.total:              0\nstats.nosql.get:                0\nstats.nosql.post:               0\nstats.nosql.delete:             0\n\n**PROXY cache app1**\napp1.rule.rule1:                state=on  memory=on  disk=off   ttl=10\napp1.rule.rule2:                state=on  memory=on  disk=on    ttl=10\napp1.rule.rule3:                state=on  memory=on  disk=sync  ttl=10\napp1.rule.rule4:                state=on  memory=off disk=on    ttl=10\napp1.rule.rule5:                state=on  memory=off disk=off   ttl=10\n\n**PROXY nosql app2**\napp2.rule.ruleA:                state=on  memory=on  disk=off   ttl=10\napp2.rule.ruleB:                state=on  memory=on  disk=on    ttl=10\napp2.rule.ruleC:                state=on  memory=on  disk=sync  ttl=10\napp2.rule.ruleD:                state=on  memory=off disk=on    ttl=10\napp2.rule.ruleE:                state=on  memory=off disk=off   ttl=10\n```\n\n## Enable and disable rule\n\nRule can be disabled at run time through manager uri. Disabled rule will not be processed, nor will the cache created by that.\n\n***headers***\n\n| header | value       | description\n| ------ | -----       | -----------\n| state  | enable      | enable  rule\n|        | disable     | disable rule\n| name   | rule NAME   | the rule to be enabled/disabled\n|        | proxy NAME  | all rules of proxy NAME\n|        | *           | all rules\n\nKeep in mind that if name is not unique, **all** rules with that name will be disabled/enabled.\n\n***Examples***\n\n* Disable rule r1\n\n  `curl -X POST -H \"name: r1\" -H \"state: disable\" http://127.0.0.1/nuster`\n\n* Disable all rules defined in proxy app1b\n\n  `curl -X POST -H \"name: app1b\" -H \"state: disable\" http://127.0.0.1/nuster`\n\n* Enable all rules\n\n  `curl -X POST -H \"name: *\" -H \"state: enable\" http://127.0.0.1/nuster`\n\n## Update ttl\n\nChange the TTL. It only affects the TTL of the responses to be cached, **does not** update the TTL of existing caches.\n\n***headers***\n\n| header | value      | description\n| ------ | -----      | -----------\n| ttl    | new TTL    | see `ttl` in `nuster rule`\n| name   | rule NAME  | the rule to be changed\n|        | proxy NAME | all rules of proxy NAME\n|        | *          | all rules\n\n***Examples***\n\n```\ncurl -X POST -H \"name: r1\" -H \"ttl: 0\" http://127.0.0.1/nuster\ncurl -X POST -H \"name: r2\" -H \"ttl: 2h\" http://127.0.0.1/nuster\n```\n\n### Update state and TTL\n\nstate and ttl can be updated at the same time\n\n```\ncurl -X POST -H \"name: r1\" -H \"ttl: 0\" -H \"state: enabled\" http://127.0.0.1/nuster\n```\n\n## Purging\n\nThere are two purging mode: basic and advanced.\n\n* basic: Send HTTP method defined by `purge-method MYPURGE` to the path you want to delete\n* advanced: Send DELETE method to the manager uri defined by `uri`\n\n### Basic purging\n\nThis method deletes the specific url that is being requested, like this:\n\n`curl -XPURGE http://127.0.0.1/imgs/test.jpg`\n\nKey is created in the same way when the cache created except that the `method` is `GET`.\n\nNote by default cache key contains `Host` if you cache a request like `http://example.com/test` and purge from localhost you need to specify `Host` header:\n\n`curl -XPURGE -H \"Host: example.com\" http://127.0.0.1/test`\n\nIt works for both cache and nosql, it is an alias of `DELETE` in nosql mode.\n\n### Advanced purging: purge by name\n\nCache can be purged by making HTTP `DELETE` requests to the manager uri along with a `name` HEADER.\n\n***headers***\n\n| header | value            | description\n| ------ | -----            | -----------\n| name   | nuster rule NAME | caches created by rule ${NAME} will be purged\n|        | proxy NAME       | caches of proxy ${NAME}\n\n***Examples***\n\n```\n# purge all caches of proxy applb\ncurl -X DELETE -H \"name: app1b\" http://127.0.0.1/nuster\n# purge all caches of rule r1\ncurl -X DELETE -H \"name: r1\" http://127.0.0.1/nuster\n```\n\n### Advanced purging: purge by host\n\nYou can also purge cache by host, all caches with that host will be deleted:\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| host        | HOST         | the ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\ncurl -X DELETE -H \"nuster-host: 127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n### Advanced purging: purge by path\n\nBy default, the query part is also used as a cache key, so there will be multiple caches if the query differs.\n\nFor example, for rule `nuster rule imgs if { path_beg /imgs/ }`, and request\n\n```\ncurl http://127.0.0.1/imgs/test.jpg?w=120&h=120\ncurl http://127.0.0.1/imgs/test.jpg?w=180&h=180\n```\n\nThere will be two cache objects since the default key contains the query part.\n\nIn order to delete that, you can\n\n***delete one by one in case you know all queries***\n\n```\ncurl -XPURGE http://127.0.0.1/imgs/test.jpg?w=120&h=120\ncurl -XPURGE http://127.0.0.1/imgs/test.jpg?w=180&h=180\n```\n\nIt does not work if you don't know all queries.\n\n***use a customized key and delete once in case that the query part is irrelevant***\n\nDefine a key like `nuster rule imgs key method.scheme.host.path if { path_beg /imgs }`, in this way only one cache will be created, and you can purge without query:\n\n`curl -XPURGE http://127.0.0.1/imgs/test.jpg`\n\nIt does not work if the query part is required.\n\n***delete by rule NAME***\n\n`curl -X DELETE -H \"name: imgs\" http://127.0.0.1/nuster`\n\nIt does not work if the nuster rule is defined something like `nuster rule static if { path_beg /imgs/ /css/ }`.\n\nThis method provides a way to purge just by path:\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| path        | PATH         | caches with ${PATH} will be purged\n| host        | HOST         | and host is ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\n#delete all caches which path is /imgs/test.jpg\ncurl -X DELETE -H \"path: /imgs/test.jpg\" http://127.0.0.1/nuster\n#delete all caches which path is /imgs/test.jpg and with host of 127.0.0.1:8080\ncurl -X DELETE -H \"path: /imgs/test.jpg\" -H \"nuster-host: 127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n### Advanced purging: purge by regex\n\nYou can also purge cache by regex, the caches which path match the regex will be deleted.\n\n***headers***\n\n| header      | value        | description\n| ------      | -----        | -----------\n| regex       | REGEX        | caches which path match with ${REGEX} will be purged\n| host \t      | HOST         | and host is ${HOST}\n| nuster-host | HOST         | nuster-host has higher precedence over host\n| mode        | cache, nosql | purge cache or nosql data\n\n***Examples***\n\n```\n#delete all caches which path starts with /imgs and ends with .jpg\ncurl -X DELETE -H \"regex: ^/imgs/.*\\.jpg$\" http://127.0.0.1/nuster\n#delete all caches which path starts with /imgs and ends with .jpg and with host of 127.0.0.1:8080\ncurl -X DELETE -H \"regex: ^/imgs/.*\\.jpg$\" -H \"127.0.0.1:8080\" http://127.0.0.1/nuster\n```\n\n**PURGE CAUTION**\n\n1. **ENABLE ACCESS RESTRICTION**\n\n2. If there are mixed headers, use the precedence of `name`, `path & host`, `path`, `regex & host`, `regex`, `host`\n\n   `curl -X DELETE -H \"name: rule1\" -H \"path: /imgs/a.jpg\"`: purge by name\n\n3. If there are redundant headers, use the first occurrence\n\n   `curl -X DELETE -H \"name: rule1\" -H \"name: rule2\"`: purge by `rule1`\n\n4. `regex` is **NOT glob**\n\n   For example, all jpg files under /imgs should be `^/imgs/.*\\.jpg$` instead of `/imgs/*.jpg`\n\n5. Purging cache files by proxy name or rule name or host or path or regex only works after the disk loader process is finished. You can check the status through stats url.\n\n# Store\n\nNuster(both cache and nosql) supports different backend stores. Currently memory and disk are supported. More stores will be added.\n\n## Memory\n\nData is stored into a memory area which size is defined by `data-size`. Data does not persist in memory and will lost after restarts.\n\n## Disk\n\nData is stored to disk and under the path defined by `dir`. Data persists after restarts.\n\nThere are 3 modes:\n\n* off:   default, disable disk persistence.\n* on:    save data to disk.\n* sync:  `memory on` has to be set in order to use this mode. Save data to memory first and data will be synced to disk later by the master process. One iteration `disk-saver` data are checked and saved to disk.\n\n# Sample fetches\n\nNuster introduced following sample fetches\n\n## [cache] nuster.cache.hit: boolean\n\nReturns a boolean indicating whether it's a HIT or not and can be used like\n\n    http-response set-header x-cache hit if { nuster.cache.hit }\n\n## [cache|nosql] nuster.host: string\n\nSame as HAProxy `req.hdr(Host)` except that `nuster.host` can be used in both request and response stage.\n\n## [cache|nosql] nuster.uri: string\n\nSame as HAProxy `capture.req.uri`.\n\n## [cache|nosql] nuster.path: string\n\nSame as HAProxy `path` except that `nuster.path` can be used in both request and response stage.\n\n## [cache|nosql] nuster.query: string\n\nSame as HAProxy `query` except that `nuster.query` can be used in both request and response stage.\n\n# FAQ\n\n## Cannot start: not in master-worker mode\n\nSet `master-worker` in `global` section, or start `nuster` with `-W`.\n\n## How to debug?\n\nStart `nuster` with `-d`.\n\n## What could be the cause of 504 gateway timeout?\n\nPlease check your backend settings. Did you specify a port in the server directive? If set, all connections will\nbe sent to this port. If unset, the same port the client connected to will be used.\n```\nbackend be\n    mode http\n    server s1 10.0.0.3:80\n```\n\n## How to cache POST request?\n\nEnable `option http-buffer-request` and set `body` in cache rule `key`.\n\nBy default, the cache key does not include the body of the request, remember to put `body` in key field.\n\nNote that the size of the request body must be smaller than `tune.bufsize - tune.maxrewrite - request_header_size`, which by default is `16384 - 1024 - request_header_size`.\n\nRefer to **option http-buffer-request** and **tune.bufsize** section in [HAProxy configuration](doc/configuration.txt) for details.\n\nAlso, it might be a good idea to put it separately in a dedicated backend as the example does.\n\n## How to restrict access?\n\nYou can use the powerful HAProxy ACL, something like this\n\n```\nacl network_allowed src 127.0.0.1\nacl purge_method method PURGE\nhttp-request deny if purge_method !network_allowed\n```\n\n## How to enable HTTP2\n\n```\nbind :443 ssl crt pub.pem alpn h2,http/1.1\n```\n\n# Example\n\n```\nglobal\n    nuster manager on uri /_/nuster purge-method MYPURGE\n    nuster cache on data-size 100m\n    nuster nosql on data-size 100m\n    master-worker # since v3\n    # daemon\ndefaults\n    retries 3\n    option redispatch\n    timeout client  30s\n    timeout connect 30s\n    timeout server  30s\nfrontend web1\n    bind *:8080\n    mode http\n    acl pathPost path /search\n    use_backend app1a if pathPost\n    default_backend app1b\nbackend app1a\n    balance roundrobin\n    # mode must be http\n    mode http\n\n    # http-buffer-request must be enabled to cache post request\n    option http-buffer-request\n\n    acl pathPost path /search\n\n    # enable cache for this proxy\n    nuster cache\n\n    # cache /search for 120 seconds. Only works when POST/PUT\n    nuster rule rpost key method.scheme.host.uri.body ttl 120 if pathPost\n\n    server s1 10.0.0.10:8080\nbackend app1b\n    balance     roundrobin\n    mode http\n\n    nuster cache on\n\n    # cache /a.jpg, not expire\n    acl pathA path /a.jpg\n    nuster rule r1 ttl 0 if pathA\n\n    # cache /mypage, key contains cookie[userId], so it will be cached per user\n    acl pathB path /mypage\n    nuster rule r2 key method.scheme.host.path.delimiter.query.cookie_userId ttl 60 if pathB\n\n    # cache /a.html if response's header[cache] is yes\n    http-request set-var(txn.pathC) path\n    acl pathC var(txn.pathC) -m str /a.html\n    acl resHdrCache1 res.hdr(cache) yes\n    nuster rule r3 if pathC resHdrCache1\n\n    # cache /heavy for 100 seconds if be_conn greater than 10\n    acl heavypage path /heavy\n    acl tooFast be_conn ge 100\n    nuster rule heavy ttl 100 if heavypage tooFast\n\n    # cache all if response's header[asdf] is fdsa\n    acl resHdrCache2 res.hdr(asdf)  fdsa\n    nuster rule resCache ttl 0 if resHdrCache1\n\n    server s1 10.0.0.10:8080\n\nfrontend web2\n    bind *:8081\n    mode http\n    default_backend app2\nbackend app2\n    balance     roundrobin\n    mode http\n\n    # disable cache on this proxy\n    nuster cache off\n    nuster rule all\n\n    server s2 10.0.0.11:8080\n\nfrontend nosql_fe\n    bind *:9090\n    default_backend nosql_be\nbackend nosql_be\n    nuster nosql on\n    nuster rule r1 ttl 3600\n```\n\n# Contributing\n\n* Join the development\n* Give feedback\n* Report issues\n* Send pull requests\n* Spread nuster\n\n# License\n\nCopyright (C) 2017-present, [Jiang Wenyuan](https://github.com/jiangwenyuan), < koubunen AT gmail DOT com >\n\nAll rights reserved.\n\nLicensed under GPL, the same as HAProxy\n\nHAProxy and other sources license notices: see relevant individual files.\n"
        },
        {
          "name": "ROADMAP",
          "type": "blob",
          "size": 2.3759765625,
          "content": "Medium-long term wish list - updated 2019/06/15\n\nLegend: '+' = done, '-' = todo, '*' = done except doc\n\n2.1 or later :\n  - return-html code xxx [ file \"xxx\" | text \"xxx\" ] if <acl>\n\n  - return-raw  [ file \"xxx\" | text \"xxx\" ] if <acl>\n\n  - have multi-criteria analysers which subscribe to req flags, rsp flags, and\n    stream interface changes. This would result in a single analyser to wait\n    for the end of data transfer in HTTP.\n\n  - make it possible to condition a timeout on an ACL (dynamic timeouts)\n\n  - forwardfor/originalto except with IPv6\n\n  - tcp-request session expect-proxy {L4|L5} if ...\n\n  - wait on resource (time, mem, CPU, socket, server's conn, server's rate, ...)\n\n  - bandwidth limits\n\n  - buddy servers to build defined lists of failovers. Detect loops during\n    the config check.\n\n          server XXX buddy YYY\n          server YYY    # may replace XXX when XXX fails\n\n  - spare servers : servers which are used in LB only when a minimum farm\n    weight threshold is not satisfied anymore. Useful for inter-site LB with\n    local pref by default.\n\n  - add support for event-triggered epoll, and maybe change all events handling\n    to pass through an event cache to handle temporarily disabled events.\n\n  - evaluate the changes required for multi-process+shared mem or multi-thread\n    +thread-local+fast locking.\n\nOld, maybe obsolete points :\n  - clarify licence by adding a 'MODULE_LICENCE(\"GPL\")' or something equivalent.\n\n  - 3 memory models : failsafe (prealloc), normal (current), optimal (alloc on\n    demand)\n\n  - verify if it would be worth implementing an epoll_ctl_batch() for Linux\n\n  - option minservers XXX : activates some spare servers when active servers\n    are insufficient\n\n  - initcwnd parameter for bind sockets : needed in kernel first\n\n  - have a callback function which would be called after a server is selected,\n    for header post-processing. That would be mainly used to remove then add\n    the server's name or cookie in a header so that the server knows it.\n\nUnsorted :\n  - internal socket for \"server XXX frontend:name\"\n\n  - XML inspection (content-switching for SOAP requests)\n\n  - random cookie generator\n\n  - fastcgi to servers\n\n  - hot config reload\n\n  - RHI - BGP\n\n  - telnet/SSH cli\n\n  - dynamic memory allocation\n\n  - dynamic weights based on check response headers and traffic response time\n\n  - various kernel-level acceleration (multi-accept, ssplice, epoll2...)\n"
        },
        {
          "name": "SUBVERS",
          "type": "blob",
          "size": 0.013671875,
          "content": "-$Format:%h$\n\n"
        },
        {
          "name": "VERDATE",
          "type": "blob",
          "size": 0.0234375,
          "content": "$Format:%ci$\n2021/01/06\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0087890625,
          "content": "2.4-dev5\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "reg-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}