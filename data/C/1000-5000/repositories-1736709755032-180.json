{
  "metadata": {
    "timestamp": 1736709755032,
    "page": 180,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zyantific/zydis",
      "stars": 3530,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.162109375,
          "content": "*.inc  eol=lf encoding=utf-8 linguist-language=C\n*.h    eof=lf encoding=utf-8\n*.c    eof=lf encoding=utf-8\n*.py   eof=lf encoding=utf-8\n*.md   eof=lf encoding=utf-8\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1611328125,
          "content": ".DS_Store\n.vscode\n.idea\n.vs\n__pycache__\n\n/build*\n/msvc/**/*.user\n/msvc/**/obj/\n/msvc/**/bin/\n/doc\n/cmake-build-debug\n/amalgamated-dist\n\n.cache\ncompile_commands.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1044921875,
          "content": "[submodule \"dependencies/zycore\"]\n\tpath = dependencies/zycore\n\turl = https://github.com/zyantific/zycore-c\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 22.2060546875,
          "content": "cmake_minimum_required(VERSION 3.9 FATAL_ERROR)\n\nif (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.15\")\n    # Enable runtime library selection via CMAKE_MSVC_RUNTIME_LIBRARY\n    cmake_policy(SET CMP0091 NEW)\nendif ()\n\nproject(Zydis VERSION 4.0.0.0 LANGUAGES C)\n\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\n# Set ZYDIS_ROOT_PROJECT to ON if this is the top-level project otherwise OFF by default.\nset(ZYDIS_ROOT_PROJECT OFF)\nif(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n    set(ZYDIS_ROOT_PROJECT ON)\nendif()\n\n# =============================================================================================== #\n# Overridable options                                                                             #\n# =============================================================================================== #\n\n# Features\noption(ZYDIS_MINIMAL_MODE\n    \"Enable minimal mode (forces ZYDIS_DECODER_MODE_MINIMAL runtime option)\"\n    OFF)\noption(ZYDIS_FEATURE_DECODER\n    \"Enable instruction decoding functionality\"\n    ON)\noption(ZYDIS_FEATURE_ENCODER\n    \"Enable instruction encoding functionality\"\n    ON)\noption(ZYDIS_FEATURE_FORMATTER\n    \"Enable instruction formatting functionality\"\n    ON)\noption(ZYDIS_FEATURE_AVX512\n    \"Enable support for AVX-512 instructions\"\n    ON)\noption(ZYDIS_FEATURE_KNC\n    \"Enable support for KNC instructions\"\n    ON)\noption(ZYDIS_FEATURE_SEGMENT\n    \"Enable instruction segment API\"\n    ON)\n\n# Build configuration\noption(ZYDIS_BUILD_SHARED_LIB\n    \"Build shared library\"\n    OFF)\noption(ZYDIS_BUILD_EXAMPLES\n    \"Build examples\"\n    ${ZYDIS_ROOT_PROJECT})\noption(ZYDIS_BUILD_TOOLS\n    \"Build tools\"\n    ${ZYDIS_ROOT_PROJECT})\noption(ZYDIS_BUILD_MAN\n    \"Build manpages for the tools (requires Ronn-NG)\"\n    OFF)\noption(ZYDIS_BUILD_DOXYGEN\n    \"Build doxygen documentation (requires Doxygen)\"\n    ${ZYDIS_ROOT_PROJECT})\noption(ZYDIS_BUILD_TESTS\n    \"Build tests\"\n    ${ZYDIS_ROOT_PROJECT})\noption(ZYDIS_FUZZ_AFL_FAST\n    \"Enables AFL persistent mode and reduces prints in ZydisFuzzIn\"\n    OFF)\noption(ZYDIS_LIBFUZZER\n    \"Enables LLVM libfuzzer mode and reduces prints in ZydisFuzzIn\"\n    OFF)\n\n# Dependencies\noption(ZYAN_SYSTEM_ZYCORE\n    \"Force using system installed Zycore library\"\n    OFF)\nset(ZYAN_ZYCORE_PATH\n    \"${CMAKE_CURRENT_LIST_DIR}/dependencies/zycore\"\n    CACHE\n    PATH\n    \"The path to look for Zycore\")\n\n# =============================================================================================== #\n# Dependencies                                                                                    #\n# =============================================================================================== #\n\n# Tries to make Zycore available.\n#\n# Priorities:\n#\n# - ZYAN_ZYCORE_PATH specified path always takes maximum precedence if it exists.\n#   - Default value is the sub-module path. So if the sub-module is present, we pick that.\n#     Allows hacking on Zydis/Zycore even if a Zydis OS package is installed.\n# - Look for a system-installed Zycore package (via find_package).\n# - If git is installed & this is a git repository, try cloning the sub-module.\n# - Give up.\n#\n# This is in a function so we can elegantly early-exit once the library is found.\nfunction (locate_zycore)\n    if (NOT ${ZYAN_SYSTEM_ZYCORE} AND EXISTS \"${ZYAN_ZYCORE_PATH}/CMakeLists.txt\")\n        message(VERBOSE \"Using ZYAN_ZYCORE_PATH specified Zycore\")\n        add_subdirectory(${ZYAN_ZYCORE_PATH} \"zycore\" EXCLUDE_FROM_ALL)\n        return ()\n    endif ()\n\n    if (NOT \"${ZYAN_ZYCORE_PATH}\" STREQUAL \"${CMAKE_CURRENT_LIST_DIR}/dependencies/zycore\")\n        message(FATAL_ERROR \"No CMake project found at explicitly set ZYAN_ZYCORE_PATH\")\n    endif ()\n\n    find_package(Zycore QUIET)\n    if (Zycore_FOUND)\n        message(VERBOSE \"Using system Zycore\")\n        return ()\n    endif ()\n\n    if (ZYAN_SYSTEM_ZYCORE)\n        message(FATAL_ERROR \"ZYAN_SYSTEM_ZYCORE set but no system-installed Zycore found\")\n    endif ()\n\n    find_package(Git QUIET)\n    if(GIT_FOUND AND EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\n        message(VERBOSE \"Pulling Zycore submodule with git.\")\n        execute_process(\n                COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive\n                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n        )\n        add_subdirectory(${ZYAN_ZYCORE_PATH} \"zycore\" EXCLUDE_FROM_ALL)\n        return ()\n    endif()\n\n    message(\n        FATAL_ERROR\n        \"Can't find Zycore. Please make sure to clone the repo recursively.\\n\"\n        \"You can fix this by running\\n\"\n        \"    git submodule update --init\\n\"\n        \"or by cloning using\\n\"\n        \"    git clone --recursive <url>\\n\"\n        \"Alternatively, you can manually clone zycore to some path and set ZYDIS_ZYCORE_PATH.\"\n    )\nendfunction ()\n\nlocate_zycore()\n\n# =============================================================================================== #\n# Library configuration                                                                           #\n# =============================================================================================== #\n\nif (ZYDIS_BUILD_SHARED_LIB)\n    add_library(\"Zydis\" SHARED)\nelse ()\n    add_library(\"Zydis\" STATIC)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_STATIC_BUILD\")\nendif ()\nadd_library(\"Zydis::Zydis\" ALIAS \"Zydis\")\n\ntarget_link_libraries(\"Zydis\" PUBLIC \"Zycore::Zycore\")\ntarget_include_directories(\"Zydis\"\n    PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>\n        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n    PRIVATE \"src\")\ntarget_compile_definitions(\"Zydis\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\nset_target_properties(\"Zydis\" PROPERTIES\n    VERSION \"${Zydis_VERSION}\"\n    SOVERSION \"${Zydis_VERSION_MAJOR}.${Zydis_VERSION_MINOR}\"\n    DEFINE_SYMBOL \"ZYDIS_SHOULD_EXPORT\")\nzyan_set_common_flags(\"Zydis\")\nzyan_maybe_enable_wpo(\"Zydis\")\n\nif (ZYDIS_FEATURE_FORMATTER AND NOT ZYDIS_FEATURE_DECODER)\n    message(\n        FATAL_ERROR\n        \"\\nZYDIS_FEATURE_FORMATTER requires ZYDIS_FEATURE_DECODER to be enabled\"\n    )\nendif ()\n\nif (ZYDIS_FEATURE_ENCODER AND (ZYDIS_MINIMAL_MODE OR\n                               NOT ZYDIS_FEATURE_DECODER OR\n                               NOT ZYDIS_FEATURE_AVX512 OR\n                               NOT ZYDIS_FEATURE_KNC))\n    message(\n        FATAL_ERROR\n        \"\\nZYDIS_FEATURE_ENCODER requires ZYDIS_FEATURE_DECODER in full mode (ZYDIS_MINIMAL_MODE \\\n        disabled) with all ISA extensions (ZYDIS_FEATURE_AVX512 and ZYDIS_FEATURE_KNC enabled)\"\n    )\nendif ()\n\nif (ZYDIS_MINIMAL_MODE)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_MINIMAL_MODE\")\nendif ()\nif (NOT ZYDIS_FEATURE_DECODER)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_DISABLE_DECODER\")\nendif ()\nif (NOT ZYDIS_FEATURE_ENCODER)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_DISABLE_ENCODER\")\nendif ()\nif (NOT ZYDIS_FEATURE_FORMATTER)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_DISABLE_FORMATTER\")\nendif ()\nif (NOT ZYDIS_FEATURE_AVX512)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_DISABLE_AVX512\")\nendif ()\nif (NOT ZYDIS_FEATURE_KNC)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_DISABLE_KNC\")\nendif ()\nif (NOT ZYDIS_FEATURE_SEGMENT)\n    target_compile_definitions(\"Zydis\" PUBLIC \"ZYDIS_DISABLE_SEGMENT\")\nendif ()\n\ntarget_sources(\"Zydis\"\n    PRIVATE\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Defines.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/MetaInfo.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Mnemonic.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Register.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/SharedTypes.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/ShortString.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Status.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Utils.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Zydis.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/SharedData.h\"\n        \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/String.h\"\n        \"src/MetaInfo.c\"\n        \"src/Mnemonic.c\"\n        \"src/Register.c\"\n        \"src/SharedData.c\"\n        \"src/String.c\"\n        \"src/Utils.c\"\n        \"src/Zydis.c\")\n\nif (ZYDIS_FEATURE_DECODER)\n    target_sources(\"Zydis\"\n        PRIVATE\n            \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Decoder.h\"\n            \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/DecoderTypes.h\"\n            \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/DecoderData.h\"\n            \"src/Decoder.c\"\n            \"src/DecoderData.c\")\n    if (ZYDIS_FEATURE_ENCODER)\n        target_sources(\"Zydis\"\n            PRIVATE\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Encoder.h\"\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/EncoderData.h\"\n                \"src/Encoder.c\"\n                \"src/EncoderData.c\")\n    endif ()\n    if (ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))\n        target_sources(\"Zydis\"\n            PRIVATE\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Disassembler.h\"\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Formatter.h\"\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/FormatterBuffer.h\"\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterATT.h\"\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterBase.h\"\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Internal/FormatterIntel.h\"\n                \"src/Disassembler.c\"\n                \"src/Formatter.c\"\n                \"src/FormatterBuffer.c\"\n                \"src/FormatterATT.c\"\n                \"src/FormatterBase.c\"\n                \"src/FormatterIntel.c\")\n    endif ()\n    if (ZYDIS_FEATURE_SEGMENT)\n        target_sources(\"Zydis\"\n            PRIVATE\n                \"${CMAKE_CURRENT_LIST_DIR}/include/Zydis/Segment.h\"\n                \"src/Segment.c\")\n    endif ()\nendif ()\n\nif (ZYDIS_BUILD_SHARED_LIB AND WIN32)\n    target_sources(\"Zydis\" PRIVATE \"resources/VersionInfo.rc\")\nendif ()\n\nzyan_set_source_group(\"Zydis\")\n\nconfigure_package_config_file(cmake/zydis-config.cmake.in\n    \"${CMAKE_CURRENT_BINARY_DIR}/zydis-config.cmake\"\n    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/zydis\"\n)\nwrite_basic_package_version_file(\n    \"${CMAKE_CURRENT_BINARY_DIR}/zydis-config-version.cmake\"\n    COMPATIBILITY SameMajorVersion\n)\ninstall(FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/zydis-config.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/zydis-config-version.cmake\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/zydis\"\n)\n\ninstall(TARGETS \"Zydis\"\n    EXPORT \"zydis-targets\"\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\ninstall(EXPORT \"zydis-targets\"\n    NAMESPACE \"Zydis::\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/zydis\")\ninstall(DIRECTORY \"include/\" DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\nfunction (_maybe_set_emscripten_cfg target)\n    if (EMSCRIPTEN)\n        # Yep, that madness below is how Emscripten likes its quotes.\n        set_target_properties(\"${target}\"\n            PROPERTIES COMPILE_FLAGS\n            \"-s \\\"EXPORT_NAME='${target}'\\\" -s MODULARIZE=1\")\n        set_target_properties(\"${target}\"\n            PROPERTIES LINK_FLAGS_RELEASE\n            \"-s \\\"EXPORT_NAME='${target}'\\\" -s MODULARIZE=1\")\n    endif ()\nendfunction ()\n\nfunction(_add_example target source_file sub_folder)\n    add_executable(\"${target}\" \"examples/${source_file}\")\n    target_link_libraries(\"${target}\" \"Zydis\")\n    set_target_properties(\"${target}\" PROPERTIES FOLDER \"Examples/${sub_folder}\")\n    target_compile_definitions(\"${target}\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\n    zyan_set_common_flags(\"${target}\")\n    zyan_maybe_enable_wpo(\"${target}\")\n    _maybe_set_emscripten_cfg(\"${target}\")\nendfunction()\n\n# =============================================================================================== #\n# Examples                                                                                        #\n# =============================================================================================== #\n\nif (ZYDIS_BUILD_EXAMPLES AND NOT ZYAN_NO_LIBC)\n    if (ZYDIS_FEATURE_DECODER AND ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))\n        _add_example(\"DisassembleSimple\" \"DisassembleSimple.c\" \"Decoder\")\n        _add_example(\"Disassemble\" \"Disassemble.c\" \"Decoder\")\n        _add_example(\"Formatter01\" \"Formatter01.c\" \"Decoder\")\n        _add_example(\"Formatter02\" \"Formatter02.c\" \"Decoder\")\n        _add_example(\"Formatter03\" \"Formatter03.c\" \"Decoder\")\n        _add_example(\"ZydisPerfTest\" \"ZydisPerfTest.c\" \"Decoder\")\n        if (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\"\n                OR ${CMAKE_SYSTEM_NAME} STREQUAL \"FreeBSD\")\n            target_compile_definitions(\"ZydisPerfTest\" PRIVATE \"_GNU_SOURCE\")\n            find_package(Threads REQUIRED)\n            target_link_libraries(\"ZydisPerfTest\" Threads::Threads)\n        endif ()\n    endif ()\n\n    if (ZYDIS_FEATURE_ENCODER)\n        _add_example(\"EncodeMov\" \"EncodeMov.c\" \"Encoder\")\n        _add_example(\"EncodeFromScratch\" \"EncodeFromScratch.c\" \"Encoder\")\n        _add_example(\"RewriteCode\" \"RewriteCode.c\" \"Encoder\")\n    endif ()\nendif ()\n\n# =============================================================================================== #\n# Tools                                                                                           #\n# =============================================================================================== #\n\nif (ZYDIS_BUILD_TOOLS AND NOT ZYAN_NO_LIBC)\n    if (ZYDIS_FEATURE_DECODER AND ZYDIS_FEATURE_FORMATTER AND (NOT ZYDIS_MINIMAL_MODE))\n        add_executable(\"ZydisDisasm\"\n            \"tools/ZydisDisasm.c\"\n            \"tools/ZydisToolsShared.c\"\n            \"tools/ZydisToolsShared.h\")\n        target_link_libraries(\"ZydisDisasm\" \"Zydis\")\n        set_target_properties (\"ZydisDisasm\" PROPERTIES FOLDER \"Tools\")\n        target_compile_definitions(\"ZydisDisasm\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\n        zyan_set_common_flags(\"ZydisDisasm\")\n        zyan_maybe_enable_wpo(\"ZydisDisasm\")\n        _maybe_set_emscripten_cfg(\"ZydisDisasm\")\n        install(TARGETS \"ZydisDisasm\" RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n        add_executable(\"ZydisFuzzDecoder\"\n            \"tools/ZydisFuzzDecoder.c\"\n            \"tools/ZydisFuzzShared.c\"\n            \"tools/ZydisFuzzShared.h\")\n        target_link_libraries(\"ZydisFuzzDecoder\" \"Zydis\")\n        set_target_properties(\"ZydisFuzzDecoder\" PROPERTIES FOLDER \"Tools\")\n        target_compile_definitions(\"ZydisFuzzDecoder\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\n        if (NOT ZYDIS_FEATURE_ENCODER)\n            # For 'ZydisFuzzShared.c'\n            target_compile_definitions(\"ZydisFuzzDecoder\" PUBLIC \"ZYDIS_DISABLE_ENCODER\")\n        endif ()\n        zyan_set_common_flags(\"ZydisFuzzDecoder\")\n        zyan_maybe_enable_wpo(\"ZydisFuzzDecoder\")\n        _maybe_set_emscripten_cfg(\"ZydisFuzzDecoder\")\n        if (ZYDIS_FUZZ_AFL_FAST)\n            target_compile_definitions(\"ZydisFuzzDecoder\" PRIVATE \"ZYDIS_FUZZ_AFL_FAST\")\n        endif ()\n        if (ZYDIS_LIBFUZZER)\n            target_compile_definitions(\"ZydisFuzzDecoder\" PRIVATE \"ZYDIS_LIBFUZZER\")\n        endif ()\n\n        if (ZYDIS_FEATURE_ENCODER)\n            add_executable(\"ZydisFuzzEncoder\"\n                \"tools/ZydisFuzzEncoder.c\"\n                \"tools/ZydisFuzzShared.c\"\n                \"tools/ZydisFuzzShared.h\")\n            target_link_libraries(\"ZydisFuzzEncoder\" \"Zydis\")\n            set_target_properties(\"ZydisFuzzEncoder\" PROPERTIES FOLDER \"Tools\")\n            target_compile_definitions(\"ZydisFuzzEncoder\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\n            zyan_set_common_flags(\"ZydisFuzzEncoder\")\n            zyan_maybe_enable_wpo(\"ZydisFuzzEncoder\")\n            _maybe_set_emscripten_cfg(\"ZydisFuzzEncoder\")\n            if (ZYDIS_FUZZ_AFL_FAST)\n                target_compile_definitions(\"ZydisFuzzEncoder\" PRIVATE \"ZYDIS_FUZZ_AFL_FAST\")\n            endif ()\n            if (ZYDIS_LIBFUZZER)\n                target_compile_definitions(\"ZydisFuzzEncoder\" PRIVATE \"ZYDIS_LIBFUZZER\")\n            endif ()\n\n            add_executable(\"ZydisFuzzReEncoding\"\n                \"tools/ZydisFuzzReEncoding.c\"\n                \"tools/ZydisFuzzShared.c\"\n                \"tools/ZydisFuzzShared.h\")\n            target_link_libraries(\"ZydisFuzzReEncoding\" \"Zydis\")\n            set_target_properties(\"ZydisFuzzReEncoding\" PROPERTIES FOLDER \"Tools\")\n            target_compile_definitions(\"ZydisFuzzReEncoding\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\n            zyan_set_common_flags(\"ZydisFuzzReEncoding\")\n            zyan_maybe_enable_wpo(\"ZydisFuzzReEncoding\")\n            _maybe_set_emscripten_cfg(\"ZydisFuzzReEncoding\")\n            if (ZYDIS_FUZZ_AFL_FAST)\n                target_compile_definitions(\"ZydisFuzzReEncoding\" PRIVATE \"ZYDIS_FUZZ_AFL_FAST\")\n            endif ()\n            if (ZYDIS_LIBFUZZER)\n                target_compile_definitions(\"ZydisFuzzReEncoding\" PRIVATE \"ZYDIS_LIBFUZZER\")\n            endif ()\n\n            if (NOT ZYDIS_BUILD_SHARED_LIB)\n                add_executable(\"ZydisTestEncoderAbsolute\"\n                    \"tools/ZydisTestEncoderAbsolute.c\")\n                target_link_libraries(\"ZydisTestEncoderAbsolute\" \"Zydis\")\n                set_target_properties(\"ZydisTestEncoderAbsolute\" PROPERTIES FOLDER \"Tools\")\n                target_compile_definitions(\"ZydisTestEncoderAbsolute\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\n                zyan_set_common_flags(\"ZydisTestEncoderAbsolute\")\n                zyan_maybe_enable_wpo(\"ZydisTestEncoderAbsolute\")\n                _maybe_set_emscripten_cfg(\"ZydisTestEncoderAbsolute\")\n            endif ()\n        endif ()\n\n        add_executable(\"ZydisInfo\"\n            \"tools/ZydisInfo.c\"\n            \"tools/ZydisToolsShared.c\"\n            \"tools/ZydisToolsShared.h\")\n        target_link_libraries(\"ZydisInfo\" \"Zydis\")\n        set_target_properties (\"ZydisInfo\" PROPERTIES FOLDER \"Tools\")\n        target_compile_definitions(\"ZydisInfo\" PRIVATE \"_CRT_SECURE_NO_WARNINGS\")\n        if (NOT ZYDIS_FEATURE_ENCODER)\n            target_compile_definitions(\"ZydisInfo\" PUBLIC \"ZYDIS_DISABLE_ENCODER\")\n        endif ()\n        zyan_set_common_flags(\"ZydisInfo\")\n        zyan_maybe_enable_wpo(\"ZydisInfo\")\n        _maybe_set_emscripten_cfg(\"ZydisInfo\")\n        install(TARGETS \"ZydisInfo\" RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n    endif ()\nendif ()\n\n# =============================================================================================== #\n# Doxygen documentation                                                                           #\n# =============================================================================================== #\n\nif (ZYDIS_BUILD_DOXYGEN)\n    find_package(Doxygen)\n    if (DOXYGEN_FOUND)\n        # Read Doxygen options from the Doxyfile and set them as CMake variables\n        # to accomodate doxygen_add_docs()\n        file(READ \"Doxyfile\" DOXYFILE)\n        # Remove comments\n        string(REGEX REPLACE \"\\n?#[^\\n]*\\n\" \"\" DOXYFILE ${DOXYFILE})\n        # Remove empty lines\n        string(REGEX REPLACE \"\\n[ \\t\\r\\n]\" \"\\n\" DOXYFILE \"${DOXYFILE}\")\n        # Strip leading and trailing spaces\n        string(STRIP \"${DOXYFILE}\" DOXYFILE)\n        # Tranform the file in a list of '='-separated options\n        string(REPLACE \"\\n\" \";\" DOXYFILE \"${DOXYFILE}\")\n\n        foreach(option IN LISTS DOXYFILE)\n            string(REPLACE \"=\" \";\" option \"${option}\")\n            list(GET option 0 opt_name)\n            list(GET option 1 opt_value)\n            string(STRIP \"${opt_name}\" opt_name)\n            string(STRIP \"${opt_value}\" opt_value)\n\n            if (opt_name STREQUAL \"INPUT\")\n                # Save the INPUTs in a list to be used later\n                string(REGEX REPLACE \"[ ]+\" \";\" DOC_PATHS \"${opt_value}\")\n                # Skip as the input files are not set by a DOXYGEN_INPUT variable\n                continue()\n            endif()\n\n            if (opt_name STREQUAL \"OUTPUT_DIRECTORY\")\n                # Skip as CMake writes the output files in the build directory\n                continue()\n            endif()\n\n            set(\"DOXYGEN_${opt_name}\" ${opt_value})\n        endforeach()\n\n        set(DOXYGEN_QUIET YES)\n        set(DOXYGEN_WARNINGS NO)\n        set(DOXYGEN_WARN_IF_UNDOCUMENTED NO)\n\n        doxygen_add_docs(ZydisDoc ${DOC_PATHS} ALL)\n\n        install(\n            DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/html/\"\n            DESTINATION \"${CMAKE_INSTALL_DOCDIR}/api\"\n            COMPONENT Documentation\n        )\n    else ()\n        message(\"Can't generate documentation, Doxygen not found.\")\n    endif ()\nendif ()\n\n# =============================================================================================== #\n# Manpages                                                                                        #\n# =============================================================================================== #\n\nif (ZYDIS_BUILD_MAN)\n    set(MAN_NAMES \"ZydisDisasm.1\" \"ZydisInfo.1\")\n    find_program(RONN_BIN \"ronn\")\n    foreach(MAN_NAME ${MAN_NAMES})\n        add_custom_command(\n            OUTPUT ${MAN_NAME}\n            COMMAND ${RONN_BIN} ARGS\n                \"--roff\"\n                \"--output-dir=${CMAKE_CURRENT_BINARY_DIR}\"\n                \"${CMAKE_CURRENT_SOURCE_DIR}/man/${MAN_NAME}.ronn\"\n        )\n        install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${MAN_NAME}\" DESTINATION \"${CMAKE_INSTALL_MANDIR}/man1\")\n    endforeach()\n    add_custom_target(man ALL DEPENDS ${MAN_NAMES})\nendif ()\n\n# =============================================================================================== #\n# Tests                                                                                           #\n# =============================================================================================== #\n\nif (ZYDIS_BUILD_TESTS)\n    enable_testing()\n    find_package(Python 3 REQUIRED)\n\n    if (TARGET ZydisInfo)\n        add_test(\n            NAME \"ZydisRegression\"\n            COMMAND \n                \"${Python_EXECUTABLE}\"\n                regression.py\n                test\n                $<TARGET_FILE:ZydisInfo>\n            WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}/tests\"\n        )\n    endif ()\n\n    if (TARGET ZydisFuzzReEncoding AND TARGET ZydisFuzzEncoder AND TARGET ZydisTestEncoderAbsolute)\n        add_test(\n            NAME \"ZydisRegressionEncoder\"\n            COMMAND \n                \"${Python_EXECUTABLE}\"\n                regression_encoder.py\n                $<TARGET_FILE:ZydisFuzzReEncoding>\n                $<TARGET_FILE:ZydisFuzzEncoder>\n                $<TARGET_FILE:ZydisTestEncoderAbsolute>\n            WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}/tests\"\n        )\n    endif ()\nendif ()\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 0.5576171875,
          "content": "# This file is also parsed by CMakelists.txt, please only add one option value\n# per line (i.e. do not split long lines with '\\'), and only use '=' to set values\n\nPROJECT_NAME = Zydis\nPROJECT_NUMBER = v4.0.0\nOUTPUT_DIRECTORY = ./doc\nINPUT = ./include ./README.md ./files.dox\nJAVADOC_AUTOBRIEF = YES\nQT_AUTOBRIEF = YES\nOPTIMIZE_OUTPUT_FOR_C = YES\nTOC_INCLUDE_HEADINGS = 0\nEXTRACT_LOCAL_CLASSES = NO\nHIDE_SCOPE_NAMES = YES\nRECURSIVE = YES\nUSE_MDFILE_AS_MAINPAGE = README.md\nGENERATE_LATEX = NO\nGENERATE_TREEVIEW = YES\nDISABLE_INDEX = NO\nFULL_SIDEBAR = NO\nEXTRACT_ALL = YES\n"
        },
        {
          "name": "Doxyfile.meson.in",
          "type": "blob",
          "size": 1.041015625,
          "content": "@INCLUDE               = \"@TOP_SRCDIR@/Doxyfile\"\nPROJECT_NUMBER         = @VERSION@\nPROJECT_BRIEF          = \"Zyan Disassembler Library\"\nOUTPUT_DIRECTORY       = \"@TOP_BUILDDIR@/doc\"\nSTRIP_FROM_PATH        = \"@TOP_SRCDIR@\"\nSTRIP_FROM_INC_PATH    = \"@ZYCORE_INCLUDE_PATH@\"\nINPUT                  = \"@TOP_SRCDIR@/include\" \\\n                         \"@TOP_SRCDIR@/README.md\" \\\n                         \"@TOP_SRCDIR@/files.dox\"\nEXAMPLE_PATH           = \"@TOP_SRCDIR@/examples\"\nUSE_MDFILE_AS_MAINPAGE = \"@TOP_SRCDIR@/README.md\"\nMACRO_EXPANSION        = YES\nEXPAND_ONLY_PREDEF     = YES\nINCLUDE_PATH           = \"@ZYCORE_INCLUDE_PATH@\"\nPREDEFINED             = @PREDEFINED@\nEXPAND_AS_DEFINED      = ZYAN_BITFIELD\nDOT_COMMON_ATTR        = \"fontname=\\\"sans-serif\\\",fontsize=10\"\nDOT_EDGE_ATTR          = \"labelfontname=\\\"sans-serif\\\",labelfontsize=10\"\nDOT_IMAGE_FORMAT       = svg\nINTERACTIVE_SVG        = YES\nHAVE_DOT               = @HAVE_DOT@\nDOT_MULTI_TARGETS      = @HAVE_DOT_1_8_10@\nDOT_PATH               = \"@DOT_PATH@\"\nHTML_FORMULA_FORMAT    = @HTML_FORMULA_FORMAT@\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.095703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2024 Florian Bernd\nCopyright (c) 2014-2024 Joel Höner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1064453125,
          "content": ".PHONY: build configure install amalgamate clean test doc doc-plain doc-themed clangd\n\nBUILD_DIR ?= build\nCSS_DIR   ?= ../doxygen-awesome-css\n\nbuild: configure\n\tcmake --build $(BUILD_DIR) -j$(nproc)\n\nconfigure: dependencies/zycore/CMakeLists.txt\n\t@if ! command -v cmake > /dev/null; then \\\n\t\techo >&2 \"ERROR: cmake is not installed. Please install it first.\"; \\\n\tfi\n\tcmake -B $(BUILD_DIR) -DZYDIS_BUILD_TESTS=ON\n\ninstall: build\n\tcmake --install $(BUILD_DIR)\n\namalgamate:\n\tassets/amalgamate.py\n\nclean:\n\trm -rf $(BUILD_DIR)\n\trm -rf doc\n\trm -rf amalgamated-dist\n\ntest: build\n\tcd $(BUILD_DIR) && ctest\n\ndoc: configure\n\tcmake --build $(BUILD_DIR) --target ZydisDoc\n\nclangd:\n\tCC=clang cmake -B $(BUILD_DIR)-clangd -DCMAKE_EXPORT_COMPILE_COMMANDS=1; \\\n\tcmake --build $(BUILD_DIR)-clangd -j && \\\n\tmv $(BUILD_DIR)-clangd/compile_commands.json .\n\ndependencies/zycore/CMakeLists.txt:\n\t@if ! command -v git > /dev/null; then \\\n\t\techo >&2 -n \"ERROR: git is not installed. Please either manually place all\"; \\\n\t\techo >&2    \"dependencies in their respective paths or install git first.\"; \\\n\t\texit 1; \\\n\tfi\n\tgit submodule update --init --recursive\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.76953125,
          "content": "<p align=\"center\">\n  <a href=\"https://zydis.re/\">\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/zyantific/zydis/master/assets/img/logo-dark.svg\" width=\"400px\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/zyantific/zydis/master/assets/img/logo-light.svg\" width=\"400px\">\n      <img alt=\"zydis logo\" src=\"https://raw.githubusercontent.com/zyantific/zydis/master/assets/img/logo-dark.svg\" width=\"400px\">\n    </picture>\n  </a>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/badge/License-MIT-blue.svg\" alt=\"License: MIT\">\n  <a href=\"https://github.com/zyantific/zydis/actions\"><img src=\"https://github.com/zyantific/zydis/workflows/CI/badge.svg\" alt=\"GitHub Actions\"></a>\n  <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:zydis\"><img src=\"https://oss-fuzz-build-logs.storage.googleapis.com/badges/zydis.svg\" alt=\"Fuzzing Status\"></a>\n  <a href=\"https://discord.zyantific.com/\"><img src=\"https://img.shields.io/discord/390136917779415060.svg?logo=discord&label=Discord\" alt=\"Discord\"></a>\n</p>\n\n<p align=\"center\">Fast and lightweight x86/x86-64 disassembler and code generation library.</p>\n\n## Features\n\n- Supports all x86 and x86-64 (AMD64) instructions and [extensions](./include/Zydis/Generated/EnumISAExt.h)\n- Optimized for high performance\n- No dynamic memory allocation (\"malloc\")\n- Thread-safe by design\n- Very small file-size overhead compared to other common disassembler libraries\n- [Complete doxygen documentation](https://doc.zydis.re/)\n- Trusted by many major open-source projects\n  - Examples include [x64dbg][zydis-x64dbg], [Mozilla Firefox][zydis-firefox] and [Webkit][zydis-webkit]\n- Absolutely no third party dependencies — not even libc\n  - Should compile on any platform with a working C11 compiler\n  - Tested on Windows, macOS, FreeBSD, Linux and UEFI, both user and kernel mode\n\n[zydis-x64dbg]: https://github.com/x64dbg/x64dbg/tree/729285ef82580812edf7167c41aa6a2c23d8d72d/src/zydis_wrapper\n[zydis-firefox]: https://github.com/mozilla/gecko-dev/tree/3ddbce3c426a55080bd84974444f9ac4869e580b/js/src/zydis\n[zydis-webkit]: https://github.com/WebKit/WebKit/tree/1f2d2a92eeb831bedd01bbb5b694a0e29fa9af81/Source/JavaScriptCore/disassembler/zydis\n\n## Examples\n\n### Disassembler\n\nThe following example program uses Zydis to disassemble a given memory buffer and prints the output to the console.\n\nhttps://github.com/zyantific/zydis/blob/214536a814ba20d2e33d2a907198d1a329aac45c/examples/DisassembleSimple.c#L38-L63\n\nThe above example program generates the following output:\n\n```asm\n007FFFFFFF400000   push rcx\n007FFFFFFF400001   lea eax, [rbp-0x01]\n007FFFFFFF400004   push rax\n007FFFFFFF400005   push qword ptr [rbp+0x0C]\n007FFFFFFF400008   push qword ptr [rbp+0x08]\n007FFFFFFF40000B   call [0x008000007588A5B1]\n007FFFFFFF400011   test eax, eax\n007FFFFFFF400013   js 0x007FFFFFFF42DB15\n```\n\n### Encoder\n\nhttps://github.com/zyantific/zydis/blob/b37076e69f5aa149fde540cae43c50f15a380dfc/examples/EncodeMov.c#L39-L62\n\nThe above example program generates the following output:\n\n```\n48 C7 C0 37 13 00 00\n```\n\n### More Examples\n\nMore examples can be found in the [examples](./examples/) directory of this repository.\n\n## Build\n\nThere are many ways to make Zydis available on your system. The following sub-sections list commonly used options.\n\n### CMake Build\n\n**Platforms:** Windows, macOS, Linux, BSDs\n\nYou can use CMake to build Zydis on all supported platforms. \nInstructions on how to install CMake can be found [here](https://cmake.org/install/).\n\n```bash\ngit clone --recursive 'https://github.com/zyantific/zydis.git'\ncd zydis\ncmake -B build\ncmake --build build -j4\n```\n\n### Visual Studio 2022 project\n\n**Platforms:** Windows\n\nWe manually maintain a [Visual Studio 2022 project](./msvc/) in addition to the CMake build logic.\n\n### CMake generated VS project\n\n**Platforms:** Windows\n\nCMake can be instructed to generate a Visual Studio project for pretty much any VS version. A video guide describing how to use the CMake GUI to generate such project files is available [here](https://www.youtube.com/watch?v=fywLDK1OAtQ). Don't be confused by the apparent use of macOS in the video: Windows is simply running in a virtual machine.\n\n### Amalgamated distribution\n\n**Platforms:** any platform with a working C11 compiler\n\nWe provide an auto-generated single header & single source file variant of Zydis. To use this variant\nof Zydis in your project, all you need to do is to copy these two files into your project. The \namalgamated builds can be found on our [release page](https://github.com/zyantific/zydis/releases)\nas `zydis-amalgamated.tar.gz`.\n\nThese files are generated with the [`amalgamate.py`](./assets/amalgamate.py) script.\n\n### Package managers\n\n**Platforms:** Windows, macOS, Linux, FreeBSD\n\nPre-built headers, shared libraries and executables are available through a variety of package managers.\n\n<details>\n  <summary>Zydis version in various package repositories</summary>\n  \n  [![Packaging status](https://repology.org/badge/vertical-allrepos/zydis.svg)](https://repology.org/project/zydis/versions)\n  \n</details>\n\n| Repository | Install command                            | \n|------------|--------------------------------------------|\n| Arch Linux | `pacman -S zydis`                          |\n| Debian     | `apt-get install libzydis-dev zydis-tools` |\n| Homebrew   | `brew install zydis`                       |\n| NixOS      | `nix-shell -p zydis`                       |\n| Ubuntu     | `apt-get install libzydis-dev zydis-tools` |\n| vcpkg      | `vcpkg install zydis`                      |\n\n## Using Zydis in a CMake project\n\nAn example on how to use Zydis in your own CMake based project [can be found in this repo](https://github.com/zyantific/zydis-submodule-example).\n\n## `ZydisInfo` tool\n\nThe `ZydisInfo` command-line tool can be used to inspect essentially all information \nthat Zydis provides about an instruction.\n\n![ZydisInfo](./assets/screenshots/ZydisInfo.png)\n\n## Bindings\n\nOfficial bindings exist for a selection of languages:\n\n- [Rust](https://github.com/zyantific/zydis-rs)\n- [Python 3](https://github.com/zyantific/zydis-py)\n\n### asmjit-style C++ front-end\n\nIf you're looking for an asmjit-style assembler front-end for the encoder, check out [zasm](https://github.com/zyantific/zasm).\nzasm also provides an idiomatic C++ wrapper around the decoder and formatter interface.\n\n## Versions\n\n### Scheme\n\nVersions follow the [semantic versioning scheme](https://semver.org/). All stability guarantees apply to the API only. ABI stability is provided only between patch versions.\n\n### Branches & Tags\n\n- `master` holds the bleeding edge code of the next, unreleased Zydis version. Increased amounts of bugs and issues must be expected and API stability is not guaranteed outside of tagged commits.\n- Stable and preview versions are annotated with git tags\n  - beta and other preview versions have `-beta`, `-rc`, etc. suffixes\n- `maintenance/v4` points to the code of the latest release of v4\n  - v4 is the latest stable major version and receives feature updates\n- `maintenance/v3` points to the code of the latest release of v3\n  - v3 won't get any feature updates but will receive security updates until 2025\n- `maintenance/v2` points to the code of the last legacy release of v2\n  - v2 is has reached end-of-life and won't receive any security updates\n\n## Credits\n\n- Intel (for open-sourcing [XED](https://github.com/intelxed/xed), allowing for automatic comparison of our tables against theirs, improving both)\n- [LLVM](https://llvm.org) (for providing pretty solid instruction data as well)\n- Christian Ludloff (https://sandpile.org, insanely helpful)\n- [LekoArts](https://www.lekoarts.de/) (for creating the project logo)\n- Our [contributors on GitHub](https://github.com/zyantific/zydis/graphs/contributors)\n\n## Troubleshooting\n\n### `-fPIC` for shared library builds\n\n```\n/usr/bin/ld: ./libfoo.a(foo.c.o): relocation R_X86_64_PC32 against symbol `bar' can not be used when making a shared object; recompile with -fPIC\n```\n\nUnder some circumstances (e.g. when building Zydis as a static library using\nCMake and then using Makefiles to manually link it into a shared library), CMake\nmight fail to detect that relocation information must be emitted. This can be forced\nby passing `-DCMAKE_POSITION_INDEPENDENT_CODE=ON` to the CMake invocation.\n\n## Consulting and Business Support\n\nWe offer consulting services and professional business support for Zydis. If you need a custom extension, require help in integrating Zydis into your product or simply want contractually guaranteed updates and turnaround times, we are happy to assist with that! Please contact us at business@zyantific.com.\n\n## Donations\n\nDonations are collected and distributed using [flobernd](https://github.com/users/flobernd/sponsorship)'s account.\n\n## License\n\nZydis is licensed under the MIT license.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.099609375,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease report security issues to `joel@zyantific.com`"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependencies",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "files.dox",
          "type": "blob",
          "size": 0.2255859375,
          "content": "/** @dir include\n * @brief Top-level include dir\n */\n/** @dir include/Zydis\n * @brief Zydis include dir\n */\n/** @dir include/Zydis/Generated\n * @brief Generated files\n */\n/** @dir include/Zydis/Internal\n * @brief Internal APIs\n */\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 7.267578125,
          "content": "project(\n  'Zydis',\n  'c',\n  version: '4.0.0',\n  license: 'MIT',\n  license_files: 'LICENSE',\n  meson_version: '>=1.3',\n  default_options: [\n    'c_std=c11',\n    'warning_level=3',\n  ],\n)\n\ndatadir = get_option('datadir')\n\nroot = not meson.is_subproject()\n\nminimal = get_option('minimal')\ndecoder = get_option('decoder')\nformatter = get_option('formatter')\navx512 = get_option('avx512')\nknc = get_option('knc')\nsegment = get_option('segment')\nencoder = get_option('encoder')\n\nexamples = get_option('examples')\ntools = get_option('tools')\nman = get_option('man')\ndoc = get_option('doc')\ntests = get_option('tests')\n\nnolibc = get_option('nolibc')\n\n# Auto feature set\nencoder = encoder.enable_auto_if(\n  minimal.disabled()\n  and decoder.allowed()\n  and avx512.allowed()\n  and knc.allowed(),\n)\ndecoder = decoder.enable_auto_if(encoder.enabled())\n\navx512 = avx512.enable_auto_if(encoder.enabled())\nknc = knc.enable_auto_if(encoder.enabled())\nsegment = segment.enable_auto_if(decoder.enabled())\n\nformatter = formatter.enable_auto_if(\n  decoder.enabled(),\n)\n\n# Feature guards\nminimal = minimal.disable_if(encoder.enabled())\ndecoder = decoder.enable_if(encoder.enabled() or formatter.enabled())\navx512 = avx512.enable_if(encoder.enabled())\nknc = knc.enable_if(encoder.enabled())\n\n# Extra targets\nexamples = examples.disable_if(nolibc)\ntools = tools.disable_if(nolibc)\ntests = tests.disable_if(nolibc)\n\nexamples = examples.disable_auto_if(not root).enable_auto_if(root)\ntools = tools.disable_auto_if(not root).enable_auto_if(root)\ntests = tests.disable_auto_if(not root)\nman = man.disable_auto_if(not root)\ndoc = doc.disable_auto_if(not root)\n\ncc = meson.get_compiler('c')\n\nif cc.get_argument_syntax() == 'msvc'\n  if get_option('b_lto')\n    add_project_arguments(\n      '/GL', # -flto\n      language: 'c',\n    )\n    add_project_link_arguments(\n      '/LTCG',\n      language: 'c',\n    )\n  endif\nelif nolibc\n  add_project_arguments(\n    '-fno-stack-protector',\n    language: 'c',\n  )\n  add_project_link_arguments(\n    '-nostdlib',\n    '-nodefaultlibs',\n    language: 'c',\n  )\nendif\n\nif cc.get_linker_id() == 'ld.wasm'\n  emflags = ['-sEXPORT_NAME=\"Zydis\"', '-sMODULARIZE=1']\n  add_project_link_arguments(\n    emflags,\n    language: 'c',\n  )\nendif\n\nzycore_dep = dependency(\n  'zycore',\n  version: '>=1.5.0',\n)\n\npredef = []\n\nif minimal.enabled()\n  predef += 'ZYDIS_MINIMAL_MODE'\nendif\nif decoder.disabled()\n  predef += 'ZYDIS_DISABLE_DECODER'\nendif\nif encoder.disabled()\n  predef += 'ZYDIS_DISABLE_ENCODER'\nendif\nif formatter.disabled()\n  predef += 'ZYDIS_DISABLE_FORMATTER'\nendif\nif avx512.disabled()\n  predef += 'ZYDIS_DISABLE_AVX512'\nendif\nif knc.disabled()\n  predef += 'ZYDIS_DISABLE_KNC'\nendif\nif segment.disabled()\n  predef += 'ZYDIS_DISABLE_SEGMENT'\nendif\n\nforeach def : predef\n  add_project_arguments(f'-D@def@', language: 'c')\nendforeach\n\ninc = include_directories('include')\ninc_private = include_directories('src')\n\nhdrs_common = files(\n  'include/Zydis/Defines.h',\n  'include/Zydis/MetaInfo.h',\n  'include/Zydis/Mnemonic.h',\n  'include/Zydis/Register.h',\n  'include/Zydis/SharedTypes.h',\n  'include/Zydis/ShortString.h',\n  'include/Zydis/Status.h',\n  'include/Zydis/Utils.h',\n  'include/Zydis/Zydis.h',\n)\n\nhdrs_internal = files(\n  'include/Zydis/Internal/SharedData.h',\n  'include/Zydis/Internal/String.h',\n)\n\nsrc = files(\n  'src/MetaInfo.c',\n  'src/Mnemonic.c',\n  'src/Register.c',\n  'src/SharedData.c',\n  'src/String.c',\n  'src/Utils.c',\n  'src/Zydis.c',\n)\n\nif decoder.enabled()\n  hdrs_common += files(\n    'include/Zydis/Decoder.h',\n    'include/Zydis/DecoderTypes.h',\n  )\n  hdrs_internal += files(\n    'include/Zydis/Internal/DecoderData.h',\n  )\n  src += files(\n    'src/Decoder.c',\n    'src/DecoderData.c',\n  )\nendif\n\nif encoder.enabled()\n  hdrs_common += files(\n    'include/Zydis/Encoder.h',\n  )\n  hdrs_internal += files(\n    'include/Zydis/Internal/EncoderData.h',\n  )\n  src += files(\n    'src/Encoder.c',\n    'src/EncoderData.c',\n  )\nendif\n\nif formatter.enabled()\n  hdrs_common += files(\n    'include/Zydis/Disassembler.h',\n    'include/Zydis/Formatter.h',\n    'include/Zydis/FormatterBuffer.h',\n  )\n  hdrs_internal += files(\n    'include/Zydis/Internal/FormatterATT.h',\n    'include/Zydis/Internal/FormatterBase.h',\n    'include/Zydis/Internal/FormatterIntel.h',\n  )\n  src += files(\n    'src/Disassembler.c',\n    'src/Formatter.c',\n    'src/FormatterATT.c',\n    'src/FormatterBase.c',\n    'src/FormatterBuffer.c',\n    'src/FormatterIntel.c',\n  )\nendif\n\nif segment.enabled()\n  hdrs_common += files(\n    'include/Zydis/Segment.h',\n  )\n  src += files(\n    'src/Segment.c',\n  )\nendif\n\nhdrs = hdrs_common + hdrs_internal\n\nif host_machine.system() == 'windows'\n  windows = import('windows')\n  src += windows.compile_resources('resources/VersionInfo.rc')\nendif\n\nzydis_lib = library(\n  'Zydis',\n  src + hdrs,\n  c_static_args: ['-DZYDIS_STATIC_BUILD'],\n  c_shared_args: ['-DZYDIS_SHOULD_EXPORT'],\n  include_directories: [inc, inc_private],\n  implicit_include_directories: false,\n  dependencies: [zycore_dep],\n  version: meson.project_version(),\n  install: true,\n)\n\ninstall_headers(hdrs_common, subdir: 'Zydis')\ninstall_headers(hdrs_internal, subdir: 'Zydis/Internal')\n\n# Note: on MSVC, define ZYDIS_STATIC_BUILD and ZYCORE_STATIC_BUILD accordingly\n# in the user project.\nzydis_dep = declare_dependency(\n  include_directories: inc,\n  link_with: zydis_lib,\n  dependencies: [zycore_dep],\n)\n\npkg = import('pkgconfig')\npkg.generate(\n  zydis_lib,\n  name: 'zydis',\n  description: 'Zyan Disassembler Library',\n  url: 'https://github.com/zyantific/zydis',\n)\n\nmeson.override_dependency('zydis', zydis_dep)\n\nsubdir('examples')\nsubdir('tools')\nsubdir('tests')\n\ndoxygen_exe = find_program('doxygen', required: doc)\ndoc_req = doxygen_exe.found()\nif doc_req\n  cdata = configuration_data()\n  cdata.set('VERSION', meson.project_version())\n  cdata.set('TOP_SRCDIR', meson.project_source_root())\n  cdata.set('TOP_BUILDDIR', meson.project_build_root())\n\n  dot_exe = find_program('dot', required: false)\n  if dot_exe.found()\n    cdata.set('HAVE_DOT', 'YES')\n    cdata.set('DOT_PATH', dot_exe.full_path())\n    cdata.set(\n      'HAVE_DOT_1_8_10',\n      dot_exe.version().version_compare('>=1.8.10') ? 'YES' : 'NO',\n    )\n  else\n    cdata.set('HAVE_DOT', 'NO')\n  endif\n\n  if find_program('pdf2svg', required: false).found() or find_program('inkscape', required: false).found()\n    cdata.set('HTML_FORMULA_FORMAT', 'svg')\n  else\n    cdata.set('HTML_FORMULA_FORMAT', 'png')\n  endif\n\n  cdata.set('PREDEFINED', ' '.join(predef))\n  cdata.set(\n    'ZYCORE_INCLUDE_PATH',\n    # We don't care if the directory exists or not\n    meson.project_source_root() / 'subprojects/zycore/include',\n  )\n\n  doxyfile = configure_file(\n    input: 'Doxyfile.meson.in',\n    output: 'Doxyfile',\n    configuration: cdata,\n    install: false,\n  )\n\n  custom_target(\n    'ZydisDoc',\n    input: doxyfile,\n    output: 'doc',\n    command: [doxygen_exe, doxyfile],\n    depend_files: [hdrs, files('Doxyfile')],\n    install: true,\n    install_dir: datadir / 'doc' / 'Zydis',\n  )\n\n  summary(\n    {\n      'dot': cdata.get('HAVE_DOT') == 'YES',\n      'formula format': cdata.get('HTML_FORMULA_FORMAT'),\n    },\n    section: 'Doxygen',\n  )\nendif\n\nsubdir('man')\n\nsummary(\n  {\n    'doc': doc_req,\n    'nolibc': nolibc,\n    'minimal': minimal,\n    'decoder': decoder,\n    'formatter': formatter,\n    'avx512': avx512,\n    'knc': knc,\n    'segment': segment,\n    'encoder': encoder,\n  },\n  section: 'Features',\n)\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 1.62109375,
          "content": "option(\n  'minimal',\n  type: 'feature',\n  value: 'disabled',\n  description: 'Enable minimal mode (forces ZYDIS_DECODER_MODE_MINIMAL runtime option)',\n)\noption(\n  'decoder',\n  type: 'feature',\n  value: 'auto',\n  description: 'Enable instruction decoding functionality',\n)\noption(\n  'encoder',\n  type: 'feature',\n  value: 'auto',\n  description: 'Enable instruction encoding functionality',\n)\noption(\n  'formatter',\n  type: 'feature',\n  value: 'auto',\n  description: 'Enable instruction formatting functionality',\n)\noption(\n  'avx512',\n  type: 'feature',\n  value: 'auto',\n  description: 'Enable support for AVX-512 instructions',\n)\noption(\n  'knc',\n  type: 'feature',\n  value: 'auto',\n  description: 'Enable support for KNC instructions',\n)\noption(\n  'segment',\n  type: 'feature',\n  value: 'auto',\n  description: 'Enable instruction segment API',\n)\n\noption(\n  'examples',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build examples',\n)\noption(\n  'tools',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build tools',\n)\noption(\n  'man',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build manpages for the tools (requires Ronn-NG)',\n)\noption(\n  'doc',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build doxygen documentation (requires Doxygen)',\n)\noption(\n  'tests',\n  type: 'feature',\n  value: 'auto',\n  description: 'Build tests',\n)\n\noption(\n  'nolibc',\n  type: 'boolean',\n  value: false,\n  description: 'Do not use any C standard library functions (for exotic build-envs like kernel drivers)',\n)\n\noption(\n  'llvm-fuzz',\n  type: 'boolean',\n  value: false,\n  description: 'Enables LLVM libfuzzer mode and reduces prints in ZydisFuzzIn',\n)\n"
        },
        {
          "name": "msvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "blob",
          "size": 0.0126953125,
          "content": "dependencies/"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}