{
  "metadata": {
    "timestamp": 1736709941446,
    "page": 479,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "recp/cglm",
      "stars": 2393,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "*.h linguist-language=C\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.853515625,
          "content": "*.xcodeproj\n*.xcworkspace\n*.sln\n*.vcxproj\n*.vcxproj.*\n*.suo\n*.sdf\n*.opensdf\nipch/\nDebug/\nRelease/\n.DS_Store\n.vs\n*.nupkg\n*.opendb\npackages.config\n/aclocal.m4\n/ar-lib\n/autom4te.cache/\n/compile\n/config.guess\n/config.log\n/config.status\n/config.sub\n/configure\n/depcomp\n/install-sh\n/ltmain.sh\n/missing\n/libtool\n/.libs/\n.deps/\n*.[oa]\n*.l[oa]\nMakefile\nMakefile.in\nm4/*.m4\n.buildstamp\n.dirstamp\npackages/\n.anjuta/*\n*.anjuta*\nconfig.h.*\n/config.h\nstamp*\nCOPYING\n.idea/*\n*.VC.db\ncscope.*\n*-git-ignored-file.*\ntest/*.trs\ntest/test_*\n*.log\ntest/.libs/*\ntest/tests\ncglm_arm/*\ncglm_test_ios/*\ncglm_test_iosTests/*\ndocs/build/*\nwin/cglm_test_*\n* copy.*\n*.o\n*.obj\n*codeanalysis.*.xml\n*codeanalysis.xml\n*.lib\n*.tlog\nwin/x64\nwin/x85\nwin/Debug\ncglm-test-ios*\n/cglm.pc\ntest-driver\nDefault-568h@2x.png\nbuild/\nconftest.dir/*\nconfdefs.h\n*.xcuserdatad\n.idea\ncmake-build-debug\n*.o.tmp\nxcode/*\n.vscode"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.076171875,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#   - pdf\n#   - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\n# python:\n#   install:\n#     - requirements: docs/requirements.txt\n\npython:\n  install:\n    - requirements: docs/requirements.txt"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.0322265625,
          "content": "language: c\n\nos:\n  - linux\n  - osx\n\narch:\n  - amd64\n  - ppc64le\n  - s390x\n  - arm64\n\nsudo: required\ndist: trusty\n\ncompiler:\n  - clang\n  - gcc\n\nmatrix:\n  fast_finish: true\n  exclude:\n    # Skip GCC builds on macOS.\n    - os: osx\n      compiler: gcc\n  include:\n    # Additional GCC builds for code coverage.\n    - os: linux\n      compiler: gcc\n      env: CODE_COVERAGE=ON\n\ncache:\n  apt: true\n\naddons:\n  apt:\n    packages:\n      - clang-3.6\n      - lcov\n\nbranches:\n  only:\n    - master\n\nscript:\n  - sh ./autogen.sh\n  - if [[ \"$CC\" == \"gcc\" && \"$CODE_COVERAGE\" == \"ON\" ]]; then\n      ./configure CFLAGS=\"-ftest-coverage -fprofile-arcs -coverage\";\n    else\n      ./configure;\n    fi\n  - make\n  - make check\n\nafter_success:\n  - if [[ \"$CC\" == \"gcc\" && \"$CODE_COVERAGE\" == \"ON\" ]]; then\n      pip install --user cpp-coveralls &&\n      coveralls\n        --build-root .\n        --exclude lib\n        --exclude test\n        --gcov-options '\\-lp'\n        --verbose &&\n      bash <(curl -s https://codecov.io/bash);\n    fi\n\n# after_failure:\n#   - cat ./test-suite.log\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 4.896484375,
          "content": "# Building the library\n\ncglm can be built using one of the following build systems:\n\n## CMake (All platforms)\n```bash\n$ mkdir build\n$ cd build\n$ cmake .. # [Optional] -DCGLM_SHARED=ON\n$ make\n$ sudo make install # [Optional]\n```\n\n### Options with defaults\n\n```CMake\noption(CGLM_SHARED \"Shared build\" ON)\noption(CGLM_STATIC \"Static build\" OFF)\noption(CGLM_USE_C99 \"\" OFF) # C11 \noption(CGLM_USE_TEST \"Enable Tests\" OFF) # for make check - make test\n```\n\n### Including in a CMake project\n\n#### Header only\n\nThis requires no building or installation of cglm.\n\n* Example:\n\n``` cmake\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(<Your Project Name>)\n\nadd_executable(${PROJECT_NAME} src/main.c)\ntarget_link_libraries(${LIBRARY_NAME} PRIVATE\n  cglm_headers)\n\nadd_subdirectory(external/cglm/ EXCLUDE_FROM_ALL)\n```\n\n#### Linked\n\n* Example:\n```cmake\ncmake_minimum_required(VERSION 3.8.2)\n\nproject(<Your Project Name>)\n\nadd_executable(${PROJECT_NAME} src/main.c)\ntarget_link_libraries(${LIBRARY_NAME} PRIVATE\n  cglm)\n\nadd_subdirectory(external/cglm/)\n\n# or you can use find_package to configure cglm\n```\n\n### Using CMake to build for WebAssembly\n\nSince math functions like `sinf` are used, this can not be targeted at `wasm32-unknown-unknown`, one of [wasi-sdk](https://github.com/WebAssembly/wasi-sdk) or [emscripten](https://github.com/emscripten-core/emsdk) should be used.\n\nShould note that shared build is not yet supported for WebAssembly.\n\nFor [simd128](https://github.com/WebAssembly/simd) support, add `-msimd128` to `CMAKE_C_FLAGS`, in command line `-DCMAKE_C_FLAGS=\"-msimd128\"`.\n\nFor tests, the cmake option `CGLM_USE_TEST` would still work, you'll need a wasi runtime for running tests, see our [ci config file](.github/workflows/cmake-wasm.yml) for a detailed example.\n\n#### WASI SDK\n\n```bash\n$ cmake .. \\\n  -DCMAKE_TOOLCHAIN_FILE=/path/to/wasi-sdk-19.0/share/cmake/wasi-sdk.cmake \\\n  -DWASI_SDK_PREFIX=/path/to/wasi-sdk-19.0\n```\n\nWhere `/path/to/wasi-sdk-19.0/` is the path to extracted [wasi sdk](https://github.com/WebAssembly/wasi-sdk).\n\nIn this case it would by default make a static build.\n\n#### Emscripten\n\n```bash\n$ emcmake cmake .. \\\n  -DCMAKE_EXE_LINKER_FLAGS=\"-s STANDALONE_WASM\" \\\n  -DCGLM_STATIC=ON\n```\n\nThe `emcmake` here is the cmake wrapper for Emscripten from installed [emsdk](https://github.com/emscripten-core/emsdk).\n\n## Meson (All platforms)\n\n```bash\n$ meson build # [Optional] --default-library=static\n$ cd build\n$ ninja\n$ sudo ninja install # [Optional]\n```\n\n### Options with Defaults:\n\n```meson\nc_std=c11\nbuildtype=release\ndefault_library=shared\nbuild_tests=true # to run tests: ninja test\n```\n### Including in a Meson project\n* Example:\n```meson\n# Clone cglm or create a cglm.wrap under <source_root>/subprojects\nproject('name', 'c')\n\ncglm_dep = dependency('cglm', fallback : 'cglm', 'cglm_dep')\n\nexecutable('exe', 'src/main.c', dependencies : cglm_dep)\n```\n\n## Swift (Swift Package Manager)\n\nCurrently only default build options are supported. Add **cglm** dependency to your project:\n\n```swift\n...\nPackage( \n  ...\n  dependencies: [\n    ...\n    .package(url: \"https://github.com/recp/cglm\", .branch(\"master\")),\n  ]\n  ...\n)\n```\n\nNow add **cgml** as a dependency to your target. Product choices are:\n- **cglm** for inlined version of the library which can be linked only statically\n- **cglmc** for a compiled version of the library with no linking limitation\n\n```swift\n...\n.target(\n  ...\n  dependencies: [\n    ...\n    .product(name: \"cglm\", package: \"cglm\"),\n  ]\n  ...\n)\n...\n```\n\n## Unix (Autotools)\n\n```bash\n$ sh autogen.sh\n$ ./configure\n$ make\n$ make check # [Optional]\n$ [sudo] make install # [Optional]\n```\n\nThis will also install pkg-config files so you can use\n`pkg-config --cflags cglm` and `pkg-config --libs cglm` to retrieve compiler\nand linker flags.\n\nThe files will be installed into the given prefix (usually `/usr/local` by\ndefault on Linux), but your pkg-config may not be configured to actually check\nthere. You can figure out where it's looking by running `pkg-config --variable\npc_path pkg-config` and change the path the files are installed to via\n`./configure --with-pkgconfigdir=/your/path`. Alternatively, you can add the\nprefix path to your `PKG_CONFIG_PATH` environment variable.\n\n## Windows (MSBuild)\nWindows related build file and project files are located in `win` folder,\nmake sure you are inside `cglm/win` folder.\nCode Analysis is enabled, so it may take awhile to build.\n\n```Powershell\n$ cd win\n$ .\\build.bat\n```\nif `msbuild` won't work (because of multi version VS) then try to build with `devenv`:\n```Powershell\n$ devenv cglm.sln /Build Release\n```\n\n### Running Tests on Windows\n\nYou can see test project in same visual studio solution file. It is enough to run that project to run tests.\n\n# Building the documentation\nFirst you need install Sphinx: http://www.sphinx-doc.org/en/master/usage/installation.html\nthen:\n```bash\n$ cd docs\n$ sphinx-build source build\n```\nit will compile docs into build folder, you can run index.html inside that function."
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.0390625,
          "content": "cmake_minimum_required(VERSION 3.13)\nproject(cglm\n  VERSION 0.9.5\n  HOMEPAGE_URL https://github.com/recp/cglm\n  DESCRIPTION \"OpenGL Mathematics (glm) for C\"\n  LANGUAGES C\n)\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_C_STANDARD_REQUIRED YES)\nset(DEFAULT_BUILD_TYPE \"Release\")\n\nset(CGLM_BUILD)\noption(CGLM_SHARED \"Shared build\" ON)\noption(CGLM_STATIC \"Static build\" OFF)\noption(CGLM_USE_C99 \"\" OFF)\noption(CGLM_USE_TEST \"Enable Tests\" OFF)\n\nif(CMAKE_SYSTEM_NAME STREQUAL WASI)\n  set(CGLM_STATIC ON CACHE BOOL \"Static option\" FORCE)\n  set(CGLM_SHARED OFF CACHE BOOL \"Shared option\" FORCE)\nendif()\n\nif(NOT CGLM_STATIC AND CGLM_SHARED)\n  set(CGLM_BUILD SHARED)\nelse(CGLM_STATIC)\n  set(CGLM_BUILD STATIC)\nendif()\n\nif(CGLM_USE_C99)\n  set(CMAKE_C_STANDARD 99)\nendif()\n\nif(MSVC)\n  add_definitions(-D_WINDOWS -D_USRDLL)\n\n  if(NOT CMAKE_BUILD_TYPE MATCHES Debug)\n    add_definitions(-DNDEBUG)\n    add_compile_options(/W3 /Ox /Gy /Oi /TC)\n    foreach(flag_var\n        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\n      string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" ${flag_var} \"${${flag_var}}\")\n    endforeach(flag_var)\n  endif()\nelse()\n  add_compile_options(-Wall)\n\n  if(NOT CMAKE_BUILD_TYPE MATCHES Debug)\n    add_compile_options(-O3)\n  endif()\nendif()\n\nget_directory_property(hasParent PARENT_DIRECTORY)\n\nif(NOT hasParent AND NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to '${DEFAULT_BUILD_TYPE}' as none was specified.\")\n  set(CMAKE_BUILD_TYPE \"${DEFAULT_BUILD_TYPE}\" CACHE STRING \"Choose the type of build.\" FORCE)\n  # Set the possible values of build type for cmake-gui\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n\ninclude(GNUInstallDirs)\n\nset(CPACK_PROJECT_NAME ${PROJECT_NAME})\nset(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\n\nif(NOT CPack_CMake_INCLUDED)\n  include(CPack)\nendif()\n\n# Target Start\nadd_library(${PROJECT_NAME}\n  ${CGLM_BUILD}\n  src/euler.c\n  src/affine.c\n  src/io.c\n  src/quat.c\n  src/cam.c\n  src/vec2.c\n  src/ivec2.c\n  src/vec3.c\n  src/ivec3.c\n  src/vec4.c\n  src/ivec4.c\n  src/mat2.c\n  src/mat2x3.c\n  src/mat2x4.c\n  src/mat3.c\n  src/mat3x2.c\n  src/mat3x4.c\n  src/mat4.c\n  src/mat4x2.c\n  src/mat4x3.c\n  src/plane.c\n  src/frustum.c\n  src/box.c\n  src/project.c\n  src/sphere.c\n  src/ease.c\n  src/curve.c\n  src/bezier.c\n  src/ray.c\n  src/affine2d.c\n  src/clipspace/ortho_lh_no.c\n  src/clipspace/ortho_lh_zo.c\n  src/clipspace/ortho_rh_no.c\n  src/clipspace/ortho_rh_zo.c\n  src/clipspace/persp_lh_no.c\n  src/clipspace/persp_lh_zo.c\n  src/clipspace/persp_rh_no.c\n  src/clipspace/persp_rh_zo.c\n  src/clipspace/view_lh_no.c\n  src/clipspace/view_lh_zo.c\n  src/clipspace/view_rh_no.c\n  src/clipspace/view_rh_zo.c\n  src/clipspace/project_no.c\n  src/clipspace/project_zo.c\n  )\n\nif(CGLM_SHARED)\n  add_definitions(-DCGLM_EXPORTS)\nelse()\n  target_compile_definitions(${PROJECT_NAME} PUBLIC -DCGLM_STATIC)\nendif()\n\nset_target_properties(${PROJECT_NAME} PROPERTIES\n                              VERSION ${PROJECT_VERSION} \n                            SOVERSION ${PROJECT_VERSION_MAJOR})\n\nif(WIN32)\n  # Because SOVERSION has no effect to file naming on Windows\n  set_target_properties(${PROJECT_NAME} PROPERTIES\n    RUNTIME_OUTPUT_NAME ${PROJECT_NAME}-${PROJECT_VERSION_MAJOR})\nendif()\n\ntarget_include_directories(${PROJECT_NAME}\n    PUBLIC \n        $<INSTALL_INTERFACE:include>    \n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    PRIVATE\n        ${CMAKE_CURRENT_SOURCE_DIR}/src\n)\n\n# Target for header-only usage\nadd_library(${PROJECT_NAME}_headers INTERFACE)\ntarget_include_directories(${PROJECT_NAME}_headers INTERFACE\n  ${CMAKE_CURRENT_SOURCE_DIR}/include)\n\n# Test Configuration\nif(CGLM_USE_TEST)\n  include(CTest)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\n# Install \ninstall(TARGETS ${PROJECT_NAME}\n        EXPORT  ${PROJECT_NAME}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n\ninstall(DIRECTORY include/${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n        PATTERN \".*\" EXCLUDE)\n\n# Config\nexport(TARGETS ${PROJECT_NAME}\n       NAMESPACE ${PROJECT_NAME}::\n       FILE \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n)\n\ninstall(EXPORT      ${PROJECT_NAME}\n        FILE        \"${PROJECT_NAME}Config.cmake\"\n        NAMESPACE   ${PROJECT_NAME}::\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\nset(PACKAGE_NAME ${PROJECT_NAME})\nset(prefix ${CMAKE_INSTALL_PREFIX})\nset(exec_prefix ${CMAKE_INSTALL_PREFIX})\nif (IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  set(includedir \"${CMAKE_INSTALL_INCLUDEDIR}\")\nelse()\n  set(includedir \"\\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}\")\nendif()\nif (IS_ABSOLUTE \"${CMAKE_INSTALL_LIBDIR}\")\n  set(libdir \"${CMAKE_INSTALL_LIBDIR}\")\nelse()\n  set(libdir \"\\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}\")\nendif()\nset(PACKAGE_VERSION \"${PROJECT_VERSION}\")\nconfigure_file(cglm.pc.in cglm.pc @ONLY)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/cglm.pc\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.53125,
          "content": "# CONTRIBUTING\n\nAny contributions (code, documentation, ...) are welcome.\n\n# New Features\n- This library may not accept all new features, it is better to create an issue and get approval before coding\n- You must add test for every new feature\n- The feature must be compiled on both UNIX/POSIX systems (e.g. macos, linux...) and Windows\n\n# Code Style\nThis library is written with C99, don't try to add C++ files (yes it can compiled into lib),\nif you have enough reason to add C++ files than create an issue and get approval before coding,\n\n- All functions must have `glm` prefix\n- Lines should be wrapped at 80 characters.\n- Don't invent new style for existing ones\n- Use C89 style comments (`/* comments */`) not C++ style comments (`// comments`)\n- Don't use TABs instead use 2 spaces for TABs\n- All indents must be 2 spaces, not 1 nor 4 space\n- All functions in `include` folder must be exported by `CGLM_EXPORT` and wrapped by `extern \"C\" {` for C++\n- Crate new line for return type, attribs:\n\n```C\nCGLM_INLINE\nvoid\nglm_mul(mat4 m1, mat4 m2, mat4 dest)\n```\n\nnot acceptable:\n\n```C\nCGLM_INLINE void glm_mul(mat4 m1, mat4 m2, mat4 dest)\n```\n- Variables must be declared at the top of a scope before usage:\n```C\nint x;\nint y;\n\nx = y = 0;\n```\n\nnot acceptable:\n\n```C\nint x;\n\nx = 0;\nint y = 0;\n```\n\n- All files must retain same LICENSE statement\n- Code with warnings will not be accepted, please suppress them (not by disabling them)\n- Run code anaylysis before submitting pull requests, if you use Xcode you can enable Sanitizer in scheme, you can use valgrind in linux\n"
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 3.205078125,
          "content": "This library [initially] used some [piece of] implementations\n(may include codes) from these open source projects/resources:\n\n1. Initial Affine Transforms\nThe original glm repo (g-truc), url: https://github.com/g-truc/glm\n\nLICENSE[S]:\n  The Happy Bunny License (Modified MIT License)\n  The MIT License\n  Copyright (c) 2005 - 2016 G-Truc Creation\n\nFULL LICENSE: https://github.com/g-truc/glm/blob/master/copying.txt\n\n2. Initial Quaternions\nAnton's OpenGL 4 Tutorials book source code:\n\nLICENSE:\n  OpenGL 4 Example Code.\n  Accompanies written series \"Anton's OpenGL 4 Tutorials\"\n  Email: anton at antongerdelan dot net\n  First version 27 Jan 2014\n  Copyright Dr Anton Gerdelan, Trinity College Dublin, Ireland.\n\n3. Euler Angles\n  David Eberly\n  Geometric Tools, LLC http://www.geometrictools.com/\n  Copyright (c) 1998-2016. All Rights Reserved.\n\n  Computing Euler angles from a rotation matrix (euler.pdf)\n  Gregory G. Slabaugh\n\n4. Extracting Planes\nFast Extraction of Viewing Frustum Planes from the World-View-Projection Matrix\nAuthors:\n  Gil Gribb (ggribb@ravensoft.com)\n  Klaus Hartmann (k_hartmann@osnabrueck.netsurf.de)\n\n5. Transform AABB\nTransform Axis Aligned Bounding Boxes:\nhttp://dev.theomader.com/transform-bounding-boxes/\nhttps://github.com/erich666/GraphicsGems/blob/master/gems/TransBox.c\n\n6. Cull frustum\nhttp://www.txutxi.com/?p=584\nhttp://old.cescg.org/CESCG-2002/DSykoraJJelinek/\n\n7. Quaternions\nInitial mat4_quat is borrowed from Apple's simd library\n\n8. Vector Rotation using Quaternion\nhttps://gamedev.stackexchange.com/questions/28395/rotating-vector3-by-a-quaternion\n\n9. Sphere AABB intersect\nhttps://github.com/erich666/GraphicsGems/blob/master/gems/BoxSphere.c\n\n10. Horizontal add\nhttps://stackoverflow.com/questions/6996764/fastest-way-to-do-horizontal-float-vector-sum-on-x86\n\n11. de casteljau implementation and comments\nhttps://forums.khronos.org/showthread.php/10264-Animations-in-1-4-1-release-notes-revision-A/page2?highlight=bezier\nhttps://forums.khronos.org/showthread.php/10644-Animation-Bezier-interpolation\nhttps://forums.khronos.org/showthread.php/10387-2D-Tangents-in-Bezier-Splines?p=34164&viewfull=1#post34164\nhttps://forums.khronos.org/showthread.php/10651-Animation-TCB-Spline-Interpolation-in-COLLADA?highlight=bezier\n\n12. vec2 cross product\nhttp://allenchou.net/2013/07/cross-product-of-2d-vectors/\n\n13. Ray triangle intersect\nMöller–Trumbore ray-triangle intersection algorithm, from \"Fast, Minimum Storage Ray/Triangle Intersection\"\nAuthors:\n  Thomas Möller (tompa@clarus.se)\n  Ben Trumbore (wbt@graphics.cornell.edu)\nLink to paper: http://webserver2.tecgraf.puc-rio.br/~mgattass/cg/trbRR/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf\n\n14. ARM NEON: Matrix Vector Multiplication\nhttps://stackoverflow.com/a/57793352/2676533\n\n16. ARM NEON Div\n\nhttp://github.com/microsoft/DirectXMath\n\n17. Pick Matrix\n\nglu project -> project.c\n\n18. Ray sphere intersection\n\nRAY TRACING GEMS\nHIGH-QUALITY AND REAL-TIME RENDERING WITH DXR AND OTHER APIS\n\nCHAPTER 7\nPrecision Improvements for Ray/Sphere Intersection\nEric Haines (1), Johannes Günther (2), and Tomas Akenine-Möller (1)\n  (1) NVIDIA\n  (2) Intel\n\nWyman, C., and Haines, E. Getting Started with RTX Ray Tracing.\nhttps://github.com/NVIDIAGameWorks/GettingStartedWithRTXRayTracing\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Recep Aslantas <info@recp.me>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 12.67578125,
          "content": "#******************************************************************************\n# Copyright (c), Recep Aslantas.                                              *\n#                                                                             *\n# MIT License (MIT), http://opensource.org/licenses/MIT                       *\n# Full license can be found in the LICENSE file                               *\n#                                                                             *\n#******************************************************************************\n\nACLOCAL_AMFLAGS = -I m4\nAM_CFLAGS = -Wall \\\n            -std=gnu11 \\\n            -O3 \\\n            -Wstrict-aliasing=2 \\\n            -fstrict-aliasing\n\nlib_LTLIBRARIES = libcglm.la\nlibcglm_la_LDFLAGS = -no-undefined -version-info 0:1:0\n\ncheckLDFLAGS = -L./.libs \\\n               -lm \\\n               -lcglm\ncheckCFLAGS = $(AM_CFLAGS) \\\n               -std=gnu11 \\\n               -O3 \\\n               -DCGLM_DEFINE_PRINTS \\\n               -I./include\n\ncheck_PROGRAMS = test/tests\nTESTS = $(check_PROGRAMS)\n\ntest_tests_LDFLAGS = $(checkLDFLAGS)\ntest_tests_CFLAGS  = $(checkCFLAGS)\n\ncglmdir=$(includedir)/cglm\ncglm_HEADERS = include/cglm/version.h \\\n               include/cglm/common.h \\\n               include/cglm/types.h \\\n               include/cglm/types-struct.h \\\n               include/cglm/cglm.h \\\n               include/cglm/call.h \\\n               include/cglm/struct.h \\\n               include/cglm/cam.h \\\n               include/cglm/io.h \\\n               include/cglm/mat4.h \\\n               include/cglm/mat4x2.h \\\n               include/cglm/mat4x3.h \\\n               include/cglm/mat3.h \\\n               include/cglm/mat3x2.h \\\n               include/cglm/mat3x4.h \\\n               include/cglm/mat2.h \\\n               include/cglm/mat2x3.h \\\n               include/cglm/mat2x4.h \\\n               include/cglm/affine-pre.h \\\n               include/cglm/affine-post.h \\\n               include/cglm/affine.h \\\n               include/cglm/affine-mat.h \\\n               include/cglm/vec2.h \\\n               include/cglm/vec2-ext.h \\\n               include/cglm/ivec2.h \\\n               include/cglm/vec3.h \\\n               include/cglm/vec3-ext.h \\\n               include/cglm/ivec3.h \\\n               include/cglm/vec4.h \\\n               include/cglm/vec4-ext.h \\\n               include/cglm/ivec4.h \\\n               include/cglm/euler.h \\\n               include/cglm/util.h \\\n               include/cglm/quat.h \\\n               include/cglm/plane.h \\\n               include/cglm/frustum.h \\\n               include/cglm/box.h \\\n               include/cglm/aabb2d.h \\\n               include/cglm/color.h \\\n               include/cglm/project.h \\\n               include/cglm/sphere.h \\\n               include/cglm/ease.h \\\n               include/cglm/curve.h \\\n               include/cglm/bezier.h \\\n               include/cglm/applesimd.h \\\n               include/cglm/ray.h \\\n               include/cglm/affine2d.h\n\ncglm_clipspacedir=$(includedir)/cglm/clipspace\ncglm_clipspace_HEADERS = include/cglm/clipspace/persp.h \\\n                         include/cglm/clipspace/persp_lh_no.h \\\n                         include/cglm/clipspace/persp_lh_zo.h \\\n                         include/cglm/clipspace/persp_rh_no.h \\\n                         include/cglm/clipspace/persp_rh_zo.h \\\n                         include/cglm/clipspace/ortho_lh_no.h \\\n                         include/cglm/clipspace/ortho_lh_zo.h \\\n                         include/cglm/clipspace/ortho_rh_no.h \\\n                         include/cglm/clipspace/ortho_rh_zo.h \\\n                         include/cglm/clipspace/view_lh.h \\\n                         include/cglm/clipspace/view_rh.h \\\n                         include/cglm/clipspace/view_lh_no.h \\\n                         include/cglm/clipspace/view_lh_zo.h \\\n                         include/cglm/clipspace/view_rh_no.h \\\n                         include/cglm/clipspace/view_rh_zo.h \\\n                         include/cglm/clipspace/project_no.h \\\n                         include/cglm/clipspace/project_zo.h\n\ncglm_calldir=$(includedir)/cglm/call\ncglm_call_HEADERS = include/cglm/call/mat4.h \\\n                    include/cglm/call/mat4x2.h \\\n                    include/cglm/call/mat4x3.h \\\n                    include/cglm/call/mat3.h \\\n                    include/cglm/call/mat3x2.h \\\n                    include/cglm/call/mat3x4.h \\\n                    include/cglm/call/mat2.h \\\n                    include/cglm/call/mat2x3.h \\\n                    include/cglm/call/mat2x4.h \\\n                    include/cglm/call/vec2.h \\\n                    include/cglm/call/vec3.h \\\n                    include/cglm/call/vec4.h \\\n                    include/cglm/call/ivec2.h \\\n                    include/cglm/call/ivec3.h \\\n                    include/cglm/call/ivec4.h \\\n                    include/cglm/call/io.h \\\n                    include/cglm/call/cam.h \\\n                    include/cglm/call/quat.h \\\n                    include/cglm/call/euler.h \\\n                    include/cglm/call/plane.h \\\n                    include/cglm/call/frustum.h \\\n                    include/cglm/call/box.h \\\n                    include/cglm/call/project.h \\\n                    include/cglm/call/sphere.h \\\n                    include/cglm/call/ease.h \\\n                    include/cglm/call/curve.h \\\n                    include/cglm/call/bezier.h \\\n                    include/cglm/call/ray.h \\\n                    include/cglm/call/affine.h \\\n                    include/cglm/call/affine2d.h\n\ncglm_call_clipspacedir=$(includedir)/cglm/call/clipspace\ncglm_call_clipspace_HEADERS = include/cglm/call/clipspace/persp_lh_no.h \\\n                              include/cglm/call/clipspace/persp_lh_zo.h \\\n                              include/cglm/call/clipspace/persp_rh_no.h \\\n                              include/cglm/call/clipspace/persp_rh_zo.h \\\n                              include/cglm/call/clipspace/ortho_lh_no.h \\\n                              include/cglm/call/clipspace/ortho_lh_zo.h \\\n                              include/cglm/call/clipspace/ortho_rh_no.h \\\n                              include/cglm/call/clipspace/ortho_rh_zo.h \\\n                              include/cglm/call/clipspace/view_lh_no.h \\\n                              include/cglm/call/clipspace/view_lh_zo.h \\\n                              include/cglm/call/clipspace/view_rh_no.h \\\n                              include/cglm/call/clipspace/view_rh_zo.h \\\n                              include/cglm/call/clipspace/project_no.h \\\n                              include/cglm/call/clipspace/project_zo.h\n\ncglm_simddir=$(includedir)/cglm/simd\ncglm_simd_HEADERS = include/cglm/simd/intrin.h \\\n                    include/cglm/simd/x86.h \\\n                    include/cglm/simd/arm.h \\\n                    include/cglm/simd/wasm.h\n\ncglm_simd_sse2dir=$(includedir)/cglm/simd/sse2\ncglm_simd_sse2_HEADERS = include/cglm/simd/sse2/affine.h \\\n                         include/cglm/simd/sse2/mat4.h \\\n                         include/cglm/simd/sse2/mat3.h \\\n                         include/cglm/simd/sse2/mat2.h \\\n                         include/cglm/simd/sse2/quat.h\n\ncglm_simd_avxdir=$(includedir)/cglm/simd/avx\ncglm_simd_avx_HEADERS = include/cglm/simd/avx/mat4.h \\\n                        include/cglm/simd/avx/affine.h\n\ncglm_simd_neondir=$(includedir)/cglm/simd/neon\ncglm_simd_neon_HEADERS = include/cglm/simd/neon/affine.h \\\n                         include/cglm/simd/neon/mat2.h \\\n                         include/cglm/simd/neon/mat4.h \\\n                         include/cglm/simd/neon/quat.h\n\ncglm_simd_wasmdir=$(includedir)/cglm/simd/wasm\ncglm_simd_wasm_HEADERS = include/cglm/simd/wasm/affine.h \\\n                         include/cglm/simd/wasm/mat2.h \\\n                         include/cglm/simd/wasm/mat3.h \\\n                         include/cglm/simd/wasm/mat4.h \\\n                         include/cglm/simd/wasm/quat.h\n\ncglm_handeddir=$(includedir)/cglm/handed\ncglm_handed_HEADERS = include/cglm/handed/euler_to_quat_lh.h \\\n                      include/cglm/handed/euler_to_quat_rh.h\n\ncglm_structdir=$(includedir)/cglm/struct\ncglm_struct_HEADERS = include/cglm/struct/mat4.h \\\n                      include/cglm/struct/mat4x2.h \\\n                      include/cglm/struct/mat4x3.h \\\n                      include/cglm/struct/mat3.h \\\n                      include/cglm/struct/mat3x2.h \\\n                      include/cglm/struct/mat3x4.h \\\n                      include/cglm/struct/mat2.h \\\n                      include/cglm/struct/mat2x3.h \\\n                      include/cglm/struct/mat2x4.h \\\n                      include/cglm/struct/affine-pre.h \\\n                      include/cglm/struct/affine-post.h \\\n                      include/cglm/struct/affine-mat.h \\\n                      include/cglm/struct/affine.h \\\n                      include/cglm/struct/affine2d.h \\\n                      include/cglm/struct/vec2.h \\\n                      include/cglm/struct/vec2-ext.h \\\n                      include/cglm/struct/ivec2.h \\\n                      include/cglm/struct/vec3.h \\\n                      include/cglm/struct/vec3-ext.h \\\n                      include/cglm/struct/ivec3.h \\\n                      include/cglm/struct/vec4.h \\\n                      include/cglm/struct/vec4-ext.h \\\n                      include/cglm/struct/ivec4.h \\\n                      include/cglm/struct/io.h \\\n                      include/cglm/struct/cam.h \\\n                      include/cglm/struct/quat.h \\\n                      include/cglm/struct/euler.h \\\n                      include/cglm/struct/plane.h \\\n                      include/cglm/struct/frustum.h \\\n                      include/cglm/struct/box.h \\\n                      include/cglm/struct/aabb2d.h \\\n                      include/cglm/struct/project.h \\\n                      include/cglm/struct/sphere.h \\\n                      include/cglm/struct/color.h \\\n                      include/cglm/struct/curve.h \\\n                      include/cglm/struct/ray.h\n\ncglm_struct_clipspacedir=$(includedir)/cglm/struct/clipspace\ncglm_struct_clipspace_HEADERS = include/cglm/struct/clipspace/persp_lh_no.h \\\n                                include/cglm/struct/clipspace/persp_lh_zo.h \\\n                                include/cglm/struct/clipspace/persp_rh_no.h \\\n                                include/cglm/struct/clipspace/persp_rh_zo.h \\\n                                include/cglm/struct/clipspace/ortho_lh_no.h \\\n                                include/cglm/struct/clipspace/ortho_lh_zo.h \\\n                                include/cglm/struct/clipspace/ortho_rh_no.h \\\n                                include/cglm/struct/clipspace/ortho_rh_zo.h \\\n                                include/cglm/struct/clipspace/view_lh_no.h \\\n                                include/cglm/struct/clipspace/view_lh_zo.h \\\n                                include/cglm/struct/clipspace/view_rh_no.h \\\n                                include/cglm/struct/clipspace/view_rh_zo.h \\\n                                include/cglm/struct/clipspace/project_no.h \\\n                                include/cglm/struct/clipspace/project_zo.h\n\ncglm_struct_handeddir=$(includedir)/cglm/struct/handed\ncglm_struct_handed_HEADERS = include/cglm/struct/handed/euler_to_quat_lh.h \\\n                             include/cglm/struct/handed/euler_to_quat_rh.h\n\nlibcglm_la_SOURCES=\\\n    src/euler.c \\\n    src/affine.c \\\n    src/io.c \\\n    src/quat.c \\\n    src/cam.c \\\n    src/vec2.c \\\n    src/ivec2.c \\\n    src/vec3.c \\\n    src/ivec3.c \\\n    src/vec4.c \\\n    src/ivec4.c \\\n    src/mat2.c \\\n    src/mat2x3.c \\\n    src/mat2x4.c \\\n    src/mat3.c \\\n    src/mat3x2.c \\\n    src/mat3x4.c \\\n    src/mat4.c \\\n    src/mat4x2.c \\\n    src/mat4x3.c \\\n    src/plane.c \\\n    src/frustum.c \\\n    src/box.c \\\n    src/project.c \\\n    src/sphere.c \\\n    src/ease.c \\\n    src/curve.c \\\n    src/bezier.c \\\n    src/ray.c \\\n    src/affine2d.c \\\n    src/clipspace/ortho_lh_no.c \\\n    src/clipspace/ortho_lh_zo.c \\\n    src/clipspace/ortho_rh_no.c \\\n    src/clipspace/ortho_rh_zo.c \\\n    src/clipspace/persp_lh_no.c \\\n    src/clipspace/persp_lh_zo.c \\\n    src/clipspace/persp_rh_no.c \\\n    src/clipspace/persp_rh_zo.c \\\n    src/clipspace/view_lh_no.c \\\n    src/clipspace/view_lh_zo.c \\\n    src/clipspace/view_rh_no.c \\\n    src/clipspace/view_rh_zo.c \\\n    src/clipspace/project_no.c \\\n    src/clipspace/project_zo.c\n    \ntest_tests_SOURCES=\\\n    test/runner.c \\\n    test/src/test_common.c \\\n    test/src/tests.c \\\n    test/src/test_clamp.c \\\n    test/src/test_euler.c \\\n    test/src/test_bezier.c \\\n    test/src/test_struct.c\n\npkgconfig_DATA=cglm.pc\n\n# When running configure with --prefix, $VPATH references\n# the source directory that post-build.sh is in. When not\n# using a prefix, $VPATH will be unset, so we need to fall\n# back to using . to run the script.\n#export VPATH\n\n# all-local:\n#\tsh $${VPATH:-.}/post-build.sh\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 1.0078125,
          "content": "// swift-tools-version:5.2\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"cglm\",\n    products: [\n        .library(name: \"cglm\", type: .static, targets: [\"cglmHeader\"]),\n        .library(name: \"cglmc\", targets: [\"cglmCompiled\"]),\n    ],\n    dependencies: [],\n    targets: [\n        .target(\n            name: \"cglmCompiled\",\n            path: \"./\",\n            exclude: [\n                \"./docs\",\n                \"./src/swift\",\n                \"./include\",\n                \"./test\",\n                \"./win\",\n            ],\n            sources: [\n                \"./src\",\n            ],\n            publicHeadersPath: \"./include\"\n        ),\n        .target(\n            name: \"cglmHeader\",\n            path: \"./\",\n            exclude: [\n                \"./docs\",\n                \"./include\",\n                \"./test\",\n                \"./win\",\n            ],\n            sources: [\n                \"./src/swift\",\n            ],\n            publicHeadersPath: \"./include\"\n        ),\n    ],\n    cLanguageStandard: .c11\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.734375,
          "content": "# 🎥 OpenGL Mathematics (glm) for `C`\n\n<p align=\"center\">\n   <img alt=\"\" src=\"cglm.png\" width=\"550\" />\n</p>\n<br>\n<p align=\"center\">\n    <a href=\"https://github.com/recp/cglm/actions/workflows/ci.yml\">\n        <img src=\"https://github.com/recp/cglm/actions/workflows/ci.yml/badge.svg\"\n             alt=\"Build Status\">\n    </a>\n    <a href=\"http://cglm.readthedocs.io/en/latest/?badge=latest\">\n        <img src=\"https://readthedocs.org/projects/cglm/badge/?version=latest\"\n             alt=\"Documentation Status\">\n    </a>\n    <a href=\"https://www.codacy.com/app/recp/cglm?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=recp/cglm&amp;utm_campaign=Badge_Grade\">\n        <img src=\"https://api.codacy.com/project/badge/Grade/6a62b37d5f214f178ebef269dc4a6bf1\"\n             alt=\"Codacy Badge\"/>\n    </a>\n    <a href=\"https://coveralls.io/github/recp/cglm?branch=master\">\n        <img src=\"https://coveralls.io/repos/github/recp/cglm/badge.svg?branch=master\"\n             alt=\"Coverage Status\"/>\n    </a>\n    <a href=\"https://codecov.io/gh/recp/cglm\">\n        <img src=\"https://codecov.io/gh/recp/cglm/branch/master/graph/badge.svg\"\n             alt=\"Coverage Status\"/>\n    </a>\n    <br /><br />\n    <a href=\"#sponsors\">\n        <img src=\"https://opencollective.com/cglm/sponsors/badge.svg\"\n             alt=\"Sponsors on Open Collective\"/>\n    </a>\n    <a href=\"#backers\">\n        <img src=\"https://opencollective.com/cglm/backers/badge.svg\"\n             alt=\"Backers on Open Collective\"/>\n    </a>\n</p>\n\n<br>\n\n<p align=\"center\">\nA highly optimized 2D|3D math library. Also known as OpenGL Mathematics (glm) for C. <b>cglm</b> provides fast and ergonomic math functions to ease graphics programming. It is community friendly – feel free to report any bugs and issues you face. <br>\n<i>If you're using C++, you might want to check out <a href=\"https://github.com/g-truc/glm\">GLM</a></i>\n</p>\n\n - Allocation-free\n - Header-only\n - SIMD-optimized\n - API-agnostic\n\n---\n\n### 📚 Documentation\n\nAll functions and their parameters are documented above their declaration inside their corresponding headers. <br />\nAlternatively, you can read the complete documentation [here](http://cglm.readthedocs.io).\n\n### 🔨 Building\n\ncglm can be used in it's entirety as a header-only library simply by including `cglm/cglm.h`. If you wish to link against it instead, it can be built using one of the supported build systems. Detailed information about building on individual platforms and build systems along with the instructions for building the documentation can be found in [BUILDING.md](./BUILDING.md).\n\n### ✅ Usage\n\n#### Header-only\n\nInclude the `cglm/cglm.h` header and use functions with the `glm_` prefix.\n```c\n#include \"cglm/cglm.h\"\n\n// ...\n\nvec2 vector;\nglm_vec2_zero(vector);\n```\n\n#### Struct API\n\nInclude `cglm/struct.h` and use `glms_`.\n```c\n#include \"cglm/struct.h\"\n\n// ...\n\nvec2s vector = glms_vec2_zero();\n```\n\n#### Linked\n\nInclude `cglm/call.h` and use `glmc_`.\n```c\n#include \"cglm/call.h\"\n\n// ...\n\nvec2 vector;\nglmc_vec2_zero(vector);\n```\n\n### ❗ Alignment\n\nWhile cglm by default aligns what's necessary, it is possible to disable this by defining `CGLM_ALL_UNALIGNED`. If you're targeting machines with any kind of SIMD support, make sure that all `vec4`, `mat4` and `mat2` arguments you pass to cglm functions are aligned to prevent unexpected crashes, alternatively use the unaligned versions if present. \n\n### Struct API\n\nThe struct API works as follows (note the `s` suffix on types, `glms_` prefix on functions and `GLMS_` on constants):\n\n```C\n#include <cglm/struct.h>\n\nmat4s mat = GLMS_MAT4_IDENTITY_INIT;\nmat4s inv = glms_mat4_inv(mat);\n```\n\nStruct functions generally take parameters *by copy* and *return* the results rather than taking pointers and writing to out parameters. That means your variables can usually be `const`, if you're into that.\n\nThe types used are actually unions that allow access to the same data in multiple ways. One of these involves anonymous structures available since C11. MSVC supports them in earlier versions out of the box and GCC/Clang as well if you enable `-fms-extensions`.\nTo explicitly enable anonymous structures `#define CGLM_USE_ANONYMOUS_STRUCT 1`, or `0` to disable them.\nFor backwards compatibility, you can also `#define CGLM_NO_ANONYMOUS_STRUCT` to disable them. If you don't specify explicitly, cglm will attempt a best guess based on your compiler and C version.\n\n### 📌 Migration notes:\n\n- `_dup` (duplicate) functions were renamed to `_copy`. For instance: `glm_vec_dup` -> `glm_vec3_copy`.\n- OpenGL related functions were dropped to make cglm API independent.\n- **[bugfix]** Euler angles had been previously implemented in reverse order (extrinsic). This was fixed to be intrinsic.\n- **[major change]** Starting with **v0.4.0**, quaternions are stored as [x, y, z, w]. Previously it was [w, x, y, z].\n- **[api rename]** Starting with **v0.4.5**, `glm_simd_` functions are renamed to `glmm_`.\n- **[new option]** Starting with **v0.4.5**, alignment requirements can be disabled. Read more in the documentation.  \n- **[major change]** Starting with **v0.5.0**, vec3 functions occupy the **glm_vec3_** namespace. This used to be **glm_vec_** in earlier versions.\n- **[major change]** Starting with **v0.5.1**, `vec3` and `mat3` types are not aligned by default.\n- **[major change]** Starting with **v0.7.3**, inline print functions are disabled by default in release mode to eliminate printing costs (see the Options chapter of the docs). <br> Colored output can be disabled (see documentation).\n- **[major change]** Starting with **v0.8.3**, alternate clipspace configurations are supported. The `CGLM_FORCE_DEPTH_ZERO_TO_ONE` and `CGLM_FORCE_LEFT_HANDED` flags are provided to control clip depth and handedness. This makes it easier to incorporate cglm into projects using graphics APIs such as Vulkan or Metal. See https://cglm.readthedocs.io/en/latest/opt.html#clipspace-option-s\n\n### 🚀 Features\n\n- scalar and simd (sse, avx, neon...) optimizations\n- general purpose matrix operations (mat4, mat3)\n- chain matrix multiplication (square only)\n- general purpose vector operations (cross, dot, rotate, proj, angle...)\n- affine transformations\n- matrix decomposition (extract rotation, scaling factor)\n- optimized affine transform matrices (mul, rigid-body inverse)\n- camera (lookat)\n- projections (ortho, perspective)\n- quaternions\n- euler angles / yaw-pitch-roll to matrix\n- extract euler angles\n- frustum (extract view frustum planes, corners...)\n- bounding box (AABB in Frustum (culling), crop, merge...)\n- bounding sphere\n- project, unproject\n- easing functions\n- curves\n- curve interpolation helpers (SMC, deCasteljau...)\n- comversion helpers from cglm types to Apple's simd library to pass cglm types to Metal GL without packing them on both sides\n- ray intersection helpers\n---\n\n<table>\n  <tbody>\n    <tr>\n      <td>\n        <div>Like other graphics libraries (especially OpenGL), cglm uses column-major layout to keep matrices in memory. </div>\n        <div>&nbsp;</div>\n        <div>While we might support row-major matrices in the future, currently if you need your matrices to be in row-major layout you have to transpose them. </div>\n      </td>\n      <td>\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/3/3f/Matrix_Columns.svg\" width=\"300px\" />\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n---\n\ncglm contains general purpose mat4 product and inverse functions but also provides optimized versions for affine transformations. If you want to multiply two affine transformation matrices you can use glm_mul instead of glm_mat4_mul and glm_inv_tr (ROT + TR) instead glm_mat4_inv.\n```C\n/* multiplication */\nmat4 modelMat;\nglm_mul(T, R, modelMat);\n\n/* othonormal rot + tr matrix inverse (rigid-body) */\nglm_inv_tr(modelMat);\n```\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)]\n<a href=\"https://github.com/recp/cglm/graphs/contributors\"><img src=\"https://opencollective.com/cglm/contributors.svg?width=890&button=false\" /></a>\n\n\n## Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/cglm#backer)]\n\n<a href=\"https://opencollective.com/cglm#backers\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/backers.svg?width=890\"></a>\n\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/cglm#sponsor)]\n\n<a href=\"https://opencollective.com/cglm/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/cglm/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/cglm/sponsor/9/avatar.svg\"></a>\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-minimal"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.3037109375,
          "content": "#! /bin/sh\n#\n# Copyright (c), Recep Aslantas.\n#\n# MIT License (MIT), http://opensource.org/licenses/MIT\n# Full license can be found in the LICENSE file\n#\n\ncd $(dirname \"$0\")\n\nautoheader\n\nif [ \"$(uname)\" = \"Darwin\" ]; then\n  glibtoolize\nelse\n  libtoolize\nfi\n\naclocal -I m4\nautoconf\nautomake --add-missing --copy\n"
        },
        {
          "name": "cglm.pc.in",
          "type": "blob",
          "size": 0.2587890625,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: @PACKAGE_NAME@\nDescription: OpenGL Mathematics (glm) for C\nURL: https://github.com/recp/cglm\nVersion: @PACKAGE_VERSION@\nCflags: -I${includedir}\nLibs: -L${libdir} -lcglm @LIBS@\n"
        },
        {
          "name": "cglm.png",
          "type": "blob",
          "size": 378.537109375,
          "content": null
        },
        {
          "name": "cglm.podspec",
          "type": "blob",
          "size": 1.2578125,
          "content": "Pod::Spec.new do |s|\n\n  # Description\n  s.name         = \"cglm\"\n  s.version      = \"0.9.4\"\n  s.summary      = \"📽 Highly Optimized Graphics Math (glm) for C\"\n  s.description  = <<-DESC\ncglm is math library for graphics programming for C. See the documentation or README for all features.\n                   DESC\n\n  s.documentation_url = \"http://cglm.readthedocs.io\"\n\n  # Home\n  s.homepage     = \"https://github.com/recp/cglm\"\n  s.license      = { :type => \"MIT\", :file => \"LICENSE\" }\n  s.author       = { \"Recep Aslantas\" => \"recp@acm.org\" }\n\n  # Sources\n  s.source               = { :git => \"https://github.com/recp/cglm.git\", :tag => \"v#{s.version}\" }\n  s.source_files         = \"src\", \"include/cglm/**/*.h\"\n  s.public_header_files  = \"include\", \"include/cglm/**/*.h\"\n  s.exclude_files        = \"src/win/*\", \"src/dllmain.c\", \"src/**/*.h\"\n  s.preserve_paths       = \"include\", \"src\"\n  s.header_mappings_dir  = \"include\"\n\n  # Linking\n  s.library = \"m\"\n\n  # Configuration\n  s.pod_target_xcconfig = {\n    'CLANG_ENABLE_MODULES' => 'NO',\n    'CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES' => 'YES',\n    'CLANG_WARN_DOCUMENTATION_COMMENTS' => 'NO',\n    'GCC_C_LANGUAGE_STANDARD' => 'gnu11',\n    'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) GLM_TESTS_NO_COLORFUL_OUTPUT'\n  }\nend\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 2.0419921875,
          "content": "#*****************************************************************************\n# Copyright (c), Recep Aslantas.                                             *\n#                                                                            *\n# MIT License (MIT), http://opensource.org/licenses/MIT                      *\n# Full license can be found in the LICENSE file                              *\n#                                                                            *\n#*****************************************************************************\n\nAC_PREREQ([2.69])\nAC_INIT([cglm], [0.9.5], [info@recp.me])\nAM_INIT_AUTOMAKE([-Wall foreign subdir-objects serial-tests])\n\n# Don't use the default cflags (-O2 -g), we set ours manually in Makefile.am.\n: ${CFLAGS=\"\"}\n\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_SRCDIR([src/])\nAC_CONFIG_HEADERS([config.h])\n\n# Dependencies for pkg-config.\nPKG_PROG_PKG_CONFIG\n# Ancient versions of pkg-config (such as the one used in Travis CI)\n# don't have this macro, so we need to do it manually.\nm4_ifdef([PKG_INSTALLDIR], [\n    PKG_INSTALLDIR\n], [\n    AC_ARG_WITH([pkgconfigdir],\n        [AS_HELP_STRING([--with-pkgconfigdir],\n                        [pkg-config installation directory ['${libdir}/pkgconfig']])],,\n        [with_pkgconfigdir=]'${libdir}/pkgconfig')\n    AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])\n])\n\n# Checks for programs.\nAC_PROG_CC\nAM_PROG_CC_C_O\n\nAC_PROG_INSTALL\nAM_PROG_AR\n\nAC_ENABLE_SHARED\nAC_ENABLE_STATIC\n\nLT_INIT\n\n# Checks for libraries.\nAC_CHECK_LIB([m], [floor])\n\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\nAC_SYS_LARGEFILE\n\n# Checks for header files.\nAC_CHECK_HEADERS([limits.h \\\n                  stddef.h \\\n                  stdint.h \\\n                  stdlib.h \\\n                  string.h ])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_CHECK_HEADER_STDBOOL\nAC_C_INLINE\nAC_TYPE_INT32_T\nAC_TYPE_INT64_T\nAC_TYPE_SIZE_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_UINT8_T\n\n# Checks for library functions.\nAC_FUNC_ERROR_AT_LINE\n\nAC_CONFIG_FILES([Makefile cglm.pc])\n\nAC_OUTPUT\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 3.2685546875,
          "content": "project('cglm', 'c',\r\n    version : '0.9.5',\r\n    license : 'mit',\r\n    default_options : [\r\n        'c_std=c11',\r\n        'warning_level=2',\r\n        'buildtype=release'\r\n    ]\r\n)\r\n\r\ncc = meson.get_compiler('c')\r\n\r\ncglm_install = get_option('install')\r\ncglm_deps = cc.find_library('m', required : false)\r\n\r\ncglm_args = []\r\nbuild_args = []\r\n\r\nif get_option('default_library') == 'static'\r\n    cglm_args += '-DCGLM_STATIC'\r\nendif\r\n\r\nif cc.compiles(\r\n    'int *test(char *p) { return (int*)__builtin_assume_aligned(p, 4); }',\r\n    name : '__builtin_assume_aligned test')\r\n    cglm_args += '-DCGLM_HAVE_BUILTIN_ASSUME_ALIGNED=1'\r\nelse\r\n    cglm_args += '-DCGLM_HAVE_BUILTIN_ASSUME_ALIGNED=0'\r\nendif\r\n\r\nif host_machine.system() == 'windows'\r\n    build_args += '-DCGLM_EXPORTS'\r\nendif\r\n\r\ncglm_inc = include_directories('include')\r\n\r\ncglm_src = files(\r\n    'src/euler.c',\r\n    'src/affine.c',\r\n    'src/io.c',\r\n    'src/quat.c',\r\n    'src/cam.c',\r\n    'src/vec2.c',\r\n    'src/ivec2.c',\r\n    'src/vec3.c',\r\n    'src/ivec3.c',\r\n    'src/vec4.c',\r\n    'src/ivec4.c',\r\n    'src/mat2.c',\r\n    'src/mat2x3.c',\r\n    'src/mat2x4.c',\r\n    'src/mat3.c',\r\n    'src/mat3x2.c',\r\n    'src/mat3x4.c',\r\n    'src/mat4.c',\r\n    'src/mat4x2.c',\r\n    'src/mat4x3.c',\r\n    'src/plane.c',\r\n    'src/frustum.c',\r\n    'src/box.c',\r\n    'src/project.c',\r\n    'src/sphere.c',\r\n    'src/ease.c',\r\n    'src/curve.c',\r\n    'src/bezier.c',\r\n    'src/ray.c',\r\n    'src/affine2d.c',\r\n    'src/clipspace/ortho_lh_no.c',\r\n    'src/clipspace/ortho_lh_zo.c',\r\n    'src/clipspace/ortho_rh_no.c',\r\n    'src/clipspace/ortho_rh_zo.c',\r\n    'src/clipspace/persp_lh_no.c',\r\n    'src/clipspace/persp_lh_zo.c',\r\n    'src/clipspace/persp_rh_no.c',\r\n    'src/clipspace/persp_rh_zo.c',\r\n    'src/clipspace/view_lh_no.c',\r\n    'src/clipspace/view_lh_zo.c',\r\n    'src/clipspace/view_rh_no.c',\r\n    'src/clipspace/view_rh_zo.c',\r\n    'src/clipspace/project_no.c',\r\n    'src/clipspace/project_zo.c'\r\n)\r\n\r\ncglm_lib = library('cglm',\r\n    cglm_src,\r\n    install : cglm_install,\r\n    dependencies : cglm_deps,\r\n    c_args : [ build_args, cglm_args ],\r\n    version : meson.project_version(),\r\n    soversion : '0',\r\n    build_by_default: not meson.is_subproject()\r\n)\r\n\r\ncglm_dep = declare_dependency(\r\n    link_with : cglm_lib,\r\n    dependencies : cglm_deps,\r\n    compile_args : cglm_args,\r\n    include_directories : cglm_inc,\r\n    version : meson.project_version()\r\n)\r\n\r\nif meson.version().version_compare('>= 0.54.0')\r\n    meson.override_dependency('cglm', cglm_dep)\r\nendif\r\n\r\nif cglm_install\r\n    install_subdir('include/cglm', install_dir : get_option('includedir'))\r\n\r\n    pkg = import('pkgconfig')\r\n    pkg.generate(\r\n        name : 'cglm',\r\n        libraries : cglm_lib,\r\n        extra_cflags : cglm_args,\r\n        version : meson.project_version(),\r\n        url : 'https://github.com/recp/cglm',\r\n        description : 'OpenGL Mathematics (glm) for C'\r\n    )\r\nendif\r\n\r\nif get_option('build_tests') == true\r\n\r\ntest_src = files(\r\n    'test/runner.c',\r\n    'test/src/test_bezier.c',\r\n    'test/src/test_clamp.c',\r\n    'test/src/test_common.c',\r\n    'test/src/test_euler.c',\r\n    'test/src/tests.c',\r\n    'test/src/test_struct.c',\r\n)\r\n\r\ntest_exe = executable('tests',\r\n    test_src,\r\n    dependencies : cglm_dep,\r\n    c_args : '-DGLM_TESTS_NO_COLORFUL_OUTPUT'\r\n)\r\n\r\ntest('cglm.tests', test_exe)\r\n\r\nendif\r\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.2177734375,
          "content": "option('build_tests', type : 'boolean', value : false, description : 'Build tests')\noption('install', type : 'boolean', value : true, description : 'Include the library, headers, and pkg-config file in the install target')\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "win",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}