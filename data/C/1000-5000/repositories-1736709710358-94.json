{
  "metadata": {
    "timestamp": 1736709710358,
    "page": 94,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openvenues/libpostal",
      "stars": 4119,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 2.056640625,
          "content": "version: 1.0.{build}\nimage: Visual Studio 2015\nskip_branch_with_pr: true\n\nenvironment:\n  matrix:\n  - COMPILER: msys2\n    PLATFORM: x86\n    MSYS2_ARCH: x86\n    MSYS2_DIR: msys64\n    MSYSTEM: MINGW32\n    BIT: 32\n  - COMPILER: msys2\n    PLATFORM: x64\n    MSYS2_ARCH: x86_64\n    MSYS2_DIR: msys64\n    MSYSTEM: MINGW64\n    BIT: 64\n\nbuild_script:\n- cmd: cd %APPVEYOR_BUILD_FOLDER%\n- ps: |\n    Write-Host \"Compiler: $Env:COMPILER\"\n    Write-Host \"Architecture: $Env:MSYS2_ARCH\"\n    Write-Host \"Platform: $Env:PLATFORM\"\n    Write-Host \"MSYS2 Directory: $Env:MSYS2_DIR\"\n    Write-Host \"MSYS2 System: $Env:MSYSTEM\"\n\n    if ($Env:COMPILER -eq \"msys2\") {\n      $Env:Path = \"C:\\$Env:MSYS2_DIR\\$Env:MSYSTEM\\bin;C:\\$Env:MSYS2_DIR\\usr\\bin;$Env:Path\"\n      $Env:WDIR = $Env:APPVEYOR_BUILD_FOLDER -replace \"\\\\\", \"/\"\n      bash -lc \"cd $Env:WDIR && cp -rf ./windows/* ./\"\n      bash -lc \"cd $Env:WDIR && ./bootstrap.sh\"\n      bash -lc \"cd $Env:WDIR && ./configure --datadir=/c\"\n      bash -lc \"cd $Env:WDIR && make -j4\"\n      bash -lc \"cd $Env:WDIR && make check\"\n      bash -lc \"cd $Env:WDIR && cp src/.libs/libpostal-*.dll libpostal.dll\"\n      & 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\lib.exe' /def:libpostal.def /out:libpostal.lib /machine:$Env:PLATFORM\n      if ($Env:BIT -eq \"32\") {\n        $Paths = @(\n          (Join-Path $Env:APPVEYOR_BUILD_FOLDER \"src\"),\n          (Join-Path $Env:APPVEYOR_BUILD_FOLDER \"src\\.libs\"),\n          (Join-Path $Env:APPVEYOR_BUILD_FOLDER \"test\"),\n          (Join-Path $Env:APPVEYOR_BUILD_FOLDER \"test\\.libs\"))\n        Get-ChildItem -Path $Paths | ?{ $_.Name -Match '\\.(exe|dll)$' } | % { & 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\editbin.exe' /NOLOGO /LARGEADDRESSAWARE $_.FullName }\n      }\n      7z a libpostal.zip $Env:APPVEYOR_BUILD_FOLDER\\libpostal.dll $Env:APPVEYOR_BUILD_FOLDER\\libpostal.def $Env:APPVEYOR_BUILD_FOLDER\\libpostal.exp $Env:APPVEYOR_BUILD_FOLDER\\libpostal.lib $Env:APPVEYOR_BUILD_FOLDER\\src\\libpostal.h\n    }\n\ntest_script:\n- '%APPVEYOR_BUILD_FOLDER%\\test\\test_libpostal.exe'\n\nartifacts:\n- path: libpostal.zip\n  name: libpostal\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8779296875,
          "content": "# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.669921875,
          "content": "# The libpostal Code of Conduct\n\nlibpostal is all about addresses, and addresses are all about how people communicate. The philosophy of this project has always been one of multiculturalism, of acknowledging and embracing the specifics of our experiences, the nuances of our cultures, languages, identities, and intersections thereof. This code of conduct expresses the values we hope our contributors will emulate and adopt. We further acknowledge that machine learning models like the ones used in libpostal can reflect and sometimes reinforce the defaults, biases, and injustices that are encoded in the underlying training data and it is urgent and necessary that we stay vigilant in ensuring that open mapping data sets are representative of the under-represented.\n\n> \"Maps are an abstraction of reality, but whose reality are we talking about?\"\n> \n> -- Kate Chapman of the Humanitarian OpenStreetMap Team\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, primary language(s), race, religion, or sexual identity and orientation.\n\nIt's a core tenet of this project to represent different cultures, languages, and realities. This can only be accomplished through creating an inclusive community that goes beyond simply tolerating differences, and instead intrinsically values and seeks out the diverse experiences of people around the world. We pledge to encourage and support people who are directly and/or indirectly marginalized in the open source community and in our societies.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Acknowledging the privilege that one holds in a conversation\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- Hate speech, overt or coded racism, use or promotion of hate symbols or imagery\n- The use of sexualized language or imagery and unwelcome sexual attention or advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Use of condescending language\n- Making assumptions about technical knowledge based on personal characteristics\n- \"Othering\" of languages, cultures, or groups of people and their lived experiences\n- Publishing others' private information, such as a physical or electronic address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at Contact email address. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.244140625,
          "content": "## Submitting Issues\n\nWhen submitting issues to libpostal, please respect these guidelines:\n\n- Be constructive. Try to help solve the problem.\n- Always search for existing issues before submitting one.\n- If you've written your own address parsing library/service, whether open-source or proprietary, don't raise issues simply to advertise for your project/solution. Write about it elsewhere, and save the issues page for people who are actually using libpostal.\n\n### Bad parses\n\nLibpostal's parser uses machine learning. It improves as the data improves, but contrary to the hype, that doesn't mean it can do everything a human brain can do. Addresses have many edge cases, and while we cover a substantial number of them, we may not be able to handle every bizarre edge case that comes up.\n\nWhen reporting a parser issue, only submit one issue per problematic *pattern* of address, preferably with multiple addresses attached. For each address, please include at minimum:\n\n- Input address\n- Expected result\n- Can you find the address in [OpenStreetMap](https://openstreetmap.org)?\n- If libpostal is getting a place name like a city, suburb, or state wrong, can the admin component(s) name be found in OSM?\n- What's the minimum form of the address that will parse correctly. For instance, if \"123 Main St New York, NY\" is the problem address, will \"123 Main St\" work? Does it work without abbreviations, using local language names, without sub-building information like units?\n\nNote: we don't claim to handle all of the formatting mistakes that abound in address data sets, so sometimes the input needs to be preprocessed in some way before sending to libpostal. Sometimes there simply is no immediate solution, and many times the solution is simply to add your address or some part of it to OSM.\n\nHowever, if there's a specific place or style of address that libpostal gets wrong, often we can do something to help libpostal train for and understand that address.\n\n\n### Bugs\n\nWhen submitting bug reports, please be sure to give us as much context as possible so that we can reproduce the error you encountered. Be sure to include:\n\n- System conditons (OS, etc.)\n- Steps to reproduce\n- Expected outcome\n- Actual outcome\n- Screenshots or traceback\n- Input or code that exposes the bug, if possible\n\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 1.955078125,
          "content": "Hi!\n\nI was checking out libpostal, and saw something that could be improved.\n\n---\n#### My country is\n<!-- If you were Carmen Sandiego, where in the world would you be? -->\n\n---\n#### Here's how I'm using libpostal\n<!-- Always interested to know how people use the library! What are you working on? Which orgnization? What's your use case? -->\n\n---\n#### Here's what I did\n<!-- the input you used in the case of issues with results, your system configuration for compilation issues/bugs, etc. -->\n\n---\n#### Here's what I got\n<!-- the output from the parser, normalization, deduping, make, etc. Try to paste the exact result/output. -->\n\n---\n#### Here's what I was expecting\n<!-- what should the correct parse/output have been? Try to be specific. -->\n\n---\n#### For parsing issues, please answer \"yes\" or \"no\" to all that apply.\n\n- Does the input address exist in [OpenStreetMap](https://openstreetmap.org)?\n  <!-- yes/no. Provide a link if possible -->\n- Do all the toponyms exist in OSM (city, state, region names, etc.)?\n  <!-- yes/no -->\n- If the address uses a rare/uncommon format, does changing the order of the fields yield the correct result?\n  <!-- yes/no. Providing examples is useful. -->\n- If the address does not contain city, region, etc., does adding those fields to the input improve the result?\n  <!-- yes/no. Please paste any examples of forms of the address that do work. There might be an inconsistency between your address and libpostal's training addresses. -->\n- If the address contains apartment/floor/sub-building information or uncommon formatting, does removing that help? Is there any minimum form of the address that gets the right parse?\n  <!-- yes/no. Please paste any examples of forms of the address that do work. Trying to do some of this investigation yourself before asking for help can save time for maintainers and improve your understanding of the project. -->\n\n---\n#### Here's what I think could be improved\n<!-- suggestions for what could be done differently -->\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 openvenues\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.0830078125,
          "content": "SUBDIRS = src test\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libpostal.pc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 45.4345703125,
          "content": "# libpostal: international street address NLP\n\n[![Build Status](https://travis-ci.org/openvenues/libpostal.svg?branch=master)](https://travis-ci.org/openvenues/libpostal)\n[![Build Status](https://ci.appveyor.com/api/projects/status/github/openvenues/libpostal?branch=master&svg=true)](https://ci.appveyor.com/project/albarrentine/libpostal/branch/master)\n[![License](https://img.shields.io/github/license/openvenues/libpostal.svg)](https://github.com/openvenues/libpostal/blob/master/LICENSE)\n[![OpenCollective Sponsors](https://opencollective.com/libpostal/sponsors/badge.svg)](#sponsors)\n[![OpenCollective Backers](https://opencollective.com/libpostal/backers/badge.svg)](#backers)\n\nlibpostal is a C library for parsing/normalizing street addresses around the world using statistical NLP and open data. The goal of this project is to understand location-based strings in every language, everywhere. For a more comprehensive overview of the research behind libpostal, be sure to check out the (lengthy) introductory blog posts:\n\n- **Original post**: [Statistical NLP on OpenStreetMap](https://medium.com/@albarrentine/statistical-nlp-on-openstreetmap-b9d573e6cc86)\n- **Follow-up for 1.0 release**: [Statistical NLP on OpenStreetMap: Part 2](https://medium.com/@albarrentine/statistical-nlp-on-openstreetmap-part-2-80405b988718)\n\n<span>&#x1f1e7;&#x1f1f7;</span> <span>&#x1f1eb;&#x1f1ee;</span>  <span>&#x1f1f3;&#x1f1ec;</span> :jp: <span>&#x1f1fd;&#x1f1f0; </span> <span>&#x1f1e7;&#x1f1e9; </span> <span>&#x1f1f5;&#x1f1f1; </span> <span>&#x1f1fb;&#x1f1f3; </span> <span>&#x1f1e7;&#x1f1ea; </span> <span>&#x1f1f2;&#x1f1e6; </span> <span>&#x1f1fa;&#x1f1e6; </span> <span>&#x1f1ef;&#x1f1f2; </span> :ru: <span>&#x1f1ee;&#x1f1f3; </span> <span>&#x1f1f1;&#x1f1fb; </span> <span>&#x1f1e7;&#x1f1f4; </span> :de: <span>&#x1f1f8;&#x1f1f3; </span>  <span>&#x1f1e6;&#x1f1f2; </span> :kr: <span>&#x1f1f3;&#x1f1f4; </span>  <span>&#x1f1f2;&#x1f1fd; </span> <span>&#x1f1e8;&#x1f1ff; </span> <span>&#x1f1f9;&#x1f1f7; </span> :es: <span>&#x1f1f8;&#x1f1f8; </span> <span>&#x1f1ea;&#x1f1ea; </span> <span>&#x1f1e7;&#x1f1ed; </span> <span>&#x1f1f3;&#x1f1f1; </span> :cn:  <span>&#x1f1f5;&#x1f1f9; </span> <span>&#x1f1f5;&#x1f1f7; </span> :gb: <span>&#x1f1f5;&#x1f1f8; </span> \n\nAddresses and the locations they represent are essential for any application dealing with maps (place search, transportation, on-demand/delivery services, check-ins, reviews). Yet even the simplest addresses are packed with local conventions, abbreviations and context, making them difficult to index/query effectively with traditional full-text search engines. This library helps convert the free-form addresses that humans use into clean normalized forms suitable for machine comparison and full-text indexing. Though libpostal is not itself a full geocoder, it can be used as a preprocessing step to make any geocoding application smarter, simpler, and more consistent internationally.\n\n<span>&#x1f1f7;&#x1f1f4; </span> <span>&#x1f1ec;&#x1f1ed; </span> <span>&#x1f1e6;&#x1f1fa; </span> <span>&#x1f1f2;&#x1f1fe; </span> <span>&#x1f1ed;&#x1f1f7; </span> <span>&#x1f1ed;&#x1f1f9; </span> :us: <span>&#x1f1ff;&#x1f1e6; </span> <span>&#x1f1f7;&#x1f1f8; </span> <span>&#x1f1e8;&#x1f1f1; </span> :it: <span>&#x1f1f0;&#x1f1ea; <span>&#x1f1e8;&#x1f1ed; </span> <span>&#x1f1e8;&#x1f1fa; </span> <span>&#x1f1f8;&#x1f1f0; </span> <span>&#x1f1e6;&#x1f1f4; </span> <span>&#x1f1e9;&#x1f1f0; </span> <span>&#x1f1f9;&#x1f1ff; </span> <span>&#x1f1e6;&#x1f1f1; </span> <span>&#x1f1e8;&#x1f1f4; </span> <span>&#x1f1ee;&#x1f1f1; </span> <span>&#x1f1ec;&#x1f1f9; </span>  :fr: <span>&#x1f1f5;&#x1f1ed; </span> <span>&#x1f1e6;&#x1f1f9; </span> <span>&#x1f1f1;&#x1f1e8; </span>  <span>&#x1f1ee;&#x1f1f8; <span>&#x1f1ee;&#x1f1e9; </span> </span> <span>&#x1f1e6;&#x1f1ea; </span> </span> <span>&#x1f1f8;&#x1f1f0; </span> <span>&#x1f1f9;&#x1f1f3; </span> <span>&#x1f1f0;&#x1f1ed; </span> <span>&#x1f1e6;&#x1f1f7; </span> <span>&#x1f1ed;&#x1f1f0; </span>\n\nThe core library is written in pure C. Language bindings for [Python](https://github.com/openvenues/pypostal), [Ruby](https://github.com/openvenues/ruby_postal), [Go](https://github.com/openvenues/gopostal), [Java](https://github.com/openvenues/jpostal), [PHP](https://github.com/openvenues/php-postal), and [NodeJS](https://github.com/openvenues/node-postal) are officially supported and it's easy to write bindings in other languages.\n\nSponsors\n--------\n\nIf your company is using libpostal, consider asking your organization to sponsor the project. Interpreting what humans mean when they refer to locations is far from a solved problem, and sponsorships help us pursue new frontiers in geospatial NLP. As a sponsor, your company logo will appear prominently on the Github repo page along with a link to your site. [Sponsorship info](https://opencollective.com/libpostal#sponsor)\n\n<a href=\"https://opencollective.com/libpostal/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/sponsor/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/sponsor/29/avatar.svg\"></a>\n\nBackers\n------------\n\nIndividual users can also help support open geo NLP research by making a monthly donation:\n\n<a href=\"https://opencollective.com/libpostal/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/9/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/10/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/10/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/11/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/11/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/12/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/12/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/13/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/13/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/14/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/14/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/15/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/15/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/16/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/16/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/17/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/17/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/18/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/18/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/19/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/19/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/20/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/20/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/21/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/21/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/22/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/22/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/23/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/23/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/24/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/24/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/25/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/25/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/26/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/26/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/27/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/27/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/28/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/28/avatar.svg\"></a>\n<a href=\"https://opencollective.com/libpostal/backer/29/website\" target=\"_blank\"><img src=\"https://opencollective.com/libpostal/backer/29/avatar.svg\"></a>\n\nInstallation (Mac/Linux)\n------------------------\n\nBefore you install, make sure you have the following prerequisites:\n\n**On Ubuntu/Debian**\n```\nsudo apt-get install -y curl build-essential autoconf automake libtool pkg-config\n```\n\n**On CentOS/RHEL**\n```\nsudo yum install curl autoconf automake libtool pkgconfig\n```\n\n**On Mac OSX**\n```\nbrew install curl autoconf automake libtool pkg-config\n```\n\nThen to install the C library:\n\nIf you're using an M1 Mac, add `--disable-sse2` to the `./configure` command. This will result in poorer performance but the build will succeed.\n\n```\ngit clone https://github.com/openvenues/libpostal\ncd libpostal\n\n./bootstrap.sh\n\n# For Intel/AMD processors and the default model\n./configure --datadir=[...some dir with a few GB of space...]\n\n# For Apple / ARM cpus and the default model\n./configure --datadir=[...some dir with a few GB of space...] --disable-sse2\n\n# For the improved Senzing model:\n./configure --datadir=[...some dir with a few GB of space...] MODEL=senzing\n\nmake -j8\nsudo make install\n\n# On Linux it's probably a good idea to run\nsudo ldconfig\n```\n\nlibpostal has support for pkg-config, so you can use the pkg-config to print the flags needed to link your program against it:\n\n```\npkg-config --cflags libpostal         # print compiler flags\npkg-config --libs libpostal           # print linker flags\npkg-config --cflags --libs libpostal  # print both\n```\n\nFor example, if you write a program called app.c, you can compile it like this:\n\n```\ngcc app.c `pkg-config --cflags --libs libpostal`\n```\n\nInstallation (Windows)\n----------------------\n\n**MSys2/MinGW**\n\nFor Windows the build procedure currently requires MSys2 and MinGW. This can be downloaded from http://msys2.org. Please follow the instructions on the MSys2 website for installation.\n\nPlease ensure Msys2 is up-to-date by running:\n```\npacman -Syu\n```\n\nInstall the following prerequisites:\n```\npacman -S autoconf automake curl git make libtool gcc mingw-w64-x86_64-gcc\n```\n\nThen to build the C library:\n```\ngit clone https://github.com/openvenues/libpostal\ncd libpostal\ncp -rf windows/* ./\n./bootstrap.sh\n./configure --datadir=[...some dir with a few GB of space...]\nmake -j4\nmake install\n```\nNotes: When setting the datadir, the `C:` drive would be entered as `/c`. The libpostal build script automatically add `libpostal` on the end of the path, so '/c' would become `C:\\libpostal\\` on Windows.\n\nThe compiled .dll will be in the `src/.libs/` directory and should be called `libpostal-1.dll`.\n\nIf you require a .lib import library to link this to your application. You can generate one using the Visual Studio `lib.exe` tool and the `libpostal.def` definition file:\n```\nlib.exe /def:libpostal.def /out:libpostal.lib /machine:x64\n```\n\nInstallation with an alternative data model\n-------------------------------------------\n\nAn alternative data model is available for libpostal. It is created by Senzing Inc. for improved parsing on US, UK and Singapore addresses and improved US rural route address handling.\nTo enable this add `MODEL=senzing` to the conigure line during installation:\n```\n./configure --datadir=[...some dir with a few GB of space...] MODEL=senzing\n```\n\nThe data for this model is gotten from [OpenAddress](https://openaddresses.io/), [OpenStreetMap](https://www.openstreetmap.org/) and data generated by Senzing based on customer feedback (a few hundred records), a total of about 1.2 billion records of data from over 230 countries, in 100+ languages. The data from OpenStreetMap and OpenAddress is good but not perfect so the data set was modified by filtering out badly formed addresses, correcting misclassified address tokens and removing tokens that didn't belong in the addresses, whenever these conditions were encountered.\n\nSenzing created a data set of 12950 addresses from 89 countries that it uses to test and verify the quality of its models. The data set was generated using random addresses from OSM, minimally 50 per country. Hard-to-parse addresses were gotten from Senzing support team and customers and from the libpostal github page and added to this set. The Senzing model got 4.3% better parsing results than the default model, using this test set.\n\nThe size of this model is about 2.2GB compared to 1.8GB for the default model so keep that in mind if storages space is important.\n\nFurther information about this data model can be found at: https://github.com/Senzing/libpostal-data\nIf you run into any issues with this model, whether they have to do with parses, installation or any other problems, then please report them at https://github.com/Senzing/libpostal-data\n\nExamples of parsing\n-------------------\n\nlibpostal's international address parser uses machine learning (Conditional Random Fields) and is trained on over 1 billion addresses in every inhabited country on Earth. We use [OpenStreetMap](https://openstreetmap.org) and [OpenAddresses](https://openaddresses.io) as sources of structured addresses, and the OpenCage address format templates at: https://github.com/OpenCageData/address-formatting to construct the training data, supplementing with containing polygons, and generating sub-building components like apartment/floor numbers and PO boxes. We also add abbreviations, drop out components at random, etc. to make the parser as robust as possible to messy real-world input.\n\nThese example parse results are taken from the interactive address_parser program \nthat builds with libpostal when you run ```make```. Note that the parser can handle\ncommas vs. no commas as well as various casings and permutations of components (if the input\nis e.g. just city or just city/postcode).\n\n![parser](https://cloud.githubusercontent.com/assets/238455/24703087/acbe35d8-19cf-11e7-8850-77fb1c3446a7.gif)\n\nThe parser achieves very high accuracy on held-out data, currently 99.45%\ncorrect full parses (meaning a 1 in the numerator for getting *every* token\nin the address correct).\n\nUsage (parser)\n--------------\n\nHere's an example of the parser API using the Python bindings:\n\n```python\n\nfrom postal.parser import parse_address\nparse_address('The Book Club 100-106 Leonard St Shoreditch London EC2A 4RH, United Kingdom')\n```\n\nAnd an example with the C API:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <libpostal/libpostal.h>\n\nint main(int argc, char **argv) {\n    // Setup (only called once at the beginning of your program)\n    if (!libpostal_setup() || !libpostal_setup_parser()) {\n        exit(EXIT_FAILURE);\n    }\n\n    libpostal_address_parser_options_t options = libpostal_get_address_parser_default_options();\n    libpostal_address_parser_response_t *parsed = libpostal_parse_address(\"781 Franklin Ave Crown Heights Brooklyn NYC NY 11216 USA\", options);\n\n    for (size_t i = 0; i < parsed->num_components; i++) {\n        printf(\"%s: %s\\n\", parsed->labels[i], parsed->components[i]);\n    }\n\n    // Free parse result\n    libpostal_address_parser_response_destroy(parsed);\n\n    // Teardown (only called once at the end of your program)\n    libpostal_teardown();\n    libpostal_teardown_parser();\n}\n```\n\nParser labels\n-------------\n\nThe address parser can technically use any string labels that are defined in the training data, but these are the ones currently defined, based on the fields defined in [OpenCage's address-formatting library](https://github.com/OpenCageData/address-formatting), as well as a few added by libpostal to handle specific patterns:\n\n- **house**: venue name e.g. \"Brooklyn Academy of Music\", and building names e.g. \"Empire State Building\"\n- **category**: for category queries like \"restaurants\", etc.\n- **near**: phrases like \"in\", \"near\", etc. used after a category phrase to help with parsing queries like \"restaurants in Brooklyn\"\n- **house_number**: usually refers to the external (street-facing) building number. In some countries this may be a compount, hyphenated number which also includes an apartment number, or a block number (a la Japan), but libpostal will just call it the house_number for simplicity.\n- **road**: street name(s)\n- **unit**: an apartment, unit, office, lot, or other secondary unit designator\n- **level**: expressions indicating a floor number e.g. \"3rd Floor\", \"Ground Floor\", etc.\n- **staircase**: numbered/lettered staircase\n- **entrance**: numbered/lettered entrance\n- **po_box**: post office box: typically found in non-physical (mail-only) addresses\n- **postcode**: postal codes used for mail sorting\n- **suburb**: usually an unofficial neighborhood name like \"Harlem\", \"South Bronx\", or \"Crown Heights\"\n- **city_district**: these are usually boroughs or districts within a city that serve some official purpose e.g. \"Brooklyn\" or \"Hackney\" or \"Bratislava IV\"\n- **city**: any human settlement including cities, towns, villages, hamlets, localities, etc.\n- **island**: named islands e.g. \"Maui\"\n- **state_district**: usually a second-level administrative division or county.\n- **state**: a first-level administrative division. Scotland, Northern Ireland, Wales, and England in the UK are mapped to \"state\" as well (convention used in OSM, GeoPlanet, etc.)\n- **country_region**: informal subdivision of a country without any political status\n- **country**: sovereign nations and their dependent territories, anything with an [ISO-3166 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\n- **world_region**: currently only used for appending “West Indies” after the country name, a pattern frequently used in the English-speaking Caribbean e.g. “Jamaica, West Indies”\n\nExamples of normalization\n-------------------------\n\nThe expand_address API converts messy real-world addresses into normalized\nequivalents suitable for search indexing, hashing, etc. \n\nHere's an interactive example using the Python binding:\n\n![expand](https://cloud.githubusercontent.com/assets/238455/14115012/52990d14-f5a7-11e5-9797-159dacdf8c5f.gif)\n\nlibpostal contains an OSM-trained language classifier to detect which language(s) are used in a given\naddress so it can apply the appropriate normalizations. The only input needed is the raw address string. \nHere's a short list of some less straightforward normalizations in various languages.\n\n| Input                               | Output (may be multiple in libpostal)   |\n| ----------------------------------- |-----------------------------------------|\n| One-hundred twenty E 96th St        | 120 east 96th street                    |\n| C/ Ocho, P.I. 4                     | calle 8 polígono industrial 4           |\n| V XX Settembre, 20                  | via 20 settembre 20                     |\n| Quatre vingt douze R. de l'Église   | 92 rue de l eglise                      |\n| ул Каретный Ряд, д 4, строение 7    | улица каретныи ряд дом 4 строение 7     |\n| ул Каретный Ряд, д 4, строение 7    | ulitsa karetnyy ryad dom 4 stroyeniye 7 |\n| Marktstraße 14                      | markt strasse 14                        |\n\nlibpostal currently supports these types of normalizations in *60+ languages*,\nand you can [add more](https://github.com/openvenues/libpostal/tree/master/resources/dictionaries) (without having to write any C).\n\nFor further reading and some bizarre address edge-cases, see:\n[Falsehoods Programmers Believe About Addresses](https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/).\n\nUsage (normalization)\n---------------------\n\nHere's an example using the Python bindings for succinctness (most of the higher-level language bindings are similar):\n\n```python\nfrom postal.expand import expand_address\nexpansions = expand_address('Quatre-vingt-douze Ave des Champs-Élysées')\n\nassert '92 avenue des champs-elysees' in set(expansions)\n```\n\nThe C API equivalent is a few more lines, but still fairly simple:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <libpostal/libpostal.h>\n\nint main(int argc, char **argv) {\n    // Setup (only called once at the beginning of your program)\n    if (!libpostal_setup() || !libpostal_setup_language_classifier()) {\n        exit(EXIT_FAILURE);\n    }\n\n    size_t num_expansions;\n    libpostal_normalize_options_t options = libpostal_get_default_options();\n    char **expansions = libpostal_expand_address(\"Quatre-vingt-douze Ave des Champs-Élysées\", options, &num_expansions);\n\n    for (size_t i = 0; i < num_expansions; i++) {\n        printf(\"%s\\n\", expansions[i]);\n    }\n\n    // Free expansions\n    libpostal_expansion_array_destroy(expansions, num_expansions);\n\n    // Teardown (only called once at the end of your program)\n    libpostal_teardown();\n    libpostal_teardown_language_classifier();\n}\n```\n\nCommand-line usage (expand)\n---------------------------\n\nAfter building libpostal:\n\n```\ncd src/\n\n./libpostal \"Quatre vingt douze Ave des Champs-Élysées\"\n```\n\nIf you have a text file or stream with one address per line, the command-line interface also accepts input from stdin:\n\n```\ncat some_file | ./libpostal --json\n```\n\nCommand-line usage (parser)\n---------------------------\n\nAfter building libpostal:\n\n```\ncd src/\n\n./address_parser\n```\n\naddress_parser is an interactive shell. Just type addresses and libpostal will\nparse them and print the result.\n\n\nBindings\n--------\n\nLibpostal is designed to be used by higher-level languages.  If you don't see your language of choice, or if you're writing a language binding, please let us know!\n\n**Officially supported language bindings**\n\n- Python: [pypostal](https://github.com/openvenues/pypostal)\n- Ruby: [ruby_postal](https://github.com/openvenues/ruby_postal)\n- Go: [gopostal](https://github.com/openvenues/gopostal)\n- Java/JVM: [jpostal](https://github.com/openvenues/jpostal)\n- PHP: [php-postal](https://github.com/openvenues/php-postal)\n- NodeJS: [node-postal](https://github.com/openvenues/node-postal)\n- R: [poster](https://github.com/ironholds/poster)\n\n**Unofficial language bindings**\n\n- Java: [javacpp-presets-libpostal](https://github.com/bytedeco/javacpp-presets/tree/master/libpostal)\n- LuaJIT: [lua-resty-postal](https://github.com/bungle/lua-resty-postal)\n- Perl: [Geo::libpostal](https://metacpan.org/pod/Geo::libpostal)\n- Elixir: [Expostal](https://github.com/SweetIQ/expostal)\n- Rust: [rustpostal](https://crates.io/crates/rustpostal)\n\n**Database extensions**\n\n- PostgreSQL: [pgsql-postal](https://github.com/pramsey/pgsql-postal)\n\n**Unofficial REST API**\n\n- Libpostal REST: [libpostal REST](https://github.com/johnlonganecker/libpostal-rest)\n\n**Libpostal REST Docker**\n\n- Libpostal REST Docker [Libpostal REST Docker](https://github.com/johnlonganecker/libpostal-rest-docker)\n\n**Libpostal ZeroMQ Docker**\n\n- Libpostal ZeroMQ Docker image: [pasupulaphani/libpostal-zeromq](https://hub.docker.com/r/pasupulaphani/libpostal-zeromq/) , Source: [Github](https://github.com/pasupulaphani/libpostal-docker) \n\n\nTests\n-----\n\nlibpostal uses [greatest](https://github.com/silentbicycle/greatest) for automated testing. To run the tests, use:\n\n```\nmake check\n```\n\nAdding [test cases](https://github.com/openvenues/libpostal/tree/master/test) is easy, even if your C is rusty/non-existent, and we'd love contributions. We use mostly functional tests checking string input against string output.\n\nlibpostal also gets periodically battle-tested on millions of addresses from OSM (clean) as well as anonymized queries from a production geocoder (not so clean). During this process we use valgrind to check for memory leaks and other errors.\n\nData files\n----------\n\nlibpostal needs to download some data files from S3. The basic files are on-disk\nrepresentations of the data structures necessary to perform expansion. For address\nparsing, since model training takes a few days, we publish the fully trained model \nto S3 and will update it automatically as new addresses get added to OSM, OpenAddresses, etc. Same goes for the language classifier model.\n\nData files are automatically downloaded when you run make. To check for and download\nany new data files, you can either run ```make```, or run:\n\n```\nlibpostal_data download all $YOUR_DATA_DIR/libpostal\n```\n\nAnd replace $YOUR_DATA_DIR with whatever you passed to configure during install.\n\nLanguage dictionaries\n---------------------\n\nlibpostal contains a number of per-language dictionaries that influence expansion, the language classifier, and the parser. To explore the dictionaries or contribute abbreviations/phrases in your language, see [resources/dictionaries](https://github.com/openvenues/libpostal/tree/master/resources/dictionaries).\n\nTraining data\n-------------\n\nIn machine learning, large amounts of training data are often essential for getting good results. Many open-source machine learning projects either release only the model code (results reproducible if and only if you're Google), or a pre-baked model where the training conditions are unknown.\n\nLibpostal is a bit different because it's trained on open data that's available to everyone, so we've released the entire training pipeline (the [geodata](https://github.com/openvenues/libpostal/tree/master/scripts/geodata) package in this repo), as well as the resulting training data itself on the Internet Archive. It's over 100GB unzipped.\n\nTraining data are stored on archive.org by the date they were created. There's also a file stored in the main directory of this repo called `current_parser_training_set` which stores the date of the most recently created training set. To always point to the latest data, try something like: ```latest=$(cat current_parser_training_set)``` and use that variable in place of the date.\n\n### Parser training sets ###\nAll files can be found at https://archive.org/download/libpostal-parser-training-data-YYYYMMDD/$FILE as gzip'd tab-separated values (TSV) files formatted like:```language\\tcountry\\taddress```.\n\n- **formatted_addresses_tagged.random.tsv.gz** (ODBL): OSM addresses. Apartments, PO boxes, categories, etc. are added primarily to these examples\n- **formatted_places_tagged.random.tsv.gz** (ODBL): every toponym in OSM (even cities represented as points, etc.), reverse-geocoded to its parent admins, possibly including postal codes if they're listed on the point/polygon. Every place gets a base level of representation and places with higher populations get proportionally more.\n- **formatted_ways_tagged.random.tsv.gz** (ODBL): every street in OSM (ways with highway=*, with a few conditions), reverse-geocoded to its admins\n- **geoplanet_formatted_addresses_tagged.random.tsv.gz** (CC-BY): every postal code in Yahoo GeoPlanet (includes almost every postcode in the UK, Canada, etc.) and their parent admins. The GeoPlanet admins have been cleaned up and mapped to libpostal's tagset\n- **openaddresses_formatted_addresses_tagged.random.tsv.gz** (various licenses, mostly CC-BY): most of the address data sets from [OpenAddresses](https://openaddresses.io/), which in turn come directly from government sources\n- **uk_openaddresses_formatted_addresses_tagged.random.tsv.gz** (CC-BY): addresses from [OpenAddresses UK](https://alpha.openaddressesuk.org/)\n\nIf the parser doesn't perform as well as you'd hoped on a particular type of address, the best recourse is to use grep/awk to look through the training data and try to determine if there's some pattern/style of address that's not being captured.\n\nFeatures\n--------\n\n- **Abbreviation expansion**: e.g. expanding \"rd\" => \"road\" but for almost any\nlanguage. libpostal supports > 50 languages and it's easy to add new languages\nor expand the current dictionaries. Ideographic languages (not separated by\nwhitespace e.g. Chinese) are supported, as are Germanic languages where\nthoroughfare types are concatenated onto the end of the string, and may\noptionally be separated so Rosenstraße and Rosen Straße are equivalent.\n\n- **International address parsing**: [Conditional Random Field](http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/) which parses\n\"123 Main Street New York New York\" into {\"house_number\": 123, \"road\":\n\"Main Street\", \"city\": \"New York\", \"state\": \"New York\"}. The parser works\nfor a wide variety of countries and languages, not just US/English. \nThe model is trained on over 1 billion addresses and address-like strings, using the\ntemplates in the [OpenCage address formatting repo](https://github.com/OpenCageData/address-formatting) to construct formatted,\ntagged traning examples for every inhabited country in the world. Many types of [normalizations](https://github.com/openvenues/libpostal/blob/master/scripts/geodata/addresses/components.py)\nare performed to make the training data resemble real messy geocoder input as closely as possible.\n\n- **Language classification**: multinomial logistic regression\ntrained (using the [FTRL-Proximal](https://research.google.com/pubs/archive/41159.pdf) method to induce sparsity) on all of OpenStreetMap ways, addr:* tags, toponyms and formatted\naddresses. Labels are derived using point-in-polygon tests for both OSM countries\nand official/regional languages for countries and admin 1 boundaries\nrespectively. So, for example, Spanish is the default language in Spain but\nin different regions e.g. Catalunya, Galicia, the Basque region, the respective \nregional languages are the default. Dictionary-based disambiguation is employed in\ncases where the regional language is non-default e.g. Welsh, Breton, Occitan.\nThe dictionaries are also used to abbreviate canonical phrases like \"Calle\" => \"C/\"\n(performed on both the language classifier and the address parser training sets)\n\n- **Numeric expression parsing** (\"twenty first\" => 21st, \n\"quatre-vingt-douze\" => 92, again using data provided in CLDR), supports > 30\nlanguages. Handles languages with concatenated expressions e.g.\nmilleottocento => 1800. Optionally normalizes Roman numerals regardless of the\nlanguage (IX => 9) which occur in the names of many monarchs, popes, etc.\n\n- **Fast, accurate tokenization/lexing**: clocked at > 1M tokens / sec,\nimplements the TR-29 spec for UTF8 word segmentation, tokenizes East Asian\nlanguages chracter by character instead of on whitespace.\n\n- **UTF8 normalization**: optionally decompose UTF8 to NFD normalization form,\nstrips accent marks e.g. à => a and/or applies Latin-ASCII transliteration.\n\n- **Transliteration**: e.g. улица => ulica or ulitsa. Uses all\n[CLDR transforms](http://www.unicode.org/repos/cldr/trunk/common/transforms/), the exact same source data as used by [ICU](http://site.icu-project.org/),\nthough libpostal doesn't require pulling in all of ICU (might conflict \nwith your system's version). Note: some languages, particularly Hebrew, Arabic\nand Thai may not include vowels and thus will not often match a transliteration \ndone by a human. It may be possible to implement statistical transliterators\nfor some of these languages.\n\n- **Script detection**: Detects which script a given string uses (can be\nmultiple e.g. a free-form Hong Kong or Macau address may use both Han and\nLatin scripts in the same address). In transliteration we can use all\napplicable transliterators for a given Unicode script (Greek can for instance\nbe transliterated with Greek-Latin, Greek-Latin-BGN and Greek-Latin-UNGEGN).\n\nNon-goals\n---------\n\n- Verifying that a location is a valid address\n- Actually geocoding addresses to a lat/lon (that requires a database/search index)\n\nRaison d'être\n-------------\n\nlibpostal was originally created as part of the [OpenVenues](https://github.com/openvenues/openvenues) project to solve the problem of venue deduping. In OpenVenues, we have a data set of millions of\nplaces derived from terabytes of web pages from the [Common Crawl](http://commoncrawl.org/).\nThe Common Crawl is published monthly, and so even merging the results of\ntwo crawls produces significant duplicates.\n\nDeduping is a relatively well-studied field, and for text documents \nlike web pages, academic papers, etc. there exist pretty decent approximate\nsimilarity methods such as [MinHash](https://en.wikipedia.org/wiki/MinHash).\n\nHowever, for physical addresses, the frequent use of conventional abbreviations\nsuch as Road == Rd, California == CA, or New York City == NYC complicates\nmatters a bit. Even using a technique like MinHash, which is well suited for\napproximate matches and is equivalent to the Jaccard similarity of two sets, we\nhave to work with very short texts and it's often the case that two equivalent\naddresses, one abbreviated and one fully specified, will not match very closely\nin terms of n-gram set overlap. In non-Latin scripts, say a Russian address and\nits transliterated equivalent, it's conceivable that two addresses referring to\nthe same place may not match even a single character.\n\nAs a motivating example, consider the following two equivalent ways to write a\nparticular Manhattan street address with varying conventions and degrees\nof verbosity:\n\n- 30 W 26th St Fl #7\n- 30 West Twenty-sixth Street Floor Number 7\n\nObviously '30 W 26th St Fl #7 != '30 West Twenty-sixth Street Floor Number 7'\nin a string comparison sense, but a human can grok that these two addresses\nrefer to the same physical location.\n\nlibpostal aims to create normalized geographic strings, parsed into components,\nsuch that we can more effectively reason about how well two addresses\nactually match and make automated server-side decisions about dupes.\n\nSo it's not a geocoder?\n-----------------------\n\nIf the above sounds a lot like geocoding, that's because it is in a way,\nonly in the OpenVenues case, we have to geocode without a UI or a user \nto select the correct address in an autocomplete dropdown. Given a database \nof source addresses such as OpenAddresses or OpenStreetMap (or all of the above), \nlibpostal can be used to implement things like address deduping and server-side\nbatch geocoding in settings like MapReduce or stream processing.\n\nNow, instead of trying to bake address-specific conventions into traditional\ndocument search engines like Elasticsearch using giant synonyms files, scripting,\ncustom analyzers, tokenizers, and the like, geocoding can look like this:\n\n1. Run the addresses in your database through libpostal's expand_address\n2. Store the normalized string(s) in your favorite search engine, DB, \n   hashtable, etc.\n3. Run your user queries or fresh imports through libpostal and search\n   the existing database using those strings\n\nIn this way, libpostal can perform fuzzy address matching in constant time\nrelative to the size of the data set.\n\nWhy C?\n------\n\nlibpostal is written in C for three reasons (in order of importance):\n\n1. **Portability/ubiquity**: libpostal targets higher-level languages that\npeople actually use day-to-day: Python, Go, Ruby, NodeJS, etc. The beauty of C\nis that just about any programming language can bind to it and C compilers are\neverywhere, so pick your favorite, write a binding, and you can use libpostal\ndirectly in your application without having to stand up a separate server. We\nsupport Mac/Linux (Windows is not a priority but happy to accept patches), have\na standard autotools build and an endianness-agnostic file format for the data\nfiles. The Python bindings, are maintained as part of this repo since they're\nneeded to construct the training data.\n\n2. **Memory-efficiency**: libpostal is designed to run in a MapReduce setting\nwhere we may be limited to < 1GB of RAM per process depending on the machine\nconfiguration. As much as possible libpostal uses contiguous arrays, tries\n(built on contiguous arrays), bloom filters and compressed sparse matrices to\nkeep memory usage low. It's possible to use libpostal on a mobile device with\nmodels trained on a single country or a handful of countries.\n\n3. **Performance**: this is last on the list for a reason. Most of the\noptimizations in libpostal are for memory usage rather than performance.\nlibpostal is quite fast given the amount of work it does. It can process\n10-30k addresses / second in a single thread/process on the platforms we've\ntested (that means processing every address in OSM planet in a little over\nan hour). Check out the simple benchmark program to test on your environment\nand various types of input. In the MapReduce setting, per-core performance\nisn't as important because everything's being done in parallel, but there are\nsome streaming ingestion applications at Mapzen where this needs to\nrun in-process.\n\nC conventions\n-------------\n\nlibpostal is written in modern, legible, C99 and uses the following conventions:\n\n- Roughly object-oriented, as much as allowed by C\n- Almost no pointer-based data structures, arrays all the way down\n- Uses dynamic character arrays (inspired by [sds](https://github.com/antirez/sds)) for safer string handling\n- Confines almost all mallocs to *name*_new and all frees to *name*_destroy\n- Efficient existing implementations for simple things like hashtables\n- Generic containers (via [klib](https://github.com/attractivechaos/klib)) whenever possible\n- Data structrues take advantage of sparsity as much as possible\n- Efficient double-array trie implementation for most string dictionaries\n- Cross-platform as much as possible, particularly for *nix\n\nPreprocessing (Python)\n----------------------\n\nThe [geodata](https://github.com/openvenues/libpostal/tree/master/scripts/geodata) Python package in the libpostal repo contains the pipeline for preprocessing the various geo\ndata sets and building training data for the C models to use.\nThis package shouldn't be needed for most users, but for those interested in generating new types of addresses or improving libpostal's training data, this is where to look.\n\nAddress parser accuracy\n-----------------------\n\nOn held-out test data (meaning labeled parses that the model has _not_ seen\nbefore), the address parser achieves 99.45% full parse accuracy.\n\nFor some tasks like named entity recognition it's preferable to use something\nlike an F1 score or variants, mostly because there's a class bias problem (most\nwords are non-entities, and a system that simply predicted non-entity for\nevery token would actually do fairly well in terms of accuracy). That is not\nthe case for address parsing. Every token has a label and there are millions\nof examples of each class in the training data, so accuracy is preferable as it's\na clean, simple and intuitive measure of performance.\n\nHere we use full parse accuracy, meaning we only give the parser one \"point\" in\nthe numerator if it gets every single token in the address correct. That should\nbe a better measure than simply looking at whether each token was correct.\n\nImproving the address parser\n----------------------------\n\nThough the current parser works quite well for most standard addresses, there\nis still room for improvement, particularly in making sure the training data\nwe use is as close as possible to addresses in the wild. There are two primary\nways the address parser can be improved even further (in order of difficulty):\n\n1. Contribute addresses to OSM. Anything with an addr:housenumber tag will be\n   incorporated automatically into the parser next time it's trained.\n2. If the address parser isn't working well for a particular country, language\n   or style of address, chances are that some name variations or places being\n   missed/mislabeled during training data creation. Sometimes the fix is to\n   update the formats at: https://github.com/OpenCageData/address-formatting,\n   and in many other cases there are relatively simple tweaks we can make\n   when creating the training data that will ensure the model is trained to\n   handle your use case without you having to do any manual data entry.\n   If you see a pattern of obviously bad address parses, the best thing to\n   do is post an issue to Github.\n\nContributing\n------------\n\nBug reports, issues and pull requests are welcome. Please read the [contributing guide](CONTRIBUTING.md) before submitting your issue, bug report, or pull request.\n\nSubmit issues at: https://github.com/openvenues/libpostal/issues.\n\n\nShoutouts\n---------\n\nSpecial thanks to @BenK10 for the initial Windows build and @AeroXuk for integrating it seamlessly into the project and setting up an Appveyor build.\n\nLicense\n-------\n\nThe software is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\n"
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 0.048828125,
          "content": "#!/bin/sh\nautoreconf -fi --warning=no-portability\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 4.470703125,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nm4_define(LIBPOSTAL_MAJOR_VERSION, [1])\nm4_define(LIBPOSTAL_MINOR_VERSION, [1])\nm4_define(LIBPOSTAL_PATCH_VERSION, [0])\n\nAC_INIT([libpostal], LIBPOSTAL_MAJOR_VERSION.LIBPOSTAL_MINOR_VERSION.LIBPOSTAL_PATCH_VERSION)\n\nAC_CONFIG_MACRO_DIR([m4])\n\nAM_INIT_AUTOMAKE([foreign subdir-objects])\nAC_CONFIG_SRCDIR([src])\nLT_INIT([shared])\n\nAC_CONFIG_HEADERS([config.h])\n\n# Checks for programs.\nAC_PROG_CC_C99\nAC_PROG_INSTALL\n\nLDFLAGS=\"$LDFLAGS -L/usr/local/lib\"\n\n# Checks for libraries.\nAC_SEARCH_LIBS([log],\n  [m],,[AC_MSG_ERROR([Could not find math library])])\n\n# Checks for header files.\nAC_HEADER_STDC\nAC_HEADER_TIME\nAC_HEADER_DIRENT\nAC_HEADER_STDBOOL\nAC_CHECK_HEADERS([fcntl.h float.h inttypes.h limits.h locale.h malloc.h memory.h stddef.h stdint.h stdlib.h string.h unistd.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_INLINE\nAC_TYPE_INT16_T\nAC_TYPE_INT32_T\nAC_TYPE_INT64_T\nAC_TYPE_INT8_T\nAC_TYPE_OFF_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_UINT8_T\nAC_CHECK_TYPES([ptrdiff_t])\n\n# Checks for library functions.\nAC_CHECK_FUNCS([malloc realloc drand48 getcwd gettimeofday memmove memset regcomp setlocale sqrt strdup strndup])\n\nAC_SUBST([LIBPOSTAL_DATA_DIR_VERSION_STRING], [v1])\n\nDATA_FILE_LATEST_VERSION=$(cat $srcdir/versions/base_data)\nPARSER_MODEL_LATEST_VERSION=$(cat $srcdir/versions/parser)\nLANG_CLASS_MODEL_LATEST_VERSION=$(cat $srcdir/versions/language_classifier)\n\nAC_SUBST([LIBPOSTAL_DATA_FILE_LATEST_VERSION], [$DATA_FILE_LATEST_VERSION])\nAC_SUBST([LIBPOSTAL_PARSER_MODEL_LATEST_VERSION], [$PARSER_MODEL_LATEST_VERSION])\nAC_SUBST([LIBPOSTAL_LANG_CLASS_MODEL_LATEST_VERSION], [$LANG_CLASS_MODEL_LATEST_VERSION])\n\n# Senzing data\nAC_SUBST([LIBPOSTAL_SENZING_DATA_DIR_VERSION_STRING], [v1])\n\nSENZING_DATA_FILE_LATEST_VERSION=$(cat $srcdir/versions/senzing/base_data)\nSENZING_PARSER_MODEL_LATEST_VERSION=$(cat $srcdir/versions/senzing/parser)\nSENZING_LANG_CLASS_MODEL_LATEST_VERSION=$(cat $srcdir/versions/senzing/language_classifier)\n\nAC_SUBST([LIBPOSTAL_SENZING_DATA_FILE_LATEST_VERSION], [$SENZING_DATA_FILE_LATEST_VERSION])\nAC_SUBST([LIBPOSTAL_SENZING_PARSER_MODEL_LATEST_VERSION], [$SENZING_PARSER_MODEL_LATEST_VERSION])\nAC_SUBST([LIBPOSTAL_SENZING_LANG_CLASS_MODEL_LATEST_VERSION], [$SENZING_LANG_CLASS_MODEL_LATEST_VERSION])\n\nAC_CONFIG_FILES([Makefile\n                 libpostal.pc\n                 src/Makefile\n                 src/libpostal_data\n                 test/Makefile], [chmod +x src/libpostal_data])\n\nAC_CHECK_PROG([FOUND_SHUF], [shuf], [yes])\nAC_CHECK_PROG([FOUND_GSHUF], [gshuf], [yes])\n\nAS_IF([test \"x$FOUND_SHUF\" = xyes],  [AC_DEFINE([HAVE_SHUF], [1], [shuf available])])\nAS_IF([test \"x$FOUND_GSHUF\" = xyes],  [AC_DEFINE([HAVE_GSHUF], [1], [gshuf available])])\n\n# ------------------------------------------------------------------\n# Checks for SSE2 build\n# ------------------------------------------------------------------\n\nAC_ARG_ENABLE([sse2],\n    AS_HELP_STRING(\n        [--disable-sse2],\n        [disable SSE2 optimization routines]\n        )\n    )\n\nAS_IF([test \"x$enable_sse2\" != \"xno\" && test \"x$(uname -m)\" != \"xarm64\"], [\n    CFLAGS=\"-mfpmath=sse -msse2 -DUSE_SSE ${CFLAGS}\"\n])\n\nAC_CHECK_HEADER(cblas.h, [AX_CBLAS])\n\nAC_ARG_ENABLE([data-download],\n              [  --disable-data-download    Disable downloading data],\n              [case \"${enableval}\" in\n                yes)  DOWNLOAD_DATA=true ;;\n                no) DOWNLOAD_DATA=false ;;\n                *) AC_MSG_ERROR([bad value ${enableval} for --disable-data-download]) ;;\n              esac], [DOWNLOAD_DATA=true])\n\nAC_ARG_VAR(MODEL, [Option to use alternative data models. Currently available is \"senzing\" (MODEL=senzing). If this option is not set the default libpostal data model is used.])\nAS_VAR_IF([MODEL], [], [],\n  [AS_VAR_IF([MODEL], [senzing], [], [AC_MSG_FAILURE([Invalid MODEL value set])])])\n\nAM_CONDITIONAL([DOWNLOAD_DATA], [test \"x$DOWNLOAD_DATA\" = \"xtrue\"])\n\nAC_ARG_WITH(cflags-scanner-extra, [AS_HELP_STRING([--with-cflags-scanner-extra@<:@=VALUE@:>@], [Extra compilation options for scanner.c])],\n[\n if test \"x$withval\" = \"xno\"; then\n    CFLAGS_SCANNER_EXTRA=\"\"\n else\n   CFLAGS_SCANNER_EXTRA=\"$withval\"\n fi\n],\n[ CFLAGS_SCANNER_EXTRA=\"\" ]\n)\n\nAC_MSG_NOTICE([extra cflags for scanner.c: $CFLAGS_SCANNER_EXTRA])\nAC_SUBST(CFLAGS_SCANNER_EXTRA)\nAC_SUBST(LIBPOSTAL_SO_VERSION, LIBPOSTAL_MAJOR_VERSION:LIBPOSTAL_MINOR_VERSION:LIBPOSTAL_PATCH_VERSION)\n\nAC_OUTPUT\n"
        },
        {
          "name": "current_parser_training_set",
          "type": "blob",
          "size": 0.0087890625,
          "content": "20170304\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "libpostal.def",
          "type": "blob",
          "size": 0.5595703125,
          "content": "EXPORTS\nlibpostal_get_default_options\nlibpostal_expand_address\nlibpostal_expansion_array_destroy\nlibpostal_address_parser_response_destroy\nlibpostal_language_classifier_response_destroy\nlibpostal_get_address_parser_default_options\nlibpostal_parse_address\nlibpostal_parser_print_features\nlibpostal_classify_language\nlibpostal_setup\nlibpostal_setup_datadir\nlibpostal_teardown\nlibpostal_setup_parser\nlibpostal_setup_parser_datadir\nlibpostal_teardown_parser\nlibpostal_setup_language_classifier\nlibpostal_setup_language_classifier_datadir\nlibpostal_teardown_language_classifier\n"
        },
        {
          "name": "libpostal.pc.in",
          "type": "blob",
          "size": 0.287109375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: libpostal\nDescription: Fast international street address parsing and normalization using statistical NLP.\nVersion: @PACKAGE_VERSION@\nLibs: -L${libdir} -lpostal\nLibs.private: @LIBS@\nCflags: -I${includedir}\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "versions",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}