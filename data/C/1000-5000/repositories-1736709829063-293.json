{
  "metadata": {
    "timestamp": 1736709829063,
    "page": 293,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gozfree/gear-lib",
      "stars": 3032,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0712890625,
          "content": "#\n# NOTE! Don't add files that are generated in specific\n# subdirectories here. Add them in the \".gitignore\" file\n# in that subdirectory instead.\n#\n# NOTE! Please use 'git ls-files -i --exclude-standard'\n# command after changing this file, to see if there are\n# any tracked files which get ignored after the change.\n#\n# Normal rules\n#\n.*\n*.o\n*.o.*\n*.a\n*.s\n*.ko\n*.so\n*.so.dbg\n*.mod.c\n*.i\n*.lst\n*.symtypes\n*.order\nmodules.builtin\n*.elf\n*.bin\n*.gz\n*.bz2\n*.lzma\n*.xz\n*.lz4\n*.lzo\n*.patch\n*.gcno\n\n#\n# Top-level generic files\n#\n/tags\n/TAGS\n/linux\n/vmlinux\n/vmlinuz\n/System.map\n/Module.markers\n/Module.symvers\n\n#\n# Debian directory (make deb-pkg)\n#\n/debian/\n\n#\n# git files that we don't want to ignore even it they are dot-files\n#\n!.gitignore\n!.mailmap\n\n#\n# Generated include files\n#\ninclude/config\ninclude/generated\narch/*/include/generated\n\n# stgit generated dirs\npatches-*\n\n# quilt's files\npatches\nseries\n\n# cscope files\ncscope.*\nncscope.*\n\n# gnu global files\nGPATH\nGRTAGS\nGSYMS\nGTAGS\n\n*.orig\n*~\n\\#*#\n\n#\n# Leavings from module signing\n#\nextra_certificates\nsigning_key.priv\nsigning_key.x509\nx509.genkey\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.40625,
          "content": "language: c\nbefore_install:\n  - sudo apt-get update -qq\n  - sudo apt-get install -y libjansson-dev\n  - sudo apt-get install -y liblua5.2-dev\n  - sudo apt-get install -y libpulse-dev\n  - sudo apt-get install -y libx264-dev\n  - sudo apt-get install -y libavcodec-dev\n  - sudo apt-get install -y libavformat-dev\n  - sudo apt-get install -y libavutil-dev\n  - sudo apt-get install -y protobuf-compiler\nscript: ./build.sh\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.1171875,
          "content": "CMAKE_MINIMUM_REQUIRED(VERSION 3.0...3.20)\n\nPROJECT(gear-lib)\n\nINCLUDE(build/cmake_env.inc)\n\nADD_SUBDIRECTORY(gear-lib)\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 3.7421875,
          "content": "\n## Supported (on-going)\n| Host OS    |      |                       |        |          |\n|------------|------|-----------------------|--------|----------|\n|PC linux    |cmake |x86_64-w64-mingw32-gcc |gcc     |ndk-build |\n|windows     |cmake |mingw  (not passed)    |MSVC c1 |          |\n|mac         |cmake |gcc                    |        |          |\n|raspberrypi |cmake |arm-gcc                |        |          |\n|esp32       |cmake |xtensa-esp32-elf       |        |          |\n\n### cmake\n   * MSVC on Windows:  \n     `> mkdir build_msvc`  \n     `> cd build_msvc`  \n     `> '/c/Program Files/CMake/bin/cmake.exe' ../`  \n     `> '/c/Program Files/CMake/bin/cmake.exe' --build .`  \n   * MSYS2 on Windows (not portable for all gear-lib):  \n     `$ mkdir build_msys2`  \n     `$ cd build_msys2`  \n     `$ cmake ../`  \n     `$ make && make install`  \n   * Linux:  \n     `$ mkdir build_linux`  \n     `$ cd build_linux`  \n     `$ cmake ../`  \n     `$ make && make install`  \n\n### esp32\n   * toolchain: xtensa-esp32-elf  \n     `git clone https://github.com/espressif/esp-idf.git`  \n    add esp-idf/tools to $PATH  \n    `$ cd build/esp32-env`  \n    `$ make menuconfig`  \n    `$ make flash`  \n\n### Windows\n  * Windows7 install \"Microsoft Visual Studio 10.0\"  \n    open cmd.exe  \n   `> \"D:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\vcvars32.bat\"`  \n   `> cd gear-lib\\libposix\\`  \n   `> nmake /f Makefile.nmake clean`  \n   `> nmake /f Makefile.nmake`  \n   default debug version, compiler release version  \n   `> nmake /f Makefile.nmake clean`  \n   `> nmake /f Makefile.nmake MODE=release`\n   \n### Linux\n  * install third-party libraries  \n   `$ sudo apt install liblua5.2-dev libjansson-dev libpulse-dev libx264-dev libavcodec-dev libavformat-dev libavutil-dev libuvc-dev protobuf-compiler`\n\n  * linux platform (>= Ubuntu14.04 >= gcc-4.8.4 32/64 bit)  \n   `$ ./build.sh`  \n   `$ sudo ./build.sh install`  \n   default debug version，compiler release version  \n   `$ ./build.sh {all|libxxx} linux release`   \n   `$ sudo ./build.sh install linux release`  \n   \n  * host(linux) target(rasberrypi)  \n    (you need download [toolchain of rasberrypi](https://github.com/raspberrypi/tools.git))  \n   `$ ./build.sh all pi`  \n   default debug version，compiler release version  \n   `$ ./build.sh {all|libxxx} pi release`  \n\n  * host(rasberrypi board)  \n   `$ ./build.sh`  \n   `$ sudo ./build.sh install`  \n   default debug version，compiler release version  \n   `$ ./build.sh {all|libxxx} linux release`  \n   `$ sudo ./build.sh install linux release`  \n\n  * android arm cross compile  \n   (you need download [android-ndk-r9-linux-x86_64.tar.bz2](http://dl.google.com/android/ndk/android-ndk-r9-linux-x86_64.tar.bz2))  \n   `$ ./build.sh all android`  \n   default debug version，compiler release version  \n   `$ ./build.sh {all|libxxx} android release`  \n   \n  * android naitve develop  \n    also need ndk tools  \n   `$ cd android_jni_libs`  \n   `$ ndk-build`  \n   default debug version，compiler release version  \n   `$ ndk-build MODE=release`  \n   After install, the libxxx.xx will be installed in /usr/local/lib/.  \n   libxxx.h, libxxx.so or libxxx.a of libraries are also in ./output/$(ARCH)  \n\n## How To Autogen C template code\n   If you want to add your own library into the build script, no need repeat the same code, only auto gen libxxx framework.  \n  `$ ./build/autogen_lib.sh libfoo`\n\n## About Build\n  * by default, build x86 on linux, and libxxx folder can be built independently\n  * if only \"libxxx folder\" is checkout without \"build folder\", you can only build x86 and no color set\n  * with \"build folder\", you can build x86, pi, android, ios and color is also set\n  * \"sudo make install\" is needed when build libxxx alone.\n\n## dependency\n  * plantuml -tsvg dependency.txt  \n  ![dependency](build/dependency.svg)  \n"
        },
        {
          "name": "LICENSE.MIT",
          "type": "blob",
          "size": 1.0537109375,
          "content": "Copyright (C) 2014-2020 Zhifeng Gong <gozfree@163.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 25.9521484375,
          "content": "# CMAKE generated file: DO NOT EDIT!\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.10\n\n# Default target executed when no arguments are given to make.\ndefault_target: all\n\n.PHONY : default_target\n\n# Allow only one \"make -f Makefile2\" at a time, but pass parallelism.\n.NOTPARALLEL:\n\n\n#=============================================================================\n# Special targets provided by cmake.\n\n# Disable implicit rules so canonical targets will work.\n.SUFFIXES:\n\n\n# Remove some rules from gmake that .SUFFIXES does not remove.\nSUFFIXES =\n\n.SUFFIXES: .hpux_make_needs_suffix_list\n\n\n# Suppress display of executed commands.\n$(VERBOSE).SILENT:\n\n\n# A target that is always out of date.\ncmake_force:\n\n.PHONY : cmake_force\n\n#=============================================================================\n# Set environment variables for the build.\n\n# The shell in which to execute make rules.\nSHELL = /bin/sh\n\n# The CMake executable.\nCMAKE_COMMAND = /usr/bin/cmake\n\n# The command to remove a file.\nRM = /usr/bin/cmake -E remove -f\n\n# Escaping for special characters.\nEQUALS = =\n\n# The top-level source directory on which CMake was run.\nCMAKE_SOURCE_DIR = /home/hacker/github/snowball.repo/gear-lib\n\n# The top-level build directory on which CMake was run.\nCMAKE_BINARY_DIR = /home/hacker/github/snowball.repo/gear-lib\n\n#=============================================================================\n# Targets provided globally by CMake.\n\n# Special rule for the target rebuild_cache\nrebuild_cache:\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan \"Running CMake to regenerate build system...\"\n\t/usr/bin/cmake -H$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)\n.PHONY : rebuild_cache\n\n# Special rule for the target rebuild_cache\nrebuild_cache/fast: rebuild_cache\n\n.PHONY : rebuild_cache/fast\n\n# Special rule for the target edit_cache\nedit_cache:\n\t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan \"No interactive CMake dialog available...\"\n\t/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.\n.PHONY : edit_cache\n\n# Special rule for the target edit_cache\nedit_cache/fast: edit_cache\n\n.PHONY : edit_cache/fast\n\n# The main all target\nall: cmake_check_build_system\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/hacker/github/snowball.repo/gear-lib/CMakeFiles /home/hacker/github/snowball.repo/gear-lib/CMakeFiles/progress.marks\n\t$(MAKE) -f CMakeFiles/Makefile2 all\n\t$(CMAKE_COMMAND) -E cmake_progress_start /home/hacker/github/snowball.repo/gear-lib/CMakeFiles 0\n.PHONY : all\n\n# The main clean target\nclean:\n\t$(MAKE) -f CMakeFiles/Makefile2 clean\n.PHONY : clean\n\n# The main clean target\nclean/fast: clean\n\n.PHONY : clean/fast\n\n# Prepare targets for installation.\npreinstall: all\n\t$(MAKE) -f CMakeFiles/Makefile2 preinstall\n.PHONY : preinstall\n\n# Prepare targets for installation.\npreinstall/fast:\n\t$(MAKE) -f CMakeFiles/Makefile2 preinstall\n.PHONY : preinstall/fast\n\n# clear depends\ndepend:\n\t$(CMAKE_COMMAND) -H$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1\n.PHONY : depend\n\n#=============================================================================\n# Target rules for targets named file\n\n# Build rule for target.\nfile: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 file\n.PHONY : file\n\n# fast build rule for target.\nfile/fast:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/build\n.PHONY : file/fast\n\n#=============================================================================\n# Target rules for targets named ipc\n\n# Build rule for target.\nipc: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 ipc\n.PHONY : ipc\n\n# fast build rule for target.\nipc/fast:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/build\n.PHONY : ipc/fast\n\n#=============================================================================\n# Target rules for targets named vector\n\n# Build rule for target.\nvector: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 vector\n.PHONY : vector\n\n# fast build rule for target.\nvector/fast:\n\t$(MAKE) -f CMakeFiles/vector.dir/build.make CMakeFiles/vector.dir/build\n.PHONY : vector/fast\n\n#=============================================================================\n# Target rules for targets named queue\n\n# Build rule for target.\nqueue: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 queue\n.PHONY : queue\n\n# fast build rule for target.\nqueue/fast:\n\t$(MAKE) -f CMakeFiles/queue.dir/build.make CMakeFiles/queue.dir/build\n.PHONY : queue/fast\n\n#=============================================================================\n# Target rules for targets named hash\n\n# Build rule for target.\nhash: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 hash\n.PHONY : hash\n\n# fast build rule for target.\nhash/fast:\n\t$(MAKE) -f CMakeFiles/hash.dir/build.make CMakeFiles/hash.dir/build\n.PHONY : hash/fast\n\n#=============================================================================\n# Target rules for targets named media-io\n\n# Build rule for target.\nmedia-io: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 media-io\n.PHONY : media-io\n\n# fast build rule for target.\nmedia-io/fast:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/build\n.PHONY : media-io/fast\n\n#=============================================================================\n# Target rules for targets named dict\n\n# Build rule for target.\ndict: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 dict\n.PHONY : dict\n\n# fast build rule for target.\ndict/fast:\n\t$(MAKE) -f CMakeFiles/dict.dir/build.make CMakeFiles/dict.dir/build\n.PHONY : dict/fast\n\n#=============================================================================\n# Target rules for targets named posix\n\n# Build rule for target.\nposix: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 posix\n.PHONY : posix\n\n# fast build rule for target.\nposix/fast:\n\t$(MAKE) -f CMakeFiles/posix.dir/build.make CMakeFiles/posix.dir/build\n.PHONY : posix/fast\n\n#=============================================================================\n# Target rules for targets named darray\n\n# Build rule for target.\ndarray: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 darray\n.PHONY : darray\n\n# fast build rule for target.\ndarray/fast:\n\t$(MAKE) -f CMakeFiles/darray.dir/build.make CMakeFiles/darray.dir/build\n.PHONY : darray/fast\n\n#=============================================================================\n# Target rules for targets named log\n\n# Build rule for target.\nlog: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 log\n.PHONY : log\n\n# fast build rule for target.\nlog/fast:\n\t$(MAKE) -f CMakeFiles/log.dir/build.make CMakeFiles/log.dir/build\n.PHONY : log/fast\n\n#=============================================================================\n# Target rules for targets named gevent\n\n# Build rule for target.\ngevent: cmake_check_build_system\n\t$(MAKE) -f CMakeFiles/Makefile2 gevent\n.PHONY : gevent\n\n# fast build rule for target.\ngevent/fast:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/build\n.PHONY : gevent/fast\n\nsrc/audio-def.o: src/audio-def.c.o\n\n.PHONY : src/audio-def.o\n\n# target to build an object file\nsrc/audio-def.c.o:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/audio-def.c.o\n.PHONY : src/audio-def.c.o\n\nsrc/audio-def.i: src/audio-def.c.i\n\n.PHONY : src/audio-def.i\n\n# target to preprocess a source file\nsrc/audio-def.c.i:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/audio-def.c.i\n.PHONY : src/audio-def.c.i\n\nsrc/audio-def.s: src/audio-def.c.s\n\n.PHONY : src/audio-def.s\n\n# target to generate assembly for a file\nsrc/audio-def.c.s:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/audio-def.c.s\n.PHONY : src/audio-def.c.s\n\nsrc/epoll.o: src/epoll.c.o\n\n.PHONY : src/epoll.o\n\n# target to build an object file\nsrc/epoll.c.o:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/epoll.c.o\n.PHONY : src/epoll.c.o\n\nsrc/epoll.i: src/epoll.c.i\n\n.PHONY : src/epoll.i\n\n# target to preprocess a source file\nsrc/epoll.c.i:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/epoll.c.i\n.PHONY : src/epoll.c.i\n\nsrc/epoll.s: src/epoll.c.s\n\n.PHONY : src/epoll.s\n\n# target to generate assembly for a file\nsrc/epoll.c.s:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/epoll.c.s\n.PHONY : src/epoll.c.s\n\nsrc/filewatcher.o: src/filewatcher.c.o\n\n.PHONY : src/filewatcher.o\n\n# target to build an object file\nsrc/filewatcher.c.o:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/filewatcher.c.o\n.PHONY : src/filewatcher.c.o\n\nsrc/filewatcher.i: src/filewatcher.c.i\n\n.PHONY : src/filewatcher.i\n\n# target to preprocess a source file\nsrc/filewatcher.c.i:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/filewatcher.c.i\n.PHONY : src/filewatcher.c.i\n\nsrc/filewatcher.s: src/filewatcher.c.s\n\n.PHONY : src/filewatcher.s\n\n# target to generate assembly for a file\nsrc/filewatcher.c.s:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/filewatcher.c.s\n.PHONY : src/filewatcher.c.s\n\nsrc/fio.o: src/fio.c.o\n\n.PHONY : src/fio.o\n\n# target to build an object file\nsrc/fio.c.o:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/fio.c.o\n.PHONY : src/fio.c.o\n\nsrc/fio.i: src/fio.c.i\n\n.PHONY : src/fio.i\n\n# target to preprocess a source file\nsrc/fio.c.i:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/fio.c.i\n.PHONY : src/fio.c.i\n\nsrc/fio.s: src/fio.c.s\n\n.PHONY : src/fio.s\n\n# target to generate assembly for a file\nsrc/fio.c.s:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/fio.c.s\n.PHONY : src/fio.c.s\n\nsrc/io.o: src/io.c.o\n\n.PHONY : src/io.o\n\n# target to build an object file\nsrc/io.c.o:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/io.c.o\n.PHONY : src/io.c.o\n\nsrc/io.i: src/io.c.i\n\n.PHONY : src/io.i\n\n# target to preprocess a source file\nsrc/io.c.i:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/io.c.i\n.PHONY : src/io.c.i\n\nsrc/io.s: src/io.c.s\n\n.PHONY : src/io.s\n\n# target to generate assembly for a file\nsrc/io.c.s:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/io.c.s\n.PHONY : src/io.c.s\n\nsrc/libdarray.o: src/libdarray.c.o\n\n.PHONY : src/libdarray.o\n\n# target to build an object file\nsrc/libdarray.c.o:\n\t$(MAKE) -f CMakeFiles/darray.dir/build.make CMakeFiles/darray.dir/src/libdarray.c.o\n.PHONY : src/libdarray.c.o\n\nsrc/libdarray.i: src/libdarray.c.i\n\n.PHONY : src/libdarray.i\n\n# target to preprocess a source file\nsrc/libdarray.c.i:\n\t$(MAKE) -f CMakeFiles/darray.dir/build.make CMakeFiles/darray.dir/src/libdarray.c.i\n.PHONY : src/libdarray.c.i\n\nsrc/libdarray.s: src/libdarray.c.s\n\n.PHONY : src/libdarray.s\n\n# target to generate assembly for a file\nsrc/libdarray.c.s:\n\t$(MAKE) -f CMakeFiles/darray.dir/build.make CMakeFiles/darray.dir/src/libdarray.c.s\n.PHONY : src/libdarray.c.s\n\nsrc/libdict.o: src/libdict.c.o\n\n.PHONY : src/libdict.o\n\n# target to build an object file\nsrc/libdict.c.o:\n\t$(MAKE) -f CMakeFiles/dict.dir/build.make CMakeFiles/dict.dir/src/libdict.c.o\n.PHONY : src/libdict.c.o\n\nsrc/libdict.i: src/libdict.c.i\n\n.PHONY : src/libdict.i\n\n# target to preprocess a source file\nsrc/libdict.c.i:\n\t$(MAKE) -f CMakeFiles/dict.dir/build.make CMakeFiles/dict.dir/src/libdict.c.i\n.PHONY : src/libdict.c.i\n\nsrc/libdict.s: src/libdict.c.s\n\n.PHONY : src/libdict.s\n\n# target to generate assembly for a file\nsrc/libdict.c.s:\n\t$(MAKE) -f CMakeFiles/dict.dir/build.make CMakeFiles/dict.dir/src/libdict.c.s\n.PHONY : src/libdict.c.s\n\nsrc/libfile.o: src/libfile.c.o\n\n.PHONY : src/libfile.o\n\n# target to build an object file\nsrc/libfile.c.o:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/libfile.c.o\n.PHONY : src/libfile.c.o\n\nsrc/libfile.i: src/libfile.c.i\n\n.PHONY : src/libfile.i\n\n# target to preprocess a source file\nsrc/libfile.c.i:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/libfile.c.i\n.PHONY : src/libfile.c.i\n\nsrc/libfile.s: src/libfile.c.s\n\n.PHONY : src/libfile.s\n\n# target to generate assembly for a file\nsrc/libfile.c.s:\n\t$(MAKE) -f CMakeFiles/file.dir/build.make CMakeFiles/file.dir/src/libfile.c.s\n.PHONY : src/libfile.c.s\n\nsrc/libgevent.o: src/libgevent.c.o\n\n.PHONY : src/libgevent.o\n\n# target to build an object file\nsrc/libgevent.c.o:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/libgevent.c.o\n.PHONY : src/libgevent.c.o\n\nsrc/libgevent.i: src/libgevent.c.i\n\n.PHONY : src/libgevent.i\n\n# target to preprocess a source file\nsrc/libgevent.c.i:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/libgevent.c.i\n.PHONY : src/libgevent.c.i\n\nsrc/libgevent.s: src/libgevent.c.s\n\n.PHONY : src/libgevent.s\n\n# target to generate assembly for a file\nsrc/libgevent.c.s:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/libgevent.c.s\n.PHONY : src/libgevent.c.s\n\nsrc/libhash.o: src/libhash.c.o\n\n.PHONY : src/libhash.o\n\n# target to build an object file\nsrc/libhash.c.o:\n\t$(MAKE) -f CMakeFiles/hash.dir/build.make CMakeFiles/hash.dir/src/libhash.c.o\n.PHONY : src/libhash.c.o\n\nsrc/libhash.i: src/libhash.c.i\n\n.PHONY : src/libhash.i\n\n# target to preprocess a source file\nsrc/libhash.c.i:\n\t$(MAKE) -f CMakeFiles/hash.dir/build.make CMakeFiles/hash.dir/src/libhash.c.i\n.PHONY : src/libhash.c.i\n\nsrc/libhash.s: src/libhash.c.s\n\n.PHONY : src/libhash.s\n\n# target to generate assembly for a file\nsrc/libhash.c.s:\n\t$(MAKE) -f CMakeFiles/hash.dir/build.make CMakeFiles/hash.dir/src/libhash.c.s\n.PHONY : src/libhash.c.s\n\nsrc/libipc.o: src/libipc.c.o\n\n.PHONY : src/libipc.o\n\n# target to build an object file\nsrc/libipc.c.o:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/libipc.c.o\n.PHONY : src/libipc.c.o\n\nsrc/libipc.i: src/libipc.c.i\n\n.PHONY : src/libipc.i\n\n# target to preprocess a source file\nsrc/libipc.c.i:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/libipc.c.i\n.PHONY : src/libipc.c.i\n\nsrc/libipc.s: src/libipc.c.s\n\n.PHONY : src/libipc.s\n\n# target to generate assembly for a file\nsrc/libipc.c.s:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/libipc.c.s\n.PHONY : src/libipc.c.s\n\nsrc/liblog.o: src/liblog.c.o\n\n.PHONY : src/liblog.o\n\n# target to build an object file\nsrc/liblog.c.o:\n\t$(MAKE) -f CMakeFiles/log.dir/build.make CMakeFiles/log.dir/src/liblog.c.o\n.PHONY : src/liblog.c.o\n\nsrc/liblog.i: src/liblog.c.i\n\n.PHONY : src/liblog.i\n\n# target to preprocess a source file\nsrc/liblog.c.i:\n\t$(MAKE) -f CMakeFiles/log.dir/build.make CMakeFiles/log.dir/src/liblog.c.i\n.PHONY : src/liblog.c.i\n\nsrc/liblog.s: src/liblog.c.s\n\n.PHONY : src/liblog.s\n\n# target to generate assembly for a file\nsrc/liblog.c.s:\n\t$(MAKE) -f CMakeFiles/log.dir/build.make CMakeFiles/log.dir/src/liblog.c.s\n.PHONY : src/liblog.c.s\n\nsrc/libmedia-io.o: src/libmedia-io.c.o\n\n.PHONY : src/libmedia-io.o\n\n# target to build an object file\nsrc/libmedia-io.c.o:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/libmedia-io.c.o\n.PHONY : src/libmedia-io.c.o\n\nsrc/libmedia-io.i: src/libmedia-io.c.i\n\n.PHONY : src/libmedia-io.i\n\n# target to preprocess a source file\nsrc/libmedia-io.c.i:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/libmedia-io.c.i\n.PHONY : src/libmedia-io.c.i\n\nsrc/libmedia-io.s: src/libmedia-io.c.s\n\n.PHONY : src/libmedia-io.s\n\n# target to generate assembly for a file\nsrc/libmedia-io.c.s:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/libmedia-io.c.s\n.PHONY : src/libmedia-io.c.s\n\nsrc/libposix.o: src/libposix.c.o\n\n.PHONY : src/libposix.o\n\n# target to build an object file\nsrc/libposix.c.o:\n\t$(MAKE) -f CMakeFiles/posix.dir/build.make CMakeFiles/posix.dir/src/libposix.c.o\n.PHONY : src/libposix.c.o\n\nsrc/libposix.i: src/libposix.c.i\n\n.PHONY : src/libposix.i\n\n# target to preprocess a source file\nsrc/libposix.c.i:\n\t$(MAKE) -f CMakeFiles/posix.dir/build.make CMakeFiles/posix.dir/src/libposix.c.i\n.PHONY : src/libposix.c.i\n\nsrc/libposix.s: src/libposix.c.s\n\n.PHONY : src/libposix.s\n\n# target to generate assembly for a file\nsrc/libposix.c.s:\n\t$(MAKE) -f CMakeFiles/posix.dir/build.make CMakeFiles/posix.dir/src/libposix.c.s\n.PHONY : src/libposix.c.s\n\nsrc/libqueue.o: src/libqueue.c.o\n\n.PHONY : src/libqueue.o\n\n# target to build an object file\nsrc/libqueue.c.o:\n\t$(MAKE) -f CMakeFiles/queue.dir/build.make CMakeFiles/queue.dir/src/libqueue.c.o\n.PHONY : src/libqueue.c.o\n\nsrc/libqueue.i: src/libqueue.c.i\n\n.PHONY : src/libqueue.i\n\n# target to preprocess a source file\nsrc/libqueue.c.i:\n\t$(MAKE) -f CMakeFiles/queue.dir/build.make CMakeFiles/queue.dir/src/libqueue.c.i\n.PHONY : src/libqueue.c.i\n\nsrc/libqueue.s: src/libqueue.c.s\n\n.PHONY : src/libqueue.s\n\n# target to generate assembly for a file\nsrc/libqueue.c.s:\n\t$(MAKE) -f CMakeFiles/queue.dir/build.make CMakeFiles/queue.dir/src/libqueue.c.s\n.PHONY : src/libqueue.c.s\n\nsrc/libserializer.o: src/libserializer.c.o\n\n.PHONY : src/libserializer.o\n\n# target to build an object file\nsrc/libserializer.c.o:\n\t$(MAKE) -f CMakeFiles/darray.dir/build.make CMakeFiles/darray.dir/src/libserializer.c.o\n.PHONY : src/libserializer.c.o\n\nsrc/libserializer.i: src/libserializer.c.i\n\n.PHONY : src/libserializer.i\n\n# target to preprocess a source file\nsrc/libserializer.c.i:\n\t$(MAKE) -f CMakeFiles/darray.dir/build.make CMakeFiles/darray.dir/src/libserializer.c.i\n.PHONY : src/libserializer.c.i\n\nsrc/libserializer.s: src/libserializer.c.s\n\n.PHONY : src/libserializer.s\n\n# target to generate assembly for a file\nsrc/libserializer.c.s:\n\t$(MAKE) -f CMakeFiles/darray.dir/build.make CMakeFiles/darray.dir/src/libserializer.c.s\n.PHONY : src/libserializer.c.s\n\nsrc/libvector.o: src/libvector.c.o\n\n.PHONY : src/libvector.o\n\n# target to build an object file\nsrc/libvector.c.o:\n\t$(MAKE) -f CMakeFiles/vector.dir/build.make CMakeFiles/vector.dir/src/libvector.c.o\n.PHONY : src/libvector.c.o\n\nsrc/libvector.i: src/libvector.c.i\n\n.PHONY : src/libvector.i\n\n# target to preprocess a source file\nsrc/libvector.c.i:\n\t$(MAKE) -f CMakeFiles/vector.dir/build.make CMakeFiles/vector.dir/src/libvector.c.i\n.PHONY : src/libvector.c.i\n\nsrc/libvector.s: src/libvector.c.s\n\n.PHONY : src/libvector.s\n\n# target to generate assembly for a file\nsrc/libvector.c.s:\n\t$(MAKE) -f CMakeFiles/vector.dir/build.make CMakeFiles/vector.dir/src/libvector.c.s\n.PHONY : src/libvector.c.s\n\nsrc/msgq_posix.o: src/msgq_posix.c.o\n\n.PHONY : src/msgq_posix.o\n\n# target to build an object file\nsrc/msgq_posix.c.o:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/msgq_posix.c.o\n.PHONY : src/msgq_posix.c.o\n\nsrc/msgq_posix.i: src/msgq_posix.c.i\n\n.PHONY : src/msgq_posix.i\n\n# target to preprocess a source file\nsrc/msgq_posix.c.i:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/msgq_posix.c.i\n.PHONY : src/msgq_posix.c.i\n\nsrc/msgq_posix.s: src/msgq_posix.c.s\n\n.PHONY : src/msgq_posix.s\n\n# target to generate assembly for a file\nsrc/msgq_posix.c.s:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/msgq_posix.c.s\n.PHONY : src/msgq_posix.c.s\n\nsrc/msgq_sysv.o: src/msgq_sysv.c.o\n\n.PHONY : src/msgq_sysv.o\n\n# target to build an object file\nsrc/msgq_sysv.c.o:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/msgq_sysv.c.o\n.PHONY : src/msgq_sysv.c.o\n\nsrc/msgq_sysv.i: src/msgq_sysv.c.i\n\n.PHONY : src/msgq_sysv.i\n\n# target to preprocess a source file\nsrc/msgq_sysv.c.i:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/msgq_sysv.c.i\n.PHONY : src/msgq_sysv.c.i\n\nsrc/msgq_sysv.s: src/msgq_sysv.c.s\n\n.PHONY : src/msgq_sysv.s\n\n# target to generate assembly for a file\nsrc/msgq_sysv.c.s:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/msgq_sysv.c.s\n.PHONY : src/msgq_sysv.c.s\n\nsrc/netlink.o: src/netlink.c.o\n\n.PHONY : src/netlink.o\n\n# target to build an object file\nsrc/netlink.c.o:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/netlink.c.o\n.PHONY : src/netlink.c.o\n\nsrc/netlink.i: src/netlink.c.i\n\n.PHONY : src/netlink.i\n\n# target to preprocess a source file\nsrc/netlink.c.i:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/netlink.c.i\n.PHONY : src/netlink.c.i\n\nsrc/netlink.s: src/netlink.c.s\n\n.PHONY : src/netlink.s\n\n# target to generate assembly for a file\nsrc/netlink.c.s:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/netlink.c.s\n.PHONY : src/netlink.c.s\n\nsrc/poll.o: src/poll.c.o\n\n.PHONY : src/poll.o\n\n# target to build an object file\nsrc/poll.c.o:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/poll.c.o\n.PHONY : src/poll.c.o\n\nsrc/poll.i: src/poll.c.i\n\n.PHONY : src/poll.i\n\n# target to preprocess a source file\nsrc/poll.c.i:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/poll.c.i\n.PHONY : src/poll.c.i\n\nsrc/poll.s: src/poll.c.s\n\n.PHONY : src/poll.s\n\n# target to generate assembly for a file\nsrc/poll.c.s:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/poll.c.s\n.PHONY : src/poll.c.s\n\nsrc/select.o: src/select.c.o\n\n.PHONY : src/select.o\n\n# target to build an object file\nsrc/select.c.o:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/select.c.o\n.PHONY : src/select.c.o\n\nsrc/select.i: src/select.c.i\n\n.PHONY : src/select.i\n\n# target to preprocess a source file\nsrc/select.c.i:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/select.c.i\n.PHONY : src/select.c.i\n\nsrc/select.s: src/select.c.s\n\n.PHONY : src/select.s\n\n# target to generate assembly for a file\nsrc/select.c.s:\n\t$(MAKE) -f CMakeFiles/gevent.dir/build.make CMakeFiles/gevent.dir/src/select.c.s\n.PHONY : src/select.c.s\n\nsrc/shm.o: src/shm.c.o\n\n.PHONY : src/shm.o\n\n# target to build an object file\nsrc/shm.c.o:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/shm.c.o\n.PHONY : src/shm.c.o\n\nsrc/shm.i: src/shm.c.i\n\n.PHONY : src/shm.i\n\n# target to preprocess a source file\nsrc/shm.c.i:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/shm.c.i\n.PHONY : src/shm.c.i\n\nsrc/shm.s: src/shm.c.s\n\n.PHONY : src/shm.s\n\n# target to generate assembly for a file\nsrc/shm.c.s:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/shm.c.s\n.PHONY : src/shm.c.s\n\nsrc/unix_socket.o: src/unix_socket.c.o\n\n.PHONY : src/unix_socket.o\n\n# target to build an object file\nsrc/unix_socket.c.o:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/unix_socket.c.o\n.PHONY : src/unix_socket.c.o\n\nsrc/unix_socket.i: src/unix_socket.c.i\n\n.PHONY : src/unix_socket.i\n\n# target to preprocess a source file\nsrc/unix_socket.c.i:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/unix_socket.c.i\n.PHONY : src/unix_socket.c.i\n\nsrc/unix_socket.s: src/unix_socket.c.s\n\n.PHONY : src/unix_socket.s\n\n# target to generate assembly for a file\nsrc/unix_socket.c.s:\n\t$(MAKE) -f CMakeFiles/ipc.dir/build.make CMakeFiles/ipc.dir/src/unix_socket.c.s\n.PHONY : src/unix_socket.c.s\n\nsrc/video-def.o: src/video-def.c.o\n\n.PHONY : src/video-def.o\n\n# target to build an object file\nsrc/video-def.c.o:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/video-def.c.o\n.PHONY : src/video-def.c.o\n\nsrc/video-def.i: src/video-def.c.i\n\n.PHONY : src/video-def.i\n\n# target to preprocess a source file\nsrc/video-def.c.i:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/video-def.c.i\n.PHONY : src/video-def.c.i\n\nsrc/video-def.s: src/video-def.c.s\n\n.PHONY : src/video-def.s\n\n# target to generate assembly for a file\nsrc/video-def.c.s:\n\t$(MAKE) -f CMakeFiles/media-io.dir/build.make CMakeFiles/media-io.dir/src/video-def.c.s\n.PHONY : src/video-def.c.s\n\n# Help Target\nhelp:\n\t@echo \"The following are some of the valid targets for this Makefile:\"\n\t@echo \"... all (the default if no target is provided)\"\n\t@echo \"... clean\"\n\t@echo \"... depend\"\n\t@echo \"... rebuild_cache\"\n\t@echo \"... file\"\n\t@echo \"... ipc\"\n\t@echo \"... vector\"\n\t@echo \"... queue\"\n\t@echo \"... hash\"\n\t@echo \"... media-io\"\n\t@echo \"... dict\"\n\t@echo \"... posix\"\n\t@echo \"... edit_cache\"\n\t@echo \"... darray\"\n\t@echo \"... log\"\n\t@echo \"... gevent\"\n\t@echo \"... src/audio-def.o\"\n\t@echo \"... src/audio-def.i\"\n\t@echo \"... src/audio-def.s\"\n\t@echo \"... src/epoll.o\"\n\t@echo \"... src/epoll.i\"\n\t@echo \"... src/epoll.s\"\n\t@echo \"... src/filewatcher.o\"\n\t@echo \"... src/filewatcher.i\"\n\t@echo \"... src/filewatcher.s\"\n\t@echo \"... src/fio.o\"\n\t@echo \"... src/fio.i\"\n\t@echo \"... src/fio.s\"\n\t@echo \"... src/io.o\"\n\t@echo \"... src/io.i\"\n\t@echo \"... src/io.s\"\n\t@echo \"... src/libdarray.o\"\n\t@echo \"... src/libdarray.i\"\n\t@echo \"... src/libdarray.s\"\n\t@echo \"... src/libdict.o\"\n\t@echo \"... src/libdict.i\"\n\t@echo \"... src/libdict.s\"\n\t@echo \"... src/libfile.o\"\n\t@echo \"... src/libfile.i\"\n\t@echo \"... src/libfile.s\"\n\t@echo \"... src/libgevent.o\"\n\t@echo \"... src/libgevent.i\"\n\t@echo \"... src/libgevent.s\"\n\t@echo \"... src/libhash.o\"\n\t@echo \"... src/libhash.i\"\n\t@echo \"... src/libhash.s\"\n\t@echo \"... src/libipc.o\"\n\t@echo \"... src/libipc.i\"\n\t@echo \"... src/libipc.s\"\n\t@echo \"... src/liblog.o\"\n\t@echo \"... src/liblog.i\"\n\t@echo \"... src/liblog.s\"\n\t@echo \"... src/libmedia-io.o\"\n\t@echo \"... src/libmedia-io.i\"\n\t@echo \"... src/libmedia-io.s\"\n\t@echo \"... src/libposix.o\"\n\t@echo \"... src/libposix.i\"\n\t@echo \"... src/libposix.s\"\n\t@echo \"... src/libqueue.o\"\n\t@echo \"... src/libqueue.i\"\n\t@echo \"... src/libqueue.s\"\n\t@echo \"... src/libserializer.o\"\n\t@echo \"... src/libserializer.i\"\n\t@echo \"... src/libserializer.s\"\n\t@echo \"... src/libvector.o\"\n\t@echo \"... src/libvector.i\"\n\t@echo \"... src/libvector.s\"\n\t@echo \"... src/msgq_posix.o\"\n\t@echo \"... src/msgq_posix.i\"\n\t@echo \"... src/msgq_posix.s\"\n\t@echo \"... src/msgq_sysv.o\"\n\t@echo \"... src/msgq_sysv.i\"\n\t@echo \"... src/msgq_sysv.s\"\n\t@echo \"... src/netlink.o\"\n\t@echo \"... src/netlink.i\"\n\t@echo \"... src/netlink.s\"\n\t@echo \"... src/poll.o\"\n\t@echo \"... src/poll.i\"\n\t@echo \"... src/poll.s\"\n\t@echo \"... src/select.o\"\n\t@echo \"... src/select.i\"\n\t@echo \"... src/select.s\"\n\t@echo \"... src/shm.o\"\n\t@echo \"... src/shm.i\"\n\t@echo \"... src/shm.s\"\n\t@echo \"... src/unix_socket.o\"\n\t@echo \"... src/unix_socket.i\"\n\t@echo \"... src/unix_socket.s\"\n\t@echo \"... src/video-def.o\"\n\t@echo \"... src/video-def.i\"\n\t@echo \"... src/video-def.s\"\n.PHONY : help\n\n\n\n#=============================================================================\n# Special targets to cleanup operation of make.\n\n# Special rule to run CMake to check the build system integrity.\n# No rule that depends on this can have commands that come from listfiles\n# because they might be regenerated.\ncmake_check_build_system:\n\t$(CMAKE_COMMAND) -H$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0\n.PHONY : cmake_check_build_system\n\n"
        },
        {
          "name": "README.cn.md",
          "type": "blob",
          "size": 2.197265625,
          "content": "# Gear-Lib\n\n[English](README.md) | 简体中文\n\n[![Build](https://travis-ci.org/gozfree/gear-lib.svg?branch=master)](https://travis-ci.org/gozfree/gear-lib)\n[![Release](https://img.shields.io/github/release/gozfree/gear-lib.svg)](https://github.com/gozfree/gear-lib/releases)\n[![License](https://img.shields.io/github/license/gozfree/gear-lib.svg)](https://github.com/gozfree/gear-lib/blob/master/LICENSE.MIT)\n\n这是一组通用的Ｃ基础库\n* 全部用POSIX C实现，目标是为了跨平台兼容linux, windows, android, ios.\n* 适用于物联网，嵌入式，以及网络服务开发等场景\n\n![struct](./build/gear-lib.png)\n\n## 数据结构\n|  |  |\n|--|--|\n| libdict: 哈希字典 | libhash: linux内核原生哈希库 |\n| libringbuffer: 循环缓冲 | libqueue: 数据队列 |\n| librbtree: 内核rbtree | libsort: |\n| libvector: 容器库 | libdarray: 动态数组 |\n\n## 网络库\n|  |  |\n|--|--|\n| librtsp: RTSP协议，适合IPCamera和NVR开发 | librtmpc: RTMP协议，适合推流直播 |\n| libsock: Socket封装 | librpc: 远程过程调用库 |\n| libipc: 进程间通信 | libp2p: p2p穿透传输 |\n| libmqttc: MQTT客户端协议 | libhomekit: Apple homekit协议库 |\n\n## 异步\n|  |  |\n|--|--|\n| libgevent: 事件驱动 | libthread: 线程 |\n| libworkq: 工作队列 | |\n\n## I/O\n|  |  |\n|--|--|\n| libstrex: 字符扩展 | libconfig: 配置文件库 |\n| liblog: 日志库 | libfile: 文件操作库 |\n| libsubmask: 网络地址翻译 | |\n\n## 多媒体\n|  |  |\n|--|--|\n| libavcap: 音频视频捕获库 | libmp4: MP4录制解析库 |\n| libjpeg-ex: | libmedia-io: 音频视频格式定义 |\n\n## 系统抽象层\n|  |  |\n|--|--|\n| libposix: windows/rtos/ios平台posix适配库 |\n\n## 其他\n|  |  |\n|--|--|\n| libdebug: 调试辅助库 | libhal: 硬件抽象层 |\n| libplugin: 动态加载库 | libtime: 时间库 |\n| libfsm: 有限状态机 | |\n\n## 编译方法\n详细请参考[INSTALL.md](https://github.com/gozfree/gear-lib/blob/master/INSTALL.md)\n\n## License\n详细请参考[LICENSE](https://github.com/gozfree/gear-lib/blob/master/LICENSE.MIT)\n\n## 联系交流\n* 邮箱: gozfree@163.com\n* QQ 群: 695515645\n* Github: [gear-lib](https://github.com/gozfree/gear-lib)\n* 码云主页: [gear-lib](https://gitee.com/gozfreee/gear-lib)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5810546875,
          "content": "# Gear-Lib\n\nEnglish | [简体中文](README.cn.md)\n\n[![Build](https://travis-ci.org/gozfree/gear-lib.svg?branch=master)](https://travis-ci.org/gozfree/gear-lib)\n[![Release](https://img.shields.io/github/release/gozfree/gear-lib.svg)](https://github.com/gozfree/gear-lib/releases)\n[![License](https://img.shields.io/github/license/gozfree/gear-lib.svg)](https://github.com/gozfree/gear-lib/blob/master/LICENSE.MIT)\n\nThis is a collection of basic libraries.\n* All are written in POSIX C, aim to used compatibility on linux, windows, android, ios.\n* Aim to reuse for IOT, embedded and network service development\n\n![struct](./build/gear-lib.png)\n\n## Data Struct\n|  |  |\n|--|--|\n| libdict: Hash key-value dictonary library | libhash: Hash key-value library based on hlist from kernel |\n| libringbuffer: | libqueue: queue library, support memory hook |\n| librbtree: comes from linux kernel rbtree. | libsort: |\n| libvector: | libdarray: Dynamic array |\n\n## Network\n|  |  |\n|--|--|\n| librtsp: Real Time Streaming Protocol server for ipcamera or NVR | librtmpc: Real Time Messaging Protocol client for liveshow |\n| libsock: socket warpper api for easily use | librpc: Remote Procedure Call library |\n| libipc: Inter-Process Communication, support mqueue/netlink/shm | libp2p: High level p2p punch hole library, easy API to use |\n| libmqttc: MQTT client protocol | libhomekit: Apple homekit protocol |\n\n## Async\n|  |  |\n|--|--|\n| libgevent: Reactor event, like libevent | libthread: Thread wrapper |\n| libworkq: Work queue in userspace | |\n\n## I/O\n|  |  |\n|--|--|\n| libstrex: string extension | libconfig: Support ini/json |\n| liblog: Support console/file/rsyslog | libfile: File operations |\n| libsubmask: ip addr transform | |\n\n## Multi-Media\n|  |  |\n|--|--|\n| libavcap: audio/video capture api (v4l2/uvc/esp32/dshow) | libmp4: MP4 muxer and parser |\n| libjpeg-ex: | libmedia-io: audio/video frame/packet define |\n\n## OS Abstraction Layer\n|  |  |\n|--|--|\n| libposix: posix adapter for Windows/rtos/ios |\n\n## Misc\n|  |  |\n|--|--|\n| libdebug: Help to trace crash like gdb | libhal: hardware Abstraction Layer |\n| libplugin: Dynamic link plugin | libtime: Time wrapper |\n| libfsm: Finite State Machine | |\n\n## How To Build\nPlease refer to [INSTALL.md](https://github.com/gozfree/gear-lib/blob/master/INSTALL.md) file for detailed information.\n\n## License\nPlease refer to the [LICENSE](https://github.com/gozfree/gear-lib/blob/master/LICENSE.MIT) file for detailed information.\n\n## Contacts\n* Email: gozfree@163.com\n* QQ Group: 695515645\n* Github: [gear-lib](https://github.com/gozfree/gear-lib)\n* Gitee: [gear-lib](https://gitee.com/gozfreee/gear-lib)\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 5.0595703125,
          "content": "#!/bin/bash\nset -e\n\nCMD=$0\nMODULE=all\nARCH=linux\nMODE=debug\nASAN=0\n\n\n#add supported platform to here\nPLATFORM=\"[linux|pi|android|ios]\"\n\n#basic libraries\nBASIC_LIBS=\"libposix libtime liblog libdarray libthread libgevent libworkq libdict libhash libsort \\\n\t    librbtree libringbuffer libvector libstrex libmedia-io \\\n            libdebug libfile libqueue libplugin libhal libsubmask\"\nMEDIA_LIBS=\"libavcap libmp4\"\nFRAMEWORK_LIBS=\"libipc\"\nNETWORK_LIBS=\"libsock libptcp librpc librtsp librtmpc\"\n\n\n\nusage()\n{\n\techo \"==== usage ====\"\n\techo \"$CMD <module> [platform] [mode]\"\n\techo \"<module>: library to compile or all library, must needed\"\n\techo \"[platform]: linux, raspberrypi or android, default is linux, optional\"\n\techo \"[mode]: debug or release, default is debug, optional\"\n\techo \"\"\n\techo \"./build.sh all $PLATFORM [debug|release]\"\n\techo \"./build.sh basic_libs $PLATFORM [debug|release]\"\n\techo \"./build.sh network_libs $PLATFORM [debug|release]\"\n\techo \"\"\n\techo \"basic libraries (must):\"\n\tfor item in $BASIC_LIBS; do\n\t\techo \"$CMD $item $PLATFORM [debug|release]\";\n\tdone\n\techo \"\"\n\techo \"framework libraries (optional):\"\n\tfor item in $FRAMEWORK_LIBS; do\n\t\techo \"$CMD $item $PLATFORM [debug|release]\";\n\tdone\n\techo \"\"\n\techo \"network libraries (optional):\"\n\tfor item in $NETWORK_LIBS; do\n\t\techo \"$CMD $item $PLATFORM [debug|release]\";\n\tdone\n\techo \"\"\n\techo \"media libraries (optional):\"\n\tfor item in $MEDIA_LIBS; do\n\t\techo \"$CMD $item $PLATFORM [debug|release]\";\n\tdone\n\texit\n}\n\n#-o或--options选项后面接可接受的短选项，如ab:c::，表示可接受的短选项为-a -b -c，其中-a选项不接参数，-b选项后必须接参数，-c选项的参数为可选的\n#-l或--long选项后面接可接受的长选项，用逗号分开，冒号的意义同短选项。\n#-n选项后接选项解析错误时提示的脚本名字\nARGS=`getopt -o a:m:h --long arch:,module:,help,asan: -n 'build.sh' -- \"$@\"`\nif [ $? != 0 ]; then\n    echo \"Terminating...\"\n    exit 1\nfi\n\n#将规范化后的命令行参数分配至位置参数（$1,$2,...)\neval set -- \"${ARGS}\"\n\nwhile true\ndo\n    case \"$1\" in\n        -h|--help)\n            usage;\n            shift\n            ;;\n        -a|--arch)\n            ARCH=$2\n            shift 2\n            ;;\n        -m|--mode)\n            MODE=$2\n            shift 2\n            ;;\n        --module)\n            MODULE=$2\n            shift 2\n            ;;\n        --asan)\n            ASAN=$2\n            shift 2\n            ;;\n        --)\n            shift\n            break\n            ;;\n        *)\n            echo \"invalid arguments: $@\"\n            exit 1\n            ;;\n    esac\ndone\n\nconfig_common()\n{\n\tSTRIP=${CROSS_PREFIX}strip\n\tLIBS_DIR=`pwd`/gear-lib\n\tOUTPUT=${LIBS_DIR}/output/${ARCH}/\n}\n\nconfig_arch()\n{\n\tcase $ARCH in\n\t\"pi\")\n\t\tCROSS_PREFIX=arm-linux-gnueabihf-\n\t\t;;\n\t\"android\")\n\t\tCROSS_PREFIX=arm-linux-androideabi-\n\t\t;;\n\t\"linux\")\n\t\tCROSS_PREFIX=\n\t\t;;\n\t\"ios\")\n\t\techo \"not support cross compile, should compile native on Mac\"\n\t\texit 0;\n\t\t;;\n\t*)\n\t\techo \"arch: $ARCH not supported\"\n\t\t;;\n\tesac\n}\n\ncheck_output()\n{\n\tif [ ! -d \"${OUTPUT}/include/gear-lib\" ]; then\n\t\tmkdir -p ${OUTPUT}/include/gear-lib\n\tfi\n\tif [ ! -d \"${OUTPUT}/{release,debug}/lib/gear-lib\" ]; then\n\t\tmkdir -p ${OUTPUT}/{release,debug}/lib/gear-lib\n\tfi\n}\n\ncheck_install()\n{\n\tif [ ! -d \"/usr/local/include/gear-lib\" ]; then\n\t\tmkdir -p /usr/local/include/gear-lib\n\tfi\n\tif [ ! -d \"/usr/local/lib/gear-lib\" ]; then\n\t\tmkdir -p /usr/local/lib/gear-lib\n\tfi\n}\n\n\ninstall_dep()\n{\n\treturn\n}\n\nbuild_module()\n{\n\tMODULE_DIR=${LIBS_DIR}/$1\n\tACTION=$2\n\tif [ ! -d \"${MODULE_DIR}\" ]; then\n\t\techo \"==== build ${ARCH} ${MODULE} failed!\"\n\t\techo \"     dir \\\"${MODULE_DIR}\\\" is not exist\"\n\t\treturn\n\tfi\n\tcd ${LIBS_DIR}/${MODULE}/\n\n\tcase $ACTION in\n\t\"clean\")\n\t\tmake clean > /dev/null\n\t\techo \"==== clean ${ARCH} ${MODULE} done.\"\n\t\treturn\n\t\t;;\n\t\"install\")\n\t\tMAKE=\"make ARCH=${ARCH} MODE=${MODE}\"\n\t\t${MAKE} install > /dev/null\n\t\tif [ $? -ne 0 ]; then\n\t\t\techo \"==== install ${ARCH} ${MODULE} failed\"\n\t\t\treturn;\n\t\telse\n\t\t\techo \"==== install ${ARCH} ${MODULE} done.\"\n\t\tfi\n\t\t;;\n\t\"uninstall\")\n\t\tMAKE=\"make ARCH=${ARCH} MODE=${MODE}\"\n\t\t${MAKE} uninstall > /dev/null\n\t\tif [ $? -ne 0 ]; then\n\t\t\techo \"==== uninstall ${ARCH} ${MODULE} failed\"\n\t\t\treturn;\n\t\telse\n\t\t\techo \"==== uninstall ${ARCH} ${MODULE} done.\"\n\t\tfi\n\t\t;;\n\t*)\n\t\techo \"==== build ${ARCH} ${MODULE} start...\"\n\t\tMAKE=\"make ARCH=${ARCH} OUTPUT=${OUTPUT} MODE=${MODE} ASAN=${ASAN}\"\n\t\t${MAKE}  > /dev/null\n\t\tif [ $? -ne 0 ]; then\n\t\t\techo \"==== build ${ARCH} ${MODULE} failed\"\n\t\t\treturn;\n\t\telse\n\t\t\techo \"==== build ${ARCH} ${MODULE} done.\"\n\t\tfi\n\t\t${MAKE} install > /dev/null\n\t\tif [ $? -ne 0 ]; then\n\t\t\techo \"==== install ${ARCH} ${MODULE} failed\"\n\t\t\treturn;\n\t\tfi\n\t\t;;\n\tesac\n}\n\nbuild_all()\n{\n\tfor item in $BASIC_LIBS $NETWORK_LIBS $FRAMEWORK_LIBS; do\n\t\tMODULE=\"$item\"\n\t\tARG2=$1\n\t\tbuild_module $MODULE $ARG2\n\tdone\n}\n\ndo_build()\n{\n\tcase $MODULE in\n\t\"all\")\n\t\trm -rf output\n\t\tcheck_output\n\t\tbuild_all clean;\n\t\tbuild_all;;\n\t\"clean\")\n\t\tbuild_all clean;;\n\t\"dep\")\n\t\tinstall_dep;;\n\t\"install\")\n\t\tcheck_install\n\t\tbuild_all install;;\n\t\"uninstall\")\n\t\tbuild_all uninstall;;\n\t\"help\")\n\t\tusage;;\n\t*)\n\t\tbuild_module $MODULE;;\n\tesac\n}\n\nconfig_arch\nconfig_common\ncheck_output\ndo_build\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "gear-lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}