{
  "metadata": {
    "timestamp": 1736710177966,
    "page": 861,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gamelinux/passivedns",
      "stars": 1682,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2890625,
          "content": "# Binaries\nsrc/passivedns\n\n# Object files\n*.o\n\n# Autotools files\n*.swp\naclocal.m4\nautom4te.cache/\ncompile\nconfig.guess\nconfig.log\nconfig.sub\nconfig.status\nconfigure\ndepcomp\ninstall-sh\nmissing\nMakefile\nMakefile.in\nsrc/config.h\nsrc/config.h.in\nsrc/.deps/\nsrc/Makefile\nsrc/Makefile.in\nsrc/stamp-h1\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.041015625,
          "content": "AUTOMAKE_OPTIONS = foreign\nSUBDIRS = src\n\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 4.640625,
          "content": "#\n#  ______                                           ____   __  __  _____\n# |  __  |                         @               |    \\ |  \\ | ||  ___| (TM)\n# | _____|.------. .-----. .-----. _ -. .-.------. | |\\  ||   \\| ||___  |\n# |  |    |  __  ||__  --'|__  --'| |\\ Y /| _--__|_| |/  ||      || \\_| |\n# |__|    |____|_||______||______||_| \\_/ |_______/|____/ |__|\\__||_____|\n#\n#\n\nA tool to collect DNS records passively to aid Incident handling, Network\nSecurity Monitoring (NSM) and general digital forensics.\n\nPassiveDNS sniffs traffic from an interface or reads a pcap-file and outputs\nthe DNS-server answers to a log file. PassiveDNS can cache/aggregate duplicate\nDNS answers in-memory, limiting the amount of data in the logfile without\nlosing the essense in the DNS answer.\n\nExample output from version 1.0.0->Current in the log file (/var/log/passivedns.log):\n\n#timestamp||dns-client ||dns-server||RR class||Query||Query Type||Answer||TTL||Count\n1322849924.408856||10.1.1.1||8.8.8.8||IN||upload.youtube.com.||A||74.125.43.117||46587||5\n1322849924.408857||10.1.1.1||8.8.8.8||IN||upload.youtube.com.||A||74.125.43.116||420509||5\n1322849924.408858||10.1.1.1||8.8.8.8||IN||www.adobe.com.||CNAME||www.wip4.adobe.com.||43200||8\n1322849924.408859||10.1.1.1||8.8.8.8||IN||www.adobe.com.||A||193.104.215.61||43200||8\n1322849924.408860||10.1.1.1||8.8.8.8||IN||i1.ytimg.com.||CNAME||ytimg.l.google.com.||43200||3\n1322849924.408861||10.1.1.1||8.8.8.8||IN||clients1.google.com.||A||173.194.32.3||43200||2\n\nPassiveDNS works on IPv4 and IPv6 traffic and parse DNS traffic over TCP and UDP.\n\n** How can PassiveDNS be used: **\n\nTypical usages:\n\n1) Search for domain or IP history when working on an incident.\n   Example:\n   Company has malware talking to bad.twittertoday.com.\n   At current time, the domain is resolving to say 202.29.94.200\n   You search your Flowdata and find the clients talking to that IP and\n   remidate. You look at the Flowdata, and you discover that the date\n   and time the clients first talked to that IP, and concludes that as\n   the time of infection...\n\n   But using PassiveDNS data, quering the domain, you get following history:\n\n FirstSeen  | LastSeen   | TYPE | TTL |        Query         |   Answer\n----------------------------------------------------------------------------\n 2011-12-01 | 2011-12-11 |    A |  60 | bad.twittertoday.com |  71.51.115.11\n 2011-12-11 | 2011-12-18 |    A |  60 | bad.twittertoday.com |     127.0.0.1\n 2011-12-18 | 2012-01-14 |    A |  60 | bad.twittertoday.com | 202.29.94.200\n\n   Going back and searching for 71.51.115.11 in your Flowdata, you find\n   traffic back to the FirstSeen data, and you also see more clients\n   initially infected (so you did not manage to remidate/check out all your\n   clients in the first run by just looking at IP 202.29.94.200). Doing\n   forensics on the the clients you missed in the first run, reveals that\n   they have downloaded a different malware and deleted the initial one,\n   that beeing the reason you did not see flows from them to 202.29.94.200.\n   The new malware gives you new domains and IPs to go look for...\n\n2) Say you have an indication of malicious C&C traffic going to an IP on\n   port 80. The domain used by the alleged malware is supposed to be\n   cc.twittertoday.com. Searching you Flowdata, reveals lots of clients\n   talking to that IP, and you might think that the whole company is p0wned.\n   A quick search in your PassiveDNS DB shows you that the IP in question is\n   also hosting 300 + websites and you might even spot a website hosted on\n   that IP that you are familiar with and that you know lots of people in the\n   company would legit visit daily.\n   Searching your PassiveDNS DB gives you no hits for the domain in question,\n   hopefully meaning that you dont have that malware talking to that domain\n   in your network.\n\n3) You know that *.twittertoday.com are often used in malware and the\n   subdomains change randomly. Many have rules for such domains in their\n   IDS/IPS, sucking up unnecessary juice from the systems. Having a script\n   pre-loaded with a list of regexp of domains and subdomains to watch for\n   and giving you an alert when they hit will give you much better detection\n   on threat based on domains.\n\n   You can also do a whois for all new top domains seen, correlate the whois\n   info with a list of know bad info, such as the name of the person or\n   company that has registered the domain, telephone/fax numbers, address\n   and so on, ending up with a score that might be high enough for triggering\n   an alert to you :)\n\n\nQuestions, suggestions, sugar or flame is always welcome :)\n\nI hope PassiveDNS gives you a new tool to fight malware and its herders...\n\n(c)2011-2020  -  Edward Bjarte Fjellsk√•l\n"
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 0.283203125,
          "content": "#!/bin/sh\n#\n# desc: simple script to run all auto commands\n#\n####\n\n# defines needed for OpenBSD\nAUTOMAKE_VERSION=1.15;export AUTOMAKE_VERSION\nAUTOCONF_VERSION=2.69;export AUTOCONF_VERSION\n\nif [ ! -d config ]; then\n mkdir config\nfi\n\naclocal\nautomake --gnu --add-missing\nautoconf\nautoheader\n\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 8.0302734375,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_INIT([passivedns], [1.2.1])\nAM_INIT_AUTOMAKE\nAC_USE_SYSTEM_EXTENSIONS\nAC_CONFIG_SRCDIR([src/passivedns.h])\nAC_CONFIG_HEADERS([src/config.h])\n\n# Checks for programs.\nAC_PROG_CC\n\nAC_CANONICAL_HOST\n\ndnl Checks for OS type.\ncase \"$host\" in\n    *-freebsd*)\n        AC_DEFINE([BSD_DERIVED],1,BSD_DERIVED)\n        AC_DEFINE([FREEBSD],1,FREEBSD)\n        LDFLAGS=\"${LDFLAGS}\"\n        ;;\n    *-netbsd*)\n        AC_DEFINE([BSD_DERIVED],1,BSD_DERIVED)\n        AC_DEFINE([NETBSD],1,NETBSD)\n        ;;\n    *-openbsd*)\n        AC_DEFINE([BSD_DERIVED],1,BSD_DERIVED)\n        AC_DEFINE([OPENBSD],1,OPENBSD)\n        CFLAGS=\"${CFLAGS} -Wbounded\"\n        LDFLAGS=\"${LDFLAGS}\"\n        ;;\n    *-apple*)\n        AC_DEFINE([BSD_DERIVED],1,BSD_DERIVED)\n        AC_DEFINE([MACOS],1,MACOS)\n        LDFLAGS=\"${LDFLAGS} -L/sw/lib\"\n        AC_SUBST(more_incl)\n        more_incl=-I/sw/include\n        ;;\n    *-linux*)\n        AC_DEFINE([SYSV_DERIVED],1,SYSV_DERIVED)\n        AC_DEFINE([LINUX],1,LINUX)\n        LDFLAGS=\"${LDFLAGS}\"\n        ;;\n    *-solaris*)\n        AC_DEFINE([SYSV_DERIVED],1,SYSV_DERIVED)\n        AC_DEFINE([SOLARIS],1,SOLARIS)\n        LDFLAGS=\"${LDFLAGS}\"\n        ;;\n    *-aix*)\n        AC_DEFINE([SYSV_DERIVED],1,SYSV_DERIVED)\n        AC_DEFINE([AIX],1,AIX)\n        ;;\n    *-hpux*)\n        AC_DEFINE([SYSV_DERIVED],1,SYSV_DERIVED)\n        AC_DEFINE([HPUX],1,HPUX)\n        ;;\nesac\n\n# Enable debug output.\nAC_ARG_ENABLE(debug,\n    AS_HELP_STRING([--enable-debug], [Enable debug output]))\n\nAS_IF([test \"x$enable_debug\" = \"xyes\"], [\n    CPPFLAGS=\"${CPPFLAGS} -Wall -g -DDEBUG\"\n])\n\n# Enable gcc profile info.\nAC_ARG_ENABLE(gccprofile,\n    AS_HELP_STRING([--enable-gccprofile], [Enable gcc profile info (set -pg flag)]))\n\nAS_IF([test \"x$enable_gccprofile\" = \"xyes\"], [\n    CPPFLAGS=\"${CPPFLAGS} -g -pg\"\n])\n\n# Checks for libpcap.\nAC_ARG_WITH(libpcap_includes,\n    [  --with-libpcap-includes=DIR   libpcap include directory],\n    [with_libpcap_includes=\"$withval\"],[with_libpcap_includes=\"no\"])\n\nAC_ARG_WITH(libpcap_libraries,\n    [  --with-libpcap-libraries=DIR  libpcap library directory],\n    [with_libpcap_libraries=\"$withval\"],[with_libpcap_libraries=\"no\"])\n\nif test \"$with_libpcap_includes\" != \"no\"; then\n    CPPFLAGS=\"${CPPFLAGS} -I${with_libpcap_includes}\"\nfi\n\nif test \"$with_libpcap_libraries\" != \"no\"; then\n    LDFLAGS=\"${LDFLAGS} -L${with_libpcap_libraries}\"\nfi\n\nLDFLAGS=\"${LDFLAGS} -lpcap\"\n\n# Check for libpcap headers\nAC_CHECK_HEADER(pcap.h,,LIBPCAP_H=\"no\")\n\nif test \"$LIBPCAP_H\" = \"no\"; then\n    echo -e \"\\n  ERROR! libpcap headers not found\\n\"\n    exit 1\nfi\n\n# Check for libpcap library\nAC_CHECK_LIB(pcap,pcap_loop,,LIBPCAP_L=\"no\")\n\nif test \"$LIBPCAP_L\" = \"no\"; then\n    echo -e \"\\n  ERROR! libpcap library not found\\n\"\n    exit 1\nfi\n\n# Checks for OpenSSL (newer versions of ldns require OpenSSL).\nAC_ARG_ENABLE(openssl,\n    AS_HELP_STRING([--disable-openssl],\n                   [Requires ldns library compiled without OpenSSL]),\n    [enable_openssl=no], [enable_openssl=yes])\n\nAC_ARG_WITH(openssl_includes,\n    [  --with-openssl-includes=DIR   OpenSSL include directory],\n    [with_openssl_includes=\"$withval\"],[with_openssl_includes=\"no\"])\n\nAC_ARG_WITH(openssl_libraries,\n    [  --with-openssl-libraries=DIR  OpenSSL library directory],\n    [with_openssl_libraries=\"$withval\"],[with_openssl_libraries=\"no\"])\n\nAS_IF([test \"x$enable_openssl\" = \"xyes\"], [\n    if test \"$with_openssl_includes\" != \"no\"; then\n        CPPFLAGS=\"${CPPFLAGS} -I${with_openssl_includes}\"\n    fi\n\n    if test \"$with_openssl_libraries\" != \"no\"; then\n        LDFLAGS=\"${LDFLAGS} -L${with_openssl_libraries}\"\n    fi\n\n    # Check for OpenSSL headers\n    AC_CHECK_HEADER(openssl/ssl.h,,LIBOPENSSL_H=\"no\")\n\n    if test \"$LIBOPENSSL_H\" = \"no\"; then\n        echo -e \"\\n  ERROR! OpenSSL headers not found\\n\"\n        exit 1\n    fi\n])\n\n# Checks for ldns.\nAC_ARG_WITH(ldns_includes,\n    [  --with-ldns-includes=DIR      ldns include directory],\n    [with_ldns_includes=\"$withval\"],[with_ldns_includes=\"no\"])\n\nAC_ARG_WITH(ldns_libraries,\n    [  --with-ldns-libraries=DIR     ldns library directory],\n    [with_ldns_libraries=\"$withval\"],[with_ldns_libraries=\"no\"])\n\nif test \"$with_ldns_includes\" != \"no\"; then\n    CPPFLAGS=\"${CPPFLAGS} -I${with_ldns_includes}\"\nfi\n\nif test \"$with_ldns_libraries\" != \"no\"; then\n    LDFLAGS=\"${LDFLAGS} -L${with_ldns_libraries}\"\nfi\n\nLDFLAGS=\"${LDFLAGS} -lldns\"\n\n# Check or ldns headers\nAC_CHECK_HEADER(ldns/ldns.h,,LIBLDNS_H=\"no\")\n\nif test \"$LIBLDNS_H\" = \"no\"; then\n    echo -e \"\\n  ERROR! ldns headers not found\\n\"\n    exit 1\nfi\n\n# Check for ldns library\nAC_CHECK_LIB(ldns,ldns_pkt_get_rcode,,LIBLDNS_L=\"no\")\n\nif test \"$LIBLDNS_L\" = \"no\"; then\n    echo -e \"\\n  ERROR! ldns library not found\\n\"\n    exit 1\nfi\n\n# Checks for PF_RING.\nAC_ARG_ENABLE(pfring,\n    AS_HELP_STRING([--enable-pfring], [Enable PF_RING support]))\n\nAC_ARG_WITH(pfring_includes,\n    [  --with-pfring-includes=DIR    PF_RING include directory],\n    [with_pfring_includes=\"$withval\"],[with_pfring_includes=\"no\"])\n\nAC_ARG_WITH(pfring_libraries,\n    [  --with-pfring-libraries=DIR   PF_RING library directory],\n    [with_pfring_libraries=\"$withval\"],[with_pfring_libraries=\"no\"])\n\nAS_IF([test \"x$enable_pfring\" = \"xyes\"], [\n    AC_DEFINE([HAVE_PFRING],[1],[PF_RING support enabled])\n\n    if test \"$with_pfring_includes\" != \"no\"; then\n        CPPFLAGS=\"${CPPFLAGS} -I${with_pfring_includes}\"\n    fi\n\n    if test \"$with_pfring_libraries\" != \"no\"; then\n        LDFLAGS=\"${LDFLAGS} -L${with_pfring_libraries}\"\n    fi\n\n    LDFLAGS=\"${LDFLAGS} -lpfring -lnuma -lrt\"\n\n    # Checks for libnuma\n    AC_CHECK_HEADER(numa.h,,LIBNUMA=\"no\")\n    AC_CHECK_LIB(numa,numa_available,,LIBNUMA=\"no\")\n\n    if test \"$LIBNUMA\" = \"no\"; then\n        echo -e \"\\n  ERROR! libnuma not found (PF_RING requirement)\\n\"\n        exit 1\n    fi\n\n    # Check for PF_RING headers\n    AC_CHECK_HEADER(pfring.h,,LIBPFRING_H=\"no\")\n\n    if test \"$LIBPFRING_H\" = \"no\"; then\n        echo -e \"\\n  ERROR! PF_RING headers not found\\n\"\n        exit 1\n    fi\n\n    # Check for PF_RING library\n    AC_CHECK_LIB(pfring,pfring_stats,,LIBPFRING_L=\"no\")\n\n    if test \"$LIBPFRING_L\" = \"no\"; then\n        echo -e \"\\n  ERROR! PF_RING library not found\\n\"\n        exit 1\n    fi\n\n    # Check for PF_RING BPF support\n    AC_CHECK_LIB(pfring,pfring_set_bpf_filter,,LIBPFRING_BPF=\"no\")\n\n    if test \"$LIBPFRING_BPF\" != \"no\"; then\n        AC_DEFINE([HAVE_PFRING_BPF],[1],[PF_RING BPF support])\n    fi\n])\n\n# Checks for libjansson.\nAC_ARG_ENABLE(json,\n    AS_HELP_STRING([--enable-json], [Enable JSON support]))\n\nAC_ARG_WITH(jansson_includes,\n    [  --with-jansson-includes=DIR   libjansson include directory],\n    [with_jansson_includes=\"$withval\"],[with_jansson_includes=\"no\"])\n\nAC_ARG_WITH(jansson_libraries,\n    [  --with-jansson-libraries=DIR  libjansson library directory],\n    [with_jansson_libraries=\"$withval\"],[with_jansson_libraries=\"no\"])\n\nAS_IF([test \"x$enable_json\" = \"xyes\"], [\n    AC_DEFINE([HAVE_JSON],[1],[JSON support enabled])\n\n    if test \"$with_jansson_includes\" != \"no\"; then\n        CPPFLAGS=\"${CPPFLAGS} -I${with_jansson_includes}\"\n    fi\n\n    if test \"$with_jansson_libraries\" != \"no\"; then\n        LDFLAGS=\"${LDFLAGS} -L${with_jansson_libraries}\"\n    fi\n\n    LDFLAGS=\"${LDFLAGS} -ljansson\"\n\n    # Check for jansson headers\n    AC_CHECK_HEADER(jansson.h,,LIBJANSSON_H=\"no\")\n\n    if test \"$LIBJANSSON_H\" = \"no\"; then\n        echo -e \"\\n  ERROR! Jansson headers not found\\n\"\n        exit 1\n    fi\n\n    # Check for jansson library\n    AC_CHECK_LIB(jansson,json_delete,,LIBJANSSON_L=\"no\")\n\n    if test \"$LIBJANSSON_L\" = \"no\"; then\n        echo -e \"\\n  ERROR! Jansson library not found\\n\"\n        exit 1\n    fi\n])\n\n# Checks for header files.\nAC_CHECK_HEADERS([arpa/inet.h fcntl.h netinet/in.h stdlib.h string.h syslog.h unistd.h])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_PID_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_UINT8_T\n\n# Checks for library functions.\nAC_FUNC_FORK\nAC_FUNC_STRNLEN\nAC_CHECK_FUNCS([alarm dup2 endgrent endpwent ftruncate getcwd memset strdup strerror strtol strtoul])\n\nAC_OUTPUT(Makefile src/Makefile)\n\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pdns.patch",
          "type": "blob",
          "size": 1.41796875,
          "content": "--- search-pdns-original.pl\t2017-08-24 19:18:52.859541254 -0400\n+++ /usr/local/bin/search-pdns.pl\t2018-03-21 14:49:24.217877474 -0400\n@@ -18,6 +18,7 @@\n # along with this program; if not, write to the Free Software\n # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n # ----------------------------------------------------------------------\n+# Added Resource Record Type :  PJN 20180321\n \n use strict;\n use warnings;\n@@ -40,7 +41,7 @@\n \n =head1 VERSION\n \n-    0.1.0\n+    0.1.1\n \n =head1 SYNOPSIS\n \n@@ -50,6 +51,7 @@\n \n     -s            : %IP/Domain%\n     -r            : Enables raw search\n+    -t            : Resource Record Type (A, NS, MX, SOA, etc.)\n     --first-seen  : Date to search from in iso format (2010-01-01 etc.)\n     --last-seen   : Date to search to in iso format (2020-01-01 etc.)\n     --limit       : Limit on search results (100)\n@@ -73,6 +75,7 @@\n our $FROM_DATE;\n our $TO_DATE;\n our $LIMIT;\n+our $TYPE;\n \n GetOptions(\n     'd=s'           => \\$DEBUG,\n@@ -81,6 +84,7 @@\n     'first-seen=s'  => \\$FROM_DATE,\n     'last-seen=s'   => \\$TO_DATE,\n     'limit=s'       => \\$LIMIT,\n+    't=s'           => \\$TYPE,\n );\n \n if ($SEARCH eq \"\") {\n@@ -131,6 +135,13 @@\n     }\n }\n \n+\n+if (defined $TYPE) {\n+       $QUERY1 = $QUERY1 . qq[AND maptype = '$TYPE' ];\n+       $QUERY2 = $QUERY2 . qq[AND maptype = '$TYPE' ];\n+}\n+\n+\n $QUERY = $QUERY1 . qq[ UNION ] . $QUERY2;\n \n if (defined $LIMIT && $LIMIT =~ /^([\\d])+$/) {\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}