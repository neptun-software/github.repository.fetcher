{
  "metadata": {
    "timestamp": 1736710052643,
    "page": 668,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andrewrk/libsoundio",
      "stars": 1969,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "build/\nbuild-win32/\nbuild-win64/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.548828125,
          "content": "### Version 1.1.0 (2016-01-31)\n\n * JACK: delete broken pause implementation. Previously, calling\n   `soundio_outstream_pause` or `soundio_instream_pause` during the\n   `write_callback` or `read_callback` would cause a deadlock. Now, attempting\n   to pause always results in `SoundIoErrorBackendIncompatible`.\n * PulseAudio: improve latency handling code. It now passes the latency test\n   along with all the other backends.\n * PulseAudio: fix incorrect outstream `software_latency`.\n * libsoundio source code is now pure C, no C++ mixed in.\n * ALSA: better device detection.\n   - No longer suppress sysdefault.\n   - If default and sysdefault are missing, use the first device as the default\n     device.\n * Workaround for Raspberry Pi driver that incorrectly reports itself as Output\n   when it is actually Input.\n * ALSA: let alsa lib choose period settings. Fixes behavior with many ALSA\n   devices.\n * ALSA: fix potential cleanup deadlock.\n * ALSA: fix crash for devices with null description, thanks to Charles Lehner.\n * CoreAudio: drop support for MacOS 10.9. There was a bug for this system that\n   was never resolved, so it didn't work in the first place.\n * Record example handles device not found and probe errors gracefully.\n * Fix typo in microphone example, thanks to James Dyson.\n * Improve documentation.\n * New functions available: `soundio_version_string`, `soundio_version_major`,\n   `soundio_version_minor`, `soundio_version_patch`.\n * libsoundio source code now builds with MSVC, thanks to RaphaÃ«l Londeix.\n\n### Version 1.0.3 (2015-10-20)\n\n * Architecture independent header files.\n * Add --latency and --sample-rate to sine example.\n * ALSA: fix deadlock under some circumstances.\n * dummy: fix deadlock when pause called from `write_callback`.\n * Fix double clean-up corruption when opening stream fails.\n * Add --device and --raw to underflow test.\n * ALSA: use period size to calculate buffer size, fixes opening output stream\n   sometimes resulting in an error.\n\n### Version 1.0.2 (2015-09-24)\n\n * build: fix GNUInstallDirs not working.\n * docs: fix incorrect docs for `soundio_instream_pause`.\n * PulseAudio: fix `soundio_outstream_pause` triggering assertion when called\n   from within `write_callback`.\n * fix mirrored memory not working on Linux (fixes corrupted data in ring\n   buffer).\n * os: fix crash when creating non high priority thread fails.\n * docs: fix typos and cleanup.\n * fix and add test for `soundio_device_nearest_sample_rate`.\n\n### Version 1.0.1 (2015-09-11)\n\n * libsoundio no longer depends on or links against libm.\n * ALSA: treat ALSA as unavailable when /dev/snd does not exist.\n * ALSA: remove duplicate assert.\n * ALSA: remove stray print statement.\n * ALSA: pausing returns error code when state is invalid instead of reaching\n   assertion failure in pcm.c.\n * JACK: fix infinite loop when refreshing devices.\n * PulseAudio: better clear buffer implementation.\n * dummy backend: fix sometimes calling `write_callback` with\n  `frame_count_max` equal to 0.\n * os: fix some variables accidentally not declared static.\n * macos: fix not cleaning up condition variables.\n * macos: avoid allocation when getting time.\n * docs: note that `read_callback` and `write_callback` must be real time safe.\n * docs: record example demonstrates proper real time safety by not calling\n   fwrite in `read_callback`.\n * docs: add note to record example about shutting down.\n * docs: make microphone example latency a command line argument.\n * build: fix build on linux with clang.\n * build: static libs, examples, and tests are optional.\n\n### Version 1.0.0 (2015-09-03)\n\n * Initial public release.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.3876953125,
          "content": "cmake_minimum_required(VERSION 2.8.5)\nproject(libsoundio C)\nset(CMAKE_MODULE_PATH ${libsoundio_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})\n\nif(CMAKE_VERSION VERSION_LESS 3.0.0)\n    set(CMAKE_INSTALL_LIBDIR \"lib\" CACHE PATH \"library install dir (lib)\")\n    set(CMAKE_INSTALL_INCLUDEDIR \"include\" CACHE PATH \"header base install dir (include)\")\n    set(CMAKE_INSTALL_BINDIR \"bin\" CACHE PATH \"user executables (bin)\")\nelse()\n    cmake_policy(SET CMP0042 NEW)\n    cmake_policy(SET CMP0046 NEW)\n    include(GNUInstallDirs)\nendif()\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING\n      \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\" FORCE)\nendif()\n\nset(LIBSOUNDIO_VERSION_MAJOR 2)\nset(LIBSOUNDIO_VERSION_MINOR 0)\nset(LIBSOUNDIO_VERSION_PATCH 0)\nset(LIBSOUNDIO_VERSION \"${LIBSOUNDIO_VERSION_MAJOR}.${LIBSOUNDIO_VERSION_MINOR}.${LIBSOUNDIO_VERSION_PATCH}\")\nmessage(\"Configuring libsoundio version ${LIBSOUNDIO_VERSION}\")\n\nif(NOT SOUNDIO_STATIC_LIBNAME)\n    set(SOUNDIO_STATIC_LIBNAME soundio)\nendif()\n\noption(BUILD_STATIC_LIBS \"Build static libraries\" ON)\noption(BUILD_DYNAMIC_LIBS \"Build dynamic libraries\" ON)\noption(BUILD_EXAMPLE_PROGRAMS \"Build example programs\" ON)\noption(BUILD_TESTS \"Build tests\" ON)\noption(ENABLE_JACK \"Enable JACK backend\" ON)\noption(ENABLE_PULSEAUDIO \"Enable PulseAudio backend\" ON)\noption(ENABLE_ALSA \"Enable ALSA backend\" ON)\noption(ENABLE_COREAUDIO \"Enable CoreAudio backend\" ON)\noption(ENABLE_WASAPI \"Enable WASAPI backend\" ON)\n\nfind_package(Threads)\nif(Threads_FOUND)\n    set(STATUS_THREADS \"OK\")\nelse(Threads_FOUND)\n    set(STATUS_THREADS \"not found\")\nendif(Threads_FOUND)\n\nif(ENABLE_JACK)\n    find_package(JACK)\n    if(JACK_FOUND)\n        set(STATUS_JACK \"OK\")\n        set(SOUNDIO_HAVE_JACK true)\n        include_directories(${JACK_INCLUDE_DIR})\n    else()\n        set(STATUS_JACK \"not found\")\n        set(SOUNDIO_HAVE_JACK false)\n        set(JACK_LIBRARY \"\")\n    endif()\nelse()\n    set(STATUS_JACK \"disabled\")\n    set(SOUNDIO_HAVE_JACK false)\n    set(JACK_LIBRARY \"\")\nendif()\n\nif(ENABLE_PULSEAUDIO)\n    find_package(PulseAudio)\n    if(PULSEAUDIO_FOUND)\n        set(STATUS_PULSEAUDIO \"OK\")\n        set(SOUNDIO_HAVE_PULSEAUDIO true)\n        include_directories(${PULSEAUDIO_INCLUDE_DIR})\n    else()\n        set(STATUS_PULSEAUDIO \"not found\")\n        set(SOUNDIO_HAVE_PULSEAUDIO false)\n        set(PULSEAUDIO_LIBRARY \"\")\n    endif()\nelse()\n    set(STATUS_PULSEAUDIO \"disabled\")\n    set(SOUNDIO_HAVE_PULSEAUDIO false)\n    set(PULSEAUDIO_LIBRARY \"\")\nendif()\n\nif(ENABLE_ALSA)\n    find_package(ALSA)\n    if(ALSA_FOUND)\n        set(STATUS_ALSA \"OK\")\n        set(SOUNDIO_HAVE_ALSA true)\n        include_directories(${ALSA_INCLUDE_DIRS})\n    else()\n        set(STATUS_ALSA \"not found\")\n        set(SOUNDIO_HAVE_ALSA false)\n        set(ALSA_LIBRARIES \"\")\n    endif()\nelse()\n    set(STATUS_ALSA \"disabled\")\n    set(SOUNDIO_HAVE_ALSA false)\n    set(ALSA_LIBRARIES \"\")\nendif()\n\nif(ENABLE_COREAUDIO)\n    find_package(CoreAudio)\n    if(COREAUDIO_FOUND)\n        set(STATUS_COREAUDIO \"OK\")\n        set(SOUNDIO_HAVE_COREAUDIO true)\n        include_directories(${COREAUDIO_INCLUDE_DIR})\n\n        find_path(COREFOUNDATION_INCLUDE_DIR NAMES CoreFoundation.h)\n        find_library(COREFOUNDATION_LIBRARY NAMES CoreFoundation)\n        include_directories(${COREFOUNDATION_INCLUDE_DIR})\n\n        find_path(AUDIOUNIT_INCLUDE_DIR NAMES AudioUnit.h)\n        find_library(AUDIOUNIT_LIBRARY NAMES AudioUnit)\n        include_directories(${AUDIOUNIT_INCLUDE_DIR})\n    else()\n        set(STATUS_COREAUDIO \"not found\")\n        set(SOUNDIO_HAVE_COREAUDIO false)\n        set(COREAUDIO_LIBRARY \"\")\n        set(COREFOUNDATION_LIBRARY \"\")\n        set(AUDIOUNIT_LIBRARY \"\")\n    endif()\nelse()\n    set(STATUS_COREAUDIO \"disabled\")\n    set(SOUNDIO_HAVE_COREAUDIO false)\n    set(COREAUDIO_LIBRARY \"\")\n    set(COREFOUNDATION_LIBRARY \"\")\n    set(AUDIOUNIT_LIBRARY \"\")\nendif()\n\nif(ENABLE_WASAPI)\n    find_package(WASAPI)\n    if(WASAPI_FOUND)\n        set(STATUS_WASAPI \"OK\")\n        set(SOUNDIO_HAVE_WASAPI true)\n    else()\n        set(STATUS_WASAPI \"not found\")\n        set(SOUNDIO_HAVE_WASAPI false)\n    endif()\nelse()\n    set(STATUS_WASAPI \"disabled\")\n    set(SOUNDIO_HAVE_WASAPI false)\nendif()\n\n\nset(LIBSOUNDIO_SOURCES\n    \"${libsoundio_SOURCE_DIR}/src/soundio.c\"\n    \"${libsoundio_SOURCE_DIR}/src/util.c\"\n    \"${libsoundio_SOURCE_DIR}/src/os.c\"\n    \"${libsoundio_SOURCE_DIR}/src/dummy.c\"\n    \"${libsoundio_SOURCE_DIR}/src/channel_layout.c\"\n    \"${libsoundio_SOURCE_DIR}/src/ring_buffer.c\"\n)\n\nset(CONFIGURE_OUT_FILE \"${libsoundio_BINARY_DIR}/config.h\")\nset(LIBSOUNDIO_HEADERS\n    \"${libsoundio_SOURCE_DIR}/soundio/soundio.h\"\n    \"${libsoundio_SOURCE_DIR}/soundio/endian.h\"\n)\n\nif(SOUNDIO_HAVE_JACK)\n    set(LIBSOUNDIO_SOURCES ${LIBSOUNDIO_SOURCES}\n        \"${libsoundio_SOURCE_DIR}/src/jack.c\"\n    )\nendif()\nif(SOUNDIO_HAVE_PULSEAUDIO)\n    set(LIBSOUNDIO_SOURCES ${LIBSOUNDIO_SOURCES}\n        \"${libsoundio_SOURCE_DIR}/src/pulseaudio.c\"\n    )\nendif()\nif(SOUNDIO_HAVE_ALSA)\n    set(LIBSOUNDIO_SOURCES ${LIBSOUNDIO_SOURCES}\n        \"${libsoundio_SOURCE_DIR}/src/alsa.c\"\n    )\nendif()\nif(SOUNDIO_HAVE_COREAUDIO)\n    set(LIBSOUNDIO_SOURCES ${LIBSOUNDIO_SOURCES}\n        \"${libsoundio_SOURCE_DIR}/src/coreaudio.c\"\n    )\nendif()\nif(SOUNDIO_HAVE_WASAPI)\n    set(LIBSOUNDIO_SOURCES ${LIBSOUNDIO_SOURCES}\n        \"${libsoundio_SOURCE_DIR}/src/wasapi.c\"\n    )\nendif()\n\ninclude_directories(\n    ${libsoundio_SOURCE_DIR}\n    ${libsoundio_BINARY_DIR}\n    \"${libsoundio_SOURCE_DIR}/test\"\n    \"${libsoundio_SOURCE_DIR}/src\"\n)\n\nset(LIBSOUNDIO_LIBS\n    ${JACK_LIBRARY}\n    ${PULSEAUDIO_LIBRARY}\n    ${ALSA_LIBRARIES}\n    ${COREAUDIO_LIBRARY}\n    ${COREFOUNDATION_LIBRARY}\n    ${AUDIOUNIT_LIBRARY}\n    ${CMAKE_THREAD_LIBS_INIT}\n)\n\nif(MSVC)\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Wall\")\n    set(LIB_CFLAGS \"/TP /W4\")\n    set(EXAMPLE_CFLAGS \"/W4\")\n    set(TEST_CFLAGS \"${LIB_CFLAGS}\")\n    set(TEST_LDFLAGS \" \")\n    set(LIBM \" \")\nelse()\n    set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Werror -pedantic\")\n    set(LIB_CFLAGS \"-std=c11 -fvisibility=hidden -Wall -Werror=strict-prototypes -Werror=old-style-definition -Werror=missing-prototypes -D_REENTRANT -D_POSIX_C_SOURCE=200809L -Wno-missing-braces\")\n    set(EXAMPLE_CFLAGS \"-std=c99 -Wall\")\n    set(TEST_CFLAGS \"${LIB_CFLAGS} -fprofile-arcs -ftest-coverage\")\n    set(TEST_LDFLAGS \"-fprofile-arcs -ftest-coverage\")\n    set(LIBM \"m\")\nendif()\n\nconfigure_file(\n    \"${libsoundio_SOURCE_DIR}/src/config.h.in\"\n    ${CONFIGURE_OUT_FILE}\n)\nset(DOXYGEN_CONF_FILE \"${libsoundio_BINARY_DIR}/doxygen.conf\")\nconfigure_file(\n    \"${libsoundio_SOURCE_DIR}/doc/doxygen.conf.in\"\n    ${DOXYGEN_CONF_FILE}\n)\n\nif(BUILD_DYNAMIC_LIBS)\n    add_library(libsoundio_shared SHARED ${LIBSOUNDIO_SOURCES})\n    set_target_properties(libsoundio_shared PROPERTIES\n        OUTPUT_NAME soundio\n        SOVERSION ${LIBSOUNDIO_VERSION_MAJOR}\n        VERSION ${LIBSOUNDIO_VERSION}\n        COMPILE_FLAGS ${LIB_CFLAGS}\n        LINKER_LANGUAGE C\n    )\n    target_link_libraries(libsoundio_shared LINK_PUBLIC ${LIBSOUNDIO_LIBS})\n    install(TARGETS libsoundio_shared DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n\nif(BUILD_STATIC_LIBS)\n    add_library(libsoundio_static STATIC ${LIBSOUNDIO_SOURCES})\n    set_target_properties(libsoundio_static PROPERTIES\n        OUTPUT_NAME ${SOUNDIO_STATIC_LIBNAME}\n        COMPILE_FLAGS ${LIB_CFLAGS}\n        LINKER_LANGUAGE C\n    )\n    install(TARGETS libsoundio_static DESTINATION ${CMAKE_INSTALL_LIBDIR})\nendif()\n\ninstall(FILES\n    ${LIBSOUNDIO_HEADERS}\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/soundio\")\n\n# Example Programs\n\nif(BUILD_EXAMPLE_PROGRAMS)\n    add_executable(sio_sine example/sio_sine.c)\n    set_target_properties(sio_sine PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${EXAMPLE_CFLAGS})\n    if(BUILD_DYNAMIC_LIBS)\n        target_link_libraries(sio_sine libsoundio_shared ${LIBM})\n    else()\n        target_link_libraries(sio_sine libsoundio_static ${LIBSOUNDIO_LIBS} ${LIBM})\n    endif()\n    install(TARGETS sio_sine DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n    add_executable(sio_list_devices example/sio_list_devices.c)\n    set_target_properties(sio_list_devices PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${EXAMPLE_CFLAGS})\n    if(BUILD_DYNAMIC_LIBS)\n        target_link_libraries(sio_list_devices libsoundio_shared)\n    else()\n        target_link_libraries(sio_list_devices libsoundio_static ${LIBSOUNDIO_LIBS})\n    endif()\n    install(TARGETS sio_list_devices DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n    add_executable(sio_microphone example/sio_microphone.c)\n    set_target_properties(sio_microphone PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${EXAMPLE_CFLAGS})\n    if(BUILD_DYNAMIC_LIBS)\n        target_link_libraries(sio_microphone libsoundio_shared)\n    else()\n        target_link_libraries(sio_microphone libsoundio_static ${LIBSOUNDIO_LIBS})\n    endif()\n    install(TARGETS sio_microphone DESTINATION ${CMAKE_INSTALL_BINDIR})\n\n    add_executable(sio_record example/sio_record.c)\n    set_target_properties(sio_record PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${EXAMPLE_CFLAGS})\n    if(BUILD_DYNAMIC_LIBS)\n        target_link_libraries(sio_record libsoundio_shared)\n    else()\n        target_link_libraries(sio_record libsoundio_static ${LIBSOUNDIO_LIBS})\n    endif()\n    install(TARGETS sio_record DESTINATION ${CMAKE_INSTALL_BINDIR})\nendif()\n\nif(BUILD_TESTS)\n    add_executable(unit_tests \"${libsoundio_SOURCE_DIR}/test/unit_tests.c\" ${LIBSOUNDIO_SOURCES})\n    target_link_libraries(unit_tests LINK_PUBLIC ${LIBSOUNDIO_LIBS})\n    set_target_properties(unit_tests PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${TEST_CFLAGS}\n        LINK_FLAGS ${TEST_LDFLAGS}\n    )\n\n    add_executable(latency \"${libsoundio_SOURCE_DIR}/test/latency.c\" ${LIBSOUNDIO_SOURCES})\n    target_link_libraries(latency LINK_PUBLIC ${LIBSOUNDIO_LIBS} ${LIBM})\n    set_target_properties(latency PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${LIB_CFLAGS}\n    )\n\n    add_executable(underflow test/underflow.c)\n    set_target_properties(underflow PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${EXAMPLE_CFLAGS})\n    if(BUILD_DYNAMIC_LIBS)\n        target_link_libraries(underflow libsoundio_shared ${LIBM})\n    else()\n        target_link_libraries(underflow libsoundio_static ${LIBSOUNDIO_LIBS} ${LIBM})\n    endif()\n\n    add_executable(backend_disconnect_recover test/backend_disconnect_recover.c)\n    set_target_properties(backend_disconnect_recover PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${EXAMPLE_CFLAGS})\n    if(BUILD_DYNAMIC_LIBS)\n        target_link_libraries(backend_disconnect_recover libsoundio_shared)\n    else()\n        target_link_libraries(backend_disconnect_recover libsoundio_static ${LIBSOUNDIO_LIBS})\n    endif()\n\n    add_executable(overflow test/overflow.c)\n    set_target_properties(overflow PROPERTIES\n        LINKER_LANGUAGE C\n        COMPILE_FLAGS ${EXAMPLE_CFLAGS})\n    if(BUILD_DYNAMIC_LIBS)\n        target_link_libraries(overflow libsoundio_shared)\n    else()\n        target_link_libraries(overflow libsoundio_static ${LIBSOUNDIO_LIBS})\n    endif()\n\n\n\n    add_custom_target(coverage\n        DEPENDS unit_tests\n        WORKING_DIRECTORY ${libsoundio_BINARY_DIR}\n        COMMAND lcov --directory . --zerocounters --rc lcov_branch_coverage=1\n        COMMAND ./unit_tests\n        COMMAND lcov --directory . --capture --output-file coverage.info --rc lcov_branch_coverage=1\n        COMMAND lcov --remove coverage.info '/usr/*' --output-file coverage.info.cleaned --rc lcov_branch_coverage=1\n        COMMAND genhtml -o coverage coverage.info.cleaned --rc lcov_branch_coverage=1\n        COMMAND rm coverage.info coverage.info.cleaned\n    )\nendif()\n\n\nadd_custom_target(doc\n    WORKING_DIRECTORY ${libsoundio_BINARY_DIR}\n    COMMAND doxygen ${DOXYGEN_CONF_FILE}\n)\n\n\n\nmessage(\"\\n\"\n    \"Installation Summary\\n\"\n    \"--------------------\\n\"\n    \"* Install Directory            : ${CMAKE_INSTALL_PREFIX}\\n\"\n    \"* Build Type                   : ${CMAKE_BUILD_TYPE}\\n\"\n    \"* Build static libs            : ${BUILD_STATIC_LIBS}\\n\"\n    \"* Build examples               : ${BUILD_EXAMPLE_PROGRAMS}\\n\"\n    \"* Build tests                  : ${BUILD_TESTS}\\n\"\n)\n\nmessage(\n    \"System Dependencies\\n\"\n    \"-------------------\\n\"\n    \"* threads                      : ${STATUS_THREADS}\\n\"\n    \"* JACK       (optional)        : ${STATUS_JACK}\\n\"\n    \"* PulseAudio (optional)        : ${STATUS_PULSEAUDIO}\\n\"\n    \"* ALSA       (optional)        : ${STATUS_ALSA}\\n\"\n    \"* CoreAudio  (optional)        : ${STATUS_COREAUDIO}\\n\"\n    \"* WASAPI     (optional)        : ${STATUS_WASAPI}\\n\"\n)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (Expat)\n\nCopyright (c) 2015 Andrew Kelley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.0458984375,
          "content": "# libsoundio\n\nC library providing cross-platform audio input and output. The API is\nsuitable for real-time software such as digital audio workstations as well\nas consumer software such as music players.\n\nThis library is an abstraction; however in the delicate balance between\nperformance and power, and API convenience, the scale is tipped closer to\nthe former. Features that only exist in some sound backends are exposed.\n\n## Features and Limitations\n\n * Supported operating systems:\n   - Windows 7+\n   - MacOS 10.10+\n   - Linux 3.7+\n * Supported backends:\n   - [JACK](http://jackaudio.org/)\n   - [PulseAudio](http://www.freedesktop.org/wiki/Software/PulseAudio/)\n   - [ALSA](http://www.alsa-project.org/)\n   - [CoreAudio](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/Introduction/Introduction.html)\n   - [WASAPI](https://msdn.microsoft.com/en-us/library/windows/desktop/dd371455%28v=vs.85%29.aspx)\n   - Dummy (silence)\n * Exposes both raw devices and shared devices. Raw devices give you the best\n   performance but prevent other applications from using them. Shared devices\n   are default and usually provide sample rate conversion and format\n   conversion.\n * Exposes both device id and friendly name. id you could save in a config file\n   because it persists between devices becoming plugged and unplugged, while\n   friendly name is suitable for exposing to users.\n * Supports optimal usage of each supported backend. The same API does the\n   right thing whether the backend has a fixed buffer size, such as on JACK and\n   CoreAudio, or whether it allows directly managing the buffer, such as on\n   ALSA, PulseAudio, and WASAPI.\n * C library. Depends only on the respective backend API libraries and libc.\n   Does *not* depend on libstdc++, and does *not* have exceptions, run-time type\n   information, or [setjmp](http://latentcontent.net/2007/12/05/libpng-worst-api-ever/).\n * Errors are communicated via return codes, not logging to stdio.\n * Supports channel layouts (also known as channel maps), important for\n   surround sound applications.\n * Ability to monitor devices and get an event when available devices change.\n * Ability to get an event when the backend is disconnected, for example when\n   the JACK server or PulseAudio server shuts down.\n * Detects which input device is default and which output device is default.\n * Ability to connect to multiple backends at once. For example you could have\n   an ALSA device open and a JACK device open at the same time.\n * Meticulously checks all return codes and memory allocations and uses\n   meaningful error codes.\n * Exposes extra API that is only available on some backends. For example you\n   can provide application name and stream names which is used by JACK and\n   PulseAudio.\n\n## Synopsis\n\nComplete program to emit a sine wave over the default device using the best\nbackend:\n\n```c\n#include <soundio/soundio.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\nstatic const float PI = 3.1415926535f;\nstatic float seconds_offset = 0.0f;\nstatic void write_callback(struct SoundIoOutStream *outstream,\n        int frame_count_min, int frame_count_max)\n{\n    const struct SoundIoChannelLayout *layout = &outstream->layout;\n    float float_sample_rate = outstream->sample_rate;\n    float seconds_per_frame = 1.0f / float_sample_rate;\n    struct SoundIoChannelArea *areas;\n    int frames_left = frame_count_max;\n    int err;\n\n    while (frames_left > 0) {\n        int frame_count = frames_left;\n\n        if ((err = soundio_outstream_begin_write(outstream, &areas, &frame_count))) {\n            fprintf(stderr, \"%s\\n\", soundio_strerror(err));\n            exit(1);\n        }\n\n        if (!frame_count)\n            break;\n\n        float pitch = 440.0f;\n        float radians_per_second = pitch * 2.0f * PI;\n        for (int frame = 0; frame < frame_count; frame += 1) {\n            float sample = sinf((seconds_offset + frame * seconds_per_frame) * radians_per_second);\n            for (int channel = 0; channel < layout->channel_count; channel += 1) {\n                float *ptr = (float*)(areas[channel].ptr + areas[channel].step * frame);\n                *ptr = sample;\n            }\n        }\n        seconds_offset = fmodf(seconds_offset +\n            seconds_per_frame * frame_count, 1.0f);\n\n        if ((err = soundio_outstream_end_write(outstream))) {\n            fprintf(stderr, \"%s\\n\", soundio_strerror(err));\n            exit(1);\n        }\n\n        frames_left -= frame_count;\n    }\n}\n\nint main(int argc, char **argv) {\n    int err;\n    struct SoundIo *soundio = soundio_create();\n    if (!soundio) {\n        fprintf(stderr, \"out of memory\\n\");\n        return 1;\n    }\n\n    if ((err = soundio_connect(soundio))) {\n        fprintf(stderr, \"error connecting: %s\", soundio_strerror(err));\n        return 1;\n    }\n\n    soundio_flush_events(soundio);\n\n    int default_out_device_index = soundio_default_output_device_index(soundio);\n    if (default_out_device_index < 0) {\n        fprintf(stderr, \"no output device found\");\n        return 1;\n    }\n\n    struct SoundIoDevice *device = soundio_get_output_device(soundio, default_out_device_index);\n    if (!device) {\n        fprintf(stderr, \"out of memory\");\n        return 1;\n    }\n\n    fprintf(stderr, \"Output device: %s\\n\", device->name);\n\n    struct SoundIoOutStream *outstream = soundio_outstream_create(device);\n    outstream->format = SoundIoFormatFloat32NE;\n    outstream->write_callback = write_callback;\n\n    if ((err = soundio_outstream_open(outstream))) {\n        fprintf(stderr, \"unable to open device: %s\", soundio_strerror(err));\n        return 1;\n    }\n\n    if (outstream->layout_error)\n        fprintf(stderr, \"unable to set channel layout: %s\\n\", soundio_strerror(outstream->layout_error));\n\n    if ((err = soundio_outstream_start(outstream))) {\n        fprintf(stderr, \"unable to start device: %s\", soundio_strerror(err));\n        return 1;\n    }\n\n    for (;;)\n        soundio_wait_events(soundio);\n\n    soundio_outstream_destroy(outstream);\n    soundio_device_unref(device);\n    soundio_destroy(soundio);\n    return 0;\n}\n```\n\n### Backend Priority\n\nWhen you use `soundio_connect`, libsoundio tries these backends in order.\nIf unable to connect to that backend, due to the backend not being installed,\nor the server not running, or the platform is wrong, the next backend is tried.\n\n 0. JACK\n 0. PulseAudio\n 0. ALSA (Linux)\n 0. CoreAudio (OSX)\n 0. WASAPI (Windows)\n 0. Dummy\n\nIf you don't like this order, you can use `soundio_connect_backend` to\nexplicitly choose a backend to connect to. You can use `soundio_backend_count`\nand `soundio_get_backend` to get the list of available backends.\n\n[API Documentation](http://libsound.io/doc)\n\n### Building\n\nInstall the dependencies:\n\n * cmake\n * ALSA library (optional)\n * libjack2 (optional)\n * libpulseaudio (optional)\n\n```\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\n### Building for Windows\n\nYou can build libsoundio with [mxe](http://mxe.cc/). Follow the\n[requirements](http://mxe.cc/#requirements) section to install the\npackages necessary on your system. Then somewhere on your file system:\n\n```\ngit clone https://github.com/mxe/mxe\ncd mxe\nmake MXE_TARGETS='x86_64-w64-mingw32.static i686-w64-mingw32.static' gcc\n```\n\nThen in the libsoundio source directory (replace \"/path/to/mxe\" with the\nappropriate path):\n\n```\nmkdir build-win32\ncd build-win32\ncmake .. -DCMAKE_TOOLCHAIN_FILE=/path/to/mxe/usr/i686-w64-mingw32.static/share/cmake/mxe-conf.cmake\nmake\n```\n\n```\nmkdir build-win64\ncd build-win64\ncmake .. -DCMAKE_TOOLCHAIN_FILE=/path/to/mxe/usr/x86_64-w64-mingw32.static/share/cmake/mxe-conf.cmake\nmake\n```\n\n### Testing\n\nFor each backend, do the following:\n\n 0. Run the unit tests: `./unit_tests`. To see test coverage, install lcov, run\n   `make coverage`, and then view `coverage/index.html` in a browser.\n 0. Run the example `./sio_list_devices` and make sure it does not crash, and\n    the output looks good. If valgrind is available, use it.\n 0. Run `./sio_list_devices --watch` and make sure it detects when you plug and\n    unplug a USB microphone.\n 0. Run `./sio_sine` and make sure you hear a sine wave. For backends with raw\n    devices, run `./sio_sine --device id --raw` (where 'id' is a device id you\n    got from `sio_list_devices` and make sure you hear a sine wave.\n    - Use 'p' to test pausing, 'u' to test unpausing, 'q' to test cleanup.\n    - 'c' for clear buffer. Clear buffer should not pause the stream and it\n      should also not cause an underflow.\n    - Use 'P' to test pausing from the callback, and then 'u' to unpause.\n 0. Run `./underflow` and read the testing instructions that it prints.\n 0. Run `./sio_microphone` and ensure that it is both recording and playing\n    back correctly. If possible use the `--in-device` and `--out-device`\n    parameters to test a USB microphone in raw mode.\n 0. Run `./backend_disconnect_recover` and read the testing instructions that\n    it prints.\n 0. Run `./latency` and make sure the printed beeps line up with the beeps that\n    you hear.\n\n### Building the Documentation\n\nEnsure that [doxygen](http://www.stack.nl/~dimitri/doxygen/) is installed,\nthen:\n\n```\nmake doc\n```\n\nThen look at `html/index.html` in a browser.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "soundio",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}