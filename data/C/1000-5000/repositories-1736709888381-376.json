{
  "metadata": {
    "timestamp": 1736709888381,
    "page": 376,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ntop/PF_RING",
      "stars": 2730,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.9375,
          "content": "##### Packages\n*.tgz\n\n##### Compiled source\n#*.a FIXX not all .a should be ignored\n*.o\n#*.so FIXX not all .so should be ignored\n*.lo\n*.la\n*.pyc\n*.cmd\n*.ko\n*.o.ur-safe\n\n#### OS and tools generated files\n*~\n.#*\ncscope.out\nTAGS\n*.doxyfile\n.DS_Store*\nehthumbs.db\nIcon?\nThumbs.db\n*.swp\n*.log\n*.deb\n/*.changes\n.project\n.cproject\n.pydevproject\n.subversion\n*.3pcap\n\n# configure and others\nacinclude.m4\nautogen.log\nautom4te.cache\ncompile\nconfig.log\nconfig.status\n.deps/\n.libs/\nlibtool\nstamp-h1\n#Makefile FIXX not all makefiles should be ignored\n*.dat\n.tmp_versions\n*.manmisc\n*.manfile\n\ndrivers/intel/zc-dkms-mkdeb/debian/control\ndrivers/intel/zc-dkms.mkrpm.spec\n\ndrivers/intel/e1000e/e1000e-*-zc/src/ixgbe.mod.c\ndrivers/intel/e1000e/e1000e-*-zc/src/modules.order\ndrivers/intel/e1000e/e1000e-*-zc/src/e1000e.mod.c\n\ndrivers/intel/igb/igb-*-zc/src/ixgbe.mod.c\ndrivers/intel/igb/igb-*-zc/src/modules.order\ndrivers/intel/igb/igb-*-zc/src/igb.mod.c\n\ndrivers/intel/ixgbe/ixgbe-*-zc/src/ixgbe.mod.c\ndrivers/intel/ixgbe/ixgbe-*-zc/src/modules.order\ndrivers/intel/ixgbe/ixgbe-*-zc/src/ixgbe.mod.c\n\ndrivers/intel/i40e/i40e-*-zc/src/ixgbe.mod.c\ndrivers/intel/i40e/i40e-*-zc/src/modules.order\ndrivers/intel/i40e/i40e-*-zc/src/i40e.mod.c\ndrivers/intel/i40e/i40e-*-zc/src/i40e/i40e.mod.c\ndrivers/intel/i40e/i40e-*-zc/src/i40e/modules.order\n\ndrivers/intel/fm10k/fm10k-*-zc/src/ixgbe.mod.c\ndrivers/intel/fm10k/fm10k-*-zc/src/modules.order\ndrivers/intel/fm10k/fm10k-*-zc/src/fm10k.mod.c\n\nkernel/modules.order\nkernel/pf_ring.mod.c\nuserland/lib/config.h\nuserland/lib/pfring_config\n\nuserland/libpcap-*-ring/bpf_filter.c\nuserland/libpcap-*-ring/config.h\nuserland/libpcap-*-ring/grammar.c\nuserland/libpcap-*-ring/libpcap.so.*\nuserland/libpcap-*-ring/net\nuserland/libpcap-*-ring/pcap-config\nuserland/libpcap-*-ring/scanner.c\nuserland/libpcap-*-ring/scanner.h\nuserland/libpcap-*-ring/tokdefs.h\nuserland/libpcap-*-ring/version.c\nuserland/libpcap-*-ring/version.h\n\nuserland/libpcap-*/Makefile\nuserland/libpcap-*/bpf_filter.c\nuserland/libpcap-*/config.h\nuserland/libpcap-*/grammar.c\nuserland/libpcap-*/libpcap.a\nuserland/libpcap-*/libpcap.so.*\nuserland/libpcap-*/net\nuserland/libpcap-*/pcap-config\nuserland/libpcap-*/scanner.c\nuserland/libpcap-*/scanner.h\nuserland/libpcap-*/tokdefs.h\nuserland/libpcap-*/version.c\nuserland/libpcap-*/version.h\n\nuserland/tcpdump-*/config.h\nuserland/tcpdump-*/tcpdump\nuserland/tcpdump-*/tcpdump.1\nuserland/tcpdump-*/version.c\n\n# executables\nuserland/c++/pf_test\nuserland/examples/alldevs\nuserland/examples/pcap2nspcap\nuserland/examples/pcount\nuserland/examples/pfbounce\nuserland/examples/pfbridge\nuserland/examples/pfcount\nuserland/examples/pfcount_82599\nuserland/examples/pfcount_aggregator\nuserland/examples/pfcount_bundle\nuserland/examples/pfcount_multichannel\nuserland/examples/pfdump\nuserland/examples/pffilter_test\nuserland/examples/pflatency\nuserland/examples/pfmap\nuserland/examples/pfsend\nuserland/examples/pfsystest\nuserland/examples/pfwrite\nuserland/examples/preflect\nuserland/examples_zc/zbalance\nuserland/examples_zc/zbalance_DC_ipc\nuserland/examples_zc/zbalance_ipc\nuserland/examples_zc/zbounce\nuserland/examples_zc/zbounce_ipc\nuserland/examples_zc/zcount\nuserland/examples_zc/zcount_ipc\nuserland/examples_zc/zfanout_ipc\nuserland/examples_zc/zfifo\nuserland/examples_zc/zpipeline\nuserland/examples_zc/zpipeline_ipc\nuserland/examples_zc/zreplicator\nuserland/examples_zc/zsend\n\nuserland/lib/libpfring.a\nuserland/lib/libpfring.so\n\n####### exceptions to the rules\n!/Makefile\n!/.pc/\n\nuserland/c++/Makefile\nuserland/examples/Makefile\nuserland/examples_zc/Makefile\nuserland/examples_zc/zsanitycheck\nuserland/lib/Makefile\nuserland/lib/nbpf.h\nuserland/lib/npcap.h\nuserland/lib/pfring_mod_dag.h\nuserland/lib/pfring_mod_myricom.h\nuserland/lib/pfring_mod_nt.h\nuserland/lib/pfring_mod_timeline.h\n\nuserland/nbpf/Makefile\nuserland/nbpf/grammar.tab.c\nuserland/nbpf/grammar.tab.h\nuserland/nbpf/lex.yy.c\nuserland/nbpf/libnbpf.a\nuserland/nbpf/nbpftest\n\nuserland/lib/libs/lib*_dbg.a\nuserland/lib/libs/lib*_dbg.so\n\n# Use \"git clean -ndX\" to test\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 54.9189453125,
          "content": "# CHANGELOG\n\n---------------------------------------\n2024-08-05 PF_RING 8.8\n\n* Key Features\n - Support for Napatech Flow Manager\n - Support for NVIDIA BlueField 2/3\n\n* PF_RING Library\n - Add pfring_flow_update struct and pfring_recv_flow\n - Add PF_RING_FLOW_OFFLOAD flag to enable Flow Table offload on supported adapters\n - Add PF_RING_FLOW_OFFLOAD_AUTO_UNLEARN to control tcp auto unlearn\n - Add PF_RING_KEEP_CRC flag (required by Napatech)\n - Fix pfring_zc_send_pkt_multi return code\n\n* PF_RING Kernel Module\n - Add flow_id to generic_flow_tuple_hw_rule\n - Fix crash with more than 64 rss queues\n - Various minor fixes \n\n* FT Library\n - Add pfring_ft_zmq_get_stats API\n - Add slice action\n\n* PF_RING Capture Modules and ZC Drivers\n - Add support for Napatech Flow Manager (Flow Table offload)\n - Add support for NVIDIA BlueField (ARM64)\n - Add jumbo support for ice-zc\n - Add support for Napatech zero-copy forwarding (pfring_send_last_rx_packet)\n - Fix all Intel drivers compilation on latest kernels (including Ubuntu 24)\n   - ixgbevf-zc driver update v.4.18.9\n   - i40e-zc driver update v.2.24.6\n   - iavf-zc driver update v.4.9.5\n - Extend Napatech interface name to support adapter ID\n - Fix drop counter on NVIDIA/Mellanox Connect-X (read phy discards in addition to buffer discards)\n - Fix crash with more than 64 rss queues\n - Fix iavf (i40e VF) ring initialization\n - Fix driver dependency intel_auxiliary\n \n* PF_RING-aware Libpcap/Tcpdump\n - New pfring-aware tcpdump 4.99.4\n\n* Examples\n - New pfflow_offload sample app with support for Napatech Flow Manager\n - pfsend\n   - Fix ipv6 packet forging\n   - Add eth header when replaying RAW capture files\n   - Add -U / -K options to control flow distribution\n   - Fix on the fly packets generation\n   - Fix -A when -O is used\n - pfsend_multichannel\n   - Add -C to support multiple TX channels with Napatech\n - pfbridge\n   - Add support for Napatech zero-copy forwarding\n\n* Misc\n - Improve pf_ringctl to auto generate hugepages.conf based on numa nodes\n - Change MAX_CAPLEN to 65600 to correctly handle max jumbo packet size\n - Remove deprecated code for Accolade and fm10k\n\n---------------------------------------\n2023-10-23 PF_RING 8.6.1\n\n* PF_RING Library\n - New pfring_set_cluster_consumer API to set a kernel cluster with (optional) consumer queue id and support for options (pfring_set_cluster() is set as deprecated)\n\n* PF_RING Kernel Module\n - Implement 'relaxed' distribution mode in the kernel cluster to deliver packets to the first available queue if a consumer is down (CLUSTER_OPTION_RELAXED_DISTRIBUTION)\n - Support for kernel 6.4+\n\n* PF_RING Capture Modules and ZC Drivers\n - New ice zc driver v.1.12.7\n - New ixgbe zc driver v.5.19.6\n - New igb zc driver v.5.14.16\n - Add auto DDP install in ice dkms packages\n\n* Examples\n - pfsend:\n   - Add -G for seding traffic on two interfaces (one per direcion)\n   - Improve TX rate precision adjust the transmission rate to compensate cpu freq fluctuations\n - pfcount: print both lib and kernel module versions\n\n* Misc\n - Fix hugepages file parsing (/etc/hugepages.conf)\n\n---------------------------------------\n2023-09-01 PF_RING 8.6\n\n* PF_RING Library\n - New Runtime Manager for injecting and removing filtering rules to the socket via Redis\n - Fix memory leaks in PCAP module\n - Fix caplen/MTU on loopback capture\n\n* PF_RING Kernel Module\n - Add support for probabilistic sampling with kernel capture\n\n* FT Library\n - Improve application protocol guess with nDPI\n\n* PF_RING Capture Modules and ZC Drivers\n - Add initial support for NVIDIA/Mellanox BlueField\n - Add Napatech ns timestamp in PCAP mode\n - Add support for probabilistic sampling with userspace capture\n - Optimize hw timestamping on ice adapters (Intel E810)\n - Fix timestamp support when using the ZC burst API with ice adapters\n - Fix drivers compilation on Kernel 6.x\n - Fix drivers compilation on RH 8.8\n\n* nPCAP\n - Fix memory corruption with big index files\n\n* PF_RING-aware Libpcap/Tcpdump\n - Add PF_RING support to pcap_inject\n - Fix pcap_read_pf_ring return code (number of packets)\n\n* Examples\n - zbalance_ipc: add support for multiple balancer threads when using NVIDIA/Mellanox adapters\n - pfsend: add -c option to balance on dest ip rather than src up\n - pfcount: compute drop rate in packet mode only\n - pfcount: report expired licenses\n - Fix ftflow_dpdk compilation on DPDK 22 or later\n - Fix memory leaks in pcount, alldevs, preflect, ftflow_pcap, \n\n* Misc\n - Add support for Debian 12\n - Add libelf and libbpf dependencies to packages\n - Add sbsigntool dependency which includes kmodsign required by dkms\n - Add revision to pfring-dkms dependency in packages\n - Fix check for init/systemd presence\n - Cleanup support for legacy adapters\n\n---------------------------------------\n2023-01-30 PF_RING 8.4\n\n* PF_RING Library\n - New API pfring_get_ethtool_link_speed\n - Add vlan_id to flow rule struct\n - Add optimization flags to BPF filters compiled with pcap_compile\n - Fix pfring_open_multichannel\n\n* PF_RING Kernel Module\n - Add keep_vlan_offload option to avoid reinserting VLAN header on VLAN interfaces when used inline\n\n* ZC Library\n - New ZC APIs (available on supported adapters)\n   - pfring_zc_get_device_clock\n   - pfring_zc_set_device_clock\n   - pfring_zc_adjust_device_clock\n   - pfring_zc_send_pkt_get_time\n - Add new pfring_zc_run_fanout_v3 API to support more than 64 fan-out queues\n - Add support for capturing stack packets, used by zcount and zbalance_ipc\n\n* PF_RING Capture Modules and ZC Drivers\n - New iavf-zc driver to support i40e and ice Virtual Functions\n   - Support for VF trust mode on ice adapters (promisc with SR-IOV)\n - Improve ice driver (E810 adapters)\n   - Update ice driver to v.1.9.11\n   - Add support to get time, set time, adjust time, send get time\n - Improvei the NVIDIA/Mellanox (mlx) driver\n   - Extend hardware rules\n   - Add support for VLAN filtering\n   - Add set_default_hw_action API\n   - Fix reported link speed\n   - Fix bidirectional rules\n   - Fix pfring_poll support\n - Improve the Napatech driver\n   - Add nanosecond timestamp capture when using the packet API in PCAP chunk mode\n - Improve the ZC drivers API to support more callbacks\n - Add socket extensions (getsockopt/setsockopt):\n   - SO_GET_DEV_STATS (get_stats ZC drivers callback)\n   - SO_GET_DEV_TX_TIME (get_tx_time ZC drivers callback)\n   - SO_SET_DEV_TIME (set_time ZC drivers callback)\n   - SO_SET_ADJ_TIME (adjust_time ZC drivers callback)\n - Add management_only_mode to allow opening multiple sockets on the same ZC interface\n - Update drivers to support latest RH 9.1, Ubuntu 22, Debian kernels\n\n* FT Library\n  - Fix double free\n\n* nBPF \n - Add icmp protocol primitive support\n\n* nPCAP\n - Update npcap lib to support for nanosecond time in packet extraction\n\n* PF_RING-aware Libpcap/Tcpdump\n - Update tcpdump to v.4.99.1\n - Update libpcap to v.1.10.1\n\n* Examples\n - Add ztime example\n   - Ability to set/adjust the card clock without capturing/transmitting traffic (external process)\n   - Test for the send-get-time feature\n - pfsend\n   - Flush queued packets when waiting at real pcap rate and on shutdown\n   - Fix headers ranzomization \n   - Fix crash with -z\n - pfsend_multichannel\n   - Add support for controlling IPs generated\n - pfcount\n   - Add -I option to print interface info in JSON format\n - pfcount_multichannel\n   - Print full packet metadata with -v\n - zbalance_ipc\n   - Add support for up to 128 queues with -m 1 and -m 2 (new v3 api) \n   - Add -X option to capture TX traffic (standard driver only)\n   - Fix check for queues limit\n - zdelay\n   - Fix queue size (power of 2)\n\n* Misc\n - Add pfcount_multichannel and pfsend_multichannel to packages\n - Service script (pf_ringctl)\n   - Add support for configuring RSS via ethtool\n   - Add pre/post scripts for ZC drivers\n   - Handle multi-line driver conf file\n - Removed obsolete fm10k driver\n\n---------------------------------------\n2022-06-30 PF_RING 8.2\n\n* PF_RING Library\n - New new pfring_get_caplen API\n - New pfring_get_link_type API\n - Add src_ip_mask and dst_ip_mask to generic_flow_rule\n - Add priority to hw_filtering_rule\n - Add module version to device info returned by pfring_findalldevs\n - Refactor device name parsing\n - Use sockaddr_ll in bind (to supports interface names longer than 14 chars)\n\n* ZC Library\n - New Mellanox support for ConnectX 4/5/6 adapters, including hardware offloads for timestamp, filtering, RSS\n - Fix pfring_zc_numa_get_cpu_node\n\n* FT Library\n - Add native support for flow export over ZMQ\n\n* PF_RING Kernel Module\n - Add support for VXLAN\n - Add support for both sockaddr and sockaddr_ll in bind\n - Refactor kernel locking\n - Discard VLAN in hash cluster_per_flow_ip_with_dup_tuple calculation\n - Detect when a process owning a PF_RING socket changes the PID (e.g. fork)\n - Export process PID to userspace\n - Fix compilation on latest kernels for Rocky Linux and RH 8.5, Debian 9, 10, 11, Ubuntu 18, 20, 22\n - Fix net namespace handling\n - Fix crash when renaming /proc entries\n\n* PF_RING Capture Modules\n - Fix drop statistics on Napatech with HBA set\n\n* ZC Drivers\n - New igb-zc driver v.5.10.2\n - New i40e-zc driver v.2.17.4\n - New ice-zc driver v.1.8.8\n\n* nBPF \n - Fix double free\n\n* Examples\n - New sample application pfsend_multichannel to send traffic using RSS\n - New zdelay application to forward traffic between interfaces, adding a configurable delay\n - pfcount_multichannel: remove limit on number of threads\n - zbalance_ipc: improve hashing modes (e.g. add -Y to control eth type)\n - pfcount:\n   - Add -0 to steer all traffic to RSS queueu 0\n   - Add -P to set rule priority\n - ftflow_dpdk:\n   - Set RSS mode/hf (required on some adapters e.g. Mellanox)\n   - Use time from hardware timestamp when available\n\n* Misc\n - Add support for Ubuntu 22\n - Remove nBroker support (fm10k adapters are EOL)\n\n---------------------------------------\n2021-08-11 PF_RING 8.0\n\n* PF_RING Library\n - Add pfring_recv_burst API allowing batch receive (when supported by the capture module/adapter)\n - New zero-copy AF_XDP support (reworked), including pfring_recv_burst support\n - Fix breakloop when using pfring_loop\n\n* ZC Library\n - New pfring_zc_pkt_buff_data_from_cluster API to get the packet buffer providing packet handle and cluster\n - New pfring_zc_pkt_data_buff API to get the packet handle providing packet buffer and cluster\n - New pfring_zc_pkt_buff_pull_only API to remove data from the head room of a packet\n - Add PF_RING_ZC_BUFFER_HEAD_ROOM define (buffer head room size)\n - Add PF_RING_ZC_SEND_PKT_MULTI_MAX_QUEUES define (max number of queues in queues_mask)\n\n* FT Library\n - New pfring_ft_api_version API to get the API version\n - New pfring_zc_precompute_cluster_settings API to get memory information before allocating resources\n - Add VXLAN encapsulation support\n - Add tunnel_id to flow metadata\n - Add support for compiling examples with DPDK >=20\n - Fix L7 metadata with short flows\n\n* PF_RING-aware Libpcap/Tcpdump\n - Set 5-tuple clustering as default when using clustering with libpcap\n\n* PF_RING Kernel Module\n - Support for kernel >=5.9\n - Add more info to /proc, including promisc mode and ZC slots info\n - Handle long interface name (error on interface length bigger than 14-char as supported by bind)\n - Fix channel selection when channel is unknown (e.g. VM)\n - Fix triple VLAN tags with hw offload/acceleration\n - Fix check on mapped memory size\n - Fix potential data race in SO_SET_APPL_NAME\n - Fix OOB access\n\n* PF_RING Capture Modules\n - Accolade library update (SDK 1_2_20210714)\n - Napatech library update (SDK 12.7.2.1)\n - Silicom/Fiberblaze library update (SDK 3_5_9_1)\n - Add steer_to_ring and ring_id fields to Accolade rules (accolade_hw_rule)\n - Add support for recv burst on Napatech adapters in chunk mode\n - Add PF_RING_PACKET_CAPTURE_PRIO env var to set hostBufferAllowance on Napatech adapters\n - Rename ACCOLADE_RING_BLOCKS env var to ANIC_RING_BLOCKS on Accolade adapters (default is now 16)\n - Fix Accolade drop counter when capturing from rings\n - Fix extraction of packets with nsec timestamps on Timeline module (n2disk dump)\n\n* ZC Drivers\n - New ice ZC driver v.1.3.2 (Intel Columbiaville / E810 adapters) with symmetric RSS support\n - Support latest kernels, including RH/CentOS 8.4 and Ubuntu 20, for all ZC drivers\n - i40e ZC driver update (v.2.13.10)\n - e1000e ZC driver update (v.3.8.7)\n\n* nBPF \n - New nBPF primitives 'device <ID>' and 'interface <ID>' to match metadata from Arista MetaWatch devices\n\n* Examples\n - pfcount\n   - Add -B option (burst mode)\n - pfsend\n   - Add -n <num packets> support with -f <pcap>\n   - Add support to reforge src/dst IP from pcap with -S and -D\n - ftflow\n   - Add -E option to run extra DPI dissection (e.g. to print JA3 info)\n - zbalance_ipc \n   - Add runtime reload of nDPI protocol configuration file\n   - Add -m 7 option (sample distribution based on eth type)\n   - Add default configuration file /etc/cluster/cluster.conf (when no option is specified)\n\n* Misc\n - Move libraries and utility scripts from /usr/local to /usr\n - Install pfring-aware tcpdump with packages\n - Add revision to pfring-dkms version\n\n---------------------------------------\n2020-10-19 PF_RING 7.8\n\n* PF_RING Library\n - Add support for Device ID and Port ID to the extended packet header\n - Add Arista 7150 Series hw timestamps support (keyframes and packet trailer parsing and stripping)\n - Add Metawatch Metamako hw timestamps support (packet trailer parsing and stripping)\n - errno EINTR is now returned on breakloop\n - Improve XDP support\n - Replace configure --enable-xdp with --disable-xdp (XDP enabled by default when supported)\n\n* ZC Library\n - New PF_RING_ZC_DEVICE_METAWATCH_TIMESTAMP flag to enable Metawatch hw timestamps\n - New pfring_zc_get_pool_id API to get the Pool ID\n - New pfring_zc_run_balancer_v2 pfring_zc_run_fanout_v2 APIs to support filtering functions\n - BPF support in ZC interfaces, standard interfaces and SPSC queues\n - Add support for BPF in TX queues\n - Builtin GTP hash now expose GTP info (flags)\n - Fix CRC strip on ixgbevf\n\n* FT Library\n - New pfring_ft_flow_get_id API to get the flow ID\n - New PFRING_FT_IGNORE_HW_HASH flag to ignore hw packet hash\n - New PKT_FLAGS_FLOW_OFFLOAD_1ST packet flag (first packet of a flow)\n - Add support for flow slicing\n - New API pfring_ft_flow_get_users to get flow users (in case of slicing)\n - Improve application protocol detection\n - Fix bogus-IP headers parsing \n\n* PF_RING-aware Libpcap/Tcpdump\n - New libpcap v.191\n - New tcpdump v.4.9.3\n - stats.ps_recv now includes packets dropped due to out of buffer space\n\n* PF_RING Kernel Module\n - Fix channels with standard drivers\n - Fix 64-bit channel mask\n - Fix defragmentation of packets with ethernet padding \n - Fix unnecessary device mapping causing ifindex exhaustion\n\n* PF_RING Capture Modules\n - Update support for Fiberblaze adapters\n - Fix filtering with Accolade adapters\n\n* ZC Drivers\n - New ice ZC driver supporting E800 Series Intel adapters\n - Support for Ubuntu 20 LTS\n - Support for CentOS/RedHat 8.2 \n - Fix queue attach/detach in ixgbe-zc\n - Support for kernel 5.4\n\n* nBPF \n - Add support for matching Local/Remote IP (new extended-BPF primitives)\n - Support uppercase AND/OR in extended-BPF filters\n - Fix extended-BPF grammar \n\n* Examples\n - New zfilter_mq_ipc sample app (packet filtering with multiple threads and fanout to multiple consumer processes)\n - ftflow:\n   - New -H option to ignore hw hash setting PFRING_FT_IGNORE_HW_HASH\n   - New -t option to print stats only\n - ftflow_dpdk\n   - New -l option to run loopback tests\n   - Add RX/TX ring size configuration\n - pfsend:\n   - New -z option to precompute randomized sequence\n   - New -W ID[,ID] option to forge VLAN and QinQ VLAN\n - zbalance_ipc:\n   - New -x <vlans> option to filter by VLAN ID\n   - Add ability to set BPF to egress queues\n   - Add ability to refresh BPF filters at runtime\n   - New -G <queue>:<version> option to forward GTP-C traffic to a specific queue\n - New zcount -f option to set BPF filters\n - New pfcount -F option (do not strip FCS)\n - New zcount/zcount_ipc -t option to read the packet payload\n - New pcount -e option to set the capture direction\n - Add VLAN to the flows dumped by ftflow\n - Fix transmission of small packets (less than 60 bytes)\n - Fix CPU affinity in ZC sample applications\n\n* Misc\n - Handle failures in service restart during package updates\n - Add linux headers dependency to the pfring-dkms package\n - Add actual version/revision to pfring-drivers-zc-dkms packages\n - Fix installed .so library and links\n - Fix ZC DAQ compilation and API update\n - Fix service scripts to avoid command injections\n\n---------------------------------------\n2020-02-18 PF_RING 7.6\n\n* PF_RING Library\n - New pfring_open flag PF_RING_TX_BPF to evaluate the BPF filter also for TX\n - New pfring_open flag PF_RING_FLOW_OFFLOAD_TUNNEL to dissect tunneled traffic in flow-offload mode\n - New pfring_open flag PF_RING_DISCARD_INJECTED_PKTS to discard stack-injected packets\n\n* ZC Library\n - New API call pfring_zc_close_device to close a ZC interface\n - New 'flags' parameter to pfring_zc_create_cluster\n - Fixed memory allocation in case of more than 4GB of buffer size\n\n* FT Library\n - New API call pfring_ft_set_filter_all_protocols to reset all filtering rules\n - New API call pfring_ft_set_license to set a license at runtime\n - New API call pfring_ft_flow_get_ndpi_handle to access the flow nDPI handle\n - New pfring_ft_l7_protocol_id, pfring_ft_get_ndpi_handle to access the nDPI handle\n - New pfring_ft_flow_value status field to get flow termination reason\n - New PFRING_FT_TABLE_FLAGS_DPI_EXTRA flag to enable extra metadata extraction\n - New PFRING_FT_DECODE_TUNNELS flag to decode tunnels, new tunnel_type item in the flow value\n - New flow slicing support (pfring_ft_flow_set_flow_slicing API)\n - Added CAPWAP support\n - Added flow metadata for HTTP/DNS/SSL\n - Added global 'default' section to the rules configuration file\n - Added dpi_min_num_tcp_packets / dpi_min_num_udp_packets to the configuration file\n - Added flow_idle_timeout / flow_lifetime_timeout to the configuration file\n - Added src/dst mac to the exported flow key\n - Added ICMP type/code to flow metadata\n - Added flags to flow metadata\n - Added custom flow actions to be defined by the user\n - Added pfring_ft_load_configuration_ext API\n - Improved protocol detection for some protocols like Skype\n - Improved metadata extraction for some protocols like Telnet\n - Improved pfring_ft_license to return the duration also in demo mode\n - Changed l7_detected callback: this is called before the flow_packet callback now\n - Changed pfring_ft_create_table and pfring_ft_flow_value to allocate user metadata as part of the flow structure\n - Fixed filtering/shunting of custom protocols\n - Fixed protocol detection in case of guess\n - Fixed pfring_ft_set_l7_detected_callback user parameter handling\n\n* PF_RING-aware Libpcap\n - Fixed device name check during socket initialization to handle long interface names\n - Fixed loop break\n\n* PF_RING Kernel Module\n - Added new clustering mode cluster_per_flow_ip_with_dup_tuple\n - Allow any to capture from any namespace (on the host only)\n - Remapping ifindex to an internal device index to handle ifindex growing indefinitely\n - Fixed kernel crash parsing malformed packets (12 nested QinQ VLAN headers with GRE)\n - Fixed possible race condition\n - Fixed QinQ VLAN and VLAN offload support\n - Fixed concurrent access to the ring in case of loopback device and bridge\n - Compilation fixes for kernel 5.x\n - Reworked max ring size check to handle cases like jumbo frames\n - Improved promisc management\n\n* PF_RING Capture Modules\n - New AF_XDP capture module\n - Napatech library update, fixed findalldev\n - Accolade library update, fixed caplen vs orig len, new env var ACCOLADE_FLOW_IDLE_TIMEOUT\n - Myricom library update, license fix with port aggregation\n - DAG library update\n\n* ZC Drivers\n - New ixgbe-zc driver v.5.5.3\n - Support for Intel X550\n - Compilation fixes for kernel 5.x\n - Handling if up/down when the interface is in use by ZC\n\n* nBPF \n - Added support to match custom fields through a callback (nbpf_set_custom_callback)\n\n* Examples\n - zcount improvements:\n   - Added -T option to capture TX\n - zbalance_ipc improvements:\n   - Fixed -m 4/5/6 with multiple applications and more than 32 queues\n   - New -E option to enable debug mode\n   - New -C <FT config file> and -O <nDPI proto file> options\n - ftflow_dpdk improvements:\n   - More stats: drops, hw stats, per-queue throughput\n   - New options to control the link status, flow control, autoneg, port speed, checksum offload\n   - New -P option to set the TX rate\n   - New TX test mode and -T option to set the packet len\n   - New -F option to enable forwarding\n   - New -m <len> option to set the mtu\n   - Capture-only mode\n   - Forward optimizations\n - ftflow_pcap improvements:\n   - Support for processing a PCAP file\n   - New -p <proto.txt> option\n   - New -F <file> option to configure filtering/shunting rules\n - pfsend improvements:\n   - New -8 <num> option to send the same packets <num> times before moving to the next\n   - New -B <bpf> option to set a BPF filter\n   - New -t option to forge N different source port\n   - New -A option to generate increasing number of flows\n - pfcount improvements:\n   - New -R option to disable RSS reprogramming\n - pfbridge now discards injected packets\n\n* Misc\n - New pf_ringcfg script to automatically configure pf_ring and drivers\n - New pre/post scripts executed by systemd before/after loading pf_ring and drivers\n - Improved hugepages configuration with multiple nodes\n - npcap lib update, storage utility functions fix for NFS\n\n---------------------------------------\n2018-12-19 PF_RING 7.4\n\n* PF_RING Library\n - New pfring_open PF_RING_DO_NOT_STRIP_FCS flag to disable FCS/CRC stripping (when supported by the adapter)\n - Improved support for cross-compilation\n - New PF_RING_FT_CONF environment variable to enable PF_RING FT support and load L7 filtering rules\n - New PF_RING_FT_PROTOCOLS environment variable to load L7 protocols when PF_RING FT for L7 filtering is enabled\n\n* ZC Library\n - New pfring_zc_open_device flag PF_RING_ZC_DO_NOT_STRIP_FCS to disable FCS/CRC stripping (when supported by the adapter)\n - New builtin hash function pfring_zc_builtin_5tuple_hash based on 5-tuple\n - Fixed SPSC queues BPF support\n - Fixed KVM/ivshmem support on Ubuntu 16\n - Fixed pfring_zc_recv_pkt_burst with ixgbe-zc drivers\n\n* FT Library\n - New pfring_ft_set_l7_detected_callback API to set a callback for classified flows/packets (L7 protocol detected)\n - New pfring_ft_set_default_action API to set the default action for classified L7 flows\n - New pfring_ft_flow_get_action API to get the computed/actual flow action asyncronously\n - New pfring_ft_create_table flow_lifetime_timeout parameter to configure the maximum flow duration\n - New pfring_ft_load_ndpi_protocols API to load custom nDPI protocols from a configuration file (example: https://github.com/ntop/nDPI/blob/dev/example/protos.txt)\n - New pfring_ft_is_ndpi_available API to check nDPI availability\n - Added active_flows to pfring_ft_stats to get the number of currently active flows\n\n* PF_RING-aware Libpcap\n - New pcap_get_pfring_handle API to get the PF_RING handle used by Libpcap\n - New PCAP_PF_RING_ALWAYS_SYNC_FD environment variable for applications not using the fd provided by pcap_get_selectable_fd\n - Fix for applications polling from the pcap selectable fd when ZC drivers are used\n\n* PF_RING Kernel Module\n - Updates to support kernel 4.18 or older\n - Fixed 'stack' TX capture in ZC mode\n - Fixed ifindex lookup\n - Fixed promiscuous mode corner cases\n - Fixed arm32 support\n - Fixed IPv6 support in software filtering rules\n - Fixed software hash rules\n - Fixed kernel clustering in case of non-IP packets (sporadically recognized as IP fragments when the fragments cache was enabled)\n\n* PF_RING Capture Modules\n - Timeline module fixes:\n   - Fixed extraction of non-IP packets\n   - Fixed permissions check when running as unprivileges user, when the user has permissions on the filesystem\n - Accolade module update to support latest SDK API and features\n - Fixed Fiberblaze module bulk mode\n\n* ZC Drivers\n - New ixgbevf ZC driver\n - Drivers updates to support kernel 4.18 or older\n - Fixed sporadic crashes during application startup on high traffic rates\n - Fixed the DKMS packages\n - i40e ZC driver improvements:\n   - Forcing symmetric RSS hash on old firmwares\n   - Improved interrupts management to fix packets delivered in batches\n   - Fixed interrupts management when multiple sockets are active on the same interface (RX+TX or RSS)\n - ixgbe ZC driver improvements:\n   - Increased max MTU length to 16K\n   - Fixed card reset due to kernel-space TX packets pending while the interface is in use by ZC\n - Improved hardware timestamp support for igb ZC (i350/82580 adapters)\n\n* nBPF \n - Fixed 'portrange' token in BPF-like filters\n\n* Examples\n - New pftimeline example to extract traffic from a n2disk dump set using the pf_ring API\n - New pfsend -M <mac> option to forge the source MAC address\n - zbalance_ipc improvements:\n   - Added -m 6 distribution function (interface X to queue X)\n   - Added queues and TX interface stats under /proc (-p)\n   - Fixed multiapp (fanout) distribution for more than 32 egress queues\n - ftflow improvements:\n   - New -F option to load rules from a configuration file\n   - New -p option to load custom protocols\n   - Improved output (e.g. printing the flow action)\n - Improved ftflow_dpdk example, added bridging support \n - Fixed software filtering in pfcount (enabling full headers when filtering is enabled)\n\n* IDS Support (Snort/Bro)\n - Fixed Snort DAQ filtering API\n - Fixed cluster issues on Bro (due to a libpcap symbols issue)\n\n* Misc\n - Improved 'zbalance_ipc' clusters management with systemd:\n   - Service improvements to set the status after the cluster process is actually up and running\n   - Fixed hugepages memory allocation in case of clusters not using ZC drivers \n - CoreOS support, pf_ring module and drivers installation scripts\n - Improved service dependencies with systemd with respect to other ntop applications\n - Added GID to the hugepages configuration file to allow nonprivileged users to use ZC applications\n\n---------------------------------------\n2018-06-12 PF_RING 7.2\n\n* ZC Library\n - New API pfring_zc_pkt_buff_pull / pfring_zc_pkt_buff_push to manage buffer head room\n - New builtin hash pfring_zc_builtin_gre_hash with support for GRE tunneling\n   - zbalance_ipc -m 5 option for enabling GRE hashing\n - Support for up to 64 queues in pfring_zc_send_pkt_multi and pfring_zc_distribution_func\n - Fix for attaching to ZC IPC queues from containers\n\n* FT Library (New)\n - L7 flow classification and filtering library\n - Event-driven capture-agnostic API\n - Sample applications\n   - ftflow: flow records generation with PF_RING capture\n   - ftflow_pcap: flow records generation with PCAP capture\n   - ftflow_dpdk: flow records generation with DPDK capture\n   - fttest: performance benchmarking tool\n   - zbalance_ipc extension to process flows and filter packets\n\n* nBroker (New)\n - Traffic steering and filtering on Intel RRC (FM10K adapters)\n - Daemon to drive the adapter (nbrokerd)\n - API to configure the adapter using a C library (nbrokerlib)\n - Command-line tool with auto-completion to configure the adapter using scripts (nbroker-cli)\n - Low-level library used by nbrokerd to drive the adapter (rrclib)\n\n* PF_RING-aware Libpcap\n - PCAP_PF_RING_USERSPACE_BPF env var to force userspace filtering instead of kernel filtering\n\n* PF_RING Kernel Module\n - Full support for namespaces and containers\n - Fixed skbuff forwarding with fast-tx using reflect_packet\n - Fixed VLAN support in BPF with kernel extensions\n - Fixed support for NetXtreme cards with multiple queues\n - Fixed sw hash filtering for IPv6\n - Fixed intel_82599_perfect_filter_hw_rule VLAN byte order\n - Fixed huge rings (high number of slots or huge slot size)\n - Fixed VLAN offset and packet hash in case of QinQ and VLAN offload\n - Support for Ubuntu 18\n - Support for latest Centos 7 kernel\n - Support for latest Debian 8 kernel\n\n* PF_RING Capture Modules\n - Released source code for FPGA capture modules including Endace, Exablaze, Inveatech, Mellanox, Netcope\n - Accolade lib updates\n   - New flag PF_RING_FLOW_OFFLOAD_NOUP to enable flow offload without flow updates (standard raw packets are received, flow id is in the packet hash)\n   - Automatically generate the rule ID using rule_id = FILTERING_RULE_AUTO_RULE_ID\n   - Support for accolade 200Ku Flex adapters\n - Fiberblaze lib updates\n   - Packet recv in chunk mode\n - Fixed extraction from npcap/timeline in case of empty PCAP files in the dump set\n - Endace DAG updates\n   - Setting extended_hdr.pkt_hash from ERF FlowID or Packet Signature extension headers if available\n   - Support for pfring_set_application_name\n   - Support for pfring_dag_findalldevs\n - Napatech lib updates\n   - Support for sdk v10\n\n* Drivers\n - e1000e zc driver update v.3.4.0.2\n - i40e zc driver update v.2.4.6\n - ixgbe zc driver update v.5.3.7\n - igb zc driver update v.5.3.5.18\n - Fixed interrupts handling on i40e when in zc mode, this fixes the case where packets are received in batches of 4/8 packets\n - Using nbrokerd for initializing FM10K adapters and configuring the RRC switch\n\n* nBPF\n - Fixed rules constraints\n\n* Misc\n - Reworked init.d systemd support\n - New pf_ringctl script to manage pf_ring and drivers (this is used by init.d/systemd)\n - Documentation improvements, Doxygen integration with \"read the docs\"\n\n---------------------------------------\n2017-10-20 PF_RING 7.0\n\n* PF_RING Library\n - Flow offload support\n   - New PF_RING_FLOW_OFFLOAD pfring_open() flag to enable hw flow offload on supported cards (received buffers are native metadata)\n   - New PF_RING_FLOW_OFFLOAD_NOUPDATES pfring_open() flag to disable flow updates with hw flow offload enabled: only standard raw packets with a flow id are received\n   - New PKT_FLAGS_FLOW_OFFLOAD_UPDATE packet flag to indicate flow metadata in the received buffer (generic_flow_update struct)\n   - New PKT_FLAGS_FLOW_OFFLOAD_PACKET packet flag to indicate raw packet with flow_id in pkt_hash\n   - New PKT_FLAGS_FLOW_OFFLOAD_MARKER packet flag to indicate marked raw packet\n - Fixes for ARM systems\n\n* ZC Library\n - New pfring_zc_set_app_name API\n - PF_RING_ZC_PKT_FLAGS_FLOW_OFFLOAD flag to enable hw flow offload\n - Fixed BPF filters in SPSC queues\n - Fixed hugepages cleanup in case of application dropping privileges\n - Fixed sigbus error on hugepages allocation failure on numa systems\n - Fixed multiple clusters allocation in a single process\n\n* PF_RING-aware Libpcap/Tcpdump\n - Libpcap update v.1.8.1\n - Tcpdump update v.4.9.2\n\n* PF_RING Kernel Module\n - Docker/containers namespaces isolation support\n - Fixed capture on Raspberry Pi\n - Implemented support for VLAN filtering based on interface name (<device name>.<VLAN ID>, where ID = 0 accepts only untagged packets)\n - New cluster types cluster_per_flow_ip_5_tuple/cluster_per_inner_flow_ip_5_tuple to balance 5 tuple with IP traffic, src/dst mac otherwise\n - Fixed hash rule last match, new hash_filtering_rule_stats.inactivity stats\n\n* PF_RING Capture Modules\n - Accolade flow offload support\n   - New hw_filtering_rule type accolade_flow_filter_rule to discard or mark a flow\n - Netcope support\n   - New hw_filtering_rule type netcope_flow_filter_rule to discard a flow\n - Improved Fiberblaze support\n   - pfring_get_device_clock support\n   - Ability to set native filters by setting as BPF string 'fbcard:<fb filter>'\n   - Fixed TX memory management\n   - Fixed subnet BPF filters\n   - Fixed drop counter\n   - Fixed capture mode\n   - Fixed sockets not enabled\n   - FPGA error detection\n - Endace DAG update\n - npcap/timeline module compressed pcap extraction fix\n\n* Drivers\n - ixgbe-zc driver update v.5.0.4\n - i40e-zc driver update v.2.2.4\n\n* nBPF\n - Fixed nBPF parser memory leak\n\n* Examples\n - New pfsend option -L <num> to forge <num> VLAN IDs\n - zbalance_ipc improvements\n   - Ability to dump output to log file (-l)\n   - Fixed privileges drop (-D)\n\n* Misc\n - Fixed systemd dependencies, renamed pfring.service to pf_ring.service\n - New /etc/pf_ring/interfaces.conf configuration file for configuring management and capture interfaces\n\n---------------------------------------\n2017-04-24 PF_RING 6.6\n\n* PF_RING Library\n - New pfring_findalldevs/pfring_freealldevs API for listing all interfaces supported by pf_ring\n - New timeline module based on libnpcap for seamlessly extracting traffic from a n2disk dumpset using the pf_ring API\n - Dynamic capture modules loading with dlopen support\n - Improved pfring_set_bpf_filter to set hw rules when supported by the network card thanks to the nBPF engine \n\n* ZC Library\n - New pfring_zc_set_bpf_filter/pfring_zc_remove_bpf_filter API for setting BPF filters to device queues\n - Fixed pfring_zc_queue_is_full for device queues\n - Flushing SPSC queues when a consumer attaches (RX only)\n\n* PF_RING-aware Libpcap/Tcpdump\n - Support for extracting traffix from a n2disk dumpset using libpcap\n - tcpdump upgrade to v.4.9.0\n\n* PF_RING kernel module\n - Support for latest ubuntu and centos stable kernels\n - Support for SCTP and ICMP packet parsing\n - Packet hash improvements\n - Added tunneled IP version to packet metadata\n - Added IP version to sw filters\n - New kernel cluster hash types for tunneled traffic\n - QinQ VLAN parsing\n - Removed deprecated kernel plugins support\n - Promisc fix in case of multiple devices in a single socket\n\n* Drivers\n - Support for latest ubuntu and centos stable kernels\n - FPGA modules/libraries are now loaded at runtime using dlopen\n - RSS support on Intel i211\n - Jumbo frames support on i40e\n - i40e tx optimisations\n - i40e interrupts fixes in case of RSS\n - Fiberblaze capture module with chunk mode support\n - Exablaze capture module \n - Accolade improvements\n - Endace DAG update and support for streams\n - Myricom ports aggregation fixes, new syntax myri:<port>,<port>\n\n* nBPF\n - New nBPF filtering engine supporting an extended subset of the BPF syntax (tunneled traffic and l7 protocols are supproted)\n - nBPF support for hw filtering on Fiberblaze cards\n - nBPF support for hw filtering on Intel FM10K cards (Silicom PE3100G2DQIR)\n - nBPF support for hw filtering on Exablaze cards\n - nBPF support for hw filtering on Napatech cards and NTPL generation\n - Support for \"start <time> and end <time> and <bpf>\" when extracting from a n2disk timeline\n - Support for vlan [id], mpls [label], gtp\n\n* Examples\n - pfcount:\n   - ability to list interfaces with -L (-v 1 for more info)\n   - ability to dump traffic on PCAP file with -o\n - psend:\n   - option to force flush per packet (-F)\n   - options to specify src/dst IP for packet forging (-S/-D)\n   - option to forge packets on the fly instead of at preprocessing time (-O)\n   - option to randomize generated ips sequence (-z)\n   - ability to generate IPv6 traffic (-V 6)\n   - ability to generate mixed v4 and v6 traffic (-V 0)\n   - TCP/UDP checksum when reforging\n - zbalance_ipc\n   - option to use hw aggregation when supported by the card (-w)\n   - IP-based filtering with ZMQ support for rules injection\n\n* Wireshark\n - New extcap module 'ntopdump' for Wireshark 2.x\n\n* Misc\n - Improved systemd support (Ubuntu 16)\n\n---------------------------------------\n2016-06-07 PF_RING 6.4\n\n* PF_RING Library\n - Improved Myricom support, new naming scheme to improve usability\n - Improved Napatech support, 100G support\n - Improved Accolade support\n - New Invea-Tech support\n - New API pfring_get_metadata to read ZC metadata\n - New pfring_get_interface_speed API\n - New API pfring_version_noring()\n - C++ wrapper improvements\n - Removed DNA legacy\n\n* ZC Library\n - New API pfring_zc_set_device_proc_stats to write /proc stats per device\n - New API pfring_zc_set_device_app_name to write the application name under /proc\n - New API pfring_zc_get_cluster_id to get the cluster ID from a queue\n - New API pfring_zc_check_device_license for reading interface license status\n - New API pfring_zc_get_queue_settings to read buffer len and metadata len from queue\n - New API pfring_zc_get_queue_speed to read the link speed\n - New pfring_zc_open_device flag PF_RING_ZC_DEVICE_NOT_PROMISC to open the device without setting promisc mode\n - New packet metadata flags, including IP/L4 checksum (when available from card offloads)\n - Improved pfring_zc_builtin_gtp_hash\n\n* PF_RING-aware Libpcap/Tcpdump\n - New libpcap v.1.7.4\n - New tcpdump v.4.7.4\n - Libnpcap support to let libpcap-based applications (i.e. tcpdump) read compressed .npcap files produced by n2disk\n - Native nanosecond timestamps support\n - Tcpdump patch to close the pcap handle in case of errors (this avoids breaking ZC queues)\n\n* PF_RING kernel module\n - Fixed BPF support on kernel 4.4.x\n - Fixed RSS support on Centos 6 (it was reporting the wrong number of queues, affecting RSS rehash)\n - Reworked promisc support: handling promisc through the pf_ring kernel module in order to automatically remove it even when applications drop privileges\n - VLAN ID fix in case of vlan stripping offload enabled (it was including priority bits)\n\n* Drivers\n - New i40e-zc v.1.5.18\n - New fm10k-zc v.0.20.1\n - Support for latest Ubuntu 16, RHEL 6.8, Centos 7\n - Fixed i40e-zc initialisation failures due to promisc reset\n - Fixed i40e-zc 'transmit queue 0 timed out'\n - Fixed e1000e-zc memory leak\n\n* Examples\n - Added ability to reforge MAC/IP also when reading packets from pcap file/stdin in pfsend\n - Added -f option for replaying packets from pcap file in zsend\n - Added -o option to pfsend to specify an offset to be used with -b\n - Added -r option to use egress interfaces instead of queues in zbalance_ipc\n\n* Snort DAQ\n - Fixed DAQ-ZC buffer leak in IPC mode\n - Fixed DAQ_DP_ADD_DC support\n - Fixed support for DAQ < 2.0.6\n\n---------------------------------------\n2015-11-26 PF_RING 6.2\n\n* PF_RING Library\n - Accolade Technology support\n - Myricom/CSPI NICs (ASIC/FPGA) support with APIv4\n - Napatech module compatibility with ntanl v.4.0.1\n - New API pfring_set_packet_slicing for packet slicing (hw support when available)\n - New pfring_open flag PF_RING_ZC_IPONLY_RSS to compute RSS on IP only (not 4-tuple)\n - Reworked pfring_recv_chunk API to handle generic segments\n - Packet-mode with Napatech using pfring_recv also when card is configured as PCAP\n - Improved pfring_print_parsed_pkt with STP support\n - Improved software filtering rules stats\n - Fix for capturing tx packets in stack mode\n - Removed libnuma dependency (using native numa support in PF_RING ZC)\n - Added pfring_config tool to print includes and libs used in the current PF_RING configuration\n - Fixed loops in stack mode (e.g. stack injected packets captured from kernel in 1-copy mode)\n - Fix for IPv6 in pfring_hash_pkt\n - License update to LGPL 2.1\n\n* ZC Library\n - New API pfring_zc_set_rxfh_indir to reprogram RSS REdirection TAble\n - New pfring_zc_open_device flag PF_RING_ZC_DEVICE_CAPTURE_TX to capture also TX direction on standard devices\n - Fixed e1000e caplen\n - Fixed i40e TX\n - Fixed device detach\n - Fixed DAQ-ZC IPC detach\n - Fix for re-running recv after a breakloop in pfring_zc_queue_breakloop\n - Fix for nanoseconds in case of software timestamps with ZC devices\n\n* DNA Library\n - Fixed cluster queues initialisation in Libzero\n\n* PF_RING-aware Libpcap\n - Fixed pcap_brekloop (tcpdump now handles sigterm correctly when there is no traffic)\n\n* PF_RING kernel module\n - Compilation fixes for FC 22 with kernel 4.x\n - Fixed BPF support in Centos 7 (causing crashes)\n - Fixed concurrent /proc updates and interface name clashes\n\n* PF_RING-aware/ZC Drivers\n - New e1000e driver v.3.2.7.1 with kernel 4.x support\n - New igb driver v.5.3.2.2 with kernel 4.x support\n - New ixgbe driver v.4.1.5 with kernel 4.x support\n - New i40e-zc driver v.1.3.39.1 with kernel 4.x support\n - Fixed rx stats in ifconfig/proc/ifstat/etc.\n - Fixed stats with X540\n - ixgbe: forcing drop_en on all queues when an rx queue is open\n\n* DNA Drivers\n - New e1000e driver v.3.2.4.2\n - New igb driver v.5.3.2.2\n - New ixgbe driver v.4.1.2\n - igb hw timestamp change from 40 bit to 64 bit full timestamp\n\n* Examples\n - zbounce: printing direction\n - zbalance_ipc: optimisation to reduce time-pulse thrad load on non-time-sensitive applications\n - pfsend: linux cooked packets support\n - pfsend: ability to specify egress rate in pps\n\n* Snort DAQ\n - Fixed direction and L2 header in the inject function\n\n---------------------------------------\n2015-03-30 PF_RING 6.0.3\n\n* PF_RING Library\n - New pfring_open() flag PF_RING_USERSPACE_BPF to force userspace BPF instead of in-kernel BPF with standard drivers\n - New API pfring_get_card_settings() to read max packet length and NIC rx/tx ring size\n - New Napatech support\n - Support for up to 64 channels with standard drivers, pfring_set_channel_mask() has a 64bit channel mask parameter now\n - Reworked IPv6 parsing\n - Configure parameter --disable-numa to remove libnuma dependency\n - ARM fixes\n - Minor bpf memory leak fix\n \n* ZC Library\n - New pfring_zc_open_device() flag PF_RING_ZC_DEVICE_SW_TIMESTAMP to force sw timestamp\n - New API pfring_zc_get_queue_id() to read SPSC queue ID or interface index\n - New DAQ module for ZC\n - pfring_zc_send() is now returning errno=EMSGSIZE on packet too long\n - Fix for receiving packets from stack using\n - Fix for send_pkt_burst() with IPC SPSC queues\n - Fix for drop stats when using SPSC queues over the standard pf_ring API\n - Fix for /proc stats in IPC mode when using the standard pf_ring API\n - Fix for packet timestamp when using SPSC queues over the standard pf_ring API\n - Fix for stats when inter-process SPSC queues are used\n\n* PF_RING-aware Libpcap\n - New PF_RING-aware libpcap v.1.6.2\n - New .npcap (compressed pcap) files support\n - Fix for libpcap over ZC, reworked poll support\n\n* PF_RING kernel module\n - New eth_type field in kernel filters\n - Reworked BPF support\n - Polling Mode/Breed under /proc is now \"ZC\" for ZC devices (in place of DNA)\n - Increased max dev name size\n - transparent_mode is now deprecated\n - Fix for 'any' device\n - Fix for kernel >=3.19\n - Fix for hw vlan strip in case of multiple sockets on the same device (standard drivers)\n - Fix for kernel Oops (rx vlan offload check)\n\n* PF_RING-aware/ZC Drivers\n - New Intel i40e (X710/XL710) ZC drivers\n - New ixgbe ZC driver v.3.22.3\n - ixgbe poll fix\n - Fixes for Centos/RH 6.6\n - Fixes for kernel >=3.16\n\n* Examples\n - New zbalance_DC_ipc: a master process balancing packets to multiple consumer processes, \n   using multiple threads for packet filtering in a Divide-and-Conquer fashion,\n   with an optional stage for sorting filtered packets before distribution\n - New zreplicator: example application receiving packets from n ingress interfaces and replicating them to m egress interfaces\n - pfcount: -N <num> parameter to exit after reading <num> packets\n - zsend: \n   - IPC support to attach to an external cluster/queue\n   - added -P <core> to use pulse-time thread for tx rate control\n   - added -Q <sock> to enable VM support (to attach a consumer running in a VM)\n - zbalance_ipc: \n   - ability to create ingress sw queues (instead of opening interfaces) with -i Q (comma-separated list of Q and interfaces is allowed)\n   - added daemon mode\n   - added pid file\n   - proc stats fix\n   - interface and per-queue stats with -p\n - pflatency: \n   - added -o <device> and -c <count>\n   - max/min/avg stats\n - zfifo fixes\n\n---------------------------------------\n2014-09-24 PF_RING 6.0.2\n\n* PF_RING Library\n - New Ixia hw timestamp support\n - New sysdig module\n - Userspace bpf filtering with pfring_set_bpf_filter() when kernel-bypass is used (DNA/Libzero/ZC)\n - Fixed fd leak\n\n* ZC Library\n - New API to add/remove hw filters: pfring_zc_add_hw_rule()/pfring_zc_remove_hw_rule()\n - New API to check tx queue status: pfring_zc_queue_is_full()\n - New API to sort traffic based on hw ts: pfring_zc_run_fifo()\n - New API to export stats in /proc: pfring_zc_set_proc_stats()\n - New API to hash packets based on GTP: pfring_zc_builtin_gtp_hash()\n - Hw ts support: new PF_RING_ZC_DEVICE_HW_TIMESTAMP, PF_RING_ZC_DEVICE_STRIP_HW_TIMESTAMP flags\n - Ixia ts support: new PF_RING_ZC_DEVICE_IXIA_TIMESTAMP flag\n - PPPoE support in pfring_zc_builtin_ip_hash()\n - Fix for huge memory allocation\n - Fix for stack injection\n - Fix for ZC cluster destroy\n\n* PF_RING kernel module\n - MPLS support\n - Support for huge rings (new ring version 16)\n - Fixed send for packet len = max frame size + vlan\n - Fix for huge memory allocation with standard pf_ring/libzero\n - Fixed 64 bit division on 32 bit systems\n - Fixed cluster hash\n - Fix for multichannel devices\n - DKMS support\n\n* PF_RING-aware/ZC Drivers\n - Hw filtering support in ixgbe-ZC driver (Intel 82599-based cards)\n - e1000e driver update v.3.0.4.1\n - ixgbe  driver update v.3.21.2\n   - numa node fix\n   - new parameter allow_tap_1g to handle 1gbit/s TAP\n - DKMS support\n\n* DNA Drivers\n - e1000e driver v.2.5.4 vlan stripping disabled\n - DKMS support\n\n* PF_RING-aware Libpcap\n - New PCAP_PF_RING_RECV_ONLY env var to open socket in rx only\n - Fix for libpcap VLAN issues with LINUX_SLL\n - Fix for cpu spinning on pcap_read_packet()\n - Fix for userspace bpf with libzero/zc virtual interfaces\n - Fix for VLAN filtering\n\n* Examples\n - pfcount: userspace bpf fix\n - pfsend: fixed division by 0 with empty pcaps\n - pfbridge: added bpf support\n - pfdnacluster_master: added PPPoE support to hash\n - New zfifo example\n - zbalance: round-robin mode fix\n - zbalance_ipc\n   - ability to spread packets across multiple instances of multiple applications in IP and GTP hash mode\n   - ability to configure queue len\n   - added support for n2disk10g multithread\n - Added zbalance_ipc zsend zcount zcount_ipc to the Ubuntu package\n - Added zbalance_ipc zsend zcount zcount_ipc to the RPM package\n\n---------------------------------------\n2014-05-06 PF_RING 6.0.1\n\n* PF_RING ZC\n - New pfring_zc_send_pkt_burst()\n - Fix for e1000e rx\n - Added ZC version in demo apps help\n\n* DNA\n - Fix for pfring_set_tx_watermark()\n\n* Drivers\n - Added numa_cpu_affinity parameter to PF_RING-aware/ZC ixgbe driver\n - PF_RING-aware/ZC drivers update:\n   - ixgbe-zc v.3.21.2\n   - igb-zc v.5.2.5\n - DNA drivers update:\n  - ixgbe-dna v.3.21.2\n\n* Examples\n - pfcount:\n   - Added ability to search strings on the payload\n   - Added ability to dump on a pcap file the traffic matching strings (-x)\n   - Improved ability to dump (-o) traffic on disk and create a log file\n   - Handling SIGHUP with -o to close exising dump and create a new one\n - Fixed numa affinity\n\n* PF_RING Kernel module\n - added checksum offload flags to the packet header (when enabled)\n\n---------------------------------------\n2014-04-14 PF_RING 6.0.0\n\n* PF_RING ZC\n - Say hello to the new PF_RING ZC library!\n\n* PF_RING API\n - New chunk mode API (for supported cards only):\n   - Added PF_RING_CHUNK_MODE pfring_open() flag\n   - New pfring_recv_chunk()\n - New pfring_set_bound_dev_name() for setting custom bound device name\n - Added libnuma support for numa node affinity\n\n* Drivers\n - New generation PF_RING-aware drivers with ZC support:\n   - e1000e-2.5.4-zc\n   - igb-5.0.6-zc\n   - ixgbe-3.18.7-zc\n - PF_RING-aware e1000e driver update (v.3.0.4.1)\n\n* Examples\n - New PF_RING ZC examples in userland/examples_zc\n - Moved libzero examples to userland/examples_libzero\n\n---------------------------------------\n2014-02-01 PF_RING 5.6.2\n\n* PF_RING Kernel module\n - Added compatibility for new kernels (post 3.10)\n - Redhat compilation fixes\n\n* PF_RING library\n - New pfring_print_pkt()/pfring_print_parsed_pkt()\n - pfring_get_selectable_fd fix: returning -1 on error\n - Doxygen documentation\n\n* Libzero\n - Time-pulse thread support in DNA Cluster (sw nsec ts)\n - Application stats fix for libzero DNA Cluster slave sockets\n - Added libnuma support to DNA Cluster for memory binding\n\n* Libpcap\n - Setting selectable fd via pfring_get_selectable_fd()\n\n* Examples\n - pfdnacluster_master\n   - New -o <device> and -f <core id> options to forward packets both to applications and an egress interface\n   - Ability to drop privileges with -D <username>\n   - Stats under /proc/net/pf_ring/stats\n   - New option -q <queue len>\n - Applications stats have duration with msec resolution now\n\n* Drivers\n - New PF_RING-aware netxtreme2-7.8.37 driver (courtesy of Rob G <rgagnon24@gmail.com>)\n - PF_RING-aware igb (5.1.2) and ixgbe (3.19.1) drivers update (courtesy of Pablo Nebrera <pablonebrera@eneotecnologia.com>)\n - ixgbe DNA driver update (3.18.7)\n - igb DNA driver update (5.0.6)\n - e1000e DNA driver update (2.5.4)\n - ixgbe DNA driver pause frames fix\n - igb/ixgbe DNA drivers compilation fixes for Redhat 6.5\n - igb DNA jumbo mtu fix\n - igb DNA drop stats fix\n - DNA drivers fixes for applications calling poll/select directly (e.g. tshark)\n\n---------------------------------------\n2013-08-30 PF_RING 5.6.1\n\n* PF_RING Kernel module\n - Added enable_frag_coherence param: handle fragments to keep flow coherence in clusters\n - Cluster add/remove fix\n\n* PF_RING API\n - New pfring_get_link_status() call to check link status up/down\n\n* Examples\n - pfwrite\n   - Added cluster id (-c) support\n   - Added daemon mode (-b) support\n   - Added redis PUBLISH/SUBSCRIBE for IMSI registration/delete\n   - Enhanced IMSI tracking\n   - Performance fix for GTP tunnels\n   - Fixed buffer length issue\n - pfsend\n   - Added daemon mode (-d) support\n   - Added pid file (-P) support\n - pfdnacluster_master \n   - Added pid file (-P) support\n\n* Libzero\n - DNA Bouncer fix: sometimes the decision function was accessing the wrong buffer\n\n* Snort DAQ\n - Fix for honouring cnt in pfring_daq_acquire()\n - Stats fix\n\n---------------------------------------\n2013-06-07 PF_RING 5.6.0\n\n* PF_RING Kernel module\n - Fixed bug that prevented the PF_RING cluster to work properly with specific traffic\n\n* Documentation\n - User's guide translated to russian (courtesy of ridervka@yandex.ru)\n\n* Libzero\n - Fixed bug that caused the DNA bouncer to process the correct packet\n\n* Examples \n - pfwrite\n   - Added support for the microcloud so that for GTP traffic it is possible to dump traffic of specific IMSI phone\n   - Added support for mobile networks (2G/3G/LTE) so that we can dump traffic of specific GTP tunnels\n - pfdump: added cluster id support (courtesy of Doug Burks <doug.burks@gmail.com>)\n\n* Snort (PF_RING DAQ)\n - Added microcloud support for notifying into the microcloud those hosts that are victims/attackers\n\t\n---------------------------------------\n2013-05-22 PF_RING 5.5.3\n\n* PF_RING Kernel module\n - Support for injecting packets to the stack\n - Added ability to balance tunneled/fragmented packets with the cluster\n - Improved init.d script\n - Packet len fix with GSO enabled, caplen fix with multiple clusters\n - Bug fixes for race condition with rss rehash, memory corruption, transparent mode and tx capture, kernels >= 3.7.\n\n* Drivers\n - Added PF_RING-aware driver for Chelsio cards (cxgb3-2.0.0.1)\n - New release for PF_RING-aware igb (igb-4.1.2)\n\n* DNA\n - Added support for Silicom 10 Gbit hw timestamping commodity NIC card\n - Added pfring_flush_tx_packets() for flushing queued tx packets\n - Fixes for cutting packets to snaplen, e1000-dna rx\n\n* Libzero\n - pfdnacluster_master support for multiple instances of multiple applications\n - Added dna_cluster_set_thread_name() to name the master rx/tx threads\n - Fix for direct forwarding with the DNA Cluster\n - Changed len to a ptr in DNA Bouncer decision function to allow user change forwarded packet content and lenght\n\n* Examples\n - Added ability to replay a packet with pfsend passing hex from stdin\n - Added pfwrite to the package\n - Fix for rate control with huge files in pfsend\n\n---------------------------------------\n2013-01-09 PF_RING 5.5.2\n\n* PF_RING library\n - New pfring_open() flag PF_RING_DNA_FIXED_RSS_Q_0 to send all traffic to queue 0.\n   Other queues can be selected using hw filters (DNA cards with hw filtering only).\n - Added ability to create a stats file under /proc/net/pf_ring/stats so that\n   applications can report stats via the /proc filesystem.\n  - pfring_set_application_stats() for reporting stats\n  - pfring_get_appl_stats_file_name() for getting the exac filename where the app sets the statistics\n\n* DNA drivers\n - Flow Control disabled by default with the ixgbe-dna driver\n\n* Sample apps\n - New pfdump.c sample app\n - Userspace BPF support with DNA in pfcount.c\n - pfcount.c and pfsend.c update to report stats using pfring_set_application_stats()\n\n* Libzero\n - New experimental pfring_register_zerocopy_tx_ring()\n - New pfdnacluster_mt_rss_frwd sample app (packet forwarding using Libzero\n DNA Cluster for rx/balancing and standard DNA with zero-copy on RSS queues for tx)\n\n* Libpcap\n - pcap_get_pfring_id()\n - pcap_set_master_id()\n - pcap_set_master()\n - pcap_set_application_name()\n - pcap_set_watermark()\n\n* BUG fixes\n - Fix for corrupted VLAN tagged packets\n - Fix for wrong packet len with vlan stripping offload\n\n---------------------------------------\n2012-11-24 PF_RING 5.5.1\n\n- updated ixgbe driver to release 3.11.33\n- Fixed bug that was causing ixgbe driver not to disable interrupts. This was causing\n  a high load on the core handling the interrupts for ixgbe-based card\n- libzero: various hugepages improvements and bug fixes\n- Added ability to specify PF_RING_RX_PACKET_BOUNCE in pfring_open\n- Fixed minor memory leak\n- Various improvements to support of hardware timestamp on Silicom Intel-based 10 Gbit adapters\n- DNA Bouncer: added direction to pfring_dna_bouncer_decision_func callback (useful in bidirectional mode)\n- DNA Cluster: added dna_cluster_set_hugepages_mountpoint() to manually select the hugepages mount point when several are available\n- Created architecture specific versions of libzero/DNA for exploiting latest generation of CPUs and thus improve performance\n- Update PF_RING-aware igb update (4.0.17)\n- Added pf_ring calls to pcap apps\n\n---------------------------------------\n2012-11-01 PF_RING 5.5.0\n\n* New libzero features:\n  - DNA Cluster: number of per-consumer rx/tx queue slots and number of additional buffers can be configured via dna_cluster_low_level_settings()\n  - hugepages support (pfdnacluster_master/pfdnacluster_multithread -u option)\n\n* New PF_RING-aware libpcap features:\n  - added PF_RING_ACTIVE_POLL environmental variable to enable active polling when defined to 1\n  - enable rehash rss setting env var PF_RING_RSS_REHASH=1\n  - cluster type selectable via env vars:\n    - PCAP_PF_RING_USE_CLUSTER_PER_FLOW\n    - PCAP_PF_RING_USE_CLUSTER_PER_FLOW_2_TUPLE\n    - PCAP_PF_RING_USE_CLUSTER_PER_FLOW_4_TUPLE\n    - PCAP_PF_RING_USE_CLUSTER_PER_FLOW_TCP_5_TUPLE\n    - PCAP_PF_RING_USE_CLUSTER_PER_FLOW_5_TUPLE\n\n* New PF_RING-aware drivers\n  - Updated Intel drivers to make them compatible with newer kernels\n\n* New PF_RING library features:\n  - new pfring_open() flag PF_RING_HW_TIMESTAMP for enabling hw timestamp\n\n* New PF_RING kernel module features:\n  - handle_user_msg hook for sending msg to plugins\n  - SO_SEND_MSG_TO_PLUGIN setsockopt for sending msgs from userspace\n  - pf_ring_inject_packet_to_ring for inserting packets in a ring identified by <if_index, channel_id>)\n  - possibility to redefine the rehash_rss function\n\n* Snort PF_RING-DAQ module:\n  - new configure --with-pfring-kernel-includes option\n  - fix for -u <uid> -g <gid>\n\n* DNA drivers fixes:\n  - Compilation with RHEL 6.3\n  - igb drop stats fix\n\n* Sample app new features:\n  - new pfcount.c -s option for enabling hw timestamp\n  - new pfdnacluster_multithread option for absolute per-interface stats\n\n* Sample apps fixes:\n  - vlan parsing\n  - compilation fix for HAVE_ZERO not set\n  - pfcount fix for reentrant mode\n  - core binding fixes\n\n* PF_RING kernel module fixes:\n  - channel_id handling\n  - fix for hash with cluster type in cluster_per_flow_*\n  - important fix for standard pf_ring (BUG #252: extra packets with wrong size)\n  - max caplen 16384 increased to 65535 (max 16 bit)\n  - fix for handling packets with stripped VLAN IDs\n\n* Misc changes\n  - Initial work on changelog maintenance\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 25.908203125,
          "content": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.7021484375,
          "content": "all:\n\tcd kernel; make\n\tcd userland; ./configure; make\n\tcd drivers; make\n\ninstall:\n\tcd userland; make install\n\nclean:\n\t-cd kernel; make clean\n\t-cd userland; make clean\n\t-cd drivers; make clean\n\t-cd userland/snort/pfring-daq-module; make clean\n\nsnort:\n\tcd userland/snort/pfring-daq-module; autoreconf -ivf; ./configure; make\n\tcd userland/snort/pfring-daq-module-zc; autoreconf -ivf; ./configure; make\n\ntcpdump:\n\tcd userland/tcpdump; ./configure; make\n\nchangelog:\n\tgit log --since={`curl -s https://github.com/ntop/PF_RING/releases | grep datetime | head -n1 | egrep -o \"[0-9]+\\-[0-9]+\\-[0-9]+\"`} --name-only --pretty=format:\" - %s\" > CHANGELOG.latest\n\ndocumentation:\n\tcd doc/doxygen; doxygen Doxyfile\n\tcd doc; make html\n\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "README.FIRST",
          "type": "blob",
          "size": 3.388671875,
          "content": "PF_RING is a Linux kernel module and user-space framework that allows\nyou to process packets at high-rates while providing you a consistent\nAPI for packet processing applications. This directory contains:\n\ndrivers/                        PF_RING ZC accelerated drivers\nuserland/\t\t\tUser space code\nuserland/lib/\t\t\tUser space library\nuserland/libpcap/\t\tLibpcap enhanced with PF_RING support\nuserland/examples/\t\tPF_RING sample applications\nuserland/examples_zc/\t\tPF_RING ZC sample applications\nuserland/examples_ft/\t\tPF_RING FT sample applications\nuserland/snort/\t\t\tSnort DAQ module for using snort over PF_RING\n\n\nPF_RING Drivers Models\n----------------------\n\n1. PF_RING-aware/ZC drivers\nThese drivers are called \"aware\" as they are optimized for PF_RING. They\ncan be used in two ways. As standard drivers (packets continue to pass\ninside the Linux stack), example:\npfcount -i eth1\nor in zero copy, for completely bypassing the Linux stack in both RX and\nTX, and thus achieve line rate. As soon as one application opens the\ninterface in zero copy (ZC), such interface (while still visible by\nifconfig) cannot longer be used for standard networking (e.g. ping or SSH);\nthis until the interface is open in ZC, and once it is closed it returns\nto be immediately available for standard Linux networking. In order to open\nit in ZC you must prepend 'zc:' to the interface name, example:\npfcount -i zc:eth1\n\n2. ZC drivers\nThese drivers have been used to implement kernel bypass until PF_RING 5.x\nand since the ZC introduction they will be available for some more time\nbut they are deprecated in favour of ZC that offer the same performance\nwhile featuring much better flexibility. In future PF_RING releases, we\nexpect to discontinue these drivers.\n\nPF_RING from Virtual Machines (KVM)\n-----------------------------------\n\nWith the introduction of PF_RING ZC, you can finally exploit acceleration\neven from withing a KVM virtual machine without using techniques such as\nPCIe bypass. This means that a VM can dynamically open network interfaces\nin ZC, implement complex packet processing topologies, all at 10 Gbit\nline rate. Please refer to userland/examples_zc/README.kvm for more\ninformation on how to exploit PF_RING ZC from KVM.\n\nAs future activity, we might evaluate to port it to other hypervisors,\nbut at the moment we target only KVM.\n\nCompilation\n-----------\n\nYou need to have installed the basic compilation tools and libraries.\n\nOn Ubuntu you can do:\n\n# apt-get install build-essential bison flex linux-headers-$(uname -r) libnuma-dev libnl-genl-3-dev\n\nAt this point you can compile the module:\n\n# make\n\nInstallation\n------------\n\n# sudo su\n# cd kernel; make install\n# cd ../userland/lib; make install\n\nTesting PF_RING\n---------------\n\nIn PF_RING/userland/examples we have coded several applications you can use\nfor testing PF_RING. In particular\n- pfcount allows you to capture packets\n- pfsend to replay (or generate) traffic\n\nYou can look at the application source code for learning how you can use\nthe PF_RING API.\n\nRemember that before running any application, you need to load the pf_ring.ko\nkernel modules:\n# sudo su\n# insmod ./kernel/pf_ring.ko\n\nDocumentation\n-------------\n\nIf you need an extensive documentation, you can refer to the manual that\nis stored in the doc/ directory or at http://ntop.org/guides/pf_ring/\n\nThe API documentation is available via doxygen, running:\n\n# make documentation\n\n-------------------------------------\n(C) 2004-19 - ntop.org\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5595703125,
          "content": "![pfring][pfring_logo]\n# PF_RING™\n\n[![Build Status](https://travis-ci.org/ntop/PF_RING.png?branch=dev)](https://travis-ci.org/ntop/PF_RING)\n\n\n### Introduction\n\nPF_RING™ is a Linux kernel module and user-space framework that allows you to process packets at high-rates while providing you a consistent API for packet processing applications.\n\n### Who needs PF_RING™?\nBasically everyone who has to handle many packets per second. The term ‘many’ changes according to the hardware you use for traffic analysis. It can range from 80k pkt/sec on a 1,2GHz ARM to more than 20M pkt/sec **per core** on a low-end 2,5GHz Xeon. PF_RING™ not only enables you to capture packets faster, it also captures packets more efficiently preserving CPU cycles.\n\n### Documentation\n\nIf you want to learn more about PF_RING™ please visit the [User's Guide](https://www.ntop.org/guides/pf_ring) and the [API Documentation](http://www.ntop.org/guides/pf_ring_api/files.html).\n\n### Details\nFor more information about PF_RING™ and other ntop technologies, please visit [http://ntop.org](http://www.ntop.org/products/packet-capture/pf_ring/)\n\n## License\nPF_RING™ kernel module and drivers are distributed under the GNU GPLv2 license, LGPLv2.1 for the user-space PF_RING library, and are available in source code format.\n\n[pfring_logo]: http://www.ntop.org/wp-content/uploads/2015/05/pf_ring-logo-150x150.png\n[ntop_logo]: https://camo.githubusercontent.com/58e2a1ecfff62d8ecc9d74633bd1013f26e06cba/687474703a2f2f7777772e6e746f702e6f72672f77702d636f6e74656e742f75706c6f6164732f323031352f30352f6e746f702e706e67\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "userland",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}