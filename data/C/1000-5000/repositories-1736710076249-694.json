{
  "metadata": {
    "timestamp": 1736710076249,
    "page": 694,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/rune",
      "stars": 1926,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4833984375,
          "content": "# The Rune itself\n/rune\n\n# Files generated by DataDraw\n/llvm/lldatabase.c\n/llvm/lldatabase.h\n/include/dedatabase.h\n/database/dedatabase.c\n\n# Files generated by Flex and Bison\n/parse/deparse.c\n/parse/deparse.h\n/parse/descan.c\n\n# Compilation results\n/obj/\n*.ll\n*.a\n*.o\n\n# Test results\n#/tests/\n#!/tests/*.rn\n#!/tests/*.stdout\n\n#/newtests/\n#!/newtests/*.rn\n#!/newtests/*.stdout\n\n#/errortests/\n#!/errortests/*.rn\n#!/errortests/*.stdout\n\n#/crypto_class/\n#!/crypto_class/*.rn\n#!/crypto_class/*.stdout\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0771484375,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code Reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.2890625,
          "content": "FROM ubuntu:23.04\n\nENV DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \\\n    LC_ALL=C.UTF-8 LANG=C.UTF-8 LANGUAGE=C.UTF-8\n\n# Install dependencies\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    # \"aclocal\" is needed by \"autogen.sh\"\n    automake \\\n    autotools-dev \\\n    bison \\\n    build-essential \\\n    ca-certificates \\\n    clang-14 \\\n    flex \\\n    git \\\n    libgmp-dev \\\n    && update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100 \\\n    && update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100\n\nWORKDIR /tmp\n\n# Build and install DataDraw\nRUN git clone https://github.com/waywardgeek/datadraw.git \\\n    && cd datadraw \\\n    && ./autogen.sh \\\n    && ./configure \\\n    && make \\\n    && make install\n\n# Build and install Rune\nRUN git clone https://github.com/google/rune.git \\\n    && git clone https://github.com/pornin/CTTK.git \\\n    && cp CTTK/inc/cttk.h CTTK \\\n    && cd rune \\\n    && make \\\n    # Some of these tests are expected to fail, that's OK\n    && ./runtests.sh \\\n    # Will install under /usr/local/rune\n    && make install\n\n# Test that rune is working\nRUN echo \"TESTING RUNE\" \\\n    && echo 'println \"Hello, World!\"' > hello.rn \\\n    && rune -g hello.rn \\\n    && ./hello \\\n    && echo \"Should have printed 'Hello, World!'\""
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0927734375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.982421875,
          "content": "#  Copyright 2021 Google LLC.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nCFLAGS=-Wall -g -std=c11 -Wno-unused-function -Wno-varargs -DMAKEFILE_BUILD -DDD_DEBUG -Iinclude -I../CTTK -Iruntime -no-pie\nLIBS=lib/librune.a lib/libcttk.a\nLIBS_EXTRA=-lgmp -lm -lddutil-dbg\n#CFLAGS=-Wall -O3 -std=c11 -Wno-unused-function -Wno-varargs -DMAKEFILE_BUILD -Iinclude -I../CTTK -Iruntime\n#LIBS=lib/librune.a lib/libcttk.a\n#LIBS_EXTRA=-lgmp -lm -lddutil\n\nPREFIX=\"/usr/local\"\n\nRUNTIME= \\\nruntime/array.c \\\nruntime/bigint.c \\\nruntime/io.c \\\nruntime/random.c\n\nSRC= \\\nbind/bind.c \\\nbind/bindexpr.c \\\nbind/bindformat.c \\\nbind/create_vars.c \\\nbind/refine.c \\\ndatabase/bigint.c \\\ndatabase/binding.c \\\ndatabase/block.c \\\ndatabase/builtin.c \\\ndatabase/class.c \\\ndatabase/datatype.c \\\ndatabase/dedatabase.c \\\ndatabase/enum.c \\\ndatabase/expression.c \\\ndatabase/filepath.c \\\ndatabase/float.c \\\ndatabase/function.c \\\ndatabase/ident.c \\\ndatabase/line.c \\\ndatabase/relation.c \\\ndatabase/signature.c \\\ndatabase/statement.c \\\ndatabase/string.c \\\ndatabase/util.c \\\ndatabase/value.c \\\ndatabase/variable.c \\\ntransformer/constprop.c \\\ntransformer/transformer.c \\\ntransformer/iterator.c \\\ntransformer/memmanage.c \\\nllvm/debug.c \\\nllvm/genllvm.c \\\nllvm/lldatabase.c \\\nllvm/llvmdecls.c \\\nparse/deparse.c \\\nparse/descan.c \\\nparse/parse.c \\\nsrc/main.c \\\nsrc/rune.c\n\nDEPS=Makefile\nCC=gcc\nOBJS=$(patsubst %.c,obj/%.o,$(SRC))\n\nrune: $(OBJS) $(LIBS)\n\t$(CC) $(CFLAGS) -o rune $(OBJS) lib/libcttk.a $(LIBS) $(LIBS_EXTRA)\n\n$(OBJS): obj\n\nall: obj rune schema foo\n\nfoo: foo.rn\n\t./rune -g foo.rn\n\nlib/libcttk.a:\n\tmkdir -p lib\n\tcd ../CTTK; make; mv build/libcttk.a ../rune/lib\n\tcd ../CTTK; make clean\n\nlib/librune.a: runtime/librune.a\n\tmkdir -p lib\n\tcp runtime/librune.a lib\n\nruntime/librune.a: $(RUNTIME)\n\tcd runtime; make librune.a\n\nschema: Rune.ps LLVM.ps\n\ndatabase/dedatabase.c: include/dedatabase.h\n\ninclude/dedatabase.h: database/Rune.dd\n\tdatadraw -h include/dedatabase.h database/Rune.dd\n\nllvm/lldatabase.c: llvm/lldatabase.h\n\nllvm/lldatabase.h: llvm/LLVM.dd include/dedatabase.h\n\tdatadraw -I database llvm/LLVM.dd\n\nrpc/rpcdatabase.c: rpc/rpcdatabase.h\n\nrpc/rpcdatabase.h: rpc/Rpc.dd include/dedatabase.h\n\tdatadraw -I database rpc/Rpc.dd\n\nparse/deparse.c: parse/deparse.h\n\nparse/deparse.h: parse/deparse.y\n\tbison -d -Dapi.prefix=\"{de}\" -o parse/deparse.c parse/deparse.y\n\nparse/descan.c: parse/descan.l parse/deparse.h\n\tflex -o parse/descan.c parse/descan.l\n\nRune.ps Codegen.ps: database/Rune.dd\n\tdataview database/Rune.dd\n\nLLVM.ps: llvm/LLVM.dd\n\tdataview llvm/LLVM.dd\n\ncheck: rune\n\t./runtests.sh\n\ninstall: rune\n\tinstall -d $(PREFIX)/bin $(PREFIX)/lib/rune $(PREFIX)/lib/rune/runtime\n\tinstall rune $(PREFIX)/bin\n\tinstall lib/libcttk.a $(PREFIX)/lib/rune\n\tinstall lib/librune.a $(PREFIX)/lib/rune\n\tcp -r builtin $(PREFIX)/lib/rune\n\tcp -r math $(PREFIX)/lib/rune\n\tcp -r io $(PREFIX)/lib/rune\n\tinstall runtime/package.rn $(PREFIX)/lib/rune/runtime\n\nclean:\n\trm -rf obj lib rune */*database.[ch] *.ps parse/descan.c parse/deparse.[ch] rune.log tests/*.ll tests/*.result crypto_class/*.ll crypto_class/*.result errortests/*.ll test_data\n\tfor file in tests/*.rn crypto_class/*.rn errortests/*.rn; do exeFile=$$(echo \"$$file\" | sed 's/.rn$$//'); rm -f \"$$exeFile\"; done\n\tcd runtime ; make clean\n\tcd bootstrap/database ; make clean\n\n\nobj: include/dedatabase.h llvm/lldatabase.h\n\tmkdir -p obj/database obj/llvm obj/parse obj/runtime obj/src obj/util obj/rpc obj/bind obj/transformer\n\nobj/%.o: %.c $(DEPS)\n\t$(CC) $(CFLAGS) -c -o $@ $<\n\t@$(CC) -MM $(CFLAGS) $< | sed 's|^.*:|$@:|' > $(patsubst %.o,%.d,$@)\n\n-include $(OBJS:.o=.d)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.0439453125,
          "content": "# ᚣ The Rune Programming Language\n\n_A faster, safer, and more productive systems programming language_\n\nThis is not an officially supported Google product.\n\n**NOTE: Rune is an unfinished language. Feel free to kick tires and evaluate the\ncool new security and efficiency features of Rune, but, for now, it is not\nrecommended for any production use case.**\n\n- [ᚣ The Rune Programming Language](#ᚣ-the-rune-programming-language)\n- [What is Rune?](#what-is-rune)\n- [Rune in Action](#rune-in-action)\n  - [Dedicated \"secret\" types](#dedicated-secret-types)\n  - [A _\"DB-embedded\"_ language: relational data-structures and optimal memory-efficiency](#a-db-embedded-language-relational-data-structures-and-optimal-memory-efficiency)\n    - [How does this work?](#how-does-this-work)\n- [Installation](#installation)\n  - [Compiling the Rune compiler:](#compiling-the-rune-compiler)\n\n# What is Rune?\n\nRune is a Python-inspired efficient systems programming language designed to\ninteract well with C and C++ libraries. Rune has many security features such as\nmemory safety, and constant-time processing of secrets. Rune aims to be faster\nthan C++ for most memory-intensive applications, due to its Structure-of-Array\n\\([SoA](https://en.wikipedia.org/wiki/AoS_and_SoA#:~:text=AoS%20vs.,AoS%20case%20easier%20to%20handle.)\\)\nmemory management.\n\nIt provides many of its features by deeply integrating features similar to the\n[\"DataDraw\"](https://datadraw.sourceforge.net) tool into the primitives and\nconstructs of the language. DataDraw is a code-generation tool that generates\nhighly-optimized C code which outperforms e.g., the C++ STL given a declarative\ndescription of data-structures and relationships between them. For more\ninformation, see the [DataDraw 3.0\nManual](https://datadraw.sourceforge.net/manual.pdf).\n\nAdditional documentation:\n\n-   [Rune Overview](g3doc/index.md)\n-   [Rune for Python programmers](g3doc/rune4python.md)\n-   [DataDraw 3.0 Manual](https://datadraw.sourceforge.net/manual.pdf)\n-   [DataDraw GitHub repository](https://github.com/waywardgeek/datadraw)\n\n# Rune in Action\n\nLet's take a look at two examples that showcase many of the unique features of Rune:\n\n1. A simple example of a secret type, and how it can be used to protect against timing attacks.\n2. A more complex example of a data-structure with nullable, self-referential recursive references.\n    - _(This can present footguns in many languages, but it is trivial in Rune)_\n\n## Dedicated \"secret\" types\n\nConsider the following example for treatment of secrets:\n\n```go\n// Check the MAC (message authentication code) for a message.  A MAC is derived\n// from a hash over the `macSecret` and message.  It ensures the message has not\n// been modified, and was sent by someone who knows `macSecret`.\nfunc checkMac(macSecret: secret(string), message: string, mac: string) -> bool {\n    computedMac = computeMac(macSecret, message)\n    return mac == computedMac\n}\n\nfunc computeMac(macSecret: string, message: string) -> string {\n  // A popular MAC algorithm.\n  return hmacSha256(macSecret, message)\n}\n```\n\nCan you see the potential security flaw? In most languages, an attacker with\naccurate timing data can forge a MAC on a message of their choice, causing a\nserver to accept it as genuine.\n\nAssume the attacker can tell how long it takes for `mac == computedMac` to run.\nIf the first byte of an attacker-chosen `mac` is wrong for the attacker-chosen\n`message`, the loop terminates after just one comparison. With 256 attempts,\nthe attacker can find the first byte of the expected MAC for the\nattacker-controlled `message`. Repeating this process, the attacker can forge\nan entire MAC.\n\nUsers of Rune are protected, because the compiler sees that `macSecret` is\nsecret, and thus the result of `hmacSha256` is secret. The string comparison\noperator, when either operand is secret, will run in constant time, revealing no\ntiming information to the attacker. Care must still be taken in Rune, but many\ncommon mistakes like this are detected by the compiler, and either fixed or\nflagged as an error.\n\n## A _\"DB-embedded\"_ language: relational data-structures and optimal memory-efficiency\n\nAs for the speed and safety of Rune's memory management, consider a simple\n`Human` class. This can be tricky to model in some languages, yet is trivial in\nboth SQL and Rune.\n\n```rs\nclass Human(self: Human, name: string, mother: Human? = null(self), father: Human? = null(self)) {\n  self.name = name\n\n  // The methods \"appendMotheredHuman\" and \"appendFatheredHuman\" are generated\n  // by code \"transformers\", a key factor in Rune's performance.\n  //\n  // We'll learn more about these methods in the next section (\"How does this work?\").\n  if !isnull(mother) {\n    mother.appendMotheredHuman(self)\n  }\n  if !isnull(father) {\n    father.appendFatheredHuman(self)\n  }\n\n  func printFamilyTree(self, level: u32) {\n    for i in range(level) {\n      print \"    \"\n    }\n    println self.name\n    for child in self.motheredHumans() {\n      child.printFamilyTree(level + 1)\n    }\n    for child in self.fatheredHumans() {\n      child.printFamilyTree(level + 1)\n    }\n  }\n}\n\n// Relation statements are similar to \"Foreign Key\" constraints in SQL.\n// They are used to define the relationships between data-structures.\n//\n// The \"cascade\" keyword means that when a Human is destroyed, all of\n// its children are recursively destroyed.\n// (In other words, manual invalidation of pointers is not required)\n//\n// This ability is also provided by code transformers.  See\n// builtin/doublylinked.rn\nrelation DoublyLinked Human:\"Mother\" Human:\"Mothered\" cascade\nrelation DoublyLinked Human:\"Father\" Human:\"Fathered\" cascade\n\n// Let's create a family tree.\nadam = Human(\"Adam\")\neve = Human(\"Eve\")\ncain = Human(\"Cain\", eve, adam)\nabel = Human(\"Abel\", eve, adam)\nalice = Human(\"Alice\", eve, adam)\nbob = Human (\"Bob\", eve, adam)\nmalory = Human(\"Malory\", alice, abel)\nabel.destroy()\nadam.printFamilyTree(0u32)\neve.printFamilyTree(0u32)\n```\n\nWhen run, this prints:\n\n```\nAdam\n    Cain\n    Alice\n    Bob\nEve\n    Cain\n    Alice\n    Bob\n```\n\n### How does this work?\n\nNote that Abel and Malory are not listed. This is because we didn't just kill\nAbel, we destroyed Abel, and this caused all of Abel's children to be\nrecursively destroyed. Also note that Rune now supports null safety. Null safety does not mean null does not exist in the language. It means types by default cannot be null. This can be overridden with \\<type\\>? in the type constraint.\n\nRelation statements are similar to columns in SQL tables. A table with a Mother\nand Father column has two many-to-one relations in a database.\n\nRelation statements give the Rune compiler critical hints for memory\noptimization. Objects which the compiler can prove are always in\ncascade-delete relationships do not need to be reference counted. The relation\nstatements also inform the compiler to update Human's destructor to recursively\ndestroy children. **Rune programmers never write destructors**, removing this\nfootgun from the language.\n\nTo understand why Rune's generated SoA code is so efficient, consider the arrays\nof properties created for the Human example above:\n\n```typescript\nnextFree = [null(Human)]\nmotherHuman = [null(Human)]\nprevHumanMotheredHuman = [null(Human)]\nnextHumanMotheredHuman = [null(Human)]\nfirstMotheredHuman = [null(Human)]\nlastMotheredHuman = [null(Human)]\nfatherHuman = [null(Human)]\nprevHumanFatheredHuman = [null(Human)]\nnextHumanFatheredHuman = [null(Human)]\nfirstFatheredHuman = [null(Human)]\nlastFatheredHuman = [null(Human)]\nname = [\"\"]\n```\n\nA total of 12 arrays are allocated for the Human class in SoA memory layout. In\n`printFamilyTree`, we only access 5 of them. In AoS memory layout, all 12\nfields would be loaded into cache during the tree traversal, and all fields\nwould be 64 bits on a 64-bit machine. In Rune, only the string references are\n64-bits by default. As a result, **Rune loads only 25% as much data into\ncache** during the traversal, improving memory load times, while simultaneously\nimproving cache hit rates.\n\nThis is why Rune's `binary_trees.rn` code already runs faster than any other\nsingle-threaded result in the [Benchmark\nGames](https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html).\n(Rune is not yet multi-threaded). The only close competitor is C++, where the\nauthor uses the little-known `std::pmr::monotonic_buffer_resource` class from the `<memory_resource>` library.\nNot only is Rune's SoA memory layout faster, but its solution is more generic:\nwe can create/destroy Node objects arbitrarily, unlike the C++ benchmark based\non `std::pmr::monotonic_buffer_resource`. When completed, we expect Rune to win most memory-intensive\nbenchmarks.\n\n# Installation\n\n## Compiling the Rune compiler:\n\nYou'll need 6 dependencies installed to compile Rune:\n\n-   Bison (parser generator)\n-   Flex (lexer generator)\n-   GNU multi-precision package gmp\n-   Clang version 10\n-   Datadraw, an SoA data-structure generator for C\n-   CTTK, a constant-time big integer arithmetic library\n    The first four can be installed with one command:\n\n```sh\n$ sudo apt-get install bison flex libgmp-dev clang clang-14\n```\n\nInstalling Datadraw requires cloning [the source from\ngithub](https://github.com/waywardgeek/datadraw).\n\n```sh\n$ git clone https://github.com/waywardgeek/datadraw.git\n$ sudo apt-get install build-essential\n$ cd datadraw\n$ ./autogen.sh\n$ ./configure\n$ make\n$ sudo make install\n```\n\nHopefully that all goes well... After dependencies are installed, to build\nrune:\n\n```sh\n$ git clone https://github.com/google/rune.git\n$ git clone https://github.com/pornin/CTTK.git\n$ cp CTTK/inc/cttk.h CTTK\n$ cd rune\n$ make\n```\n\nCTTK was written by Thomas Pornin. It provides constant-time big-integer\narithmetic.\n\nIf `make` succeeds, test the Rune compiler in the rune directory with:\n\n```sh\n$ ./runtests.sh\n```\n\nSome tests are currently expected to fail, but most should pass. To install\nrune under /usr/local/rune:\n\n```sh\n$ sudo make install\n```\n\nTest your installation:\n\n```sh\n$ echo 'println \"Hello, World!\"' > hello.rn\n$ rune -g hello.rn\n$ ./hello\n```\n\nYou can debug your binary executable with gdb:\n\n```sh\n$ gdb ./hello\n```\n\nTODO: add instructions on how to debug the compiler itself, especially the datadraw debug functionality.\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 4.8642578125,
          "content": "## Short term\nFix optimizer-unsafe potentially non-constant-time processing of struct comparison.\nUse concrete type constraints on variable assignments rather than \"if false\" type hints.\nIn the bootstrap version of Rune, add support for autocasting return expressions\n    to the type of other return expressions\nAdd an option for generating SoA vs AoS memory layout so folks can do their own benchmarking.\nWrite a C or C++ backend code generator for improved debugging of Rune, and so folks can benchmark with\n    full front-end optimization of different C compilers for benchmarking.\nEnhance gdb pretty printer so that we don't have to generate show methods.\nFigure out when relationship transformers should run.  Right now it is in the order statements are bound so that module-level variables can be passed into the transformers, but we assume all transformers are run before binding a constructor, which is currently false.  Figure out the right thing and do it.\nUse concrete type constraints in binding.  This can help eliminate problems\n    in binding recursive functions, and also non-template classes.\nDon't allow generated fields to be written outside of generated code.\nAdd an Object class that matches all types, so we can have case (Object, Object, Object).\nDefend vs Spectre/Meltdown: duplicate bignum functions in runtime to have constant-time vs\n    non-constant time APIs.  Do not pass in a secret bit.\nFigure out how to programatically manipulate labels in transformers.\nFlesh out index overloading: write is not yet supported.\nSupport Overloading method get/set methods.\nImprove safe mode:\n    Throw error when destroying an object that has a reference on the stack.\n    Use overflow/underflow intrinsics in LLVM.\nFix LLVM select for case when select bit is secret.\n    Also, only evaluate one or the other when select is not secret.\nAdd syntax for declaring volatile globals at specified addresses, so we can do memory-mapped I/O.  Consider using a global io array.\nAdd good support for interop with C++, which is a key requirement for a language to replace C++ in prod:\n    syntax for declaring extern \"C++\" functions, and deal with name mangling.\n    Add support for calling C++ constructors and methods.\n    Add support for c++ unique pointers, which are often returned.\nAdd support for C pointer types, which can be returned by C functions declared extern \"C\".\nAdd \"unsafe\" blocks where it is legal to dereference or index into a C pointer.\nWrite all the Benchmark Games benchmarks twice: one single threaded and\n    honest, one multi-threaded and using similar tricks used by the others to win.\nImplement dynamic class extensions.\nImplement inheritance via composition, using exclusive relationships.\nReturn error codes for each deError call, which error tests can expect.\nWrite initial language reference manual.\nAdd LLVM compiler hints and optmizations as described at\n    https://llvm.org/docs/Frontend/PerformanceTips.html#adding-to-this-document.\nSupport named parameters, like Python.\n\n## Medium Term\nSupport negative indicies, like Python, in slices to indicate size relative to length of the array.\nWrite tests to verify that constant time processing of secrets is achieved.  E.g. if (issecret(foo)...\nAdd support for fixed-sized arrays for improved speed.\nMake modular inverse constant time.\nUpgrade from lineNum to an object specifying the text of the line, position, and file name.\nSwitch to BoringSSL crypto primitives for faster constant-time bignums, as well as variable-time bignums.\nPerform constant propagation.\nEnforce private access to non-extern identifiers from other packages.\nSupport full co-routines in iterators in the LLVM backend.\nSupport tuple unpacking.\nSupport overloading modular operations, so we can support modular polynomials, etc.\nAdd multi-threading support.\nAdd schema-level reuse statements.\nWrite a schema generator for Rune similar to the dataview program for DataDraw schemas.\nFlush out transformers's Rune code interpreter.\nFinish transition to memory pools, and allocation of global arrays with mmap of the memory available on the machine so large arrays never move.\nAdd support for 32-bit mode.\n\n## Long term\nRewrite Rune in Rune.\nSupport lambda expressions with Function(statementExpression) constructor.\n\n## Optimizations\nTune floating point operations: For some reason, clang is running C/C++ floating point at about 2X our speed.\nRewrite heap to be more efficient for small passed-by-value objects like i32's.  The back-pointer and\n  index are not needed for heaps of values.\nSave memory on 32-bit targets using 32-bit lengths.\nLLVM: generate switch rather than a chain of branches.\nSupport tail recursion.\nUse existing uint32 or int32 field for nextFree to save memory for non-ref-counted classes.\nIdentify fields that are always accessed together and merge them into tuples.\n  Generate array-of-structures for these tuples.\nSupport unions, like DataDraw, where the field is selected by an enumerated type.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "bind",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap",
          "type": "tree",
          "content": null
        },
        {
          "name": "builtin",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "editors",
          "type": "tree",
          "content": null
        },
        {
          "name": "errortests",
          "type": "tree",
          "content": null
        },
        {
          "name": "g3doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "io",
          "type": "tree",
          "content": null
        },
        {
          "name": "llvm",
          "type": "tree",
          "content": null
        },
        {
          "name": "math",
          "type": "tree",
          "content": null
        },
        {
          "name": "os",
          "type": "tree",
          "content": null
        },
        {
          "name": "parse",
          "type": "tree",
          "content": null
        },
        {
          "name": "prettyprint.py",
          "type": "blob",
          "size": 1.1025390625,
          "content": "#!/bin/bash\n#  Copyright 2022 Google LLC.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport gdb.printing\n\n\nclass ClassPrinter:\n\n  def __init__(self, val):\n    self.val = val\n\n  def to_string(self):\n    className = self.val.type.name[6:].replace(\".\", \"_\")\n    gdb.parse_and_eval(\"%s_show(%u)\" % (className, self.val))\n    return \"%u\" % self.val\n\n\ndef build_pretty_printer():\n  pp = gdb.printing.RegexpCollectionPrettyPrinter(\"my_library\")\n  pp.add_printer(\"class\", \"^class\", ClassPrinter)\n  return pp\n\n\ngdb.printing.register_pretty_printer(gdb.current_objfile(),\n                                     build_pretty_printer())\n"
        },
        {
          "name": "rpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "runerrors.sh",
          "type": "blob",
          "size": 0.8125,
          "content": "#  Copyright 2021 Google LLC.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n#!/bin/bash\nfor test in errortests/*.rn; do\n  result=$(./runl \"$test\" | egrep \"(Exiting due to error|Exception)\")\n  if [[ \"$result\" != \"\" ]]; then\n    echo \"$test passed\"\n  else\n    echo \"*************************************** $test failed\"\n  fi\ndone\n"
        },
        {
          "name": "runl",
          "type": "blob",
          "size": 0.140625,
          "content": "#!/bin/bash\nruneFile=\"$1\"\noutFile=$(echo \"$runeFile\" | sed 's/\\.rn$//')\nllvmFile=\"${outFile}.ll\"\nshift\n./rune -g \"$runeFile\" && ./\"$outFile\" $@\n"
        },
        {
          "name": "runll",
          "type": "blob",
          "size": 0.3388671875,
          "content": "#!/bin/bash\nllvmFile=\"$1\"\noutFile=$(echo \"$llvmFile\" | sed 's/\\.ll$//')\nif [[ \"$outFile\" = \"$llvmFile\" ]]; then\n  echo \"Input file must be a .ll file\"\n  exit 1\nfi\nshift\nclang -g -fsanitize=undefined -fPIC -Iruntime -I../CTTK -o \"$outFile\" \"$llvmFile\" runtime/io.c runtime/array.c runtime/random.c runtime/bigint.c lib/libcttk.a && ./\"$outFile\" $@\n"
        },
        {
          "name": "runtests.sh",
          "type": "blob",
          "size": 1.9287109375,
          "content": "#!/bin/bash\n#  Copyright 2021 Google LLC.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nnumPassed=\"0\"\nnumFailed=\"0\"\n\nrm -f tests/*.result tests/*.ll\n\nfor outFile in tests/*.stdout; do\n  test=$(echo \"$outFile\" | sed 's/stdout$/rn/')\n  resFile=$(echo \"$outFile\" | sed 's/stdout$/result/')\n  inputFile=$(echo \"$outFile\" | sed 's/stdout$/stdin/')\n  argsFile=$(echo \"$outFile\" | sed 's/stdout$/args/')\n  executable=$(echo \"$test\" | sed 's/\\.rn$//')\n  args=\"-g\"\n  if [ -e \"$argsFile\" ]; then\n    args=`cat $argsFile`\n  fi\n  if [ -e \"$inputFile\" ]; then\n    ./rune \"$args\" \"$test\" && \"./$executable\"  > \"$resFile\" < \"$inputFile\"\n  else\n    ./rune \"$args\" \"$test\" && \"./$executable\"  > \"$resFile\"\n  fi\n  sed 's/\\r$//' -i \"$outFile\"\n  sed 's/\\r$//' -i \"$resFile\"\n  if cmp -s \"$outFile\" \"$resFile\"; then\n    echo \"$test passed\"\n    numPassed=$((numPassed + 1))\n  else\n    echo \"$test failed *****************************************\"\n    numFailed=$((numFailed + 1))\n  fi\ndone\n\nfor test in errortests/*.rn; do\n  executable=$(echo \"$test\" | sed 's/\\.rn$//')\n  result=$(./rune \"$args\" -x \"$test\" | grep \"Exiting due to error\")\n  if [[ \"$result\" == \"\" ]]; then\n    result=$(\"./$executable\" | grep -E \"(Exception|Panic)\")\n  fi\n  if [[ \"$result\" != \"\" ]]; then\n    echo \"$test passed\"\n    numPassed=$((numPassed + 1))\n  else\n    echo \"*************************************** $test failed\"\n    numFailed=$((numFailed + 1))\n  fi\ndone\n\necho \"Passed: $numPassed\"\necho \"Failed: $numFailed\"\n"
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "std",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "transformer",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}