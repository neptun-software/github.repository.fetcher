{
  "metadata": {
    "timestamp": 1736710047448,
    "page": 663,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "probablycorey/wax",
      "stars": 1979,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "build/\n*.pbxuser\n*.perspectivev3\nwax.framework\nxcuserdata\n.DS_Store\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 1.251953125,
          "content": "0.93\n\n* wax_startWithExtension was removed. \n* wax_start's parameters have changed. It now takes the name of the init \n  script usually \"AppDelegate.lua\". It also contains a null-terminated list of\n  extensions. Example below:\n  \n  wax_start(\"AppDelegate.lua\", luaopen_wax_http);\n  \n* Wax doesn't look in WAX_ROOT/data/scripts for Lua files anymore. It now \n  searches WAX_ROOT/scripts and then searches the app's Bundle path as well.\n  \n* Added wax_stdlib.h, this is used in the wax.framework to hold a compiled\n  version of the wax stdlib. It's just a dummy file otherwise.\n  \n* Renamed WAX_ROOT/lib/wax-scripts to WAX_ROOT/lib/stdlib because it was a\n  more accurate name.\n  \n* wax.framework is 100% more awesome. I put a lot of effort into making it\n  take as little effort as possible to add to a project. More info \n  https://github.com/probablycorey/wax/wiki/Installation-framework\n  \n* When developing on the device, you no longer need to clean the build to \n  ensure that the device has the updated files.\n\n* Bug fixes. Mostly dealing with waxClass and inheritance.\n\n* Better C++ compatibility. (via Tawanda Gwena)\n\n* Cross compilation of Lua bytecode files, and the ability to smush all of the\n  files together. (thanks to Matt Campbell and Jeremy Collins for their help)\n"
        },
        {
          "name": "FAQ",
          "type": "blob",
          "size": 0.1728515625,
          "content": "How to handle a method that takes a pointer to NSError\n\nlocal error = toobjc(nil)\ntoobjc(\"HILL\"):writeToFile_atomically_encoding_error(path, false, NSUTF8StringEncoding, error)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (c) 2009 Corey Johnson\n \nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n \nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.0751953125,
          "content": "# Wax is now being maintained by `Alibaba`\n\n# https://github.com/alibaba/wax\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "rakefile",
          "type": "blob",
          "size": 1.2705078125,
          "content": "WAX_FILES = FileList[\"*\"].exclude(/^(examples|xcode-template|framework|tools)/)\nTARGET_XCODE_TEMPLATE = \"#{ENV['HOME']}/Library/Application Support/Developer/Shared/Xcode/Project Templates/Wax/Wax iPhone App\"\nWAX_ROOT = File.expand_path(\"..\", __FILE__)\n\ntask :default => :install\n\ndesc \"Install wax xcode templates\"\ntask :install => \"template:create\"\n\nnamespace :template do\n  task :create => :clean do\n    mkdir_p File.dirname(TARGET_XCODE_TEMPLATE)\n    cp_r \"xcode-template\", TARGET_XCODE_TEMPLATE\n\n    # Copy the wax files into the template\n    template_wax_path = \"#{TARGET_XCODE_TEMPLATE}/wax\"\n    mkdir_p template_wax_path\n    cp_r WAX_FILES, template_wax_path\n    `chmod +x \"#{TARGET_XCODE_TEMPLATE}/wax/lib/build-scripts/copy-scripts.sh\"`\n\n    # Create the default run script\n    puts\n    puts \"Wax Xcode Template Installed!\"\n    puts \"-----------------------------\"\n    puts \n  end\n\n  desc \"Prepare xcode template for editing\"\n  task :edit => :clean do\n    ln_s WAX_ROOT, \"xcode-template/wax\"\n  \n    `open xcode-template/___PROJECTNAME___.xcodeproj`\n  end\n\n  desc \"Cleans up xcode template for packaging\"\n  task :clean do\n    rm_r File.dirname(TARGET_XCODE_TEMPLATE), :force => true\n    \n    rm_r \"xcode-template/wax\", :force => true\n    rm_r \"xcode-template/build\", :force => true\n  end\nend\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "xcode-template",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}