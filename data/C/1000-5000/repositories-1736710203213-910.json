{
  "metadata": {
    "timestamp": 1736710203213,
    "page": 910,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pure-data/pure-data",
      "stars": 1628,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.2900390625,
          "content": "; indent with space; make sure lines are not too long\n(\n (nil . ((indent-tabs-mode . nil)\n         (tab-width . 4)\n         (fill-column . 80)))\n ;; Warn about spaces used for indentation:\n (c-mode . ((c-file-style . \"bsd\")\n\t    (c-basic-offset . 4)\n\t    (c-comment-only-line-offset . 4)\n\t    )))\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5966796875,
          "content": "root = true\n\n[*]\n# please only ever use utf-8\ncharset = utf-8\n\n; C and friends\n[**.{c,cpp,h,hh,m,mm}]\n# indent 4 spaces, BSD-style\nindent_style = space\nindent_size = 4\nindent_brace_style = BSD\n\n## let git handle proper EOL\n#end_of_line = lf\n\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\nmax_line_length = 80\n\n#continuation_indent_size = 4\nspaces_around_operators = true\n\n; applies only to Makefiles\n[makefile]\nindent_style = tab\ntab_width = 4\n[**.am]\nindent_style = tab\ntab_width = 4\n\n[**.tcl]\nindent_style = space\nindent_size = 4\n#continuation_indent_size = 8\n#curly_bracket_next_line = false\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2294921875,
          "content": "# make sure that .gitignore, .travis.yml,... are not part of a\n# source-package generated via 'git archive'\n.git*      \texport-ignore\n/.*\t\texport-ignore\n/debian/\texport-ignore\n.editorconfig\t!export-ignore\n.dir-locals.el\t!export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.904296875,
          "content": "# binaries\nbin\nsrc/pd\nsrc/pd-watchdog\nsrc/pdreceive\nsrc/pdsend\n*.app\n*.exe\n\n# autotools\nautom4te.cache\nMakefile\nMakefile.in\nGNUmakefile\nGNUmakefile.in\naclocal.m4\nconfigure\nconfig.log\nconfig.status\nlibtool\nm4/generated\nm4/config\nmakefile.dependencies\ndist\ntags\ntcl/pd-gui\n\n# build\n*.o\n*.obj\nlib*.a\n\n# libtool\n.deps\n.libs\n*.lo\n*.la\n\n# externals\n*.pd_*\n*.d_fat\n*.d_fat_o\n*.dll\n*.so\n\n# windows build artifacts\nsrc/*.com\nsrc/*.def\nsrc/*.lib\nsrc/*.res\nsrc/*.a\n\n# mac build artifacts\n*.dylib\n\n# distribution tarballs\npd-0.*\nmsw/0.*\nmsw/pdprototype/*\n\n# gettext\npo/*.msg\npo/*.po~\n\n# emacs tags\nTAGS\n\n# asio sdk\nASIOSDK\n\n# pkgconfig\npd.pc\n\n# portaudio configure\nportaudio/portaudio/bin-stamp\nportaudio/portaudio/lib-stamp\nportaudio/portaudio/ltmain.sh\nportaudio/portaudio/portaudio-2.0.pc\n*.dirstamp\n\n# macOS\n.DS_Store\n\n# script build artifacts\nmac/build\n\n# libpd\n!libpd/Makefile\n!libpd/test_libpd/Makefile\nlibpd/test_libpd/test_libpd\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.068359375,
          "content": "import:\n  source: pure-data/pure-data-ci:travis-ci/travis-ci.yml@main\n"
        },
        {
          "name": "INSTALL.htm",
          "type": "blob",
          "size": 0.2734375,
          "content": "<!DOCTYPE html>\n<html><head>\n  <title>redirecting to chapter 6</title>\n\n  <!--\n\n  /* This file simply redirects to chapter 6*/\n  \n  -->\n\n  <meta http-equiv=\"REFRESH\" content=\"0;url=./doc/1.manual/resources/chapter6.htm\">\n\n</head><body>\nredirecting to chapter 6 ...\n</body></html>\n"
        },
        {
          "name": "INSTALL.txt",
          "type": "blob",
          "size": 19.5947265625,
          "content": "# Installing Pure Data\n\nThis README file contains info for installing Pure Data from source.\n\nPd is built on the commandline using traditional Unix-style tools. The source\ndistribution comes with two build systems:\n\n* autotools: easy to use, many compilation options, recommended for most users\n* makefile: smaller & simpler, used for Pd binary downloads\n\n## Requirements\n\nCore build requirements:\n\n* Unix command shell: bash, dash, etc\n* C compiler chain: gcc/clang & make\n\nCore runtime requirements:\n\n* Tcl/Tk: Tk wish shell\n\nOptional features:\n\n* autotools: autconf, automake, & libtool (if building with the autotools)\n* gettext: build localizations in the po directory\n* JACK: audio server support\n* FFTW: use the optimized FFTW Fast Fourier Transform library\n\n## Autotools Build (recommended)\n\nBuilding Pd using the GNU autotools involves the following steps for all\nplatforms:\n\n1. configure: detect & set library and platform options\n2. make: compile Pd, associated tools, and resource files (ie. translations)\n3. install: install the Pd binaries and resources onto your system\n\nOverview:\n\n    cd path/to/pd\n    ./autogen.sh\n    ./configure\n    make\n\nNote: Additional platform-specific options and build targets are listed in\nfollowing subsections.\n\nStart by opening a commandline shell and navigating to the Pd source directory:\n\n    cd path/to/pd\n\nFirst generate the configure script and various build files by running:\n\n    ./autogen.sh\n\nNext configure Pd with the default options for your platform:\n\n    ./configure\n\nYou can verify the configuration options that the configure step script prints:\n\n    pd 0.47.1 is now configured\n\n    Platform:             Mac OSX\n    Debug build:          no\n    Universal build:      no\n    Localizations:        no\n    Source directory:     .\n    Installation prefix:  /usr/local\n\n    ...\n\n    audio APIs:           PortAudio\n    midi APIs:            PortMidi\n\nIf you want to change these options, you can specify/override the configure\nscript settings on the commandline:\n\n    # change install prefix to /usr\n    ./configure --prefix /usr\n\n    # build Pd with the JACK audio server backend\n    ./configure --enable-jack\n\n    # build Pd using a system installed PortAudio\n    ./configure --without-local-portaudio\n\nIf you need to run Pd through a debugger (like gdb), you can\nbuild Pd with debugging symbols using the \"--enable-debug\" flag.\n\n    # build Pd with debugging information\n    ./configure --enable-debug\n\nAn important configure option for some platforms is --enable-universal which\nallows you to specify the desired architecture(s) when building Pd. For Intel\nand AMD processors, 32 bit is called \"i386\" and 64 bit is \"x86_64\". By default,\nPd is built for the architecture of the current system, however you may want a\n32 bit Pd to work with existing 32 bit externals on a 64 bit system. You can\noverride the defaults with --enable-universal:\n\n    # build 32 bit Pd\n    ./configure --enable-universal=i386\n\n    # build 64 bit Pd\n    ./configure --with-universal=x86_64\n\nThe full list of available configuration options can printed by running:\n\n    ./configure --help\n\nNow that Pd is configured, build by running:\n\n    make\n\nBuilding should take a minute or two. If compilation was successful, you can\nrun Pd from the build directory without installing it:\n\n    cd bin\n    ./pd\n\nTo install to your system using the configuration prefix (default /usr/local):\n\n    sudo make install\n\nYou can also to a custom location via:\n\n    make install DESTDIR=~/pd-xxx prefix=/\n\nOnce installed, you should now be able to run Pd from the commandline:\n\n    pd\n\nIf want to uninstall, make sure Pd is configured and then run:\n\n    sudo make uninstall\n\nIf you compiled Pd using the --enable-universal configure option and want to\ndouble check which architectures Pd was built with, use the \"file\" command:\n\n    # examine binary in the src directory\n    file src/pd\n    ...\n    src/pd: Mach-O 64-bit executable x86_64\n\n    # look at pd inside a macOS .app bundle\n    file Pd.app/Contents/Resources/bin/pd\n    ...\n    Pd-0.47.1.app/Contents/Resources/bin/pd: Mach-O 64-bit executable x86_64\n\n### Linux\n\nPlatform requirements:\n\n* ALSA: Linux sound library (recommended)\n* OSS: historical precursor to ALSA, generally not used\n* JACK: JACK audio server (optional)\n\nInstall the core build requirements using your distribution's package manager.\nFor Debian, you can install the compiler chain, autotools, & gettext with:\n\n    sudo apt-get install build-essential automake autoconf libtool gettext\n\nFor libraries, you will need to install the \"development\" versions which include\nthe source code header files. In Debian, the ALSA development package is called\n\"libasound2-dev\":\n\n    sudo apt-get install libasound2-dev\n\nSimilarly, optional development libraries can be also be installed to for\nadditional features. Install the JACK development files on Debian:\n\n    sudo apt-get install libjack-jackd2-dev\n\nIn case you are using jackd1 instead of jackd2, use:\n\n    sudo apt-get install libjack-dev\n\nMost distributions come with Tcl/Tk installed, so you should be able to run Pd\nafter it is built.\n\nOnce your build system is set up, you can follow the general autotools build\nsteps to build Pd.\n\n### macOS\n\nmacOS is built on top of a BSD system and the bash commandline can be accessed\nwith the Terminal application in the /Applications/Utility directory.\n\nThe clang compiler and associated tools are provided by Apple. If you are\nrunning macOS 10.9+, you *do not* need to install the full Xcode application and\ncan install the Commandline Tools Package only by running the following:\n\n    xcode-select --install\n\nIf you are running macOS 10.6 - 10.8, you will need to install Xcode\nfrom the Mac App Store or downloaded from http://developer.apple.com\n\nTcl/Tk is already included macOS.\n\nTo install the autotools, gettext, and libraries for additional features,\nyou can use one of the open source package managers for macOS:\n\n* homebrew: https://brew.sh (recommended)\n* macports: https://www.macports.org\n\nFollow the package manager set up instructions and then install the software you\nneed. For example, to install the autotools & gettext using Homebrew:\n\n    brew install automake autoconf libtool pkg-config gettext\n    brew link --force gettext\n\nBy default, Pd is built for the current system architecture, usually 64 bit. If\nyou want to override this you can use the --enable-universal configure option\nwhich allows you to specify the desired architecture(s) when building Pd. For\nIntel/AMD processors, 32 bit is called \"i386\" and 64 bit is \"x86_64\". For Apple\nSilicon processors (M1, M2, etc), the 64 bit architecture is called \"arm64\". By\ndefault, Pd is built for the architecture of the current system, however you may\nwant a 32 bit Pd to work with existing 32 bit externals on a 64 bit system. You\ncan override the defaults with --enable-universal:\nyou want to override this you can use the --enable-universal configure option,\nas mentioned in the main Autotools Build section. On macOS, running this option\nwithout arguments will build a \"fat\" Pd for all architectures supported by the\ncompiler:\n\n* macOS 10.6: i386, x86_64, ppc\n* macOS 10.7+: i386, x86_64\n* macOS 10.15: x86_64\n* macOS 11+: x86_64, arm64\n\nNote: a \"fat\" Pd may not work on all systems and/or be able to load both 32 or\n64 bit externals. Additionally, you can specify multiple architectures directly:\n\n    # build a \"fat\" Pd for both 32 and 64 bit Intel\n    # may not work on all systems\n    ./configure --enable-universal=i386,x86_64\n\n    # build a \"fat\" Pd for all detected architectures (macOS: i386, x86_64, ppc)\n    # may not work on all systems\n    ./configure --enable-universal\n\nThe JACK audio server is supported by Pd on macOS. By default, Pd can use either\nthe offical 64-bit builds for macOS 10.12+ from https://jackaudio.org or the\nolder, 32-bit Jack OS X runtime framework if one is installed on the system.\nOptionally, Pd can also be built with Jack installed via Homebrew or Macports,\nhowever the runtime framework support must be disabled:\n\n    brew install jack\n    ./configure --disable-jack-framework --enable-jack\n\nYou should now be ready to build Pd by following the general autotools build\nsteps. Once built, there are two options for installation:\n\n* build a standalone macOS application (recommended)\n* install to your system as a commandline program\n\nTo build the Pd macOS application, simply run:\n\n    make app\n\nThis builds Pd-#.##.#.app in the Pd source directory which can be then be\ndouble-clicked and/or copied to /Applications. For more info & options regarding\nthe Pd .app bundle, see mac/README.txt\n\nIf you want to have both the Pd application *and* use Pd from the commandline,\nadd command aliases to the binaries inside the .app to your shell environment\n~/.zshrc (newer systems with zsh, macOS 10.15+) or ~/.bash_profile (older\nsystems with bash):\n\n# pd commandline\nWHICHPD=\"Pd-0.47-1\"\nalias pd=\"/Applications/$WHICHPD.app/Contents/Resources/bin/pd\"\nalias pdsend=\"/Applications/$WHICHPD.app/Contents/Resources/bin/pdsend\"\nalias pdreceive=\"/Applications/$WHICHPD.app/Contents/Resources/bin/pdreceive\"\n\nNext, reload the shell environment by either opening a new Terminal window or\nrunning:\n\n    # zsh (new)\n    . ~/.zshrc\n\n    # bash (old)\n    source ~/.bash_profile\n\nIf you install Pd to your system with \"make install\", the Tk 8.5.9 currently\nincluded with the system (as of macOS 10.14) is buggy and should *not* be used.\nIt is recommended to install a newer version, either via Homebrew or from the\nActiveState Tcl/Tk downloads.\n\nTo see which version the Pd GUI is using: set the log level to 4 & look for the\nTk version log line in the Pd window.\n\nAnother option is to set the Tk Wish command Pd uses to launch the GUI. At\nstart, Pd does a quick search in the \"usual places\" for Wish and chooses the\nfirst path that exists. Versions of macOS up to 10.12 also ship with Tcl/Tk 8.4\nwhich works fine and this wish can be invoked by Pd using the full path\n\"/usr/bin/wish8.4\". You can configure Pd to use this search path first with:\n\n    ./configure --with-wish=/usr/bin/wish8.4\n\nTo see Pd's path search info, run Pd with the -verbose flag:\n\n    pd -verbose\n\nNote: Pd installed to your system or run from the build/bin directory will not\nuse the default font and will be missing the various macOS GUI hints (such as\nretina rendering) which are specified by the Info.plist file inside the .app\nbundle. Again, it is recommended to build a .app and use the aforementioned\naliases to provide the pd command.\n\n### Windows\n\nPd on Windows can be built with either MinGW or Cygwin which provide the\ncore build requirements: a compiler chain & shell environment.\n\nIt is recommended to use the Msys2 distribution which provides both a Unix\ncommand shell and MinGW. Download the Msys2 \"x86_64\" 64 bit installer (or \"i686\"\nif you are using 32 bit Windows) from:\n\n    http://www.msys2.org/\n\nThen install to the default location (C:\\msys32 or C:\\msys64) and follow the\nsetup/update info on the Msys2 webpage.\n\nMsys2 provides both 32 and 64 MinGW and command shells. As of Pd 0.50, the Pd\nrelease is 64 bit for Windows, so it is recommended to set up and use the MinGW\n64 bit shell. If you want to build a 32 bit Pd, similarly use the MinGW 32 bit\nshell. Due to how MinGW is designed, you cannot build a 64 bit Pd with a 32 bit\nMinGW and vice versa. This also means the Pd configure --enable-universal build\noption has no effect in MinGW.\n\nNote: Msys2 development seems to change frequently, so some of the package names\n      below may have changed after this document was written.\n\nOpen an Msys2 shell and install the compiler chain, autotools, & gettext via:\n\n    # 64 bit\n    pacman -S mingw-w64-x86_64-toolchain mingw-w64-x86_64-clang \\\n              make autoconf automake libtool \\\n              mingw-w64-x86_64-gettext\n\n    # 32 bit\n    pacman -S mingw-w64-i686-toolchain mingw-w64-i686-clang \\\n              make autoconf automake libtool \\\n              mingw-w64-i686-gettext\n\nInstall git if you want to clone the Pd sources from Github, etc:\n\n    pacman -S git\n\nand/or the nsis installer tool if you want to build the Pd Windows installer:\n\n    # 64 bit\n    pacman -S mingw-w64-x86_64-nsis\n\n    # 32 bit\n    pacman -S mingw-w64-i686-nsis\n\nNote: You can also search for packages in Msys2 with:\n\n    pacman -S -s <searchterm>\n\nOnce the packages are installed, you should now be ready to build Pd by\nfollowing the general autotools build steps.\n\nThe following audio APIS are available on Windows and can be enabled/disabled\nvia their configure flags:\n\n* MMIO: --enable-mmio or --disable-mmio (default enabled)\n* ASIO: --enable-asio or --disable-asio (default enabled, if found)\n* JACK: --enable-jack or --disable-jack\n\nFor example, to build Pd without MMIO support:\n\n    ./configure --disable-mmio\n\nNote: Because of license restrictions, Pd cannot distribute the ASIO SDK source\nfiles. If you want to build Pd with ASIO support, see asio/README.txt for\nfurther instructions.\n\nOnce built Pd is built, you can either:\n\n* build a Pd application directory for Windows (recommended)\n* build a Windows installer\n\nA Pd application directory is essentially a self-contained Pd package which\nshould run out of the box. To build, simply use:\n\n    make app\n\nThis will create a \"pd-VERSION\" directory (ie. pd-0.48.1) which can then be used\nby running pd.exe in the bin directory and placed wherever on your system. For\nmore info & options regarding the Pd app directory, see msw/README.txt\n\nTo build a .msi Windows installer for Pd, see msw/build-nsi.sh.\n\nNote: The standard \"make install\" requires Tcl/Tk and won't work outside your\nCygwin/Msys2 environment (if at all).\n\n### Cross-compilation for Windows on Linux\n\nYou can also build a Windows binary of Pd on a Linux system, using a\ncross-compilation toolchain.\n\nFor Debian based systems (e.g. Ubuntu), you can install the toolchain with:\n\n    sudo apt-get install build-essential automake autoconf libtool gettext\n    sudo apt-get install mingw-w64 mingw-w64-tools\n    sudo apt-get install nsis\n\nThe \"mingw-w64\" package will install the cross compilation toolchains for both\n32bit (g++-mingw-w64-i686, binutils-mingw-w64-i686) and\n64bit (g++-mingw-w64-x86-64, binutils-mingw-w64-x86-64).\n\nThe \"nsis\" package is purely optional, and only needed if you want to build the\ninstaller.\n\nYou must tell configure that you want to cross-compile for a given architecture\nvia the \"--host\" configure flag.\n\nFor example, to build a 32 bit Pd:\n\n    ./configure --host=i686-w64-mingw32\n\nSimilarly, to build a 64 bit Pd without ASIO support:\n\n    ./configure --disable-asio --host=x86_64-w64-mingw32\n\nIf all went well, you should now be ready to build Pd, as explained in the\ninstructions above in the \"Windows\" section:\n\n    make app\n\n### BSD\n\nBuilding Pd for the various BSD variants is similar to the Linux way.\nThe major difference is the used package manager (and the names of the packages),\nyou'll want to install.\n\n### FreeBSD\n\n(Tested on FreeBSD-13)\n\nInstall the core build requirements:\n\n    sudo pkg install gcc automake autoconf libtool gettext gmake\n\nYou may install one (or more) libraries (depending on your needs).\nIt seems that with FreeBSD-13, there are ALSA and JACK packages available:\n\n    sudo pkg install alsa-lib jackit\n\nOnce your build system is set up, you can follow the general autotools build\nsteps to build Pd, but make sure to use `gmake` (aka \"GNU make\").\nThe ordinary BSD `make` will not suffice!\n\n    ./autogen.sh\n    ./configure --deken-os=FreeBSD MAKE=gmake\n    gmake\n\n    sudo gmake install\n\n### OpenBSD\n\n(Tested on OpenBSD-7)\n\nInstall the core build requirements:\n\n    sudo pkg_add gcc automake autoconf libtool gettext-tools gmake\n\n(If there are multiple versions for one or more of the packages, pick your favourite or the newest one).\n\n\nYou may install one (or more) libraries (depending on your needs).\nIt seems that with OpenBSD-7, there are only JACK packages available:\n\n    sudo pkg_add jack\n\nBy default, OpenBSD installs all its packages into `/usr/local/`,\nbut the compiler does not look for headers resp. libraries in this directory.\nWe can instruct autotools to automatically consider these directories\nby creating a file '/usr/local/share/config.site':\n\n    cat | sudo tee /usr/local/share/config.site>/dev/null << EOF\n    CPPFLAGS=\"-I/usr/local/include \\$CPPFLAGS\"\n    LDFLAGS=\"-L/usr/local/lib \\$LDFLAGS\"\n    EOF\n\nAlso, because OpenBSD allows to coinstall multiple versions of the autotools (with no \"default\"),\nwe must specify which version we want to use:\n\n   export AUTOCONF_VERSION=$(ls -S /usr/local/bin/autoconf-* | sed -e 's|.*-||' | sort -n | tail -1)\n   export AUTOMAKE_VERSION=$(ls -S /usr/local/bin/automake-* | sed -e 's|.*-||' | sort -n | tail -1)\n\nNow that your build system is set up, you can follow the general autotools build\nsteps to build Pd, but make sure to use `gmake` (aka \"GNU make\").\nThe ordinary BSD `make` will not suffice!\n\n    ./autogen.sh\n    ./configure --deken-os=OpenBSD --enable-jack MAKE=gmake\n    gmake\n\n    sudo gmake install\n\n### NetBSD\n\n(Tested on NetBSD-9)\n\nInstall the core build requirements:\n\n    sudo pkgin install gcc automake autoconf libtool gettext-tools gmake\n\nYou may install one (or more) libraries (depending on your needs).\nIt seems that with NetBSD-9, there are JACK and ALSA packages available,\nbut the ALSA packages seem to be broken. OSS appears to be built-in.\n\n    sudo pkgin install jack\n\nBy default, NetBSD installs all its packages into `/usr/pkg/`,\nbut the compiler does not look for headers resp. libraries in this directory.\nWe can instruct autotools to automatically consider these directories\nby creating a file '/usr/pkg/share/config.site':\n\n    cat | sudo tee /usr/pkg/share/config.site>/dev/null << EOF\n    CPPFLAGS=\"-I/usr/pkg/include \\$CPPFLAGS\"\n    LDFLAGS=\"-L/usr/pkg/lib -Wl,-R/usr/pkg/lib \\$LDFLAGS\"\n    EOF\n\nNow that your build system is set up, you can follow the general autotools build\nsteps to build Pd, but make sure to use `gmake` (aka \"GNU make\").\nThe ordinary BSD `make` will not suffice!\n\n    ./autogen.sh\n    ./configure --deken-os=NetBSD --prefix=/usr/pkg --disable-alsa --enable-jack MAKE=gmake\n    gmake\n\n    sudo gmake install\n\n## Makefile Build\n\nAlternatively, and often more simply, to the autotools build, you can use the\nfallback makefiles in the src directory:\n\n* src/makefile.gnu: GNU/Linux\n* src/makefile.mac: macOS\n* src/makefile.msvc: Windows with Microsoft Visual C\n* src/makefile.mingw: Windows with MinGW GCC\n\nOn Linux, for example, run the GNU-specific makefile in the src directory:\n\n    cd src\n    make -f makefile.gnu\n\nYou can then run directly out of the bin directory without installing:\n\n    cd ../bin\n    ./pd\n\nFor Microsoft Visual C, first build Pd with the MS VC makefile and then build\neach external in the extra directory:\n\n    cd src\n    make -f makefile.msvc\n    cd ../extra/bob~\n    make pd_nt\n    cd ../bonk~ && make pd_nt\n    cd ../choice && make pd_nt\n    cd ../fiddle~ && make pd_nt\n    ...\n\nTo install Pd to your system on Linux, macOS, & MinGW (Windows), use the\n\"install\" makefile target. For Linux, this is:\n\n    make -f makefile.gnu install\n\nOnce installed, you should now be able to run Pd from the commandline:\n\n    pd\n\nIf want to uninstall, simply run the \"uninstall\" makefile target:\n\n    make -f makefile.gnu uninstall\n\nOn macOS, you can build a clickable Pd .app bundle using the supplemental build\nscripts in the mac directory. See mac/README.txt for more info.\n\n## Reporting Bugs\n\nLet us know if you run into any bugs or issues with building or installing Pd:\n\n* send an email: https://lists.puredata.info/listinfo\n* post to the Pd forum: https://forum.pdpatchrepo.info\n* create a bugreport: https://bugs.puredata.info\n* open an issue: https://github.com/pure-data/pure-data/issues\n\nPlease include information involved with your problem such as:\n\n* information about your system: OS version, libraries installed, etc\n* configure or make output including error lines\n* steps you took: configuration options, etc\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.5322265625,
          "content": "This software is copyrighted by Miller Puckette and others.  The following\nterms (the \"Standard Improved BSD License\") apply to all files associated with\nthe software unless explicitly disclaimed in individual files:\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above  \n   copyright notice, this list of conditions and the following \n   disclaimer in the documentation and/or other materials provided\n   with the distribution.\n3. The name of the author may not be used to endorse or promote\n   products derived from this software without specific prior \n   written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   \nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\nTHE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.201171875,
          "content": "#########################################\n##### Defaults & Paths #####\n\nAUTOMAKE_OPTIONS = foreign\nACLOCAL_AMFLAGS = -I m4/generated -I m4\n\nCFLAGS += @DEFS@\nEXTRA_SUBDIRS = \n\n# pkg-config support\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = pd.pc\n\n#########################################\n##### Files, Binaries, & Libs #####\n\n##### ASIO #####\nif ASIO\nEXTRA_SUBDIRS += asio\nendif\n\n##### PortAudio #####\nif LOCAL_PORTAUDIO\nEXTRA_SUBDIRS += portaudio\nendif\n\n##### PortMidi #####\nif LOCAL_PORTMIDI\nEXTRA_SUBDIRS += portmidi\nendif\n\n##### Localizations #####\n# optionally build localizations\nBUILT_SOURCES = \nif MSGFMT\nEXTRA_SUBDIRS += po\nBUILT_SOURCES += locales\nendif\n\n# include libpd `here since the libpd subdirs contain their own custom Makefiles\nLIBPD_DIST = libpd/Makefile libpd/README.txt libpd/test_libpd/Makefile \\\n             libpd/test_libpd/test_libpd.c libpd/test_libpd/test_libpd.pd\n\n# files that are included but not built\nEXTRA_DIST = LICENSE.txt README.txt INSTALL.txt $(LIBPD_DIST)\n\npkgdata_DATA = \\\n    LICENSE.txt \\\n    README.txt \\\n    $(empty)\n\n\n# subdirs that are built,\n# mac before src due to uninstall target order kludge (see mac/Makefile.am)\nSUBDIRS = $(EXTRA_SUBDIRS) linux mac msw src man doc tcl extra font\n\n# subdirs that are always included in the dist, etc.\nDIST_SUBDIRS = asio doc extra font linux mac man msw po portmidi portaudio src tcl\n\n#########################################\n##### Targets #####\n\n.PHONY: app\n\n# optionally build localizations\nif MSGFMT\nlocales:\n\t${MAKE} -C po all\nelse\nlocales:\nendif\n\nif MACOSX\n# forward target to mac/Makefile\napp:\n\t${MAKE} -C mac app\nendif\nif WINDOWS\n# forward target to msw/Makefile\napp:\n\t${MAKE} -C msw app\nendif\n\n# startup location for GUI plugins and/or patches,\n# leftover from Pd-extended & not currently used\ninstall-data-local:\n\t$(INSTALL) -d $(DESTDIR)$(pkglibdir)/startup\n\t$(INSTALL) -d $(DESTDIR)$(pkglibdir)/startup/disabled\n\n# remove the leftover $(libdir)/pd dir, fail silently on any non-empty dirs\n# The \"|| true\" ensures that if the dir is *not* empty, then rmdir does not throw\n# an error and stop make.\nuninstall-hook:\n\tif test -d $(DESTDIR)$(pkglibdir) ; then \\\n\t    find $(DESTDIR)$(pkglibdir) -depth -type d | xargs rmdir 2>/dev/null || true ; \\\n\tfi\n"
        },
        {
          "name": "README.translators.md",
          "type": "blob",
          "size": 1.9677734375,
          "content": "Notes for translators\n=====================\n\nThe Pd GUI interface is available in multiple languages.\n\nIf support for your language is only partial or missing completely,\nyou are invited to join the Pd translation effort.\n\n# Project mailinglist\n\nWe don't have a specific mailinglist for translating Pd,\nso we use the ordinary Pd mailinglist:\n\n  https://lists.puredata.info/listinfo/pd-list\n\nFeel free to subscribe to the mailinglist to discuss translation issues.\n\n# Different translation workflows\n\nThere are two ways to manage the translations:\n\n- using the Weblate web application at\n\n  https://hosted.weblate.org/projects/pure-data/\n\n- using the Git repository to grab and commit PO files\n\n## Translation with Weblate\n\nIf you decide to use Weblate, you don't have to learn Git usage.\nGet in touch with us on the above mailing list so that we can setup\nthe initial translation files for you, and once they appear\non Weblate, you can start working!\nYou should communicate us the ISO code of your translation\n(see \"How to start a new translation\" for more information on possible ISO codes).\n\nIf you want to retrieve the content of Weblate via git you can use\nthis git repository as remote:\n\n```\n$ git remote add weblate https://hosted.weblate.org/git/pure-data/pure-data\n```\n\n## Translation without Weblate\n\n---------------------------\n\nIf you're not using Weblate, you'll have to interact with the Git\nrepository. So read README.git first. Really. And then please respect the\nguidelines below.\n\nWrite meaningful commit messages. Always start with the language\ncode of the affected translations. Some examples of good commit\nmessages:\n\n* it: Translated menus\n* pt_br: Complete translation of deken\n\n\n# How to start a new translation\n\nSee the `po/README.txt` for adding a new translation manually.\n\n\nIn any case, you must find out the language code for your translation\n(it looks like `fr` or `de_at`).\n\nSee https://www.gnu.org/software/gettext/manual/html_node/Usual-Language-Codes.html\nfor a list of such codes.\n"
        },
        {
          "name": "README.txt",
          "type": "blob",
          "size": 2.361328125,
          "content": "# Pure Data\n\nThis is the README file for Pd, a free real-time computer music system.\n\n## Getting Pd\n\nYou can get Pd for Linux, macOS, or Microsoft Windows from:\n\n    http://msp.ucsd.edu/software.html\n\nor from the Pure Data community site:\n\n    https://puredata.info\n\nInstallation instructions are in INSTALL.txt and the Pd Manual at:\n\n    http://msp.ucsd.edu/Pd_documentation/index.htm\n\nIf you download and unpack Pd, you will also find the Manual locally\nin the file \"doc/1.manual/index.htm\".\n\nLinux (or FreeBSD): In some Linux installations you can download Pd via \"apt-get\ninstall puredata\" or \"dnf install puredata\"; otherwise you can download\nthe source and compile it as described in INSTALL.txt.\n\nApple macOS: Pd binaries are distributed as a \"tar.gz\" file. The web browser\nwill probably download this archive into your Downloads folder. Double click\nto extract the archived Mac app which you can then run and/or drag into your\nApplications folder.\n\nMicrosoft Windows: Pd binaries are distributed as a self-extracting executable\nor as a \"zip\" file.\n\nIf you have questions about Pd or if you wish to be notified of releases,\nyou can browse and/or join the Pd mailing list:\n\n    https://lists.puredata.info/listinfo\n\nMany extensions to Pd are available, for instance to add video and 3D graphics.\nThe easiest way to get these is to use the \"Find externals\" command in Pd's Help\nmenu.\n\n## Copyright\n\nExcept as otherwise noted, all files in the Pd distribution are\n\n    Copyright (c) 1997-2024 Miller Puckette and others.\n\nFor information on usage and redistribution, and for a DISCLAIMER OF ALL\nWARRANTIES, see LICENSE.txt included in the Pd distribution.\n(Note that Tcl/Tk, expr, and some other files are copyrighted separately).\n\n## Acknowledgements\n\nThanks to Harry Castle, Krzysztof Czaja, Mark Danks, Christian Feldbauer,\nGuenter Geiger, Kerry Hagan, Trevor Johnson, Fernando Lopez-Lezcano, Adam\nLindsay, Karl MacMillan, Thomas Musil, Toshinori Ohkouchi, Winfried Ritsch,\nVibeke Sorensen, Rand Steiger, Hans-Christoph Steiner, Shahrokh Yadegari, Dan\nWilcox, David Zicarelli, IOhannes m zmoelnig, Christof Ressi, Antoine Rousseau,\nAlexandre Torres Porres, Claude Heiland-Allen, Roman Haefeli, Lucarda, Chris\nMcCormick, Seb Shader and probably many others for contributions of code,\ndocumentation, ideas, and expertise. This work has received support from Intel,\nKeith McMillen Instruments, ZKM, IEM, and UCSD.\n"
        },
        {
          "name": "asio",
          "type": "tree",
          "content": null
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.4931640625,
          "content": "#!/bin/sh\n\nPATH=/sw/bin:$PATH\n\nPWD=${0%/*}\n\n## git cannot really handle empty directories\n## so let's create the missing ones\nmkdir -p ${PWD}/m4/generated\n\ncase `uname -s` in\n    MINGW*)\n        # autoreconf doesn't always work on MinGW\n        aclocal --force -I m4/generated -I m4 && \\\n        libtoolize --install --force && \\\n        autoconf --force && \\\n        automake --add-missing --copy --force-missing && \\\n        true\n    ;;\n    *)\n        autoreconf --install --force --verbose\n    ;;\nesac\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 29.4169921875,
          "content": "#########################################\n##### Prelude #####\n\nAC_PREREQ(2.59)\nAC_INIT([pd], [0.55.2])\nAC_CONFIG_SRCDIR(src/m_pd.c)\nAC_CONFIG_AUX_DIR([m4/config])\nAC_CONFIG_MACRO_DIR([m4/generated])\nAM_INIT_AUTOMAKE([subdir-objects])\nAC_CANONICAL_HOST\n\n\n########################################\n#### ohoh. automake<<1.16 does not like $(top_srcdir) in _SOURCES.\nAS_IF([test \"$( (echo 1.16; echo ${am__api_version}) | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | head -1)\" != \"1.16\"], [\n  enable_dependency_tracking=no\n  AC_MSG_WARN([legacy automake detected: disabled dependency-tracking!\n\t       to get rid of this warning and enable dependency-tracking,\n\t       please install at least automake-1.16 and rerun './autogen.sh'\n\t       ])\n])\n\n# check whether the user has provided --program-transform-name\n# we need this so we can fall back to a default transformation\n# in case the user passed --with-floatsize\nAS_CASE([$ac_configure_args],\n        [*\\'--program-transform-name*], [have_program_transform_name=yes],\n        [*\\'--program-prefix*], [have_program_transform_name=yes],\n        [*\\'--program-suffix*], [have_program_transform_name=yes],\n        [have_program_transform_name=no])\n\n#########################################\n##### Default values #####\n\n# set here and not in AC_ARG_ENABLE so the values set in the OS detection\n# below are not overwritten if the configure argument isn't used\nportaudio=no\nportmidi=no\nlocal_portaudio=yes\nlocal_portmidi=yes\nmmio=no\nasio=no\nwasapi=no\njack_framework=no\nlocales=yes\n\n# wish command info, the actual value is set using the WISH define\n# \"wish\" mirrors the default WISH define in s_inter.c\nwish=\"wish\"\n\n# list of detected apis\naudio_backends=\"\"\nmidi_backends=\"\"\n\n# deken information\ndeken_os=\"\"\ndeken_cpu=\"\"\ndeken_ext=\"so\"\nfloatsize=\"\"\n\n# debug/release defaults\nDEBUG_CFLAGS=\"-O0\"\nRELEASE_CFLAGS=\"-ffast-math -fno-finite-math-only -funroll-loops -fomit-frame-pointer -O3\"\n\n# common flags applied to all pd binaries\nPD_CPPFLAGS=\"\"\nPD_CFLAGS=\"\"\nPD_LDFLAGS=\"\"\n\n\n#########################################\n##### OS Detection #####\n\n# you will need to install XCode on Mac OS X to use this:\nPD_CHECK_IPHONE(IPHONEOS=yes, IPHONEOS=no, AC_MSG_ERROR([iOS SDK not available]))\nPD_CHECK_ANDROID(ANDROID=yes, ANDROID=no, AC_MSG_ERROR([Android SDK not available]))\n\nAS_CASE([$host],\n[*darwin*],[\n    AS_IF([test \"x${IPHONEOS}\" = \"xno\"],[\n        MACOSX=yes\n        platform=\"Mac OSX\"\n        deken_os=darwin\n        coreaudio=yes\n        portaudio=yes\n        portmidi=yes\n        jack_framework=yes\n        watchdog=yes\n        EXTERNAL_CFLAGS=\"-fPIC\"\n        EXTERNAL_EXTENSION=d_fat\n\n        # helps for machine/endian.h to be found\n        PD_CFLAGS=\"-D_DARWIN_C_SOURCE\"\n\n        # increase max allowed file descriptors\n        PD_CFLAGS=\"$PD_CFLAGS -D_DARWIN_UNLIMITED_SELECT -DFD_SETSIZE=10240\"\n\n        # a set of search paths are used on macOS in s_inter.c\n        wish=\"default search paths\"\n\n        # required for dlopen & weak linking for older macOS version support\n        macos_version_min=10.6\n    ],[\n        platform=iOS\n        locales=no\n        wish=\"not used\"\n    ])\n\n    # homebrew paths\n    AS_IF([test -e /usr/local],[\n        AM_CPPFLAGS=\"-I/usr/local/include $INCLUDES\"\n        PD_LDFLAGS=\"-L/usr/local/lib $PD_LDFLAGS\"\n    ])\n\n    # fink paths\n    AS_IF([test -e /sw],[\n        AM_CPPFLAGS=\"-I/sw/include $INCLUDES\"\n        PD_LDFLAGS=\"-L/sw/lib $PD_LDFLAGS\"\n    ])\n\n    # macports paths\n    AS_IF([test -e /opt/local],[\n        AM_CPPFLAGS=\"-I/opt/local/include $INCLUDES\"\n        PD_LDFLAGS=\"-L/opt/local/lib $PD_LDFLAGS\"\n    ])\n\n    EXTERNAL_LDFLAGS=\"-bundle -undefined dynamic_lookup\"\n],[*linux*|*kfreebsd*gnu*],[\n    # GNU/kFreeBSD are for Debian, were they are treated very similar to linux\n    AS_IF([test \"x${ANDROID}\" = \"xno\"],[\n        LINUX=yes\n        platform=Linux\n        deken_os=linux\n        portaudio=yes\n        watchdog=yes\n        EXTERNAL_CFLAGS=\"-fPIC\"\n        EXTERNAL_LDFLAGS=\"-Wl,--export-dynamic -fPIC\"\n        EXTERNAL_EXTENSION=pd_linux\n    ],[\n        platform=Android\n        EXTERNAL_EXTENSION=so\n    ])\n],[*-*-gnu*],[\n    HURD=yes\n    platform=Hurd\n    deken_os=linux\n    watchdog=yes\n    EXTERNAL_CFLAGS=\"-fPIC\"\n    EXTERNAL_LDFLAGS=\"-Wl,--export-dynamic -fPIC\"\n    EXTERNAL_EXTENSION=pd_linux\n],[*mingw*],[\n    WINDOWS=yes\n    MINGW=yes\n    platform=MinGW\n    deken_os=windows\n    mmio=yes\n    asio=yes\n    wasapi=yes\n    portaudio=yes\n    portmidi=yes\n\n    # this mirrors the default windows WISH define in s_inter.c\n    wish=\"wish85.exe\"\n\n    # externals need to be dynamically linked to pd.dll,\n    # but we need to check for --with-floatsize first (see below)\n    EXTERNAL_CFLAGS=\"-mms-bitfields\"\n    EXTERNAL_LDFLAGS=\"-Wl,--enable-auto-import -no-undefined\"\n    EXTERNAL_EXTENSION=dll\n\n    # workaround for rpl_malloc/rpl_realloc bug in autoconf when cross-compiling\n    ac_cv_func_malloc_0_nonnull=yes\n    ac_cv_func_realloc_0_nonnull=yes\n],[*cygwin*],[\n    WINDOWS=yes\n    CYGWIN=yes\n    platform=Cygwin\n    deken_os=windows\n    mmio=yes\n    asio=yes\n    wasapi=yes\n    portaudio=yes\n    portmidi=yes\n\n    # this mirrors the default windows WISH define in s_inter.c\n    wish=\"wish85.exe\"\n\n    # externals need to be dynamically linked to pd.dll,\n    # but we need to check for --with-floatsize first (see below)\n    EXTERNAL_CFLAGS=\n    EXTERNAL_LDFLAGS=\"-Wl,--export-dynamic\"\n    EXTERNAL_EXTENSION=dll\n],[*bsd*],[\n    BSD=yes\n    EXTERNAL_EXTENSION=so\n],[\n    platform=Unknown\n    EXTERNAL_EXTENSION=so\n])\n\nAS_IF([test \"x${deken_os}\" = \"xwindows\"],[deken_ext=dll])\n\n\nAS_CASE([$host_cpu],\n    [x86_64|amd64],[deken_cpu=amd64],\n    [i386|i486|i586|i686],[deken_cpu=i386],\n    [aarch64],[deken_cpu=arm64],\n    [armv*l],[deken_cpu=${host_cpu%l}],\n    [armv*b],[deken_cpu=${host_cpu}],\n    [powerpc64],[deken_cpu=ppc64],\n    [powerpc],[deken_cpu=ppc],\n    [])\n\n\nAM_CONDITIONAL(ANDROID, test x$ANDROID = xyes)\nAM_CONDITIONAL(IPHONEOS, test x$IPHONEOS = xyes)\nAM_CONDITIONAL(LINUX, test x$LINUX = xyes)\nAM_CONDITIONAL(HURD, test x$HURD = xyes)\nAM_CONDITIONAL(MACOSX, test x$MACOSX = xyes)\nAM_CONDITIONAL(WINDOWS, test x$WINDOWS = xyes)\nAM_CONDITIONAL(CYGWIN, test x$CYGWIN = xyes)\nAM_CONDITIONAL(MINGW, test x$MINGW = xyes)\nAM_CONDITIONAL(BSD, test x$BSD = xyes)\n\n#########################################\n##### Check for programs, libs, & headers #####\n\n# Configure libtool.\nAC_LIBTOOL_DLOPEN\nAC_LIBTOOL_WIN32_DLL\nAC_PROG_LIBTOOL\n\n# Checks for programs.\nAC_PROG_CC\nAC_PROG_CXX\nAC_PROG_INSTALL\nAC_PROG_MAKE_SET\nAC_PROG_LN_S\nAC_PROG_MKDIR_P\nAC_PROG_GREP\nAC_PROG_SED\nAC_CHECK_TOOL([WINDRES], [windres], [:])\n\n# Checks for header files.\nAC_HEADER_STDC\nAC_CHECK_HEADERS([fcntl.h \\\n                  limits.h \\\n                  malloc.h \\\n                  netdb.h \\\n                  netinet/in.h \\\n                  stddef.h \\\n                  stdlib.h \\\n                  string.h \\\n                  sys/ioctl.h \\\n                  sys/param.h \\\n                  sys/socket.h \\\n                  sys/time.h \\\n                  sys/timeb.h \\\n                  sys/utsname.h \\\n                  sys/filio.h \\\n                  unistd.h\n                  ])\n\nAC_CHECK_HEADERS([endian.h machine/endian.h])\n\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_TYPE_INT16_T\nAC_TYPE_INT32_T\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\n\n\nAC_CHECK_TYPE(off64_t, [AC_DEFINE([HAVE_OFF64_T], 1, [Define if we have the 'off64_t' type])], [], [[\n#define _LARGEFILE64_SOURCE\n#include <sys/types.h>\n#include <unistd.h>\n]])\nAC_CHECK_TYPE(sig_t, [], [AC_DEFINE([DONT_HAVE_SIG_T], 1, [Define if we do NOT have the 'sig_t' type])], [[\n#include <signal.h>\n]])\n\n# Checks for functions.\nAC_FUNC_ALLOCA\nAC_FUNC_ERROR_AT_LINE\nAC_FUNC_FORK\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\nAC_CHECK_FUNCS([dup2 \\\n                floor \\\n                getcwd \\\n                gethostbyname \\\n                gettimeofday \\\n                memmove \\\n                memset \\\n                pow \\\n                regcomp \\\n                select \\\n                socket \\\n                sqrt \\\n                strchr \\\n                strerror \\\n                strrchr \\\n                strstr \\\n                strtol\n                ])\n\ndnl qsort_r: do we have it, and if so, which variant?\nAC_CHECK_FUNCS_ONCE([qsort_r], [], [AC_DEFINE([STUPID_SORT], 1)])\nif test $ac_cv_func_qsort_r = yes; then\n  AC_CACHE_CHECK([for qsort_r signature], [ac_cv_libctf_qsort_r_signature],\n    [AC_LINK_IFELSE(\n       [AC_LANG_PROGRAM([[#undef qsort_r\n                          #include <stdlib.h>\n                          void qsort_r (void *, size_t, size_t,\n                                        int (*) (void const *, void const *,\n                                                 void *),\n                                        void *);\n                          void (*p) (void *, size_t, size_t,\n                                     int (*) (void const *, void const *,\n                                              void *),\n                                     void *) = qsort_r;\n                        ]])],\n       [ac_cv_libctf_qsort_r_signature=GNU],\n       [AC_LINK_IFELSE(\n          [AC_LANG_PROGRAM([[#undef qsort_r\n\t                     #include <stdlib.h>\n                             void qsort_r (void *, size_t, size_t, void *,\n                                           int (*) (void *,\n                                                    void const *,\n                                                    void const *));\n                             void (*p) (void *, size_t, size_t, void *,\n                                        int (*) (void *, void const *,\n                                                 void const *)) = qsort_r;\n                           ]])],\n          [ac_cv_libctf_qsort_r_signature=BSD],\n          [ac_cv_libctf_qsort_r_signature=unknown])])])\nfi\n\ncase x$ac_cv_libctf_qsort_r_signature in\n  xGNU)     AC_DEFINE([HAVE_QSORT_R_ARG_LAST], 1,\n\t     [Whether a qsort_r exists with a void *arg as its last arg.]);;\n  xBSD)     AC_DEFINE([HAVE_QSORT_R_COMPAR_LAST], 1,\n\t     [Whether a qsort_r exists with the compar function as its last arg.]);;\n  *)        AC_DEFINE([STUPID_SORT], 1);;\nesac\n\n# Checks for libraries.\nhave_dl=yes\nAC_SEARCH_LIBS([dlopen], [dl dld], [], [have_dl=no])\nAS_IF([test \"x${have_dl}\" = \"xyes\"], AC_DEFINE([HAVE_DLOPEN], 1))\n\nAC_CHECK_LIBM\n# AC_CHECK_LIBM computes LIBM but does not add to LIBS, hence we add it in\n# src/Makefile.am under pd_LDFLAGS as well\n\n# Checking for `pthread_create' function in libpthread (MinGW uses unusual names)\n## CHECK whether this can be replaced by AX_PTHREAD\nAC_SEARCH_LIBS([pthread_create], [pthread pthreadGC2 pthreadGC1 pthreadGC], [],\n               AC_MSG_WARN([pthreads required]))\n\n# Illumos needs to link against libsocket for 'sendto' and friends\nAC_SEARCH_LIBS([sendto], [socket])\n\n# Define variables for use in Makefiles\nAC_SUBST(EXTERNTARGET)\nAC_SUBST(EXTERNAL_EXTENSION)\nAC_SUBST(EXTERNAL_CFLAGS)\nAC_SUBST(EXTERNAL_LDFLAGS)\nAC_SUBST([OSS_LIBS])\nAC_SUBST([ALSA_LIBS])\nAC_SUBST([JACK_CFLAGS])\nAC_SUBST([JACK_LIBS])\n\n# Whether to strip symbol from binaries (msw_strip=\"\") or not (msw_strip=\"-n\") on windows. Used in msw/Makefile\nAC_SUBST([msw_strip])\n\n# pass include paths down to all Makefiles\nAC_SUBST([AM_CPPFLAGS], [$AM_CPPFLAGS])\n\n##### Build with debug flags? #####\nAC_ARG_ENABLE([debug],\n    [AS_HELP_STRING([--enable-debug], [use debugging support])],\n    [debug=$enableval], [debug=no])\nAS_IF([test x$debug = xyes],[\n    PD_CFLAGS=\"$DEBUG_CFLAGS $PD_CFLAGS\"\n],[\n    PD_CFLAGS=\"$RELEASE_CFLAGS $PD_CFLAGS\"\n    PD_CPPFLAGS=\"-DNDEBUG $PD_CPPFLAGS\"\n])\n\nAS_IF([test \"x${debug}\" = \"xyes\" -a \"x${WINDOWS}\" = \"xyes\" ],[\n    msw_strip=\"-n\"\n    ],[\n    msw_strip=\"\"\n    ])\n\n##### macOS version min #####\nAS_IF([test \"x$macos_version_min\" != \"x\"],[\n    PD_CFLAGS=\"-mmacosx-version-min=$macos_version_min $PD_CFLAGS\"\n])\n\n#########################################\n##### Configure Options #####\n\n\n##### realtime watchdog #####\nAC_ARG_ENABLE([watchdog],\n    [AS_HELP_STRING([--enable-watchdog], [additionally build watchdog])],,enable_watchdog=\"$watchdog\")\nAS_IF([test \"x$enable_watchdog\" != \"xyes\"],[enable_watchdog=no])\nAM_CONDITIONAL(PD_WATCHDOG, test x$enable_watchdog = xyes)\n\n###### floatsize ########\nAC_ARG_WITH([floatsize],\n    [AS_HELP_STRING([--with-floatsize=<SIZE>],\n    [build binaries for the given floatsize;\n    SIZE can be 32 (single precision) or 64 (double precision)\n    ]\n    )],\n    [floatsize=${withval}]\n    )\nAC_MSG_CHECKING([float size])\nAS_CASE([${floatsize}],\n    [32],[],\n    [64],[],\n    [\"\"],[],\n    [\n        AC_MSG_WARN([${floatsize}bit floats not supported...use fallback])\n        floatsize=\"\"\n    ])\nAS_IF([test \"x${floatsize}\" != \"x\" ],\n   [\n    PD_CPPFLAGS=\"-DPD_FLOATSIZE=${floatsize} $PD_CPPFLAGS\"\n    AC_MSG_RESULT([${floatsize}])\n   ],[AC_MSG_RESULT([default])\n   ])\n\nAS_IF([test \"x${floatsize}\" = \"x64\" && test \"x${deken_cpu}\" != \"x\" && test \"x${deken_os}\" != \"x\" && test \"x${deken_ext}\" != \"x\"],[\n      EXTERNAL_EXTENSION=\"${deken_os}-${deken_cpu}-${floatsize}.${deken_ext}\"\n      AC_MSG_NOTICE([default external extension...${EXTERNAL_EXTENSION}])\n      ])\n\npd_transform_name=$(echo ${program_transform_name} | sed -e 's|\\$\\$|$|')\npd_transformed=$(echo pd | sed -e \"${pd_transform_name}\")\n\nAS_CASE([${floatsize}],\n    [\"\"],[],\n    [32],[],\n    [\n      # if we specify a non-standard floatsize, make sure that the the program is also transformed.\n      # this is especially important on Windows (where we link against a pd.dll variant)\n      AS_IF([test \"${pd_transformed}\" = \"pd\" && test \"${have_program_transform_name}\" = \"no\"],[\n        program_transform_name=\"s/pd\\$\\$/pd${floatsize}/\"\n        pd_transform_name=$(echo ${program_transform_name} | sed -e 's|\\$\\$|$|')\n        pd_transformed=$(echo pd | sed -e \"${pd_transform_name}\")\n      ])])\n\n# on Windows, we need to link against a (floatsize-decorated) pd.dll\nAS_IF([test \"x${WINDOWS}\" = \"xyes\" ],[\n   EXTERNAL_LDFLAGS=\"${EXTERNAL_LDFLAGS} -l${pd_transformed}\"\n])\n\n##### libpd #####\nAC_ARG_ENABLE([libpd],\n    [AS_HELP_STRING([--enable-libpd], [additionally build libpd])])\nAC_ARG_ENABLE([libpd-utils],\n    [AS_HELP_STRING([--enable-libpd-utils], [enable utilities if building libpd])])\nAC_ARG_ENABLE([libpd-instance],\n    [AS_HELP_STRING([--enable-libpd-instance], [enable multi-instance support for libpd])])\nAC_ARG_ENABLE([libpd-extra],\n    [AS_HELP_STRING([--enable-libpd-extra], [include extra objects (sigmund~,pd~,...) in libpd])])\nAC_ARG_ENABLE([libpd-setlocale],\n    [AS_HELP_STRING([--disable-libpd-setlocale], [prevent libpd from calling setlocale() - if you need to control LC_NUMERIC manually ])])\n\nAM_CONDITIONAL(LIBPD, test x$enable_libpd = xyes)\nAM_CONDITIONAL(LIBPD_UTILS, test x$enable_libpd_utils = xyes)\nAM_CONDITIONAL(LIBPD_EXTRA, test x$enable_libpd_extra = xyes)\nAM_CONDITIONAL(LIBPD_MULTIINSTANCE, test x$enable_libpd_instance = xyes)\nAM_CONDITIONAL(LIBPD_NO_SETLOCALE, test x$enable_libpd_setlocale = xno)\n\n##### Universal/multi architecture build on macOS #####\nPD_CHECK_UNIVERSAL(ARCH, [universal=yes], [universal=no])\nAM_CONDITIONAL(UNIVERSAL, test x$universal = xyes)\nAS_IF([test x$universal = xyes],[\n    PD_CFLAGS=\"$ARCH_CFLAGS $PD_CFLAGS\"\n    PD_LDFLAGS=\"$ARCH_LDFLAGS $PD_LDFLAGS\"\n])\n\n##### Gettext #####\n# Gettext is needed to build language localizations.\nAC_ARG_ENABLE([locales],\n    [AS_HELP_STRING([--disable-locales],\n        [do not compile localizations (requires gettext)])],\n    [locales=$enableval])\nAS_IF([test x$locales = xyes],[\n    AC_CHECK_PROG(HAVE_MSGFMT, [msgfmt], yes, no)\n    AS_IF([test x$HAVE_MSGFMT = xno],[\n        AC_MSG_WARN([Install GNU gettext with msgfmt if you want localizations to be compiled!])\n        locales=no\n    ])\n])\nAM_CONDITIONAL(MSGFMT, test x$HAVE_MSGFMT = xyes)\n\n##### OSS #####\n# Cygwin has sys/soundcard.h but Pd isn't ready for Cygwin since it only\n# includes OSS for UNIX\nAC_ARG_ENABLE([oss],\n    [AS_HELP_STRING([--disable-oss], [do not use OSS driver])],\n    [oss=$enableval], [oss=yes])\nAS_IF([test x$oss = xyes],[\n    oss=no\n    AC_CHECK_HEADERS([sys/soundcard.h soundcard.h], [oss=yes; break])\n    AC_CHECK_LIB([ossaudio], [_oss_ioctl], [OSS_LIBS=\"-lossaudio\"])\n])\n\n##### ALSA #####\n# shouldn't we use AM_PATH_ALSA from /usr/share/aclocal/alsa.m4\n# alternatively we could use pkg-config\nAC_ARG_ENABLE([alsa],\n    [AS_HELP_STRING([--disable-alsa], [do not use ALSA audio driver])],\n    [alsa=$enableval], [alsa=yes])\nAS_IF([test x$alsa = xyes],[\n    AC_CHECK_LIB([asound], [snd_pcm_info], [ALSA_LIBS=\"-lasound\"], [alsa=no])\n])\n\n##### JACK FRAMEWORK #####\n# on macOS, use the JackOSX.com Jackmp.framework not the jack lib by default\n# this is set in src/Makefile.am based on the JACK & JACK_FRAMEWORK vars\nAC_ARG_ENABLE([jack-framework],\n    [AS_HELP_STRING([--disable-jack-framework],\n        [do not weak link to Jackmp.framework on macOS])],\n    [jack_framework=$enableval])\ntest x$MACOSX = xyes || jack_framework=no\nAS_IF([test x$jack_framework = xyes],[\n    AC_MSG_NOTICE([Weak linking to Jackmp.framework])\n])\n\n##### JACK #####\nAC_ARG_ENABLE([jack],\n    [AS_HELP_STRING([--enable-jack], [use JACK audio server])],\n    [jack=$enableval], [jack=no])\nAS_IF([test x$jack_framework != xyes -a x$jack = xyes],[\n    AS_IF([pkg-config --exists jack],[\n        AC_MSG_NOTICE([Using JACK as specified by pkg-config])\n        JACK_CFLAGS=$(pkg-config --cflags jack)\n        JACK_LIBS=$(pkg-config --libs jack)\n        jack=yes\n        ],[\n        AC_CHECK_LIB([rt], [shm_open], [LIBS=\"$LIBS -lrt\"])\n        AC_CHECK_LIB([jack], [jack_set_xrun_callback], [JACK_LIBS=\"-ljack\" ; jack=xrun])\n        AC_CHECK_LIB([jack], [jack_set_error_function], [JACK_LIBS=\"-ljack\" ; jack=yes],\n            [AC_MSG_WARN([JACK development files not found... skipping (See INSTALL.txt)])\n            jack=no])\n        ])\n])\n\n##### MMIO #####\nAC_ARG_ENABLE([mmio],\n    [AS_HELP_STRING([--disable-mmio], [do not use MMIO driver])],\n    [mmio=$enableval])\ntest x$WINDOWS = xyes || mmio=no\n\n##### ASIO #####\nAC_ARG_ENABLE([asio],\n    [AS_HELP_STRING([--enable-asio], [use ASIO audio driver])],\n    [asio=$enableval])\ntest x$WINDOWS = xyes || asio=no\nAS_IF([test x$asio = xyes],\n    test -f \"${srcdir}\"/asio/ASIOSDK/common/asio.h || asio=no\n    AS_IF([test x$asio = xno],\n        AC_MSG_WARN([ASIO SDK not found... skipping (See asio/README.txt)]))\n)\n\n#### WASAPI ####\nAC_ARG_ENABLE([wasapi],\n    [AS_HELP_STRING([--disable-wasapi], [do not use WASAPI backend])],\n    [wasapi=$enableval])\ntest x$WINDOWS = xyes || wasapi=no\n\n##### Apple's CoreAudio #####\n# not used directly, implicitly needed when using PortAudio on OSX\nAC_CHECK_HEADER(CoreAudio/CoreAudio.h, [coreaudio=yes], [coreaudio=no])\n\n##### PortAudio #####\nAC_ARG_ENABLE([portaudio],\n    [AS_HELP_STRING([--disable-portaudio], [do not use portaudio])],\n    [portaudio=$enableval])\nAC_ARG_WITH([local-portaudio],\n    [AS_HELP_STRING([--without-local-portaudio],\n        [do not use the portaudio included with Pd])],\n    [local_portaudio=$withval])\nAS_IF([test x$portaudio = xyes],[\n    AS_IF([test x$local_portaudio = xno],[\n        # fall back to local portaudio if not foud\n        AC_CHECK_LIB([portaudio], [Pa_Initialize],\n            [AC_MSG_NOTICE([Using system PortAudio])], [local_portaudio=yes])\n    ])\n    AS_IF([test x$local_portaudio = xyes],[\n        AS_IF([test -d \"$srcdir/portaudio\"],[\n            AC_MSG_NOTICE([Using included PortAudio])\n        ],[\n            AC_MSG_WARN([PortAudio not found in Pd source directory])\n            portaudio=no\n        ])\n    ])\n],[local_portaudio=no])\n\n##### PortMidi #####\nAC_ARG_ENABLE([portmidi],\n    [AS_HELP_STRING([--enable-portmidi], [use portmidi])],\n    [portmidi=$enableval])\nAC_ARG_WITH([local-portmidi],\n    [AS_HELP_STRING([--without-local-portmidi],\n        [do not use the portmidi included with Pd])],\n    [local_portmidi=$withval])\n# don't allow portmidi if already using oss\nAS_IF([test x$oss = xyes -a x$portmidi != xno],\n  [AC_MSG_WARN([Cannot enable both OSS-midi and PortMidi... preferring OSS])\n  portmidi=no])\nAS_IF([test x$portmidi = xyes],[\n    AS_IF([test x$local_portmidi = xno],[\n        # fall back to local portmidi if not foud\n        AC_CHECK_LIB([portmidi], [Pm_Initialize],\n            [AC_MSG_NOTICE([Using system PortMidi])], [local_portmidi=yes])\n    ])\n    AS_IF([test x$local_portmidi = xyes],[\n        AS_IF([test -d \"$srcdir/portmidi\"],[\n            AC_MSG_NOTICE([Using included PortMidi])\n        ],[\n            AC_MSG_WARN([PortMidi not found in Pd source directory])\n            portmidi=no\n        ])\n    ])\n],[local_portmidi=no])\n\n##### fftw v3 #####\nAC_ARG_ENABLE([fftw],\n    [AS_HELP_STRING([--enable-fftw], [use FFTW package])],\n    [fftw=$enableval], [fftw=no])\nAS_IF([test x$fftw = xyes],[\n    AC_CHECK_LIB([fftw3f], [fftwf_execute],\n        [LIBS=\"$LIBS -lfftw3f\"],\n        [AC_MSG_WARN([FFTW development files not found... using built-in FFT])\n        fftw=no])\n])\nAM_CONDITIONAL(FFTW, test x$fftw = xyes)\n\n##### Wish #####\nAC_ARG_WITH([wish],\n    [AS_HELP_STRING([--with-wish=WISH],\n        [which Tk Wish application to use for the Pd GUI])],\n    [WISH=$withval])\nAS_IF([test \"x${WISH}\" = \"xyes\" -o \"x${WISH}\" = \"xno\"],\n    [AC_MSG_NOTICE([--with-wish requires an application, ignoring '${WISH}'])\n    WISH=\"\"])\nAC_SUBST([WISH])\n\n##### Deken OS and CPU #####\nAC_ARG_WITH([deken-os],\n    [AS_HELP_STRING([--with-deken-os=<OS>],\n        [Operating System string to use for externals (e.g. Linux, Windows, Darwin,...)])],\n    [DEKEN_OS=$withval])\nAS_IF([test \"x${DEKEN_OS}\" = \"xyes\" -o \"x${DEKEN_OS}\" = \"xno\"],\n    [AC_MSG_NOTICE([--with-deken-os requires an Operating System, ignoring '${DEKEN_OS}'])\n    DEKEN_OS=\"\"])\nAC_SUBST([DEKEN_OS])\nAS_IF([test \"x${DEKEN_OS}\" != \"x\"], [deken_os=\"${DEKEN_OS}\"])\n\nAC_ARG_WITH([deken-cpu],\n    [AS_HELP_STRING([--with-deken-cpu=<CPU>],\n        [CPU architecture string to use for externals (e.g. amd64, i386, arm64,...)])],\n    [DEKEN_CPU=$withval])\nAS_IF([test \"x${DEKEN_CPU}\" = \"xyes\" -o \"x${DEKEN_CPU}\" = \"xno\"],\n    [AC_MSG_NOTICE([--with-deken-cpu requires a CPU, ignoring '${DEKEN_CPU}'])\n    DEKEN_CPU=\"\"])\nAC_SUBST([DEKEN_CPU])\nAS_IF([test \"x${DEKEN_CPU}\" != \"x\"], [deken_cpu=\"${DEKEN_CPU}\"])\n\nAC_ARG_WITH([external-extension],\n    [AS_HELP_STRING([--with-external-extension=<EXT>],\n        [Extension to use for externals in extra/ (e.g. pd_linux, dll, d_fat,...)])],\n    [ext=\"${withval#.}\"])\nAS_IF([test \"x${ext}\" = \"xyes\" -o \"x${ext}\" = \"xno\"],\n    [AC_MSG_NOTICE([--with-external-extension requires an extension, ignoring '${ext}'])\n    ext=\"\"])\nAS_IF([test \"x${ext}\" != \"x\"], [EXTERNAL_EXTENSION=\"${ext}\"])\n\n\n\n##### Configure Build From Options #####\n## configure the build based on what we have found above\n\n##### OSS #####\n# Cygwin has a function OSS /dev/dsp, but not MIDI,\n# and Pd is only set up to handle a single MIDI API\nAS_IF([test x$WINDOW = xyes -a x$oss != xno],\n  [AC_MSG_WARN([OSS not working on W32... disabling]) ; oss=no])\nAM_CONDITIONAL(OSS, test x$oss = xyes)\nAS_IF([test x$oss = xyes], [audio_backends=\"OSS ${audio_backends}\"])\nAS_IF([test x$oss = xyes], [midi_backends=\"OSS ${midi_backends}\"])\n\n##### ALSA #####\nAM_CONDITIONAL(ALSA, test x$alsa = xyes)\nAS_IF([test x$alsa = xyes], [audio_backends=\"ALSA ${audio_backends}\"])\nAS_IF([test x$alsa = xyes], [midi_backends=\"ALSA ${midi_backends}\"])\n\n##### JACK #####\nAM_CONDITIONAL(JACK, test x$jack = xyes)\nAM_CONDITIONAL(JACK_FRAMEWORK, test x$jack_framework = xyes)\nAS_IF([test x$jack = xyes], [audio_backends=\"JACK ${audio_backends}\"])\n\n##### MMIO #####\nAM_CONDITIONAL(MMIO, test x$mmio = xyes)\nAS_IF([test x$mmio = xyes], [audio_backends=\"MMIO ${audio_backends}\"])\ndnl AS_IF([test x$mmio = xyes], [midi_backends=\"MMIO ${midi_backends}\"])\n\n##### ASIO #####\nAM_CONDITIONAL(ASIO, test x$asio = xyes)\nAS_IF([test x$asio = xyes], [audio_backends=\"ASIO ${audio_backends}\"])\n\n##### WASAPI #####\nAM_CONDITIONAL(WASAPI, test x$wasapi = xyes)\nAS_IF([test x$wasapi = xyes], [audio_backends=\"WASAPI ${audio_backends}\"])\n\n##### CoreAudio #####\n# portaudio doesn't work with iOS, so don't bother with CoreAudio\nAS_IF([test x$IPHONEOS = xyes -a x$coreaudio != xno],\n  [AC_MSG_WARN([PortAudio not working on iOS... disabling CoreAudio])\n  coreaudio=no])\nAM_CONDITIONAL(COREAUDIO, test x$coreaudio = xyes)\n\n##### PortAudio #####\nAM_CONDITIONAL(PORTAUDIO, test x$portaudio = xyes)\nAM_CONDITIONAL(LOCAL_PORTAUDIO, test x$local_portaudio = xyes)\nAS_IF([test x$portaudio = xyes], [audio_backends=\"PortAudio ${audio_backends}\"])\n\n##### PortMidi #####\nAM_CONDITIONAL(PORTMIDI, test x$portmidi = xyes)\nAM_CONDITIONAL(LOCAL_PORTMIDI, test x$local_portmidi = xyes)\nAS_IF([test x$portmidi = xyes], [midi_backends=\"PortMidi ${midi_backends}\"])\n\n##### DUMMY #####\n# warn if we end up trying to build without an audio or midi api\nAM_CONDITIONAL(AUDIO_DUMMY, test \"x$audio_backends\" = \"x\")\nAS_IF([test \"x$audio_backends\" = \"x\"],[\n    AC_MSG_WARN([No audio API specified or detected])\n    audio_backends=\"NONE!\"\n])\n# we need the dummy MIDI backend, if there is no other backend providing the\n# standard MIDI-functions (OSS and PortMidi provide them; ALSA not)\nneeds_midi_dummy=\"yes\"\nAS_IF([echo \"${midi_backends}\" | grep -wi OSS >/dev/null],[needs_midi_dummy=\"no\"])\nAS_IF([echo \"${midi_backends}\" | grep -wi PortMidi >/dev/null],[needs_midi_dummy=\"no\"])\n\nAM_CONDITIONAL(MIDI_DUMMY, test \"x${needs_midi_dummy}\" = \"xyes\")\nAS_IF([test \"x$midi_backends\" = \"x\"],[\n    AC_MSG_WARN([No MIDI API specified or detected])\n    midi_backends=\"NONE!\"\n])\n\n##### Wish #####\n# add contextual info when adding a custom WISH path on macOS,\n# other platforms use a single path so it's enough to print $wish as it is\nAS_IF([test ! \"x${WISH}\" = \"x\"],[\n    AS_IF([test x\"$MACOSX\" = x\"yes\"], [\n        wish=\"prepending ${WISH} to search paths\"\n    ],[\n        wish=\"${WISH}\"\n    ])\n])\n\n##### libpd #####\nAS_IF([test \"x${enable_libpd}\" = \"xyes\"],[\n    libpd=\"yes\"\n    libpd_=\"\"\n    AS_IF([test \"x${enable_libpd_instance}\" = \"xyes\"],[ libpd_=\"${libpd_}+multi \"])\n    AS_IF([test \"x${enable_libpd_utils}\" = \"xyes\"],[ libpd_=\"${libpd_}+utils \"])\n    AS_IF([test \"x${enable_libpd_extra}\" = \"xyes\"],[ libpd_=\"${libpd_}+extra \"])\n    AS_IF([test \"x${enable_libpd_setlocale}\" = \"xno\"],[ libpd_=\"${libpd_}-setlocale \"])\n    AS_IF([test \"x${libpd_}\" != \"x\"],[ libpd=\"${libpd} ( ${libpd_})\"])\n],[\n    libpd=\"no\"\n])\n\n# pass common flags via @PD_*@ AM variables for use in Makefiles\nAC_SUBST(PD_CPPFLAGS)\nAC_SUBST(PD_CFLAGS)\nAC_SUBST(PD_LDFLAGS)\n\n#########################################\n##### Output files #####\n\n# Specify what files are to be created.\nAC_CONFIG_FILES([Makefile\n                asio/Makefile\n                doc/Makefile\n                font/Makefile\n                linux/Makefile\n                mac/Makefile\n                man/Makefile\n                msw/Makefile\n                portaudio/Makefile\n                portmidi/Makefile\n                tcl/Makefile\n                tcl/pd-gui\n                po/Makefile\n                src/Makefile\n                extra/Makefile\n                extra/bob~/GNUmakefile\n                extra/bonk~/GNUmakefile\n                extra/choice/GNUmakefile\n                extra/fiddle~/GNUmakefile\n                extra/loop~/GNUmakefile\n                extra/lrshift~/GNUmakefile\n                extra/pd~/GNUmakefile\n                extra/pique/GNUmakefile\n                extra/sigmund~/GNUmakefile\n                extra/stdout/GNUmakefile\n                pd.pc\n                ])\nAC_OUTPUT\n\n#########################################\n##### Print a summary for the user #####\n\nAC_MSG_NOTICE([\n\n    ${PACKAGE} ${VERSION} is now configured\n\n    Platform:             ${platform}\n    Float size:           ${floatsize:-default}\n    Debug build:          ${debug}\n    Universal build:      ${universal}\n    Localizations:        ${locales}\n    Source directory:     ${srcdir}\n    Installation prefix:  ${prefix}\n\n    Compiler:             ${CC}\n    CPPFLAGS:             ${PD_CPPFLAGS} ${CPPFLAGS}\n    CFLAGS:               ${PD_CFLAGS} ${CFLAGS}\n    LDFLAGS:              ${PD_LDFLAGS} ${LDFLAGS}\n    INCLUDES:             ${AM_CPPFLAGS}\n    LIBS:                 ${LIBS}\n\n    External extension:   ${EXTERNAL_EXTENSION}\n    External CFLAGS:      ${EXTERNAL_CFLAGS}\n    External LDFLAGS:     ${EXTERNAL_LDFLAGS}\n    Deken identifier:     ${deken_os:-???}-${deken_cpu:-???}\n\n    fftw:                 ${fftw}\n    wish(tcl/tk):         ${wish}\n    watchdog:             ${enable_watchdog}\n    audio APIs:           ${audio_backends}\n    midi APIs:            ${midi_backends}\n    libpd:                ${libpd}\n])\n\nAS_IF([test \"x${enable_locales}\" = xyes -a \"x${locales}\" = xno ],\n AC_MSG_WARN([localization requested but no GNU gettext with msgfmt found... disabled]))\nAS_IF([test \"x${enable_oss}\" = xyes -a \"x${oss}\" = xno ],\n AC_MSG_WARN([OSS requested but no development files found... disabled]))\nAS_IF([test \"x${enable_alsa}\" = xyes -a \"x${alsa}\" = xno ],\n AC_MSG_WARN([ALSA requested but no development files found... disabled (See INSTALL.txt)]))\nAS_IF([test \"x${enable_jack}\" = xyes -a \"x${jack}\" = xno ],\n AC_MSG_WARN([JACK requested but no development files found... disabled (See INSTALL.txt)]))\nAS_IF([test \"x${enable_jack_framework}\" = xyes -a \"x${jack_jack}\" != xyes ],\n AC_MSG_WARN([JACK-Framework requested but no development files found... disabled (See INSTALL.txt)]))\nAS_IF([test \"x${enable_mmio}\" = xyes -a \"x${mmio}\" = xno ],\n AC_MSG_WARN([MMIO requested but not available... disabled (requires Windows)]))\nAS_IF([test \"x${enable_asio}\" = xyes -a \"x${asio}\" = xno ],\n AC_MSG_WARN([ASIO requested but no SDK found... disabled (see asio/README.txt)]))\n\n# TODO portaudio\n\nAS_IF([test \"x${enable_fftw}\" = xyes -a \"x${fftw}\" = xno ],\n AC_MSG_WARN([FFTW requested but no development files found... disabled]))\n\nAS_CASE([${floatsize}],\n    [\"\"],[],\n    [32],[],\n    [\n      AS_IF([test \"${pd_transformed}\" = \"pd\"],[\n        AC_MSG_WARN([Using a non-standard floatsize without name-mangling.\n        You should use something like \"--program-suffix=${floatsize}\"?\n        ])\n      ])])\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "font",
          "type": "tree",
          "content": null
        },
        {
          "name": "libpd",
          "type": "tree",
          "content": null
        },
        {
          "name": "linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "mac",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "md",
          "type": "tree",
          "content": null
        },
        {
          "name": "msw",
          "type": "tree",
          "content": null
        },
        {
          "name": "pd.pc.in",
          "type": "blob",
          "size": 0.5537109375,
          "content": "# Pure data pkg-config file\n# LATER: shouldn't \"--libs\" output all flags for building an external?\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\n###############################\n# variables\n# the default file-extension for externals (e.g. \"pd_linux\")\nextension=@EXTERNAL_EXTENSION@\n# where to install externals\nexternaldir=${libdir}/pd/extra\n\n###############################\n# core configuration\nName: pd\nDescription: Pure Data\nVersion: @PACKAGE_VERSION@\nCflags: -I${includedir}/pd -DPD @EXTERNAL_CFLAGS@\nLibs: @EXTERNAL_LDFLAGS@\n"
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "portaudio",
          "type": "tree",
          "content": null
        },
        {
          "name": "portmidi",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tcl",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}