{
  "metadata": {
    "timestamp": 1736710132947,
    "page": 780,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libharu/libharu",
      "stars": 1795,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4208984375,
          "content": "Makefile\nMakefile.in\nacconfig.h\naclocal.m4\nautom4te.cache\nbuildmk.stamp\nconfig.h.in\nconfig.cache\nconfig.log\nconfig.status\nmeta_cc\nmeta_ccld\nmkinstalldirs\nmissing\ninstall-sh\n*.lo\n*.la\n.deps\n*.plg\n*.opt\n*.ncb\n.libs\n_libs\n*.o\n*.a\n*.tmp\n*.so\n*.so.*\ncscope.out\nconfig.guess\nconfig.sub\nconfigure\nconfigure.in~\nlibtool\nltmain.sh\n_configs.sed\nCMakeCache.txt\nCMakeFiles\nCPackConfig.cmake\nCPackSourceConfig.cmake\ncmake_install.cmake\ndepcomp\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 5.91015625,
          "content": "libHaru news\r\n-------------------------------------------------------------------------------\r\n\r\nVersion 2.3.0 RC2 (2011.10.12)\r\n- Changed package naming, no other changes.\r\n\r\nVersion 2.3.0 RC1 (2011.09.28)\r\n\r\n- Added support for 3dMeasures of subtype PD3 and 3DC, projection annotations, \r\n  ExData and javascript attached to a U3D model. (Robert Würfel)\r\n- Added support for 1- and 2-byte UTF8 codes. (Clayman)\r\n- Added full PDF/A1-b support. (Petr Pytelka)\r\n- Added support for CCITT compression for B/W images. (Petr Pytelka)\r\n- Add support for TwoPageLeft and TwoPageRight layouts. (Vincent Dupont)\r\n\r\n- Const-ified arrays used in the sources. (Ilkka Lehtoranta)\r\n\r\n- Fixed build with libpng 1.5.0\r\n- Fixed bug in HPDF_GetContents() - isize variable was not initialized. \r\n  (Vincent Dupont)\r\n- Fixed possible endless loop in PNG handling code.\r\n  (reported by Mathew Waters)\r\n- Fixed several issues based on the warnings generated by clang-analyzer.\r\n  (Daniel Höpfl)\r\n- Fixed quite a number of warnings. (Davide Achilli)\r\n- Added 'd' postfix to debug build, fixed wrong filename. (Wim Dumon)\r\n- Fixed HPDF_Text_Rect() not to split words in some obscure cases.\r\n\r\nVersion 2.2.0 (2010.10.12)\r\n\r\n - Greatly improved U3D support (Nikhil Soman)\r\n    - Markup Annotations\r\n    - Free Text Annotations\r\n    - Line Annotations\r\n    - Circle and Squre Annotations\r\n    - Text Markup Annotations\r\n    - Rubber Stamp Annotations\r\n    - Popup Annotations\t\r\n\r\n - Added VB.Net bindings. (Matt Underwood) \r\n - Added CMake build system (experimental). (Werner Smekal) \r\n - Added preliminary ICC support. (vbrasseur at gmail dot com)\r\n\r\n - Added HPDF_Image_AddSMask(). (patch by Adam Blokus)\r\n - Added HPDF_LoadPngImageFromMem() and HPDF_LoadJpegImageFromMem(). \r\n   (patch by Adam Blokus)\r\n - Added HPDF_GetContents().\r\n - Added HPDF_Page_SetZoom().\r\n - Added support for CMYK in HPDF_Image_LoadRawImageFromMem().\r\n\r\n - Applied a bunch of fixes and improvements from bug report #13.\r\n - HPDF_Page_TextRect() corrections and improvements. (Ralf Junker)\r\n - Fixed build failure when zlib was not found. (Werner Smekal)\r\n - Fixed build with newer libtool versions.\r\n - Fixed external build. (thanks to Jeremiah Willcock)\r\n - Fixed memleak in HPDF_EmbeddedFile_New(). (Ralf Junker) \r\n - Fixed uninitialized fields in HPDF_Type1FontDef_New(). (Ralf Junker)\r\n - Fixed issue with grayscale PNG images. (Ralf Junker)\r\n - Fixed missing parentheses from empty string object. (Ralf Junker)\r\n\r\n - Fixed bug #21 (Build fails on Win CE because of errno and errno.h usage).\r\n - Fixed bug #18 (Missing compiler flag -fexceptions)\r\n - Fixed bug #11 (sqrtf() is missing on Winblows).\r\n - Fixed bug #10 (missing HPDF_LoadPngImageFromMem from win32/msvc/libhpdf.def).\r\n - Fixed bug #7 (HPDF_String_SetValue() is declared twice).\r\n - Fixed bug #6 (possible NULL dereference in HPDF_LoadPngImageFromFile2()).\r\n - Fixed bug #5 (possible NULL dereference in HPDF_LoadRawImageFromFile()).\r\n - Fixed bug #4 (possible NULL dereference in HPDF_AToI()).\r\n - Fixed bug #2 (Ruby binding: hpdf_insert_page has stray printf).\r\n\r\nVersion 2.1.0 (2008.05.27)\r\n - Added initial support for Alpha channel in RGB and palette-based PNG images.\r\n - Added HPDF_GetTTFontDefFromFile() function. This closes [FR #1604475] (HPDF_FONT_EXISTS not error) \r\n - Added FreeBasic bindings. (Klaus Siebke)\r\n - Added Python bindings. (Li Jun)\r\n - Added U3D support. (Michail Vidiassov)\r\n\r\n - Changed the build system to use autotools.\r\n\r\n - Fixed bug #1682456 (NULL dereference in LoadType1FontFromStream()). \r\n - Fixed bug #1628096 (NULL pointer may be dereferenced).\r\n\r\nVersion 2.0.8 (2006.11.25)\r\n - Fixed a problem of HPDF_Circle() which causes buffer overflow. \r\n - Added HPDF_Ellipse().\r\n\r\nVersion 2.0.7 (2006.11.05)\r\n - Fixed a bug of HPDF_Annotation_New() (the values of bottom and top are set \r\n  upside down).\r\n - Added HPDF_Page_GetCurrentPos2(), HPDF_Page_GetCurrentTextPos2() and\r\n  HPDF_Image_GetSize2().\r\n\r\nVersion 2.0.6 (2006.10.16)\r\n - Added opacity and blend-mode features.\r\n - Added slide-show functions (contributed by Adrian Nelson). \r\n - Added an interface for VB6 (contributed by Ko, Chi-Chih).\r\n - Fixed a bug that HPDF_MemStream_Rewrite() may cause segmentation fault.\r\n - Fixed a bug of error checking of HPDF_Page_Concat().\r\n - Fixed a bug of calculation for the position of text showing.\r\n\r\nVersion 2.0.5 (2006.09.20)\r\n - Fixed a bug that an image which loaded by HPDF_LoadRawImageFromFile() or \r\n  HPDF_LoadRawImageFromMem() is not compressed.\r\n - Added C# interface.\r\n - Added viewer-preference feature.\r\n - Fixed a bug that HPDF_SetPassword does not raise error when NULL string set\r\n  to owner-password.\r\n - Fixed a bug that causes program crash when using interlaced PNG images.\r\n\r\nVersion 2.0.4 (2006.08.25)\r\n - Fixed a bug of the TrueType font feature related to composite glyph.\r\n\r\nVersion 2.0.3 (2006.08.20)\r\n - Fixed a bug that HPDF_Page_TextRect() always returns \r\n  HPDF_PAGE_INSUFFICIENT_SPACE.\r\n - Added delayed loading function for a png image (HPDF_LoadPngImageFromFile2).\r\n *change HPDF_SaveToStream function.\r\n *correct hpdf_ttfontdef.c to avoid warning from a compiler.\r\n\r\nVersion 2.0.2\r\n - Modified HPDF_Page_ShowTextNextLine() to invoking HPDF_Page_MoveToNextLine()\r\n  if it is invoked with null or zero-length text.\r\n - Fixed a bug in which HPDF_Page_MeasureText() returns wrong value when using \r\n  CID fonts.\r\n - Changed the feature of HPDF_Page_MeasureText().\r\n - Added Japanese word wrap feature to HPDF_Page_MeasureText() and \r\n  HPDF_Page_TextRect().\r\n - Fixed typos of HPDF_PageLayout values.\r\n - Modified options of makefile for BCC32 to multi-thread.\r\n  rebuild libz.a, libpng.a for BCC32 with -WM option.\r\n\r\nVersion 2.0.1a (2006-08-03)\r\n - Fixed a bug that HPDFPage::draw_image does not work correctly. (Ruby module \r\n  only.)\r\n\r\nVersion 2.0.1 (2006-07-29)\r\n - Fixed a bug that HPDF_TextRect() does not work correctly when using CID fonts.\r\n - Added HPDF_Font_GetAscent(), HPDF_Font_GetDescent(), HPDF_Font_GetXHeight(),\r\n  HPDF_Font_GetCapHeight().\r\n\r\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 5.244140625,
          "content": "cmake_minimum_required(VERSION 3.10)\n\nfile(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/include/hpdf_version.h HPDF_VERSION_H_CONTENTS REGEX \" HPDF_(MAJOR|MINOR|BUGFIX)_VERSION \")\nstring(REGEX MATCH \"MAJOR_VERSION [0-9]+\"  HPDF_MAJOR_VERSION  ${HPDF_VERSION_H_CONTENTS})\nstring(REGEX MATCH \"MINOR_VERSION [0-9]+\"  HPDF_MINOR_VERSION  ${HPDF_VERSION_H_CONTENTS})\nstring(REGEX MATCH \"BUGFIX_VERSION [0-9]+\" HPDF_BUGFIX_VERSION ${HPDF_VERSION_H_CONTENTS})\nstring(REGEX MATCH \"[0-9]+\" HPDF_MAJOR_VERSION  ${HPDF_MAJOR_VERSION})\nstring(REGEX MATCH \"[0-9]+\" HPDF_MINOR_VERSION  ${HPDF_MINOR_VERSION})\nstring(REGEX MATCH \"[0-9]+\" HPDF_BUGFIX_VERSION ${HPDF_BUGFIX_VERSION})\n\nproject(libharu\n    VERSION ${HPDF_MAJOR_VERSION}.${HPDF_MINOR_VERSION}.${HPDF_BUGFIX_VERSION}\n    DESCRIPTION \"libHaru is a free, cross platform, open source library for generating PDF files.\"\n    LANGUAGES C)\n\ninclude(GNUInstallDirs)\n\n\n# Location where the haru cmake build system first looks for cmake modules\nset(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)\n\n# =======================================================================\n# command line options\n# =======================================================================\noption(BUILD_SHARED_LIBS \"Build shared libraries (.dll/.so) instead of static ones (.lib/.a)\" ON)\noption(LIBHPDF_EXAMPLES \"Build libharu examples\" OFF)\noption(LIBHPDF_DEBUG \"Enable HPDF Debug\")\noption(LIBHPDF_DEBUG_TRACE \"Enable HPDF Debug trace\")\n\n# Enable exceptions on linux if required\n# (eg if you are using libharu in a C++ environment,\n# and you want your error-callback to throw an exception,\n# you will need to enable this for the exception to be\n# able to throw through the libharu callstack).\nif (CMAKE_COMPILER_IS_GNUCC OR (\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Clang\"))\n   option (LIBHPDF_ENABLE_EXCEPTIONS \"Enable exceptions\" NO)\n   if (LIBHPDF_ENABLE_EXCEPTIONS)\n      set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fexceptions\")\n   endif (LIBHPDF_ENABLE_EXCEPTIONS)\nendif ()\n\ninclude_directories(${PROJECT_SOURCE_DIR}/include)\n\n# =======================================================================\n# look for headers and libraries\n# =======================================================================\ninclude(haru)\ninclude(summary)\n\n# check zlib availability\nfind_package(ZLIB)\n\n# check png availability\nfind_package(PNG)\n\n# Find math library, sometimes needs to be explicitly linked against\nfind_library(M_LIB m)\n\n# =======================================================================\n# configure header files, add compiler flags\n# =======================================================================\n# add definitions and directories to include\n#if(CMAKE_COMPILER_IS_GNUCC)\n#  add_definitions(\"-Wall\")\n#endif(CMAKE_COMPILER_IS_GNUCC)\nif(MSVC_VERSION GREATER 1399)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_DEPRECATE)\nendif(MSVC_VERSION GREATER 1399)\n\n# Will export symbols to a .lib file on Windows\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS 1)\n\n# Just set to 1, we'll assume they are always available.\n# If not, then someone will have to add some tests in here to correctly determine\n# the headers existence.\nset (LIBHPDF_STDC_HEADERS 1)\n\n# support all of the different variations of LIBPNG defines in HARU\nset (LIBHPDF_HAVE_LIBPNG ${PNG_FOUND})\n\n# support different zlib defines\nset (LIBHPDF_HAVE_ZLIB ${ZLIB_FOUND})\n\n# create hpdf_config.h\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/include/hpdf_config.h.cmake\n  ${PROJECT_BINARY_DIR}/include/hpdf_config.h\n)\ninclude_directories(${PROJECT_BINARY_DIR}/include)\n\n# =======================================================================\n# create library and demos\n# =======================================================================\nadd_subdirectory(src)\nif(LIBHPDF_EXAMPLES)\n    add_subdirectory(demo)\nendif(LIBHPDF_EXAMPLES)\n\n# =======================================================================\n# installation configuration\n# =======================================================================\nset(\n  haru_HDRS\n    include/hpdf.h\n    include/hpdf_types.h\n    include/hpdf_consts.h\n    include/hpdf_annotation.h\n    include/hpdf_catalog.h\n    include/hpdf_conf.h\n    include/hpdf_destination.h\n    include/hpdf_doc.h\n    include/hpdf_encoder.h\n    include/hpdf_encrypt.h\n    include/hpdf_encryptdict.h\n    include/hpdf_error.h\n    include/hpdf_ext_gstate.h\n    include/hpdf_font.h\n    include/hpdf_fontdef.h\n    include/hpdf_gstate.h\n    include/hpdf_image.h\n    include/hpdf_info.h\n    include/hpdf_list.h\n    include/hpdf_mmgr.h\n    include/hpdf_namedict.h\n    include/hpdf_objects.h\n    include/hpdf_outline.h\n    include/hpdf_pages.h\n    include/hpdf_page_label.h\n    include/hpdf_streams.h\n    include/hpdf_u3d.h\n    include/hpdf_utils.h\n    include/hpdf_pdfa.h\n    include/hpdf_3dmeasure.h\n    include/hpdf_exdata.h\n    include/hpdf_version.h\n    ${PROJECT_BINARY_DIR}/include/hpdf_config.h\n)\n\n# install header files\ninstall(FILES ${haru_HDRS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\n# install various files\ninstall(FILES README.md CHANGES INSTALL DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/libharu)\ninstall(DIRECTORY bindings DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/libharu)\n\n# =======================================================================\n# print out some information\n# =======================================================================\nsummary()\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.8203125,
          "content": "Installation\n------------\n\nInstalling libHaru on Linux/Unix is as easy as this:\n./configure && make && make install\n\nIf you're using a Git checkout or a Github tarball, \ndon't forget to run ./buildconf.sh in order to create \n./configure script.\n\nSee more detailed instructions here:\nhttps://github.com/libharu/libharu/wiki/Installation\n\nAlternatively, you can build and install libHaru using [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install libharu\n\nThe libHaru port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.888671875,
          "content": "\nCopyright (C) 1999-2006 Takeshi Kanno\nCopyright (C) 2007-2009 Antony Dovgal\n\nThis software is provided 'as-is', without any express or implied warranty.\n\nIn no event will the authors be held liable for any damages arising from the \nuse of this software.\n\nPermission is granted to anyone to use this software for any purpose,including \ncommercial applications, and to alter it and redistribute it freely, subject \nto the following restrictions:\n\n 1. The origin of this software must not be misrepresented; you must not claim \n    that you wrote the original software. If you use this software in a \n    product, an acknowledgment in the product documentation would be \n    appreciated but is not required.\n 2. Altered source versions must be plainly marked as such, and must not be \n    misrepresented as being the original software.\n 3. This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9111328125,
          "content": "# Haru Free PDF Library [![Build Status](https://github.com/libharu/libharu/actions/workflows/cmake.yml/badge.svg)](https://github.com/libharu/libharu/actions/workflows/cmake.yml)\n\n  **URL http://libharu.org/**\n\n  **Copyright 2000-2006 (c) Takeshi Kanno**\n\n  **Copyright 2007-2009 (c) Antony Dovgal et al.**\n\nSee INSTALL for instructions on how to install libHaru.\n\n\n# What is Haru Free PDF Library?\n\nHaru is a free, cross platform, open-sourced software library for generating \nPDF. It supports the following features.\n\n   1. Generating PDF files with lines, text, images.\n   2. Outline, text annotation, link annotation.\n   3. Compressing document with deflate-decode.\n   4. Embedding PNG, Jpeg images.\n   5. Embedding Type1 font and TrueType font.\n   6. Creating encrypted PDF files.\n   7. Using various character set (ISO8859-1~16, MSCP1250~8, KOI8-R).\n   8. Supporting CJK fonts and encodings.\n\nYou can add the feature of PDF creation by using Haru without understanding \ncomplicated internal structure of PDF.\n\n\n# The differences from the previous version \n\n\nThe biggest differences are that all code is written in C. \nTo our regret, because internal structures changed greatly, The API is not \ncompatible with previous version.\n\nHowever, the new-version has the following advantages compared with the \nprevious version.\n\n 1. Supported shared-library build.\n    A new-version library is able to be built as shared-library.\n 2. The performance has been greatly improved.\n    A new-version library is about 4-15 times faster than a previous version. \n 3. Supported more features.\n    TrueType font, 128 bit encryption, arc function, and so on.\n\n\n# Supporting platforms\n\nHaru is written in ANSI-C and should compile easily with any compliant C \ncompiler.\nI inspected Haru in the following environment and make files for these \nenvironments are included in a package.\n\n   1. Cygwin + GCC (Microsoft Windows)\n   2. Cygwin + MinGW (Microsoft Windows)\n   3. MSYS + MinGW (Microsoft Windows)\n   3. Microsoft VC++ (Microsoft Windows)\n   4. Borland C++ (Microsoft Windows)\n   5. GCC (Linux, FreeBSD, NetBSD, Solaris...)\n\nAlso on platforms except the above, it is easy to build HARU. If you success to build HARU on other platforms, please send makefile to me.\nIn addition, ZLIB and PNGLIB are required when you want to use the features of \ncompression and embedding PNG images. (In the case of Windows, static library \nfiles for several compilers are included in the package for WIndows.  In the \ncase of  most of UNIX, these libraries are usually installed.)\n\n\n# Available development environment\n\nHaru can work as both static-library (.a, .lib) and shared-library (.so, .dll).\nWhen you use it as static-library, It can be used by C and a C++.\nBut when you use it as shared-library, it can be used by many development \nlanguages which support shared library.\nSo far, Haru provides bindings for Ruby, Delphi/Free Pascal and C#.\n\nIf you write bindings for other programming languages, please notice me!\n\n\n# Runtime environment of programs using Haru\n\n1. static-library\n   No runtime files are required.\n\n2. shared-library\n   In Windows, you have to distribute libhpdf.dll with a program. In UNIX you \n   have to distribute libhpdf.so* with a program.\n\n\n\nNOTE:\nIn the UNIX environment, there are the cases that libz.so, libpng.so.x are \nnecessary. About this, please refer to the documentation of PNGLIB and ZLIB.\n\n\n# License\n\nHaru is distributed under the ZLIB/LIBPNG License. Because ZLIB/LIBPNG License \nis one of the freest licenses, You can use Haru for various purposes.\n\nThe license of Haru is as follows.\n\nCopyright (C) 1999-2006 Takeshi Kanno\nCopyright (C) 2007-2009 Antony Dovgal\n\nThis software is provided 'as-is', without any express or implied warranty.\n\nIn no event will the authors be held liable for any damages arising from the \nuse of this software.\n\nPermission is granted to anyone to use this software for any purpose,including \ncommercial applications, and to alter it and redistribute it freely, subject \nto the following restrictions:\n\n 1. The origin of this software must not be misrepresented; you must not claim \n    that you wrote the original software. If you use this software in a \n    product, an acknowledgment in the product documentation would be \n    appreciated but is not required.\n 2. Altered source versions must be plainly marked as such, and must not be \n    misrepresented as being the original software.\n 3. This notice may not be removed or altered from any source distribution.\n\n\n\n# Acknowledgment\n\n1. Information-technology Promotion Agency(IPA)\n   The development of Haru has been supported by Exploratory Software Project \n   of Information-technology Promotion Agency(IPA), Japan. \n\n2. All users of libHaru.\n   We wish to thank all users of Haru.\n   In particular, we thank Thomas Nimstad, LeslieM, Par Hogberg, adenelson, \n   Riccardo Cohen, sea_sbs, Andrew. \n   They gave me very useful advices.\n\n3. Adobe Systems Inc.\n   We thank Adobe Systems Inc. for publishing PDF specification.\n"
        },
        {
          "name": "README_cmake",
          "type": "blob",
          "size": 4.37109375,
          "content": "Instruction for the CMake Build System\n======================================\n\nCMake is a family of tools designed to build, test and\npackage software and it is cross-platform and open\nsource. CMake and can obtained from http://www.cmake.org.\n\n0 Setup CMake\n-------------\nCMake is available in most of Linux repositories and can \nbe therefore easily installed. In Cygwin just use the \nusual method with setup.exe to get the latest version of CMake.\nFor Windows and Mac OS X go to http://www.cmake.org and \ndownload the appropriate binary package. Make sure that the\nbin directory of the extracted CMake package is in the \nPATH environment variable. Check in the CLI with\n\ncmake --version\n\nthat CMake can be found. There is also a graphical interface\nto CMake available which can be run with ccmake (Linux, Mac OS X)\nor cmake-gui (Windows, Linux, Mac OS X). In the next section\nthe command line tool cmake is used, but the graphical interface\nworks similar. Note, that CMake should always operate in a \nout-of-source directory. If you need to run CMake again it's best\nto remove the whole folder and start with the directory creation\nin order to prevent problems with stale CMake cache files.\n\nX Specific instructions for Linux and Mac OS X\n==============================================\nCreate a directory at the same level as the libharu source directory,\ne.g. \"mkdir libharu_build\". Cd into this directory.\nThan run cmake with the command\n\ncmake ../libharu\n\nCMake will configure the build and create the appropriate makefiles.\nRun \"make\" to create the library and the examples. There are some\noptions available which are described below.\n\nX Specific instructions for Windows\n===================================\nCreate a directory at the same level as the libharu source directory,\ne.g. \"mkdir libharu_build\". Cd into this directory.\nSince there are more compiler toolsets available for Windows than\nthe standard gcc compiler, you need to tell cmake which makefile\ngenerator to use\n\ncmake -G \"Makefile Generator\" ..\\libharu\n\nwhere Make Generator is one of the following (most important listed)\n\n  Borland Makefiles           = Generates Borland makefiles.\n  MSYS Makefiles              = Generates MSYS makefiles.\n  MinGW Makefiles             = Generates a make file for use with\n                                mingw32-make.\n  NMake Makefiles             = Generates NMake makefiles.\n  Visual Studio 6             = Generates Visual Studio 6 project files.\n  Visual Studio 9 2008        = Generates Visual Studio 9 2008 project files.\n\nYou get a complete list of all available generators for your platform\nwith \"cmake --help\". I'll go into details for one specific compiler toolset.\nThe other generators work similar.\n\nUsing CMake to produce Visual C++ 2008 Makfiles\n-----------------------------------------------\nFirst you need to have the command line interface setup correctly. Start\ncmd.exe and run \"%VS90COMNTOOLS%vsvars32.bat\". This will set up the\ncommand line tools of Visual C++ 2008. Cd into the created build\ndirectory and run\n\ncmake -G \"NMake Makefiles\" ..\\libharu\n\nAfter the configuration and creation of the makefile run \"nmake\" to create\nthe libraries and demonstrations. By default a shared library will be \ncreated therefore you need to copy the haru.dll from the src directory\nin the demo directory in order for the demonstrations to run correctly.\n\nX Useful CMake options\n======================\nThere are some options available where you can influence the configuration\nstage. These options must be given at the command line with the -D flag, e.g.\n\ncmake -G \"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Debug ..\\libharu\n\n  CMAKE_BUILD_TYPE=Debug|Release - debug or release build\n  BUILD_SHARED_LIBS=ON|OFF - shared or static build\n  CMAKE_COLOR_MAKEFILE=ON|OFF - color output\n  CMAKE_VERBOSE_MAKEFILE=ON|OFF - verbose makefile output\n  \nMore options can be found here: http://www.cmake.org/Wiki/CMake_Useful_Variables\n\nX How does CMake find libraries\n===============================\nCMake searches usually in the standard locations to find libraries, which\nworks well on Linux and Mac OS X. This is not the case for Windows (where\nthere are simply no standard locations for libraries) or if you want to\nuse a library at a non-standard location. You can help CMake to find\nlibraries via two environment variables, e.g. for Windows:\n\nset CMAKE_INCLUDE_PATH=path_to_zlib_headers\nset CMAKE_LIBRARY_PATH=path_to_zlib\n\nand then CMake will be able to find zlib.\n  \n  \n"
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "win32",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}