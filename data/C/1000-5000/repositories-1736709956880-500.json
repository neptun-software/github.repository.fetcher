{
  "metadata": {
    "timestamp": 1736709956880,
    "page": 500,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flame/blis",
      "stars": 2349,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 2.18359375,
          "content": "skip_branch_with_pr: true\n\nenvironment:\n  matrix:\n    - LIB_TYPE: shared\n      CONFIG: auto\n      CC: gcc\n      THREADING: pthreads\n      CBLAS: no\n\n    - LIB_TYPE: static\n      CONFIG: auto\n      CC: clang\n      THREADING: no\n\n    - LIB_TYPE: shared\n      CONFIG: x86_64\n      CC: clang\n      THREADING: pthreads\n\n    - LIB_TYPE: static\n      CONFIG: auto\n      CC: clang\n      THREADING: openmp\n\n    - LIB_TYPE: static\n      CONFIG: auto\n      CC: clang\n      THREADING: openmp\n      SANDBOX: yes\n\ninstall:\n- set \"PATH=C:\\msys64\\mingw64\\bin;C:\\msys64\\bin;%PATH%\"\n- if [%CC%]==[clang] set \"PATH=C:\\Program Files\\LLVM\\bin;%PATH%\"\n- if [%CC%]==[clang] set \"AR=llvm-ar\"\n- if [%CC%]==[clang] set \"AS=llvm-as\"\n- if [%CC%]==[clang] call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" amd64\n\nbuild_script:\n- if [%LIB_TYPE%]==[shared] set \"CONFIGURE_OPTS=%CONFIGURE_OPTS% --enable-shared --disable-static\"\n- if [%LIB_TYPE%]==[static] set \"CONFIGURE_OPTS=%CONFIGURE_OPTS% --disable-shared --enable-static\"\n- if not [%CBLAS%]==[no] set \"CONFIGURE_OPTS=%CONFIGURE_OPTS% --enable-cblas\"\n- if [%SANDBOX%]==[yes] set \"CONFIGURE_OPTS=%CONFIGURE_OPTS% -s gemmlike\"\n- set RANLIB=echo\n- set LIBPTHREAD=\n- set \"PATH=%PATH%;C:\\blis\\lib\"\n- set \"CFLAGS=-Wno-macro-redefined\"\n- bash -lc \"cd /c/projects/blis && ./configure %CONFIGURE_OPTS% --enable-threading=%THREADING% --enable-arg-max-hack --prefix=/c/blis %CONFIG%\"\n- bash -lc \"cd /c/projects/blis && mingw32-make -j4 V=1\"\n- bash -lc \"cd /c/projects/blis && mingw32-make install\"\n- 7z a C:\\blis.zip C:\\blis\n- ps: Push-AppveyorArtifact C:\\blis.zip\n\ntest_script:\n# \"make checkblas\" does not work with shared linking Windows due to inability to override xerbla_\n- if [%LIB_TYPE%]==[shared] set \"TEST_TARGET=checkblis-fast\"\n- if [%LIB_TYPE%]==[static] set \"TEST_TARGET=check\"\n- bash -lc \"cd /c/projects/blis && mingw32-make %TEST_TARGET% -j4 V=1\"\n\n# Enable this to be able to login to the build worker. You can use the\n# `remmina` program in Ubuntu, use the login information that the line below\n# prints into the log.\n#on_finish:\n#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n"
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.9189453125,
          "content": ";; Emacs formatting for the BLIS layout requirements.\n\n(\n ;; Recognize *.mk files as Makefile fragments\n (auto-mode-alist . ((\"\\\\.mk\\\\'\" . makefile-mode)) )\n\n ;; Makefiles require tabs and are almost always width 8\n (makefile-mode . (\n                   (indent-tabs-mode . t)\n                   (tab-width . 8)\n                   )\n                )\n\n ;; C code formatting roughly according to docs/CodingConventions.md\n (c-mode . (\n            (c-file-style . \"bsd\")\n            (c-basic-offset . 4)\n            (comment-start . \"// \")\n            (comment-end . \"\")\n            (parens-require-spaces . nil)\n            )\n         )\n\n ;; Default formatting for all source files not overriden above\n (prog-mode . (\n               (indent-tabs-mode . nil)\n               (tab-width . 4)\n               (require-final-newline . t)\n               (eval add-hook `before-save-hook `delete-trailing-whitespace)\n               )\n            )\n)\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7919921875,
          "content": "# -- generic files to ignore --\n\n# emacs backup files\n*~\n# vim backup files\n*.swp\n# NFS file\n.nfs*\n\n# -- compiler-related --\n\n# object files\n# NOTE: This will result in git also exluding the top-level obj directory\n# since its only contents are .o files.\n*.o\n# static library archives\n# NOTE: This will result in git also exluding the top-level lib directory\n# since its only contents are .a files.\n*.a\n*.so\n*.so.*\n# test executables\n*.x\n*.pexe\n*.nexe\n*.js\n# link map files\n*.map\n\n# -- build system files --\n\nconfig.mk\nbli_config.h\nbli_addon.h\n\n# -- monolithic headers --\n\ninclude/*/*.h\n\n# -- makefile fragments --\n\n.fragment.mk\n\n# -- misc. --\n\n# BLIS testsuite output file\noutput.testsuite\noutput.testsuite.*\n\n# BLAS test output files\nout.*\n\n# GTAGS database\nGPATH\nGRTAGS\nGTAGS\n\n# Mac DS.store files\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 5.8046875,
          "content": "language: c\nsudo: required\ndist: focal\nbranches:\n  only:\n  - master\n  - dev\n  - amd\nmatrix:\n  include:\n  # full testsuite (all tests + mixed datatype (gemm_nn only) + salt + SDE + OOT)\n  - os: linux\n    compiler: gcc\n    env: OOT=1 TEST=ALL SDE=1 THR=\"none\" CONF=\"x86_64\" \\\n      PACKAGES=\"gcc-9 binutils\"\n  # openmp build\n  - os: linux\n    compiler: gcc\n    env: OOT=0 TEST=FAST SDE=0 THR=\"openmp\" CONF=\"auto\" \\\n      PACKAGES=\"gcc-9 binutils\"\n  # pthreads build\n  - os: linux\n    compiler: gcc\n    env: OOT=0 TEST=FAST SDE=0 THR=\"pthreads\" CONF=\"auto\" \\\n      PACKAGES=\"gcc-9 binutils\"\n  # clang build\n  - os: linux\n    compiler: clang\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" CONF=\"auto\"\n      # There seems to be some difficulty installing two Clang toolchains of\n      # different versions.\n      # Use the TravisCI default.\n      # PACKAGES=\"clang-8 binutils\"\n  # macOS with system compiler (clang)\n  - os: osx\n    compiler: clang\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" CONF=\"auto\"\n  # cortexa15 build and fast testsuite (qemu)\n  - os: linux\n    compiler: arm-linux-gnueabihf-gcc\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" CONF=\"cortexa15\" \\\n      CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ \\\n      PACKAGES=\"gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-system-arm qemu-user\" \\\n      TESTSUITE_WRAPPER=\"qemu-arm -cpu cortex-a15 -L /usr/arm-linux-gnueabihf/\"\n  # cortexa57 build and fast testsuite (qemu)\n  - os: linux\n    compiler: aarch64-linux-gnu-gcc\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" CONF=\"cortexa57\" \\\n      CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \\\n      PACKAGES=\"gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user\" \\\n      TESTSUITE_WRAPPER=\"qemu-aarch64 -L /usr/aarch64-linux-gnu/\"\n  # Apple M1 (firestorm) build and fast testsuite (qemu)\n  - os: linux\n    compiler: aarch64-linux-gnu-gcc\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" CONF=\"firestorm\" \\\n      CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ \\\n      PACKAGES=\"gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user\" \\\n      TESTSUITE_WRAPPER=\"qemu-aarch64 -L /usr/aarch64-linux-gnu/\"\n  # armsve build and fast testsuite (qemu)\n  - os: linux\n    compiler: aarch64-linux-gnu-gcc-10\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" CONF=\"armsve\" \\\n      CC=aarch64-linux-gnu-gcc-10 CXX=aarch64-linux-gnu-g++-10 \\\n      PACKAGES=\"gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user\" \\\n      TESTSUITE_WRAPPER=\"qemu-aarch64 -cpu max,sve=true,sve512=true -L /usr/aarch64-linux-gnu/\"\n  # arm64 build and fast testsuite (qemu)\n  # NOTE: This entry omits the -cpu flag so that while both NEON and SVE kernels\n  # are compiled, only NEON kernels will be tested. (h/t to RuQing Xu)\n  - os: linux\n    compiler: aarch64-linux-gnu-gcc-10\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" CONF=\"arm64\" \\\n      CC=aarch64-linux-gnu-gcc-10 CXX=aarch64-linux-gnu-g++-10 \\\n      PACKAGES=\"gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu libc6-dev-arm64-cross qemu-system-arm qemu-user\" \\\n      TESTSUITE_WRAPPER=\"qemu-aarch64 -L /usr/aarch64-linux-gnu/\"\n  # The RISC-V targets require the qemu version available in jammy or newer.\n  # When CI is upgraded, the packages should be activated and do_script.sh\n  # cleaned up.\n  # PACKAGES=\"qemu-user qemu-user-binfmt\"\n  - os: linux\n    compiler: riscv64-unknown-linux-gcc\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" BLD=\"--disable-shared\" CONF=\"rv64iv\" \\\n      CC=riscv64-unknown-linux-gnu-gcc \\\n      LDFLAGS=-static\n  - os: linux\n    compiler: riscv32-unknown-linux-gcc\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" BLD=\"--disable-shared\" CONF=\"rv32iv\" \\\n      CC=riscv32-unknown-linux-gnu-gcc \\\n      LDFLAGS=-static\n  - os: linux\n    compiler: clang\n    env: OOT=0 TEST=FAST SDE=0 THR=\"none\" BLD=\"--disable-shared\" CONF=\"sifive_x280\" \\\n      CC=clang \\\n      LDFLAGS=-static\ninstall:\n- if [ \"$CC\" = \"gcc\"  ] && [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then export CC=\"gcc-9\"; fi\n- if [ -n \"$PACKAGES\" ] && [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then sudo apt-get install -y $PACKAGES; fi\nscript:\n- export DIST_PATH=.\n- pwd\n- if [ $OOT -eq 1 ]; then export DIST_PATH=`pwd`; mkdir ../oot; cd ../oot; chmod -R a-w $DIST_PATH; fi\n- pwd\n- if [ \"$CONF\" = \"rv64iv\" ]; then\n    $DIST_PATH/travis/do_riscv.sh \"$CONF\";\n    export CC=$DIST_PATH/../toolchain/riscv/bin/riscv64-unknown-linux-gnu-gcc;\n    export CXX=$DIST_PATH/../toolchain/riscv/bin/riscv64-unknown-linux-gnu-g++;\n    export TESTSUITE_WRAPPER=\"$DIST_PATH/../toolchain/qemu-riscv64 -cpu rv64,vext_spec=v1.0,v=true,vlen=128 -B 0x100000\";\n  fi\n- if [ \"$CONF\" = \"rv32iv\" ]; then\n    $DIST_PATH/travis/do_riscv.sh \"$CONF\";\n    export CC=$DIST_PATH/../toolchain/riscv/bin/riscv32-unknown-linux-gnu-gcc;\n    export CXX=$DIST_PATH/../toolchain/riscv/bin/riscv32-unknown-linux-gnu-g++;\n    export TESTSUITE_WRAPPER=\"$DIST_PATH/../toolchain/qemu-riscv32 -cpu rv32,vext_spec=v1.0,v=true,vlen=128 -B 0x100000\";\n  fi\n- if [ \"$CONF\" = \"sifive_x280\" ]; then\n    $DIST_PATH/travis/do_riscv.sh \"$CONF\";\n    export CC=$DIST_PATH/../toolchain/riscv/bin/clang;\n    export CXX=$DIST_PATH/../toolchain/riscv/bin/clang++;\n    export TESTSUITE_WRAPPER=\"$DIST_PATH/../toolchain/qemu-riscv64 -cpu rv64,vext_spec=v1.0,v=true,vlen=512 -B 0x100000\";\n  fi\n- $DIST_PATH/configure -p `pwd`/../install -t $THR $BLD CC=$CC $CONF\n- pwd\n- ls -l\n- $CC --version\n- $CC -v\n- make -j 2\n- make install\n- if [ \"$BLD\" = \"\" ]; then $DIST_PATH/travis/cxx/cxx-test.sh $DIST_PATH $(ls -1 include); fi\n# Qemu SVE is failing sgemmt in some cases. Skip as this issue is not observed\n# on real chip (A64fx).\n- if [ \"$CONF\" = \"armsve\" ]; then sed -i 's/.*\\<gemmt\\>.*/0/' $DIST_PATH/testsuite/input.operations.fast; fi\n- if [ \"$TEST\" != \"0\" ]; then travis_wait 30 $DIST_PATH/travis/do_testsuite.sh; fi\n- if [ \"$SDE\" = \"1\" ]; then travis_wait 30 $DIST_PATH/travis/do_sde.sh; fi\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 1259.5615234375,
          "content": "commit c2af113c7ba6d0dcc128ba36ec6e140d89180cf3 (HEAD -> master)\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Mon May 6 13:37:47 2024 -0500\n\n    Version file update (1.0)\n\ncommit 5ab286f61525f8ead35ecc258305a5ccd4ee096b (origin/master, origin/HEAD)\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Mon May 6 13:14:52 2024 -0500\n\n    Added a script to help create new rc branches.\n    \n    Details:\n    - Added a new script, build/start-new-rc.sh, which:\n      1. Updates the version file with a new version string.\n      2. Commits (locally) the version string update.\n      3. Updates the CHANGELOG file with the output of 'git log'.\n      4. Commits (locally) the CHANGLOG file update.\n      5. Creates a new branch whose name is equal to \"<vers>-rc0\" where\n         <vers> is the new version string.\n      6. Reminds the user to execute some final steps if everything looks\n         good.\n      This new script will help in the future when it's time to start a new\n      release candidate branch/lineage off of 'master'. Note that this\n      script is based on build/bump-version.sh (which itself may change in\n      the future due to changes in the way versions/releases will be handled\n      going forward).\n\ncommit cad51491e8a0b306015a5a02881dc2a9b60dd8d9\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Tue Apr 30 16:46:54 2024 -0500\n\n    Use \"-i auto\" by default in test/3 drivers.\n    \n    Details:\n    - Request default induced method behavior of BLIS via \"-i auto\" when\n      running the standalone performance drivers in test/3 via the runme.sh\n      script present in that directory. (Previously, the runme.sh script\n      would use \"-i native\" by default.) This change was originally intended\n      for fd1a7e3.\n\ncommit fd1a7e3ca9547718aa61c806848099705216182b\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Thu Apr 25 15:00:59 2024 -0500\n\n    Allow test/3 drivers to use default ind_t method. (#804)\n    \n    Details:\n    - Previously, the standalone performance drivers in test/3 were written\n      under the assumption that the user would want to explicitly test\n      either native execution *or* 1m. But because the accompanying runme.sh\n      script defaults to passing \"native\" in for the -i command line option\n      (which explicitly sets the induced method type), running the script\n      without modification causes the test drivers to use slow reference\n      microkernels on systems where native complex-domain microkernels are\n      not registered -- which will yield poor performance for complex-domain\n      level-3 operations. Furthermore, even if a user was aware of this, the\n      test drivers did not support any single value for the -i option that\n      would test BLIS using the library's default behavior -- that is, using\n      1m on systems where it is needed and native execution on systems that\n      have native microkernels implemented and registered.\n    - This commit addresses the aforementioned issue by supporting a new\n      value for the -i option: \"auto\". The \"auto\" value causes the driver\n      to avoid explicitly setting the induced method altogether, leaving\n      BLIS's default behavior in place. This \"auto\" option is also now the\n      default setting within the runme.sh script. Thanks to Leick Robinson\n      for finding and reporting this issue.\n    - Also added support for \"nat\" as a shorthand for \"native\", which\n      the help text already (erroneously) claimed was supported.\n\ncommit a49238e6141c96a41aa3c2a4adb0b0663d0b4968\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Apr 24 15:07:18 2024 -0500\n\n    Refactor the control tree and other infrastructure (#710)\n    \n    Details:\n    1. A \"plugin\" architecture.\n    - Users are now able to register new kernels, kernel preferences, and\n      blocksizes at runtime, directly from user applications.\n    - Plugins can be created, configured, and built using only an installed\n      version of BLIS -- no source or source code changes required.\n    - Plugins support both reference and optimized kernels, as well as\n      custom configuration-to-kernel-set mappings.\n    - Building plugins (including reference and relevant optimized kernels)\n      for enabled architectures or architecture families is automated, as is\n      linking into the final library.\n    - The configure script is now installed as 'configure-plugin'. In this\n      mode, it can be used to initialize a plugin from a template including\n      optional example code, and prepare a build system for compiling the\n      plugin into a shared or static library.\n    - Additional configuration files, templates, and build system components\n      are also installed to '%prefix%/share/blis'.\n    - The cntx_t struct now has extensible data structures for holding\n      kernels, preferences, and blocksizes. These are based on a \"stack\"\n      structure which contains a list of fixed-size data blocks. Adding a\n      new entry (which may require allocating a new block or reallocating\n      the block pointer array) requires locking, but looking up entries is\n      lock-free and takes O(1) time.\n    - Kernels can depend on either 1 or 2 type parameters (e.g.\n      mixed-precision packing requires 2). The func2_t struct supports\n      the latter, but can be implicitly cast to func_t if only \"diagonal\"\n      entries are needed. The number of type parameters can be inferred from\n      the kernel ID for type safety.\n    - Functions have been added to register new kernels, preferences, and\n      blocksizes with the global kernel structure (gks). This creates\n      corresponding entries in each allocated context and returns the next\n      available ID. Plugins use this API to register user kernels, although\n      the user is responsible for tracking the returned IDs for later\n      lookup. Setting newly-registered reference kernels, as well as\n      overriding these with optimized kernels is done in exactly the same\n      manner as in bli_cntx_init_ref() and bli_cntx_init_<subconfig>().\n    \n    2. Restructuring of the control and thread control trees.\n    - The control tree has been substantially restructured to support more\n      flexibility.\n    - The \"default\" control trees for gemm (also used for\n      hemm/symm/herk/her2k/syrk/syr2k/trmm/trmm3) and trsm are now\n      represented as a single structure containing all necessary control\n      tree nodes and parameters.\n    - An API has been added to modify the default gemm/trsm control trees.\n    - This same API is used by the framework and packm/gemm/trsm variants\n      to access specific control tree nodes.\n    - Users can alternatively create a custom control tree from scratch.\n    - The blocksizes are now encoded directly in the control tree, rather\n      than via loop IDs. The logic for adjusting blocksizes for certain\n      operations has been moved to the control tree initialization.\n    - Type information is encoded in the control tree to drive proper\n      selection of packing and computational kernels provided by the user.\n    - The packing microkernel now receives an opaque \"params\" struct which\n      is user-definable and can be used to pass additional information\n      through the call stack.\n    - The auxinfo_t struct has been updated with a .params field for\n      opaque user data as well as the global offsets of the current\n      microtile.\n    - The packm and gemm variants can be overridden by the user, and also\n      receive an opaque params struct via the associated control tree\n      node.\n    - The structure-aware packing kernel bli_packm_struc_cxk() is no longer\n      hard-coded to be called from the default packm variant, but can be\n      overridden by the user. It also supports mixed-precision/mixed-domain\n      natively now.\n    - The thread control tree (thrinfo_t) is now created entirely up-front\n      by inspecting the control tree. The required number of threads at each\n      level is encoded in the control tree via loop IDs (actually a bitfield\n      of loop IDs), although the ordering and number of such IDs is\n      arbitrary. The logic for adjusting the number of threads at each level\n      based on operation type (e.g. trmm) is now in the control tree\n      initialization and expressed by combining loop IDs from multiple\n      levels into a single level.\n    - The mem_t object containing the pack buffer pointer has been moved\n      from the control tree to the thread control tree. NOTE: **The control\n      tree is now strictly const throughout the operation, and only a\n      single copy is shared by all threads.**\n    - The thread control tree node for packing has been changed so that\n      there is no longer a \"fake\" node indicating a team of single threads.\n      Instead, the number of threads and thread IDs in the \"normal\" thread\n      control tree node are used. This change has also been made to the\n      gemmsup thread control tree and packing variants, as well as to the\n      gemmlike sandbox.\n    - Parameters controlling packing (e.g. inversion of the diagonal,\n      direction, schema) are not stored directly in the control tree but in\n      the opaque params struct. The packing control tree node and its\n      default params struct are stored together in the \"combined\"\n      gemm/trsm control tree structure and initialized as a unit. Users can\n      update these parameters individually or substitute a custom packm\n      variant and params struct.\n    - The \"target\" and \"execution\" datatypes has been removed from the obj_t\n      struct and replaced by type information in the control tree.\n    - The \"sub-node\" and \"sub-prenode\" of a control tree node have been\n      replaced by an arbitrary number of sub-nodes accessed by index. There\n      is a hard cap on the number of sub-nodes (currently 2). Sub-nodes are\n      added during control tree initialization, *after*\n      creation/initialization of the parent node through an updated API.\n    - The level-3 thread decorator has been significantly simplified and\n      directly calls bli_l3_int(). The control tree is created externally,\n      and it is no longer necessary to alias matrices or set object pack\n      schemas. Also, the rntm_t passed in may be NULL. Finally, family\n      and scalar information is no longer needed here.\n    - bli_l3_int() is now a simple inline function which extracts the next\n      control tree node and variant and calls it.\n    - bli_*_front() have been removed and inlined into the expert object\n      API with significant simplification.\n    - 1m (or other induced method) no longer uses an alternative cntx_t.\n    - The .pack_fn/.ker_fn pointers and associated params fields on the\n      obj_t were removed in favor of the present solution.\n    \n    3. Overhaul of variable substitution in configure script.\n    - The configure script has been somewhat re-written to use a\n      centralized mechanism for substituting variables into build system and\n      other configuration files.\n    - All substitution variables go through the same pathway now, which\n      necessitated some variable naming changes for variables which were\n      named the same in e.g. Makefile and bli_config.h but with\n      different definitions.\n    - CC and CXX variables can now contain spaces, e.g. 'g++ -std=c++17'.\n      This provides better support for integration with build tooling such\n      as autotools.\n    \n    4. Overhaul of packing kernels.\n    - Previously there were two packing kernels referenced in the cntx_t\n      structure for MRxk and NRxk shaped micropanels, respectively. These\n      have now been merged into one kernel which is responsible for packing\n      any dense rectangular portion of either A or B.\n    - The packing kernel now receives information about the register\n      blocksize (cdim_max) and duplication factor (the \"broadcast-B\"\n      format, although this can also apply to the A matrix).\n    - The structure-aware packing kernel (bli_packm_struc_cxk(), which is\n      now user-overridable) also receives global offsets of the current\n      micropanel within A or B.\n    - Explicit kernels for packing the diagonal blocks of\n      triangular/symmetric/Hermitian matrices have been added to the\n      cntx_t. This means that the bli_packm_struc_ckx() \"kernel\" no longer\n      needs to directly touch data (except to zero out some regions).\n    - bli_packm_struc_cxk() has also been updated to work only in terms of\n      fundamental elements (i.e., real datatypes) when computing offsets and\n      when zeroing data, which greatly simplifies mixed-domain/1m packing.\n    - bli_packm_scalar() has been updated to better support complex scalars\n      in mixed-domain operations.\n    - Pack schemas for PACKED_ROW_PANELS* and PACKED_COL_PANELS* have\n      been merged into simply PACKED_PANELS*. This reflects the merging of\n      the packing kernels into a single generic kernel. There were only a\n      very few places which needed the row/column information and this is\n      now supplied by alternative means.\n    - Packing variants always behave \"as if\" the A matrix were being packed\n      (i.e. the code assumes packing column-stored row panels). Packing of B\n      is handled by applying an implicit or explicit transpose before\n      packing. This change also applies to gemmsup.\n    \n    5. Improved MD/MP support.\n    - All level-3 operations (except trsm) now support full\n      mixed-domain/mixed-precision operation.\n    - Explicit 1m packing kernels have been added in the cntx_t.\n    - An explicit 1m microkernel wrapper has been added to the cntx_t.\n    - An extra packing kernel for the \"ro\" format has been added, along with\n      the pack_t enumeration value. This supports the packing for\n      real*complex -> real, including potential scaling by a complex alpha,\n      support for structured matrices, etc.\n    - Extra microkernel wrappers for mixed-domain operations have been added\n      to support the 'ccr' (and by extension, 'crc'), 'rcc', and 'crr'\n      cases. Notably this includes full support for general stride storage\n      and complex alpha/beta.\n    - Packing kernels and gemm microkernels are now \"templated\" based on two\n      type parameters rather than one. For packing this allows direct\n      optimization of mixed-precision kernels, and for gemm microkernels\n      this allows direct optimization of mixed-precision without writing to\n      a temporary buffer. Reference packing kernels are directly\n      instantiated for all mixes of precisions, while by default\n      mixed-precision gemm microkernels are supported via a microkernel\n      wrapper. The \"old\" way of specifying optimized kernels using a single\n      type parameter works unchanged.\n    - alpha and beta are typecast appropriately to the computational or\n      output datatype, respectively, and **always** to the complex domain.\n      Scalar typecasting has also been added to gemmsup for safety.\n    - The gemm macrokernel doesn't have to do any typecasting anymore, as a\n      microkernel wrapper or optimized mixed-precision/mixed-domain kernel\n      now handles this.\n    - 1m and mixed-domain operations now always use a microkernel wrapper,\n      rather than adjusting parameters in the gemm macrokernel.\n    - The gemmt macrokernel **does** still have to handle explicit\n      write-back of microtiles which intersect the diagonal, although\n      typecasting has already been performed.\n    - The gemmt_x_ker_var2(), trmm_xx_ker_var2(), and trsm_xx_ker_var2()\n      functions have been removed. The appropriate macrokernel pointer is\n      selected during control tree initialization.\n    - Real domain MR/NR are checked for even-ness based on the gemm\n      microkernel's row preference in order to guarantee proper 1m and\n      mixed-domain operation.\n    - Full range of mixed-domain/mixed-precision functionality tested in the\n      testsuite ('input.*.mixed').\n    \n    6. Other changes:\n    - The build system has been updated to support C++ source files\n      throughout the framework. While the intent is not to add such files to\n      BLIS itself, this supports plugins written in C++.\n    - Many instances of configuration-specific code have been simplified by\n      introducing an INSERT_GENTCONF macro which instantiates a block of\n      code for each enabled sub-configuration. The ConfigurationHowTo.md\n      document has been updated accordingly.\n    - PASTEMAC?/PASTECH?/PASTEF77? have been removed in favor of\n      variadic macros which accept any number of arguments (up to a\n      reasonable limit).\n    - The INSERT_GENTFUNC* macros have been updated to clean up\n      mixed-precision and mixed-domain instantiations.\n    - bli_align_dim_to_mult() has been updated to support rounding either up\n      or down based on a flag.\n    - Checking for empty matrices and other early exits (level-3 only) has\n      been consolidated into a single utility function.\n    - The auxinfo_t struct is always passed as const.\n    - The new function bli_obj_alias_submatrix() aliases a matrix while also\n      resetting the root to NULL, offsets to zero (while adjusting the\n      buffer), and applying any implicit transpose.\n    - Level-3 pruning functions now only check matrix structure to see what\n      to do, not the operation family.\n    - gemmsup packing has been updated to use the \"normal\" pack buffer\n      allocation routines.\n    - Remove duplicate checks for early return from gemmsup handler.\n    - bli_determine_blocksize() has been significantly simplified.\n    - Partitioning packed panels is no longer allowed.\n    - Added bli_xxsame macros.\n    - Automated the calculation of info bit shifts and masks based on\n      predefined bit sizes for various flags. This greatly simplifies\n      reordering, adding, or removing flags from the info/info2 bitfields.\n    - Moved more BLIS_NUM_* macros into the corresponding enums as the\n      last entry so that the value is automatically computed.\n    - Better const-correctness in some level0 scalar macros.\n    - Better mixed-precision support in some level0 scalar macros.\n    - Added a bli_axpbys_mxn() macro.\n    - bli_thread_range_sub() takes explicit thread ID and number of threads\n      rather than a thrinfo_t node.\n    - \"De-templated\" BLIS gemmlike sandbox (specifically, bls_gemm_bp_var1()\n      and bls_packm_var1()).\n    - Combined bls_l3_packm_[ab]() into one function with thin wrappers.\n    - Deleted bls_packm_var[23]().\n    - Add a \"termination tag\" to the testsuite output so that\n      'make check-blis' can accurately check for successful completion.\n    - Add a new function to centrally compute FLOPs for level-3 operations\n      in the testsuite.\n\ncommit a316d2c6c33fc1f8f7c58c4210ab203f48349041\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Mar 28 12:52:00 2024 -0500\n\n    Fix incorrect commenting of `BLIS_RNTM_INITIALIZER` and `BLIS_OBJECT_INITIALIZER`.\n\ncommit 664cc6bc3ea610b4ecea63d78c6024c48f045635\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Mar 26 16:25:17 2024 -0500\n\n    Update BLIS_*_INITIALIZER macros for C++ compatibility. (#802)\n    \n    Details:\n    - Remove designated initializer syntax. This isn't officially supported\n      until C++20.\n    - Arrange initializers in the order in which they are defined in the\n      struct. Even with standard or extension support for designated\n      initializers, initializing non-static members out-of-order is an\n      error in C++.\n    - Remove the conditional code which uses '-1' as the default value of\n      the 'pack_buf' member of 'mem_t' in C, but 'BLIS_BUFFER_FOR_GEN_USE'\n      in C++. Simply use the latter as a common-sense default.\n\ncommit 1a8c8180b32cf5988bf9eb5d2f0f8111a729993a\nAuthor: John <50754967+j-bm@users.noreply.github.com>\nDate:   Thu Feb 15 12:35:10 2024 -0400\n\n    Add cpu part codes for various manufacturers and use in the code (#794)\n    \n    * Add cpu_id symbols for arm v8.\n    \n    * Add symbols for arm v7.\n    \n    * Always assume firestorm on Apple aarch64.\n    \n    * Fixes incorrect usage of model vs. part in some places.\n    \n    * Fixes #793\n    \n    ---------\n    \n    Co-authored-by: J <jal@o75snap.localdomain>\n\ncommit c382d8bdccc07e22a341fe04960f0cbf4eec083b\nAuthor: Igor Zhuravlov <zhuravlov.ip@ya.ru>\nDate:   Sun Jan 14 04:03:31 2024 +0000\n\n    Fix errors and typos in docs/BLIS*API.md (#791)\n    \n    Details:\n    - Fixed errors and unified formatting in docs/BLIS*API.md docs.\n\ncommit a72e4569f2a03cc3578c019bf7ce25491a44137d\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Wed Dec 6 18:21:47 2023 -0600\n\n    Include bli_config.h before bli_system.h in cblas.h. (#789)\n    \n    Details:\n    - Previously, in cblas.h, bli_config.h was being #included *after*\n      bli_system.h, which meant that the BLIS_ENABLE_SYSTEM macro was\n      never defined in time for proper OS detection. This bug only\n      affected cblas.h -- blis.h had been correctly #including\n      bli_config.h before bli_system.h since fb93d24. Thanks to\n      Edward Smyth for reporting this bug and suggesting the fix.\n\ncommit 1236ddab455ef3a6293ab394ff06b3a19c2913d9\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Sun Dec 3 16:42:34 2023 -0600\n\n    Fixed random segfault in test/3 drivers. (#788)\n    \n    Details:\n    - Fixed a segfault in the non-gemm test drivers in test/3 that was the\n      result of sometimes leaving either .n_str or .k_str fields of the\n      params_t struct uninitialized, depending on the operation in question.\n      For example, in test_hemm.c, init_def_params() would only initialize\n      the .m_str and .n_str fields, but not the .k_str field. Even though\n      hemm doesn't use a 'k' dimension, the proc_params() function (called\n      via parse_cl_params()) universally attempts to convert all three into\n      integers via sscanf(), which was understandably failing when one of\n      those strings was a NULL pointer. I'm not sure how this code ever\n      worked to begin with. Special thanks to Leick Robinson for finding and\n      reporting this bug.\n\ncommit 141a6c9a8e7557d9c7d28aecedec9dc5377dba13\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Tue Nov 21 12:26:43 2023 -0600\n\n    Install helper headers to INCDIR prefix. (#787)\n    \n    Details:\n    - Install one-line headers to INCDIR whose entire purpose is to\n      #include the actual headers within the local 'blis' header directory\n      so that applications can #include \"blis.h\" instead of #include\n      <blis/blis.h> (and/or \"cblas.h\" instead of <blis/cblas.h> if CBLAS is\n      enabled) when headers are installed to global paths. (Note that\n      INCDIR is the installation prefix for headers as specified by\n      '--includedir=INCDIR', which defaults to 'PREFIX/include' if not\n      specified.) Not sure how this problem went unreported for so long,\n      since presumably any user trying to #include \"blis.h\" from a global\n      installation would have encountered a compiler error.\n    - The one-line blis.h and cblas.h headers now reside in the 'build'\n      directory, ready to install as is.\n    - Thanks to to Jed Brown for reporting this via Issue #786, and for\n      Devin Matthews and Mo Zhou for their engagement.\n    - Harmonized the rule in the top-level Makefile for installing blis.pc\n      into SHAREDIR/pkgconfig with conventions for others vis-a-vis\n      verbosity/non-verbosity.\n\ncommit 2d9439298b336aa6d0ee000a5285a3adb4e6d462\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Nov 21 12:18:07 2023 -0600\n\n    Allow users to defines [sd]complex using std::complex (#784)\n    \n    Details:\n    - In C++ applications, it makes a lot of sense to interface to BLIS\n      using C++'s standard complex number library, which uses a template\n      class std::complex. Obviously BLIS doesn't know anything about this\n      and defaults to a custom struct to represent complex numbers. This PR\n      updates the bli_[cz]{real,imag}() functions to accept std::complex\n      numbers when a C++ compiler is being used. Note that this has no\n      effect on the compilation of the BLIS library (or testsuite), and only\n      comes into play when including blis.h into a C++ project and forcing\n      the use of std::complex for scomplex and dcomplex.\n    - The application can explicitly request std:complex-based types via:\n    \n        #define BLIS_ENABLE_STD_COMPLEX\n        #include <blis.h>\n        // Call BLIS functions using std::complex<double> here.\n    \n    - Fixed a bug in the definition of some scalar level-0 macros, since\n      bli_creal()/bli_cimag() and bli_zreal()/bli_zimag() are no longer\n      interchangeable.\n\ncommit f7ce54a252028483e4c6af619015eb22063d5541 (origin/1.0-rc0)\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Fri Nov 3 15:52:57 2023 -0500\n\n    CREDITS file update.\n\ncommit 05388ddb66f8bf2d62009b162d64bf2d99226b83\nAuthor: Aaron Hutchinson <113382047+Aaron-Hutchinson@users.noreply.github.com>\nDate:   Fri Nov 3 13:30:31 2023 -0700\n\n    Added 'sifive_x280' subconfig, kernel set. (#737)\n    \n    Details:\n    - Added a new 'sifive_x280' subconfiguration for SiFive's x280 RISC-V\n      instruction set architecture. The subconfig registers kernels from a\n      correspondingly new kernel set, also named 'sifive_x280'.\n    - Added the aforementioned kernel set, which includes intrinsics- and\n      assembly-based implementations of most level-1v kernels along with\n      level-1f kernels axpy2v dotaxpyv, packm kernels, and level-3 gemm,\n      gemmtrsm_l, and gemmtrsm_u microkernels (plus supporting files).\n    - Registered the 'sifive_x280' subconfig as belonging to a singleton\n      family by the same name.\n    - Added an entry to '.travis.yml' to test the new subconfig via qemu.\n    - Updates to 'travis/do_riscv.sh' script to support the 'sifive_x280'\n      subconfig and to reflect updated tarball names.\n    - Special thanks to Lee Killough, Devin Matthews, and Angelika Schwarz\n      for their engagement on this commit.\n\ncommit 7a87e57b69d697a9b06231a5c0423c00fa375dc1 (origin/10.0-rc0)\nAuthor: Srinivas Yadav <43375352+srinivasyadav18@users.noreply.github.com>\nDate:   Sat Oct 14 02:05:41 2023 -0500\n\n    Fixed HPX barrier synchronization (#783)\n    \n    Details:\n    - Fixed hpx barrier synchronization. HPX was hanging on larger cores\n      because blis was using non-hpx synchronization primitives. But when\n      using hpx-runtime only hpx-synchronization primitives should be used.\n      Hence, a C style wrapper hpx_barrier_t is introduced to perform hpx\n      barrier operations.\n    - Replaced hpx::for_loop with hpx::futures. Using hpx::for_loop with\n      hpx::barrier on n_threads greater than actual hardware thread count\n      causes synchronization issues making hpx hanging. This can be avoided\n      by using hpx::futures, which are relatively very lightweight, robust\n      and scalable.\n\ncommit 8fff1e31da1c87e46cacec112b0ac280ab47cd8b\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Thu Oct 12 15:51:41 2023 -0500\n\n    Fixed bug in sup threshold registration. (#782)\n    \n    Details:\n    - Fixed a bug that resulted in BLIS non-deterministically calling the\n      gemmsup handler, irrespective of the thresholds that are registered\n      via bli_cntx_set_blkszs().\n    - Deep dive: In bli_cntx_init_ref.c, the default values for the gemmsup\n      thresholds (BLIS_[MNK]T blocksizes) wre being set to zero so that no\n      operation ever matched the criteria for gemmsup (unless specific sup\n      thresholds are registered). HOWEVER, these thresholds are set via\n      bli_cntx_set_blkszs() which calls bli_blksz_copy_if_pos(), which was\n      only coping the thresholds into the gks' cntx_t if the values were\n      strictly positive. Thus, the zero values passed into\n      bli_cntx_set_blkszs() were being ignored and those threshold slots\n      within the gks were left uninitialized. The upshot of this is that the\n      reference gemmsup handler was being called for gemm problems\n      essentially at random (and as it turns out, very rarely the reference\n      gemmsup implementation would encounter a divide-by-zero error).\n    - The problem was fixed by changing bli_blksz_copy_if_pos() so that it\n      copies values that are non-negative (values >= 0 instead of > 0). The\n      function was also renamed to bli_blksz_copy_if_nonneg()\n    - Also needed to standardize use of -1 as the sole value to embed into\n      blksz_t structs as a signal to bli_cntx_set_blkszs() to *not* register\n      a value for that slot (and instead let whatever existing values\n      remain). This required updates to the bli_cntx_init_*() functions for\n      bgq, cortexa9, knc, penryn, power7, and template subconfigs, as some\n      of these codes were using 0 instead of -1.\n    - Fixes #781. Thanks to Devin Matthews for identifying, diagnosing, and\n      proposing a fix for this issue.\n\ncommit 1e264a42474b535431768ef925bbd518412d392e\nAuthor: Abhishek Bagusetty <59661409+abagusetty@users.noreply.github.com>\nDate:   Mon Oct 2 18:29:46 2023 -0500\n\n    Update zen3 subconfig to support NVHPC compilers. (#779)\n    \n    Details:\n    - Parse $(CC_VENDOR) values of \"nvc\" in 'zen3' make_defs.mk file.\n    - Minor refactor to accommodate above edit.\n    - CREDITS file update.\n\ncommit c2099ed2519dcac8ee421faf999b36e1c2260be7\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Mon Oct 2 14:56:48 2023 -0500\n\n    Fixed brokenness when sba is disabled. (#777)\n    \n    Details:\n    - Previously, disabling the sba via --disable-sba-pools resulted in a\n      segfault due to a sanity-check-triggering abort(). The problem was\n      that the sba, as currently used in the l3 thread decorators, did not\n      yet (fully) support pools being disabled. The solution entailed\n      creating wrapper function, bli_sba_array_elem(), which either calls\n      bli_apool_array_elem() (when sba pools are enabled at configure time)\n      or returns a NULL sba_pool pointer (when sba pools are disabled), and\n      calling bli_sba_array_elem() in place of bli_apool_array_elem(). Note\n      that the NULL pointer returned by bli_sba_array_elem() when the sba\n      pools are disabled does no harm since in that situation the pointer\n      goes unreferenced when acquiring and releasing small blocks. Thanks to\n      John Mather for reporting this bug.\n    - Guarded the bodies of bli_sba_init() and bli_sba_finalize() with\n      #ifdef BLIS_ENABLE_SBA_POOLS. I don't think this was actually necessary\n      to fix the aforementioned bug, but it seems like good practice.\n    - Moved the code in bli_l3_thrinfo_create() that checked that the array*\n      pointer is non-NULL before calling bli_sba_array_elem() (previously\n      bli_apool_array_elem()) into the definition of bli_sba_array_elem().\n    - Renamed various instances of 'pool' variables and function parameters\n      to 'sba_pool' to emphasize what kind of pool it represents.\n    - Whitespace changes.\n\ncommit 37ca4fd168525a71937d16aaf6a13c0de5b4daef\nAuthor: Field G. Van Zee <fgvanzee@gmail.com>\nDate:   Thu Sep 28 16:37:57 2023 -0500\n\n    Implemented [cz]symv_(), [cz]syr_(), [cz]rot_(). (#778)\n    \n    Details:\n    - Expanded existing BLAS compatibility APIs to provide interfaces to\n      [cz]symv_(), [cz]syr_(). This was easy since those operations were\n      already implemented natively in BLIS; the APIs were previously\n      omitted only because they were not formally part of the BLAS.\n    - Implemented [cz]rot_() by feeding code from LAPACK 3.11 through\n      f2c.\n    - Thanks to James Foster for pointing out that LAPACK contains these\n      additional symbols, which prompted these additions, as well as for\n      testing the [cz]rot_() functions from Julia's test infrastructure.\n    - CREDITS file update.\n\ncommit 6f412204004666abac266409a203cb635efbabf3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 26 18:00:54 2023 -0500\n\n    Added 'altra', 'altramax' subconfigs. (#775)\n    \n    Details:\n    - Forward-ported 'altra' and 'altramax' subconfigurations from the\n      older 'stable' branch lineage [1]. These subconfigs primarily target\n      the Ampere Altra and AltraMax (ARM) processors. They also contain\n      \"QuickStart\" directories with information and scripts to help\n      use BLIS on these microarchitectures. Thanks to Jeff Diamond and\n      Leick Robinson for developing these subconfigs and resources.\n    - Updated kernels/armv8a/3/bli_gemm_armv8a_asm_d6x8.c according to\n      changes in the 'stable' lineage, mostly related to re-enabling of\n      assembly code branches that target general stride IO.\n    \n    [1] Note that the 'stable' branch is being used to make sure that more\n        recent commits do not introduce unreasonable performance\n        regressions. As such, the name should be interpreted as shorthand\n        for \"performance stable,\" not \"API stable.\"\n\ncommit a4a63295b96ed5b32f4df6477d24db07bf431202\nAuthor: Srinivas Yadav <43375352+srinivasyadav18@users.noreply.github.com>\nDate:   Tue Sep 26 17:58:38 2023 -0500\n\n    Fixes to HPC runtime code path. (#773)\n    \n    Details:\n    - Fixed hpx::for_each invocation and replace with hpx::for_loop. The HPX\n      runtime was initialized using hpx::start, but the hpx::for_each\n      function was being called on a non-hpx runtime (i.e standard BLIS\n      runtime - single main thread). To run hpx::for_each on HPX runtime\n      correctly, the code now uses hpx::run_as_hpx_thread(func, args...).\n    - Replaced hpx::for_each with hpx::for_loop, which eliminates use of\n      hpx::util::counting_iterator.\n    - Employ hpx::execution::chunk_size(1) to make sure that a thread\n      resides on a particular core.\n    - Replaced hpx::apply() with updated version hpx::post().\n    - Initialize tdata->id = 0 in libblis.c to 0, as it is the main thread\n      and is needed for writing results to output file.\n    - By default, if not specified, the HPX runtime uses all N threads/cores\n      available in the system. But, if we want to only specify n_threads out\n      N threads, we use hpx::execution::experimental::num_cores(n_threads).\n\ncommit c6546c1131b1ddd45ef13f9f2b620ce2e955dbf8\nAuthor: John Mather <54645798+jmather-sesi@users.noreply.github.com>\nDate:   Wed Sep 20 13:41:07 2023 -0400\n\n    Fixed broken link in Multithreading.md. (#774)\n    \n    Details:\n    - Replaced 404'd link in docs/Multithreading.md with an archive from\n       The Wayback Machine.\n    - CREDITS file update.\n\ncommit 6dcf7666eff14348e82fbc2750be4b199321e1b9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Aug 27 14:18:57 2023 -0500\n\n    Revamped bli_init() to use TLS where feasible. (#767)\n    \n    Details:\n    - Revamped bli_init_apis() and bli_finalize_apis() to use separate\n      bli_pthread_switch_t objects for each of the five sub-API init\n      functions, with the objects for the 'ind' and 'rntm' sub-APIs being\n      declared with BLIS_THREAD_LOCAL. This allows some APIs to be treated\n      as thread-local and the rest as thread-shared. Thanks to Edward Smyth\n      for requesting application thread-specific rntm_t structs, which\n      inspired these change.\n    - Combined bli_thread_init_from_env() and bli_pack_init_from_env() into\n      a new function, bli_rntm_init_rntm_from_env(), and placed the combined\n      code in bli_rntm.c inside of a new bli_rntm_init() function. Then\n      removed the (now empty) bli_pack_init() and _finalize() function defs.\n    - Deprecated bli_rntm_init() for the purposes of initializing a rntm_t\n      (temporarily preserving it as bli_rntm_clear() in a cpp-undefined code\n      block) so that the function name could be used for the aforementioned\n      bli_rntm_init() function.\n    - Updated libblis_test_pobj_create() in test_libblis.c to use a static\n      rntm_t initializer instead of the deprecated bli_rntm_init()\n      function-based option.\n    - Minor updates to docs/Multithreading.md, including removal of\n      bli_rntm_init() in the example of how to initialize rntm_t structs.\n    - Changed the return value of bli_gks_init(), bli_ind_init(),\n      bli_memsys_init(), bli_thread_init(), and bli_rntm_init() (and their\n      finalize() counterparts) from 'void' to 'int' so that those functions\n      match the function type expected by bli_pthread_switch_on()/_off().\n      Those init/finalize functions now return 0 to indicate success, which\n      is needed so that the switch actually changes state from off to on\n      and vice versa.\n    - Defined bli_thread_reset(), which copies the contents of the\n      global_rntm_at_init() struct into the global_rntm struct (for the\n      current application thread).\n    - Guard calls to bli_pthread_mutex_lock()/_unlock() in\n      - bli_pack_set_pack_a() and _pack_b()\n      - bli_rntm_init_from_global()\n      - bli_thread_set_ways()\n      - bli_thread_set_num_threads()\n      - bli_thread_set_thread_impl()\n      - bli_thread_reset()\n      - bli_l3_ind_oper_set_enable()\n      with #ifdef BLIS_DISABLE_TLS (since TLS precludes the possibility of\n      race conditions).\n    - In frame/base/bli_rntm.c, declare global_rntm, global_rntm_at_init,\n      and global_rntm_mutex as BLIS_THREAD_LOCAL so that separate\n      application threads can change the number of ways of BLIS parallelism\n      independently from one another.\n    - Access global_rntm only via a new private (not exported) function,\n      bli_global_rntm(). Defined a similar function for a rntm_t new to\n      this commit, global_rntm_at_init, which preserves the state of the\n      global rntm at initialization-time.\n    - In frame/3/bli_l3_ind.c, added a guard to the declaration of the\n      static variable oper_st_mutex with #ifdef BLIS_DISABLE_TLS so that the\n      mutex is omitted altogether when TLS is enabled (which prevents the\n      compiler from warning about an unused variable).\n    - Removed redundant code from bli_thread.c:\n        #ifdef BLIS_ENABLE_HPX\n        #include \"bli_thread_hpx.h\"\n        #endif\n      since this code is already present in bli_thread.h.\n    - Thanks to Minh Quan Ho for his review of and feedback on this commit.\n    - Comment updates.\n\ncommit fa6a9b24ae2ddbd5f30f657d46004843581c768c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Aug 19 12:44:34 2023 -0500\n\n    Fixed error when using common.mk from testsuite. (#768)\n    \n    Details:\n    - Commit 2db31e0 (#755) inserted logic into common.mk that attempts to\n      preprocess build/detect/android/bionic.h to determine whether the\n      __BIONIC__ macro is defined (in which case -lrt should not be included\n      in LDFLAGS). However, the path to bionic.h was encoded without regard\n      to DIST_PATH, and so utilizing common.mk anywhere that isn't the top-\n      level directory (such as in the testsuite directory) resulted in a\n      compiler error:\n    \n        gcc: error: build/detect/android/bionic.h: No such file or directory\n        gcc: fatal error: no input files\n        compilation terminated.\n    \n      This commit adds a $(DIST_PATH) prefix to the path to bionic.h so that\n      it can be located from other applications' Makefiles that use BLIS's\n      makefile fragments.\n\ncommit 634e532c8dcce7383d96ba33276df65c656b2198\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Aug 9 21:54:49 2023 -0500\n\n    Set thrcomm timpl_t id inside init functions. (#766)\n    \n    Details:\n    - Previously, the timpl_t id being used when a thrcomm_t is being\n      initialized was set within the bli_thrcomm_init() dispatch function\n      after the timpl_t-specific bli_thrcomm_init_*() function returned. But\n      it just occurred to me that each bli_thrcomm_init_*() function already\n      intrinsically knows its own timpl_t value. This commit shifts the\n      setting of the thrcomm_t.ti field into the corresponding\n      bli_thrcomm_init_*() function for each timpl_t type (e.g. single,\n      openmp, pthreads, hpx).\n    - Removed long-deprecated code dating back nearly 10 years.\n    - Whitespace changes\n    - Comment updates.\n\ncommit 3cf17b4a91232709bc6a205b0e4d7ecc96579aa9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Aug 7 13:46:20 2023 -0500\n\n    Small fixes/improvements to docs/Multithreading.md. (#764)\n    \n    Details:\n    - Added reminders that #include \"blis.h\" must be added to source files\n      in order to access BLIS API function prototypes. Thanks to Barry Smith\n      for suggesting this improvement.\n    - Fixed pre-existing typos.\n    - CREDITS file update.\n\ncommit dbc79812c390f812c7bf030bfcf87e947a1443c4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 28 18:16:38 2023 -0500\n\n    CREDITS file update.\n    \n    Details:\n    - Thanks to Igor Zhuravlov for PR #753 (commit 915daaa).\n\ncommit 915daaa43cd189c86d93d72cd249714f126e9425\nAuthor: Igor Zhuravlov <zhuravlov.ip@ya.ru>\nDate:   Thu Jul 27 20:33:59 2023 +0000\n\n    Fix typos in docs + example code comments. (#753)\n    \n    Details:\n    - Fixed various typos in API documentation in docs/BLIS*API.md and\n      comments in the source code examples within examples/?api/*.c.\n\ncommit 2db31e057e7e9c97fc60021b5ae72a01a48d7588\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Thu Jul 27 15:27:21 2023 -0500\n\n    Exclude -lrt on Android with Bionic libraries. (#755)\n    \n    Details:\n    - Added build/detect/android/bionic.h header to test whether the\n      __BIONIC__ cpp macro is defined.\n    - In common.mk, only add -lrt to LDFLAGS when Bionic is not present.\n    - CREDITS file update.\n\ncommit 22ad8c1b752364784f320168b31995945ad84a59\nAuthor: ct-clmsn <ct.clmsn@gmail.com>\nDate:   Thu Jul 27 16:23:29 2023 -0400\n\n    Small fixes to support hpx in the testsuite (#759)\n    \n    Details:\n    - Minor changes to test_libblis.c to support hpx.\n\ncommit c91b41d022e33da82b3b06c82be047a29873d9b6\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Wed Jul 26 14:37:08 2023 -0500\n\n    Auto-detect the RISC-V ABI of the compiler and use -mabi= during RISC-V Builds (#750)\n    \n    Details:\n    - Generate a build error if there is a 32/64-bit mismatch between the\n      RISC-V ABI or architecture and the BLIS configuration selected.\n    - Handle Q, Zicsr, ZiFencei, Zba, Zbb, Zbc, Zbs and Zfh extensions in\n      the RISC-V architecture auto-detection. ZiFencei and Zicsr is not\n      detectable with built-in RISC-V macros right now.\n    - ZiFencei is not important for BLIS because doesn't it have\n      Just-In-Time compilation or self-modifying code, and Zicsr is implied\n      by the floating-point extensions, which are required for good\n      performance in BLIS.\n    - Move RISC-V autodetect header files to build/detect/riscv/.\n\ncommit a0b04e3c007f1207e5678bf20c07752906742fb7 (origin/aocl-blas, aocl-blas)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 26 17:59:21 2023 -0500\n\n    Rewrote regen-symbols.sh (gen-libblis-symbols.sh). (#751)\n    \n    Details:\n    - Wrote an alternative to regen-symbols.sh, gen-libblis-symbols.sh,\n      that generates a list of exported symbols from the monolithic blis.h\n      file rather than peeking inside of the shared object via nm. (This new\n      script lives in the 'build' directory and the older script has been\n      retired to build/old.) Special thanks to Devin Matthews for authoring\n      gen-libblis-symbols.sh.\n    - Added a 'symbols' target to the top-level Makefile which will refresh\n      build/libblis-symbols.def, with supporting changes to common.mk.\n    - Updates to build/libblis-symbols.def using the new symbol-generating\n      script.\n\ncommit 6b894c30b9bb2c2518848d74e4c8d96844f77f24\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 12 17:22:44 2023 -0500\n\n    Rewrote/fixed broken tree barrier implementation.\n    \n    Details:\n    - Rewrote the defintion of bli_thrcomm_tree_barrier() so that it (a)\n      actually worked again, and (b) used atomics instead of a basic C99\n      spin loop. (Note that the conventional barrier implementation is\n      still enabled by default; the tree barrier must be toggled on\n      manually within the configuration.)\n    - Added an early return to the definition of bli_thrcomm_barrier() in\n      the cases where comm == NULL or comm->n_threads == 1.\n    - Reordered thread-related and thread-dependent header #include\n      directives in blis.h so that the BLIS_TREE_BARRIER and\n      BLIS_TREE_BARRIER_ARITY macros, which would be defined in the target\n      configuration's in the bli_family_*.h file, would be #included prior\n      to the inclusion of the thrcomm_t header that uses them.\n    - Changed the type of barrier_t.count from 'int' to 'dim_t'.\n    - Changed the type of barrier_t.signal from 'volatile int' to 'gint_t'.\n    - Special thanks to Leick Robinson for contributing these changes.\n    - Whitespace changes.\n\ncommit d639554894b6252a86bd3164921bce6fbb9e3b5e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jun 7 16:11:14 2023 -0500\n\n    Pad thrcomm_t fields to avoid false sharing.\n    \n    Details:\n    - Inserted a cache line of padding between various fields of the\n      thrcomm_t and, in the case of the (presently defunct) tree barrier,\n      fields of the barrier_t. This additional padding ensures that these\n      fields, which both serve different purposes when performing a thread\n      barrier, are only accessed when needed (and not just due to their\n      spatial locality with their cache line neighbors).\n    - Added a new cpp macro constant, BLIS_CACHE_LINE_SIZE, to\n      bli_config_macro_defs. This new constant defines the size of a cache\n      line (in bytes) and defaults to 64.\n    - Special thanks to Leick Robinson for discovering this false sharing\n      issue and developing/submitting the patch.\n\ncommit 89b7863fc9a88903917deedc6a5ad9fd17f83713\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon May 8 16:51:18 2023 -0500\n\n    Fix 1m enablement for herk/her2k/syrk/syr2k. (#743)\n    \n    Details:\n    - Ever since 28b0982, herk, her2k, syrk, and syr2k have been implemented\n      in terms of the gemmt expert API. And since the decision of which\n      induced method to use (1m or native) is made *below* the level of the\n      expert API, executing any of {herk,her2k,syrk,syr2k} results in BLIS\n      checking the enablement status for gemmt.\n    - This commit applies a band-aid of sorts to this issue by modifying\n      bli_l3_ind_oper_get_enable() and bli_l3_ind_oper_set_enable() so that\n      any attempts to query or modify the internal enablement status for\n      herk, her2k, syrk, or syr2k instead does so for gemmt.\n    - This solution isn't perfect since, in theory, the user could enable 1m\n      for, say, herk but then disable it for syrk, and then be confused when\n      herk runs via native execution. But we don't anticipate that users\n      modify 1m enablement at the operation level, and so in practice this\n      solution is likely fine for now.\n\ncommit 138de3b3e88c5bf7d8718c45c88811771cf42db8\nAuthor: Ajay Panyala <ajay.panyala@gmail.com>\nDate:   Sun May 7 13:01:38 2023 -0700\n\n    add nvhpc compiler support (#719)\n    \n    Add detection of the NVIDIA nvhpc compiler (`nvc`) in `configure`, and adjust some warning options in `config.mk`. Currently, no specific options for `nvc` have been added in the relevant configurations so it may not be usable without further tweaks.\n\ncommit 0873c0f6ed03fea321d1631b3d1a385a306aa797\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun May 7 14:03:19 2023 -0500\n\n    Consolidate INSERT_ macro sets via variadic macros. (#744)\n    \n    Details:\n    - Consolidated INSERT_GENTFUNC_* (and corresponding GENTPROT) macro sets\n      using variadic macros (__VA_ARGS__), which means we no longer need a\n      different INSERT_ macro for each possible number of arguments the\n      macro might take. This change seems reasonable given that variadic\n      macros are a standard C99 feature and widely supported. I took care\n      not to use variadic macros where 0 variadic arguments are expected\n      since that is a non-standard extension.\n    - Added pre-typecast parentheses to arithmetic expressions in printf()\n      statements in bli_thread_range_tlb.c.\n\ncommit ef9d3e6675320a53e7cb477c16b01388e708b1da\nAuthor: h-vetinari <h.vetinari@gmx.com>\nDate:   Sun May 7 04:59:35 2023 +1100\n\n    Added missing #include <io.h> for Windows. (#747)\n    \n    Details:\n    - This commit fixes issue #746, in which the _access() function (called\n      from within blastest/f2c/open.c) is undeclared when compiling on\n      Windows with clang 16.\n\ncommit 6fd9aabb03d172a792a7eeb106c7d965cf038421\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri May 5 14:22:52 2023 -0500\n\n    Fix bug in detecting Fortran compiler vendor (#745)\n    \n    `FC` was used instead of `found_fc`.\n\ncommit 8215b02f99aa77ecc7d813508c247565115319d7\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Wed Apr 12 12:59:27 2023 -0500\n\n    Apply #738 to make_defs.mk of RISC-V subconfigs. (#740)\n    \n    Details:\n    - PR #738 -- which moved -fPIC flag insertion responsibilities from\n      common.mk to the subconfigs' individual make_defs.mk files -- was\n      merged shortly before the introduction of new RISC-V subconfigs in\n      #693. This commit brings those RISC-V subconfigs up to date with the\n      new -fPIC conventions.\n\ncommit 6b38c5ac07a2a27738674784e58aa699bf895447\nAuthor: angsch <17718454+angsch@users.noreply.github.com>\nDate:   Tue Apr 11 19:27:43 2023 +0200\n\n    Add RISC-V target (#693)\n    \n    Details:\n    - There are four RISC-V base configurations: 'rv32i', 'rv32iv', 'rv64i',\n      and 'rv64iv', namely the 32-bit and 64-bit implementations with and\n      without the 'V' vector extension. Additional extensions such as 'M'\n      (multiplication), 'A' (atomics), 'F' ('float' hardware support), 'D'\n      ('double' hardware support), and 'C' (compressed-length instructions),\n      are automatically used when available. If they are not available, then\n      software equivalents (e.g., softfloat and -latomic) are used.\n    - './configure auto' can be invoked on a RISC-V build platform, and will\n      automatically detect RISC-V CPU extensions through the RISC-V C API:\n      https://github.com/riscv-non-isa/riscv-c-api-doc/blob/master/riscv-c-api.md\n    - The assembly kernels assume the presence of the vector extension\n      RVV 1.0.\n    - It is possible to build 'rv[32,64]iv' for any value of VLEN.\n      However, if VLEN < 128, the targets will fall back to the generic\n      kernels and blocksizes.\n    - The vector microkernels are vector-length agnostic and work with\n      every VLEN >=128, but are expected to work best with smaller vector\n      lengths, i.e., VLEN <= 512.\n    - The assembly kernels cover column major storage (rs_c == 1).\n    - The blocksizes aim at being a good generic choice for out-of-order\n      cores. They are not tuned to a specific RISC-V HPC core.\n    - The vector kernels have been tested using vlen={128,256,512}.\n    - The single- and double-precision assembly code routines for 'sgemm'\n      and 'dgemm', or for 'cgemm' and 'zgemm', are combined in their RISC-V\n      vector assembly source code, and are differentiated only with macros.\n    - The XLEN=32 and XLEN=64 versions of the RISC-V assembly code are\n      identical, except that callee-saved registers are saved and restored\n      differently. There are RISC-V assembly code #include files for\n      handling the saving and restoring of callee-saved registers, and they\n      are future-proof if ever XLEN=128.\n    - Multiplications, such as computing array strides and offsets, are\n      performed in C, and later passed to the RISC-V assembly kernels. This\n      is so that the compiler can determine whether the 'M' (multiply)\n      extension is available and use multiplication instructions, or call\n      library helper functions instead.\n    - A new macro called bli_static_assert() has been added to perform\n      static assertions at compile-time, regardless of the C/C++ dialect of\n      the compiler. The original motivation of this was to ensure that\n      calling RISC-V assembly kernels would not silently truncate arguments\n      of type 'dim_t' or 'inc_t' (so-called \"narrowing conversions\").\n    - RISC-V CI tests have been added to Travis CI, using the\n      riscv-gnu-toolchain cross-compiler, and qemu simulator.\n    - Thanks to Lee Killough for collaborating on this commit.\n\ncommit 593d01761910af6a9a16ee0ac097142732f73c29\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Apr 8 16:44:16 2023 -0500\n\n    CREDITS file update.\n\ncommit 259f68479671bbaf9c5986759aaa0004f9b05a24\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 7 16:11:34 2023 -0500\n\n    CREDITS file update.\n    \n    Details:\n    - Added attributions associated with commits:\n      - 98d4678 9b1beec: @bartoldeman\n      - 2b05948 059f151: @ct-clmsn\n    - Reordered attirubtion for @decandia50.\n\ncommit aea8e1d9243631635ca788d5e14f0f29328e637d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Apr 3 12:17:51 2023 -0500\n\n    Optionally disable thread-local storage. (#735)\n    \n    Details:\n    - Implemented a new configure option, --disable-tls, which allows the\n      user to optionally disable the use of thread-local storage qualifiers\n      on static variables in BLIS. This option will rarely be needed, but\n      in some situations may allow BLIS to compile when TLS is unavailable.\n      Thanks to Nick Knight for suggesting this option.\n    - Unlike the --disable-system option, --disable-tls does not forcibly\n      disable threading. Instead, warnings of the possible consequences of\n      using threading with TLS disabled are added to:\n      - the output of './configure --help';\n      - the output of 'configure' the --disable-tls option is parsed;\n      - the informational header output by the testsuite.\n      Thanks to Minh Quan Ho for suggesting these warnings.\n    - Modified frame/include/bli_lang_defs.h so that BLIS_THREAD_LOCAL is\n      defined to nothing when BLIS_ENABLE_TLS is not defined.\n    - Defined bli_info_get_enable_tls(), which returns whether the cpp macro\n      BLIS_ENABLE_TLS was defined.\n    - Edited --disable-system configure status output for clarity.\n    - Whitespace updates.\n\ncommit 3f1432abe75cc306ef90a04381d7e0d8739fded8\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Mon Apr 3 12:10:59 2023 -0500\n\n    Add output.testsuite to .gitignore (#736)\n    \n    Details:\n    - Added `output.testsuite` to .gitignore since it was previously not\n      being matched by `output.testsuite.*`.\n\ncommit 38fc5237520a2f20914a9de8bb14d5999009b3fb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 30 17:30:07 2023 -0500\n\n    Added mm_algorithm pdf files (bp and pb).\n    \n    Details:\n    - Added PDF versions of the PowerPoint files added in 17cd260.\n\ncommit 17cd260cb504b2f3997c32daec77f4c828fbb32b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 29 21:47:12 2023 -0500\n\n    Added mm_algorithm pptx files (bp and pb).\n    \n    Details:\n    - Added two PowerPoint files that contain slides depicting the classic\n      Goto algorithm for matrix multiplication as well as its sister\n      \"panel-block\" algorithm. These files reside in docs/diagrams.\n\ncommit 9d778e0f7c94d8752dd578101e4fc6893a1f54ef\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 29 17:36:49 2023 -0500\n\n    Move -fPIC insertion to subconfigs' make_defs.mk. (#738)\n    \n    * Move -fPIC insertion to subconfigs' make_defs.mk.\n    \n    Details:\n    - Previously, common.mk was appending -fPIC to the CPICFLAGS variables\n      set within the various subconfigurations' make_defs.mk files. This\n      seemed somewhat unintuitive, and so now the -fPIC flag is assigned to\n      the various subconfigs' CPICFLAGS variables in the respective\n      make_defs.mk files.\n    - This also commit changes the logic in common.mk so that instead of\n      appending, the variable is overwritten, but now *only* in the case\n      of Windows (since apparently -fPIC needs to be omitted there). Thanks\n      to Nick Knight for catching and reporting this weirdness.\n\ncommit 04090df01175477394d1e73af2e5769751d47cd6\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 27 14:13:10 2023 -0500\n\n    Fixed compile errors with `BLIS_DISABLE_BLAS_DEFS`. (#730)\n    \n    * Fixed compile errors with BLIS_DISABLE_BLAS_DEFS.\n    \n    Details:\n    - This commit fixes a compile-time error related to the type definition\n      (prototype) of dsdot_() when BLIS_DISABLE_BLAS_DEFS is defined by the\n      application (or the configuration), which is actually a symptom of a\n      larger design issue when disabling BLAS prototypes. The macro was\n      intended to allow applications to bring their own BLAS prototypes and\n      suppress the inclusion of duplicate (or possibly conflicting)\n      prototypes within blis.h. However, prototypes are still needed during\n      compilation even if they are ultimately omitted from blis.h. The\n      problem is that almost every source file in BLIS--including the BLAS\n      compatibility layer--only includes one header (blis.h), and if we\n      were to #include a new header in the BLAS source files (to isolate\n      only the BLAS prototypes), we would also have to make the build system\n      aware of the location of those headers. Thanks to Edward Smyth of AMD\n      for reporting this issue.\n    - The solution I settled upon was to remove all cpp guards from all BLAS\n      headers (by changing them to #if 1, for easy search-and-replace\n      anchoring in the future if we ever need to re-insert guards) and\n      modifying bli_blas.h so that the BLAS prototypes are #included if\n      either (a) BLIS_ENABLE_BLAS_DEFS is defined, or (b)\n      BLIS_ENABLE_BLAS_DEFS is *not* defined but BLIS_IS_BUILDING_LIBRARY\n      *is* defined. (Thanks to Devin Matthews for steering me away from an\n      inferior solution.)\n    - This commit also spins off the actual BLAS prototypes/definitions to\n      a separate file, bli_blas_defs.h.\n    - CREDITS file update.\n\ncommit 5f841307f668f65b7ed5a479bd8374d2581208cf\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 24 20:05:13 2023 -0500\n\n    Omit -fPIC if shared library build is disabled. (#732)\n    \n    Details:\n    - Updated common.mk so that when --disable-shared option is given to\n      configure:\n      1. The -fPIC compiler flag is omitted from the individual\n         configuration family members' CPICFLAGS variables (which are\n         initialized in each subconfig's make_defs.mk file); and\n      2. The BUILD_SYMFLAGS variable, which contains compiler flags needed\n         to control the symbol export behavior, is left blank.\n    - The net result of these changes is that flags specific to shared\n      library builds are only used when a shared library is actually\n      scheduled to be built. Thanks to Nick Knight for reporting this issue.\n    - CREDITS file update.\n\ncommit 72c37eb80f964b7840377076e5009aec5b29d320 (origin/riscv)\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Thu Mar 23 16:01:55 2023 -0500\n\n    Updated configure to pass all shellcheck checks. (#729)\n    \n    Details:\n    - Modified configure so that it passes all 'shellcheck' checks,\n      disabling ones which we violate but which are just stylistic, or are\n      special cases in our code.\n    - Miscellaneous other minor changes, such as rearranged redirections in\n      long sed/perl pipes to look more natural.\n    - Whitespace tweaks.\n\ncommit 60f36347c16e6336215cd52b4e5f3c0f96e7c253\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Feb 22 20:37:30 2023 -0600\n\n    Fixed bugs in scal2v ref kernel when alpha == 1. (#728)\n    \n    Details:\n    - Fixed a typo bug in ref_kernels/1/bli_scal2v_ref.c where the\n      conditional that was supposed to be checking for cases when alpha is\n      equal to 1.0 (so that copyv could be used instead of scal2v) was\n      instead erroneously comparing alpha against 0.0.\n    - Fixed another bug in the same function whereby BLIS_NO_CONJUGATE was\n      erroneously being passed into copyv instead of the kernel's conjx\n      parameter. This second bug was inert, however, due to the first bug\n      since the \"alpha == 0.0\" case was already being handled, resulting in\n      the code block never executing.\n\ncommit fab18dca46618799bb0b4f652820b33d36a5d4d4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Feb 22 16:50:00 2023 -0600\n\n    Use 'void*' datatypes in kernel APIs. (#727)\n    \n    Details:\n    - Migrated all kernel APIs to use void* pointers instead of float*,\n      double*, scomplex*, and dcomplex* pointers. This allows us to define\n      many fewer kernel function pointer types, which also makes it much\n      easier to know which function pointer type to use at any given time.\n      (For example, whereas before there was ?axpyv_ker_ft, ?axpyv_ker_vft,\n      and axpyv_ker_vft, now there is just axpyv_ker_ft, which is equivalent\n      so what axpyv_ker_vft used to be.)\n    - Refactored how kernel function prototypes and kernel function types\n      are defined so as to reduce redundant code. Specifically, the\n      function signatures (excluding cntx_t* and, in the case of level-3\n      microkernels, auxinfo_t*) are defined in new headers named, for\n      example, bli_l1v_ker_params.h. Those signatures are reused via macro\n      instantiation when defining both kernel prototypes and kernel function\n      types. This will hopefully make it a little easier to update, add, and\n      manage kernel APIs going forward.\n    - Updated all reference kernels according to the aforementioned switch\n      to void* pointers.\n    - Updated all optimzied kernels according to the aforementioned switch\n      to void* pointers. This sometimes required renaming variables,\n      inserting typecasting so that pointer arithmetic could continue to\n      function as intended, and related tweaks.\n    - Updated sandbox/gemmlike according to the aforementioned switch to\n      void* pointers.\n    - Renamed:\n      - frame/1/bli_l1v_ft_ker.h    -> frame/1/bli_l1v_ker_ft.h\n      - frame/1f/bli_l1f_ft_ker.h   -> frame/1f/bli_l1f_ker_ft.h\n      - frame/1m/bli_l1m_ft_ker.h   -> frame/1m/bli_l1m_ker_ft.h\n      - frame/3/bli_l1m_ft_ukr.h    -> frame/3/bli_l1m_ukr_ft.h\n      - frame/3/bli_l3_sup_ft_ker.h -> frame/3/bli_l3_sup_ker_ft.h\n      to better align with naming of neighboring files.\n    - Added the missing \"void* params\" argument to bli_?packm_struc_cxk() in\n      frame/1m/packm/bli_packm_struc_cxk.c. This argument is being passed\n      into the function from bli_packm_blk_var1(), but wasn't being \"caught\"\n      by the function definition itself. The function prototype for\n      bli_?packm_struc_cxk() also needed updating.\n    - Reordered the last two parameters in bli_?packm_struc_cxk().\n      (Previously, the \"void* params\" was passed in after the\n      \"const cntx_t* cntx\", although because of the above bug the params\n      argument wasn't actually present in the function definition.)\n\ncommit 93c63d1f469c4650df082d0fa2f29c46db0e25f5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 20 11:14:23 2023 -0600\n\n    Use 'const' pointers in kernel APIs. (#722)\n    \n    Details:\n    - Qualified all input-only data pointers in the various kernel APIs with\n      the 'const' keyword while also removing 'restrict' from those kernel\n      APIs. (Use of 'restrict' was maintained in kernel implementations,\n      where appropriate.) This affected the function pointer types defined\n      for all of the kernels, their prototypes, and the reference and\n      optimized kernel definitions' signatures.\n    - Templatized the definitions of copys_mxn and xpbys_mxn static inline\n      functions.\n    - Minor whitespace and style changes (e.g. combining local variable\n      declaration and initialization into a single statement).\n    - Removed some unused kernel code left in 'old' directories.\n    - Thanks to Nisanth M P for helping to validate changes to the power10\n      microkernels.\n\ncommit 4e18cd34f909c5045597f411340ede3a5e0bc5e1\nAuthor: RuQing Xu <ruqing.xu@phys.s.u-tokyo.ac.jp>\nDate:   Sun Feb 19 04:18:41 2023 +0900\n\n    Restored ArmSVE general storage case. (#708)\n    \n    Details:\n    - Restored general storage case in armsve kernels.\n    - Reason for doing this: Though real `g`-storage is difficult to\n      speedup, `g`-codepath here can provide a good support for\n      transposed-storage. i.e. at least good for `GEMM_UKR_SETUP_CT_AMBI`.\n    - By experience, this solution is only *a little* slower than in-reg\n      transpose. Plus in-reg transpose is only possible for a fixed VL in\n      our case.\n\ncommit 0ba6e9eafb1e667373d9dbc2aa045557921f33e2\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Sat Feb 18 13:15:42 2023 -0600\n\n    Refined emacs handling of indentation. (#717)\n    \n    Details:\n    - This refines the emacs autoformatting to be better in line with\n      contribution guidelines.\n    - Removed a stray shebang in a .mk file which confuses emacs about the\n      file mode, which should be makefile-mode. (emacs also removes stray\n      whitespace at the ends of lines.)\n\ncommit 059f15105b1643fe56084f883c22b3cadf368b39\nAuthor: ct-clmsn <ct.clmsn@gmail.com>\nDate:   Sat Feb 18 14:13:23 2023 -0500\n\n    Updated hpx namespace for make_count_shape. (#725)\n    \n    Details:\n    - The hpx namespace for *counting_shape changed. This PR updates the use\n      of counting_shape in blis to comply with the change in hpx.\n    - Co-authored-by: ctaylor <ctaylor@tactcomplabs.com>\n\ncommit 0b421eff130b5c896edcc09e7358d18564d177e9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Feb 18 13:11:41 2023 -0600\n\n    Added an 'arm64' entry to `.travis.yml`. (#726)\n    \n    Details:\n    - Added a new 'arm64' entry to the .travis.yml file in an attempt to get\n      Travis CI to compile both NEON and SVE kernels, even if only NEON\n      kernels are exercised in the testing. With this new 'arm64' entry, the\n      'cortexa57' entry becomes redundant and may be removed. Thanks to\n      RuQing Xu for this suggestion.\n    - Previously, the macro BLIS_SIMD_MAX_SIZE was *not* being set in\n      bli_kernels_arm64.h, which meant that the default value of 64 was\n      being used. This caused a runtime consistency check to fail in\n      bli_gks.c (in Travis CI), one which requires that\n    \n        mr * nr * dt_size > BLIS_STACK_BUF_MAX_SIZE\n    \n      for all datatype sizes dt_size, where BLIS_STACK_BUF_MAX_SIZE is\n      defined as\n    \n        BLIS_SIMD_MAX_NUM_REGISTERS * BLIS_SIMD_MAX_SIZE * 2\n    \n      This commit increases BLIS_SIMD_MAX_SIZE to 128 for the 'arm64'\n      configuration, thus overriding the default and (hopefully) avoiding\n      the aforementioned consistency check failures.\n    - Appended '|| cat ./output.testsuite' to all 'make' commands in\n      travis/do_testsuite.sh. Thanks to RuQing Xu for this suggestion.\n    - Whitespace changes.\n\ncommit b1d3fc7e5b0927086e336a23f16ea59aa3611ccb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Feb 10 15:34:47 2023 -0600\n\n    Redirect grep stderr to /dev/null. (#723)\n    \n    Details:\n    - In common.mk, added a redirection of stderr to /dev/null for the grep\n      command being used to gather a list of header files #included from\n      bli_cntx_ref.c. The redirection is desirable because as of grep 3.8,\n      regular expressions with \"stray\" backslashes trigger warnings [1].\n      But removing the backslash seems to break the BLIS build system when\n      using pre-3.8 versions of grep, so this seems to be easiest way to\n      satisfy the BLIS build system for both pre- and post-3.8 grep\n      environments.\n    \n      [1] https://lists.gnu.org/archive/html/info-gnu/2022-09/msg00001.html\n\ncommit e3d352f1fcc93e6a46fde1aa4a7f0a18fb27bd42\nAuthor: Nisanth M P <nisanthmp.01@gmail.com>\nDate:   Wed Feb 8 06:11:41 2023 +0530\n\n    Added runtime selection of 'power' config family. (#718)\n    \n    Details:\n    - Created a 'power' umbrella configuration family, which, when targeted\n      at configure-time, will build both 'power9' and 'power10' subconfigs.\n      (With this feature, a BLIS shared library could be compiled on a\n      power9 system and run on power10 and vice-versa. Unoptimised code\n      will execute if it is linked and run on any other generic system.)\n    - This new configuration family will only work with gcc, since that is\n      the only compiler supported by both power9 and power10 subconfigs in\n      BLIS.\n    - Documented power9 and power10 as supported microarchitectures in the\n      docs/HardwareSupport.md document.\n\ncommit e730c685d09336b3bd09e86c94330c4eba967f3e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 6 15:31:54 2023 -0600\n\n    Define `BLIS_VERSION_STRING` in `blis.h`. (#720)\n    \n    Details:\n    - Previously, the version string was communicated from configure to\n      config.mk (via the config.mk.in template), where it was included via\n      the top-level Makefile, where it was then used to define the\n      preprocessor macro BLIS_VERSION_STRING via a command line argument to\n      the compiler (via -D). This macro is then used within bli_info.c to\n      initialize a static string which can then be queried via the\n      bli_info_get_version_str() function. However, there are some\n      applications that may find utility in being able to access the version\n      string by inspecting the monolithic (flattened) blis.h header file\n      that is created at compile time and installed alongside the library.\n      This commit moves the definition of BLIS_VERSION_STRING into\n      bli_config.h (via the bli_config.h.in template) so that it is\n      embedded in blis.h. The version string is now available in three\n      places:\n      - the static/shared library, which is installed in the 'lib'\n        subdirectory of the install prefix (query-able via the\n        bli_info_get_version_str() function);\n      - the config.mk makefile fragment, which is installed in the 'share'\n        subdirectory of the install prefix (in the VERSION variable);\n      - the blis.h header file, which is installed in the 'include'\n        subdirectory of the install prefix (via the BLIS_VERSION_STRING\n        macro constant).\n      Thanks to Mohsen Aznaveh and Tim Davis for providing the idea for this\n      change.\n    - CREDITS file update.\n\ncommit dc5d00a6ce0350cd82859d8c24f23d98f205d8db\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Fri Jan 27 17:36:47 2023 -0600\n\n    Typecast printf() args to avoid compiler warnings. (#716)\n    \n    Details:\n    - In bli_thread_range_tlb.c, typecast integer arguments passed to\n      printf() -- which are typically disabled unless debugging -- to type\n      \"long\" to guarantee a match to the \"%ld\" format specifiers used in\n      those calls. This avoids spurious warnings with certain compilers in\n      certain toolchain environments, such as 32-bit RISC-V (rv32iv).\n\ncommit ecbcf4008815035c695822fcaf106477debff89a\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Wed Jan 18 20:35:50 2023 -0600\n\n    Use here-document for 'configure --help' output. (#714)\n    \n    Details:\n    - Changed the configure script function that outputs \"--help\" text to do\n      so via so-called \"here-document\" syntax for improved readability and\n      maintainability. The change eliminates hundreds of echo statements and\n      makes it easier to change existing configure options' help text, along\n      with other benefits such as eliminating the need to escape double-\n      quote characters (\").\n\ncommit c334ec278f5e2a101625629b2e13bbf1b38dede5\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Jan 18 13:10:19 2023 -0600\n\n    Merge tlb- and slab/rr-specific gemm macrokernels. (#711)\n    \n    Details:\n    - Merged the tlb-specific gemm macrokernel (_var2b) with the slab/rr-\n      specific one (var2) so that a single function can be compiled with\n      either tlb or slab/rr support, depending on the value of the\n      BLIS_ENABLE_JRIR_TLB, _SLAB, and _RR. This is done by incorporating\n      information from both approaches: the start/end/inc for the JR and IR\n      loops from slab or rr partitioning; and the number of assigned\n      microtiles, plus the starting IR dimension offset for all iterations\n      after the first (ir_next). With these changes, slab, rr, and tlb can\n      all be parameterized by initializing a similar set of variables prior\n      to the jr loop.\n    - Removed the wrap-around logic that sets the \"b_next\" field of the\n      auxinfo_t struct, which executes during the last IR iteration of the\n      last JR iteration. The potential benefit of this code is so minor\n      (and hinges on the microkernel making use of the b_next field) that\n      it's arguably not worth including. The code also does the wrong\n      thing for some threads whenever JR_NT > 1, since only thread 0 (in the\n      JR group) would even compute with the first micropanel of B.\n    - Re-expressed the definition of bli_is_last_iter_slrr so that slab and\n      tlb use the same code rather than rr and tlb.\n    - Adjusted the initialization of the gemm control tree accordingly.\n\ncommit 5793a77937aee9847a5692c8e44b36a6380800a1\nAuthor: HarshDave12 <122850830+HarshDave12@users.noreply.github.com>\nDate:   Tue Jan 17 21:55:02 2023 +0530\n\n    Fixed mis-mapped instruction for VEXTRACTF64X2. (#713)\n    \n    Details:\n    - This commit fixes a typo in the macro definition for the extended\n      inline assembly macro VEXTRACTF64X2 in bli_x86_asm_macros.h. The macro\n      was previously defined (incorrectly) in terms of the vextractf64x4\n      instruction rather than vextractf64x2.\n    - CREDITS file update.\n\ncommit 16d2e9ea9ca0853197b416eba701b840a8587bca\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jan 13 20:03:01 2023 -0600\n\n    Defined lt, lte, gt, gte + misc. other updates. (#712)\n    \n    Details:\n    - Changed invertsc operation to be a non-destructive operation; that is,\n      it now takes separate input and output operands. This change applies\n      to both the object and typed APIs.\n    - Defined an alternative square root operation, sqrtrsc, which, when\n      operating on complex scalars, assumes the imaginary part of the input\n      to be zero.\n    - Changed the semantics of addm, subm, copym, axpym, scal2m, and xpbym\n      so that when the source matrix has an implicit unit diagonal, the\n      operation leaves the diagonal of the destination matrix untouched.\n      Previously, the operations would interpret an implicit unit diagonal\n      on the source matrix as a request to manifest the unit diagonal\n      *explicitly* on output (either as something to copy in the case of\n      copym, or something to compute with in the cases of addm, subm, axpym,\n      scal2m, and xpbym). It turns out that this behavior was too cute by\n      half and could cause unintended headaches for practical use cases.\n      (This change in behavior also required small modifications to the trmv\n      and trsv testsuite modules so that they would properly test matrices\n      with unit diagonals.)\n    - Added missing dependencies for copym to gemv, ger, hemv, trmv, and\n      trsv testsuite modules.\n    - Implemented level-0-like ltsc, ltesc, gtsc, gtesc operations in\n      frame/util, which use lt, lte, gt, and gte level-0 scalar macros.\n    - Trivial variable rename in bli_part.c to harmonize with other\n      variable naming conventions.\n\ncommit 9a366b14fe52c469f4664ef5dd93d85be8d97baa\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jan 12 13:07:22 2023 -0600\n\n    Implement cntx_t pointer caching in gks. (#709)\n    \n    Details:\n    - Refactored the gks cntx_t query functions so that: (1) there is a\n      clearer pattern of similarity between functions that query a native\n      context and those that query its induced (1m) counterpart; and (2)\n      queried cntx_t pointers (for both native and induced cntx_t pointers)\n      are cached (by default), or deep-queried upon each invocation,\n      depending on whether cpp macro BLIS_ENABLE_GKS_CACHING is defined.\n    - Refactored query-related functions in bli_arch.c to cache the queried\n      arch_t value (by default), or deep-query the arch_t value upon each\n      invocation, depending on whether cpp macro BLIS_ENABLE_GKS_CACHING is\n      defined.\n    - Tweaked the behavior of bli_gks_query_ind_cntx_impl() (formerly named\n      bli_gks_query_ind_cntx()) so that the induced method cntx_t struct is\n      repopulated each time the function is called. (It is still only\n      allocated once on first call.) This was mostly done in preparation for\n      some future in which the arch_t value might change at runtime. In such\n      a scenario, the induced method context would need to be recalculated\n      any time the native context changes.\n    - Added preprocessor logic to bli_config_macro_defs.h to handle enabling\n      or disabling of cntx_t pointer caching (via BLIS_ENABLE_GKS_CACHING).\n    - For now, cntx_t pointer caching is enabled by default and does not\n      correspond to any official configure option. Disabling can be done\n      by inserting a #define for BLIS_DISABLE_GKS_CACHING into the\n      appropriate bli_family_*.h header file within the configuration of\n      interest.\n    - Thanks to Harihara Sudhan S (AMD) for suggesting that cntxt_t pointers\n      (and not just arch_t values) be cached.\n    - Comment updates.\n\ncommit b895ec9f1f66fb93972589c06bff171337153a31\nAuthor: Nisanth M P <nisanthmp.01@gmail.com>\nDate:   Wed Jan 11 09:02:32 2023 +0530\n\n    Fixing type-mismatch errors in power10 sandbox (#701)\n    \n    Details:\n    - This commit fixes a mismatch between the function type signature of\n      bli_gemm_ex() required by BLIS and the version of the function defined\n      within the power10 sandbox. It also performs typecasting upon calling\n      bli_gemm_front() to attain type consistency with the type signature\n      defined by BLIS for bli_gemm_front().\n\ncommit 38d88d5c131253066cad4f98eea06fa9299cae3b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Jan 10 21:24:58 2023 -0600\n\n    Define new global scalar (obj_t) constants. (#703)\n    \n    Details:\n    - This commit defines the following new global scalar constants:\n      - BLIS_ONE_I: This constant encodes the imaginary unit.\n      - BLIS_MINUS_ONE_I: This constant encodes the negative imaginary unit.\n      - BLIS_NAN: This constant encodes a not-a-number value. Both real and\n        imaginary parts are set to NaN for complex datatypes.\n\ncommit cdb22b8ffa5b31a0c16ac1a7bcecefeb5216f669\nAuthor: Nisanth M P <nisanthmp.01@gmail.com>\nDate:   Wed Jan 11 08:50:57 2023 +0530\n\n    Disable power10 kernels other than sgemm, dgemm. (#705)\n    \n    Details:\n    - There is a power10 sandbox which uses microkernels for datatypes other\n      than float and double (or scomplex/dcomplex). In a regular power10-\n      configured build (that is, with the sandbox disabled), there were\n      compile errors for some of these other non-sgemm/non-dgemm\n      microkernels. This commit protects those kernels with a new cpp macro\n      guard (which is defined in sandbox/power10/bli_sandbox.h) that\n      prevents that kernel code from being compiled for normal, non-sandbox\n      power10 builds.\n\ncommit d220f9c436c0dae409974724d42ab6c52f12a726\nAuthor: Nisanth M P <nisanthmp.01@gmail.com>\nDate:   Wed Jan 11 08:43:03 2023 +0530\n\n    Fix k = 0 edge case in power10 microkernels (#706)\n    \n    Details:\n    - When power10 sgemm and dgemm microkernels are called with k = 0, they\n      become caught in infinite loops and segfault. This is fixed now via an\n      early exit in the case of k = 0.\n\ncommit 2e1ba9d13c23a06a7b6f8bd326af428f7ea68c31\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 10 21:05:54 2023 -0600\n\n    Tile-level partitioning in jr/ir loops (ex-trsm). (#695)\n    \n    Details:\n    - Reimplemented parallelization of the JR loop in gemmt (which is\n      recycled for herk, her2k, syrk, and syr2k). Previously, the\n      rectangular region of the current MC x NC panel of C would be\n      parallelized separately from from the diagonal region of that same\n      submatrix, with the rectangular portion being assigned to threads via\n      slab or round-robin (rr) partitioning (as determined at configure-\n      time) and the diagonal region being assigned via round-robin. This\n      approach did not work well when extracting lots of parallelism from\n      the JR loop and was often suboptimal even for smaller degrees of\n      parallelism. This commit implements tile-level load balancing (tlb) in\n      which the IR loop is effectively subjugated in service of more\n      equitably dividing work in the JR loop. This approach is especially\n      potent for certain situations where the diagonal region of the MC x NR\n      panel of C are significant relative to the entire region. However, it\n      also seems to benefit many problem sizes of other level-3 operations\n      (excluding trsm, which has an inherent algorithmic dependency in the\n      IR loop that prevents the application of tlb). For now, tlb is\n      implemented as _var2b.c macrokernels for gemm (which forms the basis\n      for gemm, hemm, and symm), gemmt (which forms the basis of herk,\n      her2k, syrk, and syr2k), and trmm (which forms the basis of trmm and\n      trmm3). Which function pointers (_var2() or _var2b()) are embedded in\n      the control tree will depend on whether the BLIS_ENABLE_JRIR_TLB cpp\n      macro is defined, which is controlled by the value passed to the\n      existing --thread-part-jrir=METHOD (or -r METHOD) configure option.\n      This script adds 'tlb' as a valid option alongside the previously\n      supported values of 'slab' and 'rr'. ('slab' is still the default.)\n      Thanks to Leick Robinson for abstractly inspiring this work, and to\n      Minh Quan Ho for inquiring (in PR #562, and before that in Issue #437)\n      about the possibility of improved load balance in macrokernel loops,\n      and even prototyping what it might look like, long before I fully\n      understood the problem.\n    - In bli_thread_range_weighted_sub(), tweaked the the way we compute the\n      area of the current MC x NC trapezoidal panel of C by better taking\n      into account the microtile structure along the diagonal. Previously,\n      it was an underestimate, as it assumed MR = NR = 1 (that is, it\n      assumed that the microtile column of C that overlapped with microtiles\n      exactly coincided with the diagonal). Now, we only assume MR = NR.\n      This is still a slight underestimate when MR != NR, so the additional\n      area is scaled by 1.5 in a hackish attempt to compensate for this, as\n      well as other additional effects that are difficult to model (such as\n      the increased cost of writing to temporary tiles before finally\n      updating C). The net effect of this better estimation of the\n      trapezoidal area should be (on average) slightly larger regions\n      assigned to threads that have little or no overlap with the diagonal\n      region (and correspondingly slightly smaller regions in the diagonal\n      region), which we expect will lead to slightly better load balancing\n      in most situations.\n    - Spun off the contents of bli_thread.[ch] that relate to computing\n      thread ranges into one of three source/header file pairs:\n      - bli_thread_range.[ch], which define functions that are not specific\n        to the jr/ir loops;\n      - bli_thread_range_slab_rr.[ch], which define functions that implement\n        slab or round-robin partitioning for the jr/ir loops;\n      - bli_thread_range_tlb.[ch], which define functions that implement\n        tlb for the jr/ir loops.\n    - Fixed the computation of a_next in the last iteration of the IR loop\n      in bli_gemmt_l_ker_var2(). Previously, it always \"wrapped\" back around\n      to the first micropanel of the current MC x KC packed block of A.\n      However, this is almost never actually the micropanel that is used\n      next. A new macro, bli_gemmt_l_wrap_a_upanel(), computes a_next\n      correctly, with a similarly named bli_gemmt_u_wrap_a_upanel() for use\n      in the upper-stored case (which *does* actually always choose the\n      first micropanel of A as its a_next at the end of the IR loop).\n    - Removed adjustments for a_next/b_next (a2/b2) for the diagonal-\n      intersecting case of gemmt_l_ker_var2() and the above-diagonal case\n      of gemmt_u_ker_var2() since these cases will only coincide with the\n      last iteration of the IR loop in very small problems.\n    - Defined bli_is_last_iter_l() and bli_is_last_iter_u(), the latter of\n      which explicitly considers whether the current microtile is the last\n      tile that intersects the diagonal. (The former does the same, but the\n      computation coincides with the original bli_is_last_iter().) These\n      functions are now used in gemmt to test when a_next (or a2) should\n      \"wrap\" (as discussed above). Also defined bli_is_last_iter_tlb_l()\n      and bli_is_last_iter_tlb_u(), which are similar to the aforementioned\n      functions but are used when employing tlb in gemmt.\n    - Redefined macros in bli_packm_thrinfo.h, which test whether an\n      iteration of work is assigned to a thread, as static inline functions\n      in bli_param_macro_defs.h (and then deleted bli_packm_thrinfo.h).\n      In the process of redefining these macros, I also renamed them from\n      bli_packm_my_iter_rr/sl() to bli_is_my_iter_rr/sl().\n    - Renamed\n        bli_thread_range_jrir_rr() -> bli_thread_range_rr()\n        bli_thread_range_jrir_sl() -> bli_thread_range_sl()\n        bli_thread_range_jrir()    -> bli_thread_range_slrr()\n    - Renamed\n        bli_is_last_iter() -> bli_is_last_iter_slrr()\n    - Defined\n        bli_info_get_thread_jrir_tlb()\n      and renamed:\n      - bli_info_get_thread_part_jrir_slab() ->\n        bli_info_get_thread_jrir_slab()\n      - bli_info_get_thread_part_jrir_rr() ->\n        bli_info_get_thread_jrir_rr()\n    - Modified bli_rntm_set_ways_for_op() to redirect IR loop parallelism\n      into the JR loop when tlb is enabled for non-trsm level-3 operations.\n    - Added a sanity check to prevent bli_prune_unref_mparts() from being\n      used on packed objects. This prohibition is necessary because the\n      current implementation does not take into account the atomicity of\n      packed micropanel widths relative to the diagonal of structured\n      matrices. That is, the function prunes greedily without regard to\n      whether doing so would prune off part of a micropanel *which has\n      already been packed* and assigned to a thread for inclusion in the\n      computation.\n    - Further restricted early returns in bli_prune_unref_mparts() to\n      situations where the primary matrix is not only of general structure\n      but also dense (in terms of its uplo_t value). The addition of the\n      matrix's dense-ness to the conditional is required because gemmt is\n      somewhat unusual in that its C matrix has general structure but is\n      marked as lower- or upper-stored via its uplo_t. By only checking\n      for general structure, attempts to prune gemmt C matrices would\n      incorrectly result in early returns, even though that operation\n      effectively treats the matrix as symmetric (and stored in only one\n      triangle).\n    - Fixed a latent bug in bli_thread_range_rr() wherein incorrect ranges\n      were computed when 1 < bf. Thankfully, this bug was not yet\n      manifesting since all current invocations used bf == 1.\n    - Fixed a latent bug in some unexercised code in bli_?gemmt_l_ker_var2()\n      that would perform incorrect pruning of unreferenced regions above\n      where the diagonal of a lower-stored matrix intersects the right edge.\n      Thankfully, the bug was not harming anything since those unreferenced\n      regions were being pruned prior to the macrokernel.\n    - Rewrote slab/rr-based gemmt macrokernels so that they no longer carved\n      C into rectangular and diagonal regions prior to parallelizing each\n      separately. The new macrokernels use a unified loop structure where\n      quadratic (slab) partitioning is used.\n    - Updated all level-3 macrokernels to have a more uniform coding style,\n      such as wrt combining variable declarations with initializations as\n      well as the use of const.\n    - Updated bls_l3_packm_var[123].c to use bli_thrinfo_n_way() and\n      bli_thrinfo_work_id() instead of bli_thrinfo_num_threads() and\n      bli_thrinfo_thread_id(), respectively. This change probably should\n      have been included in aeb5f0c.\n    - Removed old prototypes in bli_gemmt_var.h and bli_trmm_var.h that\n      corresponded to functions that were removed in aeb5f0c.\n    - Other very minor cleanups.\n    - Comment updates.\n\ncommit b6735ca26b9d459d9253795dc5841ae8de9e84c9\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Jan 6 14:10:01 2023 -0600\n\n    Refactor structure awareness in packm_blk_var1.c. (#707)\n    \n    Details:\n    - Factored some of the structure awareness out of the loop in\n      bli_packm_blk_var1(). So instead of having a single loop with\n      conditionals in the body to handle various kinds of structure (and\n      stored/unstored submatrix placement), we now have a conditional branch\n      to handle various structure/storage scenarios with a loop in each\n      section. This change was originally motivated to choose slab or round-\n      robin partitioning (in the context of triangular matrices) based on\n      the structure of the entire block (or panel) being packed rather than\n      each micropanel individually. Previously, the code would attempt to\n      limit rr to the portion of the block that intersects the diagonal and\n      use slab for the remainder. However, that approach was not well-thought\n      out and in many situations this would lead to inferior load balancing\n      when compared to using round-robin for the entire block (or panel).\n      This commit has the added benefit of incurring less overhead during\n      the packing process now that each of the new loops is simpler.\n\ncommit f956b79922da412791e4c8b8b846b3aafc0a5ee0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Dec 31 20:18:08 2022 -0600\n\n    Switch to l3 sup decorator in gemmlike sandbox. (#704)\n    \n    Details:\n    - Modified the gemmlike sandbox to call bli_l3_sup_thread_decorator()\n      rather than a local analogue of that code. This reduces redundant\n      logic and makes it easier for the sandbox to inherit future\n      improvements to the framework's threading code.\n    - Moved addon/gemmd to addon/old/gemmd. This code has fallen out of date\n      and is taking too much effort to maintain. We will very likely\n      reimplement it completely once future changes are made to the\n      framework proper.\n\ncommit 538150c5845ad903773ca797c740048174116aa4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Dec 25 22:28:09 2022 -0600\n\n    Applied race condition fix to sup thread decorator.\n    \n    Details:\n    - Applied the race condition bugfix in commit 7d23dc2 to the\n      corresponding sup code in bli_l3_sup_decor.c. Note that in the case\n      of sup, the race condition would have only manifested when optional\n      packing was enabled at runtime (typically via setting BLIS_PACK_A\n      and/or BLIS_PACK_B environment variables).\n    - Both the fix in this commit and the fix in 7d23dc2 address bugs\n      that were introduced when the thrinfo_t trees/communicators were\n      restructured in the October omnibus commit (aeb5f0c).\n\ncommit 7d23dc2a064a371dc9883e2c2c7236a70912428c\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun Dec 25 19:09:14 2022 -0600\n\n    Fix a race condition which manifested as incorrect results (rarely). (#702)\n    \n    The problem occurs when there are at least two teams of threads packing different parts of a matrix, and where each team has at least two threads; call them team A and team B. The problematic sequence is:\n    \n    1. The chief of team A checks out a block B and broadcasts the pointer to its teammates.\n    2. Team A completely packs their data and perform a barrier amongst themselves.\n    3. Team A commences computing with the packed data.\n    4. The chief of team A finishes computing before its teammates, then calls bli_thrinfo_free on its thrinfo_t struct (which contains the mem_t object referencing the buffer B). This causes buffer B to be checked back in to the pba.\n    5. The chief of team B checks out the *same* block B that was just checked back in and broadcasts the pointer to its teammates.\n    6. DATA RACE: now the remaining threads of team A are reading *while* team B are writing to the same buffer B. If team A write new data before team B are done computing then an incorrect result is generated.\n    \n    The solution is to place a global barrier before the call to bli_thrinfo_free at the end of the computation.\n    \n    Co-authored-by: Field G. Van Zee <field@cs.utexas.edu>\n\ncommit 3accacf57d11e9b109339754f91bf22329b6cb6a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Dec 16 10:26:33 2022 -0600\n\n    Skip 1m optimization when forcing hemm_l/symm_l. (#697)\n    \n    Details:\n    - Fixed a bug in right-sided hemm when:\n      - using the 1m method,\n      - #defining BLIS_DISABLE_HEMM_RIGHT in the active subconfiguration,\n        and\n      - the storage of C matches the gemm microkernel IO preference PRIOR to\n        the right-sidedness being detected and recast in terms of the left-\n        side code path.\n      It turns out that bli_gemm_ind_recast_1m_params() was applying its\n      optimization (recasting a complex-domain macrokernel calling a 1m\n      virtual microkernel to a real-domain macrokernel calling the real-\n      domain microkernel) in situations in which it should not have. The\n      optimization was silently assuming that the storage of C always\n      matched that of the microkernel preference, since the front-end (in\n      this case, bli_hemm_front()) would have already had a chance to\n      transpose the operation to bring the two into agreement. However, by\n      disabling right-sided hemm, we deprive BLIS of that flexibility (as a\n      transposed left-sided case would necessarily have to become a right-\n      sided case), and thus the assumption was no longer holding in all\n      cases. Thanks to Nisanth M P for reporting this bug in Issue #621.\n    - The aforementioned bug, and its bugfix, also apply to symm when\n      BLIS_DISABLE_SYMM_RIGHT is defined.\n    - Comment updates.\n    - CREDITS file update.\n\ncommit 4833ba224eba54df3f349bcb7e188bcc53442449\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Dec 12 20:26:02 2022 -0600\n\n    Fixed perf of mt sup with packing, and mt gemmlike. (#696)\n    \n    Details:\n    - Brought the gemmsup code path up to date relative to the latest\n      thrinfo_t semantics introduced in the October Omnibus commit\n      (aeb5f0c). This was done by passing the prenode (instead of the\n      current node) into the packm variant within bli_l3_sup_packm.c as well\n      as creating the prenodes and attaching them to the thrinfo_t tree in\n      bli_l3_sup_thrinfo_create(). These changes erase the performance\n      degradation introduced in the omnibus when running multithreaded sup\n      with optional packing enabled. Special thanks to Devin Matthews for\n      sussing out this fix in short order.\n    - Fixed the gemmlike sandbox in a manner similar to that of sup with\n      packing, described above. This also involved passing the prenode into\n      the local gemmlike packm variant. (Recall that gemmlike recycles the\n      use of bli_l3_sup_thrinfo_create(), so it automatically inherits that\n      part of the sup fix described above.)\n    - Updated bls_l3_packm_var[123].c to use bli_thrinfo_n_way() and\n      bli_thrinfo_work_id() instead of bli_thrinfo_num_threads() and\n      bli_thrinfo_thread_id(), respectively.\n\ncommit db10dd8e11a12d85017f84455558a82c0093b1da\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Nov 29 19:10:31 2022 -0600\n\n    Fixed _gemm_small() prototype; disabled gemm_small.\n    \n    Details:\n    - Fixed a mismatch between the prototype for bli_gemm_small() in\n      bli_gemm_front.h and the actual definition of bli_gemm_small() in\n      kernels/zen/3/bli_gemm_small.c. The former was erroneously declaring\n      the cntl_t* argument as 'const'. Thanks to Jeff Diamond for reporting\n      this issue.\n    - Commented out BLIS_ENABLE_SMALL_MATRIX, BLIS_ENABLE_SMALL_MATRIX_TRSM\n      macro definitions in config/zen3/bli_family_zen3.h. AMD's small matrix\n      implementation should probably remain disabled in vanilla BLIS, at\n      least for now.\n\ncommit f0337b784d164ae505ca0e11277a1155680500d1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Nov 13 21:36:47 2022 -0600\n\n    Trival whitespace/comment tweaks.\n    \n    Details:\n    - Trivial whitespace and comment changes, most of which ideally would\n      have been part of the previous commit pertaining to HPX (2b05948).\n\ncommit 2b05948ad2c9785bc53f376d53a7141cbc917447\nAuthor: ct-clmsn <ct.clmsn@gmail.com>\nDate:   Sun Nov 13 17:40:22 2022 -0500\n\n    blis support for hpx (#682)\n    \n    Implement threading backend via HPX.\n    \n    HPX is an asynchronous many task runtime system used in high performance computing applications. The runtime implements the ISO C++ parallelism specification and provides a user-space thread implementation.\n    \n    This PR provides BLIS a thread backend implementation using HPX and resolves feature request #681. The configuration script, makefiles, and testsuite have been updated to support an HPX build option. The addition of HPX support provides other developers an exemplar for integrating other C++ threading backends into BLIS.\n    \n    Co-authored-by: ctaylor <ctaylor@pennywise.cm.cluster>\n    Co-authored-by: Devin Matthews <damatthews@smu.edu>\n\ncommit e1ea25da43508925e33d4e57e420cfc0a9de793f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 11 12:07:51 2022 -0600\n\n    Fixed subtle barrier_fpa bug in bli_thrcomm.c. (#690)\n    \n    Details:\n    - In bli_thrcommo.c, correctly initialize the BLIS_OPENMP element of the\n      barrier function pointer array (barrier_fpa) to NULL when\n      BLIS_ENABLE_OPENMP is *not* defined. Similarly, initialize the\n      BLIS_POSIX element of barrier_fpa to NULL when BLIS_ENABLE_PTHREADS is\n      not enabled. This bug was introduced in a1a5a9b and was likely the\n      result of an incomplete edit. The effects of the bug would have\n      likely manifested when querying a thrcomm_t that was initialized with\n      a timpl_t value corresponding to a threading implementation that was\n      omitted from the -t option at configure-time.\n\ncommit dc6e5f3f5770074ba38554541b8b64711a68c084\nAuthor: leekillough <15950023+leekillough@users.noreply.github.com>\nDate:   Thu Nov 3 18:33:08 2022 -0500\n\n    Enhance emacs formatting of C files to remove trailing whitespace and ensure a newline at the end of file\n\ncommit 713d078075a4a563a43d83fd0880ab5091c2e4a4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 3 20:00:11 2022 -0500\n\n    Delete mpi_test garbage. (#689)\n    \n    Details:\n    - tlrmchlsmth: \"What even is this? No comments, no commit message, not\n      used by anything. Trash.\"\n\ncommit 8d813f7f12732d52c95570ae884d5defbfd19234\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 3 19:10:47 2022 -0500\n\n    Some decluttering of the top-level directory.\n    \n    Details:\n    - Relocated 'mpi_test' directory to test/mpi_test.\n    - Relocated 'so_version' and 'version' files from top-level directory to\n      'build' directory.\n    - Updated build/bump-version.sh script to accommodate relocation of\n      'version' file to 'build' directory.\n    - Updated configure script to accommodate relocation of 'so_version'\n      file to 'build' directory.\n    - Updated INSTALL file to replace pointers to blis-devel mailing list\n      with a pointer to docs/Discord.md.\n    - Updated RELEASING file to contain a reminder to consider whether the\n      so_version file should be updated prior to the release.\n\ncommit 6774bf08c92fc6983706a91bbb93b960e8eef285\nAuthor: Lee Killough <15950023+leekillough@users.noreply.github.com>\nDate:   Thu Nov 3 15:20:47 2022 -0500\n\n    Fix typo in configure --help text. (#686)\n    \n    Details:\n    - Fixed a misspelling in the --help description for the --int-size (-i)\n      configure option.\n\ncommit 872898d817f35702e7678ff7f3eeff0f12e641f5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Nov 2 21:53:22 2022 -0500\n\n    Fixed trmm[3]/trsm performance bug in cf7d616. (#685)\n    \n    Details:\n    - Fixed a performance bug in the packing of micropanels that intersect\n      the diagonal of triangular matrices (i.e., those found in trmm, trmm3,\n      and trsm). This bug was introduced in cf7d616 and stemmed from an\n      ill-formed boolean conditional expression in bli_packm_blk_var1().\n      This conditional would chose when to use round-robin parallel work\n      allocation, but checked for the triangularity of the submatrix being\n      packed while failing also to check for whether the current micropanel\n      actually intersected the diagonal. The net result of this bug was that\n      *all* micropanels of a triangular matrix, no matter where the upanels\n      resided within the matrix, were assigned to threads via a round-robin\n      policy. This affected some microarchitectures and threading\n      configurations much worse than others, but it seems that overall the\n      effect was universally negative, likely because of the reduced spatial\n      locality during the packing with round-robin. Thanks to Leick Robinson\n      for his tireless efforts in helping track down this issue.\n\ncommit edcc2f9940449f7d9cefcfc02159d27b013e7995\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Nov 2 19:04:49 2022 -0500\n\n    Support --nosup, --sup configure options. (#684)\n    \n    Details:\n    - Added --nosup and --sup as alternative ways of requesting that sup be\n      disabled or enabled. These are analagous to --disable-sup-handling and\n      --enable-sup-handling, respectively. (I got tired of typing out\n      --disable-sup-handling and needed a shorthand notation.)\n    - Tweaked message output by configure when sup is enable/disabled for\n      clarity and specificity.\n    - Whitespace changes.\n\ncommit 5eea6ad9eb25f37685d1ae4ae08c73cd1daca297\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Nov 2 17:07:54 2022 -0500\n\n    Add mention of Wilkinson Prize to README.md. (#683)\n    \n    Details:\n    - Added blurbs and links to Wilkinson Prize to README.md.\n    - Added mention of both Best Paper and Wilkinson Prizes to the top of\n      README.md.\n    - Other minor tweaks.\n\ncommit 29f79f030e939969d4f3876c4fdaac7b0c5daa63\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 31 18:57:45 2022 -0500\n\n    Fixed performance bug caused by redundant packing. (#680)\n    \n    Details:\n    - Fixed a performance bug whereby multiple threads were redundantly\n      packing the same (rather than separate) micropanels. This bug was\n      caused by different parts of the code using the num_threads/thread_id\n      field of the thrinfo_t vs. the n_way/work_id fields. The fix was to\n      standardize on the latter and provide a \"fake\" thrinfo_t sub-prenode\n      in the thrinfo tree which consists of single-member thread teams. The\n      single team with multiple threads node is still required since it and\n      only it can be used to perform barriers and broadcasts (e.g. of the\n      packed buffer pointer).\n\ncommit aeb5f0cc19665456e990a7ffccdb09da2e3f504b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Oct 27 12:39:11 2022 -0500\n\n    Omnibus PR - Oct 2023 (#678)\n    \n    Details:\n    - This is an \"omnibus\" commit, consisting of multiple medium-sized\n      commits that affect non-trivial aspects of BLIS. The major highlights:\n      - Relocated the pba, sba pool (from the rntm_t), and mem_t (from the\n        cntl_t) to the thrinfo_t object. This allows the rntm_t to be\n        effectively const (although it is sometimes copied internally and\n        modified to reflect different ways of parallelism). Moving the mem_t\n        sets the stage for sharing a global control tree amongst all\n        threads.\n      - De-templatized the macrokernels for gemmt, trmm, and trsm to match\n        the macrokernel for gemm, which has been de-templatized since\n        54fa28b.\n      - Reimplemented bli_l3_determine_kc() by separating out the logic for\n        adjusting KC based on MR/NR for triangular A and/or B into a new\n        function, bli_l3_adjust_kc(). For now, this function is still called\n        from bli_l3_determine_kc(), but in the future we plan to have it\n        called once when constructing the control tree.\n      - Refactored the level-3 thread decorator into two parts:\n        - One part deals only with launching threads, each one calling a\n          generic thread entry function. This code resides in frame/thread\n          and constitutes the definition of bli_thread_launch(). Note that\n          it is specific to the threading implementation (OpenMP, pthreads,\n          single, etc.)\n        - The other part deals with passing the matrix operands and related\n          information into bli_thread_launch(). This is the \"l3 decorator\"\n          and now resides in frame/3. It is agnostic to the threading\n          implementation.\n      - Modified the \"level\" of the thread control tree passed in at each\n        operation. Previously, each operation (e.g. bli_gemm_blk_var1()) was\n        passed in a communicator representing the active thread teams which\n        would share the available work. Now, the *parent* thread comm is\n        passed in. The operation then grabs the child comm and uses it to\n        partition the work. The difference is in bli_trsm_blk_var1(), where\n        there are now two children nodes for this single operation (i.e. the\n        thread control tree is split one level above where the control tree\n        is). The sub-prenode is used for the trsm subproblem while the\n        normal sub-node is used for the gemm part. Importantly, the parent\n        comm is used for the barrier between them.\n    - Removed cntl_t* arguments from bli_*_front() functions. These will be\n      added back in the future when the control tree's creation is moved so\n      that it happens much sooner (provided that bli_*_front() have not been\n      absorbed into their respective bli_*_ex() functions).\n    - Renamed various bli_thread_*() query functions to bli_thrinfo_*(),\n      for consistency. This includes _num_threads(), _thread_id(), _n_way(),\n      _work_id(), _sba_pool(), _pba(), _mem(), _barrier(), _broadcast(), and\n      _am_chief().\n    - Removed extraneous barrier from _blk_var3() of gemm and trsm.\n    - Fixed a typo in bli_type_defs.h where BLIS_BLAS_INT_TYPE_SIZE was\n      misspelled.\n\ncommit c803b03e52a7a6997a8d304a8cfa9acf7c1c555b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Oct 26 18:20:00 2022 -0500\n\n    Add check to disable armsve on Apple M1.\n\ncommit 2dd692b710b6a9889f7ebdd7934a2108be5c5530\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Oct 26 18:10:26 2022 -0500\n\n    Fix auto-detection of firestorm (Apple M1).\n\ncommit 88105dbecf0f9dfbfa30215743346e8bd6afb971\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 21 15:16:12 2022 -0500\n\n    Added Discord documentation (#677)\n    \n    Details:\n    - Added a docs/Discord.md markdown document that walks the reader\n      through creating a Discord account, obtaining the invite link, and\n      using the link to join the BLIS Discord server.\n    - Updated README.md to reference the new Discord.md document in multiple\n      places, including via the official Discord logo (used with explicit\n      permission from representatives at Discord Inc.).\n\ncommit 23f5b8df3e802a27bacd92571184ec57bbdfa646\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Oct 17 20:21:21 2022 -0500\n\n    Shuffled checked properties in bli_l3_check.c. (#676)\n    \n    Details:\n    - Added certain checks for matrix structure to the level-3 operations'\n      _check() functions, and slightly reorganized existing checks.\n\ncommit 9453e0f163503f64a290256b4be53d8882224863\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Oct 3 19:46:20 2022 -0500\n\n    CREDITS file update.\n    \n    Details:\n    - This attribution was intended to go in PR #647.\n\ncommit 76a23bd8c33e161221891935a489df9a9fb9c8c0\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 3 15:55:07 2022 -0500\n\n    Reinstate sanity check in bli_pool_finalize. (#671)\n    \n    Details:\n    - Added a reinit argument to bli_pool_finalize(). This bool will signal\n      whether or not the function is being called from bli_pool_reinit(). If\n      it is not being called from _reinit(), we can safely check to confirm\n      that .top_index == 0 (i.e., all blocks have been checked in). But if\n      it *is* being called from _reinit(), then that check will be skipped\n      since one of the predicted use cases for bli_pool_reinit() anticipates\n      that some blocks are (probably) checked out when the pool_t is\n      reinitialized.\n    - Updated existing invocations of bli_pool_finalize() to pass in either\n      FALSE (from bli_apool_free_block() or bli_pba_finalize_pools()) or\n      TRUE (from bli_pool_reinit()) for the new reinit argument.\n\ncommit 63470b49e3b9b15e00a8f666e86ccd70c6005fe9\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Sep 29 18:52:08 2022 -0500\n\n    Fix some bugs in bli_pool.c (#670)\n    \n    Details:\n    - Add a check for premature pool exhaustion when checking in blocks via\n      bli_pool_checkin_block(). This detects \"double-free\" and other bad\n      conditions that don't necessarily result in a segfault.\n    - Make sure to copy all block pointers when growing the pool size.\n      Previously, checked-out block pointers (which are guaranteed to be set\n      to NULL) were not being copied, leading to the presence of\n      uninitialized data.\n\ncommit 42d0e66318b186d25eeb215b40ce26115401ed8b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Sep 29 17:38:02 2022 -0500\n\n    Add AddressSanitizer (-fsanitize=address) option. (#669)\n    \n    Details:\n    - Added support for AddressSanitizer (ASan), a compiler-integrated\n      memory error detector. The option (disabled by default) enables\n      compiling and linking with the -fsanitize=address flag supported by\n      clang, gcc, and probably others. This flag is employed during\n      compilation of all BLIS source files *except* for optimized kernels,\n      which are exempted because ASan usually requires an extra register,\n      which violates the constraints for many gemm microkernels.\n    - Minor whitespace, comment, ordering, and configure help text updates.\n\ncommit b861c71b50c6d48cb07282f44aa9dddffc1f1b3f\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Sep 23 13:22:27 2022 -0500\n\n    Add consistent NaN/Inf handling in sumsqv. (#668)\n    \n    Details:\n    - Changed sumsqv implementation as follows:\n      - If there is a NaN (either real or imaginary), then return a sum of\n        NaN and unit scale.\n      - Else, if there is an Inf (either real or imaginary), then return a\n        sum of +Inf and unit scale.\n      - Otherwise behave as normal.\n\ncommit ee81efc7887374c974a78bfb3e0865776b2f97a8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 22 19:15:07 2022 -0500\n\n    Parameterized test/3 drivers via command line args. (#667)\n    \n    Details:\n    - Rewrote the drivers in test/3, the Makefile, and the runme.sh script\n      so that most of the important parameters, including parameter combo,\n      datatype, storage combo, induced method, problem size range, dimension\n      bindings, number of repeats, and alpha/beta values can be passed in\n      via command line arguments. (Previously, most of these parameters were\n      hard-coded into the driver source, except a few that were hard-coded\n      into the Makefile.) If no argument is given for any particular option,\n      it will be assigned a sane default. Either way, the values employed at\n      runtime will be printed to stdout before the performance data in a\n      section that is commented out with '%' characters (which is used by\n      matlab and octave for comments), unless the -q option is given, in\n      which case the driver will proceed quietly and output only performance\n      data. Each driver also provides extensive help via the -h option, with\n      the help text tailored for the operation in question (e.g. gemm, hemm,\n      herk, etc.). In this help text, the driver reminds the user which\n      implementation it was linked to (e.g. blis, openblas, vendor, eigen).\n      Thanks to Jeff Diamond for suggesting this CLI-based reimagining of\n      the test/3 drivers.\n    - In the test/3 drivers: converted cpp macro string constants, as well\n      as two string literals (for the opname and pc_str) used in each test\n      driver, to global (or static) const char* strings, and replaced the\n      use of strncpy() for storing the results of the command line argument\n      parsing with pointer copies from the corresponding strings in argv.\n      This works because the argv array is guaranteed by the C99 standard\n      to persist throughout the life of the program. This new approach uses\n      less storage and executes faster. Thanks to Minh Quan Ho for\n      recommending this change.\n    - Renamed the IMP_STR cpp macro that gets defined on the command line,\n      via the test/3/Makefile, to IMPL_STR.\n    - Updated runme.sh to set the problem size ranges for single-threaded\n      and multithreaded execution independently from one another, as well as\n      on a per-system basis.\n    - Added a 'quiet' variable to runme.sh that can easily toggle quiet mode\n      for the test drivers' output.\n    - Very minor typecast fix in call to bli_getopt() in bli_utils.c.\n    - In bli_getopt(), changed the nextchar variable from being a local\n      static variable to a field of the getopt_t state struct. (Not sure why\n      it was ever declared static to begin with.)\n    - Other minor changes to bli_getopt() to accommodate the rewritten test\n      drivers' command line parsing needs.\n\ncommit 036a4f9d822df25a76a653e70be76fb02284d3d3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 22 18:36:50 2022 -0500\n\n    Refactored some rntm_t management code. (#666)\n    \n    Details:\n    - Separated the \"sanitizing\" code from the auto-factorization code\n      in bli_rntm_set_ways_from_rntm() and _rntm_set_ways_from_rntm_sup().\n      The santizing code now resides in bli_rntm_sanitize() while the\n      factorization code resides in bli_rntm_factorize() and\n      bli_rntm_factorize_sup(). (There are two different functions because\n      the conventional and sup factorization codes are currently somewhat\n      different.) Also note that the factorization code now relies on the\n      .auto_factor field to have already been set, either during\n      rntm_t initialization or when the rntm_t was previously updated and\n      santized. So rather than locally determining whether to auto-\n      factorize, those functions just read the .auto_factor field and\n      proceed accordingly.\n    - Refactored and removed most code from bli_thread_init_rntm_from_env().\n      This function now reads the environment variables needed to set nt,\n      jc, pc, ic, jr, and ir; sets them into the global rntm_t; and then\n      calls bli_rntm_sanitize() in order to make sure that the contents are\n      in a \"good\" state. Thanks to Devin Matthews for suggesting this\n      refactoring.\n    - Redefined bli_rntm_set_num_threads() and bli_rntm_set_ways() such that\n      if multithreading is disabled at compile time (that is, if the cpp\n      macro BLIS_ENABLE_MULTITHREADING is undefined), they ignore the\n      caller's request and instead clear the nt and ways fields.\n    - Redefined bli_thread_set_num_threads() and bli_thread_set_ways() such\n      that if multithreading is disabled at compile time (that is, if the\n      cpp macro BLIS_ENABLE_MULTITHREADING is undefined), they ignore the\n      caller's request and do nothing.\n    - Redefined bli_rntm_set_num_threads() and bli_rntm_set_ways() as true\n      functions rather than static inline functions.\n    - In bli_rntm.c, statically initialize the global_rntm global variable\n      via the BLIS_RNTM_INITIALIZER macro.\n    - In bli_rntm.h, defined bli_rntm_clear_auto_factor(), which sets the\n      .auto_factor field of the rntm_t to FALSE.\n    - Reorganized order of some inline function definitions in bli_rntm.h.\n    - Changed the default value given to the .auto_factor field by the\n      BLIS_RNTM_INITIALIZER macro from TRUE to FALSE.\n    - Call bli_rntm_clear_auto_factor() instead of\n      bli_rntm_set_auto_factor_only() in bli_rntm_init().\n    - Comment/whitespace updates.\n\ncommit a1a5a9b4cbef9208da494c45a2f933a8e82559ac\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Sep 21 18:31:01 2022 -0500\n\n    Implemented support for fat multithreading. (#665)\n    \n    Details:\n    - Allow the user to configure BLIS in such a way that multiple threading\n      implementations get compiled into the library, with one of those\n      implementations chosen at runtime. For now, there are only three\n      implementations available: OpenMP, pthreads, and single. (Here,\n      'single' merely refers to single-threaded mode.) The configure script\n      now allows the user to give the -t option with a comma-separated list\n      of values, such as '-t openmp,pthreads'. The first value in the list\n      will always be the default at library initialization time, and\n      'single' is always silently appended to the end of the list. The user\n      can specify which implementation should execute in one of three ways:\n      by setting the BLIS_THREAD_IMPL environment variable prior to launch;\n      by calling the bli_thread_set_thread_impl() global runtime API; or by\n      encoding their choice into a rntm_t that is passed into one of the\n      expert interfaces. Any of these three choices overrides the\n      initialization-time default (i.e., the first value listed to the -t\n      configure option). Requesting an implementation that was not compiled\n      into the library will result in an error message followed by\n      bli_abort().\n    - Relocated the 'auto' logic for the -t option from the top-level\n      Makefile to the configure script. (Currently, this logic is pretty\n      dumb, choosing 'openmp' for gcc and icc, and 'pthreads' for clang.)\n    - Defined a new 'timpl_t' enum in bli_type_defs.h, with three valid\n      values: BLIS_SINGLE, BLIS_OPENMP, BLIS_POSIX.\n    - Reorganized the thrcomm_t struct into a single defintion with two\n      preprocessor blocks, one each for additional fields needed by OpenMP\n      and pthreads.\n    - Added timpl_t argument to bli_thrcomm_bcast(), bli_thrcomm_barrier(),\n      bli_thrcomm_init(), and bli_thrcomm_cleanup(), which these functions\n      need since they are now wrappers that choose the implementation-\n      specific function corresponding to the currently enabled threading\n      implementation.\n    - Added rntm_t* to bli_thread_broadcast(), bli_thread_barrier() so that\n      those functions can pass the timpl_t value into bli_thrcomm_bcast()\n      and bli_thrcomm_barrier(), respectively.\n    - Defined bli_env_get_str() in bli_env.c to allow the querying of\n      BLIS_THREAD_IMPL (which, unlike BLIS_NUM_THREADS and friends, is\n      expected to be a string).\n    - Defined bli_thread_get_thread_impl(), bli_thread_set_thread_impl() to\n      get and set the current threading implementation at runtime.\n    - Defined bli_rntm_thread_impl() and bli_rntm_set_thread_impl() to query\n      and set the threading implementation within a rntm_t. Also choose\n      BLIS_SINGLE as the default value when initializing rntm_t structs.\n    - Added bli_info_get_*() functions to query whether OpenMP or pthreads\n      would be chosen as the default at init-time. Note that this only\n      tests whether OpenMP or pthreads is the first implementation in the\n      list passed to the threading configure option (-t) and is *not* the\n      same as querying which implementation is currently selected, since\n      that can be influenced by BLIS_THREAD_IMPL and/or\n      bli_thread_set_thread_impl().\n    - Changed l3int_t to l3int_ft.\n    - Updated docs/Multithreading.md to document the new behavior.\n    - Updated sandbox/gemmlike and addon/gemmd to work with the new fat\n      threading feature. This included a few bugfixes to bring the codes up\n      to date, as necessary.\n    - Comment, whitespace updates.\n\ncommit 89df7b8fa3a3e47ab2fc10ac4d65d0b9fde16942\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun Sep 18 18:46:57 2022 -0500\n\n    De-templatized _sup_var1n2m.c; unified _sup_packm_a/b(). (#659)\n    \n    Details:\n    - Re-expressed the two variants in frame/3/bli_l3_sup_var1n2m.c as a\n      single function each that performs char* pointer arithmetic rather\n      than four datatype-specific functions. Did the same for the functions\n      in bli_l3_sup_packm_a.c and _sup_packm_b.c, and then unified the two\n      into a single set of functions for packing either A or B, which now\n      resides in bli_l3_sup_packm.c.\n    - Pre-grow the cntl_t tree in both bli_l3_sup_var1n2m.c variants rather\n      than grow them incrementally.\n    - Relocated empty-matrix and scale-by-beta early return handlnig from\n      bli_gemm_front() and bli_gemmt_front() to their _ex() counterparts.\n    - Comment, whitespace updates.\n\ncommit fb91337eff1ee2098f315a83888f6667b3a56f86\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 15 19:08:10 2022 -0500\n\n    Fixed a harmless pc_nt bug in 05a811e.\n    \n    Details:\n    - Added missing curly braces around some statements in bli_rntm.c, one\n      of which  needed them in order for the relevant code to be executed in\n      the intended way. The consequence of 05a811e omitting those braces was\n      that a statement (pc_nt = 1;) was executed more often than it needed\n      to be.\n    - Also adjusted the analagous code in bli_thread.c to match that of\n      bli_rntm.c.\n\ncommit e86076bf4461d1a78186fb21ba8320cfb430f62c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 15 14:22:59 2022 -0500\n\n    Test the 'gemmlike' sandbox via AppVeyor. (#664)\n    \n    Details:\n    - Added a fifth test to our .appveyor.yml that enables the 'gemmlike'\n      sandbox with OpenMP enabled (via clang, the 'auto' configuration\n      target, and building to a static library). Thanks to Jeff Diamond\n      for pointing out that this test would be useful.\n\ncommit 63177dca48cb7d066576d884da4a7a599ececebf\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 15 11:21:26 2022 -0500\n\n    Fixed gemmlike sandbox bug introduced in 7c07b47.\n    \n    Details:\n    - Fixed a bug in the 'gemmlike' sandbox that was introduced in 7c07b47.\n      This bug was the result of the fact that the gemmlike implementation\n      uses bli_thrinfo_sup_grow() to grow its thrinfo_t tree, but the\n      aforementioned commit added an optimization that kicks in when the\n      rntm_t .pack_a and .pack_b fields are both FALSE. Those fields were\n      originally added only for sup execution; for large code path, they\n      are intended to be ignored. But the default initial state of a rntm_t\n      has those fields set to FALSE, which was inadvertantly activating the\n      optimization (which targeted single-threaded cases only) and would\n      cause multithreaded use cases of 'gemmlike' to segfault. The fix took\n      the form of setting the .pack_a and .pack_b fields to TRUE in\n      bls_gemm_ex().\n    - Added minimal 'const' and 'const'-casting to 'gemmlike' so that gcc\n      stays quiet.\n\ncommit 05a811e898b371a76581abd4afa416980cce7db9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 13 19:24:05 2022 -0500\n\n    Initialize rntm_t nt/ways fields with 1 (not -1). (#663)\n    \n    Details:\n    - Changed the way that rntm_t structs are initialized, mainly so that\n      the global rntm_t that is set via environment variables at runtime\n      may be queried by the application prior to any computation taking\n      place. (Strictly speaking, the application may already query these\n      fields, but they do not always contain valid values and often contain\n      -1 when they are unset.) These changes also served to clarify how\n      these parameters are treated, and homogenized the implementations of\n      bli_rntm_set_ways_from_rntm(), bli_rntm_set_ways_from_rntm_sup(), and\n      bli_thread_init_rntm_from_env(). Special thanks to Jeff Diamond,\n      Leick Robinson, and Devin Matthews for pointing out that the previous\n      behavior was needlessly confusing and could be improved.\n    - The aforementioned modifications also included subtle changes as to\n      what counts as \"setting\" a loop's ways of parallelism for the purposes\n      of deciding whether to use the ways or the total number of threads.\n      Previously, setting any loop's ways, even to 1, counted in favor of\n      using the ways. Now, only values greater than 1 will count as\n      \"setting\", and all other values will silently be mapped to 1, with\n      those parameters treated as if they were untouched all along.\n    - Updated bli_rntm.h and bli_thread.c so that any attempt to set the\n      PC_NT variable (or pc_nt field of a rntm_t) will either ignore the\n      request or reassert the value as 1.\n    - Updated bli_rntm_set_ways() so that rather than clear the\n      num_threads field, it is set to the product of all of the per-loop\n      ways of parallelism.\n    - Removed code from test_libblis.c that handled the possibility of unset\n      environment variables when printing out their values.\n    - Removed bli_rntm_equals() inline function from bli_rntm.h, which has\n      long been disabled.\n    - Updates to docs/Multithreading.md related to the aforementioned\n      changes.\n    - Comment updates.\n\ncommit fd885cf98f4fe1d3bc46468e567776c37c670fcc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 13 11:50:23 2022 -0500\n\n    Use kernel CFLAGS for 'kernels' subdirs in addons. (#658)\n    \n    Details:\n    - Updated Makefile and common.mk so that the targeted configuration's\n      kernel CFLAGS are applied to source files that are found in a\n      'kernels' subdirectory within an enabled addon. For now, this\n      behavior only applies when the 'kernels' directory is at the top\n      level of the addon directory structure. For example, if there is an\n      addon named 'foobar', the source code must be located in\n      addon/foobar/kernels/ in order for it to be compiled with the target\n      configurations's kernel CFLAGS. Any other source code within\n      addon/foobar/ will be compiled with general-purpose CFLAGS (the same\n      ones that were used on all addon code prior to this commit). Thanks\n      to AMD (esp. Mithun Mohan) for suggesting this change and catching an\n      intermediate bug in the PR.\n    - Comment/whitespace updates.\n\ncommit cb74202db39dc8cb81fdd06f8a445f8837e27853\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 13 11:46:24 2022 -0500\n\n    Fixed incorrect sizeof(type) in edge case macros. (#662)\n    \n    Details:\n    - In bli_edge_case_macro_defs.h, the GEMM_UKR_SETUP_CT_PRE() and\n      GEMMTRSM_UKR_SETUP_CT_PRE() macros previously declared their temporary\n      ct microtiles as:\n    \n        PASTEMAC(ch,ctype)\n              _ct[ BLIS_STACK_BUF_MAX_SIZE / sizeof( PASTEMAC(ch,type) ) ] \\\n                   __attribute__((aligned(alignment))); \\\n    \n      The problem here is that sizeof( PASTEMAC(ch,type) ) evaluates to\n      things like sizeof( BLIS_DOUBLE ), not sizeof( double ), and since\n      BLIS_DOUBLE is an enum, it is typically an int, which means the\n      sizeof() expression is evaluating to the wrong value. This was likely\n      a benign bug, though, since BLIS does not support any computational\n      datatypes that are smaller than sizeof( int ), which means the ct\n      array would be *over*-allocated rather than underallocated. Thanks\n      to @moon-chilled for identifying and reporting this bug in #624.\n    - CREDITS file update.\n\ncommit 6e5431e8494b06bd80efcab3abf0a6456d6c0381\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Sep 10 15:16:58 2022 -0500\n\n    Fix line number issue in flattened blis.h. (#660)\n    \n    Details:\n    - Updated the top-level Makefile so that it invokes flatten-headers.py\n      without the -c option, which was requesting that comments be stripped\n      (since comment stripping is disabled by default).\n    - Updated flatten-headers.py to accept a new option (-l) to enable\n      insertion of #line directives into the output file. This new option\n      is enabled by default.\n    - Also added logic to flatten-headers.py that outputs a warning if both\n      comment stripping and line numbers are requested since the comment\n      stripping will cause the line numbers to become inaccurate.\n\ncommit 4afe0cfdab0e069e027f97920ea604249e34df47\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 8 18:33:20 2022 -0500\n\n    Defined invscalv, invscalm, invscald operations. (#661)\n    \n    Details:\n    - Defined invert-scale (invscal) operation on vectors (level-1v),\n      matrices (level-1m), and diagonals (level-1d).\n    - Added test modules for invscalv and invscalm to the testsuite.\n    - Updated BLISObjectAPI.md and BLISTypedAPI.md API documentation to\n      reflect the new operations. Also updated KernelsHowTo.md accordingly.\n    - Renamed 'beta' to 'alpha' in scalv and scalm testsuite modules (and\n      input.operations files) so that the parameter name matches the\n      parameter used in the documentation.\n\ncommit a87eae2b11408b556e562f1b04e673c6cd1612bc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 6 18:04:09 2022 -0500\n\n    Added '-q' quiet mode option to testsuite. (#657)\n    \n    Details:\n    - Added support for a '-q' command line option to the testsuite. This\n      option suppresses most informational output that would normally\n      clutter up the screen. By default, verbose mode (the previous\n      status quo) will be operative, and so quiet mode must be requested.\n\ncommit dfa54139664a42d29774e140ec9e5597af869a76\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Tue Aug 30 08:07:50 2022 +0800\n\n    Arm64 dgemmsup with extended MR&NR (#655)\n    \n    Details:\n    - Since the number of registers in NEON is large but their lengths are\n      short, I'm here extending both MR and NR.\n    - The approach is to represent the C microtile in registers optionally\n      in columns, so for sizes like 6x7m, the 'crr' kernel is the default\n      with 'rrr' supported through an in-register transpose.\n    - A few asm kernels are crafted for 'rv' to complete this extended size\n      support.\n    - For 'rd' I'm still relying heavily on C99 intrinsic kernels with\n      branching so the performance might not be optimal. (Sorry for that.)\n    - So far, these changes only affect the 'firestorm' subconfig.\n    - This commit also contains row-preferential s12x8 and d6x8 gemm\n      ukernels. These microkernels are templatized versions of the existing\n      s8x12 and d6x8 ukernels defined in bli_gemm_armv8a_asm_d6x8.c.\n\ncommit 9e5594ad5fc41df8ef2825a025d7844ac2275c27\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 11 14:36:38 2022 -0500\n\n    Temporarily disabled #line directives from 6826c1c.\n    \n    Details:\n    - Commented out the inclusion of #line preprocessor directives in the\n      flattened header output provided by build/flatten-headers.py. This\n      output was added recently in 6826c1c, but was later found to have\n      thrown off the line numbering referenced by compiler warnings and\n      errors (possibly due to license comment blocks, which are stripped\n      from source headers as they are inlined into the monolithic header).\n\ncommit 775148bcdbb1014b4881a76306f35f5d0fedecbe\nAuthor: jdiamondGitHub <jeff_diamond@fastmail.com>\nDate:   Fri Aug 5 12:01:24 2022 -0500\n\n    Updated ARMv8a kernels to fix 2 prefetching issues. (#649)\n    \n    Details:\n    - The ARMv8a dgemm/sgemm microkernels had 2 prefetching issues that\n      impacted performance on modern ARM platforms. The most significant\n      issue was that only a single prefetch per C tile column was issued.\n      When a column of C was not cache aligned, the second cache line would\n      not be prefetched at all, forcing the kernel to wait for an entire\n      load to update elements of C. This happened with roughly 50% of the\n      C prefetches. The fix was to have two prefetches per column, spaced\n      64 bytes (1 cache line) apart.\n    - A secondary performance issue was that all the C prefetch instructions\n      were issued sequentially at the beginning of the kernel call. This\n      caused a noticeable performance slowdown. Interleaving the prefetch\n      calls every 2-3 instructions in the prologue code solved the issue.\n\ncommit bbaf29abd942de47a3a99a80a67d12bab41b27db\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 4 17:51:37 2022 -0500\n\n    Very minor variable updates to common.mk.\n    \n    Details:\n    - Fixed a harmless bug that would have allowed C++ headers into the list\n      of header suffices specifically reserved for C99 headers. In practice,\n      this would have had no substantive effect on anything since the core\n      BLIS framework does not use C++ headers.\n\ncommit a48e29d799091a833213efeafaf2d342ebdafde9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jul 28 10:11:07 2022 -0500\n\n    CREDITS file update.\n    \n    Details:\n    - Thanks to Kihiro Bando for assisting with issue #644.\n\ncommit 5b298935de7f20462bfad1893ed34ecd691cec5a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jul 27 19:14:15 2022 -0500\n\n    Removed buggy cruft from power10 subconfig.\n    \n    Details:\n    - Removed #defines for BLIS_BBN_s and BLIS_BBN_d from\n      bli_kernel_defs_power10.h. These were inadvertently set in ae10d949\n      because the power10 subconfig was registering bb packm ukernels, but\n      only for 6xk (power10 uses s8x16 and d8x8 ukernels) and only because\n      the original author (probably) copy-pasted from power9 when getting\n      started. That 6xk packm registration was effectively \"dead code\"\n      prior to ae10d949, but was then mistaken as not-dead code during the\n      ae10d949 refactor. These improper bb factors may have been causing\n      bugs in power10 builds. Thanks to Nicholai Tukanov for helping remind\n      me what the power10 subconfig was supposed to look like.\n    - Removed extraneous microkernel preference registrations from power10\n      subconfig. Preferences for single and double complex gemm were being\n      registered despite there being no complex gemm ukernels registered to\n      go with them. Similarly, there were trsm preferences registered\n      without any trsm ukernels registered (and BLIS doesn't actually use a\n      preference for the trsm ukernel anyway). These extraneous\n      registrations were almost surely not hurting anything, even if they\n      were quite misleading.\n\ncommit 56de31b00fa0f1ba866321817cd1e5d83000ff11\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Jul 27 13:54:17 2022 -0500\n\n    Disable modification of KC in the gemmsup kernels. (#648)\n    \n    This led to a ~50% performance reduction for certain gemm operations (but not others?). See #644 for example.\n\ncommit 4dde947e2ec9e139c162801320c94e6a01a39708\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jul 26 17:29:32 2022 -0500\n\n    Fixed out-of-bounds bug in sup s6x16m haswell kernel.\n    \n    Details:\n    - Fixed another out-of-bounds read access bug in the haswell sup\n      assembly kernels. This bug is similar to the one fixed in 17b0caa\n      and affects bli_sgemmsup_rv_haswell_asm_6x2m(). Thanks to Madeesh\n      Kannan for reporting this bug (and a suitable fix) in #635.\n    - CREDITS file update.\n\ncommit 6826c1cdfba855513786d9e3d606681316453398\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jul 25 18:21:05 2022 -0500\n\n    Add `#line` directives to flattened `blis.h`. (#643)\n    \n    Details:\n    - Modified flatten-headers.py so that #line directives are inserted into\n      the flattened blis.h file. This facilitates easier debugging when\n      something is amiss in the flattened blis.h because the compiler will\n      be able to refer to the line number within the original constituent\n      header file (which is where the fix would go) rather than the line\n      number within the flattened header (which is not as helpful).\n\ncommit af3a41e02534befdae026377592ce437bab83023\nAuthor: Alexander Grund <Flamefire@users.noreply.github.com>\nDate:   Thu Jul 21 18:05:48 2022 +0200\n\n    Add autodetection for POWER7, POWER9 & POWER10 (#647)\n    \n    Read from `/proc/cpuinfo` as done for ARM.\n    Fixes #501\n\ncommit 17b0caa2b2bff439feb6d2b39cfa16e7591882b0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jul 14 17:55:34 2022 -0500\n\n    Fixed out-of-bounds read in haswell gemmsup kernels.\n    \n    Details:\n    - Fixed memory access bugs in the bli_sgemmsup_rv_haswell_asm_Mx2()\n      kernels, where M = {1,2,3,4,5,6}. The bugs were caused by loading four\n      single-precision elements of C, via instructions such as:\n    \n            vfmadd231ps(mem(rcx, 0*32), xmm3, xmm4)\n    \n      in situations where only two elements are guaranteed to exist. (These\n      bugs may not have manifested in earlier tests due to the leading\n      dimension alignment that BLIS employs by default.) The issue was fixed\n      by replacing lines like the one above with:\n    \n            vmovsd(mem(rcx), xmm0)\n            vfmadd231ps(xmm0, xmm3, xmm4)\n    \n      Thus, we use vmovsd to explicitly load only two elements of C into\n      registers, and then operate on those values using register addressing.\n      Thanks to Daniël de Kok for reporting these bugs in #635, and to\n      Bhaskar Nallani for proposing the fix).\n    - CREDITS file update.\n\ncommit cc260fd7068f0fe449d818435aa11adb14c17fed\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jul 13 16:16:01 2022 -0500\n\n    Allow uniform max problem sizes in test/3/runme.sh.\n    \n    Details:\n    - Tweaked test/3/runme.sh so that the test driver binaries for single-\n      threaded (st), single-socket (1s), and dual-socket (2s) execution can\n      be built using identical problem size ranges. Previously, this was not\n      possible because runme.sh used the maximum problem size, which was\n      embedded into the binary filename, to tell the three classes of\n      binaries apart from one another. Now, runme.sh uses the binary suffix\n      (\"st\", \"1s\", or \"2s\") to tell them apart. This required only a few\n      changes to the logic, but it also required a change in format to the\n      threading config strings themselves (replacing the max problem size\n      with \"st\", \"1s\", or \"2s\"). Thanks to Jeff Diamond for inspiring this\n      improvement.\n    - Comment updates.\n\ncommit 9b1beec60be31c6ea20b85806d61551497b699e4\nAuthor: bartoldeman <bartoldeman@users.noreply.github.com>\nDate:   Mon Jul 11 20:15:12 2022 -0400\n\n    Use BLIS_ENABLE_COMPLEX_RETURN_INTEL in blastest files (#636)\n    \n    Details:\n    - Fixed a crash that occurs when either cblat1 or zblat1 are linked\n      with a build of BLIS that was compiled with '--complex-return=intel'.\n      This fix involved inserting preprocessor macro guards based on\n      BLIS_ENABLE_COMPLEX_RETURN_INTEL into blastest/src/cblat1.c and\n      blastest/src/zblat1.c to correctly handle situations where BLIS is\n      compiled with Intel/f2c-style calling conventions for complex numbers.\n    - Updated blastest/src/fortran/run-f2c.sh so that future executions\n      will insert the aforementioned cpp macro conditional where\n      appropriate.\n\ncommit 98d467891b74021ace7f248cb0856bec734e39b6\nAuthor: bartoldeman <bartoldeman@users.noreply.github.com>\nDate:   Mon Jul 11 19:40:53 2022 -0400\n\n    Change complex_return='intel' for ifx. (#637)\n    \n    Details:\n    - When checking the version string of the Fortran compiler for the\n      purposes of determining a default return convention for complex\n      domain values, grep for \"IFORT\" instead of \"ifort\" since that string\n      is common to both the 'ifx' and 'ifort' binaries provided by Intel:\n    \n        $ ifx --version\n        ifx (IFORT) 2022.1.0 20220316\n        Copyright (C) 1985-2022 Intel Corporation. All rights reserved.\n    \n        $ ifort --version\n        ifort (IFORT) 2021.6.0 20220226\n        Copyright (C) 1985-2022 Intel Corporation. All rights reserved.\n\ncommit ffde54cc5c334aca8eff4d6072ba49496bf3104c\nAuthor: jdiamondGitHub <jeff_diamond@fastmail.com>\nDate:   Mon Jul 11 16:47:30 2022 -0500\n\n    Minor changes to .gitignore and LICENSE files. (#642)\n    \n    Details:\n    - Macs create .DS_Store files in every directory visited. Updated\n      .gitignore file so these files won't be reported as untracked by\n      'git status'.\n    - Added Oracle Corporation to the LICENSE file.\n    - Updated UT copyright on behalf of SHPC.\n\ncommit 7cba7ce3dd1533fcc4ca96ac902bdf218686139a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 8 11:15:18 2022 -0500\n\n    Minor cleanups, comment updates to bli_gks.c.\n    \n    Details:\n    - Removed a redundant registration of 'a64fx' subconfig in\n      bli_gks_init().\n    - Reordered registration of 'armsve', 'a64fx', and 'firestorm'\n      subconfigs. Thanks to Jeff Diamond for his input on this reordering.\n    - Comment updates to bli_gks.c and arch_t enum in bli_type_defs.h.\n\ncommit 667f201b7871da68622027d02bd6b7da3262f8e8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jul 7 16:44:21 2022 -0500\n\n    Fixed type bug in bli_cntx_set_ukr_prefs().\n    \n    Details:\n    - Fixed a bug in bli_cntx_set_ukr_prefs() which erroneously typecast the\n      num_t value read from va_args() down to a bool before being stored\n      within the cntx_t. This bug was introduced on April 6th 2022, in\n      ae10d94. This caused the ukernel preferences for double real and\n      double complex to go unchanged while the preferences for single real\n      and single complex were corrupted by the former datatypes'\n      preference values. The bug manifested as degraded performance for\n      subconfigurations that registered column-preferential ukernels. The\n      reason is that the erroneous preferences trigger unnecessary\n      transpositions in the operation, which forces the gemm ukernel to\n      compute on matrices that are not stored according to its preference.\n      Thanks to Devin Matthews, Jeff Diamond, and Leick Robinson for their\n      extensive efforts and assistance in tracking down this issue.\n    - Augmented the informational header that is output by the testsuite to\n      include ukernel preferences for gemm, gemmtrsm_[lu], and trsm_[lu].\n    - CREDITS file update.\n\ncommit d429b6bfced21a63bf711224ac402f93f0080b52\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Tue Jun 28 15:34:10 2022 -0500\n\n    Support clang targetting MinGW (#639)\n    \n    * Support clang targetting MinGW\n    \n    * Fix pthread linking\n\ncommit d93df023348144e091f7b3e3053995648f348aa7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jun 15 14:09:49 2022 -0500\n\n    Removed unused dt arg in bli_gks_query_ind_cntx().\n    \n    Details:\n    - Removed the num_t datatype argument from bli_gks_query_ind_cntx().\n      This argument stopped being needed by the function in commit e9da642.\n      Its only use in bli_gks_query_ind_cntx() was to be passed through to\n      the context initialization function for the chosen induced method,\n      but even then, commit log notes from e9da642 indicate that I could not\n      recall why the datatype argument was ever needed by the context init\n      function to begin with.\n    - Updated all invocations of bli_gks_query_ind_cntx() to omit the dt\n      argument. Most of these invocations resided in various standalone test\n      drivers (and the testsuite).\n\ncommit 56772892450cc92b3fbd6a9d0460153a43fc47ab\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jun 1 10:49:33 2022 -0500\n\n    Added SMU citation to README.md intro.\n    \n    Details:\n    - Added a citation to SMU and the Matthews Research Group to the general\n      attribution of maintainership and development in the Introduction of\n      the README.md file. Thanks to Robert van de Geijn and Devin Matthews\n      for suggesting this change.\n\ncommit 4603324eb090dfceaad3693a70b2d60544036aa8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 19 14:07:03 2022 -0500\n\n    Init/finalize via bli_pthread_switch_t API (#634).\n    \n    Details:\n    - Defined and implemented a new pthread-like abstract datatype and API\n      in bli_pthread.c. The new type, bli_pthread_switch_t, is similar to\n      bli_pthread_once_t in some respects. The idea is that like a switch in\n      your home that controls a light or ceiling fan, it can either be on or\n      off. The switch starts in the off state. Moving from one state to the\n      other (on to off; off to on) causes some action (i.e., a startup or\n      shutdown function) to be executed. Trying to move from one state to\n      the same state (on to on; off to off) is safe in that it results in\n      no action. Unlike bli_pthread_once(), the API for bli_pthread_switch_t\n      contains both _on() and _off() interfaces. Also, unlike the _once()\n      function, the _on() and _off() functions return error codes so that\n      the 'int' error code returned from the startup or shutdown functions\n      may be passed back to the caller. Thanks to Devin Matthews for his\n      input and feedback on this feature.\n    - Replaced the previous implementation of bli_init_once() and\n      bli_finalize_once() -- both of which used bli_pthread_once() -- with\n      ones that rely upon bli_pthread_switch_on() and _switch_off(),\n      respectively. This also required updating the return types of\n      _init_apis() and _finalize_apis() to match the function pointer type\n      required by bli_pthread_switch_on()/_switch_off().\n    - Comment updates.\n\ncommit 64a9b061f6032e2b59613aecdbe7bb52161605c1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue May 10 14:54:22 2022 -0500\n\n    Fixed misspelling of 'xpbys' in gemm macrokernel.\n    \n    Details:\n    - Fixed a functionally harmless typo in bli_gemm_ker_var2.c where a few\n      instances of the substring \"xpbys\" were misspelled as \"xbpys\". The\n      misspellings were harmless because they were consistent, and because\n      they referenced only local symbols.\n\ncommit 1c733402a95ab08b20f3332c2397fd52a2627cf6\nAuthor: Jed Brown <jed@jedbrown.org>\nDate:   Thu Apr 28 11:58:44 2022 -0600\n\n    Fix version check for znver3, which needs gcc >= 10.3 (#628)\n    \n    Apple's clang-12 lacks znver3 support, unlike upstream clang-12.\n\ncommit 6431c9e13b86e4442b6aacba18a0ace12288c955\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Apr 14 13:01:24 2022 -0500\n\n    Added missing 'const' to zen bli_gemm_small.c.\n    \n    Details:\n    - Added missing 'const' qualifiers to signatures of functions defined in\n      kernels/zen/3/bli_gemm_small.c. This fixes compile-time errors when\n      targeting 'zen3' subconfig (which apparently is enabling AMD's\n      gemm_small code path by default). Thanks to Devin Matthews for\n      reporting this error.\n\ncommit 9fea633748ed27ef3853bba7cd955690c61092b4\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Apr 13 15:59:06 2022 -0500\n\n    Partial addition of 'const' to all interfaces above the (micro)kernels. (#625)\n    \n    Details:\n    - Added 'const' qualifier to applicable function arguments wherever the\n      the pointed-to object is not internally modified. This change affects\n      all interfaces that reside above the level of the (micro)kernels.\n    - Typecast certain function return values to discard 'const' qualifier.\n    - Removed 'restrict' from various arguments, including cntx_t*,\n      auxinfo_t*, rntm_t*, thrinfo_t*, mem_t*, and others\n    - Removed parts of some APIs, such as bli_cntx_*(), due to limited use.\n    - Merged some variable declarations with their corresponding\n      initialization statements.\n    - Whitespace changes.\n\ncommit ae10d9495486f589ed0320f0151b2d195574f1cf (origin/amd)\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Apr 6 20:31:11 2022 -0500\n\n    Simplify and rewrite reference packm kernels. (#610)\n    \n    Details:\n    - Reorganized the way kernels are stored within the cntx_t structure so\n      that rather than having a function pointer for every supported size of\n      unrolled packm kernel (2xk, 3xk, 4xk, etc.), we store only two packm\n      kernels per datatype: one to pack MRxk micropanels and one to pack\n      NRxk micropanels.\n      - NOTE: The \"bb\" (broadcast B) reference kernels have been merged into\n        the \"standard\" kernels (packm [including 1er and unpackm], gemm,\n        trsm, gemmtrsm). This replication factor is controlled by\n        BLIS_BB[MN]_[sdcz] etc. Power9/10 needs testing since only a\n        replication factor of 1 has been tested. armsve also needs testing\n        since the MR value isn't available as a macro.\n    - Simplified the bli_cntx_*() APIs to conform to the new unified kernel\n      array within the cntx_t. Updated existing bli_cntx_init_<subconfig>()\n      function definitions for all subconfigurations.\n    - Consolidated all kernel id types (e.g. l1vkr_t, l1mkr_t, l3ukr_t,\n      etc.) into one kernel id type: ukr_t.\n    - Various edits, updates, and rewrites of reference kernels pursuant to\n      the aforementioned changes.\n    - Define compile-time macro constants (BLIS_MR_[sdcz], BLIS_NR_[sdcz],\n      and friends) in bli_kernel_macro_defs.h, but only when the macro\n      BLIS_IN_REF_KERNEL is defined by the build system.\n    - Loose ends:\n      - Still need to update documentation, including:\n        - docs/ConfigurationHowTo.md\n        - docs/KernelsHowTo.md\n        to reflect changes made in this commit.\n\ncommit b3e674db3c05ca586b159a71deb1b61d701ae5c9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Apr 4 17:31:02 2022 -0500\n\n    README.md update to link to releases page.\n\ncommit 69fa915464c52f09a5971a60f521900d31a34e69\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 1 08:47:46 2022 -0500\n\n    Fixed broken \"tagged releases\" link in README.md.\n\ncommit 88cab8383ca90ddbb4cf13e69b7d44a1663a4425\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 1 08:12:06 2022 -0500\n\n    CHANGELOG update (0.9.0)\n\ncommit 14c86f66b20901b60ee276da355c1b62642c18d2 (tag: 0.9.0)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 1 08:12:06 2022 -0500\n\n    Version file update (0.9.0)\n\ncommit 99bb9002f1aff598d347eae2821a3f7bdd1f48e8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 1 08:10:59 2022 -0500\n\n    ReleaseNotes.md update in advance of next version.\n\ncommit bee7678b2558a691ac850819dbe33fefe4fdbee3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 31 14:09:39 2022 -0500\n\n    CREDITS file update.\n\ncommit cf06364327bd2d21d606392371ff3c5962bee5ba\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 29 16:18:25 2022 -0500\n\n    Fixed typo in BLAS gemm3m call to _check().\n    \n    Details:\n    - Fixed an unresolved symbol issue leftover from #590 whereby ?gemm3m_()\n      as defined in bla_gemm3m.c was referencing bla_gemm3m_check(), which\n      does not exist. It should have simply called the _check() function for\n      gemm.\n\ncommit 1ec020b33ece1681c0041e2549eed2bd4c6cf356\nAuthor: Dipal M Zambare <71366780+dzambare@users.noreply.github.com>\nDate:   Wed Mar 30 02:45:36 2022 +0530\n\n    AMD kernel updates; frame-specific AMD updates. (#597)\n    \n    Details:\n    - Allow building BLIS with certain framework files (each with the '_amd'\n      suffix) that have been customized by AMD for Zen-based hardware. These\n      customized files were derived from portable versions of the same files\n      (i.e., those without the '_amd' suffix). Whether the portable or AMD-\n      specific files are compiled is now controlled by a new configure\n      option, --[en|dis]able-amd-frame-tweaks. This option is disabled by\n      default in vanilla BLIS, though AMD may choose to enable it by default\n      in their fork. For now, the added AMD-specific files are:\n      - bli_gemv_unf_var2_amd.c\n      - bla_copy_amd.c\n      - bla_gemv_amd.c\n      These files reside in 'amd' subdirectories found within the directory\n      housing their generic counterparts.\n    - Register optimized real-domain copyv, setv, and swapv kernels in\n      bli_cntx_init_zen.c.\n    - Various minor updates to level-1v kernels in 'zen' kernel set.\n    - Added caxpyf kernel as well as saxpyf and multiple daxpyf kernels to\n      the 'zen' kernel set\n    - If the problem passed to ?gemm_() in bla_gemm.c has a unit m or n dim,\n      call gemv instead and return early.\n    - Combined variable declarations with their initialization in various\n      level-2 and level-3 BLAS compatibility files, and also inserted\n      'const' qualifer in those same declaration statements.\n    - Moved frame/compat/bla_gemmt.c and .h to frame/compat/extra/ .\n    - Added copyv and swapv test drivers to 'test' directory.\n    - Whitespace, comment changes.\n\ncommit 0db2bd5341c5c3ed5f1cc2bffa90952735efa45f\nAuthor: Bhaskar Nallani <Nallani.Bhaskar@amd.com>\nDate:   Fri Mar 25 05:11:55 2022 +0530\n\n    Added BLAS/CBLAS APIs for gemm3m. (#590)\n    \n    Details:\n    - Created ?gemm3m_() and cblas_?gemm3m() APIs that (for now) simply\n      invoke the 1m implementation unconditionally. (Note that these APIs\n      bypass sup handling.)\n    - Added BLAS prototypes for gemm3m in frame/compat/bla_gemm3m.h.\n    - Added CBLAS prototypes for gemm3m in frame/compat/cblas/src/cblas.h.\n    - Relocated:\n        frame/compat/cblas/src/cblas_?gemmt.c\n      files into\n        frame/compat/cblas/src/extra/\n    - Relocated frame/compat/bla_gemmt.? into frame/compat/extra/ .\n    - Minor reorganization of prototypes and cpp macro directives in\n      bli_blas.h, cblas.h, and cblas_f77.h.\n    - Trival whitespace change to cblas_zgemm.c.\n\ncommit d6810000e961fe807dc5a7db81180a8355f3eac0\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Mar 14 10:29:54 2022 -0500\n\n    Update Multithreading.md\n    \n    Add notes about `BLIS_IR_NT` (should typically be 1) and `BLIS_JR_NT` (should typically be small, e.g. <= 4). [ci skip]\n\ncommit f1dbb0e514f53a3240d3a6cbdc3306b01a2206f5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 11 13:38:28 2022 -0600\n\n    Trival whitespace change; commit log addendum.\n    \n    Details:\n    - A co-attribution to Mithun Mohan was inadvertently omitted from the\n      commit log for headline change in the previous commit, 7c07b47.\n\ncommit 7c07b477e432adbbce5812ed9341ba3092b03976\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 11 13:28:50 2022 -0600\n\n    Avoid gemmsup barriers when not packing A or B. (#622)\n    \n    Details:\n    - Implemented a multithreaded optimization for the special (and common)\n      case of employing the gemmsup code path when the user requests\n      (implicitly or explicitly) that neither A nor B be packed during\n      computation. This optimization takes the form of a greatly reduced\n      code branch in bli_thrinfo_sup_create_for_cntl(), which avoids a\n      broadcast and two barriers, and results in higher performance when\n      obtaining two-way or higher parallelism within BLIS. Thanks to\n      Bhaskar Nallani of AMD for proposing this change via issue #605.\n    - Added an early return branch to bli_thrinfo_create_for_cntl() that\n      detects and quickly handles cases where no parallelism is being\n      obtained within BLIS (i.e., single-threaded execution). Note that\n      this special case handling was/is already present in\n      bli_thrinfo_sup_create_for_cntl().\n    - CREDITS file update.\n\ncommit cad10410b2305bc0e328c5f2517ab02593b53428\nAuthor: Ivan Korostelev <ivan23kor@gmail.com>\nDate:   Thu Mar 10 09:58:14 2022 -0600\n\n    POWER10: edge cases in microkernel (#620)\n    \n    Use new API for POWER10 gemm microkernel\n\ncommit 71851a0549276b17db18a0a0c8ab4f54493bf033\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 8 17:38:09 2022 -0600\n\n    Fixed level-3 performance bug in haswell ukernels.\n    \n    Details:\n    - Fixed a performance regression affecting nearly all level-3 operations\n      that use the 'haswell' sgemm and dgemm microkernels. This regression\n      was introduced in 54fa28b, caused by an ill-formed conditional\n      expression in the assembly code that controls whether cache lines of C\n      should be prefetched as rows or as columns. Essentially, the two\n      branches were reversed, causing incomplete prefetching to occur for\n      both row- and column-stored instances of matrix C. Thanks to Devin\n      Matthews for his help finding and fixing this bug.\n\ncommit 84732bf95634ac606c5f2661d9474318e366c386\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 28 12:19:31 2022 -0600\n\n    Revamp how tools are handled/checked by configure.\n    \n    Details:\n    - Consolidate handling of tools that are specifiable via CC, CXX, FC,\n      PYTHON, AR, and RANLIB into one bash function, select_tool_w_env().\n      - If the user specifies a tool via an environment variable (e.g.\n        CC=gcc) and that tool does not seem valid, print an error message\n        and abort configure, unless the tool is optional (e.g. CXX or FC),\n        in which case a warning message is printed instead.\n      - The definition of \"seems valid\" above amounts to:\n        - responding to at least one of a basic set of command line options\n          (e.g. --version, -V, -h) if the os_name is Linux (since GNU tools\n          tend to respond to flags such as --version) or if the tool in\n          question is CC, CXX, FC, or PYTHON (which tend to respond to the\n          expected flags regardless of OS)\n        - the binary merely existing for AR and RANLIB on Darwin/OSX/BSD.\n          (These OSes tend to have non-GNU versions of ar and ranlib, which\n          typically do not respond to --version and friends.)\n    - This PR addresses #584. Thanks to Devin Matthews for suggesting some\n      of the changes in this commit.\n\ncommit d5146582b1f1bcdccefe23925d3b114d40cd7e31\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Feb 23 03:35:46 2022 +0900\n\n    ArmSVE Ensure Non-zero Block Size (#615)\n    \n    Fixes #613. There are several macros/environment variables which need to be tuned to get good cache block sizes. It would be nice to have a way of getting values automatically.\n\ncommit 4d8352309784403ed6719528968531ffb4483947\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Feb 23 01:03:47 2022 +0900\n\n    Add armsve to arm64 Metaconfig (#614)\n    \n    Availability of the `armsve` subconfig is controlled by the compiler version (gcc/clang). Tested for SVE and non-SVE. Fixes #612.\n\ncommit c9700f369aa84fc00f36c4b817ffb7dab72b865d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Feb 15 15:36:52 2022 -0600\n\n    Renamed SIMD-related macro constants for clarity.\n    \n    Details:\n    - Renamed the following macros defined in bli_kernel_macro_defs.h:\n    \n        BLIS_SIMD_NUM_REGISTERS -> BLIS_SIMD_MAX_NUM_REGISTERS\n        BLIS_SIMD_SIZE          -> BLIS_SIMD_MAX_SIZE\n    \n      Also updated all instances of these macros elsewhere, including\n      subconfigurations, source code, and documentation. Thanks to Devin\n      Matthews for suggesting this change.\n\ncommit ee9ff988c49f16696679d4c6cd3dcfcac7295be7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Feb 15 15:01:51 2022 -0600\n\n    Move edge cases to gemmtrsm ukrs; doc updates.\n    \n    Details:\n    - Moved edge-case handling into the gemmtrsm microkernel. This required\n      changing the microkernel API to take m and n dimension parameters as\n      well as updating all existing gemmtrsm microkernel function pointer\n      types, function signatures, and related definitions to take m and n\n      dimensions. Also updated all existing gemmtrsm kernels in the\n      'kernels' directory (which for now is limited to haswell and penryn\n      kernel sets, plus native and 1m-based reference kernels in\n      'ref_kernels') to take m and n dimensions, and implemented edge-case\n      handling within those microkernels via a collection of new C\n      preprocessor macros defined within bli_edge_case_macro_defs.h. Note\n      that the edge-case handling for gemm-like operations had already\n      been relocated into the gemm microkernel in 54fa28b.\n    - Added desriptive comments to GEMM_UKR_SETUP_CT() and related macros in\n      bli_edge_case_macro_defs.h to allow for easier reading.\n    - Updated docs/KernelsHowTo.md to reflect above changes. Also cleaned up\n      the bullet under \"Implementation Notes for gemm\" that covers alignment\n      issues. (Thanks to Ivan Korostelev for pointing out the confusing and\n      outdated language in issue #591.)\n    - Other minor tweaks to KernelsHowTo.md.\n\ncommit 25061593460767221e1066f9d720fa6676bbed8f\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun Feb 13 20:11:55 2022 -0600\n\n    Don't use `-Wl,-flat-namespace`.\n    \n    Flat namespaces can cause problems due to conflicting system libraries,\n    etc., so just mark `xerbla_` as a weak symbol on macOS instead.\n\ncommit 5a4d3f5208d3d8cc1827f8cc90414c764b7ebab3\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun Feb 13 17:28:30 2022 -0600\n\n    Use -flat_namespace option to link on macOS\n    \n    Fixes #611.\n\ncommit 26742910a087947780a089360e2baf82ea109e01\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun Feb 13 16:53:45 2022 -0600\n\n    Update CC_VENDOR logic\n    \n    Look for `GCC` in addition to `gcc` to handle weird conda version strings. [ci skip]\n\ncommit 2f3872e01d51545c687ae2c8b2650e00552111a7\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Mon Feb 7 17:14:49 2022 +0900\n\n    ArmSVE Adopts Label Wrapper\n    \n    For clang (& armclang?) compilation.\n    \n    Hopefully solves #609 .\n\ncommit 72089bb2917b78d99cf4f27c69125bf213ee54e6\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Feb 5 16:56:04 2022 +0900\n\n    ArmSVE Use Predicate in M-Direction\n    \n    No need to query MR during kernel runtime.\n\ncommit 9cc897f37455d52fbba752e3801f1a9d4a5bfdc1\nAuthor: Ruqing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Feb 3 16:40:02 2022 +0000\n\n    Fix SVE Compil.\n\ncommit b5df1811f1bc8212b2cda6bb97b79819afe236a8\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Feb 3 02:31:29 2022 +0900\n\n    Armv8a, ArmSVE: Simplify Gen-C\n\ncommit 35195bb5cea5d99eb3eaf41e3815137d14ceb52d\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jan 31 10:29:50 2022 -0600\n\n    Add armclang detection to configure.\n    \n    armclang is treated as regular clang. Fixes #606. [ci skip]\n\ncommit 0be9282cdccf73342d8571d3f7971a9b0af72363\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jan 26 17:46:24 2022 -0600\n\n    Updated zen3 macro constant names.\n    \n    Details:\n    - In config/zen3/bli_family_zen3.h, renamed:\n        BLIS_SMALL_MATRIX_A_THRES_M_GEMMT -> _M_SYRK\n        BLIS_SMALL_MATRIX_A_THRES_N_GEMMT -> _N_SYRK\n      Thanks to Jeff Diamond for helping spot the stale _SYRK naming.\n\ncommit 0ab20c0e72402ba0b17fe2c3ed3e16bf2ace0fd3\nAuthor: Jeff Hammond <jehammond@nvidia.com>\nDate:   Thu Jan 13 07:29:56 2022 -0800\n\n    the Apple local label thing is required by Clang in general\n    \n    @egaudry and I both saw this issue on Linux with Clang 10.\n    \n    ```\n    Compiling obj/thunderx2/kernels/armv8a/3/sup/bli_gemmsup_rv_armv8a_asm_d4x8m.o ('thunderx2' CFLAGS for kernels)\n    kernels/armv8a/3/bli_gemm_armv8a_asm_d6x8.c:171:49: fatal error: invalid symbol redefinition\n            \"                                            \\n\\t\"\n                                                           ^\n    <inline asm>:90:5: note: instantiated into assembly here\n               .SLOOPKITER:\n               ^\n    1 error generated.\n    ```\n    \n    Signed-off-by: Jeff Hammond <jehammond@nvidia.com>\n\ncommit 81f93be0561c705ae6823d19e40849facc40bef7\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jan 10 10:19:47 2022 -0600\n\n    Fix row-/column-major pref. in 16x8 haswell sgemm ukr (unused)\n\ncommit 268ce1f29a717d18304713ecc25a2eafe41838c7\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jan 10 10:17:17 2022 -0600\n\n    Relax alignment constraints\n    \n    Remove alignment of temporary AB buffer in edge case handling macros unless alignment is specifically requested (e.g. Core2, SDB/IVB). Fixes #595.\n\ncommit 3f2440b0226d5e23a43d12105d74aa917cd6c610\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jan 6 14:57:36 2022 -0600\n\n    Added m, n dims to gemmd/gemmlike ukernel calls.\n    \n    Details:\n    - Updated the gemmd addon and the gemmlike sandbox code to use the new\n      microkernel calling sequence, which now includes m and n dimensions so\n      that the microkernel has all the information necessary to handle edge\n      cases. Thanks to Jeff Diamond for catching this, which ideally would\n      have been included in commit 54fa28b.\n    - Retired var2 of both gemmd and gemmlike to 'attic' directories and\n      removed their corresponding prototypes. In both cases, var2 was a\n      variant of the block-panel algorithm where edge-case handling was\n      abstracted away to a microkernel wrapper. (Since this is now the\n      official behavior of BLIS microkernels, I saw no need to have it\n      included as a separate code path.)\n    - Comment updates.\n\ncommit 864bfab4486ac910ef9a366e9ade4b45a39747fc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 4 15:10:34 2022 -0600\n\n    CREDITS file update.\n\ncommit 466b68a3ad118342dc49a8130b7b02f5e7748521\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun Jan 2 14:59:41 2022 -0600\n\n    Add unique tag to branch labels for Apple ARM64.\n    \n    Add `%=` tag to branch labels, which expands to a unique identifier for each inline assembly block. This prevents duplicate symbol errors on Apple Silicon (#594). Fixes #594. [ci skip] since we can't test Apple Silicon anyways...\n\ncommit 08174a2f6ebbd8ed5aa2bc4edc45da80962f06bb\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Jan 1 21:35:19 2022 +0900\n\n    Evict <arm_sve.h> Requirement for SVE GEMM\n    \n    For 8<= GCC < 10 compatibility.\n\ncommit 54fa28bd847b389215cffb57a83dc9b3dce79c86\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Dec 24 08:00:33 2021 -0600\n\n    Move edge cases to gemm ukr; more user-custom mods. (#583)\n    \n    Details:\n    - Moved edge-case handling into the gemm microkernel. This required\n      changing the microkernel API to take m and n dimension parameters.\n      This required updating all existing gemm microkernel function pointer\n      types, function signatures, and related definitions to take m and n\n      dimensions. We also updated all existing kernels in the 'kernels'\n      directory to take m and n dimensions, and implemented edge-case\n      handling within those microkernels via a collection of new C\n      preprocessor macros defined within bli_edge_case_macro_defs.h. Also\n      removed the assembly code that formerly would handle general stride\n      IO on the microtile, since this can now be handled by the same code\n      that does edge cases.\n    - Pass the obj_t.ker_fn (of matrix C) into bli_gemm_cntl_create() and\n      bli_trsm_cntl_create(), where this function pointer is used in lieu of\n      the default macrokernel when it is non-NULL, and ignored when it is\n      NULL.\n    - Re-implemented macrokernel in bli_gemm_ker_var2.c to be a single\n      function using byte pointers rather that one function for each\n      floating-point datatype. Also, obtain the microkernel function pointer\n      from the .ukr field of the params struct embedded within the obj_t\n      for matrix C (assuming params is non-NULL and contains a non-NULL\n      value in the .ukr field). Communicate both the gemm microkernel\n      pointer to use as well as the params struct to the microkernel via\n      the auxinfo_t struct.\n    - Defined gemm_ker_params_t type (for the aforementioned obj_t.params\n      struct) in bli_gemm_var.h.\n    - Retired the separate _md macrokernel for mixed datatype computation.\n      We now use the reimplemented bli_gemm_ker_var2() instead.\n    - Updated gemmt macrokernels to pass m and n dimensions into microkernel\n      calls.\n    - Removed edge-case handling from trmm and trsm macrokernels.\n    - Moved most of bli_packm_alloc() code into a new helper function,\n      bli_packm_alloc_ex().\n    - Fixed a typo bug in bli_gemmtrsm_u_template_noopt_mxn.c.\n    - Added test/syrk_diagonal and test/tensor_contraction directories with\n      associated code to test those operations.\n\ncommit 961d9d509dd94f3a66f7095057e3dc8eb6d89839\nAuthor: Kiran <kiran.varaganti@amd.com>\nDate:   Wed Dec 8 03:00:38 2021 +0530\n\n    Re-add BLIS_ENABLE_ZEN_BLOCK_SIZES macro for 'zen'.\n    \n    Details:\n    - Added previously-deleted cpp macro block to bli_cntx_init_zen.c\n      targeting the Naples microarchitecture that enabled different cache\n      blocksizes when the number of threads exceeds 16. This commit\n      represents PR #573.\n\ncommit cf7d616a2fd58e293b496770654040818bf5609c\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Dec 2 17:10:03 2021 -0600\n\n    Enable user-customized packm ukernel/variant. (#549)\n    \n    Details:\n    - Added four new fields to obj_t: .pack_fn, .pack_params, .ker_fn, and\n      .ker_params. These fields store pointers to functions and data that\n      will allow the user to more flexibly create custom operations while\n      recycling BLIS's existing partitioning infrastructure.\n    - Updated typed API to packm variant and structure-aware kernels to\n      replace the diagonal offset with panel offsets, and changed strides\n      of both C and P to inc/ldim semantics. Updated object API to the packm\n      variant to include rntm_t*.\n    - Removed the packm variant function pointer from the packm cntl_t node\n      definition since it has been replaced by the .pack_fn pointer in the\n      obj_t.\n    - Updated bli_packm_int() to read the new packm variant function pointer\n      from the obj_t and call it instead of from the cntl_t node.\n    - Moved some of the logic of bli_l3_packm.c to a new file,\n      bli_packm_alloc.c.\n    - Rewrote bli_packm_blk_var1.c so that it uses byte (char*) pointers\n      instead of typed pointers, allowing a single function to be used\n      regardless of datatype. This obviated having a separate implementation\n      in bli_packm_blk_var1_md.c. Also relegated handling of scalars to a\n      new function, bli_packm_scalar().\n    - Employed a new standard whereby right-hand matrix operands (\"B\") are\n      always packed as column-stored row panels -- that is, identically to\n      that of left-hand matrix operands (\"A\"). This means that while we pack\n      matrix A normally, we actually pack B in a transposed state. This\n      allowed us to simplify a lot of code throughout the framework, and\n      also affected some of the logic in bli_l3_packa() and _packb().\n    - Simplified bli_packm_init.c in light of the new B^T convention\n      described above. bli_packm_init()--which is now called from within\n      bli_packm_blk_var1()--also now calls bli_packm_alloc() and returns\n      a bool that indicates whether packing should be performed (or\n      skipped).\n    - Consolidated bli_gemm_int() and bli_trsm_int() into a bli_l3_int(),\n      which, among other things, defaults the new .pack_fn field of the\n      obj_t to bli_packm_blk_var1() if the field is NULL.\n    - Defined a new function, bli_obj_reset_origin(), which permanently\n      refocuses the view of an object so that it \"forgets\" any offsets from\n      its original pointer. This function also sets the object's root field\n      to itself. Calls to bli_obj_reset_origin() for each matrix operand\n      appear in the _front() functions, after the obj_t's are aliased. This\n      resetting of the underlying matrices' origins is needed in preparation\n      for more advanced features from within custom packm kernels.\n    - Redefined bli_pba_rntm_set_pba() from a regular function to a static\n      inline function.\n    - Updated gemm_ukr, gemmtrsm_ukr, and trsm_ukr testsuite modules to use\n      libblis_test_pobj_create() to create local packed objects. Previously,\n      these packed objects were created by calling lower-level functions.\n\ncommit e229e049ca08dfbd45794669df08a71dba892925\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Dec 1 17:36:22 2021 -0600\n\n    Added recu-sed.sh script to 'build' directory.\n    \n    Details:\n    - Added a recursive sed script to the 'build' directory.\n\ncommit 12c66a4acc77bf4927b01e2358e2ac10b61e0a53\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 19 14:43:53 2021 -0600\n\n    Minor updates to README.md, docs/Addons.md.\n    \n    Details:\n    - Add additional mentions of addons to README.md, including in the\n      \"What's New\" section.\n    - Removed mention of sandboxes from the long list of advantages\n      provided by BLIS.\n    - Very minor description update to opening line of Addons.md.\n\ncommit a4bc03b990fe0572001eb6409efd12cd70677dcf\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 19 13:29:00 2021 -0600\n\n    Brief mention/link to Addons.md in README.md.\n    \n    Details:\n    - Add a blurb about the new addons feature to the \"Documentation for\n      BLIS developers\" section of the README.md, which also links to the\n      Addons.md document.\n\ncommit b727645eb7a8df39dee74068f734da66322fe0b3\nMerge: 9be97c15 7bde468c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 19 13:22:09 2021 -0600\n\n    Merge branch 'dev'\n\ncommit 9be97c150e19fa58bca30cb993a6509ae21e2025\nAuthor: Madan mohan Manokar <86282872+madanm3@users.noreply.github.com>\nDate:   Thu Nov 18 00:46:46 2021 +0530\n\n    Support all four dts in test/test_her[2][k].c (#578)\n    \n    Details:\n    - Replaced the hard-coded calls to double-precision real syr, syr2,\n      syrk, and syrk in the corresponding standalone test drivers in the\n      'test' directory with conditional branches that will call the\n      appropriate BLAS interface depending on which datatype is enabled.\n      Thanks to Madan mohan Manokar for this improvement.\n    - CREDITS file update.\n\ncommit 26e4b6b29312b472c3cadf95ccdf5240764777f4\nAuthor: Dipal M Zambare <71366780+dzambare@users.noreply.github.com>\nDate:   Thu Nov 18 00:32:00 2021 +0530\n\n    Added support for AMD's Zen3 microarchitecture.\n    \n    Details:\n    - Added a new 'zen3' subconfiguration targeting support for the AMD Zen3\n      microarchitecture (#561). Thanks to AMD for this contribution.\n    - Restructured clang and AOCC support for zen, zen2, and zen3\n      make_defs.mk files. The clang and AOCC version detection now happens\n      in configure, not in the subconfigurations' makefile fragments. That\n      is, we've added logic to configure that detects the version of\n      clang/AOCC, outputs an appropriate variable to config.mk\n      (ie: CLANG_OT_*, AOCC_OT_*), and then checks for it within the\n      makefile fragment (as is currently done for the GCC_OT_* variables).\n    - Added configure support for a GCC_OT_10_1_0 variable (and associated\n      substitution anchor) to communicate whether the gcc version is older\n      than 10.1.0, and use this variable to check for recent enough versions\n      of gcc to use -march=znver3 in the zen3 subconfig.\n    - Inlined the contents of config/zen/amd_config.mk into the zen and zen2\n      make_defs.mk so that the files are self-contained, harmonizing the\n      format of all three Zen-based subconfigurations' make_defs.mk files.\n    - Added indenting (with spaces) of GNU make conditionals for easier\n      reading in zen, zen2, and zen3 make_defs.mk files.\n    - Adjusted the range of models checked by bli_cpuid_is_zen() (which was\n      previously 0x00 ~ 0xff and is now 0x00 ~ 0x2f) so that it is\n      completely disjoint from the models checked by bli_cpuid_is_zen2()\n      (0x30 ~ 0xff). This is normally necessary because Zen and Zen2\n      microarchitectures share the same family (23, or 0x17), and so the\n      model code is the only way to differentiate the two. But in our case,\n      fixing the model range for zen *wasn't* actually necessary since we\n      checked for zen2 first, and therefore the wide zen range acted like\n      the 'else' of an 'if-else' statement. That said, the change helps\n      improve clarity for the reader by encoding useful knowledge, which\n      was obtained from https://en.wikichip.org/wiki/amd/cpuid .\n    - Added zen2.def and zen3.def files to the collection in travis/cpuid.\n      Note that support for zen, zen2, and zen3 is now present, and while\n      all the three microarchitectures have identical instruction sets from\n      the perspective of BLIS microkernels, they each correspond to\n      different subconfigurations and therefore merit separate testing.\n      Thanks to Devin Matthews for his guidance in hacking these files as\n      slight modifications of zen.def.\n    - Enabled testing of zen2 and zen3 via the SDE in travis/do_sde.sh.\n      Now, zen, zen2, and zen3 are tested through the SDE via Travis CI\n      builds.\n    - Updated travis/do_sde.sh to grab the SDE tarball from a new ci-utils\n      repository on GitHub rather than on Intel's website. This change was\n      made in an attempt to circumvent recent troubles with Travis CI not\n      being able to download the SDE directly from Intel's website via curl.\n      Thanks to Devin Matthews for suggesting the idea.\n    - Updated travis/do_sde.sh to grab the latest version (8.69.1) of the\n      Intel SDE from the flame/ci-utils repository.\n    - Updated .travis.yml to use gcc 9. The file was previously using gcc 8,\n      which did not support -march=znver2.\n    - Created amd64_legacy umbrella family in config_registry for targeting\n      older (bulldozer, piledriver, steamroller, and excavator)\n      microarchitectures and moved those same subconfigs out of the amd64\n      umbrella family. However, x86_64 retains amd64_legacy as a constituent\n      member.\n    - Fixed a bug in configure related to the building of the so-called\n      config list. When processing the contents of config_registry,\n      configure creates a series of structures and lists that allow for\n      various mappings related to configuration families, subconfigs, and\n      kernel sets. Two of those lists are built via substitution of\n      umbrella families with their subconfig members, and one of those\n      lists was improperly performing the substitution in a way that would\n      erroneously match on partial umbrella family names. That code was\n      changed to match the code that was already doing the substitution\n      properly, via substitute_words(). Also added comments noting the\n      importance of using substitute_words() in both instances.\n    - Comment updates.\n\ncommit 74c0c622216aba0c24aa2c3a923811366a160cf5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Nov 16 16:06:33 2021 -0600\n\n    Reverted cbc88fe.\n    \n    Details:\n    - Reverted the annotation of some markdown code blocks with 'bash'\n      after realizing that the in-browser syntax highlighting was not\n      worthwhile.\n\ncommit cbc88feb51b949ce562d044cf9f99c4e46bb8a39\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Nov 16 16:02:39 2021 -0600\n\n    Marked some markdown shell code blocks as 'bash'.\n    \n    Details:\n    - Annotated the code blocks that represent shell commands and output as\n      'bash' in README.md and BuildSystem.md.\n\ncommit 78cd1b045155ddf0b9ec6e2ab815f2b216ad9a9e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Nov 16 15:53:40 2021 -0600\n\n    Added 'Example Code' section to README.md.\n    \n    Details:\n    - Inserted a new 'Example Code' section into the README.md immediately\n      after the 'Getting Started' section. Thanks to Devin Matthews for\n      recommending this addition.\n    - Moved the 'Performance' section of the README down slightly so that it\n      appears after the 'Documentation' section.\n\ncommit 7bde468c6f7ecc4b5322d2ade1ae9c0b88e6b9f3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Nov 13 16:39:37 2021 -0600\n\n    Added support for addons.\n    \n    Details:\n    - Implemented a new feature called addons, which are similar to\n      sandboxes except that there is no requirement to define gemm or any\n      other particular operation.\n    - Updated configure to accept --enable-addon=<name> or -a <name> syntax\n      for requesting an addon be included within a BLIS build. configure now\n      outputs the list of enabled addons into config.mk. It also outputs the\n      corresponding #include directives for the addons' headers to a new\n      companion to the bli_config.h header file named bli_addon.h. Because\n      addons may wish to make use of existing BLIS types within their own\n      definitions, the addons' headers must be included sometime after that\n      of bli_config.h (which currently is #included before bli_type_defs.h).\n      This is why the #include directives needed to go into a new top-level\n      header file rather than the existing bli_config.h file.\n    - Added a markdown document, docs/Addons.md, to explain addons, how to\n      build with them, and what assumptions their authors should keep in\n      mind as they create them.\n    - Added a gemmlike-like implementation of sandwich gemm called 'gemmd'\n      as an addon in addon/gemmd. The code uses a 'bao_' prefix for local\n      functions, including the user-level object and typed APIs.\n    - Updated .gitignore so that git ignores bli_addon.h files.\n\ncommit 7bc8ab485e89cfc6032932e57929e208a28f4be5\nAuthor: Meghana-vankadari <74656386+Meghana-vankadari@users.noreply.github.com>\nDate:   Fri Nov 12 04:16:14 2021 +0530\n\n    Added BLAS/CBLAS APIs for axpby, gemm_batch. (#566)\n    \n    Details:\n    - Expanded the BLAS compatibility layer to include support for\n      ?axpby_() and ?gemm_batch_(). The former is a straightforward\n      BLAS-like interface into the axpbyv operation while the latter\n      implements a batched gemm via loops over bli_?gemm(). Also\n      expanded the CBLAS compatibility layer to include support for\n      cblas_?axpby() and cblas_?gemm_batch(), which serve as wrappers to\n      the corresponding (new) BLAS-like APIs. Thanks to Meghana Vankadari\n      for submitting these new APIs via #566.\n    - Fixed a long-standing bug in common.mk that for some reason never\n      manifested until now. Previously, CBLAS source files were compiled\n      *without* the location of cblas.h being specified via a -I flag.\n      I'm not sure why this worked, but it may be due to the fact that\n      the cblas.h file resided in the same directory as all of the CBLAS\n      source, and perhaps compilers implicitly add a -I flag for the\n      directory that corresponds to the location of the source file being\n      compiled. This bug only showed up because some CBLAS-like source code\n      was moved into an 'extra' subdirectory of that frame/compat/cblas/src\n      directory. After moving the code, compilation for those files failed\n      (because the cblas.h header file, presumably, could not be found in\n      the same location). This bug was fixed within common.mk by explicitly\n      adding the cblas.h directory to the list of -I flags passed to the\n      compiler.\n    - Added test_axpbyv.c and test_gemm_batch.c files to 'test' directory,\n      and updated test/Makefile to build those drivers.\n    - Fixed typo in error message string in cblas_sgemm.c.\n\ncommit 28b0982ea70c21841fb23802d38f6b424f8200e1\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Nov 10 12:34:50 2021 -0600\n\n    Refactored her[2]k/syr[2]k in terms of gemmt. (#531)\n    \n    Details:\n    - Renamed herk macrokernels and supporting files and functions to gemmt,\n      which is possible since at the macrokernel level they are identical.\n      Then recast herk/her2k/syrk/syr2k in terms of gemmt within the expert\n      level-3 oapi (bli_l3_oapi_ex.c) while also redefining them as literal\n      functions rather than cpp macros that instantiate multiple functions.\n      Thanks to Devin Matthews for his efforts on this issue (#531).\n    - Check that the maximum stack buffer size is sufficiently large\n      relative to the register blocksizes for each datatype, and do so when\n      the context is initialized rather than when an operation is called.\n      Note that with this change, users who pass in their own contexts into\n      the expert interfaces currently will *not* have any checks performed.\n      Thanks to Devin Matthews for suggesting this change.\n\ncommit cfa3db3f3465dc58dbbd842f4462e4b49e7768b4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Nov 3 18:13:56 2021 -0500\n\n    Fixed bug in mixed-dt gemm introduced in e9da642.\n    \n    Details:\n    - Fixed a bug that broke certain mixed-datatype gemm behavior. This\n      bug was introduced recently in e9da642 when the code that performs\n      the operation transposition (for microkernel IO preference purposes)\n      was moved up so that it occurred sooner. However, when I moved that\n      code, I failed to notice that there was a cpp-protected \"if\"\n      conditional that applied to the entire code block that was moved. Once\n      the code block was relocated, the orphaned if-statement was now\n      (erroneously) glomming on to the next thing that happened to be in the\n      function, which happened to be the call to bli_rntm_set_ways_for_op(),\n      causing a rather odd memory exhaustion error in the sba due to the\n      num_threads field of the rntm_t still being -1 (because the rntm_t\n      field were never processed as they should have been). Thanks to\n      @ArcadioN09 (Snehith) for reporting this error and helpfully including\n      relevant memory trace output.\n\ncommit f065a8070f187739ec2b34417b8ab864a7de5d7e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Oct 28 16:05:43 2021 -0500\n\n    Removed support for 3m, 4m induced methods.\n    \n    Details:\n    - Removed support for all induced methods except for 1m. This included\n      removing code related to 3mh, 3m1, 4mh, 4m1a, and 4m1b as well as any\n      code that existed only to support those implementations. These\n      implementations were rarely used and posed code maintenance challenges\n      for BLIS's maintainers going forward.\n    - Removed reference kernels for packm that pack 3m and 4m micropanels,\n      and removed 3m/4m-related code from bli_cntx_ref.c.\n    - Removed support for 3m/4m from the code in frame/ind, then reorganized\n      and streamlined the remaining code in that directory. The *ind(),\n      *nat(), and *1m() APIs were all removed. (These additional API layers\n      no longer made as much sense with only one induced method (1m) being\n      supported.) The bli_ind.c file (and header) were moved to frame/base\n      and bli_l3_ind.c (and header) and bli_l3_ind_tapi.h were moved to\n      frame/3.\n    - Removed 3m/4m support from the code in frame/1m/packm.\n    - Removed 3m/4m support from trmm/trsm macrokernels and simplified some\n      pointer arithmetic that was previously expressed in terms of the\n      bli_ptr_inc_by_frac() static inline function (whose definition was\n      also removed).\n    - Removed the following subdirectories of level-0 macro headers from\n      frame/include/level0: ri3, rih, ri, ro, rpi. The level-0 scalar macros\n      defined in these directories were used exclusively for 3m and 4m\n      method codes.\n    - Simplified bli_cntx_set_blkszs() and bli_cntx_set_ind_blkszs() in\n      light of 1m being the only induced method left within BLIS.\n    - Removed dt_on_output field within auxinfo_t and its associated\n      accessor functions.\n    - Re-indexed the 1e/1r pack schemas after removing those associated with\n      variants of the 3m and 4m methods. This leaves two bits unused within\n      the pack format portion of the schema bitfield. (See bli_type_defs.h\n      for more info.)\n    - Spun off the basic and expert interfaces to the object and typed APIs\n      into separate files: bli_l3_oapi.c and bli_l3_oapi_ex.c; bli_l3_tapi.c\n      and bli_l3_tapi_ex.c.\n    - Moved the level-3 operation-specific _check function calls from the\n      operations' _front() functions to the corresponding _ex() function of\n      the object API. (This change roughly maintains where the _check()\n      functions are called in the call stack but lays the groundwork for\n      future changes that may come to the level-3 object APIs.) Minor\n      modifications to bli_l3_check.c to allow the check() functions to be\n      called from the expert interface APIs.\n    - Removed support within the testsuite for testing the aforementioned\n      induced methods, and updated the standalone test drivers in the 'test'\n      directory so reflect the retirement of those induced methods.\n    - Modified the sandbox contract so that the user is obliged to define\n      bli_gemm_ex() instead of bli_gemmnat(). (This change was made in light\n      of the *nat() functions no longer existing.) Also updated the existing\n      'power10' and 'gemmlike' sandboxes to come into compliance with the\n      new sandbox rules.\n    - Updated BLISObjectAPI.md, BLISTypedAPI.md, Testsuite.md documentation\n      to reflect the retirement of 3m/4m, and also modified Sandboxes.md to\n      bring the document into alignment with new conventions.\n    - Updated various comments; removed segments of commented-out code.\n\ncommit e8caf200a908859fa5f5ea2049911a9bdaa3d270\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Oct 18 13:04:15 2021 -0500\n\n    Updated do_sde.sh to get SDE from GitHub.\n    \n    Details:\n    - Updated travis/do_sde.sh so that the script downloads the SDE tarball\n      from a new ci-utils repository on GitHub rather than from Intel's\n      website. This change is being made in an attempt to circumvent Travis\n      CI's recent troubles with downloading the SDE from Intel's website via\n      curl. Thanks to Devin Matthews for suggesting the idea.\n\ncommit 290ff4b1c26737b074d5abbf76966bc22af8c562\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Oct 14 16:09:43 2021 -0500\n\n    Disable SDE testing of old AMD microarchitectures.\n    \n    Details:\n    - Skip testing on piledriver, steamroller, and excavator platforms\n      in travis/do_sde.sh.\n\ncommit 514fd101742dee557e5eb43d0023a221ae8a7172\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Oct 14 13:50:28 2021 -0500\n\n    Fixed substitution bug in configure.\n    \n    Details:\n    - Fixed a bug in configure related to the building of the so-called\n      config list. When processing the contents of config_registry,\n      configure creates a series of structures and list that allow for\n      various mappings related to configuration families, subconfigs,\n      and kernel sets. Two of those lists are built via subsitituion\n      of umbrella families with their subconfig members, and one of\n      those lists was improperly performing the subtitution in a way\n      that would erroneously match on partial umbrella family names.\n      That code was changed to match the code that was already doing\n      the subtitution properly, via substitute_words().\n    - Added comments noting the importance of using substitute_words()\n      in both instances.\n\ncommit e9da6425e27a9d63c9fef92afc2dd750c601ccd7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Oct 13 14:15:38 2021 -0500\n\n    Allow use of 1m with mixing of row/col-pref ukrs.\n    \n    Details:\n    - Fixed a bug that broke the use of 1m for dcomplex when the single-\n      precision real and double-precision real ukernels had opposing I/O\n      preferences (row-preferential sgemm ukernel + column-preferential\n      dgemm ukernel, or vice versa). The fix involved adjusting the API\n      to bli_cntx_set_ind_blkszs() so that the induced method context init\n      function (e.g., bli_cntx_init_<subconfig>_ind()) could call that\n      function for only one datatype at a time. This allowed the blocksize\n      scaling (which varies depending on whether we're doing 1m_r or 1m_c)\n      to happen on a per-datatype basis. This fixes issue #557. Thanks to\n      Devin Matthews and RuQing Xu for helping discover and report this bug.\n    - The aforementioned 1m fix required moving the 1m_r/1m_c logic from\n      bli_cntx_ref.c into a new function, bli_l3_set_schemas(), which is\n      called from each level-3 _front() function. The pack_t schemas in the\n      cntx_t were also removed entirely, along with the associated accessor\n      functions. This in turn required updating the trsm1m-related virtual\n      ukernels to read the pack schema for B from the auxinfo_t struct\n      rather than the context. This also required slight tweaks to\n      bli_gemm_md.c.\n    - Repositioned the logic for transposing the operation to accommodate\n      the microkernel IO preference. This mostly only affects gemm. Thanks\n      to Devin Matthews for his help with this.\n    - Updated dpackm pack ukernels in the 'armsve' kernel set to avoid\n      querying pack_t schemas from the context.\n    - Removed the num_t dt argument from the ind_cntx_init_ft type defined\n      in bli_gks.c. The context initialization functions for induced methods\n      were previously passed a dt argument, but I can no longer figure out\n      *why* they were passed this value. To reduce confusion, I've removed\n      the dt argument (including also from the function defintion +\n      prototype).\n    - Commented out setting of cntx_t schemas in bli_cntx_ind_stage.c. This\n      breaks high-leve implementations of 3m and 4m, but this is okay since\n      those implementations will be removed very soon.\n    - Removed some older blocks of preprocessor-disabled code.\n    - Comment update to test_libblis.c.\n\ncommit 81e103463214d589071ccbe2d90b8d7c19a186e4\nAuthor: Minh Quan Ho <1337056+hominhquan@users.noreply.github.com>\nDate:   Wed Oct 13 20:28:02 2021 +0200\n\n    Alloc at least 1 elem in pool_t block_ptrs. (#560)\n    \n    Details:\n    - Previously, the block_ptrs field of the pool_t was allowed to be\n      initialized as any unsigned integer, including 0. However, a length of\n      0 could be problematic given that malloc(0) is undefined and therefore\n      variable across implementations. As a safety measure, we check for\n      block_ptrs array lengths of 0 and, in that case, increase them to 1.\n    - Co-authored-by: Minh Quan Ho <minh-quan.ho@kalray.eu>\n\ncommit 327481a4b0acf485d0cbdd8635dd9b886ba3f2a7\nAuthor: Minh Quan Ho <1337056+hominhquan@users.noreply.github.com>\nDate:   Tue Oct 12 19:53:04 2021 +0200\n\n    Fix insufficient pool-growing logic in bli_pool.c. (#559)\n    \n    Details:\n    - The current mechanism for growing a pool_t doubles the length of the\n      block_ptrs array every time the array length needs to be increased\n      due to new blocks being added. However, that logic did not take in\n      account the new total number of blocks, and the fact that the caller\n      may be requesting more blocks that would fit even after doubling the\n      current length of block_ptrs. The code comments now contain two\n      illustrating examples that show why, even after doubling, we must\n      always have at least enough room to fit all of the old blocks plus\n      the newly requested blocks.\n    - This commit also happens to fix a memory corruption issue that stems\n      from growing any pool_t that is initialized with a block_ptrs length\n      of 0. (Previously, the memory pool for packed buffers of C was\n      initialized with a block_ptrs length of 0, but because it is unused\n      this bug did not manifest by default.)\n    - Co-authored-by: Minh Quan Ho <minh-quan.ho@kalray.eu>\n\ncommit 32a6d93ef6e2af5e486dfd5e46f8272153d3d53d\nMerge: 408906fd 2604f407\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Oct 9 15:53:54 2021 -0500\n\n    Merge pull request #543 from xrq-phys/armsve-packm-fix\n    \n    ARMSVE Block SVE-Intrinsic Kernels for GCC 8-9\n\ncommit 408906fdd8892032aa11bd061b7971128f453bef\nMerge: 4277fec0 ccf16289\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Oct 9 15:50:25 2021 -0500\n\n    Merge pull request #542 from xrq-phys/armsve-zgemm\n    \n    Arm SVE CGEMM / ZGEMM Natural Kernels\n\ncommit ccf16289d2e71fd9511ccf2d13dcebbfa29deabc\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Oct 8 12:34:14 2021 +0900\n\n    Arm SVE C/ZGEMM Fix FMOV 0 Mistake\n    \n    FMOV [hsd]M, #imm does not allow zero immediate.\n    Use wzr, xzr instead.\n\ncommit 82b61283b2005f900101056e6df2a108258db602\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Oct 8 12:17:29 2021 +0900\n\n    SH Kernel Unused Eigher\n\ncommit 1749dfa493054abd2e4ddba7cb21278d337e4f74\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Oct 8 12:11:53 2021 +0900\n\n    Arm SVE C/ZGEMM Support *beta==0\n\ncommit 4b648e47daad256ab8ab698173a97f71ab9f75eb\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Sep 22 16:42:09 2021 +0900\n\n    Arm SVE Config armsve Use ZGEMM/CGEMM\n\ncommit f76ea905e216cf640975e6319c6d2f54aeafed2e\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Tue Sep 21 20:38:44 2021 +0900\n\n    Arm SVE: Update Perf. Graph\n    \n    Pic. size seems a bit different from upstream.\n    Generaged w/ MATLAB. Open to any change.\n\ncommit 66a018e6ad00d9e8967b67e1aa3e23b20a7efdfe\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Mon Sep 20 00:16:11 2021 +0900\n\n    Arm SVE CGEMM 2Vx10 Unindex Process Alpha=1.0\n\ncommit 9e1e781cb59f8fadb2a10a02376d3feac17ce38d\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sun Sep 19 23:30:42 2021 +0900\n\n    Arm SVE ZGEMM 2Vx10 Unindex Process Alpha=1.0\n\ncommit f7c6c2b119423e7ba7a24ae2156790e076071cba\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Sep 16 01:47:42 2021 +0900\n\n    A64FX Config Use ZGEMM/CGEMM\n\ncommit e4cabb977d038688688aca39b366f98f9c36b7eb\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Sep 16 01:34:26 2021 +0900\n\n    Arm SVE Typo Fix ZGEMM/CGEMM C Prefetch Reg\n\ncommit b677e0d61b23f26d9536e5c363fd6bbab6ee1540\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Sep 16 01:18:54 2021 +0900\n\n    Arm SVE Add SGEMM 2Vx10 Unindexed\n\ncommit 3f68e8309f2c5b31e25c0964395a180a80014d36\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Sep 16 01:00:54 2021 +0900\n\n    Arm SVE ZGEMM Support Gather Load / Scatt. St.\n\ncommit c19db2ff826e2ea6ac54569e8aa37e91bdf7cabe\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Sep 15 23:39:53 2021 +0900\n\n    Arm SVE Add ZGEMM 2Vx10 Unindexed\n\ncommit e13abde30b9e0e381c730c496e74bc7ae062a674\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Sep 15 04:19:45 2021 +0900\n\n    Arm SVE Add ZGEMM 2Vx7 Unindexed\n\ncommit 49b9d7998eb86f340ae7b26af3e5a135d6a8feee\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Tue Sep 14 04:02:47 2021 +0900\n\n    Arm SVE Add ZGEMM 2Vx8 Unindexed\n\ncommit 4277fec0d0293400497ae8bcfc32be5e62319ae9\nMerge: 2329d990 f44149f7\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Oct 7 13:47:22 2021 -0500\n\n    Merge pull request #533 from xrq-phys/arm64-hi-bw\n    \n    ARMv8 PACKM and GEMMSUP Kernels + Apple Firestorm Subconfig\n\ncommit 2329d99016fe1aeb86da4552295f497543cea311 (origin/1m_row_col_problem)\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Oct 7 12:37:58 2021 -0500\n\n    Update Travis CI badge\n    \n    [ci skip]\n\ncommit f44149f787ae3d4b53d9c4d8e6f23b2818b7770d\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Oct 8 02:35:58 2021 +0900\n\n    Armv8 Trash New Bulk Kernels\n    \n    - They didn't make much improvements.\n    - Can't register row-preferral and column-preferral ukrs at the same time.\n      Will break 1m.\n\ncommit 70b52cadc5ef4c16431e1876b407019e6286614e\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Oct 7 12:34:35 2021 -0500\n\n    Enable testing 1m in `make check`.\n\ncommit 2604f4071300d109f28c8438be845aeaf3ec44e4\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Oct 7 02:39:00 2021 +0900\n\n    Config ArmSVE Unregister 12xk. Move 12xk to Old\n\ncommit 1e3200326be9109eb0f8c7b9e4f952e45700cbba\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Oct 7 02:37:14 2021 +0900\n\n    Revert __has_include(). Distinguish w/ BLIS_FAMILY_**\n\ncommit a4066f278a5c06f73b16ded25f115ca4b7728ecb\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Oct 7 02:26:05 2021 +0900\n\n    Register firestorm into arm64 Metaconfig\n\ncommit d7a3372247c37568d142110a1537632b34b8f2ff\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Oct 7 02:25:14 2021 +0900\n\n    Armv8 DGEMMSUP Fix Edge 6x4 Switch Case Typo\n\ncommit 2920dde5ac52e09f84aa42990aab8340421522ce\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Oct 7 02:01:45 2021 +0900\n\n    Armv8 DGEMMSUP Fix 8x4m Store Inst. Typo\n\ncommit 14b13583f1802c002e195b3b48874b3ebadbeb20\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Oct 6 10:22:34 2021 -0500\n\n    Add test for Apple M1 (firestorm)\n    \n    This test will run on Linux, but all the kernels should run just fine. This does not test autodetection but then none of the other ARM tests do either.\n\ncommit a024715065532400da6257b8b3124ca5aecda405\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Oct 7 00:15:54 2021 +0900\n\n    Firestorm CPUID Dispatcher\n    \n    Commenting out <sys/sysctl.h> due to possibly a Xcode bug.\n\ncommit b9da6d55fec447d05c8b67f34ce83617123d8357\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Oct 6 12:25:54 2021 +0900\n\n    Armv8 GEMMSUP Edge Cases Require Signed Ints\n    \n    Fix a bug in bli_gemmsup_rd_armv8a_asm_d6x8m.c.\n    For safety upon similar strategies in the future,\n     change all [mn]_[iter/left] into signed ints.\n\ncommit 34919de3df5dda7a06fc09dcec12ca46dc8b26f4\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Oct 2 18:48:50 2021 -0500\n\n    Make error checking level a thread-local variable.\n    \n    Previously, this was a global variable. Setting the value was synchronized via a mutex but reading the value was not. Of course, these accesses are almost certainly atomic, but there is still the possibility of one thread attempting to set the value and then reading the value set by another thread. For correct operation under user threading (e.g. pthreads), this should probably be thread-local with no mutex.\n\ncommit c3024993c3d50236fad112822215f066496c5831\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Oct 5 15:20:27 2021 -0500\n\n    Fix data race in testsuite.\n\ncommit 353a0d82572f26e78102cee25693130ce6e0ea5b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Oct 5 14:24:17 2021 -0500\n\n    Update .appveyor.yml\n    \n    [ci skip]\n\ncommit 4bfadf9b561d4ebe0bbaf8b6d332f07ff531d618\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Oct 6 01:51:26 2021 +0900\n\n    Firestorm Block Size Fixes\n\ncommit 40baf83f0ea2749199b93b5a8ac45c01794b008c\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Oct 6 01:00:52 2021 +0900\n\n    Armv8 Handle *beta == 0 for GEMMSUP ??r Case.\n\ncommit 079fbd42ce8cf7ea67a939b0f80f488de5821319\nMerge: f5c03e9f 9905f443\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 17:21:48 2021 -0500\n\n    Merge branch 'master' into arm64-hi-bw\n\ncommit 9905f44347eea4c57ef4927b81f1c63e76a92739\nMerge: 6d3036e3 64a421f6\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 15:58:59 2021 -0500\n\n    Merge pull request #553 from flame/rpath-fix\n    \n    Add an option to use an @rpath-dependent install_name on macOS\n\ncommit 6d3036e31d8a2c1acbc1260489eeb8f535a8f97a\nMerge: 53377fcc eaa554aa\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 15:58:43 2021 -0500\n\n    Merge pull request #545 from hominhquan/clean_error\n    \n    bli_error: more cleanup on the error strings array\n\ncommit 53377fcca91e595787b38e2a47780ac0c35a7e7c\nMerge: d0a0b4b8 80c5366e\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 15:45:53 2021 -0500\n\n    Merge pull request #554 from flame/armsve-cleanup\n    \n    Move unused ARM SVE kernels to \"old\" directory.\n\ncommit 80c5366e4a9b8b72d97fba1eab89bab8989c44f4\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 15:40:28 2021 -0500\n\n    Move unused ARM SVE kernels to \"old\" directory.\n\ncommit 64a421f6983ab5bc0b55df30a2ddcfff5bfd73be\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 13:40:43 2021 -0500\n\n    Add an option to control whether or not to use @rpath.\n    \n    Adds `--enable-rpath/--disable--rpath` (default disabled) to use an install_name starting with @rpath/. Otherwise, set the install_name to the absolute path of the install library, which was the previous behavior.\n\ncommit c4a31683dd6f4da3065d86c11dd998da5192740a\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 13:27:10 2021 -0500\n\n    Fix $ORIGIN usage on linux.\n\ncommit d0a0b4b841fce56b7b2d3c03c5d93ad173ce2b97\nAuthor: Dave Love <dave.love@manchester.ac.uk>\nDate:   Mon Oct 4 18:03:04 2021 +0000\n\n    Arm micro-architecture dispatch (#344)\n    \n    Details:\n    - Reworked support for ARM hardware detection in bli_cpuid.c to parse\n      the result of a CPUID-like instruction.\n    - Added a64fx support to bli_gks.c.\n    - #include arm64 and arm32 family headers from bli_arch_config.h.\n    - Fix the ordering of the \"armsve\" and \"a64fx\" strings in the\n      config_name string array in bli_arch.c. The ordering did not match\n      the ordering of the corresponding arch_t values in bli_type_defs.h,\n      as it should have all along.\n    - Added clang support to make_defs.mk in arm64, cortexa53, cortexa57\n      subconfigs.\n    - Updated arm64 and arm32 families in config_registry.\n    - Updated docs/HardwareSupport.md to reflect added ARM support.\n    - Thanks to Dave Love, RuQing Xu, and Devin Matthews for their\n      contributions in this PR (#344).\n\ncommit 91408d161a2b80871463ffb6f34c455bdfb72492\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Oct 4 11:37:48 2021 -0500\n\n    Use @path-based install name on MacOS and use relocatable RPATH entries for testsuite inaries.\n    \n    - RPATH entries (and DYLD_LIBRARY_PATH) do nothing on macOS unless the install_name of the library starts with @rpath/. While the install_name can be set to the absolute install path, this makes the installation non-relocatable. When using @path in the install_name, install paths within the normal DYLD_LIBRARY_PATH work with no changes on the user side, but for install paths off the beaten track, users must specify an RPATH entry when linking (or modify DYLD_LIBRARY_PATH at runtime). Perhaps this could be made into a configure-time option.\n    - Having relocable testsuite binaries is not necessarily a priority but it is easy to do with @executable_path (macOS) or $ORIGIN (linux/BSD).\n\ncommit f5c03e9fe808f9bd8a3e0c62786334e13c46b0fc\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sun Oct 3 16:51:51 2021 +0900\n\n    Armv8 Handle *beta == 0 for GEMMSUP ?rc Case.\n\ncommit abc648352c591e26ceee436bd3a45400115b70c5\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sun Oct 3 13:14:19 2021 +0900\n\n    Armv8 Fix 6x8 Row-Maj Ukr\n    \n    - Fixed for 6x8 only, 4x4 & 4x8 pending;\n    - Installed to config firestorm as benchmark seems to show better perf:\n       Old:\n    blis_dgemm_ukr_c                     6     8   320    36.87   2.43e-17   PASS\n    blis_dgemm_ukr_c                     6     8   352    40.55   1.04e-17   PASS\n    blis_dgemm_ukr_c                     6     8   384    44.24   5.68e-17   PASS\n    blis_dgemm_ukr_c                     6     8   416    41.67   3.51e-17   PASS\n    blis_dgemm_ukr_c                     6     8   448    34.41   2.94e-17   PASS\n    blis_dgemm_ukr_c                     6     8   480    42.53   2.35e-17   PASS\n    \n       New:\n    blis_dgemm_ukr_r                     6     8   352    50.69   1.59e-17   PASS\n    blis_dgemm_ukr_r                     6     8   384    49.15   5.55e-17   PASS\n    blis_dgemm_ukr_r                     6     8   416    50.44   2.86e-17   PASS\n    blis_dgemm_ukr_r                     6     8   448    46.92   3.12e-17   PASS\n    blis_dgemm_ukr_r                     6     8   480    48.08   4.08e-17   PASS\n\ncommit 0a45bc0fbc7aee3876c315ed567fc37f19cdc57f\nMerge: 5013a6cb 13dbd5b5\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Oct 2 18:59:43 2021 -0500\n\n    Merge pull request #552 from flame/armsve_beta_0\n    \n    Add explicit handling for beta == 0 in armsve sd and armv7a d gemm ukrs.\n\ncommit 13dbd5b5d3dbf27e33ecf0e98d43c97019a6339d\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Oct 2 20:40:25 2021 +0000\n\n    Apply patch from @xrq-phys.\n\ncommit ae0eeeaf77c77892db17027cef10b95ec97c904f\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Sep 29 16:42:33 2021 -0500\n\n    Add explicit handling for beta == 0 in armsve sd and armv7a d gemm ukrs.\n\ncommit 5013a6cb7110746c417da96e4a1308ef681b0b88\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Sep 29 10:38:50 2021 -0500\n\n    More edits and fixes to docs/FAQ.md.\n\ncommit b36fb0fbc5fda13d9a52cc64953341d3d53067ee\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 28 18:47:45 2021 -0500\n\n    Fixed newly broken link to CREDITS in FAQ.md.\n\ncommit 3442d4002b3bfffd8848f72103b30691df2b19b1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 28 18:43:23 2021 -0500\n\n    More minor fixes to FAQ.md and Sandboxes.md.\n\ncommit 89aaf00650d6cc19b83af2aea6c8d04ddd3769cb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 28 18:34:33 2021 -0500\n\n    Updates to FAQ.md, Sandboxes.md, and README.md.\n    \n    Details:\n    - Updated FAQ.md to include two new questions, reordered an existing\n      question, and also removed an outdated and redundant question about\n      BLIS vs. AMD BLIS.\n    - Updated Sandboxes.md to use 'gemmlike' as its main example, along with\n      other smaller details.\n    - Added ARM as a funder to README.md.\n\ncommit c52c43115ec2264fda9380c48d9e6bb1e1ea2ead\nMerge: 1fc23d21 1f527a93\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Sep 26 15:56:54 2021 -0500\n\n    Merge branch 'dev'\n\ncommit 1fc23d2141189c7b583a5bff2cffd87fd5261444\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 21 14:54:20 2021 -0500\n\n    Safelist 'master', 'dev', 'amd' branches.\n    \n    Details:\n    - Modified .travis.yml so that only commits to 'master', 'dev', and\n      'amd' branches get built by Travis CI. Thanks to Devin Matthews for\n      helping to track down the syntax for this change.\n\ncommit 1f527a93b996093e06ef7a8e94fb47ee7e690ce0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Sep 20 17:56:36 2021 -0500\n\n    Re-enable and fix fb93d24.\n    \n    Details:\n    - Re-enabled the changes made in fb93d24.\n    - Defined BLIS_ENABLE_SYSTEM in bli_arch.c, bli_cpuid.c, and bli_env.c,\n      all of which needed the definition (in addition to config_detect.c) in\n      order for the configure-time hardware detection binary to be compiled\n      properly. Thanks to Minh Quan Ho for helping identify these additional\n      files as needing to be updated.\n    - Added additional comments to all four source files, most notably to\n      prompt the reader to remember to update all of the files when updating\n      any of the files. Also made the cpp code in each of the files as\n      consistent/similar as possible.\n    - Refer to issues #532 and PR #546 for more history.\n\ncommit 7b39c1492067de941f81b49a3b6c1583290336fd\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Sep 20 16:13:50 2021 -0500\n\n    Reverted fb93d24.\n    \n    Details:\n    - The latest changes in fb93d24 are still causing problems. Reverting\n      and preparing to move them to a branch.\n\ncommit fb93d242a4fef4694ce2680436da23087bbdd5fe\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Sep 20 15:42:08 2021 -0500\n\n    Re-enable and fix 8e0c425 (BLIS_ENABLE_SYSTEM).\n    \n    Details:\n    - Re-enable the changes originally made in 8e0c425 but quickly reverted\n      in 2be78fc.\n    - Moved the #include of bli_config.h so that it occurs before the\n      #include of bli_system.h. This allows the #define BLIS_ENABLE_SYSTEM\n      or #define BLIS_DISABLE_SYSTEM in bli_config.h to be processed by the\n      time it is needed in bli_system.h. This change should have been\n      in the original 8e0c425, but was accidentally omitted. Thanks to Minh\n      Quan Ho for catching this.\n    - Add #define BLIS_ENABLE_SYSTEM to config_detect.c so that the proper\n      cpp conditional branch executes in bli_system.h when compiling the\n      hardware detection binary. The changes made in 8e0c425 were an attempt\n      to support the definition of BLIS_OS_NONE when configuring with\n      --disable-system (in issue #532).  That commit failed because, aside\n      from the required but omitted header reordering (second bullet above),\n      AppVeyor was unable to compile the hardware detection binary as a\n      result of missing Windows headers. This commit, which builds on PR\n      #546, should help fix that issue. Thanks to Minh Quan Ho for his\n      assistance and patience on this matter.\n\ncommit eaa554aa52b879d181fdc87ba0bfad3ab6131517\nAuthor: Minh Quan HO <minh-quan.ho@kalray.eu>\nDate:   Wed Sep 15 15:39:36 2021 +0200\n\n    bli_error: more cleanup on the error strings array\n    \n    - There was redundance between the macro BLIS_MAX_NUM_ERR_MSGS (=200) and\n      the enum BLIS_ERROR_CODE_MAX (-170), while they both mean the same thing:\n      the maximal number of error codes/messages.\n    - The previous initialization of error messages at compile time ignored that\n      the 'bli_error_string' array still occupies useless memory due to 2D char[][]\n      declaration. Instead, it should be just an array of pointers, pointing at\n      strings in .rodata section.\n    - This commit does the two modifications:\n       * retired macros BLIS_MAX_NUM_ERR_MSGS and BLIS_MAX_ERR_MSG_LENGTH everywhere\n       * switch bli_error_string from char[][] to char *[] to reduce its footprint\n         from 40KB (200*200) to 1.3KB (170*sizeof(char*)).\n         (No problem to use the enum BLIS_ERROR_CODE_MAX at compile-time,\n         since compiler is smart enough to determine its value is 170.)\n\ncommit 52f29f739dbbb878c4cde36dbe26b82847acd4e9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Sep 17 08:38:29 2021 -0500\n\n    Removed last vestige of #define BLIS_NUM_ARCHS.\n    \n    Details:\n    - Removed the commented-out #define BLIS_NUM_ARCHS in bli_type_defs.h\n      and its associated (now outdated) comments. BLIS_NUM_ARCHS has been\n      part of the arch_t enum for some time now, and so this change is\n      mostly about removing any opportunity for confusion for people who\n      may be reading the code. Thanks to Minh Quan Ho for leading me to\n      cleanup.\n\ncommit 849aae09f4fbf8d7abf11f4df1471f1d057e874b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 16 14:47:45 2021 -0500\n\n    Added new packm var3 to 'gemmlike'.\n    \n    Details:\n    - Defined a new packm variant for the 'gemmlike' sandbox. This new\n      variant (bls_l3_packm_var3.c) parallelizes the packing operation over\n      the k dimension rather than the m or n dimensions. Note that the\n      gemmlike implementation still uses var1 by default, and use of the new\n      code would require changing bls_l3_packm_a.c and/or bls_l3_packm_b.c\n      so that var3 is called instead. Thanks to Jeff Diamond for proposing\n      this (perhaps NUMA-friendly) solution.\n\ncommit b6f71fd378b7cd0cdc5c780e0b8c975a7abde998\nMerge: 9293a68e e3dc1954\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Sep 16 12:24:33 2021 -0500\n\n    Merge pull request #544 from flame/haswell-gemmsup-fpe\n    \n    Fix more copy-paste errors in the haswell gemmsup code.\n\ncommit e3dc1954ffb5eee2a8b41fce85ba589f75770eea\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Sep 16 10:59:37 2021 -0500\n\n    Fix problem where uninitialized registers are included in vhaddpd in the Mx1 gemmsup kernels for haswell.\n    \n    The fix is to use the same (valid) source register twice in the horizontal addition.\n\ncommit 5191c43faccf45975f577c60b9089abee25722c9\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Sep 16 10:16:17 2021 -0500\n\n    Fix more copy-paste errors in the haswell gemmsup code.\n    \n    Fixes #486.\n\ncommit 30c29b256ef13f0141ca9e9169cbdc7a45ce3a61\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Sep 16 05:01:03 2021 +0900\n\n    Arm SVE Exclude SVE-Intrinsic Kernels for GCC 8-9\n    \n    Affected configs: a64fx.\n\ncommit bffa85be59dece8e756b9444e762f18892c06ee1\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Sep 16 04:31:45 2021 +0900\n\n    Arm SVE: Correct PACKM Ker Name: Intrinsic Kers\n    \n    SVE-Intrinsic-based kernels ought not to use asm in their names.\n\ncommit 9293a68eb6557a9ea43a846435908c3d52d4218b\nMerge: ade10f42 98ce6e8b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Sep 10 14:13:29 2021 -0500\n\n    Merge pull request #534 from flame/cxx_test\n    \n    Add test to Travis using C++ compiler to make sure blis.h is C++-compatible\n\ncommit 98ce6e8bc916e952510872caa60d818d62a31e69\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Sep 10 14:12:13 2021 -0500\n\n    Do a fast test on OSX. [ci skip]\n\ncommit c76fcad0c2836e7140b6bef3942e0a632a5f2cda\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Sep 10 13:57:02 2021 -0500\n\n    Fix AArch64 tests and consolidate some other tests.\n\ncommit e486d666ffefee790d5e39895222b575886ac1ea\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Sep 10 13:50:16 2021 -0500\n\n    Use C++ cross-compiler for ARM tests.\n\ncommit fbb3560cb8e2aeab205c47c2b096d4fa306d93db\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Sep 10 13:38:27 2021 -0500\n\n    Attempt to fix cxx-test for OOT builds.\n\ncommit 9c0064f3f67d59263c62d57ae19605562bb87cc2\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Sep 10 10:39:04 2021 -0500\n\n    Fix config_name in bli_arch.c\n\ncommit ade10f427835d5274411cafc9618ac12966eb1e7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Aug 27 12:47:12 2021 -0500\n\n    Updated travis-ci.org link in README.md to .com.\n\ncommit 2be78fc97777148c83d20b8509e38aa1fc1b4540\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Aug 27 12:17:26 2021 -0500\n\n    Disabled (at least temporarily) commit 8e0c425.\n    \n    Details:\n    - Reverted changes in 8e0c425 due to AppVeyor build failures that we do\n      not yet understand.\n\ncommit 820f11a4694aee5f234e24277aecca40885ae9d4\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Aug 27 13:40:26 2021 +0900\n\n    Arm Whole GEMMSUP Call Route is Asm/Int Optimized\n    \n    - `ref2` call in `bli_gemmsup_rv_armv8a_asm_d6x8m.c` is commented out.\n    - `bli_gemmsup_rv_armv8a_asm_d4x8m.c` contains a tail `ref2` call but\n      it's not called by any upper routine.\n\ncommit 8e0c4255de52a0a5cffecbebf6314aa52120ebe4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 26 15:29:18 2021 -0500\n\n    Define BLIS_OS_NONE when using --disable-system.\n    \n    Details:\n    - Modified bli_system.h so that the cpp macro BLIS_OS_NONE is defined\n      when BLIS_DISABLE_SYSTEM is defined. Otherwise, the previous OS-\n      detecting macro conditionals are considered. This change is to\n      accommodate a solution to a cross-compilation issue described in\n      #532.\n\ncommit d6eb70fbc382ad7732dedb4afa01cf9f53e3e027\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 26 13:12:39 2021 -0500\n\n    Updated stale calls to malloc_intl() in gemmlike.\n    \n    Details:\n    - Updated two out-of-date calls to bli_malloc_intl() within the gemmlike\n      sandbox. These calls to malloc_intl(), which resided in\n      bls_l3_decor_pthreads.c, were missing the err_t argument that the\n      function uses to report errors. Thanks to Jeff Diamond for helping\n      isolate this issue.\n\ncommit 2f7325b2b770a15ff8aaaecc087b22238f0c67b7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Aug 23 15:04:05 2021 -0500\n\n    Blacklist clang10/gcc9 and older for 'armsve'.\n    \n    Details:\n    - Prohibit use of clang 10.x and older or gcc 9.x and older for the\n      'armsve' subconfiguration. Addresses issue #535.\n\ncommit 7e2951e61fda1c325d6a76ca9956253482d84924\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Mon Aug 23 17:06:44 2021 +0900\n\n    Arm: DGEMMSUP `Macro' Edge Cases Stop Calling Ref\n    \n    Ref cannot handle panel strides (packed cases) thus cannot be called\n    from the beginning of `gemmsup` (i.e. cannot be dispatch target of\n    gemmsup to other sizes.)\n\ncommit 4fd82b0e9348553d83e258bd4969e49a81f8fcf0\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Mon Aug 23 05:18:32 2021 +0900\n\n    Header Typo\n\ncommit 35409ebe67557c0e7cf5ced138c8166c9c1c909f\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Mon Aug 23 04:51:47 2021 +0900\n\n    Arm: DGEMMSUP ??r(rv) Invoke Edge Size\n    \n    Plus some fix at edges.\n    \n    TODO: Should ensure that no ref kernel appear in beginning of gemmsup\n    kernels. As ref does not recognise panel stride.\n\ncommit a361492c24fdd919ee037763fc6523e8d7d2967a\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Mon Aug 23 01:13:39 2021 +0900\n\n    Arm: DGEMMSUP ?rc(rd) Invoke Edge Size\n\ncommit eaea67401c2ab31f2e51eede59725f64c1a21785\nMerge: 5fc65cdd e320ec6d\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Aug 21 16:09:31 2021 -0500\n\n    Merge branch 'master' into cxx_test\n\ncommit 5fc65cdd9e4134c5dcb16d21cd4a79ff426ca9f3\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Aug 21 15:59:27 2021 -0500\n\n    Add test to Travis using C++ compiler to make sure blis.h is C++-compatible.\n\ncommit e320ec6d5cd44e03cb2e2faa1d7625e84f76d668\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Aug 20 17:15:20 2021 -0500\n\n    Moved lang defs from _macro_def.h to _lang_defs.h.\n    \n    Details:\n    - Moved miscellaneous language-related definitions, including defs\n      related to the handling of the 'restrict' keyword, from the top half\n      of bli_macro_defs.h into a new file, bli_lang_defs.h, which is now\n      #included immediately after \"bli_system.h\" in blis.h. This change is\n      an attempt to fix a report of recent breakage of C++ compilers due\n      to the recent introduction of 'restrict' in bli_type_defs.h (which\n      previously was being included *before* bli_macro_defs.h and its\n      restrict handling therein. Thanks to Ivan Korostelev for reporting\n      this issue in #527.\n    - CREDITS file update.\n\ncommit e6799b26a6ecf1e80661a77d857d1c9e9adf50dc\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Aug 21 02:39:38 2021 +0900\n\n    Arm: Implement GEMMSUP Fallback Method\n    \n    bli_dgemmsup_rv_armv8a_int_6x4mn\n\ncommit 7d5903d8d7570090eb37c592094424d1c64805d1\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Aug 21 01:55:50 2021 +0900\n\n    Arm64 Fix: Support Alpha/Beta in GEMMSUP Intrin\n    \n    Forgot to support `alpha`/`beta` in gemmsup_armv8a_int.\n\ncommit 3b275f810b2479eb5d6cf2296e97a658cf1bb769\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 19 16:06:46 2021 -0500\n\n    Minor tweaks to gemmlike sandbox.\n    \n    Details:\n    - In the gemmlike sandbox, changed the loop index variable of inner\n      loop of packm_cxk() from 'd' to 'i' (and likewise for the\n      corresponding inlined code within packm_var2()).\n    - Pack matrices A and B using packm_var1() instead of packm_var2().\n\ncommit 3eccfd456e7e84052c9a429dcde1183a7ecfaa48\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 19 13:22:10 2021 -0500\n\n    Added local _check() code to gemmlike sandbox.\n    \n    Details:\n    - Added code to the gemmlike sandbox that handles parameter checking.\n      Previously, the gemmlike implementation called bli_gemm_check(), which\n      resides within the BLIS framework proper. Certain modifications that a\n      user may wish to perform on the sandbox, such as adding a new matrix\n      or vector operand, would have required additional checks, and so these\n      changes make it easier for such a person to implement those checks for\n      their custom gemm-like operation.\n\ncommit 7144230cdb0653b70035ddd91f7f41e06ad8d011\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Aug 18 13:25:39 2021 -0500\n\n    README.md citation updates (e.g. BLIS7 bibtex).\n\ncommit 4a955e939044cfd2048cf9f3e33024e3ad1fbe00\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Aug 16 13:49:27 2021 -0500\n\n    Tweaks to gemmlike to facilitate 3rd party mods.\n    \n    Details:\n    - Changed the implementation in the 'gemmlike' sandbox to more easily\n      allow others to provide custom implementations of packm. These changes\n      include:\n      - Calling a local version of packm_cxk() that can be modified. This\n        version of packm_cxk() uses inlined loops in packm_cxk() rather\n        than querying the context for packm kernels (or even using scal2m).\n      - Providing two variants of packm, one of which calls the\n        aforementioned packm_cxk(), the other of which inlines the contents\n        of packm_cxk() into the variant itself, making it self-contained.\n        To switch from one to the other, simply change which function gets\n        called within bls_packm_a() and bls_packm_b().\n      - Simplified and cleaned up some variant names in both variants of\n        packm, relative to their parent code.\n\ncommit 2c0b4150e40c83ea814f69ca766da74c19ed0a58\nMerge: c99fae50 4b8ed99d\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Aug 14 18:41:35 2021 -0500\n\n    Merge pull request #527 from flame/obj_t_makeover\n    \n    Implement proposed new function pointer fields for obj_t.\n\ncommit 4b8ed99d926876fbf54c15468feae4637268eb6b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Aug 13 15:31:10 2021 -0500\n\n    Whitespace tweaks.\n\ncommit c99fae50ac3de0b5380a085aeebebfe67a645407\nMerge: e6d68bc4 4f70eb79\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Aug 13 14:48:00 2021 -0500\n\n    Merge pull request #530 from flame/fix_clang_warnings\n    \n    Clean up some warnings that show up on clang/OSX.\n\ncommit e6d68bc4fd0981bea90d7f045779cacfe53f6ae8\nMerge: 20a1c401 ec06b6a5\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Aug 13 14:47:46 2021 -0500\n\n    Merge pull request #529 from flame/fix_make_check_dependencies\n    \n    Add dependency on the \"flat\" blis.h file for the BLIS and BLAS testuite objects.\n\ncommit 1772db029e10e0075b5a59d3fb098487b1ad542a\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Aug 13 14:46:35 2021 -0500\n\n    Add row- and column-strides for A/B in obj_ukr_fn_t.\n\ncommit 4f70eb7913ad3ded193870361b6da62b20ec3823\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Aug 13 11:12:43 2021 -0500\n\n    Clean up some warnings that show up on clang/OSX.\n\ncommit 3cddce1e2a021be6064b90af30022b99cbfea986\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Aug 12 22:32:34 2021 -0500\n\n    Remove schema field on obj_t (redundant) and add new API functions.\n\ncommit ec06b6a503a203fa0cdb23273af3c0e3afeae7fa\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Aug 12 19:27:31 2021 -0500\n\n    Add dependency on the \"flat\" blis.h file for the BLIS and BLAS testsuite objects.\n    \n    This fixes a bug where \"make -j<N> check\" may fail after a change to one or more header files, or where testsuite code doesn't get properly recompiled after internal changes.\n\ncommit 20a1c4014c999063e6bc1cfa605b152454c5cbf4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 12 14:44:04 2021 -0500\n\n    Disabled sanity check in bli_pool_finalize().\n    \n    Details:\n    - Disabled a sanity check in bli_pool_finalize() that was meant to alert\n      the user if a pool_t was being finalized while some blocks were still\n      checked out. However, this is exactly the situation that might happen\n      when a pool_t is re-initialized for a larger blocksize, and currently\n      bli_pool_reinit() is implemeneted as _finalize() followed by _init().\n      So, this sanity check is not universally appropriate. Thanks to\n      AMD-India for reporting this issue.\n\ncommit e366665cd2b5ae8d7683f5ba2de345df0a41096f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 12 14:06:53 2021 -0500\n\n    Fixed stale API calls to membrk API in gemmlike.\n    \n    Details:\n    - Updated stale calls to the bli_membrk API within the 'gemmlike'\n      sandbox. This API is now called bli_pba (packed block allocator).\n      Ideally, this forgotten update would have been included as part of\n      21911d6, which is when the branch where the membrk->pba changes was\n      introduced was merged into 'master'.\n    - Comment updates.\n\ncommit e38ca28689f31c5e5bd2347704dc33042e5ea176\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Aug 13 03:21:19 2021 +0900\n\n    Added Apple Firestorm (A14/M1) Subconfig\n    \n    - Use the same bulk kernel as Cortex-A53 / ThunderX2;\n    - Larger block size;\n    - Use gemmsup kernels for double precision.\n\ncommit 3df0e9b653fbb1293cad93010273eea579e753d9\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Jul 17 04:21:53 2021 +0900\n\n    Arm64 8x4 Kernel Use Less Regs\n\ncommit 4e7e225057a05b9722ce65ddf75a9c31af9fbf36\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Jun 9 15:46:36 2021 +0900\n\n    Armv8-A Supplimentary GEMMSUP Sizes for RD\n\ncommit c792d506ba09530395c439051727631fd164f59a\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Jun 5 04:20:24 2021 +0900\n\n    Armv8-A Fix GEMMSUP-RD Kernels on GNU Asm\n    \n    Suffixed NEON opcode is not supported by GNU assembler\n\ncommit ce4473520975c2c8790c82c65a69d75f8ad758ea\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Jun 5 04:08:14 2021 +0900\n\n    Armv8-A Adjust Types for PACKM Kernels\n    \n    GCC does not have full NEON intrinsics support.\n\ncommit 8a32d19af85b61af92fcab1c316fb3be1a8d42ce\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Jun 5 03:31:30 2021 +0900\n\n    Armv8-A GEMMSUP-RD 6x8m\n    \n    Armv8-A now has a complete set of GEMMSUP kernels..\n\ncommit afd0fa6ad1889ed073f781c8aa8635f99e76b601\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat Jun 5 01:19:01 2021 +0900\n\n    Armv8-A GEMMSUP-RD 6x8n\n\ncommit 3c5f7405148ab142dee565d00da331d95a7a07b9\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Jun 4 21:50:51 2021 +0900\n\n    Armv8-A s/d Packing Kernels Fix Typo\n    \n    For GCC.\n\ncommit 49b05df7929ec3abc0d27b475d2d406116fe2682\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Fri Jun 4 18:04:59 2021 +0900\n\n    Armv8-A Introduced s/d Packing Kernels\n    \n    Sizes according to the 2014 kernels.\n\ncommit c3faf93168c3371ff48a2d40d597bdb27021cad4\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Jun 3 23:09:05 2021 +0900\n\n    Armv8-A DGEMMSUP 6x8m Kernel\n    \n    Recommended kernels set:\n      ...\n      BLIS_RRR, BLIS_DOUBLE, bli_dgemmsup_rv_armv8a_asm_6x8m, TRUE,\n      BLIS_RCR, BLIS_DOUBLE, bli_dgemmsup_rv_armv8a_asm_6x8m, TRUE,\n      BLIS_RCC, BLIS_DOUBLE, bli_dgemmsup_rv_armv8a_asm_6x8n, TRUE,\n      BLIS_CRR, BLIS_DOUBLE, bli_dgemmsup_rv_armv8a_asm_6x8m, TRUE,\n      BLIS_CCR, BLIS_DOUBLE, bli_dgemmsup_rv_armv8a_asm_6x8n, TRUE,\n      BLIS_CCC, BLIS_DOUBLE, bli_dgemmsup_rv_armv8a_asm_6x8n, TRUE,\n      ...\n      bli_blksz_init     ( &blkszs[ BLIS_MR ],    -1,     6,    -1,    -1,\n                                                  -1,     8,    -1,    -1 );\n      bli_blksz_init_easy( &blkszs[ BLIS_NR ],    -1,     8,    -1,    -1 );\n      ...\n\ncommit 3efe707b5500954941061d4c2363d6ed41d17233\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Jun 3 17:20:57 2021 +0900\n\n    Armv8-A DGEMMSUP Adjustments\n\ncommit 8ed8f5e625de9b77a0f14883283effe79af01771\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Jun 3 16:37:37 2021 +0900\n\n    Armv8-A Add More DGEMMSUP\n    \n    - Add 6x8 GEMMSUP.\n    - Adjust prefetching.\n    - Workaround for Clang's disability to handle reg clobbering.\n    - Subproduct 6x8 row-major GEMM <- incomplete.\n\ncommit a9ba79ea14de3b5a271e5970cb473d3c52e2fa5f\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Jun 2 15:04:29 2021 +0900\n\n    Armv8-A Add GEMMSUP 4x8n Kernel\n    \n    - Compile w/ both GCC & Clang.\n    - Edge cases use ref-kernels.\n    - Can give performance boost in some contexts.\n\ncommit df40efe8fbfd399d76c6000ec03791a9b76ffbdf\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed Jun 2 00:04:20 2021 +0900\n\n    Armv8-A Add Part of GEMMSUP 8x4m Kernel\n    \n    - Compile w/ both GCC & Clang\n    - Only block part is implement. Edge cases WIP\n    - Not Optimal kernel scheme. Should do 4x8 instead\n\ncommit 66399992881316514f64d68ec9eb60a87d53f674\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat May 29 05:52:05 2021 +0900\n\n    Armv8A DGEMM 4x4 Kernel WIP. Slow\n    \n    Quite slow.\n\ncommit a29c16394ccef02d29141c79b71fb408e20073e6\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat May 29 04:58:45 2021 +0900\n\n    Armv8-A Add 8x4 Kernel WIP\n    \n    Test result: a bit lower GFlOps than 6x8.\n\ncommit 64a1f786d58001284aa4f7faf9fae17f0be7a018\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Aug 11 17:53:12 2021 -0500\n\n    Implement proposed new function pointer fields for obj_t.\n    \n    The added fields:\n    1. `pack_t schema`: storing the pack schema on the object allows the macrokernel to act accordingly without side-channel information from the rntm_t and cntx_t. The pack schema and \"pack_[ab]\" fields could be removed from those structs.\n    2. `void* user_data`: this field can be used to store any sort of additional information provided by the user. The pointer is propagated to submatrix objects and copies, but is otherwise ignored by the framework and the default implementations of the following three fields. User-specified pack, kernel, or ukr functions can do whatever they want with the data, and the user is 100% responsible for allocating, assigning, and freeing this buffer.\n    3. `obj_pack_fn_t pack`: the function called when a matrix is packed. This functions receives the expected arguments, as well as a mdim_t and mem_t* as memory must be allocated inside this function, and behavior may differ based on which matrix is being backed (i.e. transposition for B). This could also be achieved by passing a desired pack schema, but this would require additional information to travel down the control tree.\n    4. `obj_ker_fn_t ker`: the function called when we get to the \"second loop\", or the macro-kernel. Behavior may depend on the pack schemas of the input matrices. The default implementation would perform the inner two loops around the ukr, and then call either the default ukr or a user-supplied one (next field).\n    5. `obj_ukr_fn_t ukr`: the function called by the default macrokernel. This would replace the various current \"virtual\" microkernels, and could also be used to supply user-defined behavior. Users could supply both a custom kernel (above) and microkernel, although the user-specified kernel does **not** necessarily have to call the ukr function specified on the obj_t.\n    \n    Note that no macros or functions for accessing these new fields have been defined yet. That is next once these are finalized. Addresses https://github.com/flame/blis/projects/1#card-62357687.\n\ncommit a32257eeab2e9946e71546a05a1847a39341ec6b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 5 16:23:02 2021 -0500\n\n    Fixed bli_init.c compile-time error on OSX clang.\n    \n    Details:\n    - Fixed a compile-time error in bli_init.c when compiling with OSX's\n      clang. This error was introduced in 868b901, which introduced a\n      post-declaration struct assignment where the RHS was a struct\n      initialization expression (i.e. { ... }). This use of struct\n      initializer expressions apparently works with gcc despite it not\n      being strict C99. The fix included in this commit declares a temporary\n      variable for the purposes of being initialized to the desired value,\n      via the struct initializer, and then copies the temporary struct (via\n      '=' struct assignment) to the persistent struct. Thanks to Devin\n      Matthews for his help with this.\n\ncommit c8728cfbd19ecde9d43af05829e00bcfe7d86eed\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 5 15:17:09 2021 -0500\n\n    Fixed configure breakage on OSX clang.\n    \n    Details:\n    - Accept either 'clang' or 'LLVM' in vendor string when greping for\n      the version number (after determining that we're working with clang).\n      Thanks to Devin Matthews for this fix.\n\ncommit 868b90138e64c873c780d9df14150d2a370a7a42\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Aug 4 18:31:01 2021 -0500\n\n    Fixed one-time use property of bli_init() (#525).\n    \n    Details:\n    - Fixes a rather obvious bug that resulted in segmentation fault\n      whenever the calling application tried to re-initialize BLIS after\n      its first init/finalize cycle. The bug resulted from the fact that\n      the bli_init.c APIs made no effort to allow bli_init() to be called\n      subsequent times at all due to it, and bli_finalize(), being\n      implemented in terms of pthread_once(). This has been fixed by\n      resetting the pthread_once_t control variable for initialization\n      at the end of bli_finalize_apis(), and by resetting the control\n      variable for finalization at the end of bli_init_apis(). Thanks to\n      @lschork2 for reporting this issue (#525), and to Minh Quan Ho and\n      Devin Matthews for suggesting the chosen solution.\n    - CREDITS file update.\n\ncommit 8dba1e752c6846a85dea50907135bbc5cbc54ee5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jul 27 12:38:24 2021 -0500\n\n    CREDITS file update.\n\ncommit cc9206df667b7c710b57b190b8ad351176de53b8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 16 15:48:37 2021 -0500\n\n    Added Graviton2 Neoverse N1 performance results.\n    \n    Details:\n    - Added single-threaded and multithreaded performance results to\n      docs/Performance.md. These results were gathered on a Graviton2\n      Neoverse N1 server. Special thanks to Nicholai Tukanov for\n      collecting these results via the Arm-HPC/AWS hackaton.\n    - Corrected what was supposed to be a temporary tweak to the legend\n      labels in test/3/octave/plot_l3_perf.m.\n\ncommit fab5c86d68137b59800715efb69214c0a7e458a7\nMerge: 84f9dcd4 d073fc9a\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Jul 13 16:46:21 2021 -0500\n\n    Merge pull request #516 from nicholaiTukanov/p10-sandbox-rework\n    \n    P10 sandbox rework\n\ncommit 84f9dcd449fa7a4cf4087fca8ec4ca0d10e9b801\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Jul 13 16:45:44 2021 -0500\n\n    Remove unnecesary windows/zen2 directory.\n\ncommit 21911d6ed3438ca4ba942d05851ba5d7e9835586\nMerge: 17729cf4 689fa0f4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 9 18:10:46 2021 -0500\n\n    Merge branch 'dev'\n\ncommit 17729cf449919d1db9777cea5b65d2efc77e2692\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Jul 9 14:59:48 2021 -0500\n\n    Add vzeroupper to Haswell microkernels. (#524)\n    \n    Details:\n    - Added vzeroupper instruction to the end of all 'gemm' and 'gemmtrsm'\n      microkernels so as to avoid a performance penalty when mixing AVX\n      and SSE instructions. These vzeroupper instructions were once part\n      of the haswell kernels, but were inadvertently removed during a source\n      code shuffle some time ago when we were managing duplicate 'haswell'\n      and 'zen' kernel sets. Thanks to Devin Matthews for tracking this down\n      and re-inserting the missing instructions.\n\ncommit c9a7f59aa84daa54d8f8c771f1f1ef2bd8730da2\nMerge: 75f03907 9a8e649c\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Jul 8 14:00:38 2021 -0500\n\n    Merge pull request #522 from flame/windows-avx512\n    \n    Fix Win64 AVX512 bug.\n\ncommit 9a8e649c5ac89eba951bbee7136ca28aeb24d731\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Jul 7 15:23:57 2021 -0500\n\n    Fix Win64 AVX512 bug.\n    \n    Use `-march=haswell` for kernels. Fixes #514.\n\ncommit 75f03907c58385b656c8bd35d111db245814a9f3\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Jul 7 15:44:11 2021 -0500\n\n    Add comment about make checkblas on Windows\n    \n    [ci skip]\n\ncommit 4651583b1204a965e4aa672c7ad6de60f3ab1600\nMerge: 69205ac2 174f7fc9\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Jul 7 01:11:20 2021 -0500\n\n    Merge pull request #520 from flame/travis-ci-install\n    \n    Test installation in Travis CI\n\ncommit 69205ac266947723ad4d7bb028b7521fe5c76991\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jul 6 20:39:22 2021 -0500\n\n    CREDITS file update.\n    \n    Details:\n    - Thanks to Chengguo Sun for submitting #515 (5ef7f68).\n    - Thanks to Andrew Wildman for submitting #519 (551c6b4).\n    - Whitespace update to configure (spaces to tabs).\n\ncommit 174f7fc9a11712c7bd1a61510bdc5c262b3e8e1f\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Jul 6 19:35:55 2021 -0500\n\n    Test installation in Travis CI\n\ncommit 551c6b4ee8cd9dd2e1d1b46c8dde09eb50b91b2c\nMerge: 78eac6a0 f648df4e\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Jul 6 19:32:53 2021 -0500\n\n    Merge pull request #519 from awild82/oot_build_bugfix\n    \n    Fix installation from out-of-tree builds\n\ncommit f648df4e5588f069b2db96f8be320ead0c1967ef\nAuthor: Andrew Wildman <apw4@uw.edu>\nDate:   Tue Jul 6 16:35:12 2021 -0700\n\n    Add symlink to blis.pc.in for out-of-tree builds\n\ncommit 78eac6a0ab78c995c3f4e46a9e87388b5c3e1af6\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Jul 6 11:05:43 2021 -0500\n\n    Revert \"Always run `make check`.\"\n    \n    This reverts commit a201a53440c51244739aaee20e3309b50121cc68.\n\ncommit a201a53440c51244739aaee20e3309b50121cc68\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jul 5 21:39:18 2021 -0500\n\n    Always run `make check`.\n    \n    I'm concerned that problems may lurk for `x86_64` builds on Windows which may be uncovered by a fuller `make check`.\n\ncommit 5ef7f684dc75fc707c82f919e0836615f90a2627\nMerge: aaa10c87 ad6231cc\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jul 5 21:35:07 2021 -0500\n\n    Merge pull request #515 from chengguosun/bug-fix\n    \n    Fixed configure script bug.\n\ncommit ad6231cca3fc1e477752ecd31b1ee2323398a642\nAuthor: sunchengguo <sunchengguo@higon.com>\nDate:   Tue Jul 6 07:30:00 2021 -0400\n\n    Fixed configure script bug.\n    Details:\n    - Fixed kernel list string substitution error by adding function substitute_words in configure script.\n      if the string contains zen and zen2, and zen need to be replaced with another string, then zen2\n      also be incorrectly replaced.\n\ncommit d073fc9acac9d702556cab9fbbb3a253eeb1f998\nAuthor: nicholaiTukanov <nicholaitukanov@gmail.com>\nDate:   Fri Jul 2 19:54:33 2021 -0500\n\n    Update POWER10.md\n\ncommit 907226c0af4afb6323b4e02be4f73f5fb89cddaf\nAuthor: nicholaiTukanov <nicholaitukanov@gmail.com>\nDate:   Fri Jul 2 19:47:18 2021 -0500\n\n    Rework POWER10 sandbox\n    \n    - Add a testsuite for gathering performance (in GFLOPs) and measuring correctness for the POWER10 GEMM reduced precision/integer kernels.\n    - Reworked GENERIC_GEMM template to hardcode the cache parameters.\n    - Remove kernel wrapper that checked that only allowed matrices that weren't transposed or conjugated. However, the kernels still assume the matrices are not transposed. This wrapper was removed for performance reasons.\n    - Renamed and restructured files and functions for clarity.\n    - Editted the POWER10 document to reflect new changes.\n\ncommit aaa10c87e19449674a4ca30fa3b6392bb22c3a66\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 21 17:53:52 2021 -0500\n\n    Skip clearing temp microtile in gemmlike sandbox.\n    \n    Details:\n    - Removed code from gemmlike sandbox files bls_gemm_bp_var1.c and\n      bls_gemm_bp_var2.c that initializes the elements of the temporary\n      microtile to zero. This code, introduced recently in 7f7d726, did\n      not actually fix any bug (despite that commit's log entry). The\n      microtile does not need to be initialized because it is completely\n      overwritten by a \"beta = 0\" invocation of gemm prior to it being\n      read. Any NaNs or Infs present at the outset would have no impact\n      on the output matrix C. Thanks to Devin Matthews for reminding me\n      of this.\n\ncommit bc10a3f2ff518360c32bea825b3eb62a9e4c8a77\nMerge: bf727636 6548ceba\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Jun 18 19:01:08 2021 -0500\n\n    Merge pull request #492 from flame/thunderx2-clang\n    \n    Allow clang for ThunderX2 config\n\ncommit bf727636632a368f3247dc8ab1d4b6119e9c511a\nMerge: e28f2a2d 5fc93e28\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Jun 18 18:59:43 2021 -0500\n\n    Merge pull request #506 from xrq-phys/arm64-mac\n    \n    BLIS on Darwin_Aarch64\n\ncommit e28f2a2dfcff14e7094fce0b279b3a917b3ab98c\nMerge: d10e05bb 56ffca6a\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Jun 15 19:35:07 2021 -0500\n\n    Merge pull request #513 from nicholaiTukanov/asm_warning_p9_fix\n    \n    Fix assembler warning in POWER9 DGEMM\n\ncommit 56ffca6a9bc67432a7894298739895f406e5f467\nAuthor: nicholai <nicholai@ibm.com>\nDate:   Tue Jun 15 18:17:39 2021 -0500\n\n    Fix asm warning\n\ncommit 689fa0f40399bde1acc5367d6dd4e8fc4eb6f3ea\nMerge: b683d01b d10e05bb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Jun 13 19:44:14 2021 -0500\n\n    Merge branch 'master' into dev\n\ncommit d10e05bbd1ce45ce2c0dfe5c64daae2633357b3f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Jun 13 19:36:16 2021 -0500\n\n    Sandbox header edits trigger full library rebuild.\n    \n    Details:\n    - Adjusted the top-level Makefile so that any change to a sandbox header\n      file will result in blis.h being regenerated along with a full\n      recompilation of the library. Previously, sandbox files were omitted\n      from the list of header files that, when touched, could trigger a full\n      rebuild. Why was it like that previously? Because originally we only\n      envisioned using sandboxes to *replace* gemm, not augment the library\n      with new functionality. When replacing gemm, blis.h does not need to\n      contain any local sandbox defintions in order for the user to be able\n      to (indirectly) use that sandbox. But if you are adding functions to\n      the library, those functions need to be prototyped so the compiler\n      can perform type checking against the user's invocation of those new\n      functions. Thanks to Jeff Diamond for helping us discover this\n      deficiency in the build system.\n\ncommit 7c3eb44efaa762088c190bb820ef6a3c87db8f65\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Jun 2 11:28:22 2021 -0500\n\n    Add vhsubpd/vhsubpd.\n    \n    Horizontal subtraction instructions added to bli_x86_asm_macros.h, currently unused [ci skip].\n\ncommit 7f7d72610c25f511ba8cd2a53be7b59bdb80f3f3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon May 31 16:50:18 2021 -0500\n\n    Fixed bugs in cpackm kernels, gemmlike code.\n    \n    Details:\n    - Fixed intermittent bugs in bli_packm_haswell_asm_c3xk.c and\n      bli_packm_haswell_asm_c8xk.c whereby the imaginary component of the\n      kappa scalar was incorrectly loaded at an offset of 8 bytes (instead\n      of 4 bytes) from the real component. This was almost certainly a copy-\n      paste bug carried over from the corresonding zpackm kernels. Thanks to\n      Devin Matthews for bringing this to my attention.\n    - Added missing code to gemmlike sandbox files bls_gemm_bp_var1.c and\n      bls_gemm_bp_var2.c that initializes the elements of the temporary\n      microtile to zero. (This bug was never observed in output but rather\n      noticed analytically. It probably would have also manifested as\n      intermittent failures, this time involving edge cases.)\n    - Minor commented-out/disabled changes to testsuite/src/test_gemm.c\n      relating to debugging.\n\ncommit 5fc93e280614b4a21a9cff36cf873b4b9407285b\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat May 29 18:44:47 2021 +0900\n\n    Armv8A Rename Regs for Safe Darwin Compile\n    \n    Avoid x18 use in FP32 kernel:\n    - C address lines x[18-26] renamed to x[19-27] (reg index +1)\n    - Original role of x27 fulfilled by x5 which is free after k-loop pert.\n    \n    FP64 does not require changing since x18 is not used there.\n\ncommit 9f4a4a3cfb2244e4024445e127dafd2a11f39fc5\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat May 29 17:21:28 2021 +0900\n\n    Armv8A Rename Regs for Clang Compile: FP32 Part\n    \n    Roughly the same as 916e1fa , additionally with x15 clobbering removed.\n    - x15: Not used at all.\n    \n    Compilation w/ Clang shows warning about x18 reservation, but\n    compilation itself is OK and all tests got passed.\n\ncommit 916e1fa8be3cea0e3e2a4a7e8b00027ac2ee7780\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat May 29 16:46:52 2021 +0900\n\n    Armv8A Rename Regs for Clang Compile: FP64 Part\n    \n    - x7, x8: Used to store address for Alpha and Beta.\n      As Alpha & Beta was not used in k-loops, use x0, x1 to load\n      Alpha & Beta's addresses after k-loops are completed, since A & B's\n      addresses are no longer needed there.\n      This \"ldr [addr]; -> ldr val, [addr]\" would not cause much performance\n      drawback since it is done outside k-loops and there are plenty of\n      instructions between Alpha & Beta's loading and usage.\n    - x9: Used to store cs_c. x9 is multiplied by 8 into x10 and not used\n      any longer. Directly loading cs_c and into x10 and scale by 8 spares\n      x9 straightforwardly.\n    - x11, x12: Not used at all. Simply remove from clobber list.\n    - x13: Alike x9, loaded and scaled by 8 into x14, except that x13 is\n      also used in a conditional branch so that \"cmp x13, #1\" needs to be\n      modified into \"cmp x14, #8\" to completely free x13.\n    - x3, x4: Used to store next_a & next_b. Untouched in k-loops. Load\n      these addresses into x0 and x1 after Alpha & Beta are both loaded,\n      since then neigher address of A/B nor address of Alpha/Beta is needed.\n\ncommit 7fabd896af773623ed01820a71bbff432e8a7d25\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat May 29 16:28:03 2021 +0900\n\n    Asm Flag Mingling for Darwin_Aarch64\n    \n    Apple+Arm64 requires additional \"tagging\" of local symbols.\n\ncommit 213dce32d2eed8b7a38c6a3f6112072b0a89ecd0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri May 28 14:49:57 2021 -0500\n\n    Added a new 'gemmlike' sandbox.\n    \n    Details:\n    - Added a new sandbox called 'gemmlike', which implements sequential and\n      multithreaded gemm in the style of gemmsup but also unconditionally\n      employs packing. The purpose of this sandbox is to\n      (1) avoid select abstractions, such as objects and control trees, in\n          order to allow readers to better understand how a real-world\n          implementation of high-performance gemm can be constructed;\n      (2) provide a starting point for expert users who wish to build\n          something that is gemm-like without \"reinventing the wheel.\"\n      Thanks to Jeff Diamond, Tze Meng Low, Nicholai Tukanov, and Devangi\n      Parikh for requesting and inspiring this work.\n    - The functions defined in this sandbox currently use the \"bls_\" prefix\n      instead of \"bli_\" in order to avoid any symbol collisions in the main\n      library.\n    - The sandbox contains two variants, each of which implements gemm via a\n      block-panel algorithm. The only difference between the two is that\n      variant 1 calls the microkernel directly while variant 2 calls the\n      microkernel indirectly, via a function wrapper, which allows the edge\n      case handling to be abstracted away from the classic five loops.\n    - This sandbox implementation utilizes the conventional gemm microkernel\n      (not the skinny/unpacked gemmsup kernels).\n    - Updated some typos in the comments of a few files in the main\n      framework.\n\ncommit 82af05f54c34526a60fd2ec46656f13e1ac8f719\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue May 25 15:25:08 2021 -0500\n\n    Updated Fugaku (a64fx) performance results.\n    \n    Details:\n    - Updated the performance graphs (pdfs and pngs) for the Fugaku/a64fx\n      entry within Performance.md, and also updated the experiment details\n      accordingly. Thanks to RuQing Xu for re-running the BLIS and SSL2\n      experiments reflected in this commit.\n    - In Performance.md, added an English translation of the project name\n      under which the Fugaku results were gathered, courtesy of RuQing Xu.\n\ncommit e5c85da3763f73854ecd739ba3008bb467ed77c3\nMerge: cbd8d393 5feb04e2\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon May 24 16:56:22 2021 -0500\n\n    Merge pull request #503 from flame/windows-compiler-check\n    \n    Add explicit compiler check for Windows.\n\ncommit cbd8d3932599485727204479fded66ac19186db4\nMerge: 6d4ab022 932dfe6a\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon May 24 16:32:42 2021 -0500\n\n    Merge pull request #500 from xrq-phys/armsve+travis\n    \n    Upgrade Travis CI for Arm SVE\n\ncommit 5feb04e233e1e6f81c727578ad9eae1367a2562f\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun May 23 18:46:56 2021 -0500\n\n    Add explicit compiler check for Windows.\n    \n    Check the C compiler for a predefined macro `_WIN32` to indicate (cross-)compilation for Windows. Fixes #463.\n\ncommit 6d4ab0223d9014ac2a66d66759536aa305be5867\nMerge: 61584ded 859fb77a\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun May 23 18:39:53 2021 -0500\n\n    Merge pull request #502 from flame/rm-rm-dupls\n    \n    Remove `rm-dupls` function in common.mk.\n\ncommit 859fb77a320a3ace71d25a8885c23639b097a1b6\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sun May 23 18:15:23 2021 -0500\n\n    Remove `rm-dupls` function in common.mk.\n    \n    AMD requested removal due to unclear licensing terms; original code was from stackoverflow. The function is unused but could easily be replaced by new implementation.\n\ncommit 932dfe6abb9617223bd26a249e53447169033f8c\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu May 20 02:07:31 2021 +0900\n\n    Travis CI Revert Unnecessary Extras from 91d3636\n    \n    - Removed `V=1` in make line\n    - Removed `CFLAGS` in configure line\n    - Restored `pwd` surrounding OOT line\n\ncommit bd156a210d347a073a6939cc4adab3d9256c2e2b\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sun May 16 02:56:14 2021 +0900\n\n    Adjust TravisCI\n    \n    - ArmSVE don't test gemmt (seems Qemu-only problem);\n    - Clang use TravisCI-provided version instead of fixing to clang-8\n      due to that clang-8 seems conflicting with TravisCI's clang-7.\n\ncommit 91d3636031021af3712d14c9fcb1eb34b6fe2a31\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Sat May 15 17:05:16 2021 +0900\n\n    Travis Support Arm SVE\n    \n    - Updated distro to 20.04 focal aarch64-gcc-10.\n      This is minimal version required by aarch64-gcc-10.\n      SVE intrinsics would not compile without GCC >=10.\n    - x86 toolchains use official repo instead of ubuntu-toolchain-r/test.\n      20.04 focal is not supported by that PPA at the moment.\n    - Add extra configuration-time options to .travis.yml.\n    - Add Arm SVE entry to .travis.yml.\n\ncommit 61584deddf9b3af6d11a811e6e04328d22390202\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Wed May 19 23:52:29 2021 +0900\n\n    Added 512b SVE-based a64fx subconfig + SVE kernels.\n    \n    Details:\n    - Added 512-bit specific 'a64fx' subconfiguration that uses empirically\n      tuned block size by Stepan Nassyr. This subconfig also sets the sector\n      cache size and enables memory-tagging code in SVE gemm kernels. This\n      subconfig utilizes (16, k) and (10, k) DPACKM kernels.\n    - Added a vector-length agnostic 'armsve' subconfiguration that computes\n      blocksizes according to the analytical model. This part is ported from\n      Stepan Nassyr's repository.\n    - Implemented vector-length-agnostic [d/s/sh] gemm kernels for Arm SVE\n      at size (2*VL, 10). These kernels use unindexed FMLA instructions\n      because indexed FMLA takes 2 FMA units in many implementations.\n      PS: There are indexed-FLMA kernels in Stepan Nassyr's repository.\n    - Implemented 512-bit SVE dpackm kernels with in-register transpose\n      support for sizes (16, k) and (10, k).\n    - Extended 256-bit SVE dpackm kernels by Linaro Ltd. to 512-bit for\n      size (12, k). This dpackm kernel is not currently used by any\n      subconfiguration.\n    - Implemented several experimental dgemmsup kernels which would\n      improve performance in a few cases. However, those dgemmsup kernels\n      generally underperform hence they are not currently used in any\n      subconfig.\n    - Note: This commit squashes several commits submitted by RuQing Xu via\n      PR #424.\n\ncommit b683d01b9c4ea5f64c8031bda816beccfbf806a0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 13 15:23:22 2021 -0500\n\n    Use extra #undef when including ba/ex API headers.\n    \n    Details:\n    - Inserted a \"#include bli_xapi_undef.h\" after each usage of the basic\n      and expert API macro setup headers: bli_oapi_ba.h, bli_oapi_ex.h,\n      bli_tapi_ba.h, and bli_tapi_ex.h. This is functionally equivalent to\n      the previous status quo, in which each header made minimal #undef\n      prior to its own definitions and then a single instance of\n      \"#include bli_xapi_undef.h\" cleaned up any remaining macro defs after\n      all other headers were used. This commit will guarantee that macro\n      defs from the setup of one header (say, bli_oapi_ex.h) don't \"infect\"\n      the definitions made in a subsequent header. As with this previous\n      commit, this change does not fix any issue but rather attempts to\n      avoid creating orphaned macro definitions that are only needed within\n      a very limited scope.\n    - Removed minimal #undef from bli_?api_[ba|ex].h.\n    - Removed old commented-out lines from bli_?api_[ba|ex].h.\n\ncommit d4427a5b2f5cab5d2a64c58d87416628867c2b4a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 13 13:55:11 2021 -0500\n\n    Minor preprocessor/header cleanup.\n    \n    Details:\n    - Added frame/include/bli_xapi_undef.h, which explicitly undefines all\n      macros defined in bli_oapi_ba.h, bli_oapi_ex.h, bli_tapi_ba.h, and\n      bli_tapi_ex.h. (This is for safety and good cpp coding practice, not\n      because it fixes anything.)\n    - Added #include \"bli_xapi_undef.h\" to bli_l1v.h, bli_l1d.h, bli_l1f.h,\n      bli_l1m.h, bli_l2.h, bli_l3.h, and bli_util.h.\n    - Comment updates to bli_oapi_ba.h, bli_oapi_ex.h, bli_tapi_ba.h, and\n      bli_tapi_ex.h.\n    - Moved frame/3/bli_l3_ft_ex.h to local 'old' directory after realizing\n      that nothing in BLIS used those function pointer types. Also commented\n      out the \"#include bli_l3_ft_ex.h\" directive in frame/3/bli_l3.h.\n\ncommit 5aa63cd927b22a04e581b07d0b68ef391f4f9b1f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed May 12 19:53:35 2021 -0500\n\n    Fixed typo in cpp guard in bli_util_ft.h.\n    \n    Details:\n    - Changed #ifdef BLIS_OAPI_BASIC to #ifdef BLIS_TAPI_BASIC in\n      bli_util_ft.h. This typo was causing some types to be redefined when\n      they weren't supposed to be.\n\ncommit f0e8634775094584e89f1b03811ee192f2aaf67f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed May 12 18:45:32 2021 -0500\n\n    Defined eqsc, eqv, eqm to test object equality.\n    \n    Details:\n    - Defined eqsc, eqv, and eqm operations, which set a bool depending on\n      whether the two scalars, two vectors, or two matrix operands are equal\n      (element-wise). eqsc and eqv support implicit conjugation and eqm\n      supports diagonal offset, diag, uplo, and trans parameters (in a\n      manner consistent with other level-1m operations). These operations\n      are currently housed under frame/util, at least for now, because they\n      are not computational in nature.\n    - Redefined bli_obj_equals() in terms of eqsc, eqv, and eqm.\n    - Documented eqsc, eqv, and eqm in BLISObjectAPI.md and BLISTypedAPI.md.\n      Also:\n      - Documented getsc and setsc in both docs.\n      - Reordered entry for setijv in BLISTypedAPI.md, and added separator\n        bars to both docs.\n      - Added missing \"Observed object properties\" clauses to various\n        levle-1v entries in BLISObjectAPI.md.\n    - Defined bli_apply_trans() in bli_param_macro_defs.h.\n    - Defined supporting _check() function, bli_l0_xxbsc_check(), in\n      bli_l0_check.c for eqsc.\n    - Programming style and whitespace updates to bli_l1m_unb_var1.c.\n    - Whitespace updates to bli_l0_oapi.c, bli_l1m_oapi.c\n    - Consolidated redundant macro redefinition for copym function pointer\n      type in bli_l1m_ft.h.\n    - Added macros to bli_oapi_ba.h, _ex.h, and bli_tapi_ba.h, _ex.h that\n      allow oapi and tapi source files to forego defining certain expert\n      functions. (Certain operations such as printv and printm do not need\n      to have both basic expert interfaces. This also includes eqsc, eqv,\n      and eqm.)\n\ncommit 5d46dbee4a06ba5a422e19817836976f8574cb4f\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed May 12 18:42:09 2021 -0500\n\n    Replace bli_dlamch with something less archaic (#498)\n    \n    Details:\n    - Added new implementations of bli_slamch() and bli_dlamch() that use\n      constants from the standard C library in lieu of dynamically-computed\n      values (via code inherited from netlib). The previous implementation\n      is still available when the cpp macro BLIS_ENABLE_LEGACY_LAMCH is\n      defined by the subconfiguration at compile-time. Thanks to Devin\n      Matthews for providing this patch, and to Stefano Zampini for\n      reporting the issue (#497) that prompted Devin to propose the patch.\n\ncommit 6a89c7d8f9ac3f51b5b4d8ccb2630d908d951e6f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat May 1 18:54:48 2021 -0500\n\n    Defined setijv, getijv to set/get vector elements.\n    \n    Details:\n    - Defined getijv, setijv operations to get and set elements of a vector,\n      in bli_setgetijv.c and .h.\n    - Renamed bli_setgetij.c and .h to bli_setgetijm.c and .h, respectively.\n    - Added additional bounds checking to getijm and setijm to prevent\n      actions with negative indices.\n    - Added documentation to BLISObjectAPI.md and BLISTypedAPI.md for getijv\n      and setijv.\n    - Added documentation to BLISTypedAPI.md for getijm and setijm, which\n      were inadvertently missing.\n    - Added a new entry to the FAQ titled \"Why does BLIS have vector\n      (level-1v) and matrix (level-1m) variations of most level-1\n      operations?\"\n    - Comment updates.\n\ncommit 4534daffd13ed7a8983c681d3f5e9de17c9f0b96\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 27 18:16:44 2021 -0500\n\n    Minor API breakage in bli_pack API.\n    \n    Details:\n    - Changed bli_pack_get_pack_a() and bli_pack_get_pack_b() so that\n      instead of returning a bool, they set a bool that is passed in by\n      address. This does break the public exported API, but I expect very\n      few users actually use this function. (This change is being made in\n      preparation for a much more extensive commit relating to error\n      checking.)\n\ncommit 6a4aa986ffc060d3e64ed230afe318b82630f8b2\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 23 13:10:01 2021 -0500\n\n    Fixed typo in Table of Contents.\n\ncommit f6424b5b82160d346a09a0fbb526981ecf66cdb3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 23 13:08:06 2021 -0500\n\n    Added dedicated Performance section to README.md.\n    \n    Details:\n    - Spun off the Performance.md and PerformanceSmall.md links in the\n      Documentation section into a new Performance section dedicated to\n      those two links. (The previous entries remain redundantly listed\n      within Documentation section.) Thanks to Robert van de Geijn for\n      suggesting this change.\n\ncommit 40ce5fd241b9ad140bf57278d440f0598d7f15d8\nMerge: 6280757b 1f3461a5\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Apr 21 09:54:25 2021 -0500\n\n    Merge pull request #493 from cassiersg/patch-1\n    \n    Fix typo in FAQ.md\n\ncommit 1f3461a5a5a88510f913451a93e3190ec1556f39\nAuthor: Gaëtan Cassiers <cassiersg@users.noreply.github.com>\nDate:   Wed Apr 21 16:49:05 2021 +0200\n\n    Fix typo in FAQ.md\n\ncommit 6548cebaf55a1f9bdb8417cc89dd0444d8f9c2e4\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Apr 14 13:00:42 2021 -0500\n\n    Allow clang for ThunderX2 config\n    \n    Needed for compiling on e.g. Mac M1. AFAIK clang supports the same -mcpu flag for ThunderX2 as gcc.\n\ncommit 6280757be32f90fd77d8dd9357b07d9306e6f80d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Apr 7 13:03:56 2021 -0500\n\n    Minor updates to a64fx section of Performance.md.\n\ncommit 1e6ed823c6cd11f9b671779f3c8bdbd2bbb40f34\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Thu Apr 8 02:59:26 2021 +0900\n\n    Additional A64fx Comments (#490)\n    \n    * Performance.md Update A64fx Comments\n    \n    - Reason for ARMPL's missing data;\n    - Additional envs / flags for kernel selection;\n    - Update BLIS SRC commit.\n    \n    * Include Another Fix in armsve-cfg-vendor\n    \n    A prototype was forgotten, causing that void* pointer was not fully returned.\n\ncommit 2688f21a5b073950f6f187c95917fdbb5aac234a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 6 19:02:37 2021 -0500\n\n    Added Fujitsu A64fx (512-bit SVE) perf results.\n    \n    Details:\n    - Added single-threaded and multithreaded performance results to\n      docs/Performance.md. These results were gathered on the \"Fugaku\"\n      Fujitsu A64fx supercomputer at the RIKEN Center for Computational\n      Science in Kobe, Japan. Special thanks to RuQing Xu and Stepan\n      Nassyr for their work in developing and optimizing A64fx support in\n      BLIS and RuQing for gathering the performance data that is reflected\n      in these new graphs.\n\ncommit ba3ba8da83d48397162139e11337c036a631ba79\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 6 18:39:58 2021 -0500\n\n    Minor updates and fixes to test/3/octave scripts.\n    \n    Details:\n    - Fixed an issue where the wrong string was being passed in for the\n      vendor legend string.\n    - Changed the graph in which the legends appear.\n    - Updates to runthese.m.\n\ncommit 09bd4f4f12311131938baa9f75d27e92b664d681\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 31 17:09:36 2021 -0500\n\n    Add err_t* \"return\" parameter to malloc functions.\n    \n    Details:\n    - Added an err_t* parameter to memory allocation functions including\n      bli_malloc_intl(), bli_calloc_intl(), bli_malloc_user(),\n      bli_fmalloc_align(), and bli_fmalloc_noalign(). Since these functions\n      already use the return value to return the allocated memory address,\n      they can't communicate errors to the caller through the return value.\n      This commit does not employ any error checking within these functions\n      or their callers, but this sets up BLIS for a more comprehensive\n      commit that moves in that direction.\n    - Moved the typedefs for malloc_ft and free_ft from bli_malloc.h to\n      bli_type_defs.h. This was done so that what remains of bli_malloc.h\n      can be included after the definition of the err_t enum. (This ordering\n      was needed because bli_malloc.h now contains function prototypes that\n      use err_t.)\n    - Defined bli_is_success() and bli_is_failure() static functions in\n      bli_param_macro_defs.h. These functions provide easy checks for error\n      codes and will be used more heavily in future commits.\n    - Unfortunately, the additional err_t* argument discussed above breaks\n      the API for bli_malloc_user(), which is an exported symbol in the\n      shared library. However, it's quite possible that the only application\n      that calls bli_malloc_user()--indeed, the reason it is was marked for\n      symbol exporting to begin with--is the BLIS testsuite. And if that's\n      the case, this breakage won't affect anyone. Nonetheless, the \"major\"\n      part of the so_version file has been updated accordingly to 4.0.0.\n\ncommit f9ad55ce7e12f59930605753959fcfd41a218d8d\nMerge: 04502492 90508192\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 31 14:20:19 2021 -0500\n\n    Merge branch 'master' into dev\n\ncommit 90508192f2d6ae95adc2a3ba9f4e5bad2c8d6fd2\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Mar 30 21:16:44 2021 -0500\n\n    Update do_sde.sh (#489)\n    \n    Update to a newer version of SDE, and do a direct download as it seems you don't have to click-through the license anymore.\n\ncommit 22c6b5dc4c9cc21942f8ccc30891f9b4385a9504\nAuthor: Nicholai Tukanov <nicholaitukanov@gmail.com>\nDate:   Tue Mar 30 19:07:42 2021 -0500\n\n    Fixed bug in power10 microkernel I/O. (#488)\n    \n    Details:\n    - Fixed a bug in the POWER10 DGEMM kernel whereby the microkernel did\n      not store the microtile result correctly due to incorrect indices\n      calculations. (The error was introduced when I reorganized the\n      'kernels/power10/3' directory.)\n\ncommit 04502492671456b94bcdee60b9de347b6763a32d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Mar 28 19:11:43 2021 -0500\n\n    Always stay initialized after BLAS compat calls.\n    \n    Details:\n    - Removed the option to finalize BLIS after every BLAS call, which also\n      means that BLIS would initialize at the beginning of every BLAS call.\n      This option never really made sense and wasn't even implemented\n      properly to begin with. (Because bli_init_auto() and _finalize_auto()\n      were implemented in terms of bli_init_once() and _finalize_once(),\n      respectively, the application would have only been able to call one\n      BLAS routine before BLIS would find itself in a unusable, permanently\n      uninitialized state.) Because this option was never meant for regular\n      use, it never made it into configure as an actual configure-time\n      option, and therefore this commit only removes parts of the code\n      affected by the cpp macro guard BLIS_ENABLE_STAY_AUTO_INITIALIZED.\n\ncommit 3a6f41afb8197e831b6ce2f1ae7f63735685fa0a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Mar 27 17:22:14 2021 -0500\n\n    Renamed membrk files/vars/functions to pba.\n    \n    Details:\n    - Renamed the files, variables, and functions relating to the packing\n      block allocator from its legacy name (membrk) to its current name\n      (pba). This more clearly contrasts the packing block allocator with\n      the small block allocator (sba).\n    - Fixed a typo in bli_pack_set_pack_b(), defined in bli_pack.c, that\n      caused the function to erroneously change the value of the pack_a\n      field of the global rntm_t instead of the pack_b field. (Apparently\n      nobody has used this API yet.)\n    - Comment updates.\n\ncommit 36cb4116d15cfef2d42ec4a834efd4a958f261b5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Mar 27 15:15:09 2021 -0500\n\n    Switch allocator mutexes to static initialization.\n    \n    Details:\n    - Switched the small block allocator (sba), as defined in bli_sba.c and\n      bli_apool.c, to static initialization of its internal mutex. Did a\n      similar thing for the packing block allocator (pba), which appears as\n      global_membrk in bli_membrk.c.\n    - Commented out bli_membrk_init_mutex() and bli_membrk_finalize_mutex()\n      to ensure they won't be used in the future.\n    - In bli_thrcomm_pthreads.c and .h, removed old, commented-out cpp\n      blocks guarded by BLIS_USE_PTHREAD_MUTEX.\n\ncommit 159ca6f01a5f91b93513134c9470b69ff78f5354\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 24 15:57:32 2021 -0500\n\n    Made test/3/octave scripts robust to missing data.\n    \n    Details:\n    - Modified the octave scripts in test/3 so that the script does not\n      choke when one or more of the expected OpenBLAS, Eigen, or vendor data\n      files is missing. (The BLIS data set, however, must be complete.) When\n      a file is missing, that data series is simply not included on that\n      particular graph. Also factored out a lot of the redundant logic from\n      plot_panel_4x5.m into a separate function in read_data.m.\n\ncommit 545e6c2f6d09d023b353002a9a43b11aa0c1d701\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 22 17:42:33 2021 -0500\n\n    CHANGELOG update (0.8.1)\n\ncommit 8535b3e11d2297854991c4272932ce4974dda629 (tag: 0.8.1)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 22 17:42:33 2021 -0500\n\n    Version file update (0.8.1)\n\ncommit e56d9f2d94ed247696dda2cbf94d2ca05c7fc089\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 22 17:40:50 2021 -0500\n\n    ReleaseNotes.md update in advance of next version.\n\ncommit ca83f955d45814b7d84f53933cdb73323c0dea2c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 22 17:21:21 2021 -0500\n\n    CREDITS file update.\n\ncommit 57ef61f6cdb86957f67212aa59407f2f8e7f3d1a\nMerge: bf1b578e e7a4a8ed\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 19 13:05:43 2021 -0500\n\n    Merge branch 'master' of github.com:flame/blis\n\ncommit bf1b578ea32ea1c9dbf7cb3586969e8ae89aa5ef\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 19 13:03:17 2021 -0500\n\n    Reduced KC on skx from 384 to 256.\n    \n    Details:\n    - Reduced the KC cache blocksize for double real on the skx subconfig\n      from 384 to 256. The maximum (extended) KC was also reduced\n      accordingly from 480 to 320. Thanks to Tze Meng Low for suggesting\n      this change.\n\ncommit e7a4a8edc940942357e8e4c4594383a29a962f93\nAuthor: Nicholai Tukanov <nicholaitukanov@gmail.com>\nDate:   Wed Mar 17 19:43:31 2021 -0500\n\n    Fix calculation of new pb size (#487)\n    \n    Details:\n    - Added missing parentheses to the i8 and i4 instantiations of the\n      GENERIC_GEMM macro in sandbox/power10/generic_gemm.c.\n\ncommit 4493cf516e01aba82642a43abe350943ba458fe2\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 15 13:12:49 2021 -0500\n\n    Redefined BLIS_NUM_ARCHS to update automatically.\n    \n    Details:\n    - Changed BLIS_NUM_ARCHS from a cpp macro definition to the last enum\n      value in the arch_t enum. This means that it no longer needs to get\n      updated manually whenever new subconfigurations are added to BLIS.\n      Also removed the explicit initial index assigment of 0 from the\n      first enum value, which was unnecessary due to how the C language\n      standard mandates indexing of enum values. Thanks to Devin Matthews\n      for originally submitting this as a PR in #446.\n    - Updated docs/ConfigurationHowTo.md to reflect the aforementioned\n      change.\n\ncommit a4b73de84cdffcbe5cf71969a0f7f0f8202b3510\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 12 17:12:27 2021 -0600\n\n    Disabled _self() and _equal() in bli_pthread API.\n    \n    Details:\n    - Disabled the _self() and _equal() extensions to the bli_pthread API\n      introduced in d479654. These functions were disabled after I realized\n      that they aren't actually needed yet. Thanks to Devin Matthews for\n      helping me reason through the appropriate consumer code that will\n      appear in BLIS (eventually) in a future commit. (Also, I could never\n      get the Windows branch to link properly in clang builds in AppVeyor.\n      See the comment I left in the code, and #485, for more info.)\n\ncommit f9d604679d8715bc3e79a8630268446889b51388\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 11 16:57:55 2021 -0600\n\n    Added _self() and _equal() to bli_pthread API.\n    \n    Details:\n    - Expanded the bli_pthread API to include equivalents to pthread_self()\n      and pthread_equal(). Implemented these two functions for all three cpp\n      branches present within bli_pthread.c: systemless, Windows, and\n      Linux/BSD.\n\ncommit fa9b3c8f6b3d5717f19832362104413e1a86dfb0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 11 15:13:51 2021 -0600\n\n    Shuffled code in Windows branch of bli_pthreads.c.\n    \n    Details:\n    - Reordered the definitions in the cpp branch in bli_pthreads.c that\n      defines the bli_pthreads API in terms of Windows API calls. Also added\n      missing comments that mark sections of the API, which brings the code\n      into harmony with other cpp branches (as well as bli_pthread.h).\n\ncommit 95d4f3934d806b3563f6648d57a4e381d747caf5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 11 13:50:40 2021 -0600\n\n    Moved cpp macro redef of strerror_r to bli_env.c.\n    \n    Details:\n    - Relocated the _MSC_VER-guarded cpp macro re-definition of strerror_r\n      (in terms of strerror_s) from bli_thread.h to bli_env.c. It was\n      likely left behind in bli_thread.h in a previous commit, when code\n      that now resides in bli_env.c was moved from bli_thread.c. (I couldn't\n      find any other instance of strerror_r being used in BLIS, so I moved\n      the #define directly to bli_env.c rather than place it in bli_env.h.)\n      The code that uses strerror_r is currently disabled, though, so this\n      commit should have no affect on BLIS.\n\ncommit 8a3066c315358d45d4f5b710c54594455f9e8fc6\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 9 17:52:59 2021 -0600\n\n    Relocated gemmsup_ref general stride handling.\n    \n    Details:\n    - Moved the logic that checks for general stridedness in any of the\n      matrix operands in a gemmsup problem. The logic previously resided\n      near the top of bli_gemmsup_int(), which is the thread entry point\n      for the parallel region of the current gemmsup implementation. The\n      problem with this setup was that the code would attempt to reject\n      problems with any general-strided operands by returning BLIS_FAILURE,\n      and that return value was then being ignored by the l3_sup thread\n      decorator, which unconditionally returns BLIS_SUCCESS. To solve this\n      issue, rather than try to manage n return values, one from each of n\n      threads, I simply moved the logic into bli_gemmsup_ref(). I didn't\n      move it any higher (e.g. bli_gemmsup()) because I still want the\n      logic to be part of the current gemmsup handler implementation. That\n      is, perhaps someone else will create a different handler, and that\n      author wants to handle general stride differently. (We don't want to\n      force them into a particular way of handling general stride.)\n    - Removed the general stride handling from bli_gemmtsup_int(), even\n      though this function is inoperative for now.\n    - This commit addresses issue #484. Thanks to RuQing Xu for reporting\n      this issue.\n\ncommit 670bc7b60f6065893e8ec1bebd2fc9e5ba710dff\nAuthor: Nicholai Tukanov <nicholaitukanov@gmail.com>\nDate:   Fri Mar 5 13:53:43 2021 -0600\n\n    Add low-precision POWER10 gemm kernels (#467)\n    \n    Details:\n    - This commit adds a new BLIS sandbox that (1) provides implementations\n      based on low-precision gemm kernels, and (2) extends the BLIS typed\n      API for those new implementations. Currently, these new kernels can\n      only be used for the POWER10 microarchitecture; however, they may\n      provide a template for developing similar kernels for other\n      microarchitectures (even those beyond POWER), as changes would likely\n      be limited to select places in the microkernel and possibly the\n      packing routines. The new low-precision operations that are now\n      supported include: shgemm, sbgemm, i16gemm, i8gemm, i4gemm. For more\n      information, refer to the POWER10.md document that is included in\n      'sandbox/power10'.\n\ncommit b8dcc5bc75a746807d6f8fa22dc2123c98396bf5\nAuthor: RuQing Xu <r-xu@g.ecc.u-tokyo.ac.jp>\nDate:   Tue Mar 2 06:58:24 2021 +0800\n\n    Fixed typed API definition for gemmt (#476)\n    \n    Details:\n    - Fixed incorrect definition and prototype of bli_?gemmt() in\n      frame/3/bli_l3_tapi.c and .h, respectively. gemmt was previously\n      defined identically to gemm, which was wrong because it did not\n      take into account the uplo property of C.\n    - Fixed incorrect API documentation for her2k/syr2k in BLISTypedAPI.md.\n      Specifically, the document erroneously listed only a single transab\n      parameter instead of transa and transb.\n\ncommit a0e4fe2340a93521e1b1a835a96d0f26dec8406a\nAuthor: Ilknur <ilknuri607@gmail.com>\nDate:   Tue Mar 2 02:06:56 2021 +0400\n\n    Fixed double free() in level1v example (#482)\n    \n    Details:\n    - In exampls/tapi/00level1v.c, pointer 'z' was being freed twice and\n      pointer 'a' was not being freed at all. This commit correctly frees\n      each pointer exactly once.\n\ncommit f5871c7e06a75799251d6b55a8a5fbfa1a92cf95\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Feb 28 17:03:57 2021 -0600\n\n    Added complex asm packm kernels for 'haswell' set.\n    \n    Details:\n    - Implemented assembly-based packm kernels for single- and double-\n      precision complex domain (c and z) and housed them in the 'haswell'\n      kernel set. This means c3xk, c8xk, z3xk, and z4xk are now all\n      optimized.\n    - Registered the aforementioned packm kernels in the haswell, zen,\n      and zen2 subconfigs.\n    - Minor modifications to the corresponding s and d packm kernels that\n      were introduced in 426ad67.\n    - Thanks to AMD, who originally contributed the double-precision real\n      packm kernels (d6xk and d8xk), upon which these complex kernels are\n      partially based.\n\ncommit 426ad679f55264e381eb57a372632b774320fb85\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Feb 27 18:39:56 2021 -0600\n\n    Added assembly packm kernels for 'haswell' set.\n    \n    Details:\n    - Implemented assembly-based packm kernels for single- and double-\n      precision real domain (s and d) and housed them in the 'haswell'\n      kernel set. This means s6xk, s16xk, d6xk, and d8xk are now all\n      optimized.\n    - Registered the aforementioned packm kernels in the haswell, zen,\n      and zen2 subconfigs.\n    - Thanks to AMD, who originally contributed the double-precision real\n      packm kernels (d6xk and d8xk), which I have now tweaked and used to\n      create comparable single-precision real kernels (s6xk and s16xk).\n\ncommit f50c1b7e5886d29efe134e1994d05af9949cd4b6\nMerge: 8f39aea1 b3953b93\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Feb 1 11:55:51 2021 -0600\n\n    Merge pull request #473 from ajaypanyala/pkgconfig\n    \n    build: generate pkgconfig file\n\ncommit 8f39aea11f80a805b66cff4b4dc5e72727ea461d\nMerge: f8db9fb3 2a815d5b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Jan 30 17:59:56 2021 -0600\n\n    Merge branch 'dev'\n\ncommit f8db9fb33b48844d6b47fdef699625bd9197745a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jan 28 08:04:52 2021 -0600\n\n    Fixed missing parentheses in README.md Citations.\n\ncommit b3953b938eee59f79b4a4162ba583a5cb59fa34e\nAuthor: Ajay Panyala <ajay.panyala@gmail.com>\nDate:   Tue Jan 12 17:07:04 2021 -0800\n\n    drop CFLAGS in the generated pkgconfig file\n\ncommit b02d9376bac31c1a1c7916f44c4946277a1425e2\nAuthor: Ajay Panyala <ajay.panyala@gmail.com>\nDate:   Mon Jan 11 20:50:01 2021 -0800\n\n    add datadir\n\ncommit d8d8deeb6d8b84adb7ae5fdb88c6dd4f06624a76\nAuthor: Ajay Panyala <ajay.panyala@gmail.com>\nDate:   Mon Jan 11 17:47:50 2021 -0800\n\n    generate pkgconfig file\n\ncommit 8c65411c7c8737248a6f054ffa0ce008c95cb515\nMerge: 328b4f88 874c3f04\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jan 11 16:01:45 2021 -0600\n\n    Merge pull request #471 from flame/fix-470\n    \n    Fix kernel-to-config mapping for intel64\n\ncommit 874c3f04ece9af4d8fdf0e2713e21a259c117656\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Jan 8 13:56:30 2021 -0600\n\n    Update configure\n    \n    Choose last sub-config in the kernel-to-config map if the config list doesn't contain the name of the kernel set. E.g. for \"zen: skx knl haswell\" pick \"haswell\" instead of \"skx\" which was chosen previously. Fixes #470.\n\ncommit 2a815d5b365d934cb351b2f2a8cd1366e997b2e1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 4 18:03:39 2021 -0600\n\n    Support trsm pre-inversion in 1m, bb, ref kernels.\n    \n    Details:\n    - Expanded support for disabling trsm diagonal pre-inversion to other\n      microkernel types, including the reference microkernel as well as the\n      kernel implementations for 1m and the pre-broadcast B (bb) format used\n      by the power9 subconfig. This builds on the 'haswell' and 'penryn'\n      kernel support added in 7038bba. Thanks to Bhaskar Nallani for\n      reminding me, in #461 (post-closure), that 1m support was missing from\n      that commit.\n    - Removed cpp branch of ref_kernels/3/bli_trsm_ref.c that contained the\n      omp simd implementation after making a stripped-down copy in 'old'.\n      This code has been disabled for some time and it seemed better suited\n      to rot away out of sight rather than clutter up a file that is already\n      cluttered by the presence of lower and upper versions.\n    - Minor comment update to bli_ind_init().\n\ncommit c3ed2cbb9f60100fc9beb2a9d75476de9f711dc5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 4 16:16:32 2021 -0600\n\n    Enable 1m only if real domain ukr is not reference.\n    \n    Details:\n    - Previously, BLIS would automatically enable use of the 1m method\n      for a given precision if the complex domain microkernel was a\n      reference kernel. This commit adds an additional constraint so that\n      1m is only enabled if the corresponding real domain microkernel is\n      NOT reference. That is, BLIS now forgos use of 1m if both the real and\n      complex domain kernels are reference implementations. Note that this\n      does not prevent 1m from being enabled manually under those\n      conditions; it only means that 1m will not be enabled automatically\n      at initialization-time.\n\ncommit ed50c947385ba3b0b5d550015f38f7f0a31755c0\nMerge: 0cef09aa 328b4f88\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 4 14:31:44 2021 -0600\n\n    Merge branch 'master' into dev\n\ncommit 328b4f8872b4bca9a53d2de8c6e285f3eb13d196\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Dec 30 17:54:18 2020 -0600\n\n    Shared object (dylib) was not built correctly for partial build.\n    \n    The SO build rule used $? instead of $^. Observed on macOS, not sure if it affected Linux or not.\n\ncommit ae6ef66ef824da9bc6348bf9d1b588cd4f2ded9b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Dec 30 17:34:55 2020 -0600\n\n    bli_diag_offset_with_trans had wrong return type. Fixes #468.\n\ncommit ebcf197fb86fdd0a864ea928140752bc2462e8c6\nMerge: 472f138c 21aa67e1\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Dec 5 22:26:27 2020 -0600\n\n    Merge pull request #466 from isuruf/patch-3\n    \n    fix cc_vendor for crosstool-ng toolchains\n\ncommit 21aa67e11cebbc5a6dd7c6353154256294df3c33\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Sat Dec 5 21:59:13 2020 -0600\n\n    fix cc_vendor for crosstool-ng toolchains\n\ncommit 472f138cb927b7259126ebb9c68919cfcc7a4ea3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Dec 5 14:13:52 2020 -0600\n\n    Fixed typo in README.md to CodingConventions.md.\n\ncommit 0cef09aa92208441a656bf097f197ea8e22b533b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Dec 4 16:40:59 2020 -0600\n\n    Consolidated code in level-3 _front() functions.\n    \n    Details:\n    - Reduced a code segment that appears in all of the bli_*_front()\n      functions except for bli_gemm_front(). Previously, the code looked\n      like this (taken from bli_herk_front()):\n    \n        if ( bli_cntx_method( cntx ) == BLIS_NAT )\n        {\n            bli_obj_set_pack_schema( BLIS_PACKED_ROW_PANELS, &a_local );\n            bli_obj_set_pack_schema( BLIS_PACKED_COL_PANELS, &ah_local );\n        }\n        else // if ( bli_cntx_method( cntx ) != BLIS_NAT )\n        {\n            pack_t schema_a = bli_cntx_schema_a_block( cntx );\n            pack_t schema_b = bli_cntx_schema_b_panel( cntx );\n    \n            bli_obj_set_pack_schema( schema_a, &a_local );\n            bli_obj_set_pack_schema( schema_b, &ah_local );\n        }\n    \n      This code segment is part of a sort-of-hack that allows us to\n      communicate the pack schemas into the level-3 thread decorator, which\n      needs them so that they can be passed into bli_l3_cntl_create_if(),\n      where the control tree is created. However, the first conditional case\n      above is unnecessary because the second case is fully generalized.\n      That is, even in the native case, the context contains correct,\n      queryable schemas. Thus, these code segments were reduced to something\n      like:\n    \n        pack_t schema_a = bli_cntx_schema_a_block( cntx );\n        pack_t schema_b = bli_cntx_schema_b_panel( cntx );\n    \n        bli_obj_set_pack_schema( schema_a, &a_local );\n        bli_obj_set_pack_schema( schema_b, &ah_local );\n    \n      There's always a small chance that the seemingly unnecessary code\n      in the first branch case has some special use that is not apparent to\n      me, but the testsuite's default input parameters seem to think this\n      commit will be fine.\n\ncommit 7038bbaa05484141195822291cf3ba88cbce4980\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Dec 4 16:08:15 2020 -0600\n\n    Optionally disable trsm diagonal pre-inversion.\n    \n    Details:\n    - Implemented a configure-time option, --disable-trsm-preinversion, that\n      optionally disables the pre-inversion of diagonal elements of the\n      triangular matrix in the trsm operation and instead uses division\n      instructions within the gemmtrsm microkernels. Pre-inversion is\n      enabled by default. When it is disabled, performance may suffer\n      slightly, but numerical robustness should improve for certain\n      pathological cases involving denormal (subnormal) numbers that would\n      otherwise result in overflow in the pre-inverted value. Thanks to\n      Bhaskar Nallani for reporting this issue via #461.\n    - Added preprocessor macro guards to bli_trsm_cntl.c as well as the\n      gemmtrsm microkernels for 'haswell' and 'penryn' kernel sets pursuant\n      to the aforementioned feature.\n    - Added macros to frame/include/bli_x86_asm_macros.h related to division\n      instructions.\n\ncommit 78aee79452cce2691c40f05b3632bdfc122300af\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Dec 2 13:02:36 2020 -0600\n\n    Allow amaxv testsuite module to run with dim = 0.\n    \n    Details:\n    - Exit early from libblis_test_amaxv_check() when the vector dimension\n      (length) of x is 0. This allows the module to run when the testsuite\n      driver passes in a problem size of 0. Thanks to Meghana Vankadari for\n      alerting us to this issue via #459.\n    - Note: All other testsuite modules appear to work with problem sizes\n      of 0, except for the microkernel modules. I chose not to \"fix\" those\n      modules because a failure (or segmentation fault, as happens in this\n      case) is actually meaningful in that it alerts the developer that some\n      microkernels cannot be used with k = 0. Specifically, the 'haswell'\n      kernel set contains microkernels that preload elements of B. Those\n      microkernels would need to be restructured to avoid preloading in\n      order to support usage when k = 0.\n\ncommit 92d2b12a44ee0990c22735472aeaf1c17deb2d9b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Dec 2 13:02:00 2020 -0600\n\n    Fixed obscure testsuite gemmt dependency bug.\n    \n    Details:\n    - Fixed a bug in the gemmt testsuite module that only manifested when\n      testing of gemmt is enabled but testing of gemv is disabled. The bug\n      was due to a copy-paste error dating back to the introduction of gemmt\n      in 88ad841.\n\ncommit b43dae9a5d2f078c9bbe07079031d6c00a68b7de\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 1 16:44:38 2020 -0600\n\n    Fixed copy-paste bugs in edge-case sup kernels.\n    \n    Details:\n    - Fixed bugs in two sup kernels, bli_dgemmsup_rv_haswell_asm_1x6() and\n      bli_dgemmsup_rd_haswell_asm_1x4(), which involved extraneous assembly\n      instructions that were left over from when the kernels were first\n      written. These instructions would cause segmentation faults in some\n      situations where extra memory was not allocated beyond the end of\n      the matrix buffers. Thanks to Kiran Varaganti for reporting these\n      bugs and to Bhaskar Nallani for identifying the cause and solution.\n\ncommit 11dfc176a3c422729f453f6c23204cf023e9954d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 1 19:51:27 2020 +0000\n\n    Reorganized thread auto-factorization logic.\n    \n    Details:\n    - Reorganized logic of bli_thread_partition_2x2() so that the primary\n      guts were factored out into \"fast\" and \"slow\" variants. Then added\n      logic to the \"fast\" variant that allows for more optimal thread\n      factorizations in some situations where there is at least one factor\n      of 2.\n    - Changed BLIS_THREAD_RATIO_M from 2 to 1 in bli_kernel_macro_defs.h and\n      added comments to that file describing BLIS_THREAD_RATIO_? and\n      BLIS_THREAD_MAX_?R.\n    - In bli_family_zen.h and bli_family_zen2.h, preprocessed out several\n      macros not used in vanilla BLIS and removed the unused macro\n      BLIS_ENABLE_ZEN_BLOCK_SIZES from the former file.\n    - Disabled AMD's small matrix handling entry points in bli_syrk_front.c\n      and bli_trsm_front.c. (These branches of small matrix handling have\n      not been reviewed by vanilla BLIS developers.)\n    - Added commented-out calls printf() to bli_rntm.c.\n    - Whitespace changes to bli_thread.c.\n\ncommit 6d3bafacd7aa7ad198762b39490876c172bfbbcb\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Sat Nov 28 17:17:56 2020 -0600\n\n    Update BuildSystem.md\n    \n    Add git version >= 1.8.5 requirement (see #462).\n\ncommit 64856ea5a61b01d585750815788b6a775f729647\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Nov 23 16:54:51 2020 -0600\n\n    Auto-reduce (by default) prime numbers of threads.\n    \n    Details:\n    - When requesting multithreaded parallelism by specifying the total\n      number of threads (whether it be via environment variable, globally at\n      runtime, or locally at runtime), reduce the number of threads actually\n      used by one if the original value (a) is prime and (b) exceeds a\n      minimum threshold defined by the macro BLIS_NT_MAX_PRIME, which is set\n      to 11 by default. If, when specifying the total number of threads (and\n      not the individual ways of parallelism for each loop), prime numbers\n      of threads are desired, this feature may be overridden by defining the\n      BLIS_ENABLE_AUTO_PRIME_NUM_THREADS macro in the bli_family_*.h that\n      corresponds to the configuration family targeted at configure-time.\n      (For now, there is no configure option(s) to control this feature.)\n      Thanks to Jeff Diamond for suggesting this change.\n    - Defined a new function in bli_thread.c, bli_is_prime(), that returns a\n      bool that determines whether an integer is prime. This function is\n      implemented in terms of existing functions in bli_thread.c.\n    - Updated docs/Multithreading.md to document the above feature, along\n      with unrelated minor edits.\n\ncommit 55933b6ff6b9b8a12041715f42bba06273d84b74\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 20 10:39:32 2020 -0600\n\n    Added missing attribution to docs/ReleaseNotes.md.\n\ncommit e310f57b4b29fbfee479e0f9fe2040851efdec4f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 19 13:33:37 2020 -0600\n\n    CHANGELOG update (0.8.0)\n\ncommit 9b387f6d5a010969727ec583c0cdd067a5274ed8 (tag: 0.8.0)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 19 13:33:37 2020 -0600\n\n    Version file update (0.8.0)\n\ncommit 2928ec750d3a3e1e5d55de5b57ddc04e9d0bd796\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Nov 18 18:31:35 2020 -0600\n\n    ReleaseNotes.md update in advance of next version.\n    \n    Details:\n    - Updated docs/ReleaseNotes.md in preparation for next version.\n\ncommit b9899bedff6854639468daa7a973bb14ca131a74\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Nov 18 16:52:41 2020 -0600\n\n    CREDITS file update.\n\ncommit 9bb23e6c2a44b77292a72093938ab1ee6e6cc26a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Nov 16 15:55:45 2020 -0600\n\n    Added support for systemless build (no pthreads).\n    \n    Details:\n    - Added a configure option, --[enable|disable]-system, which determines\n      whether the modest operating system dependencies in BLIS are included.\n      The most notable example of this on Linux and BSD/OSX is the use of\n      POSIX threads to ensure thread safety for when application-level\n      threads call BLIS. When --disable-system is given, the bli_pthreads\n      implementation is dummied out entirely, allowing the calling code\n      within BLIS to remain unchanged. Why would anyone want to build BLIS\n      like this? The motivating example was submitted via #454 in which a\n      user wanted to build BLIS for a simulator such as gem5 where thread\n      safety may not be a concern (and where the operating system is largely\n      absent anyway). Thanks to Stepan Nassyr for suggesting this feature.\n    - Another, more minor side effect of the --disable-system option is that\n      the implementation of bli_clock() unconditionally returns 0.0 instead\n      of the time elapsed since some fixed point in the past. The reasoning\n      for this is that if the operating system is truly minimal, the system\n      function call upon which bli_clock() would normally be implemented\n      (e.g. clock_gettime()) may not be available.\n    - Refactored preprocess-guarded code in bli_pthread.c and bli_pthread.h\n      to remove redundancies.\n    - Removed old comments and commented #include of \"bli_pthread_wrap.h\"\n      from bli_system.h.\n    - Documented bli_clock() and bli_clock_min_diff() in BLISObjectAPI.md\n      and BLISTypedAPI.md, with a note that both are non-functional when\n      BLIS is configured with --disable-system.\n\ncommit 88ad84143414644df4c56733b1cf91a36bfacaf8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Nov 14 09:39:48 2020 -0600\n\n    Squash-merge 'pr' into 'squash'. (#457)\n    \n    Merged contributions from AMD's AOCL BLIS (#448).\n    \n    Details:\n    - Added support for level-3 operation gemmt, which performs a gemm on\n      only the lower or upper triangle of a square matrix C. For now, only\n      the conventional/large code path will be supported (in vanilla BLIS).\n      This was accomplished by leveraging the existing variant logic for\n      herk. However, some of the infrastructure to support a gemmtsup is\n      included in this commit, including\n      - A bli_gemmtsup() front-end, similar to bli_gemmsup().\n      - A bli_gemmtsup_ref() reference handler function.\n      - A bli_gemmtsup_int() variant chooser function (with variant calls\n        commented out).\n    - Added support for inducing complex domain gemmt via the 1m method.\n    - Added gemmt APIs to the BLAS and CBLAS compatiblity layers.\n    - Added gemmt test module to testsuite.\n    - Added standalone gemmt test driver to 'test' directory.\n    - Documented gemmt APIs in BLISObjectAPI.md and BLISTypedAPI.md.\n    - Added a C++ template header (blis.hh) containing a BLAS-inspired\n      wrapper to a set of polymorphic CBLAS-like function wrappers defined\n      in another header (cblas.hh). These two headers are installed if\n      running the 'install' target with INSTALL_HH is set to 'yes'. (Also\n      added a set of unit tests that exercise blis.hh, although they are\n      disabled for now because they aren't compatible with out-of-tree\n      builds.) These files now live in the 'vendor' top-level directory.\n    - Various updates to 'zen' and 'zen2' subconfigurations, particularly\n      within the context initialization functions.\n    - Added s and d copyv, setv, and swapv kernels to kernels/zen/1, and\n      various minor updates to dotv and scalv kernels. Also added various\n      sup kernels contributed by AMD to kernels/zen/3. However, these\n      kernels are (for now) not yet used, in part because they caused\n      AppVeyor clang failures, and also because I have not found time to\n      review and vet them.\n    - Output the python found during configure into the definition of PYTHON\n      in build/config.mk (via build/config.mk.in).\n    - Added early-return checks (A, B, or C with zero dimension; alpha = 0)\n      to bli_gemm_front.c.\n    - Implemented explicit beta = 0 handling in for the sgemm ukernel in\n      bli_gemm_armv7a_int_d4x4.c, which was previously missing. This latent\n      bug surfaced because the gemmt module verifies its computation using\n      gemm with its beta parameter set to zero, which, on a cortexa15 system\n      caused the gemm kernel code to unconditionally multiply the\n      uninitialized C data by beta. The C matrix likely contained\n      non-numeric values such as NaN, which then would have resulted in a\n      false failure.\n    - Fixed a bug whereby the implementation for bli_herk_determine_kc(),\n      in bli_l3_blocksize.c, was inadvertantly being defined in terms of\n      helper functions meant for trmm. This bug was probably harmless since\n      the trmm code should have also done the right thing for herk.\n    - Used cpp macros to neutralize the various AOCL_DTL_TRACE_ macros in\n      kernels/zen/3/bli_gemm_small.c since those macros are not used in\n      vanilla BLIS.\n    - Added cpp guard to definition of bli_mem_clear() in bli_mem.h to\n      accommodate C++'s stricter type checking.\n    - Added cpp guard to test/*.c drivers that facilitate compilation on\n      Windows systems.\n    - Various whitespace changes.\n\ncommit 234b8b0cf48f1ee965bd7999b291fc7add3b9a54\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 12 19:11:16 2020 -0600\n\n    Increased dotxaxpyf testsuite thresholds.\n    \n    Details:\n    - Increased the test thresholds used by the dotxaxpyf testsuite module\n      by a factor of five in order to avoid residuals that unnecessarily\n      fall in the MARGINAL range. This commit should fix #455. Thanks to\n      @nagsingh for reporting this issue.\n\ncommit ed612dd82c50063cfd23576a6b2465213d31b14b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Nov 7 13:09:42 2020 -0600\n\n    Updated README.md with sgemmsup blurb.\n    \n    Details:\n    - Added an entry to the \"What's New\" section of the README.md to\n      announce the availability of sgemmsup.\n\ncommit e14424f55b15d67e8d18384aea45a11b9b772e02\nMerge: 0cfe1aac eccdd75a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Nov 7 13:02:50 2020 -0600\n\n    Merge branch 'dev'\n\ncommit 0cfe1aac222008a78dff3ee03ef5183413936706\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 30 17:10:36 2020 -0500\n\n    Relocated operation index to ToC in API docs.\n    \n    Details:\n    - Moved the \"Operation index\" section of both the BLISObjectAPI.md and\n      BLISTypedAPI.md docs to appear immediately after the table of contents\n      of each document. This allows the reader to quickly jump to the\n      documentation for any operation without having to scroll through much\n      of the document (when rendered via a web browser).\n    - Fixed a mistake in the BLISObjectAPI.md for the setd operation, which\n      does *not* observe the diag property of its matrix argument. Thanks to\n      Jeff Diamond for reporting this.\n\ncommit 2a0682f8e5998be536da313525292f0da6193147\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Oct 18 18:04:03 2020 -0500\n\n    Implemented runtime subconfig selection (#451).\n    \n    Details:\n    - Implemented support for the user manually overriding the automatic\n      subconfiguration selection that happens at runtime. This override\n      can be requested by setting the BLIS_ARCH_TYPE environment variable.\n      The variable must be set to the arch_t id (as enumerated in\n      bli_type_defs.h) corresponding to the desired subconfiguration. If a\n      value outside this enumerated range is given, BLIS will abort with an\n      error message. If the value is in the valid range but corresponds to a\n      subconfiguration that was not activated at configure-time/compile-time,\n      BLIS will abort with a (different) error message. Thanks to decandia50\n      for suggesting this feature via issue #451.\n    - Defined a new function bli_gks_lookup_id to return the address of an\n      internal data structure within the gks. If this address is NULL, then\n      it indicates that the subconfig corresponding to the arch_t id passed\n      into the function was not compiled into BLIS. This function is used\n      in the second of the two abort scenarios described above.\n    - Defined the enumerated error code BLIS_UNINITIALIZED_GKS_CNTX, which\n      is returned for the latter of the two abort scenarios mentioned above,\n      along with a corresponding error message and a function to perform\n      the error check.\n    - Added cpp macro branching to bli_env.c to support compilation of the\n      auto-detect.x executable during configure-time. This cpp branch is\n      similar to the cpp code already found in bli_arch.c and bli_cpuid.c.\n    - Cleaned up the auto_detect() function to facilitate easier maintenance\n      going forward. Also added a convenient debug switch that outputs the\n      compilation command for the auto-detect.x executable and exits.\n\ncommit eccdd75a2d8a0c46e91e94036179c49aa5fa601c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 9 15:44:16 2020 -0500\n\n    Whitespace tweak in docs/PerformanceSmall.md.\n\ncommit 7677e9ba60ac27496e3421c2acc7c239e3f860e9\nMerge: addcd46b a0849d39\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 9 15:41:25 2020 -0500\n\n    Merge branch 'dev' of github.com:flame/blis into dev\n\ncommit addcd46b0559d401aa7d33d4c7e6f63f5313a8e0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 9 15:41:09 2020 -0500\n\n    Added Epyc 7742 Zen2 (\"Rome\") sup perf results.\n    \n    Details:\n    - Added single-threaded and multithreaded sup performance results to\n      docs/PerformanceSmall.md for both sgemm and dgemm. These results were\n      gathered on an Epyc 7742 \"Rome\" server featuring AMD's Zen2\n      microarchitecture. Special thanks to Jeff Diamond for facilitating\n      access to the system via the Oracle Cloud.\n    - Updates to octave scripts in test/sup/octave for use with Octave 5.2\n      and for use with subplot_tight().\n    - Minor updates to octave scripts in test/3/octave.\n    - Renamed files containing the previous Zen performance results for\n      consistency with the new results.\n    - Decreased line thickness slightly in large/conventional Zen2 graphs.\n      I'm done tweaking those this time. Really.\n    - Added missing line regarding eigen header installation for each\n      microarchitecture section.\n\ncommit a0849d390d04067b82af937cda8191b049b98915\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 9 20:22:17 2020 +0000\n\n    Register l3 sup kernels in zen2 subconfig.\n    \n    Details:\n    - Registered full suite of sgemm and dgemm sup millikernels, blocksizes,\n      and crossover thresholds in bli_cntx_init_zen2.c.\n    - Minor updates to test/sup/runme.sh for running on Zen2 Epyc 7742\n      system.\n\ncommit d98368c32d5fbfaab8966ee331d9bcb5c4fe7a59\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Oct 8 19:05:51 2020 -0500\n\n    Another tweak to line thickness of Zen2 graphs.\n\ncommit 1855dfbdaafa37892b36c97fd317fd5d8da76676\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Oct 8 19:01:00 2020 -0500\n\n    Tweaked line thickness in Zen2 graphs once more.\n    \n    Details:\n    - Decreased (relative to previous commit) line thickness in recent Zen2\n      graphs.\n\ncommit 0991611e7ed82889c53a5c3f1ef1d49552c50d61\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Oct 8 18:54:49 2020 -0500\n\n    Increased line thickness in recent Zen2 graphs.\n    \n    Details:\n    - Increased the width of the lines in the graphs introduced in 74ec6b8.\n\ncommit 8273cbacd7799e9af59e5320d66055f2f5d9cb31\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Oct 7 14:51:33 2020 -0500\n\n    README.md, docs/FAQ.md updates.\n    \n    Details:\n    - Added a frequently asked question to docs/FAQ.md regarding the\n      difference between upstream (vanilla) BLIS and AMD BLIS.\n    - Updated the name of ICES in the README.md to reflect the Oden\n      rebranding.\n\ncommit a178a822ad3d5021489a0e61f909d8550ae12a8f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Sep 30 16:00:52 2020 -0500\n\n    Added Zen2 links to docs/Performance.md Contents.\n\ncommit 74ec6b8f457cabe37d2382aaab35ba04fc737948\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Sep 30 15:54:18 2020 -0500\n\n    Added Epyc 7742 Zen2 (\"Rome\") performance results.\n    \n    Details:\n    - Added single-threaded and multithreaded performance results to\n      docs/Performance.md. These results were gathered on an Epyc 7742\n      \"Rome\" server with AMD's Zen2 microarchitecture. Special thanks\n      to Jeff Diamond for facilitating access to the system via the\n      Oracle Cloud.\n    - Renamed files containing the previous Zen performance results for\n      consistency with the new results.\n\ncommit bc4a213a2c3dcf8bbfcbb3a1ef3e9fc9e3226c34\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Sep 30 15:28:20 2020 -0500\n\n    Updated matlab (now octave) plot code in test/3.\n    \n    Details:\n    - Renamed test/3/matlab to test/3/octave.\n    - Within test/3, updated and tuned plot_l3_perf.m and plot_panel_4x5.m\n      files for use with octave (which is free and doesn't crash on me\n      mid-way through my use of subplot).\n    - Updated runthese.m scratchpad for zen2 invocations.\n    - Added Nikolay S.'s subplot_tight() function, along with its license.\n\ncommit c77ddc418187e1884fa6bcfe570eee295b9cb8bc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Sep 30 20:15:43 2020 +0000\n\n    Added optional numactl usage to test/3/runme.sh.\n\ncommit 2d8ec164e7ae4f0c461c27309dc1f5d1966eb003\nAuthor: Nicholai Tukanov <nicholai@utexas.edu>\nDate:   Tue Sep 29 16:52:18 2020 -0500\n\n    Add POWER10 support to BLIS (#450)\n\ncommit 4fd8d9fec2052257bf2a5c6e0d48ae619ff6c3e4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Sep 28 23:39:05 2020 +0000\n\n    Tweaked zen2 subconfig's MC cache blocksizes.\n    \n    Details:\n    - Updated the MC cache blocksizes registered by the 'zen2' subconfig.\n    - Minor updates to test/3/Makefile and test/3/runme.sh.\n\ncommit 5efcdeffd58af621476d179afc0c19c0f912baa8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Sep 25 14:25:24 2020 -0500\n\n    More minor README.md updates.\n\ncommit 9e940f8aad6f065ea1689e791b9a4e1fb7900c40\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Sep 25 13:53:35 2020 -0500\n\n    Added 1m SISC bibtex to README.md.\n    \n    Details:\n    - Added final citation info to 1m bibtex in README.md file.\n    - Updated draft 1m paper link.\n    - Changed some http to https.\n\ncommit e293cae2d1b9067261f613f25eaa0e871356b317\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 15 16:09:11 2020 -0500\n\n    Implemented sgemmsup assembly kernels.\n    \n    Details:\n    - Created a set of single-precision real millikernels and microkernels\n      comparable to the dgemmsup kernels that already exist within BLIS.\n    - Added prototypes for all kernels within bli_kernels_haswell.h.\n    - Registered entry-point millikernels in bli_cntx_init_haswell.c and\n      bli_cntx_init_zen.c.\n    - Added sgemmsup support to the Makefile, runme.sh script, and source\n      file in test/sup. This included edits that allow for separate \"small\"\n      dimensions for single- and double-precision as well as for single-\n      vs. multithreaded execution.\n\ncommit 2765c6f37c11cb7f71cd4b81c64cea6130636c68\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Sep 12 17:48:15 2020 -0500\n\n    Type saga continues; fixed sgemm ukernel signature.\n    \n    Details:\n    - Changed double* pointers in sgemm function signature to float*. At\n      this point I've lost track of whether this was my fault or another\n      dormant bug like the one described in ece9f6a, but at this point I\n      no longer care. It's one of those days (aka I didn't ask for this).\n\ncommit 0779559509e0a1af077530d09ed151dac54f32ee\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Sep 12 17:37:21 2020 -0500\n\n    Fixed missing restrict in knl sgemm prototype.\n    \n    Details:\n    - Added a missing 'restrict' qualifier in the sgemm ukernel prototype\n      for knl. (Not sure how that code was ever compiling before now.)\n\ncommit ece9f6a3ef1b26b53ecf968cd069df7a85b139fb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Sep 12 17:22:42 2020 -0500\n\n    Fixed dormant type bugs in bli_kernels_knl.h.\n    \n    Details:\n    - Fixed dormant type mismatches in the use of the prototype-generating\n      macros in bli_kernels_knl.h. Specifically, some float prototypes\n      were incorrectly using double as their ctype. This didn't actually\n      matter until the type changes in 645d771, as previously those types\n      were not used since packm was prototyped with void* pointers.\n\ncommit 8ebb3b60e1c4c045ddb48e02de6e246cecde24a4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Sep 12 17:00:47 2020 -0500\n\n    Fixed accidental breakage in 645d771.\n    \n    Details:\n    - In trying to clean up kappa_cast variables in the reference packm\n      kernels, which I initally believed to be redundant given the other\n      void* -> ctype* changes in 645d771, I accidentally ended up violating\n      restrict semantics for 1e/1r packing and possibly other packm kernels.\n      (Normally, my pre-commit testsuite run would have caught this, but I\n      was unknowingly using an edited input.operations file in which I'd\n      disabled most tests as part of unrelated work.) This commit reverts\n      the kappa_cast changes in 645d771.\n\ncommit 645d771a14ae89aa7131d6f8f4f4a8090329d05e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Sep 12 15:31:56 2020 -0500\n\n    Minor packm kernel type cleanup (void* -> ctype*).\n    \n    Details:\n    - Changed all void* function arguments in reference packm kernels to\n      those of the native type (ctype*). These pointers no longer need to\n      be void* and are better represented by their native types anyway.\n      (See below for details.) Updated knl packm kernels accordingly.\n    - In the definition of the PACKM_KER_PROT prototype macro template in\n      frame/1m/bli_l1m_ker_prot.h, changed the pointer types for kappa, a,\n      and p from void* to ctype*. They were originally void* because these\n      function signatures had to share the same type so they could all be\n      stored in a single array of that shared type, from which they were\n      queried and called by packm_cxk(). This is no longer how the function\n      pointers are stored, and so it no longer makes sense to force the\n      caller of packm kernels to use void*, only so that the implementor\n      of the packm kernels can typecast back to the native datatype within\n      the kernel definition. This change has no effect internally within\n      BLIS because currently all packm kernels are called after querying\n      the function addresses from the context and then typecasting to the\n      appropriate function pointer type, which is based upon type-specific\n      function pointers like float* and double*.\n    - Removed a comment in frame/1m/bli_l1m_ft_ker.h that was outdated and\n      misleading due to changes to the handling of packm kernels since\n      moving them into the context.\n\ncommit 54bf6c35542a297e25bc8efec6067a6df80536f4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 10 15:42:01 2020 -0500\n\n    Minor README.md update.\n    \n    Details:\n    - Added a new entry to the \"What people are saying about BLIS\" section.\n\ncommit e50b4d40462714ae33df284655a2faf7fa35f37c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Sep 9 14:12:53 2020 -0500\n\n    Minor update to README.md (SIAM Best Paper Prize).\n\ncommit a8efb72074691e2610372108becd88b4b392299e\nMerge: b0c4da17 97e87f2c\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Sep 7 16:18:19 2020 -0500\n\n    Merge pull request #434 from flame/intel-zdot\n    \n    Add an option to change the complex return type.\n\ncommit 97e87f2c9f3878a05e1b7c6ec237ee88d9a72a42\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Sep 7 15:56:42 2020 -0500\n\n    Whitespace/comment updates to #434 PR.\n\ncommit b0c4da1732b6c6a9ff66f70c36e4722e0f9645ae\nMerge: 810e90ee b1b5870d\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Sep 7 15:47:54 2020 -0500\n\n    Merge pull request #436 from flame/s390x\n    \n    Add checks so that s390x is detected as 64-bit.\n\ncommit 810e90ee806510c57504f0cf8eeaf608d38bd9dd\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 1 16:11:40 2020 -0500\n\n    Minor README.md update.\n    \n    Details:\n    - Added HPE to list of funders.\n    - Changed http to https in funders' website links.\n\ncommit 7d411282196e036991c26e52cb5e5f85769c8059\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Aug 13 17:50:58 2020 -0500\n\n    Use -O2 for all framework code. (#435)\n    \n    It seems that -O3 might be causing intermittent problems with the f2c'ed packed and banded code. -O3 is retained for kernel code. Fixes #341 and fixes #342.\n\ncommit 9c5b485d356367b0a1288761cd623f52036e7344\nAuthor: Dave Love <dave.love@manchester.ac.uk>\nDate:   Fri Aug 7 20:11:18 2020 +0000\n\n    Don't override -mcpu with -march on ARM (#353)\n    \n    * Use -mcpu for ARM\n    See the GCC doc about -march, -mtune, and -mpu and maybe\n    https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/compiler-flags-across-architectures-march-mtune-and-mcpu\n    \n    * Fix typo in flags\n    \n    * Fix typo in cortexa9 flags\n    \n    * Modify cortexa53 compilation flags to fix failing BLAS check (#341)\n\ncommit c253d14a72a746b670b3ffbb6e81bcafc73d1133\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Aug 7 09:39:04 2020 -0500\n\n    Also handle Intel-style complex return in CBLAS interface.\n\ncommit 5d653a11a0cc71305d0995507b1733995856f475\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Aug 6 17:58:26 2020 -0500\n\n    Update Multithreading.md\n    \n    Addresses the issue raised in #426.\n\ncommit b1b5870dd3f9b1c78cf5f58a53514d73f001fc4c\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Aug 6 17:34:20 2020 -0500\n\n    Add checks so that s390x is detected as 64-bit.\n\ncommit 882dcb11bfc9ea50aa2f9044621833efd90d42be\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 6 17:28:14 2020 -0500\n\n    Mention example code at top of documentation docs.\n    \n    Details:\n    - Steer the reader towards the example code section of each\n      documentation doc (object and typed).\n    - Trivial update to examples/oapi/README, examples/tapi/README.\n\ncommit f4894512e5bf56ff83701c07dd02972e300741a5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 6 17:20:00 2020 -0500\n\n    Very minor updates to previous commit.\n\ncommit adedb893ae8dfacd1dc54035979e15c44d589dbb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 6 17:14:01 2020 -0500\n\n    Documented mutator functions in BLISObjectAPI.md.\n    \n    Details:\n    - Added documentation for commonly-used object mutator functions in\n      BLISObjectAPI.md. Previously, only accessor functions were documented.\n      Thanks to Jeff Diamond for pointing out this omission.\n    - Explicitly set the 'diag' property of objects in oapi example modules\n      (08level2.c and 09level3.c).\n\ncommit 5b5278ff494888509543a79c09ea82089f6c95d9\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Aug 6 14:19:37 2020 -0500\n\n    Use #ifdef instead of #if as macro may be undefined.\n\ncommit 7fdc0fc893d0c6727b725ea842053b65be2c20ba\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Thu Aug 6 14:03:55 2020 -0500\n\n    Add an option to change the complex return type.\n    \n    ifort apparently does not return complex numbers in registers as in C/C++ (or gfortran), but instead creates a \"hidden\" first parameter for the return value. The option --complex-return=gnu|intel has been added, as well as a guess based on a provided FC if not specified (otherwise default to gnu). This option affects the signatures of cdotc, cdotu, zdotc, and zdotu, and a single library cannot be used with both GNU and Intel Fortran compilers. Fixes #433.\n\ncommit 6e522e5823b762d4be09b6acdca30faafba56758\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jul 30 19:31:37 2020 -0500\n\n    Mention disabling of sup in docs/Sandboxes.md.\n    \n    Details:\n    - Added language to remind the reader to disable sup if the intended\n      behavior is for the sandbox implementation to handle all problem\n      sizes, even the smaller ones that would normally be handled by the\n      sup code path.\n\ncommit 00e14cb6d849e963a2e1ac35e7dbbe186af00a58\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jul 29 14:24:34 2020 -0500\n\n    Replaced use of bool_t type with C99 bool.\n    \n    Details:\n    - Textually replaced nearly all non-comment instances of bool_t with the\n      C99 bool type. A few remaining instances, such as those in the files\n      bli_herk_x_ker_var2.c, bli_trmm_xx_ker_var2.c, and\n      bli_trsm_xx_ker_var2.c, were promoted to dim_t since they were being\n      used not for boolean purposes but to index into an array.\n    - This commit constitutes the third phase of a transition toward using\n      C99's bool instead of bool_t, which was raised in issue #420. The first\n      phase, which cleaned up various typecasts in preparation for using\n      bool as the basis for bool_t (instead of gint_t), was implemented by\n      commit a69a4d7. The second phase, which redefined the bool_t typedef\n      in terms of bool (from gint_t), was implemented by commit 2c554c2.\n\ncommit 2c554c2fce885f965a425e727a0314d3ba66c06d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 24 15:57:19 2020 -0500\n\n    Redefined bool_t typedef in terms of C99 bool.\n    \n    Details:\n    - Changed the typedef that defines bool_t from:\n    \n        typedef gint_t bool_t;\n    \n      where gint_t is a signed integer that forms the basis of most other\n      integers in BLIS, to:\n    \n        typedef bool bool_t;\n    \n    - Changed BLIS's TRUE and FALSE macro definitions from being in terms of\n      integer literals:\n    \n        #define TRUE  1\n        #define FALSE 0\n    \n      to being in terms of C99 boolean constants:\n    \n        #define TRUE  true\n        #define FALSE false\n    \n      which are provided by stdbool.h.\n    - This commit constitutes the second phase of a transition toward using\n      C99's bool instead of bool_t, which will address issue #420. The first\n      phase, which cleaned up various typecasts in preparation for using\n      bool as the basis for bool_t (instead of gint_t), was implemented by\n      commit a69a4d7.\n\ncommit e01dd125581cec87f61e15590922de0dc938ec42\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 24 15:41:46 2020 -0500\n\n    Fail-safe updates to Makefiles in 'test' dir.\n    \n    Details:\n    - Updated Makefiles in test, test/3, and test/sup so that running any of\n      the usual targets without having first built BLIS results in a helpful\n      error message. For example, if BLIS is not yet configured, make will\n      output:\n    \n        Makefile:327: *** Cannot proceed: config.mk not detected! Run\n        configure first.  Stop.\n    \n      Similarly, if BLIS is configured but not yet built, make will output:\n    \n        Makefile:340: *** Cannot proceed: BLIS library not yet built! Run\n        make first.  Stop.\n    \n      In previous commits, these actions would result in a rather cryptic\n      make error such as:\n    \n        make: *** No rule to make target 'test_sgemm_2400_asm_blis_st.x',\n        needed by 'blis-nat-st'.  Stop.\n\ncommit b4f47f7540062da3463e2cb91083c12fdda0d30a\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Jul 24 13:56:13 2020 -0500\n\n    Add BLIS_EXPORT_BLIS to bli_abort. (#429)\n    \n    Fixes #428.\n\ncommit a69a4d7e2f4607c919db30b14535234ce169c789\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jul 22 16:13:09 2020 -0500\n\n    Cleaned up bool_t usage and various typecasts.\n    \n    Details:\n    - Fixed various typecasts in\n    \n        frame/base/bli_cntx.h\n        frame/base/bli_mbool.h\n        frame/base/bli_rntm.h\n        frame/include/bli_misc_macro_defs.h\n        frame/include/bli_obj_macro_defs.h\n        frame/include/bli_param_macro_defs.h\n    \n      that were missing or being done improperly/incompletely. For example,\n      many return values were being typecast as\n        (bool_t)x && y\n      rather than\n        (bool_t)(x && y)\n      Thankfully, none of these deficiencies had manifested as actual bugs\n      at the time of this commit.\n    - Changed the return type of bli_env_get_var() from dim_t to gint_t.\n      This reflects the fact that bli_env_get_var() needs to be able to\n      return a signed integer, and even though dim_t is currently defined\n      as a signed integer, it does not intuitively appear to necessarily be\n      signed by inspection (i.e., an integer named \"dim_t\" for matrix\n      \"dimension\"). Also, updated use of bli_env_get_var() within\n      bli_pack.c to reflect the changed return type.\n    - Redefined type of thrcomm_t.barrier_sense field from bool_t to gint_t\n      and added comments to the bli_thrcomm_*.h files that will explain a\n      planned replacement of bool_t with C99's bool type.\n    - Note: These changes are being made to facilitate the substitution of\n      'bool' for 'bool_t', which will eliminate the namespace conflict with\n      arm_sve.h as reported in issue #420. This commit implements the first\n      phase of that transition. Thanks to RuQing Xu for reporting this\n      issue.\n    - CREDITS file update.\n\ncommit a6437a5c11d364c6c88af527294d29734d7cc7d6\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jul 20 19:21:07 2020 -0500\n\n    Replaced broken ref99 sandbox w/ simpler version.\n    \n    Details:\n    - The 'ref99' sandbox was broken by multiple refactorings and internal\n      API changes over the last two years. Rather than try to fix it, I've\n      replaced it with a much simpler version based on var2 of gemmsup.\n      Why not fix the previous implementation? It occurred to me that the\n      old implementation was trying to be a lightly simplified duplication\n      of what exists in the framework. Duplication aside, this sandbox\n      would have worked fine if it had been completely independent of the\n      framework code. The problem was that it was only partially\n      independent, with many function calls calling a function in BLIS\n      rather than a duplicated/simplified version within the sandbox. (And\n      the reason I didn't make it fully independent to begin with was that\n      it seemed unnecessarily duplicative at the time.) Maintaining two\n      versions of the same implementation is problematic for obvious\n      reasons, especially when it wasn't even done properly to begin with.\n      This explains the reimplementation in this commit. The only catch is\n      that the newer implementation is single-threaded only and does not\n      perform any packing on either input matrix (A or B). Basically, it's\n      only meant to be a simple placeholder that shows how you could plug\n      in your own implementation. Thanks to Francisco Igual for reporting\n      this brokenness.\n    - Updated the three reference gemmsup kernels (defined in\n      ref_kernels/3/bli_gemmsup_ref.c) so that they properly handle\n      conjugation of conja and/or conjb. The general storage kernel, which\n      is currently identical to the column-storage kernel, is used in the\n      new ref99 sandbox to provide basic support for all datatypes\n      (including scomplex and dcomplex).\n    - Minor updates to docs/Sandboxes.md, including adding the threading\n      and packing limitations to the Caveats section.\n    - Fixed a comment typo in bli_l3_sup_var1n2m.c (upon which the new\n      sandbox implementation is based).\n\ncommit bca040be9da542dd9c75d91890fa7731841d733d\nMerge: 2605eb4d 171ecc1d\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Jul 20 09:27:30 2020 -0500\n\n    Merge pull request #425 from gmargari/patch-1\n    \n    Update Multithreading.md\n\ncommit 171ecc1dc6f055ea39da30e508f711b49a734359\nAuthor: Giorgos Margaritis <gmargari@protonmail.com>\nDate:   Mon Jul 20 12:24:06 2020 +0300\n\n    Update Multithreading.md\n\ncommit 2605eb4d99d3813c37a624c011aa2459324a6d89\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jul 15 15:25:19 2020 -0500\n\n    Added missing rv_d?x6 edge cases to sup kernel.\n    \n    Details:\n    - Added support to bli_gemmsup_rv_haswell_asm_d6x8n.c for handling\n      various n = 6 edge cases with a single sup kernel call. Previously,\n      only n = {4,2,1} were handled explicitly as single kernel calls;\n      that is, cases where n = 6 were previously being executed via two\n      kernel calls (n = 4 and n = 2).\n    - Added commented debug line to testsuite's test_libblis.c.\n\ncommit 72f6ed0637dfcb021de04ac7d214d5c87e55d799\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 3 17:55:54 2020 -0500\n\n    Declare/define static functions via BLIS_INLINE.\n    \n    Details:\n    - Updated all static function definitions to use the cpp macro\n      BLIS_INLINE instead of the static keyword. This allows blis.h to\n      use a different keyword (inline) to define these functions when\n      compiling with C++, which might otherwise trigger \"defined but\n      not used\" warning messages. Thanks to Giorgos Margaritis for\n      reporting this issue and Devin Matthews for suggesting the fix.\n    - Updated the following files, which are used by configure's\n      hardware auto-detection facility, to unconditionally #define\n      BLIS_INLINE to the static keyword (since we know BLIS will be\n      compiled with C, not C++):\n        build/detect/config/config_detect.c\n        frame/base/bli_arch.c\n        frame/base/bli_cpuid.c\n    - CREDITS file update.\n\ncommit 5fc701ac5f94c6300febbb2f24e731aa34f0f34a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jul 1 15:48:58 2020 -0500\n\n    Added -fomit-frame-pointer option to CKOPTFLAGS.\n    \n    Details:\n    - Added the -fomit-frame-pointer compiler option to the CKOPTFLAGS\n      variable in the following make_defs.mk files:\n        config/haswell/make_defs.mk\n        config/skx/make_defs.mk\n      as well as comments that mention why the compiler option is needed.\n      This option is needed to prevent the compiler from using the rbp\n      frame register (in the very early portion of kernel code, typically\n      where k_iter and k_left are defined and computed), which, as of\n      1c719c9, is used explicitly by the gemmsup millikernels. Thanks to\n      Devin Matthews for identifying this missing option and to Jeff\n      Diamond for reporting the original bug in #417.\n    - The file\n        config/zen/amd_config.mk\n      which feeds into the make_defs.mk for both zen and zen2 subconfigs,\n      was also touched, but only to add a commented-out compiler option\n      (and the aforementioned explanatory comment) since that file already\n      uses -fomit-frame-pointer in COPTFLAGS, which forms the basis of\n      CKOPTFLAGS.\n\ncommit 6af59b705782dada47e45df6634b479fe781d4fe\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jul 1 14:54:23 2020 -0500\n\n    Fixed disabled edge case optimization in gemmsup.\n    \n    Details:\n    - Fixed an inadvertently disabled edge case optimization in the two\n      gemmsup variants in bli_l3_sup_var1n2m.c. Background: These edge case\n      optimizations allow the last millikernel operation in the jr loop to\n      be executed with inflated an register blocksize if it is the last\n      (or only) iteration. For example, if mr=6 and nr=8 and the gemmsup\n      problem is m=8, n=100, k=100. (In this case, the panel-block variant\n      (var1n) is executed, which places the jr loop in the m dimension.)\n      In principle, this problem could be executed as two millikernels: one\n      with dimensions 6x100x100, and one as 2x100x100. However, with the\n      support for inflated blocksizes in the kernel, the entire 8x100x100\n      problem can be passed to the millikernel function, which will then\n      execute it more favorably as two 4x100x100 millikernel sub-calls.\n      Now, this optimization is disabled under certain circumstances, such\n      as when multithreading. Previously, the is_mt predicate was being set\n      incorrectly such that it was non-zero even when running\n      single-threaded.\n    - Upon fixing the is_mt issue above, another bit of code needed to be\n      moved so that the result of the optimization could have an impact on\n      the assignment of loop bounds ranges to threads.\n\ncommit b37634540fab0f9b8d4751b8356ee2e17c9e3b00\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jun 25 16:05:12 2020 -0500\n\n    Support ldims, packing in sup/test drivers.\n    \n    Details:\n    - Updated the test/sup source file (test_gemm.c) and Makefile to support\n      building matrices with small or large leading dimensions, and updated\n      runme.sh to support executing both kinds of test drivers.\n    - Updated runme.sh to allow for executing sup drivers with unpacked (the\n      default) or packed matrices (via setting BLIS_PACK_A, BLIS_PACK_B\n      environment variables), and for capturing output to files that encode\n      both the leading dimension (small or large) and packing status into\n      the filenames.\n    - Consolidated octave scripts in test/sup/octave_st, test/sup/octave_mt\n      into test/sup/octave and updated the octave code in that consolidated\n      directory to read the new output filename format (encoding ldim and\n      packing). Also added comments and streamlined code, particularly in\n      plot_panel_trxsh.m. Tested the octave scripts with octave 5.2.0.\n    - Moved old octave_st, octave_mt directories to test/sup/old.\n\ncommit ceb9b95a96cc3844ecb43d9af48ab289584e76b6\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jun 18 17:15:25 2020 -0500\n\n    Fixed incorrect link to shiftd in BLISTypedAPI.md.\n    \n    Details:\n    - Previously, the entry for shiftd in the Operation index section of\n      BLISTypedAPI.md was incorrectly linking to the shiftd operation entry\n      in BLISObjectAPI.md. This has been fixed. Thanks to Jeff Diamond for\n      helping find this incorrect link.\n\ncommit b3c42016818797f79e55b32c8b7d090f9d0aa0ea\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jun 18 14:00:56 2020 -0500\n\n    CREDITS file update.\n\ncommit 31af73c11abae03248d959da0f81eacea015b57a\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Thu Jun 18 13:35:54 2020 -0500\n\n    Expand windows instructions (#414)\n    \n    * Expand windows instructions\n    \n    * Windows: both static and shared don't work at the same time\n\ncommit b5b604e106076028279e6d94dc0e51b8ad48e802\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jun 17 16:42:24 2020 -0500\n\n    Ensure random objects' 1-norms are non-zero.\n    \n    Details:\n    - Fixed an innocuous bug that manifested when running the testsuite on\n      extremely small matrices with randomization via the \"powers of 2 in\n      narrow precision range\" option enabled. When the randomization\n      function emits a perfect 0.0 to fill a 1x1 matrix, the testsuite will\n      then compute 0.0/0.0 during the normalization process, which leads to\n      NaN residuals. The solution entails smarter implementaions of randv,\n      randnv, randm, and randnm, each of which will compute the 1-norm of\n      the vector or matrix in question. If the object has a 1-norm of 0.0,\n      the object is re-randomized until the 1-norm is not 0.0. Thanks to\n      Kiran Varaganti for reporting this issue (#413).\n    - Updated the implementation of randm_unb_var1() so that it loops over\n      a call to the randv_unb_var1() implementation directly rather than\n      calling it indirectly via randv(). This was done to avoid the overhead\n      of multiple calls to norm1v() when randomizing the rows/columns of a\n      matrix.\n    - Updated comments.\n\ncommit 35e38fb693e7cbf2f3d7e0505a63b2c05d3f158d\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Tue Jun 16 10:59:41 2020 -0500\n\n    FIx typo in FAQ\n\ncommit 1c719c91a3ef0be29a918097652beef35647d4b2\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jun 4 17:21:08 2020 -0500\n\n    Bugfixes, cleanup of sup dgemm ukernels.\n    \n    Details:\n    - Fixed a few not-really-bugs:\n      - Previously, the d6x8m kernels were still prefetching the next upanel\n        of A using MR*rs_a instead of ps_a (same for prefetching of next\n        upanel of B in d6x8n kernels using NR*cs_b instead of ps_b). Given\n        that the upanels might be packed, using ps_a or ps_b is the correct\n        way to compute the prefetch address.\n      - Fixed an obscure bug in the rd_d6x8m kernel that, by dumb luck,\n        executed as intended even though it was based on a faulty pointer\n        management. Basically, in the rd_d6x8m kernel, the pointer for B\n        (stored in rdx) was loaded only once, outside of the jj loop, and in\n        the second iteration its new position was calculated by incrementing\n        rdx by the *absolute* offset (four columns), which happened to be the\n        same as the relative offset (also four columns) that was needed. It\n        worked only because that loop only executed twice. A similar issue\n        was fixed in the rd_d6x8n kernels.\n    - Various cleanups and additions, including:\n      - Factored out the loading of rs_c into rdi in rd_d6x8[mn] kernels so\n        that it is loaded only once outside of the loops rather than\n        multiple times inside the loops.\n      - Changed outer loop in rd kernels so that the jump/comparison and\n        loop bounds more closely mimic what you'd see in higher-level source\n        code. That is, something like:\n          for( i = 0; i < 6; i+=3 )\n        rather than something like:\n          for( i = 0; i <= 3; i+=3 )\n      - Switched row-based IO to use byte offsets instead of byte column\n        strides (e.g. via rsi register), which were known to be 8 anyway\n        since otherwise that conditional branch wouldn't have executed.\n      - Cleaned up and homogenized prefetching a bit.\n      - Updated the comments that show the before and after of the\n        in-register transpositions.\n      - Added comments to column-based IO cases to indicate which columns\n        are being accessed/updated.\n      - Added rbp register to clobber lists.\n      - Removed some dead (commented out) code.\n      - Fixed some copy-paste typos in comments in the rv_6x8n kernels.\n      - Cleaned up whitespace (including leading ws -> tabs).\n      - Moved edge case (non-milli) kernels to their own directory, d6x8,\n        and split them into separate files based on the \"NR\" value of the\n        kernels (Mx8, Mx4, Mx2, etc.).\n      - Moved config-specific reference Mx1 kernels into their own file\n        (e.g. bli_gemmsup_r_haswell_ref_dMx1.c) inside the d6x8 directory.\n      - Added rd_dMx1 assembly kernels, which seems marginally faster than\n        the corresponding reference kernels.\n      - Updated comments in ref_kernels/bli_cntx_ref.c and changed to using\n        the row-oriented reference kernels for all storage combos.\n\ncommit 943a21def0bedc1732c0a2453afe7c90d7f62e95\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Thu May 21 14:09:21 2020 -0500\n\n    Add build instructions for Windows (#404)\n\ncommit fbef422f0d968df10e598668b427af230cfe07e8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 21 10:30:41 2020 -0500\n\n    Separate OS X and Windows into separate FAQs.\n    \n    Details:\n    - Separated the unified Mac OS X / Windows frequently asked question\n      into two separate questions, one for each OS.\n\ncommit 28be1a4265ea67e3f177c391aba3dbbcf840bd52\nAuthor: Guodong Xu <guodong.xu@linaro.org>\nDate:   Thu May 21 02:22:22 2020 +0800\n\n    avoid loading twice in armv8a gemm kernel (#403)\n    \n    This bug happens at a corner case, when k_iter == 0 and we jump to\n    CONSIDERKLEFT.\n    \n    In current design, first row/col. of a and b are loaded twice.\n    \n    The fix is to rearrange a and b (first row/col.) loading instructions.\n    \n    Signed-off-by: Guodong Xu <guodong.xu@linaro.org>\n\ncommit d51245e58b0beff2717156b980007c90337150d8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri May 8 18:00:54 2020 -0500\n\n    Add support for Intel oneAPI in configure.\n    \n    Details:\n    - Properly select cc_vendor based on the output of invoking CC with the\n      --version option, including cases where CC is the variant of clang\n      that is included with Intel oneAPI. (However, we continue to treat\n      the compiler as clang for other purposes, not icc.) Thanks to Ajay\n      Panyala and Devin Matthews for reporting on this issue via #402.\n\ncommit 787adad73bd5eb65c12c39d732723a1ac0448748\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri May 8 16:18:20 2020 -0500\n\n    Defined netlib equivalent of xerbla_array().\n    \n    Details:\n    - Added a function definition for xerbla_array_(), which largely mirrors\n      its netlib implementation. Thanks to Isuru Fernando for suggesting the\n      addition of this function.\n\ncommit c53b5153bee585685bf95ce22e058a7af72ecef0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue May 5 12:39:12 2020 -0500\n\n    Documented Perl prerequisite for build system.\n    \n    Details:\n    - Added Perl to list of prerequisites for building BLIS. This is in part\n      (and perhaps completely?) due to some substitution commands used at\n      the end of configure that include '\\n' characters that are not\n      properly interpreted by the version of sed included on some versions\n      of OS X. This new documentation addresses issue #398.\n\ncommit f032d5d4a6ed34c8c3e5ba1ed0b14d1956d0097c\nAuthor: Guodong Xu <guodong.xu@linaro.org>\nDate:   Thu Apr 30 01:08:46 2020 +0800\n\n    New kernel set for Arm SVE using assembly (#396)\n    \n    Here adds two kernels for Arm SVE vector extensions.\n    1. a gemm  kernel for double at sizes 8x8.\n    2. a packm kernel for double at dimension 8xk.\n    \n    To achive best performance, variable length agonostic programming\n    is not used. Vector length (VL) of 256 bits is mandated in both kernels.\n    Kernels to support other VLs can be added later.\n    \n    \"SVE is a vector extension for AArch64 execution mode for the A64\n    instruction set of the Armv8 architecture. Unlike other SIMD architectures,\n    SVE does not define the size of the vector registers, but constrains into\n    a range of possible values, from a minimum of 128 bits up to a maximum of\n    2048 in 128-bit wide units. Therefore, any CPU vendor can implement the\n    extension by choosing the vector register size that better suits the\n    workloads the CPU is targeting. Instructions are provided specifically\n    to query an implementation for its register size, to guarantee that\n    the applications can run on different implementations of the ISA without\n    the need to recompile the code.\"  [1]\n    \n    [1] https://developer.arm.com/solutions/hpc/resources/hpc-white-papers/arm-scalable-vector-extensions-and-application-to-machine-learning\n    \n    Signed-off-by: Guodong Xu <guodong.xu@linaro.org>\n\ncommit 4d87eb24e8e1f5a21e04586f6df4f427bae0091b\nAuthor: Yingbo Ma <mayingbo5@gmail.com>\nDate:   Mon Apr 27 17:02:47 2020 -0400\n\n    Update KernelsHowTo.md (#395)\n\ncommit 477ce91c5281df2bbfaddc4d86312fb8c8f879e2\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Apr 22 14:26:49 2020 -0500\n\n    Moved #include \"cpuid.h\" to bli_cpuid.c.\n    \n    Details:\n    - Relocated the #include \"cpuid.h\" directive from bli_cpuid.h to\n      bli_cpuid.c. This was done because cpuid.h (which is pulled into\n      the post-build blis.h developer header) doesn't protect its\n      definitions with a preprocessor guard of the form:\n    \n        #ifndef FOOBAR_H\n        #define FOOBAR_H\n        // header contents.\n        #endif\n    \n      and as a result, applications (previously) could not #include both\n      blis.h and cpuid.h (since the former was already including the\n      latter). Thanks to Bhaskar Nallani for raising this issue via #393\n      and to Devin Matthews for suggesting this fix.\n    - CREDITS file update.\n\ncommit 8bde63ffd7474a97c3a3b0b0dc1eae45be0ab889\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Apr 18 12:50:12 2020 -0500\n\n    Adding missing conjy to her2/syr2 in typed API doc.\n    \n    Details:\n    - Fixed a missing argument (conjy) in the function signatures of\n      bli_?her2() and bli_?syr2() in docs/BLISTypedAPI.md. Thanks to Robert\n      van de Geijn for reporting this omission.\n\ncommit 976902406b610afdbacb2d80a7a2b4b43ff30321\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Apr 17 15:11:10 2020 -0500\n\n    Disable packing by default in expert rntm_t init.\n    \n    Details:\n    - Changed the behavior of bli_rntm_init() as well as the static\n      initializer, BLIS_RNTM_INITIALIZER, so that user-initialized rntm_t\n      objects by default specify the disabling of packing for A and B.\n      Packing of A/B was already disabled by default when calling non-expert\n      APIs (and enabled only when the user set environment variables\n      BLIS_PACK_A or BLIS_PACK_B). With this commit, the default behavior of\n      using user-initialized rntm_t objects with expert APIs comes into line\n      with the default behavior of non-expert APIs--that is, they now both\n      lead to the avoidance of packing in the sup code path. (Note: The\n      conventional code path is unaffected by the environment variables\n      BLIS_PACK_A/BLIS_PACK_B and/or the disabling of packing in a rntm_t\n      object when calling an expert API.) This addresses issue #392. Thanks\n      to Kiran Varaganti for bringing this inconsistency to our attention.\n    - The above change was accomplished by changing the the definitions of\n      static functions bli_rntm_clear_pack_a() and bli_rntm_clear_pack_b()\n      in bli_rntm.h, which are both for internal use only.\n\ncommit 5f2aee7c5fa5d562acaf8fbde3df0e2a04e1dd1b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 7 14:55:15 2020 -0500\n\n    README.md update to promote supmt dgemm.\n    \n    Details:\n    - Updated the sup entry in the \"What's New\" section of the README.md\n      file to promote the multithreaded dgemm sup feature introduced in\n      c0558fd.\n\ncommit f5923cd9ff5fbd91190277dea8e52027174a1d57\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 7 14:41:45 2020 -0500\n\n    CHANGELOG update (0.7.0)\n\ncommit 68b88aca6692c75a9f686187e6c4a4e196ae60a9 (tag: 0.7.0)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 7 14:41:44 2020 -0500\n\n    Version file update (0.7.0)\n\ncommit b04de636c1702e4cb8e7ad82bab3cf43d2dbdfc6\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 7 14:37:43 2020 -0500\n\n    ReleaseNotes.md update in advance of next version.\n    \n    Details:\n    - Updated docs/ReleaseNotes.md in preparation for next version.\n\ncommit 2cb604ba472049ad498df72d4a2dc47a161d4c3c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Apr 6 16:42:14 2020 -0500\n\n    Rename more bli_thread_obarrier(), _obroadcast().\n    \n    Details:\n    - Renamed instances of bli_thread_obarrier() and bli_thread_obroadcast()\n      that were made in the supmt-specific code commited to the 'amd'\n      branch, which has now been merged with 'master'. Prior to the merge,\n      'master' received commit c01d249, which applied these renamings to\n      the existing, non-sup codebase.\n\ncommit efb12bc895de451067649d5dceb059b7827a025f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Apr 6 15:01:53 2020 -0500\n\n    Minor updates/elaborations to RELEASING file.\n\ncommit 2e3b3782cfb7a2fd0d1a325844983639756def7d\nMerge: 9f3a8d4d da0c086f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Apr 6 14:55:35 2020 -0500\n\n    Merge branch 'master' into amd\n\ncommit da0c086f4643772e111318f95a712831b0f981a8\nAuthor: Satish Balay <balay@mcs.anl.gov>\nDate:   Tue Mar 31 17:09:41 2020 -0500\n\n    OSX: specify the full path to the location of libblis.dylib (#390)\n    \n    * OSX: specify the full path to the location of libblis.dylib so that it can be found at runtime\n    \n    Before this change:\n    \n    Appication gives runtime error [when linked with blis]\n    dyld: Library not loaded: libblis.3.dylib\n    \n    balay@kpro lib % otool -L libblis.dylib\n    libblis.dylib:\n            libblis.3.dylib (compatibility version 0.0.0, current version 0.0.0)\n            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1281.0.0)\n    \n    After this change:\n    balay@kpro lib % otool -L libblis.dylib\n    libblis.dylib:\n            /Users/balay/petsc/arch-darwin-c-debug/lib/libblis.3.dylib (compatibility version 0.0.0, current version 0.0.0)\n            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1281.0.0)\n    \n    * INSTALL_LIBDIR -> libdir as INSTALL_LIBDIR has DESTDIR\n    \n    Co-Authored-By: Jed Brown <jed@jedbrown.org>\n    \n    * CREDITS file update.\n    \n    Co-authored-by: Jed Brown <jed@jedbrown.org>\n    Co-authored-by: Field G. Van Zee <field@cs.utexas.edu>\n\ncommit 2bca03ea9d87c0da829031a5332545d05e352211\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Mar 28 22:10:00 2020 +0000\n\n    Updates, tweaks to runme.sh in test/1m4m.\n    \n    Details:\n    - Made several updates to test/1m4m/runme.sh, including:\n      - Added missing handling for 1m and 4m1a implementations when setting\n        the BLIS_??_NT environment variables.\n      - Added support for using numactl to run the test executables.\n      - Several other cleanups.\n\ncommit c40a33190b94af5d5c201be63366594859b1233f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 26 16:55:00 2020 -0500\n\n    Warn user when auto-detection returns 'generic'.\n    \n    Details:\n    - Added logic to configure that causes the script to output a warning\n      to the user if/when \"./configure auto\" is run and the underlying\n      hardware feature detection code is unable to identify the hardware.\n      In these cases, the auto-detect code will return 'generic', which\n      is likely not what the user expected, and a flag will be set so that\n      a message is printed at the end of the configure output. (Thankfully,\n      we don't expect this scenario to play out very often.) Thanks to\n      Devin Matthews for suggesting this fix #384.\n\ncommit 492a736fab5b9c882996ca024b64646877f22a89\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Tue Mar 24 17:28:47 2020 -0500\n\n    Fix vectorized version of bli_amaxv (#382)\n    \n    * Fix vectorized version of bli_amaxv\n    \n    To match Netlib, i?amax should return:\n    - the lowest index among equal values\n    - the first NaN if one is encountered\n    \n    * Fix typos.\n    \n    * And another one...\n    \n    * Update ref. amaxv kernel too.\n    \n    * Re-enabled optimized amaxv kernels.\n    \n    Details:\n    - Re-enabled the optimized, intrinsics-based amaxv kernels in the 'zen'\n      kernel set for use in haswell, zen, zen2, knl, and skx subconfigs.\n      These two kernels (for s and d datatypes) were temporarily disabled in\n      e186d71 as part of issue #380. However, the key missing semantic\n      properties that prompted the disabling of these kernels--returning the\n      index of the *first* rather than of the last element with largest\n      absolute value, and returning the index of the first NaN if one is\n      encountered--were added as part of #382 thanks to Devin Matthews.\n      Thus, now that the kernels are working as expected once more, this\n      commit causes these kernels to once again be registered for the\n      affected subconfigs, which effectively reverts all code changes\n      included in e186d71.\n    - Whitespace/formatting updates to new macros in bli_amaxv_zen_int.c.\n    \n    Co-authored-by: Field G. Van Zee <field@cs.utexas.edu>\n\ncommit e186d7141a51f2d7196c580e24e7b7db8f209db9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Mar 21 18:40:36 2020 -0500\n\n    Disabled optimized amaxv kernels.\n    \n    Details:\n    - Disabled use of optimized amaxv kernels, which use vector intrinsics\n      for both 's' and 'd' datatypes. We disable these kernels because the\n      current implementations fail to observe a semantic property of the\n      BLAS i?amax_() subroutine, which is to return the index of the\n      *first* element containing the maximum absolute value (that is, the\n      first element if there exist two or more elements that contain the\n      same value). With the optimized kernels disabled, the affected\n      subconfigurations (haswell, zen, zen2, knl, and skx) will use the\n      default reference implementations. Thanks to Mat Cross for reporting\n      this issue via #380.\n    - CREDITS file update.\n\ncommit 9f3a8d4d851725436b617297231a417aa9ce8c6a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Mar 14 17:48:43 2020 -0500\n\n    Added missing return to bli_thread_partition_2x2().\n    \n    Details:\n    - Added a missing return statement to the body of an early case handling\n      branch in bli_thread_partition_2x2(). This bug only affected cases\n      where n_threads < 4, and even then, the code meant to handle cases\n      where n_threads >= 4 executes and does the right thing, albeit using\n      more CPU cycles than needed. Nonetheless, thanks to Kiran Varaganti\n      for reporting this bug via issue #377.\n    - Whitespace changes to bli_thread.c (spaces -> tabs).\n\ncommit 8c3d9b9eeb6f816ec8c32a944f632a5ad3637593\nMerge: 71249fe8 0f9e0399\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 10 14:03:33 2020 -0500\n\n    Merge branch 'amd' of github.com:flame/blis into amd\n\ncommit 71249fe8ddaa772616698f1e3814d40e012909ea\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 10 13:55:29 2020 -0500\n\n    Merged test/sup, test/supmt into test/sup.\n    \n    Details:\n    - Updated the Makefile, test_gemm.c, and runme.sh in test/sup to be able\n      to compile and run both single-threaded and multithreaded experiments.\n      This should help with maintenance going forward.\n    - Created a test/sup/octave_st directory of scripts (based on the\n      previous test/sup/octave scripts) as well as a test/sup/octave_mt\n      directory (based on the previous test/supmt/octave scripts). The\n      octave scripts are slightly different and not easily mergeable, and\n      thus for now I'll maintain them separately.\n    - Preserved the previous test/sup directory as test/sup/old/supst and\n      the previous test/supmt directory as test/sup/old/supmt.\n\ncommit 0f9e0399e16e96da2620faf2c0c3c21274bb2ebd\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 5 17:03:21 2020 -0600\n\n    Updated sup performance graphs; added mt results.\n    \n    Details:\n    - Reran all existing single-threaded performance experiments comparing\n      BLIS sup to other implementations (including the conventional code\n      path within BLIS), using the latest versions (where appropriate).\n    - Added multithreaded results for the three existing hardware types\n      showcased in docs/PerformanceSmall.md: Kaby Lake, Haswell, and Epyc\n      (Zen1).\n    - Various minor updates to the text in docs/PerformanceSmall.md.\n    - Updates to the octave scripts in test/sup/octave, test/supmt/octave.\n\ncommit 90db88e5729732628c1f3acc96eeefab49f2da41\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 2 15:06:48 2020 -0600\n\n    Updated sup[mt] Makefiles for variable dim ranges.\n    \n    Details:\n    - Updated test/sup/Makefile and test/supmt/Makefile to allow specifying\n      different problem size ranges for the drivers where one, two, or three\n      matrix dimensions is large. This will facilitate the generation of\n      more meaningful graphs, particularly when two dimensions are tiny.\n\ncommit 31f11a06ea9501724feec0d2fc5e4644d7dd34fc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Feb 27 14:33:20 2020 -0600\n\n    Updates to octave scripts in test/sup[mt]/octave.\n    \n    Details:\n    - Optimized scripts in test/sup/octave and test/supmt/octave for use\n      with octave 5.2.0 on Ubuntu 18.04.\n    - Fixed stray 'end' keywords in gen_opsupnames.m and plot_l3sup_perf.m,\n      which were not only unnecessary but also causing issues with versions\n      5.x.\n\ncommit c01d249d7c546fe2e3cee3fe071cd4c4c88b9115\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Feb 25 14:50:53 2020 -0600\n\n    Renamed bli_thread_obarrier(), _obroadcast().\n    \n    Details:\n    - Renamed two bli_thread_*() APIs:\n        bli_thread_obarrier()   -> bli_thread_barrier()\n        bli_thread_obroadcast() -> bli_thread_broadcast()\n      The 'o' was a leftover from when thrcomm_t objects tracked both\n      \"inner\" and \"outer\" communicators. They have long since been\n      simplified to only support the latter, and thus the 'o' is\n      superfluous.\n\ncommit f6e6bf73e695226c8b23fe7900da0e0ef37030c1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 24 17:52:23 2020 -0600\n\n    List Gentoo under supported external packages.\n    \n    Details:\n    - Add mention of Gentoo Linux under the list of external packages in\n      the README.md file. Thanks to M. Zhou for maintaining this package.\n\ncommit 9e5f7296ccf9b3f7b7041fe1df20b927cd0e914b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Feb 18 15:16:03 2020 -0600\n\n    Skip building thrinfo_t tree when mt is disabled.\n    \n    Details:\n    - Return early from bli_thrinfo_sup_grow() if the thrinfo_t object\n      address is equal to either &BLIS_GEMM_SINGLE_THREADED or\n      &BLIS_PACKM_SINGLE_THREADED.\n    - Added preprocessor logic to bli_l3_sup_thread_decorator() in\n      bli_l3_sup_decor_single.c that (by default) disables code that\n      creates and frees the thrinfo_t tree and instead passes\n      &BLIS_GEMM_SINGLE_THREADED as the thrinfo_t pointer into the\n      sup implementation.\n    - The net effect of the above changes is that a small amount of\n      thrinfo_t overhead is avoided when running small/skinny dgemm\n      problems when BLIS is compiled with multithreading disabled.\n\ncommit 90081e6a64b5ccea9211bdef193c2d332c68492f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 17 14:57:25 2020 -0600\n\n    Fixed bug(s) in mt sup when single-threaded.\n    \n    Details:\n    - Fixed a syntax bug in bli_l3_sup_decor_single.c as a result of\n      changing function interface for the thread entry point function\n      (of type l3supint_t).\n    - Unfortunately, fixing the interface was not enough, as it caused\n      a memory leak in the sba at bli_finalize() time. It turns out that,\n      due to the new multithreading-capable variant code useing thrinfo_t\n      objects--specifically, their calling of bli_thrinfo_grow()--we\n      have to pass in a real thrinfo_t object rather than the global\n      objects &BLIS_PACKM_SINGLE_THREADED or &BLIS_GEMM_SINGLE_THREADED.\n      Thus, I inserted the appropriate logic from the OpenMP and pthreads\n      versions so that single-threaded execution would work as intended\n      with the newly upgraded variants.\n\ncommit c0558fde4511557c8f08867b035ee57dd2669dc6\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 17 14:08:08 2020 -0600\n\n    Support multithreading within the sup framework.\n    \n    Details:\n    - Added multithreading support to the sup framework (via either OpenMP\n      or pthreads). Both variants 1n and 2m now have the appropriate\n      threading infrastructure, including data partitioning logic, to\n      parallelize computation. This support handles all four combinations\n      of packing on matrices A and B (neither, A only, B only, or both).\n      This implementation tries to be a little smarter when automatic\n      threading is requested (e.g. via BLIS_NUM_THREADS) in that it will\n      recalculate the factorization in units of micropanels (rather than\n      using the raw dimensions) in bli_l3_sup_int.c, when the final\n      problem shape is known and after threads have already been spawned.\n    - Implemented bli_?packm_sup_var2(), which packs to conventional row-\n      or column-stored matrices. (This is used for the rrc and crc storage\n      cases.) Previously, copym was used, but that would no longer suffice\n      because it could not be parallelized.\n    - Minor reorganization of packing-related sup functions. Specifically,\n      bli_packm_sup_init_mem_[ab]() are called from within packm_sup_[ab]()\n      instead of from the variant functions. This has the effect of making\n      the variant functions more readable.\n    - Added additional bli_thrinfo_set_*() static functions to bli_thrinfo.h\n      and inserted usage of these functions within bli_thrinfo_init(), which\n      previously was accessing thrinfo_t fields via the -> operator.\n    - Renamed bli_partition_2x2() to bli_thread_partition_2x2().\n    - Added an auto_factor field to the rntm_t struct in order to track\n      whether automatic thread factorization was originally requested.\n    - Added new test drivers in test/supmt that perform multithreaded sup\n      tests, as well as appropriate octave/matlab scripts to plot the\n      resulting output files.\n    - Added additional language to docs/Multithreading.md to make it clear\n      that specifying any BLIS_*_NT variable, even if it is set to 1, will\n      be considered manual specification for the purposes of determining\n      whether to auto-factorize via BLIS_NUM_THREADS.\n    - Minor comment updates.\n\ncommit d7a7679182d72a7eaecef4cd9b9a103ee0a7b42b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Feb 7 17:37:03 2020 -0600\n\n    Fixed int-to-packbuf_t conversion error (C++ only).\n    \n    Details:\n    - Fixed an error that manifests only when using C++ (specifically,\n      modern versions of g++) to compile drivers in 'test' (and likely most\n      other application code that #includes blis.h. Thanks to Ajay Panyala\n      for reporting this issue (#374).\n\ncommit d626112b8d5302f9585fb37a8e37849747a2a317\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jan 15 13:27:02 2020 -0600\n\n    Removed sorting on LDFLAGS in common.mk (#373).\n    \n    Details:\n    - Removed a line of code in common.mk that passed LDFLAGS through the\n      sort function. The purpose was not to sort the contents, but rather\n      to remove duplicates. However, there is valid syntax in a string of\n      linker flags that, when sorted, yields different/broken behavior.\n      So I've removed the line in common.mk that sorts LDFLAGS. Also, for\n      future use, I've added a new function, rm-dupls, that removes\n      duplicates without sorting. (This function was based on code from a\n      stackoverflow thread that is linked to in the comments for that\n      code.) Thanks to Isuru Fernando for reporting this issue (#373).\n\ncommit e67deb22aaeab5ed6794364520190936748ef272\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 14 16:01:34 2020 -0600\n\n    CHANGELOG update (0.6.1)\n\ncommit 10949f528c5ffc5c3a2cad47fe16a802afb021be (tag: 0.6.1)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 14 16:01:33 2020 -0600\n\n    Version file update (0.6.1)\n\ncommit 5db8e710a2baff121cba9c63b61ca254a2ec097a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 14 15:59:59 2020 -0600\n\n    ReleaseNotes.md update in advance of next version.\n    \n    Details:\n    - Updated ReleaseNotes.md in preparation for next version.\n\ncommit cde4d9d7a26eb51dcc5a59943361dfb8fda45dea\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 14 15:19:25 2020 -0600\n\n    Removed 'attic/windows' (to prevent confusion).\n    \n    Details:\n    - Finally removed 'attic/windows' and its contents. This directory once\n      contained \"proto\" Windows support for BLIS, but we've since moved on\n      to (thanks to Isuru Fernando) providing Windows DLL support via\n      AppVeyor's build artifacts. Furthermore, since 'windows' was the only\n      subdirectory within 'attic', the directory path would show up in\n      GitHub's listing at https://github.com/flame/blis, which probably led\n      to someone being confused about how BLIS provides Windows support. I\n      assume (but don't know for sure) that nobody is using these files, so\n      this is admittedly a case of shoot first and ask questions later.\n\ncommit 7d3407d4681c6449f4bbb8ec681983700ab968f3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 14 15:17:53 2020 -0600\n\n    CREDITS file update.\n\ncommit f391b3e2e7d11a37300d4c8d3f6a584022a599f5\nAuthor: Dave Love <dave.love@manchester.ac.uk>\nDate:   Mon Jan 6 20:15:48 2020 +0000\n\n    Fix parsing in vpu_count on workstation SKX (#351)\n    \n    * Fix parsing in vpu_count on workstation SKX\n    \n    * Document Skylake-X as Haswell for single FMA\n    \n    * Update vpu_count for Skylake and Cascade Lake models\n    \n    * Support printing the configuration selected, controlled by the environment\n    \n    Intended particularly for diagnosing mis-selection of SKX through\n    unknown, or incorrect, number of VPUs.\n    \n    * Move bli_log outside the cpp condition, and use it where intended\n    \n    * Add Fixme comment (Skylake D)\n    \n    * Mostly superficial edits to commits towards #351.\n    \n    Details:\n    - Moved architecture/sub-config logging-related code from bli_cpuid.c\n      to bli_arch.c, tweaked names, and added more set/get layering.\n    - Tweaked log messages output from bli_cpuid_is_skx() in bli_cpuid.c.\n    - Content, whitespace changes to new bullet in HardwareSupport.md that\n      relates to single-VPU Skylake-Xs.\n    \n    * Fix comment typos\n    \n    Co-authored-by: Field G. Van Zee <field@cs.utexas.edu>\n\ncommit 5ca1a3cfc1c1cc4dd9da6a67aa072ed90f07e867\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 6 12:29:12 2020 -0600\n\n    Fixed 'configure' breakage introduced in 6433831.\n    \n    Details:\n    - Added a missing 'fi' (endif) keyword to a conditional block added in\n      the configure script in commit 6433831.\n\ncommit e7431b4a834ef4f165c143f288585ce8e2272a23\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 6 12:01:41 2020 -0600\n\n    Updated 1m draft article link in README.md.\n\ncommit 6433831cc3988ad205637ebdebcd6d8f7cfcf148\nAuthor: Jeff Hammond <jeff.r.hammond@intel.com>\nDate:   Fri Jan 3 17:52:49 2020 -0800\n\n    blacklist ICC 18 for knl/skx due to test failures\n    \n    Signed-off-by: Jeff Hammond <jeff.r.hammond@intel.com>\n\ncommit af3589f1f98781e3a94a8f9cea8d5ea6f155f7d2\nAuthor: Jeff Hammond <jeff.science@gmail.com>\nDate:   Fri Jan 3 13:23:24 2020 -0800\n\n    blacklist Intel 19+\n    \n    Signed-off-by: Jeff Hammond <jeff.r.hammond@intel.com>\n\ncommit 60de939debafb233e57fd4e804ef21b6de198caf\nAuthor: Jeff Hammond <jeff.science@gmail.com>\nDate:   Wed Jan 1 21:30:38 2020 -0800\n\n    fix link to docs\n    \n    the comment contains an incorrect link, which is trivially fixed here.\n    \n    @fgvanzee I hope you don't mind that I committed directly to master but this cannot break anything.\n\ncommit 52711073789b6b84eb99bb0d6883f457ed3fcf80\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Dec 16 16:30:26 2019 -0600\n\n    Fixed bugs in cblas_sdsdot(), sdsdot_().\n    \n    Details:\n    - Fixed a bug in sdsdot_sub() that redundantly added the \"alpha\" scalar,\n      named 'sb'. This value was already being added by the underlying\n      sdsdot_() function. Thus, we no longer add 'sb' within sdsdot_sub().\n      Thanks to Simon Lukas Märtens for reporting this bug via #367.\n    - Fixed a second bug in order of typecasting intermediate products in\n      sdsdot_(). Previously, the \"alpha\" scalar was being added after the\n      \"outer\" typecast to float. However, the operation is supposed to first\n      add the dot product to the (promoted) scalar and THEN downcast the sum\n      to float. Thanks to Devin Matthews for catching this bug.\n\ncommit fe2560a4b1d8ef8d0a446df6002b1e7decc826e9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Dec 6 17:12:44 2019 -0600\n\n    Annoted missing thread-related symbols for export.\n    \n    Details:\n    - Added BLIS_EXPORT_BLIS annotation to function prototypes for\n    \n        bli_thrcomm_bcast()\n        bli_thrcomm_barrier()\n        bli_thread_range_sub()\n    \n      so that these functions are exported to shared libraries by default.\n      This (hopefully) fixes issue #366. Thanks to Kyungmin Lee for\n      reporting this bug.\n    - CREDITS file update.\n\ncommit 2853825234001af8f175ad47cef5d6ff9b7a5982\nMerge: efa61a6c 61b1f0b0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Dec 6 16:06:46 2019 -0600\n\n    Merge branch 'master' into amd\n\ncommit 61b1f0b0602faa978d9912fe58c6c952a33af0ac\nAuthor: Nicholai Tukanov <nicholai@utexas.edu>\nDate:   Wed Dec 4 14:18:47 2019 -0600\n\n    Add prototypes for POWER9 reference kernels (#365)\n    \n    Updates and fixes to power9 subconfig.\n    \n    Details:\n    - Register s,c,z reference gemm and trsm ukernels that assume elements\n      of B have been broadcast.\n    - Added prototypes for level-3 ukernels that assume elements of B have\n      been broadcast. Also added prototype for an spackm function that\n      employs a duplication/broadcast factor of 4.\n    - Register virtual gemmtrsm ukernels that work with broadcasting of B.\n    - Disable right-side hemm, symm, trmm, and trmm3 in bli_family_power9.h.\n    - Thanks to Nicholai Tukanov for providing these updates.\n\ncommit efa61a6c8b1cfa48781fc2e4799ff32e1b7f8f77\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 29 16:17:04 2019 -0600\n\n    Added missing bli_l3_sup_thread_decorator() symbol.\n    \n    Details:\n    - Defined dummy versions of bli_l3_sup_thread_decorator() for Openmp\n      and pthreads so that those builds don't fail when performing shared\n      library linking (especially for Windows DLLs via AppVeyor). For now,\n      these dummy implementations of bli_l3_sup_thread_decorator() are\n      merely carbon-copies of the implementation provided for single-\n      threaded execution (ie: the one found in bli_l3_sup_decor_single.c).\n      Thus, an OpenMP or pthreads build will be able to use the gemmsup\n      code (including the new selective packing functionality), as it did\n      before 39fa7136, even though it will not actually employ any\n      multithreaded parallelism.\n\ncommit 39fa7136f4a4e55ccd9796fb79ad5f121b872ad9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 29 15:27:07 2019 -0600\n\n    Added support for selective packing to gemmsup.\n    \n    Details:\n    - Implemented optional packing for A or B (or both) within the sup\n      framework (which currently only supports gemm). The request for\n      packing either matrix A or matrix B can be made via setting\n      environment variables BLIS_PACK_A or BLIS_PACK_B (to any\n      non-zero value; if set, zero means \"disable packing\"). It can also\n      be made globally at runtime via bli_pack_set_pack_a() and\n      bli_pack_set_pack_b() or with individual rntm_t objects via\n      bli_rntm_set_pack_a() and bli_rntm_set_pack_b() if using the expert\n      interface of either the BLIS typed or object APIs. (If using the\n      BLAS API, environment variables are the only way to communicate the\n      packing request.)\n    - One caveat (for now) with the current implementation of selective\n      packing is that any blocksize extension registered in the _cntx_init\n      function (such as is currently used by haswell and zen subconfigs)\n      will be ignored if the affected matrix is packed. The reason is\n      simply that I didn't get around to implementing the necessary logic\n      to pack a larger edge-case micropanel, though this is entirely\n      possible and should be done in the future.\n    - Spun off the variant-choosing portion of bli_gemmsup_ref() into\n      bli_gemmsup_int(), in bli_l3_sup_int.c.\n    - Added new files, bli_l3_sup_packm_a.c, bli_l3_sup_packm_b.c, along\n      with corresponding headers, in which higher-level packm-related\n      functions are defined for use within the sup framework. The actual\n      packm variant code resides in bli_l3_sup_packm_var.c.\n    - Pass the following new parameters into var1n and var2m: packa, packb\n      bool_t's, pointer to a rntm_t, pointer to a cntl_t (which is for now\n      always NULL), and pointer to a thrinfo_t* (which for nowis the address\n      of the global single-threaded packm thread control node).\n    - Added panel strides ps_a and ps_b to the auxinfo_t structure so that\n      the millikernel can query the panel stride of the packed matrix and\n      step through it accordingly. If the matrix isn't packed, the panel\n      stride of interest for the given millikernel will be set to the\n      appropriate value so that the mkernel may step through the unpacked\n      matrix as it normally would.\n    - Modified the rv_6x8m and rv_6x8n millikernels to read the appropriate\n      panel strides (ps_a and ps_b, respectively) instead of computing them\n      on the fly.\n    - Spun off the environment variable getting and setting functions into\n      a new file, bli_env.c (with a corresponding prototype header). These\n      functions are now used by the threading infrastructure (e.g.\n      BLIS_NUM_THREADS, BLIS_JC_NT, etc.) as well as the selective packing\n      infrastructure (e.g. BLIS_PACK_A, BLIS_PACK_B).\n    - Added a static initializer for mem_t objects, BLIS_MEM_INITIALIZER.\n    - Added a static initializer for pblk_t objects, BLIS_PBLK_INITIALIZER,\n      for use within the definition of BLIS_MEM_INITIALIZER.\n    - Moved the global_rntm object to bli_rntm.c and extern it where needed.\n      This means that the function bli_thread_init_rntm() was renamed to\n      bli_rntm_init_from_global() and relocated accordingly.\n    - Added a new bli_pack.c function, which serves as the home for\n      functions that manage the pack_a and pack_b fields of the global\n      rntm_t, including from environment variables, just as we have\n      functions to manage the threading fields of the global rntm_t in\n      bli_thread.c.\n    - Reorganized naming for files in frame/thread, which mostly involved\n      spinning off the bli_l3_thread_decorator() functions into their own\n      files. This change makes more sense when considering the further\n      addition of bli_l3_sup_thread_decorator() functions (for now limited\n      only to the single-threaded form found in the  _single.c file).\n    - Explicitly initialize the reference sup handlers in both\n      bli_cntx_init_haswell.c and bli_cntx_init_zen.c so that it's more\n      obvious how to customize to a different handler, if desired.\n    - Removed various snippets of disabled code.\n    - Various comment updates.\n\ncommit bbb21fd0a9be8c5644bec37c75f9396eeeb69e48\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 21 18:15:16 2019 -0600\n\n    Tweaked SIAM/SC Best Prize language in README.md.\n\ncommit 043366f92d5f5f651d5e3371ac3adb36baf4adce\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 21 18:13:51 2019 -0600\n\n    Fixed typo in previous commit (SIAM/SC prize).\n\ncommit 05a4d583e65a46ff2a1100ab4433975d905d91f9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 21 18:12:24 2019 -0600\n\n    Added SIAM/SC prize to \"What's New\" in README.md.\n\ncommit 881b05ecd40c7bc0422d3479a02a28b1cb48383f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 21 16:34:27 2019 -0600\n\n    Fixed blastest failure for 'generic' subconfig.\n    \n    Details:\n    - Fixed a subtle and complicated bug that only manifested via the BLAS\n      test drivers in the generic subconfiguration, and possibly any other\n      subconfiguration that did not register complex-domain gemm ukernels,\n      or registered ONLY real-domain ukernels as row-preferential. This is\n      a long story, but it boils down to an exception to the \"transpose the\n      operation to bring storage of C into agreement with ukernel pref\"\n      optimization in bli_hemm_front.c and bli_symm_front.c sabotaging the\n      proper functioning of the 1m method, but only when the imaginary\n      component of beta is zero. See the comments in issue #342 for more\n      details. Thanks to Dave Love for identifying the commit in which this\n      bug was introduced, and other feedback related to this bug.\n\ncommit 0c7165fb01cdebbc31ec00124d446161b289942f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 14 16:48:14 2019 -0600\n\n    Fixed obscure bug in bli_acquire_mpart_[mn]dim().\n    \n    Details:\n    - Fixed a bug in bli_acquire_mpart_mdim(), bli_acquire_mpart_ndim(),\n      and bli_acquire_mpart_mndim() that allowed the use of a blocksize b\n      that is too large given the current row/column index (i.e., the i/j\n      argument) and the size of the dimension being partitioned (i.e., the\n      m/n argument). This bug only affected backwards partitioning/motion\n      through the dimension and was the result of a misplaced conditional\n      check-and-redirect to the backwards code path. It should be noted\n      that this bug was discovered not because it manifested the way it\n      could (thanks to the callers in BLIS making sure to always pass in\n      the \"correct\" blocksize b), but could have manifested if the\n      functions were used by 3rd party callers. Thanks to Minh Quan Ho for\n      reporting the bug via issue #363.\n\ncommit fb8bef9982171ee0f60bc39e41a33c4d31fd59a9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Nov 14 13:05:28 2019 -0600\n\n    Fixed copy-paste bug in bli_spackm_6xk_bb4_ref().\n    \n    Details:\n    - Fixed a copy-paste bug in the new bli_spackm_6xk_bb4_ref() that\n      manifested as failures in single-precision real level-3 operations.\n      Also replaced the duplication factor constants with a const-qualifed\n      varialbe, dfac, so that this won't happen again.\n    - Changed NC for single-precision real from 4080 to 8160 so that the\n      packed matrix B will have the same byte footprint in both single\n      and double real.\n\ncommit 8f399c89403d5824ba767df1426706cf2d19d0a7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Nov 12 15:32:57 2019 -0600\n\n    Tweaked/added notes to docs/Multithreading.md.\n    \n    Details:\n    - Added language to docs/Multithreading.md cautioning the reader about\n      the nuances of setting multithreading parameters via the manual and\n      automatic ways simultaneously, and also about how these parameters\n      behave when multithreading is disabled at configure-time. These\n      changes are an attempt to address the issues that arose in issue #362.\n      Thanks to Jérémie du Boisberranger for his feedback on this topic.\n    - CREDITS file update.\n\ncommit bdc7ee3394500d8e5b626af6ff37c048398bb27e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Nov 11 15:47:17 2019 -0600\n\n    Various fixes to support packing duplication in B.\n    \n    Details:\n    - Added cpp macros to trmm and trmm3 front-ends to optionally force\n      those operations to be cast so the structured matrix is on the left.\n      symm and hemm already had such macros, but these too were renamed so\n      that the macros were individual to the operation. We now have four\n      such macros:\n        #define BLIS_DISABLE_HEMM_RIGHT\n        #define BLIS_DISABLE_SYMM_RIGHT\n        #define BLIS_DISABLE_TRMM_RIGHT\n        #define BLIS_DISABLE_TRMM3_RIGHT\n      Also, updated the comments in the symm and hemm front-ends related to\n      the first two macro guards, and added corresponding comments to the\n      trmm and trmm3 front-ends for the latter two guards. (They all\n      functionally do the same thing, just for their specific operations.)\n      Thanks to Jeff Hammond for reporting the bugs that led me to this\n      change (via #359).\n    - Updated config/old/haswellbb subconfiguration (used to debug issues\n      related to duplicating B during packing) to register: a packing\n      kernel for single-precision real; gemmbb ukernels for s, c, and z;\n      trsmbb ukernels for s, c, and z; gemmtrsmbb virtual ukrnels for s, c\n      and z; and to use non-default cache and register blocksizes for s, c,\n      and z datatypes. Also declared prototypes for all of the gemmbb,\n      trsmbb, and gemmtrsmbb ukernel functions within the\n      bli_cntx_init_haswellbb() function. This should, once applied to the\n      power9 configuration, fix the remaining issues in #359.\n    - Defined bli_spackm_6xk_bb4_ref(), which packs single reals with a\n      duplication factor of 4. This function is defined in the same file as\n      bli_dpackm_6xk_bb2_ref() (bli_packm_cxk_bb_ref.c).\n\ncommit 0eb79ca8503bd7b237994335b9687457227d3290\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Nov 8 14:48:48 2019 -0600\n\n    Avoid unused variable warning in lread.c (#356).\n    \n    Details:\n    - Replaced the line\n    \n        f = f;\n    \n      with\n    \n        ( void )f;\n    \n      for the unused variable 'f' in blastest/f2c/lread.c. (Hopefully)\n      addresses issue #356, but since we don't use xlc who knows. Thanks\n      to Jeff Hammond for reporting this.\n\ncommit f377bb448512f0b578263387eed7eaf8f2b72bb7\nAuthor: Jérôme Duval <jerome.duval@gmail.com>\nDate:   Thu Nov 7 23:39:29 2019 +0100\n\n    Add Haiku to the known OS list (#361)\n\ncommit e29b1f9706b6d9ed798b7f6325f275df4e6be973\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Nov 5 17:15:19 2019 -0600\n\n    Fixed failing testsuite gemmtrsm_ukr for power9.\n    \n    Details:\n    - Added code that fixes false failures in the gemmtrsm_ukr module of the\n      testsuite. The tests were failing because the computation (bli_gemv())\n      that performs the numerical check was not able to properly travserse\n      the matrix operands bx1 and b11 that are views into the micropanel of\n      B, which has duplicated/broadcast elements under the power9 subconfig.\n      (For example, a micropanel of B with duplication factor of 2 needs to\n      use a column stride of 2; previously, the column stride was being\n      interpreted as 1.)\n    - Defined separate bli_obj_set_row_stride() and bli_obj_set_col_stride()\n      static functions in bli_obj_macro_defs.h. (Previously, only the\n      function bli_obj_set_strides() was defined. Amazing to think that we\n      got this far without these former functions.)\n    - Updated/expounded upon comments.\n\ncommit 49177a6b9afcccca5b39a21c6fd8e243525e1505\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Nov 4 18:09:37 2019 -0600\n\n    Fixed latent testsuite ukr module bugs for power9.\n    \n    Details:\n    - Fixed a latent bug in the testsuite ukernel modules (gemm, trsm, and\n      gemmtrsm) that only manifested once we began running with parameters\n      that mimic those of power9. The problem was rooted in the way those\n      modules were creating objects (and thus allocating memory) for the\n      micropanel operands to the microkernel being tested. Since power9\n      duplicates/broadcasts elements of B in memory, we needed an easy way\n      of asking for more than one storage element per logical element in\n      the matrix. I incorrectly expressed this as:\n    \n        bli_obj_create( datatype, k, n, ldbp, 1, &bp );\n    \n      The problem here is that bli_obj_create() is exceedingly efficient\n      at calculating the size it passes to malloc() and doesn't allocate a\n      full leading dimension's worth of elements for the last column (or\n      row, in this example). This would normally not bother anyone since\n      you're not supposed to access that memory anyway. But here, my\n      attempted \"hack\" for getting extra elements was insufficient, and\n      needed to be changed to:\n    \n        bli_obj_create( datatype, k, ldbp, ldbp, 1, &bp );\n    \n      That is, the extra elements needed to be baked into the dimensions of\n      the matrix object in order to have the intended effect on the number\n      of elements actually allocated. Thanks to Jeff Hammond for reporting\n      this bug.\n    - Fixed a typically harmless memory leak in the aforementioned test\n      modules (the objects for the packed micropanels were not being freed).\n    - Updated/expanded a common comment across all three ukr test modules.\n\ncommit c84391314d4f1b3f73d868f72105324e649f2a72\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Nov 4 13:57:12 2019 -0600\n\n    Reverted minor temp/wspace changes from b426f9e.\n    \n    Details:\n    - Added missing license header to bli_pwr9_asm_macros_12x6.h.\n    - Reverted temporary changes to various files in 'test' and 'testsuite'\n      directories.\n    - Moved testsuite/jobscripts into testsuite/old.\n    - Minor whitespace/comment changes across various files.\n\ncommit 4870260f6b8c06d2cc01b7147d7433ddee213f7f\nAuthor: Jeff Hammond <jeff.r.hammond@intel.com>\nDate:   Mon Nov 4 11:55:47 2019 -0800\n\n    blacklist GCC 5 and older for POWER9 (#360)\n\ncommit b426f9e04e5499c6f9c752e49c33800bfaadda4c\nAuthor: Nicholai Tukanov <nicholai@utexas.edu>\nDate:   Fri Nov 1 17:57:03 2019 -0500\n\n    POWER9 DGEMM  (#355)\n    \n    Implemented and registered power9 dgemm ukernel.\n    \n    Details:\n    - Implemented 12x6 dgemm microkernel for power9. This microkernel\n      assumes that elements of B have been duplicated/broadcast during the\n      packing step. The microkernel uses a column orientation for its\n      microtile vector registers and thus implements column storage and\n      general stride IO cases. (A row storage IO case via in-register\n      transposition may be added at a future date.) It should be noted that\n      we recommend using this microkernel with gcc and *not* xlc, as issues\n      with the latter cropped up during development, including but not\n      limited to slightly incompatible vector register mnemonics in the GNU\n      extended inline assembly clobber list.\n\ncommit 58102aeaa282dc79554ed045e1b17a6eda292e15\nMerge: 52059506 b9bc222b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Oct 28 17:58:31 2019 -0500\n\n    Merge branch 'amd'\n\ncommit 52059506b2d5fd4c3738165195abeb356a134bd4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Oct 23 15:26:42 2019 -0500\n\n    Added \"How to Download BLIS\" section to README.md.\n    \n    Details:\n    - Added a new section to the README.md, just prior to the \"Getting\n      Started\" section, titled \"How to Download BLIS\". This section details\n      the user's options for obtaining BLIS and lays out four common ways\n      of downloading the library. Thanks to Jeff Diamond for his feedback\n      on this topic.\n\ncommit e6f0a96cc59aef728470f6850947ba856148c38a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Oct 14 17:05:39 2019 -0500\n\n    Updated README.md to ack Facebook as funder.\n\ncommit b9bc222bfc3db4f9ae5d7b3321346eed70c2c3fb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Oct 14 16:38:15 2019 -0500\n\n    Call bli_syrk_small() before error checking.\n    \n    Details:\n    - In bli_syrk_front(), moved the conditional call to bli_syrk_check()\n      (if error checking is enabled) and the conditional scaling of C by\n      beta (if alpha is zero) so that they occur after, instead of before,\n      the call to bli_syrk_small(). This sequencing now matches that of\n      bli_gemm_small() in bli_gemm_front() and bli_trsm_small() in\n      bli_trsm_front().\n\ncommit f0959a81dbcf30d8a1076d0a6348a9835079d31a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Oct 14 15:46:28 2019 -0500\n\n    When manual config is blacklisted, output error.\n    \n    Details:\n    - Fixed and adjusted the logic in configure so that a more informative\n      error message is output when a user runs './configure ... <conf>' and\n      <conf> is present in the configuration blacklist. Previously, this\n      particular set of conditions would result in the message:\n    \n        'user-specified configuration '' is NOT registered!\n    \n      That is, the error message mis-identified the targeted configuration\n      as the empty string, and (more importantly) mis-identifies the\n      problem. Thanks to Tze Meng Low for reporting this issue.\n    - Fixed a nearby error messages somewhat unrelated to the issue above.\n      Specifically, the wrong string was being printed when the error\n      message was identifying an auto-detected configuration that did not\n      appear to be registered.\n\ncommit 6218ac95a525eefa8921baf8d0d7057dfacebe9c\nMerge: 0016d541 a617301f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 11 11:53:51 2019 -0500\n\n    Merge branch 'master' into amd\n\ncommit 0016d541e6b0da617b1fae6612d2b314901b7a75\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 11 11:09:44 2019 -0500\n\n    Changed -march=znver2 to =znver1 for clang on zen2.\n    \n    Details:\n    - In config/zen2/make_defs.mk, changed the -march= flag so that\n      -march=znver1 is used instead of -march=znver2 when CC_VENDOR is\n      clang. (The gcc branch attempts to differentiate between various\n      versions, but the equivalent version cutoffs for clang are not\n      yet known by us, so we have to use a single flag for all versions\n      of clang. Hopefully -march=znver1 is new enough. If not, we'll\n      fall back to -march=bdver4 -mno-fma4 -mno-tbm -mno-xop -mno-lwp.)\n      This issue was discovered thanks to AppVeyor.\n\ncommit e94a0530e5ac4c78a18f09105f40003be2b517f7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 11 10:48:27 2019 -0500\n\n    Corrected zen NC that was non-multiple of NR.\n    \n    Details:\n    - Updated an incorrectly set cache blocksize NC for single real within\n      config/zen/bli_cntx_init_zen.c that was non a multiple of the\n      corresponding value of NR. This issue, which was caught by Travis CI,\n      was introduced in 29b0e1e.\n\ncommit a2ffac752076bf55eb8c1fe2c5da8d9104f1f85b\nMerge: 1cfe8e25 29b0e1ef\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 11 10:31:18 2019 -0500\n\n    Merge branch 'amd-master' into amd\n\ncommit 29b0e1ef4e8b84ce76888d73c090009b361f1306\nMerge: 1cfe8e25 fdce1a56\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 11 10:24:24 2019 -0500\n\n    Code review + tweaks to AMD's AOCL 2.0 PR (#349).\n    \n    Details:\n    - NOTE: This is a merge commit of 'master' of git://github.com/amd/blis\n      into 'amd-master' of flame/blis.\n    - Fixed a bug in the downstream value of BLIS_NUM_ARCHS, which was\n      inadvertantly not incremented when the Zen2 subconfiguration was\n      added.\n    - In bli_gemm_front(), added a missing conditional constraint around the\n      call to bli_gemm_small() that ensures that the computation precision\n      of C matches the storage precision of C.\n    - In bli_syrk_front(), reorganized and relocated the notrans/trans logic\n      that existed around the call to bli_syrk_small() into bli_syrk_small()\n      to minimize the calling code footprint and also to bring that code\n      into stylistic harmony with similar code in bli_gemm_front() and\n      bli_trsm_front(). Also, replaced direct accessing of obj_t fields with\n      proper accessor static functions (e.g. 'a->dim[0]' becomes\n      'bli_obj_length( a )').\n    - Added #ifdef BLIS_ENABLE_SMALL_MATRIX guard around prototypes for\n      bli_gemm_small(), bli_syrk_small(), and bli_trsm_small(). This is\n      strictly speaking unnecessary, but it serves as a useful visual cue to\n      those who may be reading the files.\n    - Removed cpp macro-protected small matrix debugging code from\n      bli_trsm_front.c.\n    - Added a GCC_OT_9_1_0 variable to build/config.mk.in to facilitate gcc\n      version check for availability of -march=znver2, and added appropriate\n      support to configure script.\n    - Cleanups to compiler flags common to recent AMD microarchitectures in\n      config/zen/amd_config.mk, including: removal of -march=znver1 et al.\n      from CKVECFLAGS (since the -march flag is added within make_defs.mk);\n      setting CRVECFLAGS similarly to CKVECFLAGS.\n    - Cleanups to config/zen/bli_cntx_init_zen.c.\n    - Cleanups, added comments to config/zen/make_defs.mk.\n    - Cleanups to config/zen2/make_defs.mk, including making use of newly-\n      added GCC_OT_9_1_0 and existing GCC_OT_6_1_0 to choose the correct\n      set of compiler flags based on the version of gcc being used.\n    - Reverted downstream changes to test/test_gemm.c.\n    - Various whitespace/comment changes.\n\ncommit a617301f9365ac720ff286514105d1b78951368b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Oct 8 17:14:05 2019 -0500\n\n    Updates to docs/CodingConventions.md.\n\ncommit 171f10069199f0cd280f18aac184546bd877c4fe\nMerge: 702486b1 05d58edf\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Oct 4 11:18:23 2019 -0500\n\n    Merge remote-tracking branch 'loveshack/emacs'\n\ncommit 702486b12560b5c696ba06de9a73fc0d5107ca44\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Oct 2 16:35:41 2019 -0500\n\n    Removed stray FAQ section introduced in 1907000.\n\ncommit 1907000ad6ea396970c010f07ae42980b7b14fa0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Oct 2 16:31:54 2019 -0500\n\n    Updated to FAQ (AMD-related questions).\n    \n    Details:\n    - Added a couple potential frequently-asked questions/answers releated\n      to AMD's fork of BLIS.\n    - Updated existing answers to other questions.\n\ncommit 834f30a0dad808931c9d80bd5831b636ed0e1098\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Oct 2 12:45:56 2019 -0500\n\n    Mention mixeddt paper in docs/MixedDatatypes.md.\n\ncommit 05d58edfe0ea9279971d74f17a5f7a69c4672ed5\nAuthor: Dave Love <dave.love@manchester.ac.uk>\nDate:   Wed Oct 2 10:33:44 2019 +0100\n\n    Note .dir-locals.el in docs\n\ncommit 531110c339f199a4d165d707c988d89ab4f5bfe8\nAuthor: Dave Love <dave.love@manchester.ac.uk>\nDate:   Wed Oct 2 10:16:22 2019 +0100\n\n    Modify Emacs config\n    Confine it to cc-mode and add comment-start/end.\n\ncommit 4bab365cab98202259c70feba6ec87408cba28d8\nAuthor: Dave Love <dave.love@manchester.ac.uk>\nDate:   Tue Oct 1 19:22:47 2019 +0000\n\n    Add .dir-locals.el for Emacs (#348)\n    \n    A minimal version that could probably do with extending, but at least\n    gets the indentation roughly right.\n\ncommit 4ec8dad66b3d37b0a2b47d19b7144bb62d332622\nAuthor: Dave Love <dave.love@manchester.ac.uk>\nDate:   Thu Sep 26 16:27:53 2019 +0100\n\n    Add .dir-locals.el for Emacs\n    \n    A minimal version that could probably do with extending, but at least\n    gets the indentation roughly right.\n\ncommit bc16ec7d1e2a30ce4a751255b70c9cbe87409e4f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Sep 23 15:37:33 2019 -0500\n\n    Set execute bits of shared library at install-time.\n    \n    Details:\n    - Modified the 0644 octal code used during installation of shared\n      libraries to 0755 (for Linux/OSX only). Thanks to Adam J. Stewart\n      for reporting this issue via #343.\n    - CREDITS file update.\n\ncommit c60db26aee9e7b4e5d0b031b0881e58d23666b53\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 17 18:04:17 2019 -0500\n\n    Fixed bad loop counter in bli_[cz]scal2bbs_mxn().\n    \n    Details:\n    - Fixed a typo in the loop counter for the 'd' (duplication) dimension\n      in the complex macros of frame/include/level0/bb/bli_scal2bbs_mxn.h.\n      They shouldn't be used by anyone yet, but thankfully clang via\n      AppVeyor spit out warnings that alerted me to the issue.\n\ncommit c766c81d628f0451d8255bf5e4b8be0a4ef91978\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 17 18:00:29 2019 -0500\n\n    Added missing schema arg to knl packm kernels.\n    \n    Details:\n    - Added the pack_t schema argument to the knl packm kernel functions.\n      This change was intended for inclusion in 31c8657. (Thank you SDE +\n      Travis CI.)\n\ncommit 31c8657f1d6d8f6efd8a73fd1995e995fc56748b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 17 17:42:10 2019 -0500\n\n    Added support for pre-broadcast when packing B.\n    \n    Details:\n    - Added support for being able to duplicate (broadcast) elements in\n      memory when packing matrix B (ie: the left-hand operand) in level-3\n      operations. This turns out advantageous for some architectures that\n      can afford the cost of the extra bandwidth and somehow benefit from\n      the pre-broadcast elements (and thus being able to avoid using\n      broadcast-style load instructions on micro-rows of B in the gemm\n      microkernel).\n    - Support optionally disabling right-side hemm and symm. If this occurs,\n      hemm_r is implemented in terms of hemm_l (and symm_r in terms of\n      symm_l). This is needed when broadcasting during packing because the\n      alternative--supporting the broadcast of B while also allowing matrix\n      B to be Hermitian/symmetric--would be an absolute mess.\n    - Support alignment factors for packed blocks of A, B, and C separately\n      (as well as for general-purpose buffers). In addition, we support\n      byte offsets from those alignment values (which is different from\n      aligning by align+offset bytes to begin with). The default alignment\n      values are BLIS_PAGE_SIZE in all four cases, with the offset values\n      defaulting to zero.\n    - Pass pack_t schema into bli_?packm_cxk() so that it can be then passed\n      into the packm kernel, where it will be needed by packm kernels that\n      perform broadcasts of B, since the idea is that we *only* want to\n      broadcast when packing micropanels of B and not A.\n    - Added definition for variadic bli_cntx_set_l3_vir_ukrs(), which can be\n      used to set custom virtual level-3 microkernels in the cntx_t, which\n      would typically be done in the bli_cntx_init_*() function defined in\n      the subconfiguration of interest.\n    - Added a \"broadcast B\" kernel function for use with NP/NR = 12/6,\n      defined in in ref_kernels/1m/bli_packm_cxk_bb_ref.c.\n    - Added a gemm, gemmtrsm, and trsm \"broadcast B\" reference kernels\n      defined in ref_kernels/3/bb. (These kernels have been tested with\n      double real with NP/NR = 12/6.)\n    - Added #ifndef ... #endif guards around several macro constants defined\n      in frame/include/bli_kernel_macro_defs.h.\n    - Defined a few \"broadcast B\" static functions in\n      frame/include/level0/bb for use by \"broadcast B\"-style packm reference\n      kernels. For now, only the real domain kernels are tested and fully\n      defined.\n    - Output the alignment and offset values for packed blocks of A and B\n      in the testsuite's \"BLIS configuration info\" section.\n    - Comment updates to various files.\n    - Bumped so_version to 3.0.0.\n\ncommit fd9bf497cd4ff73ccdfc030ba037b3cb2f1c2fad\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 17 15:45:24 2019 -0500\n\n    CREDITS file update.\n\ncommit 6c8f2d1486ce31ad3c2083e5c2035acfd4409a43\nAuthor: ShmuelLevine <shmuel.levine@gmail.com>\nDate:   Tue Sep 17 16:43:46 2019 -0400\n\n    Fix description for function bli_*pxby2v (#340)\n    \n    Fix typo in BLISTypedAPI.md for bli_?axpy2v() description.\n\ncommit b5679c1520f8ae7637b3cc2313133461f62398dc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Sep 17 14:00:37 2019 -0500\n\n    Inserted Multithreading links into BuildSystem.md.\n    \n    Details:\n    - Inserted brief disclaimers about default disabled multithreading\n      and default single-threadedness to BuildSystem.md along with links to\n      the Multithreading.md document. Thanks to Jeff Diamond for suggesting\n      these additions.\n    - Trivial reword of sentence regarding automatically-detected\n      architectures.\n\ncommit f4f5170f8482c94132832eb3033bc8796da5420b\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Wed Sep 11 07:34:48 2019 -0500\n\n    Update README.md (#338)\n\ncommit 1cfe8e2562e5e50769468382626ce36b734741c1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Sep 5 16:08:30 2019 -0500\n\n    Reimplemented bli_cpuid_query() for ARM.\n    \n    Details:\n    - Rewrote bli_cpuid_query() for ARM architectures to use stdio-based\n      functions such as fopen() and fgets() instead of popen(). The new code\n      does more or less the same thing as before--searches /proc/cpuinfo for\n      various strings, which are then parsed in order to determine the\n      model, part number, and features. Thanks to Dave Love for suggesting\n      this change in issue #335.\n\ncommit 7c7819145740e96929466a248d6375d40e397e19\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Fri Aug 30 16:52:09 2019 -0500\n\n    Always use sqsumv to compute normfv. (#334)\n    \n    * Always use sqsumv to compute normfv on MacOS.\n    \n    * Unconditionally disable the \"dot trick\" in normfv.\n    \n    * Added explanatory comment to normfv definition.\n    \n    Details:\n    - Added a comment above the unconditional disabling of the dotv-based\n      implementation to normfv. Thanks to Roman Yurchak, Devin Matthews,\n      and Isuru Fernando in helping with this improvement.\n    - CREDITS file update.\n\ncommit 80e6c10b72d50863b4b64d79f784df7befedfcd1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 29 12:12:08 2019 -0500\n\n    Added reproduction section to Performance docs.\n    \n    Details:\n    - Added section titled \"Reproduction\" to both Performance.md and\n      PerformanceSmall.md that briefly nudges the motivated reader in the\n      right direction if he/she wishes to run the same performance\n      benchmarks used to produce the graphs shown in those documents.\n      Thanks to Dave Love for making this suggestion.\n\ncommit 14cb426414856024b9ae0f84ac21efcc1d329467\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Aug 28 17:04:33 2019 -0500\n\n    Updated OpenBLAS, Eigen sup results.\n    \n    Details:\n    - Updated the results shown in docs/PerformanceSmall.md for OpenBLAS and\n      Eigen.\n\ncommit b02e0aae8ce2705e91023b98ed416cd05430a78e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Aug 27 14:37:46 2019 -0500\n\n    Updated test drivers to iterate backwards.\n    \n    Details:\n    - Updated test driver source in test, test/3, test/1m4m, and\n      test/mixeddt to iterate through the problem space backwards. This\n      can help avoid certain situations where the CPU frequency does not\n      immediately throttle up to its maximum. Thanks to Robert van de\n      Geijn for recommending this fix (originally made to test/sup drivers\n      in 57e422a).\n    - Applied off-by-one matlab output bugfix from b6017e5 to test drivers\n      in test, test/3, test/1m4m, and test/mixeddt directories.\n\ncommit b6017e53f4b26c99b14cdaa408351f11322b1e80\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Aug 27 14:18:14 2019 -0500\n\n    Bugfix of output text + tweaks to test/sup driver.\n    \n    Details:\n    - Fixed an off-by-one bug in the output of matlab row indices in\n      test/sup/test_gemm.c that only manifested when the problem size\n      increment was equal to 1.\n    - Disabled the building of rrc, rcr, rcc, crr, crc, and ccr storage\n      combinations for blissup drivers in test/sup. This helps make the\n      building of drivers complete sooner.\n    - Trivial changes to test/sup/runme.sh.\n\ncommit 138d403b6bb15e687a3fe26d3d967b8ccd1ed97b\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Mon Aug 26 18:11:27 2019 -0500\n\n    Use -funsafe-math-optimizations and -ffp-contract=fast for all reference kernels when using gcc or clang. (#331)\n\ncommit d5a05a15a7fcc38fb2519031dcc62de8ea4a530c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Aug 26 16:54:31 2019 -0500\n\n    Cropped whitespace from new sup graphs.\n    \n    Details:\n    - Previously forgot crop whitespace from the new .png graphs\n      added/updated in docs/graphs/sup.\n\ncommit a6c80171a353db709e43f9e6e7a3da87ce4d17ed\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Aug 26 16:51:31 2019 -0500\n\n    Fixed contents links in docs/PerformanceSmall.md.\n    \n    Details:\n    - Corrected links in contents section of docs/PerformanceSmall.md,\n      which were erroneously directing readers to the corresponding\n      sections of docs/Performance.md.\n\ncommit 40781774df56a912144ef19cc191ed626a89f0de\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Aug 26 16:47:37 2019 -0500\n\n    Updated sup performance graphs with libxsmm.\n    \n    Details:\n    - Added libxsmm to column-stored sup graphs presented in\n      docs/PerformanceSmall.md.\n    - Updated sup results for BLASFEO.\n    - Added sup results for Lonestar5 (Haswell).\n    - Addresses issue #326.\n\ncommit bfddf671328e7e372ac7228f72ff2d9d8e03ae18\nAuthor: figual <figual@ucm.es>\nDate:   Mon Aug 26 12:01:33 2019 +0200\n\n    Fixed context registration for Cortex A53 (#329).\n\ncommit 4a0a6e89c568246d14de4cc30e3ff35aac23d774\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Aug 24 15:25:16 2019 -0500\n\n    Changed test/sup alpha to 1; test libxsmm+netlib.\n    \n    Details:\n    - Changed the value of alpha to 1.0 in test/sup/test_gemm.c. This is\n      needed because libxsmm currently only optimizes gemm operations where\n      alpha is unit (and beta is unit or zero).\n    - Adjusted the test/sup/Makefile to test libxsmm with netlib BLAS as its\n      fallback library. This is the library that will be called the\n      problem dimensions are deemed too large, or any other criteria for\n      optimization are not met. (This was done not because it is realistic,\n      but rather so that it would be very clear when libxsmm ceased handling\n      gemm calls internally when the data are graphed.)\n\ncommit 7aa52b57832176c5c13a48e30a282e09ecdabf73\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Aug 23 16:12:50 2019 -0500\n\n    Use libxsmm API in test/sup; add missing -ldl.\n    \n    Details:\n    - Switch the driver source in test/sup so that libxsmm_?gemm() is called\n      instead of ?gemm_() when compiling for / linking against libxsmm.\n      libxsmm's documentation isn't clear on whether it is even *trying* to\n      provide BLAS API compatibility, and I got tired of trying to figure it\n      out.\n    - Added missing -ldl in LDFLAGS when linking against libxsmm.\n\ncommit 57e422aa168bee7416965265c93fcd4934cd7041\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Aug 23 14:17:52 2019 -0500\n\n    Added libxsmm support to test/sup drivers.\n    \n    Details:\n    - Modified test/sup/Makefile to build drivers that test the performance\n      of skinny/small problems via libxsmm.\n    - Modified test/sup/runme.sh to run aforementioned drivers.\n    - Modified test/sup/test_gemm.c so that problem sizes are tested in\n      reverse order (from largest to smallest). This can help avoid certain\n      situations where the CPU frequency does not immediately throttle up\n      to its maximum. Thanks to Robert van de Geijn for recommending this\n      fix.\n\ncommit 661681fe33978acce370255815c76348f83632bc\nMerge: 2f387e32 ef0a1a0f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 22 14:29:50 2019 -0500\n\n    Merge branch 'master' of github.com:flame/blis\n\ncommit 2f387e32ef5f9a17bafb5076dc9f66c38b52b32d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Aug 22 14:27:30 2019 -0500\n\n    Added Eigen -march=native hack to perf docs.\n    \n    Details:\n    - Spell out the hack given to me by Sameer Agarwal in order to get Eigen\n      to build with -march=native (which is critically important for Eigen)\n      in docs/Performance.md and docs/PerformanceSmall.md.\n\ncommit ef0a1a0faf683fe205f85308a54a77ffd68a9a6c\nAuthor: Devin Matthews <damatthews@smu.edu>\nDate:   Wed Aug 21 17:40:24 2019 -0500\n\n    Update do_sde.sh (#330)\n    \n    * Update do_sde.sh\n    \n    Automatically accept SDE license and download directly from Intel\n    \n    * Update .travis.yml\n    \n    [ci skip]\n    \n    * Update .travis.yml\n    \n    Enable SDE testing for PRs.\n\ncommit 0cd383d53a8c4a6871892a0395591ef5630d4ac0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Aug 21 13:39:05 2019 -0500\n\n    Corrected variable type and comment update.\n    \n    Details:\n    - Forgot to save all changes from bli_gemmtrsm4m1_ref.c before commit\n      in 8122f59. Fixed type mismatch and referenced github issue in\n      comment.\n\ncommit 8122f59745db780987da6aa1e851e9e76aa985e0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Aug 21 13:22:12 2019 -0500\n\n    Pacify 'restrict' warning in gemmtrsm4m1 ref ukr.\n    \n    Details:\n    - Previously, some versions of gcc would complain that the same\n      pointer, one_r, is being passed in for both alpha and beta in the\n      fourth call to the real gemm ukernel in bli_gemmtrsm4m1_ref.c. This\n      is understandable since the compiler knows that the real gemm ukernel\n      qualifies all of its floating-point arguments (including alpha and\n      beta) with restrict. A small hack has been inserted into the file\n      that defines a new variable to store the value 1.0, which is now used\n      in lieu of one_r for beta in the fourth call to the real gemm ukernel,\n      which should pacify the compiler now. Thanks to Dave Love for\n      reporting this issue (#328) and for Devin Matthews for offering his\n      'restrict' expertise.\n\ncommit e8c6281f139bdfc9bd68c3b36e5e89059b0ead2e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Aug 21 12:38:53 2019 -0500\n\n    Add -march support for specific gcc version ranges.\n    \n    Details:\n    - Added logic to configure that checks the version of the compiler\n      against known version ranges that could cause problems later in the\n      build process. For example, versions of gcc older than 4.9.0 use\n      different -march labels than version 4.9.0 or later\n      ('-march=corei7-avx' vs '-march=sandybridge', respectively).\n      Similarly, before 6.1, compilation on Zen was possible, but you\n      need to start with -march=bdver4 and then disable instruction sets\n      that were discarded during the transition from Excavator to Zen. So\n      now, configure substitutes 'yes'/'no' values into anchors in\n      config.mk.in, which sets various make variables (e.g. GCC_OT_4_9_0),\n      which can be accessed and branched upon by the various\n      configurations' make_defs.mk files when setting their compiler flags.\n    - Updated config/haswell/make_defs.mk to branch on GCC_OT_4_9_0.\n    - Updated config/sandybridge/make_defs.mk to branch on GCC_OT_4_9_0.\n    - Updated config/zen/make_defs.mk to branch on GCC_OT_6_1_0.\n\ncommit e6ac4ebcb6e6a372820e7f509c0af3342966b84a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Aug 20 13:49:47 2019 -0500\n\n    Added page size, source location to perf docs.\n    \n    Details:\n    - Added the page size, as returned via 'getconf -a | grep PAGE_SIZE',\n      and the location of the performance drivers to docs/Performance.md\n      (test/3) and docs/PerformanceSmall.md (test/sup). Thanks to Dave\n      Love for suggesting these additions in #325.\n\ncommit fdce1a5648d69034fab39943100289323011c36f\nAuthor: Meghana <Meghana.Vankadari@amd.com>\nDate:   Wed Jul 24 15:04:41 2019 +0530\n\n    changed gcc version check condition from 'ifeq' to 'if greater or equal'\n    \n    Change-Id: Ie4c461867829bcc113210791bbefb9517e52c226\n\ncommit c9486e0c4f82cd9f58f5ceb71c0df039e9970a20\nAuthor: Meghana <Meghana.Vankadari@amd.com>\nDate:   Wed Jul 24 09:45:17 2019 +0530\n\n    code to detect version of gcc and set flags accordingly for zen2\n    \n    Change-Id: I29b0311d0000dee1a2533ee29941acf53f9e9f34\n\ncommit 54afe3dfe6828a1aff65baabbf14c98d92e50692\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jul 23 16:54:28 2019 -0500\n\n    Added \"Education and Learning\" ToC entry to README.\n\ncommit 9f53b1ce7ac702e84e71801fe96986f6aa16040e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jul 23 16:50:35 2019 -0500\n\n    Added \"Education and Learning\" section to README.\n    \n    Details:\n    - Added a short section after the Intro of the README.md file titled\n      \"Education and Learning\" that directs interested readers to the\n      \"LAFF-On Programming for High-Performance\" massive open online course\n      (MOOC) hosted via edX.\n\ncommit deda4ca8a094ee18d7c7c45e040e8ef180f33a48\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jul 22 13:59:05 2019 -0500\n\n    Added test/1m4m driver directory.\n    \n    Details:\n    - Added a new standalone test driver directory named '1m4m' that can\n      build and run performance experiments for BLIS 1m, 4m1a, assembly,\n      OpenBLAS, and the vendor library (MKL). This new driver directory\n      was used to regenerate performance results for the 1m paper.\n    - Added alternate (commented-out) cache blocksizes to\n      config/haswell/bli_cntx_init_haswell.c. These blocksizes tend to\n      work well on an a 12-core Intel Xeon E5-2650 v3.\n\ncommit dcc0ce12fde4c6dca2b4764a1922a2ab19725867\nAuthor: Meghana <Meghana.Vankadari@amd.com>\nDate:   Mon Jul 22 17:12:01 2019 +0530\n\n    Added a global Makefile for AMD architectures in config/zen folder\n    This Makefile(amd_config.mk) has all the flags that are common to EPYC series\n    \n    Change-Id: Ic02c60a8293ccdd37f0f292e631acd198e6895de\n\ncommit af17bca26a8bd3dcbee8ca81c18d7b25de09c483\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 19 14:46:23 2019 -0500\n\n    Updated haswell MC cache blocksizes.\n    \n    Details:\n    - Updated the default MC cache blocksizes used by the haswell subconfig\n      for both row-preferential (the default) and column-preferential\n      microkernels.\n\ncommit b5e9bce4dde5bf014dd9771ae741048e1f6c7748\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jul 19 14:42:37 2019 -0500\n\n    Updated -march flags for sandybridge, haswell.\n    \n    Details:\n    - Updated the '-march=corei7-avx' flag in the sandybridge subconfig\n      to '-march=sandybridge' and the '-march=core-avx2' flag in the\n      haswell subconfig to '-march=haswell'. The older flags were used\n      by older versions of gcc and should have been updated to the newer\n      forms a long time ago. (The older flags were clearly working, even\n      though they are no longer documented in the gcc man page.)\n\ncommit c22b9dba5859a9fc94c8431eccc9e4eb9be02be1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jul 16 13:14:47 2019 -0500\n\n    More updates to comments in testsuite modules.\n    \n    Details:\n    - Updated most comments in testsuite modules that describe how the\n      correctness test is performed so that it is clear whether the vector\n      (normfv) or matrix (normfm) form of Frobenius norm is used.\n\ncommit c4cc6fa702f444a05963db01db51bc7d6669e979\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jul 16 13:00:35 2019 -0500\n\n    New cntx_t blksz \"set\" functions + misc tweaks.\n    \n    Details:\n    - Defined two new static functions in bli_cntx.h:\n        bli_cntx_set_blksz_def_dt()\n        bli_cntx_set_blksz_max_dt()\n      which developers may find convenient when experimenting with different\n      values of cache blocksizes.\n    - Updated one- and two-socket multithreaded problem size range and\n      increment values in test/3/Makefile.\n    - Changed default to column storage in test/3/test_gemm.c.\n    - Fixed typo in comment in testsuite/src/test_subm.c.\n\ncommit b84cee29f42855dc1f263e42b83b1a46ac8def87\nMerge: 1f80858a c7dd6e6c\nAuthor: Meghana Vankadari <Meghana.Vankadari@amd.com>\nDate:   Mon Jul 8 02:03:07 2019 -0400\n\n    Merge \"Added compiler flags for vanilla clang\" into amd-staging-rome2.0\n\ncommit 1f80858abf5ca220b2998fbe6f9b06c32d3864c3\nAuthor: kdevraje <kiran.Devrajegowda@amd.com>\nDate:   Fri Jul 5 16:05:11 2019 +0530\n\n     This checkin solves the dgemm performance issue jira ticket CPUPL 458, as #else was missed during integration, it was always following else path to get the block sizes\n    \n    Change-Id: I0084b5856c2513ab1066c08c15b5086db6532717\n\ncommit c7dd6e6cd2f910cbefcdc1e04a5adeb919a23de0\nAuthor: Meghana <meghana.vankadari@amd.com>\nDate:   Thu Jul 4 09:32:51 2019 +0530\n\n    Added compiler flags for vanilla clang\n    \n    Change-Id: I13c00b4c0d65bbda4c929848fd48b0ab611952ab\n\ncommit 2acd49b76457635625a01e31c2abc8902b23cf51\nAuthor: Meghana <meghana.vankadari@amd.com>\nDate:   Mon Jul 1 15:42:38 2019 +0530\n\n    fix for test failures using AOCC 2.0\n    \n    Change-Id: If44eaccc64bbe96bbbe1d32279b1b5773aba08d1\n\ncommit ceee2f973ebe115beca55ca77f9e3ce36b14c28a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 24 17:47:40 2019 -0500\n\n    Fixed thrinfo_t printing bug for small problems.\n    \n    Details:\n    - Fixed a bug in bli_l3_thrinfo_print_gemm_paths() and\n      bli_l3_thrinfo_print_trsm_paths(), defined in bli_l3_thrinfo.c,\n      whereby subnodes of the thrinfo_t tree are \"dereferenced\" near the\n      beginning of the functions, which may lead to segfaults in certain\n      situations where the thread tree was not fully formed because the\n      matrix problem was too small for the level of parallelism specified.\n      (That is, too small because some problems were assigned no work due\n      to the smallest units in the m and n dimensions being defined by the\n      register blocksizes mr and nr.) The fix requires several nested levels\n      of if statements, and this is one of those few instances where use of\n      goto statements results in (mostly) prettier code, especially in the\n      case of _gemm_paths(). And while it wasn't necessary, I ported this\n      goto usage to the loop body that prints the thrinfo_t work_id and\n      comm_id values for each thread. Thanks to Nicholai Tukanov for helping\n      to find this bug.\n\ncommit cac127182dd88ed0394ad81e6b91b897198e168a\nMerge: 565fa385 3a45ecb1\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Mon Jun 24 13:01:27 2019 +0530\n\n    Merge branch 'amd-staging-rome2.0' of ssh://git.amd.com:29418/cpulibraries/er/blis\n    with public repo commit id 565fa3853b381051ac92cff764625909d105644d.\n    \n    Change-Id: I68b9824b110cf14df248217a24a6191b3df79d42\n\ncommit c152109e9a3b1cd74760e8a3215a676d25c18d2e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jun 19 13:23:24 2019 -0500\n\n    Updated BLASFEO results in PerformanceSmall.md.\n    \n    Details:\n    - Updated the BLASFEO performance graphs shown in PerformanceSmall.md\n      using a new commit of BLASFEO (2c9f312); updated PerformanceSmall.md\n      accordingly.\n    - Updated test/sup/octave/plot_l3sup_perf.m so that the .m files\n      containing the mpnpkp results do not need to be preprocessed in order\n      to plot half the problem size range (ie: up to 400 instead of the\n      800 range of the other shape cases).\n    - Trivial updates to runme.m.\n\ncommit 4d19c98110691d33ecef09d7e1b97bd1ccf4c420\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Jun 8 11:02:03 2019 -0500\n\n    Trivial change to MixedDatatypes.md link text.\n\ncommit 24965beabe83e19acf62008366097a7f198d4841\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Jun 8 11:00:22 2019 -0500\n\n    Fixed typo in README.md's MixedDatatypes.md link.\n\ncommit 50dc5d95760f41c5117c46f754245edc642b2179\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jun 7 13:10:16 2019 -0500\n\n    Adjust -fopenmp-simd for icc's preferred syntax.\n    \n    Details:\n    - Use -qopenmp-simd instead of -fopenmp-simd when compiling with Intel\n      icc. Recall that this option is used for SIMD auto-vectorization in\n      reference kernels only. Support for the -f option has been completely\n      deprecated and removed in newer versions of icc in favor of -q. Thanks\n      to Victor Eijkhout for reporting this issue and suggesting the fix.\n\ncommit ad937db9507786874c801b41a4992aef42d924a1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jun 7 11:34:08 2019 -0500\n\n    Added missing #include \"bli_family_thunderx2.h\".\n    \n    Details:\n    - Added a cpp-conditional directive block to bli_arch_config.h that\n      #includes \"bli_family_thunderx2.h\". The code has been missing since\n      adf5c17f. However, this never manifested as an error because the file\n      is virtually empty and not needed for thunderx2 (or most subconfigs).\n      Thanks to Jeff Diamond for helping to spot this.\n\ncommit ce671917b2bc24895289247feef46f6fdd5020e7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jun 6 14:17:21 2019 -0500\n\n    Fixed formatting/typo in docs/PerformanceSmall.md.\n\ncommit 86c33a4eb284e2cf3282a1809be377785cdb3703\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jun 5 11:43:55 2019 -0500\n\n    Tweaked language in README.md related to sup/AMD.\n\ncommit cbaa22e1ca368d36a8510f2b4ecd6f1523d1e1f3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jun 4 16:06:58 2019 -0500\n\n    Added BLASFEO results to docs/PerformanceSmall.md.\n    \n    Details:\n    - Updated the graphs linked in PerformanceSmall.md with BLASFEO results,\n      and added documenting language accordingly.\n    - Updated scripts in test/sup/octave to plot BLASFEO data.\n    - Minor tweak to language re: how OpenBLAS was configured for\n      docs/Performance.md.\n\ncommit 763fa39c3088c0e2c0155675a3ca868a58bffb30\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jun 4 14:46:45 2019 -0500\n\n    Minor tweaks to test/sup.\n    \n    Details:\n    - Changed starting problem and increment from 16 to 4.\n    - Added 'lll' (square problems) to list of problem size shapes to\n      compile and run with.\n    - Define BLASFEO location and added BLASFEO-related definitions.\n\ncommit 5e1e696003c9151b1879b910a1957b7bdd7b0deb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 3 18:37:20 2019 -0500\n\n    CHANGELOG update (0.6.0)\n\ncommit 18c876b989fd0dcaa27becd14e4f16bdac7e89b3 (tag: 0.6.0)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 3 18:37:19 2019 -0500\n\n    Version file update (0.6.0)\n\ncommit 0f1b3bf49eb593ca7bb08b68a7209f7cd550f912\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 3 18:35:19 2019 -0500\n\n    ReleaseNotes.md update in advance of next version.\n    \n    Details:\n    - Updated ReleaseNotes.md in preparation for next version.\n    - CREDITS file update.\n\ncommit 27da2e8400d900855da0d834b5417d7e83f21de1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 3 17:14:56 2019 -0500\n\n    Minor edits to docs/PerformanceSmall.md.\n    \n    Details:\n    - Added performance analysis to \"Comments\" section of both Kaby Lake and\n      Epyc sections.\n    - Added emphasis to certain passages.\n\ncommit 09ba05c6f87efbaadf085497dc137845f16ee9c5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jun 3 16:53:19 2019 -0500\n\n    Added sup performance graphs/document to 'docs'.\n    \n    Details:\n    - Added a new markdown document, docs/PerformanceSmall.md, which\n      publishes new performance graphs for Kaby Lake and Epyc showcasing\n      the new BLIS sup (small/skinny/unpacked) framework logic and kernels.\n      For now, only single-threaded dgemm performance is shown.\n    - Reorganized graphs in docs/graphs into docs/graphs/large, with new\n      graphs being placed in docs/graphs/sup.\n    - Updates to scripts in test/sup/octave, mostly to allow decent output\n      in both GNU octave and Matlab.\n    - Updated README.md to mention and refer to the new PerformanceSmall.md\n      document.\n\ncommit 6bf449cc6941734748034de0e9af22b75f1d6ba1\nMerge: abd8a9fa a4e8801d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri May 31 17:42:40 2019 -0500\n\n    Merge branch 'amd'\n\ncommit a4e8801d08d81fa42ebea6a05a990de8dcedc803\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri May 31 17:30:51 2019 -0500\n\n    Increased MT sup threshold for double to 201.\n    \n    Details:\n    - Fine-tuned the double-precision real MT threshold (which controls\n      whether the sup implementation kicks for smaller m dimension values)\n      from 180 to 201 for haswell and 180 to 256 for zen.\n    - Updated octave scripts in test/sup/octave to include a seventh column\n      to display performance for m = n = k.\n\ncommit 3a45ecb15456249c30ccccd60e42152f355615c1\nMerge: 3f867c96 b69fb0b7\nAuthor: Kiran Devrajegowda <Kiran.Devrajegowda@amd.com>\nDate:   Fri May 31 06:47:02 2019 -0400\n\n    Merge \"Added back BLIS_ENABLE_ZEN_BLOCK_SIZES macro to zen configuration, this is same as release 1.3. This was added before to improve DGEMM Multithreaded scalability on Naples for when number of threads is greater than 16. By mistake this got deleted in many changes done for 2.0 release, now we are adding this change back., in bli_gemm_front.c - code cleanup\" into amd-staging-rome2.0\n\ncommit b69fb0b74a4756168de270fc9b18f7cf7aa57f17\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Fri May 31 15:14:22 2019 +0530\n\n    Added back BLIS_ENABLE_ZEN_BLOCK_SIZES macro to zen configuration, this is same as release 1.3. This was added before to improve DGEMM Multithreaded scalability on Naples for when number of threads is greater than 16. By mistake this got deleted in many changes done for 2.0 release, now we are adding this change back., in bli_gemm_front.c - code cleanup\n    \n    Change-Id: I9f5d8225254676a99c6f2b09a0825e545206d0fc\n\ncommit 3f867c96caea3bbbbeeff1995d90f6cf8c9895fb\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Fri May 31 12:22:44 2019 +0530\n\n     When running HPL with pure MPI without DGEMM Threading (Single Threaded BLIS ), making this macro 1 gives best performance.wq\n    \n    Change-Id: I24fd0bf99216f315e49f1c74c44c3feaffd7078d\n\ncommit abd8a9fa7df4569aa2711964c19888b8e248901f (origin/pfhp)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue May 28 12:49:44 2019 -0500\n\n    Inadvertantly hidden xerbla_() in blastest (#313).\n    \n    Details:\n    - Attempted a fix to issue #313, which reports that when building only\n      a shared library (ie: static library build is disabled), running the\n      BLAS test drivers can fail because those drivers provide their own\n      local version of xerbla_() as a clever (albeit still rather hackish)\n      way of checking the error codes that result from the individual tests.\n      This local xerbla_() function is never found at link-time because the\n      BLAS test drivers' Makefile imports BLIS compilation flags via the\n      get-user-cflags-for() function, which currently conveys the\n      -fvisibility=hidden flag, which hides symbols unless they are\n      explicitly annotated for export. The -fvisibility=hidden flag was\n      only ever intended for use when building BLIS (not for applications),\n      and so the attempted solution here is to omit the symbol export\n      flag(s) from get-user-cflags-for() by storing the symbol export\n      flag(s) to a new BULID_SYMFLAGS variable instead of appending it\n      to the subconfigurations' CMISCFLAGS variable (which is returned by\n      every get-*-cflags-for() function). Thanks to M. Zhou for reporting\n      this issue and also to Isuru Fernando for suggesting the fix.\n    - Renamed BUILD_FLAGS to BUILD_CPPFLAGS to harmonize with the newly\n      created BUILD_SYMFLAGS.\n    - Fixed typo in entry for --export-shared flag in 'configure --help'\n      text.\n\ncommit 13806ba3b01ca0dd341f4720fb930f97e46710b0\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Mon May 27 16:24:43 2019 +0530\n\n     This check in has changes w.r.t Copyright information, which is changed to (start year) - 2019\n    \n    Change-Id: Ide3c8f7172210b8d3538d3c36e88634ab1ba9041\n\ncommit ee123f535872510f77100d3d55a43d4ca56047d5\nAuthor: Meghana <meghana.vankadari@amd.com>\nDate:   Mon May 27 15:36:44 2019 +0530\n\n    Defined small matrix thresholds for TRSM for various cases for NAPLES and ROME\n    Updated copyright information for kernels/zen/bli_trsm_small.c file\n    Removed separate kernels for zen2 architecture\n    Instead added threshold conditions in zen kernels both for ROME and NAPLES\n    \n    Change-Id: Ifd715731741d649b6ad16b123a86dbd6665d97e5\n\ncommit 9d93a4caa21402d3a90aac45d7a1603736c9fd63\nAuthor: prangana <pradeep.rao@amd.com>\nDate:   Fri May 24 17:59:13 2019 +0530\n\n    update version 2.0\n\ncommit 755730608d923538273a90c48bfdf77571f86519\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 23 17:34:36 2019 -0500\n\n    Minor rewording of language around mt env. vars.\n\ncommit ba31abe73c97c16c78fffc59a215761b8d9fd1f6\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 23 14:59:53 2019 -0500\n\n    Added BLIS theading info to Performance.md.\n    \n    Details:\n    - Documented the BLIS environment variables that were set\n      (e.g. BLIS_JC_NT, BLIS_IC_NT, BLIS_JR_NT) for each machine and\n      threading configuration in order to achieve the parallelism reported\n      on in docs/Performance.md.\n\ncommit cb788ffc89cac03b44803620412a5e83450ca949\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 23 13:00:53 2019 -0500\n\n    Increased MT sup threshold for double to 180.\n    \n    Details:\n    - Increased the double-precision real MT threshold (which controls\n      whether the sup implementation kicks for smaller m dimension values)\n      from 80 to 180, and this change was made for both haswell and zen\n      subconfigurations. This is less about the m dimension in particular\n      and more about facilitating a smoother performance transition when\n      m = n = k.\n\ncommit 057f5f3d211e7513f457ee6ca6c9555d00ad1e57\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu May 23 12:51:17 2019 -0500\n\n    Minor build system housekeeping.\n    \n    Details:\n    - Commented out redundant setting of LIBBLIS_LINK within all driver-\n      level Makefiles. This variable is already set within common.mk, and\n      so the only time it should be overridden is if the user wants to link\n      to a different copy of libblis.\n    - Very minor changes to build/gen-make-frags/gen-make-frag.sh.\n    - Whitespace and inconsequential quoting change to configure.\n    - Moved top-level 'windows' directory into a new 'attic' directory.\n\ncommit e05171118c377f356f89c4daf8a0d5ddc5a4e4f7\nAuthor: Meghana <meghana.vankadari@amd.com>\nDate:   Thu May 23 16:15:27 2019 +0530\n\n    Implemented TRSM for small matrices for cases where A is on the right\n    \n    Added separate kernels for zen and zen2\n    \n    Change-Id: I6318ddc250cf82516c1aa4732718a35eae0c9134\n\ncommit 02920f5c480c42706b487e37b5ecc96c3555b851\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Thu May 23 15:29:59 2019 +0530\n\n    make checkblis fails for matrix dimension check at the begining hence reverting it\n    \n    Change-Id: Ibd2ee8c2d4914598b72003fbfc5845be9c9c1e87\n\ncommit 84215022f29fb3bfedd254d041635308d177e6c0\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Thu May 23 11:08:41 2019 +0530\n\n     Adding threshold condition to dgemm small matrix kernels, defining the constants in zen2 configuration\n    \n    Change-Id: I53a58b5d734925a6fcb8d8bea5a02ddb8971fcd5\n\ncommit a3554eb1dcc1b5b94d81c60761b2f01c3d827ffa\nMerge: ea082f83 17b878b6\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Thu May 23 11:51:07 2019 +0530\n\n    Merge branch 'amd-staging-rome2.0' of ssh://git.amd.com:29418/cpulibraries/er/blis to configure zen2\n    \n    Change-Id: I97e17bca9716b80b862925f97bb513c07b4b0cae\n\ncommit ea082f839071dd9ec555062dc3851c31d12f00e4\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Thu May 23 10:38:29 2019 +0530\n\n    adding empty zen2 directory with .gitignore file\n    \n    Change-Id: Ifa37cf54b2578aa19ad335372b44bca17043fe4b\n\ncommit b80bd5bcb2be8551a9a21fafc8e6c8b6336c99b5\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Tue May 21 15:11:47 2019 +0530\n\n    config/zen/bli_cntx_init_zen.c: removed BLIS_ENBLE_ZEN_BLOCK_SIZES macro. We have different configurations for both zen and zen2\n    config/zen/bli_family_zen.h: deleted macro BLIS_ENBLE_ZEN_BLOCK_SIZES\n    config/zen/make_defs.mk: removed compiler flag -mno-avx256-split-unaligned-store\n    frame/base/bli_cpuid.c: ROME family is 17H but model # is from 0x30H.\n    test/test_gemm.c - commented out #define FILE_IN_OUT (some compilation error when BLIS is configured as amd64)\n    Now we can use single configuration has ./configure amd64 - this will work both for ROME & Naples\n    \n    Change-Id: I91b4fc35380f8a35b4f4c345da040c6b5910b4a2\n\ncommit a042db011df9a1c3e7c7ac546541f4746b176ea5\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Mon May 20 14:17:32 2019 +0530\n\n    Modified make_defs.mk for zen2 to get compiled by gcc version less than gcc9.0\n    \n    Change-Id: I8fcac30538ee39534c296932639053b47b9a2d43\n\ncommit a23f92594cf3d530e5794307fe97afc877d853b7\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Mon May 20 10:48:06 2019 +0530\n\n    config_registry: New AMD zen2 architecture configuration added.\n      frame/base/bli_arch.c: #ifdef BLIS_FAMILY_ZEN2 id = BLIS_ARCH_ZEN2; #endif added. zen2 is added in config_name[BLIS_NUM_ARCHS]\n      frame/base/bli_cpuid.c : #ifdef BLIS_CONFIG_ZEN2 if ( bli_cpuid_is_zen2( family, model, features ) ) return BLIS_ARCH_ZEN2; #endif, defined new function bool bli_cpuid_is_zen2(...).\n      frame/base/bli_cpuid.h : declared bli_cpuid_is_zen2(..).\n      frame/base/bli_gks.c : #ifdef BLIS_CONFIG_ZEN2 bli_gks_register_cntx(BLIS_ARCH_ZEN2, bli_cntx_init_zen2, bli_cntx_init_zen2_ref, bli_cntx_init_zen2_ind); #endif\n      frame/include/bli_arch_config.h : #ifdef BLIS_CONFIG_ZEN2 CNTX_INIT_PROTS(zen2) #endif #ifdef BLIS_FAMILY_ZEN2 #include \"bli_family_zen2.h\" #endif\n      frame/include/bli_type_defs.h : added BLIS_ARCH_ZEN2 in arch_t enum. BLIS_NUM_ARCHS 20\n    \n    Change-Id: I2a2d9b7266673e78a4f8543b1bfb5425b0aa7866\n\ncommit 17b878b66d917d50b6fe23721d8579e826cb3e8c\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Wed May 22 14:02:53 2019 +0530\n\n    adding license same as in ut-austin-amd-branch\n    \n    Change-Id: I6790768d2bf5d42369d304ef93e34701f95fbaff\n\ncommit df755848b8a271323e007c7a628c64af63deab00\nMerge: ca4b33c0 c72ae27a\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Wed May 22 13:30:07 2019 +0530\n\n    Merge branch 'amd-staging-rome2.0' of ssh://git.amd.com:29418/cpulibraries/er/blis into rome2.0\n    \n    Change-Id: Ie8aad1ab810f0f3c0b90ec67f9dd3dfb8dcc74cc\n\ncommit c72ae27adee4726679ee004d02c972582b5285b4\nAuthor: Nisanth M P <nisanth.padinharepatt@amd.com>\nDate:   Mon Mar 19 12:49:26 2018 +0530\n\n    Re-enabling the small matrix gemm optimization for target zen\n    \n    Change-Id: I13872784586984634d728cd99a00f71c3f904395\n\ncommit ab0818af80f7f683080873f3fa24734b65267df2\nAuthor: sraut <Biplab.Raut@amd.com>\nDate:   Wed Oct 3 15:30:33 2018 +0530\n\n    Review comments incorporated for small TRSM.\n    \n    Change-Id: Ia64b7b2c0375cc501c2cb0be8a1af93111808cd9\n\ncommit 32392cfc72af7f42da817a129748349fb1951346\nAuthor: Jeff Hammond <jeff.r.hammond@intel.com>\nDate:   Tue May 14 15:52:30 2019 -0400\n\n    add info about CXX in configure (#311)\n\ncommit fa7e6b182b8365465ade178b0e4cd344ff6f6460\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed May 1 19:13:00 2019 -0500\n\n    Define _POSIX_C_SOURCE in bli_system.h.\n    \n    Details:\n    - Added\n        #ifndef _POSIX_C_SOURCE\n        #define _POSIX_C_SOURCE 200809L\n        #endif\n      to bli_system.h so that an application that uses BLIS (specifically,\n      an application that #includes blis.h) does not need to remember to\n      #define the macro itself (either on the command line or in the code\n      that includes blis.h) in order to activate things like the pthreads.\n      Thanks to Christos Psarras for reporting this issue and suggesting\n      this fix.\n    - Commented out #include <sys/time.h> in bli_system.h, since I don't\n      think this header is used/needed anymore.\n    - Comment update to function macro for bli_?normiv_unb_var1() in\n      frame/util/bli_util_unb_var1.c.\n\ncommit 3df84f1b5d5e1146bb01bfc466ac20c60a9cc859\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Apr 27 21:27:32 2019 -0500\n\n    Minor bugfixes in sup dgemm implementation.\n    \n    Details:\n    - Fixed an obscure but in the bli_dgemmsup_rv_haswell_asm_5x8n() kernel\n      that only affected the beta == 0, column-storage output case. Thanks\n      to the BLAS test drivers for catching this bug.\n    - Previously, bli_gemmsup_ref_var1n() and _var2m() were returning if\n      k = 0, when the correct action would be to scale by beta (and then\n      return). Thanks to the BLAS test drivers to catching this bug.\n    - Changed the sup threshold behavior such that the sup implementation\n      only kicks in if a matrix dimension is strictly less than (rather than\n      less than or equal to) the threshold in question.\n    - Initialize all thresholds to zero (instead of 10) by default in\n      ref_kernels/bli_cntx_ref.c. This, combined with the above change to\n      threshold testing means that calls to BLIS or BLAS with one or more\n      matrix dimensions of zero will no longer trigger the sup\n      implementation.\n    - Added disabled debugging output to frame/3/bli_l3_sup.c (for future\n      use, perhaps).\n\ncommit ecbdd1c42dcebfecd729fe351e6bb0076aba7d81\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Apr 27 19:38:11 2019 -0500\n\n    Ceased use of BLIS_ENABLE_SUP_MR/NR_EXT macros.\n    \n    Details:\n    - Removed already limited use of the BLIS_ENABLE_SUP_MR_EXT and\n      BLIS_ENABLE_SUP_NR_EXT macros in bli_gemmsup_ref_var1n() and\n      bli_gemmsup_ref_var2m(). Their purpose was merely to avoid a long\n      conditional that would determine whether to allow the last iteration\n      to be merged with the second-to-last iteration. Functionally, the\n      macros were not needed, and they ended up causing problems when\n      building configuration families such as intel64 and x86_64.\n\ncommit aa8a6bec3036a41e1bff2034f8ef6766a704ec49\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Apr 27 18:53:33 2019 -0500\n\n    Fixed typo in --disable-sup-handling macro guard.\n    \n    Details:\n    - Fixed an incorrectly-named macro guard that is intended to allow\n      disabling of the sup framework via the configure option\n      --disable-sup-handling. In this case, the preprocessor macro,\n      BLIS_DISABLE_SUP_HANDLING, was still named by its name from an older\n      uncommitted version of the code (BLIS_DISABLE_SM_HANDLING).\n\ncommit b9c9f03502c78a63cfcc21654b06e9089e2a3822\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Apr 27 18:44:50 2019 -0500\n\n    Implemented gemm on skinny/unpacked matrices.\n    \n    Details:\n    - Implemented a new sub-framework within BLIS to support the management\n      of code and kernels that specifically target matrix problems for which\n      at least one dimension is deemed to be small, which can result in long\n      and skinny matrix operands that are ill-suited for the conventional\n      level-3 implementations in BLIS. The new framework tackles the problem\n      in two ways. First the stripped-down algorithmic loops forgo the\n      packing that is famously performed in the classic code path. That is,\n      the computation is performed by a new family of kernels tailored\n      specifically for operating on the source matrices as-is (unpacked).\n      Second, these new kernels will typically (and in the case of haswell\n      and zen, do in fact) include separate assembly sub-kernels for\n      handling of edge cases, which helps smooth performance when performing\n      problems whose m and n dimension are not naturally multiples of the\n      register blocksizes. In a reference to the sub-framework's purpose of\n      supporting skinny/unpacked level-3 operations, the \"sup\" operation\n      suffix (e.g. gemmsup) is typically used to denote a separate namespace\n      for related code and kernels. NOTE: Since the sup framework does not\n      perform any packing, it targets row- and column-stored matrices A, B,\n      and C. For now, if any matrix has non-unit strides in both dimensions,\n      the problem is computed by the conventional implementation.\n    - Implemented the default sup handler as a front-end to two variants.\n      bli_gemmsup_ref_var2() provides a block-panel variant (in which the\n      2nd loop around the microkernel iterates over n and the 1st loop\n      iterates over m), while bli_gemmsup_ref_var1() provides a panel-block\n      variant (2nd loop over m and 1st loop over n). However, these variants\n      are not used by default and provided for reference only. Instead, the\n      default sup handler calls _var2m() and _var1n(), which are similar\n      to _var2() and _var1(), respectively, except that they defer to the\n      sup kernel itself to iterate over the m and n dimension, respectively.\n      In other words, these variants rely not on microkernels, but on\n      so-called \"millikernels\" that iterate along m and k, or n and k.\n      The benefit of using millikernels is a reduction of function call\n      and related (local integer typecast) overhead as well as the ability\n      for the kernel to know which micropanel (A or B) will change during\n      the next iteration of the 1st loop, which allows it to focus its\n      prefetching on that micropanel. (In _var2m()'s millikernel, the upanel\n      of A changes while the same upanel of B is reused. In _var1n()'s, the\n      upanel of B changes while the upanel of A is reused.)\n    - Added a new configure option, --[en|dis]able-sup-handling, which is\n      enabled by default. However, the default thresholds at which the\n      default sup handler is activated are set to zero for each of the m, n,\n      and k dimensions, which effectively disables the implementation. (The\n      default sup handler only accepts the problem if at least one dimension\n      is smaller than or equal to its corresponding threshold. If all\n      dimensions are larger than their thresholds, the problem is rejected\n      by the sup front-end and control is passed back to the conventional\n      implementation, which proceeds normally.)\n    - Added support to the cntx_t structure to track new fields related to\n      the sup framework, most notably:\n      - sup thresholds: the thresholds at which the sup handler is called.\n      - sup handlers: the address of the function to call to implement\n        the level-3 skinny/unpacked matrix implementation.\n      - sup blocksizes: the register and cache blocksizes used by the sup\n        implementation (which may be the same or different from those used\n        by the conventional packm-based approach).\n      - sup kernels: the kernels that the handler will use in implementing\n        the sup functionality.\n      - sup kernel prefs: the IO preference of the sup kernels, which may\n        differ from the preferences of the conventional gemm microkernels'\n        IO preferences.\n    - Added a bool_t to the rntm_t structure that indicates whether sup\n      handling should be enabled/disabled. This allows per-call control\n      of whether the sup implementation is used, which is useful for test\n      drivers that wish to switch between the conventional and sup codes\n      without having to link to different copies of BLIS. The corresponding\n      accessor functions for this new bool_t are defined in bli_rntm.h.\n    - Implemented several row-preferential gemmsup kernels in a new\n      directory, kernels/haswell/3/sup. These kernels include two general\n      implementation types--'rd' and 'rv'--for the 6x8 base shape, with\n      two specialized millikernels that embed the 1st loop within the kernel\n      itself.\n    - Added ref_kernels/3/bli_gemmsup_ref.c, which provides reference\n      gemmsup microkernels. NOTE: These microkernels, unlike the current\n      crop of conventional (pack-based) microkernels, do not use constant\n      loop bounds. Additionally, their inner loop iterates over the k\n      dimension.\n    - Defined new typedef enums:\n      - stor3_t: captures the effective storage combination of the level-3\n        problem. Valid values are BLIS_RRR, BLIS_RRC, BLIS_RCR, etc. A\n        special value of BLIS_XXX is used to denote an arbitrary combination\n        which, in practice, means that at least one of the operands is\n        stored according to general stride.\n      - threshid_t: captures each of the three dimension thresholds.\n    - Changed bli_adjust_strides() in bli_obj.c so that bli_obj_create()\n      can be passed \"-1, -1\" as a lazy request for row storage. (Note that\n      \"0, 0\" is still accepted as a lazy request for column storage.)\n    - Added support for various instructions to bli_x86_asm_macros.h,\n      including imul, vhaddps/pd, and other instructions related to integer\n      vectors.\n    - Disabled the older small matrix handling code inserted by AMD in\n      bli_gemm_front.c, since the sup framework introduced in this commit\n      is intended to provide a more generalized solution.\n    - Added test/sup directory, which contains standalone performance test\n      drivers, a Makefile, a runme.sh script, and an 'octave' directory\n      containing scripts compatible with GNU Octave. (They also may work\n      with matlab, but if not, they are probably close to working.)\n    - Reinterpret the storage combination string (sc_str) in the various\n      level-3 testsuite modules (e.g. src/test_gemm.c) so that the order\n      of each matrix storage char is \"cab\" rather than \"abc\".\n    - Comment updates in level-3 BLAS API wrappers in frame/compat.\n\ncommit 0d549ceda822833bec192bbf80633599620c15d9\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Sat Apr 27 22:56:02 2019 +0000\n\n    make unix friendly archives on appveyor (#310)\n\ncommit ca4b33c001f9e959c43b95a9a23f9df5adec7adf\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Wed Apr 24 15:02:39 2019 +0530\n\n     Added compiler option (-mno-avx256-split-unaligned-store) in the file config/zen/make_defs.mk to improve performance of intrinsic codes, this flag ensures compiler generates 256-bit stores for the equivalent intrinsics code.\n    \n    Change-Id: I8f8cd81a3604869df18d38bc42097a04f178d324\n\ncommit 945928c650051c04d6900c7f4e9e29cd0e5b299f\nMerge: 663f6629 74e513eb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Apr 17 15:58:56 2019 -0500\n\n    Merge branch 'amd' of github.com:flame/blis into amd\n\ncommit 74e513eb6a6787a925d43cd1500277d54d86ab8f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Apr 17 13:34:44 2019 -0500\n\n    Support row storage in Eigen gemm test/3 driver.\n    \n    Details:\n    - Added preprocessor branches to test/3/test_gemm.c to explicitly\n      support row-stored matrices. Column-stored matrices are also still\n      supported (and is the default for now). (This is mainly residual work\n      leftover from initial integration of Eigen into the test drivers, so\n      if we ever want to test Eigen with row-stored matrices, the code will\n      be ready to use, even if it is not yet integrated into the Makefile\n      in test/3.)\n\ncommit b5d457fae9bd75c4ca67f7bc7214e527aa248127\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 16 12:50:01 2019 -0500\n\n    Applied forgotten variable rename from 89a70cc.\n    \n    Details:\n    - Somehow the variable name change (root_file_name -> root_inputname)\n      in flatten-headers.py mentioned in the commit log entry for 89a70cc\n      didn't make it into the actual commit. This commit applies that\n      change.\n\ncommit 89a70cccf869333147eb2559cdfa5a23dc915824\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Apr 11 18:33:08 2019 -0500\n\n    GNU-like handling of installation prefix et al.\n    \n    Details:\n    - Changed the default installation prefix from $HOME/lib to /usr/local.\n    - Modified the way configure internally handles the prefix, libdir,\n      includedir, and sharedir (and also added an --exec-prefix option).\n      The defaults to these variables are set as follows:\n        prefix:      /usr/local\n        exec_prefix: ${prefix}\n        libdir:      ${exec_prefix}/lib\n        includedir:  ${prefix}/include\n        sharedir:    ${prefix}/share\n      The key change, aside from the addition of exec_prefix and its use to\n      define the default to libdir, is that the variables are substituted\n      into config.mk with quoting that delays evaluation, meaning the\n      substituted values may contain unevaluated references to other\n      variables (namely, ${prefix} and ${exec_prefix}). This more closely\n      follows GNU conventions, including those used by GNU autoconf, and\n      also allows make to override any one of the variables *after*\n      configure has already been run (e.g. during 'make install').\n    - Updates to build/config.mk.in pursuant to above changes.\n    - Updates to output of 'configure --help' pursuant to above changes.\n    - Updated docs/BuildSystem.md to reflect the new default installation\n      prefix, as well as mention EXECPREFIX and SHAREDIR.\n    - Changed the definitions of the UNINSTALL_OLD_* variables in the\n      top-level Makefile to use $(wildcard ...) instead of 'find'. This\n      was motivated by the new way of handling prefix and friends, which\n      leads to the 'find' command being run on /usr/local (by default),\n      which can take a while almost never yielding any benefit (since the\n      user will very rarely use the uninstall-old targets).\n    - Removed periods from the end of descriptive output statements (i.e.,\n      non-verbose output) since those statements often end with file or\n      directory paths, which get confusing to read when puctuated by a\n      period.\n    - Trival change to 'make showconfig' output.\n    - Removed my name from 'configure --help'. (Many have contributed to it\n      over the years.)\n    - In configure script, changed the default state of threading_model\n      variable from 'no' to 'off' to match that of debug_type, where there\n      are similarly more than two valid states. ('no' is still accepted\n      if given via the --enable-debug= option, though it will be\n      standardized to 'off' prior to config.mk being written out.)\n    - Minor variable name change in flatten-headers.py that was intended for\n      32812ff.\n    - CREDITS file update.\n\ncommit 9d76688ad90014a11ddc0c2f27253d62806216b1\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Thu Apr 11 10:22:48 2019 +0530\n\n    Fix for single rank crash with HPL application. When computing offset of C buffer, as integer variables are used for a row and column index, the intermediate result value overflows and a negative value gets added to the buffer, when the negative value is too large it would index the buffer out of the range resulting in segmentation fault. Although the crash is a result of dgemm kernel, added similar code in sgemm kernel also.\n    \n    Change-Id: I171119b0ec0dfbd8e63f1fcd6609a94384aabd27\n\ncommit 32812ff5aba05d34c421fe1024a61f3e2d5e7052\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 9 12:20:19 2019 -0500\n\n    Minor bugfix to flatten-headers.py.\n    \n    Details:\n    - Fixed a minor bug in flatten-headers.py whereby the script, upon\n      encountering a #include directive for the root header file, would\n      erroneously recurse and inline the conents of that root header.\n      The script has been modified to avoid recursion into any headers\n      that share the same name as the root-level header that was passed\n      into the script. (Note: this bug didn't actually manifest in BLIS,\n      so it's merely a precaution for usage of flatten-headers.py in other\n      contexts.)\n\ncommit bec90e0b6aeb3c9b19589c2b700fda2d66f6ccdf\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 2 17:45:13 2019 -0500\n\n    Minor update to docs/HardwareSupport.md document.\n    \n    Details:\n    - Added more details and clarifying language to implications of 1m and\n      the recycling of microkernels between microarchitectures.\n\ncommit 89cd650e7be01b59aefaa85885a3ea78970351e4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 2 17:23:55 2019 -0500\n\n    Use void_fp for function pointers instead of void*.\n    \n    Change void*-typed function pointers to void_fp.\n    - Updated all instances of void* variables that store function pointers\n      to variables of a new type, void_fp. Originally, I wanted to define\n      the type of void_fp as \"void (*void_fp)( void )\"--that is, a pointer\n      to a function with no return value and no arguments. However, once\n      I did this, I realized that gcc complains with incompatible pointer\n      type (-Wincompatible-pointer-types) warnings every time any such a\n      pointer is being assigned to its final, type-accurate function\n      pointer type. That is, gcc will silently typecast a void* to\n      another defined function pointer type (e.g. dscalv_ker_ft) during\n      an assignment from the former to the latter, but the same statement\n      will trigger a warning when typecasting from a void_fp type. I suspect\n      an explicit typecast is needed in order to avoid the warning, which\n      I'm not willing to insert at this time.\n    - Added a typedef to bli_type_defs.h defining void_fp as void*, along\n      with a commented-out version of the aborted definition described\n      above. (Note that POSIX requires that void* and function pointers\n      be interchangeable; it is the C standard that does not provide this\n      guarantee.)\n    - Comment updates to various _oapi.c files.\n\ncommit ffce3d632b284eb52474036096815ec38ca8dd5f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Apr 2 14:40:50 2019 -0500\n\n    Renamed armv8a gemm kernel filename.\n    \n    Details:\n    - Renamed\n        kernels/armv8a/3/bli_gemm_armv8a_opt_4x4.c\n      to\n        kernels/armv8a/3/bli_gemm_armv8a_asm_d6x8.c.\n      This follows the naming convention used by other kernel sets, most\n      notably haswell.\n\ncommit 77867478af02144544b4e7b6df5d54d874f3f93b\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Tue Apr 2 13:33:11 2019 -0500\n\n    Use pthreads on MinGW and Cygwin (#307)\n\ncommit 7bc75882f02ce3470a357950878492e87e688cec\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 28 17:40:50 2019 -0500\n\n    Updated Eigen results in docs/graphs with 3.3.90.\n    \n    Details:\n    - Updated the level-3 performance graphs in docs/graphs with new Eigen\n      results, this time using a development version cloned from their git\n      mirror on March 27, 2019 (version 3.3.90). Performance is improved\n      over 3.3.7, though still noticeably short of BLIS/MKL in most cases.\n    - Very minor updates to docs/Performance.md and matlab scripts in\n      test/3/matlab.\n\ncommit 20ea7a1217d3833db89a96158c42da2d6e968ed8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 27 18:09:17 2019 -0500\n\n    Minor text updates (Eigen) to docs/Performance.md.\n    \n    Details:\n    - Added/updated a few more details, mostly regarding Eigen.\n\ncommit bfb7e1bc6af468e4ff22f7e27151ea400dcd318a\nMerge: 044df950 2c85e1dd\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 27 17:58:19 2019 -0500\n\n    Merge branch 'dev'\n\ncommit 2c85e1dd9d5d84da7228ea4ae6deec56a89b3a8f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 27 16:29:51 2019 -0500\n\n    Added Eigen results to performance graphs.\n    \n    Details:\n    - Updated the Haswell, SkylakeX, and Epyc performance graphs in\n      docs/graphs to report on Eigen implementations, where applicable.\n      Specifically, Eigen implements all level-3 operations sequentially,\n      however, of those operations it only provides multithreaded gemm.\n      Thus, mt results for symm/hemm, syrk/herk, trmm, and trsm are\n      omitted. Thanks to Sameer Agarwal for his help configuring and\n      using Eigen.\n    - Updated docs/Performance.md to note the new implementation tested.\n    - CREDITS file update.\n\ncommit bfac7e385f8061f2e6591de208b0acf852f04580\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 27 16:04:48 2019 -0500\n\n    Added ability to plot with Eigen in test/3/matlab.\n    \n    Details:\n    - Updated matlab scripts in test/3/matlab to optionally plot/display\n      Eigen performance curves. Whether Eigen is plotted is determined by\n      a new boolean function parameter, with_eigen.\n    - Updated runme.m scratchpad to reflect the latest invocations of the\n      plot_panel_4x5() function (with Eigen plotting enabled).\n\ncommit 67535317b9411c90de7fa4cb5b0fdb8f61fdcd79\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 27 13:32:18 2019 -0500\n\n    Fixed mislabeled eigen output from test/3 drivers.\n    \n    Details:\n    - Fixed the Makefile in test/3 so that it no longer incorrectly labels\n      the matlab output variables from Eigen-linked hemm, herk, trmm, and\n      trsm driver output as \"vendor\". (The gemm drivers were already\n      correctly outputing matlab variables containing the \"eigen\" label.)\n\ncommit 044df9506f823643c0cdd53e81ad3c27a9f9d4ff\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Wed Mar 27 12:39:31 2019 -0500\n\n    Test with shared on windows (#306)\n    \n    Export macros can't support both shared and static at the same time.\n    When blis is built with both shared and static, headers assume that\n    shared is used at link time and dllimports the symbols with __imp_\n    prefix.\n    \n    To use the headers with static libraries a user can give\n    -DBLIS_EXPORT= to import the symbol without the __imp_ prefix\n\ncommit 5e6b160c8a85e5e23bab0f64958a8acf4918a4ed\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 26 19:10:59 2019 -0500\n\n    Link to Eigen BLAS for non-gemm drivers in test/3.\n    \n    Details:\n    - Adjusted test/3/Makefile so that the test drivers are linked against\n      Eigen's BLAS library for hemm, herk, trmm, and trsm. We have to do\n      this since Eigen's headers don't define implementations to the\n      standard BLAS APIs.\n    - Simplified #included headers in hemm, herk, trmm, and trsm source\n      driver files, since nothing specific to Eigen is needed at\n      compile-time for those operations.\n\ncommit e593221383aae19dfdc3f30539de80ed05cfec7f\nMerge: 92fb9c87 c208b9dc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 26 15:51:45 2019 -0500\n\n    Merge branch 'master' into dev\n\ncommit 92fb9c87bf88b9f9c401eeecd9aa9c3521bc2adb\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 26 15:43:23 2019 -0500\n\n    Add more support for Eigen to drivers in test/3.\n    \n    Details:\n    - Use compile-time implementations of Eigen in test_gemm.c via new\n      EIGEN cpp macro, defined on command line. (Linking to Eigen's BLAS\n      library is not necessary.) However, as of Eigen 3.3.7, Eigen only\n      parallelizes the gemm operation and not hemm, herk, trmm, trsm, or\n      any other level-3 operation.\n    - Fixed a bug in trmm and trsm drivers whereby the wrong function\n      (bli_does_trans()) was being called to determine whether the object\n      for matrix A should be created for a left- or right-side case. This\n      was corrected by changing the function to bli_is_left(), as is done\n      in the hemm driver.\n    - Added support for running Eigen test drivers from runme.sh.\n\ncommit c208b9dc46852c877197d53b6dd913a046b6ebb6\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Mon Mar 25 13:03:44 2019 -0500\n\n    Fix clang version detection (#305)\n    \n    clang -dumpversion gives 4.2.1 for all clang versions as clang was\n    originally compatible with gcc 4.2.1\n    \n    Apple clang version and clang version are two different things\n    and the real clang version cannot be deduced from apple clang version\n    programatically. Rely on wikipedia to map apple clang to clang version\n    \n    Also fixes assembly detection with clang\n    \n    clang 3.8 can't build knl as it doesn't recognize zmm0\n\ncommit 53842c7e7d530cb2d5609d6d124ae350fc345c32\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Fri Mar 22 13:57:14 2019 +0530\n\n    Removed printing alpha and beta values\n    \n    Change-Id: I49102db510311a30f6a936f9d843f35838f50d23\n\ncommit 6805db45e343d83d1adaf9157cf0b841653e9ede\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Fri Mar 22 12:55:35 2019 +0530\n\n    Corrected setting alpha & beta values- alpha = -1 and beta = 1 - bli_setc(-1.0, 0, &alpha) should be used rather than bli_setc(0.0, -1.0, &alpha). This corrected now\n    \n    Change-Id: Ic1102dfd6b50ccf212386a1211c6f31e8d987ef9\n\ncommit feefcab4427a75b0b55af215486b85abcda314f7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 21 18:11:20 2019 -0500\n\n    Allow disabling of BLAS prototypes at compile-time.\n    \n    Details:\n    - Modified bli_blas.h so that:\n      - By default, if the BLAS layer is enabled at configure-time, BLAS\n        prototypes are also enabled within blis.h;\n      - But if the user #defines BLIS_DISABLE_BLAS_DEFS prior to including\n        blis.h, BLAS prototypes are skipped over entirely so that, for\n        example, the application or some other header pulled in by the\n        application may prototype the BLAS functions without causing any\n        duplication.\n    - Updated docs/BuildSystem.md to document the feature above, and\n      related text.\n\ncommit 20153cd4b594bc34f860c381ec18de3a6cc743c7\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Thu Mar 21 16:23:53 2019 +0530\n\n    Modified test_gemm.c file in test folder\n    A Macro 'FILE_IN_OUT\" is defined to read input parameters from a csv file.\n    Format for input file:\n    Each line defines a gemm problem with following parameters: m k n cs_a cs_b cs_c\n    The operation always implemented is C = C - A*B and column-major format.\n    When macro is disabled - it reverts back to original implementation.\n    Usage: ./test_gemm_<mkl/blis/openblas>.x input.csv output.csv\n    GEMM is called through BLAS interface\n    For BLIS - the test application also prints either 'S' indicating small gemm routine or 'N' - conventional BLIS gemm\n    for MKL/OpenBLAS - ignore this character\n    \n    Change-Id: I0924ef2c1f7bdea48d4cdb230b888e2af2c86a36\n\ncommit 288843b06d91e1b4fade337959aef773090bd1c9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 20 17:52:23 2019 -0500\n\n    Added Eigen support to test/3 Makefile, runme.sh.\n    \n    Details:\n    - Added targets to test/3/Makefile that link against a BLAS library\n      build by Eigen. It appears, however, that Eigen's BLAS library does\n      not support multithreading. (It may be that multithreading is only\n      available when using the native C++ APIs.)\n    - Updated runme.sh with a few Eigen-related tweaks.\n    - Minor tweaks to docs/Performance.md.\n\ncommit 153e0be21d9ff413e370511b68d553dd02abada9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 17:53:18 2019 -0500\n\n    More minor tweaks to docs/Performance.md.\n    \n    Details:\n    - Defined GFLOPS as billions of floating-point operations per second,\n      and reworded the sentence after about normalization.\n\ncommit 05c4e42642cc0c8dbfa94a6c21e975ac30c0517a\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 17:07:20 2019 -0500\n\n    CHANGELOG update (0.5.2)\n\ncommit 9204cd0cb0cc27790b8b5a2deb0233acd9edeb9b (tag: 0.5.2)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 17:07:18 2019 -0500\n\n    Version file update (0.5.2)\n\ncommit 64560cd9248ebf4c02c4a1eeef958e1ca434e510\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 17:04:20 2019 -0500\n\n    ReleaseNotes.md update in advance of next version.\n    \n    Details:\n    - Updated ReleaseNotes.md in preparation for next version.\n\ncommit ab5ad557ea69479d487c9a3cb516f43fa1089863\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 16:50:41 2019 -0500\n\n    Very minor tweaks to Performance.md.\n\ncommit 03c4a25e1aa8a6c21abbb789baa599ac419c3641\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 16:47:15 2019 -0500\n\n    Minor fixes to docs/Performance.md.\n    \n    Details:\n    - Fixed some incorrect labels associated with the pdf/png graphs,\n      apparently the result of copy-pasting.\n\ncommit fe6dd8b132f39ecb8893d54cd8e75d4bbf6dab83\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 16:30:23 2019 -0500\n\n    Fixed broken section links in docs/Performance.md.\n    \n    Details:\n    - Fixed a few broken section links in the Contents section.\n\ncommit 913cf97653f5f9a40aa89a5b79e2b0a8882dd509\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 16:15:24 2019 -0500\n\n    Added docs/Performance.md and docs/graphs subdir.\n    \n    Details:\n    - Added a new markdown document, docs/Performance.md, which reports\n      performance of a representative set of level-3 operations across a\n      variety of hardware architectures, comparing BLIS to OpenBLAS and a\n      vendor library (MKL on Intel/AMD, ARMPL on ARM). Performance graphs,\n      in pdf and png formats, reside in docs/graphs.\n    - Updated README.md to link to new Performance.md document.\n    - Minor updates to CREDITS, docs/Multithreading.md.\n    - Minor updates to matlab scripts in test/3/matlab.\n\ncommit 9945ef24fd758396b698b19bb4e23e53b9d95725\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 19 15:28:44 2019 -0500\n\n    Adjusted cache blocksizes for zen subconfig.\n    \n    Details:\n    - Adjusted the zen sub-configuration's cache blocksizes for float,\n      scomplex, and dcomplex based on the existing values for double.\n      (The previous values were taken directly from the haswell subconfig,\n      which targets Intel Haswell/Broadwell/Skylake systems.)\n\ncommit d202d008d51251609d08d3c278bb6f4ca9caf8e4\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 18 18:18:25 2019 -0500\n\n    Renamed --enable-export-all to --export-shared=[].\n    \n    Details:\n    - Replaced the existing --enable-export-all / --disable-export-all\n      configure option with --export-shared=[public|all], with the 'public'\n      instance of the latter corresponding to --disable-export-all and the\n      'all' instance corresponding to --enable-export-all. Nothing else\n      semantically about the option, or its default, has changed.\n\ncommit ff78089870f714663026a7136e696603b5259560\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Mar 18 13:22:55 2019 -0500\n\n    Updates to docs/Multithreading.md.\n    \n    Details:\n    - Made extra explicit the fact that: (a) multithreading in BLIS is\n      disabled by default; and (b) even with multithreading enabled, the\n      user must specify multithreading at runtime in order to observe\n      parallelism. Thanks to M. Zhou for suggesting these clarifications\n      in #292.\n    - Also made explicit that only the environment variable and global\n      runtime API methods are available when using the BLAS API. If the\n      user wishes to use the local runtime API (specify multithreading on\n      a per-call basis), one of the native BLIS APIs must be used.\n\ncommit 3a929a3d0ba0353159a6d4cd188f01b7a390ccfc\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Mon Mar 18 10:51:41 2019 +0530\n\n    Fixed code merging: bli_gemm_small.c - missed conditional checks for L!=0 && K!=0. Now they are added. This fix is done to pass blastest\n    \n    Change-Id: Idc9c9a04d2015a68a19553c437ecaf8f1584026c\n\ncommit 663f662932c3f182fefc3c77daa1bf8c3394bb8b\nMerge: 938c05ef 6bfe3812\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Mar 16 16:17:12 2019 -0500\n\n    Merge branch 'amd' of github.com:flame/blis into amd\n\ncommit 938c05ef8654e2fc013d39a57f51d91d40cc40fb\nMerge: 4ed39c09 5a5f494e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sat Mar 16 16:01:43 2019 -0500\n\n    Merge branch 'amd' of github.com:flame/blis into amd\n\ncommit 6bfe3812e29b86c95b828822e4e5473b48891167\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 15 13:57:49 2019 -0500\n\n    Use -fvisibility=[...] with clang on Linux/BSD/OSX.\n    \n    Details:\n    - Modified common.mk to use the -fvisibility=[hidden|default] option\n      when compiling with clang on non-Windows platforms (Linux, BSD, OS X,\n      etc.). Thanks to Isuru Fernando for pointing out this option works\n      with clang on these OSes.\n\ncommit 809395649c5bbf48778ede4c03c1df705dd49566\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 13 18:21:35 2019 -0500\n\n    Annotated additional symbols for export.\n    \n    Details:\n    - Added export annotations to additional function prototypes in order to\n      accommodate the testsuite.\n    - Disabled calling bli_amaxv_check() from within the testsuite's\n      test_amaxv.c.\n\ncommit e095926c643fd9c9c2220ebecd749caae0f71d42\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Mar 13 17:35:18 2019 -0500\n\n    Support shared lib export of only public symbols.\n    \n    Details:\n    - Introduced a new configure option, --enable-export-all, which will\n      cause all shared library symbols to be exported by default, or,\n      alternatively, --disable-export-all, which will cause all symbols to\n      be hidden by default, with only those symbols that are annotated for\n      visibility, via BLIS_EXPORT_BLIS (and BLIS_EXPORT_BLAS for BLAS\n      symbols), to be exported. The default for this configure option is\n      --disable-export-all. Thanks to Isuru Fernando for consulting on\n      this commit.\n    - Removed BLIS_EXPORT_BLIS annotations from frame/1m/bli_l1m_unb_var1.h,\n      which was intended for 5a5f494.\n    - Relocated BLIS_EXPORT-related cpp logic from bli_config.h.in to\n      frame/include/bli_config_macro_defs.h.\n    - Provided appropriate logic within common.mk to implement variable\n      symbol visibility for gcc, clang, and icc (to the extend that each of\n      these compilers allow).\n    - Relocated --help text associated with debug option (-d) to configure\n      slightly further down in the list.\n\ncommit 5a5f494e428372c7c27ed1f14802e15a83221e87\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 12 18:45:09 2019 -0500\n\n    Removed export macros from all internal prototypes.\n    \n    Details:\n    - After merging PR #303, at Isuru's request, I removed the use of\n      BLIS_EXPORT_BLIS from all function prototypes *except* those that we\n      potentially wish to be exported in shared/dynamic libraries. In other\n      words, I removed the use of BLIS_EXPORT_BLIS from all prototypes of\n      functions that can be considered private or for internal use only.\n      This is likely the last big modification along the path towards\n      implementing the functionality spelled out in issue #248. Thanks\n      again to Isuru Fernando for his initial efforts of sprinkling the\n      export macros throughout BLIS, which made removing them where\n      necessary relatively painless. Also, I'd like to thank Tony Kelman,\n      Nathaniel Smith, Ian Henriksen, Marat Dukhan, and Matthew Brett for\n      participating in the initial discussion in issue #37 that was later\n      summarized and restated in issue #248.\n    - CREDITS file update.\n\ncommit 3dc18920b6226026406f1d2a8b2c2b405a2649d5\nMerge: b938c16b 766769ee\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 12 11:20:25 2019 -0500\n\n    Merge branch 'master' into dev\n\ncommit 766769eeb944bd28641a6f72c49a734da20da755\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Mon Mar 11 19:05:32 2019 -0500\n\n    Export functions without def file (#303)\n    \n    * Revert \"restore bli_extern_defs exporting for now\"\n    \n    This reverts commit 09fb07c350b2acee17645e8e9e1b8d829c73dca8.\n    \n    * Remove symbols not intended to be public\n    \n    * No need of def file anymore\n    \n    * Fix whitespace\n    \n    * No need of configure option\n    \n    * Remove export macro from definitions\n    \n    * Remove blas export macro from definitions\n\ncommit 4ed39c0971c7917e2675cf5449f563b1f4751ccc\nMerge: 540ec1b4 b938c16b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Mar 8 11:56:58 2019 -0600\n\n    Merge branch 'amd' of github.com:flame/blis into amd\n\ncommit b938c16b0c9e839335ac2c14944b82890143d02f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 7 16:40:39 2019 -0600\n\n    Renamed test/3m4m to test/3.\n    \n    Details:\n    - Renamed '3m4m' directory to '3', which captures the directory nicely\n      since it builds test drivers to test level-3 operations.\n    - These test drivers ceased to be used to test the 3m and 4m (or even\n      1m) induced methods long ago, hence the name change.\n\ncommit ab89a40582ec7acf802e59b0763bed099a02edd8\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 7 16:26:12 2019 -0600\n\n    More minor updates and edits to test/3m4m.\n    \n    Details:\n    - Further updates to matlab scripts, mostly for compatibility with\n      GNU Octave.\n    - More tweaks to runme.sh.\n    - Updates to runme.m that allow copy-paste into matlab interactive\n      session to generate graphs.\n\ncommit f0e70dfbf3fee4c4e382c2c4e87c25454cbc79a1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Mar 7 01:04:05 2019 +0000\n\n    Very minor updates to test/3m4m for ul252.\n    \n    Details:\n    - Very minor updates to the newly revamped test/3m4m drivers when used\n      on a Xeon Platinum (SkylakeX).\n\ncommit 7fe44748383071f1cbbc77d904f4ae5538e13065\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Wed Mar 6 16:23:31 2019 +0530\n\n    Disabled BLIS_ENABLE_ZEN_BLOCK_SIZES in bli_family_zen.h for ROME tuning\n    \n    Change-Id: Iec47fcf51f4d4396afef1ce3958e58cf02c59a57\n\ncommit 9f1dbe572b1fd5e7dd30d5649bdf59259ad770d5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Mar 5 17:47:55 2019 -0600\n\n    Overhauled test/3m4m Makefile and scripts.\n    \n    Details:\n    - Rewrote much of Makefile to generate executables for single- and dual-\n      socket multithreading as well as single-threaded. Each of the three\n      can also use a different problem size range/increment, as is often\n      appropriate when doubling/halving the number of threads.\n    - Rewrote runme.sh script to flexibly execute as many threading\n      parameter scenarios as is given in the input parameter string\n      (currently set within the script itself). The string also encodes\n      the maximum problem size for each threading scenario, which is used\n      to identify the executable to run. Also improved the \"progress\" output\n      of the script to reduce redundant info and improve readability in\n      terminals that are not especially wide.\n    - Minor updates to test_*.c source files.\n    - Updated matlab scripts according to changes made to the Makefile,\n      test drivers, and runme.sh script, and renamed 'plot_all.m' to\n      'runme.m'.\n\ncommit f5ed95ecd7d5eb4a63e1333ad5cc6765fc8df9fe\nAuthor: Kiran Varaganti <Kiran.Varaganti@amd.com>\nDate:   Tue Mar 5 15:01:57 2019 +0530\n\n    Merged BLIS Release 1.3\n    Modified config/zen/make_defs.mk, now CKVECFLAGS     := -mavx2 -mfpmath=sse -mfma -march=znver1\n    \n    Change-Id: Ia0942d285a21447cd0c470de1bc021fe63e80d81\n\ncommit 3bdab823fa93342895bf45d812439324a37db77c\nMerge: 70f12f20 e2a02ebd\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Feb 28 14:07:24 2019 -0600\n\n    Merge branch 'master' into dev\n\ncommit e2a02ebd005503c63138d48a2b7d18978ee29205\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Feb 28 13:58:59 2019 -0600\n\n    Updates (from ls5) to test/3m4m/runme.sh.\n    \n    Details:\n    - Lonestar5-specific updates to runme.sh.\n\ncommit f0dcc8944fa379d53770f5cae5d670140918f00c\nAuthor: Isuru Fernando <isuruf@gmail.com>\nDate:   Wed Feb 27 17:27:23 2019 -0600\n\n    Add symbol export macro for all functions (#302)\n    \n    * initial export of blis functions\n    \n    * Regenerate def file for master\n    \n    * restore bli_extern_defs exporting for now\n\ncommit 540ec1b479712d5e1da637a718927249c15d867f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Sun Feb 24 19:09:10 2019 -0600\n\n    Updated level-3 BLAS to call object API directly.\n    \n    Details:\n    - Updated the BLAS compatibility layer for level-3 operations so that\n      the corresponding BLIS object API is called directly rather than first\n      calling the typed BLIS API. The previous code based on the typed BLIS\n      API calls is still available in a deactivated cpp macro branch, which\n      may be re-activated by #defining BLIS_BLAS3_CALLS_TAPI. (This does not\n      yet correspond to a configure option. If it seems like people might\n      want to toggle this behavior more regularly, a configure option can be\n      added in the future.)\n    - Updated the BLIS typed API to statically \"pre-initialize\" objects via\n      new initializor macros. Initialization is then finished via calls to\n      static functions bli_obj_init_finish_1x1() and bli_obj_init_finish(),\n      which are similar to the previously-called functions,\n      bli_obj_create_1x1_with_attached_buffer() and\n      bli_obj_create_with_attached_buffer(), respectively. (The BLAS\n      compatibility layer updates mentioned above employ this new technique\n      as well.)\n    - Transformed certain routines in bli_param_map.c--specifically, the\n      ones that convert netlib-style parameters to BLIS equivalents--into\n      static functions, now in bli_param_map.h. (The remaining three classes\n      of conversation routines were left unchanged.)\n    - Added the aforementioned pre-initializor macros to bli_type_defs.h.\n    - Relocated bli_obj_init_const() and bli_obj_init_constdata() from\n      bli_obj_macro_defs.h to bli_type_defs.h.\n    - Added a few macros to bli_param_macro_defs.h for testing domains for\n      real/complexness and precisions for single/double-ness.\n\ncommit 8e023bc914e9b4ac1f13614feb360b105fbe44d2\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Feb 22 16:55:30 2019 -0600\n\n    Updates to 3m4m/matlab scripts.\n    \n    Details:\n    - Minor updates to matlab graph-generating scripts.\n    - Added a plot_all.m script that is more of a scratchpad for copying and\n      pasting function invocations into matlab to generate plots that are\n      presently of interest to us.\n\ncommit b06244d98cc468346eb1a8eb931bc05f35ff280c\nMerge: e938ff08 4c7e6680\nAuthor: praveeng <praveen.g@amd.com>\nDate:   Thu Feb 21 12:56:15 2019 +0530\n\n    Merge branch 'ut-austin-amd' of ssh://git.amd.com:29418/cpulibraries/er/blis into ut-austin-amd\n\ncommit e938ff08cea3d108c84524eb129d9e89d701ea90\nAuthor: praveeng <praveen.g@amd.com>\nDate:   Thu Feb 21 12:44:38 2019 +0530\n\n    deleted test.txt\n    \n    Change-Id: I3871f5fe76e548bc29ec2733745b29964e829dd3\n\ncommit ed13ad465dcba350ad3d5e16c9cc7542e33f3760\nAuthor: mkv <Mallikarjuna-Reddy.K-V@amd.com>\nDate:   Thu Feb 21 01:04:16 2019 -0500\n\n    added test file for initial commit\n\ncommit 4c7e6680832b497468cf50c2399e3ac4de0e3450\nAuthor: praveeng <praveen.g@amd.com>\nDate:   Thu Feb 21 12:44:38 2019 +0530\n\n    deleted test.txt\n    \n    Change-Id: I3871f5fe76e548bc29ec2733745b29964e829dd3\n\ncommit 95e070581c54ed2edc211874faec56055ea298c8\nAuthor: mkv <Mallikarjuna-Reddy.K-V@amd.com>\nDate:   Thu Feb 21 01:04:16 2019 -0500\n\n    added test file for initial commit\n\ncommit 70f12f209bc1901b5205902503707134cf2991a0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Feb 20 16:10:10 2019 -0600\n\n    Changed unsafe-loop to unsafe-math optimizations.\n    \n    Details:\n    - Changed -funsafe-loop-optimizations (re-)introduced in 7690855 for\n      make_defs.mk files' CRVECFLAGS to -funsafe-math-optimizations (to\n      account for a miscommunication in issue #300). Thanks to Dave Love\n      for this suggestion and Jeff Hammond for his feedback on the topic.\n\ncommit 7690855c5106a56e5b341a350f8db1c78caacd89\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 19:16:01 2019 -0600\n\n    Restored -funsafe-loop-optimizations to subconfigs.\n    \n    Details:\n    - Restored use of -funsafe-loop-optimizations in the definitions of\n      CRVECFLAGS (when using gcc), but only for sub-configurations (and\n      not configuration families such as amd64, intel64, and x86_64).\n      This more or less reverts 5190d05 and 6cf1550.\n\ncommit 44994d1490897b08cde52a615a2e37ddae8b2061\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 18:35:30 2019 -0600\n\n    Disable TBM, XOP, LWP instructions in AMD configs.\n    \n    Details:\n    - Added -mno-tbm -mno-xop -mno-lwp to CKVECFLAGS in bulldozer,\n      piledriver, steamroller, and excavator configurations to explicitly\n      disable AMD's bulldozer-era TBM, XOP, and LWP instruction sets in an\n      attempt to fix the invalid instruction error that has plagued Travis\n      CI builds since 6a014a3. Thanks to Devin Matthews for pointing out\n      that the offending instruction was part of TBM (issue #300).\n    - Restored -O3 to piledriver configuration's COPTFLAGS.\n\ncommit 1e5b530744c1906140d47f43c5cad235eaa619cf\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 18:04:38 2019 -0600\n\n    Reverted piledriver COPTFLAGS from -O3 to -O2.\n    \n    Details:\n    - Debugging continues; changing COPTFLAGS for piledriver subconfig from\n      -O3 to -O2, its original value prior to 6a014a3.\n\ncommit 6cf155049168652c512aefdd16d74e7ff39b98df\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 17:29:51 2019 -0600\n\n    Removed -funsafe-loop-optimizations from all configs.\n    \n    Details:\n    - Error persists. Removed -funsafe-loop-optimizations from all remaining\n      sub-configurations.\n\ncommit 5190d05a27c5fa4c7942e20094f76eb9a9785c3e\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 17:07:35 2019 -0600\n\n    Removed -funsafe-loop-optimizations from piledriver.\n    \n    Details:\n    - Error persists; continuing debugging from bf0fb78c by removing\n      -funsafe-loop-optimizations from piledriver configuration.\n\ncommit bf0fb78c5e575372060d22f5ceeb5b332e8978ec\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 16:51:38 2019 -0600\n\n    Removed -funsafe-loop-optimizations from families.\n    \n    Details:\n    - Removed -funsafe-loop-optimizations from the configuration families\n      affected by 6a014a3, specifically: intel64, amd64, and x86_64.\n      This is part of an attempt to debug why the sde, as executed by\n      Travis CI, is crashing via the following error:\n    \n        TID 0 SDE-ERROR: Executed instruction not valid for specified chip\n        (ICELAKE): 0x9172a5: bextr_xop rax, rcx, 0x103\n\ncommit 6a014a3377a2e829dbc294b814ca257a2bfcb763\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 14:52:29 2019 -0600\n\n    Standardized optimization flags in make_defs.mk.\n    \n    Details:\n    - Per Dave Love's recommendation in issue #300, this commit defines\n        COPTFLAGS := -03\n      and\n        CRVECFLAGS := $(CKVECFLAGS) -funsafe-loop-optimizations\n      in the make_defs.mk for all Intel- and AMD-based configurations.\n\ncommit 565fa3853b381051ac92cff764625909d105644d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Feb 18 11:43:58 2019 -0600\n\n    Redirect trsm pc, ir parallelism to ic, jr loops.\n    \n    Details:\n    - trsm parallelization was temporarily simplifed in 075143d to entirely\n      ignore any parallelism specified via the pc or ir loops. Now, any\n      parallelism specified to the pc loop will be redirected to the ic\n      loop, and any parallelism specified to the ir loop will be redirected\n      to the jr loop. (Note that because of inter-iteration dependencies,\n      trsm cannot parallelize the ir loop. Parallelism via the pc loop is\n      at least somewhat feasible in theory, but it would require tracking\n      dependencies between blocks--something for which BLIS currently lacks\n      the necessary supporting infrastructure.)\n\ncommit a023c643f25222593f4c98c2166212561d030621\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Feb 14 20:18:55 2019 -0600\n\n    Regenerated symbols in build/libblis-symbols.def.\n    \n    Details:\n    - Reran ./build/regen-symbols.sh after running\n      'configure --enable-cblas auto'\n\ncommit 075143dfd92194647da9022c1a58511b20fc11f3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Feb 14 18:52:45 2019 -0600\n\n    Added support for IC loop parallelism to trsm.\n    \n    Details:\n    - Parallelism within the IC loop (3rd loop around the microkernel) is\n      now supported within the trsm operation. This is done via a new branch\n      on each of the control and thread trees, which guide execution of a\n      new trsm-only subproblem from within bli_trsm_blk_var1(). This trsm\n      subproblem corresponds to the macrokernel computation on only the\n      block of A that contains the diagonal (labeled as A11 in algorithms\n      with FLAME-like partitioning), and the corresponding row panel of C.\n      During the trsm subproblem, all threads within the JC communicator\n      participate and parallelize along the JR loop, including any\n      parallelism that was specified for the IC loop. (IR loop parallelism\n      is not supported for trsm due to inter-iteration dependencies.) After\n      this trsm subproblem is complete, a barrier synchronizes all\n      participating threads and then they proceed to apply the prescribed\n      BLIS_IC_NT (or equivalent) ways of parallelism (and any BLIS_JR_NT\n      parallelism specified within) to the remaining gemm subproblem (the\n      rank-k update that is performed using the newly updated row-panel of\n      B). Thus, trsm now supports JC, IC, and JR loop parallelism.\n    - Modified bli_trsm_l_cntl_create() to create the new \"prenode\" branch\n      of the trsm_l cntl_t tree. The trsm_r tree was left unchanged, for\n      now, since it is not currently used. (All trsm problems are cast in\n      terms of left-side trsm.)\n    - Updated bli_cntl_free_w_thrinfo() to be able to free the newly shaped\n      trsm cntl_t trees. Fixed a potentially latent bug whereby a cntl_t\n      subnode is only recursed upon if there existed a corresponding\n      thrinfo_t node, which may not always exist (for problems too small\n      to employ full parallelization due to the minimum granularity imposed\n      by micropanels).\n    - Updated other functions in frame/base/bli_cntl.c, such as\n      bli_cntl_copy() and bli_cntl_mark_family(), to recurse on sub-prenodes\n      if they exist.\n    - Updated bli_thrinfo_free() to recurse into sub-nodes and prenodes\n      when they exist, and added support for growing a prenode branch to\n      bli_thrinfo_grow() via a corresponding set of help functions named\n      with the _prenode() suffix.\n    - Added a bszid_t field thrinfo_t nodes. This field comes in handy when\n      debugging the allocation/release of thrinfo_t nodes, as it helps trace\n      the \"identity\" of each nodes as it is created/destroyed.\n    - Renamed\n        bli_l3_thrinfo_print_paths() -> bli_l3_thrinfo_print_gemm_paths()\n      and created a separate bli_l3_thrinfo_print_trsm_paths() function to\n      print out the newly reconfigured thrinfo_t trees for the trsm\n      operation.\n    - Trival changes to bli_gemm_blk_var?.c and bli_trsm_blk_var?.c\n      regarding variable declarations.\n    - Removed subpart_t enum values BLIS_SUBPART1T, BLIS_SUBPART1B,\n      BLIS_SUBPART1L, BLIS_SUBPART1R. Then added support for two new labels\n      (semantically speaking): BLIS_SUBPART1A and BLIS_SUBPART1B, which\n      represent the subpartition ahead of and behind, respectively,\n      BLIS_SUBPART1. Updated check functions in bli_check.c accordingly.\n    - Shuffled layering/APIs for bli_acquire_mpart_[mn]dim() and\n      bli_acquire_mpart_t2b/b2t(), _l2r/r2l().\n    - Deprecated old functions in frame/3/bli_l3_thrinfo.c.\n\ncommit 78bc0bc8b6b528c79b11f81ea19250a1db7450ed\nAuthor: Nicholai Tukanov <nicholai@utexas.edu>\nDate:   Thu Feb 14 13:29:02 2019 -0600\n\n    Power9 sub-configuration  (#298)\n    \n    Formally registered power9 sub-configuration.\n    \n    Details:\n    - Added and registered power9 sub-configuration into the build system.\n      Thanks to Nicholai Tukanov and Devangi Parikh for these contributions.\n    - Note: The sub-configuration does not yet have a corresponding\n      architecture-specific kernel set registered, and so for now the\n      sub-config is using the generic kernel set.\n\ncommit 6b832731261f9e7ad003a9ea4682e9ca973ef844\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Feb 12 16:01:28 2019 -0600\n\n    Generalized ref kernels' pragma omp simd usage.\n    \n    Details:\n    - Replaced direct usage of _Pragma( \"omp simd\" ) in reference kernels\n      with PRAGMA_SIMD, which is defined as a function of the compiler being\n      used in a new bli_pragma_macro_defs.h file. That definition is cleared\n      when BLIS detects that the -fopenmp-simd command line option is\n      unsupported. Thanks to Devin Matthews and Jeff Hammond for suggestions\n      that guided this commit.\n    - Updated configure and bli_config.h.in so that the appropriate anchor\n      is substituted in (when the corresponding pragma omp simd support is\n      present).\n\ncommit b1f5ce8622b682b79f956fed83f04a60daa8e0fc\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Feb 5 17:38:50 2019 -0600\n\n    Minor updates to scripts in test/mixeddt/matlab.\n\ncommit 38203ecd15b1fa50897d733daeac6850d254e581\nAuthor: Devangi N. Parikh <dnp@cs.utexas.edu>\nDate:   Mon Feb 4 15:28:28 2019 -0500\n\n    Added thunderx2 system in the mixeddt test scripts\n    \n    Details:\n     - Added thunderx2 (tx2) as a system in the runme.sh in test/mixeddt\n\ncommit dfc91843ea52297bf636147793029a0c1345be04\nAuthor: Devangi N. Parikh <dnp@cs.utexas.edu>\nDate:   Mon Feb 4 15:23:40 2019 -0500\n\n    Fixed gcc flags for thunderx2 subconfiguration\n    \n    Details:\n    - Fixed -march flag. Thunderx2 is an armv8.1a architecture not armv8a.\n\ncommit c665eb9b888ec7e41bd0a28c4c8ac4094d0a01b5\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 28 16:22:23 2019 -0600\n\n    Minor updates to docs, Makefiles.\n    \n    Details:\n    - Changed all occurrances of\n        micro-kernel -> microkernel\n        macro-kernel -> macrokernel\n        micro-panel  -> micropanel\n      in all markdown documents in 'docs' directory. This change is being\n      made since we've reached the point in adoption and acceptance of\n      BLIS's insights where words such as \"microkernel\" are no longer new,\n      and therefore now merit being unhyphenated.\n    - Updated \"Implementation Notes\" sections of KernelsHowTo.md, which\n      still contained references to nonexistent cpp macros such as\n      BLIS_DEFAULT_MR_? and BLIS_PACKDIM_MR_?.\n    - Added 'run-fast' and 'check-fast' targets to testsuite/Makefile.\n    - Minor updates to Testsuite.md, including suggesting use of\n      'make check' and 'make check-fast' when running from the local\n      testsuite directory.\n    - Added a comment to top-level Makefile explaining the purpose behind\n      the TESTSUITE_WRAPPER variable, which at first glance appears to serve\n      no purpose.\n\ncommit 1aa280d0520ed5eaea3b119b4e92b789ecad78a4\nAuthor: M. Zhou <5723047+cdluminate@users.noreply.github.com>\nDate:   Sun Jan 27 21:40:48 2019 +0000\n\n    Amend OS detection for kFreeBSD. (#295)\n\ncommit fffc23bb35d117a433886eb52ee684ff5cf6997f\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jan 25 13:35:31 2019 -0600\n\n    CREDITS file update.\n\ncommit 26c5cf495ce22521af5a36a1012491213d5a4551\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jan 24 18:49:31 2019 -0600\n\n    Fixed bug in skx subconfig related to bdd46f9.\n    \n    Details:\n    - Fixed code in the skx subconfiguration that became a bug after\n      committing bdd46f9. Specifically, the bli_cntx_init_skx() function\n      was overwriting default blocksizes for the scomplex and dcomplex\n      microkernels despite the fact that only single and double real\n      microkernels were being registered. This was not a problem prior to\n      bdd46f9 since all microkernels used dynamically-queried (at runtime)\n      register blocksizes for loop bounds. However, post-bdd46f9, this\n      became a bug because the reference ukernels for scomplex and dcomplex\n      were written with their register blocksizes hard-coded as constant\n      loop bounds, which conflicted the the erroneous scomplex and dcomplex\n      values that bli_cntx_init_skx() was setting in the context. The\n      lesson here is that going forward, all subconfigurations must not set\n      any blocksizes for datatypes corresponding to default/reference\n      microkernels. (Note that a blocksize is left unchanged by the\n      bli_cntx_set_blkszs() function if it was set to -1.)\n\ncommit 180f8e42e167b83a757340ad4bd4a5c7a1d6437b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jan 24 18:01:15 2019 -0600\n\n    Fixed undefined behavior trsm ukr bug in bdd46f9.\n    \n    Details:\n    - Fixed a bug that mainfested anytime a configuration was used in which\n      optimized microkernels were registered and the trsm operation (or\n      kernel) was invoked. The bug resulted from the optimized microkernels'\n      register blocksizes conflicting with the hard-coded values--expressed\n      in the form of constant loop bounds--used in the new reference trsm\n      ukernels that were introduced in bdd46f9. The fix was easy: reverting\n      back to the implementation that uses variable-bound loops, which\n      amounted to changing an #if 0 to #if 1 (since I preserved the older\n      implementation in the file alongside the new code based on constant-\n      bound loops). It should be noted that this fix must be permanent,\n      since the trsm kernel code with constant-bound loops can never work\n      with gemm ukernels that use different register blocksizes.\n\ncommit bdd46f9ee88057d52610161966a11c224e5a026c\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jan 24 17:23:18 2019 -0600\n\n    Rewrote reference kernels to use #pragma omp simd.\n    \n    Details:\n    - Rewrote level-1v, -1f, and -3 reference kernels in terms of simplified\n      indexing annotated by the #pragma omp simd directive, which a compiler\n      can use to vectorize certain constant-bounded loops. (The new kernels\n      actually use _Pragma(\"omp simd\") since the kernels are defined via\n      templatizing macros.) Modest speedup was observed in most cases using\n      gcc 5.4.0, which may improve with newer versions. Thanks to Devin\n      Matthews for suggesting this via issue #286 and #259.\n    - Updated default blocksizes defined in ref_kernels/bli_cntx_ref.c to\n      be 4x16, 4x8, 4x8, and 4x4 for single, double, scomplex and dcomplex,\n      respectively, with a default row preference for the gemm ukernel. Also\n      updated axpyf, dotxf, and dotxaxpyf fusing factors to 8, 6, and 4,\n      respectively, for all datatypes.\n    - Modified configure to verify that -fopenmp-simd is a valid compiler\n      option (via a new detect/omp_simd/omp_simd_detect.c file).\n    - Added a new header in which prefetch macros are defined according to\n      which compiler is detected (via macros such as __GNUC__). These\n      prefetch macros are not yet employed anywhere, though.\n    - Updated the year in copyrights of template license headers in\n      build/templates and removed AMD as a default copyright holder.\n\ncommit 63de2b0090829677755eb5cdb27e73bc738da32d\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jan 23 12:16:27 2019 -0600\n\n    Prevent redef of ftnlen in blastest f2c_types.h.\n    \n    Details:\n    - Guard typedef of ftnlen in f2c_types.h with a #ifndef HAVE_BLIS_H\n      directive to prevent the redefinition of that type. Thanks to Jeff\n      Diamond for reporting this compiler warning (and apologies for the\n      delay in committing a fix).\n\ncommit eec2e183a7b7d67702dbd1f39c153f38148b2446\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 21 12:12:18 2019 -0600\n\n    Added escaping to '/' in os_name in configure.\n    \n    Details:\n    - Add os_name to the list of variables into which the '/' character is\n      escaped. This is meant to address (or at least make progress toward\n      addressing) #293. Thanks to Isuru Fernando for spotting this as the\n      potential fix, and also thanks to M. Zhou for the original report.\n\ncommit adf5c17f0839fdbc1f4a1780f637928b1e78e389\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Fri Jan 18 15:14:45 2019 -0600\n\n    Formally registered thunderx2 subconfiguration.\n    \n    Details:\n    - Added a separate subconfiguration for thunderx2, which now uses\n      different optimization flags than cortexa57/cortexa53.\n\ncommit 094cfdf7df6c2764c25fcbfce686ba29b933942c\nAuthor: M. Zhou <5723047+cdluminate@users.noreply.github.com>\nDate:   Fri Jan 18 18:46:13 2019 +0000\n\n    Port BLIS to GNU Hurd OS. (#294)\n    \n    Prevent blis.h from misidentifying Hurd as OSX.\n\ncommit 5d7d616e8e591c2f3c7c2d73220eb27ea484f9c9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 15 20:52:51 2019 -0600\n\n    README.md update re: mixeddt TOMS paper.\n\ncommit 58c7fb4788177487f73a3964b7a910fe4dc75941\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 8 17:00:27 2019 -0600\n\n    Added more matlab scripts for mixeddt paper.\n    \n    Details:\n    - Added a variant set of matlab scripts geared to producing plots that\n      reflect performance data gathered with and without extra memory\n      optimizations enabled. These scripts reside (for now) in\n      test/mixeddt/matlab/wawoxmem.\n\ncommit 34286eb914b48b56cdda4dfce192608b9f86d053\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Jan 8 11:41:20 2019 -0600\n\n    Minor update to docs/HardwareSupport.md.\n\ncommit 108b04dc5b1b1288db95f24088d1e40407d7bc88\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 7 20:16:31 2019 -0600\n\n    Regenerated symbols in build/libblis-symbols.def.\n    \n    Details:\n    - Reran ./build/regen-symbols.sh after running\n      'configure --enable-cblas auto' to reflect removal of\n      bli_malloc_pool() and bli_free_pool().\n\ncommit 706cbd9d5622f4690e6332a89cf41ab5c8771899\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 7 18:28:19 2019 -0600\n\n    Minor tweaks/cleanups to bli_malloc.c, _apool.c.\n    \n    Details:\n    - Removed malloc_ft and free_ft function pointer arguments from the\n      interface to bli_apool_init() after deciding that there is no need to\n      specify the malloc()/free() for blocks within the apool. (The apool\n      blocks are actually just array_t structs.) Instead, we simply call\n      bli_malloc_intl()/_free_intl() directly. This has the added benefit\n      of allowing additional output when memory tracing is enabled via\n      --enable-mem-tracing. Also made corresponding changes elsewhere in\n      the apool API.\n    - Changed the inner pools (elements of the array_t within the apool_t)\n      to use BLIS_MALLOC_POOL and BLIS_FREE_POOL instead of BLIS_MALLOC_INTL\n      and BLIS_FREE_INTL.\n    - Disabled definitions of bli_malloc_pool() and bli_free_pool() since\n      there are no longer any consumers of these functions.\n    - Very minor comment / printf() updates.\n\ncommit 579145039d945adbcad1177b1d53fb2d3f2e6573\nAuthor: Minh Quan Ho <1337056+hominhquan@users.noreply.github.com>\nDate:   Mon Jan 7 23:00:15 2019 +0100\n\n    Initialize error messages at compile time (#289)\n    \n    * Initialize error messages at compile time\n    \n    - Assigning strings directly to the bli_error_string array, instead of\n    snprintf() at execution-time.\n    \n    * Retired bli_error_init(), _finalize().\n    \n    Details:\n    - Removed functions obviated by changes in 80e8dc6: bli_error_init(),\n      bli_error_finalize(), and bli_error_init_msgs(), as well as calls to\n      the former two in bli_init.c.\n    \n    * Regenerated symbols in build/libblis-symbols.def.\n    \n    Details:\n    - Reran ./build/regen-symbols.sh after running\n      'configure --enable-cblas auto'.\n\ncommit aafbca086e36b6727d7be67e21fef5bd9ff7bfd9\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 7 12:38:21 2019 -0600\n\n    Updated external package language in README.md.\n    \n    Details:\n    - Updated/added comments about Fedora, OpenSUSE, and GNU Guix under the\n      newly-renamed \"External GNU/Linux packages\" section. Thanks to Dave\n      Love for providing these revisions.\n\ncommit daacfe68404c9cc8078e5e7ba49a8c7d93e8cda3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Mon Jan 7 12:12:47 2019 -0600\n\n    Allow running configure with python 3.4.\n    \n    Details:\n    - Relax version blacklisting of python3 to allow 3.4 or later instead\n      of 3.5 or later. Thanks to Dave Love for pointing out that 3.4 was\n      sufficient for the purpose of BLIS's build system. (It should be\n      noted that we're not sure which, if any, python3 versions prior to\n      3.4 are insufficient, and that the only thing stopping us from\n      determining this is the fact that these earlier versions of python3\n      are not readily available for us to test with.)\n    - Updated docs/BuildSystem.md to be explicit about current python2 vs\n      python3 version requirements.\n\ncommit cdbf16aa93234e0d6a80f0d0e385ec81e7b75465\nAuthor: prangana <pradeep.rao@amd.com>\nDate:   Fri Jan 4 15:59:21 2019 +0530\n\n    Update version 1.3\n    \n    Change-Id: I32a7d24af860e87a60396614075236afb65a28a9\n\ncommit cf9c1150515b8e9cc4f12e0d4787b3471b12ba4a\nAuthor: kdevraje <Kiran.Devrajegowda@amd.com>\nDate:   Thu Jan 3 09:51:46 2019 +0530\n\n     This commit adds a macro, which is to be enabled when BLIS is working on single instance mode\n    \n    Change-Id: I7f3fd654b78e64c4e6e24e9f0e245b1a30c492b0\n\ncommit ad8d9adb09a7dd267bbdeb2bd1fbbf9daf64ee76\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Jan 3 16:08:24 2019 -0600\n\n    README.md, CREDITS update.\n    \n    Details:\n    - Added \"What's New\" and \"What People Are Saying About BLIS\" sections to\n      README.md.\n    - Added missing github handles to various individuals' entries in the\n      CREDITS file.\n\ncommit 7052fca5aef430241278b67d24cef6fe33106904\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jan 2 13:48:40 2019 -0600\n\n    Apply f272c289 to bli_fmalloc_noalign().\n    \n    Details:\n    - Perform the same check for NULL return values and error message output\n      in bli_fmalloc_noalign() as is performed by bli_fmalloc_align(). (This\n      change was intended for f272c289.)\n\ncommit 528e3ad16a42311a852a8376101959b4ccd801a5\nMerge: 3126c52e f272c289\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jan 2 13:39:19 2019 -0600\n\n    Merge branch 'amd'\n\ncommit 3126c52ea795ffb7d30b16b7f7ccc2a288a6158d\nMerge: 61441b24 8091998b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jan 2 13:37:37 2019 -0600\n\n    Merge branch 'amd'\n\ncommit f272c2899a6764eedbe05cea874ee3bd258dbff3\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Wed Jan 2 12:34:15 2019 -0600\n\n    Add error message to malloc() check for NULL.\n    \n    Details:\n    - Output an error message if and when the malloc()-equivalent called by\n      bli_fmalloc_align() ever returns NULL. Everything was already in place\n      for this to happen, including the error return code, the error string\n      sprintf(), the error checking function bli_check_valid_malloc_buf()\n      definition, and its prototype. Thanks to Minh Quan Ho for pointing out\n      the missing error message.\n    - Increased the default block_ptrs_len for each inner pool stored in the\n      small block allocator from 10 to 25. Under normal execution, each\n      thread uses only 21 blocks, so this change will prevent the sba from\n      needing to resize the block_ptrs array of any given inner pool as\n      threads initially populate the pool with small blocks upon first\n      execution of a level-3 operation.\n    - Nix stray newline echo in configure.\n\ncommit eb97f778a1e13ee8d3b3aade05e479c4dfcfa7c0\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 25 20:17:09 2018 -0600\n\n    Added missing AMD copyrights to previous commit.\n    \n    Details:\n    - Forgot to add AMD copyrights to several touched files that did not\n      already have them in 2f31743.\n\ncommit 2f3174330fb29164097d664b7c84e05c7ced7d95\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 25 19:35:01 2018 -0600\n\n    Implemented a pool-based small block allocator.\n    \n    Details:\n    - Implemented a sophisticated data structure and set of APIs that track\n      the small blocks of memory (around 80-100 bytes each) used when\n      creating nodes for control and thread trees (cntl_t and thrinfo_t) as\n      well as thread communicators (thrcomm_t). The purpose of the small\n      block allocator, or sba, is to allow the library to transition into a\n      runtime state in which it does not perform any calls to malloc() or\n      free() during normal execution of level-3 operations, regardless of\n      the threading environment (potentially multiple application threads\n      as well as multiple BLIS threads). The functionality relies on a new\n      data structure, apool_t, which is (roughly speaking) a pool of\n      arrays, where each array element is a pool of small blocks. The outer\n      pool, which is protected by a mutex, provides separate arrays for each\n      application thread while the arrays each handle multiple BLIS threads\n      for any given application thread. The design minimizes the potential\n      for lock contention, as only concurrent application threads would\n      need to fight for the apool_t lock, and only if they happen to begin\n      their level-3 operations at precisely the same time. Thanks to Kiran\n      Varaganti and AMD for requesting this feature.\n    - Added a configure option to disable the sba pools, which are enabled\n      by default; renamed the --[dis|en]able-packbuf-pools option to\n      --[dis|en]able-pba-pools; and rewrote the --help text associated with\n      this new option and consolidated it with the --help text for the\n      option associated with the sba (--[dis|en]able-sba-pools).\n    - Moved the membrk field from the cntx_t to the rntm_t. We now pass in\n      a rntm_t* to the bli_membrk_acquire() and _release() APIs, just as we\n      do for bli_sba_acquire() and _release().\n    - Replaced all calls to bli_malloc_intl() and bli_free_intl() that are\n      used for small blocks with calls to bli_sba_acquire(), which takes a\n      rntm (in addition to the bytes requested), and bli_sba_release().\n      These latter two functions reduce to the former two when the sba pools\n      are disabled at configure-time.\n    - Added rntm_t* arguments to various cntl_t and thrinfo_t functions, as\n      required by the new usage of bli_sba_acquire() and _release().\n    - Moved the freeing of \"old\" blocks (those allocated prior to a change\n      in the block_size) from bli_membrk_acquire_m() to the implementation\n      of the pool_t checkout function.\n    - Miscellaneous improvements to the pool_t API.\n    - Added a block_size field to the pblk_t.\n    - Harmonized the way that the trsm_ukr testsuite module performs packing\n      relative to that of gemmtrsm_ukr, in part to avoid the need to create\n      a packm control tree node, which now requires a rntm_t that has been\n      initialized with an sba and membrk.\n    - Re-enable explicit call bli_finalize() in testsuite so that users who\n      run the testsuite with memory tracing enabled can check for memory\n      leaks.\n    - Manually imported the compact/minor changes from 61441b24 that cause\n      the rntm to be copied locally when it is passed in via one of the\n      expert APIs.\n    - Reordered parameters to various bli_thrcomm_*() functions so that the\n      thrcomm_t* to the comm being modified is last, not first.\n    - Added more descriptive tracing for allocating/freeing small blocks and\n      formalized via a new configure option: --[dis|en]able-mem-tracing.\n    - Moved some unused scalm code and headers into frame/1m/other.\n    - Whitespace changes to bli_pthread.c.\n    - Regenerated build/libblis-symbols.def.\n\ncommit 61441b24f3244a4b202c29611a4899dd5c51d3a1\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Dec 20 19:38:11 2018 -0600\n\n    Make local copy of user's rntm_t in level-3 ops.\n    \n    Details:\n    - In the case that the caller passes in a non-NULL rntm_t pointer into\n      one of the expert APIs for a level-3 operation (e.g. bli_gemm_ex()),\n      make a local copy of the rntm_t and use the address of that local copy\n      in all subsequent execution (which may change the contents of the\n      rntm_t). This prevents a potentially confusing situation whereby a\n      user-initialized rntm_t is used once (in, say, gemm), and then found\n      by the user to be in a different state before it is used a second\n      time.\n\ncommit e809b5d2f1023b4249969e2f516291c9a3a00b80\nMerge: 76016691 0476f706\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Thu Dec 20 16:27:26 2018 -0600\n\n    Merge branch 'master' into amd\n\ncommit 1f4eeee5175a8fc9ac312847c796ce6db5fe75b9\nAuthor: sraut <Biplab.Raut@amd.com>\nDate:   Wed Dec 19 21:21:10 2018 +0530\n\n    Fixed BLAS test failures of small matrix SYRK for single and double precision.\n    \n    Details:\n    - SYRK for small matrix was implemented by reusing small GEMM routine. This was\n      resulting in output written to the full C matrix, and C being symmetric the\n      lower and upper triangles of C matrix contained same results. BLAS SYRK API\n      spec demands either lower or upper triangle of C matrix to be written with\n      results. So, this was resulting in BLAS test failures, even though testsuite\n      of BLIS was passing small SYRK operation.\n    - To fix BLAS test failures of small matrix SYRK, separate kernel routines are\n      implemented for small SYRK for both single and double precision. The newly\n      added small SYRK routines are in file kernels/zen/3/bli_syrk_small.c.\n      Now the intermediate results of matrix C are written to a scratch buffer.\n      Final results are written from scratch buffer to matrix C using SIMD\n      copy to either lower or upper traingle part of matrix C.\n    - Source and header files frame/3/syrk/bli_syrk_front.c and\n      frame/3/syrk/bli_syrk_front.h are changed to invoke new small SYRK routines.\n    \n    Change-Id: I9cfb1116c93d150aefac673fca033952ecac97cb\n\ncommit 6d267375c3a0543f20604d74cc678ad91db3b6f1\nAuthor: sraut <Biplab.Raut@amd.com>\nDate:   Wed Dec 19 14:22:21 2018 +0530\n\n    This commit improves the performance of multi-instance DGEMM when these multiple threads are binded to a CCX.\n    Multi-Instance: Each thread runs a sequential DGEMM.\n    Change-Id: I306920c8061b6dad61efac1dae68727f4ac27df6\n\ncommit 0476f706b93e83f6b74a3d7b7e6e9cc9a1a52c3b\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 18 14:56:20 2018 -0600\n\n    CHANGELOG update (0.5.1)\n\ncommit e0408c3ca3d53bc8e6fedac46ea42c86e06c922d (tag: 0.5.1)\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 18 14:56:16 2018 -0600\n\n    Version file update (0.5.1)\n\ncommit 3ab231afc9f69d14493908c53c85a84c5fba58aa\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 18 14:53:37 2018 -0600\n\n    ReleaseNotes.md update in advance of next version.\n    \n    Details:\n    - Updated ReleaseNotes.md in preparation for next version.\n\ncommit d1aa87164e1e82347d62aa98793963c5265ef7e7\nAuthor: Field G. Van Zee <field@cs.utexas.edu>\nDate:   Tue Dec 18 14:52:40 2018 -0600\n\n    README.md update (External packages section).\n    \n    Details:\n    - Updated External packages section in anticipation of introducing BLIS\n      into Debian package universe. Thanks to M. Zhou for sponsoring BLIS in\n      Debian.\n\ncommit 7bf901e9265a1acd78e44c06f7178c8152c7e267\nAuthor: sraut <Biplab.Raut@amd.com>\nDate:   Tue Dec 18 14:39:16 2018 +0530\n\n    Fix on EPYC machine for multi instance performance issue,\n    Issue: For the default values of mc, kc and nc with multi instance mode the performance across the cores dip drastically.\n    Fix: After experimentation found different set o"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.7548828125,
          "content": "## How to contribute to BLIS\n\nFirst, we want to thank you for your interest in contributing to BLIS! Please read through the following guidelines to help you better understand how to best contribute your potential bug report, bugfix, feature, etc.\n\n#### **Did you find a bug?**\n\n* **Check if the bug has already been reported** by searching on GitHub under [Issues](https://github.com/flame/blis/issues).\n\n* If you can't find an open issue addressing the problem, please feel free to [open a new one](https://github.com/flame/blis/issues/new). Some things to keep in mind as you create your issue:\n   * Be sure to include a **meaningful title**. Aim for a title that is neither overly general nor overly specific.\n   * Putting some time into writing a **clear description** will help us understand your bug and how you found it.\n   * You are welcome to include the BLIS version number (e.g. 0.3.2-15) if you wish, but please supplement it with the **actual git commit number** corresponding to the code that exhibits your reported behavior (the first seven or eight hex digits is fine).\n   * Unless you are confident that it's not relevant, it's usually recommended that you **tell us how you configured BLIS** and **about your environment in general**. Your hardware microarchitecture, OS, compiler (including version), `configure` options, configuration target are all good examples of things to you may wish to include. If the bug involves elements of the build system such as bash or python functionality, please include those versions numbers, too.\n   * If your bug involves behavior observed after linking to BLIS and running an application, please provide a minimally illustrative **code sample** that developers can run to (hopefully) reproduce the error or other concerning behavior.\n\n#### **Did you write a patch that fixes a bug?**\n\nIf so, great, and thanks for your efforts! Please submit a new GitHub [pull request](https://github.com/flame/blis/pulls) with the patch.\n\n* Ensure the PR description clearly describes the problem and solution. Include any relevant issue numbers, if applicable.\n\n* Please limit your PR to addressing one issue at a time. For example, if you are fixing a bug and in the process you find a second, unrelated bug, please open a separate PR for the second bug (or, if the bugfix to the second bug is not obvious, you can simply open an [issue](https://github.com/flame/blis/issues/new) for the second bug).\n\n* Before submitting new code, please read the [coding conventions](https://github.com/flame/blis/wiki/CodingConventions) guide to learn more about our preferred coding conventions. (It's unlikely that we will turn away your contributed code due to mismatched coding styles, but it will be **highly** appreciated by project maintainers since it will save them the time of digressing from their work--whether now or later--to reformat your code.)\n\n#### **Did you fix whitespace or reformat code?**\n\nUnlike some other projects, if you find code that does not abide by the project's [coding conventions](https://github.com/flame/blis/wiki/CodingConventions) and you would like to bring that code up to our standards, we will be happy to accept your contribution. Please note in the commit log the fixing of whitespace, formatting, etc. as applicable.\n\nIf you are making a more substantial contribution and in the vicinity of the affected code (i.e., within the same file) you stumble upon other code that works but could use some trivial changes or reformatting, you may combine the latter into the commit for the former. Just note in your commit log that you also fixed whitespace or applied reformatting.\n\n#### **Do you intend to add a new feature or change an existing one?**\n\nThat's fine, we are interested to hear your ideas!\n\n* You may wish to introduce your idea by opening an [issue](https://github.com/flame/blis/issues/new) to describe your new feature, or how an existing feature is not sufficiently general-purpose. This allows you the chance to open a dialogue with other developers, who may provide you with useful feedback.\n\n* Before submitting new code, please read the [coding conventions](https://github.com/flame/blis/wiki/CodingConventions) guide to learn more about our preferred coding conventions. (See comments above regarding mismatched coding styles.)\n\n#### **Do you have questions about the source code?**\n\n* Feel free to ask questions on the [blis-devel mailing list](https://groups.google.com/d/forum/blis-devel). You'll have to join to post, but don't be shy! Most of the interesting discussion (outside of GitHub) happens on blis-devel. We also have a [blis-discuss mailing list](https://groups.google.com/d/forum/blis-discuss), but it is not the preferred venue for discussion these days.\n\nHere at the BLIS project, we :heart: our community. :) Thanks for helping to make BLIS better!\n\nField\n\n"
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 8.34375,
          "content": "\nBLIS framework\nAcknowledgements\n---\n\nThe BLIS framework was originally authored by\n\n  Field Van Zee            @fgvanzee                  (The University of Texas at Austin)\n\nbut many others have contributed code, ideas, and feedback, including\n\n  Sameer Agarwal           @sandwichmaker             (Google)\n  Murtaza Ali                                         (Texas Instruments)\n  Sajid Ali                @s-sajid-ali               (Northwestern University)\n  Erling Andersen          @erling-d-andersen\n  Alex Arslan              @ararslan\n  Vernon Austel                                       (IBM, T.J. Watson Research Center)\n  Mohsen Aznaveh           @Aznaveh                   (Texas A&M University)\n  Abhishek Bagusetty       @abagusetty                (Argonne National Laboratory)\n  Satish Balay             @balay                     (Argonne National Laboratory)\n  Kihiro Bando             @bandokihiro\n  Timo Betcke              @tbetcke                   (University College London)\n  Matthew Brett            @matthew-brett             (University of Birmingham)\n  Jérémie du Boisberranger @jeremiedbb\n  Jed Brown                @jedbrown                  (Argonne National Laboratory)\n  Alex Chiang              @alexsifivetw              (SiFive)\n  Robin Christ             @robinchrist\n  Dilyn Corner             @dilyn-corner\n  Mat Cross                @matcross                  (NAG)\n  Harsh Dave               @HarshDave12               (AMD)\n  Tim Davis                @DrTimothyAldenDavis       (Texas A&M University)\n                           @decandia50\n  Daniël de Kok            @danieldk                  (Explosion)\n  Kay Dewhurst             @jkd2016                   (Max Planck Institute, Halle, Germany)\n  Jeff Diamond                                        (Oracle)\n  Johannes Dieterich       @iotamudelta\n  Krzysztof Drewniak       @krzysz00\n  Marat Dukhan             @Maratyszcza               (Google)\n  Victor Eijkhout          @VictorEijkhout            (Texas Advanced Computing Center)\n  Evgeny Epifanovsky       @epifanovsky               (Q-Chem)\n  Isuru Fernando           @isuruf\n  James Foster             @jd-foster                 (CSIRO)\n  Roman Gareev             @gareevroman\n  Richard Goldschmidt      @SuperFluffy\n  Chris Goodyer\n  Alexander Grund          @Flamefire\n  John Gunnels             @jagunnels                 (IBM, T.J. Watson Research Center)\n  Ali Emre Gülcü           @Lephar\n                           @h-vetinari\n  Jeff Hammond             @jeffhammond               (Intel)\n  Jacob Gorm Hansen        @jacobgorm\n  Shivaprashanth H                                    (Global Edge)\n  Jean-Michel Hautbois     @jhautbois\n  Ian Henriksen            @insertinterestingnamehere (The University of Texas at Austin)\n  Greg Henry                                          (Intel)\n  Minh Quan Ho             @hominhquan\n  Matthew Honnibal         @honnibal\n  Stefan Husmann           @stefanhusmann\n  Aaron Hutchinson         @Aaron-Hutchinson          (SiFive)\n  Francisco Igual          @figual                    (Universidad Complutense de Madrid)\n                           @j-bm\n  Madeesh Kannan           @shadeMe\n  Tony Kelman              @tkelman\n  Lee Killough             @leekillough               (Tactical Computing Labs)\n  Mike Kistler             @mkistler                  (IBM, Austin Research Laboratory)\n  Nick Knight              @nick-knight               (SiFive)\n  Ivan Korostelev          @ivan23kor                 (University of Alberta)\n  Kyungmin Lee             @kyungminlee               (Ohio State University)\n  Michael Lehn             @michael-lehn\n                           @leo4678\n  Shmuel Levine            @ShmuelLevine\n                           @lschork2\n  Dave Love                @loveshack\n  Tze Meng Low                                        (The University of Texas at Austin)\n  Ye Luo                   @ye-luo                    (Argonne National Laboratory)\n  Ricardo Magana           @magania                   (Hewlett Packard Enterprise)\n  Madan mohan Manokar      @madanm3                   (AMD)\n  Giorgos Margaritis\n  Bryan Marker             @bamarker                  (The University of Texas at Austin)\n  Simon Lukas Märtens      @ACSimon33                 (RWTH Aachen University)\n  John Mather              @jmather-sesi              (SideFX Software)\n  Devin Matthews           @devinamatthews            (The University of Texas at Austin)\n  Stefanos Mavros          @smavros\n  Mithun Mohan             @MithunMohanKadavil        (AMD)\n                           @moon-chilled\n  Ilknur Mustafazade       @Runkli\n                           @nagsingh\n  Bhaskar Nallani          @BhaskarNallani            (AMD)\n  Stepan Nassyr            @stepannassyr              (Jülich Supercomputing Centre)\n  Bart Oldeman             @bartoldeman\n  Nisanth M P              @nisanthmp\n  Nisanth Padinharepatt                               (AMD)\n  Ajay Panyala             @ajaypanyala\n  Marc-Antoine Parent      @maparent                  (Conversence)\n  Devangi Parikh           @dnparikh                  (The University of Texas at Austin)\n  Elmar Peise              @elmar-peise               (RWTH-Aachen)\n  Clément Pernet           @ClementPernet\n  Ilya Polkovnichenko\n  Jack Poulson             @poulson                   (Stanford)\n  Mathieu Poumeyrol        @kali\n  Christos Psarras         @ChrisPsa                  (RWTH Aachen University)\n                           @pkubaj\n                           @qnerd\n  Michael Rader            @mrader1248\n  Pradeep Rao              @pradeeptrgit              (AMD)\n  Aleksei Rechinskii\n  Leick Robinson           @LeickR                    (Oracle)\n  Karl Rupp                @karlrupp\n  Martin Schatz                                       (The University of Texas at Austin)\n  Nico Schlömer            @nschloe\n  Angelika Schwarz         @angsch\n  Rene Sitt\n  Tony Skjellum            @tonyskjellum              (The University of Tennessee at Chattanooga)\n  Mikhail Smelyanskiy                                 (Intel, Parallel Computing Lab)\n  Barry Smith              @BarrySmith                (Argonne National Laboratory)\n  Nathaniel Smith          @njsmith\n  Shaden Smith             @ShadenSmith\n  Tyler Smith              @tlrmchlsmth               (The University of Texas at Austin)\n  Edward Smyth             @edwsmyth                  (AMD)\n  Snehith                  @ArcadioN09\n  Paul Springer            @springer13                (RWTH Aachen University)\n  Adam J. Stewart          @adamjstewart              (University of Illinois at Urbana-Champaign)\n  Vladimir Sukarev\n  Harihara Sudhan S        @ihariharasudhan           (AMD)\n  Chengguo Sun             @chengguosun\n  Christopher Taylor       @ct-clmsn                  (Tactical Computing Labs)\n  Santanu Thangaraj                                   (AMD)\n  Nicholai Tukanov         @nicholaiTukanov           (The University of Texas at Austin)\n  Rhys Ulerich             @RhysU                     (The University of Texas at Austin)\n  Robert van de Geijn      @rvdg                      (The University of Texas at Austin)\n  Meghana Vankadari        @Meghana-vankadari         (AMD)\n  Kiran Varaganti          @kvaragan                  (AMD)\n  Natalia Vassilieva                                  (Hewlett Packard Enterprise)\n  Andrew Wildman           @awild82                   (University of Washington)\n  Zhang Xianyi             @xianyi                    (Chinese Academy of Sciences)\n  Benda Xu                 @heroxbd\n  Guodong Xu               @docularxu                 (Linaro.org)\n  RuQing Xu                @xrq-phys                  (The University of Tokyo)\n  Srinivas Yadav           @srinivasyadav18\n  Costas Yamin             @cosstas\n  Michael Yeh              @myeh01                    (SiFive)\n  Chenhan Yu               @ChenhanYu                 (The University of Texas at Austin)\n  Roman Yurchak            @rth                       (Symerio)\n  Stefano Zampini          @stefanozampini\n  M. Zhou                  @cdluminate\n  Igor Zhuravlov           @jip                       (Far Eastern Federal University)\n                           @AngryLoki\n\nBLIS's development was partially funded by grants from industry\npartners, including\n\n  AMD\n  Hewlett Packard Enterprise\n  Huawei\n  Intel\n  Microsoft\n  Oracle\n  Texas Instruments\n\nas well as the National Science Foundation (NSF Awards CCF-0917167,\nACI-1148125/1340293, ACI-1550493, and CCF-1320112).\n\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.8662109375,
          "content": "\nBLIS framework\nINSTALL\n---\n\nFor a detailed description of how to configure, compile, install, and link\nto a BLIS library on your local system, please read the build system\ndocumentation located in:\n\n  docs/BuildSystem.md\n\nNote that the document's markdown content can be conveniently rendered by\nviewing the file over GitHub via a web browser:\n\n  https://github.com/flame/blis/blob/master/docs/BuildSystem.md\n\nThis document will always contain the most up-to-date information related\nto instantiating a BLIS library from the framework source code. If you have\nany further questions or wish to provide feedback, please contact the BLIS\ncommunity by either by joining our Discord community! Instructions for\njoining may be found in:\n\n  docs/Discord.md\n\nor in rendered form at:\n\n  https://github.com/flame/blis/blob/master/docs/Discord.md\n\nThanks for your interest in the BLIS framework!\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.0390625,
          "content": "NOTE: Portions of this project's code are copyrighted by\n\n  The University of Texas at Austin\n\nwhile other portions are copyrighted by\n\n  Hewlett Packard Enterprise Development LP\n  Advanced Micro Devices, Inc.\n  Oracle Corporation\n\nwith some overlap. Please see file-level license headers for file-specific\ncopyright info. All parties provide their portions of the code under the\n3-clause BSD license, found below.\n\n---\n\nCopyright (C) 2012 - 2022, The University of Texas at Austin\nCopyright (C) 2016, Hewlett Packard Enterprise Development LP\nCopyright (C) 2018 - 2019, Advanced Micro Devices, Inc.\nCopyright (C) 2022, Oracle Corporation\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n - Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n - Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n - Neither the name(s) of the copyright holder(s) nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 55.7236328125,
          "content": "#\n#\n#  BLIS\n#  An object-based framework for developing high-performance BLAS-like\n#  libraries.\n#\n#  Copyright (C) 2014, The University of Texas at Austin\n#  Copyright (C) 2022, Advanced Micro Devices, Inc.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are\n#  met:\n#   - Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n#   - Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#   - Neither the name(s) of the copyright holder(s) nor the names of its\n#     contributors may be used to endorse or promote products derived\n#     from this software without specific prior written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n#  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n#\n\n#\n# Makefile\n#\n# Field G. Van Zee\n#\n# Top-level makefile for libflame linear algebra library.\n#\n#\n\n#\n# --- Makefile PHONY target definitions ----------------------------------------\n#\n\n.PHONY: all \\\n        libs libblis \\\n        check-env check-env-mk check-env-fragments check-env-make-defs \\\n        flat-header flat-cblas-header \\\n        test \\\n        testblas blastest-f2c blastest-bin blastest-run \\\n        testsuite testsuite-bin \\\n        testsuite-run testsuite-run-fast testsuite-run-md testsuite-run-salt \\\n        testblis testblis-fast testblis-md testblis-salt \\\n        check checkblas \\\n        checkblis checkblis-fast checkblis-md checkblis-salt \\\n        install-headers install-helper-headers install-libs install-lib-symlinks \\\n        showconfig \\\n        clean cleanmk cleanh cleanlib distclean \\\n        cleantest cleanblastest cleanblistest \\\n        changelog \\\n        symbols \\\n        install uninstall uninstall-old \\\n        uninstall-libs uninstall-lib-symlinks uninstall-headers \\\n        uninstall-old-libs uninstall-lib-symlinks uninstall-old-headers\n\n#\n# --- Determine makefile fragment location -------------------------------------\n#\n\n# Comments:\n# - We don't need to define DIST_PATH, LIB_PATH, INC_PATH, or SHARE_PATH since\n#   the defaults in common.mk (and config.mk) are designed to work with the\n#   top-level Makefile.\n#DIST_PATH  := .\n#LIB_PATH    = ./lib/$(CONFIG_NAME)\n#INC_PATH    = ./include/$(CONFIG_NAME)\n#SHARE_PATH := .\n\n\n#\n# --- Include common makefile definitions --------------------------------------\n#\n\n# Define the name of the common makefile.\nCOMMON_MK_FILE    := common.mk\n\n# Include the configuration file.\n-include $(COMMON_MK_FILE)\n\n# Detect whether we actually got the configuration file. If we didn't, then\n# it is likely that the user has not yet generated it (via configure).\nifeq ($(strip $(COMMON_MK_INCLUDED)),yes)\nCOMMON_MK_PRESENT := yes\nelse\nCOMMON_MK_PRESENT := no\nendif\n\n\n\n#\n# --- Main target variable definitions -----------------------------------------\n#\n\n# --- Object file paths ---\n\n# Construct the base object file path for the current configuration.\nBASE_OBJ_PATH          := ./$(OBJ_DIR)/$(CONFIG_NAME)\n\n# Construct base object file paths corresponding to the four locations\n# of source code.\nBASE_OBJ_CONFIG_PATH   := $(BASE_OBJ_PATH)/$(CONFIG_DIR)\nBASE_OBJ_FRAME_PATH    := $(BASE_OBJ_PATH)/$(FRAME_DIR)\nBASE_OBJ_REFKERN_PATH  := $(BASE_OBJ_PATH)/$(REFKERN_DIR)\nBASE_OBJ_KERNELS_PATH  := $(BASE_OBJ_PATH)/$(KERNELS_DIR)\nBASE_OBJ_ADDON_PATH    := $(BASE_OBJ_PATH)/$(ADDON_DIR)\nBASE_OBJ_SANDBOX_PATH  := $(BASE_OBJ_PATH)/$(SANDBOX_DIR)\n\n# --- Define install target names for static libraries ---\n\nLIBBLIS_A_INST            := $(INSTALL_LIBDIR)/$(LIBBLIS_A)\n\n# --- Define install target names for shared libraries ---\n\nLIBBLIS_SO_INST           := $(INSTALL_LIBDIR)/$(LIBBLIS_SO)\nLIBBLIS_SO_MAJ_INST       := $(INSTALL_LIBDIR)/$(LIBBLIS_SONAME)\n\nifeq ($(IS_WIN),yes)\n# The 'install' target does not create symlinks for Windows builds, so we don't\n# bother defining LIBBLIS_SO_MMB_INST.\nLIBBLIS_SO_MMB_INST       :=\nelse\nLIBBLIS_SO_MMB_INST       := $(INSTALL_LIBDIR)/$(LIBBLIS).$(LIBBLIS_SO_MMB_EXT)\nendif\n\n# --- Determine which libraries to build ---\n\nMK_LIBS                   :=\nMK_LIBS_INST              :=\nMK_LIBS_SYML              :=\n\nifeq ($(MK_ENABLE_STATIC),yes)\nMK_LIBS                   += $(LIBBLIS_A_PATH)\nMK_LIBS_INST              += $(LIBBLIS_A_INST)\nMK_LIBS_SYML              +=\nendif\nifeq ($(MK_ENABLE_SHARED),yes)\nMK_LIBS                   += $(LIBBLIS_SO_PATH) \\\n                             $(LIBBLIS_SO_MAJ_PATH)\nMK_LIBS_INST              += $(LIBBLIS_SO_MMB_INST)\nMK_LIBS_SYML              += $(LIBBLIS_SO_INST) \\\n                             $(LIBBLIS_SO_MAJ_INST)\nendif\n\n# Strip leading, internal, and trailing whitespace.\nMK_LIBS_INST              := $(strip $(MK_LIBS_INST))\nMK_LIBS_SYML              := $(strip $(MK_LIBS_SYML))\n\n# --- Define install directory for headers ---\n\n# Set the path to the subdirectory of the include installation directory.\nMK_INCL_DIR_INST          := $(INSTALL_INCDIR)/blis\n\n# --- Define install directory for public makefile fragments ---\n\n# Set the path to the subdirectory of the share installation directory.\nMK_SHARE_DIR_INST         := $(INSTALL_SHAREDIR)/blis\n\nPC_SHARE_DIR_INST         := $(INSTALL_SHAREDIR)/pkgconfig\n\n\n#\n# --- Library object definitions -----------------------------------------------\n#\n\n# In this section, we will isolate the relevant source code filepaths and\n# convert them to lists of object filepaths. Relevant source code falls into\n# four categories: configuration source; architecture-specific kernel source;\n# reference kernel source; and general framework source.\n\n# $(call gen-obj-paths-from-src file_exts, src_files, base_src_path, base_obj_path)\ngen-obj-paths-from-src = $(foreach ch, $(1), \\\n                             $(patsubst $(3)/%.$(ch), \\\n                                        $(4)/%.o, \\\n                                        $(filter %.$(ch), $(2)) ) )\n\n# Generate object file paths for source code found in the sub-configuration\n# directories.\nMK_CONFIG_OBJS      := $(call gen-obj-paths-from-src,$(CONFIG_SRC_SUFS),$(MK_CONFIG_SRC),$(CONFIG_PATH),$(BASE_OBJ_CONFIG_PATH))\n\n# Generate object file paths for architecture-specific kernel source code.\n# We target only .c, .s, and .S files. Note that MK_KERNELS_SRC is already\n# limited to the kernel source corresponding to the kernel sets in\n# KERNEL_LIST. This is because the configure script only propogated makefile\n# fragments into those specific kernel subdirectories.\nMK_KERNELS_OBJS     := $(call gen-obj-paths-from-src,$(KERNELS_SRC_SUFS),$(MK_KERNELS_SRC),$(KERNELS_PATH),$(BASE_OBJ_KERNELS_PATH))\n\n# Generate object file paths for reference kernels, with one set of object\n# files for each sub-configuration in CONFIG_LIST. Note that due to the\n# nuances of naming the reference kernel files, we can't use the function\n# gen-obj-paths-from-src as we do above and below.\nMK_REFKERN_C        := $(filter %.c, $(MK_REFKERN_SRC))\nMK_REFKERN_OBJS     := $(foreach arch, $(CONFIG_LIST), \\\n                           $(patsubst $(REFKERN_PATH)/%_$(REFNM).c, \\\n                                 $(BASE_OBJ_REFKERN_PATH)/$(arch)/%_$(arch)_$(REFNM).o, \\\n                                 $(MK_REFKERN_C) \\\n                            ) \\\n                        )\n\n# Generate object file paths for all of the portable framework source code.\nMK_FRAME_OBJS       := $(call gen-obj-paths-from-src,$(FRAME_SRC_SUFS),$(MK_FRAME_SRC),$(FRAME_PATH),$(BASE_OBJ_FRAME_PATH))\n\n# Generate object file paths for the addon source code. If one or more addons\n# were not enabled a configure-time, these variable will we empty.\n# NOTE: We separate the source and objects into kernel and non-kernel lists.\nMK_ADDON_KERS_SRC   := $(foreach addon, $(ADDON_LIST), \\\n                           $(filter $(ADDON_PATH)/$(addon)/$(KERNELS_DIR)/%, \\\n                                    $(MK_ADDON_SRC)) \\\n                        )\nMK_ADDON_OTHER_SRC  := $(foreach addon, $(ADDON_LIST), \\\n                           $(filter-out $(ADDON_PATH)/$(addon)/$(KERNELS_DIR)/%, \\\n                                        $(MK_ADDON_SRC)) \\\n                        )\nMK_ADDON_KERS_OBJS  := $(call gen-obj-paths-from-src,$(ADDON_SRC_SUFS),$(MK_ADDON_KERS_SRC),$(ADDON_PATH),$(BASE_OBJ_ADDON_PATH))\nMK_ADDON_OTHER_OBJS := $(call gen-obj-paths-from-src,$(ADDON_SRC_SUFS),$(MK_ADDON_OTHER_SRC),$(ADDON_PATH),$(BASE_OBJ_ADDON_PATH))\nMK_ADDON_OBJS       := $(MK_ADDON_KERS_OBJS) $(MK_ADDON_OTHER_OBJS)\n\n# Generate object file paths for the sandbox source code. If a sandbox was not\n# enabled a configure-time, this variable will we empty.\nMK_SANDBOX_OBJS     := $(call gen-obj-paths-from-src,$(SANDBOX_SRC_SUFS),$(MK_SANDBOX_SRC),$(SANDBOX_PATH),$(BASE_OBJ_SANDBOX_PATH))\n\n# AMD has chosen to introduce AOCL-specific optimizations to certain BLIS\n# framework files that are otherwise intended to remain generic. Upstream\n# developers of vanilla BLIS have agreed to integrate some of these\n# optimizations, but in a way that keeps the AOCL-specific code segregated\n# in separate files containing the suffix '_amd'. For example, the BLAS\n# compatibility layer in vanilla BLIS contains a generic file named\n# 'bla_gemm.c'. AMD's version of this file is named 'bla_gemm_amd.c'.\n# Only one or the other is ever built and included in libblis. Currently,\n# these files are chosen automatically based on the target configuration.\nifeq ($(ENABLE_AMD_FRAME_TWEAKS),yes)\n# Build is being done for AMD platforms; remove the objects which DO NOT have\n# an \"_amd\" suffix.\nMK_FRAME_AMD_OBJS  := $(filter $(BASE_OBJ_FRAME_PATH)/%amd.o, $(MK_FRAME_OBJS))\nFILES_TO_REMOVE := $(subst _amd.o,.o, $(MK_FRAME_AMD_OBJS))\nMK_FRAME_OBJS := $(filter-out $(FILES_TO_REMOVE), $(MK_FRAME_OBJS))\nelse\n# Build is being done for non-AMD platforms; remove the objects which DO have\n# an \"_amd\" suffix.\nMK_FRAME_AMD_OBJS  := $(filter $(BASE_OBJ_FRAME_PATH)/%amd.o, $(MK_FRAME_OBJS))\nMK_FRAME_OBJS := $(filter-out $(MK_FRAME_AMD_OBJS), $(MK_FRAME_OBJS))\nendif\n\n# Combine all of the object files into some readily-accessible variables.\nMK_BLIS_OBJS        := $(MK_CONFIG_OBJS) \\\n                       $(MK_KERNELS_OBJS) \\\n                       $(MK_REFKERN_OBJS) \\\n                       $(MK_FRAME_OBJS) \\\n                       $(MK_ADDON_OBJS) \\\n                       $(MK_SANDBOX_OBJS)\n\n# Optionally filter out the BLAS and CBLAS compatibility layer object files.\n# This is not actually necessary, since each affected file is guarded by C\n# preprocessor macros, but it but prevents \"empty\" object files from being\n# added into the library (and reduces compilation time).\nBASE_OBJ_BLAS_PATH  := $(BASE_OBJ_FRAME_PATH)/compat\nBASE_OBJ_CBLAS_PATH := $(BASE_OBJ_FRAME_PATH)/compat/cblas\nifeq ($(MK_ENABLE_CBLAS),no)\nMK_BLIS_OBJS        := $(filter-out $(BASE_OBJ_CBLAS_PATH)/%.o, $(MK_BLIS_OBJS) )\nendif\nifeq ($(MK_ENABLE_BLAS),no)\nMK_BLIS_OBJS        := $(filter-out $(BASE_OBJ_BLAS_PATH)/%.o,  $(MK_BLIS_OBJS) )\nendif\n\n\n\n#\n# --- Monolithic header definitions --------------------------------------------\n#\n\n# Define lists of headers to create/install. The default is to only\n# create/install blis.h.\nHEADERS_TO_BUILD        := $(BLIS_H_FLAT)\nHEADERS_TO_INSTALL      := $(BLIS_H_FLAT)\n\n# If CBLAS is enabled, we also create/install cblas.h. This allows the user to\n# continue using #include \"cblas.h\" in their application, if they wish. (NOTE:\n# The user can also access CBLAS definitions and function prototypes by\n# #include'ing \"blis.h\".)\nifeq ($(MK_ENABLE_CBLAS),yes)\nHEADERS_TO_BUILD   += $(CBLAS_H_FLAT)\nHEADERS_TO_INSTALL += $(CBLAS_H_FLAT)\nendif\n\n# If requested, include AMD's C++ template header files in the list of headers\n# to install.\nifeq ($(INSTALL_HH),yes)\nHEADERS_TO_INSTALL += $(wildcard $(VEND_CPP_PATH)/*.hh)\nendif\n\n# Define a list of so-called helper headers to install. These helper headers\n# are very simple headers that go one directory up from INCDIR/blis (which\n# by default is PREFIX/include/blis, where PREFIX is the install prefix). The\n# default is to only install the blis.h helper header.\nHELP_HEADERS_TO_INSTALL := $(HELP_BLIS_H_PATH)\nHELP_HEADERS_INSTALLED  := $(INSTALL_INCDIR)/$(BLIS_H)\n\n# If CBLAS is enabled, we also install the cblas.h helper header.\nifeq ($(MK_ENABLE_CBLAS),yes)\nHELP_HEADERS_TO_INSTALL += $(HELP_CBLAS_H_PATH)\nHELP_HEADERS_INSTALLED  += $(INSTALL_INCDIR)/$(CBLAS_H)\nendif\n\n\n\n#\n# --- public makefile fragment definitions -------------------------------------\n#\n\n# Define a list of makefile fragments to install.\nFRAGS_TO_INSTALL := $(CONFIG_MK_FILE) \\\n                    $(COMMON_MK_FILE) \\\n                    $(DIST_PATH)/build/gen-make-frags/gen-make-frag.sh \\\n                    $(DIST_PATH)/build/gen-make-frags/fragment.mk \\\n                    $(DIST_PATH)/build/gen-make-frags/ignore_list \\\n                    $(DIST_PATH)/build/gen-make-frags/special_list \\\n                    $(DIST_PATH)/build/gen-make-frags/suffix_list \\\n                    $(DIST_PATH)/build/flatten-headers.py \\\n                    $(DIST_PATH)/build/mirror-tree.sh \\\n                    $(DIST_PATH)/config_registry \\\n                    $(DIST_PATH)/build/detect/iset/avx.s \\\n                    $(DIST_PATH)/build/detect/iset/avx512dq.s \\\n                    $(DIST_PATH)/build/detect/iset/avx512f.s \\\n                    $(DIST_PATH)/build/detect/iset/fma3.s \\\n                    $(DIST_PATH)/build/detect/iset/fma4.s\n\n# Define a list of plugin makefile fragments to install.\nPLUGIN_FRAGS_TO_INSTALL := $(DIST_PATH)/build/plugin/bli_plugin_init_ref.c \\\n                           $(DIST_PATH)/build/plugin/bli_plugin_init_zen3.c \\\n                           $(DIST_PATH)/build/plugin/bli_plugin_register.c \\\n                           $(DIST_PATH)/build/plugin/my_kernel_1_ref.c \\\n                           $(DIST_PATH)/build/plugin/my_kernel_2_ref.c \\\n                           $(DIST_PATH)/build/plugin/my_kernel_1_zen3.c \\\n                           $(DIST_PATH)/build/plugin/bli_plugin.h.in \\\n                           $(DIST_PATH)/build/plugin/config.mk.in \\\n                           $(DIST_PATH)/build/plugin/Makefile\n\nPC_IN_FILE  := blis.pc.in\nPC_OUT_FILE := blis.pc\n\n\n#\n# --- BLAS test drivers definitions --------------------------------------------\n#\n\n# The location of the BLAS test suite's input files.\nBLASTEST_INPUT_PATH    := $(DIST_PATH)/$(BLASTEST_DIR)/input\n\n# The location of the BLAS test suite object directory.\nBASE_OBJ_BLASTEST_PATH := $(BASE_OBJ_PATH)/$(BLASTEST_DIR)\n\n# The locations of the BLAS test suite source code (f2c and drivers).\nBLASTEST_F2C_SRC_PATH  := $(DIST_PATH)/$(BLASTEST_DIR)/f2c\nBLASTEST_DRV_SRC_PATH  := $(DIST_PATH)/$(BLASTEST_DIR)/src\n\n# The paths to object files we will create (f2c and drivers).\nBLASTEST_F2C_OBJS      := $(sort \\\n                          $(patsubst $(BLASTEST_F2C_SRC_PATH)/%.c, \\\n                                     $(BASE_OBJ_BLASTEST_PATH)/%.o, \\\n                                     $(wildcard $(BLASTEST_F2C_SRC_PATH)/*.c)) \\\n                           )\n\nBLASTEST_DRV_OBJS      := $(sort \\\n                          $(patsubst $(BLASTEST_DRV_SRC_PATH)/%.c, \\\n                                     $(BASE_OBJ_BLASTEST_PATH)/%.o, \\\n                                     $(wildcard $(BLASTEST_DRV_SRC_PATH)/*.c)) \\\n                           )\n\n# libf2c name and location.\nBLASTEST_F2C_LIB_NAME  := libf2c.a\nBLASTEST_F2C_LIB       := $(BASE_OBJ_BLASTEST_PATH)/$(BLASTEST_F2C_LIB_NAME)\n\n# The base names of each driver source file (ie: filename minus suffix).\nBLASTEST_DRV_BASES     := $(basename $(notdir $(BLASTEST_DRV_OBJS)))\n\n# The binary executable driver names.\nBLASTEST_DRV_BINS      := $(addsuffix .x,$(BLASTEST_DRV_BASES))\nBLASTEST_DRV_BIN_PATHS := $(addprefix $(BASE_OBJ_BLASTEST_PATH)/,$(BLASTEST_DRV_BINS))\n\n# Binary executable driver \"run-\" names\nBLASTEST_DRV_BINS_R    := $(addprefix run-,$(BLASTEST_DRV_BASES))\n\n# Filter level-1, level-2, and level-3 names to different variables.\nBLASTEST_DRV1_BASES    := $(filter %1,$(BLASTEST_DRV_BASES))\nBLASTEST_DRV2_BASES    := $(filter %2,$(BLASTEST_DRV_BASES))\nBLASTEST_DRV3_BASES    := $(filter %3,$(BLASTEST_DRV_BASES))\n\n# Define some CFLAGS that we'll only use when compiling BLAS test suite\n# files.\nBLAT_CFLAGS            := -Wno-parentheses \\\n                          -I$(BLASTEST_F2C_SRC_PATH) \\\n                          -I. -DHAVE_BLIS_H\n\n# Suppress warnings about possibly uninitialized variables for the BLAS\n# test driver code (as output from f2c), which is riddled with such\n# variables, but only if the option to do so is supported.\nifeq ($(CC_VENDOR),gcc)\nBLAT_CFLAGS            += -Wno-maybe-uninitialized\nendif\n\n# The location of the script that checks the BLAS test output.\nBLASTEST_CHECK_PATH    := $(DIST_PATH)/$(BLASTEST_DIR)/$(BLASTEST_CHECK)\n\n\n#\n# --- BLIS testsuite definitions -----------------------------------------------\n#\n\n# The location of the test suite's general and operations-specific\n# input/configuration files.\nTESTSUITE_CONF_GEN_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_CONF_GEN)\nTESTSUITE_CONF_OPS_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_CONF_OPS)\nTESTSUITE_FAST_GEN_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_FAST_GEN)\nTESTSUITE_FAST_OPS_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_FAST_OPS)\nTESTSUITE_MIXD_GEN_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_MIXD_GEN)\nTESTSUITE_MIXD_OPS_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_MIXD_OPS)\nTESTSUITE_SALT_GEN_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_SALT_GEN)\nTESTSUITE_SALT_OPS_PATH := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_SALT_OPS)\n\n# The locations of the test suite source directory and the local object\n# directory.\nTESTSUITE_SRC_PATH      := $(DIST_PATH)/$(TESTSUITE_DIR)/src\nBASE_OBJ_TESTSUITE_PATH := $(BASE_OBJ_PATH)/$(TESTSUITE_DIR)\n\n# Convert source file paths to object file paths by replacing the base source\n# directories with the base object directories, and also replacing the source\n# file suffix (eg: '.c') with '.o'.\nMK_TESTSUITE_OBJS       := $(sort \\\n                           $(patsubst $(TESTSUITE_SRC_PATH)/%.c, \\\n                                      $(BASE_OBJ_TESTSUITE_PATH)/%.o, \\\n                                      $(wildcard $(TESTSUITE_SRC_PATH)/*.c)) \\\n                            )\n\n# The test suite binary executable filename.\n# NOTE: The TESTSUITE_WRAPPER variable defaults to the empty string if it\n# is not already set, in which case it has no effect lateron when the\n# testsuite binary is executed via lines such as\n#\n#   $(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) ... > $(TESTSUITE_OUT_FILE)\n#\n# The reason TESTSUITE_WRAPPER is employed in this way is so that some\n# unusual environments (e.g. ARM) can run the testsuite through some other\n# binary. See .travis.yml for details on how the variable is employed in\n# practice.\nTESTSUITE_BIN           := test_$(LIBBLIS).x\nTESTSUITE_WRAPPER       ?=\n\n# The location of the script that checks the BLIS testsuite output.\nTESTSUITE_CHECK_PATH    := $(DIST_PATH)/$(TESTSUITE_DIR)/$(TESTSUITE_CHECK)\n\n\n\n#\n# --- Uninstall definitions ----------------------------------------------------\n#\n\nifeq ($(IS_CONFIGURED),yes)\n\n# These shell commands gather the filepaths to any library in the current\n# LIBDIR that might be left over from an old installation. We start with\n# including nothing for static libraries, since older static libraries are\n# always overwritten by newer ones. Then we add shared libraries, which are\n# named with three .so version numbers.\nUNINSTALL_OLD_LIBS    :=\n\nUNINSTALL_OLD_LIBS    += $(filter-out $(INSTALL_LIBDIR)/$(LIBBLIS).$(LIBBLIS_SO_MMB_EXT),$(wildcard $(INSTALL_LIBDIR)/$(LIBBLIS_SO).?.?.?))\n\n# These shell commands gather the filepaths to any library symlink in the\n# current LIBDIR that might be left over from an old installation. We start\n# with symlinks named using the .so major version number.\nUNINSTALL_OLD_SYML    := $(filter-out $(INSTALL_LIBDIR)/$(LIBBLIS_SO).$(SO_MAJOR),$(wildcard $(INSTALL_LIBDIR)/$(LIBBLIS_SO).?))\n\n# We also prepare to uninstall older-style symlinks whose names contain the\n# BLIS version number and configuration family.\nUNINSTALL_OLD_SYML    += $(wildcard $(INSTALL_LIBDIR)/$(LIBBLIS)-*.a)\nUNINSTALL_OLD_SYML    += $(wildcard $(INSTALL_LIBDIR)/$(LIBBLIS)-*.$(SHLIB_EXT))\n\n# This shell command grabs all files named \"*.h\" that are not blis.h or cblas.h\n# in the installation directory. We consider this set of headers to be \"old\" and\n# eligible for removal upon running of the uninstall-old-headers target.\nUNINSTALL_OLD_HEADERS := $(filter-out $(BLIS_H),$(filter-out $(CBLAS_H),$(wildcard $(INSTALL_INCDIR)/blis/*.h)))\n\nendif # IS_CONFIGURED\n\n\n#\n# --- Targets/rules ------------------------------------------------------------\n#\n\n# --- Primary targets ---\n\nall: libs\n\nlibs: libblis\n\ntest: checkblis checkblas\n\ncheck: checkblis-fast checkblas\n\ninstall: libs install-libs install-lib-symlinks install-headers install-share\n\nuninstall: uninstall-libs uninstall-lib-symlinks uninstall-headers uninstall-share\n\nuninstall-old: uninstall-old-libs uninstall-old-symlinks uninstall-old-headers\n\nclean: cleanh cleanlib\n\n\n# --- Environment check rules ---\n\ncheck-env: check-env-make-defs check-env-fragments check-env-mk\n\ncheck-env-mk:\nifeq ($(CONFIG_MK_PRESENT),no)\n\t$(error Cannot proceed: config.mk not detected! Run configure first)\nendif\n\ncheck-env-fragments: check-env-mk\nifeq ($(MAKEFILE_FRAGMENTS_PRESENT),no)\n\t$(error Cannot proceed: makefile fragments not detected! Run configure first)\nendif\n\ncheck-env-make-defs: check-env-fragments\nifeq ($(ALL_MAKE_DEFS_MK_PRESENT),no)\n\t$(error Cannot proceed: Some make_defs.mk files not found or mislabeled!)\nendif\n\n\n# --- Shared/dynamic libblis symbol file creation/refresh ---\n\nsymbols: check-env $(SYM_FILE)\n\n$(SYM_FILE): $(HEADERS_TO_INSTALL)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(GEN_SYMS) > $(SYM_FILE)\nelse\n\t@echo \"Updating $(SYM_FILE)\"\n\t@$(GEN_SYMS) > $(SYM_FILE)\nendif\n\n\n# --- Consolidated blis.h header creation ---\n\nflat-header: check-env $(BLIS_H_FLAT)\n\n$(BLIS_H_FLAT): $(ALL_H99_FILES)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(FLATTEN_H) -l -v1 $(BLIS_H_SRC_PATH) $@ \"./$(INCLUDE_DIR)\" \"$(ALL_H99_DIRPATHS)\"\nelse\n\t@echo -n \"Generating monolithic blis.h\"\n\t@$(FLATTEN_H) -l -v1 $(BLIS_H_SRC_PATH) $@ \"./$(INCLUDE_DIR)\" \"$(ALL_H99_DIRPATHS)\"\n\t@echo \"Generated $@\"\nendif\n\n# --- Consolidated cblas.h header creation ---\n\nflat-cblas-header: check-env $(CBLAS_H_FLAT)\n\n# Note that the flattened blis.h is a prerequisite of flattening cblas.h. This\n# is done so that the two headers are built sequentially even when using\n# 'make -j[n]'. Otherwise, the output from the two processes can become\n# interleaved, which looks awkward/confusing.\n$(CBLAS_H_FLAT): $(FRAME_H99_FILES) $(BLIS_H_FLAT)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(FLATTEN_H) -l -v1 $(CBLAS_H_SRC_PATH) $@ \"./$(INCLUDE_DIR)\" \"$(ALL_H99_DIRPATHS)\"\nelse\n\t@echo -n \"Generating monolithic cblas.h\"\n\t@$(FLATTEN_H) -l -v1 $(CBLAS_H_SRC_PATH) $@ \"./$(INCLUDE_DIR)\" \"$(ALL_H99_DIRPATHS)\"\n\t@echo \"Generated $@\"\nendif\n\n\n# --- General source code / object code rules ---\n\n# FGVZ: Add support for compiling .s and .S files in 'config'/'kernels'\n# directories.\n#  - May want to add an extra foreach loop around function eval/call.\n\n# first argument: a configuration name from config_list, used to look up the\n# CFLAGS to use during compilation.\ndefine make-config-rule\n$(BASE_OBJ_CONFIG_PATH)/$(1)/%.o: $(CONFIG_PATH)/$(1)/%.c $(HEADERS_TO_BUILD) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-config-cflags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-config-text-for,$(1))\n\t@$(CC) $(call get-config-cflags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a configuration name from the union of config_list and\n# config_name, used to look up the CFLAGS to use during compilation.\ndefine make-frame-rule\n$(BASE_OBJ_FRAME_PATH)/%.o: $(FRAME_PATH)/%.c $(HEADERS_TO_BUILD) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-frame-cflags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-frame-text-for,$(1))\n\t@$(CC) $(call get-frame-cflags-for,$(1)) -c $$< -o $$@\nendif\n\nifneq ($(findstring hpx,$(THREADING_MODEL)),)\n$(BASE_OBJ_FRAME_PATH)/%.o: $(FRAME_PATH)/%.cpp $(HEADERS_TO_BUILD) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CXX) $(call get-frame-cxxflags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-frame-cxxtext-for,$(1))\n\t@$(CXX) $(call get-frame-cxxflags-for,$(1)) -c $$< -o $$@\nendif\nendif\nendef\n\n# first argument: a kernel set (name) being targeted (e.g. haswell).\ndefine make-refinit-rule\n$(BASE_OBJ_REFKERN_PATH)/$(1)/bli_cntx_$(1)_ref.o: $(REFKERN_PATH)/bli_cntx_ref.c $(HEADERS_TO_BUILD) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-refinit-cflags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-refinit-text-for,$(1))\n\t@$(CC) $(call get-refinit-cflags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a kernel set (name) being targeted (e.g. haswell).\ndefine make-refkern-rule\n$(BASE_OBJ_REFKERN_PATH)/$(1)/%_$(1)_ref.o: $(REFKERN_PATH)/%_ref.c $(HEADERS_TO_BUILD) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-refkern-cflags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-refkern-text-for,$(1))\n\t@$(CC) $(call get-refkern-cflags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a kernel set (name) being targeted (e.g. haswell).\n# second argument: the configuration whose CFLAGS we should use in compilation.\n# third argument: the kernel file suffix being considered.\ndefine make-kernels-rule\n$(BASE_OBJ_KERNELS_PATH)/$(1)/%.o: $(KERNELS_PATH)/$(1)/%.$(3) $(HEADERS_TO_BUILD) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-kernel-cflags-for,$(2)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-kernel-text-for,$(2))\n\t@$(CC) $(call get-kernel-cflags-for,$(2)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a configuration name from the union of config_list and\n# config_name, used to look up the CFLAGS to use during compilation.\n# second argument: the C99 addon file suffix being considered.\ndefine make-c99-addon-rule\n$(BASE_OBJ_ADDON_PATH)/%.o: $(ADDON_PATH)/%.$(2) $(HEADERS_TO_BUILD) $(ADDON_H99_FILES) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-addon-c99flags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-addon-c99text-for,$(1))\n\t@$(CC) $(call get-addon-c99flags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a configuration name from the union of config_list and\n# config_name, used to look up the CFLAGS to use during compilation.\n# second argument: the C99 addon file suffix being considered.\n# third argument: the name of the addon being considered.\ndefine make-c99-addon-kers-rule\n$(BASE_OBJ_ADDON_PATH)/$(3)/$(KERNELS_DIR)/%.o: $(ADDON_PATH)/$(3)/$(KERNELS_DIR)/%.$(2) $(HEADERS_TO_BUILD) $(ADDON_H99_FILES) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-addon-kernel-c99flags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-addon-kernel-text-for,$(1))\n\t@$(CC) $(call get-addon-kernel-c99flags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a configuration name from the union of config_list and\n# config_name, used to look up the CFLAGS to use during compilation.\n# second argument: the C++ addon file suffix being considered.\ndefine make-cxx-addon-rule\n$(BASE_OBJ_ADDON_PATH)/%.o: $(ADDON_PATH)/%.$(2) $(HEADERS_TO_BUILD) $(ADDON_HXX_FILES) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CXX) $(call get-addon-cxxflags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-addon-cxxtext-for,$(1))\n\t@$(CXX) $(call get-addon-cxxflags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a configuration name from the union of config_list and\n# config_name, used to look up the CFLAGS to use during compilation.\n# second argument: the C99 sandbox file suffix being considered.\ndefine make-c99-sandbox-rule\n$(BASE_OBJ_SANDBOX_PATH)/%.o: $(SANDBOX_PATH)/%.$(2) $(HEADERS_TO_BUILD) $(SANDBOX_H99_FILES) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-sandbox-c99flags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-sandbox-c99text-for,$(1))\n\t@$(CC) $(call get-sandbox-c99flags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# first argument: a configuration name from the union of config_list and\n# config_name, used to look up the CFLAGS to use during compilation.\n# second argument: the C++ sandbox file suffix being considered.\ndefine make-cxx-sandbox-rule\n$(BASE_OBJ_SANDBOX_PATH)/%.o: $(SANDBOX_PATH)/%.$(2) $(HEADERS_TO_BUILD) $(SANDBOX_HXX_FILES) $(MAKE_DEFS_MK_PATHS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CXX) $(call get-sandbox-cxxflags-for,$(1)) -c $$< -o $$@\nelse\n\t@echo \"Compiling $$@\" $(call get-sandbox-cxxtext-for,$(1))\n\t@$(CXX) $(call get-sandbox-cxxflags-for,$(1)) -c $$< -o $$@\nendif\nendef\n\n# Define functions to choose the correct sub-configuration name for the\n# given kernel set. This function is called when instantiating the\n# make-kernels-rule.\nget-config-for-kset = $(lastword $(subst :, ,$(filter $(1):%,$(KCONFIG_MAP))))\n\n# Instantiate the build rule for files in the configuration directory for\n# each of the sub-configurations in CONFIG_LIST with the CFLAGS designated\n# for that sub-configuration.\n$(foreach conf, $(CONFIG_LIST), $(eval $(call make-config-rule,$(conf))))\n\n# Instantiate the build rule for framework files. Use the CFLAGS for the\n# configuration family, which exists in the directory whose name is equal to\n# CONFIG_NAME. Note that this doesn't need to be in a loop since we expect\n# CONFIG_NAME to only ever contain a single name. (BTW: If CONFIG_NAME refers\n# to a singleton family, then CONFIG_LIST contains CONFIG_NAME as its only\n# item.)\n$(foreach conf, $(CONFIG_NAME), $(eval $(call make-frame-rule,$(conf))))\n\n# Instantiate the build rule for reference kernel initialization and\n# reference kernels for each of the sub-configurations in CONFIG_LIST with\n# the CFLAGS designated for that sub-configuration.\n$(foreach conf, $(CONFIG_LIST), $(eval $(call make-refinit-rule,$(conf))))\n$(foreach conf, $(CONFIG_LIST), $(eval $(call make-refkern-rule,$(conf))))\n\n# Instantiate the build rule for optimized kernels for each of the kernel\n# sets in KERNEL_LIST with the CFLAGS designated for the sub-configuration\n# specified by the KCONFIG_MAP.\n$(foreach suf, $(KERNELS_SRC_SUFS), \\\n$(foreach kset, $(KERNEL_LIST), $(eval $(call make-kernels-rule,$(kset),$(call get-config-for-kset,$(kset)),$(suf)))))\n\n# Instantiate the build rule for C addon files. Use the CFLAGS for the\n# configuration family.\n$(foreach suf, $(ADDON_C99_SUFS), \\\n$(foreach conf, $(CONFIG_NAME), $(eval $(call make-c99-addon-rule,$(conf),$(suf)))))\n\n# Instantiate the build rule for C addon/kernels files. Use the CFLAGS for the\n# configuration family.\n$(foreach addon, $(ADDON_LIST), \\\n$(foreach suf, $(ADDON_C99_SUFS), \\\n$(foreach conf, $(CONFIG_NAME), $(eval $(call make-c99-addon-kers-rule,$(conf),$(suf),$(addon))))))\n\n# Instantiate the build rule for C++ addon files. Use the CFLAGS for the\n# configuration family.\n$(foreach suf, $(ADDON_CXX_SUFS), \\\n$(foreach conf, $(CONFIG_NAME), $(eval $(call make-cxx-addon-rule,$(conf),$(suf)))))\n\n# Instantiate the build rule for C sandbox files. Use the CFLAGS for the\n# configuration family.\n$(foreach suf, $(SANDBOX_C99_SUFS), \\\n$(foreach conf, $(CONFIG_NAME), $(eval $(call make-c99-sandbox-rule,$(conf),$(suf)))))\n\n# Instantiate the build rule for C++ sandbox files. Use the CXXFLAGS for the\n# configuration family.\n$(foreach suf, $(SANDBOX_CXX_SUFS), \\\n$(foreach conf, $(CONFIG_NAME), $(eval $(call make-cxx-sandbox-rule,$(conf),$(suf)))))\n\n\n# --- All-purpose library rule (static and shared) ---\n\nlibblis: check-env $(MK_LIBS)\n\n\n# --- Static library archiver rules ---\n\n$(LIBBLIS_A_PATH): $(MK_BLIS_OBJS)\nifeq ($(ENABLE_VERBOSE),yes)\nifeq ($(ARG_MAX_HACK),yes)\n\t$(file > $@.in,$^)\n\t$(AR) $(ARFLAGS) $@ @$@.in\n\t$(RM_F) $@.in\n\t$(RANLIB) $@\nelse\n\t$(AR) $(ARFLAGS) $@ $?\n\t$(RANLIB) $@\nendif\nelse # ifeq ($(ENABLE_VERBOSE),no)\nifeq ($(ARG_MAX_HACK),yes)\n\t@echo \"Archiving $@\"\n\t@$(file > $@.in,$^)\n\t@$(AR) $(ARFLAGS) $@ @$@.in\n\t@$(RM_F) $@.in\n\t@$(RANLIB) $@\nelse\n\t@echo \"Archiving $@\"\n\t@$(AR) $(ARFLAGS) $@ $?\n\t@$(RANLIB) $@\nendif\nendif\n\n\n# --- Shared library linker rules ---\n\n$(LIBBLIS_SO_PATH): $(MK_BLIS_OBJS)\nifeq ($(ENABLE_VERBOSE),yes)\nifeq ($(ARG_MAX_HACK),yes)\n\t$(file > $@.in,$^)\n\t$(LINKER) $(SOFLAGS) -o $(LIBBLIS_SO_OUTPUT_NAME) @$@.in $(LDFLAGS)\n\t$(RM_F) $@.in\nelse\n\t$(LINKER) $(SOFLAGS) -o $(LIBBLIS_SO_OUTPUT_NAME) $^ $(LDFLAGS)\nendif\nelse # ifeq ($(ENABLE_VERBOSE),no)\nifeq ($(ARG_MAX_HACK),yes)\n\t@echo \"Dynamically linking $@\"\n\t@$(file > $@.in,$^)\n\t@$(LINKER) $(SOFLAGS) -o $(LIBBLIS_SO_OUTPUT_NAME) @$@.in $(LDFLAGS)\n\t@$(RM_F) $@.in\nelse\n\t@echo \"Dynamically linking $@\"\n\t@$(LINKER) $(SOFLAGS) -o $(LIBBLIS_SO_OUTPUT_NAME) $^ $(LDFLAGS)\nendif\nendif\n\n# Local symlink for shared library.\n# NOTE: We use a '.loc' suffix to avoid filename collisions in case this\n# rule is executed concurrently with the install-lib-symlinks rule, which\n# also creates symlinks in the current directory (before installing them).\n# NOTE: We don't create any symlinks during Windows builds.\n$(LIBBLIS_SO_MAJ_PATH): $(LIBBLIS_SO_PATH)\nifeq ($(IS_WIN),no)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(SYMLINK) $(<F) $(@F).loc\n\t$(MV) $(@F).loc $(BASE_LIB_PATH)/$(@F)\nelse # ifeq ($(ENABLE_VERBOSE),no)\n\t@echo \"Creating symlink $@\"\n\t@$(SYMLINK) $(<F) $(@F).loc\n\t@$(MV) $(@F).loc $(BASE_LIB_PATH)/$(@F)\nendif\nendif\n\n\n# --- BLAS test suite rules ---\n\ntestblas: blastest-run\n\nblastest-f2c: check-env $(BLASTEST_F2C_LIB)\n\nblastest-bin: check-env blastest-f2c $(BLASTEST_DRV_BIN_PATHS)\n\nblastest-run: $(BLASTEST_DRV_BINS_R)\n\n# f2c object file rule.\n$(BASE_OBJ_BLASTEST_PATH)/%.o: $(BLASTEST_F2C_SRC_PATH)/%.c $(HEADERS_TO_BUILD)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-user-cflags-for,$(CONFIG_NAME)) $(BLAT_CFLAGS) -c $< -o $@\nelse\n\t@echo \"Compiling $@\"\n\t@$(CC) $(call get-user-cflags-for,$(CONFIG_NAME)) $(BLAT_CFLAGS) -c $< -o $@\nendif\n\n# driver object file rule.\n$(BASE_OBJ_BLASTEST_PATH)/%.o: $(BLASTEST_DRV_SRC_PATH)/%.c $(HEADERS_TO_BUILD)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-user-cflags-for,$(CONFIG_NAME)) $(BLAT_CFLAGS) -c $< -o $@\nelse\n\t@echo \"Compiling $@\"\n\t@$(CC) $(call get-user-cflags-for,$(CONFIG_NAME)) $(BLAT_CFLAGS) -c $< -o $@\nendif\n\n# libf2c library archive rule.\n$(BLASTEST_F2C_LIB): $(BLASTEST_F2C_OBJS)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(AR) $(ARFLAGS) $@ $?\n\t$(RANLIB) $@\nelse\n\t@echo \"Archiving $@\"\n\t@$(AR) $(ARFLAGS) $@ $?\n\t@$(RANLIB) $@\nendif\n\n$(BASE_OBJ_BLASTEST_PATH)/%.x: $(BASE_OBJ_BLASTEST_PATH)/%.o $(BLASTEST_F2C_LIB) $(LIBBLIS_LINK)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(LINKER) $< $(BLASTEST_F2C_LIB) $(LIBBLIS_LINK) $(LDFLAGS) -o $@\nelse\n\t@echo \"Linking $@ against '$(notdir $(BLASTEST_F2C_LIB)) $(LIBBLIS_LINK) \"$(LDFLAGS)\"'\"\n\t@$(LINKER) $< $(BLASTEST_F2C_LIB) $(LIBBLIS_LINK) $(LDFLAGS) -o $@\nendif\n\n# A rule to run ?blat1.x driver files.\ndefine make-run-blat1-rule\nrun-$(1): $(BASE_OBJ_BLASTEST_PATH)/$(1).x\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(TESTSUITE_WRAPPER) $(BASE_OBJ_BLASTEST_PATH)/$(1).x > out.$(1)\nelse\n\t@echo \"Running $(1).x > 'out.$(1)'\"\n\t@$(TESTSUITE_WRAPPER) $(BASE_OBJ_BLASTEST_PATH)/$(1).x > out.$(1)\nendif\nendef\n\n# Instantiate the rule above for each level-1 driver file.\n$(foreach name, $(BLASTEST_DRV1_BASES), $(eval $(call make-run-blat1-rule,$(name))))\n\n# A rule to run ?blat2.x and ?blat3.x driver files.\ndefine make-run-blat23-rule\nrun-$(1): $(BASE_OBJ_BLASTEST_PATH)/$(1).x\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(TESTSUITE_WRAPPER) $(BASE_OBJ_BLASTEST_PATH)/$(1).x < $(BLASTEST_INPUT_PATH)/$(1).in\nelse\n\t@echo \"Running $(1).x < '$(BLASTEST_INPUT_PATH)/$(1).in' (output to 'out.$(1)')\"\n\t@$(TESTSUITE_WRAPPER) $(BASE_OBJ_BLASTEST_PATH)/$(1).x < $(BLASTEST_INPUT_PATH)/$(1).in\nendif\nendef\n\n# Instantiate the rule above for each level-2 driver file.\n$(foreach name, $(BLASTEST_DRV2_BASES), $(eval $(call make-run-blat23-rule,$(name))))\n\n# Instantiate the rule above for each level-3 driver file.\n$(foreach name, $(BLASTEST_DRV3_BASES), $(eval $(call make-run-blat23-rule,$(name))))\n\n# Check the results of the BLAS test suite drivers.\ncheckblas: blastest-run\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(BLASTEST_CHECK_PATH)\nelse\n\t@- $(BLASTEST_CHECK_PATH)\nendif\n\n# --- BLIS test suite rules ---\n\ntestblis: testsuite\n\ntestblis-fast: testsuite-run-fast\n\ntestblis-md: testsuite-run-md\n\ntestblis-salt: testsuite-run-salt\n\ntestsuite: testsuite-run\n\ntestsuite-bin: check-env $(TESTSUITE_BIN)\n\n# Object file rule.\n$(BASE_OBJ_TESTSUITE_PATH)/%.o: $(TESTSUITE_SRC_PATH)/%.c $(HEADERS_TO_BUILD)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(CC) $(call get-user-cflags-for,$(CONFIG_NAME)) -c $< -o $@\nelse\n\t@echo \"Compiling $@\"\n\t@$(CC) $(call get-user-cflags-for,$(CONFIG_NAME)) -c $< -o $@\nendif\n\n# Testsuite binary rule.\n$(TESTSUITE_BIN): $(MK_TESTSUITE_OBJS) $(LIBBLIS_LINK)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(LINKER) $(MK_TESTSUITE_OBJS) $(LIBBLIS_LINK) $(LDFLAGS) -o $@\nelse\n\t@echo \"Linking $@ against '$(LIBBLIS_LINK) \"$(LDFLAGS)\"'\"\n\t@$(LINKER) $(MK_TESTSUITE_OBJS) $(LIBBLIS_LINK) $(LDFLAGS) -o $@\nendif\n\n# A rule to run the testsuite using the normal input.* files.\ntestsuite-run: testsuite-bin\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_CONF_GEN_PATH) \\\n\t                   -o $(TESTSUITE_CONF_OPS_PATH) \\\n\t                    > $(TESTSUITE_OUT_FILE)\n\nelse\n\t@echo \"Running $(TESTSUITE_BIN) with output redirected to '$(TESTSUITE_OUT_FILE)'\"\n\t@$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_CONF_GEN_PATH) \\\n\t                    -o $(TESTSUITE_CONF_OPS_PATH) \\\n\t                     > $(TESTSUITE_OUT_FILE)\nendif\n\n# A rule to run the testsuite using the input.*.fast files, which\n# run a set of tests designed to finish much more quickly.\ntestsuite-run-fast: testsuite-bin\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_FAST_GEN_PATH) \\\n\t                   -o $(TESTSUITE_FAST_OPS_PATH) \\\n\t                    > $(TESTSUITE_OUT_FILE)\n\nelse\n\t@echo \"Running $(TESTSUITE_BIN) (fast) with output redirected to '$(TESTSUITE_OUT_FILE)'\"\n\t@$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_FAST_GEN_PATH) \\\n\t                    -o $(TESTSUITE_FAST_OPS_PATH) \\\n\t                     > $(TESTSUITE_OUT_FILE)\nendif\n\n# A rule to run the testsuite using the input.*.md files, which\n# run a set of tests designed to only exercise mixed-datatype gemm.\ntestsuite-run-md: testsuite-bin\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_MIXD_GEN_PATH) \\\n\t                   -o $(TESTSUITE_MIXD_OPS_PATH) \\\n\t                    > $(TESTSUITE_OUT_FILE)\n\nelse\n\t@echo \"Running $(TESTSUITE_BIN) (mixed dt) with output redirected to '$(TESTSUITE_OUT_FILE)'\"\n\t@$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_MIXD_GEN_PATH) \\\n\t                    -o $(TESTSUITE_MIXD_OPS_PATH) \\\n\t                     > $(TESTSUITE_OUT_FILE)\nendif\n\n# A rule to run the testsuite using the input.*.salt files, which\n# simulates application-level threading across operation tests.\ntestsuite-run-salt: testsuite-bin\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_SALT_GEN_PATH) \\\n\t                   -o $(TESTSUITE_SALT_OPS_PATH) \\\n\t                    > $(TESTSUITE_OUT_FILE)\n\nelse\n\t@echo \"Running $(TESTSUITE_BIN) (salt) with output redirected to '$(TESTSUITE_OUT_FILE)'\"\n\t@$(TESTSUITE_WRAPPER) ./$(TESTSUITE_BIN) -g $(TESTSUITE_SALT_GEN_PATH) \\\n\t                    -o $(TESTSUITE_SALT_OPS_PATH) \\\n\t                     > $(TESTSUITE_OUT_FILE)\nendif\n\n# Check the results of the BLIS testsuite.\ncheckblis: testsuite-run\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nelse\n\t@- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nendif\n\n# Check the results of the BLIS testsuite (fast).\ncheckblis-fast: testsuite-run-fast\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nelse\n\t@- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nendif\n\n# Check the results of the BLIS testsuite (mixed-datatype).\ncheckblis-md: testsuite-run-md\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nelse\n\t@- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nendif\n\n# Check the results of the BLIS testsuite (salt).\ncheckblis-salt: testsuite-run-salt\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nelse\n\t@- $(TESTSUITE_CHECK_PATH) $(TESTSUITE_OUT_FILE)\nendif\n\n\n# --- AMD's C++ template header test rules ---\n\n# NOTE: The targets below won't work as intended for an out-of-tree build,\n# and so it's disabled for now.\n\n#testcpp: testvendcpp\n\n# Recursively run the test for AMD's C++ template header.\n#testvendcpp:\n#\t$(MAKE) -C $(VEND_TESTCPP_PATH)\n\n\n# --- Install header rules ---\n\ninstall-headers: check-env $(MK_INCL_DIR_INST) install-helper-headers\n\n# Rule for installing main headers.\n$(MK_INCL_DIR_INST): $(HEADERS_TO_INSTALL) $(CONFIG_MK_FILE)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(MKDIR) $(@)\n\t$(INSTALL) -m 0644 $(HEADERS_TO_INSTALL) $(@)\nelse\n\t@$(MKDIR) $(@)\n\t@echo \"Installing $(notdir $(HEADERS_TO_INSTALL)) into $(@)/\"\n\t@$(INSTALL) -m 0644 $(HEADERS_TO_INSTALL) $(@)\nendif\n\ninstall-helper-headers: check-env $(HELP_HEADERS_INSTALLED)\n\n# A rule to install a helper header file.\ndefine make-helper-header-rule\n$(INSTALL_INCDIR)/$(notdir $(1)): $(BUILD_PATH)/$(notdir $(1)) $(CONFIG_MK_FILE)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(MKDIR) $(INSTALL_INCDIR)\n\t$(INSTALL) -m 0644 $$(<) $$(@)\nelse\n\t@$(MKDIR) $(INSTALL_INCDIR)\n\t@echo \"Installing $$(@F) helper header into $(INSTALL_INCDIR)/\"\n\t@$(INSTALL) -m 0644 $$(<) $$(@)\nendif\nendef\n\n# Instantiate the rule above for each helper header file to install.\n$(foreach h, $(HELP_HEADERS_TO_INSTALL), $(eval $(call make-helper-header-rule,$(h))))\n\n# --- Install share rules ---\n\ninstall-share: check-env $(MK_SHARE_DIR_INST) $(PC_SHARE_DIR_INST)\n\n$(MK_SHARE_DIR_INST): $(CONFIGURE_FILE) $(FRAGS_TO_INSTALL) $(PLUGIN_FRAGS_TO_INSTALL) $(CONFIG_DIR)/$(CONFIG_NAME)/$(MAKE_DEFS_FILE)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(MKDIR) $(@)\n\t$(MKDIR) $(@)/plugin\n\t$(INSTALL) -m 0755 $(filter %.sh,$(FRAGS_TO_INSTALL)) $(@)\n\t$(INSTALL) -m 0644 $(filter-out %.sh,$(FRAGS_TO_INSTALL)) $(@)\n\t$(INSTALL) -m 0644 $(PLUGIN_FRAGS_TO_INSTALL) $(@)/plugin\n\t$(INSTALL) -m 0755 $(CONFIGURE_FILE) $(@)/configure-plugin\n#\t$(MKDIR) -p $(@)/$(CONFIG_DIR)/$(CONFIG_NAME)\n#\t$(INSTALL) -m 0644 $(CONFIG_DIR)/$(CONFIG_NAME)/$(MAKE_DEFS_FILE) \\\n#\t              $(@)/$(CONFIG_DIR)/$(CONFIG_NAME)\n\tfor THIS_CONFIG in $(FULL_CONFIG_LIST); do \\\n\t\t$(MKDIR) -p $(@)/$(CONFIG_DIR)/$$THIS_CONFIG; \\\n\t\t$(INSTALL) -m 0644 $(CONFIG_DIR)/$$THIS_CONFIG/$(MAKE_DEFS_FILE) \\\n\t\t              $(@)/$(CONFIG_DIR)/$$THIS_CONFIG; \\\n\t\t$(INSTALL) -m 0644 $(CONFIG_DIR)/$$THIS_CONFIG/bli_kernel_defs_$$THIS_CONFIG.h \\\n\t\t              $(@)/$(CONFIG_DIR)/$$THIS_CONFIG; \\\n\tdone\nelse\n\t@$(MKDIR) $(@)\n\t@$(MKDIR) $(@)/plugin\n\t@echo \"Installing $(notdir $(FRAGS_TO_INSTALL)) into $(@)/\"\n\t@$(INSTALL) -m 0755 $(filter %.sh,$(FRAGS_TO_INSTALL)) $(@)\n\t@$(INSTALL) -m 0644 $(filter-out %.sh,$(FRAGS_TO_INSTALL)) $(@)\n\t@echo \"Installing $(notdir $(PLUGIN_FRAGS_TO_INSTALL)) into $(@)/plugin/\"\n\t@$(INSTALL) -m 0644 $(PLUGIN_FRAGS_TO_INSTALL) $(@)/plugin\n\t@echo \"Installing $(CONFIGURE_FILE) into $(@)/configure-plugin\"\n\t@$(INSTALL) -m 0755 $(CONFIGURE_FILE) $(@)/configure-plugin\n#\t@$(MKDIR) -p $(@)/$(CONFIG_DIR)/$(CONFIG_NAME)#\\\n#\t@echo \"Installing $(CONFIG_DIR)/$(CONFIG_NAME)/$(MAKE_DEFS_FILE) into $(@)/$(CONFIG_DIR)/$(CONFIG_NAME)\"\n#\t@$(INSTALL) -m 0644 $(CONFIG_DIR)/$(CONFIG_NAME)/$(MAKE_DEFS_FILE) \\\n#\t               $(@)/$(CONFIG_DIR)/$(CONFIG_NAME)/\n\t@for THIS_CONFIG in $(FULL_CONFIG_LIST); do \\\n\t\t$(MKDIR) -p $(@)/$(CONFIG_DIR)/$$THIS_CONFIG; \\\n\t\techo \"Installing $(CONFIG_DIR)/$$THIS_CONFIG/$(MAKE_DEFS_FILE) into $(@)/$(CONFIG_DIR)/$$THIS_CONFIG\"; \\\n\t\t$(INSTALL) -m 0644 $(CONFIG_DIR)/$$THIS_CONFIG/$(MAKE_DEFS_FILE) \\\n\t\t              $(@)/$(CONFIG_DIR)/$$THIS_CONFIG; \\\n\t\techo \"Installing $(CONFIG_DIR)/$$THIS_CONFIG/bli_kernel_defs_$$THIS_CONFIG.h into $(@)/$(CONFIG_DIR)/$$THIS_CONFIG\"; \\\n\t\t$(INSTALL) -m 0644 $(CONFIG_DIR)/$$THIS_CONFIG/bli_kernel_defs_$$THIS_CONFIG.h \\\n\t\t              $(@)/$(CONFIG_DIR)/$$THIS_CONFIG; \\\n\tdone\nendif\n\n$(PC_SHARE_DIR_INST): $(PC_IN_FILE)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(MKDIR) $(@)\n\t$(shell cat \"$(PC_IN_FILE)\" \\\n\t| sed -e \"s#@PACKAGE_VERSION@#$(VERSION)#g\" \\\n\t| sed -e \"s#@prefix@#$(prefix)#g\" \\\n\t| sed -e \"s#@exec_prefix@#$(exec_prefix)#g\" \\\n\t| sed -e \"s#@libdir@#$(libdir)#g\" \\\n\t| sed -e \"s#@includedir@#$(includedir)#g\" \\\n\t| sed -e \"s#@LDFLAGS@#$(LDFLAGS)#g\" \\\n\t> \"$(PC_OUT_FILE)\" )\n\t$(INSTALL) -m 0644 $(PC_OUT_FILE) $(@)\nelse\n\t@$(MKDIR) $(@)\n\t@echo \"Installing $(PC_OUT_FILE) into $(@)/\"\n\t@$(shell cat \"$(PC_IN_FILE)\" \\\n\t| sed -e \"s#@PACKAGE_VERSION@#$(VERSION)#g\" \\\n\t| sed -e \"s#@prefix@#$(prefix)#g\" \\\n\t| sed -e \"s#@exec_prefix@#$(exec_prefix)#g\" \\\n\t| sed -e \"s#@libdir@#$(libdir)#g\" \\\n\t| sed -e \"s#@includedir@#$(includedir)#g\" \\\n\t| sed -e \"s#@LDFLAGS@#$(LDFLAGS)#g\" \\\n\t> \"$(PC_OUT_FILE)\" )\n\t@$(INSTALL) -m 0644 $(PC_OUT_FILE) $(@)\nendif\n\n# --- Install library rules ---\n\ninstall-libs: check-env $(MK_LIBS_INST)\n\n# Install static library.\n$(INSTALL_LIBDIR)/%.a: $(BASE_LIB_PATH)/%.a $(CONFIG_MK_FILE)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(MKDIR) $(@D)\n\t$(INSTALL) -m 0644 $< $@\nelse\n\t@echo \"Installing $(@F) into $(INSTALL_LIBDIR)/\"\n\t@$(MKDIR) $(@D)\n\t@$(INSTALL) -m 0644 $< $@\nendif\n\n# Install shared library containing .so major, minor, and build versions.\n# Note: Installation rules for Windows does not include major, minor, and\n# build version numbers.\nifeq ($(IS_WIN),no)\n\n# Linux/OSX library (.so OR .dylib) installation rules.\n$(INSTALL_LIBDIR)/%.$(LIBBLIS_SO_MMB_EXT): $(BASE_LIB_PATH)/%.$(SHLIB_EXT) $(CONFIG_MK_FILE)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(MKDIR) $(@D)\n\t$(INSTALL) -m 0755 $< $@\nelse\n\t@echo \"Installing $(@F) into $(INSTALL_LIBDIR)/\"\n\t@$(MKDIR) $(@D)\n\t@$(INSTALL) -m 0755 $< $@\nendif\n\nelse # ifeq ($(IS_WIN),yes)\n\n# Windows library (.dll and .lib) installation rules.\n$(INSTALL_LIBDIR)/%.$(SHLIB_EXT): $(BASE_LIB_PATH)/%.$(SHLIB_EXT)\nifeq ($(ENABLE_VERBOSE),yes)\n\t@$(MKDIR) $(@D)\n\t@$(INSTALL) -m 0644 $(BASE_LIB_PATH)/$(@F) $@\nelse\n\t@echo \"Installing $(@F) into $(INSTALL_LIBDIR)/\"\n\t@$(MKDIR) $(@D)\n\t@$(INSTALL) -m 0644 $(BASE_LIB_PATH)/$(@F) $@\nendif\n\n$(INSTALL_LIBDIR)/%.$(LIBBLIS_SO_MAJ_EXT): $(BASE_LIB_PATH)/%.$(LIBBLIS_SO_MAJ_EXT)\nifeq ($(ENABLE_VERBOSE),yes)\n\t@$(MKDIR) $(@D)\n\t@$(INSTALL) -m 0644 $(BASE_LIB_PATH)/$(@F) $@\nelse\n\t@echo \"Installing $(@F) into $(INSTALL_LIBDIR)/\"\n\t@$(MKDIR) $(@D)\n\t@$(INSTALL) -m 0644 $(BASE_LIB_PATH)/$(@F) $@\nendif\n\nendif # ifeq ($(IS_WIN),no)\n\n# --- Install-symlinks rules ---\n\ninstall-lib-symlinks: check-env $(MK_LIBS_SYML)\n\n# Note: Symlinks are not installed on Windows.\nifeq ($(IS_WIN),no)\n\n# Install generic shared library symlink.\n$(INSTALL_LIBDIR)/%.$(SHLIB_EXT): $(INSTALL_LIBDIR)/%.$(LIBBLIS_SO_MMB_EXT)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(SYMLINK) $(<F) $(@F)\n\t$(MV) $(@F) $(INSTALL_LIBDIR)/\nelse\n\t@echo \"Installing symlink $(@F) into $(INSTALL_LIBDIR)/\"\n\t@$(SYMLINK) $(<F) $(@F)\n\t@$(MV) $(@F) $(INSTALL_LIBDIR)/\nendif\n\n# Install shared library symlink containing only .so major version.\n$(INSTALL_LIBDIR)/%.$(LIBBLIS_SO_MAJ_EXT): $(INSTALL_LIBDIR)/%.$(LIBBLIS_SO_MMB_EXT)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(SYMLINK) $(<F) $(@F)\n\t$(MV) $(@F) $(INSTALL_LIBDIR)/\nelse\n\t@echo \"Installing symlink $(@F) into $(INSTALL_LIBDIR)/\"\n\t@$(SYMLINK) $(<F) $(@F)\n\t@$(MV) $(@F) $(INSTALL_LIBDIR)/\nendif\n\nendif # ifeq ($(IS_WIN),no)\n\n# --- Query current configuration ---\n\nshowconfig: check-env\n\t@echo \"configuration family:       $(CONFIG_NAME)\"\n\t@echo \"sub-configurations:         $(CONFIG_LIST)\"\n\t@echo \"requisite kernels sets:     $(KERNEL_LIST)\"\n\t@echo \"kernel-to-config map:       $(KCONFIG_MAP)\"\n\t@echo \"-------------------------\"\n\t@echo \"BLIS version string:        $(VERSION)\"\n\t@echo \".so major version:          $(SO_MAJOR)\"\n\t@echo \".so minor.build vers:       $(SO_MINORB)\"\n\t@echo \"install libdir:             $(INSTALL_LIBDIR)\"\n\t@echo \"install includedir:         $(INSTALL_INCDIR)\"\n\t@echo \"install sharedir:           $(INSTALL_SHAREDIR)\"\n\t@echo \"debugging status:           $(DEBUG_TYPE)\"\n\t@echo \"enable AddressSanitizer?    $(MK_ENABLE_ASAN)\"\n\t@echo \"enabled threading model(s): $(THREADING_MODEL)\"\n\t@echo \"enable BLAS API?            $(MK_ENABLE_BLAS)\"\n\t@echo \"enable CBLAS API?           $(MK_ENABLE_CBLAS)\"\n\t@echo \"build static library?       $(MK_ENABLE_STATIC)\"\n\t@echo \"build shared library?       $(MK_ENABLE_SHARED)\"\n\t@echo \"ARG_MAX hack enabled?       $(ARG_MAX_HACK)\"\n\n\n# --- Clean rules ---\n\ncleanmk:\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(FIND) $(CONFIG_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\n\t- $(FIND) $(FRAME_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\n\t- $(FIND) $(REFKERN_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\n\t- $(FIND) $(KERNELS_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\nifneq ($(ADDON_LIST),)\n\t- $(FIND) $(ADDON_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\nendif\nifneq ($(SANDBOX),)\n\t- $(FIND) $(SANDBOX_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\nendif\nelse\n\t@echo \"Removing makefile fragments from $(CONFIG_FRAG_PATH)\"\n\t@- $(FIND) $(CONFIG_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\n\t@echo \"Removing makefile fragments from $(FRAME_FRAG_PATH)\"\n\t@- $(FIND) $(FRAME_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\n\t@echo \"Removing makefile fragments from $(REFKERN_FRAG_PATH)\"\n\t@- $(FIND) $(REFKERN_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\n\t@echo \"Removing makefile fragments from $(KERNELS_FRAG_PATH)\"\n\t@- $(FIND) $(KERNELS_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\nifneq ($(ADDON_LIST),)\n\t@echo \"Removing makefile fragments from $(ADDON_FRAG_PATH)\"\n\t@- $(FIND) $(ADDON_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\nendif\nifneq ($(SANDBOX),)\n\t@echo \"Removing makefile fragments from $(SANDBOX_FRAG_PATH)\"\n\t@- $(FIND) $(SANDBOX_FRAG_PATH) -name \"$(FRAGMENT_MK)\" | $(XARGS) $(RM_F)\nendif\nendif\nendif\n\ncleanh:\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t$(RM_F) $(BLIS_H_FLAT)\n\t$(RM_F) $(CBLAS_H_FLAT)\nelse\n\t@echo \"Removing flattened header files from $(BASE_INC_PATH)\"\n\t@$(RM_F) $(BLIS_H_FLAT)\n\t@$(RM_F) $(CBLAS_H_FLAT)\nendif\nendif\n\ncleanlib:\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(FIND) $(BASE_OBJ_PATH) -name \"*.o\" | $(XARGS) $(RM_F)\n\t- $(RM_F) $(LIBBLIS_A_PATH)\n\t- $(RM_F) $(LIBBLIS_SO_PATH)\nelse\n\t@echo \"Removing object files from $(BASE_OBJ_PATH)\"\n\t@- $(FIND) $(BASE_OBJ_PATH) -name \"*.o\" | $(XARGS) $(RM_F)\n\t@echo \"Removing libraries from $(BASE_LIB_PATH)\"\n\t@- $(RM_F) $(LIBBLIS_A_PATH)\n\t@- $(RM_F) $(LIBBLIS_SO_PATH)\nendif\nendif\n\ncleantest: cleanblastest cleanblistest\n\nifeq ($(BUILDING_OOT),no)\ncleanblastest: cleanblastesttop cleanblastestdir\nelse\ncleanblastest: cleanblastesttop\nendif\n\ncleanblastesttop:\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_F) $(BLASTEST_F2C_OBJS) $(BLASTEST_DRV_OBJS)\n\t- $(RM_F) $(BLASTEST_F2C_LIB)\n\t- $(RM_F) $(BLASTEST_DRV_BIN_PATHS)\n\t- $(RM_F) $(addprefix out.,$(BLASTEST_DRV_BASES))\nelse\n\t@echo \"Removing object files from $(BASE_OBJ_BLASTEST_PATH)\"\n\t@- $(RM_F) $(BLASTEST_F2C_OBJS) $(BLASTEST_DRV_OBJS)\n\t@echo \"Removing libf2c.a from $(BASE_OBJ_BLASTEST_PATH)\"\n\t@- $(RM_F) $(BLASTEST_F2C_LIB)\n\t@echo \"Removing binaries from $(BASE_OBJ_BLASTEST_PATH)\"\n\t@- $(RM_F) $(BLASTEST_DRV_BIN_PATHS)\n\t@echo \"Removing driver output files 'out.*'\"\n\t@- $(RM_F) $(addprefix out.,$(BLASTEST_DRV_BASES))\nendif # ENABLE_VERBOSE\nendif # IS_CONFIGURED\n\ncleanblastestdir:\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(FIND) $(BLASTEST_DIR)/$(OBJ_DIR) -name \"*.o\" | $(XARGS) $(RM_F)\n\t- $(FIND) $(BLASTEST_DIR) -name \"*.x\" | $(XARGS) $(RM_F)\n\t- $(RM_F) $(BLASTEST_DIR)/$(BLASTEST_F2C_LIB_NAME)\n\t- $(RM_F) $(addprefix $(BLASTEST_DIR)/out.,$(BLASTEST_DRV_BASES))\nelse\n\t@echo \"Removing object files from ./$(BLASTEST_DIR)/$(OBJ_DIR)\"\n\t@- $(FIND) $(BLASTEST_DIR)/$(OBJ_DIR) -name \"*.o\" | $(XARGS) $(RM_F)\n\t@echo \"Removing libf2c.a from ./$(BLASTEST_DIR)\"\n\t@- $(RM_F) $(BLASTEST_DIR)/$(BLASTEST_F2C_LIB_NAME)\n\t@echo \"Removing binaries from ./$(BLASTEST_DIR)\"\n\t@- $(FIND) $(BLASTEST_DIR) -name \"*.x\" | $(XARGS) $(RM_F)\n\t@echo \"Removing driver output files 'out.*' from ./$(BLASTEST_DIR)\"\n\t@- $(RM_F) $(addprefix $(BLASTEST_DIR)/out.,$(BLASTEST_DRV_BASES))\nendif # ENABLE_VERBOSE\nendif # IS_CONFIGURED\n\nifeq ($(BUILDING_OOT),no)\ncleanblistest: cleanblistesttop cleanblistestdir\nelse\ncleanblistest: cleanblistesttop\nendif\n\ncleanblistesttop:\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_F) $(MK_TESTSUITE_OBJS)\n\t- $(RM_F) $(TESTSUITE_BIN)\n\t- $(RM_F) $(TESTSUITE_OUT_FILE)\nelse\n\t@echo \"Removing object files from $(BASE_OBJ_TESTSUITE_PATH)\"\n\t@- $(RM_F) $(MK_TESTSUITE_OBJS)\n\t@echo \"Removing binary $(TESTSUITE_BIN)\"\n\t@- $(RM_F) $(TESTSUITE_BIN)\n\t@echo \"Removing $(TESTSUITE_OUT_FILE)\"\n\t@- $(RM_F) $(TESTSUITE_OUT_FILE)\nendif # ENABLE_VERBOSE\nendif # IS_CONFIGURED\n\ncleanblistestdir:\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(FIND) $(TESTSUITE_DIR)/$(OBJ_DIR) -name \"*.o\" | $(XARGS) $(RM_F)\n\t- $(RM_F) $(TESTSUITE_DIR)/$(TESTSUITE_BIN)\n#\t- $(MAKE) -C $(VEND_TESTCPP_DIR) clean\nelse\n\t@echo \"Removing object files from $(TESTSUITE_DIR)/$(OBJ_DIR)\"\n\t@- $(FIND) $(TESTSUITE_DIR)/$(OBJ_DIR) -name \"*.o\" | $(XARGS) $(RM_F)\n\t@echo \"Removing binary $(TESTSUITE_DIR)/$(TESTSUITE_BIN)\"\n\t@- $(RM_F) $(TESTSUITE_DIR)/$(TESTSUITE_BIN)\n#\t@$(MAKE) -C $(VEND_TESTCPP_DIR) clean\nendif # ENABLE_VERBOSE\nendif # IS_CONFIGURED\n\ndistclean: cleanmk cleanh cleanlib cleantest\nifeq ($(IS_CONFIGURED),yes)\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_F) $(BLIS_ADDON_H)\n\t- $(RM_F) $(BLIS_CONFIG_H)\n\t- $(RM_F) $(CONFIG_MK_FILE)\n\t- $(RM_F) $(PC_OUT_FILE)\n\t- $(RM_RF) $(OBJ_DIR)\n\t- $(RM_RF) $(LIB_DIR)\n\t- $(RM_RF) $(INCLUDE_DIR)\nelse\n\t@echo \"Removing $(BLIS_ADDON_H)\"\n\t@$(RM_F) $(BLIS_ADDON_H)\n\t@echo \"Removing $(BLIS_CONFIG_H)\"\n\t@$(RM_F) $(BLIS_CONFIG_H)\n\t@echo \"Removing $(CONFIG_MK_FILE)\"\n\t@- $(RM_F) $(CONFIG_MK_FILE)\n\t@echo \"Removing $(PC_OUT_FILE)\"\n\t@- $(RM_F) $(PC_OUT_FILE)\n\t@echo \"Removing $(OBJ_DIR)\"\n\t@- $(RM_RF) $(OBJ_DIR)\n\t@echo \"Removing $(LIB_DIR)\"\n\t@- $(RM_RF) $(LIB_DIR)\n\t@echo \"Removing $(INCLUDE_DIR)\"\n\t@- $(RM_RF) $(INCLUDE_DIR)\nendif\nendif\n\n\n# --- CHANGELOG rules ---\n\nchangelog:\n\t@echo \"Updating '$(DIST_PATH)/$(CHANGELOG)' via '$(GIT_LOG)'\"\n\t@$(GIT_LOG) > $(DIST_PATH)/$(CHANGELOG)\n\n\n# --- Uninstall rules ---\n\n# NOTE: We can't write these uninstall rules directly in terms of targets\n# $(MK_LIBS_VERS_CONF_INST), $(MK_LIBS_INST), and $(MK_INCL_DIR_INST)\n# because those targets are already defined in terms of rules that *build*\n# those products.\n\nuninstall-libs: check-env\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_F) $(MK_LIBS_INST)\nelse\n\t@echo \"Uninstalling libraries $(notdir $(MK_LIBS_INST)) from $(dir $(firstword $(MK_LIBS_INST)))\"\n\t@- $(RM_F) $(MK_LIBS_INST)\nendif\n\nuninstall-lib-symlinks: check-env\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_F) $(MK_LIBS_SYML)\nelse\n\t@echo \"Uninstalling symlinks $(notdir $(MK_LIBS_SYML)) from $(dir $(firstword $(MK_LIBS_SYML)))\"\n\t@- $(RM_F) $(MK_LIBS_SYML)\nendif\n\nuninstall-headers: check-env\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_RF) $(MK_INCL_DIR_INST)\n\t- $(RM_RF) $(HELP_HEADERS_INSTALLED)\nelse\n\t@echo \"Uninstalling directory '$(notdir $(MK_INCL_DIR_INST))' from $(dir $(MK_INCL_DIR_INST))\"\n\t@- $(RM_RF) $(MK_INCL_DIR_INST)\n\t@echo \"Uninstalling $(notdir $(HELP_HEADERS_INSTALLED)) from $(dir $(INSTALL_INCDIR))\"\n\t@- $(RM_RF) $(HELP_HEADERS_INSTALLED)\nendif\n\nuninstall-share: check-env\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_RF) $(MK_SHARE_DIR_INST)\nelse\n\t@echo \"Uninstalling directory '$(notdir $(MK_SHARE_DIR_INST))' from $(dir $(MK_SHARE_DIR_INST))\"\n\t@- $(RM_RF) $(MK_SHARE_DIR_INST)\nendif\n\n# --- Uninstall old rules ---\n\nuninstall-old-libs: $(UNINSTALL_OLD_LIBS) check-env\n\nuninstall-old-symlinks: $(UNINSTALL_OLD_SYML) check-env\n\nuninstall-old-headers: $(UNINSTALL_OLD_HEADERS) check-env\n\n$(UNINSTALL_OLD_LIBS) $(UNINSTALL_OLD_SYML) $(UNINSTALL_OLD_HEADERS): check-env\nifeq ($(ENABLE_VERBOSE),yes)\n\t- $(RM_F) $@\nelse\n\t@echo \"Uninstalling $(@F) from $(@D)/\"\n\t@- $(RM_F) $@\nendif\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 46.23046875,
          "content": "_Recipient of the **[2023 James H. Wilkinson Prize for Numerical Software](https://www.siam.org/prizes-recognition/major-prizes-lectures/detail/james-h-wilkinson-prize-for-numerical-software)**_\n\n_Recipient of the **[2020 SIAM Activity Group on Supercomputing Best Paper Prize](https://www.siam.org/prizes-recognition/activity-group-prizes/detail/siag-sc-best-paper-prize)**_\n\n\n![The BLIS cat is sleeping.](http://www.cs.utexas.edu/users/field/blis_cat.png)\n\n[![Build Status](https://api.travis-ci.com/flame/blis.svg?branch=master)](https://app.travis-ci.com/github/flame/blis)\n[![Build Status](https://ci.appveyor.com/api/projects/status/github/flame/blis?branch=master&svg=true)](https://ci.appveyor.com/project/shpc/blis/branch/master)\n\n[<img alt=\"Discord logo\" title=\"Join us on Discord!\" height=\"32px\" src=\"docs/images/discord.svg\" />](docs/Discord.md)\n\nContents\n--------\n\n* **[Introduction](#introduction)**\n* **[Education and Learning](#education-and-learning)**\n* **[What's New](#whats-new)**\n* **[What People Are Saying About BLIS](#what-people-are-saying-about-blis)**\n* **[Key Features](#key-features)**\n* **[How to Download BLIS](#how-to-download-blis)**\n* **[Getting Started](#getting-started)**\n* **[Example Code](#example-code)**\n* **[Documentation](#documentation)**\n* **[Performance](#performance)**\n* **[External Packages](#external-packages)**\n* **[Discussion](#discussion)**\n* **[Contributing](#contributing)**\n* **[Citations](#citations)**\n* **[Awards](#awards)**\n* **[Funding](#funding)**\n\nIntroduction\n------------\n\nBLIS is an [award-winning](#awards)\nportable software framework for instantiating high-performance\nBLAS-like dense linear algebra libraries. The framework was designed to isolate\nessential kernels of computation that, when optimized, immediately enable\noptimized implementations of most of its commonly used and computationally\nintensive operations. BLIS is written in [ISO\nC99](http://en.wikipedia.org/wiki/C99) and available under a\n[new/modified/3-clause BSD\nlicense](http://opensource.org/licenses/BSD-3-Clause). While BLIS exports a\n[new BLAS-like API](docs/BLISTypedAPI.md),\nit also includes a BLAS compatibility layer which gives application developers\naccess to BLIS implementations via traditional [BLAS routine\ncalls](http://www.netlib.org/lapack/lug/node145.html).\nAn [object-based API](docs/BLISObjectAPI.md) unique to BLIS is also available.\n\nFor a thorough presentation of our framework, please read our\n[ACM Transactions on Mathematical Software (TOMS)](https://toms.acm.org/)\njournal article, [\"BLIS: A Framework for Rapidly Instantiating BLAS\nFunctionality\"](http://dl.acm.org/authorize?N91172).\nFor those who just want an executive summary, please see the\n[Key Features](#key-features) section below.\n\nIn a follow-up article (also in [ACM TOMS](https://toms.acm.org/)),\n[\"The BLIS Framework: Experiments in\nPortability\"](http://dl.acm.org/authorize?N16240),\nwe investigate using BLIS to instantiate level-3 BLAS implementations on a\nvariety of general-purpose, low-power, and multicore architectures.\n\nAn IPDPS'14 conference paper titled [\"Anatomy of High-Performance Many-Threaded\nMatrix\nMultiplication\"](http://www.cs.utexas.edu/users/flame/pubs/blis3_ipdps14.pdf)\nsystematically explores the opportunities for parallelism within the five loops\nthat BLIS exposes in its matrix multiplication algorithm.\n\nFor other papers related to BLIS, please see the\n[Citations section](#citations) below.\n\nIt is our belief that BLIS offers substantial benefits in productivity when\ncompared to conventional approaches to developing BLAS libraries, as well as a\nmuch-needed refinement of the BLAS interface, and thus constitutes a major\nadvance in dense linear algebra computation. While BLIS remains a\nwork-in-progress, we are excited to continue its development and further\ncultivate its use within the community.\n\nThe BLIS framework is primarily developed and maintained by individuals in the\n[Science of High-Performance Computing](http://shpc.ices.utexas.edu/)\n(SHPC) group in the\n[Oden Institute for Computational Engineering and Sciences](https://www.oden.utexas.edu/)\nat [The University of Texas at Austin](https://www.utexas.edu/)\nand in the [Matthews Research Group](https://matthewsresearchgroup.webstarts.com/)\nat [Southern Methodist University](https://www.smu.edu/).\nPlease visit the [SHPC](http://shpc.ices.utexas.edu/) website for more\ninformation about our research group, such as a list of\n[people](http://shpc.ices.utexas.edu/people.html)\nand [collaborators](http://shpc.ices.utexas.edu/collaborators.html),\n[funding sources](http://shpc.ices.utexas.edu/funding.html),\n[publications](http://shpc.ices.utexas.edu/publications.html),\nand [other educational projects](http://www.ulaff.net/) (such as MOOCs).\n\nEducation and Learning\n----------------------\n\nWant to understand what's under the hood?\nMany of the same concepts and principles employed when developing BLIS are\nintroduced and taught in a basic pedagogical setting as part of\n[LAFF-On Programming for High Performance (LAFF-On-PfHP)](http://www.ulaff.net/),\none of several massive open online courses (MOOCs) in the\n[Linear Algebra: Foundations to Frontiers](http://www.ulaff.net/) series,\nall of which are available for free via the [edX platform](http://www.edx.org/).\n\nWhat's New\n----------\n\n * **BLIS selected for the 2023 James H. Wilkinson Prize for Numerical Software!** We\nare thrilled to announce that Field Van Zee and Devin Matthews were chosen to receive\nthe [2023 James H. Wilkinson Prize for Numerical Software](https://www.siam.org/prizes-recognition/major-prizes-lectures/detail/james-h-wilkinson-prize-for-numerical-software).\nThe selection committee sought to recognize the recipients \"for the development of\nBLIS, a portable open-source software framework that facilitates rapid instantiation\nof high-performance BLAS and BLAS-like operations targeting modern CPUs.\" This prize\nis awarded once every four years to the authors of an outstanding piece of numerical\nsoftware, or to individuals who have made an outstanding contribution to an existing\npiece of numerical software. It is awarded to an entry that best addresses all phases\nof the preparation of high-quality numerical software, and is intended to recognize\ninnovative software in scientific computing and to encourage researchers in the\nearlier stages of their career. The prize will be awarded at the\n[2023 SIAM Conference on Computational Science and Engineering](https://www.siam.org/conferences/cm/conference/cse23) in Amsterdam.\n\n * **Join us on Discord!** In 2021, we soft-launched our [Discord](https://discord.com/)\nserver by privately inviting current and former collaborators, attendees of our BLIS\nRetreat, as well as other participants within the BLIS ecosystem. We've been thrilled\nby the results thus far, and are happy to announce that our new community is now open\nto the broader public! If you'd like to hang out with other BLIS users and developers,\nask a question, discuss future features, or just say hello, please feel free to join\nus! We've put together a [step-by-step guide](docs/Discord.md) for creating an account\nand joining our cozy enclave. We even have a monthly \"BLIS happy hour\" event where\npeople can casually come together for a video chat, Q&A, brainstorm session, or\nwhatever it happens to unfold into!\n\n * **Addons feature now available!** Have you ever wanted to quickly extend BLIS's\noperation support or define new custom BLIS APIs for your application, but were\nunsure of how to add your source code to BLIS? Do you want to isolate your custom\ncode so that it only gets enabled when the user requests it? Do you like\n[sandboxes](docs/Sandboxes.md), but wish you didn't have to provide an\nimplementation of `gemm`? If so, you should check out our new\n[addons](docs/Addons.md) feature. Addons act like optional extensions that can be\ncreated, enabled, and combined to suit your application's needs, all without\nformally integrating your code into the core BLIS framework.\n\n * **Multithreaded small/skinny matrix support for sgemm now available!** Thanks to\nfunding and hardware support from Oracle, we have now accelerated `gemm` for\nsingle-precision real matrix problems where one or two dimensions is exceedingly\nsmall. This work is similar to the `gemm` optimization announced last year.\nFor now, we have only gathered performance results on an AMD Epyc Zen2 system, but\nwe hope to publish additional graphs for other architectures in the future. You may\nfind these Zen2 graphs via the [PerformanceSmall](docs/PerformanceSmall.md) document.\n\n * **BLIS awarded SIAM Activity Group on Supercomputing Best Paper Prize for 2020!**\nWe are thrilled to announce that the paper that we internally refer to as the\nsecond BLIS paper,\n\n   \"The BLIS Framework: Experiments in Portability.\" Field G. Van Zee, Tyler Smith, Bryan Marker, Tze Meng Low, Robert A. van de Geijn, Francisco Igual, Mikhail Smelyanskiy, Xianyi Zhang, Michael Kistler, Vernon Austel, John A. Gunnels, Lee Killough. ACM Transactions on Mathematical Software (TOMS), 42(2):12:1--12:19, 2016.\n\n   was selected for the [SIAM Activity Group on Supercomputing Best Paper Prize](https://www.siam.org/prizes-recognition/activity-group-prizes/detail/siag-sc-best-paper-prize)\nfor 2020. The prize is awarded once every two years to a paper judged to be\nthe most outstanding paper in the field of parallel scientific and engineering\ncomputing, and has only been awarded once before (in 2016) since its inception\nin 2015 (the committee did not award the prize in 2018). The prize\n[was awarded](https://www.oden.utexas.edu/about/news/ScienceHighPerfomanceComputingSIAMBestPaperPrize/)\nat the [2020 SIAM Conference on Parallel Processing for Scientific Computing](https://www.siam.org/conferences/cm/conference/pp20) in Seattle. Robert was present at\nthe conference to give\n[a talk on BLIS](https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=68266) and accept the prize alongside other coauthors.\nThe selection committee sought to recognize the paper, \"which validates BLIS,\na framework relying on the notion of microkernels that enables both productivity\nand high performance.\" Their statement continues, \"The framework will continue\nhaving an important influence on the design and the instantiation of dense linear\nalgebra libraries.\"\n\n * **Multithreaded small/skinny matrix support for dgemm now available!** Thanks to\ncontributions made possible by our partnership with AMD, we have dramatically\naccelerated `gemm` for double-precision real matrix problems where one or two\ndimensions is exceedingly small. A natural byproduct of this optimization is\nthat the traditional case of small _m = n = k_ (i.e. square matrices) is also\naccelerated, even though it was not targeted specifically. And though only\n`dgemm` was optimized for now, support for other datatypes and/or other operations\nmay be implemented in the future. We've also added new graphs to the\n[PerformanceSmall](docs/PerformanceSmall.md) document to showcase multithreaded\nperformance when one or more matrix dimensions are small.\n\n * **Performance comparisons now available!** We recently measured the\nperformance of various level-3 operations on a variety of hardware architectures,\nas implemented within BLIS and other BLAS libraries for all four of the standard\nfloating-point datatypes. The results speak for themselves! Check out our\nextensive performance graphs and background info in our new\n[Performance](docs/Performance.md) document.\n\n * **BLIS is now in Debian Unstable!** Thanks to Debian developer-maintainers\n[M. Zhou](https://github.com/cdluminate) and\n[Nico Schlömer](https://github.com/nschloe) for sponsoring our package in Debian.\nTheir participation, contributions, and advocacy were key to getting BLIS into\nthe second-most popular Linux distribution (behind Ubuntu, which Debian packages\nfeed into). The Debian tracker page may be found\n[here](https://tracker.debian.org/pkg/blis).\n\n * **BLIS now supports mixed-datatype gemm!** The `gemm` operation may now be\nexecuted on operands of mixed domains and/or mixed precisions. Any combination\nof storage datatype for A, B, and C is now supported, along with a separate\ncomputation precision that can differ from the storage precision of A and B.\nAnd even the 1m method now supports mixed-precision computation.\nFor more details, please see our [ACM TOMS](https://toms.acm.org/) journal\narticle submission ([current\ndraft](http://www.cs.utexas.edu/users/flame/pubs/blis7_toms_rev0.pdf)).\n\n * **BLIS now implements the 1m method.** Let's face it: writing complex\nassembly `gemm` microkernels for a new architecture is never a priority--and\nnow, it almost never needs to be. The 1m method leverages existing real domain\n`gemm` microkernels to implement all complex domain level-3 operations. For\nmore details, please see our [ACM TOMS](https://toms.acm.org/) journal article\nsubmission ([current\ndraft](http://www.cs.utexas.edu/users/flame/pubs/blis6_toms_rev2.pdf)).\n\nWhat People Are Saying About BLIS\n---------------------------------\n\n*[\"I noticed a substantial increase in multithreaded performance on my own\nmachine, which was extremely satisfying.\"](https://groups.google.com/d/msg/blis-discuss/8iu9B5KCxpA/uftpjgIsBwAJ)* ... *[\"[I was] happy it worked so well!\"](https://groups.google.com/d/msg/blis-discuss/8iu9B5KCxpA/uftpjgIsBwAJ)* (Justin Shea)\n\n*[\"This is an awesome library.\"](https://github.com/flame/blis/issues/288#issuecomment-447488637)* ... *[\"I want to thank you and the blis team for your efforts.\"](https://github.com/flame/blis/issues/288#issuecomment-448074704)* ([@Lephar](https://github.com/Lephar))\n\n*[\"Any time somebody outside Intel beats MKL by a nontrivial amount, I report it to the MKL team. It is fantastic for any open-source project to get within 10% of MKL... [T]his is why Intel funds BLIS development.\"](https://github.com/flame/blis/issues/264#issuecomment-428673275)* ([@jeffhammond](https://github.com/jeffhammond))\n\n*[\"So BLIS is now a part of Elk.\"](https://github.com/flame/blis/issues/267#issuecomment-429303902)* ... *[\"We have found that zgemm applied to a 15000x15000 matrix with multi-threaded BLIS on a 32-core Ryzen 2990WX processor is about twice as fast as MKL\"](https://github.com/flame/blis/issues/264#issuecomment-428373946)* ... *[\"I'm starting to like this a lot.\"](https://github.com/flame/blis/issues/264#issuecomment-428926191)* ([@jdk2016](https://github.com/jdk2016))\n\n*[\"I [found] BLIS because I was looking for BLAS operations on C-ordered arrays for NumPy. BLIS has that, but even better is the fact that it's developed in the open using a more modern language than Fortran.\"](https://github.com/flame/blis/issues/254#issuecomment-423838345)* ([@nschloe](https://github.com/nschloe))\n\n*[\"The specific reason to have BLIS included [in Linux distributions] is the KNL and SKX [AVX-512] BLAS support, which OpenBLAS doesn't have.\"](https://github.com/flame/blis/issues/210#issuecomment-393126303)* ([@loveshack](https://github.com/loveshack))\n\n*[\"All tests pass without errors on OpenBSD. Thanks!\"](https://github.com/flame/blis/issues/202#issuecomment-389691543)* ([@ararslan](https://github.com/ararslan))\n\n*[\"Thank you very much for your great help!... Looking forward to benchmarking.\"](https://github.com/flame/blis/issues/180#issuecomment-375895449)* ([@mrader1248](https://github.com/mrader1248))\n\n*[\"Thanks for the beautiful work.\"](https://github.com/flame/blis/issues/163#issue-286575452)* ([@mmrmo](https://github.com/mmrmo))\n\n*[\"[M]y software currently uses BLIS for its BLAS interface...\"](https://github.com/flame/blis/issues/129#issuecomment-302904805)* ([@ShadenSmith](https://github.com/ShadenSmith))\n\n*[\"[T]hanks so much for your work on this! Excited to test.\"](https://github.com/flame/blis/issues/129#issuecomment-341565071)* ... *[\"[On AMD Excavator], BLIS is competitive to / slightly faster than OpenBLAS for dgemms in my tests.\"](https://github.com/flame/blis/issues/129#issuecomment-341608673)* ([@iotamudelta](https://github.com/iotamudelta))\n\n*[\"BLIS provided the only viable option on KNL, whose ecosystem is at present dominated by blackbox toolchains. Thanks again. Keep on this great work.\"](https://github.com/flame/blis/issues/116#issuecomment-281225101)* ([@heroxbd](https://github.com/heroxbd))\n\n*[\"I want to definitely try this out...\"](https://github.com/flame/blis/issues/12#issuecomment-48086295)* ([@ViralBShah](https://github.com/ViralBShah))\n\nKey Features\n------------\n\nBLIS offers several advantages over traditional BLAS libraries:\n\n * **Portability that doesn't impede high performance.** Portability was a top\npriority of ours when creating BLIS. With virtually no additional effort on the\npart of the developer, BLIS is configurable as a fully-functional reference\nimplementation. But more importantly, the framework identifies and isolates a\nkey set of computational kernels which, when optimized, immediately and\nautomatically optimize performance across virtually all level-2 and level-3\nBLIS operations. In this way, the framework acts as a productivity multiplier.\nAnd since the optimized (non-portable) code is compartmentalized within these\nfew kernels, instantiating a high-performance BLIS library on a new\narchitecture is a relatively straightforward endeavor.\n\n * **Generalized matrix storage.** The BLIS framework exports interfaces that\nallow one to specify both the row stride and column stride of a matrix. This\nallows one to compute with matrices stored in column-major order, row-major\norder, or by general stride. (This latter storage format is important for those\nseeking to implement tensor contractions on multidimensional arrays.)\nFurthermore, since BLIS tracks stride information for each matrix, operands of\ndifferent storage formats can be used within the same operation invocation. By\ncontrast, BLAS requires column-major storage. And while the CBLAS interface\nsupports row-major storage, it does not allow mixing storage formats.\n\n * **Rich support for the complex domain.** BLIS operations are developed and\nexpressed in their most general form, which is typically in the complex domain.\nThese formulations then simplify elegantly down to the real domain, with\nconjugations becoming no-ops. Unlike the BLAS, all input operands in BLIS that\nallow transposition and conjugate-transposition also support conjugation\n(without transposition), which obviates the need for thread-unsafe workarounds.\nAlso, where applicable, both complex symmetric and complex Hermitian forms are\nsupported. (BLAS omits some complex symmetric operations, such as `symv`,\n`syr`, and `syr2`.) Another great example of BLIS serving as a portability\nlever is its implementation of the 1m method for complex matrix multiplication,\na novel mechanism of providing high-performance complex level-3 operations using\nonly real domain microkernels. This new innovation guarantees automatic level-3\nsupport in the complex domain even when the kernel developers entirely forgo\nwriting complex kernels.\n\n * **Advanced multithreading support.** BLIS allows multiple levels of\nsymmetric multithreading for nearly all level-3 operations. (Currently, users\nmay choose to obtain parallelism via OpenMP, POSIX threads, or HPX). This\nmeans that matrices may be partitioned in multiple dimensions simultaneously to\nattain scalable, high-performance parallelism on multicore and many-core\narchitectures. The key to this innovation is a thread-specific control tree\ninfrastructure which encodes information about the logical thread topology and\nallows threads to query and communicate data amongst one another. BLIS also\nemploys so-called \"quadratic partitioning\" when computing dimension sub-ranges\nfor each thread, so that arbitrary diagonal offsets of structured matrices with\nunreferenced regions are taken into account to achieve proper load balance.\nMore recently, BLIS introduced a runtime abstraction to specify parallelism on\na per-call basis, which is useful for applications that want to handle most of\nthe parallelism.\n\n * **Ease of use.** The BLIS framework, and the library of routines it\ngenerates, are easy to use for end users, experts, and vendors alike. An\noptional BLAS compatibility layer provides application developers with\nbackwards compatibility to existing BLAS-dependent codes. Or, one may adjust or\nwrite their application to take advantage of new BLIS functionality (such as\ngeneralized storage formats or additional complex operations) by calling one\nof BLIS's native APIs directly. BLIS's typed API will feel familiar to many\nveterans of BLAS since these interfaces use BLAS-like calling sequences. And\nmany will find BLIS's object-based APIs a delight to use when customizing\nor writing their own BLIS operations. (Objects are relatively lightweight\n`structs` and passed by address, which helps tame function calling overhead.)\n\n * **Multilayered API and exposed kernels.** The BLIS framework exposes its\nimplementations in various layers, allowing expert developers to access exactly\nthe functionality desired. This layered interface includes that of the\nlowest-level kernels, for those who wish to bypass the bulk of the framework.\nOptimizations can occur at various levels, in part thanks to exposed packing\nand unpacking facilities, which by default are highly parameterized and\nflexible.\n\n * **Functionality that grows with the community's needs.** As its name\nsuggests, the BLIS framework is not a single library or static API, but rather\na nearly-complete template for instantiating high-performance BLAS-like\nlibraries. Furthermore, the framework is extensible, allowing developers to\nleverage existing components to support new operations as they are identified.\nIf such operations require new kernels for optimal efficiency, the framework\nand its APIs will be adjusted and extended accordingly. Community developers\nwho wish to experiment with creating new operations or APIs in BLIS can quickly\nand easily do so via the [Addons](docs/Addons.md) feature.\n\n * **Code re-use.** Auto-generation approaches to achieving the aforementioned\ngoals tend to quickly lead to code bloat due to the multiple dimensions of\nvariation supported: operation (i.e. `gemm`, `herk`, `trmm`, etc.); parameter\ncase (i.e. side, [conjugate-]transposition, upper/lower storage, unit/non-unit\ndiagonal); datatype (i.e. single-/double-precision real/complex); matrix\nstorage (i.e. row-major, column-major, generalized); and algorithm (i.e.\npartitioning path and kernel shape). These \"brute force\" approaches often\nconsider and optimize each operation or case combination in isolation, which is\nless than ideal when the goal is to provide entire libraries. BLIS was designed\nto be a complete framework for implementing basic linear algebra operations,\nbut supporting this vast amount of functionality in a manageable way required a\nholistic design that employed careful abstractions, layering, and recycling of\ngeneric (highly parameterized) codes, subject to the constraint that high\nperformance remain attainable.\n\n * **A foundation for mixed domain and/or mixed precision operations.** BLIS\nwas designed with the hope of one day allowing computation on real and complex\noperands within the same operation. Similarly, we wanted to allow mixing\noperands' numerical domains, floating-point precisions, or both domain and\nprecision, and to optionally compute in a precision different than one or both\noperands' storage precisions. This feature has been implemented for the general\nmatrix multiplication (`gemm`) operation, providing 128 different possible type\ncombinations, which, when combined with existing transposition, conjugation,\nand storage parameters, enables 55,296 different `gemm` use cases. For more\ndetails, please see the documentation on [mixed datatype](docs/MixedDatatypes.md)\nsupport and/or our [ACM TOMS](https://toms.acm.org/) journal paper on\nmixed-domain/mixed-precision `gemm` ([linked below](#citations)).\n\nHow to Download BLIS\n--------------------\n\nThere are a few ways to download BLIS. We list the most common four ways below.\nWe **highly recommend** using either Option 1 or 2. Otherwise, we recommend\nOption 3 (over Option 4) so your compiler can perform optimizations specific\nto your hardware.\n\n1. **Download a source repository with `git clone`.**\nGenerally speaking, we prefer using `git clone` to clone a `git` repository.\nHaving a repository allows the user to periodically pull in the latest changes,\ntry out release candidates when they become available, switch to older versions\neasily, and quickly rebuild BLIS whenever they wish.\n(Note that implicit in cloning a repository is that the repository defaults to\nusing the `master` branch, which, as of 1.0, is considered akin to a development\nbranch and likely contains improvements since the most recent release.)\n\n   In order to clone a `git` repository of BLIS, please obtain a repository\nURL by clicking on the green button above the file/directory listing near the\ntop of this page (as rendered by GitHub). Generally speaking, it will amount\nto executing the following command in your terminal shell:\n   ```\n   git clone https://github.com/flame/blis.git\n   ```\n   At this point, you will have the latest commit of the `master` branch\nchecked out. If you wish to check out an official release version, say,\n1.0, execute the following:\n   ```\n   git checkout 1.0\n   ```\n   `git` will then transform your working copy to match the state of the\ncommit associated with version 1.0. You can view a list of official\nversiontags at any time by executing:\n   ```\n   git tag --list\n   ```\n   Note that pre-release versions, such as release candidates, are actually\nbranches rather than tags, and thus will not show up in the list of tagged\nversions.\n\n2. **Download a source release via a tarball/zip file.**\nIf you would like to stick to the code that is included in official releases\nand don't need the convenience of pulling in the latest changes via `git`, you\nmay download either a tarball or zip file of BLIS's latest\n[release](https://github.com/flame/blis/releases). (NOTE: Some older releases\nare only available as [tagged](https://github.com/flame/blis/tags) commits.\nAlso note that downloading release x.y.z is equivalent to downloading, or\nchecking out, the `git` tag `x.y.z`.)\nWe consider this option to be less than ideal for some people since you will\nnot be able to update your code with a simple `git pull` command.\n\n3. **Download a source repository via a zip file.**\nIf you are uncomfortable with using `git` but would still like the latest\nstable commits, we recommend that you download BLIS as a zip file.\n\n   In order to download a zip file of the BLIS source distribution, please\nclick on the green button above the file listing near the top of this page.\nThis should reveal a link for downloading the zip file.\n\n4. **Download a binary package specific to your OS.**\nWhile we don't recommend this as the first choice for most users, we provide\nlinks to community members who generously maintain BLIS packages for various\nLinux distributions such as Debian Unstable and EPEL/Fedora. Please see the\n[External Packages](#external-packages) section below for more information.\n\nGetting Started\n---------------\n\n*NOTE: This section assumes you've either cloned a BLIS source code repository\nvia `git`, downloaded the latest source code via a zip file, or downloaded the\nsource code for a tagged version release---Options 1, 2, or 3, respectively,\nas discussed in [the previous section](#how-to-download-blis).*\n\nIf you just want to build a sequential (not parallelized) version of BLIS\nin a hurry and come back and explore other topics later, you can configure\nand build BLIS as follows:\n```\n$ ./configure auto\n$ make [-j]\n```\nYou can then verify your build by running BLAS- and BLIS-specific test\ndrivers via `make check`:\n```\n$ make check [-j]\n```\nAnd if you would like to install BLIS to the directory specified to `configure`\nvia the `--prefix` option, run the `install` target:\n```\n$ make install\n```\nPlease read the output of `./configure --help` for a full list of configure-time\noptions.\nIf/when you have time, we *strongly* encourage you to read the detailed\nwalkthrough of the build system found in our [Build System](docs/BuildSystem.md)\nguide.\n\nIf you are still having trouble, you are welcome to [join us on Discord](docs/Discord.md)\nfor further information and/or assistance.\n\nExample Code\n------------\n\nThe BLIS source distribution provides example code in the `examples` directory.\nExample code focuses on using BLIS APIs (not BLAS or CBLAS), and resides in\ntwo subdirectories: [examples/oapi](examples/oapi) (which demonstrates the\n[object API](docs/BLISObjectAPI.md)) and [examples/tapi](examples/tapi) (which\ndemonstrates the [typed API](docs/BLISTypedAPI.md)).\n\nEither directory contains several files, each containing various pieces of\ncode that exercise core functionality of the BLIS API in question (object or\ntyped). These example files should be thought of collectively like a tutorial,\nand therefore it is recommended to start from the beginning (the file that\nstarts in `00`).\n\nYou can build all of the examples by simply running `make` from either example\nsubdirectory (`examples/oapi` or `examples/tapi`). (You can also run\n`make clean`.) The local `Makefile` assumes that you've already configured and\nbuilt (but not necessarily installed) BLIS two directories up, in `../..`. If\nyou have already installed BLIS to some permanent directory, you may refer to\nthat installation by setting the environment variable `BLIS_INSTALL_PATH` prior\nto running make:\n```\nexport BLIS_INSTALL_PATH=/usr/local; make\n```\nor by setting the same variable as part of the make command:\n```\nmake BLIS_INSTALL_PATH=/usr/local\n```\n**Once the executable files have been built, we recommend reading the code and\nthe corresponding executable output side by side. This will help you see the\neffects of each section of code.**\n\nThis tutorial is not exhaustive or complete; several object API functions were\nomitted (mostly for brevity's sake) and thus more examples could be written.\n\nDocumentation\n-------------\n\nWe provide extensive documentation on the BLIS build system, APIs, test\ninfrastructure, and other important topics. All documentation is formatted in\nmarkdown and included in the BLIS source distribution (usually in the `docs`\ndirectory). Slightly longer descriptions of each document may be found via in\nthe project's [wiki](https://github.com/flame/blis/wiki) section.\n\n**Documents for everyone:**\n\n * **[Build System](docs/BuildSystem.md).** This document covers the basics of\nconfiguring and building BLIS libraries, as well as related topics.\n\n * **[Testsuite](docs/Testsuite.md).** This document describes how to run\nBLIS's highly parameterized and configurable test suite, as well as the\nincluded BLAS test drivers.\n\n * **[BLIS Typed API Reference](docs/BLISTypedAPI.md).** Here we document the\nso-called \"typed\" (or BLAS-like) API. This is the API that many users who are\nalready familiar with the BLAS will likely want to use.\n\n * **[BLIS Object API Reference](docs/BLISObjectAPI.md).** Here we document\nthe object API. This is API abstracts away properties of vectors and matrices\nwithin `obj_t` structs that can be queried with accessor functions. Many\ndevelopers and experts prefer this API over the typed API.\n\n * **[Hardware Support](docs/HardwareSupport.md).** This document maintains a\ntable of supported microarchitectures.\n\n * **[Multithreading](docs/Multithreading.md).** This document describes how to\nuse the multithreading features of BLIS.\n\n * **[Mixed-Datatypes](docs/MixedDatatypes.md).** This document provides an\noverview of BLIS's mixed-datatype functionality and provides a brief example\nof how to take advantage of this new code.\n\n * **[Performance](docs/Performance.md).** This document reports empirically\nmeasured performance of a representative set of level-3 operations on a variety\nof hardware architectures, as implemented within BLIS and other BLAS libraries\nfor all four of the standard floating-point datatypes.\n\n * **[PerformanceSmall](docs/PerformanceSmall.md).** This document reports\nempirically measured performance of `gemm` on select hardware architectures\nwithin BLIS and other BLAS libraries when performing matrix problems where one\nor two dimensions is exceedingly small.\n\n * **[Discord](docs/Discord.md).** This document describes how to: create an\naccount on Discord (if you don't already have one); obtain a private invite\nlink; and use that invite link to join our BLIS server on Discord.\n\n * **[Release Notes](docs/ReleaseNotes.md).** This document tracks a summary of\nchanges included with each new version of BLIS, along with contributor credits\nfor key features.\n\n * **[Frequently Asked Questions](docs/FAQ.md).** If you have general questions\nabout BLIS, please read this FAQ. If you can't find the answer to your question,\nplease feel free to join the [blis-devel](https://groups.google.com/group/blis-devel)\nmailing list and post a question. We also have a\n[blis-discuss](https://groups.google.com/group/blis-discuss) mailing list that\nanyone can post to (even without joining).\n\n**Documents for github contributors:**\n\n * **[Contributing bug reports, feature requests, PRs, etc](CONTRIBUTING.md).**\nInterested in contributing to BLIS? Please read this document before getting\nstarted. It provides a general overview of how best to report bugs, propose new\nfeatures, and offer code patches.\n\n * **[Coding Conventions](docs/CodingConventions.md).** If you are interested or\nplanning on contributing code to BLIS, please read this document so that you can\nformat your code in accordance with BLIS's standards.\n\n**Documents for BLIS developers:**\n\n * **[Kernels Guide](docs/KernelsHowTo.md).** If you would like to learn more\nabout the types of kernels that BLIS exposes, their semantics, the operations\nthat each kernel accelerates, and various implementation issues, please read\nthis guide.\n\n * **[Configuration Guide](docs/ConfigurationHowTo.md).** If you would like to\nlearn how to add new sub-configurations or configuration families, or are simply\ninterested in learning how BLIS organizes its configurations and kernel sets,\nplease read this thorough walkthrough of the configuration system.\n\n * **[Addon Guide](docs/Addons.md).** If you are interested in learning\nabout using BLIS addons--that is, enabling existing (or creating new) bundles\nof operation or API code that are built into a BLIS library--please read this\ndocument.\n\n * **[Sandbox Guide](docs/Sandboxes.md).** If you are interested in learning\nabout using sandboxes in BLIS--that is, providing alternative implementations\nof the `gemm` operation--please read this document.\n\nPerformance\n-----------\n\nWe provide graphs that report performance of several implementations across a\nrange of hardware types, multithreading configurations, problem sizes,\noperations, and datatypes. These pages also document most of the details needed\nto reproduce these experiments.\n\n * **[Performance](docs/Performance.md).** This document reports empirically\nmeasured performance of a representative set of level-3 operations on a variety\nof hardware architectures, as implemented within BLIS and other BLAS libraries\nfor all four of the standard floating-point datatypes.\n\n * **[PerformanceSmall](docs/PerformanceSmall.md).** This document reports\nempirically measured performance of `gemm` on select hardware architectures\nwithin BLIS and other BLAS libraries when performing matrix problems where one\nor two dimensions is exceedingly small.\n\nExternal Packages\n-----------------\n\nGenerally speaking, we **highly recommend** building from source whenever\npossible using the latest `git` clone. (Tarballs of each\n[tagged release](https://github.com/flame/blis/releases) are also available, but\nwe consider them to be less ideal since they are not as easy to upgrade as\n`git` clones.)\n\nThat said, some users may prefer binary and/or source packages through their\nLinux distribution. Thanks to generous involvement/contributions from our\ncommunity members, the following BLIS packages are now available:\n\n * **Debian**. [M. Zhou](https://github.com/cdluminate) has volunteered to\nsponsor and maintain BLIS packages within the Debian Linux distribution. The\nDebian package tracker can be found [here](https://tracker.debian.org/pkg/blis).\n(Also, thanks to [Nico Schlömer](https://github.com/nschloe) for previously\nvolunteering his time to set up a standalone PPA.)\n\n * **Gentoo**. [M. Zhou](https://github.com/cdluminate) also maintains the\n[BLIS package](https://packages.gentoo.org/packages/sci-libs/blis) entry for\n[Gentoo](https://www.gentoo.org/), a Linux distribution known for its\nsource-based [portage](https://wiki.gentoo.org/wiki/Portage) package manager\nand distribution system.\n\n * **EPEL/Fedora**. There are official BLIS packages in Fedora and EPEL (for\nRHEL7+ and compatible distributions) with versions for 64-bit integers, OpenMP,\nand pthreads, and shims which can be dynamically linked instead of reference\nBLAS. (NOTE: For architectures other than intel64, amd64, and maybe arm64, the\nperformance of packaged BLIS will be low because it uses unoptimized generic\nkernels; for those architectures, [OpenBLAS](https://github.com/xianyi/OpenBLAS)\nmay be a better solution.) [Dave\nLove](https://github.com/loveshack) provides additional packages for EPEL6 in a\n[Fedora Copr](https://copr.fedorainfracloud.org/coprs/loveshack/blis/), and\npossibly versions more recent than the official repo for other EPEL/Fedora\nreleases. The source packages may build on other rpm-based distributions.\n\n * **OpenSuSE**. The copr referred to above has rpms for some OpenSuSE releases;\nthe source rpms may build for others.\n\n * **GNU Guix**. Guix has BLIS packages, provides builds only for the generic\ntarget and some specific `x86_64` micro-architectures.\n\n * **Conda**. conda channel [conda-forge](https://github.com/conda-forge/blis-feedstock)\nhas Linux, OSX and Windows binary packages for `x86_64`.\n\nDiscussion\n----------\n\nMost of the active discussions are now happening on our [Discord](https://discord.com/)\nserver. Users and developers alike are welcome! Please see the\n[BLIS Discord guide](docs/Discord.md) for a walkthrough of how to join us.\n\nYou can also still stay in touch by using either of the following mailing lists:\n\n * [blis-devel](https://groups.google.com/group/blis-devel): Please join and\npost to this mailing list if you are a BLIS developer, or if you are trying\nto use BLIS beyond simply linking to it as a BLAS library.\n\n * [blis-discuss](https://groups.google.com/group/blis-discuss): Please join and\npost to this mailing list if you have general questions or feedback regarding\nBLIS. Application developers (end users) may wish to post here, unless they\nhave bug reports, in which case they should open a\n[new issue](https://github.com/flame/blis/issues) on github.\n\nContributing\n------------\n\nFor information on how to contribute to our project, including preferred\n[coding conventions](docs/CodingConventions.md), please refer to the\n[CONTRIBUTING](CONTRIBUTING.md) file at the top-level of the BLIS source\ndistribution.\n\nCitations\n---------\n\nFor those of you looking for the appropriate article to cite regarding BLIS, we\nrecommend citing our\n[first ACM TOMS journal paper](https://dl.acm.org/doi/10.1145/2764454?cid=81314495332)\n([unofficial backup link](https://www.cs.utexas.edu/users/flame/pubs/blis1_toms_rev3.pdf)):\n\n```\n@article{BLIS1,\n   author      = {Field G. {V}an~{Z}ee and Robert A. {v}an~{d}e~{G}eijn},\n   title       = {{BLIS}: A Framework for Rapidly Instantiating {BLAS} Functionality},\n   journal     = {ACM Transactions on Mathematical Software},\n   volume      = {41},\n   number      = {3},\n   pages       = {14:1--14:33},\n   month       = {June},\n   year        = {2015},\n   issue_date  = {June 2015},\n   url         = {https://doi.acm.org/10.1145/2764454},\n}\n```\n\nYou may also cite the\n[second ACM TOMS journal paper](https://dl.acm.org/doi/10.1145/2755561?cid=81314495332)\n([unofficial backup link](https://www.cs.utexas.edu/users/flame/pubs/blis2_toms_rev3.pdf)):\n\n```\n@article{BLIS2,\n   author      = {Field G. {V}an~{Z}ee and Tyler Smith and Francisco D. Igual and\n                  Mikhail Smelyanskiy and Xianyi Zhang and Michael Kistler and Vernon Austel and\n                  John Gunnels and Tze Meng Low and Bryan Marker and Lee Killough and\n                  Robert A. {v}an~{d}e~{G}eijn},\n   title       = {The {BLIS} Framework: Experiments in Portability},\n   journal     = {ACM Transactions on Mathematical Software},\n   volume      = {42},\n   number      = {2},\n   pages       = {12:1--12:19},\n   month       = {June},\n   year        = {2016},\n   issue_date  = {June 2016},\n   url         = {https://doi.acm.org/10.1145/2755561},\n}\n```\n\nWe also have a third paper, submitted to IPDPS 2014, on achieving\n[multithreaded parallelism in BLIS](https://dl.acm.org/doi/10.1109/IPDPS.2014.110)\n([unofficial backup link](https://www.cs.utexas.edu/users/flame/pubs/blis3_ipdps14.pdf)):\n\n```\n@inproceedings{BLIS3,\n   author      = {Tyler M. Smith and Robert A. {v}an~{d}e~{G}eijn and Mikhail Smelyanskiy and\n                  Jeff R. Hammond and Field G. {V}an~{Z}ee},\n   title       = {Anatomy of High-Performance Many-Threaded Matrix Multiplication},\n   booktitle   = {28th IEEE International Parallel \\& Distributed Processing Symposium\n                  (IPDPS 2014)},\n   year        = {2014},\n   url         = {https://doi.org/10.1109/IPDPS.2014.110},\n}\n```\n\nA fourth paper, submitted to ACM TOMS, also exists, which proposes an\n[analytical model](https://dl.acm.org/doi/10.1145/2925987)\nfor determining blocksize parameters in BLIS\n([unofficial backup link](https://www.cs.utexas.edu/users/flame/pubs/TOMS-BLIS-Analytical.pdf)):\n\n```\n@article{BLIS4,\n   author      = {Tze Meng Low and Francisco D. Igual and Tyler M. Smith and\n                  Enrique S. Quintana-Ort\\'{\\i}},\n   title       = {Analytical Modeling Is Enough for High-Performance {BLIS}},\n   journal     = {ACM Transactions on Mathematical Software},\n   volume      = {43},\n   number      = {2},\n   pages       = {12:1--12:18},\n   month       = {August},\n   year        = {2016},\n   issue_date  = {August 2016},\n   url         = {https://doi.acm.org/10.1145/2925987},\n}\n```\n\nA fifth paper, submitted to ACM TOMS, begins the study of so-called\n[induced methods for complex matrix multiplication](https://dl.acm.org/doi/10.1145/3086466?cid=81314495332)\n([unofficial backup link](https://www.cs.utexas.edu/users/flame/pubs/blis5_toms_rev2.pdf)):\n\n```\n@article{BLIS5,\n   author      = {Field G. {V}an~{Z}ee and Tyler Smith},\n   title       = {Implementing High-performance Complex Matrix Multiplication via the 3m and 4m Methods},\n   journal     = {ACM Transactions on Mathematical Software},\n   volume      = {44},\n   number      = {1},\n   pages       = {7:1--7:36},\n   month       = {July},\n   year        = {2017},\n   issue_date  = {July 2017},\n   url         = {https://doi.acm.org/10.1145/3086466},\n}\n```\n\nA sixth paper, submitted to ACM TOMS, revisits the topic of the previous\narticle and derives a\n[superior induced method](https://epubs.siam.org/doi/10.1137/19M1282040)\n([unofficial backup link](https://www.cs.utexas.edu/users/flame/pubs/blis6_sisc_rev3.pdf)):\n\n```\n@article{BLIS6,\n   author      = {Field G. {V}an~{Z}ee},\n   title       = {Implementing High-Performance Complex Matrix Multiplication via the 1m Method},\n   journal     = {SIAM Journal on Scientific Computing},\n   volume      = {42},\n   number      = {5},\n   pages       = {C221--C244},\n   month       = {September}\n   year        = {2020},\n   issue_date  = {September 2020},\n   url         = {https://doi.org/10.1137/19M1282040}\n}\n```\n\nA seventh paper, submitted to ACM TOMS, explores the implementation of `gemm` for\n[mixed-domain and/or mixed-precision](https://dl.acm.org/doi/10.1145/3402225?cid=81314495332) operands\n([unofficial backup link](https://www.cs.utexas.edu/users/flame/pubs/blis7_toms_rev0.pdf)):\n\n```\n@article{BLIS7,\n   author      = {Field G. {V}an~{Z}ee and Devangi N. Parikh and Robert A. van~de~{G}eijn},\n   title       = {Supporting Mixed-domain Mixed-precision Matrix Multiplication\nwithin the BLIS Framework},\n   journal     = {ACM Transactions on Mathematical Software},\n   volume      = {47},\n   number      = {2},\n   pages       = {12:1--12:26},\n   month       = {April},\n   year        = {2021},\n   issue_date  = {April 2021},\n   url         = {https://doi.org/10.1145/3402225},\n}\n```\n\nAwards\n------\n\n * **[2023 James H. Wilkinson Prize for Numerical Software.](https://www.siam.org/prizes-recognition/major-prizes-lectures/detail/james-h-wilkinson-prize-for-numerical-software)**\nThis prize is awarded once every four years to the authors of an outstanding piece of\nnumerical software, or to individuals who have made an outstanding contribution to an\nexisting piece of numerical software. The selection committee sought to recognize the\nrecipients \"for the development of [BLIS](https://github.com/flame/blis), a portable\nopen-source software framework that facilitates rapid instantiation of\nhigh-performance BLAS and BLAS-like operations targeting modern CPUs.\" The prize will\nbe awarded at the\n[2023 SIAM Conference on Computational Science and Engineering](https://www.siam.org/conferences/cm/conference/cse23) in Amsterdam.\n\n * **[2020 SIAM Activity Group on Supercomputing Best Paper Prize.](https://www.siam.org/prizes-recognition/activity-group-prizes/detail/siag-sc-best-paper-prize)**\nThis prize is awarded once every two years to the authors of the most outstanding\npaper, as determined by the selection committee, in the field of parallel scientific\nand engineering computing published within the four calendar years preceding the\naward year. The prize was chosen for the paper [\"The BLIS Framework: Experiments in\nPortability.\"](#citations) and awarded at the [2020 SIAM Conference on Parallel Processing for Scientific Computing](https://www.siam.org/conferences/cm/conference/pp20) in Seattle where Robert van de Geijn delivered [a talk on BLIS](https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=68266) and accepted the prize alongside other coauthors.\nSee also:\n   * [SIAM News | January 2020 Prize Spotlight](https://sinews.siam.org/Details-Page/january-2020-prize-spotlight#Field&Robert)\n   * [Oden Institute's SHPC Group Win SIAM Best Paper Prize](https://www.oden.utexas.edu/about/news/ScienceHighPerfomanceComputingSIAMBestPaperPrize/)\n\nFunding\n-------\n\nThis project and its associated research were partially sponsored by grants from\n[Microsoft](https://www.microsoft.com/),\n[Intel](https://www.intel.com/),\n[Texas Instruments](https://www.ti.com/),\n[AMD](https://www.amd.com/),\n[HPE](https://www.hpe.com/),\n[Oracle](https://www.oracle.com/),\n[Huawei](https://www.huawei.com/),\n[Facebook](https://www.facebook.com/),\nand\n[ARM](https://www.arm.com/),\nas well as grants from the\n[National Science Foundation](https://www.nsf.gov/) (Awards\nCCF-0917167, ACI-1148125/1340293, CCF-1320112, and ACI-1550493).\n\n_Any opinions, findings and conclusions or recommendations expressed in this\nmaterial are those of the author(s) and do not necessarily reflect the views of\nthe National Science Foundation (NSF)._\n\n"
        },
        {
          "name": "RELEASING",
          "type": "blob",
          "size": 4.5419921875,
          "content": "Here are the steps to follow to create a new release candidate of BLIS:\n\nIf you're creating a new release candidate lineage -- that is, the *first*\nrelease candidate for a new version (i.e., 2.0-rc0):\n\n1. Use the build/start-new-rc.sh script to create a new rc branch.\n\n   $ ./build/start-new-rc.sh \"2.0\"\n\n   This will update the version file in BLIS to reflect the new version\n   string (in this case, \"2.0\"). It also refreshes the contents of the\n   CHANGELOG file with the output of 'git log'. Finally, it creates a\n   new \"-rc0\" branch (in this case, \"2.0-rc0\").\n\n   NOTE: This script assumes that you want the new rc branch to be\n   a descendant of the head of 'master'.\n\n2. Make sure the script did what it was supposed to do by inspecting\n   the output of 'git log' and 'git branch'. If everything looks good,\n   you can push the changes via:\n\n   $ git checkout master\n   $ git push\n   $ git push -u origin 2.0-rc0\n\n   At this point, the new release candidate branch is live at origin.\n\nIf you're creating a new release candidate for an existing lineage\n-- that is, a follow-up release candidate for a new version that already\nhas one or more release candidates -- start by checking out the latest\nrelease candidate, for example:\n\n1. Start by checking out the latest release candidate:\n\n   $ git checkout 2.0-rc1\n\n2. Then create a new release candidate branch whose name increments the\n   \"rc\" number:\n\n   $ git checkout -b 2.0-rc2\n\n3. Then cherry-pick one or more bugfixes that were made to 'master':\n\n   $ git cherry-pick -nx <commit>\n\n4. Finally, commit the changes. Be sure to include lines in the commit\n   log entry for each cherry-picked commit that note the commit hash\n   of the *original* commit that is being cherry-picked from. Example:\n\n     Fixed a bug in blahblahblah. (#777)\n    \n     Details:\n     - Fixed a bug in blahblahblah that manifested as blahblahblah. This\n       bug was introduced in commit abc12345. Thanks to John Smith for\n       reporting this bug.\n     - (cherry picked from commit abc0123456789abc0123456789abc0123456789a)\n\n   Note the final line, which was *not* present in the original commit\n   log entry but *should be* present in the commit log entry for the\n   commit that cherry-picks to (in this example) 2.0-rc2.\n\n\nHere are the steps to follow to create a new release (version) of BLIS:\n\n1. Make sure there are no commits that have yet to be pulled into\n   local repository.\n\n   $ git pull\n\n   If there are any commits upstream, merge them as appropriate.\n\n2. Check out the latest release candidate:\n\n   $ git checkout 2.0-rc2\n\n3. Consider whether the so_version should be updated (via the so_version\n   file in the 'build' directory) due to any ABI changes since the previous\n   version. If so, commit that change now.\n\n4. Verify that the code builds properly.\n\n   $ ./configure auto; make\n\n5. Verify that the code passes BLIS and BLAS tests:\n\n   $ make check           # BLIS testsuite (fast) + BLAS test drivers\n   $ make checkblis       # BLIS testsuite (full ex. mixed-datatype)\n   $ make checkblis-md    # BLIS testsuite (mixed-datatype only)\n   $ make checkblis-salt  # BLIS testsuite (fast + salt)\n\n6. Draft a new announcement to blis-devel, crediting those who\n   contributed towards this version by browsing 'git log'.\n\n7. Update CREDITS file if 'git log' reveals any new contributors.\n   NOTE: This should have already been done prior to the rc cycle.\n\n8. Update docs/ReleaseNotes.md file with body of finalized announcement\n   and the date of the release.\n   NOTE: This should be a cherry-pick off of 'master' since the release notes\n   need to be committed there anyway as well.\n\n9. Commit changes from steps 7 and 8.\n\n10. Create a final release branch:\n\n   $ git checkout -b 2.0-final\n\n   This will help identify the release commit when browsing the GitHub network\n   graph, since tags don't show up there.\n\n11. Tag the final release commit:\n\n   $ git tag 2.0 2.0-final\n\n   You can also use the actual commit hash instead of \"2.0-final\".\n\n12. Push the new commits and new tag associated with the new version:\n\n   $ git push\n   $ git push --tag\n\n13. Publish a new release via GitHub (https://github.com/flame/blis/releases).\n    Identify the new version by the tag you just created and pushed. You can\n    also identify the previous release.\n\n    Try to use formatting consistent with the prior release. (You can start to\n    edit the previous release, inspect/copy some of the markdown syntax, and\n    then abort the edit.)\n\n14. Update the Wikipedia entry for BLIS to reflect the new latest version.\n\n15. Announce the release on Discord.\n\n16. Send finalized announcement to blis-devel.\n\n"
        },
        {
          "name": "addon",
          "type": "tree",
          "content": null
        },
        {
          "name": "blastest",
          "type": "tree",
          "content": null
        },
        {
          "name": "blis.pc.in",
          "type": "blob",
          "size": 0.2568359375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: BLIS\nDescription: BLAS-like Library Instantiation Software Framework\nVersion: @PACKAGE_VERSION@\nLibs: -L${libdir} -lblis\nLibs.private: @LDFLAGS@\nCflags: -I${includedir}/blis\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "common.mk",
          "type": "blob",
          "size": 50.4013671875,
          "content": "#\n#\n#  BLIS\n#  An object-based framework for developing high-performance BLAS-like\n#  libraries.\n#\n#  Copyright (C) 2014, The University of Texas at Austin\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are\n#  met:\n#   - Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n#   - Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#   - Neither the name(s) of the copyright holder(s) nor the names of its\n#     contributors may be used to endorse or promote products derived\n#     from this software without specific prior written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n#  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n#\n\n# Only include this block of code once\nifndef COMMON_MK_INCLUDED\nCOMMON_MK_INCLUDED := yes\n\n\n\n#\n# --- CFLAGS storage functions -------------------------------------------------\n#\n\n# Define a function that stores the value of a variable to a different\n# variable containing a specified suffix (corresponding to a configuration).\ndefine store-var-for\n$(strip $(1)).$(strip $(2)) := $($(strip $(1)))\nendef\n\n# Define a function similar to store-var-for, except that appends instead\n# of overwriting.\ndefine append-var-for\n$(strip $(1)).$(strip $(2)) += $($(strip $(1)))\nendef\n\n# Define a function that stores the value of all of the variables in a\n# make_defs.mk file to other variables with the configuration (the\n# argument $(1)) added as a suffix. This function is called once from\n# each make_defs.mk. Also, add the configuration to CONFIGS_INCL.\ndefine store-make-defs\n$(eval $(call store-var-for,CC,         $(1)))\n$(eval $(call store-var-for,CC_VENDOR,  $(1)))\n$(eval $(call store-var-for,CPPROCFLAGS,$(1)))\n$(eval $(call store-var-for,CLANGFLAGS, $(1)))\n$(eval $(call store-var-for,CXXLANGFLAGS,$(1)))\n$(eval $(call store-var-for,CMISCFLAGS, $(1)))\n$(eval $(call store-var-for,CPICFLAGS,  $(1)))\n$(eval $(call store-var-for,CWARNFLAGS, $(1)))\n$(eval $(call store-var-for,CDBGFLAGS,  $(1)))\n$(eval $(call store-var-for,COPTFLAGS,  $(1)))\n$(eval $(call store-var-for,CKOPTFLAGS, $(1)))\n$(eval $(call store-var-for,CKVECFLAGS, $(1)))\n$(eval $(call store-var-for,CROPTFLAGS, $(1)))\n$(eval $(call store-var-for,CRVECFLAGS, $(1)))\nCONFIGS_INCL += $(1)\nendef\n\n# Define a function that retreives the value of a variable for a\n# given configuration.\ndefine load-var-for\n$($(strip $(1)).$(strip $(2)))\nendef\n\n\n\n#\n# --- CFLAGS query functions ---------------------------------------------------\n#\n\n# Define some functions that return the appropriate CFLAGS for a given\n# configuration. This assumes that the make_defs.mk files have already been\n# included, which results in those values having been stored to\n# configuration-qualified variables.\n\nget-noopt-cflags-for     = $(strip $(CFLAGS_PRESET) \\\n                                   $(call load-var-for,CDBGFLAGS,$(1)) \\\n                                   $(call load-var-for,CWARNFLAGS,$(1)) \\\n                                   $(call load-var-for,CPICFLAGS,$(1)) \\\n                                   $(call load-var-for,CMISCFLAGS,$(1)) \\\n                                   $(call load-var-for,CLANGFLAGS,$(1)) \\\n                                   $(call load-var-for,CPPROCFLAGS,$(1)) \\\n                                   $(CTHREADFLAGS) \\\n                                   $(CINCFLAGS) \\\n                            )\n\nget-noopt-cxxflags-for   = $(strip $(CXXFLAGS_PRESET) \\\n                                   $(call load-var-for,CDBGFLAGS,$(1)) \\\n                                   $(call load-var-for,CWARNFLAGS,$(1)) \\\n                                   $(call load-var-for,CPICFLAGS,$(1)) \\\n                                   $(call load-var-for,CMISCFLAGS,$(1)) \\\n                                   $(call load-var-for,CXXLANGFLAGS,$(1)) \\\n                                   $(call load-var-for,CPPROCFLAGS,$(1)) \\\n                                   $(CTHREADFLAGS) \\\n                                   $(CXXTHREADFLAGS) \\\n                                   $(CINCFLAGS) \\\n                            )\n\nget-refinit-cflags-for   = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                                   -DBLIS_IN_REF_KERNEL=1 \\\n                                   -include $(CONFIG_PATH)/$(1)/bli_kernel_defs_$(1).h \\\n                            )\n\nget-refinit-cxxflags-for = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cxxflags-for,$(1)) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                                   -DBLIS_IN_REF_KERNEL=1 \\\n                                   -include $(CONFIG_PATH)/$(1)/bli_kernel_defs_$(1).h \\\n                            )\n\nget-refkern-cflags-for   = $(strip $(call load-var-for,CROPTFLAGS,$(1)) \\\n                                   $(call load-var-for,CRVECFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                                   $(COMPSIMDFLAGS) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                                   -DBLIS_IN_REF_KERNEL=1 \\\n                                   -include $(CONFIG_PATH)/$(1)/bli_kernel_defs_$(1).h \\\n                            )\n\nget-refkern-cxxflags-for = $(strip $(call load-var-for,CROPTFLAGS,$(1)) \\\n                                   $(call load-var-for,CRVECFLAGS,$(1)) \\\n                                   $(call get-noopt-cxxflags-for,$(1)) \\\n                                   $(COMPSIMDFLAGS) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                                   -DBLIS_IN_REF_KERNEL=1 \\\n                                   -include $(CONFIG_PATH)/$(1)/bli_kernel_defs_$(1).h \\\n                            )\n\nget-config-cflags-for    = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n\nget-config-cxxflags-for  = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cxxflags-for,$(1)) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n\nget-frame-cflags-for     = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n\nget-frame-cxxflags-for   = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cxxflags-for,$(1)) \\\n                                   $(BUILD_ASANFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n\nget-kernel-cflags-for    = $(strip $(call load-var-for,CKOPTFLAGS,$(1)) \\\n                                   $(call load-var-for,CKVECFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n\nget-kernel-cxxflags-for  = $(strip $(call load-var-for,CKOPTFLAGS,$(1)) \\\n                                   $(call load-var-for,CKVECFLAGS,$(1)) \\\n                                   $(call get-noopt-cxxflags-for,$(1)) \\\n                                   -DBLIS_CNAME=$(1) \\\n                                   -DBLIS_CNAME_UPPER=$(shell echo $(1) | tr a-z A-Z) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n\n# When compiling addons, we use flags similar to those of general framework\n# source. This ensures that the same code can be linked and run across various\n# sub-configurations.\nget-addon-c99flags-for   = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                                   $(CADDONINCFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\nget-addon-cxxflags-for   = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cxxflags-for,$(1)) \\\n                                   $(CADDONINCFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n# When compiling addon kernels, we use flags similar to those of kernels\n# flags, except we also include the addon header paths.\nget-addon-kernel-c99flags-for = $(strip $(call load-var-for,CKOPTFLAGS,$(1)) \\\n                                        $(call load-var-for,CKVECFLAGS,$(1)) \\\n                                        $(call get-noopt-cflags-for,$(1)) \\\n                                        $(CADDONINCFLAGS) \\\n                                        $(BUILD_CPPFLAGS) \\\n                                        $(BUILD_SYMFLAGS) \\\n                                 )\n\n# When compiling sandboxes, we use flags similar to those of general framework\n# source. This ensures that the same code can be linked and run across various\n# sub-configurations. (NOTE: If we ever switch to using refkernel or kernel\n# flags, we should prevent enabling sandboxes for umbrella families by verifying\n# that config_list == config_name if --enable-sandbox is given. THIS ALSO\n# APPLIES TO ADDONS ABOVE.)\nget-sandbox-c99flags-for = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                                   $(CSANDINCFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\nget-sandbox-cxxflags-for = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cxxflags-for,$(1)) \\\n                                   $(CSANDINCFLAGS) \\\n                                   $(BUILD_CPPFLAGS) \\\n                                   $(BUILD_SYMFLAGS) \\\n                            )\n\n# Define a separate function that will return appropriate flags for use by\n# applications that want to use the same basic flags as those used when BLIS\n# was compiled. (NOTE: This is the same as the $(get-frame-cflags-for ...)\n# function, except that it omits a few variables that contain flags exclusively\n# for use when BLIS is being compiled/built:\n# - BUILD_CPPFLAGS, which contains a cpp macro that confirms that BLIS\n#   is being built;\n# - BUILD_SYMFLAGS, which contains symbol export flags that are only\n#   needed when a shared library is being compiled/linked; and\n# - BUILD_ASANFLAGS, which contains a flag that causes the compiler to\n#   insert instrumentation for memory error detection.\nget-user-cflags-for      = $(strip $(call load-var-for,COPTFLAGS,$(1)) \\\n                                   $(call get-noopt-cflags-for,$(1)) \\\n                            )\n\n# Define functions that return messages appropriate for each non-verbose line\n# of compilation output.\nget-noopt-text            = \"(CFLAGS for no optimization)\"\nget-refinit-text-for      = \"('$(1)' CFLAGS for ref. kernel init)\"\nget-refinit-cxxtext-for   = \"('$(1)' CXXFLAGS for ref. kernel init)\"\nget-refkern-text-for      = \"('$(1)' CFLAGS for ref. kernels)\"\nget-refkern-cxxtext-for   = \"('$(1)' CXXFLAGS for ref. kernels)\"\nget-config-text-for       = \"('$(1)' CFLAGS for config code)\"\nget-config-cxxtext-for    = \"('$(1)' CXXFLAGS for config code)\"\nget-frame-text-for        = \"('$(1)' CFLAGS for framework code)\"\nget-frame-cxxtext-for     = \"('$(1)' CXXFLAGS for framework code)\"\nget-kernel-text-for       = \"('$(1)' CFLAGS for kernels)\"\nget-kernel-cxxtext-for    = \"('$(1)' CXXFLAGS for kernels)\"\nget-addon-c99text-for     = \"('$(1)' CFLAGS for addons)\"\nget-addon-cxxtext-for     = \"('$(1)' CXXFLAGS for addons)\"\nget-addon-kernel-text-for = \"('$(1)' CFLAGS for addon kernels)\"\nget-sandbox-c99text-for   = \"('$(1)' CFLAGS for sandboxes)\"\nget-sandbox-cxxtext-for   = \"('$(1)' CXXFLAGS for sandboxes)\"\n\n\n\n#\n# --- Miscellaneous helper functions -------------------------------------------\n#\n\n# Define functions that filters a list of filepaths $(1) that contain (or\n# omit) an arbitrary substring $(2).\nfiles-that-contain      = $(strip $(foreach f, $(1), $(if $(findstring $(2),$(f)),$(f),)))\nfiles-that-dont-contain = $(strip $(foreach f, $(1), $(if $(findstring $(2),$(f)),,$(f))))\n\n# Define a function that removes duplicate strings *without* using the sort\n# function.\nrm-dups = $(if $1,$(firstword $1) $(call rm-dups,$(filter-out $(firstword $1),$1)))\n\n\n\n#\n# --- Include makefile configuration file --------------------------------------\n#\n\n# Use the current directory as the default path to the root directory for\n# makefile fragments (and the configuration family's make_defs.mk), but\n# allow the includer to override this value if it needs to point to an\n# installation directory.\nifeq ($(strip $(SHARE_PATH)),)\nSHARE_PATH        := .\nendif\n\n# Define the name of the configuration file.\nCONFIG_MK_FILE     := config.mk\n\n# Identify the base path for the root directory for makefile fragments (and\n# the configuration family's make_defs.mk). We define this path in terms of\n# SHARE_PATH, which gets a default value above (which is what happens for the\n# top-level Makefile). If SHARE_PATH is specified by the Makefile prior to\n# including common.mk, that path is used instead. This allows Makefiles for\n# example code and test drivers to reference an installed prefix directory\n# for situations when the build directory no longer exists.\nBASE_SHARE_PATH    := $(SHARE_PATH)\n\n# Include the configuration file.\n-include $(BASE_SHARE_PATH)/$(CONFIG_MK_FILE)\n\n\n\n#\n# --- Handle 'make clean' and friends without config.mk ------------------------\n#\n\n# Detect whether we actually got the configuration file. If we didn't, then\n# it is likely that the user has not yet generated it (via configure).\nifeq ($(strip $(CONFIG_MK_INCLUDED)),yes)\nCONFIG_MK_PRESENT := yes\nIS_CONFIGURED     := yes\nelse\nCONFIG_MK_PRESENT := no\nIS_CONFIGURED     := no\nendif\n\n# If we didn't get config.mk, then we need to set some basic variables so\n# that make will function without error for things like 'make clean'.\nifeq ($(IS_CONFIGURED),no)\n\n# If this makefile fragment is being run and there is no config.mk present,\n# then it's probably safe to assume that the user is currently located in the\n# source distribution.\nDIST_PATH := .\n\n# Even though they won't be used explicitly, it appears that setting these\n# INSTALL_* variables to something sane (that is, not allowing them default\n# to the empty string) is necessary to prevent make from hanging, likely\n# because the statements that define UNINSTALL_LIBS and UNINSTALL_HEADERS,\n# when evaluated, result in running 'find' on the root directory--definitely\n# something we would like to avoid.\nINSTALL_LIBDIR   := $(HOME)/blis/lib\nINSTALL_INCDIR   := $(HOME)/blis/include\nINSTALL_SHAREDIR := $(HOME)/blis/share\n\nendif\n\n\n\n#\n# --- Primary makefile variable definitions ------------------------------------\n#\n\n# Construct the architecture-version string, which will be used to name the\n# library upon installation.\nVERS_CONF          := $(VERSION)-$(CONFIG_NAME)\n\n# All makefile fragments in the tree will have this name.\nFRAGMENT_MK        := .fragment.mk\n\n# Locations of important files.\nBUILD_DIR          := build\nCONFIG_DIR         := config\nifeq ($(FRAME_DIR),)\nFRAME_DIR          := frame\nendif\nREFKERN_DIR        := ref_kernels\nKERNELS_DIR        := kernels\nADDON_DIR          := addon\nSANDBOX_DIR        := sandbox\nOBJ_DIR            := obj\nLIB_DIR            := lib\nINCLUDE_DIR        := include\nBLASTEST_DIR       := blastest\nTESTSUITE_DIR      := testsuite\n\nVEND_DIR           := vendor\nVEND_CPP_DIR       := $(VEND_DIR)/cpp\nVEND_TESTCPP_DIR   := $(VEND_DIR)/testcpp\n\n# The filename suffix for reference kernels.\nREFNM              := ref\n\n# Source suffixes.\nCONFIG_SRC_SUFS    := c\nKERNELS_SRC_SUFS   := c s S\nifneq ($(findstring hpx,$(THREADING_MODEL)),)\nFRAME_SRC_SUFS     := c cpp\nelse\nFRAME_SRC_SUFS     := c\nendif\n\nADDON_C99_SUFS     := c\nADDON_CXX_SUFS     := cc cpp cxx\nADDON_SRC_SUFS     := $(ADDON_C99_SUFS) $(ADDON_CXX_SUFS)\n\nSANDBOX_C99_SUFS   := c\nSANDBOX_CXX_SUFS   := cc cpp cxx\nSANDBOX_SRC_SUFS   := $(SANDBOX_C99_SUFS) $(SANDBOX_CXX_SUFS)\n\n# Header suffixes.\nFRAME_H99_SUFS     := h\nFRAME_HDR_SUFS     := $(FRAME_H99_SUFS)\n\nADDON_H99_SUFS     := h\nADDON_HXX_SUFS     := hh hpp hxx\nADDON_HDR_SUFS     := $(ADDON_H99_SUFS) $(ADDON_HXX_SUFS)\n\nSANDBOX_H99_SUFS   := h\nSANDBOX_HXX_SUFS   := hh hpp hxx\nSANDBOX_HDR_SUFS   := $(SANDBOX_H99_SUFS) $(SANDBOX_HXX_SUFS)\n\n# Combine all header suffixes and remove duplicates via sort().\nALL_HDR_SUFS       := $(sort $(FRAME_HDR_SUFS) \\\n                             $(ADDON_HDR_SUFS) \\\n                             $(SANDBOX_HDR_SUFS) )\n\nALL_H99_SUFS       := $(sort $(FRAME_H99_SUFS) \\\n                             $(ADDON_H99_SUFS) \\\n                             $(SANDBOX_H99_SUFS) )\n\n# The names of scripts that check output from the BLAS test drivers and\n# BLIS test suite.\nBLASTEST_CHECK     := check-blastest.sh\nTESTSUITE_CHECK    := check-blistest.sh\n\n# The names of the testsuite input/configuration files.\nTESTSUITE_CONF_GEN := input.general\nTESTSUITE_CONF_OPS := input.operations\nTESTSUITE_FAST_GEN := input.general.fast\nTESTSUITE_FAST_OPS := input.operations.fast\nTESTSUITE_MIXD_GEN := input.general.mixed\nTESTSUITE_MIXD_OPS := input.operations.mixed\nTESTSUITE_SALT_GEN := input.general.salt\nTESTSUITE_SALT_OPS := input.operations.salt\nTESTSUITE_OUT_FILE := output.testsuite\n\n# CHANGELOG file.\nCHANGELOG          := CHANGELOG\n\n# Something for OS X so that echo -n works as expected.\nSHELL              := bash\n\n# Construct paths to the four primary directories of source code:\n# the config directory, general framework code, reference kernel code,\n# and optimized kernel code. Also process paths for addon and sandbox\n# directories.\nCONFIG_PATH        := $(DIST_PATH)/$(CONFIG_DIR)\nFRAME_PATH         := $(DIST_PATH)/$(FRAME_DIR)\nREFKERN_PATH       := $(DIST_PATH)/$(REFKERN_DIR)\nKERNELS_PATH       := $(DIST_PATH)/$(KERNELS_DIR)\nADDON_PATH         := $(DIST_PATH)/$(ADDON_DIR)\nSANDBOX_PATH       := $(DIST_PATH)/$(SANDBOX_DIR)\nBUILD_PATH         := $(DIST_PATH)/$(BUILD_DIR)\n\n# Construct paths to some optional C++ template headers contributed by AMD.\nVEND_CPP_PATH      := $(DIST_PATH)/$(VEND_CPP_DIR)\nVEND_TESTCPP_PATH  := $(DIST_PATH)/$(VEND_TESTCPP_DIR)\n\n# Construct paths to the makefile fragments for the four primary directories\n# of source code: the config directory, general framework code, reference\n# kernel code, and optimized kernel code.\nCONFIG_FRAG_PATH   := ./obj/$(CONFIG_NAME)/$(CONFIG_DIR)\nFRAME_FRAG_PATH    := ./obj/$(CONFIG_NAME)/$(FRAME_DIR)\nREFKERN_FRAG_PATH  := ./obj/$(CONFIG_NAME)/$(REFKERN_DIR)\nKERNELS_FRAG_PATH  := ./obj/$(CONFIG_NAME)/$(KERNELS_DIR)\nADDON_FRAG_PATH    := ./obj/$(CONFIG_NAME)/$(ADDON_DIR)\nSANDBOX_FRAG_PATH  := ./obj/$(CONFIG_NAME)/$(SANDBOX_DIR)\n\n\n\n#\n# --- Library name and local paths ---------------------------------------------\n#\n\n# Use lib/CONFIG_NAME as the default path to the local header files, but\n# allow the includer to override this value if it needs to point to an\n# installation directory.\nifeq ($(strip $(LIB_PATH)),)\nLIB_PATH           := $(LIB_DIR)/$(CONFIG_NAME)\nendif\n\n# Identify the base path for the intermediate library directory. We define\n# this path in terms of LIB_PATH, which gets a default value above (which is\n# what happens for the top-level Makefile). If LIB_PATH is specified by the\n# Makefile prior to including common.mk, that path is used instead. This\n# allows Makefiles for example code and test drivers to reference an installed\n# prefix directory for situations when the build directory no longer exists.\nBASE_LIB_PATH      := $(LIB_PATH)\n\n# The base name of the BLIS library that we will build.\nLIBBLIS            := libblis\n\n# The shared (dynamic) library file suffix is different for Linux and OS X.\nifeq ($(OS_NAME),Darwin)\nSHLIB_EXT          := dylib\nelse ifeq ($(IS_WIN),yes)\nifeq ($(IS_MSVC),no)\nSHLIB_EXT          := dll.a\nelse\nSHLIB_EXT          := lib\nendif\nelse\nSHLIB_EXT          := so\nendif\n\n# Note: These names will be modified later to include the configuration and\n# version strings.\nLIBBLIS_A          := $(LIBBLIS).a\nLIBBLIS_SO         := $(LIBBLIS).$(SHLIB_EXT)\n\n# Append the base library path to the library names.\nLIBBLIS_A_PATH     := $(BASE_LIB_PATH)/$(LIBBLIS_A)\nLIBBLIS_SO_PATH    := $(BASE_LIB_PATH)/$(LIBBLIS_SO)\n\n# Create a filepath to a local symlink to the soname--that is, the same as\n# LIBBLIS_SO_PATH except with the .so major version number. Since the shared\n# library lists its soname as 'libblis.so.n', where n is the .so major version\n# number, a symlink in BASE_LIB_PATH is needed so that ld can find the local\n# shared library when the testsuite is run via 'make test' or 'make check'.\n\nifeq ($(OS_NAME),Darwin)\n# OS X shared library extensions.\nLIBBLIS_SO_MAJ_EXT := $(SO_MAJOR).$(SHLIB_EXT)\nLIBBLIS_SO_MMB_EXT := $(SO_MMB).$(SHLIB_EXT)\nelse ifeq ($(IS_WIN),yes)\n# Windows shared library extension.\nLIBBLIS_SO_MAJ_EXT := $(SO_MAJOR).dll\nLIBBLIS_SO_MMB_EXT :=\nelse\n# Linux shared library extensions.\nLIBBLIS_SO_MAJ_EXT := $(SHLIB_EXT).$(SO_MAJOR)\nLIBBLIS_SO_MMB_EXT := $(SHLIB_EXT).$(SO_MMB)\nendif\nLIBBLIS_SONAME         := $(LIBBLIS).$(LIBBLIS_SO_MAJ_EXT)\nLIBBLIS_SO_MAJ_PATH    := $(BASE_LIB_PATH)/$(LIBBLIS_SONAME)\n\n# Construct the output path when building a shared library.\n# NOTE: This code and the code immediately above is a little curious and\n# perhaps could be refactored (carefully).\nifeq ($(IS_WIN),yes)\nLIBBLIS_SO_OUTPUT_NAME := $(LIBBLIS_SO_MAJ_PATH)\nelse\nLIBBLIS_SO_OUTPUT_NAME := $(LIBBLIS_SO_PATH)\nendif\n\n\n\n#\n# --- Utility program definitions ----------------------------------------------\n#\n\nSH         := /bin/sh\nMV         := mv\nMKDIR      := mkdir -p\nRM_F       := rm -f\nRM_RF      := rm -rf\nSYMLINK    := ln -sf\nFIND       := find\nGREP       := grep\nEGREP      := grep -E\nXARGS      := xargs\nINSTALL    := install -c\nDEVNULL    := /dev/null\n\n# Script for creating a monolithic header file.\n#FLATTEN_H  := $(DIST_PATH)/build/flatten-headers.sh\nFLATTEN_H  := $(PYTHON) $(DIST_PATH)/build/flatten-headers.py\n\n# Default archiver flags.\nARFLAGS    := cr\n\n# Used to refresh CHANGELOG.\nGIT        := git\nGIT_LOG    := $(GIT) log --decorate\n\n# Define the locations of a script to generate a list of shared library symbols\n# within BLIS as well as the symbol file itself.\nGEN_SYMS   := $(BUILD_PATH)/gen-libblis-symbols.sh\nSYM_FILE   := $(BUILD_PATH)/libblis-symbols.def\n\n\n\n#\n# --- Default linker definitions -----------------------------------------------\n#\n\n# NOTE: This section needs to reside before the inclusion of make_defs.mk\n# files (just below), as most configurations' make_defs.mk don't tinker\n# with things like LDFLAGS, but some do (or may), in which case they can\n# manually override whatever they need.\n\n# Define the external libraries we may potentially need at link-time.\nifeq ($(IS_MSVC),yes)\nLIBM       :=\nelse\nLIBM       := -lm\nendif\nLIBMEMKIND := -lmemkind\n\n# Default linker flags.\n# NOTE: -lpthread is needed unconditionally because BLIS uses pthread_once()\n# to initialize itself in a thread-safe manner. The one exception to this\n# rule: if --disable-system is given at configure-time, LIBPTHREAD is empty.\nLDFLAGS    := $(LDFLAGS_PRESET) $(LIBM) $(LIBPTHREAD)\n\n# Add libmemkind to the link-time flags, if it was enabled at configure-time.\nifeq ($(MK_ENABLE_MEMKIND),yes)\nLDFLAGS    += $(LIBMEMKIND)\nendif\n\n# Never use libm with Intel compilers.\nifeq ($(CC_VENDOR),icc)\nLDFLAGS    := $(filter-out $(LIBM),$(LDFLAGS))\nendif\n\n# Never use libmemkind with Intel SDE.\nifeq ($(DEBUG_TYPE),sde)\nLDFLAGS    := $(filter-out $(LIBMEMKIND),$(LDFLAGS))\nendif\n\n# If AddressSanitizer is enabled, add the compiler flag to LDFLAGS.\nifeq ($(MK_ENABLE_ASAN),yes)\nLDFLAGS    += -fsanitize=address\nendif\n\n# Specify the shared library's 'soname' field.\n# NOTE: The flag for creating shared objects is different for Linux and OS X.\nifeq ($(OS_NAME),Darwin)\n# OS X shared library link flags.\nSOFLAGS    := -dynamiclib\nifeq ($(MK_ENABLE_RPATH),yes)\nSOFLAGS    += -Wl,-install_name,@rpath/$(LIBBLIS_SONAME)\nelse\nSOFLAGS    += -Wl,-install_name,$(libdir)/$(LIBBLIS_SONAME)\nendif\nelse\nSOFLAGS    := -shared\nifeq ($(IS_WIN),yes)\n# Windows shared library link flags.\nifeq ($(IS_MSVC),yes)\nSOFLAGS    += -Wl,-implib:$(BASE_LIB_PATH)/$(LIBBLIS).lib\nelse\nSOFLAGS    += -Wl,--out-implib,$(BASE_LIB_PATH)/$(LIBBLIS).dll.a\nendif\nelse\n# Linux shared library link flags.\nSOFLAGS    += -Wl,-soname,$(LIBBLIS_SONAME)\nendif\nendif\n\n# Decide which library to link to for things like the testsuite and BLIS test\n# drivers. We default to the static library, unless only the shared library was\n# enabled, in which case we use the shared library.\nLIBBLIS_L      := $(LIBBLIS_A)\nLIBBLIS_LINK   := $(LIBBLIS_A_PATH)\nifeq ($(MK_ENABLE_SHARED),yes)\nifeq ($(MK_ENABLE_STATIC),no)\nLIBBLIS_L      := $(LIBBLIS_SO)\nLIBBLIS_LINK   := $(LIBBLIS_SO_PATH)\nifeq ($(IS_WIN),no)\n# For Linux and OS X: set rpath property of shared object.\nifeq ($(OS_NAME),Darwin)\n# rpath for test_libblis.x\nLDFLAGS        += -Wl,-rpath,@executable_path/$(BASE_LIB_PATH)\n# rpath for BLAS tests\nLDFLAGS        += -Wl,-rpath,@executable_path/../../../$(BASE_LIB_PATH)\nelse\n# rpath for test_libblis.x\nLDFLAGS        += -Wl,-rpath,'$$ORIGIN/$(BASE_LIB_PATH)'\n# rpath for BLAS tests\nLDFLAGS        += -Wl,-rpath,'$$ORIGIN/../../../$(BASE_LIB_PATH)'\nendif\nendif\nendif\n# On windows, use the shared library even if static is created.\nifeq ($(IS_WIN),yes)\nLIBBLIS_L      := $(LIBBLIS_SO)\nLIBBLIS_LINK   := $(LIBBLIS_SO_PATH)\nendif\nendif\n\n\n\n#\n# --- Include makefile definitions file ----------------------------------------\n#\n\n# Define the name of the file containing build and architecture-specific\n# makefile definitions.\nMAKE_DEFS_FILE     := make_defs.mk\n\n# Assemble a list of all configuration family members, including the\n# configuration family name itself. Note that sort() will remove duplicates\n# for situations where CONFIG_NAME is present in CONFIG_LIST, such as would\n# be the case for singleton families.\nCONFIG_LIST_FAM    := $(sort $(strip $(CONFIG_LIST) $(CONFIG_NAME)))\n\n# Construct the paths to the makefile definitions files, each of which\n# resides in a separate configuration sub-directory. We use CONFIG_LIST_FAM\n# since we might need the makefile definitions associated with the\n# configuration family (if it is an umbrella family).\n# NOTE: We use the prefix $(BASE_SHARE_PATH)/$(CONFIG_DIR)/ instead of\n# $(CONFIG_PATH) so that make_defs.mk can be found when it is installed,\n# provided the caller defined SHARE_PATH to that install directory.\nCONFIG_PATHS       := $(addprefix $(BASE_SHARE_PATH)/$(CONFIG_DIR)/, \\\n                                  $(CONFIG_LIST_FAM))\nMAKE_DEFS_MK_PATHS := $(addsuffix /$(MAKE_DEFS_FILE), $(CONFIG_PATHS))\n\n# Initialize the list of included (found) configurations to empty.\nCONFIGS_INCL       :=\n\n# Include the makefile definitions files implied by the list of configurations.\n-include $(MAKE_DEFS_MK_PATHS)\n\n# Detect whether we actually got all of the make definitions files. If\n# we didn't, then maybe a configuration is mislabeled or missing. The\n# check-env-make-defs target checks ALL_MAKE_DEFS_MK_PRESENT and outputs\n# an error message if it is set to 'no'.\n# NOTE: We use CONFIG_LIST_FAM as the expected list of configurations.\n# This combines CONFIG_NAME with CONFIG_LIST. The inclusion of CONFIG_NAME\n# is needed for situations where the configuration family is an umbrella\n# family (e.g. 'intel64'), since families have separate make_def.mk files.\nCONFIGS_EXPECTED := $(CONFIG_LIST_FAM)\nifeq ($(sort $(strip $(CONFIGS_INCL))), \\\n      $(sort $(strip $(CONFIGS_EXPECTED))))\nALL_MAKE_DEFS_MK_PRESENT := yes\nelse\nALL_MAKE_DEFS_MK_PRESENT := no\nendif\n\n\n\n#\n# --- Configuration-agnostic flags ---------------------------------------------\n#\n\n# --- Linker program ---\n\n# Use whatever compiler was chosen. A C++ compiler must be used if HPX is enabled.\nifneq ($(findstring hpx,$(THREADING_MODEL)),)\nLINKER     := $(CXX)\nelse\nLINKER     := $(CC)\nendif\n\n# --- Warning flags ---\n\nCWARNFLAGS :=\n\n# Disable unused function warnings and stop compiling on first error for\n# all compilers that accept such options: gcc, clang, and icc.\nifneq ($(CC_VENDOR),ibm)\nifneq ($(CC_VENDOR),nvc)\nCWARNFLAGS += -Wall -Wno-unused-function -Wfatal-errors\nelse\nCWARNFLAGS += -Wall -Wno-unused-function\nendif\nendif\n\n# Disable tautological comparision warnings in clang.\nifeq ($(CC_VENDOR),clang)\nCWARNFLAGS += -Wno-tautological-compare -Wno-pass-failed\nendif\n\n# Disable other annoying warnings.\nifeq ($(CC_VENDOR),clang)\nCWARNFLAGS +=\nelse\nifeq ($(CC_VENDOR),gcc)\n# The '-Wno-maybe-uninitialized' option makes me nervous. Let's temporarily\n# disable for now. -FGVZ\n#CWARNFLAGS += -Wno-maybe-uninitialized -Wno-comment\nCWARNFLAGS += -Wno-comment\nendif\nendif\n\n$(foreach c, $(CONFIG_LIST_FAM), $(eval $(call append-var-for,CWARNFLAGS,$(c))))\n\n# --- Position-independent code flags (shared libraries only) ---\n\n# Note: Avoid -fPIC flags for Windows builds since all code is position-\n# independent.\nifeq ($(IS_MSVC),yes)\nCPICFLAGS :=\nendif\n$(foreach c, $(CONFIG_LIST_FAM), $(eval $(call store-var-for,CPICFLAGS,$(c))))\n\n# --- Symbol exporting flags (shared libraries only) ---\n\nifeq ($(MK_ENABLE_SHARED),yes)\n\n# NOTE: These flags are only applied when building BLIS and not used by\n# applications that import BLIS compilation flags via the\n# $(get-user-cflags-for ...) function.\n\n# Determine default export behavior / visibility of symbols for gcc.\nifeq ($(CC_VENDOR),gcc)\nifeq ($(IS_WIN),yes)\nifeq ($(EXPORT_SHARED),all)\nBUILD_SYMFLAGS := -Wl,--export-all-symbols, -Wl,--enable-auto-import\nelse # ifeq ($(EXPORT_SHARED),public)\nBUILD_SYMFLAGS := -Wl,--exclude-all-symbols\nendif\nelse # ifeq ($(IS_WIN),no)\nifeq ($(EXPORT_SHARED),all)\n# Export all symbols by default.\nBUILD_SYMFLAGS := -fvisibility=default\nelse # ifeq ($(EXPORT_SHARED),public)\n# Hide all symbols by default and export only those that have been annotated\n# as needing to be exported.\nBUILD_SYMFLAGS := -fvisibility=hidden\nendif\nendif\nendif\n\n# Determine default export behavior / visibility of symbols for icc.\n# NOTE: The Windows branches have been omitted since we currently make no\n# effort to support Windows builds via icc (only gcc/clang via AppVeyor).\nifeq ($(CC_VENDOR),icc)\nifeq ($(EXPORT_SHARED),all)\n# Export all symbols by default.\nBUILD_SYMFLAGS := -fvisibility=default\nelse # ifeq ($(EXPORT_SHARED),public)\n# Hide all symbols by default and export only those that have been annotated\n# as needing to be exported.\nBUILD_SYMFLAGS := -fvisibility=hidden\nendif\nendif\n\n# Determine default export behavior / visibility of symbols for clang.\nifeq ($(CC_VENDOR),clang)\nifeq ($(IS_WIN),yes)\nifeq ($(IS_MSVC),no)\n# This is a clang build targetting MinGW-w64 env\nifeq ($(EXPORT_SHARED),all)\nBUILD_SYMFLAGS := -Wl,--export-all-symbols, -Wl,--enable-auto-import\nelse # ifeq ($(EXPORT_SHARED),all)\nBUILD_SYMFLAGS := -Wl,--exclude-all-symbols\nendif\nendif # ifeq ($(IS_MSVC),no)\nifeq ($(EXPORT_SHARED),all)\n# NOTE: clang on Windows does not appear to support exporting all symbols\n# by default, and therefore we ignore the value of EXPORT_SHARED.\nBUILD_SYMFLAGS :=\nelse # ifeq ($(EXPORT_SHARED),public)\n# NOTE: The default behavior of clang on Windows is to hide all symbols\n# and only export functions and other declarations that have beenannotated\n# as needing to be exported.\nBUILD_SYMFLAGS :=\nendif\nelse # ifeq ($(IS_WIN),no)\nifeq ($(EXPORT_SHARED),all)\n# Export all symbols by default.\nBUILD_SYMFLAGS := -fvisibility=default\nelse # ifeq ($(EXPORT_SHARED),public)\n# Hide all symbols by default and export only those that have been annotated\n# as needing to be exported.\nBUILD_SYMFLAGS := -fvisibility=hidden\nendif\nendif\nendif\n\nelse #ifeq ($(MK_ENABLE_SHARED),no)\n\n# Don't modify CPICFLAGS for the various configuration family members.\n# Don't use any special symbol export flags.\nBUILD_SYMFLAGS :=\n\nendif\n\n# --- Language flags ---\n\n# Enable C99.\nCLANGFLAGS := -std=c99\n$(foreach c, $(CONFIG_LIST_FAM), $(eval $(call append-var-for,CLANGFLAGS,$(c))))\n\n# Enable C++11, or C++17 if HPX threading is enabled.\n# If building a plugin, do not set any default C++ standard.\nifeq ($(PLUGIN_NAME),)\nifneq ($(findstring hpx,$(THREADING_MODEL)),)\nCXXLANGFLAGS := -std=c++17\nelse\nCXXLANGFLAGS := -std=c++11\nendif\nelse\nCXXLANGFLAGS :=\nendif\n$(foreach c, $(CONFIG_LIST_FAM), $(eval $(call append-var-for,CXXLANGFLAGS,$(c))))\n\n# --- C Preprocessor flags ---\n\n# Enable clock_gettime() in time.h.\nCPPROCFLAGS := -D_POSIX_C_SOURCE=200112L\n# Enable ip_mreq on macOS which is needed for ASIO which is needed for HPX.\nifeq ($(OS_NAME),Darwin)\nCPPROCFLAGS += -D_DARWIN_C_SOURCE\nendif\n$(foreach c, $(CONFIG_LIST_FAM), $(eval $(call append-var-for,CPPROCFLAGS,$(c))))\n\n# --- AddressSanitizer flags ---\n\nifeq ($(MK_ENABLE_ASAN),yes)\nBUILD_ASANFLAGS := -fsanitize=address\nelse\nBUILD_ASANFLAGS :=\nendif\n\n# --- Threading flags ---\n\n# NOTE: We don't have to explicitly omit -pthread when --disable-system is given\n# since that option forces --enable-threading=single, and thus -pthread never\n# gets added to begin with.\n\nCTHREADFLAGS :=\nCXXTHREADFLAGS :=\n\nifeq ($(CC_VENDOR),gcc)\n#ifneq ($(findstring auto,$(THREADING_MODEL)),)\n#THREADING_MODEL := openmp\n#endif\nifneq ($(findstring openmp,$(THREADING_MODEL)),)\nCTHREADFLAGS += -fopenmp\nLDFLAGS      += -fopenmp\nendif\nifneq ($(findstring pthreads,$(THREADING_MODEL)),)\nCTHREADFLAGS += -pthread\nLDFLAGS      += $(LIBPTHREAD)\nendif\nendif\n\nifeq ($(CC_VENDOR),icc)\n#ifneq ($(findstring auto,$(THREADING_MODEL)),)\n#THREADING_MODEL := openmp\n#endif\nifneq ($(findstring openmp,$(THREADING_MODEL)),)\nCTHREADFLAGS += -fopenmp\nLDFLAGS      += -fopenmp\nendif\nifneq ($(findstring pthreads,$(THREADING_MODEL)),)\nCTHREADFLAGS += -pthread\nLDFLAGS      += $(LIBPTHREAD)\nendif\nendif\n\nifeq ($(CC_VENDOR),clang)\n#ifneq ($(findstring auto,$(THREADING_MODEL)),)\n#THREADING_MODEL := pthreads\n#endif\nifneq ($(findstring openmp,$(THREADING_MODEL)),)\nCTHREADFLAGS += -fopenmp\nLDFLAGS      += -fopenmp\nendif\nifneq ($(findstring pthreads,$(THREADING_MODEL)),)\nCTHREADFLAGS += -pthread\nLDFLAGS      += $(LIBPTHREAD)\nendif\nendif\n\n# Threading flags for HPX.\nifneq ($(findstring hpx,$(THREADING_MODEL)),)\nHPX_CXXFLAGS := $(shell pkg-config --cflags hpx_component)\nHPX_LDFLAGS  := $(filter-out -shared,$(shell pkg-config --libs hpx_component))\nCTHREADFLAGS += $(filter-out -std=%,$(HPX_CXXFLAGS))\nLDFLAGS      += $(HPX_LDFLAGS)\nifeq ($(OS_NAME),Darwin)\nRPATH_PREFIX := -Wl,-rpath,\nLDFLAGS      += $(patsubst -L%,$(RPATH_PREFIX)%,$(filter -L%,$(HPX_LDFLAGS)))\nendif\nendif\n\n# --- #pragma omp simd flags (used for reference kernels only) ---\n\nifeq ($(PRAGMA_OMP_SIMD),yes)\nifeq ($(CC_VENDOR),gcc)\nCOMPSIMDFLAGS := -fopenmp-simd\nelse\nifeq ($(CC_VENDOR),clang)\nCOMPSIMDFLAGS := -fopenmp-simd\nelse\nifeq ($(CC_VENDOR),icc)\nCOMPSIMDFLAGS := -qopenmp-simd\nendif\nendif\nendif\nelse # ifeq ($(PRAGMA_OMP_SIMD),no)\nCOMPSIMDFLAGS :=\nendif\n\n\n\n#\n# --- Adjust verbosity level manually using make V=[0,1] -----------------------\n#\n\nifeq ($(V),1)\nENABLE_VERBOSE := yes\nBLIS_ENABLE_TEST_OUTPUT := yes\nendif\n\nifeq ($(V),0)\nENABLE_VERBOSE := no\nBLIS_ENABLE_TEST_OUTPUT := no\nendif\n\n\n\n#\n# --- Append OS-specific libraries to LDFLAGS ----------------------------------\n#\n\nifeq ($(OS_NAME),Linux)\n# Exclude -lrt on Android by detecting Bionic.\n# $(CC) -E bionic.h returns a \"bionic\" substring iff Bionic is detected.\nBIONIC_H_PATH := $(DIST_PATH)/build/detect/android/bionic.h\nBIONIC := $(findstring bionic,$(shell $(CC) -E $(BIONIC_H_PATH)))\nifeq (,$(BIONIC))\nLDFLAGS += -lrt\nendif\nendif\n\n\n\n#\n# --- LDFLAGS cleanup ----------------------------------------------------------\n#\n\n\n\n#\n# --- Include makefile fragments -----------------------------------------------\n#\n\n# Initialize our list of directory paths to makefile fragments with the empty\n# list. This variable will accumulate all of the directory paths in which\n# makefile fragments reside.\nFRAGMENT_DIR_PATHS :=\n\n# Initialize our makefile variables that source code files will be accumulated\n# into by the makefile fragments. This initialization is very important! These\n# variables will end up with weird contents if we don't initialize them to\n# empty prior to recursively including the makefile fragments.\nMK_CONFIG_SRC      :=\nMK_KERNELS_SRC     :=\nMK_REFKERN_SRC     :=\nMK_FRAME_SRC       :=\nMK_ADDON_SRC       :=\nMK_SANDBOX_SRC     :=\n\n# -- config --\n\n# Construct paths to each of the sub-configurations specified in the\n# configuration list. Note that we use CONFIG_LIST_FAM, which already\n# has CONFIG_NAME included (with duplicates removed).\nCONFIG_PATHS       := $(addprefix $(CONFIG_FRAG_PATH)/, $(CONFIG_LIST_FAM))\n\n# This variable is used by the include statements as they recursively include\n# one another. For the 'config' directory, we initialize it to that directory\n# in preparation to include the fragments in the configuration sub-directory.\nPARENT_SRC_PATH    := $(CONFIG_PATH)\nPARENT_PATH        := $(CONFIG_FRAG_PATH)\n\n# Recursively include the makefile fragments in each of the sub-configuration\n# directories.\n-include $(addsuffix /$(FRAGMENT_MK), $(CONFIG_PATHS))\n\n# -- kernels --\n\n# Construct paths to each of the kernel sets required by the sub-configurations\n# in the configuration list.\nKERNEL_PATHS       := $(addprefix $(KERNELS_FRAG_PATH)/, $(KERNEL_LIST))\n\n# This variable is used by the include statements as they recursively include\n# one another. For the 'kernels' directory, we initialize it to that directory\n# in preparation to include the fragments in the configuration sub-directory.\nPARENT_SRC_PATH    := $(KERNELS_PATH)\nPARENT_PATH        := $(KERNELS_FRAG_PATH)\n\n# Recursively include the makefile fragments in each of the kernels sub-\n# directories.\n-include $(addsuffix /$(FRAGMENT_MK), $(KERNEL_PATHS))\n\n# -- ref_kernels --\n# -- frame --\n\n# This variable is used by the include statements as they recursively include\n# one another. For the framework and reference kernel source trees (ie: the\n# 'frame' and 'ref_kernels' directories), we initialize it to the top-level\n# directory since that is its parent.\nPARENT_SRC_PATH    := $(DIST_PATH)\nPARENT_PATH        := $(OBJ_DIR)/$(CONFIG_NAME)\n\n# Recursively include all the makefile fragments in the directories for the\n# reference kernels and portable framework.\n-include $(addsuffix /$(FRAGMENT_MK), $(REFKERN_FRAG_PATH))\n-include $(addsuffix /$(FRAGMENT_MK), $(FRAME_FRAG_PATH))\n\n# -- addon --\n\n# Construct paths to each addon.\n# NOTE: If $(ADDON_LIST) is empty (because no addon was enabled at configure-\n# time) then $(ADDON_PATHS) will also be empty, which will cause no fragments\n# to be included.\nADDON_PATHS        := $(addprefix $(ADDON_FRAG_PATH)/, $(ADDON_LIST))\n\n# This variable is used by the include statements as they recursively include\n# one another. For the 'addons' directory, we initialize it to that directory\n# in preparation to include the fragments in the configuration sub-directory.\nPARENT_SRC_PATH    := $(ADDON_PATH)\nPARENT_PATH        := $(ADDON_FRAG_PATH)\n\n# Recursively include the makefile fragments in each of the addons sub-\n# directories.\n-include $(addsuffix /$(FRAGMENT_MK), $(ADDON_PATHS))\n\n# -- sandbox --\n\n# Construct paths to each sandbox. (At present, there can be only one.)\n# NOTE: If $(SANDBOX) is empty (because no sandbox was enabled at configure-\n# time) then $(SANDBOX_PATHS) will also be empty, which will cause no\n# fragments to be included.\nSANDBOX_PATHS      := $(addprefix $(SANDBOX_FRAG_PATH)/, $(SANDBOX))\n\n# This variable is used by the include statements as they recursively include\n# one another. For the 'sandbox' directory, we initialize it to that directory\n# in preparation to include the fragments in the configuration sub-directory.\nPARENT_SRC_PATH    := $(SANDBOX_PATH)\nPARENT_PATH        := $(SANDBOX_FRAG_PATH)\n\n# Recursively include the makefile fragments in the sandbox sub-directory.\n-include $(addsuffix /$(FRAGMENT_MK), $(SANDBOX_PATHS))\n\n# -- post-processing --\n\n# Create a list of the makefile fragments using the variable into which each\n# of the above include statements accumulated their directory paths.\nMAKEFILE_FRAGMENTS := $(addsuffix /$(FRAGMENT_MK), $(FRAGMENT_DIR_PATHS))\n\n# Detect whether we actually got any makefile fragments. If we didn't, then it\n# is likely that the user has not yet generated them (via configure).\nifeq ($(strip $(MAKEFILE_FRAGMENTS)),)\nMAKEFILE_FRAGMENTS_PRESENT := no\nelse\nMAKEFILE_FRAGMENTS_PRESENT := yes\nendif\n\n\n#\n# --- Important sets of header files and paths ---------------------------------\n#\n\n# Define a function that will expand all of the directory paths given in $(1)\n# to actual filepaths using the list of suffixes provided in $(2).\nget-filepaths = $(strip $(foreach path, $(1), \\\n                            $(foreach suf, $(2), \\\n                                $(wildcard $(path)/*.$(suf)) \\\n                 )       )   )\n\n# Define a function that will expand all of the directory paths given in $(1)\n# to actual filepaths using the list of suffixes provided in $(2), taking only\n# the first expansion from each directory with at least one file matching\n# the current suffix. Finally, strip the filenames from all resulting files,\n# returning only the directory paths.\nget-dirpaths  = $(dir $(foreach path, $(1), \\\n                          $(firstword \\\n                              $(foreach suf, $(2), \\\n                                  $(wildcard $(path)/*.$(suf)) \\\n                 )     )   )   )\n\n# We'll use three directory lists. The first is a list of all of the directories\n# in which makefile fragments were generated, plus the current directory. (The\n# current directory is needed so we include bli_config.h and bli_addon.h in the\n# processing of header files.) The second and third are subsets of the first\n# that begins with the addon and sandbox root paths, respectively.\nALLFRAG_DIR_PATHS := . $(FRAGMENT_DIR_PATHS)\nADDON_DIR_PATHS   := $(filter $(ADDON_PATH)/%,$(ALLFRAG_DIR_PATHS))\nSANDBOX_DIR_PATHS := $(filter $(SANDBOX_PATH)/%,$(ALLFRAG_DIR_PATHS))\n\nALL_H99_FILES     := $(call get-filepaths,$(ALLFRAG_DIR_PATHS),$(ALL_H99_SUFS))\nFRAME_H99_FILES   := $(filter-out $(ADDON_PATH)/%, \\\n                        $(filter-out $(SANDBOX_PATH)/%, \\\n                                    $(ALL_H99_FILES) \\\n                      )  )\n\nALL_H99_DIRPATHS     := $(call get-dirpaths,$(ALLFRAG_DIR_PATHS),$(ALL_H99_SUFS))\n\nADDON_H99_FILES      := $(call get-filepaths,$(ADDON_DIR_PATHS),$(ADDON_H99_SUFS))\nADDON_HXX_FILES      := $(call get-filepaths,$(ADDON_DIR_PATHS),$(ADDON_HXX_SUFS))\nADDON_HDR_DIRPATHS   := $(call get-dirpaths,$(ADDON_DIR_PATHS),$(ALL_HDR_SUFS))\n\nSANDBOX_H99_FILES    := $(call get-filepaths,$(SANDBOX_DIR_PATHS),$(SANDBOX_H99_SUFS))\nSANDBOX_HXX_FILES    := $(call get-filepaths,$(SANDBOX_DIR_PATHS),$(SANDBOX_HXX_SUFS))\nSANDBOX_HDR_DIRPATHS := $(call get-dirpaths,$(SANDBOX_DIR_PATHS),$(ALL_HDR_SUFS))\n\n\n\n#\n# --- blis.h header definitions ------------------------------------------------\n#\n\n# Use include/CONFIG_NAME as the default path to the local header files, but\n# allow the includer to override this value if it needs to point to an\n# installation directory.\nifeq ($(strip $(INC_PATH)),)\nINC_PATH        := $(INCLUDE_DIR)/$(CONFIG_NAME)\nendif\n\n# Identify the base path for the intermediate include directory. We define\n# this path in terms of INC_PATH, which gets a default value above (which is\n# what happens for the top-level Makefile). If INC_PATH is specified by the\n# Makefile prior to including common.mk, that path is used instead. This\n# allows Makefiles for example code and test drivers to reference an installed\n# prefix directory for situations when the build directory no longer exists.\nBASE_INC_PATH   := $(INC_PATH)\n\n# Isolate the path to blis.h by filtering the file from the list of framework\n# header files.\nBLIS_H          := blis.h\nBLIS_H_SRC_PATH := $(filter %/$(BLIS_H), $(FRAME_H99_FILES))\n\n# Construct the path to what will be the intermediate flattened/monolithic\n# blis.h file.\nBLIS_H_FLAT     := $(BASE_INC_PATH)/$(BLIS_H)\n\n# Construct the path to the helper blis.h file that will reside one directory\n# up from the installed copy of blis.h.\nHELP_BLIS_H_PATH := $(BUILD_DIR)/$(BLIS_H)\n\n\n#\n# --- cblas.h header definitions -----------------------------------------------\n#\n\n# Isolate the path to cblas.h by filtering the file from the list of framework\n# header files, and then strip the filename to obtain the directory in which\n# cblas.h resides.\nCBLAS_H          := cblas.h\nCBLAS_H_SRC_PATH := $(filter %/$(CBLAS_H), $(FRAME_H99_FILES))\nCBLAS_H_DIRPATH  := $(dir $(CBLAS_H_SRC_PATH))\n\n# Construct the path to what will be the intermediate flattened/monolithic\n# cblas.h file.\nCBLAS_H_FLAT      := $(BASE_INC_PATH)/$(CBLAS_H)\n\n# Construct the path to the helper cblas.h file that will reside one directory\n# up from the installed copy of cblas.h.\nHELP_CBLAS_H_PATH := $(BUILD_DIR)/$(CBLAS_H)\n\n\n#\n# --- Compiler include path definitions ----------------------------------------\n#\n\n# Obtain a list of header files #included inside of the bli_cntx_ref.c file.\n# Due to the way that bli_cntx_ref.c uses headers and macros, paths to these\n# files will be needed when compiling bli_cntx_ref.c with the monolithic header.\nifeq ($(strip $(SHARE_PATH)),.)\nREF_KER_SRC     := $(DIST_PATH)/$(REFKERN_DIR)/bli_cntx_ref.c\n#\n# NOTE: A redirect to /dev/null has been added to the grep command below because\n# as of version 3.8, grep outputs warnings when encountering stray backslashes\n# in regular expressions [1]. Versions older than 3.8 not only do not complain,\n# but actually seem to *require* the backslash, perhaps because of the way we\n# are invoking grep via GNU make's shell command. WHEN DEBUGGING ANYTHING\n# INVOLVING THE MAKE VARIABLE BELOW, PLEASE CONSIDER TEMPORARILY REMOVING THE\n# REDIRECT TO /dev/null SO THAT YOU SEE ANY MESSAGES SENT TO STANDARD ERROR.\n#\n# [1] https://lists.gnu.org/archive/html/info-gnu/2022-09/msg00001.html\n#\nREF_KER_HEADERS := $(shell $(GREP) \"\\#include\" $(REF_KER_SRC) 2> $(DEVNULL) | sed -e \"s/\\#include [\\\"<]\\([a-zA-Z0-9\\_\\.\\/\\-]*\\)[\\\">].*/\\1/g\" | $(GREP) -v $(BLIS_H))\nendif\n\n# Match each header found above with the path to that header, and then strip\n# leading, trailing, and internal whitespace.\nREF_KER_H_PATHS := $(call rm-dups,$(strip \\\n                                  $(foreach header, $(REF_KER_HEADERS), \\\n                                      $(dir $(filter %/$(header), \\\n                                                     $(FRAME_H99_FILES))))))\n\n# Add -I to each header path so we can specify our include search paths to the\n# C compiler. Then add frame/include since it's needed when compiling source\n# files that #include bli_oapi_ba.h or bli_oapi_ex.h.\nREF_KER_I_PATHS := $(strip $(patsubst %, -I%, $(REF_KER_H_PATHS)))\nREF_KER_I_PATHS += -I$(DIST_PATH)/frame/include\n\n# Prefix the paths above with the base include path.\n# NOTE: We no longer need every header path in the source tree since we\n# now #include the monolithic/flattened blis.h instead.\nCINCFLAGS       := -I$(BASE_INC_PATH) $(REF_KER_I_PATHS)\n\n# If CBLAS is enabled, we also include the path to the cblas.h directory so\n# that the compiler will be able to find cblas.h as the CBLAS source code is\n# being compiled.\nifeq ($(MK_ENABLE_CBLAS),yes)\nCINCFLAGS       += -I$(CBLAS_H_DIRPATH)\nendif\n\n# Obtain a list of header paths in the configured addons. Then add -I to each\n# header path.\nCADDONINCFLAGS  := $(strip $(patsubst %, -I%, $(ADDON_HDR_DIRPATHS)))\n\n# Obtain a list of header paths in the configured sandbox. Then add -I to each\n# header path.\nCSANDINCFLAGS   := $(strip $(patsubst %, -I%, $(SANDBOX_HDR_DIRPATHS)))\n\n\n#\n# --- BLIS configuration header definitions ------------------------------------\n#\n\n# These files were created by configure, but we need to define them here so we\n# can remove them as part of the clean targets.\nBLIS_ADDON_H    := ./bli_addon.h\nBLIS_CONFIG_H   := ./bli_config.h\n\n\n#\n# --- Special preprocessor macro definitions -----------------------------------\n#\n\n# Define a C preprocessor flag that is *only* defined when BLIS is being\n# compiled. (In other words, an application that #includes blis.h will not\n# get this cpp macro.)\nBUILD_CPPFLAGS := -DBLIS_IS_BUILDING_LIBRARY\n\n\n#\n# --- configure file location --------------------------------------------------\n#\n\nCONFIGURE_FILE := $(DIST_PATH)/configure\n\n\n# end of ifndef COMMON_MK_INCLUDED conditional block\nendif\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "config_registry",
          "type": "blob",
          "size": 1.6904296875,
          "content": "#\n# config_registry\n#\n# Please refer to the BLIS wiki on configurations for information on the\n# syntax and semantics of this file [1].\n#\n# [1] https://github.com/flame/blis/blob/master/docs/ConfigurationHowTo.md\n#\n\n# Processor families.\nx86_64:         intel64 amd64 amd64_legacy\nintel64:        skx knl haswell sandybridge penryn generic\namd64_legacy:   excavator steamroller piledriver bulldozer generic\namd64:          zen3 zen2 zen generic\narm64:          armsve firestorm thunderx2 cortexa57 cortexa53 generic\narm32:          cortexa15 cortexa9 generic\npower:          power10 power9 generic\n\n# Intel architectures.\nskx:         skx/skx/haswell/zen\nknl:         knl/knl/haswell/zen\nhaswell:     haswell/haswell/zen\nsandybridge: sandybridge\npenryn:      penryn\n\n# AMD architectures.\nzen3:        zen3/zen3/zen2/zen/haswell\nzen2:        zen2/zen2/zen/haswell\nzen:         zen/zen/haswell\nexcavator:   excavator/piledriver\nsteamroller: steamroller/piledriver\npiledriver:  piledriver\nbulldozer:   bulldozer\n\n# ARM architectures.\narmsve:      armsve/armsve\na64fx:       a64fx/armsve\n\n# ARM Neon64 (4 pipes x 128b) architectures.\naltramax:    altramax/armv8a\naltra:       altra/armv8a\nfirestorm:   firestorm/armv8a\n\n# ARM (2 pipes x 128b) architectures.\nthunderx2:   thunderx2/armv8a\ncortexa57:   cortexa57/armv8a\ncortexa53:   cortexa53/armv8a\n\n# ARM Vintage architectures.\ncortexa15:   cortexa15/armv7a\ncortexa9:    cortexa9/armv7a\n\n# IBM architectures.\npower10:     power10\npower9:      power9\nbgq:         bgq\n\n# RISC-V architectures.\nrv32i:       rv32i/rvi\nrv64i:       rv64i/rvi\nrv32iv:      rv32iv/rviv\nrv64iv:      rv64iv/rviv\n\n# SiFive architectures.\nsifive_x280: sifive_x280\n\n# Generic architectures.\ngeneric:     generic\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 174.4873046875,
          "content": "#!/usr/bin/env bash\n#\n#  BLIS\n#  An object-based framework for developing high-performance BLAS-like\n#  libraries.\n#\n#  Copyright (C) 2014, The University of Texas at Austin\n#  Copyright (C) 2020-2022, Advanced Micro Devices, Inc.\n#\n#  Redistribution and use in source and binary forms, with or without\n#  modification, are permitted provided that the following conditions are\n#  met:\n#   - Redistributions of source code must retain the above copyright\n#     notice, this list of conditions and the following disclaimer.\n#   - Redistributions in binary form must reproduce the above copyright\n#     notice, this list of conditions and the following disclaimer in the\n#     documentation and/or other materials provided with the distribution.\n#   - Neither the name(s) of the copyright holder(s) nor the names of its\n#     contributors may be used to endorse or promote products derived\n#     from this software without specific prior written permission.\n#\n#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n#  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n#\n# shellcheck disable=2001,2249,2034,2154,2181,2312,2250,2292\n\n#\n# -- Helper functions ----------------------------------------------------------\n#\n\nprint_usage()\n{\n\t# Use the version string in the 'version' file since we don't have\n\t# the patched version string yet.\n\tif [ -z \"${version}\" ]; then\n\t\tversion=$(<\"${version_filepath}\")\n\tfi\n\n\t# Echo usage info.\n\tcat <<EOF\n\n ${script_name} (BLIS ${version})\n\n Configure BLIS's build system for compilation using a specified\n configuration directory.\n\n Usage:\n\n   ${script_name} [options] [env. vars.] confname\n\n Arguments:\n\n   confname      The name of the sub-directory inside of the 'config'\n                 directory containing the desired BLIS configuration.\n                 Note that confname MUST be specified; if it is not,\n                 configure will complain. To build a completely generic\n                 implementation, use the 'generic' configuration\n\n Options:\n\n   -p PREFIX, --prefix=PREFIX\n\n                 The common installation prefix for all files. If given,\n                 this option effectively implies:\n                   --libdir=EXECPREFIX/lib\n                   --includedir=PREFIX/include\n                   --sharedir=PREFIX/share\n                 where EXECPREFIX defaults to PREFIX. If this option is\n                 not given, PREFIX defaults to '${prefix_def}'. If PREFIX\n                 refers to a directory that does not exist, it will be\n                 created.\n\n   --exec-prefix=EXECPREFIX\n\n                 The installation prefix for libraries. Specifically, if\n                 given, this option effectively implies:\n                   --libdir=EXECPREFIX/lib\n                 If not given, EXECPREFIX defaults to PREFIX, which may be\n                 modified by the --prefix option. If EXECPREFIX refers to\n                 a directory that does not exist, it will be created.\n\n   --libdir=LIBDIR\n\n                 The path to which make will install libraries. If not\n                 given, LIBDIR defaults to PREFIX/lib. If LIBDIR refers to\n                 a directory that does not exist, it will be created.\n\n   --includedir=INCDIR\n\n                 The path to which make will install development header\n                 files. If not given, INCDIR defaults to PREFIX/include.\n                 If INCDIR refers to a directory that does not exist, it\n                 will be created.\n\n   --sharedir=SHAREDIR\n\n                 The path to which make will makefile fragments containing\n                 make variables determined by configure (e.g. CC, CFLAGS,\n                 and LDFLAGS). These files allow certain BLIS makefiles,\n                 such as those in the examples or testsuite directories, to\n                 operate on an installed copy of BLIS rather than a local\n                 (and possibly uninstalled) copy. If not given, SHAREDIR\n                 defaults to PREFIX/share. If SHAREDIR refers to a\n                 directory that does not exist, it will be created.\n\n   --enable-verbose-make, --disable-verbose-make\n\n                 Enable (disabled by default) verbose compilation output\n                 during make.\n\n   --enable-arg-max-hack --disable-arg-max-hack\n\n                 Enable (disabled by default) build system logic that\n                 will allow archiving/linking the static/shared library\n                 even if the command plus command line arguments exceeds\n                 the operating system limit (ARG_MAX).\n\n   -d DEBUG, --enable-debug[=DEBUG]\n\n                 Enable debugging symbols in the library. If argument\n                 DEBUG is given as 'opt', then optimization flags are\n                 kept in the framework, otherwise optimization is\n                 turned off.\n\n   --disable-static, --enable-static\n\n                 Disable (enabled by default) building BLIS as a static\n                 library. If the static library build is disabled, the\n                 shared library build must remain enabled.\n\n   --disable-shared, --enable-shared\n\n                 Disable (enabled by default) building BLIS as a shared\n                 library. If the shared library build is disabled, the\n                 static library build must remain enabled.\n\n   --omit-symbols=LIST\n\n                 Omit a custom set of compatibility symbols when building\n                 BLIS. When given, LIST is parsed as a comma-separated\n                 list of symbol names (excluding any trailing underscore).\n                 This option is useful when (1) the user is planning to\n                 link BLIS with another library that provides conflicting\n                 symbols, and (2) the user wishes the symbols in this\n                 other library to prevail at link time without relying on\n                 weak/strong symbol semantics. Note that currently ONLY\n                 the following symbols are supported for omission:\n\n                           crot    zrot    lsame\n                           csymv   zsymv   xerbla\n                           csyr    zsyr    xerbla_array\n                           csyr2   zsyr2\n\n   --enable-lapack-compat, --disable-lapack-compat\n\n                 Enable strict compatibility with LAPACK. This option\n                 causes BLIS to be built without some routines that we\n                 consider to be BLAS compatibility routines but that\n                 also happen to be provided by LAPACK. This option is\n                 equivalent to using the --omit-symbols=LIST option\n                 where LIST contains the following symbols:\n\n                           crot    zrot    lsame\n                           csymv   zsymv   xerbla\n                           csyr    zsyr    xerbla_array\n                           csyr2   zsyr2\n\n   --enable-scalapack-compat, --disable-scalapack-compat\n\n                 Enable strict compatibility with ScaLAPACK. This option\n                 causes BLIS to be built without some routines that we\n                 consider to be BLAS compatibility routines but that\n                 also happen to be provided by ScaLAPACK. This option is\n                 equivalent to using the --omit-symbols=LIST option\n                 where LIST contains the following symbols:\n\n                           csymv   zsymv\n                           csyr    zsyr\n                           csyr2   zsyr2\n\n   --enable-rpath, --disable-rpath\n\n                 Enable (disabled by default) setting an install_name for\n                 dynamic libraries on macOS which starts with @rpath rather\n                 than the absolute install path.\n\n   -e SYMBOLS, --export-shared[=SYMBOLS]\n\n                 Specify the subset of library symbols that are exported\n                 within a shared library. Valid values for SYMBOLS are:\n                 'public' (the default) and 'all'. By default, only\n                 functions and variables that belong to public APIs are\n                 exported in shared libraries. However, the user may\n                 instead export all symbols in BLIS, even those that were\n                 intended for internal use only. Note that the public APIs\n                 encompass all functions that almost any user would ever\n                 want to call, including the BLAS/CBLAS compatibility APIs\n                 as well as the basic and expert interfaces to the typed\n                 and object APIs that are unique to BLIS. Also note that\n                 changing this option to 'all' will have no effect in some\n                 environments, such as when compiling with clang on\n                 Windows.\n\n   -t MODEL, --enable-threading[=MODEL], --disable-threading\n\n                 Enable threading in the library, using threading model(s)\n                 MODEL={single,openmp,pthreads,hpx,auto}. If multiple values\n                 are specified within MODEL, they will all be compiled into\n                 BLIS, and the choice of which to use will be determined at\n                 runtime. If the user does not express a preference (by\n                 setting the BLIS_THREAD_IMPL environment variable to\n                 'single', 'openmp', 'pthreads', or 'hpx'; by calling the\n                 global runtime API bli_thread_set_thread_impl(); or by\n                 encoding a choice on a per-call basis within a rntm_t\n                 passed into the expert API), then the first model listed\n                 in MODEL will be used by default. Note that 'single' is\n                 silently appended to whatever the user specifies in MODEL,\n                 meaning that single-threaded functionality will always be\n                 available, even if it is not requested and even if it is\n                 not enabled by default. Even --disable-threading is\n                 actually shorthand for --enable-threading=single (which is\n                 the default when the option is not specified).\n\n   --enable-system, --disable-system\n\n                 Enable conventional operating system support, such as\n                 pthreads for thread-safety. The default state is enabled.\n                 However, in rare circumstances you may wish to configure\n                 BLIS for use with a minimal or nonexistent operating\n                 system (e.g. hardware simulators). In these situations,\n                 --disable-system may be used to jettison all compile-time\n                 and link-time dependencies outside of the standard C\n                 library. When disabled, this option also forces the use\n                 of --disable-threading.\n\n   --enable-tls, --disable-tls\n\n                 Enable thread-local storage (TLS) for static variables\n                 in BLIS. The default state is enabled. However, like with\n                 --disable-system, there may be rare situations, such as\n                 when --disable-system is appropriate, where thread-local\n                 storage is unsupported by the compiler. In those cases,\n                 disabling TLS may be a suitable workaround.\n\t\t         WARNING: DISABLING TLS IS DANGEROUS AND MAY CAUSE RACE\n                 CONDITIONS! Please try combining --disable-tls with\n                 --disable-threading if you suspect any correctness or\n                 deadlock issues.\n\n   --disable-pba-pools, --enable-pba-pools\n   --disable-sba-pools, --enable-sba-pools\n\n                 Disable (enabled by default) use of internal memory pools\n                 within the packing block allocator (pba) and/or the small\n                 block allocator (sba). The former is used to allocate\n                 memory used to pack submatrices while the latter is used\n                 to allocate control/thread tree nodes and thread\n                 communicators. Both allocations take place in the context\n                 of level-3 operations. When the pba is disabled, the\n                 malloc()-like function specified by BLIS_MALLOC_POOL is\n                 called on-demand whenever a packing block is needed, and\n                 when the sba is disabled, the malloc()-like function\n                 specified by BLIS_MALLOC_INTL is called whenever a small\n                 block is needed, with the two allocators calling free()-\n                 like functions BLIS_FREE_POOL and BLIS_FREE_INTL,\n                 respectively when blocks are released. When enabled,\n                 either or both pools are populated via the same functions\n                 mentioned previously, and henceforth blocks are checked\n                 out and in. The library quickly reaches a state in which\n                 it no longer needs to call malloc() or free(), even\n                 across many separate level-3 operation invocations.\n\n   --enable-mem-tracing, --disable-mem-tracing\n\n                 Enable (disabled by default) output to stdout that traces\n                 the allocation and freeing of memory, including the names\n                 of the functions that triggered the allocation/freeing.\n                 Enabling this option WILL NEGATIVELY IMPACT PERFORMANCE.\n                 Please use only for informational/debugging purposes.\n\n   --enable-asan, --disable-asan\n\n                 Enable (disabled by default) compiling and linking BLIS\n                 framework code with the AddressSanitizer (ASan) library.\n                 Optimized kernels are NOT compiled with ASan support due\n                 to limitations of register assignment in inline assembly.\n                 WARNING: ENABLING THIS OPTION WILL NEGATIVELY IMPACT\n                 PERFORMANCE. Please use only for informational/debugging\n                 purposes.\n\n   -i SIZE, --int-size=SIZE\n\n                 Set the size (in bits) of internal BLIS integers and\n                 integer types used in native BLIS interfaces. The\n                 default integer type size is architecture dependent.\n                 (Hint: You can always find this value printed at the\n                 beginning of the testsuite output.)\n\n   -b SIZE, --blas-int-size=SIZE\n\n                 Set the size (in bits) of integer types in external\n                 BLAS and CBLAS interfaces, if enabled. The default\n                 integer type size used in BLAS/CBLAS is 32 bits.\n\n   --disable-blas, --enable-blas\n\n                 Disable (enabled by default) building the BLAS\n                 compatibility layer.\n\n   --enable-cblas, --disable-cblas\n\n                 Enable (disabled by default) building the CBLAS\n                 compatibility layer. This automatically enables the\n                 BLAS compatibility layer as well.\n\n   --disable-sup-handling, --enable-sup-handling\n\n                 Disable (enabled by default) handling of small/skinny\n                 matrix problems via separate code branches. When disabled,\n                 these small/skinny level-3 operations will be performed by\n                 the conventional implementation, which is optimized for\n                 medium and large problems. Note that what qualifies as\n                 \"small\" depends on thresholds that may vary by sub-\n                 configuration.\n\n   --enable-amd-frame-tweaks, --disable-amd-frame-tweaks\n\n                 Enable building with certain framework files that have\n                 been customized by AMD for Zen-based microarchitectures.\n                 The default counterparts of these files must be portable,\n                 and so these customized files may provide some (typically\n                 modest) performance improvement for some select operations\n                 and/or APIs, though there may a few (tiny dimension) cases\n                 where the improvement is more pronounced. Note that the\n                 target configuration must be Zen-based (or 'amd64') for\n                 this option to have any effect. (Also note that this\n                 option is NOT to be confused with enabling AMD *kernels*,\n                 which are determined by the BLIS subconfiguration used at\n                 runtime.) By default, these customized files are disabled.\n\n   -a NAME --enable-addon=NAME\n\n                 Enable the code provided by an addon. An addon consists\n                 of a separate directory of code that provides additional\n                 APIs, implementations, and/or operations that would\n                 otherwise not be present within a build of BLIS. This\n                 option may be used multiple times to specify the inclusion\n                 of multiple addons. By default, no addons are enabled.\n\n   -s NAME --enable-sandbox=NAME\n\n                 Enable a separate sandbox implementation of gemm. This\n                 option disables BLIS's conventional gemm implementation\n                 (which shares common infrastructure with other level-3\n                 operations) and instead compiles and uses the code in\n                 the NAME directory, which is expected to be a sub-\n                 directory of 'sandbox'. By default, no sandboxes are\n                 enabled.\n\n   --with-memkind, --without-memkind\n\n                 Forcibly enable or disable the use of libmemkind's\n                 hbw_malloc() and hbw_free() as substitutes for malloc()\n                 and free(), respectively, when allocating memory for\n                 BLIS's memory pools, which are used to manage buffers\n                 into which matrices are packed. The default behavior\n                 for this option is environment-dependent; if configure\n                 detects the presence of libmemkind, libmemkind is used\n                 by default, and otherwise it is not used by default.\n\n   -r METHOD, --thread-part-jrir=METHOD\n\n                 Select a strategy for partitioning computation in JR and\n                 IR loops and assigning that computation to threads. Valid\n                 values for METHOD are 'rr', 'slab', and 'tlb':\n                  'rr':   Assign the computation associated with whole\n                          columns of microtiles to threads in a round-\n                          robin fashion. When selected, round-robin\n                          assignment is also employed during packing.\n                  'slab': Partition the computation into N contiguous\n                          regions, where each region contains a whole\n                          number of microtile columns, and assign one\n                          region to each thread. For some operations, the\n                          number of microtile columns contained within a\n                          given region may differ from that of other\n                          regions, depending on how much work is implied\n                          by each region. When selected, slab assignment\n                          is also employed during packing.\n                  'tlb':  Tile-level load balancing is similar to slab,\n                          except that regions will be divided at a more\n                          granular level (individual microtiles instead\n                          of whole columns of microtiles) to ensure more\n                          equitable assignment of work to threads. When\n                          selected, tlb will only be employed for level-3\n                          operations except trsm; due to practical and\n                          algorithmic limitations, slab partitioning will\n                          be used instead during packing and for trsm.\n                 The default strategy is 'slab'. NOTE: Specifying this\n                 option constitutes a request, which may be ignored in\n                 select situations if implementation has a good reason to\n                 do so. (See description of 'tlb' above for an example of\n                 this.)\n\n   --disable-trsm-preinversion, --enable-trsm-preinversion\n\n                 Disable (enabled by default) pre-inversion of triangular\n                 matrix diagonals when performing trsm. When pre-inversion\n                 is enabled, diagonal elements are inverted outside of the\n                 microkernel (e.g. during packing) so that the microkernel\n                 can use multiply instructions. When disabled, division\n                 instructions are used within the microkernel. Executing\n                 these division instructions within the microkernel will\n                 incur a performance penalty, but numerical robustness will\n                 improve for certain cases involving denormal numbers that\n                 would otherwise result in overflow in the pre-inverted\n                 values.\n\n   --force-version=STRING\n\n                 Force configure to use an arbitrary version string\n                 STRING. This option may be useful when repackaging\n                 custom versions of BLIS by outside organizations.\n\n   -c, --show-config-lists\n\n                 Print the config and kernel lists, and kernel-to-config\n                 map after they are read from file. This can be useful\n                 when debugging certain configuration issues, and/or as\n                 a sanity check to make sure these lists are constituted\n                 as expected.\n\n   --complex-return=gnu|intel\n\n                 Specify the way in which complex numbers are returned\n                 from Fortran functions, either \"gnu\" (return in\n                 registers) or \"intel\" (return via hidden argument).\n                 If not specified and the environment variable FC is set,\n                 attempt to determine the return type from the compiler.\n                 Otherwise, the default is \"gnu\".\n\n   -q, --quiet   Suppress informational output. By default, configure\n                 is verbose. (NOTE: -q is not yet implemented)\n\n   -h, --help    Output this information and quit.\n\n Environment Variables:\n\n   CC            Specifies the C compiler to use.\n   CXX           Specifies the C++ compiler to use (sandbox only).\n   FC            Specifies the Fortran compiler to use (only to determine --complex-return).\n   AR            Specifies the static library archiver to use.\n   RANLIB        Specifies the ranlib (library indexer) executable to use.\n   PYTHON        Specifies the python interpreter to use.\n   CFLAGS        Specifies additional compiler flags to use (prepended).\n   LDFLAGS       Specifies additional linker flags to use (prepended).\n   LIBPTHREAD    Pthreads library to use.\n\n   Environment variables are traditionally set prior to running configure:\n\n     CC=gcc ./configure [options] haswell\n\n   However, they may also be specified as command line options, e.g.:\n\n     ./configure [options] CC=gcc haswell\n\n   Note that not all compilers are compatible with a given\n   configuration.\n\nEOF\n\n\t# Exit with non-zero exit status\n\texit 1\n}\n\nquery_array()\n{\n\tlocal arr key var_name\n\n\tarr=\"$1\"\n\tkey=\"$2\"\n\n\tvar_name=\"${arr}_${key}\"\n\n\techo \"${!var_name}\"\n}\n\nassign_key_value()\n{\n\tlocal arr key val\n\n\tarr=\"$1\"\n\tkey=\"$2\"\n\tval=\"$3\"\n\n\tprintf -v \"${arr}_${key}\" %s \"${val}\"\n}\n\nfully_eval()\n{\n\tlocal old new\n\n\told=\"\"\n\tnew=\"$1\"\n\n\twhile [ \"x${old}\" != \"x${new}\" ]; do\n\t\told=\"${new}\"\n\t\tnew=$(eval echo \"${old}\")\n\tdone\n\n\techo \"${new}\"\n}\n\nadd_config_var()\n{\n\tlocal sub_var var\n\n\tsub_var=\"$1\"\n\tvar=\"${2:-${sub_var}}\"\n\n\t#\n\t# Use the | character in the substitution command to avoid mangling variables\n\t# which contain forward slashes (e.g. paths). There *shouldn't* be any variables\n\t# that have | in them...\n\t#\n\tconfig_substitutions=\"${config_substitutions} -e \\\\\\\"s|\\@${sub_var}\\@|\\${${var}}|g;\\\\\\\"\"\n}\n\ngenerate_config_file()\n{\n\tlocal in_file out_file sub\n\n\tin_file=\"$1\"\n\tout_file=\"$2\"\n\n\techo \"${script_name}: creating ${out_file} from ${in_file}\"\n\n\t#\n\t# Use 'eval' to expand the variable references.\n\t#\n\teval \"sub=\\\"${config_substitutions}\\\"\"\n\n\t#\n\t# 'eval' also has to be used here to get the proper quoting.\n\t# This 'eval' CAN NOT be combined with the one above.\n\t#\n\teval \"perl -p ${sub} <\\\"${in_file}\\\" >\\\"${out_file}\\\"\"\n}\n\n#\n# FGVZ: This commented-out function is being kept as an example how how\n# to effectively \"pass by reference\" in bash. That is, pass the name of\n# a variable, instead of its conents, and then let the function use the\n# variable by prepending a $, at which time it can evaluate the string\n# as if it were a literal variable occurance.\n#\n#filteradd_to_list()\n#{\n#\tlocal dlist ditem list_c item_c is_blacklisted\n#\n#\t# Add $1 to the list identified by $2, but only if $1 is not\n#\t# found in a blacklist.\n#\n#\t# Note: $2 can actually be a list of items.\n#\tditem=\\$\"$1\"\n#\tdlist=\\$\"$2\"\n#\n#\t# Acquire the contents of $dlist and $ditem and store them in list_c\n#\t# and item_c, respectively.\n#\tlist_c=$(eval \"expr \\\"$dlist\\\" \")\n#\titem_c=$(eval \"expr \\\"$ditem\\\" \")\n#\n#\t# Iterate over $item_c in case it is actually multiple items.\n#\tfor cur_item in $item_c; do\n#\n#\t\tis_blacklisted=$(is_in_list \"${cur_item}\" \"${config_blist}\")\n#\t\tif [ ${is_blacklisted} == \"false\" ]; then\n#\n#\t\t\t# If cur_item is not blacklisted, add it to list_c.\n#\t\t\tlist_c=\"${list_c} ${cur_item}\"\n#\t\tfi\n#\tdone\n#\n#\t# Update the argument.\n#\teval \"$2=\\\"${list_c}\\\"\"\n#}\n\npass_config_kernel_registries()\n{\n\tlocal filename passnum\n\tlocal all_blist\n\tlocal curline list item config kernels\n\tlocal cname clist klist\n\n\t# Read function arguments:\n\t# first argument: the file containing the configuration registry.\n\t# second argument: the pass number: 0 or 1. Pass 0 builds the\n\t# indirect config blacklist (indirect_blist) ONLY. Pass 1 actually\n\t# begins populating the config and kernel registries, and assumes\n\t# the indirect_blist has already been created.\n\tfilename=\"$1\"\n\tpassnum=\"$2\"\n\n\t# Initialize a list of indirect blacklisted configurations for the\n\t# current iteration. These are configurations that are invalidated by\n\t# the removal of blacklisted configurations. For example, if haswell\n\t# is registered as needing the 'haswell' and 'zen' kernel sets:\n\t#\n\t#    haswell: haswell/haswell/zen\n\t#\n\t# and 'zen' was blacklisted because of the compiler version, then the\n\t# 'haswell' configuration must be omitted from the registry, as it no\n\t# longer has all of the kernel sets it was expecting.\n\tif [ \"${passnum}\" == \"0\" ]; then\n\t\tindirect_blist=\"\"\n\tfi\n\n\t# For convenience, merge the original and indirect blacklists.\n\t# NOTE: During pass 0, all_blist is equal to config_blist, since\n\t# indirect_blist is still empty.\n\tall_blist=\"${config_blist} ${indirect_blist}\"\n\n\t# Disable support for indirect blacklisting by returning early during\n\t# pass 0. See issue #214 for details [1]. Basically, I realized that\n\t# indirect blacklisting is not needed in the use case that I envisioned\n\t# in the real-life example above. If a subconfiguration such as haswell\n\t# is defined to require the zen kernel set, it implies that the zen\n\t# kernels can be compiled with haswell compiler flags. That is, just\n\t# because the zen subconfig (and its compiler flags) is blacklisted\n\t# does not mean that the haswell subconfig cannot compile the zen\n\t# kernels with haswell-specific flags.\n\t#\n\t# [1] https://github.com/flame/blis/issues/214\n\t#\n\tif [ \"${passnum}\" == \"0\" ]; then\n\t\treturn\n\tfi\n\n\twhile read -r line\n\tdo\n\t\tcurline=\"${line}\"\n\n\t\t# Remove everything after comment character '#'.\n\t\tcurline=${curline%%#*}\n\n\t\t# We've stripped out leading whitespace and trailing comments. If\n\t\t# the line is now empty, then we can skip it altogether.\n\t\tif [[ -z ${curline} ]]; then\n\t\t\tcontinue;\n\t\tfi\n\n\t\t# Read the config name and config list for the current line.\n\t\tcname=${curline%%:*}\n\t\tlist=${curline##*:}\n\n\t\t# If we encounter a slash, it means the name of the configuration\n\t\t# and the kernel set needed by that configuration are different.\n\t\tif [[ ${list} = */* ]]; then\n\n\t\t\t#echo \"Slash found.\"\n\t\t\tklist=\"\"\n\t\t\tclist=\"\"\n\n\t\t\tfor item in ${list}; do\n\n\t\t\t\t# The sub-configuration name is always the first sub-word in\n\t\t\t\t# the slash-separated compound word.\n\t\t\t\tconfig=${item%%/*}\n\n\t\t\t\t# Delete the sub-configuration name from the front of the\n\t\t\t\t# string, leaving the slash-separated kernel names (or just\n\t\t\t\t# the kernel name, if there is only one).\n\t\t\t\tkernels=${list#*/}\n\n\t\t\t\t# Replace the slashes with spaces to transform the string\n\t\t\t\t# into a space-separated list of kernel names.\n\t\t\t\tkernels=$(echo -e \"${kernels}\" | sed -e \"s/\\// /g\")\n\n\t\t\t\tclist=\"${clist} ${config}\"\n\t\t\t\tklist=\"${klist} ${kernels}\"\n\t\t\tdone\n\t\telse\n\n\t\t\t#echo \"Slash not found.\"\n\t\t\tclist=${list}\n\t\t\tklist=${list}\n\t\tfi\n\n\t\t# Strip out whitespace from the config name and config/kernel list\n\t\t# on each line.\n\t\tcname=$(canonicalize_ws \"${cname}\")\n\t\tclist=$(canonicalize_ws \"${clist}\")\n\t\tklist=$(canonicalize_ws \"${klist}\")\n\n\t\t# Next, we prepare to:\n\t\t# - pass 0: inspect klist for blacklisted configurations, which may\n\t\t#   reveal configurations as needing to be indirectly blacklisted.\n\t\t# - pass 1: compare cname to the blacklists and commit clist/klist\n\t\t#   to their respective registries, as appropriate.\n\n\t\t# Add cname to full_config_list. Duplicates will\n\t\t# be filtered out later.\n\t\tfull_config_list=\"${full_config_list} ${cname}\"\n\n\t\t# Handle singleton and umbrella configuration entries separately.\n\t\tif [[ $(is_singleton_family \"${cname}\" \"${clist}\") == \"true\" ]]; then\n\n\t\t\t# Singleton configurations/families.\n\t\t\t# Note: for singleton families, clist contains one item, which\n\t\t\t# always equals cname, but klist could contain more than one\n\t\t\t# item.\n\n\t\t\t# Add the kernels in klist to full_kernel_list. Duplicates will\n\t\t\t# be filtered out later.\n\t\t\tfull_subconfig_list=\"${full_subconfig_list} ${cname}\"\n\t\t\tfull_kernel_list=\"${full_kernel_list} ${klist}\"\n\n\t\t\t# Only consider updating the indirect blacklist (pass 0) or\n\t\t\t# committing clist and klist to the registries (pass 1) if the\n\t\t\t# configuration name (cname) is not blacklisted.\n\t\t\tif [[ $(is_in_list \"${cname}\" \"${all_blist}\") == \"false\" ]]; then\n\n\t\t\t\tif [ \"${passnum}\" == \"0\" ]; then\n\t\t\t\t\t# Even if the cname isn't blacklisted, one of the requisite\n\t\t\t\t\t# kernels might be, so we need to check klist for blacklisted\n\t\t\t\t\t# items. If we find one, we must assume that the entire entry\n\t\t\t\t\t# must be thrown out. (Ideally, we would simply fall back to\n\t\t\t\t\t# reference code for the blacklisted kernels, but that is not\n\t\t\t\t\t# at all straightforward under the current configuration\n\t\t\t\t\t# system architecture.) Thus, we add cname to the indirect\n\t\t\t\t\t# blacklist.\n\t\t\t\t\tfor item in ${klist}; do\n\t\t\t\t\t\tif [[ $(is_in_list \"${item}\" \"${config_blist}\") == \"true\" ]]; then\n\t\t\t\t\t\t\tindirect_blist=\"${indirect_blist} ${cname}\"\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfi\n\t\t\t\t\tdone\n\t\t\t\tfi\n\n\t\t\t\tif [ \"${passnum}\" == \"1\" ]; then\n\t\t\t\t\t# Store the clist to the cname key of the config registry.\n\t\t\t\t\t#config_registry[${cname}]=${clist}\n\t\t\t\t\t#printf -v \"config_registry_${cname}\" %s \"${clist}\"\n\t\t\t\t\tassign_key_value \"config_registry\" \"${cname}\" \"${clist}\"\n\t\t\t\tfi\n\t\t\tfi\n\n\t\t\tif [ \"${passnum}\" == \"1\" ]; then\n\t\t\t\t# Store the klist to the cname key of the kernel registry.\n\t\t\t\t#kernel_registry[${cname}]=${klist}\n\t\t\t\t#printf -v \"kernel_registry_${cname}\" %s \"${klist}\"\n\t\t\t\tassign_key_value \"kernel_registry\" \"${cname}\" \"${klist}\"\n\t\t\tfi\n\n\t\telse\n\t\t\t# Umbrella configurations/families.\n\n\t\t\t# First we check cname, which should generally not be blacklisted\n\t\t\t# for umbrella families, but we check anyway just to be safe.\n\t\t\tif [[ $(is_in_list \"${cname}\" \"${all_blist}\") == \"false\" ]]; then\n\n\t\t\t\tif [ \"${passnum}\" == \"1\" ]; then\n\n\t\t\t\t\t# Check each item in the clist and klist. (At this point,\n\t\t\t\t\t# clist == klist.) If any sub-config is blacklisted, we\n\t\t\t\t\t# omit it from clist and klist.\n\t\t\t\t\tfor item in ${clist}; do\n\n\t\t\t\t\t\tif [[ $(is_in_list \"${item}\" \"${all_blist}\") == \"true\" ]]; then\n\t\t\t\t\t\t\tclist=$(remove_from_list \"${item}\" \"${clist}\")\n\t\t\t\t\t\t\tklist=$(remove_from_list \"${item}\" \"${klist}\")\n\t\t\t\t\t\tfi\n\t\t\t\t\tdone\n\n\t\t\t\t\t# Store the config and kernel lists to entries that\n\t\t\t\t\t# corresponds to the config name.\n\t\t\t\t\t#config_registry[${cname}]=${clist}\n\t\t\t\t\t#kernel_registry[${cname}]=${klist}\n\t\t\t\t\t#printf -v \"config_registry_${cname}\" %s \"${clist}\"\n\t\t\t\t\t#printf -v \"kernel_registry_${cname}\" %s \"${klist}\"\n\t\t\t\t\tassign_key_value \"config_registry\" \"${cname}\" \"${clist}\"\n\t\t\t\t\tassign_key_value \"kernel_registry\" \"${cname}\" \"${klist}\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\n\tdone < \"${filename}\"\n\n\tif [ \"${passnum}\" == \"0\" ]; then\n\t\t# Assign the final indirect blacklist (with whitespace removed).\n\t\tindirect_blist=$(canonicalize_ws \"${indirect_blist}\")\n\tfi\n\n\t# Remove duplicates and excess whitespace from the full config and\n\t# kernel lists.\n\tfull_config_list=$(canonicalize_ws \"$(rm_duplicate_words_simple \"${full_config_list}\")\")\n\tfull_subconfig_list=$(canonicalize_ws \"$(rm_duplicate_words_simple \"${full_subconfig_list}\")\")\n\tfull_kernel_list=$(canonicalize_ws \"$(rm_duplicate_words_simple \"${full_kernel_list}\")\")\n}\n\nread_registry_file()\n{\n\tlocal filename\n\tlocal clist klist\n\tlocal iterate_again config\n\tlocal cr_var mem mems_mem newclist\n\tlocal kr_var ker kers_ker newklist\n\n\tfilename=\"$1\"\n\n\t# Execute an initial pass through the config_registry file so that\n\t# we can accumulate a list of indirectly blacklisted configurations,\n\t# if any.\n\tpass_config_kernel_registries \"${filename}\" \"0\"\n\n\t# Now that the indirect_blist has been created, make a second pass\n\t# through the 'config_registry' file, this time creating the actual\n\t# config and kernel registry data structures.\n\tpass_config_kernel_registries \"${filename}\" \"1\"\n\n\t# Now we must go back through the config_registry and subsitute any\n\t# configuration families with their constituents' members. Each time\n\t# one of these substitutions occurs, we set a flag that causes us to\n\t# make one more pass. (Subsituting a singleton definition does not\n\t# prompt additional iterations.) This process stops when a full pass\n\t# does not result in any subsitution.\n\n\titerate_again=\"1\"\n\twhile [ \"${iterate_again}\" == \"1\" ]; do\n\n\t\titerate_again=\"0\"\n\n\t\t#for config in \"${!config_registry[@]}\"; do\n\t\tfor cr_var in ${!config_registry_*}; do\n\n\t\t\tconfig=${cr_var##config_registry_}\n\n\t\t\tclist=$(query_array \"config_registry\" \"${config}\")\n\n\t\t\t# The entries that define singleton families should never need\n\t\t\t# any substitution.\n\t\t\tif [[ $(is_singleton_family \"${config}\" \"${clist}\") == \"true\" ]]; then\n\t\t\t\tcontinue\n\t\t\tfi\n\n\t\t\t#for mem in ${config_registry[$config]}; do\n\t\t\t#for mem in ${!cr_var}; do\n\t\t\tfor mem in ${clist}; do\n\n\t\t\t\t#mems_mem=\"${config_registry[${mem}]}\"\n\t\t\t\tmems_mem=$(query_array \"config_registry\" \"${mem}\")\n\n\t\t\t\t# If mems_mem is empty string, then mem was not found as a key\n\t\t\t\t# in the config list associative array. In that case, we continue\n\t\t\t\t# and will echo an error later in the script.\n\t\t\t\tif [ \"${mems_mem}\" == \"\" ]; then\n\t\t\t\t\t#echo \"  config for ${mem} is empty string! no entry in config list.\"\n\t\t\t\t\tcontinue;\n\t\t\t\tfi\n\n\t\t\t\tif [ \"${mem}\" != \"${mems_mem}\" ]; then\n\n\t\t\t\t\t#clist=\"${config_registry[$config]}\"\n\t\t\t\t\tclisttmp=$(query_array \"config_registry\" \"${config}\")\n\n\t\t\t\t\t# Replace the current config with its constituent config set,\n\t\t\t\t\t# canonicalize whitespace, and then remove duplicate config\n\t\t\t\t\t# set names, if they exist. Finally, update the config registry\n\t\t\t\t\t# with the new config list.\n\t\t\t\t\t# NOTE: WE must use substitute_words() rather than a simple sed\n\t\t\t\t\t# expression because we need to avoid matching partial strings.\n\t\t\t\t\t# For example, if clist above contains \"foo bar barsk\" and we use\n\t\t\t\t\t# sed to substitute \"bee boo\" as the members of \"bar\", the\n\t\t\t\t\t# result would (incorrectly) be \"foo bee boo bee boosk\",\n\t\t\t\t\t# which would then get reduced, via rm_duplicate_words(), to\n\t\t\t\t\t# \"foo bee boo boosk\".\n\t\t\t\t\t#newclist=$(echo -e \"${clist}\" | sed -e \"s/${mem}/${mems_mem}/g\")\n\t\t\t\t\tnewclist=$(substitute_words \"${mem}\" \"${mems_mem}\" \"${clisttmp}\")\n\t\t\t\t\tnewclist=$(canonicalize_ws \"${newclist}\")\n\t\t\t\t\tnewclist=$(rm_duplicate_words \"${newclist}\")\n\n\t\t\t\t\t#config_registry[${config}]=${newclist}\n\t\t\t\t\t#printf -v \"config_registry_${config}\" %s \"${newclist}\"\n\t\t\t\t\tassign_key_value \"config_registry\" \"${config}\" \"${newclist}\"\n\n\t\t\t\t\t# Since we performed a substitution and changed the config\n\t\t\t\t\t# list, mark the iteration flag to continue another round,\n\t\t\t\t\t# but only if the config (mem) value is NOT present\n\t\t\t\t\t# in the list of sub-configs. If it is present, then further\n\t\t\t\t\t# substitution may not necessarily be needed this round.\n\t\t\t\t\tif [[ $(is_in_list \"${mem}\" \"${mems_mem}\") == \"false\" ]]; then\n\t\t\t\t\t\titerate_again=\"1\"\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\n\t# Similar to what we just did for the config_registry, we now iterate\n\t# through the kernel_registry and substitute any configuration families\n\t# in the kernel list (right side of ':') with the members of that\n\t# family's kernel set. This process continues iteratively, as before,\n\t# until all families have been replaced with singleton configurations'\n\t# kernel sets.\n\n\titerate_again=\"1\"\n\twhile [ \"${iterate_again}\" == \"1\" ]; do\n\n\t\titerate_again=\"0\"\n\n\t\t#for config in \"${!kernel_registry[@]}\"; do\n\t\tfor kr_var in ${!kernel_registry_*}; do\n\n\t\t\tconfig=${kr_var##kernel_registry_}\n\n\t\t\tklist=$(query_array \"kernel_registry\" \"${config}\")\n\n\t\t\t# The entries that define singleton families should never need\n\t\t\t# any substitution. In the kernel registry, we know it's a\n\t\t\t# singleton entry when the cname occurs somewhere in the klist.\n\t\t\t# (This is slightly different than the same test in the config\n\t\t\t# registry, where we test that clist is one word and that\n\t\t\t# clist == cname.)\n\t\t\tif [[ $(is_in_list \"${config}\" \"${klist}\") == \"true\" ]]; then\n\t\t\t\t#echo \"debug: '${config}' not found in '${klist}'; skipping.\"\n\t\t\t\tcontinue\n\t\t\tfi\n\n\t\t\t#for ker in ${kernel_registry[$config]}; do\n\t\t\t#for ker in ${!kr_var}; do\n\t\t\tfor ker in ${klist}; do\n\n\t\t\t\t#kers_ker=\"${kernel_registry[${ker}]}\"\n\t\t\t\tkers_ker=$(query_array \"kernel_registry\" \"${ker}\")\n\n\t\t\t\t# If kers_ker is empty string, then ker was not found as a key\n\t\t\t\t# in the kernel registry. While not common, this can happen\n\t\t\t\t# when ker identifies a kernel set that does not correspond to\n\t\t\t\t# any configuration. (Example: armv7a and armv8a kernel sets are\n\t\t\t\t# used by cortexa* configurations, but do not corresond to their\n\t\t\t\t# own configurations.)\n\t\t\t\tif [ \"${kers_ker}\" == \"\" ]; then\n\t\t\t\t\t#echo \"debug: ${ker} not found in kernel registry.\"\n\t\t\t\t\tcontinue\n\t\t\t\tfi\n\n\t\t\t\t# If the current config/kernel (ker) differs from its singleton kernel\n\t\t\t\t# entry (kers_ker), then that singleton entry was specified to use\n\t\t\t\t# a different configuration's kernel set. Thus, we need to replace the\n\t\t\t\t# occurrence in the current config/kernel name with that of the kernel\n\t\t\t\t# set it needs.\n\t\t\t\tif [ \"${ker}\" != \"${kers_ker}\" ]; then\n\n\t\t\t\t\t#klisttmp=\"${kernel_registry[$config]}\"\n\t\t\t\t\tklisttmp=$(query_array \"kernel_registry\" \"${config}\")\n\n\t\t\t\t\t# Replace the current config with its requisite kernels,\n\t\t\t\t\t# canonicalize whitespace, and then remove duplicate kernel\n\t\t\t\t\t# set names, if they exist. Finally, update the kernel registry\n\t\t\t\t\t# with the new kernel list.\n\t\t\t\t\t# NOTE: WE must use substitute_words() rather than a simple sed\n\t\t\t\t\t# expression because we need to avoid matching partial strings.\n\t\t\t\t\t# For example, if klist above contains \"foo bar barsk\" and we use\n\t\t\t\t\t# sed to substitute \"bee boo\" as the members of \"bar\", the\n\t\t\t\t\t# result would (incorrectly) be \"foo bee boo bee boosk\",\n\t\t\t\t\t# which would then get reduced, via rm_duplicate_words(), to\n\t\t\t\t\t# \"foo bee boo boosk\".\n\t\t\t\t\t#newklist=$(echo -e \"${klisttmp}\" | sed -e \"s/${ker}/${kers_ker}/g\")\n\t\t\t\t\tnewklist=$(substitute_words \"${ker}\" \"${kers_ker}\" \"${klisttmp}\")\n\t\t\t\t\tnewklist=$(canonicalize_ws \"${newklist}\")\n\t\t\t\t\tnewklist=$(rm_duplicate_words \"${newklist}\")\n\n\t\t\t\t\t#kernel_registry[${config}]=${newklist}\n\t\t\t\t\t#printf -v \"kernel_registry_${config}\" %s \"${newklist}\"\n\t\t\t\t\tassign_key_value \"kernel_registry\" \"${config}\" \"${newklist}\"\n\n\t\t\t\t\t# Since we performed a substitution and changed the kernel\n\t\t\t\t\t# list, mark the iteration flag to continue another round,\n\t\t\t\t\t# unless we just substituted using a singleton family\n\t\t\t\t\t# definition, in which case we don't necessarily need to\n\t\t\t\t\t# iterate further this round.\n\t\t\t\t\tif [[ $(is_in_list \"${ker}\" \"${kers_ker}\") == \"false\" ]]; then\n\t\t\t\t\t\titerate_again=\"1\"\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n}\n\nsubstitute_words()\n{\n\tlocal word new_words list newlist\n\n\tword=\"$1\"\n\tnew_words=\"$2\"\n\tlist=\"$3\"\n\n\tfor str in ${list}; do\n\n\t\tif [ \"${str}\" == \"${word}\" ]; then\n\t\t\tnewlist=\"${newlist} ${new_words}\"\n\t\telse\n\t\t\tnewlist=\"${newlist} ${str}\"\n\t\tfi\n\tdone\n\n\techo \"${newlist}\"\n}\n\nbuild_kconfig_registry()\n{\n\tlocal familyname clist config kernels kernel cur_configs newvalue\n\n\tfamilyname=\"$1\"\n\n\t#clist=\"${config_registry[${familyname}]}\"\n\tclist=$(query_array \"config_registry\" \"${familyname}\")\n\n\tfor config in ${clist}; do\n\n\t\t# Look up the kernels for the current sub-configuration.\n\t\t#kernels=\"${kernel_registry[${config}]}\"\n\t\tkernels=$(query_array \"kernel_registry\" \"${config}\")\n\n\t\tfor kernel in ${kernels}; do\n\n\t\t\t# Add the sub-configuration to the list associated with the\n\t\t\t# kernel.\n\n\t\t\t# Query the current sub-configs for the current ${kernel}.\n\t\t\t#cur_configs=\"${kconfig_registry[${kernel}]}\"\n\t\t\tcur_configs=$(query_array \"kconfig_registry\" \"${kernel}\")\n\n\t\t\t# Add the current sub-configuration to the list of sub-configs\n\t\t\t# we just queried.\n\t\t\tnewvalue=$(canonicalize_ws \"${cur_configs} ${config}\")\n\n\t\t\t# Update the array.\n\t\t\t#kconfig_registry[${kernel}]=\"${newvalue}\"\n\t\t\t#printf -v \"kconfig_registry_${kernel}\" %s \"${newvalue}\"\n\t\t\tassign_key_value \"kconfig_registry\" \"${kernel}\" \"${newvalue}\"\n\n\t\tdone\n\n\tdone\n}\n\nis_in_list()\n{\n\tlocal word list rval item\n\n\tword=\"$1\"\n\tlist=\"$2\"\n\trval=\"false\"\n\n\tfor item in ${list}; do\n\n\t\tif [ \"${item}\" == \"${word}\" ]; then\n\t\t\trval=\"true\"\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\techo \"${rval}\"\n}\n\nis_singleton()\n{\n\tlocal list rval count_str item\n\n\tlist=\"$1\"\n\trval=\"false\"\n\n\tcount_str=\"\"\n\tfor item in ${list}; do\n\n\t\tcount_str=\"${count_str}x\"\n\tdone\n\n\tif [ \"${count_str}\" == \"x\" ]; then\n\t\trval=\"true\"\n\tfi\n\n\techo \"${rval}\"\n}\n\nis_singleton_family()\n{\n\tlocal familyname memberlist rval\n\n\tfamilyname=\"$1\"\n\tmemberlist=\"$2\"\n\n\trval=\"false\"\n\n\tif [[ -n $(is_singleton \"${memberlist}\") ]]; then\n\n\t\tif [ \"${memberlist}\" == \"${familyname}\" ]; then\n\t\t\trval=\"true\"\n\t\tfi\n\tfi\n\n\techo \"${rval}\"\n}\n\nremove_from_list()\n{\n\tlocal strike_list list flist item\n\n\tstrike_words=\"$1\"\n\tlist=\"$2\"\n\tflist=\"\"\n\n\tfor item in ${list}; do\n\n\t\t# Filter out any list item that matches any of the strike words.\n\t\tif [[ $(is_in_list \"${item}\" \"${strike_words}\") == \"false\" ]]; then\n\t\t\tflist=\"${flist} ${item}\"\n\t\tfi\n\tdone\n\n\tflist=$(canonicalize_ws \"${flist}\")\n\n\t# Return the filtered list.\n\techo \"${flist}\"\n}\n\ncanonicalize_ws()\n{\n\tlocal str\n\n\tstr=\"$1\"\n\n\t# Remove leading and trailing whitespace.\n\tstr=$(echo -e \"${str}\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n\n\t# Remove duplicate spaces between words.\n\tstr=$(echo -e \"${str}\" | tr -s \" \")\n\n\t# Update the input argument.\n\techo \"${str}\"\n}\n\nrm_duplicate_words_simple()\n{\n\tlocal str revstr revres res\n\n\tstr=\"$1\"\n\n\t# Remote duplicates, keeping the first occurrence.\n\tres=$(echo \"${str}\" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf(\"%s%s\",$i,FS)}{printf(\"\\n\")}')\n\n\techo \"${res}\"\n}\n\nrm_duplicate_words()\n{\n\tlocal str revstr revres res\n\n\tstr=\"$1\"\n\n\t# We reverse the initial string, THEN remove duplicates, then reverse\n\t# the de-duplicated result so that only the last instance is kept after\n\t# removing duplicates (rather than keeping only the first). This is\n\t# totally unnecessary but works well for the kinds of duplicates that\n\t# show up in certain use cases of the config and kernel registries.\n\t# For example, these gymnastics allow us to keep only the last instance\n\t# of the 'generic' configuration in a configuration family that\n\t# includes it twice or more.\n\trevstr=$(echo \"${str}\" | awk '{ for (i=NF; i>1; i--) printf(\"%s \",$i); print $1; }')\n\trevres=$(echo \"${revstr}\" | awk '{for (i=1;i<=NF;i++) if (!a[$i]++) printf(\"%s%s\",$i,FS)}{printf(\"\\n\")}')\n\tres=$(echo \"${revres}\" | awk '{ for (i=NF; i>1; i--) printf(\"%s \",$i); print $1; }')\n\n\techo \"${res}\"\n}\n\nget_cc_search_list()\n{\n\tlocal list\n\n\t# For Linux, Darwin (OS X), and generic OSes, prioritize gcc.\n\tlist=\"gcc clang cc\"\n\n\t# For OpenBSD and FreeBSD, prioritize cc and clang over gcc.\n\tif   [ \"${os_name}\" = \"OpenBSD\" ]; then\n\t\tlist=\"cc clang gcc\"\n\telif [ \"${os_name}\" = \"FreeBSD\" ]; then\n\t\tlist=\"cc clang gcc\"\n\tfi\n\n\techo \"${list}\"\n}\n\nget_cxx_search_list()\n{\n\tlocal list\n\n\t# For Linux, Darwin (OS X), and generic OSes, prioritize g++.\n\tlist=\"g++ clang++ c++\"\n\n\t# For OpenBSD and FreeBSD, prioritize cc and clang over gcc.\n\tif   [ \"${os_name}\" = \"OpenBSD\" ]; then\n\t\tlist=\"c++ clang++ g++\"\n\telif [ \"${os_name}\" = \"FreeBSD\" ]; then\n\t\tlist=\"c++ clang++ g++\"\n\tfi\n\n\techo \"${list}\"\n}\n\nget_fc_search_list()\n{\n\tlocal list\n\n\tlist=\"gfortran ifort ifx nvfortran\"\n\n\techo \"${list}\"\n}\n\nget_ar_search_list()\n{\n\tlocal list\n\n\tlist=\"ar\"\n\n\techo \"${list}\"\n}\n\nget_ranlib_search_list()\n{\n\tlocal list\n\n\tlist=\"ranlib\"\n\n\techo \"${list}\"\n}\n\nauto_detect()\n{\n\tlocal cc cflags config_defines detected_config rval cmd\n\n\t# Use the same compiler that was found earlier.\n\tcc=\"${found_cc}\"\n\n\t# For debugging: reveal what compiler was chosen for auto-detection.\n\t#touch \"${cc}.txt\"\n\n\t# Tweak the flags we use based on the compiler. This is mostly just\n\t# an opportunity to turn off annoying warnings that some compilers\n\t# may throw off.\n\tif [ \"${cc}\" == \"clang\" ]; then\n\t\tcflags=\"-Wno-tautological-compare\"\n\telse\n\t\tcflags=\n\tfi\n\n\t# Accumulate a list of source files we'll need to compile along with\n\t# the top-level (root) directory in which they are located.\n\tc_src_pairs=\"\"\n\tc_src_pairs=\"${c_src_pairs} frame:bli_arch.c\"\n\tc_src_pairs=\"${c_src_pairs} frame:bli_cpuid.c\"\n\tc_src_pairs=\"${c_src_pairs} frame:bli_env.c\"\n\tc_src_pairs=\"${c_src_pairs} build:config_detect.c\"\n\n\t# Accumulate a list of full filepaths to the source files listed above.\n\tc_src_filepaths=\"\"\n\tfor pair in ${c_src_pairs}; do\n\n\t\tfilename=${pair#*:}\n\t\trootdir=${pair%:*}\n\n\t\tfilepath=$(find \"${dist_path}/${rootdir}\" -name \"${filename}\")\n\t\tc_src_filepaths=\"${c_src_filepaths} ${filepath}\"\n\tdone\n\n\t# Accumulate a list of header files we'll need to locate along with\n\t# the top-level (root) directory in which they are located.\n\tc_hdr_pairs=\"\"\n\tc_hdr_pairs=\"${c_hdr_pairs} frame:bli_system.h\"\n\tc_hdr_pairs=\"${c_hdr_pairs} frame:bli_type_defs.h\"\n\tc_hdr_pairs=\"${c_hdr_pairs} frame:bli_arch.h\"\n\tc_hdr_pairs=\"${c_hdr_pairs} frame:bli_cpuid.h\"\n\tc_hdr_pairs=\"${c_hdr_pairs} frame:bli_env.h\"\n\t# NOTE: These headers are needed by bli_type_defs.h.\n\tc_hdr_pairs=\"${c_hdr_pairs} frame:bli_malloc.h\"\n\tc_hdr_pairs=\"${c_hdr_pairs} frame:bli_pthread.h\"\n\n\t# Accumulate a list of full paths to the header files listed above.\n\t# While we are at it, we include the \"-I\" compiler option to indicate\n\t# adding the path to the list of directories to search when encountering\n\t# #include directives.\n\tc_hdr_paths=\"\"\n\tfor pair in ${c_hdr_pairs}; do\n\n\t\tfilename=${pair#*:}\n\t\trootdir=${pair%:*}\n\n\t\tfilepath=$(find \"${dist_path}/${rootdir}\" -name \"${filename}\")\n\t\tpath=${filepath%/*}\n\t\tc_hdr_paths=\"${c_hdr_paths} -I${path}\"\n\tdone\n\n\t# Define the executable name.\n\tautodetect_x=\"auto-detect.x\"\n\n\t# Create #defines for all of the BLIS_CONFIG_ macros in bli_cpuid.c.\n\tbli_cpuid_c_filepath=$(find \"${dist_path}/frame\" -name \"bli_cpuid.c\")\n\tconfig_defines=$(grep BLIS_CONFIG_ \"${bli_cpuid_c_filepath}\" \\\n\t                 | sed -Ee 's/#ifdef[[:space:]]+/-D/g')\n\n\t# Set the linker flags. We typically need pthreads (or BLIS's homerolled\n\t# equiavlent) because it is needed for parts of bli_arch.c unrelated to\n\t# bli_arch_string(), which is called by the main() function in ${main_c}.\n\tif [[ \"$is_msvc\" == \"no\" ]]; then\n\t\tldflags=\"${LIBPTHREAD--lpthread}\"\n\tfi\n\n\t# However, if --disable-system was given, we override the choice made above\n\t# and do not use any pthread link flags.\n\tif [[ \"$enable_system\" == \"no\" ]]; then\n\t\tldflags=\n\tfi\n\n\t# Compile the auto-detect program using source code inside the\n\t# framework.\n\t# NOTE: -D_GNU_SOURCE is needed to enable POSIX extensions to\n\t# pthreads (i.e., barriers).\n\n\tcmd=\"${cc} \\\n\t      -DBLIS_CONFIGURETIME_CPUID \\\n\t      ${c_hdr_paths} \\\n\t      -std=c99 -D_GNU_SOURCE \\\n\t      ${cflags}\"\n\n\t# Special case for RISC-V, whose architecture can be detected with\n\t# preprocessor macros alone. This avoids having to run RISC-V binaries\n\t# on a cross-compiler host. Returns \"generic\" if RISC-V not detected.\n\triscv_config=$(${cmd} -E \"${dist_path}/build/detect/riscv/bli_riscv_cpuid.h\" |\n\t               grep '^[^#]')\n\tif [[ $riscv_config != *generic* ]]; then\n\t\techo \"${riscv_config}\"\n\t\treturn\n\tfi\n\n\t# Finish command for building executable\n\tcmd=\"${cmd} ${config_defines} ${c_src_filepaths} ${ldflags} \\\n\t     -o ${autodetect_x}\"\n\n\tif [ \"${debug_auto_detect}\" == \"no\" ]; then\n\n\t\t# Execute the compilation command.\n\t\t# shellcheck disable=2086\n\t\teval ${cmd}\n\n\telse\n\n\t\t# Debugging stuff. Instead of executing ${cmd}, join the lines together\n\t\t# with tr and trim excess whitespace via awk.\n\t\tcmd=$(echo \"${cmd}\" | tr '\\n' ' ' | awk '{$1=$1;print}')\n\t\techo \"${cmd}\"\n\t\treturn\n\tfi\n\n\t# Run the auto-detect program.\n\tdetected_config=$(\"./${autodetect_x}\")\n\n\t# Remove the executable file.\n\trm -f \"./${autodetect_x}\"\n\n\t# Return the detected sub-configuration name.\n\techo \"${detected_config}\"\n}\n\nhas_libmemkind()\n{\n\tlocal main_c main_c_filepath LDFLAGS_mk binname rval\n\n\t# Path to libmemkind detection source file.\n\tmain_c=\"libmemkind_detect.c\"\n\tmain_c_filepath=$(find \"${dist_path}/build\" -name \"${main_c}\")\n\n\t# Add libmemkind to LDFLAGS.\n\tLDFLAGS_mk=\"${LDFLAGS} -lmemkind\"\n\n\t# Binary executable filename.\n\tbinname=\"libmemkind-detect.x\"\n\n\t# Attempt to compile a simple main() program that contains a call\n\t# to hbw_malloc() and that links to libmemkind.\n\t# shellcheck disable=2086\n\t\"${found_cc}\" -o \"${binname}\" \"${main_c_filepath}\" ${LDFLAGS_mk} 2> /dev/null\n\n\t# Depending on the return code from the compile step above, we set\n\t# enable_memkind accordingly.\n\tif [ \"$?\" == 0 ]; then\n\t\trval='yes'\n\telse\n\t\trval='no'\n\tfi\n\n\t# Remove the executable generated above.\n\trm -f \"./${binname}\"\n\n\techo \"${rval}\"\n}\n\nhas_pragma_omp_simd()\n{\n\tlocal main_c main_c_filepath binname rval\n\n\tomp_simd_path=\"${omp_simd_path-${dist_path}/build}\"\n\n\t# Path to omp-simd detection source file.\n\tmain_c=\"omp_simd_detect.c\"\n\tmain_c_filepath=$(find \"${omp_simd_path}\" -name \"${main_c}\")\n\n\t# Binary executable filename.\n\tbinname=\"omp_simd-detect.x\"\n\n\t# Attempt to compile a simple main() program that contains a\n\t# #pragma omp simd.\n\t\"${found_cc}\" -std=c99 -O3 -march=native -fopenmp-simd \\\n\t            -o \"${binname}\" \"${main_c_filepath}\" 2> /dev/null\n\n\t# Depending on the return code from the compile step above, we set\n\t# enable_memkind accordingly.\n\tif [ \"$?\" == 0 ]; then\n\t\trval='yes'\n\telse\n\t\trval='no'\n\tfi\n\n\t# Remove the executable generated above.\n\trm -f \"./${binname}\"\n\n\techo \"${rval}\"\n}\n\nechoerr()\n{\n\tprintf \"${script_name}: error: %s\\n\" \"$*\" #>&2;\n}\n\nechowarn()\n{\n\tprintf \"${script_name}: warning: %s\\n\" \"$*\" #>&2;\n}\n\nblacklistcc_add()\n{\n\t# Check whether we've already blacklisted the given sub-config so\n\t# we don't output redundant messages.\n\tif [[ $(is_in_list \"$1\" \"${config_blist}\") == \"false\" ]]; then\n\n\t\techowarn \"${cc_vendor} ${cc_version} does not support '$1'; adding to blacklist.\"\n\t\tconfig_blist=\"${config_blist} $1\"\n\tfi\n}\n\nblacklistbu_add()\n{\n\t# Check whether we've already blacklisted the given sub-config so\n\t# we don't output redundant messages.\n\tif [[ $(is_in_list \"$1\" \"${config_blist}\") == \"false\" ]]; then\n\n\t\techowarn \"assembler ('as' ${bu_version}) does not support '$1'; adding to blacklist.\"\n\t\tconfig_blist=\"${config_blist} $1\"\n\tfi\n}\n\nblacklistos_add()\n{\n\t# Check whether we've already blacklisted the given sub-config so\n\t# we don't output redundant messages.\n\tif [[ $(is_in_list \"$1\" \"${config_blist}\") == \"false\" ]]; then\n\n\t\techowarn \"The operating system does not support building '$1'; adding to blacklist.\"\n\t\tconfig_blist=\"${config_blist} $1\"\n\tfi\n}\n\nblacklist_init()\n{\n\tconfig_blist=\"\"\n}\n\nblacklist_cleanup()\n{\n\t# Remove duplicates and whitespace from the blacklist.\n\tconfig_blist=$(rm_duplicate_words \"${config_blist}\")\n\tconfig_blist=$(canonicalize_ws \"${config_blist}\")\n}\n\nechoerr_unsupportedcc()\n{\n\techoerr \"${script_name}: *** Unsupported compiler version: ${cc_vendor} ${cc_version}.\"\n\texit 1\n}\n\nechoerr_unsupportedpython()\n{\n\techoerr \"${script_name}: *** Unsupported python version: ${python_version}.\"\n\texit 1\n}\n\nget_binutils_version()\n{\n\tbinutil=${AS:-as}\n\n\t# Query the full binutils version string output. This includes the\n\t# version string along with (potentially) a bunch of other textual\n\t# clutter.\n\tif [ \"$(uname -s)\" == \"Darwin\" ]; then\n\t\t# The default OS X assembler uses a trifecta of brain-dead\n\t\t# conventions: responding only to '-v', hanging indefinitely if\n\t\t# not given an argument, and outputing the result to stderr.\n\t\t# (And if you still weren't convinced, it creates an 'a.out'\n\t\t# by default. So yeah.)\n\t\tbu_string=$(${binutil} -v /dev/null -o /dev/null 2>&1)\n\telse\n\t\tbu_string=$(${binutil} --version 2>/dev/null)\n\tfi\n\n\t# Query the binutils version number.\n\t# The last part ({ read first rest ; echo $first ; }) is a workaround\n\t# to OS X's egrep only returning the first match.\n\tbu_version=$(echo \"${bu_string}\" | grep -oE '[0-9]+\\.[0-9]+\\.?[0-9]*' |\n\t             { read -r first rest ; echo \"${first}\"; })\n\n\t# Parse the version number into its major, minor, and revision\n\t# components.\n\tbu_major=$(echo \"${bu_version}\" | cut -d. -f1)\n\tbu_minor=$(echo \"${bu_version}\" | cut -d. -f2)\n\tbu_revision=$(echo \"${bu_version}\" | cut -d. -f3)\n\n\techo \"${script_name}: found assembler ('as') version ${bu_version} (maj: ${bu_major}, min: ${bu_minor}, rev: ${bu_revision}).\"\n}\n\nget_python_search_list()\n{\n\tlocal list\n\n\t# For Linux, Darwin (OS X), and generic OSes, prioritize 'python'.\n\tlist=\"python python3 python2\"\n\n\techo \"${list}\"\n}\n\nget_python_version()\n{\n\tlocal python vendor_string\n\n\tpython=\"${found_python}\"\n\n\t# Query the python version. This includes the version number along\n\t# with other text, such as \"Python \".\n\t# NOTE: Python seems to echo its version info to stderr, not\n\t# stdout, and thus we redirect stderr to stdout and capture that.\n\tvendor_string=\"$(${python} --version 2>&1)\"\n\n\t# Drop any preceding text and save only the first numbers and what\n\t# comes after.\n\tpython_version=$(echo \"${vendor_string}\" | sed -e \"s/[a-zA-Z_ ]* \\([0-9]*\\..*\\)/\\1/g\")\n\t# Parse the version number into its major, minor, and revision\n\t# components.\n\tpython_major=$(echo \"${python_version}\" | cut -d. -f1)\n\tpython_minor=$(echo \"${python_version}\" | cut -d. -f2)\n\tpython_revision=$(echo \"${python_version}\" | cut -d. -f3)\n\n\techo \"${script_name}: found python version ${python_version} (maj: ${python_major}, min: ${python_minor}, rev: ${python_revision}).\"\n}\n\ncheck_python()\n{\n\tlocal python\n\n\tpython=\"${found_python}\"\n\n\t#\n\t# Python requirements\n\t#\n\t# python1: no versions supported\n\t# python2: 2.7+\n\t# python3: 3.4+\n\t#\n\t# NOTE: It's actually unclear whether python 3.0 through 3.3.x would work.\n\t# Python 3.5 is the oldest python3 that I have available to test with, and\n\t# I only know that 3.4 will work thanks to feedback from Dave Love. So it's\n\t# quite possible that some of those \"unsupported\" python3 versions are\n\t# sufficient. -FGVZ\n\t#\n\n\t# Python 1.x is unsupported.\n\tif [[ ${python_major} -eq 1 ]]; then\n\t\techoerr_unsupportedpython\n\tfi\n\n\t# Python 2.6.x or older is unsupported.\n\tif [[ ${python_major} -eq 2 ]]; then\n\t\tif [[ ${python_minor} -lt 7 ]]; then\n\t\t\techoerr_unsupportedpython\n\t\tfi\n\tfi\n\n\t# Python 3.3.x or older is unsupported.\n\tif [[ ${python_major} -eq 3 ]]; then\n\t\tif [[ ${python_minor} -lt 4 ]]; then\n\t\t\techoerr_unsupportedpython\n\t\tfi\n\tfi\n\n\techo \"${script_name}: python ${python_version} appears to be supported.\"\n}\n\nget_compiler_version()\n{\n\tlocal cc vendor_string\n\n\tcc=\"${found_cc}\"\n\n\t# Query the full vendor version string output. This includes the\n\t# version number along with (potentially) a bunch of other textual\n\t# clutter.\n\t# NOTE: This maybe should use merged stdout/stderr rather than only\n\t# stdout. But it works for now.\n\tvendor_string=\"$(${cc} --version 2>/dev/null)\"\n\n\t# Query the compiler \"vendor\" (ie: the compiler's simple name) and\n\t# isolate the version number.\n\t# The last part ({ read first rest ; echo $first ; }) is a workaround\n\t# to OS X's egrep only returning the first match.\n\tcc_vendor=$(echo \"${vendor_string}\" |\n\t            grep -oE 'icc|gcc|clang|nvc|emcc|pnacl|IBM|oneAPI|crosstool-NG|GCC' |\n\t            { read -r first rest ; echo \"${first}\"; })\n\n\t# AOCC version strings contain both \"clang\" and \"AOCC\" substrings, and\n\t# so we have perform a follow-up check to make sure cc_vendor gets set\n\t# correctly.\n\tif [[ ${vendor_string} = *AOCC* ]]; then\n\t\tcc_vendor=\"aocc\"\n\tfi\n\n\t# Detect armclang, which doesn't have a nice, unambiguous, one-word tag\n\tif [[ ${vendor_string} = *'Arm C/C++/Fortran Compiler'* ]]; then\n\t\tcc_vendor=\"armclang\"\n\tfi\n\n\t# Begin parsing cc_vendor for the version string.\n\n\tif [ \"${cc_vendor}\" = \"GCC\" ]; then\n\t\t# Conda gcc sometimes has GCC (all caps) in the version string\n\t\tcc_vendor=\"gcc\"\n\tfi\n\tif [ \"${cc_vendor}\" = \"crosstool-NG\" ]; then\n\t\t# Treat compilers built by crosstool-NG (for eg: conda) as gcc.\n\t\tcc_vendor=\"gcc\"\n\tfi\n\tif [[ ${cc_vendor} = icc || ${cc_vendor} = gcc ]]; then\n\n\t\tcc_version=$(${cc} -dumpversion)\n\n\telif [ \"${cc_vendor}\" = \"armclang\" ]; then\n\n\t\t# Treat armclang as regular clang.\n\t\tcc_vendor=\"clang\"\n\t\tcc_version=$(echo \"${vendor_string}\" \\\n\t\t             | grep -oE 'based on LLVM [0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t             | grep -oE               '[0-9]+\\.[0-9]+\\.?[0-9]*')\n\n\telif [ \"${cc_vendor}\" = \"clang\" ]; then\n\n\t\tcc_version=$(echo \"${vendor_string}\" \\\n\t\t             | grep -oE '(clang|LLVM) version [0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t             | grep -oE                      '[0-9]+\\.[0-9]+\\.?[0-9]*')\n\n\telif [ \"${cc_vendor}\" = \"aocc\" ]; then\n\n\t\t# Versions 2.0 and 2.1 had different version string formats from\n\t\t# 2.2 and later, so we have to handle them separately.\n\t\t# Examples:\n\t\t# AOCC.LLVM.2.0.0.B191.2019_07_19 clang version 8.0.0 (CLANG: Jenkins AOCC_2_0_0-Build#191) (based on LLVM AOCC.LLVM.2.0.0.B191.2019_07_19)\n\t\t# AOCC.LLVM.2.1.0.B1030.2019_11_12 clang version 9.0.0 (CLANG: Build#1030) (based on LLVM AOCC.LLVM.2.1.0.B1030.2019_11_12)\n\t\t# AMD clang version 10.0.0 (CLANG: AOCC_2.2.0-Build#93 2020_06_25) (based on LLVM Mirror.Version.10.0.0)\n\t\t# AMD clang version 11.0.0 (CLANG: AOCC_2.3.0-Build#85 2020_11_10) (based on LLVM Mirror.Version.11.0.0)\n\t\t# AMD clang version 12.0.0 (CLANG: AOCC_3.0.0-Build#2 2020_11_05) (based on LLVM Mirror.Version.12.0.0)\n\n\t\tif [[ ${vendor_string} = *AOCC.LLVM.2* ]]; then\n\n\t\t\t# Grep for the AOCC.LLVM.x.y.z substring first, and then isolate the\n\t\t\t# version number. Also, the string may contain multiple instances of\n\t\t\t# the version number, so only use the first occurrence.\n\t\t\tcc_version=$(echo \"${vendor_string}\" \\\n\t\t\t             | grep -oE 'AOCC.LLVM.[0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t\t             | grep -oE           '[0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t\t             | { read -r first rest ; echo \"${first}\"; })\n\t\telse\n\n\t\t\t# Grep for the AOCC_x.y.z substring first, and then isolate the\n\t\t\t# version number. As of this writing, these version strings don't\n\t\t\t# include multiple instances of the version, but we nonetheless\n\t\t\t# take only the first occurrence as a future-oriented safety\n\t\t\t# measure.\n\t\t\tcc_version=$(echo \"${vendor_string}\" \\\n\t\t\t             | grep -oE 'AOCC_[0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t\t             | grep -oE      '[0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t\t             | { read -r first rest ; echo \"${first}\"; })\n\t\tfi\n\n\telif [ \"${cc_vendor}\" = \"oneAPI\" ]; then\n\n\t\t# Treat Intel oneAPI's clang as clang, not icc.\n\t\tcc_vendor=\"clang\"\n\t\tcc_version=$(echo \"${vendor_string}\" \\\n\t\t             | grep -oE '[0-9]+\\.[0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t             | { read -r first rest ; echo \"${first}\"; })\n\n\telse\n\n\t\tcc_version=$(echo \"${vendor_string}\" \\\n\t\t             | grep -oE '[0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t             | { read -r first rest ; echo \"${first}\"; })\n\tfi\n\n\t# Parse the version number into its major, minor, and revision\n\t# components.\n\tcc_major=$(echo \"${cc_version}\" | cut -d. -f1)\n\tcc_minor=$(echo \"${cc_version}\" | cut -d. -f2)\n\tcc_revision=$(echo \"${cc_version}\" | cut -d. -f3)\n\n\t# gcc 7 introduced new behavior to -dumpversion whereby only the major\n\t# version component is output. However, as part of this change, gcc 7\n\t# also introduced a new option, -dumpfullversion, which is guaranteed to\n\t# always output the major, minor, and revision numbers. Thus, if we're\n\t# using gcc and its version is 7 or later, we re-query and re-parse the\n\t# version string.\n\tif [[ ${cc_vendor} = \"gcc\" && ${cc_major} -ge 7 ]]; then\n\n\t\t# Re-query the version number using -dumpfullversion.\n\t\tcc_version=$(${cc} -dumpfullversion)\n\n\t\t# And parse the result.\n\t\tcc_major=$(echo \"${cc_version}\" | cut -d. -f1)\n\t\tcc_minor=$(echo \"${cc_version}\" | cut -d. -f2)\n\t\tcc_revision=$(echo \"${cc_version}\" | cut -d. -f3)\n\tfi\n\n\techo \"${script_name}: found ${cc_vendor} version ${cc_version} (maj: ${cc_major}, min: ${cc_minor}, rev: ${cc_revision}).\"\n}\n\ncheck_compiler()\n{\n\tlocal cc\n\n\tcc=\"${found_cc}\"\n\n\t#\n\t# Compiler requirements\n\t#\n\t# General:\n\t#\n\t#   icc 15+, gcc 4.7+, clang 3.3+\n\t#\n\t# Specific:\n\t#\n\t#   skx: icc 15.0.1+, gcc 6.0+, clang 3.9+\n\t#   knl: icc 14.0.1+, gcc 5.0+, clang 3.9+\n\t#   haswell: any\n\t#   sandybridge: any\n\t#   penryn: any\n\t#\n\t#   zen: gcc 6.0+[1], clang 4.0+\n\t#   zen2: gcc 6.0+[1], clang 4.0+\n\t#   zen3: gcc 6.0+[1], clang 4.0+\n\t#   excavator: gcc 4.9+, clang 3.5+\n\t#   steamroller: any\n\t#   piledriver: any\n\t#   bulldozer: any\n\t#\n\t#   cortexa57: any\n\t#   cortexa15: any\n\t#   cortexa9: any\n\t#\n\t#   armsve: clang11+, gcc10+\n\t#\n\t#   generic: any\n\t#\n\t# Note: These compiler requirements were originally modeled after similar\n\t# requirements encoded into TBLIS's configure.ac [2].\n\t#\n\t# [1] While gcc 6.0 or newer is needed for zen support (-march=znver1),\n\t#     we relax this compiler version constraint a bit by targeting bdver4\n\t#     and then disabling the instruction sets that were removed in the\n\t#     transition from bdver4 to znver1. (See config/zen/make_defs.mk for\n\t#     the specific compiler flags used.)\n\t# [2] https://github.com/devinamatthews/tblis/\n\t#\n\n\techo \"${script_name}: checking for blacklisted configurations due to ${cc} ${cc_version}.\"\n\n\t# Fixme: check on a64fx, neoverse, and others\n\n\t# gcc\n\tif [[ ${cc_vendor} = gcc ]]; then\n\n\t\tif [[ ${cc_major} -lt 4 ]]; then\n\t\t\techoerr_unsupportedcc\n\t\tfi\n\t\tif [[ ${cc_major} -eq 4 ]]; then\n\t\t\tblacklistcc_add \"knl\"\n\t\t\tif [[ ${cc_minor} -lt 7 ]]; then\n\t\t\t\techoerr_unsupportedcc\n\t\t\tfi\n\t\t\tif [[ ${cc_minor} -lt 9 ]]; then\n\t\t\t\tblacklistcc_add \"excavator\"\n\t\t\t\tblacklistcc_add \"zen\"\n\t\t\tfi\n\t\tfi\n\t\tif [[ ${cc_major} -lt 5 ]]; then\n\t\t\tblacklistcc_add \"knl\"\n\t\tfi\n\t\tif [[ ${cc_major} -lt 6 ]]; then\n\t\t\t# Normally, zen would be blacklisted for gcc prior to 6.0.\n\t\t\t# However, we have a workaround in place in the zen\n\t\t\t# configuration's make_defs.mk file that starts with bdver4\n\t\t\t# and disables the instructions that were removed in znver1.\n\t\t\t# Thus, this \"blacklistcc_add\" statement has been moved above.\n\t\t\t#blacklistcc_add \"zen\"\n\t\t\tblacklistcc_add \"skx\"\n\t\t\t# gcc 5.x may support POWER9 but it is unverified.\n\t\t\tblacklistcc_add \"power9\"\n\t\tfi\n\t\tif [[ ${cc_major} -lt 10 ]]; then\n\t\t\tblacklistcc_add \"armsve\"\n\t\tfi\n\tfi\n\n\t# icc\n\tif [[ ${cc_vendor} = icc ]]; then\n\n\t\tif [[ ${cc_major} -lt 15 ]]; then\n\t\t\techoerr_unsupportedcc\n\t\tfi\n\t\tif [[ ${cc_major} -eq 15 ]]; then\n\t\t\tif [[ ${cc_revision} -lt 1 ]]; then\n\t\t\t\tblacklistcc_add \"skx\"\n\t\t\tfi\n\t\tfi\n\t\tif [[ ${cc_major} -eq 18 ]]; then\n\t\t\techo \"${script_name}: ${cc} ${cc_version} is known to cause erroneous results. See https://github.com/flame/blis/issues/371 for details.\"\n\t\t\tblacklistcc_add \"knl\"\n\t\t\tblacklistcc_add \"skx\"\n\t\tfi\n\t\tif [[ ${cc_major} -ge 19 ]]; then\n\t\t\techo \"${script_name}: ${cc} ${cc_version} is known to cause erroneous results. See https://github.com/flame/blis/issues/371 for details.\"\n\t\t\techoerr_unsupportedcc\n\t\tfi\n\tfi\n\n\t# clang\n\tif [[ ${cc_vendor} = clang ]]; then\n\t\tif [[ ${vendor_string} = *Apple* ]]; then\n\t\t\tif [[ ${cc_major} -lt 5 ]]; then\n\t\t\t\techoerr_unsupportedcc\n\t\t\tfi\n\t\t\t# See https://en.wikipedia.org/wiki/Xcode#Toolchain_versions\n\t\t\tif [[ ${cc_major} -eq 5 ]]; then\n\t\t\t\t# Apple clang 5.0 is clang 3.4svn\n\t\t\t\tblacklistcc_add \"excavator\"\n\t\t\t\tblacklistcc_add \"zen\"\n\t\t\tfi\n\t\t\tif [[ ${cc_major} -lt 7 ]]; then\n\t\t\t\tblacklistcc_add \"knl\"\n\t\t\t\tblacklistcc_add \"skx\"\n\t\t\tfi\n\t\telse\n\t\t\tif [[ ${cc_major} -lt 3 ]]; then\n\t\t\t\techoerr_unsupportedcc\n\t\t\tfi\n\t\t\tif [[ ${cc_major} -eq 3 ]]; then\n\t\t\t\tif [[ ${cc_minor} -lt 3 ]]; then\n\t\t\t\t\techoerr_unsupportedcc\n\t\t\t\tfi\n\t\t\t\tif [[ ${cc_minor} -lt 5 ]]; then\n\t\t\t\t\tblacklistcc_add \"excavator\"\n\t\t\t\t\tblacklistcc_add \"zen\"\n\t\t\t\tfi\n\t\t\t\tif [[ ${cc_minor} -lt 9 ]]; then\n\t\t\t\t\tblacklistcc_add \"knl\"\n\t\t\t\t\tblacklistcc_add \"skx\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\tif [[ ${cc_major} -lt 4 ]]; then\n\t\t\t\t# See comment above regarding zen support.\n\t\t\t\t#blacklistcc_add \"zen\"\n\t\t\t\t: # explicit no-op since bash can't handle empty loop bodies.\n\t\t\tfi\n\t\t\tif [[ ${cc_major} -lt 11 ]]; then\n\t\t\t\tblacklistcc_add \"armsve\"\n\t\t\tfi\n\t\tfi\n\tfi\n}\n\ncheck_compiler_version_ranges()\n{\n\tlocal cc\n\n\tcc=\"${found_cc}\"\n\n\t#\n\t# We check for various compiler version ranges that may cause us\n\t# issues in properly supporting those compiler versions within the\n\t# BLIS build system.\n\t#\n\t# range: gcc < 4.9.0 (ie: 4.8.5 or older)\n\t# variable: gcc_older_than_4_9_0\n\t# comments:\n\t#   These older versions of gcc may support microarchitectures such as\n\t#   sandybridge, but the '-march=' flag uses a different label syntax.\n\t#   In newer versions, '-march=sandybridge' is the preferred syntax [1].\n\t#   However, in older versions, the syntax for the same compiler option\n\t#   is '-march=corei7-avx' [2].\n\t#\n\t#   [1] https://gcc.gnu.org/onlinedocs/gcc-4.9.0/gcc/i386-and-x86-64-Options.html#i386-and-x86-64-Options\n\t#   [2] https://gcc.gnu.org/onlinedocs/gcc-4.8.5/gcc/i386-and-x86-64-Options.html#i386-and-x86-64-Options\n\t#\n\t# range: gcc < 6.1 (ie: 5.5 or older)\n\t# variable: gcc_older_than_6_1_0\n\t# comments:\n\t#   These older versions of gcc do not explicitly support the Zen (Zen1)\n\t#   microarchitecture; the newest microarchitectural value understood by\n\t#   these versions is '-march=bdver4' [3]. However, basic support for these\n\t#   older versions can be attained in a roundabout way by starting with the\n\t#   instruction sets enabled by '-march=bdver4' and then disabling the\n\t#   instruction sets that were removed in the transition from Excavator to\n\t#   Zen, namely: FMA4, TBM, XOP, and LWP. Newer versions of gcc support Zen\n\t#   via the '-march=znver1' option [4].\n\t#\n\t#   [3] https://gcc.gnu.org/onlinedocs/gcc-5.5.0/gcc/x86-Options.html#x86-Options\n\t#   [4] https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/x86-Options.html#x86-Options\n\t#\n\t# range: gcc < 9.1 (ie: 8.3 or older)\n\t# variable: gcc_older_than_9_1_0\n\t# comments:\n\t#   These older versions of gcc do not explicitly support the Zen2\n\t#   microarchitecture; the newest microarchitectural value understood by\n\t#   these versions is either '-march=znver1' (if !gcc_older_than_6_1_0) [5]\n\t#   or '-march=bdver4' (if gcc_older_than_6_1_0) [3]. If gcc is 6.1 or\n\t#   newer, '-march=znver1' may be used (since the instruction sets it\n\t#   enables are a subset of those enabled by '-march=znver2'); otherwise,\n\t#   '-march=bdver4' must be used in conjuction with disabling the\n\t#   instruction sets that were removed in the transition from Excavator to\n\t#   Zen, as described in the section above for gcc_older_than_6_1_0.\n\t#   Newer versions of gcc support Zen2 via the '-march=znver2' option [6].\n\t#\n\t#   [5] https://gcc.gnu.org/onlinedocs/gcc-8.3.0/gcc/x86-Options.html#x86-Options\n\t#   [6] https://gcc.gnu.org/onlinedocs/gcc-9.4.0/gcc/x86-Options.html#x86-Options\n\t#\n\t# range: gcc < 10.3 (ie: 9.4 or older)\n\t# variable: gcc_older_than_10_3_0\n\t# comments:\n\t#   These older versions of gcc do not explicitly support the Zen3\n\t#   microarchitecture; the newest microarchitectural value understood by\n\t#   these versions is '-march=znver2' (if !gcc_older_than_9_1_0) [7].\n\t#   Newer versions of gcc support Zen3 via the '-march=znver3' option [8].\n\t#\n\t#   [7] https://gcc.gnu.org/onlinedocs/gcc-9.4.0/gcc/x86-Options.html#x86-Options\n\t#   [8] https://gcc.gnu.org/onlinedocs/gcc-10.3.0/gcc/x86-Options.html#x86-Options\n\t#\n\n\tgcc_older_than_4_9_0='no'\n\tgcc_older_than_6_1_0='no'\n\tgcc_older_than_9_1_0='no'\n\tgcc_older_than_10_3_0='no'\n\n\tclang_older_than_9_0_0='no'\n\tclang_older_than_12_0_0='no'\n\n\taocc_older_than_2_0_0='no'\n\taocc_older_than_3_0_0='no'\n\n\techo \"${script_name}: checking ${cc} ${cc_version} against known consequential version ranges.\"\n\n\t# gcc\n\tif [[ ${cc_vendor} = gcc ]]; then\n\n\t\t# Check for gcc < 4.9.0 (ie: 4.8.5 or older).\n\t\tif [[ ${cc_major} -eq 4 ]]; then\n\t\t\tif [[ ${cc_minor} -lt 9 ]]; then\n\t\t\t\techo \"${script_name}: note: found ${cc} version older than 4.9.0.\"\n\t\t\t\tgcc_older_than_4_9_0='yes'\n\t\t\tfi\n\t\tfi\n\n\t\t# Check for gcc < 6.1.0 (ie: 5.5 or older).\n\t\tif [[ ${cc_major} -lt 6 ]]; then\n\t\t\techo \"${script_name}: note: found ${cc} version older than 6.1.\"\n\t\t\tgcc_older_than_6_1_0='yes'\n\t\tfi\n\n\t\t# Check for gcc < 9.1.0 (ie: 8.3 or older).\n\t\tif [[ ${cc_major} -lt 9 ]]; then\n\t\t\techo \"${script_name}: note: found ${cc} version older than 9.1.\"\n\t\t\tgcc_older_than_9_1_0='yes'\n\t\tfi\n\n\t\t# Check for gcc < 10.3.0 (ie: 10.2 or older).\n\t\tif [[ ( ${cc_major} -lt 10 ) || ( ${cc_major} -eq 10 && ${cc_minor} -lt 3 ) ]]; then\n\t\t\techo \"${script_name}: note: found ${cc} version older than 10.3.\"\n\t\t\tgcc_older_than_10_3_0='yes'\n\t\tfi\n\tfi\n\n\t# icc\n\tif [[ ${cc_vendor} = icc ]]; then\n\t\t:\n\tfi\n\n\t# clang\n\tif [[ ${cc_vendor} = clang ]]; then\n\n\t\t# Check for clang < 9.0.0.\n\t\tif [[ ${cc_major} -lt 9 ]]; then\n\t\t\techo \"${script_name}: note: found ${cc} version older than 9.0.\"\n\t\t\tclang_older_than_9_0_0='yes'\n\t\tfi\n\n\t\t# Check for clang < 12.0.0.\n\t\tif [[ ${cc_major} -lt 12 ]]; then\n\t\t\techo \"${script_name}: note: found ${cc} version older than 12.0.\"\n\t\t\tclang_older_than_12_0_0='yes'\n\t\tfi\n\tfi\n\n\t# aocc\n\tif [[ ${cc_vendor} = aocc ]]; then\n\n\t\t# Check for aocc < 2.0.0.\n\t\tif [[ ${cc_major} -lt 2 ]]; then\n\t\t\techo \"${script_name}: note: found ${cc} version older than 2.0.\"\n\t\t\taocc_older_than_2_0_0='yes'\n\t\tfi\n\n\t\t# Check for aocc < 3.0.0.\n\t\tif [[ ${cc_major} -lt 3 ]]; then\n\t\t\techo \"${script_name}: note: found ${cc} version older than 3.0.\"\n\t\t\taocc_older_than_3_0_0='yes'\n\t\tfi\n\tfi\n}\n\ncheck_assembler()\n{\n\tlocal cc cflags asm_fp\n\n\tcc=\"${found_cc}\"\n\n\t# The directory where the assembly files will be.\n\tasm_dir=${asm_dir-${dist_path}/build}\n\n\t# Most of the time, we won't need any additional compiler flags.\n\tcflags=\"\"\n\n\techo \"${script_name}: checking for blacklisted configurations due to as ${bu_version}.\"\n\n\t#\n\t# Check support for FMA4 (amd: bulldozer).\n\t#\n\tasm_fp=$(find \"${asm_dir}\" -name \"fma4.s\")\n\tknows_fma4=$(try_assemble \"${cc}\" \"${cflags}\" \"${asm_fp}\")\n\n\tif [[ ${knows_fma4} = no ]]; then\n\t\tblacklistbu_add \"bulldozer\"\n\tfi\n\n\t#\n\t# Check support for AVX (intel: sandybridge+, amd: piledriver+).\n\t#\n\tasm_fp=$(find \"${asm_dir}\" -name \"avx.s\")\n\tknows_avx=$(try_assemble \"${cc}\" \"${cflags}\" \"${asm_fp}\")\n\n\tif [[ ${knows_avx} = no ]]; then\n\t\tblacklistbu_add \"sandybridge\"\n\tfi\n\n\t#\n\t# Check support for FMA3 (intel: haswell+, amd: piledriver+).\n\t#\n\tasm_fp=$(find \"${asm_dir}\" -name \"fma3.s\")\n\tknows_fma3=$(try_assemble \"${cc}\" \"${cflags}\" \"${asm_fp}\")\n\n\tif [[ ${knows_fma3} = no ]]; then\n\t\tblacklistbu_add \"haswell\"\n\t\tblacklistbu_add \"piledriver\"\n\t\tblacklistbu_add \"steamroller\"\n\t\tblacklistbu_add \"excavator\"\n\t\tblacklistbu_add \"skx\"\n\tfi\n\n\t#\n\t# Check support for AVX-512f (knl, skx).\n\t#\n\n\t# The assembler on OS X won't recognize AVX-512 without help.\n\tif [ \"${cc_vendor}\" == \"clang\" ]; then\n\t\tcflags=\"-march=knl\"\n\tfi\n\n\tasm_fp=$(find \"${asm_dir}\" -name \"avx512f.s\")\n\tknows_avx512f=$(try_assemble \"${cc}\" \"${cflags}\" \"${asm_fp}\")\n\n\tif [[ ${knows_avx512f} = no ]]; then\n\t\tblacklistbu_add \"knl\"\n\t\tblacklistbu_add \"skx\"\n\tfi\n\n\t#\n\t# Check support for AVX-512dq (skx).\n\t#\n\n\t# The assembler on OS X won't recognize AVX-512 without help.\n\tif [ \"${cc_vendor}\" == \"clang\" ]; then\n\t\tcflags=\"-march=skylake-avx512\"\n\tfi\n\n\tasm_fp=$(find \"${asm_dir}\" -name \"avx512dq.s\")\n\tknows_avx512dq=$(try_assemble \"${cc}\" \"${cflags}\" \"${asm_fp}\")\n\n\tif [[ ${knows_avx512dq} = no ]]; then\n\t\tblacklistbu_add \"skx\"\n\tfi\n}\n\ncheck_os()\n{\n\tif [[ \"$(uname -s)\" == \"Darwin\" && \"$(uname -m)\" == \"arm64\" ]]; then\n\t\tblacklistos_add \"armsve\"\n\tfi\n}\n\ntry_assemble()\n{\n\tlocal cc cflags asm_src asm_base asm_bin rval\n\n\tcc=\"$1\"\n\tcflags=\"$2\"\n\tasm_src=\"$3\"\n\n\t# Construct the filename to the .o file corresponding to asm_src.\n\t# (Strip the filepath, then the file extension, and then add \".o\".)\n\tasm_base=${asm_src##*/}\n\tasm_base=${asm_base%.*}\n\tasm_bin=\"${asm_base}.o\"\n\n\t# Try to assemble the file.\n\t# shellcheck disable=2086\n\t\"${cc}\" ${cflags} -c \"${asm_src}\" -o \"${asm_bin}\" > /dev/null 2>&1\n\n\tif [ \"$?\" == 0 ]; then\n\t\trval='yes'\n\telse\n\t\trval='no'\n\tfi\n\n\t# Remove the object file.\n\trm -f \"${asm_bin}\"\n\n\t# Return the result.\n\techo \"${rval}\"\n}\n\nset_default_version()\n{\n\tlocal gitdir version_file gd_stderr git_describe_str git_error new_version_str\n\n\tgitdir='.git'\n\n\t# The path to the version file.\n\tversion_file=$1\n\n\techo \"${script_name}: determining default version string.\"\n\n\t# Check if the .git dir exists; if it does not, we do nothing.\n\tif [ -d \"${dist_path}/${gitdir}\" ]; then\n\n\t\techo \"${script_name}: found '${gitdir}' directory; assuming git clone.\"\n\n\t\techo \"${script_name}: executing: git describe --tags.\"\n\n\t\tgd_stderr=\"git_describe_stderr.txt\"\n\n\t\t# Query git for the version string, which is simply the current tag,\n\t\t# followed by a number signifying how many commits have transpired\n\t\t# since the tag, followed by a 'g' and a shortened hash tab. Capture\n\t\t# stderr to a file.\n\t\tgit_describe_str=$(git -C \"${dist_path}\" describe --tags 2> \"${gd_stderr}\")\n\n\t\t# Pull in whatever error message was generated, if any, and delete\n\t\t# the file.\n\t\tgit_error=$(<\"${gd_stderr}\")\n\n\t\t# Remove the stderr file.\n\t\trm -f \"${gd_stderr}\"\n\n\t\t# If git returned an error, don't do anything.\n\t\tif [ -n \"${git_error}\" ]; then\n\n\t\t\techo \"${script_name}: git returned an error: '${git_error}'.\"\n\t\t\techo \"${script_name}: using string from unmodified version file.\"\n\n\t\t\t# Use what's in the version file as-is.\n\t\t\tversion=$(<\"${version_file}\")\n\t\telse\n\n\t\t\techo \"${script_name}: got back ${git_describe_str}.\"\n\n\t\t\t# Strip off the commit hash label.\n\t\t\tnew_version_str=$(echo \"${git_describe_str}\" | cut -d- -f-2)\n\n\t\t\techo \"${script_name}: truncating to ${new_version_str}.\"\n\n\t\t\t# Write the new version string to the version file.\n\t\t\t#echo \"${new_version_str}\" > ${version_file}\n\n\t\t\t# Set the version variable.\n\t\t\tversion=\"${new_version_str}\"\n\t\tfi\n\telse\n\n\t\techo \"${script_name}: could not find '${gitdir}' directory; using unmodified version file.\"\n\n\t\t# Use what's in the version file as-is.\n\t\tversion=$(<\"${version_file}\")\n\tfi\n}\n\nselect_tool_w_env()\n{\n\tlocal search_list env_var env_str tool_str found_var\n\tlocal _the_tool\n\n\t# Example calling sequence:\n\t#\n\t#  select_tool_w_env \"${cc_search_list}\" \"${CC}\" \"CC\" \"C compiler\" \"yes\" found_cc\n\t#\n\n\tsearch_list=\"$1\" # the tool's default search list.\n\tenv_var=\"$2\"     # the value of the environment variable for this tool.\n\tenv_str=\"$3\"     # a string naming the source of env_var.\n\ttool_str=\"$4\"    # a human-readable string identifying the tool.\n\tis_required=\"$5\" # is it fatal if env_var doesn't exist/work? (yes or no)\n\tfound_var=\"$6\"   # the variable into which to save the selected tool.\n\n\t# If the environment variable contains something, verify that it exists. If\n\t# it is unset or empty, we proceed with the default search list.\n\tif [ -n \"${env_var}\" ]; then\n\n\t\techo \"${script_name}: user specified a ${tool_str} via ${env_str} (${env_var}).\"\n\n\t\t# Map the tool (via its canonical environment variable form) to the set\n\t\t# of options we should use to check that it is working and available.\n\t\tthe_flags=$(get_tool_checkflags \"${env_str}\")\n\n\t\t# Check that the tool works with at least one of the flags in the_flags\n\t\t# the_flags (or, if the_flags is empty, check that the tool exists).\n\t\trval=$(check_tool \"${env_var}\" \"${the_flags}\")\n\n\t\t# If check_tool() returns 0, we're done.\n\t\tif [ \"${rval}\" == \"0\" ]; then\n\t\t\t_the_tool=\"${env_var}\"\n\t\tfi\n\n\t\t# Copy the result into the variable specified by found_var.\n\t\teval \"${found_var}=\\\"${_the_tool}\\\"\"\n\n\t\t# If the tool specified by env_var doesn't exist, throw a tantrum.\n\t\tif [ -z \"${_the_tool}\" ]; then\n\n\t\t\techo \"${script_name}: *** Could not find the ${tool_str} specified via ${env_str} ('${env_var}').\"\n\n\t\t\t# Whether the tantrum is fatal depends on the is_required argument.\n\t\t\tif [ \"${is_required}\" == \"yes\" ]; then\n\t\t\t\techo \"${script_name}: *** A working ${tool_str} is required. Please set ${env_str}\"\n\t\t\t\techo \"${script_name}: *** to a ${tool_str} that exists (or unset ${env_str}).\"\n\t\t\t\texit 1\n\t\t\telse\n\t\t\t\techo \"${script_name}: *** Note that a ${tool_str} will not be available.\"\n\n\t\t\t\t# Set the found_var variable to *something* so that the output\n\t\t\t\t# makefile fragment contains a record that the tool wasn't found.\n\t\t\t\teval \"${found_var}=\\\"${env_str}\\\"-not-found\"\n\t\t\tfi\n\t\telse\n\t\t\t# The user-specified tool was found.\n\t\t\techo \"${script_name}: ${_the_tool} exists and appears to work.\"\n\t\t\techo \"${script_name}: using '${_the_tool}' as ${tool_str}.\"\n\t\tfi\n\n\telse\n\n\t\techo \"${script_name}: ${tool_str} search list is: ${search_list}.\"\n\n\t\t# Search for a working tool from the search list.\n\t\t_the_tool=$(select_tool \"${search_list}\" \"${env_str}\")\n\n\t\t# Copy the result into the variable specified by found_var.\n\t\teval \"${found_var}=\\\"${_the_tool}\\\"\"\n\n\t\t# If we didn't find a working tool from the search list, throw a tantrum.\n\t\tif [ -z \"${_the_tool}\" ]; then\n\n\t\t\techo \"${script_name}: *** Could not find a ${tool_str} from the search list.\"\n\n\t\t\t# Whether the tantrum is fatal depends on the is_required argument.\n\t\t\tif [ \"${is_required}\" == \"yes\" ]; then\n\t\t\t\techo \"${script_name}: *** A working ${tool_str} is required. Cannot continue.\"\n\t\t\t\texit 1\n\t\t\telse\n\t\t\t\techo \"${script_name}: *** Note that a ${tool_str} will not be available.\"\n\n\t\t\t\t# Set the found_var variable to *something* so that the output\n\t\t\t\t# makefile fragment contains a record that the tool wasn't found.\n\t\t\t\teval \"${found_var}=\\\"${env_str}-not-found\\\"\"\n\t\t\tfi\n\t\telse\n\t\t\t# A tool from the search list was found.\n\t\t\techo \"${script_name}: found '${_the_tool}'.\"\n\t\t\techo \"${script_name}: using '${_the_tool}' as ${tool_str}.\"\n\t\tfi\n\tfi\n}\n\nselect_tool()\n{\n\tlocal search_list env_str\n\tlocal the_tool tool the_flags rval\n\n\t# This is the list of tools to search for, and the order in which\n\t# to search for them.\n\tsearch_list=\"$1\"\n\n\t# This is the name of the environment variable associated with the tool. For\n\t# example, if search_list is a list of C compilers, env_str will be \"CC\".\n\tenv_str=\"$2\"\n\n\t# Initialize our selected tool to empty.\n\tthe_tool=\"\"\n\n\t# Try each tool in the list and select the first one we find that works.\n\tfor tool in ${search_list}; do\n\n\t\t# Map each tool (via its canonical environment variable form) to the set\n\t\t# of options we should use to check that it is working and available.\n\t\tthe_flags=$(get_tool_checkflags \"${env_str}\")\n\n\t\t# Check that the tool works with at least one of the flags in the_flags\n\t\t# the_flags (or, if the_flags is empty, check that the tool exists).\n\t\trval=$(check_tool \"${tool}\" \"${the_flags}\")\n\n\t\t# If check_tool() returns 0, we're done.\n\t\tif [ \"${rval}\" == \"0\" ]; then\n\t\t\tthe_tool=${tool}\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\t# Return the selected tool.\n\techo \"${the_tool}\"\n}\n\nget_tool_checkflags()\n{\n\tlocal env_str\n\tlocal allflags flaglist\n\n\t# The tool for which we will determine the flag/option to pass in\n\t# when testing that the tool works. Notice that it's not actually\n\t# the tool but rather its equivalent environment variable.\n\tenv_str=\"${1}\"\n\n\t# The default list of flags to use in most circumstances.\n\tallflags=\"--version -V -h\"\n\n\tif [ \"${os_name}\" = \"Linux\" ]; then\n\n\t\t# If we are on Linux, it is very likely that all the tools will respond\n\t\t# to at least one of the usual flags.\n\t\tflaglist=\"${allflags}\"\n\n\telse\n\n\t\t# If we are on Darwin/OSX/BSD or something else, we sometimes skip flag\n\t\t# checks. (Note that when the list of flags to check is empty, we end\n\t\t# up testing for the existence of the tool instead.)\n\t\tif   [[ ${env_str} = AR || ${env_str} = RANLIB ]]; then\n\n\t\t\t# AR, RANLIB may not respond to the normal flags on Darwin/OSX/BSD,\n\t\t\t# so all we can really do is check for their existence.\n\t\t\tflaglist=\"\"\n\t\telse\n\t\t\t# Even on Darwin/OSX/BSD, we expect that CC, CXX, FC, PYTHON will\n\t\t\t# respond to the typical flag checklist.\n\t\t\tflaglist=\"${allflags}\"\n\t\tfi\n\tfi\n\n\techo \"${flaglist}\"\n}\n\ncheck_tool()\n{\n\tlocal tool the_flags\n\tlocal rval opt toolpath\n\n\t# This is the name, or filepath, of the tool to check for.\n\ttool=\"$1\"\n\n\t# Some command line options to try to determine that the tool works.\n\tthe_flags=\"$2\"\n\n\t# Start with the assuming that the tool doesn't work/exist.\n\trval=1\n\n\tif [ -n \"${the_flags}\" ]; then\n\n\t\t# If the list of flags to check non-empty, we will iterate through the\n\t\t# list in search of a flag that works. Failure to find one that works\n\t\t# means the tool doesn't work (or, if the user specified the tool via\n\t\t# its environment variable, failure might mean that the tool doesn't\n\t\t# even exist).\n\n\t\t# Try each flag in the list of flags.\n\t\tfor opt in ${the_flags}; do\n\n\t\t\t# See if the tool responds to the current flag.\n\t\t\t${tool} ${opt} > /dev/null 2>&1\n\n\t\t\t# If the tool responded to the flag with a nominal error code of\n\t\t\t# 0, we found one that works and set rval accoringly.\n\t\t\tif [ \"$?\" == 0 ]; then\n\t\t\t\trval=0\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\telse\n\n\t\t# If the list of flags to check is empty, we interpret this as a\n\t\t# request to instead check for the existence of the tool.\n\n\t\t# Use 'which' to determine if the tool exists.\n\t\ttoolpath=\"$(command -v \"${tool}\" 2> /dev/null)\"\n\n\t\t# If the tool doesn't exist, we set rval accordingly.\n\t\tif [ -n \"${toolpath}\" ]; then\n\t\t\trval=0\n\t\tfi\n\tfi\n\n\t# Return the error code.\n\techo \"${rval}\"\n}\n\nbuild_and_check_configurations()\n{\n\t# Use the selected config name to look up the list of configurations\n\t# and kernels associated with that name.\n\t#config_list=${config_registry[${config_name}]}\n\t#kernel_list=${kernel_registry[${config_name}]}\n\tconfig_list=$(query_array \"config_registry\" \"${config_name}\")\n\tkernel_list=$(query_array \"kernel_registry\" \"${config_name}\")\n\n\t# Use the config_registry and kernel_registry to build a kconfig_registry\n\t# for the selected config_name.\n\tbuild_kconfig_registry \"${config_name}\"\n\n\t# Print the configuration list and kernel list, if requested.\n\tif [ \"${show_config_list}\" == \"1\" ]; then\n\n\t\techo \"${script_name}: configuration list:\"\n\t\t#for k in \"${!config_registry[@]}\"; do\n\t\tfor cr_var in ${!config_registry_*}; do\n\n\t\t\t#v=${config_registry[$k]}\n\t\t\tk=${cr_var##config_registry_}; v=${!cr_var}\n\n\t\t\techo \"${script_name}:   $k: ${v}\"\n\t\tdone\n\n\t\techo \"${script_name}: kernel list:\"\n\t\t#for k in \"${!kernel_registry[@]}\"; do\n\t\tfor kr_var in ${!kernel_registry_*}; do\n\n\t\t\t#v=${kernel_registry[$k]}\n\t\t\tk=${kr_var##kernel_registry_}; v=${!kr_var}\n\n\t\t\techo \"${script_name}:   $k: ${v}\"\n\t\tdone\n\n\t\techo \"${script_name}: kernel-to-config map for '${config_name}':\"\n\t\t#for k in \"${!kconfig_registry[@]}\"; do\n\t\tfor kc_var in ${!kconfig_registry_*}; do\n\n\t\t\t#v=${kconfig_registry[$k]}\n\t\t\tk=${kc_var##kconfig_registry_}; v=${!kc_var}\n\n\t\t\techo \"${script_name}:   $k: ${v}\"\n\t\tdone\n\tfi\n\n\t# For each kernel in the kernel list, reduce the list of associated\n\t# sub-configurations (in the kconfig_registry) to a singleton using\n\t# the following rules:\n\t# 1. If the list is a singleton, use that name.\n\t# 2. If the list contains a sub-configuration name that matches the\n\t#    kernel name, use that name.\n\t# 3. Otherwise, use the first name in the list.\n\t# We use the chosen singleton to ceate a \"kernel:subconfig\" pair, which\n\t# we accumulate into a list. This list is the kernel-to-config map, or\n\t# kconfig_map.\n\n\t# We use a sorted version of kernel_list so that it ends up matching the\n\t# display order of the kconfig_registry above.\n\t# shellcheck disable=2086\n\tkernel_list_sort=$(echo ${kernel_list} | xargs -n1 | sort -u)\n\n\tkconfig_map=\"\"\n\tfor kernel in ${kernel_list_sort}; do\n\n\t\t#configs=\"${kconfig_registry[$kernel]}\"\n\t\tconfigs=$(query_array \"kconfig_registry\" \"${kernel}\")\n\n\t\thas_one_kernel=$(is_singleton \"${configs}\")\n\t\tcontains_kernel=$(is_in_list \"${kernel}\" \"${configs}\")\n\n\t\t# Check if the list is a singleton.\n\t\tif [ \"${has_one_kernel}\" == \"true\" ]; then\n\n\t\t\treducedclist=\"${configs}\"\n\n\t\t# Check if the list contains a sub-config name that matches the kernel.\n\t\telif [ \"${contains_kernel}\" == \"true\" ]; then\n\n\t\t\treducedclist=\"${kernel}\"\n\n\t\t# Otherwise, use the last name.\n\t\telse\n\n\t\t\tlast_config=${configs##* }\n\t\t\treducedclist=\"${last_config}\"\n\t\tfi\n\n\t\t# Create a new \"kernel:subconfig\" pair and add it to the kconfig_map\n\t\t# list, removing whitespace.\n\t\tnew_pair=\"${kernel}:${reducedclist}\"\n\t\tkconfig_map=$(canonicalize_ws \"${kconfig_map} ${new_pair}\")\n\tdone\n\n\tif [ \"${show_config_list}\" == \"1\" ]; then\n\n\t\techo \"${script_name}: kernel-to-config map for '${config_name}' (chosen pairs):\"\n\t\tfor k in ${kconfig_map}; do\n\t\t\techo \"${script_name}:   $k\"\n\t\tdone\n\tfi\n\n\n\techo \"${script_name}: checking configuration against contents of '${registry_file}'.\"\n\n\t# First, ensure that the config name is registered (ie: it is present\n\t# in the config_registry file).\n\tif [ -z \"${config_list}\" ]; then\n\n\t\t# NOTE: This branch should never execute when using auto-detection,\n\t\t# but we have it here just in case.\n\t\tif [[ $1 = auto ]]; then\n\n\t\t\techo \"${script_name}: 'auto-detected configuration '${config_name}' is NOT registered!\"\n\t\t\techo \"${script_name}: \"\n\t\t\techo \"${script_name}: *** Cannot continue with unregistered configuration '${config_name}'. ***\"\n\t\t\techo \"${script_name}: \"\n\t\t\texit 1;\n\n\t\telse\n\n\t\t\t# At this point, we know: (a) config_list is empty; and (b) the user\n\t\t\t# requested manual configuration. If the config_name given by the\n\t\t\t# user is present in the configuration blacklist (config_blist),\n\t\t\t# then we can deduce why the config_list is empty: because the only\n\t\t\t# subconfig implied by config_name is blacklisted. Thus, we cannot\n\t\t\t# proceed.\n\n\t\t\tif [[ $(is_in_list \"${config_name}\" \"${config_blist}\") = true ]]; then\n\n\t\t\t\techo \"${script_name}: 'user-specified configuration '${config_name}' is blacklisted!\"\n\t\t\t\techo \"${script_name}: \"\n\t\t\t\techo \"${script_name}: *** Cannot continue with blacklisted configuration '${config_name}'. ***\"\n\t\t\t\techo \"${script_name}: *** Try updating your compiler and/or assembler (binutils) versions. ***\"\n\t\t\t\techo \"${script_name}: \"\n\t\t\t\texit 1;\n\t\t\telse\n\n\t\t\t\t# If config_name is NOT present in config_blist, then we know\n\t\t\t\t# that config_list is empty simply because config_name is\n\t\t\t\t# unregistered.\n\n\t\t\t\techo \"${script_name}: 'user-specified configuration '${config_name}' is NOT registered!\"\n\t\t\t\techo \"${script_name}: \"\n\t\t\t\techo \"${script_name}: *** Cannot continue with unregistered configuration '${config_name}'. ***\"\n\t\t\t\techo \"${script_name}: \"\n\t\t\t\texit 1;\n\t\t\tfi\n\t\tfi\n\telse\n\n\t\t# This branch executes when the configuration is found to be present\n\t\t# (i.e. registered) in the config_registry file.\n\n\t\techo \"${script_name}: configuration '${config_name}' is registered.\"\n\t\techo \"${script_name}: '${config_name}' is defined as having the following sub-configurations:\"\n\t\techo \"${script_name}:    ${config_list}\"\n\t\techo \"${script_name}: which collectively require the following kernels:\"\n\t\techo \"${script_name}:    ${kernel_list}\"\n\n\tfi\n\n\n\techo \"${script_name}: checking sub-configurations:\"\n\n\t# Now, verify that the constituent configurations associated with the\n\t# config name are all valid.\n\tfor conf in ${config_list}; do\n\n\t\t# First confirm that the current configuration is registered.\n\t\t#this_clist=${config_registry[${conf}]}\n\t\tthis_clist=$(query_array \"config_registry\" \"${conf}\")\n\n\t\t# If the config_list associated with conf is empty, then it was\n\t\t# never entered into the config_registry to begin with. Thus,\n\t\t# conf must be unregistered.\n\t\tif [ -z \"${this_clist}\" ]; then\n\t\t\techo \"${script_name}: '${conf}' is NOT registered!\"\n\t\t\techo \"${script_name}: \"\n\t\t\techo \"${script_name}: *** Cannot continue with unregistered configuration '${conf}'. ***\"\n\t\t\techo \"${script_name}: \"\n\t\t\texit 1;\n\t\telse\n\t\t\techo -n \"${script_name}:   '${conf}' is registered.\"\n\t\tfi\n\n\t\t# Then confirm that the current sub-configuration directory exists.\n\t\tif [ ! -d \"${config_dirpath}/${conf}\" ]; then\n\t\t\techo \"..but does NOT exist!\"\n\t\t\techo \"${script_name}: \"\n\t\t\techo \"${script_name}: *** Cannot continue with nonexistent configuration '${conf}'. ***\"\n\t\t\techo \"${script_name}: \"\n\t\t\texit 1;\n\t\telse\n\t\t\techo \"..and exists.\"\n\t\tfi\n\tdone\n\n\n\techo \"${script_name}: checking sub-configurations' requisite kernels:\"\n\n\t# Also, let's verify that the requisite kernel sets associated with\n\t# the config name all correspond to directories that exist.\n\tfor kernel in ${kernel_list}; do\n\n\t\techo -n \"${script_name}:   '${kernel}' kernels...\"\n\n\t\t# Confirm that the current kernel sub-directory exists.\n\t\tif [ ! -d \"${kernels_dirpath}/${kernel}\" ]; then\n\t\t\techo \"do NOT exist!\"\n\t\t\techo \"${script_name}: \"\n\t\t\techo \"${script_name}: *** Cannot continue with nonexistent kernel '${kernel}'. ***\"\n\t\t\techo \"${script_name}: \"\n\t\t\texit 1;\n\t\telse\n\t\t\techo \"exist.\"\n\t\tfi\n\tdone\n}\n\ncheck_build_tools()\n{\n\t# -- Check the operating system --------------------------------------------\n\n\tos_name=$(uname -s)\n\tos_vers=$(uname -r)\n\techo \"${script_name}: detected ${os_name} kernel version ${os_vers}.\"\n\n\t# Define a single variable off of which we can branch to tell if we are\n\t# building for Windows.\n\tis_win=no\n\tif [[ $os_name == MSYS* ]] || \\\n\t   [[ $os_name == MINGW* ]]  || \\\n\t   [[ $os_name == CYGWIN* ]] ; then\n\t\tis_win=yes\n\tfi\n\n\n\t# -- Find a python interpreter ---------------------------------------------\n\n\t# Acquire the default python search order.\n\tpython_search_list=$(get_python_search_list)\n\n\t# Select a python interpreter from the default list, or from PYTHON if it\n\t# refers to a valid binary.\n\t# shellcheck disable=2153\n\tselect_tool_w_env \"${python_search_list}\" \"${PYTHON}\" \"PYTHON\" \\\n\t                  \"python interpreter\" \"yes\" found_python\n\n\t# -- Check the python version ----------------------------------------------\n\n\t# Check the python interpreter's version.\n\tget_python_version\n\tcheck_python\n\n\n\t# -- Find a C compiler -----------------------------------------------------\n\n\t# Acquire the default compiler search order. This will vary based on os_name.\n\tcc_search_list=$(get_cc_search_list)\n\n\t# Select a C compiler from the default list, or from CC if it refers to a\n\t# valid binary.\n\tselect_tool_w_env \"${cc_search_list}\" \"${CC}\" \"CC\" \\\n\t                  \"C compiler\" \"yes\" found_cc\n\n\t# Also check the compiler to see if we are (cross-)compiling for Windows\n\tif \"${found_cc}\" -dM -E - < /dev/null 2> /dev/null | grep -q _WIN32; then\n\t\tis_win=yes\n\tfi\n\tis_msvc=no\n\tif \"${found_cc}\" -dM -E - < /dev/null 2> /dev/null | grep -q _MSC_VER; then\n\t\tis_msvc=yes\n\tfi\n\n\n\t# -- Check the compiler version --------------------------------------------\n\n\t# Initialize the blacklist to empty.\n\tblacklist_init\n\n\t# Check the compiler's version. Certain versions of certain compilers\n\t# will preclude building certain sub-configurations, which are added\n\t# to a blacklist. We also make note of certain version ranges that\n\t# will be useful to know about later.\n\tget_compiler_version\n\tcheck_compiler\n\tcheck_compiler_version_ranges\n\n\t# Now check the assembler's ability to assemble code. Older versions\n\t# of binutils may not be aware of certain instruction sets. Those\n\t# sub-configurations employing kernels that use such instruction sets\n\t# will also be blacklisted.\n\tget_binutils_version\n\tcheck_assembler\n\n\t# Check if there is any incompatibility due to the operating system.\n\tcheck_os\n\n\t# Remove duplicates and whitespace from the blacklist.\n\tblacklist_cleanup\n\n\tif [ -n \"${config_blist}\" ]; then\n\n\t\techo \"${script_name}: configuration blacklist:\"\n\t\techo \"${script_name}:   ${config_blist}\"\n\tfi\n\n\n\t# -- Find a C++ compiler ---------------------------------------------------\n\n\t# Acquire the default C++ compiler search order. This will vary based on\n\t# os_name.\n\tcxx_search_list=$(get_cxx_search_list)\n\n\t# Select a C compiler from the default list, or from CC if it refers to a\n\t# valid binary.\n\tselect_tool_w_env \"${cxx_search_list}\" \"${CXX}\" \"CXX\" \\\n\t                  \"C++ compiler\" \"no\" found_cxx\n\n\n\t# -- Find a Fortran compiler -----------------------------------------------\n\n\t# Acquire the default Fortran compiler search order.\n\tfc_search_list=$(get_fc_search_list)\n\n\t# Select a Fortran compiler from the default list, or from FC if it refers\n\t# to a valid binary.\n\t# NOTE: A Fortran compiler is not necessary for building BLIS. The only\n\t# reason we might want to query it is to detect the style of returning\n\t# complex values from functions. The 'gnu' style returns complex values\n\t# from functions normally, via the C language return statement, while the\n\t# 'intel' style returns them in a \"hidden\" parameter (inserted by the\n\t# compiler) that precedes all other function parameters.\n\tselect_tool_w_env \"${fc_search_list}\" \"${FC}\" \"FC\" \\\n\t                  \"Fortran compiler\" \"no\" found_fc\n\n\n\t# -- Find a static library archiver ----------------------------------------\n\n\t# Acquire the default archiver search order.\n\tar_search_list=$(get_ar_search_list)\n\n\t# Select an archiver from the default list, or from AR if it refers\n\t# to a valid binary.\n\tselect_tool_w_env \"${ar_search_list}\" \"${AR}\" \"AR\" \\\n\t                  \"library archiver\" \"yes\" found_ar\n\n\n\t# -- Find an archive indexer -----------------------------------------------\n\n\t# Acquire the default archive indexer search order.\n\tranlib_search_list=$(get_ranlib_search_list)\n\n\t# Select an archive indexer from the default list, or from RANLIB if it\n\t# refers to a valid binary.\n\tselect_tool_w_env \"${ranlib_search_list}\" \"${RANLIB}\" \"RANLIB\" \\\n\t                  \"archive indexer\" \"yes\" found_ranlib\n}\n\ncreate_makefile_fragment()\n{\n\tlocal recursive\n\trecursive=\"-r\"\n\tif [ \"$4\" = \"false\" ]; then\n\t\trecursive=\"\"\n\tfi\n\techo \"${script_name}: creating makefile fragments in $3\"\n\t\"${gen_make_frags_sh}\"                       \\\n\t\t-h ${recursive} -v0                      \\\n\t\t-o \"${script_name}\"                      \\\n\t\t-p \"$1\" \"$2\" \"$3\"                        \\\n\t\t\"${gen_make_frags_dirpath}/fragment.mk\"  \\\n\t\t\"${gen_make_frags_dirpath}/suffix_list\"  \\\n\t\t\"${gen_make_frags_dirpath}/ignore_list\"\n}\n\n\n#\n# -- blis_main function -------------------------------------------------------------\n#\n\nblis_main()\n{\n\t#declare -A config_registry\n\t#declare -A kernel_registry\n\t#declare -A kconfig_registry\n\n\t# -- Basic names and paths --\n\n\t# The name of the script, stripped of any preceeding path.\n\tscript_name=${0##*/}\n\n\t# The path to the script. We need this to find the top-level directory\n\t# of the source distribution in the event that the user has chosen to\n\t# build elsewhere.\n\tdist_path=${0%\"/${script_name}\"}\n\n\t# The path to the directory in which we are building. We do this to\n\t# make explicit that we distinguish between the top-level directory\n\t# of the distribution and the directory in which we are building.\n\tcur_dirpath=\".\"\n\n\t# The name of and path to the directory named \"build\" in the top-level\n\t# directory of the source distribution.\n\tbuild_dir='build'\n\tbuild_dirpath=\"${dist_path}/${build_dir}\"\n\n\t# The name/path to the registry (master list) of supported configurations.\n\tregistry_file=\"config_registry\"\n\tregistry_filepath=${dist_path}/${registry_file}\n\n\t# The names/paths for the template config.mk.in and its instantiated\n\t# counterpart.\n\tconfig_mk_in='config.mk.in'\n\tconfig_mk_out='config.mk'\n\tconfig_mk_in_path=\"${build_dirpath}/${config_mk_in}\"\n\tconfig_mk_out_path=\"${cur_dirpath}/${config_mk_out}\"\n\n\t# The names/paths for the template bli_config.h.in and its instantiated\n\t# counterpart.\n\tbli_config_h_in='bli_config.h.in'\n\tbli_config_h_out='bli_config.h'\n\tbli_config_h_in_path=\"${build_dirpath}/${bli_config_h_in}\"\n\tbli_config_h_out_path=\"${cur_dirpath}/${bli_config_h_out}\"\n\n\t# The names/paths for the template bli_addon.h.in and its instantiated\n\t# counterpart.\n\tbli_addon_h_in='bli_addon.h.in'\n\tbli_addon_h_out='bli_addon.h'\n\tbli_addon_h_in_path=\"${build_dirpath}/${bli_addon_h_in}\"\n\tbli_addon_h_out_path=\"${cur_dirpath}/${bli_addon_h_out}\"\n\n\t# Path to 'mirror-tree.sh' script.\n\tmirror_tree_sh=\"${build_dirpath}/mirror-tree.sh\"\n\n\t# Path to 'gen-make-frags.sh' script and directory.\n\tgen_make_frags_dirpath=\"${build_dirpath}/gen-make-frags\"\n\tgen_make_frags_sh=\"${gen_make_frags_dirpath}/gen-make-frag.sh\"\n\n\t# The name of the (top-level) configuration directory.\n\tconfig_dir='config'\n\tconfig_dirpath=\"${dist_path}/${config_dir}\"\n\n\t# The name of the (top-level) kernels directory.\n\tkernels_dir='kernels'\n\tkernels_dirpath=\"${dist_path}/${kernels_dir}\"\n\n\t# The name of the (top-level) reference kernels directory.\n\trefkern_dir='ref_kernels'\n\trefkern_dirpath=\"${dist_path}/${refkern_dir}\"\n\n\t# The root directory of the BLIS framework.\n\tframe_dir='frame'\n\tframe_dirpath=\"${dist_path}/${frame_dir}\"\n\n\t# The names of the addons.\n\taddon_dir='addon'\n\taddon_dirpath=\"${dist_path}/${addon_dir}\"\n\n\t# The name of the sandbox directory.\n\tsandbox_dir='sandbox'\n\tsandbox_dirpath=\"${dist_path}/${sandbox_dir}\"\n\n\t# The name of the directory in which object files will be kept.\n\tobj_dir='obj'\n\tobj_dirpath=\"${cur_dirpath}/${obj_dir}\"\n\n\t# The name of the directory in which libraries will be kept.\n\tlib_dir='lib'\n\tlib_dirpath=\"${cur_dirpath}/${lib_dir}\"\n\n\t# The name of the directory in which headers will be kept.\n\tinclude_dir='include'\n\tinclude_dirpath=\"${cur_dirpath}/${include_dir}\"\n\n\t# The name of the directory in which the BLAS test suite is kept.\n\tblastest_dir='blastest'\n\n\t# The name of the directory in which the BLIS test suite is kept.\n\ttestsuite_dir='testsuite'\n\n\t# -- Version-related --\n\n\t# The file in which the version string is kept.\n\tversion_file=\"version\"\n\tversion_filepath=\"${build_dirpath}/${version_file}\"\n\n\t# The shared library (.so) version file.\n\tso_version_file='so_version'\n\tso_version_filepath=\"${build_dirpath}/${so_version_file}\"\n\n\t# The major and minor/build .so version numbers.\n\tso_version_major=''\n\tso_version_minorbuild=''\n\n\t# -- configure options --\n\n\t# Define the default prefix so that the print_usage() function can\n\t# output it in the --help text.\n\tprefix_def='/usr/local'\n\n\t# The installation prefix, assigned its default value, and a flag to\n\t# track whether or not it was given by the user.\n\tprefix=${prefix_def}\n\tprefix_flag=''\n\n\t# The installation exec_prefix, assigned its default value, and a flag to\n\t# track whether or not it was given by the user. Double-escaping the\n\t# variable is necessary because it will pass through 'eval' twice.\n\t# shellcheck disable=2016\n\texec_prefix='\\\\\\${prefix}'\n\texec_prefix_flag=''\n\n\t# The installation libdir, assigned its default value, and a flag to\n\t# track whether or not it was given by the user. Double-escaping the\n\t# variable is necessary because it will pass through 'eval' twice.\n\t# shellcheck disable=2016\n\tlibdir='\\\\\\${exec_prefix}/lib'\n\tlibdir_flag=''\n\n\t# The installation includedir, assigned its default value, and a flag to\n\t# track whether or not it was given by the user. Double-escaping the\n\t# variable is necessary because it will pass through 'eval' twice.\n\t# shellcheck disable=2016\n\tincludedir='\\\\\\${prefix}/include'\n\tincludedir_flag=''\n\n\t# The installation sharedir, assigned its default value, and a flag to\n\t# track whether or not it was given by the user. Double-escaping the\n\t# variable is necessary because it will pass through 'eval' twice.\n\t# shellcheck disable=2016\n\tsharedir='\\\\\\${prefix}/share'\n\tsharedir_flag=''\n\n\t# The preset value of CFLAGS, CXXFLAGS, and LDFLAGS (ie: compiler and linker flags\n\t# to use in addition to those determined by the build system).\n\tcflags_preset=''\n\tcxxflags_preset=''\n\tldflags_preset=''\n\n\t# The user-given debug type and a flag indicating it was given.\n\tdebug_type=''\n\tdebug_flag=''\n\tenable_debug='no'\n\n\t# A flag indicating whether AddressSanitizer should be used.\n\tenable_asan='no'\n\n\t# The system flag.\n\tenable_system='yes'\n\n\t# The thread-local storage flag.\n\tenable_tls='yes'\n\n\t# The threading flag.\n\tthreading_model='off'\n\n\t# The method of assigning micropanels to threads in the JR and JR loops.\n\tthread_part_jrir='slab'\n\n\t# Option variables.\n\tquiet_flag=''\n\tshow_config_list=''\n\n\t# Additional flags.\n\tenable_verbose='no'\n\tenable_arg_max_hack='no'\n\tenable_static='yes'\n\tenable_shared='yes'\n\tenable_rpath='no'\n\texport_shared='public'\n\tenable_pba_pools='yes'\n\tenable_sba_pools='yes'\n\tenable_mem_tracing='no'\n\tint_type_size=0\n\tblas_int_type_size=32\n\tenable_blas='yes'\n\tenable_cblas='no'\n\tenable_sup_handling='yes'\n\tenable_amd_frame_tweaks='no'\n\tenable_memkind='' # The default memkind value is determined later on.\n\tenable_trsm_preinversion='yes'\n\tenable_lapack_compat='no'\n\tenable_scalapack_compat='no'\n\tforce_version='no'\n\tcomplex_return='default'\n\n\t# The symbol omission list.\n\tomit_symbol_list=''\n\n\t# The addon flag and names.\n\taddon_flag=''\n\taddon_list=''\n\n\t# The sandbox flag and name.\n\tsandbox_flag=''\n\tsandbox=''\n\n\t# -- Configuration registry --\n\n\t# The name of the chosen configuration (the configuration \"family\").\n\tconfig_name=''\n\n\t# The list of sub-configurations associated with config_name.\n\tconfig_list=''\n\n\t# The list of all sub-configurations and configuration families.\n\tfull_config_list=''\n\tfull_subconfig_list=''\n\n\t# The list of kernel sets that will be needed by the sub-configurations\n\t# in config_list.\n\tkernel_list=''\n\n\t# The list of all kernel sets.\n\tfull_kernel_list=''\n\n\t# The list of kernel:sub-configuration pairs for all kernels contained\n\t# in kernel_list.\n\tkconfig_map=''\n\n\t# -- Out-of-tree --\n\n\t# Whether we are building out-of-tree.\n\tconfigured_oot=\"no\"\n\n\t# Dummy file. Used to check whether the cwd is the same as the top-level\n\t# source distribution directory.\n\tdummy_file='_blis_dir_detect.tmp'\n\n\t# -- Debugging --\n\n\t# A global flag to help debug the compilation command for the executable\n\t# that configure builds on-the-fly to perform hardware auto-detection.\n\tdebug_auto_detect=\"no\"\n\n\n\n\t# -- Command line option/argument parsing ----------------------------------\n\n\tfound=true\n\twhile [[ $found = true ]]; do\n\n\t\t# Process our command line options.\n\t\tunset OPTIND\n\t\twhile getopts \":hp:d:e:a:s:t:r:qci:b:-:\" opt; do\n\t\t\tcase $opt in\n\t\t\t\t-)\n\t\t\t\t\tcase \"$OPTARG\" in\n\n\t\t\t\t\t\thelp)\n\t\t\t\t\t\t\tprint_usage\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tquiet)\n\t\t\t\t\t\t\tquiet_flag=1\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tprefix=*)\n\t\t\t\t\t\t\tprefix_flag=1\n\t\t\t\t\t\t\tprefix=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\texec-prefix=*)\n\t\t\t\t\t\t\texec_prefix_flag=1\n\t\t\t\t\t\t\texec_prefix=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tlibdir=*)\n\t\t\t\t\t\t\tlibdir_flag=1\n\t\t\t\t\t\t\tlibdir=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tincludedir=*)\n\t\t\t\t\t\t\tincludedir_flag=1\n\t\t\t\t\t\t\tincludedir=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tsharedir=*)\n\t\t\t\t\t\t\tsharedir_flag=1\n\t\t\t\t\t\t\tsharedir=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-debug)\n\t\t\t\t\t\t\tdebug_flag=1\n\t\t\t\t\t\t\tdebug_type=noopt\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tenable-debug=*)\n\t\t\t\t\t\t\tdebug_flag=1\n\t\t\t\t\t\t\tdebug_type=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-debug)\n\t\t\t\t\t\t\tdebug_flag=0\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-asan)\n\t\t\t\t\t\t\tenable_asan='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-asan)\n\t\t\t\t\t\t\tenable_asan='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-verbose-make)\n\t\t\t\t\t\t\tenable_verbose='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-verbose-make)\n\t\t\t\t\t\t\tenable_verbose='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-arg-max-hack)\n\t\t\t\t\t\t\tenable_arg_max_hack='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-arg-max-hack)\n\t\t\t\t\t\t\tenable_arg_max_hack='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-static)\n\t\t\t\t\t\t\tenable_static='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-static)\n\t\t\t\t\t\t\tenable_static='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-shared)\n\t\t\t\t\t\t\tenable_shared='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-shared)\n\t\t\t\t\t\t\tenable_shared='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tomit-symbols=*)\n\t\t\t\t\t\t\tomit_symbol_list=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-rpath)\n\t\t\t\t\t\t\tenable_rpath='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-rpath)\n\t\t\t\t\t\t\tenable_rpath='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\texport-shared=*)\n\t\t\t\t\t\t\texport_shared=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-system)\n\t\t\t\t\t\t\tenable_system='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-system)\n\t\t\t\t\t\t\tenable_system='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-tls)\n\t\t\t\t\t\t\tenable_tls='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-tls)\n\t\t\t\t\t\t\tenable_tls='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-threading=*)\n\t\t\t\t\t\t\tthreading_model=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-threading)\n\t\t\t\t\t\t\tthreading_model='single'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tthread-part-jrir=*)\n\t\t\t\t\t\t\tthread_part_jrir=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-pba-pools)\n\t\t\t\t\t\t\tenable_pba_pools='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-pba-pools)\n\t\t\t\t\t\t\tenable_pba_pools='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-sba-pools)\n\t\t\t\t\t\t\tenable_sba_pools='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-sba-pools)\n\t\t\t\t\t\t\tenable_sba_pools='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-mem-tracing)\n\t\t\t\t\t\t\tenable_mem_tracing='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-mem-tracing)\n\t\t\t\t\t\t\tenable_mem_tracing='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-addon=*)\n\t\t\t\t\t\t\taddon_flag=1\n\t\t\t\t\t\t\taddon_name=${OPTARG#*=}\n\t\t\t\t\t\t\t# Append the addon name to the list.\n\t\t\t\t\t\t\taddon_list=\"${addon_list} ${addon_name}\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-addon)\n\t\t\t\t\t\t\taddon_flag=''\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-sandbox=*)\n\t\t\t\t\t\t\tsandbox_flag=1\n\t\t\t\t\t\t\tsandbox=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-sandbox)\n\t\t\t\t\t\t\tsandbox_flag=''\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tint-size=*)\n\t\t\t\t\t\t\tint_type_size=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tblas-int-size=*)\n\t\t\t\t\t\t\tblas_int_type_size=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-blas)\n\t\t\t\t\t\t\tenable_blas='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-blas)\n\t\t\t\t\t\t\tenable_blas='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-cblas)\n\t\t\t\t\t\t\tenable_cblas='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-cblas)\n\t\t\t\t\t\t\tenable_cblas='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tsup)\n\t\t\t\t\t\t\tenable_sup_handling='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tenable-sup-handling)\n\t\t\t\t\t\t\tenable_sup_handling='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tnosup)\n\t\t\t\t\t\t\tenable_sup_handling='no'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-sup-handling)\n\t\t\t\t\t\t\tenable_sup_handling='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-amd-frame-tweaks)\n\t\t\t\t\t\t\tenable_amd_frame_tweaks='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-amd-frame-tweaks)\n\t\t\t\t\t\t\tenable_amd_frame_tweaks='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-lapack-compat)\n\t\t\t\t\t\t\tenable_lapack_compat='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-lapack-compat)\n\t\t\t\t\t\t\tenable_lapack_compat='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-scalapack-compat)\n\t\t\t\t\t\t\tenable_scalapack_compat='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-scalapack-compat)\n\t\t\t\t\t\t\tenable_scalapack_compat='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\twith-memkind)\n\t\t\t\t\t\t\tenable_memkind='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\twithout-memkind)\n\t\t\t\t\t\t\tenable_memkind='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-trsm-preinversion)\n\t\t\t\t\t\t\tenable_trsm_preinversion='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-trsm-preinversion)\n\t\t\t\t\t\t\tenable_trsm_preinversion='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tforce-version=*)\n\t\t\t\t\t\t\tforce_version=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tshow-config-list)\n\t\t\t\t\t\t\tshow_config_list=1\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tcomplex-return=*)\n\t\t\t\t\t\t\tcomplex_return=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tprint_usage\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac;;\n\t\t\t\th)\n\t\t\t\t\tprint_usage\n\t\t\t\t\t;;\n\t\t\t\tp)\n\t\t\t\t\tprefix_flag=1\n\t\t\t\t\tprefix=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\td)\n\t\t\t\t\tdebug_flag=1\n\t\t\t\t\tdebug_type=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\te)\n\t\t\t\t\texport_shared=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\ta)\n\t\t\t\t\taddon_flag=1\n\t\t\t\t\taddon_name=$OPTARG\n\t\t\t\t\t# Append the addon name to the list.\n\t\t\t\t\taddon_list=\"${addon_list} ${addon_name}\"\n\t\t\t\t\t;;\n\t\t\t\ts)\n\t\t\t\t\tsandbox_flag=1\n\t\t\t\t\tsandbox=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\tq)\n\t\t\t\t\tquiet_flag=1\n\t\t\t\t\t;;\n\t\t\t\tt)\n\t\t\t\t\tthreading_model=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\tr)\n\t\t\t\t\tthread_part_jrir=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\ti)\n\t\t\t\t\tint_type_size=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\tb)\n\t\t\t\t\tblas_int_type_size=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\tc)\n\t\t\t\t\tshow_config_list=1\n\t\t\t\t\t;;\n\t\t\t\t\\?)\n\t\t\t\t\tprint_usage\n\t\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\t\tshift $((OPTIND - 1))\n\n\t\t# Parse environment variables\n\t\tfound=false\n\t\twhile [ $# -gt 0 ]; do\n\t\t\tcase $1 in\n\t\t\t\t*=*)\n\t\t\t\t\tvar=$(expr \"$1\" : '\\([^=]*\\)=')\n\t\t\t\t\tvalue=$(expr \"$1\" : '[^=]*=\\(.*\\)')\n\t\t\t\t\teval \"export $var=\\$value\"\n\t\t\t\t\tshift\n\t\t\t\t\tfound=true\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\tdone\n\n\tcheck_build_tools\n\n\t# -- Read the configuration registry ---------------------------------------\n\n\t# Make sure the config registry file exists and can be opened.\n\tif [ ! -f \"${registry_filepath}\" ]; then\n\n\t\techo \"${script_name}: could not open '${registry_file}' file; cannot continue.\"\n\t\techo \"${script_name}: BLIS distribution appears to be incomplete.\"\n\t\techo \"${script_name}: *** Please verify source distribution.\"\n\n\t\texit 1\n\tfi\n\n\t# Read the registered configuration names and lists into associative\n\t# arrays.\n\techo -n \"${script_name}: reading configuration registry...\"\n\tread_registry_file \"${registry_filepath}\"\n\techo \"done.\"\n\n\t# Report if additional configurations needed to be blacklisted.\n\t# NOTE: This branch should never execute so long as indirect blacklisting\n\t# is disabled. See comment regarding issue #214 in the definition of\n\t# pass_config_kernel_registries().\n\tif [ -n \"${indirect_blist}\" ]; then\n\t\techo \"${script_name}: needed to indirectly blacklist additional configurations:\"\n\t\techo \"${script_name}:   ${indirect_blist}\"\n\tfi\n\n\n\t# -- Acquire the BLIS version ----------------------------------------------\n\n\t# Set the 'version' variable to the default value (the 'git describe'\n\t# augmented instance of whatever is in the 'version' file if this is a git\n\t# clone, or whatever is in the 'version' file unmodified if it is a bare\n\t# source release).\n\tset_default_version \"${version_filepath}\"\n\n\t# Initial message.\n\techo \"${script_name}: starting configuration of BLIS ${version}.\"\n\n\t# Check if the user requested a custom version string.\n\tif [[ ${force_version} = no ]]; then\n\t\techo \"${script_name}: configuring with official version string.\"\n\telse\n\t\techo \"${script_name}: configuring with custom version string '${force_version}'.\"\n\t\tversion=\"${force_version}\"\n\tfi\n\n\n\t# -- Acquire the shared library (.so) versions -----------------------------\n\n\t# The first line of the 'so_version' file contains the .so major version.\n\tso_version_major=$(sed -n \"1p\" < \"${so_version_filepath}\")\n\n\t# The second line contains the minor and build .so version numbers\n\t# (separated by a '.').\n\tso_version_minorbuild=$(sed -n \"2p\" < \"${so_version_filepath}\")\n\n\techo \"${script_name}: found shared library .so version '${so_version_major}.${so_version_minorbuild}'.\"\n\techo \"${script_name}:   .so major version: ${so_version_major}\"\n\techo \"${script_name}:   .so minor.build version: ${so_version_minorbuild}\"\n\n\n\t# -- Various pre-configuration checks --------------------------------------\n\n\t# Set config_name based on the number of arguments leftover (after command\n\t# line option processing).\n\tif [ $# = \"0\" ]; then\n\n\t\t#configs_avail=\"auto \"$(ls ${config_dirpath})\n\n\t\techo \"${script_name}: \"\n\t\techo \"${script_name}: *** No configuration given! ***\"\n\t\techo \"${script_name}: \"\n\t\techo \"${script_name}: Default configuration behavior is not implemented (for your\"\n\t\techo \"${script_name}: own safety). Please re-run '${script_name}' and specify one\"\n\t\techo \"${script_name}: of the existing configurations in the source distribution's\"\n\t\techo \"${script_name}  '${registry_file}' file:\"\n\t\techo \"${script_name}: \"\n\t\t#for k in \"${!config_registry[@]}\"; do\n\t\tfor cr_var in ${!config_registry_*}; do\n\n\t\t\t#v=${config_registry[$k]}\n\t\t\tk=${cr_var##config_registry_}; v=${!cr_var}\n\n\t\t\techo \"${script_name}:   $k (${v})\"\n\t\tdone\n\t\techo \"${script_name}: \"\n\n\t\texit 1\n\n\telif [ $# != \"1\" ]; then   # more than one configuration argument given.\n\n\t\tprint_usage\n\n\tfi\n\n\tif [[ $1 = auto ]]; then\n\n\t\techo \"${script_name}: automatic configuration requested.\"\n\n\t\t# Call the auto_detect() function and save the returned string in\n\t\t# config_name.\n\t\tconfig_name=$(auto_detect)\n\n\t\t# Debugging stuff. When confirming the behavior of auto_detect(),\n\t\t# it is useful to output ${config_name}, which in theory could be\n\t\t# set temoprarily to something other than the config_name, such as\n\t\t# the compilation command.\n\t\tif [ \"${debug_auto_detect}\" = \"yes\" ]; then\n\t\t\techo \"auto-detect program compilation command: ${config_name}\"\n\t\t\texit 1\n\t\tfi\n\n\t\techo \"${script_name}: hardware detection driver returned '${config_name}'.\"\n\n\t\t# If the auto-detect code returned the \"generic\" string, it means we\n\t\t# were unable to automatically detect the user's hardware type. While\n\t\t# this is going to be a rare event, it will likely lead the user to\n\t\t# experience much lower performance than expected, and thus we will\n\t\t# warn them about it at the end of the configure output (to increase\n\t\t# the chances that they see it).\n\t\tif [ \"${config_name}\" = \"generic\" ]; then\n\n\t\t\twarn_user_generic=1\n\t\telse\n\t\t\twarn_user_generic=0\n\t\tfi\n\telse\n\n\t\t# Use the command line argument as the configuration name.\n\t\tconfig_name=$1\n\n\t\techo \"${script_name}: manual configuration requested; configuring with '${config_name}'.\"\n\n\tfi\n\n\tbuild_and_check_configurations\n\n\t# In order to determine the default behavior of the --with[out]-memkind\n\t# option, we try to detect whether libmemkind is available. If it is,\n\t# the default implied option will be --with-memkind; otherwise, will be\n\t# --without-memkind.\n\thas_memkind=$(has_libmemkind)\n\n\t# Try to determine whether the chosen compiler supports #pragma omp simd.\n\tpragma_omp_simd=$(has_pragma_omp_simd)\n\n\n\t# -- Prepare variables for subsitution into template files -----------------\n\n\t# Parse the status of the prefix option and echo feedback.\n\tif [ -n \"${prefix_flag}\" ]; then\n\t\techo \"${script_name}: detected --prefix='${prefix}'.\"\n\telse\n\t\techo \"${script_name}: no install prefix option given; defaulting to '${prefix}'.\"\n\tfi\n\n\t# Parse the status of the exec_prefix option and echo feedback.\n\tif [ -n \"${exec_prefix_flag}\" ]; then\n\t\techo \"${script_name}: detected --exec-prefix='${exec_prefix}'.\"\n\telse\n\t\techo \"${script_name}: no install exec_prefix option given; defaulting to PREFIX.\"\n\tfi\n\n\t# Parse the status of the libdir option and echo feedback.\n\tif [ -n \"${libdir_flag}\" ]; then\n\t\techo \"${script_name}: detected --libdir='${libdir}'.\"\n\telse\n\t\techo \"${script_name}: no install libdir option given; defaulting to EXECPREFIX/lib.\"\n\tfi\n\n\t# Parse the status of the includedir option and echo feedback.\n\tif [ -n \"${includedir_flag}\" ]; then\n\t\techo \"${script_name}: detected --includedir='${includedir}'.\"\n\telse\n\t\techo \"${script_name}: no install includedir option given; defaulting to PREFIX/include.\"\n\tfi\n\n\t# Parse the status of the sharedir option and echo feedback.\n\tif [ -n \"${sharedir_flag}\" ]; then\n\t\techo \"${script_name}: detected --sharedir='${sharedir}'.\"\n\telse\n\t\techo \"${script_name}: no install sharedir option given; defaulting to PREFIX/share.\"\n\tfi\n\n\t# Echo the installation directories that we settled on.\n\techo \"${script_name}: final installation directories:\"\n\techo \"${script_name}:   prefix:      $(fully_eval \"${prefix}\")\"\n\techo \"${script_name}:   exec_prefix: $(fully_eval \"${exec_prefix}\")\"\n\techo \"${script_name}:   libdir:      $(fully_eval \"${libdir}\")\"\n\techo \"${script_name}:   includedir:  $(fully_eval \"${includedir}\")\"\n\techo \"${script_name}:   sharedir:    $(fully_eval \"${sharedir}\")\"\n\techo \"${script_name}: NOTE: the variables above can be overridden when running make.\"\n\n\t# Check if CFLAGS is non-empty.\n\tif [ -n \"${CFLAGS}\" ]; then\n\t\tcflags_preset=\"${CFLAGS}\"\n\t\techo \"${script_name}: detected preset CFLAGS; prepending:\"\n\t\techo \"${script_name}:   ${cflags_preset}\"\n\telse\n\t\tcflags_preset=''\n\t\techo \"${script_name}: no preset CFLAGS detected.\"\n\tfi\n\n\t# Check if CXXFLAGS is non-empty.\n\tif [ -n \"${CXXFLAGS}\" ]; then\n\t\tcxxflags_preset=\"${CXXFLAGS}\"\n\t\techo \"${script_name}: detected preset CXXFLAGS; prepending:\"\n\t\techo \"${script_name}:   ${cxxflags_preset}\"\n\telse\n\t\tcxxflags_preset=''\n\t\techo \"${script_name}: no preset CXXFLAGS detected.\"\n\tfi\n\n\t# Check if LDFLAGS is non-empty.\n\tif [ -n \"${LDFLAGS}\" ]; then\n\t\tldflags_preset=\"${LDFLAGS}\"\n\t\techo \"${script_name}: detected preset LDFLAGS; prepending:\"\n\t\techo \"${script_name}:   ${ldflags_preset}\"\n\telse\n\t\tldflags_preset=''\n\t\techo \"${script_name}: no preset LDFLAGS detected.\"\n\tfi\n\n\t# Check if the verbose make flag was specified.\n\tif [[ ${enable_verbose} = yes ]]; then\n\t\techo \"${script_name}: enabling verbose make output. (disable with 'make V=0'.)\"\n\telse\n\t\techo \"${script_name}: disabling verbose make output. (enable with 'make V=1'.)\"\n\tfi\n\n\t# Check if the ARG_MAX hack was requested.\n\tif [[ ${enable_arg_max_hack} = yes ]]; then\n\t\techo \"${script_name}: enabling ARG_MAX hack.\"\n\telse\n\t\techo \"${script_name}: disabling ARG_MAX hack.\"\n\tfi\n\n\t# Check if the debug flag was specified.\n\tif [[ -n ${debug_flag} ]]; then\n\t\tif [[ ${debug_type} = opt ]]; then\n\t\t\techo \"${script_name}: enabling debug symbols with optimizations.\"\n\t\telif [[ ${debug_type} = sde ]]; then\n\t\t\tdebug_type='sde'\n\t\t\techo \"${script_name}: enabling SDE processor emulation.\"\n\t\telse\n\t\t\tdebug_type='noopt'\n\t\t\techo \"${script_name}: enabling debug symbols; optimizations disabled.\"\n\t\tfi\n\t\tenable_debug='yes'\n\telse\n\t\tdebug_type='off'\n\t\tenable_debug='no'\n\t\techo \"${script_name}: debug symbols disabled.\"\n\tfi\n\n\t# Check if the AddressSanitizer flag was specified.\n\tif [[ ${enable_asan} = yes ]]; then\n\t\techo \"${script_name}: enabling AddressSanitizer support (except for optimized kernels).\"\n\telse\n\t\tenable_asan='no'\n\t\techo \"${script_name}: AddressSanitizer support disabled.\"\n\tfi\n\n\t# Check if the static lib flag was specified.\n\tif   [[ ${enable_static} = yes && ${enable_shared} = yes ]]; then\n\t\techo \"${script_name}: building BLIS as both static and shared libraries.\"\n\t\tenable_shared_01=1\n\telif [[ ${enable_static} = no && ${enable_shared} = yes ]]; then\n\t\techo \"${script_name}: building BLIS as a shared library (static library disabled).\"\n\t\tenable_shared_01=1\n\telif [[ ${enable_static} = yes && ${enable_shared} = no ]]; then\n\t\techo \"${script_name}: building BLIS as a static library (shared library disabled).\"\n\t\tenable_shared_01=0\n\telse\n\t\techo \"${script_name}: Both static and shared libraries were disabled.\"\n\t\techo \"${script_name}: *** Please enable one (or both) to continue.\"\n\t\texit 1\n\tfi\n\n\t# Check if the \"export shared\" flag was specified.\n\tif [[ ${export_shared} = all ]]; then\n\t\tif [[ ${enable_shared} = yes ]]; then\n\t\t\techo \"${script_name}: exporting all symbols within shared library.\"\n\t\telse\n\t\t\techo \"${script_name}: ignoring request to export all symbols within shared library.\"\n\t\tfi\n\telif [[ ${export_shared} = public ]]; then\n\t\tif [[ ${enable_shared} = yes ]]; then\n\t\t\techo \"${script_name}: exporting only public symbols within shared library.\"\n\t\tfi\n\telse\n\t\techo \"${script_name}: *** Invalid argument '${export_shared}' to --export-shared option given.\"\n\t\techo \"${script_name}: *** Please use 'public' or 'all'.\"\n\t\texit 1\n\tfi\n\n\t# Check for the LAPACK compatibility option before the option for symbol\n\t# omission since the former can imply/augment the latter.\n\tif [[ ${enable_lapack_compat} = yes ]]; then\n\t\techo \"${script_name}: LAPACK compatibility is enabled.\"\n\t\tenable_lapack_compat_01=1\n\t\tproblematic_symbols=\"crot,zrot,csymv,zsymv,csyr,zsyr,csyr2,zsyr2,lsame,xerbla,xerbla_array\"\n\t\tomit_symbol_list=\"${omit_symbol_list},${problematic_symbols}\"\n\telse\n\t\techo \"${script_name}: LAPACK compatibility is disabled.\"\n\t\tenable_lapack_compat_01=0\n\tfi\n\n\t# Check for the ScaLAPACK compatibility option before the option for symbol\n\t# omission since the former can imply/augment the latter.\n\tif [[ ${enable_scalapack_compat} = yes ]]; then\n\t\techo \"${script_name}: ScaLAPACK compatibility is enabled.\"\n\t\tenable_scalapack_compat_01=1\n\t\tproblematic_symbols=\"csymv,zsymv,csyr,zsyr,csyr2,zsyr2\"\n\t\tomit_symbol_list=\"${omit_symbol_list},${problematic_symbols}\"\n\telse\n\t\techo \"${script_name}: ScaLAPACK compatibility is disabled.\"\n\t\tenable_scalapack_compat_01=0\n\tfi\n\n\t# Check if we are omitting any symbols.\n\tif [[ ${omit_symbol_list} != \"\" ]]; then\n\n\t\t# Create a list of #defines, one for each symbol the user requested\n\t\t# that we omit. Note that first we convert the list's commas into\n\t\t# spaces.\n\n\t\t# Start by changing the comma-separated list to a space-separated list.\n\t\tomit_symbol_list=$(echo \"${omit_symbol_list}\" | sed -e \"s/,/ /g\")\n\n\t\t# Remove duplicates.\n\t\t#omit_symbol_list=$(rm_duplicate_words_simple \"${omit_symbol_list}\")\n\n\t\t# Sort the list, removing duplicates (via -u).\n\t\tomit_symbol_list=$(echo \"${omit_symbol_list}\" | xargs -n1 | sort -u)\n\n\t\techo \"${script_name}: omitting the following symbols from BLIS:\"\n\t\tfor omit_symbol_name in ${omit_symbol_list}; do\n\t\t\techo \"${script_name}:   ${omit_symbol_name}\"\n\t\tdone\n\telse\n\t\techo \"${script_name}: no symbols will be omitted.\"\n\tfi\n\n\t# Check if we are building with or without operating system support.\n\tif [[ ${enable_system} = yes ]]; then\n\t\techo \"${script_name}: enabling operating system support.\"\n\t\tenable_system_01=1\n\telse\n\t\techo \"${script_name}: disabling operating system support.\"\n\t\techo \"${script_name}: WARNING: disabling OS support forcibly disables all threading!\"\n\t\tenable_system_01=0\n\n\t\t# Force threading to be disabled.\n\t\tthreading_model='off'\n\tfi\n\n\t# Check if we are building with or without thread-local storage support.\n\tif [[ ${enable_tls} = yes ]]; then\n\t\techo \"${script_name}: enabling thread-local storage (TLS) support.\"\n\t\tenable_tls_01=1\n\telse\n\t\techo \"${script_name}: disabling thread-local storage (TLS) support.\"\n\t\techo \"${script_name}: WARNING: THIS IS DANGEROUS! Disabling TLS may cause race conditions!\"\n\t\techo \"${script_name}: WARNING: Please try --disable-threading if you suspect any correctness\"\n\t\techo \"${script_name}: WARNING: or deadlock issues.\"\n\t\tenable_tls_01=0\n\tfi\n\n\t# Check the threading model flag and standardize its value, if needed.\n\t# Note that single-threaded mode will always be enabled, but not necessarily\n\t# by default.\n\tenable_single='yes'\n\tenable_openmp='no'\n\tenable_pthreads='no'\n\tenable_hpx='no'\n\tenable_single_01=1\n\tenable_openmp_01=0\n\tenable_pthreads_01=0\n\tenable_hpx_01=0\n\tparsed_tm=''\n\tfirst_tm=''\n\tenable_single_as_def_01=0\n\tenable_openmp_as_def_01=0\n\tenable_pthreads_as_def_01=0\n\tenable_hpx_as_def_01=0\n\n\t# Convert whatever reasonable separator the user may have used into a space.\n\tthreading_model_list=$(echo \"${threading_model}\" | sed -e \"s/[,+]/ /g\")\n\n\t# Search for all recognized values and standardize them to one of four\n\t# strings: 'single', 'openmp', 'pthreads', 'auto'. Notice that we keep\n\t# the strings in the same order as they originally appeared.\n\tfor word in ${threading_model_list}; do\n\n\t\tif [[ ${word} = single ]] ||\n\t\t   [[ ${word} = none   ]] ||\n\t\t   [[ ${word} = off    ]] ||\n\t\t   [[ ${word} = no     ]]; then\n\n\t\t\tparsed_tm=\"${parsed_tm} single\"\n\n\t\telif [[ ${word} = openmp ]] ||\n\t\t\t [[ ${word} = omp    ]]; then\n\n\t\t\tparsed_tm=\"${parsed_tm} openmp\"\n\n\t\telif [[ ${word} = pthreads ]] ||\n\t\t\t [[ ${word} = pthread  ]] ||\n\t\t\t [[ ${word} = posix    ]]; then\n\n\t\t\tparsed_tm=\"${parsed_tm} pthreads\"\n\n\t\telif [[ ${word} = hpx ]]; then\n\n\t\t\tparsed_tm=\"${parsed_tm} hpx\"\n\n\t\telif [[ ${word} = auto ]]; then\n\n\t\t\tparsed_tm=\"${parsed_tm} auto\"\n\n\t\telse\n\n\t\t\techo \"${script_name}: *** Unsupported threading model: ${word}.\"\n\t\t\texit 1\n\t\tfi\n\tdone\n\n\t# Always enable single-threaded behavior. If the user explicitly\n\t# requested 'single' as well as other modes, the first occurrence will\n\t# be kept when duplicates are removed, which will preserve the order\n\t# for purposes of determining which mode will be the default (absent\n\t# any explicit choice at runtime).\n\tparsed_tm=\"${parsed_tm} single\"\n\n\t# Remove duplicates, if they exist.\n\tparsed_tm=$(rm_duplicate_words_simple \"${parsed_tm}\")\n\n\t#echo \"parsed_tm0: _${parsed_tm}_\"\n\n\t# If parsed_tm contains 'auto', substitute in the automatic choice\n\t# based on which compiler family is being used.\n\tif [ \"$(is_in_list \"auto\" \"${parsed_tm}\")\" = \"true\" ]; then\n\n\t\t# If 'auto' was found in the threading model string, we ignore any\n\t\t# other choice that may have been expressed and leave everything\n\t\t# disabled. (The Makefile will automatically choose a model based\n\t\t# on information such as the compiler.)\n\t\techo \"${script_name}: determining the threading model automatically.\"\n\n\t\t# Use OpenMP for gcc and icc, but pthreads for clang.\n\t\tif   [ \"${cc_vendor}\" = \"gcc\" ]; then\n\n\t\t\tselected_tm=\"openmp\"\n\t\t\techo \"${script_name}:   automatically selected OpenMP.\"\n\n\t\telif [ \"${cc_vendor}\" = \"icc\" ]; then\n\n\t\t\tselected_tm=\"openmp\"\n\t\t\techo \"${script_name}:   automatically selected OpenMP.\"\n\n\t\telif [ \"${cc_vendor}\" = \"clang\" ]; then\n\n\t\t\tselected_tm=\"pthreads\"\n\t\t\techo \"${script_name}:   automatically selected pthreads.\"\n\t\tfi\n\n\t\t# Substitute the selected threading model for 'auto' in parsed_tm.\n\t\tparsed_tm=$(substitute_words \"auto\" \"${selected_tm}\" \"${parsed_tm}\")\n\tfi\n\n\t#echo \"parsed_tm1: _${parsed_tm}_\"\n\n\t# Remove any extra whitespace.\n\tparsed_tm=$(canonicalize_ws \"${parsed_tm}\")\n\n\t#echo \"parsed_tm2: _${parsed_tm}_\"\n\n\t# Find the first word. This will be the default threading model.\n\tfirst_tm=${parsed_tm%% *}\n\n\t#echo \"first_tm0:  _${first_tm}_\"\n\n\t# Now that we've standardized the list, removed duplicates, and handled\n\t# the possibility of 'auto' being among the listed threading models, we can\n\t# proceed to formally processing each threading model to enable. Since\n\t# 'auto' has been converted to 'openmp' or 'pthreads', we only need to\n\t# handle the remaining three options (openmp, pthreads, and single) going\n\t# forward.\n\tfor word in ${parsed_tm}; do\n\n\t\tif [[ ${word} = single ]]; then\n\n\t\t\techo \"${script_name}: enabling support for single-threading.\"\n\t\t\tenable_single='yes'\n\t\t\tenable_single_01=1\n\n\t\telif [[ ${word} = openmp ]]; then\n\n\t\t\techo \"${script_name}: enabling support for threading via OpenMP.\"\n\t\t\tenable_openmp='yes'\n\t\t\tenable_openmp_01=1\n\n\t\telif [[ ${word} = pthreads ]]; then\n\n\t\t\techo \"${script_name}: enabling support for threading via pthreads.\"\n\t\t\tenable_pthreads='yes'\n\t\t\tenable_pthreads_01=1\n\n\t\telif [[ ${word} = hpx ]]; then\n\n\t\t\techo \"${script_name}: enabling support for threading via HPX.\"\n\t\t\tenable_hpx='yes'\n\t\t\tenable_hpx_01=1\n\n\t\tfi\n\n\tdone\n\n\t# Define boolean variables that can easily be interpreted with #ifdef\n\t# directives.\n\tif [[ ${first_tm} = single ]]; then\n\n\t\tenable_single_as_def_01=1\n\t\tenable_openmp_as_def_01=0\n\t\tenable_pthreads_as_def_01=0\n\t\tenable_hpx_as_def_01=0\n\n\telif [[ ${first_tm} = openmp ]]; then\n\n\t\tenable_single_as_def_01=0\n\t\tenable_openmp_as_def_01=1\n\t\tenable_pthreads_as_def_01=0\n\t\tenable_hpx_as_def_01=0\n\n\telif [[ ${first_tm} = pthreads ]]; then\n\n\t\tenable_single_as_def_01=0\n\t\tenable_openmp_as_def_01=0\n\t\tenable_pthreads_as_def_01=1\n\t\tenable_hpx_as_def_01=0\n\n\telif [[ ${first_tm} = hpx ]]; then\n\n\t\tenable_single_as_def_01=0\n\t\tenable_openmp_as_def_01=0\n\t\tenable_pthreads_as_def_01=0\n\t\tenable_hpx_as_def_01=1\n\n\tfi\n\n\t# If OpenMP, pthreads, or HPX was enabled, given that single-threaded mode is\n\t# also always enabled, remind the user which one will serve as the default\n\t# (that is, absent any explicit choice at runtime).\n\tif [[ ${enable_openmp}   = yes ]] ||\n\t   [[ ${enable_pthreads} = yes ]] ||\n\t   [[ ${enable_hpx}      = yes ]]; then\n\n\t\tif   [[ ${first_tm}   = single ]]; then\n\t\t\techo \"${script_name}: threading will default to single-threaded.\"\n\t\telif [[ ${first_tm}   = openmp ]]; then\n\t\t\techo \"${script_name}: threading will default to OpenMP.\"\n\t\telif [[ ${first_tm}   = pthreads ]]; then\n\t\t\techo \"${script_name}: threading will default to pthreads.\"\n\t\telif [[ ${first_tm}   = hpx ]]; then\n\t\t\techo \"${script_name}: threading will default to HPX.\"\n\t\tfi\n\tfi\n\n\t# Copy the final parsed threading model list back to the original variable.\n\tthreading_model=\"${parsed_tm}\"\n\n\t#echo \"parsed_tm: _${parsed_tm}_\"\n\t#echo \"first_tm:  _${first_tm}_\"\n\n\t# Check the method of assigning micropanels to threads in the JR and IR\n\t# loops.\n\tenable_jrir_rr_01=0\n\tenable_jrir_slab_01=0\n\tenable_jrir_tlb_01=0\n\tif   [[ ${thread_part_jrir} = rr ]]; then\n\t\techo \"${script_name}: requesting round-robin (rr) work partitioning in jr and/or ir loops.\"\n\t\tenable_jrir_rr_01=1\n\telif [[ ${thread_part_jrir} = slab ]]; then\n\t\techo \"${script_name}: requesting slab work partitioning in jr and/or ir loops.\"\n\t\tenable_jrir_slab_01=1\n\telif [[ ${thread_part_jrir} = tlb ]]; then\n\t\techo \"${script_name}: requesting tile-level load balancing (tlb) in unified jr+ir loop.\"\n\t\tenable_jrir_tlb_01=1\n\telse\n\t\techo \"${script_name}: *** Unsupported method of work partitioning in jr/ir loops: ${thread_part_jrir}.\"\n\t\texit 1\n\tfi\n\n\t# Convert 'yes' and 'no' flags to booleans.\n\tif [[ ${enable_pba_pools} = yes ]]; then\n\t\techo \"${script_name}: internal memory pools for packing blocks are enabled.\"\n\t\tenable_pba_pools_01=1\n\telse\n\t\techo \"${script_name}: internal memory pools for packing blocks are disabled.\"\n\t\tenable_pba_pools_01=0\n\tfi\n\tif [[ ${enable_sba_pools} = yes ]]; then\n\t\techo \"${script_name}: internal memory pools for small blocks are enabled.\"\n\t\tenable_sba_pools_01=1\n\telse\n\t\techo \"${script_name}: internal memory pools for small blocks are disabled.\"\n\t\tenable_sba_pools_01=0\n\tfi\n\tif [[ ${enable_mem_tracing} = yes ]]; then\n\t\techo \"${script_name}: memory tracing output is enabled.\"\n\t\tenable_mem_tracing_01=1\n\telse\n\t\techo \"${script_name}: memory tracing output is disabled.\"\n\t\tenable_mem_tracing_01=0\n\tfi\n\tif [[ ${has_memkind} = yes ]]; then\n\t\tif [[ -z ${enable_memkind} ]]; then\n\t\t\t# If no explicit option was given for libmemkind one way or the other,\n\t\t\t# we use the value returned previously by has_libmemkind(), in this\n\t\t\t# case \"yes\", to determine the default.\n\t\t\techo \"${script_name}: libmemkind found; default is to enable use.\"\n\t\t\tenable_memkind=\"yes\"\n\t\t\tenable_memkind_01=1\n\t\telse\n\t\t\tif [[ ${enable_memkind} = yes ]]; then\n\t\t\t\techo \"${script_name}: received explicit request to enable libmemkind.\"\n\t\t\t\tenable_memkind=\"yes\"\n\t\t\t\tenable_memkind_01=1\n\t\t\telse\n\t\t\t\techo \"${script_name}: received explicit request to disable libmemkind.\"\n\t\t\t\tenable_memkind=\"no\"\n\t\t\t\tenable_memkind_01=0\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo \"${script_name}: libmemkind not found; disabling.\"\n\t\tif [[ ${enable_memkind} = yes ]]; then\n\t\t\techo \"${script_name}: cannot honor explicit request to enable libmemkind.\"\n\t\tfi\n\t\tenable_memkind=\"no\"\n\t\tenable_memkind_01=0\n\tfi\n\tif [[ ${pragma_omp_simd} = yes ]]; then\n\t\techo \"${script_name}: compiler appears to support #pragma omp simd.\"\n\t\tenable_pragma_omp_simd_01=1\n\telse\n\t\techo \"${script_name}: compiler appears to not support #pragma omp simd.\"\n\t\tenable_pragma_omp_simd_01=0\n\tfi\n\tif [[ ${enable_blas} = yes ]]; then\n\t\techo \"${script_name}: the BLAS compatibility layer is enabled.\"\n\t\tenable_blas_01=1\n\telse\n\t\techo \"${script_name}: the BLAS compatibility layer is disabled.\"\n\t\tenable_blas_01=0\n\tfi\n\tif [[ ${enable_cblas} = yes ]]; then\n\t\techo \"${script_name}: the CBLAS compatibility layer is enabled.\"\n\t\tenable_cblas_01=1\n\t\t# Force BLAS layer when CBLAS is enabled\n\t\tenable_blas='yes'\n\telse\n\t\techo \"${script_name}: the CBLAS compatibility layer is disabled.\"\n\t\tenable_cblas_01=0\n\tfi\n\tif [[ ${enable_sup_handling} = yes ]]; then\n\t\techo \"${script_name}: sup (skinny/unpacked) matrix handling is enabled.\"\n\t\tenable_sup_handling_01=1\n\telse\n\t\techo \"${script_name}: sup (skinny/unpacked) matrix handling is disabled.\"\n\t\tenable_sup_handling_01=0\n\tfi\n\tif [[ ${enable_trsm_preinversion} = yes ]]; then\n\t\techo \"${script_name}: trsm diagonal element pre-inversion is enabled.\"\n\t\tenable_trsm_preinversion_01=1\n\telse\n\t\techo \"${script_name}: trsm diagonal element pre-inversion is disabled.\"\n\t\tenable_trsm_preinversion_01=0\n\tfi\n\n\t# Report integer sizes.\n\tif [[ ${int_type_size} = 32 ]]; then\n\t\techo \"${script_name}: the BLIS API integer size is 32-bit.\"\n\telif [[ ${int_type_size} = 64 ]]; then\n\t\techo \"${script_name}: the BLIS API integer size is 64-bit.\"\n\telse\n\t\techo \"${script_name}: the BLIS API integer size is automatically determined.\"\n\tfi\n\tif [[ ${blas_int_type_size} = 32 ]]; then\n\t\techo \"${script_name}: the BLAS/CBLAS API integer size is 32-bit.\"\n\telif [[ ${blas_int_type_size} = 64 ]]; then\n\t\techo \"${script_name}: the BLAS/CBLAS API integer size is 64-bit.\"\n\telse\n\t\techo \"${script_name}: the BLAS/CBLAS API integer size is automatically determined.\"\n\tfi\n\n\t# Disallow the simultaneous use of 64-bit integers in the BLAS and\n\t# 32-bit integers in BLIS.\n\tif [[ ${blas_int_type_size} = 64 && ${int_type_size} = 32 ]]; then\n\t\techo \"${script_name}: *** To avoid the possibility of truncation, we do not allow use of 64-bit integers in the BLAS API with 32-bit integers in BLIS. Please use a different configuration of integers.\"\n\t\texit 1\n\tfi\n\n\t# Check whether we should use AMD-customized versions of certain framework\n\t# files.\n\tif [[ ${enable_amd_frame_tweaks} = yes ]]; then\n\n\t\techo \"${script_name}: AMD-specific framework files will be considered.\"\n\t\techo \"${script_name}:   checking eligibility of target configuration.\"\n\n\t\t# Make sure we are targeting either one of the zen subconfigs or the\n\t\t# amd64 umbrella family.\n\t\tif [[ ${config_name} != *zen* && ${config_name} != *amd64* ]]; then\n\t\t\techo \"${script_name}:   target configuration '${config_name}' is not eligible.\"\n\t\t\techo \"${script_name}:   disabling AMD-specific framework files.\"\n\t\t\tenable_amd_frame_tweaks='no'\n\t\telse\n\t\t\techo \"${script_name}:   target configuration '${config_name}' is eligible.\"\n\t\t\techo \"${script_name}:   enabling AMD-specific framework files.\"\n\t\tfi\n\telse\n\t\techo \"${script_name}: AMD-specific framework files will not be considered.\"\n\tfi\n\n\t# Check if addons were given.\n\tif [ -n \"${addon_flag}\" ]; then\n\n\t\t# Remove duplicates in the addon list, if they exist.\n\t\taddon_list=$(rm_duplicate_words_simple \"${addon_list}\")\n\n\t\techo \"${script_name}: configuring with addons:\"\n\n\t\tfor addon in ${addon_list}; do\n\n\t\t\techo \"${script_name}:   ${addon_dir}/${addon}\"\n\n\t\t\taddon_fullpath=\"${addon_dirpath}/${addon}\"\n\n\t\t\tif [ ! -d \"${addon_fullpath}\" ]; then\n\t\t\t\techo \"${script_name}: requested addon sub-directory does not exist! Cannot continue.\"\n\t\t\t\techo \"${script_name}: *** Please verify addon existence and name.\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\tdone\n\n\t\tenable_addons_01=1\n\telse\n\t\techo \"${script_name}: configuring with no addons.\"\n\n\t\tenable_addons_01=0\n\tfi\n\n\t# Check if a sandbox was given.\n\tif [ -n \"${sandbox_flag}\" ]; then\n\n\t\t#sandbox_relpath=\"${sandbox_dir}/${sandbox}\"\n\n\t\techo \"${script_name}: configuring for alternate gemm implementation:\"\n\t\techo \"${script_name}:   ${sandbox_dir}/${sandbox}\"\n\n\t\tsandbox_fullpath=\"${sandbox_dirpath}/${sandbox}\"\n\n\t\tif [ ! -d \"${sandbox_fullpath}\" ]; then\n\t\t\techo \"${script_name}: requested sandbox sub-directory does not exist! Cannot continue.\"\n\t\t\techo \"${script_name}: *** Please verify sandbox existence and name.\"\n\t\t\texit 1\n\t\tfi\n\n\t\tenable_sandbox_01=1\n\telse\n\t\techo \"${script_name}: configuring for conventional gemm implementation.\"\n\n\t\tenable_sandbox_01=0\n\tfi\n\n\t# Check the method used for returning complex numbers.\n\tif [[ ${complex_return} = default ]]; then\n\n\t\t# If we prevoiusly found a Fortran compiler, let's query it to see what\n\t\t# kind of complex return type it uses (gnu or intel). The 'gnu' style\n\t\t# returns complex values from functions normally, via the C language\n\t\t# return statement, while the 'intel' style returns them in a \"hidden\"\n\t\t# parameter (inserted by the compiler) that precedes all other function\n\t\t# parameters.\n\t\tif [ -n \"${found_fc}\" ]; then\n\n\t\t\t# Query the full vendor version string output. This includes the\n\t\t\t# version number along with (potentially) a bunch of other textual\n\t\t\t# clutter.\n\t\t\t# NOTE: This maybe should use merged stdout/stderr rather than only\n\t\t\t# stdout. But it works for now.\n\t\t\tvendor_string=\"$(${found_fc} --version 2>/dev/null || :)\"\n\n\t\t\t# Query the compiler \"vendor\" (ie: the compiler's simple name).\n\t\t\t# The last part ({ read first rest ; echo $first ; }) is a workaround\n\t\t\t# to OS X's egrep only returning the first match.\n\t\t\tfc_vendor=$(echo \"${vendor_string}\" | grep -oE 'IFORT|IFX|GNU|NVIDIA|PGI' |\n\t\t\t            { read -r first rest ; echo \"${first}\"; })\n\n\t\t\tif [[ ${fc_vendor} = IFORT || ${fc_vendor} = IFX ]]; then\n\t\t\t\tcomplex_return='intel'\n\t\t\telif [[ ${fc_vendor} = NVIDIA || ${fc_vendor} = PGI ]]; then\n\t\t\t\t# On x86_64 and aarch64 prior to 23.9, nvfortran\n\t\t\t\t# uses the 'intel' convention.\n                                # On and ppc64le and aarch64 starting with 23.9,\n                                # the convention is 'gnu'.\n\t\t\t\tif [[ \"$(uname -m)\" = \"aarch64\" ]]; then\n\t\t\t\t\tfc_version=$(echo \"${vendor_string}\" \\\n\t\t\t\t\t             | grep -oE '[0-9]+\\.[0-9]+\\.?[0-9]*' \\\n\t\t\t\t\t             | { read -r first rest ; echo \"${first}\"; })\n\t\t\t\t\tif [[ ${fc_version:0:2} -lt 23 ]]; then\n\t\t\t\t\t\tcomplex_return='intel'\n\t\t\t\t\telif [[ ${fc_version:0:2} -eq 23 ]]; then\n\t\t\t\t\t\t# Use 3:5 because minor version numbers include 1 and 11.\n\t\t\t\t\t\tif [[ ${fc_version:3:5} -lt 9 ]]; then\n\t\t\t\t\t\t\tcomplex_return='intel'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tcomplex_return='gnu'\n\t\t\t\t\t\tfi\n\t\t\t\t\telse\n\t\t\t\t\t\tcomplex_return='gnu'\n\t\t\t\t\tfi\n\t\t\t\telif [[ \"$(uname -m)\" = \"ppc64le\" ]]; then\n\t\t\t\t\tcomplex_return='gnu'\n\t\t\t\telse\n\t\t\t\t\tcomplex_return='intel'\n\t\t\t\tfi\n\t\t\telif [[ ${fc_vendor} = GNU ]]; then\n\t\t\t\tcomplex_return='gnu'\n\t\t\telse\n\t\t\t\techo \"${script_name}: unable to determine Fortran compiler vendor!\"\n\t\t\t\tcomplex_return='gnu'\n\t\t\tfi\n\t\telse\n\t\t\tcomplex_return='gnu'\n\t\tfi\n\tfi\n\n\tif [[ ${complex_return} = gnu ]]; then\n\t\tcomplex_return_intel01='0'\n\telif [[ ${complex_return} = intel ]]; then\n\t\tcomplex_return_intel01='1'\n\telse\n\t\techo \"${script_name}: unknown complex return type \\\"${complex_return}\\\"! Cannot continue.\"\n\t\techo \"${script_name}: *** Acceptable values are \\\"gnu\\\" and \\\"intel\\\".\"\n\t\texit 1\n\tfi\n\n\techo \"${script_name}: configuring complex return type as \\\"${complex_return}\\\".\"\n\n\t# Set a default value and friendlier name for LIBPTHREAD\n\tlibpthread=\"${LIBPTHREAD--lpthread}\"\n\n\t# For Windows builds, clear the libpthread variable so that\n\t# no pthreads library is substituted into config.mk. (Windows builds\n\t# employ an implementation of pthreads that is internal to BLIS.)\n\tif [[ \"$is_win\" == \"yes\" && \"$cc_vendor\" == \"clang\" ]]; then\n\t\tlibpthread=\n\tfi\n\n\t# We also clear the libpthread variable for systemless builds\n\t# (--disable-system).\n\tif [[ \"$enable_system\" == \"no\" ]]; then\n\t\tlibpthread=\n\tfi\n\n\t# Create a #define for the configuration family (config_name).\n\tuconf=$(echo \"${config_name}\" | tr '[:lower:]' '[:upper:]')\n\tconfig_name_define=\"#define BLIS_FAMILY_${uconf}\\n\"\n\n\t# Create a list of #defines, one for each configuration in config_list.\n\tconfig_list_defines=\"\"\n\tfor conf in ${config_list}; do\n\n\t\t# Convert the current config name to uppercase.\n\t\tuconf=$(echo \"${conf}\" | tr '[:lower:]' '[:upper:]')\n\n\t\t# Create a #define and add it to the running list.\n\t\tconfig_define=\"BLIS_CONFIG_${uconf}\"\n\t\tconfig_list_defines=\"${config_list_defines}#define ${config_define}\\n\"\n\tdone\n\n\t# Create a list of #defines, one for each kernel set in kernel_list.\n\tkernel_list_defines=\"\"\n\tfor kern in ${kernel_list}; do\n\n\t\t# Convert the current config name to uppercase.\n\t\tuconf=$(echo \"${kern}\" | tr '[:lower:]' '[:upper:]')\n\n\t\t# Create a #define and add it to the running list.\n\t\tkernel_define=\"BLIS_KERNELS_${uconf}\"\n\t\tkernel_list_defines=\"${kernel_list_defines}#define ${kernel_define}\\n\"\n\tdone\n\n\t# Create a list of #includes, one for each addon in addon_list.\n\taddon_list_includes=\"\"\n\tfor addon in ${addon_list}; do\n\n\t\t# Create a #define and add it to the running list.\n\t\taddon_header=\"\\\"${addon}.h\\\"\"\n\t\taddon_list_includes=\"${addon_list_includes}#include ${addon_header}\\n\"\n\tdone\n\n\t# Make sure that omit_symbol_list only contains lowercase letters, digits,\n\t# underscores, and commas.\n\tomit_symbol_list_check=$(echo \"${omit_symbol_list}\" | sed -e \"s/[a-z0-9_, ]//g\")\n\n\tif [[ \"${omit_symbol_list_check}\" != \"\" ]]; then\n\t\techo \"${script_name}: --omit-symbol=LIST option contains unexpected characters: ${omit_symbol_list_check}\"\n\t\texit 1\n\tfi\n\n\t# Create a list of #defines, one for each symbol the user requested that we\n\t# omit. Note that first we convert the list's commas into spaces.\n\tomit_symbol_list=$(echo \"${omit_symbol_list}\" | sed -e \"s/,/ /g\")\n\tfor sym in ${omit_symbol_list}; do\n\n\t\t# Convert the current config name to uppercase.\n\t\tsym=$(echo \"${sym}\" | tr '[:lower:]' '[:upper:]')\n\n\t\t# Create a #define and add it to the running list.\n\t\tomit_define=\"BLIS_DISABLE_${sym}\"\n\t\tomit_symbol_list_defines=\"${omit_symbol_list_defines}#define ${omit_define}\\n\"\n\tdone\n\n\n\t# -- Determine whether we are performing an out-of-tree build --------------\n\n\tif [ \"${dist_path}\" != \"./\" ]; then\n\n\t\t# At this point, we know the user did not run \"./configure\". But we\n\t\t# have not yet ruled out \"<fullpath>/configure\" or some # equivalent\n\t\t# that uses relative paths. To further rule out these possibilities,\n\t\t# we create a dummy file in the current build directory.\n\t\ttouch \"./${dummy_file}\"\n\n\t\t# If the dummy file we just created in the current directory does not\n\t\t# appear in the source distribution path, then we are in a different\n\t\t# directory and thus we must create a symbolic link.\n\t\tif [ ! -f \"${dist_path}/${dummy_file}\" ]; then\n\t\t\tconfigured_oot=\"yes\"\n\t\t\t#echo \"${script_name}: detected out-of-tree build directory.\"\n\t\telse\n\t\t\tconfigured_oot=\"no\"\n\t\t\t#echo \"${script_name}: detected in-tree build directory.\"\n\t\tfi\n\n\t\t# Remove the dummy file.\n\t\trm -f \"./${dummy_file}\"\n\tfi\n\n\n\t# -- Instantiate configuration files from templates ------------------------\n\n\tadd_config_var version\n\tadd_config_var so_version_major\n\tadd_config_var so_version_minorbuild\n\tadd_config_var config_name\n\tadd_config_var config_list\n\tadd_config_var kernel_list\n\tadd_config_var full_config_list\n\tadd_config_var full_subconfig_list\n\tadd_config_var full_kernel_list\n\tadd_config_var kconfig_map\n\tadd_config_var os_name\n\tadd_config_var is_win\n\tadd_config_var is_msvc\n\tadd_config_var dist_path\n\tadd_config_var CC_VENDOR                 cc_vendor\n\tadd_config_var gcc_older_than_4_9_0\n\tadd_config_var gcc_older_than_6_1_0\n\tadd_config_var gcc_older_than_9_1_0\n\tadd_config_var gcc_older_than_10_3_0\n\tadd_config_var clang_older_than_9_0_0\n\tadd_config_var clang_older_than_12_0_0\n\tadd_config_var aocc_older_than_2_0_0\n\tadd_config_var aocc_older_than_3_0_0\n\tadd_config_var CC                        found_cc\n\tadd_config_var CXX                       found_cxx\n\tadd_config_var FC                        found_fc\n\tadd_config_var AR                        found_ar\n\tadd_config_var RANLIB                    found_ranlib\n\tadd_config_var PYTHON                    found_python\n\tadd_config_var libpthread\n\tadd_config_var cflags_preset\n\tadd_config_var cxxflags_preset\n\tadd_config_var ldflags_preset\n\tadd_config_var enable_asan\n\tadd_config_var debug_type\n\tadd_config_var enable_debug\n\tadd_config_var mk_enable_system          enable_system\n\tadd_config_var enable_system             enable_system_01\n\tadd_config_var threading_model\n\tadd_config_var prefix\n\tadd_config_var exec_prefix\n\tadd_config_var libdir\n\tadd_config_var includedir\n\tadd_config_var sharedir\n\tadd_config_var enable_verbose\n\tadd_config_var configured_oot\n\tadd_config_var enable_arg_max_hack\n\tadd_config_var mk_enable_static          enable_static\n\tadd_config_var mk_enable_shared          enable_shared\n\tadd_config_var enable_shared             enable_shared_01\n\tadd_config_var enable_rpath\n\tadd_config_var export_shared\n\tadd_config_var mk_enable_blas            enable_blas\n\tadd_config_var mk_enable_cblas           enable_cblas\n\tadd_config_var enable_blas               enable_blas_01\n\tadd_config_var enable_cblas              enable_cblas_01\n\tadd_config_var enable_amd_frame_tweaks\n\tadd_config_var mk_enable_memkind         enable_memkind\n\tadd_config_var enable_memkind            enable_memkind_01\n\tadd_config_var pragma_omp_simd\n\tadd_config_var addon_list\n\tadd_config_var sandbox\n\tadd_config_var config_name_define\n\tadd_config_var config_list_defines\n\tadd_config_var kernel_list_defines\n\tadd_config_var omit_symbol_list_defines\n\tadd_config_var enable_tls                enable_tls_01\n\tadd_config_var enable_openmp             enable_openmp_01\n\tadd_config_var enable_openmp_as_def      enable_openmp_as_def_01\n\tadd_config_var enable_pthreads           enable_pthreads_01\n\tadd_config_var enable_pthreads_as_def    enable_pthreads_as_def_01\n\tadd_config_var enable_hpx                enable_hpx_01\n\tadd_config_var enable_hpx_as_def         enable_hpx_as_def_01\n\tadd_config_var enable_jrir_rr            enable_jrir_rr_01\n\tadd_config_var enable_jrir_slab          enable_jrir_slab_01\n\tadd_config_var enable_jrir_tlb           enable_jrir_tlb_01\n\tadd_config_var enable_pba_pools          enable_pba_pools_01\n\tadd_config_var enable_sba_pools          enable_sba_pools_01\n\tadd_config_var enable_mem_tracing        enable_mem_tracing_01\n\tadd_config_var int_type_size\n\tadd_config_var blas_int_type_size\n\tadd_config_var enable_sup_handling       enable_sup_handling_01\n\tadd_config_var enable_trsm_preinversion  enable_trsm_preinversion_01\n\tadd_config_var enable_pragma_omp_simd    enable_pragma_omp_simd_01\n\tadd_config_var enable_sandbox            enable_sandbox_01\n\tadd_config_var complex_return_intel      complex_return_intel01\n\tadd_config_var addon_list_includes\n\tadd_config_var enable_addons             enable_addons_01\n\tadd_config_var enable_scalapack_compat   enable_scalapack_compat_01\n\n\tgenerate_config_file \"${config_mk_in_path}\"    \"${config_mk_out_path}\"\n\tgenerate_config_file \"${bli_config_h_in_path}\" \"${bli_config_h_out_path}\"\n\tgenerate_config_file \"${bli_addon_h_in_path}\"  \"${bli_addon_h_out_path}\"\n\n\t# -- Create top-level object directories -----------------------------------\n\n\t# Create obj sub-directories (if they do not already exist).\n\tbase_obj_dirpath=\"${obj_dirpath}/${config_name}\"\n\n\techo \"${script_name}: creating ${base_obj_dirpath}\"\n\tmkdir -p \"${base_obj_dirpath}\"\n\n\n\tobj_config_dirpath=\"${base_obj_dirpath}/${config_dir}\"\n\n\tmkdir -p \"${obj_config_dirpath}\"\n\tfor conf in ${config_list}; do\n\t\techo \"${script_name}: creating ${obj_config_dirpath}/${conf}\"\n\t\tmkdir -p \"${obj_config_dirpath}/${conf}\"\n\tdone\n\n\n\tobj_kernels_dirpath=\"${base_obj_dirpath}/${kernels_dir}\"\n\n\tmkdir -p \"${obj_kernels_dirpath}\"\n\tfor kern in ${kernel_list}; do\n\t\techo \"${script_name}: creating ${obj_kernels_dirpath}/${kern}\"\n\t\tmkdir -p \"${obj_kernels_dirpath}/${kern}\"\n\tdone\n\n\n\tobj_refkern_dirpath=\"${base_obj_dirpath}/${refkern_dir}\"\n\n\tmkdir -p \"${obj_refkern_dirpath}\"\n\tfor conf in ${config_list}; do\n\t\techo \"${script_name}: creating ${obj_refkern_dirpath}/${conf}\"\n\t\tmkdir -p \"${obj_refkern_dirpath}/${conf}\"\n\tdone\n\n\n\tobj_frame_dirpath=\"${base_obj_dirpath}/${frame_dir}\"\n\n\techo \"${script_name}: creating ${obj_frame_dirpath}\"\n\tmkdir -p \"${obj_frame_dirpath}\"\n\n\n\tif [ -n \"${addon_flag}\" ]; then\n\n\t\tobj_addon_dirpath=\"${base_obj_dirpath}/${addon_dir}\"\n\n\t\tfor addon in ${addon_list}; do\n\t\t\techo \"${script_name}: creating ${obj_addon_dirpath}/${addon}\"\n\t\t\tmkdir -p \"${obj_addon_dirpath}/${addon}\"\n\t\tdone\n\tfi\n\n\n\tif [ -n \"${sandbox_flag}\" ]; then\n\n\t\tobj_sandbox_dirpath=\"${base_obj_dirpath}/${sandbox_dir}\"\n\n\t\techo \"${script_name}: creating ${obj_sandbox_dirpath}/${sandbox}\"\n\t\tmkdir -p \"${obj_sandbox_dirpath}/${sandbox}\"\n\tfi\n\n\n\tobj_blastest_dirpath=\"${base_obj_dirpath}/${blastest_dir}\"\n\n\techo \"${script_name}: creating ${obj_blastest_dirpath}\"\n\tmkdir -p \"${obj_blastest_dirpath}\"\n\n\n\tobj_testsuite_dirpath=\"${base_obj_dirpath}/${testsuite_dir}\"\n\n\techo \"${script_name}: creating ${obj_testsuite_dirpath}\"\n\tmkdir -p \"${obj_testsuite_dirpath}\"\n\n\n\t# Create lib directory (if it does not already exist).\n\tbase_lib_dirpath=\"${lib_dirpath}/${config_name}\"\n\n\techo \"${script_name}: creating ${base_lib_dirpath}\"\n\tmkdir -p \"${base_lib_dirpath}\"\n\n\n\t# Create include directory (if it does not already exist).\n\tbase_include_dirpath=\"${include_dirpath}/${config_name}\"\n\n\techo \"${script_name}: creating ${base_include_dirpath}\"\n\tmkdir -p \"${base_include_dirpath}\"\n\n\n\t# -- Mirror source directory hierarchies to object directories -------------\n\n\t# Combine the config_list with the config_name and then remove duplicates.\n\tconfig_list_plus_name=$(rm_duplicate_words \"${config_list} ${config_name}\")\n\n\t# Mirror each of the sub-configuration directories to the object directory.\n\tfor conf in ${config_list_plus_name}; do\n\n\t\techo \"${script_name}: mirroring ${config_dirpath}/${conf} to ${obj_config_dirpath}/${conf}\"\n\t\t\"${mirror_tree_sh}\" \"${config_dirpath}/${conf}\" \"${obj_config_dirpath}/${conf}\"\n\tdone\n\n\t# Mirror optimized kernels source tree to its object sub-directory.\n\t# We perform the mirroring on each configuration/kernel sub-directory\n\t# within 'kernels'.\n\tfor kern in ${kernel_list}; do\n\n\t\t# Only mirror the optimized kernels source directory if it exists.\n\t\t# There are occasions where one of the sub-configurations in the\n\t\t# config_list does not correspond to a kernels sub-directory, such\n\t\t# as when architecture B is so close to architecture A that B can\n\t\t# use A's kernel source code unmodified (though perhaps with\n\t\t# different blocksizes).\n\t\t#if [ -d \"${kernels_dirpath}/${conf}\" ]; then\n\n\t\techo \"${script_name}: mirroring ${kernels_dirpath}/${kern} to ${obj_kernels_dirpath}/${kern}\"\n\t\t${mirror_tree_sh} \"${kernels_dirpath}/${kern}\" \"${obj_kernels_dirpath}/${kern}\"\n\t\t#else\n\t\t#\techo \"${script_name}: mirroring ${kernels_dirpath}/${conf} skipped... directory does not exist\"\n\t\t#fi\n\tdone\n\n\t# Mirror reference kernel source tree to its object sub-directory.\n\techo \"${script_name}: mirroring ${refkern_dirpath} to ${obj_refkern_dirpath}\"\n\t\"${mirror_tree_sh}\" \"${refkern_dirpath}\" \"${obj_refkern_dirpath}\"\n\n\t# Mirror reference kernels source tree to its object sub-directory.\n\tfor conf in ${config_list}; do\n\n\t\techo \"${script_name}: mirroring ${refkern_dirpath} to ${obj_refkern_dirpath}/${conf}\"\n\t\t\"${mirror_tree_sh}\" \"${refkern_dirpath}\" \"${obj_refkern_dirpath}/${conf}\"\n\tdone\n\n\t# Mirror framework source tree to its object sub-directory.\n\techo \"${script_name}: mirroring ${frame_dirpath} to ${obj_frame_dirpath}\"\n\t\"${mirror_tree_sh}\" \"${frame_dirpath}\" \"${obj_frame_dirpath}\"\n\n\t# Mirror the chosen addon source tree to its object sub-directory.\n\tif [[ -n ${addon_flag} ]]; then\n\n\t\tfor addon in ${addon_list}; do\n\n\t\t\techo \"${script_name}: mirroring ${addon_dirpath}/${addon} to ${obj_addon_dirpath}/${addon}\"\n\t\t\t\"${mirror_tree_sh}\" \"${addon_dirpath}/${addon}\" \"${obj_addon_dirpath}/${addon}\"\n\t\tdone\n\tfi\n\n\t# Mirror the chosen sandbox source tree to its object sub-directory.\n\tif [[ -n ${sandbox_flag} ]]; then\n\n\t\techo \"${script_name}: mirroring ${sandbox_dirpath}/${sandbox} to ${obj_sandbox_dirpath}/${sandbox}\"\n\t\t\"${mirror_tree_sh}\" \"${sandbox_dirpath}/${sandbox}\" \"${obj_sandbox_dirpath}/${sandbox}\"\n\tfi\n\n\n\t# -- Generate makefile fragements ------------------------------------------\n\n\tclist_contains_cname=$(is_in_list \"${config_name}\" \"${config_list}\")\n\n\t# If the config_list does not already contain the config_name (i.e.,\n\t# if config_name is an umbrella family), generate makefiles in that\n\t# directory. (In the next step, we will loop over the actual sub-\n\t# configurations and create fragments there as well.)\n\tif [[ ${clist_contains_cname} = false ]]; then\n\t\tcreate_makefile_fragment CONFIG \"${config_dirpath}/${config_name}\" \\\n\t\t                         \"${obj_config_dirpath}/${config_name}\"\n\tfi\n\n\t# Generate makefile fragments for each of the sub-configurations present\n\t# in the configuration list.\n\tfor conf in ${config_list}; do\n\t\tcreate_makefile_fragment CONFIG \"${config_dirpath}/${conf}\" \\\n\t\t                         \"${obj_config_dirpath}/${conf}\"\n\tdone\n\n\t# Generate makefile fragments for each of the kernel sets required by\n\t# the configuration list (in the kernel list).\n\tfor kern in ${kernel_list}; do\n\t\tcreate_makefile_fragment KERNELS \"${kernels_dirpath}/${kern}\" \\\n\t\t                         \"${obj_kernels_dirpath}/${kern}\"\n\tdone\n\n\t# Generate makefile fragments in the reference kernels directory.\n\tcreate_makefile_fragment REFKERN \"${refkern_dirpath}\" \\\n\t                         \"${obj_refkern_dirpath}\"\n\n\t# Generate makefile fragments in the framework directory.\n\tcreate_makefile_fragment FRAME \"${frame_dirpath}\" \\\n\t                         \"${obj_frame_dirpath}\"\n\n\t# Generate makefile fragments in the addon sub-directory.\n\tif [[ -n ${addon_flag} ]]; then\n\t\tfor addon in ${addon_list}; do\n\t\t\tcreate_makefile_fragment ADDON \"${addon_dirpath}/${addon}\" \\\n\t\t\t                         \"${obj_addon_dirpath}/${addon}\"\n\t\tdone\n\tfi\n\n\t# Generate makefile fragments in the sandbox sub-directory.\n\tif [[ -n ${sandbox_flag} ]]; then\n\t\tcreate_makefile_fragment SANDBOX \"${sandbox_dirpath}/${sandbox}\" \\\n\t\t                         \"${obj_sandbox_dirpath}/${sandbox}\"\n\tfi\n\n\n\t# -- Handle out-of-tree builds ---------------------------------------------\n\n\t# Under some circumstances, we need to create some symbolic links to\n\t# properly handle out-of-tree builds.\n\tif [[ ${configured_oot} = yes ]]; then\n\t\tfor file in Makefile blis.pc.in common.mk config; do\n\t\t\t# If symlink does not already exist in the current\n\t\t\t# directory, create a symbolic link to it. If one does exist, we\n\t\t\t# use -f to force creation of a new link.\n\t\t\tif [[ ! -e ${file} ]]; then\n\t\t\t\techo \"${script_name}: creating symbolic link to ${file}.\"\n\t\t\t\tln -s \"${dist_path}/${file}\" .\n\t\t\telif [[ -h ${file} ]]; then\n\t\t\t\techo \"${script_name}: symbolic link to ${file} already exists; forcing creation of new link.\"\n\t\t\t\tln -sf \"${dist_path}/${file}\" .\n\t\t\telse\n\t\t\t\techo \"${script_name}: Non-symbolic link file or directory '${file}' blocks creation of symlink.\"\n\t\t\t\techo \"${script_name}: *** Please remove this entity and re-run configure.\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\tdone\n\n\t\techo \"${script_name}: configured to build outside of source distribution.\"\n\telse\n\n\t\techo \"${script_name}: configured to build within top-level directory of source distribution.\"\n\tfi\n\n\tif [ \"${warn_user_generic}\" = \"1\" ]; then\n\n\t\techo \"${script_name}: \"\n\t\techo \"${script_name}: *** Unable to automatically detect hardware type! ***\"\n\t\techo \"${script_name}: \"\n\t\techo \"${script_name}: NOTE: configure was unable to identify a subconfiguration\"\n\t\techo \"${script_name}: optimized for your hardware. As a result, the 'generic'\"\n\t\techo \"${script_name}: subconfiguration (with low-performance reference kernels)\"\n\t\techo \"${script_name}: will be used. For support, please open an issue on GitHub\"\n\t\techo \"${script_name}: at https://github.com/flame/blis/issues.\"\n\t\techo \"${script_name}: \"\n\tfi\n\n\t# Exit peacefully.\n\treturn 0\n}\n\n\n#\n# -- plugin functions ----------------------------------------------------------\n#\n\nprint_usage_plugin()\n{\n\t# Use the version string in the 'version' file since we don't have\n\t# the patched version string yet.\n\tif [ -z \"${version}\" ]; then\n\t\tversion=$(<\"${version_filepath}\")\n\tfi\n\n\t# Echo usage info.\n\tcat <<EOF\n\n ${script_name} (BLIS ${version})\n\n Configure a BLIS plugin for compilation.\n\n Usage:\n\n   ${script_name} [options] [env. vars.] plugin_name\n\n Arguments:\n\n   plugin_name   The name of the plugin which is being configured. This\n                 name will form part of the symbol name for the kernel\n                 registration function. This argument is optional if it\n                 can be determined from the name of an existing\n                 bli_plugin_<plugin_name>.h file.\n\n Options:\n\n   --init\n\n                 A synonym for '--disable-examples --enable-templates --disable-build'.\n\n   --build\n\n                 A synonym for '--disable-examples --disable-templates --enable-build'.\n\n   --disable-examples, --enable-examples\n\n                 Do not include (created by default) example code for plugin\n                 registration, kernels, etc.\n\n   --disable-templates, --enable-templates\n\n                 Do not create (created by default) files which make up the\n                 basic plug-in file structure, for example if the plugin has\n                 already been created and only build files need to be generated.\n\n   --disable-build, --enable-build\n\n                 Do not create (created by default) files necessary for\n                 actually building the plugin. ${script_name} can be re-run\n                 later to generate these files if desired.\n\n   --enable-verbose-make, --disable-verbose-make\n\n                 Enable (disabled by default) verbose compilation output\n                 during make.\n\n   --enable-arg-max-hack --disable-arg-max-hack\n\n                 Enable (disabled by default) build system logic that\n                 will allow archiving/linking the static/shared library\n                 even if the command plus command line arguments exceeds\n                 the operating system limit (ARG_MAX).\n\n   -d DEBUG, --enable-debug[=DEBUG]\n\n                 Enable debugging symbols in the library. If argument\n                 DEBUG is given as 'opt', then optimization flags are\n                 kept in the framework, otherwise optimization is\n                 turned off.\n\n   --disable-static, --enable-static\n\n                 Disable (enabled by default) building BLIS as a static\n                 library. If the static library build is disabled, the\n                 shared library build must remain enabled.\n\n   --disable-shared, --enable-shared\n\n                 Disable (enabled by default) building BLIS as a shared\n                 library. If the shared library build is disabled, the\n                 static library build must remain enabled.\n\n   --enable-rpath, --disable-rpath\n\n                 Enable (disabled by default) setting an install_name for\n                 dynamic libraries on macOS which starts with @rpath rather\n                 than the absolute install path.\n\n   -e SYMBOLS, --export-shared[=SYMBOLS]\n\n                 Specify the subset of library symbols that are exported\n                 within a shared library. Valid values for SYMBOLS are:\n                 'public' (the default) and 'all'. By default, only\n                 functions and variables that belong to public APIs are\n                 exported in shared libraries. However, the user may\n                 instead export all symbols in BLIS, even those that were\n                 intended for internal use only. Note that the public APIs\n                 encompass all functions that almost any user would ever\n                 want to call, including the BLAS/CBLAS compatibility APIs\n                 as well as the basic and expert interfaces to the typed\n                 and object APIs that are unique to BLIS. Also note that\n                 changing this option to 'all' will have no effect in some\n                 environments, such as when compiling with clang on\n                 Windows.\n\n   --enable-asan, --disable-asan\n\n                 Enable (disabled by default) compiling and linking BLIS\n                 framework code with the AddressSanitizer (ASan) library.\n                 Optimized kernels are NOT compiled with ASan support due\n                 to limitations of register assignment in inline assembly.\n                 WARNING: ENABLING THIS OPTION WILL NEGATIVELY IMPACT\n                 PERFORMANCE. Please use only for informational/debugging\n                 purposes.\n\n   -p PATH, --path=PATH\n\n                 Look for the plugin source in PATH instead of the current\n                 directory. This option is used to build the plugin\n                 out-of-tree. In this case, only '--enable-build' (== '--build')\n                 may be specified.\n\n   -q, --quiet   Suppress informational output.\n\n   -f, --force   Overwrite any files in the current directory which are\n                 normally copied by configure-plugin, for example 'Makefile'\n                 and 'config_registry'.\n\n   -h, --help    Output this information and quit.\n\n Environment Variables:\n\n   CC            Specifies the C compiler to use.\n   CXX           Specifies the C++ compiler to use.\n   FC            Specifies the Fortran compiler to use.\n   AR            Specifies the static library archiver to use.\n   RANLIB        Specifies the ranlib (library indexer) executable to use.\n   CFLAGS        Specifies additional compiler flags to use (prepended).\n   LDFLAGS       Specifies additional linker flags to use (prepended).\n\n   Environment variables are traditionally set prior to running configure-plugin:\n\n     CC=gcc ./configure-plugin [options] plugin-name\n\n   However, they may also be specified as command line options, e.g.:\n\n     ./configure-plugin [options] CC=gcc plugin-name\n\n   Note that the compiler used must be compatible with the compiler used\n   to compile the BLIS library.\n\nEOF\n\n\t# Exit with non-zero exit status\n\texit 1\n}\n\nget_config_var()\n{\n\techo \"$(grep \"^ *$1 *:=\" ${sharedir}/blis/config.mk | sed 's/'$1' *:= *//')\"\n}\n\nmaybe_echo()\n{\n\t[ ${quiet_flag} == '0' ] && echo \"$@\"\n}\n\nstrip_examples()\n{\n\tlocal src dest\n\n\tsrc=\"$1\"\n\tdest=\"$2\"\n\n\tperl -p0 -e 's/[^\\n]*----->.*<-----[^\\n]*//gms;' -e 's/[^\\n]*<-----[^\\n]*\\n//gms;' \"${src}\" > \"${dest}\"\n}\n\nplugin_main()\n{\n\t# -- Basic names and paths --\n\n\t# The name of the script, stripped of any preceeding path.\n\tscript_name=${0##*/}\n\n\t# The path to the script. We need this to find the top-level directory\n\t# of the source distribution in the event that the user has chosen to\n\t# build elsewhere.\n\tsharedir=${0%\"/${script_name}\"}/..\n\tadd_config_var sharedir\n\n\t# Other paths which we'll need to build the plugin\n\tprefix=$(get_config_var prefix | sed 's/\\$/\\\\\\\\\\\\$/g')\n\texec_prefix=$(get_config_var exec_prefix | sed 's/\\$/\\\\\\\\\\\\$/g')\n\tlibdir=$(get_config_var libdir | sed 's/\\$/\\\\\\\\\\\\$/g')\n\tincludedir=$(get_config_var includedir | sed 's/\\$/\\\\\\\\\\\\$/g')\n\tadd_config_var prefix\n\tadd_config_var exec_prefix\n\tadd_config_var libdir\n\tadd_config_var includedir\n\n\t# Compiler information which might be overridden for this plugin.\n\tCC=\"${CC-$(get_config_var CC)}\"\n\tCXX=\"${CXX-$(get_config_var CXX)}\"\n\tFC=\"${FC-$(get_config_var FC)}\"\n\tPYTHON=\"${PYTHON-$(get_config_var PYTHON)}\"\n\tAR=\"${AR-$(get_config_var AR)}\"\n\tRANLIB=\"${RANLIB-$(get_config_var RANLIB)}\"\n\tadd_config_var CC        found_cc\n\tadd_config_var CC_VENDOR cc_vendor\n\tadd_config_var CXX       found_cxx\n\tadd_config_var FC        found_fc\n\tadd_config_var AR        found_ar\n\tadd_config_var RANLIB    found_ranlib\n\tadd_config_var PYTHON    found_python\n\n\tadd_config_var gcc_older_than_4_9_0\n\tadd_config_var gcc_older_than_6_1_0\n\tadd_config_var gcc_older_than_9_1_0\n\tadd_config_var gcc_older_than_10_3_0\n\tadd_config_var clang_older_than_9_0_0\n\tadd_config_var clang_older_than_12_0_0\n\tadd_config_var aocc_older_than_2_0_0\n\tadd_config_var aocc_older_than_3_0_0\n\n\tasm_dir=\"${sharedir}/blis\"\n\tomp_simd_path=\"${sharedir}/blis\"\n\n\t# Path to 'mirror-tree.sh' script.\n\tmirror_tree_sh=\"${sharedir}/blis/mirror-tree.sh\"\n\n\t# Path to 'gen-make-frags.sh' script.\n\tgen_make_frags_sh=\"${sharedir}/blis/gen-make-frag.sh\"\n\tgen_make_frags_dirpath=\"${sharedir}/blis\"\n\n\t# The major and minor/build .so version numbers.\n\tso_version_major=$(get_config_var SO_MAJOR)\n\tso_version_minorbuild=$(get_config_var SO_MINORB)\n\n\t# The preset value of CFLAGS and LDFLAGS (ie: compiler and linker flags\n\t# to use in addition to those determined by the build system).\n\tcflags_preset=$(get_config_var CFLAGS_PRESET)\n\tcxxflags_preset=$(get_config_var CXXFLAGS_PRESET)\n\tldflags_preset=$(get_config_var LDFLAGS_PRESET)\n\tadd_config_var cflags_preset\n\tadd_config_var cxxflags_preset\n\tadd_config_var ldflags_preset\n\n\t# Option variables.\n\tquiet_flag='0'\n\tforce_flag='0'\n\tshow_config_list='0'\n\texamples_flag='1'\n\tbuildfiles_flag='1'\n\ttemplates_flag='1'\n\n\t# Additional flags.\n\tenable_verbose=$(get_config_var ENABLE_VERBOSE)\n\tenable_static=$(get_config_var MK_ENABLE_STATIC)\n\tenable_shared=$(get_config_var MK_ENABLE_SHARED)\n\tenable_rpath=$(get_config_var MK_ENABLE_RPATH)\n\texport_shared=$(get_config_var EXPORT_SHARED)\n\tenable_asan=$(get_config_var MK_ENABLE_ASAN)\n\tenable_debug=$(get_config_var ENABLE_DEBUG)\n\tdebug_type=$(get_config_var DEBUG_TYPE)\n\tenable_arg_max_hack=$(get_config_var ARG_MAX_HACK)\n\tadd_config_var enable_verbose\n\tadd_config_var mk_enable_static enable_static\n\tadd_config_var mk_enable_shared enable_shared\n\tadd_config_var enable_rpath\n\tadd_config_var export_shared\n\tadd_config_var enable_asan\n\tadd_config_var enable_debug\n\tadd_config_var debug_type\n\tadd_config_var enable_arg_max_hack\n\n\t# -- Configuration registry --\n\n\t# The name of the chosen configuration (the configuration \"family\").\n\tconfig_name=$(get_config_var CONFIG_NAME)\n\n\t# The list of sub-configurations associated with config_name.\n\tconfig_list=''\n\n\t# The list of kernel sets that will be needed by the sub-configurations\n\t# in config_list.\n\tkernel_list=''\n\n\t# The list of kernel:sub-configuration pairs for all kernels contained\n\t# in kernel_list.\n\tkconfig_map=''\n\tadd_config_var kconfig_map\n\n\t# BLIS version.\n\tversion=$(get_config_var VERSION)\n\n\t# The list of all sub-configurations and configuration families.\n\tfull_config_list=$(get_config_var FULL_CONFIG_LIST)\n\tfull_subconfig_list=$(get_config_var FULL_SUBCONFIG_LIST)\n\n\t# The list of all kernel sets.\n\tfull_kernel_list=$(get_config_var FULL_KERNEL_LIST)\n\n\t# -- Command line option/argument parsing ----------------------------------\n\n\t# By default build in-tree\n\tplugin_dir=\".\"\n\n\tfound=true\n\twhile [[ $found = true ]]; do\n\n\t\t# Process our command line options.\n\t\tunset OPTIND\n\t\twhile getopts \":hcd:e:p:qf-:\" opt; do\n\t\t\tcase $opt in\n\t\t\t\t-)\n\t\t\t\t\tcase \"$OPTARG\" in\n\n\t\t\t\t\t\thelp)\n\t\t\t\t\t\t\tprint_usage_plugin\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tinit)\n\t\t\t\t\t\t\texamples_flag=0\n\t\t\t\t\t\t\ttemplates_flag=1\n\t\t\t\t\t\t\tbuildfiles_flag=0\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tbuild)\n\t\t\t\t\t\t\texamples_flag=0\n\t\t\t\t\t\t\ttemplates_flag=0\n\t\t\t\t\t\t\tbuildfiles_flag=1\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tquiet)\n\t\t\t\t\t\t\tquiet_flag=1\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tforce)\n\t\t\t\t\t\t\tforce_flag=1\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-examples)\n\t\t\t\t\t\t\texamples_flag=1\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-examples)\n\t\t\t\t\t\t\texamples_flag=0\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-templates)\n\t\t\t\t\t\t\ttemplates_flag=1\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-templates)\n\t\t\t\t\t\t\ttemplates_flag=0\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-build)\n\t\t\t\t\t\t\tbuildfiles_flag=1\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-build)\n\t\t\t\t\t\t\tbuildfiles_flag=0\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tpath=*)\n\t\t\t\t\t\t\tplugin_dir=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-debug)\n\t\t\t\t\t\t\tdebug_type=noopt\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tenable-debug=*)\n\t\t\t\t\t\t\tdebug_type=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-debug)\n\t\t\t\t\t\t\tdebug_type='off'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-asan)\n\t\t\t\t\t\t\tenable_asan='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-asan)\n\t\t\t\t\t\t\tenable_asan='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-verbose-make)\n\t\t\t\t\t\t\tenable_verbose='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-verbose-make)\n\t\t\t\t\t\t\tenable_verbose='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-arg-max-hack)\n\t\t\t\t\t\t\tenable_arg_max_hack='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-arg-max-hack)\n\t\t\t\t\t\t\tenable_arg_max_hack='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-static)\n\t\t\t\t\t\t\tenable_static='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-static)\n\t\t\t\t\t\t\tenable_static='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-shared)\n\t\t\t\t\t\t\tenable_shared='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-shared)\n\t\t\t\t\t\t\tenable_shared='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tenable-rpath)\n\t\t\t\t\t\t\tenable_rpath='yes'\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tdisable-rpath)\n\t\t\t\t\t\t\tenable_rpath='no'\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\texport-shared=*)\n\t\t\t\t\t\t\texport_shared=${OPTARG#*=}\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\tshow-config-list)\n\t\t\t\t\t\t\tshow_config_list=1\n\t\t\t\t\t\t\t;;\n\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tprint_usage_plugin\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac;;\n\t\t\t\th)\n\t\t\t\t\tprint_usage_plugin\n\t\t\t\t\t;;\n\t\t\t\td)\n\t\t\t\t\tdebug_type=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\te)\n\t\t\t\t\texport_shared=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\tp)\n\t\t\t\t\tplugin_dir=$OPTARG\n\t\t\t\t\t;;\n\t\t\t\tq)\n\t\t\t\t\tquiet_flag=1\n\t\t\t\t\t;;\n\t\t\t\tf)\n\t\t\t\t\tforce_flag=1\n\t\t\t\t\t;;\n\t\t\t\tc)\n\t\t\t\t\tshow_config_list=1\n\t\t\t\t\t;;\n\t\t\t\t\\?)\n\t\t\t\t\tprint_usage_plugin\n\t\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\t\tshift $((OPTIND - 1))\n\n\t\t# Parse environment variables\n\t\tfound=false\n\t\twhile [ $# -gt 0 ]; do\n\t\t\tcase $1 in\n\t\t\t\t*=*)\n\t\t\t\t\tvar=$(expr \"$1\" : '\\([^=]*\\)=')\n\t\t\t\t\tvalue=$(expr \"$1\" : '[^=]*=\\(.*\\)')\n\t\t\t\t\teval \"export $var=\\$value\"\n\t\t\t\t\tshift\n\t\t\t\t\tfound=true\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\tdone\n\n\t# The path to the directory in which we are building. We do this to\n\t# make explicit that we distinguish between the top-level directory\n\t# of the distribution and the directory in which we are building.\n\tcur_dirpath=\".\"\n\n\t# The name of the (top-level) configuration directory.\n\tconfig_dir='config'\n\tconfig_dirpath=\"${plugin_dir}/${config_dir}\"\n\n\t# The name of the (top-level) kernels directory.\n\tkernels_dir='kernels'\n\tkernels_dirpath=\"${plugin_dir}/${kernels_dir}\"\n\n\t# The name of the (top-level) reference kernels directory.\n\trefkern_dir='ref_kernels'\n\trefkern_dirpath=\"${plugin_dir}/${refkern_dir}\"\n\n\tadd_config_var plugin_dir\n\n\t# Get the name of the plugin to build.\n\tif [ $# -gt \"1\" ]; then   # more than one configuration argument given.\n\t\tprint_usage_plugin\n\telif [ $# == \"0\" ]; then   # try to guess the plugin name.\n\t\tplugin_h=$(ls ${plugin_dir}/bli_plugin_*.h 2>/dev/null)\n\t\tif [ -z ${plugin_h} ]; then\n\t\t\tprint_usage_plugin\n\t\telse\n\t\t\tplugin_name=$(echo ${plugin_h} | sed -e 's/.*bli_plugin_//' -e 's/\\.h//')\n\t\tfi\n\telse\n\t\tplugin_name=\"${1}\"\n\tfi\n\tadd_config_var plugin_name\n\n\tmaybe_echo \"${script_name}: configuring BLIS plugin '${plugin_name}'\"\n\n\tif [[ ${plugin_dir} != . ]]; then\n\t\tif [ ${templates_flag} == '1' ] ||\n\t\t   [ ${examples_flag}  == '1' ]; then\n\t\t\techo \"${script_name}: *** Only --enable-build may be specified when configuring out-of-tree.\"\n\t\t\techo \"${script_name}: *** Please use '--build' with '-p' or '--path'.\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# Check if CFLAGS is non-empty.\n\tif [ -n \"${CFLAGS}\" ]; then\n\t\tcflags_preset=\"${CFLAGS}\"\n\t\tmaybe_echo \"${script_name}: detected preset CFLAGS; prepending:\"\n\t\tmaybe_echo \"${script_name}:   ${cflags_preset}\"\n\telse\n\t\tcflags_preset=''\n\t\tmaybe_echo \"${script_name}: no preset CFLAGS detected.\"\n\tfi\n\n\t# Check if CXXFLAGS is non-empty.\n\tif [ -n \"${CXXFLAGS}\" ]; then\n\t\tcxxflags_preset=\"${CXXFLAGS}\"\n\t\tmaybe_echo \"${script_name}: detected preset CXXFLAGS; prepending:\"\n\t\tmaybe_echo \"${script_name}:   ${cxxflags_preset}\"\n\telse\n\t\tcxxflags_preset=''\n\t\tmaybe_echo \"${script_name}: no preset CXXFLAGS detected.\"\n\tfi\n\n\t# Check if LDFLAGS is non-empty.\n\tif [ -n \"${LDFLAGS}\" ]; then\n\t\tldflags_preset=\"${LDFLAGS}\"\n\t\tmaybe_echo \"${script_name}: detected preset LDFLAGS; prepending:\"\n\t\tmaybe_echo \"${script_name}:   ${ldflags_preset}\"\n\telse\n\t\tldflags_preset=''\n\t\tmaybe_echo \"${script_name}: no preset LDFLAGS detected.\"\n\tfi\n\n\t# Check if the verbose make flag was specified.\n\tif [[ ${enable_verbose} = yes ]]; then\n\t\tmaybe_echo \"${script_name}: enabling verbose make output. (disable with 'make V=0'.)\"\n\telse\n\t\tmaybe_echo \"${script_name}: disabling verbose make output. (enable with 'make V=1'.)\"\n\tfi\n\n\t# Check if the ARG_MAX hack was requested.\n\tif [[ ${enable_arg_max_hack} = yes ]]; then\n\t\tmaybe_echo \"${script_name}: enabling ARG_MAX hack.\"\n\telse\n\t\techo \"${script_name}: disabling ARG_MAX hack.\"\n\tfi\n\n\t# Check if the debug flag was specified.\n\tif [[ ${debug_type} = opt ]]; then\n\t\tenable_debug='yes'\n\t\tmaybe_echo \"${script_name}: enabling debug symbols with optimizations.\"\n\telif [[ ${debug_type} = sde ]]; then\n\t\tenable_debug='yes'\n\t\tmaybe_echo \"${script_name}: enabling SDE processor emulation.\"\n\telif [[ ${debug_type} = noopt ]]; then\n\t\tenable_debug='yes'\n\t\tmaybe_echo \"${script_name}: enabling debug symbols; optimizations disabled.\"\n\telse\n\t\tdebug_type='off'\n\t\tenable_debug='no'\n\t\tmaybe_echo \"${script_name}: debug symbols disabled.\"\n\tfi\n\n\t# Check if the AddressSanitizer flag was specified.\n\tif [[ ${enable_asan} = yes ]]; then\n\t\tmaybe_echo \"${script_name}: enabling AddressSanitizer support (except for optimized kernels).\"\n\telse\n\t\tenable_asan='no'\n\t\tmaybe_echo \"${script_name}: AddressSanitizer support disabled.\"\n\tfi\n\n\t# Check if the static lib flag was specified.\n\tif   [[ ${enable_static} = yes && ${enable_shared} = yes ]]; then\n\t\tmaybe_echo \"${script_name}: building BLIS plugin '${plugin_name}' as both static and shared libraries.\"\n\t\tenable_shared_01=1\n\telif [[ ${enable_static} = no && ${enable_shared} = yes ]]; then\n\t\tmaybe_echo \"${script_name}: building BLIS plugin '${plugin_name}' as a shared library (static library disabled).\"\n\t\tenable_shared_01=1\n\telif [[ ${enable_static} = yes && ${enable_shared} = no ]]; then\n\t\tmaybe_echo \"${script_name}: building BLIS plugin '${plugin_name}' as a static library (shared library disabled).\"\n\t\tenable_shared_01=0\n\telse\n\t\tmaybe_echo \"${script_name}: Both static and shared libraries were disabled.\"\n\t\tmaybe_echo \"${script_name}: *** Please enable one (or both) to continue.\"\n\t\texit 1\n\tfi\n\n\t# Check if the \"export shared\" flag was specified.\n\tif [[ ${export_shared} = all ]]; then\n\t\tif [[ ${enable_shared} = yes ]]; then\n\t\t\techo \"${script_name}: exporting all symbols within shared library.\"\n\t\telse\n\t\t\techo \"${script_name}: ignoring request to export all symbols within shared library.\"\n\t\tfi\n\telif [[ ${export_shared} = public ]]; then\n\t\tif [[ ${enable_shared} = yes ]]; then\n\t\t\techo \"${script_name}: exporting only public symbols within shared library.\"\n\t\tfi\n\telse\n\t\techo \"${script_name}: *** Invalid argument '${export_shared}' to --export-shared option given.\"\n\t\techo \"${script_name}: *** Please use 'public' or 'all'.\"\n\t\texit 1\n\tfi\n\n\tif [ ${templates_flag} == '1' ]; then\n\n\t\tplugin_h=\"\\\"bli_plugin_${plugin_name}.h\\\"\"\n\n\t\t# -- config_registry --\n\n\t\tmaybe_echo -n \"${script_name}: copying the configuration registry...\"\n\n\t\tif [ -e config_registry ] && [ ${force_flag} == '0' ]; then\n\t\t\tmaybe_echo \"already done\"\n\t\telse\n\t\t\tcp ${sharedir}/blis/config_registry config_registry\n\t\t\tmaybe_echo \"done\"\n\t\tfi\n\n\t\t# -- bli_plugin_register.c --\n\n\t\tmaybe_echo -n \"${script_name}: copying bli_plugin_register.c...\"\n\n\t\tif [ -e bli_plugin_register.c ] && [ ${force_flag} == '0' ]; then\n\t\t\tmaybe_echo \"already done\"\n\t\telse\n\t\t\tif [ ${examples_flag} == '1' ]; then\n\t\t\t\tcp ${sharedir}/blis/plugin/bli_plugin_register.c bli_plugin_register.c\n\t\t\telse\n\t\t\t\tstrip_examples ${sharedir}/blis/plugin/bli_plugin_register.c bli_plugin_register.c\n\t\t\tfi\n\t\t\tperl -pi -e \"s|\\@PLUGIN_HEADER\\@|${plugin_h}|;\" -e \"s|\\@plugin_name\\@|${plugin_name}|;\" bli_plugin_register.c\n\t\t\tmaybe_echo \"done\"\n\t\tfi\n\n\t\t# -- bli_plugin_<name>.h --\n\n\t\tif [ -e bli_plugin_${plugin_name}.h ] && [ ${force_flag} == '0' ]; then\n\t\t\tmaybe_echo \"${script_name}: creating bli_plugin_${plugin_name}.h from ${sharedir}/blis/plugin/bli_plugin.h.in...already done\"\n\t\telse\n\t\t\tif [ ${examples_flag} == '1' ]; then\n\t\t\t\tgenerate_config_file ${sharedir}/blis/plugin/bli_plugin.h.in bli_plugin_${plugin_name}.h\n\t\t\telse\n\t\t\t\tgenerate_config_file ${sharedir}/blis/plugin/bli_plugin.h.in bli_plugin_${plugin_name}_.h\n\t\t\t\tstrip_examples bli_plugin_${plugin_name}_.h bli_plugin_${plugin_name}.h\n\t\t\t\trm bli_plugin_${plugin_name}_.h\n\t\t\tfi\n\t\tfi\n\n\t\t# -- ref_kernels directory --\n\n\t\tmaybe_echo -n \"${script_name}: creating ref_kernels directory...\"\n\n\t\tdone=\"true\"\n\t\tif [ ${examples_flag} == '1' ]; then\n\t\t\tfiles=\"bli_plugin_init_ref.c my_kernel_1_ref.c my_kernel_2_ref.c\"\n\t\telse\n\t\t\tfiles=\"bli_plugin_init_ref.c\"\n\t\tfi\n\t\tfor file in ${files}; do\n\t\t\tif [ ! -e ref_kernels/${file} ] || [ ${force_flag} == '1' ]; then\n\t\t\t\tmkdir -p ref_kernels\n\t\t\t\tif [ ${examples_flag} == '1' ]; then\n\t\t\t\t\tcp ${sharedir}/blis/plugin/${file} ref_kernels/${file}\n\t\t\t\telse\n\t\t\t\t\tstrip_examples ${sharedir}/blis/plugin/${file} ref_kernels/${file}\n\t\t\t\tfi\n\t\t\t\tperl -pi -e \"s|\\@PLUGIN_HEADER\\@|${plugin_h}|;\" -e \"s|\\@plugin_name\\@|${plugin_name}|;\" ref_kernels/${file}\n\t\t\t\tdone=\"false\"\n\t\t\tfi\n\t\tdone\n\n\t\tif [ \"${done}\" == \"true\" ]; then\n\t\t\tmaybe_echo \"already done\"\n\t\telse\n\t\t\tmaybe_echo \"done\"\n\t\tfi\n\n\t\t# -- config directory --\n\n\t\tmaybe_echo \"${script_name}: creating config directories:\"\n\n\t\tfor config in ${full_config_list}; do\n\t\t\tmaybe_echo -n \"${script_name}:   config/${config}...\"\n\n\t\t\tif [ -e config/${config}/make_defs.mk ] && [ ${force_flag} == '0' ]; then\n\t\t\t\tmaybe_echo \"already done\"\n\t\t\telse\n\t\t\t\tmkdir -p config/${config}\n\t\t\t\tcp ${sharedir}/blis/config/${config}/make_defs.mk config/${config}\n\t\t\t\tmaybe_echo \"done\"\n\t\t\tfi\n\t\tdone\n\n\t\tfor config in ${full_subconfig_list}; do\n\t\t\tif [ ! -e config/${config}/bli_plugin_init_${config}.c ] || [ ${force_flag} == '1' ]; then\n\t\t\t\tif [ ${config} != zen3 ] || [ ${examples_flag} == '0' ]; then\n\t\t\t\t\tstrip_examples ${sharedir}/blis/plugin/bli_plugin_init_zen3.c config/${config}/bli_plugin_init_${config}.c\n\t\t\t\t\tperl -pi -e \"s/zen3/${config}/g\" config/${config}/bli_plugin_init_${config}.c\n\t\t\t\telse\n\t\t\t\t\tcp ${sharedir}/blis/plugin/bli_plugin_init_zen3.c config/${config}/bli_plugin_init_${config}.c\n\t\t\t\tfi\n\t\t\t\tperl -pi -e \"s|\\@PLUGIN_HEADER\\@|${plugin_h}|;\" -e \"s|\\@plugin_name\\@|${plugin_name}|;\" config/${config}/bli_plugin_init_${config}.c\n\t\t\tfi\n\n\t\t\tif [ ! -e config/${config}/bli_kernel_defs_${config}.h ] || [ ${force_flag} == '1' ]; then\n\t\t\t\tcp ${sharedir}/blis/config/${config}/bli_kernel_defs_${config}.h config/${config}/bli_kernel_defs_${config}.h\n\t\t\tfi\n\t\tdone\n\n\t\t# -- kernels directory --\n\n\t\tmaybe_echo \"${script_name}: creating kernels directories:\"\n\n\t\tfor kernels in ${full_kernel_list}; do\n\t\t\tmaybe_echo -n \"${script_name}:   kernels/${kernels}...\"\n\n\t\t\tif [ -e kernels/${kernels} ] && [ ${force_flag} == '0' ]; then\n\t\t\t\tmaybe_echo \"already done\"\n\t\t\telse\n\t\t\t\tmkdir -p kernels/${kernels}\n\t\t\t\tmaybe_echo \"done\"\n\t\t\tfi\n\t\tdone\n\n\t\tif [ ${examples_flag} == '1' ]; then\n\t\t\tif [ ! -e kernels/zen3/my_kernel_1_zen3.c ] || [ ${force_flag} == '1' ]; then\n\t\t\t\tcp ${sharedir}/blis/plugin/my_kernel_1_zen3.c kernels/zen3\n\t\t\t\tperl -pi -e \"s|\\@PLUGIN_HEADER\\@|${plugin_h}|;\" -e \"s|\\@plugin_name\\@|${plugin_name}|;\" kernels/zen3/my_kernel_1_zen3.c\n\t\t\tfi\n\t\tfi\n\n\tfi\n\n\tif [ ${buildfiles_flag} == '1' ]; then\n\n\t\tcheck_build_tools\n\n\t\t# Try to determine whether the chosen compiler supports #pragma omp simd.\n\t\tpragma_omp_simd=$(has_pragma_omp_simd)\n\t\tadd_config_var pragma_omp_simd\n\n\t\t# -- Makefile --\n\n\t\tmaybe_echo -n \"${script_name}: copying Makefile...\"\n\n\t\tif [ -e Makefile ] && [ ${force_flag} == '0' ]; then\n\t\t\tmaybe_echo \"already done\"\n\t\telse\n\t\t\tcp ${sharedir}/blis/plugin/Makefile Makefile\n\t\t\tmaybe_echo \"done\"\n\t\tfi\n\n\t\t# -- config.mk --\n\n\t\t# The name/path to the registry (master list) of supported configurations.\n\t\tregistry_file=\"config_registry\"\n\t\tregistry_filepath=${plugin_dir}/${registry_file}\n\n\t\t# Read the registered configuration names and lists into associative\n\t\t# arrays.\n\t\techo -n \"${script_name}: reading configuration registry...\"\n\t\tread_registry_file \"${registry_filepath}\"\n\t\techo \"done.\"\n\n\t\tbuild_and_check_configurations\n\n\t\tgenerate_config_file ${sharedir}/blis/plugin/config.mk.in config.mk\n\n\t\t# -- Makefile fragments --\n\n\t\t# The extra '/.' on the FRAME call is necessary to trick create_makefile_fragments\n\t\t# into not taking the last entry in ${plugin_dir} as the 'current directory name'.\n\t\tcreate_makefile_fragment FRAME ${plugin_dir}/. obj/${config_name} false\n\t\tcreate_makefile_fragment CONFIG ${config_dirpath} obj/${config_name}/config\n\t\tcreate_makefile_fragment KERNELS ${kernels_dirpath} obj/${config_name}/kernels\n\t\tcreate_makefile_fragment REFKERN ${refkern_dirpath} obj/${config_name}/ref_kernels\n\n\tfi\n\n\t# Exit peacefully.\n\treturn 0\n}\n\n\n# The script's main entry point, passing all parameters given.\ncase ${0##*/} in\n\tconfigure)\n\t\tblis_main \"$@\"\n\t\t;;\n\tconfigure-plugin)\n\t\tplugin_main \"$@\"\n\t\t;;\nesac\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "frame",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernels",
          "type": "tree",
          "content": null
        },
        {
          "name": "ref_kernels",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testsuite",
          "type": "tree",
          "content": null
        },
        {
          "name": "travis",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}