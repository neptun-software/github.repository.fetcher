{
  "metadata": {
    "timestamp": 1736709834931,
    "page": 303,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "citusdata/pg_cron",
      "stars": 3004,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5087890625,
          "content": "# Global excludes across all subdirectories\n*.o\n*.so\n*.so.[0-9]\n*.so.[0-9].[0-9]\n*.sl\n*.sl.[0-9]\n*.sl.[0-9].[0-9]\n*.dylib\n*.dll\n*.a\n*.mo\n*.pot\nobjfiles.txt\n.deps/\n*.gcno\n*.gcda\n*.gcov\n*.gcov.out\nlcov.info\ncoverage/\n*.vcproj\n*.vcxproj\nwin32ver.rc\n*.exe\nlib*dll.def\nlib*.pc\n\n# Local excludes in root directory\n/config.log\n/config.status\n/pgsql.sln\n/pgsql.sln.cache\n/Debug/\n/Release/\n/autom4te.cache\n/Makefile.global\n/src/Makefile.custom\n\npg_cron--?.?.sql\n\nlog/\nresults/\nsrc/*.bc\n\nregression.diffs\nregression.out\ntmp_check/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.158203125,
          "content": "### pg_cron v1.6.5 (December 12, 2024) ###\n\n* Fix superuser check before adding job to CronJobHash by @CyberDem0n in https://github.com/citusdata/pg_cron/pull/367\n* Fix leap year scheduling problem by @zhjwpku in https://github.com/citusdata/pg_cron/pull/365\n* Fix possible buffer underflow issue in cron parsing by @marcoslot in https://github.com/citusdata/pg_cron/commit/5c10a8a24527b79c301eaeb04317846f2426dcd5\n* Fix compilation warnings by @reshke in https://github.com/citusdata/pg_cron/pull/363\n\n### pg_cron v1.6.4 (August 9, 2024) ###\n\n* Fix bug with invalidation of CachedCronJobRelationId by @CyberDem0n in https://github.com/citusdata/pg_cron/pull/346\n* Select procedure based on argument type of cron_unschedule_named by @CyberDem0n in https://github.com/citusdata/pg_cron/pull/347\n* Revert \"Remove unnecessary lastStartTime reset\" d90843de92d5e517a23b1e17da56dc08c496c774 per https://github.com/citusdata/pg_cron/issues/342\n\n### pg_cron v1.6.3 (July 23, 2024) ###\n\n* Fix pointer reuse bug causing off-by-1 day of month by @marcoslot in https://github.com/citusdata/pg_cron/pull/292\n* Update the database when scheduling an existing job by @nuno-faria in https://github.com/citusdata/pg_cron/pull/293\n* Make cron_unschedule_named() accept v1.4 SQL signature. by @nmisch in https://github.com/citusdata/pg_cron/pull/299\n* Allow interrupts in pg_cron launcher loop to avoid deadlock by @Ngalstyan4 in https://github.com/citusdata/pg_cron/pull/319\n* Fixes possible overflow by @sminux in https://github.com/citusdata/pg_cron/pull/326\n* Log start & end time for all failed runs by @kketch in https://github.com/citusdata/pg_cron/pull/324\n* Replace MemoryContextResetAndDeleteChildren macro with MemoryContextReset for PG 17 compatibility by @esiaero in https://github.com/citusdata/pg_cron/pull/332\n* Fix compiler error on Illumos by @japinli in https://github.com/citusdata/pg_cron/pull/317\n\n### pg_cron v1.6.2 (October 20, 2023) ###\n\n* Fixes off-by-1 issue in day of month\n\n### pg_cron v1.6.1 (September 26, 2023) ###\n\n* Restart the pg_cron scheduler if cancelled\n* Fix the schema version to 1.6 (requires ALTER EXTENSION pg_cron UPDATE)\n\n### pg_cron v1.6.0 (August 29, 2023) ###\n\n* Adds a cron.launch_active_jobs setting, by Bertrand Drouvot\n* Adds support for PostgreSQL 16, by Cristoph Berg & zhjwpku\n* Adds scheduling on the last day of the month, by zhjwpku\n* Fixes a possible memory corruption bug, by zhjwpku\n\n### pg_cron v1.5.2 (April 9, 2023) ###\n\n* Fixes a bug that caused crashes after upgrading binaries to 1.5, by Polina Bungina\n\n### pg_cron v1.5.1 (February 9, 2023) ###\n\n* Fixes a bug that caused incorrect parsing of some crons schedules\n\n### pg_cron v1.5.0 (February 7, 2023) ###\n\n* Adds the possibility of scheduling a job with a 1-59 second interval\n* Adds a cron.timezone setting to configure the timezone of cron schedules\n* Removes pg_stat_activity reporting of internal pg_cron metadata queries\n* Fixes a bug that caused issues with long job names\n* Fixes a bug that caused inactive @reboot jobs to still run\n* Fixes a bug that could limit concurrency for background workers\n* Fixes a bug that prevented compiling on ARM\n* Fixes regression tests for PostgreSQL <= 12\n\n### pg_cron v1.4.2 (July 15, 2022) ###\n\n* Fixes a bug that could lead to privilege escalation if users can trigger CREATE EXTENSION\n* Add compatibility for PostgreSQL 15\n* Fixes a bug that could cause unschedule to crash\n* Ensures that cron.max_running_jobs is not higher than possible connection count\n\n### pg_cron v1.4.1 (September 25, 2021) ###\n\n* Fixes PostgreSQL 11- support\n\n### pg_cron v1.4.0 (September 16, 2021) ###\n\n* Adds a cron.alter_job function to change job properties, by Bertrand Drouvot\n* Adds a cron.schedule_in_database function to schedule in a custom database, by Bertrand Drouvot\n* Adds a cron.log_min_messages setting to control log_min_messages in pg_cron launcher, by Bertrand Drouvot\n* Adds a cron.enable_superuser_jobs setting to disallow superuser jobs\n* Fixes a bug that could cause jobs to hang when using cron.use_background_workers, by Bertrand Drouvot\n* Fixes a small memory allocation bug, by @mrdrivingduck\n* PostgreSQL 14 is supported (no changes were needed)\n\n### pg_cron v1.3.1 (March 29, 2021) ###\n\n* Fixes a memory leak\n\n### pg_cron v1.3.0 (September 30, 2020) ###\n\n* Background worker support by Bertrand Drouvot\n* Audit table support by Bertrand Drouvot\n* PostgreSQL 13 support by Alexander Kukushkin\n* Schedule jobs by name\n* Fixes a bug that could cause cron.schedule to crash with long schedules\n* Fixes a bug that could cause cron.schedule to get into an infinite loop\n* Fixes a bug that caused overlapping runs not to start\n\n### pg_cron v1.2.0 (August 30, 2019) ###\n\n* PostgreSQL 12 support by dverite\n* Fixes a bug that caused the cron.job table to not appear in pg_dump\n\n### pg_cron v1.1.4 (April 4, 2019) ###\n\n* Adds a cron.host setting to make the postgres host configurable\n* Fixes a bug that could cause segmentation fault after cron.unschedule\n\n### pg_cron v1.1.3 (November 15, 2018) ###\n\n* Fixes a bug that causes pg_cron to run during pg_upgrade\n* Fixes a bug that causes pg_cron to show up incorrectly in pg_stat_activity in PG11\n\n### pg_cron v1.1.2 (July 10, 2018) ###\n\n* PostgreSQL 11 support by dverite\n* Fix a clang build error by kxjhlele\n\n### pg_cron v1.1.1 (June 7, 2018) ###\n\n* Fixed a bug that would cause new jobs to be created as inactive\n\n### pg_cron v1.1.0 (March 22, 2018) ###\n\n* Add new 'active' column on cron.job table to enable or disable job(s).\n* Added a regression test, simply run 'make installcheck'\n* Set relevant application_name in pg_stat_activity\n* Increased pg_cron version to 1.1\n\n### pg_cron v1.0.2 (October 6, 2017) ###\n\n* PostgreSQL 10 support\n* Restrict the maximum number of concurrent tasks\n* Ensure table locks on cron.job are kept after schedule/unschedule\n\n### pg_cron v1.0.1 (June 30, 2017) ###\n\n* Fixes a memory leak that occurs when a connection fails immediately\n* Fixes a memory leak due to switching memory context when loading metadata\n* Fixes a segmentation fault that can occur when using an error message after PQclear\n\n### pg_cron v1.0.0 (January 27, 2017) ###\n\n* Use WaitLatch instead of pg_usleep when there are no tasks\n\n### pg_cron v1.0.0-rc.1 (December 14, 2016) ###\n\n* Initial 1.0 candidate\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.896484375,
          "content": "Copyright (c) 2015, Citus Data\n\nPermission to use, copy, modify, and distribute this software and its documentation for any purpose, without fee, and without a written agreement is hereby granted, provided that the above copyright notice and this paragraph and the following two paragraphs appear in all copies.\n\nIN NO EVENT SHALL CITUS DATA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF CITUS DATA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nCITUS DATA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS, AND CITUS DATA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n"
        },
        {
          "name": "META.json",
          "type": "blob",
          "size": 1.3037109375,
          "content": "{\n    \"name\": \"pg_cron\",\n    \"abstract\": \"Periodic job scheduler for PostgreSQL\",\n    \"description\": \"Sets up a background worker that periodically runs queries in the background\",\n    \"version\": \"1.0\",\n    \"maintainer\": \"\\\"Marco Slot\\\" <marco@citusdata.com>\",\n    \"license\": {\n\t\t\"PostgreSQL\": \"http://www.postgresql.org/about/licence\"\n\t},\n    \"prereqs\": {\n       \"runtime\": {\n          \"requires\": {\n             \"PostgreSQL\": \"9.5.0\"\n          }\n       }\n    },\n    \"provides\": {\n        \"pg_cron\": {\n            \"abstract\": \"Periodic background job scheduler\",\n            \"file\": \"pg_cron--1.0.sql\",\n            \"docfile\": \"README.md\",\n            \"version\": \"1.0\"\n        }\n    },\n    \"release_status\": \"stable\",\n    \"resources\": {\n        \"homepage\": \"https://citusdata.com/\",\n        \"bugtracker\": {\n            \"web\": \"https://github.com/citusdata/pg_cron/issues\",\n            \"mailto\": \"support@citusdata.com\"\n        },\n        \"repository\": {\n          \"url\":  \"git://github.com/citusdata/pg_cron.git\",\n          \"web\":  \"https://github.com/citusdata/pg_cron\",\n          \"type\": \"git\"\n        }\n    },\n\n    \"generated_by\": \"\\\"Marco Slot\\\" <marco@citusdata.com>\",\n\n    \"tags\": [\n        \"cron\", \"background worker\"\n    ],\n\n    \"meta-spec\": {\n        \"version\": \"1.0.0\",\n        \"url\": \"http://pgxn.org/meta/spec.txt\"\n    }\n}\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9306640625,
          "content": "# src/test/modules/pg_cron/Makefile\n\nEXTENSION = pg_cron\n\nDATA_built = $(EXTENSION)--1.0.sql\nDATA = $(wildcard $(EXTENSION)--*--*.sql)\n\nREGRESS_OPTS =--temp-config=./pg_cron.conf --temp-instance=./tmp_check\nREGRESS = pg_cron-test \n\n# compilation configuration\nMODULE_big = $(EXTENSION)\nOBJS = $(patsubst %.c,%.o,$(wildcard src/*.c))\nifeq ($(CC),gcc)\n    PG_CPPFLAGS = -std=c99 -Wall -Wextra -Werror -Wno-unused-parameter -Wno-uninitialized -Wno-implicit-fallthrough -Iinclude -I$(libpq_srcdir)\nelse\n    PG_CPPFLAGS = -std=c99 -Wall -Wextra -Werror -Wno-unused-parameter -Wno-implicit-fallthrough -Iinclude -I$(libpq_srcdir)\nendif\nifeq ($(shell uname -s),SunOS)\n    PG_CPPFLAGS += -Wno-sign-compare -D__EXTENSIONS__\nendif\nSHLIB_LINK = $(libpq)\nEXTRA_CLEAN += $(addprefix src/,*.gcno *.gcda) # clean up after profiling runs\n\nPG_CONFIG ?= pg_config\nPGXS := $(shell $(PG_CONFIG) --pgxs)\ninclude $(PGXS)\n\n$(EXTENSION)--1.0.sql: $(EXTENSION).sql\n\tcat $^ > $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.703125,
          "content": "[![Citus Banner](/github-banner.png)](https://www.citusdata.com/)\n\n## What is pg_cron?\n\npg_cron is a simple cron-based job scheduler for PostgreSQL (10 or higher) that runs inside the database as an extension. It uses the same syntax as regular cron, but it allows you to schedule PostgreSQL commands directly from the database. You can also use '[1-59] seconds' to schedule a job based on an interval.\n\npg_cron also allows you using '$' to indicate last day of the month.\n\n```sql\n-- Delete old data on Saturday at 3:30am (GMT)\nSELECT cron.schedule('30 3 * * 6', $$DELETE FROM events WHERE event_time < now() - interval '1 week'$$);\n schedule\n----------\n       42\n\n-- Vacuum every day at 10:00am (GMT)\nSELECT cron.schedule('nightly-vacuum', '0 10 * * *', 'VACUUM');\n schedule\n----------\n       43\n\n-- Change to vacuum at 3:00am (GMT)\nSELECT cron.schedule('nightly-vacuum', '0 3 * * *', 'VACUUM');\n schedule\n----------\n       43\n\n-- Stop scheduling jobs\nSELECT cron.unschedule('nightly-vacuum' );\n unschedule \n------------\n t\n\nSELECT cron.unschedule(42);\n unschedule\n------------\n          t\n\n-- Vacuum every Sunday at 4:00am (GMT) in a database other than the one pg_cron is installed in\nSELECT cron.schedule_in_database('weekly-vacuum', '0 4 * * 0', 'VACUUM', 'some_other_database');\n schedule\n----------\n       44\n\n-- Call a stored procedure every 5 seconds\nSELECT cron.schedule('process-updates', '5 seconds', 'CALL process_updates()');\n\n-- Process payroll at 12:00 of the last day of each month\nSELECT cron.schedule('process-payroll', '0 12 $ * *', 'CALL process_payroll()');\n```\n\npg_cron can run multiple jobs in parallel, but it runs at most one instance of a job at a time. If a second run is supposed to start before the first one finishes, then the second run is queued and started as soon as the first run completes.\n\nThe schedule uses the standard cron syntax, in which * means \"run every time period\", and a specific number means \"but only at this time\":\n\n```\n ┌───────────── min (0 - 59)\n │ ┌────────────── hour (0 - 23)\n │ │ ┌─────────────── day of month (1 - 31) or last day of the month ($)\n │ │ │ ┌──────────────── month (1 - 12)\n │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to\n │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)\n │ │ │ │ │\n │ │ │ │ │\n * * * * *\n```\n\nAn easy way to create a cron schedule is: [crontab.guru](http://crontab.guru/).\n\nThe code in pg_cron that handles parsing and scheduling comes directly from the cron source code by Paul Vixie, hence the same options are supported.\n\n## Installing pg_cron\n\nInstall on Red Hat, CentOS, Fedora, Amazon Linux with PostgreSQL 16 using [PGDG](https://yum.postgresql.org/repopackages/):\n\n```bash\n# Install the pg_cron extension\nsudo yum install -y pg_cron_16\n```\n\nInstall on Debian, Ubuntu with PostgreSQL 16 using [apt.postgresql.org](https://wiki.postgresql.org/wiki/Apt):\n\n```bash\n# Install the pg_cron extension\nsudo apt-get -y install postgresql-16-cron\n```\n\nYou can also install pg_cron by building it from source:\n\n```bash\ngit clone https://github.com/citusdata/pg_cron.git\ncd pg_cron\n# Ensure pg_config is in your path, e.g.\nexport PATH=/usr/pgsql-16/bin:$PATH\nmake && sudo PATH=$PATH make install\n```\n\n## Setting up pg_cron\n\nTo start the pg_cron background worker when PostgreSQL starts, you need to add pg_cron to `shared_preload_libraries` in postgresql.conf. Note that pg_cron does not run any jobs as a long a server is in [hot standby](https://www.postgresql.org/docs/current/static/hot-standby.html) mode, but it automatically starts when the server is promoted.\n\n```\n# add to postgresql.conf\n\n# required to load pg_cron background worker on start-up\nshared_preload_libraries = 'pg_cron'\n```\n\nBy default, the pg_cron background worker expects its metadata tables to be created in the \"postgres\" database. However, you can configure this by setting the `cron.database_name` configuration parameter in postgresql.conf.\n```\n# add to postgresql.conf\n\n# optionally, specify the database in which the pg_cron background worker should run (defaults to postgres)\ncron.database_name = 'postgres'\n```\n`pg_cron` may only be installed to one database in a cluster. If you need to run jobs in multiple databases, use `cron.schedule_in_database()`.\n\nPreviously pg_cron could only use GMT time, but now you can adapt your time by setting `cron.timezone` in postgresql.conf.\n```\n# add to postgresql.conf\n\n# optionally, specify the timezone in which the pg_cron background worker should run (defaults to GMT). E.g:\ncron.timezone = 'PRC'\n```\n\nAfter restarting PostgreSQL, you can create the pg_cron functions and metadata tables using `CREATE EXTENSION pg_cron`.\n\n```sql\n-- run as superuser:\nCREATE EXTENSION pg_cron;\n\n-- optionally, grant usage to regular users:\nGRANT USAGE ON SCHEMA cron TO marco;\n```\n\n### Ensuring pg_cron can start jobs\n\n**Important**: By default, pg_cron uses libpq to open a new connection to the local database, which needs to be allowed by [pg_hba.conf](https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html). \nIt may be necessary to enable `trust` authentication for connections coming from localhost in  for the user running the cron job, or you can add the password to a [.pgpass file](https://www.postgresql.org/docs/current/static/libpq-pgpass.html), which libpq will use when opening a connection. \n\nYou can also use a unix domain socket directory as the hostname and enable `trust` authentication for local connections in [pg_hba.conf](https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html), which is normally safe:\n```\n# Connect via a unix domain socket:\ncron.host = '/tmp'\n\n# Can also be an empty string to look for the default directory:\ncron.host = ''\n```\n\nAlternatively, pg_cron can be configured to use background workers. In that case, the number of concurrent jobs is limited by the `max_worker_processes` setting, so you may need to raise that.\n\n```\n# Schedule jobs via background workers instead of localhost connections\ncron.use_background_workers = on\n# Increase the number of available background workers from the default of 8\nmax_worker_processes = 20\n```\n\nFor security, jobs are executed in the database in which the `cron.schedule` function is called with the same permissions as the current user. In addition, users are only able to see their own jobs in the `cron.job` table.\n\n```sql\n-- View active jobs\nselect * from cron.job;\n```\n\n## Viewing job run details\n\nYou can view the status of running and recently completed job runs in the `cron.job_run_details`:\n\n```sql\nselect * from cron.job_run_details order by start_time desc limit 5;\n┌───────┬───────┬─────────┬──────────┬──────────┬───────────────────┬───────────┬──────────────────┬───────────────────────────────┬───────────────────────────────┐\n│ jobid │ runid │ job_pid │ database │ username │      command      │  status   │  return_message  │          start_time           │           end_time            │\n├───────┼───────┼─────────┼──────────┼──────────┼───────────────────┼───────────┼──────────────────┼───────────────────────────────┼───────────────────────────────┤\n│    10 │  4328 │    2610 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:30:00.098164+01 │ 2023-02-07 09:30:00.130729+01 │\n│    10 │  4327 │    2609 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:29:00.015168+01 │ 2023-02-07 09:29:00.832308+01 │\n│    10 │  4321 │    2603 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:28:00.011965+01 │ 2023-02-07 09:28:01.420901+01 │\n│    10 │  4320 │    2602 │ postgres │ marco    │ select process()  │ failed    │ server restarted │ 2023-02-07 09:27:00.011833+01 │ 2023-02-07 09:27:00.72121+01  │\n│     9 │  4320 │    2602 │ postgres │ marco    │ select do_stuff() │ failed    │ job canceled     │ 2023-02-07 09:26:00.011833+01 │ 2023-02-07 09:26:00.22121+01  │\n└───────┴───────┴─────────┴──────────┴──────────┴───────────────────┴───────────┴──────────────────┴───────────────────────────────┴───────────────────────────────┘\n(10 rows)\n```\n\nThe records in `cron.job_run_details` are not cleaned automatically, but every user that can schedule cron jobs also has permission to delete their own `cron.job_run_details` records. \n\nEspecially when you have jobs that run every few seconds, it can be a good idea to clean up regularly, which can easily be done using pg_cron itself:\n\n```sql\n-- Delete old cron.job_run_details records of the current user every day at noon\nSELECT  cron.schedule('delete-job-run-details', '0 12 * * *', $$DELETE FROM cron.job_run_details WHERE end_time < now() - interval '7 days'$$);\n```\n\nIf you do not want to use `cron.job_run_details` at all, then you can add `cron.log_run = off` to `postgresql.conf`.\n\n## Extension settings\n\nThe pg_cron extension supports the following configuration parameters:\n\n| Setting                          | Default     | Description                                                                              |\n| ---------------------------------| ----------- | ---------------------------------------------------------------------------------------- |\n| `cron.database_name`             | `postgres`  | Database in which the pg_cron background worker should run.                              |\n| `cron.enable_superuser_jobs`     | `on`        | Allow jobs to be scheduled as superusers.                                                |\n| `cron.host`                      | `localhost` | Hostname to connect to postgres.                                                         |\n| `cron.launch_active_jobs`        | `on`        | When off, disables all active jobs without requiring a server restart                    |\n| `cron.log_min_messages`          | `WARNING`   | log_min_messages for the launcher bgworker.                                              |\n| `cron.log_run`                   | `on`        | Log all run details in the`cron.job_run_details` table.                                  |\n| `cron.log_statement`             | `on`        | Log all cron statements prior to execution.                                              |\n| `cron.max_running_jobs`          | `32`        | Maximum number of jobs that can be running at the same time.                             |\n| `cron.timezone`                  | `GMT`       | Timezone in which the pg_cron background worker should run.                              |\n| `cron.use_background_workers`    | `off`       | Use background workers instead of client connections.                                    |\n\n### Changing settings\n\nTo view setting configurations, run:\n\n```sql\nSELECT * FROM pg_settings WHERE name LIKE 'cron.%';\n```\n\nSetting can be changed in the postgresql.conf file or with the below command:\n\n```sql\nALTER SYSTEM SET cron.<parameter> TO '<value>';\n```\n\n`cron.log_min_messages` and `cron.launch_active_jobs` have a [setting context](https://www.postgresql.org/docs/current/view-pg-settings.html#VIEW-PG-SETTINGS) of `sighup`. They can be finalized by executing `SELECT pg_reload_conf();`.\n\nAll the other settings have a postmaster context and only take effect after a server restart.\n\n## Example use cases\n\nArticles showing possible ways of using pg_cron:\n\n* [Auto-partitioning using pg_partman](https://www.citusdata.com/blog/2018/01/24/citus-and-pg-partman-creating-a-scalable-time-series-database-on-postgresql/)\n* [Computing rollups in an analytical dashboard](https://www.citusdata.com/blog/2017/12/27/real-time-analytics-dashboards-with-citus/)\n* [Deleting old data, vacuum](https://www.citusdata.com/blog/2016/09/09/pgcron-run-periodic-jobs-in-postgres/)\n* [Feeding cats](http://bonesmoses.org/2016/09/09/pg-phriday-irrelevant-inclinations/)\n* [Routinely invoking a function](https://fluca1978.github.io/2019/05/21/pgcron.html)\n* [Postgres as a cron server](https://supabase.io/blog/2021/03/05/postgres-as-a-cron-server)\n\n## Managed services\n\nThe following table keeps track of which of the major managed Postgres services support pg_cron.\n\n| Service       | Supported     |\n| ------------- |:-------------:|\n| [Aiven](https://aiven.io/postgresql) | :heavy_check_mark: |\n| [Alibaba Cloud](https://www.alibabacloud.com/help/doc-detail/150355.htm) | :heavy_check_mark: |\n| [Amazon RDS](https://aws.amazon.com/rds/postgresql/)     | :heavy_check_mark:      |          |\n| [Azure](https://azure.microsoft.com/en-us/services/postgresql/) | :heavy_check_mark:  |\n| [Crunchy Bridge](https://www.crunchydata.com/products/crunchy-bridge/?ref=producthunt) | :heavy_check_mark: |\n| [DigitalOcean](https://www.digitalocean.com/products/managed-databases/) | :heavy_check_mark: |\n| [Google Cloud](https://cloud.google.com/sql/postgresql/) | :heavy_check_mark: |\n| [Heroku](https://elements.heroku.com/addons/heroku-postgresql) | :x: | \n| [Instaclustr](https://instaclustr.com) | :heavy_check_mark:  |\n| [Neon](https://neon.tech/docs/extensions/extensions-intro#tooling-admin) | :heavy_check_mark: | \n| [ScaleGrid](https://scalegrid.io/postgresql.html) | :heavy_check_mark:  |\n| [Scaleway](https://www.scaleway.com/en/database/) | :heavy_check_mark:  |\n| [Supabase](https://supabase.io/docs/guides/database) | :heavy_check_mark:  |\n| [Tembo](https://tembo.io) | :heavy_check_mark:  |\n| [YugabyteDB](https://www.yugabyte.com/) | :heavy_check_mark:  |\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "expected",
          "type": "tree",
          "content": null
        },
        {
          "name": "github-banner.png",
          "type": "blob",
          "size": 4.0419921875,
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "pg_cron--1.0--1.1.sql",
          "type": "blob",
          "size": 0.0986328125,
          "content": "/* pg_cron--1.0--1.1.sql */\n\nALTER TABLE cron.job ADD COLUMN active boolean not null default 'true';\n"
        },
        {
          "name": "pg_cron--1.1--1.2.sql",
          "type": "blob",
          "size": 0.1513671875,
          "content": "/* pg_cron--1.1--1.2.sql */\n\nSELECT pg_catalog.pg_extension_config_dump('cron.job', '');\nSELECT pg_catalog.pg_extension_config_dump('cron.jobid_seq', '');\n"
        },
        {
          "name": "pg_cron--1.2--1.3.sql",
          "type": "blob",
          "size": 1.4052734375,
          "content": "/* pg_cron--1.2--1.3.sql */\n\nCREATE SEQUENCE cron.runid_seq;\nCREATE TABLE cron.job_run_details (\n\tjobid bigint,\n\trunid bigint primary key default pg_catalog.nextval('cron.runid_seq'),\n\tjob_pid integer,\n\tdatabase text,\n\tusername text,\n\tcommand text,\n\tstatus text,\n\treturn_message text,\n\tstart_time timestamptz,\n\tend_time timestamptz\n);\n\nGRANT SELECT ON cron.job_run_details TO public;\nGRANT DELETE ON cron.job_run_details TO public;\nALTER TABLE cron.job_run_details ENABLE ROW LEVEL SECURITY;\nCREATE POLICY cron_job_run_details_policy ON cron.job_run_details USING (username OPERATOR(pg_catalog.=) current_user);\n\nSELECT pg_catalog.pg_extension_config_dump('cron.job_run_details', '');\nSELECT pg_catalog.pg_extension_config_dump('cron.runid_seq', '');\n\nALTER TABLE cron.job ADD COLUMN jobname name;\n\nCREATE UNIQUE INDEX jobname_username_idx ON cron.job (jobname, username);\nALTER TABLE cron.job ADD CONSTRAINT jobname_username_uniq UNIQUE USING INDEX jobname_username_idx;\n\nCREATE FUNCTION cron.schedule(job_name name, schedule text, command text)\n    RETURNS bigint\n    LANGUAGE C STRICT\n    AS 'MODULE_PATHNAME', $$cron_schedule_named$$;\nCOMMENT ON FUNCTION cron.schedule(name,text,text)\n    IS 'schedule a pg_cron job';\n\nCREATE FUNCTION cron.unschedule(job_name name)\n    RETURNS bool\n    LANGUAGE C STRICT\n    AS 'MODULE_PATHNAME', $$cron_unschedule_named$$;\nCOMMENT ON FUNCTION cron.unschedule(name)\n    IS 'unschedule a pg_cron job';\n"
        },
        {
          "name": "pg_cron--1.3--1.4.sql",
          "type": "blob",
          "size": 1.599609375,
          "content": "/* pg_cron--1.3--1.4.sql */\n\n/* cron_schedule_named expects job name to be text */\nDROP FUNCTION cron.schedule(name,text,text);\nCREATE FUNCTION cron.schedule(job_name text,\n                              schedule text,\n                              command text)\nRETURNS bigint\nLANGUAGE C\nAS 'MODULE_PATHNAME', $$cron_schedule_named$$;\nCOMMENT ON FUNCTION cron.schedule(text,text,text)\nIS 'schedule a pg_cron job';\n\nCREATE FUNCTION cron.alter_job(job_id bigint,\n\t\t\t\t\t\t\t\tschedule text default null,\n\t\t\t\t\t\t\t\tcommand text default null,\n\t\t\t\t\t\t\t\tdatabase text default null,\n\t\t\t\t\t\t\t\tusername text default null,\n\t\t\t\t\t\t\t\tactive boolean default null)\nRETURNS void\nLANGUAGE C\nAS 'MODULE_PATHNAME', $$cron_alter_job$$;\n\nCOMMENT ON FUNCTION cron.alter_job(bigint,text,text,text,text,boolean)\nIS 'Alter the job identified by job_id. Any option left as NULL will not be modified.';\n\n/* admin should decide whether alter_job is safe by explicitly granting execute */\nREVOKE ALL ON FUNCTION cron.alter_job(bigint,text,text,text,text,boolean) FROM public;\n\nCREATE FUNCTION cron.schedule_in_database(job_name text,\n\t\t\t\t\t\t\t\t\t\t  schedule text,\n\t\t\t\t\t\t\t\t\t\t  command text,\n\t\t\t\t\t\t\t\t\t\t  database text,\n\t\t\t\t\t\t\t\t\t\t  username text default null,\n\t\t\t\t\t\t\t\t\t\t  active boolean default 'true')\nRETURNS bigint\nLANGUAGE C\nAS 'MODULE_PATHNAME', $$cron_schedule_named$$;\n\nCOMMENT ON FUNCTION cron.schedule_in_database(text,text,text,text,text,boolean)\nIS 'schedule a pg_cron job';\n\n/* admin should decide whether cron.schedule_in_database is safe by explicitly granting execute */\nREVOKE ALL ON FUNCTION cron.schedule_in_database(text,text,text,text,text,boolean) FROM public;\n"
        },
        {
          "name": "pg_cron--1.4--1.4-1.sql",
          "type": "blob",
          "size": 0.3505859375,
          "content": "/* pg_cron--1.4--1.4-1.sql */\n\n/*\n * pg_dump will read from these sequences. Grant everyone permission\n * to read from the sequence. That way, a user with usage on the cron\n * schema can also do pg_dump. This does not grant write/nextval\n * permission.\n */\nGRANT SELECT ON SEQUENCE cron.jobid_seq TO public;\nGRANT SELECT ON SEQUENCE cron.runid_seq TO public;\n"
        },
        {
          "name": "pg_cron--1.4-1--1.5.sql",
          "type": "blob",
          "size": 0.2998046875,
          "content": "ALTER TABLE cron.job ALTER COLUMN jobname TYPE text;\n\nDROP FUNCTION cron.unschedule(name);\nCREATE FUNCTION cron.unschedule(job_name text)\n    RETURNS bool\n    LANGUAGE C STRICT\n    AS 'MODULE_PATHNAME', $$cron_unschedule_named$$;\nCOMMENT ON FUNCTION cron.unschedule(text)\n    IS 'unschedule a pg_cron job';\n"
        },
        {
          "name": "pg_cron--1.5--1.6.sql",
          "type": "blob",
          "size": 0.02734375,
          "content": "/* no SQL changes in 1.6 */\n"
        },
        {
          "name": "pg_cron.conf",
          "type": "blob",
          "size": 0.0361328125,
          "content": "shared_preload_libraries = 'pg_cron'\n"
        },
        {
          "name": "pg_cron.control",
          "type": "blob",
          "size": 0.1376953125,
          "content": "comment = 'Job scheduler for PostgreSQL'\ndefault_version = '1.6'\nmodule_pathname = '$libdir/pg_cron'\nrelocatable = false\nschema = pg_catalog\n"
        },
        {
          "name": "pg_cron.sql",
          "type": "blob",
          "size": 2.2060546875,
          "content": "DO $$\nBEGIN\n   IF pg_catalog.current_database() OPERATOR(pg_catalog.<>) pg_catalog.current_setting('cron.database_name') AND pg_catalog.current_database() OPERATOR(pg_catalog.<>) 'contrib_regression' THEN\n      RAISE EXCEPTION 'can only create extension in database %',\n                      pg_catalog.current_setting('cron.database_name')\n      USING DETAIL = 'Jobs must be scheduled from the database configured in 'OPERATOR(pg_catalog.||)\n                     'cron.database_name, since the pg_cron background worker 'OPERATOR(pg_catalog.||)\n                     'reads job descriptions from this database.',\n            HINT = pg_catalog.format('Add cron.database_name = ''%s'' in postgresql.conf 'OPERATOR(pg_catalog.||)\n                          'to use the current database.', pg_catalog.current_database());\n   END IF;\nEND;\n$$;\n\nCREATE SCHEMA cron;\nCREATE SEQUENCE cron.jobid_seq;\n\nCREATE TABLE cron.job (\n\tjobid bigint primary key default pg_catalog.nextval('cron.jobid_seq'),\n\tschedule text not null,\n\tcommand text not null,\n\tnodename text not null default 'localhost',\n\tnodeport int not null default pg_catalog.inet_server_port(),\n\tdatabase text not null default pg_catalog.current_database(),\n\tusername text not null default current_user\n);\nGRANT SELECT ON cron.job TO public;\nALTER TABLE cron.job ENABLE ROW LEVEL SECURITY;\nCREATE POLICY cron_job_policy ON cron.job USING (username OPERATOR(pg_catalog.=) current_user);\n\nCREATE FUNCTION cron.schedule(schedule text, command text)\n    RETURNS bigint\n    LANGUAGE C STRICT\n    AS 'MODULE_PATHNAME', $$cron_schedule$$;\nCOMMENT ON FUNCTION cron.schedule(text,text)\n    IS 'schedule a pg_cron job';\n\nCREATE FUNCTION cron.unschedule(job_id bigint)\n    RETURNS bool\n    LANGUAGE C STRICT\n    AS 'MODULE_PATHNAME', $$cron_unschedule$$;\nCOMMENT ON FUNCTION cron.unschedule(bigint)\n    IS 'unschedule a pg_cron job';\n\nCREATE FUNCTION cron.job_cache_invalidate()\n    RETURNS trigger\n    LANGUAGE C\n    AS 'MODULE_PATHNAME', $$cron_job_cache_invalidate$$;\nCOMMENT ON FUNCTION cron.job_cache_invalidate()\n    IS 'invalidate job cache';\n\nCREATE TRIGGER cron_job_cache_invalidate\n    AFTER INSERT OR UPDATE OR DELETE OR TRUNCATE\n    ON cron.job\n    FOR STATEMENT EXECUTE PROCEDURE cron.job_cache_invalidate();\n"
        },
        {
          "name": "sql",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}