{
  "metadata": {
    "timestamp": 1736710180566,
    "page": 868,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lexbor/lexbor",
      "stars": 1676,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.6767578125,
          "content": "language: c\ncompiler:\n  - clang\n  - gcc\ninstall: skip\n\nenv:\n  global:\n    - PROCS=2\n    - secure: \"Zh2oYit2y9TJb0U1omqoN2UMxVJAn08pJKTPOxHEsFOkDrNaLI2rptXYRJ1TjRNpOKc6FXDYt+Ut0lIehmJ9qOcBFs2sn6laRitytiA5eBrKdifyaJCNvF2PyZWgilRBBN2DyFJQJmWQRLz3w/bWbyHSpD10g6P0n92FGHXMyUEAqq0swmGE9HVug8cZYnJ8DfUGyHHp0+sxWOIKCVzi+UHisCGIYs4xkvidV7D0dVNIM3CsZfBvyNeRRtOzwsGVqx07PVjIWPjo9KZ38ndgz+sk3b74Ip/fYQ0iEGlZ6U+t+lMGBq1kZVMewSjgcStYI8lV5FedIlNK2bVoUQdta6uQi1kg7tJYmyM9FPiQ+SEN2WyoRg54Rr/Xaw9CGwP3qZ2FcL3TWBKLY3EKm2TJGxqhtqJt9pgbNoVimeH5KvyYZB2mdd3eK7a3Zf4TobTy0qcuKxXDI9UpkUsrp2WmTppXzuradBU0IjBGsaIbwGJSWyhq1l7U0Jl2qF2vXf0HckUVDZOieEEtGQxrJeX+BtM0N7hQ674T74LCQ9xuHdL9ZEcyxGk8fzKkB5aLSW3j+1i9E4tq9Ycf085ISCWmp1lbpXQj5JDZbiw9GxoGXPJfW0VKlKP7NUd1eSq16Ym37DcVUuXyPJobyxe7DujoZbeRXLMEA1pVeJU6ZEp9+BA=\"\n  matrix:\n    - TARGET=test\n    - OS=el DIST=6\n    - OS=el DIST=7\n    - OS=fedora DIST=24\n    - OS=fedora DIST=25\n    - OS=ubuntu DIST=precise\n    - OS=ubuntu DIST=trusty\n    - OS=ubuntu DIST=xenial\n    - OS=ubuntu DIST=yakkety\n    - OS=debian DIST=wheezy\n    - OS=debian DIST=jessie\n    - OS=debian DIST=stretch\n\nbefore_script:\n  - (\n      mkdir build;\n      cd build;\n      cmake .. -DCMAKE_BUILD_TYPE=Release -DLEXBOR_BUILD_TESTS=ON\n    )\n\nscript:\n  - make -C build -j${PROCS}\n  - make test -C build -j${PROCS}\n\naddons:\n  apt:\n    sources:\n      - george-edison55-precise-backports\n    packages:\n      - cmake-data\n      - cmake\n  coverity_scan:\n    project:\n      name: \"lexborisov/lexbor\"\n      description: \"Lexbor is an open source HTML Renderer library\"\n    notification_email: lex.borisov@gmail.com\n    build_command_prepend: \"cmake . -DLEXBOR_BUILD_TESTS=ON\"\n    build_command: \"make -j\"\n    branch_pattern: coverity_scan\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.5478515625,
          "content": "# Changelog\n\n## [Unreleased]\n\n## [2.4.0] - 2024-11-12\n### Added\n- Core: improve performance using SWAR.\n- URL: added APIs to modify the URL object.\n- URL: support for cloning urls.\n- URL: removing newlines and tabs before parsing.\n- Test: added performance test for HTML.\n- Test:KV: added escape special character \\x.\n\n### Fixed\n- Core: fixed build perf without LEXBOR_WITH_PERF define.\n- HTML: fixed fragment parsing for tags not in data state.\n- HTML: fixed use-of-uninitialized-value in encoding function.\n- HTML: NULL dereference in lxb_html_document_parse_fragment_chunk_begin().\n- CSS: fixed use-of-uninitialized-value in parsing function.\n- CSS: fixed parse '|=' attribute value matching for selectors.\n- Selectors: fixed potential NULL pointer dereference.\n- Selectors: fixed matching of anb-of selectors.\n- URL: fixed buffer overflow for host parsing with base URL.\n- URL: fixed remove leading and trailing spaces for broken UTF-8.\n- URL: fixed memory leak if a URL contained \\n\\r\\t.\n- URL: fixed memory leak after destroy parser.\n- Unicode: fixed incorrect order of verification in IDNA.\n- Unicode: fixed a potential memory leak.\n- Punycode: fixed potential memory leak.\n- PunyCode: fixed use-of-uninitialized-value for large decode data.\n- Encoding: fixed incorrect code point check for ISO 2022 JP.\n\n### Changed\n- Encoding: updated GB18030-2022 index.\n- Encoding: reduce the size for static data.\n- URL: performance improvement.\n\nSpecial thanks for patches, fixes and hints: Niels Dossche @nielsdos,\nMáté Kocsis @kocsismate, Sergey Fedorov @barracuda156, Peter Kokot @petk.\n\n## [2.3.0] - 2023-08-17\n### Added\n- Added new module Unicode.\n- Added new module Punycode.\n- Added new module URL.\n- Added Unicode IDNA processing.\n- Added new tests.\n- Core: new functions for data conversations.\n- CSS: added initial properties.\n- CSS: added more than 70 new properties for parsing.\n- Encoding: added decode function for valid UTF-8.\n- Grammar: added new grammars for testing CSS properties.\n- Test: added fuzzer for CSS StyleSheet.\n\n### Fixed\n- Core: fixed test failure in Hash on 32-bit architectures. Thanks @nmeum.\n- CSS: fixed a couple of crashes related to lack of variable validation.\n- CSS: fixed use-after-poison for declarations.\n- CSS: fixed offset for token End-Of-File.\n- CSS: fixed Qualified Rule prelude offset.\n- Various Cppcheck report fixes.\n\n### Changed\n- CSS: renamed LXB_CSS_SYNTAX_TOKEN__TERMINATED to LXB_CSS_SYNTAX_TOKEN__END.\n- Removed deprecated function 'sprintf' for macOS.\n\n## [2.2.0] - 2023-04-06\n### Added\n- Added clone functions for DOM/HTML nodes.\n- CMake: fixed build for Windows.\n- Support overriding default memory functions. (thanks @zyc9012)\n- Parsing CSS StyleSheet. Styles, declarations, properties.\n- HTML: added events (insert, remove, destroy) for elements.\n- Added styles parsing inside the style tag.\n- Added style recalculating for an element when it changes.\n- Added Grammar for generate test for CSS Property.\n- Added examples for Styles, CSS StyleSheet parsing.\n\n### Fixed\n- HTML: fixed text node serialization without parent.\n- HTML: fixed finding/getting title tag for HTML namespace.\n- HTML: fixed adding attributes for foreign elements.\n- Fixed memory leak in examples and tests.\n- Fixed memory leak for qualified name set.\n\n### Changed\n- Minimal CMake version 2.8.12.\n- Completely changed approach to parsing CSS (selectors, properties, styles).\n- Removed XCode project files.\n\n## [2.1.0] - 2021-08-05\n### Added\n- CSS: parsing selectors.\n- Selectors for find DOM/HTML nodes.\n- Build: clang fuzzer support.\n\n### Fixed\n- Core: fixed includes in \"core.h\".\n- DOM: fixed skip child nodes in simple walker.\n- HTML: fixed the incorrect state of the switch for \"pre\", \"listing\", \"textarea\".\n- HTML: fixed heap-buffer-overflow in active/open elements.\n\n### Changed\n- HTML: refactoring module for better performance.\n- CSS: parsing api and token retrieval changed.\n\n## [1.0.0] - 2020-03-13\n### Added\n- Core: added hash table implementation.\n- Created public header file for all modules.\n\n### Fixed\n- HTML: memory leak of repeated parsing of document.\n- NULL pointer use in lxb_dom_attr_compare().\n- Symbols visibility for Windows.\n\n### Changed\n- DOM, HTML, Tag, NS: breaking API changes.\n- DOM: node tag_id to local_name.\n- DOM: attribute name now is uintptr_t. Reference to global unique naming.\n\n## [0.4.0] - 2019-11-18\n### Added\n- Encoding module.\n- Utils module.\n- CMake option for build all modules separately.\n- Examples for html tokenizer.\n- HTML: prescan the byte stream to determine encoding function.\n- Aliases for inline functions for use ABI of library.\n- Support ASAN for memory pool.\n- Core: added dup function for mraw.\n- More statuses.\n- Converting functions for string to number.\n\n### Fixed\n- Full path for cmake test command.\n- HTML: fixed parse '<![[CDATA[' chunks.\n- Use after free document element in fragment parse.\n- HTML: fixed memory leak in tokenizer.\n- HTML: fixed pointer offset for lxb_dom_node_text_content() function.\n- HTML: fixed use-after-free after clearing a document.\n\n### Changed\n- Core: changed lexbor_str_length_set() function.\n\n## [0.2.0] - 2019-03-12\n### Added\n- CSS:Syntax parser.\n- Core: added convertation floating-point numbers from/to string.\n- DOM: general implementation of the functional.\n\n### Fixed\n- HTML: fixed problem with serialize U+00A0 character. #22\n- Fixed build with C++. #20\n\n## [0.1.0] - 2018-11-30\n### Added\n- The Lexbor project.\n- HTML Parser.\n- HTML/DOM interfaces.\n- Basic functions for DOM and HTML interfaces.\n- Examples for HTML and DOM.\n- Tests for Core module.\n- Tests for HTML tokenizator and tree builder.\n- Python scripts for generating static structures.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.1083984375,
          "content": "cmake_minimum_required(VERSION 2.8.12...3.27)\n\n\n# Options:\n#    LEXBOR_OPTIMIZATION_LEVEL           default: -O2\n#    LEXBOR_C_FLAGS                      default: see this file\n#    LEXBOR_CXX_FLAGS                    default: see this file\n#    LEXBOR_WITHOUT_THREADS              default: ON; Not used now, for the future\n#    LEXBOR_BUILD_SHARED                 default: ON; Create shaded library\n#    LEXBOR_BUILD_STATIC                 default: ON; Create static library\n#    LEXBOR_BUILD_SEPARATELY             default: OFF; Build all modules separately.\n#                                         Each module will have its own shared library\n#    LEXBOR_BUILD_EXAMPLES               default: OFF; Build all examples\n#    LEXBOR_BUILD_TESTS                  default: OFF; Build tests\n#    LEXBOR_BUILD_TESTS_CPP              default: OFF; Build C++ tests.\n#                                         Used with LEXBOR_BUILD_TESTS\n#    LEXBOR_BUILD_UTILS                  default: OFF; Build utils/helpers for project.\n#    LEXBOR_BUILD_WITH_ASAN              default: OFF; Build with address sanitizer if possible\n#    LEXBOR_BUILD_WITH_FUZZER            default: OFF; Build with fuzzer tests if possible\n#    LEXBOR_INSTALL_HEADERS              default: ON; The header files will be installed\n#                                         if set to ON\n#    LEXBOR_WITH_PERF                    default: OFF; Enables support for rdtsc\n#    LEXBOR_MAKE_RPM_FILES               default: OFF; Create \"spec\" files in \"packaging\" direcotry\n#                                         for create packages\n#    LEXBOR_MAKE_DEB_FILES               default: OFF; Create \"control\" files in \"packaging\" direcotry\n#                                         for create packages\n#    LEXBOR_MAKE_DISTRO_NUM              default: 1; For packaging\n#    LEXBOR_PRINT_MODULE_DEPENDENCIES    default: OFF; Prints dependencies between modules\n\n# For build with ASAN use CMake flag:\n#     -DLEXBOR_BUILD_WITH_ASAN=ON\n#     or\n#     -DCMAKE_C_FLAGS='-O0 -g -fsanitize=address'\n#     or\n#     -DLEXBOR_C_FLAGS='-O0 -g -fsanitize=address'\n\n\nset(PROJECT_NAME \"lexbor\")\n\nmessage(STATUS \"Project name: ${PROJECT_NAME}\")\n\n################\n## Options\n#########################\noption(LEXBOR_WITHOUT_THREADS \"Build without Threads\" ON)\noption(LEXBOR_BUILD_SHARED \"Build shared library\" ON)\noption(LEXBOR_BUILD_STATIC \"Build static library\" ON)\noption(LEXBOR_BUILD_SEPARATELY \"Build modules separately\" OFF)\noption(LEXBOR_BUILD_EXAMPLES \"Build examples\" OFF)\noption(LEXBOR_BUILD_TESTS \"Build tests\" OFF)\noption(LEXBOR_BUILD_TESTS_CPP \"Build C++ tests\" OFF)\noption(LEXBOR_BUILD_UTILS \"Build utils\" OFF)\noption(LEXBOR_BUILD_WITH_ASAN \"Build with address sanitizer\" OFF)\noption(LEXBOR_BUILD_WITH_FUZZER \"Build with fuzzer\" OFF)\noption(LEXBOR_INSTALL_HEADERS \"Install header files\" ON)\noption(LEXBOR_WITH_PERF \"Enables support for rdtsc.\" OFF)\noption(LEXBOR_MAKE_PACKAGES_FILES \"Create files for build packages\" OFF)\noption(LEXBOR_PRINT_MODULE_DEPENDENCIES \"Prints dependencies\" OFF)\n\nIF(NOT LEXBOR_MAKE_DISTRO_NUM)\n    set(LEXBOR_MAKE_DISTRO_NUM \"1\")\nENDIF()\n\nenable_language(C)\n\nIF(LEXBOR_BUILD_TESTS_CPP)\n    enable_language(CXX)\nENDIF()\n\n################\n## Version and path\n#########################\nset(LEXBOR_BASE \"core\")\nset(LEXBOR_SOURCE \"${CMAKE_CURRENT_SOURCE_DIR}/source\" CACHE STRING \"\")\nset(LEXBOR_SOURCE_LEXBOR \"${LEXBOR_SOURCE}/lexbor\" CACHE STRING \"\")\nset(LEXBOR_DIR_LIB \"${CMAKE_CURRENT_SOURCE_DIR}/lib\" CACHE STRING \"\")\nset(LEXBOR_DIR_HEADER \"${LEXBOR_SOURCE}\" CACHE STRING \"\")\nset(LEXBOR_DIR_HEADER_LEXBOR \"${LEXBOR_SOURCE}/lexbor\" CACHE STRING \"\")\nset(LEXBOR_SOURCE_PORT_DIR \"${LEXBOR_SOURCE_LEXBOR}/ports\" CACHE STRING \"\")\nset(LEXBOR_DIR_ROOT \"${CMAKE_CURRENT_SOURCE_DIR}\" CACHE STRING \"\")\n\nset(LEXBOR_VERSION_FILEPATH \"${CMAKE_CURRENT_SOURCE_DIR}/version\" CACHE STRING \"\")\n\nset(LEXBOR_INSTALL_DLL_EXE_DIR \"bin\")\n\n################\n## Policy\n#########################\nIF(CMAKE_VERSION VERSION_GREATER \"3.1\" OR CMAKE_VERSION VERSION_EQUAL \"3.1\")\n    cmake_policy(SET CMP0054 NEW)\nENDIF()\n\n################\n## RPATH\n#########################\nIF(APPLE)\n    set(CMAKE_MACOSX_RPATH ON)\n\n    set(CMAKE_INSTALL_NAME_DIR ${CMAKE_INSTALL_FULL_LIBDIR})\nELSEIF(UNIX)\n    include(GNUInstallDirs)\nENDIF()\n\n################\n## lib param\n#########################\nIF(NOT DEFINED CMAKE_INSTALL_LIBDIR)\n    set(CMAKE_INSTALL_LIBDIR \"lib\")\nENDIF()\n\n################\n## CMake Includes\n#########################\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/config.cmake\")\n\n################\n## Project Version\n#########################\nGET_LEXBOR_VERSION(LEXBOR_VERSION_MAJOR LEXBOR_VERSION_MINOR\n                   LEXBOR_VERSION_PATCH LEXBOR_VERSION_STRING)\n\nmessage(STATUS \"Lexbor version: ${LEXBOR_VERSION_STRING}\")\n\nIF(CMAKE_VERSION VERSION_LESS \"3.0\")\n    IF(LEXBOR_BUILD_TESTS_CPP)\n        PROJECT(\"${PROJECT_NAME}\")\n    ELSE()\n        PROJECT(\"${PROJECT_NAME}\" \"C\")\n    ENDIF()\nELSE()\n    cmake_policy(SET CMP0048 NEW)\n\n    IF(LEXBOR_BUILD_TESTS_CPP)\n        PROJECT(\"${PROJECT_NAME}\" VERSION \"${LEXBOR_VERSION_STRING}\")\n    ELSE()\n        PROJECT(\"${PROJECT_NAME}\" VERSION \"${LEXBOR_VERSION_STRING}\" LANGUAGES \"C\")\n    ENDIF()\nENDIF()\n\n################\n## Features\n#########################\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/feature.cmake\")\n\n################\n## Includes\n#########################\ninclude_directories(${LEXBOR_DIR_HEADER})\n\n################\n## Export LEXBOR_INCLUDE_DIRS and LEXBOR_LIBRARIES to global CACHE\n#########################\nset(LEXBOR_INCLUDES ${LEXBOR_DIR_HEADER} CACHE STRING \"Include paths for ${PROJECT_NAME}\")\nset(LEXBOR_LIBRARIES ${LEXBOR_LIB_NAME} CACHE STRING \"Libraries to link for ${PROJECT_NAME}\")\n\n################\n## Sources\n#########################\nGET_MODULES_LIST(LEXBOR_MODULES \"${LEXBOR_SOURCE}\")\n\n################\n## Create packages files\n#########################\nIF(LEXBOR_MAKE_RPM_FILES)\n    CREATE_RPM_SPEC_FILE()\n    RETURN()\nENDIF()\n\nIF(LEXBOR_MAKE_DEB_FILES)\n    CREATE_DEB_FILES()\n    RETURN()\nENDIF()\n\n################\n## Build all modules in one liblexbor library\n#########################\nset(LEXBOR_LIB_NAME \"${PROJECT_NAME}\")\nset(LEXBOR_LIB_NAME_STATIC \"${LEXBOR_LIB_NAME}_static\")\n\n## Get all source files from modules\nFOREACH(module ${LEXBOR_MODULES})\n    GET_MODULE_RESURSES(headers sources \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${module})\n    LIST(APPEND LEXBOR_SOURCES ${sources})\nENDFOREACH()\n\n## First, need to add target for shared and static library\nIF(LEXBOR_BUILD_SHARED)\n    add_library(${LEXBOR_LIB_NAME} SHARED ${LEXBOR_SOURCES})\n    target_include_directories(${LEXBOR_LIB_NAME} PUBLIC ${LEXBOR_SOURCE})\n    target_compile_definitions(${LEXBOR_LIB_NAME} PRIVATE \"LEXBOR_BUILDING\")\nENDIF()\n\nIF(LEXBOR_BUILD_STATIC)\n    add_library(${LEXBOR_LIB_NAME_STATIC} STATIC ${LEXBOR_SOURCES})\n    target_include_directories(${LEXBOR_LIB_NAME_STATIC} PUBLIC ${LEXBOR_SOURCE})\n    set_target_properties(${LEXBOR_LIB_NAME_STATIC} PROPERTIES OUTPUT_NAME ${LEXBOR_LIB_NAME_STATIC})\n    set_target_properties(${LEXBOR_LIB_NAME_STATIC} PROPERTIES\n        COMPILE_PDB_NAME \"${LEXBOR_LIB_NAME_STATIC}\"\n        COMPILE_PDB_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n    target_compile_definitions(${LEXBOR_LIB_NAME_STATIC} PUBLIC \"LEXBOR_STATIC\")\nENDIF()\n\n## Load configurations from all modules. Print modules name and version.\nIF(NOT LEXBOR_BUILD_SEPARATELY)\n    FOREACH(module ${LEXBOR_MODULES})\n        IF(LEXBOR_INSTALL_HEADERS)\n            INSTALL_MODULE_HEADERS(\"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${module})\n        ENDIF()\n\n        INCLUDE_MODULE_CONFIG(${PROJECT_NAME} ${module} \"${LEXBOR_SOURCE_LEXBOR}/${module}\")\n        GET_MODULE_DEPENDENCIES(${PROJECT_NAME} ${module} module_deps)\n        GET_MODULE_VERSION(major minor patch version_string\n                           \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${module})\n\n        MODULE_PRINT(${module} ${version_string} \"${module_deps}\")\n    ENDFOREACH()\nENDIF()\n\n## Create dynamic/static library\nIF(LEXBOR_BUILD_SHARED)\n    ADD_MODULE_LIBRARY(SHARED ${LEXBOR_LIB_NAME} ${LEXBOR_VERSION_STRING}\n                       ${LEXBOR_VERSION_MAJOR})\nENDIF()\n\nIF(LEXBOR_BUILD_STATIC)\n    ADD_MODULE_LIBRARY(STATIC ${LEXBOR_LIB_NAME_STATIC} ${LEXBOR_VERSION_STRING}\n                       ${LEXBOR_VERSION_MAJOR})\nENDIF()\n\n################\n## Build separately modules in liblexbor-<module-name>\n#########################\nIF(LEXBOR_BUILD_SEPARATELY)\n    FOREACH(module ${LEXBOR_MODULES})\n        set(lexbor_deps \"${lexbor_deps} ${module}\")\n        set(libname \"${PROJECT_NAME}-${module}\")\n\n        GET_MODULE_VERSION(major minor patch version_string\n                           \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${module})\n\n        GET_MODULE_RESURSES(headers sources \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${module})\n\n        IF(LEXBOR_BUILD_SHARED)\n            add_library(${libname} SHARED ${sources})\n            target_compile_definitions(${libname} PRIVATE \"LEXBOR_BUILDING\")\n            ADD_MODULE_LIBRARY(SHARED ${libname} ${version_string} ${major})\n        ENDIF()\n\n        IF(LEXBOR_BUILD_STATIC)\n            add_library(\"${libname}_static\" STATIC ${sources})\n            set_target_properties(\"${libname}_static\" PROPERTIES OUTPUT_NAME \"${libname}_static\")\n            set_target_properties(\"${libname}_static\" PROPERTIES\n                COMPILE_PDB_NAME \"${libname}_static\"\n                COMPILE_PDB_OUTPUT_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")\n            target_compile_definitions(\"${libname}_static\" PRIVATE \"LEXBOR_STATIC\")\n            ADD_MODULE_LIBRARY(STATIC \"${libname}_static\" ${version_string} ${major})\n        ENDIF()\n\n        IF(LEXBOR_INSTALL_HEADERS)\n            INSTALL_MODULE_HEADERS(\"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" \"${module}\")\n        ENDIF()\n\n        INCLUDE_MODULE_CONFIG(${PROJECT_NAME} ${module} \"${LEXBOR_SOURCE_LEXBOR}/${module}\")\n        GET_MODULE_DEPENDENCIES(${PROJECT_NAME} ${module} module_deps)\n\n        IF(LEXBOR_BUILD_SHARED)\n            SET_MODULE_LIB_DEPENDENCIES(${libname} \"${module_deps}\" \"\")\n        ENDIF()\n\n        IF(LEXBOR_BUILD_STATIC)\n            SET_MODULE_LIB_DEPENDENCIES(\"${libname}_static\" \"${module_deps}\" \"_static\")\n        ENDIF()\n\n        MODULE_PRINT(${module} ${version_string} \"${module_deps}\")\n    ENDFOREACH()\nENDIF()\n\n################\n## Sets C_FLAGS\n#########################\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${LEXBOR_OPTIMIZATION_LEVEL} ${LEXBOR_C_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${LEXBOR_OPTIMIZATION_LEVEL} ${LEXBOR_CXX_FLAGS}\")\nmessage(STATUS \"CFLAGS: ${CMAKE_C_FLAGS}\")\nmessage(STATUS \"CXXFLAGS: ${CMAKE_CXX_FLAGS}\")\n\n################\n## Check features\n#########################\nFEATURE_CHECK_ASAN(LEXBOR_HAVE_ASAN)\nIF(${LEXBOR_HAVE_ASAN})\n    add_definitions(-DLEXBOR_HAVE_ADDRESS_SANITIZER)\nENDIF()\n\nFEATURE_CHECK_FUZZER(LEXBOR_HAVE_FUZZER)\nIF(${LEXBOR_HAVE_FUZZER})\n    set(LEXBOR_BUILD_EXAMPLES OFF)\n    set(LEXBOR_BUILD_UTILS OFF)\n\n    message(STATUS \"Build only fuzzing test.\")\n    message(STATUS \"Set LEXBOR_BUILD_TESTS to OFF.\")\n    message(STATUS \"Set LEXBOR_BUILD_EXAMPLES to OFF.\")\n    message(STATUS \"Set LEXBOR_BUILD_UTILS to OFF.\")\n\n    add_definitions(-DLEXBOR_HAVE_FUZZER)\nENDIF()\n\n################\n## Tests\n#########################\nIF(LEXBOR_BUILD_TESTS)\n    enable_testing()\n    add_subdirectory(test)\nENDIF()\n\n################\n## Examples\n#########################\nIF(LEXBOR_BUILD_EXAMPLES)\n    add_subdirectory(examples)\nENDIF()\n\n################\n## Utils\n#########################\nIF(LEXBOR_BUILD_UTILS)\n    add_subdirectory(utils)\nENDIF()\n\n################\n## Build an RPM.\n#########################\nset(CPACK_PACKAGE_VERSION ${LEXBOR_VERSION_STRING})\n\nif(LEXBOR_PLATFORM STREQUAL \"Debian\")\n  set(CPACK_GENERATOR \"DEB\")\nelseif(LEXBOR_PLATFORM STREQUAL \"Redhat\")\n  set(CPACK_GENERATOR \"RPM\")\nelseif(LEXBOR_PLATFORM STREQUAL \"SuSe\")\n  set(CPACK_GENERATOR \"RPM\")\nelse()\n  set(CPACK_GENERATOR \"TGZ\")\nendif()\n\nset(CPACK_PACKAGE_NAME \"${PROJECT_NAME}\")\nset(CPACK_PACKAGE_RELEASE 1)\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"HTML Renderer\")\nset(CPACK_PACKAGE_CONTACT \"Alexander Borisov\")\nset(CPACK_PACKAGE_VENDOR \"Alexander Borisov\")\n\nif(32BIT)\n  set(CPACK_RPM_PACKAGE_ARCHITECTURE i686)\nelse()\n  set(CPACK_RPM_PACKAGE_ARCHITECTURE x86_64)\nendif()\n\nset(CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}.${CPACK_RPM_PACKAGE_ARCHITECTURE}\")\n\ninclude(CPack)\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 1.662109375,
          "content": "# lexbor: Build and Installation\n\nTo build and install the `lexbor` library from source code, use [CMake] (open-source, cross-platform build system).\n\n## Linux, *BSD, Mac OS X\n\nIn root directory of project (`/`):\n```bash\ncmake .\nmake\nsudo make install\n```\n\nFlags that can be passed to cmake:\n\n| Flags | Default | Description |\n|---|:---:|---|\n|`LEXBOR_OPTIMIZATION_LEVEL`| -O2 |   |\n|`LEXBOR_C_FLAGS`|  | Default compilation flags to be used when compiling `C` files.<br>See `port.cmake` files in [ports](https://github.com/lexborisov/lexbor/tree/master/source/lexbor/ports) directory.|\n|`LEXBOR_WITHOUT_THREADS`| ON | Not used now, for the future |\n|`LEXBOR_BUILD_SHARED`| ON | Create shaded library |\n|`LEXBOR_BUILD_STATIC`| ON | Create static library |\n|`LEXBOR_INSTALL_HEADERS`| ON | The header files will be installed if set to ON |\n|`LEXBOR_BUILD_TESTS`| OFF | Build tests |\n|`LEXBOR_BUILD_EXAMPLES`| OFF | Build examples |\n\n## Windows\n\nUse the [CMake] GUI.\n\nFor Windows with MSYS: \n```bash\ncmake . -G \"Unix Makefiles\"\nmake\nmake install\n```\n\n## Examples\n\nAll examples work from created `build` directory in the root directory of project:\n```bash\nmkdir build\ncd build\n```\n\nI recommend creating a separate directory to build the project. It can be easily removed together with all garbage.\n\nBuild together with tests:\n\n```bash\ncmake .. -DLEXBOR_BUILD_TESTS=ON\nmake\nmake test\nsudo make install\n```\n\nSet the installation location (prefix):\n\n```bash\ncmake .. -DCMAKE_INSTALL_PREFIX=/my/path/usr\nmake\nmake install\n```\n\nInstallation only shared library (without headers):\n\n```bash\ncmake .. -DLEXBOR_BUILD_STATIC=OFF -DLEXBOR_INSTALL_HEADERS=OFF \nmake\nsudo make install\n```\n\n\n[CMake]: https://cmake.org/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.935546875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.591796875,
          "content": "\n   Lexbor.\n\n   Copyright 2018-2020 Alexander Borisov\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.220703125,
          "content": "## Lexbor: Crafting a Browser Engine with Simplicity and Flexibility\n\nWhy build yet another browser engine?\nThere's a myriad of challenges developers face in fully utilizing modern web technologies.\nParsing HTML and CSS, dealing with URLs and encodings often involves slow, resource-heavy implementations or outdated solutions.\nEven established solutions, written in C++ and reaching tens of megabytes in volume, are often not versatile enough.\nMeanwhile, language-specific implementations for Python, Node.js, Rust, or any other favorite of the day are slow and prone to lock-in.\n\n\n### The Core Requirements\n\nLexbor's core requirements rose from the ashes of these challenges:\n\n#### Portability\n\nLexbor aims to adapt to different platforms and integrate into various programming languages.\nIt's not yet another library full of quirks and idiosyncrasies;\nLexbor aims to offer developers flexibility to incorporate it into their work directly, regardless of the programming language they chose.\n\n#### Modularity\n\nLexbor wants to keep things simple: Developers should be able to use only the parts they need.\nWhether it's an HTML or URL parser, the engine's code should be straightforward and easy to navigate, promoting rapid development.\n\n#### Speed\n\nIn a nutshell, Lexbor wants things to happen *real fast*.\nIt's not just about making a browser engine; it's about making sure that *everything*,\neven the most resource-intensive tasks such as HTML parsing, occur swiftly to meet the real-time demands of modern web applications.\n\n#### Independence\n\nLexbor empowers developers by giving them full control over algorithms, resources, and dimensions.\nBy eliminating  on external dependencies, we let developers customize the engine without sacrificing performance or features.\n\n#### Compliance\n\nLexbor commits to industry standards.\nDevelopers need to be sure that the code aligns with widely established specifications.\nThe output of Lexbor's modules, be it HTML, CSS, URLs, or others, should match that of modern browsers, meeting industry specifications.\n\n\n### Origin Story\n\nHaving had all these goals in mind for about a decade, Alexander Borisov,\nwhose name gave the project its title,\ncame up with the idea of a browser engine crafted entirely in C\n(there's no school like the old school).\nThe language was chosen simply because we believed it could meet all the criteria seamlessly.\n\nUnlike heavyweights such as WebKit or Blink, Lexbor takes a lean and focused approach,\ndelivering a nimble yet powerful browser engine.\nAll it takes is years of top-notch developer expertise.\n\nAn important point to make: Lexbor doesn't stop at parsing and rendering modern HTML.\nIt offers each component as a standalone entity, ready to be integrated into other people's projects.\nThis approach sets us apart, providing a modular solution that not only meets browser needs\nbut also empowers developers with versatile tools for their own web-related tasks.\n\nAll in all, we envision Lexbor a promising player in the menagerie of browser technologies,\npushing the boundaries and helping developers fully leverage modern web technologies.\n\n\n## Features\n\n* [Modules](https://github.com/lexbor/lexbor/tree/master/source/lexbor).\n* [Single or separate](https://github.com/lexbor/lexbor#single-or-separately) libraries for each module.\n* No outside dependencies.\n* Easy to port to any platform.\n* C99 support.\n* Speed.\n\n### HTML Module\n\n* Full conformance with the [HTML5 specification](https://html.spec.whatwg.org/multipage/).\n* Manipulation of [elements](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/html/element_create.c) and [attributes](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/html/element_attributes.c): add, change, delete and other.\n* Supports fragment parsing (for [innerHTML](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/html/element_innerHTML.c)).\n* Supports parsing [by chunks](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/html/document_parse_chunk.c).\n* Passes all tree construction tests.\n* [Tested](https://github.com/lexbor/warc_test) by 200+ million HTML pages with [ASAN](https://clang.llvm.org/docs/AddressSanitizer.html).\n* Two way for parsing HTML: [by Document](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/html/document_parse.c), [by Parser](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/html/parse.c).\n* Supports [determining encoding](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/html/encoding.c) by byte stream.\n* [Parsing CSS Styles](https://github.com/lexbor/lexbor/tree/master/examples/lexbor/styles) in tag attributes and in the `<style>` tag.\n* Fast\n\n### CSS Module\n\n* Full conformance with the [CSS Syntax](https://drafts.csswg.org/css-syntax-3/) module.\n* Supports:\n* * [x] [Selectors](https://github.com/lexbor/lexbor/tree/master/examples/lexbor/selectors).\n* * [x] [StyleSheet Tree](https://github.com/lexbor/lexbor/tree/master/examples/lexbor/css) (aka CSSOM).\n* * [x] and so on.\n* Fast.\n\n### Selectors Module\n\n* Search for HTML elements using CSS selectors.\n* Fast.\n\n### Encoding Module\n\n* Full conformance with the [Encoding specification](https://encoding.spec.whatwg.org/).\n* Supports `40 encodings` for encode/decode.\n* Supports [single](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/encoding/single/from_to.c) and [buffering](https://github.com/lexbor/lexbor/blob/master/examples/lexbor/encoding/buffer/from_to.c) encode/decode.\n* Fast.\n\n### URL Module\n\n* Conformance with the [URL specification](https://url.spec.whatwg.org/)\n* Support [Unicode ToASCII](https://www.unicode.org/reports/tr46/#ToASCII)\n* Fast.\n\n### Punycode Module\n\n* Conformance with the [Punycode specification](https://www.rfc-editor.org/rfc/inline-errata/rfc3492.html).\n* Support Encode/Decode.\n\n### Unicode Module\n\n* Unicode Standard Annex [#15](https://www.unicode.org/reports/tr15/).\n* * Support Unicode normalization forms: D (NFD), C (NFC), KD (NFKD), KC (NFKC).\n* * Support chunks (stream).\n* Unicode Technical Standard [#46](https://unicode.org/reports/tr46/).\n* * Support Unicode [IDNA Processing](https://www.unicode.org/reports/tr46/#Processing).\n* * Support Unicode [ToASCII](https://www.unicode.org/reports/tr46/#ToASCII).\n* * Support Unicode [ToUnicode](https://www.unicode.org/reports/tr46/#ToUnicode).\n* Fast.\n\n### Development of modules in process\n\n* Layout\n* Font\n* and so on\n\n## Build and Installation\n\n### Binary packages\n\nBinaries are available for:\n\n* [CentOS](https://lexbor.com/download/#centos) 6, 7, 8\n* [Debian](https://lexbor.com/download/#debian) 8, 9, 10, 11\n* [Fedora](https://lexbor.com/download/#fedora) 28, 29, 30, 31, 32, 33, 34, 36, 37\n* [RHEL](https://lexbor.com/download/#rhel) 7, 8\n* [Ubuntu](https://lexbor.com/download/#ubuntu) 14.04, 16.04, 18.04, 18.10, 19.04, 19.10, 20.04, 20.10, 21.04, 22.04\n\nCurrently for `x86_64` architecture.\nIf you need any other architecture, please, write to [support@lexbor.com](mailto:support@lexbor.com).\n\n### vcpkg\n\nFor vcpkg users there is a `lexbor` [port](https://github.com/microsoft/vcpkg/tree/master/ports/lexbor) that can be installed via `vcpkg install lexbor` or by adding it to `dependencies` section of your `vcpkg.json` file.\n\n### macOS\n\n#### Homebrew\n\nTo install `lexbor` on macOS from Homebrew:\n\n```sh\nbrew install lexbor\n```\n\n#### MacPorts\n\nTo install `lexbor` on macOS from MacPorts:\n\n```sh\nsudo port install lexbor\n```\n\n### Source code\n\nFor building and installing Lexbor library from source code, use [CMake](https://cmake.org/) (open-source, cross-platform build system).\n\n```bash\ncmake . -DLEXBOR_BUILD_TESTS=ON -DLEXBOR_BUILD_EXAMPLES=ON\nmake\nmake test\n```\n\nPlease, see more information in [documentation](https://lexbor.com/docs/lexbor/#source_code).\n\n## Single or separately\n\n### Single\n* liblexbor — this is a single library that includes all modules.\n\n### Separately\n* liblexbor-{module name} — libraries for each module.\n\nYou only need an HTML parser? Use `liblexbor-html`.\n\nSeparate modules may depend on each other.\nFor example, dependencies for `liblexbor-html`: `liblexbor-core`, `liblexbor-dom`, `liblexbor-tag`, `liblexbor-ns`.\n\nThe `liblexbor-html` library already contains all the pointers to the required dependencies. Just include it in the assembly: `gcc program.c -llexbor-html`.\n\n## External Bindings and Wrappers\n\n* [Elixir](https://git.pleroma.social/pleroma/elixir-libraries/fast_html) binding for the HTML module (since 2.0 version)\n* [Crystal](https://github.com/kostya/lexbor) Fast HTML5 Parser with CSS selectors for Crystal language\n* [Python](https://github.com/rushter/selectolax#available-backends) binding for modest and lexbor engines.\n* [D](https://github.com/trikko/parserino) Fast HTML5 Parser with CSS selectors for D programming language\n* [Ruby](https://github.com/serpapi/nokolexbor) Fast HTML5 Parser with both CSS selectors and XPath support.\n* [PHP](https://github.com/php/php-src)'s DOM extension uses Lexbor's HTML living standard parser and CSS selector support, starting from PHP 8.4.\n* [Julia](https://github.com/MichaelHatherly/Lexbor.jl) binding for the HTML module.\n\nYou can create a binding or wrapper for the `lexbor` and place the link here!\n\n## Documentation\n\nAvailable on [lexbor.com](https://lexbor.com) in [Documentation](https://lexbor.com/documentation/) section.\n\n## Roadmap\n\nPlease, see [roadmap](https://lexbor.com/roadmap/) on [lexbor.com](https://lexbor.com).\n\n## Getting Help\n\n* E-mail [support@lexbor.com](mailto:support@lexbor.com)\n\n## SAST Tools\n\n[PVS-Studio](https://pvs-studio.com/en/pvs-studio/?utm_source=website&utm_medium=github&utm_campaign=open_source) - static analyzer for C, C++, C#, and Java code.\n\n## AUTHOR\n\nAlexander Borisov <borisov@lexbor.com>\n\n## COPYRIGHT AND LICENSE\n\n   Lexbor.\n\n   Copyright 2018-2024 Alexander Borisov\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n\nPlease, see [LICENSE](https://github.com/lexbor/lexbor/blob/master/LICENSE) file.\n"
        },
        {
          "name": "config.cmake",
          "type": "blob",
          "size": 29.958984375,
          "content": "################\n## Dependencies\n#########################\nIF(NOT LEXBOR_WITHOUT_THREADS)\n    set(CMAKE_THREAD_PREFER_PTHREAD 1)\n    find_package(Threads REQUIRED)\n    IF(NOT CMAKE_USE_PTHREADS_INIT)\n        message(FATAL_ERROR \"Could NOT find pthreads (missing: CMAKE_USE_PTHREADS_INIT)\")\n    ENDIF()\nENDIF()\n\n################\n## Detect OS type\n#########################\nset(LEXBOR_PLATFORM \"UNDEF\")\n\nIF(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    IF(EXISTS \"/etc/centos-release\")\n        set(LEXBOR_PLATFORM \"CentOS\")\n    ENDIF(EXISTS \"/etc/centos-release\")\n\n    IF(EXISTS \"/etc/debian_version\")\n        set(LEXBOR_PLATFORM \"Debian\")\n    ENDIF(EXISTS \"/etc/debian_version\")\n\n    IF(EXISTS \"/etc/redhat-release\")\n        set(LEXBOR_PLATFORM \"Redhat\")\n    ENDIF(EXISTS \"/etc/redhat-release\")\n\n    IF(EXISTS \"/etc/fedora-release\")\n        set(LEXBOR_PLATFORM \"Redhat\")\n    ENDIF(EXISTS \"/etc/fedora-release\")\n\n    IF(EXISTS \"/etc/SuSE-release\")\n        set(LEXBOR_PLATFORM \"SuSe\")\n    ENDIF(EXISTS \"/etc/SuSE-release\")\n\n    IF(EXISTS \"/etc/gentoo-release\")\n        set(LEXBOR_PLATFORM \"Gentoo\")\n    ENDIF(EXISTS \"/etc/gentoo-release\")\nENDIF()\n\n################\n## OS ports\n#########################\nif (WIN32)\n    set(LEXBOR_OS_PORT_NAME \"windows_nt\")\nelse ()\n    set(LEXBOR_OS_PORT_NAME \"posix\")\nendif (WIN32)\n\n################\n## Macro\n#########################\nMACRO(LIST_JOIN tlist glue out)\n    set(value \"\")\n    set(nlist \"${${tlist}}\")\n\n    FOREACH(entry ${nlist})\n        set(value \"${entry}${glue}${value}\")\n    ENDFOREACH()\n\n    STRING(REGEX REPLACE \"${glue}\\$\" \" \" value ${value})\n\n    set(${out} \"${value}\")\n\n    unset(value)\n    unset(nlist)\nENDMACRO()\n\nMACRO(LIST_TO_COLUMN tlist column join_by out_result)\n    set(out \"\")\n    set(line \"\")\n\n    STRING(STRIP ${join_by} join_by_cls)\n\n    FOREACH(mname ${tlist})\n        IF(NOT \"${line}\" STREQUAL \"\")\n            set(tmp \"${line}${join_by}${mname}\")\n        ELSE()\n            set(tmp \"${mname}\")\n        ENDIF()\n\n        STRING(LENGTH \"${tmp}\" str_len)\n\n        IF(\"${str_len}\" GREATER \"${column}\" OR \"${str_len}\" EQUAL \"${column}\")\n            set(out \"${out}\\n${line}${join_by_cls}\")\n\n            set(line \"\")\n            set(tmp \"${mname}\")\n        ENDIF()\n\n        set(line ${tmp})\n    ENDFOREACH()\n\n    IF(NOT \"${line}\" STREQUAL \"\")\n        set(out \"${out}\\n${line}\")\n    ENDIF()\n\n    STRING(STRIP ${out} out)\n    set(${out_result} ${out})\n\n    unset(line)\n    unset(out)\nENDMACRO()\n\nMACRO(SUBDIRLIST_PRIVATE curdir prefix postfix to_list)\n    FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)\n\n    FOREACH(child ${children})\n        IF(IS_DIRECTORY \"${curdir}/${child}\")\n            LIST(APPEND ${to_list} \"${prefix}${child}${postfix}\")\n            SUBDIRLIST_PRIVATE(\"${curdir}/${child}\" \"${prefix}${child}/\" \"${postfix}\" ${to_list})\n        ENDIF()\n    ENDFOREACH()\nENDMACRO()\n\nMACRO(SUBDIRLIST curdir prefix postfix out_result)\n    SUBDIRLIST_PRIVATE(\"${curdir}\" \"${prefix}\" \"${postfix}\" dirlist)\n\n    SET(${out_result} ${dirlist})\nENDMACRO()\n\nMACRO(GET_MODULES_SUB_LIST modules curdir)\n    FILE(GLOB children ${curdir}/ ${curdir}/*)\n\n    FOREACH(child ${children})\n        string(REGEX MATCH \"\\\\.[^/]+$\" MATCHSTR ${child})\n\n        IF(IS_DIRECTORY ${child} AND MATCHSTR STREQUAL \"\")\n            string(REGEX MATCH \"[^/]+$\" MATCHSTR ${child})\n\n            IF(NOT MATCHSTR STREQUAL \"ports\")\n                LIST(APPEND ${modules} ${MATCHSTR})\n            ELSE()\n                IF(EXISTS \"${child}/${LEXBOR_OS_PORT_NAME}/config.cmake\")\n                    include(\"${child}/${LEXBOR_OS_PORT_NAME}/config.cmake\")\n                ENDIF()\n            ENDIF()\n        ENDIF()\n    ENDFOREACH()\nENDMACRO()\n\nMACRO(GET_MODULES_LIST modules curdir)\n    FILE(GLOB children ${curdir}/ ${curdir}/*)\n\n    FOREACH(child ${children})\n        string(REGEX MATCH \"\\\\.[^/]+$\" MATCHSTR ${child})\n        IF(IS_DIRECTORY ${child} AND MATCHSTR STREQUAL \"\")\n            GET_MODULES_SUB_LIST(${modules} ${dirs} ${child})\n        ENDIF()\n    ENDFOREACH()\nENDMACRO()\n\nMACRO(INCLUDE_MODULE_CONFIG pname module module_dir)\n    set(conf_path \"${module_dir}/config.cmake\")\n\n    string(TOUPPER ${module} module_upper)\n    string(TOUPPER ${pname} pname_upper)\n\n    set(tmp \"${pname_upper}_${module_upper}_INCLUDED\")\n\n    IF(\"${${tmp}}\" STREQUAL \"\")\n        set(${tmp} TRUE)\n\n        set(DEPENDENCIES \"\")\n\n        IF(EXISTS \"${conf_path}\")\n            set(CURRENT_LIB_NAME \"${PROJECT_NAME}-${module}\")\n            set(CURRENT_LIB_NAME_STATIC \"${PROJECT_NAME}-${module}-static\")\n\n            include(\"${conf_path}\")\n        ENDIF()\n\n        IF(NOT DEPENDENCIES STREQUAL \"\")\n            STRING(REGEX REPLACE \"[ \\t\\n]+\" \" \" DEPENDENCIES ${DEPENDENCIES})\n        ENDIF()\n\n        set(tmp \"${pname_upper}_${module_upper}_DEPENDENCIES\")\n        set(${tmp} \"${DEPENDENCIES}\")\n\n        set(tmp \"${pname_upper}_${module_upper}_TITLE\")\n        set(${tmp} \"${TITLE}\")\n\n        set(tmp \"${pname_upper}_${module_upper}_DESCRIPTION\")\n        set(${tmp} \"${DESCRIPTION}\")\n    ENDIF()\nENDMACRO()\n\nMACRO(GET_MODULE_TITLE pname module result)\n    string(TOUPPER ${module} module_upper)\n    string(TOUPPER ${pname} pname_upper)\n\n    set(${result} \"${${pname_upper}_${module_upper}_TITLE}\")\n\n    unset(module_upper)\n    unset(pname_upper)\nENDMACRO()\n\nMACRO(GET_MODULE_DESCRIPTION pname module result)\n    string(TOUPPER ${module} module_upper)\n    string(TOUPPER ${pname} pname_upper)\n\n    set(${result} \"${${pname_upper}_${module_upper}_DESCRIPTION}\")\n\n    unset(module_upper)\n    unset(pname_upper)\nENDMACRO()\n\nMACRO(GET_MODULE_DEPENDENCIES pname module result)\n    string(TOUPPER ${module} module_upper)\n    string(TOUPPER ${pname} pname_upper)\n\n    set(${result} \"${${pname_upper}_${module_upper}_DEPENDENCIES}\")\n\n    unset(module_upper)\n    unset(pname_upper)\nENDMACRO()\n\nMACRO(GET_MODULE_INCLUDED pname module result)\n    string(TOUPPER ${module} module_upper)\n    string(TOUPPER ${pname} pname_upper)\n\n    set(${result} \"${${pname_upper}_${module_upper}_INCLUDED}\")\n\n    unset(module_upper)\n    unset(pname_upper)\nENDMACRO()\n\nMACRO(GET_MODULE_RESURSES headers sources source_dir pname module)\n    file(GLOB_RECURSE headers \"${source_dir}/${pname}/${module}/*.h\")\n    file(GLOB_RECURSE sources \"${source_dir}/${pname}/${module}/*.c\")\n\n    set(port_dir_name \"${source_dir}/${pname}/ports/${LEXBOR_OS_PORT_NAME}/${pname}/${module}\")\n\n    IF(IS_DIRECTORY ${port_dir_name})\n        file(GLOB_RECURSE port_headers \"${port_dir_name}/*.h\")\n        file(GLOB_RECURSE port_sources \"${port_dir_name}/*.c\")\n\n        LIST(APPEND ${headers} ${port_headers})\n        LIST(APPEND ${sources} ${port_sources})\n    ENDIF()\nENDMACRO()\n\nMACRO(GET_MODULE_VERSION major minor patch vstr source_dir pname module)\n    string(TOUPPER ${module} module_upper)\n\n    set(version_file \"${source_dir}/${pname}/${module}/base.h\")\n    set(version_prefix \"LXB_${module_upper}_VERSION\")\n\n    IF(${module} STREQUAL \"core\")\n        set(version_prefix \"LEXBOR_VERSION\")\n    ENDIF()\n\n    set(version_cache \"${version_prefix}_CACHE\")\n\n    IF(NOT \"${${version_cache}}\" STREQUAL \"\")\n        set(${vstr} \"${${version_cache}}\")\n    ELSE()\n        file(STRINGS ${version_file} VERSION_PARTS\n            REGEX \"^#define[ \\t]+${version_prefix}_(MAJOR|MINOR|PATCH)[ \\t]+[0-9]+$\")\n\n        list(GET VERSION_PARTS 0 VERSION_MAJOR_PART)\n        list(GET VERSION_PARTS 1 VERSION_MINOR_PART)\n        list(GET VERSION_PARTS 2 VERSION_PATCH_PART)\n\n        string(REGEX REPLACE \"#define[ \\t]+${version_prefix}_MAJOR[ \\t]+([0-9]+).*\" \"\\\\1\" A ${VERSION_MAJOR_PART})\n        string(REGEX REPLACE \"#define[ \\t]+${version_prefix}_MINOR[ \\t]+([0-9]+).*\" \"\\\\1\" B ${VERSION_MINOR_PART})\n        string(REGEX REPLACE \"#define[ \\t]+${version_prefix}_PATCH[ \\t]+([0-9]+).*\" \"\\\\1\" C ${VERSION_PATCH_PART})\n\n        set(${major} ${A})\n        set(${minor} ${B})\n        set(${patch} ${C})\n        set(${vstr} \"${A}.${B}.${C}\")\n\n        set(${version_cache} \"${${vstr}}\")\n    ENDIF()\nENDMACRO()\n\nMACRO(GET_LEXBOR_VERSION major minor patch vstr)\n    file(STRINGS ${LEXBOR_VERSION_FILEPATH} version_part\n         REGEX \"^LEXBOR_VERSION[ \\t]*=[ \\t]*[0-9.]+$\")\n\n    string(REGEX REPLACE \"LEXBOR_VERSION=([0-9]+).*\" \"\\\\1\" AV ${version_part})\n    string(REGEX REPLACE \"LEXBOR_VERSION[ \\t]*=[ \\t]*[0-9]+.([0-9]+).*\" \"\\\\1\" BV ${version_part})\n    string(REGEX REPLACE \"LEXBOR_VERSION[ \\t]*=[ \\t]*[0-9]+.[0-9]+.([0-9]+).*\" \"\\\\1\" CV ${version_part})\n\n    set(${major} ${AV})\n    set(${minor} ${BV})\n    set(${patch} ${CV})\n    set(${vstr} \"${AV}.${BV}.${CV}\")\nENDMACRO()\n\nMACRO(SET_MODULE_LIB_DEPENDENCIES libname deps postfix)\n    IF(NOT ${deps} EQUAL \"\")\n        string(REGEX REPLACE \" +\" \";\" dep_list ${deps})\n\n        FOREACH(dep ${dep_list})\n            set(dep_libname \"${PROJECT_NAME}-${dep}${postfix}\")\n\n            add_dependencies(${libname} \"${dep_libname}\")\n            target_link_libraries(${libname} \"${dep_libname}\")\n        ENDFOREACH()\n    ENDIF()\nENDMACRO()\n\nMACRO(ADD_MODULE_LIBRARY type libname version_string major)\n    target_link_libraries(${libname} ${CMAKE_THREAD_LIBS_INIT})\n    set_target_properties(${libname} PROPERTIES OUTPUT_NAME ${libname})\n    set_target_properties(${libname} PROPERTIES VERSION ${version_string} SOVERSION ${major})\n\n    install(TARGETS ${libname}\n            RUNTIME DESTINATION \"${LEXBOR_INSTALL_DLL_EXE_DIR}\"\n            ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n            LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\")\nENDMACRO()\n\nMACRO(INSTALL_MODULE_HEADERS header_path pname module)\n    set(dir_search \"${header_path}/${pname}/${module}\")\n\n    IF(NOT IS_DIRECTORY \"${dir_search}\")\n        message(FATAL_ERROR \"Install headers: \\\"${dir_search}\\\" in not a directory.\")\n    ENDIF()\n\n    install(DIRECTORY \"${dir_search}\" DESTINATION \"include/${pname}\"\n            FILES_MATCHING PATTERN \"*.h\")\n\n    file(GLOB header_dirs \"${dir_search}/*\")\n\n    FOREACH(item ${header_dirs})\n        IF(IS_DIRECTORY \"${item}\")\n            install(DIRECTORY \"${item}\" DESTINATION \"include/${pname}/${module}\"\n                    FILES_MATCHING PATTERN \"*.h\")\n        ENDIF()\n    ENDFOREACH()\nENDMACRO()\n\nMACRO(MODULE_PRINT module version dep)\n    message(STATUS \"Append module: ${module} (${version})\")\n\n    IF(LEXBOR_PRINT_MODULE_DEPENDENCIES)\n        IF(NOT ${dep} EQUAL \"\")\n            message(\"   dependencies: ${dep}\")\n        ENDIF()\n    ENDIF()\nENDMACRO()\n\nMACRO(EXECUTABLE_LIST name_prefix sources)\n    FOREACH(src ${sources})\n        get_filename_component(barename ${src} NAME_WE)\n        get_filename_component(build_dir ${src} DIRECTORY)\n\n        STRING(REGEX REPLACE \"^${LEXBOR_DIR_ROOT}\" \"\" build_dir ${build_dir})\n        STRING(REGEX REPLACE \"^/+\" \"\" build_dir ${build_dir})\n        STRING(REGEX REPLACE \"/+\" \"_\" build_exe ${build_dir})\n\n        set(exe_name \"${name_prefix}${build_exe}_${barename}\")\n\n        add_executable(\"${exe_name}\" ${src})\n        set_target_properties(\"${exe_name}\" PROPERTIES\n                              RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${build_dir}\"\n                              OUTPUT_NAME \"${barename}\")\n\n        IF(WIN32 AND LEXBOR_BUILD_SHARED)\n            add_custom_command(TARGET \"${exe_name}\"\n                POST_BUILD\n                COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${LEXBOR_LIB_NAME}> $<TARGET_FILE_DIR:${exe_name}>\n                COMMENT \"Copy dll file to ${CMAKE_CURRENT_BINARY_DIR} directory\" VERBATIM\n            )\n\n            IF(TEST_UNIT_LIB_NAME)\n                add_custom_command(TARGET \"${exe_name}\"\n                    POST_BUILD\n                    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${TEST_UNIT_LIB_NAME}> $<TARGET_FILE_DIR:${exe_name}>\n                    COMMENT \"Copy dll file to ${CMAKE_CURRENT_BINARY_DIR} directory\" VERBATIM\n                )\n            ENDIF()\n        ENDIF()\n\n        add_dependencies(\"${exe_name}\" ${ARGN})\n        target_link_libraries(\"${exe_name}\" ${ARGN})\n    ENDFOREACH()\nENDMACRO()\n\nMACRO(APPEND_TESTS name_prefix sources)\n    FOREACH(src ${sources})\n        get_filename_component(barename ${src} NAME_WE)\n        get_filename_component(build_dir ${src} DIRECTORY)\n\n        STRING(REGEX REPLACE \"^${CMAKE_CURRENT_SOURCE_DIR}\" \"/\" relative_path ${build_dir})\n\n        set(relative_path \"${relative_path}/${barename}\")\n        STRING(REGEX REPLACE \"^/+\" \"\" relative_path ${relative_path})\n\n        STRING(REGEX REPLACE \"/+\" \"_\" arg_name ${relative_path})\n        STRING(REGEX REPLACE \"^_+\" \"\" arg_name ${arg_name})\n\n        STRING(REGEX REPLACE \"^${LEXBOR_DIR_ROOT}\" \"\" build_dir ${build_dir})\n        STRING(REGEX REPLACE \"^/+\" \"\" build_dir ${build_dir})\n\n        IF (NOT \"${${arg_name}_arg}\" STREQUAL \"\")\n            add_test(\"${name_prefix}${arg_name}\" \"${CMAKE_BINARY_DIR}/${build_dir}/${barename}\"\n                     \"${${arg_name}_arg}\")\n        ELSE()\n            add_test(\"${name_prefix}${arg_name}\" \"${CMAKE_BINARY_DIR}/${build_dir}/${barename}\")\n        ENDIF()\n\n        FOREACH(i RANGE 100)\n            IF(\"${${name_prefix}${arg_name}_arg_${i}}\" STREQUAL \"\")\n                break()\n            ENDIF()\n\n            add_test(\"${name_prefix}${barename}_${i}\" \"${CMAKE_BINARY_DIR}/${build_dir}/${barename}\"\n                     \"${${arg_name}_arg_${i}}\")\n        ENDFOREACH()\n    ENDFOREACH()\nENDMACRO()\n\nMACRO(FIND_AND_APPEND_SUB_DIRS npath skip_error)\n    FILE(GLOB children ${npath}/ ${npath}/*)\n\n    FOREACH(child ${children})\n        IF(${skip_error} AND NOT EXISTS \"${child}/CMakeLists.txt\")\n            CONTINUE()\n        ENDIF()\n\n        string(REGEX MATCH \"\\\\.[^/]+$\" MATCHSTR ${child})\n        IF(IS_DIRECTORY ${child} AND MATCHSTR STREQUAL \"\")\n            string(REGEX MATCH \"[^/]+$\" MATCHSTR ${child})\n            IF(NOT MATCHSTR STREQUAL \"ports\")\n                add_subdirectory(${child})\n            ELSE()\n                IF(EXISTS \"${child}/${LEXBOR_OS_PORT_NAME}/port.cmake\")\n                    message(STATUS \"Include port: ${child}/${LEXBOR_OS_PORT_NAME}\")\n                    include(\"${child}/${LEXBOR_OS_PORT_NAME}/port.cmake\")\n                ENDIF()\n\n                add_subdirectory(\"${child}/${LEXBOR_OS_PORT_NAME}\")\n            ENDIF()\n        ENDIF()\n    ENDFOREACH()\nENDMACRO()\n\nMACRO(MAKE_RPM_SPEC module libname out_result)\n    INCLUDE_MODULE_CONFIG(${PROJECT_NAME} ${module} \"${LEXBOR_SOURCE_LEXBOR}/${module}\")\n\n    GET_MODULE_VERSION(major minor patch version_string\n                       \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${module})\n    GET_MODULE_DEPENDENCIES(${PROJECT_NAME} ${module} deps)\n\n    set(requires \"\")\n    set(requires_devel \"\")\n\n    IF(NOT ${deps} STREQUAL \"\")\n        string(REPLACE \" \" \";\" deps ${deps})\n    ENDIF()\n\n    FOREACH(dep ${deps})\n        IF(${dep} STREQUAL \"\")\n            CONTINUE()\n        ENDIF()\n\n        GET_MODULE_VERSION(dep_major dep_minor dep_patch dep_version_string\n                           \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${dep})\n\n        set(dep_libname \"${PROJECT_NAME}-${dep}\")\n        set(requires \"${requires}Requires: lib${dep_libname} = %{epoch}:${dep_version_string}-%{release}\\n\")\n        set(requires_devel \"${requires_devel}Requires: lib${dep_libname}-devel = %{epoch}:${dep_version_string}-%{release}\\n\")\n    ENDFOREACH()\n\n    file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/rpm/liblexbor-module.spec.in\" rpm_module_in)\n\n    GET_MODULE_DESCRIPTION(\"${PROJECT_NAME}\" ${module} desc)\n\n    STRING(REGEX REPLACE \"%%NAME%%\" \"${module}\" rpm_module_in ${rpm_module_in})\n    STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${libname}\" rpm_module_in ${rpm_module_in})\n    STRING(REGEX REPLACE \"%%VERSION%%\" \"${version_string}\" rpm_module_in ${rpm_module_in})\n    STRING(REGEX REPLACE \"%%REQUIRES%%\" \"${requires}\" rpm_module_in ${rpm_module_in})\n    STRING(REGEX REPLACE \"%%REQUIRES_DEVEL%%\" \"${requires_devel}\" rpm_module_in ${rpm_module_in})\n    STRING(REGEX REPLACE \"%%DESCRIPTION%%\" \"${desc}\" rpm_module_in ${rpm_module_in})\n\n    set(${out_result} ${rpm_module_in})\nENDMACRO()\n\nMACRO(CREATE_RPM_SPEC_FILE)\n    set(modules_specs \"\")\n    set(req_modules \"\")\n    set(req_modules_devel \"\")\n\n    FOREACH(module ${LEXBOR_MODULES})\n        set(libname \"${PROJECT_NAME}-${module}\")\n\n        MAKE_RPM_SPEC(${module} ${libname} module_spec)\n\n        set(modules_specs \"${modules_specs}${module_spec}\\n\")\n\n        GET_MODULE_VERSION(major minor patch version_string\n                        \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${module})\n\n        set(req_modules \"${req_modules}Requires: lib${libname} = %{epoch}:${version_string}-%{release}\\n\")\n        set(req_modules_devel \"${req_modules_devel}Requires: lib${libname}-devel = %{epoch}:${version_string}-%{release}\\n\")\n    ENDFOREACH()\n\n    STRING(STRIP ${modules_specs} modules_specs)\n\n    set(sorted_modules ${LEXBOR_MODULES})\n    LIST(SORT sorted_modules)\n\n    LIST_TO_COLUMN(\"${sorted_modules}\" \"80\" \", \" modules_names)\n\n    file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/rpm/liblexbor.spec.in\"\n        rpm_spec_in)\n\n    STRING(REGEX REPLACE \"%%REQUIRES%%\" \"${req_modules}\" rpm_spec_in ${rpm_spec_in})\n    STRING(REGEX REPLACE \"%%REQUIRES_DEVEL%%\" \"${req_modules_devel}\" rpm_spec_in ${rpm_spec_in})\n    STRING(REGEX REPLACE \"%%MODULES_SPECS%%\" \"${modules_specs}\" rpm_spec_in ${rpm_spec_in})\n    STRING(REGEX REPLACE \"%%MODULES_NAMES%%\" \"${modules_names}\" rpm_spec_in ${rpm_spec_in})\n\n    file(WRITE \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/rpm/liblexbor.spec\"\n        \"${rpm_spec_in}\")\n\n    unset(modules_specs)\n    unset(req_modules)\n    unset(req_modules_devel)\nENDMACRO()\n\nMACRO(CREATE_DEB_DIRS with_inc module libname arch debian_in_dir debian_dir)\n    file(READ \"${debian_in_dir}/dirs\" dirs)\n    file(READ \"${debian_in_dir}/dev.dirs\" dev_dirs)\n    file(READ \"${debian_in_dir}/install\" inst)\n    file(READ \"${debian_in_dir}/dev.install\" dev_inst)\n\n    STRING(REGEX REPLACE \"%%ARCH%%\" \"${arch}\" dirs \"${dirs}\")\n    STRING(REGEX REPLACE \"%%ARCH%%\" \"${arch}\" dev_dirs \"${dev_dirs}\")\n    STRING(REGEX REPLACE \"%%ARCH%%\" \"${arch}\" inst \"${inst}\")\n    STRING(REGEX REPLACE \"%%ARCH%%\" \"${arch}\" dev_inst \"${dev_inst}\")\n    STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${libname}\" inst \"${inst}\")\n    STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${libname}\" dev_inst \"${dev_inst}\")\n\n    IF(${with_inc})\n        IF(NOT ${module} STREQUAL \"\")\n            STRING(REGEX REPLACE \"%%INCLUDES%%\" \"usr/include/lexbor/${module}\" dev_dirs \"${dev_dirs}\")\n            STRING(REGEX REPLACE \"%%INCLUDES%%\" \"usr/include/lexbor/${module}\" dev_inst \"${dev_inst}\")\n        ELSE()\n            STRING(REGEX REPLACE \"%%INCLUDES%%\" \"usr/include/lexbor\" dev_dirs \"${dev_dirs}\")\n            STRING(REGEX REPLACE \"%%INCLUDES%%\" \"usr/include/lexbor\" dev_inst \"${dev_inst}\")\n        ENDIF()\n    ELSE()\n        STRING(REGEX REPLACE \"%%INCLUDES%%\" \"\" dev_dirs \"${dev_dirs}\")\n        STRING(REGEX REPLACE \"%%INCLUDES%%\" \"\" dev_inst \"${dev_inst}\")\n    ENDIF()\n\n    file(WRITE \"${debian_dir}/lib${libname}.dirs\" \"${dirs}\")\n    file(WRITE \"${debian_dir}/lib${libname}-dev.dirs\" \"${dev_dirs}\")\n    file(WRITE \"${debian_dir}/lib${libname}.install\" \"${inst}\")\n    file(WRITE \"${debian_dir}/lib${libname}-dev.install\" \"${dev_inst}\")\n\n    unset(dirs)\n    unset(dev_dirs)\n    unset(inst)\n    unset(dev_inst)\nENDMACRO()\n\nMACRO(PACKAGE_DEB_CREATE_MAKEFILES)\n    set(mkdeps \"\")\n    set(mkmodules \"\")\n\n    # Create deps for modules\n    file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/deb/Makefile.module.in\" mkmodule_in)\n\n    FOREACH(module ${LEXBOR_MODULES})\n        set(libname \"${PROJECT_NAME}-${module}\")\n        set(module_out \"${mkmodule_in}\")\n        set(deps_cp \"\")\n\n        INCLUDE_MODULE_CONFIG(${PROJECT_NAME} ${module} \"${LEXBOR_SOURCE_LEXBOR}/${module}\")\n\n        GET_MODULE_VERSION(major minor patch version_string\n                           \"${LEXBOR_SOURCE}\" ${PROJECT_NAME} ${module})\n        GET_MODULE_DEPENDENCIES(${PROJECT_NAME} ${module} deps)\n\n        LIST(APPEND mkdeps \"lib${libname}\")\n        LIST(APPEND deps_cp \"source/${PROJECT_NAME}/${module}\")\n        LIST(APPEND deps_cp \"source/${PROJECT_NAME}/ports/${LEXBOR_OS_PORT_NAME}/config.cmake\")\n\n        set(port_path \"source/${PROJECT_NAME}/ports/${LEXBOR_OS_PORT_NAME}/${PROJECT_NAME}/${module}\")\n\n        IF(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/${port_path}\")\n            LIST(APPEND deps_cp \"${port_path}\")\n        ENDIF()\n\n        IF(NOT ${deps} STREQUAL \"\")\n            string(REPLACE \" \" \";\" deps ${deps})\n\n            FOREACH(dep ${deps})\n                LIST(APPEND deps_cp \"source/${PROJECT_NAME}/${dep}\")\n\n                set(port_path \"source/${PROJECT_NAME}/ports/${LEXBOR_OS_PORT_NAME}/${PROJECT_NAME}/${dep}\")\n\n                IF(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/${port_path}\")\n                    LIST(APPEND deps_cp \"${port_path}\")\n                ENDIF()\n            ENDFOREACH()\n        ENDIF()\n\n        LIST_JOIN(deps_cp \" \" deps_cp)\n\n        STRING(REGEX REPLACE \"%%MODULE%%\" \"${module}\" module_out \"${module_out}\")\n        STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${libname}\" module_out \"${module_out}\")\n        STRING(REGEX REPLACE \"%%MODULE_VERSION%%\" \"${version_string}\" module_out \"${module_out}\")\n        STRING(REGEX REPLACE \"%%FOR_COPY%%\" \"${deps_cp}\" module_out \"${module_out}\")\n\n        set(mkmodules \"${mkmodules}\\n# ${module}\\n${module_out}\")\n    ENDFOREACH()\n\n    # Create Makefile\n    file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/deb/Makefile.in\" mkfile_in)\n\n    LIST_JOIN(mkdeps \" \" mkdeps)\n    STRING(REGEX REPLACE \"%%MODULES_DEPS%%\" \"${mkdeps}\" mkfile_in \"${mkfile_in}\")\n    STRING(REGEX REPLACE \"%%MODULES%%\" \"${mkmodules}\" mkfile_in \"${mkfile_in}\")\n\n    file(WRITE \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/deb/Makefile\" \"${mkfile_in}\")\n\n    unset(port_path)\n    unset(mkdeps)\n    unset(mkmodules)\n    unset(deps_cp)\n    unset(libname)\n    unset(mkfile_in)\n    unset(module_out)\n    unset(mkmodule_in)\nENDMACRO()\n\nMACRO(PACKAGE_DEB_CREATE_DEBIAN_MAIN arch codename curdate)\n    set(debian_dir \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/deb/debian/${PROJECT_NAME}\")\n    set(debian_in_dir \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/deb/debian_main_in\")\n\n    message(STATUS \"Create DEB files for \\\"${PROJECT_NAME}\\\": ${debian_dir}\")\n\n    set(deps \"${LEXBOR_MODULES}\")\n\n    file(MAKE_DIRECTORY \"${debian_dir}/source\")\n\n    # changelog\n    file(READ \"${debian_in_dir}/changelog\" data)\n    STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${PROJECT_NAME}\" data \"${data}\")\n    STRING(REGEX REPLACE \"%%VERSION%%\" \"${LEXBOR_VERSION_STRING}\" data \"${data}\")\n    STRING(REGEX REPLACE \"%%DISTRO%%\" \"${LEXBOR_MAKE_DISTRO_NUM}\" data \"${data}\")\n    STRING(REGEX REPLACE \"%%CODENAME%%\" \"${codename}\" data \"${data}\")\n    STRING(REGEX REPLACE \"%%DATE%%\" \"${curdate}\" data \"${data}\")\n    file(WRITE \"${debian_dir}/changelog\" \"${data}\")\n\n    # compat\n    file(COPY \"${debian_in_dir}/compat\" DESTINATION \"${debian_dir}\")\n\n    # docs\n    file(COPY \"${debian_in_dir}/docs\" DESTINATION \"${debian_dir}\")\n\n    # rules\n    file(COPY \"${debian_in_dir}/rules\" DESTINATION \"${debian_dir}\")\n\n    # source/format\n    file(COPY \"${debian_in_dir}/source/format\" DESTINATION \"${debian_dir}/source\")\n\n    # control\n    file(READ \"${debian_in_dir}/control\" data)\n    STRING(REGEX REPLACE \"%%VERSION_DISTRO%%\" \"${LEXBOR_VERSION_STRING}-${LEXBOR_MAKE_DISTRO_NUM}~${codename}\" data \"${data}\")\n\n    # control -- sort modules\n    set(sorted_modules ${deps})\n    LIST(SORT sorted_modules)\n\n    LIST_TO_COLUMN(\"${sorted_modules}\" \"79\" \", \" modules_names)\n\n    IF(NOT ${modules_names} STREQUAL \"\")\n        STRING(REGEX REPLACE \"\\n\" \"\\n \" modules_names ${modules_names})\n        STRING(STRIP ${modules_names} modules_names)\n    ENDIF()\n\n    # control -- replace and save\n    STRING(REGEX REPLACE \"%%NAME%%\" \"${module}\" data \"${data}\")\n    STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${PROJECT_NAME}\" data \"${data}\")\n    STRING(REGEX REPLACE \"%%MODULES_NAMES%%\" \"${modules_names}\" data ${data})\n\n    file(WRITE \"${debian_dir}/control\" \"${data}\")\n\n    # copyright\n    file(READ \"${debian_in_dir}/copyright\" data)\n\n    set(files \"\")\n    string(TIMESTAMP year \"%Y\")\n\n    SUBDIRLIST(\"${CMAKE_CURRENT_SOURCE_DIR}/source\" \"source/\" \"/*\" dirs_list)\n\n    LIST(APPEND files ${dirs_list})\n    LIST_JOIN(files \"\\n \" files)\n\n    STRING(REGEX REPLACE \"%%YEAR%%\" \"${year}\" data \"${data}\")\n    STRING(REGEX REPLACE \"%%FILES%%\" \"${files}\" data \"${data}\")\n\n    file(WRITE \"${debian_dir}/copyright\" \"${data}\")\n\n    # dirs and install\n    CREATE_DEB_DIRS(TRUE \"\" ${PROJECT_NAME} \"${arch}\" \"${debian_in_dir}\" \"${debian_dir}\")\nENDMACRO()\n\nMACRO(PACKAGE_DEB_CREATE_DEBIAN arch codename curdate)\n    PACKAGE_DEB_CREATE_DEBIAN_MAIN(${arch} \"${codename}\" \"${curdate}\")\n\n    FOREACH(module ${LEXBOR_MODULES})\n        set(libname \"${PROJECT_NAME}-${module}\")\n        set(debian_dir \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/deb/debian/${module}\")\n        set(debian_in_dir \"${CMAKE_CURRENT_SOURCE_DIR}/packaging/deb/debian_in\")\n\n        message(STATUS \"Create DEB files for \\\"${module}\\\": ${debian_dir}\")\n\n        INCLUDE_MODULE_CONFIG(${PROJECT_NAME} ${module} \"${LEXBOR_SOURCE_LEXBOR}/${module}\")\n\n        GET_MODULE_VERSION(major minor patch version_string\n                           \"${LEXBOR_SOURCE}\" ${PROJECT_NAME} ${module})\n        GET_MODULE_DEPENDENCIES(${PROJECT_NAME} ${module} deps)\n\n        IF(NOT \"${deps}\" STREQUAL \"\")\n            string(REPLACE \" \" \";\" deps ${deps})\n        ENDIF()\n\n        file(MAKE_DIRECTORY \"${debian_dir}/source\")\n\n        # changelog\n        file(READ \"${debian_in_dir}/changelog\" data)\n        STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${libname}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%VERSION%%\" \"${version_string}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%DISTRO%%\" \"${LEXBOR_MAKE_DISTRO_NUM}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%CODENAME%%\" \"${codename}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%DATE%%\" \"${curdate}\" data \"${data}\")\n        file(WRITE \"${debian_dir}/changelog\" \"${data}\")\n\n        # compat\n        file(COPY \"${debian_in_dir}/compat\" DESTINATION \"${debian_dir}\")\n\n        # docs\n        file(COPY \"${debian_in_dir}/docs\" DESTINATION \"${debian_dir}\")\n\n        # rules\n        file(COPY \"${debian_in_dir}/rules\" DESTINATION \"${debian_dir}\")\n\n        # source/format\n        file(COPY \"${debian_in_dir}/source/format\" DESTINATION \"${debian_dir}/source\")\n\n        # control\n        file(READ \"${debian_in_dir}/control\" data)\n\n        # control -- Depends\n        set(version_distro \"${version_string}-${LEXBOR_MAKE_DISTRO_NUM}~${codename}\")\n    \n        set(requires \"\\${misc:Depends}, \\${shlibs:Depends}\")\n        set(requires_devel \"\\${misc:Depends}\")\n        set(requires_devel \"lib${libname} (= ${version_distro})\")\n\n        FOREACH(dep ${deps})\n            IF(\"${dep}\" STREQUAL \"\")\n                CONTINUE()\n            ENDIF()\n\n            GET_MODULE_VERSION(dep_major dep_minor dep_patch dep_version_string\n                               \"${LEXBOR_SOURCE}\" \"${PROJECT_NAME}\" ${dep})\n\n            set(dep_version_distro \"${dep_version_string}-${LEXBOR_MAKE_DISTRO_NUM}~${codename}\")\n\n            set(dep_libname \"${PROJECT_NAME}-${dep}\")\n            LIST(APPEND requires \"lib${dep_libname} (= ${dep_version_distro})\")\n            LIST(APPEND requires_devel \"lib${dep_libname}-dev (= ${dep_version_distro})\")\n        ENDFOREACH()\n\n        LIST_JOIN(requires \",\\n         \" requires)\n        LIST_JOIN(requires_devel \",\\n         \" requires_devel)\n    \n        set(requires \"Depends: ${requires}\\n\")\n        set(requires_devel \"Depends: ${requires_devel}\\n\")\n\n        # control -- description\n        GET_MODULE_DESCRIPTION(\"${PROJECT_NAME}\" ${module} desc)\n\n        IF(NOT \"${desc}\" STREQUAL \"\")\n            STRING(REGEX REPLACE \"\\n\" \"\\n \" desc ${desc})\n            STRING(STRIP ${desc} desc)\n            set(desc \" ${desc}\")\n        ENDIF()\n\n        IF(NOT \"${desc}\" STREQUAL \"\")\n            STRING(REGEX REPLACE \"(^|\\n) (\\n|$)\" \"\\\\1 .\\\\2\" desc ${desc})\n        ENDIF()\n\n        # control -- replace and save\n        STRING(REGEX REPLACE \"%%NAME%%\" \"${module}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%LIBNAME%%\" \"${libname}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%DEPENDS%%\" \"${requires}\" data ${data})\n        STRING(REGEX REPLACE \"%%DEPENDS_DEVEL%%\" \"${requires_devel}\" data ${data})\n        STRING(REGEX REPLACE \"%%DESCRIPTION%%\" \"${desc}\" data ${data})\n\n        file(WRITE \"${debian_dir}/control\" \"${data}\")\n\n        # copyright\n        file(READ \"${debian_in_dir}/copyright\" data)\n\n        set(files \"\")\n        set(deps_with \"${deps};${module}\")\n        string(TIMESTAMP year \"%Y\")\n\n        FOREACH(dep ${deps_with})\n            IF(\"${dep}\" STREQUAL \"\")\n                CONTINUE()\n            ENDIF()\n\n            SUBDIRLIST(\"${CMAKE_CURRENT_SOURCE_DIR}/source/${PROJECT_NAME}/${dep}\"\n                       \"source/${PROJECT_NAME}/${dep}/\" \"/*\" dirs_list)\n            LIST(APPEND files \"source/${PROJECT_NAME}/${dep}/*\")\n            LIST(APPEND files ${dirs_list})\n        ENDFOREACH()\n\n        LIST_JOIN(files \"\\n \" files)\n\n        STRING(REGEX REPLACE \"%%NAME%%\" \"${module}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%YEAR%%\" \"${year}\" data \"${data}\")\n        STRING(REGEX REPLACE \"%%FILES%%\" \"${files}\" data \"${data}\")\n\n        file(WRITE \"${debian_dir}/copyright\" \"${data}\")\n\n        # dirs and install\n        CREATE_DEB_DIRS(TRUE ${module} ${libname} \"${arch}\" \"${debian_in_dir}\"\n                        \"${debian_dir}\")\n    ENDFOREACH()\n\n    unset(requires)\n    unset(requires_devel)\n    unset(dirs_list)\n    unset(files)\n    unset(year)\n    unset(deps)\n    unset(data)\n    unset(debian_in_dir)\n    unset(debian_dir)\n    unset(dep_libname)\n    unset(libname)\n    unset(arch)\nENDMACRO()\n\nMACRO(CREATE_DEB_FILES)\n    execute_process(COMMAND \"dpkg-architecture\" \"-qDEB_HOST_MULTIARCH\"\n                    OUTPUT_VARIABLE arch)\n\n    IF(\"${arch}\" STREQUAL \"\")\n        message(FATAL_ERROR \"Failed to get current architecture\")\n    ENDIF()\n\n    execute_process(COMMAND \"lsb_release\" \"-cs\" OUTPUT_VARIABLE codename)\n\n    IF(\"${codename}\" STREQUAL \"\")\n        message(FATAL_ERROR \"Failed to get current codename\")\n    ENDIF()\n\n    execute_process(COMMAND \"date\" \"+%a, %d %b %Y %T +0300\"\n                    OUTPUT_VARIABLE curdate)\n\n    IF(\"${curdate}\" STREQUAL \"\")\n        message(FATAL_ERROR \"Failed to get current date\")\n    ENDIF()\n\n    STRING(STRIP ${arch} arch)\n    STRING(STRIP ${codename} codename)\n    STRING(STRIP ${curdate} curdate)\n\n    PACKAGE_DEB_CREATE_MAKEFILES(${arch})\n    PACKAGE_DEB_CREATE_DEBIAN(${arch} \"${codename}\" \"${curdate}\")\n\n    unset(arch)\n    unset(codename)\n    unset(curdate)\nENDMACRO()\n\n################\n## ARGS\n#########################\nIF(LEXBOR_WITHOUT_THREADS)\n    message(STATUS \"Build without Threads\")\n    add_definitions(-DLEXBOR_WITHOUT_THREADS)\nELSE()\n    message(STATUS \"Build with Threads\")\nENDIF()\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "feature.cmake",
          "type": "blob",
          "size": 4.3525390625,
          "content": "include(CheckFunctionExists)\n\n################\n## Check Math functions\n#########################\nMACRO(FEATURE_TRY_FUNCTION_EXISTS target fname lib_name)\n    CHECK_FUNCTION_EXISTS(${fname} test_result)\n\n    IF(NOT test_result)\n        unset(test_result CACHE)\n\n        list(APPEND CMAKE_REQUIRED_LIBRARIES ${lib_name})\n\n        CHECK_FUNCTION_EXISTS(${fname} test_result)\n\n        STRING(REGEX REPLACE \"${lib_name}\" \"\" CMAKE_REQUIRED_LIBRARIES\n               ${CMAKE_REQUIRED_LIBRARIES})\n\n        IF(test_result)\n            target_link_libraries(${target} ${lib_name})\n        ELSE()\n            message(FATAL_ERROR \"checking for ${fname}() ... not found\")\n        ENDIF()\n    ENDIF()\n\n    unset(test_result CACHE)\nENDMACRO()\n\nMACRO(FEATURE_CHECK_ASAN out_result)\n    set(lexbor_asan_flags \"-O0 -g -fsanitize=address -fno-omit-frame-pointer\")\n\n    IF(LEXBOR_BUILD_WITH_ASAN)\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${lexbor_asan_flags}\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${lexbor_asan_flags}\")\n    ENDIF()\n\n    set(feature_filename \"${CMAKE_BINARY_DIR}/feature_check.c\")\n\n    set(FEATUTE_CHECK_STRING \"\n#include <sanitizer/asan_interface.h>\n\nint main(void) {\n    return\n    #ifdef __SANITIZE_ADDRESS__\n        #if defined(ASAN_POISON_MEMORY_REGION) && defined(ASAN_UNPOISON_MEMORY_REGION)\n            0;\n        #endif\n    #else\n        #if defined(__has_feature)\n            #if __has_feature(address_sanitizer)\n                #if defined(ASAN_POISON_MEMORY_REGION) && defined(ASAN_UNPOISON_MEMORY_REGION)\n                    0;\n                #endif\n            #endif\n        #endif\n    #endif\n}\")\n\n    file(WRITE ${feature_filename} \"${FEATUTE_CHECK_STRING}\")\n\n    try_compile(${out_result} \"${CMAKE_BINARY_DIR}\" \"${feature_filename}\"\n        CMAKE_FLAGS \"-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}\"\n    )\n\n    IF(${${out_result}})\n        message(STATUS \"Feature ASAN: enabled\")\n    ELSE()\n        message(STATUS \"Feature ASAN: disable\")\n    ENDIF()\n\n    file(REMOVE ${feature_filename})\n\n    IF(LEXBOR_BUILD_WITH_ASAN)\n        IF(NOT ${${out_result}})\n            STRING(REGEX REPLACE \" ${lexbor_asan_flags}\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n            STRING(REGEX REPLACE \" ${lexbor_asan_flags}\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n        ELSE()\n            message(STATUS \"Updated CFLAGS: ${CMAKE_C_FLAGS}\")\n            message(STATUS \"Updated CXXFLAGS: ${CMAKE_CXX_FLAGS}\")\n        ENDIF()\n    ENDIF()\n\n    unset(lexbor_asan_flags)\n    unset(FEATUTE_CHECK_STRING)\n    unset(feature_filename)\nENDMACRO()\n\nMACRO(FEATURE_CHECK_FUZZER out_result)\n    IF(NOT LEXBOR_BUILD_WITH_FUZZER)\n        message(STATUS \"Feature Fuzzer: disable\")\n    ELSE()\n        set(lexbor_old_c_flags \"${CMAKE_C_FLAGS}\")\n        set(lexbor_old_cxx_flags \"${CMAKE_CXX_FLAGS}\")\n        set(lexbor_fuzzer_flags \"-O0 -g -fsanitize=fuzzer\")\n        set(feature_filename \"${CMAKE_BINARY_DIR}/feature_check.c\")\n\n        STRING(REGEX REPLACE \" ?-O[0-9]\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n        STRING(REGEX REPLACE \" ?-O[0-9]\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${lexbor_fuzzer_flags}\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${lexbor_fuzzer_flags}\")\n\n        set(FEATUTE_CHECK_STRING \"\n#include <sanitizer/asan_interface.h>\n\nint\nLLVMFuzzerTestOneInput(const uint8_t *data, size_t size)\n{\n    return 0;\n}\n\")\n\n        file(WRITE ${feature_filename} \"${FEATUTE_CHECK_STRING}\")\n\n        try_compile(${out_result} \"${CMAKE_BINARY_DIR}\" \"${feature_filename}\"\n            CMAKE_FLAGS \"${lexbor_fuzzer_flags}\"\n            OUTPUT_VARIABLE OUTPUT\n        )\n\n        IF(${out_result})\n            message(STATUS \"Feature Fuzzer: enabled\")\n            message(STATUS \"Updated CFLAGS: ${CMAKE_C_FLAGS}\")\n            message(STATUS \"Updated CXXFLAGS: ${CMAKE_CXX_FLAGS}\")\n\n            set(${out_result} TRUE)\n        ELSE()\n            set(CMAKE_C_FLAGS ${lexbor_old_c_flags})\n            set(CMAKE_CXX_FLAGS ${lexbor_old_cxx_flags})\n\n            message(STATUS \"Feature Fuzzer: аn error was received at compilation.\")\n            message(STATUS \"Feature Fuzzer OUTPUT:\")\n            message(FATAL_ERROR ${OUTPUT})\n\n            set(${out_result} FALSE)\n        ENDIF()\n\n        file(REMOVE ${feature_filename})\n\n        unset(lexbor_old_c_flags)\n        unset(lexbor_old_cxx_flags)\n        unset(lexbor_fuzzer_flags)\n        unset(FEATUTE_CHECK_STRING)\n        unset(feature_filename)\n    ENDIF()\nENDMACRO()\n"
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "pvs_studio.sh",
          "type": "blob",
          "size": 0.4111328125,
          "content": "#!/bin/sh\n\nset -e\n\nif [[ ! -d $1 ]]; then\n    >&2 echo \"$0: error: directory not exist $1\"\n    exit 1\nfi\n\nmkdir -p ./pvs-studio/build\ncd ./pvs-studio/build\n\npvs-studio-analyzer credentials ${LEXBOR_PVS_NAME} ${LEXBOR_PVS_KEY}\n\ncmake $1 -DCMAKE_EXPORT_COMPILE_COMMANDS=On -DLEXBOR_BUILD_EXAMPLES=ON\n\npvs-studio-analyzer analyze -o ../project.log -j8\nplog-converter -a GA:1,2 -t tasklist -o ../project.tasks ../project.log\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "blob",
          "size": 0.01953125,
          "content": "LEXBOR_VERSION=2.4.0"
        }
      ]
    }
  ]
}