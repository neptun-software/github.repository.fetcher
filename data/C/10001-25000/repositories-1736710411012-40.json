{
  "metadata": {
    "timestamp": 1736710411012,
    "page": 40,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "espressif/esp-idf",
      "stars": 14229,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.298828125,
          "content": "[codespell]\nskip = build,*.yuv,components/fatfs/src/*,alice.txt,*.rgb,components/wpa_supplicant/*,components/esp_wifi/*,*.pem,components/newlib/COPYING.*\nignore-words-list = ser,dout,rsource,fram,inout,shs,ans,aci,unstall,unstalling,hart,wheight,wel,ot,fane,assertIn,registr,oen,parms\nwrite-changes = true\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.6015625,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# http://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[{*.md,*.rst}]\ntrim_trailing_whitespace = false\n\n[{Makefile,*.mk,*.bat}]\nindent_style = tab\nindent_size = 2\n\n[*.pem]\ninsert_final_newline = false\n\n[*.py]\nmax_line_length = 119\n\n[{*.cmake,CMakeLists.txt}]\nindent_style = space\nindent_size = 4\nmax_line_length = 120\n\n[{*.sh,*.yml,*.yaml}]\nindent_size = 2\n\n[*.ini]\nindent_size = 2\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 8.6201171875,
          "content": "[flake8]\n\nselect =\n    # Full lists are given in order to suppress all errors from other plugins\n    # Full list of pyflakes error codes:\n    F401,           # module imported but unused\n    F402,           # import module from line N shadowed by loop variable\n    F403,           # 'from module import *' used; unable to detect undefined names\n    F404,           # future import(s) name after other statements\n    F405,           # name may be undefined, or defined from star imports: module\n    F406,           # 'from module import *' only allowed at module level\n    F407,           # an undefined __future__ feature name was imported\n    F601,           # dictionary key name repeated with different values\n    F602,           # dictionary key variable name repeated with different values\n    F621,           # too many expressions in an assignment with star-unpacking\n    F622,           # two or more starred expressions in an assignment (a, *b, *c = d)\n    F631,           # assertion test is a tuple, which are always True\n    F701,           # a break statement outside of a while or for loop\n    F702,           # a continue statement outside of a while or for loop\n    F703,           # a continue statement in a finally block in a loop\n    F704,           # a yield or yield from statement outside of a function\n    F705,           # a return statement with arguments inside a generator\n    F706,           # a return statement outside of a function/method\n    F707,           # an except: block as not the last exception handler\n    F721, F722,     #    doctest syntax error syntax error in forward type annotation\n    F811,           # redefinition of unused name from line N\n    F812,           # list comprehension redefines name from line N\n    F821,           # undefined name name\n    F822,           # undefined name name in __all__\n    F823,           # local variable name referenced before assignment\n    F831,           # duplicate argument name in function definition\n    F841,           # local variable name is assigned to but never used\n    F901,           # raise NotImplemented should be raise NotImplementedError\n\n    # Full list of pycodestyle violations:\n    E101,           # indentation contains mixed spaces and tabs\n    E111,           # indentation is not a multiple of four\n    E112,           # expected an indented block\n    E113,           # unexpected indentation\n    E114,           # indentation is not a multiple of four (comment)\n    E115,           # expected an indented block (comment)\n    E116,           # unexpected indentation (comment)\n    E121,           # continuation line under-indented for hanging indent\n    E122,           # continuation line missing indentation or outdented\n    E123,           # closing bracket does not match indentation of opening bracket's line\n    E124,           # closing bracket does not match visual indentation\n    E125,           # continuation line with same indent as next logical line\n    E126,           # continuation line over-indented for hanging indent\n    E127,           # continuation line over-indented for visual indent\n    E128,           # continuation line under-indented for visual indent\n    E129,           # visually indented line with same indent as next logical line\n    E131,           # continuation line unaligned for hanging indent\n    E133,           # closing bracket is missing indentation\n    E201,           # whitespace after '('\n    E202,           # whitespace before ')'\n    E203,           # whitespace before ':'\n    E211,           # whitespace before '('\n    E221,           # multiple spaces before operator\n    E222,           # multiple spaces after operator\n    E223,           # tab before operator\n    E224,           # tab after operator\n    E225,           # missing whitespace around operator\n    E226,           # missing whitespace around arithmetic operator\n    E227,           # missing whitespace around bitwise or shift operator\n    E228,           # missing whitespace around modulo operator\n    E231,           # missing whitespace after ',', ';', or ':'\n    E241,           # multiple spaces after ','\n    E242,           # tab after ','\n    E251,           # unexpected spaces around keyword / parameter equals\n    E261,           # at least two spaces before inline comment\n    E262,           # inline comment should start with '# '\n    E265,           # block comment should start with '# '\n    E266,           # too many leading '#' for block comment\n    E271,           # multiple spaces after keyword\n    E272,           # multiple spaces before keyword\n    E273,           # tab after keyword\n    E274,           # tab before keyword\n    E275,           # missing whitespace after keyword\n    E301,           # expected 1 blank line, found 0\n    E302,           # expected 2 blank lines, found 0\n    E303,           # too many blank lines\n    E304,           # blank lines found after function decorator\n    E305,           # expected 2 blank lines after end of function or class\n    E306,           # expected 1 blank line before a nested definition\n    E401,           # multiple imports on one line\n    E402,           # module level import not at top of file\n    E501,           # line too long (82 > 79 characters)\n    E502,           # the backslash is redundant between brackets\n    E701,           # multiple statements on one line (colon)\n    E702,           # multiple statements on one line (semicolon)\n    E703,           # statement ends with a semicolon\n    E704,           # multiple statements on one line (def)\n    E711,           # comparison to None should be 'if cond is None:'\n    E712,           # comparison to True should be 'if cond is True:' or 'if cond:'\n    E713,           # test for membership should be 'not in'\n    E714,           # test for object identity should be 'is not'\n    E721,           # do not compare types, use 'isinstance()'\n    E722,           # do not use bare except, specify exception instead\n    E731,           # do not assign a lambda expression, use a def\n    E741,           # do not use variables named 'l', 'O', or 'I'\n    E742,           # do not define classes named 'l', 'O', or 'I'\n    E743,           # do not define functions named 'l', 'O', or 'I'\n    E901,           # SyntaxError or IndentationError\n    E902,           # IOError\n    W191,           # indentation contains tabs\n    W291,           # trailing whitespace\n    W292,           # no newline at end of file\n    W293,           # blank line contains whitespace\n    W391,           # blank line at end of file\n    W503,           # line break before binary operator\n    W504,           # line break after binary operator\n    W505,           # doc line too long (82 > 79 characters)\n    W601,           # .has_key() is deprecated, use 'in'\n    W602,           # deprecated form of raising exception\n    W603,           # '<>' is deprecated, use '!='\n    W604,           # backticks are deprecated, use 'repr()'\n    W605,           # invalid escape sequence 'x'\n    W606,           # 'async' and 'await' are reserved keywords starting with Python 3.7\n\n    # Full list of flake8 violations\n    E999,           # failed to compile a file into an Abstract Syntax Tree for the plugins that require it\n\n    # Full list of mccabe violations\n    C901            # complexity value provided by the user\n\nignore =\n    E221,           # multiple spaces before operator\n    E231,           # missing whitespace after ',', ';', or ':'\n    E241,           # multiple spaces after ','\n    W503,           # line break before binary operator\n    W504            # line break after binary operator\n\nmax-line-length = 160\n\nshow_source = True\n\nstatistics = True\n\nexclude =\n    .git,\n    __pycache__,\n    # submodules\n        components/bootloader/subproject/components/micro-ecc/micro-ecc,\n        components/bt/host/nimble/nimble,\n        components/cmock/CMock,\n        components/json/cJSON,\n        components/mbedtls/mbedtls,\n        components/openthread/openthread,\n        components/unity/unity,\n        components/spiffs/spiffs,\n    # autogenerated scripts\n        components/protocomm/python/constants_pb2.py,\n        components/protocomm/python/sec0_pb2.py,\n        components/protocomm/python/sec1_pb2.py,\n        components/protocomm/python/sec2_pb2.py,\n        components/protocomm/python/session_pb2.py,\n        components/wifi_provisioning/python/wifi_ctrl_pb2.py,\n        components/wifi_provisioning/python/wifi_scan_pb2.py,\n        components/wifi_provisioning/python/wifi_config_pb2.py,\n        components/wifi_provisioning/python/wifi_constants_pb2.py,\n        components/esp_local_ctrl/python/esp_local_ctrl_pb2.py,\n\nper-file-ignores =\n    # Sphinx conf.py files use star imports to setup config variables\n        docs/conf_common.py: F405\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.58984375,
          "content": ".config\n*.o\n*.pyc\n\n# gtags\nGTAGS\nGRTAGS\nGPATH\n\n# emacs\n.dir-locals.el\n\n# emacs temp file suffixes\n*~\n.#*\n\\#*#\n\n# eclipse setting\n.settings\n\n# MacOS directory files\n.DS_Store\n\n# cache dir\n.cache/\n\n# Doc build artifacts\ndocs/_build/\ndocs/doxygen_sqlite3.db\n\n# Downloaded font files\ndocs/_static/DejaVuSans.ttf\ndocs/_static/NotoSansSC-Regular.otf\n\n# Components Unit Test Apps files\ncomponents/**/build/\ncomponents/**/build_*_*/\ncomponents/**/sdkconfig\ncomponents/**/sdkconfig.old\n\n# Example project files\nexamples/**/build/\nexamples/**/build_*_*/\nexamples/**/sdkconfig\nexamples/**/sdkconfig.old\n\n# Unit test app files\ntools/unit-test-app/build\ntools/unit-test-app/build_*_*/\ntools/unit-test-app/sdkconfig\ntools/unit-test-app/sdkconfig.old\n\n# test application build files\ntools/test_apps/**/build/\ntools/test_apps/**/build_*_*/\ntools/test_apps/**/sdkconfig\ntools/test_apps/**/sdkconfig.old\n\nTEST_LOGS/\nbuild_summary_*.xml\n\n# gcov coverage reports\n*.gcda\n*.gcno\ncoverage.info\ncoverage_report/\n\ntest_multi_heap_host\n\n# VS Code Settings\n.vscode/\n\n# VIM files\n*.swp\n*.swo\n\n# Sublime Text files\n*.sublime-project\n*.sublime-workspace\n\n# Clion IDE CMake build & config\n.idea/\ncmake-build-*/\n\n# Results for the checking of the Python coding style and static analysis\n.mypy_cache\nflake8_output.txt\n\n# ESP-IDF default build directory name\nbuild\n\n# lock files for examples and components\ndependencies.lock\n\n# managed_components for examples\nmanaged_components\n\n# pytest log\npytest-embedded/\n# legacy one\npytest_embedded_log/\nlist_job*.txt\nsize_info*.txt\nXUNIT_RESULT*.xml\n.manifest_sha\n\n# clang config (for LSP)\n.clangd\n\n# Vale\n.vale/styles/*\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 1.3037109375,
          "content": "workflow:\n  rules:\n    # Disable those non-protected push triggered pipelines\n    - if: '$CI_COMMIT_REF_NAME != \"master\" && $CI_COMMIT_BRANCH !~ /^release\\/v/ && $CI_COMMIT_TAG !~ /^v\\d+\\.\\d+(\\.\\d+)?($|-)/ && $CI_COMMIT_TAG !~ /^qa-test/ && $CI_PIPELINE_SOURCE == \"push\"'\n      when: never\n    # when running merged result pipelines, CI_COMMIT_SHA represents the temp commit it created.\n    # Please use PIPELINE_COMMIT_SHA at all places that require a commit sha of the original commit.\n    - if: $CI_OPEN_MERGE_REQUESTS != null\n      variables:\n        PIPELINE_COMMIT_SHA: $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA\n        IS_MR_PIPELINE: 1\n    - if: $CI_OPEN_MERGE_REQUESTS == null\n      variables:\n        PIPELINE_COMMIT_SHA: $CI_COMMIT_SHA\n        IS_MR_PIPELINE: 0\n    - when: always\n\n# Place the default settings in `.gitlab/ci/common.yml` instead\n\ninclude:\n  - '.gitlab/ci/danger.yml'\n  - '.gitlab/ci/common.yml'\n  - '.gitlab/ci/rules.yml'\n  - '.gitlab/ci/upload_cache.yml'\n  - '.gitlab/ci/docs.yml'\n  - '.gitlab/ci/static-code-analysis.yml'\n  - '.gitlab/ci/pre_commit.yml'\n  - '.gitlab/ci/pre_check.yml'\n  - '.gitlab/ci/build.yml'\n  - '.gitlab/ci/integration_test.yml'\n  - '.gitlab/ci/host-test.yml'\n  - '.gitlab/ci/deploy.yml'\n  - '.gitlab/ci/post_deploy.yml'\n  - '.gitlab/ci/retry_failed_jobs.yml'\n  - '.gitlab/ci/test-win.yml'\n"
        },
        {
          "name": ".gitlab",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 5.7958984375,
          "content": "#\n# All the relative URL paths are intended to be GitHub ones\n# For Espressif's public projects please use '../../espressif/proj', not a '../proj'\n#\n# Submodules SBOM information\n# ---------------------------\n# Submodules, which are used directly and not forked into espressif namespace should\n# contain SBOM information here. Other submodules should have the SBOM manifest file\n# included in the root of their project's repository.\n#\n# The sbom-hash entry records the submodule's checkout SHA as presented in git-tree\n# commit object. For example spiffs submodule\n#\n# $ git ls-tree HEAD components/spiffs/spiffs\n# 160000 commit 0dbb3f71c5f6fae3747a9d935372773762baf852\tcomponents/spiffs/spiffs\n#\n# The hash can be also obtained with git submodule command\n#\n# $ git submodule status components/spiffs/spiffs\n# 0dbb3f71c5f6fae3747a9d935372773762baf852 components/spiffs/spiffs (0.2-255-g0dbb3f71c5f6)\n#\n# The submodule SHA recorded here has to match with SHA, which is presented in git-tree.\n# This is checked by CI. Also please don't forget to update the submodule version\n# if you are changing the sbom-hash. This is important for SBOM generation.\n\n[submodule \"components/bt/controller/lib_esp32\"]\n\tpath = components/bt/controller/lib_esp32\n\turl = ../../espressif/esp32-bt-lib.git\n\n[submodule \"components/bootloader/subproject/components/micro-ecc/micro-ecc\"]\n\tpath = components/bootloader/subproject/components/micro-ecc/micro-ecc\n\turl = ../../kmackay/micro-ecc.git\n\tsbom-version = 1.1\n\tsbom-cpe = cpe:2.3:a:micro-ecc_project:micro-ecc:{}:*:*:*:*:*:*:*\n\tsbom-supplier = Person: Ken MacKay\n\tsbom-url = https://github.com/kmackay/micro-ecc\n\tsbom-description = A small and fast ECDH and ECDSA implementation for 8-bit, 32-bit, and 64-bit processors\n\tsbom-hash = 24c60e243580c7868f4334a1ba3123481fe1aa48\n\n[submodule \"components/spiffs/spiffs\"]\n\tpath = components/spiffs/spiffs\n\turl = ../../pellepl/spiffs.git\n\tsbom-version = 0.2-255-g0dbb3f71c5f6\n\tsbom-supplier = Person: Peter Andersson\n\tsbom-url = https://github.com/pellepl/spiffs\n\tsbom-description = Wear-leveled SPI flash file system for embedded devices\n\tsbom-hash = 0dbb3f71c5f6fae3747a9d935372773762baf852\n\n[submodule \"components/json/cJSON\"]\n\tpath = components/json/cJSON\n\turl = ../../DaveGamble/cJSON.git\n\tsbom-version = 1.7.18\n\tsbom-cpe = cpe:2.3:a:cjson_project:cjson:{}:*:*:*:*:*:*:*\n\tsbom-supplier = Person: Dave Gamble\n\tsbom-url = https://github.com/DaveGamble/cJSON\n\tsbom-description = Ultralightweight JSON parser in ANSI C\n\tsbom-hash = acc76239bee01d8e9c858ae2cab296704e52d916\n\tsbom-cve-exclude-list = CVE-2024-31755 Resolved in v1.7.18\n\n[submodule \"components/mbedtls/mbedtls\"]\n\tpath = components/mbedtls/mbedtls\n\turl = ../../espressif/mbedtls.git\n\n[submodule \"components/lwip/lwip\"]\n\tpath = components/lwip/lwip\n\turl = ../../espressif/esp-lwip.git\n\n[submodule \"components/mqtt/esp-mqtt\"]\n\tpath = components/mqtt/esp-mqtt\n\turl = ../../espressif/esp-mqtt.git\n\n[submodule \"components/protobuf-c/protobuf-c\"]\n\tpath = components/protobuf-c/protobuf-c\n\turl = ../../protobuf-c/protobuf-c.git\n\tsbom-version = 1.4.1\n\tsbom-cpe = cpe:2.3:a:protobuf-c_project:protobuf-c:{}:*:*:*:*:*:*:*\n\tsbom-supplier = Organization: protobuf-c community <https://groups.google.com/g/protobuf-c>\n\tsbom-url = https://github.com/protobuf-c/protobuf-c\n\tsbom-description = Protocol Buffers implementation in C\n\tsbom-hash = abc67a11c6db271bedbb9f58be85d6f4e2ea8389\n\n[submodule \"components/unity/unity\"]\n\tpath = components/unity/unity\n\turl = ../../ThrowTheSwitch/Unity.git\n\tsbom-version = v2.6.0-RC1\n\tsbom-supplier = Organization: ThrowTheSwitch community <http://www.throwtheswitch.org>\n\tsbom-url = https://github.com/ThrowTheSwitch/Unity\n\tsbom-description = Simple Unit Testing for C\n\tsbom-hash = bf560290f6020737eafaa8b5cbd2177c3956c03f\n\n[submodule \"components/bt/host/nimble/nimble\"]\n\tpath = components/bt/host/nimble/nimble\n\turl = ../../espressif/esp-nimble.git\n\n[submodule \"components/esp_wifi/lib\"]\n\tpath = components/esp_wifi/lib\n\turl = ../../espressif/esp32-wifi-lib.git\n\n[submodule \"components/cmock/CMock\"]\n\tpath = components/cmock/CMock\n\turl = ../../ThrowTheSwitch/CMock.git\n\tsbom-version = v2.5.2-2-geeecc49ce8af\n\tsbom-supplier = Organization: ThrowTheSwitch community <http://www.throwtheswitch.org>\n\tsbom-url = https://github.com/ThrowTheSwitch/CMock\n\tsbom-description = CMock - Mock/stub generator for C\n\tsbom-hash = eeecc49ce8af123cf8ad40efdb9673e37b56230f\n\n[submodule \"components/openthread/openthread\"]\n\tpath = components/openthread/openthread\n\turl = ../../espressif/openthread.git\n\n[submodule \"components/bt/controller/lib_esp32c3_family\"]\n\tpath = components/bt/controller/lib_esp32c3_family\n\turl = ../../espressif/esp32c3-bt-lib.git\n\n[submodule \"components/esp_phy/lib\"]\n\tpath = components/esp_phy/lib\n\turl = ../../espressif/esp-phy-lib.git\n\n[submodule \"components/openthread/lib\"]\n\tpath = components/openthread/lib\n\turl = ../../espressif/esp-thread-lib.git\n\n[submodule \"components/bt/controller/lib_esp32h2/esp32h2-bt-lib\"]\n\tpath = components/bt/controller/lib_esp32h2/esp32h2-bt-lib\n\turl = ../../espressif/esp32h2-bt-lib.git\n\n[submodule \"components/bt/controller/lib_esp32c2/esp32c2-bt-lib\"]\n\tpath = components/bt/controller/lib_esp32c2/esp32c2-bt-lib\n\turl = ../../espressif/esp32c2-bt-lib.git\n\n[submodule \"components/bt/controller/lib_esp32c6/esp32c6-bt-lib\"]\n\tpath = components/bt/controller/lib_esp32c6/esp32c6-bt-lib\n\turl = ../../espressif/esp32c6-bt-lib.git\n\n[submodule \"components/bt/controller/lib_esp32c5/esp32c5-bt-lib\"]\n\tpath = components/bt/controller/lib_esp32c5/esp32c5-bt-lib\n\turl = ../../espressif/esp32c5-bt-lib.git\n\n[submodule \"components/heap/tlsf\"]\n\tpath = components/heap/tlsf\n\turl = ../../espressif/tlsf.git\n\n[submodule \"components/esp_coex/lib\"]\n\tpath = components/esp_coex/lib\n\turl = ../../espressif/esp-coex-lib.git\n\n[submodule \"components/bt/esp_ble_mesh/lib/lib\"]\n\tpath = components/bt/esp_ble_mesh/lib/lib\n\turl = ../../espressif/esp-ble-mesh-lib.git\n"
        },
        {
          "name": ".mypy.ini",
          "type": "blob",
          "size": 0.9619140625,
          "content": "[mypy]\n\n# Specifies the Python version used to parse and check the target program\npython_version = 3.9\n\n# Disallows defining functions without type annotations or with incomplete type annotations\n# True => enforce type annotation in all function definitions\ndisallow_untyped_defs = True\n\n# Shows a warning when returning a value with type Any from a function declared with a non- Any return type\nwarn_return_any = True\n\n# Shows errors for missing return statements on some execution paths\nwarn_no_return = True\n\n# Suppress error messages about imports that cannot be resolved\n# True => ignore all import errors\nignore_missing_imports = True\n\n# Disallows defining functions with incomplete type annotations\ndisallow_incomplete_defs = False\n\n# Directs what to do with imports when the imported module is found as a .py file and not part of the files,\n# modules and packages provided on the command line.\n# SKIP -> mypy checks only single file, not included imports\nfollow_imports = skip\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 8.962890625,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\n\ndefault_stages: [pre-commit]\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n      - id: trailing-whitespace\n        # note: whitespace exclusions use multiline regex, see https://pre-commit.com/#regular-expressions\n        # items are:\n        # 1 - some file extensions\n        # 2 - any file matching *test*/*expected* (for host tests, if possible use this naming pattern always)\n        # 3 - any directory named 'testdata'\n        # 4 - protobuf auto-generated files\n        # 5 - COPYING files\n        exclude: &whitespace_excludes |\n          (?x)^(\n            .+\\.(md|rst|map|bin)|\n            .+test.*\\/.*expected.*|\n            .+\\/testdata\\/.+|\n            .*_pb2.py|\n            .*.pb-c.h|\n            .*.pb-c.c|\n            .*.yuv|\n            .*.rgb|\n            .*COPYING.*\n          )$\n      - id: end-of-file-fixer\n        exclude: *whitespace_excludes\n      - id: check-executables-have-shebangs\n      - id: mixed-line-ending\n        args: ['-f=lf']\n      - id: double-quote-string-fixer\n      - id: no-commit-to-branch\n        name: Do not use more than one slash in the branch name\n        args: ['--pattern', '^[^/]*/[^/]*/']\n      - id: no-commit-to-branch\n        name: Do not use uppercase letters in the branch name\n        args: ['--pattern', '^[^A-Z]*[A-Z]']\n  - repo: https://github.com/PyCQA/flake8\n    rev: 5.0.4\n    hooks:\n      - id: flake8\n        args: ['--config=.flake8', '--tee', '--benchmark']\n  - repo: https://github.com/asottile/reorder-python-imports\n    rev: v3.12.0\n    hooks:\n      - id: reorder-python-imports\n        name: Reorder Python imports\n        args: [--py38-plus]\n        exclude: >\n          (?x)^(\n              .*_pb2.py\n          )$\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n  - repo: local\n    hooks:\n      - id: check-executables\n        name: Check File Permissions\n        entry: tools/ci/check_executables.py --action executables\n        language: python\n        types: [executable]\n        exclude: '\\.pre-commit/.+'\n      - id: check-executable-list\n        name: Validate executable-list.txt\n        entry: tools/ci/check_executables.py --action list\n        language: python\n        pass_filenames: false\n        always_run: true\n      - id: check-deprecated-kconfigs-options\n        name: Check if any Kconfig Options Deprecated\n        entry: tools/ci/check_deprecated_kconfigs.py\n        language: python\n        files: 'sdkconfig\\.ci$|sdkconfig\\.rename$|sdkconfig.*$'\n      - id: cmake-lint\n        name: Check CMake Files Format\n        entry: cmakelint --linelength=120 --spaces=4 --filter=-whitespace/indent\n        language: python\n        additional_dependencies:\n          - cmakelint==1.4.1\n        files: 'CMakeLists.txt$|\\.cmake$'\n        exclude: '\\/third_party\\/'\n      - id: check-codeowners\n        name: Validate Codeowner File\n        entry: tools/ci/check_codeowners.py ci-check\n        language: python\n        always_run: true\n        files: '\\.gitlab/CODEOWNERS'\n        pass_filenames: false\n      - id: check-generated-rules\n        name: Check rules are generated (based on .gitlab/ci/dependencies/dependencies.yml)\n        entry: tools/ci/generate_rules.py\n        language: python\n        files: '\\.gitlab/ci/dependencies/.+|\\.gitlab/ci/.*\\.yml|.gitlab-ci.yml'\n        pass_filenames: false\n        require_serial: true\n        additional_dependencies:\n          - PyYAML == 5.3.1\n      - id: mypy-check\n        name: Check type annotations in python files\n        entry: tools/ci/check_type_comments.py\n        additional_dependencies:\n          - 'mypy'\n          - 'mypy-extensions'\n          - 'types-setuptools'\n          - 'types-PyYAML'\n          - 'types-requests'\n        exclude: >\n          (?x)^(\n              .*_pb2.py\n          )$\n        language: python\n        types: [python]\n      - id: check-requirement-files\n        name: Check requirement files\n        entry: tools/ci/check_requirement_files.py\n        additional_dependencies:\n          - 'jsonschema'\n        language: python\n        files: 'tools/requirements.+|tools/requirements/.+'\n        pass_filenames: false\n      - id: check-tools-files-patterns\n        name: Check tools dir files patterns\n        entry: tools/ci/check_tools_files_patterns.py\n        language: python\n        files: '^tools/.+'\n        additional_dependencies:\n          - PyYAML == 5.3.1\n        pass_filenames: false\n      - id: check-rules-components-patterns\n        name: check patterns-build_components in rules.yml\n        entry: tools/ci/check_rules_components_patterns.py\n        language: python\n        files: 'components/.+|.gitlab/ci/rules.yml'\n        additional_dependencies:\n          - PyYAML == 5.3.1\n        pass_filenames: false\n      - id: check-generated-soc-caps-kconfig\n        name: Check soc caps kconfig files are generated (based on components/soc/IDF_TARGET/include/soc/soc_caps.h)\n        entry: tools/gen_soc_caps_kconfig/gen_soc_caps_kconfig.py -d 'components/soc/*/include/soc/' 'components/esp_rom/*/' 'components/spi_flash/*/'\n        language: python\n        files: 'components/soc/.+/include/soc/.+_caps\\.h|components/esp_rom/.+/.+_caps\\.h|kconfig\\.soc_caps.in|components/spi_flash/.+/.+_caps\\.h'\n        pass_filenames: false\n        additional_dependencies:\n          - pyparsing\n      - id: check-all-apps-readmes\n        name: Check if all apps readme files match given .build-test-rules.yml files. Modify the supported target tables\n        entry: tools/ci/check_build_test_rules.py check-readmes\n        language: python\n        files: 'tools/test_apps/.+|examples/.+|components/.+|tools/idf_py_actions/constants.py|tools/ci/check_build_test_rules.py'\n        require_serial: true\n        additional_dependencies:\n          - PyYAML == 5.3.1\n          - idf-build-apps~=2.5\n      - id: sort-yaml-files\n        name: sort yaml files\n        entry: tools/ci/sort_yaml.py\n        language: python\n        files: '\\.build-test-rules\\.yml$|known_generate_test_child_pipeline_warnings\\.yml$'\n        additional_dependencies:\n          - ruamel.yaml\n      - id: sort-yaml-test\n        name: sort yaml test\n        entry: python -m unittest tools/ci/sort_yaml.py\n        language: python\n        files: 'tools/ci/sort_yaml\\.py$'\n        additional_dependencies:\n          - ruamel.yaml\n      - id: check-build-test-rules-path-exists\n        name: check path in .build-test-rules.yml exists\n        entry: tools/ci/check_build_test_rules.py check-exist\n        language: python\n        additional_dependencies:\n          - PyYAML == 5.3.1\n        always_run: true\n        pass_filenames: false\n        require_serial: true\n      - id: cleanup-ignore-lists\n        name: Remove non-existing patterns from ignore lists\n        entry: tools/ci/cleanup_ignore_lists.py\n        language: python\n        always_run: true\n        require_serial: true\n      - id: gitlab-yaml-linter\n        name: Check gitlab yaml files\n        entry: tools/ci/gitlab_yaml_linter.py\n        language: python\n        files: '\\.gitlab-ci\\.yml|\\.gitlab/ci/.+\\.yml|\\.gitmodules'\n        pass_filenames: false\n        additional_dependencies:\n          - PyYAML == 5.3.1\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.0.1\n    hooks:\n      - id: file-contents-sorter\n        files: 'tools\\/ci\\/(executable-list\\.txt|mypy_ignore_list\\.txt|check_copyright_ignore\\.txt)'\n  - repo: https://github.com/espressif/check-copyright/\n    rev: v1.0.3\n    hooks:\n      - id: check-copyright\n        args: ['--ignore', 'tools/ci/check_copyright_ignore.txt', '--config', 'tools/ci/check_copyright_config.yaml']\n  - repo: https://github.com/espressif/conventional-precommit-linter\n    rev: v1.7.0\n    hooks:\n      - id: conventional-precommit-linter\n        stages: [commit-msg]\n  - repo: https://github.com/espressif/astyle_py.git\n    rev: v1.0.5\n    hooks:\n      - id: astyle_py\n        # If you are modifying astyle version, update tools/format.sh as well\n        args: ['--astyle-version=3.4.7', '--rules=tools/ci/astyle-rules.yml']\n  - repo: https://github.com/shellcheck-py/shellcheck-py\n    rev: v0.9.0.5\n    hooks:\n    - id: shellcheck\n      name: shellcheck bash\n      args: ['--shell', 'bash', '-x']\n      files: 'install.sh|export.sh'\n    - id: shellcheck\n      name: shellcheck dash (export.sh)\n      args: ['--shell', 'dash', '-x']\n      files: 'export.sh'\n  - repo: https://github.com/espressif/esp-pwsh-check\n    rev: v1.0.1\n    hooks:\n    - id: check-powershell-scripts\n      stages: [manual]\n  - repo: https://github.com/espressif/esp-idf-sbom.git\n    rev: v0.13.0\n    hooks:\n      - id: validate-sbom-manifest\n        stages: [post-commit]\n  - repo: https://github.com/sphinx-contrib/sphinx-lint\n    rev: v0.9.1\n    hooks:\n      - id: 'sphinx-lint'\n        name: Lint rST files in docs folder using Sphinx Lint\n        files: ^(docs/en|docs/zh_CN)/.*\\.(rst|inc)$\n  - repo: https://github.com/espressif/esp-idf-kconfig.git\n    rev: v2.4.1\n    hooks:\n      - id: check-kconfig-files\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 21.109375,
          "content": "[MAIN]\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Clear in-memory caches upon conclusion of linting. Useful if running pylint\n# in a server-like mode.\nclear-cache-post-run=no\n\n# Load and enable all available extensions. Use --list-extensions to see a list\n# all available extensions.\n#enable-all-extensions=\n\n# In error mode, messages with a category besides ERROR or FATAL are\n# suppressed, and no reports are done by default. Error mode is compatible with\n# disabling specific errors.\n#errors-only=\n\n# Always return a 0 (non-error) status code, even if lint errors are found.\n# This is primarily useful in continuous integration scripts.\n#exit-zero=\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-allow-list=\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code. (This is an alternative name to extension-pkg-allow-list\n# for backward compatibility.)\nextension-pkg-whitelist=\n\n# Return non-zero exit code if any of these messages/categories are detected,\n# even if score is above --fail-under value. Syntax same as enable. Messages\n# specified are enabled, while categories only check already-enabled messages.\nfail-on=\n\n# Specify a score threshold under which the program will exit with error.\nfail-under=10\n\n# Interpret the stdin as a python script, whose filename needs to be passed as\n# the module_or_package argument.\n#from-stdin=\n\n# Files or directories to be skipped. They should be base names, not paths.\nignore=CVS\n\n# Add files or directories matching the regular expressions patterns to the\n# ignore-list. The regex matches against paths and can be in Posix or Windows\n# format. Because '\\\\' represents the directory delimiter on Windows systems,\n# it can't be used as an escape character.\nignore-paths=\n\n# Files or directories matching the regular expression patterns are skipped.\n# The regex matches against base names, not paths. The default value ignores\n# Emacs file locks\nignore-patterns=^\\.#\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis). It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use, and will cap the count on Windows to\n# avoid hangs.\njobs=1\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python module names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Minimum Python version to use for version dependent checks. Will default to\n# the version used to run pylint.\npy-version=3.8\n\n# Discover python modules and packages in the file system subtree.\nrecursive=no\n\n# Add paths to the list of the source roots. Supports globbing patterns. The\n# source root is an absolute path or a path relative to the current working\n# directory used to determine a package namespace for modules located under the\n# source root.\nsource-roots=\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n# In verbose mode, extra non-checker-related info will be displayed.\n#verbose=\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style. If left empty, argument names will be checked with the set\n# naming style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style. If left empty, attribute names will be checked with the set naming\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Bad variable names regexes, separated by a comma. If names match any regex,\n# they will always be refused\nbad-names-rgxs=\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style. If left empty, class attribute names will be checked\n# with the set naming style.\n#class-attribute-rgx=\n\n# Naming style matching correct class constant names.\nclass-const-naming-style=UPPER_CASE\n\n# Regular expression matching correct class constant names. Overrides class-\n# const-naming-style. If left empty, class constant names will be checked with\n# the set naming style.\n#class-const-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style. If left empty, class names will be checked with the set naming style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style. If left empty, constant names will be checked with the set naming\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style. If left empty, function names will be checked with the set\n# naming style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _\n\n# Good variable names regexes, separated by a comma. If names match any regex,\n# they will always be accepted\ngood-names-rgxs=\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style. If left empty, inline iteration names will be checked\n# with the set naming style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style. If left empty, method names will be checked with the set naming style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style. If left empty, module names will be checked with the set naming style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Regular expression matching correct type alias names. If left empty, type\n# alias names will be checked with the set naming style.\n#typealias-rgx=\n\n# Regular expression matching correct type variable names. If left empty, type\n# variable names will be checked with the set naming style.\n#typevar-rgx=\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style. If left empty, variable names will be checked with the set\n# naming style.\n#variable-rgx=\n\n\n[CLASSES]\n\n# Warn about protected attribute access inside special methods\ncheck-protected-access-in-special-methods=no\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp,\n                      asyncSetUp,\n                      __post_init__\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make,os._exit\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[DESIGN]\n\n# List of regular expressions of class ancestor names to ignore when counting\n# public methods (see R0903)\nexclude-too-few-public-methods=\n\n# List of qualified class names to ignore when counting class parents (see\n# R0901)\nignored-parents=\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement (see R0916).\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when caught.\novergeneral-exceptions=builtins.BaseException,builtins.Exception\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=160\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[IMPORTS]\n\n# List of modules that can be imported at any level, not just the top level\n# one.\nallow-any-import-level=\n\n# Allow explicit reexports by alias from a package __init__.\nallow-reexport-from-package=no\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=\n\n# Output a graph (.gv or any supported image format) of external dependencies\n# to the given file (report RP0402 must not be disabled).\next-import-graph=\n\n# Output a graph (.gv or any supported image format) of all (i.e. internal and\n# external) dependencies to the given file (report RP0402 must not be\n# disabled).\nimport-graph=\n\n# Output a graph (.gv or any supported image format) of internal dependencies\n# to the given file (report RP0402 must not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n# Couples of modules and preferred modules, separated by a comma.\npreferred-modules=\n\n\n[LOGGING]\n\n# The type of string formatting that logging methods do. `old` means using %\n# formatting, `new` is for `{}` formatting.\nlogging-format-style=old\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE,\n# UNDEFINED.\nconfidence=HIGH,\n           CONTROL_FLOW,\n           INFERENCE,\n           INFERENCE_FAILURE,\n           UNDEFINED\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then re-enable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        use-symbolic-message-instead,\n        missing-function-docstring, # Modified since here, include this line\n        missing-class-docstring,\n        missing-module-docstring,\n        wrong-import-order,\n        invalid-name,\n        too-few-public-methods,\n        too-many-locals,\n        ungrouped-imports,  # since we have isort in pre-commit\n        no-name-in-module,  # since we have flake8 to check this\n        too-many-instance-attributes,\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member\n\n\n[METHOD_ARGS]\n\n# List of qualified names (i.e., library.method) which require a timeout\n# parameter e.g. 'requests.api.get,requests.api.post'\ntimeout-methods=requests.api.delete,requests.api.get,requests.api.head,requests.api.options,requests.api.patch,requests.api.post,requests.api.put,requests.api.request\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n# Regular expression of note tags to take in consideration.\nnotes-rgx=\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit,argparse.parse_error\n\n\n[REPORTS]\n\n# Python expression which should return a score less than or equal to 10. You\n# have access to the variables 'fatal', 'error', 'warning', 'refactor',\n# 'convention', and 'info' which contain the number of messages in each\n# category, as well as 'statement' which is the total number of statements\n# analyzed. This score is used by the global evaluation report (RP0004).\nevaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\nmsg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\n#output-format=\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[SIMILARITIES]\n\n# Comments are removed from the similarity computation\nignore-comments=yes\n\n# Docstrings are removed from the similarity computation\nignore-docstrings=yes\n\n# Imports are removed from the similarity computation\nignore-imports=yes\n\n# Signatures are removed from the similarity computation\nignore-signatures=yes\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. No available dictionaries : You need to install\n# both the python package and the system dependency for enchant to work..\nspelling-dict=\n\n# List of comma separated words that should be considered directives if they\n# appear at the beginning of a comment and should not be checked.\nspelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains the private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to the private dictionary (see the\n# --spelling-private-dict-file option) instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=no\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=no\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of symbolic message names to ignore for Mixin members.\nignored-checks-for-mixins=no-member,\n                          not-async-context-manager,\n                          not-context-manager,\n                          attribute-defined-outside-init\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local,argparse.Namespace\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n# Regex pattern to define which classes are considered mixins.\nmixin-class-rgx=.*[Mm]ixin\n\n# List of decorators that change the signature of a decorated function.\nsignature-mutators=\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of names allowed to shadow builtins\nallowed-redefined-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.525390625,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Optionally build your docs in additional formats such as PDF and ePub\nformats:\n  - pdf\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  version: 2.7\n  install:\n    - requirements: docs/requirements.txt\n\n# We need to list all the submodules included in documenation build by Doxygen\nsubmodules:\n  include:\n    - components/mqtt/esp-mqtt\n"
        },
        {
          "name": ".shellcheckrc",
          "type": "blob",
          "size": 0.16015625,
          "content": "# This is shellcheck config file\n# Files that are checked: install.sh, export.sh\n\n# Do not complain about variables determined at runtime (IDF_PATH)\ndisable=SC1090\n"
        },
        {
          "name": ".vale.ini",
          "type": "blob",
          "size": 3.34765625,
          "content": "###################\n### Vale Config ###\n###################\n\n# This is a Vale linter configuration file.\n# - Repo: esp-idf\n# - Based on Default config: v0-1-1\n# It lists all necessary parameters to configure Vale for your project.\n# For official documentation on all config settings, see\n# https://vale.sh/docs/topics/config\n\n\n##############\n### Global ###\n##############\n\n# This section lists core settings applying to Vale itself.\n\n\n# Specify path to external resources (e.g., styles and vocab files).\n# The path value may be absolute or relative to this configuration file.\nStylesPath = .vale/styles\n\n\n# Specify the minimum alert severity that Vale will report.\nMinAlertLevel = suggestion # \"suggestion\", \"warning\", or \"error\"\n\n\n# Specify vocabulary for special treatment.\n# Create a folder in <StylesPath>/Vocab/<name>/and add its name here\n# The folder should contain two files:\n# - accept.txt -- lists words with accepted case-sensitive spelling\n# - reject.txt -- lists words whose occurrences throw an error\n# Vocab = Espressif\n\n\n# Specify the packages to import into your project.\n# A package is a zip file containing a number of rules (style) written in YAML.\n# For a list of official packages, see Package Hub at https://vale.sh/hub/\n# For official documentation on packages, see\n# https://vale.sh/docs/topics/packages/\n# Before linting, navigate to your project and run `vale sync` to download\n# the official packages specified below.\n# Packages = Package1, Package2, \\\n# https://example.com/path/to/package/Package.zip\nPackages = Google, Microsoft, RedHat, \\\nhttps://dl.espressif.com/dl/esp-vale-config/Espressif-latest.zip\n\n\n###############\n### Formats ###\n###############\n\n# This section enables association of \"unknown\" formats with the ones\n# supported by Vale. For official documentation on supported formats, see\n# https://vale.sh/docs/topics/scoping/\n[formats]\n\n# For example, treat MDX files as Markdown files.\n# mdx = md\n\n\n################################\n### Format-specific settings ###\n################################\n\n# This section lists the settings that apply to specific file formats\n# based on their glob pattern.\n# Settings provided under a more specific glob pattern,\n# such as [*.{md,txt}] will override those in [*].\n[*.{md,rst}]\n\n\n# Enable styles to activate all rules included in them.\n# BasedOnStyles = Style1, Style2\nBasedOnStyles = Vale, Espressif-latest\n\n\n### Deactivate individual rules ###\n### in enabled styles.\n# Style1.Rule1 = NO\nVale.Repetition = NO\nVale.Spelling = NO\nEspressif-latest.Admonitions = NO\nEspressif-latest.Contractions = NO\nEspressif-latest.Monospace = NO\nEspressif-latest.PascalCamelCase = NO\n\n\n### Change default severity level ###\n### of an activated rule.\n# Choose between \"suggestion\", \"warning\", or \"error\".\n# Style1.Rule2 = error\n\n\n### Activate individual rules ###\n### in non-enabled styles stored in <StylesPath>.\n# Style1.Rule = YES\nGoogle.Gender = YES\nGoogle.GenderBias = YES\nGoogle.Slang = YES\nGoogle.Spacing = YES\nMicrosoft.DateNumbers = YES\nMicrosoft.Ellipses = YES\nMicrosoft.FirstPerson = YES\nMicrosoft.Hyphens = YES\nMicrosoft.Ordinal = YES\nMicrosoft.OxfordComma = YES\nMicrosoft.Percentages = YES\nMicrosoft.RangeTime = YES\nMicrosoft.Semicolon = YES\nMicrosoft.SentenceLength = YES\nMicrosoft.Suspended = YES\nMicrosoft.Units = YES\nMicrosoft.URLFormat = YES\nMicrosoft.We = YES\nMicrosoft.Wordiness = YES\nRedHat.Contractions = YES\nRedHat.RepeatedWords = YES\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.865234375,
          "content": "cmake_minimum_required(VERSION 3.16)\nproject(esp-idf C CXX ASM)\n\nif(CMAKE_CURRENT_LIST_DIR STREQUAL CMAKE_SOURCE_DIR)\n    message(FATAL_ERROR \"Current directory '${CMAKE_CURRENT_LIST_DIR}' is not buildable. \"\n    \"Change directories to one of the example projects in '${CMAKE_CURRENT_LIST_DIR}/examples' and try \"\n    \"again.\")\nendif()\n\n# Variables compile_options, c_compile_options, cxx_compile_options, compile_definitions, link_options shall\n# not be unset as they may already contain flags, set by toolchain-TARGET.cmake files.\n\n# Add the following build specifications here, since these seem to be dependent\n# on config values on the root Kconfig.\n\nif(BOOTLOADER_BUILD)\n\n    if(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_SIZE)\n        if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n            list(APPEND compile_options \"-Oz\")\n        else()\n            list(APPEND compile_options \"-Os\")\n        endif()\n        if(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n            list(APPEND compile_options \"-freorder-blocks\")\n        endif()\n    elseif(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_DEBUG)\n        list(APPEND compile_options \"-Og\")\n        if(CMAKE_C_COMPILER_ID MATCHES \"GNU\" AND NOT CONFIG_IDF_TARGET_LINUX)\n            list(APPEND compile_options \"-fno-shrink-wrap\")  # Disable shrink-wrapping to reduce binary size\n        endif()\n    elseif(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_NONE)\n        list(APPEND compile_options \"-O0\")\n    elseif(CONFIG_BOOTLOADER_COMPILER_OPTIMIZATION_PERF)\n        list(APPEND compile_options \"-O2\")\n    endif()\n\nelseif(ESP_TEE_BUILD)\n\n    if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        list(APPEND compile_options \"-Oz\")\n    else()\n        list(APPEND compile_options \"-Os\")\n        list(APPEND compile_options \"-freorder-blocks\")\n    endif()\n\nelse()\n\n    if(CONFIG_COMPILER_OPTIMIZATION_SIZE)\n        if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n            list(APPEND compile_options \"-Oz\")\n        else()\n            list(APPEND compile_options \"-Os\")\n        endif()\n        if(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n            list(APPEND compile_options \"-freorder-blocks\")\n        endif()\n    elseif(CONFIG_COMPILER_OPTIMIZATION_DEBUG)\n        list(APPEND compile_options \"-Og\")\n        if(CMAKE_C_COMPILER_ID MATCHES \"GNU\" AND NOT CONFIG_IDF_TARGET_LINUX)\n            list(APPEND compile_options \"-fno-shrink-wrap\")  # Disable shrink-wrapping to reduce binary size\n        endif()\n    elseif(CONFIG_COMPILER_OPTIMIZATION_NONE)\n        list(APPEND compile_options \"-O0\")\n    elseif(CONFIG_COMPILER_OPTIMIZATION_PERF)\n        list(APPEND compile_options \"-O2\")\n    endif()\n\nendif()\n\nif(CONFIG_COMPILER_CXX_EXCEPTIONS)\n    list(APPEND cxx_compile_options \"-fexceptions\")\nelse()\n    list(APPEND cxx_compile_options \"-fno-exceptions\")\nendif()\n\nif(CONFIG_COMPILER_CXX_RTTI)\n    list(APPEND cxx_compile_options \"-frtti\")\nelse()\n    list(APPEND cxx_compile_options \"-fno-rtti\")\n    list(APPEND link_options \"-fno-rtti\")           # used to invoke correct multilib variant (no-rtti) during linking\nendif()\n\nif(CONFIG_COMPILER_SAVE_RESTORE_LIBCALLS)\n    list(APPEND compile_options \"-msave-restore\")\nendif()\n\nif(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n    list(APPEND c_compile_options \"-Wno-old-style-declaration\")\nendif()\n\n# Clang finds some warnings in IDF code which GCC doesn't.\n# All these warnings should be fixed before Clang is presented\n# as a toolchain choice for users.\nif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    # Clang checks Doxygen comments for being in sync with function prototype.\n    # There are some inconsistencies, especially in ROM headers.\n    list(APPEND compile_options \"-Wno-documentation\")\n    # GCC allows repeated typedefs when the source and target types are the same.\n    # Clang doesn't allow this. This occurs in many components due to forward\n    # declarations.\n    list(APPEND compile_options \"-Wno-typedef-redefinition\")\n    # This issue is seemingly related to newlib's char type functions.\n    # Fix is not clear yet.\n    list(APPEND compile_options \"-Wno-char-subscripts\")\n    # Clang seems to notice format string issues which GCC doesn't.\n    list(APPEND compile_options \"-Wno-format-security\")\n    # Logic bug in essl component\n    list(APPEND compile_options \"-Wno-tautological-overlap-compare\")\n    # Some pointer checks in mDNS component check addresses which can't be NULL\n    list(APPEND compile_options \"-Wno-tautological-pointer-compare\")\n    # Similar to the above, in tcp_transport\n    list(APPEND compile_options \"-Wno-pointer-bool-conversion\")\n    # mbedTLS md5.c triggers this warning in md5_test_buf (false positive)\n    list(APPEND compile_options \"-Wno-string-concatenation\")\n    # multiple cases of implicit conversions between unrelated enum types\n    list(APPEND compile_options \"-Wno-enum-conversion\")\n    # When IRAM_ATTR is specified both in function declaration and definition,\n    # it produces different section names, since section names include __COUNTER__.\n    # Occurs in multiple places.\n    list(APPEND compile_options \"-Wno-section\")\n    # Multiple cases of attributes unknown to clang, for example\n    # __attribute__((optimize(\"-O3\")))\n    list(APPEND compile_options \"-Wno-unknown-attributes\")\n    # Disable Clang warnings for atomic operations with access size\n    # more then 4 bytes\n    list(APPEND compile_options \"-Wno-atomic-alignment\")\n    # several warnings in wpa_supplicant component\n    list(APPEND compile_options \"-Wno-unused-but-set-variable\")\n    # Clang also produces many -Wunused-function warnings which GCC doesn't.\n    list(APPEND compile_options \"-Wno-unused-function\")\n    # many warnings in bluedroid code\n    # warning: field 'hdr' with variable sized type 'BT_HDR' not at the end of a struct or class is a GNU extension\n    list(APPEND compile_options \"-Wno-gnu-variable-sized-type-not-at-end\")\n    # several warnings in bluedroid code\n    list(APPEND compile_options \"-Wno-constant-logical-operand\")\n    # warning: '_Static_assert' with no message is a C2x extension\n    list(APPEND compile_options \"-Wno-c2x-extensions\")\n    # warning on xMPU_SETTINGS for esp32s2 has size 0 for C and 1 for C++\n    list(APPEND compile_options \"-Wno-extern-c-compat\")\n    if(NOT (CONFIG_IDF_TARGET_LINUX AND CMAKE_HOST_SYSTEM_NAME STREQUAL \"Darwin\"))\n        # warning: implicit truncation from 'int' to a one-bit wide bit-field changes value from 1 to -1\n        list(APPEND compile_options \"-Wno-single-bit-bitfield-constant-conversion\")\n    endif()\nendif()\n# More warnings may exist in unit tests and example projects.\n\nif(CONFIG_COMPILER_WARN_WRITE_STRINGS)\n    list(APPEND compile_options \"-Wwrite-strings\")\nendif()\n\nif(CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE)\n    list(APPEND compile_definitions \"-DNDEBUG\")\nendif()\n\nif(CONFIG_COMPILER_NO_MERGE_CONSTANTS)\n    list(APPEND compile_options \"-fno-merge-constants\")\nendif()\n\nif(CONFIG_COMPILER_STACK_CHECK_MODE_NORM)\n    list(APPEND compile_options \"-fstack-protector\")\nelseif(CONFIG_COMPILER_STACK_CHECK_MODE_STRONG)\n    list(APPEND compile_options \"-fstack-protector-strong\")\nelseif(CONFIG_COMPILER_STACK_CHECK_MODE_ALL)\n    list(APPEND compile_options \"-fstack-protector-all\")\nendif()\n\nif(CONFIG_COMPILER_DUMP_RTL_FILES)\n    list(APPEND compile_options \"-fdump-rtl-expand\")\nendif()\n\n__generate_prefix_map(prefix_map_compile_options)\nlist(APPEND compile_options ${prefix_map_compile_options})\n\nif(CONFIG_COMPILER_DISABLE_GCC12_WARNINGS)\n    list(APPEND compile_options \"-Wno-address\"\n                                \"-Wno-use-after-free\")\nendif()\n\nif(CONFIG_COMPILER_DISABLE_GCC13_WARNINGS)\n    list(APPEND compile_options \"-Wno-xor-used-as-pow\")\n    list(APPEND c_compile_options \"-Wno-enum-int-mismatch\")\n    list(APPEND cxx_compile_options \"-Wno-self-move\"\n                                    \"-Wno-dangling-reference\")\nendif()\n\nif(CONFIG_COMPILER_DISABLE_GCC14_WARNINGS)\n    list(APPEND compile_options \"-Wno-calloc-transposed-args\")\nendif()\n\nif(CONFIG_COMPILER_DISABLE_DEFAULT_ERRORS)\n    if(NOT CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        idf_build_replace_option_from_property(COMPILE_OPTIONS \"-Werror\" \"-Werror=all\")\n    endif()\nendif()\n\n# GCC-specific options\nif(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n    list(APPEND compile_options \"-fstrict-volatile-bitfields\")\n    if(CONFIG_COMPILER_STATIC_ANALYZER)\n        list(APPEND compile_options \"-fanalyzer\")\n    endif()\nendif()\n\nif(CONFIG_ESP_SYSTEM_USE_EH_FRAME)\n  list(APPEND compile_options \"-fasynchronous-unwind-tables\")\n  list(APPEND link_options \"-Wl,--eh-frame-hdr\")\nendif()\n\nlist(APPEND link_options \"-fno-lto\")\n\nif(CONFIG_IDF_TARGET_LINUX AND CMAKE_HOST_SYSTEM_NAME STREQUAL \"Darwin\")\n    # Not all versions of the MacOS linker support the -warn_commons flag.\n    # ld version 1053.12 (and above) have been tested to support it.\n    # Hence, we extract the version string from the linker output\n    # before including the flag.\n\n    # Get the ld version, capturing both stdout and stderr\n    execute_process(\n        COMMAND ${CMAKE_LINKER} -v\n        OUTPUT_VARIABLE LD_VERSION_OUTPUT\n        ERROR_VARIABLE LD_VERSION_ERROR\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n        ERROR_STRIP_TRAILING_WHITESPACE\n    )\n\n    # Combine stdout and stderr\n    set(LD_VERSION_OUTPUT \"${LD_VERSION_OUTPUT}\\n${LD_VERSION_ERROR}\")\n\n    # Extract the version string\n    string(REGEX MATCH \"PROJECT:(ld|dyld)-([0-9]+)\\\\.([0-9]+)\" LD_VERSION_MATCH \"${LD_VERSION_OUTPUT}\")\n    set(LD_VERSION_MAJOR_MINOR \"${CMAKE_MATCH_2}.${CMAKE_MATCH_3}\")\n\n    message(STATUS \"Linker Version: ${LD_VERSION_MAJOR_MINOR}\")\n\n    # Compare the version with 1053.12\n    if(LD_VERSION_MAJOR_MINOR VERSION_GREATER_EQUAL \"1053.12\")\n        list(APPEND link_options \"-Wl,-warn_commons\")\n    endif()\n\n    list(APPEND link_options \"-Wl,-dead_strip\")\nelse()\n    list(APPEND link_options \"-Wl,--gc-sections\")\n    list(APPEND link_options \"-Wl,--warn-common\")\nendif()\n\n# SMP FreeRTOS user provided minimal idle hook. This allows the user to provide\n# their own copy of vApplicationPassiveIdleHook()\nif(CONFIG_FREERTOS_USE_PASSIVE_IDLE_HOOK)\n    list(APPEND link_options \"-Wl,--wrap=vApplicationPassiveIdleHook\")\nendif()\n\n# Placing jump tables in flash would cause issues with code that required\n# to be placed in IRAM\nlist(APPEND compile_options \"-fno-jump-tables\")\nif(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n    # This flag is GCC-specific.\n    # Not clear yet if some other flag should be used for Clang.\n    list(APPEND compile_options \"-fno-tree-switch-conversion\")\nendif()\n\nif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    list(APPEND compile_options \"-fno-use-cxa-atexit\")  # TODO IDF-10934\nelse()\n    list(APPEND cxx_compile_options \"-fuse-cxa-atexit\")\nendif()\n\nif(COMPILER_RT_LIB_NAME)\n    list(APPEND link_options \"-rtlib=${CONFIG_COMPILER_RT_LIB_NAME}\")\nendif()\n\n\nidf_build_set_property(COMPILE_OPTIONS \"${compile_options}\" APPEND)\nidf_build_set_property(C_COMPILE_OPTIONS \"${c_compile_options}\" APPEND)\nidf_build_set_property(CXX_COMPILE_OPTIONS \"${cxx_compile_options}\" APPEND)\nidf_build_set_property(ASM_COMPILE_OPTIONS \"${asm_compile_options}\" APPEND)\nidf_build_set_property(COMPILE_DEFINITIONS \"${compile_definitions}\" APPEND)\nidf_build_set_property(LINK_OPTIONS \"${link_options}\" APPEND)\n\nidf_build_get_property(build_component_targets __BUILD_COMPONENT_TARGETS)\n\n# Add each component as a subdirectory, processing each component's CMakeLists.txt\nforeach(component_target ${build_component_targets})\n    __component_get_property(dir ${component_target} COMPONENT_DIR)\n    __component_get_property(_name ${component_target} COMPONENT_NAME)\n    __component_get_property(prefix ${component_target} __PREFIX)\n    __component_get_property(alias ${component_target} COMPONENT_ALIAS)\n    set(COMPONENT_NAME ${_name})\n    set(COMPONENT_DIR ${dir})\n    set(COMPONENT_ALIAS ${alias})\n    set(COMPONENT_PATH ${dir}) # for backward compatibility only, COMPONENT_DIR is preferred\n    idf_build_get_property(build_prefix __PREFIX)\n    set(__idf_component_context 1)\n    if(NOT prefix STREQUAL build_prefix)\n        add_subdirectory(${dir} ${prefix}_${_name})\n    else()\n        add_subdirectory(${dir} ${_name})\n    endif()\n    set(__idf_component_context 0)\nendforeach()\n"
        },
        {
          "name": "COMPATIBILITY.md",
          "type": "blob",
          "size": 4.9658203125,
          "content": "# Compatibility Between ESP-IDF Releases and Revisions of Espressif SoCs\n\n* [中文版](./COMPATIBILITY_CN.md)\n\nEspressif keeps improving the performance of its SoCs by providing new chip revisions. However, some of the improvements require special software support. Some of the software supports are even mandatory for the chip revisions to run normally.\n\nThis document describes the compatibility between ESP-IDF releases and Espressif SoC revisions.\n\nNOTE: This document on release branches may be out-of-date. Check the [Compatibility file on master](https://github.com/espressif/esp-idf/blob/master/COMPATIBILITY.md) for the most accurate information.\n\nSee [Compatibility Advisory for Chip Revision Numbering Scheme](https://www.espressif.com.cn/sites/default/files/advisory_downloads/AR2022-005%20Compatibility%20Advisory%20for%20Chip%20Revision%20Numbering%20%20Scheme.pdf) on the versioning of Espressif SoC revisions.\n\nYou can run `esptool chip_id` to detect the series and revision of an SoC. See [SoC Errata](https://www.espressif.com.cn/en/support/documents/technical-documents?keys=errata) for more on how to distinguish between chip revisions, and the improvements provided by chip revisions. And run `idf.py --version` to know the version of current ESP-IDF.\n\n## ESP-IDF Support for Different Chip Revisions\n\nThe sections below show the requirements to ESP-IDF version of chip revisions. Each chip revision corresponds to specific `Recommended` and `Required` versions of ESP-IDF:\n\n- `Recommended`: shows from which version of ESP-IDF you can make use of all the improvements of the chip revision. Running binary compiled with ESP-IDF below the `Recommended` version of a chip revision, software may not benefit from the bugfix/features provided by the chip revision. The chip will have almost the same behavior as its previous revision.\n\n- `Required`: shows the minimum version required to run the chip revision normally. Running binary compiled below the `Required` version, the binary may have unpredictable behavior.\n\nThough the software can make use of all the features of a chip revision, if its version is higher than the `Recommended` version of the chip, it is still recommended to use the latest bugfix version of the release branch. The latest bugfix version fixes a number of issues and helps improve product stability.\n\nFor example, if we have a chip, whose `Required`/`Recommended` version of `release/v5.1` branch is `v5.1.2`/`v5.1.4`, and the latest release on that branch is `v5.1.6`. Then the chip will not boot up with ESP-IDF `v5.1`-`v5.1.1` or will have unpredictable behavior, and application may not make use of all benefits of the chip, when running with ESP-IDF `v5.1.2` or `v5.1.3`. Though `v5.1.4` well supports the chip revision, it is still recommended to upgrade ESP-IDF to `v5.1.6`.\n\n### ESP32\n\n#### v0.0, v1.0, v3.0\n\nSupported since initial version of ESP-IDF.\n\n#### v1.1\n\nTo be added.\n\n#### v2.0\n\nTo be added.\n\n#### v3.1\n\nTo be added.\n\n### ESP32-S2\n\n#### v0.0\n\nSupported since ESP-IDF v4.2.\n\n#### v1.0\n\n| Release branch         | Recommended | Required |\n|------------------------|-------------|----------|\n| release/v4.2           | v4.2.3+     | v4.2     |\n| release/v4.3           | v4.3.3+     | v4.3     |\n| release/v4.4           | v4.4.6+     | v4.4     |\n| release/v5.0           | v5.0.4+     | v5.0     |\n| release/v5.1           | v5.1.2+     | v5.1     |\n| release/v5.2 and above | v5.2+       | v5.2     |\n\n### ESP32-C3\n\n#### v0.2 - v0.4\n\nSupported since ESP-IDF v4.3.\n\n#### v1.1\n\n| Release branch         | Recommended | Required |\n|------------------------|-------------|----------|\n| release/v4.2           | EOL         | EOL      |\n| release/v4.3           | v4.3.7+     | v4.3.7   |\n| release/v4.4           | v4.4.7+     | v4.4.7   |\n| release/v5.0           | v5.0.5+     | v5.0.5   |\n| release/v5.1           | v5.1.3+     | v5.1.3   |\n| release/v5.2 and above | v5.2+       | v5.2     |\n\n### ESP32-S3\n\n#### v0.1, v0.2\n\nSupported since ESP-IDF v4.4.\n\n### ESP32-C2 & ESP8684\n\n#### v1.0, v1.1\n\nSupported since ESP-IDF v5.0.\n\n#### v1.2\n\n| Release branch         | Recommended | Required |\n|------------------------|-------------|----------|\n| release/v5.0           | v5.0.7+     | v5.0     |\n| release/v5.1           | v5.1.4+     | v5.1     |\n| release/v5.2           | v5.2.2+     | v5.2     |\n| release/v5.3 and above | v5.3+       | v5.3     |\n\n### ESP32-C6\n\n#### v0.0, v0.1\n\nSupported since ESP-IDF v5.1.\n\n### ESP32-H2\n\n#### v0.1, v0.2\n\nSupported since ESP-IDF v5.1.\n\n## What If the ESP-IDF Version Is Lower than the `Required` Version?\n\nLatest ESP-IDF versions can prevent from downloading to, or even execute binaries on unsupported chips. ESP-IDF of versions v4.4.5+, v5.0.1+, v5.1 and above have both esptool download check and bootloader loading check against the chip revision. While ESP-IDF v4.3.5 has only esptool downloading check.\n\nFor earlier ESP-IDF versions without such checking, which is incompatible with the given chip revision, the chips running such versions will have unpredictable behavior.\n"
        },
        {
          "name": "COMPATIBILITY_CN.md",
          "type": "blob",
          "size": 5.0654296875,
          "content": "# ESP-IDF 版本与乐鑫芯片版本兼容性\n\n* [English Version](./COMPATIBILITY.md)\n\n为不断提高芯片性能，乐鑫会为其芯片发布新版本。但新芯片版本中的某些性能提升依赖特殊的软件支持，有时候新芯片版本必须在一定的软件版本下才能正常运行。\n\n本文档介绍了具体 ESP-IDF 版本与乐鑫芯片版本之间的兼容性情况。\n\n注意：各分支上的兼容性文档可能不是最新版本，请参考 [master 分支上的兼容性文件](https://github.com/espressif/esp-idf/blob/master/COMPATIBILITY_CN.md) 以获取最新信息。\n\n有关乐鑫芯片版本的编码方式，请参考 [关于芯片版本 (Chip Revision) 编码方式的兼容性公告](https://www.espressif.com/sites/default/files/advisory_downloads/AR2022-005%20%E5%85%B3%E4%BA%8E%E8%8A%AF%E7%89%87%E7%89%88%E6%9C%AC%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%20%28Chip%20Revision%29%20%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E5%85%AC%E5%91%8A.pdf)。\n\n运行 `esptool chip_id` 可查看芯片系列及其版本。有关区分芯片版本及版本改进内容的更多信息，请参考 [芯片勘误表](https://www.espressif.com.cn/zh-hans/support/documents/technical-documents?keys=%E5%8B%98%E8%AF%AF%E8%A1%A8)。运行 `idf.py --version` 可查看当前的 ESP-IDF 版本。\n\n## ESP-IDF 对各芯片版本的支持\n\n下文介绍了 ESP-IDF 对各芯片版本的支持情况，每个芯片版本都有对应的 ESP-IDF `推荐版本` 和 `需求版本`：\n\n- `推荐版本`：表示从该版本的 ESP-IDF 开始，软件可以利用芯片版本提升的性能。如果在该芯片版本上运行低于 `推荐版本` 的 ESP-IDF 来编译二进制文件，软件可能无法利用该芯片版本修复的错误或新增的功能，芯片行为将与其上一版本几乎相同。\n\n- `需求版本`：表示该芯片版本正常运行所需的最低 ESP-IDF 版本。如果在该芯片版本上运行低于 `需求版本` 的 ESP-IDF 来编译二进制文件，可能会出现不可预测的芯片行为。\n\n即便使用的软件版本已高于该芯片版本的对应 `推荐版本`，软件已经能够利用该芯片版本的所有功能，我们仍建议用户升级到该发布分支的最新 bugfix 版本。新的 bugfix 版本修复了一些问题，有助于提升产品稳定性。\n\n例如，对于某一芯片版本，其 `release/v5.1` 分支的 `需求版本` 和 `推荐版本` 分别是 `v5.1.2` 和 `v5.1.4`，而该分支的最新版本是 `v5.1.6`。那么，在使用 ESP-IDF `v5.1` - `v5.1.1` 时，芯片将无法启动，或会出现不可预测的行为，而在使用 ESP-IDF `v5.1.2` 或 `v5.1.3` 时，应用程序可能无法使用芯片的部分性能。此外，虽然 `v5.1.4` 已支持该芯片版本，但仍建议将 ESP-IDF 升级到 `v5.1.6`。\n\n### ESP32\n\n#### v0.0、v1.0 和 v3.0\n\n从最初版本的 ESP-IDF 开始支持。\n\n#### v1.1\n\n待更新。\n\n#### v2.0\n\n待更新。\n\n#### v3.1\n\n待更新。\n\n### ESP32-S2\n\n#### v0.0\n\n从 ESP-IDF v4.2 开始支持。\n\n#### v1.0\n\n| 发布分支                | 推荐版本     | 需求版本 |\n|------------------------|-------------|----------|\n| release/v4.2           | v4.2.3+     | v4.2     |\n| release/v4.3           | v4.3.3+     | v4.3     |\n| release/v4.4           | v4.4.6+     | v4.4     |\n| release/v5.0           | v5.0.4+     | v5.0     |\n| release/v5.1           | v5.1.2+     | v5.1     |\n| release/v5.2 及以上     | v5.2+       | v5.2     |\n\n### ESP32-C3\n\n#### v0.2 - v0.4\n\n从 ESP-IDF v4.3 开始支持。\n\n#### v1.1\n\n| 发布分支                | 推荐版本      | 需求版本  |\n|------------------------|-------------|----------|\n| release/v4.2           | EOL         | EOL      |\n| release/v4.3           | v4.3.7+     | v4.3.7   |\n| release/v4.4           | v4.4.7+     | v4.4.7   |\n| release/v5.0           | v5.0.5+     | v5.0.5   |\n| release/v5.1           | v5.1.3+     | v5.1.3   |\n| release/v5.2 及以上     | v5.2+       | v5.2     |\n\n### ESP32-S3\n\n#### v0.1, v0.2\n\n从 ESP-IDF v4.4 开始支持。\n\n### ESP32-C2 & ESP8684\n\n#### v1.0, v1.1\n\n从 ESP-IDF v5.0 开始支持。\n\n#### v1.2\n\n| 发布分支                | 推荐版本      | 需求版本  |\n|------------------------|-------------|----------|\n| release/v5.0           | v5.0.7+     | v5.0     |\n| release/v5.1           | v5.1.4+     | v5.1     |\n| release/v5.2           | v5.2.2+     | v5.1     |\n| release/v5.3 及以上     | v5.3+       | v5.3     |\n\n### ESP32-C6\n\n#### v0.0, v0.1\n\n从 ESP-IDF v5.1 开始支持。\n\n### ESP32-H2\n\n#### v0.1, v0.2\n\n从 ESP-IDF v5.1 开始支持。\n\n\n## 如果 ESP-IDF 版本低于 `需求版本` 会出现什么情况？\n\n使用最新的 ESP-IDF 版本时，软件会阻止下载二进制文件到不支持的芯片版本上，甚至可以防止二进制文件在不支持的芯片版本上被执行。v4.4.5+、v5.0.1+、v5.1 及以上版本的 ESP-IDF 都支持针对芯片版本的 esptool 下载检查和引导加载器加载检查，但 ESP-IDF v4.3.5 只支持 esptool 下载检查。\n\n更早的 ESP-IDF 版本没有此类检查，若与芯片版本不兼容，芯片运行软件时可能会出现不可预测的行为。\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.306640625,
          "content": "# Contributing to ESP-IDF\n\nContributions to ESP-IDF - fixing bugs, adding features, adding documentation - are welcome! We accept contributions via Github Pull Requests.\n\nPlease see the [Contributions Guide](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/contribute/index.html) for more information.\n\n"
        },
        {
          "name": "Kconfig",
          "type": "blob",
          "size": 28.806640625,
          "content": "#\n# Please run the following command for opening a page with more information about this configuration file:\n# idf.py docs -sp api-reference/kconfig.html\n#\nmainmenu \"Espressif IoT Development Framework Configuration\"\n\n    orsource \"./components/soc/$IDF_TARGET/include/soc/Kconfig.soc_caps.in\"\n\n    config IDF_CMAKE\n        bool\n        default \"y\"\n\n    config IDF_ENV_FPGA\n        bool\n        option env=\"IDF_ENV_FPGA\"\n        help\n            - This option is for internal use only.\n            - Enabling this option will help enable all FPGA support so as to\n              run ESP-IDF on an FPGA. This can help reproduce some issues that\n              only happens on FPGA condition, or when you have to burn some\n              efuses multiple times.\n\n    config IDF_ENV_BRINGUP\n        bool\n        help\n            - This option is ONLY used when doing new chip bringup.\n            - This option will only enable necessary hw / sw settings for running\n              a hello_world application.\n\n\n    config IDF_CI_BUILD\n        bool\n        default y if \"$(IDF_CI_BUILD)\" = \"y\" || \"$(IDF_CI_BUILD)\" = 1\n\n    config IDF_DOC_BUILD\n        bool\n        default y if \"$(IDF_DOC_BUILD)\" = \"y\" || \"$(IDF_DOC_BUILD)\" = 1\n\n    config IDF_TOOLCHAIN\n        # This option records the IDF target when sdkconfig is generated the first time.\n        # It is not updated if environment variable $IDF_TOOLCHAIN changes later, and\n        # the build system is responsible for detecting the mismatch between\n        # CONFIG_IDF_TOOLCHAIN and $IDF_TOOLCHAIN.\n        string\n        default \"$IDF_TOOLCHAIN\"\n\n    config IDF_TOOLCHAIN_CLANG\n        bool\n        default \"y\" if IDF_TOOLCHAIN=\"clang\"\n\n    config IDF_TOOLCHAIN_GCC\n        bool\n        default \"y\" if IDF_TOOLCHAIN=\"gcc\"\n\n    config IDF_TARGET_ARCH_RISCV\n        bool\n        default \"n\"\n\n    config IDF_TARGET_ARCH_XTENSA\n        bool\n        default \"n\"\n\n    config IDF_TARGET_ARCH\n        string\n        default \"riscv\" if IDF_TARGET_ARCH_RISCV\n        default \"xtensa\" if IDF_TARGET_ARCH_XTENSA\n\n    config IDF_TARGET\n        # This option records the IDF target when sdkconfig is generated the first time.\n        # It is not updated if environment variable $IDF_TARGET changes later, and\n        # the build system is responsible for detecting the mismatch between\n        # CONFIG_IDF_TARGET and $IDF_TARGET.\n        string\n        default \"$IDF_TARGET\"\n\n    config IDF_INIT_VERSION\n        # This option records the IDF version when sdkconfig is generated the first time.\n        # It is not updated if environment variable $IDF_VERSION changes later\n        string\n        default \"$IDF_INIT_VERSION\"\n\n    config IDF_TARGET_ESP32\n        bool\n        default \"y\" if IDF_TARGET=\"esp32\"\n        select IDF_TARGET_ARCH_XTENSA\n\n    config IDF_TARGET_ESP32S2\n        bool\n        default \"y\" if IDF_TARGET=\"esp32s2\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_XTENSA\n\n    config IDF_TARGET_ESP32S3\n        bool\n        default \"y\" if IDF_TARGET=\"esp32s3\"\n        select IDF_TARGET_ARCH_XTENSA\n\n    config IDF_TARGET_ESP32C3\n        bool\n        default \"y\" if IDF_TARGET=\"esp32c3\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_RISCV\n\n    config IDF_TARGET_ESP32C2\n        bool\n        default \"y\" if IDF_TARGET=\"esp32c2\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_RISCV\n\n    config IDF_TARGET_ESP32C6\n        bool\n        default \"y\" if IDF_TARGET=\"esp32c6\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_RISCV\n\n    config IDF_TARGET_ESP32C5\n        bool\n        default \"y\" if IDF_TARGET=\"esp32c5\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_RISCV\n\n    config IDF_TARGET_ESP32P4\n        bool\n        default \"y\" if IDF_TARGET=\"esp32p4\"\n        select IDF_TARGET_ARCH_RISCV\n\n    config IDF_TARGET_ESP32H2\n        bool\n        default \"y\" if IDF_TARGET=\"esp32h2\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_RISCV\n\n    config IDF_TARGET_ESP32C61\n        bool\n        default \"y\" if IDF_TARGET=\"esp32c61\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_RISCV\n\n    config IDF_TARGET_ESP32H21\n        bool\n        default \"y\" if IDF_TARGET=\"esp32h21\"\n        select FREERTOS_UNICORE\n        select IDF_TARGET_ARCH_RISCV\n        select IDF_ENV_FPGA\n        select IDF_ENV_BRINGUP\n\n    config IDF_TARGET_LINUX\n        bool\n        default \"y\" if IDF_TARGET=\"linux\"\n\n    config IDF_FIRMWARE_CHIP_ID\n        hex\n        default 0x0000 if IDF_TARGET_ESP32\n        default 0x0002 if IDF_TARGET_ESP32S2\n        default 0x0005 if IDF_TARGET_ESP32C3\n        default 0x0009 if IDF_TARGET_ESP32S3\n        default 0x000C if IDF_TARGET_ESP32C2\n        default 0x000D if IDF_TARGET_ESP32C6\n        default 0x0010 if IDF_TARGET_ESP32H2\n        default 0x0012 if IDF_TARGET_ESP32P4\n        default 0x0017 if IDF_TARGET_ESP32C5\n        default 0x0014 if IDF_TARGET_ESP32C61\n        default 0x0019 if IDF_TARGET_ESP32H21\n        default 0xFFFF\n\n\n    menu \"Build type\"\n\n        choice APP_BUILD_TYPE\n            prompt \"Application build type\"\n            default APP_BUILD_TYPE_APP_2NDBOOT\n            help\n                Select the way the application is built.\n\n                By default, the application is built as a binary file in a format compatible with\n                the ESP-IDF bootloader. In addition to this application, 2nd stage bootloader is\n                also built. Application and bootloader binaries can be written into flash and\n                loaded/executed from there.\n\n                Another option, useful for only very small and limited applications, is to only link\n                the .elf file of the application, such that it can be loaded directly into RAM over\n                JTAG or UART. Note that since IRAM and DRAM sizes are very limited, it is not possible\n                to build any complex application this way. However for some kinds of testing and debugging,\n                this option may provide faster iterations, since the application does not need to be\n                written into flash.\n\n                Note: when APP_BUILD_TYPE_RAM is selected and loaded with JTAG, ESP-IDF does not contain\n                all the startup code required to initialize the CPUs and ROM memory (data/bss).\n                Therefore it is necessary to execute a bit of ROM code prior to executing the application.\n                A gdbinit file may look as follows (for ESP32):\n\n                    # Connect to a running instance of OpenOCD\n                    target remote :3333\n                    # Reset and halt the target\n                    mon reset halt\n                    # Run to a specific point in ROM code,\n                    #  where most of initialization is complete.\n                    thb *0x40007d54\n                    c\n                    # Load the application into RAM\n                    load\n                    # Run till app_main\n                    tb app_main\n                    c\n\n                Execute this gdbinit file as follows:\n\n                    xtensa-esp32-elf-gdb build/app-name.elf -x gdbinit\n\n                Example gdbinit files for other targets can be found in tools/test_apps/system/gdb_loadable_elf/\n\n                When loading the BIN with UART, the ROM will jump to ram and run the app after finishing the ROM\n                startup code, so there's no additional startup initialization required. You can use the\n                `load_ram` in esptool.py to load the generated .bin file into ram and execute.\n\n                Example:\n                    esptool.py --chip {chip} -p {port} -b {baud} --no-stub load_ram {app.bin}\n\n                Recommended sdkconfig.defaults for building loadable ELF files is as follows.\n                CONFIG_APP_BUILD_TYPE_RAM is required, other options help reduce application\n                memory footprint.\n\n                    CONFIG_APP_BUILD_TYPE_RAM=y\n                    CONFIG_VFS_SUPPORT_TERMIOS=\n                    CONFIG_NEWLIB_NANO_FORMAT=y\n                    CONFIG_ESP_SYSTEM_PANIC_PRINT_HALT=y\n                    CONFIG_ESP_DEBUG_STUBS_ENABLE=\n                    CONFIG_ESP_ERR_TO_NAME_LOOKUP=\n\n\n            config APP_BUILD_TYPE_APP_2NDBOOT\n                bool\n                prompt \"Default (binary application + 2nd stage bootloader)\"\n                depends on !IDF_TARGET_LINUX\n                select APP_BUILD_GENERATE_BINARIES\n                select APP_BUILD_BOOTLOADER\n                select APP_BUILD_USE_FLASH_SECTIONS\n\n            config APP_BUILD_TYPE_RAM\n                bool\n                prompt \"Build app runs entirely in RAM (EXPERIMENTAL)\"\n                select APP_BUILD_GENERATE_BINARIES\n\n        endchoice # APP_BUILD_TYPE\n\n        # Hidden options, set according to the choice above\n        config APP_BUILD_GENERATE_BINARIES\n            bool # Whether to generate .bin files or not\n\n        config APP_BUILD_BOOTLOADER\n            bool # Whether to build the bootloader\n\n        config APP_BUILD_TYPE_PURE_RAM_APP\n            bool\n            prompt \"Build app without SPI_FLASH/PSRAM support (saves ram)\"\n            depends on APP_BUILD_TYPE_RAM\n            help\n                If this option is enabled, external memory and related peripherals, such as Cache, MMU,\n                Flash and PSRAM, won't be initialized. Corresponding drivers won't be introduced either.\n                Components that depend on the spi_flash component will also be unavailable, such as\n                app_update, etc. When this option is enabled, about 26KB of RAM space can be saved.\n\n        config APP_BUILD_USE_FLASH_SECTIONS\n            bool # Whether to place code/data into memory-mapped flash sections\n\n        config APP_REPRODUCIBLE_BUILD\n            bool \"Enable reproducible build\"\n            default n\n            select COMPILER_HIDE_PATHS_MACROS\n            help\n                If enabled, all date, time, and path information would be eliminated. A .gdbinit file would be create\n                automatically. (or will be append if you have one already)\n\n        config APP_NO_BLOBS\n            bool \"No Binary Blobs\"\n            default n\n            help\n                If enabled, this disables the linking of binary libraries in the application build. Note\n                that after enabling this Wi-Fi/Bluetooth will not work.\n\n        config APP_COMPATIBLE_PRE_V2_1_BOOTLOADERS\n            bool \"App compatible with bootloaders before ESP-IDF v2.1\"\n            select APP_COMPATIBLE_PRE_V3_1_BOOTLOADERS\n            depends on IDF_TARGET_ESP32\n            default n\n            help\n                Bootloaders before ESP-IDF v2.1 did less initialisation of the\n                system clock. This setting needs to be enabled to build an app\n                which can be booted by these older bootloaders.\n\n                If this setting is enabled, the app can be booted by any bootloader\n                from IDF v1.0 up to the current version.\n\n                If this setting is disabled, the app can only be booted by bootloaders\n                from IDF v2.1 or newer.\n\n                Enabling this setting adds approximately 1KB to the app's IRAM usage.\n\n        config APP_COMPATIBLE_PRE_V3_1_BOOTLOADERS\n            bool \"App compatible with bootloader and partition table before ESP-IDF v3.1\"\n            depends on IDF_TARGET_ESP32\n            default n\n            help\n                Partition tables before ESP-IDF V3.1 do not contain an MD5 checksum\n                field, and the bootloader before ESP-IDF v3.1 cannot read a partition\n                table that contains an MD5 checksum field.\n\n                Enable this option only if your app needs to boot on a bootloader and/or\n                partition table that was generated from a version *before* ESP-IDF v3.1.\n\n                If this option and Flash Encryption are enabled at the same time, and any\n                data partitions in the partition table are marked Encrypted, then the\n                partition encrypted flag should be manually verified in the app before accessing\n                the partition (see CVE-2021-27926).\n\n        config APP_INIT_CLK\n            bool\n            depends on IDF_TARGET_ESP32\n            default y if APP_COMPATIBLE_PRE_V2_1_BOOTLOADERS\n            default y if APP_BUILD_TYPE_RAM\n\n\n    endmenu # Build type\n\n    source \"$COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE\"\n\n    menu \"Compiler options\"\n\n        choice COMPILER_OPTIMIZATION\n            prompt \"Optimization Level\"\n            default COMPILER_OPTIMIZATION_DEBUG\n            help\n                This option sets compiler optimization level (gcc -O argument) for the app.\n\n                - The \"Debug\" setting will add the -Og flag to CFLAGS.\n                - The \"Size\" setting will add the -Os flag to CFLAGS (-Oz with Clang).\n                - The \"Performance\" setting will add the -O2 flag to CFLAGS.\n                - The \"None\" setting will add the -O0 flag to CFLAGS.\n\n                The \"Size\" setting cause the compiled code to be smaller and faster, but\n                may lead to difficulties of correlating code addresses to source file\n                lines when debugging.\n\n                The \"Performance\" setting causes the compiled code to be larger and faster,\n                but will be easier to correlated code addresses to source file lines.\n\n                \"None\" with -O0 produces compiled code without optimization.\n\n                Note that custom optimization levels may be unsupported.\n\n                Compiler optimization for the IDF bootloader is set separately,\n                see the BOOTLOADER_COMPILER_OPTIMIZATION setting.\n\n            config COMPILER_OPTIMIZATION_DEBUG\n                bool \"Debug (-Og)\"\n            config COMPILER_OPTIMIZATION_SIZE\n                bool \"Optimize for size (-Os with GCC, -Oz with Clang)\"\n            config COMPILER_OPTIMIZATION_PERF\n                bool \"Optimize for performance (-O2)\"\n            config COMPILER_OPTIMIZATION_NONE\n                bool \"Debug without optimization (-O0)\"\n\n        endchoice\n\n        choice COMPILER_OPTIMIZATION_ASSERTION_LEVEL\n            prompt \"Assertion level\"\n            default COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE\n            help\n                Assertions can be:\n\n                - Enabled. Failure will print verbose assertion details. This is the default.\n\n                - Set to \"silent\" to save code size (failed assertions will abort() but user\n                  needs to use the aborting address to find the line number with the failed assertion.)\n\n                - Disabled entirely (not recommended for most configurations.) -DNDEBUG is added\n                  to CPPFLAGS in this case.\n\n            config COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE\n                prompt \"Enabled\"\n                bool\n                help\n                    Enable assertions. Assertion content and line number will be printed on failure.\n\n            config COMPILER_OPTIMIZATION_ASSERTIONS_SILENT\n                prompt \"Silent (saves code size)\"\n                bool\n                help\n                    Enable silent assertions. Failed assertions will abort(), user needs to\n                    use the aborting address to find the line number with the failed assertion.\n\n            config COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE\n                prompt \"Disabled (sets -DNDEBUG)\"\n                bool\n                help\n                    If assertions are disabled, -DNDEBUG is added to CPPFLAGS.\n\n        endchoice # assertions\n\n        config COMPILER_ASSERT_NDEBUG_EVALUATE\n            bool \"Enable the evaluation of the expression inside assert(X) when NDEBUG is set\"\n            default y\n            help\n                When NDEBUG is set, assert(X) will not cause code to trigger an assertion.\n                With this option set, assert(X) will still evaluate the expression X, though\n                the result will never cause an assertion. This means that if X is a function\n                then the function will be called.\n\n                This is not according to the standard, which states that the assert(X) should\n                be replaced with ((void)0) if NDEBUG is defined.\n\n                In ESP-IDF v6.0 the default behavior will change to \"no\" to be in line with the\n                standard.\n\n        choice COMPILER_FLOAT_LIB_FROM\n            prompt \"Compiler float lib source\"\n            default COMPILER_FLOAT_LIB_FROM_RVFPLIB if ESP_ROM_HAS_RVFPLIB\n            default COMPILER_FLOAT_LIB_FROM_GCCLIB\n            help\n                In the soft-fp part of libgcc, riscv version is written in C,\n                and handles all edge cases in IEEE754, which makes it larger\n                and performance is slow.\n\n                RVfplib is an optimized RISC-V library for FP arithmetic on 32-bit\n                integer processors, for single and double-precision FP.\n                RVfplib is \"fast\", but it has a few exceptions from IEEE 754 compliance.\n\n            config COMPILER_FLOAT_LIB_FROM_GCCLIB\n                bool \"libgcc\"\n            config COMPILER_FLOAT_LIB_FROM_RVFPLIB\n                depends on ESP_ROM_HAS_RVFPLIB\n                bool \"librvfp\"\n        endchoice # COMPILER_FLOAT_LIB_FROM\n\n        config COMPILER_OPTIMIZATION_ASSERTION_LEVEL\n            int\n            default 0 if COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE\n            default 1 if COMPILER_OPTIMIZATION_ASSERTIONS_SILENT\n            default 2 if COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE\n\n        config COMPILER_OPTIMIZATION_CHECKS_SILENT\n            bool \"Disable messages in ESP_RETURN_ON_* and ESP_EXIT_ON_* macros\"\n            default n\n            help\n                If enabled, the error messages will be discarded in following check macros:\n                - ESP_RETURN_ON_ERROR\n                - ESP_EXIT_ON_ERROR\n                - ESP_RETURN_ON_FALSE\n                - ESP_EXIT_ON_FALSE\n\n        menuconfig COMPILER_HIDE_PATHS_MACROS\n            bool \"Replace ESP-IDF and project paths in binaries\"\n            default y\n            help\n                When expanding the __FILE__ and __BASE_FILE__ macros, replace paths inside ESP-IDF\n                with paths relative to the placeholder string \"IDF\", and convert paths inside the\n                project directory to relative paths.\n\n                This allows building the project with assertions or other code that embeds file paths,\n                without the binary containing the exact path to the IDF or project directories.\n\n                This option passes -fmacro-prefix-map options to the GCC command line. To replace additional\n                paths in your binaries, modify the project CMakeLists.txt file to pass custom -fmacro-prefix-map or\n                -ffile-prefix-map arguments.\n\n        menuconfig COMPILER_CXX_EXCEPTIONS\n            bool \"Enable C++ exceptions\"\n            default n\n            help\n                Enabling this option compiles all IDF C++ files with exception support enabled.\n\n                Disabling this option disables C++ exception support in all compiled files, and any libstdc++ code\n                which throws an exception will abort instead.\n\n                Enabling this option currently adds an additional ~500 bytes of heap overhead\n                when an exception is thrown in user code for the first time.\n\n        config COMPILER_CXX_EXCEPTIONS_EMG_POOL_SIZE\n            int \"Emergency Pool Size\"\n            default 0\n            depends on COMPILER_CXX_EXCEPTIONS\n            help\n                Size (in bytes) of the emergency memory pool for C++ exceptions. This pool will be used to allocate\n                memory for thrown exceptions when there is not enough memory on the heap.\n\n        config COMPILER_CXX_RTTI\n            bool \"Enable C++ run-time type info (RTTI)\"\n            default n\n            help\n                Enabling this option compiles all C++ files with RTTI support enabled.\n                This increases binary size (typically by tens of kB) but allows using\n                dynamic_cast conversion and typeid operator.\n\n        choice COMPILER_STACK_CHECK_MODE\n            prompt \"Stack smashing protection mode\"\n            default COMPILER_STACK_CHECK_MODE_NONE\n            help\n                Stack smashing protection mode. Emit extra code to check for buffer overflows, such as stack\n                smashing attacks. This is done by adding a guard variable to functions with vulnerable objects.\n                The guards are initialized when a function is entered and then checked when the function exits.\n                If a guard check fails, program is halted. Protection has the following modes:\n\n                - In NORMAL mode (GCC flag: -fstack-protector) only functions that call alloca, and functions with\n                  buffers larger than 8 bytes are protected.\n\n                - STRONG mode (GCC flag: -fstack-protector-strong) is like NORMAL, but includes additional functions\n                  to be protected -- those that have local array definitions, or have references to local frame\n                  addresses.\n\n                - In OVERALL mode (GCC flag: -fstack-protector-all) all functions are protected.\n\n                Modes have the following impact on code performance and coverage:\n\n                - performance: NORMAL > STRONG > OVERALL\n\n                - coverage: NORMAL < STRONG < OVERALL\n\n                The performance impact includes increasing the amount of stack memory required for each task.\n\n            config COMPILER_STACK_CHECK_MODE_NONE\n                bool \"None\"\n            config COMPILER_STACK_CHECK_MODE_NORM\n                bool \"Normal\"\n            config COMPILER_STACK_CHECK_MODE_STRONG\n                bool \"Strong\"\n            config COMPILER_STACK_CHECK_MODE_ALL\n                bool \"Overall\"\n        endchoice\n\n        config COMPILER_STACK_CHECK\n            bool\n            default !COMPILER_STACK_CHECK_MODE_NONE\n            help\n                Stack smashing protection.\n\n        config COMPILER_NO_MERGE_CONSTANTS\n            bool \"Disable merging const sections\"\n            depends on IDF_TOOLCHAIN_GCC\n            help\n                Disable merging identical constants (string/floating-point) across compilation units.\n                This helps in better size analysis of the application binary as the rodata section\n                distribution is more uniform across libraries. On downside, it may increase\n                the binary size and hence should be used during development phase only.\n\n        config COMPILER_WARN_WRITE_STRINGS\n            bool \"Enable -Wwrite-strings warning flag\"\n            default \"n\"\n            help\n                Adds -Wwrite-strings flag for the C/C++ compilers.\n\n                For C, this gives string constants the type ``const char[]`` so that\n                copying the address of one into a non-const ``char *`` pointer\n                produces a warning. This warning helps to find at compile time code\n                that tries to write into a string constant.\n\n                For C++, this warns about the deprecated conversion from string\n                literals to ``char *``.\n\n        config COMPILER_SAVE_RESTORE_LIBCALLS\n            bool \"Enable -msave-restore flag to reduce code size\"\n            depends on IDF_TARGET_ARCH_RISCV\n            help\n                Adds -msave-restore to C/C++ compilation flags.\n\n                When this flag is enabled, compiler will call library functions to\n                save/restore registers in function prologues/epilogues. This results\n                in lower overall code size, at the expense of slightly reduced performance.\n\n                This option can be enabled for RISC-V targets only.\n\n        config COMPILER_DISABLE_DEFAULT_ERRORS\n            bool \"Disable errors for default warnings\"\n            default \"y\"\n            help\n                Enable this option if you do not want default warnings to be considered as errors,\n                especially when updating IDF.\n\n                This is a temporary flag that could help to allow upgrade while having\n                some time to address the warnings raised by those default warnings.\n                Alternatives are:\n                1) fix code (preferred),\n                2) remove specific warnings,\n                3) do not consider specific warnings as error.\n\n        config COMPILER_DISABLE_GCC12_WARNINGS\n            bool \"Disable new warnings introduced in GCC 12\"\n            default \"n\"\n            help\n                Enable this option if use GCC 12 or newer, and want to disable warnings which don't appear with\n                GCC 11.\n\n        config COMPILER_DISABLE_GCC13_WARNINGS\n            bool \"Disable new warnings introduced in GCC 13\"\n            default \"n\"\n            help\n                Enable this option if use GCC 13 or newer, and want to disable warnings which don't appear with\n                GCC 12.\n\n        config COMPILER_DISABLE_GCC14_WARNINGS\n            bool \"Disable new warnings introduced in GCC 14\"\n            default \"n\"\n            help\n                Enable this option if use GCC 14 or newer, and want to disable warnings which don't appear with\n                GCC 13.\n\n        config COMPILER_DUMP_RTL_FILES\n            bool \"Dump RTL files during compilation\"\n            help\n                If enabled, RTL files will be produced during compilation. These files\n                can be used by other tools, for example to calculate call graphs.\n\n        choice COMPILER_RT_LIB\n            prompt \"Compiler runtime library\"\n            default COMPILER_RT_LIB_CLANGRT if IDF_TOOLCHAIN_CLANG\n            default COMPILER_RT_LIB_HOST if IDF_TARGET_LINUX\n            default COMPILER_RT_LIB_GCCLIB\n            help\n                Select runtime library to be used by compiler.\n                - GCC toolchain supports libgcc only.\n                - Clang allows to choose between libgcc or libclang_rt.\n                - For host builds (\"linux\" target), uses the default library.\n\n            config COMPILER_RT_LIB_GCCLIB\n                depends on !IDF_TARGET_LINUX\n                bool \"libgcc\"\n            config COMPILER_RT_LIB_CLANGRT\n                depends on IDF_TOOLCHAIN_CLANG && !IDF_TARGET_LINUX\n                bool \"libclang_rt\"\n            config COMPILER_RT_LIB_HOST\n                depends on IDF_TARGET_LINUX\n                bool \"Host\"\n        endchoice\n\n        config COMPILER_RT_LIB_NAME\n            string\n            default \"clang_rt.builtins\" if COMPILER_RT_LIB_CLANGRT\n            default \"gcc\" if COMPILER_RT_LIB_GCCLIB\n            default \"\" if COMPILER_RT_LIB_HOST\n\n        choice COMPILER_ORPHAN_SECTIONS\n            prompt \"Orphan sections handling\"\n            default COMPILER_ORPHAN_SECTIONS_WARNING\n            depends on !IDF_TARGET_LINUX\n            help\n                If the linker finds orphan sections, it attempts to place orphan sections after sections of the same\n                attribute such as code vs data, loadable vs non-loadable, etc.\n                That means that orphan sections could placed between sections defined in IDF linker scripts.\n                This could lead to corruption of the binary image. Configure the linker action here.\n\n            config COMPILER_ORPHAN_SECTIONS_WARNING\n                bool \"Place with warning\"\n                help\n                    Places orphan sections with a warning message.\n\n            config COMPILER_ORPHAN_SECTIONS_PLACE\n                bool \"Place silently\"\n                help\n                    Places orphan sections without a warning/error message.\n        endchoice\n\n        config COMPILER_STATIC_ANALYZER\n            bool \"Enable compiler static analyzer\"\n            default \"n\"\n            depends on IDF_TOOLCHAIN_GCC\n            help\n                Enable compiler static analyzer. This may produce false-positive results and increases compile time.\n\n    endmenu # Compiler Options\n\n    menu \"Component config\"\n        comment \"!!! MINIMAL_BUILD is enabled !!!\"\n        depends on \"${IDF_MINIMAL_BUILD}\"\n        comment \"Only common components and those transitively required by the main component are listed\"\n        depends on \"${IDF_MINIMAL_BUILD}\"\n        comment \"If a component configuration is missing, please add it to the main component's requirements\"\n        depends on \"${IDF_MINIMAL_BUILD}\"\n\n        source \"$COMPONENT_KCONFIGS_SOURCE_FILE\"\n    endmenu\n\n    config IDF_EXPERIMENTAL_FEATURES\n        bool \"Make experimental features visible\"\n        default \"n\"\n        help\n            By enabling this option, ESP-IDF experimental feature options will be visible.\n\n            Note you should still enable a certain experimental feature option to use it, and you\n            should read the corresponding risk warning and known issue list carefully.\n\n            Current experimental feature list:\n\n            - CONFIG_ESPTOOLPY_FLASHFREQ_120M && CONFIG_ESPTOOLPY_FLASH_SAMPLE_MODE_DTR\n            - CONFIG_SPIRAM_SPEED_120M && CONFIG_SPIRAM_MODE_OCT\n            - CONFIG_BOOTLOADER_CACHE_32BIT_ADDR_QUAD_FLASH\n            - CONFIG_ESP_WIFI_EAP_TLS1_3\n            - CONFIG_ESP_WIFI_ENABLE_ROAMING_APP\n            - CONFIG_USB_HOST_EXT_PORT_SUPPORT_LS\n            - CONFIG_USB_HOST_EXT_PORT_RESET_ATTEMPTS\n            - CONFIG_LIBC_PICOLIBC\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3359375,
          "content": "# Espressif IoT Development Framework\n\n* [中文版](./README_CN.md)\n\nESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS.\n\n# ESP-IDF Release Support Schedule\n\n![Support Schedule](https://dl.espressif.com/dl/esp-idf/support-periods.svg?v=1)\n\n- Please read [the support policy](SUPPORT_POLICY.md) and [the documentation](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html) for more information about ESP-IDF versions.\n- Please see the [End-of-Life Advisories](https://www.espressif.com/en/support/documents/advisories?keys=&field_type_of_advisory_tid%5B%5D=817) for information about ESP-IDF releases with discontinued support.\n\n# ESP-IDF Release and SoC Compatibility\n\nThe following table shows ESP-IDF support of Espressif SoCs where ![alt text][preview] and ![alt text][supported] denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported.\n\n|Chip         |          v5.0          |         v5.1           |         v5.2           |         v5.3           |          v5.4           |                                                                     |\n|:----------- | :---------------------:| :--------------------: | :--------------------: | :--------------------: |  :--------------------: |:------------------------------------------------------------------- |\n|ESP32        | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |  ![alt text][supported] |                                                                     |\n|ESP32-S2     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |  ![alt text][supported] |                                                                     |\n|ESP32-C3     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |  ![alt text][supported] |                                                                     |\n|ESP32-S3     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |  ![alt text][supported] |[Announcement](https://www.espressif.com/en/news/ESP32_S3)           |\n|ESP32-C2     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |  ![alt text][supported] |[Announcement](https://www.espressif.com/en/news/ESP32-C2)           |\n|ESP32-C6     |                        | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |  ![alt text][supported] |[Announcement](https://www.espressif.com/en/news/ESP32_C6)           |\n|ESP32-H2     |                        | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |  ![alt text][supported] |[Announcement](https://www.espressif.com/en/news/ESP32_H2)           |\n|ESP32-P4     |                        |                        |                        | ![alt text][supported] |  ![alt text][supported] |[Announcement](https://www.espressif.com/en/news/ESP32-P4)           |\n|ESP32-C5     |                        |                        |                        |                        |  ![alt text][preview]   |[Announcement](https://www.espressif.com/en/news/ESP32-C5)           |\n|ESP32-C61    |                        |                        |                        |                        |  ![alt text][preview]   |[Announcement](https://www.espressif.com/en/products/socs/esp32-c61) |\n\n[supported]: https://img.shields.io/badge/-supported-green \"supported\"\n[preview]: https://img.shields.io/badge/-preview-orange \"preview\"\n\nThere are variants of revisions for a series of chips. See [Compatibility Between ESP-IDF Releases and Revisions of Espressif SoCs](https://github.com/espressif/esp-idf/blob/master/COMPATIBILITY.md) for the details of the compatibility between ESP-IDF and chip revisions.\n\nEspressif SoCs released before 2016 (ESP8266 and ESP8285) are supported by [RTOS SDK](https://github.com/espressif/ESP8266_RTOS_SDK) instead.\n\n# Developing With ESP-IDF\n\n## Setting Up ESP-IDF\n\nSee https://idf.espressif.com/ for links to detailed instructions on how to set up the ESP-IDF depending on chip you use.\n\n**Note:** Each SoC series and each ESP-IDF release has its own documentation. Please see Section [Versions](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html) on how to find documentation and how to checkout specific release of ESP-IDF.\n\n### Non-GitHub forks\n\nESP-IDF uses relative locations as its submodules URLs ([.gitmodules](.gitmodules)). So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script [tools/set-submodules-to-github.sh](tools/set-submodules-to-github.sh) after git clone.\n\nThe script sets absolute URLs for all submodules, allowing `git submodule update --init --recursive` to complete. If cloning ESP-IDF from GitHub, this step is not needed.\n\n## Finding a Project\n\nAs well as the [esp-idf-template](https://github.com/espressif/esp-idf-template) project mentioned in Getting Started, ESP-IDF comes with some example projects in the [examples](examples) directory.\n\nOnce you've found the project you want to work with, change to its directory and you can configure and build it.\n\nTo start your own project based on an example, copy the example project directory outside of the ESP-IDF directory.\n\n# Quick Reference\n\nSee the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects:\n\n## Setup Build Environment\n\n(See the Getting Started guide listed above for a full list of required steps with more details.)\n\n* Install host build dependencies mentioned in the Getting Started guide.\n* Run the install script to set up the build environment. The options include `install.bat` or `install.ps1` for Windows, and `install.sh` or `install.fish` for Unix shells.\n* Run the export script on Windows (`export.bat`) or source it on Unix (`source export.sh`) in every shell environment before using ESP-IDF.\n\n## Configuring the Project\n\n* `idf.py set-target <chip_name>` sets the target of the project to `<chip_name>`. Run `idf.py set-target` without any arguments to see a list of supported targets.\n* `idf.py menuconfig` opens a text-based configuration menu where you can configure the project.\n\n## Compiling the Project\n\n`idf.py build`\n\n... will compile app, bootloader and generate a partition table based on the config.\n\n## Flashing the Project\n\nWhen the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running:\n\n`idf.py -p PORT flash`\n\nReplace PORT with the name of your serial port (like `COM3` on Windows, `/dev/ttyUSB0` on Linux, or `/dev/cu.usbserial-X` on MacOS. If the `-p` option is left out, `idf.py flash` will try to flash the first available serial port.\n\nThis will flash the entire project (app, bootloader and partition table) to a new chip. The settings for serial port flashing can be configured with `idf.py menuconfig`.\n\nYou don't need to run `idf.py build` before running `idf.py flash`, `idf.py flash` will automatically rebuild anything which needs it.\n\n## Viewing Serial Output\n\nThe `idf.py monitor` target uses the [esp-idf-monitor tool](https://github.com/espressif/esp-idf-monitor) to display serial output from Espressif SoCs. esp-idf-monitor also has a range of features to decode crash output and interact with the device. [Check the documentation page for details](https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html).\n\nExit the monitor by typing Ctrl-].\n\nTo build, flash and monitor output in one pass, you can run:\n\n`idf.py flash monitor`\n\n## Compiling & Flashing Only the App\n\nAfter the initial flash, you may just want to build and flash just your app, not the bootloader and partition table:\n\n* `idf.py app` - build just the app.\n* `idf.py app-flash` - flash just the app.\n\n`idf.py app-flash` will automatically rebuild the app if any source files have changed.\n\n(In normal development there's no downside to reflashing the bootloader and partition table each time, if they haven't changed.)\n\n## Erasing Flash\n\nThe `idf.py flash` target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run `idf.py erase-flash`.\n\nThis can be combined with other targets, ie `idf.py -p PORT erase-flash flash` will erase everything and then re-flash the new app, bootloader and partition table.\n\n# Resources\n\n* Documentation for the latest version: https://docs.espressif.com/projects/esp-idf/. This documentation is built from the [docs directory](docs) of this repository.\n\n* [Beginner's Guide to Key Concepts and Resources of ESP-IDF](https://youtu.be/J8zc8mMNKtc?feature=shared)\n\n* The [esp32.com forum](https://esp32.com/) is a place to ask questions and find community resources.\n\n* [Check the Issues section on github](https://github.com/espressif/esp-idf/issues) if you find a bug or have a feature request. Please check existing Issues before opening a new one.\n\n* If you're interested in contributing to ESP-IDF, please check the [Contributions Guide](https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html).\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 9.2568359375,
          "content": "# Espressif 物联网开发框架\n\n* [English Version](./README.md)\n\nESP-IDF 是乐鑫官方推出的物联网开发框架，支持 Windows、Linux 和 macOS 操作系统。\n\n# ESP-IDF 版本支持期限\n\n![支持期限](https://dl.espressif.com/dl/esp-idf/support-periods.svg?v=1)\n\n- 请参考 [ESP-IDF 支持政策](SUPPORT_POLICY_CN.md) 以及 [相关文档](https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/versions.html) 了解更多关于 ESP-IDF 版本的信息。\n- 请参考 [ESP-IDF 版本停止维护 (EOL) 公告](https://www.espressif.com/zh-hans/support/documents/advisories?keys=&field_type_of_advisory_tid%5B%5D=817)。\n\n# ESP-IDF 与乐鑫芯片\n\n下表总结了乐鑫芯片在 ESP-IDF 各版本中的支持状态，其中 ![alt text][supported] 代表已支持，![alt text][preview] 代表目前处于预览支持状态。预览支持状态通常有时间限制，而且仅适用于测试版芯片。请确保使用与芯片相匹配的 ESP-IDF 版本。\n\n|芯片         |          v5.0          |          v5.1          |          v5.2          |          v5.3          |          v5.4          |                                                                           |\n|:----------- | :---------------------:| :--------------------: | :--------------------: | :--------------------: | :--------------------: | :------------------------------------------------------------------------ |\n|ESP32        | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |                                                                           |\n|ESP32-S2     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |                                                                           |\n|ESP32-C3     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] |                                                                           |\n|ESP32-S3     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | [芯片发布公告](https://www.espressif.com/zh-hans/news/ESP32_S3)           |\n|ESP32-C2     | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | [芯片发布公告](https://www.espressif.com/zh-hans/news/ESP32-C2)           |\n|ESP32-C6     |                        | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | [芯片发布公告](https://www.espressif.com/zh-hans/news/ESP32_C6)           |\n|ESP32-H2     |                        | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | ![alt text][supported] | [芯片发布公告](https://www.espressif.com/zh-hans/news/ESP32_H2)           |\n|ESP32-P4     |                        |                        |                        | ![alt text][supported] | ![alt text][supported] | [芯片发布公告](https://www.espressif.com/zh-hans/news/ESP32-P4)           |\n|ESP32-C5     |                        |                        |                        |                        | ![alt text][preview]   | [芯片发布公告](https://www.espressif.com/zh-hans/news/ESP32-C5)           |\n|ESP32-C61    |                        |                        |                        |                        | ![alt text][preview]   | [芯片发布公告](https://www.espressif.com/zh-hans/products/socs/esp32-c61) |\n\n[supported]: https://img.shields.io/badge/-%E6%94%AF%E6%8C%81-green \"supported\"\n[preview]: https://img.shields.io/badge/-%E9%A2%84%E8%A7%88-orange \"preview\"\n\n每款乐鑫芯片都可能有不同版本。建议参考 [ESP-IDF 版本与乐鑫芯片版本兼容性](https://github.com/espressif/esp-idf/blob/master/COMPATIBILITY_CN.md)，了解 ESP-IDF 版本与各芯片版本之间的兼容性。\n\n对于 2016 年之前发布的乐鑫芯片（包括 ESP8266 和 ESP8285），请参考 [RTOS SDK](https://github.com/espressif/ESP8266_RTOS_SDK)。\n\n# 使用 ESP-IDF 进行开发\n\n## 搭建 ESP-IDF 开发环境\n\n关于不同芯片如何搭建 ESP-IDF 的开发环境，请参考 https://idf.espressif.com/ 。\n\n**注意：** 不同系列芯片和不同 ESP-IDF 版本都有其对应的文档。请参阅[版本](https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/versions.html)部分，获得关于如何查找文档以及如何检出 ESP-IDF 的特定发行版的详细信息。\n\n### 非 GitHub 分叉的 ESP-IDF 项目\n\nESP-IDF 中的子模块采用相对路径（[详见 .gitmodules 文件](.gitmodules)），所以它们会指向 GitHub。 如果 ESP-IDF 被分叉到的仓库不在 GitHub 上，那么你需要在克隆结束后运行该脚本 [tools/set-submodules-to-github.sh](tools/set-submodules-to-github.sh)。\n\n这个脚本会为所有的子模块设置绝对路径，接着可以通过 `git submodule update --init --recursive` 完成子模块的更新。如果 ESP-IDF 是从 GitHub 上克隆得到，则不需要此步骤。\n\n## 寻找项目\n\n除了入门指南中提到的 [esp-idf 模板项目](https://github.com/espressif/esp-idf-template)，ESP-IDF 的 [examples](examples) 目录下还带有很多其它示例项目。\n\n一旦找到了需要的项目，便可以进入该目录，执行配置和构建操作。\n\n如果要基于示例工程开始你自己的项目，请将示例工程复制到 ESP-IDF 目录之外。\n\n# 快速参考\n\n详细的使用方法请参考上面入门指南的链接，这里仅仅列举一些 ESP-IDF 项目开发中常用的命令：\n\n## 设置构建环境\n\n请参考入门指南中列出的详细步骤。\n\n* 在主机中安装入门指南中提到的构建所依赖的工具。\n* 运行安装脚本来设置构建环境。可为 Windows shell 选择 `install.bat` 或 `install.ps1`，为 Unix shell 选择 `install.sh` 和 `install.fish`。\n* 在使用 ESP-IDF 之前，需要在 shell 中运行导出脚本。Windows 下可运行 `export.bat`，Unix 下可运行 `source export.sh`。\n\n## 配置项目\n\n* `idf.py set-target <chip_name>` 可将项目的目标芯片设置为 `<chip_name>`。运行 `idf.py set-target`，不用带任何参数，可查看所有支持的目标芯片列表。\n* `idf.py menuconfig` 可打开一个基于文本的配置菜单，可以用来对项目进行配置。\n\n## 编译项目\n\n`idf.py build`\n\n编译应用程序，引导程序，并根据配置生成分区表。\n\n## 烧写项目\n\n当构建结束，终端会打印出一条命令行，告知如何使用 esptool.py 工具烧写项目到芯片中。但你也可以运行下面这条命令来自动烧写：\n\n`idf.py -p PORT flash`\n\n将其中的 PORT 替换为系统中实际串口的名字（比如 Windows 下的 `COM3`，Linux 下的 `/dev/ttyUSB0`，或者 macOS 下的 `/dev/cu.usbserial-X`。如果省略 `-p` 选项，`idf.py flash` 会尝试使用第一个可用的串口进行烧写。\n\n这会烧写整个项目（包括应用程序，引导程序和分区表）到芯片中，此外还可以使用 `idf.py menuconfig` 来调整串口烧写相关的配置。\n\n不必先运行 `idf.py build` 再运行 `idf.py flash`，`idf.py flash` 会根据需要自动重新构建项目。\n\n## 观察串口输入\n\n`idf.py monitor` 会调用 [esp-idf-monitor 工具](https://github.com/espressif/esp-idf-monitor)来显示乐鑫芯片的串口输出。esp-idf-monitor 还包含一系列的功能来解析程序崩溃后的输出结果并与设备进行交互。更多详细内容，请参阅[文档](https://docs.espressif.com/projects/esp-idf/en/latest/get-started/idf-monitor.html).\n\n输入 `Ctrl-]` 可退出监视器。\n\n想要一次性执行构建、烧写和监视，可以运行如下命令：\n\n`idf.py flash monitor`\n\n## 仅编译并烧写应用程序\n\n在第一次烧写过后，你可能只想构建并烧写你的应用程序，不包括引导程序和分区表：\n\n* `idf.py app` - 仅构建应用程序。\n* `idf.py app-flash` - 仅烧写应用程序。\n\n`idf.py app-flash` 会自动判断是否有源文件发生了改变然后重新构建应用程序。\n\n（在正常的开发中，即使引导程序和分区表没有发生变化，每次都重新烧写它们并不会带来什么危害。）\n\n## 擦除 Flash\n\n`idf.py flash` 并不会擦除 flash 上所有的内容，但是有时候我们需要设备恢复到完全擦除的状态，尤其是分区表发生了变化或者 OTA 应用升级时。要擦除整块 flash 请运行 `idf.py erase-flash`。\n\n这条命令还可以和其余命令整合在一起，`idf.py -p PORT erase-flash flash` 会擦除一切然后重新烧写新的应用程序、引导程序和分区表。\n\n# 其它参考资源\n\n* 最新版的文档：https://docs.espressif.com/projects/esp-idf/ ，该文档是由本仓库 [docs 目录](docs) 构建得到。\n\n* [初学者指南：主要概念和资源](https://www.bilibili.com/video/BV1114y1r7du/)\n\n* 可以前往 [esp32.com 论坛](https://esp32.com/) 提问，挖掘社区资源。\n\n* 如果你在使用中发现了错误或者需要新的功能，请先[查看 GitHub Issues](https://github.com/espressif/esp-idf/issues)，确保该问题没有重复提交。\n\n* 如果你有兴趣为 ESP-IDF 作贡献，请先阅读[贡献指南](https://docs.espressif.com/projects/esp-idf/en/latest/contribute/index.html)。\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 5.841796875,
          "content": "# ESP-IDF Project Roadmap 2024\n\nThis document outlines the goals of ESP-IDF project and is shared for the convenience of our customers. It is important to clarify that this document is not a binding commitment to our customers. Instead, its primary purpose is to offer a clear roadmap and direction for the project's development. By openly sharing this information, we aim to enhance our customers' understanding, promote transparency and ensure alignment with the overarching objectives of the ESP-IDF project.\n\n## Project Overview\n\n### Project Goals\n\nIn both minor and major releases, we integrate new chip support to enhance our product range. By expanding the chip matrix, we broaden the scope of our offerings, catering to a wider audience with diverse needs. This proactive approach ensures that our products remain at the forefront of technological advancements, consistently meeting and exceeding customer expectations.\n\nFurthermore, we prioritize bugfix releases for active branches, focusing on improving the stability and performance of products already in production. By addressing bugs promptly, we aim to enhance the overall user experience and provide tangible benefits to customers relying on our solutions. This proactive maintenance strategy reflects our commitment to delivering reliable, high-quality products to our valued customer base.\n\nBelow are the main objectives that ESP-IDF project/teams would like to implement in 2024.\n\n-   New Chip Support\n\n    -   Add support for ESP32-P4\n    -   Add support for ESP32-C5\n    -   Add support for ESP32-C61\n\n-   More Minor Releases\n\n    -   Release IDF v5.3 in 2024\n    -   Release IDF v5.4 at the start of 2025\n\n-   More Bugfix Releases\n\n    -   Release v4.4.8 for IDF v4.4 before ESP-IDF v4.4 goes End of Life in July 2024\n    -   Do more bugfix releases for IDF v5.1 before release/5.1 enters maintenance period in June 2024\n    -   Do more bug fixes releases for release/5.2 and release/5.3, and push the two releases to be more stable and production-ready\n\n-   Updates of Libraries\n\n    -   Update GDB to 14.2\n    -   Update LLVM to 18.1.2\n    -   Update MbedTLS to 3.6 (LTS)\n    -   Update LWIP to 2.2.0\n    -   Change minimal Python requirement to 3.9\n\nPlease note that support status of previous silicones could be found on [ESP-IDF Release and SoC Compatibility](https://github.com/espressif/esp-idf#esp-idf-release-and-soc-compatibility).\n\n### Roadmap Details\n\nThe ESP-IDF project prioritizes consistent maintenance and updates to ensure our customers remain at the forefront of technological advancements. Our commitment to ongoing development ensures that customers continuously benefit from the latest innovations in the field.\n\nMoreover, we are dedicated to empowering our customers to leverage newly implemented features and enhanced functionalities through iterative improvements. Our steadfast commitment to pushing boundaries ensures that clients not only keep pace with evolving technology but also extract optimal value from the cutting-edge capabilities of our products.\n\nBelow are the main roadmap details for functional areas inside ESP-IDF.\n\n-   New Chip Support\n\n    -   Add full support for ESP32-P4 in ESP-IDF v5.3, refer to [ESP32-P4 Support Status](https://github.com/espressif/esp-idf/issues/12996)\n    -   Add preview support for ESP32-C5 in ESP-IDF v5.3 and full support for ESP32-C5 in ESP-IDF v5.4, refer to [ESP32-C5 Support Status](https://github.com/espressif/esp-idf/issues/14021)\n    -   Add preview support for the early samples of ESP32-C61 in ESP-IDF v5.4 and full support for mass production version in ESP-IDF v5.4.x. Refer to [ESP32-C61 Support Status](https://developer.espressif.com/pages/chip-support-status/esp32c61/#esp-idf)\n\n-   Bugfix releases\n\n    -   Do bugfix release IDF v4.4.8 and stop maintaining ESP-IDF v4.4 in July 2024\n    -   Release bugfix IDF v5.0.6 and IDF v5.0.7 in 2024 (maintenance period)\n    -   Release bugfix IDF v5.1.3 and IDF v5.1.4 in H1 of 2024, and release IDF v5.1.5 in H2 of 2024\n    -   Push release/5.1 to maintenance period from June 2024\n    -   Do more bug fixes releases for release/5.2 (IDF v5.2.1, IDF v5.2.2, IDF v5.2.3) and release/5.3 (IDF v5.3.1, IDF v5.3.2), and push releases to be more stable and more production-ready\n\n## ESP-IDF Planning information\n\nFor the full list of ESP-IDF releases, please visit https://github.com/espressif/esp-idf/releases\n\n### ESP-IDF Major Releases\n\nNo Major Releases planned\n\n### ESP-IDF Minor Releases\n\n#### Quarter One\n\n-   v5.2-RC1, estimate release date: 2024/02/02\n-   v5.2 final release, estimate release date: 2024/02/08\n\n#### Quarter Two\n\n-   v5.3-beta1, estimate release date:: 2024/05/13\n-   v5.3-beta2, estimate release date:: 2024/05/31\n-   v5.3-RC1, estimate release date:: 2024/07/08\n\n#### Quarter Three\n\n-   v5.3-RC2, estimate release date:: 2024/07/26\n-   v5.3 final release, estimate release date:: 2024/08/02\n\n#### Quarter Four\n\n-   v5.4-beta1, estimate release date:: 2024/11/08\n-   v5.4-beta2, estimate release date:: 2024/11/29\n-   v5.4-RC1, estimate release date:: 2025/01/09\n-   v5.4-RC2, estimate release date:: 2025/01/29\n-   v5.4 final release, estimate release date: 2025/02/05\n\n### ESP-IDF Bugfix Releases\n\n#### Quarter One\n\n-   v5.1.3, estimate release date: 2024/02/08\n-   v5.0.6, estimate release date: 2024/02/18\n-   v4.4.7, estimate release date:: 2024/03/19\n-   v5.2.1, estimate release date:: 2024/03/31\n\n#### Quarter Two\n\n-   v5.1.4, estimate release date:: 2024/05/06\n-   v5.2.2, estimate release date:: 2024/06/17\n-   v4.4.8, estimate release date:: 2024/07/19\n\n#### Quarter Three\n\n-   v5.0.7, estimate release date: 2024/08/22\n-   v5.3.1, estimate release date: 2024/09/16\n-   v5.2.3, estimate release date: 2024/10/10\n\n#### Quarter Four\n\n-   v5.1.5, estimate release date: 2024/11/04  (Maintenance period since June 2024)\n-   v5.3.2, estimate release date: 2024/12/31\n-   v5.2.4, estimate release date: 2025/02/20 (Service period ends Feb. 2025)\n"
        },
        {
          "name": "ROADMAP_CN.md",
          "type": "blob",
          "size": 5.5166015625,
          "content": "# ESP-IDF 项目路线图 2024 (v1.0)\n\n本文档概述了 ESP-IDF 项目的年度计划，方便客户据此规划自己的项目周期。需要说明的是该文档并不是我们对客户的约束性承诺。相反，其主要目的是为客户提供 ESP-IDF 项目开发的路线图和方向。通过公开这些信息，我们希望增进客户对 ESP-IDF 项目的理解，提高透明度，并确保与 ESP-IDF 项目的总体目标保持一致。\n\n## 项目总览\n\n### 项目目标\n\n在 ESP-IDF 的主要版本和次要版本中，我们一般会增加对新芯片的支持，以扩展我们的产品线。通过扩展芯片矩阵，拓宽我们的产品范围，并满足广泛受众的各种需求。这样便能保证我们的产品始终处于技术进步的前沿，不断满足客户的需求并超越客户的期望。\n\n此外，ESP-IDF 各活跃分支的 Bugfix 版本发布也是我们项目的重中之重，着力提升已量产产品的稳定性和性能。通过及时解决问题，我们期待提升用户的整体体验，切实惠及使用乐鑫解决方案的客户。通过积极维护 ESP-IDF 的各活跃分支，我们践行了对宝贵的客户群提供可靠、高质量产品的承诺。\n\n以下是 ESP-IDF 项目在 2024 年计划实现的主要目标。\n\n* 新芯片支持\n\n\t* 增加对 ESP32-P4 芯片的支持\n\t* 增加对 ESP32-C5 芯片的支持\n\t* 增加对 ESP32-C61 芯片的支持\n\n* 发布更多的次要版本\n\n\t* 在 2024 年发布 IDF v5.3 \n\t* 在 2025 年初发布 IDF v5.4\n\n* 发布更多 Bugfix 版本\n\n\t* 在 2024 年 7 月底 IDF v4.4 停止维护之前，发布 IDF v4.4.8\n\t* 在 2024 年 6 月底，release/5.1 分支进入维护周期之前，发布更多 Bugfix 版本\n\t* release/5.2 分支和 release/5.3 分支发布更多 Bugfix 版本，使这两个分支更加稳定和产品化\n\n* 上游库与工具链的更新\n\n\t* 将 GDB 升级至 14.2\n\t* 将 LLVM 升级至 18.1.2\n\t* 更新 MbedTLS 至 3.6（LTS）\n\t* 更新 LWIP 至 2.2.0\n\t* 将最低 Python 要求更改为 3.9\n\n请注意，获取之前芯片的支持状态，请参阅 [ESP-IDF 发布和 SoC 兼容性](https://github.com/espressif/esp-idf/blob/master/README_CN.md#esp-idf-与乐鑫芯片)。\n\n### 路线图细节\n\nESP-IDF 项目重视持续维护和更新，确保我们的客户始终处于技术进步的前沿。我们承诺持续进行开发，并将该领域的最新创新成果呈现给客户。\n\n此外，我们也在给客户赋能，客户通过迭代改进便能接触到新开发的功能和更高的性能。我们在突破技术界限方面的坚定承诺，使客户不仅能接触到最新的技术，还能从我们产品的尖端功能中获取最大价值。\n\n以下是 ESP-IDF 路线图的主要信息。\n\n* 新芯片支持\n\n\t* 在 ESP-IDF v5.3 中为 ESP32-P4 提供完整支持，参考 [ESP32-P4 支持状态](https://github.com/espressif/esp-idf/issues/12996)\n\t* 在 ESP-IDF v5.3 中为 ESP32-C5 提供预览支持，并在 ESP-IDF v5.4 中为 ESP32-C5 提供完整支持，参考 [ESP32-C5 支持状态](https://github.com/espressif/esp-idf/issues/14021)\n\t* 在 ESP-IDF v5.4 中增加对 ESP32-C61 早期样品的预览支持，并在 IDF v5.4.x 中增加对 ESP32-C61 量产版本的完整支持，参考 [ESP32-C61 支持状态](https://developer.espressif.com/pages/chip-support-status/esp32c61/#esp-idf)\n\n* Bugfix 版本发布\n\n\t* 发布 Bugfix 版本 IDF v4.4.8，并在 2024 年 7 月底停止维护 ESP-IDF v4.4\n\t* 2024 年，release/5.0 分支已处于维护周期，发布 IDF v5.0.6 和 IDF v5.0.7\n\t* 2024 年上半年发布 Bugfix 版本 IDF v5.1.3 和 IDF v5.1.4，并在 2024 年下半年发布 IDF v5.1.5\n\t* 自 2024 年 6 月起，release/5.1 分支进入到维护周期\n\t* release/5.2 分支发布更多 Bugfix 版本，包括 IDF v5.2.1、IDF v5.2.2、IDF v5.2.3；release/5.3 分支发布更多 Bugfix 版本，包括 IDF v5.3.1、IDF v5.3.2。通过发布这些 Bugfix 版本，使 release/5.2 分支和 release/5.3 分支更加稳定和产品化。\n\n## ESP-IDF 发布计划\n\n获取 ESP-IDF 的完整发布列表，请访问 https://github.com/espressif/esp-idf/releases\n\n### ESP-IDF 主要版本发布\n\n2024 年，无主要版本发布计划\n\n### ESP-IDF 次要版本发布\n\n#### 第一季度\n\n* v5.2-RC1，预计发布日期：2024/02/02\n* v5.2 正式发布，预计发布日期：2024/02/08\n\n#### 第二季度\n\n* v5.3-beta1，预计发布日期：2024/05/13\n* v5.3-beta2，预计发布日期：2024/05/31\n* v5.3-RC1，预计发布日期：2024/07/08\n\n#### 第三季度\n\n* v5.3-RC2，预计发布日期：2024/07/26\n* v5.3 正式发布，预计发布日期：2024/08/02\n\n#### 第四季度\n\n* v5.4-beta1，预计发布日期：2024/11/08\n* v5.4-beta2，预计发布日期：2024/11/29\n* v5.4-RC1，预计发布日期：2025/01/09\n* v5.4-RC2，预计发布日期：2025/01/29\n* v5.4 正式发布，预计发布日期：2025/02/05\n\n### ESP-IDF Bugfix 版本发布\n\n#### 第一季度\n\n* v5.1.3，预计发布日期：2024/02/08\n* v5.0.6，预计发布日期：2024/02/18\n* v4.4.7，预计发布日期：2024/03/19\n* v5.2.1，预计发布日期：2024/03/31\n\n#### 第二季度\n\n* v5.1.4，预计发布日期：2024/05/06\n* v5.2.2，预计发布日期：2024/06/17\n* v4.4.8，预计发布日期：2024/07/19\n\n#### 第三季度\n\n* v5.0.7，预计发布日期：2024/08/22\n* v5.3.1，预计发布日期：2024/09/16\n* v5.2.3，预计发布日期：2024/10/10\n\n#### 第四季度\n\n* v5.1.5，预计发布日期：2024/11/04（自 2024 年 6 月进入维护周期）\n* v5.3.2，预计发布日期：2024/12/31\n* v5.2.4，预计发布日期：2025/02/20（服务周期截止至 2025 年 2 月）"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.51953125,
          "content": "# Security Policy\n\n## Supported Versions\n\nPlease refer to https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html#support-periods for more details on ESP-IDF supported versions and support period policy.\n\n## Reporting a Vulnerability\n\nPlease refer to [Espressif Security Incident Response Process](https://www.espressif.com/sites/default/files/Espressif%20Security%20Incident%20Response%20Process%20v1.0_EN.pdf) on the guidelines to report a security vulnerability. Please do **NOT** create a public GitHub issue.\n"
        },
        {
          "name": "SUPPORT_POLICY.md",
          "type": "blob",
          "size": 3.626953125,
          "content": "The latest support policy for ESP-IDF can be found at [https://github.com/espressif/esp-idf/blob/master/SUPPORT_POLICY.md](https://github.com/espressif/esp-idf/blob/master/SUPPORT_POLICY.md)\n\nSupport Period Policy\n=====================\n\n* [中文版](./SUPPORT_POLICY_CN.md)\n\nEach ESP-IDF major and minor release (V4.1, V4.2, etc) is supported for 30 months after the initial stable release date.\n\nSupported means that the ESP-IDF team will continue to apply bug fixes, security fixes, etc to the release branch on GitHub, and periodically make new bugfix releases as needed.\n\nSupport period is divided into \"Service\" and \"Maintenance\" period:\n\n| Period      | Duration     | Recommended for new projects?         |\n| -------     | ------------ | ------------------------------------- |\n| Service     | 12 months    | Yes                                   |\n| Maintenance | 18 months    | No                                    |\n\nDuring the Service period, bugfixes releases are more frequent. In some cases, support for new features may be added during the Service period (this is reserved for features which are needed to meet particular regulatory requirements or standards for new products, and which carry a very low risk of introducing regressions.)\n\nDuring the Maintenance period, the version is still supported but only bugfixes for high severity issues or security issues will be applied.\n\nUsing an “In Service” version is recommended when starting a new project.\n\nUsers are encouraged to upgrade all projects to a newer ESP-IDF release before the support period finishes and the release becomes End of Life (EOL). It is our policy to not continue fixing bugs in End of Life releases.\n\nPre-release versions (betas, previews, `-rc` and `-dev` versions, etc) are not covered by any support period. Sometimes a particular feature is marked as \"Preview\" in a release, which means it is also not covered by the support period.\n\nESP-IDF should be used in an up-to-date software environment. The operating system and other third-party tools should be supported by their maintainers. ESP-IDF cannot keep compatibility with unsupported third-party tools.\n\nThe ESP-IDF Programming Guide has information about the [different versions of ESP-IDF](https://docs.espressif.com/projects/esp-idf/en/latest/versions.html) (major, minor, bugfix, etc).\n\nExample\n-------\n\nESP-IDF V3.3 was released in September 2019. It was supported for 30 months until February 2022.\n\n- The first V3.3 release was `v3.3` in September 2019.\n- The ESP-IDF team continues to backport bug fixes, security fixes, etc to the release branch `release/v3.3`.\n- Periodically stable bugfix releases are created from the release branch. For example `v3.3.1`, `v3.3.2`, etc. Users are encouraged to always update to the latest bugfix release.\n- V3.3 bugfix releases continue until February 2022, when all V3.3.x releases become End of Life.\n\nExisting Releases\n-----------------\n\nESP-IDF release V4.1 and all newer releases will follow this support period policy. The support period for each release will be announced when the release is made.\n\nFor releases made before the current support period policy was announced, the original support periods apply:\n\n* ESP-IDF V4.0.x will be supported until October 2021\n* ESP-IDF V3.3.x will be supported until February 2022\n* ESP-IDF versions before V3.3 are already End of Life.\n\nPolicy History\n--------------\n\n* September 2019. This policy splits ESP-IDF releases into Standard and Long Term Support.\n* July 2020. All releases from now will have the same support period, which is equal to the previous Long Term Support period. Added “In Service” period, during which versions will receive more updates.\n"
        },
        {
          "name": "SUPPORT_POLICY_CN.md",
          "type": "blob",
          "size": 3.3173828125,
          "content": "有关 ESP-IDF 的最新支持政策，详见 [支持期限政策](https://github.com/espressif/esp-idf/blob/master/SUPPORT_POLICY_CN.md)\n\n支持期限政策\n=====================\n\n* [英文版](./SUPPORT_POLICY.md)\n\nESP-IDF 的每个主要版本和次要版本（如 V4.1、V4.2 等）自其首次稳定版本发布之日起将支持 30 个月。\n\n支持意味着 ESP-IDF 团队将会对 GitHub 上的发布分支继续进行 bug 修复、安全修补等，并根据需求定期发布新的 bugfix 版本。\n\n支持周期包括“服务周期“和“维护周期”：\n\n| 周期      | 期限     | 是否建议新项目使用？         |\n| -------     | ------------ | ------------------------------------- |\n| 服务周期     | 12 个月    | 是                                   |\n| 维护周期 | 18 个月    | 否                                    |\n\n在版本的服务周期内，bug 修复版本会较为频繁发布。某些情况下，版本在其服务周期内可能会增加对新功能的支持（这仅适用于需要达到新产品特定规管标准或要求的功能，并且引入新问题的风险极低。）\n\n在版本的维护周期内，版本仍然会继续支持，但仅会对严重问题或安全问题进行 bug 修复。\n\n建议在开始新项目的时候使用处于服务周期的版本。\n\n在某一版本支持期限结束，停止更新维护 (EOL) 前，建议用户升级所有项目至较新的 ESP-IDF 版本。根据《支持期限政策》，我们将停止对 EOL 版本进行 bug 修复。\n\n《支持期限政策》不适用于预发布版本（包括 beta、preview、-rc 和 -dev 版本等）。有时，在发布的版本中存在被标记为 \"Preview\" 的特定功能，则该功能也不在支持期限内。\n\n请确保在最新的软件环境中使用 ESP-IDF。操作系统和其他第三方工具应得到其维护者的支持。ESP-IDF 无法兼容不受支持的第三方工具。\n\n有关 [ESP-IDF 不同版本](https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/versions.html)（主要版本、次要版本、bugfix 版本等）信息，可参阅《ESP-IDF 编程指南》。\n\n示例\n-------\n\nESP-IDF V3.3 于 2019 年 9 月发布，将支持 30 个月至 2022 年 2 月停止。\n\n- V3.3 的首个发布版本为 2019 年 9 月发布的 v3.3。\n- ESP-IDF 团队将持续进行 bug 修复、安全修补等更新，并 backport 至分支 release/v3.3。\n- 定期从 release 分支创建稳定的 bugfix 版本，比如，v3.3.1、v3.3.2 等，并建议用户保持使用最新的 bugfix 版本。\n- V3.3 的 bugfix 版本发布将持续至 2022 年 2 月，届时所有 V3.3.x 将停止更新维护。\n\n现有版本\n-----------------\n\nESP-IDF V4.1 及所有后续更新版本都将遵守该《支持期限政策》。每一版本发布时将同时公布其支持期限。\n\n对于该政策公布之日前发布的版本，应适用下述支持期限：\n\n* ESP-IDF V4.0.x 将支持至 2021 年 10 月。\n* ESP-IDF V3.3.x 将支持至 2022 年 2 月。\n* ESP-IDF v3.3 之前的版本已经停止支持。\n\n政策历史\n--------------\n\n* 2019 年 9 月。该政策将 ESP-IDF 版本发布分为标准支持版本和长期支持版本。\n* 2020 年 7 月。从现在开始，所有发布的版本都将有相同的支持周期，即之前的长期支持周期。新增了”服务周期“，期间版本的更新将较为频繁。\n"
        },
        {
          "name": "add_path.sh",
          "type": "blob",
          "size": 0.7041015625,
          "content": "# This shell snippet appends useful esp-idf tools to your PATH environment\n# variable. This means you can run esp-idf tools without needing to give the\n# full path.\n#\n# Use this script like this:\n#\n# . ${IDF_PATH}/add_path.sh\n#\nif [ -z ${IDF_PATH} ]; then\n\techo \"IDF_PATH must be set before including this script.\"\nelse\n\tIDF_ADD_PATHS_EXTRAS=\"${IDF_PATH}/components/esptool_py/esptool\"\n\tIDF_ADD_PATHS_EXTRAS=\"${IDF_ADD_PATHS_EXTRAS}:${IDF_PATH}/components/espcoredump\"\n\tIDF_ADD_PATHS_EXTRAS=\"${IDF_ADD_PATHS_EXTRAS}:${IDF_PATH}/components/partition_table/\"\n\tIDF_ADD_PATHS_EXTRAS=\"${IDF_ADD_PATHS_EXTRAS}:${IDF_PATH}/tools/\"\n\texport PATH=\"${IDF_ADD_PATHS_EXTRAS}:${PATH}\"\n\techo \"Added to PATH: ${IDF_ADD_PATHS_EXTRAS}\"\nfi\n"
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 17.953125,
          "content": "# SPDX-FileCopyrightText: 2021-2024 Espressif Systems (Shanghai) CO LTD\n# SPDX-License-Identifier: Apache-2.0\n# pylint: disable=W0621  # redefined-outer-name\n#\n# IDF is using [pytest](https://github.com/pytest-dev/pytest) and\n# [pytest-embedded plugin](https://github.com/espressif/pytest-embedded) as its test framework.\n#\n# if you found any bug or have any question,\n# please report to https://github.com/espressif/pytest-embedded/issues\n# or discuss at https://github.com/espressif/pytest-embedded/discussions\nimport os\nimport sys\n\nif os.path.join(os.path.dirname(__file__), 'tools', 'ci') not in sys.path:\n    sys.path.append(os.path.join(os.path.dirname(__file__), 'tools', 'ci'))\n\nif os.path.join(os.path.dirname(__file__), 'tools', 'ci', 'python_packages') not in sys.path:\n    sys.path.append(os.path.join(os.path.dirname(__file__), 'tools', 'ci', 'python_packages'))\n\nimport glob\nimport io\nimport logging\nimport os\nimport re\nimport typing as t\nimport zipfile\nfrom copy import deepcopy\nfrom urllib.parse import quote\n\nimport common_test_methods  # noqa: F401\nimport gitlab_api\nimport pytest\nimport requests\nimport yaml\nfrom _pytest.config import Config\nfrom _pytest.fixtures import FixtureRequest\nfrom artifacts_handler import ArtifactType\nfrom dynamic_pipelines.constants import TEST_RELATED_APPS_DOWNLOAD_URLS_FILENAME\nfrom idf_ci.app import import_apps_from_txt\nfrom idf_ci.uploader import AppDownloader, AppUploader\nfrom idf_ci_utils import IDF_PATH, idf_relpath\nfrom idf_pytest.constants import DEFAULT_SDKCONFIG, ENV_MARKERS, SPECIAL_MARKERS, TARGET_MARKERS, PytestCase, \\\n    DEFAULT_LOGDIR\nfrom idf_pytest.plugin import IDF_PYTEST_EMBEDDED_KEY, ITEM_PYTEST_CASE_KEY, IdfPytestEmbedded\nfrom idf_pytest.utils import format_case_id\nfrom pytest_embedded.plugin import multi_dut_argument, multi_dut_fixture\nfrom pytest_embedded_idf.dut import IdfDut\nfrom pytest_embedded_idf.unity_tester import CaseTester\n\n\n############\n# Fixtures #\n############\n@pytest.fixture(scope='session')\ndef idf_path() -> str:\n    return os.path.dirname(__file__)\n\n\n@pytest.fixture(scope='session')\ndef session_root_logdir(idf_path: str) -> str:\n    \"\"\"Session scoped log dir for pytest-embedded\"\"\"\n    return idf_path\n\n\n@pytest.fixture\ndef case_tester(unity_tester: CaseTester) -> CaseTester:\n    return unity_tester\n\n\n@pytest.fixture\n@multi_dut_argument\ndef config(request: FixtureRequest) -> str:\n    return getattr(request, 'param', None) or DEFAULT_SDKCONFIG  # type: ignore\n\n\n@pytest.fixture\n@multi_dut_fixture\ndef target(request: FixtureRequest, dut_total: int, dut_index: int) -> str:\n    plugin = request.config.stash[IDF_PYTEST_EMBEDDED_KEY]\n\n    if dut_total == 1:\n        return plugin.target[0]  # type: ignore\n\n    return plugin.target[dut_index]  # type: ignore\n\n\n@pytest.fixture\ndef test_func_name(request: FixtureRequest) -> str:\n    return request.node.function.__name__  # type: ignore\n\n\n@pytest.fixture\ndef test_case_name(request: FixtureRequest, target: str, config: str) -> str:\n    is_qemu = request._pyfuncitem.get_closest_marker('qemu') is not None\n    if hasattr(request._pyfuncitem, 'callspec'):\n        params = deepcopy(request._pyfuncitem.callspec.params)  # type: ignore\n    else:\n        params = {}\n\n    filtered_params = {}\n    for k, v in params.items():\n        if k not in request.session._fixturemanager._arg2fixturedefs:  # type: ignore\n            filtered_params[k] = v  # not fixture ones\n\n    return format_case_id(target, config, request.node.originalname, is_qemu=is_qemu, params=filtered_params)  # type: ignore\n\n\n@pytest.fixture(scope='session')\ndef pipeline_id(request: FixtureRequest) -> t.Optional[str]:\n    return request.config.getoption('pipeline_id', None) or os.getenv('PARENT_PIPELINE_ID', None)  # type: ignore\n\n\nclass BuildReportDownloader(AppDownloader):\n    def __init__(self, presigned_url_yaml: str) -> None:\n        self.app_presigned_urls_dict: t.Dict[str, t.Dict[str, str]] = yaml.safe_load(presigned_url_yaml)\n\n    def _download_app(self, app_build_path: str, artifact_type: ArtifactType) -> None:\n        url = self.app_presigned_urls_dict[app_build_path][artifact_type.value]\n\n        logging.info('Downloading app from %s', url)\n        with io.BytesIO() as f:\n            for chunk in requests.get(url).iter_content(chunk_size=1024 * 1024):\n                if chunk:\n                    f.write(chunk)\n\n            f.seek(0)\n\n            with zipfile.ZipFile(f) as zip_ref:\n                zip_ref.extractall(IDF_PATH)\n\n    def download_app(self, app_build_path: str, artifact_type: t.Optional[ArtifactType] = None) -> None:\n        if app_build_path not in self.app_presigned_urls_dict:\n            raise ValueError(\n                f'No presigned url found for {app_build_path}. '\n                f'Usually this should not happen, please re-trigger a pipeline.'\n                f'If this happens again, please report this bug to the CI channel.'\n            )\n\n        super().download_app(app_build_path, artifact_type)\n\n\n@pytest.fixture(scope='session')\ndef app_downloader(pipeline_id: t.Optional[str]) -> t.Optional[AppDownloader]:\n    if not pipeline_id:\n        return None\n\n    if (\n        'IDF_S3_BUCKET' in os.environ\n        and 'IDF_S3_ACCESS_KEY' in os.environ\n        and 'IDF_S3_SECRET_KEY' in os.environ\n        and 'IDF_S3_SERVER' in os.environ\n        and 'IDF_S3_BUCKET' in os.environ\n    ):\n        return AppUploader(pipeline_id)\n\n    logging.info('Downloading build report from the build pipeline %s', pipeline_id)\n    test_app_presigned_urls_file = None\n\n    gl = gitlab_api.Gitlab(os.getenv('CI_PROJECT_ID', 'espressif/esp-idf'))\n\n    for child_pipeline in gl.project.pipelines.get(pipeline_id, lazy=True).bridges.list(iterator=True):\n        if child_pipeline.name == 'build_child_pipeline':\n            for job in gl.project.pipelines.get(child_pipeline.downstream_pipeline['id'], lazy=True).jobs.list(\n                iterator=True\n            ):\n                if job.name == 'generate_pytest_build_report':\n                    test_app_presigned_urls_file = gl.download_artifact(\n                        job.id, [TEST_RELATED_APPS_DOWNLOAD_URLS_FILENAME]\n                    )[0]\n                    break\n\n    if test_app_presigned_urls_file:\n        return BuildReportDownloader(test_app_presigned_urls_file)\n\n    return None\n\n\n@pytest.fixture\n@multi_dut_fixture\ndef build_dir(\n    request: FixtureRequest,\n    app_path: str,\n    target: t.Optional[str],\n    config: t.Optional[str],\n    app_downloader: t.Optional[AppDownloader],\n) -> str:\n    \"\"\"\n    Check local build dir with the following priority:\n\n    1. build_<target>_<config>\n    2. build_<target>\n    3. build_<config>\n    4. build\n\n    Returns:\n        valid build directory\n    \"\"\"\n    # download from minio on CI\n    case: PytestCase = request._pyfuncitem.stash[ITEM_PYTEST_CASE_KEY]\n    if app_downloader:\n        # somehow hardcoded...\n        app_build_path = os.path.join(idf_relpath(app_path), f'build_{target}_{config}')\n        if case.requires_elf_or_map:\n            app_downloader.download_app(app_build_path)\n        else:\n            app_downloader.download_app(app_build_path, ArtifactType.BUILD_DIR_WITHOUT_MAP_AND_ELF_FILES)\n        check_dirs = [f'build_{target}_{config}']\n    else:\n        check_dirs = []\n        build_dir_arg = request.config.getoption('build_dir', None)\n        if build_dir_arg:\n            check_dirs.append(build_dir_arg)\n        if target is not None and config is not None:\n            check_dirs.append(f'build_{target}_{config}')\n        if target is not None:\n            check_dirs.append(f'build_{target}')\n        if config is not None:\n            check_dirs.append(f'build_{config}')\n        check_dirs.append('build')\n\n    for check_dir in check_dirs:\n        binary_path = os.path.join(app_path, check_dir)\n        if os.path.isdir(binary_path):\n            logging.info(f'found valid binary path: {binary_path}')\n            return check_dir\n\n        logging.warning('checking binary path: %s... missing... try another place', binary_path)\n\n    raise ValueError(\n        f'no build dir valid. Please build the binary via \"idf.py -B {check_dirs[0]} build\" and run pytest again'\n    )\n\n\n@pytest.fixture(autouse=True)\n@multi_dut_fixture\ndef junit_properties(test_case_name: str, record_xml_attribute: t.Callable[[str, object], None]) -> None:\n    \"\"\"\n    This fixture is autoused and will modify the junit report test case name to <target>.<config>.<case_name>\n    \"\"\"\n    record_xml_attribute('name', test_case_name)\n\n\n@pytest.fixture(autouse=True)\n@multi_dut_fixture\ndef ci_job_url(record_xml_attribute: t.Callable[[str, object], None]) -> None:\n    if ci_job_url := os.getenv('CI_JOB_URL'):\n        record_xml_attribute('ci_job_url', ci_job_url)\n\n\n@pytest.fixture(autouse=True)\ndef set_test_case_name(request: FixtureRequest, test_case_name: str) -> None:\n    request.node.funcargs['test_case_name'] = test_case_name\n\n\n@pytest.fixture(autouse=True)\ndef set_dut_log_url(record_xml_attribute: t.Callable[[str, object], None], _pexpect_logfile: str) -> t.Generator:\n    # Record the \"dut_log_url\" attribute in the XML report once test execution finished\n    yield\n\n    if not isinstance(_pexpect_logfile, str):\n        record_xml_attribute('dut_log_url', 'No log URL found')\n        return\n\n    ci_pages_url = os.getenv('CI_PAGES_URL')\n    logdir_pattern = re.compile(rf'({DEFAULT_LOGDIR}/.*)')\n    match = logdir_pattern.search(_pexpect_logfile)\n\n    if not match:\n        record_xml_attribute('dut_log_url', 'No log URL found')\n        return\n\n    if not ci_pages_url:\n        record_xml_attribute('dut_log_url', _pexpect_logfile)\n        return\n\n    job_id = os.getenv('CI_JOB_ID', '0')\n    modified_ci_pages_url = ci_pages_url.replace('esp-idf', '-/esp-idf')\n    log_url = f'{modified_ci_pages_url}/-/jobs/{job_id}/artifacts/{match.group(1)}'\n\n    record_xml_attribute('dut_log_url', log_url)\n\n\n######################\n# Log Util Functions #\n######################\n@pytest.fixture\ndef log_performance(record_property: t.Callable[[str, object], None]) -> t.Callable[[str, str], None]:\n    \"\"\"\n    log performance item with pre-defined format to the console\n    and record it under the ``properties`` tag in the junit report if available.\n    \"\"\"\n\n    def real_func(item: str, value: str) -> None:\n        \"\"\"\n        :param item: performance item name\n        :param value: performance value\n        \"\"\"\n        logging.info('[Performance][%s]: %s', item, value)\n        record_property(item, value)\n\n    return real_func\n\n\n@pytest.fixture\ndef check_performance(idf_path: str) -> t.Callable[[str, float, str], None]:\n    \"\"\"\n    check if the given performance item meets the passing standard or not\n    \"\"\"\n\n    def real_func(item: str, value: float, target: str) -> None:\n        \"\"\"\n        :param item: performance item name\n        :param value: performance item value\n        :param target: target chip\n        :raise: AssertionError: if check fails\n        \"\"\"\n\n        def _find_perf_item(operator: str, path: str) -> float:\n            with open(path, encoding='utf-8') as f:\n                data = f.read()\n            match = re.search(fr'#define\\s+IDF_PERFORMANCE_{operator}_{item.upper()}\\s+([\\d.]+)', data)\n            return float(match.group(1))  # type: ignore\n\n        def _check_perf(operator: str, standard_value: float) -> None:\n            if operator == 'MAX':\n                ret = value <= standard_value\n            else:\n                ret = value >= standard_value\n            if not ret:\n                raise AssertionError(\n                    f\"[Performance] {item} value is {value}, doesn't meet pass standard {standard_value}\"\n                )\n\n        path_prefix = os.path.join(idf_path, 'components', 'idf_test', 'include')\n        performance_files = (\n            os.path.join(path_prefix, target, 'idf_performance_target.h'),\n            os.path.join(path_prefix, 'idf_performance.h'),\n        )\n\n        found_item = False\n        for op in ['MIN', 'MAX']:\n            for performance_file in performance_files:\n                try:\n                    standard = _find_perf_item(op, performance_file)\n                except (OSError, AttributeError):\n                    # performance file doesn't exist or match is not found in it\n                    continue\n\n                _check_perf(op, standard)\n                found_item = True\n                break\n\n        if not found_item:\n            raise AssertionError(f'Failed to get performance standard for {item}')\n\n    return real_func\n\n\n@pytest.fixture\ndef log_minimum_free_heap_size(dut: IdfDut, config: str, idf_path: str) -> t.Callable[..., None]:\n    def real_func() -> None:\n        res = dut.expect(r'Minimum free heap size: (\\d+) bytes')\n        logging.info(\n            '\\n------ heap size info ------\\n'\n            '[app_path] {}\\n'\n            '[app_name] {}\\n'\n            '[config_name] {}\\n'\n            '[target] {}\\n'\n            '[minimum_free_heap_size] {} Bytes\\n'\n            '------ heap size end ------'.format(\n                dut.app.app_path.replace(idf_path, '').lstrip('/\\\\'),\n                os.path.basename(dut.app.app_path),\n                config,\n                dut.target,\n                res.group(1).decode('utf8'),\n            )\n        )\n\n    return real_func\n\n\n@pytest.fixture(scope='session')\ndef dev_password(request: FixtureRequest) -> str:\n    return request.config.getoption('dev_passwd') or ''\n\n\n@pytest.fixture(scope='session')\ndef dev_user(request: FixtureRequest) -> str:\n    return request.config.getoption('dev_user') or ''\n\n\n##################\n# Hook functions #\n##################\ndef pytest_addoption(parser: pytest.Parser) -> None:\n    idf_group = parser.getgroup('idf')\n    idf_group.addoption(\n        '--sdkconfig',\n        help='sdkconfig postfix, like sdkconfig.ci.<config>. (Default: None, which would build all found apps)',\n    )\n    idf_group.addoption(\n        '--dev-user',\n        help='user name associated with some specific device/service used during the test execution',\n    )\n    idf_group.addoption(\n        '--dev-passwd',\n        help='password associated with some specific device/service used during the test execution',\n    )\n    idf_group.addoption(\n        '--app-info-filepattern',\n        help='glob pattern to specify the files that include built app info generated by '\n        '`idf-build-apps --collect-app-info ...`. will not raise ValueError when binary '\n        'paths not exist in local file system if not listed recorded in the app info.',\n    )\n    idf_group.addoption(\n        '--pipeline-id',\n        help='main pipeline id, not the child pipeline id. Specify this option to download the artifacts '\n        'from the minio server for debugging purpose.',\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    # cli option \"--target\"\n    target = [_t.strip().lower() for _t in (config.getoption('target', '') or '').split(',') if _t.strip()]\n\n    # add markers based on idf_pytest/constants.py\n    for name, description in {\n        **TARGET_MARKERS,\n        **ENV_MARKERS,\n        **SPECIAL_MARKERS,\n    }.items():\n        config.addinivalue_line('markers', f'{name}: {description}')\n\n    help_commands = ['--help', '--fixtures', '--markers', '--version']\n    for cmd in help_commands:\n        if cmd in config.invocation_params.args:\n            target = ['unneeded']\n            break\n\n    markexpr = config.getoption('markexpr') or ''\n    # check marker expr set via \"pytest -m\"\n    if not target and markexpr:\n        # we use `-m \"esp32 and generic\"` in our CI to filter the test cases\n        # this doesn't cover all use cases, but fit what we do in CI.\n        for marker in markexpr.split('and'):\n            marker = marker.strip()\n            if marker in TARGET_MARKERS:\n                target.append(marker)\n\n    # \"--target\" must be set\n    if not target:\n        raise SystemExit(\n            \"\"\"Pass `--target TARGET[,TARGET...]` to specify all targets the test cases are using.\n    - for single DUT, we run with `pytest --target esp32`\n    - for multi DUT, we run with `pytest --target esp32,esp32,esp32s2` to indicate all DUTs\n\"\"\"\n        )\n\n    apps = None\n    app_info_filepattern = config.getoption('app_info_filepattern')\n    if app_info_filepattern:\n        apps = []\n        for f in glob.glob(os.path.join(IDF_PATH, app_info_filepattern)):\n            apps.extend(import_apps_from_txt(f))\n\n    if '--collect-only' not in config.invocation_params.args:\n        config.stash[IDF_PYTEST_EMBEDDED_KEY] = IdfPytestEmbedded(\n            config_name=config.getoption('sdkconfig'),\n            target=target,\n            apps=apps,\n        )\n        config.pluginmanager.register(config.stash[IDF_PYTEST_EMBEDDED_KEY])\n\n\ndef pytest_unconfigure(config: Config) -> None:\n    _pytest_embedded = config.stash.get(IDF_PYTEST_EMBEDDED_KEY, None)\n    if _pytest_embedded:\n        del config.stash[IDF_PYTEST_EMBEDDED_KEY]\n        config.pluginmanager.unregister(_pytest_embedded)\n\n\ndut_artifacts_url = []\n\n\n@pytest.hookimpl(hookwrapper=True)\ndef pytest_runtest_makereport(item, call):  # type: ignore\n    outcome = yield\n    report = outcome.get_result()\n    report.sections = []\n    if report.failed:\n        _dut = item.funcargs.get('dut')\n        if not _dut:\n            return\n\n        job_id = os.getenv('CI_JOB_ID', 0)\n        url = os.getenv('CI_PAGES_URL', '').replace('esp-idf', '-/esp-idf')\n        template = f'{url}/-/jobs/{job_id}/artifacts/{DEFAULT_LOGDIR}/{{}}'\n        logs_files = []\n\n        def get_path(x: str) -> str:\n            return x.split(f'{DEFAULT_LOGDIR}/', 1)[1]\n\n        if isinstance(_dut, list):\n            logs_files.extend([template.format(get_path(d.logfile)) for d in _dut])\n            dut_artifacts_url.append('{}:'.format(_dut[0].test_case_name))\n        else:\n            logs_files.append(template.format(get_path(_dut.logfile)))\n            dut_artifacts_url.append('{}:'.format(_dut.test_case_name))\n\n        for file in logs_files:\n            dut_artifacts_url.append('    - {}'.format(quote(file, safe=':/')))\n\n\ndef pytest_terminal_summary(terminalreporter, exitstatus, config):  # type: ignore\n    if dut_artifacts_url:\n        terminalreporter.ensure_newline()\n        terminalreporter.section('Failed Test Artifacts URL', sep='-', red=True, bold=True)\n        terminalreporter.line('\\n'.join(dut_artifacts_url))\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "export.bat",
          "type": "blob",
          "size": 2.0302734375,
          "content": "@echo off\nif defined MSYSTEM (\n    echo This .bat file is for Windows CMD.EXE shell only.\n    goto :eof\n)\n\nset SCRIPT_EXIT_CODE=0\n\n:: Emergency backup option to use previous export.bat (export_legacy.bat) if the new export approach fails.\n:: To use it, set environmental variable like: set ESP_IDF_LEGACY_EXPORT=1\nif not \"%ESP_IDF_LEGACY_EXPORT%\"==\"\" (\n    tools\\legacy_exports\\export_legacy.bat\n    set SCRIPT_EXIT_CODE=%errorlevel%\n    goto :eof\n)\n\n:: Missing requirements check\nset MISSING_REQUIREMENTS=\npython.exe --version >NUL 2>NUL\nif %errorlevel% neq 0 (\n    set SCRIPT_EXIT_CODE=%errorlevel%\n    set \"MISSING_REQUIREMENTS=  python &echo\\\"\n)\ngit.exe --version >NUL 2>NUL\nif %errorlevel% neq 0 (\n    set SCRIPT_EXIT_CODE=%errorlevel%\n    set \"MISSING_REQUIREMENTS=%MISSING_REQUIREMENTS%  git\"\n)\n\nif not \"%MISSING_REQUIREMENTS%\" == \"\" goto :__error_missing_requirements\n\n:: Infer IDF_PATH from script location\nset IDF_PATH=%~dp0\nset IDF_PATH=%IDF_PATH:~0,-1%\n\nif not exist \"%IDF_PATH%\\tools\\idf.py\" (\n    set SCRIPT_EXIT_CODE=1\n    goto :__missing_file\n)\nif not exist \"%IDF_PATH%\\tools\\idf_tools.py\" (\n    set SCRIPT_EXIT_CODE=1\n    goto :__missing_file\n)\nif not exist \"%IDF_PATH%\\tools\\activate.py\" (\n    set SCRIPT_EXIT_CODE=1\n    goto :__missing_file\n)\n\n\nfor /f \"delims=\" %%i in ('python \"%IDF_PATH%\\tools\\activate.py\" --export') do set activate=%%i\n%activate%\n\ngoto :__end\n\n:__error_missing_requirements\n    echo.\n    echo Error^: The following tools are not installed in your environment.\n    echo.\n    echo %MISSING_REQUIREMENTS%\n    echo.\n    echo Please use the Windows Tool installer for setting up your environment.\n    echo Download link: https://dl.espressif.com/dl/esp-idf/\n    echo For more details please visit our website: https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/windows-setup.html\n    goto :__end\n\n:__missing_file\n    echo Could not detect IDF_PATH. Please navigate to your ESP-IDF directory and run:\n    echo export.bat\n    goto :__end\n\n:__end\n:: Clean up\nset MISSING_REQUIREMENTS=\nset activate=\nexit /b %SCRIPT_EXIT_CODE%\n"
        },
        {
          "name": "export.fish",
          "type": "blob",
          "size": 0.943359375,
          "content": "# This script should be sourced, not executed.\n\n# `idf_tools.py export --deactivate` create statement, with keyword unset, but fish shell support only `set --erase variable`\nfunction unset\n    set --erase $argv\nend\n\n# Emergency backup option to use previous export.fish (export_legacy.fish) if the new export approach fails.\n# To use it, set environmental variable like: export ESP_IDF_LEGACY_EXPORT=1\nif test -n \"$ESP_IDF_LEGACY_EXPORT\"\n   source tools/legacy_exports/export_legacy.fish\n   exit $status\nend\n\nset idf_path (dirname (realpath (status -f)))\n\nif not test -f \"$idf_path/tools/idf.py\"\n   or not test -f \"$idf_path/tools/idf_tools.py\"\n   or not test -f \"$idf_path/tools/activate.py\"\n    echo \"Could not detect IDF_PATH. Please navigate to your ESP-IDF directory and run:\"\n    echo \". ./export.fish\"\n    set -e idf_path\n    exit 1\nend\n\nsource \"$idf_path\"/tools/detect_python.fish\n\neval (\"$ESP_PYTHON\" \"$idf_path\"/tools/activate.py --export)\nset -e idf_path\n"
        },
        {
          "name": "export.ps1",
          "type": "blob",
          "size": 0.84375,
          "content": "#!/usr/bin/env pwsh\n\n# Emergency backup option to use previous export.ps1 (export_legacy.ps1) if the new export approach fails.\n# To use it, set environmental variable like: $Env:ESP_IDF_LEGACY_EXPORT=1\nif ($env:ESP_IDF_LEGACY_EXPORT) {\n    . ./tools/legacy_exports/export_legacy.ps1\n    exit $LASTEXITCODE\n}\n\n$idf_path = \"$PSScriptRoot\"\n\nif (-not (Test-Path \"$idf_path/tools/idf.py\") -or\n    -not (Test-Path \"$idf_path/tools/idf_tools.py\") -or\n    -not (Test-Path \"$idf_path/tools/activate.py\")) {\n\n    Write-Output \"Could not detect IDF_PATH. Please navigate to your ESP-IDF directory and run:\"\n    Write-Output \".\\export.ps1\"\n\n    $env:IDF_PATH = \"\"\n\n    exit 1\n}\n\n$idf_exports = python \"$idf_path/tools/activate.py\" --export\n# The dot sourcing is added here in PowerShell since\n# Win PSAnalyzer complains about using `Invoke-Expression` command\n. $idf_exports\n"
        },
        {
          "name": "export.sh",
          "type": "blob",
          "size": 2.1953125,
          "content": "# This script should be sourced, not executed.\n\n# Emergency backup option to use previous export.sh (export_legacy.sh) if the new export approach fails.\n# To use it, set environmental variable like: export ESP_IDF_LEGACY_EXPORT=1\nif [ -n \"${ESP_IDF_LEGACY_EXPORT-}\" ]; then\n    . ./tools/legacy_exports/export_legacy.sh\n    return $?\nfi\n\n# shellcheck disable=SC2128,SC2169,SC2039,SC3054 # ignore array expansion warning\nif [ -n \"${BASH_SOURCE-}\" ] && [ \"${BASH_SOURCE[0]}\" = \"${0}\" ]\nthen\n    echo \"This script should be sourced, not executed:\"\n    # shellcheck disable=SC2039,SC3054  # reachable only with bash\n    echo \". ${BASH_SOURCE[0]}\"\n    exit 1\nfi\n\n# Attempt to identify the ESP-IDF directory\nidf_path=\".\"\n\nshell_type=\"detect\"\n\n# shellcheck disable=SC2128,SC2169,SC2039,SC3054,SC3028 # ignore array expansion warning\nif [ -n \"${BASH_SOURCE-}\" ]\nthen\n    # shellcheck disable=SC3028,SC3054 # unreachable with 'dash'\n    idf_path=$(dirname \"${BASH_SOURCE[0]}\")\n    shell_type=\"bash\"\nelif [ -n \"${ZSH_VERSION-}\" ]\nthen\n    # shellcheck disable=SC2296  # ignore parameter starts with '{' because it's zsh\n    idf_path=$(dirname \"${(%):-%x}\")\n    shell_type=\"zsh\"\nelif [ -n \"${IDF_PATH-}\" ]\nthen\n    if [ -f \"/.dockerenv\" ]\n    then\n        echo \"Using the IDF_PATH found in the environment as docker environment detected.\"\n        idf_path=$IDF_PATH\n    elif [ -n \"${IDF_PATH_FORCE-}\" ]\n    then\n        echo \"Using the forced IDF_PATH found in the environment.\"\n        idf_path=$IDF_PATH\n    fi\nfi\n\nif [ ! -f \"${idf_path}/tools/idf.py\" ] ||\n   [ ! -f \"${idf_path}/tools/idf_tools.py\" ] ||\n   [ ! -f \"${idf_path}/tools/activate.py\" ]\nthen\n    echo \"Could not automatically detect IDF_PATH from script location. Please navigate to your ESP-IDF directory and run:\"\n    echo \". ./export.sh\"\n    if [ -n \"${IDF_PATH-}\" ]\n    then\n        echo\n        echo \"To use the IDF_PATH set in the environment, you can enforce it by setting 'export IDF_PATH_FORCE=1'\"\n    fi\n    unset idf_path\n    return 1\nfi\n\n. \"${idf_path}/tools/detect_python.sh\"\n\n# Evaluate the ESP-IDF environment set up by the activate.py script.\nidf_exports=$(\"$ESP_PYTHON\" \"${idf_path}/tools/activate.py\" --export --shell $shell_type)\neval \"${idf_exports}\"\nunset idf_path\nreturn 0\n"
        },
        {
          "name": "install.bat",
          "type": "blob",
          "size": 2.1513671875,
          "content": "@echo off\nif defined MSYSTEM (\n\techo This .bat file is for Windows CMD.EXE shell only.\n\tgoto :__end\n)\n:: Set local ensures that variables like IDF_PATH are not changed/propagated out of the script\nsetlocal\n\nset SCRIPT_EXIT_CODE=0\n\n:: Missing requirements check\nset MISSING_REQUIREMENTS=\npython.exe --version >NUL 2>NUL\nif %errorlevel% neq 0 (\n    set SCRIPT_EXIT_CODE=%errorlevel%\n    set \"MISSING_REQUIREMENTS=  python &echo\\\"\n)\ngit.exe --version >NUL 2>NUL\nif %errorlevel% neq 0 (\n    set SCRIPT_EXIT_CODE=%errorlevel%\n    set \"MISSING_REQUIREMENTS=%MISSING_REQUIREMENTS%  git\"\n)\n\nif not \"%MISSING_REQUIREMENTS%\" == \"\" goto :__error_missing_requirements\n\n:: Infer IDF_PATH from script location\nset IDF_PATH=%~dp0\nset IDF_PATH=%IDF_PATH:~0,-1%\n\n:: Print help if requested\nif /I \"%1\" == \"/?\" goto :__help\nif /I \"%1\" == \"-h\" goto :__help\nif /I \"%1\" == \"--help\" goto :__help\n\necho INFO: Using IDF_PATH '%IDF_PATH%' for installation.\n\nfor /f \"delims=\" %%i in ('python.exe \"%IDF_PATH%\\tools\\install_util.py\" extract targets \"%*\"') do set TARGETS=%%i\n\necho Installing ESP-IDF tools\npython.exe \"%IDF_PATH%\\tools\\idf_tools.py\" install --targets=%TARGETS%\nif %errorlevel% neq 0 (\n    set SCRIPT_EXIT_CODE=%errorlevel%\n    goto :__end\n)\n\nfor /f \"delims=\" %%i in ('python.exe \"%IDF_PATH%\\tools\\install_util.py\" extract features \"%*\"') do set FEATURES=%%i\n\necho Setting up Python environment\npython.exe \"%IDF_PATH%\\tools\\idf_tools.py\" install-python-env --features=%FEATURES%\nif %errorlevel% neq 0 (\n    set SCRIPT_EXIT_CODE=%errorlevel%\n    goto :__end\n)\n\necho All done! You can now run:\necho    export.bat\ngoto :__end\n\n:__error_missing_requirements\n    echo.\n    echo Error^: The following tools are not installed in your environment.\n    echo.\n    echo %MISSING_REQUIREMENTS%\n    echo.\n    echo Please use the Windows Tool installer for setting up your environment.\n    echo Download link: https://dl.espressif.com/dl/esp-idf/\n    echo For more details please visit our website: https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/windows-setup.html\n    goto :__end\n\n:__help\n    python.exe \"%IDF_PATH%\\tools\\install_util.py\" print_help bat\n    goto :__end\n\n:__end\nexit /b %SCRIPT_EXIT_CODE%\n"
        },
        {
          "name": "install.fish",
          "type": "blob",
          "size": 1.015625,
          "content": "#!/usr/bin/env fish\n\nset basedir (realpath (dirname (status -f)))\n\nset -x IDF_PATH $basedir\n\necho \"INFO: Using IDF_PATH '$IDF_PATH' for installation.\"\n\necho \"Detecting the Python interpreter\"\nsource \"$IDF_PATH\"/tools/detect_python.fish\n\necho \"Checking Python compatibility\"\n\"$ESP_PYTHON\" \"$IDF_PATH\"/tools/python_version_checker.py\n\nfor option in $argv\n    switch \"$option\"\n        case -h --help\n            \"$ESP_PYTHON\" \"$IDF_PATH\"/tools/install_util.py print_help fish\n            exit\n    end\nend\n\nset TARGETS (\"$ESP_PYTHON\" \"$IDF_PATH\"/tools/install_util.py extract targets $argv) || exit 1\n\necho \"Installing ESP-IDF tools\"\n\"$ESP_PYTHON\" \"$IDF_PATH\"/tools/idf_tools.py install --targets=$TARGETS\nor exit 1\n\nset FEATURES (\"$ESP_PYTHON\" \"$IDF_PATH\"/tools/install_util.py extract features $argv) || exit 1\n\necho \"Installing Python environment and packages\"\n\"$ESP_PYTHON\" \"$IDF_PATH\"/tools/idf_tools.py install-python-env --features=$FEATURES || exit 1\n\necho \"All done! You can now run:\"\necho \"\"\necho \"  . \"$basedir\"/export.fish\"\necho \"\"\n"
        },
        {
          "name": "install.ps1",
          "type": "blob",
          "size": 1.453125,
          "content": "#!/usr/bin/env pwsh\n\nparam(\n    [Switch]$h\n)\n\n$IDF_PATH = $PSScriptRoot\n\nif($h){\npython \"$IDF_PATH/tools/install_util.py\" print_help ps1\nExit\n}\n\nWrite-Output \"INFO: Using IDF_PATH '$IDF_PATH' for installation.\"\n\n$TARGETS = (python \"$IDF_PATH/tools/install_util.py\" extract targets \"$args\")\n\nWrite-Output \"Installing ESP-IDF tools\"\n# PowerShell does not propagate variables to new process (spawned python), so we pass detected IDF_PATH as argument\n# to avoid using any previously set IDF_PATH values in the terminal environment.\n$proces_tools = Start-Process -Wait -PassThru -NoNewWindow -FilePath \"python\" -Args \"`\"$IDF_PATH/tools/idf_tools.py`\" --idf-path ${IDF_PATH} install --targets=${TARGETS}\"\n$exit_code_tools = $proces_tools.ExitCode\nif ($exit_code_tools -ne 0) { exit $exit_code_tools }  # if error\n\n$FEATURES = (python \"$IDF_PATH/tools/install_util.py\" extract features \"$args\")\n\nWrite-Output \"Setting up Python environment\"\n# PowerShell does not propagate variables to new process (spawned python), so we pass detected IDF_PATH as argument\n# to avoid using any previously set IDF_PATH values in the terminal environment.\n$proces_py_env = Start-Process -Wait -PassThru -NoNewWindow -FilePath \"python\" -Args \"`\"$IDF_PATH/tools/idf_tools.py`\" --idf-path ${IDF_PATH} install-python-env --features=${FEATURES}\"\n$exit_code_py_env = $proces_py_env.ExitCode\nif ($exit_code_py_env -ne 0) { exit $exit_code_py_env } # if error\n\n\nWrite-Output \"\nAll done! You can now run:\n    export.ps1\n\"\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.0400390625,
          "content": "#!/usr/bin/env bash\n\nset -e\nset -u\n\nbasedir=$(dirname \"$0\")\nIDF_PATH=$(cd \"${basedir}\"; pwd -P)\nexport IDF_PATH\n\necho \"INFO: Using IDF_PATH '${IDF_PATH}' for installation.\"\n\necho \"Detecting the Python interpreter\"\n. \"${IDF_PATH}/tools/detect_python.sh\"\n\necho \"Checking Python compatibility\"\n\"${ESP_PYTHON}\" \"${IDF_PATH}/tools/python_version_checker.py\"\n\nwhile getopts \":h\" option; do\n    case $option in\n        h)\n            \"${ESP_PYTHON}\" \"${IDF_PATH}/tools/install_util.py\" print_help sh\n            exit;;\n        \\?)\n            ;;\n    esac\ndone\n\nTARGETS=$(\"${ESP_PYTHON}\" \"${IDF_PATH}/tools/install_util.py\" extract targets \"$@\")\n\necho \"Installing ESP-IDF tools\"\n\"${ESP_PYTHON}\" \"${IDF_PATH}/tools/idf_tools.py\" install --targets=\"${TARGETS}\"\n\nFEATURES=$(\"${ESP_PYTHON}\" \"${IDF_PATH}/tools/install_util.py\" extract features \"$@\")\n\necho \"Installing Python environment and packages\"\n\"${ESP_PYTHON}\" \"${IDF_PATH}/tools/idf_tools.py\" install-python-env --features=\"${FEATURES}\"\n\necho \"All done! You can now run:\"\necho \"\"\necho \"  . ${basedir}/export.sh\"\necho \"\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.9326171875,
          "content": "[pytest]\n# only the files with prefix `pytest_` would be recognized as pytest test scripts.\npython_files = pytest_*.py\n\n# ignore PytestExperimentalApiWarning for record_xml_attribute\n# set traceback to \"short\" to prevent the overwhelming tracebacks\naddopts =\n  -s -vv\n  --embedded-services esp,idf\n  --tb short\n  --strict-markers\n  --skip-check-coredump y\n  --logfile-extension \".txt\"\n  --check-duplicates y\n  --ignore-glob */managed_components/*\n  --ignore pytest-embedded\n\n# ignore DeprecationWarning\nfilterwarnings =\n  ignore::DeprecationWarning:matplotlib.*:\n  ignore::DeprecationWarning:google.protobuf.*:\n  ignore::_pytest.warning_types.PytestExperimentalApiWarning\n\n# log related\nlog_cli = True\nlog_cli_level = INFO\nlog_cli_format = %(asctime)s %(levelname)s %(message)s\nlog_cli_date_format = %Y-%m-%d %H:%M:%S\n\n# junit related\njunit_family = xunit1\n\n## log all to `system-out` when case fail\njunit_logging = stdout\njunit_log_passing_tests = False\n"
        },
        {
          "name": "sdkconfig.rename",
          "type": "blob",
          "size": 1.99609375,
          "content": "# sdkconfig replacement configurations for deprecated options formatted as\n# CONFIG_DEPRECATED_OPTION CONFIG_NEW_OPTION\n\n# Compiler options\nCONFIG_OPTIMIZATION_COMPILER                  CONFIG_COMPILER_OPTIMIZATION\nCONFIG_OPTIMIZATION_LEVEL_DEBUG               CONFIG_COMPILER_OPTIMIZATION_DEBUG\nCONFIG_OPTIMIZATION_LEVEL_RELEASE             CONFIG_COMPILER_OPTIMIZATION_SIZE\nCONFIG_COMPILER_OPTIMIZATION_LEVEL_DEBUG      CONFIG_COMPILER_OPTIMIZATION_DEBUG\nCONFIG_COMPILER_OPTIMIZATION_DEFAULT          CONFIG_COMPILER_OPTIMIZATION_DEBUG\nCONFIG_COMPILER_OPTIMIZATION_LEVEL_RELEASE    CONFIG_COMPILER_OPTIMIZATION_SIZE\nCONFIG_OPTIMIZATION_ASSERTION_LEVEL           CONFIG_COMPILER_OPTIMIZATION_ASSERTION_LEVEL\nCONFIG_OPTIMIZATION_ASSERTIONS_ENABLED        CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_ENABLE\nCONFIG_OPTIMIZATION_ASSERTIONS_SILENT         CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_SILENT\nCONFIG_OPTIMIZATION_ASSERTIONS_DISABLED       CONFIG_COMPILER_OPTIMIZATION_ASSERTIONS_DISABLE\nCONFIG_CXX_EXCEPTIONS                         CONFIG_COMPILER_CXX_EXCEPTIONS\nCONFIG_CXX_EXCEPTIONS_EMG_POOL_SIZE           CONFIG_COMPILER_CXX_EXCEPTIONS_EMG_POOL_SIZE\nCONFIG_STACK_CHECK_MODE                       CONFIG_COMPILER_STACK_CHECK_MODE\nCONFIG_STACK_CHECK_NONE                       CONFIG_COMPILER_STACK_CHECK_MODE_NONE\nCONFIG_STACK_CHECK_NORM                       CONFIG_COMPILER_STACK_CHECK_MODE_NORM\nCONFIG_STACK_CHECK_STRONG                     CONFIG_COMPILER_STACK_CHECK_MODE_STRONG\nCONFIG_STACK_CHECK_ALL                        CONFIG_COMPILER_STACK_CHECK_MODE_ALL\nCONFIG_STACK_CHECK                            CONFIG_COMPILER_STACK_CHECK\nCONFIG_WARN_WRITE_STRINGS                     CONFIG_COMPILER_WARN_WRITE_STRINGS\nCONFIG_NO_BLOBS                               CONFIG_APP_NO_BLOBS\nCONFIG_ESP32_COMPATIBLE_PRE_V2_1_BOOTLOADERS  CONFIG_APP_COMPATIBLE_PRE_V2_1_BOOTLOADERS\nCONFIG_ESP32_COMPATIBLE_PRE_V3_1_BOOTLOADERS  CONFIG_APP_COMPATIBLE_PRE_V3_1_BOOTLOADERS\nCONFIG_APP_BUILD_TYPE_ELF_RAM                 CONFIG_APP_BUILD_TYPE_RAM\n"
        },
        {
          "name": "sgconfig.yml",
          "type": "blob",
          "size": 0.03125,
          "content": "ruleDirs:\n  - tools/ci/sg_rules\n"
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 0.517578125,
          "content": "sonar.projectKey=esp-idf\nsonar.projectName=Espressif IoT Development Framework\nsonar.projectVersion=4.4\n\nsonar.sources=.\nsonar.sourceEncoding=UTF-8\n\nsonar.inclusions=\\\n  **/*.c,**/*.cpp,**/*.h,**/*.hpp,\\\n  **/*.py\n\n####################\n# sonar-cxx-plugin #\n####################\n\nsonar.cxx.includeDirectories=/usr/include\nsonar.cxx.file.suffixes=.cxx,.cpp,.cc,.c,.hxx,.hpp,.hh,.h\n\n#######################\n# sonar-gitlab-plugin #\n#######################\n\nsonar.gitlab.failure_notification_mode=exit-code\nsonar.gitlab.project_id=103\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}