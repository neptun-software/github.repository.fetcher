{
  "metadata": {
    "timestamp": 1736710443824,
    "page": 88,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libsdl-org/SDL",
      "stars": 10799,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.1728515625,
          "content": "---\nAlignConsecutiveMacros: Consecutive\nAlignConsecutiveAssignments: None\nAlignConsecutiveBitFields: None\nAlignConsecutiveDeclarations: None\nAlignEscapedNewlines: Right\nAlignOperands: Align\nAlignTrailingComments: true\n\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortEnumsOnASingleLine: true\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\n\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\n\n# Custom brace breaking\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterCaseLabel: true\n  AfterClass: true\n  AfterControlStatement: Never\n  AfterEnum: true\n  AfterFunction: true\n  AfterNamespace: true\n  AfterObjCDeclaration: true\n  AfterStruct: true\n  AfterUnion: true\n  AfterExternBlock: false\n  BeforeElse: false\n  BeforeWhile: false\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n\n# Make the closing brace of container literals go to a new line\nCpp11BracedListStyle: false\n\n# Never format includes\nIncludeBlocks: Preserve\n# clang-format version 4.0 through 12.0:\n#SortIncludes: false\n# clang-format version 13.0+:\n#SortIncludes: Never\n\n# No length limit, in case it breaks macros, you can\n# disable it with /* clang-format off/on */ comments\nColumnLimit: 0\n\nIndentWidth: 4\nContinuationIndentWidth: 4\nIndentCaseLabels: false\nIndentCaseBlocks: false\nIndentGotoLabels: true\nIndentPPDirectives: None\nIndentExternBlock: NoIndent\n\nPointerAlignment: Right\nSpaceAfterCStyleCast: false\nSpacesInCStyleCastParentheses: false\nSpacesInConditionalStatement: false\nSpacesInContainerLiterals: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeParens: ControlStatements\nSpaceAroundPointerQualifiers: Default\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\n\nUseCRLF: false\nUseTab: Never\n\nForEachMacros:\n  [\n    \"spa_list_for_each\",\n    \"spa_list_for_each_safe\",\n    \"wl_list_for_each\",\n    \"wl_list_for_each_safe\",\n    \"wl_array_for_each\",\n    \"udev_list_entry_foreach\",\n  ]\n\n---\n\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 1.9443359375,
          "content": "---\nChecks: >\n  -*,\n  bugprone-assert-side-effect,\n  bugprone-assignment-in-if-condition,\n  bugprone-bool-pointer-implicit-conversion,\n  bugprone-dangling-handle,\n  bugprone-dynamic-static-initializers,\n  bugprone-infinite-loop,\n  bugprone-integer-division,\n  bugprone-macro-repeated-side-effects,\n  bugprone-misplaced-operator-in-strlen-in-alloc,\n  bugprone-misplaced-pointer-arithmetic-in-alloc,\n  bugprone-misplaced-widening-cast,\n  bugprone-not-null-terminated-result,\n  bugprone-posix-return,\n  bugprone-redundant-branch-condition,\n  bugprone-string-literal-with-embedded-nul,\n  bugprone-suspicious-memset-usage,\n  bugprone-suspicious-semicolon,\n  bugprone-suspicious-string-compare,\n  bugprone-too-small-loop-variable,\n  bugprone-unused-return-value,\n  cert-err33-c,\n  clang-analyzer-core.*,\n  clang-analyzer-valist.*,\n  clang-analyzer-unix.Malloc,\n  clang-diagnostic-*,\n  google-readability-casting,\n  misc-misleading-bidirectional,\n  misc-misleading-identifier,\n  misc-misplaced-const,\n  misc-redundant-expression,\n  objc-*,\n  performance-type-promotion-in-math-fn,\n  readability-avoid-const-params-in-decls,\n  readability-braces-around-statements,\n  readability-const-return-type,\n  readability-duplicate-include,\n  readability-inconsistent-declaration-parameter-name,\n  readability-misplaced-array-index,\n  readability-non-const-parameter,\n  readability-redundant-control-flow,\n  readability-redundant-declaration,\n  readability-redundant-function-ptr-dereference,\n  readability-redundant-preprocessor,\n  readability-simplify-boolean-expr\n\nCheckOptions:\n  - key:   bugprone-assert-side-effect.AssertMacros\n    value: \"SDL_assert, SDL_assert_release, SDL_assert_paranoid, SDL_assert_always, SDL_COMPILE_TIME_ASSERT\"\n  - key:   bugprone-misplaced-widening-cast.CheckImplicitCasts\n    value: true\n  - key:   bugprone-not-null-terminated-result.WantToUseSafeFunctions\n    value: false # Do not recommend _s functions\n\nFormatStyle: \"file\"\nHeaderFilterRegex: \"*.h$\"\nWarningsAsErrors: \"\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.3232421875,
          "content": "# For format see editorconfig.org\n# Copyright 2022 Collabora Ltd.\n# SPDX-License-Identifier: Zlib\n\nroot = true\n\n[*.{c,cc,cg,cpp,gradle,h,java,m,metal,pl,py,S,sh,txt}]\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.{html,js,json,m4,yml,yaml,vcxproj,vcxproj.filters}]\nindent_size = 2\nindent_style = space\ntrim_tailing_whitespace = true\n\n[*.xml]\nindent_size = 4\nindent_style = space\n\n[{CMakeLists.txt,cmake/*.cmake}]\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{cmake/cmake_uninstall.cmake.in,test/CMakeLists.txt,cmake/SDL3Config.cmake.in}]\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[{Makefile.*,*.mk,*.sln,*.pbxproj,*.plist}]\nindent_size = 8\nindent_style = tab\ntab_width = 8\n\n[src/joystick/controller_type.*]\nindent_style = tab\n\n[src/joystick/hidapi/steam/*.h]\nindent_style = tab\n\n[src/libm/*.c]\nindent_style = tab\n\n[src/test/SDL_test_{crc32,md5,random}.c]\nindent_size = 2\nindent_style = space\n\n[src/video/yuv2rgb/*.{c,h}]\nindent_style = tab\n\n[wayland-protocols/*.xml]\nindent_size = 2\nindent_style = space\n\n[*.{markdown,md}]\nindent_size = 4\nindent_style = space\n# Markdown syntax treats tabs as 4 spaces\ntab_width = 4\n\n[{*.bat,*.rc}]\nend_of_line = crlf\n\n[*.cocci]\ninsert_final_newline = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.7763671875,
          "content": "build/\nbuild-*/\n!build-scripts/\nbuildbot/\n/VERSION.txt\n__pycache__\n\n*.so\n*.so.*\n*.dll\n*.exe\n*.o\n*.obj\n*.res\n*.lib\n*.a\n*.la\n*.dSYM\n*,e1f\n*,ff8\n*.lnk\n*.err\n*.exp\n*.map\n*.orig\n*~\n*.swp\n*.tmp\n*.rej\n\n# for CMake\n.cmake\nCMakeFiles/\nCMakeCache.txt\ncmake_install.cmake\ncmake_uninstall.cmake\ninstall_manifest.txt\n*Targets.cmake\n*Config.cmake\n*ConfigVersion.cmake\nCTestTestfile.cmake\nTesting\ncompile_commands.json\n.cache/\n/include-config-*\n/include-revision\n/Makefile\n.ninja_*\n*.ninja\n*.pc\ntest/*.test\nwayland-generated-protocols\n\n# for CLion\n.idea\ncmake-build-*\n\n# for Xcode\n*.mode1*\n*.perspective*\n*.pbxuser\n(^|/)build($|/)\n.DS_Store\nxcuserdata\n*.xcworkspace\nXcode/build.xcconfig\n\n# for Visual Studio Code\n.vscode/\n\n# for Visual C++\n.vs\nDebug\nRelease\n*.user\n*.ncb\n*.suo\n*.sdf\nVisualC/tests/gamepadmap/axis.bmp\nVisualC/tests/gamepadmap/button.bmp\nVisualC/tests/gamepadmap/gamepadmap.bmp\nVisualC/tests/gamepadmap/gamepadmap_back.bmp\nVisualC/tests/loopwave/sample.wav\nVisualC/tests/testautomation/*.bmp\nVisualC/tests/testgamepad/axis.bmp\nVisualC/tests/testgamepad/button.bmp\nVisualC/tests/testgamepad/gamepadmap.bmp\nVisualC/tests/testgamepad/gamepadmap_back.bmp\nVisualC/tests/testoverlay/moose.dat\nVisualC/tests/testrendertarget/icon.bmp\nVisualC/tests/testrendertarget/sample.bmp\nVisualC/tests/testscale/icon.bmp\nVisualC/tests/testscale/sample.bmp\nVisualC/tests/testsprite/icon.bmp\nVisualC/tests/testyuv/testyuv.bmp\nVisualC-GDK/**/Layout\nsrc/render/direct3d12/D3D12_*_One.h\nsrc/render/direct3d12/D3D12_*_Series.h\nsrc/gpu/d3d12/D3D12_*_One.h\nsrc/gpu/d3d12/D3D12_*_Series.h\n\n# for Android\nandroid-project/local.properties\nandroid-project/.gradle/\n\ntest/checkkeys\ntest/checkkeysthreads\ntest/gamepadmap\ntest/loopwave\ntest/loopwavequeue\ntest/testatomic\ntest/testaudiorecording\ntest/testaudiohotplug\ntest/testaudioinfo\ntest/testautomation\ntest/testbounds\ntest/testcustomcursor\ntest/testdisplayinfo\ntest/testdraw\ntest/testdrawchessboard\ntest/testdropfile\ntest/testerror\ntest/testevdev\ntest/testfile\ntest/testfilesystem\ntest/testgamepad\ntest/testgeometry\ntest/testgesture\ntest/testgl\ntest/testgles\ntest/testgles2\ntest/testhaptic\ntest/testhittesting\ntest/testhotplug\ntest/testiconv\ntest/testime\ntest/testintersections\ntest/testjoystick\ntest/testkeys\ntest/testloadso\ntest/testlocale\ntest/testlock\ntest/testmessage\ntest/testmouse\ntest/testmultiaudio\ntest/testnative\ntest/testoverlay\ntest/testplatform\ntest/testpower\ntest/testqsort\ntest/testrelative\ntest/testrendercopyex\ntest/testrendertarget\ntest/testresample\ntest/testrumble\ntest/testscale\ntest/testsem\ntest/testsensor\ntest/testshader\ntest/testshape\ntest/testsprite\ntest/testspriteminimal\ntest/teststreaming\ntest/testsurround\ntest/testthread\ntest/testtimer\ntest/testurl\ntest/testver\ntest/testviewport\ntest/testvulkan\ntest/testwm\ntest/testyuv\ntest/torturethread\n\n# for Doxygen\ndocs/output\nSDL.tag\ndoxygen_warn.txt\n"
        },
        {
          "name": ".wikiheaders-options",
          "type": "blob",
          "size": 1.9775390625,
          "content": "projectfullname = Simple Directmedia Layer\nprojectshortname = SDL\nincsubdir = include/SDL3\nwikisubdir =\nreadmesubdir = docs\napiprefixregex = (SDL_|SDLK_|[US]int\\d+)\nmainincludefname = SDL3/SDL.h\nversionfname = include/SDL3/SDL_version.h\nversionmajorregex = \\A\\#define\\s+SDL_MAJOR_VERSION\\s+(\\d+)\\Z\nversionminorregex = \\A\\#define\\s+SDL_MINOR_VERSION\\s+(\\d+)\\Z\nversionmicroregex = \\A\\#define\\s+SDL_MICRO_VERSION\\s+(\\d+)\\Z\nselectheaderregex = \\ASDL.*?\\.h\\Z\nprojecturl = https://libsdl.org/\nwikiurl = https://wiki.libsdl.org\nbugreporturl = https://github.com/libsdl-org/sdlwiki/issues/new\nwarn_about_missing = 0\nwikipreamble = (This is the documentation for SDL3, which is the current stable version. [SDL2](https://wiki.libsdl.org/SDL2/) was the previous version!)\nwikiheaderfiletext = Defined in [<SDL3/%fname%>](https://github.com/libsdl-org/SDL/blob/main/include/SDL3/%fname%)\n\nmanpageheaderfiletext = Defined in SDL3/%fname%\nmanpagesymbolfilterregex = \\A[US]int\\d+\\Z\n\n# All SDL_test_* headers become undefined categories, everything else just converts like SDL_audio.h -> Audio\n# A handful of others we fix up in the header itself with /* WIKI CATEGORY: x */ comments.\nheadercategoryeval = s/\\ASDL_test_?.*?\\.h\\Z//; s/\\ASDL_?(.*?)\\.h\\Z/$1/; ucfirst();\n\nquickrefenabled = 1\nquickrefcategoryorder = Init,Hints,Error,Version,Properties,Log,Video,Events,Keyboard,Mouse,Touch,Gamepad,Joystick,Haptic,Audio,Time,Timer,Render,SharedObject,Thread,Mutex,Atomic,Filesystem,IOStream,AsyncIO,Storage,Pixels,Surface,Blendmode,Rect,Camera,Clipboard,Dialog,GPU,Messagebox,Vulkan,Metal,Platform,Power,Sensor,Process,Bits,Endian,Assert,CPUInfo,Intrinsics,Locale,System,Misc,GUID,Main,Stdinc\nquickreftitle = SDL3 API Quick Reference\nquickrefurl = https://libsdl.org/\nquickrefdesc = The latest version of this document can be found at https://wiki.libsdl.org/SDL3/QuickReference\nquickrefmacroregex = \\A(SDL_PLATFORM_.*|SDL_.*_INTRINSICS|SDL_Atomic...Ref|SDL_assert.*?|SDL_COMPILE_TIME_ASSERT|SDL_arraysize|SDL_Swap[BL]E\\d\\d|SDL_[a-z]+_cast)\\Z\n"
        },
        {
          "name": "Android.mk",
          "type": "blob",
          "size": 4.8603515625,
          "content": "LOCAL_PATH := $(call my-dir)\n\n###########################\n#\n# SDL shared library\n#\n###########################\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := SDL3\n\nLOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(LOCAL_PATH)/include/build_config $(LOCAL_PATH)/src\n\nLOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include\n\nLOCAL_SRC_FILES := \\\n\t$(subst $(LOCAL_PATH)/,, \\\n\t$(wildcard $(LOCAL_PATH)/src/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/audio/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/audio/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/audio/dummy/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/audio/aaudio/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/audio/openslES/*.c) \\\n\t$(LOCAL_PATH)/src/atomic/SDL_atomic.c.arm \\\n\t$(LOCAL_PATH)/src/atomic/SDL_spinlock.c.arm \\\n\t$(wildcard $(LOCAL_PATH)/src/camera/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/camera/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/camera/dummy/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/core/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/core/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/cpuinfo/*.c) \\\n\t$(LOCAL_PATH)/src/dialog/SDL_dialog.c \\\n\t$(LOCAL_PATH)/src/dialog/SDL_dialog_utils.c \\\n\t$(LOCAL_PATH)/src/dialog/android/SDL_androiddialog.c \\\n\t$(wildcard $(LOCAL_PATH)/src/dynapi/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/events/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/file/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/file/generic/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/gpu/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/gpu/vulkan/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/haptic/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/haptic/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/haptic/dummy/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/hidapi/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/hidapi/android/*.cpp) \\\n\t$(wildcard $(LOCAL_PATH)/src/joystick/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/joystick/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/joystick/dummy/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/joystick/hidapi/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/joystick/steam/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/joystick/virtual/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/loadso/dlopen/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/locale/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/locale/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/main/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/main/generic/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/misc/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/misc/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/power/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/power/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/process/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/process/dummy/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/filesystem/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/filesystem/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/filesystem/posix/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/sensor/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/sensor/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/sensor/dummy/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/render/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/render/*/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/stdlib/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/storage/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/storage/generic/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/thread/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/thread/pthread/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/time/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/time/unix/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/timer/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/timer/unix/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/tray/dummy/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/tray/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/video/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/video/android/*.c) \\\n\t$(wildcard $(LOCAL_PATH)/src/video/yuv2rgb/*.c))\n\nLOCAL_CFLAGS += -DGL_GLEXT_PROTOTYPES\nLOCAL_CFLAGS += \\\n\t-Wall -Wextra \\\n\t-Wmissing-prototypes \\\n\t-Wunreachable-code-break \\\n\t-Wunneeded-internal-declaration \\\n\t-Wmissing-variable-declarations \\\n\t-Wfloat-conversion \\\n\t-Wshorten-64-to-32 \\\n\t-Wunreachable-code-return \\\n\t-Wshift-sign-overflow \\\n\t-Wstrict-prototypes \\\n\t-Wkeyword-macro \\\n\n# Warnings we haven't fixed (yet)\nLOCAL_CFLAGS += -Wno-unused-parameter -Wno-sign-compare\n\nLOCAL_CXXFLAGS += -std=gnu++11\n\nLOCAL_LDLIBS := -ldl -lGLESv1_CM -lGLESv2 -lOpenSLES -llog -landroid\n\nLOCAL_LDFLAGS := -Wl,--no-undefined -Wl,--no-undefined-version -Wl,--version-script=$(LOCAL_PATH)/src/dynapi/SDL_dynapi.sym\n\nifeq ($(NDK_DEBUG),1)\n    cmd-strip :=\nendif\n\nLOCAL_STATIC_LIBRARIES := cpufeatures\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n\n###########################\n#\n# SDL_test static library\n#\n###########################\n\nLOCAL_MODULE := SDL3_test\n\nLOCAL_MODULE_FILENAME := libSDL3_test\n\nLOCAL_SRC_FILES := \\\n\t$(subst $(LOCAL_PATH)/,, \\\n\t$(wildcard $(LOCAL_PATH)/src/test/*.c))\n\nLOCAL_LDLIBS :=\n\nLOCAL_LDFLAGS :=\n\nLOCAL_EXPORT_LDLIBS :=\n\ninclude $(BUILD_STATIC_LIBRARY)\n\n\n###########################\n#\n# SDL static library\n#\n###########################\n\nLOCAL_MODULE := SDL3_static\n\nLOCAL_MODULE_FILENAME := libSDL3\n\nLOCAL_LDLIBS :=\n\nLOCAL_LDFLAGS :=\n\nLOCAL_EXPORT_LDLIBS := -ldl -lGLESv1_CM -lGLESv2 -llog -landroid\n\ninclude $(BUILD_STATIC_LIBRARY)\n\n$(call import-module,android/cpufeatures)\n\n"
        },
        {
          "name": "BUGS.txt",
          "type": "blob",
          "size": 0.458984375,
          "content": "\nBugs are now managed in the SDL issue tracker, here:\n\n    https://github.com/libsdl-org/SDL/issues\n\nYou may report bugs there, and search to see if a given issue has already\n been reported, discussed, and maybe even fixed.\n\n\nYou may also find help at the SDL forums/mailing list:\n\n    https://discourse.libsdl.org/\n\nBug reports are welcome here, but we really appreciate if you use the issue\n tracker, as bugs discussed on the mailing list may be forgotten or missed.\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 127.654296875,
          "content": "cmake_minimum_required(VERSION 3.16)\n\nif(NOT DEFINED CMAKE_BUILD_TYPE)\n  set(cmake_build_type_undefined 1)\nendif()\n\n# See docs/release_checklist.md\nproject(SDL3 LANGUAGES C VERSION \"3.1.9\")\n\nif(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n  set(SDL3_MAINPROJECT ON)\nelse()\n  set(SDL3_MAINPROJECT OFF)\nendif()\n\n# By default, configure SDL3 in RelWithDebInfo configuration\nif(SDL3_MAINPROJECT)\n  get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n  if(is_multi_config)\n      # The first item in CMAKE_CONFIGURATION_TYPES is the default configuration\n      if(DEFINED CMAKE_CONFIGURATION_TYPES AND \"RelWithDebInfo\" IN_LIST CMAKE_CONFIGURATION_TYPES)\n        list(REMOVE_ITEM CMAKE_CONFIGURATION_TYPES \"RelWithDebInfo\")\n        list(INSERT CMAKE_CONFIGURATION_TYPES 0 \"RelWithDebInfo\")\n        set(CMAKE_CONFIGURATION_TYPES \"${CMAKE_CONFIGURATION_TYPES}\" CACHE STRING \"CMake configuration types\" FORCE)\n      endif()\n  else()\n    if(cmake_build_type_undefined)\n      set(CMAKE_BUILD_TYPE \"RelWithDebInfo\" CACHE STRING \"CMake build type\" FORCE)\n    endif()\n  endif()\nendif()\n\n# CMake 3.0 expands the \"if(${A})\" in \"set(OFF 1);set(A OFF);if(${A})\" to \"if(1)\"\n# CMake 3.24+ emits a warning when not set.\nunset(OFF)\nunset(ON)\nif(POLICY CMP0054)\n  cmake_policy(SET CMP0054 NEW)\nendif()\n\ninclude(CheckLibraryExists)\ninclude(CheckIncludeFile)\ninclude(CheckLanguage)\ninclude(CheckSymbolExists)\ninclude(CheckCSourceCompiles)\ninclude(CheckCSourceRuns)\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckStructHasMember)\ninclude(CMakeDependentOption)\ninclude(CMakeParseArguments)\ninclude(CMakePushCheckState)\ninclude(GNUInstallDirs)\n\nif(NOT DEFINED OpenGL_GL_PREFERENCE)\n  set(OpenGL_GL_PREFERENCE GLVND)\nendif()\n\nfind_package(PkgConfig)\n\nlist(APPEND CMAKE_MODULE_PATH \"${SDL3_SOURCE_DIR}/cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/macros.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlchecks.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlcompilers.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlcpu.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlmanpages.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdlplatform.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/sdltargets.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/GetGitRevisionDescription.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/3rdparty.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/PreseedMSVCCache.cmake\")\ninclude(\"${SDL3_SOURCE_DIR}/cmake/PreseedEmscriptenCache.cmake\")\n\nSDL_DetectCompiler()\nSDL_DetectTargetCPUArchitectures(SDL_CPUS)\n\n# Increment this if there is an incompatible change - but if that happens,\n# we should rename the library from SDL3 to SDL4, at which point this would\n# reset to 0 anyway.\nset(SDL_SO_VERSION_MAJOR \"0\")\nset(SDL_SO_VERSION_MINOR \"${PROJECT_VERSION_MINOR}\")\nset(SDL_SO_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\nset(SDL_SO_VERSION \"${SDL_SO_VERSION_MAJOR}.${SDL_SO_VERSION_MINOR}.${SDL_SO_VERSION_PATCH}\")\n\nif(PROJECT_VERSION_MINOR MATCHES \"[02468]$\")\n  math(EXPR SDL_DYLIB_COMPAT_VERSION_MAJOR \"100 * ${PROJECT_VERSION_MINOR} + 1\")\n  set(SDL_DYLIB_COMPAT_VERSION_MINOR \"0\")\n  math(EXPR SDL_DYLIB_CURRENT_VERSION_MAJOR \"${SDL_DYLIB_COMPAT_VERSION_MAJOR}\")\n  set(SDL_DYLIB_CURRENT_VERSION_MINOR \"${PROJECT_VERSION_PATCH}\")\nelse()\n  math(EXPR SDL_DYLIB_COMPAT_VERSION_MAJOR \"100 * ${PROJECT_VERSION_MINOR} + ${PROJECT_VERSION_PATCH} + 1\")\n  set(SDL_DYLIB_COMPAT_VERSION_MINOR \"0\")\n  math(EXPR SDL_DYLIB_CURRENT_VERSION_MAJOR \"${SDL_DYLIB_COMPAT_VERSION_MAJOR}\")\n  set(SDL_DYLIB_CURRENT_VERSION_MINOR \"0\")\nendif()\nset(SDL_DYLIB_CURRENT_VERSION_PATCH \"0\")\nset(SDL_DYLIB_COMPAT_VERSION_PATCH \"0\")\n\nset(SDL_DYLIB_CURRENT_VERSION \"${SDL_DYLIB_CURRENT_VERSION_MAJOR}.${SDL_DYLIB_CURRENT_VERSION_MINOR}.${SDL_DYLIB_CURRENT_VERSION_PATCH}\")\nset(SDL_DYLIB_COMPAT_VERSION \"${SDL_DYLIB_COMPAT_VERSION_MAJOR}.${SDL_DYLIB_COMPAT_VERSION_MINOR}.${SDL_DYLIB_COMPAT_VERSION_PATCH}\")\n\nmessage(DEBUG \"SDL_SO_VERSION=${SDL_SO_VERSION} SDL_DYLIB_CURRENT_VERSION=${SDL_DYLIB_CURRENT_VERSION} SDL_DYLIB_COMPAT_VERSION=${SDL_DYLIB_COMPAT_VERSION}\")\n\nset(SDL_FRAMEWORK_VERSION \"A\")\n\nset(SDL_CHECK_REQUIRED_INCLUDES \"\" CACHE STRING \"Extra includes (for CMAKE_REQUIRED_INCLUDES)\")\nset(SDL_CHECK_REQUIRED_LINK_OPTIONS \"\" CACHE STRING \"Extra link options (for CMAKE_REQUIRED_LINK_OPTIONS)\")\nmark_as_advanced(SDL_CHECK_REQUIRED_INCLUDES SDL_CHECK_REQUIRED_LINK_OPTIONS)\n\nstring(APPEND CMAKE_REQUIRED_FLAGS \" -D_GNU_SOURCE=1\")\nlist(APPEND CMAKE_REQUIRED_INCLUDES ${SDL_CHECK_REQUIRED_INCLUDES})\nlist(APPEND CMAKE_REQUIRED_LINK_OPTIONS ${SDL_CHECK_REQUIRED_LINK_OPTIONS})\n\n# Get the platform\nSDL_DetectCMakePlatform()\n\n# Don't mistake macOS for unix\nif(UNIX AND NOT ANDROID AND NOT APPLE AND NOT RISCOS)\n  set(UNIX_SYS ON)\nelse()\n  set(UNIX_SYS OFF)\nendif()\n\nif(UNIX OR APPLE)\n  set(UNIX_OR_MAC_SYS ON)\nelse()\n  set(UNIX_OR_MAC_SYS OFF)\nendif()\n\n# Emscripten pthreads work, but you need to have a non-pthread fallback build\n#  for systems without support. It's not currently enough to not use\n#  pthread functions in a pthread-build; it won't start up on unsupported\n#  browsers. As such, you have to explicitly enable it on Emscripten builds\n#  for the time being. This default will change to ON once this becomes\n#  commonly supported in browsers or the Emscripten team makes a single\n#  binary work everywhere.\nif (UNIX_OR_MAC_SYS AND NOT EMSCRIPTEN)\n  set(SDL_PTHREADS_DEFAULT ON)\nelse()\n  set(SDL_PTHREADS_DEFAULT OFF)\nendif()\n\nif(UNIX_SYS OR ANDROID)\n  set(SDL_CLOCK_GETTIME_DEFAULT ON)\nelse()\n  set(SDL_CLOCK_GETTIME_DEFAULT OFF)\nendif()\n\n# The hidraw support doesn't catch Xbox, PS4 and Nintendo controllers,\n#  so we'll just use libusb when it's available. libusb does not support iOS,\n#  so we default to yes on iOS.\nif(IOS OR TVOS OR VISIONOS OR WATCHOS OR ANDROID)\n  set(SDL_HIDAPI_LIBUSB_AVAILABLE FALSE)\nelse()\n  set(SDL_HIDAPI_LIBUSB_AVAILABLE TRUE)\nendif()\n\nset(SDL_ASSEMBLY_DEFAULT OFF)\nif(USE_CLANG OR USE_GCC OR USE_INTELCC OR MSVC_VERSION GREATER 1400)\n  set(SDL_ASSEMBLY_DEFAULT ON)\nendif()\n\nset(SDL_GCC_ATOMICS_DEFAULT OFF)\nif(USE_GCC OR USE_CLANG OR USE_INTELCC OR USE_QCC)\n  set(SDL_GCC_ATOMICS_DEFAULT ON)\nendif()\n\n# Default option knobs\nset(SDL_LIBC_DEFAULT ON)\nset(SDL_SYSTEM_ICONV_DEFAULT ON)\nif(WINDOWS OR MACOS OR IOS OR TVOS OR VISIONOS OR WATCHOS)\n  set(SDL_SYSTEM_ICONV_DEFAULT OFF)\nendif()\n\nset(SDL_RELOCATABLE_DEFAULT OFF)\nif(MSVC)\n  set(SDL_RELOCATABLE_DEFAULT ON)\nendif()\n\nif(MSVC)\n  if(NOT SDL_LIBC)\n    # Make sure /RTC1 is disabled, otherwise it will use functions from the CRT\n    foreach(flag_var\n        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\n      string(REGEX REPLACE \"/RTC(su|[1su])\" \"\" ${flag_var} \"${${flag_var}}\")\n    endforeach(flag_var)\n  endif()\n\n  if(MSVC_CLANG)\n    # clang-cl treats /W4 as '-Wall -Wextra' -- we don't need -Wextra\n    foreach(flag_var\n        CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE\n        CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO)\n      string(REGEX REPLACE \"/W4\" \"/W3\" ${flag_var} \"${${flag_var}}\")\n    endforeach(flag_var)\n  endif()\nendif()\n\nset(SDL_SHARED_DEFAULT ON)\nset(SDL_STATIC_DEFAULT ON)\n\nset(SDL_SHARED_AVAILABLE ON)\nset(SDL_STATIC_AVAILABLE ON)\n\n# All these *_DEFAULT vars will default to ON if not specified,\n# so you only need to override them if they need to be disabled.\nif(EMSCRIPTEN)\n  # Set up default values for the currently supported set of subsystems:\n  # Emscripten/Javascript does not have assembly support, a dynamic library\n  # loading architecture, or low-level CPU inspection.\n  set(SDL_ASSEMBLY_DEFAULT OFF)\n  set(SDL_SHARED_AVAILABLE OFF)\nendif()\n\nif(VITA OR PSP OR PS2 OR N3DS OR RISCOS)\n  set(SDL_SHARED_AVAILABLE OFF)\nendif()\n\nif((RISCOS OR UNIX_SYS) AND NOT (LINUX OR NETBSD OR OPENBSD))\n  set(SDL_OSS_DEFAULT ON)\nelse()\n  set(SDL_OSS_DEFAULT OFF)\nendif()\n\nif(SDL_SHARED_DEFAULT AND SDL_STATIC_DEFAULT AND SDL_SHARED_AVAILABLE)\n  if(DEFINED BUILD_SHARED_LIBS)\n    # When defined, use BUILD_SHARED_LIBS as default\n    if(BUILD_SHARED_LIBS)\n      set(SDL_STATIC_DEFAULT OFF)\n    else()\n      set(SDL_SHARED_DEFAULT OFF)\n    endif()\n  else()\n    # Default to just building the shared library\n    set(SDL_STATIC_DEFAULT OFF)\n  endif()\nendif()\n\nset(SDL_SUBSYSTEMS )\n\nmacro(define_sdl_subsystem _name)\n  cmake_parse_arguments(\"_ds\" \"\" \"\" \"DEPS\" ${ARGN})\n  string(TOUPPER ${_name} _uname)\n  if(NOT DEFINED SDL_${_uname}_DEFAULT)\n    set(SDL_${_uname}_DEFAULT ON)\n  endif()\n  if(_ds_DEPS)\n    cmake_dependent_option(SDL_${_uname} \"Enable the ${_name} subsystem\" \"${SDL_${_uname}_DEFAULT}\" \"${_ds_DEPS}\" OFF)\n  else()\n    option(SDL_${_uname} \"Enable the ${_name} subsystem\" \"${SDL_${_uname}_DEFAULT}\")\n  endif()\n  list(APPEND SDL_SUBSYSTEMS \"${_name}\")\nendmacro()\n\ndefine_sdl_subsystem(Audio)\ndefine_sdl_subsystem(Video)\ndefine_sdl_subsystem(GPU DEPS SDL_VIDEO)\ndefine_sdl_subsystem(Render DEPS SDL_VIDEO)\ndefine_sdl_subsystem(Camera DEPS SDL_VIDEO)\ndefine_sdl_subsystem(Joystick)\ndefine_sdl_subsystem(Haptic)\ndefine_sdl_subsystem(Hidapi)\ndefine_sdl_subsystem(Power)\ndefine_sdl_subsystem(Sensor)\ndefine_sdl_subsystem(Dialog)\n\ncmake_dependent_option(SDL_FRAMEWORK \"Build SDL libraries as Apple Framework\" OFF \"APPLE\" OFF)\nif(SDL_FRAMEWORK)\n  set(SDL_STATIC_AVAILABLE FALSE)\nendif()\n\nif(UNIX AND NOT ANDROID AND NOT RISCOS AND NOT SDL_FRAMEWORK)\n  set(SDL_RPATH_DEFAULT ON)\nelse()\n  set(SDL_RPATH_DEFAULT OFF)\nendif()\n\nset(SDL_PRESEED_AVAILABLE OFF)\nif(COMMAND SDL_Preseed_CMakeCache)\n  set(SDL_PRESEED_AVAILABLE ON)\nendif()\n\nset(SDL_X11_XRANDR_DEFAULT ON)\nif(SOLARIS)\n  set(SDL_X11_XRANDR_DEFAULT OFF)\nendif()\n\n# Allow some projects to be built conditionally.\nset_option(SDL_INSTALL             \"Enable installation of SDL3\" ${SDL3_MAINPROJECT})\ncmake_dependent_option(SDL_INSTALL_CPACK \"Create binary SDL3 archive using CPack\" ${SDL3_MAINPROJECT} \"SDL_INSTALL\" ON)\ncmake_dependent_option(SDL_INSTALL_DOCS \"Install docs for SDL3\" OFF \"SDL_INSTALL;NOT SDL_FRAMEWORK\" ON)\nset_option(SDL_UNINSTALL           \"Enable uninstallation of SDL3\" ${SDL3_MAINPROJECT})\ncmake_dependent_option(SDL_PRESEED \"Preseed CMake cache to speed up configuration\" ON \"${SDL_PRESEED_AVAILABLE}\" OFF)\ncmake_dependent_option(SDL_RELOCATABLE \"Create relocatable SDL package\" ${SDL_RELOCATABLE_DEFAULT} \"SDL_INSTALL\" OFF)\n\ncmake_dependent_option(SDL_ANDROID_JAR  \"Enable creation of SDL3.jar\" ${SDL3_MAINPROJECT} \"ANDROID\" ON)\n\noption_string(SDL_ASSERTIONS \"Enable internal sanity checks (auto/disabled/release/enabled/paranoid)\" \"auto\")\nset_option(SDL_ASSEMBLY            \"Enable assembly routines\" ${SDL_ASSEMBLY_DEFAULT})\ndep_option(SDL_AVX                 \"Use AVX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_AVX2                \"Use AVX2 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_AVX512F             \"Use AVX512F assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE                 \"Use SSE assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE2                \"Use SSE2 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE3                \"Use SSE3 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE4_1              \"Use SSE4.1 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_SSE4_2              \"Use SSE4.2 assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_MMX                 \"Use MMX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_X86 OR SDL_CPU_X64\" OFF)\ndep_option(SDL_ALTIVEC             \"Use Altivec assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_POWERPC32 OR SDL_CPU_POWERPC64\" OFF)\ndep_option(SDL_ARMSIMD             \"Use SIMD assembly blitters on ARM\" OFF \"SDL_ASSEMBLY;SDL_CPU_ARM32\" OFF)\ndep_option(SDL_ARMNEON             \"Use NEON assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_ARM32 OR SDL_CPU_ARM64\" OFF)\ndep_option(SDL_LSX                 \"Use LSX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_LOONGARCH64\" OFF)\ndep_option(SDL_LASX                \"Use LASX assembly routines\" ON \"SDL_ASSEMBLY;SDL_CPU_LOONGARCH64\" OFF)\n\nset_option(SDL_LIBC                \"Use the system C library\" ${SDL_LIBC_DEFAULT})\nset_option(SDL_SYSTEM_ICONV        \"Use iconv() from system-installed libraries\" ${SDL_SYSTEM_ICONV_DEFAULT})\nset_option(SDL_LIBICONV            \"Prefer iconv() from libiconv, if available, over libc version\" OFF)\nset_option(SDL_GCC_ATOMICS         \"Use gcc builtin atomics\" ${SDL_GCC_ATOMICS_DEFAULT})\ndep_option(SDL_DBUS                \"Enable D-Bus support\" ON \"${UNIX_SYS}\" OFF)\ndep_option(SDL_LIBURING            \"Enable liburing support\" ON \"${UNIX_SYS}\" OFF)\ndep_option(SDL_DISKAUDIO           \"Support the disk writer audio driver\" ON \"SDL_AUDIO\" OFF)\ndep_option(SDL_DUMMYAUDIO          \"Support the dummy audio driver\" ON \"SDL_AUDIO\" OFF)\ndep_option(SDL_DUMMYVIDEO          \"Use dummy video driver\" ON \"SDL_VIDEO\" OFF)\ndep_option(SDL_IBUS                \"Enable IBus support\" ON \"${UNIX_SYS}\" OFF)\ndep_option(SDL_OPENGL              \"Include OpenGL support\" ON \"SDL_VIDEO;NOT IOS;NOT VISIONOS;NOT TVOS;NOT WATCHOS\" OFF)\ndep_option(SDL_OPENGLES            \"Include OpenGL ES support\" ON \"SDL_VIDEO;NOT VISIONOS;NOT TVOS;NOT WATCHOS\" OFF)\nset_option(SDL_PTHREADS            \"Use POSIX threads for multi-threading\" ${SDL_PTHREADS_DEFAULT})\ndep_option(SDL_PTHREADS_SEM        \"Use pthread semaphores\" ON \"SDL_PTHREADS\" OFF)\ndep_option(SDL_OSS                 \"Support the OSS audio API\" ${SDL_OSS_DEFAULT} \"UNIX_SYS OR RISCOS;SDL_AUDIO\" OFF)\ndep_option(SDL_ALSA                \"Support the ALSA audio API\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_ALSA_SHARED         \"Dynamically load ALSA audio support\" ON \"SDL_ALSA\" OFF)\ndep_option(SDL_JACK                \"Support the JACK audio API\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_JACK_SHARED         \"Dynamically load JACK audio support\" ON \"SDL_JACK\" OFF)\nset_option(SDL_PIPEWIRE            \"Use Pipewire audio\" ${UNIX_SYS})\ndep_option(SDL_PIPEWIRE_SHARED     \"Dynamically load Pipewire support\" ON \"SDL_PIPEWIRE\" OFF)\ndep_option(SDL_PULSEAUDIO          \"Use PulseAudio\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_PULSEAUDIO_SHARED   \"Dynamically load PulseAudio support\" ON \"SDL_PULSEAUDIO\" OFF)\ndep_option(SDL_SNDIO               \"Support the sndio audio API\" ${UNIX_SYS} \"SDL_AUDIO\" OFF)\ndep_option(SDL_SNDIO_SHARED        \"Dynamically load the sndio audio API\" ON \"SDL_SNDIO\" OFF)\nset_option(SDL_RPATH               \"Use an rpath when linking SDL\" ${SDL_RPATH_DEFAULT})\nset_option(SDL_CLOCK_GETTIME       \"Use clock_gettime() instead of gettimeofday()\" ${SDL_CLOCK_GETTIME_DEFAULT})\ndep_option(SDL_X11                 \"Use X11 video driver\" ${UNIX_SYS} \"SDL_VIDEO\" OFF)\ndep_option(SDL_X11_SHARED          \"Dynamically load X11 support\" ON \"SDL_X11\" OFF)\ndep_option(SDL_X11_XCURSOR         \"Enable Xcursor support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XDBE            \"Enable Xdbe support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XINPUT          \"Enable XInput support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XFIXES          \"Enable Xfixes support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XRANDR          \"Enable Xrandr support\" \"${SDL_X11_XRANDR_DEFAULT}\" SDL_X11 OFF)\ndep_option(SDL_X11_XSCRNSAVER      \"Enable Xscrnsaver support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XSHAPE          \"Enable XShape support\" ON SDL_X11 OFF)\ndep_option(SDL_X11_XSYNC           \"Enable Xsync support\" ON SDL_X11 OFF)\ndep_option(SDL_WAYLAND             \"Use Wayland video driver\" ${UNIX_SYS} \"SDL_VIDEO\" OFF)\ndep_option(SDL_WAYLAND_SHARED      \"Dynamically load Wayland support\" ON \"SDL_WAYLAND\" OFF)\ndep_option(SDL_WAYLAND_LIBDECOR    \"Use client-side window decorations on Wayland\" ON \"SDL_WAYLAND\" OFF)\ndep_option(SDL_WAYLAND_LIBDECOR_SHARED     \"Dynamically load libdecor support\" ON \"SDL_WAYLAND_LIBDECOR;SDL_WAYLAND_SHARED\" OFF)\ndep_option(SDL_RPI                 \"Use Raspberry Pi video driver\" ON \"SDL_VIDEO;UNIX_SYS;SDL_CPU_ARM32 OR SDL_CPU_ARM64\" OFF)\ndep_option(SDL_ROCKCHIP            \"Use ROCKCHIP Hardware Acceleration video driver\" ON \"SDL_VIDEO;UNIX_SYS;SDL_CPU_ARM32 OR SDL_CPU_ARM64\" OFF)\ndep_option(SDL_COCOA               \"Use Cocoa video driver\" ON \"APPLE\" OFF)\ndep_option(SDL_DIRECTX             \"Use DirectX for Windows audio/video\" ON \"SDL_AUDIO OR SDL_VIDEO;WINDOWS\" OFF)\ndep_option(SDL_XINPUT              \"Use Xinput for Windows\" ON \"WINDOWS\" OFF)\ndep_option(SDL_WASAPI              \"Use the Windows WASAPI audio driver\" ON \"WINDOWS;SDL_AUDIO\" OFF)\ndep_option(SDL_RENDER_D3D          \"Enable the Direct3D 9 render driver\" ON \"SDL_RENDER;SDL_DIRECTX\" OFF)\ndep_option(SDL_RENDER_D3D11        \"Enable the Direct3D 11 render driver\" ON \"SDL_RENDER;SDL_DIRECTX\" OFF)\ndep_option(SDL_RENDER_D3D12        \"Enable the Direct3D 12 render driver\" ON \"SDL_RENDER;SDL_DIRECTX\" OFF)\ndep_option(SDL_RENDER_METAL        \"Enable the Metal render driver\" ON \"SDL_RENDER;${APPLE}\" OFF)\ndep_option(SDL_RENDER_GPU          \"Enable the SDL_GPU render driver\" ON \"SDL_RENDER;SDL_GPU\" OFF)\ndep_option(SDL_VIVANTE             \"Use Vivante EGL video driver\" ON \"${UNIX_SYS};SDL_CPU_ARM32\" OFF)\ndep_option(SDL_VULKAN              \"Enable Vulkan support\" ON \"SDL_VIDEO;ANDROID OR APPLE OR LINUX OR FREEBSD OR WINDOWS\" OFF)\ndep_option(SDL_RENDER_VULKAN       \"Enable the Vulkan render driver\" ON \"SDL_RENDER;SDL_VULKAN\" OFF)\ndep_option(SDL_METAL               \"Enable Metal support\" ON \"APPLE\" OFF)\nset_option(SDL_OPENVR              \"Use OpenVR video driver\" OFF)\ndep_option(SDL_KMSDRM              \"Use KMS DRM video driver\" ${UNIX_SYS} \"SDL_VIDEO\" OFF)\ndep_option(SDL_KMSDRM_SHARED       \"Dynamically load KMS DRM support\" ON \"SDL_KMSDRM\" OFF)\nset_option(SDL_OFFSCREEN           \"Use offscreen video driver\" ON)\ndep_option(SDL_DUMMYCAMERA         \"Support the dummy camera driver\" ON SDL_CAMERA OFF)\noption_string(SDL_BACKGROUNDING_SIGNAL \"number to use for magic backgrounding signal or 'OFF'\" OFF)\noption_string(SDL_FOREGROUNDING_SIGNAL \"number to use for magic foregrounding signal or 'OFF'\" OFF)\ndep_option(SDL_HIDAPI              \"Enable the HIDAPI subsystem\" ON \"NOT VISIONOS\" OFF)\ndep_option(SDL_HIDAPI_LIBUSB       \"Use libusb for low level joystick drivers\" ON SDL_HIDAPI_LIBUSB_AVAILABLE OFF)\ndep_option(SDL_HIDAPI_LIBUSB_SHARED \"Dynamically load libusb support\" ON SDL_HIDAPI_LIBUSB OFF)\ndep_option(SDL_HIDAPI_JOYSTICK     \"Use HIDAPI for low level joystick drivers\" ON SDL_HIDAPI OFF)\ndep_option(SDL_VIRTUAL_JOYSTICK    \"Enable the virtual-joystick driver\" ON SDL_HIDAPI OFF)\nset_option(SDL_LIBUDEV             \"Enable libudev support\" ON)\nset_option(SDL_ASAN                \"Use AddressSanitizer to detect memory errors\" OFF)\nset_option(SDL_CCACHE              \"Use Ccache to speed up build\" OFF)\nset_option(SDL_CLANG_TIDY          \"Run clang-tidy static analysis\" OFF)\nset_option(SDL_GPU_DXVK            \"Build SDL_GPU with DXVK support\" OFF)\n\nset(SDL_VENDOR_INFO \"\" CACHE STRING \"Vendor name and/or version to add to SDL_REVISION\")\n\ncmake_dependent_option(SDL_SHARED \"Build a shared version of the library\" ${SDL_SHARED_DEFAULT} ${SDL_SHARED_AVAILABLE} OFF)\ncmake_dependent_option(SDL_STATIC \"Build a static version of the library\" ${SDL_STATIC_DEFAULT} ${SDL_STATIC_AVAILABLE} OFF)\noption(SDL_TEST_LIBRARY   \"Build the SDL3_test library\" ON)\n\ndep_option(SDL_TESTS           \"Build the test directory\" OFF SDL_TEST_LIBRARY OFF)\ndep_option(SDL_INSTALL_TESTS   \"Install test-cases\" OFF \"SDL_INSTALL;NOT SDL_FRAMEWORK\" OFF)\ndep_option(SDL_TESTS_LINK_SHARED \"link tests to shared SDL library\" \"${SDL_SHARED}\" \"SDL_SHARED;SDL_STATIC\" \"${SDL_SHARED}\")\nset(SDL_TESTS_TIMEOUT_MULTIPLIER \"1\" CACHE STRING \"Timeout multiplier to account for really slow machines\")\n\nset_option(SDL_EXAMPLES           \"Build the examples directory\")\ndep_option(SDL_EXAMPLES_LINK_SHARED \"link examples to shared SDL library\" \"${SDL_SHARED}\" \"SDL_SHARED;SDL_STATIC\" \"${SDL_SHARED}\")\n\nif(VITA)\n  set_option(VIDEO_VITA_PIB  \"Build with PSVita piglet gles2 support\" OFF)\n  set_option(VIDEO_VITA_PVR  \"Build with PSVita PVR gles/gles2 support\" OFF)\nendif()\n\nif(NOT (SDL_SHARED OR SDL_STATIC))\n  message(FATAL_ERROR \"SDL_SHARED and SDL_STATIC cannot both be disabled\")\nendif()\n\nif(SDL_PRESEED)\n  SDL_Preseed_CMakeCache()\nendif()\n\nif(SDL_SHARED)\n  add_library(SDL3-shared SHARED)\n  add_library(SDL3::SDL3-shared ALIAS SDL3-shared)\n  SDL_AddCommonCompilerFlags(SDL3-shared)\n  if (\"c_std_99\" IN_LIST CMAKE_C_COMPILE_FEATURES)\n    target_compile_features(SDL3-shared PRIVATE c_std_99)\n  else()\n    message(WARNING \"target_compile_features does not know c_std_99 for C compiler\")\n  endif()\nendif()\n\nif(SDL_STATIC)\n  add_library(SDL3-static STATIC)\n  add_library(SDL3::SDL3-static ALIAS SDL3-static)\n  SDL_AddCommonCompilerFlags(SDL3-static)\n  if (\"c_std_99\" IN_LIST CMAKE_C_COMPILE_FEATURES)\n    target_compile_features(SDL3-static PRIVATE c_std_99)\n  else()\n    message(WARNING \"target_compile_features does not know c_std_99 for C compiler\")\n  endif()\nendif()\n\nif(SDL_TEST_LIBRARY)\n  add_library(SDL3_test STATIC)\n  add_library(SDL3::SDL3_test ALIAS SDL3_test)\n  SDL_AddCommonCompilerFlags(SDL3_test)\nendif()\n\n# Make sure SDL3::SDL3 always exists\nif(TARGET SDL3::SDL3-shared)\n  add_library(SDL3::SDL3 ALIAS SDL3-shared)\nelse()\n  add_library(SDL3::SDL3 ALIAS SDL3-static)\nendif()\n\nsdl_pc_link_options(\"-lSDL3\")\n\n# Enable large file support on 32-bit glibc, so that we can access files\n# with large inode numbers\ncheck_symbol_exists(\"__GLIBC__\" \"stdlib.h\" LIBC_IS_GLIBC)\nif (LIBC_IS_GLIBC AND CMAKE_SIZEOF_VOID_P EQUAL 4)\n  # Enable large file support on 32-bit glibc, so that we can access files with large inode numbers\n  sdl_compile_definitions(PRIVATE \"_FILE_OFFSET_BITS=64\")\n  # Enable 64-bit time_t on 32-bit glibc, so that time stamps remain correct beyond January 2038\n  sdl_compile_definitions(PRIVATE \"_TIME_BITS=64\")\nendif()\n\ncheck_linker_supports_version_file(HAVE_WL_VERSION_SCRIPT)\nif(HAVE_WL_VERSION_SCRIPT)\n  sdl_shared_link_options(\"-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/src/dynapi/SDL_dynapi.sym\")\nelse()\n  if((LINUX AND LIBC_IS_GLIBC) OR ANDROID)\n    message(FATAL_ERROR \"Linker does not support '-Wl,--version-script=xxx.sym'. This is required on the current host platform (${SDL_CMAKE_PLATFORM}).\")\n  endif()\nendif()\n\nif(CYGWIN)\n  # We build SDL on cygwin without the UNIX emulation layer\n  sdl_include_directories(PUBLIC SYSTEM \"/usr/include/mingw\")\n  cmake_push_check_state()\n  string(APPEND CMAKE_REQUIRED_FLAGS \" -mno-cygwin\")\n  check_c_source_compiles(\"int main(int argc, char **argv) { return 0; }\"\n    HAVE_GCC_NO_CYGWIN)\n  cmake_pop_check_state()\n  if(HAVE_GCC_NO_CYGWIN)\n    sdl_shared_link_options(\"-mno-cygwin\")\n  endif()\nendif()\n\n# General includes\nsdl_compile_definitions(PRIVATE \"USING_GENERATED_CONFIG_H\")\nsdl_include_directories(\n  PRIVATE\n    \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>/build_config\"\n    \"${SDL3_BINARY_DIR}/include-revision\"\n    \"${SDL3_SOURCE_DIR}/include\"\n)\n# Note: The clang toolset for Visual Studio does not support the '-idirafter' option.\nif(USE_GCC OR USE_INTELCC OR (USE_CLANG AND NOT MSVC_CLANG))\n  sdl_compile_options(NO_EXPORT PRIVATE \"$<BUILD_INTERFACE:-idirafter${SDL3_SOURCE_DIR}/src/video/khronos>\")\nelse()\n  sdl_include_directories(NO_EXPORT SYSTEM PRIVATE \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/src/video/khronos>\")\nendif()\n\nif(MSVC AND TARGET SDL3-shared AND NOT SDL_LIBC)\n  if(SDL_CPU_X64)\n    enable_language(ASM_MASM)\n    set(asm_src \"${SDL3_SOURCE_DIR}/src/stdlib/SDL_mslibc_x64.masm\")\n    target_compile_options(SDL3-shared PRIVATE \"$<$<COMPILE_LANGUAGE:ASM_MASM>:/nologo>\")\n    set_property(SOURCE \"${asm_src}\" PROPERTY LANGUAGE \"ASM_MASM\")\n    target_sources(SDL3-shared PRIVATE \"${asm_src}\")\n  elseif(SDL_CPU_ARM64)\n    enable_language(ASM_MARMASM)\n    set(asm_src \"${SDL3_SOURCE_DIR}/src/stdlib/SDL_mslibc_arm64.masm\")\n    target_compile_options(SDL3-shared PRIVATE \"$<$<COMPILE_LANGUAGE:ASM_MARMASM>:/nologo>\")\n    set_property(SOURCE \"${asm_src}\" PROPERTY LANGUAGE \"ASM_MARMASM\")\n    target_sources(SDL3-shared PRIVATE \"${asm_src}\")\n  elseif(SDL_CPU_ARM32)\n    # FIXME\n  endif()\nendif()\n\nif(USE_INTELCC)\n  # warning #39: division by zero\n  # warning #239: floating point underflow\n  # warning #264: floating-point value does not fit in required floating-point type\n  set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/libm/e_exp.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -wd239 -wd264\")\n  set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/libm/e_log.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -wd39\")\n  set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/libm/e_log10.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -wd39\")\n  set_property(SOURCE\n    \"${SDL3_SOURCE_DIR}/src/libm/e_exp.c\"\n    \"${SDL3_SOURCE_DIR}/src/libm/e_log.c\"\n    \"${SDL3_SOURCE_DIR}/src/libm/e_log10.c\"\n    PROPERTY SKIP_PRECOMPILE_HEADERS 1)\nendif()\n\nset(SDL_DEFAULT_ASSERT_LEVEL_CONFIGURED 1)\nif(SDL_ASSERTIONS MATCHES \"^(auto|)$\")\n  # Do nada - use optimization settings to determine the assertion level\n  set(SDL_DEFAULT_ASSERT_LEVEL )\n  set(SDL_DEFAULT_ASSERT_LEVEL_CONFIGURED 0)\nelseif(SDL_ASSERTIONS MATCHES \"^(disabled|0)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 0)\nelseif(SDL_ASSERTIONS MATCHES \"^(release|1)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 1)\nelseif(SDL_ASSERTIONS MATCHES \"^(enabled|2)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 2)\nelseif(SDL_ASSERTIONS MATCHES \"^(paranoid|3)$\")\n  set(SDL_DEFAULT_ASSERT_LEVEL 3)\nelse()\n  message(FATAL_ERROR \"unknown assertion level\")\nendif()\nset(HAVE_ASSERTIONS ${SDL_ASSERTIONS})\n\nif(NOT SDL_BACKGROUNDING_SIGNAL STREQUAL \"OFF\")\n  sdl_compile_definitions(PRIVATE \"SDL_BACKGROUNDING_SIGNAL=${SDL_BACKGROUNDING_SIGNAL}\")\nendif()\n\nif(NOT SDL_FOREGROUNDING_SIGNAL STREQUAL \"OFF\")\n  sdl_compile_definitions(PRIVATE \"SDL_FOREGROUNDING_SIGNAL=${SDL_FOREGROUNDING_SIGNAL}\")\nendif()\n\n# Compiler option evaluation\nif(USE_GCC OR USE_CLANG OR USE_INTELCC OR USE_QCC)\n  if(SDL_GCC_ATOMICS)\n    check_c_source_compiles(\"int main(int argc, char **argv) {\n        int a;\n        void *x, *y, *z;\n        __sync_lock_test_and_set(&a, 4);\n        __sync_lock_test_and_set(&x, y);\n        __sync_fetch_and_add(&a, 1);\n        __sync_bool_compare_and_swap(&a, 5, 10);\n        __sync_bool_compare_and_swap(&x, y, z);\n        return 0; }\" COMPILER_SUPPORTS_GCC_ATOMICS)\n    set(HAVE_GCC_ATOMICS ${COMPILER_SUPPORTS_GCC_ATOMICS})\n    if(NOT HAVE_GCC_ATOMICS)\n      check_c_source_compiles(\"int main(int argc, char **argv) {\n          int a;\n          __sync_lock_test_and_set(&a, 1);\n          __sync_lock_release(&a);\n          return 0; }\" COMPILER_SUPPORTS_SYNC_LOCK_TEST_AND_SET)\n      set(HAVE_GCC_SYNC_LOCK_TEST_AND_SET ${COMPILER_SUPPORTS_SYNC_LOCK_TEST_AND_SET})\n    endif()\n  endif()\n\n  cmake_push_check_state()\n  string(APPEND CMAKE_REQUIRED_FLAGS \" -fvisibility=hidden -Werror\")\n  check_c_source_compiles(\"\n      #if !defined(__GNUC__) || __GNUC__ < 4\n      #error SDL only uses visibility attributes in GCC 4 or newer\n      #endif\n      __attribute__((visibility(\\\"default\\\"))) int foo(void);\n      __attribute__((visibility(\\\"hidden\\\")))  int bar(void);\n      int foo(void) { return 0; }\n      int bar(void) { return 1; }\n      int main(void) { return 0; }\" HAVE_GCC_FVISIBILITY)\n  cmake_pop_check_state()\n\n  if(APPLE)\n    check_c_compiler_flag(-Wno-error=deprecated-declarations COMPILER_SUPPORTS_WNO_ERROR_DEPRECATED_DECLARATIONS)\n    if(COMPILER_SUPPORTS_WNO_ERROR_DEPRECATED_DECLARATIONS)\n      sdl_compile_options(PRIVATE \"-Wno-error=deprecated-declarations\")\n    endif()\n  endif()\n\n  if(APPLE)\n    check_linker_flag(C \"-Wl,-undefined,error\" LINKER_SUPPORTS_WL_UNDEFINED_ERROR)\n    if(LINKER_SUPPORTS_WL_UNDEFINED_ERROR)\n      sdl_shared_link_options(\"-Wl,-undefined,error\")\n    endif()\n  elseif(NOT OPENBSD)\n    cmake_push_check_state()\n    check_linker_flag(C \"-Wl,--no-undefined\" LINKER_SUPPORTS_WL_NO_UNDEFINED)\n    #FIXME: originally this if had an additional \"AND NOT (USE_CLANG AND WINDOWS)\"\n    if(LINKER_SUPPORTS_WL_NO_UNDEFINED)\n      sdl_shared_link_options(\"-Wl,--no-undefined\")\n    endif()\n  endif()\nendif()\n\nif(MSVC)\n  sdl_compile_definitions(\n    PRIVATE\n      \"_CRT_SECURE_NO_DEPRECATE\"\n      \"_CRT_NONSTDC_NO_DEPRECATE\"\n      \"_CRT_SECURE_NO_WARNINGS\"\n  )\n\n  # CET support was added in VS 2019 16.7\n  if(MSVC_VERSION GREATER 1926 AND CMAKE_GENERATOR_PLATFORM MATCHES \"Win32|x64\")\n    # Mark SDL3.dll as compatible with Control-flow Enforcement Technology (CET)\n    sdl_shared_link_options(\"-CETCOMPAT\")\n  endif()\nendif()\n\nif(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n  # Due to a limitation of Microsoft's LTO implementation, LTO must be disabled for memcpy and memset.\n  # The same applies to various functions normally belonging in the C library (for x86 architecture).\n  set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/stdlib/SDL_mslibc.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" /GL-\")\nendif()\n\nif(SDL_ASSEMBLY)\n  set(HAVE_ASSEMBLY TRUE)\n\n  if(SDL_MMX)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mmmx\")\n    endif()\n    check_c_source_compiles(\"\n      #include <mmintrin.h>\n      void ints_add(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 2; size -= 2, dest += 2, a += 2, b += 2) {\n          *(__m64*)dest = _mm_add_pi32(*(__m64*)a, *(__m64*)b);\n        }\n      }\n      int main(int argc, char *argv[]) {\n        ints_add((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_MMX)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_MMX)\n      set(HAVE_MMX TRUE)\n    endif()\n  endif()\n  if(SDL_SSE)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -msse\")\n    endif()\n    check_c_source_compiles(\"\n      #include <xmmintrin.h>\n      void floats_add(float *dest, float *a, float *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_storeu_ps(dest, _mm_add_ps(_mm_loadu_ps(a), _mm_loadu_ps (b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        floats_add((float*)0, (float*)0, (float*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_SSE)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_SSE)\n      set(HAVE_SSE TRUE)\n    endif()\n  endif()\n  if(SDL_SSE2)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -msse2\")\n    endif()\n    check_c_source_compiles(\"\n      #include <emmintrin.h>\n      void doubles_add(double *dest, double *a, double *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_store_pd(dest, _mm_add_pd(_mm_loadu_pd(a), _mm_loadu_pd(b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        doubles_add((double*)0, (double*)0, (double*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_SSE2)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_SSE2)\n      set(HAVE_SSE2 TRUE)\n    endif()\n  endif()\n  if(SDL_SSE3)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -msse3\")\n    endif()\n    check_c_source_compiles(\"\n      #include <pmmintrin.h>\n      void ints_add(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_storeu_si128((__m128i*)dest, _mm_add_epi32(_mm_lddqu_si128((__m128i*)a), _mm_lddqu_si128((__m128i*)b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        ints_add((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_SSE3)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_SSE3)\n      set(HAVE_SSE3 TRUE)\n    endif()\n  endif()\n  if(SDL_SSE4_1)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -msse4.1\")\n    endif()\n    check_c_source_compiles(\"\n      #include <smmintrin.h>\n      void ints_mul(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n          _mm_storeu_si128((__m128i*)dest, _mm_mullo_epi32(_mm_lddqu_si128((__m128i*)a), _mm_lddqu_si128((__m128i*)b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        ints_mul((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_SSE4_1)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_SSE4_1)\n      set(HAVE_SSE4_1 TRUE)\n    endif()\n  endif()\n  if(SDL_SSE4_2)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -msse4.2\")\n    endif()\n    check_c_source_compiles(\"\n      #include <nmmintrin.h>\n      unsigned calc_crc32c(const char *text, unsigned len) {\n          unsigned crc32c = ~0;\n          for (; len >= 4; len -= 4, text += 4) {\n            crc32c = (unsigned)_mm_crc32_u32(crc32c, *(unsigned*)text);\n          }\n          return crc32c;\n      }\n      int main(int argc, char **argv) {\n        calc_crc32c(\\\"SDL_SSE4\\\",8);\n        return 0;\n      }\" COMPILER_SUPPORTS_SSE4_2)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_SSE4_2)\n      set(HAVE_SSE4_2 TRUE)\n    endif()\n  endif()\n  if(SDL_AVX)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mavx\")\n    endif()\n    check_c_source_compiles(\"\n      #include <immintrin.h>\n      void floats_add(float *dest, float *a, float *b, unsigned size) {\n        for (; size >= 8; size -= 8, dest += 8, a += 8, b += 8) {\n          _mm256_storeu_ps(dest, _mm256_add_ps(_mm256_loadu_ps(a), _mm256_loadu_ps(b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        floats_add((float*)0, (float*)0, (float*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_AVX)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_AVX)\n      set(HAVE_AVX TRUE)\n    endif()\n  endif()\n  if(SDL_AVX2)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mavx2\")\n    endif()\n    check_c_source_compiles(\"\n      #include <immintrin.h>\n      void ints_add(int *dest, int *a, int *b, unsigned size) {\n        for (; size >= 8; size -= 8, dest += 8, a += 8, b += 8) {\n          _mm256_storeu_si256((__m256i*)dest, _mm256_add_epi32(_mm256_loadu_si256((__m256i*)a), _mm256_loadu_si256((__m256i*)b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        ints_add((int*)0, (int*)0, (int*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_AVX2)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_AVX2)\n      set(HAVE_AVX2 TRUE)\n    endif()\n  endif()\n  if(SDL_AVX512F)\n    cmake_push_check_state()\n    if(USE_GCC OR USE_CLANG OR USE_INTELCC)\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mavx512f\")\n    endif()\n    check_c_source_compiles(\"\n      #include <immintrin.h>\n      void floats_add(float *dest, float *a, float *b, unsigned size) {\n        for (; size >= 16; size -= 16, dest += 16, a += 16, b += 16) {\n          _mm512_storeu_ps(dest, _mm512_add_ps(_mm512_loadu_ps(a), _mm512_loadu_ps(b)));\n        }\n      }\n      int main(int argc, char **argv) {\n        floats_add((float*)0, (float*)0, (float*)0, 0);\n        return 0;\n      }\" COMPILER_SUPPORTS_AVX512F)\n    cmake_pop_check_state()\n    if(COMPILER_SUPPORTS_AVX512F)\n      set(HAVE_AVX512F TRUE)\n    endif()\n  endif()\n\n  if(SDL_ARMNEON)\n    check_c_source_compiles(\"\n        #include <arm_neon.h>\n        void floats_add(float *dest, float *a, float *b, unsigned size) {\n          for (; size >= 4; size -= 4, dest += 4, a += 4, b += 4) {\n            vst1q_f32(dest, vaddq_f32(vld1q_f32(a), vld1q_f32(b)));\n          }\n        }\n        int main(int argc, char *argv[]) {\n          floats_add((float*)0, (float*)0, (float*)0, 0);\n          return 0;\n         }\" COMPILER_SUPPORTS_ARMNEON)\n\n    if(COMPILER_SUPPORTS_ARMNEON)\n      set(HAVE_ARMNEON TRUE)\n    endif()\n  endif()\n\n  if(USE_GCC OR USE_CLANG)\n    # TODO: Those all seem to be quite GCC specific - needs to be\n    # reworked for better compiler support\n\n    if(SDL_ALTIVEC)\n      cmake_push_check_state()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -maltivec\")\n      check_c_source_compiles(\"\n          #include <altivec.h>\n          vector unsigned int vzero() {\n              return vec_splat_u32(0);\n          }\n          int main(int argc, char **argv) { return 0; }\" COMPILER_SUPPORTS_ALTIVEC)\n      cmake_pop_check_state()\n      if(COMPILER_SUPPORTS_ALTIVEC)\n        set(HAVE_ALTIVEC TRUE)\n        set(SDL_ALTIVEC_BLITTERS 1)\n        sdl_compile_options(PRIVATE \"-maltivec\")\n        set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/video/SDL_blit_N.c\" APPEND PROPERTY COMPILE_DEFINITIONS \"SDL_ENABLE_ALTIVEC\")\n        set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/video/SDL_blit_N.c\" PROPERTY SKIP_PRECOMPILE_HEADERS 1)\n      endif()\n    endif()\n\n    if(SDL_LSX)\n      cmake_push_check_state()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mlsx\")\n      check_c_source_compiles(\"\n          #ifndef __loongarch_sx\n          #error Assembler CPP flag not enabled\n          #endif\n          int main(int argc, char **argv) { return 0; }\" COMPILER_SUPPORTS_LSX)\n      check_include_file(\"lsxintrin.h\" HAVE_LSXINTRIN_H)\n      cmake_pop_check_state()\n\n      if(COMPILER_SUPPORTS_LSX AND HAVE_LSXINTRIN_H)\n        set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/video/yuv2rgb/yuv_rgb_lsx.c\" APPEND PROPERTY COMPILE_OPTIONS \"-mlsx\")\n        set(HAVE_LSX TRUE)\n      endif()\n    endif()\n\n    if(SDL_LASX)\n      cmake_push_check_state()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -mlasx\")\n      check_c_source_compiles(\"\n          #ifndef __loongarch_asx\n          #error Assembler CPP flag not enabled\n          #endif\n          int main(int argc, char **argv) { return 0; }\" COMPILER_SUPPORTS_LASX)\n      check_include_file(\"lasxintrin.h\" HAVE_LASXINTRIN_H)\n      cmake_pop_check_state()\n      if(COMPILER_SUPPORTS_LASX AND HAVE_LASXINTRIN_H)\n        set(HAVE_LASX TRUE)\n      endif()\n    endif()\n  endif()\nendif()\n\nif(NOT HAVE_MMX)\n  set(SDL_DISABLE_MMX 1)\nendif()\n\nif(NOT HAVE_SSE)\n  set(SDL_DISABLE_SSE 1)\nendif()\n\nif(NOT HAVE_SSE2)\n  set(SDL_DISABLE_SSE2 1)\nendif()\n\nif(NOT HAVE_SSE3)\n  set(SDL_DISABLE_SSE3 1)\nendif()\n\nif(NOT HAVE_SSE4_1)\n  set(SDL_DISABLE_SSE4_1 1)\nendif()\n\nif(NOT HAVE_SSE4_2)\n  set(SDL_DISABLE_SSE4_2 1)\nendif()\n\nif(NOT HAVE_AVX)\n  set(SDL_DISABLE_AVX 1)\nendif()\n\nif(NOT HAVE_AVX2)\n  set(SDL_DISABLE_AVX2 1)\nendif()\n\nif(NOT HAVE_AVX512F)\n  set(SDL_DISABLE_AVX512F 1)\nendif()\n\nif(NOT HAVE_LSX)\n  set(SDL_DISABLE_LSX 1)\nendif()\n\nif(NOT HAVE_LASX)\n  set(SDL_DISABLE_LASX 1)\nendif()\n\nif(NOT HAVE_ARMNEON)\n  set(SDL_DISABLE_NEON 1)\nendif()\n\nset(SDL_DISABLE_ALLOCA 0)\ncheck_include_file(\"alloca.h\" \"HAVE_ALLOCA_H\")\nif(MSVC)\n  check_include_file(\"malloc.h\" \"HAVE_MALLOC_H\")\n  check_symbol_exists(\"_alloca\" \"malloc.h\" _ALLOCA_IN_MALLOC_H)\n  if(NOT HAVE_ALLOCA_H AND NOT _ALLOCA_IN_MALLOC_H)\n    set(SDL_DISABLE_ALLOCA 1)\n  endif()\nendif()\n\n# TODO: Can't deactivate on FreeBSD? w/o LIBC, SDL_stdinc.h can't define anything.\nif(SDL_LIBC)\n  set(available_headers)\n  set(HAVE_LIBC TRUE)\n  set(headers_to_check\n    float.h\n    iconv.h\n    inttypes.h\n    limits.h\n    malloc.h\n    math.h\n    memory.h\n    signal.h\n    stdarg.h\n    stdbool.h\n    stddef.h\n    stdint.h\n    stdio.h\n    stdlib.h\n    string.h\n    strings.h\n    sys/types.h\n    time.h\n    wchar.h\n  )\n  foreach(_HEADER IN LISTS headers_to_check)\n    string(TOUPPER \"${_HEADER}\" HEADER_IDENTIFIER)\n    string(REGEX REPLACE \"[./]\" \"_\" HEADER_IDENTIFIER \"${HEADER_IDENTIFIER}\")\n    set(LIBC_HAS_VAR \"LIBC_HAS_${HEADER_IDENTIFIER}\")\n    check_include_file(\"${_HEADER}\" \"${LIBC_HAS_VAR}\")\n    set(HAVE_${HEADER_IDENTIFIER} ${${LIBC_HAS_VAR}})\n    if(HAVE_${HEADER_IDENTIFIER})\n      list(APPEND available_headers \"${_HEADER}\")\n    endif()\n  endforeach()\n\n  set(symbols_to_check\n    abs acos acosf asin asinf atan atan2 atan2f atanf atof atoi\n    bcopy\n    ceil ceilf copysign copysignf cos cosf\n    _Exit exp expf\n    fabs fabsf floor floorf fmod fmodf fopen64 fseeko fseeko64\n    getenv\n    _i64toa index itoa\n    log log10 log10f logf lround lroundf _ltoa\n    malloc memcmp memcpy memmove memset modf modff\n    pow powf putenv\n    rindex round roundf\n    scalbn scalbnf setenv sin sinf sqr sqrt sqrtf sscanf strchr\n    strcmp strlcat strlcpy strlen strncmp strnlen strpbrk\n    strrchr strstr strnstr strtod strtok_r strtol strtoll strtoul strtoull\n    tan tanf trunc truncf\n    unsetenv\n    vsnprintf vsscanf\n    wcsnlen wcscmp wcsdup wcslcat wcslcpy wcslen wcsncmp wcsstr wcstol\n  )\n  if(WINDOWS)\n    list(APPEND symbols_to_check\n      _copysign _fseeki64 _strrev _ui64toa _uitoa _ultoa _wcsdup\n    )\n  else()\n    list(APPEND symbols_to_check\n        strcasestr\n    )\n  endif()\n  check_library_exists(m pow \"\" HAVE_LIBM)\n  cmake_push_check_state()\n  if(HAVE_LIBM)\n    sdl_link_dependency(math LIBS m)\n    list(APPEND CMAKE_REQUIRED_LIBRARIES m)\n  endif()\n  foreach(_FN IN LISTS symbols_to_check)\n    string(TOUPPER ${_FN} _UPPER)\n    set(LIBC_HAS_VAR \"LIBC_HAS_${_UPPER}\")\n    check_symbol_exists(\"${_FN}\" \"${available_headers}\" ${LIBC_HAS_VAR})\n    set(HAVE_${_UPPER} ${${LIBC_HAS_VAR}})\n  endforeach()\n  cmake_pop_check_state()\n\n  cmake_push_check_state()\n  if(MSVC)\n    string(APPEND CMAKE_REQUIRED_FLAGS \" -we4244 -WX\")  # 'conversion' conversion from 'type1' to 'type2', possible loss of data\n  else()\n    string(APPEND CMAKE_REQUIRED_FLAGS \" -Wfloat-conversion -Werror\")\n  endif()\n  foreach(math_fn isinf isnan)\n    string(TOUPPER \"${math_fn}\" MATH_FN)\n    check_c_source_compiles(\"\n        #include <math.h>\n        int main() {\n          double d = 3.14159;\n          return ${math_fn}(d);\n        }\n      \" LIBC_HAS_${MATH_FN})\n    set(HAVE_${MATH_FN} ${LIBC_HAS_${MATH_FN}})\n\n    check_c_source_compiles(\"\n      #include <math.h>\n      int main() {\n        float f = 3.14159f;\n        return ${math_fn}(f);\n      }\n    \" LIBC_${MATH_FN}_HANDLES_FLOAT)\n    set(HAVE_${MATH_FN}_FLOAT_MACRO ${LIBC_${MATH_FN}_HANDLES_FLOAT})\n\n    check_c_source_compiles(\"\n      #include <math.h>\n      int main() {\n        float f = 3.14159f;\n        return ${math_fn}f(f);\n      }\n    \" LIBC_HAS_${MATH_FN}F)\n    set(HAVE_${MATH_FN}F \"${LIBC_HAS_${MATH_FN}F}\")\n  endforeach()\n  cmake_pop_check_state()\n\n  if(NOT WINDOWS)\n    check_symbol_exists(fdatasync \"unistd.h\" HAVE_FDATASYNC)\n    check_symbol_exists(gethostname \"unistd.h\" HAVE_GETHOSTNAME)\n    check_symbol_exists(getpagesize \"unistd.h\" HAVE_GETPAGESIZE)\n    check_symbol_exists(sigaction \"signal.h\" HAVE_SIGACTION)\n    check_symbol_exists(setjmp \"setjmp.h\" HAVE_SETJMP)\n    check_symbol_exists(nanosleep \"time.h\" HAVE_NANOSLEEP)\n    check_symbol_exists(gmtime_r \"time.h\" HAVE_GMTIME_R)\n    check_symbol_exists(localtime_r \"time.h\" HAVE_LOCALTIME_R)\n    check_symbol_exists(nl_langinfo \"langinfo.h\" HAVE_NL_LANGINFO)\n    check_symbol_exists(sysconf \"unistd.h\" HAVE_SYSCONF)\n    check_symbol_exists(sysctlbyname \"sys/types.h;sys/sysctl.h\" HAVE_SYSCTLBYNAME)\n    check_symbol_exists(getauxval \"sys/auxv.h\" HAVE_GETAUXVAL)\n    check_symbol_exists(elf_aux_info \"sys/auxv.h\" HAVE_ELF_AUX_INFO)\n    check_symbol_exists(poll \"poll.h\" HAVE_POLL)\n    check_symbol_exists(memfd_create \"sys/mman.h\" HAVE_MEMFD_CREATE)\n    check_symbol_exists(posix_fallocate \"fcntl.h\" HAVE_POSIX_FALLOCATE)\n\n    if(SDL_SYSTEM_ICONV)\n      check_c_source_compiles(\"\n        #define LIBICONV_PLUG 1 /* in case libiconv header is in include path */\n        #include <stddef.h>\n        #include <iconv.h>\n        int main(int argc, char **argv) {\n            return !iconv_open(NULL,NULL);\n        }\" ICONV_IN_LIBC)\n\n      cmake_push_check_state()\n      list(APPEND CMAKE_REQUIRED_LIBRARIES iconv)\n      check_c_source_compiles(\"\n        #include <stddef.h>\n        #include <iconv.h>\n        int main(int argc, char **argv) {\n            return !iconv_open(NULL,NULL);\n        }\" ICONV_IN_LIBICONV)\n      cmake_pop_check_state()\n\n      if(ICONV_IN_LIBC OR ICONV_IN_LIBICONV)\n        set(HAVE_ICONV 1)\n        set(HAVE_SYSTEM_ICONV TRUE)\n        if(ICONV_IN_LIBICONV AND (SDL_LIBICONV OR (NOT ICONV_IN_LIBC)))\n          sdl_link_dependency(iconv LIBS iconv)\n          set(SDL_USE_LIBICONV 1)\n          set(HAVE_LIBICONV TRUE)\n        endif()\n      endif()\n    endif()\n\n    check_struct_has_member(\"struct sigaction\" \"sa_sigaction\" \"signal.h\" HAVE_SA_SIGACTION)\n    check_struct_has_member(\"struct stat\" \"st_mtim\" \"sys/stat.h\" HAVE_ST_MTIM)\n  endif()\nelse()\n  set(headers\n    stdarg.h\n    stddef.h\n    stdint.h\n  )\n  foreach(_HEADER ${headers})\n    string(TOUPPER \"${_HEADER}\" HEADER_IDENTIFIER)\n    string(REGEX REPLACE \"[./]\" \"_\" HEADER_IDENTIFIER \"${HEADER_IDENTIFIER}\")\n    set(LIBC_HAS_VAR \"LIBC_HAS_${HEADER_IDENTIFIER}\")\n    check_include_file(\"${_HEADER}\" \"${LIBC_HAS_VAR}\")\n    set(HAVE_${HEADER_IDENTIFIER} ${${LIBC_HAS_VAR}})\n  endforeach()\n\n  if(MSVC AND USE_CLANG)\n    check_c_compiler_flag(\"/Q_no-use-libirc\" HAS_Q_NO_USE_LIBIRC)\n  endif()\nendif()\n\n# General source files\nsdl_glob_sources(\n  \"${SDL3_SOURCE_DIR}/src/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/atomic/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/audio/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/camera/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/core/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/cpuinfo/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/dynapi/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/events/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/file/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/file/generic/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/filesystem/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/gpu/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/joystick/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/haptic/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/hidapi/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/locale/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/main/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/misc/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/power/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/render/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/render/*/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/sensor/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/stdlib/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/storage/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/thread/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/time/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/timer/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/video/*.c\"\n  \"${SDL3_SOURCE_DIR}/src/video/yuv2rgb/*.c\"\n)\n\n# Build uclibc as a static library such that non-used symbols don't end up in the SDL3 shared library.\nfile(GLOB SDL_UCLIBC_SOURCES \"${SDL3_SOURCE_DIR}/src/libm/*.c\")\nadd_library(SDL_uclibc STATIC \"${SDL_UCLIBC_SOURCES}\")\ntarget_compile_definitions(SDL_uclibc PRIVATE USING_GENERATED_CONFIG_H)\ntarget_include_directories(SDL_uclibc PRIVATE \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>/build_config\")\ntarget_include_directories(SDL_uclibc PRIVATE \"${SDL3_SOURCE_DIR}/src\")\ntarget_include_directories(SDL_uclibc PRIVATE \"${SDL3_SOURCE_DIR}/include\")\nSDL_AddCommonCompilerFlags(SDL_uclibc)\nsdl_sources(STATIC \"$<TARGET_OBJECTS:SDL_uclibc>\")\nif(TARGET SDL3-shared)\n  target_link_libraries(SDL3-shared PRIVATE SDL_uclibc)\nendif()\nif(HAVE_GCC_FVISIBILITY)\n  set_property(TARGET SDL_uclibc PROPERTY C_VISIBILITY_PRESET \"hidden\")\nendif()\n\n# Enable/disable various subsystems of the SDL library\nforeach(_SUB ${SDL_SUBSYSTEMS})\n  string(TOUPPER ${_SUB} _OPT)\n  if(NOT SDL_${_OPT})\n    set(SDL_${_OPT}_DISABLED 1)\n  endif()\nendforeach()\nif(SDL_HAPTIC)\n  if(NOT SDL_JOYSTICK)\n    # Haptic requires some private functions from the joystick subsystem.\n    message(FATAL_ERROR \"SDL_HAPTIC requires SDL_JOYSTICK, which is not enabled\")\n  endif()\nendif()\n\n\n# General SDL subsystem options, valid for all platforms\nif(SDL_AUDIO)\n  # CheckDummyAudio/CheckDiskAudio - valid for all platforms\n  if(SDL_DUMMYAUDIO)\n    set(SDL_AUDIO_DRIVER_DUMMY 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/dummy/*.c\")\n    set(HAVE_DUMMYAUDIO TRUE)\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n  if(SDL_DISKAUDIO)\n    set(SDL_AUDIO_DRIVER_DISK 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/disk/*.c\")\n    set(HAVE_DISKAUDIO TRUE)\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\nendif()\n\nif(SDL_CAMERA)\n  # CheckDummyCamera/CheckDiskCamera - valid for all platforms\n  if(SDL_DUMMYCAMERA)\n    set(SDL_CAMERA_DRIVER_DUMMY 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/dummy/*.c\")\n    set(HAVE_DUMMYCAMERA TRUE)\n    set(HAVE_SDL_CAMERA TRUE)\n  endif()\n  # !!! FIXME: for later.\n  #if(SDL_DISKCAMERA)\n  #  set(SDL_CAMERA_DRIVER_DISK 1)\n  #  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/disk/*.c\")\n  #  set(HAVE_DISKCAMERA TRUE)\n  #  set(HAVE_SDL_CAMERA TRUE)\n  #endif()\nendif()\n\nif(UNIX OR APPLE)\n  # Relevant for Unix/Darwin only\n  set(DYNAPI_NEEDS_DLOPEN 1)\n  CheckDLOPEN()\n  if(HAVE_DLOPEN)\n    set(SDL_LOADSO_DLOPEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/dlopen/*.c\")\n    set(HAVE_SDL_LOADSO TRUE)\n  endif()\nendif()\n\nif(UNIX OR APPLE OR HAIKU OR RISCOS)\n  CheckO_CLOEXEC()\nendif()\n\nif(SDL_JOYSTICK)\n  if(SDL_VIRTUAL_JOYSTICK)\n    set(HAVE_VIRTUAL_JOYSTICK TRUE)\n    set(SDL_JOYSTICK_VIRTUAL 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/virtual/*.c\")\n  endif()\nendif()\n\nif(SDL_VIDEO)\n  if(SDL_DUMMYVIDEO)\n    set(SDL_VIDEO_DRIVER_DUMMY 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/dummy/*.c\")\n    set(HAVE_DUMMYVIDEO TRUE)\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\nendif()\n\n# Platform-specific options and settings\nif(ANDROID)\n  list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake/android\")\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/core/android/*.c\")\n  sdl_sources(\"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\")\n  set_property(SOURCE \"${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -Wno-declaration-after-statement\")\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/android/*.c\")\n  set(HAVE_SDL_MISC TRUE)\n\n  # SDL_spinlock.c Needs to be compiled in ARM mode.\n  # There seems to be no better way currently to set the ARM mode.\n  # see: https://issuetracker.google.com/issues/62264618\n  # Another option would be to set ARM mode to all compiled files\n  cmake_push_check_state()\n  string(APPEND CMAKE_REQUIRED_FLAGS \" -Werror=unused-command-line-argument\")\n  check_c_compiler_flag(-marm HAVE_ARM_MODE)\n  cmake_pop_check_state()\n  if(HAVE_ARM_MODE)\n    set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/atomic/SDL_spinlock.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -marm\")\n    set_source_files_properties(src/atomic/SDL_spinlock.c PROPERTIES SKIP_PRECOMPILE_HEADERS 1)\n  endif()\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_OPENSLES 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/openslES/*.c\")\n\n    sdl_link_dependency(opensles LIBS ${ANDROID_DL_LIBRARY} OpenSLES)\n\n    set(SDL_AUDIO_DRIVER_AAUDIO 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/aaudio/*.c\")\n\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_ANDROID 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/android/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)  # !!! FIXME: this might need something else for .apk data?\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_HAPTIC)\n    set(SDL_HAPTIC_ANDROID 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/android/*.c\")\n    set(HAVE_SDL_HAPTIC TRUE)\n  endif()\n\n  if(SDL_HIDAPI)\n    CheckHIDAPI()\n  endif()\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_ANDROID 1)\n    sdl_glob_sources(\n      \"${SDL3_SOURCE_DIR}/src/joystick/android/*.c\"\n    )\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  set(SDL_LOADSO_DLOPEN 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/dlopen/*.c\")\n  set(HAVE_SDL_LOADSO TRUE)\n\n  if(SDL_POWER)\n    set(SDL_POWER_ANDROID 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/android/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/android/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/unix/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_SENSOR)\n    set(SDL_SENSOR_ANDROID 1)\n    set(HAVE_SDL_SENSORS TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/android/*.c\")\n  endif()\n\n  if(SDL_CAMERA)\n    set(SDL_CAMERA_DRIVER_ANDROID 1)\n    set(HAVE_CAMERA TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/android/*.c\")\n  endif()\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_ANDROID 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/android/*.c\")\n    set(HAVE_SDL_VIDEO TRUE)\n\n    # Core stuff\n    # find_library(ANDROID_DL_LIBRARY dl)\n    # FIXME failing dlopen https://github.com/android-ndk/ndk/issues/929\n    sdl_link_dependency(android_video LIBS dl log android)\n    sdl_compile_definitions(PRIVATE \"GL_GLEXT_PROTOTYPES\")\n\n    #enable gles\n    if(SDL_OPENGLES)\n      set(SDL_VIDEO_OPENGL_EGL 1)\n      set(HAVE_OPENGLES TRUE)\n      set(SDL_VIDEO_OPENGL_ES 1)\n      set(SDL_VIDEO_OPENGL_ES2 1)\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\n\n      sdl_link_dependency(opengles LIBS GLESv1_CM GLESv2)\n    endif()\n\n    if(SDL_VULKAN)\n      check_c_source_compiles(\"\n      #if defined(__ARM_ARCH) && __ARM_ARCH < 7\n      #error Vulkan doesn't work on this configuration\n      #endif\n      int main(int argc, char **argv) { return 0; }\n      \" VULKAN_PASSED_ANDROID_CHECKS)\n      if(VULKAN_PASSED_ANDROID_CHECKS)\n        set(SDL_VIDEO_VULKAN 1)\n        set(HAVE_VULKAN TRUE)\n        if(SDL_RENDER_VULKAN)\n          set(SDL_VIDEO_RENDER_VULKAN 1)\n          set(HAVE_RENDER_VULKAN TRUE)\n        endif()\n      endif()\n    endif()\n  endif()\n\n  CheckPTHREAD()\n  if(SDL_CLOCK_GETTIME)\n    set(HAVE_CLOCK_GETTIME 1)\n  endif()\n\n  if(SDL_ANDROID_JAR)\n    find_package(Java)\n    find_package(SdlAndroidPlatform MODULE)\n\n    if(Java_FOUND AND SdlAndroidPlatform_FOUND AND NOT CMAKE_VERSION VERSION_LESS \"3.19\")\n      include(UseJava)\n      set(path_android_jar \"${SDL_ANDROID_PLATFORM_ROOT}/android.jar\")\n      set(android_java_sources_root \"${SDL3_SOURCE_DIR}/android-project/app/src/main/java\")\n      file(GLOB SDL_JAVA_SOURCES \"${android_java_sources_root}/org/libsdl/app/*.java\")\n      set(CMAKE_JAVA_COMPILE_FLAGS \"-encoding;utf-8\")\n      add_jar(SDL3-jar\n        SOURCES ${SDL_JAVA_SOURCES}\n        INCLUDE_JARS \"${path_android_jar}\"\n        OUTPUT_NAME \"SDL3\"\n        VERSION \"${SDL3_VERSION}\"\n      )\n      set_property(TARGET SDL3-jar PROPERTY OUTPUT \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}.jar\")\n      add_library(SDL3__Jar INTERFACE)\n      add_library(SDL3::Jar ALIAS SDL3__Jar)\n      get_property(sdl3_jar_location TARGET SDL3-jar PROPERTY JAR_FILE)\n      set_property(TARGET SDL3__Jar PROPERTY JAR_FILE \"${sdl3_jar_location}\")\n      set(javasourcesjar \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-sources.jar\")\n      string(REGEX REPLACE \"${android_java_sources_root}/\" \"\" sdl_relative_java_sources \"${SDL_JAVA_SOURCES}\")\n      add_custom_command(\n        OUTPUT \"${javasourcesjar}\"\n        COMMAND ${Java_JAR_EXECUTABLE} cf \"${javasourcesjar}\" ${sdl_relative_java_sources}\n        WORKING_DIRECTORY \"${android_java_sources_root}\"\n        DEPENDS ${SDL_JAVA_SOURCES}\n      )\n      add_custom_target(SDL3-javasources ALL DEPENDS \"${javasourcesjar}\")\n      if(SDL_INSTALL_DOCS)\n        set(javadocdir \"${SDL3_BINARY_DIR}/docs/javadoc\")\n        set(javadocjar \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-javadoc.jar\")\n        set(javadoc_index_html \"${javadocdir}/index.html\")\n        add_custom_command(\n          OUTPUT \"${javadoc_index_html}\"\n          COMMAND ${CMAKE_COMMAND} -E rm -rf \"${javadocdir}\" \"${javadocjar}\"\n          COMMAND ${Java_JAVADOC_EXECUTABLE} -encoding utf8 -d \"${javadocdir}\"\n            -classpath \"${path_android_jar}\"\n            -author -use -version ${SDL_JAVA_SOURCES}\n          DEPENDS ${SDL_JAVA_SOURCES} \"${path_android_jar}\"\n        )\n        add_custom_command(\n          OUTPUT \"${javadocjar}\"\n          COMMAND ${Java_JAR_EXECUTABLE} -c -f \"${javadocjar}\"\n            -C \"${javadocdir}\" *\n          WORKING_DIRECTORY \"${javadocdir}\"\n          DEPENDS ${javadoc_index_html}\n        )\n        add_custom_target(SDL3-javadoc ALL DEPENDS \"${javadoc_index_html}\" \"${javadocjar}\")\n        set_property(TARGET SDL3-javadoc PROPERTY OUTPUT_DIR \"${javadocdir}\")\n      endif()\n    endif()\n  endif()\n\nelseif(EMSCRIPTEN)\n  # Hide noisy warnings that intend to aid mostly during initial stages of porting a new\n  # project. Uncomment at will for verbose cross-compiling -I/../ path info.\n  sdl_compile_options(PRIVATE \"-Wno-warn-absolute-paths\")\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/emscripten/*.c\")\n  set(HAVE_SDL_MAIN_CALLBACKS TRUE)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/emscripten/*.c\")\n  set(HAVE_SDL_MISC TRUE)\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/emscripten/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_EMSCRIPTEN 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/emscripten/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_CAMERA)\n    set(SDL_CAMERA_DRIVER_EMSCRIPTEN 1)\n    set(HAVE_CAMERA TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/emscripten/*.c\")\n  endif()\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/emscripten/*.c\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  if(SDL_POWER)\n    set(SDL_POWER_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/emscripten/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/emscripten/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/unix/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_CLOCK_GETTIME)\n    set(HAVE_CLOCK_GETTIME 1)\n  endif()\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_EMSCRIPTEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/emscripten/*.c\")\n    set(HAVE_SDL_VIDEO TRUE)\n\n    #enable gles\n    if(SDL_OPENGLES)\n      set(SDL_VIDEO_OPENGL_EGL 1)\n      set(HAVE_OPENGLES TRUE)\n      set(SDL_VIDEO_OPENGL_ES2 1)\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\n    endif()\n  endif()\n\n  CheckPTHREAD()\n  CheckLibUnwind()\n\nelseif(UNIX AND NOT APPLE AND NOT RISCOS AND NOT HAIKU)\n  if(SDL_AUDIO)\n    if(NETBSD)\n        set(SDL_AUDIO_DRIVER_NETBSD 1)\n        sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/netbsd/*.c\")\n        set(HAVE_SDL_AUDIO TRUE)\n    elseif(QNX)\n        set(SDL_AUDIO_DRIVER_QNX 1)\n        sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/qnx/*.c\")\n        sdl_link_dependency(asound LIBS asound)\n        set(HAVE_SDL_AUDIO TRUE)\n    endif()\n    CheckOSS()\n    CheckALSA()\n    CheckJACK()\n    CheckPipewire()\n    CheckPulseAudio()\n    CheckSNDIO()\n  endif()\n\n  if(SDL_VIDEO)\n    # Need to check for Raspberry PI first and add platform specific compiler flags, otherwise the test for GLES fails!\n    CheckRPI()\n    # Need to check for ROCKCHIP platform and get rid of \"Can't window GBM/EGL surfaces on window creation.\"\n    CheckROCKCHIP()\n    CheckX11()\n    # Need to check for EGL first because KMSDRM and Wayland depend on it.\n    CheckEGL()\n    CheckKMSDRM()\n    CheckGLX()\n    CheckOpenGL()\n    CheckOpenGLES()\n    CheckWayland()\n    CheckOpenVR()\n    CheckVivante()\n    CheckVulkan()\n    CheckQNXScreen()\n\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/tray/unix/*.c\")\n    set(HAVE_SDL_TRAY TRUE)\n  endif()\n\n  if(UNIX)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/core/unix/*.c\")\n\n    check_c_source_compiles(\"\n        #include <linux/input.h>\n        #ifndef EVIOCGNAME\n        #error EVIOCGNAME() ioctl not available\n        #endif\n        int main(int argc, char** argv) { return 0; }\" HAVE_LINUX_INPUT_H)\n\n    if(LINUX)\n      check_c_source_compiles(\"\n          #include <linux/kd.h>\n          #include <linux/keyboard.h>\n          #include <sys/ioctl.h>\n          int main(int argc, char **argv) {\n              struct kbentry kbe;\n              kbe.kb_table = KG_CTRL;\n              ioctl(0, KDGKBENT, &kbe);\n              return 0;\n          }\" HAVE_INPUT_KD)\n      check_c_source_compiles(\"\n          #include <linux/videodev2.h>\n          int main(int argc, char** argv) { return 0; }\" HAVE_LINUX_VIDEODEV2_H)\n    elseif(FREEBSD)\n      check_c_source_compiles(\"\n          #include <sys/kbio.h>\n          #include <sys/ioctl.h>\n          int main(int argc, char **argv) {\n              accentmap_t accTable;\n              ioctl(0, KDENABIO, 1);\n              return 0;\n          }\" HAVE_INPUT_KBIO)\n    elseif(OPENBSD OR NETBSD)\n      check_c_source_compiles(\"\n          #include <sys/time.h>\n          #include <dev/wscons/wsconsio.h>\n          #include <dev/wscons/wsksymdef.h>\n          #include <dev/wscons/wsksymvar.h>\n          #include <sys/ioctl.h>\n          int main(int argc, char **argv) {\n              struct wskbd_map_data data;\n              ioctl(0, WSKBDIO_GETMAP, &data);\n              return 0;\n          }\" HAVE_INPUT_WSCONS)\n    endif()\n\n    if(SDL_CAMERA AND HAVE_LINUX_VIDEODEV2_H)\n      set(SDL_CAMERA_DRIVER_V4L2 1)\n      set(HAVE_CAMERA TRUE)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/v4l2/*.c\")\n    endif()\n\n    if(HAVE_LINUX_INPUT_H)\n      set(SDL_INPUT_LINUXEV 1)\n    endif()\n\n    if(SDL_HAPTIC AND HAVE_LINUX_INPUT_H)\n      set(SDL_HAPTIC_LINUX 1)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/linux/*.c\")\n      set(HAVE_SDL_HAPTIC TRUE)\n    endif()\n\n    if(HAVE_INPUT_KD)\n      set(SDL_INPUT_LINUXKD 1)\n    endif()\n\n    if(HAVE_INPUT_KBIO)\n      set(SDL_INPUT_FBSDKBIO 1)\n    endif()\n\n    if(HAVE_INPUT_WSCONS)\n      set(SDL_INPUT_WSCONS 1)\n    endif()\n\n    CheckLibUDev()\n    check_include_file(\"sys/inotify.h\" HAVE_SYS_INOTIFY_H)\n    check_symbol_exists(inotify_init \"sys/inotify.h\" HAVE_INOTIFY_INIT)\n    check_symbol_exists(inotify_init1 \"sys/inotify.h\" HAVE_INOTIFY_INIT1)\n\n    if(HAVE_SYS_INOTIFY_H AND HAVE_INOTIFY_INIT)\n      set(HAVE_INOTIFY 1)\n    endif()\n\n    if(PKG_CONFIG_FOUND)\n      if(SDL_DBUS)\n        pkg_search_module(DBUS dbus-1 dbus)\n        if(DBUS_FOUND)\n          set(HAVE_DBUS_DBUS_H TRUE)\n          sdl_include_directories(PRIVATE SYSTEM ${DBUS_INCLUDE_DIRS})\n          # Fcitx need only dbus.\n          set(HAVE_FCITX TRUE)\n          set(HAVE_DBUS TRUE)\n        endif()\n      endif()\n\n      if(SDL_IBUS)\n        pkg_search_module(IBUS ibus-1.0 ibus)\n        find_path(HAVE_SYS_INOTIFY_H NAMES sys/inotify.h)\n        if(IBUS_FOUND AND HAVE_SYS_INOTIFY_H)\n          set(HAVE_IBUS_IBUS_H TRUE)\n          sdl_include_directories(PRIVATE SYSTEM ${IBUS_INCLUDE_DIRS})\n          set(HAVE_IBUS TRUE)\n        endif()\n      endif()\n\n      if (HAVE_IBUS_IBUS_H OR HAVE_FCITX)\n        set(SDL_USE_IME 1)\n      endif()\n\n      if(SDL_LIBURING)\n        pkg_search_module(LIBURING liburing-ffi)\n        find_path(HAVE_LIBURING_H NAMES liburing.h)\n        if(LIBURING_FOUND AND HAVE_LIBURING_H)\n          set(HAVE_LIBURING_LIBURING_H TRUE)\n          sdl_include_directories(PRIVATE SYSTEM ${LIBURING_INCLUDE_DIRS})\n          set(HAVE_LIBURING TRUE)\n        endif()\n      endif()\n\n      if((FREEBSD OR NETBSD) AND NOT HAVE_INOTIFY)\n        set(LibInotify_PKG_CONFIG_SPEC libinotify)\n        pkg_check_modules(PC_LIBINOTIFY IMPORTED_TARGET ${LibInotify_PKG_CONFIG_SPEC})\n        if(PC_LIBINOTIFY_FOUND)\n          set(HAVE_INOTIFY 1)\n          sdl_link_dependency(libinotify LIBS PkgConfig::PC_LIBINOTIFY PKG_CONFIG_PREFIX PC_LIBINOTIFY PKG_CONFIG_SPECS ${LibInotify_PKG_CONFIG_SPEC})\n        endif()\n      endif()\n\n      CheckLibUnwind()\n    endif()\n\n    if(HAVE_DBUS_DBUS_H)\n      sdl_sources(\n        \"${SDL3_SOURCE_DIR}/src/core/linux/SDL_dbus.c\"\n        \"${SDL3_SOURCE_DIR}/src/core/linux/SDL_system_theme.c\"\n      )\n    endif()\n\n    if(SDL_USE_IME)\n      sdl_sources(\"${SDL3_SOURCE_DIR}/src/core/linux/SDL_ime.c\")\n    endif()\n\n    if(HAVE_IBUS_IBUS_H)\n      sdl_sources(\"${SDL3_SOURCE_DIR}/src/core/linux/SDL_ibus.c\")\n    endif()\n\n    if(HAVE_FCITX)\n      sdl_sources(\"${SDL3_SOURCE_DIR}/src/core/linux/SDL_fcitx.c\")\n    endif()\n\n    if(HAVE_LIBUDEV_H)\n      sdl_sources(\"${SDL3_SOURCE_DIR}/src/core/linux/SDL_udev.c\")\n    endif()\n\n    if(HAVE_LINUX_INPUT_H)\n      sdl_sources(\n        \"${SDL3_SOURCE_DIR}/src/core/linux/SDL_evdev.c\"\n        \"${SDL3_SOURCE_DIR}/src/core/linux/SDL_evdev_kbd.c\"\n      )\n    endif()\n\n    if(HAVE_INPUT_KBIO)\n      sdl_sources(\"${SDL3_SOURCE_DIR}/src/core/freebsd/SDL_evdev_kbd_freebsd.c\")\n    endif()\n\n    if(HAVE_INPUT_WSCONS)\n      sdl_sources(\n        \"${SDL3_SOURCE_DIR}/src/core/openbsd/SDL_wscons_kbd.c\"\n        \"${SDL3_SOURCE_DIR}/src/core/openbsd/SDL_wscons_mouse.c\"\n      )\n    endif()\n\n    if(SDL_GPU AND SDL_GPU_DXVK)\n      if(PKG_CONFIG_FOUND)\n        pkg_search_module(DXVK_NATIVE dxvk-dxgi)\n        if(DXVK_NATIVE_FOUND)\n          set(HAVE_D3D11_H TRUE)\n          sdl_include_directories(PRIVATE SYSTEM ${DXVK_NATIVE_INCLUDE_DIRS})\n        endif()\n      endif()\n    endif()\n\n    if(HAVE_LIBURING_H)\n      sdl_sources(\"${SDL3_SOURCE_DIR}/src/file/io_uring/SDL_asyncio_liburing.c\")\n    endif()\n\n    # Always compiled for Linux, unconditionally:\n    sdl_sources(\n      \"${SDL3_SOURCE_DIR}/src/core/linux/SDL_evdev_capabilities.c\"\n      \"${SDL3_SOURCE_DIR}/src/core/linux/SDL_threadprio.c\"\n    )\n\n    # src/core/unix/*.c is included in a generic if(UNIX) section, elsewhere.\n  endif()\n\n  if(SDL_HIDAPI)\n    CheckHIDAPI()\n  endif()\n\n  if(SDL_JOYSTICK)\n    if(FREEBSD OR NETBSD OR OPENBSD OR BSDI)\n      CheckUSBHID()\n    endif()\n    if((LINUX OR FREEBSD) AND HAVE_LINUX_INPUT_H AND NOT ANDROID)\n      set(SDL_JOYSTICK_LINUX 1)\n      sdl_glob_sources(\n        \"${SDL3_SOURCE_DIR}/src/joystick/linux/*.c\"\n      )\n      set(HAVE_SDL_JOYSTICK TRUE)\n    endif()\n  endif()\n\n  CheckPTHREAD()\n\n  if(SDL_CLOCK_GETTIME)\n    check_library_exists(c clock_gettime \"\" FOUND_CLOCK_GETTIME_LIBC)\n    if(FOUND_CLOCK_GETTIME_LIBC)\n      set(HAVE_CLOCK_GETTIME 1)\n    else()\n      check_library_exists(rt clock_gettime \"\" FOUND_CLOCK_GETTIME_LIBRT)\n      if(FOUND_CLOCK_GETTIME_LIBRT)\n        set(HAVE_CLOCK_GETTIME 1)\n        sdl_link_dependency(clock LIBS rt)\n      endif()\n    endif()\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/unix/*.c\")\n  set(HAVE_SDL_MISC TRUE)\n\n  if(SDL_POWER)\n    if(LINUX)\n      set(SDL_POWER_LINUX 1)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/linux/*.c\")\n      set(HAVE_SDL_POWER TRUE)\n    endif()\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/unix/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_FILESYSTEM_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/unix/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_STORAGE_GENERIC 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/generic/*.c\")\n  if(LINUX)\n    set(SDL_STORAGE_STEAM 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/steam/*.c\")\n  endif()\n  set(HAVE_SDL_STORAGE 1)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/unix/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  set(SDL_RLD_FLAGS \"\")\n  if(SDL_RPATH AND SDL_SHARED)\n    if(BSDI OR FREEBSD OR LINUX OR NETBSD)\n      cmake_push_check_state()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" -Wl,--enable-new-dtags\")\n      check_c_compiler_flag(\"\" HAVE_ENABLE_NEW_DTAGS)\n      cmake_pop_check_state()\n      if(HAVE_ENABLE_NEW_DTAGS)\n        set(SDL_RLD_FLAGS \"-Wl,-rpath,\\${libdir} -Wl,--enable-new-dtags\")\n      else()\n        set(SDL_RLD_FLAGS \"-Wl,-rpath,\\${libdir}\")\n      endif()\n      set(HAVE_RPATH TRUE)\n    elseif(SOLARIS)\n      set(SDL_RLD_FLAGS \"-R\\${libdir}\")\n      set(HAVE_RPATH TRUE)\n    endif()\n  endif()\n\n  if(QNX)\n    # QNX's *printf() family generates a SIGSEGV if NULL is passed for a string\n    # specifier (on purpose), but SDL expects \"(null)\". Use the built-in\n    # implementation.\n    set (HAVE_VSNPRINTF 0)\n    set (USE_POSIX_SPAWN 1)\n  endif()\nelseif(WINDOWS)\n  check_c_source_compiles(\"\n    #include <windows.h>\n    int main(int argc, char **argv) { return 0; }\" HAVE_WIN32_CC)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/core/windows/*.c\")\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/windows/*.c\")\n\n  if(TARGET SDL3-shared AND MSVC AND NOT SDL_LIBC)\n    # Prevent codegen that would use the VC runtime libraries.\n    target_compile_options(SDL3-shared PRIVATE $<$<COMPILE_LANGUAGE:C,CXX>:/GS-> $<$<COMPILE_LANGUAGE:C,CXX>:/Gs1048576>)\n    target_compile_options(SDL_uclibc PRIVATE $<$<COMPILE_LANGUAGE:C,CXX>:/GS-> $<$<COMPILE_LANGUAGE:C,CXX>:/Gs1048576>)\n    if(SDL_CPU_X86)\n      target_compile_options(SDL3-shared PRIVATE \"/arch:SSE\")\n      target_compile_options(SDL3-SDL_uclibc PRIVATE \"/arch:SSE\")\n    endif()\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/windows/*.c\")\n\n  set(HAVE_SDL_MISC TRUE)\n\n  # Check for DirectX\n  if(SDL_DIRECTX)\n    cmake_push_check_state()\n    if(DEFINED MSVC_VERSION AND NOT ${MSVC_VERSION} LESS 1700)\n        set(USE_WINSDK_DIRECTX TRUE)\n    endif()\n    if(NOT MINGW AND NOT USE_WINSDK_DIRECTX)\n      if(\"$ENV{DXSDK_DIR}\" STREQUAL \"\")\n        message(FATAL_ERROR \"DIRECTX requires the \\$DXSDK_DIR environment variable to be set\")\n      endif()\n      string(APPEND CMAKE_REQUIRED_FLAGS \" /I\\\"$ENV{DXSDK_DIR}\\\\Include\\\"\")\n    endif()\n\n    check_include_file(d3d9.h HAVE_D3D9_H)\n    check_include_file(d3d11_1.h HAVE_D3D11_H)\n    check_include_file(ddraw.h HAVE_DDRAW_H)\n    check_include_file(dsound.h HAVE_DSOUND_H)\n    check_include_file(dinput.h HAVE_DINPUT_H)\n    if(SDL_CPU_ARM32)  # !!! FIXME: this should probably check if we're !(x86 or x86-64) instead of arm.\n      set(HAVE_DINPUT_H 0)\n    endif()\n    check_include_file(dxgi.h HAVE_DXGI_H)\n    cmake_pop_check_state()\n    if(HAVE_D3D9_H OR HAVE_D3D11_H OR HAVE_DDRAW_H OR HAVE_DSOUND_H OR HAVE_DINPUT_H)\n      set(HAVE_DIRECTX TRUE)\n      if(NOT MINGW AND NOT USE_WINSDK_DIRECTX)\n        if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n          set(PROCESSOR_ARCH \"x64\")\n        else()\n          set(PROCESSOR_ARCH \"x86\")\n        endif()\n        sdl_link_directories(\"$<BUILD_INTERFACE:$$ENV{DXSDK_DIR}\\\\lib\\\\${PROCESSOR_ARCH}>\")\n        sdl_include_directories(PRIVATE SYSTEM \"$<BUILD_INTERFACE:$ENV{DXSDK_DIR}\\\\Include>\")\n      endif()\n    endif()\n  endif()\n\n  if(SDL_XINPUT)\n    # xinput.h may need windows.h, but does not include it itself.\n    check_c_source_compiles(\"\n      #include <windows.h>\n      #include <xinput.h>\n      int main(int argc, char **argv) { return 0; }\" HAVE_XINPUT_H)\n  endif()\n\n  # headers needed elsewhere\n  check_c_source_compiles(\"\n    #define COBJMACROS\n    #include <windows.gaming.input.h>\n    static __x_ABI_CWindows_CGaming_CInput_CIGamepadStatics2 *s2;\n    int main(int argc, char **argv) { return 0; }\" HAVE_WINDOWS_GAMING_INPUT_H\n  )\n  check_c_source_compiles(\"\n    #include <stdbool.h>\n    #define COBJMACROS\n    #include <gameinput.h>\n    int main(int argc, char **argv) { return 0; }\" HAVE_GAMEINPUT_H\n  )\n  check_include_file(dxgi1_6.h HAVE_DXGI1_6_H)\n  check_include_file(tpcshrd.h HAVE_TPCSHRD_H)\n  check_include_file(roapi.h HAVE_ROAPI_H)\n  check_include_file(mmdeviceapi.h HAVE_MMDEVICEAPI_H)\n  check_include_file(audioclient.h HAVE_AUDIOCLIENT_H)\n  check_include_file(sensorsapi.h HAVE_SENSORSAPI_H)\n  check_include_file(shellscalingapi.h HAVE_SHELLSCALINGAPI_H)\n  check_c_source_compiles(\"\n    #include <windows.h>\n    #include <mfapi.h>\n    #include <mfidl.h>\n    #include <mfreadwrite.h>\n    int main(int argc, char **argv) { return 0; }\n    \" HAVE_MFAPI_H\n  )\n\n  if(SDL_AUDIO)\n    if(HAVE_DSOUND_H)\n      set(SDL_AUDIO_DRIVER_DSOUND 1)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/directsound/*.c\")\n      set(HAVE_SDL_AUDIO TRUE)\n    endif()\n\n    if(SDL_WASAPI AND HAVE_AUDIOCLIENT_H AND HAVE_MMDEVICEAPI_H)\n      set(SDL_AUDIO_DRIVER_WASAPI 1)\n      set(HAVE_WASAPI TRUE)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/wasapi/*.c\")\n      set(HAVE_SDL_AUDIO TRUE)\n    endif()\n  endif()\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_WINDOWS 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/windows/*.c\")\n\n    CheckOpenVR()\n\n    if(SDL_RENDER_D3D AND HAVE_D3D9_H)\n      set(SDL_VIDEO_RENDER_D3D 1)\n      set(HAVE_RENDER_D3D TRUE)\n    endif()\n    if(SDL_RENDER_D3D11 AND HAVE_D3D11_H)\n      set(SDL_VIDEO_RENDER_D3D11 1)\n      set(HAVE_RENDER_D3D11 TRUE)\n    endif()\n    if(SDL_RENDER_D3D12)\n      set(SDL_VIDEO_RENDER_D3D12 1)\n      set(HAVE_RENDER_D3D12 TRUE)\n    endif()\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\n\n  set(SDL_THREAD_GENERIC_COND_SUFFIX 1)\n  set(SDL_THREAD_GENERIC_RWLOCK_SUFFIX 1)\n  set(SDL_THREAD_WINDOWS 1)\n  sdl_sources(\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_syscond.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysrwlock.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_syscond_cv.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_sysmutex.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_sysrwlock_srw.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_syssem.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_systhread.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/windows/SDL_systls.c\"\n  )\n\n  set(HAVE_SDL_THREADS TRUE)\n\n  if(SDL_SENSOR AND HAVE_SENSORSAPI_H)\n    set(SDL_SENSOR_WINDOWS 1)\n    set(HAVE_SDL_SENSORS TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/windows/*.c\")\n  endif()\n\n  if(SDL_POWER)\n    set(SDL_POWER_WINDOWS 1)\n    sdl_sources(\"${SDL3_SOURCE_DIR}/src/power/windows/SDL_syspower.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/windows/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_FILESYSTEM_WINDOWS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/windows/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_WINDOWS 1)\n  set(HAVE_SDL_FSOPS TRUE)\n\n  set(SDL_STORAGE_GENERIC 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/generic/*.c\")\n  set(SDL_STORAGE_STEAM 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/steam/*.c\")\n  set(HAVE_SDL_STORAGE 1)\n\n  # Libraries for Win32 native and MinGW\n  sdl_link_dependency(base LIBS kernel32 user32 gdi32 winmm imm32 ole32 oleaut32 version uuid advapi32 setupapi shell32)\n\n  set(SDL_TIME_WINDOWS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/windows/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_WINDOWS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/windows/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  set(SDL_LOADSO_WINDOWS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/windows/*.c\")\n  set(HAVE_SDL_LOADSO TRUE)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/core/windows/*.c\")\n\n  if(SDL_VIDEO)\n    if(SDL_OPENGL)\n      set(SDL_VIDEO_OPENGL 1)\n      set(SDL_VIDEO_OPENGL_WGL 1)\n      set(SDL_VIDEO_RENDER_OGL 1)\n      set(HAVE_OPENGL TRUE)\n    endif()\n\n    if(SDL_OPENGLES)\n      set(SDL_VIDEO_OPENGL_EGL 1)\n      set(SDL_VIDEO_OPENGL_ES2 1)\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\n      set(HAVE_OPENGLES TRUE)\n    endif()\n\n    if(SDL_VULKAN)\n      set(SDL_VIDEO_VULKAN 1)\n      set(HAVE_VULKAN TRUE)\n      if(SDL_RENDER_VULKAN)\n        set(SDL_VIDEO_RENDER_VULKAN 1)\n        set(HAVE_RENDER_VULKAN TRUE)\n      endif()\n    endif()\n\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/tray/windows/*.c\")\n    set(HAVE_SDL_TRAY TRUE)\n  endif()\n\n  if(SDL_HIDAPI)\n    CheckHIDAPI()\n  endif()\n\n  if(SDL_JOYSTICK)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/windows/*.c\")\n\n    set(SDL_JOYSTICK_RAWINPUT 1)\n    if(HAVE_DINPUT_H)\n      set(SDL_JOYSTICK_DINPUT 1)\n      sdl_link_dependency(joystick LIBS dinput8)\n    endif()\n    if(HAVE_XINPUT_H)\n      set(SDL_JOYSTICK_XINPUT 1)\n      set(HAVE_XINPUT TRUE)\n    endif()\n    if(HAVE_WINDOWS_GAMING_INPUT_H)\n      set(SDL_JOYSTICK_WGI 1)\n    endif()\n    if(HAVE_GAMEINPUT_H)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/gdk/*.c\")\n      set(SDL_JOYSTICK_GAMEINPUT 1)\n    endif()\n    set(HAVE_SDL_JOYSTICK TRUE)\n\n    if(SDL_HAPTIC)\n      if(HAVE_DINPUT_H)\n        sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/windows/*.c\")\n        set(SDL_HAPTIC_DINPUT 1)\n        set(HAVE_SDL_HAPTIC TRUE)\n      endif()\n    endif()\n  endif()\n\n  if(SDL_CAMERA)\n    if(HAVE_MFAPI_H)\n      set(HAVE_CAMERA TRUE)\n      set(SDL_CAMERA_DRIVER_MEDIAFOUNDATION 1)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/mediafoundation/*.c\")\n    endif()\n  endif()\n\n  enable_language(RC)\n  sdl_glob_sources(SHARED \"${SDL3_SOURCE_DIR}/src/core/windows/*.rc\")\n  if(MINGW OR CYGWIN)\n    sdl_pc_link_options(\"-mwindows\")\n  endif()\n\nelseif(APPLE)\n  # TODO: rework this all for proper macOS, iOS and Darwin support\n\n  # !!! FIXME: all the `if(IOS OR TVOS OR VISIONOS)` checks should get merged into one variable, so we're ready for the next platform (or just WatchOS).\n\n  # We always need these libs on macOS at the moment.\n  # !!! FIXME: we need Carbon for some very old API calls in\n  # !!! FIXME:  src/video/cocoa/SDL_cocoakeyboard.c, but we should figure out\n  # !!! FIXME:  how to dump those.\n  if(MACOS)\n    set(SDL_FRAMEWORK_COCOA 1)\n    set(SDL_FRAMEWORK_CARBON 1)\n    set(SDL_FRAMEWORK_UTTYPES 1)\n  endif()\n  set(SDL_FRAMEWORK_FOUNDATION 1)\n  set(SDL_FRAMEWORK_COREVIDEO 1)\n\n  # iOS can use a CADisplayLink for main callbacks. macOS just uses the generic one atm.\n  if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/ios/*.m\")\n    set(HAVE_SDL_MAIN_CALLBACKS TRUE)\n  endif()\n\n  if(SDL_CAMERA)\n    if(MACOS OR IOS)\n      set(SDL_CAMERA_DRIVER_COREMEDIA 1)\n      set(HAVE_CAMERA TRUE)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/coremedia/*.m\")\n    endif()\n  endif()\n\n  if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/ios/*.m\")\n  else()\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/macos/*.m\")\n  endif()\n  set(HAVE_SDL_MISC TRUE)\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_COREAUDIO 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/coreaudio/*.m\")\n    set(HAVE_SDL_AUDIO TRUE)\n    set(SDL_FRAMEWORK_COREAUDIO 1)\n    set(SDL_FRAMEWORK_AUDIOTOOLBOX 1)\n    set(SDL_FRAMEWORK_AVFOUNDATION 1)\n  endif()\n\n  if(SDL_HIDAPI)\n    CheckHIDAPI()\n  endif()\n\n  if(SDL_JOYSTICK)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/apple/*.m\")\n    if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n      set(SDL_JOYSTICK_MFI 1)\n      if(IOS OR VISIONOS OR WATCHOS)\n        set(SDL_FRAMEWORK_COREMOTION 1)\n      endif()\n      set(SDL_FRAMEWORK_GAMECONTROLLER 1)\n      set(SDL_FRAMEWORK_COREHAPTICS 1)\n    else()\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/darwin/*.c\")\n      set_property(SOURCE ${MFI_JOYSTICK_SOURCES} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fobjc-weak\")\n      check_objc_source_compiles(\"\n          #include <AvailabilityMacros.h>\n          #include <TargetConditionals.h>\n          #import <Foundation/Foundation.h>\n          #import <GameController/GameController.h>\n          #if MAC_OS_X_VERSION_MIN_REQUIRED < 1080\n          #error GameController framework doesn't work on this configuration\n          #endif\n          #if TARGET_CPU_X86\n          #error GameController framework doesn't work on this configuration\n          #endif\n          int main() { return 0; }\" HAVE_FRAMEWORK_GAMECONTROLLER)\n      check_objc_source_compiles(\"\n          #include <AvailabilityMacros.h>\n          #include <TargetConditionals.h>\n          #import <Foundation/Foundation.h>\n          #import <CoreHaptics/CoreHaptics.h>\n          int main() { return 0; }\" HAVE_FRAMEWORK_COREHAPTICS)\n      if(HAVE_FRAMEWORK_GAMECONTROLLER AND HAVE_FRAMEWORK_COREHAPTICS)\n        # Only enable MFI if we also have CoreHaptics to ensure rumble works\n        set(SDL_JOYSTICK_MFI 1)\n        set(SDL_FRAMEWORK_GAMECONTROLLER 1)\n        set(SDL_FRAMEWORK_COREHAPTICS 1)\n      endif()\n      if(NOT VISIONOS)\n        set(SDL_JOYSTICK_IOKIT 1)\n        set(SDL_FRAMEWORK_IOKIT 1)\n      endif()\n      set(SDL_FRAMEWORK_FF 1)\n    endif()\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  if(SDL_HAPTIC)\n    if (IOS OR TVOS OR VISIONOS OR WATCHOS)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/dummy/*.c\")\n      set(SDL_HAPTIC_DUMMY 1)\n    else()\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/darwin/*.c\")\n      set(SDL_HAPTIC_IOKIT 1)\n      set(SDL_FRAMEWORK_IOKIT 1)\n      set(SDL_FRAMEWORK_FF 1)\n    endif()\n    set(HAVE_SDL_HAPTIC TRUE)\n  endif()\n\n  if(SDL_POWER)\n    if (IOS OR TVOS OR VISIONOS OR WATCHOS)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/uikit/*.m\")\n      set(SDL_POWER_UIKIT 1)\n    else()\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/macos/*.c\")\n      set(SDL_POWER_MACOSX 1)\n      set(SDL_FRAMEWORK_IOKIT 1)\n    endif()\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/macos/*.m\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/unix/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  set(SDL_FILESYSTEM_COCOA 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/cocoa/*.m\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  # TODO: SDL_STORAGE_ICLOUD\n  set(SDL_STORAGE_GENERIC 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/generic/*.c\")\n  if(MACOS)\n    set(SDL_STORAGE_STEAM 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/steam/*.c\")\n  endif()\n  set(HAVE_SDL_STORAGE 1)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_SENSOR)\n    if(IOS OR VISIONOS OR WATCHOS)\n      set(SDL_SENSOR_COREMOTION 1)\n      set(HAVE_SDL_SENSORS TRUE)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/coremotion/*.m\")\n    endif()\n  endif()\n\n  # iOS hack needed - http://code.google.com/p/ios-cmake/ ?\n  if(SDL_VIDEO)\n    if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n      set(SDL_VIDEO_DRIVER_UIKIT 1)\n      set(SDL_FRAMEWORK_COREGRAPHICS 1)\n      set(SDL_FRAMEWORK_QUARTZCORE 1)\n      set(SDL_FRAMEWORK_UIKIT 1)\n      set(SDL_IPHONE_KEYBOARD 1)\n      set(SDL_IPHONE_LAUNCHSCREEN 1)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/uikit/*.m\")\n      set(HAVE_SDL_VIDEO TRUE)\n    else()\n      CheckCOCOA()\n      if(SDL_OPENGL)\n        set(SDL_VIDEO_OPENGL 1)\n        set(SDL_VIDEO_OPENGL_CGL 1)\n        set(SDL_VIDEO_RENDER_OGL 1)\n        set(HAVE_OPENGL TRUE)\n      endif()\n    endif()\n\n    if(SDL_OPENGLES)\n      if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n        set(SDL_FRAMEWORK_OPENGLES 1)\n        set(SDL_VIDEO_OPENGL_ES 1)\n      else()\n        set(SDL_VIDEO_OPENGL_EGL 1)\n      endif()\n      set(SDL_VIDEO_OPENGL_ES2 1)\n      set(SDL_VIDEO_RENDER_OGL_ES2 1)\n      set(HAVE_OPENGLES TRUE)\n    endif()\n\n    if(SDL_VULKAN OR SDL_METAL OR SDL_RENDER_METAL)\n      check_objc_source_compiles(\"\n        #include <AvailabilityMacros.h>\n        #import <Metal/Metal.h>\n        #import <QuartzCore/CAMetalLayer.h>\n\n        #if (!TARGET_CPU_X86_64 && !TARGET_CPU_ARM64)\n        #error Metal doesn't work on this configuration\n        #endif\n        int main(int argc, char **argv) { return 0; }\" HAVE_FRAMEWORK_METAL)\n      if(HAVE_FRAMEWORK_METAL)\n        set(SDL_FRAMEWORK_METAL 1)\n        set(SDL_FRAMEWORK_QUARTZCORE 1)\n        if(SDL_VULKAN)\n          set(SDL_VIDEO_VULKAN 1)\n          set(HAVE_VULKAN TRUE)\n          if(SDL_RENDER_VULKAN)\n            set(SDL_VIDEO_RENDER_VULKAN 1)\n            set(HAVE_RENDER_VULKAN TRUE)\n          endif()\n        endif()\n        if(SDL_METAL)\n          set(SDL_VIDEO_METAL 1)\n          set(HAVE_METAL TRUE)\n        endif()\n        if(SDL_RENDER_METAL)\n          sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/render/metal/*.m\")\n          set(SDL_VIDEO_RENDER_METAL 1)\n          set(HAVE_RENDER_METAL TRUE)\n        endif()\n        if (SDL_GPU)\n          set(SDL_GPU_METAL 1)\n          sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/metal/*.m\")\n        endif()\n      endif()\n    endif()\n\n    if(MACOS)\n      sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/tray/cocoa/*.m\")\n      set(HAVE_SDL_TRAY TRUE)\n    endif()\n  endif()\n\n  # Minimum version for $<LINK_LIBRARY:feature,library-list>\n  cmake_minimum_required(VERSION 3.24)\n\n  # Actually load the frameworks at the end so we don't duplicate include.\n  if(SDL_FRAMEWORK_COREVIDEO)\n    find_library(COREMEDIA CoreMedia)\n    if(COREMEDIA)\n      sdl_link_dependency(corevideo LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreMedia>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreMedia\")\n    endif()\n    sdl_link_dependency(corevideo LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreVideo>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreVideo\")\n  endif()\n  if(SDL_FRAMEWORK_COCOA)\n    sdl_link_dependency(cocoa LIBS \"$<LINK_LIBRARY:FRAMEWORK,Cocoa>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,Cocoa\")\n    sdl_link_dependency(uniformtypeidentifiers LIBS \"$<LINK_LIBRARY:WEAK_FRAMEWORK,UniformTypeIdentifiers>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-weak_framework,UniformTypeIdentifiers\")\n  endif()\n  if(SDL_FRAMEWORK_IOKIT)\n    sdl_link_dependency(iokit LIBS \"$<LINK_LIBRARY:FRAMEWORK,IOKit>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,IOKit\")\n  endif()\n  if(SDL_FRAMEWORK_FF)\n    sdl_link_dependency(ff LIBS \"$<LINK_LIBRARY:FRAMEWORK,ForceFeedback>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,ForceFeedback\")\n  endif()\n  if(SDL_FRAMEWORK_CARBON)\n    sdl_link_dependency(carbon LIBS \"$<LINK_LIBRARY:FRAMEWORK,Carbon>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,Carbon\")\n  endif()\n  if(SDL_FRAMEWORK_COREAUDIO)\n    sdl_link_dependency(core_audio LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreAudio>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreAudio\")\n  endif()\n  if(SDL_FRAMEWORK_AUDIOTOOLBOX)\n    sdl_link_dependency(audio_toolbox LIBS \"$<LINK_LIBRARY:FRAMEWORK,AudioToolbox>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,AudioToolbox\")\n  endif()\n  if(SDL_FRAMEWORK_AVFOUNDATION)\n    sdl_link_dependency(av_foundation LIBS \"$<LINK_LIBRARY:FRAMEWORK,AVFoundation>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,AVFoundation\")\n  endif()\n  if(SDL_FRAMEWORK_COREBLUETOOTH)\n    sdl_link_dependency(core_bluetooth LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreBluetooth>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreBluetooth\")\n  endif()\n  if(SDL_FRAMEWORK_COREGRAPHICS)\n    sdl_link_dependency(core_graphics LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreGraphics>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreGraphics\")\n  endif()\n  if(SDL_FRAMEWORK_COREMOTION)\n    sdl_link_dependency(core_motion LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreMotion>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreMotion\")\n  endif()\n  if(SDL_FRAMEWORK_FOUNDATION)\n    sdl_link_dependency(foundation LIBS \"$<LINK_LIBRARY:FRAMEWORK,Foundation>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,Foundation\")\n  endif()\n  if(SDL_FRAMEWORK_GAMECONTROLLER)\n    find_library(GAMECONTROLLER GameController)\n    if(GAMECONTROLLER)\n      sdl_link_dependency(game_controller LIBS \"$<LINK_LIBRARY:WEAK_FRAMEWORK,GameController>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-weak_framework,GameController\")\n    endif()\n  endif()\n  if(SDL_FRAMEWORK_METAL)\n    if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n      sdl_link_dependency(metal LIBS \"$<LINK_LIBRARY:FRAMEWORK,Metal>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,Metal\")\n    else()\n      sdl_link_dependency(metal LIBS \"$<LINK_LIBRARY:WEAK_FRAMEWORK,Metal>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-weak_framework,Metal\")\n    endif()\n  endif()\n  if(SDL_FRAMEWORK_OPENGLES)\n    sdl_link_dependency(opengles LIBS \"$<LINK_LIBRARY:FRAMEWORK,OpenGLES>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,OpenGLES\")\n  endif()\n  if(SDL_FRAMEWORK_QUARTZCORE)\n    if(IOS OR TVOS OR VISIONOS OR WATCHOS)\n      sdl_link_dependency(quartz_core LIBS \"$<LINK_LIBRARY:FRAMEWORK,QuartzCore>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,QuartzCore\")\n    else()\n      sdl_link_dependency(metal LIBS \"$<LINK_LIBRARY:WEAK_FRAMEWORK,QuartzCore>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-weak_framework,QuartzCore\")\n    endif()\n  endif()\n  if(SDL_FRAMEWORK_UIKIT)\n    sdl_link_dependency(ui_kit LIBS \"$<LINK_LIBRARY:FRAMEWORK,UIKit>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,UIKit\")\n  endif()\n  if(SDL_FRAMEWORK_COREHAPTICS)\n    find_library(COREHAPTICS CoreHaptics)\n    if(COREHAPTICS)\n      sdl_link_dependency(core_haptics LIBS \"$<LINK_LIBRARY:FRAMEWORK,CoreHaptics>\" PKG_CONFIG_LINK_OPTIONS \"-Wl,-framework,CoreHaptics\")\n    endif()\n  endif()\n\n  CheckPTHREAD()\n\n  if(SDL_RPATH AND SDL_SHARED)\n    set(SDL_RLD_FLAGS \"-Wl,-rpath,\\${libdir}\")\n    set(HAVE_RPATH TRUE)\n  endif()\n\nelseif(HAIKU)\n  enable_language(CXX)\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_HAIKU 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/haiku/*.cc\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_HAIKU 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/haiku/*.cc\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/haiku/*.cc\")\n  set(HAVE_SDL_MISC TRUE)\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_HAIKU 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/haiku/*.cc\")\n    set(HAVE_SDL_VIDEO TRUE)\n\n    if(SDL_OPENGL)\n      # TODO: Use FIND_PACKAGE(OpenGL) instead\n      set(SDL_VIDEO_OPENGL 1)\n      set(SDL_VIDEO_OPENGL_HAIKU 1)\n      set(SDL_VIDEO_RENDER_OGL 1)\n      sdl_link_dependency(opengl LIBS GL)\n      set(HAVE_OPENGL TRUE)\n    endif()\n  endif()\n\n  set(SDL_FILESYSTEM_HAIKU 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/haiku/*.cc\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_HAIKU 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/haiku/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_POWER)\n    set(SDL_POWER_HAIKU 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/haiku/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/haiku/*.cc\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/core/haiku/*.cc\")\n\n  CheckPTHREAD()\n  sdl_link_dependency(base LIBS root be media game device textencoding tracker)\n\nelseif(RISCOS)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/riscos/*.c\")\n  set(HAVE_SDL_MISC TRUE)\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_RISCOS 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/riscos/*.c\")\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_RISCOS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/riscos/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  set(SDL_TIME_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/unix/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_UNIX 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/unix/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_CLOCK_GETTIME)\n    set(HAVE_CLOCK_GETTIME 1)\n  endif()\n\n  CheckPTHREAD()\n\n  if(SDL_AUDIO)\n    CheckOSS()\n  endif()\n\nelseif(VITA)\n  # SDL_spinlock.c Needs to be compiled in ARM mode.\n  cmake_push_check_state()\n  string(APPEND CMAKE_REQUIRED_FLAGS \" -Werror=unused-command-line-argument\")\n  check_c_compiler_flag(-marm HAVE_ARM_MODE)\n  cmake_pop_check_state()\n  if(HAVE_ARM_MODE)\n    set_property(SOURCE \"${SDL3_SOURCE_DIR}/src/atomic/SDL_spinlock.c\" APPEND_STRING PROPERTY COMPILE_FLAGS \" -marm\")\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/vita/*.c\")\n  set(HAVE_SDL_MISC TRUE)\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_VITA 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/vita/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_VITA 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/vita/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_VITA 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/vita/*.c\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  if(SDL_POWER)\n    set(SDL_POWER_VITA 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/vita/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  set(SDL_THREAD_VITA 1)\n  sdl_sources(\n    \"${SDL3_SOURCE_DIR}/src/thread/vita/SDL_sysmutex.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/vita/SDL_syssem.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/vita/SDL_systhread.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_syscond.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysrwlock.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_systls.c\"\n  )\n  set(HAVE_SDL_THREADS TRUE)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/vita/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_TIME_VITA 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/vita/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_VITA 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/vita/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_SENSOR)\n    set(SDL_SENSOR_VITA 1)\n    set(HAVE_SDL_SENSORS TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/vita/*.c\")\n  endif()\n\n  if(SDL_CAMERA)\n    set(SDL_CAMERA_DRIVER_VITA 1)\n    set(HAVE_CAMERA TRUE)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/vita/*.c\")\n  endif()\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_VITA 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/vita/*.c\")\n    set(HAVE_SDL_VIDEO TRUE)\n\n    if(VIDEO_VITA_PIB)\n      check_include_file(pib.h HAVE_PIGS_IN_BLANKET_H)\n\n      if(HAVE_PIGS_IN_BLANKET_H)\n        set(SDL_VIDEO_OPENGL_ES2 1)\n        sdl_link_dependency(pib\n          LIBS\n            pib\n            libScePiglet_stub_weak\n            taihen_stub_weak\n            SceShaccCg_stub_weak\n        )\n        set(HAVE_VIDEO_VITA_PIB ON)\n        set(SDL_VIDEO_VITA_PIB 1)\n      else()\n        set(HAVE_VIDEO_VITA_PIB OFF)\n      endif()\n    endif()\n\n    if(VIDEO_VITA_PVR)\n      check_include_file(gpu_es4/psp2_pvr_hint.h HAVE_PVR_H)\n      if(HAVE_PVR_H)\n        sdl_compile_definitions(PRIVATE \"__psp2__\")\n        set(SDL_VIDEO_OPENGL_EGL 1)\n        set(HAVE_OPENGLES TRUE)\n        set(SDL_VIDEO_OPENGL_ES 1)\n        set(SDL_VIDEO_OPENGL_ES2 1)\n        set(SDL_VIDEO_RENDER_OGL_ES2 1)\n\n        sdl_link_dependency(pvr\n          LIBS\n            libgpu_es4_ext_stub_weak\n            libIMGEGL_stub_weak\n            SceIme_stub\n        )\n\n        set(HAVE_VIDEO_VITA_PVR ON)\n        set(SDL_VIDEO_VITA_PVR 1)\n\n        if(SDL_OPENGL)\n          check_include_file(gl4esinit.h HAVE_GL4ES_H)\n          if(HAVE_GL4ES_H)\n            set(HAVE_OPENGL TRUE)\n            set(SDL_VIDEO_OPENGL 1)\n            set(SDL_VIDEO_RENDER_OGL 1)\n            sdl_link_dependency(opengl LIBS libGL_stub)\n            set(SDL_VIDEO_VITA_PVR_OGL 1)\n          endif()\n        endif()\n\n      else()\n        set(HAVE_VIDEO_VITA_PVR OFF)\n      endif()\n    endif()\n\n    set(SDL_VIDEO_RENDER_VITA_GXM 1)\n    sdl_link_dependency(base\n      LIBS\n        SceGxm_stub\n        SceDisplay_stub\n        SceCtrl_stub\n        SceAppMgr_stub\n        SceAppUtil_stub\n        SceAudio_stub\n        SceAudioIn_stub\n        SceSysmodule_stub\n        SceDisplay_stub\n        SceCtrl_stub\n        SceIofilemgr_stub\n        SceCommonDialog_stub\n        SceTouch_stub\n        SceHid_stub\n        SceMotion_stub\n        ScePower_stub\n        SceProcessmgr_stub\n        SceCamera_stub\n    )\n  endif()\n\n  sdl_compile_definitions(PRIVATE \"__VITA__\")\n\nelseif(PSP)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/psp/*.c\")\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_PSP 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/psp/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_PSP 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/psp/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_PSP 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/psp/*.c\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  if(SDL_POWER)\n    set(SDL_POWER_PSP 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/psp/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  set(SDL_THREAD_PSP 1)\n  sdl_glob_sources(\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_syscond.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_systls.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysrwlock.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/psp/*.c\"\n  )\n  set(HAVE_SDL_THREADS TRUE)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/psp/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  set(SDL_TIME_PSP 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/psp/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_PSP 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/psp/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_PSP 1)\n    set(SDL_VIDEO_RENDER_PSP 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/psp/*.c\")\n    set(SDL_VIDEO_OPENGL 1)\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\n\n  sdl_link_dependency(base\n    LIBS\n      GL\n      pspvram\n      pspaudio\n      pspvfpu\n      pspdisplay\n      pspgu\n      pspge\n      psphprm\n      pspctrl\n      psppower\n  )\n\nelseif(PS2)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/ps2/*.c\")\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_PS2 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/ps2/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_PS2 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/ps2/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_PS2 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/ps2/*.c\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  set(SDL_THREAD_PS2 1)\n  sdl_glob_sources(\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_syscond.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysmutex.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysrwlock.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_systls.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/ps2/*.c\"\n  )\n  set(HAVE_SDL_THREADS TRUE)\n\n  set(SDL_TIME_PS2 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/ps2/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_PS2 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/ps2/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_PS2 1)\n    set(SDL_VIDEO_RENDER_PS2 1)\n    sdl_glob_sources(\n      \"${SDL3_SOURCE_DIR}/src/video/ps2/*.c\"\n      \"${SDL3_SOURCE_DIR}/src/render/ps2/*.c\"\n    )\n    set(SDL_VIDEO_OPENGL 0)\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\n\n  sdl_link_dependency(base\n    LIBS\n      patches\n      gskit\n      dmakit\n      ps2_drivers\n  )\nelseif(N3DS)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/n3ds/*.c\")\n\n  if(SDL_AUDIO)\n    set(SDL_AUDIO_DRIVER_N3DS 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/n3ds/*.c\")\n    set(HAVE_SDL_AUDIO TRUE)\n  endif()\n\n  set(SDL_FILESYSTEM_N3DS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/n3ds/*.c\")\n  set(HAVE_SDL_FILESYSTEM TRUE)\n\n  # !!! FIXME: do we need a FSops implementation for this?\n\n  if(SDL_JOYSTICK)\n    set(SDL_JOYSTICK_N3DS 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/n3ds/*.c\")\n    set(HAVE_SDL_JOYSTICK TRUE)\n  endif()\n\n  if(SDL_POWER)\n    set(SDL_POWER_N3DS 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/power/n3ds/*.c\")\n    set(HAVE_SDL_POWER TRUE)\n  endif()\n\n  set(SDL_THREAD_N3DS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/thread/n3ds/*.c\")\n  sdl_sources(\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_systls.c\"\n    \"${SDL3_SOURCE_DIR}/src/thread/generic/SDL_sysrwlock.c\"\n  )\n  set(HAVE_SDL_THREADS TRUE)\n\n  set(SDL_TIME_N3DS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/time/n3ds/*.c\")\n  set(HAVE_SDL_TIME TRUE)\n\n  set(SDL_TIMER_N3DS 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/timer/n3ds/*.c\")\n  set(HAVE_SDL_TIMERS TRUE)\n\n  set(SDL_FSOPS_POSIX 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/posix/SDL_sysfsops.c\")\n  set(HAVE_SDL_FSOPS TRUE)\n\n  if(SDL_SENSOR)\n    set(SDL_SENSOR_N3DS 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/n3ds/*.c\")\n    set(HAVE_SDL_SENSORS TRUE)\n  endif()\n\n  if(SDL_VIDEO)\n    set(SDL_VIDEO_DRIVER_N3DS 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/n3ds/*.c\")\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/n3ds/*.c\")\n  set(HAVE_SDL_LOCALE TRUE)\n\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/file/n3ds/*.c\")\nendif()\n\nsdl_sources(${SDL3_SOURCE_DIR}/src/dialog/SDL_dialog.c)\nif (SDL_DIALOG)\n  sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/SDL_dialog_utils.c)\n  if(ANDROID)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/android/SDL_androiddialog.c)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(UNIX AND NOT APPLE AND NOT RISCOS AND NOT HAIKU)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/unix/SDL_unixdialog.c)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/unix/SDL_portaldialog.c)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/unix/SDL_zenitydialog.c)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(HAIKU)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/haiku/SDL_haikudialog.cc)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(WINDOWS)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/windows/SDL_windowsdialog.c)\n    set(HAVE_SDL_DIALOG TRUE)\n  elseif(MACOS)\n    sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/cocoa/SDL_cocoadialog.m)\n    set(HAVE_SDL_DIALOG TRUE)\n  endif()\nendif()\n\nsdl_sources(\"${SDL3_SOURCE_DIR}/src/process/SDL_process.c\")\nif(WINDOWS)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/process/windows/*.c\")\n  set(SDL_PROCESS_WINDOWS 1)\n  set(HAVE_SDL_PROCESS TRUE)\nelse()\n  check_c_source_compiles(\"\n#include <spawn.h>\n#include <unistd.h>\n\nint main(void)\n{\n    int pipes[2];\n    int pid;\n\n    const char * args[] = {\n      \\\"/bin/false\\\",\n      NULL\n    };\n\n    const char * env[] = { NULL };\n\n    pipe(pipes);\n\n    posix_spawnattr_t attr;\n    posix_spawn_file_actions_t fa;\n\n    posix_spawnattr_init(&attr);\n    posix_spawn_file_actions_init(&fa);\n\n    posix_spawn_file_actions_addclose(&fa, pipes[0]);\n    posix_spawn_file_actions_adddup2(&fa, pipes[1], STDOUT_FILENO);\n\n    posix_spawn(&pid, args[0], &fa, &attr, (char * const *) args, (char * const *) env);\n    posix_spawnp(&pid, args[0], &fa, &attr, (char * const *) args, (char * const *) env);\n\n    posix_spawn_file_actions_destroy(&fa);\n    posix_spawnattr_destroy(&attr);\n\n    return 0;\n}\n\" HAVE_POSIX_SPAWN)\n  if(HAVE_POSIX_SPAWN)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/process/posix/*.c\")\n    set(SDL_PROCESS_POSIX 1)\n    set(HAVE_SDL_PROCESS TRUE)\n  endif()\nendif()\n\n# Platform-independent options\n\nif(SDL_VIDEO)\n  if(SDL_OFFSCREEN)\n    set(SDL_VIDEO_DRIVER_OFFSCREEN 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/offscreen/*.c\")\n    set(HAVE_OFFSCREEN TRUE)\n    set(HAVE_SDL_VIDEO TRUE)\n  endif()\nendif()\n\nsdl_glob_sources(${SDL3_SOURCE_DIR}/src/tray/*.c)\n\nif(SDL_GPU)\n  if(HAVE_D3D11_H)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/d3d11/*.c\")\n    set(SDL_GPU_D3D11 1)\n    set(HAVE_SDL_GPU TRUE)\n  endif()\n  if(SDL_RENDER_D3D12)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/d3d12/*.c\")\n    set(SDL_GPU_D3D12 1)\n    set(HAVE_SDL_GPU TRUE)\n  endif()\n  if(SDL_VIDEO_VULKAN)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/gpu/vulkan/*.c\")\n    set(SDL_GPU_VULKAN 1)\n    set(HAVE_SDL_GPU TRUE)\n  endif()\n  if(SDL_RENDER_GPU)\n    set(SDL_VIDEO_RENDER_GPU 1)\n    set(HAVE_RENDER_GPU TRUE)\n  endif()\nendif()\n\n# Dummies\n# configure.ac does it differently:\n# if not have X\n#   if enable_X {  SDL_X_DISABLED = 1 }\n#   [add dummy sources]\n# so it always adds a dummy, without checking, if it was actually requested.\n# This leads to missing internal references on building, since the\n# src/X/*.c does not get included.\nif(NOT HAVE_SDL_AUDIO)\n  set(SDL_AUDIO_DRIVER_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/audio/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_VIDEO)\n  set(SDL_VIDEO_DRIVER_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/video/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_JOYSTICK)\n  set(SDL_JOYSTICK_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/joystick/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_HAPTIC)\n  set(SDL_HAPTIC_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/haptic/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_SENSORS)\n  set(SDL_SENSOR_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/sensor/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_LOADSO)\n  set(SDL_LOADSO_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/loadso/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_FILESYSTEM)\n  set(SDL_FILESYSTEM_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_STORAGE)\n  set(SDL_STORAGE_GENERIC 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/storage/generic/*.c\")\nendif()\nif(NOT HAVE_SDL_FSOPS)\n  set(SDL_FSOPS_DUMMY 1)\n  sdl_sources(\"${SDL3_SOURCE_DIR}/src/filesystem/dummy/SDL_sysfsops.c\")\nendif()\nif(NOT HAVE_SDL_LOCALE)\n  set(SDL_LOCALE_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/locale/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_MISC)\n  set(SDL_MISC_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/misc/dummy/*.c\")\nendif()\nif(NOT HAVE_SDL_DIALOG)\n  set(SDL_DIALOG_DUMMY 1)\n  sdl_sources(${SDL3_SOURCE_DIR}/src/dialog/dummy/SDL_dummydialog.c)\nendif()\nif(NOT HAVE_SDL_PROCESS)\n  set(SDL_PROCESS_DUMMY 1)\n  sdl_glob_sources(${SDL3_SOURCE_DIR}/src/process/dummy/*.c)\nendif()\nif(NOT HAVE_SDL_TRAY)\n  set(SDL_TRAY_DUMMY 1)\n  sdl_glob_sources(${SDL3_SOURCE_DIR}/src/tray/dummy/*.c)\nendif()\nif(NOT HAVE_CAMERA)\n  set(SDL_CAMERA_DRIVER_DUMMY 1)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/camera/dummy/*.c\")\nendif()\n\n# We always need to have threads and timers around\nif(NOT HAVE_SDL_THREADS)\n  # The emscripten platform has been carefully vetted to work without threads\n  if(EMSCRIPTEN)\n    set(SDL_THREADS_DISABLED 1)\n    sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/thread/generic/*.c\")\n  else()\n    message(FATAL_ERROR \"Threads are needed by many SDL subsystems and may not be disabled\")\n  endif()\nendif()\nif(NOT HAVE_SDL_TIMERS)\n  message(FATAL_ERROR \"Timers are needed by many SDL subsystems and may not be disabled\")\nendif()\n\n# Most platforms use this.\nif(NOT HAVE_SDL_MAIN_CALLBACKS)\n  sdl_glob_sources(\"${SDL3_SOURCE_DIR}/src/main/generic/*.c\")\nendif()\n\n# config variables may contain generator expression, so we need to generate SDL_build_config.h in 2 steps:\n# 1. replace all `#cmakedefine`'s and `@abc@`\nconfigure_file(\"${SDL3_SOURCE_DIR}/include/build_config/SDL_build_config.h.cmake\"\n  \"${SDL3_BINARY_DIR}/CMakeFiles/SDL_build_config.h.intermediate\")\n# 2. generate SDL_build_config.h in an build_type-dependent folder (which should be first in the include search path)\nfile(GENERATE\n  OUTPUT \"${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>/build_config/SDL_build_config.h\"\n  INPUT \"${SDL3_BINARY_DIR}/CMakeFiles/SDL_build_config.h.intermediate\"\n)\n\nfile(GLOB SDL3_INCLUDE_FILES \"${SDL3_SOURCE_DIR}/include/SDL3/*.h\")\nfile(GLOB SDL3_TEST_INCLUDE_FILES \"${SDL3_SOURCE_DIR}/include/SDL3/SDL_test*.h\")\nforeach(_hdr IN LISTS SDL3_INCLUDE_FILES)\n  if(_hdr MATCHES \".*SDL_revision\\\\.h\" OR _hdr MATCHES \".*SDL_test.*\\\\.h\")\n    list(REMOVE_ITEM SDL3_INCLUDE_FILES \"${_hdr}\")\n  endif()\nendforeach()\n\n# If REVISION.txt exists, then we are building from a SDL release.\n# SDL_revision.h(.cmake) in source releases have SDL_REVISION baked into them.\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/REVISION.txt\")\n  file(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/REVISION.txt\" revisions)\n  list(GET revisions 0 revisions_0)\n  string(STRIP \"${revisions_0}\" SDL_REVISION)\nelse()\n  set(SDL_REVISION \"\" CACHE STRING \"Custom SDL revision (only used when REVISION.txt does not exist)\")\nendif()\nif(NOT SDL_REVISION)\n  # If SDL_REVISION is not overrided, use git to describe\n  git_describe(SDL_REVISION_GIT)\n  set(SDL_REVISION \"SDL3-${SDL3_VERSION}-${SDL_REVISION_GIT}\")\nendif()\n\nexecute_process(COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${SDL3_BINARY_DIR}/include-revision/SDL3\")\nconfigure_file(include/build_config/SDL_revision.h.cmake include-revision/SDL3/SDL_revision.h @ONLY)\nlist(APPEND SDL3_INCLUDE_FILES \"${SDL3_BINARY_DIR}/include-revision/SDL3/SDL_revision.h\")\n\nif(SDL_FRAMEWORK)\n  # With Apple frameworks, headers in the PUBLIC_HEADER property also need to be added as sources\n  list(APPEND SDL3_INCLUDE_FILES ${SDL3_TEST_INCLUDE_FILES})\n  sdl_sources(${SDL3_INCLUDE_FILES})\nendif()\n\nif((CMAKE_STATIC_LIBRARY_PREFIX STREQUAL \"\" AND CMAKE_STATIC_LIBRARY_SUFFIX STREQUAL \".lib\") OR SDL_FRAMEWORK)\n  # - Avoid conflict between the dll import library and the static library\n  # - Create SDL3-static Apple Framework\n  set(sdl_static_libname \"SDL3-static\")\nelse()\n  set(sdl_static_libname \"SDL3\")\nendif()\n\nmacro(check_add_debug_flag FLAG SUFFIX)\n  check_c_compiler_flag(${FLAG} HAS_C_FLAG_${SUFFIX})\n  if(HAS_C_FLAG_${SUFFIX})\n    string(APPEND CMAKE_C_FLAGS_DEBUG \" ${FLAG}\")\n  endif()\n\n  if(CMAKE_CXX_COMPILER)\n    check_cxx_compiler_flag(${FLAG} HAS_CXX_${SUFFIX})\n    if(HAS_CXX_${SUFFIX})\n      string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${FLAG}\")\n    endif()\n  endif()\nendmacro()\n\nmacro(asan_check_add_debug_flag ASAN_FLAG)\n  check_add_debug_flag(\"-fsanitize=${ASAN_FLAG}\" \"${ASAN_FLAG}\")\n  if(HAS_C_${ASAN_FLAG} OR HAS_CXX_${ASAN_FLAG})\n    set(HAVE_ASAN ON)\n  endif()\nendmacro()\n\nmacro(asan_check_add_debug_flag2 ASAN_FLAG)\n  # for some sanitize flags we have to manipulate the CMAKE_REQUIRED_LIBRARIES:\n  # http://cmake.3232098.n2.nabble.com/CHECK-CXX-COMPILER-FLAG-doesn-t-give-correct-result-for-fsanitize-address-tp7600216p7600217.html\n\n  set(FLAG \"-fsanitize=${ASAN_FLAG}\")\n\n  cmake_push_check_state()\n  list(APPEND CMAKE_REQUIRED_LIBRARIES ${FLAG} asan)\n\n  check_c_compiler_flag (${FLAG} HAS_C_FLAG_${ASAN_FLAG})\n  if (HAS_C_FLAG_${ASAN_FLAG})\n    string(APPEND CMAKE_C_FLAGS_DEBUG \" ${FLAG}\")\n  endif()\n\n  if(CMAKE_CXX_COMPILER)\n    check_cxx_compiler_flag (${FLAG} HAS_CXX_FLAG_${ASAN_FLAG})\n    if (HAS_CXX_${ASAN_FLAG})\n      string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${FLAG}\")\n    endif()\n  endif()\n\n  cmake_pop_check_state()\n  if(HAS_C_${ASAN_FLAG} OR HAS_CXX_${ASAN_FLAG})\n    set(HAVE_ASAN ON)\n  endif()\nendmacro()\n\n# enable AddressSanitizer if supported\nif(SDL_ASAN)\n  asan_check_add_debug_flag2(\"address\")\n  asan_check_add_debug_flag(\"bool\")\n  asan_check_add_debug_flag(\"bounds\")\n  asan_check_add_debug_flag(\"enum\")\n  asan_check_add_debug_flag(\"float-cast-overflow\")\n  asan_check_add_debug_flag(\"float-divide-by-zero\")\n  asan_check_add_debug_flag(\"nonnull-attribute\")\n  asan_check_add_debug_flag(\"returns-nonnull-attribute\")\n  asan_check_add_debug_flag(\"signed-integer-overflow\")\n  asan_check_add_debug_flag(\"undefined\")\n  asan_check_add_debug_flag(\"vla-bound\")\n  asan_check_add_debug_flag(\"leak\")\n  # The object size sanitizer has no effect on unoptimized builds on Clang,\n  # but causes warnings.\n  if(NOT USE_CLANG OR CMAKE_BUILD_TYPE STREQUAL \"\")\n    asan_check_add_debug_flag(\"object-size\")\n  endif()\nendif()\n\nif(SDL_CCACHE)\n  find_program(CCACHE_BINARY ccache)\n  if(CCACHE_BINARY)\n    set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_BINARY})\n    set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_BINARY})\n    set(CMAKE_OBJC_COMPILER_LAUNCHER ${CCACHE_BINARY})\n    set(HAVE_CCACHE ON)\n  else()\n    set(HAVE_CCACHE OFF)\n  endif()\nelse()\n  set(HAVE_CCACHE OFF)\nendif()\n\nif(SDL_CLANG_TIDY)\n  cmake_minimum_required(VERSION 3.6)\n  find_program(CLANG_TIDY_BINARY clang-tidy)\n\n  if(CLANG_TIDY_BINARY)\n    set(HAVE_CLANG_TIDY ON)\n    get_clang_tidy_ignored_files(CLANG_TIDY_IGNORED_FILES)\n    set(CLANG_TIDY_COMMAND \"${CLANG_TIDY_BINARY}\" \"-extra-arg=-Wno-unknown-warning-option\" \"--line-filter=[${CLANG_TIDY_IGNORED_FILES}]\")\n    if(SDL_WERROR)\n      list(APPEND CLANG_TIDY_COMMAND \"--warnings-as-errors=*\")\n    endif()\n    set(CMAKE_C_CLANG_TIDY ${CLANG_TIDY_COMMAND})\n    set(CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY_COMMAND})\n    set(CMAKE_OBJC_CLANG_TIDY ${CLANG_TIDY_COMMAND})\n    get_property(shared_sources TARGET SDL3-collector PROPERTY INTERFACE_SOURCES)\n    set_source_files_properties(${shared_sources} PROPERTIES SKIP_PRECOMPILE_HEADERS TRUE)\n    file(GLOB STDLIB_SOURCES \"${SDL3_SOURCE_DIR}/src/stdlib/*.c\")\n    set_property(SOURCE ${STDLIB_SOURCES} APPEND PROPERTY COMPILE_DEFINITIONS \"SDL_DISABLE_ANALYZE_MACROS\")\n  else()\n    set(HAVE_CLANG_TIDY OFF)\n  endif()\nendif()\n\nif(SDL_TESTS)\n  set(HAVE_TESTS ON)\nendif()\n\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  set(ARCH_64 TRUE)\nelse()\n  set(ARCH_64 FALSE)\nendif()\n\nif(ANDROID)\n  sdl_include_directories(PRIVATE SYSTEM \"${ANDROID_NDK}/sources/android/cpufeatures\")\nendif()\n\nif(APPLE)\n  cmake_push_check_state(RESET)\n  check_c_compiler_flag(-fobjc-arc COMPILER_SUPPORTS_FOBJC_ARC)\n  cmake_pop_check_state()\n  if(NOT COMPILER_SUPPORTS_FOBJC_ARC)\n    message(FATAL_ERROR \"Compiler does not support -fobjc-arc: this is required on Apple platforms\")\n  endif()\n  sdl_compile_options(PRIVATE \"-fobjc-arc\")\nendif()\n\nif(PS2)\n  sdl_compile_options(PRIVATE \"-Wno-error=declaration-after-statement\")\nendif()\n\nif(NOT SDL_LIBC)\n  if(MSVC)\n    set(saved_CMAKE_TRY_COMPILE_TARGET_TYPE \"${CMAKE_TRY_COMPILE_TARGET_TYPE}\")\n    cmake_push_check_state(RESET)\n    set(CMAKE_TRY_COMPILE_TARGET_TYPE \"STATIC_LIBRARY\")\n    check_c_compiler_flag(\"/Zl\" COMPILER_SUPPORTS_Zl)\n    cmake_pop_check_state()\n    set(CMAKE_TRY_COMPILE_TARGET_TYPE \"${saved_CMAKE_TRY_COMPILE_TARGET_TYPE}\")\n    if(COMPILER_SUPPORTS_Zl)\n      # /Zl omits the default C runtime library name from the .obj file.\n      sdl_compile_options(PRIVATE \"$<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:/Zl>\")\n      if(TARGET SDL3_test)\n        target_compile_options(SDL3_test PRIVATE \"/Zl\")\n      endif()\n    endif()\n  endif()\nendif()\n\nif(APPLE)\n  get_property(sources TARGET SDL3-collector PROPERTY INTERFACE_SOURCES)\n  foreach(SOURCE_FILE IN LISTS sources)\n    get_filename_component(FILE_EXTENSION ${SOURCE_FILE} EXT)\n    if(FILE_EXTENSION STREQUAL \".m\")\n      set_property(SOURCE ${SOURCE_FILE} APPEND_STRING PROPERTY COMPILE_FLAGS \" -x objective-c\")\n    endif()\n    if(NOT FILE_EXTENSION STREQUAL \".c\" AND NOT FILE_EXTENSION STREQUAL \".cpp\")\n      set_property(SOURCE ${SOURCE_FILE} PROPERTY SKIP_PRECOMPILE_HEADERS 1)\n    endif()\n  endforeach()\nendif()\n\n# Disable precompiled headers on SDL_dynapi.c to avoid applying dynapi overrides\nset_source_files_properties(src/dynapi/SDL_dynapi.c PROPERTIES SKIP_PRECOMPILE_HEADERS 1)\n\nset(SDL_FRAMEWORK_RESOURCES\n  Xcode/SDL/pkg-support/resources/ReadMe.txt\n  LICENSE.txt\n)\nif(SDL_FRAMEWORK)\n  sdl_sources(${SDL_FRAMEWORK_RESOURCES})\nendif()\n\nadd_library(SDL3_Headers INTERFACE)\nadd_library(SDL3::Headers ALIAS SDL3_Headers)\nset_property(TARGET SDL3_Headers PROPERTY EXPORT_NAME \"Headers\")\ntarget_include_directories(SDL3_Headers\n  INTERFACE\n    \"$<BUILD_INTERFACE:${SDL3_BINARY_DIR}/include-revision>\"\n    \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/include>\"\n)\nif(SDL_FRAMEWORK)\n  target_include_directories(SDL3_Headers\n    INTERFACE\n      \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/SDL3.framework/Headers>\"\n  )\n  # Add `-F <parent folder of SDL3.framework>` to make sure `#include \"SDL3/...\"` works.\n  target_compile_options(SDL3_Headers\n    INTERFACE\n      \"$<INSTALL_INTERFACE:SHELL:-F $<INSTALL_PREFIX>>\"\n  )\nelse()\n  target_include_directories(SDL3_Headers\n    INTERFACE\n      \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\"\n  )\nendif()\n\nif(SDL_SHARED)\n  set_target_properties(SDL3-shared PROPERTIES\n    OUTPUT_NAME \"SDL3\"\n    POSITION_INDEPENDENT_CODE TRUE\n    LINK_DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/src/dynapi/SDL_dynapi.sym\"\n    INTERFACE_LINK_DEPENDS \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/dynapi/SDL_dynapi.sym>\"\n    WINDOWS_EXPORT_ALL_SYMBOLS FALSE\n    DEFINE_SYMBOL \"DLL_EXPORT\"\n  )\n  if(HAVE_GCC_FVISIBILITY)\n    set_target_properties(SDL3-shared PROPERTIES\n      C_VISIBILITY_PRESET \"hidden\"\n      CXX_VISIBILITY_PRESET \"hidden\"\n      OBJC_VISIBILITY_PRESET \"hidden\"\n    )\n  endif()\n  if(NOT SDL_LIBC)\n    if(MSVC AND NOT MSVC_CLANG)\n      # Don't try to link with the default set of libraries.\n      # Note: The clang toolset for Visual Studio does not support /NODEFAULTLIB.\n      target_link_options(SDL3-shared PRIVATE \"/NODEFAULTLIB\")\n      if(SDL_CPU_ARM32)\n        # linking to msvcrt.lib avoid unresolved external symbols\n        # (__rt_sdiv, __rt_udiv, __rt_sdiv64, _rt_udiv64, __dtou64, __u64tod, __i64tos)\n        target_link_libraries(SDL3-shared PRIVATE msvcrt.lib)\n      endif()\n      find_library(HAVE_ONECORE_LIB NAMES \"onecore.lib\")\n      if(HAVE_ONECORE_LIB)\n        # SDL_malloc.c: __imp_MapViewOfFileNuma2 referenced in function MapViewOfFile2\n        target_link_libraries(SDL3-shared PRIVATE onecore.lib)\n      endif()\n      find_library(HAVE_VOLATILEACCESSU_LIB NAMES \"volatileaccessu.lib\")\n      if(HAVE_VOLATILEACCESSU_LIB)\n        # SDL_malloc.c : RtlSetVolatileMemory referenced in function RtlFillVolatileMemory\n        # SDL_malloc.c : RtlFillDeviceMemory referenced in function RtlZeroDeviceMemory\n        target_link_libraries(SDL3-shared PRIVATE volatileaccessu.lib)\n      endif()\n    endif()\n    if(HAS_Q_NO_USE_LIBIRC)\n      target_compile_options(SDL3-shared PRIVATE /Q_no-use-libirc)\n    endif()\n  endif()\n  if(APPLE)\n    cmake_minimum_required(VERSION 3.17)\n    set_target_properties(SDL3-shared PROPERTIES\n      MACOSX_RPATH TRUE\n      FRAMEWORK \"${SDL_FRAMEWORK}\"\n      SOVERSION \"${SDL_SO_VERSION_MAJOR}\"\n      MACHO_COMPATIBILITY_VERSION \"${SDL_DYLIB_COMPAT_VERSION}\"\n      MACHO_CURRENT_VERSION \"${SDL_DYLIB_CURRENT_VERSION}\"\n    )\n    if(SDL_FRAMEWORK)\n      set_target_properties(SDL3-shared PROPERTIES\n        PUBLIC_HEADER \"${SDL3_INCLUDE_FILES}\"\n        FRAMEWORK_VERSION \"${SDL_FRAMEWORK_VERSION}\"\n        MACOSX_FRAMEWORK_IDENTIFIER \"org.libsdl.SDL3\"\n        RESOURCE \"${SDL_FRAMEWORK_RESOURCES}\"\n      )\n    endif()\n  elseif(UNIX AND NOT ANDROID)\n    set_target_properties(SDL3-shared PROPERTIES\n      VERSION \"${SDL_SO_VERSION}\"\n      SOVERSION \"${SDL_SO_VERSION_MAJOR}\"\n    )\n  else()\n    if(WINDOWS OR CYGWIN)\n      set_target_properties(SDL3-shared PROPERTIES\n        PREFIX \"\"\n      )\n    endif()\n  endif()\n  target_link_libraries(SDL3-shared PRIVATE ${SDL_CMAKE_DEPENDS})\n  target_include_directories(SDL3-shared\n    PRIVATE\n      \"$<BUILD_INTERFACE:${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>/build_config\"\n      \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/src>\"\n  )\n  target_link_libraries(SDL3-shared PUBLIC $<TARGET_NAME:SDL3::Headers>)\n  if(MINGW OR CYGWIN)\n    target_link_options(SDL3-shared PRIVATE -static-libgcc)\n  endif()\n  # Use `Compatible Interface Properties` to:\n  # - allow consumers to enforce a shared/static library\n  # - block linking to SDL libraries of different major version\n  set_property(TARGET SDL3-shared APPEND PROPERTY COMPATIBLE_INTERFACE_BOOL SDL3_SHARED)\n  set_property(TARGET SDL3-shared PROPERTY INTERFACE_SDL3_SHARED TRUE)\n  set_property(TARGET SDL3-shared APPEND PROPERTY COMPATIBLE_INTERFACE_STRING \"SDL_VERSION\")\n  set_property(TARGET SDL3-shared PROPERTY INTERFACE_SDL_VERSION \"SDL${SDL3_VERSION_MAJOR}\")\n  if(NOT CMAKE_VERSION VERSION_LESS \"3.16\")\n    target_precompile_headers(SDL3-shared PRIVATE \"$<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:${PROJECT_SOURCE_DIR}/src/SDL_internal.h>\")\n  endif()\nendif()\n\nif(SDL_STATIC)\n  set_target_properties(SDL3-static PROPERTIES\n    OUTPUT_NAME \"${sdl_static_libname}\"\n  )\n  target_compile_definitions(SDL3-static PRIVATE SDL_STATIC_LIB)\n  target_link_libraries(SDL3-static PRIVATE ${SDL_CMAKE_DEPENDS})\n  target_include_directories(SDL3-static\n    PRIVATE\n      \"$<BUILD_INTERFACE:${SDL3_BINARY_DIR}/include-config-$<LOWER_CASE:$<CONFIG>>>/build_config\"\n      \"$<BUILD_INTERFACE:${SDL3_SOURCE_DIR}/src>\"\n  )\n  target_link_libraries(SDL3-static PUBLIC $<TARGET_NAME:SDL3::Headers>)\n  # Use `Compatible Interface Properties` to:\n  # - allow consumers to enforce a shared/static library\n  # - block linking to SDL libraries of different major version\n  set_property(TARGET SDL3-static APPEND PROPERTY COMPATIBLE_INTERFACE_BOOL SDL3_SHARED)\n  set_property(TARGET SDL3-static PROPERTY INTERFACE_SDL3_SHARED FALSE)\n  set_property(TARGET SDL3-static APPEND PROPERTY COMPATIBLE_INTERFACE_STRING \"SDL_VERSION\")\n  set_property(TARGET SDL3-static PROPERTY INTERFACE_SDL_VERSION \"SDL${SDL3_VERSION_MAJOR}\")\n  if(NOT CMAKE_VERSION VERSION_LESS \"3.16\")\n    target_precompile_headers(SDL3-static PRIVATE \"$<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:${PROJECT_SOURCE_DIR}/src/SDL_internal.h>\")\n  endif()\nendif()\n\nsdl_compile_definitions(\n  PRIVATE\n    \"SDL_BUILD_MAJOR_VERSION=${PROJECT_VERSION_MAJOR}\"\n    \"SDL_BUILD_MINOR_VERSION=${PROJECT_VERSION_MINOR}\"\n    \"SDL_BUILD_MICRO_VERSION=${PROJECT_VERSION_PATCH}\"\n)\n\n##### Tests #####\n\nif(SDL_TEST_LIBRARY)\n  file(GLOB TEST_SOURCES \"${SDL3_SOURCE_DIR}/src/test/*.c\")\n  target_sources(SDL3_test PRIVATE ${TEST_SOURCES})\n  if(APPLE)\n    set_target_properties(SDL3_test PROPERTIES\n      FRAMEWORK \"${SDL_FRAMEWORK}\"\n    )\n    if(SDL_FRAMEWORK)\n      set_target_properties(SDL3_test PROPERTIES\n        FRAMEWORK_VERSION \"${SDL_FRAMEWORK_VERSION}\"\n        MACOSX_FRAMEWORK_IDENTIFIER \"org.libsdl.SDL3_test\"\n        RESOURCE \"${SDL_FRAMEWORK_RESOURCES}\"\n      )\n    endif()\n  endif()\n  target_link_libraries(SDL3_test PUBLIC $<TARGET_NAME:SDL3::Headers>)\n  # FIXME: get rid of EXTRA_TEST_LIBS variable\n  target_link_libraries(SDL3_test PRIVATE ${EXTRA_TEST_LIBS})\n  set_property(TARGET SDL3_test APPEND PROPERTY COMPATIBLE_INTERFACE_STRING \"SDL_VERSION\")\n  set_property(TARGET SDL3_test PROPERTY INTERFACE_SDL_VERSION \"SDL${SDL3_VERSION_MAJOR}\")\nendif()\n\n##### Configure installation folders #####\n\nif(WINDOWS AND NOT MINGW)\n  set(SDL_INSTALL_CMAKEDIR_ROOT_DEFAULT \"cmake\")\nelse()\n  set(SDL_INSTALL_CMAKEDIR_ROOT_DEFAULT \"${CMAKE_INSTALL_LIBDIR}/cmake/SDL3\")\nendif()\nset(SDL_INSTALL_CMAKEDIR_ROOT \"${SDL_INSTALL_CMAKEDIR_ROOT_DEFAULT}\" CACHE STRING \"Root folder where to install SDL3Config.cmake related files (SDL3 subfolder for MSVC projects)\")\n\nif(FREEBSD)\n  # FreeBSD uses ${PREFIX}/libdata/pkgconfig\n  set(SDL_PKGCONFIG_INSTALLDIR \"libdata/pkgconfig\")\nelse()\n  set(SDL_PKGCONFIG_INSTALLDIR \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()\n\nif(WINDOWS AND NOT MINGW)\n  set(SDL_INSTALL_CMAKEDIR \"${SDL_INSTALL_CMAKEDIR_ROOT}\")\n  set(SDL_INSTALL_LICENSEDIR \"licenses/SDL3\")\n  set(SDL_INSTALL_HEADERSDIR \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\")\nelseif(SDL_FRAMEWORK)\n  set(SDL_INSTALL_CMAKEDIR \"SDL3.framework/Versions/${SDL_FRAMEWORK_VERSION}/Resources/CMake\")\n  set(SDL_INSTALL_LICENSEDIR \"Resources\")\n  set(SDL_INSTALL_HEADERSDIR \"Headers\")\nelse()\n  set(SDL_INSTALL_CMAKEDIR \"${SDL_INSTALL_CMAKEDIR_ROOT}\")\n  set(SDL_INSTALL_LICENSEDIR \"${CMAKE_INSTALL_DATAROOTDIR}/licenses/${PROJECT_NAME}\")\n  set(SDL_INSTALL_HEADERSDIR \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\")\nendif()\n\nif(SDL_FRAMEWORK)\n  set(SDL_SDL_INSTALL_RESOURCEDIR \"SDL3.framework/Resources\")\n  set(SDL_SDL_INSTALL_CMAKEDIR \"${SDL_SDL_INSTALL_RESOURCEDIR}/CMake\")\n  set(SDL_SDL_INSTALL_REAL_RESOURCEDIR \"SDL3.framework/Versions/${SDL_FRAMEWORK_VERSION}/Resources\")\n  set(SDL_SDL_INSTALL_REAL_CMAKEDIR \"${SDL_SDL_INSTALL_REAL_RESOURCEDIR}/CMake\")\n\n  set(SDL_SDLtest_INSTALL_RESOURCEDIR \"SDL3_test.framework/Resources\")\n  set(SDL_SDLtest_INSTALL_CMAKEDIR \"${SDL_SDLtest_INSTALL_RESOURCEDIR}/CMake\")\n  set(SDL_SDLtest_INSTALL_CMAKEFILENAME \"SDL3_testConfig.cmake\")\nelse()\n  set(SDL_SDL_INSTALL_RESOURCEDIR \".\")\n  set(SDL_SDL_INSTALL_CMAKEDIR ${SDL_INSTALL_CMAKEDIR})\n  set(SDL_SDL_INSTALL_REAL_CMAKEDIR ${SDL_INSTALL_CMAKEDIR})\n\n  # Install SDL3*Targets.cmake files in lib/cmake/SDL3\n  set(SDL_SDLstatic_INSTALL_RESOURCEDIR \".\")\n  set(SDL_SDLstatic_INSTALL_CMAKEDIR \"${SDL_SDL_INSTALL_CMAKEDIR}\")\n  set(SDL_SDLstatic_INSTALL_CMAKEFILENAME \"SDL3staticTargets.cmake\")\n\n  set(SDL_SDLtest_INSTALL_RESOURCEDIR \".\")\n  set(SDL_SDLtest_INSTALL_CMAKEDIR \"${SDL_SDL_INSTALL_CMAKEDIR}\")\n  set(SDL_SDLtest_INSTALL_CMAKEFILENAME \"SDL3testTargets.cmake\")\nendif()\n\nexport(TARGETS SDL3_Headers NAMESPACE \"SDL3::\" FILE \"SDL3headersTargets.cmake\")\n\nif(SDL_SHARED)\n  export(TARGETS SDL3-shared NAMESPACE \"SDL3::\" FILE \"SDL3sharedTargets.cmake\")\nendif()\n\nif(SDL_STATIC)\n  export(TARGETS SDL3-static NAMESPACE \"SDL3::\" FILE \"SDL3staticTargets.cmake\")\nendif()\n\nif(SDL_TEST_LIBRARY)\n  export(TARGETS SDL3_test NAMESPACE \"SDL3::\" FILE \"SDL3testTargets.cmake\")\nendif()\n\nsdl_cmake_config_find_pkg_config_commands(SDL_FIND_PKG_CONFIG_COMMANDS\n  COLLECTOR SDL3-collector\n  CONFIG_COMPONENT_FOUND_NAME SDL3_SDL3-static_FOUND\n)\nsdl_cmake_config_find_pkg_config_commands(SDL_TEST_FIND_PKG_CONFIG_COMMANDS\n  COLLECTOR SDL3_test-collector\n  CONFIG_COMPONENT_FOUND_NAME SDL3_SDL3_test_FOUND\n)\n\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(cmake/SDL3Config.cmake.in SDL3Config.cmake\n  NO_SET_AND_CHECK_MACRO\n  PATH_VARS CMAKE_INSTALL_PREFIX\n  INSTALL_DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n)\nwrite_basic_package_version_file(\"${CMAKE_CURRENT_BINARY_DIR}/SDL3ConfigVersion.cmake\"\n  COMPATIBILITY AnyNewerVersion\n)\n\nsdl_cmake_config_required_modules(sdl_cmake_modules)\nif(sdl_cmake_modules)\n  execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${sdl_cmake_modules} \"${SDL3_BINARY_DIR}\")\nendif()\n\nif(SDL_INSTALL)\n\n  ##### sdl3.pc #####\n  configure_sdl3_pc()\n  if(NOT SDL_FRAMEWORK)\n    install(FILES ${SDL3_BINARY_DIR}/sdl3.pc DESTINATION \"${SDL_PKGCONFIG_INSTALLDIR}\")\n  endif()\n\n  ##### Installation targets #####()\n\n  install(TARGETS SDL3_Headers EXPORT SDL3headersTargets)\n\n  if(SDL_SHARED)\n    install(TARGETS SDL3-shared EXPORT SDL3sharedTargets\n      PUBLIC_HEADER DESTINATION \"${SDL_INSTALL_HEADERSDIR}\"\n      ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n      FRAMEWORK DESTINATION \".\"\n      RESOURCE DESTINATION \"${SDL_SDL_INSTALL_RESOURCEDIR}\"\n    )\n    if(MSVC)\n      SDL_install_pdb(SDL3-shared \"${CMAKE_INSTALL_BINDIR}\")\n    endif()\n  endif()\n\n  if(SDL_STATIC)\n    install(TARGETS SDL3-static EXPORT SDL3staticTargets\n      ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      FRAMEWORK DESTINATION \".\"\n      RESOURCE DESTINATION \"${SDL_SDLstatic_INSTALL_RESOURCEDIR}\"\n    )\n    if(MSVC)\n      SDL_install_pdb(SDL3-static \"${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n  endif()\n\n  if(SDL_TEST_LIBRARY)\n    install(TARGETS SDL3_test EXPORT SDL3testTargets\n      ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n      FRAMEWORK DESTINATION \".\"\n      RESOURCE DESTINATION \"${SDL_SDLtest_INSTALL_RESOURCEDIR}\"\n    )\n    if(MSVC)\n      SDL_install_pdb(SDL3_test \"${CMAKE_INSTALL_LIBDIR}\")\n    endif()\n  endif()\n\n  ##### Install CMake Targets #####\n\n  install(EXPORT SDL3headersTargets\n    FILE \"SDL3headersTargets.cmake\"\n    NAMESPACE SDL3::\n    DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n  )\n\n  if(SDL_SHARED)\n    install(EXPORT SDL3sharedTargets\n      FILE \"SDL3sharedTargets.cmake\"\n      NAMESPACE SDL3::\n      DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n    )\n  endif()\n\n  if(SDL_STATIC)\n    install(EXPORT SDL3staticTargets\n      FILE \"${SDL_SDLstatic_INSTALL_CMAKEFILENAME}\"\n      NAMESPACE SDL3::\n      DESTINATION \"${SDL_SDLstatic_INSTALL_CMAKEDIR}\"\n    )\n  endif()\n\n  if(SDL_TEST_LIBRARY)\n    install(EXPORT SDL3testTargets\n      FILE \"${SDL_SDLtest_INSTALL_CMAKEFILENAME}\"\n      NAMESPACE SDL3::\n      DESTINATION \"${SDL_SDLtest_INSTALL_CMAKEDIR}\"\n    )\n  endif()\n\n  install(FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/SDL3Config.cmake\n      ${CMAKE_CURRENT_BINARY_DIR}/SDL3ConfigVersion.cmake\n      ${sdl_cmake_modules}\n    DESTINATION \"${SDL_SDL_INSTALL_REAL_CMAKEDIR}\"\n  )\n\n  if(NOT SDL_FRAMEWORK)\n    install(FILES ${SDL3_INCLUDE_FILES}\n      DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\"\n    )\n    if(SDL_TEST_LIBRARY)\n      install(FILES ${SDL3_TEST_INCLUDE_FILES}\n        DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/SDL3\"\n      )\n    endif()\n\n    install(FILES \"LICENSE.txt\" DESTINATION \"${SDL_INSTALL_LICENSEDIR}\")\n  endif()\n\n  if(SDL_INSTALL_CPACK)\n    if(SDL_FRAMEWORK)\n      set(CPACK_GENERATOR \"DragNDrop\")\n    elseif(MSVC)\n      set(CPACK_GENERATOR \"ZIP\")\n    else()\n      set(CPACK_GENERATOR \"TGZ\")\n    endif()\n    configure_file(cmake/CPackProjectConfig.cmake.in CPackProjectConfig.cmake @ONLY)\n    set(CPACK_PROJECT_CONFIG_FILE \"${SDL3_BINARY_DIR}/CPackProjectConfig.cmake\")\n    # CPACK_SOURCE_PACKAGE_FILE_NAME must end with \"-src\" (so we can block creating a source archive)\n    set(CPACK_SOURCE_PACKAGE_FILE_NAME \"SDL${PROJECT_VERSION_MAJOR}-${PROJECT_VERSION}-src\")\n    set(CPACK_PACKAGE_DIRECTORY \"${CMAKE_BINARY_DIR}/dist\")\n    include(CPack)\n  endif()\n\n  if(ANDROID)\n    if(TARGET SDL3-jar)\n      set(SDL_INSTALL_JAVADIR \"${CMAKE_INSTALL_DATAROOTDIR}/java\" CACHE PATH \"Path where to install java clases + java sources\")\n      set(PROGUARD_RULES_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/android-project/app/proguard-rules.pro\")\n      # install_jar or $<TARGET_PROPERTY:SDL3-jar,INSTALL_FILES> does not work on Windows: a SDL3.jar symlink is not generated\n      install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/SDL3-${SDL3_VERSION}.jar\"\n        DESTINATION \"${SDL_INSTALL_JAVADIR}/SDL3\")\n      install(FILES \"${PROGUARD_RULES_PATH}\" RENAME \"proguard.txt\"\n        DESTINATION \"${SDL_INSTALL_JAVADIR}/SDL3\")\n      configure_package_config_file(cmake/SDL3jarTargets.cmake.in SDL3jarTargets.cmake\n        INSTALL_DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n        PATH_VARS SDL_INSTALL_JAVADIR\n        NO_CHECK_REQUIRED_COMPONENTS_MACRO\n        INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\"\n      )\n      install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/SDL3jarTargets.cmake\"\n        DESTINATION \"${SDL_SDL_INSTALL_CMAKEDIR}\"\n      )\n    endif()\n    if(TARGET SDL3-javasources)\n      install(FILES \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-sources.jar\"\n        DESTINATION \"${SDL_INSTALL_JAVADIR}/SDL3\")\n    endif()\n  endif()\n\n  if(SDL_INSTALL_DOCS)\n    SDL_generate_manpages(\n      HEADERS_DIR \"${PROJECT_SOURCE_DIR}/include/SDL3\"\n      SYMBOL \"SDL_Init\"\n      WIKIHEADERS_PL_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/build-scripts/wikiheaders.pl\"\n      REVISION \"${SDL_REVISION}\"\n    )\n    if(TARGET SDL3-javadoc)\n      set(SDL_INSTALL_JAVADOCDIR \"${CMAKE_INSTALL_DATAROOTDIR}/javadoc\" CACHE PATH \"Path where to install SDL3 javadoc\")\n      install(FILES \"${SDL3_BINARY_DIR}/SDL3-${SDL3_VERSION}-javadoc.jar\"\n        DESTINATION \"${SDL_INSTALL_JAVADOCDIR}/SDL3\")\n    endif()\n  endif()\nendif()\n\n##### Uninstall target #####\n\nif(SDL_UNINSTALL)\n  if(NOT TARGET uninstall)\n    configure_file(cmake/cmake_uninstall.cmake.in cmake_uninstall.cmake IMMEDIATE @ONLY)\n\n    add_custom_target(uninstall\n        COMMAND ${CMAKE_COMMAND} -P \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\")\n  endif()\nendif()\n\n##### Tests subproject (must appear after the install/uninstall targets) #####\n\nif(SDL_TESTS)\n  set(HAVE_TESTS ON)\n  enable_testing()\n  add_subdirectory(test)\nendif()\n\n##### Examples subproject (must appear after the install/uninstall targets) #####\n\nif(SDL_EXAMPLES)\n  set(HAVE_EXAMPLES ON)\n  add_subdirectory(examples)\nendif()\n\n##### Fix Objective C builds #####\nstring(APPEND CMAKE_OBJC_FLAGS \" ${CMAKE_C_FLAGS}\")\n\nSDL_PrintSummary()\ndebug_show_sdl_deps()\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 1.8046875,
          "content": "# Simple DirectMedia Layer CREDITS\n\nThanks to everyone who made this possible, including:\n\n- Cliff Matthews, for giving me a reason to start this project. :)  -- Executor rocks!  *grin*\n- Ryan Gordon for helping everybody out and keeping the dream alive. :)\n- Gabriel Jacobo for his work on the Android port and generally helping out all around.\n- Philipp Wiesemann for his attention to detail reviewing the entire SDL code base and proposes patches.\n- Andreas Schiffler for his dedication to unit tests, Visual Studio projects, and managing the Google Summer of Code.\n- Mike Sartain for incorporating SDL into Team Fortress 2 and cheering me on at Valve.\n- Alfred Reynolds for the game controller API and general (in)sanity\n- Jørgen Tjernø¸ for numerous magical macOS fixes.\n- Pierre-Loup Griffais for his deep knowledge of OpenGL drivers.\n- Julian Winter for the SDL 2.0 website.\n- Sheena Smith for many months of great work on the SDL wiki creating the API documentation and style guides.\n- Paul Hunkin for his port of SDL to Android during the Google Summer of Code 2010.\n- Eli Gottlieb for his work on shaped windows during the Google Summer of Code 2010.\n- Jim Grandpre for his work on multi-touch and gesture recognition during\n  the Google Summer of Code 2010.\n- Edgar \"bobbens\" Simo for his force feedback API development during the\n  Google Summer of Code 2008.\n- Aaron Wishnick for his work on audio resampling and pitch shifting during\n  the Google Summer of Code 2008.\n- Holmes Futrell for his port of SDL to the iPhone and iPod Touch during the\n  Google Summer of Code 2008.\n- Jon Atkins for SDL_image, SDL_mixer and SDL_net documentation.\n- Everybody at Loki Software, Inc. for their great contributions!\n\n And a big hand to everyone else who has contributed over the years.\n\nTHANKS! :)\n\n    -- Sam Lantinga <slouken@libsdl.org>\n\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 1.7158203125,
          "content": "# To compile and install SDL:\n\n##  Windows with Visual Studio:\n\nRead ./docs/README-visualc.md\n\n## Windows building with mingw-w64 for x86:\n\nRead [README-windows.md](docs/README-windows.md) for more information on building with MinGW64.\n\nRun: `cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=build-scripts/cmake-toolchain-mingw64-i686.cmake && cmake --build build && cmake --install build`\n\n## Windows building with mingw-w64 for x64:\n\nRead [README-windows.md](docs/README-windows.md).\n\nRun: `cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=build-scripts/cmake-toolchain-mingw64-x86_64.cmake && cmake --build build && cmake --install build`\n\n## macOS with Xcode:\n\nRead docs/README-macos.md\n\n## macOS from the command line:\n\nRun: `cmake -S . -B build && cmake --build build && cmake --install build`\n\n### macOS for universal architecture:\n\nRun: `cmake -S . -B build -DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\" && cmake --build build && cmake --install build`\n\n## Linux and other UNIX systems:\n\nRun: `cmake -S . -B build && cmake --build build --parallel $(nproc) && cmake --install build`\n\n## Android:\n\nRead docs/README-android.md\n\n## iOS:\n\nRead docs/README-ios.md\n\n## Using CMake:\n\nRead docs/README-cmake.md\n\n# Example code\n\nLook at the example programs in ./test, and check out the online\ndocumentation at https://wiki.libsdl.org/SDL3/\n\n# Discussion\n\n## Forums/mailing lists\n\nJoin the SDL developer discussions, sign up on\n\nhttps://discourse.libsdl.org/\n\nand go to the development forum\n\nhttps://discourse.libsdl.org/c/sdl-development/6\n\nOnce you sign up, you can use the forum through the website, or as a mailing\nlist from your email client.\n\n## Announcement list\n\nSign up for the announcement list through the web interface:\n\nhttps://www.libsdl.org/mailing-list.php\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.86328125,
          "content": "Copyright (C) 1997-2025 Sam Lantinga <slouken@libsdl.org>\n  \nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n  \n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required. \n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\n"
        },
        {
          "name": "README-SDL.txt",
          "type": "blob",
          "size": 0.41015625,
          "content": "\nPlease distribute this file with the SDL runtime environment:\n\nThe Simple DirectMedia Layer (SDL for short) is a cross-platform library\ndesigned to make it easy to write multi-media software, such as games\nand emulators.\n\nThe Simple DirectMedia Layer library source code is available from:\nhttps://www.libsdl.org/\n\nThis library is distributed under the terms of the zlib license:\nhttp://www.zlib.net/zlib_license.html\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.6455078125,
          "content": "\n# Simple DirectMedia Layer (SDL) Version 3.0\n\nhttps://www.libsdl.org/\n\nSimple DirectMedia Layer is a cross-platform development library designed\nto provide low level access to audio, keyboard, mouse, joystick, and graphics\nhardware. It is used by video playback software, emulators, and popular games\nincluding Valve's award winning catalog and many Humble Bundle games.\n\nMore extensive documentation is available in the docs directory, starting\nwith [README.md](docs/README.md). If you are migrating to SDL 3.0 from SDL 2.0,\nthe changes are extensively documented in [README-migration.md](docs/README-migration.md).\n\nEnjoy!\n\nSam Lantinga (slouken@libsdl.org)\n"
        },
        {
          "name": "VisualC-GDK",
          "type": "tree",
          "content": null
        },
        {
          "name": "VisualC",
          "type": "tree",
          "content": null
        },
        {
          "name": "WhatsNew.txt",
          "type": "blob",
          "size": 2.1015625,
          "content": "\nThis is a list of major changes in SDL's version history.\n\n---------------------------------------------------------------------------\n3.1.0:\n---------------------------------------------------------------------------\n\nThis is a preview release of the new SDL 3.0 API.\n\nThe ABI hasn't been locked down yet, but it's fairly stable and feedback is welcome!\n\nCheck out [migration guide](docs/README-migration.md) for details on API changes since SDL 2.0, and tips on transitioning your code from SDL2 code to SDL3.\n\nThere have been too many changes to list them all, but here are some of the highlights:\n* The API has been significantly reworked to be easier to use and more consistent\n* The 2D rendering API now has support for more advanced colorspaces and HDR rendering\n* The 2D rendering API now has a Vulkan backend\n* An example of hardware accelerated video playback using ffmpeg has been added in test/testffmpeg.c\n* The shaped window API has been replaced with transparent windows\n* Time and date functions have been added in SDL_time.h\n* Support for webcam video recording has been added in SDL_camera.h\n* Support for handling pens and tablets has been added in SDL_pen.h\n* Support for file open and save dialogs has been added in SDL_dialog.h\n* Cross-platform functions for working with files and directories are available in SDL_filesystem.h\n* A cross-platform abstraction for working with user and game data has been added in SDL_storage.h\n* Handling of main() has been moved to a header library and an optional callback-based program flow is available\n* Support for simple object properties has been added in SDL_properties.h. These properties are available on many SDL objects, and can be used for more advanced functionality.\n\nPlease let us know about issues and feedback at: https://github.com/libsdl-org/SDL/issues\n\nThe development team is focused on code, moving towards the final release, and we would love volunteers to help improve the documentation. Please send e-mail to slouken@libsdl.org if you'd like to help out!\n\nFinally, a giant thank you to all the people who have contributed code and feedback to the SDL 3.0 improvements!\n"
        },
        {
          "name": "Xcode",
          "type": "tree",
          "content": null
        },
        {
          "name": "android-project",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "wayland-protocols",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}