{
  "metadata": {
    "timestamp": 1736710468364,
    "page": 102,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMw==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "krallin/tini",
      "stars": 10027,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "./dist\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": "dist\nsign.key\n.env\n.mypy_cache\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.787109375,
          "content": "sudo: required\nservices:\n  - docker\n\nlanguage: generic\n\nenv:\n  matrix:\n    - ARCH_SUFFIX= CC=gcc ARCH_NATIVE=1 MINIMAL=\n    - ARCH_SUFFIX=amd64 CC=gcc ARCH_NATIVE=1 MINIMAL=\n    - ARCH_SUFFIX=amd64 CC=gcc ARCH_NATIVE=1 MINIMAL=1\n    - ARCH_SUFFIX=x86_64 CC=gcc ARCH_NATIVE=1 MINIMAL=\n    - ARCH_SUFFIX=x86_64 CC=gcc ARCH_NATIVE=1 MINIMAL=1\n    - ARCH_SUFFIX=arm64 CC=aarch64-linux-gnu-gcc ARCH_NATIVE= MINIMAL=\n    - ARCH_SUFFIX=armel CC=arm-linux-gnueabi-gcc ARCH_NATIVE= MINIMAL=\n    - ARCH_SUFFIX=armhf CC=arm-linux-gnueabihf-gcc ARCH_NATIVE= MINIMAL=\n    - ARCH_SUFFIX=i386 CFLAGS=\"-m32\" ARCH_NATIVE= MINIMAL=\n    - ARCH_SUFFIX=muslc-amd64 CC=musl-gcc ARCH_NATIVE=1 MINIMAL=\n    - ARCH_SUFFIX=ppc64el CC=powerpc64le-linux-gnu-gcc ARCH_NATIVE= MINIMAL=\n    - ARCH_SUFFIX=ppc64le CC=powerpc64le-linux-gnu-gcc ARCH_NATIVE= MINIMAL=\n    - ARCH_SUFFIX=s390x CC=s390x-linux-gnu-gcc ARCH_NATIVE= MINIMAL=\n    - ARCH_SUFFIX=mips64el CC=mips64el-linux-gnuabi64-gcc-5 ARCH_NATIVE= MINIMAL=\n  global:\n    - secure: \"RKF9Z9gLxp6k/xITqn7ma1E9HfpYcDXuJFf4862WeH9EMnK9lDq+TWnGsQfkIlqh8h9goe7U+BvRiTibj9MiD5u7eluLo3dlwsLxPpYtyswYeLeC1wKKdT5LPGAXbRKomvBalRYMI+dDnGIM4w96mHgGGvx2zZXGkiAQhm6fJ3k=\"\n    - DIST_DIR=\"${PWD}/dist\"\n\nbefore_install:\n  - openssl aes-256-cbc -K $encrypted_2893fd5649e7_key -iv $encrypted_2893fd5649e7_iv -in sign.key.enc -out sign.key -d || echo \"Encrypted signing key unavailable\"\n\nscript:\n  - ./ddist.sh\n  - ls -lah \"$DIST_DIR\"\n  - git diff --exit-code\n\ndeploy:\n  provider: releases\n  api_key:\n    secure: VaYWmhdyhPYNvUy0tlGBYdjsdHIGHh/jwYzC96DBLS9BYIErtBkm21sdCLPKuNI1mGOwqoUjY+WywV2zJaBG10iBQCuFLpA9bblnN4fi257m79z7zqMbCvM145Up9x2jMQ0v03avd6pxCfQsr8WC9fnhWVYaD68Ir/hTpjZ60u8=\n  file: \"${DIST_DIR}/*\"\n  file_glob: true\n  skip_cleanup: true\n  on:\n    repo: krallin/tini\n    tags: true\n    condition: '-z \"$MINIMAL\"'\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.34765625,
          "content": "cmake_minimum_required (VERSION 2.8.12)\nproject (tini C)\n\n# Config\nset (tini_VERSION_MAJOR 0)\nset (tini_VERSION_MINOR 19)\nset (tini_VERSION_PATCH 0)\n\n# Build options\noption(MINIMAL \"Disable argument parsing and verbose output\" OFF)\n\nif(MINIMAL)\n\tadd_definitions(-DTINI_MINIMAL=1)\nendif()\n\n# Extract git version and dirty-ness\nexecute_process (\n  COMMAND git --git-dir \"${PROJECT_SOURCE_DIR}/.git\" --work-tree \"${PROJECT_SOURCE_DIR}\" log -n 1 --date=local --pretty=format:%h\n  WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n  RESULT_VARIABLE git_version_check_ret\n  OUTPUT_VARIABLE tini_VERSION_GIT\n)\n\nexecute_process(\n  COMMAND git --git-dir \"${PROJECT_SOURCE_DIR}/.git\" --work-tree \"${PROJECT_SOURCE_DIR}\" status --porcelain --untracked-files=no\n  WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n  OUTPUT_VARIABLE git_dirty_check_out\n)\n\nif(\"${git_version_check_ret}\" EQUAL 0)\n  set(tini_VERSION_GIT \" - git.${tini_VERSION_GIT}\")\n  if(NOT \"${git_dirty_check_out}\" STREQUAL \"\")\n    set(tini_VERSION_GIT \"${tini_VERSION_GIT}-dirty\")\n  endif()\nelse()\n  set(tini_VERSION_GIT \"\")\nendif()\n\n# Flags\ninclude(CheckCSourceCompiles)\n\ncheck_c_source_compiles(\"\n#ifndef _FORTIFY_SOURCE\n#error \\\"Not defined: _FORTIFY_SOURCE\\\"\n#endif\nint main(void)                                                                                                              {\n  return 0;\n}\n\" HAS_BUILTIN_FORTIFY)\n\n# Flags\nif(NOT HAS_BUILTIN_FORTIFY)\n\tadd_definitions(-D_FORTIFY_SOURCE=2)\nendif()\n\nset (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu99 -Werror -Wextra -Wall -pedantic-errors -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat\")\nset (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-s\")\n\n# Build\n\nconfigure_file (\n\t\"${PROJECT_SOURCE_DIR}/src/tiniConfig.h.in\"\n\t\"${PROJECT_BINARY_DIR}/tiniConfig.h\"\n\t@ONLY\n)\n\nconfigure_file (\n\t\"${PROJECT_SOURCE_DIR}/tpl/README.md.in\"\n\t\"${PROJECT_SOURCE_DIR}/README.md\"\n\t@ONLY\n)\n\nconfigure_file (\n\t\"${PROJECT_SOURCE_DIR}/tpl/VERSION.in\"\n\t\"${PROJECT_BINARY_DIR}/VERSION\"\n\t@ONLY\n)\n\n\ninclude_directories (\"${PROJECT_BINARY_DIR}\")\n\nadd_executable (tini src/tini.c)\n\nadd_executable (tini-static src/tini.c)\nset_target_properties (tini-static PROPERTIES LINK_FLAGS \"-Wl,--no-export-dynamic -static\")\n\n# Installation\ninstall (TARGETS tini DESTINATION bin)\ninstall (TARGETS tini-static DESTINATION bin)\n\n# Packaging\ninclude (InstallRequiredSystemLibraries)\nset (CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A tiny but valid init process for containers\")\nset (CPACK_PACKAGE_VENDOR \"Thomas Orozco\")\nset (CPACK_PACKAGE_CONTACT \"thomas@orozco.fr\")\nset (CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\nset (CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\nset (CPACK_PACKAGE_VERSION_MAJOR \"${tini_VERSION_MAJOR}\")\nset (CPACK_PACKAGE_VERSION_MINOR \"${tini_VERSION_MINOR}\")\nset (CPACK_PACKAGE_VERSION_PATCH \"${tini_VERSION_PATCH}\")\nset (CPACK_PACKAGE_EXECUTABLES \"${CMAKE_PROJECT_NAME}\")\nset (CPACK_PACKAGE_NAME \"${CMAKE_PROJECT_NAME}\")\nset (CPACK_PACKAGE_FILE_NAME \"${CMAKE_PROJECT_NAME}_${tini_VERSION_MAJOR}.${tini_VERSION_MINOR}.${tini_VERSION_PATCH}\")\nset (CPACK_PACKAGE_VERSION \"${tini_VERSION_MAJOR}.${tini_VERSION_MINOR}.${tini_VERSION_PATCH}\")\n\nset (CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"amd64\")  # TODO\nset (CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6 (>= 2.3.4)\")\n\nset (CPACK_RPM_PACKAGE_ARCHITECTURE \"x86_64\")\n\nset (CPACK_GENERATOR \"DEB\" \"RPM\")\n\ninclude (CPack)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.39453125,
          "content": "FROM ubuntu:xenial\n\nARG ARCH_SUFFIX\n\nCOPY ci/install_deps.sh /install_deps.sh\nRUN /install_deps.sh\n\n# Pre-install those here for faster local builds.\nRUN CFLAGS=\"-DPR_SET_CHILD_SUBREAPER=36 -DPR_GET_CHILD_SUBREAPER=37\" python3 -m pip install psutil python-prctl bitmap\n\nARG ARCH_NATIVE\nARG CC\n\n# Persist ARGs into the image\n\nENV ARCH_SUFFIX=\"$ARCH_SUFFIX\" \\\n    ARCH_NATIVE=\"$ARCH_NATIVE\" \\\n    CC=\"$CC\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0732421875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Thomas Orozco <thomas@orozco.fr>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.9580078125,
          "content": "<!--\n\n#####################################\n# THIS FILE IS AUTOGENERATED!       #\n# Edit ./tpl/README.md.in instead   #\n#####################################\n\n-->\n\n\nTini - A tiny but valid `init` for containers\n=============================================\n\n[![Build Status](https://travis-ci.org/krallin/tini.svg?branch=master)](https://travis-ci.org/krallin/tini)\n\nTini is the simplest `init` you could think of.\n\nAll Tini does is spawn a single child (Tini is meant to be run in a container),\nand wait for it to exit all the while reaping zombies and performing\nsignal forwarding.\n\n\nWhy Tini?\n---------\n\nUsing Tini has several benefits:\n\n- It protects you from software that accidentally creates zombie processes,\n  which can (over time!) starve your entire system for PIDs (and make it\n  unusable).\n- It ensures that the *default signal handlers* work for the software you run\n  in your Docker image. For example, with Tini, `SIGTERM` properly terminates\n  your process even if you didn't explicitly install a signal handler for it.\n- It does so completely transparently! Docker images that work without Tini\n  will work with Tini without any changes.\n\nIf you'd like more detail on why this is useful, review this issue discussion:\n[What is advantage of Tini?][0].\n\n\nUsing Tini\n----------\n\n*NOTE: If you are using Docker 1.13 or greater, Tini is included in Docker\nitself. This includes all versions of Docker CE. To enable Tini, just [pass the\n`--init` flag to `docker run`][5].*\n\n*NOTE: There are [pre-built Docker images available for Tini][10]. If\nyou're currently using an Ubuntu or CentOS image as your base, you can use\none of those as a drop-in replacement.*\n\n*NOTE: There are Tini packages for Alpine Linux and NixOS. See below for\ninstallation instructions.*\n\nAdd Tini to your container, and make it executable. Then, just invoke Tini\nand pass your program and its arguments as arguments to Tini.\n\nIn Docker, you will want to use an entrypoint so you don't have to remember\nto manually invoke Tini:\n\n    # Add Tini\n    ENV TINI_VERSION v0.19.0\n    ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\n    RUN chmod +x /tini\n    ENTRYPOINT [\"/tini\", \"--\"]\n\n    # Run your program under Tini\n    CMD [\"/your/program\", \"-and\", \"-its\", \"arguments\"]\n    # or docker run your-image /your/program ...\n\nNote that you *can* skip the `--` under certain conditions, but you might\nas well always include it to be safe. If you see an error message that\nlooks like `tini: invalid option -- 'c'`, then you *need* to add the `--`.\n\nArguments for Tini itself should be passed like `-v` in the following example:\n`/tini -v -- /your/program`.\n\n*NOTE: The binary linked above is a 64-bit dynamically-linked binary.*\n\n\n### Signed binaries ###\n\nThe `tini` and `tini-static` binaries are signed using the key `595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7`.\n\nYou can verify their signatures using `gpg` (which you may install using\nyour package manager):\n\n    ENV TINI_VERSION v0.19.0\n    ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini\n    ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc /tini.asc\n    RUN gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \\\n     && gpg --batch --verify /tini.asc /tini\n    RUN chmod +x /tini\n\n\n### Verifying binaries via checksum ###\n\nThe `tini` and `tini-static` binaries have generated checksums (`SHA1` and `SHA256`).\n\nYou can verify their checksums using `sha1sum` and `sha256sum` (which you may install using\nyour package manager):\n\n    ENV TINI_VERSION v0.19.0\n    RUN wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-amd64 \\\n        && wget --no-check-certificate --no-cookies --quiet https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-amd64.sha256sum \\\n        && echo \"$(cat tini-amd64.sha256sum)\" | sha256sum -c\n\n\n### Alpine Linux Package ###\n\nOn Alpine Linux, you can use the following command to install Tini:\n\n    RUN apk add --no-cache tini\n    # Tini is now available at /sbin/tini\n    ENTRYPOINT [\"/sbin/tini\", \"--\"]\n\n\n### NixOS ###\n\nUsing Nix, you can use the following command to install Tini:\n\n    nix-env --install tini\n\n\n### Debian ###\n\nOn Debian (Buster or newer), you can use the following command to install Tini:\n\n    apt-get install tini\n\nNote that this installs `/usr/bin/tini` (and `/usr/bin/tini-static`), not `/tini`.\n\n\n### Arch Linux ###\n\nOn Arch Linux, there is a package available on the [AUR](https://wiki.archlinux.org/index.php/Arch_User_Repository).\nInstall using the [official instructions](https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_packages)\nor use an [AUR helper](https://wiki.archlinux.org/index.php/AUR_helpers):\n\n    pacaur -S tini\n\n\n### Other Platforms ###\n\nARM and 32-bit binaries are available! You can find the complete list of\navailable binaries under [the releases tab][11].\n\n\nOptions\n-------\n\n### Verbosity ###\n\nThe `-v` argument can be used for extra verbose output (you can pass it up to\n3 times, e.g. `-vvv`).\n\n\n### Subreaping ###\n\nBy default, Tini needs to run as PID 1 so that it can reap zombies (by\nrunning as PID 1, zombies get re-parented to Tini).\n\nIf for some reason, you cannot run Tini as PID 1, you should register Tini as\na process subreaper instead (only in Linux >= 3.4), by either:\n\n  + Passing the `-s` argument to Tini (`tini -s -- ...`)\n  + Setting the environment variable `TINI_SUBREAPER`\n    (e.g. `export TINI_SUBREAPER=`).\n\nThis will ensure that zombies get re-parented to Tini despite Tini not running\nas PID 1.\n\n*NOTE: Tini will issue a warning if it detects that it isn't running as PID 1\nand isn't registered as a subreaper. If you don't see a warning, you're fine.*\n\n\n### Remapping exit codes ###\n\nTini will reuse the child's exit code when exiting, but occasionally, this may\nnot be exactly what you want (e.g. if your child exits with 143 after receiving\nSIGTERM). Notably, this can be an issue with Java apps.\n\nIn this case, you can use the `-e` flag to remap an arbitrary exit code to 0.\nYou can pass the flag multiple times if needed.\n\nFor example:\n\n```\ntini -e 143 -- ...\n```\n\n\n### Process group killing ###\n\nBy default, Tini only kills its immediate child process.  This can be\ninconvenient if sending a signal to that process does not have the desired\neffect.  For example, if you do\n\n    docker run krallin/ubuntu-tini sh -c 'sleep 10'\n\nand ctrl-C it, nothing happens: SIGINT is sent to the 'sh' process,\nbut that shell won't react to it while it is waiting for the 'sleep'\nto finish.\n\nWith the `-g` option, Tini kills the child process group , so that\nevery process in the group gets the signal. This corresponds more\nclosely to what happens when you do ctrl-C etc. in a terminal: The\nsignal is sent to the foreground process group.\n\n\n### Parent Death Signal ###\n\nTini can set its parent death signal, which is the signal Tini should receive\nwhen *its* parent exits. To set the parent death signal, use the `-p` flag with\nthe name of the signal Tini should receive when its parent exits:\n\n```\ntini -p SIGTERM -- ...\n```\n\n*NOTE: See [this PR discussion][12] to learn more about the parent death signal\nand use cases.*\n\n\nMore\n----\n\n### Existing Entrypoint ###\n\nTini can also be used with an existing entrypoint in your container!\n\nAssuming your entrypoint was `/docker-entrypoint.sh`, then you would use:\n\n    ENTRYPOINT [\"/tini\", \"--\", \"/docker-entrypoint.sh\"]\n\n\n### Statically-Linked Version ###\n\nTini has very few dependencies (it only depends on libc), but if your\ncontainer fails to start, you might want to consider using the statically-built\nversion instead:\n\n    ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-static /tini\n\n\n### Size Considerations ###\n\nTini is a very small file (in the 10KB range), so it doesn't add much weight\nto your container.\n\nThe statically-linked version is bigger, but still < 1M.\n\n\nBuilding Tini\n-------------\n\nIf you'd rather not download the binary, you can build Tini by running\n`cmake . && make`.\n\nBefore building, you probably also want to run:\n\n    export CFLAGS=\"-DPR_SET_CHILD_SUBREAPER=36 -DPR_GET_CHILD_SUBREAPER=37\"\n\nThis ensure that even if you're building on a system that has old Linux Kernel\nheaders (< 3.4), Tini will be built with child subreaper support. This is\nusually what you want if you're going to use Tini with Docker (if your host\nKernel supports Docker, it should also support child subreapers).\n\n\nUnderstanding Tini\n------------------\n\nAfter spawning your process, Tini will wait for signals and forward those\nto the child process, and periodically reap zombie processes that may be\ncreated within your container.\n\nWhen the \"first\" child process exits (`/your/program` in the examples above),\nTini exits as well, with the exit code of the child process (so you can\ncheck your container's exit code to know whether the child exited\nsuccessfully).\n\n\nDebugging\n---------\n\nIf something isn't working just like you expect, consider increasing the\nverbosity level (up to 3):\n\n    tini -v    -- bash -c 'exit 1'\n    tini -vv   -- true\n    tini -vvv  -- pwd\n\n\nAuthors\n=======\n\nMaintainer:\n\n  + [Thomas Orozco][20]\n\nContributors:\n\n  + [Tianon Gravi][30]\n  + [David Wragg][31]\n  + [Michael Crosby][32]\n  + [Wyatt Preul][33]\n  + [Patrick Steinhardt][34]\n\nSpecial thanks to:\n\n  + [Danilo Bürger][40] for packaging Tini for Alpine\n  + [Asko Soukka][41] for packaging Tini for Nix\n  + [nfnty][42] for packaging Tini for Arch Linux\n\n\n  [0]: https://github.com/krallin/tini/issues/8\n  [5]: https://docs.docker.com/engine/reference/commandline/run/\n  [10]: https://github.com/krallin/tini-images\n  [11]: https://github.com/krallin/tini/releases\n  [12]: https://github.com/krallin/tini/pull/114\n  [20]: https://github.com/krallin/\n  [30]: https://github.com/tianon\n  [31]: https://github.com/dpw\n  [32]: https://github.com/crosbymichael\n  [33]: https://github.com/geek\n  [34]: https://github.com/pks-t\n  [40]: https://github.com/danilobuerger\n  [41]: https://github.com/datakurre\n  [42]: https://github.com/nfnty/pkgbuilds/tree/master/tini/tini\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "ddist.sh",
          "type": "blob",
          "size": 0.8955078125,
          "content": "#!/bin/bash\nset -o errexit\nset -o nounset\n\nREL_HERE=$(dirname \"${BASH_SOURCE}\")\nHERE=$(cd \"${REL_HERE}\"; pwd)\n\nIMG=\"tini-build\"\n\nif [[ -n \"${ARCH_SUFFIX-}\" ]]; then\n  IMG=\"${IMG}_${ARCH_SUFFIX}\"\nfi\n\nif [[ -n \"${ARCH_NATIVE-}\" ]]; then\n  IMG=\"${IMG}_native\"\nfi\n\nif [[ -n \"${CC-}\" ]]; then\n  IMG=\"${IMG}_${CC}\"\nfi\n\n# Cleanup the build dir\nrm -f \"${HERE}/dist\"/*\n\n# Create the build image\necho \"build: ${IMG}\"\n\ndocker build \\\n  --build-arg \"ARCH_SUFFIX=${ARCH_SUFFIX-}\" \\\n  --build-arg \"ARCH_NATIVE=${ARCH_NATIVE-}\" \\\n  --build-arg \"CC=${CC-gcc}\" \\\n  -t \"${IMG}\" \\\n  .\n\n# Build new Tini\nSRC=\"/tini\"\n\ndocker run -it --rm \\\n  --volume=\"${HERE}:${SRC}\" \\\n  -e BUILD_DIR=/tmp/tini-build \\\n  -e SOURCE_DIR=\"${SRC}\" \\\n  -e FORCE_SUBREAPER=\"${FORCE_SUBREAPER-1}\" \\\n  -e GPG_PASSPHRASE=\"${GPG_PASSPHRASE-}\" \\\n  -e CFLAGS=\"${CFLAGS-}\" \\\n  -e MINIMAL=\"${MINIMAL-}\" \\\n  -u \"$(id -u):$(id -g)\" \\\n  \"${IMG}\" \"${SRC}/ci/run_build.sh\"\n"
        },
        {
          "name": "dtest.sh",
          "type": "blob",
          "size": 0.1982421875,
          "content": "#!/bin/bash\nset -o errexit\nset -o nounset\n\nIMG=\"tini\"\n\nif [[ \"$#\" != 1 ]]; then\n  echo \"Usage: $0 ARCH_SUFFIX\"\n  exit 1\nfi\nsuffix=\"$1\"\n\nIMG=\"tini-build-${suffix}\"\npython test/run_outer_tests.py \"${IMG}\"\n"
        },
        {
          "name": "run_tests.sh",
          "type": "blob",
          "size": 0.2646484375,
          "content": "#!/bin/bash\nset -o errexit\nset -o nounset\n\nREL_HERE=$(dirname \"${BASH_SOURCE}\")\nHERE=$(cd \"${REL_HERE}\"; pwd)\n\nfor i in $(seq 0 1); do\n  export FORCE_SUBREAPER=\"${i}\"\n  echo \"Testing with FORCE_SUBREAPER=${FORCE_SUBREAPER}\"\n  \"${HERE}/ddist.sh\"\n  \"${HERE}/dtest.sh\"\ndone\n"
        },
        {
          "name": "sign.key.enc",
          "type": "blob",
          "size": 4,
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tpl",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}