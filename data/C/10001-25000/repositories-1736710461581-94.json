{
  "metadata": {
    "timestamp": 1736710461581,
    "page": 94,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fogleman/Craft",
      "stars": 10509,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": ".DS_Store\nMakefile\nCMakeCache.txt\nCMakeFiles\ncmake_install.cmake\nconfig.py\ncraft\nworld\nenv\nlog.txt\n*.o\n*.db\n*.exe\n*.dll\n*.pyc\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.1689453125,
          "content": "cmake_minimum_required(VERSION 2.8)\n\nproject(craft)\n\nFILE(GLOB SOURCE_FILES src/*.c)\n\nadd_executable(\n    craft\n    ${SOURCE_FILES}\n    deps/glew/src/glew.c\n    deps/lodepng/lodepng.c\n    deps/noise/noise.c\n    deps/sqlite/sqlite3.c\n    deps/tinycthread/tinycthread.c)\n\nadd_definitions(-std=c99 -O3)\n\nadd_subdirectory(deps/glfw)\ninclude_directories(deps/glew/include)\ninclude_directories(deps/glfw/include)\ninclude_directories(deps/lodepng)\ninclude_directories(deps/noise)\ninclude_directories(deps/sqlite)\ninclude_directories(deps/tinycthread)\n\nif(MINGW)\n    set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH}\n        \"C:/Program Files/CURL/lib\" \"C:/Program Files (x86)/CURL/lib\")\n    set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH}\n        \"C:/Program Files/CURL/include\" \"C:/Program Files (x86)/CURL/include\")\nendif()\n\nfind_package(CURL REQUIRED)\ninclude_directories(${CURL_INCLUDE_DIR})\n\nif(APPLE)\n    target_link_libraries(craft glfw\n        ${GLFW_LIBRARIES} ${CURL_LIBRARIES})\nendif()\n\nif(UNIX)\n    target_link_libraries(craft dl glfw\n        ${GLFW_LIBRARIES} ${CURL_LIBRARIES})\nendif()\n\nif(MINGW)\n    target_link_libraries(craft ws2_32.lib glfw\n        ${GLFW_LIBRARIES} ${CURL_LIBRARIES})\nendif()\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (C) 2013 Michael Fogleman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.7255859375,
          "content": "## Craft\n\nMinecraft clone for Windows, Mac OS X and Linux. Just a few thousand lines of C using modern OpenGL (shaders). Online multiplayer support is included using a Python-based server.\n\nhttp://www.michaelfogleman.com/craft/\n\n![Screenshot](https://i.imgur.com/SH7wcas.png)\n\n### Features\n\n* Simple but nice looking terrain generation using perlin / simplex noise.\n* More than 10 types of blocks and more can be added easily.\n* Supports plants (grass, flowers, trees, etc.) and transparency (glass).\n* Simple clouds in the sky (they don't move).\n* Day / night cycles and a textured sky dome.\n* World changes persisted in a sqlite3 database.\n* Multiplayer support!\n\n### Download\n\nMac and Windows binaries are available on the website.\n\nhttp://www.michaelfogleman.com/craft/\n\nSee below to run from source.\n\n### Install Dependencies\n\n#### Mac OS X\n\nDownload and install [CMake](http://www.cmake.org/cmake/resources/software.html)\nif you don't already have it. You may use [Homebrew](http://brew.sh) to simplify\nthe installation:\n\n    brew install cmake\n\n#### Linux (Ubuntu)\n\n    sudo apt-get install cmake libglew-dev xorg-dev libcurl4-openssl-dev\n    sudo apt-get build-dep glfw\n\n#### Windows\n\nDownload and install [CMake](http://www.cmake.org/cmake/resources/software.html)\nand [MinGW](http://www.mingw.org/). Add `C:\\MinGW\\bin` to your `PATH`.\n\nDownload and install [cURL](http://curl.haxx.se/download.html) so that\nCURL/lib and CURL/include are in your Program Files directory.\n\nUse the following commands in place of the ones described in the next section.\n\n    cmake -G \"MinGW Makefiles\"\n    mingw32-make\n\n### Compile and Run\n\nOnce you have the dependencies (see above), run the following commands in your\nterminal.\n\n    git clone https://github.com/fogleman/Craft.git\n    cd Craft\n    cmake .\n    make\n    ./craft\n\n### Multiplayer\n\nAfter many years, craft.michaelfogleman.com has been taken down. See the [Server](#server) section for info on self-hosting.\n\n#### Client\n\nYou can connect to a server with command line arguments...\n\n```bash\n./craft [HOST [PORT]]\n```\n\nOr, with the \"/online\" command in the game itself.\n    \n    /online [HOST [PORT]]\n\n#### Server\n\nYou can run your own server or connect to mine. The server is written in Python\nbut requires a compiled DLL so it can perform the terrain generation just like\nthe client.\n\n```bash\ngcc -std=c99 -O3 -fPIC -shared -o world -I src -I deps/noise deps/noise/noise.c src/world.c\npython server.py [HOST [PORT]]\n```\n\n### Controls\n\n- WASD to move forward, left, backward, right.\n- Space to jump.\n- Left Click to destroy a block.\n- Right Click or Cmd + Left Click to create a block.\n- Ctrl + Right Click to toggle a block as a light source.\n- 1-9 to select the block type to create.\n- E to cycle through the block types.\n- Tab to toggle between walking and flying.\n- ZXCVBN to move in exact directions along the XYZ axes.\n- Left shift to zoom.\n- F to show the scene in orthographic mode.\n- O to observe players in the main view.\n- P to observe players in the picture-in-picture view.\n- T to type text into chat.\n- Forward slash (/) to enter a command.\n- Backquote (`) to write text on any block (signs).\n- Arrow keys emulate mouse movement.\n- Enter emulates mouse click.\n\n### Chat Commands\n\n    /goto [NAME]\n\nTeleport to another user.\nIf NAME is unspecified, a random user is chosen.\n\n    /list\n\nDisplay a list of connected users.\n\n    /login NAME\n\nSwitch to another registered username.\nThe login server will be re-contacted. The username is case-sensitive.\n\n    /logout\n\nUnauthenticate and become a guest user.\nAutomatic logins will not occur again until the /login command is re-issued.\n\n    /offline [FILE]\n\nSwitch to offline mode.\nFILE specifies the save file to use and defaults to \"craft\".\n\n    /online HOST [PORT]\n\nConnect to the specified server.\n\n    /pq P Q\n\nTeleport to the specified chunk.\n\n    /spawn\n\nTeleport back to the spawn point.\n\n### Screenshot\n\n![Screenshot](https://i.imgur.com/foYz3aN.png)\n\n### Implementation Details\n\n#### Terrain Generation\n\nThe terrain is generated using Simplex noise - a deterministic noise function seeded based on position. So the world will always be generated the same way in a given location.\n\nThe world is split up into 32x32 block chunks in the XZ plane (Y is up). This allows the world to be “infinite” (floating point precision is currently a problem at large X or Z values) and also makes it easier to manage the data. Only visible chunks need to be queried from the database.\n\n#### Rendering\n\nOnly exposed faces are rendered. This is an important optimization as the vast majority of blocks are either completely hidden or are only exposing one or two faces. Each chunk records a one-block width overlap for each neighboring chunk so it knows which blocks along its perimeter are exposed.\n\nOnly visible chunks are rendered. A naive frustum-culling approach is used to test if a chunk is in the camera’s view. If it is not, it is not rendered. This results in a pretty decent performance improvement as well.\n\nChunk buffers are completely regenerated when a block is changed in that chunk, instead of trying to update the VBO.\n\nText is rendered using a bitmap atlas. Each character is rendered onto two triangles forming a 2D rectangle.\n\n“Modern” OpenGL is used - no deprecated, fixed-function pipeline functions are used. Vertex buffer objects are used for position, normal and texture coordinates. Vertex and fragment shaders are used for rendering. Matrix manipulation functions are in matrix.c for translation, rotation, perspective, orthographic, etc. matrices. The 3D models are made up of very simple primitives - mostly cubes and rectangles. These models are generated in code in cube.c.\n\nTransparency in glass blocks and plants (plants don’t take up the full rectangular shape of their triangle primitives) is implemented by discarding magenta-colored pixels in the fragment shader.\n\n#### Database\n\nUser changes to the world are stored in a sqlite database. Only the delta is stored, so the default world is generated and then the user changes are applied on top when loading.\n\nThe main database table is named “block” and has columns p, q, x, y, z, w. (p, q) identifies the chunk, (x, y, z) identifies the block position and (w) identifies the block type. 0 represents an empty block (air).\n\nIn game, the chunks store their blocks in a hash map. An (x, y, z) key maps to a (w) value.\n\nThe y-position of blocks are limited to 0 <= y < 256. The upper limit is mainly an artificial limitation to prevent users from building unnecessarily tall structures. Users are not allowed to destroy blocks at y = 0 to avoid falling underneath the world.\n\n#### Multiplayer\n\nMultiplayer mode is implemented using plain-old sockets. A simple, ASCII, line-based protocol is used. Each line is made up of a command code and zero or more comma-separated arguments. The client requests chunks from the server with a simple command: C,p,q,key. “C” means “Chunk” and (p, q) identifies the chunk. The key is used for caching - the server will only send block updates that have been performed since the client last asked for that chunk. Block updates (in realtime or as part of a chunk request) are sent to the client in the format: B,p,q,x,y,z,w. After sending all of the blocks for a requested chunk, the server will send an updated cache key in the format: K,p,q,key. The client will store this key and use it the next time it needs to ask for that chunk. Player positions are sent in the format: P,pid,x,y,z,rx,ry. The pid is the player ID and the rx and ry values indicate the player’s rotation in two different axes. The client interpolates player positions from the past two position updates for smoother animation. The client sends its position to the server at most every 0.1 seconds (less if not moving).\n\nClient-side caching to the sqlite database can be performance intensive when connecting to a server for the first time. For this reason, sqlite writes are performed on a background thread. All writes occur in a transaction for performance. The transaction is committed every 5 seconds as opposed to some logical amount of work completed. A ring / circular buffer is used as a queue for what data is to be written to the database.\n\nIn multiplayer mode, players can observe one another in the main view or in a picture-in-picture view. Implementation of the PnP was surprisingly simple - just change the viewport and render the scene again from the other player’s point of view.\n\n#### Collision Testing\n\nHit testing (what block the user is pointing at) is implemented by scanning a ray from the player’s position outward, following their sight vector. This is not a precise method, so the step rate can be made smaller to be more accurate.\n\nCollision testing simply adjusts the player’s position to remain a certain distance away from any adjacent blocks that are obstacles. (Clouds and plants are not marked as obstacles, so you pass right through them.)\n\n#### Sky Dome\n\nA textured sky dome is used for the sky. The X-coordinate of the texture represents time of day. The Y-values map from the bottom of the sky sphere to the top of the sky sphere. The player is always in the center of the sphere. The fragment shaders for the blocks also sample the sky texture to determine the appropriate fog color to blend with based on the block’s position relative to the backing sky.\n\n#### Ambient Occlusion\n\nAmbient occlusion is implemented as described on this page:\n\nhttp://0fps.wordpress.com/2013/07/03/ambient-occlusion-for-minecraft-like-worlds/\n\n#### Dependencies\n\n* GLEW is used for managing OpenGL extensions across platforms.\n* GLFW is used for cross-platform window management.\n* CURL is used for HTTPS / SSL POST for the authentication process.\n* lodepng is used for loading PNG textures.\n* sqlite3 is used for saving the blocks added / removed by the user.\n* tinycthread is used for cross-platform threading.\n"
        },
        {
          "name": "builder.py",
          "type": "blob",
          "size": 7.86328125,
          "content": "# This file allows you to programmatically create blocks in Craft.\n# Please use this wisely. Test on your own server first. Do not abuse it.\n\nimport requests\nimport socket\nimport sqlite3\nimport sys\n\nDEFAULT_HOST = '127.0.0.1'\nDEFAULT_PORT = 4080\n\nEMPTY = 0\nGRASS = 1\nSAND = 2\nSTONE = 3\nBRICK = 4\nWOOD = 5\nCEMENT = 6\nDIRT = 7\nPLANK = 8\nSNOW = 9\nGLASS = 10\nCOBBLE = 11\nLIGHT_STONE = 12\nDARK_STONE = 13\nCHEST = 14\nLEAVES = 15\nCLOUD = 16\nTALL_GRASS = 17\nYELLOW_FLOWER = 18\nRED_FLOWER = 19\nPURPLE_FLOWER = 20\nSUN_FLOWER = 21\nWHITE_FLOWER = 22\nBLUE_FLOWER = 23\n\nOFFSETS = [\n    (-0.5, -0.5, -0.5),\n    (-0.5, -0.5, 0.5),\n    (-0.5, 0.5, -0.5),\n    (-0.5, 0.5, 0.5),\n    (0.5, -0.5, -0.5),\n    (0.5, -0.5, 0.5),\n    (0.5, 0.5, -0.5),\n    (0.5, 0.5, 0.5),\n]\n\ndef sphere(cx, cy, cz, r, fill=False, fx=False, fy=False, fz=False):\n    result = set()\n    for x in range(cx - r, cx + r + 1):\n        if fx and x != cx:\n            continue\n        for y in range(cy - r, cy + r + 1):\n            # if y < cy:\n            #     continue # top hemisphere only\n            if fy and y != cy:\n                continue\n            for z in range(cz - r, cz + r + 1):\n                if fz and z != cz:\n                    continue\n                inside = False\n                outside = fill\n                for dx, dy, dz in OFFSETS:\n                    ox, oy, oz = x + dx, y + dy, z + dz\n                    d2 = (ox - cx) ** 2 + (oy - cy) ** 2 + (oz - cz) ** 2\n                    d = d2 ** 0.5\n                    if d < r:\n                        inside = True\n                    else:\n                        outside = True\n                if inside and outside:\n                    result.add((x, y, z))\n    return result\n\ndef circle_x(x, y, z, r, fill=False):\n    return sphere(x, y, z, r, fill, fx=True)\n\ndef circle_y(x, y, z, r, fill=False):\n    return sphere(x, y, z, r, fill, fy=True)\n\ndef circle_z(x, y, z, r, fill=False):\n    return sphere(x, y, z, r, fill, fz=True)\n\ndef cylinder_x(x1, x2, y, z, r, fill=False):\n    x1, x2 = sorted((x1, x2))\n    result = set()\n    for x in range(x1, x2 + 1):\n        result |= circle_x(x, y, z, r, fill)\n    return result\n\ndef cylinder_y(x, y1, y2, z, r, fill=False):\n    y1, y2 = sorted((y1, y2))\n    result = set()\n    for y in range(y1, y2 + 1):\n        result |= circle_y(x, y, z, r, fill)\n    return result\n\ndef cylinder_z(x, y, z1, z2, r, fill=False):\n    z1, z2 = sorted((z1, z2))\n    result = set()\n    for z in range(z1, z2 + 1):\n        result |= circle_z(x, y, z, r, fill)\n    return result\n\ndef cuboid(x1, x2, y1, y2, z1, z2, fill=True):\n    x1, x2 = sorted((x1, x2))\n    y1, y2 = sorted((y1, y2))\n    z1, z2 = sorted((z1, z2))\n    result = set()\n    a = (x1 == x2) + (y1 == y2) + (z1 == z2)\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            for z in range(z1, z2 + 1):\n                n = 0\n                n += x in (x1, x2)\n                n += y in (y1, y2)\n                n += z in (z1, z2)\n                if not fill and n <= a:\n                    continue\n                result.add((x, y, z))\n    return result\n\ndef pyramid(x1, x2, y, z1, z2, fill=False):\n    x1, x2 = sorted((x1, x2))\n    z1, z2 = sorted((z1, z2))\n    result = set()\n    while x2 >= x1 and z2 >= z2:\n        result |= cuboid(x1, x2, y, y, z1, z2, fill)\n        y, x1, x2, z1, z2 = y + 1, x1 + 1, x2 - 1, z1 + 1, z2 - 1\n    return result\n\ndef get_identity():\n    query = (\n        'select username, token from identity_token where selected = 1;'\n    )\n    conn = sqlite3.connect('auth.db')\n    rows = conn.execute(query)\n    for row in rows:\n        return row\n    raise Exception('No identities found.')\n\nclass Client(object):\n    def __init__(self, host, port):\n        self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn.connect((host, port))\n        self.authenticate()\n    def authenticate(self):\n        username, identity_token = get_identity()\n        url = 'https://craft.michaelfogleman.com/api/1/identity'\n        payload = {\n            'username': username,\n            'identity_token': identity_token,\n        }\n        response = requests.post(url, data=payload)\n        if response.status_code == 200 and response.text.isalnum():\n            access_token = response.text\n            self.conn.sendall('A,%s,%s\\n' % (username, access_token))\n        else:\n            raise Exception('Failed to authenticate.')\n    def set_block(self, x, y, z, w):\n        self.conn.sendall('B,%d,%d,%d,%d\\n' % (x, y, z, w))\n    def set_blocks(self, blocks, w):\n        key = lambda block: (block[1], block[0], block[2])\n        for x, y, z in sorted(blocks, key=key):\n            self.set_block(x, y, z, w)\n    def bitmap(self, sx, sy, sz, d1, d2, data, lookup):\n        x, y, z = sx, sy, sz\n        dx1, dy1, dz1 = d1\n        dx2, dy2, dz2 = d2\n        for row in data:\n            x = sx if dx1 else x\n            y = sy if dy1 else y\n            z = sz if dz1 else z\n            for c in row:\n                w = lookup.get(c)\n                if w is not None:\n                    self.set_block(x, y, z, w)\n                x, y, z = x + dx1, y + dy1, z + dz1\n            x, y, z = x + dx2, y + dy2, z + dz2\n\ndef get_client():\n    default_args = [DEFAULT_HOST, DEFAULT_PORT]\n    args = sys.argv[1:] + [None] * len(default_args)\n    host, port = [a or b for a, b in zip(args, default_args)]\n    client = Client(host, int(port))\n    return client\n\ndef main():\n    client = get_client()\n    set_block = client.set_block\n    set_blocks = client.set_blocks\n    # set_blocks(circle_y(0, 32, 0, 16, True), STONE)\n    # set_blocks(circle_y(0, 33, 0, 16), BRICK)\n    # set_blocks(cuboid(-1, 1, 1, 31, -1, 1), CEMENT)\n    # set_blocks(cuboid(-1024, 1024, 32, 32, -3, 3), STONE)\n    # set_blocks(cuboid(-3, 3, 32, 32, -1024, 1024), STONE)\n    # set_blocks(cuboid(-1024, 1024, 33, 33, -3, -3), BRICK)\n    # set_blocks(cuboid(-1024, 1024, 33, 33, 3, 3), BRICK)\n    # set_blocks(cuboid(-3, -3, 33, 33, -1024, 1024), BRICK)\n    # set_blocks(cuboid(3, 3, 33, 33, -1024, 1024), BRICK)\n    # set_blocks(sphere(0, 32, 0, 16), GLASS)\n    # for y in range(1, 32):\n    #     set_blocks(circle_y(0, y, 0, 4, True), CEMENT)\n    # set_blocks(circle_x(16, 33, 0, 3), BRICK)\n    # set_blocks(circle_x(-16, 33, 0, 3), BRICK)\n    # set_blocks(circle_z(0, 33, 16, 3), BRICK)\n    # set_blocks(circle_z(0, 33, -16, 3), BRICK)\n    # for x in range(0, 1024, 32):\n    #     set_blocks(cuboid(x - 1, x + 1, 31, 32, -1, 1), CEMENT)\n    #     set_blocks(cuboid(-x - 1, -x + 1, 31, 32, -1, 1), CEMENT)\n    #     set_blocks(cuboid(x, x, 1, 32, -1, 1), CEMENT)\n    #     set_blocks(cuboid(-x, -x, 1, 32, -1, 1), CEMENT)\n    # for z in range(0, 1024, 32):\n    #     set_blocks(cuboid(-1, 1, 31, 32, z - 1, z + 1), CEMENT)\n    #     set_blocks(cuboid(-1, 1, 31, 32, -z - 1, -z + 1), CEMENT)\n    #     set_blocks(cuboid(-1, 1, 1, 32, z, z), CEMENT)\n    #     set_blocks(cuboid(-1, 1, 1, 32, -z, -z), CEMENT)\n    # for x in range(0, 1024, 8):\n    #     set_block(x, 32, 0, CEMENT)\n    #     set_block(-x, 32, 0, CEMENT)\n    # for z in range(0, 1024, 8):\n    #     set_block(0, 32, z, CEMENT)\n    #     set_block(0, 32, -z, CEMENT)\n    # set_blocks(pyramid(32, 32+64-1, 12, 32, 32+64-1), COBBLE)\n    # outer = circle_y(0, 11, 0, 176 + 3, True)\n    # inner = circle_y(0, 11, 0, 176 - 3, True)\n    # set_blocks(outer - inner, STONE)\n    # a = sphere(-32, 48, -32, 24, True)\n    # b = sphere(-24, 40, -24, 24, True)\n    # set_blocks(a - b, PLANK)\n    # set_blocks(cylinder_x(-64, 64, 32, 0, 8), STONE)\n    # data = [\n    #     '...............................',\n    #     '..xxx..xxxx...xxx..xxxxx.xxxxx.',\n    #     '.x...x.x...x.x...x.x.......x...',\n    #     '.x.....xxxx..xxxxx.xxx.....x...',\n    #     '.x...x.x..x..x...x.x.......x...',\n    #     '..xxx..x...x.x...x.x.......x...',\n    #     '...............................',\n    # ]\n    # lookup = {\n    #     'x': STONE,\n    #     '.': PLANK,\n    # }\n    # client.bitmap(0, 32, 32, (1, 0, 0), (0, -1, 0), data, lookup)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.py",
          "type": "blob",
          "size": 24.1474609375,
          "content": "from math import floor\nfrom world import World\nimport Queue\nimport SocketServer\nimport datetime\nimport random\nimport re\nimport requests\nimport sqlite3\nimport sys\nimport threading\nimport time\nimport traceback\n\nDEFAULT_HOST = '0.0.0.0'\nDEFAULT_PORT = 4080\n\nDB_PATH = 'craft.db'\nLOG_PATH = 'log.txt'\n\nCHUNK_SIZE = 32\nBUFFER_SIZE = 4096\nCOMMIT_INTERVAL = 5\n\nAUTH_REQUIRED = True\nAUTH_URL = 'https://craft.michaelfogleman.com/api/1/access'\n\nDAY_LENGTH = 600\nSPAWN_POINT = (0, 0, 0, 0, 0)\nRATE_LIMIT = False\nRECORD_HISTORY = False\nINDESTRUCTIBLE_ITEMS = set([16])\nALLOWED_ITEMS = set([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    17, 18, 19, 20, 21, 22, 23,\n    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63])\n\nAUTHENTICATE = 'A'\nBLOCK = 'B'\nCHUNK = 'C'\nDISCONNECT = 'D'\nKEY = 'K'\nLIGHT = 'L'\nNICK = 'N'\nPOSITION = 'P'\nREDRAW = 'R'\nSIGN = 'S'\nTALK = 'T'\nTIME = 'E'\nVERSION = 'V'\nYOU = 'U'\n\ntry:\n    from config import *\nexcept ImportError:\n    pass\n\ndef log(*args):\n    now = datetime.datetime.utcnow()\n    line = ' '.join(map(str, (now,) + args))\n    print line\n    with open(LOG_PATH, 'a') as fp:\n        fp.write('%s\\n' % line)\n\ndef chunked(x):\n    return int(floor(round(x) / CHUNK_SIZE))\n\ndef packet(*args):\n    return '%s\\n' % ','.join(map(str, args))\n\nclass RateLimiter(object):\n    def __init__(self, rate, per):\n        self.rate = float(rate)\n        self.per = float(per)\n        self.allowance = self.rate\n        self.last_check = time.time()\n    def tick(self):\n        if not RATE_LIMIT:\n            return False\n        now = time.time()\n        elapsed = now - self.last_check\n        self.last_check = now\n        self.allowance += elapsed * (self.rate / self.per)\n        if self.allowance > self.rate:\n            self.allowance = self.rate\n        if self.allowance < 1:\n            return True # too fast\n        else:\n            self.allowance -= 1\n            return False # okay\n\nclass Server(SocketServer.ThreadingMixIn, SocketServer.TCPServer):\n    allow_reuse_address = True\n    daemon_threads = True\n\nclass Handler(SocketServer.BaseRequestHandler):\n    def setup(self):\n        self.position_limiter = RateLimiter(100, 5)\n        self.limiter = RateLimiter(1000, 10)\n        self.version = None\n        self.client_id = None\n        self.user_id = None\n        self.nick = None\n        self.queue = Queue.Queue()\n        self.running = True\n        self.start()\n    def handle(self):\n        model = self.server.model\n        model.enqueue(model.on_connect, self)\n        try:\n            buf = []\n            while True:\n                data = self.request.recv(BUFFER_SIZE)\n                if not data:\n                    break\n                buf.extend(data.replace('\\r\\n', '\\n'))\n                while '\\n' in buf:\n                    index = buf.index('\\n')\n                    line = ''.join(buf[:index])\n                    buf = buf[index + 1:]\n                    if not line:\n                        continue\n                    if line[0] == POSITION:\n                        if self.position_limiter.tick():\n                            log('RATE', self.client_id)\n                            self.stop()\n                            return\n                    else:\n                        if self.limiter.tick():\n                            log('RATE', self.client_id)\n                            self.stop()\n                            return\n                    model.enqueue(model.on_data, self, line)\n        finally:\n            model.enqueue(model.on_disconnect, self)\n    def finish(self):\n        self.running = False\n    def stop(self):\n        self.request.close()\n    def start(self):\n        thread = threading.Thread(target=self.run)\n        thread.setDaemon(True)\n        thread.start()\n    def run(self):\n        while self.running:\n            try:\n                buf = []\n                try:\n                    buf.append(self.queue.get(timeout=5))\n                    try:\n                        while True:\n                            buf.append(self.queue.get(False))\n                    except Queue.Empty:\n                        pass\n                except Queue.Empty:\n                    continue\n                data = ''.join(buf)\n                self.request.sendall(data)\n            except Exception:\n                self.request.close()\n                raise\n    def send_raw(self, data):\n        if data:\n            self.queue.put(data)\n    def send(self, *args):\n        self.send_raw(packet(*args))\n\nclass Model(object):\n    def __init__(self, seed):\n        self.world = World(seed)\n        self.clients = []\n        self.queue = Queue.Queue()\n        self.commands = {\n            AUTHENTICATE: self.on_authenticate,\n            CHUNK: self.on_chunk,\n            BLOCK: self.on_block,\n            LIGHT: self.on_light,\n            POSITION: self.on_position,\n            TALK: self.on_talk,\n            SIGN: self.on_sign,\n            VERSION: self.on_version,\n        }\n        self.patterns = [\n            (re.compile(r'^/nick(?:\\s+([^,\\s]+))?$'), self.on_nick),\n            (re.compile(r'^/spawn$'), self.on_spawn),\n            (re.compile(r'^/goto(?:\\s+(\\S+))?$'), self.on_goto),\n            (re.compile(r'^/pq\\s+(-?[0-9]+)\\s*,?\\s*(-?[0-9]+)$'), self.on_pq),\n            (re.compile(r'^/help(?:\\s+(\\S+))?$'), self.on_help),\n            (re.compile(r'^/list$'), self.on_list),\n        ]\n    def start(self):\n        thread = threading.Thread(target=self.run)\n        thread.setDaemon(True)\n        thread.start()\n    def run(self):\n        self.connection = sqlite3.connect(DB_PATH)\n        self.create_tables()\n        self.commit()\n        while True:\n            try:\n                if time.time() - self.last_commit > COMMIT_INTERVAL:\n                    self.commit()\n                self.dequeue()\n            except Exception:\n                traceback.print_exc()\n    def enqueue(self, func, *args, **kwargs):\n        self.queue.put((func, args, kwargs))\n    def dequeue(self):\n        try:\n            func, args, kwargs = self.queue.get(timeout=5)\n            func(*args, **kwargs)\n        except Queue.Empty:\n            pass\n    def execute(self, *args, **kwargs):\n        return self.connection.execute(*args, **kwargs)\n    def commit(self):\n        self.last_commit = time.time()\n        self.connection.commit()\n    def create_tables(self):\n        queries = [\n            'create table if not exists block ('\n            '    p int not null,'\n            '    q int not null,'\n            '    x int not null,'\n            '    y int not null,'\n            '    z int not null,'\n            '    w int not null'\n            ');',\n            'create unique index if not exists block_pqxyz_idx on '\n            '    block (p, q, x, y, z);',\n            'create table if not exists light ('\n            '    p int not null,'\n            '    q int not null,'\n            '    x int not null,'\n            '    y int not null,'\n            '    z int not null,'\n            '    w int not null'\n            ');',\n            'create unique index if not exists light_pqxyz_idx on '\n            '    light (p, q, x, y, z);',\n            'create table if not exists sign ('\n            '    p int not null,'\n            '    q int not null,'\n            '    x int not null,'\n            '    y int not null,'\n            '    z int not null,'\n            '    face int not null,'\n            '    text text not null'\n            ');',\n            'create index if not exists sign_pq_idx on sign (p, q);',\n            'create unique index if not exists sign_xyzface_idx on '\n            '    sign (x, y, z, face);',\n            'create table if not exists block_history ('\n            '   timestamp real not null,'\n            '   user_id int not null,'\n            '   x int not null,'\n            '   y int not null,'\n            '   z int not null,'\n            '   w int not null'\n            ');',\n        ]\n        for query in queries:\n            self.execute(query)\n    def get_default_block(self, x, y, z):\n        p, q = chunked(x), chunked(z)\n        chunk = self.world.get_chunk(p, q)\n        return chunk.get((x, y, z), 0)\n    def get_block(self, x, y, z):\n        query = (\n            'select w from block where '\n            'p = :p and q = :q and x = :x and y = :y and z = :z;'\n        )\n        p, q = chunked(x), chunked(z)\n        rows = list(self.execute(query, dict(p=p, q=q, x=x, y=y, z=z)))\n        if rows:\n            return rows[0][0]\n        return self.get_default_block(x, y, z)\n    def next_client_id(self):\n        result = 1\n        client_ids = set(x.client_id for x in self.clients)\n        while result in client_ids:\n            result += 1\n        return result\n    def on_connect(self, client):\n        client.client_id = self.next_client_id()\n        client.nick = 'guest%d' % client.client_id\n        log('CONN', client.client_id, *client.client_address)\n        client.position = SPAWN_POINT\n        self.clients.append(client)\n        client.send(YOU, client.client_id, *client.position)\n        client.send(TIME, time.time(), DAY_LENGTH)\n        client.send(TALK, 'Welcome to Craft!')\n        client.send(TALK, 'Type \"/help\" for a list of commands.')\n        self.send_position(client)\n        self.send_positions(client)\n        self.send_nick(client)\n        self.send_nicks(client)\n    def on_data(self, client, data):\n        #log('RECV', client.client_id, data)\n        args = data.split(',')\n        command, args = args[0], args[1:]\n        if command in self.commands:\n            func = self.commands[command]\n            func(client, *args)\n    def on_disconnect(self, client):\n        log('DISC', client.client_id, *client.client_address)\n        self.clients.remove(client)\n        self.send_disconnect(client)\n        self.send_talk('%s has disconnected from the server.' % client.nick)\n    def on_version(self, client, version):\n        if client.version is not None:\n            return\n        version = int(version)\n        if version != 1:\n            client.stop()\n            return\n        client.version = version\n        # TODO: client.start() here\n    def on_authenticate(self, client, username, access_token):\n        user_id = None\n        if username and access_token:\n            payload = {\n                'username': username,\n                'access_token': access_token,\n            }\n            response = requests.post(AUTH_URL, data=payload)\n            if response.status_code == 200 and response.text.isdigit():\n                user_id = int(response.text)\n        client.user_id = user_id\n        if user_id is None:\n            client.nick = 'guest%d' % client.client_id\n            client.send(TALK, 'Visit craft.michaelfogleman.com to register!')\n        else:\n            client.nick = username\n        self.send_nick(client)\n        # TODO: has left message if was already authenticated\n        self.send_talk('%s has joined the game.' % client.nick)\n    def on_chunk(self, client, p, q, key=0):\n        packets = []\n        p, q, key = map(int, (p, q, key))\n        query = (\n            'select rowid, x, y, z, w from block where '\n            'p = :p and q = :q and rowid > :key;'\n        )\n        rows = self.execute(query, dict(p=p, q=q, key=key))\n        max_rowid = 0\n        blocks = 0\n        for rowid, x, y, z, w in rows:\n            blocks += 1\n            packets.append(packet(BLOCK, p, q, x, y, z, w))\n            max_rowid = max(max_rowid, rowid)\n        query = (\n            'select x, y, z, w from light where '\n            'p = :p and q = :q;'\n        )\n        rows = self.execute(query, dict(p=p, q=q))\n        lights = 0\n        for x, y, z, w in rows:\n            lights += 1\n            packets.append(packet(LIGHT, p, q, x, y, z, w))\n        query = (\n            'select x, y, z, face, text from sign where '\n            'p = :p and q = :q;'\n        )\n        rows = self.execute(query, dict(p=p, q=q))\n        signs = 0\n        for x, y, z, face, text in rows:\n            signs += 1\n            packets.append(packet(SIGN, p, q, x, y, z, face, text))\n        if blocks:\n            packets.append(packet(KEY, p, q, max_rowid))\n        if blocks or lights or signs:\n            packets.append(packet(REDRAW, p, q))\n        packets.append(packet(CHUNK, p, q))\n        client.send_raw(''.join(packets))\n    def on_block(self, client, x, y, z, w):\n        x, y, z, w = map(int, (x, y, z, w))\n        p, q = chunked(x), chunked(z)\n        previous = self.get_block(x, y, z)\n        message = None\n        if AUTH_REQUIRED and client.user_id is None:\n            message = 'Only logged in users are allowed to build.'\n        elif y <= 0 or y > 255:\n            message = 'Invalid block coordinates.'\n        elif w not in ALLOWED_ITEMS:\n            message = 'That item is not allowed.'\n        elif w and previous:\n            message = 'Cannot create blocks in a non-empty space.'\n        elif not w and not previous:\n            message = 'That space is already empty.'\n        elif previous in INDESTRUCTIBLE_ITEMS:\n            message = 'Cannot destroy that type of block.'\n        if message is not None:\n            client.send(BLOCK, p, q, x, y, z, previous)\n            client.send(REDRAW, p, q)\n            client.send(TALK, message)\n            return\n        query = (\n            'insert into block_history (timestamp, user_id, x, y, z, w) '\n            'values (:timestamp, :user_id, :x, :y, :z, :w);'\n        )\n        if RECORD_HISTORY:\n            self.execute(query, dict(timestamp=time.time(),\n                user_id=client.user_id, x=x, y=y, z=z, w=w))\n        query = (\n            'insert or replace into block (p, q, x, y, z, w) '\n            'values (:p, :q, :x, :y, :z, :w);'\n        )\n        self.execute(query, dict(p=p, q=q, x=x, y=y, z=z, w=w))\n        self.send_block(client, p, q, x, y, z, w)\n        for dx in range(-1, 2):\n            for dz in range(-1, 2):\n                if dx == 0 and dz == 0:\n                    continue\n                if dx and chunked(x + dx) == p:\n                    continue\n                if dz and chunked(z + dz) == q:\n                    continue\n                np, nq = p + dx, q + dz\n                self.execute(query, dict(p=np, q=nq, x=x, y=y, z=z, w=-w))\n                self.send_block(client, np, nq, x, y, z, -w)\n        if w == 0:\n            query = (\n                'delete from sign where '\n                'x = :x and y = :y and z = :z;'\n            )\n            self.execute(query, dict(x=x, y=y, z=z))\n            query = (\n                'update light set w = 0 where '\n                'x = :x and y = :y and z = :z;'\n            )\n            self.execute(query, dict(x=x, y=y, z=z))\n    def on_light(self, client, x, y, z, w):\n        x, y, z, w = map(int, (x, y, z, w))\n        p, q = chunked(x), chunked(z)\n        block = self.get_block(x, y, z)\n        message = None\n        if AUTH_REQUIRED and client.user_id is None:\n            message = 'Only logged in users are allowed to build.'\n        elif block == 0:\n            message = 'Lights must be placed on a block.'\n        elif w < 0 or w > 15:\n            message = 'Invalid light value.'\n        if message is not None:\n            # TODO: client.send(LIGHT, p, q, x, y, z, previous)\n            client.send(REDRAW, p, q)\n            client.send(TALK, message)\n            return\n        query = (\n            'insert or replace into light (p, q, x, y, z, w) '\n            'values (:p, :q, :x, :y, :z, :w);'\n        )\n        self.execute(query, dict(p=p, q=q, x=x, y=y, z=z, w=w))\n        self.send_light(client, p, q, x, y, z, w)\n    def on_sign(self, client, x, y, z, face, *args):\n        if AUTH_REQUIRED and client.user_id is None:\n            client.send(TALK, 'Only logged in users are allowed to build.')\n            return\n        text = ','.join(args)\n        x, y, z, face = map(int, (x, y, z, face))\n        if y <= 0 or y > 255:\n            return\n        if face < 0 or face > 7:\n            return\n        if len(text) > 48:\n            return\n        p, q = chunked(x), chunked(z)\n        if text:\n            query = (\n                'insert or replace into sign (p, q, x, y, z, face, text) '\n                'values (:p, :q, :x, :y, :z, :face, :text);'\n            )\n            self.execute(query,\n                dict(p=p, q=q, x=x, y=y, z=z, face=face, text=text))\n        else:\n            query = (\n                'delete from sign where '\n                'x = :x and y = :y and z = :z and face = :face;'\n            )\n            self.execute(query, dict(x=x, y=y, z=z, face=face))\n        self.send_sign(client, p, q, x, y, z, face, text)\n    def on_position(self, client, x, y, z, rx, ry):\n        x, y, z, rx, ry = map(float, (x, y, z, rx, ry))\n        client.position = (x, y, z, rx, ry)\n        self.send_position(client)\n    def on_talk(self, client, *args):\n        text = ','.join(args)\n        if text.startswith('/'):\n            for pattern, func in self.patterns:\n                match = pattern.match(text)\n                if match:\n                    func(client, *match.groups())\n                    break\n            else:\n                client.send(TALK, 'Unrecognized command: \"%s\"' % text)\n        elif text.startswith('@'):\n            nick = text[1:].split(' ', 1)[0]\n            for other in self.clients:\n                if other.nick == nick:\n                    client.send(TALK, '%s> %s' % (client.nick, text))\n                    other.send(TALK, '%s> %s' % (client.nick, text))\n                    break\n            else:\n                client.send(TALK, 'Unrecognized nick: \"%s\"' % nick)\n        else:\n            self.send_talk('%s> %s' % (client.nick, text))\n    def on_nick(self, client, nick=None):\n        if AUTH_REQUIRED:\n            client.send(TALK, 'You cannot change your nick on this server.')\n            return\n        if nick is None:\n            client.send(TALK, 'Your nickname is %s' % client.nick)\n        else:\n            self.send_talk('%s is now known as %s' % (client.nick, nick))\n            client.nick = nick\n            self.send_nick(client)\n    def on_spawn(self, client):\n        client.position = SPAWN_POINT\n        client.send(YOU, client.client_id, *client.position)\n        self.send_position(client)\n    def on_goto(self, client, nick=None):\n        if nick is None:\n            clients = [x for x in self.clients if x != client]\n            other = random.choice(clients) if clients else None\n        else:\n            nicks = dict((client.nick, client) for client in self.clients)\n            other = nicks.get(nick)\n        if other:\n            client.position = other.position\n            client.send(YOU, client.client_id, *client.position)\n            self.send_position(client)\n    def on_pq(self, client, p, q):\n        p, q = map(int, (p, q))\n        if abs(p) > 1000 or abs(q) > 1000:\n            return\n        client.position = (p * CHUNK_SIZE, 0, q * CHUNK_SIZE, 0, 0)\n        client.send(YOU, client.client_id, *client.position)\n        self.send_position(client)\n    def on_help(self, client, topic=None):\n        if topic is None:\n            client.send(TALK, 'Type \"t\" to chat. Type \"/\" to type commands:')\n            client.send(TALK, '/goto [NAME], /help [TOPIC], /list, /login NAME, /logout, /nick')\n            client.send(TALK, '/offline [FILE], /online HOST [PORT], /pq P Q, /spawn, /view N')\n            return\n        topic = topic.lower().strip()\n        if topic == 'goto':\n            client.send(TALK, 'Help: /goto [NAME]')\n            client.send(TALK, 'Teleport to another user.')\n            client.send(TALK, 'If NAME is unspecified, a random user is chosen.')\n        elif topic == 'list':\n            client.send(TALK, 'Help: /list')\n            client.send(TALK, 'Display a list of connected users.')\n        elif topic == 'login':\n            client.send(TALK, 'Help: /login NAME')\n            client.send(TALK, 'Switch to another registered username.')\n            client.send(TALK, 'The login server will be re-contacted. The username is case-sensitive.')\n        elif topic == 'logout':\n            client.send(TALK, 'Help: /logout')\n            client.send(TALK, 'Unauthenticate and become a guest user.')\n            client.send(TALK, 'Automatic logins will not occur again until the /login command is re-issued.')\n        elif topic == 'offline':\n            client.send(TALK, 'Help: /offline [FILE]')\n            client.send(TALK, 'Switch to offline mode.')\n            client.send(TALK, 'FILE specifies the save file to use and defaults to \"craft\".')\n        elif topic == 'online':\n            client.send(TALK, 'Help: /online HOST [PORT]')\n            client.send(TALK, 'Connect to the specified server.')\n        elif topic == 'nick':\n            client.send(TALK, 'Help: /nick [NICK]')\n            client.send(TALK, 'Get or set your nickname.')\n        elif topic == 'pq':\n            client.send(TALK, 'Help: /pq P Q')\n            client.send(TALK, 'Teleport to the specified chunk.')\n        elif topic == 'spawn':\n            client.send(TALK, 'Help: /spawn')\n            client.send(TALK, 'Teleport back to the spawn point.')\n        elif topic == 'view':\n            client.send(TALK, 'Help: /view N')\n            client.send(TALK, 'Set viewing distance, 1 - 24.')\n    def on_list(self, client):\n        client.send(TALK,\n            'Players: %s' % ', '.join(x.nick for x in self.clients))\n    def send_positions(self, client):\n        for other in self.clients:\n            if other == client:\n                continue\n            client.send(POSITION, other.client_id, *other.position)\n    def send_position(self, client):\n        for other in self.clients:\n            if other == client:\n                continue\n            other.send(POSITION, client.client_id, *client.position)\n    def send_nicks(self, client):\n        for other in self.clients:\n            if other == client:\n                continue\n            client.send(NICK, other.client_id, other.nick)\n    def send_nick(self, client):\n        for other in self.clients:\n            other.send(NICK, client.client_id, client.nick)\n    def send_disconnect(self, client):\n        for other in self.clients:\n            if other == client:\n                continue\n            other.send(DISCONNECT, client.client_id)\n    def send_block(self, client, p, q, x, y, z, w):\n        for other in self.clients:\n            if other == client:\n                continue\n            other.send(BLOCK, p, q, x, y, z, w)\n            other.send(REDRAW, p, q)\n    def send_light(self, client, p, q, x, y, z, w):\n        for other in self.clients:\n            if other == client:\n                continue\n            other.send(LIGHT, p, q, x, y, z, w)\n            other.send(REDRAW, p, q)\n    def send_sign(self, client, p, q, x, y, z, face, text):\n        for other in self.clients:\n            if other == client:\n                continue\n            other.send(SIGN, p, q, x, y, z, face, text)\n    def send_talk(self, text):\n        log(text)\n        for client in self.clients:\n            client.send(TALK, text)\n\ndef cleanup():\n    world = World(None)\n    conn = sqlite3.connect(DB_PATH)\n    query = 'select x, y, z from block order by rowid desc limit 1;'\n    last = list(conn.execute(query))[0]\n    query = 'select distinct p, q from block;'\n    chunks = list(conn.execute(query))\n    count = 0\n    total = 0\n    delete_query = 'delete from block where x = %d and y = %d and z = %d;'\n    print 'begin;'\n    for p, q in chunks:\n        chunk = world.create_chunk(p, q)\n        query = 'select x, y, z, w from block where p = :p and q = :q;'\n        rows = conn.execute(query, {'p': p, 'q': q})\n        for x, y, z, w in rows:\n            if chunked(x) != p or chunked(z) != q:\n                continue\n            total += 1\n            if (x, y, z) == last:\n                continue\n            original = chunk.get((x, y, z), 0)\n            if w == original or original in INDESTRUCTIBLE_ITEMS:\n                count += 1\n                print delete_query % (x, y, z)\n    conn.close()\n    print 'commit;'\n    print >> sys.stderr, '%d of %d blocks will be cleaned up' % (count, total)\n\ndef main():\n    if len(sys.argv) == 2 and sys.argv[1] == 'cleanup':\n        cleanup()\n        return\n    host, port = DEFAULT_HOST, DEFAULT_PORT\n    if len(sys.argv) > 1:\n        host = sys.argv[1]\n    if len(sys.argv) > 2:\n        port = int(sys.argv[2])\n    log('SERV', host, port)\n    model = Model(None)\n    model.start()\n    server = Server((host, port), Handler)\n    server.model = model\n    server.serve_forever()\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "shaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "textures",
          "type": "tree",
          "content": null
        },
        {
          "name": "world.py",
          "type": "blob",
          "size": 1.548828125,
          "content": "# gcc -std=c99 -O3 -shared -o world \\\n#   -I src -I deps/noise deps/noise/noise.c src/world.c\n\nfrom ctypes import CDLL, CFUNCTYPE, c_float, c_int, c_void_p\nfrom collections import OrderedDict\n\ndll = CDLL('./world')\n\nWORLD_FUNC = CFUNCTYPE(None, c_int, c_int, c_int, c_int, c_void_p)\n\ndef dll_seed(x):\n    dll.seed(x)\n\ndef dll_create_world(p, q):\n    result = {}\n    def world_func(x, y, z, w, arg):\n        result[(x, y, z)] = w\n    dll.create_world(p, q, WORLD_FUNC(world_func), None)\n    return result\n\ndll.simplex2.restype = c_float\ndll.simplex2.argtypes = [c_float, c_float, c_int, c_float, c_float]\ndef dll_simplex2(x, y, octaves=1, persistence=0.5, lacunarity=2.0):\n    return dll.simplex2(x, y, octaves, persistence, lacunarity)\n\ndll.simplex3.restype = c_float\ndll.simplex3.argtypes = [c_float, c_float, c_float, c_int, c_float, c_float]\ndef dll_simplex3(x, y, z, octaves=1, persistence=0.5, lacunarity=2.0):\n    return dll.simplex3(x, y, z, octaves, persistence, lacunarity)\n\nclass World(object):\n    def __init__(self, seed=None, cache_size=64):\n        self.seed = seed\n        self.cache = OrderedDict()\n        self.cache_size = cache_size\n    def create_chunk(self, p, q):\n        if self.seed is not None:\n            dll_seed(self.seed)\n        return dll_create_world(p, q)\n    def get_chunk(self, p, q):\n        try:\n            chunk = self.cache.pop((p, q))\n        except KeyError:\n            chunk = self.create_chunk(p, q)\n        self.cache[(p, q)] = chunk\n        if len(self.cache) > self.cache_size:\n            self.cache.popitem(False)\n        return chunk\n"
        }
      ]
    }
  ]
}