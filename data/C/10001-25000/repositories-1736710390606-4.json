{
  "metadata": {
    "timestamp": 1736710390606,
    "page": 4,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "raysan5/raylib",
      "stars": 24309,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.267578125,
          "content": "# Ignore generated files\n# ...\n\n# Ignore VIM's backup generated files\n*.swp\n*.swo\n*~\n\n# Ignore thumbnails created by windows\nThumbs.db\n\n# Ignore files build by Visual Studio\n# *.obj --> Can be confused with 3d model!\n*.pdb\n*.aps\n*.user\n# *.vcproj\n# *.vcxproj*\n# *.sln\n*.vspscc\n*_i.c\n*.i\n*.icf\n*_p.c\n*.ncb\n*.suo\n*.tlb\n*.tlh\n*.bak\n*.cache\n*.ilk\n*.log\n.vs\n\n[Bb]in\n[Dd]ebug/\n*.sbr\n*.sdf\nobj/\n[R]elease/\n_ReSharper*/\n[Tt]est[Rr]esult*\nipch/\n*.opensdf\n*.db\n*.opendb\npackages/\n!examples/models/resources/models/obj/\n\n# Ignore compiled binaries\n*.o\n*.exe\n*.a\n*.bc\n*.so\n*.so.*\n*.dll\n\n# Emscripten\nemsdk\n\n# Ignore wasm data in examples/\nexamples/**/*.wasm\nexamples/**/*.data\nexamples/**/*.js\nexamples/**/*.html\n\n# Ignore files build by xcode\n*.mode*v*\n*.pbxuser\n*.xcbkptlist\n*.xcscheme\n*.xcworkspacedata\n*.xcuserstate\n*.xccheckout\nxcschememanagement.plist\n.DS_Store\n._.*\nxcuserdata/\nDerivedData/\n\n# VSCode project\n.vscode\n\n# Jetbrains project\n.idea/\ncmake-build-*/\n\n# CMake stuff\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\ncmake_install.cmake\ncmake_uninstall.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\nbuild\n\n# Ignore GNU global tags\nGPATH\nGRTAGS\nGTAGS\n\n# Zig programming language\n.zig-cache/\nzig-cache/\nzig-out/\nbuild/\nbuild-*/\ndocgen_tmp/\n\n# Parser stuff\nparser/raylib_parser\n"
        },
        {
          "name": "BINDINGS.md",
          "type": "blob",
          "size": 30.26171875,
          "content": "# raylib bindings and wrappers\n\nSome people ported raylib to other languages in the form of bindings or wrappers to the library. Here is a list with all the ports available. Feel free to send a PR if you know of any binding/wrapper not in this list.\n\n### Language Bindings\n\n| Name                                                                                     | raylib Version   | Language                                                             | License              |\n| :--------------------------------------------------------------------------------------- | :--------------: | :------------------------------------------------------------------: | :------------------: |\n| [raylib](https://github.com/raysan5/raylib)                                              | **5.5**          | [C/C++](https://en.wikipedia.org/wiki/C_(programming_language))      | Zlib                 |\n| [raylib-beef](https://github.com/Starpelly/raylib-beef)                                  | **5.5**          | [Beef](https://www.beeflang.org)                                     | MIT                  |\n| [raybit](https://github.com/Alex-Velez/raybit)                                           | **5.0**          | [Brainfuck](https://en.wikipedia.org/wiki/Brainfuck)                 | MIT                  |\n| [raylib-c3](https://github.com/c3lang/vendor/tree/main/libraries/raylib55.c3l)           | **5.5**          | [C3](https://c3-lang.org)                                            | MIT                  |\n| [Raylib-cs](https://github.com/ChrisDill/Raylib-cs)                                      | **5.5**          | [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))   | Zlib                 |\n| [Raylib-CsLo](https://github.com/NotNotTech/Raylib-CsLo)                                 | 4.2              | [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))   | MPL-2.0              |\n| [Raylib-CSharp-Vinculum](https://github.com/ZeroElectric/Raylib-CSharp-Vinculum)         | **5.0**          | [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))   | MPL-2.0              |\n| [Raylib-CSharp](https://github.com/MrScautHD/Raylib-CSharp)                              | **5.1-dev**      | [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))   | MIT                  |\n| [cl-raylib](https://github.com/longlene/cl-raylib)                                       | 4.0              | [Common Lisp](https://common-lisp.net)                               | MIT                  |\n| [claylib/wrap](https://github.com/defun-games/claylib)                                   | 4.5              | [Common Lisp](https://common-lisp.net)                               | Zlib                 |\n| [claw-raylib](https://github.com/bohonghuang/claw-raylib)                                | **auto**         | [Common Lisp](https://common-lisp.net)                               | Apache-2.0           |\n| [chez-raylib](https://github.com/Yunoinsky/chez-raylib)                                  | **auto**         | [Chez Scheme](https://cisco.github.io/ChezScheme)                    | GPLv3                |\n| [CLIPSraylib](https://github.com/mrryanjohnston/CLIPSraylib)                             | **auto**         | [CLIPS](https://www.clipsrules.net/)                                 | MIT                  |\n| [raylib-cr](https://github.com/sol-vin/raylib-cr)                                        | 4.6-dev (5e1a81) | [Crystal](https://crystal-lang.org)                                  | Apache-2.0           |\n| [ray-cyber](https://github.com/fubark/ray-cyber)                                         | **5.0**          | [Cyber](https://cyberscript.dev)                                     | MIT                  |\n| [dart-raylib](https://gitlab.com/wolfenrain/dart-raylib)                                 | 4.0              | [Dart](https://dart.dev)                                             | MIT                  |\n| [bindbc-raylib3](https://github.com/o3o/bindbc-raylib3)                                  | **5.0**          | [D](https://dlang.org)                                               | BSL-1.0              |\n| [dray](https://github.com/redthing1/dray)                                                | **5.0**          | [D](https://dlang.org)                                               | Apache-2.0           |\n| [raylib-d](https://github.com/schveiguy/raylib-d)                                        | **5.5**          | [D](https://dlang.org)                                               | Zlib                 |\n| [rayex](https://github.com/shiryel/rayex)                                                | 3.7              | [elixir](https://elixir-lang.org)                                    | Apache-2.0           |\n| [raylib-factor](https://github.com/factor/factor/blob/master/extra/raylib/raylib.factor) | 4.5              | [Factor](https://factorcode.org)                                     | BSD                  |\n| [raylib-freebasic](https://github.com/WIITD/raylib-freebasic)                            | **5.0**          | [FreeBASIC](https://www.freebasic.net)                               | MIT                  |\n| [fortran-raylib](https://github.com/interkosmos/fortran-raylib)                          | **5.5**          | [Fortran](https://fortran-lang.org)                                  | ISC                  |\n| [raylib-go](https://github.com/gen2brain/raylib-go)                                      | **5.5**          | [Go](https://golang.org)                                             | Zlib                 |\n| [raylib-guile](https://github.com/petelliott/raylib-guile)                               | **auto**         | [Guile](https://www.gnu.org/software/guile)                          | Zlib                 |\n| [gforth-raylib](https://github.com/ArnautDaniel/gforth-raylib)                           | 3.5              | [Gforth](https://gforth.org)                                         | **???**              |\n| [h-raylib](https://github.com/Anut-py/h-raylib)                                          | **5.5-dev**      | [Haskell](https://haskell.org)                                       | Apache-2.0           |\n| [raylib-hx](https://github.com/foreignsasquatch/raylib-hx)                               | 4.2              | [Haxe](https://haxe.org)                                             | Zlib                 |\n| [hb-raylib](https://github.com/MarcosLeonardoMendezGerencir/hb-raylib)                   | 3.5              | [Harbour](https://harbour.github.io)                                 | MIT                  |\n| [jaylib](https://github.com/janet-lang/jaylib)                                           | **5.0**          | [Janet](https://janet-lang.org)                                      | MIT                  |\n| [jaylib](https://github.com/electronstudio/jaylib/)                                      | **5.5**          | [Java](https://en.wikipedia.org/wiki/Java_(programming_language))    | GPLv3+CE             |\n| [raylib-j](https://github.com/CreedVI/Raylib-J)                                          | 4.0              | [Java](https://en.wikipedia.org/wiki/Java_(programming_language))    | Zlib                 |\n| [Raylib.jl](https://github.com/chengchingwen/Raylib.jl)                                  | 4.2              | [Julia](https://julialang.org)                                       | Zlib                 |\n| [kaylib](https://github.com/electronstudio/kaylib)                                       | 3.7              | [Kotlin/native](https://kotlinlang.org)                              | **???**              |\n| [KaylibKit](https://codeberg.org/Kenta/KaylibKit)                                        | 4.5              | [Kotlin/native](https://kotlinlang.org)                              | Zlib                 |\n| [raylib-lua](https://github.com/TSnake41/raylib-lua)                                     | 5.0              | [Lua](http://www.lua.org)                                            | ISC                  |\n| [raylib-lua-bindings (WIP)](https://github.com/legendaryredfox/raylib-lua-bindings)      | 5.5              | [Lua](http://www.lua.org)                                            | ISC                  |\n| [ReiLua](https://github.com/nullstare/ReiLua)                                            | 5.5              | [Lua](http://www.lua.org)                                            | MIT                  |\n| [raylib-lua-sol](https://github.com/RobLoach/raylib-lua-sol)                             | 5.5              | [Lua](http://www.lua.org)                                            | Zlib                 |\n| [raylib-luajit](https://github.com/homma/raylib-luajit)                                  | 5.5              | [Lua](http://www.lua.org)                                            | MIT                  |\n| [raylib-luajit-generated](https://github.com/james2doyle/raylib-luajit-generated)        | 5.5              | [Lua](http://www.lua.org)                                            | MIT                  |\n| [raylib-matte](https://github.com/jcorks/raylib-matte)                                   | 4.6-dev          | [Matte](https://github.com/jcorks/matte)                             |  **???**             |\n| [Raylib.nelua](https://github.com/AuzFox/Raylib.nelua)                                   | **5.0**          | [nelua](https://nelua.io)                                            | Zlib                 |\n| [raylib-bindings](https://github.com/vaiorabbit/raylib-bindings)                         | 5.6-dev              | [Ruby](https://www.ruby-lang.org/en)                                 | Zlib                 |\n| [naylib](https://github.com/planetis-m/naylib)                                           | **5.6-dev**      | [Nim](https://nim-lang.org)                                          | MIT                  |\n| [node-raylib](https://github.com/RobLoach/node-raylib)                                   | 4.5              | [Node.js](https://nodejs.org/en)                                     | Zlib                 |\n| [raylib-odin](https://github.com/odin-lang/Odin/tree/master/vendor/raylib)               | **5.5**          | [Odin](https://odin-lang.org)                                        | BSD-3Clause          |\n| [raylib_odin_bindings](https://github.com/Deathbat2190/raylib_odin_bindings)             | 4.0-dev          | [Odin](https://odin-lang.org)                                        | MIT                  |\n| [raylib-ocaml](https://github.com/tjammer/raylib-ocaml)                                  | **5.0**          | [OCaml](https://ocaml.org)                                           | MIT                  |\n| [TurboRaylib](https://github.com/turborium/TurboRaylib)                                  | 4.5              | [Object Pascal](https://en.wikipedia.org/wiki/Object_Pascal)         | MIT                  |\n| [Ray4Laz](https://github.com/GuvaCode/Ray4Laz)                                           | **5.5**          | [Free Pascal](https://en.wikipedia.org/wiki/Free_Pascal)             | Zlib                 |\n| [Raylib.4.0.Pascal](https://github.com/sysrpl/Raylib.4.0.Pascal)                         | 4.0              | [Free Pascal](https://en.wikipedia.org/wiki/Free_Pascal)             | Zlib                 |\n| [pyraylib](https://github.com/Ho011/pyraylib)                                            | 3.7              | [Python](https://www.python.org)                                     | Zlib                 |\n| [raylib-python-cffi](https://github.com/electronstudio/raylib-python-cffi)               | **5.5**              | [Python](https://www.python.org)                                     | EPL-2.0              |\n| [raylibpyctbg](https://github.com/overdev/raylibpyctbg)                                  | 5.5              | [Python](https://www.python.org)                                     | MIT                  |\n| [raylib-py](https://github.com/overdev/raylib-py)                                        | 5.5              | [Python](https://www.python.org)                                     | MIT                  |\n| [raylib-python-ctypes](https://github.com/sDos280/raylib-python-ctypes)                  | 4.6-dev          | [Python](https://www.python.org)                                     | MIT                  |\n| [raylib-pkpy-bindings](https://github.com/blueloveTH/pkpy-bindings)                      | 5.1-dev          | [pocketpy](https://pocketpy.dev)                                     | MIT                  |\n| [raylib-php](https://github.com/joseph-montanez/raylib-php)                              | 4.5              | [PHP](https://en.wikipedia.org/wiki/PHP)                             | Zlib                 |\n| [raylib-phpcpp](https://github.com/oraoto/raylib-phpcpp)                                 | 3.5              | [PHP](https://en.wikipedia.org/wiki/PHP)                             | Zlib                 |\n| [raylibr](https://github.com/jeroenjanssens/raylibr)                                     | 4.0              | [R](https://www.r-project.org)                                       | MIT                  |\n| [raylib-ffi](https://github.com/ewpratten/raylib-ffi)                                    | 5.5              | [Rust](https://www.rust-lang.org)                                    | GPLv3                |\n| [raylib-rs](https://github.com/raylib-rs/raylib-rs)                                      | **5.5**          | [Rust](https://www.rust-lang.org)                                    | Zlib                 |\n| [raylib-ruby](https://github.com/wilsonsilva/raylib-ruby)                                | 4.5              | [Ruby](https://www.ruby-lang.org)                                    | Zlib                 |\n| [Relib](https://github.com/RedCubeDev-ByteSpace/Relib)                                   | 3.5              | [ReCT](https://github.com/RedCubeDev-ByteSpace/ReCT)                 | **???**              |\n| [racket-raylib](https://github.com/eutro/racket-raylib)                                  | 4.0              | [Racket](https://racket-lang.org)                                    | MIT/Apache-2.0       |\n| [raylib-swift](https://github.com/STREGAsGate/Raylib)                                    | 4.0              | [Swift](https://swift.org)                                           | MIT                  |\n| [raylib-scopes](https://github.com/salotz/raylib-scopes)                                 | auto             | [Scopes](http://scopes.rocks)                                        | MIT                  |\n| [raylib-SmallBASIC](https://github.com/smallbasic/smallbasic.plugins/tree/master/raylib) | **5.5**          | [SmallBASIC](https://github.com/smallbasic/SmallBASIC)               | GPLv3                |\n| [raylib-umka](https://github.com/robloach/raylib-umka)                                   | 4.5              | [Umka](https://github.com/vtereshkov/umka-lang)                      | Zlib                 |\n| [raylib-for-v](https://github.com/EmmaTheMartian/raylib-for-v)                           | 5.5              | [V](https://vlang.io)                                                | MIT/Unlicense        |\n| [raylib.v](https://github.com/irishgreencitrus/raylib.v)                                 | 4.2              | [V](https://vlang.io)                                                | Zlib                 |\n| [raylib-vapi](https://github.com/lxmcf/raylib-vapi)                                      | **5.0**          | [Vala](https://vala.dev)                                             | Zlib                 |\n| [raylib-wren](https://github.com/TSnake41/raylib-wren)                                   | 4.5              | [Wren](http://wren.io)                                               | ISC                  |\n| [raylib-zig](https://github.com/Not-Nik/raylib-zig)                                      | **5.5**          | [Zig](https://ziglang.org)                                           | MIT                  |\n| [raylib.zig](https://github.com/ryupold/raylib.zig)                                      | **5.1-dev**      | [Zig](https://ziglang.org)                                           | MIT                  |\n| [raylib-zig-bindings](https://github.com/L-Briand/raylib-zig-bindings)                   | **5.0**          | [Zig](https://ziglang.org)                                           | Zlib                 |\n| [hare-raylib](https://git.sr.ht/~evantj/hare-raylib)                                     | **auto**         | [Hare](https://harelang.org)                                         | Zlib                 |\n| [raylib-sunder](https://github.com/ashn-dot-dev/raylib-sunder)                           | **auto**         | [Sunder](https://github.com/ashn-dot-dev/sunder)                     | 0BSD                 |\n| [raylib-bqn](https://github.com/Brian-ED/raylib-bqn)                                     | **5.0**          | [BQN](https://mlochbaum.github.io/BQN)                               | MIT                  |\n| [rayjs](https://github.com/mode777/rayjs)                                                | 4.6-dev          | [QuickJS](https://bellard.org/quickjs)                               | MIT                  |\n| [raylib-raku](https://github.com/vushu/raylib-raku)                                      | **auto**         | [Raku](https://www.raku.org)                                         | Artistic License 2.0 |\n| [Raylib.lean](https://github.com/KislyjKisel/Raylib.lean)                                | **5.5-dev**      | [Lean4](https://lean-lang.org)                                       | BSD-3-Clause         |\n| [raylib-cobol](https://codeberg.org/glowiak/raylib-cobol)                                | **auto**         | [COBOL](https://gnucobol.sourceforge.io)                             | Public domain        |\n| [raylib-apl](https://github.com/Brian-ED/raylib-apl)                                     | **5.0**          | [Dyalog APL](https://www.dyalog.com/)                                | MIT                  |\n| [raylib-jai](https://github.com/ahmedqarmout2/raylib-jai)                                | **5.5**          | [Jai](https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md)  | MIT                  |\n| [fnl-raylib](https://github.com/0riginaln0/fnl-raylib)                                   | **5.5**          | [Fennel](https://fennel-lang.org/)                                   | MIT                  |\n\n### Utility Wrapers\n\nThese are utility wrappers for specific languages, they are not required to use raylib in the language but may adapt the raylib API to be more inline with the language's paradigm.\n| Name                                                 | raylib Version | Language                                     | License |\n| ---------------------------------------------------- | :------------: | :------------------------------------------: | :-----: |\n| [raylib-cpp](https://github.com/robloach/raylib-cpp) | **5.5**        | [C++](https://en.wikipedia.org/wiki/C%2B%2B) | Zlib    |\n| [claylib](https://github.com/defun-games/claylib)    | 4.5            | [Common Lisp](https://common-lisp.net)       | Zlib    |\n| [rayed-bqn](https://github.com/Brian-ED/rayed-bqn)   | **5.0**        | [BQN](https://mlochbaum.github.io/BQN)       | MIT     |\n| [DOOR](https://github.com/RealDoigt/DOOR)            | 4.0            | [D](https://dlang.org)                       | MIT     |\n\n### Older or Unmaintained Language Bindings\n\nThese are older raylib bindings that are more than 2 versions old or have not been maintained.\n| Name                                                                               | raylib Version | Language                                                                |\n| ---------------------------------------------------------------------------------- | :------------: | :---------------------------------------------------------------------: |\n| [raylib-cppsharp](https://github.com/phxvyper/raylib-cppsharp)                     | 2.5            | [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))    |\n| [RaylibFS](https://github.com/dallinbeutler/RaylibFS)                              | 2.5            | [F#](https://fsharp.org)                                                |\n| [raylib\\*d](https://github.com/Sepheus/raylib_d)                                   | 2.5            | [D](https://dlang.org)                                                  |\n| [bindbc-raylib](https://github.com/o3o/bindbc-raylib)                              | 3.0            | [D](https://dlang.org)                                                  |\n| [go-raylib](https://github.com/chunqian/go-raylib)                                 | 3.5            | [Go](https://golang.org)                                                |\n| [raylib-goplus](https://github.com/Lachee/raylib-goplus)                           | 2.6-dev        | [Go](https://golang.org)                                                |\n| [ray-go](https://github.com/hecate-tech/ray-go)                                    | 2.6-dev        | [Go](https://golang.org)                                                |\n| [raylib-luamore](https://github.com/HDPLocust/raylib-luamore)                      | 3.0            | [Lua](http://www.lua.org)                                               |\n| [LuaJIT-Raylib](https://github.com/Bambofy/LuaJIT-Raylib)                          | 2.6            | [Lua](http://www.lua.org)                                               |\n| [raylib-lua-sol](https://github.com/RobLoach/raylib-lua-sol)                       | 2.5            | [Lua](http://www.lua.org)                                               |\n| [raylib-lua-ffi](https://github.com/raysan5/raylib/issues/693)                     | 2.0            | [Lua](http://www.lua.org)                                               |\n| [raylib-lua](https://github.com/raysan5/raylib-lua)                                | 1.7            | [Lua](http://www.lua.org)                                               |\n| [raylib-nelua](https://github.com/Andre-LA/raylib-nelua)                           | 3.0            | [Nelua](https://nelua.io)                                               |\n| [raylib-nim](https://github.com/Skrylar/raylib-nim)                                | 2.0            | [Nim](https://nim-lang.org)                                             |\n| [raylib-Nim](https://gitlab.com/define-private-public/raylib-Nim)                  | 1.7            | [Nim](https://nim-lang.org)                                             |\n| [nim-raylib](https://github.com/tomc1998/nim-raylib)                               | 3.1-dev        | [Nim](https://nim-lang.org)                                             |\n| [raylib-Forever](https://github.com/Guevara-chan/Raylib-Forever)                   | auto           | [Nim](https://nim-lang.org)                                             |\n| [NimraylibNow!](https://github.com/greenfork/nimraylib_now)                        | 4.2            | [Nim](https://nim-lang.org)                                            |\n| [raylib-haskell](https://github.com/DevJac/raylib-haskell)                         | 2.0            | [Haskell](https://www.haskell.org)                                      |\n| [raylib-cr](https://github.com/AregevDev/raylib-cr)                                | 2.5-dev        | [Crystal](https://crystal-lang.org)                                     |\n| [raylib.cr](https://github.com/sam0x17/raylib.cr)                                  | 2.0            | [Crystal](https://crystal-lang.org)                                     |\n| [cray](https://gitlab.com/Zatherz/cray)                                            | 1.8            | [Crystal](https://crystal-lang.org)                                     |\n| [raylib-pas](https://github.com/tazdij/raylib-pas)                                 | 3.0            | [Pascal](https://en.wikipedia.org/wiki/Pascal*(programming*language)) |\n| [raylib-pascal](https://github.com/drezgames/raylib-pascal)                        | 2.0            | [Pascal](https://en.wikipedia.org/wiki/Pascal*(programming*language)) |\n| [Graphics-Raylib](https://github.com/athreef/Graphics-Raylib)                      | 1.4            | [Perl](https://www.perl.org)                                            |\n| [raylib-ruby](https://github.com/a0/raylib-ruby)                                   | 2.6            | [Ruby](https://www.ruby-lang.org/en)                                    |\n| [raylib-ruby-ffi](https://github.com/D3nX/raylib-ruby-ffi)                         | 2.0            | [Ruby](https://www.ruby-lang.org/en)                                    |\n| [raylib-mruby](https://github.com/lihaochen910/raylib-mruby)                       | 2.5-dev        | [mruby](https://github.com/mruby/mruby)                                 |\n| [raylib-java](https://github.com/XoanaIO/raylib-java)                              | 2.0            | [Java](https://en.wikipedia.org/wiki/Java*(programming_language))     |\n| [clj-raylib](https://github.com/lsevero/clj-raylib)                                | 3.0            | [Clojure](https://clojure.org)                                          |\n| [QuickJS-raylib](https://github.com/sntg-p/QuickJS-raylib)                         | 3.0            | [QuickJS](https://bellard.org/quickjs)                                  |\n| [raylib-duktape](https://github.com/RobLoach/raylib-duktape)                       | 2.6            | [JavaScript (Duktape)](https://en.wikipedia.org/wiki/JavaScript)        |\n| [raylib-v7](https://github.com/Rabios/raylib-v7)                                   | 3.5            | [JavaScript (v7)](https://en.wikipedia.org/wiki/JavaScript)             |\n| [raylib-chaiscript](https://github.com/RobLoach/raylib-chaiscript)                 | 2.6            | [ChaiScript](http://chaiscript.com)                                     |\n| [raylib-squirrel](https://github.com/RobLoach/raylib-squirrel)                     | 2.5            | [Squirrel](http://www.squirrel-lang.org)                                |\n| [racket-raylib-2d](https://github.com/arvyy/racket-raylib-2d)                      | 2.5            | [Racket](https://racket-lang.org)                                       |\n| [raylib-php-ffi](https://github.com/oraoto/raylib-php-ffi)                         | 2.4-dev        | [PHP](https://en.wikipedia.org/wiki/PHP)                                |\n| [raylib-haxe](https://github.com/ibilon/raylib-haxe)                               | 2.4            | [Haxe](https://haxe.org)                                                |\n| [ringraylib](https://github.com/ringpackages/ringraylib)                           | 2.6            | [Ring](http://ring-lang.sourceforge.net)                                |\n| [raylib-scm](https://github.com/yashrk/raylib-scm)                                 | 2.5            | [Chicken Scheme](https://www.call-cc.org)                               |\n| [raylib-chibi](https://github.com/VincentToups/raylib-chibi)                       | 2.5            | [Chibi-Scheme](https://github.com/ashinn/chibi-scheme)                  |\n| [raylib-gambit-scheme](https://github.com/georgjz/raylib-gambit-scheme)            | 3.1-dev        | [Gambit Scheme](https://github.com/gambit/gambit)                       |\n| [Euraylib](https://github.com/gAndy50/Euraylib)                                    | 3.0            | [Euphoria](https://openeuphoria.org)                                    |\n| [raylib-odin](https://github.com/kevinw/raylib-odin)                               | 3.0            | [Odin](https://odin-lang.org)                                           |\n| [vraylib](https://github.com/waotzi/vraylib)                                       | 3.5            | [V](https://vlang.io)                                                   |\n| [raylib-vala](https://code.guddler.uk/mart/raylibVapi)                             | 3.0            | [Vala](https://wiki.gnome.org/Projects/Vala)                            |\n| [raylib-jai](https://github.com/kujukuju/raylib-jai)                               | 3.1-dev        | [Jai](https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md)     |\n| [ray.zig](https://github.com/BitPuffin/zig-raylib-experiments)                     | 2.5            | [Zig](https://ziglang.org)                                              |\n| [raylib-Ada](https://github.com/mimo/raylib-Ada)                                   | 3.0            | [Ada](https://www.adacore.com/about-ada)                                |\n| [raykit](https://github.com/Gamerfiend/raykit)                                     | **???**        | [Kit](https://www.kitlang.org)                                          |\n| [ray.mod](https://github.com/bmx-ng/ray.mod)                                       | 3.0            | [BlitzMax](https://blitzmax.org)                                        |\n| [raylib-mosaic](https://github.com/pluckyporcupine/raylib-mosaic)                  | 3.0            | [Mosaic](https://github.com/sal55/langs/tree/master/Mosaic)             |\n| [raylib-xdpw](https://github.com/vtereshkov/raylib-xdpw)                           | 2.6            | [XD Pascal](https://github.com/vtereshkov/xdpw)                         |\n| [raylib-carp](https://github.com/sacredbirdman/raylib-carp)                        | 3.0            | [Carp](https://github.com/carp-lang/Carp)                               |\n| [raylib-fb](https://github.com/IchMagBier/raylib-fb)                               | 3.0            | [FreeBasic](https://www.freebasic.net)                                  |\n| [raylib-purebasic](https://github.com/D-a-n-i-l-o/raylib-purebasic)                | 3.0            | [PureBasic](https://www.purebasic.com)                                  |\n| [raylib-ats2](https://github.com/mephistopheles-8/raylib-ats2)                     | 3.0            | [ATS2](http://www.ats-lang.org)                                         |\n| [raylib-beef](https://github.com/M0n7y5/raylib-beef)                               | 3.0            | [Beef](https://www.beeflang.org)                                        |\n| [raylib-never](https://github.com/never-lang/raylib-never)                         | 3.0            | [Never](https://github.com/never-lang/never)                            |\n| [raylib.cbl](https://github.com/Martinfx/Cobol/tree/master/OpenCobol/Games/raylib) | 2.0            | [COBOL](https://en.wikipedia.org/wiki/COBOL)                            |\n\nMissing some language or wrapper? Feel free to create a new one! :)\n\nUsually, raylib bindings follow the convention: `raylib-{language}`\n\nLet me know if you're writing a new binding for raylib, I will list it here!\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 165.0078125,
          "content": "changelog\n---------\n\nCurrent Release:    raylib 5.5 (18 November 2024)\n\n-------------------------------------------------------------------------\nRelease:     raylib 5.5 (18 November 2024)\n-------------------------------------------------------------------------\nKEY CHANGES:\n - New tool: raylib project creator\n - New rcore backends: RGFW and SDL3\n - New platforms supported: Dreamcast, N64, PSP, PSVita, PS4\n - Added GPU Skinning support (all platforms and GL versions)\n - Added raymath C++ operators\n\nDetailed changes:\n\nWIP: Last update with commit from 02-Nov-2024\n\n[rcore] ADDED: Working directory info at initialization by @Ray\n[rcore] ADDED: `GetClipboardImage()`, supported by multiple backends (#4459) by @evertonse\n[rcore] ADDED: `MakeDirectory()`, supporting recursive directory creation by @Ray\n[rcore] ADDED: `ComputeSHA1()` (#4390) by @Anthony Carbajal\n[rcore] ADDED: `ComputeCRC32()` and `ComputeMD5()` by @Ray\n[rcore] ADDED: `GetKeyName()` (#4161) by @MrScautHD\n[rcore] ADDED: `IsFileNameValid()` by @Ray\n[rcore] ADDED: `GetViewRay()`, viewport independent raycast (#3709) by @Luís Almeida\n[rcore] RENAMED: `GetMouseRay()` to `GetScreenToWorldRay()` (#3830) by @Ray\n[rcore] RENAMED: `GetViewRay()` to `GetScreenToWorldRayEx()` (#3830) by @Ray\n[rcore] REVIEWED: `GetApplicationDirectory()` for FreeBSD (#4318) by @base\n[rcore] REVIEWED: `LoadDirectoryFilesEx()`/`ScanDirectoryFiles()`, support directory on filter (#4302) by @foxblock\n[rcore] REVIEWED: Update comments on fullscreen and boderless window to describe what they do (#4280) by @Jeffery Myers\n[rcore] REVIEWED: Correct processing of mouse wheel on Automation events #4263 by @Ray\n[rcore] REVIEWED: Fix gamepad axis movement and its automation event recording (#4184) by @maxmutant\n[rcore] REVIEWED: Do not set RL_TEXTURE_FILTER_LINEAR when high dpi flag is enabled (#4189) by @Dave Green\n[rcore] REVIEWED: `GetScreenWidth()`/`GetScreenHeight()` (#4074) by @Anthony Carbajal\n[rcore] REVIEWED: Initial window dimensions checks (#3950) by @Christian Haas\n[rcore] REVIEWED: Set default init values for random #3954 by @Ray\n[rcore] REVIEWED: Window positioning, avoid out-of-screen window-bar by @Ray\n[rcore] REVIEWED: Fix framerate recording for .gif (#3894) by @Rob Loach\n[rcore] REVIEWED: Screen space related functions consistency (#3830) by @aiafrasinei\n[rcore] REVIEWED: `GetFileNameWithoutExt()` (#3771) by @oblerion\n[rcore] REVIEWED: `GetWindowScaleDPI()`, simplified (#3701) by @Karl Zylinski\n[rcore] REVIEWED: `UnloadAutomationEventList()` (#3658) by @Antonis Geralis\n[rcore] REVIEWED: Flip VR screens (#3633) by @Matthew Oros\n[rcore] REVIEWED: Remove unused vScreenCenter (#3632) by @Matthew Oros\n[rcore] REVIEWED: `LoadRandomSequence()`, issue in sequence generation #3612 by @Ray\n[rcore] REVIEWED: `IsMouseButtonUp()` (#3609) by @Kenneth M\n[rcore] REVIEWED: Fix typos in src/platforms/rcore_*.c (#3581) by @RadsammyT\n[rcore] REVIEWED: `ExportDataAsCode()`, change sanitization check (#3837) by @Laurentino Luna\n[rcore] REVIEWED: `ExportDataAsCode()`, add little sanitization to indentifier names (#3832) by @4rk\n[rcore] REVIEWED: `GetScreenWidth()`/`GetScreenHeight()` align with all platforms (#4451) by @Arche Washi\n[rcore] REVIEWED: `SetGamepadVibration()`, added duration parameter (#4410) by @Asdqwe -WARNING-\n[rcore] REVIEWED: `GetGamepadAxisMovement()`, fix #4405 (#4420) by @Asdqwe\n[rcore] REVIEWED: `GetGestureHoldDuration()` comments by @Ray\n[rcore][rlgl] REVIEWED: Fix scale issues when ending a view mode (#3746) by @Jeffery Myers\n[rcore][GLFW] REVIEWED: Keep CORE.Window.position properly in sync with glfw window position (#4190) by @Dave Green\n[rcore][GLFW] REVIEWED: Set AUTO_ICONIFY flag to false per default (#4188) by @Dave Green\n[rcore][GLFW] REVIEWED: `InitPlatform()`, add workaround for NetBSD (#4139) by @NishiOwO\n[rcore][GLFW] REVIEWED: Fix window not initializing on primary monitor (#3923) by @Rafael Bordoni\n[rcore][GLFW] REVIEWED: Set relative mouse mode when the cursor is disabled (#3874) by @Jeffery Myers\n[rcore][GLFW] REVIEWED: Remove GLFW mouse passthrough hack and increase GLFW version in CMake (#3852) by @Alexandre Almeida\n[rcore][GLFW] REVIEWED: Updated GLFW to 3.4 (#3827) by @Alexandre Almeida\n[rcore][GLFW] REVIEWED: Feature test macros before include (#3737) by @John\n[rcore][GLFW] REVIEWED: Fix inconsistent dll linkage warning on windows (#4447) by @Jeffery Myers\n[rcore][Web] ADDED: `SetWindowOpacity()` implementation (#4403) by @Asdqwe\n[rcore][Web] ADDED: `MaximizeWindow()` and `RestoreWindow()` implementations (#4397) by @Asdqwe\n[rcore][Web] ADDED: `ToggleFullscreen()` implementation (#3634) by @ubkp\n[rcore][Web] ADDED: `GetWindowPosition()` implementation (#3637) by @ubkp\n[rcore][Web] ADDED: `ToggleBorderlessWindowed()` implementation (#3622) by @ubkp\n[rcore][Web] ADDED: `GetMonitorWidth()` and `GetMonitorHeight()` implementations (#3636) by @ubkp\n[rcore][Web] REVIEWED: Update `SetWindowState()` and `ClearWindowState()` to handle `FLAG_WINDOW_MAXIMIZED` (#4402) by @Asdqwe\n[rcore][Web] REVIEWED: `WindowSizeCallback()`, do not try to handle DPI, already managed by GLFW (#4143) by @SuperUserNameMan\n[rcore][Web] REVIEWED: Relative mouse mode issues (#3940) by @Cemal Gönültaş\n[rcore][Web] REVIEWED: `ShowCursor()`, `HideCursor()` and `SetMouseCursor()` (#3647) by @ubkp\n[rcore][Web] REVIEWED: Fix CORE.Input.Mouse.cursorHidden with callbacks (#3644) by @ubkp\n[rcore][Web] REVIEWED: Fix `IsMouseButtonUp()` (#3611) by @ubkp\n[rcore][Web] REVIEWED: HighDPI support #3372 by @Ray\n[rcore][Web] REVIEWED: `SetWindowSize()` (#4452) by @Asdqwe\n[rcore][Web] REVIEWED: `EmscriptenResizeCallback()`, simplified (#4415) by @Asdqwe\n[rcore][SDL] ADDED: `IsCursorOnScreen()` (#3862) by @Peter0x44\n[rcore][SDL] ADDED: Gamepad rumble/vibration support (#3819) by @GideonSerf\n[rcore][SDL] REVIEWED: Gamepad support (#3776) by @A\n[rcore][SDL] REVIEWED: `GetWorkingDirectory()`, return correct path (#4392) by @Asdqwe\n[rcore][SDL] REVIEWED: `GetClipboardText()`, fix memory leak (#4354) by @Asdqwe\n[rcore][SDL] REVIEWED: Change SDL_Joystick to SDL_GameController (#4129) by @Frank Kartheuser\n[rcore][SDL] REVIEWED: Update storage base path, use provided SDL base path by @Ray\n[rcore][SDL] REVIEWED: Call SDL_GL_SetSwapInterval() after GL context creation (#3997) by @JupiterRider\n[rcore][SDL] REVIEWED: `GetKeyPressed()` (#3869) by @Arthur\n[rcore][SDL] REVIEWED: Fix SDL multitouch tracking (#3810) by @mooff\n[rcore][SDL] REVIEWED: Fix `SUPPORT_WINMM_HIGHRES_TIMER` (#3679) by @ubkp\n[rcore][SDL] REVIEWED: SDL text input to Unicode codepoints #3650 by @Ray\n[rcore][SDL] REVIEWED: `IsMouseButtonUp()` and add touch events (#3610) by @ubkp\n[rcore][SDL] REVIEWED: Fix real touch gestures (#3614) by @ubkp\n[rcore][SDL] REVIEWED: `IsKeyPressedRepeat()` (#3605) by @ubkp\n[rcore][SDL] REVIEWED: `GetKeyPressed()` and `GetCharPressed()` for SDL (#3604) by @ubkp\n[rcore][SDL] REVIEWED: `SetMousePosition()` for SDL (#3580) by @ubkp\n[rcore][SDL] REVIEWED: `SetWindowIcon()` for SDL (#3578) by @ubkp\n[rcore][SDL][rlgl] REVIEWED: Fix for running gles2 with SDL on desktop (#3542) by @_Tradam\n[rcore][Android] REVIEWED: Issue with isGpuReady flag (#4340) by @Menno van der Graaf\n[rcore][Android] REVIEWED: Allow main() to return it its caller on configuration changes (#4288) by @Hesham Abourgheba\n[rcore][Android] REVIEWED: Replace deprecated Android function ALooper_pollAll with ALooper_pollOnce (#4275) by @Menno van der Graaf\n[rcore][Android] REVIEWED: `PollInputEvents()`, register previous gamepad events (#3910) by @Aria\n[rcore][Android] REVIEWED: Fix Android keycode translation and duplicate key constants (#3733) by @Alexandre Almeida\n[rcore][DRM] ADDED: uConsole keys mapping (#4297) by @carverdamien\n[rcore][DRM] ADDED: `GetMonitorWidth/Height()` (#3956) by @gabriel-marques\n[rcore][DRM] REVIEWED: `IsMouseButtonUp()` (#3611) by @ubkp\n[rcore][DRM] REVIEWED: Optimize gesture handling (#3616) by @ubkp\n[rcore][DRM] REVIEWED: `IsKeyPressedRepeat()` for PLATFORM_DRM direct input (#3583) by @ubkp\n[rcore][DRM] REVIEWED: Fix gamepad buttons not working in drm backend (#3888) by @MrMugame\n[rcore][DRM] REVIEWED: DRM backend to only use one api to allow for more devices (#3879) by @MrMugame\n[rcore][DRM] REVIEWED: Avoid separate thread when polling for gamepad events (#3641) by @Cinghy Creations\n[rcore][DRM] REVIEWED: Connector status reported as UNKNOWN but should be considered as CONNECTED (#4305) by @Michał Jaskólski\n[rcore][RGFW] ADDED: RGFW, new rcore backend platform (#3941) by @Colleague Riley\n[rcore][RGFW] REVIEWED: RGFW 1.0 (#4144) by @Colleague Riley\n[rcore][RGFW] REVIEWED: Fix errors when compiling with mingw (#4282) by @Colleague Riley\n[rcore][RGFW] REVIEWED: Replace long switch with a lookup table (#4108) by @Colleague Riley\n[rcore][RGFW] REVIEWED: Fix MSVC build errors (#4441) by @Colleague Riley\n[rlgl] ADDED: More uniform data type options #4137 by @Ray\n[rlgl] ADDED: Vertex normals for RLGL immediate drawing mode (#3866) by @bohonghuang -WARNING-\n[rlgl] ADDED: `rlCullDistance*()` variables and getters (#3912) by @KotzaBoss\n[rlgl] ADDED: `rlSetClipPlanes()` function (#3912) by @KotzaBoss\n[rlgl] ADDED: `isGpuReady` flag, allow font loading with no GPU acceleration by @Ray -WARNING-\n[rlgl] REVIEWED: Changed RLGL_VERSION from 4.5 to 5.0 (#3914) by @Mute\n[rlgl] REVIEWED: Shader load failing returns 0, instead of fallback by @Ray -WARNING-\n[rlgl] REVIEWED: Standalone mode default flags (#4334) by @Asdqwe\n[rlgl] REVIEWED: Fix hardcoded index values in vboID array (#4312) by @Jett\n[rlgl] REVIEWED: GLint64 did not exist before OpenGL 3.2 (#4284) by @Tchan0\n[rlgl] REVIEWED: Extra warnings in case OpenGL 4.3 is not enabled (#4202) by @Maxim Knyazkin\n[rlgl] REVIEWED: Using GLint64 for glGetBufferParameteri64v() (#4197) by @Randy Palamar\n[rlgl] REVIEWED: Replace `glGetInteger64v()` with `glGetBufferParameteri64v()` (#4154) by @Kai Kitagawa-Jones\n[rlgl] REVIEWED: `rlMultMatrixf()`, fix matrix multiplication order (#3935) by @bohonghuang\n[rlgl] REVIEWED: `rlSetVertexAttribute()`, define last parameter as offset #3800 by @Ray\n[rlgl] REVIEWED: `rlDisableVertexAttribute()`, remove redundat calls for SHADER_LOC_VERTEX_COLOR (#3871) by @Kacper Zybała\n[rlgl] REVIEWED: `rlLoadTextureCubemap()`, load mipmaps for cubemaps (#4429) by @Nikolas\n[rlgl] REVIEWED: `rlLoadFramebuffer()`, parameters not required by @Ray\n[rlgl] REVIEWED: `rlSetUniformSampler()` (#3759) by @veins1\n[rlgl] REVIEWED: Renamed near/far variables (#4039) by @jgabaut\n[rlgl] REVIEWED: Expose OpenGL symbols (#3588) by @Peter0x44\n[rlgl] REVIEWED: Fix OpenGL 1.1 build issues (#3876) by @Ray\n[rlgl] REVIEWED: Fixed compilation for OpenGL ES (#4243) by @Maxim Knyazkin\n[rlgl] REVIEWED: rlgl function description and comments by @Ray\n[rlgl] REVIEWED: Expose glad functions when building raylib as a shared lib (#3572) by @Peter0x44\n[rlgl] REVIEWED: Fix version info in rlgl.h (#3558) by @Steven Schveighoffer\n[rlgl] REVIEWED: Use the vertex color to the base shader in GLSL330 (#4431) by @Jeffery Myers\n[rcamera] REVIEWED: Make camera movement independant of framerate (#4247) by @hanaxars -WARNING-\n[rcamera] REVIEWED: Updated camera speeds with GetFrameTime() (#4362) by @Anthony Carbajal\n[rcamera] REVIEWED: `UpdateCamera()`, added CAMERA_CUSTOM check (#3938) by @Tomas Fabrizio Orsi\n[rcamera] REVIEWED: Support mouse/keyboard and gamepad coexistence for input (#3579) by @ubkp\n[rcamera] REVIEWED: Cleaned away unused macros(#3762) by @Brian E\n[rcamera] REVIEWED: Fix for free camera mode (#3603) by @lesleyrs\n[rcamera] REVIEWED: `GetCameraRight()` (#3784) by @Danil\n[raymath] ADDED: C++ operator overloads for common math function (#4385) by @Jeffery Myers  -WARNING-\n[raymath] ADDED: Vector4 math functions and Vector2 variants of some Vector3 functions (#3828) by @Bowserinator\n[raymath] REVIEWED: Fix MSVC warnings/errors in C++ (#4125) by @Jeffery Myers\n[raymath] REVIEWED: Add extern \"C\" to raymath header for C++ (#3978) by @Jeffery Myers\n[raymath] REVIEWED: `QuaternionFromAxisAngle()`, remove redundant axis length calculation (#3900) by @jtainer\n[raymath] REVIEWED: `Vector3Perpendicular()`, avoid implicit conversion from float to double (#3799) by @João Foscarini\n[raymath] REVIEWED: `MatrixDecompose()`, incorrect output for certain scale and rotations (#4461) by @waveydave\n[raymath] REVIEWED: Small code refactor (#3753) by @Idir Carlos Aliane\n[rshapes] ADDED: `CheckCollisionCircleLine()` (#4018) by @kai-z99\n[rshapes] REVIEWED: Multisegment Bezier splines (#3744) by @Santiago Pelufo\n[rshapes] REVIEWED: Expose shapes drawing texture and rectangle (#3677) by @Jeffery Myers\n[rshapes] REVIEWED: `DrawLine()` #4075 by @Ray\n[rshapes] REVIEWED: `DrawPixel()` drawing by @Ray\n[rshapes] REVIEWED: `DrawLine()` to avoid pixel rounding issues #3931 by @Ray\n[rshapes] REVIEWED: `DrawRectangleLines()`, considering view matrix for lines \"alignment\" by @Ray\n[rshapes] REVIEWED: `DrawRectangleLines()`, pixel offset (#4261) by @RadsammyT\n[rshapes] REVIEWED: `DrawRectangleLines()`, pixel offset when scaling (#3884) by @Ray\n[rshapes] REVIEWED: `DrawRectangleLinesEx()`, make sure accounts for square tiles (#4382) by @Jojaby\n[rshapes] REVIEWED: `Draw*Gradient()` color parameter names (#4270) by @Paperdomo101\n[rshapes] REVIEWED: `DrawGrid()`, remove duplicate color calls (#4148) by @Jeffery Myers\n[rshapes] REVIEWED: `DrawSplineLinear()` to `SUPPORT_SPLINE_MITERS` by @Ray\n[rshapes] REVIEWED: `DrawSplineLinear()`, implement miters (#3585) by @Toctave\n[rshapes] REVIEWED: `CheckCollisionPointRec()` by @Ray\n[rshapes] REVIEWED: `CheckCollisionPointCircle()`, new implementation (#4135) by @kai-z99\n[rshapes] REVIEWED: `CheckCollisionCircles()`, optimized (#4065) by @kai-z99\n[rshapes] REVIEWED: `CheckCollisionPointPoly()` (#3750) by @Antonio Raúl\n[rshapes] REVIEWED: `CheckCollisionCircleRec()` (#3584) by @ubkp\n[rshapes] REVIEWED: Add more detail to function comment (#4344) by @Jeffery Myers\n[rshapes] REVIEWED: Functions that draw point arrays take them as const (#4051) by @Jeffery Myers\n[rtextures] ADDED: `ColorIsEqual()` by @Ray\n[rtextures] ADDED: `ColorLerp()`, to mix 2 colors together (#4310) by @SusgUY446\n[rtextures] ADDED: `LoadImageAnimFromMemory()` (#3681) by @IoIxD\n[rtextures] ADDED: `ImageKernelConvolution()` (#3528) by @Karim\n[rtextures] ADDED: `ImageFromChannel()` (#4105) by @Bruno Cabral\n[rtextures] ADDED: `ImageDrawLineEx()` (#4097) by @Le Juez Victor\n[rtextures] ADDED: `ImageDrawTriangle()` (#4094) by @Le Juez Victor\n[rtextures] REMOVED: SVG files loading and drawing, moving it to raylib-extras by @Ray -WARNING-\n[rtextures] REVIEWED: `LoadImage()`, added support for 3-channel QOI images (#4384) by @R-YaTian\n[rtextures] REVIEWED: `LoadImageRaw()` #3926 by @Ray\n[rtextures] REVIEWED: `LoadImageColors()`, advance k in loop (#4120) by @Bruno Cabral\n[rtextures] REVIEWED: `LoadTextureCubemap()`, added `mipmaps` #3665 by @Ray\n[rtextures] REVIEWED: `LoadTextureCubemap()`, assign format to cubemap (#3823) by @Gary M\n[rtextures] REVIEWED: `LoadTextureCubemap()`, load mipmaps for cubemaps (#4429) by @Nikolas\n[rtextures] REVIEWED: `LoadTextureCubemap()`, avoid dangling re-allocated pointers (#4439) by @Nikolas\n[rtextures] REVIEWED: `LoadImageFromScreen()`, fix scaling (#3881) by @proberge-dev\n[rtextures] REVIEWED: `LoadImageFromMemory()`, warnings on invalid image data (#4179) by @Jutastre\n[rtextures] REVIEWED: `LoadImageAnimFromMemory()`, added security checks (#3924) by @Ray\n[rtextures] REVIEWED: `ImageColorTint()` and `ColorTint()`, optimized (#4015) by @Le Juez Victor\n[rtextures] REVIEWED: `ImageKernelConvolution()`, formating and warnings by @Ray\n[rtextures] REVIEWED: `ImageDrawRectangleRec`, fix bounds check (#3732) by @Blockguy24\n[rtextures] REVIEWED: `ImageResizeCanvas()`, implemented fill color (#3720) by @Lieven Petersen\n[rtextures] REVIEWED: `ImageDrawRectangleRec()` (#3721) by @Le Juez Victor\n[rtextures] REVIEWED: `ImageDraw()`, don't try to blend images without alpha (#4395) by @Nikolas\n[rtextures] REVIEWED: `GenImagePerlinNoise()` being stretched (#4276) by @Bugsia\n[rtextures] REVIEWED: `GenImageGradientLinear()`, fix some angles (#4462) by @decromo\n[rtextures] REVIEWED: `DrawTexturePro()` to avoid negative dest rec #4316 by @Ray\n[rtextures] REVIEWED: `ColorToInt()`, fix undefined behaviour (#3996) by @OetkenPurveyorOfCode\n[rtextures] REVIEWED: Remove panorama cubemap layout option (#4425) by @Jeffery Myers\n[rtextures] REVIEWED: Removed unneeded module check, `rtextures` should not depend on `rtext` by @Ray\n[rtextures] REVIEWED: Simplified for loop for some image manipulation functions (#3712) by @Alice Nyaa\n[rtext] ADDED: BDF fonts support (#3735) by @Stanley Fuller -WARNING-\n[rtext] ADDED: `TextToCamel()` (#4033) by @IoIxD\n[rtext] ADDED: `TextToSnake()` (#4033) by @IoIxD\n[rtext] ADDED: `TextToFloat()` (#3627) by @Benjamin Schmid Ties\n[rtext] REDESIGNED: `SetTextLineSpacing()` by @Ray -WARNING-\n[rtext] REVIEWED: `LoadFontDataBDF()` name and formating by @Ray\n[rtext] REVIEWED: `LoadFontDefault()`, initialize glyphs and recs to zero #4319 by @Ray\n[rtext] REVIEWED: `LoadFontEx()`, avoid default font fallback (#4077) by @Peter0x44 -WARNING-\n[rtext] REVIEWED: `LoadBMFont()`, extended functionality (#3536) by @Dongkun Lee\n[rtext] REVIEWED: `LoadBMFont()`, issue on not glyph data initialized by @Ray\n[rtext] REVIEWED: `LoadFontFromMemory()`, use strncpy() to fix buffer overflow (#3795) by @Mingjie Shen\n[rtext] REVIEWED: `LoadCodepoints()` returning a freed ptr when count is 0 (#4089) by @Alice Nyaa\n[rtext] REVIEWED: `LoadFontData()` avoid fallback glyphs by @Ray -WARNING-\n[rtext] REVIEWED: `LoadFontData()`, load image only if glyph has been found in font by @Ray\n[rtext] REVIEWED: `ExportFontAsCode()`, fix C++ compiler errors (#4013) by @DarkAssassin23\n[rtext] REVIEWED: `MeasureTextEx()` height calculation (#3770) by @Marrony Neris\n[rtext] REVIEWED: `MeasureTextEx()`, additional check for empty input string (#4448) by @mpv-enjoyer\n[rtext] REVIEWED: `CodepointToUTF8()`, clean static buffer #4379 by @Ray\n[rtext] REVIEWED: `TextToFloat()`, always multiply by sign (#4273) by @listeria\n[rtext] REVIEWED: `TextReplace()` const correctness (#3678) by @maverikou\n[rtext] REVIEWED: `TextToFloat()`, coding style (#3627) by @Benjamin Schmid Ties\n[rtext] REVIEWED: Some comments to align to style (#3756) by @Idir Carlos Aliane\n[rtext] REVIEWED: Adjust font atlas area calculation so padding area is not underestimated at small font sizes (#3719) by @Tim Romero\n[rmodels] ADDED: GPU skinning support for models animations (#4321) by @Daniel Holden -WARNING-\n[rmodels] ADDED: Support 16-bit unsigned short vec4 format for gltf joint loading (#3821) by @Gary M\n[rmodels] ADDED: Support animation names for the m3d model format (#3714) by @kolunmi\n[rmodels] ADDED: `DrawModelPoints()`, more performant point cloud rendering (#4203) by @Reese Gallagher\n[rmodels] ADDED: `ExportMeshAsCode()` by @Ray\n[rmodels] REVIEWED: Multiple updates to gltf loading, improved macro (#4373) by @Harald Scheirich\n[rmodels] REVIEWED: `LoadOBJ()`, correctly split obj meshes by material (#4285) by @Jeffery Myers\n[rmodels] REVIEWED: `LoadOBJ()`, add warning when loading an OBJ with multiple materials (#4271) by @Jeffery Myers\n[rmodels] REVIEWED: `LoadOBJ()`, fix bug that fragmented the loaded meshes (#4494) by @Eike Decker\n[rmodels] REVIEWED: `LoadIQM()`, set model.meshMaterial[] (#4092) by @SuperUserNameMan\n[rmodels] REVIEWED: `LoadIQM()`, attempt to load texture from IQM at loadtime (#4029) by @Jett\n[rmodels] REVIEWED: `LoadM3D(), fix vertex colors for m3d files (#3859) by @Jeffery Myers\n[rmodels] REVIEWED: `LoadGLTF()`, supporting additional vertex data formats (#3546) by @MrScautHD\n[rmodels] REVIEWED: `LoadGLTF()`, correctly handle the node hierarchy in a glTF file (#4037) by @Paul Melis\n[rmodels] REVIEWED: `LoadGLTF()`, replaced SQUAD quat interpolation with cubic hermite (gltf 2.0 specs) (#3920) by @Benji\n[rmodels] REVIEWED: `LoadGLTF()`, support 2nd texture coordinates loading by @Ray\n[rmodels] REVIEWED: `LoadGLTF()`, support additional vertex attributes data formats #3890 by @Ray\n[rmodels] REVIEWED: `LoadGLTF()`, set cgltf callbacks to use `LoadFileData()` and `UnloadFileData()` (#3652) by @kolunmi\n[rmodels] REVIEWED: `LoadGLTF()`, JOINTS loading #3836 by @Ray\n[rmodels] REVIEWED: `LoadImageFromCgltfImage()`, fix base64 padding support (#4112) by @SuperUserNameMan\n[rmodels] REVIEWED: `LoadModelAnimationsIQM()`, fix corrupted animation names (#4026) by @Jett\n[rmodels] REVIEWED: `LoadModelAnimationsGLTF()`, load animations with 1 frame (#3804) by @Nikita Blizniuk\n[rmodels] REVIEWED: `LoadModelAnimationsGLTF()`, added missing interpolation types (#3919) by @Benji\n[rmodels] REVIEWED: `LoadModelAnimationsGLTF()` (#4107) by @VitoTringolo\n[rmodels] REVIEWED: `LoadBoneInfoGLTF()`, add check for animation name being NULL (#4053) by @VitoTringolo\n[rmodels] REVIEWED: `GenMeshSphere()`, fix artifacts (#4460) by @MikiZX1\n[rmodels] REVIEWED: `GenMeshTangents()`, read uninitialized values, fix bounding case (#4066) by @kai-z99\n[rmodels] REVIEWED: `GenMeshTangents()`, fixed out of bounds error (#3990) by @Salvador Galindo\n[rmodels] REVIEWED: `UpdateModelAnimation()`, performance speedup (#4470) by @JettMonstersGoBoom\n[rmodels] REVIEWED: `DrawCylinder()`, fix drawing due to imprecise angle (#4034) by @Paul Melis\n[rmodels] REVIEWED: `DrawCylinder()`, fix drawing of cap (#4478) by @JeffM2501\n[rmodels] REVIEWED: `DrawMesh()`, send full matModel to shader in DrawMesh (#4005) (#4022) by @David Holland\n[rmodels] REVIEWED: `DrawMesh()`, fix material specular map retrieval (#3758) by @Victor Gallet\n[rmodels] REVIEWED: `DrawModelEx()`, simplified multiplication of colors (#4002) by @Le Juez Victor\n[rmodels] REVIEWED: `DrawBillboardPro()`, to be consistend with `DrawTexturePro()` (#4132) by @bohonghuang\n[rmodels] REVIEWED: `DrawSphereEx()` optimization (#4106) by @smalltimewizard\n[raudio] REVIEWED: `LoadMusicStreamFromMemory()`, support 24-bit FLACs (#4279) by @konstruktor227\n[raudio] REVIEWED: `LoadWaveSamples()`, fix mapping of wave data (#4062) by @listeria\n[raudio] REVIEWED: `LoadMusicStream()`, remove drwav_uninit() (#3986) by @FishingHacks\n[raudio] REVIEWED: `LoadMusicStream()` qoa and wav loading (#3966) by @veins1\n[raudio] REVIEWED: `ExportWaveAsCode()`, segfault (#3769) by @IoIxD\n[raudio] REVIEWED: `WaveCrop()`, fix issues and use frames instead of samples (#3994) by @listeria\n[raudio] REVIEWED: Crash from multithreading issues (#3907) by @Christian Haas\n[raudio] REVIEWED: Reset music.ctxType if loading wasn't succesful (#3917) by @veins1\n[raudio] REVIEWED: Added missing functions in \"standalone\" mode (#3760) by @Alessandro Nikolaev\n[raudio] REVIEWED: Disable unused miniaudio features (#3544) by @Alexandre Almeida\n[raudio] REVIEWED: Fix crash when switching playback device at runtime (#4102) by @jkaup\n[raudio] REVIEWED: Support 24 bits samples for FLAC format (#4058) by @Alexey Kutepov\n[examples] ADDED: `core_random_sequence` (#3846) by @Dalton Overmyer\n[examples] ADDED: `core_input_virtual_controls` (#4342) by @oblerion\n[examples] ADDED: `shapes_rectangle_advanced `, implementing `DrawRectangleRoundedGradientH()` (#4435) by @Everton Jr.\n[examples] ADDED: `models_bone_socket` (#3833) by @iP\n[examples] ADDED: `shaders_vertex_displacement` (#4186) by @Alex ZH\n[examples] ADDED: `shaders_shadowmap` (#3653) by @TheManTheMythTheGameDev\n[examples] REVIEWED: `core_2d_camera_platformer` by @Ray\n[examples] REVIEWED: `core_2d_camera_mouse_zoom`, use logarithmic scaling for a 2d zoom functionality (#3977) by @Mike Will\n[examples] REVIEWED: `core_input_gamepad_info`, all buttons displayed within the window (#4241) by @Asdqwe\n[examples] REVIEWED: `core_input_gamepad_info`, show ps3 controller (#4040) by @Konrad Gutvik Grande\n[examples] REVIEWED: `core_input_gamepad`, add drawing for generic gamepad (#4424) by @Asdqwe\n[examples] REVIEWED: `core_input_gamepad`, add deadzone handling (#4422) by @Asdqwe\n[examples] REVIEWED: `shapes_bouncing_ball` (#4226) by @Anthony Carbajal\n[examples] REVIEWED: `shapes_following_eyes` (#3710) by @Hongyu Ouyang\n[examples] REVIEWED: `shapes_draw_rectangle_rounded` by @Ray\n[examples] REVIEWED: `shapes_draw_ring`, fix other examples (#4211) by @kai-z99\n[examples] REVIEWED: `shapes_lines_bezier` by @Ray\n[examples] REVIEWED: `textures_image_kernel` #3556 by @Ray\n[examples] REVIEWED: `text_input_box` (#4229) by @Anthony Carbajal\n[examples] REVIEWED: `text_writing_anim` (#4230) by @Anthony Carbajal\n[examples] REVIEWED: `models_billboard` by @Ray\n[examples] REVIEWED: `models_cubicmap` by @Ray\n[examples] REVIEWED: `models_point_rendering` by @Ray\n[examples] REVIEWED: `models_box_collisions` (#4224) by @Anthony Carbajal\n[examples] REVIEWED: `models_skybox`, do not use HDR by default (#4115) by @Jeffery Myers\n[examples] REVIEWED: `shaders_basic_pbr` (#4225) by @Anthony Carbajal\n[examples] REVIEWED: `shaders_palette_switch` by @Ray\n[examples] REVIEWED: `shaders_hybrid_render` (#3908) by @Yousif\n[examples] REVIEWED: `shaders_lighting_instancing`, fix vertex shader (#4056) by @Karl Zylinski\n[examples] REVIEWED: `shaders_raymarching`, add `raymarching.fs` for GLSL120 (#4183) by @CDM15y\n[examples] REVIEWED: `shaders_shadowmap`, fix shaders for GLSL 1.20 (#4167) by @CDM15y\n[examples] REVIEWED: `shaders_deferred_render` (#3655) by @Jett\n[examples] REVIEWED: `shaders_basic_pbr` (#3621) by @devdad\n[examples] REVIEWED: `shaders_basic_pbr`, remove dependencies (#3649) by @TheManTheMythTheGameDev\n[examples] REVIEWED: `shaders_basic_pbr`, added more comments by @Ray\n[examples] REVIEWED: `shaders_gpu_skinning`, to work with OpenGL ES 2.0 #4412 by @Ray\n[examples] REVIEWED: `shaders_model_shader`, use free camera (#4428) by @IcyLeave6109\n[examples] REVIEWED: `audio_stream_effects` (#3618) by @lipx\n[examples] REVIEWED: `audio_raw_stream` (#3624) by @riadbettole\n[examples] REVIEWED: `audio_mixed_processor` (#4214) by @Anthony Carbajal\n[examples] REVIEWED: `raylib_opengl_interop`, fix building on PLATFORM_DESKTOP_SDL (#3826) by @Peter0x44\n[examples] REVIEWED: Update examples missing UnloadTexture() calls (#4234) by @Anthony Carbajal\n[examples] REVIEWED: Added GLSL 100 and 120 shaders to lightmap example (#3543) by @Jussi Viitala\n[examples] REVIEWED: Set FPS to always 60 in all exampels (#4235) by @Anthony Carbajal\n[build] REVIEWED: Makefile by @Ray\n[build] REVIEWED: Makefile, fix wrong flag #3593 by @Ray\n[build] REVIEWED: Makefile, disable wayland by default (#4369) by @Anthony Carbajal\n[build] REVIEWED: Makefile, VSCode, fix to support multiple .c files (#4391) by @Alan Arrecis\n[build] REVIEWED: Makefile, fix -Wstringop-truncation warning (#4096) by @Peter0x44\n[build] REVIEWED: Makefile, fix issues for RGFW on Linux/macOS (#3969) by @Colleague Riley\n[build] REVIEWED: Makefile, update RAYLIB_VERSION (#3901) by @Belllg\n[build] REVIEWED: Makefile, use mingw32-make for Windows (#4436) by @Asdqwe\n[build] REVIEWED: Makefile, move CUSTOM_CFLAGS for better visibility (#4054) by @Lázaro Albuquerque\n[build] REVIEWED: Makefile, update emsdk paths to latest versions by @Ray\n[build] REVIEWED: Makefile examples, align /usr/local with /src Makefile (#4286) by @Tchan0\n[build] REVIEWED: Makefile examples, added `textures_image_kernel` (#3555) by @Sergey Zapunidi\n[build] REVIEWED: Makefile examples (#4209) by @Anthony Carbajal\n[build] REVIEWED: Makefile examples, to work on NetBSD (#4438) by @NishiOwO\n[build] REVIEWED: Makefile examples, WebGL2 (OpenGL ES 3.0) backend flags #4330 by @Ray\n[build] REVIEWED: Makefile examples, web building (#4434) by @Asdqwe\n[build] REVIEWED: build.zig, fix various issues around `-Dconfig` (#4398) by @Sage Hane\n[build] REVIEWED: build.zig, fix type mismatch (#4383) by @yuval_dev\n[build] REVIEWED: build.zig, minor fixes (#4381) by @Sage Hane\n[build] REVIEWED: build.zig, fix @src logic and a few things (#4380) by @Sage Hane\n[build] REVIEWED: build.zig, improve logic (#4375) by @Sage Hane\n[build] REVIEWED: build.zig, issues  (#4374) by @William Culver\n[build] REVIEWED: build.zig, issues (#4366) by @Visen\n[build] REVIEWED: build.zig, support desktop backend change (#4358) by @Nikolas\n[build] REVIEWED: build.zig, use zig fmt (#4242) by @freakmangd\n[build] REVIEWED: build.zig, check if wayland-scanner is installed (#4217) by @lnc3l0t\n[build] REVIEWED: build.zig, override config.h definitions (#4193) by @lnc3l0t\n[build] REVIEWED: build.zig, support GLFW platform detection (#4150) by @InventorXtreme\n[build] REVIEWED: build.zig, make emscripten build compatible with Zig 0.13.0 (#4121) by @Mike Will\n[build] REVIEWED: build.zig, pass the real build.zig file (#4113) by @InKryption\n[build] REVIEWED: build.zig, leverage `dependencyFromBuildZig` (#4109) by @InKryption\n[build] REVIEWED: build.zig, run examples from their directories (#4063) by @Mike Will\n[build] REVIEWED: build.zig, fix raygui build when using addRaygui externally (#4027) by @Viktor Pocedulić\n[build] REVIEWED: build.zig, fix emscripten build (#4012) by @Dylan\n[build] REVIEWED: build.zig, update to zig 0.12.0dev while keeping 0.11.0 compatibility (#3715) by @freakmangd\n[build] REVIEWED: build.zig, drop support for 0.11.0 and use more idiomatic build script code (#3927) by @freakmangd\n[build] REVIEWED: build.zig, sdd shared library build option and update to zig 0.12.0-dev.2139 (#3727) by @Andrew Lee\n[build] REVIEWED: build.zig, add `opengl_version` option (#3979) by @Alexei Mozaidze\n[build] REVIEWED: build.zig, fix local dependency break (#3913) by @freakmangd\n[build] REVIEWED: build.zig, fix breaking builds for Zig v0.11.0 (#3896) by @iarkn\n[build] REVIEWED: build.zig, update to latest version and simplify (#3905) by @freakmangd\n[build] REVIEWED: build.zig, remove all uses of deps/mingw (#3805) by @Peter0x44\n[build] REVIEWED: build.zig, fixed illegal instruction crash (#3682) by @WisonYe\n[build] REVIEWED: build.zig, fix broken build on #3863 (#3891) by @Nikolas Mauropoulos\n[build] REVIEWED: build.zig, improve cross-compilation (#4468) by @deathbeam\n[build] REVIEWED: CMake, update to raylib 5.0 (#3623) by @Peter0x44\n[build] REVIEWED: CMake, added PLATFORM option for Desktop SDL (#3809) by @mooff\n[build] REVIEWED: CMake, fix GRAPHICS_* check (#4359) by @Kacper Zybała\n[build] REVIEWED: CMake, examples projects  (#4332) by @Ridge3Dproductions\n[build] REVIEWED: CMake, fix warnings in projects/CMake/CMakeLists.txt (#4278) by @Peter0x44\n[build] REVIEWED: CMake, delete BuildOptions.cmake (#4277) by @Peter0x44\n[build] REVIEWED: CMake, update version to 5.0 so libraries are correctly versioned (#3615) by @David Williams\n[build] REVIEWED: CMake, improved linkage flags to save 28KB on the final bundle (#4177) by @Lázaro Albuquerque\n[build] REVIEWED: CMake, support OpenGL ES3 in `LibraryConfigurations.cmake` (#4079) by @manuel5975p\n[build] REVIEWED: CMake, `config.h` fully available to users (#4044) by @Lázaro Albuquerque\n[build] REVIEWED: CMake, pass -sFULL_ES3 instead of -sFULL_ES3=1 (#4090) by @manuel5975p\n[build] REVIEWED: CMake, SDL build link the glfw dependency (#3860) by @Rob Loach\n[build] REVIEWED: CMake, infer CMAKE_MODULE_PATH in super-build (#4042) by @fruzitent\n[build] REVIEWED: CMake, remove USE_WAYLAND option (#3851) by @Alexandre Almeida\n[build] REVIEWED: CMake, disable SDL rlgl_standalone example (#3861) by @Rob Loach\n[build] REVIEWED: CMake, bump version required to avoid deprecated #3639 by @Ray\n[build] REVIEWED: CMake, fix examples linking -DPLATFORM=SDL (#3825) by @Peter0x44\n[build] REVIEWED: CMake, don't build for wayland by default (#4432) by @Peter0x44\n[build] REVIEWED: VS2022, misc improvements by @Ray\n[build] REVIEWED: VS2022, fix build warnings (#4095) by @Jeffery Myers\n[build] REVIEWED: VS2022, added new examples (#4492) by @Jeffery Myers\n[build] REVIEWED: Fix fix-build-paths (#3849) by @Caleb Barger\n[build] REVIEWED: Fix build paths (#3835) by @Steve Biedermann\n[build] REVIEWED: Fix VSCode sample project for macOS (#3666) by @Tim Romero\n[build] REVIEWED: Fix some warnings on web builds and remove some redundant flags (#4069) by @Lázaro Albuquerque\n[build] REVIEWED: Fix examples not building with gestures system disabled (#4020) by @Sprix\n[build] REVIEWED: Fix GLFW runtime platform detection (#3863) by @Alexandre Almeida\n[build] REVIEWED: Fix DRM cross-compile without sysroot (#3839) by @Christian W. Zuckschwerdt\n[build] REVIEWED: Fix cmake-built libraylib.a to properly include GLFW's object files (#3598) by @Peter0x44\n[build] REVIEWED: Hide unneeded internal symbols when building raylib as an so or dylib (#3573) by @Peter0x44\n[build] REVIEWED: Corrected the path of android ndk toolchains for OSX platforms (#3574) by @Emmanuel Méra\n[build][CI] ADDED: Automatic update for raylib_api.* (#3692) by @seiren\n[build][CI] REVIEWED: Update workflows to use latest actions/upload-artifact by @Ray\n[build][CI] REVIEWED: CodeQL minor tweaks to avoid some warnings by @Ray\n[build][CI] REVIEWED: Update linux_examples.yml by @Ray\n[build][CI] REVIEWED: Update linux.yml by @Ray\n[build][CI] REVIEWED: Update webassembly.yml by @Ray\n[build][CI] REVIEWED: Update cmake.yml by @Ray\n[build][CI] REVIEWED: Update codeql.yml, exclude src/external files by @Ray\n[bindings] ADDED: raylib-APL (#4253) by @Brian E\n[bindings] ADDED: raylib-bqn, moved rayed-bqn (#4331) by @Brian E\n[bindings] ADDED: brainfuck binding (#4169) by @_Tradam\n[bindings] ADDED: raylib-zig-bindings (#4004) by @Lionel Briand\n[bindings] ADDED: Raylib-CSharp wrapper (#3963) by @MrScautHD\n[bindings] ADDED: COBOL binding (#3661) by @glowiak\n[bindings] ADDED: raylib-beef binding (#3640) by @Braedon Lewis\n[bindings] ADDED: Raylib-CSharp-Vinculum (#3571) by @Danil\n[bindings] REVIEWED: Remove broken-link bindings #3899 by @Ray\n[bindings] REVIEWED: Updated some versions on BINDINGS.md by @Ray\n[bindings] REVIEWED: Removed umaintained repos (#3999) by @Antonis Geralis\n[bindings] REDESIGNED: Add binding link to name, instead of separate column (#3995) by @Carmine Pietroluongo\n[bindings] UPDATED: h-raylib (#4378) by @Anand Swaroop\n[bindings] UPDATED: Raylib.lean, to master version (#4337) by @Daniil Kisel\n[bindings] UPDATED: raybit, to latest master (#4311) by @Alex\n[bindings] UPDATED: dray binding (#4163) by @red thing\n[bindings] UPDATED: Julia (#4068) by @ShalokShalom\n[bindings] UPDATED: nim to latest master (#3999) by @Antonis Geralis\n[bindings] UPDATED: raylib-rs (#3991) by @IoIxD\n[bindings] UPDATED: raylib-zig version (#3902) by @Nikolas\n[bindings] UPDATED: raylib-odin (#3868) by @joyousblunder\n[bindings] UPDATED: Raylib VAPI (#3829) by @Alex Macafee\n[bindings] UPDATED: Raylib-cs (#3774) by @Brandon Baker\n[bindings] UPDATED: h-raylib (#3739) by @Anand Swaroop\n[bindings] UPDATED: OCaml bindings version (#3730) by @Tobias Mock\n[bindings] UPDATED: Raylib.c3 (#3689) by @Kenta\n[bindings] UPDATED: ray-cyber to 5.0 (#3654) by @fubark\n[bindings] UPDATED: raylib-freebasic binding (#3591) by @WIITD\n[bindings] UPDATED: SmallBASIC (#3562) by @Chris Warren-Smith\n[bindings] UPDATED: Python raylib-py v5.0.0beta1 (#3557) by @Jorge A. Gomes\n[bindings] UPDATED: raylib-d binding (#3561) by @Steven Schveighoffer\n[bindings] UPDATED: Janet (#3553) by @Dmitry Matveyev\n[bindings] UPDATED: Raylib.nelua (#3552) by @Auz\n[bindings] UPDATED: raylib-cpp to 5.0 (#3551) by @Rob Loach\n[bindings] UPDATED: Pascal binding (#3548) by @Gunko Vadim\n[external] UPDATED: stb_truetype.h to latest version by @Ray\n[external] UPDATED: stb_image_resize2.h to latest version by @Ray\n[external] UPDATED: stb_image.h to latest version by @Ray\n[external] UPDATED: qoa.h to latest version by @Ray\n[external] UPDATED: dr_wav.h to latest version by @Ray\n[external] UPDATED: dr_mp3.h to latest version by @Ray\n[external] UPDATED: cgltf.h to latest version by @Ray\n[external] REVIEWED: rl_gputex, correctly load mipmaps from DDS files (#4399) by @Nikolas\n[external] REVIEWED: stb_image_resize2, dix vld1q_f16 undeclared in arm (#4309) by @masnm\n[external] REVIEWED: miniaudio, fix library and Makefile for NetBSD (#4212) by @NishiOwO\n[external] REVIEWED: raygui, update to latest version 4.5-dev (#4238) by @Anthony Carbajal\n[external] REVIEWED: jar_xml, replace unicode characters by ascii characters to avoid warning in MSVC (#4196) by @Rico P\n[external] REVIEWED: vox_loader, normals and new voxels shader (#3843) by @johann nadalutti\n[parser] REVIEWED: README.md, to mirror fixed help text (#4336) by @Daniil Kisel\n[parser] REVIEWED: Fix seg fault with long comment lines (#4306) by @Chris Warren-Smith\n[parser] REVIEWED: Don't crash for files that don't end in newlines (#3981) by @Peter0x44\n[parser] REVIEWED: Issues in usage example help text (#4084) by @Peter0x44\n[parser] REVIEWED: Fix parsing of empty parentheses (#3974) by @Filyus\n[parser] REVIEWED: Address parsing issue when generating XML #3893 by @Ray\n[parser] REVIEWED: `MemoryCopy()`, prevent buffer overflow by replacing hard-coded arguments (#4011) by @avx0\n[misc] ADDED: Create logo/raylib.icns by @Ray\n[misc] ADDED: Create logo/raylib_1024x1024.png by @Ray\n[misc] ADDED: Default vertex/fragment shader for OpenGL ES 3.0 (#4178) by @Lázaro Albuquerque\n[misc] REVIEWED: README.md, fix Reddit badge (#4136) by @Ninad Sachania\n[misc] REVIEWED: .gitignore, ignore compiled dll binaries (#3628) by @2Bear\n[misc] REVIEWED: Fix undesired scrollbars on web shell files (#4104) by @jspast\n[misc] REVIEWED: Made comments on raylib.h match comments in rcamera.h (#3942) by @Tomas Fabrizio Orsi\n[misc] REVIEWED: Make raylib/raygui work better on touchscreen (#3728) by @Hongyu Ouyang\n[misc] REVIEWED: Update config.h by @Ray\n\n-------------------------------------------------------------------------\nRelease:     raylib 5.0 - 10th Anniversary Edition (18 November 2023)\n-------------------------------------------------------------------------\nKEY CHANGES:\n - REDESIGNED: rcore module platform-split, by @ubkp, @michaelfiber, @Bigfoot71, @raysan5\n - ADDED: New platform backend supported: SDL\n - ADDED: New platform backend supported: Nintendo Switch (closed source)\n - ADDED: New Splines drawing and evaluation API\n - ADDED: New pseudo-random numbers generator: rprand\n - ADDED: Automation Events System API\n - UPDATED: raygui 4.0: New version of this immediate-mode gui system for tools development with raylib\n\nDetailed changes:\n[rcore] ADDED: RAYLIB_VERSION_* values to raylib.h (#2856) by @RobLoach\n[rcore] ADDED: IsKeyPressedRepeat() on PLATFORM_DESKTOP (#3245) by @actondev\n[rcore] ADDED: SetWindowTitle() for PLATFORM_WEB (#3222) by @VitusVeit\n[rcore] ADDED: FLAG_WINDOW_RESIZABLE for web (#3305) by @Peter0x44\n[rcore] ADDED: SetWindowMaxSize() for desktop and web (#3309) by @ubkp\n[rcore] ADDED: SetMouseCursor() for PLATFORM_WEB (#3414) by @BeardedBread\n[rcore] ADDED: LoadRandomSequence()/UnloadRandomSequence() by @raysan5\n[rcore] REMOVED: PLATFORM_RPI (#3232) by @michaelfiber\n[rcore] REVIEWED: GetFileLength(), added comment (#3262) by @raysan5\n[rcore] REVIEWED: Default shaders precission issue on PLATFORM_WEB (#3261) by @branc116\n[rcore] REVIEWED: IsKey*() key validation checks (#3256) by @n77y\n[rcore] REVIEWED: SetClipboardText() for PLATFORM_WEB (#3257) by @ubkp\n[rcore] REVIEWED: Check if Ctrl modifier is among the currently set modifiers (#3230) by @mohad12211\n[rcore] REVIEWED: Android app black screen when reopening by @Bigfoot71\n[rcore] REVIEWED: Warnings when casting int to floats (#3218) by @JeffM2501\n[rcore] REVIEWED: GetCurrentMonitor() detection inconsistency issue (#3215) by @ubkp\n[rcore] REVIEWED: SetWindowMonitor() to no longer force fullscreen (#3209) by @ubkp\n[rcore] REVIEWED: Fix mouse wheel not working in PLATFORM_RPI or PLATFORM_DRM (#3193) by @ubkp\n[rcore] REVIEWED: GetMonitorName() description (#3184) (#3189) by @danilwhale\n[rcore] REVIEWED: BeginScissorMode(), identify rendering to texture (#3510) by @gulrak\n[rcore] REVIEWED: Window flags order (#3114) by @lesleyrs\n[rcore] REVIEWED: Full movement for right analog stick (#3095) by @PixelPhobicGames\n[rcore] REVIEWED: Fix Android app freeze after calling CloseWindow() (#3067) by @Bigfoot71\n[rcore] REVIEWED: Lazy loading of default font used on image drawing (no InitWindow) by @raysan5\n[rcore] REVIEWED: Minor tweaks to raylib events automation system @raysan5\n[rcore] REVIEWED: GetCurrentMonitor() bugfix (#3058) by @hamyyy\n[rcore] REVIEWED: Update CORE.Input.Touch.pointCount (#3024) by @raysan5\n[rcore] REVIEWED: Mouse offset and scaling must be considered also on web!\n[rcore] REVIEWED: CompressData(), possible stack overflow\n[rcore] REVIEWED: GetWorldToScreenEx() (#3351) by @Brian-ED\n[rcore] REVIEWED: Fix GetMouseDelta() issue for Android (#3404) by @Bigfoot71\n[rcore] REVIEWED: GetFPS(), reset FPS averages when window is inited (#3445) by @JeffM2501\n[rcore] REVIEWED: GetCurrentMonitor(), check window center position by @M374LX\n[rcore] REVIEWED: GetRender*() issue on macOS highDPI (#3367) by @raysan5\n[rcore] REVIEWED: ScanDirectoryFiles*(), paths building slashes sides (#3507)\n[rlgl] ADDED: Experimental support for OpenGL ES 3.0 by @raysan5\n[rlgl] ADDED: Support 16-Bit HDR textures (#3220) by @Not-Nik\n[rlgl] ADDED: rlEnablePointMode() (#3490) by @JettMonstersGoBoom\n[rlgl] ADDED: rlBlitFramebuffer(), required for deferred render\n[rlgl] REVIEWED: LoadModel(), removed cube fallback mechanism (#3459)\n[rlgl] REVIEWED: Improved support for ES3/WebGL2 (#3107) by @chemaguerra\n[rlgl] REVIEWED: OpenGL 2.1 half floats support as part of an extension by @Not-Nik\n[rlgl] REVIEWED: Avoid shader attribute not found log by @raysan5\n[rlgl] REVIEWED: Avoid tracelog about not found uniforms (#3003) by @raysan5\n[rlgl] REVIEWED: rLoadTexture() UBSAN complaints #1891 (#3321) by @Codom\n[rlgl] REVIEWED: glInternalFormat as unsigned int\n[rlgl] REVIEWED: OpenGL ES 3.0 support\n[rshapes] ADDED: Spline drawing functions by @raysan5\n[rshapes] ADDED: GetSplinePoint*() functions for spline evaluation by @raysan5\n[rshapes] ADDED: DrawCircleLinesV() for consistency (#3452) by @Peter0x44\n[rshapes] REVIEWED: DrawSplineCatmullRom() by @raysan5\n[rshapes] REVIEWED: Minor fix in DrawLineBezier* (#3006) by @eternalStudent\n[rshapes] REVIEWED: GetCollisionRec(), more performant (#3052) by @manuel5975p\n[rshapes] REVIEWED: Fix off-by-one error in CheckCollisionPointRec() (#3022) by @dbechrd\n[rtextures] ADDED: Basic SVG loading support (#2738) by @bXi\n[rtextures] ADDED: Support 16-Bit HDR textures (#3220) by @Not-Nik\n[rtextures] ADDED: ExportImageToMemory() by @raysan5\n[rtextures] ADDED: ImageRotate() (#3078) by @danemadsen\n[rtextures] ADDED: GenImageGradientSquare() (#3077) by @danemadsen\n[rtextures] ADDED: GenImageLinearGradient() by @danemadsen\n[rtextures] REMOVED: GenImageGradientH() and GenImageGradientV() by @danemadsen\n[rtextures] REVIEWED: LoadImageSvg() by @raysan5\n[rtextures] REVIEWED: Uninitialized thread-locals in stbi (#3282) (#3283) by @jbarthelmes\n[rtextures] REVIEWED: ImageDrawRectangleRec(), validate drawing inside bounds by @JeffM2501\n[rtextures] REVIEWED: LoadTextureCubemap() for manual layouts (#3204) by @Not-Nik\n[rtextures] REVIEWED: Optimization of ImageDrawRectangleRec() (#3185) by @smalltimewizard\n[rtextures] REVIEWED: ImageRotate() formatting by @raysan5\n[rtextures] REVIEWED: GenImagePerlinNoise(), clamp values (#3071) by @raysan5\n[rtextures] REVIEWED: Packing logic error in GenImageFontAtlas() (#2979) by @hanaxar\n[rtextures] REVIEWED: Calculate exact image size in GenImageFontAtlas() (#2963) by @hanaxar\n[rtextures] REVIEWED: ImageDrawRectangleRec() (#3027) by @raysan5\n[rtextures] REVIEWED: ImageDraw() source clipping when drawing beyond top left (#3306) by @RobLoach\n[rtextures] REVIEWED: UnloadRenderTexture(), additional checks\n[rtextures] REVIEWED: Fixed compressed DDS texture loading issues (#3483) by @JaanDev\n[rtext] ADDED: Font altas white rectangle and flag SUPPORT_FONT_ATLAS_WHITE_REC by @raysan5\n[rtext] ADDED: SetTextLineSpacing() to define line breaks text drawing spacing by @raysan5\n[rtext] RENAMED: LoadFont*() parameter names for consistency and coherence by @raysan5\n[rtext] REVIEWED: GetCodepointCount(), ignore unused return value of GetCodepointNext by @ashn-dot-dev\n[rtext] REVIEWED: TextFormat() warn user if buffer overflow occured (#3399) by @Murlocohol\n[rtext] REVIEWED: TextFormat(), added \"...\" for truncation (#3366) by @raysan5\n[rtext] REVIEWED: GetGlyphIndex() (#3000) by @raysan5\n[rtext] REVIEWED: GetCodepointNext() to return default value by @chocolate42\n[rtext] REVIEWED: TextToPascal() issue when first char is uppercase\n[rmodels] ADDED: ModelAnimation.name field, initially with GLTF animation names by @alfredbaudisch\n[rmodels] REDESIGNED: LoadOBJ(), avoid mesh splitting by materials, fix (#3398) by @raysan5\n[rmodels] REVIEWED: Support .vox model files version 200 (#3097) by @Bigfoot71\n[rmodels] REVIEWED: Materials loading (#3126) @raysan5\n[rmodels] REVIEWED: DrawBillboardPro() to allow source of negative size (#3197) by @bohonghuang\n[rmodels] REVIEWED: glTF loading segfault in animNormals memcpy by @charles-l\n[rmodels] REVIEWED: LoadModelAnimationsGLTF(), free fileData after use (#3065) by @crynux\n[rmodels] REVIEWED: GenMeshCubicmap(), correction of values (#3032) by @Bigfoot71\n[rmodels] REVIEWED: DrawMesh() to avoid UBSAN complaining (#1891)\n[rmodels] REVIEWED: GenMeshPlane() when resX != resZ (#3425) by @neyrox, @s-yablonskiy\n[rmodels] REVIEWED: GetModelBoundingBox() (#3485)\n[raudio] ADDED: LoadSoundAlias() by @JeffM2501\n[raudio] ADDED: Missing structure on standalone mode (#3160) by @raysan5\n[raudio] ADDED: GetMasterVolume() (#3434) by @rexim\n[raudio] REVIEWED: Comments about sample format to AttachAudioStreamProcessor() (#3188) by @AlbertoGP\n[raudio] REVIEWED: Documented buffer format for audio processors (#3186) by @AlbertoGP\n[raudio] REVIEWED: ExportWaveAsCode() file saving by @RadsammyT\n[raudio] REVIEWED: Fix warning on discarded const qualifier (#2967) by @RobLoach\n[raudio] REVIEWED: Move mutex initialization before ma_device_start() (#3325) by @Bigfoot71\n[raudio] REVIEWED: Fix UpdateSound() parameter name (#3405) by @KislyjKisel\n[raudio] REVIEWED: Fix QOA seeking (#3494) by @veins1\n[rcamera] REVIEWED: File-macros for consistency (#3161) by @raysan5\n[rcamera] REVIEWED: Support analog stick camera controls (#3066) by @PixelPhobicGames\n[rcamera] REVIEWED: CameraMoveToTarget(), ensure distance is greater than 0 (#3031) by @kolunmi\n[rcamera] REVIEWED: Exposing rcamera functions to the dll (#3355) by @JeffM2501\n[raymath] ADDED: Vector3Projection() and Vector3Rejection() (#3263) by @Dial0\n[raymath] ADDED: EPSILON macro to each function requiring it (#3330) by @Brian-ED\n[raymath] REVIEWED: Usage of 'sinf()' and 'cosf()' to be correct (#3181) by @RokasPuzonas\n[raymath] REVIEWED: Slightly optimized Vector3Normalize() (#2982) by @RicoP\n[raymath] REVIEWED: Comment to clarify raymath semantics by @raysan5\n[raymath] REVIEWED: Comment about Matrix conventions by @raysan5\n[raymath] REVIEWED: Vector2Angle() and Vector2LineAngle() (#3396) by @Murlocohol\n[rgestures] REVIEWED: Optimize and simplify the gesture system (#3190) by @ubkp\n[rgestures] REVIEWED: GESTURE_DRAG and GESTURE_SWIPE_* issues (mostly) for web (#3183) by @ubkp\n[rgestures] REVIEWED: Touch pointCount for web (#3163) by @ubkp\n[rgestures] REVIEWED: IsGestureDetected() parameter type\n[utils] ADDED: Security checks to file reading (memory allocations) by @raysan5\n[utils] REVIEWED: LoadFileData() potential issues with dataSize\n[examples] ADDED: shaders_lightmap (#3043) by @nullstare\n[examples] ADDED: core_2d_camera_split_screen (#3298) by @gabrielssanches\n[examples] ADDED: LoadSoundAlias() usage example (#3223) by @JeffM2501\n[examples] ADDED: textures_tiling (#3353) by @luis605\n[examples] ADDED: shader_deferred_render (#3496) by @27justin\n[examples] RENAMED: 2d_camera examples for consistency\n[examples] REVIEWED: Text examples SetTextLineSpacing() to multiline examples by @raysan5\n[examples] REVIEWED: examples/shapes/shapes_collision_area.c help instructions (#3279) by @asdqwe\n[examples] REVIEWED: examples/shaders/shaders_texture_outline.c help instructions (#3278) by @asdqwe\n[examples] REVIEWED: examples/others/easings_testbed.c help instructions and small twe…  by @asdqwe\n[examples] REVIEWED: example/audio/audio_module_player.c help instructions and small b…  by @asdqwe\n[examples] REVIEWED: example/models/models_loading_m3d.c controls (#3269) by @asdqwe\n[examples] REVIEWED: example/models/models_loading_gltf.c controls (#3268) by @asdqwe\n[examples] REVIEWED: text_unicode.c example crashing (#3250) by @ubkp\n[examples] REVIEWED: rlgl_standalone.c compilation issue (#3242) by @ubkp\n[examples] REVIEWED: core_input_gestures for Web (#3172) by @ubkp\n[examples] REVIEWED: core_input_gamepad (#3110) by @iacore\n[examples] REVIEWED: examples using raygui to raygui 4.0 by @raysan5\n[examples] REVIEWED: Julia set shader example (#3467) by @joshcol9232\n[build] ADDED: CMake option for SUPPORT_CUSTOM_FRAME_CONTROL (#3221) by @ubkp\n[build] ADDED: New BORDERLESS_WINDOWED_MODE for PLATFORM_DESKTOP (#3216) by @ubkp\n[build] ADDED: New examples to VS2022 solution by @raysan5\n[build] REVIEWED: Updated Makefile and Makefile.Web, include new examples\n[build] REVIEWED: Fix CMake extraneous -lglfw (#3266) by @iacore\n[build] REVIEWED: Add missing cmake options (#3267) by @asdqwe\n[build] REVIEWED: Match CMakeOptions.txt options default values (#3258) by @asdqwe\n[build] REVIEWED: Add build.zig options for individual modules (#3254) by @actondev\n[build] REVIEWED: build.zig to work with cross-compiling (#3225) by @yujiri8\n[build] REVIEWED: Makefile build on PLATFORM_ANDROID, soname (#3211) by @ndytts\n[build] REVIEWED: src/Makefile, fix misleading indentation (#3202) by @ashn-dot-dev\n[build] REVIEWED: build.zig: Support for building with PLAFORM_DRM (#3191) by @jakubvf\n[build] REVIEWED: Update CMakeOptions.txt by @raysan5\n[build] REVIEWED: fix: cmake option \"OPENGL_VERSION\" doesn't work (#3170) by @royqh1979\n[build] REVIEWED: Add error if raylib.h is included in a C++98 program (#3093) by @Peter0x44\n[build] REVIEWED: Cross compilation for PLATFORM_DRM (#3091) by @TheLastBilly\n[build] REVIEWED: build.zigm fixed cross-compiling from Linux (#3090)by @yujiri8\n[build] REVIEWED: Enhanced cmake part for OpenBSD (#3086) by @rayit\n[build] REVIEWED: Fixed compile on OpenBSD (#3085)by @rayit\n[build] REVIEWED: CMake project example: fix a couple of typos (#3014) by @benjamin-thomas\n[build] REVIEWED: Fix warnings in raylib for MSVC (#3004) by @JeffM2501\n[build] REVIEWED: Update cmake example project (#3062) by @lesleyrs\n[build] REVIEWED: Update build.zig be be able to build with current zig master (#3064) by @ryupold\n[build] REVIEWED: VSCode project template (#3048) by @Shoozza\n[build] REVIEWED: Fixed broken build.zig files. Now works with latest stable compiler (… by @Gamer-Kold\n[build] REVIEWED: Fix missing symbol when rglfw.c on BSD platforms (#2968) by @Koromix\n[build] REVIEWED: Update Makefile comment to indicate arm64 as a supported Linux deskto…  @ashn-dot-dev\n[build] REVIEWED: Update Makefile : clean raygui.c & physac.c (#3296) by @SuperUserNameMan\n[build] REVIEWED: Update webassembly.yml and linux.yml\n[build] REVIEWED: Update zig build system to zig version 0.11.0 (#3393) by @purple4pur\n[build] REVIEWED: Fix for latest zig master (#3037) by @star-tek-mb\n[build] REVIEWED: Examples Makefile to use Makefile.Web when building for web (#3449) by @keithstellyes\n[build] REVIEWED: build.zig updates for 0.11.0 release. (#3501) by @cabarger\n[build] REVIEWED: Support OpenGL ES 3.0 building on Web platform\n[build] REVIEWED: Fix warnings in Visual Studio (#3512) by @JeffM2501\n[build] REVIEWED: OpenGL ES 3.0 flags on CMakeOptions (#3514) by @awfulcooking\n[bindings] ADDED: fortran-raylib\n[bindings] ADDED: raylib-raku to bindings (#3299) by @vushu\n[bindings] ADDED: claw-raylib to BINDINGS.md (#3310) by @bohonghuang\n[bindings] ADDED: vaiorabbit/raylib-bindings (#3318) by @wilsonsilva\n[bindings] ADDED: TurboRaylib (#3317) by @turborium\n[bindings] ADDED: raylib-ffi to bindings list (#3164) by @ewpratten\n[bindings] ADDED: raylib-pkpy-bindings (#3361) by @blueloveTH\n[bindings] ADDED: Raylib.lean to BINDINGS.md (#3409) by @KislyjKisel\n[bindings] UPDATED: BINDINGS.md (#3217) by @joseph-montanez\n[bindings] UPDATED: BINDINGS.md to include rayjs (#3212) by @mode777\n[bindings] UPDATED: latest h-raylib version (#3166) by @Anut-py\n[bindings] UPDATED: bindbd-raylib3 to raylib 4.5 (#3157) by @o3o\n[bindings] UPDATED: Janet bindings supported version update (#3083)by @archydragon\n[bindings] UPDATED: BINDINGS.md (raylib-py -> 4.5) (#2992) by @overdev\n[bindings] UPDATED: BINDINGS.md (raylib-lua -> 4.5) (#2989) by @TSnake41\n[bindings] UPDATED: raylib-d binding version to 4.5 (#2988) by @schveiguy\n[bindings] UPDATED: raylib-freebasic to 4.5 (#2986) by @WIITD\n[bindings] UPDATED: BINDINGS.md (#2983) by @jarroddavis68\n[bindings] UPDATED: BINDINGS.md for raylib Odin 4.5 (#2981) by @gingerBill\n[bindings] UPDATED: BINDINGS.md (#2980) by @GuvaCode\n[bindings] UPDATED: BINDINGS.md (#3002) by @fubark\n[bindings] UPDATED: BINDINGS.md (#3053) by @JupiterRider\n[bindings] UPDATED: BINDINGS.md (#3050) by @Its-Kenta\n[bindings] UPDATED: CL bindings version (#3049) by @shelvick\n[bindings] UPDATED: BINDINGS.md (#3026) by @ChrisDill\n[bindings] UPDATED: BINDINGS.md (#3023) by @sDos280\n[bindings] UPDATED: BINDINGS.md (#3017) by @Soutaisei\n[bindings] UPDATED: Various versions to 4.5 (#2974) by @RobLoach\n[bindings] UPDATED: raylib.zig version to 4.5 (#2971) by @ryupold\n[bindings] UPDATED: h-raylib version (#2970) by @Anut-py\n[bindings] UPDATED: Factor's raylib binding to v4.5 (#3350) by @WraithGlade\n[bindings] UPDATED: raylib-ocaml bindings to 4.5 version (#3322) by @tjammer\n[bindings] UPDATED: Jaylib binding (#3508) by @glowiak\n[external] UPDATED: sdefl and sinfl DEFLATE compression libraries by @raysan5\n[external] UPDATED: miniaudio v0.11.12 --> v0.11.19 by @raysan5\n[external] UPDATED: rl_gputex.h compressed images loading library by @raysan5\n[external] UPDATED: Replaced stb_image_resize.c by stb_image_resize2.h (#3403) by @BabakSamimi\n[external] UPDATED: qoi and qoa libraries\n[external] UPDATED: stb libraries (required ones)\n[external] UPDATED: cgltf and m3d libraries\n[external] REVIEWED: msf_gif.h, some warnings\n[external] REVIEWED: sinfl external library to avoid ASAN complaints (#3349) by @raysan5\n[misc] ADDED: New task point to issue template about checking the wiki (#3169) by @ubkp\n[misc] ADDED: CodeQL for static code analysis (#3476) by @b4yuan\n[misc] REVIEWED: Update FAQ.md by @raysan5\n[misc] REVIEWED: Potential code issues reported by CodeQL (#3476)\n[misc] REVIEWED: Fix a link in the FAQ (#3082)by @jasonliang-dev\n[misc] REVIEWED: New file formats to FAQ (#3079) by @Luramoth\n[misc] REVIEWED: Make assets loading extension case insensitive #3008 by @raysan5\n[misc] REVIEWED: Updated web shells open-graph info by @raysan5\n\n-------------------------------------------------------------------------\nRelease:     raylib 4.5 (18 March 2023)\n-------------------------------------------------------------------------\nKEY CHANGES:\n - ADDED: Improved ANGLE support on Desktop platforms\n - ADDED: rcamera module, simpler and more extendable\n - ADDED: Support for M3D models and M3D/GLTF animations\n - ADDED: Support QOA audio format (import/export)\n - ADDED: rl_gputex module for compressed textures loading\n - REDESIGNED: rlgl module for automatic render-batch limits checking\n - REDESIGNED: rshapes module to minimize the rlgl dependency\n\nDetailed changes:\n[core] ADDED: RAYLIB_VERSION_* values to raylib.h (#2856) by @RobLoach\n[core] ADDED: Basic gamepad support for Android (#2709) by @deniska\n[core] ADDED: Support CAPS/NUM lock keys registering if locked\n[core] ADDED: _GNU_SOURCE define on Linux (#2729)\n[core] ADDED: SetWindowIcons() to set multiple icon image sizes\n[core] `WARNING`: RENAMED: Exported raylib version symbol to raylib_version #2671\n[core] REMOVED: Touch points on touch up events on Android (#2711) by @deniska\n[core] REVIEWED: Window position setup on InitWindow() (#2732) by @RandomErrorMessage\n[core] REVIEWED: Touchscreen input related functions on Android (#2702) by @deniska\n[core] REVIEWED: Viewport scaling on Android after context rebind (#2703) by @deniska\n[core] REVIEWED: ScanDirectoryFilesRecursively() (#2704)\n[core] REVIEWED: Gamepad mappings with latest gamecontrollerdb (#2725)\n[core] REVIEWED: Monitor order check on app initialization\n[core] REVIEWED: Application monitor when opening (#2728, #2731) by @RandomErrorMessage\n[core] REVIEWED: Gestures module to use GetTime() if available (#2733) by @RobLoach\n[core] REVIEWED: Resolve GLFW3 some symbols re-definition of windows.h in glfw3native (#2643) by @daipom\n[core] REVIEWED: OpenURL(), string buffer too short sometimes\n[core] REVIEWED: GetRandomValue() range limit warning (#2800) by @Pere001\n[core] REVIEWED: UnloadDirectoryFiles()\n[core] REVIEWED: GetKeyPressed(), out of range issue (#2814) by @daipom\n[core] REVIEWED: GetTime(), renamed variable 'time' to 'nanoSeconds' (#2816) by @jtainer\n[core] REVIEWED: LoadShaderFromMemory(), issue with shader linkage\n[core] REVIEWED: Avoid possible gamepad index as -1 (#2839)\n[core] REVIEWED: SetShaderValue*(), avoid setup uniforms for invalid locations\n[core] REVIEWED: GetClipboardText() on PLATFORM_WEB, permissions issues\n[core] REVIEWED: Initial window position for display-sized fullscreen (#2742) by @daipom\n[core] REVIEWED: Sticky touches input (#2857) by @ImazighenGhost\n[core] REVIEWED: Enable GetWindowHandle() on macOS (#2915) by @Not-Nik\n[core] REVIEWED: Window position always inits centered in current monitor\n[core] REVIEWED: IsWindowFocused() to consider Android App state (#2935)\n[core] REVIEWED: GetMonitorWidth() and GetMonitorHeight() (#2934)\n[core] REVIEWED: GetWindowHandle() to return Linux window (#2938)\n[core] REVIEWED: WindowDropCallback(), additional security check (#2943)\n[core] REVIEWED: Security checks for emscripten_run_script() (#2954)\n[utils] REVIEWED: TraceLog() message size limit overflow\n[rcamera] REDESIGNED: New implementation from scratch (#2563) by @Crydsch\n[rcamera] REVIEWED: Make orbital camera work as expected (#2926) by @JeffM2501\n[rcamera] REVIEWED: Multiple reviews on the new implementation\n[rcamera] ADDED: UpdateCameraPro(), supporting custom user inputs\n[rlgl] ADDED: OpenGL ES 2.0 support on PLATFORM_DESKTOP (#2840) by @wtnbgo\n[rlgl] ADDED: Separate blending modes for color and alpha, BLEND_CUSTOM_SEPARATE (#2741)\n[rlgl] ADDED: rlSetBlendFactorsSeparate and custom blend mode modification checks (#2741) by @pure01fx\n[rlgl] ADDED: RL_TEXTURE_MIPMAP_BIAS_RATIO support to `rlTextureParameters()` for OpenGL 3.3 #2674\n[rlgl] ADDED: rlCubemapParameters() (#2862) by @GithubPrankster\n[rlgl] ADDED: rlSetCullFace() (#2797) by @jtainer\n[rlgl] REMOVED: Mipmaps software generation for OpenGL 1.1\n[rlgl] REVIEWED: Check for extensions before enabling them (#2706) by @Not-Nik\n[rlgl] REVIEWED: SSBO usage to avoid long long data types\n[rlgl] REVIEWED: Enable DXT compression on __APPLE__ targets (#2694) by @Not-Nik\n[rlgl] REVIEWED: enums exposed and description comments\n[rlgl] REVIEWED: rlBindImageTexture(), correct data types (#2808) by @planetis-m\n[rlgl] REVIEWED: rlMultMatrixf(), use const pointer (#2807) by @planetis-m\n[rlgl] REVIEWED: Expose OpenGL blending mode factors and functions/equations\n[rlgl] REVIEWED: rLoadTextureDepth(), issue with depth textures on WebGL (#2824)\n[rlgl] REVIEWED: rlUnloadFramebuffer() (#2937)\n[raymath] ADDED: Vector2LineAngle() (#2887)\n[raymath] REVIEWED: Vector2Angle() (#2829, #2832) by @AlxHnr, @planetis-m\n[shapes] ADDED: CheckCollisionPointPoly() (#2685) by @acejacek\n[shapes] REVIEWED: DrawPixel*(), use RL_QUADS/RL_TRIANGLES (#2750) by @hatkidchan\n[shapes] REVIEWED: DrawLineBezier*(), fix bezier line breaking (#2735, #2767) by @nobytesgiven\n[textures] ADDED: ColorBrightness()\n[textures] ADDED: ColorTint()\n[textures] ADDED: ColorContrast()\n[textures] ADDED: Support for PNM images (.ppm, .pgm)\n[textures] ADDED: GenImagePerlinNoise()\n[textures] ADDED: GenImageText(), generate grayscale image from text byte data\n[textures] ADDED: ImageDrawCircleLines(), ImageDrawCircleLinesV() (#2713) by @RobLoach\n[textures] ADDED: ImageBlurGaussian() (#2770) by @nobytesgiven\n[textures] REVIEWED: Image fileformat support: PIC, PNM\n[textures] REVIEWED: ImageTextEx() and ImageDrawTextEx() scaling (#2756) by @hatkidchan\n[textures] `WARNING`: REMOVED: DrawTextureQuad()\n[textures] `WARNING`: REMOVED: DrawTexturePoly(), function moved to example: `textures_polygon`\n[textures] `WARNING`: REMOVED: DrawTextureTiled(),function implementation moved to the textures_tiled.c\n[text] ADDED: GetCodepointPrevious()\n[text] ADDED: UnloadUTF8(), aligned with LoadUTF8()\n[text] `WARNING`: RENAMED: TextCodepointsToUTF8() to LoadUTF8()\n[text] `WARNING`: RENAMED: GetCodepoint() -> GetCodepointNext()\n[text] REDESIGNED: GetCodepointNext()\n[text] REVIEWED: MeasureTextEx(), avoid crash on bad data\n[text] REVIEWED: UnloadFontData(), avoid crash on invalid font data\n[models] ADDED: Support M3D model file format (meshes and materials) (#2648) by @bztsrc\n[models] ADDED: Support for M3D animations (#2648) by @bztsrc\n[models] ADDED: GLTF animation support (#2844) by @charles-l\n[models] ADDED: DrawCapsule() and DrawCapsuleWires() (#2761) by @IanBand\n[models] ADDED: LoadMaterials(), MTL files loading, same code as OBJ loader (#2872) by @JeffM2501\n[models] `WARNING`: REMOVED: UnloadModelKeepMeshes()\n[models] `WARNING`: REMOVED: DrawCubeTexture(), DrawCubeTextureRec(), functions moved to new example: `models_draw_cube_texture`\n[models] REVIEWED: DrawMesh(), using SHADER_LOC_COLOR_SPECULAR as a material map (#2908) by @haved\n[models] REVIEWED: LoadM3D() vertex color support (#2878) by @GithubPrankster, @bztsrc\n[models] REVIEWED: GenMeshHeightmap() (#2716)\n[models] REVIEWED: LoadIQM() (#2676)\n[models] REVIEWED: Simplify .vox signature check (#2752) by @CrezyDud\n[models] REVIEWED: LoadIQM(), support bone names loading if available (#2882) by @PencilAmazing\n[models] REVIEWED: GenMeshTangents(), avoid crash on missing texcoords data (#2927)\n[audio] ADDED: Full support for QOA audio file format\n[audio] ADDED: Mixed audio processor (#2929) by @hatkidchan\n[audio] ADDED: IsWaveReady()`, IsSoundReady(), IsMusicReady() (#2892) by @RobLoach\n[audio] `WARNING`: REMOVED: Multichannel audio API: PlaySoundMulti(), StopSoundMulti()\n[audio] REVIEWED: Clear PCM buffer state when closing audio device (#2736) by @veins1\n[audio] REVIEWED: Android backend selected (#2118, #2875) by @planetis-m\n[audio] REVIEWED: Change default threading model for COM objects in miniaudio\n[multi] ADDED: IsShaderReady(), IsImageReady(), IsFontReady() (#2892) by @RobLoach\n[multi] ADDED: IsModelReady(), IsMaterialReady(), IsTextureReady(), IsRenderTextureReady() (#2895) by @RobLoach\n[multi] REVIEWED: Multiple code/comment typos by @sDos280\n[multi] REVIEWED: Grammar mistakes and typos (#2914) by @stickM4N\n[multi] REVIEWED: Use TRACELOG() macro instead of TraceLog() in internal modules (#2881) by @RobLoach\n[examples] ADDED: textures_textured_curve (#2821) by @JeffM2501\n[examples] ADDED: models_draw_cube_texture\n[examples] ADDED: models_loading_m3d (#2648) by @bztsrc\n[examples] ADDED: shaders_write_depth (#2836) by @BugraAlptekinSari\n[examples] ADDED: shaders_hybrid_render (#2919) by @BugraAlptekinSari\n[examples] REMOVED: audio_multichannel_sound\n[examples] RENAMED: Several shaders for naming consistency (#2707)\n[examples] RENAMED: lighting_instanced.fs to lighting_instancing.fs (glsl100) (#2805) by @gtrxAC\n[examples] REVIEWED: core_custom_logging.c (#2692) by @hartmannathan\n[examples] REVIEWED: core_camera_2d_platformer (#2687) by @skylar779\n[examples] REVIEWED: core_input_gamepad.c (#2903) by @planetis-m\n[examples] REVIEWED: core_custom_frame_control\n[examples] REVIEWED: core_drop_files (#2943)\n[examples] REVIEWED: text_rectangle_bounds (#2746) by @SzieberthAdam\n[examples] REVIEWED: textures_image_processing, added gaussian blurring (#2775) by @nobytesgiven\n[examples] REVIEWED: models_billboard, highlighting rotation and draw order (#2779) by @nobytesgiven\n[examples] REVIEWED: core_loading_thread, join thread on completion (#2845) by @planetis-m\n[examples] REVIEWED: models_loading_gltf\n[examples] REVIEWED: Shader lighting.fs for GLSL120 (#2651)\n[examples] REVIEWED: text_codepoints_loading.c\n[parser] REVIEWED: raylib-parser Makefile (#2765) by @Peter0x44\n[build] ADDED: Packaging for distros with deb-based and rpm-based packages (#2877) by @KOLANICH\n[build] ADDED: Linkage library -latomic on Linux (only required for ARM32)\n[build] ADDED: Required frameworks on macOS (#2793) by @SpexGuy\n[build] ADDED: WASM support for Zig build (#2901) by @Not-Nik\n[build] ADDED: New raylib examples as VS2022 project (to raylib solution)\n[build] REVIEWED: config.h format and inconsistencies\n[build] REVIEWED: Zig build to latest master, avoid deprecated functions (#2910) by @star-tek-mb\n[build] REVIEWED: CMake project template to easily target raylib version (#2700) by @RobLoach\n[build] REVIEWED: PATH for PLATFORM_WEB target (#2647) by @futureapricot\n[build] REVIEWED: build.zig to let user decide how to set build mode and linker fixes by @InKryption\n[build] REVIEWED: Deprecation error on Android API higher than 23 (#2778) by @anggape\n[build] REVIEWED: Android x86 Architecture name (#2783) by @IsaacTCB\n[build] REVIEWED: examples/build.zig for the latest Zig version (#2786) by @RomanAkberov\n[utils] REVIEWED: ExportDataAsCode() data types (#2787) by @RGDTAB\n[build] REVIEWED: Makefile emscripten path (#2785) by @Julianiolo\n[build] REVIEWED: Several compilation warnings (for strict rules)\n[build] REVIEWED: All github workflows using deprecated actions\n[build] REVIEWED: CMake when compiling for web (#2820) by @object71\n[build] REVIEWED: DLL build on Windows (#2951) by @Skaytacium\n[build] REVIEWED: Avoid MSVC warnings in raylib project (#2871) by @JeffM2501\n[build] REVIEWED: Paths in .bat files to build examples (#2870) by @masoudd\n[build] REVIEWED: CMake, use GLVND for old cmake versions (#2826) by @simendsjo\n[build] REVIEWED: Makefile, multiple tweaks\n[build] REVIEWED: CI action: linux_examples.yml\n[build] REVIEWED: CI action: cmake.yml\n[bindings] ADDED: h-raylib (Haskell) by @Anut-py\n[bindings] ADDED: raylib-c3 (C3) by @Its-Kenta\n[bindings] ADDED: raylib-umka (Umka) by @RobLoach\n[bindings] ADDED: chez-raylib (Chez Scheme) by @Yunoinsky\n[bindings] ADDED: raylib-python-ctypes (Python) by @sDos280\n[bindings] ADDED: claylib (Common Lisp) by @shelvick\n[bindings] ADDED: raylib-vapi (Vala) by @lxmcf\n[bindings] ADDED: TurboRaylib (Object Pascal) by @turborium\n[bindings] ADDED: Kaylib (Kotlin/Native) by @Its-Kenta\n[bindings] ADDED: Raylib-Nelua (Nelua) by @Its-Kenta\n[bindings] ADDED: Cyber (Cyber) by @fubark\n[bindings] ADDED: raylib-sunder (Sunder) by @ashn-dot-dev\n[bindings] ADDED: raylib BQN (#2962) by @Brian-ED\n[misc] REVIEWED: Update external libraries to latest versions\n\n-------------------------------------------------------------------------\nRelease:     raylib 4.2 (11 August 2022)\n-------------------------------------------------------------------------\nKEY CHANGES:\n - REMOVED: extras libraries (raygui, physac, rrem, reasings, raudio.h) moved to independent separate repos\n - UPDATED: examples: Added creation and update raylib versions and assigned **DIFFICULTY LEVELS**!\n - rres 1.0: A custom resource-processing and packaging file format, including tooling and raylib integration examples\n - raygui 3.2: New version of the immediate-mode gui system for tools development with raylib\n - raylib_parser: Multiple improvements of the raylib parser to automatize bindings generation\n - ADDED: New file system API: Reviewed to be more aligned with raylib conventions and one advance function added\n - ADDED: New audio stream processors API (_experimental_): Allowing to add custom audio stream data processors using callbacks\n\nDetailed changes:\n[multi] ADDED: Frequently Asked Questions (FAQ.md)\n[multi] REVIEWED: Multiple trace log messages\n[multi] REVIEWED: Avoid some float to double promotions\n[multi] REVIEWED: Some functions input parametes that should be const\n[multi] REVIEWED: Variables initialization, all variables are initialized on declaration\n[multi] REVIEWED: Static array buffers are always re-initialized with memset()\n[multi] `WARNING`: RENAMED: Some function input parameters from \"length\" to \"size\"\n[core] ADDED: GetApplicatonDirectory() (#2256, #2285, #2290) by @JeffM2501\n[core] ADDED: raylibVersion symbol, it could be required by some bindings (#2190)\n[core] ADDED: SetWindowOpacity() (#2254) by @tusharsingh09\n[core] ADDED: GetRenderWidth() and GetRenderHeight() by @ArnaudValensi\n[core] ADDED: EnableEventWaiting() and DisableEventWaiting()\n[core] ADDED: GetFileLength()\n[core] ADDED: Modules info at initialization\n[core] ADDED: Support clipboard copy/paste on web\n[core] ADDED: Support OpenURL() on Android platform (#2396) by @futureapricot\n[core] ADDED: Support MOUSE_PASSTHROUGH (#2516)\n[core] ADDED: GetMouseWheelMoveV() (#2517) by @schveiguy\n[core] `WARNING`: REMOVED: LoadStorageValue() / SaveStorageValue(), moved to example\n[core] `WARNING`: RENAMED: GetDirectoryFiles() to LoadDirectoryFiles()\n[core] `WARNING`: RENAMED: `ClearDroppedFiles()` to `UnloadDroppedFiles()`\n[core] `WARNING`: RENAMED: GetDroppedFiles() to LoadDroppedFiles()\n[core] `WARNING`: RENAMED: `ClearDirectoryFiles()` to `UnloadDirectoryFiles()`\n[core] `WARNING`: REDESIGNED: WaitTime() argument from milliseconds to seconds (#2506) by @flashback-fx\n[core] REVIEWED: GetMonitorWidth()/GetMonitorHeight() by @gulrak\n[core] REVIEWED: GetDirectoryFiles(), maximum files allocation (#2126) by @ampers0x26\n[core] REVIEWED: Expose MAX_KEYBOARD_KEYS and MAX_MOUSE_BUTTONS (#2127)\n[core] REVIEWED: ExportMesh() (#2138)\n[core] REVIEWED: Fullscreen switch on PLATFORM_WEB\n[core] REVIEWED: GetMouseWheelMove(), fixed bug\n[core] REVIEWED: GetApplicationDirectory() on macOS (#2304)\n[core] REVIEWED: ToggleFullscreen()\n[core] REVIEWED: Initialize/reset CORE.inputs global state (#2360)\n[core] REVIEWED: MouseScrollCallback() (#2371)\n[core] REVIEWED: SwapScreenBuffers() for PLATFORM_DRM\n[core] REVIEWED: WaitTime(), fix regression causing video stuttering (#2503) by @flashback-fx\n[core] REVIEWED: Mouse device support on PLATFORM_DRM (#2381)\n[core] REVIEWED: Support OpenBSD timming functions\n[core] REVIEWED: Improved boolean definitions (#2485) by @noodlecollie\n[core] REVIEWED: TakeScreenshot(), use GetWindowScaleDPI() to calculate size in screenshot/recording (#2446) by @gulrak\n[core] REVIEWED: Remove fps requirement for drm connector selection (#2468) by @Crydsch\n[core] REVIEWED: IsFileExtension() (#2530)\n[camera] REVIEWED: Some camera improvements (#2563)\n[rlgl] ADDED: Premultiplied alpha blend mode (#2342) by @megagrump\n[rlgl] REVIEWED: VR rendering not taking render target size into account (#2424) by @FireFlyForLife\n[rlgl] REVIEWED: Set rlgl internal framebuffer (#2420)\n[rlgl] REVIEWED: rlGetCompressedFormatName()\n[rlgl] REVIEWED: Display OpenGL 4.3 capabilities with a compile flag (#2124) by @GithubPrankster\n[rlgl] REVIEWED: rlUpdateTexture()\n[rlgl] REVIEWED: Minimize buffer overflow probability\n[rlgl] REVIEWED: Fix scissor mode on macOS (#2170) by @ArnaudValensi\n[rlgl] REVIEWED: Clear SSBO buffers on loading (#2185)\n[rlgl] REVIEWED: rlLoadShaderCode(), improved shader loading code\n[rlgl] REVIEWED: Comment notes about custom blend modes (#2260) by @glorantq\n[rlgl] REVIEWED: rlGenTextureMipmaps()\n[rlgl] REVIEWED: rlTextureParameters()\n[raymath] ADDED: Wrap() (#2522) by @Tekkitslime\n[raymath] ADDED: Vector2Transform()\n[raymath] ADDED: Vector2DistanceSqr() (#2376) by @AnilBK\n[raymath] ADDED: Vector3DistanceSqr() (#2376) by @AnilBK\n[raymath] ADDED: Vector2ClampValue(), Vector3ClampValue() (#2428) by @saccharineboi\n[raymath] ADDED: Vector3RotateByAxisAngle() (#2590) by @Crydsch\n[raymath] `WARNING`: REDESIGNED: Vector2Angle() returns radians instead of degrees (#2193) by @schveiguy\n[raymath] `WARNING`: REMOVED: MatrixNormalize() (#2412)\n[raymath] REVIEWED: Fix inverse length in Vector2Normalize() (#2189) by @HarriP\n[raymath] REVIEWED: Vector2Angle() not working as expected (#2196) by @jdeokkim\n[raymath] REVIEWED: Vector2Angle() and Vector3Angle() (#2203) by @trikko\n[raymath] REVIEWED: QuaternionInvert(), code simplified (#2324) by @megagrump\n[raymath] REVIEWED: QuaternionScale() (#2419) by @tana\n[raymath] REVIEWED: Vector2Rotate(), optimized (#2340) by @jdeokkim\n[raymath] REVIEWED: QuaternionFromMatrix(), QuaternionEquals() (#2591) by @kirigirihitomi\n[raymath] REVIEWED: MatrixRotate*() (#2595, #2599) by @GoodNike\n[shapes] REVIEWED: CheckCollision*() consistency\n[shapes] REVIEWED: DrawRectanglePro(), support TRIANGLES drawing\n[textures] ADDED: Support for QOI image format\n[textures] REVIEWED: ImageColorTint(), GetImageColor(), ImageDrawRectangleRec(), optimized functions (#2429) by @AnilBK\n[textures] REVIEWED: LoadTextureFromImage(), allow texture loading with no data transfer\n[textures] REVIEWED: ImageDraw(), comment to note that f32bit is not supported (#2222)\n[textures] REVIEWED: DrawTextureNPatch(), avoid batch overflow (#2401) by @JeffM2501\n[textures] REVIEWED: DrawTextureTiled() (#2173)\n[textures] REVIEWED: GenImageCellular() (#2178)\n[textures] REVIEWED: LoadTextureCubemap() (#2223, #2224)\n[textures] REVIEWED: Export format for float 32bit\n[textures] REVIEWED: ExportImage(), support export \".jpeg\" files\n[textures] REVIEWED: ColorAlphaBlend() (#2524) by @royqh1979\n[textures] REVIEWED: ImageResize() (#2572)\n[textures] REVIEWED: ImageFromImage() (#2594) by @wiertek\n[text] ADDED: ExportFontAsCode()\n[text] ADDED: DrawTextCodepoints() (#2308) by @siddharthroy12\n[text] REVIEWED: TextIsEqual(), protect from NULLs (#2121) by @lukekras\n[text] REVIEWED: LoadFontEx(), comment to specify how to get the default character set (#2221) by @JeffM2501\n[text] REVIEWED: GenImageFontAtlas(), increase atlas size guesstimate by @megagrump\n[text] REVIEWED: GetCodepoint() (#2201)\n[text] REVIEWED: GenImageFontAtlas() (#2556)\n[text] REVIEWED: ExportFontAsCode() to use given font padding (#2525) by @TheTophatDemon\n[models] ADDED: Reference code to load bones id and weight data for animations\n[models] `WARNING`: REMOVED: GetRayCollisionModel() (#2405)\n[models] REMOVED: GenMeshBinormals()\n[models] REVIEWED: External library: vox_loader.h, 64bit issue (#2186)\n[models] REVIEWED: Material color loading when no texture material is available (#2298) by @royqh1979\n[models] REVIEWED: Fix Undefined Symbol _ftelli64 in cgltf (#2319) by @audinue\n[models] REVIEWED: LoadGLTF(), fix memory leak (#2441, #2442) by @leomonta\n[models] REVIEWED: DrawTriangle3D() batch limits check (#2489)\n[models] REVIEWED: DrawBillboardPro() (#2494)\n[models] REVIEWED: DrawMesh*() issue (#2211)\n[models] REVIEWED: ExportMesh() (#2220)\n[models] REVIEWED: GenMeshCylinder() (#2225)\n[audio] `WARNING`: ADDED: rAudioProcessor pointer to AudioStream struct (used by Sound and Music structs)\n[audio] ADDED: SetSoundPan(), SetMusicPan(), SetAudioStreamPan(), panning support (#2205) by ptarabbia\n[audio] ADDED: Audio stream input callback (#2212) by ptarabbia\n[audio] ADDED: Audio stream processors support (#2212) by ptarabbia\n[audio] REVIEWED: GetMusicTimePlayed(), incorrect value after the stream restarted for XM audio (#2092 #2215) by @ptarabbia\n[audio] REVIEWED: Turn on interpolation for XM playback (#2216) by @ptarabbia\n[audio] REVIEWED: Fix crash with delay example (#2472) by @ptarabbia\n[audio] REVIEWED: PlaySoundMulti() (#2231)\n[audio] REVIEWED: ExportWaveAsCode()\n[audio] REVIEWED: UpdateMusicStream(), reduce dynamic allocations (#2532) by @dbechrd\n[audio] REVIEWED: UpdateMusicStream() to support proper stream looping (#2579) by @veins1\n[utils] ADDED: ExportDataAsCode()\n[utils] REVIEWED: Force flush stdout after trace messages (#2465) by @nagy\n[easings] ADDED: Function descriptions (#2471) by @RobLoach\n[camera] REVIEWED: Fix free camera panning in the wrong direction (#2347) by @DavidLyhedDanielsson\n[examples] ADDED: core_window_should_close\n[examples] ADDED: core_2d_camera_mouse_zoom (#2583) by @JeffM2501\n[examples] ADDED: shapes_top_down_lights (#2199) by @JeffM2501\n[examples] ADDED: textures_fog_of_war\n[examples] ADDED: textures_gif_player\n[examples] ADDED: text_codepoints_loading\n[examples] ADDED: audio_stream_effects\n[examples] REMOVED: core_quat_conversion, not working properly\n[examples] REMOVED: raudio_standalone, moved to raudio repo\n[examples] RENAMED: textures_rectangle -> textures_sprite_anim\n[examples] REVIEWED: core_input_gamepad, improve joystick visualisation (#2390) by @kristianlm\n[examples] REVIEWED: textures_draw_tiled\n[examples] REVIEWED: shaders_mesh_instancing, free allocated matrices (#2425) by @AnilBK\n[examples] REVIEWED: shaders_raymarching\n[examples] REVIEWED: audio_raw_stream (#2205) by ptarabbia\n[examples] REVIEWED: audio_music_stream\n[examples] REVIEWED: shaders_mesh_instancing, simplified\n[examples] REVIEWED: shaders_basic_lighting, rlights.h simplified\n[examples] REVIEWED: All examples descriptions, included creation/update raylib versions\n[parser] ADDED: Defines to parser (#2269) by @iskolbin\n[parser] ADDED: Aliases to parser (#2444) by @lazaray\n[parser] ADDED: Parse struct descriptions (#2214) by @eutro\n[parser] ADDED: Parse enum descriptions and value descriptions (#2208) by @eutro\n[parser] ADDED: Lua output format for parser by @iskolbin\n[parser] ADDED: Makefile for raylib_parser by @iskolbin\n[parser] ADDED: Support for truncating parser input (#2464) by @lazaray\n[parser] ADDED: Support for calculated defines to parser (#2463) by @lazaray\n[parser] REVIEWED: Update parser files (#2125) by @catmanl\n[parser] REVIEWED: Fix memory leak in parser (#2136) by @ronnieholm\n[parser] REVIEWED: EscapeBackslashes()\n[parser] REVIEWED: Parser improvements (#2461 #2462) by @lazaray\n[bindings] ADDED: License details for BINDINGS\n[bindings] ADDED: dart-raylib (#2149) by @wolfenrain\n[bindings] ADDED: raylib-cslo (#2169) by @jasonswearingen\n[bindings] ADDED: raylib-d (#2194) by @schveiguy\n[bindings] ADDED: raylib-guile (#2202) by @petelliott\n[bindings] ADDED: raylib-scopes (#2238) by @salotz\n[bindings] ADDED: naylib (Nim) (#2386) by @planetis-m\n[bindings] ADDED: raylib.jl (Julia) (#2403) by @irishgreencitrus\n[bindings] ADDED: raylib.zig (#2449) by @ryupold\n[bindings] ADDED: racket-raylib (#2454) by @eutro\n[bindings] ADDED: raylibr (#2611) by @ramiromagno\n[bindings] ADDED: Raylib.4.0.Pascal (#2617) by @sysrpl\n[bindings] REVIEWED: Multiple bindings updated to raylib 4.0\n[build] ADDED: VS2022 project\n[build] ADDED: Support macOS by zig build system (#2175)\n[build] ADDED: Support custom modules selection on compilation\n[build] ADDED: Minimal web shell for WebAssembly compilation\n[build] ADDED: BSD support for zig builds (#2332) by @zigster64\n[build] ADDED: Repology badge (#2367) by @jubalh\n[build] ADDED: Support DLL compilation with TCC compiler (#2569) by @audinue\n[build] ADDED: Missing examples to VS2022 examples solution\n[build] REMOVED: VS2019 project (unmaintained)\n[build] REMOVED: SUPPORT_MOUSE_CURSOR_POINT config option\n[build] REVIEWED: Fixed RPi make install (#2217) by @wereii\n[build] REVIEWED: Fix build results path on Linux and RPi (#2218) by @wereii\n[build] REVIEWED: Makefiles debug flag\n[build] REVIEWED: Fixed cross-compilation from x86-64 to RPi (#2233) by @pitpit\n[build] REVIEWED: All Makefiles, simplified\n[build] REVIEWED: All Makefiles, improve organization\n[build] REVIEWED: All Makefiles, support CUSTOM_CFLAGS\n[build] REVIEWED: Fixed compiling for Android using CMake (#2270) by @hero2002\n[build] REVIEWED: Make zig build functionality available to zig programs (#2271) by @Not-Nik\n[build] REVIEWED: Update CMake project template with docs and web (#2274) by @RobLoach\n[build] REVIEWED: Update VSCode project to work with latest makefile and web (#2296) by @phil-shenk\n[build] REVIEWED: Support audio examples compilation with external glfw (#2329) by @locriacyber\n[build] REVIEWED: Fix \"make clean\" target failing when shell is not cmd (#2338) by @Peter0x44\n[build] REVIEWED: Makefile linkage -latomic, required by miniaudio on ARM 32bit #2452\n[build] REVIEWED: Update raylib-config.cmake (#2374) by @marcogmaia\n[build] REVIEWED: Simplify build.zig to not require user to specify raylib path (#2383) by @Hejsil\n[build] REVIEWED: Fix OpenGL 4.3 graphics option in CMake (#2427) by @GoldenThumbs\n[extras] `WARNING`: REMOVED: physac from raylib sources/examples, use github.com/raysan5/physac\n[extras] `WARNING`: REMOVED: raygui from raylib/src/extras, use github.com/raysan5/raygui\n[extras] `WARNING`: REMOVED: rmem from raylib/src/extras, moved to github.com/raylib-extras/rmem\n[extras] `WARNING`: REMOVED: easings from raylib/src/extras, moved to github.com/raylib-extras/reasings\n[extras] `WARNING`: REMOVED: raudio.h from raylib/src, moved to github.com/raysan5/raudio\n[misc] REVIEWED: Update some external libraries to latest versions\n\n-------------------------------------------------------------------------\nRelease:     raylib 4.0 - 8th Anniversary Edition (05 November 2021)\n-------------------------------------------------------------------------\nKEY CHANGES:\n - Naming consistency and coherency: Complete review of the library: syntax, naming, comments, decriptions, logs...\n - Event Automation System: Support for input events recording and automatic re-playing, useful for automated testing and more!\n - Custom game-loop control: Intended for advanced users that want to control the events polling and the timming mechanisms\n - rlgl 4.0: Completely decoupling from platform layer and raylib, intended for standalone usage as single-file header-only\n - raymath 1.5: Complete review following new conventions, to make it more portable and self-contained\n - raygui 3.0: Complete review and official new release, more portable and self-contained, intended for tools development\n - raylib_parser: New tool to parse raylib.h and extract all required info into custom output formats (TXT, XML, JSON...)\n - Zig and Odin official support\n\nDetailed changes:\n[core] ADDED: Support canvas resizing on web (#1840) by @skylersaleh\n[core] ADDED: GetMouseDelta() (#1832) by @adricoin2010\n[core] ADDED: Support additional mouse buttons (#1753) by @lambertwang\n[core] ADDED: SetRandomSeed() (#1994) by @TommiSinivuo\n[core] ADDED: GetTouchPointId() #1972\n[core] ADDED: EncodeDataBase64() and DecodeDataBase64()\n[core] REMOVED: PLATFORM_UWP, difficult to maintain\n[core] REMOVED: IsGamepadName()\n[core] RENAMED: SwapBuffers() to SwapScreenBuffer()\n[core] RENAMED: Wait() to WaitTime()\n[core] RENAMED: RayHitInfo to RayCollision (#1781)\n[core] RENAMED: GetRayCollisionGround() to GetRayCollisionQuad() (#1781)\n[core] REVIEWED: Support mouse wheel on x-axis (#1948)\n[core] REVIEWED: DisableCursor() on web by registering an empty mouse click event function in emscripten (#1900) by @grenappels\n[core] REVIEWED: LoadShader() and default locations and descriptions\n[core] REVIEWED: LoadShaderFromMemory() (#1851) by @Ruminant\n[core] REVIEWED: WaitTime(), avoid global variables dependency to make the function is self-contained (#1841)\n[core] REVIEWED: SetWindowSize() to work on web (#1847) by @nikki93\n[core] REVIEWED: Raspberry RPI/DRM keyboard blocking render loop (#1879) @luizpestana\n[core] REVIEWED: Android multi-touch (#1869) by @humbe\n[core] REVIEWED: Implemented GetGamepadName() for emscripten by @nbarkhina\n[core] REVIEWED: HighDPI support (#1987) by @ArnaudValensi\n[core] REVIEWED: KeyCallback(), register keys independently of the actions\n[rlgl] ADDED: GRAPHIC_API_OPENGL_43\n[rlgl] ADDED: rlUpdateVertexBufferElements() (#1915)\n[rlgl] ADDED: rlActiveDrawBuffers() (#1911)\n[rlgl] ADDED: rlEnableColorBlend()/rlDisableColorBlend()\n[rlgl] ADDED: rlGetPixelFormatName()\n[rlgl] REVIEWED: rlUpdateVertexBuffer (#1914) by @630Studios\n[rlgl] REVIEWED: rlDrawVertexArrayElements() (#1891)\n[rlgl] REVIEWED: Wrong normal matrix calculation (#1870)\n[raymath] ADDED: Vector3Angle()\n[raymath] REVIEWED: QuaternionFromAxisAngle() (#1892)\n[raymath] REVIEWED: QuaternionToMatrix() returning transposed result. (#1793) by @object71\n[shapes] ADDED: RenderPolyLinesEx() (#1758) by @lambertwang\n[shapes] ADDED: DrawSplineBezierCubic() (#2021) by @SAOMDVN\n[textures] ADDED: GetImageColor() #2024\n[textures] REMOVED: GenImagePerlinNoise()\n[textures] RENAMED: GetTextureData() to LoadImageFromTexture()\n[textures] RENAMED: GetScreenData() to LoadImageFromScreen()\n[textures] REVIEWED: ExportImage() to use SaveFileData() (#1779)\n[textures] REVIEWED: LoadImageAnim() #2005\n[text] ADDED: Security check in case of not valid font\n[text] ADDED: `GetGlyphInfo()` to get glyph info for a specific codepoint\n[text] ADDED: `GetGlyphAtlasRec()` to get glyph rectangle within the generated font atlas\n[text] ADDED: DrawTextPro() with text rotation support, WARNING: DrawTextPro() requires including `rlgl.h`, before it was only dependant on `textures` module.\n[text] ADDED: UnloadCodepoints() to safely free loaded codepoints\n[text] REMOVED: DrawTextRec() and DrawTextRecEx(), moved to example, those functions could be very specific depending on user needs so it's better to give the user the full source in case of special requirements instead of allowing a function with +10 input parameters.\n[text] RENAMED: struct `CharInfo` to `GlyphInfo`, actually that's the correct naming for the data contained. It contains the character glyph metrics and the glyph image; in the past it also contained rectangle within the font atlas but that data has been moved to `Font` struct directly, so, `GlyphInfo` is a more correct name.\n[text] RENAMED: `CodepointToUtf8()` to `CodepointToUTF8()`, capitalization of UTF-8 is the correct form, it would also require de hyphen but it can be omitted in this case.\n[text] RENAMED: `TextToUtf8()` to `TextCodepointsToUTF8` for consistency and more detail on the functionality.\n[text] RENAMED: GetCodepoints() to LoadCodepoints(), now codepoint array data is loaded dynamically instead of reusing a limited static buffer.\n[text] RENAMED: GetNextCodepoint() to GetCodepoint()\n[models] ADDED: MagikaVoxel VOX models loading\n[models] ADDED: GenMeshCone() (#1903)\n[models] ADDED: GetModelBoundingBox()\n[models] ADDED: DrawBillboardPro() (#1759) by @nobytesgiven\n[models] ADDED: DrawCubeTextureRec() (#2001) by @tdgroot\n[models] ADDED: DrawCylinderEx() and DrawCylinderWiresEx() (#2049) by @Horrowind\n[models] REMOVED: DrawBillboardEx()\n[models] RENAMED: MeshBoundingBox() to GetMeshBoundingBox()\n[models] RENAMED: MeshTangents() to GenMeshTangents()\n[models] RENAMED: MeshBinormals() to GenMeshBinormals()\n[models] REVIEWED: GenMeshTangents() (#1877) by @630Studios\n[models] REVIEWED: CheckCollisionBoxSphere() by @Crydsch\n[models] REVIEWED: GetRayCollisionQuad() by @Crydsch\n[models] REVIEWED: LoadGLTF(), fixed missing transformations and nonroot skinning by @MrDiver\n[models] REVIEWED: LoadGLTF(), rewriten from scratch, removed animations support (broken)\n[models] REVIEWED: Decouple DrawMesh() and DrawMeshInstanced() (#1958)\n[models] REVIEWED: Support vertex color attribute for GLTF and IQM (#1790) by @object71\n[models] REVIEWED: DrawBillboardPro() (#1941) by @GithubPrankster\n[models] REDESIGNED: Major review of glTF loading functionality (#1849) by @object71\n[audio] ADDED: SeekMusicStream() (#2006) by @GithubPrankster\n[audio] REMOVED: GetAudioStreamBufferSizeDefault()\n[audio] RENAMED: InitAudioStream() to LoadAudioStream()\n[audio] RENAMED: CloseAudioStream() to UnloadAudioStream()\n[audio] RENAMED: IsMusicPlaying() to IsMusicStreamPlaying()\n[audio] REVIEWED: ExportWaveAsCode()\n[audio] REDESIGNED: Use frameCount on audio instead of sampleCount\n[utils] REVIEWED: exit() on LOG_FATAL instead of LOG_ERROR (#1796)\n[examples] ADDED: core_custom_frame_control\n[examples] ADDED: core_basic_screen_manager\n[examples] ADDED: core_split_screen (#1806) by @JeffM2501\n[examples] ADDED: core_smooth_pixelperfect (#1771) by @NotManyIdeasDev\n[examples] ADDED: shaders_texture_outline (#1883) by @GoldenThumbs\n[examples] ADDED: models_loading_vox (#1940) by @procfxgen\n[examples] ADDED: rlgl_compute_shader by @TSnake41 (#2088)\n[examples] REMOVED: models_material_pbr\n[examples] REMOVED: models_gltf_animation\n[examples] REVIEWED: core_3d_picking\n[examples] REVIEWED: core_input_mouse\n[examples] REVIEWED: core_vr_simulator, RenderTexture usage\n[examples] REVIEWED: core_window_letterbox, RenderTexture usage\n[examples] REVIEWED: shapes_basic_shapes\n[examples] REVIEWED: shapes_logo_raylib_anim\n[examples] REVIEWED: textures_to_image\n[examples] REVIEWED: text_rectangle_bounds\n[examples] REVIEWED: text_unicode\n[examples] REVIEWED: text_draw_3d\n[examples] REVIEWED: models_loading\n[examples] REVIEWED: models_skybox (#1792) (#1778)\n[examples] REVIEWED: models_mesh_picking\n[examples] REVIEWED: models_yaw_pitch_roll\n[examples] REVIEWED: models_rlgl_solar_system\n[examples] REVIEWED: shaders_custom_uniform, RenderTexture usage\n[examples] REVIEWED: shaders_eratosthenes, RenderTexture usage\n[examples] REVIEWED: shaders_julia_set, RenderTexture usage\n[examples] REVIEWED: shaders_postprocessing, RenderTexture usage\n[examples] REVIEWED: shaders_basic_lighting, simplified (#1865)\n[examples] REVIEWED: audio_raw_stream.c\n[examples] REVIEWED: raudio_standalone\n[examples] REVIEWED: raylib_opengl_interop\n[examples] REVIEWED: rlgl_standalone.c\n[examples] REVIEWED: Resources licenses\n[examples] REVIEWED: models resources reorganization\n[templates] REMOVED: Moved to a separate repo: https://github.com/raysan5/raylib-game-template\n[build] ADDED: Zig build file (#2014) by @TommiSinivuo\n[build] ADDED: Android VS2019 solution (#2013) by @Kronka\n[build] REMOVED: VS2017 project, outdated\n[build] RENAMED: All raylib modules prefixed with 'r' (core -> rcore)\n[build] RENAMED: SUPPORT_MOUSE_CURSOR_NATIVE to SUPPORT_MOUSE_CURSOR_POINT\n[build] REVIEWED: examples/examples_template.c\n[build] REVIEWED: Makefile to latest Emscripten SDK r23\n[build] REVIEWED: Makefile for latest Android NDK r32 LTS\n[build] REVIEWED: raylib resource files\n[build] Moved some extra raylib libraries to /extras/ directory\n[*] UPDATED: Multiple bindings to latest version\n[*] UPDATED: Most external libraries to latest versions (except GLFW)\n[*] Multiple code improvements and fixes by multiple contributors!\n\n-------------------------------------------------------------------------\nRelease:     raylib 3.7 (26 April 2021)\n-------------------------------------------------------------------------\nKEY CHANGES:\n - [rlgl] REDESIGNED: Greater abstraction level, some functionality moved to core module\n - [rlgl] REVIEWED: Instancing and stereo rendering\n - [core] REDESIGNED: VR simulator, fbo/shader exposed to user\n - [utils] ADDED: File access callbacks system\n - [models] ADDED: glTF animations support (#1551) by @object71\n - [audio] ADDED: Music streaming support from memory (#1606) by @nezvers\n - [*] RENAMED: enum types and enum values for consistency\n\nDetailed changes:\n[core] ADDED: LoadVrStereoConfig()\n[core] ADDED: UnloadVrStereoConfig()\n[core] ADDED: BeginVrStereoMode()\n[core] ADDED: EndVrStereoMode()\n[core] ADDED: GetCurrentMonitor() (#1485) by @object71\n[core] ADDED: SetGamepadMappings() (#1506)\n[core] RENAMED: struct Camera: camera.type to camera.projection\n[core] RENAMED: LoadShaderCode() to LoadShaderFromMemory() (#1690)\n[core] RENAMED: SetMatrixProjection() to rlSetMatrixProjection()\n[core] RENAMED: SetMatrixModelview() to rlSetMatrixModelview()\n[core] RENAMED: GetMatrixModelview() to rlGetMatrixModelview()\n[core] RENAMED: GetMatrixProjection() to rlGetMatrixProjection()\n[core] RENAMED: GetShaderDefault() to rlGetShaderDefault()\n[core] RENAMED: GetTextureDefault() to rlGetTextureDefault()\n[core] REMOVED: GetShapesTexture()\n[core] REMOVED: GetShapesTextureRec()\n[core] REMOVED: GetMouseCursor()\n[core] REMOVED: SetTraceLogExit()\n[core] REVIEWED: GetFileName() and GetDirectoryPath() (#1534) by @gilzoide\n[core] REVIEWED: Wait() to support FreeBSD (#1618)\n[core] REVIEWED: HighDPI support on macOS retina (#1510)\n[core] REDESIGNED: GetFileExtension(), includes the .dot\n[core] REDESIGNED: IsFileExtension(), includes the .dot\n[core] REDESIGNED: Compresion API to use sdefl/sinfl libs\n[rlgl] ADDED: SUPPORT_GL_DETAILS_INFO config flag\n[rlgl] REMOVED: GenTexture*() functions (#721)\n[rlgl] REVIEWED: rlLoadShaderDefault()\n[rlgl] REDESIGNED: rlLoadExtensions(), more details exposed\n[raymath] REVIEWED: QuaternionFromEuler() (#1651)\n[raymath] REVIEWED: MatrixRotateZYX() (#1642)\n[shapes] ADDED: DrawSplineBezierQuad() (#1468) by @epsilon-phase\n[shapes] ADDED: CheckCollisionLines()\n[shapes] ADDED: CheckCollisionPointLine() by @mkupiec1\n[shapes] REVIEWED: CheckCollisionPointTriangle() by @mkupiec1\n[shapes] REDESIGNED: SetShapesTexture()\n[shapes] REDESIGNED: DrawCircleSector(), to use float params\n[shapes] REDESIGNED: DrawCircleSectorLines(), to use float params\n[shapes] REDESIGNED: DrawRing(), to use float params\n[shapes] REDESIGNED: DrawRingLines(), to use float params\n[textures] ADDED: DrawTexturePoly() and example (#1677) by @chriscamacho\n[textures] ADDED: UnloadImageColors() for allocs consistency\n[textures] RENAMED: GetImageData() to LoadImageColors()\n[textures] REVIEWED: ImageClearBackground() and ImageDrawRectangleRec() (#1487) by @JeffM2501\n[textures] REVIEWED: DrawTexturePro() and DrawRectanglePro() transformations (#1632) by @ChrisDill\n[text] REDESIGNED: DrawFPS()\n[models] ADDED: UploadMesh() (#1529)\n[models] ADDED: UpdateMeshBuffer()\n[models] ADDED: DrawMesh()\n[models] ADDED: DrawMeshInstanced()\n[models] ADDED: UnloadModelAnimations() (#1648) by @object71\n[models] REMOVED: DrawGizmo()\n[models] REMOVED: LoadMeshes()\n[models] REMOVED: MeshNormalsSmooth()\n[models] REVIEWED: DrawLine3D() (#1643)\n[audio] REVIEWED: Multichannel sound system (#1548)\n[audio] REVIEWED: jar_xm library (#1701) by @jmorel33\n[utils] ADDED: SetLoadFileDataCallback()\n[utils] ADDED: SetSaveFileDataCallback()\n[utils] ADDED: SetLoadFileTextCallback()\n[utils] ADDED: SetSaveFileTextCallback()\n[examples] ADDED: text_draw_3d (#1689) by @Demizdor\n[examples] ADDED: textures_poly (#1677) by @chriscamacho\n[examples] ADDED: models_gltf_model (#1551) by @object71\n[examples] RENAMED: shaders_rlgl_mesh_instanced to shaders_mesh_intancing\n[examples] REDESIGNED: shaders_rlgl_mesh_instanced by @moliad\n[examples] REDESIGNED: core_vr_simulator\n[examples] REDESIGNED: models_yaw_pitch_roll\n[build] ADDED: Config flag: SUPPORT_STANDARD_FILEIO\n[build] ADDED: Config flag: SUPPORT_WINMM_HIGHRES_TIMER (#1641)\n[build] ADDED: Config flag: SUPPORT_GL_DETAILS_INFO\n[build] ADDED: Examples projects to VS2019 solution\n[build] REVIEWED: Makefile to support PLATFORM_RPI (#1580)\n[build] REVIEWED: Multiple typecast warnings by @JeffM2501\n[build] REDESIGNED: VS2019 project build paths\n[build] REDESIGNED: CMake build system by @object71\n[*] RENAMED: Several functions parameters for consistency\n[*] UPDATED: Multiple bindings to latest version\n[*] UPDATED: All external libraries to latest versions\n[*] Multiple code improvements and fixes by multiple contributors!\n\n-------------------------------------------------------------------------\nRelease:     raylib 3.5 - 7th Anniversary Edition (25 December 2020)\n-------------------------------------------------------------------------\nKEY CHANGES:\n - [core] ADDED: PLATFORM_DRM to support RPI4 and other devices (#1388) by @kernelkinetic\n - [core] REDESIGNED: Window states management system through FLAGS\n - [rlgl] ADDED: RenderBatch type and related functions to allow custom batching (internal only)\n - [rlgl] REDESIGNED: Framebuffers API to support multiple attachment types (#721)\n - [textures] REDESIGNED: Image*() functions, big performance improvements (software rendering)\n - [*] REVIEWED: Multiple functions to replace file accesses by memory accesses\n - [*] ADDED: GitHub Actions CI to support multiple raylib build configurations\n\nDetailed changes:\n[core] ADDED: SetWindowState() / ClearWindowState() -> New flags added!\n[core] ADDED: IsWindowFocused()\n[core] ADDED: GetWindowScaleDPI()\n[core] ADDED: GetMonitorRefreshRate() (#1289) by @Shylie\n[core] ADDED: IsCursorOnScreen() (#1262) by @ChrisDill\n[core] ADDED: SetMouseCursor() and GetMouseCursor() for standard Desktop cursors (#1407) by @chances\n[core] REMOVED: struct RenderTexture2D: depthTexture variable\n[core] REMOVED: HideWindow() / UnhideWindow() -> Use SetWindowState()\n[core] REMOVED: DecorateWindow() / UndecorateWindow() -> Use SetWindowState()\n[core] RENAMED: GetExtension() to GetFileExtension()\n[core] REVIEWED: Several structs to reduce size and padding\n[core] REVIEWED: struct Texture maps to Texture2D and TextureCubemap\n[core] REVIEWED: ToggleFullscreen() (#1287)\n[core] REVIEWED: InitWindow(), support empty title for window (#1323)\n[core] REVIEWED: RPI: Mouse movements are bound to the screen resolution (#1392) (#1410) by @kernelkinetic\n[core] REVIEWED: GetPrevDirectoryPath() fixes on Unix-like systems (#1246) by @ivan-cx\n[core] REPLACED: rgif.h by msf_gif.h for automatic gif recording\n[core] REDESIGNED: GetMouseWheelMove() to return float movement for precise scrolling (#1397) by @Doy-lee\n[core] REDESIGNED: GetKeyPressed(), and added GetCharPressed() (#1336)\n[core] UWP rework with improvements (#1231) by @Rover656\n[core] Gamepad axis bug fixes and improvement (#1228) by @mmalecot\n[core] Updated joystick mappings with latest version of gamecontrollerdb (#1381) by @coderoth\n[rlgl] Corrected issue with OpenGL 1.1 support\n[rlgl] ADDED: rlDrawMeshInstanced() (#1318) by @seanpringle\n[rlgl] ADDED: rlCheckErrors (#1321) by @seanpringle\n[rlgl] ADDED: BLEND_SET blending mode (#1251) by @RandomErrorMessage\n[rlgl] ADDED: rlSetLineWidth(), rlGetLineWidth(), rlEnableSmoothLines(), rlDisableSmoothLines() (#1457) by @JeffM2501\n[rlgl] RENAMED: rlUnproject() to Vector3Unproject() [raymath]\n[rlgl] REVIEWED: Replace rlglDraw() calls by DrawRenderBatch() internal calls\n[rlgl] REVIEWED: GenTextureCubemap(), use rlgl functionality only\n[rlgl] REVIEWED: rlFramebufferAttach() to support texture layers\n[rlgl] REVIEWED: GenDrawCube() and GenDrawQuad()\n[rlgl] REVIEWED: Issues with vertex batch overflow (#1223)\n[rlgl] REVIEWED: rlUpdateTexture(), issue with offsets\n[rlgl] REDESIGNED: GenTexture*() to use the new fbo API (#721)\n[raymath] ADDED: Normalize() and Remap() functions (#1247) by @NoorWachid\n[raymath] ADDED: Vector2Reflect() (#1400) by @daniel-junior-dube\n[raymath] ADDED: Vector2LengthSqr() and Vector3LengthSqr() (#1248) by @ThePituLegend\n[raymath] ADDED: Vector2MoveTowards() function (#1233) by @anatagawa\n[raymath] REVIEWED: Some functions consistency (#1197) by @Not-Nik\n[raymath] REVIEWED: QuaternionFromVector3ToVector3() (#1263) by @jvocaturo\n[raymath] REVIEWED: MatrixLookAt(), optimized (#1442) by @RandomErrorMessage\n[shapes] ADDED: CheckCollisionLines(), by @Elkantor\n[text] Avoid [textures] functions dependencies\n[text] ADDED: Config flag: SUPPORT_TEXT_MANIPULATION\n[text] ADDED: LoadFontFromMemory() (TTF only) (#1327)\n[text] ADDED: UnloadFontData()\n[text] RENAMED: FormatText() -> TextFormat()\n[text] REVIEWED: Font struct, added charsPadding (#1432)\n[text] REVIEWED: TextJoin()\n[text] REVIEWED: TextReplace() (#1172)\n[text] REVIEWED: LoadBMFont() to load data from memory (#1232)\n[text] REVIEWED: GenImageFontAtlas(), fixed offset (#1171)\n[text] REDESIGNED: LoadFontData(), reviewed input parameters\n[text] REDESIGNED: LoadFontDefault(), some code simplifications\n[text] REDESIGNED: LoadFontFromImage(), avoid LoadImageEx()\n[text] REDESIGNED: LoadFontData(), avoid GenImageColor(), ImageFormat()\n[text] REDESIGNED: LoadBMFont(), avoid ImageCopy(), ImageFormat(), ImageAlphaMask()\n[textures] Move Color functions from [core] to [textures] module\n[textures] ADDED: ColorAlphaBlend()\n[textures] ADDED: GetPixelColor()\n[textures] ADDED: SetPixelColor()\n[textures] ADDED: LoadImageFromMemory() (#1327)\n[textures] ADDED: LoadImageAnim() to load animated sequence of images\n[textures] ADDED: DrawTextureTiled() (#1291) - @Demizdor\n[textures] ADDED: UpdateTextureRec()\n[textures] ADDED: UnloadImageColors(), UnloadImagePalette(), UnloadWaveSamples()\n[textures] REMOVED: Config flag: SUPPORT_IMAGE_DRAWING\n[textures] REMOVED: LoadImageEx()\n[textures] REMOVED: LoadImagePro()\n[textures] REMOVED: GetImageDataNormalized(), not exposed in the API\n[textures] RENAMED: ImageExtractPalette() to GetImagePalette()\n[textures] RENAMED: Fade() to ColorAlpha(), added #define for compatibility\n[textures] RENAMED: GetImageData() -> LoadImageColors()\n[textures] RENAMED: GetImagePalette() -> LoadImagePalette()\n[textures] RENAMED: GetWaveData() -> LoadWaveSamples()\n[textures] REVIEWED: GetPixelDataSize() to consider compressed data properly\n[textures] REVIEWED: GetTextureData(), allow retrieving 32bit float data\n[textures] REVIEWED: ImageDrawText*() params order\n[textures] REVIEWED: ColorAlphaBlend(), support tint color\n[textures] REVIEWED: ColorAlphaBlend(), integers-version, optimized (#1218)\n[textures] REVIEWED: ImageDraw(), consider negative source offset properly (#1283)\n[textures] REVIEWED: ImageDraw(), optimizations test (#1218)\n[textures] REVIEWED: ImageResizeCanvas(), optimization (#1218)\n[textures] REVIEWED: ExportImage(), optimized\n[textures] REVIEWED: ImageAlphaPremultiply(), optimization\n[textures] REVIEWED: ImageAlphaClear(), minor optimization\n[textures] REVIEWED: ImageToPOT(), renamed parameter\n[textures] REVIEWED: ImageCrop() (#1218)\n[textures] REVIEWED: ImageToPOT() (#1218)\n[textures] REVIEWED: ImageAlphaCrop() (#1218)\n[textures] REVIEWED: ExportImage(), optimized (#1218)\n[textures] REDESIGNED: ImageCrop(), optimized (#1218)\n[textures] REDESIGNED: ImageRotateCCW(), optimized (#1218)\n[textures] REDESIGNED: ImageRotateCW(), optimized (#1218)\n[textures] REDESIGNED: ImageFlipHorizontal(), optimized (#1218)\n[textures] REDESIGNED: ImageFlipVertical(), optimized (#1218)\n[textures] REDESIGNED: ImageResizeCanvas(), optimized (#1218)\n[textures] REDESIGNED: ImageDrawPixel(), optimized\n[textures] REDESIGNED: ImageDrawLine(), optimized\n[textures] REDESIGNED: ImageDraw(), optimized (#1218)\n[textures] REDESIGNED: ImageResize(), optimized (#1218)\n[textures] REDESIGNED: ImageFromImage(), optimized (#1218)\n[textures] REDESIGNED: ImageDraw(), optimization (#1218)\n[textures] REDESIGNED: ImageAlphaClear(), optimized (#1218)\n[textures] REDESIGNED: ExportImageAsCode() to use memory buffer (#1232)\n[textures] REDESIGNED: ColorFromHSV()\n[models] ADDED: DrawTriangle3D() and DrawTriangleStrip3D()\n[models] ADDED: UnloadModelKeepMeshes()\n[models] REVIEWED: LoadModel(), avoid loading texcoords and normals from model if not existent\n[models] REVIEWED: GenMeshCubicmap(), added comments and simplification\n[models] REVIEWED: GenMeshCubicmap(), fixed generated normals (#1244) by @GoldenThumbs\n[models] REVIEWED: GenMeshPoly(), fixed buffer overflow (#1269) by @frithrah\n[models] REVIEWED: LoadOBJ(): Allow for multiple materials in obj files (#1408) by @chriscamacho and @codifies\n[models] REVIEWED: LoadIQM() materials loading (#1227) by @sikor666\n[models] REVIEWED: LoadGLTF() to read from memory buffer\n[models] REVIEWED: UpdateMesh(), fix extra memory allocated when updating color buffer (#1271) by @4yn\n[models] REVIEWED: MeshNormalsSmooth() (#1317) by @seanpringle\n[models] REVIEWED: DrawGrid() (#1417)\n[models] REDESIGNED: ExportMesh() to use memory buffer (#1232)\n[models] REDESIGNED: LoadIQM() and LoadModelAnimations() to use memory buffers\n[audio] ADDED: LoadWaveFromMemory() (#1327)\n[audio] REMOVED: SetMusicLoopCount()\n[audio] REVIEWED: Several functions, sampleCount vs frameCount (#1423)\n[audio] REVIEWED: SaveWAV() to use memory write insted of file\n[audio] REVIEWED: LoadMusicStream(), support WAV music streaming (#1198)\n[audio] REVIEWED: Support multiple WAV sampleSize for MusicStream (#1340)\n[audio] REVIEWED: SetAudioBufferPitch()\n[audio] REDESIGNED: Audio looping system\n[audio] REDESIGNED: LoadSound(): Use memory loading (WAV, OGG, MP3, FLAC) (#1312)\n[audio] REDESIGNED: ExportWaveAsCode() to use memory buffers\n[utils] ADDED: MemAlloc() / MemFree() (#1440)\n[utils] ADDED: UnloadFileData() / UnloadFileText()\n[utils] REVIEWED: android_fopen() to support SDCard access\n[utils] REDESIGNED: SaveFile*() functions to expose file access results (#1420)\n[rmem] REVIEWED: MemPool and other allocators optimization (#1211) by @assyrianic\n[examples] ADDED: core/core_window_flags\n[examples] ADDED: core/core_quat_conversion by @chriscamacho and @codifies\n[examples] ADDED: textures/textures_blend_modes (#1261) by @accidentalrebel\n[examples] ADDED: textures/textures_draw_tiled (#1291) by @Demizdor\n[examples] ADDED: shaders/shaders_hot_reloading (#1198)\n[examples] ADDED: shaders/shaders_rlgl_mesh_instanced (#1318) by @seanpringle\n[examples] ADDED: shaders/shaders_multi_sampler2d\n[examples] ADDED: others/embedded_files_loading\n[examples] REVIEWED: textures/textures_raw_data (#1286)\n[examples] REVIEWED: textures/textures_sprite_explosion, replace resources\n[examples] REVIEWED: textures/textures_particles_blending, replace resources\n[examples] REVIEWED: textures/textures_image_processing, support mouse\n[examples] REVIEWED: models/models_skybox to work on OpenGL ES 2.0\n[examples] REVIEWED: audio/resources, use open license resources\n[examples] REVIEWED: others/raudio_standalone.c\n[build] ADDED: New config.h configuration options exposing multiple #define values\n[build] REMOVED: ANGLE VS2017 template project\n[build] REVIEWED: All MSVC compile warnings\n[build] Updated Makefile for web (#1332) by @rfaile313\n[build] Updated build pipelines to use latest emscripten and Android NDK\n[build] Updated emscriptem build script to generate .a on WebAssembly\n[build] Updated Android build for Linux, supporting ANDROID_NDK at compile time by @branlix3000\n[build] Updated VSCode project template tasks\n[build] Updated VS2017.UWP project template by @Rover656\n[build] Updated Android build pipeline\n[build] REMOVED: AppVeyor and Travis CI build systems\n[*] Moved raysan5/raylib/games to independent repo: raysan5/raylib-games\n[*] Replaced several examples resources with more open licensed alternatives\n[*] Updated BINDINGS.md with NEW bindings and added raylib version binding!\n[*] Updated all external libraries to latest versions\n[*] Multiple code improvements and small fixes\n\n-----------------------------------------------\nRelease:     raylib 3.0 (01 April 2020)\n-----------------------------------------------\nKEY CHANGES:\n - Global context states used on all modules.\n - Custom memory allocators for all modules and dependencies.\n - Centralized file access system and memory data loading.\n - Structures reviewed to reduce size and always be used as pass-by-value.\n - Tracelog messages completely reviewed and categorized.\n - raudio module reviewed to accomodate new Music struct and new miniaudio.\n - text module reviewed to improve fonts generation and text management functions.\n - Multiple new examples added and categorized examples table.\n - GitHub Actions CI implemented for Windows, Linux and macOS.\n\nDetailed changes:\n[build] ADDED: VS2017.ANGLE project, by @msmshazan\n[build] ADDED: VS2017 project support for x64 platform configuration\n[build] ADDED: Makefile for Android building on macOS, by @Yunoinsky\n[build] ADDED: Makefile for Android building on Linux, by @pamarcos\n[build] REMOVED: VS2015 project\n[build] REVIEWED: VSCode project\n[build] REVIEWED: Makefile build system\n[build] REVIEWED: Android building, by @NimbusFox\n[build] REVIEWED: Compilation with CLion IDE, by @Rover656\n[build] REVIEWED: Generation of web examples, by @pamarcos\n[build] REVIEWED: Makefiles path to 'shell.html', by @niorad\n[build] REVIEWED: VS2017 64bit compilation issues, by @spec-chum\n[build] REVIEWED: Multiple fixes on projects building, by @ChrisDill, @JuDelCo, @electronstudio\n[core] ADDED: Support touch/mouse indistinctly\n[core] ADDED: FLAG_WINDOW_ALWAYS_RUN to avoid pause on minimize\n[core] ADDED: Config flag SUPPORT_HALFBUSY_WAIT_LOOP\n[core] ADDED: RPI mouse cursor point support on native mode\n[core] ADDED: GetWorldToScreen2D()- Get screen space position for a 2d camera world space position, by @arvyy\n[core] ADDED: GetScreenToWorld2D() - Get world space position for a 2d camera screen space position, by @arvyy\n[core] ADDED: GetWorldToScreenEx() - Get size position for a 3d world space position\n[core] ADDED: DirectoryExists() - Check if a directory path exists\n[core] ADDED: GetPrevDirectoryPath() - Get previous directory path for a given path\n[core] ADDED: CompressData() - Compress data (DEFLATE algorythm)\n[core] ADDED: DecompressData() - Decompress data (DEFLATE algorythm)\n[core] ADDED: GetWindowPosition() - Get window position XY on monitor\n[core] ADDED: LoadFileData() - Load file data as byte array (read)\n[core] ADDED: SaveFileData() - Save data to file from byte array (write)\n[core] ADDED: LoadFileText() - Load text data from file (read), returns a '\\0' terminated string\n[core] ADDED: SaveFileText() - Save text data to file (write), string must be '\\0' terminated\n[core] REMOVED: Show raylib logo at initialization\n[core] REVIEWED: GetFileName(), security checks\n[core] REVIEWED: LoadStorageValue(), by @danimartin82\n[core] REVIEWED: SaveStorageValue(), by @danimartin82\n[core] REVIEWED: IsMouseButtonReleased(), when press/release events come too fast, by @oswjk\n[core] REVIEWED: SetWindowMonitor(), by @DropsOfSerenity\n[core] REVIEWED: IsFileExtension() to be case-insensitive\n[core] REVIEWED: IsFileExtension() when checking no-extension files\n[core] REVIEWED: Default font scale filter for HighDPI mode\n[core] REVIEWED: Touch input scaling for PLATFORM_WEB\n[core] REVIEWED: RPI input system, by @DarkElvenAngel\n[core] REVIEWED: RPI input threads issues\n[core] REVIEWED: OpenGL extensions loading and freeing\n[core] REVIEWED: GetDirectoryPath()\n[core] REVIEWED: Camera2D behavior, by @arvyy\n[core] REVIEWED: OpenGL ES 2.0 extensions check\n[rlgl] ADDED: Flags to allow frustrum culling near/far distance configuration at compile time\n[rlgl] ADDED: Flags to sllow MAX_BATCH_BUFFERING config at compile time\n[rlgl] ADDED: GetMatrixProjection(), by @chriscamacho\n[rlgl] ADDED: rlUpdateMeshAt() - Update vertex or index data on GPU, at index, by @brankoku\n[rlgl] REVIEWED: Vertex padding not zeroed for quads, by @kawa-yoiko\n[rlgl] REVIEWED: Read texture data as RGBA from FBO on GLES 2.0\n[rlgl] REVIEWED: LoadShaderCode() for const correctness, by @heretique\n[rlgl] REVIEWED: rlLoadTexture()\n[rlgl] REVIEWED: rlReadTexturePixels()\n[rlgl] REVIEWED: rlUpdateMesh() to supports updating indices, by @brankoku\n[rlgl] REVIEWED: GenTextureCubemap(), renamed parameters for consistency\n[rlgl] REVIEWED: HDR pixels loading\n[raymath] ADDED: MatrixRotateXYZ(), by @chriscamacho\n[raymath] RENAMED: Vector3Multiply() to Vector3Scale()\n[camera] REVIEWED: Free camera pitch, by @chriscamacho\n[camera] REVIEWED: Camera not working properly at z-align, by @Ushio\n[shapes] ADDED: DrawTriangleStrip() - Draw a triangle strip defined by points\n[shapes] ADDED: DrawEllipse() - Draw ellipse\n[shapes] ADDED: DrawEllipseLines() - Draw ellipse outline\n[shapes] ADDED: DrawPolyLines() - Draw a polygon outline of n sides\n[shapes] REVIEWED: DrawPoly() shape rendering, by @AlexHCC\n[textures] ADDED: LoadAnimatedGIF() - Load animated GIF file\n[textures] ADDED: GetImageAlphaBorder() - Get image alpha border rectangle\n[textures] ADDED: ImageFromImage() - Create an image from another image piece\n[textures] ADDED: ImageClearBackground(), by @iamsouravgupta\n[textures] ADDED: ImageDrawPixel(), by @iamsouravgupta\n[textures] ADDED: ImageDrawCircle(), by @iamsouravgupta\n[textures] ADDED: ImageDrawLineEx(), by @iamsouravgupta\n[textures] ADDED: ImageDrawPixelV(), by @RobLoach\n[textures] ADDED: ImageDrawCircleV(), by @RobLoach\n[textures] ADDED: ImageDrawLineV(), by @RobLoach\n[textures] ADDED: ImageDrawRectangleV(), by @RobLoach\n[textures] ADDED: ImageDrawRectangleRec(), by @RobLoach\n[textures] REVIEWED: ImageDrawPixel(), by @RobLoach\n[textures] REVIEWED: ImageDrawLine(), by @RobLoach\n[textures] REVIEWED: ImageDrawCircle(), by @RobLoach\n[textures] REVIEWED: ImageDrawRectangle(), by @RobLoach\n[textures] REVIEWED: ImageDraw(), now it supports color tint parameter\n[textures] REVIEWED: ImageResizeCanvas()\n[textures] REVIEWED: ImageCrop() with security checks\n[textures] REVIEWED: ImageAlphaMask()\n[textures] REVIEWED: ImageDrawRectangleLines()\n[textures] REVIEWED: GetImageData()\n[text] ADDED: TextCopy() - Copy one string to another, returns bytes copied\n[text] ADDED: GetCodepoints() - Get all codepoints in a string\n[text] ADDED: CodepointToUtf8() - Encode codepoint into utf8 text\n[text] ADDED: DrawTextCodepoint() - Draw one character (codepoint)\n[text] RENAMED: LoadDefaultFont() -> LoadFontDefault()\n[text] RENAMED: TextCountCodepoints() -> GetCodepointsCount()\n[text] REVIEWED: TextFormat(), to support caching, by @brankoku\n[text] REVIEWED: LoadFontData(), generate empty image for space character\n[text] REVIEWED: TextSplit()\n[text] REVIEWED: TextToInteger()\n[text] REVIEWED: GetNextCodepoint(), renamed parameters for clarity\n[text] REVIEWED: GenImageFontAtlas(), improved atlas size computing\n[text] REDESIGNED: struct Font, character rectangles have been moved out from CharInfo to Font\n[text] REDESIGNED: struct CharInfo, now includes directly an Image of the glyph\n[text] REDESIGNED: GenImageFontAtlas(), additional recs parameter added\n[text] REDESIGNED: ImageTextEx(), to avoid font retrieval from GPU\n[models] ADDED: Support rlPushMatrix() and rlPopMatrix() on mesh drawing\n[models] ADDED: DrawPoint3D() - Draw a point in 3D space, actually a small line, by @ProfJski\n[models] ADDED: Multi texture support for materials in GLTF format, by @Gamerfiend, @chriscamacho\n[models] REVIEWED: LoadGLTF(), fixed memory leak, by @jubalh\n[models] REVIEWED: LoadIQM(), support multiple animations loading, by @culacant\n[models] REVIEWED: GetCollisionRayModel(), to avoid pointers\n[models] REVIEWED: CheckCollisionRay*(), parameters renamed\n[models] REVIEWED: UnloadMesh(), to avoid pointers\n[models] REVIEWED: LoadModel(), memory initialization\n[models] REVIEWED: UpdateModelAnimation(), added security checks\n[models] REVIEWED: Multiple fixes on models loading, by @jubalh\n[models] REVIEWED: Normals updated when using animated meshes, by @@las3rlars\n[models] REVIEWED: Compilation when the SUPPORT_MESH_GENERATION not set, by @@Elkantor\n[raudio] ADDED: Multi-channel audio playing, by @chriscamacho\n[raudio] REMOVED: LoadWaveEx()\n[raudio] RENAMED: IsAudioBufferProcessed() to IsAudioStreamProcessed()\n[raudio] REVIEWED: Ensure .xm playback starts in the right place, by @illegalinstruction\n[raudio] REVIEWED: Fix short non-looping sounds, by @jbosh\n[raudio] REVIEWED: Modules playing time to full length\n[raudio] REDESIGNED: Replaced Music pointer by struct\n[raudio] REDESIGNED: Removed sampleLeft from Music struct\n[examples] ADDED: core_scissor_test, by @ChrisDill\n[examples] ADDED: core_2d_camera_platformer, by @arvyy\n[examples] ADDED: textures_mouse_painting, by @ChrisDill\n[examples] ADDED: models_waving_cubes, by @codecat\n[examples] ADDED: models_solar_system, by @aldrinmartoq\n[examples] ADDED: shaders_fog, by @chriscamacho\n[examples] ADDED: shaders_texture_waves, by @Anata\n[examples] ADDED: shaders_basic_lighting, by @chriscamacho\n[examples] ADDED: shaders_simple_mask, by @chriscamacho\n[examples] ADDED: audio_multichannel_sound, by @chriscamacho\n[examples] ADDED: shaders_spotlight, by @chriscamacho\n[examples] RENAMED: text_sprite_font > text_font_spritefont\n[examples] RENAMED: text_ttf_loading > text_font_filters\n[examples] RENAMED: text_bmfont_ttf > text_font_loading\n[examples] REMOVED: models_obj_viewer\n[examples] REMOVED: models_solar_system\n[examples] REVIEWED: models_obj_loading > models_loading\n[examples] REVIEWED: models_materials_pbr, shader issues\n[examples] REVIEWED: core_window_letterbox, detailed explanation, by @jotac0\n[examples] REVIEWED: core_window_letterbox, virtual mouse, by @anatagawa\n[games] ADDED: GGJ2020 game - RE-PAIR\n[*] Misc fixes and tweaks, by @yaram, @oraoto, @zatherz, @piecedigital, @Shylie\n[*] Update ALL supported projects (Notepad++, VS2017)\n[*] Update ALL external libraries to latest versions (29.Jan.2020)\n[*] Update ALL examples and games\n[*] Update BINDINGS list\n\n-----------------------------------------------\nRelease:     raylib 2.5 (May 2019)\n-----------------------------------------------\nKEY CHANGES:\n - [core] Redesigned Gamepad mechanism, now common to all platforms and gamepads\n - [core] HighDPI monitors support with automatic content scaling\n - [rlgl] Complete module redesign to use one single internal buffer\n - [rlgl] VR system redesign to allow custom device parameters and distortion shader\n - [shapes] New drawing shapes available: CircleSector, Ring and RectangleRounded\n - [text] New text management API (multiple functions)\n - [text] Full Unicode support (utf8 text)\n - [textures] Cubemap textures support\n - [textures] Quad and N-Patch drawing\n - [models] Skeletal model animation support\n - [models] Support multiple meshes per model\n - [models] Support glTF model loading\n\nDetailed changes:\n[build] REVIEWED: Default raylib and examples Makefile\n[build] REVIEWED: Notepad++ NppExec scripts\n[build] REVIEWED: VS2015 and VS2017 projects\n[build] REVIEWED: Android APK build pipeline\n[core] Converted most #defined values as enum values\n[core] Complete redesign of RPI input system to use evdev events\n[core] ADDED: IsWindowResized() - Check if window has been resized\n[core] ADDED: IsWindowHidden() - Check if window is currently hidden\n[core] ADDED: UnhideWindow() - Show the window\n[core] ADDED: HideWindow() - Hide the window\n[core] ADDED: GetWindowHandle() - Get native window handle\n[core] ADDED: GetMonitorCount() - Get number of connected monitors\n[core] ADDED: GetMonitorWidth() - Get primary monitor width\n[core] ADDED: GetMonitorHeight() - Get primary monitor height\n[core] ADDED: GetMonitorPhysicalWidth() - Get primary monitor physical width in millimetres\n[core] ADDED: GetMonitorPhysicalHeight() - Get primary monitor physical height in millimetres\n[core] ADDED: GetMonitorName() - Get the human-readable, UTF-8 encoded name of the primary monitor\n[core] ADDED: GetClipboardText() - Get clipboard text content\n[core] ADDED: SetClipboardText() - Set clipboard text content\n[core] ADDED: ColorFromHSV() - Returns a Color from HSV values\n[core] ADDED: FileExists() - Check if file exists\n[core] ADDED: GetFileNameWithoutExt() - Get filename string without extension (memory should be freed)\n[core] ADDED: GetDirectoryFiles() - Get filenames in a directory path (memory should be freed)\n[core] ADDED: ClearDirectoryFiles() - Clear directory files paths buffers (free memory)\n[core] ADDED: OpenURL() - Open URL with default system browser (if available)\n[core] ADDED: SetMouseOffset() - Set mouse offset\n[core] ADDED: SetMouseScale() - Set mouse scaling\n[core] REMOVED: ShowLogo() - Activate raylib logo at startup (can be done with flags)\n[shapes] ADDED: DrawCircleSector() - Draw a piece of a circle\n[shapes] ADDED: DrawCircleSectorLines() - Draw circle sector outline\n[shapes] ADDED: DrawRing() - Draw ring\n[shapes] ADDED: DrawRingLines() - Draw ring outline\n[shapes] ADDED: DrawRectangleRounded() - Draw rectangle with rounded edges\n[shapes] ADDED: DrawRectangleRoundedLines() - Draw rectangle with rounded edges outline\n[shapes] ADDED: SetShapesTexture() - Define default texture used to draw shapes\n[textures] REVIEWED: ExportImage() - Reorder function parameters\n[textures] REVIEWED: ImageDrawRectangle() - Remove unneeded parameter\n[textures] ADDED: ExportImageAsCode() - Export image as code file defining an array of bytes\n[textures] ADDED: LoadTextureCubemap() - Load cubemap from image, multiple image cubemap layouts supported\n[textures] ADDED: ImageExtractPalette() - Extract color palette from image to maximum size (memory should be freed)\n[textures] ADDED: ImageDrawRectangleLines() - Draw rectangle lines within an image\n[textures] ADDED: DrawTextureQuad() - Draw texture quad with tiling and offset parameters\n[textures] ADDED: DrawTextureNPatch() - Draws a texture (or part of it) that stretches or shrinks nicely\n[models] REVIEWED: LoadMesh() -> LoadMeshes() - Support multiple meshes loading\n[models] REVIEWED: LoadMaterial() -> LoadMaterials() - Support multiple materials loading\n[models] REVIEWED: ExportMesh() - Reorder parameters\n[models] ADDED: DrawCubeWiresV() - Draw cube wires (Vector version)\n[models] ADDED: GenMeshPoly() - Generate polygonal mesh\n[models] ADDED: SetMaterialTexture() - Set texture for a material map type (MAP_DIFFUSE, MAP_SPECULAR...)\n[models] ADDED: SetModelMeshMaterial() - Set material for a mesh\n[models] ADDED: LoadModelAnimations() - Load model animations from file\n[models] ADDED: UpdateModelAnimation() - Update model animation pose\n[models] ADDED: UnloadModelAnimation() - Unload animation data\n[models] ADDED: IsModelAnimationValid() - Check model animation skeleton match\n[rlgl] Improved internal batching mechanism (multibuffering support, triangle texcoords...)\n[rlgl] REVIEWED: rlPushMatrix()/rlPopMatrix() - Now works like OpenGL 1.1\n[rlgl] REVIEWED: SetShaderValue() - More generic, now requires uniform type\n[rlgl] REMOVED: SetShaderValuei() - Can be acoomplished with new SetShaderValue()\n[rlgl] ADDED: SetShaderValueV() - Set shader uniform value vector\n[rlgl] ADDED: SetShaderValueTexture() - Set shader uniform value for texture\n[rlgl] ADDED: BeginScissorMode() - Begin scissor mode (define screen area for following drawing)\n[rlgl] ADDED: EndScissorMode() - End scissor mode\n[rlgl] ADDED: SetVrConfiguration() - Set stereo rendering configuration parameters\n[rlgl] REVIEWED: InitVrSimulator() - No input parameter required, use SetVrConfiguration()\n[text] REVIEWED: LoadFontEx() - Reorder function parameters\n[text] REVIEWED: LoadFontData() - Reorder function parameters\n[text] REVIEWED: GenImageFontAtlas() - Reorder function parameters\n[text] RENAMED: FormatText() -> TextFormat()\n[text] RENAMED: SubText() -> TextSubtext()\n[text] ADDED: LoadFontFromImage() - Load font from Image (XNA style)\n[text] ADDED: DrawTextRec() - Draw text using font inside rectangle limits\n[text] ADDED: DrawTextRecEx() - Draw text using font inside rectangle limits with support for text selection\n[text] ADDED: TextIsEqual() - Check if two text string are equal\n[text] ADDED: TextLength() - Get text length, checks for '\\0' ending\n[text] ADDED: TextReplace() - Replace text string (memory should be freed!)\n[text] ADDED: TextInsert() - Insert text in a position (memory should be freed!)\n[text] ADDED: TextJoin() - Join text strings with delimiter\n[text] ADDED: TextSplit() - Split text into multiple strings\n[text] ADDED: TextAppend() - Append text at specific position and move cursor!\n[text] ADDED: TextFindIndex() - Find first text occurrence within a string\n[text] ADDED: TextToUpper() - Get upper case version of provided string\n[text] ADDED: TextToLower() - Get lower case version of provided string\n[text] ADDED: TextToPascal() - Get Pascal case notation version of provided string\n[text] ADDED: TextToInteger() - Get integer value from text (negative values not supported)\n[raudio] ADDED: ExportWave() - Export wave data to file\n[raudio] ADDED: ExportWaveAsCode() - Export wave sample data to code (.h)\n[raudio] ADDED: IsAudioStreamPlaying() - Check if audio stream is playing\n[raudio] ADDED: SetAudioStreamVolume() - Set volume for audio stream (1.0 is max level)\n[raudio] ADDED: SetAudioStreamPitch() - Set pitch for audio stream (1.0 is base level)\n[examples] Complete review of full examples collection, many additions\n[examples] ADDED: core_custom_logging - Custom trace log system\n[examples] ADDED: core_input_multitouch - Multitouch input example\n[examples] ADDED: core_window_letterbox - Window adapted to screen\n[examples] ADDED: core_loading_thread - Data loading in second thread\n[examples] REVIEWED: core_input_gamepad - Adapted to new gamepad system\n[examples] REVIEWED: core_vr_simulator - HMD device parameters and distortion shader should be provided\n[examples] ADDED: core_window_scale_letterbox - Windows resizing and letterbox content\n[examples] ADDED: shapes_rectangle_scaling_mouse - Scale a rectangle with mouse\n[examples] ADDED: shapes_draw_circle_sector - Circle sector drawing\n[examples] ADDED: shapes_draw_ring - Ring drawing\n[examples] ADDED: shapes_draw_rectangle_rounded - Rounded rectangle drawing\n[examples] ADDED: shapes_bouncing_ball - Ball bouncing in the screen\n[examples] ADDED: shapes_collision_area - Collision detection and drawing\n[examples] ADDED: shapes_following_eyes - Some maths on eyes and mouse\n[examples] ADDED: shapes_easings_ball_anim - Ball animation\n[examples] ADDED: shapes_easings_box_anim - Box animation\n[examples] ADDED: shapes_easings_rectangle_array - Rectangles animation\n[examples] REVIEWED: shapes_colors_palette - Reviewed color selection and text displaying\n[examples] ADDED: textures_background_scrolling - Scrolling and parallaz background effect\n[examples] ADDED: textures_image_npatch - Drawing N-Patch based boxes\n[examples] ADDED: textures_sprite_button - Sprite button with sound\n[examples] ADDED: textures_sprite_explosion - Sprite explosion with sound\n[examples] ADDED: textures_bunnymark - Benchmarking test\n[examples] ADDED: text_draw_inside_rectangle - Drawing text inside a delimited rectangle box\n[examples] ADDED: text_unicode - Multiple languages text drawing\n[examples] ADDED: text_rectangle_bound - Fit text inside a rectangle\n[examples] REVIEWED: text_bmfont_ttf - Simplified example\n[examples] ADDED: models_animation - Animated models loading and animation playing\n[examples] ADDED: models_obj_viewer - Draw and drop models viewer\n[examples] ADDED: models_rlgl_solar_system - Solar system simulation using rlgl functionality\n[examples] ADDED: models_first_person_maze - 3D maze fps\n[examples] ADDED: shaders_palette_switch - Switching color palette on shader\n[examples] ADDED: shaders_raymarching - Raymarching shader\n[examples] ADDED: shaders_texture_drawing - Texture drawing on GPU\n[examples] ADDED: shaders_texture_waves - Texture waves on shader\n[examples] ADDED: shaders_julia_set - Julia set fractals\n[examples] ADDED: shaders_eratosthenes - Prime number visualization shader\n[examples] REVIEWED: audio_raw_stream - Mostly rewritten\n[games] ADDED: GGJ19 game - Cat vs Roomba\n[*] Updated external libraries to latest version\n[*] Multiple bugs corrected (check github issues)\n\n-----------------------------------------------\nRelease:     raylib 2.0 (July 2018)\n-----------------------------------------------\nKEY CHANGES:\n  - Removed external dependencies (GLFW3 and OpenAL)\n  - Complete redesign of audio module to use miniaudio library\n  - Support AppVeyor and Travis CI (continuous integration) building\n  - Reviewed raymath.h for better consistency and performance (inlining)\n  - Refactor all #define SUPPORT_* into a single config.h\n  - Support TCC compiler (32bit and 64bit)\n\nDetailed changes:\n[build] REMOVED: GitHub develop branch\n[build] REMOVED: External dependencies GLFW and OpenAL\n[build] ADDED: Android 64bit ARM support\n[build] ADDED: FreeBSD, OpenBSD, NetBSD, Dragon Fly OS support\n[build] ADDED: Universal Windows Platform (UWP) support\n[build] ADDED: Wayland Linux desktop support\n[build] ADDED: AppVeyor CI for automatic Windows builds\n[build] ADDED: Travis CI for automatic Linux/macOS builds\n[build] ADDED: rglfw (GLFW3 module) to avoid external dependency\n[build] ADDED: VS2017 UWP project\n[build] ADDED: Builder project template\n[build] ADDED: Compiler memory sanitizer for better debug\n[build] ADDED: CMake package target and CI auto-deploy tags\n[build] ADDED: DEBUG library building support\n[build] ADDED: Notepad++ NppExec scripts\n[build] REVIEWED: VS2015 and VS2017 projects\n[build] REVIEWED: Android APK build pipeline\n[core] REVIEWED: Window creation hints to support transparent windows\n[core] Unified InitWindow() between platforms\n[core] Export Android main entry point\n[core] RENAMED: Begin3dMode() to BeginMode3D()\n[core] RENAMED: End3dMode() to EndMode3D()\n[core] RENAMED: Begin2dMode() to BeginMode2D()\n[core] RENAMED: End2dMode() to EndMode2D()\n[core] RENAMED: struct Camera to Camera3D\n[core] RENAMED: struct SpriteFont to Font -> plus all required functions!\n[core] RENAMED: enum TextureFormat to PixelFormat\n[core] REVIEWED: Rectangle params int to float\n[core] REVIEWED: timing system for macOS\n[core] REMOVED: ColorToFloat()\n[core] ADDED: GetCurrentTime() on macOS\n[core] ADDED: GetTime()\n[core] ADDED: struct Vector4\n[core] ADDED: SetTraceLog() to define trace log messages type\n[core] ADDED: GetFileName() to get filename from path string\n[core] ADDED: ColorToHSV()\n[core] ADDED: ColorNormalize()\n[core] ADDED: SetWindowSize() to scale Windows in runtime\n[core] ADDED: SetMouseScale() to scale mouse input\n[core] ADDED: key definitions - KEY_GRAVE, KEY_SLASH, KEY_BACKSLASH\n[core] RENAMED: GetHexValue() to ColorToInt()\n[core] REVIEWED: Fade()\n[core] REVIEWED: InitWindow() to avoid void pointer (safety)\n[core] Support camera 3d orthographic projection mode\n[shapes] ADDED: DrawRectangleLinesEx()\n[textures] Improved pixel formats support (32bit channels)\n[textures] Improved textures support for OpenGL 2.1\n[textures] REMOVED: DrawRectangleT() --> Added support to DrawRectangle()\n[textures] ADDED: GetPixelDataSize(); pixel data size in bytes (image or texture)\n[textures] ADDED: ImageAlphaClear() --> Clear alpha channel to desired color\n[textures] ADDED: ImageAlphaCrop() --> Crop image depending on alpha value\n[textures] ADDED: ImageAlphaPremultiply() --> Premultiply alpha channel\n[textures] ADDED: ImageDrawRectangle()\n[textures] ADDED: ImageMipmaps()\n[textures] ADDED: GenImageColor()\n[textures] ADDED: GetPixelDataSize()\n[textures] ADDED: ImageRotateCW()\n[textures] ADDED: ImageRotateCCW()\n[textures] ADDED: ImageResizeCanvas()\n[textures] ADDED: GetImageDataNormalized()\n[textures] REVIEWED: ImageFormat() to use normalized data\n[textures] REVIEWED: Manual mipmap generation\n[textures] REVIEWED: LoadASTC()\n[textures] REVIEWED: GenImagePerlinNoise()\n[textures] REVIEWED: ImageTextEx() to support UTF8 basic characters\n[textures] REVIEWED: GetTextureData() for RPI - requires some work\n[textures] Added new example: text drawing on image\n[text] Corrected issue with ttf font y-offset\n[text] Support SDF font data generation\n[text] ADDED: GenImageFontAtlas()\n[text] ADDED: LoadFontData() to load data from TTF file\n[text] REMOVED: LoadTTF() internal function\n[text] REVIEWED: DrawTextEx() - avoid rendering SPACE character!\n[text] RENAMED: GetDefaultFont() to GetFontDefault()\n[rlgl] ADDED: rlCheckBufferLimit()\n[rlgl] ADDED: LoadShaderCode()\n[rlgl] ADDED: GetMatrixModelview()\n[rlgl] ADDED: SetVrDistortionShader(Shader shader)\n[rlgl] REVIEWED: rlLoadTexture() - added mipmaps support, improved compressed textures loading\n[rlgl] REVIEWED: rlReadTexturePixels()\n[models] Support 4 components mesh.tangent data\n[models] Removed tangents generation from LoadOBJ()\n[models] ADDED: MeshTangents()\n[models] ADDED: MeshBinormals()\n[models] ADDED: ExportMesh()\n[models] ADDED: GetCollisionRayModel()\n[models] RENAMED: CalculateBoundingBox() to MeshBoundingBox()\n[models] REMOVED: GetCollisionRayMesh() - does not consider model transform\n[models] REVIEWED: LoadMesh() - fallback to default cube mesh if loading fails\n[audio] ADDED: Support for MP3 fileformat\n[audio] ADDED: IsAudioStreamPlaying()\n[audio] ADDED: SetAudioStreamVolume()\n[audio] ADDED: SetAudioStreamPitch()\n[utils] Corrected issue with SaveImageAs()\n[utils] RENAMED: SaveImageAs() to ExportImage()\n[utils] REMOVED: rres support - moved to external library (rres.h)\n[shaders] REVIEWED: GLSL 120 shaders\n[raymath] ADDED: Vector3RotateByQuaternion()\n[raymath] REVIEWED: math usage to reduce temp variables\n[raymath] REVIEWED: Avoid pointer-based parameters for API consistency\n[physac] REVIEWED: physac.h timing system\n[examples] Replaced dwarf model by brand new 3d assets: 3d medieval buildings\n[examples] Assets cleaning and some replacements\n[games] ADDED: GGJ18 game - transmission mission\n[games] REVIEWED: Light my Ritual game - improved gameplay drawing\n[*] Updated external libraries to latest version\n[*] Multiple bugs corrected (check github issues)\n\n-----------------------------------------------\nRelease:     raylib 1.8.0 (Oct 2017)\n-----------------------------------------------\nNOTE:\n  In this release, multiple parts of the library have been reviewed (again) for consistency and simplification.\n  It exposes more than 30 new functions in comparison with previous version and it improves overall programming experience.\n\nBIG CHANGES:\n  - New Image generation functions: Gradient, Checked, Noise, Cellular...\n  - New Mesh generation functions: Cube, Sphere, Cylinder, Torus, Knot...\n  - New Shaders and Materials systems to support PBR materials\n  - Custom Android APK build pipeline with simple Makefile\n  - Complete review of rlgl layer functionality\n  - Complete review of raymath functionality\n\ndetailed changes:\n[rlgl] RENAMED: rlglLoadTexture() to rlLoadTexture()\n[rlgl] RENAMED: rlglLoadRenderTexture() to rlLoadRenderTexture()\n[rlgl] RENAMED: rlglUpdateTexture() to rlUpdateTexture()\n[rlgl] RENAMED: rlglGenerateMipmaps() to rlGenerateMipmaps()\n[rlgl] RENAMED: rlglReadScreenPixels() to rlReadScreenPixels()\n[rlgl] RENAMED: rlglReadTexturePixels() to rlReadTexturePixels()\n[rlgl] RENAMED: rlglLoadMesh() to rlLoadMesh()\n[rlgl] RENAMED: rlglUpdateMesh() to rlUpdateMesh()\n[rlgl] RENAMED: rlglDrawMesh() to rlDrawMesh()\n[rlgl] RENAMED: rlglUnloadMesh() to rlUnloadMesh()\n[rlgl] RENAMED: rlglUnproject() to rlUnproject()\n[rlgl] RENAMED: LoadCompressedTexture() to LoadTextureCompressed()\n[rlgl] RENAMED: GetDefaultTexture() to GetTextureDefault()\n[rlgl] RENAMED: LoadDefaultShader() to LoadShaderDefault()\n[rlgl] RENAMED: LoadDefaultShaderLocations() to SetShaderDefaultLocations()\n[rlgl] RENAMED: UnloadDefaultShader() to UnLoadShaderDefault()\n[rlgl] ADDED: rlGenMapCubemap(), Generate cubemap texture map from HDR texture\n[rlgl] ADDED: rlGenMapIrradiance(), Generate irradiance texture map\n[rlgl] ADDED: rlGenMapPrefilter(), Generate prefilter texture map\n[rlgl] ADDED: rlGenMapBRDF(), Generate BRDF texture map\n[rlgl] ADDED: GetVrDeviceInfo(), Get VR device information for some standard devices\n[rlgl] REVIEWED: InitVrSimulator(), to accept device parameters as input\n[core] ADDED: SetWindowTitle(), Set title for window (only PLATFORM_DESKTOP)\n[core] ADDED: GetExtension(), Get file extension\n[shapes] REMOVED: DrawRectangleGradient(), replaced by DrawRectangleGradientV() and DrawRectangleGradientH()\n[shapes] ADDED: DrawRectangleGradientV(), Draw a vertical-gradient-filled rectangle\n[shapes] ADDED: DrawRectangleGradientH(), Draw a horizontal-gradient-filled rectangle\n[shapes] ADDED: DrawRectangleGradientEx(), Draw a gradient-filled rectangle with custom vertex colors\n[shapes] ADDED: DrawRectangleT(), Draw rectangle using text character\n[textures] ADDED: SaveImageAs(), Save image as PNG file\n[textures] ADDED: GenImageGradientV(), Generate image: vertical gradient\n[textures] ADDED: GenImageGradientH(), Generate image: horizontal gradient\n[textures] ADDED: GenImageGradientRadial(), Generate image: radial gradient\n[textures] ADDED: GenImageChecked(), Generate image: checked\n[textures] ADDED: GenImageWhiteNoise(), Generate image: white noise\n[textures] ADDED: GenImagePerlinNoise(), Generate image: perlin noise\n[textures] ADDED: GenImageCellular(), Generate image: cellular algorithm. Bigger tileSize means bigger cells\n[textures] ADDED: GenTextureCubemap(), Generate cubemap texture from HDR texture\n[textures] ADDED: GenTextureIrradiance(), Generate irradiance texture using cubemap data\n[textures] ADDED: GenTexturePrefilter(), Generate prefilter texture using cubemap data\n[textures] ADDED: GenTextureBRDF(), Generate BRDF texture using cubemap data\n[models] REMOVED: LoadMeshEx(), Mesh struct variables can be directly accessed\n[models] REMOVED: UpdateMesh(), very ineficient\n[models] REMOVED: LoadHeightmap(), use GenMeshHeightmap() and LoadModelFromMesh()\n[models] REMOVED: LoadCubicmap(), use GenMeshCubicmap() and LoadModelFromMesh()\n[models] RENAMED: LoadDefaultMaterial() to LoadMaterialDefault()\n[models] ADDED: GenMeshPlane(), Generate plane mesh (with subdivisions)\n[models] ADDED: GenMeshCube(), Generate cuboid mesh\n[models] ADDED: GenMeshSphere(), Generate sphere mesh (standard sphere)\n[models] ADDED: GenMeshHemiSphere(), Generate half-sphere mesh (no bottom cap)\n[models] ADDED: GenMeshCylinder(), Generate cylinder mesh\n[models] ADDED: GenMeshTorus(), Generate torus mesh\n[models] ADDED: GenMeshKnot(), Generate trefoil knot mesh\n[models] ADDED: GenMeshHeightmap(), Generate heightmap mesh from image data\n[models] ADDED: GenMeshCubicmap(), Generate cubes-based map mesh from image data\n[raymath] REVIEWED: full Matrix functionality to align with GLM in usage\n[raymath] RENAMED: Vector3 functions for consistency: Vector*() renamed to Vector3*()\n[build] Integrate Android APK building into examples Makefile\n[build] Integrate Android APK building into templates Makefiles\n[build] Improved Visual Studio 2015 project, folders, references...\n[templates] Reviewed the full pack to support Android building\n[examples] Reviewed full collection to adapt to raylib changes\n[examples] [textures] ADDED: textures_image_generation\n[examples] [models] ADDED: models_mesh_generation\n[examples] [models] ADDED: models_material_pbr\n[examples] [models] ADDED: models_skybox\n[examples] [models] ADDED: models_yaw_pitch_roll\n[examples] [others] REVIEWED: rlgl_standalone\n[examples] [others] REVIEWED: audio_standalone\n[github] Moved raylib webpage to own repo: github.com/raysan5/raylib.com\n[games] Reviewed game: Koala Seasons\n[*] Updated STB libraries to latest version\n[*] Multiple bugs corrected (check github issues)\n\n-----------------------------------------------\nRelease:     raylib 1.7.0 (20 May 2017)\n-----------------------------------------------\nNOTE:\n  In this new raylib release, multiple parts of the library have been reviewed for consistency and simplification.\n  It exposes almost 300 functions, around 30 new functions in comparison with previous version and, again,\n  it sets a stepping stone towards raylib future.\n\nBIG changes:\n  - More than 30 new functions added to the library, check list below.\n  - Support of configuration flags on every raylib module, to customize library build.\n  - Improved build system for all supported platforms with a unique Makefile to compile sources.\n  - Complete review of examples and sample games, added new sample material.\n  - Support automatic GIF recording of current window, just pressing Ctrl+F12\n  - Improved library consistency and organization in general.\n\nother changes:\n[core] Added function: SetWindowIcon(), to setup icon by code\n[core] Added function: SetWindowMonitor(), to set current display monitor\n[core] Added function: SetWindowMinSize(), to set minimum resize size\n[core] Added function: TakeScreenshot(), made public to API (also launched internally with F12)\n[core] Added function: GetDirectoryPath(), get directory for a given fileName (with path)\n[core] Added function: GetWorkingDirectory(), get current working directory\n[core] Added function: ChangeDirectory(), change working directory\n[core] Added function: TraceLog(), made public to API\n[core] Improved timing system to avoid busy wait loop on frame sync: Wait()\n[core] Added support for gamepad on HTML5 platform\n[core] Support mouse lock, useful for camera system\n[core] Review functions description comments\n[rlgl] Removed function: GetStandardShader(), removed internal standard shader\n[rlgl] Removed function: CreateLight(), removed internal lighting system\n[rlgl] Removed function: DestroyLight(), removed internal lighting system\n[rlgl] Removed function: InitVrDevice(), removed VR device render, using simulator\n[rlgl] Removed function: CloseVrDevice(), removed VR device render, using simulator\n[rlgl] Removed function: IsVrDeviceReady(), removed VR device render, using simulator\n[rlgl] Removed function: IsVrSimulator(), removed VR device render, using simulator\n[rlgl] Added function: InitVrSimulator(), init VR simulator for selected device\n[rlgl] Added function: CloseVrSimulator(), close VR simulator for current device\n[rlgl] Added function: IsVrSimulatorReady(), detect if VR device is ready\n[rlgl] Added function: BeginVrDrawing(), begin VR simulator stereo rendering\n[rlgl] Added function: EndVrDrawing(), end VR simulator stereo rendering\n[rlgl] Renamed function: ReadTextFile() to LoadText() and exposed to API\n[rlgl] Removed internal lighting system and standard shader, moved to example\n[rlgl] Removed Oculus Rift support, moved to oculus_rift example\n[rlgl] Removed VR device support and replaced by VR simulator\n[shapes] Added function: DrawLineEx(), draw line with QUADS, supports custom line thick\n[shapes] Added function: DrawLineBezier(), draw a line using cubic-bezier curves in-out\n[shapes] Added function: DrawRectanglePro(), draw a color-filled rectangle with pro parameters\n[textures] Removed function: LoadImageFromRES(), redesigning custom RRES fileformat\n[textures] Removed function: LoadTextureFromRES(), redesigning custom RRES fileformat\n[textures] Removed function: LoadTextureEx(), use instead Image -> LoadImagePro(), LoadImageEx()\n[textures] Added function: LoadImagePro()), load image from raw data with parameters\n[textures] Review TraceLog() message when image file not found\n[text] Renamed function: LoadSpriteFontTTF() to LoadSpriteFontEx(), for consistency\n[text] Removed rBMF fileformat support, replaced by .png\n[text] Refactor SpriteFont struct (better for rres custom fileformat)\n[text] Renamed some variables for consistency\n[models] Added function: LoadMesh(), load mesh from file\n[models] Added function: LoadMeshEx(), load mesh from vertex data\n[models] Added function: UnloadMesh(), unload mesh from memory (RAM and/or VRAM)\n[models] Added function: GetCollisionRayMesh(), get collision info between ray and mesh\n[models] Added function: GetCollisionRayTriangle(), get collision info between ray and triangle\n[models] Added function: GetCollisionRayGround(), get collision info between ray and ground plane\n[models] Renamed function: LoadModelEx() to LoadModelFromMesh()\n[models] Removed function: DrawLight(), removed internal lighting system\n[models] Renamed function: LoadModelEx() to LoadModelFromMesh() for consistency\n[models] Removed function: LoadStandardMaterial(), removed internal standard shader\n[models] Removed function: LoadModelFromRES(), redesigning custom RRES fileformat\n[models] Renamed multiple variables for consistency\n[audio] Added function: SetMasterVolume(), define listener volume\n[audio] Added function: ResumeSound(), resume a paused sound\n[audio] Added function: SetMusicLoopCount(), set number of repeats for a music\n[audio] Added function: LoadWaveEx(), load wave from raw audio data\n[audio] Added function: WaveCrop(), crop wave audio data\n[audio] Added function: WaveFormat(), format audio data\n[audio] Removed function: LoadSoundFromRES(), redesigning custom RRES fileformat\n[audio] Added support for 32bit audio samples\n[audio] Preliminary support for multichannel, limited to mono and stereo\n[audio] Make sure buffers are ready for update: UpdateMusicStream()\n[utils] Replaced function: GetExtension() by IsFileExtension() and made public to API\n[utils] Unified function: TraceLog() between Android and other platforms\n[utils] Removed internal function: GetNextPOT(), simplified implementation\n[raymath] Added function: QuaternionToEuler(), to work with Euler angles\n[raymath] Added function: QuaternionFromEuler(), to work with Euler angles\n[raymath] Added multiple Vector2 math functions\n[build] Integrate Android source building into Makefile\n[example] Added example: shapes_lines_bezier\n[example] Added example: text_input_box\n[github] Moved gh-pages branch to master/docs\n[github] Moved rlua.h and Lua examples to own repo: raylib-lua\n[games] Reviewed full games collection\n[games] New game added to collection: Koala Seasons\n[*] Reviewed and improved examples collection (new assets)\n[*] Reorganized library functions, structs, enums\n[*] Updated STB libraries to latest version\n\n-----------------------------------------------\nRelease:     raylib 1.6.0 (20 November 2016)\n-----------------------------------------------\nNOTE:\n  This new raylib version commemorates raylib 3rd anniversary and represents another complete review of the library.\n  It includes some interesting new features and is a stepping stone towards raylib future.\n\nHUGE changes:\n[rlua] Lua BINDING: Complete raylib Lua binding, ALL raylib functions ported to Lua plus the +60 code examples.\n[audio] COMPLETE REDESIGN: Improved music support and also raw audio data processing and playing, +20 new functions added.\n[physac] COMPLETE REWRITE: Improved performance, functionality and simplified usage, moved to own repository and added multiple examples!\n\nother changes:\n\n[core] Corrected issue on OSX with HighDPI display\n[core] Added flag to allow resizable window\n[core] Allow no default font loading\n[core] Corrected old issue with mouse buttons on web\n[core] Improved gamepad support, unified across platforms\n[core] Gamepad id functionality: GetGamepadName(), IsGamepadName()\n[core] Gamepad buttons/axis checking functionality:\n[core] Reviewed Android key inputs system, unified with desktop\n[rlgl] Redesigned lighting shader system\n[rlgl] Updated standard shader for better performance\n[rlgl] Support alpha on framebuffer: rlglLoadRenderTexture()\n[rlgl] Reviewed UpdateVrTracking() to update camera\n[rlgl] Added IsVrSimulator() to check for VR simulator\n[shapes] Corrected issue on DrawPolyEx()\n[textures] Simplified supported image formats support\n[textures] Improved text drawing within an image: ImageDrawText()\n[textures] Support image alpha mixing: ImageAlphaMask()\n[textures] Support textures filtering: SetTextureFilter()\n[textures] Support textures wrap modes: SetTextureWrap()\n[text] Improved TTF spritefont generation: LoadSpriteFontTTF()\n[text] Improved AngelCode fonts support (unordered chars)\n[text] Added TraceLog info on image spritefont loading\n[text] Improved text measurement: MeasureTextEx()\n[models] Improved OBJ loading flexibility\n[models] Reviewed functions: DrawLine3D(), DrawCircle3D()\n[models] Removed function: ResolveCollisionCubicmap()\n[camera] Redesigned camera system and ported to header-only\n[camera] Removed function: UpdateCameraPlayer()\n[gestures] Redesigned gestures module to header-only\n[audio] Simplified Music loading and playing system\n[audio] Added trace on audio device closing\n[audio] Reviewed Wave struct, improved flexibility\n[audio] Support sound data update: UpdateSound()\n[audio] Added support for FLAC audio loading/streaming\n[raygui] Removed raygui from raylib repo (moved to own repo)\n[build] Added OpenAL static library\n[build] Added Visual Studio 2015 projects\n[build] Support shared/dynamic raylib compilation\n[*] Updated LibOVR to SDK version 1.8\n[*] Updated games to latest raylib version\n[*] Improved examples and added new ones\n[*] Improved Android support\n\n-----------------------------------------------\nRelease:     raylib 1.5.0 (18 July 2016)\n-----------------------------------------------\nNOTE:\n  Probably this new version is the biggest boost of the library ever, lots of parts of the library have been redesigned,\n  lots of bugs have been solved and some **AMAZING** new features have been added.\n\nHUGE changes:\n[rlgl] OCULUS RIFT CV1: Added support for VR, not oly Oculus Rift CV1 but also stereo rendering simulator (multiplatform).\n[rlgl] MATERIALS SYSTEM: Added support for Materials (.mtl) and multiple material properties: diffuse, specular, normal.\n[rlgl] LIGHTING SYSTEM: Added support for up to 8 lights of 3 different types: Omni, Directional and Spot.\n[physac] REDESIGNED: Improved performance and simplified usage, physic objects now are managed internally in a second thread!\n[audio] CHIPTUNES: Added support for module audio music (.xm, .mod) loading and playing. Multiple mixing channels supported.\n\nother changes:\n\n[core] Review Android button inputs\n[core] Support Android internal data storage\n[core] Renamed WorldToScreen() to GetWorldToScreen()\n[core] Removed function SetCustomCursor()\n[core] Removed functions BeginDrawingEx(), BeginDrawingPro()\n[core] Replaced functions InitDisplay() + InitGraphics() with: InitGraphicsDevice()\n[core] Added support for field-of-view Y (fovy) on 3d Camera\n[core] Added 2D camera mode functions: Begin2dMode() - End2dMode()\n[core] Translate mouse inputs to Android touch/gestures internally\n[core] Translate mouse inputs as touch inputs in HTML5\n[core] Improved function GetKeyPressed() to support multiple keys (including function keys)\n[core] Improved gamepad support, specially for RaspberryPi (including multiple gamepads support)\n[rlgl] Support stereo rendering simulation (duplicate draw calls by viewport, optimized)\n[rlgl] Added distortion shader (embeded) to support custom VR simulator: shader_distortion.h\n[rlgl] Added support for OpenGL 2.1 on desktop\n[rlgl] Improved 2D vs 3D drawing system (lines, triangles, quads)\n[rlgl] Improved DXT-ETC1 support on HTML5\n[rlgl] Review function: rlglUnproject()\n[rlgl] Removed function: rlglInitGraphics(), integrated into rlglInit()\n[rlgl] Updated Mesh and Shader structs\n[rlgl] Simplified internal (default) dynamic buffers\n[rlgl] Added support for indexed and dynamic mesh data\n[rlgl] Set fixed vertex attribs location points\n[rlgl] Improved mesh data loading support\n[rlgl] Added standard shader (embeded) to support materials and lighting: shader_standard.h\n[rlgl] Added light functions: CreateLight(), DestroyLight()\n[rlgl] Added wire mode functions: rlDisableWireMode(), rlEnableWireMode()\n[rlgl] Review function consistency, added: rlglLoadMesh(), rlglUpdateMesh(), rlglDrawMesh(), rlglUnloadMesh()\n[rlgl] Replaced SetCustomShader() by: BeginShaderMode() - EndShaderMode()\n[rlgl] Replaced SetBlendMode() by: BeginBlendMode() - EndBlendMode()\n[rlgl] Added functions to customize internal matrices: SetMatrixProjection(), SetMatrixModelview()\n[rlgl] Unified internal shaders to only one default shader\n[rlgl] Added support for render to texture (RenderTexture2D):\n          LoadRenderTexture() - UnloadRenderTexture()\n          BeginTextureMode() - EndTextureMode()\n[rlgl] Removed SetShaderMap*() functions\n[rlgl] Redesigned default buffers usage functions:\n          LoadDefaultBuffers() - UnloadDefaultBuffers()\n          UpdateDefaultBuffers() - DrawDefaultBuffers()\n[shapes] Corrected bug on GetCollisionRec()\n[textures] Added support for Nearest-Neighbor image scaling\n[textures] Added functions to draw text on image: ImageDrawText(), ImageDrawTextEx()\n[text] Reorganized internal functions: Added LoadImageFont()\n[text] Security check for unsupported BMFonts\n[models] Split mesh creation from model loading on heightmap and cubicmap\n[models] Updated BoundingBox collision detections\n[models] Added color parameter to DrawBoundigBox()\n[models] Removed function: DrawQuad()\n[models] Removed function: SetModelTexture()\n[models] Redesigned DrawPlane() to use RL_TRIANGLES\n[models] Redesigned DrawRectangleV() to use RL_TRIANGLES\n[models] Redesign to accomodate new materials system: LoadMaterial()\n[models] Added material functions: LoadDefaultMaterial(), LoadStandardMaterial()\n[models] Added MTL material loading support: LoadMTL()\n[models] Added function: DrawLight()\n[audio] Renamed SoundIsPlaying() to IsSoundPlaying()\n[audio] Renamed MusicIsPlaying() to IsMusicPlaying()\n[audio] Support multiple Music streams (indexed)\n[audio] Support multiple mixing channels\n[gestures] Improved and reviewed gestures system\n[raymath] Added QuaternionInvert()\n[raymath] Removed function: PrintMatrix()\n[raygui] Ported to header-only library (https://github.com/raysan5/raygui)\n[shaders] Added depth drawing shader (requires a depth texture)\n[shaders] Reviewed included shaders and added comments\n[OpenAL Soft] Updated to latest version (1.17.2)\n[GLFW3] Updated to latest version (3.2)\n[stb] Updated to latest headers versions\n[GLAD] Converted to header only library and simplified to only used extensions\n[*] Reorganize library folders: external libs moved to src/external folder\n[*] Reorganize src folder for Android library\n[*] Review external dependencies usage\n[*] Improved Linux and OSX build systems\n[*] Lots of tweaks and bugs corrected all around\n\n-----------------------------------------------\nRelease:     raylib 1.4.0 (22 February 2016)\n-----------------------------------------------\nNOTE:\n  This version supposed another big improvement for raylib, including new modules and new features.\n  More than 30 new functions have been added to previous raylib version.\n  Around 8 new examples and +10 new game samples have been added.\n\nBIG changes:\n[textures] IMAGE MANIPULATION: Functions to crop, resize, colorize, flip, dither and even draw image-to-image or text-to-image.\n[text] SPRITEFONT SUPPORT: Added support for AngelCode fonts (.fnt) and TrueType fonts (.ttf).\n[gestures] REDESIGN: Gestures system simplified and prepared to process generic touch events, including mouse events (multiplatform).\n[physac] NEW MODULE: Basic 2D physics support, use colliders and rigidbodies; apply forces to physic objects.\n\nother changes:\n\n[rlgl] Removed GLEW library dependency, now using GLAD\n[rlgl] Implemented alternative to glGetTexImage() on OpenGL ES\n[rlgl] Using depth data on batch drawing\n[rlgl] Reviewed glReadPixels() function\n[core][rlgl] Reviewed raycast system, now 3D picking works\n[core] Android: Reviewed Android App cycle, paused if inactive\n[shaders] Implemented Blinn-Phong lighting shading model\n[textures] Implemented Floyd-Steinberg dithering - ImageDither()\n[text] Added line-break support to DrawText()\n[text] Added TrueType Fonts support (using stb_truetype)\n[models] Implement function: CalculateBoundingBox(Mesh mesh)\n[models] Added functions to check Ray collisions\n[models] Improve map resolution control on LoadHeightmap()\n[camera] Corrected small-glitch on zoom-in with mouse-wheel\n[gestures] Implemented SetGesturesEnabled() to enable only some gestures\n[gestures] Implemented GetElapsedTime() on Windows system\n[gestures] Support mouse gestures for desktop platforms\n[raymath] Complete review of the module and converted to header-only\n[easings] Added new module for easing animations\n[stb] Updated to latest headers versions\n[*] Lots of tweaks around\n\n-----------------------------------------------\nRelease:     raylib 1.3.0 (01 September 2015)\n-----------------------------------------------\nNOTE:\n  This version supposed a big boost for raylib, new modules have been added with lots of features.\n  Most of the modules have been completely reviewed to accomodate to the new features.\n  Over 50 new functions have been added to previous raylib version.\n  Most of the examples have been redone and +10 new advanced examples have been added.\n\nBIG changes:\n[rlgl] SHADERS: Support for model shaders and postprocessing shaders (multiple functions)\n[textures] FORMATS: Support for multiple internal formats, including compressed formats\n[camera] NEW MODULE: Set of cameras for 3d view: Free, Orbital, 1st person, 3rd person\n[gestures] NEW MODULE: Gestures system for Android and HTML5 platforms\n[raygui] NEW MODULE: Set of IMGUI elements for tools development (experimental)\n\nother changes:\n\n[rlgl] Added check for OpenGL supported extensions\n[rlgl] Added function SetBlenMode() to select some predefined blending modes\n[core] Added support for drop&drag of external files into running program\n[core] Added functions ShowCursor(), HideCursor(), IsCursorHidden()\n[core] Renamed function SetFlags() to SetConfigFlags()\n[shapes] Simplified some functions to improve performance\n[textures] Review of Image struct to support multiple data formats\n[textures] Added function LoadImageEx()\n[textures] Added function LoadImageRaw()\n[textures] Added function LoadTextureEx()\n[textures] Simplified function parameters LoadTextureFromImage()\n[textures] Added function GetImageData()\n[textures] Added function GetTextureData()\n[textures] Renamed function ConvertToPOT() to ImageConvertToPOT()\n[textures] Added function ImageConvertFormat()\n[textures] Added function GenTextureMipmaps()\n[text] Added support for Latin-1 Extended characters for default font\n[text] Redesigned SpriteFont struct, replaced Character struct by Rectangle\n[text] Removed function GetFontBaseSize(), use directly spriteFont.size\n[models] Review of struct: Model (added shaders support)\n[models] Added 3d collision functions (sphere vs sphere vs box vs box)\n[models] Added function DrawCubeTexture()\n[models] Added function DrawQuad()\n[models] Added function DrawRay()\n[models] Simplified function DrawPlane()\n[models] Removed function DrawPlaneEx()\n[models] Simplified function DrawGizmo()\n[models] Removed function DrawGizmoEx()\n[models] Added function LoadModelEx()\n[models] Review of function LoadCubicMap()\n[models] Added function ResolveCollisionCubicmap()\n[audio] Decopupled from raylib, now this module can be used as standalone\n[audio] Added function UpdateMusicStream()\n[raymath] Complete review of the module\n[stb] Updated to latest headers versions\n[*] Lots of tweaks around\n\n-----------------------------------------------\nRelease:     raylib 1.2.2 (31 December 2014)\n-----------------------------------------------\n[*] Added support for HTML5 compiling (emscripten, asm.js)\n[core] Corrected bug on input handling (keyboard and mouse)\n[textures] Renamed function CreateTexture() to LoadTextureFromImage()\n[textures] Added function ConvertToPOT()\n[rlgl] Added support for color tint on models on GL 3.3+ and ES2\n[rlgl] Added support for normals on models\n[models] Corrected bug on DrawBillboard()\n[models] Corrected bug on DrawHeightmap()\n[models] Renamed LoadCubesmap() to LoadCubicmap()\n[audio] Added function LoadSoundFromWave()\n[makefile] Added support for Linux and OSX compiling\n[stb] Updated to latest headers versions\n[*] Lots of tweaks around\n\n---------------------------------------------------------------\nUpdate:     raylib 1.2.1 (17 October 2014) (Small Fixes Update)\n---------------------------------------------------------------\n[core] Added function SetupFlags() to preconfigure raylib Window\n[core] Corrected bug on fullscreen mode\n[rlgl] rlglDrawmodel() - Added rotation on Y axis\n[text] MeasureTextEx() - Corrected bug on measures for default font\n\n-----------------------------------------------\nRelease:     raylib 1.2 (16 September 2014)\n-----------------------------------------------\nNOTE:\n  This version supposed a complete redesign of the [core] module to support Android and Raspberry Pi.\n  Multiples modules have also been tweaked to accomodate to the new platforms, specially [rlgl]\n\n[core] Added multiple platforms support: Android and Raspberry Pi\n[core] InitWindow() - Complete rewrite and split for Android\n[core] InitDisplay() - Internal function added to calculate proper display size\n[core] InitGraphics() - Internal function where OpenGL graphics are initialized\n[core] Complete refactoring of input functions to accomodate to new platforms\n[core] Mouse and Keyboard raw data reading functions added for Raspberry Pi\n[core] GetTouchX(), GetTouchY() - Added for Android\n[core] Added Android callbacks to process inputs and Android activity commands\n[rlgl] Adjusted buffers depending on platform\n[rlgl] Added security check in case deployed vertex excess buffer size\n[rlgl] Adjusted indices type depending on GL version (int or short)\n[rlgl] Fallback to VBOs only usage if VAOs not supported on ES2\n[rlgl] rlglLoadModel() stores vbo ids on new Model struct\n[textures] Added support for PKM files (ETC1, ETC2 compression support)\n[shapes] DrawRectangleV() - Modified, depending on OGL version uses TRIANGLES or QUADS\n[text] LoadSpriteFont() - Modified to use LoadImage()\n[models] Minor changes on models loading to accomodate to new Model struct\n[audio] PauseMusicStream(), ResumeMusicStream() - Added\n[audio] Reduced music buffer size to avoid stalls on Raspberry Pi\n[src] Added makefile for Windows and RPI\n[src] Added resources file (raylib icon and executable info)\n[examples] Added makefile for Windows and RPI\n[examples] Renamed and merged with test examples for coherence with module names\n[templates] Added multiple templates to be use as a base-code for games\n\n-----------------------------------------------\nRelease:     raylib 1.1.1 (22 July 2014)\n-----------------------------------------------\n[core] ShowLogo() - To enable raylib logo animation at startup\n[core] Corrected bug with window resizing\n[rlgl] Redefined colors arrays to use byte instead of float\n[rlgl] Removed double buffer system (no performance improvement)\n[rlgl] rlglDraw() - Reorganized buffers drawing order\n[rlgl] Corrected bug on screen resizing\n[shapes] DrawRectangle() - Use QUADS instead of TRIANGLES\n[models] DrawSphereWires() - Corrected some issues\n[models] LoadOBJ() - Redesigned to support multiple meshes\n[models] LoadCubesMap() - Loading a map as cubes (by pixel color)\n[textures] Added security check if file doesn't exist\n[text] Corrected bug on SpriteFont loading\n[examples] Corrected some 3d examples\n[test] Added cubesmap loading test\n\n-----------------------------------------------\nRelease:     raylib 1.1.0 (19 April 2014)\n-----------------------------------------------\nNOTE:\n  This version supposed a complete internal redesign of the library to support OpenGL 3.3+ and OpenGL ES 2.0.\n  New module [rlgl] has been added to 'translate' immediate mode style functions (i.e. rlVertex3f()) to GL 1.1, 3.3+ or ES2.\n  Another new module [raymath] has also been added with lot of useful 3D math vector-matrix-quaternion functions.\n\n[rlgl] New module, abstracts OpenGL rendering (multiple versions support)\n[raymath] New module, useful 3D math vector-matrix-quaternion functions\n[core] Adapt all OpenGL code (initialization, drawing) to use [rlgl]\n[shapes] Rewrite all shapes drawing functions to use [rlgl]\n[textures] Adapt texture GPU loading to use [rlgl]\n[textures] Added support for DDS images (compressed and uncompressed)\n[textures] CreateTexture() - Redesigned to add mipmap automatic generation\n[textures] DrawTexturePro() - Redesigned and corrected bugs\n[models] Rewrite all 3d-shapes drawing functions to use [rlgl]\n[models] Adapt model loading and drawing to use [rlgl]\n[models] Model struct updated to include texture id\n[models] SetModelTexture() - Added, link a texture to a model\n[models] DrawModelEx() - Redesigned with extended parameters\n[audio] Added music streaming support (OGG files)\n[audio] Added support for OGG files as Sound\n[audio] PlayMusicStream() - Added, open a new music stream and play it\n[audio] StopMusicStream() - Added, stop music stream playing and close stream\n[audio] PauseMusicStream() - Added, pause music stream playing\n[audio] MusicIsPlaying() - Added, to check if music is playing\n[audio] SetMusicVolume() - Added, set volume for music\n[audio] GetMusicTimeLength() - Added, get current music time length (in seconds)\n[audio] GetMusicTimePlayed() - Added, get current music time played (in seconds)\n[utils] Added log tracing functionality - TraceLog(), TraceLogOpen(), TraceLogClose()\n[*] Log tracing messages all around the code\n\n-----------------------------------------------\nRelease:     raylib 1.0.6 (16 March 2014)\n-----------------------------------------------\n[core] Removed unused lighting-system code\n[core] Removed SetPerspective() function, calculated directly\n[core] Unload and reload default font on fullscreen toggle\n[core] Corrected bug gamepad buttons checking if no gamepad available\n[texture] DrawTextureV() - Added, to draw using Vector2 for position\n[texture] LoadTexture() - Redesigned, now uses LoadImage() + CreateTexture()\n[text] FormatText() - Corrected memory leak bug\n[models] Added Matrix struct and related functions\n[models] DrawBillboard() - Reviewed, now it works!\n[models] DrawBillboardRec() - Reviewed, now it works!\n[tests] Added folder with multiple tests for new functions\n\n-----------------------------------------------\nUpdate:     raylib 1.0.5 (28 January 2014)\n-----------------------------------------------\n[audio] LoadSound() - Corrected a bug, WAV file was not closed!\n[core] GetMouseWheelMove() - Added, check mouse wheel Y movement\n[texture] CreateTexture2D() renamed to CreateTexture()\n[models] LoadHeightmap() - Added, Heightmap can be loaded as a Model\n[tool] rREM updated, now supports (partially) drag and drop of files\n\n-----------------------------------------------\nRelease:     raylib 1.0.4 (23 January 2014)\n-----------------------------------------------\n[tool] Published a first alpha version of rREM tool (raylib Resource Embedder)\n[core] GetRandomValue() - Bug corrected, now works right\n[core] Fade() - Added, fades a color to an alpha percentadge\n[core] WriteBitmap() - Moved to new module: utils.c, not used anymore\n[core] TakeScreenshot() - Now uses WritePNG() (utils.c)\n[utils] New module created with utility functions\n[utils] WritePNG() - Write a PNG file (used by TakeScreenshot() on core)\n[utils] DecompressData() - Added, used for rRES resource data decompresion\n[textures] LoadImageFromRES() - Added, load an image from a rRES resource file\n[textures] LoadTextureFromRES() - Added, load a texture from a rRES resource file\n[audio] LoadSoundFromRES() - Added, load a sound from a rRES resource file\n[audio] IsPlaying() - Added, check if a sound is currently playing\n[audio] SetVolume() - Added, set the volume for a sound\n[audio] SetPitch() - Added, set the pitch for a sound\n[examples] ex06a_color_select completed\n[examples] ex06b_logo_anim completed\n[examples] ex06c_font select completed\n\n-----------------------------------------------\nRelease:     raylib 1.0.3 (19 December 2013)\n-----------------------------------------------\n[fonts] Added 8 rBMF free fonts to be used on projects!\n[text] LoadSpriteFont() - Now supports rBMF file loading (raylib Bitmap Font)\n[examples] ex05a_sprite_fonts completed\n[examples] ex05b_rbmf_fonts completed\n[core] InitWindowEx() - InitWindow with extended parameters, resizing option and custom cursor!\n[core] GetRandomValue() - Added, returns a random value within a range (int)\n[core] SetExitKey() - Added, sets a key to exit program (default is ESC)\n[core] Custom cursor not drawn when mouse out of screen\n[shapes] CheckCollisionPointRec() - Added, check collision between point and rectangle\n[shapes] CheckCollisionPointCircle() - Added, check collision between point and circle\n[shapes] CheckCollisionPointTriangle() - Added, check collision between point and triangle\n[shapes] DrawPoly() - Added, draw regular polygons of n sides, rotation can be defined!\n\n-----------------------------------------------\nRelease:     raylib 1.0.2 (1 December 2013)\n-----------------------------------------------\n[text] GetDefaultFont() - Added, get default SpriteFont to be used on DrawTextEx()\n[shapes] CheckCollisionRecs() - Added, check collision between rectangles\n[shapes] CheckCollisionCircles() - Added, check collision between circles\n[shapes] CheckCollisionCircleRec() - Added, check collision circle-rectangle\n[shapes] GetCollisionRec() - Added, get collision rectangle\n[textures] CreateTexture2D() - Added, create Texture2D from Image data\n[audio] Fixed WAV loading function, now audio works!\n\n-----------------------------------------------\nUpdate:     raylib 1.0.1 (28 November 2013)\n-----------------------------------------------\n[text] DrawText() - Removed spacing parameter\n[text] MeasureText() - Removed spacing parameter\n[text] DrawFps() - Renamed to DrawFPS() for coherence with similar function\n[core] IsKeyPressed() - Change functionality, check if key pressed once\n[core] IsKeyDown() - Added, check if key is being pressed\n[core] IsKeyReleased() - Change functionality, check if key released once\n[core] IsKeyUp() - Added, check if key is being NOT pressed\n[core] IsMouseButtonDown() - Added, check if mouse button is being pressed\n[core] IsMouseButtonPressed() - Change functionality, check if mouse button pressed once\n[core] IsMouseButtonUp() - Added, check if mouse button is NOT being pressed\n[core] IsMouseButtonReleased() - Change functionality, check if mouse button released once\n[textures] DrawTexturePro() - Added, texture drawing with 'pro' parameters\n[examples] Function changes applied to ALL examples\n\n-----------------------------------------------\nRelease:    raylib 1.0.0 (18 November 2013)\n-----------------------------------------------\n* Initial version\n* 6 Modules provided:\n    - core:     basic window/context creation functions, input management, timing functions\n    - shapes:   basic shapes drawing functions\n    - textures: image data loading and conversion to OpenGL textures\n    - text:     text drawing, sprite fonts loading, default font loading\n    - models:   basic 3d shapes drawing, OBJ models loading and drawing\n    - audio:    audio device initialization, WAV files loading and playing\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.89453125,
          "content": "cmake_minimum_required(VERSION 3.12)\nproject(raylib)\n\n# Avoid excessive expansion of variables in conditionals. In particular, if\n# \"PLATFORM\" is \"DRM\" then:\n#\n# if (${PLATFORM} MATCHES \"DRM\")\n#\n# may expand e.g to:\n#\n# if (/usr/lib/aarch64-linux-gnu/libdrm.so MATCHES \"DRM\")\n#\n# See https://cmake.org/cmake/help/latest/policy/CMP0054.html\ncmake_policy(SET CMP0054 NEW)\n\n# Makes a hidden visibility preset on a static lib respected\n# This is used to hide glfw's symbols from the library exports when building an so/dylib\n# See https://cmake.org/cmake/help/latest/policy/CMP0063.html\ncmake_policy(SET CMP0063 NEW)\n\n# Directory for easier includes\n# Anywhere you see include(...) you can check <root>/cmake for that file\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\n# RAYLIB_IS_MAIN determines whether the project is being used from root\n# or if it is added as a dependency (through add_subdirectory for example).\nif (\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n  set(RAYLIB_IS_MAIN TRUE)\nelse()\n  set(RAYLIB_IS_MAIN FALSE)\nendif()\n\n# Sets compiler flags and language standard\ninclude(CompilerFlags)\n\n# Registers build options that are exposed to cmake\ninclude(CMakeOptions.txt)\n\nif (UNIX AND NOT APPLE)\n  if (NOT GLFW_BUILD_WAYLAND AND NOT GLFW_BUILD_X11)\n    MESSAGE(FATAL_ERROR \"Cannot disable both Wayland and X11\")\n  endif()\nendif()\n\n# Main sources directory (the second parameter sets the output directory name to raylib)\nadd_subdirectory(src raylib)\n\n# Uninstall target\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Uninstall.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\nendif()\n\nif (${BUILD_EXAMPLES})\n  MESSAGE(STATUS \"Building examples is enabled\")\n  add_subdirectory(examples)\nendif()\n\nenable_testing()\n"
        },
        {
          "name": "CMakeOptions.txt",
          "type": "blob",
          "size": 1.7265625,
          "content": "# ## Config options ###\ninclude(CMakeDependentOption)\ninclude(EnumOption)\n\nenum_option(PLATFORM \"Desktop;Web;Android;Raspberry Pi;DRM;SDL\" \"Platform to build for.\")\n\nenum_option(OPENGL_VERSION \"OFF;4.3;3.3;2.1;1.1;ES 2.0;ES 3.0\" \"Force a specific OpenGL Version?\")\n\n# Configuration options\noption(BUILD_EXAMPLES \"Build the examples.\" ${RAYLIB_IS_MAIN})\noption(CUSTOMIZE_BUILD \"Show options for customizing your Raylib library build.\" OFF)\noption(ENABLE_ASAN \"Enable AddressSanitizer (ASAN) for debugging (degrades performance)\" OFF)\noption(ENABLE_UBSAN \"Enable UndefinedBehaviorSanitizer (UBSan) for debugging\" OFF)\noption(ENABLE_MSAN \"Enable MemorySanitizer (MSan) for debugging (not recommended to run with ASAN)\" OFF)\n\n# Shared library is always PIC. Static library should be PIC too if linked into a shared library\noption(WITH_PIC \"Compile static library as position-independent code\" OFF)\noption(BUILD_SHARED_LIBS \"Build raylib as a shared library\" OFF)\ncmake_dependent_option(USE_AUDIO \"Build raylib with audio module\" ON CUSTOMIZE_BUILD ON)\n\nenum_option(USE_EXTERNAL_GLFW \"OFF;IF_POSSIBLE;ON\" \"Link raylib against system GLFW instead of embedded one\")\n\n# GLFW build options\noption(GLFW_BUILD_WAYLAND \"Build the bundled GLFW with Wayland support\" OFF)\noption(GLFW_BUILD_X11 \"Build the bundled GLFW with X11 support\" ON)\n\noption(INCLUDE_EVERYTHING \"Include everything disabled by default (for CI usage)\" OFF)\nset(OFF ${INCLUDE_EVERYTHING} CACHE INTERNAL \"Replace any OFF by default with \\${OFF} to have it covered by this option\")\n\ninclude(ParseConfigHeader)\n\nforeach(FLAG IN LISTS CONFIG_HEADER_FLAGS)\n    string(REGEX MATCH \"([^=]+)=(.+)\" _ ${FLAG})\n    cmake_dependent_option(${CMAKE_MATCH_1} \"\" ${CMAKE_MATCH_2} CUSTOMIZE_BUILD ${CMAKE_MATCH_2})\nendforeach()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.34375,
          "content": "## Contributing to raylib\n\nHello contributors! Welcome to raylib! \n\nDo you enjoy raylib and want to contribute? Nice! You can help with the following points:\n\n- `C programming` - Can you write/review/test/improve the code? \n- `Documentation/Tutorials/Example` - Can you write some tutorials/examples?\n- `Porting to other platforms` - Can you port/adapt/compile raylib on other systems?\n- `Web Development` - Can you help [with the website](https://github.com/raysan5/raylib.com)?\n- `Testing` - Can you find some bugs in raylib?\n\nThis document contains a set of guidelines to contribute to the project. These are mostly guidelines, not rules. \nUse your best judgment, and feel free to propose changes to this document in a pull request.\n\n### raylib philosophy\n\n - raylib is a tool to **ENJOY** videogames programming, every function in raylib is designed as a mini-tutorial on itself.\n - raylib is **SIMPLE** and **EASY-TO-USE**, I tried to keep it compact with a small set of functions, if a function is too complex, better not including it.\n - raylib is open source and free; educators and institutions can use this tool to **TEACH** videogames programming completely for free.\n - raylib is collaborative; contribution of tutorials / code examples / bug fixes / code comments are highly appreciated.\n - raylib's license (and its external libs respective licenses) allow using raylib on commercial projects.\n\n### Some interesting reads to start with\n\n - [raylib history](HISTORY.md)\n - [raylib architecture](https://github.com/raysan5/raylib/wiki/raylib-architecture)\n - [raylib license](LICENSE)\n - [raylib roadmap](ROADMAP.md)\n \n[raylib Wiki](https://github.com/raysan5/raylib/wiki) contains some information about the library and is open to anyone to edit. \nFeel free to review it if required, just take care not to break something.\n\n### raylib C coding conventions\n\nDespite being written in C, raylib does not follow the standard Hungarian notation for C, \nit [follows Pascal-case/camel-case notation](https://github.com/raysan5/raylib/wiki/raylib-coding-conventions), \nmore common in C# language. All code formatting decisions have been carefully taken\nto make it easier for students/users to read, write and understand code.\n\nSource code is extensively commented for that purpose, raylib primary learning method is:\n\n > `Learn by reading code and examples`\n\nFor detailed information on building raylib and examples, please check [raylib Wiki](https://github.com/raysan5/raylib/wiki).\n\n### Opening new Issues\n\nTo open new issues for raylib (bug, enhancement, discussion...), just try to follow these rules:\n\n - Make sure the issue has not already been reported before by searching on GitHub under Issues.\n - If you're unable to find an open issue addressing the problem, open a new one. Be sure to include a \n title and clear description, as much relevant information as possible, and a code sample demonstrating the unexpected behavior.\n - If applicable, attach some screenshot of the issue and a .zip file with the code sample and required resources.\n - On issue description, add a brackets tag about the raylib module that relates to this issue. \n If don't know which module, just report the issue, I will review it.\n - You can check other issues to see how it's being done!\n\n### Sending a Pull-Request\n\n - Make sure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n - Don't send big pull requests (lots of changelists), they are difficult to review. It's better to send small pull requests, one at a time.\n - Verify that changes don't break the build (at least on Windows platform). The more platforms where you can test it, the better, but don't worry\n if you cannot test all the platforms.\n\n### Contact information\n\nIf you have any doubt, don't hesitate to [contact me](mailto:ray@raylib.com)!.\nYou can write me a direct mail but you can also contact me on the following networks:\n\n - [raylib Discord](https://discord.gg/raylib) - A direct communication channel for project discussions.\n - [raylib twitter](https://twitter.com/raysan5) - My personal twitter account, I usually post about raylib, you can send me PMs.\n - [raylib reddit](https://www.reddit.com/r/raylib/) - A good place for discussions or to ask for help.\n - [raylib web](http://www.raylib.com/) - On top-right corner there is a bunch of networks where you can find me.\n\nThank you very much for your time! :)\n"
        },
        {
          "name": "CONVENTIONS.md",
          "type": "blob",
          "size": 3.3203125,
          "content": "## C Coding Style Conventions\n\nHere is a list with some of the code conventions used by raylib:\n\nCode element | Convention | Example\n--- | :---: | ---\nDefines | ALL_CAPS | `#define PLATFORM_DESKTOP`\nMacros | ALL_CAPS | `#define MIN(a,b) (((a)<(b))?(a):(b))`\nVariables | lowerCase | `int screenWidth = 0;`, `float targetFrameTime = 0.016f;`\nLocal variables | lowerCase | `Vector2 playerPosition = { 0 };`\nGlobal variables | lowerCase | `bool windowReady = false;`\nConstants | lowerCase | `const int maxValue = 8;`\nPointers | MyType *pointer | `Texture2D *array = NULL;`\nfloat values | always x.xf | `float gravity = 10.0f`\nOperators | value1*value2 | `int product = value*6;`\nOperators | value1/value2 | `int division = value/4;`\nOperators | value1 + value2 | `int sum = value + 10;`\nOperators | value1 - value2 | `int res = value - 5;`\nEnum | TitleCase | `enum TextureFormat`\nEnum members | ALL_CAPS | `PIXELFORMAT_UNCOMPRESSED_R8G8B8`\nStruct | TitleCase | `struct Texture2D`, `struct Material`\nStruct members | lowerCase | `texture.width`, `color.r`\nFunctions | TitleCase | `InitWindow()`, `LoadImageFromMemory()`\nFunctions params | lowerCase | `width`, `height`\nTernary Operator | (condition)? result1 : result2 | `printf(\"Value is 0: %s\", (value == 0)? \"yes\" : \"no\");`\n\nSome other conventions to follow:\n - **ALWAYS** initialize all defined variables.\n - **Do not use TABS**, use 4 spaces instead.\n - Avoid trailing spaces, please, avoid them\n - Control flow statements always are followed **by a space**:\n```c\nif (condition) value = 0;\n\nwhile (!WindowShouldClose())\n{\n\n}\n\nfor (int i = 0; i < NUM_VALUES; i++) printf(\"%i\", i);\n\n// Be careful with the switch formatting!\nswitch (value)\n{\n    case 0:\n    {\n\n    } break;\n    case 2: break;\n    default: break;\n}\n```\n - All conditions checks are **always between parenthesis** but not boolean values:\n```c\nif ((value > 1) && (value < 50) && valueActive)\n{\n\n}\n```\n - When dealing with braces or curly brackets, open-close them in aligned mode:\n```c\nvoid SomeFunction()\n{\n   // TODO: Do something here!\n}\n```\n\n**If proposing new functions, please try to use a clear naming for function-name and functions-parameters, in case of doubt, open an issue for discussion.**\n\n## Files and Directories Naming Conventions\n \n  - Directories will be named using `snake_case`: `resources/models`, `resources/fonts`\n  \n  - Files will be named using `snake_case`: `main_title.png`, `cubicmap.png`, `sound.wav`\n  \n_NOTE: Avoid any space or special character in the files/dir naming!_\n  \n## Games/Examples Directories Organization Conventions\n  \n - Data files should be organized by context and usage in the game, think about the loading requirements for data and put all the resources that need to be loaded at the same time together.\n - Use descriptive names for the files, it would be perfect if just reading the name of the file, it was possible to know what is that file and where fits in the game.\n - Here is an example, note that some resources require to be loaded all at once while other require to be loaded only at initialization (gui, font).\n  \n```\nresources/audio/fx/long_jump.wav\nresources/audio/music/main_theme.ogg\nresources/screens/logo/logo.png\nresources/screens/title/title.png\nresources/screens/gameplay/background.png\nresources/characters/player.png\nresources/characters/enemy_slime.png\nresources/common/font_arial.ttf\nresources/common/gui.png\n```\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 10.107421875,
          "content": "# Frequently Asked Questions\n\n- [What is raylib?](#what-is-raylib)\n- [What can I do with raylib?](#what-can-i-do-with-raylib)\n- [Which kinds of games can I make with raylib?](#which-kinds-of-games-can-i-make-with-raylib)\n- [Can I create non-game applications with raylib?](#can-i-create-non-game-applications-with-raylib)\n- [How can I learn to use raylib? Is there some official documentation or tutorials?](#how-can-i-learn-to-use-raylib-is-there-some-official-documentation-or-tutorials)\n- [How much does it cost?](#how-much-does-it-cost)\n- [What is the raylib license?](#what-is-the-raylib-license)\n- [What platforms are supported by raylib?](#what-platforms-are-supported-by-raylib)\n- [What programming languages can I use with raylib?](#what-programming-languages-can-i-use-with-raylib)\n- [Why is it coded in C?](#why-is-it-coded-in-c)\n- [Is raylib a videogames engine?](#is-raylib-a-videogames-engine)\n- [What does raylib provide that other engines or libraries don't?](#what-does-raylib-provide-that-other-engines-or-libraries-dont)\n- [How does raylib compare to Unity/Unreal/Godot?](#how-does-raylib-compare-to-unityunrealgodot)\n- [What development tools are required for raylib?](#what-development-tools-are-required-for-raylib)\n- [What are raylib's external dependencies?](#what-are-raylibs-external-dependencies)\n- [Can I use raylib with other technologies or libraries?](#can-i-use-raylib-with-other-technologies-or-libraries)\n- [What file formats are supported by raylib?](#what-file-formats-are-supported-by-raylib)\n- [Does raylib support the Vulkan API?](#does-raylib-support-the-vulkan-api)\n- [What could I expect to see in raylib in the future?](#what-could-i-expect-to-see-in-raylib-in-the-future)\n- [Who are the raylib developers?](#who-are-the-raylib-developers)\n- [MORE QUESTIONS...](https://github.com/raysan5/raylib/wiki/Frequently-Asked-Questions)\n\n### What is raylib?\n\nraylib is a C programming library, designed to be simple and easy-to-use. It provides a set of functions intended for graphics/multimedia applications programming.\n\n### What can I do with raylib?\n\nraylib can be used to create any kind of graphics/multimedia applications: videogames, tools, mobile apps, web applications... Actually it can be used to create any application that requires something to be shown in a display with graphic hardware acceleration (OpenGL); including [IoT](https://en.wikipedia.org/wiki/Internet_of_things) devices with a graphics display.\n\n### Which kinds of games can I make with raylib?\n\nWith enough time and effort any kind of game/application can be created but small-mid sized 2d videogames are the best fit. The raylib [examples](https://www.raylib.com/examples.html)/[games](https://www.raylib.com/games.html) and [raylibtech](https://raylibtech.itch.io/) tools are an example of what can be accomplished with raylib.\n\n### Can I create non-game applications with raylib?\n\nYes, raylib can be used to create any kind of application, not just videogames. For example, it can be used to create [desktop/web tools](https://raylibtech.itch.io/) or also applications for an IoT devices like [Raspberry Pi](https://www.raspberrypi.org/).\n\n### How can I learn to use raylib? Is there some official documentation or tutorials?\n\nraylib does not provide a \"standard\" API reference documentation like other libraries, all of the raylib functionality is exposed in a simple [cheatsheet](https://www.raylib.com/cheatsheet/cheatsheet.html). Most of the functions are self-explanatory and the required parameters are very intuitive. It's also highly recommended to take a look at [`raylib.h`](https://github.com/raysan5/raylib/blob/master/src/raylib.h) header file or even the source code, that is very clean and organized, intended for teaching.\n\nraylib also provides a big [collection of examples](https://www.raylib.com/examples.html), to showcase the multiple functionality usage (+120 examples). Examples are categorized by the internal module functionality and also define an estimated level of difficulty to guide the users checking them.\n\nThere is also a [FAQ on the raylib Wiki](https://github.com/raysan5/raylib/wiki/Frequently-Asked-Questions) with common technical questions.\n\nThere are also many tutorials on the internet and YouTube created by the growing raylib community over the years.\n\n[raylib Discord Community](https://discord.gg/raylib) is also a great place to join and ask questions, the community is very friendly and always ready to help.\n\n### How much does it cost?\n\nraylib is [free and open source](https://github.com/raysan5/raylib). Anyone can use raylib library for free to create games/tools/apps but also the source code of raylib is open for anyone to check it, modify it, adapt it as required or just learn how it works internally.\n\n### What is the raylib license?\n\nraylib source code is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed-source software. Check [LICENSE](https://github.com/raysan5/raylib/blob/master/LICENSE) for further details.\n\n### What platforms are supported by raylib?\n\nraylib source code can be compiled for the following platforms:\n\n - Windows (7, 8.1, 10, 11)\n - Linux - Desktop (multiple distributions, X11 and Wayland based)\n - Linux - Native (no windowing system, [DRM](https://en.wikipedia.org/wiki/Direct_Rendering_Manager))\n - macOS (multiple versions, including ARM64)\n - FreeBSD, OpenBSD, NetBSD, DragonFly\n - Raspberry Pi (desktop and native)\n - Android (multiple API versions and architectures)\n - HTML5 (WebAssembly)\n - Haiku\n\nraylib code has also been ported to several [homebrew](https://en.wikipedia.org/wiki/Homebrew_(video_games)) platforms: N3DS, Switch, PS4, PSVita.\n\nAlso note that raylib is a low-level library that can be easily ported to any platform with OpenGL support (or similar API).\n\n### What programming languages can I use with raylib?\n\nraylib original version is coded in C language (using some C99 features) but it has bindings to +60 programming languages. Check [BINDINGS.md](https://github.com/raysan5/raylib/blob/master/BINDINGS.md) for details.\n\n### Why is it coded in C?\n\nIt's a simple language, no high-level code abstractions like [OOP](https://en.wikipedia.org/wiki/Object-oriented_programming), just data types and functions. It's a very enjoyable language to code.\n\n### Is raylib a videogames engine?\n\nI personally consider raylib a graphics library with some high-level features rather than an engine. The line that separates a library/framework from an engine could be very confusing; raylib provides all the required functionality to create simple games or small applications but it does not provide 3 elements that I personally consider any \"engine\" should provide: Screen manager, GameObject/Entity manager and Resource Manager. Still, most users do not need those elements or just code simple approaches on their own.\n\n### What does raylib provide that other engines or libraries don't?\n\nI would say \"simplicity\" and \"enjoyment\" at a really low level of coding but actually it is up to the user to discover it, to try it and to see if it fits their needs. raylib is not good for everyone but it's worth a try.\n\n### How does raylib compare to Unity/Unreal/Godot?\n\nThose engines are usually big and complex to use, providing lot of functionality. They require some time to learn and test, they usually abstract many parts of the game development process and they usually provide a set of tools to assist users on their creations (like a GUI editor).\n\nraylib is a simple programming library, with no integrated tools or editors. It gives full control to users at a very low level to create graphics applications in a more handmade way.\n\n### What development tools are required for raylib?\n\nTo develop raylib programs you only need a text editor (with recommended code syntax highlighting) and a compiler.\n\nA [raylib Windows Installer](https://raysan5.itch.io/raylib) package is distributed including the Notepad++ editor and MinGW (GCC) compiler pre-configured for Windows for new users as an starter-pack but for more advanced configurations with other editors/compilers, [raylib Wiki](https://github.com/raysan5/raylib/wiki) provides plenty of configuration tutorials.\n\n### What are raylib's external dependencies?\n\nraylib is self-contained, it has no external dependencies to build it. But internally raylib uses several libraries from other developers, mostly used to load specific file formats.\n\nA detailed list of raylib dependencies can be found on the [raylib Wiki](https://github.com/raysan5/raylib/wiki/raylib-dependencies).\n\n### Can I use raylib with other technologies or libraries?\n\nYes, raylib can be used with other libraries that provide specific functionality. There are multiple examples of raylib integrations with libraries like Spine, Tiled, Dear Imgui and several physics engines.\n\n### What file formats are supported by raylib?\n\nraylib can load data from multiple standard file formats:\n\n - Image/Textures: PNG, BMP, TGA, JPG, GIF, QOI, PSD, DDS, HDR, KTX, ASTC, PKM, PVR\n - Fonts: FNT (sprite font), TTF, OTF\n - Models/Meshes: OBJ, IQM, GLTF, VOX, M3D\n - Audio: WAV, OGG, MP3, FLAC, XM, MOD, QOA\n \n### Does raylib support the Vulkan API?\n\nNo, raylib is built on top of OpenGL API, and there are currently no plans to support any other graphics APIs. In any case, raylib uses rlgl as an abstraction layer to support different OpenGL versions. If really required, a Vulkan backend equivalent could be added but creating that abstraction layer would imply a considerable amount of work.\n\n### What could I expect to see in raylib in the future?\n\nThe main focus of the library is simplicity. Most of the efforts are invested in maintainability and bug-fixing. Despite new small features being regularly added, it's not the objective for raylib to become a full-featured engine. Personally I prefer to keep it small and enjoyable.\n\n### Who are the raylib developers?\n\nThe main raylib developer and maintainer is [Ramon Santamaria](https://www.linkedin.com/in/raysan/) but there are 360+ contributors that have helped by adding new features, testing the library and solving issues in the 9+ years life of raylib.\n\nThe full list of raylib contributors can be seen [on GitHub](https://github.com/raysan5/raylib/graphs/contributors). \n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 74.9169921875,
          "content": "![raylib logo](logo/raylib_256x256.png)\n\nintroduction\n------------\n\nI started developing videogames in 2006 and some years later I started teaching videogames development to young people with artistic profiles, most of students had never written a single line of code.\n\nI decided to start with C language basis and, after searching for the most simple and easy-to-use library to teach videogames programming, I found [WinBGI](https://winbgim.codecutter.org/); it was great and it worked very well with students, in just a couple of weeks, those students that had never written a single line of code were able to program (and understand) a simple PONG game, some of them even a BREAKOUT!\n\nBut WinBGI was not the clearest and most organized library for my taste. There were lots of things I found confusing and some function names were not clear enough for most of the students; not to mention the lack of transparencies support and no hardware acceleration.\n\nSo, I decided to create my own library, hardware accelerated, clear function names, quite organized, well structured, plain C coding and, most importantly, primarily intended to learn videogames programming.\n\nMy previous videogames development experience was mostly in C# and [XNA](https://en.wikipedia.org/wiki/Microsoft_XNA) and I really loved it, so, I decided to use C# language style notation and XNA naming conventions. That way, students were able to move from raylib to XNA, MonoGame or similar libs extremely easily.\n\nraylib started as a weekend project and after three months of hard work, **raylib 1.0 was published on November 2013**.\n\nEnjoy it.\n\nnotes on raylib 1.1\n-------------------\n\nOn April 2014, after 6 months of first raylib release, raylib 1.1 was released. This new version presents a complete internal redesign of the library to support OpenGL 1.1, OpenGL 3.3+ and OpenGL ES 2.0.\n\n - A new module named [rlgl](https://github.com/raysan5/raylib/blob/master/src/rlgl.h) has been added to the library. This new module translates raylib-OpenGL-style immediate mode functions (i.e. rlVertex3f(), rlBegin(), ...) to different versions of OpenGL (1.1, 3.3+, ES2), selectable by one define.\n\n - [rlgl](https://github.com/raysan5/raylib/blob/master/src/rlgl.h) also comes with a second new module named [raymath](https://github.com/raysan5/raylib/blob/master/src/raymath.h), which includes a bunch of useful functions for 3d-math with vectors, matrices and quaternions.\n\nSome other big changes of this new version have been the support for OGG file loading and stream playing, and the support of DDS texture files (compressed and uncompressed) along with mipmaps support.\n\nLots of code changes and a lot of testing have concluded in this amazing new raylib 1.1.\n\nnotes on raylib 1.2\n-------------------\n\nOn September 2014, after 5 months of raylib 1.1 release, it comes raylib 1.2. Again, this version presents a complete internal redesign of [core](https://github.com/raysan5/raylib/blob/master/src/rcore.c) module to support two new platforms: [Android](http://www.android.com/) and [Raspberry Pi](http://www.raspberrypi.org/).\n\nIt's been some months of really hard work to accommodate raylib to those new platforms while keeping it easy for the users. On Android, raylib manages internally the activity cycle, as well as the inputs; on Raspberry Pi, a complete raw input system has been written from scratch.\n\n - A new display initialization system has been created to support multiple resolutions, adding black bars if required; the user only defines the desired screen size and it gets properly displayed.\n\n - Now raylib can easily deploy games to Android devices and Raspberry Pi (console mode).\n\nLots of code changes and a lot of testing have concluded in this amazing new raylib 1.2.\n\nIn December 2014, new raylib 1.2.2 was published with support to compile directly for web (html5) using [emscripten](http://kripken.github.io/emscripten-site/) and [asm.js](http://asmjs.org/).\n\nnotes on raylib 1.3\n-------------------\n\nOn September 2015, after 1 year of raylib 1.2 release, arrives raylib 1.3. This version adds shaders functionality, improves tremendously textures module and also provides some new modules (camera system, gestures system, immediate-mode gui).\n\n - Shaders support is the biggest addition to raylib 1.3, with support for easy shaders loading and use. Loaded shaders can be attached to 3d models or used as fullscreen post-processing effects. A bunch of postprocessing shaders are also included in this release, check raylib/shaders folder.\n\n - Textures module has grown to support most of the internal texture formats available in OpenGL (RGB565, RGB888, RGBA5551, RGBA4444, etc.), including compressed texture formats (DXT, ETC1, ETC2, ASTC, PVRT); raylib 1.3 can load .dds, .pkm, .ktx, .astc and .pvr files.\n\n - A brand new [camera](https://github.com/raysan5/raylib/blob/master/src/rcamera.h) module offers to the user multiple preconfigured ready-to-use camera systems (free camera, 1st person, 3rd person). Camera modes are very easy to use, just check examples: [core_3d_camera_free.c](https://github.com/raysan5/raylib/blob/master/examples/core/core_3d_camera_free.c) and [core_3d_camera_first_person.c](https://github.com/raysan5/raylib/blob/master/examples/core/core_3d_camera_first_person.c).\n\n - New [gestures](https://github.com/raysan5/raylib/blob/master/src/rgestures.h) module simplifies gestures detection on Android and HTML5 programs.\n\n - [raygui](https://github.com/raysan5/raylib/blob/master/examples/shapes/raygui.h), the new immediate-mode GUI module offers a set of functions to create simple user interfaces, primarily intended for tools development. It's still in an experimental state but already fully functional.\n\nMost of the examples have been completely rewritten and +10 new examples have been added to show the new raylib features.\n\nLots of code changes and a lot of testing have concluded in this amazing new raylib 1.3.\n\nnotes on raylib 1.4\n-------------------\n\nOn February 2016, after 4 months of raylib 1.3 release, it comes raylib 1.4. For this new version, lots of parts of the library have been reviewed, lots of bugs have been solved and some interesting features have been added.\n\n - First big addition is a set of [Image manipulation functions](https://github.com/raysan5/raylib/blob/master/src/raylib.h#L1331) that have been added to crop, resize, colorize, flip, dither and even draw image-to-image or text-to-image. Now basic image processing can be done before converting the image to texture for usage.\n\n - SpriteFonts system has been improved, adding support for AngelCode fonts (.fnt) and TrueType Fonts (using [stb_truetype](https://github.com/nothings/stb/blob/master/stb_truetype.h) helper library). Now raylib can read standard .fnt font data and also generate at loading a SpriteFont from a TTF file.\n\n - New [physac](https://github.com/raysan5/raylib/blob/master/src/physac.h) physics module for basic 2D physics support. Still in development but already functional. Module comes with some usage examples for basic jump and level interaction and also force-based physic movements.\n\n - [raymath](https://github.com/raysan5/raylib/blob/master/src/raymath.h) module has been reviewed; some bugs have been solved and the module has been converted to a header-only file for easier portability, optionally, functions can also be used as inline.\n\n - [gestures](https://github.com/raysan5/raylib/blob/master/src/rgestures.h) module has been redesigned and simplified, now it can process touch events from any source, including the mouse. This way, gestures system can be used on any platform providing a unified way to work with inputs and allowing the user to create multiplatform games with only one source code.\n\n - Raspberry Pi input system has been redesigned to better read raw inputs using generic Linux event handlers (keyboard:`stdin`, mouse:`/dev/input/mouse0`, gamepad:`/dev/input/js0`). Gamepad support has also been added (experimental).\n\nOther important improvements are the functional raycast system for 3D picking, including some ray collision-detection functions,\nand the addition of two simple functions for persistent data storage. Now raylib users can save and load game data in a file (only some platforms are supported). A simple [easings](https://github.com/raysan5/raylib/blob/master/examples/shapes/reasings.h) module has also been added for values animation.\n\nUp to 8 new code examples have been added to show the new raylib features and +10 complete game samples have been provided to learn\nhow to create some classic games like Arkanoid, Asteroids, Missile Commander, Snake or Tetris.\n\nLots of code changes and lots of hours of hard work have concluded in this amazing new raylib 1.4.\n\nnotes on raylib 1.5\n-------------------\n\nOn July 2016, after 5 months of raylib 1.4 release, arrives raylib 1.5. This new version is the biggest boost of the library until now, lots of parts of the library have been redesigned, lots of bugs have been solved and some **AMAZING** new features have been added.\n\n - VR support: raylib supports **Oculus Rift CV1**, one of the most anticipated VR devices in the market. Additionally, raylib supports simulated VR stereo rendering, independent of the VR device; it means, raylib can generate stereo renders with custom head-mounted-display device parameters, that way, any VR device in the market can be **simulated in any platform** just configuring device parameters (and consequently, lens distortion). To enable VR is [extremely easy](https://github.com/raysan5/raylib/blob/master/examples/core_oculus_rift.c).\n\n - New materials system: now raylib supports standard material properties for 3D models, including diffuse-ambient-specular colors and diffuse-normal-specular textures. Just assign values to standard material and everything is processed internally.\n\n - New lighting system: added support for up to 8 configurable lights and 3 light types: **point**, **directional** and **spot** lights. Just create a light, configure its parameters and raylib manages to render internally for every 3d object using standard material.\n\n - Complete gamepad support on Raspberry Pi: Gamepad system has been completely redesigned. Now multiple gamepads can be easily configured and used; gamepad data is read and processed in raw mode in a second thread.\n\n - Redesigned physics module: [physac](https://github.com/raysan5/raylib/blob/master/src/physac.h) module has been converted to header only and usage [has been simplified](https://github.com/raysan5/raylib/blob/master/examples/physics_basic_rigidbody.c). Performance has also been significantly improved, now physic objects are managed internally in a second thread.\n\n - Audio chiptunes support and mixing channels: Added support for module audio music (.xm, .mod) loading and playing. Multiple mixing channels are now also supported. All these features thanks to the amazing work of @kd7tck.\n\nOther additions include a [2D camera system](https://github.com/raysan5/raylib/blob/master/examples/core/core_2d_rcamera.c), render textures for offline render (and most comprehensive [postprocessing](https://github.com/raysan5/raylib/blob/master/examples/shaders/shaders_postprocessing.c)) or support for legacy OpenGL 2.1 on desktop platforms.\n\nThis new version is so massive that is difficult to list all the improvements, most of the raylib modules have been reviewed and [rlgl](https://github.com/raysan5/raylib/blob/master/src/rlgl.h) module has been completely redesigned to accommodate to new material-lighting systems and stereo rendering. You can check [CHANGELOG](https://github.com/raysan5/raylib/blob/master/CHANGELOG) file for a more detailed list of changes.\n\nUp to 8 new code examples have been added to show the new raylib features and also some samples to show the usage of [rlgl](https://github.com/raysan5/raylib/blob/master/examples/others/rlgl_standalone.c) and [audio](https://github.com/raysan5/raylib/blob/master/examples/audio_standalone.c) raylib modules as standalone libraries.\n\nLots of code changes (+400 commits) and lots of hours of hard work have concluded in this amazing new raylib 1.5.\n\nnotes on raylib 1.6\n-------------------\n\nOn November 2016, only 4 months after raylib 1.5, arrives raylib 1.6. This new version represents another big review of the library and includes some interesting additions. This version commemorates raylib 3rd anniversary (raylib 1.0 was published on November 2013) and it is a stepping stone for raylib future. raylib roadmap has been reviewed and redefined to focus on its primary objective: create a simple and easy-to-use library to learn videogames programming. Some of the new features:\n\n - Complete [raylib Lua binding](https://github.com/raysan5/raylib-lua). All raylib functions plus the +60 code examples have been ported to Lua, now Lua users can enjoy coding videogames in Lua while using all the internal power of raylib. This addition also open the doors to Lua scripting support for a future raylib-based engine, being able to move game logic (Init, Update, Draw, De-Init) to Lua scripts while keep using raylib functionality.\n\n - Completely redesigned [audio module](https://github.com/raysan5/raylib/blob/master/src/raudio.c). Based on the new direction taken in raylib 1.5, it has been further improved and more functionality added (+20 new functions) to allow raw audio processing and streaming. [FLAC file format support](https://github.com/raysan5/raylib/blob/master/src/external/dr_flac.h) has also been added. In the same line, [OpenAL Soft](https://github.com/kcat/openal-soft) backend is now provided as a static library in Windows to allow static linking and get ride of OpenAL32.dll. Now raylib Windows games are completely self-contained, no external libraries are required anymore!\n\n - [Physac](https://github.com/victorfisac/Physac) module has been moved to its own repository and it has been improved A LOT, actually, the library has been completely rewritten from scratch by [@victorfisac](https://github.com/victorfisac), multiple samples have been added together with countless new features to match current standard 2D physic libraries. Results are amazing!\n\n - Camera and gestures modules have been reviewed, highly simplified and ported to single-file header-only libraries for easier portability and usage flexibility. Consequently, camera system usage has been simplified in all examples.\n\n - Improved Gamepad support on Windows and Raspberry Pi with the addition of new functions for custom gamepad configurations but supporting by default PS3 and Xbox-based gamepads.\n\n - Improved textures and text functionality, adding new functions for texture filtering control and better TTF/AngelCode fonts loading and generation support.\n\nBuild system improvement. Added support for raylib dynamic library generation (raylib.dll) for users that prefer dynamic library linking. Also thinking on advanced users, it has been added pre-configured [Visual Studio C++ 2015 solution](https://github.com/raysan5/raylib/tree/master/projects/vs2015) with raylib project and C/C++ examples for users that prefer that professional IDE and compiler.\n\nNew examples, new functions, complete code-base review, multiple bugs corrected... this is raylib 1.6. Enjoy making games.\n\nnotes on raylib 1.7\n-------------------\n\nOn May 2017, around 6 months after raylib 1.6, comes another raylib installment, raylib 1.7. This time library has been improved a lot in terms of consistency and cleanness. As stated in [this patreon article](https://www.patreon.com/posts/raylib-future-7501034), this new raylib version has focused efforts in becoming more simple and easy-to-use to learn videogames programming. Some highlights of this new version are:\n\n - More than 30 new functions added to the library, functions to control Window, utils to work with filenames and extensions, functions to draw lines with custom thick, mesh loading, functions for 3d ray collisions detailed detection, functions for VR simulation and much more... Just check [CHANGELOG](CHANGELOG) for a detailed list of additions!\n\n - Support of [configuration flags](https://github.com/raysan5/raylib/issues/200) on every raylib module. Advanced users can customize raylib just by choosing desired features, and defining some configuration flags on modules compilation. That way users can control library size and available functionality.\n\n - Improved [build system](https://github.com/raysan5/raylib/blob/master/src/Makefile) for all supported platforms (Windows, Linux, OSX, RPI, Android, HTML5) with a unique Makefile to compile sources. Added support for Android compilation with a custom standalone toolchain and also multiple build compilation flags.\n\n - New [examples](http://www.raylib.com/examples.html) and [sample games](http://www.raylib.com/games.html) added. All sample material has been reviewed, removing useless examples and adding more comprehensive ones; all material has been ported to the latest raylib version and tested on multiple platforms. Examples folder structure has been improved and also build systems.\n\n - Improved library consistency and organization in general. Functions and parameters have been renamed, some parts of the library have been cleaned and simplified, some functions have been moved to examples (lighting, Oculus Rift CV1 support) towards a more generic library implementation. Lots of hours have been invested in this process...\n\nSome other features: Gamepad support on HTML5, RPI touch screen support, 32bit audio support, frames timing improvements, public log system, rres file format support, automatic GIF recording...\n\nAnd here is another version of **raylib, a simple and easy-to-use library to enjoy videogames programming**. Enjoy it.\n\nnotes on raylib 1.8\n-------------------\n\nOctober 2017, around 5 months after latest raylib version, another release is published: raylib 1.8. Again, several modules of the library have been reviewed and some new functionality added. Main changes of this new release are:\n\n - [Procedural image generation](https://github.com/raysan5/raylib/blob/master/examples/textures/textures_image_generation.c) function, a set of new functions have been added to generate gradients, checked, noise and cellular images from scratch. Image generation could be useful for certain textures or learning purposes.\n\n - [Parametric mesh generation](https://github.com/raysan5/raylib/blob/master/examples/models/models_mesh_generation.c) functions, create 3d meshes from scratch just defining a set of parameters, meshes like cube, sphere, cylinder, torus, knot and more can be very useful for prototyping or for lighting and texture testing.\n\n - PBR Materials support, a completely redesigned shaders and material system allows advanced materials definition and usage, with fully customizable shaders. Some new functions have been added to generate the environment textures required for PBR shading and a a new complete [PBR material example](https://github.com/raysan5/raylib/blob/master/examples/models/models_material_pbr.c) is also provided for reference.\n\n - Custom Android APK build pipeline with [simple Makefile](https://github.com/raysan5/raylib/blob/master/templates/simple_game/Makefile). Actually, full code building mechanism based on plain Makefile has been completely reviewed and Android building has been added for sources and also for examples and templates building into the final APK package. This way, raylib Android building has been greatly simplified and integrated seamlessly into standard build scripts.\n\n - [rlgl](https://github.com/raysan5/raylib/blob/master/src/rlgl.h) module has been completely reviewed and most of the functions renamed for consistency. This way, standalone usage of rlgl is promoted, with a [complete example provided](https://github.com/raysan5/raylib/blob/master/examples/others/rlgl_standalone.c). rlgl offers a pseudo-OpenGL 1.1 immediate-mode programming-style layer, with backends to multiple OpenGL versions.\n\n - [raymath](https://github.com/raysan5/raylib/blob/master/src/raymath.h) library has been also reviewed to align with other advance math libraries like [GLM](https://github.com/g-truc/glm). Matrix math has been improved and simplified, some new Quaternion functions have been added and Vector3 functions have been renamed all around the library for consistency with new Vector2 functionality.\n\nAdditionally, as always, examples and templates have been reviewed to work with new version (some new examples have been added), all external libraries have been updated to latest stable version and latest Notepad++ and MinGW have been configured to work with new raylib. For a full list of changes, just check [CHANGELOG](CHANGELOG).\n\nNew installer provided, web updated, examples re-builded, documentation reviewed... **new raylib 1.8 published**. Enjoy coding games.\n\nnotes on raylib 2.0\n-------------------\n\nIt's been 9 months since last raylib version was published, a lot of things have changed since then... This new raylib version represents an inflection point in the development of the library and so, we jump to a new major version... Here is the result of almost **5 years and thousands of hours of hard work**... here is... **raylib 2.0**\n\nIn **raylib 2.0** the full API has been carefully reviewed for better consistency, some new functionality has been added and the overall raylib experience has been greatly improved... The key features of new version are:\n\n - **Complete removal of external dependencies.** Finally, raylib does not require external libraries to be installed and linked along with raylib, all required libraries are contained and compiled within raylib. Obviously some external libraries are required but only the strictly platform-dependent ones, the ones that come installed with the OS. So, raylib becomes a self-contained platform-independent games development library.\n\n - **Full redesign of audio module to use the amazing miniaudio library**, along with external dependencies removal, OpenAL library has been replaced by [miniaudio](https://github.com/dr-soft/miniaudio), this brand new library offers automatic dynamic linking with default OS audio systems. Undoubtedly, the perfect low-level companion for raylib audio module!\n\n - **Support for continuous integration building*** through AppVeyor and Travis CI. Consequently, raylib GitHub develop branch has been removed, simplifying the code-base to a single master branch, always stable. Every time a new commit is deployed, library is compiled for **up-to 12 different configurations**, including multiple platforms, 32bit/64bit and multiple compiler options! All those binaries are automatically attached to any new release!\n\n - **More platforms supported and tested**, including BSD family (FreeBSD, openBSD, NetBSD, DragonFly) and Linux-based family platforms (openSUSE, Debian, Ubuntu, Arch, NixOS...). raylib has already been added to some package managers! Oh, and last but not less important, **Android 64bit** is already supported by raylib!\n\n - **Support for TCC compiler!** Thanks to the lack of external dependencies, raylib can now be easily compiled with a **minimal toolchain**, like the one provided by Tiny C Compiler. It opens the door to an amazing future, allowing, for example, static linkage of libtcc for **runtime compilation of raylib-based code**... and the library itself if required! Moreover, TCC is blazing fast, it can compile all raylib in a couple of seconds!\n\n - Refactored all raylib configuration #defines into a **centralized `config.h` header**, with more than **40 possible configuration options** to compile a totally customizable raylib version including only desired options like supported file formats or specific functionality support. It allows generating a trully ligth-weight version of the library if desired!\n\nA part of that, lots of new features, like a brand **new font rendering and packaging system** for TTF fonts with **SDF support** (thanks to the amazing STB headers), new functions for **CPU image data manipulation**, new orthographic 3d camera mode, a complete review of `raymath.h` single-file header-only library for better consistency and performance, new examples and way, [way more](https://github.com/raysan5/raylib/blob/master/CHANGELOG).\n\nProbably by now, **raylib 2.0 is the simplest and easiest-to-use library to enjoy (and learn) videogames programming**... but, undoubtedly its development has exceeded any initial objective; raylib has become a simple and easy-to-use truly multiplatform portable standalone media library with thousands of possibilities... and that's just the beginning!\n\nnotes on raylib 2.5\n-------------------\n\nAfter almost one years since latest raylib installment, here is **raylib 2.5**. A lot of work has been put on this new version and consequently I decided to bump versioning several digits. The complete list of changes and additions is humungous, details can be found in the [CHANGELOG](CHANGELOG), and here is a short recap with the highlight improvements.\n\n - New **window management and file system functions** to query monitor information, deal with clipboard, check directory files info and even launch a URL with default system web browser. Experimental **High-DPI monitor support** has also been added through a compile flag.\n\n - **Redesigned Gamepad mechanism**, now generic for all platforms and gamepads, no more specific gamepad configurations.\n**Redesigned UWP input system**, now raylib supports UWP seamlessly, previous implementation required a custom input system implemented in user code.\n\n - `rlgl` module has been redesigned to **support a unique buffer for shapes drawing batching**, including LINES, TRIANGLES, QUADS in the same indexed buffer, also added support for multi-buffering if required. Additionally, `rlPushMatrix()`/`rlPopMatrix()` functionality has been reviewed to behave exactly like OpenGL 1.1, `models_rlgl_solar_system` example has been added to illustrate this behavior.\n\n - **VR simulator** has been reviewed to **allow custom configuration of Head-Mounted-Device parameters and distortion shader**, `core_vr_simulator` has been properly adapted to showcase this new functionality, now the VR simulator is a generic configurable stereo rendering system that allows any VR device simulation with just a few lines of code or even dynamic tweaking of HMD parameters.\n\n - Support for **Unicode text drawing**; now raylib processes UTF8 strings on drawing, supporting Unicode codepoints, allowing rendering mostly any existent language (as long as the font with the glyphs is provided). An amazing example showing this feature has also been added: `text_unicode`.\n\n - Brand **new text management API**, with the addition of multiple functions to deal with string data, including functionality like replace, insert, join, split, append, to uppercase, to lower... Note that most of those functions are intended for text management on rendering, using pre-loaded internal buffers, avoiding new memory allocation that user should free manually.\n\n - Multiple **new shapes and textures drawing functions** to support rings (`DrawRing()`, `DrawRingLines()`), circle sectors (`DrawCircleSector()`, `DrawCircleSectorLines()`), rounded rectangles (`DrawRectangleRounded()`, `DrawRectangleRoundedLines()`) and also n-patch textures (`DrawTextureNPatch()`), detailed examples have been added to illustrate all this new functionality.\n\n - Experimental **cubemap support**, to automatically load multiple cubemap layouts (`LoadTextureCubemap()`). It required some internal `rlgl` redesign to allow cubemap textures.\n\n - **Skeletal animation support for 3d models**, this addition implied a redesign of `Model` data structure to accommodate multiple mesh/multiple materials support and bones information. Multiple models functions have been reviewed and added on this process, also **glTF models loading support** has been added.\n\nThis is just a brief list with some of the changes of the new **raylib 2.5** but there is way more, about **70 new functions** have been added and several subsystems have been redesigned. More than **30 new examples** have been created to show the new functionalities and better illustrate already available ones.\n\nIt has been a long year of hard work to make raylib a solid technology to develop new products over it.\n\nnotes on raylib 3.0\n-------------------\n\nAfter **10 months of intense development**, new raylib version is ready. Despite primary intended as a minor release, the [CHANGELIST](CHANGELOG) has grown so big and the library has changed so much internally that it finally became a major release. Library **internal ABI** has received a big redesign and review, targeting portability, integration with other platforms and making it a perfect option for other programming [language bindings](BINDINGS.md).\n\n - All **global variables** from the multiple raylib modules have been moved to a **global context state**, it has several benefits, first, better code readability with more comprehensive variable naming and categorization (organized by types, i.e. `CORE.Window.display.width`, `CORE.Input.Keyboard.currentKeyState` or `RLGL.State.modelview`). Second, it allows better memory management to load global context state dynamically when required (not at the moment), making it easy to implement a **hot-reloading mechanism** if desired.\n\n - All **memory allocations** on raylib and its dependencies now use `RL_MALLOC`, `RL_FREE` and similar macros. Now users can easily hook their own memory allocation mechanism if desired, having more control over memory allocated internally by the library. Additionally, it makes it easier to port the library to embedded devices where memory control is critical. For more info check raylib issue #1074.\n\n - All **I/O file accesses** from raylib are being moved to **memory data access**, now all I/O file access is centralized into just four functions: `LoadFileData()`, `SaveFileData()`, `LoadFileText()`, `SaveFileText()`. Users can just update those functions to any I/O file system. This change makes it easier to integrate raylib with **Virtual File Systems** or custom I/O file implementations.\n\n - All **raylib data structures** have been reviewed and optimized for pass-by-value usage. One of raylib distinctive design decisions is that most of its functions receive and return data by value. This design makes raylib really simple for newcomers, avoiding pointers and allowing complete access to all structures data in a simple way. The downside is that data is copied on stack every function call and that copy could be costly so, all raylib data structures have been optimized to **stay under 64 bytes** for fast copy and retrieve.\n\n - All **raylib tracelog messages** have been reviewed and categorized for a more comprehensive output information when developing raylib applications, now all display, input, timer, platform, auxiliar libraries, file-accesses, data loading/unloading issues are properly reported with more detailed and visual messages.\n\n - `raudio` module has been internally reviewed to accommodate the new `Music` structure (converted from previous pointer format) and the module has been adapted to the **highly improved** [`miniaudio v0.10`](https://github.com/dr-soft/miniaudio).\n\n - `text` module reviewed to **improve fonts generation** and text management functions, `Font` structure has been redesigned to better accommodate characters data, decoupling individual characters as `Image` glyphs from the font atlas parameters. Several improvements have been made to better support Unicode strings with UTF-8 encoding.\n\n - **Multiple new examples added** (most of them contributed by raylib users) and all examples reviewed for correct execution on most of the supported platforms, specially Web and Raspberry Pi. A detailed categorized table has been created on github for easy examples navigation and code access.\n\n - New **GitHub Actions CI** system has been implemented for Windows, Linux and macOS code and examples compilation on every new commit or PR to make sure library keeps stable and usable with no breaking bugs.\n\nNote that only key changes are listed here but there is way more! About **30 new functions**, multiple functions reviewed, bindings to [+40 programming languages](https://github.com/raysan5/raylib/blob/master/BINDINGS.md) and great samples/demos/tutorials [created by the community](https://discord.gg/raylib), including raylib integration with [Spine](https://github.com/WEREMSOFT/spine-raylib-runtimes), [Unity](https://unitycoder.com/blog/2019/12/09/using-raylib-dll-in-unity/), [Tiled](https://github.com/OnACoffeeBreak/raylib_tiled_import_with_tmx), [Nuklear](http://bedroomcoders.co.uk/implementing-a-3d-gui-with-raylib/), [enet](https://github.com/nxrighthere/NetDynamics) and [more](https://github.com/raysan5/raylib/issues/1079)!\n\nIt has been **10 months of improvements** to create the best raylib ever.\n\nWelcome to **raylib 3.0**.\n\nnotes on raylib 3.5 - 7th Anniversary Edition\n---------------------------------------------\n\nIt's December 25th... this crazy 2020 is about to finish and finally the holidays gave me some time to put a new version of raylib. It's been **9 months since last release** and last November raylib become 7 years old... I was not able to release this new version back then but here it is. Many changes and improvements have happened in those months and, even, last August, raylib was awarded with an [Epic Megagrant](https://www.unrealengine.com/en-US/blog/epic-megagrants-fall-2020-update)! Bindings list kept growing to [+50 programming languages](BINDINGS.md) and some new platforms have been supported. Let's see this new version details:\n\nFirst, some general numbers of this new update:\n\n - **+650** commits since previous RELEASE\n - **+30** functions ADDED (for a TOTAL of **475**!)\n - **+90** functions REVIEWED/REDESIGNED\n - **+30** contributors (for a TOTAL of **170**!)\n - **+8** new examples (for a TOTAL of **+120**!)\n\nHere the list with some highlights for `raylib 3.5`.\n\n - NEW **Platform** supported: **Raspberry Pi 4 native mode** (no X11 windows) through [DRM](https://en.wikipedia.org/wiki/Direct_Rendering_Manager) subsystem and GBM API. Actually this is a really interesting improvement because it opens the door to raylib to support other embedded platforms (Odroid, GameShell, NanoPi...). Also worth mentioning the un-official homebrew ports of raylib for [PS4](https://github.com/orbisdev/orbisdev-orbisGl2) and [PSVita](https://github.com/psp2dev/raylib4Vita).\n\n - NEW **configuration options** exposed: For custom raylib builds, `config.h` now exposes **more than 150 flags and defines** to build raylib with only the desired features, for example, it allows to build a minimal raylib library in just some KB removing all external data filetypes supported, very useful to generate **small executables or embedded devices**.\n\n - NEW **automatic GIF recording** feature: Actually, automatic GIF recording (**CTRL+F12**) for any raylib application has been available for some versions but this feature was really slow and low-performant using an old gif library with many file accesses. It has been replaced by a **high-performant alternative** (`msf_gif.h`) that operates directly on memory... and actually works very well! Try it out!\n\n - NEW **RenderBatch** system: `rlgl` module has been redesigned to support custom **render batches** to allow grouping draw calls as desired, previous implementation just had one default render batch. This feature has not been exposed to raylib API yet but it can be used by advanced users dealing with `rlgl` directly. For example, multiple `RenderBatch` can be created for 2D sprites and 3D geometry independently.\n\n - NEW **Framebuffer** system: `rlgl` module now exposes an API for custom **Framebuffer attachments** (including cubemaps!). raylib `RenderTexture` is a basic use-case, just allowing color and depth textures, but this new API allows the creation of more advanced Framebuffers with multiple attachments, like the **G-Buffers**. `GenTexture*()` functions have been redesigned to use this new API.\n\n - Improved **software rendering**: raylib `Image*()` API is intended for software rendering, for those cases when **no GPU or no Window is available**. Those functions operate directly with **multi-format** pixel data on RAM and they have been completely redesigned to be way faster, specially for small resolutions and retro-gaming. Low-end embedded devices like **microcontrollers with custom displays** could benefit of this raylib functionality!\n\n - File **loading from memory**: Multiple functions have been redesigned to load data from memory buffers **instead of directly accessing the files**, now all raylib file loading/saving goes through a couple of functions that load data into memory. This feature allows **custom virtual-file-systems** and it gives more control to the user to access data already loaded in memory (i.e. images, fonts, sounds...).\n\n - NEW **Window states** management system: raylib `core` module has been redesigned to support Window **state check and setup more easily** and also **before/after Window initialization**, `SetConfigFlags()` has been reviewed and `SetWindowState()` has been added to control Window minification, maximization, hiding, focusing, topmost and more.\n\n - NEW **GitHub Actions** CI/CD system: Previous CI implementation has been reviewed and improved a lot to support **multiple build configurations** (platforms, compilers, static/shared build) and also an **automatic deploy system** has been implemented to automatically attach the different generated artifacts to every new release. As the system seems to work very good, previous CI platforms (AppVeyor/TravisCI) have been removed.\n\nA part of those changes, many new functions have been added, some redundant functions removed and many functions have been reviewed for consistency with the full API (function name, parameters name and order, code formatting...). Again, this release represents is a **great improvement for raylib and marks the way forward** for the library. Make sure to check [CHANGELOG](CHANGELOG) for details! Hope you enjoy it!\n\nHappy holidays! :)\n\nnotes on raylib 3.7\n-------------------\n\nApril 2021, it's been about 4 months since the last raylib release and here is already a new one, this time with a bunch of internal redesigns and improvements. Surprisingly, on April 8th I was awarded for a second time with the [Google Open Source Peer Bonus Award](https://opensource.googleblog.com/2021/04/announcing-first-group-of-google-open-source-peer-bonus-winners.html) for my contribution to open source world with raylib and it seems the library is getting some traction, what a better moment for a new release? Let's see what can be found in this new version:\n\nLet's start with some numbers:\n\n - **+100** closed issues (for a TOTAL of **+900**!)\n - **+400** commits since previous RELEASE\n - **+50** functions ADDED (**+30** of them to rlgl API)\n - **+30** functions REVIEWED/REDESIGNED\n - **+40** new contributors (for a TOTAL of **+210**!)\n\nHighlights for `raylib 3.7`:\n\n - **REDESIGNED: `rlgl` module for greater abstraction level**. This suppose an **important change in raylib architecture**, now `rlgl` functionality is self-contained in the module and used by higher-level layers (specially by `core` module), those upper layers are the ones that expose functionality to the main API when required, for example the `Shaders`, `Mesh` and `Materials` functionality. Multiple `rlgl` functions have been renamed for consistency, in this case, following the `rl*()` prefix convention. Functions have also been reorganized internally by categories and `GenTexture*()` functions have been removed from the library and moved to [`models_material_pbr`](https://github.com/raysan5/raylib/blob/master/examples/models/models_material_pbr.c) example.\n\n - **REDESIGNED: VR simulator and stereo rendering mechanism**. A **brand new API** has been added, more comprehensive and better integrated with raylib, the **new stereo rendering** can be combined with `RenderTexture` and `Shader` API allowing the user to **manage fbo and distortion shader directly**. Also, the new rendering mechanism supports **instancing on stereo rendering**! Check the updated [`core_vr_simulator`](https://github.com/raysan5/raylib/blob/master/examples/core/core_vr_simulator.c) example for reference!\n\n - **ADDED: New file access callbacks system**. Several new callback functions have been added to the API to allow custom file loaders. A [nice example](https://github.com/RobLoach/raylib-physfs) it's the **raylib integration with a virtual file system** [PhysFS](https://icculus.org/physfs/).\n\n - **ADDED: glTF animations support**. glTF is the preferred models file format to be used with raylib and along the addition of a models animation API on latest raylib versions, now animations support for glTF format has come to raylib, thanks for this great contribution to [Hristo Stamenov](@object71)\n\n - **ADDED: Music streaming support from memory**. raylib has been adding the `Load*FromMemory()` option to all its supported file formats but **music streaming** was not supported yet... until now. Thanks to this great contribution by [Agnis \"NeZvērs\" Aldiņš](@nezvers), now raylib supports music streaming from memory data for all supported file formats: WAV, OGG, MP3, FLAC, XM and MOD.\n\n - **RENAMED: enums values for consistency**. Most raylib enums names and values names have been renamed for consistency, now all value names start with the type of data they represent. It increases clarity and readability when using those values and also **improves overall library consistency**.\n\nBesides those key changes, many functions have been reviewed with improvements and bug fixes, many of them contributed by the community! Thanks! And again, this release sets a **new milestone for raylib library**. Make sure to check [CHANGELOG](CHANGELOG) for detailed list of changes! Hope you enjoy this new raylib installment!\n\nHappy **gamedev/tools/graphics** programming! :)\n\nnotes on raylib 4.0 - 8th Anniversary Edition\n---------------------------------------------\n\nIt's been about 6 months since last raylib release and it's been **8 years since I started with this project**, what an adventure! It's time for a new release: `raylib 4.0`, **the biggest release ever** and an inflection point for the library. Many hours have been put in this release to make it special, **many library details have been polished**: syntax, naming conventions, code comments, functions descriptions, log outputs... Almost all the issues have been closed (only 3 remain open at the moment of this writing) and some amazing new features have been added. I expect this **`raylib 4.0`** to be a long-term version (LTS), stable and complete enough for any new graphic/game/tool application development.\n\nLet's start with some numbers:\n\n - **+130** closed issues (for a TOTAL of **+1030**!)\n - **+550** commits since previous RELEASE\n - **+20** functions ADDED to raylib API\n - **+60** functions ADDED to rlgl API\n - **+40** functions RENAMED/REVIEWED/REDESIGNED\n - **+60** new contributors (for a TOTAL of **+275**!)\n\nHighlights for `raylib 4.0`:\n\n - **Naming consistency and coherency**: `raylib` API has been completely reviewed to be consistent on naming conventions for data structures and functions, comments and descriptions have been reviewed, also the syntax of many symbols for consistency; some functions and structs have been renamed (i.e. `struct CharInfo` to `struct GlyphInfo`). Output log messages have been also improved to show more info to the users. Several articles have been written in this process: [raylib_syntax analysis](https://github.com/raysan5/raylib/wiki/raylib-syntax-analysis) and [raylib API usage analysis](https://gist.github.com/raysan5/7c0c9fff1b6c19af24bb4a51b7383f1e). In general, a big polishment of the library to make it more consistent and coherent.\n\n - **Event Automation System**: This new _experimental_ feature has been added for future usage, it allows to **record input events and re-play them automatically**. This feature could be very useful to automatize examples testing but also for tutorials with assisted game playing, in-game cinematics, speedruns, AI playing and more! Note this feature is still experimental.\n\n - **Custom game-loop control**: As requested by some advanced users, **the game-loop control can be exposed** compiling raylib with the config flag: `SUPPORT_CUSTOM_FRAME_CONTROL`. It's intended for advanced users that want to control the events polling and also the timing mechanisms of their games.\n\n - [**`rlgl 4.0`**](https://github.com/raysan5/raylib/blob/master/src/rlgl.h): This module has been completely **decoupled from platform layer** and raylib, now `rlgl` single-file header-only library only depends on the multiple OpenGL backends supported, even the dependency on `raymath` has been removed. Additionally, **support for OpenGL 4.3** has been added, supporting compute shaders and Shader Storage Buffer Objects (SSBO). Now `rlgl` can be used as a complete standalone portable library to wrap several OpenGL version and providing **a simple and easy-to-use pseudo-OpenGL immediate-mode API**.\n\n - [**`raymath 1.5`**](https://github.com/raysan5/raylib/blob/master/src/raymath.h): This module has been reviewed and some new conventions have been adopted to make it **more portable and self-contained**:\n   - Functions are self-contained, no function use other raymath function inside, required code is directly re-implemented\n   - Functions input parameters are always received by value\n   - Functions use always a \"result\" variable for return\n   - Angles are always in radians (`DEG2RAD`/`RAD2DEG` macros provided for convenience)\n\n - [**`raygui 3.0`**](https://github.com/raysan5/raygui): The **official raylib immediate-mode gui library** (included in `raylib/src/extras`) has been updated to a new version, embedding the icons collection and adding mulstiple improvements. It has been simplified and constrained for a better focus on its task: provide a simple and easy-to-use immediate-mode-gui library for small tools development.\n\n - [**`raylib_parser`**](https://github.com/raysan5/raylib/tree/master/parser): Added **new tool to parse `raylib.h`** and tokenize its enums, structs and functions, extracting all required info (name, params, descriptions...) into custom output formats (TXT, XML, JSON...) for further processing. This tool is specially useful to **automatize bindings generation**. Hopefully, this tool will make life easier to binding creators to update their bindings for raylib 4.0 or adding new ones!\n\n - **Zig and Odin official support for raylib**: Those two new amazing programming languages are officially supporting raylib, `Zig` lists raylib as an [official example for C interoperatibility](https://ziglang.org/learn/samples/#c-interoperability) and Odin [officially supports raylib as a vendor library](https://github.com/odin-lang/Odin/tree/master/vendor/raylib). Both languages also have several bingings to raylib. Additionally, Zig build system supported has been added to compile raylib library and examples.\n\nThose are some of the key features for this new release but actually there is way more! **Support for `VOX` ([MagikaVoxel](https://ephtracy.github.io/)) 3d model format** has been added, **new [raylib_game_template](https://github.com/raysan5/raylib-game-template)** repo shared, **new `EncodeDataBase64()` and `DecodeDataBase64()` functions** added, **improved HiDPI support**, new `DrawTextPro()` with support for text rotations, completely **reviewed `glTF` models loading**, added **`SeekMusicStream()` for music seeking**, many new examples and +20 examples reviewed... **hundreds of improvements and bug fixes**! Make sure to check [CHANGELOG](CHANGELOG) for a detailed list of changes!\n\nUndoubtedly, **this is the best raylib ever**. Enjoy gamedev/tools/graphics programming! :)\n\nnotes on raylib 4.2\n-------------------\n\n**New raylib release!** Nine months after latest raylib, here is a new version. It was supposed to be just a small update but, actually, it's a huge update with lots of changes a improvements. It has been possible thanks to the many contributors that has helped with issues and improvements, it's the **update with more contributors to date** and that's amazing!\n\nSome numbers to start with:\n\n - **+200** closed issues (for a TOTAL of **1230**!)\n - **+540** commits since previous RELEASE (for a TOTAL of **+6000**!)\n - **+20** functions ADDED to raylib API (for a TOTAL of **502**!)\n - **+60** functions REVIEWED/REDESIGNED\n - **+70** new contributors (for a TOTAL of **+360**!)\n\nHighlights for `raylib 4.2`:\n\n - **raylib extra libraries cleanup**: raylib has been on diet and all the _extra_ libraries included on previous releases have been removed from raylib. Now raylib only includes the original **7** raylib modules: `rcore`, `rlgl`, `rshapes`, `rtextures`, `rtext`, `rmodels` and `raudio`. But no worries, _extra_ libraries have not been deleted, they have been moved to their own repos for better maintainability and more focus on its functionality. The libraries moved out from raylib repo are: [`raygui`](https://github.com/raysan5/raygui), [`physac`](https://github.com/raysan5/physac), [`rmem`](https://github.com/raylib-extras/rmem), [`reasings`](https://github.com/raylib-extras/reasings) and [`raudio`](https://github.com/raysan5/raudio) (standalone mode). On that same line, a new **amazing GitHub group:** [`raylib-extras`](https://github.com/raylib-extras) has been created by @JeffM2501 to contain raylib extra libraries as well as other raylib add-ons provided by the community. Jeff has done an amazing work on that line, providing multiple libraries and examples for raylib, like [custom first-person and third person camera systems](https://github.com/raylib-extras/extras-c/tree/main/cameras), [Dear ImGui raylib integration](https://github.com/raylib-extras/rlImGui), [multiple specific examples](https://github.com/raylib-extras/examples-c) and even a complete [RPG Game Example](https://github.com/raylib-extras/RPGExample)! Great work Jeff! :D\n\n - **raylib examples review**: The +120 raylib examples have been reviewed to add clearer information about when the were first created (raylib version used) and when they were updated for the last time. But the greatest improvement for users has been the **addition of an estimated difficulty level** for every example, [web has been updated accordingly](https://www.raylib.com/examples.html) to reflect those difficulty levels. Now examples are classified with **1 to 4 stars** depending on difficulty to help users with their learning process. Personally, I think this \"small\" addition could be a game-changer to better guide new users on the library adoption! Additionally, this new raylib release includes 7 new examples; the most interesting one: [`text_codepoints_loading`](https://www.raylib.com/examples/text/loader.html?name=text_codepoints_loading) that illustrates how to load and draw custom codepoints from a font file, very useful for Asian languages.\n\n - [**`rres 1.0`**](https://github.com/raysan5/rres): New `rres` **resources packaging file-format**, including a [`rres-raylib`](https://github.com/raysan5/rres/blob/master/src/rres-raylib.h) library implementation and [`rrespacker`](https://raylibtech.itch.io/rrespacker) tool. `rres` file format has been [under development for +8 years](https://github.com/raysan5/rres#design-history) and it was originally created to be part of raylib. It was highly inspired by _XNA XNB_ resources file format but design has changed a lot along the years. This first release of the format specs is engine-agnostic and has been designed to be portable to any engine, including lots of professional features like data processing, compression and encryption.\n\n - [**`raygui 3.2`**](https://github.com/raysan5/raygui): The **official raylib immediate-mode gui library** designed for tools development has been updated to a new version aligned with raylib 4.2. Multiple controls have been reviewed for library consistency, now all controls follow a similar function signature. It has been battle-tested with the development of +8 published tools in the last months. The tools can be seen and used for free in the [raylib technologies tools page](https://raylibtech.itch.io/). Worth mentioning that several of those **tools have been open sourced** for anyone to use, compile, contribute or learn how the code works.\n\n - [**`raylib_parser`**](https://github.com/raysan5/raylib/tree/master/parser): Multiple contributors **using the tool to automatize bindings creation** have contributed with improvements of this **tool to parse `raylib.h`** (and other raylib-style headers) to tokenize its enums, structs and functions. Processed data can be exported to custom file formats (i.e XML, JSON, LUA) for bindings generation or even docs generation if required.\n\n - **New file system API**: Current API has been redesigned to be more comprehensive and better aligned with raylib naming conventions, two new functions are provided `LoadDirectoryFiles()`/`LoadDirectoryFilesEx()` to load a `FilePathList` for provided path, supporting extension filtering and recursive directory scan. `LoadDroppedFiles()` has been renamed to better reflect its internal functionality. Now, all raylib functions that start with `Load*()` allocate memory internally and a equivalent `Unload*()` function is defined to take care of that memory internally when not required any more!\n\n - **New audio stream processors API** (_experimental_): Now real-time audio stream data processors can be added using callbacks to played Music. It allows users to create custom effects for audio like delays of low-pass-filtering (example provided). The new API uses a callback system and it's still _ highly experimental_, it differs from the usual level of complexity that provides raylib and it is intended for advanced users. It could change in the future but, actually, `raudio` module is in the spotlight for future updates; [miniaudio](https://github.com/mackron/miniaudio) implements a new higher-level API that can be useful in the future for raylib.\n\nAs always, there are more improvements than the key features listed, make sure to check raylib [CHANGELOG](CHANGELOG) for the detailed list of changes; for this release a `WARNING` flag has been added to all the changes that could affect bindings or productivity code. **raylib keeps improving one more version** and a special focus on maintainability has been put on the library for the future. Specific/advance functionality will be provided through **raylib-extras** repos and raylib main repo devlelopment will be focused on what made raylib popular: being a simple and easy-to-use library to **enjoy videogames programming**.\n\n**Enjoy gamedev/tools/graphics programming!** :)\n\nnotes on raylib 4.5\n-------------------\n\nIt's been **7 months** since latest raylib release. As usual, **many parts of the library have been reviewed and improved** along those months. Many issues have been closed, staying under 10 open issues at the moment of this writting and also many PRs from contributors have been received, reviewed and merged into raylib library. Some new functions have been added and some others have been removed to improve library coherence and avoid moving too high level, giving the users the tools to implement advance functionality themselfs over raylib. Again, this is a big release with a considerable amount of changes and improvements. Here is a small summary highlighting this new **rayib 4.5**.\n\nSome numbers for this release:\n\n - **+100** closed issues (for a TOTAL of **+1340**!)\n - **+350** commits since previous RELEASE (for a TOTAL of **+6350**!)\n - **+25** functions ADDED to raylib API (for a TOTAL of **516**!)\n - **+40** functions REVIEWED/REDESIGNED\n - **+40** new contributors (for a TOTAL of **405**!)\n\nHighlights for `raylib 4.5`:\n\n - **`NEW` Improved ANGLE support on Desktop platforms**: Support for OpenGL ES 2.0 on Desktop platforms (Windows, Linux, macOS) has been reviewed by @wtnbgo GitHub user. Now raylib can be compiled on desktop for OpenGL ES 2.0 and linked against [`ANGLE`](https://github.com/google/angle). This _small_ addition open the door to building raylib for all **ANGLE supported backends: Direct3D 11, Vulkan and Metal**. Please note that this new feature is still experimental and requires further testing!\n\n - **`NEW` Camera module**: A brand new implementation from scratch for `rcamera` module, contributed by @Crydsch GitHub user! **New camera system is simpler, more flexible, more granular and more extendable**. Specific camera math transformations (movement/rotation) have been moved to individual functions, exposing them to users if required. Global state has been removed from the module and standalone usage has been greatly improved; now `rcamera.h` single-file header-only library can be used externally, independently of raylib. A new `UpdateCameraPro()` function has been added to address input-dependency of `UpdateCamera()`, now advanced users have **full control over camera inputs and movement/rotation speeds**!\n\n - **`NEW` Support for M3D models and M3D/GLTF animations**: 3d models animations support has been a limited aspect of raylib for long time, some versions ago IQM animations were supported but raylib 4.5 also adds support for the brand new [M3D file format](https://bztsrc.gitlab.io/model3d/), including animations and the long expected support for **GLTF animations**! The new M3D file format is **simple, portable, feature complete, extensible and open source**. It also provides a complete set of tools to export/visualize M3D models from/to Blender! Now raylib supports up to **3 model file-formats with animations**: `IQM`, `GLTF` and `M3D`.\n\n - **`NEW` Support QOA audio format (import/export)**: Just a couple of months ago the new [QOA file format](https://qoaformat.org/) was published, a very simple, portable and open source quite-ok-audio file format. raylib already supports it, added to `raudio` module and including audio loading from file, loading from memory, streaming from file, streaming from memory and **exporting to QOA** audio format. **Because simplicity really matters to raylib!**\n\n - **`NEW` Module for compressed textures loading**: [`rl_gputex`](https://github.com/raysan5/raylib/blob/master/src/external/rl_gputex.h), a portable single-file header-only small library to load compressed texture file-formats (DDS, PKM, KTX, PVR, ASTC). Provided functionality is not new to raylib but it was part of the raylib `rtextures` module, now it has been moved into a separate self-contained library, **improving portability**. Note that this module is only intended to **load compressed data from files, ready to be uploaded to GPU**, no compression/decompression functionality is provided. This change is a first step towards a better modularization of raylib library.\n\n - **Reviewed `rlgl` module for automatic limits checking**: Again, [`rlgl`](https://github.com/raysan5/raylib/blob/master/src/rlgl.h) has been reviewed to simplify usage. Now users do not need to worry about reaching the internal render-batch limits when they send their triangles to draw 2d/3d, `rlgl` manages it automatically! This change allows a **great simplification for other modules** like `rshapes`, `rtextures` and `rmodels` that do not need to worry about bufffer overflows and can just define as many vertex as desired!\n\n - **Reviewed `rshapes` module to minimize the rlgl dependency**: Now `rshapes` 2d shapes drawing functions **only depend on 6 low-level functions**: `rlBegin()`, `rlEnd()`, `rlVertex3f()`, `rlTexCoord2f()`, `rlNormal3f()`, `rlSetTexture()`. With only those pseudo-OpenGl 1.1 minimal functionality, everything can be drawn! This improvement converts `rshapes` module in a **self-contained, portable shapes-drawing library that can be used independently of raylib**, as far as entry points for those 6 functions are provided by the user. It even allows to be used for software rendering, with the proper backend!\n\n - **Added data structures validation functions**: Multiple functions have been added by @RobLoach GitHub user to ease the validation of raylib data structures: `IsImageReady()`, `IsTextureReady()`, `IsSoundReady()`... Now users have a simple mechanism to **make sure data has been correctly loaded**, instead of checking internal structure values by themselves.\n\nAs usual, those are only some highlights but there is much more! New image generators, new color transformation functionality, improved blending support for color/alpha, etc... Make sure to check raylib [CHANGELOG]([CHANGELOG](https://github.com/raysan5/raylib/blob/master/CHANGELOG)) for a detailed list of changes! Please, note that all breaking changes have been flagged with a `WARNING` in the CHANGELOG, specially useful for binding creators!\n\n**raylib keeps improving one more version** with a special focus on maintainability and sustainability. Always working towards making the library more **simple and easy-to-use**.\n\nLet's keep **enjoying games/tools/graphics programming!** :)\n\nnotes on raylib 5.0\n-------------------\n\nIt's been **7 months** since latest raylib release and **10 years** since raylib 1.0 was officially released... what an adventure! In the last 10 years raylib has improved a lot, new functions have been added, many new features and improvements implemented, up to **500 contributors** have helped to shape the library as it is today. `raylib 5.0` is the final result of all this incredible amount of work and dedication. Here is the summary with the key features and additions of this NEW major version of raylib.\n\nSome numbers for this release:\n\n - **+200** closed issues (for a TOTAL of **+1540**!)\n - **+550** commits since previous RELEASE (for a TOTAL of **+6950**!)\n - **+35** functions ADDED to raylib API (for a TOTAL of **552**!)\n - **+60** functions REVIEWED/REDESIGNED\n - **+80** new contributors (for a TOTAL of **+500**!)\n\nHighlights for `raylib 5.0`:\n\n - **`rcore` module platform-split**: Probably the biggest raylib redesign in the last 10 years. raylib started as a library targeting 3 desktop platforms: `Windows`, `Linux` and `macOS` (thanks to `GLFW` underlying library) but with the years support for several new platforms has been added (`Android`, `Web`, `Rapsberry Pi`, `RPI native`...); lot of the platform code was shared so the logic was all together on `rcore.c` module, separated by compilation flags. This approach was very handy but also made it very difficult to support new platforms and specially painful for contributors not familiar with the module, navigating +8000 lines of code in a single file. A big redesign was really needed but the amount of work required was humungous and quite scary for a solo-developer like me, moreover considering that everything was working and the chances to break things were really high. Fortunately, some contributors were ready for the task (@ubkp, @michaelfiber, @Bigfoot71) and thanks to their initiative and super-hard work, the `rcore` [platform split](https://github.com/raysan5/raylib/blob/master/src/platforms) has been possible! This new raylib architecture greatly improves the platforms maintenance but also greatly simplifies the addition of new platforms. A [`platforms/rcore_template.c`](https://github.com/raysan5/raylib/blob/master/src/platforms/rcore_template.c) file is provided with the required structure and functions to be filled for the addition of new platforms, actually it has been simplified to mostly filling some pre-defined functions: `InitPlatform()`, `ClosePlatform`, `PollInputEvents`... Undoubtedly, **this redesign opens the doors to a new era for raylib**, letting the users to plug new platforms as desired.\n \n - **`NEW` Platform backend supported: SDL**: Thanks to the new `rcore` platform-split, the addition of new platforms/backends to raylib has been greatly simplified. As a proof of concept, [`SDL2`](https://libsdl.org/) platform backend has been added to raylib as an alternative for `GLFW` library for desktop builds: [`platforms/rcore_desktop_sdl`](https://github.com/raysan5/raylib/blob/master/src/platforms/rcore_desktop_sdl.c). Lot of work has been put to provide exactly the same features as the other platforms and carefully test the new implementation. Now `SDL2` fans can use this new backend, just providing the required include libraries on compilation and linkage (not included in raylib, like `GLFW`). `SDL` backend support also **eases the process of supporting a wider range of platforms** that already support `SDL`.\n\n - **`NEW` Platform backend supported: Nintendo Switch (closed source)**: The addition of the `SDL` backend was quite a challenge but to really verify the robustness and ease of the new platform plugin system, adding support for a console was a more demanding adventure. Surprisingly, only two days of work were required to add support for `Nintendo Switch` to raylib! Implementation result showed an outstanding level of simplicity, with a **self-contained module** (`rcore_swith.cpp`) supporting graphics and inputs. Unfortunately this module can not be open-sourced due to licensing restrictions.\n\n - **`NEW` Splines drawing and evaluation API**: A complete set of functions has been added to [draw](https://github.com/raysan5/raylib/blob/master/src/raylib.h#L1258) and [evaluate](https://github.com/raysan5/raylib/blob/master/src/raylib.h#L1270) different types of splines: `Linear`, `Basis`, `Catmull-Rom`, `Quadratic Bezier` and `Cubic Bezier`. Splines are extremely useful for game development (describe paths, control NPC movement...) but they can also be very useful on tools development (node-conections, elements-movement, 3d modelling, animations...). This was the missing feature on the raylib [`rshapes`](https://github.com/raysan5/raylib/blob/master/src/rshapes.h) module to make it complete! Note that `rshapes` module can also be used independently of raylib just providing the **only 6 functions required for vertex definition and drawing**.\n \n - **`NEW` Pseudo-random numbers generator: rprand**: After several years of users asking for this missing piece, a brand new pseudo-random generator module has been added to raylib. [`rprand`](https://github.com/raysan5/raylib/blob/master/src/external/rprand.h) implements the `Xoshiro128**` algorithm combined with `SplitMix64`, specially suited for **fast software pseudo-random numbers generation**. The module also implies some useful functions to generate non-repetitive random numbers sequences, functionality exposed by raylib. usage of this module can be controlled by a compilation flag, in case the default libc `rand()` function was preferred.\n\n - **`NEW` Automation Events System API**: This new system was first added in `raylib 4.0` as an experimental feature but it was a bit clumsy and there was no API exposed to users. For the new `raylib 5.0` the system has been redesigned and [proper API](https://github.com/raysan5/raylib/blob/master/src/raylib.h#L1135) added for the users. With this new events automation system, users can **record input events for later replay**, very useful feature for testing automation, tutorials generation, assisted game playing, in-game cinematics, speedruns saving or even AI assited game playing!\n\n - **`NEW` [`raygui 4.0`](https://github.com/raysan5/raygui)**: The **official raylib immediate-mode gui library** designed for tools development has been updated to a new version, aligned with raylib 5.0. This new version is a complete redesign of raygui to unify all controls structure and usage, now all controls have the same function signature!. `raygui` has been battle-tested with the development of +12 published tools in the last few years. The tools can be seen and used for free in the [raylib technologies tools page](https://raylibtech.itch.io/). Worth mentioning that several of those **tools have been open sourced** for anyone to use, compile, contribute or learn how the code works.\n\n - **`NEW` raylib web examples functionality**: Beside the addition of several new examples, the web examples functionality has been improved. Examples have been organized by [complexity level](https://www.raylib.com/examples.html), marked with one star for simple examples and up to 4 stars for more complex ones. A new option has been added to web to allow to **filter examples by function-name** usage, to ease the learning process when looking for an usage example of some function. Finally, **open-graph metadata** information has been added to all examples individual webpages, improving a the visuals and information when sharing those webpages on social networks, sharing the example screenshot and details.\n\nAs always, those are only some highlights of the new `raylib 5.0` but there is many more improvements! Support for 16-bit HDR images/textures, SVG loading and scaling support, new OpenGL ES 3.0 graphic backend, new image gradient generators, sound alias loading, improved 3d models loading, multiple optimizations, new bindings, CodeQL integration and much more! \n \nMake sure to check raylib [CHANGELOG]([CHANGELOG](https://github.com/raysan5/raylib/blob/master/CHANGELOG)) for a detailed list of changes!\n\nUndoubtedly, this is the **biggest raylib update in 10 years**. Many new features and improvements with a special focus on maintainability and long-term sustainability. **Undoubtedly, this is the raylib of the future**.\n\n**Enjoy programming!** :)\n\nnotes on raylib 5.5\n-------------------\n\nOne year after raylib 5.0 release, arrives `raylib 5.5`, the next big revision of the library. It's been **11 years** since raylib 1.0 release and in all this time it has never stopped growing and improving. With an outstanding number of new contributors and improvements, it's, again, the biggest raylib release to date.\n\nSome numbers for this release:\n\n - **+270** closed issues (for a TOTAL of **+1810**!)\n - **+800** commits since previous RELEASE (for a TOTAL of **+7770**!)\n - **+30** functions ADDED to raylib API (for a TOTAL of **580**!)\n - **+110** functions REVIEWED with fixes and improvements\n - **+140** new contributors (for a TOTAL of **+640**!)\n\nHighlights for `raylib 5.5`:\n\n - **`NEW` raylib pre-configured Windows package**: The new raylib **portable and self-contained Windows package** for `raylib 5.5`, intended for nobel devs that start in programming world, comes with one big addition: support for **C code building for Web platform with one-single-mouse-click!** For the last 10 years, the pre-configured raylib Windows package allowed to edit simple C projects on Notepad++ and easely compile Windows executables with an automatic script; this new release adds the possibility to compile the same C projects for Web platform with a simple mouse click. This new addition **greatly simplifies C to WebAssembly project building for new users**. The `raylib Windows Installer` package can be downloaded for free from [raylib on itch.io](https://raysan5.itch.io/raylib).\n\n - **`NEW` raylib project creator tool**: A brand new tool developed to help raylib users to **setup new projects in a professional way**. `raylib project creator` generates a complete project structure with **multiple build systems ready-to-use** and **GitHub CI/CD actions pre-configured**. It only requires providing some C files and basic project parameters! The tools is [free and open-source](https://raysan5.itch.io/raylib-project-creator), and [it can be used online](https://raysan5.itch.io/raylib-project-creator)!.\n\n - **`NEW` Platform backend supported: RGFW**: Thanks to the `rcore` platform-split implemented in `raylib 5.0`, **adding new platforms backends has been greatly simplified**, new backends can be added using provided template, self-contained in a single C module, completely portable. A new platform backend has been added: [`RGFW`](https://github.com/raysan5/raylib/blob/master/src/platforms/rcore_desktop_rgfw.c). `RGFW` is a **new single-file header-only portable library** ([`RGFW.h`](https://github.com/ColleagueRiley/RGFW)) intended for platform-functionality management (windowing and inputs); in this case for **desktop platforms** (Windows, Linux, macOS) but also for **Web platform**. It adds a new alternative to the already existing `GLFW` and `SDL` platform backends.\n \n - **`NEW` Platform backend version supported: SDL3**: Previous `raylib 5.0` added support for `SDL2` library, and `raylib 5.5` not only improves SDL2 functionality, with several issues reviewed, but also adds support for the recently released big SDL update in years: [`SDL3`](https://wiki.libsdl.org/SDL3/FrontPage). Now users can **select at compile time the desired SDL version to use**, increasing the number of potential platforms supported in the future!\n \n - **`NEW` Retro-console platforms supported: Dreamcast, N64, PSP, PSVita, PS4**: Thanks to the platform-split on `raylib 5.0`, **supporting new platform backends is easier than ever!** Along the raylib `rlgl` module support for the  `OpenGL 1.1` graphics API, it opened the door to [**multiple homebrew retro-consoles backend implementations!**](https://github.com/raylib4Consoles) It's amazing to see raylib running on +20 year old consoles like [Dreamcast](https://github.com/raylib4Consoles/raylib4Dreamcast), [PSP](https://github.com/raylib4Consoles/raylib4Psp) or [PSVita](https://github.com/psp2dev/raylib4Vita), considering the hardware constraints of those platforms and proves **raylib outstanding versability!** Those additional platforms can be found in separate repositories and have been created by the amazing programmer Antonio Jose Ramos Marquez (@psxdev).\n \n - **`NEW` GPU Skinning support**: After lots of requests for this feature, it has been finally added to raylib thanks to the contributor Daniel Holden (@orangeduck), probably the developer that has further pushed models animations with raylib, developing two amazing tools to visualize and test animations: [GenoView](https://github.com/orangeduck/GenoView) and [BVHView](https://github.com/orangeduck/BVHView). Adding GPU skinning was a tricky feature, considering it had to be **available for all raylib supported platforms**, including limited ones like Raspberry Pi with OpenGL ES 2.0, where some advance OpenGL features are not available (UBO, SSBO, Transform Feedback) but a multi-platform solution was found to make it possible. A new example, [`models_gpu_skinning`](https://github.com/raysan5/raylib/blob/master/examples/models/models_gpu_skinning.c) has been added to illustrate this new functionality. As an extra, previous existing CPU animation system has been greatly improved, multiplying performance by a factor (simplifiying required maths).\n \n - **`NEW` [`raymath`](https://github.com/raysan5/raylib/blob/master/src/raymath.h) C++ operators**: After several requested for this feature, C++ math operators for `Vector2`, `Vector3`, `Vector4`, `Quaternion` and `Matrix` has been added to `raymath` as an extension to current implementation. Despite being only available for C++ because C does not support it, these operators **simplify C++ code when doing math operations**.\n\nBeside those new big features, `raylib 5.5` comes with MANY other improvements: \n\n- Normals support on batching system\n- Clipboard images reading support\n- CRC32/MD5/SHA1 hash computation\n- Gamepad vibration support\n- Improved font loading (no GPU required) with BDF fonts support\n- Time-based camera movement\n- Improved GLTF animations loading\n\n...and [much much more](https://github.com/raysan5/raylib/blob/master/CHANGELOG), including **many functions reviews and new functions added!**\n \nMake sure to check raylib [CHANGELOG](https://github.com/raysan5/raylib/blob/master/CHANGELOG) for a detailed list of changes!\n\nTo end with, I want to **thank all the contributors (+640!**) that along the years have **greatly improved raylib** and pushed it further and better day after day. Thanks to all of them, raylib is the amazing library it is today.\n\nLast but not least, I want to thank **raylib sponsors and all the raylib community** for their support and continuous engagement with the library, creating and sharing amazing raylib projects on a daily basis. **Thanks for making raylib a great platform to enjoy games/tools/graphic programming!**\n\n**After 11 years of development, `raylib 5.5` is the best raylib ever.**\n\n**Enjoy programming with raylib!** :)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.8564453125,
          "content": "Copyright (c) 2013-2025 Ramon Santamaria (@raysan5)\n\nThis software is provided \"as-is\", without any express or implied warranty. In no event \nwill the authors be held liable for any damages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose, including commercial \napplications, and to alter it and redistribute it freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not claim that you \n  wrote the original software. If you use this software in a product, an acknowledgment \n  in the product documentation would be appreciated but is not required.\n\n  2. Altered source versions must be plainly marked as such, and must not be misrepresented\n  as being the original software.\n\n  3. This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.96484375,
          "content": "<img align=\"left\" style=\"width:260px\" src=\"https://github.com/raysan5/raylib/blob/master/logo/raylib_logo_animation.gif\" width=\"288px\">\n\n**raylib is a simple and easy-to-use library to enjoy videogames programming.**\n\nraylib is highly inspired by Borland BGI graphics lib and by XNA framework and it's especially well suited for prototyping, tooling, graphical applications, embedded systems and education.\n\n*NOTE for ADVENTURERS: raylib is a programming library to enjoy videogames programming; no fancy interface, no visual helpers, no debug button... just coding in the most pure spartan-programmers way.*\n\nReady to learn? Jump to [code examples!](https://www.raylib.com/examples.html)\n\n---\n\n<br>\n\n[![GitHub Releases Downloads](https://img.shields.io/github/downloads/raysan5/raylib/total)](https://github.com/raysan5/raylib/releases)\n[![GitHub Stars](https://img.shields.io/github/stars/raysan5/raylib?style=flat&label=stars)](https://github.com/raysan5/raylib/stargazers)\n[![GitHub commits since tagged version](https://img.shields.io/github/commits-since/raysan5/raylib/5.5)](https://github.com/raysan5/raylib/commits/master)\n[![GitHub Sponsors](https://img.shields.io/github/sponsors/raysan5?label=sponsors)](https://github.com/sponsors/raysan5)\n[![Packaging Status](https://repology.org/badge/tiny-repos/raylib.svg)](https://repology.org/project/raylib/versions)\n[![License](https://img.shields.io/badge/license-zlib%2Flibpng-blue.svg)](LICENSE)\n\n[![Discord Members](https://img.shields.io/discord/426912293134270465.svg?label=Discord&logo=discord)](https://discord.gg/raylib)\n[![Reddit Static Badge](https://img.shields.io/badge/-r%2Fraylib-red?style=flat&logo=reddit&label=reddit)](https://www.reddit.com/r/raylib/)\n[![Youtube Subscribers](https://img.shields.io/youtube/channel/subscribers/UC8WIBkhYb5sBNqXO1mZ7WSQ?style=flat&label=Youtube&logo=youtube)](https://www.youtube.com/c/raylib)\n[![Twitch Status](https://img.shields.io/twitch/status/raysan5?style=flat&label=Twitch&logo=twitch)](https://www.twitch.tv/raysan5)\n\n[![Windows](https://github.com/raysan5/raylib/workflows/Windows/badge.svg)](https://github.com/raysan5/raylib/actions?query=workflow%3AWindows)\n[![Linux](https://github.com/raysan5/raylib/workflows/Linux/badge.svg)](https://github.com/raysan5/raylib/actions?query=workflow%3ALinux)\n[![macOS](https://github.com/raysan5/raylib/workflows/macOS/badge.svg)](https://github.com/raysan5/raylib/actions?query=workflow%3AmacOS)\n[![WebAssembly](https://github.com/raysan5/raylib/workflows/WebAssembly/badge.svg)](https://github.com/raysan5/raylib/actions?query=workflow%3AWebAssembly)\n\n[![CMakeBuilds](https://github.com/raysan5/raylib/workflows/CMakeBuilds/badge.svg)](https://github.com/raysan5/raylib/actions?query=workflow%3ACMakeBuilds)\n[![Windows Examples](https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml/badge.svg)](https://github.com/raysan5/raylib/actions/workflows/windows_examples.yml)\n[![Linux Examples](https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml/badge.svg)](https://github.com/raysan5/raylib/actions/workflows/linux_examples.yml)\n\nfeatures\n--------\n  - **NO external dependencies**, all required libraries are [bundled into raylib](https://github.com/raysan5/raylib/tree/master/src/external)\n  - Multiple platforms supported: **Windows, Linux, MacOS, RPI, Android, HTML5... and more!**\n  - Written in plain C code (C99) using PascalCase/camelCase notation\n  - Hardware accelerated with OpenGL (**1.1, 2.1, 3.3, 4.3, ES 2.0, ES 3.0**)\n  - **Unique OpenGL abstraction layer** (usable as standalone module): [rlgl](https://github.com/raysan5/raylib/blob/master/src/rlgl.h)\n  - Multiple **Fonts** formats supported (TTF, OTF, FNT, BDF, sprite fonts)\n  - Multiple texture formats supported, including **compressed formats** (DXT, ETC, ASTC)\n  - **Full 3D support**, including 3D Shapes, Models, Billboards, Heightmaps and more! \n  - Flexible Materials system, supporting classic maps and **PBR maps**\n  - **Animated 3D models** supported (skeletal bones animation) (IQM, M3D, glTF)\n  - Shaders support, including model shaders and **postprocessing** shaders\n  - **Powerful math module** for Vector, Matrix and Quaternion operations: [raymath](https://github.com/raysan5/raylib/blob/master/src/raymath.h)\n  - Audio loading and playing with streaming support (WAV, QOA, OGG, MP3, FLAC, XM, MOD)\n  - **VR stereo rendering** support with configurable HMD device parameters\n  - Huge examples collection with [+140 code examples](https://github.com/raysan5/raylib/tree/master/examples)!\n  - Bindings to [+70 programming languages](https://github.com/raysan5/raylib/blob/master/BINDINGS.md)!\n  - **Free and open source**\n\nbasic example\n--------------\nThis is a basic raylib example, it creates a window and draws the text `\"Congrats! You created your first window!\"` in the middle of the screen. Check this example [running live on web here](https://www.raylib.com/examples/core/loader.html?name=core_basic_window).\n```c\n#include \"raylib.h\"\n\nint main(void)\n{\n    InitWindow(800, 450, \"raylib [core] example - basic window\");\n\n    while (!WindowShouldClose())\n    {\n        BeginDrawing();\n            ClearBackground(RAYWHITE);\n            DrawText(\"Congrats! You created your first window!\", 190, 200, 20, LIGHTGRAY);\n        EndDrawing();\n    }\n\n    CloseWindow();\n\n    return 0;\n}\n```\n\nbuild and installation\n----------------------\n\nraylib binary releases for Windows, Linux, macOS, Android and HTML5 are available at the [Github Releases page](https://github.com/raysan5/raylib/releases).\n\nraylib is also available via multiple package managers on multiple OS distributions.\n\n#### Installing and building raylib on multiple platforms\n\n[raylib Wiki](https://github.com/raysan5/raylib/wiki#development-platforms) contains detailed instructions on building and usage on multiple platforms.\n\n - [Working on Windows](https://github.com/raysan5/raylib/wiki/Working-on-Windows)\n - [Working on macOS](https://github.com/raysan5/raylib/wiki/Working-on-macOS)\n - [Working on GNU Linux](https://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux)\n - [Working on Chrome OS](https://github.com/raysan5/raylib/wiki/Working-on-Chrome-OS)\n - [Working on FreeBSD](https://github.com/raysan5/raylib/wiki/Working-on-FreeBSD)\n - [Working on Raspberry Pi](https://github.com/raysan5/raylib/wiki/Working-on-Raspberry-Pi)\n - [Working for Android](https://github.com/raysan5/raylib/wiki/Working-for-Android)\n - [Working for Web (HTML5)](https://github.com/raysan5/raylib/wiki/Working-for-Web-(HTML5))\n - [Working anywhere with CMake](https://github.com/raysan5/raylib/wiki/Working-with-CMake)\n\n*Note that the Wiki is open for edit, if you find some issues while building raylib for your target platform, feel free to edit the Wiki or open an issue related to it.*\n\n#### Setup raylib with multiple IDEs\n\nraylib has been developed on Windows platform using [Notepad++](https://notepad-plus-plus.org/) and [MinGW GCC](https://www.mingw-w64.org/) compiler but it can be used with other IDEs on multiple platforms.\n\n[Projects directory](https://github.com/raysan5/raylib/tree/master/projects) contains several ready-to-use **project templates** to build raylib and code examples with multiple IDEs.\n\n*Note that there are lots of IDEs supported, some of the provided templates could require some review, so please, if you find some issue with a template or you think they could be improved, feel free to send a PR or open a related issue.*\n\nlearning and docs\n------------------\n\nraylib is designed to be learned using [the examples](https://github.com/raysan5/raylib/tree/master/examples) as the main reference. There is no standard API documentation but there is a [**cheatsheet**](https://www.raylib.com/cheatsheet/cheatsheet.html) containing all the functions available on the library a short description of each one of them, input parameters and result value names should be intuitive enough to understand how each function works. \n\nSome additional documentation about raylib design can be found in [raylib GitHub Wiki](https://github.com/raysan5/raylib/wiki). Here are the relevant links:\n\n - [raylib cheatsheet](https://www.raylib.com/cheatsheet/cheatsheet.html)\n - [raylib architecture](https://github.com/raysan5/raylib/wiki/raylib-architecture)\n - [raylib library design](https://github.com/raysan5/raylib/wiki)\n - [raylib examples collection](https://github.com/raysan5/raylib/tree/master/examples)\n - [raylib games collection](https://github.com/raysan5/raylib-games)\n\n\ncontact and networks\n---------------------\n\nraylib is present in several networks and raylib community is growing everyday. If you are using raylib and enjoying it, feel free to join us in any of these networks. The most active network is our [Discord server](https://discord.gg/raylib)! :)\n\n - Webpage: [https://www.raylib.com](https://www.raylib.com)\n - Discord: [https://discord.gg/raylib](https://discord.gg/raylib)\n - Twitter: [https://www.twitter.com/raysan5](https://www.twitter.com/raysan5)\n - Twitch:  [https://www.twitch.tv/raysan5](https://www.twitch.tv/raysan5)\n - Reddit:  [https://www.reddit.com/r/raylib](https://www.reddit.com/r/raylib)\n - Patreon: [https://www.patreon.com/raylib](https://www.patreon.com/raylib)\n - YouTube: [https://www.youtube.com/channel/raylib](https://www.youtube.com/c/raylib)\n\ncontributors\n------------\n\n<a href=\"https://github.com/raysan5/raylib/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=raysan5/raylib&max=500&columns=20&anon=1\" />\n</a>\n\nlicense\n-------\n\nraylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check [LICENSE](LICENSE) for further details.\n\nraylib uses internally some libraries for window/graphics/inputs management and also to support different file formats loading, all those libraries are embedded with and are available in [src/external](https://github.com/raysan5/raylib/tree/master/src/external) directory. Check [raylib dependencies LICENSES](https://github.com/raysan5/raylib/wiki/raylib-dependencies) on [raylib Wiki](https://github.com/raysan5/raylib/wiki) for details.\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 4.677734375,
          "content": "# raylib roadmap\n\nHere is a wishlist with features and ideas to improve the library. Note that features listed here are usually long term improvements or just describe a route to follow for the library. There are also some additional places to look for raylib improvements and ideas:\n\n - [GitHub Issues](https://github.com/raysan5/raylib/issues) has several open issues for possible improvements or bugs to fix.\n - [raylib source code](https://github.com/raysan5/raylib/tree/master/src) has multiple *TODO* comments around code with pending things to review or improve.\n - raylib wishlists discussions are open to everyone to ask for improvements, feel free to check and comment:\n    - [raylib wishlist 2021](https://github.com/raysan5/raylib/discussions/1502)\n    - [raylib wishlist 2022](https://github.com/raysan5/raylib/discussions/2272)\n    - [raylib 5.0 wishlist](https://github.com/raysan5/raylib/discussions/2952)\n\n_Current version of raylib is complete and functional but there is always room for improvements._\n\n**raylib 5.x**\n - [ ] `rcore`: Support additional platforms: iOS, Xbox Series S|X\n - [ ] `rcore_web`: Avoid GLFW dependency, functionality can be directly implemented using emscripten SDK\n - [ ] `rlgl`: Review GLSL shaders naming conventions for consistency\n - [ ] `textures`: Improve compressed textures support, loading and saving\n - [ ] `rmodels`: Improve 3d objects loading, specially animations (obj, gltf)\n - [ ] `raudio`: Implement miniaudio high-level provided features\n - [ ] `examples`: Review all examples, add more and better code explanations\n - [ ] Software renderer backend? Maybe using `Image` provided API\n\n**raylib 4.x**\n - [x] Split core module into separate platforms?\n - [x] Redesign gestures system, improve touch inputs management\n - [x] Redesign camera module (more flexible) ([#1143](https://github.com/raysan5/raylib/issues/1143), https://github.com/raysan5/raylib/discussions/2507)\n - [x] Better documentation and improved examples, reviewed webpage with examples complexity level\n - [x] Focus on HTML5 ([raylib 5k gamejam](https://itch.io/jam/raylib-5k-gamejam)) and embedded platforms (RPI and similar SOCs)\n - [x] Additional support libraries: [raygui](https://github.com/raysan5/raygui), [rres](https://github.com/raysan5/rres)\n\n\n**raylib 4.0**\n - [x] Improved consistency and coherency in raylib API\n - [x] Continuous Deployment using GitHub Actions\n - [x] rlgl improvements for standalone usage (avoid raylib coupling)\n - Basic CPU/GPU stats system (memory, draws, time...) ([#1295](https://github.com/raysan5/raylib/issues/1295)) - _DISCARDED_\n - Software rendering backend (avoiding OpenGL) ([#1370](https://github.com/raysan5/raylib/issues/1370)) - _DISCARDED_\n - Network module (UDP): `rnet` ([#753](https://github.com/raysan5/raylib/issues/753)) - _DISCARDED_ - Use [nbnet](https://github.com/nathhB/nbnet).\n\n **raylib 3.0**\n - [x] Custom memory allocators support\n - [x] Global variables moved to global context\n - [x] Optimize data structures for pass-by-value\n - [x] Trace log messages redesign ([#1065](https://github.com/raysan5/raylib/issues/1065))\n - [x] Continuous Integration using GitHub Actions\n\n**raylib 2.5**\n - [x] Support Animated models\n - [x] Support glTF models file format\n - [x] Unicode support on text drawing\n\n**raylib 2.0**\n - [x] Removed external dependencies (GLFW3 and OpenAL)\n - [x] Support TCC compiler (32bit and 64bit)\n\n**raylib 1.8**\n - [x] Improved Materials system with PBR support\n - [x] Procedural image generation functions (spot, gradient, noise...)\n - [x] Procedural mesh generation functions (cube, sphere...)\n - [x] Custom Android APK build pipeline (default Makefile)\n\n**raylib 1.7**\n - [x] Support configuration flags\n - [x] Improved build system for Android\n - [x] Gamepad support on HTML5\n\n**raylib 1.6**\n - [x] Lua scripting support (raylib Lua wrapper)\n - [x] Redesigned audio module\n - [x] Support FLAC file format\n\n**raylib 1.5**\n - [x] Support Oculus Rift CV1 and VR stereo rendering (simulator)\n - [x] Redesign Shaders/Textures system -> New Materials system\n - [x] Support lighting: Omni, Directional and Spotlights\n - [x] Redesign physics module (physac)\n - [x] Chiptunes audio modules support\n\n**raylib 1.4**\n - [x] TTF fonts support (using stb_truetype)\n - [x] Raycast system for 3D picking (including collisions detection)\n - [x] Floyd-Steinberg dithering on 16bit image format conversion\n - [x] Basic image manipulation functions (crop, resize, draw...)\n - [x] Storage load/save data functionality\n - [x] Add Physics module (physac)\n - [x] Remove GLEW dependency -> Replaced by GLAD\n - [x] Redesign Raspberry PI inputs system\n - [x] Redesign gestures module to be multiplatform\n - [x] Module raymath as header-only and functions inline\n - [x] Add Easings module (easings.h)\n"
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 17.677734375,
          "content": "const std = @import(\"std\");\nconst builtin = @import(\"builtin\");\n\n/// Minimum supported version of Zig\nconst min_ver = \"0.13.0\";\n\ncomptime {\n    const order = std.SemanticVersion.order;\n    const parse = std.SemanticVersion.parse;\n    if (order(builtin.zig_version, parse(min_ver) catch unreachable) == .lt)\n        @compileError(\"Raylib requires zig version \" ++ min_ver);\n}\n\nfn setDesktopPlatform(raylib: *std.Build.Step.Compile, platform: PlatformBackend) void {\n    switch (platform) {\n        .glfw => raylib.root_module.addCMacro(\"PLATFORM_DESKTOP_GLFW\", \"\"),\n        .rgfw => raylib.root_module.addCMacro(\"PLATFORM_DESKTOP_RGFW\", \"\"),\n        .sdl => raylib.root_module.addCMacro(\"PLATFORM_DESKTOP_SDL\", \"\"),\n        else => {},\n    }\n}\n\nfn createEmsdkStep(b: *std.Build, emsdk: *std.Build.Dependency) *std.Build.Step.Run {\n    if (builtin.os.tag == .windows) {\n        return b.addSystemCommand(&.{emsdk.path(\"emsdk.bat\").getPath(b)});\n    } else {\n        return b.addSystemCommand(&.{emsdk.path(\"emsdk\").getPath(b)});\n    }\n}\n\nfn emSdkSetupStep(b: *std.Build, emsdk: *std.Build.Dependency) !?*std.Build.Step.Run {\n    const dot_emsc_path = emsdk.path(\".emscripten\").getPath(b);\n    const dot_emsc_exists = !std.meta.isError(std.fs.accessAbsolute(dot_emsc_path, .{}));\n\n    if (!dot_emsc_exists) {\n        const emsdk_install = createEmsdkStep(b, emsdk);\n        emsdk_install.addArgs(&.{ \"install\", \"latest\" });\n        const emsdk_activate = createEmsdkStep(b, emsdk);\n        emsdk_activate.addArgs(&.{ \"activate\", \"latest\" });\n        emsdk_activate.step.dependOn(&emsdk_install.step);\n        return emsdk_activate;\n    } else {\n        return null;\n    }\n}\n\n/// A list of all flags from `src/config.h` that one may override\nconst config_h_flags = outer: {\n    // Set this value higher if compile errors happen as `src/config.h` gets larger\n    @setEvalBranchQuota(1 << 20);\n\n    const config_h = @embedFile(\"src/config.h\");\n    var flags: [std.mem.count(u8, config_h, \"\\n\") + 1][]const u8 = undefined;\n\n    var i = 0;\n    var lines = std.mem.tokenizeScalar(u8, config_h, '\\n');\n    while (lines.next()) |line| {\n        if (!std.mem.containsAtLeast(u8, line, 1, \"SUPPORT\")) continue;\n        if (std.mem.containsAtLeast(u8, line, 1, \"MODULE\")) continue;\n        if (std.mem.startsWith(u8, line, \"//\")) continue;\n        if (std.mem.startsWith(u8, line, \"#if\")) continue;\n\n        var flag = std.mem.trimLeft(u8, line, \" \\t\"); // Trim whitespace\n        flag = flag[\"#define \".len - 1 ..]; // Remove #define\n        flag = std.mem.trimLeft(u8, flag, \" \\t\"); // Trim whitespace\n        flag = flag[0 .. std.mem.indexOf(u8, flag, \" \") orelse continue]; // Flag is only one word, so capture till space\n        flag = \"-D\" ++ flag; // Prepend with -D\n\n        flags[i] = flag;\n        i += 1;\n    }\n\n    // Uncomment this to check what flags normally get passed\n    //@compileLog(flags[0..i].*);\n    break :outer flags[0..i].*;\n};\n\nfn compileRaylib(b: *std.Build, target: std.Build.ResolvedTarget, optimize: std.builtin.OptimizeMode, options: Options) !*std.Build.Step.Compile {\n    var raylib_flags_arr = std.ArrayList([]const u8).init(b.allocator);\n    defer raylib_flags_arr.deinit();\n\n    try raylib_flags_arr.appendSlice(&[_][]const u8{\n        \"-std=gnu99\",\n        \"-D_GNU_SOURCE\",\n        \"-DGL_SILENCE_DEPRECATION=199309L\",\n        \"-fno-sanitize=undefined\", // https://github.com/raysan5/raylib/issues/3674\n    });\n\n    if (options.shared) {\n        try raylib_flags_arr.appendSlice(&[_][]const u8{\n            \"-fPIC\",\n            \"-DBUILD_LIBTYPE_SHARED\",\n        });\n    }\n\n    // Sets a flag indiciating the use of a custom `config.h`\n    try raylib_flags_arr.append(\"-DEXTERNAL_CONFIG_FLAGS\");\n    if (options.config.len > 0) {\n        // Splits a space-separated list of config flags into multiple flags\n        //\n        // Note: This means certain flags like `-x c++` won't be processed properly.\n        // `-xc++` or similar should be used when possible\n        var config_iter = std.mem.tokenizeScalar(u8, options.config, ' ');\n\n        // Apply config flags supplied by the user\n        while (config_iter.next()) |config_flag|\n            try raylib_flags_arr.append(config_flag);\n\n        // Apply all relevant configs from `src/config.h` *except* the user-specified ones\n        //\n        // Note: Currently using a suboptimal `O(m*n)` time algorithm where:\n        // `m` corresponds roughly to the number of lines in `src/config.h`\n        // `n` corresponds to the number of user-specified flags\n        outer: for (config_h_flags) |flag| {\n            // If a user already specified the flag, skip it\n            config_iter.reset();\n            while (config_iter.next()) |config_flag| {\n                // For a user-specified flag to match, it must share the same prefix and have the\n                // same length or be followed by an equals sign\n                if (!std.mem.startsWith(u8, config_flag, flag)) continue;\n                if (config_flag.len == flag.len or config_flag[flag.len] == '=') continue :outer;\n            }\n\n            // Otherwise, append default value from config.h to compile flags\n            try raylib_flags_arr.append(flag);\n        }\n    } else {\n        // Set default config if no custome config got set\n        try raylib_flags_arr.appendSlice(&config_h_flags);\n    }\n\n    const raylib = if (options.shared)\n        b.addSharedLibrary(.{\n            .name = \"raylib\",\n            .target = target,\n            .optimize = optimize,\n        })\n    else\n        b.addStaticLibrary(.{\n            .name = \"raylib\",\n            .target = target,\n            .optimize = optimize,\n        });\n    raylib.linkLibC();\n\n    // No GLFW required on PLATFORM_DRM\n    if (options.platform != .drm) {\n        raylib.addIncludePath(b.path(\"src/external/glfw/include\"));\n    }\n\n    var c_source_files = try std.ArrayList([]const u8).initCapacity(b.allocator, 2);\n    c_source_files.appendSliceAssumeCapacity(&.{ \"src/rcore.c\", \"src/utils.c\" });\n\n    if (options.rshapes) {\n        try c_source_files.append(\"src/rshapes.c\");\n        try raylib_flags_arr.append(\"-DSUPPORT_MODULE_RSHAPES\");\n    }\n    if (options.rtextures) {\n        try c_source_files.append(\"src/rtextures.c\");\n        try raylib_flags_arr.append(\"-DSUPPORT_MODULE_RTEXTURES\");\n    }\n    if (options.rtext) {\n        try c_source_files.append(\"src/rtext.c\");\n        try raylib_flags_arr.append(\"-DSUPPORT_MODULE_RTEXT\");\n    }\n    if (options.rmodels) {\n        try c_source_files.append(\"src/rmodels.c\");\n        try raylib_flags_arr.append(\"-DSUPPORT_MODULE_RMODELS\");\n    }\n    if (options.raudio) {\n        try c_source_files.append(\"src/raudio.c\");\n        try raylib_flags_arr.append(\"-DSUPPORT_MODULE_RAUDIO\");\n    }\n\n    if (options.opengl_version != .auto) {\n        raylib.root_module.addCMacro(options.opengl_version.toCMacroStr(), \"\");\n    }\n\n    raylib.addIncludePath(b.path(\"src/platforms\"));\n    switch (target.result.os.tag) {\n        .windows => {\n            try c_source_files.append(\"src/rglfw.c\");\n            raylib.linkSystemLibrary(\"winmm\");\n            raylib.linkSystemLibrary(\"gdi32\");\n            raylib.linkSystemLibrary(\"opengl32\");\n\n            setDesktopPlatform(raylib, options.platform);\n        },\n        .linux => {\n            if (options.platform != .drm) {\n                try c_source_files.append(\"src/rglfw.c\");\n\n                if (options.linux_display_backend == .X11 or options.linux_display_backend == .Both) {\n                    raylib.root_module.addCMacro(\"_GLFW_X11\", \"\");\n                    raylib.linkSystemLibrary(\"GLX\");\n                    raylib.linkSystemLibrary(\"X11\");\n                    raylib.linkSystemLibrary(\"Xcursor\");\n                    raylib.linkSystemLibrary(\"Xext\");\n                    raylib.linkSystemLibrary(\"Xfixes\");\n                    raylib.linkSystemLibrary(\"Xi\");\n                    raylib.linkSystemLibrary(\"Xinerama\");\n                    raylib.linkSystemLibrary(\"Xrandr\");\n                    raylib.linkSystemLibrary(\"Xrender\");\n                }\n\n                if (options.linux_display_backend == .Wayland or options.linux_display_backend == .Both) {\n                    _ = b.findProgram(&.{\"wayland-scanner\"}, &.{}) catch {\n                        std.log.err(\n                            \\\\ `wayland-scanner` may not be installed on the system.\n                            \\\\ You can switch to X11 in your `build.zig` by changing `Options.linux_display_backend`\n                        , .{});\n                        @panic(\"`wayland-scanner` not found\");\n                    };\n                    raylib.root_module.addCMacro(\"_GLFW_WAYLAND\", \"\");\n                    raylib.linkSystemLibrary(\"EGL\");\n                    raylib.linkSystemLibrary(\"wayland-client\");\n                    raylib.linkSystemLibrary(\"xkbcommon\");\n                    waylandGenerate(b, raylib, \"wayland.xml\", \"wayland-client-protocol\");\n                    waylandGenerate(b, raylib, \"xdg-shell.xml\", \"xdg-shell-client-protocol\");\n                    waylandGenerate(b, raylib, \"xdg-decoration-unstable-v1.xml\", \"xdg-decoration-unstable-v1-client-protocol\");\n                    waylandGenerate(b, raylib, \"viewporter.xml\", \"viewporter-client-protocol\");\n                    waylandGenerate(b, raylib, \"relative-pointer-unstable-v1.xml\", \"relative-pointer-unstable-v1-client-protocol\");\n                    waylandGenerate(b, raylib, \"pointer-constraints-unstable-v1.xml\", \"pointer-constraints-unstable-v1-client-protocol\");\n                    waylandGenerate(b, raylib, \"fractional-scale-v1.xml\", \"fractional-scale-v1-client-protocol\");\n                    waylandGenerate(b, raylib, \"xdg-activation-v1.xml\", \"xdg-activation-v1-client-protocol\");\n                    waylandGenerate(b, raylib, \"idle-inhibit-unstable-v1.xml\", \"idle-inhibit-unstable-v1-client-protocol\");\n                }\n\n                setDesktopPlatform(raylib, options.platform);\n            } else {\n                if (options.opengl_version == .auto) {\n                    raylib.linkSystemLibrary(\"GLESv2\");\n                    raylib.root_module.addCMacro(\"GRAPHICS_API_OPENGL_ES2\", \"\");\n                }\n\n                raylib.linkSystemLibrary(\"EGL\");\n                raylib.linkSystemLibrary(\"gbm\");\n                raylib.linkSystemLibrary2(\"libdrm\", .{ .use_pkg_config = .force });\n\n                raylib.root_module.addCMacro(\"PLATFORM_DRM\", \"\");\n                raylib.root_module.addCMacro(\"EGL_NO_X11\", \"\");\n                raylib.root_module.addCMacro(\"DEFAULT_BATCH_BUFFER_ELEMENT\", \"\");\n            }\n        },\n        .freebsd, .openbsd, .netbsd, .dragonfly => {\n            try c_source_files.append(\"rglfw.c\");\n            raylib.linkSystemLibrary(\"GL\");\n            raylib.linkSystemLibrary(\"rt\");\n            raylib.linkSystemLibrary(\"dl\");\n            raylib.linkSystemLibrary(\"m\");\n            raylib.linkSystemLibrary(\"X11\");\n            raylib.linkSystemLibrary(\"Xrandr\");\n            raylib.linkSystemLibrary(\"Xinerama\");\n            raylib.linkSystemLibrary(\"Xi\");\n            raylib.linkSystemLibrary(\"Xxf86vm\");\n            raylib.linkSystemLibrary(\"Xcursor\");\n\n            setDesktopPlatform(raylib, options.platform);\n        },\n        .macos => {\n            // Include xcode_frameworks for cross compilation\n            if (b.lazyDependency(\"xcode_frameworks\", .{})) |dep| {\n                raylib.addSystemFrameworkPath(dep.path(\"Frameworks\"));\n                raylib.addSystemIncludePath(dep.path(\"include\"));\n                raylib.addLibraryPath(dep.path(\"lib\"));\n            }\n\n            // On macos rglfw.c include Objective-C files.\n            try raylib_flags_arr.append(\"-ObjC\");\n            raylib.root_module.addCSourceFile(.{\n                .file = b.path(\"src/rglfw.c\"),\n                .flags = raylib_flags_arr.items,\n            });\n            _ = raylib_flags_arr.pop();\n            raylib.linkFramework(\"Foundation\");\n            raylib.linkFramework(\"CoreServices\");\n            raylib.linkFramework(\"CoreGraphics\");\n            raylib.linkFramework(\"AppKit\");\n            raylib.linkFramework(\"IOKit\");\n\n            setDesktopPlatform(raylib, options.platform);\n        },\n        .emscripten => {\n            // Include emscripten for cross compilation\n            if (b.lazyDependency(\"emsdk\", .{})) |dep| {\n                if (try emSdkSetupStep(b, dep)) |emSdkStep| {\n                    raylib.step.dependOn(&emSdkStep.step);\n                }\n\n                raylib.addIncludePath(dep.path(\"upstream/emscripten/cache/sysroot/include\"));\n            }\n\n            raylib.root_module.addCMacro(\"PLATFORM_WEB\", \"\");\n            if (options.opengl_version == .auto) {\n                raylib.root_module.addCMacro(\"GRAPHICS_API_OPENGL_ES2\", \"\");\n            }\n        },\n        else => {\n            @panic(\"Unsupported OS\");\n        },\n    }\n\n    raylib.root_module.addCSourceFiles(.{\n        .files = c_source_files.items,\n        .flags = raylib_flags_arr.items,\n    });\n\n    return raylib;\n}\n\npub fn addRaygui(b: *std.Build, raylib: *std.Build.Step.Compile, raygui_dep: *std.Build.Dependency) void {\n    const raylib_dep = b.dependencyFromBuildZig(@This(), .{});\n    var gen_step = b.addWriteFiles();\n    raylib.step.dependOn(&gen_step.step);\n\n    const raygui_c_path = gen_step.add(\"raygui.c\", \"#define RAYGUI_IMPLEMENTATION\\n#include \\\"raygui.h\\\"\\n\");\n    raylib.addCSourceFile(.{ .file = raygui_c_path });\n    raylib.addIncludePath(raygui_dep.path(\"src\"));\n    raylib.addIncludePath(raylib_dep.path(\"src\"));\n\n    raylib.installHeader(raygui_dep.path(\"src/raygui.h\"), \"raygui.h\");\n}\n\npub const Options = struct {\n    raudio: bool = true,\n    rmodels: bool = true,\n    rshapes: bool = true,\n    rtext: bool = true,\n    rtextures: bool = true,\n    platform: PlatformBackend = .glfw,\n    shared: bool = false,\n    linux_display_backend: LinuxDisplayBackend = .Both,\n    opengl_version: OpenglVersion = .auto,\n    /// config should be a list of space-separated cflags, eg, \"-DSUPPORT_CUSTOM_FRAME_CONTROL\"\n    config: []const u8 = &.{},\n\n    const defaults = Options{};\n\n    pub fn getOptions(b: *std.Build) Options {\n        return .{\n            .platform = b.option(PlatformBackend, \"platform\", \"Choose the platform backedn for desktop target\") orelse defaults.platform,\n            .raudio = b.option(bool, \"raudio\", \"Compile with audio support\") orelse defaults.raudio,\n            .rmodels = b.option(bool, \"rmodels\", \"Compile with models support\") orelse defaults.rmodels,\n            .rtext = b.option(bool, \"rtext\", \"Compile with text support\") orelse defaults.rtext,\n            .rtextures = b.option(bool, \"rtextures\", \"Compile with textures support\") orelse defaults.rtextures,\n            .rshapes = b.option(bool, \"rshapes\", \"Compile with shapes support\") orelse defaults.rshapes,\n            .shared = b.option(bool, \"shared\", \"Compile as shared library\") orelse defaults.shared,\n            .linux_display_backend = b.option(LinuxDisplayBackend, \"linux_display_backend\", \"Linux display backend to use\") orelse defaults.linux_display_backend,\n            .opengl_version = b.option(OpenglVersion, \"opengl_version\", \"OpenGL version to use\") orelse defaults.opengl_version,\n            .config = b.option([]const u8, \"config\", \"Compile with custom define macros overriding config.h\") orelse &.{},\n        };\n    }\n};\n\npub const OpenglVersion = enum {\n    auto,\n    gl_1_1,\n    gl_2_1,\n    gl_3_3,\n    gl_4_3,\n    gles_2,\n    gles_3,\n\n    pub fn toCMacroStr(self: @This()) []const u8 {\n        switch (self) {\n            .auto => @panic(\"OpenglVersion.auto cannot be turned into a C macro string\"),\n            .gl_1_1 => return \"GRAPHICS_API_OPENGL_11\",\n            .gl_2_1 => return \"GRAPHICS_API_OPENGL_21\",\n            .gl_3_3 => return \"GRAPHICS_API_OPENGL_33\",\n            .gl_4_3 => return \"GRAPHICS_API_OPENGL_43\",\n            .gles_2 => return \"GRAPHICS_API_OPENGL_ES2\",\n            .gles_3 => return \"GRAPHICS_API_OPENGL_ES3\",\n        }\n    }\n};\n\npub const LinuxDisplayBackend = enum {\n    X11,\n    Wayland,\n    Both,\n};\n\npub const PlatformBackend = enum {\n    glfw,\n    rgfw,\n    sdl,\n    drm,\n};\n\npub fn build(b: *std.Build) !void {\n    // Standard target options allows the person running `zig build` to choose\n    // what target to build for. Here we do not override the defaults, which\n    // means any target is allowed, and the default is native. Other options\n    // for restricting supported target set are available.\n    const target = b.standardTargetOptions(.{});\n    // Standard optimization options allow the person running `zig build` to select\n    // between Debug, ReleaseSafe, ReleaseFast, and ReleaseSmall. Here we do not\n    // set a preferred release mode, allowing the user to decide how to optimize.\n    const optimize = b.standardOptimizeOption(.{});\n\n    const lib = try compileRaylib(b, target, optimize, Options.getOptions(b));\n\n    lib.installHeader(b.path(\"src/raylib.h\"), \"raylib.h\");\n    lib.installHeader(b.path(\"src/rcamera.h\"), \"rcamera.h\");\n    lib.installHeader(b.path(\"src/raymath.h\"), \"raymath.h\");\n    lib.installHeader(b.path(\"src/rlgl.h\"), \"rlgl.h\");\n\n    b.installArtifact(lib);\n}\n\nfn waylandGenerate(\n    b: *std.Build,\n    raylib: *std.Build.Step.Compile,\n    comptime protocol: []const u8,\n    comptime basename: []const u8,\n) void {\n    const waylandDir = \"src/external/glfw/deps/wayland\";\n    const protocolDir = b.pathJoin(&.{ waylandDir, protocol });\n    const clientHeader = basename ++ \".h\";\n    const privateCode = basename ++ \"-code.h\";\n\n    const client_step = b.addSystemCommand(&.{ \"wayland-scanner\", \"client-header\" });\n    client_step.addFileArg(b.path(protocolDir));\n    raylib.addIncludePath(client_step.addOutputFileArg(clientHeader).dirname());\n\n    const private_step = b.addSystemCommand(&.{ \"wayland-scanner\", \"private-code\" });\n    private_step.addFileArg(b.path(protocolDir));\n    raylib.addIncludePath(private_step.addOutputFileArg(privateCode).dirname());\n\n    raylib.step.dependOn(&client_step.step);\n    raylib.step.dependOn(&private_step.step);\n}\n"
        },
        {
          "name": "build.zig.zon",
          "type": "blob",
          "size": 0.6806640625,
          "content": ".{\n    .name = \"raylib\",\n    .version = \"5.5.0\",\n    .minimum_zig_version = \"0.13.0\",\n\n    .dependencies = .{\n        .xcode_frameworks = .{\n            .url = \"git+https://github.com/hexops/xcode-frameworks#9a45f3ac977fd25dff77e58c6de1870b6808c4a7\",\n            .hash = \"122098b9174895f9708bc824b0f9e550c401892c40a900006459acf2cbf78acd99bb\",\n            .lazy = true,\n        },\n        .emsdk = .{\n            .url = \"git+https://github.com/emscripten-core/emsdk#3.1.50\",\n            .hash = \"1220e8fe9509f0843e5e22326300ca415c27afbfbba3992f3c3184d71613540b5564\",\n            .lazy = true,\n        },\n    },\n\n    .paths = .{\n        \"build.zig\",\n        \"build.zig.zon\",\n        \"src\",\n    },\n}\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "raylib.pc.in",
          "type": "blob",
          "size": 0.4169921875,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=@libdir_for_pc_file@\nincludedir=@includedir_for_pc_file@\n\nName: raylib\nDescription: A simple and easy-to-use library to enjoy videogames programming\nURL: https://github.com/raysan5/raylib\nVersion: @PROJECT_VERSION@\nLibs: -L\"${libdir}\" -lraylib @PKG_CONFIG_LIBS_EXTRA@\nLibs.private: @PKG_CONFIG_LIBS_PRIVATE@\nRequires.private: @GLFW_PKG_DEPS@\nCflags: -I\"${includedir}\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}