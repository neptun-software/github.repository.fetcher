{
  "metadata": {
    "timestamp": 1736710428261,
    "page": 65,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jedisct1/libsodium",
      "stars": 12432,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.142578125,
          "content": "*.bc\n*.dSYM\n*.done\n*.final\n*.gcda\n*.gcno\n*.i\n*.la\n*.lo\n*.log\n*.mem\n*.nexe\n*.o\n*.plist\n*.scan\n*.sdf\n*.status\n*.tar.*\n*.wasm\n*.wast\n*~\n.DS_Store\n.deps\n.dirstamp\n.done\n.libs\n/bin/\n/obj/\nBuild\nINSTALL\nMakefile\nMakefile.in\nVagrantfile\naclocal.m4\nandroid-toolchain\nandroid-toolchain-*\nautom4te.cache\nbuild\ncompile\nconfdefs.h\nconfig.*\nconfigure\nconfigure.lineno\ncoverage.info\ndepcomp\ntest/symbols/all-host-symbols.txt\ntest/symbols/internal-host-symbols.txt\ntest/symbols/internal-symbols.txt\ninstall-sh\nlibsodium-*.tar.bz2\nlibsodium-*.tar.gz\nlibsodium-*.vcproj\nlibsodium-*.vcproj.filters\nlibsodium-*.vcxproj\nlibsodium-*.vcxproj.filters\nlibsodium-android-*\nlibsodium-ios\nlibsodium-js\nlibsodium-js-*\nlibsodium-nativeclient\nlibsodium-nativeclient-*\nlibsodium-osx\nlibsodium-uninstalled.pc\nlibsodium-wasm32-wasi\nlibsodium-win32\nlibsodium-win64\nlibsodium.pc\nlibtool\nltmain.sh\nm4/argz.m4\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\nman/*.html\nman/Makefile.in\nmissing\nsrc/libsodium/*.def\nsrc/libsodium/include/sodium/private/quirks.h.old\nsrc/libsodium/include/sodium/version.h\nstamp-*\ntest-driver\ntest/default/*.asm.js\ntest/default/*.res\ntest/default/*.trs\ntest/default/aead_aegis128l\ntest/default/aead_aegis256\ntest/default/aead_aes256gcm\ntest/default/aead_aes256gcm2\ntest/default/aead_chacha20poly1305\ntest/default/aead_chacha20poly13052\ntest/default/aead_xchacha20poly1305\ntest/default/auth\ntest/default/auth2\ntest/default/auth3\ntest/default/auth5\ntest/default/auth6\ntest/default/auth7\ntest/default/box\ntest/default/box2\ntest/default/box7\ntest/default/box8\ntest/default/box_easy\ntest/default/box_easy2\ntest/default/box_seal\ntest/default/box_seed\ntest/default/browser\ntest/default/chacha20\ntest/default/codecs\ntest/default/core1\ntest/default/core2\ntest/default/core3\ntest/default/core4\ntest/default/core5\ntest/default/core6\ntest/default/core_ed25519\ntest/default/core_ed25519_h2c\ntest/default/core_ristretto255\ntest/default/ed25519_convert\ntest/default/generichash\ntest/default/generichash2\ntest/default/generichash3\ntest/default/hash\ntest/default/hash3\ntest/default/kdf\ntest/default/kdf_hkdf\ntest/default/keygen\ntest/default/kx\ntest/default/metamorphic\ntest/default/misuse\ntest/default/onetimeauth\ntest/default/onetimeauth2\ntest/default/onetimeauth7\ntest/default/pwhash_argon2i\ntest/default/pwhash_argon2id\ntest/default/pwhash_scrypt\ntest/default/pwhash_scrypt_ll\ntest/default/randombytes\ntest/default/scalarmult\ntest/default/scalarmult2\ntest/default/scalarmult5\ntest/default/scalarmult6\ntest/default/scalarmult7\ntest/default/scalarmult8\ntest/default/scalarmult_ed25519\ntest/default/scalarmult_ristretto255\ntest/default/secretbox\ntest/default/secretbox2\ntest/default/secretbox7\ntest/default/secretbox8\ntest/default/secretbox_easy\ntest/default/secretbox_easy2\ntest/default/secretstream_xchacha20poly1305\ntest/default/shorthash\ntest/default/sign\ntest/default/sign2\ntest/default/siphashx24\ntest/default/sodium_core\ntest/default/sodium_utils\ntest/default/sodium_utils2\ntest/default/sodium_utils3\ntest/default/sodium_version\ntest/default/stream\ntest/default/stream2\ntest/default/stream3\ntest/default/stream4\ntest/default/verify1\ntest/default/xchacha20\ntest/js.done\ntesting\n.zig-cache\nzig-cache\nzig-out\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 4.90234375,
          "content": "\nDesigners\n=========\n\naegis                                  Hongjun Wu\n                                       Bart Preneel\n\nargon2                                 Alex Biryukov\n                                       Daniel Dinu\n                                       Dmitry Khovratovich\n\nblake2                                 Jean-Philippe Aumasson\n                                       Christian Winnerlein\n                                       Samuel Neves\n                                       Zooko Wilcox-O'Hearn\n\nchacha20                               Daniel J. Bernstein\n\nchacha20poly1305                       Adam Langley\n                                       Yoav Nir\n\ncurve25519                             Daniel J. Bernstein\n\ncurve25519xsalsa20poly1305             Daniel J. Bernstein\n\ned25519                                Daniel J. Bernstein\n                                       Bo-Yin Yang\n                                       Niels Duif\n                                       Peter Schwabe\n                                       Tanja Lange\n\npoly1305                               Daniel J. Bernstein\n\nristretto                              Mike Hamburg\n                                       Henry de Valence\n                                       Jack Grigg\n                                       George Tankersley\n                                       Filippo Valsorda\n                                       Isis Lovecruft\n\nsalsa20                                Daniel J. Bernstein\n\nscrypt                                 Colin Percival\n\nsiphash                                Jean-Philippe Aumasson\n                                       Daniel J. Bernstein\n\nImplementors\n============\n\ncrypto_aead/aegis128l                  Frank Denis\ncrypto_aead/aegis256\n\ncrypto_aead/aes256gcm/aesni            Frank Denis\n\ncrypto_aead/chacha20poly1305           Frank Denis\n\ncrypto_aead/xchacha20poly1305          Frank Denis\n                                       Jason A. Donenfeld\n\ncrypto_auth/hmacsha256                 Colin Percival\ncrypto_auth/hmacsha512\ncrypto_auth/hmacsha512256\n\ncrypto_box/curve25519xsalsa20poly1305  Daniel J. Bernstein\n\ncrypto_box/curve25519xchacha20poly1305 Frank Denis\n\ncrypto_core/ed25519                    Daniel J. Bernstein\n                                       Adam Langley\n                                       Frank Denis\n\ncrypto_core/hchacha20                  Frank Denis\n\ncrypto_core/hsalsa20                   Daniel J. Bernstein\ncrypto_core/salsa\n\ncrypto_generichash/blake2b             Jean-Philippe Aumasson\n                                       Christian Winnerlein\n                                       Samuel Neves\n                                       Zooko Wilcox-O'Hearn\n\ncrypto_hash/sha256                     Colin Percival\ncrypto_hash/sha512\ncrypto_hash/sha512256\n\ncrypto_kdf                             Frank Denis\n\ncrypto_kx                              Frank Denis\n\ncrypto_onetimeauth/poly1305/donna      Andrew \"floodyberry\" Moon\ncrypto_onetimeauth/poly1305/sse2\n\ncrypto_pwhash/argon2                   Samuel Neves\n                                       Dmitry Khovratovich\n                                       Jean-Philippe Aumasson\n                                       Daniel Dinu\n                                       Thomas Pornin\n\ncrypto_pwhash/scryptsalsa208sha256     Colin Percival\n                                       Alexander Peslyak\n\ncrypto_scalarmult/curve25519/ref10     Daniel J. Bernstein\n\ncrypto_scalarmult/curve25519/sandy2x   Tung Chou\n\ncrypto_scalarmult/ed25519              Frank Denis\n\ncrypto_scalarmult/ristretto255         Frank Denis\n\ncrypto_secretbox/xsalsa20poly1305      Daniel J. Bernstein\n\ncrypto_secretbox/xchacha20poly1305     Frank Denis\n\ncrypto_secretstream/xchacha20poly1305  Frank Denis\n\ncrypto_shorthash/siphash24             Jean-Philippe Aumasson\n                                       Daniel J. Bernstein\n\ncrypto_sign/ed25519                    Peter Schwabe\n                                       Daniel J. Bernstein\n                                       Niels Duif\n                                       Tanja Lange\n                                       Bo-Yin Yang\n\ncrypto_stream/chacha20/ref             Daniel J. Bernstein\n\ncrypto_stream/chacha20/dolbeau         Romain Dolbeau\n                                       Daniel J. Bernstein\n\ncrypto_stream/salsa20/ref              Daniel J. Bernstein\ncrypto_stream/salsa20/xmm6\n\ncrypto_stream/salsa20/xmm6int          Romain Dolbeau\n                                       Daniel J. Bernstein\n\ncrypto_stream/salsa2012/ref            Daniel J. Bernstein\ncrypto_stream/salsa2008/ref\n\ncrypto_stream/xchacha20                Frank Denis\n\ncrypto_verify                          Frank Denis\n\nsodium/codecs.c                        Frank Denis\n                                       Thomas Pornin\n                                       Christian Winnerlein\n\nsodium/core.c                          Frank Denis\nsodium/runtime.h\nsodium/utils.c\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.453125,
          "content": "cff-version: 1.2.0\ntitle: libsodium\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Frank\n    family-names: Denis\n    orcid: 'https://orcid.org/0009-0008-4417-1713'\nrepository-code: 'https://github.com/jedisct1/libsodium'\nurl: 'https://libsodium.org'\nabstract: 'A modern, portable, easy-to-use cryptographic library.'\nkeywords:\n  - cryptography\n  - library\n  - nacl\nlicense: ISC\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 32.31640625,
          "content": "* Version 1.0.20\n  This point release includes all the changes from 1.0.19-stable,\nmainly addressing compilation issues and improvements to the .NET\npackages.\n\n* Version 1.0.19-stable\n - Building with `zig build` now requires Zig 0.12.\n - When using the traditional build system, -O3 is used instead of -Ofast.\n - Improved detection of the compiler flags required on aarch64.\n - Improved compatibility with custom build systems on aarch64.\n - apple-xcframework: VisionOS packages are not built if Xcode doesn't\ninclude that SDK.\n - `crypto_kdf_hkdf_sha512_statebytes()` was added.\n - When using Visual Studio, runtime CPU feature detection is now enabled\non Windows/aarch64.\n - There were issues with C++ guards affecting usage of libsodium\nusing Swift on Windows. This has been fixed.\n - Emscripten: `crypto_aead_aegis*()` functions are now exported in\nJavaScript builds\n - Emscripten: unsupported `--memory-init-file` option has been removed.\n - apple-xcframework: the minimal deployment target can be set to iOS 11+.\n - .NET packages now include precompiled libraries for Windows/arm64,\niOS, TvOS and Catalyst.\n - .NET precompiled libraries now work on any CPUs, using only runtime\nfeature detection.\n - SYSV assembly should not be used when targeting Windows (reported by\n@meiyese, thanks!)\n - Compatibility issues with LLVM 18 and AVX512 have been addressed.\n - GitHub attestation build provenance are now added to NuGet packages.\n - JavaScript tests can now use Bun as an alternative to Node.\n\n* Version 1.0.19\n  This release includes all the changes from 1.0.18-stable, as well as two\nadditions:\n\n - New AEADs: AEGIS-128L and AEGIS-256 are now available in the\n`crypto_aead_aegis128l_*()` and `crypto_aead_aegis256_*()` namespaces.\nAEGIS is a family of authenticated ciphers for high-performance applications,\nleveraging hardware AES acceleration on `x86_64` and `aarch64`. In addition\nto performance, AEGIS ciphers have unique properties making them easier and\nsafer to use than AES-GCM. They can also be used as high-performance MACs.\n - The HKDF key derivation mechanism, required by many standard protocols, is\nnow available in the `crypto_kdf_hkdf_*()` namespace. It is implemented for\nthe SHA-256 and SHA-512 hash functions.\n - The `osx.sh` build script was renamed to `macos.sh`.\n - Support for android-mips was removed.\n\n* Version 1.0.18-stable\n - Visual Studio: support for Windows/ARM64 builds has been added.\n - Visual Studio: AVX512 implementations are enabled on supported CPUs.\n - Visual Studio: an MSVC 2022 solution was added.\n - Apple XCFramework: support for VisionOS was added.\n - Apple XCFramework: support for Catalyst was added.\n - Apple XCFramework: building the simulators is now optional.\n - iOS: bitcode is not generated any more, as it was deprecated by Apple.\n - watchOS: support for arm64 was added.\n - The Zig toolchain can now be used as a modern build system to replace\nautoconf/automake/libtool/make/ccache and the compiler. This enables faster\ncompilation times, easier cross compilation, and static libraries optimized\nfor any CPU.\n - The Zig toolchain is now the recommended way to compile `libsodium`\nto WebAssembly/WASI(X).\n - libsodium can now be added as a dependency to Zig projects.\n - Memory fences were added to remove some gadgets that could be used\nalongside speculative loads.\n - The AES-GCM implementation was completely rewritten. It is now faster,\nand also available on aarch64, including Windows/ARM64.\n - Compatibility with CET instrumentation / IBT / Shadow Stack was added.\n - Emscripten: the `crypto_pwhash_*()` functions have been removed from Sumo\nbuilds, as they reserve a substantial amount of JavaScript memory, even when\nnot used.\n - Benchmarks now use `CLOCK_MONOTONIC` if possible.\n - WebAssembly: tests can now run using Bun, WasmEdge, Wazero, wasm3 and\nwasmer-js. Support for WAVM and Lucet have been removed, as these projects\nhave reached EOL.\n - .NET: the minimum supported macOS version is now 1.0.15; this matches\nMicrosoft guidelines.\n - .NET: all the packages are now built using Zig, on all platforms. This\nallows us to easily match Microsoft's requirements, including supported glibc\nversions. However, on x86_64, targets are expected to support at least the\nAVX instruction set.\n - .NET: packages for ARM64 are now available.\n - C23 `memset_explicit()` is now used, when available.\n - Compilation now uses `-Ofast` or `-O3` instead of `-O2` by default.\n - Portability improvements to help compile libsodium to modern game consoles.\n - JavaScript: a default `unhandledRejection` handler is not set any more.\n - Slightly faster 25519 operations.\n - OpenBSD: leverage `MAP_CONCEAL`.\n\n* Version 1.0.18\n - Enterprise versions of Visual Studio are now supported.\n - Visual Studio 2019 is now supported.\n - 32-bit binaries for Visual Studio 2010 are now provided.\n - A test designed to trigger an OOM condition didn't work on Linux systems\nwith memory overcommit turned on. It has been removed in order to fix\nAnsible builds.\n - Emscripten: `print` and `printErr` functions are overridden to send\nerrors to the console, if there is one.\n - Emscripten: `UTF8ToString()` is now exported since `Pointer_stringify()`\nhas been deprecated.\n - Libsodium version detection has been fixed in the CMake recipe.\n - Generic hashing got a 10% speedup on AVX2.\n - New target: WebAssembly/WASI (compile with `dist-builds/wasm32-wasi.sh`).\n - New functions to map a hash to an edwards25519 point or get a random point:\n`core_ed25519_from_hash()` and `core_ed25519_random()`.\n - `crypto_core_ed25519_scalar_mul()` has been implemented for\n`scalar*scalar (mod L)` multiplication.\n - Support for the Ristretto group has been implemented for interoperability\nwith wasm-crypto.\n - Improvements have been made to the test suite.\n - Portability improvements have been made.\n - `getentropy()` is now used on systems providing this system call.\n - `randombytes_salsa20` has been renamed to `randombytes_internal`.\n - Support for NativeClient has been removed.\n - Most `((nonnull))` attributes have been relaxed to allow 0-length inputs\nto be `NULL`.\n - The `-ftree-vectorize` and `-ftree-slp-vectorize` compiler switches are\nnow used, if available, for optimized builds.\n\n* Version 1.0.17-stable\n - AVX512 detection has been improved.\n - A compilation option was added to enable retpoline support.\n - `-ftls-model=global-dynamic` is now set, if available.\n - Portability and documentation improvements.\n\n* Version 1.0.17\n - Bug fix: `sodium_pad()` didn't properly support block sizes >= 256 bytes.\n - JS/WebAssembly: some old iOS versions can't instantiate the WebAssembly\nmodule; fall back to Javascript on these.\n - JS/WebAssembly: compatibility with newer Emscripten versions.\n - Bug fix: `crypto_pwhash_scryptsalsa208sha256_str_verify()` and\n`crypto_pwhash_scryptsalsa208sha256_str_needs_rehash()` didn't return\n`EINVAL` on input strings with a short length, unlike their high-level\ncounterpart.\n - Added a workaround for Visual Studio 2010 bug causing CPU features\nnot to be detected.\n - Portability improvements.\n - Test vectors from Project Wycheproof have been added.\n - New low-level APIs for arithmetic mod the order of the prime order group:\n`crypto_core_ed25519_scalar_random()`, `crypto_core_ed25519_scalar_reduce()`,\n`crypto_core_ed25519_scalar_invert()`, `crypto_core_ed25519_scalar_negate()`,\n`crypto_core_ed25519_scalar_complement()`, `crypto_core_ed25519_scalar_add()`\nand `crypto_core_ed25519_scalar_sub()`.\n - New low-level APIs for scalar multiplication without clamping:\n`crypto_scalarmult_ed25519_base_noclamp()` and\n`crypto_scalarmult_ed25519_noclamp()`. These new APIs are especially useful\nfor blinding.\n - `sodium_sub()` has been implemented.\n - Support for WatchOS has been added.\n - getrandom(2) is now used on FreeBSD 12+.\n - The `nonnull` attribute has been added to all relevant prototypes.\n - More reliable AVX512 detection.\n - Javascript/Webassembly builds now use dynamic memory growth.\n\n* Version 1.0.16\n - Signatures computations and verifications are now way faster on\n64-bit platforms with compilers supporting 128-bit arithmetic (gcc,\nclang, icc). This includes the WebAssembly target.\n - New low-level APIs for computations over edwards25519:\n`crypto_scalarmult_ed25519()`, `crypto_scalarmult_ed25519_base()`,\n`crypto_core_ed25519_is_valid_point()`, `crypto_core_ed25519_add()`,\n`crypto_core_ed25519_sub()` and `crypto_core_ed25519_from_uniform()`\n(elligator representative to point).\n - `crypto_sign_open()`, `crypto_sign_verify_detached() and\n`crypto_sign_edwards25519sha512batch_open` now reject public keys in\nnon-canonical form in addition to low-order points.\n - The library can be built with `ED25519_NONDETERMINISTIC` defined in\norder to use synthetic nonces for EdDSA. This is disabled by default.\n - Webassembly: `crypto_pwhash_*()` functions are now included in\nnon-sumo builds.\n - `sodium_stackzero()` was added to wipe content off the stack.\n - Android: support new SDKs where unified headers have become the\ndefault.\n - The Salsa20-based PRNG example is now thread-safe on platforms with\nsupport for thread-local storage, optionally mixes bits from RDRAND.\n - CMAKE: static library detection on Unix systems has been improved\n(thanks to @BurningEnlightenment, @nibua-r, @mellery451)\n - Argon2 and scrypt are slightly faster on Linux.\n\n* Version 1.0.15\n - The default password hashing algorithm is now Argon2id. The\n`pwhash_str_verify()` function can still verify Argon2i hashes\nwithout any changes, and `pwhash()` can still compute Argon2i hashes\nas well.\n - The aes128ctr primitive was removed. It was slow, non-standard, not\nauthenticated, and didn't seem to be used by any opensource project.\n - Argon2id required at least 3 passes like Argon2i, despite a minimum\nof `1` as defined by the `OPSLIMIT_MIN` constant. This has been fixed.\n - The secretstream construction was slightly changed to be consistent\nwith forthcoming variants.\n - The Javascript and Webassembly versions have been merged, and the\nmodule now returns a `.ready` promise that will resolve after the\nWebassembly code is loaded and compiled.\n - Note that due to these incompatible changes, the library version\nmajor was bumped up.\n\n* Version 1.0.14\n - iOS binaries should now be compatible with WatchOS and TVOS.\n - WebAssembly is now officially supported. Special thanks to\n@facekapow and @pepyakin who helped to make it happen.\n - Internal consistency checks failing and primitives used with\ndangerous/out-of-bounds/invalid parameters used to call abort(3).\nNow, a custom handler *that doesn't return* can be set with the\n`set_sodium_misuse()` function. It still aborts by default or if the\nhandler ever returns. This is not a replacement for non-fatal,\nexpected runtime errors. This handler will be only called in\nunexpected situations due to potential bugs in the library or in\nlanguage bindings.\n - `*_MESSAGEBYTES_MAX` macros (and the corresponding\n`_messagebytes_max()` symbols) have been added to represent the\nmaximum message size that can be safely handled by a primitive.\nLanguage bindings are encouraged to check user inputs against these\nmaximum lengths.\n - The test suite has been extended to cover more edge cases.\n - crypto_sign_ed25519_pk_to_curve25519() now rejects points that are\nnot on the curve, or not in the main subgroup.\n - Further changes have been made to ensure that smart compilers will\nnot optimize out code that we don't want to be optimized.\n - Visual Studio solutions are now included in distribution tarballs.\n - The `sodium_runtime_has_*` symbols for CPU features detection are\nnow defined as weak symbols, i.e. they can be replaced with an\napplication-defined implementation. This can be useful to disable\nAVX* when temperature/power consumption is a concern.\n - `crypto_kx_*()` now aborts if called with no non-NULL pointers to\nstore keys to.\n - SSE2 implementations of `crypto_verify_*()` have been added.\n - Passwords can be hashed using a specific algorithm with the new\n`crypto_pwhash_str_alg()` function.\n - Due to popular demand, base64 encoding (`sodium_bin2base64()`) and\ndecoding (`sodium_base642bin()`) have been implemented.\n - A new `crypto_secretstream_*()` API was added to safely encrypt files\nand multi-part messages.\n - The `sodium_pad()` and `sodium_unpad()` helper functions have been\nadded in order to add & remove padding.\n - An AVX512 optimized implementation of Argon2 has been added (written\nby Ondrej Mosnáček, thanks!)\n - The `crypto_pwhash_str_needs_rehash()` function was added to check if\na password hash string matches the given parameters, or if it needs an\nupdate.\n - The library can now be compiled with recent versions of\nemscripten/binaryen that don't allow multiple variables declarations\nusing a single `var` statement.\n\n* Version 1.0.13\n - Javascript: the sumo builds now include all symbols. They were\npreviously limited to symbols defined in minimal builds.\n - The public `crypto_pwhash_argon2i_MEMLIMIT_MAX` constant was\nincorrectly defined on 32-bit platforms. This has been fixed.\n - Version 1.0.12 didn't compile on OpenBSD/i386 using the base gcc\ncompiler. This has been fixed.\n - The Android compilation scripts have been updated for NDK r14b.\n - armv7s-optimized code was re-added to iOS builds.\n - An AVX2 optimized implementation of the Argon2 round function was\nadded.\n - The Argon2id variant of Argon2 has been implemented. The\nhigh-level `crypto_pwhash_str_verify()` function automatically detects\nthe algorithm and can verify both Argon2i and Argon2id hashed passwords.\nThe default algorithm for newly hashed passwords remains Argon2i in\nthis version to avoid breaking compatibility with verifiers running\nlibsodium <= 1.0.12.\n - A `crypto_box_curve25519xchacha20poly1305_seal*()` function set was\nimplemented.\n - scrypt was removed from minimal builds.\n - libsodium is now available on NuGet.\n\n* Version 1.0.12\n - Ed25519ph was implemented, adding a multi-part signature API\n(`crypto_sign_init()`, `crypto_sign_update()`, `crypto_sign_final_*()`).\n - New constants and related accessors have been added for Scrypt and\nArgon2.\n - XChaCha20 has been implemented. Like XSalsa20, this construction\nextends the ChaCha20 cipher to accept a 192-bit nonce. This makes it safe\nto use ChaCha20 with random nonces.\n - `crypto_secretbox`, `crypto_box` and `crypto_aead` now offer\nvariants leveraging XChaCha20.\n - SHA-2 is about 20% faster, which also gives a speed boost to\nsignature and signature verification.\n - AVX2 implementations of Salsa20 and ChaCha20 have been added. They\nare twice as fast as the SSE2 implementations. The speed gain is\neven more significant on Windows, that previously didn't use\nvectorized implementations.\n - New high-level API: `crypto_kdf`, to easily derive one or more\nsubkeys from a master key.\n - Siphash with a 128-bit output has been implemented, and is\navailable as `crypto_shorthash_siphashx_*`.\n - New `*_keygen()` helpers functions have been added to create secret\nkeys for all constructions. This improves code clarity and can prevent keys\nfrom being partially initialized.\n - A new `randombytes_buf_deterministic()` function was added to\ndeterministically fill a memory region with pseudorandom data. This\nfunction can especially be useful to write reproducible tests.\n - A preliminary `crypto_kx_*()` API was added to compute shared session\nkeys.\n - AVX2 detection is more reliable.\n - The pthreads library is not required any more when using MingW.\n - `contrib/Findsodium.cmake` was added as an example to include\nlibsodium in a project using cmake.\n - Compatibility with gcc 2.x has been restored.\n - Minimal builds can be checked using `sodium_library_minimal()`.\n - The `--enable-opt` compilation switch has become compatible with more\nplatforms.\n - Android builds are now using clang on platforms where it is\navailable.\n\n* Version 1.0.11\n - `sodium_init()` is now thread-safe, and can be safely called multiple\ntimes.\n - Android binaries now properly support 64-bit Android, targeting\nplatform 24, but without breaking compatibility with platforms 16 and\n21.\n - Better support for old gcc versions.\n - On FreeBSD, core dumps are disabled on regions allocated with\nsodium allocation functions.\n - AVX2 detection was fixed, resulting in faster Blake2b hashing on\nplatforms where it was not properly detected.\n - The Sandy2x Curve25519 implementation was not as fast as expected\non some platforms. This has been fixed.\n - The NativeClient target was improved. Most notably, it now supports\noptimized implementations, and uses pepper_49 by default.\n - The library can be compiled with recent Emscripten versions.\nChanges have been made to produce smaller code, and the default heap\nsize was reduced in the standard version.\n - The code can now be compiled on SLES11 service pack 4.\n - Decryption functions can now accept a NULL pointer for the output.\nThis checks the MAC without writing the decrypted message.\n - crypto_generichash_final() now returns -1 if called twice.\n - Support for Visual Studio 2008 was improved.\n\n* Version 1.0.10\n - This release only fixes a compilation issue reported with some older\ngcc versions. There are no functional changes over the previous release.\n\n* Version 1.0.9\n - The Javascript target now includes a `--sumo` option to include all\nthe symbols of the original C library.\n - A detached API was added to the ChaCha20-Poly1305 and AES256-GCM\nimplementations.\n - The Argon2i password hashing function was added, and is accessible\ndirectly and through a new, high-level `crypto_pwhash` API. The scrypt\nfunction remains available as well.\n - A speed-record AVX2 implementation of BLAKE2b was added (thanks to\nSamuel Neves).\n - The library can now be compiled using C++Builder (thanks to @jcolli44)\n - Countermeasures for Ed25519 signatures malleability have been added\nto match the irtf-cfrg-eddsa draft (note that malleability is irrelevant to\nthe standard definition of signature security). Signatures with a small-order\n`R` point are now also rejected.\n - Some implementations are now slightly faster when using the Clang\ncompiler.\n - The HChaCha20 core function was implemented (`crypto_core_hchacha20()`).\n - No-op stubs were added for all AES256-GCM public functions even when\ncompiled on non-Intel platforms.\n - `crypt_generichash_blake2b_statebytes()` was added.\n - New macros were added for the IETF variant of the ChaCha20-Poly1305\nconstruction.\n - The library can now be compiled on Minix.\n - HEASLR is now enabled on MinGW builds.\n\n* Version 1.0.8\n - Handle the case where the CPU supports AVX, but we are running\non an hypervisor with AVX disabled/not supported.\n - Faster (2x) scalarmult_base() when using the ref10 implementation.\n\n* Version 1.0.7\n - More functions whose return value should be checked have been\ntagged with `__attribute__ ((warn_unused_result))`: `crypto_box_easy()`,\n`crypto_box_detached()`, `crypto_box_beforenm()`, `crypto_box()`, and\n`crypto_scalarmult()`.\n - Sandy2x, the fastest Curve25519 implementation ever, has been\nmerged in, and is automatically used on CPUs supporting the AVX\ninstructions set.\n - An SSE2 optimized implementation of Poly1305 was added, and is\ntwice as fast as the portable one.\n - An SSSE3 optimized implementation of ChaCha20 was added, and is\ntwice as fast as the portable one.\n - Faster `sodium_increment()` for common nonce sizes.\n - New helper functions have been added: `sodium_is_zero()` and\n `sodium_add()`.\n - `sodium_runtime_has_aesni()` now properly detects the CPU flag when\n compiled using Visual Studio.\n\n* Version 1.0.6\n - Optimized implementations of Blake2 have been added for modern\nIntel platforms. `crypto_generichash()` is now faster than MD5 and SHA1\nimplementations while being far more secure.\n - Functions for which the return value should be checked have been\ntagged with `__attribute__ ((warn_unused_result))`. This will\nintentionally break code compiled with `-Werror` that didn't bother\nchecking critical return values.\n - The `crypto_sign_edwards25519sha512batch_*()` functions have been\ntagged as deprecated.\n - Undocumented symbols that were exported, but were only useful for\ninternal purposes have been removed or made private:\n`sodium_runtime_get_cpu_features()`, the implementation-specific\n`crypto_onetimeauth_poly1305_donna()` symbols,\n`crypto_onetimeauth_poly1305_set_implementation()`,\n`crypto_onetimeauth_poly1305_implementation_name()` and\n`crypto_onetimeauth_pick_best_implementation()`.\n - `sodium_compare()` now works as documented, and compares numbers\nin little-endian format instead of behaving like `memcmp()`.\n - The previous changes should not break actual applications, but to be\nsafe, the library version major was incremented.\n - `sodium_runtime_has_ssse3()` and `sodium_runtime_has_sse41()` have\nbeen added.\n - The library can now be compiled with the CompCert compiler.\n\n* Version 1.0.5\n - Compilation issues on some platforms were fixed: missing alignment\ndirectives were added (required at least on RHEL-6/i386), a workaround\nfor a VRP bug on gcc/armv7 was added, and the library can now be compiled\nwith the SunPro compiler.\n - Javascript target: io.js is not supported any more. Use nodejs.\n\n* Version 1.0.4\n - Support for AES256-GCM has been added. This requires\na CPU with the aesni and pclmul extensions, and is accessible via the\ncrypto_aead_aes256gcm_*() functions.\n - The Javascript target doesn't use eval() any more, so that the\nlibrary can be used in Chrome packaged applications.\n - QNX and CloudABI are now supported.\n - Support for NaCl has finally been added.\n - ChaCha20 with an extended (96 bit) nonce and a 32-bit counter has\nbeen implemented as crypto_stream_chacha20_ietf(),\ncrypto_stream_chacha20_ietf_xor() and crypto_stream_chacha20_ietf_xor_ic().\nAn IETF-compatible version of ChaCha20Poly1305 is available as\ncrypto_aead_chacha20poly1305_ietf_npubbytes(),\ncrypto_aead_chacha20poly1305_ietf_encrypt() and\ncrypto_aead_chacha20poly1305_ietf_decrypt().\n - The sodium_increment() helper function has been added, to increment\nan arbitrary large number (such as a nonce).\n - The sodium_compare() helper function has been added, to compare\narbitrary large numbers (such as nonces, in order to prevent replay\nattacks).\n\n* Version 1.0.3\n - In addition to sodium_bin2hex(), sodium_hex2bin() is now a\nconstant-time function.\n - crypto_stream_xsalsa20_ic() has been added.\n - crypto_generichash_statebytes(), crypto_auth_*_statebytes() and\ncrypto_hash_*_statebytes() have been added in order to retrieve the\nsize of structures keeping states from foreign languages.\n - The JavaScript target doesn't require /dev/urandom or an external\nrandombytes() implementation any more. Other minor Emscripten-related\nimprovements have been made in order to support libsodium.js\n - Custom randombytes implementations do not need to provide their own\nimplementation of randombytes_uniform() any more. randombytes_stir()\nand randombytes_close() can also be NULL pointers if they are not\nrequired.\n - On Linux, getrandom(2) is being used instead of directly accessing\n/dev/urandom, if the kernel supports this system call.\n - crypto_box_seal() and crypto_box_seal_open() have been added.\n - Visual Studio 2015 is now supported.\n\n* Version 1.0.2\n - The _easy and _detached APIs now support precalculated keys;\ncrypto_box_easy_afternm(), crypto_box_open_easy_afternm(),\ncrypto_box_detached_afternm() and crypto_box_open_detached_afternm()\nhave been added as an alternative to the NaCl interface.\n - Memory allocation functions can now be used on operating systems with\nno memory protection.\n - crypto_sign_open() and crypto_sign_edwards25519sha512batch_open()\nnow accept a NULL pointer instead of a pointer to the message size, if\nstoring this information is not required.\n - The close-on-exec flag is now set on the descriptor returned when\nopening /dev/urandom.\n - A libsodium-uninstalled.pc file to use pkg-config even when\nlibsodium is not installed, has been added.\n - The iOS target now includes armv7s and arm64 optimized code, as well\nas i386 and x86_64 code for the iOS simulator.\n - sodium_free() can now be called on regions with PROT_NONE protection.\n - The Javascript tests can run on Ubuntu, where the node binary was\nrenamed nodejs. io.js can also be used instead of node.\n\n* Version 1.0.1\n - DLL_EXPORT was renamed SODIUM_DLL_EXPORT in order to avoid\ncollisions with similar macros defined by other libraries.\n - sodium_bin2hex() is now constant-time.\n - crypto_secretbox_detached() now supports overlapping input and output\nregions.\n - NaCl's donna_c64 implementation of curve25519 was reading an extra byte\npast the end of the buffer containing the base point. This has been\nfixed.\n\n* Version 1.0.0\n - The API and ABI are now stable. New features will be added, but\nbackward-compatibility is guaranteed through all the 1.x.y releases.\n - crypto_sign() properly works with overlapping regions again. Thanks\nto @pysiak for reporting this regression introduced in version 0.6.1.\n - The test suite has been extended.\n\n* Version 0.7.1 (1.0 RC2)\n - This is the second release candidate of Sodium 1.0. Minor\ncompilation, readability and portability changes have been made and the\ntest suite was improved, but the API is the same as the previous release\ncandidate.\n\n* Version 0.7.0 (1.0 RC1)\n - Allocating memory to store sensitive data can now be done using\nsodium_malloc() and sodium_allocarray(). These functions add guard\npages around the protected data to make it less likely to be\naccessible in a heartbleed-like scenario. In addition, the protection\nfor memory regions allocated that way can be changed using\nsodium_mprotect_noaccess(), sodium_mprotect_readonly() and\nsodium_mprotect_readwrite().\n - ed25519 keys can be converted to curve25519 keys with\ncrypto_sign_ed25519_pk_to_curve25519() and\ncrypto_sign_ed25519_sk_to_curve25519(). This allows using the same\nkeys for signature and encryption.\n - The seed and the public key can be extracted from an ed25519 key\nusing crypto_sign_ed25519_sk_to_seed() and crypto_sign_ed25519_sk_to_pk().\n - aes256 was removed. A timing-attack resistant implementation might\nbe added later, but not before version 1.0 is tagged.\n - The crypto_pwhash_scryptxsalsa208sha256_* compatibility layer was\nremoved. Use crypto_pwhash_scryptsalsa208sha256_*.\n - The compatibility layer for implementation-specific functions was\nremoved.\n - Compilation issues with Mingw64 on MSYS (not MSYS2) were fixed.\n - crypto_pwhash_scryptsalsa208sha256_STRPREFIX was added: it contains\nthe prefix produced by crypto_pwhash_scryptsalsa208sha256_str()\n\n* Version 0.6.1\n - Important bug fix: when crypto_sign_open() was given a signed\nmessage too short to even contain a signature, it was putting an\nunlimited amount of zeros into the target buffer instead of\nimmediately returning -1. The bug was introduced in version 0.5.0.\n - New API: crypto_sign_detached() and crypto_sign_verify_detached()\nto produce and verify ed25519 signatures without having to duplicate\nthe message.\n - New ./configure switch: --enable-minimal, to create a smaller\nlibrary, with only the functions required for the high-level API.\nMainly useful for the JavaScript target and embedded systems.\n - All the symbols are now exported by the Emscripten build script.\n - The pkg-config .pc file is now always installed even if the\npkg-config tool is not available during the installation.\n\n* Version 0.6.0\n - The ChaCha20 stream cipher has been added, as crypto_stream_chacha20_*\n - The ChaCha20Poly1305 AEAD construction has been implemented, as\ncrypto_aead_chacha20poly1305_*\n - The _easy API does not require any heap allocations any more and\ndoes not have any overhead over the NaCl API. With the password\nhashing function being an obvious exception, the library doesn't\nallocate and will not allocate heap memory ever.\n - crypto_box and crypto_secretbox have a new _detached API to store\nthe authentication tag and the encrypted message separately.\n - crypto_pwhash_scryptxsalsa208sha256*() functions have been renamed\ncrypto_pwhash_scryptsalsa208sha256*().\n - The low-level crypto_pwhash_scryptsalsa208sha256_ll() function\nallows setting individual parameters of the scrypt function.\n - New macros and functions for recommended crypto_pwhash_* parameters\nhave been added.\n - Similarly to crypto_sign_seed_keypair(), crypto_box_seed_keypair()\nhas been introduced to deterministically generate a key pair from a seed.\n - crypto_onetimeauth() now provides a streaming interface.\n - crypto_stream_chacha20_xor_ic() and crypto_stream_salsa20_xor_ic()\nhave been added to use a non-zero initial block counter.\n - On Windows, CryptGenRandom() was replaced by RtlGenRandom(), which\ndoesn't require the Crypt API.\n - The high bit in curve25519 is masked instead of processing the key as\na 256-bit value.\n - The curve25519 ref implementation was replaced by the latest ref10\nimplementation from Supercop.\n - sodium_mlock() now prevents memory from being included in coredumps\non Linux 3.4+\n\n* Version 0.5.0\n - sodium_mlock()/sodium_munlock() have been introduced to lock pages\nin memory before storing sensitive data, and to zero them before\nunlocking them.\n - High-level wrappers for crypto_box and crypto_secretbox\n(crypto_box_easy and crypto_secretbox_easy) can be used to avoid\ndealing with the specific memory layout regular functions depend on.\n - crypto_pwhash_scryptsalsa208sha256* functions have been added\nto derive a key from a password, and for password storage.\n - Salsa20 and ed25519 implementations now support overlapping\ninputs/keys/outputs (changes imported from supercop-20140505).\n - New build scripts for Visual Studio, Emscripten, different Android\narchitectures and msys2 are available.\n - The poly1305-53 implementation has been replaced with Floodyberry's\npoly1305-donna32 and poly1305-donna64 implementations.\n - sodium_hex2bin() has been added to complement sodium_bin2hex().\n - On OpenBSD and Bitrig, arc4random() is used instead of reading\n/dev/urandom.\n - crypto_auth_hmac_sha512() has been implemented.\n - sha256 and sha512 now have a streaming interface.\n - hmacsha256, hmacsha512 and hmacsha512256 now support keys of\narbitrary length, and have a streaming interface.\n - crypto_verify_64() has been implemented.\n - first-class Visual Studio build system, thanks to @evoskuil\n - CPU features are now detected at runtime.\n\n* Version 0.4.5\n - Restore compatibility with OSX <= 10.6\n\n* Version 0.4.4\n - Visual Studio is officially supported (VC 2010 & VC 2013)\n - mingw64 is now supported\n - big-endian architectures are now supported as well\n - The donna_c64 implementation of curve25519_donna_c64 now handles\nnon-canonical points like the ref implementation\n - Missing scalarmult_curve25519 and stream_salsa20 constants are now exported\n - A crypto_onetimeauth_poly1305_ref() wrapper has been added\n\n* Version 0.4.3\n - crypto_sign_seedbytes() and crypto_sign_SEEDBYTES were added.\n - crypto_onetimeauth_poly1305_implementation_name() was added.\n - poly1305-ref has been replaced by a faster implementation,\nFloodyberry's poly1305-donna-unrolled.\n - Stackmarkings have been added to assembly code, for Hardened Gentoo.\n - pkg-config can now be used in order to retrieve compilations flags for\nusing libsodium.\n - crypto_stream_aes256estream_*() can now deal with unaligned input\non platforms that require word alignment.\n - portability improvements.\n\n* Version 0.4.2\n - All NaCl constants are now also exposed as functions.\n - The Android and iOS cross-compilation script have been improved.\n - libsodium can now be cross-compiled to Windows from Linux.\n - libsodium can now be compiled with emscripten.\n - New convenience function (prototyped in utils.h): sodium_bin2hex().\n\n* Version 0.4.1\n - sodium_version_*() functions were not exported in version 0.4. They\nare now visible as intended.\n - sodium_init() now calls randombytes_stir().\n - optimized assembly version of salsa20 is now used on amd64.\n - further cleanups and enhanced compatibility with non-C99 compilers.\n\n* Version 0.4\n - Most constants and operations are now available as actual functions\ninstead of macros, making it easier to use from other languages.\n - New operation: crypto_generichash, featuring a variable key size, a\nvariable output size, and a streaming API. Currently implemented using\nBlake2b.\n - The package can be compiled in a separate directory.\n - aes128ctr functions are exported.\n - Optimized versions of curve25519 (curve25519_donna_c64), poly1305\n(poly1305_53) and ed25519 (ed25519_ref10) are available. Optionally calling\nsodium_init() once before using the library makes it pick the fastest\nimplementation.\n - New convenience function: sodium_memzero() in order to securely\nwipe a memory area.\n - A whole bunch of cleanups and portability enhancements.\n - On Windows, a .REF file is generated along with the shared library,\nfor use with Visual Studio. The installation path for these has become\n$prefix/bin as expected by MingW.\n\n* Version 0.3\n - The crypto_shorthash operation has been added, implemented using\nSipHash-2-4.\n\n* Version 0.2\n - crypto_sign_seed_keypair() has been added\n\n* Version 0.1\n - Initial release.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.8037109375,
          "content": "/*\n * ISC License\n *\n * Copyright (c) 2013-2025\n * Frank Denis <j at pureftpd dot org>\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.28515625,
          "content": "ACLOCAL_AMFLAGS = -I m4\n\nEXTRA_DIST = \\\n\tautogen.sh \\\n\tbuild.zig \\\n\tChangeLog \\\n\tCITATION.cff \\\n\tLICENSE \\\n\tREADME.markdown \\\n\tTHANKS\n\nSUBDIRS = \\\n\tbuilds \\\n\tdist-build \\\n\tsrc \\\n\ttest\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = @PACKAGE_NAME@.pc\n\nDISTCLEANFILES = $(pkgconfig_DATA)\n\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 3.0185546875,
          "content": "[![GitHub CI](https://github.com/jedisct1/libsodium/workflows/CI/badge.svg)](https://github.com/jedisct1/libsodium/actions)\n[![Windows build status](https://ci.appveyor.com/api/projects/status/fu8s2elx25il98hj?svg=true)](https://ci.appveyor.com/project/jedisct1/libsodium)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/2397/badge.svg)](https://scan.coverity.com/projects/2397)\n[![Azure build status](https://jedisct1.visualstudio.com/Libsodium/_apis/build/status/jedisct1.libsodium?branchName=stable)](https://jedisct1.visualstudio.com/Libsodium/_build/latest?definitionId=3&branchName=stable)\n[![CodeQL scan](https://github.com/jedisct1/libsodium/workflows/CodeQL%20scan/badge.svg)](https://github.com/jedisct1/libsodium/actions)\n\n![libsodium](https://raw.github.com/jedisct1/libsodium/master/logo.png)\n============\n\nSodium is an easy-to-use software library for encryption,\ndecryption, signatures, password hashing, and more.\n\nIt is a portable, cross-compilable, installable, packageable\nfork of [NaCl](http://nacl.cr.yp.to/), with a compatible API, and an\nextended API to improve usability even further.\n\nIts goal is to provide all of the core operations needed to build\nhigher-level cryptographic tools.\n\nSodium supports a variety of compilers and operating systems,\nincluding Windows (with MingW or Visual Studio, x86 and x64), iOS, Android,\nas well as Javascript and Webassembly.\n\n## Documentation\n\nThe documentation is available on Gitbook and built from the\n[libsodium-doc](https://github.com/jedisct1/libsodium-doc) repository:\n\n* [libsodium documentation](https://doc.libsodium.org) - online, requires Javascript.\n\n## Integrity Checking\n\nThe integrity checking instructions (including the signing key for libsodium)\nare available in the [installation](https://download.libsodium.org/doc/installation#integrity-checking)\nsection of the documentation.\n\n## Community\n\nA mailing-list is available to discuss libsodium.\n\nIn order to join, just send a random mail to `sodium-subscribe` {at}\n`pureftpd` {dot} `org`.\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](https://github.com/jedisct1/libsodium/graphs/contributors)].\n\n<a href=\"https://github.com/jedisct1/libsodium/graphs/contributors\"><img src=\"https://opencollective.com/libsodium/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/libsodium/contribute)]\n\n#### Individuals <a href=\"https://opencollective.com/libsodium\"><img src=\"https://opencollective.com/libsodium/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/libsodium/contribute)]\n\n<a href=\"https://opencollective.com/libsodium/organization/0/website\"><img src=\"https://opencollective.com/libsodium/organization/0/avatar.svg\"></a>\n\n## License\n\n[ISC license](https://en.wikipedia.org/wiki/ISC_license).\n"
        },
        {
          "name": "THANKS",
          "type": "blob",
          "size": 2.2412109375,
          "content": "Special thanks to people, companies and organizations having written\nlibsodium bindings for their favorite programming languages:\n\n@alethia7\n@artemisc\n@carblue\n@dnaq\n@ektrah\n@graxrabble\n@harleqin\n@joshjdevl\n@jrmarino\n@jshahbazi\n@lvh\n@neheb\n\nAdam Caudill (@adamcaudill)\nAlexander Ilin (@AlexIljin)\nAlexander Morris (@alexpmorris)\nAmit Murthy (@amitmurthy)\nAndrew Bennett (@potatosalad)\nAndrew Lambert (@charonn0)\nBruce Mitchener (@waywardmonkeys)\nBruno Oliveira (@abstractj)\nCaolan McMahon (@caolan)\nChris Rebert (@cvrebert)\nChristian Hermann (@bitbeans)\nChristian Wiese (@morfoh)\nChristian Wiese (@morfoh)\nColm MacCárthaigh (@colmmacc)\nDavid Parrish (@dmp1ce)\nDonald Stufft (@dstufft)\nDouglas Campos (@qmx)\nDrew Crawford (@drewcrawford)\nEmil Bay (@emilbayes)\nEric Dong (@quantum1423)\nEric Voskuil (@evoskuil)\nFarid Hajji (@fhajji)\nFrank Siebenlist (@franks42)\nGabriel Handford (@gabriel)\nGeo Carncross (@geocar)\nHenrik Gassmann (BurningEnlightenment)\nJachym Holecek (@freza)\nJack Wink (@jackwink)\nJames Ruan (@jamesruan)\nJan de Muijnck-Hughes (@jfdm)\nJason McCampbell (@jasonmccampbell)\nJeroen Habraken (@VeXocide)\nJeroen Ooms (@jeroen)\nJesper Louis Andersen (@jlouis)\nJoe Eli McIlvain (@jemc)\nJonathan Stowe (@jonathanstowe)\nJoseph Abrahamson (@tel)\nJulien Kauffmann (@ereOn)\nKenneth Ballenegger (@kballenegger)\nLoic Maury (@loicmaury)\nMichael Gorlick (@mgorlick)\nMichael Gregorowicz (@mgregoro)\nMichał Zieliński (@zielmicha)\nOmar Ayub (@electricFeel)\nPedro Paixao (@paixaop)\nProject ArteMisc (@artemisc)\nRich FitzJohn (@richfitz)\nRuben De Visscher (@rubendv)\nRudolf Von Krugstein (@rudolfvonkrugstein)\nSamuel Neves (@sneves)\nScott Arciszewski (@paragonie-scott)\nStanislav Ovsiannikov (@naphaso)\nStefan Marsiske (@stef)\nStephan Touset (@stouset)\nStephen Chavez (@redragonx)\nSteve Gibson (@sggrc)\nTony Arcieri (@bascule)\nTony Garnock-Jones (@tonyg)\nY. T. Chung (@zonyitoo)\n\nBytecurry Software\nCryptotronix\nFacebook\nFSF France\nMaidSafe\nParagonie Initiative Enterprises\nPython Cryptographic Authority\n\n(this list may not be complete, if you don't see your name, please\nsubmit a pull request!)\n\nAlso thanks to:\n\n- Coverity, Inc. to provide static analysis.\n- FSF France for providing access to their compilation servers.\n- Private Internet Access for having sponsored a complete security audit.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.3984375,
          "content": "version: 1.0.21.{build}\n\nos: Visual Studio 2017\n\nenvironment:\n  matrix:\n    - platform: Win32\n      configuration: Debug\n    - platform: Win32\n      configuration: Release\n    - platform: x64\n      configuration: Debug\n    - platform: x64\n      configuration: Release\n\nmatrix:\n  fast_finish: false\n\ninit: msbuild /version\n\nbuild:\n  parallel: true\n  project: ci/appveyor/libsodium.vcxproj\n  verbosity: normal\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 2.8017578125,
          "content": "#! /bin/sh\n\nargs=$(getopt bfos \"$@\")\nif [ $? -ne 0 ]; then\n  echo \"Usage: autogen.sh [-b] [-f] [-o] [-s] [--]\"\n  echo\n  echo \">   -b: do not update the system detection scripts\"\n  echo \">   -f: force the recreation of all autoconf scripts\"\n  echo \">   -o: overwrite/downgrade system detection scripts\"\n  echo \">   -s: setup an environment for developers\"\n  exit 2\nfi\n\nforce=false\nupdate_config=true\noverwrite_config=false\ndev_setup=false\n\neval set -- \"$args\"\n\nwhile [ $# -ne 0 ]; do\n  case $1 in\n  -b)\n    update_config=false\n    ;;\n  -f)\n    force=true\n    ;;\n  -o)\n    overwrite_config=true\n    ;;\n  -s)\n    dev_setup=true\n    ;;\n  --)\n    shift\n    break\n    ;;\n  esac\n  shift\ndone\n\nif [ -s configure ]; then\n  if [ \"$force\" != true ]; then\n    echo \"autoconf scripts already exist.\" >&2\n    exit 0\n  fi\nelif [ \"$dev_setup\" != true ]; then\n  echo \"If you are looking to install a stable version of libsodium,\"\n  echo \"please do not run arbitrary, undocumented commands.\"\n  echo\n  echo \"Installation instructions are available at https://libsodium.org\"\n  exit 0\nfi\n\nif glibtoolize --version >/dev/null 2>&1; then\n  LIBTOOLIZE='glibtoolize'\nelse\n  LIBTOOLIZE='libtoolize'\nfi\n\ncommand -v command >/dev/null 2>&1 || {\n  echo \"command is required, but wasn't found on this system\"\n  exit 1\n}\n\ncommand -v $LIBTOOLIZE >/dev/null 2>&1 || {\n  echo \"libtool is required, but wasn't found on this system\"\n  exit 1\n}\n\ncommand -v autoconf >/dev/null 2>&1 || {\n  echo \"autoconf is required, but wasn't found on this system\"\n  exit 1\n}\n\ncommand -v automake >/dev/null 2>&1 || {\n  echo \"automake is required, but wasn't found on this system\"\n  exit 1\n}\n\nif [ \"$overwrite_config\" = false ]; then\n  if [ -f build-aux/config.guess ]; then\n    mv build-aux/config.guess build-aux/config.guess.stable\n  fi\n  if [ -f build-aux/config.sub ]; then\n    mv build-aux/config.sub build-aux/config.sub.stable\n  fi\nfi\n$LIBTOOLIZE --copy --install &&\n  aclocal &&\n  automake --add-missing --copy --force-missing --include-deps &&\n  autoconf && echo Done.\nif [ \"$overwrite_config\" = false ]; then\n  if [ -f build-aux/config.guess.stable ]; then\n    mv build-aux/config.guess.stable build-aux/config.guess\n  fi\n  if [ -f build-aux/config.sub.stable ]; then\n    mv build-aux/config.sub.stable build-aux/config.sub\n  fi\nfi\n\n[ \"$update_config\" = true ] &&\n  command -v curl >/dev/null 2>&1 && {\n  echo \"Downloading config.guess and config.sub...\"\n\n  curl -sSL --fail -o config.guess \\\n    'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' &&\n    chmod +x config.guess &&\n    chmod +x build-aux/config.guess\n\n  curl -sSL --fail -o config.sub \\\n    'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' &&\n    chmod +x build-aux/config.sub &&\n    mv -f config.sub build-aux/config.sub\n\n  echo \"Done.\"\n}\n\nrm -f config.guess config.sub\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 4.8984375,
          "content": "trigger:\n  - stable\n  - next\n\npr: none\n\njobs:\n  - job: \"windows\"\n    pool:\n      vmImage: \"windows-2022\"\n    steps:\n      - powershell: |\n          cd builds\\msvc\\build\n          & .\\buildbase.bat ..\\vs2022\\libsodium.sln 17\n        displayName: Compile it all\n      - powershell: |\n          mkdir bin\\include\\sodium\n          Copy-Item \"src\\libsodium\\include\\sodium\\*.h\" -Destination \"bin\\include\\sodium\" -Recurse\n          Copy-Item \"src\\libsodium\\include\\*.h\" -Destination \"bin\\include\\\"\n        displayName: Copy header files\n      - task: PublishBuildArtifacts@1\n        condition: not(canceled())\n        inputs:\n          pathToPublish: bin\n          artifactName: libsodium\n\n  - job: \"windows_2019\"\n    pool:\n      vmImage: \"windows-2019\"\n    steps:\n      - powershell: |\n          cd builds\\msvc\\build\n          & .\\buildbase.bat ..\\vs2019\\libsodium.sln 16\n        displayName: Compile it all\n      - powershell: |\n          mkdir bin\\include\\sodium\n          Copy-Item \"src\\libsodium\\include\\sodium\\*.h\" -Destination \"bin\\include\\sodium\" -Recurse\n          Copy-Item \"src\\libsodium\\include\\*.h\" -Destination \"bin\\include\\\"\n        displayName: Copy header files\n      - task: PublishBuildArtifacts@1\n        condition: not(canceled())\n        inputs:\n          pathToPublish: bin\n          artifactName: libsodium\n\n  - job: mingw64\n    pool:\n      vmImage: \"windows-2019\"\n    steps:\n      - powershell: |\n          (New-Object Net.WebClient).DownloadFile(\"https://github.com/msys2/msys2-installer/releases/download/2024-12-08/msys2-base-x86_64-20241208.sfx.exe\", \"sfx.exe\")\n          .\\sfx.exe -y -o\\\n          del sfx.exe\n        displayName: Install MSYS2\n      - script: |\n          set PATH=%CD:~0,2%\\msys64\\usr\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc \"pacman --noconfirm -Sydd filesystem\"\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc 'pacman --noconfirm -Syuu'\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc 'pacman --noconfirm -Syuu'\n        displayName: Update MSYS2\n      - script: |\n          set PATH=%CD:~0,2%\\msys64\\usr\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem\n          %CD:~0,2%\\msys64\\usr\\bin\\pacman --noconfirm --needed -S base-devel mingw-w64-x86_64-toolchain\n          %CD:~0,2%\\msys64\\usr\\bin\\pacman --noconfirm -Scc\n          %CD:~0,2%\\msys64\\usr\\bin\\sed -i \"s|#CacheDir.*|CacheDir=/c/Users/%USERNAME%/AppData/Local/Temp|g\" /etc/pacman.conf\n        displayName: Install Toolchain\n      - script: |\n          set PATH=C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;%CD:~0,2%\\msys64\\usr\\bin;%CD:~0,2%\\msys64\\bin\n          set MSYS2_ROOT=%CD:~0,2%\\msys64\n          set MSYSTEM=MINGW64\n          set CHERE_INVOKING=yes\n          %MSYS2_ROOT%\\cmd\\msystem MINGW64\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc dist-build/msys2-win64.sh\n        env:\n          CHERE_INVOKING: yes\n          MSYS2_ARCH: x86_64\n        displayName: Compile libsodium\n      - task: PublishBuildArtifacts@1\n        condition: not(canceled())\n        inputs:\n          pathToPublish: libsodium-win64\n          artifactName: libsodium-win64\n\n  - job: mingw32\n    pool:\n      vmImage: \"windows-2019\"\n    steps:\n      - powershell: |\n          (New-Object Net.WebClient).DownloadFile(\"https://github.com/msys2/msys2-installer/releases/download/2024-12-08/msys2-base-x86_64-20241208.sfx.exe\", \"sfx.exe\")\n          .\\sfx.exe -y -o\\\n          del sfx.exe\n        displayName: Install MSYS2\n      - script: |\n          set PATH=%CD:~0,2%\\msys64\\usr\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc \"pacman --noconfirm -Sydd filesystem\"\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc 'pacman --noconfirm -Syuu'\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc 'pacman --noconfirm -Syuu'\n        displayName: Update MSYS2\n      - script: |\n          set PATH=%CD:~0,2%\\msys64\\usr\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem\n          %CD:~0,2%\\msys64\\usr\\bin\\pacman --noconfirm --needed -S base-devel mingw-w64-i686-toolchain\n          %CD:~0,2%\\msys64\\usr\\bin\\pacman --noconfirm -Scc\n          %CD:~0,2%\\msys64\\usr\\bin\\sed -i \"s|#CacheDir.*|CacheDir=/c/Users/%USERNAME%/AppData/Local/Temp|g\" /etc/pacman.conf\n        displayName: Install Toolchain\n      - script: |\n          set PATH=C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;%CD:~0,2%\\msys64\\usr\\bin;%CD:~0,2%\\msys64\\bin\n          set MSYS2_ROOT=%CD:~0,2%\\msys64\n          set MSYSTEM=MINGW32\n          set CHERE_INVOKING=yes\n          %MSYS2_ROOT%\\cmd\\msystem MINGW32\n          %CD:~0,2%\\msys64\\usr\\bin\\bash -lc dist-build/msys2-win32.sh\n        env:\n          CHERE_INVOKING: yes\n          MSYS2_ARCH: x86_64\n        displayName: Compile libsodium\n      - task: PublishBuildArtifacts@1\n        condition: not(canceled())\n        inputs:\n          pathToPublish: libsodium-win32\n          artifactName: libsodium-win32\n"
        },
        {
          "name": "build.zig",
          "type": "blob",
          "size": 11.5634765625,
          "content": "const std = @import(\"std\");\nconst fmt = std.fmt;\nconst fs = std.fs;\nconst heap = std.heap;\nconst mem = std.mem;\nconst Compile = std.Build.Step.Compile;\nconst Target = std.Target;\n\nfn initLibConfig(b: *std.Build, target: std.Build.ResolvedTarget, lib: *Compile) void {\n    lib.linkLibC();\n    lib.addIncludePath(b.path(\"src/libsodium/include/sodium\"));\n    lib.root_module.addCMacro(\"_GNU_SOURCE\", \"1\");\n    lib.root_module.addCMacro(\"CONFIGURED\", \"1\");\n    lib.root_module.addCMacro(\"DEV_MODE\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_ATOMIC_OPS\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_C11_MEMORY_FENCES\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_CET_H\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_GCC_MEMORY_FENCES\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_INLINE_ASM\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_INTTYPES_H\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_STDINT_H\", \"1\");\n    lib.root_module.addCMacro(\"HAVE_TI_MODE\", \"1\");\n    lib.want_lto = false;\n\n    const endian = target.result.cpu.arch.endian();\n    switch (endian) {\n        .big => lib.root_module.addCMacro(\"NATIVE_BIG_ENDIAN\", \"1\"),\n        .little => lib.root_module.addCMacro(\"NATIVE_LITTLE_ENDIAN\", \"1\"),\n    }\n\n    switch (target.result.os.tag) {\n        .linux => {\n            lib.root_module.addCMacro(\"ASM_HIDE_SYMBOL\", \".hidden\");\n            lib.root_module.addCMacro(\"TLS\", \"_Thread_local\");\n\n            lib.root_module.addCMacro(\"HAVE_CATCHABLE_ABRT\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_CATCHABLE_SEGV\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_CLOCK_GETTIME\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_GETPID\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MADVISE\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MLOCK\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MMAP\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MPROTECT\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_NANOSLEEP\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_POSIX_MEMALIGN\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_PTHREAD_PRIO_INHERIT\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_PTHREAD\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_RAISE\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYSCONF\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_AUXV_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_MMAN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_PARAM_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_RANDOM_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_WEAK_SYMBOLS\", \"1\");\n        },\n        .windows => {\n            lib.root_module.addCMacro(\"HAVE_RAISE\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_PARAM_H\", \"1\");\n            if (lib.isStaticLibrary()) {\n                lib.root_module.addCMacro(\"SODIUM_STATIC\", \"1\");\n            }\n        },\n        .macos => {\n            lib.root_module.addCMacro(\"ASM_HIDE_SYMBOL\", \".private_extern\");\n            lib.root_module.addCMacro(\"TLS\", \"_Thread_local\");\n\n            lib.root_module.addCMacro(\"HAVE_ARC4RANDOM\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_ARC4RANDOM_BUF\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_CATCHABLE_ABRT\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_CATCHABLE_SEGV\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_CLOCK_GETTIME\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_GETENTROPY\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_GETPID\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MADVISE\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MEMSET_S\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MLOCK\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MMAP\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MPROTECT\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_NANOSLEEP\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_POSIX_MEMALIGN\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_PTHREAD\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_PTHREAD_PRIO_INHERIT\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_RAISE\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYSCONF\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_MMAN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_PARAM_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_RANDOM_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_WEAK_SYMBOLS\", \"1\");\n        },\n        .wasi => {\n            lib.root_module.addCMacro(\"HAVE_ARC4RANDOM\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_ARC4RANDOM_BUF\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_CLOCK_GETTIME\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_GETENTROPY\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_NANOSLEEP\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_POSIX_MEMALIGN\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_AUXV_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_PARAM_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SYS_RANDOM_H\", \"1\");\n        },\n        else => {},\n    }\n\n    switch (target.result.cpu.arch) {\n        .x86_64 => {\n            switch (target.result.os.tag) {\n                .windows => {},\n                else => {\n                    lib.root_module.addCMacro(\"HAVE_AMD64_ASM\", \"1\");\n                    lib.root_module.addCMacro(\"HAVE_AVX_ASM\", \"1\");\n                },\n            }\n            lib.root_module.addCMacro(\"HAVE_CPUID\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_MMINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_EMMINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_PMMINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_TMMINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_SMMINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_AVXINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_AVX2INTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_AVX512FINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_WMMINTRIN_H\", \"1\");\n            lib.root_module.addCMacro(\"HAVE_RDRAND\", \"1\");\n        },\n        .aarch64, .aarch64_be => {\n            lib.root_module.addCMacro(\"HAVE_ARMCRYPTO\", \"1\");\n        },\n        .wasm32, .wasm64 => {\n            lib.root_module.addCMacro(\"__wasm__\", \"1\");\n        },\n        else => {},\n    }\n\n    switch (target.result.os.tag) {\n        .wasi => {\n            lib.root_module.addCMacro(\"__wasi__\", \"1\");\n        },\n        else => {},\n    }\n}\n\npub fn build(b: *std.Build) !void {\n    const root_path = b.pathFromRoot(\".\");\n    var cwd = try fs.openDirAbsolute(root_path, .{});\n    defer cwd.close();\n\n    const src_path = \"src/libsodium\";\n    const src_dir = try fs.Dir.openDir(cwd, src_path, .{ .iterate = true, .no_follow = true });\n\n    var target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const enable_benchmarks = b.option(bool, \"enable_benchmarks\", \"Whether tests should be benchmarks.\") orelse false;\n    const benchmarks_iterations = b.option(u32, \"iterations\", \"Number of iterations for benchmarks.\") orelse 200;\n    var build_static = b.option(bool, \"static\", \"Build libsodium as a static library.\") orelse true;\n    var build_shared = b.option(bool, \"shared\", \"Build libsodium as a shared library.\") orelse true;\n\n    const build_tests = b.option(bool, \"test\", \"Build the tests (implies -Dstatic=true)\") orelse true;\n\n    if (target.result.isWasm()) {\n        build_shared = false;\n    }\n    if (build_tests) {\n        build_static = true;\n    }\n\n    switch (target.result.cpu.arch) {\n        .aarch64, .aarch64_be => {\n            // ARM CPUs supported by Windows are assumed to have NEON support\n            if (target.result.isMinGW()) {\n                target.query.cpu_features_add.addFeature(@intFromEnum(Target.aarch64.Feature.neon));\n            }\n        },\n        else => {},\n    }\n\n    const static_lib = b.addStaticLibrary(.{\n        .name = if (target.result.isMinGW()) \"libsodium-static\" else \"sodium\",\n        .target = target,\n        .optimize = optimize,\n    });\n    const shared_lib = b.addSharedLibrary(.{\n        .name = if (target.result.isMinGW()) \"libsodium\" else \"sodium\",\n        .target = target,\n        .optimize = optimize,\n        .strip = optimize != .Debug and !target.result.isMinGW(),\n    });\n\n    // work out which libraries we are building\n    var libs = std.ArrayList(*Compile).init(b.allocator);\n    defer libs.deinit();\n    if (build_static) {\n        try libs.append(static_lib);\n    }\n    if (build_shared) {\n        try libs.append(shared_lib);\n    }\n\n    const prebuilt_version_file_path = \"builds/msvc/version.h\";\n    const version_file_path = \"include/sodium/version.h\";\n\n    if (src_dir.access(version_file_path, .{ .mode = .read_only })) {} else |_| {\n        try cwd.copyFile(prebuilt_version_file_path, src_dir, version_file_path, .{});\n    }\n\n    for (libs.items) |lib| {\n        b.installArtifact(lib);\n        lib.installHeader(b.path(src_path ++ \"/include/sodium.h\"), \"sodium.h\");\n        lib.installHeadersDirectory(b.path(src_path ++ \"/include/sodium\"), \"sodium\", .{});\n\n        initLibConfig(b, target, lib);\n\n        const flags = &.{\n            \"-fvisibility=hidden\",\n            \"-fno-strict-aliasing\",\n            \"-fno-strict-overflow\",\n            \"-fwrapv\",\n            \"-flax-vector-conversions\",\n        };\n\n        const allocator = heap.page_allocator;\n\n        var walker = try src_dir.walk(allocator);\n        while (try walker.next()) |entry| {\n            const name = entry.basename;\n            if (mem.endsWith(u8, name, \".c\")) {\n                const full_path = try fmt.allocPrint(allocator, \"{s}/{s}\", .{ src_path, entry.path });\n\n                lib.addCSourceFiles(.{\n                    .files = &.{full_path},\n                    .flags = flags,\n                });\n            } else if (mem.endsWith(u8, name, \".S\")) {\n                const full_path = try fmt.allocPrint(allocator, \"{s}/{s}\", .{ src_path, entry.path });\n                lib.addAssemblyFile(b.path(full_path));\n            }\n        }\n    }\n\n    const test_path = \"test/default\";\n    const out_bin_path = \"zig-out/bin\";\n    const test_dir = try fs.Dir.openDir(cwd, test_path, .{ .iterate = true, .no_follow = true });\n    fs.Dir.makePath(cwd, out_bin_path) catch {};\n    const out_bin_dir = try fs.Dir.openDir(cwd, out_bin_path, .{});\n    try test_dir.copyFile(\"run.sh\", out_bin_dir, \"run.sh\", .{});\n    const allocator = heap.page_allocator;\n    var walker = try test_dir.walk(allocator);\n    if (build_tests) {\n        while (try walker.next()) |entry| {\n            const name = entry.basename;\n            if (mem.endsWith(u8, name, \".exp\")) {\n                try test_dir.copyFile(name, out_bin_dir, name, .{});\n                continue;\n            }\n            if (!mem.endsWith(u8, name, \".c\")) {\n                continue;\n            }\n            const exe_name = name[0 .. name.len - 2];\n            var exe = b.addExecutable(.{\n                .name = exe_name,\n                .target = target,\n                .optimize = optimize,\n                .strip = true,\n            });\n            exe.linkLibC();\n            exe.linkLibrary(static_lib);\n            exe.addIncludePath(b.path(\"src/libsodium/include\"));\n            exe.addIncludePath(b.path(\"test/quirks\"));\n            const full_path = try fmt.allocPrint(allocator, \"{s}/{s}\", .{ test_path, entry.path });\n            exe.addCSourceFiles(.{ .files = &.{full_path} });\n            if (enable_benchmarks) {\n                exe.root_module.addCMacro(\"BENCHMARKS\", \"1\");\n                var buf: [16]u8 = undefined;\n                exe.root_module.addCMacro(\"ITERATIONS\", std.fmt.bufPrintIntToSlice(&buf, benchmarks_iterations, 10, .lower, .{}));\n            }\n\n            b.installArtifact(exe);\n        }\n    }\n}\n"
        },
        {
          "name": "builds",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 31.91796875,
          "content": "AC_PREREQ([2.69])\nAC_INIT([libsodium],[1.0.21],[https://github.com/jedisct1/libsodium/issues],[libsodium],[https://libsodium.org])\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_SRCDIR([src/libsodium/sodium/version.c])\nAC_CANONICAL_HOST\nAC_CANONICAL_TARGET\nAM_INIT_AUTOMAKE([1.11 dist-bzip2 tar-ustar foreign subdir-objects])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\nAM_MAINTAINER_MODE\nAM_DEP_TRACK\n\nAC_SUBST(VERSION)\n\nSODIUM_LIBRARY_VERSION_MAJOR=28\nSODIUM_LIBRARY_VERSION_MINOR=0\nDLL_VERSION=28\nSODIUM_LIBRARY_VERSION=28:0:0\n#                       | | |\n#                +------+ | +---+\n#                |        |     |\n#             current:revision:age\n#                |        |     |\n#                |        |     +- increment if interfaces have been added\n#                |        |        set to zero if interfaces have been removed\n#                |        |        or changed\n#                |        +- increment if source code has changed\n#                |           set to zero if current is incremented\n#                +- increment if interfaces have been added, removed or changed\nAC_SUBST(SODIUM_LIBRARY_VERSION_MAJOR)\nAC_SUBST(SODIUM_LIBRARY_VERSION_MINOR)\nAC_SUBST(SODIUM_LIBRARY_VERSION)\nAC_SUBST(DLL_VERSION)\n\nAC_LANG_ASSERT(C)\nLX_CFLAGS=${CFLAGS-NONE}\nPKGCONFIG_LIBS_PRIVATE=\"\"\n\ndnl Path check\n\nAS_IF([pwd | fgrep ' ' > /dev/null 2>&1],\n  [AC_MSG_ERROR([The build directory contains whitespaces - This can cause tests/installation to fail due to limitations of some libtool versions])]\n)\n\nsodium_CFLAGS=${CFLAGS+set}\n: ${CFLAGS=\"\"}\n\nAC_PROG_CC\nAM_PROG_AS\nAC_USE_SYSTEM_EXTENSIONS\n\ndnl Default optimization flags\n\nif test \"$sodium_CFLAGS\" != \"set\" ; then\n  AX_CHECK_COMPILE_FLAG([-O3], [CFLAGS=\"$CFLAGS -O3\"],\n    [AX_CHECK_COMPILE_FLAG([-O2], [CFLAGS=\"$CFLAGS -O2\"],\n      [AX_CHECK_COMPILE_FLAG([-O1], [CFLAGS=\"$CFLAGS -O1\"],\n        [AX_CHECK_COMPILE_FLAG([-O], [CFLAGS=\"$CFLAGS -O\"])])])])\nfi\n\ndnl Switches\n\nAC_ARG_ENABLE(ssp,\n[AS_HELP_STRING(--disable-ssp,Do not compile with -fstack-protector)],\n[\n  AS_IF([test \"x$enableval\" = \"xno\"], [\n    enable_ssp=\"no\"\n  ], [\n    enable_ssp=\"yes\"\n  ])\n],\n[\n  enable_ssp=\"yes\"\n])\n\nAC_ARG_ENABLE(asm,\n[AS_HELP_STRING(--disable-asm,[Do not compile assembly code -- As a side effect, this disables CPU-specific implementations on non-Windows platforms. Only for use with targets such as WebAssembly.])],\n[\n  AS_IF([test \"x$enableval\" = \"xno\"], [\n    enable_asm=\"no\"\n  ], [\n    enable_asm=\"yes\"\n  ])\n],\n[\n  enable_asm=\"yes\"\n])\n\nAS_IF([test \"x$EMSCRIPTEN\" != \"x\"], [\n  AX_CHECK_COMPILE_FLAG([-s ASSERTIONS=0], [\n    enable_asm=\"no\"\n    AC_MSG_WARN([compiling to JavaScript - asm implementations disabled])\n  ], [\n    AC_MSG_WARN([EMSCRIPTEN environment variable defined, but emcc doesn\\'t appear to be used - Assuming compilation to native code])\n    CFLAGS=\"$CFLAGS -U__EMSCRIPTEN__\"\n    unset EMSCRIPTEN\n  ])\n])\n\nAC_ARG_ENABLE(pie,\n[AS_HELP_STRING(--disable-pie,Do not produce position independent executables)],\n enable_pie=$enableval, enable_pie=\"maybe\")\n\nAS_CASE([$host_os], [mingw*|cygwin*|msys|eabi*], [enable_pie=\"no\"])\n\nAC_ARG_ENABLE(blocking-random,\n[AS_HELP_STRING(--enable-blocking-random,Enable this switch only if /dev/urandom is totally broken on the target platform)],\n[\n  AS_IF([test \"x$enableval\" = \"xyes\"], [\n    AC_DEFINE([USE_BLOCKING_RANDOM], [1], [/dev/urandom is insecure on the target platform])\n  ])\n])\n\nAC_ARG_ENABLE(minimal,\n[AS_HELP_STRING(--enable-minimal,\n  [Only compile the minimum set of functions required for the high-level API])],\n[\n  AS_IF([test \"x$enableval\" = \"xyes\"], [\n    enable_minimal=\"yes\"\n    SODIUM_LIBRARY_MINIMAL_DEF=\"#define SODIUM_LIBRARY_MINIMAL 1\"\n    AC_DEFINE([MINIMAL], [1], [Define for a minimal build, without deprecated functions and functions that high-level APIs depend on])\n  ], [\n    enable_minimal=\"no\"\n  ])\n],\n[\n  enable_minimal=\"no\"\n])\nAM_CONDITIONAL([MINIMAL], [test x$enable_minimal = xyes])\nAC_SUBST(SODIUM_LIBRARY_MINIMAL_DEF)\n\nAC_ARG_WITH(pthreads, AS_HELP_STRING([--with-pthreads],\n [use pthreads library, or --without-pthreads to disable threading support]),\n [ ], [withval=\"yes\"])\n\nAS_IF([test \"x$withval\" = \"xyes\"], [\n  AX_PTHREAD([\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n        #include <pthread.h>\n      ]], [[\n        pthread_mutex_t mutex;\n\n        pthread_mutex_lock(&mutex);\n        pthread_mutex_unlock(&mutex)\n      ]]\n    )], [\n        AC_DEFINE([HAVE_PTHREAD], [1], [Define if you have POSIX threads libraries and header files])\n        with_threads=\"yes\"\n        LIBS=\"$PTHREAD_LIBS $LIBS\"\n        PKGCONFIG_LIBS_PRIVATE=\"$PTHREAD_LIBS $PTHREAD_CFLAGS $PKGCONFIG_LIBS_PRIVATE\"\n        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n        CC=\"$PTHREAD_CC\"\n      ])\n    ],\n    [ AC_MSG_NOTICE(pthread mutexes are not available) ]\n  )\n], [with_threads=\"no\"])\n\nAC_ARG_WITH(safecode,\n[AS_HELP_STRING(--with-safecode,For maintainers only - please do not use)],\n[AS_IF([test \"x$withval\" = \"xyes\"], [\n    AC_ARG_VAR([SAFECODE_HOME], [set to the safecode base directory])\n    : ${SAFECODE_HOME:=/opt/safecode}\n    LDFLAGS=\"$LDFLAGS -L${SAFECODE_HOME}/lib\"\n    LIBS=\"$LIBS -lsc_dbg_rt -lpoolalloc_bitmap -lstdc++\"\n    CFLAGS=\"$CFLAGS -fmemsafety\"\n  ])\n])\n\nAC_ARG_WITH(ctgrind,\n[AS_HELP_STRING(--with-ctgrind,For maintainers only - please do not use)],\n[AS_IF([test \"x$withval\" = \"xyes\"], [\n    AC_CHECK_LIB(ctgrind, ct_poison)\n  ])\n])\n\nAC_ARG_ENABLE(retpoline,\n[AS_HELP_STRING(--enable-retpoline,Use return trampolines for indirect calls)],\n[AS_IF([test \"x$enableval\" = \"xyes\"], [\n  AX_CHECK_COMPILE_FLAG([-mindirect-branch=thunk-inline],\n    [CFLAGS=\"$CFLAGS -mindirect-branch=thunk-inline\"],\n    [AX_CHECK_COMPILE_FLAG([-mretpoline], [CFLAGS=\"$CFLAGS -mretpoline\"])]\n  )\n  AX_CHECK_COMPILE_FLAG([-mindirect-branch-register])\n  ])\n])\n\nENABLE_CWFLAGS=no\nAC_ARG_ENABLE(debug,\n[AS_HELP_STRING(--enable-debug,For maintainers only - please do not use)],\n[\n  AS_IF([test \"x$enableval\" = \"xyes\"], [\n    AS_IF([test \"x$LX_CFLAGS\" = \"xNONE\"], [\n      nxflags=\"\"\n      for flag in `echo $CFLAGS`; do\n        AS_CASE([$flag],\n          [-O*], [ ],\n          [-g*], [ ],\n          [*], [AS_VAR_APPEND([nxflags], [\" $flag\"])])\n      done\n      CFLAGS=\"$nxflags -O -g3\"\n    ])\n    ENABLE_CWFLAGS=yes\n    CPPFLAGS=\"$CPPFLAGS -DDEBUG=1 -U_FORTIFY_SOURCE\"\n  ])\n])\n\nAC_ARG_ENABLE(opt,\n[AS_HELP_STRING(--enable-opt,Optimize for the native CPU - The resulting library will be faster but not portable)],\n[\n  AS_IF([test \"x$enableval\" = \"xyes\"], [\n    AX_CHECK_COMPILE_FLAG([-ftree-vectorize], [CFLAGS=\"$CFLAGS -ftree-vectorize\"])\n    AX_CHECK_COMPILE_FLAG([-ftree-slp-vectorize], [CFLAGS=\"$CFLAGS -ftree-slp-vectorize\"])\n    AX_CHECK_COMPILE_FLAG([-fomit-frame-pointer], [CFLAGS=\"$CFLAGS -fomit-frame-pointer\"])\n    AX_CHECK_COMPILE_FLAG([-march=native], [CFLAGS=\"$CFLAGS -march=native\"])\n    AX_CHECK_COMPILE_FLAG([-mtune=native], [CFLAGS=\"$CFLAGS -mtune=native\"])\n  ])\n])\n\nAC_SUBST(MAINT)\nAC_SUBST(PKGCONFIG_LIBS_PRIVATE)\n\nAX_VALGRIND_CHECK\n\ndnl Checks\n\nAC_C_VARARRAYS\n\nAC_CHECK_DEFINE([__wasi__], [WASI=\"yes\"], [])\n\nAS_CASE([$host_os], [linux-gnu], [AX_ADD_FORTIFY_SOURCE], [ ])\n\nAX_CHECK_COMPILE_FLAG([-fvisibility=hidden],\n  [CFLAGS=\"$CFLAGS -fvisibility=hidden\"])\n\nAS_CASE([$host_os], [cygwin*|mingw*|msys|pw32*|cegcc*|eabi*], [ ], [\n  AX_CHECK_COMPILE_FLAG([-fPIC], [CFLAGS=\"$CFLAGS -fPIC\"])\n])\n\nAS_IF([test \"$enable_pie\" != \"no\"],[\n  AX_CHECK_COMPILE_FLAG([-fPIE], [\n    AX_CHECK_LINK_FLAG([-pie], [\n      [CFLAGS=\"$CFLAGS -fPIE\"\n       LDFLAGS=\"$LDFLAGS -pie\"]\n    ])\n  ])\n])\n\nAX_CHECK_COMPILE_FLAG([-fno-strict-aliasing], [CFLAGS=\"$CFLAGS -fno-strict-aliasing\"])\nAX_CHECK_COMPILE_FLAG([-fno-strict-overflow], [CFLAGS=\"$CFLAGS -fno-strict-overflow\"], [\n  AX_CHECK_COMPILE_FLAG([-fwrapv], [CFLAGS=\"$CFLAGS -fwrapv\"])\n])\n\nAS_IF([test \"$GCC\" = \"yes\" ], [\n  AS_CASE([$host_cpu],\n    [i?86|amd64|x86_64], [\n      AC_COMPILE_IFELSE(\n        [AC_LANG_SOURCE([\n#if !defined(__clang__) && defined(__GNUC__) && ((__GNUC__ << 8) | __GNUC_MINOR__) < 0x403\n# error old gcc\n#endif\nint main(void) { return 0; }\n         ])],,[\n          AX_CHECK_COMPILE_FLAG([-flax-vector-conversions], [CFLAGS=\"$CFLAGS -flax-vector-conversions\"])\n        ])\n      ]\n    )\n  ])\n\nLIBTOOL_OLD_FLAGS=\"$LIBTOOL_EXTRA_FLAGS\"\nLIBTOOL_EXTRA_FLAGS=\"$LIBTOOL_EXTRA_FLAGS -version-info $SODIUM_LIBRARY_VERSION\"\nAC_ARG_ENABLE(soname-versions,\n  [AS_HELP_STRING([--enable-soname-versions], [enable soname versions (must be disabled for Android) (default: enabled)])],\n    [\n        AS_IF([test \"x$enableval\" = \"xno\"], [\n          LIBTOOL_EXTRA_FLAGS=\"$LIBTOOL_OLD_FLAGS -avoid-version\"\n        ])\n    ]\n)\n\nAS_CASE([$host_os],\n  [cygwin*|mingw*|msys|pw32*|cegcc*], [\n    AX_CHECK_LINK_FLAG([-Wl,--dynamicbase], [LDFLAGS=\"$LDFLAGS -Wl,--dynamicbase\"])\n    AX_CHECK_LINK_FLAG([-Wl,--high-entropy-va], [LDFLAGS=\"$LDFLAGS -Wl,--high-entropy-va\"])\n    AX_CHECK_LINK_FLAG([-Wl,--nxcompat], [LDFLAGS=\"$LDFLAGS -Wl,--nxcompat\"])\n  ])\n\nAS_CASE([$host_os],\n  [cygwin*|mingw*|msys|pw32*|cegcc*|eabi*], [\n    AX_CHECK_COMPILE_FLAG([-fno-asynchronous-unwind-tables], [\n      [CFLAGS=\"$CFLAGS -fno-asynchronous-unwind-tables\"]\n    ])\n])\n\nAS_IF([test \"x$enable_ssp\" != \"xno\"],[\n\nAS_CASE([$host_os],\n  [solaris*|cygwin*|mingw*|msys|pw32*|cegcc*|haiku|none|eabi*], [ ],\n  [*], [\n    AX_CHECK_COMPILE_FLAG([-fstack-protector], [\n      AX_CHECK_LINK_FLAG([-fstack-protector],\n        [CFLAGS=\"$CFLAGS -fstack-protector\"]\n      )\n    ])\n  ])\n])\n\nAX_CHECK_COMPILE_FLAG([$CFLAGS -Wall], [CWFLAGS=\"$CFLAGS -Wall\"])\nAX_CHECK_COMPILE_FLAG([$CFLAGS -Wno-deprecated-declarations], [CFLAGS=\"$CFLAGS -Wno-deprecated-declarations\"])\nAX_CHECK_COMPILE_FLAG([$CFLAGS -Wno-unknown-pragmas], [CFLAGS=\"$CFLAGS -Wno-unknown-pragmas\"])\n\nAC_ARG_VAR([CWFLAGS], [compilation flags for generating extra warnings])\n\nAC_MSG_CHECKING(for clang)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[\n#ifndef __clang__\n#error Not clang\n#endif\n]])],\n  [AC_MSG_RESULT(yes)\n   AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wno-unknown-warning-option],\n     [CWFLAGS=\"$CWFLAGS -Wno-unknown-warning-option\"])\n  ],\n  [AC_MSG_RESULT(no)\n])\n\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wextra], [CWFLAGS=\"$WCFLAGS -Wextra\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Warray-bounds], [CWFLAGS=\"$CWFLAGS -Warray-bounds\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wbad-function-cast], [CWFLAGS=\"$CWFLAGS -Wbad-function-cast\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wcast-qual], [CWFLAGS=\"$CWFLAGS -Wcast-qual\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wdiv-by-zero], [CWFLAGS=\"$CWFLAGS -Wdiv-by-zero\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wduplicated-branches], [CWFLAGS=\"$CWFLAGS -Wduplicated-branches\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wduplicated-cond], [CWFLAGS=\"$CWFLAGS -Wduplicated-cond\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wfloat-equal], [CWFLAGS=\"$CWFLAGS -Wfloat-equal\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wformat=2], [CWFLAGS=\"$CWFLAGS -Wformat=2\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wlogical-op], [CWFLAGS=\"$CWFLAGS -Wlogical-op\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wmaybe-uninitialized], [CWFLAGS=\"$CWFLAGS -Wmaybe-uninitialized\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wmisleading-indentation], [CWFLAGS=\"$CWFLAGS -Wmisleading-indentation\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wmissing-declarations], [CWFLAGS=\"$CWFLAGS -Wmissing-declarations\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wmissing-prototypes], [CWFLAGS=\"$CWFLAGS -Wmissing-prototypes\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wnested-externs], [CWFLAGS=\"$CWFLAGS -Wnested-externs\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wno-type-limits], [CWFLAGS=\"$CWFLAGS -Wno-type-limits\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wno-unknown-pragmas], [CWFLAGS=\"$CWFLAGS -Wno-unknown-pragmas\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wnormalized=id], [CWFLAGS=\"$CWFLAGS -Wnormalized=id\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wnull-dereference], [CWFLAGS=\"$CWFLAGS -Wnull-dereference\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wold-style-declaration], [CWFLAGS=\"$CWFLAGS -Wold-style-declaration\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wpointer-arith], [CWFLAGS=\"$CWFLAGS -Wpointer-arith\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wredundant-decls], [CWFLAGS=\"$CWFLAGS -Wredundant-decls\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wrestrict], [CWFLAGS=\"$CWFLAGS -Wrestrict\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wshorten-64-to-32], [CWFLAGS=\"$CWFLAGS -Wshorten-64-to-32\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wsometimes-uninitialized], [CWFLAGS=\"$CWFLAGS -Wsometimes-uninitialized\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wstrict-prototypes], [CWFLAGS=\"$CWFLAGS -Wstrict-prototypes\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wswitch-enum], [CWFLAGS=\"$CWFLAGS -Wswitch-enum\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wvariable-decl], [CWFLAGS=\"$CWFLAGS -Wvariable-decl\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wvla], [CWFLAGS=\"$WCFLAGS -Wvla\"])\nAX_CHECK_COMPILE_FLAG([$CWFLAGS -Wwrite-strings], [CWFLAGS=\"$CWFLAGS -Wwrite-strings\"])\n\nAS_IF([test \"x$EMSCRIPTEN\" = \"x\"], [\n  AX_CHECK_LINK_FLAG([-Wl,-z,relro], [LDFLAGS=\"$LDFLAGS -Wl,-z,relro\"])\n  AX_CHECK_LINK_FLAG([-Wl,-z,now], [LDFLAGS=\"$LDFLAGS -Wl,-z,now\"])\n  AX_CHECK_LINK_FLAG([-Wl,-z,noexecstack], [LDFLAGS=\"$LDFLAGS -Wl,-z,noexecstack\"])\n])\n\nAX_CHECK_CATCHABLE_SEGV\nAX_CHECK_CATCHABLE_ABRT\n\nAS_IF([test \"x$with_threads\" = \"xyes\"], [\n  AX_TLS([AC_MSG_RESULT(thread local storage is supported)\n          AX_CHECK_COMPILE_FLAG([-ftls-model=local-dynamic],\n            [CFLAGS=\"$CFLAGS -ftls-model=local-dynamic\"])],\n         [AC_MSG_RESULT(thread local storage is not supported)]) ])\n\nLT_INIT\nAC_SUBST(LIBTOOL_DEPS)\n\nAC_ARG_VAR([AR], [path to the ar utility])\nAC_CHECK_TOOL([AR], [ar], [ar])\n\ndnl Checks for headers and codegen feature flags\n\ntarget_cpu_aarch64=no\nAC_MSG_CHECKING(for ARM64 target)\nAC_LINK_IFELSE(\n  [AC_LANG_PROGRAM([\n#ifndef __aarch64__\n#error Not aarch64\n#endif\n#include <arm_neon.h>\n   ], [(void) 0])],\n   [AC_MSG_RESULT(yes)\n    target_cpu_aarch64=yes],\n   [AC_MSG_RESULT(no)\n    target_cpu_aarch64=no])\n\nAS_IF([test \"x$EMSCRIPTEN\" = \"x\"], [\n\n  AS_IF([test \"x$target_cpu_aarch64\" = \"xyes\"], [\n    have_armcrypto=no\n    AC_MSG_CHECKING(for ARM crypto instructions set)\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n      #ifndef __ARM_FEATURE_CRYPTO\n      #  define __ARM_FEATURE_CRYPTO 1\n      #endif\n      #ifndef __ARM_FEATURE_AES\n      #  define __ARM_FEATURE_AES 1\n      #endif\n\n      #include <arm_neon.h>\n\n      #ifdef __clang__\n      #  pragma clang attribute push(__attribute__((target(\"neon,crypto,aes\"))), apply_to = function)\n      #elif defined(__GNUC__)\n      #  pragma GCC target(\"+simd+crypto\")\n      #endif\n    ]], [[\n      int64x2_t x = { 0, 0 };\n      vaeseq_u8(vmovq_n_u8(0), vmovq_n_u8(0));\n      vmull_high_p64(vreinterpretq_p64_s64(x), vreinterpretq_p64_s64(x));\n\n      #ifdef __clang__\n      #  pragma clang attribute pop\n      #endif\n      (void) 0\n      ]])],\n      [\n        AC_MSG_RESULT(yes)\n        have_armcrypto=yes\n      ],\n      [\n        AC_MSG_RESULT(no)\n        oldcflags=\"$CFLAGS\"\n        AX_CHECK_COMPILE_FLAG([-march=armv8-a+crypto+aes], [\n          CFLAGS=\"$CFLAGS -march=armv8-a+crypto+aes\"\n          AC_MSG_CHECKING(for ARM crypto instructions set with -march=armv8-a+crypto+aes)\n          AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n            #ifdef __clang__\n            #  pragma clang attribute push(__attribute__((target(\"neon,crypto,aes\"))), apply_to = function)\n            #elif defined(__GNUC__)\n            #  pragma GCC target(\"+simd+crypto\")\n            #endif\n            #ifndef __ARM_FEATURE_CRYPTO\n            #  define __ARM_FEATURE_CRYPTO 1\n            #endif\n            #ifndef __ARM_FEATURE_AES\n            #  define __ARM_FEATURE_AES 1\n            #endif\n\n            #include <arm_neon.h>\n          ]], [[\n            int64x2_t x = { 0, 0 };\n            vaeseq_u8(vmovq_n_u8(0), vmovq_n_u8(0));\n            vmull_high_p64(vreinterpretq_p64_s64(x), vreinterpretq_p64_s64(x));\n\n            #ifdef __clang__\n            #  pragma clang attribute pop\n            #endif\n            (void) 0\n          ]])],\n            [\n              AC_MSG_RESULT(yes - with addition of -march=armv8-a+crypto+aes)\n              have_armcrypto=yes\n              CFLAGS_ARMCRYPTO=\"-march=armv8-a+crypto+aes\"\n            ],\n            [AC_MSG_RESULT(no)])\n          CFLAGS=\"$oldcflags\"\n        ])\n      ])\n      AS_IF([test \"$have_armcrypto\" = \"yes\"],[AC_DEFINE([HAVE_ARMCRYPTO], [1], [ARM crypto extensions are available])])\n  ])\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-mmmx], [CFLAGS=\"$CFLAGS -mmmx\"])\n  AC_MSG_CHECKING(for MMX instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"mmx\")\n#include <mmintrin.h>\n]], [[ __m64 x = _mm_setzero_si64(); ]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_MMINTRIN_H], [1], [mmx is available])\n     AX_CHECK_COMPILE_FLAG([-mmmx], [CFLAGS_MMX=\"-mmmx\"])],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-msse2], [CFLAGS=\"$CFLAGS -msse2\"])\n  AC_MSG_CHECKING(for SSE2 instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"sse2\")\n#ifndef __SSE2__\n# define __SSE2__\n#endif\n#include <emmintrin.h>\n]], [[ __m128d x = _mm_setzero_pd();\n       __m128i z = _mm_srli_epi64(_mm_setzero_si128(), 26); ]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_EMMINTRIN_H], [1], [sse2 is available])\n     AX_CHECK_COMPILE_FLAG([-msse2], [CFLAGS_SSE2=\"-msse2\"])],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-msse3], [CFLAGS=\"$CFLAGS -msse3\"])\n  AC_MSG_CHECKING(for SSE3 instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"sse3\")\n#include <pmmintrin.h>\n]], [[ __m128 x = _mm_addsub_ps(_mm_cvtpd_ps(_mm_setzero_pd()),\n                                _mm_cvtpd_ps(_mm_setzero_pd())); ]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_PMMINTRIN_H], [1], [sse3 is available])\n     AX_CHECK_COMPILE_FLAG([-msse3], [CFLAGS_SSE3=\"-msse3\"])],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-mssse3], [CFLAGS=\"$CFLAGS -mssse3\"])\n  AC_MSG_CHECKING(for SSSE3 instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"ssse3\")\n#include <tmmintrin.h>\n]], [[ __m64 x = _mm_abs_pi32(_m_from_int(0)); ]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_TMMINTRIN_H], [1], [ssse3 is available])\n     AX_CHECK_COMPILE_FLAG([-mssse3], [CFLAGS_SSSE3=\"-mssse3\"])],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-msse4.1], [CFLAGS=\"$CFLAGS -msse4.1\"])\n  AC_MSG_CHECKING(for SSE4.1 instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"sse4.1\")\n#include <smmintrin.h>\n]], [[ __m128i x = _mm_minpos_epu16(_mm_setzero_si128()); ]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_SMMINTRIN_H], [1], [sse4.1 is available])\n     AX_CHECK_COMPILE_FLAG([-msse4.1], [CFLAGS_SSE41=\"-msse4.1\"])],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-mavx], [CFLAGS=\"$CFLAGS -mavx\"])\n  AC_MSG_CHECKING(for AVX instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"avx\")\n#include <immintrin.h>\n]], [[ _mm256_zeroall(); ]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_AVXINTRIN_H], [1], [AVX is available])\n     AX_CHECK_COMPILE_FLAG([-mavx], [CFLAGS_AVX=\"-mavx\"])],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-mavx2], [CFLAGS=\"$CFLAGS -mavx2\"])\n  AC_MSG_CHECKING(for AVX2 instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"avx2\")\n#include <immintrin.h>\n]], [[\n__m256 x = _mm256_set1_ps(3.14);\n__m256 y = _mm256_permutevar8x32_ps(x, _mm256_set1_epi32(42));\nreturn _mm256_movemask_ps(_mm256_cmp_ps(x, y, _CMP_NEQ_OQ));\n]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_AVX2INTRIN_H], [1], [AVX2 is available])\n     AX_CHECK_COMPILE_FLAG([-mavx2], [CFLAGS_AVX2=\"-mavx2\"])\n     AC_MSG_CHECKING(if _mm256_broadcastsi128_si256 is correctly defined)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"avx2\")\n#include <immintrin.h>\n     ]], [[ __m256i y = _mm256_broadcastsi128_si256(_mm_setzero_si128()); ]])],\n       [AC_MSG_RESULT(yes)],\n       [AC_MSG_RESULT(no)\n        AC_DEFINE([_mm256_broadcastsi128_si256], [_mm_broadcastsi128_si256],\n                  [Define to the local name of _mm256_broadcastsi128_si256])])\n     ],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-mavx512f], [CFLAGS=\"$CFLAGS -mavx512f\"])\n  AC_MSG_CHECKING(for AVX512F instructions set)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"avx512f\")\n#include <immintrin.h>\n]], [[\n\n#ifndef __AVX512F__\n# error No AVX512 support\n#elif defined(__clang__)\n# if __clang_major__ < 4\n#  error Compiler AVX512 support may be broken\n# endif\n#elif defined(__GNUC__)\n# if __GNUC__ < 6\n#  error Compiler AVX512 support may be broken\n# endif\n#endif\n\n__m512i x = _mm512_setzero_epi32();\n__m512i y = _mm512_permutexvar_epi64(_mm512_setr_epi64(0, 1, 4, 5, 2, 3, 6, 7), x);\n]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_AVX512FINTRIN_H], [1], [AVX512F is available])\n     AX_CHECK_COMPILE_FLAG([-mavx512f], [CFLAGS_AVX512F=\"-mavx512f\"])],\n    [AC_MSG_RESULT(no)\n     AX_CHECK_COMPILE_FLAG([$CFLAGS -mno-avx512f],\n       [CFLAGS=\"$CFLAGS -mno-avx512f\"])\n    ])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-maes], [CFLAGS=\"$CFLAGS -maes\"])\n  AX_CHECK_COMPILE_FLAG([-mpclmul], [CFLAGS=\"$CFLAGS -mpclmul\"])\n  AC_MSG_CHECKING(for AESNI instructions set and PCLMULQDQ)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"aes\")\n#pragma GCC target(\"pclmul\")\n#include <wmmintrin.h>\n]], [[ __m128i x = _mm_aesimc_si128(_mm_setzero_si128());\n       __m128i y = _mm_clmulepi64_si128(_mm_setzero_si128(), _mm_setzero_si128(), 0);]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_WMMINTRIN_H], [1], [aesni is available])\n     AX_CHECK_COMPILE_FLAG([-maes], [CFLAGS_AESNI=\"-maes\"])\n     AX_CHECK_COMPILE_FLAG([-mpclmul], [CFLAGS_PCLMUL=\"-mpclmul\"])\n     ],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n  oldcflags=\"$CFLAGS\"\n  AX_CHECK_COMPILE_FLAG([-mrdrnd], [CFLAGS=\"$CFLAGS -mrdrnd\"])\n  AC_MSG_CHECKING(for RDRAND)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#pragma GCC target(\"rdrnd\")\n#include <immintrin.h>\n]], [[ unsigned long long x; _rdrand64_step(&x); ]])],\n    [AC_MSG_RESULT(yes)\n     AC_DEFINE([HAVE_RDRAND], [1], [rdrand is available])\n     AX_CHECK_COMPILE_FLAG([-mrdrnd], [CFLAGS_RDRAND=\"-mrdrnd\"])\n     ],\n    [AC_MSG_RESULT(no)])\n  CFLAGS=\"$oldcflags\"\n\n])\n\nAC_SUBST(CFLAGS_ARMCRYPTO)\nAC_SUBST(CFLAGS_MMX)\nAC_SUBST(CFLAGS_SSE2)\nAC_SUBST(CFLAGS_SSE3)\nAC_SUBST(CFLAGS_SSSE3)\nAC_SUBST(CFLAGS_SSE41)\nAC_SUBST(CFLAGS_AVX)\nAC_SUBST(CFLAGS_AVX2)\nAC_SUBST(CFLAGS_AVX512F)\nAC_SUBST(CFLAGS_AESNI)\nAC_SUBST(CFLAGS_PCLMUL)\nAC_SUBST(CFLAGS_RDRAND)\n\nAC_CHECK_HEADERS([sys/mman.h sys/param.h sys/random.h intrin.h sys/auxv.h])\nAC_CHECK_HEADERS([CommonCrypto/CommonRandom.h])\nAC_CHECK_HEADERS([cet.h])\n\nAC_MSG_CHECKING([if _xgetbv() is available])\nAC_LINK_IFELSE(\n  [AC_LANG_PROGRAM([[ #include <intrin.h> ]], [[ (void) _xgetbv(0) ]])],\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE([HAVE__XGETBV], [1], [_xgetbv() is available])],\n  [AC_MSG_RESULT(no)])\n\ndnl Checks for typedefs, structures, and compiler characteristics.\n\nAC_C_INLINE\nAS_CASE([$host_cpu],\n  [i?86|amd64|x86_64],\n    [ac_cv_c_bigendian=no]\n)\nAC_C_BIGENDIAN(\n  AC_DEFINE(NATIVE_BIG_ENDIAN, 1, [machine is bigendian]),\n  AC_DEFINE(NATIVE_LITTLE_ENDIAN, 1, [machine is littleendian]),\n  AC_MSG_ERROR([unknown endianness]),\n  AC_MSG_ERROR([universal endianness is not supported - compile separately and use lipo(1)])\n)\n\nAC_MSG_CHECKING(whether __STDC_LIMIT_MACROS is required)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <limits.h>\n#include <stdint.h>\n]], [[\n(void) SIZE_MAX;\n(void) UINT64_MAX;\n]])],\n  [AC_MSG_RESULT(no)],\n  [AC_MSG_RESULT(yes)\n   CPPFLAGS=\"$CPPFLAGS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS\"\n])\n\nAC_MSG_CHECKING(whether we can use inline asm code)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n]], [[\nint a = 42;\nint *pnt = &a;\n__asm__ __volatile__ (\"\" : : \"r\"(pnt) : \"memory\");\n]])],\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE([HAVE_INLINE_ASM], [1], [inline asm code can be used])]\n  [AC_MSG_RESULT(no)]\n)\n\nHAVE_AMD64_ASM_V=0\nAS_IF([test \"$enable_asm\" != \"no\"],[\n  AC_MSG_CHECKING(whether we can use x86_64 asm code)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n  ]], [[\n#if defined(__amd64) || defined(__amd64__) || defined(__x86_64__)\n# if defined(__CYGWIN__) || defined(__MINGW32__) || defined(__MINGW64__) || defined(_WIN32) || defined(_WIN64) || defined(__midipix__)\n#  error Windows x86_64 calling conventions are not supported yet\n# endif\n/* neat */\n#else\n# error !x86_64\n#endif\nunsigned char i = 0, o = 0, t;\n__asm__ __volatile__ (\"pxor %%xmm12, %%xmm6 \\n\"\n                      \"movb (%[i]), %[t] \\n\"\n                      \"addb %[t], (%[o]) \\n\"\n                      : [t] \"=&r\"(t)\n                      : [o] \"D\"(&o), [i] \"S\"(&i)\n                      : \"memory\", \"flags\", \"cc\");\n]])],\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE([HAVE_AMD64_ASM], [1], [x86_64 asm code can be used])\n   HAVE_AMD64_ASM_V=1],\n  [AC_MSG_RESULT(no)])\n])\nAM_CONDITIONAL([HAVE_AMD64_ASM], [test $HAVE_AMD64_ASM_V = 1])\nAC_SUBST(HAVE_AMD64_ASM_V)\n\nHAVE_AVX_ASM_V=0\nAS_IF([test \"$enable_asm\" != \"no\"],[\n  AC_MSG_CHECKING(whether we can assemble AVX opcodes)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n  ]], [[\n#if defined(__amd64) || defined(__amd64__) || defined(__x86_64__)\n# if defined(__CYGWIN__) || defined(__MINGW32__) || defined(__MINGW64__) || defined(_WIN32) || defined(_WIN64)\n#  error Windows x86_64 calling conventions are not supported yet\n# endif\n/* neat */\n#else\n# error !x86_64\n#endif\n__asm__ __volatile__ (\"vpunpcklqdq %xmm0,%xmm13,%xmm0\");\n]])],\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE([HAVE_AVX_ASM], [1], [AVX opcodes are supported])\n   HAVE_AVX_ASM_V=1],\n  [AC_MSG_RESULT(no)])\n])\nAM_CONDITIONAL([HAVE_AVX_ASM], [test $HAVE_AVX_ASM_V = 1])\nAC_SUBST(HAVE_AVX_ASM_V)\n\nAC_MSG_CHECKING(for 128-bit arithmetic)\nHAVE_TI_MODE_V=0\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n#if !defined(__clang__) && !defined(__GNUC__) && !defined(__SIZEOF_INT128__)\n# error mode(TI) is a gcc extension, and __int128 is not available\n#endif\n#if defined(__clang__) && !defined(__x86_64__) && !defined(__aarch64__)\n# error clang does not properly handle the 128-bit type on 32-bit systems\n#endif\n#ifndef NATIVE_LITTLE_ENDIAN\n# error libsodium currently expects a little endian CPU for the 128-bit type\n#endif\n#ifdef __EMSCRIPTEN__\n# error emscripten currently doesn't support some operations on integers larger than 64 bits\n#endif\n#include <stddef.h>\n#include <stdint.h>\n#if defined(__SIZEOF_INT128__)\ntypedef unsigned __int128 uint128_t;\n#else\ntypedef unsigned uint128_t __attribute__((mode(TI)));\n#endif\nvoid fcontract(uint128_t *t) {\n  *t += 0x8000000000000 - 1;\n  *t *= *t;\n  *t >>= 84;\n}\n]], [[\n(void) fcontract;\n]])],\n[AC_MSG_RESULT(yes)\n AC_DEFINE([HAVE_TI_MODE], [1], [gcc TI mode is available])\n HAVE_TI_MODE_V=1],\n[AC_MSG_RESULT(no)])\nAM_CONDITIONAL([HAVE_TI_MODE], [test $HAVE_TI_MODE_V = 1])\nAC_SUBST(HAVE_TI_MODE_V)\n\nHAVE_CPUID_V=0\nAS_IF([test \"$enable_asm\" != \"no\"],[\n  AC_MSG_CHECKING(for cpuid instruction)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[ ]], [[\nunsigned int cpu_info[4];\n__asm__ __volatile__ (\"xchgl %%ebx, %k1; cpuid; xchgl %%ebx, %k1\" :\n                      \"=a\" (cpu_info[0]), \"=&r\" (cpu_info[1]),\n                      \"=c\" (cpu_info[2]), \"=d\" (cpu_info[3]) :\n                      \"0\" (0U), \"2\" (0U));\n  ]])],\n  [AC_MSG_RESULT(yes)\n   AC_DEFINE([HAVE_CPUID], [1], [cpuid instruction is available])\n   HAVE_CPUID_V=1],\n  [AC_MSG_RESULT(no)])\n  ])\nAC_SUBST(HAVE_CPUID_V)\n\nasm_hide_symbol=\"unsupported\"\nAS_IF([test \"$enable_asm\" != \"no\"],[\n  AC_MSG_CHECKING(if the .private_extern asm directive is supported)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n__asm__ __volatile__ (\".private_extern dummy_symbol \\n\"\n                      \".private_extern _dummy_symbol \\n\"\n                      \".globl dummy_symbol \\n\"\n                      \".globl _dummy_symbol \\n\"\n                      \"dummy_symbol: \\n\"\n                      \"_dummy_symbol: \\n\"\n                      \"    nop \\n\"\n);\n  ]])],\n  [AC_MSG_RESULT(yes)\n   asm_hide_symbol=\".private_extern\"],\n  [AC_MSG_RESULT(no)])\n\n  AC_MSG_CHECKING(if the .hidden asm directive is supported)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n__asm__ __volatile__ (\".hidden dummy_symbol \\n\"\n                      \".hidden _dummy_symbol \\n\"\n                      \".globl dummy_symbol \\n\"\n                      \".globl _dummy_symbol \\n\"\n                      \"dummy_symbol: \\n\"\n                      \"_dummy_symbol: \\n\"\n                      \"    nop \\n\"\n);\n  ]])],\n  [AC_MSG_RESULT(yes)\n   AS_IF([test \"$asm_hide_symbol\" = \"unsupported\"],\n          [asm_hide_symbol=\".hidden\"],\n          [AC_MSG_NOTICE([unable to reliably tag symbols as private])\n           asm_hide_symbol=\"unsupported\"])\n  ],\n  [AC_MSG_RESULT(no)])\n\n  AS_IF([test \"$asm_hide_symbol\" != \"unsupported\"],[\n    AC_DEFINE_UNQUOTED([ASM_HIDE_SYMBOL], [$asm_hide_symbol], [directive to hide symbols])\n  ])\n])\n\nAC_MSG_CHECKING(if weak symbols are supported)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#if !defined(__ELF__) && !defined(__APPLE_CC__)\n# error Support for weak symbols may not be available\n#endif\n__attribute__((weak)) void __dummy(void *x) { }\nvoid f(void *x) { __dummy(x); }\n]], [[ ]]\n)],\n[AC_MSG_RESULT(yes)\n AC_DEFINE([HAVE_WEAK_SYMBOLS], [1], [weak symbols are supported])],\n[AC_MSG_RESULT(no)])\n\nAC_MSG_CHECKING(if atomic operations are supported)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[ ]], [[\nstatic volatile int _sodium_lock;\n__sync_lock_test_and_set(&_sodium_lock, 1);\n__sync_lock_release(&_sodium_lock);\n]]\n)],\n[AC_MSG_RESULT(yes)\n AC_DEFINE([HAVE_ATOMIC_OPS], [1], [atomic operations are supported])],\n[AC_MSG_RESULT(no)])\n\nAC_MSG_CHECKING(if C11 memory fences are supported)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <stdatomic.h>\n ]], [[\natomic_thread_fence(memory_order_acquire);\n]]\n)],\n[AC_MSG_RESULT(yes)\n AC_DEFINE([HAVE_C11_MEMORY_FENCES], [1], [C11 memory fences are supported])],\n[AC_MSG_RESULT(no)])\n\nAC_MSG_CHECKING(if gcc memory fences are supported)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n__atomic_thread_fence(__ATOMIC_ACQUIRE);\n]]\n)],\n[AC_MSG_RESULT(yes)\n AC_DEFINE([HAVE_GCC_MEMORY_FENCES], [1], [GCC memory fences are supported])],\n[AC_MSG_RESULT(no)])\n\ndnl Checks for functions and headers\n\nAC_FUNC_ALLOCA\nAS_IF([test \"x$EMSCRIPTEN\" = \"x\"],[\n  AC_CHECK_FUNCS([arc4random arc4random_buf])\n  AS_IF([test \"x$WASI\" = \"x\"],[\n    AC_CHECK_FUNCS([mmap mlock madvise mprotect])\n    AC_CHECK_FUNCS([raise])\n    AC_CHECK_FUNCS([sysconf])\n  ])\n  AC_MSG_CHECKING(for getrandom with a standard API)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_SYS_RANDOM_H\n# include <sys/random.h>\n#endif\n]], [[\nunsigned char buf;\nif (&getrandom != NULL) {\n  (void) getrandom((void *) &buf, 1U, 0U);\n}\n  ]])],\n  [AC_MSG_RESULT(yes)\n   AC_CHECK_FUNCS([getrandom])],\n  [AC_MSG_RESULT(no)\n  ])\n\n  AC_MSG_CHECKING(for getentropy with a standard API)\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_SYS_RANDOM_H\n# include <sys/random.h>\n#endif\n]], [[\nunsigned char buf;\nif (&getentropy != NULL) {\n  (void) getentropy((void *) &buf, 1U);\n}\n  ]])],\n  [AC_MSG_RESULT(yes)\n   AC_CHECK_FUNCS([getentropy])],\n  [AC_MSG_RESULT(no)\n  ])\n])\n\nAS_IF([test \"x$WASI\" = \"x\"],[\n  AC_CHECK_FUNCS([getpid])\n  AC_CHECK_FUNCS([getauxval elf_aux_info])\n])\n\nAC_CHECK_FUNCS([posix_memalign nanosleep clock_gettime])\n\nAS_IF([test \"x$WASI\" = \"x\"],[\n  AC_CHECK_FUNCS([memset_s explicit_bzero memset_explicit explicit_memset])\n])\n\nAC_SUBST([LIBTOOL_EXTRA_FLAGS])\n\nTEST_LDFLAGS=''\nAS_IF([test \"x$EMSCRIPTEN\" != \"x\"],[\n  EXEEXT=.js\n  TEST_LDFLAGS='--pre-js pre.js.inc -s RESERVED_FUNCTION_POINTERS=8'\n])\nAC_SUBST(TEST_LDFLAGS)\nAM_CONDITIONAL([EMSCRIPTEN], [test \"x$EMSCRIPTEN\" != \"x\"])\nAM_CONDITIONAL([WASI], [test \"x$WASI\" != \"x\"])\n\nAC_DEFINE([CONFIGURED], [1], [the build system was properly configured])\n\ndnl Libtool.\n\nLT_INIT([dlopen win32-dll])\ngl_LD_OUTPUT_DEF\n\ndnl Output.\n\nAH_VERBATIM([NDEBUG], [/* Always evaluate assert() calls */\n#ifdef NDEBUG\n#/**/undef/**/ NDEBUG\n#endif])\n\nAS_IF([test \"x$ENABLE_CWFLAGS\" = \"xyes\"], [\n  CFLAGS=\"$CFLAGS $CWFLAGS\"\n])\n\nAC_CONFIG_FILES([Makefile\n                 builds/Makefile\n                 dist-build/Makefile\n                 libsodium.pc\n                 libsodium-uninstalled.pc\n                 src/Makefile\n                 src/libsodium/Makefile\n                 src/libsodium/include/Makefile\n                 src/libsodium/include/sodium/version.h\n                 test/default/Makefile\n                 test/Makefile\n                 ])\nAC_OUTPUT\n"
        },
        {
          "name": "dist-build",
          "type": "tree",
          "content": null
        },
        {
          "name": "lgtm.yml",
          "type": "blob",
          "size": 0.09765625,
          "content": "extraction:\n  cpp:\n     configure:\n        command:\n        - ./autogen.sh -s\n        - ./configure\n"
        },
        {
          "name": "libsodium-uninstalled.pc.in",
          "type": "blob",
          "size": 0.3037109375,
          "content": "Name: @PACKAGE_NAME@\nVersion: @PACKAGE_VERSION@\nDescription: A modern and easy-to-use crypto library\n\nLibs: -L${pcfiledir}/src/libsodium -lsodium\nLibs.private: @PKGCONFIG_LIBS_PRIVATE@\nCflags: -I${pcfiledir}/src/libsodium/include -I@top_srcdir@/src/libsodium/include -I@top_srcdir@/src/libsodium/include/sodium\n"
        },
        {
          "name": "libsodium.pc.in",
          "type": "blob",
          "size": 0.2685546875,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: @PACKAGE_NAME@\nVersion: @PACKAGE_VERSION@\nDescription: A modern and easy-to-use crypto library\n\nLibs: -L${libdir} -lsodium\nLibs.private: @PKGCONFIG_LIBS_PRIVATE@\nCflags: -I${includedir}\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 13.4169921875,
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "regen-msvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}