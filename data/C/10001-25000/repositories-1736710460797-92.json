{
  "metadata": {
    "timestamp": 1736710460797,
    "page": 92,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openwall/john",
      "stars": 10604,
      "defaultBranch": "bleeding-jumbo",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 2.91015625,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# Unix-style newlines with a newline ending every file\n[*.{c,h,in,pl,sh,pm,cl}]\nindent_style = tab\n# We don't enforce this for Jumbo, let user decide (that's the beauty of tabs)\n#indent_size = 8\n\n[*.py]\n# Python is a really strange language\nindent_style = space\nindent_size = 4\n\n[doc/*]\ntab_width = 8\n\n# Hashcat guys don't understand the beauty of tabs\n[pp.[ch]]\nindent_style = space\nindent_size = 2\n\n# Neither does mbedtls\n[src/mbedtls/*.[ch]]\nindent_style = space\nindent_size = 4\n\n[7z2john.pl]\nindent_style = space\nindent_size = 2\n\n# M4 is a bastard\n[*.{ac,m4}]\nindent_style = space\nindent_size = 2\n\n# Core files best keeping a tab size of 8\n[*.{S,sh}]\nindent_size = 8\n\n[AFS_fmt.h]\nindent_size = 8\n\n[BF_fmt.h]\nindent_size = 8\n\n[BF_std.h]\nindent_size = 8\n\n[BSDI_fmt.h]\nindent_size = 8\n\n[DES_bs.h]\nindent_size = 8\n\n[DES_bs_b.h]\nindent_size = 8\n\n[DES_fmt.h]\nindent_size = 8\n\n[DES_std.h]\nindent_size = 8\n\n[LM_fmt.h]\nindent_size = 8\n\n[MD5_fmt.h]\nindent_size = 8\n\n[MD5_std.h]\nindent_size = 8\n\n[alpha.h]\nindent_size = 8\n\n[arm32le.h]\nindent_size = 8\n\n[batch.h]\nindent_size = 8\n\n[bench.h]\nindent_size = 8\n\n[best.*]\nindent_size = 8\n\n[c3_fmt.h]\nindent_size = 8\n\n[charset.h]\nindent_size = 8\n\n[common.h]\nindent_size = 8\n\n[compiler.h]\nindent_size = 8\n\n[config.h]\nindent_size = 8\n\n[cracker.h]\nindent_size = 8\n\n[crc32.h]\nindent_size = 8\n\n[detect.h]\nindent_size = 8\n\n[dummy.h]\nindent_size = 8\n\n[external.h]\nindent_size = 8\n\n[formats.h]\nindent_size = 8\n\n[getopt.h]\nindent_size = 8\n\n[ia64.h]\nindent_size = 8\n\n[idle.h]\nindent_size = 8\n\n[inc.h]\nindent_size = 8\n\n[john.asm]\nindent_size = 8\nend_of_line = crlf\n\n[john.h]\nindent_size = 8\n\n[list.h]\nindent_size = 8\n\n[loader.h]\nindent_size = 8\n\n[logger.h]\nindent_size = 8\n\n[math.h]\nindent_size = 8\n\n[memory.h]\nindent_size = 8\n\n[mic.h]\nindent_size = 8\n\n[mips32.h]\nindent_size = 8\n\n[mips64.h]\nindent_size = 8\n\n[misc.h]\nindent_size = 8\n\n[nonstd.h]\nindent_size = 8\n\n[options.h]\nindent_size = 8\n\n[os.h]\nindent_size = 8\n\n[pa-risc.h]\nindent_size = 8\n\n[params.h]\nindent_size = 8\n\n[path.h]\nindent_size = 8\n\n[ppc32.h]\nindent_size = 8\n\n[ppc32alt.h]\nindent_size = 8\n\n[ppc64.h]\nindent_size = 8\n\n[ppc64alt.h]\nindent_size = 8\n\n[recovery.h]\nindent_size = 8\n\n[rpp.h]\nindent_size = 8\n\n[rules.h]\nindent_size = 8\n\n[sboxes-s.h]\nindent_size = 8\n\n[sboxes.h]\nindent_size = 8\n\n[signals.h]\nindent_size = 8\n\n[single.h]\nindent_size = 8\n\n[sparc32.h]\nindent_size = 8\n\n[sparc64.h]\nindent_size = 8\n\n[status.h]\nindent_size = 8\n\n[symlink.h]\nindent_size = 8\n\n[times.h]\nindent_size = 8\n\n[trip_fmt.h]\nindent_size = 8\n\n[tty.h]\nindent_size = 8\n\n[unafs.h]\nindent_size = 8\n\n[unique.h]\nindent_size = 8\n\n[unshadow.h]\nindent_size = 8\n\n[vax.h]\nindent_size = 8\n\n[wordlist.h]\nindent_size = 8\n\n[x86-64.h]\nindent_size = 8\n\n[x86-any.h]\nindent_size = 8\n\n[x86-mmx.h]\nindent_size = 8\n\n[x86-sse.h]\nindent_size = 8\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.958984375,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n#* text=auto\n\n# Explicitly declare text files you want to always be normalized and converted\n# to native line endings on checkout.\n#*.c text\n#*.h text\n\n# Declare files that will always have CRLF line endings on checkout.\nrun/oui.txt text eol=crlf\n\n# Denote all files that are truly binary and should not be modified.\nrun/*.chr binary\nsrc/john.com binary\n\n# Substitutions for git archive\nsrc/Makefile.in export-subst\nsrc/Makefile.legacy export-subst\n\n# Files/directories to be ignored for git archive\n.ci export-ignore\n.circle export-ignore\n.circleci export-ignore\n.git export-ignore\n.gitattributes export-ignore\n.github export-ignore\n.gitignore export-ignore\n.gitmodules export-ignore\n.mailmap export-ignore\n.pre-commit.sh export-ignore\n.travis export-ignore\n.travis.yml export-ignore\ncircle.yml export-ignore\n\n# This file should never be included in any branch, fork or archive\njohn-local.conf export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5576171875,
          "content": "*.diff\n*.log\n*.orig\n*.patch\n*.pot\n*.rec\n*.rej\n\n*.tmp\n*~\n*.old\n*.bak\n*.in\n*.dlst\n*.lst\n*.sam\n\n*.o\n*.exe\n*.dSYM\n.DS_Store\n*.pyc\n\nMakefile\njohn-local.conf\n\nrun/__pycache__\nrun/SIPdump\nrun/base64conv\nrun/bitlocker2john\nrun/calc_stat\nrun/cprepair\nrun/custom.chr\nrun/dmg2john\nrun/dynacomptest\nrun/eapmd5tojohn\nrun/genmkvpwd\nrun/gpg2john\nrun/hccap2john\nrun/john\nrun/john-*\nrun/john.local.conf\nrun/keepass2john\nrun/kernels/\nrun/opencl/*.bin\nrun/opencl/*.config\nrun/keychain2john\nrun/keyring2john\nrun/kwallet2john\nrun/luks2john\nrun/mkvcalcproba\nrun/mozilla2john\nrun/office2john\nrun/pfx2john\nrun/pp\nrun/putty2john\nrun/pwsafe2john\nrun/racf2john\nrun/rar2john\nrun/raw2dyna\nrun/ssh2john\nrun/tgtsnarf\nrun/to_dyna\nrun/truecrypt_volume2john\nrun/uaf2john\nrun/unafs\nrun/undrop\nrun/unique\nrun/unit-tests\nrun/unshadow\nrun/vncpcap2john\nrun/wpapcap2john\nrun/zip2john\n\nsrc/.gdbinit\nsrc/mbedtls/aes.a\nsrc/arch.h\nsrc/all_tests.lst\nsrc/autoconfig-stamp-h\nsrc/autoconfig-stamp-h-in\nsrc/autoconfig.h\nsrc/autom4te.cache/\nsrc/config*.cache\nsrc/config.status\nsrc/configure.scan\nsrc/dyna-comp.dic\nsrc/dyna-comp.pot\nsrc/dyna-comp.rec\nsrc/dynamic_big_crypt.c\nsrc/escrypt/tests\nsrc/fmt_externs.h\nsrc/fmt_registers.h\nsrc/generic.h\nsrc/john_build_rule.h\nsrc/memdbg_defines.h\nsrc/secp256k1/secp256k1.a\nsrc/ed25519-donna/ed25519-donna.a\nsrc/poly1305-donna/poly1305-donna.a\nsrc/stamp-h1\nsrc/version.h\nsrc/version.h.new\nsrc/restore_tester_fmt_plug.c\n\ntest\ntest/\n\ndict\ndict/\n/.vs/JohnTheRipper/v16/.suo\n/.vs\nsrc/.vscode/\n/src/.vs\n/src/CppProperties.json\n/src/launch.vs.json\n\n# Python-related files\n*.pyc\n__pycache__/\n*.pyo\n*.pyd\n**/venv/\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 2.9052734375,
          "content": "#\n# This ensures 'git shortlog' understands \"different\" committers as being\n# the same person\n#\n# Proper Name <commit@email.xx>\n# Proper Name <proper@email.xx> <commit@email.xx>\n#\nAgnieszka Bielec <bielecagnieszka8@gmail.com>\nAgnieszka Bielec <bielecagnieszka8@gmail.com> <eternal67@gmail.com>\nAleksey Cherepanov <aleksey.4erepanov@gmail.com>\nAleksey Cherepanov <aleksey.4erepanov@gmail.com> <lyosha@openwall.com>\nAlexander Cherepanov <cherepan@mccme.ru>\nAlexander Cherepanov <cherepan@mccme.ru> <ch3root@openwall.com>\nApingis <denis-burykin2014@yandex.ru>\nApingis <denis-burykin2014@yandex.ru> <denis_burykin@yahoo.com>\narcctgx <arcctgx@poczta.onet.pl>\narcctgx <arcctgx@poczta.onet.pl> <arcctgx@users.noreply.github.com>\nbartavelle (Simon Marechal) <bartavelle@gmail.com>\nChristian Mehlmauer <firefart@gmail.com>\nChristian Mehlmauer <firefart@gmail.com> <FireFart@users.noreply.github.com>\nClaudio André <claudioandre.br@gmail.com>\nClaudio André <claudioandre.br@gmail.com> <claudio.andre@correios.net.br>\nDhiru Kholia <dhiru@openwall.com>\nDhiru Kholia <dhiru@openwall.com> <dhiru.kholia@gmail.com>\nDhiru Kholia <dhiru@openwall.com> <dhiru@kth.se>\nDhiru Kholia <dhiru@openwall.com> <dhiru@redhat.com>\nDhiru Kholia <dhiru@openwall.com> <dhiru@spotify.com>\nDhiru Kholia <dhiru@openwall.com> <dkholia@cs.ubc.ca>\nDhiru Kholia <dhiru@openwall.com> <dkholia@redhat.com>\nDhiru Kholia <dhiru@openwall.com> <kholia@kth.se>\nElena Ago <elena.ago@gmail.com>\nElena Ago <elena.ago@gmail.com> <elenago@elenagos-MBP.lan>\nFrank Dittrich <frank.dittrich@mailbox.org>\nFrank Dittrich <frank.dittrich@mailbox.org> <fd@f18x64.localdomain>\nFrank Dittrich <frank.dittrich@mailbox.org> <frank_dittrich@hotmail.com>\nHarrison Neal <hneal@whatdidibreak.com>\nHarrison Neal <hneal@whatdidibreak.com> <hneal@hwatdidibreak.com>\nJan Starke <jan.starke@t-systems.com>\nJan Starke <jan.starke@t-systems.com> <jan.starke@outofbed.org>\nJan Starke <teeshop@users.noreply.github.com>\nJimF <jfoug@openwall.net>\nJimF <jfoug@openwall.net> <jfoug@openwall.com>\nJimF <jfoug@openwall.net> <jfoug@cox.net>\nJimF <jfoug@openwall.net> <jfoug@users.noreply.github.com>\nJimF <jfoug@openwall.net> <jim.fougeron@1PQHGQ1.dtn.com>\nKai Zhao <loverszhao@gmail.com>\nKai Zhao <loverszhao@gmail.com> <loverszhao@email.com>\nKai Zhao <loverszhao@gmail.com> <loverszhaokai@qq.com>\nLukas Odzioba <ukasz@openwall.net> <lukas.odzioba@gmail.com>\nmagnum <magnumripper@hushmail.com> <magnum>\nmagnum <magnumripper@hushmail.com> <john.magnum@hushmail.com>\nMilen Rangelov <gat3way@gat3way.eu>\nMyrice <qqlddg@gmail.com> <myrice@myrice-laptop.(none)>\nSamuele <samu@linuxasylum.net>\nSayantan Datta <std2048@gmail.com>\nSayantan Datta <std2048@gmail.com> <sayantan@Box2.(none)>\nSayantan Datta <std2048@gmail.com> <sayantan@Eden.(none)>\nSolar <solar@openwall.com>\nSolar <solar@openwall.com> <solar>\nTavis Ormandy <taviso@cmpxchg8b.com> <taviso@redhat.(none)>\nTavis Ormandy <taviso@cmpxchg8b.com> <you@example.com>\nZhang Lei <zhanglei.april@gmail.com>\n"
        },
        {
          "name": ".pre-commit.sh",
          "type": "blob",
          "size": 3.74609375,
          "content": "#!/bin/sh\n#\n#######################################################\n# This is a git pre-commit hook. It is a local hook,\n# BUT will do nothing until installed on your local\n# git repo.\n#\n# To install:\n#   ln -s ../../.pre-commit.sh .git/hooks/pre-commit\n#\n#######################################################\n# enforcement of JtR requirements for:\n#   1. Disallow scripts without exec bit set\n#   2. Disallow source with exec bit set\n#   3. Disallow text files with trailing WS\n#   4. Disallow text files with DOS EOL\n#   5. Disallow text files missing closing EOL\n#\n#   x.  TODO: other problems that can be quickly\n#             validated.\n#######################################################\n\n########################################################\n# test 1. Make sure scripts have execute bit set\n########################################################\nSCRIPT_FILE_PATTERN='\\.(pl|py|sh|rb)(\\..+)?$'\nSCRIPT_FILES=`git diff --cached --name-only | grep -E $SCRIPT_FILE_PATTERN`\nSCRIPT_FILES=\"$SCRIPT_FILES\"`git diff --cached --name-only | grep -E '(benchmark-unify|relbench)'`\nif [ \"x$SCRIPT_FILES\" != \"x\" ] ; then\n# 1. missing exec bit on a script file.\n   SCRIPT_LISTING=`echo \"$SCRIPT_FILES\" | xargs ls -l`\n   echo \"$SCRIPT_LISTING\" | cut -b 4 | grep -v -q x && \\\n      echo 'COMMIT REJECTED Found script files WITHOUT execute bit set:' && echo \"$SCRIPT_LISTING\" | grep ^-..- && exit 1\nfi\n\n########################################################\n# Tests 2/3/4/5. Make sure source does not have execute bit set\n########################################################\nTXT_FILE_PATTERN='\\.(ac|cl|c|h|txt|S|s|in|chr|conf|txt|md|asm|cin|dep|gost|legacy|macros|stub|m4|cu|bash_completion|zsh_completion|lst)(\\..+)?$'\nTXT_FILES=`git diff --cached --name-only | grep -E $TXT_FILE_PATTERN`\nTXT_FILES=\"$TXT_FILES\"`git diff --cached --name-only | grep -E ^doc/`\nif [ \"x$TXT_FILES\" != \"x\" ] ; then\n# 2. exec attrib\n   TXT_LISTING=`echo \"$TXT_FILES\" | xargs ls -l`\n   echo \"$TXT_LISTING\" | cut -b 4 | grep -q x && \\\n      echo 'COMMIT REJECTED Found src/text files WITH execute bit set:' && echo \"$TXT_LISTING\" | grep ^-..x && exit 1\n# 3. Trailing spaces\n   TXT_LISTING=`echo \"$TXT_FILES\" | xargs grep -l '[ ]$'`\n   if [ \"x$TXT_LISTING\" != \"x\" ] ; then\n      echo 'COMMIT REJECTED Found src/text files lines containing trailing whitespace:' && echo \"$TXT_LISTING\" && exit 1\n   fi\n# 4. DOS eol's\n   TXT_LISTING=`echo \"$TXT_FILES\" | xargs grep -lU $'\\x0D'`\n   if [ \"x$TXT_LISTING\" != \"x\" ] ; then\n      echo 'COMMIT REJECTED Found src/text files WITH DOS line endings:' && echo \"$TXT_LISTING\" && exit 1\n   fi\n# 5. missing final EOL\n   # this is by far the most costly test.  We should fine a more effiecent implementation.  It is not bad on\n   # a couple file commit, but if it is dozens or 100's of files, it is slow (the multi shelling of tail I guess)\n   # ** Found a much faster way, using perl, BUT perl may not be installed. Use the perl mode, if perl is there.\n   if [ -e /usr/bin/perl ] ; then\n      echo $TXT_FILES | \\\n         xargs perl -e '$r=0; foreach $n (@ARGV)\n                        {\n                          if (open(F,\"<\",$n)) { seek(F,-1,2); read(F,$c,1);\n                          if($c ne \"\\n\") { $r=1; print \"Missing final EOL in file $n\\n\"; }\n                          close(F); exit($r); }\n                        }'\n        if [ \"x$?\" != \"x0\" ] ; then echo 'COMMIT REJECTED Found src/text files missing final EOL:' && exit 1 ; fi\n   else\n      # slow but should be portable.\n      MISSING_EOF=\"\"\n      for f in $TXT_FILES; do if [ -e \"$f\" ]; then if [ -n \"$(tail -c 1 <\"$f\")\" ]; then echo \"missing final EOL in file $f\" && MISSING_EOF=\"Yup\" ; fi ; fi ; done\n      if [ \"x$MISSING_EOF\" != \"x\" ] ; then\n         echo 'COMMIT REJECTED Found src/text files missing final EOL:' && exit 1\n      fi\n   fi\nfi\n\nexit 0\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2216796875,
          "content": "language: c\ndist: bionic\nos: linux\n\njobs:\n  include:\n\n  # #### CPU formats test (gcc)\n  - os: linux\n    compiler: gcc\n    addons:\n      apt:\n        packages: &required\n          # John the Ripper required stuff\n          - libssl-dev\n          - zlib1g-dev\n          # Extra formats and performance\n          - yasm\n          - libgmp-dev\n          - libpcap-dev\n          - pkg-config\n          - libbz2-dev\n          # OpenMP for clang\n          - libiomp-dev\n\n  # #### CPU formats test (clang)\n  - os: linux\n    compiler: clang\n    addons:\n      apt:\n        packages: *required\n\n  # #### OpenCL formats test. Use Trusty (fglrx driver)\n  - os: linux\n    dist: trusty\n    compiler: gcc\n    addons:\n      apt:\n        packages:\n          # John the Ripper required stuff\n          - libssl-dev\n          - zlib1g-dev\n          # Extra formats and performance\n          - yasm\n          - libgmp-dev\n          - libpcap-dev\n          - pkg-config\n          - libbz2-dev\n          # OpenMP for clang\n          - libiomp-dev\n          # OpenCL\n          - fglrx-dev\n          - opencl-headers\n    env: OPENCL=\"yes\"\n\n  # #### MacOS CPU plus OpenCL formats test\n  - os: osx\n    osx_image: xcode9.4\n    env: OPENCL=\"yes\"\n\nscript:\n  - .travis/travis-ci.sh\n"
        },
        {
          "name": ".travis",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.615234375,
          "content": "## Contributing\n\nWhen contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.\n- If you have questions, please ask them first in the mailing list john-users at lists.openwall.com;\n- Use GitHub issues to keep track of ideas, enhancements, tasks, and bugs. NEVER as a support forum;\n\n## Bug Reports\n\nTry to be clear about your environment and what you are doing. If possible, share a sample hash or file that can be used to reproduce.\n\n## Source Code Style\n\nPlease refer to `doc/README.coding-style` for information on the subject.\n\nFor Jumbo, The maintainer recommends to format code using the following commands:\n```\n$ indent -kr -i4 -ts4 -nlp -nbbo -ncs -l119 -lc119 -bad -il0\n$ astyle --style=kr -t4 -U -H -p -xC119 -c -k3 -z2\n```\n\n## License\n\nJohn the Ripper is released under GNU GPL v2 \"or later\", with portions also available under more relaxed terms.\n\nSolar Designer's current preference is that new code contributions be licensed under very liberal terms:\n```\n/*\n * This software is Copyright (c) YEAR YOUR NAME <your at e-mail.address>,\n * and it is hereby released to the general public under the following terms:\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted.\n */\n```\nThis is a heavily cut-down “BSD license”. You may also include the warranty disclaimer.\n\n## Other sources of information\nFor various tips and tricks, see also [GitHub wiki](https://github.com/openwall/john/wiki/Assorted-development-notes) and [Openwall's wiki](https://openwall.info/wiki/john)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.27734375,
          "content": "\tJohn the Ripper copyright and license.\n\nJohn the Ripper password cracker,\nCopyright (c) 1996-2024 by Solar Designer and others\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nAs a special exception to the GNU General Public License terms,\npermission is hereby granted to link the code of this program, with or\nwithout modification, with any version of the OpenSSL library and/or any\nversion of unRAR, and to distribute such linked combinations.  You must\nobey the GNU GPL in all respects for all of the code used other than\nOpenSSL and unRAR.  If you modify this program, you may extend this\nexception to your version of the program, but you are not obligated to\ndo so.  (In other words, you may release your derived work under pure\nGNU GPL version 2 or later as published by the FSF.)\n\n(This exception from the GNU GPL is not required for the core tree of\nJohn the Ripper, but arguably it is required for -jumbo.)\n\n\n\tRelaxed terms for certain components.\n\nIn addition or alternatively to the license above, many components are\navailable to you under more relaxed terms (most commonly under cut-down\nBSD license) as specified in the corresponding source files.\n\nFurthermore, as the copyright holder for the bcrypt (Blowfish-based\npassword hashing) implementation found in John the Ripper, I have placed\na derived version of this implementation in the public domain.  This\nderived version may be obtained at:\n\n\thttps://www.openwall.com/crypt/\n\nThe intent is to provide modern password hashing for your servers and\nyour software (where the GPL restrictions could be a problem).\n\n\n\tCommercial licensing.\n\nCommercial licenses (non-GPL) are available upon request.\n\n\n\tCopyright holder contact information.\n\nFor the core John the Ripper tree:\n\nAlexander Peslyak aka Solar Designer <solar at openwall.com>\n\n(There are additional copyright holders for \"community enhanced\" -jumbo\nversions of John the Ripper.)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.93359375,
          "content": "[![Circle CI](https://circleci.com/gh/openwall/john/tree/bleeding-jumbo.svg?style=shield)](https://circleci.com/gh/openwall/john/tree/bleeding-jumbo)\n[![Downloads](https://img.shields.io/badge/Download-Windows%20Build-blue.svg)](https://github.com/openwall/john-packages/releases)\n[![License](https://img.shields.io/badge/License-GPL%20v2%2B-blue.svg)](https://github.com/openwall/john/blob/bleeding-jumbo/doc/LICENSE)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/m/openwall/john?color=yellow)\n![GitHub commits since tagged version](https://img.shields.io/github/commits-since/openwall/john/1.9.0-Jumbo-1?color=brown)\n\nJohn the Ripper\n===============\n\nThis is the community-enhanced, \"jumbo\" version of John the Ripper.\nIt has a lot of code, documentation, and data contributed by jumbo\ndevelopers and the user community.  It is easy for new code to be added\nto jumbo, and the quality requirements are low, although lately we've\nstarted subjecting all contributions to quite some automated testing.\nThis means that you get a lot of functionality that is not necessarily\n\"mature\", which in turn means that bugs in this code are to be expected.\n\nJohn the Ripper homepage is:\n\nhttps://www.openwall.com/john/\n\nIf you have any comments on this release or on JtR in general, please\njoin the john-users mailing list and post in there:\n\nhttps://www.openwall.com/lists/john-users/\n\nFor contributions to John the Ripper jumbo, please use pull requests on\nGitHub:\n\nhttps://github.com/openwall/john/blob/bleeding-jumbo/CONTRIBUTING.md\n\nIncluded below is basic John the Ripper core documentation.\n\n---\n\n##\tJohn the Ripper password cracker.\n\nJohn the Ripper is a fast password cracker, currently available for\nmany flavors of Unix, macOS, Windows, DOS, BeOS, and OpenVMS (the latter\nrequires a contributed patch).  Its primary purpose is to detect weak\nUnix passwords.  Besides several crypt(3) password hash types most\ncommonly found on various Unix flavors, supported out of the box are\nKerberos/AFS and Windows LM hashes, as well as DES-based tripcodes, plus\nhundreds of additional hashes and ciphers in \"-jumbo\" versions.\n\n\n##\tHow to install.\n\nSee [INSTALL](doc/INSTALL) for information on installing John on your system.\n\n\n##\tHow to use.\n\nTo run John, you need to supply it with some password files and\noptionally specify a cracking mode, like this, using the default order\nof modes and assuming that \"passwd\" is a copy of your password file:\n\n\tjohn passwd\n\nor, to restrict it to the wordlist mode only, but permitting the use\nof word mangling rules:\n\n\tjohn --wordlist=password.lst --rules passwd\n\nCracked passwords will be printed to the terminal and saved in the\nfile called $JOHN/john.pot (in the documentation and in the\nconfiguration file for John, \"$JOHN\" refers to John's \"home\ndirectory\"; which directory it really is depends on how you installed\nJohn).  The $JOHN/john.pot file is also used to not load password\nhashes that you already cracked when you run John the next time.\n\nTo retrieve the cracked passwords, run:\n\n\tjohn --show passwd\n\nWhile cracking, you can press any key for status, or 'q' or Ctrl-C to\nabort the session saving its state to a file ($JOHN/john.rec by\ndefault).  If you press Ctrl-C for a second time before John had a\nchance to complete handling of your first Ctrl-C, John will abort\nimmediately without saving.  By default, the state is also saved every\n10 minutes to permit for recovery in case of a crash.\n\nTo continue an interrupted session, run:\n\n\tjohn --restore\n\nThese are just the most essential things you can do with John.  For\na complete list of command line options and for more complicated usage\nexamples you should refer to OPTIONS and EXAMPLES, respectively.\n\nPlease note that \"binary\" (pre-compiled) distributions of John may\ninclude alternate executables instead of just \"john\".  You may need to\nchoose the executable that fits your system best, e.g. \"john-omp\" to\ntake advantage of multiple CPUs and/or CPU cores.\n\n\n##\tFeatures.\n\nJohn the Ripper is designed to be both feature-rich and fast.  It\ncombines several cracking modes in one program and is fully\nconfigurable for your particular needs (you can even define a custom\ncracking mode using the built-in compiler supporting a subset of C).\nAlso, John is available for several different platforms which enables\nyou to use the same cracker everywhere (you can even continue a\ncracking session which you started on another platform).\n\nOut of the box, John supports (and autodetects) the following Unix\ncrypt(3) hash types: traditional DES-based, \"bigcrypt\", BSDI extended\nDES-based, FreeBSD MD5-based (also used on Linux and in Cisco IOS), and\nOpenBSD Blowfish-based (now also used on some Linux distributions and\nsupported by recent versions of Solaris).  Also supported out of the box\nare Kerberos/AFS and Windows LM (DES-based) hashes, as well as DES-based\ntripcodes.\n\nWhen running on Linux distributions with glibc 2.7+, John 1.7.6+\nadditionally supports (and autodetects) SHA-crypt hashes (which are\nactually used by recent versions of Fedora and Ubuntu), with optional\nOpenMP parallelization (requires GCC 4.2+, needs to be explicitly\nenabled at compile-time by uncommenting the proper OMPFLAGS line near\nthe beginning of the Makefile).\n\nSimilarly, when running on recent versions of Solaris, John 1.7.6+\nsupports and autodetects SHA-crypt and SunMD5 hashes, also with\noptional OpenMP parallelization (requires GCC 4.2+ or recent Sun Studio,\nneeds to be explicitly enabled at compile-time by uncommenting the\nproper OMPFLAGS line near the beginning of the Makefile and at runtime\nby setting the OMP_NUM_THREADS environment variable to the desired\nnumber of threads).\n\n\"-jumbo\" versions add support for hundreds of additional hash and cipher\ntypes, including fast built-in implementations of SHA-crypt and SunMD5,\nWindows NTLM (MD4-based) password hashes, various macOS and Mac OS X\nuser password hashes, fast hashes such as raw MD5, SHA-1, SHA-256, and\nSHA-512 (which many \"web applications\" historically misuse for\npasswords), various other \"web application\" password hashes, various SQL\nand LDAP server password hashes, and lots of other hash types, as well\nas many non-hashes such as SSH private keys, S/Key skeykeys files,\nKerberos TGTs, encrypted filesystems such as macOS .dmg files and\n\"sparse bundles\", encrypted archives such as ZIP (classic PKZIP and\nWinZip/AES), RAR, and 7z, encrypted document files such as PDF and\nMicrosoft Office's - and these are just some examples.  To load some of\nthese larger files for cracking, a corresponding bundled *2john program\nshould be used first, and then its output fed into JtR -jumbo.\n\n\n##\tGraphical User Interface (GUI).\n\nThere is an official GUI for John the Ripper: Johnny.\n\nDespite the fact that Johnny is oriented onto JtR core, all basic\nfunctionality is supposed to work in all versions, including jumbo.\n\nJohnny is a separate program, therefore you need to have John the Ripper\ninstalled in order to use it.\n\nMore information about Johnny and its releases is on the wiki:\n\nhttps://openwall.info/wiki/john/johnny\n\n\n##\tDocumentation.\n\nThe rest of documentation is located in separate files, listed here in\nthe recommended order of reading:\n\n* [INSTALL](doc/INSTALL) - installation instructions\n* [OPTIONS](doc/OPTIONS) - command line options and additional utilities\n* [MODES](doc/MODES) - cracking modes: what they are\n* [CONFIG](doc/CONFIG) (*) - how to customize\n* [RULES](doc/RULES) (*) - wordlist rules syntax\n* [EXTERNAL](doc/EXTERNAL) (*) - defining an external mode\n* [EXAMPLES](doc/EXAMPLES) - usage examples - strongly recommended\n* [FAQ](doc/FAQ) - guess\n* [CHANGES](doc/CHANGES) (*) - history of changes\n* [CONTACT](doc/CONTACT) (*) - how to contact the author or otherwise obtain support\n* [CREDITS](doc/CREDITS) (*) - credits\n* [LICENSE](doc/LICENSE) - copyrights and licensing terms\n* [COPYING](doc/COPYING) - GNU GPL version 2, as referenced by LICENSE above\n\n(*) most users can safely skip these.\n\nThere are a lot of additional documentation files in jumbo's \"doc\"\ndirectory, which you'll also want to explore.\n\nHappy reading!\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0771484375,
          "content": "protobuf~=3.20\npycryptodome\nscapy\nparsimonious\nasn1crypto\ndpkt\npyhanko==0.20.1\n"
        },
        {
          "name": "run",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 1.908203125,
          "content": "# Redistribution and use in source and binary forms, with or without\n# modification, are permitted.\n#\n# There's ABSOLUTELY NO WARRANTY, express or implied.\n# -------------------------------------------------------------------------------\n# Nix shells are used create development environments which provide the necessary\n# tools/dependencies to develop/build software. The environment is typically\n# declared in a shell.nix file in the softwares root directory.\n#\n# To create the nix-shell, run: `nix-shell ./shell.nix`.\n#\n# This will place you in a development shell with the minimum required dependencies\n# to build openwall/john with opencl support.\n#\n# NOTE: the 'Official OpenCL runtime for Intel CPUs' is unfree software and\n# therefore, when invoking this shell, nix will require the $NIXPKGS_ALLOW_UNFREE=1\n# environment variable to be set. If you wish to create your shell with free software\n# only, then you can remove 'intel-ocl' entry from 'nativeBuildInputs' below. Please\n# note however if you are running and intel based system and remove intel-ocl then\n# you will not have opencl support when building openwall/john. For the avoidance of\n# doubt, this file does not contain any unfree software.\n#\n# More information about Nixos: https://nixos.org/\n# More information about nix-shell: https://nixos.org/manual/nix/stable/command-ref/nix-shell.html\n#\n# Copyright Jack Bizzell (lambdajack) 2023\n\n{ pkgs ? import <nixpkgs> {} }:\nlet\n\tperlEnv = pkgs.perl.withPackages (p: with p; [\n\t\tCompressRawLzma\n\t\tDigestMD4\n\t\tDigestSHA1\n\t\tGetoptLong\n\t\tperlldap\n\t]);\n\tpythonEnv = pkgs.python3.withPackages(p: with p; [\n\t\tdpkt\n\t\tscapy\n\t\tlxml\n\t\twrapPython\n\t]);\nin\npkgs.mkShell {\n\tnativeBuildInputs = with pkgs.buildPackages;\n\t\t[\n\t\t\topenssl libzip rocm-opencl-runtime opencl-headers\n\t\t\tbzip2 libpcap libgmpris libxcrypt gmp intel-ocl\n\t\t\tgcc zlib nss nspr libkrb5 re2 makeWrapper\n\t\t\tperlEnv pythonEnv\n\t\t];\n\tshellHook = ''\n\t\texport AS=$CC\n\t\texport LD=$CC\n\t'';\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}