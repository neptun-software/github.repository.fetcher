{
  "metadata": {
    "timestamp": 1736710444360,
    "page": 89,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andlabs/libui",
      "stars": 10747,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 3.220703125,
          "content": "version: 'build #{build}'\n\nenvironment:\n  matrix:\n    - arch: 386\n      libtype: shared\n      libfiles: libui.dll libui.lib\n      compiler: msvc2013\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    - arch: 386\n      libtype: static\n      libfiles: libui.lib\n      compiler: msvc2013\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    - arch: amd64\n      libtype: shared\n      libfiles: libui.dll libui.lib\n      compiler: msvc2013\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    - arch: amd64\n      libtype: static\n      libfiles: libui.lib\n      compiler: msvc2013\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013\n    - arch: 386\n      libtype: static\n      libfiles: libui.lib\n      compiler: mingw\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n    - arch: amd64\n      libtype: static\n      libfiles: libui.lib\n      compiler: mingw\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n\nplatform:\n  - x64\n\n# Note: AppVeyor tries to be \"helpful\" and splits cmd.exe scripts into their constitutent lines to check their error codes. There is no way to switch this off; for true multi-line scripts we have to use PowerShell. But we need to use vcvarsall.bat, so that's out of the question.\ninstall:\n  # Set Python Version\n  - set \"PYTHON_ROOT=C:\\python37-x64\"\n  - if %arch%==386 ( set \"PYTHON_ROOT=C:\\python37\" )\n  - set \"PATH=%PYTHON_ROOT%;%PYTHON_ROOT%\\Scripts;%PATH%\"\n  # Install Latest Meson\n  - pip install meson\n  # Install Ninja\n  - powershell -Command \"Invoke-WebRequest https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip -OutFile C:\\ninja-win.zip\"\n  - mkdir C:\\ninja\n  - powershell -Command \"Expand-Archive -LiteralPath C:\\ninja-win.zip -DestinationPath C:\\ninja\"\n  - set \"PATH=C:\\ninja;%PATH%\"\n  # Parameters for the build_script phase, to reduce their noise.\n  - set \"mingwPath=C:\\msys64\\mingw64\\bin\"\n  - set vcvarsallArch=x86\n  - if %arch%==386 ( set \"mingwPath=C:\\msys64\\mingw32\\bin\" )\n  - if %arch%==386 ( set vcvarsallArch=amd64 )\n\nbuild_script:\n  - if %compiler%==mingw ( set \"PATH=%mingwPath%;%PATH%\" )\n  - if not %compiler%==mingw ( call \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\vcvarsall.bat\" %vcvarsallArch% )\n  - meson setup build --buildtype=release --default-library=%libtype%\n  - ninja -C build\n\nafter_build:\n  - set \"version=%APPVEYOR_REPO_BRANCH%\"\n  - if %APPVEYOR_REPO_TAG%==true ( set \"version=%APPVEYOR_REPO_TAG_NAME%\" )\n  - set \"artifact=%version%-windows-%arch%-%compiler%-%libtype%\"\n  - cd build\\meson-out\n  # TODO msvc only?\n  - if %libtype%==static ( ren libui.a libui.lib )\n  - copy ..\\..\\ui.h .\n  - copy ..\\..\\ui_windows.h .\n  # remove unnecessary files\n  # TODO should we do this on Azure too?\n  - del libui.exp\n  - 7z a \"%APPVEYOR_BUILD_FOLDER%\\libui-%artifact%.zip\" %libfiles% ui.h ui_windows.h\n  - 7z a \"%APPVEYOR_BUILD_FOLDER%\\examples-%artifact%.zip\" controlgallery.exe cpp-multithread.exe datetime.exe drawtext.exe histogram.exe tester.exe timer.exe\n  - del ui.h ui_windows.h\n\nartifacts:\n  - path: libui-*.zip\n    name: libui\n  - path: examples-*.zip\n    name: examples\n\ndeploy:\n  provider: GitHub\n  artifact: libui, examples\n  auth_token:\n    secure: li92W7mFAC8HbAVeZN6Ugmo5H1GzKSjr6DXlMniLcCRspKmi2Nz1nlslSa+9sLfo\n  on:\n    appveyor_repo_tag: true # deploy on tag push only\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.4541015625,
          "content": "# Contributing to libui\n\nlibui is an open source project that openly accepts contributions. I appreciate your help!\n\n## Rules for contributing code\n\nWhile libui is open to contributions, a number of recent, significantly large contributions and uncontributed forks have recently surfaced that do not present themselves in a form that makes it easy for libui to accept them. In order to give your contribution a high chance of being accepted into libui, please keep the following in mind as you prepare your contribution.\n\n### Commit messages and pull request description\n\nlibui does not enforce rules about the length or detail that a commit message. I'm not looking for an essay. However, single-word descriptions of nontrivial changes are *not* acceptable. I should be able to get a glimpse of what a commit does from the commit message, even if it's just one sentence to describe a trivial change. (Yes, I know I haven't followed this rule strictly myself, but I try not to break it too.) And a commit message should encompass everything; typically, I make a number of incremental commits toward a feature, so the commit messages don't have to be too long to explain everything.\n\nYour pull request description, on the other hand, must be a summary of the sum total of all the changes made to libui. Don't just drop a pull request on me with a one-line-long elevator pitch of what you added. Describe your proposed API changes, implementation requirements, and any important consequences of your work.\n\n### Code formatting\n\nlibui uses K&R C formatting rules for overall code structure: spaces after keywords like `if`, `{` on the same line as a statement with a space, `{` on its own line after a function or method signature (even those inside the class body), no space after the name of a function, etc.\n\nUse hard tabs, NOT spaces, for indentation. I use a proportional-width font and my text editor doesn't set tabs to a multiple of the space width, so I *will* be able to tell. If you use a fixed-width font, I suggest setting a tab width of 4 spaces per tab, but don't put diagrams in comments with hard tabs, because not everyone does this.\n\nExpressions should have a space around binary operators, and use parentheses where it would help humans gather the meaning of an expression, regardless of whether a computer could tell what is correct.\n\nWhen breaking expressions into multiple lines, always break *after* an operator, such as `,` or `&&`.\n\nThere should be a newline between a function's variables and a function's code. After that, you can place newlines to delimit different parts of a function, but don't go crazy.\n\nIn the event you are unsure of something, refer to existing libui code for examples. I may wind up fixing minor details later anyway, so don't fret about getting minor details right the first time.\n\n### Naming\n\nlibui uses camel-case for naming, with a handful of very specific exceptions (namely GObject method names, where GObject itself enforces the naming convention).\n\nAll public API names should begin with `ui` and followed by a capital letter. All public struct field names should begin with a capital letter. This is identical to the visibiilty rules of Go, assuming a package name of `ui`.\n\nPrivate API names — specifcally those used by more than one source file — should begin with `uipriv` and be followed by a capital letter. This avoids namespace collisions in static libraries.\n\nStatic functions and static objects do not have naming restrictions.\n\nAcronyms should **NOT** be mixed-case. `http` for the first word in a camel-case name, `HTTP` for all else, but **NEVER** `Http`. This is possibly the only aspect of the controversial nature of code style that I consider indefensibly stupid.\n\n### API documentation\n\n(TODO I am writing an API documentation tool; once that becomes stable enough I can talk about documenting libui properly. You'll see vestiges of it throughout ui.h, though.)\n\n### Other commenting\n\n(TODO write this part)\n\n### Compatibility\n\nlibui takes backward compatibility seriously. Your code should not break the current compatibility requirements. All platforms provide a series of macros, defined in the various `uipriv_*.h` files (or `winapi.hpp` on Windows), that specify the minimum required version. If you find yourself needing to remove these or ignore resultant warnings or errors, you're probably breaking compatibility.\n\nChoosing to drop older versions of Windows, GTK+, and OS X that I could have easily continued to support was not done lightly. If you want to discuss dropping support for an older version of any of these for the benefit of libui, file an issue pleading your case (see below).\n\nGTK+ versions are harder to drop because I am limited by Linux distribution packaging. In general, I will consider bumping GTK+ versions on a new Ubuntu LTS release, choosing the earliest version available on the major distributions at the time of the *previous* Ubuntu LTS release. As of writing, the next milestone will be *after* April 2018, and the target GTK+ version appears to be 3.18, judging by Ubuntu 16.04 LTS alone. This may be bumped back depending on other distros (or it may not be bumped at all), but you may wish to keep this in mind as you write.\n\n(TODO talk about future.c/.cpp/.m files)\n\nAs for language compatibility, libui is written in C99. I have no intention of changing this.\n\nAs for build system compatibility, libui uses CMake 3.1.0. If you wish to bump the version, file an issue pleading your case (but see below).\n\n**If you do plead your case**, keep in mind that \"it's old\" is not a sufficient reason to drop things. If you can prove that **virtually no one** uses the minimum version anymore, then that is stronger evidence. The best evidence, however, is that not upgrading will hold libui back in some significant way — but beware that there are some things I won't add to libui itself.\n\n### Windows-specific notes\n\nThe Windows backend of libui is written in C++ using C++11.\n\nDespite using C++, please refrain from using the following:\n\n- using C++ in ui_windows.h (this file should still be C compatible)\n- smart pointers\n- namespaces\n- `using namespace`\n- ATL, MFC, WTL\n\nThe following are not recommended, for consistency with the rest of libui:\n\n- variable declarations anywhere in a function (keep them all at the top)\n- `for (int x...` (C++11 foreach syntax is fine, though)\n- omitting the `struct` on type names for ordinary structs\n\nThe format of a class should be\n\n```c++\nclass name : public ancestor {\n\tint privateVariable;\n\t// etc.\npublic:\n\t// public stuff here\n};\n```\n\n### GTK+-specific notes\n\nAvoid GNU-specific language features. I build with strict C99 conformance.\n\n### OS X-specific notes\n\nAvoid GNU-specific/clang-specific language features. I build with strict C99 conformance.\n\nlibui is presently **not** ARC-compliant. Features that require ARC should be avoided for now. I may consider changing this in the future, but it will be a significant change.\n\nTo ensure maximum compiler output in the event of a coding error, there should not be any implicit method calls in Objective-C code. For instance, don't do\n\n```objective-c\n[[array objectAtIndex:i] method]\n```\n\nInstead, cast the result of `objectAtIndex:` to the appropriate type, and then call the method. (TODO learn about, then decide a policy on, soft-generics on things other than `id`)\n\nThe format of a class should be\n\n```objective-c\n@interface name : parent<protocols> {\n\t// ivars\n}\n// properties\n- (ret)method:(int)arg;\n// more methods\n@end\n\n@implementation name\n\n- (ret)method:(int)arg\n{\n\t// note the lack of semicolon\n}\n\n@end\n```\n"
        },
        {
          "name": "Compatibility.md",
          "type": "blob",
          "size": 5.45703125,
          "content": "# Useful things in newer versions\n\n## Windows\n### Windows 7\nhttp://channel9.msdn.com/blogs/pdc2008/pc43\n\nTODO look up PDC 2008 talk \"new shell user interface\"\n\n- new animation and text engine\n- ribbon control (didn't this have some additional license?)\n- LVITEM.piColFmt\n\n### Windows 8\n\n### Windows 8.1\n\n### Windows 10\n\n## GTK+\nTODO what ships with Ubuntu Quantal (12.10)?\n\n### GTK+ 3.6\nships with: Ubuntu Raring (13.04)\n\n- GtkEntry and GtkTextView have input purposes and input hints for external input methods but do not change input themselves\n\t- according to Company, we connect to insert-text for that\n- GtkLevelBar\n- GtkMenuButton\n- **GtkSearchEntry**\n\n### GTK+ 3.8\nships with: Ubuntu Saucy (13.10)\n\nNot many interesting new things to us here, unless you count widget-internal tickers and single-click instead of double-click to select list items (a la KDE)... and oh yeah, also widget opacity.\n\n### GTK+ 3.10\nships with: **Ubuntu Trusty (14.04 LTS)**\n<br>GLib version: 2.40\n\n- tab character stops in GtkEntry\n- GtkHeaderBar\n\t- intended for titlebar overrides; GtkInfoBar is what I keep thinking GtkHeaderBar is\n- **GtkListBox**\n- GtkRevealer for smooth animations of disclosure triangles\n- GtkSearchBar for custom search popups\n- **GtkStack and GtkStackSwitcher**\n- titlebar overrides (seems to be the hot new thing)\n\n### GTK+ 3.12\nships with: Ubuntu Utopic (14.10)\n<br>GLib version: 2.42\n\n- GtkActionBar (basically like the bottom-of-the-window toolbars in Mac programs)\n- gtk_get_locale_direction(), for internationalization\n- more control over GtkHeaderBar\n- **GtkPopover**\n\t- GtkPopovers on GtkMenuButtons\n- GtkStack signaling\n- **gtk_tree_path_new_from_indicesv()** (for when we add Table if we have trees too)\n\n### GTK+ 3.14\nships with: **Debian Jessie**, Ubuntu Vivid (15.04)\n<br>GLib version: Debian: 2.42, Ubuntu: 2.44\n\n- gestures\n- better GtkListbox selection handling\n- more style classes (TODO also prior?)\n- delayed switch changes on GtkSwitch\n\n### GTK+ 3.16\nships with: Ubuntu Wily (15.10)\n<br>GLib version: 2.46\n\n- gtk_clipboard_get_default() (???)\n- **GtkGLArea**\n- proper xalign and yalign for GtkLabel; should get rid of runtime deprecation warnings\n- better control of GtkListBox model-based creation (probably not relevant but)\n- GtkModelButton (for GActions; probably not relevant?)\n- wide handles on GtkPaned\n- GtkPopoverMenu\n- IPP paper names in GtkPaperSize (TODO will this be important for printing?)\n- multiple matches in GtkSearchEntry (TODO evaluate priority)\n- **GtkStackSidebar**\n-  GTK_STYLE_CLASS_LABEL, GTK_STYLE_CLASS_MONOSPACE, GTK_STYLE_CLASS_STATUSBAR, GTK_STYLE_CLASS_TOUCH_SELECTION, GTK_STYLE_CLASS_WIDE (TODO figure out which of these are useful)\n- GtkTextView: extend-selection\n- GtkTextView: font fallbacks\n\n### GTK+ 3.18\n\n### GTK+ 3.20\n\n## Cocoa\n### Mac OS X 10.8\n\n- Foundation ([full details](https://developer.apple.com/library/mac/releasenotes/Foundation/RN-FoundationOlderNotes/#//apple_ref/doc/uid/TP40008080-TRANSLATED_CHAPTER_965-TRANSLATED_DEST_999B))\n\t- NSDateComponents supports leap months\n\t- NSNumberFormatter and NSDateFormatter default to 10.4 behavior by default (need to explicitly do this on 10.7)\n\t- **NSUserNotification and NSUserNotificationCenter for Growl-style notifications**\n\t- better linguistic triggers for Spanish and Italian\n\t- NSByteCountFormatter\n- AppKit ([full details](https://developer.apple.com/library/mac/releasenotes/AppKit/RN-AppKitOlderNotes/#X10_8Notes))\n\t- view-based NSTableView/NSOutlineView have expansion tooltips\n\t- NSScrollView magnification\n\t- Quick Look events; TODO see if they conflict with keyboard handling in Area\n\t- NSPageController (maybe useful?)\n\t- not useful for package UI, but may be useful for a new library (probably not by me): NSSharingService\n\t- NSOpenPanel and NSSavePanel are now longer NSPanels or NSWindows in sandboxed applications; this may be an issue should anyone dare to enable sandboxing on a program that uses package ui\n\t- NSTextAlternatives\n\t- -[NSOpenGLContext setFullScreen] now ineffective\n\t- +[NSColor underPageBackgroundColor]\n\n### Mac OS X 10.9\n\n- Foundation ([full details](https://developer.apple.com/library/mac/releasenotes/Foundation/RN-Foundation/))\n\t- system-provided progress reporting/cancellation support\n\t- NSURLComponents\n\t- **NSCalendar, NSDateFormatter, and NSNumberFormatter are now thread-safe**\n\t- various NSCalendar and NSDateComponents improvements\n- AppKit ([full details](https://developer.apple.com/library/mac/releasenotes/AppKit/RN-AppKit/))\n\t- sheet handling is now block-based, queued, and in NSWindow; the delegate-based NSApplication API will still exist, except without the queue\n\t- similar changes to NSAlert\n\t- **return value changes to NSAlert**\n\t- window visibility APIs (occlusion)\n\t- NSApplicationActivationPolicyAccessory\n\t- fullscreen toolbar behavior changes\n\t- status items for multiple menu bars\n\t- better NSSharingService support\n\t- a special accelerated scrolling mode, Responsive Scrolling; won't matter for us since I plan to support the scroll wheel and it won't\n\t- NSScrollView live scrolling notifications\n\t- NSScrollView floating (anchored/non-scrolling) subviews\n\t- better multimonitor support\n\t- better key-value observing for NSOpenPanel/NSSavePanel (might want to look this up to see if we can override some other juicy details... TODO)\n\t- better accessory view key-view handling in NSOpenPanel/NSSavePanel\n\t- NSAppearance\n\t- **-[NSTableView moveRowAtIndex:toIndex:] bug regarding first responders fixed**\n\t- view-specific RTL overrides\n\n### Mac OS X 10.10\n\n### Mac OS X 10.11\n* **NSLayoutGuide**\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1279296875,
          "content": "Copyright (c) 2014 Pietro Gagliardi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n(this is called the MIT License or Expat License; see http://www.opensource.org/licenses/MIT)\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 11.1357421875,
          "content": "# Old News\n\n* **27 November 2016**\n\t* Decided to split the table stuff into its own branch. It will be developed independently of everything else, along with a few other features.\n\n* **2 November 2016**\n\t* Added two new functions to replace the deleted `uiWindowPosition()` and friends: `uiAreaBeginUserWindowMove()` and `uiAreaBeginUserWindowResize()`. When used in a `uiAreaHandler.Mouse()` event handler, these let you initiate a user-driven mouse move or mouse resize of the window at any point in a uiArea.\n\n* **31 October 2016**\n\t* @krakjoe noticed that I accidentally used thread-unsafe code in uiQueueMain() on Unix. Fixed.\n\n* **24 October 2016**\n\t* `uiWindowSetContentSize()` on Unix no longer needs to call up the GTK+ main loop. As a result, bugs related to strange behavior using that function (and the now-deleted `uiWindowSetPosition()` and `uiWindowCenter()`) should go away. I'll need to go through the bugs to verify as much, though.\n\n* **22 October 2016**\n\t* Due to being unable to guarantee they will work (especially as we move toward capability-driven window systems like Wayland), or being unable to work without hacking that breaks other things, the following functions have been removed: `uiWindowPosition()`, `uiWindowSetPosition()`, `uiWindowCenter()`, and `uiWindowOnPositionChanged()`. Centering may come back at some point in the future, albeit in a possibly restricted form. A function to initiate a user move when a part of a uiArea is clicked will be provided soon.\n\n* **21 October 2016**\n\t* `uiDrawTextWeightUltraBold` is now spelled correctly. Thanks to @krakjoe.\n\n* **18 June 2016**\n\t* Help decide [the design of tables and trees in libui](https://github.com/andlabs/libui/issues/159); the implementation starts within the next few days, if not tomorrow!\n\n* **17 June 2016**\n\t* **CMake 3.1.0 is now required.** This is due to CMake's rapid development pace in the past few years adding things libui needs to build on as many systems as possible. If your OS is supported by libui but its repositories ship with an older version of CMake, you will need to find an updated one somewhere.\n\t* Please help [plan out a better menu API](https://github.com/andlabs/libui/issues/152).\n\t* `uiMainSteps()` no longer takes any arguments and no longer needs to invoke a function to do the work. You still need to call it, but once you do, it will return immediately and you can then get right to your main loop.\n\t* **CMake 3.1.0 is now required.** This is due to CMake's rapid development pace in the past few years adding things libui needs to build on as many systems as possible. If your OS is supported by libui but its repositories ship with an older version of CMake, you will need to find an updated one somewhere.\n\t* Added `uiNewVerticalSeparator()` to complement `uiNewHorizontalSeparator()`.\n\n* **16 June 2016**\n\t* Added `uiWindowContentSize()`, `uiWindowSetContentSize()`, and `uiWindowOnContentSizeChanged()` methods for manipulating uiWindow content sizes. Note the use of \"content size\"; the size you work with does NOT include window decorations (titlebars, menus, etc.).\n\t* Added `uiWindowFullscreen()` and `uiWindowSetFullscreen()` to allow making fullscreen uiWindows, taking advantage of OS facilities for fullscreen and without changing the screen resolution (!).\n\t* Added `uiWindowBorderless()` and `uiWindowSetBorderless()` for allowing borderless uiWindows.\n\t* Added `uiMainSteps()`. You call this instead of `uiMain()` if you want to run the main loop yourself. You pass in a function that will be called; within that function, you call `uiMainStep()` repeatedly until it returns 0, doing whatever you need to do in the meantime. (This was needed because just having `uiMainStep()` by itself only worked on some systems.)\n\t* Added `uiProgressBarValue()` and allowed passing -1 to `uiProgressBarSetValue()` to make an indeterminate progress bar. Thanks to @emersion.\n\n* **15 June 2016**\n\t* Added `uiFormDelete()`; thanks to @emersion.\n\t* Added `uiWindowPosition()`, `uiWindowSetPosition()`, `uiWindowCenter()`, and `uiWindowOnPositionChanged()`, methods for manipulating uiWindow position.\n\n* **14 June 2016**\n\t* uiDarwinControl now has a `ChildVisibilityChanged()` method and a corresponding `NotifyVisibilityChanged()` function that is called by the default show/hide handlers. This is used to make visibility changes work on OS X; uiBox, uiForm, and uiGrid all respect these now.\n\t* The same has been done on the Windows side as well.\n\t* Hiding and showing controls and padding calculations are now correct on Windows at long last.\n\t* Hiding a control in a uiForm now hides its label on all platforms.\n\n* **13 June 2016**\n\t* `intmax_t` and `uintmax_t` are no longer used for libui API functions; now we use `int`. This should make things much easier for bindings. `int` should be at least 32 bits wide; this should be sufficient for all but the most extreme cases.\n\n* **12 June 2016**\n\t* Added `uiGrid`, a new container control that arranges controls in rows and columns, with stretchy (\"expanding\") rows, stretchy (\"expanding\") columns, cells that span rows and columns, and cells whose content is aligned in either direction rather than just filling. It's quite powerful, is it? =P\n\n* **8 June 2016**\n\t* Added `uiForm`, a new container control that arranges controls vertically, with properly aligned labels on each. Have fun!\n\n* **6 June 2016**\n\t* Added `uiRadioButtonsSelected()`, `uiRadioButtonsSetSelected()`, and `uiRadioButtonsOnSelected()` to control selection of a radio button and catch an event when such a thing happens.\n\n* **5 June 2016**\n\t* **Alpha 3.1 is here.** This was a much-needed update to Alpha 3 that changes a few things:\n\t\t* **The build system is now cmake.** cmake 2.8.11 or higher is needed.\n\t\t* Static linking is now fully possible.\n\t\t* MinGW linking is back, but static only.\n\t* Added `uiNewPasswordEntry()`, which creates a new `uiEntry` suitable for entering passwords.\n\t* Added `uiNewSearchEntry()`, which creates a new `uiEntry` suitable for searching. On some systems, the `OnChanged()` event will be slightly delayed and/or combined, to produce a more natural feel when searching.\n\n* **29 May 2016**\n\t* **Alpha 3 is here!** Get it [here](https://github.com/andlabs/libui/releases/tag/alpha3).\n\t* The next packaged release will introduce:\n\t\t* uiGrid, another way to lay out controls, a la GtkGrid\n\t\t* uiOpenGLArea, a way to render OpenGL content in a libui uiArea\n\t\t* uiTable, a data grid control that may or may not have tree facilities (if it does, it will be called uiTree instead)\n\t\t* a complete, possibly rewritten, drawing and text rendering infrastructure\n\t* Thanks to @pcwalton, we can now statically link libui! Simply do `make STATIC=1` instead of just `make`.\n\t\t* On Windows you must link both `libui.lib` and `libui.res` AND provide a Common Controls 6 manifest for output static binaries to work properly.\n\n* **28 May 2016**\n\t* As promised, **the minimum system requirements are now OS X 10.8 and GTK+ 3.10 for OS X and Unix, respectively**.\n\n* **26 May 2016**\n\t* Two OS X-specific functions have been added: `uiDarwinMarginAmount()` and `uiDarwinPaddingAmount()`. These return the amount of margins and padding, respectively, to give to a control, and are intended for container implementations. These are suitable for the constant of a NSLayoutConstraint. They both take a pointer parameter that is reserved for future use and should be `NULL`.\n\n* **25 May 2016**\n\t* uiDrawTextLayout attributes are now specified in units of *graphemes* on all platforms. This means characters as seen from a user's perspective, not Unicode codepoints or UTF-8 bytes. So a long string of combining marker codepoints after one codepoint would still count as one grapheme.\n\n* **24 May 2016**\n\t* You can now help choose [a potential new build system for libui](https://github.com/andlabs/libui/issues/62).\n\t* Tomorrow I will decide if OS X 10.7 will also be dropped alongside GTK+ 3.4-3.8 this Saturday. Stay tuned.\n\t* As promised, `uiCombobox` is now split into `uiCombobox` for non-editable comboboxes and `uiEditableCombobox` for editable comboboxes. Mind the function changes as well :)\n\t* There is a new function `uiMainStep()`, which runs one iteration of the main loop. It takes a single boolean argument, indicating whether to wait for an event to occur or not. It returns true if an event was processed (or if no event is available if you don't want to wait) and false if the event loop was told to stop (for instance, `uiQuit()` was called).\n\n* **23 May 2016**\n\t* Fixed surrogate pair drawing on OS X.\n\n* **22 May 2016**\n\t* Two more open questions I'd like your feedback on are available [here](https://github.com/andlabs/libui/issues/48) and [here](https://github.com/andlabs/libui/issues/25).\n\t* Sometime in the next 48 hours (before 23:59 EDT on 24 May 2016) I will split `uiCombobox` into two separate controls, `uiCombobox` and `uiEditableCombobox`, each with slightly different events and \"selected item\" mechanics. Prepare your existing code.\n\t* Removed `uiControlVerifyDestroy()`; that is now part of `uiFreeControl()` itself.\n\t* Added `uiPi`, a constant for π. This is provided for C and C++ programmers, where there is no standard named constant for π; bindings authors shouldn't need to worry about this.\n\t* Fixed uiMultilineEntry not properly having line breaks on Windows.\n\t* Added `uiNewNonWrappingMultilineEntry()`, which creates a uiMultilineEntry that scrolls horizontally instead of wrapping lines. (This is not documented as being changeable after the fact on Windows, hence it's a creation-time choice.)\n\t* uiAreas on Windows and some internal Direct2D areas now respond to `WM_PRINTCLIENT` properly, which should hopefully increase the quality of screenshots.\n\t* uiDateTimePicker on GTK+ works properly on RTL layouts and no longer disappears off the bottom of the screen if not enough room is available. It will also no longer be marked for localization of the time format (what the separator should be and whether to use 24-hour time), as that information is not provided by the locale system. :(\n\t* Added `uiUserBugCannotSetParentOnToplevel()`, which should be used by implementations of toplevel controls in their `SetParent()` implementations. This will also be the beginning of consolidating common user bug messages into a single place, though this will be one of the only few exported user bug functions.\n\t* uiSpinbox and uiSlider now merely swap their min and max if min ≥ max. They will no longer panic and do nothing, respectively.\n\t* Matrix scaling will no longer leave the matrix in an invalid state on OS X and GTK+.\n\t* `uiMultilineEntrySetText()` and `uiMutlilineEntryAppend()` on GTK+ no longer fire `OnChanged()` events.\n\n* **21 May 2016**\n\t* I will now post announcements and updates here.\n\t* Now that Ubuntu 16.04 LTS is here, no earlier than next Saturday, 28 May 2016 at noon EDT, **I will bump the minimum GTK+ version from 3.4 to 3.10**. This will add a lot of new features that I can now add to libui, such as search-oriented uiEntries, lists of arbitrary control layouts, and more. If you are still running a Linux distribution that doesn't come with 3.10, you will either need to upgrade or use jhbuild to set up a newer version of GTK+ in a private environment.\n\t* You can decide if I should also drop OS X 10.7 [here](https://github.com/andlabs/libui/issues/46).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.60546875,
          "content": "# libui: a portable GUI library for C\n\nThis README is being written.<br>\n[![Build Status, Azure Pipelines](https://dev.azure.com/andlabs/libui/_apis/build/status/andlabs.libui?branchName=master)](https://dev.azure.com/andlabs/libui/_build/latest?definitionId=1&branchName=master)<br>\n[![Build Status, AppVeyor](https://ci.appveyor.com/api/projects/status/ouyk78c52mmisa31/branch/master?svg=true)](https://ci.appveyor.com/project/andlabs/libui/branch/master)\n\n## Status\n\nIt has come to my attention that I have not been particularly clear about how usable or feature-complete libui is, and that this has fooled many people into expecting more from libui right this moment than I have explicitly promised to make available. I apologize for not doing this sooner.\n\nlibui is currently **mid-alpha** software. Much of what is currently present runs stabily enough for the examples and perhaps some small programs to work, but the stability is still a work-in-progress, much of what is already there is not feature-complete, some of it will be buggy on certain platforms, and there's a lot of stuff missing. In short, here's a list of features that I would like to add to libui, but that aren't in yet:\n\n- trees\n- clipboard support, including drag and drop\n- more and better dialogs\n- printing\n- accessibility for uiArea and custom controls\n- document-based programs\n- tighter OS integration (especially for document-based programs), to allow programs to fully feel native, rather than merely look and act native\n- better support for standard dialogs and features (search bars, etc.)\n- OpenGL support\n\nIn addition, [here](https://github.com/andlabs/libui/issues?utf8=%E2%9C%93&q=master+in%3Atitle+is%3Aissue+is%3Aopen) is a list of issues generalizing existing problems.\n\nFurthermore, libui is not properly fully documented yet. This is mainly due to the fact that the API was initially unstable enough so as to result in rewriting documentation multiple times, in addition to me not being happy with really any existing C code documentation tool. That being said, I have started to pin down my ideal code documentation style in parts of `ui.h`, most notably in the uiAttributedString APIs. Over time, I plan on extending this to the rest of the headers. You can also use [the documentation for libui's Go bindings](https://godoc.org/github.com/andlabs/ui) as a reference, though it is somewhat stale and not optimally written.\n\nBut libui is not dead; I am working on it whenever I can, and I hope to get it to a point of real quality soon!\n\n## News\n\n*Note that today's entry (Eastern Time) may be updated later today.*\n\n* **7 April 2019**\n\t* **The build system has been switched to Meson.** See below for instructions. This change was made because the previous build system, CMake, caused countless headaches over trivial issues. Meson was chosen due to how unproblematic setting up libui's build just right was, as well as having design goals that are by coincidence closely aligned with what libui wants.\n\t* Travis CI has been replaced with Azure Pipelines and much of the AppVeyor CI configuration was integrated into the Azure Pipelines configuration. This shouldn't affect most developers.\n\n* **1 September 2018**\n\t* **Alpha 4.1 is here.** This is an emergency fix to Alpha 4 to fix `uiImageAppend()` not working as documented. It now works properly, with one important difference you'll need to care about: **it now requires image data to be alpha-premultiplied**. In addition, `uiImage` also is implemented slightly more nicely now, and `ui.h` has minor documentation typo fixes.\n\t* Alpha 4.1 also tries to make everything properly PIC-enabled.\n\n* **10 August 2018**\n\t* **Alpha 4 is finally here.** Everything from Alpha 3.5 and what's listed below is in this release; the two biggest changes are still the new text drawing API and new uiTable control. In between all that is a whole bunch of bugfixes, and hopefully more stability too. Thanks to everybody who helped contribute!\n\t* Alpha 4 should hopefully also include automated binary releases via CI. Thanks to those who helped set that up!\n\n* **8 August 2018**\n\t* Finally introduced an API for loading images, `uiImage`, and a new control, `uiTable`, for displaying tabular data. These provide enough basic functionality for now, but will be improved over time. You can read the documentation for the new features as they are [here](https://github.com/andlabs/libui/blob/f47e1423cf95ad7b1001663f3381b5a819fc67b9/uitable.h). Thanks to everyone who helped get to this point, in particular @bcampbell for the initial Windows code, and to everyone else for their patience!\n\n* **30 May 2018**\n\t* Merged the previous Announcements and Updates section of this README into a single News section, and merged the respective archive files into a single NEWS.md file.\n\n* **16 May 2018**\n\t* Thanks to @parro-it and @msink, libui now has better CI, including AppVeyor for Windows CI, and automated creation of binary releases when I make a tagged release.\n\n* **13 May 2018**\n\t* Added new functions to work with uiDateTimePickers: `uiDateTimePickerTime()`, `uiDateTimePickerSetTime()`, and `uiDateTimePickerOnChanged()`. These operate on standard `<time.h>` `struct tm`s. Thanks @cody271!\n\t* Release builds on Windows with MSVC should be fixed now; thanks @l0calh05t, @slahn, @mischnic, and @zentner-kyle.\n\n* **12 May 2018**\n\t* GTK+ and OS X now have a cleaner build process for static libraries which no longer has intermediate files and differing configurations. As a result, certain issues should no longer be present. New naming rules for internal symbols of libui have also started being drafted; runtime symbols and edge cases still need to be handled (and the rules applied to Windows) before this can become a regular thing.\n\n* **2 May 2018**\n\t* On Windows, you no longer need to carry around a `libui.res` file with static builds. You do need to link in the appropriate manifest file, such as the one in the `windows/` folder (I still need to figure out exactly what is needed apart from the Common Controls v6 dependency, or at least to create a complete-ish template), or at least include it alongside your executables. This also means you should no longer see random cmake errors when building the static libraries.\n\n* **18 April 2018**\n\t* Introduced a new `uiTimer()` function for running code on a timer on the main thread. (Thanks to @cody271.)\n\t* Migrated all code in the `common/` directory to use `uipriv` prefixes for everything that isn't `static`. This is the first step toward fixing static library oddities within libui, allowing libui to truly be safely used as either a static library or a shared library.\n\n* **18 March 2018**\n\t* Introduced an all-new formatted text API that allows you to process formatted text in ways that the old API wouldn't allow. You can read on the whole API [here](https://github.com/andlabs/libui/blob/8944a3fc5528445b9027b1294b6c86bae03eeb89/ui_attrstr.h). There is also a new examples for it: `drawtext`, which shows the whole API at a glance. It doesn't yet support measuring or manipulating text, nor does it currently support functions that would be necessary for things like text editors; all of this will be added back later.\n\t* libui also now uses my [utf library](https://github.com/andlabs/utf) for UTF-8 and UTF-16 processing, to allow consistent behavior across platforms. This usage is not completely propagated throughout libui, but the Windows port uses it in most places now, and eventually this will become what libui will use throughout.\n\t* Also introduced a formal set of contribution guidelines, see `CONTRIBUTING.md` for details. They are still WIP.\n\n* **17 February 2018**\n\t* The longstanding Enter+Escape crashes on Windows have finally been fixed (thanks to @lxn).\n\t* **Alpha 3.5 is now here.** This is a quickie release primiarly intended to deploy the above fix to package ui itself. **It is a partial binary release; sorry!** More new things will come in the next release, which will also introduce semver (so it will be called v0.4.0 instead).\n\t* Alpha 3.5 also includes a new control gallery example. The screenshots below have not been updated yet.\n\n*Old announcements can be found in the NEWS.md file.*\n\n## Runtime Requirements\n\n* Windows: Windows Vista SP2 with Platform Update or newer\n* Unix: GTK+ 3.10 or newer\n* Mac OS X: OS X 10.8 or newer\n\n## Build Requirements\n\n* All platforms:\n\t* [Meson](https://mesonbuild.com/) 0.48.0 or newer\n\t* Any of Meson's backends; this section assumes you are using [Ninja](https://ninja-build.org/), but there is no reason the other backends shouldn't work.\n* Windows: either\n\t* Microsoft Visual Studio 2013 or newer (2013 is needed for `va_copy()`) — you can build either a static or a shared library\n\t* MinGW-w64 (other flavors of MinGW may not work) — **you can only build a static library**; shared library support will be re-added once the following features come in:\n\t\t* [Isolation awareness](https://msdn.microsoft.com/en-us/library/aa375197%28v=vs.85%29.aspx), which is how you get themed controls from a DLL without needing a manifest\n* Unix: nothing else specific\n* Mac OS X: nothing else specific, so long as you can build Cocoa programs\n\n## Building\n\nlibui uses only [the standard Meson build options](https://mesonbuild.com/Builtin-options.html), so a libui build can be set up just like any other:\n\n```\n$ # you must be in the top-level libui directory, otherwise this won't work\n$ meson setup build [options]\n$ ninja -C build\n```\n\nOnce this completes, everything will be under `build/meson-out/`. (Note that unlike the previous build processes, everything is built by default, including tests and examples.)\n\nThe most important options are:\n\n* `--buildtype=(debug|release|...)` controls the type of build made; the default is `debug`. For a full list of valid values, consult [the Meson documentation](https://mesonbuild.com/Running-Meson.html).\n* `--default-library=(shared|static)` controls whether libui is built as a shared library or a static library; the default is `shared`. You currently cannot specify `both`, as the build process changes depending on the target type (though I am willing to look into changing things if at all possible).\n* `-Db_sanitize=which` allows enabling the chosen [sanitizer](https://github.com/google/sanitizers) on a system that supports sanitizers. The list of supported values is in [the Meson documentation](https://mesonbuild.com/Builtin-options.html#base-options).\n* `--backend=backend` allows using the specified `backend` for builds instead of `ninja` (the default). A list of supported values is in [the Meson documentation](https://mesonbuild.com/Builtin-options.html#universal-options).\n\nMost other built-in options will work, though keep in mind there are a handful of options that cannot be overridden because libui depends on them holding a specific value; if you do override these, though, libui will warn you when you run `meson`.\n\nThe Meson website and documentation has more in-depth usage instructions.\n\nFor the sake of completeness, I should note that the default value of `--layout` is `flat`, not the usual `mirror`. This is done both to make creating the release archives easier as well as to reduce the chance that shared library builds will fail to start on Windows because the DLL is in another directory. You can always specify this manually if you want.\n\nBackends other than `ninja` should work, but are untested by me.\n\n## Installation\n\nMeson also supports installing from source; if you use Ninja, just do\n\n```\n$ ninja -C build install\n```\n\nWhen running `meson`, the `--prefix` option will set the installation prefix. [The Meson documentation](https://mesonbuild.com/Builtin-options.html#universal-options) has more information, and even lists more fine-grained options that you can use to control the installation.\n\n#### Arch Linux\n\nCan be built from AUR: https://aur.archlinux.org/packages/libui-git/\n\n## Documentation\n\nNeeds to be written. Consult `ui.h` and the examples for details for now.\n\n## Language Bindings\n\nlibui was originally written as part of my [package ui for Go](https://github.com/andlabs/ui). Now that libui is separate, package ui has become a binding to libui. As such, package ui is the only official binding.\n\nOther people have made bindings to other languages:\n\nLanguage | Bindings\n--- | ---\nC++ | [libui-cpp](https://github.com/billyquith/libui-cpp), [cpp-libui-qtlike](https://github.com/aoloe/cpp-libui-qtlike)\nC# / .NET Framework | [LibUI.Binding](https://github.com/NattyNarwhal/LibUI.Binding)\nC# / .NET Core | [DevZH.UI](https://github.com/noliar/DevZH.UI), [SharpUI](https://github.com/benpye/sharpui/), [TCD.UI](https://github.com/tacdevel/tcdfx)\nCHICKEN Scheme | [wasamasa/libui](https://github.com/wasamasa/libui)\nCommon Lisp | [jinwoo/cl-ui](https://github.com/jinwoo/cl-ui)\nCrystal | [libui.cr](https://github.com/Fusion/libui.cr), [hedron](https://github.com/Qwerp-Derp/hedron)\nD | [DerelictLibui (flat API)](https://github.com/Extrawurst/DerelictLibui), [libuid (object-oriented)](https://github.com/mogud/libuid)\nEuphoria | [libui-euphoria](https://github.com/ghaberek/libui-euphoria)\nHarbour | [hbui](https://github.com/rjopek/hbui)\nHaskell | [haskell-libui](https://github.com/beijaflor-io/haskell-libui)\nJavaScript/Node.js | [libui-node](https://github.com/parro-it/libui-node), [libui.js (merged into libui-node?)](https://github.com/mavenave/libui.js), [proton-native](https://github.com/kusti8/proton-native), [vuido](https://github.com/mimecorg/vuido)\nJulia | [Libui.jl](https://github.com/joa-quim/Libui.jl)\nKotlin | [kotlin-libui](https://github.com/msink/kotlin-libui)\nLua | [libuilua](https://github.com/zevv/libuilua), [libui-lua](https://github.com/mdombroski/libui-lua), [lui](http://tset.de/lui/index.html), [lui](https://github.com/zhaozg/lui)\nNim | [ui](https://github.com/nim-lang/ui)\nPerl6 | [perl6-libui](https://github.com/Garland-g/perl6-libui)\nPHP | [ui](https://github.com/krakjoe/ui)\nPython | [pylibui](https://github.com/joaoventura/pylibui)\nRuby | [libui-ruby](https://github.com/jamescook/libui-ruby), [libui](https://github.com/kojix2/libui)\nRust | [libui-rs](https://github.com/rust-native-ui/libui-rs)\nScala | [scalaui](https://github.com/lolgab/scalaui)\nSwift | [libui-swift](https://github.com/sclukey/libui-swift)\n\n## Frequently Asked Questions\n\n### Why does my program start in the background on OS X if I run from the command line?\nOS X normally does not start program executables directly; instead, it uses [Launch Services](https://developer.apple.com/reference/coreservices/1658613-launch_services?language=objc) to coordinate the launching of the program between the various parts of the system and the loading of info from an .app bundle. One of these coordination tasks is responsible for bringing a newly launched app into the foreground. This is called \"activation\".\n\nWhen you run a binary directly from the Terminal, however, you are running it directly, not through Launch Services. Therefore, the program starts in the background, because no one told it to activate! Now, it turns out [there is an API](https://developer.apple.com/reference/appkit/nsapplication/1428468-activateignoringotherapps) that we can use to force our app to be activated. But if we use it, then we'd be trampling over Launch Services, which already knows whether it should activate or not. Therefore, libui does not step over Launch Services, at the cost of requiring an extra user step if running directly from the command line.\n\nSee also [this](https://github.com/andlabs/libui/pull/20#issuecomment-211381971) and [this](http://stackoverflow.com/questions/25318524/what-exactly-should-i-pass-to-nsapp-activateignoringotherapps-to-get-my-appl).\n\n## Contributing\n\nSee `CONTRIBUTING.md`.\n\n## Screenshots\n\nFrom examples/controlgallery:\n\n![Windows](examples/controlgallery/windows.png)\n\n![Unix](examples/controlgallery/unix.png)\n\n![OS X](examples/controlgallery/darwin.png)\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 16.2236328125,
          "content": "- make sure the last line of text layouts include leading\n\n- documentation notes:\n\t- static binaries do not link system libraries, meaning apps still depend on shared GTK+, etc.\n\t- ui*Buttons are NOT compatible with uiButton functions\n\n- more robust layout handling\n\t- uiFormTie() for ensuring multiple uiForms have the same label area widths\n\t- uiSizeGroup for size groups (GtkSizeGroup on GTK+, auto layout constraints on OS X; consider adding after 10.8 is gone)\n\n- windows: should the initial hwndInsertAfter be HWND_BOTTOM for what we want?\n\n- windows: document the rules for controls and containers\n\n- windows: document the minimum size change propagation system\n\n- provisions for controls that cannot be grown? especiailly for windows\n\n- LC_VERSION_MIN_MACOSX has the 10.11 SDK; see if we can knock it down to 10.8 too; OS version is fine\n\t- apply the OS version stuff to the test program and examples too\n\t- what about micro versions (10.8.x)? force 10.8.0?\n\n- go through ALL the objective-c objects we create and make sure we are using the proper ownership (alloc/init and new are owned by us, all class method constructors are autoreleased - thanks mikeash)\n\n- on OS X, edit shortcuts like command-C working require that the menu entries be defined, or so it seems, even for NSAlert\n\t- other platforms?\n\n- make sure all OS X event handlers that use target-action set the action to NULL when the target is unset\n\n- provide a way to get the currently selected uiTab page? set?\n\n- make it so that the windows cntrols only register a resize if their new minimum size is larger than their current size to easen the effect of flicker\n\t- it won't remove that outright, but it'll help\n\n- add an option to the test program to run page7b as an independent test in its own window\n\t- same for page7c\n\n- http://blogs.msdn.com/b/oldnewthing/archive/2004/01/12/57833.aspx provide a DEF file on Windows\n\n- all ports: update state when adding a control to a parent\n- should uiWindowsSizing be computed against the window handle, not the parent?\n\n- DPI awareness on windows\n\n- http://stackoverflow.com/questions/4543087/applicationwillterminate-and-the-dock-but-wanting-to-cancel-this-action\n\nultimately:\n- MAYBE readd lifetime handling/destruction blocking\n- related? [12:25] <ZeroOne> And the blue outline on those buttons [ALL clicked buttons on Windows 7] won't go away\n\t- I get this too\n\t\t- not anymore\n- SWP_NOCOPYBITS to avoid button redraw issues on Windows when not in tab, but only when making resize faster\n- secondary side alignment control in uiBox\n- Windows: don't abort if a cleanup function fails?\n\n- 32-bit Mac OS X support (requires lots of code changes)\n\t- change the build system to be more receptive to arch changes\n\nnotes to self\n- explicitly document label position at top-left corner\n- explicitly document that if number of radio buttons >= 1 there will always be a selection\n- mark that uiControlShow() on a uiWindow() will bring to front and give keyboard focus because of OS X\n\t- make sure ShowWindow() is sufficient for zorder on Windows\n- document that you CAN use InsertAt functions to insert at the first invalid index, even if the array is empty\n- note that uiTabInsertAt() does NOT change the current tab page (it may change its index if inserting before the current page)\n- note that the default action for uiWindowOnClosing() is to return 0 (keep the window open)\n- note that uiInitOptions should be initialized to zero\n- explicitly document that uiCheckboxSetChecked() and uiEntrySetText() do not fire uiCheckboxOnToggled() and uiEntryOnChanged(), respectively\n- note that if a menu is requested on systems with menubars on windows but no menus are defined, the result is a blank menubar, with whatever that means left up to the OS to decide\n- note that handling of multiple consecutive separators in menus, leading separators in menus, and trailing separators in menus are all OS-defined\n- note that uiDrawMatrixInvert() does not change the matrix if it fails\n- note that the use of strings that are not strictly valid UTF-8 results in undefined behavior\n\n- test RTL\n\t- automate RTL\n- now that stock items are deprecated, I have to maintain translations of the Cancel, Open, and Save buttons on GTK+ myself (thanks baedert in irc.gimp.net/#gtk+)\n\t- either that or keep using stock items\n\n- http://blogs.msdn.com/b/oldnewthing/archive/2014/02/26/10503148.aspx\n\n- build optimizations\n\n- use http://www.appveyor.com/ to do Windows build CI since people want CI\n\n\n\n\n\n\n- consider just having the windows backend in C++\n\t- consider having it all in C++\n\n\n\ndon't forget LONGTERMs as well\n\nnotes\n- http://blogs.msdn.com/b/oldnewthing/archive/2004/03/29/101121.aspx on accelerators\n\n- group and tab should act as if they have no child if the child is hidden\non windows\n\n\n\n- a way to do recursive main loops\n\t- how do we handle 0 returns from non-recursive uiMainStep() calls that aren't the main loop? (event handlers, for instance)\n- should repeated calls to uiMainStep() after uiQuit() return 0 reliably? this will be needed for non-recursive loops\n\nhttp://stackoverflow.com/questions/38338426/meaning-of-ampersand-in-rc-files/38338841?noredirect=1#comment64093084_38338841\n\nlabel shortcut keys\n\n- remove whining from source code\n\n[01:41:47]  <vrishab>\tHi. does pango support \"fgalpha\". I see that foreground=\"112233xx\" works ( alpha=xx ), but fgalpha is a no-op\n[01:52:29]  <vrishab>\tpango_attr_foreground_alpha_new (32767) seems to be called in either case, but only the \"foreground\" attr works\n[01:56:09] \tlolek (lolek@ip-91-244-230-76.simant.pl) joined the channel\n[01:57:48]  <vrishab>\tok. seems like \"foreground\" is mandatory attr, 1. \"foreground-without-alpha\" + \"alpha\" works 2. \"foreground-with-alpha\" works. 3. \"alpha\" alone doesn\n[01:57:52]  <vrishab>\t't work\n[01:58:29]  <vrishab>\tIs there a way to just specify alpha on the current foreground color ?\n[02:00:23] \tlolek (lolek@ip-91-244-230-76.simant.pl) left the channel\n[02:07:41] \tmjog (mjog@uniwide-pat-pool-129-94-8-98.gw.unsw.edu.au) left IRC (Quit: mjog)\n[02:08:10] \tseb128 (seb128@53542B83.cm-6-5a.dynamic.ziggo.nl) joined the channel\n[02:12:37]  <andlabs>\thuh\n[02:12:41]  <andlabs>\twhat version of pango?\n[02:13:05]  <vrishab>\tthe latest .\n[02:15:00]  <vrishab>\t1.40.3\n[02:20:46]  <andlabs>\tI'll ahve to keep this in mind then, thanks\n[02:20:59]  <andlabs>\tif only there was a cairo-specific attribute for alpha...\n\nFONT LOADING\n\n[00:10:08]  <hergertme>\tandlabs: is there API yet to load from memory? last i checked i only found from file (which we use in builder). https://git.gnome.org/browse/gnome-builder/tree/libide/editor/ide-editor-map-bin.c#n115\n[00:13:12] \tmrmcq2u_ (mrmcq2u@109.79.53.90) joined the channel\n[00:14:59] \tmrmcq2u (mrmcq2u@109.79.73.102) left IRC (Ping timeout: 181 seconds)\n[00:15:19]  <andlabs>\thergertme: no, which is why I was asking =P\n[00:15:30]  <andlabs>\tI would have dug down if I could ensure at least something about the backends a GTK+ 3 program uses\n[00:15:39]  <andlabs>\ton all platforms except windows and os x\n[00:16:11]  <hergertme>\tto the best of my (partially outdated, given pace of foss) knowledge there isn't an api to load from memory\n[00:16:28]  <hergertme>\tyou can possibly make a tmpdir and put a temp file in there\n[00:16:52]  <hergertme>\tand load that as your font dir in your FcConfig, so any PangoFontDescription would point to that one font, no matter what\n[00:17:18]  <hergertme>\t(using the API layed out in that link)\n[00:18:18] \tdsr1014__ (dsr1014@c-73-72-102-18.hsd1.il.comcast.net) joined the channel\n[00:35:18] \tsimukis_ (simukis@78-60-58-6.static.zebra.lt) left IRC (Quit: simukis_)\n[00:35:48] \tdreamon_ (dreamon@ppp-188-174-49-41.dynamic.mnet-online.de) joined the channel\n[00:40:09] \tsamtoday_ (samtoday@114-198-116-132.dyn.iinet.net.au) joined the channel\n[00:40:32] \tmjog (mjog@120.18.225.46) joined the channel\n[00:40:38]  <andlabs>\thergertme: not necessarily fontconfig\n[00:40:45]  <andlabs>\tit can be with ft2 or xft I guess\n[00:40:55]  <andlabs>\tespecially since I want the API NOT to make the font part of the font panel\n[00:42:07]  <hergertme>\twhat sort of deprecated code are you trying to support?\n[00:42:35]  <hergertme>\tboth of those are deprecated in pango fwiw\n[00:43:06]  <hergertme>\ton Linux im pretty sure we use FC everywhere these days\n[00:44:46]  <hergertme>\t(and gtk_widget_set_font_map() is how you get your custom font into a widget without affecting the global font lists, as layed out in that link)\n[00:49:14] \tvasaikar (vasaikar@125.16.97.121) joined the channel\n[00:50:14] \tkarlt (karl@2400:e780:801:224:f121:e611:d139:e70e) left IRC (Client exited)\n[00:50:49] \tkarlt (karl@2400:e780:801:224:f121:e611:d139:e70e) joined the channel\n[00:51:43] \tPioneerAxon (PioneerAxo@122.171.61.146) left IRC (Ping timeout: 180 seconds)\n[00:57:47] \tPioneerAxon (PioneerAxo@106.201.37.181) joined the channel\n[01:03:01] \tkarlt (karl@2400:e780:801:224:f121:e611:d139:e70e) left IRC (Ping timeout: 181 seconds)\n[01:05:49] \tmuhannad (muhannad@95.218.26.152) left IRC (Quit: muhannad)\n[01:07:51]  <andlabs>\thergertme: hm\n[01:07:54]  <andlabs>\tall right, thanks\n[01:08:05]  <andlabs>\thergertme: fwiw right now my requirement is 3.10\n[01:10:47]  <hergertme>\tah, well you'll probably be missing the neccesary font API on gtk_widget\n[01:11:04]  <hergertme>\tbut pango should be fine even back as far as https://developer.gnome.org/pango/1.28/PangoFcFontMap.html\n[01:11:56]  <andlabs>\tgood\n[01:12:04]  <andlabs>\tbecause this is for custom drawing into a DrawingArea\n[01:14:12]  <hergertme>\tpresumably just create your PangoContext as normal, but call pango_context_set_font_map() with the map you've setup. now, the load a font from a file i dont think was added to FontConfig until later though (not sure what release)\n[01:15:53]  <hergertme>\tFcConfigAppFontAddFile() <-- that API\n[01:16:30]  <hergertme>\tgreat, and they don't say what version the API was added in teh docs\nfunction: ide_editor_map_bin_add()\n\n- Mouse ClickLock: do we need to do anything special? *should* we? https://msdn.microsoft.com/en-us/library/windows/desktop/ms724947(v=vs.85).aspx\n- consider a uiAnticipateDoubleClick() or uiDoubleClickTime() (for a uiQueueTimer()) or something: https://blogs.msdn.microsoft.com/oldnewthing/20041015-00/?p=37553\n\n- determine whether MSGF_USER is for and if it's correct for our uiArea message filter (if we have one)\n\n- source file encoding and MSVC compiler itself? https://stackoverflow.com/questions/20518040/how-can-i-get-the-directwrite-padwrite-sample-to-work\n\t- also need to worry about object file and output encoding...\n\t- this also names the author of the padwrite sample\n\n- OpenType features TODOs\n\t- https://stackoverflow.com/questions/32545675/what-are-the-default-typography-settings-used-by-idwritetextlayout\n\t- feature/shaping interaction rules for arabic: https://www.microsoft.com/typography/OpenTypeDev/arabic/intro.htm\n\t- other stuff, mostly about UIs and what users expect to be able to set\n\t\t- https://klim.co.nz/blog/towards-an-ideal-opentype-user-interface/\n\t\t- https://libregraphicsmeeting.org/2016/designing-for-many-applications-opentype-features-ui/\n\t\t\t- https://www.youtube.com/watch?v=wEyDhsH076Y\n\t\t\t- https://twitter.com/peter_works\n\t\t- http://ilovetypography.com/2014/10/22/better-ui-for-better-typography-adobe-petition/\n\t\t- http://silgraphite.sourceforge.net/ui/studynote.html\n\n- add NXCOMPAT (DEP awareness) to the Windows builds\n\t- and ASLR too? or is that not a linker setting\n\nOS X: embedding an Info.plist into a binary directly\nhttps://www.objc.io/issues/6-build-tools/mach-o-executables/\nTODO will this let Dictation work?\nTODO investigate ad-hoc codesigning\n\nhttps://blogs.msdn.microsoft.com/oldnewthing/20040112-00/?p=41083 def files for decoration (I forget if I said this earlier)\n\nTODO ClipCursor() stuff; probably not useful for libui but still\nhttps://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183\nhttps://blogs.msdn.microsoft.com/oldnewthing/20061117-03/?p=28973\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/ms648383(v=vs.85).aspx\n\nhttps://cmake.org/Wiki/CMake_Useful_Variables\nset(CMAKE_SHARED_LINKER_FLAGS \"-Wl,--no-undefined\")\nOn Unix systems, this will make linker report any unresolved symbols from object files (which is quite typical when you compile many targets in CMake projects, but do not bother with linking target dependencies in proper order). \n(I used to have something like this back when I used makefiles; did it convert in? I forget)\n\nlook into these for the os x port\nhttps://developer.apple.com/documentation/appkit/view_management/nseditor?language=objc\nhttps://developer.apple.com/documentation/appkit/view_management/nseditorregistration?language=objc\n\nfor future versions of the os x port\nhttps://developer.apple.com/documentation/appkit/nslayoutguide?language=objc and anchors\nhttps://developer.apple.com/documentation/appkit/nsuserinterfacecompression?language=objc https://developer.apple.com/documentation/appkit/nsuserinterfacecompressionoptions?language=objc\nthough at some point we'll be able to use NSStackView and NSGridView directly, so...\n\nCocoa PDFs\nhttps://developer.apple.com/documentation/appkit/nspdfimagerep?language=objc\nhttps://developer.apple.com/documentation/coregraphics?language=objc\nhttps://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Printing/osxp_pagination/osxp_pagination.html#//apple_ref/doc/uid/20001051-119037\nhttps://developer.apple.com/documentation/appkit/nsprintoperation/1529269-pdfoperationwithview?language=objc\nhttps://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Printing/osxp_printapps/osxp_printapps.html#//apple_ref/doc/uid/20000861-BAJBFGED\nhttps://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Printing/osxp_printingapi/osxp_printingapi.html#//apple_ref/doc/uid/10000083i-CH2-SW2\nhttps://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Printing/osxp_printinfo/osxp_printinfo.html#//apple_ref/doc/uid/20000864-BAJBFGED\nhttps://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Printing/osxp_printlayoutpanel/osxp_printlayoutpanel.html#//apple_ref/doc/uid/20000863-BAJBFGED\nhttps://developer.apple.com/documentation/appkit/nspagelayout?language=objc\nhttps://developer.apple.com/documentation/appkit/nsprintinfo?language=objc\nhttps://developer.apple.com/documentation/applicationservices/core_printing?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1463247-pmcreatesession?language=objc\nhttps://developer.apple.com/documentation/applicationservices/pmprintsession?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1460101-pmsessionbegincgdocumentnodialog?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1463416-pmsessionbeginpagenodialog?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1506831-anonymous/kpmdestinationprocesspdf?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1461960-pmcreategenericprinter?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1460101-pmsessionbegincgdocumentnodialog?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1464527-pmsessionenddocumentnodialog?language=objc\nhttps://developer.apple.com/documentation/applicationservices/1461952-pmsessiongetcggraphicscontext?language=objc\nhttps://developer.apple.com/library/content/technotes/tn2248/_index.html\nhttps://developer.apple.com/library/content/samplecode/PMPrinterPrintWithFile/Introduction/Intro.html\nhttps://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Printing/osxp_aboutprinting/osxp_aboutprt.html\n\n- run os x code with `OBJC_DEBUG_MISSING_POOLS=YES` and other `OBJC_HELP=YES` options\n\t- turn off the autorelease pool to make sure we're not autoreleasing improperly\n\nTODO investigate -Weverything in clang alongside -Wall in MSVC (and in gcc too maybe...)\n\nmac os x accessibility\n- https://developer.apple.com/documentation/appkit/nsworkspace/1524656-accessibilitydisplayshoulddiffer?language=objc\n- https://developer.apple.com/documentation/appkit/nsworkspace/1526290-accessibilitydisplayshouldincrea?language=objc\n- https://developer.apple.com/documentation/appkit/nsworkspace/1533006-accessibilitydisplayshouldreduce?language=objc\n\nuiEntry disabling bugs http://www.cocoabuilder.com/archive/cocoa/215525-nstextfield-bug-can-be.html\nuiMultilineEntry disabling https://developer.apple.com/library/content/qa/qa1461/_index.html\n\nmore TODOs:\n- make no guarantee about buildability of feature branches\n"
        },
        {
          "name": "_abort",
          "type": "tree",
          "content": null
        },
        {
          "name": "_doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "_future",
          "type": "tree",
          "content": null
        },
        {
          "name": "_notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "_wip",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 11.49609375,
          "content": "# 31 march 2019\n\ntrigger:\n  branches:\n    include:\n    - '*'\n  tags:\n    include:\n    - '*'\n\nvariables:\n  releaseExamples: 'controlgallery cpp-multithread datetime drawtext histogram tester timer'\n\njobs:\n\n# linux {\n\n- job: linux_386_shared\n  displayName: 'Linux 386 Shared'\n  pool:\n    vmImage: 'ubuntu-16.04'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/linux-386-install-gtk-dev.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: export CFLAGS=-m32 CXXFLAGS=-m32 PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig\n      defaultLibrary: shared\n  - template: azure-pipelines/build.yml\n  - template: azure-pipelines/artifacts.yml\n    parameters:\n      os: linux\n      arch: 386\n      libtype: shared\n      libfiles: libui.so.0\n      osHeader: ui_unix.h\n\n- job: linux_386_static\n  displayName: 'Linux 386 Static'\n  pool:\n    vmImage: 'ubuntu-16.04'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/linux-386-install-gtk-dev.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: export CFLAGS=-m32 CXXFLAGS=-m32 PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig\n      defaultLibrary: static\n  - template: azure-pipelines/build.yml\n  - template: azure-pipelines/artifacts.yml\n    parameters:\n      os: linux\n      arch: 386\n      libtype: static\n      libfiles: libui.a\n      osHeader: ui_unix.h\n\n- job: linux_amd64_shared\n  displayName: 'Linux amd64 Shared'\n  pool:\n    vmImage: 'ubuntu-16.04'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/linux-install-gtk-dev.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      defaultLibrary: shared\n  - template: azure-pipelines/build.yml\n  - template: azure-pipelines/artifacts.yml\n    parameters:\n      os: linux\n      arch: amd64\n      libtype: shared\n      libfiles: libui.so.0\n      osHeader: ui_unix.h\n\n- job: linux_amd64_static\n  displayName: 'Linux amd64 Static'\n  pool:\n    vmImage: 'ubuntu-16.04'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/linux-install-gtk-dev.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      defaultLibrary: static\n  - template: azure-pipelines/build.yml\n  - template: azure-pipelines/artifacts.yml\n    parameters:\n      os: linux\n      arch: amd64\n      libtype: static\n      libfiles: libui.a\n      osHeader: ui_unix.h\n\n# }\n\n# windows vs2015 {\n\n- job: windows_386_msvc2015_shared\n  displayName: 'Windows 386 MSVC2015 Shared'\n  pool:\n    vmImage: 'vs2015-win2012r2'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/vs2015-install-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" x86\n      defaultLibrary: shared\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" x86\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: 386\n      toolchain: msvc2015\n      libtype: shared\n      libfiles: libui.dll libui.exp libui.lib\n      osHeader: ui_windows.h\n\n- job: windows_386_msvc2015_static\n  displayName: 'Windows 386 MSVC2015 Static'\n  pool:\n    vmImage: 'vs2015-win2012r2'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/vs2015-install-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" x86\n      defaultLibrary: static\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" x86\n      afterBuild: ren build\\meson-out\\libui.a libui.lib\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: 386\n      toolchain: msvc2015\n      libtype: static\n      libfiles: libui.lib\n      osHeader: ui_windows.h\n\n- job: windows_amd64_msvc2015_shared\n  displayName: 'Windows amd64 MSVC2015 Shared'\n  pool:\n    vmImage: 'vs2015-win2012r2'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/vs2015-install-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" amd64\n      defaultLibrary: shared\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" amd64\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: amd64\n      toolchain: msvc2015\n      libtype: shared\n      libfiles: libui.dll libui.exp libui.lib\n      osHeader: ui_windows.h\n\n- job: windows_amd64_msvc2015_static\n  displayName: 'Windows amd64 MSVC2015 Static'\n  pool:\n    vmImage: 'vs2015-win2012r2'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/vs2015-install-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" amd64\n      defaultLibrary: static\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" amd64\n      afterBuild: ren build\\meson-out\\libui.a libui.lib\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: amd64\n      toolchain: msvc2015\n      libtype: static\n      libfiles: libui.lib\n      osHeader: ui_windows.h\n\n# }\n\n# windows vs2017 {\n\n- job: windows_386_msvc2017_shared\n  displayName: 'Windows 386 MSVC2017 Shared'\n  pool:\n    vmImage: 'vs2017-win2016'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86\n      defaultLibrary: shared\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: 386\n      toolchain: msvc2017\n      libtype: shared\n      libfiles: libui.dll libui.exp libui.lib\n      osHeader: ui_windows.h\n\n- job: windows_386_msvc2017_static\n  displayName: 'Windows 386 MSVC2017 Static'\n  pool:\n    vmImage: 'vs2017-win2016'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86\n      defaultLibrary: static\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x86\n      afterBuild: ren build\\meson-out\\libui.a libui.lib\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: 386\n      toolchain: msvc2017\n      libtype: static\n      libfiles: libui.lib\n      osHeader: ui_windows.h\n\n- job: windows_amd64_msvc2017_shared\n  displayName: 'Windows amd64 MSVC2017 Shared'\n  pool:\n    vmImage: 'vs2017-win2016'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" amd64\n      defaultLibrary: shared\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" amd64\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: amd64\n      toolchain: msvc2017\n      libtype: shared\n      libfiles: libui.dll libui.exp libui.lib\n      osHeader: ui_windows.h\n\n- job: windows_amd64_msvc2017_static\n  displayName: 'Windows amd64 MSVC2017 Static'\n  pool:\n    vmImage: 'vs2017-win2016'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/windows-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      beforeConfigure: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" amd64\n      defaultLibrary: static\n  - template: azure-pipelines/build.yml\n    parameters:\n      beforeBuild: call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" amd64\n      afterBuild: ren build\\meson-out\\libui.a libui.lib\n  - template: azure-pipelines/windows-artifacts.yml\n    parameters:\n      os: windows\n      arch: amd64\n      toolchain: msvc2017\n      libtype: static\n      libfiles: libui.lib\n      osHeader: ui_windows.h\n\n# }\n\n# mac {\n\n# TODO beforeConfigure/beforeBuild: export SDKROOT=$(xcodebuild -version -sdk macosx10.13 Path)?\n\n- job: darwin_amd64_shared\n  displayName: 'Darwin amd64 Shared'\n  pool:\n    vmImage: 'macos-10.13'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/darwin-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      defaultLibrary: shared\n  - template: azure-pipelines/build.yml\n  - template: azure-pipelines/artifacts.yml\n    parameters:\n      os: darwin\n      arch: amd64\n      libtype: shared\n      libfiles: libui.A.dylib\n      osHeader: ui_darwin.h\n\n- job: darwin_amd64_static\n  displayName: 'Darwin amd64 Static'\n  pool:\n    vmImage: 'macos-10.13'\n  workspace:\n    clean: all\n  steps:\n  - template: azure-pipelines/setup-python3.yml\n  - template: azure-pipelines/install-latest-meson-ninja.yml\n  - template: azure-pipelines/darwin-install-ninja.yml\n  - template: azure-pipelines/configure.yml\n    parameters:\n      defaultLibrary: static\n  - template: azure-pipelines/build.yml\n  - template: azure-pipelines/artifacts.yml\n    parameters:\n      os: darwin\n      arch: amd64\n      libtype: static\n      libfiles: libui.a\n      osHeader: ui_darwin.h\n\n# }\n"
        },
        {
          "name": "azure-pipelines",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "darwin",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 5.9033203125,
          "content": "# 17 march 2019\n\n# TODO I'm not sure how to allow building 32-bit instead of 64-bit with meson\n\n# TODO remove cpp from this list once https://github.com/mesonbuild/meson/issues/5181 is settled; move it to the OS checks and under cpp-multithread\nproject('libui', ['c', 'cpp'],\n\tmeson_version: '>=0.48.0',\n\tdefault_options: [\n\t\t'buildtype=debug',\t\t\t\t# build debug by default\n\t\t'default_library=shared',\t\t\t# build shared libraries by default\n\t\t'layout=flat',\t\t\t\t\t# keep all outputs together by default\n\n\t\t# these are forced options, but meson doesn't let me set these up separately before I call project() (TODO https://github.com/mesonbuild/meson/issues/5179)\n\t\t'warning_level=3',\t\t\t\t# always max warnings\n\t\t'b_pch=false',\t\t\t\t\t# we don't want precompiled headers\n\t\t'b_staticpic=true',\t\t\t\t# use PIC even for static libraries\n\t\t'c_std=c99',\t\t\t\t\t# strict C99\n\t\t'c_winlibs=',\t\t\t\t\t# we define our own Windows libraries\n\t\t'cpp_std=c++11',\t\t\t\t# strict C++11\n\t\t'cpp_eh=sc',\t\t\t\t\t# shut the compiler up in some cases\n\t\t'cpp_winlibs=',\t\t\t\t\t# likewise as with c_winlibs\n\t],\n\tlicense: 'MIT')\n\n# TODO after https://github.com/mesonbuild/meson/issues/5179 is settled, remove these\nlibui_OS = host_machine.system()\nlibui_MSVC = meson.get_compiler('c').get_id() == 'msvc'\n\n# TODO switch to tabs; the spaces are just so I can share this file while I'm writing it\nlibui_forced_options = {\n\t'warning_level': '3',     # always max warnings\n\t'b_pch':         'false', # we don't want precompiled headers\n\t'b_staticpic':   'true',  # use PIC even for static libraries\n\t'c_std':         'c99',   # strict C99\n\t'c_winlibs':     '[]',    # we define our own Windows libraries\n\t'cpp_std':       'c++11', # strict C++11\n\t'cpp_eh':        'sc',    # shut the compiler up in some cases\n\t'cpp_winlibs':   '[]',    # likewise as with c_winlibs\n}\nforeach name, value : libui_forced_options\n\t# TODO rewrite this when https://github.com/mesonbuild/meson/issues/5181 is settled\n\tif not ((name == 'c_winlibs' or name == 'cpp_eh' or name == 'cpp_winlibs') and not libui_MSVC) and not (name == 'c_std' and libui_MSVC)\n\t\tactual = '@0@'.format(get_option(name))\n\t\tif actual != value\n\t\t\terror('sorry, but libui requires that option ' + name + ' has the default value ' + value)\n\t\tendif\n\tendif\nendforeach\n\nlibui_OS = host_machine.system()\nlibui_MSVC = meson.get_compiler('c').get_id() == 'msvc'\n\nif libui_OS == 'darwin'\n\tadd_languages('objc',\n\t\trequired: true)\nendif\n\nlibui_mode = get_option('default_library')\nif libui_mode == 'both'\n\terror('sorry, but libui does not support building both shared and static libraries at the same time, because Windows resource file rules differ between the two')\nendif\n\nlibui_is_debug = get_option('buildtype').startswith('debug')\n\nlibui_project_compile_args = []\nlibui_project_link_args = []\n\nif libui_OS == 'darwin'\n\tlibui_macosx_version_min = '-mmacosx-version-min=10.8'\n\tlibui_project_compile_args += [libui_macosx_version_min]\n\tlibui_project_link_args += [libui_macosx_version_min]\nendif\n\nif libui_MSVC\n\t# TODO subsystem version\n\n\tlibui_project_compile_args += [\n\t\t'/wd4100',\n\t\t'/bigobj',\n\t]\n\tif libui_is_debug\n\t\tlibui_project_compile_args += ['/RTC1', '/RTCs', '/RTCu']\n\tendif\n\n\tlibui_project_link_args += [\n\t\t'/LARGEADDRESSAWARE',\n\t\t'/INCREMENTAL:NO',\n\t\t'/MANIFEST:NO',\n\t]\n\n\t# TODO autogenerate a .def file?\nelse\n\tlibui_project_compile_args += [\n\t\t'-Wno-unused-parameter',\n\t\t'-Wno-switch',\n\t]\n\n\tif libui_OS == 'windows'\n\t\t# don't require shipping the MinGW-w64 DLLs\n\t\tlibui_project_link_args += [\n\t\t\t'-static',\n\t\t\t'-static-libgcc',\n\t\t\t'-static-libstdc++',\n\t\t]\n\tendif\nendif\n\n# TODO come up with a better way to do this, both for libui (the compiler define, used by winapi.hpp, and the manifest args) and for the binaries (the manifest args)\n# TODO (after the above TODO is resolved) move that below the part below that actually adds these arguments\nlibui_manifest_args = []\nif libui_mode == 'static'\n\tlibui_project_compile_args += ['-D_UI_STATIC']\n\tlibui_manifest_args = ['-D_UI_STATIC']\nendif\n\nadd_project_arguments(libui_project_compile_args,\n\tlanguage: ['c', 'cpp', 'objc'])\nadd_project_link_arguments(libui_project_link_args,\n\tlanguage: ['c', 'cpp', 'objc'])\n\n# TODO:\n# meson determins whether -Wl,--no-undefined is provided via\n# built-in option b_lundef, and it's true by default, which is what\n# we want (so I don't make mistakes like asking for unknown\n# functions in my dependencies). However, meson also is smart\n# about specifying this properly on systems that don't support it, like\n# FreeBSD (where I had the comment \"figure out why FreeBSD\n# follows linked libraries here\" when I was on cmake) and OpenBSD\n# (according to someone on freenode #mesonbuild), but it isn't clear\n# whether it's just ignored or if the value is forced to false.\n# Therefore, once this is determined, we can uncomment the\n# following.\nlibui_libui_link_args = []\n#if not libui_MSVC and get_option(\"b_lundef\")\n\t# TODO what should this be on MSVC?\n#\tlibui_libui_link_args += ['-Wl,--no-allow-shlib-undefined']\n#endif\n\nlibui_sources = []\nlibui_deps = []\nlibui_soversion = ''\nlibui_rpath = ''\nsubdir('common')\nif libui_OS == 'windows'\n\tsubdir('windows')\n\tinstall_headers('ui_windows.h')\nelif libui_OS == 'darwin'\n\tsubdir('darwin')\n\tinstall_headers('ui_darwin.h')\nelse\n\tsubdir('unix')\n\tinstall_headers('ui_unix.h')\nendif\nlibui_libui = library('ui', libui_sources,\n\tdependencies: libui_deps,\n\tbuild_rpath: libui_rpath,\n\tinstall_rpath: libui_rpath,\n\tname_prefix: 'lib',\t\t# always call it libui, even in Windows DLLs\n\tinstall: true,\n\tgnu_symbol_visibility: 'hidden',\n\tc_args: ['-Dlibui_EXPORTS'],\n\tcpp_args: ['-Dlibui_EXPORTS'],\n\tobjc_args: ['-Dlibui_EXPORTS'],\n\tlink_args: libui_libui_link_args,\n\tsoversion: libui_soversion,\n\tdarwin_versions: [])\t\t# TODO\ninstall_headers('ui.h')\n\n# TODO when the API is stable enough to be versioned, create a pkg-config file (https://mesonbuild.com/Pkgconfig-module.html) and a declare_dependency() section too\n\nlibui_binary_deps = []\nif libui_mode == 'static'\n\tlibui_binary_deps = libui_deps\nendif\nsubdir('test')\nsubdir('examples')\n"
        },
        {
          "name": "stats.osxdrawtext",
          "type": "blob",
          "size": 1.6201171875,
          "content": "diff --git a/darwin/drawtext.m b/darwin/drawtext.m\nindex a84b68b..c95bbde 100644\n--- a/darwin/drawtext.m\n+++ b/darwin/drawtext.m\n@@ -108,7 +108,7 @@ static CFAttributedStringRef attrstrToCoreFoundation(uiAttributedString *s, uiDr\n \t\tboundsNoLeading = CTLineGetBoundsWithOptions(line, kCTLineBoundsExcludeTypographicLeading);\n \n \t\t// this is equivalent to boundsNoLeading.size.height + boundsNoLeading.origin.y (manually verified)\n-\t\tascent = bounds.size.height + bounds.origin.y;\n+if(i!=5)\t\tascent = bounds.size.height + bounds.origin.y;\n \t\tdescent = -boundsNoLeading.origin.y;\n \t\t// TODO does this preserve leading sign?\n \t\tleading = -bounds.origin.y - descent;\n@@ -119,11 +119,20 @@ static CFAttributedStringRef attrstrToCoreFoundation(uiAttributedString *s, uiDr\n \t\tif (leading > 0)\n \t\t\tleading = floor(leading + 0.5);\n \n+NSLog(@\"line %d\", (int)i);\n+NSLog(@\"ypos %g\", ypos);\n+if (i>0) {\n+NSLog(@\"expected Y: %g\", metrics[i - 1].Y - metrics[i - 1].Height);\n+}\n+\n \t\tmetrics[i].X = origins[i].x;\n \t\tmetrics[i].Y = origins[i].y - descent - leading;\n \t\tmetrics[i].Width = bounds.size.width;\n \t\tmetrics[i].Height = ascent + descent + leading;\n \n+NSLog(@\"o %g a %g d %g l %g\", origins[i].y, ascent, descent, leading);\n+NSLog(@\"actual Y: %g height: %g\", metrics[i].Y, metrics[i].Height);\n+\n \t\tmetrics[i].BaselineY = origins[i].y;\n \t\tmetrics[i].Ascent = ascent;\n \t\tmetrics[i].Descent = descent;\n@@ -148,7 +157,7 @@ static CFAttributedStringRef attrstrToCoreFoundation(uiAttributedString *s, uiDr\n \t\tmetrics[i].BaselineY = size.height - metrics[i].BaselineY;\n \t\t// TODO also adjust by metrics[i].Height?\n \t}\n-\n+NSLog(@\"===\");\n \tuiFree(origins);\n \treturn metrics;\n }\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui.h",
          "type": "blob",
          "size": 61.896484375,
          "content": "// 6 april 2015\n\n// TODO add a uiVerifyControlType() function that can be used by control implementations to verify controls\n\n// TODOs\n// - make getters that return whether something exists accept a NULL pointer to discard the value (and thus only return that the thing exists?)\n// - const-correct everything\n// - normalize documentation between typedefs and structs\n\n#ifndef __LIBUI_UI_H__\n#define __LIBUI_UI_H__\n\n#include <stddef.h>\n#include <stdint.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n// this macro is generated by cmake\n#ifdef libui_EXPORTS\n#ifdef _WIN32\n#define _UI_EXTERN __declspec(dllexport) extern\n#else\n#define _UI_EXTERN __attribute__((visibility(\"default\"))) extern\n#endif\n#else\n// TODO add __declspec(dllimport) on windows, but only if not static\n#define _UI_EXTERN extern\n#endif\n\n// C++ is really really really really really really dumb about enums, so screw that and just make them anonymous\n// This has the advantage of being ABI-able should we ever need an ABI...\n#define _UI_ENUM(s) typedef unsigned int s; enum\n\n// This constant is provided because M_PI is nonstandard.\n// This comes from Go's math.Pi, which in turn comes from http://oeis.org/A000796.\n#define uiPi 3.14159265358979323846264338327950288419716939937510582097494459\n\n// TODO uiBool?\n\n// uiForEach represents the return value from one of libui's various ForEach functions.\n_UI_ENUM(uiForEach) {\n\tuiForEachContinue,\n\tuiForEachStop,\n};\n\ntypedef struct uiInitOptions uiInitOptions;\n\nstruct uiInitOptions {\n\tsize_t Size;\n};\n\n_UI_EXTERN const char *uiInit(uiInitOptions *options);\n_UI_EXTERN void uiUninit(void);\n_UI_EXTERN void uiFreeInitError(const char *err);\n\n_UI_EXTERN void uiMain(void);\n_UI_EXTERN void uiMainSteps(void);\n_UI_EXTERN int uiMainStep(int wait);\n_UI_EXTERN void uiQuit(void);\n\n_UI_EXTERN void uiQueueMain(void (*f)(void *data), void *data);\n\n// TODO standardize the looping behavior return type, either with some enum or something, and the test expressions throughout the code\n// TODO figure out what to do about looping and the exact point that the timer is rescheduled so we can document it; see https://github.com/andlabs/libui/pull/277\n// TODO (also in the above link) document that this cannot be called from any thread, unlike uiQueueMain()\n// TODO document that the minimum exact timing, either accuracy (timer burst, etc.) or granularity (15ms on Windows, etc.), is OS-defined\n// TODO also figure out how long until the initial tick is registered on all platforms to document\n// TODO also add a comment about how useful this could be in bindings, depending on the language being bound to\n_UI_EXTERN void uiTimer(int milliseconds, int (*f)(void *data), void *data);\n\n_UI_EXTERN void uiOnShouldQuit(int (*f)(void *data), void *data);\n\n_UI_EXTERN void uiFreeText(char *text);\n\ntypedef struct uiControl uiControl;\n\nstruct uiControl {\n\tuint32_t Signature;\n\tuint32_t OSSignature;\n\tuint32_t TypeSignature;\n\tvoid (*Destroy)(uiControl *);\n\tuintptr_t (*Handle)(uiControl *);\n\tuiControl *(*Parent)(uiControl *);\n\tvoid (*SetParent)(uiControl *, uiControl *);\n\tint (*Toplevel)(uiControl *);\n\tint (*Visible)(uiControl *);\n\tvoid (*Show)(uiControl *);\n\tvoid (*Hide)(uiControl *);\n\tint (*Enabled)(uiControl *);\n\tvoid (*Enable)(uiControl *);\n\tvoid (*Disable)(uiControl *);\n};\n// TOOD add argument names to all arguments\n#define uiControl(this) ((uiControl *) (this))\n_UI_EXTERN void uiControlDestroy(uiControl *);\n_UI_EXTERN uintptr_t uiControlHandle(uiControl *);\n_UI_EXTERN uiControl *uiControlParent(uiControl *);\n_UI_EXTERN void uiControlSetParent(uiControl *, uiControl *);\n_UI_EXTERN int uiControlToplevel(uiControl *);\n_UI_EXTERN int uiControlVisible(uiControl *);\n_UI_EXTERN void uiControlShow(uiControl *);\n_UI_EXTERN void uiControlHide(uiControl *);\n_UI_EXTERN int uiControlEnabled(uiControl *);\n_UI_EXTERN void uiControlEnable(uiControl *);\n_UI_EXTERN void uiControlDisable(uiControl *);\n\n_UI_EXTERN uiControl *uiAllocControl(size_t n, uint32_t OSsig, uint32_t typesig, const char *typenamestr);\n_UI_EXTERN void uiFreeControl(uiControl *);\n\n// TODO make sure all controls have these\n_UI_EXTERN void uiControlVerifySetParent(uiControl *, uiControl *);\n_UI_EXTERN int uiControlEnabledToUser(uiControl *);\n\n_UI_EXTERN void uiUserBugCannotSetParentOnToplevel(const char *type);\n\ntypedef struct uiWindow uiWindow;\n#define uiWindow(this) ((uiWindow *) (this))\n_UI_EXTERN char *uiWindowTitle(uiWindow *w);\n_UI_EXTERN void uiWindowSetTitle(uiWindow *w, const char *title);\n_UI_EXTERN void uiWindowContentSize(uiWindow *w, int *width, int *height);\n_UI_EXTERN void uiWindowSetContentSize(uiWindow *w, int width, int height);\n_UI_EXTERN int uiWindowFullscreen(uiWindow *w);\n_UI_EXTERN void uiWindowSetFullscreen(uiWindow *w, int fullscreen);\n_UI_EXTERN void uiWindowOnContentSizeChanged(uiWindow *w, void (*f)(uiWindow *, void *), void *data);\n_UI_EXTERN void uiWindowOnClosing(uiWindow *w, int (*f)(uiWindow *w, void *data), void *data);\n_UI_EXTERN int uiWindowBorderless(uiWindow *w);\n_UI_EXTERN void uiWindowSetBorderless(uiWindow *w, int borderless);\n_UI_EXTERN void uiWindowSetChild(uiWindow *w, uiControl *child);\n_UI_EXTERN int uiWindowMargined(uiWindow *w);\n_UI_EXTERN void uiWindowSetMargined(uiWindow *w, int margined);\n_UI_EXTERN uiWindow *uiNewWindow(const char *title, int width, int height, int hasMenubar);\n\ntypedef struct uiButton uiButton;\n#define uiButton(this) ((uiButton *) (this))\n_UI_EXTERN char *uiButtonText(uiButton *b);\n_UI_EXTERN void uiButtonSetText(uiButton *b, const char *text);\n_UI_EXTERN void uiButtonOnClicked(uiButton *b, void (*f)(uiButton *b, void *data), void *data);\n_UI_EXTERN uiButton *uiNewButton(const char *text);\n\ntypedef struct uiBox uiBox;\n#define uiBox(this) ((uiBox *) (this))\n_UI_EXTERN void uiBoxAppend(uiBox *b, uiControl *child, int stretchy);\n_UI_EXTERN void uiBoxDelete(uiBox *b, int index);\n_UI_EXTERN int uiBoxPadded(uiBox *b);\n_UI_EXTERN void uiBoxSetPadded(uiBox *b, int padded);\n_UI_EXTERN uiBox *uiNewHorizontalBox(void);\n_UI_EXTERN uiBox *uiNewVerticalBox(void);\n\ntypedef struct uiCheckbox uiCheckbox;\n#define uiCheckbox(this) ((uiCheckbox *) (this))\n_UI_EXTERN char *uiCheckboxText(uiCheckbox *c);\n_UI_EXTERN void uiCheckboxSetText(uiCheckbox *c, const char *text);\n_UI_EXTERN void uiCheckboxOnToggled(uiCheckbox *c, void (*f)(uiCheckbox *c, void *data), void *data);\n_UI_EXTERN int uiCheckboxChecked(uiCheckbox *c);\n_UI_EXTERN void uiCheckboxSetChecked(uiCheckbox *c, int checked);\n_UI_EXTERN uiCheckbox *uiNewCheckbox(const char *text);\n\ntypedef struct uiEntry uiEntry;\n#define uiEntry(this) ((uiEntry *) (this))\n_UI_EXTERN char *uiEntryText(uiEntry *e);\n_UI_EXTERN void uiEntrySetText(uiEntry *e, const char *text);\n_UI_EXTERN void uiEntryOnChanged(uiEntry *e, void (*f)(uiEntry *e, void *data), void *data);\n_UI_EXTERN int uiEntryReadOnly(uiEntry *e);\n_UI_EXTERN void uiEntrySetReadOnly(uiEntry *e, int readonly);\n_UI_EXTERN uiEntry *uiNewEntry(void);\n_UI_EXTERN uiEntry *uiNewPasswordEntry(void);\n_UI_EXTERN uiEntry *uiNewSearchEntry(void);\n\ntypedef struct uiLabel uiLabel;\n#define uiLabel(this) ((uiLabel *) (this))\n_UI_EXTERN char *uiLabelText(uiLabel *l);\n_UI_EXTERN void uiLabelSetText(uiLabel *l, const char *text);\n_UI_EXTERN uiLabel *uiNewLabel(const char *text);\n\ntypedef struct uiTab uiTab;\n#define uiTab(this) ((uiTab *) (this))\n_UI_EXTERN void uiTabAppend(uiTab *t, const char *name, uiControl *c);\n_UI_EXTERN void uiTabInsertAt(uiTab *t, const char *name, int before, uiControl *c);\n_UI_EXTERN void uiTabDelete(uiTab *t, int index);\n_UI_EXTERN int uiTabNumPages(uiTab *t);\n_UI_EXTERN int uiTabMargined(uiTab *t, int page);\n_UI_EXTERN void uiTabSetMargined(uiTab *t, int page, int margined);\n_UI_EXTERN uiTab *uiNewTab(void);\n\ntypedef struct uiGroup uiGroup;\n#define uiGroup(this) ((uiGroup *) (this))\n_UI_EXTERN char *uiGroupTitle(uiGroup *g);\n_UI_EXTERN void uiGroupSetTitle(uiGroup *g, const char *title);\n_UI_EXTERN void uiGroupSetChild(uiGroup *g, uiControl *c);\n_UI_EXTERN int uiGroupMargined(uiGroup *g);\n_UI_EXTERN void uiGroupSetMargined(uiGroup *g, int margined);\n_UI_EXTERN uiGroup *uiNewGroup(const char *title);\n\n// spinbox/slider rules:\n// setting value outside of range will automatically clamp\n// initial value is minimum\n// complaint if min >= max?\n\ntypedef struct uiSpinbox uiSpinbox;\n#define uiSpinbox(this) ((uiSpinbox *) (this))\n_UI_EXTERN int uiSpinboxValue(uiSpinbox *s);\n_UI_EXTERN void uiSpinboxSetValue(uiSpinbox *s, int value);\n_UI_EXTERN void uiSpinboxOnChanged(uiSpinbox *s, void (*f)(uiSpinbox *s, void *data), void *data);\n_UI_EXTERN uiSpinbox *uiNewSpinbox(int min, int max);\n\ntypedef struct uiSlider uiSlider;\n#define uiSlider(this) ((uiSlider *) (this))\n_UI_EXTERN int uiSliderValue(uiSlider *s);\n_UI_EXTERN void uiSliderSetValue(uiSlider *s, int value);\n_UI_EXTERN void uiSliderOnChanged(uiSlider *s, void (*f)(uiSlider *s, void *data), void *data);\n_UI_EXTERN uiSlider *uiNewSlider(int min, int max);\n\ntypedef struct uiProgressBar uiProgressBar;\n#define uiProgressBar(this) ((uiProgressBar *) (this))\n_UI_EXTERN int uiProgressBarValue(uiProgressBar *p);\n_UI_EXTERN void uiProgressBarSetValue(uiProgressBar *p, int n);\n_UI_EXTERN uiProgressBar *uiNewProgressBar(void);\n\ntypedef struct uiSeparator uiSeparator;\n#define uiSeparator(this) ((uiSeparator *) (this))\n_UI_EXTERN uiSeparator *uiNewHorizontalSeparator(void);\n_UI_EXTERN uiSeparator *uiNewVerticalSeparator(void);\n\ntypedef struct uiCombobox uiCombobox;\n#define uiCombobox(this) ((uiCombobox *) (this))\n_UI_EXTERN void uiComboboxAppend(uiCombobox *c, const char *text);\n_UI_EXTERN int uiComboboxSelected(uiCombobox *c);\n_UI_EXTERN void uiComboboxSetSelected(uiCombobox *c, int n);\n_UI_EXTERN void uiComboboxOnSelected(uiCombobox *c, void (*f)(uiCombobox *c, void *data), void *data);\n_UI_EXTERN uiCombobox *uiNewCombobox(void);\n\ntypedef struct uiEditableCombobox uiEditableCombobox;\n#define uiEditableCombobox(this) ((uiEditableCombobox *) (this))\n_UI_EXTERN void uiEditableComboboxAppend(uiEditableCombobox *c, const char *text);\n_UI_EXTERN char *uiEditableComboboxText(uiEditableCombobox *c);\n_UI_EXTERN void uiEditableComboboxSetText(uiEditableCombobox *c, const char *text);\n// TODO what do we call a function that sets the currently selected item and fills the text field with it? editable comboboxes have no consistent concept of selected item\n_UI_EXTERN void uiEditableComboboxOnChanged(uiEditableCombobox *c, void (*f)(uiEditableCombobox *c, void *data), void *data);\n_UI_EXTERN uiEditableCombobox *uiNewEditableCombobox(void);\n\ntypedef struct uiRadioButtons uiRadioButtons;\n#define uiRadioButtons(this) ((uiRadioButtons *) (this))\n_UI_EXTERN void uiRadioButtonsAppend(uiRadioButtons *r, const char *text);\n_UI_EXTERN int uiRadioButtonsSelected(uiRadioButtons *r);\n_UI_EXTERN void uiRadioButtonsSetSelected(uiRadioButtons *r, int n);\n_UI_EXTERN void uiRadioButtonsOnSelected(uiRadioButtons *r, void (*f)(uiRadioButtons *, void *), void *data);\n_UI_EXTERN uiRadioButtons *uiNewRadioButtons(void);\n\nstruct tm;\ntypedef struct uiDateTimePicker uiDateTimePicker;\n#define uiDateTimePicker(this) ((uiDateTimePicker *) (this))\n// TODO document that tm_wday and tm_yday are undefined, and tm_isdst should be -1\n// TODO document that for both sides\n// TODO document time zone conversions or lack thereof\n// TODO for Time: define what values are returned when a part is missing\n_UI_EXTERN void uiDateTimePickerTime(uiDateTimePicker *d, struct tm *time);\n_UI_EXTERN void uiDateTimePickerSetTime(uiDateTimePicker *d, const struct tm *time);\n_UI_EXTERN void uiDateTimePickerOnChanged(uiDateTimePicker *d, void (*f)(uiDateTimePicker *, void *), void *data);\n_UI_EXTERN uiDateTimePicker *uiNewDateTimePicker(void);\n_UI_EXTERN uiDateTimePicker *uiNewDatePicker(void);\n_UI_EXTERN uiDateTimePicker *uiNewTimePicker(void);\n\n// TODO provide a facility for entering tab stops?\ntypedef struct uiMultilineEntry uiMultilineEntry;\n#define uiMultilineEntry(this) ((uiMultilineEntry *) (this))\n_UI_EXTERN char *uiMultilineEntryText(uiMultilineEntry *e);\n_UI_EXTERN void uiMultilineEntrySetText(uiMultilineEntry *e, const char *text);\n_UI_EXTERN void uiMultilineEntryAppend(uiMultilineEntry *e, const char *text);\n_UI_EXTERN void uiMultilineEntryOnChanged(uiMultilineEntry *e, void (*f)(uiMultilineEntry *e, void *data), void *data);\n_UI_EXTERN int uiMultilineEntryReadOnly(uiMultilineEntry *e);\n_UI_EXTERN void uiMultilineEntrySetReadOnly(uiMultilineEntry *e, int readonly);\n_UI_EXTERN uiMultilineEntry *uiNewMultilineEntry(void);\n_UI_EXTERN uiMultilineEntry *uiNewNonWrappingMultilineEntry(void);\n\ntypedef struct uiMenuItem uiMenuItem;\n#define uiMenuItem(this) ((uiMenuItem *) (this))\n_UI_EXTERN void uiMenuItemEnable(uiMenuItem *m);\n_UI_EXTERN void uiMenuItemDisable(uiMenuItem *m);\n_UI_EXTERN void uiMenuItemOnClicked(uiMenuItem *m, void (*f)(uiMenuItem *sender, uiWindow *window, void *data), void *data);\n_UI_EXTERN int uiMenuItemChecked(uiMenuItem *m);\n_UI_EXTERN void uiMenuItemSetChecked(uiMenuItem *m, int checked);\n\ntypedef struct uiMenu uiMenu;\n#define uiMenu(this) ((uiMenu *) (this))\n_UI_EXTERN uiMenuItem *uiMenuAppendItem(uiMenu *m, const char *name);\n_UI_EXTERN uiMenuItem *uiMenuAppendCheckItem(uiMenu *m, const char *name);\n_UI_EXTERN uiMenuItem *uiMenuAppendQuitItem(uiMenu *m);\n_UI_EXTERN uiMenuItem *uiMenuAppendPreferencesItem(uiMenu *m);\n_UI_EXTERN uiMenuItem *uiMenuAppendAboutItem(uiMenu *m);\n_UI_EXTERN void uiMenuAppendSeparator(uiMenu *m);\n_UI_EXTERN uiMenu *uiNewMenu(const char *name);\n\n_UI_EXTERN char *uiOpenFile(uiWindow *parent);\n_UI_EXTERN char *uiSaveFile(uiWindow *parent);\n_UI_EXTERN void uiMsgBox(uiWindow *parent, const char *title, const char *description);\n_UI_EXTERN void uiMsgBoxError(uiWindow *parent, const char *title, const char *description);\n\ntypedef struct uiArea uiArea;\ntypedef struct uiAreaHandler uiAreaHandler;\ntypedef struct uiAreaDrawParams uiAreaDrawParams;\ntypedef struct uiAreaMouseEvent uiAreaMouseEvent;\ntypedef struct uiAreaKeyEvent uiAreaKeyEvent;\n\ntypedef struct uiDrawContext uiDrawContext;\n\nstruct uiAreaHandler {\n\tvoid (*Draw)(uiAreaHandler *, uiArea *, uiAreaDrawParams *);\n\t// TODO document that resizes cause a full redraw for non-scrolling areas; implementation-defined for scrolling areas\n\tvoid (*MouseEvent)(uiAreaHandler *, uiArea *, uiAreaMouseEvent *);\n\t// TODO document that on first show if the mouse is already in the uiArea then one gets sent with left=0\n\t// TODO what about when the area is hidden and then shown again?\n\tvoid (*MouseCrossed)(uiAreaHandler *, uiArea *, int left);\n\tvoid (*DragBroken)(uiAreaHandler *, uiArea *);\n\tint (*KeyEvent)(uiAreaHandler *, uiArea *, uiAreaKeyEvent *);\n};\n\n// TODO RTL layouts?\n// TODO reconcile edge and corner naming\n_UI_ENUM(uiWindowResizeEdge) {\n\tuiWindowResizeEdgeLeft,\n\tuiWindowResizeEdgeTop,\n\tuiWindowResizeEdgeRight,\n\tuiWindowResizeEdgeBottom,\n\tuiWindowResizeEdgeTopLeft,\n\tuiWindowResizeEdgeTopRight,\n\tuiWindowResizeEdgeBottomLeft,\n\tuiWindowResizeEdgeBottomRight,\n\t// TODO have one for keyboard resizes?\n\t// TODO GDK doesn't seem to have any others, including for keyboards...\n\t// TODO way to bring up the system menu instead?\n};\n\n#define uiArea(this) ((uiArea *) (this))\n// TODO give a better name\n// TODO document the types of width and height\n_UI_EXTERN void uiAreaSetSize(uiArea *a, int width, int height);\n// TODO uiAreaQueueRedraw()\n_UI_EXTERN void uiAreaQueueRedrawAll(uiArea *a);\n_UI_EXTERN void uiAreaScrollTo(uiArea *a, double x, double y, double width, double height);\n// TODO document these can only be called within Mouse() handlers\n// TODO should these be allowed on scrolling areas?\n// TODO decide which mouse events should be accepted; Down is the only one guaranteed to work right now\n// TODO what happens to events after calling this up to and including the next mouse up?\n// TODO release capture?\n_UI_EXTERN void uiAreaBeginUserWindowMove(uiArea *a);\n_UI_EXTERN void uiAreaBeginUserWindowResize(uiArea *a, uiWindowResizeEdge edge);\n_UI_EXTERN uiArea *uiNewArea(uiAreaHandler *ah);\n_UI_EXTERN uiArea *uiNewScrollingArea(uiAreaHandler *ah, int width, int height);\n\nstruct uiAreaDrawParams {\n\tuiDrawContext *Context;\n\n\t// TODO document that this is only defined for nonscrolling areas\n\tdouble AreaWidth;\n\tdouble AreaHeight;\n\n\tdouble ClipX;\n\tdouble ClipY;\n\tdouble ClipWidth;\n\tdouble ClipHeight;\n};\n\ntypedef struct uiDrawPath uiDrawPath;\ntypedef struct uiDrawBrush uiDrawBrush;\ntypedef struct uiDrawStrokeParams uiDrawStrokeParams;\ntypedef struct uiDrawMatrix uiDrawMatrix;\n\ntypedef struct uiDrawBrushGradientStop uiDrawBrushGradientStop;\n\n_UI_ENUM(uiDrawBrushType) {\n\tuiDrawBrushTypeSolid,\n\tuiDrawBrushTypeLinearGradient,\n\tuiDrawBrushTypeRadialGradient,\n\tuiDrawBrushTypeImage,\n};\n\n_UI_ENUM(uiDrawLineCap) {\n\tuiDrawLineCapFlat,\n\tuiDrawLineCapRound,\n\tuiDrawLineCapSquare,\n};\n\n_UI_ENUM(uiDrawLineJoin) {\n\tuiDrawLineJoinMiter,\n\tuiDrawLineJoinRound,\n\tuiDrawLineJoinBevel,\n};\n\n// this is the default for botoh cairo and Direct2D (in the latter case, from the C++ helper functions)\n// Core Graphics doesn't explicitly specify a default, but NSBezierPath allows you to choose one, and this is the initial value\n// so we're good to use it too!\n#define uiDrawDefaultMiterLimit 10.0\n\n_UI_ENUM(uiDrawFillMode) {\n\tuiDrawFillModeWinding,\n\tuiDrawFillModeAlternate,\n};\n\nstruct uiDrawMatrix {\n\tdouble M11;\n\tdouble M12;\n\tdouble M21;\n\tdouble M22;\n\tdouble M31;\n\tdouble M32;\n};\n\nstruct uiDrawBrush {\n\tuiDrawBrushType Type;\n\n\t// solid brushes\n\tdouble R;\n\tdouble G;\n\tdouble B;\n\tdouble A;\n\n\t// gradient brushes\n\tdouble X0;\t\t// linear: start X, radial: start X\n\tdouble Y0;\t\t// linear: start Y, radial: start Y\n\tdouble X1;\t\t// linear: end X, radial: outer circle center X\n\tdouble Y1;\t\t// linear: end Y, radial: outer circle center Y\n\tdouble OuterRadius;\t\t// radial gradients only\n\tuiDrawBrushGradientStop *Stops;\n\tsize_t NumStops;\n\t// TODO extend mode\n\t// cairo: none, repeat, reflect, pad; no individual control\n\t// Direct2D: repeat, reflect, pad; no individual control\n\t// Core Graphics: none, pad; before and after individually\n\t// TODO cairo documentation is inconsistent about pad\n\n\t// TODO images\n\n\t// TODO transforms\n};\n\nstruct uiDrawBrushGradientStop {\n\tdouble Pos;\n\tdouble R;\n\tdouble G;\n\tdouble B;\n\tdouble A;\n};\n\nstruct uiDrawStrokeParams {\n\tuiDrawLineCap Cap;\n\tuiDrawLineJoin Join;\n\t// TODO what if this is 0? on windows there will be a crash with dashing\n\tdouble Thickness;\n\tdouble MiterLimit;\n\tdouble *Dashes;\n\t// TOOD what if this is 1 on Direct2D?\n\t// TODO what if a dash is 0 on Cairo or Quartz?\n\tsize_t NumDashes;\n\tdouble DashPhase;\n};\n\n_UI_EXTERN uiDrawPath *uiDrawNewPath(uiDrawFillMode fillMode);\n_UI_EXTERN void uiDrawFreePath(uiDrawPath *p);\n\n_UI_EXTERN void uiDrawPathNewFigure(uiDrawPath *p, double x, double y);\n_UI_EXTERN void uiDrawPathNewFigureWithArc(uiDrawPath *p, double xCenter, double yCenter, double radius, double startAngle, double sweep, int negative);\n_UI_EXTERN void uiDrawPathLineTo(uiDrawPath *p, double x, double y);\n// notes: angles are both relative to 0 and go counterclockwise\n// TODO is the initial line segment on cairo and OS X a proper join?\n// TODO what if sweep < 0?\n_UI_EXTERN void uiDrawPathArcTo(uiDrawPath *p, double xCenter, double yCenter, double radius, double startAngle, double sweep, int negative);\n_UI_EXTERN void uiDrawPathBezierTo(uiDrawPath *p, double c1x, double c1y, double c2x, double c2y, double endX, double endY);\n// TODO quadratic bezier\n_UI_EXTERN void uiDrawPathCloseFigure(uiDrawPath *p);\n\n// TODO effect of these when a figure is already started\n_UI_EXTERN void uiDrawPathAddRectangle(uiDrawPath *p, double x, double y, double width, double height);\n\n_UI_EXTERN void uiDrawPathEnd(uiDrawPath *p);\n\n_UI_EXTERN void uiDrawStroke(uiDrawContext *c, uiDrawPath *path, uiDrawBrush *b, uiDrawStrokeParams *p);\n_UI_EXTERN void uiDrawFill(uiDrawContext *c, uiDrawPath *path, uiDrawBrush *b);\n\n// TODO primitives:\n// - rounded rectangles\n// - elliptical arcs\n// - quadratic bezier curves\n\n_UI_EXTERN void uiDrawMatrixSetIdentity(uiDrawMatrix *m);\n_UI_EXTERN void uiDrawMatrixTranslate(uiDrawMatrix *m, double x, double y);\n_UI_EXTERN void uiDrawMatrixScale(uiDrawMatrix *m, double xCenter, double yCenter, double x, double y);\n_UI_EXTERN void uiDrawMatrixRotate(uiDrawMatrix *m, double x, double y, double amount);\n_UI_EXTERN void uiDrawMatrixSkew(uiDrawMatrix *m, double x, double y, double xamount, double yamount);\n_UI_EXTERN void uiDrawMatrixMultiply(uiDrawMatrix *dest, uiDrawMatrix *src);\n_UI_EXTERN int uiDrawMatrixInvertible(uiDrawMatrix *m);\n_UI_EXTERN int uiDrawMatrixInvert(uiDrawMatrix *m);\n_UI_EXTERN void uiDrawMatrixTransformPoint(uiDrawMatrix *m, double *x, double *y);\n_UI_EXTERN void uiDrawMatrixTransformSize(uiDrawMatrix *m, double *x, double *y);\n\n_UI_EXTERN void uiDrawTransform(uiDrawContext *c, uiDrawMatrix *m);\n\n// TODO add a uiDrawPathStrokeToFill() or something like that\n_UI_EXTERN void uiDrawClip(uiDrawContext *c, uiDrawPath *path);\n\n_UI_EXTERN void uiDrawSave(uiDrawContext *c);\n_UI_EXTERN void uiDrawRestore(uiDrawContext *c);\n\n// uiAttribute stores information about an attribute in a\n// uiAttributedString.\n//\n// You do not create uiAttributes directly; instead, you create a\n// uiAttribute of a given type using the specialized constructor\n// functions. For every Unicode codepoint in the uiAttributedString,\n// at most one value of each attribute type can be applied.\n//\n// uiAttributes are immutable and the uiAttributedString takes\n// ownership of the uiAttribute object once assigned, copying its\n// contents as necessary.\ntypedef struct uiAttribute uiAttribute;\n\n// @role uiAttribute destructor\n// uiFreeAttribute() frees a uiAttribute. You generally do not need to\n// call this yourself, as uiAttributedString does this for you. In fact,\n// it is an error to call this function on a uiAttribute that has been\n// given to a uiAttributedString. You can call this, however, if you\n// created a uiAttribute that you aren't going to use later.\n_UI_EXTERN void uiFreeAttribute(uiAttribute *a);\n\n// uiAttributeType holds the possible uiAttribute types that may be\n// returned by uiAttributeGetType(). Refer to the documentation for\n// each type's constructor function for details on each type.\n_UI_ENUM(uiAttributeType) {\n\tuiAttributeTypeFamily,\n\tuiAttributeTypeSize,\n\tuiAttributeTypeWeight,\n\tuiAttributeTypeItalic,\n\tuiAttributeTypeStretch,\n\tuiAttributeTypeColor,\n\tuiAttributeTypeBackground,\n\tuiAttributeTypeUnderline,\n\tuiAttributeTypeUnderlineColor,\n\tuiAttributeTypeFeatures,\n};\n\n// uiAttributeGetType() returns the type of a.\n// TODO I don't like this name\n_UI_EXTERN uiAttributeType uiAttributeGetType(const uiAttribute *a);\n\n// uiNewFamilyAttribute() creates a new uiAttribute that changes the\n// font family of the text it is applied to. family is copied; you do not\n// need to keep it alive after uiNewFamilyAttribute() returns. Font\n// family names are case-insensitive.\n_UI_EXTERN uiAttribute *uiNewFamilyAttribute(const char *family);\n\n// uiAttributeFamily() returns the font family stored in a. The\n// returned string is owned by a. It is an error to call this on a\n// uiAttribute that does not hold a font family.\n_UI_EXTERN const char *uiAttributeFamily(const uiAttribute *a);\n\n// uiNewSizeAttribute() creates a new uiAttribute that changes the\n// size of the text it is applied to, in typographical points.\n_UI_EXTERN uiAttribute *uiNewSizeAttribute(double size);\n\n// uiAttributeSize() returns the font size stored in a. It is an error to\n// call this on a uiAttribute that does not hold a font size.\n_UI_EXTERN double uiAttributeSize(const uiAttribute *a);\n\n// uiTextWeight represents possible text weights. These roughly\n// map to the OS/2 text weight field of TrueType and OpenType\n// fonts, or to CSS weight numbers. The named constants are\n// nominal values; the actual values may vary by font and by OS,\n// though this isn't particularly likely. Any value between\n// uiTextWeightMinimum and uiTextWeightMaximum, inclusive,\n// is allowed.\n//\n// Note that due to restrictions in early versions of Windows, some\n// fonts have \"special\" weights be exposed in many programs as\n// separate font families. This is perhaps most notable with\n// Arial Black. libui does not do this, even on Windows (because the\n// DirectWrite API libui uses on Windows does not do this); to\n// specify Arial Black, use family Arial and weight uiTextWeightBlack.\n_UI_ENUM(uiTextWeight) {\n\tuiTextWeightMinimum = 0,\n\tuiTextWeightThin = 100,\n\tuiTextWeightUltraLight = 200,\n\tuiTextWeightLight = 300,\n\tuiTextWeightBook = 350,\n\tuiTextWeightNormal = 400,\n\tuiTextWeightMedium = 500,\n\tuiTextWeightSemiBold = 600,\n\tuiTextWeightBold = 700,\n\tuiTextWeightUltraBold = 800,\n\tuiTextWeightHeavy = 900,\n\tuiTextWeightUltraHeavy = 950,\n\tuiTextWeightMaximum = 1000,\n};\n\n// uiNewWeightAttribute() creates a new uiAttribute that changes the\n// weight of the text it is applied to. It is an error to specify a weight\n// outside the range [uiTextWeightMinimum,\n// uiTextWeightMaximum].\n_UI_EXTERN uiAttribute *uiNewWeightAttribute(uiTextWeight weight);\n\n// uiAttributeWeight() returns the font weight stored in a. It is an error\n// to call this on a uiAttribute that does not hold a font weight.\n_UI_EXTERN uiTextWeight uiAttributeWeight(const uiAttribute *a);\n\n// uiTextItalic represents possible italic modes for a font. Italic\n// represents \"true\" italics where the slanted glyphs have custom\n// shapes, whereas oblique represents italics that are merely slanted\n// versions of the normal glyphs. Most fonts usually have one or the\n// other.\n_UI_ENUM(uiTextItalic) {\n\tuiTextItalicNormal,\n\tuiTextItalicOblique,\n\tuiTextItalicItalic,\n};\n\n// uiNewItalicAttribute() creates a new uiAttribute that changes the\n// italic mode of the text it is applied to. It is an error to specify an\n// italic mode not specified in uiTextItalic.\n_UI_EXTERN uiAttribute *uiNewItalicAttribute(uiTextItalic italic);\n\n// uiAttributeItalic() returns the font italic mode stored in a. It is an\n// error to call this on a uiAttribute that does not hold a font italic\n// mode.\n_UI_EXTERN uiTextItalic uiAttributeItalic(const uiAttribute *a);\n\n// uiTextStretch represents possible stretches (also called \"widths\")\n// of a font.\n//\n// Note that due to restrictions in early versions of Windows, some\n// fonts have \"special\" stretches be exposed in many programs as\n// separate font families. This is perhaps most notable with\n// Arial Condensed. libui does not do this, even on Windows (because\n// the DirectWrite API libui uses on Windows does not do this); to\n// specify Arial Condensed, use family Arial and stretch\n// uiTextStretchCondensed.\n_UI_ENUM(uiTextStretch) {\n\tuiTextStretchUltraCondensed,\n\tuiTextStretchExtraCondensed,\n\tuiTextStretchCondensed,\n\tuiTextStretchSemiCondensed,\n\tuiTextStretchNormal,\n\tuiTextStretchSemiExpanded,\n\tuiTextStretchExpanded,\n\tuiTextStretchExtraExpanded,\n\tuiTextStretchUltraExpanded,\n};\n\n// uiNewStretchAttribute() creates a new uiAttribute that changes the\n// stretch of the text it is applied to. It is an error to specify a strech\n// not specified in uiTextStretch.\n_UI_EXTERN uiAttribute *uiNewStretchAttribute(uiTextStretch stretch);\n\n// uiAttributeStretch() returns the font stretch stored in a. It is an\n// error to call this on a uiAttribute that does not hold a font stretch.\n_UI_EXTERN uiTextStretch uiAttributeStretch(const uiAttribute *a);\n\n// uiNewColorAttribute() creates a new uiAttribute that changes the\n// color of the text it is applied to. It is an error to specify an invalid\n// color.\n_UI_EXTERN uiAttribute *uiNewColorAttribute(double r, double g, double b, double a);\n\n// uiAttributeColor() returns the text color stored in a. It is an\n// error to call this on a uiAttribute that does not hold a text color.\n_UI_EXTERN void uiAttributeColor(const uiAttribute *a, double *r, double *g, double *b, double *alpha);\n\n// uiNewBackgroundAttribute() creates a new uiAttribute that\n// changes the background color of the text it is applied to. It is an\n// error to specify an invalid color.\n_UI_EXTERN uiAttribute *uiNewBackgroundAttribute(double r, double g, double b, double a);\n\n// TODO reuse uiAttributeColor() for background colors, or make a new function...\n\n// uiUnderline specifies a type of underline to use on text.\n_UI_ENUM(uiUnderline) {\n\tuiUnderlineNone,\n\tuiUnderlineSingle,\n\tuiUnderlineDouble,\n\tuiUnderlineSuggestion,\t\t// wavy or dotted underlines used for spelling/grammar checkers\n};\n\n// uiNewUnderlineAttribute() creates a new uiAttribute that changes\n// the type of underline on the text it is applied to. It is an error to\n// specify an underline type not specified in uiUnderline.\n_UI_EXTERN uiAttribute *uiNewUnderlineAttribute(uiUnderline u);\n\n// uiAttributeUnderline() returns the underline type stored in a. It is\n// an error to call this on a uiAttribute that does not hold an underline\n// style.\n_UI_EXTERN uiUnderline uiAttributeUnderline(const uiAttribute *a);\n\n// uiUnderlineColor specifies the color of any underline on the text it\n// is applied to, regardless of the type of underline. In addition to\n// being able to specify a custom color, you can explicitly specify\n// platform-specific colors for suggestion underlines; to use them\n// correctly, pair them with uiUnderlineSuggestion (though they can\n// be used on other types of underline as well).\n// \n// If an underline type is applied but no underline color is\n// specified, the text color is used instead. If an underline color\n// is specified without an underline type, the underline color\n// attribute is ignored, but not removed from the uiAttributedString.\n_UI_ENUM(uiUnderlineColor) {\n\tuiUnderlineColorCustom,\n\tuiUnderlineColorSpelling,\n\tuiUnderlineColorGrammar,\n\tuiUnderlineColorAuxiliary,\t\t// for instance, the color used by smart replacements on macOS or in Microsoft Office\n};\n\n// uiNewUnderlineColorAttribute() creates a new uiAttribute that\n// changes the color of the underline on the text it is applied to.\n// It is an error to specify an underline color not specified in\n// uiUnderlineColor.\n//\n// If the specified color type is uiUnderlineColorCustom, it is an\n// error to specify an invalid color value. Otherwise, the color values\n// are ignored and should be specified as zero.\n_UI_EXTERN uiAttribute *uiNewUnderlineColorAttribute(uiUnderlineColor u, double r, double g, double b, double a);\n\n// uiAttributeUnderlineColor() returns the underline color stored in\n// a. It is an error to call this on a uiAttribute that does not hold an\n// underline color.\n_UI_EXTERN void uiAttributeUnderlineColor(const uiAttribute *a, uiUnderlineColor *u, double *r, double *g, double *b, double *alpha);\n\n// uiOpenTypeFeatures represents a set of OpenType feature\n// tag-value pairs, for applying OpenType features to text.\n// OpenType feature tags are four-character codes defined by\n// OpenType that cover things from design features like small\n// caps and swashes to language-specific glyph shapes and\n// beyond. Each tag may only appear once in any given\n// uiOpenTypeFeatures instance. Each value is a 32-bit integer,\n// often used as a Boolean flag, but sometimes as an index to choose\n// a glyph shape to use.\n// \n// If a font does not support a certain feature, that feature will be\n// ignored. (TODO verify this on all OSs)\n// \n// See the OpenType specification at\n// https://www.microsoft.com/typography/otspec/featuretags.htm\n// for the complete list of available features, information on specific\n// features, and how to use them.\n// TODO invalid features\ntypedef struct uiOpenTypeFeatures uiOpenTypeFeatures;\n\n// uiOpenTypeFeaturesForEachFunc is the type of the function\n// invoked by uiOpenTypeFeaturesForEach() for every OpenType\n// feature in otf. Refer to that function's documentation for more\n// details.\ntypedef uiForEach (*uiOpenTypeFeaturesForEachFunc)(const uiOpenTypeFeatures *otf, char a, char b, char c, char d, uint32_t value, void *data);\n\n// @role uiOpenTypeFeatures constructor\n// uiNewOpenTypeFeatures() returns a new uiOpenTypeFeatures\n// instance, with no tags yet added.\n_UI_EXTERN uiOpenTypeFeatures *uiNewOpenTypeFeatures(void);\n\n// @role uiOpenTypeFeatures destructor\n// uiFreeOpenTypeFeatures() frees otf.\n_UI_EXTERN void uiFreeOpenTypeFeatures(uiOpenTypeFeatures *otf);\n\n// uiOpenTypeFeaturesClone() makes a copy of otf and returns it.\n// Changing one will not affect the other.\n_UI_EXTERN uiOpenTypeFeatures *uiOpenTypeFeaturesClone(const uiOpenTypeFeatures *otf);\n\n// uiOpenTypeFeaturesAdd() adds the given feature tag and value\n// to otf. The feature tag is specified by a, b, c, and d. If there is\n// already a value associated with the specified tag in otf, the old\n// value is removed.\n_UI_EXTERN void uiOpenTypeFeaturesAdd(uiOpenTypeFeatures *otf, char a, char b, char c, char d, uint32_t value);\n\n// uiOpenTypeFeaturesRemove() removes the given feature tag\n// and value from otf. If the tag is not present in otf,\n// uiOpenTypeFeaturesRemove() does nothing.\n_UI_EXTERN void uiOpenTypeFeaturesRemove(uiOpenTypeFeatures *otf, char a, char b, char c, char d);\n\n// uiOpenTypeFeaturesGet() determines whether the given feature\n// tag is present in otf. If it is, *value is set to the tag's value and\n// nonzero is returned. Otherwise, zero is returned.\n// \n// Note that if uiOpenTypeFeaturesGet() returns zero, value isn't\n// changed. This is important: if a feature is not present in a\n// uiOpenTypeFeatures, the feature is NOT treated as if its\n// value was zero anyway. Script-specific font shaping rules and\n// font-specific feature settings may use a different default value\n// for a feature. You should likewise not treat a missing feature as\n// having a value of zero either. Instead, a missing feature should\n// be treated as having some unspecified default value.\n_UI_EXTERN int uiOpenTypeFeaturesGet(const uiOpenTypeFeatures *otf, char a, char b, char c, char d, uint32_t *value);\n\n// uiOpenTypeFeaturesForEach() executes f for every tag-value\n// pair in otf. The enumeration order is unspecified. You cannot\n// modify otf while uiOpenTypeFeaturesForEach() is running.\n_UI_EXTERN void uiOpenTypeFeaturesForEach(const uiOpenTypeFeatures *otf, uiOpenTypeFeaturesForEachFunc f, void *data);\n\n// uiNewFeaturesAttribute() creates a new uiAttribute that changes\n// the font family of the text it is applied to. otf is copied; you may\n// free it after uiNewFeaturesAttribute() returns.\n_UI_EXTERN uiAttribute *uiNewFeaturesAttribute(const uiOpenTypeFeatures *otf);\n\n// uiAttributeFeatures() returns the OpenType features stored in a.\n// The returned uiOpenTypeFeatures object is owned by a. It is an\n// error to call this on a uiAttribute that does not hold OpenType\n// features.\n_UI_EXTERN const uiOpenTypeFeatures *uiAttributeFeatures(const uiAttribute *a);\n\n// uiAttributedString represents a string of UTF-8 text that can\n// optionally be embellished with formatting attributes. libui\n// provides the list of formatting attributes, which cover common\n// formatting traits like boldface and color as well as advanced\n// typographical features provided by OpenType like superscripts\n// and small caps. These attributes can be combined in a variety of\n// ways.\n//\n// Attributes are applied to runs of Unicode codepoints in the string.\n// Zero-length runs are elided. Consecutive runs that have the same\n// attribute type and value are merged. Each attribute is independent\n// of each other attribute; overlapping attributes of different types\n// do not split each other apart, but different values of the same\n// attribute type do.\n//\n// The empty string can also be represented by uiAttributedString,\n// but because of the no-zero-length-attribute rule, it will not have\n// attributes.\n//\n// A uiAttributedString takes ownership of all attributes given to\n// it, as it may need to duplicate or delete uiAttribute objects at\n// any time. By extension, when you free a uiAttributedString,\n// all uiAttributes within will also be freed. Each method will\n// describe its own rules in more details.\n//\n// In addition, uiAttributedString provides facilities for moving\n// between grapheme clusters, which represent a character\n// from the point of view of the end user. The cursor of a text editor\n// is always placed on a grapheme boundary, so you can use these\n// features to move the cursor left or right by one \"character\".\n// TODO does uiAttributedString itself need this\n//\n// uiAttributedString does not provide enough information to be able\n// to draw itself onto a uiDrawContext or respond to user actions.\n// In order to do that, you'll need to use a uiDrawTextLayout, which\n// is built from the combination of a uiAttributedString and a set of\n// layout-specific properties.\ntypedef struct uiAttributedString uiAttributedString;\n\n// uiAttributedStringForEachAttributeFunc is the type of the function\n// invoked by uiAttributedStringForEachAttribute() for every\n// attribute in s. Refer to that function's documentation for more\n// details.\ntypedef uiForEach (*uiAttributedStringForEachAttributeFunc)(const uiAttributedString *s, const uiAttribute *a, size_t start, size_t end, void *data);\n\n// @role uiAttributedString constructor\n// uiNewAttributedString() creates a new uiAttributedString from\n// initialString. The string will be entirely unattributed.\n_UI_EXTERN uiAttributedString *uiNewAttributedString(const char *initialString);\n\n// @role uiAttributedString destructor\n// uiFreeAttributedString() destroys the uiAttributedString s.\n// It will also free all uiAttributes within.\n_UI_EXTERN void uiFreeAttributedString(uiAttributedString *s);\n\n// uiAttributedStringString() returns the textual content of s as a\n// '\\0'-terminated UTF-8 string. The returned pointer is valid until\n// the next change to the textual content of s.\n_UI_EXTERN const char *uiAttributedStringString(const uiAttributedString *s);\n\n// uiAttributedStringLength() returns the number of UTF-8 bytes in\n// the textual content of s, excluding the terminating '\\0'.\n_UI_EXTERN size_t uiAttributedStringLen(const uiAttributedString *s);\n\n// uiAttributedStringAppendUnattributed() adds the '\\0'-terminated\n// UTF-8 string str to the end of s. The new substring will be\n// unattributed.\n_UI_EXTERN void uiAttributedStringAppendUnattributed(uiAttributedString *s, const char *str);\n\n// uiAttributedStringInsertAtUnattributed() adds the '\\0'-terminated\n// UTF-8 string str to s at the byte position specified by at. The new\n// substring will be unattributed; existing attributes will be moved\n// along with their text.\n_UI_EXTERN void uiAttributedStringInsertAtUnattributed(uiAttributedString *s, const char *str, size_t at);\n\n// TODO add the Append and InsertAtExtendingAttributes functions\n// TODO and add functions that take a string + length\n\n// uiAttributedStringDelete() deletes the characters and attributes of\n// s in the byte range [start, end).\n_UI_EXTERN void uiAttributedStringDelete(uiAttributedString *s, size_t start, size_t end);\n\n// TODO add a function to uiAttributedString to get an attribute's value at a specific index or in a specific range, so we can edit\n\n// uiAttributedStringSetAttribute() sets a in the byte range [start, end)\n// of s. Any existing attributes in that byte range of the same type are\n// removed. s takes ownership of a; you should not use it after\n// uiAttributedStringSetAttribute() returns.\n_UI_EXTERN void uiAttributedStringSetAttribute(uiAttributedString *s, uiAttribute *a, size_t start, size_t end);\n\n// uiAttributedStringForEachAttribute() enumerates all the\n// uiAttributes in s. It is an error to modify s in f. Within f, s still\n// owns the attribute; you can neither free it nor save it for later\n// use.\n// TODO reword the above for consistency (TODO and find out what I meant by that)\n// TODO define an enumeration order (or mark it as undefined); also define how consecutive runs of identical attributes are handled here and sync with the definition of uiAttributedString itself\n_UI_EXTERN void uiAttributedStringForEachAttribute(const uiAttributedString *s, uiAttributedStringForEachAttributeFunc f, void *data);\n\n// TODO const correct this somehow (the implementation needs to mutate the structure)\n_UI_EXTERN size_t uiAttributedStringNumGraphemes(uiAttributedString *s);\n\n// TODO const correct this somehow (the implementation needs to mutate the structure)\n_UI_EXTERN size_t uiAttributedStringByteIndexToGrapheme(uiAttributedString *s, size_t pos);\n\n// TODO const correct this somehow (the implementation needs to mutate the structure)\n_UI_EXTERN size_t uiAttributedStringGraphemeToByteIndex(uiAttributedString *s, size_t pos);\n\n// uiFontDescriptor provides a complete description of a font where\n// one is needed. Currently, this means as the default font of a\n// uiDrawTextLayout and as the data returned by uiFontButton.\n// All the members operate like the respective uiAttributes.\ntypedef struct uiFontDescriptor uiFontDescriptor;\n\nstruct uiFontDescriptor {\n\t// TODO const-correct this or figure out how to deal with this when getting a value\n\tchar *Family;\n\tdouble Size;\n\tuiTextWeight Weight;\n\tuiTextItalic Italic;\n\tuiTextStretch Stretch;\n};\n\n// uiDrawTextLayout is a concrete representation of a\n// uiAttributedString that can be displayed in a uiDrawContext.\n// It includes information important for the drawing of a block of\n// text, including the bounding box to wrap the text within, the\n// alignment of lines of text within that box, areas to mark as\n// being selected, and other things.\n//\n// Unlike uiAttributedString, the content of a uiDrawTextLayout is\n// immutable once it has been created.\n//\n// TODO talk about OS-specific differences with text drawing that libui can't account for...\ntypedef struct uiDrawTextLayout uiDrawTextLayout;\n\n// uiDrawTextAlign specifies the alignment of lines of text in a\n// uiDrawTextLayout.\n// TODO should this really have Draw in the name?\n_UI_ENUM(uiDrawTextAlign) {\n\tuiDrawTextAlignLeft,\n\tuiDrawTextAlignCenter,\n\tuiDrawTextAlignRight,\n};\n\n// uiDrawTextLayoutParams describes a uiDrawTextLayout.\n// DefaultFont is used to render any text that is not attributed\n// sufficiently in String. Width determines the width of the bounding\n// box of the text; the height is determined automatically.\ntypedef struct uiDrawTextLayoutParams uiDrawTextLayoutParams;\n\n// TODO const-correct this somehow\nstruct uiDrawTextLayoutParams {\n\tuiAttributedString *String;\n\tuiFontDescriptor *DefaultFont;\n\tdouble Width;\n\tuiDrawTextAlign Align;\n};\n\n// @role uiDrawTextLayout constructor\n// uiDrawNewTextLayout() creates a new uiDrawTextLayout from\n// the given parameters.\n//\n// TODO\n// - allow creating a layout out of a substring\n// - allow marking compositon strings\n// - allow marking selections, even after creation\n// - add the following functions:\n// \t- uiDrawTextLayoutHeightForWidth() (returns the height that a layout would need to be to display the entire string at a given width)\n// \t- uiDrawTextLayoutRangeForSize() (returns what substring would fit in a given size)\n// \t- uiDrawTextLayoutNewWithHeight() (limits amount of string used by the height)\n// - some function to fix up a range (for text editing)\n_UI_EXTERN uiDrawTextLayout *uiDrawNewTextLayout(uiDrawTextLayoutParams *params);\n\n// @role uiDrawFreeTextLayout destructor\n// uiDrawFreeTextLayout() frees tl. The underlying\n// uiAttributedString is not freed.\n_UI_EXTERN void uiDrawFreeTextLayout(uiDrawTextLayout *tl);\n\n// uiDrawText() draws tl in c with the top-left point of tl at (x, y).\n_UI_EXTERN void uiDrawText(uiDrawContext *c, uiDrawTextLayout *tl, double x, double y);\n\n// uiDrawTextLayoutExtents() returns the width and height of tl\n// in width and height. The returned width may be smaller than\n// the width passed into uiDrawNewTextLayout() depending on\n// how the text in tl is wrapped. Therefore, you can use this\n// function to get the actual size of the text layout.\n_UI_EXTERN void uiDrawTextLayoutExtents(uiDrawTextLayout *tl, double *width, double *height);\n\n// TODO metrics functions\n\n// TODO number of lines visible for clipping rect, range visible for clipping rect?\n\n// uiFontButton is a button that allows users to choose a font when they click on it.\ntypedef struct uiFontButton uiFontButton;\n#define uiFontButton(this) ((uiFontButton *) (this))\n// uiFontButtonFont() returns the font currently selected in the uiFontButton in desc.\n// uiFontButtonFont() allocates resources in desc; when you are done with the font, call uiFreeFontButtonFont() to release them.\n// uiFontButtonFont() does not allocate desc itself; you must do so.\n// TODO have a function that sets an entire font descriptor to a range in a uiAttributedString at once, for SetFont?\n_UI_EXTERN void uiFontButtonFont(uiFontButton *b, uiFontDescriptor *desc);\n// TOOD SetFont, mechanics\n// uiFontButtonOnChanged() sets the function that is called when the font in the uiFontButton is changed.\n_UI_EXTERN void uiFontButtonOnChanged(uiFontButton *b, void (*f)(uiFontButton *, void *), void *data);\n// uiNewFontButton() creates a new uiFontButton. The default font selected into the uiFontButton is OS-defined.\n_UI_EXTERN uiFontButton *uiNewFontButton(void);\n// uiFreeFontButtonFont() frees resources allocated in desc by uiFontButtonFont().\n// After calling uiFreeFontButtonFont(), the contents of desc should be assumed to be undefined (though since you allocate desc itself, you can safely reuse desc for other font descriptors).\n// Calling uiFreeFontButtonFont() on a uiFontDescriptor not returned by uiFontButtonFont() results in undefined behavior.\n_UI_EXTERN void uiFreeFontButtonFont(uiFontDescriptor *desc);\n\n_UI_ENUM(uiModifiers) {\n\tuiModifierCtrl = 1 << 0,\n\tuiModifierAlt = 1 << 1,\n\tuiModifierShift = 1 << 2,\n\tuiModifierSuper = 1 << 3,\n};\n\n// TODO document drag captures\nstruct uiAreaMouseEvent {\n\t// TODO document what these mean for scrolling areas\n\tdouble X;\n\tdouble Y;\n\n\t// TODO see draw above\n\tdouble AreaWidth;\n\tdouble AreaHeight;\n\n\tint Down;\n\tint Up;\n\n\tint Count;\n\n\tuiModifiers Modifiers;\n\n\tuint64_t Held1To64;\n};\n\n_UI_ENUM(uiExtKey) {\n\tuiExtKeyEscape = 1,\n\tuiExtKeyInsert,\t\t\t// equivalent to \"Help\" on Apple keyboards\n\tuiExtKeyDelete,\n\tuiExtKeyHome,\n\tuiExtKeyEnd,\n\tuiExtKeyPageUp,\n\tuiExtKeyPageDown,\n\tuiExtKeyUp,\n\tuiExtKeyDown,\n\tuiExtKeyLeft,\n\tuiExtKeyRight,\n\tuiExtKeyF1,\t\t\t// F1..F12 are guaranteed to be consecutive\n\tuiExtKeyF2,\n\tuiExtKeyF3,\n\tuiExtKeyF4,\n\tuiExtKeyF5,\n\tuiExtKeyF6,\n\tuiExtKeyF7,\n\tuiExtKeyF8,\n\tuiExtKeyF9,\n\tuiExtKeyF10,\n\tuiExtKeyF11,\n\tuiExtKeyF12,\n\tuiExtKeyN0,\t\t\t// numpad keys; independent of Num Lock state\n\tuiExtKeyN1,\t\t\t// N0..N9 are guaranteed to be consecutive\n\tuiExtKeyN2,\n\tuiExtKeyN3,\n\tuiExtKeyN4,\n\tuiExtKeyN5,\n\tuiExtKeyN6,\n\tuiExtKeyN7,\n\tuiExtKeyN8,\n\tuiExtKeyN9,\n\tuiExtKeyNDot,\n\tuiExtKeyNEnter,\n\tuiExtKeyNAdd,\n\tuiExtKeyNSubtract,\n\tuiExtKeyNMultiply,\n\tuiExtKeyNDivide,\n};\n\nstruct uiAreaKeyEvent {\n\tchar Key;\n\tuiExtKey ExtKey;\n\tuiModifiers Modifier;\n\n\tuiModifiers Modifiers;\n\n\tint Up;\n};\n\ntypedef struct uiColorButton uiColorButton;\n#define uiColorButton(this) ((uiColorButton *) (this))\n_UI_EXTERN void uiColorButtonColor(uiColorButton *b, double *r, double *g, double *bl, double *a);\n_UI_EXTERN void uiColorButtonSetColor(uiColorButton *b, double r, double g, double bl, double a);\n_UI_EXTERN void uiColorButtonOnChanged(uiColorButton *b, void (*f)(uiColorButton *, void *), void *data);\n_UI_EXTERN uiColorButton *uiNewColorButton(void);\n\ntypedef struct uiForm uiForm;\n#define uiForm(this) ((uiForm *) (this))\n_UI_EXTERN void uiFormAppend(uiForm *f, const char *label, uiControl *c, int stretchy);\n_UI_EXTERN void uiFormDelete(uiForm *f, int index);\n_UI_EXTERN int uiFormPadded(uiForm *f);\n_UI_EXTERN void uiFormSetPadded(uiForm *f, int padded);\n_UI_EXTERN uiForm *uiNewForm(void);\n\n_UI_ENUM(uiAlign) {\n\tuiAlignFill,\n\tuiAlignStart,\n\tuiAlignCenter,\n\tuiAlignEnd,\n};\n\n_UI_ENUM(uiAt) {\n\tuiAtLeading,\n\tuiAtTop,\n\tuiAtTrailing,\n\tuiAtBottom,\n};\n\ntypedef struct uiGrid uiGrid;\n#define uiGrid(this) ((uiGrid *) (this))\n_UI_EXTERN void uiGridAppend(uiGrid *g, uiControl *c, int left, int top, int xspan, int yspan, int hexpand, uiAlign halign, int vexpand, uiAlign valign);\n_UI_EXTERN void uiGridInsertAt(uiGrid *g, uiControl *c, uiControl *existing, uiAt at, int xspan, int yspan, int hexpand, uiAlign halign, int vexpand, uiAlign valign);\n_UI_EXTERN int uiGridPadded(uiGrid *g);\n_UI_EXTERN void uiGridSetPadded(uiGrid *g, int padded);\n_UI_EXTERN uiGrid *uiNewGrid(void);\n\n// uiImage stores an image for display on screen.\n// \n// Images are built from one or more representations, each with the\n// same aspect ratio but a different pixel size. libui automatically\n// selects the most appropriate representation for drawing the image\n// when it comes time to draw the image; what this means depends\n// on the pixel density of the target context. Therefore, one can use\n// uiImage to draw higher-detailed images on higher-density\n// displays. The typical use cases are either:\n// \n// \t- have just a single representation, at which point all screens\n// \t  use the same image, and thus uiImage acts like a simple\n// \t  bitmap image, or\n// \t- have two images, one at normal resolution and one at 2x\n// \t  resolution; this matches the current expectations of some\n// \t  desktop systems at the time of writing (mid-2018)\n// \n// uiImage is very simple: it only supports premultiplied 32-bit\n// RGBA images, and libui does not provide any image file loading\n// or image format conversion utilities on top of that.\ntypedef struct uiImage uiImage;\n\n// @role uiImage constructor\n// uiNewImage creates a new uiImage with the given width and\n// height. This width and height should be the size in points of the\n// image in the device-independent case; typically this is the 1x size.\n// TODO for all uiImage functions: use const void * for const correctness\n_UI_EXTERN uiImage *uiNewImage(double width, double height);\n\n// @role uiImage destructor\n// uiFreeImage frees the given image and all associated resources.\n_UI_EXTERN void uiFreeImage(uiImage *i);\n\n// uiImageAppend adds a representation to the uiImage.\n// pixels should point to a byte array of premultiplied pixels\n// stored in [R G B A] order (so ((uint8_t *) pixels)[0] is the R of the\n// first pixel and [3] is the A of the first pixel). pixelWidth and\n// pixelHeight is the size *in pixels* of the image, and pixelStride is\n// the number *of bytes* per row of the pixels array. Therefore,\n// pixels itself must be at least byteStride * pixelHeight bytes long.\n// TODO see if we either need the stride or can provide a way to get the OS-preferred stride (in cairo we do)\n_UI_EXTERN void uiImageAppend(uiImage *i, void *pixels, int pixelWidth, int pixelHeight, int byteStride);\n\n// uiTableValue stores a value to be passed along uiTable and\n// uiTableModel.\n//\n// You do not create uiTableValues directly; instead, you create a\n// uiTableValue of a given type using the specialized constructor\n// functions.\n//\n// uiTableValues are immutable and the uiTableModel and uiTable\n// take ownership of the uiTableValue object once returned, copying\n// its contents as necessary.\ntypedef struct uiTableValue uiTableValue;\n\n// @role uiTableValue destructor\n// uiFreeTableValue() frees a uiTableValue. You generally do not\n// need to call this yourself, as uiTable and uiTableModel do this\n// for you. In fact, it is an error to call this function on a uiTableValue\n// that has been given to a uiTable or uiTableModel. You can call this,\n// however, if you created a uiTableValue that you aren't going to\n// use later, or if you called a uiTableModelHandler method directly\n// and thus never transferred ownership of the uiTableValue.\n_UI_EXTERN void uiFreeTableValue(uiTableValue *v);\n\n// uiTableValueType holds the possible uiTableValue types that may\n// be returned by uiTableValueGetType(). Refer to the documentation\n// for each type's constructor function for details on each type.\n// TODO actually validate these\n_UI_ENUM(uiTableValueType) {\n\tuiTableValueTypeString,\n\tuiTableValueTypeImage,\n\tuiTableValueTypeInt,\n\tuiTableValueTypeColor,\n};\n\n// uiTableValueGetType() returns the type of v.\n// TODO I don't like this name\n_UI_EXTERN uiTableValueType uiTableValueGetType(const uiTableValue *v);\n\n// uiNewTableValueString() returns a new uiTableValue that contains\n// str. str is copied; you do not need to keep it alive after\n// uiNewTableValueString() returns.\n_UI_EXTERN uiTableValue *uiNewTableValueString(const char *str);\n\n// uiTableValueString() returns the string stored in v. The returned\n// string is owned by v. It is an error to call this on a uiTableValue\n// that does not hold a string.\n_UI_EXTERN const char *uiTableValueString(const uiTableValue *v);\n\n// uiNewTableValueImage() returns a new uiTableValue that contains\n// the given uiImage.\n// \n// Unlike other similar constructors, uiNewTableValueImage() does\n// NOT copy the image. This is because images are comparatively\n// larger than the other objects in question. Therefore, you MUST\n// keep the image alive as long as the returned uiTableValue is alive.\n// As a general rule, if libui calls a uiTableModelHandler method, the\n// uiImage is safe to free once any of your code is once again\n// executed.\n_UI_EXTERN uiTableValue *uiNewTableValueImage(uiImage *img);\n\n// uiTableValueImage() returns the uiImage stored in v. As these\n// images are not owned by v, you should not assume anything\n// about the lifetime of the image (unless you created the image,\n// and thus control its lifetime). It is an error to call this on a\n// uiTableValue that does not hold an image.\n_UI_EXTERN uiImage *uiTableValueImage(const uiTableValue *v);\n\n// uiNewTableValueInt() returns a uiTableValue that stores the given\n// int. This can be used both for boolean values (nonzero is true, as\n// in C) or progresses (in which case the valid range is -1..100\n// inclusive).\n_UI_EXTERN uiTableValue *uiNewTableValueInt(int i);\n\n// uiTableValueInt() returns the int stored in v. It is an error to call\n// this on a uiTableValue that does not store an int.\n_UI_EXTERN int uiTableValueInt(const uiTableValue *v);\n\n// uiNewTableValueColor() returns a uiTableValue that stores the\n// given color.\n_UI_EXTERN uiTableValue *uiNewTableValueColor(double r, double g, double b, double a);\n\n// uiTableValueColor() returns the color stored in v. It is an error to\n// call this on a uiTableValue that does not store a color.\n// TODO define whether all this, for both uiTableValue and uiAttribute, is undefined behavior or a caught error\n_UI_EXTERN void uiTableValueColor(const uiTableValue *v, double *r, double *g, double *b, double *a);\n\n// uiTableModel is an object that provides the data for a uiTable.\n// This data is returned via methods you provide in the\n// uiTableModelHandler struct.\n//\n// uiTableModel represents data using a table, but this table does\n// not map directly to uiTable itself. Instead, you can have data\n// columns which provide instructions for how to render a given\n// uiTable's column — for instance, one model column can be used\n// to give certain rows of a uiTable a different background color.\n// Row numbers DO match with uiTable row numbers.\n//\n// Once created, the number and data types of columns of a\n// uiTableModel cannot change.\n//\n// Row and column numbers start at 0. A uiTableModel can be\n// associated with more than one uiTable at a time.\ntypedef struct uiTableModel uiTableModel;\n\n// uiTableModelHandler defines the methods that uiTableModel\n// calls when it needs data. Once a uiTableModel is created, these\n// methods cannot change.\ntypedef struct uiTableModelHandler uiTableModelHandler;\n\n// TODO validate ranges; validate types on each getter/setter call (? table columns only?)\nstruct uiTableModelHandler {\n\t// NumColumns returns the number of model columns in the\n\t// uiTableModel. This value must remain constant through the\n\t// lifetime of the uiTableModel. This method is not guaranteed\n\t// to be called depending on the system.\n\t// TODO strongly check column numbers and types on all platforms so these clauses can go away\n\tint (*NumColumns)(uiTableModelHandler *, uiTableModel *);\n\t// ColumnType returns the value type of the data stored in\n\t// the given model column of the uiTableModel. The returned\n\t// values must remain constant through the lifetime of the\n\t// uiTableModel. This method is not guaranteed to be called\n\t// depending on the system.\n\tuiTableValueType (*ColumnType)(uiTableModelHandler *, uiTableModel *, int);\n\t// NumRows returns the number or rows in the uiTableModel.\n\t// This value must be non-negative.\n\tint (*NumRows)(uiTableModelHandler *, uiTableModel *);\n\t// CellValue returns a uiTableValue corresponding to the model\n\t// cell at (row, column). The type of the returned uiTableValue\n\t// must match column's value type. Under some circumstances,\n\t// NULL may be returned; refer to the various methods that add\n\t// columns to uiTable for details. Once returned, the uiTable\n\t// that calls CellValue will free the uiTableValue returned.\n\tuiTableValue *(*CellValue)(uiTableModelHandler *mh, uiTableModel *m, int row, int column);\n\t// SetCellValue changes the model cell value at (row, column)\n\t// in the uiTableModel. Within this function, either do nothing\n\t// to keep the current cell value or save the new cell value as\n\t// appropriate. After SetCellValue is called, the uiTable will\n\t// itself reload the table cell. Under certain conditions, the\n\t// uiTableValue passed in can be NULL; refer to the various\n\t// methods that add columns to uiTable for details. Once\n\t// returned, the uiTable that called SetCellValue will free the\n\t// uiTableValue passed in.\n\tvoid (*SetCellValue)(uiTableModelHandler *, uiTableModel *, int, int, const uiTableValue *);\n};\n\n// @role uiTableModel constructor\n// uiNewTableModel() creates a new uiTableModel with the given\n// handler methods.\n_UI_EXTERN uiTableModel *uiNewTableModel(uiTableModelHandler *mh);\n\n// @role uiTableModel destructor\n// uiFreeTableModel() frees the given table model. It is an error to\n// free table models currently associated with a uiTable.\n_UI_EXTERN void uiFreeTableModel(uiTableModel *m);\n\n// uiTableModelRowInserted() tells any uiTable associated with m\n// that a new row has been added to m at index index. You call\n// this function when the number of rows in your model has\n// changed; after calling it, NumRows() should returm the new row\n// count.\n_UI_EXTERN void uiTableModelRowInserted(uiTableModel *m, int newIndex);\n\n// uiTableModelRowChanged() tells any uiTable associated with m\n// that the data in the row at index has changed. You do not need to\n// call this in your SetCellValue() handlers, but you do need to call\n// this if your data changes at some other point.\n_UI_EXTERN void uiTableModelRowChanged(uiTableModel *m, int index);\n\n// uiTableModelRowDeleted() tells any uiTable associated with m\n// that the row at index index has been deleted. You call this\n// function when the number of rows in your model has changed;\n// after calling it, NumRows() should returm the new row\n// count.\n// TODO for this and Inserted: make sure the \"after\" part is right; clarify if it's after returning or after calling\n_UI_EXTERN void uiTableModelRowDeleted(uiTableModel *m, int oldIndex);\n// TODO reordering/moving\n\n// uiTableModelColumnNeverEditable and\n// uiTableModelColumnAlwaysEditable are the value of an editable\n// model column parameter to one of the uiTable create column\n// functions; if used, that jparticular uiTable colum is not editable\n// by the user and always editable by the user, respectively.\n#define uiTableModelColumnNeverEditable (-1)\n#define uiTableModelColumnAlwaysEditable (-2)\n\n// uiTableTextColumnOptionalParams are the optional parameters\n// that control the appearance of the text column of a uiTable.\ntypedef struct uiTableTextColumnOptionalParams uiTableTextColumnOptionalParams;\n\n// uiTableParams defines the parameters passed to uiNewTable().\ntypedef struct uiTableParams uiTableParams;\n\nstruct uiTableTextColumnOptionalParams {\n\t// ColorModelColumn is the model column containing the\n\t// text color of this uiTable column's text, or -1 to use the\n\t// default color.\n\t//\n\t// If CellValue() for this column for any cell returns NULL, that\n\t// cell will also use the default text color.\n\tint ColorModelColumn;\n};\n\nstruct uiTableParams {\n\t// Model is the uiTableModel to use for this uiTable.\n\t// This parameter cannot be NULL.\n\tuiTableModel *Model;\n\t// RowBackgroundColorModelColumn is a model column\n\t// number that defines the background color used for the\n\t// entire row in the uiTable, or -1 to use the default color for\n\t// all rows.\n\t//\n\t// If CellValue() for this column for any row returns NULL, that\n\t// row will also use the default background color.\n\tint RowBackgroundColorModelColumn;\n};\n\n// uiTable is a uiControl that shows tabular data, allowing users to\n// manipulate rows of such data at a time.\ntypedef struct uiTable uiTable;\n#define uiTable(this) ((uiTable *) (this))\n\n// uiTableAppendTextColumn() appends a text column to t.\n// name is displayed in the table header.\n// textModelColumn is where the text comes from.\n// If a row is editable according to textEditableModelColumn,\n// SetCellValue() is called with textModelColumn as the column.\n_UI_EXTERN void uiTableAppendTextColumn(uiTable *t,\n\tconst char *name,\n\tint textModelColumn,\n\tint textEditableModelColumn,\n\tuiTableTextColumnOptionalParams *textParams);\n\n// uiTableAppendImageColumn() appends an image column to t.\n// Images are drawn at icon size, appropriate to the pixel density\n// of the screen showing the uiTable.\n_UI_EXTERN void uiTableAppendImageColumn(uiTable *t,\n\tconst char *name,\n\tint imageModelColumn);\n\n// uiTableAppendImageTextColumn() appends a column to t that\n// shows both an image and text.\n_UI_EXTERN void uiTableAppendImageTextColumn(uiTable *t,\n\tconst char *name,\n\tint imageModelColumn,\n\tint textModelColumn,\n\tint textEditableModelColumn,\n\tuiTableTextColumnOptionalParams *textParams);\n\n// uiTableAppendCheckboxColumn appends a column to t that\n// contains a checkbox that the user can interact with (assuming the\n// checkbox is editable). SetCellValue() will be called with\n// checkboxModelColumn as the column in this case.\n_UI_EXTERN void uiTableAppendCheckboxColumn(uiTable *t,\n\tconst char *name,\n\tint checkboxModelColumn,\n\tint checkboxEditableModelColumn);\n\n// uiTableAppendCheckboxTextColumn() appends a column to t\n// that contains both a checkbox and text.\n_UI_EXTERN void uiTableAppendCheckboxTextColumn(uiTable *t,\n\tconst char *name,\n\tint checkboxModelColumn,\n\tint checkboxEditableModelColumn,\n\tint textModelColumn,\n\tint textEditableModelColumn,\n\tuiTableTextColumnOptionalParams *textParams);\n\n// uiTableAppendProgressBarColumn() appends a column to t\n// that displays a progress bar. These columns work like\n// uiProgressBar: a cell value of 0..100 displays that percentage, and\n// a cell value of -1 displays an indeterminate progress bar.\n_UI_EXTERN void uiTableAppendProgressBarColumn(uiTable *t,\n\tconst char *name,\n\tint progressModelColumn);\n\n// uiTableAppendButtonColumn() appends a column to t\n// that shows a button that the user can click on. When the user\n// does click on the button, SetCellValue() is called with a NULL\n// value and buttonModelColumn as the column.\n// CellValue() on buttonModelColumn should return the text to show\n// in the button.\n_UI_EXTERN void uiTableAppendButtonColumn(uiTable *t,\n\tconst char *name,\n\tint buttonModelColumn,\n\tint buttonClickableModelColumn);\n\n// uiNewTable() creates a new uiTable with the specified parameters.\n_UI_EXTERN uiTable *uiNewTable(uiTableParams *params);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
        },
        {
          "name": "ui_darwin.h",
          "type": "blob",
          "size": 8.9814453125,
          "content": "// 7 april 2015\n\n/*\nThis file assumes that you have imported <Cocoa/Cocoa.h> and \"ui.h\" beforehand. It provides API-specific functions for interfacing with foreign controls on Mac OS X.\n*/\n\n#ifndef __LIBUI_UI_DARWIN_H__\n#define __LIBUI_UI_DARWIN_H__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef struct uiDarwinControl uiDarwinControl;\nstruct uiDarwinControl {\n\tuiControl c;\n\tuiControl *parent;\n\tBOOL enabled;\n\tBOOL visible;\n\tvoid (*SyncEnableState)(uiDarwinControl *, int);\n\tvoid (*SetSuperview)(uiDarwinControl *, NSView *);\n\tBOOL (*HugsTrailingEdge)(uiDarwinControl *);\n\tBOOL (*HugsBottom)(uiDarwinControl *);\n\tvoid (*ChildEdgeHuggingChanged)(uiDarwinControl *);\n\tNSLayoutPriority (*HuggingPriority)(uiDarwinControl *, NSLayoutConstraintOrientation);\n\tvoid (*SetHuggingPriority)(uiDarwinControl *, NSLayoutPriority, NSLayoutConstraintOrientation);\n\tvoid (*ChildVisibilityChanged)(uiDarwinControl *);\n};\n#define uiDarwinControl(this) ((uiDarwinControl *) (this))\n// TODO document\n_UI_EXTERN void uiDarwinControlSyncEnableState(uiDarwinControl *, int);\n_UI_EXTERN void uiDarwinControlSetSuperview(uiDarwinControl *, NSView *);\n_UI_EXTERN BOOL uiDarwinControlHugsTrailingEdge(uiDarwinControl *);\n_UI_EXTERN BOOL uiDarwinControlHugsBottom(uiDarwinControl *);\n_UI_EXTERN void uiDarwinControlChildEdgeHuggingChanged(uiDarwinControl *);\n_UI_EXTERN NSLayoutPriority uiDarwinControlHuggingPriority(uiDarwinControl *, NSLayoutConstraintOrientation);\n_UI_EXTERN void uiDarwinControlSetHuggingPriority(uiDarwinControl *, NSLayoutPriority, NSLayoutConstraintOrientation);\n_UI_EXTERN void uiDarwinControlChildVisibilityChanged(uiDarwinControl *);\n\n#define uiDarwinControlDefaultDestroy(type, handlefield) \\\n\tstatic void type ## Destroy(uiControl *c) \\\n\t{ \\\n\t\t[type(c)->handlefield release]; \\\n\t\tuiFreeControl(c); \\\n\t}\n#define uiDarwinControlDefaultHandle(type, handlefield) \\\n\tstatic uintptr_t type ## Handle(uiControl *c) \\\n\t{ \\\n\t\treturn (uintptr_t) (type(c)->handlefield); \\\n\t}\n#define uiDarwinControlDefaultParent(type, handlefield) \\\n\tstatic uiControl *type ## Parent(uiControl *c) \\\n\t{ \\\n\t\treturn uiDarwinControl(c)->parent; \\\n\t}\n#define uiDarwinControlDefaultSetParent(type, handlefield) \\\n\tstatic void type ## SetParent(uiControl *c, uiControl *parent) \\\n\t{ \\\n\t\tuiControlVerifySetParent(c, parent); \\\n\t\tuiDarwinControl(c)->parent = parent; \\\n\t}\n#define uiDarwinControlDefaultToplevel(type, handlefield) \\\n\tstatic int type ## Toplevel(uiControl *c) \\\n\t{ \\\n\t\treturn 0; \\\n\t}\n#define uiDarwinControlDefaultVisible(type, handlefield) \\\n\tstatic int type ## Visible(uiControl *c) \\\n\t{ \\\n\t\treturn uiDarwinControl(c)->visible; \\\n\t}\n#define uiDarwinControlDefaultShow(type, handlefield) \\\n\tstatic void type ## Show(uiControl *c) \\\n\t{ \\\n\t\tuiDarwinControl(c)->visible = YES; \\\n\t\t[type(c)->handlefield setHidden:NO]; \\\n\t\tuiDarwinNotifyVisibilityChanged(uiDarwinControl(c)); \\\n\t}\n#define uiDarwinControlDefaultHide(type, handlefield) \\\n\tstatic void type ## Hide(uiControl *c) \\\n\t{ \\\n\t\tuiDarwinControl(c)->visible = NO; \\\n\t\t[type(c)->handlefield setHidden:YES]; \\\n\t\tuiDarwinNotifyVisibilityChanged(uiDarwinControl(c)); \\\n\t}\n#define uiDarwinControlDefaultEnabled(type, handlefield) \\\n\tstatic int type ## Enabled(uiControl *c) \\\n\t{ \\\n\t\treturn uiDarwinControl(c)->enabled; \\\n\t}\n#define uiDarwinControlDefaultEnable(type, handlefield) \\\n\tstatic void type ## Enable(uiControl *c) \\\n\t{ \\\n\t\tuiDarwinControl(c)->enabled = YES; \\\n\t\tuiDarwinControlSyncEnableState(uiDarwinControl(c), uiControlEnabledToUser(c)); \\\n\t}\n#define uiDarwinControlDefaultDisable(type, handlefield) \\\n\tstatic void type ## Disable(uiControl *c) \\\n\t{ \\\n\t\tuiDarwinControl(c)->enabled = NO; \\\n\t\tuiDarwinControlSyncEnableState(uiDarwinControl(c), uiControlEnabledToUser(c)); \\\n\t}\n#define uiDarwinControlDefaultSyncEnableState(type, handlefield) \\\n\tstatic void type ## SyncEnableState(uiDarwinControl *c, int enabled) \\\n\t{ \\\n\t\tif (uiDarwinShouldStopSyncEnableState(c, enabled)) \\\n\t\t\treturn; \\\n\t\tif ([type(c)->handlefield respondsToSelector:@selector(setEnabled:)]) \\\n\t\t\t[((id) (type(c)->handlefield)) setEnabled:enabled]; /* id cast to make compiler happy; thanks mikeash in irc.freenode.net/#macdev */ \\\n\t}\n#define uiDarwinControlDefaultSetSuperview(type, handlefield) \\\n\tstatic void type ## SetSuperview(uiDarwinControl *c, NSView *superview) \\\n\t{ \\\n\t\t[type(c)->handlefield setTranslatesAutoresizingMaskIntoConstraints:NO]; \\\n\t\tif (superview == nil) \\\n\t\t\t[type(c)->handlefield removeFromSuperview]; \\\n\t\telse \\\n\t\t\t[superview addSubview:type(c)->handlefield]; \\\n\t}\n#define uiDarwinControlDefaultHugsTrailingEdge(type, handlefield) \\\n\tstatic BOOL type ## HugsTrailingEdge(uiDarwinControl *c) \\\n\t{ \\\n\t\treturn YES; /* always hug by default */ \\\n\t}\n#define uiDarwinControlDefaultHugsBottom(type, handlefield) \\\n\tstatic BOOL type ## HugsBottom(uiDarwinControl *c) \\\n\t{ \\\n\t\treturn YES; /* always hug by default */ \\\n\t}\n#define uiDarwinControlDefaultChildEdgeHuggingChanged(type, handlefield) \\\n\tstatic void type ## ChildEdgeHuggingChanged(uiDarwinControl *c) \\\n\t{ \\\n\t\t/* do nothing */ \\\n\t}\n#define uiDarwinControlDefaultHuggingPriority(type, handlefield) \\\n\tstatic NSLayoutPriority type ## HuggingPriority(uiDarwinControl *c, NSLayoutConstraintOrientation orientation) \\\n\t{ \\\n\t\treturn [type(c)->handlefield contentHuggingPriorityForOrientation:orientation]; \\\n\t}\n#define uiDarwinControlDefaultSetHuggingPriority(type, handlefield) \\\n\tstatic void type ## SetHuggingPriority(uiDarwinControl *c, NSLayoutPriority priority, NSLayoutConstraintOrientation orientation) \\\n\t{ \\\n\t\t[type(c)->handlefield setContentHuggingPriority:priority forOrientation:orientation]; \\\n\t}\n#define uiDarwinControlDefaultChildVisibilityChanged(type, handlefield) \\\n\tstatic void type ## ChildVisibilityChanged(uiDarwinControl *c) \\\n\t{ \\\n\t\t/* do nothing */ \\\n\t}\n\n#define uiDarwinControlAllDefaultsExceptDestroy(type, handlefield) \\\n\tuiDarwinControlDefaultHandle(type, handlefield) \\\n\tuiDarwinControlDefaultParent(type, handlefield) \\\n\tuiDarwinControlDefaultSetParent(type, handlefield) \\\n\tuiDarwinControlDefaultToplevel(type, handlefield) \\\n\tuiDarwinControlDefaultVisible(type, handlefield) \\\n\tuiDarwinControlDefaultShow(type, handlefield) \\\n\tuiDarwinControlDefaultHide(type, handlefield) \\\n\tuiDarwinControlDefaultEnabled(type, handlefield) \\\n\tuiDarwinControlDefaultEnable(type, handlefield) \\\n\tuiDarwinControlDefaultDisable(type, handlefield) \\\n\tuiDarwinControlDefaultSyncEnableState(type, handlefield) \\\n\tuiDarwinControlDefaultSetSuperview(type, handlefield) \\\n\tuiDarwinControlDefaultHugsTrailingEdge(type, handlefield) \\\n\tuiDarwinControlDefaultHugsBottom(type, handlefield) \\\n\tuiDarwinControlDefaultChildEdgeHuggingChanged(type, handlefield) \\\n\tuiDarwinControlDefaultHuggingPriority(type, handlefield) \\\n\tuiDarwinControlDefaultSetHuggingPriority(type, handlefield) \\\n\tuiDarwinControlDefaultChildVisibilityChanged(type, handlefield)\n\n#define uiDarwinControlAllDefaults(type, handlefield) \\\n\tuiDarwinControlDefaultDestroy(type, handlefield) \\\n\tuiDarwinControlAllDefaultsExceptDestroy(type, handlefield)\n\n// TODO document\n#define uiDarwinNewControl(type, var) \\\n\tvar = type(uiDarwinAllocControl(sizeof (type), type ## Signature, #type)); \\\n\tuiControl(var)->Destroy = type ## Destroy; \\\n\tuiControl(var)->Handle = type ## Handle; \\\n\tuiControl(var)->Parent = type ## Parent; \\\n\tuiControl(var)->SetParent = type ## SetParent; \\\n\tuiControl(var)->Toplevel = type ## Toplevel; \\\n\tuiControl(var)->Visible = type ## Visible; \\\n\tuiControl(var)->Show = type ## Show; \\\n\tuiControl(var)->Hide = type ## Hide; \\\n\tuiControl(var)->Enabled = type ## Enabled; \\\n\tuiControl(var)->Enable = type ## Enable; \\\n\tuiControl(var)->Disable = type ## Disable; \\\n\tuiDarwinControl(var)->SyncEnableState = type ## SyncEnableState; \\\n\tuiDarwinControl(var)->SetSuperview = type ## SetSuperview; \\\n\tuiDarwinControl(var)->HugsTrailingEdge = type ## HugsTrailingEdge; \\\n\tuiDarwinControl(var)->HugsBottom = type ## HugsBottom; \\\n\tuiDarwinControl(var)->ChildEdgeHuggingChanged = type ## ChildEdgeHuggingChanged; \\\n\tuiDarwinControl(var)->HuggingPriority = type ## HuggingPriority; \\\n\tuiDarwinControl(var)->SetHuggingPriority = type ## SetHuggingPriority; \\\n\tuiDarwinControl(var)->ChildVisibilityChanged = type ## ChildVisibilityChanged; \\\n\tuiDarwinControl(var)->visible = YES; \\\n\tuiDarwinControl(var)->enabled = YES;\n// TODO document\n_UI_EXTERN uiDarwinControl *uiDarwinAllocControl(size_t n, uint32_t typesig, const char *typenamestr);\n\n// Use this function as a shorthand for setting control fonts.\n_UI_EXTERN void uiDarwinSetControlFont(NSControl *c, NSControlSize size);\n\n// You can use this function from within your control implementations to return text strings that can be freed with uiFreeText().\n_UI_EXTERN char *uiDarwinNSStringToText(NSString *);\n\n// TODO document\n_UI_EXTERN BOOL uiDarwinShouldStopSyncEnableState(uiDarwinControl *, BOOL);\n\n// TODO document\n_UI_EXTERN void uiDarwinNotifyEdgeHuggingChanged(uiDarwinControl *);\n_UI_EXTERN void uiDarwinNotifyVisibilityChanged(uiDarwinControl *c);\n\n// TODO document\n// TODO document that values should not be cached\n_UI_EXTERN CGFloat uiDarwinMarginAmount(void *reserved);\n_UI_EXTERN CGFloat uiDarwinPaddingAmount(void *reserved);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
        },
        {
          "name": "ui_unix.h",
          "type": "blob",
          "size": 4.884765625,
          "content": "// 7 april 2015\n\n/*\nThis file assumes that you have included <gtk/gtk.h> and \"ui.h\" beforehand. It provides API-specific functions for interfacing with foreign controls on Unix systems that use GTK+ to provide their UI (currently all except Mac OS X).\n*/\n\n#ifndef __LIBUI_UI_UNIX_H__\n#define __LIBUI_UI_UNIX_H__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef struct uiUnixControl uiUnixControl;\nstruct uiUnixControl {\n\tuiControl c;\n\tuiControl *parent;\n\tgboolean addedBefore;\n\tgboolean explicitlyHidden;\n\tvoid (*SetContainer)(uiUnixControl *, GtkContainer *, gboolean);\n};\n#define uiUnixControl(this) ((uiUnixControl *) (this))\n// TODO document\n_UI_EXTERN void uiUnixControlSetContainer(uiUnixControl *, GtkContainer *, gboolean);\n\n#define uiUnixControlDefaultDestroy(type) \\\n\tstatic void type ## Destroy(uiControl *c) \\\n\t{ \\\n\t\t/* TODO is this safe on floating refs? */ \\\n\t\tg_object_unref(type(c)->widget); \\\n\t\tuiFreeControl(c); \\\n\t}\n#define uiUnixControlDefaultHandle(type) \\\n\tstatic uintptr_t type ## Handle(uiControl *c) \\\n\t{ \\\n\t\treturn (uintptr_t) (type(c)->widget); \\\n\t}\n#define uiUnixControlDefaultParent(type) \\\n\tstatic uiControl *type ## Parent(uiControl *c) \\\n\t{ \\\n\t\treturn uiUnixControl(c)->parent; \\\n\t}\n#define uiUnixControlDefaultSetParent(type) \\\n\tstatic void type ## SetParent(uiControl *c, uiControl *parent) \\\n\t{ \\\n\t\tuiControlVerifySetParent(c, parent); \\\n\t\tuiUnixControl(c)->parent = parent; \\\n\t}\n#define uiUnixControlDefaultToplevel(type) \\\n\tstatic int type ## Toplevel(uiControl *c) \\\n\t{ \\\n\t\treturn 0; \\\n\t}\n#define uiUnixControlDefaultVisible(type) \\\n\tstatic int type ## Visible(uiControl *c) \\\n\t{ \\\n\t\treturn gtk_widget_get_visible(type(c)->widget); \\\n\t}\n#define uiUnixControlDefaultShow(type) \\\n\tstatic void type ## Show(uiControl *c) \\\n\t{ \\\n\t\t/*TODO part of massive hack about hidden before*/uiUnixControl(c)->explicitlyHidden=FALSE; \\\n\t\tgtk_widget_show(type(c)->widget); \\\n\t}\n#define uiUnixControlDefaultHide(type) \\\n\tstatic void type ## Hide(uiControl *c) \\\n\t{ \\\n\t\t/*TODO part of massive hack about hidden before*/uiUnixControl(c)->explicitlyHidden=TRUE; \\\n\t\tgtk_widget_hide(type(c)->widget); \\\n\t}\n#define uiUnixControlDefaultEnabled(type) \\\n\tstatic int type ## Enabled(uiControl *c) \\\n\t{ \\\n\t\treturn gtk_widget_get_sensitive(type(c)->widget); \\\n\t}\n#define uiUnixControlDefaultEnable(type) \\\n\tstatic void type ## Enable(uiControl *c) \\\n\t{ \\\n\t\tgtk_widget_set_sensitive(type(c)->widget, TRUE); \\\n\t}\n#define uiUnixControlDefaultDisable(type) \\\n\tstatic void type ## Disable(uiControl *c) \\\n\t{ \\\n\t\tgtk_widget_set_sensitive(type(c)->widget, FALSE); \\\n\t}\n// TODO this whole addedBefore stuff is a MASSIVE HACK.\n#define uiUnixControlDefaultSetContainer(type) \\\n\tstatic void type ## SetContainer(uiUnixControl *c, GtkContainer *container, gboolean remove) \\\n\t{ \\\n\t\tif (!uiUnixControl(c)->addedBefore) { \\\n\t\t\tg_object_ref_sink(type(c)->widget); /* our own reference, which we release in Destroy() */ \\\n\t\t\t/* massive hack notes: without any of this, nothing gets shown when we show a window; without the if, all things get shown even if some were explicitly hidden (TODO why don't we just show everything except windows on create? */ \\\n\t\t\t/*TODO*/if(!uiUnixControl(c)->explicitlyHidden) gtk_widget_show(type(c)->widget); \\\n\t\t\tuiUnixControl(c)->addedBefore = TRUE; \\\n\t\t} \\\n\t\tif (remove) \\\n\t\t\tgtk_container_remove(container, type(c)->widget); \\\n\t\telse \\\n\t\t\tgtk_container_add(container, type(c)->widget); \\\n\t}\n\n#define uiUnixControlAllDefaultsExceptDestroy(type) \\\n\tuiUnixControlDefaultHandle(type) \\\n\tuiUnixControlDefaultParent(type) \\\n\tuiUnixControlDefaultSetParent(type) \\\n\tuiUnixControlDefaultToplevel(type) \\\n\tuiUnixControlDefaultVisible(type) \\\n\tuiUnixControlDefaultShow(type) \\\n\tuiUnixControlDefaultHide(type) \\\n\tuiUnixControlDefaultEnabled(type) \\\n\tuiUnixControlDefaultEnable(type) \\\n\tuiUnixControlDefaultDisable(type) \\\n\tuiUnixControlDefaultSetContainer(type)\n\n#define uiUnixControlAllDefaults(type) \\\n\tuiUnixControlDefaultDestroy(type) \\\n\tuiUnixControlAllDefaultsExceptDestroy(type)\n\n// TODO document\n#define uiUnixNewControl(type, var) \\\n\tvar = type(uiUnixAllocControl(sizeof (type), type ## Signature, #type)); \\\n\tuiControl(var)->Destroy = type ## Destroy; \\\n\tuiControl(var)->Handle = type ## Handle; \\\n\tuiControl(var)->Parent = type ## Parent; \\\n\tuiControl(var)->SetParent = type ## SetParent; \\\n\tuiControl(var)->Toplevel = type ## Toplevel; \\\n\tuiControl(var)->Visible = type ## Visible; \\\n\tuiControl(var)->Show = type ## Show; \\\n\tuiControl(var)->Hide = type ## Hide; \\\n\tuiControl(var)->Enabled = type ## Enabled; \\\n\tuiControl(var)->Enable = type ## Enable; \\\n\tuiControl(var)->Disable = type ## Disable; \\\n\tuiUnixControl(var)->SetContainer = type ## SetContainer;\n// TODO document\n_UI_EXTERN uiUnixControl *uiUnixAllocControl(size_t n, uint32_t typesig, const char *typenamestr);\n\n// uiUnixStrdupText() takes the given string and produces a copy of it suitable for being freed by uiFreeText().\n_UI_EXTERN char *uiUnixStrdupText(const char *);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
        },
        {
          "name": "ui_windows.h",
          "type": "blob",
          "size": 9.8994140625,
          "content": "// 21 april 2016\n\n/*\nThis file assumes that you have included <windows.h> and \"ui.h\" beforehand. It provides API-specific functions for interfacing with foreign controls in Windows.\n*/\n\n#ifndef __LIBUI_UI_WINDOWS_H__\n#define __LIBUI_UI_WINDOWS_H__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef struct uiWindowsSizing uiWindowsSizing;\n\ntypedef struct uiWindowsControl uiWindowsControl;\nstruct uiWindowsControl {\n\tuiControl c;\n\tuiControl *parent;\n\t// TODO this should be int on both os x and windows\n\tBOOL enabled;\n\tBOOL visible;\n\tvoid (*SyncEnableState)(uiWindowsControl *, int);\n\tvoid (*SetParentHWND)(uiWindowsControl *, HWND);\n\tvoid (*MinimumSize)(uiWindowsControl *, int *, int *);\n\tvoid (*MinimumSizeChanged)(uiWindowsControl *);\n\tvoid (*LayoutRect)(uiWindowsControl *c, RECT *r);\n\tvoid (*AssignControlIDZOrder)(uiWindowsControl *, LONG_PTR *, HWND *);\n\tvoid (*ChildVisibilityChanged)(uiWindowsControl *);\n};\n#define uiWindowsControl(this) ((uiWindowsControl *) (this))\n// TODO document\n_UI_EXTERN void uiWindowsControlSyncEnableState(uiWindowsControl *, int);\n_UI_EXTERN void uiWindowsControlSetParentHWND(uiWindowsControl *, HWND);\n_UI_EXTERN void uiWindowsControlMinimumSize(uiWindowsControl *, int *, int *);\n_UI_EXTERN void uiWindowsControlMinimumSizeChanged(uiWindowsControl *);\n_UI_EXTERN void uiWindowsControlLayoutRect(uiWindowsControl *, RECT *);\n_UI_EXTERN void uiWindowsControlAssignControlIDZOrder(uiWindowsControl *, LONG_PTR *, HWND *);\n_UI_EXTERN void uiWindowsControlChildVisibilityChanged(uiWindowsControl *);\n\n// TODO document\n#define uiWindowsControlDefaultDestroy(type) \\\n\tstatic void type ## Destroy(uiControl *c) \\\n\t{ \\\n\t\tuiWindowsEnsureDestroyWindow(type(c)->hwnd); \\\n\t\tuiFreeControl(c); \\\n\t}\n#define uiWindowsControlDefaultHandle(type) \\\n\tstatic uintptr_t type ## Handle(uiControl *c) \\\n\t{ \\\n\t\treturn (uintptr_t) (type(c)->hwnd); \\\n\t}\n#define uiWindowsControlDefaultParent(type) \\\n\tstatic uiControl *type ## Parent(uiControl *c) \\\n\t{ \\\n\t\treturn uiWindowsControl(c)->parent; \\\n\t}\n#define uiWindowsControlDefaultSetParent(type) \\\n\tstatic void type ## SetParent(uiControl *c, uiControl *parent) \\\n\t{ \\\n\t\tuiControlVerifySetParent(c, parent); \\\n\t\tuiWindowsControl(c)->parent = parent; \\\n\t}\n#define uiWindowsControlDefaultToplevel(type) \\\n\tstatic int type ## Toplevel(uiControl *c) \\\n\t{ \\\n\t\treturn 0; \\\n\t}\n#define uiWindowsControlDefaultVisible(type) \\\n\tstatic int type ## Visible(uiControl *c) \\\n\t{ \\\n\t\treturn uiWindowsControl(c)->visible; \\\n\t}\n#define uiWindowsControlDefaultShow(type) \\\n\tstatic void type ## Show(uiControl *c) \\\n\t{ \\\n\t\tuiWindowsControl(c)->visible = 1; \\\n\t\tShowWindow(type(c)->hwnd, SW_SHOW); \\\n\t\tuiWindowsControlNotifyVisibilityChanged(uiWindowsControl(c)); \\\n\t}\n#define uiWindowsControlDefaultHide(type) \\\n\tstatic void type ## Hide(uiControl *c) \\\n\t{ \\\n\t\tuiWindowsControl(c)->visible = 0; \\\n\t\tShowWindow(type(c)->hwnd, SW_HIDE); \\\n\t\tuiWindowsControlNotifyVisibilityChanged(uiWindowsControl(c)); \\\n\t}\n#define uiWindowsControlDefaultEnabled(type) \\\n\tstatic int type ## Enabled(uiControl *c) \\\n\t{ \\\n\t\treturn uiWindowsControl(c)->enabled; \\\n\t}\n#define uiWindowsControlDefaultEnable(type) \\\n\tstatic void type ## Enable(uiControl *c) \\\n\t{ \\\n\t\tuiWindowsControl(c)->enabled = 1; \\\n\t\tuiWindowsControlSyncEnableState(uiWindowsControl(c), uiControlEnabledToUser(c)); \\\n\t}\n#define uiWindowsControlDefaultDisable(type) \\\n\tstatic void type ## Disable(uiControl *c) \\\n\t{ \\\n\t\tuiWindowsControl(c)->enabled = 0; \\\n\t\tuiWindowsControlSyncEnableState(uiWindowsControl(c), uiControlEnabledToUser(c)); \\\n\t}\n#define uiWindowsControlDefaultSyncEnableState(type) \\\n\tstatic void type ## SyncEnableState(uiWindowsControl *c, int enabled) \\\n\t{ \\\n\t\tif (uiWindowsShouldStopSyncEnableState(c, enabled)) \\\n\t\t\treturn; \\\n\t\tEnableWindow(type(c)->hwnd, enabled); \\\n\t}\n#define uiWindowsControlDefaultSetParentHWND(type) \\\n\tstatic void type ## SetParentHWND(uiWindowsControl *c, HWND parent) \\\n\t{ \\\n\t\tuiWindowsEnsureSetParentHWND(type(c)->hwnd, parent); \\\n\t}\n// note that there is no uiWindowsControlDefaultMinimumSize(); you MUST define this yourself!\n#define uiWindowsControlDefaultMinimumSizeChanged(type) \\\n\tstatic void type ## MinimumSizeChanged(uiWindowsControl *c) \\\n\t{ \\\n\t\tif (uiWindowsControlTooSmall(c)) { \\\n\t\t\tuiWindowsControlContinueMinimumSizeChanged(c); \\\n\t\t\treturn; \\\n\t\t} \\\n\t\t/* otherwise do nothing; we have no children */ \\\n\t}\n#define uiWindowsControlDefaultLayoutRect(type) \\\n\tstatic void type ## LayoutRect(uiWindowsControl *c, RECT *r) \\\n\t{ \\\n\t\t/* use the window rect as we include the non-client area in the sizes */ \\\n\t\tuiWindowsEnsureGetWindowRect(type(c)->hwnd, r); \\\n\t}\n#define uiWindowsControlDefaultAssignControlIDZOrder(type) \\\n\tstatic void type ## AssignControlIDZOrder(uiWindowsControl *c, LONG_PTR *controlID, HWND *insertAfter) \\\n\t{ \\\n\t\tuiWindowsEnsureAssignControlIDZOrder(type(c)->hwnd, controlID, insertAfter); \\\n\t}\n#define uiWindowsControlDefaultChildVisibilityChanged(type) \\\n\tstatic void type ## ChildVisibilityChanged(uiWindowsControl *c) \\\n\t{ \\\n\t\t/* do nothing */ \\\n\t}\n\n#define uiWindowsControlAllDefaultsExceptDestroy(type) \\\n\tuiWindowsControlDefaultHandle(type) \\\n\tuiWindowsControlDefaultParent(type) \\\n\tuiWindowsControlDefaultSetParent(type) \\\n\tuiWindowsControlDefaultToplevel(type) \\\n\tuiWindowsControlDefaultVisible(type) \\\n\tuiWindowsControlDefaultShow(type) \\\n\tuiWindowsControlDefaultHide(type) \\\n\tuiWindowsControlDefaultEnabled(type) \\\n\tuiWindowsControlDefaultEnable(type) \\\n\tuiWindowsControlDefaultDisable(type) \\\n\tuiWindowsControlDefaultSyncEnableState(type) \\\n\tuiWindowsControlDefaultSetParentHWND(type) \\\n\tuiWindowsControlDefaultMinimumSizeChanged(type) \\\n\tuiWindowsControlDefaultLayoutRect(type) \\\n\tuiWindowsControlDefaultAssignControlIDZOrder(type) \\\n\tuiWindowsControlDefaultChildVisibilityChanged(type)\n\n#define uiWindowsControlAllDefaults(type) \\\n\tuiWindowsControlDefaultDestroy(type) \\\n\tuiWindowsControlAllDefaultsExceptDestroy(type)\n\n// TODO document\n#define uiWindowsNewControl(type, var) \\\n\tvar = type(uiWindowsAllocControl(sizeof (type), type ## Signature, #type)); \\\n\tuiControl(var)->Destroy = type ## Destroy; \\\n\tuiControl(var)->Handle = type ## Handle; \\\n\tuiControl(var)->Parent = type ## Parent; \\\n\tuiControl(var)->SetParent = type ## SetParent; \\\n\tuiControl(var)->Toplevel = type ## Toplevel; \\\n\tuiControl(var)->Visible = type ## Visible; \\\n\tuiControl(var)->Show = type ## Show; \\\n\tuiControl(var)->Hide = type ## Hide; \\\n\tuiControl(var)->Enabled = type ## Enabled; \\\n\tuiControl(var)->Enable = type ## Enable; \\\n\tuiControl(var)->Disable = type ## Disable; \\\n\tuiWindowsControl(var)->SyncEnableState = type ## SyncEnableState; \\\n\tuiWindowsControl(var)->SetParentHWND = type ## SetParentHWND; \\\n\tuiWindowsControl(var)->MinimumSize = type ## MinimumSize; \\\n\tuiWindowsControl(var)->MinimumSizeChanged = type ## MinimumSizeChanged; \\\n\tuiWindowsControl(var)->LayoutRect = type ## LayoutRect; \\\n\tuiWindowsControl(var)->AssignControlIDZOrder = type ## AssignControlIDZOrder; \\\n\tuiWindowsControl(var)->ChildVisibilityChanged = type ## ChildVisibilityChanged; \\\n\tuiWindowsControl(var)->visible = 1; \\\n\tuiWindowsControl(var)->enabled = 1;\n// TODO document\n_UI_EXTERN uiWindowsControl *uiWindowsAllocControl(size_t n, uint32_t typesig, const char *typenamestr);\n\n// TODO document\n_UI_EXTERN HWND uiWindowsEnsureCreateControlHWND(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, HINSTANCE hInstance, LPVOID lpParam, BOOL useStandardControlFont);\n\n// TODO document\n_UI_EXTERN void uiWindowsEnsureDestroyWindow(HWND hwnd);\n\n// TODO document\n// TODO document that this should only be used in SetParentHWND() implementations\n_UI_EXTERN void uiWindowsEnsureSetParentHWND(HWND hwnd, HWND parent);\n\n// TODO document\n_UI_EXTERN void uiWindowsEnsureAssignControlIDZOrder(HWND hwnd, LONG_PTR *controlID, HWND *insertAfter);\n\n// TODO document\n_UI_EXTERN void uiWindowsEnsureGetClientRect(HWND hwnd, RECT *r);\n_UI_EXTERN void uiWindowsEnsureGetWindowRect(HWND hwnd, RECT *r);\n\n// TODO document\n_UI_EXTERN char *uiWindowsWindowText(HWND hwnd);\n_UI_EXTERN void uiWindowsSetWindowText(HWND hwnd, const char *text);\n\n// TODO document\n_UI_EXTERN int uiWindowsWindowTextWidth(HWND hwnd);\n\n// TODO document\n// TODO point out this should only be used in a resize cycle\n_UI_EXTERN void uiWindowsEnsureMoveWindowDuringResize(HWND hwnd, int x, int y, int width, int height);\n\n// TODO document\n_UI_EXTERN void uiWindowsRegisterWM_COMMANDHandler(HWND hwnd, BOOL (*handler)(uiControl *, HWND, WORD, LRESULT *), uiControl *c);\n_UI_EXTERN void uiWindowsUnregisterWM_COMMANDHandler(HWND hwnd);\n\n// TODO document\n_UI_EXTERN void uiWindowsRegisterWM_NOTIFYHandler(HWND hwnd, BOOL (*handler)(uiControl *, HWND, NMHDR *, LRESULT *), uiControl *c);\n_UI_EXTERN void uiWindowsUnregisterWM_NOTIFYHandler(HWND hwnd);\n\n// TODO document\n_UI_EXTERN void uiWindowsRegisterWM_HSCROLLHandler(HWND hwnd, BOOL (*handler)(uiControl *, HWND, WORD, LRESULT *), uiControl *c);\n_UI_EXTERN void uiWindowsUnregisterWM_HSCROLLHandler(HWND hwnd);\n\n// TODO document\n_UI_EXTERN void uiWindowsRegisterReceiveWM_WININICHANGE(HWND hwnd);\n_UI_EXTERN void uiWindowsUnregisterReceiveWM_WININICHANGE(HWND hwnd);\n\n// TODO document\ntypedef struct uiWindowsSizing uiWindowsSizing;\nstruct uiWindowsSizing {\n\tint BaseX;\n\tint BaseY;\n\tLONG InternalLeading;\n};\n_UI_EXTERN void uiWindowsGetSizing(HWND hwnd, uiWindowsSizing *sizing);\n_UI_EXTERN void uiWindowsSizingDlgUnitsToPixels(uiWindowsSizing *sizing, int *x, int *y);\n_UI_EXTERN void uiWindowsSizingStandardPadding(uiWindowsSizing *sizing, int *x, int *y);\n\n// TODO document\n_UI_EXTERN HWND uiWindowsMakeContainer(uiWindowsControl *c, void (*onResize)(uiWindowsControl *));\n\n// TODO document\n_UI_EXTERN BOOL uiWindowsControlTooSmall(uiWindowsControl *c);\n_UI_EXTERN void uiWindowsControlContinueMinimumSizeChanged(uiWindowsControl *c);\n\n// TODO document\n_UI_EXTERN void uiWindowsControlAssignSoleControlIDZOrder(uiWindowsControl *);\n\n// TODO document\n_UI_EXTERN BOOL uiWindowsShouldStopSyncEnableState(uiWindowsControl *c, int enabled);\n\n// TODO document\n_UI_EXTERN void uiWindowsControlNotifyVisibilityChanged(uiWindowsControl *c);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
        },
        {
          "name": "unix",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}