{
  "metadata": {
    "timestamp": 1736710437460,
    "page": 78,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenVPN/openvpn",
      "stars": 11232,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.4482421875,
          "content": "# This FILE allows git blame to ignore reformatting changes and instead\n# shows the previous commit that changed the line.\n#\n# To avoid manually building the list of commits this commit\n# adds a file with a list of reformatting commits. TO use:\n#\n#   git blame --ignore-revs-file=.git-blame-ignore-revs file\n#\n# or to automatically always use the file\n#\n#   git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# Uncrustify 2020/06... (engine, pool, SSO)\nc1ff8f247f91c88a2df5502eeedf42857f9a6831\n\n# Uncrustify the tests/unit_tests/ part of our tree.\nda1574ef7826d73f01e120cbd1ba40ce39a305b7\n\n# Another round of uncrustify code cleanup.\n9cf7b4925a54d93fbea1cadcf3dc0e11f3ce358f\n\n# networking_sitnl.c: uncrustify file\n2c45d268ca65c522fbabb7c4dab5e721296b4623\n\n# Uncrustify tapctl and openvpnmsica\n6280d3d5536174934ee22d3840457d61896e0e3a\n\n# tun.c: uncrustify\nbaef44fc8769bbd99f4d699ce9f63180c29a5455\n\n# networking_sitnl.c: uncrustify file\n2c45d268ca65c522fbabb7c4dab5e721296b4623\n\n# uncrustify openvpn sources\nf57431cdc88f22fa4d7962946f0d3187fe058539\n\n# More broadly enforce Allman style and braces-around-conditionals\n4cd4899e8e80efae03c584a760fd107251735723\n\n# The Great Reformatting - first phase\n81d882d5302b8b647202a6893b57dfdc61fd6df2\n\n# Fix trailing-whitespace errors in last patch.\n3282632d9325267c850072db7545a884a1637f51\n\n# The Great Reformatting of 2022\nabe49856d81f51136d543539202a0bf8fb946474\n\n# Reformat for sp_after_comma=add\ne51d9a73693ee742b36e19fb1718e5e27167831d\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0927734375,
          "content": "*.c eol=lf\n*.h eol=lf\n*.rc eol=lf\n*.txt eol=lf\n*.bat eol=lf\n*.vc*proj* eol=crlf\n*.sln eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8466796875,
          "content": "*.[oa]\n*.l[oa]\n*.dll\n*.exe\n*.exe.*\n*.obj\n*.pyc\n*.so\n*~\n*.idb\n*.suo\n*.ncb\n*.log\nout\n.vs\n.deps\n.libs\nMakefile\nMakefile.in\naclocal.m4\nautodefs.h\nautom4te.cache\nconfig.guess\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfig.sub\nconfigure\nconfigure.h\ndepcomp\nstamp-h1\ninstall-sh\nmissing\nltmain.sh\nlibtool\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\n\nbuild\ndoc/openvpn-examples.5\ndoc/openvpn-examples.5.html\ndoc/openvpn.8\ndoc/openvpn.8.html\n/doc/doxygen/html/\n/doc/doxygen/latex/\n/doc/doxygen/openvpn.doxyfile\ndistro/systemd/*.service\nsample/sample-keys/sample-ca/\nvendor/cmocka_build\nvendor/dist\n\ntests/t_client.sh\ntests/t_client-*-20??????-??????/\ntests/t_server_null.rc\nt_client.rc\nt_client_ips.rc\ntests/unit_tests/**/*_testdriver\n\nsrc/openvpn/openvpn\ninclude/openvpn-plugin.h\nconfig-version.h\nnbproject\ntest-driver\ncompile\nstamp-h2\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.9384765625,
          "content": "Adriaan de Jong <dejong@fox-it.com>             <adriaan@adriaan-VirtualBox.(none)>\nDavid Sommerseth <dazo@eurephia.net>            <dazo@users.sourceforge.net>\nGert Doering <gert@greenie.muc.de>              <gd@medat.de>\nGert Doering <gert@greenie.muc.de>              <gert@fbsd74.ov.greenie.net>\nGert Doering <gert@greenie.muc.de>              <gert@fbsd90.ov.greenie.net>\nGert Doering <gert@greenie.muc.de>              <gert@mobile.greenie.muc.de>\nJames Yonan <james@openvpn.net>                 <james@e7ae566f-a301-0410-adde-c780ea21d3b5>\nJan Just Keijser <janjust@nikhef.nl>            <janjust@nikhef.nl>\nJuanJo Ciarlante <jjo@google.com>               <jjo+ml@google.com>\nKarl O. Pinc <kop@meme.com>                     <kop@mofo.meme.com>\nRobert Fischer <ml-openvpn@trispace.org>        <ml-openvpn@trispace.org>\nSamuli Sepp√§nen <samuli@openvpn.net>            <samuli@openvpn.net>\nSeth Mos <seth.mos@dds.nl>                      <seth.mos@dds.nl>\n"
        },
        {
          "name": ".svncommitters",
          "type": "blob",
          "size": 0.0390625,
          "content": "james = James Yonan <james@openvpn.net>\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.02734375,
          "content": "James Yonan <jim@yonan.net>\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 28.583984375,
          "content": "cmake_minimum_required(VERSION 3.14)\nset(CMAKE_CONFIGURATION_TYPES \"Release;Debug;ASAN\")\nproject(openvpn)\n\n# This CMake file implements building OpenVPN with CMAKE\n#\n# Note that this is *NOT* the official way to build openvpn on anything\n# other than Windows/mingw despite working on other platforms too. You will need\n# to add -DUNSUPPORTED_BUILDS=true to build on non Windows platforms.\n#\n# This cmake also makes a few assertions like lzo, lz4 being used\n# and OpenSSL having version 1.1.1+ and generally does not offer the same\n# configurability like autoconf\n\nfind_package(PkgConfig REQUIRED)\ninclude(CheckSymbolExists)\ninclude(CheckIncludeFiles)\ninclude(CheckCCompilerFlag)\ninclude(CheckLinkerFlag OPTIONAL)\ninclude(CheckTypeSize)\ninclude(CheckStructHasMember)\ninclude(CTest)\n\noption(UNSUPPORTED_BUILDS \"Allow unsupported builds\" OFF)\n\nif (NOT WIN32 AND NOT ${UNSUPPORTED_BUILDS})\n    message(FATAL_ERROR \"Note: on Unix platform the official and supported build method is using autoconfig. CMake based build should be only used for Windows and internal testing/development.\")\nendif()\n\nif (EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/config.h\")\n    message(FATAL_ERROR \"The top level source directory has a config.h file. Note that you can't mix in-tree autoconfig builds with out-of-tree cmake builds.\")\nendif ()\n\noption(MBED \"BUILD with mbed\" OFF)\nset(MBED_INCLUDE_PATH \"\" CACHE STRING \"Path to mbed TLS include directory\")\nset(MBED_LIBRARY_PATH \"\" CACHE STRING \"Path to mbed library directory\")\noption(WOLFSSL \"BUILD with wolfSSL\" OFF)\noption(ENABLE_LZ4 \"BUILD with lz4\" ON)\noption(ENABLE_LZO \"BUILD with lzo\" ON)\noption(ENABLE_PKCS11 \"BUILD with pkcs11-helper\" ON)\noption(USE_WERROR \"Treat compiler warnings as errors (-Werror)\" ON)\n\nset(PLUGIN_DIR /usr/local/lib/openvpn/plugins CACHE FILEPATH \"Location of the plugin directory\")\n\n# Create machine readable compile commands\noption(ENABLE_COMPILE_COMMANDS \"Generate compile_commands.json and a symlink for clangd to find it\" OFF)\nif (ENABLE_COMPILE_COMMANDS)\n    if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/build AND NOT IS_SYMLINK ${CMAKE_CURRENT_SOURCE_DIR}/build)\n        message(FATAL_ERROR \"The top level source directory contains a 'build' file or directory. Please remove or rename it. CMake creates a symlink with that name during build.\")\n    endif()\n    set(CMAKE_EXPORT_COMPILE_COMMANDS 1)\n    add_custom_target(\n        symlink-build-dir ALL\n        ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/build\n        )\nendif ()\n\n# AddressSanitize - use CXX=clang++ CC=clang cmake -DCMAKE_BUILD_TYPE=asan to build with ASAN\nset(CMAKE_C_FLAGS_ASAN\n    \"-fsanitize=address,undefined -fno-sanitize-recover=all -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -fno-omit-frame-pointer -g -O1\"\n    CACHE STRING \"Flags used by the C compiler during AddressSanitizer builds.\"\n    FORCE)\nset(CMAKE_CXX_FLAGS_ASAN\n    \"-fsanitize=address,undefined -fno-sanitize-recover=all -fno-optimize-sibling-calls -fsanitize-address-use-after-scope -fno-omit-frame-pointer -g -O1\"\n    CACHE STRING \"Flags used by the C++ compiler during AddressSanitizer builds.\"\n    FORCE)\n\nif (MSVC)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE -D_WINSOCK_DEPRECATED_NO_WARNINGS)\n    if (USE_WERROR)\n        add_compile_options(/WX)\n    endif ()\n    add_compile_options(\n        /MP\n        /W2\n        /sdl\n        /Qspectre\n        /guard:cf\n        /FC\n        /ZH:SHA_256\n        \"$<$<CONFIG:Release>:/GL>\"\n        \"$<$<CONFIG:Release>:/Oi>\"\n        \"$<$<CONFIG:Release>:/Gy>\"\n        \"$<$<CONFIG:Release>:/Zi>\"\n        )\n    add_link_options(\n        /Brepro\n        \"$<$<CONFIG:Release>:/LTCG:incremental>\"\n        \"$<$<CONFIG:Release>:/DEBUG:FULL>\"\n        \"$<$<CONFIG:Release>:/OPT:REF>\"\n        \"$<$<CONFIG:Release>:/OPT:ICF>\"\n        )\n    if (${CMAKE_GENERATOR_PLATFORM} STREQUAL \"x64\" OR ${CMAKE_GENERATOR_PLATFORM} STREQUAL \"x86\")\n        add_link_options(\"$<$<CONFIG:Release>:/CETCOMPAT>\")\n    endif()\nelse ()\n    add_compile_options(-Wall -Wuninitialized)\n    check_c_compiler_flag(-Wno-stringop-truncation NoStringOpTruncation)\n\n    if (${NoStringOpTruncation})\n        add_compile_options(-Wno-stringop-truncation)\n    endif()\n    # We are not ready for this\n    #add_compile_options(-Wconversion -Wno-sign-conversion -Wsign-compare)\n    if (USE_WERROR)\n        add_compile_options(-Werror)\n    endif ()\nendif ()\n\nfind_package(Python3 REQUIRED COMPONENTS Interpreter)\nexecute_process(\n    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/contrib/cmake/parse-version.m4.py ${CMAKE_CURRENT_SOURCE_DIR}/version.m4\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    )\ninclude(${CMAKE_CURRENT_BINARY_DIR}/version.cmake)\n\nset(OPENVPN_VERSION_MAJOR ${PRODUCT_VERSION_MAJOR})\nset(OPENVPN_VERSION_MINOR ${PRODUCT_VERSION_MINOR})\nset(OPENVPN_VERSION_PATCH ${PRODUCT_VERSION_PATCH})\nset(OPENVPN_VERSION_RESOURCE ${PRODUCT_VERSION_RESOURCE})\n\nset(CMAKE_C_STANDARD 11)\n\n# Set the various defines for config.h.cmake.in\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n    set(TARGET_LINUX YES)\n    set(ENABLE_ASYNC_PUSH YES)\n    set(ENABLE_LINUXDCO YES)\n    set(ENABLE_SITNL YES)\n    set(HAVE_DECL_SO_MARK YES)\n    set(ENABLE_FEATURE_TUN_PERSIST 1)\n    set(HAVE_LINUX_TYPES_H 1)\n    set(ENABLE_DCO YES)\nelseif (${CMAKE_SYSTEM_NAME} STREQUAL \"FreeBSD\")\n    set(TARGET_FREEBSD YES)\n    set(ENABLE_DCO YES)\n    link_libraries(-lnv)\nelseif (${CMAKE_SYSTEM_NAME} STREQUAL \"OpenBSD\")\n    set(TARGET_OPENBSD YES)\nelseif (${CMAKE_SYSTEM_NAME} STREQUAL \"SunOS\")\n    set(TARGET_SOLARIS YES)\n    set(HAVE_SYS_SOCKIO_H 1)\n    link_libraries(-lnsl -lsocket -lresolv)\nelseif (WIN32)\n    set(ENABLE_DCO YES)\nelseif (APPLE)\n    set(TARGET_DARWIN YES)\nelse()\n    message(FATAL_ERROR \"Unknown system name: \\\"${CMAKE_SYSTEM_NAME}\\\"\")\nendif ()\n\nif (UNIX)\n    set(PATH_SEPARATOR /)\n    set(ENABLE_PORT_SHARE YES)\n    set(HAVE_SA_FAMILY_T YES)\nelseif (WIN32)\n    set(PATH_SEPARATOR \\\\\\\\)\n    set(TARGET_WIN32 YES)\nendif ()\n\ncheck_symbol_exists(chroot unistd.h HAVE_CHROOT)\ncheck_symbol_exists(chdir unistd.h HAVE_CHDIR)\ncheck_symbol_exists(dup unistd.h HAVE_DUP)\ncheck_symbol_exists(dup2 unistd.h HAVE_DUP2)\ncheck_symbol_exists(fork unistd.h HAVE_FORK)\ncheck_symbol_exists(execve unistd.h HAVE_EXECVE)\ncheck_symbol_exists(ftruncate unistd.h HAVE_FTRUNCATE)\ncheck_symbol_exists(nice unistd.h HAVE_NICE)\ncheck_symbol_exists(setgid unistd.h HAVE_SETGID)\ncheck_symbol_exists(setuid unistd.h HAVE_SETUID)\ncheck_symbol_exists(setsid unistd.h HAVE_SETSID)\ncheck_symbol_exists(getpeereid \"unistd.h;sys/socket.h\" HAVE_GETPEEREID)\n\ncheck_symbol_exists(epoll_create sys/epoll.h HAVE_EPOLL_CREATE)\n\ncheck_symbol_exists(gettimeofday sys/time.h HAVE_GETTIMEOFDAY)\ncheck_symbol_exists(basename libgen.h HAVE_BASENAME)\ncheck_symbol_exists(chsize io.h HAVE_CHSIZE)\ncheck_symbol_exists(daemon \"unistd.h;stdlib.h\" HAVE_DAEMON)\ncheck_symbol_exists(dirname libgen.h HAVE_DIRNAME)\ncheck_symbol_exists(getrlimit sys/resource.h HAVE_GETRLIMIT)\ncheck_symbol_exists(mlockall sys/mman.h HAVE_MLOCKALL)\n\ncheck_symbol_exists(sendmsg sys/socket.h HAVE_SENDMSG)\ncheck_symbol_exists(recvmsg sys/socket.h HAVE_RECVMSG)\ncheck_symbol_exists(openlog syslog.h HAVE_OPENLOG)\ncheck_symbol_exists(syslog syslog.h HAVE_SYSLOG)\ncheck_symbol_exists(getgrnam grp.h HAVE_GETGRNAM)\ncheck_symbol_exists(getpwnam pwd.h HAVE_GETPWNAM)\ncheck_symbol_exists(getsockname sys/socket.h HAVE_GETSOCKNAME)\ncheck_symbol_exists(getrlimit \"sys/time.h;sys/resource.h\" HAVE_GETRLIMIT)\n\n# Checking for existence of structs with check_symbol_exists does not work,\n# so we use check_struct_hash_member with a member instead\ncheck_struct_has_member(\"struct cmsghdr\" cmsg_len sys/socket.h HAVE_CMSGHDR)\n\n\n# Some OS (e.g. FreeBSD) need some basic headers to allow\n# including network headers\nset(NETEXTRA sys/types.h)\ncheck_include_files(\"${NETEXTRA};netinet/in.h\" HAVE_NETINET_IN_H)\n\nif (HAVE_NETINET_IN_H)\n    list(APPEND NETEXTRA netinet/in.h)\nendif ()\n\ncheck_include_files(\"${NETEXTRA};netinet/in6.h\" HAVE_NETINET_IN_H)\ncheck_include_files(linux/if_tun.h HAVE_LINUX_IF_TUN_H)\ncheck_include_files(linux/sockios.h HAVE_LINUX_SOCKIOS_H)\ncheck_include_files(dlfcn.h HAVE_DLFCN_H)\ncheck_include_files(fcntl.h HAVE_FCNTL_H)\ncheck_include_files(dmalloc.h HAVE_DMALLOC_H)\ncheck_include_files(err.h HAVE_ERR_H)\ncheck_include_files(sys/epoll.h HAVE_SYS_EPOLL_H)\ncheck_include_files(poll.h HAVE_POLL_H)\ncheck_include_files(sys/socket.h HAVE_SYS_SOCKET_H)\ncheck_include_files(sys/time.h HAVE_SYS_TIME_H)\ncheck_include_files(netdb.h HAVE_NETDB_H)\ncheck_include_files(unistd.h HAVE_UNISTD_H)\ncheck_include_files(sys/un.h HAVE_SYS_UN_H)\ncheck_include_files(libgen.h HAVE_LIBGEN_H)\ncheck_include_files(net/if.h HAVE_NET_IF_H)\ncheck_include_files(\"${NETEXTRA};netinet/ip.h\" HAVE_NETINET_IP_H)\ncheck_include_files(arpa/inet.h HAVE_ARPA_INET_H)\ncheck_include_files(sys/ioctl.h HAVE_SYS_IOCTL_H)\ncheck_include_files(sys/inotify.h HAVE_SYS_INOTIFY_H)\ncheck_include_files(\"${NETEXTRA};sys/uio.h\" HAVE_SYS_UIO_H)\ncheck_include_files(syslog.h HAVE_SYSLOG_H)\ncheck_include_files(sys/wait.h HAVE_SYS_WAIT_H)\ncheck_include_files(grp.h HAVE_GRP_H)\ncheck_include_files(pwd.h HAVE_PWD_H)\ncheck_include_files(sys/mman.h HAVE_SYS_MMAN_H)\n\n\ncheck_include_files(\"${NETEXTRA};resolv.h\" HAVE_RESOLV_H)\ncheck_include_files(\"${NETEXTRA};net/if_tun.h\" HAVE_NET_IF_TUN_H)\n\nset(CMAKE_EXTRA_INCLUDE_FILES netinet/ip.h)\ncheck_type_size(\"struct in_pktinfo\" IN_PKTINFO)\ncheck_struct_has_member(\"struct in_pktinfo\" ipi_spec_dst netinet/ip.h HAVE_IPI_SPEC_DST)\ncheck_type_size(\"struct msghdr\" MSGHDR)\nset(CMAKE_EXTRA_INCLUDE_FILES)\n\nfind_program(IFCONFIG_PATH ifconfig)\nfind_program(IPROUTE_PATH ip)\nfind_program(ROUTE_PATH route)\n\nif (${ENABLE_LZ4})\n    pkg_search_module(liblz4 liblz4 REQUIRED IMPORTED_TARGET)\nendif ()\n\nif (${ENABLE_LZO})\n    pkg_search_module(lzo2 lzo2 REQUIRED IMPORTED_TARGET)\nendif ()\n\nif (${ENABLE_PKCS11})\n    pkg_search_module(pkcs11-helper libpkcs11-helper-1 REQUIRED IMPORTED_TARGET)\nendif ()\n\nfunction(check_mbed_configuration)\n    if (NOT (MBED_INCLUDE_PATH STREQUAL \"\") )\n        set(CMAKE_REQUIRED_INCLUDES ${MBED_INCLUDE_PATH})\n    endif ()\n    if (NOT (MBED_LIBRARY_PATH STREQUAL \"\"))\n        set(CMAKE_REQUIRED_LINK_OPTIONS \"-L${MBED_LIBRARY_PATH}\")\n    endif ()\n    set(CMAKE_REQUIRED_LIBRARIES \"mbedtls;mbedx509;mbedcrypto\")\n    check_symbol_exists(mbedtls_ctr_drbg_update_ret mbedtls/ctr_drbg.h HAVE_MBEDTLS_CTR_DRBG_UPDATE_RET)\n    check_symbol_exists(mbedtls_ssl_conf_export_keys_ext_cb mbedtls/ssl.h HAVE_MBEDTLS_SSL_CONF_EXPORT_KEYS_EXT_CB)\n    check_include_files(psa/crypto.h HAVE_MBEDTLS_PSA_CRYPTO_H)\nendfunction()\n\nif (${MBED})\n    check_mbed_configuration()\nendif()\n\nfunction(add_library_deps target)\n    if (${MBED})\n        if (NOT (MBED_INCLUDE_PATH STREQUAL \"\") )\n            target_include_directories(${target} PRIVATE ${MBED_INCLUDE_PATH})\n        endif ()\n        if(NOT (MBED_LIBRARY_PATH STREQUAL \"\"))\n            target_link_directories(${target} PRIVATE ${MBED_LIBRARY_PATH})\n        endif ()\n\n        target_link_libraries(${target} PRIVATE -lmbedtls -lmbedx509 -lmbedcrypto)\n    elseif (${WOLFSSL})\n        pkg_search_module(wolfssl wolfssl REQUIRED)\n        target_link_libraries(${target} PUBLIC ${wolfssl_LINK_LIBRARIES})\n        target_include_directories(${target} PRIVATE ${wolfssl_INCLUDE_DIRS}/wolfssl)\n    else ()\n        set(ENABLE_X509ALTUSERNAME YES)\n\n        find_package(OpenSSL REQUIRED)\n        target_link_libraries(${target} PUBLIC OpenSSL::SSL OpenSSL::Crypto)\n        if (WIN32)\n            target_link_libraries(${target} PUBLIC\n                ws2_32.lib crypt32.lib fwpuclnt.lib iphlpapi.lib\n                wininet.lib setupapi.lib rpcrt4.lib wtsapi32.lib ncrypt.lib bcrypt.lib)\n        endif ()\n\n    endif ()\n\n    if (MINGW)\n        target_compile_definitions(${target} PRIVATE\n                -DWIN32_LEAN_AND_MEAN\n                -DNTDDI_VERSION=NTDDI_VISTA -D_WIN32_WINNT=_WIN32_WINNT_VISTA\n        )\n    endif()\n\n    # optional dependencies\n    target_link_libraries(${target} PUBLIC\n        $<TARGET_NAME_IF_EXISTS:PkgConfig::liblz4>\n        $<TARGET_NAME_IF_EXISTS:PkgConfig::lzo2>\n        $<TARGET_NAME_IF_EXISTS:PkgConfig::pkcs11-helper>\n        )\n\n    if (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n        pkg_search_module(libcapng REQUIRED libcap-ng IMPORTED_TARGET)\n        pkg_search_module(libnl REQUIRED libnl-genl-3.0 IMPORTED_TARGET)\n\n        target_link_libraries(${target} PUBLIC PkgConfig::libcapng PkgConfig::libnl)\n    endif ()\n\nendfunction()\n\nif (${MBED})\n    set(ENABLE_CRYPTO_MBEDTLS YES)\nelseif (${WOLFSSL})\n    set(ENABLE_CRYPTO_OPENSSL YES)\n    set(ENABLE_CRYPTO_WOLFSSL YES)\n    set(ENABLE_X509ALTUSERNAME YES)\nelse ()\n    set(ENABLE_CRYPTO_OPENSSL YES)\n    set(ENABLE_X509ALTUSERNAME YES)\nendif ()\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR} src/compat include)\n\nadd_custom_command(\n    OUTPUT always_rebuild config-version.h\n    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/contrib/cmake/git-version.py\n    )\nset(HAVE_CONFIG_VERSION_H YES)\n\nconfigure_file(config.h.cmake.in config.h)\nconfigure_file(include/openvpn-plugin.h.in openvpn-plugin.h)\n# TODO we should remove the need for this, and always include config.h\nadd_definitions(-DHAVE_CONFIG_H)\n\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n\nadd_subdirectory(doc)\nadd_subdirectory(src/openvpnmsica)\nadd_subdirectory(src/openvpnserv)\nadd_subdirectory(src/tapctl)\n\nset(SOURCE_FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/config.h\n    ${CMAKE_CURRENT_BINARY_DIR}/config-version.h\n    ${CMAKE_CURRENT_BINARY_DIR}/openvpn-plugin.h\n\n    src/compat/compat-basename.c\n    src/compat/compat-daemon.c\n    src/compat/compat-dirname.c\n    src/compat/compat-gettimeofday.c\n    src/compat/compat-strsep.c\n    src/openvpn/argv.c\n    src/openvpn/argv.h\n    src/openvpn/base64.c\n    src/openvpn/base64.h\n    src/openvpn/basic.h\n    src/openvpn/buffer.c\n    src/openvpn/buffer.h\n    src/openvpn/circ_list.h\n    src/openvpn/clinat.c\n    src/openvpn/clinat.h\n    src/openvpn/common.h\n    src/openvpn/comp-lz4.c\n    src/openvpn/comp-lz4.h\n    src/openvpn/comp.c\n    src/openvpn/comp.h\n    src/openvpn/compstub.c\n    src/openvpn/console.c\n    src/openvpn/console_builtin.c\n    src/openvpn/console.h\n    src/openvpn/crypto.c\n    src/openvpn/crypto.h\n    src/openvpn/crypto_backend.h\n    src/openvpn/crypto_epoch.c\n    src/openvpn/crypto_epoch.h\n    src/openvpn/crypto_openssl.c\n    src/openvpn/crypto_openssl.h\n    src/openvpn/crypto_mbedtls.c\n    src/openvpn/crypto_mbedtls.h\n    src/openvpn/cryptoapi.c\n    src/openvpn/cryptoapi.h\n    src/openvpn/dco.c\n    src/openvpn/dco.h\n    src/openvpn/dco_win.c\n    src/openvpn/dco_win.h\n    src/openvpn/dco_linux.c\n    src/openvpn/dco_linux.h\n    src/openvpn/dco_freebsd.c\n    src/openvpn/dco_freebsd.h\n    src/openvpn/dhcp.c\n    src/openvpn/dhcp.h\n    src/openvpn/dns.c\n    src/openvpn/dns.h\n    src/openvpn/errlevel.h\n    src/openvpn/env_set.c\n    src/openvpn/env_set.h\n    src/openvpn/error.c\n    src/openvpn/error.h\n    src/openvpn/event.c\n    src/openvpn/event.h\n    src/openvpn/fdmisc.c\n    src/openvpn/fdmisc.h\n    src/openvpn/forward.c\n    src/openvpn/forward.h\n    src/openvpn/fragment.c\n    src/openvpn/fragment.h\n    src/openvpn/gremlin.c\n    src/openvpn/gremlin.h\n    src/openvpn/helper.c\n    src/openvpn/helper.h\n    src/openvpn/httpdigest.c\n    src/openvpn/httpdigest.h\n    src/openvpn/init.c\n    src/openvpn/init.h\n    src/openvpn/integer.h\n    src/openvpn/interval.c\n    src/openvpn/interval.h\n    src/openvpn/list.c\n    src/openvpn/list.h\n    src/openvpn/lladdr.c\n    src/openvpn/lladdr.h\n    src/openvpn/lzo.c\n    src/openvpn/lzo.h\n    src/openvpn/manage.c\n    src/openvpn/manage.h\n    src/openvpn/mbuf.c\n    src/openvpn/mbuf.h\n    src/openvpn/memdbg.h\n    src/openvpn/misc.c\n    src/openvpn/misc.h\n    src/openvpn/mroute.c\n    src/openvpn/mroute.h\n    src/openvpn/mss.c\n    src/openvpn/mss.h\n    src/openvpn/mstats.c\n    src/openvpn/mstats.h\n    src/openvpn/mtcp.c\n    src/openvpn/mtcp.h\n    src/openvpn/mtu.c\n    src/openvpn/mtu.h\n    src/openvpn/mudp.c\n    src/openvpn/mudp.h\n    src/openvpn/multi.c\n    src/openvpn/multi.h\n    src/openvpn/ntlm.c\n    src/openvpn/ntlm.h\n    src/openvpn/occ.c\n    src/openvpn/occ.h\n    src/openvpn/openvpn.c\n    src/openvpn/openvpn.h\n    src/openvpn/openvpn_win32_resources.rc\n    src/openvpn/options.c\n    src/openvpn/options.h\n    src/openvpn/options_util.c\n    src/openvpn/options_util.h\n    src/openvpn/otime.c\n    src/openvpn/otime.h\n    src/openvpn/ovpn_dco_win.h\n    src/openvpn/packet_id.c\n    src/openvpn/packet_id.h\n    src/openvpn/perf.c\n    src/openvpn/perf.h\n    src/openvpn/ping.c\n    src/openvpn/ping.h\n    src/openvpn/pkcs11.c\n    src/openvpn/pkcs11.h\n    src/openvpn/pkcs11_backend.h\n    src/openvpn/pkcs11_openssl.c\n    src/openvpn/pkcs11_mbedtls.c\n    src/openvpn/platform.c\n    src/openvpn/platform.h\n    src/openvpn/plugin.c\n    src/openvpn/plugin.h\n    src/openvpn/pool.c\n    src/openvpn/pool.h\n    src/openvpn/proto.c\n    src/openvpn/proto.h\n    src/openvpn/proxy.c\n    src/openvpn/proxy.h\n    src/openvpn/ps.c\n    src/openvpn/ps.h\n    src/openvpn/push.c\n    src/openvpn/push.h\n    src/openvpn/pushlist.h\n    src/openvpn/reflect_filter.c\n    src/openvpn/reflect_filter.h\n    src/openvpn/reliable.c\n    src/openvpn/reliable.h\n    src/openvpn/route.c\n    src/openvpn/route.h\n    src/openvpn/run_command.c\n    src/openvpn/run_command.h\n    src/openvpn/schedule.c\n    src/openvpn/schedule.h\n    src/openvpn/session_id.c\n    src/openvpn/session_id.h\n    src/openvpn/shaper.c\n    src/openvpn/shaper.h\n    src/openvpn/sig.c\n    src/openvpn/sig.h\n    src/openvpn/socket.c\n    src/openvpn/socket.h\n    src/openvpn/socks.c\n    src/openvpn/socks.h\n    src/openvpn/ssl.c\n    src/openvpn/ssl.h\n    src/openvpn/ssl_backend.h\n    src/openvpn/ssl_common.h\n    src/openvpn/ssl_openssl.c\n    src/openvpn/ssl_openssl.h\n    src/openvpn/ssl_mbedtls.c\n    src/openvpn/ssl_mbedtls.h\n    src/openvpn/ssl_verify.c\n    src/openvpn/ssl_verify.h\n    src/openvpn/ssl_verify_backend.h\n    src/openvpn/ssl_verify_openssl.c\n    src/openvpn/ssl_verify_openssl.h\n    src/openvpn/ssl_verify_mbedtls.c\n    src/openvpn/ssl_verify_mbedtls.h\n    src/openvpn/status.c\n    src/openvpn/status.h\n    src/openvpn/syshead.h\n    src/openvpn/tls_crypt.c\n    src/openvpn/tun.c\n    src/openvpn/tun.h\n    src/openvpn/tun_afunix.c\n    src/openvpn/tun_afunix.h\n    src/openvpn/networking_sitnl.c\n    src/openvpn/networking_freebsd.c\n    src/openvpn/auth_token.c\n    src/openvpn/auth_token.h\n    src/openvpn/ssl_ncp.c\n    src/openvpn/ssl_ncp.h\n    src/openvpn/ssl_pkt.c\n    src/openvpn/ssl_pkt.h\n    src/openvpn/ssl_util.c\n    src/openvpn/ssl_util.h\n    src/openvpn/vlan.c\n    src/openvpn/vlan.h\n    src/openvpn/wfp_block.c\n    src/openvpn/wfp_block.h\n    src/openvpn/win32.c\n    src/openvpn/win32-util.c\n    src/openvpn/win32.h\n    src/openvpn/win32-util.h\n    src/openvpn/xkey_helper.c\n    src/openvpn/xkey_provider.c\n    )\n\nadd_executable(openvpn ${SOURCE_FILES})\n\nadd_library_deps(openvpn)\n\nif(MINGW)\n    target_compile_options(openvpn PRIVATE -municode -UUNICODE)\n    target_link_options(openvpn PRIVATE -municode)\nendif()\n\nif (MSVC)\n    # we have our own manifest\n    target_link_options(openvpn PRIVATE /MANIFEST:NO)\nendif()\n\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n    target_link_libraries(openvpn PUBLIC -ldl)\nendif ()\n\nif (NOT WIN32)\n    target_compile_options(openvpn PRIVATE -DPLUGIN_LIBDIR=\\\"${PLUGIN_DIR}\\\")\n\n    find_library(resolv resolv)\n    # some platform like BSDs already include resolver functionality in the libc and not have an extra resolv library\n    if (${resolv} OR APPLE)\n        target_link_libraries(openvpn PUBLIC -lresolv)\n    endif ()\nendif ()\n\n\nif (BUILD_TESTING)\n    find_package(cmocka CONFIG)\n    if (TARGET cmocka::cmocka)\n        set(CMOCKA_LIBRARIES cmocka::cmocka)\n    else ()\n        pkg_search_module(cmocka cmocka REQUIRED IMPORTED_TARGET)\n        set(CMOCKA_LIBRARIES PkgConfig::cmocka)\n    endif ()\n\n    set(unit_tests\n        \"test_auth_token\"\n        \"test_buffer\"\n        \"test_crypto\"\n        \"test_misc\"\n        \"test_ncp\"\n        \"test_packet_id\"\n        \"test_pkt\"\n        \"test_provider\"\n        \"test_ssl\"\n        \"test_user_pass\"\n        )\n\n    if (WIN32)\n        list(APPEND unit_tests\n            \"test_cryptoapi\"\n            )\n    endif ()\n\n    # MSVC and Apple's LLVM ld do not support --wrap\n    # This test requires cmake >= 3.18, so check if check_linker_flag is\n    # available\n    if (COMMAND check_linker_flag)\n        check_linker_flag(C -Wl,--wrap=parse_line LD_SUPPORTS_WRAP)\n    endif()\n\n    # Clang-cl (which is also MSVC) is wrongly detected to support wrap\n    if (NOT MSVC AND \"${LD_SUPPORTS_WRAP}\")\n        list(APPEND unit_tests\n            \"test_argv\"\n            \"test_tls_crypt\"\n            )\n    endif ()\n\n    # These tests work on only on Linux since they depend on special Linux features\n    if (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n        list(APPEND unit_tests\n            \"test_networking\"\n            )\n    endif ()\n\n    if (NOT WIN32 AND ${ENABLE_PKCS11})\n        set(_HAVE_SOFTHSM2 YES)\n        find_program(P11TOOL p11tool)\n        find_program(SOFTHSM2_UTIL softhsm2-util)\n        find_library(SOFTHSM2_MODULE softhsm2 PATH_SUFFIXES softhsm)\n\n        if (P11TOOL STREQUAL \"P11TOOL-NOTFOUND\")\n            message(STATUS \"p11tool not found, pkcs11 UT disabled\")\n            set(_HAVE_SOFTHSM2 NO)\n        elseif (SOFTHSM2_UTIL STREQUAL \"SOFTHSM2_UTIL-NOTFOUND\")\n            message(STATUS \"softhsm2-util not found, pkcs11 UT disabled\")\n            set(_HAVE_SOFTHSM2 NO)\n        elseif (SOFTHSM2_MODULE STREQUAL \"SOFTHSM2_MODULE-NOTFOUND\")\n            message(STATUS \"softhsm2 module not found, pkcs11 UT disabled\")\n            set(_HAVE_SOFTHSM2 NO)\n        endif ()\n\n        if (_HAVE_SOFTHSM2)\n            message(VERBOSE \"pkcs11 UT enabled\")\n            list(APPEND unit_tests\n                \"test_pkcs11\"\n                )\n        endif ()\n    endif ()\n\n    foreach (test_name ${unit_tests})\n        # test_networking needs special environment\n        if (NOT ${test_name} STREQUAL \"test_networking\")\n            add_test(${test_name} ${test_name})\n            # for compat with autotools make check\n            set(_UT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/tests/unit_tests/openvpn)\n            set_tests_properties(${test_name} PROPERTIES\n                ENVIRONMENT \"srcdir=${_UT_SOURCE_DIR}\")\n        endif ()\n        add_executable(${test_name}\n            tests/unit_tests/openvpn/${test_name}.c\n            tests/unit_tests/openvpn/mock_msg.c\n            tests/unit_tests/openvpn/mock_msg.h\n            src/openvpn/platform.c\n            src/openvpn/win32-util.c\n            src/compat/compat-gettimeofday.c\n            )\n\n        add_library_deps(${test_name})\n        target_link_libraries(${test_name} PUBLIC ${CMOCKA_LIBRARIES})\n\n        target_include_directories(${test_name} PRIVATE src/openvpn)\n\n        # for compat with IDEs like Clion that ignore the tests properties\n        # for the environment variable srcdir when running tests as fallback\n        target_compile_definitions(${test_name} PRIVATE \"-DUNIT_TEST_SOURCEDIR=\\\"${CMAKE_SOURCE_DIR}/tests/unit_tests/openvpn\\\"\")\n\n        if (NOT ${test_name} STREQUAL \"test_buffer\")\n            target_sources(${test_name} PRIVATE\n                src/openvpn/buffer.c\n                )\n        endif ()\n\n    endforeach()\n\n    target_sources(test_auth_token PRIVATE\n        src/openvpn/base64.c\n        src/openvpn/crypto_mbedtls.c\n        src/openvpn/crypto_openssl.c\n        src/openvpn/crypto.c\n        src/openvpn/otime.c\n        src/openvpn/packet_id.c\n        )\n\n    target_sources(test_buffer PRIVATE\n        tests/unit_tests/openvpn/mock_get_random.c\n        )\n\n    target_sources(test_crypto PRIVATE\n        src/openvpn/crypto_mbedtls.c\n        src/openvpn/crypto_openssl.c\n        src/openvpn/crypto_epoch.c\n        src/openvpn/crypto.c\n        src/openvpn/otime.c\n        src/openvpn/packet_id.c\n        src/openvpn/mtu.c\n        src/openvpn/mss.c\n        )\n\n    target_sources(test_ssl PRIVATE\n            tests/unit_tests/openvpn/mock_management.c\n            tests/unit_tests/openvpn/mock_ssl_dependencies.c\n            tests/unit_tests/openvpn/mock_win32_execve.c\n            src/openvpn/argv.c\n            src/openvpn/base64.c\n            src/openvpn/crypto.c\n            src/openvpn/crypto_mbedtls.c\n            src/openvpn/crypto_openssl.c\n            src/openvpn/cryptoapi.c\n            src/openvpn/env_set.c\n            src/openvpn/mss.c\n            src/openvpn/mtu.c\n            src/openvpn/options_util.c\n            src/openvpn/otime.c\n            src/openvpn/packet_id.c\n            src/openvpn/run_command.c\n            src/openvpn/ssl_mbedtls.c\n            src/openvpn/ssl_openssl.c\n            src/openvpn/ssl_util.c\n            src/openvpn/ssl_verify_mbedtls.c\n            src/openvpn/ssl_verify_openssl.c\n            src/openvpn/xkey_helper.c\n            src/openvpn/xkey_provider.c\n    )\n\n    target_sources(test_misc PRIVATE\n        tests/unit_tests/openvpn/mock_get_random.c\n        src/openvpn/options_util.c\n        src/openvpn/ssl_util.c\n        src/openvpn/list.c\n        )\n\n    target_sources(test_ncp PRIVATE\n        src/openvpn/crypto_mbedtls.c\n        src/openvpn/crypto_openssl.c\n        src/openvpn/crypto.c\n        src/openvpn/otime.c\n        src/openvpn/packet_id.c\n        src/openvpn/ssl_util.c\n        src/compat/compat-strsep.c\n        )\n\n    target_sources(test_packet_id PRIVATE\n        tests/unit_tests/openvpn/mock_get_random.c\n        src/openvpn/otime.c\n        src/openvpn/packet_id.c\n        src/openvpn/reliable.c\n        src/openvpn/session_id.c\n        )\n\n    target_sources(test_pkt PRIVATE\n        tests/unit_tests/openvpn/mock_win32_execve.c\n        src/openvpn/argv.c\n        src/openvpn/base64.c\n        src/openvpn/crypto_mbedtls.c\n        src/openvpn/crypto_openssl.c\n        src/openvpn/crypto.c\n        src/openvpn/env_set.c\n        src/openvpn/otime.c\n        src/openvpn/packet_id.c\n        src/openvpn/reliable.c\n        src/openvpn/run_command.c\n        src/openvpn/session_id.c\n        src/openvpn/ssl_pkt.c\n        src/openvpn/tls_crypt.c\n        )\n\n    target_sources(test_provider PRIVATE\n        tests/unit_tests/openvpn/mock_get_random.c\n        src/openvpn/xkey_provider.c\n        src/openvpn/xkey_helper.c\n        src/openvpn/base64.c\n        )\n\n    target_sources(test_user_pass PRIVATE\n        tests/unit_tests/openvpn/mock_get_random.c\n        tests/unit_tests/openvpn/mock_win32_execve.c\n        src/openvpn/base64.c\n        src/openvpn/console.c\n        src/openvpn/env_set.c\n        src/openvpn/run_command.c\n        )\n\n    if (TARGET test_argv)\n        target_link_options(test_argv PRIVATE -Wl,--wrap=parse_line)\n        target_sources(test_argv PRIVATE\n            tests/unit_tests/openvpn/mock_get_random.c\n            src/openvpn/argv.c\n            )\n    endif ()\n\n    if (TARGET test_cryptoapi)\n        target_sources(test_cryptoapi PRIVATE\n            tests/unit_tests/openvpn/mock_get_random.c\n            tests/unit_tests/openvpn/cert_data.h\n            tests/unit_tests/openvpn/pkey_test_utils.c\n            src/openvpn/xkey_provider.c\n            src/openvpn/xkey_helper.c\n            src/openvpn/base64.c\n            )\n    endif ()\n\n    if (TARGET test_networking)\n        target_link_options(test_networking PRIVATE -Wl,--wrap=parse_line)\n        target_compile_options(test_networking PRIVATE -UNDEBUG)\n        target_sources(test_networking PRIVATE\n            src/openvpn/networking_sitnl.c\n            src/openvpn/crypto_mbedtls.c\n            src/openvpn/crypto_openssl.c\n            src/openvpn/crypto.c\n            src/openvpn/otime.c\n            src/openvpn/packet_id.c\n            )\n    endif ()\n\n    if (TARGET test_tls_crypt)\n        target_link_options(test_tls_crypt PRIVATE -Wl,--wrap=parse_line)\n        target_link_options(test_tls_crypt PRIVATE\n            -Wl,--wrap=buffer_read_from_file\n            -Wl,--wrap=buffer_write_file\n            -Wl,--wrap=rand_bytes)\n        target_sources(test_tls_crypt PRIVATE\n            tests/unit_tests/openvpn/mock_win32_execve.c\n            src/openvpn/argv.c\n            src/openvpn/base64.c\n            src/openvpn/crypto_mbedtls.c\n            src/openvpn/crypto_openssl.c\n            src/openvpn/crypto.c\n            src/openvpn/env_set.c\n            src/openvpn/otime.c\n            src/openvpn/packet_id.c\n            src/openvpn/run_command.c\n            )\n    endif ()\n\n    if (TARGET test_pkcs11)\n        target_compile_options(test_pkcs11 PRIVATE\n            -DP11TOOL_PATH=\\\"${P11TOOL}\\\"\n            -DSOFTHSM2_MODULE_PATH=\\\"${SOFTHSM2_MODULE}\\\"\n            -DSOFTHSM2_UTIL_PATH=\\\"${SOFTHSM2_UTIL}\\\"\n            )\n        target_sources(test_pkcs11 PRIVATE\n            tests/unit_tests/openvpn/mock_get_random.c\n            tests/unit_tests/openvpn/pkey_test_utils.c\n            src/openvpn/argv.c\n            src/openvpn/base64.c\n            src/openvpn/env_set.c\n            src/openvpn/otime.c\n            src/openvpn/pkcs11.c\n            src/openvpn/pkcs11_openssl.c\n            src/openvpn/run_command.c\n            src/openvpn/xkey_helper.c\n            src/openvpn/xkey_provider.c\n            )\n    endif ()\n\nendif (BUILD_TESTING)\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 8.4033203125,
          "content": "{\n    \"version\": 3,\n    \"configurePresets\": [\n        {\n            \"name\": \"base\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_TOOLCHAIN_FILE\": {\n                    \"value\": \"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\",\n                    \"type\": \"FILEPATH\"\n                },\n                \"VCPKG_OVERLAY_TRIPLETS\": {\n                    \"value\": \"${sourceDir}/contrib/vcpkg-triplets\",\n                    \"type\": \"FILEPATH\"\n                },\n                \"VCPKG_OVERLAY_PORTS\": {\n                    \"value\": \"${sourceDir}/contrib/vcpkg-ports\",\n                    \"type\": \"FILEPATH\"\n                }\n            }\n        },\n        {\n            \"name\": \"base-windows\",\n            \"hidden\": true,\n            \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n            \"generator\": \"Visual Studio 17 2022\",\n            \"cacheVariables\": {\n                \"VCPKG_MANIFEST_DIR\": \"${sourceDir}/contrib/vcpkg-manifests/windows\",\n                \"VCPKG_HOST_TRIPLET\": \"x64-windows\"\n            },\n            \"vendor\": { \"microsoft.com/VisualStudioSettings/CMake/1.0\": { \"hostOS\": [ \"Windows\" ] } }\n        },\n        {\n            \"name\": \"base-mingw\",\n            \"hidden\": true,\n            \"generator\": \"Ninja Multi-Config\",\n            \"cacheVariables\": {\n                \"CMAKE_SYSTEM_NAME\": {\n                    \"value\": \"Windows\",\n                    \"type\": \"STRING\"\n                },\n                \"VCPKG_MANIFEST_DIR\": \"${sourceDir}/contrib/vcpkg-manifests/mingw\"\n            }\n        },\n        {\n            \"name\": \"x64\",\n            \"hidden\": true,\n            \"architecture\": {\n                \"value\": \"x64\",\n                \"strategy\": \"set\"\n            },\n            \"cacheVariables\": {\n                \"VCPKG_TARGET_TRIPLET\": \"x64-windows-ovpn\"\n            }\n        },\n        {\n            \"name\": \"x64-mingw\",\n            \"hidden\": true,\n            \"binaryDir\": \"out/build/mingw/x64\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": {\n                    \"value\": \"x86_64-w64-mingw32-gcc\",\n                    \"type\": \"STRING\"\n                },\n                \"CMAKE_CXX_COMPILER\": {\n                    \"value\": \"x86_64-w64-mingw32-g++\",\n                    \"type\": \"STRING\"\n                },\n                \"VCPKG_TARGET_TRIPLET\": \"x64-mingw-ovpn\"\n            }\n        },\n        {\n            \"name\": \"arm64\",\n            \"hidden\": true,\n            \"architecture\": {\n                \"value\": \"arm64\",\n                \"strategy\": \"set\"\n            },\n            \"cacheVariables\": {\n                \"VCPKG_TARGET_TRIPLET\": \"arm64-windows-ovpn\"\n            }\n        },\n        {\n            \"name\": \"x86\",\n            \"hidden\": true,\n            \"architecture\": {\n                \"value\": \"Win32\",\n                \"strategy\": \"set\"\n            },\n            \"cacheVariables\": {\n                \"VCPKG_TARGET_TRIPLET\": \"x86-windows-ovpn\"\n            }\n        },\n        {\n            \"name\": \"i686-mingw\",\n            \"hidden\": true,\n            \"binaryDir\": \"out/build/mingw/x86\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": {\n                    \"value\": \"i686-w64-mingw32-gcc\",\n                    \"type\": \"STRING\"\n                },\n                \"CMAKE_CXX_COMPILER\": {\n                    \"value\": \"i686-w64-mingw32-g++\",\n                    \"type\": \"STRING\"\n                },\n                \"VCPKG_TARGET_TRIPLET\": \"x86-mingw-ovpn\"\n            }\n        },\n        {\n            \"name\": \"debug\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"Debug\"\n            }\n        },\n        {\n            \"name\": \"release\",\n            \"hidden\": true,\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"Release\"\n            }\n        },\n        {\n            \"name\": \"clangtoolset\",\n            \"toolset\": \"ClangCL\"\n        },\n        {\n            \"name\": \"mingw-x64\",\n            \"inherits\": [ \"base\", \"base-mingw\", \"x64-mingw\" ]\n        },\n        {\n            \"name\": \"mingw-x86\",\n            \"inherits\": [ \"base\", \"base-mingw\", \"i686-mingw\" ]\n        },\n        {\n            \"name\": \"win-amd64-release\",\n            \"inherits\": [ \"base\", \"base-windows\", \"x64\", \"release\" ]\n        },\n        {\n            \"name\": \"win-amd64-clang-release\",\n            \"inherits\": [ \"base\", \"base-windows\", \"clangtoolset\", \"x64\", \"release\" ]\n        },\n        {\n            \"name\": \"win-arm64-release\",\n            \"inherits\": [ \"base\", \"base-windows\", \"arm64\", \"release\" ]\n        },\n        {\n            \"name\": \"win-x86-release\",\n            \"inherits\": [ \"base\", \"base-windows\", \"x86\", \"release\" ]\n        },\n        {\n            \"name\": \"win-x86-clang-release\",\n            \"inherits\": [ \"base\", \"base-windows\", \"clangtoolset\", \"x86\", \"release\" ]\n        },\n        {\n            \"name\": \"win-amd64-debug\",\n            \"inherits\": [ \"base\", \"base-windows\", \"x64\", \"debug\" ]\n        },\n        {\n            \"name\": \"win-amd64-clang-debug\",\n            \"inherits\": [ \"base\", \"base-windows\", \"clangtoolset\", \"x64\", \"debug\" ]\n        },\n        {\n            \"name\": \"win-arm64-debug\",\n            \"inherits\": [ \"base\", \"base-windows\", \"arm64\", \"debug\" ]\n        },\n        {\n            \"name\": \"win-x86-debug\",\n            \"inherits\": [ \"base\", \"base-windows\", \"x86\", \"debug\" ]\n        },\n        {\n            \"name\": \"win-x86-clang-debug\",\n            \"inherits\": [ \"base\", \"base-windows\", \"clangtoolset\", \"x86\", \"debug\" ]\n        },\n        {\n            \"name\": \"unix-native\",\n            \"generator\": \"Ninja Multi-Config\",\n            \"binaryDir\": \"out/build/unix\"\n        }\n    ],\n    \"buildPresets\": [\n        {\n            \"name\": \"mingw-x64\",\n            \"configurePreset\": \"mingw-x64\"\n        },\n        {\n            \"name\": \"mingw-x86\",\n            \"configurePreset\": \"mingw-x86\"\n        },\n        {\n            \"name\": \"win-amd64-release\",\n            \"configurePreset\": \"win-amd64-release\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"win-amd64-clang-release\",\n            \"configurePreset\": \"win-amd64-clang-release\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"win-arm64-release\",\n            \"configurePreset\": \"win-arm64-release\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"win-x86-release\",\n            \"configurePreset\": \"win-x86-release\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"win-x86-clang-release\",\n            \"configurePreset\": \"win-x86-clang-release\",\n            \"configuration\": \"Release\"\n        },\n        {\n            \"name\": \"win-amd64-debug\",\n            \"configurePreset\": \"win-amd64-debug\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"win-amd64-clang-debug\",\n            \"configurePreset\": \"win-amd64-clang-debug\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"win-arm64-debug\",\n            \"configurePreset\": \"win-arm64-debug\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"win-x86-debug\",\n            \"configurePreset\": \"win-x86-debug\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"win-x86-clang-debug\",\n            \"configurePreset\": \"win-x86-clang-debug\",\n            \"configuration\": \"Debug\"\n        },\n        {\n            \"name\": \"unix-native\",\n            \"configurePreset\": \"unix-native\"\n        }\n    ],\n    \"testPresets\": [\n        {\n            \"name\": \"win-amd64-release\",\n            \"configurePreset\": \"win-amd64-release\"\n        },\n        {\n            \"name\": \"win-amd64-clang-release\",\n            \"configurePreset\": \"win-amd64-clang-release\"\n        },\n        {\n            \"name\": \"win-x86-release\",\n            \"configurePreset\": \"win-x86-release\"\n        },\n        {\n            \"name\": \"win-x86-clang-release\",\n            \"configurePreset\": \"win-x86-clang-release\"\n        },\n        {\n            \"name\": \"win-amd64-debug\",\n            \"configurePreset\": \"win-amd64-debug\"\n        },\n        {\n            \"name\": \"win-amd64-clang-debug\",\n            \"configurePreset\": \"win-amd64-clang-debug\"\n        },\n        {\n            \"name\": \"win-x86-debug\",\n            \"configurePreset\": \"win-x86-debug\"\n        },\n        {\n            \"name\": \"win-x86-clang-debug\",\n            \"configurePreset\": \"win-x86-clang-debug\"\n        },\n        {\n            \"name\": \"unix-native\",\n            \"configurePreset\": \"unix-native\"\n        }\n     ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 2.037109375,
          "content": "CONTRIBUTING TO THE OPENVPN PROJECT\n===================================\n\nPatches should be written against the Git \"master\" branch. Some patches may get\nbackported to a release branch.\n\nThe preferred procedure to send patches to the \"openvpn-devel\" mailing list:\n\n- https://lists.sourceforge.net/lists/listinfo/openvpn-devel\n\nWhile we do not merge GitHub pull requests as-is, we do allow their use for code\nreview purposes. After the patch has been ACKed (reviewed and accepted), it must\nbe sent to the mailing list. This last step does not necessarily need to be done\nby the patch author, although that is definitely recommended.\n\nWhen sending patches to \"openvpn-devel\" the subject line should be prefixed with\n[PATCH]. To avoid merging issues the patches should be generated with\ngit-format-patch or sent using git-send-email. Try to split large patches into\nsmall, atomic pieces to make reviews easier.\n\nPlease make sure that the source code formatting follows the guidelines at\nhttps://community.openvpn.net/openvpn/wiki/CodeStyle. Automated checking can be\ndone with uncrustify (http://uncrustify.sourceforge.net/) and the configuration\nfile which can be found in the git repository at dev-tools/uncrustify.conf.\nThere is also a git pre-commit hook script, which runs uncrustify automatically\neach time you commit and lets you format your code conveniently, if needed.\nTo install the hook simply run: dev-tools/git-pre-commit-uncrustify.sh install\n\nIf you want quick feedback on a patch before sending it to openvpn-devel mailing\nlist, you can visit the #openvpn-devel channel on irc.libera.chat. Note that\nyou need to be logged in to Libera to join the channel:\n\n- https://libera.chat/guides/registration\n\nMore detailed contribution instructions are available here:\n\n- https://community.openvpn.net/openvpn/wiki/DeveloperDocumentation\n\nNote that the process for contributing to other OpenVPN projects such as\nopenvpn-build, openvpn-gui, tap-windows6 and easy-rsa may differ from what was\ndescribed above. Please refer to the contribution instructions of each\nrespective project.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 11.4111328125,
          "content": "OpenVPN (TM) -- An Open Source VPN daemon\n\nCopyright (C) 2002-2024 OpenVPN Inc <sales@openvpn.net>\n\nThis distribution contains multiple components, some\nof which fall under different licenses.  By using OpenVPN\nor any of the bundled components enumerated below, you\nagree to be bound by the conditions of the license for\neach respective component.\n\nOpenVPN trademark\n-----------------\n\n  \"OpenVPN\" is a trademark of OpenVPN Inc\n\n\nOpenVPN license:\n----------------\n\n  OpenVPN is distributed under the GPL license version 2 (see Below).\n\n  Special exception for linking OpenVPN with OpenSSL:\n\n  In addition, as a special exception, OpenVPN Inc gives\n  permission to link the code of this program with the OpenSSL\n  library (or with modified versions of OpenSSL that use the same\n  license as OpenSSL), and distribute linked combinations including\n  the two.  You must obey the GNU General Public License in all\n  respects for all of the code used other than OpenSSL.  If you modify\n  this file, you may extend this exception to your version of the\n  file, but you are not obligated to do so.  If you do not wish to\n  do so, delete this exception statement from your version.\n\nApache2 linking exception:\n---------------------------\n  In addition, as a special exception, OpenVPN Inc and the\n  contributors give permission to link the code of this program to\n  libraries (the \"Libraries\") licensed under the Apache License\n  version 2.0 (this work and any linked library the \"Combined Work\")\n  and copy and distribute the Combined Work without an obligation to\n  license the Libraries under the GNU General Public License v2\n  (GPL-2.0) as required by Section 2 of the GPL-2.0, and without an\n  obligation to refrain from imposing any additional restrictions in\n  the Apache License version 2 that are not in the GPL-2.0, as\n  required by Section 6 of the GPL-2.0.  You must comply with the\n  GPL-2.0 in all other respects for the Combined Work, including\n  the obligation to provide source code.  If you modify this file, you\n  may extend this exception to your version of the file, but you are\n  not obligated to do so.  If you do not wish to do so, delete this\n  exception statement from your version.\n\nFor better understanding, in plain non-legalese English this basically says:\n\n * The intention for this license exception is to allow OpenVPN to be\n   linked against APL-2 licensed libraries, even where the GPL-2.0 and\n   APL-2 licenses conflict from a legal perspective.\n\n * OpenVPN itself will stay GPL-2.0 and the code belonging to the\n   OpenVPN project must comply to the GPL-2.0 license.  This is NOT\n   dual-licensing of the OpenVPN code base.\n\n * This license exception DOES NOT require NOR expect a license change\n   of the APL-2 based library.  This exception allows using the APL-2\n   library as-is.  However, when distributing a compiled OpenVPN binary\n   linking against APL-2 libraries (\"Combined Work\"), the REQUIREMENT is\n   that the APL-2 library MUST also be available on similar terms as in\n   GPL-2.0, like providing the source code of the library upon request,\n   except in the two specific ways mentioned.\n\n * If the APL-2 based library forbids such linking and distribution,\n   this license exception DOES NOT overrule the restriction of the APL-2\n   based library.  If the APL-2 library cannot satisfy the requirements\n   in this license exception, you CANNOT distribute an OpenVPN binary\n   linked with this library.\n\nLZO license:\n------------\n\n  LZO is Copyright (C) Markus F.X.J. Oberhumer,\n  and is licensed under the GPL.\n\n  Special exception for linking OpenVPN with both OpenSSL and LZO:\n\n  Hereby I grant a special exception to the OpenVPN project \n  (http://openvpn.net/) to link the LZO library with \n  the OpenSSL library (http://www.openssl.org).\n \n  Markus F.X.J. Oberhumer\n\nTAP-Win32/TAP-Win64 Driver license:\n-----------------------------------\n\n  This device driver was inspired by the CIPE-Win32 driver by\n  Damion K. Wilson.\n\n  The source and object code of the TAP-Win32/TAP-Win64 driver\n  is Copyright (C) 2002-2018 OpenVPN Inc, and is released under\n  the GPL version 2.\n\nWindows DDK Samples:\n--------------------\n\n  The Windows binary distribution includes devcon.exe, a\n  Microsoft DDK sample which is redistributed under the terms\n  of the DDK EULA.\n\nNSIS License:\n-------------\n\n  Copyright (C) 2002-2003 Joost Verburg\n\n  This software is provided 'as-is', without any express or implied\n  warranty. In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute\n  it freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; \n     you must not claim that you wrote the original software.\n     If you use this software in a product, an acknowledgment in the\n     product documentation would be appreciated but is not required.\n  2. Altered versions must be plainly marked as such,\n     and must not be misrepresented as being the original software.\n  3. This notice may not be removed or altered from any distribution.\n\nOpenSSL License:\n----------------\n\n  The OpenSSL toolkit stays under a dual license, i.e. both the conditions of\n  the OpenSSL License and the original SSLeay license apply to the toolkit.\n  See below for the actual license texts. Actually both licenses are BSD-style\n  Open Source licenses. In case of any license issues related to OpenSSL\n  please contact openssl-core@openssl.org.\n\n/* ====================================================================\n * Copyright (c) 1998-2003 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer. \n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    openssl-core@openssl.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n\n Original SSLeay License\n -----------------------\n\n/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)\n * All rights reserved.\n *\n * This package is an SSL implementation written\n * by Eric Young (eay@cryptsoft.com).\n * The implementation was written so as to conform with Netscapes SSL.\n * \n * This library is free for commercial and non-commercial use as long as\n * the following conditions are aheared to.  The following conditions\n * apply to all code found in this distribution, be it the RC4, RSA,\n * lhash, DES, etc., code; not just the SSL code.  The SSL documentation\n * included with this distribution is covered by the same copyright terms\n * except that the holder is Tim Hudson (tjh@cryptsoft.com).\n * \n * Copyright remains Eric Young's, and as such any Copyright notices in\n * the code are not to be removed.\n * If this package is used in a product, Eric Young should be given attribution\n * as the author of the parts of the library used.\n * This can be in the form of a textual message at program startup or\n * in documentation (online or textual) provided with the package.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. All advertising materials mentioning features or use of this software\n *    must display the following acknowledgement:\n *    \"This product includes cryptographic software written by\n *     Eric Young (eay@cryptsoft.com)\"\n *    The word 'cryptographic' can be left out if the rouines from the library\n *    being used are not cryptographic related :-).\n * 4. If you include any Windows specific code (or a derivative thereof) from \n *    the apps directory (application code) you must include an acknowledgement:\n *    \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\"\n * \n * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n * \n * The licence and distribution terms for any publically available version or\n * derivative of this code cannot be changed.  i.e. this code cannot simply be\n * copied and put under another distribution licence\n * [including the GNU Public Licence.]\n */\n\nGNU Public License (GPL)\n------------------------\n\n  OpenVPN, LZO, and the TAP-Win32 distributions are\n  licensed under the GPL version 2 (see COPYRIGHT.GPL).\n\n  In the Windows binary distribution of OpenVPN, the\n  GPL is reproduced below.\n\n"
        },
        {
          "name": "COPYRIGHT.GPL",
          "type": "blob",
          "size": 17.603515625,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License version 2\n    as published by the Free Software Foundation.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.2705078125,
          "content": "OpenVPN ChangeLog\nCopyright (C) 2002-2024 OpenVPN Inc <sales@openvpn.net>\n\nThis file is not maintained in this branch of the OpenVPN git repository.\n\nRelease branches (release/2.5, release/2.4, etc) have individual ChangeLog\nfiles with all changes relevant for these releases.\n"
        },
        {
          "name": "Changes.rst",
          "type": "blob",
          "size": 53.974609375,
          "content": "Overview of changes in 2.7\n==========================\nNew features\n------------\nTLS alerts\n    OpenVPN 2.7 will send out TLS alerts to peers informing them if the TLS\n    session shuts down or when the TLS implementation informs the peer about\n    an error in the TLS session (e.g. mismatching TLS versions). This improves\n    the user experience as the client shows an error instead of running into\n    a timeout when the server just stops responding completely.\n\nSupport for tun/tap via unix domain socket and lwipovpn support\n    To allow better testing and emulating a full client with a full\n    network stack OpenVPN now allows a program executed to provide\n    a tun/tap device instead of opening a device.\n\n    The co-developed lwipovpn program based on lwIP stack allows to\n    simulate full IP stack and an OpenVPN client using\n    ``--dev-node unix:/path/to/lwipovpn`` can emulate a full client that\n    can be pinged, can serve a website and more without requiring any\n    elevated permission. This can make testing OpenVPN much easier.\n\n    For more details see [lwipovpn on Gihtub](https://github.com/OpenVPN/lwipovpn).\n\nEnforcement of AES-GCM usage limit\n    OpenVPN will now enforce the usage limits on AES-GCM with the same\n    confidentiality margin as TLS 1.3 does. This mean that renegotiation will\n    be triggered after roughly 2^28 to 2^31 packets depending of the packet\n    size. More details about usage limit of AES-GCM can be found here:\n\n    https://datatracker.ietf.org/doc/draft-irtf-cfrg-aead-limits/\n\nDefault ciphers in ``--data-ciphers``\n    Ciphers in ``--data-ciphers`` can contain the string DEFAULT that is\n    replaced by the default ciphers used by OpenVPN, making it easier to\n    add an allowed cipher without having to spell out the default ciphers.\n\n\nDeprecated features\n-------------------\n``secret`` support has been removed by default.\n    static key mode (non-TLS) is no longer considered \"good and secure enough\"\n    for today's requirements.  Use TLS mode instead.  If deploying a PKI CA\n    is considered \"too complicated\", using ``--peer-fingerprint`` makes\n    TLS mode about as easy as using ``--secret``.\n\n    This mode can still be enabled by using\n    ``--allow-deprecated-insecure-static-crypto`` but will be removed in\n    OpenVPN 2.8.\n\nNTLMv1 authentication support for HTTP proxies has been removed.\n    This is considered an insecure method of authentication that uses\n    obsolete crypto algorithms.\n    NTLMv2 support is still available, but will be removed in a future\n    release.\n    When configured to authenticate with NTLMv1 (``ntlm`` keyword in\n    ``--http-proxy``) OpenVPN will try NTLMv2 instead.\n\n``persist-key`` option has been enabled by default.\n    All the keys will be kept in memory across restart.\n\nDefault for ``--topology`` changed to ``subnet`` for ``--mode server``\n    Previous releases always used ``net30`` as default. This only affects\n    configs with ``--mode server`` or ``--server`` (the latter implies the\n    former), and ``--dev tun``, and only if IPv4 is enabled.\n    Note that this changes the semantics of ``--ifconfig``, so if you have\n    manual settings for that in your config but not set ``--topology``\n    your config might fail to parse with the new version. Just adding\n    ``--topology net30`` to the config should fix the problem.\n    By default ``--topology`` is pushed from server to client.\n\nOpenSSL 1.0.2 support\n    Support for building with OpenSSL 1.0.2 has been removed. The minimum\n    supported OpenSSL version is now 1.1.0.\n\nCompression on send\n    OpenVPN 2.7 will never compress data before sending. Decompression of\n    received data is still supported.\n    ``--allow-compression yes`` is now an alias for\n    ``--allow-compression asym``.\n\nOverview of changes in 2.6\n==========================\n\nProject changes\n---------------\n\nWe want to deprecate our old Trac bug tracking system.\nPlease report any issues with this release in GitHub\ninstead: https://github.com/OpenVPN/openvpn/issues\n\nNew features\n------------\nSupport unlimited number of connection entries and remote entries\n\nNew management commands to enumerate and list remote entries\n    Use ``remote-entry-count`` and ``remote-entry-get``\n    commands from the management interface to get the number of\n    remote entries and the entries themselves.\n\nKeying Material Exporters (RFC 5705) based key generation\n    As part of the cipher negotiation OpenVPN will automatically prefer\n    the RFC5705 based key material generation to the current custom\n    OpenVPN PRF. This feature requires OpenSSL or mbed TLS 2.18+.\n\nCompatibility with OpenSSL in FIPS mode\n    OpenVPN will now work with OpenSSL in FIPS mode. Note, no effort\n    has been made to check or implement all the\n    requirements/recommendation of FIPS 140-2. This just allows OpenVPN\n    to be run on a system that be configured OpenSSL in FIPS mode.\n\n``mlock`` will now check if enough memlock-able memory has been reserved,\n    and if less than 100MB RAM are available, use setrlimit() to upgrade\n    the limit.  See Trac #1390.  Not available on OpenSolaris.\n\nCertificate pinning/verify peer fingerprint\n    The ``--peer-fingerprint`` option has been introduced to give users an\n    easy to use alternative to the ``tls-verify`` for matching the\n    fingerprint of the peer. The option takes use a number of allowed\n    SHA256 certificate fingerprints.\n\n    See the man page section \"Small OpenVPN setup with peer-fingerprint\"\n    for a tutorial on how to use this feature. This is also available online\n    under https://github.com/openvpn/openvpn/blob/master/doc/man-sections/example-fingerprint.rst\n\nTLS mode with self-signed certificates\n    When ``--peer-fingerprint`` is used, the ``--ca`` and ``--capath`` option\n    become optional. This allows for small OpenVPN setups without setting up\n    a PKI with Easy-RSA or similar software.\n\nDeferred auth support for scripts\n    The ``--auth-user-pass-verify`` script supports now deferred authentication.\n\nPending auth support for plugins and scripts\n    Both auth plugin and script can now signal pending authentication to\n    the client when using deferred authentication. The new ``client-crresponse``\n    script option and ``OPENVPN_PLUGIN_CLIENT_CRRESPONSE`` plugin function can\n    be used to parse a client response to a ``CR_TEXT`` two factor challenge.\n\n    See ``sample/sample-scripts/totpauth.py`` for an example.\n\nCompatibility mode (``--compat-mode``)\n    The modernisation of defaults can impact the compatibility of OpenVPN 2.6.0\n    with older peers. The options ``--compat-mode`` allows UIs to provide users\n    with an easy way to still connect to older servers.\n\nOpenSSL 3.0 support\n    OpenSSL 3.0 has been added. Most of OpenSSL 3.0 changes are not user visible but\n    improve general compatibility with OpenSSL 3.0. ``--tls-cert-profile insecure``\n    has been added to allow selecting the lowest OpenSSL security level (not\n    recommended, use only if you must). OpenSSL 3.0 no longer supports the Blowfish\n    (and other deprecated) algorithm by default and the new option ``--providers``\n    allows loading the legacy provider to renable these algorithms.\n\nOptional ciphers in ``--data-ciphers``\n    Ciphers in ``--data-ciphers`` can now be prefixed with a ``?`` to mark\n    those as optional and only use them if the SSL library supports them.\n\n\nImproved ``--mssfix`` and ``--fragment`` calculation\n    The ``--mssfix`` and ``--fragment`` options now allow an optional :code:`mtu`\n    parameter to specify that different overhead for IPv4/IPv6 should taken into\n    account and the resulting size is specified as the total size of the VPN packets\n    including IP and UDP headers.\n\nCookie based handshake for UDP server\n    Instead of allocating a connection for each client on the initial packet\n    OpenVPN server will now use an HMAC based cookie as its session id. This\n    way the server can verify it on completing the handshake without keeping\n    state. This eliminates the amplification and resource exhaustion attacks.\n    For tls-crypt-v2 clients, this requires OpenVPN 2.6 clients or later\n    because the client needs to resend its client key on completing the hand\n    shake. The tls-crypt-v2 option allows controlling if older clients are\n    accepted.\n\n    By default the rate of initial packet responses is limited to 100 per 10s\n    interval to avoid OpenVPN servers being abused in reflection attacks\n    (see ``--connect-freq-initial``).\n\nData channel offloading with ovpn-dco\n    2.6.0+ implements support for data-channel offloading where the data packets\n    are directly processed and forwarded in kernel space thanks to the ovpn-dco\n    kernel module. The userspace openvpn program acts purely as a control plane\n    application. Note that DCO will use DATA_V2 packets in P2P mode, therefore,\n    this implies that peers must be running 2.6.0+ in order to have P2P-NCP\n    which brings DATA_V2 packet support.\n\nSession timeout\n    It is now possible to terminate a session (or all) after a specified amount\n    of seconds has passed session commencement. This behaviour can be configured\n    using ``--session-timeout``. This option can be configured on the server, on\n    the client or can also be pushed.\n\nInline auth username and password\n    Username and password can now be specified inline in the configuration file\n    within the <auth-user-pass></auth-user-pass> tags. If the password is\n    missing OpenVPN will prompt for input via stdin. This applies to inline'd\n    http-proxy-user-pass too.\n\nTun MTU can be pushed\n    The  client can now also dynamically configure its MTU and the server\n    will try to push the client MTU when the client supports it. The\n    directive ``--tun-mtu-max`` has been introduced to increase the maximum\n    pushable MTU size (defaults to 1600).\n\nDynamic TLS Crypt\n    When both peers are OpenVPN 2.6.1+, OpenVPN will dynamically create\n    a tls-crypt key that is used for renegotiation. This ensure that only the\n    previously authenticated peer can do trigger renegotiation and complete\n    renegotiations.\n\nImproved control channel packet size control (``max-packet-size``)\n    The size of control channel is no longer tied to\n    ``--link-mtu``/``--tun-mtu`` and can be set using ``--max-packet-size``.\n    Sending large control channel frames is also optimised by allowing 6\n    outstanding packets instead of just 4. ``max-packet-size`` will also set\n    ``mssfix`` to try to limit data-channel packets as well.\n\nDeprecated features\n-------------------\n``inetd`` has been removed\n    This was a very limited and not-well-tested way to run OpenVPN, on TCP\n    and TAP mode only.\n\n``verify-hash`` has been deprecated\n    This option has very limited usefulness and should be replaced by either\n    a better ``--ca`` configuration or with a ``--tls-verify`` script.\n\n``secret`` has been deprecated\n    static key mode (non-TLS) is no longer considered \"good and secure enough\"\n    for today's requirements.  Use TLS mode instead.  If deploying a PKI CA\n    is considered \"too complicated\", using ``--peer-fingerprint`` makes\n    TLS mode about as easy as using ``--secret``.\n\n``ncp-disable`` has been removed\n    This option mainly served a role as debug option when NCP was first\n    introduced. It should now no longer be necessary.\n\nTLS 1.0 and 1.1 are deprecated\n    ``tls-version-min`` is set to 1.2 by default.  OpenVPN 2.6.0 defaults\n    to a minimum TLS version of 1.2 as TLS 1.0 and 1.1 should be generally\n    avoided. Note that OpenVPN versions older than 2.3.7 use TLS 1.0 only.\n\n``--cipher`` argument is no longer appended to ``--data-ciphers``\n    by default. Data cipher negotiation has been introduced in 2.4.0\n    and been significantly improved in 2.5.0. The implicit fallback\n    to the cipher specified in ``--cipher`` has been removed.\n    Effectively, ``--cipher`` is a no-op in TLS mode now, and will\n    only have an effect in pre-shared-key mode (``--secret``).\n    From now on ``--cipher`` should not be used in new configurations\n    for TLS mode.\n    Should backwards compatibility with older OpenVPN peers be\n    required, please see the ``--compat-mode`` instead.\n\n``--prng`` has beeen removed\n    OpenVPN used to implement its own PRNG based on a hash. However implementing\n    a PRNG is better left to a crypto library. So we use the PRNG\n    mbed TLS or OpenSSL now.\n\n``--keysize`` has been removed\n    The ``--keysize`` option was only useful to change the key length when using the\n    BF, CAST6 or RC2 ciphers. For all other ciphers the key size is fixed with the\n    chosen cipher. As OpenVPN v2.6 no longer supports any of these variable length\n    ciphers, this option was removed as well to avoid confusion.\n\nCompression no longer enabled by default\n    Unless an explicit compression option is specified in the configuration,\n    ``--allow-compression`` defaults to ``no`` in OpeNVPN 2.6.0.\n    By default, OpenVPN 2.5 still allowed a server to enable compression by\n    pushing compression related options.\n\nPF (Packet Filtering) support has been removed\n   The built-in PF functionality has been removed from the code base. This\n   feature wasn't really easy to use and was long unmaintained.\n   This implies that also ``--management-client-pf`` and any other compile\n   time or run time related option do not exist any longer.\n\nOption conflict checking is being deprecated and phased out\n    The static option checking (OCC) is no longer useful in typical setups\n    that negotiate most connection parameters. The ``--opt-verify`` and\n    ``--occ-disable`` options are deprecated, and the configure option\n    ``--enable-strict-options`` has been removed. Logging of mismatched\n    options has been moved to debug logging (verb 7).\n\nUser-visible Changes\n--------------------\n- CHACHA20-POLY1305 is included in the default of ``--data-ciphers`` when available.\n- Option ``--prng`` is ignored as we rely on the SSL library random number generator.\n- Option ``--nobind`` is default when ``--client`` or ``--pull`` is used in the configuration\n- :code:`link_mtu` parameter is removed from environment or replaced with 0 when scripts are\n  called with parameters. This parameter is unreliable and no longer internally calculated.\n\n- control channel packet maximum size is no longer influenced by\n  ``--link-mtu``/``--tun-mtu`` and must be set by ``--max-packet-size`` now.\n  The default is 1250 for the control channel size.\n\n- In point-to-point OpenVPN setups (no ``--server``), using\n  ``--explict-exit-notiy`` on one end would terminate the other side at\n  session end.  This is considered a no longer useful default and has\n  been changed to \"restart on reception of explicit-exit-notify message\".\n  If the old behaviour is still desired, ``--remap-usr1 SIGTERM`` can be used.\n\n- FreeBSD tun interfaces with ``--topology subnet`` are now put into real\n  subnet mode (IFF_BROADCAST instead of IFF_POINTOPOINT) - this might upset\n  software that enumerates interfaces, looking for \"broadcast capable?\" and\n  expecting certain results.  Normal uses should not see any difference.\n\n- The default configurations will no longer allow connections to OpenVPN 2.3.x\n  peer or earlier, use the new ``--compat-mode`` option if you need\n  compatibility with older versions. See the manual page on the\n  ``--compat-mode`` for details.\n\n- The ``client-pending-auth`` management command now requires also the\n  key id. The management version has been changed to 5 to indicate this change.\n\n- (OpenVPN 2.6.2) A client will now refuse a connection if pushed compression\n  settings will contradict the setting of allow-compression as this almost\n  always results in a non-working connection.\n\nCommon errors with OpenSSL 3.0 and OpenVPN 2.6\n----------------------------------------------\nBoth OpenVPN 2.6 and OpenSSL 3.0 tighten the security considerable, so some\nconfiguration will no longer work. This section will cover the most common\ncauses and error message we have seen and explain their reason and temporary\nworkarounds. You should fix the underlying problems as soon as possible since\nthese workaround are not secure and will eventually stop working in a future\nupdate.\n\n- weak SHA1 or MD5 signature on certificates\n\n  This will happen on either loading of certificates or on connection\n  to a server::\n\n      OpenSSL: error:0A00018E:SSL routines::ca md too weak\n      Cannot load certificate file cert.crt\n      Exiting due to fatal error\n\n  OpenSSL 3.0 no longer allows weak signatures on certificates. You can\n  downgrade your security to allow them by using ``--tls-cert-profile insecure``\n  but should replace/regenerate these certificates as soon as possible.\n\n\n- 1024 bit RSA certificates, 1024 bit DH parameters, other weak keys\n\n  This happens if you use private keys or other cryptographic material that\n  does not meet today's cryptographic standards anymore. Messages are similar\n  to::\n\n      OpenSSL: error:0A00018F:SSL routines::ee key too small\n      OpenSSL: error:1408518A:SSL routines:ssl3_ctx_ctrl:dh key too small\n\n  DH parameters (``--dh``) can be regenerated with ``openssl dhparam 2048``.\n  For other cryptographic keys, these keys and certificates need to be\n  regenerated. TLS Security level can be temporarily lowered with\n  ``--tls-cert-profile legacy`` or even ``--tls-cert-profile insecure``.\n\n- Connecting to a OpenVPN 2.3.x server or allowing OpenVPN 2.3.x or earlier\n  clients\n\n  This will normally result in messages like::\n\n     OPTIONS ERROR: failed to negotiate cipher with server.  Add the server's cipher ('AES-128-CBC') to --data-ciphers (currently 'AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305') if you want to connect to this server.\n\n     or\n\n     client/127.0.0.1:49954 SENT CONTROL [client]: 'AUTH_FAILED,Data channel cipher negotiation failed (no shared cipher)' (status=1)\n\n  You can manually add the missing cipher to the ``--data-ciphers``. The\n  standard ciphers should be included as well, e.g.\n  ``--data-ciphers AES-256-GCM:AES-128-GCM:?Chacha20-Poly1305:?AES-128-CBC``.\n  You can also use the ``--compat-mode`` option. Note that these message may\n  also indicate other cipher configuration problems. See the data channel\n  cipher negotiation manual section for more details. (Available online under\n  https://github.com/OpenVPN/openvpn/blob/master/doc/man-sections/cipher-negotiation.rst)\n\n- Use of a legacy or deprecated cipher (e.g. 64bit block ciphers)\n\n  OpenSSL 3.0 no longer supports a number of insecure and outdated ciphers in\n  its default configuration. Some of these ciphers are known to be vulnerable (SWEET32 attack).\n\n  This will typically manifest itself in messages like::\n\n      OpenSSL: error:0308010C:digital envelope routines::unsupported\n      Cipher algorithm 'BF-CBC' not found\n      Unsupported cipher in --data-ciphers: BF-CBC\n\n  If your OpenSSL distribution comes with the legacy provider (see\n  also ``man OSSL_PROVIDER-legacy``), you can load it with\n  ``--providers legacy default``.  This will re-enable the old algorithms.\n\n- OpenVPN version not supporting TLS 1.2 or later\n\n  The default in OpenVPN 2.6 and also in many distributions is now TLS 1.2 or\n  later. Connecting to a peer that does not support this will results in\n  messages like::\n\n    TLS error: Unsupported protocol. This typically indicates that client and\n    server have no common TLS version enabled. This can be caused by mismatched\n    tls-version-min and tls-version-max options on client and server. If your\n    OpenVPN client is between v2.3.6 and v2.3.2 try adding tls-version-min 1.0\n    to the client configuration to use TLS 1.0+ instead of TLS 1.0 only\n    OpenSSL: error:0A000102:SSL routines::unsupported protocol\n\n  This can be an OpenVPN 2.3.6 or earlier version. ``compat-version 2.3.0`` will\n  enable TLS 1.0 support if supported by the OpenSSL distribution. Note that\n  on some Linux distributions enabling TLS 1.1 or 1.0 is not possible.\n\n\n\nOverview of changes in 2.5\n==========================\n\nNew features\n------------\nClient-specific tls-crypt keys (``--tls-crypt-v2``)\n    ``tls-crypt-v2`` adds the ability to supply each client with a unique\n    tls-crypt key.  This allows large organisations and VPN providers to profit\n    from the same DoS and TLS stack protection that small deployments can\n    already achieve using ``tls-auth`` or ``tls-crypt``.\n\nChaCha20-Poly1305 cipher support\n    Added support for using the ChaCha20-Poly1305 cipher in the OpenVPN data\n    channel.\n\nImproved Data channel cipher negotiation\n    The option ``ncp-ciphers`` has been renamed to ``data-ciphers``.\n    The old name is still accepted. The change in name signals that\n    ``data-ciphers`` is the preferred way to configure data channel\n    ciphers and the data prefix is chosen to avoid the ambiguity that\n    exists with ``--cipher`` for the data cipher and ``tls-cipher``\n    for the TLS ciphers.\n\n    OpenVPN clients will now signal all supported ciphers from the\n    ``data-ciphers`` option to the server via ``IV_CIPHERS``. OpenVPN\n    servers will select the first common cipher from the ``data-ciphers``\n    list instead of blindly pushing the first cipher of the list. This\n    allows to use a configuration like\n    ``data-ciphers ChaCha20-Poly1305:AES-256-GCM`` on the server that\n    prefers ChaCha20-Poly1305 but uses it only if the client supports it.\n\n    See the data channel negotiation section in the manual for more details.\n\nRemoval of BF-CBC support in default configuration:\n    By default OpenVPN 2.5 will only accept AES-256-GCM and AES-128-GCM as\n    data ciphers. OpenVPN 2.4 allows AES-256-GCM,AES-128-GCM and BF-CBC when\n    no --cipher and --ncp-ciphers options are present. Accepting BF-CBC can be\n    enabled by adding\n\n        data-ciphers AES-256-GCM:AES-128-GCM:BF-CBC\n\n    and when you need to support very old peers also\n\n        data-ciphers-fallback BF-CBC\n\n    To offer backwards compatibility with older configs an *explicit*\n\n        cipher BF-CBC\n\n    in the configuration will be automatically translated into adding BF-CBC\n    to the data-ciphers option and setting data-ciphers-fallback to BF-CBC\n    (as in the example commands above). We strongly recommend to switching\n    away from BF-CBC to a more secure cipher.\n\nAsynchronous (deferred) authentication support for auth-pam plugin.\n    See src/plugins/auth-pam/README.auth-pam for details.\n\nDeferred client-connect\n    The ``--client-connect`` option and the connect plugin API allow\n    asynchronous/deferred return of the configuration file in the same way\n    as the auth-plugin.\n\nFaster connection setup\n    A client will signal in the ``IV_PROTO`` variable that it is in pull\n    mode. This allows the server to push the configuration options to\n    the client without waiting for a ``PULL_REQUEST`` message. The feature\n    is automatically enabled if both client and server support it and\n    significantly reduces the connection setup time by avoiding one\n    extra packet round-trip and 1s of internal event delays.\n\nNetlink support\n    On Linux, if configured without ``--enable-iproute2``, configuring IP\n    addresses and adding/removing routes is now done via the netlink(3)\n    kernel interface.  This is much faster than calling ``ifconfig`` or\n    ``route`` and also enables OpenVPN to run with less privileges.\n\n    If configured with --enable-iproute2, the ``ip`` command is used\n    (as in 2.4).  Support for ``ifconfig`` and ``route`` is gone.\n\nWintun support\n    On Windows, OpenVPN can now use ``wintun`` devices.  They are faster\n    than the traditional ``tap9`` tun/tap devices, but do not provide\n    ``--dev tap`` mode - so the official installers contain both.  To use\n    a wintun device, add ``--windows-driver wintun`` to your config\n    (and use of the interactive service is required as wintun needs\n    SYSTEM privileges to enable access).\n\nIPv6-only operation\n    It is now possible to have only IPv6 addresses inside the VPN tunnel,\n    and IPv6-only address pools (2.4 always required IPv4 config/pools\n    and IPv6 was the \"optional extra\").\n\nImproved Windows 10 detection\n    Correctly log OS on Windows 10 now.\n\nLinux VRF support\n    Using the new ``--bind-dev`` option, the OpenVPN outside socket can\n    now be put into a Linux VRF.  See the \"Virtual Routing and Forwarding\"\n    documentation in the man page.\n\nTLS 1.3 support\n    TLS 1.3 support has been added to OpenVPN.  Currently, this requires\n    OpenSSL 1.1.1+.\n    The options ``--tls-ciphersuites`` and ``--tls-groups`` have been\n    added to fine tune TLS protocol options.  Most of the improvements\n    were also backported to OpenVPN 2.4 as part of the maintainance\n    releases.\n\nSupport setting DHCP search domain\n    A new option ``--dhcp-option DOMAIN-SEARCH my.example.com`` has been\n    defined, and Windows support for it is implemented (tun/tap only, no\n    wintun support yet).  Other platforms need to support this via ``--up``\n    script (Linux) or GUI (OSX/Tunnelblick).\n\nper-client changing of ``--data-ciphers`` or ``data-ciphers-fallback``\n    from client-connect script/dir (NOTE: this only changes preference of\n    ciphers for NCP, but can not override what the client announces as\n    \"willing to accept\")\n\nHandle setting of tun/tap interface MTU on Windows\n    If IPv6 is in use, MTU must be >= 1280 (Windows enforces IETF requirements)\n\nAdd support for OpenSSL engines to access private key material (like TPM).\n\nHMAC based auth-token support\n    The ``--auth-gen-token`` support has been improved and now generates HMAC\n    based user token. If the optional ``--auth-gen-token-secret`` option is\n    used clients will be able to seamlessly reconnect to a different server\n    using the same secret file or to the same server after a server restart.\n\nImproved support for pending authentication\n    The protocol has been enhanced to be able to signal that\n    the authentication should use a secondary authentication\n    via web (like SAML) or a two factor authentication without\n    disconnecting the OpenVPN session with AUTH_FAILED. The\n    session will instead be stay in a authenticated state and\n    wait for the second factor authentication to complete.\n\n    This feature currently requires usage of the managent interface\n    on both client and server side. See the `management-notes.txt`\n    ``client-pending-auth`` and ``cr-response`` commands for more\n    details.\n\nVLAN support\n    OpenVPN servers in TAP mode can now use 802.1q tagged VLANs\n    on the TAP interface to separate clients into different groups\n    that can then be handled differently (different subnets / DHCP,\n    firewall zones, ...) further down the network.  See the new\n    options ``--vlan-tagging``, ``--vlan-accept``, ``--vlan-pvid``.\n\n    802.1q tagging on the client side TAP interface is not handled\n    today (= tags are just forwarded transparently to the server).\n\nSupport building of .msi installers for Windows\n\nAllow unicode search string in ``--cryptoapicert`` option (Windows)\n\nSupport IPv4 configs with /31 netmasks now\n    (By no longer trying to configure ``broadcast x.x.x.x'' in\n    ifconfig calls, /31 support \"just works\")\n\nNew option ``--block-ipv6`` to reject all IPv6 packets (ICMPv6)\n    this is useful if the VPN service has no IPv6, but the clients\n    might have (LAN), to avoid client connections to IPv6-enabled\n    servers leaking \"around\" the IPv4-only VPN.\n\n``--ifconfig-ipv6`` and ``--ifconfig-ipv6-push`` will now accept\n    hostnames and do a DNS lookup to get the IPv6 address to use\n\n\nDeprecated features\n-------------------\nFor an up-to-date list of all deprecated options, see this wiki page:\nhttps://community.openvpn.net/openvpn/wiki/DeprecatedOptions\n\n- ``ncp-disable`` has been deprecated\n    With the improved and matured data channel cipher negotiation, the use\n    of ``ncp-disable`` should not be necessary anymore.\n\n- ``inetd`` has been deprecated\n  This is a very limited and not-well-tested way to run OpenVPN, on TCP\n  and TAP mode only, which complicates the code quite a bit for little gain.\n  To be removed in OpenVPN 2.6 (unless users protest).\n\n- ``no-iv`` has been removed\n  This option was made into a NOOP option with OpenVPN 2.4.  This has now\n  been completely removed.\n\n- ``--client-cert-not-required`` has been removed\n  This option will now cause server configurations to not start.  Use\n  ``--verify-client-cert none`` instead.\n\n- ``--ifconfig-pool-linear`` has been removed\n  This option is removed.  Use ``--topology p2p`` or ``--topology subnet``\n  instead.\n\n- ``--compress xxx`` is considered risky and is warned against, see below.\n\n- ``--key-method 1`` has been removed\n\n\nUser-visible Changes\n--------------------\n- If multiple connect handlers are used (client-connect, ccd, connect\n  plugin) and one of the handler succeeds but a subsequent fails, the\n  client-disconnect-script is now called immediately. Previously it\n  was called, when the VPN session was terminated.\n\n- Support for building with OpenSSL 1.0.1 has been removed. The minimum\n  supported OpenSSL version is now 1.0.2.\n\n- The GET_CONFIG management state is omitted if the server pushes\n  the client configuration almost immediately as result of the\n  faster connection setup feature.\n\n- ``--compress`` is nowadays considered risky, because attacks exist\n  leveraging compression-inside-crypto to reveal plaintext (VORACLE).  So\n  by default, ``--compress xxx`` will now accept incoming compressed\n  packets (for compatibility with peers that have not been upgraded yet),\n  but will not use compression outgoing packets.  This can be controlled with\n  the new option ``--allow-compression yes|no|asym``.\n\n- Stop changing ``--txlen`` aways from OS defaults unless explicitly specified\n  in config file.  OS defaults nowadays are actually larger then what we used\n  to configure, so our defaults sometimes caused packet drops = bad performance.\n\n- remove ``--writepid`` pid file on exit now\n\n- plugin-auth-pam now logs via OpenVPN logging method, no longer to stderr\n  (this means you'll have log messages in syslog or openvpn log file now)\n\n- use ISO 8601 time format for file based logging now (YYYY-MM-DD hh:mm:dd)\n  (syslog is not affected, nor is ``--machine-readable-output``)\n\n- ``--clr-verify`` now loads all CRLs if more than one CRL is in the same\n  file (OpenSSL backend only, mbedTLS always did that)\n\n- when ``--auth-user-pass file`` has no password, and the management interface\n  is active, query management interface (instead of trying console query,\n  which does not work on windows)\n\n- skip expired certificates in Windows certificate store (``--cryptoapicert``)\n\n- ``--socks-proxy`` + ``--proto udp*`` will now allways use IPv4, even if\n  IPv6 is requested and available.  Our SOCKS code does not handle IPv6+UDP,\n  and before that change it would just fail in non-obvious ways.\n\n- TCP listen() backlog queue is now set to 32 - this helps TCP servers that\n  receive lots of \"invalid\" connects by TCP port scanners\n\n- do no longer print OCC warnings (\"option mismatch\") about ``key-method``,\n  ``keydir``, ``tls-auth`` and ``cipher`` - these are either gone now, or\n  negotiated, and the warnings do not serve a useful purpose.\n\n- ``dhcp-option DNS`` and ``dhcp-option DNS6`` are now treated identically\n  (= both accept an IPv4 or IPv6 address for the nameserver)\n\n\nMaintainer-visible changes\n--------------------------\n- the man page is now in maintained in .rst format, so building the openvpn.8\n  manpage from a git checkout now requires python-docutils (if this is missing,\n  the manpage will not be built - which is not considered an error generally,\n  but for package builders or ``make distcheck`` it is).  Release tarballs\n  contain the openvpn.8 file, so unless some .rst is changed, doc-utils are\n  not needed for building.\n\n- OCC support can no longer be disabled\n\n- AEAD support is now required in the crypto library\n\n- ``--disable-server`` has been removed from configure (so it is no longer\n  possible to build a client-/p2p-only OpenVPN binary) - the saving in code\n  size no longer outweighs the extra maintenance effort.\n\n- ``--enable-iproute2`` will disable netlink(3) support, so maybe remove\n  that from package building configs (see above)\n\n- support building with MSVC 2019\n\n- cmocka based unit tests are now only run if cmocka is installed externally\n  (2.4 used to ship a local git submodule which was painful to maintain)\n\n- ``--disable-crypto`` configure option has been removed.  OpenVPN is now always\n  built with crypto support, which makes the code much easier to maintain.\n  This does not affect ``--cipher none`` to do a tunnel without encryption.\n\n- ``--disable-multi`` configure option has been removed\n\n\n\nOverview of changes in 2.4\n==========================\n\n\nNew features\n------------\nSeamless client IP/port floating\n    Added new packet format P_DATA_V2, which includes peer-id. If both the\n    server and client support it, the client sends all data packets in\n    the new format. When a data packet arrives, the server identifies peer\n    by peer-id. If peer's ip/port has changed, server assumes that\n    client has floated, verifies HMAC and updates ip/port in internal structs.\n    This allows the connection to be immediately restored, instead of requiring\n    a TLS handshake before the server accepts packets from the new client\n    ip/port.\n\nData channel cipher negotiation\n    Data channel ciphers (``--cipher``) are now by default negotiated.  If a\n    client advertises support for Negotiable Crypto Parameters (NCP), the\n    server will choose a cipher (by default AES-256-GCM) for the data channel,\n    and tell the client to use that cipher.  Data channel cipher negotiation\n    can be controlled using ``--ncp-ciphers`` and ``--ncp-disable``.\n\n    A more limited version also works in client-to-server and server-to-client\n    scenarios where one of the end points uses a v2.4 client or server and the\n    other side uses an older version.  In such scenarios the v2.4 side will\n    change to the ``--cipher`` set by the remote side, if permitted by by\n    ``--ncp-ciphers``.  For example, a v2.4 client with ``--cipher BF-CBC``\n    and ``ncp-ciphers AES-256-GCM:AES-256-CBC`` can connect to both a v2.3\n    server with ``cipher BF-CBC`` as well as a server with\n    ``cipher AES-256-CBC`` in its config.  The other way around, a v2.3 client\n    with either ``cipher BF-CBC`` or ``cipher AES-256-CBC`` can connect to a\n    v2.4 server with e.g. ``cipher BF-CBC`` and\n    ``ncp-ciphers AES-256-GCM:AES-256-CBC`` in its config.  For this to work\n    it requires that OpenVPN was built without disabling OCC support.\n\nAEAD (GCM) data channel cipher support\n    The data channel now supports AEAD ciphers (currently only GCM).  The AEAD\n    packet format has a smaller crypto overhead than the CBC packet format,\n    (e.g. 20 bytes per packet for AES-128-GCM instead of 36 bytes per packet\n    for AES-128-CBC + HMAC-SHA1).\n\nECDH key exchange\n    The TLS control channel now supports for elliptic curve diffie-hellmann\n    key exchange (ECDH).\n\nImproved Certificate Revocation List (CRL) processing\n    CRLs are now handled by the crypto library (OpenSSL or mbed TLS), instead\n    of inside OpenVPN itself.  The crypto library implementations are more\n    strict than the OpenVPN implementation was.  This might reject peer\n    certificates that would previously be accepted.  If this occurs, OpenVPN\n    will log the crypto library's error description.\n\nDualstack round-robin DNS client connect\n    Instead of only using the first address of each ``--remote`` OpenVPN\n    will now try all addresses (IPv6 and IPv4) of a ``--remote`` entry.\n\nSupport for providing IPv6 DNS servers\n    A new DHCP sub-option ``DNS6`` is added alongside with the already existing\n    ``DNS`` sub-option.  This is used to provide DNS resolvers available over\n    IPv6.  This may be pushed to clients where `` --up`` scripts and ``--plugin``\n    can act upon it through the ``foreign_option_<n>`` environment variables.\n\n    Support for the Windows client picking up this new sub-option is added,\n    however IPv6 DNS resolvers need to be configured via ``netsh`` which requires\n    administrator privileges unless the new interactive services on Windows is\n    being used.  If the interactive service is used, this service will execute\n    ``netsh`` in the background with the proper privileges.\n\nNew improved Windows Background service\n    The new OpenVPNService is based on openvpnserv2, a complete rewrite of the OpenVPN\n    service wrapper. It is intended for launching OpenVPN instances that should be\n    up at all times, instead of being manually launched by a user. OpenVPNService is\n    able to restart individual OpenVPN processes if they crash, and it also works\n    properly on recent Windows versions. OpenVPNServiceLegacy tends to work poorly,\n    if at all, on newer Windows versions (8+) and its use is not recommended.\n\nNew interactive Windows service\n    The installer starts OpenVPNServiceInteractive automatically and configures\n    it to start\tat system startup.\n\n    The interactive Windows service allows unprivileged users to start\n    OpenVPN connections in the global config directory (usually\n    C:\\\\Program Files\\\\OpenVPN\\\\config) using OpenVPN GUI without any\n    extra configuration.\n\n    Users who belong to the built-in Administrator group or to the\n    local \"OpenVPN Administrator\" group can also store configuration\n    files under %USERPROFILE%\\\\OpenVPN\\\\config for use with the\n    interactive service.\n\nredirect-gateway ipv6\n    OpenVPN has now feature parity between IPv4 and IPv6 for redirect\n    gateway including the handling of overlapping IPv6 routes with\n    IPv6 remote VPN server address.\n\nLZ4 Compression and pushable compression\n    Additionally to LZO compression OpenVPN now also supports LZ4 compression.\n    Compression options are now pushable from the server.\n\nFilter pulled options client-side: pull-filter\n    New option to explicitly allow or reject options pushed by the server.\n    May be used multiple times and is applied in the order specified.\n\nPer-client remove push options: push-remove\n    New option to remove options on a per-client basis from the \"push\" list\n    (more fine-grained than ``--push-reset``).\n\nHttp proxy password inside config file\n    Http proxy passwords can be specified with the inline file option\n    ``<http-proxy-user-pass>`` .. ``</http-proxy-user-pass>``\n\nWindows version detection\n    Windows version is detected, logged and possibly signalled to server\n    (IV_PLAT_VER=<nn> if ``--push-peer-info`` is set on client).\n\nAuthentication tokens\n    In situations where it is not suitable to save user passwords on the client,\n    OpenVPN has support for pushing a --auth-token since v2.3.  This option is\n    pushed from the server to the client with a token value to be used instead\n    of the users password.  For this to work, the authentication plug-in would\n    need to implement this support as well.  In OpenVPN 2.4 --auth-gen-token\n    is introduced, which will allow the OpenVPN server to generate a random\n    token and push it to the client without any changes to the authentication\n    modules.  When the clients need to re-authenticate the OpenVPN server will\n    do the authentication internally, instead of sending the re-authentication\n    request to the authentication module .  This feature is especially\n    useful in configurations which use One Time Password (OTP) authentication\n    schemes, as this allows the tunnel keys to be renegotiated regularly without\n    any need to supply new OTP codes.\n\nkeying-material-exporter\n    Keying Material Exporter [RFC-5705] allow additional keying material to be\n    derived from existing TLS channel.\n\nAndroid platform support\n    Support for running on Android using Android's VPNService API has been added.\n    See doc/android.txt for more details. This support is primarily used in\n    the OpenVPN for Android app (https://github.com/schwabe/ics-openvpn)\n\nAIX platform support\n    AIX platform support has been added. The support only includes tap\n    devices since AIX does not provide tun interface.\n\nControl channel encryption (``--tls-crypt``)\n    Use a pre-shared static key (like the ``--tls-auth`` key) to encrypt control\n    channel packets.  Provides more privacy, some obfuscation and poor-man's\n    post-quantum security.\n\nAsynchronous push reply\n    Plug-ins providing support for deferred authentication can benefit from a more\n    responsive authentication where the server sends PUSH_REPLY immediately once\n    the authentication result is ready, instead of waiting for the client to\n    to send PUSH_REQUEST once more.  This requires OpenVPN to be built with\n    ``./configure --enable-async-push``.  This is a compile-time only switch.\n\n\nDeprecated features\n-------------------\nFor an up-to-date list of all deprecated options, see this wiki page:\nhttps://community.openvpn.net/openvpn/wiki/DeprecatedOptions\n\n- ``--key-method 1`` is deprecated in OpenVPN 2.4 and will be removed in v2.5.\n  Migrate away from ``--key-method 1`` as soon as possible.  The recommended\n  approach is to remove the ``--key-method`` option from the configuration\n  files, OpenVPN will then use ``--key-method 2`` by default.  Note that this\n  requires changing the option in both the client and server side configs.\n\n- ``--tls-remote`` is removed in OpenVPN 2.4, as indicated in the v2.3\n  man-pages.  Similar functionality is provided via ``--verify-x509-name``,\n  which does the same job in a better way.\n\n- ``--compat-names`` and ``--no-name-remapping`` were deprecated in OpenVPN 2.3\n  and will be removed in v2.5.  All scripts and plug-ins depending on the old\n  non-standard X.509 subject formatting must be updated to the standardized\n  formatting.  See the man page for more information.\n\n- ``--no-iv`` is deprecated in OpenVPN 2.4 and will be removed in v2.5.\n\n- ``--keysize`` is deprecated in OpenVPN 2.4 and will be removed in v2.6\n  together with the support of ciphers with cipher block size less than\n  128-bits.\n\n- ``--comp-lzo`` is deprecated in OpenVPN 2.4.  Use ``--compress`` instead.\n\n- ``--ifconfig-pool-linear`` has been deprecated since OpenVPN 2.1 and will be\n  removed in v2.5.  Use ``--topology p2p`` instead.\n\n- ``--client-cert-not-required`` is deprecated in OpenVPN 2.4 and will be removed\n  in v2.5.  Use ``--verify-client-cert none`` for a functional equivalent.\n\n- ``--ns-cert-type`` is deprecated in OpenVPN 2.3.18 and v2.4.  It will be removed\n  in v2.5.  Use the far better ``--remote-cert-tls`` option which replaces this\n  feature.\n\n\nUser-visible Changes\n--------------------\n- When using ciphers with cipher blocks less than 128-bits,\n  OpenVPN will complain loudly if the configuration uses ciphers considered\n  weak, such as the SWEET32 attack vector.  In such scenarios, OpenVPN will by\n  default renegotiate for each 64MB of transported data (``--reneg-bytes``).\n  This renegotiation can be disabled, but is HIGHLY DISCOURAGED.\n\n- For certificate DNs with duplicate fields, e.g. \"OU=one,OU=two\", both fields\n  are now exported to the environment, where each second and later occurrence\n  of a field get _$N appended to it's field name, starting at N=1.  For the\n  example above, that would result in e.g. X509_0_OU=one, X509_0_OU_1=two.\n  Note that this breaks setups that rely on the fact that OpenVPN would\n  previously (incorrectly) only export the last occurrence of a field.\n\n- ``proto udp`` and ``proto tcp`` now use both IPv4 and IPv6. The new\n  options ``proto udp4`` and ``proto tcp4`` use IPv4 only.\n\n- ``--sndbuf`` and ``--recvbuf`` default now to OS defaults instead of 64k\n\n- OpenVPN exits with an error if an option has extra parameters;\n  previously they were silently ignored\n\n- ``--tls-auth`` always requires OpenVPN static key files and will no\n  longer work with free form files\n\n- ``--proto udp6/tcp6`` in server mode will now try to always listen to\n  both IPv4 and IPv6 on platforms that allow it. Use ``--bind ipv6only``\n  to explicitly listen only on IPv6.\n\n- Removed ``--enable-password-save`` from configure. This option is now\n  always enabled.\n\n- Stricter default TLS cipher list (override with ``--tls-cipher``), that now\n  also disables:\n\n  * Non-ephemeral key exchange using static (EC)DH keys\n  * DSS private keys\n\n- mbed TLS builds: changed the tls_digest_N values exported to the script\n  environment to be equal to the ones exported by OpenSSL builds, namely\n  the certificate fingerprint (was the hash of the 'to be signed' data).\n\n- mbed TLS builds: minimum RSA key size is now 2048 bits.  Shorter keys will\n  not be accepted, both local and from the peer.\n\n- ``--connect-timeout`` now specifies the timeout until the first TLS packet\n  is received (identical to ``--server-poll-timeout``) and this timeout now\n  includes the removed socks proxy timeout and http proxy timeout.\n\n  In ``--static`` mode ``connect-timeout`` specifies the timeout for TCP and\n  proxy connection establishment\n\n- ``--connect-retry-max`` now specifies the maximum number of unsuccessful\n  attempts of each remote/connection entry before exiting.\n\n- ``--http-proxy-timeout`` and the static non-changeable socks timeout (5s)\n  have been folded into a \"unified\" ``--connect-timeout`` which covers all\n  steps needed to connect to the server, up to the start of the TLS exchange.\n  The default value has been raised to 120s, to handle slow http/socks\n  proxies graciously.  The old \"fail TCP fast\" behaviour can be achieved by\n  adding \"``--connect-timeout 10``\" to the client config.\n\n- ``--http-proxy-retry`` and ``--sock-proxy-retry`` have been removed. Proxy connections\n  will now behave like regular connection entries and generate a USR1 on failure.\n\n- ``--connect-retry`` gets an optional second argument that specifies the maximum\n  time in seconds to wait between reconnection attempts when an exponential\n  backoff is triggered due to repeated retries. Default = 300 seconds.\n\n- Data channel cipher negotiation (see New features section) can override\n  ciphers configured in the config file.  Use ``--ncp-disable`` if you do not want\n  this behavior.\n\n- All tun devices on all platforms are always considered to be IPv6\n  capable. The ``--tun-ipv6`` option is ignored (behaves like it is always\n  on).\n\n- On the client side recursively routed packets, which have the same destination\n  as the VPN server, are dropped. This can be disabled with\n  --allow-recursive-routing option.\n\n- On Windows, when the ``--register-dns`` option is set, OpenVPN no longer\n  restarts the ``dnscache`` service - this had unwanted side effects, and\n  seems to be no longer necessary with currently supported Windows versions.\n\n- If no flags are given, and the interactive Windows service is used, \"def1\"\n  is implicitly set (because \"delete and later reinstall the existing\n  default route\" does not work well here).  If not using the service,\n  the old behaviour is kept.\n\n- OpenVPN now reloads a CRL only if the modication time or file size has\n  changed, instead of for each new connection.  This reduces the connection\n  setup time, in particular when using large CRLs.\n\n- OpenVPN now ships with more up-to-date systemd unit files which take advantage\n  of the improved service management as well as some hardening steps.  The\n  configuration files are picked up from the /etc/openvpn/server/ and\n  /etc/openvpn/client/ directories (depending on unit file).  This also avoids\n  these new unit files and how they work to collide with older pre-existing\n  unit files.\n\n- Using ``--no-iv`` (which is generally not a recommended setup) will\n  require explicitly disabling NCP with ``--disable-ncp``.  This is\n  intentional because NCP will by default use AES-GCM, which requires\n  an IV - so we want users of that option to consciously reconsider.\n\n\nMaintainer-visible changes\n--------------------------\n- OpenVPN no longer supports building with crypto support, but without TLS\n  support.  As a consequence, OPENSSL_CRYPTO_{CFLAGS,LIBS} and\n  OPENSSL_SSL_{CFLAGS,LIBS} have been merged into OPENSSL_{CFLAGS,LIBS}.  This\n  is particularly relevant for maintainers who build their own OpenSSL library,\n  e.g. when cross-compiling.\n\n- Linux distributions using systemd is highly encouraged to ship these new unit\n  files instead of older ones, to provide a unified behaviour across systemd\n  based Linux distributions.\n\n- With OpenVPN 2.4, the project has moved over to depend on and actively use\n  the official C99 standard (-std=c99).  This may fail on some older compiler/libc\n  header combinations.  In most of these situations it is recommended to\n  use -std=gnu99 in CFLAGS.  This is known to be needed when doing\n  i386/i686 builds on RHEL5.\n\n\nVersion 2.4.5\n=============\n\nNew features\n------------\n- The new option ``--tls-cert-profile`` can be used to restrict the set of\n  allowed crypto algorithms in TLS certificates in mbed TLS builds.  The\n  default profile is 'legacy' for now, which allows SHA1+, RSA-1024+ and any\n  elliptic curve certificates.  The default will be changed to the 'preferred'\n  profile in the future, which requires SHA2+, RSA-2048+ and any curve.\n\n\nVersion 2.4.3\n=============\n\nNew features\n------------\n- Support building with OpenSSL 1.1 now (in addition to older versions)\n\n- On Win10, set low interface metric for TAP adapter when block-outside-dns\n  is in use, to make Windows prefer the TAP adapter for DNS queries\n  (avoiding large delays)\n\n\nSecurity\n--------\n- CVE-2017-7522: Fix ``--x509-track`` post-authentication remote DoS\n  A client could crash a v2.4+ mbedtls server, if that server uses the\n  ``--x509-track`` option and the client has a correct, signed and unrevoked\n  certificate that contains an embedded NUL in the certificate subject.\n  Discovered and reported to the OpenVPN security team by Guido Vranken.\n\n- CVE-2017-7521: Fix post-authentication remote-triggerable memory leaks\n  A client could cause a server to leak a few bytes each time it connects to the\n  server.  That can eventually cause the server to run out of memory, and thereby\n  causing the server process to terminate. Discovered and reported to the\n  OpenVPN security team by Guido Vranken.  (OpenSSL builds only.)\n\n- CVE-2017-7521: Fix a potential post-authentication remote code execution\n  attack on servers that use the ``--x509-username-field`` option with an X.509\n  extension field (option argument prefixed with ``ext:``).  A client that can\n  cause a server to run out-of-memory (see above) might be able to cause the\n  server to double free, which in turn might lead to remote code execution.\n  Discovered and reported to the OpenVPN security team by Guido Vranken.\n  (OpenSSL builds only.)\n\n- CVE-2017-7520: Pre-authentication remote crash/information disclosure for\n  clients. If clients use a HTTP proxy with NTLM authentication (i.e.\n  ``--http-proxy <server> <port> [<authfile>|'auto'|'auto-nct'] ntlm2``),\n  a man-in-the-middle attacker between the client and the proxy can cause\n  the client to crash or disclose at most 96 bytes of stack memory. The\n  disclosed stack memory is likely to contain the proxy password. If the\n  proxy password is not reused, this is unlikely to compromise the security\n  of the OpenVPN tunnel itself.  Clients who do not use the ``--http-proxy``\n  option with ntlm2 authentication are not affected.\n\n- CVE-2017-7508: Fix remotely-triggerable ASSERT() on malformed IPv6 packet.\n  This can be used to remotely shutdown an openvpn server or client, if\n  IPv6 and ``--mssfix`` are enabled and the IPv6 networks used inside the VPN\n  are known.\n\n- Fix null-pointer dereference when talking to a malicious http proxy\n  that returns a malformed ``Proxy-Authenticate:`` headers for digest auth.\n\n- Fix overflow check for long ``--tls-cipher`` option\n\n- Windows: Pass correct buffer size to ``GetModuleFileNameW()``\n  (OSTIF/Quarkslabs audit, finding 5.6)\n\n\nUser-visible Changes\n--------------------\n- ``--verify-hash`` can now take an optional flag which changes the hashing\n  algorithm. It can be either SHA1 or SHA256.  The default if not provided is\n  SHA1 to preserve backwards compatibility with existing configurations.\n\n- Restrict the supported ``--x509-username-field`` extension fields to subjectAltName\n  and issuerAltName.  Other extensions probably didn't work anyway, and would\n  cause OpenVPN to crash when a client connects.\n\n\nBugfixes\n--------\n- Fix fingerprint calculation in mbed TLS builds.  This means that mbed TLS users\n  of OpenVPN 2.4.0, v2.4.1 and v2.4.2 that rely on the values of the\n  ``tls_digest_*`` env vars, or that use ``--verify-hash`` will have to change\n  the fingerprint values they check against.  The security impact of the\n  incorrect calculation is very minimal; the last few bytes (max 4, typically\n  4) are not verified by the fingerprint.  We expect no real-world impact,\n  because users that used this feature before will notice that it has suddenly\n  stopped working, and users that didn't will notice that connection setup\n  fails if they specify correct fingerprints.\n\n- Fix edge case with NCP when the server sends an empty PUSH_REPLY message\n  back, and the client would not initialize it's data channel crypto layer\n  properly (trac #903)\n\n- Fix SIGSEGV on unaligned buffer access on OpenBSD/Sparc64\n\n- Fix TCP_NODELAY on OpenBSD\n\n- Remove erroneous limitation on max number of args for ``--plugin``\n\n- Fix NCP behaviour on TLS reconnect (Server would not send a proper\n  \"cipher ...\" message back to the client, leading to client and server\n  using different ciphers) (trac #887)\n\n\nVersion 2.4.2\n=============\n\nBugfixes\n--------\n- Fix memory leak introduced in OpenVPN 2.4.1: if ``--remote-cert-tls`` is\n  used, we leaked some memory on each TLS (re)negotiation.\n\n\nSecurity\n--------\n- Fix a pre-authentication denial-of-service attack on both clients and\n  servers.  By sending a too-large control packet, OpenVPN 2.4.0 or v2.4.1 can\n  be forced to hit an ASSERT() and stop the process.  If ``--tls-auth`` or\n  ``--tls-crypt`` is used, only attackers that have the ``--tls-auth`` or\n  ``--tls-crypt`` key can mount an attack.\n  (OSTIF/Quarkslab audit finding 5.1, CVE-2017-7478)\n\n- Fix an authenticated remote DoS vulnerability that could be triggered by\n  causing a packet id roll over.  An attack is rather inefficient; a peer\n  would need to get us to send at least about 196 GB of data.\n  (OSTIF/Quarkslab audit finding 5.2, CVE-2017-7479)\n\n\nVersion 2.4.1\n=============\n- ``--remote-cert-ku`` now only requires the certificate to have at least the\n  bits set of one of the values in the supplied list, instead of requiring an\n  exact match to one of the values in the list.\n- ``--remote-cert-tls`` now only requires that a keyUsage is present in the\n  certificate, and leaves the verification of the value up to the crypto\n  library, which has more information (i.e. the key exchange method in use)\n  to verify that the keyUsage is correct.\n- ``--ns-cert-type`` is deprecated.  Use ``--remote-cert-tls`` instead.\n  The nsCertType x509 extension is very old, and barely used.\n  ``--remote-cert-tls`` uses the far more common keyUsage and extendedKeyUsage\n  extension instead.  Make sure your certificates carry these to be able to\n  use ``--remote-cert-tls``.\n\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 9.2529296875,
          "content": "Installation instructions for OpenVPN, a Secure Tunneling Daemon\n\nCopyright (C) 2002-2022 OpenVPN Inc. This program is free software;\nyou can redistribute it and/or modify\nit under the terms of the GNU General Public License version 2\nas published by the Free Software Foundation.\n\n*************************************************************************\n\nQUICK START:\n\n  Unix:\n    ./configure && make && make install\n\n*************************************************************************\n\nTo download OpenVPN source code of releases, go to:\n\n    https://openvpn.net/community-downloads/\n\nOpenVPN releases are also available as Debian/RPM packages:\n\n    https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos\n\nOpenVPN development versions can be found here:\n\n    https://github.com/OpenVPN/openvpn\n    https://gitlab.com/OpenVPN/openvpn\n    https://sourceforge.net/p/openvpn/openvpn/ci/master/tree/\n\nThey should all be in sync at any time.\n\nTo download easy-rsa go to:\n\n    https://github.com/OpenVPN/easy-rsa\n\nTo download tap-windows (NDIS 6) driver source code go to:\n\n    https://github.com/OpenVPN/tap-windows6\n\nTo download ovpn-dco Windows driver source code go to:\n\n    https://github.com/OpenVPN/ovpn-dco-win\n\nTo get the cross-compilation environment go to:\n\n    https://github.com/OpenVPN/openvpn-build\n\nFor step-by-step instructions with real-world examples see:\n\n    https://community.openvpn.net/openvpn/wiki/GettingStartedwithOVPN\n    https://community.openvpn.net/openvpn/wiki\n    https://openvpn.net/community-resources/\n\nAlso see the man page for more information.\n\n*************************************************************************\n\nFor a list of supported platforms and architectures, and for\ninstructions how to port OpenVPN to a yet-unsupported architecture,\nsee the file \"PORTS\".\n\n*************************************************************************\n\nSYSTEM REQUIREMENTS:\n  (1) TUN and/or TAP driver to allow user-space programs to control\n      a virtual point-to-point IP or Ethernet device.\n      See TUN/TAP Driver References section below for more info.\n  (2a) OpenSSL library, necessary for encryption, version 1.1.0 or higher\n      required, available from http://www.openssl.org/\n      or\n  (2b) mbed TLS library, an alternative for encryption, version 2.0 or higher\n      required, available from https://tls.mbed.org/\n  (3) on Linux, \"libnl-gen\" is required for kernel netlink support\n  (4) on Linux, \"libcap-ng\" is required for Linux capability handling\n\nOPTIONAL:\n  (5) LZO real-time compression library, required for link compression,\n      available from http://www.oberhumer.com/opensource/lzo/\n      (most supported operating systems have LZO in their installable\n      packages repository.  It might be necessary to add LZO_CFLAGS=\n      and LZO_LIBS= to the configure call to make it find the LZO pieces)\n  (6) LZ4 compression library\n\nOPTIONAL (for developers only):\n  (1) Autoconf 2.59 or higher\n      Automake 1.9 or higher\n      Libtool\n      Git\n  (2) cmocka test framework (http://cmocka.org)\n  (3) If using t_client.sh test framework, fping/fping6 is needed\n      Note: t_client.sh needs an external configured OpenVPN server.\n      See t_client.rc-sample for more info.\n\n*************************************************************************\n\nCHECK OUT SOURCE FROM SOURCE REPOSITORY:\n\n  Clone the repository:\n\n    git clone https://github.com/OpenVPN/openvpn\n    git clone https://gitlab.com/OpenVPN/openvpn\n    git clone git://openvpn.git.sourceforge.net/gitroot/openvpn/openvpn\n\n  Check out stable version:\n\n    git checkout release/2.6\n\n  Check out master (unstable) branch:\n\n    git checkout master\n\n\n*************************************************************************\n\nBUILD COMMANDS FROM TARBALL:\n\n\t./configure\n\tmake\n\tsudo make install\n\n*************************************************************************\n\nBUILD COMMANDS FROM SOURCE REPOSITORY CHECKOUT:\n\n\tautoreconf -i -v -f\n\t./configure\n\tmake\n\tsudo make install\n\n*************************************************************************\n\nBUILD A TARBALL FROM SOURCE REPOSITORY CHECKOUT:\n\n\tautoreconf -i -v -f\n\t./configure\n\tmake distcheck\n\n*************************************************************************\n\nTESTS (after BUILD):\n\nmake check (Run all tests below)\n\nTest Crypto:\n\n./openvpn --genkey secret key\n./openvpn --test-crypto --secret key\n\nTest SSL/TLS negotiations (runs for 2 minutes):\n\n./openvpn --config sample/sample-config-files/loopback-client (In one window)\n./openvpn --config sample/sample-config-files/loopback-server (Simultaneously in another window)\n\nFor more thorough client-server tests you can configure your own, private test\nenvironment. See tests/t_client.rc-sample for details.\n\nTo do the C unit tests, you need to have the \"cmocka\" test framework\ninstalled on your system.  More recent distributions already ship this\nas part of their packages/ports.  If your system does not have it,\nyou can install cmocka with these commands:\n\n  $ git clone https://git.cryptomilk.org/projects/cmocka.git\n  $ cd cmocka\n  $ mkdir build\n  $ cd build\n  $ cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Debug ..\n  $ make\n  $ sudo make install\n\n\n*************************************************************************\n\nOPTIONS for ./configure:\n\n  To get an overview of all the configure options, run \"./configure --help\"\n\nENVIRONMENT for ./configure:\n\n  For more fine-grained control on include + library paths for external\n  components etc., configure can be called with environment variables on\n  the command line, e.g.\n\n     ./configure OPENSSL_CFLAGS=\"-I/usr/local/include\" ...\n\n  these are also explained in \"./configure --help\", so not repeated here.\n\n*************************************************************************\n\nLinux distribution packaging:\n\nEach Linux distribution has their own way of doing packaging and their\nown set of guidelines of how proper packaging should be done.  It\nis therefore recommended to reach out to the Linux distributions you\nwant to have OpenVPN packaged for directly.  The OpenVPN project wants\nto focus more on the OpenVPN development and less on the packaging\nand how packaging is done in all various distributions.\n\nFor more details:\n\n* Arch Linux\n  https://www.archlinux.org/packages/?name=openvpn\n\n* Debian\n  https://packages.debian.org/search?keywords=openvpn&searchon=names\n  https://tracker.debian.org/pkg/openvpn\n\n* Fedora / Fedora EPEL (Red Hat Enterprise Linux/CentOS/Scientific Linux)\n  https://apps.fedoraproject.org/packages/openvpn/overview/\n  https://src.fedoraproject.org/rpms/openvpn\n\n* Gentoo\n  https://packages.gentoo.org/packages/net-vpn/openvpn\n  https://gitweb.gentoo.org/repo/gentoo.git/tree/net-vpn/openvpn\n\n* openSUSE\n  https://build.opensuse.org/package/show/network:vpn/openvpn\n\n* Ubuntu\n  https://packages.ubuntu.com/search?keywords=openvpn\n\nIn addition, the OpenVPN community provides best-effort package\nrepositories for CentOS/Fedora, Debian and Ubuntu:\nhttps://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos\n\n*************************************************************************\n\nTUN/TAP Driver References:\n\n* Linux 2.6 or higher (with integrated TUN/TAP driver):\n\n  (1) load driver:              modprobe tun\n  (2) enable routing:           echo 1 > /proc/sys/net/ipv4/ip_forward\n\n  Note that (1) needs to be done once per reboot.  If you install from RPM (see\n  above) and use the openvpn.init script, these steps are taken care of for you.\n\n* FreeBSD:\n\n  FreeBSD ships with the TUN/TAP driver, and the device nodes for tap0,\n  tap1, tap2, tap3, tun0, tun1, tun2 and tun3 are made by default.\n\n  On FreeBSD versions prior to 12.0-RELEASE, there were independent\n  TUN and TAP drivers, and the TAP driver needed to be loaded manually,\n  using the command:\n\n\t# kldload if_tap\n\n  For recent FreeBSD versions, TUN/TAP are integrated and always loaded.\n\n  FreeBSD 14 contains the ovpn(4) for kernel-level OpenVPN acceleration\n  (DCO) which will be used by OpenVPN 2.6 and up if available.\n\n* OpenBSD:\n\n  OpenBSD has dynamically created tun* devices so you only need\n  to create an empty /etc/hostname.tun0 (tun1, tun2 and so on) for each tun\n  you plan to use to create the device(s) at boot.\n\n* Solaris:\n\n  You need a TUN/TAP kernel driver for OpenVPN to work:\n\n    http://www.whiteboard.ne.jp/~admin2/tuntap/\n\n* Haiku:\n\n   Haiku can't yet dynamically create TUN/TAP devices, so you need to manually\n   create one before running openvpn:\n\n     # ifconfig tun/0 up\n\n   A standard reference the dev as \"tun\" in your config is all that's needed\n   to use the tunnel device.\n\n* Windows\n\n  OpenVPN on Windows needs a TUN/TAP kernel driver to work. OpenVPN installers\n  include this driver, so installing it separately is not usually required.\n\n  Starting from Windows 10 2004 / Windows Server 2022, OpenVPN can use the\n  dco-win driver for kernel-level acceleration for OpenVPN client setups.\n  This driver is also included in the community-provided OpenVPN installers.\n\n*************************************************************************\n\nCAVEATS & BUGS:\n\n* See the bug tracker on https://github.com/OpenVPN/openvpn/issues\n  and the wiki on https://community.openvpn.net/wiki for more detailed\n  caveats on operating systems, and for open and resolved bug reports.\n* Note: We only recently switched to GitHub for reporting new issues,\n  old issues can be found at https://community.openvpn.net/openvpn/report\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.98828125,
          "content": "#\n#  OpenVPN -- An application to securely tunnel IP networks\n#             over a single UDP port, with support for SSL/TLS-based\n#             session authentication and key exchange,\n#             packet encryption, packet authentication, and\n#             packet compression.\n#\n#  Copyright (C) 2002-2024 OpenVPN Inc <sales@openvpn.net>\n#  Copyright (C) 2010-2024 David Sommerseth <dazo@eurephia.org>\n#  Copyright (C) 2006-2012 Alon Bar-Lev <alon.barlev@gmail.com>\n#\n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License version 2\n#  as published by the Free Software Foundation.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License along\n#  with this program; if not, write to the Free Software Foundation, Inc.,\n#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n#\n\nACLOCAL_AMFLAGS = -I m4\n\nMAINTAINERCLEANFILES = \\\n\tconfig.log config.status \\\n\t$(srcdir)/Makefile.in \\\n\t$(srcdir)/config.h.in $(srcdir)/config.h.in~ $(srcdir)/configure \\\n\t$(srcdir)/install-sh $(srcdir)/ltmain.sh $(srcdir)/missing \\\n\t$(srcdir)/m4/libtool.m4 $(srcdir)/m4/lt~obsolete.m4 \\\n\t$(srcdir)/m4/ltoptions.m4 $(srcdir)/m4/ltsugar.m4 \\\n\t$(srcdir)/m4/ltversion.m4 \\\n\t$(srcdir)/depcomp $(srcdir)/aclocal.m4 \\\n\t$(srcdir)/config.guess $(srcdir)/config.sub\n\nCLEANFILES = \\\n\tconfig-version.h tests/t_client.sh\n\nEXTRA_DIST = \\\n\tcontrib \\\n\tdebug \\\n\tltrc.inc \\\n\tCMakeLists.txt \\\n\tCMakePresets.json \\\n\tconfig.h.cmake.in \\\n\tforked-test-driver\n\n.PHONY: config-version.h doxygen\n\nif GIT_CHECKOUT\nBUILT_SOURCES = \\\n\tconfig-version.h\nendif\n\nSUBDIRS = distro include src sample doc tests\n\ndist_doc_DATA = \\\n\tREADME \\\n\tREADME.mbedtls \\\n\tChanges.rst \\\n\tCOPYRIGHT.GPL \\\n\tCOPYING\n\ndist_noinst_DATA = \\\n\t.gitignore \\\n\t.gitattributes \\\n\tCONTRIBUTING.rst \\\n\tPORTS \\\n\tREADME.cmake.md \\\n\tREADME.dco.md \\\n\tREADME.ec \\\n\tREADME.wolfssl\n\nconfig-version.h:\n\t@CONFIGURE_GIT_CHFILES=\"`$(GIT) -C \\\"$(top_srcdir)\\\" diff-files --name-status -r --ignore-submodules --quiet -- || echo \\\"+\\\"`\"; \\\n\tCONFIGURE_GIT_UNCOMMITTED=\"`$(GIT) -C \\\"$(top_srcdir)\\\" diff-index --cached  --quiet --ignore-submodules HEAD || echo \\\"*\\\"`\"; \\\n\tCONFIGURE_GIT_REVISION=\"`$(GIT) -C \\\"$(top_srcdir)\\\" rev-parse --symbolic-full-name HEAD | cut -d/ -f3-`/`$(GIT) -C \\\"$(top_srcdir)\\\" rev-parse --short=16 HEAD`\"; \\\n\techo \"#define CONFIGURE_GIT_REVISION \\\"$${CONFIGURE_GIT_REVISION}\\\"\" > config-version.h.tmp; \\\n\techo \"#define CONFIGURE_GIT_FLAGS \\\"$${CONFIGURE_GIT_CHFILES}$${CONFIGURE_GIT_UNCOMMITTED}\\\"\" >> config-version.h.tmp\n\n\t@if ! [ -f config-version.h ] || ! cmp -s config-version.h.tmp config-version.h; then \\\n\t\techo \"replacing config-version.h\"; \\\n\t\tmv config-version.h.tmp config-version.h; \\\n\telse \\\n\t\trm -f config-version.h.tmp; \\\n\tfi\n\ndoxygen:\n\t$(MAKE) -C doc/doxygen doxygen\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "PORTS",
          "type": "blob",
          "size": 3.8203125,
          "content": "OpenVPN\nCopyright (C) 2002-2024 OpenVPN Inc <sales@openvpn.net>\n\n  OpenVPN has been written to try to avoid features\n  that are not standardized well across different\n  OSes, so porting OpenVPN itself will probably be\n  straightforward if a tun or tap driver already exists.\n\n  Where special OS features are used, they are usually\n  bracketed with #ifdef HAVE_SOME_FUNCTION.\n\nPLATFORM STATUS:\n\nTier 1 platforms - actively tested for every source commit, across\nmultiple operating system versions\n\n  * Windows 7 and newer\n  * Windows Server 2012 and newer\n  * Linux\n  * FreeBSD\n  * macOS\n\nTier 2 platforms - it worked at some point, but is not actively tested\non \"latest OS, latest OS libraries\" so might break if larger changes\nare done on the platform side\n\n  * OpenBSD\n  * NetBSD\n  * DragonFly BSD\n  * Solaris\n  * AIX\n\nFor underlying CPU architecture, everything 32 bit or 64 bit (Intel, AMD,\nARM, PowerPC, SPARC*) should work fine.  16 bit Architectures are unlikely\nto work.\n\n\nPORTING GUIDELINE TO A NEW PLATFORM:\n\n  * Make sure that OpenSSL will build on your\n    platform.\n  * Make sure that a tun or tap virtual device\n    driver exists for your platform.  See\n    http://vtun.sourceforge.net/tun/ for examples\n    of tun and tap drivers that have been written\n    for Linux, Solaris, and FreeBSD.\n  * Make sure you have autoconf 2.50+ and\n    automake 1.6+.\n  * Edit configure.ac, adding platform specific\n    config code, and a TARGET_YOUROS define.\n  * Add platform-specific includes to syshead.h.\n  * Add an #ifdef TARGET_YOUROS to the do_ifconfig()\n    function in tun.c to generate a correct \"ifconfig\"\n    command for your platform.  Note that OpenVPN\n    determines the ifconfig path at ./configure time.\n  * Possibly add an ifconfig_order() variant for your OS so\n    openvpn knows whether to call ifconfig before\n    or after tun/tap dev open.\n  * Add an #ifdef TARGET_YOUROS block in tun.c and define\n    the open_tun, close_tun, read_tun, and write_tun\n    functions.  If your tun/tap virtual device is\n    sufficiently generic, you may be able to use the\n    default case.\n  * Add appropriate code to route.c to handle\n    the route command on your platform.  This\n    is necessary for the --route option to\n    work correctly.\n  * After you successfully build OpenVPN, run\n    the loopback tests as described in INSTALL.\n  * For the next test, confirm that the UDP socket\n    functionality is working independently of the\n    tun device, by doing something like:\n      ./openvpn --remote localhost --verb 9 --ping 1 --dev null\n  * Now try with --remote [a real host]\n  * Now try with a real tun/tap device, you will\n    need to figure out the appropriate ifconfig\n    command to use once openvpn has opened the tun/tap\n    device.\n  * Once you have simple tests working on the tun device,\n    try more complex tests such as using TLS mode.\n  * Stress test the link by doing ping -f across it.\n  * Make sure that packet fragmenting is happening\n    correctly by doing a ping -s 2000 or higher.\n  * Ensure that OpenVPN on your platform will talk\n    to OpenVPN on other platforms such as Linux.\n    Some tun/tap driver implementations will prepend\n    unnecessary stuff onto the datagram that must be\n    disabled with an explicit ioctl call if cross-platform\n    compatibility is to be preserved.  You can see some\n    examples of this in tun.c.\n  * Try the ultimate stress test which is --gremlin --reneg-sec 10\n    in TLS mode then do a flood ping across the tunnel\n    (ping -f remote-endpoint) in both directions and let\n    it run overnight.  --gremlin will induce massive\n    corruption and packet loss, but you win if you\n    wake up the next morning and both peers are still\n    running and occasionally even succeeding in their\n    attempted once-per-10-seconds TLS handshake. \n  * When it's working, submit your patch to\n    <openvpn-devel@lists.sourceforge.net>\n    and rejoice :)\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 2.29296875,
          "content": "OpenVPN -- A Secure tunneling daemon\n\nCopyright (C) 2002-2022 OpenVPN Inc. This program is free software;\nyou can redistribute it and/or modify\nit under the terms of the GNU General Public License version 2\nas published by the Free Software Foundation.\n\n*************************************************************************\n\nTo get the latest release of OpenVPN, go to:\n\n\thttps://openvpn.net/community-downloads/\n\nTo Build and Install,\n\n\ttar -zxf openvpn-<version>.tar.gz\n\tcd openvpn-<version>\n\t./configure\n\tmake\n\tmake install\n\nor see the file INSTALL for more info.\n\nFor information on how to build OpenVPN on/for Windows with MinGW\nor MSVC see README.cmake.md.\n\n*************************************************************************\n\nFor detailed information on OpenVPN, including examples, see the man page\n  http://openvpn.net/man.html\n\nFor a sample VPN configuration, see\n  http://openvpn.net/howto.html\n\nTo report an issue, see\n  https://github.com/OpenVPN/openvpn/issues/new\n  (Note: We recently switched to GitHub for reporting new issues,\n   old issues can be found at:\n   https://community.openvpn.net/openvpn/report)\n\nFor a description of OpenVPN's underlying protocol,\n  see the file ssl.h included in the source distribution.\n\n*************************************************************************\n\nOther Files & Directories:\n\n* configure.ac -- script to rebuild our configure\n  script and makefile.\n\n* sample/sample-scripts/verify-cn\n\n  A sample perl script which can be used with OpenVPN's\n  --tls-verify option to provide a customized authentication\n  test on embedded X509 certificate fields.\n\n* sample/sample-keys/\n\n  Sample RSA keys and certificates.  DON'T USE THESE FILES\n  FOR ANYTHING OTHER THAN TESTING BECAUSE THEY ARE TOTALLY INSECURE.\n\n* sample/sample-config-files/\n\n  A collection of OpenVPN config files and scripts from\n  the HOWTO at http://openvpn.net/howto.html\n\n*************************************************************************\n\nNote that easy-rsa and tap-windows are now maintained in their own subprojects.\nTheir source code is available here:\n\n  https://github.com/OpenVPN/easy-rsa\n  https://github.com/OpenVPN/tap-windows6\n\nCommunity-provided Windows installers (MSI) and Debian packages are built from\n\n  https://github.com/OpenVPN/openvpn-build\n\nSee the INSTALL file for usage information.\n"
        },
        {
          "name": "README.cmake.md",
          "type": "blob",
          "size": 7.3994140625,
          "content": "OpenVPN Builds with CMake\n=========================\n\nFor Windows builds we do not use the autotools-based buildsystem that we use\nfor our Unix-like (Linux, BSDs, macOS, etc.) builds. Instead we added a\nseparate (CMake)[https://cmake.org/]-based buildsystem.\n\nThis buildsystem supports building for Windows both with MSVC (i.e. Visual\nStudio) and MinGW. MinGW builds are also supported as cross-compile\nfrom Linux.\n\nThe official builds, which are also available as CMake presets (see\n`cmake --list-presets` and `CMakePresets.json`) all use\n(VCPKG)[https://github.com/microsoft/vcpkg/#vcpkg-overview] for dependency\nmanagement. This allows us to do proper supply-chain management and\nalso makes cross-building with MinGW on Linux much simpler. However,\nbuilds are also possible by providing the build dependencies manually,\nbut that might require specifying more information to CMake.\n\nYou need at least CMake version 3.21 or newer for the `CMakePreset.json`\nfile to be supported. Manual builds might be possible with older CMake\nversions, see `cmake_minimum_required` in `CMakeLists.txt`.\n\nIf you're looking to build the full Windows installer MSI, take a look\nat https://github.com/OpenVPN/openvpn-build.git .\n\nMSVC builds\n-----------\n\nThe following tools are expected to be present on the system, you\ncan install them with a package manager of your choice (e.g.\nchocolatey, winget) or manually:\n\n* CMake (>= 3.21)\n* Git\n* Python (3.x), plus the Python module `docutils`\n* Visual Studion 17 (2022), C/C++ Enviroment\n\nFor example, to prepare the required tools with chocolatey, you\ncan use the following commands (Powershell):\n\n    # Installing Chocolatey\n    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n    & choco.exe install -y git --params \"/GitAndUnixToolsOnPath\"\n    & choco.exe install -y python\n    & python.exe -m ensurepip\n    & python.exe -m pip install --upgrade pip\n    & python.exe -m pip install docutils\n    & choco.exe install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'\n    & choco.exe install -y \"visualstudio2022buildtools\"\n    & choco.exe install -y \"visualstudio2022-workload-vctools\" --params \"--add Microsoft.VisualStudio.Component.UWP.VC.ARM64 --add Microsoft.VisualStudio.Component.VC.Tools.ARM64 --add Microsoft.VisualStudio.Component.VC.ATL.Spectre --add Microsoft.VisualStudio.Component.VC.ATLMFC.Spectre --add Microsoft.VisualStudio.Component.VC.ATL.ARM64.Spectre --add Microsoft.VisualStudio.Component.VC.MFC.ARM64.Spectre --add Microsoft.VisualStudio.Component.VC.Runtimes.ARM64.Spectre --add Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre --quiet\"\n    & choco.exe install -y windows-sdk-10-version-2004-windbg\n\nOne or more restarts of Powershell might be required to pick up new additions\nto `PATH` between steps. A Windows restart is probably required after\ninstalling Visual Studio before being able to use it.\nYou can find the exact commands we use to set up the community build machines\nat https://github.com/OpenVPN/openvpn-buildbot/blob/master/jenkins/windows-server/msibuild.pkr.hcl\n\nTo do a default build, assuming you are in a MSVC 17 2022 environment:\n\n    mkdir C:\\OpenVPN\n    cd C:\\OpenVPN\n    git clone https://github.com/microsoft/vcpkg.git\n    git clone https://github.com/OpenVPN/openvpn.git\n    set VCPKG_ROOT=C:\\OpenVPN\\vcpkg\n    cd openvpn\n    cmake --preset win-amd64-release\n    cmake --build --preset win-amd64-release\n    ctest --preset win-amd64-release\n\nWhen using the presets, the build directory is\n`out/build/<preset-name>/`, you can find the output files there.\nNo install support is provided directly in OpenVPN build, take a look\nat https://github.com/OpenVPN/openvpn-build.git instead.\n\nMinGW builds (cross-compile on Linux)\n-------------------------------------\n\nTo build the Windows executables on a Linux system:\n\n    # install mingw with the package manager of your choice, e.g.\n    sudo apt-get install -y mingw-w64\n    # in addition to mingw we also need a toolchain for host builds, e.g.\n    sudo apt-get install -y build-essential\n    # minimum required tools for vcpkg bootstrap: curl, zip, unzip, tar, e.g.\n    sudo apt-get install -y curl zip unzip tar\n    # additionally vcpkg requires powershell when building Windows binaries.\n    # See https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux\n    # e.g.\n    sudo apt-get install -y wget apt-transport-https software-properties-common\n    wget -q \"https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb\"\n    sudo dpkg -i packages-microsoft-prod.deb\n    sudo apt-get update\n    sudo apt-get install -y powershell\n    # minimum required tools for build: cmake, docutils, git, ninja,\n    # pkg-config, python e.g.\n    sudo apt-get install -y cmake git ninja-build pkg-config python3 python3-docutils\n    # additionally required to build pkcs11-helper: automake, autoconf,\n    # man2html, e.g.\n    sudo apt-get install -y automake autoconf man2html-base\n    mkdir mingw\n    cd mingw\n    git clone https://github.com/microsoft/vcpkg.git\n    git clone https://github.com/OpenVPN/openvpn.git\n    export VCPKG_ROOT=$PWD/vcpkg\n    cd openvpn\n    # requires CMake 3.21 or newer\n    cmake --preset mingw-x64\n    cmake --build --preset mingw-x64\n    # unit tests are built, but no testPreset is provided. You need to copy\n    # them to a Windows system manually\n\nThe instructions have been verified on a Ubuntu 22.04 LTS system in a\nbash shell, and might need adaptions to other Linux distributions/versions.\n\nNote that the MinGW preset builds use the `Ninja multi-config` generator, so\nif you want to build the Debug binaries, use\n\n    cmake --build --preset mingw-x64 --config Debug\n\nThe default build is equivalent to specifying `--config Release`.\n\nWhen using the presets, the build directory is\n`out/build/mingw/<arch>`, you can find the actual output files in\nsub-directories called `<buildtype>`.\nNo install support is provided directly in OpenVPN build, take a look\nat https://github.com/OpenVPN/openvpn-build.git instead.\n\nUnsupported builds\n------------------\n\nThe CMake buildsystem also supports builds on Unix-like platforms. These builds\nare sometimes useful for OpenVPN developers (e.g. when they use IDEs with\nintegrated CMake support). However, they are not officially supported, do not\ninclude any install support and should not be used to distribute/package\nOpenVPN. To emphasize this fact, you need to specify `-DUNSUPPORTED_BUILDS=ON`\nto cmake to be able to use these builds.\n\nThe `unix-native` CMake preset is available for these builds. This preset does\nnot require VCPKG and instead assumes all build-dependencies are provided by\nthe system natively.\n\nGenerating compile_commands.json\n--------------------------------\n\nTo have the CMake buildsystem generate compile_commands.json you can specify\n`-DENABLE_COMPILE_COMMANDS=ON` on the command line or enable the CMake option\nanother way you like. For supported generators the file will then be created.\nAdditionally, the buildsystem will create a symlink `build/` to the --preset\nbuild directory that contains the generated JSON file. This is done so that\nclangd is able to find it.\n\nEnabling this option may cause an error on Windows, since creating a symlink\nis a privileged operation there. If you enable Developer Mode for the system,\nsymlinks can be created by regular users.\n"
        },
        {
          "name": "README.dco.md",
          "type": "blob",
          "size": 5.0361328125,
          "content": "OpenVPN data channel offload\n============================\n2.6.0+ implements support for data-channel offloading where the data packets\nare directly processed and forwarded in kernel space thanks to the ovpn-dco\nkernel module. The userspace openvpn program acts purely as a control plane\napplication.\n\n\nOverview of current release\n---------------------------\n- See the \"Limitations by design\" and \"Current limitations\" sections for\n  features that are not and/or will not be supported by OpenVPN + ovpn-dco.\n\n\nGetting started (Linux)\n-----------------------\n- Use a recent Linux kernel. Linux 5.4.0 and newer are known to work with\n  ovpn-dco.\n\nGet the ovpn-dco module from one these urls and build it:\n\n* https://gitlab.com/openvpn/ovpn-dco\n* https://github.com/OpenVPN/ovpn-dco\n\ne.g.\n\n    git clone https://github.com/OpenVPN/ovpn-dco\n    cd ovpn-dco\n    make\n    sudo make install\n\nIf you want to report bugs please ensure to compile ovpn-dco with\n`make DEBUG=1` and include any debug message being printed by the\nkernel (you can view those messages with `dmesg`).\n\nClone and build OpenVPN (or use OpenVPN 2.6+). For example:\n\n    git clone https://github.com/openvpn/openvpn.git\n    cd openvpn\n    autoreconf -vi\n    ./configure --enable-dco\n    make\n    sudo make install # Or just run src/openvpn/openvpn\n\nWhen starting openvpn it will automatically detect DCO support and use the\nkernel module. Add the option `--disable-dco` to disable data channel offload\nsupport. If the configuration contains an option that is incompatible with\ndata channel offloading, OpenVPN will automatically disable DCO support and\nwarn the user.\n\nShould OpenVPN be configured to use a feature that is not supported by ovpn-dco\nor should the ovpn-dco kernel module not be available on the system, you will\nsee a message like\n\n    Note: Kernel support for ovpn-dco missing, disabling data channel offload.\n\nin your log.\n\n\nGetting started (Windows)\n-------------------------\nOfficial releases published at https://openvpn.net/community-downloads/\ninclude ovpn-dco-win driver since 2.6.0.\n\nThere are also snapshot releases available at\nhttps://build.openvpn.net/downloads/snapshots/github-actions/openvpn2/ .\nThis installer contains the latest OpenVPN code and the ovpn-dco-win driver.\n\n\nDCO and P2P mode\n----------------\nDCO is also available when running OpenVPN in P2P mode without `--pull` /\n`--client` option. P2P mode is useful for scenarios when the OpenVPN tunnel\nshould not interfere with overall routing and behave more like a \"dumb\" tunnel,\nlike GRE.\n\nHowever, DCO requires DATA_V2 to be enabled, which is available for P2P mode\nonly in OpenVPN 2.6 and later.\n\nOpenVPN prints a diagnostic message for the P2P NCP result when running in P2P\nmode:\n\n    P2P mode NCP negotiation result: TLS_export=1, DATA_v2=1, peer-id 9484735, cipher=AES-256-GCM\n\nDouble check that you have `DATA_v2=1` in your output and a supported AEAD\ncipher (AES-XXX-GCM or CHACHA20POLY1305).\n\n\nRouting with ovpn-dco\n---------------------\nThe ovpn-dco kernel module implements a more transparent approach to\nconfiguring routes to clients (aka \"iroutes\") and consults the main kernel\nrouting tables for forwarding decisions.\n\n- Each client has a VPN IPv4 and/or a VPN IPv6 assigned to it;\n- additional IP ranges can be routed to a client by adding a route with\n  a client VPN IP as the gateway/nexthop (i.e. ip route add a.b.c.d/24 via\n  $VPNIP);\n- due to the point above, there is no real need to add a companion `--route` for\n  each `--iroute` directive, unless you want to blackhole traffic when the\n  specific client is not connected;\n- no internal routing is available. If you need truly internal routes, this can\n  be achieved either with filtering using `iptables` or using `ip rule`;\n- client-to-client behaviour, as implemented in userspace, does not exist:\n  packets always reach the tunnel interface and are then re-routed to the\n  destination peer based on the system routing table.\n\n\nLimitations by design\n----------------------\n- Layer 3 (dev tun) only;\n- only the following AEAD ciphers are currently supported: Chacha20-Poly1305\n  and AES-GCM-128/192/256;\n- no support for compression or compression framing:\n  - see also the `--compress migrate` option to move to a setup without\n    compression;\n- various features not implemented since they have better replacements:\n  - `--shaper`, use tc instead;\n  - packet manipulation, use nftables/iptables instead;\n- OpenVPN 2.4.0 is the minimum version required for peers to connect:\n  - older versions are missing support for the AEAD ciphers;\n- topology subnet is the only supported `--topology` for servers;\n- iroute directives install routes on the host operating system, see also\n  Routing with ovpn-dco;\n- (ovpn-dco-win) client and p2p mode only;\n- (ovpn-dco-win) Chacha20-Poly1305 support available starting with Windows 11.\n\n\nCurrent implementation limitations\n-------------------\n- `--persist-tun` not tested;\n- IPv6 mapped IPv4 addresses need Linux 5.4.189+/5.10.110+/5.12+ to work;\n- some incompatible options may not properly fallback to non-dco;\n- no per client statistics. Only total statistics available on the interface.\n"
        },
        {
          "name": "README.ec",
          "type": "blob",
          "size": 1.83984375,
          "content": "Since 2.4.0, OpenVPN has official support for elliptic curve crypto. Elliptic\ncurves are an alternative to RSA for asymmetric encryption.\n\nElliptic curve crypto ('ECC') can be used for the ('TLS') control channel only\nin OpenVPN; the data channel (encrypting the actual network traffic) uses\nsymmetric encryption. ECC can be used in TLS for authentication (ECDSA) and key\nexchange (ECDH).\n\nKey exchange (ECDH)\n-------------------\nOpenVPN 2.4.0 and newer automatically initialize ECDH parameters. When ECDSA is\nused for authentication, the curve used for the server certificate will be used\nfor ECDH too. When autodetection fails (e.g. when using RSA certificates)\nOpenVPN lets the crypto library decide if possible, or falls back to the\nsecp384r1 curve. The list of groups/curves that the crypto library will choose\nfrom can be set with the --tls-groups <grouplist> option.\n\nAn administrator can force an OpenVPN/OpenSSL server to use a specific curve\nusing the --ecdh-curve <curvename> option with one of the curves listed as\navailable by the --show-groups option. Clients will use the same curve as\nselected by the server.\n\nNote that not all curves listed by --show-groups are available for use with TLS;\nin that case connecting will fail with a 'no shared cipher' TLS error.\n\nAuthentication (ECDSA)\n----------------------\nSince OpenVPN 2.4.0, using ECDSA certificates works 'out of the box'. Which\nspecific curves and cipher suites are available depends on your version and\nconfiguration of the crypto library. The crypto library will automatically\nselect a cipher suite for the TLS control channel.\n\nSupport for generating an ECDSA certificate chain is available in EasyRSA (in\nspite of it's name) since EasyRSA 3.0. The parameters you're looking for are\n'--use-algo=ec' and '--curve=<curve_name>'. See the EasyRSA documentation for\nmore details on generating ECDSA certificates.\n"
        },
        {
          "name": "README.mbedtls",
          "type": "blob",
          "size": 0.947265625,
          "content": "This version of OpenVPN has mbed TLS support. To enable, follow the\ninstructions below:\n\nTo build and install,\n\n\t./configure --with-crypto-library=mbedtls\n\tmake\n\tmake install\n\nThis version requires mbed TLS version >= 2.0.0 or >= 3.2.1.\n\n*************************************************************************\n\nDue to limitations in the mbed TLS library, the following features are missing\nin the mbed TLS version of OpenVPN:\n\n * PKCS#12 file support\n * --capath support - Loading certificate authorities from a directory\n * Windows CryptoAPI support\n * X.509 alternative username fields (must be \"CN\")\n\nPlugin/Script features:\n\n * X.509 subject line has a different format than the OpenSSL subject line\n * X.509 certificate tracking\n\n*************************************************************************\n\nMbed TLS 3 has implemented (parts of) the TLS 1.3 protocol, but we have disabled\nsupport in OpenVPN because the TLS-Exporter function is not yet implemented.\n"
        },
        {
          "name": "README.wolfssl",
          "type": "blob",
          "size": 1.125,
          "content": "Support for wolfSSL is implemented and maintained by wolfSSL Inc. The support is\nimplemented using wolfSSL's compatibility layer. The wolfSSL support in OpenVPN\nreceives very limited testing/support from the OpenVPN community itself.\n\nIf bugs in OpenVPN when using wolfSSL are encountered, the user should try to\nalso compile OpenVPN with OpenSSL to determine if these are bugs in the\nwolfSSL TLS implementation or OpenVPN itself. If bugs are caused by compiling\nwith wolfSSL, please contact support@wolfssl.com directly.\n\nTo Build and Install,\n\n\t./configure --with-crypto-library=wolfssl\n\tmake\n\tmake install\n\n\nThe wolfSSL library will include the installed options.h file by default.\nTo include a custom user_settings.h file for wolfSSL,\n\n./configure --with-crypto-library=wolfssl --disable-wolfssl-options-h\nmake\nmake install\n\n*************************************************************************\nDue to limitations in the wolfSSL TLS library or its compatibility layer, the\nfollowing features are missing\n\n * blowfish support (BF-CBC), you must use something like\n   cipher AES-128-CBC to avoid trying to use BF-CBC\n * Windows CryptoAPI support\n"
        },
        {
          "name": "compat.m4",
          "type": "blob",
          "size": 1.95703125,
          "content": "dnl  OpenVPN -- An application to securely tunnel IP networks\ndnl             over a single UDP port, with support for SSL/TLS-based\ndnl             session authentication and key exchange,\ndnl             packet encryption, packet authentication, and\ndnl             packet compression.\ndnl\ndnl  Copyright (C) 2008-2012 Alon Bar-Lev <alon.barlev@gmail.com>\ndnl\ndnl  This program is free software; you can redistribute it and/or modify\ndnl  it under the terms of the GNU General Public License as published by\ndnl  the Free Software Foundation; either version 2 of the License, or\ndnl  (at your option) any later version.\ndnl\ndnl  This program is distributed in the hope that it will be useful,\ndnl  but WITHOUT ANY WARRANTY; without even the implied warranty of\ndnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\ndnl  GNU General Public License for more details.\ndnl\ndnl  You should have received a copy of the GNU General Public License along\ndnl  with this program; if not, write to the Free Software Foundation, Inc.,\ndnl  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\ndnl Compatibility layer for <autoconf-2.60 <automake-1.10\ndnl REMOVE THIS IN FUTURE!\n\nifdef(\n\t[AS_VAR_IF],\n\t,\n\t[\n\t\tAC_DEFUN([AS_VAR_IF], [dnl\n\t\t\tif test \"$$1\" = \"$2\"; then\n\t\t\t\tm4_ifval([$3], [$3], [:])\n\t\t\telse\n\t\t\t\tm4_ifval([$4], [$4], [:])\n\t\t\tfi\n\t\t])\n\t]\n)\nifdef(\n\t[AC_USE_SYSTEM_EXTENSIONS],\n\t,\n\t[AC_DEFUN([AC_USE_SYSTEM_EXTENSIONS], [GNU_SOURCE])]\n)\nifdef(\n\t[AC_PROG_SED],\n\t,\n\t[AC_DEFUN([AC_PROG_SED], [AC_CHECK_PROGS([SED], [sed])])]\n)\nifdef(\n\t[PKG_CHECK_VAR],\n\t,\n\t[\n\t\tAC_DEFUN([PKG_CHECK_VAR],\n\t\t[AC_REQUIRE([PKG_PROG_PKG_CONFIG])\n\t\tAC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])\n\n\t\t_PKG_CONFIG([$1], [variable=\"][$3][\"], [$2])\n\t\tAS_VAR_COPY([$1], [pkg_cv_][$1])\n\n\t\tAS_VAR_IF([$1], [\"\"], [$5], [$4])\n\t\t])\n\t]\n)\n\nif test -z \"${docdir}\"; then\n\tdocdir=\"\\$(datadir)/doc/\\$(PACKAGE_NAME)\"\n\tAC_SUBST([docdir])\nfi\nif test -z \"${htmldir}\"; then\n\thtmldir=\"\\$(docdir)\"\n\tAC_SUBST([htmldir])\nfi\n"
        },
        {
          "name": "config.h.cmake.in",
          "type": "blob",
          "size": 12.283203125,
          "content": "\n/* Configuration settings */\n#define CONFIGURE_DEFINES \"N/A\"\n\n/* Enable async push */\n#cmakedefine ENABLE_ASYNC_PUSH\n\n/* Use mbed TLS library */\n#cmakedefine ENABLE_CRYPTO_MBEDTLS\n\n/* Use Openssl */\n#cmakedefine ENABLE_CRYPTO_OPENSSL\n\n/* Use wolfSSL crypto library */\n#cmakedefine ENABLE_CRYPTO_WOLFSSL\n\n/* Enable shared data channel offload */\n#cmakedefine ENABLE_DCO\n\n/* Enable debugging support (needed for verb>=4) */\n#define ENABLE_DEBUG 1\n\n/* We have persist tun capability */\n#cmakedefine ENABLE_FEATURE_TUN_PERSIST\n\n/* Enable internal fragmentation support */\n#define ENABLE_FRAGMENT 1\n\n/* Enable linux data channel offload */\n#cmakedefine ENABLE_LINUXDCO\n\n/* Enable LZ4 compression library */\n#cmakedefine ENABLE_LZ4\n\n/* Enable LZO compression library */\n#cmakedefine ENABLE_LZO\n\n/* Enable NTLMv2 proxy support */\n#define ENABLE_NTLM 1\n\n/* Enable management server capability */\n#define ENABLE_MANAGEMENT 1\n\n/* Enable OFB and CFB cipher modes */\n#define ENABLE_OFB_CFB_MODE\n\n/* Enable PKCS11 */\n#cmakedefine ENABLE_PKCS11\n\n/* Enable plug-in support */\n#define ENABLE_PLUGIN 1\n\n/* Enable TCP Server port sharing */\n#cmakedefine ENABLE_PORT_SHARE\n\n/* SELinux support */\n#cmakedefine ENABLE_SELINUX\n\n/* enable sitnl support */\n#cmakedefine ENABLE_SITNL\n\n/* Enable systemd integration */\n/* #undef ENABLE_SYSTEMD */\n\n/* Enable --x509-username-field feature */\n#cmakedefine ENABLE_X509ALTUSERNAME\n\n/* Define to 1 if you have the <arpa/inet.h> header file. */\n#cmakedefine HAVE_ARPA_INET_H 1\n\n/* Define to 1 if you have the `basename' function. */\n#cmakedefine HAVE_BASENAME\n\n/* Define to 1 if you have the `chdir' function. */\n#cmakedefine HAVE_CHDIR\n\n/* Define to 1 if you have the `chroot' function. */\n#cmakedefine HAVE_CHROOT\n\n/* Define to 1 if you have the `chsize' function. */\n#cmakedefine HAVE_CHSIZE\n\n/* struct cmsghdr needed for extended socket error support */\n#cmakedefine HAVE_CMSGHDR\n\n/* git version information in config-version.h */\n#cmakedefine HAVE_CONFIG_VERSION_H\n\n/* Define to 1 if you have the `daemon' function. */\n#cmakedefine HAVE_DAEMON\n\n/* Define to 1 if you have the declaration of `SO_MARK', and to 0 if you\ndon't. */\n#cmakedefine01 HAVE_DECL_SO_MARK\n\n/* Define to 1 if you have the <direct.h> header file. */\n#cmakedefine HAVE_DIRECT_H\n\n/* Define to 1 if you have the `dirname' function. */\n#cmakedefine HAVE_DIRNAME\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#cmakedefine HAVE_DLFCN_H\n\n/* Define to 1 if you have the <dmalloc.h> header file. */\n#cmakedefine HAVE_DMALLOC_H\n\n/* Define to 1 if you have the `dup' function. */\n#cmakedefine HAVE_DUP\n\n/* Define to 1 if you have the `dup2' function. */\n#cmakedefine HAVE_DUP2\n\n/* Define to 1 if you have the `epoll_create' function. */\n#cmakedefine HAVE_EPOLL_CREATE\n\n/* Define to 1 if you have the <err.h> header file. */\n#cmakedefine HAVE_ERR_H\n\n/* Crypto library supports keying material exporter */\n#define HAVE_EXPORT_KEYING_MATERIAL 1\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#cmakedefine HAVE_FCNTL_H\n\n/* Define to 1 if you have the `fork' function. */\n#cmakedefine HAVE_FORK\n#cmakedefine HAVE_EXECVE\n\n/* Define to 1 if you have the `ftruncate' function. */\n#cmakedefine HAVE_FTRUNCATE\n\n/* Define to 1 if you have the `getgrnam' function. */\n#cmakedefine HAVE_GETGRNAM\n\n/* Define to 1 if you have the `getpeereid' function. */\n#cmakedefine HAVE_GETPEEREID\n\n/* Define to 1 if you have the `getpwnam' function. */\n#cmakedefine HAVE_GETPWNAM\n\n/* Define to 1 if you have the `getrlimit' function. */\n#cmakedefine HAVE_GETRLIMIT\n\n/* Define to 1 if you have the `getsockname' function. */\n#cmakedefine HAVE_GETSOCKNAME\n\n/* Define to 1 if you have the `gettimeofday' function. */\n#cmakedefine HAVE_GETTIMEOFDAY\n\n/* Define to 1 if you have the <grp.h> header file. */\n#cmakedefine HAVE_GRP_H\n\n/* struct in_pktinfo needed for IP_PKTINFO support */\n#cmakedefine HAVE_IN_PKTINFO\n\n/* Define to 1 if you have the <io.h> header file. */\n#cmakedefine HAVE_IO_H\n\n/* struct in_pktinfo.ipi_spec_dst needed for IP_PKTINFO support */\n#cmakedefine HAVE_IPI_SPEC_DST\n\n/* Define to 1 if you have the <libgen.h> header file. */\n#cmakedefine HAVE_LIBGEN_H\n\n/* Define to 1 if you have the <limits.h> header file. */\n#define HAVE_LIMITS_H 1\n\n/* Define to 1 if you have the <linux/if_tun.h> header file. */\n#cmakedefine HAVE_LINUX_IF_TUN_H\n\n/* Define to 1 if you have the <linux/sockios.h> header file. */\n#cmakedefine HAVE_LINUX_SOCKIOS_H\n\n/* Define to 1 if you have the <linux/types.h> header file. */\n#cmakedefine HAVE_LINUX_TYPES_H\n\n/* Define to 1 if you have the <lzo1x.h> header file. */\n#define HAVE_LZO1X_H 1\n\n/* Define to 1 if you have the `mlockall' function. */\n#cmakedefine HAVE_MLOCKALL\n\n/* struct msghdr needed for extended socket error support */\n#cmakedefine HAVE_MSGHDR\n\n/* Define to 1 if you have the <netdb.h> header file. */\n#cmakedefine HAVE_NETDB_H\n\n/* Define to 1 if you have the <netinet/in.h> header file. */\n#cmakedefine HAVE_NETINET_IN_H\n\n/* Define to 1 if you have the <netinet/ip.h> header file. */\n#cmakedefine HAVE_NETINET_IP_H\n\n/* Define to 1 if you have the <netinet/tcp.h> header file. */\n#undef HAVE_NETINET_TCP_H\n\n/* Define to 1 if you have the <net/if.h> header file. */\n#cmakedefine HAVE_NET_IF_H\n\n/* Define to 1 if you have the <net/if_tun.h> header file. */\n#cmakedefine HAVE_NET_IF_TUN_H\n\n/* Define to 1 if you have the <net/tun/if_tun.h> header file. */\n#cmakedefine HAVE_NET_TUN_IF_TUN_H\n\n/* Define to 1 if you have the `nice' function. */\n#cmakedefine HAVE_NICE\n\n/* Define to 1 if you have the `openlog' function. */\n#cmakedefine HAVE_OPENLOG\n\n/* OpenSSL engine support available */\n#undef HAVE_OPENSSL_ENGINE\n\n/* Define to 1 if you have the `poll' function. */\n#undef HAVE_POLL\n\n/* Define to 1 if you have the <poll.h> header file. */\n#cmakedefine HAVE_POLL_H\n\n/* Define to 1 if you have the `putenv' function. */\n#undef HAVE_PUTENV\n\n/* Define to 1 if you have the <pwd.h> header file. */\n#cmakedefine HAVE_PWD_H\n\n\n/* Define to 1 if you have the `recvmsg' function. */\n#cmakedefine HAVE_RECVMSG\n#cmakedefine HAVE_SENDMSG\n\n/* Define to 1 if you have the <resolv.h> header file. */\n#cmakedefine HAVE_RESOLV_H\n\n/* sa_family_t, needed to hold AF_* info */\n#cmakedefine HAVE_SA_FAMILY_T\n\n/* Define to 1 if you have the `sd_booted' function. */\n#undef HAVE_SD_BOOTED\n\n/* Define to 1 if you have the `setgid' function. */\n#cmakedefine HAVE_SETGID\n\n/* Define to 1 if you have the `setgroups' function. */\n#undef HAVE_SETGROUPS\n\n/* Define to 1 if you have the `setsid' function. */\n#cmakedefine HAVE_SETSID\n\n/* Define to 1 if you have the `setsockopt' function. */\n#define HAVE_SETSOCKOPT 1\n\n/* Define to 1 if you have the `setuid' function. */\n#cmakedefine HAVE_SETUID\n\n/* Define to 1 if you have the <signal.h> header file. */\n#undef HAVE_SIGNAL_H\n\n/* Define to 1 if you have the `socket' function. */\n#undef HAVE_SOCKET\n\n/* struct sock_extended_err needed for extended socket error support */\n#undef HAVE_SOCK_EXTENDED_ERR\n\n/* Define to 1 if you have the `stat' function. */\n#define HAVE_STAT 1\n\n/* Define to 1 if you have the <stdarg.h> header file. */\n#define HAVE_STDARG_H 1\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#define HAVE_STDINT_H 1\n\n/* Define to 1 if you have the <stdio.h> header file. */\n#define HAVE_STDIO_H 1\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#define HAVE_STDLIB_H 1\n\n/* Define to 1 if you have the `strdup' function. */\n#undef HAVE_STRDUP\n\n/* Define to 1 if you have the <strings.h> header file. */\n#define HAVE_STRINGS_H 1\n\n/* Define to 1 if you have the <string.h> header file. */\n#define HAVE_STRING_H 1\n\n/* Define to 1 if you have the `strsep' function. */\n#undef HAVE_STRSEP\n\n/* Define to 1 if you have the `syslog' function. */\n#cmakedefine HAVE_SYSLOG\n\n/* Define to 1 if you have the <syslog.h> header file. */\n#cmakedefine HAVE_SYSLOG_H\n\n/* Define to 1 if you have the `system' function. */\n#undef HAVE_SYSTEM\n\n/* Define to 1 if you have the <systemd/sd-daemon.h> header file. */\n#undef HAVE_SYSTEMD_SD_DAEMON_H\n\n/* Define to 1 if you have the <sys/epoll.h> header file. */\n#cmakedefine HAVE_SYS_EPOLL_H\n\n/* Define to 1 if you have the <sys/file.h> header file. */\n#undef HAVE_SYS_FILE_H\n\n/* Define to 1 if you have the <sys/inotify.h> header file. */\n#cmakedefine HAVE_SYS_INOTIFY_H\n\n/* Define to 1 if you have the <sys/ioctl.h> header file. */\n#cmakedefine HAVE_SYS_IOCTL_H\n\n/* Define to 1 if you have the <sys/kern_control.h> header file. */\n#undef HAVE_SYS_KERN_CONTROL_H\n\n/* Define to 1 if you have the <sys/mman.h> header file. */\n#cmakedefine HAVE_SYS_MMAN_H\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#cmakedefine HAVE_SYS_SOCKET_H\n\n/* Define to 1 if you have the <sys/sockio.h> header file. */\n#cmakedefine HAVE_SYS_SOCKIO_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#define HAVE_SYS_STAT_H 1\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#cmakedefine HAVE_SYS_TIME_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/uio.h> header file. */\n#cmakedefine HAVE_SYS_UIO_H\n\n/* Define to 1 if you have the <sys/un.h> header file. */\n#cmakedefine HAVE_SYS_UN_H\n\n/* Define to 1 if you have the <sys/wait.h> header file. */\n#cmakedefine HAVE_SYS_WAIT_H\n\n/* Define to 1 if you have the <tap-windows.h> header file. */\n#undef HAVE_TAP_WINDOWS_H\n\n/* Define to 1 if you have the `time' function. */\n#define HAVE_TIME 1\n\n/* Define to 1 if you have the <time.h> header file. */\n#define HAVE_TIME_H 1\n\n/* Define to 1 if you have the <uapi.h> header file. */\n#undef HAVE_UAPI_H\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#cmakedefine HAVE_UNISTD_H\n\n/* Define to 1 if you have the <valgrind/memcheck.h> header file. */\n#undef HAVE_VALGRIND_MEMCHECK_H\n\n/* Define to 1 if you have the `vfork' function. */\n#undef HAVE_VFORK\n\n/* Define to 1 if you have the <vfork.h> header file. */\n#undef HAVE_VFORK_H\n\n/* Availability of different mbed TLS features and APIs */\n#cmakedefine01 HAVE_MBEDTLS_PSA_CRYPTO_H\n#define HAVE_MBEDTLS_SSL_TLS_PRF 1\n#cmakedefine01 HAVE_MBEDTLS_SSL_SET_EXPORT_KEYS_CB\n#cmakedefine01 HAVE_MBEDTLS_CTR_DRBG_UPDATE_RET\n\n/* Path to ifconfig tool */\n#define IFCONFIG_PATH \"@IFCONFIG_PATH@\"\n\n/* Path to iproute tool */\n#define IPROUTE_PATH \"@IPROUTE_PATH@\"\n\n/* Path to route tool */\n#define ROUTE_PATH \"@ROUTE_PATH@\"\n\n/* OpenVPN version in Windows resource format - string */\n#define OPENVPN_VERSION_RESOURCE @OPENVPN_VERSION_RESOURCE@\n\n/* Name of package */\n#define PACKAGE \"openvpn\"\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#define PACKAGE_NAME \"OpenVPN\"\n\n/* Define to the full name and version of this package. */\n#define PACKAGE_STRING \"OpenVPN @OPENVPN_VERSION_MAJOR@.@OPENVPN_VERSION_MINOR@@OPENVPN_VERSION_PATCH@\"\n\n/* Define to the version of this package. */\n#define PACKAGE_VERSION \"@OPENVPN_VERSION_MAJOR@.@OPENVPN_VERSION_MINOR@@OPENVPN_VERSION_PATCH@\"\n\n/* Path to systemd-ask-password tool */\n#undef SYSTEMD_ASK_PASSWORD_PATH\n\n/* systemd is newer than v216 */\n#define SYSTEMD_NEWER_THAN_216\n\n/* The tap-windows id */\n#define TAP_WIN_COMPONENT_ID \"tap0901\"\n\n/* The tap-windows version number is required for OpenVPN */\n#define TAP_WIN_MIN_MAJOR 9\n\n/* The tap-windows version number is required for OpenVPN */\n#define TAP_WIN_MIN_MINOR 9\n\n/* Are we running on Mac OS X? */\n#cmakedefine TARGET_DARWIN\n\n/* Are we running on FreeBSD? */\n#cmakedefine TARGET_FREEBSD\n\n/* Are we running on Linux? */\n#cmakedefine TARGET_LINUX\n\n/* Are we running on Solaris/OpenIndiana? */\n#cmakedefine TARGET_SOLARIS\n\n/* Are we running WIN32? */\n#cmakedefine TARGET_WIN32\n\n#define TARGET_ALIAS \"@CMAKE_SYSTEM_NAME@\"\n\n/* Enable GNU extensions on systems that have them.  */\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE 1\n#endif\n\n/* if inttypes.h is included this breaks rc.exe when using the ClangCL\n * Toolchain as it pulls in a inttypes.h variant for clang that rc.exe does\n * not understand (#include_next preprocessor directive) */\n#if defined(_WIN32) && !defined(RC_INVOKED)\n#include <inttypes.h>\ntypedef uint32_t in_addr_t;\ntypedef uint16_t in_port_t;\n\n#define SIGHUP    1\n#define SIGINT    2\n#define SIGUSR1   10\n#define SIGUSR2   12\n#define SIGTERM   15\n#endif\n\n#if defined(_MSC_VER) && !defined(RC_INVOKED)\n#include <BaseTsd.h>\ntypedef SSIZE_T ssize_t;\n#define strncasecmp strnicmp\n#define strcasecmp _stricmp\n\n#define S_IRUSR _S_IREAD\n#define S_IWUSR _S_IWRITE\n#define R_OK 4\n#define W_OK 2\n#define X_OK 1\n#define F_OK 0\n#endif\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 44.0869140625,
          "content": "dnl  OpenVPN -- An application to securely tunnel IP networks\ndnl             over a single UDP port, with support for SSL/TLS-based\ndnl             session authentication and key exchange,\ndnl             packet encryption, packet authentication, and\ndnl             packet compression.\ndnl\ndnl  Copyright (C) 2002-2024 OpenVPN Inc <sales@openvpn.net>\ndnl  Copyright (C) 2006-2012 Alon Bar-Lev <alon.barlev@gmail.com>\ndnl\ndnl  This program is free software; you can redistribute it and/or modify\ndnl  it under the terms of the GNU General Public License as published by\ndnl  the Free Software Foundation; either version 2 of the License, or\ndnl  (at your option) any later version.\ndnl\ndnl  This program is distributed in the hope that it will be useful,\ndnl  but WITHOUT ANY WARRANTY; without even the implied warranty of\ndnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\ndnl  GNU General Public License for more details.\ndnl\ndnl  You should have received a copy of the GNU General Public License along\ndnl  with this program; if not, write to the Free Software Foundation, Inc.,\ndnl  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\ndnl Process this file with autoconf to produce a configure script.\n\nAC_PREREQ(2.60)\n\nm4_include(version.m4)\nAC_INIT([PRODUCT_NAME], [PRODUCT_VERSION], [PRODUCT_BUGREPORT], [PRODUCT_TARNAME])\nm4_include(compat.m4)\nAC_DEFINE([OPENVPN_VERSION_RESOURCE], [PRODUCT_VERSION_RESOURCE], [Version in windows resource format])\nAC_SUBST([OPENVPN_VERSION_MAJOR], [PRODUCT_VERSION_MAJOR], [OpenVPN major version])\nAC_SUBST([OPENVPN_VERSION_MINOR], [PRODUCT_VERSION_MINOR], [OpenVPN minor version])\nAC_SUBST([OPENVPN_VERSION_PATCH], [PRODUCT_VERSION_PATCH], [OpenVPN patch level - may be a string or integer])\nAC_DEFINE([OPENVPN_VERSION_MAJOR], [PRODUCT_VERSION_MAJOR], [OpenVPN major version - integer])\nAC_DEFINE([OPENVPN_VERSION_MINOR], [PRODUCT_VERSION_MINOR], [OpenVPN minor version - integer])\nAC_DEFINE([OPENVPN_VERSION_PATCH], [\"PRODUCT_VERSION_PATCH\"], [OpenVPN patch level - may be a string or integer])\n\nAC_CONFIG_AUX_DIR([.])\nAC_CONFIG_HEADERS([config.h include/openvpn-plugin.h])\nAC_CONFIG_SRCDIR([src/openvpn/syshead.h])\nAC_CONFIG_MACRO_DIR([m4])\n\ndnl Automake 1.14+ warns if sources are in sub-directories but subdir-objects\ndnl options is not enabled. However, automake before 1.15a has a bug that causes\ndnl variable expansion to fail in foo_SOURCES when this option is used.\ndnl As most of our build systems are now likely to use automake 1.16+ add a\ndnl work around to conditionally add subdir-objects option.\nm4_define([subdir_objects], [\n    m4_esyscmd([automake --version |\n                head -1 |\n                awk '{split ($NF,a,\".\"); if (a[1] == 1 && a[2] >= 16) { print \"subdir-objects\" }}'\n    ])\n])\n\n# This foreign option prevents autoreconf from overriding our COPYING and\n# INSTALL targets:\nAM_INIT_AUTOMAKE(foreign subdir_objects 1.9) dnl NB: Do not [quote] this parameter.\nAM_SILENT_RULES([yes])\nAC_CANONICAL_HOST\nAC_USE_SYSTEM_EXTENSIONS\n\nAC_ARG_ENABLE(\n\t[lzo],\n\t[AS_HELP_STRING([--disable-lzo], [disable LZO compression support @<:@default=yes@:>@])],\n\t,\n\t[enable_lzo=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[lz4],\n\t[AS_HELP_STRING([--disable-lz4], [disable LZ4 compression support @<:@default=yes@:>@])],\n\t[enable_lz4=\"$enableval\"],\n\t[enable_lz4=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[comp-stub],\n\t[AS_HELP_STRING([--enable-comp-stub], [disable compression support but still allow limited interoperability with compression-enabled peers @<:@default=no@:>@])],\n\t[enable_comp_stub=\"$enableval\"],\n\t[enable_comp_stub=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[ofb-cfb],\n\t[AS_HELP_STRING([--disable-ofb-cfb], [disable support for OFB and CFB cipher modes @<:@default=yes@:>@])],\n\t,\n\t[enable_crypto_ofb_cfb=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[x509-alt-username],\n\t[AS_HELP_STRING([--enable-x509-alt-username], [enable the --x509-username-field feature @<:@default=no@:>@])],\n\t,\n\t[enable_x509_alt_username=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[ntlm],\n\t[AS_HELP_STRING([--disable-ntlm], [disable NTLMv2 proxy support @<:@default=yes@:>@])],\n\t,\n\t[enable_ntlm=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[plugins],\n\t[AS_HELP_STRING([--disable-plugins], [disable plug-in support @<:@default=yes@:>@])],\n\t,\n\t[enable_plugins=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[management],\n\t[AS_HELP_STRING([--disable-management], [disable management server support @<:@default=yes@:>@])],\n\t,\n\t[enable_management=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[pkcs11],\n\t[AS_HELP_STRING([--enable-pkcs11], [enable pkcs11 support @<:@default=no@:>@])],\n\t,\n\t[enable_pkcs11=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[fragment],\n\t[AS_HELP_STRING([--disable-fragment], [disable internal fragmentation support (--fragment) @<:@default=yes@:>@])],\n\t,\n\t[enable_fragment=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[port-share],\n\t[AS_HELP_STRING([--disable-port-share], [disable TCP server port-share support (--port-share) @<:@default=yes@:>@])],\n\t,\n\t[enable_port_share=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[debug],\n\t[AS_HELP_STRING([--disable-debug], [disable debugging support (disable gremlin and verb 7+ messages) @<:@default=yes@:>@])],\n\t,\n\t[enable_debug=\"yes\"]\n)\n\nAC_ARG_ENABLE(\n\t[small],\n\t[AS_HELP_STRING([--enable-small], [enable smaller executable size (disable OCC, usage message, and verb 4 parm list) @<:@default=no@:>@])],\n\t,\n\t[enable_small=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[dco],\n\t[AS_HELP_STRING([--disable-dco], [disable data channel offload support using the ovpn-dco kernel module @<:@default=yes@:>@ on Linux/FreeBSD, can't disable on Windows])],\n\t,\n\t[\n\t\tcase \"$host\" in\n\t\t\t*-*-linux*)\n\t\t\t\tenable_dco=\"auto\"\n\t\t\t;;\n\t\t\t*-*-freebsd*)\n\t\t\t\tenable_dco=\"auto\"\n\t\t\t;;\n\t\t\t*)\n\t\t\t\t# note that this does not disable it for Windows\n\t\t\t\tenable_dco=\"no\"\n\t\t\t;;\n\t\tesac\n\t]\n)\n\nAC_ARG_ENABLE(\n\t[iproute2],\n\t[AS_HELP_STRING([--enable-iproute2], [enable support for iproute2 (disables DCO) @<:@default=no@:>@])],\n\t,\n\t[enable_iproute2=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[plugin-auth-pam],\n\t[AS_HELP_STRING([--disable-plugin-auth-pam], [disable auth-pam plugin @<:@default=platform specific@:>@])],\n\t,\n\t[\n\t\tcase \"$host\" in\n\t\t\t*-*-openbsd*) enable_plugin_auth_pam=\"no\";;\n\t\t\t*-mingw*) enable_plugin_auth_pam=\"no\";;\n\t\t\t*) enable_plugin_auth_pam=\"yes\";;\n\t\tesac\n\t]\n)\n\nAC_ARG_ENABLE(\n\t[plugin-down-root],\n\t[AS_HELP_STRING([--disable-plugin-down-root], [disable down-root plugin @<:@default=platform specific@:>@])],\n\t,\n\t[\n\t\tcase \"$host\" in\n\t\t\t*-mingw*) enable_plugin_down_root=\"no\";;\n\t\t\t*) enable_plugin_down_root=\"yes\";;\n\t\tesac\n\t]\n)\n\nAC_ARG_ENABLE(\n\t[pam-dlopen],\n\t[AS_HELP_STRING([--enable-pam-dlopen], [dlopen libpam @<:@default=no@:>@])],\n\t,\n\t[enable_pam_dlopen=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[strict],\n\t[AS_HELP_STRING([--enable-strict], [enable strict compiler warnings (debugging option) @<:@default=no@:>@])],\n\t,\n\t[enable_strict=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[pedantic],\n\t[AS_HELP_STRING([--enable-pedantic], [enable pedantic compiler warnings, will not generate a working executable (debugging option) @<:@default=no@:>@])],\n\t,\n\t[enable_pedantic=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[werror],\n\t[AS_HELP_STRING([--enable-werror], [promote compiler warnings to errors, will cause builds to fail if the compiler issues warnings (debugging option) @<:@default=no@:>@])],\n\t,\n\t[enable_werror=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[strict-options],\n\t[AS_HELP_STRING([--enable-strict-options], [enable strict options check between peers (debugging option) @<:@default=no@:>@])],\n\t,\n\t[enable_strict_options=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[selinux],\n\t[AS_HELP_STRING([--enable-selinux], [enable SELinux support @<:@default=no@:>@])],\n\t,\n\t[enable_selinux=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[systemd],\n\t[AS_HELP_STRING([--enable-systemd], [enable systemd support @<:@default=no@:>@])],\n\t,\n\t[enable_systemd=\"no\"]\n)\n\nAC_ARG_ENABLE(\n\t[async-push],\n\t[AS_HELP_STRING([--enable-async-push], [enable async-push support for plugins providing deferred authentication @<:@default=no@:>@])],\n\t,\n\t[enable_async_push=\"no\"]\n)\n\nAC_ARG_WITH(\n\t[special-build],\n\t[AS_HELP_STRING([--with-special-build=STRING], [specify special build string])],\n\t[test -n \"${withval}\" && AC_DEFINE_UNQUOTED([CONFIGURE_SPECIAL_BUILD], [\"${withval}\"], [special build string])]\n)\n\nAC_ARG_WITH(\n\t[mem-check],\n\t[AS_HELP_STRING([--with-mem-check=TYPE], [build with debug memory checking, TYPE=no|dmalloc|valgrind|ssl @<:@default=no@:>@])],\n\t[\n\t\tcase \"${withval}\" in\n\t\t\tdmalloc|valgrind|ssl|no) ;;\n\t\t\t*) AC_MSG_ERROR([bad value ${withval} for --mem-check]) ;;\n\t\tesac\n\t],\n\t[with_mem_check=\"no\"]\n)\n\nAC_ARG_WITH(\n\t[crypto-library],\n\t[AS_HELP_STRING([--with-crypto-library=library], [build with the given crypto library, TYPE=openssl|mbedtls|wolfssl @<:@default=openssl@:>@])],\n\t[\n\t\tcase \"${withval}\" in\n\t\t\topenssl|mbedtls|wolfssl) ;;\n\t\t\t*) AC_MSG_ERROR([bad value ${withval} for --with-crypto-library]) ;;\n\t\tesac\n\t],\n\t[with_crypto_library=\"openssl\"]\n)\n\nAC_ARG_ENABLE(\n\t[wolfssl-options-h],\n\t[AS_HELP_STRING([--disable-wolfssl-options-h], [Disable including options.h in wolfSSL @<:@default=yes@:>@])],\n\t,\n\t[enable_wolfssl_options_h=\"yes\"]\n)\n\nAC_ARG_WITH(\n\t[openssl-engine],\n\t[AS_HELP_STRING([--with-openssl-engine], [enable engine support with OpenSSL. Default enabled for OpenSSL < 3.0, auto,yes,no @<:@default=auto@:>@])],\n\t[\n\t\tcase \"${withval}\" in\n\t\t\tauto|yes|no) ;;\n\t\t\t*) AC_MSG_ERROR([bad value ${withval} for --with-engine]) ;;\n\t\tesac\n\t],\n\t[with_openssl_engine=\"auto\"]\n)\n\nAC_ARG_VAR([PLUGINDIR], [Path of plug-in directory @<:@default=LIBDIR/openvpn/plugins@:>@])\nif test -n \"${PLUGINDIR}\"; then\n\tplugindir=\"${PLUGINDIR}\"\nelse\n\tplugindir=\"\\${libdir}/openvpn/plugins\"\nfi\n\nAC_DEFINE_UNQUOTED([TARGET_ALIAS], [\"${host}\"], [A string representing our host])\nAM_CONDITIONAL([TARGET_LINUX], [false])\ncase \"$host\" in\n\t*-*-linux*)\n\t\tAC_DEFINE([TARGET_LINUX], [1], [Are we running on Linux?])\n\t\tAM_CONDITIONAL([TARGET_LINUX], [true])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"L\"], [Target prefix])\n\t\thave_sitnl=\"yes\"\n\t\tpkg_config_required=\"yes\"\n\t\t;;\n\t*-*-solaris*)\n\t\tAC_DEFINE([TARGET_SOLARIS], [1], [Are we running on Solaris?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"S\"], [Target prefix])\n\t\tCPPFLAGS=\"$CPPFLAGS -D_XPG4_2\"\n\t\ttest -x /bin/bash && SHELL=\"/bin/bash\"\n\t\t;;\n\t*-*-openbsd*)\n\t\tAC_DEFINE([TARGET_OPENBSD], [1], [Are we running on OpenBSD?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"O\"], [Target prefix])\n\t\t;;\n\t*-*-freebsd*)\n\t\tAC_DEFINE([TARGET_FREEBSD], [1], [Are we running on FreeBSD?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"F\"], [Target prefix])\n\t\t;;\n\t*-*-netbsd*)\n\t\tAC_DEFINE([TARGET_NETBSD], [1], [Are we running NetBSD?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"N\"], [Target prefix])\n\t\t;;\n\t*-*-darwin*)\n\t\tAC_DEFINE([TARGET_DARWIN], [1], [Are we running on Mac OS X?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"M\"], [Target prefix])\n\t\thave_tap_header=\"yes\"\n\t\tac_cv_type_struct_in_pktinfo=no\n\t\t;;\n\t*-mingw*)\n\t\tAC_DEFINE([TARGET_WIN32], [1], [Are we running WIN32?])\n\t\tAC_DEFINE([ENABLE_DCO], [1], [DCO is always enabled on Windows])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"W\"], [Target prefix])\n\t\tCPPFLAGS=\"${CPPFLAGS} -DWIN32_LEAN_AND_MEAN\"\n\t\tCPPFLAGS=\"${CPPFLAGS} -DNTDDI_VERSION=NTDDI_VISTA -D_WIN32_WINNT=_WIN32_WINNT_VISTA\"\n\t\tWIN32=yes\n\t\t;;\n\t*-*-dragonfly*)\n\t\tAC_DEFINE([TARGET_DRAGONFLY], [1], [Are we running on DragonFlyBSD?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"D\"], [Target prefix])\n\t\t;;\n\t*-aix*)\n\t\tAC_DEFINE([TARGET_AIX], [1], [Are we running AIX?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"A\"], [Target prefix])\n\t\tROUTE=\"/usr/sbin/route\"\n\t\thave_tap_header=\"yes\"\n\t\tac_cv_header_net_if_h=\"no\"\t# exists, but breaks things\n\t\t;;\n\t*-*-haiku*)\n\t\tAC_DEFINE([TARGET_HAIKU], [1], [Are we running Haiku?])\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"H\"], [Target prefix])\n\t\tLIBS=\"${LIBS} -lnetwork\"\n\t\t;;\n\t*)\n\t\tAC_DEFINE_UNQUOTED([TARGET_PREFIX], [\"X\"], [Target prefix])\n\t\thave_tap_header=\"yes\"\n\t\t;;\nesac\n\nAM_CONDITIONAL([CROSS_COMPILING], test \"${cross_compiling}\" = \"yes\")\n\nPKG_PROG_PKG_CONFIG\n# Add variable to print if pkg-config is found or not. Users often miss that\nif test \"${PKG_CONFIG}\" = \"\"; then\n\tif test \"${pkg_config_required}\" = \"yes\"; then\n\t\tAC_MSG_ERROR([pkg-config is required])\n\tfi\n\tpkg_config_found=\"(not found)\"\nelse\n\tpkg_config_found=\"(${PKG_CONFIG})\"\nfi\n\nAC_PROG_CC\nAC_PROG_CPP\nAC_PROG_INSTALL\nAC_PROG_LN_S\nAC_PROG_SED\nAC_PROG_MAKE_SET\n\nAC_ARG_VAR([IFCONFIG], [full path to ipconfig utility])\nAC_ARG_VAR([ROUTE], [full path to route utility])\nAC_ARG_VAR([IPROUTE], [full path to ip utility])\nAC_ARG_VAR([NETSTAT], [path to netstat utility]) # tests\nAC_ARG_VAR([GIT], [path to git utility])\nAC_ARG_VAR([SYSTEMD_ASK_PASSWORD], [path to systemd-ask-password utility])\nAC_ARG_VAR([SYSTEMD_UNIT_DIR], [Path of systemd unit directory @<:@default=LIBDIR/systemd/system@:>@])\nAC_ARG_VAR([TMPFILES_DIR], [Path of tmpfiles directory @<:@default=LIBDIR/tmpfiles.d@:>@])\nAC_PATH_PROGS([IFCONFIG], [ifconfig],, [$PATH:/usr/local/sbin:/usr/sbin:/sbin])\nAC_PATH_PROGS([ROUTE], [route],, [$PATH:/usr/local/sbin:/usr/sbin:/sbin])\nAC_PATH_PROGS([IPROUTE], [ip],, [$PATH:/usr/local/sbin:/usr/sbin:/sbin])\nAC_PATH_PROGS([SYSTEMD_ASK_PASSWORD], [systemd-ask-password],, [$PATH:/usr/local/bin:/usr/bin:/bin])\nAC_CHECK_PROGS([NETSTAT], [netstat], [netstat], [$PATH:/usr/local/sbin:/usr/sbin:/sbin:/etc]) # tests\nAC_CHECK_PROGS([GIT], [git]) # optional\nAC_DEFINE_UNQUOTED([IFCONFIG_PATH], [\"$IFCONFIG\"], [Path to ifconfig tool])\nAC_DEFINE_UNQUOTED([IPROUTE_PATH], [\"$IPROUTE\"], [Path to iproute tool])\nAC_DEFINE_UNQUOTED([ROUTE_PATH], [\"$ROUTE\"], [Path to route tool])\nAC_DEFINE_UNQUOTED([SYSTEMD_ASK_PASSWORD_PATH], [\"$SYSTEMD_ASK_PASSWORD\"], [Path to systemd-ask-password tool])\n\n#\n#  man page generation - based on python-docutils\n#\nAC_ARG_VAR([RST2MAN], [path to rst2man utility])\nAC_ARG_VAR([RST2HTML], [path to rst2html utility])\nAC_CHECK_PROGS([RST2MAN], [rst2man rst2man.py])\nAC_CHECK_PROGS([RST2HTML], [rst2html rst2html.py])\nAM_CONDITIONAL([HAVE_PYDOCUTILS], [test \"${RST2MAN}\" -a \"${RST2HTML}\"])\n\n# Set -std=c11 unless user already specified a -std=\ncase \"${CFLAGS}\" in\n  *-std=*) ;;\n  *)       CFLAGS=\"${CFLAGS} -std=c11\" ;;\nesac\n\n#\n# Libtool\n#\nifdef(\n\t[LT_INIT],\n\t[\n\t\tLT_INIT([win32-dll])\n\t\tLT_LANG([Windows Resource])\n\t],\n\t[\n\t\tAC_LIBTOOL_WIN32_DLL\n\t\tAC_LIBTOOL_RC\n\t\tAC_PROG_LIBTOOL\n\t]\n)\n\nAC_C_INLINE\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_UID_T\nAX_TYPE_SOCKLEN_T\nAC_CHECK_SIZEOF([unsigned int])\nAC_CHECK_SIZEOF([unsigned long])\nAC_CHECK_HEADERS([ \\\n\tfcntl.h io.h \\\n\tsys/types.h sys/socket.h \\\n\tunistd.h dlfcn.h \\\n\tnetinet/in.h \\\n\tnetinet/tcp.h arpa/inet.h netdb.h \\\n])\nAC_CHECK_HEADERS([ \\\n\tsys/time.h sys/ioctl.h sys/stat.h \\\n\tsys/mman.h sys/file.h sys/wait.h \\\n\tunistd.h libgen.h stropts.h \\\n\tsyslog.h pwd.h grp.h termios.h \\\n\tsys/sockio.h sys/uio.h linux/sockios.h \\\n\tlinux/types.h linux/errqueue.h poll.h sys/epoll.h err.h \\\n])\n\nSOCKET_INCLUDES=\"\n#include <stdlib.h>\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n#ifdef HAVE_NET_IF_H\n#include <net/if.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#include <netinet/in.h>\n#endif\n#ifdef _WIN32\n#include <windows.h>\n#endif\n#ifdef _WIN32\n#include <winsock2.h>\n#endif\n#ifdef _WIN32\n#include <ws2tcpip.h>\n#endif\n#ifdef HAVE_NETINET_IP_H\n#include <netinet/ip.h>\n#endif\n\"\n\nAC_CHECK_HEADERS(\n\t[net/if.h netinet/ip.h resolv.h sys/un.h sys/kern_control.h],\n\t,\n\t,\n\t[[${SOCKET_INCLUDES}]]\n)\n\nAC_CHECK_TYPES(\n\t[in_addr_t],\n\t,\n\t[AC_DEFINE([in_addr_t], [uint32_t], [Workaround missing in_addr_t])],\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_TYPES(\n\t[in_port_t],\n\t,\n\t[AC_DEFINE([in_port_t], [uint16_t], [Workaround missing in_port_t])],\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_TYPE(\n\t[struct iphdr],\n\t[AC_DEFINE([HAVE_IPHDR], [1], [struct iphdr needed for IPv6 support])],\n\t,\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_TYPE(\n\t[struct msghdr],\n\t[AC_DEFINE([HAVE_MSGHDR], [1], [struct msghdr needed for extended socket error support])],\n\t,\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_TYPE(\n\t[struct cmsghdr],\n\t[AC_DEFINE([HAVE_CMSGHDR], [1], [struct cmsghdr needed for extended socket error support])],\n\t,\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_TYPE(\n\t[struct in_pktinfo],\n\t[AC_DEFINE([HAVE_IN_PKTINFO], [1], [struct in_pktinfo needed for IP_PKTINFO support])],\n\t,\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_TYPE(\n        [sa_family_t],\n        [AC_DEFINE([HAVE_SA_FAMILY_T], [1], [sa_family_t, needed to hold AF_* info])],\n        ,\n        [[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_MEMBER(\n\t[struct in_pktinfo.ipi_spec_dst],\n\t[AC_DEFINE([HAVE_IPI_SPEC_DST], [1], [struct in_pktinfo.ipi_spec_dst needed for IP_PKTINFO support])],\n\t,\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_TYPE(\n\t[struct sockaddr_in6],\n\t,\n\t[AC_MSG_ERROR([struct sockaddr_in6 not found, needed for ipv6 transport support.])],\n\t[[${SOCKET_INCLUDES}]]\n)\nAC_CHECK_DECLS(\n\t[SO_MARK],\n\t,\n\t,\n\t[[${SOCKET_INCLUDES}]]\n)\n\nsaved_LDFLAGS=\"$LDFLAGS\"\nLDFLAGS=\"$LDFLAGS -Wl,--wrap=exit\"\nAC_MSG_CHECKING([linker supports --wrap])\nAC_LINK_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[\n\t\t\tvoid exit(int);\n\t\t\tvoid __real_exit(int);\n\t\t\tvoid __wrap_exit(int i) {\n\t\t\t\t__real_exit(i);\n\t\t\t}\n\t\t]],\n\t\t[[\n\t\t\texit(0);\n\t\t]]\n\t)],\n\t[\n\t\tAC_MSG_RESULT([yes])\n\t\thave_ld_wrap_support=yes\n\t],\n\t[AC_MSG_RESULT([no])],\n)\nLDFLAGS=\"$saved_LDFLAGS\"\n\ndnl We emulate signals in Windows\nAC_CHECK_DECLS(\n\t[SIGHUP],\n\t,\n\t[AC_DEFINE([SIGHUP], [1], [SIGHUP replacement])],\n\t[[\n\t\t#include <signal.h>\n\t]]\n)\nAC_CHECK_DECLS(\n\t[SIGINT],\n\t,\n\t[AC_DEFINE([SIGINT], [2], [SIGINT replacement])],\n\t[[\n\t\t#include <signal.h>\n\t]]\n)\nAC_CHECK_DECLS(\n\t[SIGUSR1],\n\t,\n\t[AC_DEFINE([SIGUSR1], [10], [SIGUSR1 replacement])],\n\t[[\n\t\t#include <signal.h>\n\t]]\n)\nAC_CHECK_DECLS(\n\t[SIGUSR2],\n\t,\n\t[AC_DEFINE([SIGUSR2], [12], [SIGUSR2 replacement])],\n\t[[\n\t\t#include <signal.h>\n\t]]\n)\nAC_CHECK_DECLS(\n\t[SIGTERM],\n\t,\n\t[AC_DEFINE([SIGTERM], [15], [SIGTERM replacement])],\n\t[[\n\t\t#include <signal.h>\n\t]]\n)\n\nAC_FUNC_FORK\n\nAC_CHECK_FUNCS([ \\\n\tdaemon chroot getpwnam setuid nice system dup dup2 \\\n\tsyslog openlog mlockall getrlimit getgrnam setgid \\\n\tsetgroups flock time gettimeofday \\\n\tsetsid chdir \\\n\tchsize ftruncate execve getpeereid basename dirname access \\\n\tepoll_create strsep \\\n])\n\nAC_CHECK_LIB(\n\t[dl],\n\t[dlopen],\n\t[DL_LIBS=\"-ldl\"]\n)\nAC_SUBST([DL_LIBS])\n\nAC_CHECK_LIB(\n\t[nsl],\n\t[inet_ntoa],\n\t[SOCKETS_LIBS=\"${SOCKETS_LIBS} -lnsl\"]\n)\nAC_CHECK_LIB(\n\t[socket],\n\t[socket],\n\t[SOCKETS_LIBS=\"${SOCKETS_LIBS} -lsocket\"]\n)\nAC_CHECK_LIB(\n\t[resolv],\n\t[gethostbyname],\n\t[SOCKETS_LIBS=\"${SOCKETS_LIBS} -lresolv\"]\n)\nAC_SUBST([SOCKETS_LIBS])\n\nold_LIBS=\"${LIBS}\"\nLIBS=\"${LIBS} ${SOCKETS_LIBS}\"\nAC_CHECK_FUNCS([sendmsg recvmsg])\n\nLIBS=\"${old_LIBS}\"\n\n# we assume res_init() always exist, but need to find out *where*...\nAC_SEARCH_LIBS(__res_init, resolv bind, ,\n    AC_SEARCH_LIBS(res_9_init, resolv bind, ,\n\tAC_SEARCH_LIBS(res_init, resolv bind, , )))\n\nAC_ARG_VAR([TAP_CFLAGS], [C compiler flags for tap])\nold_CFLAGS=\"${CFLAGS}\"\nCFLAGS=\"${CFLAGS} ${TAP_CFLAGS}\"\nAC_CHECK_HEADERS(\n\t[ \\\n\t\tnet/if_tun.h net/tun/if_tun.h \\\n\t\tlinux/if_tun.h \\\n\t\ttap-windows.h \\\n\t],\n\t[have_tap_header=\"yes\"]\n)\nAC_CHECK_DECLS(\n\t[TUNSETPERSIST],\n\t[AC_DEFINE([ENABLE_FEATURE_TUN_PERSIST], [1], [We have persist tun capability])],\n\t,\n\t[[\n\t\t#ifdef HAVE_LINUX_IF_TUN_H\n\t\t#include <linux/if_tun.h>\n\t\t#endif\n\t]]\n)\nCFLAGS=\"${old_CFLAGS}\"\ntest \"${have_tap_header}\" = \"yes\" || AC_MSG_ERROR([no tap header could be found])\n\nAC_CHECK_LIB(\n\t[selinux],\n\t[setcon],\n\t[SELINUX_LIBS=\"-lselinux\"]\n)\nAC_SUBST([SELINUX_LIBS])\n\nAC_ARG_VAR([LIBPAM_CFLAGS], [C compiler flags for libpam])\nAC_ARG_VAR([LIBPAM_LIBS], [linker flags for libpam])\nif test -z \"${LIBPAM_LIBS}\"; then\n\tAC_CHECK_LIB(\n\t\t[pam],\n\t\t[pam_start],\n\t\t[LIBPAM_LIBS=\"-lpam\"]\n\t)\nfi\n\ncase \"${with_mem_check}\" in\n\tvalgrind)\n\t\tAC_CHECK_HEADERS(\n\t\t\t[valgrind/memcheck.h],\n\t\t\t[\n\t\t\t\tCFLAGS=\"${CFLAGS} -g -fno-inline\"\n\t\t\t\tAC_DEFINE(\n\t\t\t\t\t[USE_VALGRIND],\n\t\t\t\t\t[1],\n\t\t\t\t\t[Use valgrind memory debugging library]\n\t\t\t\t)\n\t\t\t],\n\t\t\t[AC_MSG_ERROR([valgrind headers not found.])]\n\t\t)\n\t\t;;\n\tdmalloc)\n\t\tAC_CHECK_HEADERS(\n\t\t\t[dmalloc.h],\n\t\t\t[AC_CHECK_LIB(\n\t\t\t\t[dmalloc],\n\t\t\t\t[malloc],\n\t\t\t\t[\n\t\t\t\t\tLIBS=\"${LIBS} -ldmalloc\"\n\t\t\t\t\tAC_DEFINE(\n\t\t\t\t\t\t[DMALLOC],\n\t\t\t\t\t\t[1],\n\t\t\t\t\t\t[Use dmalloc memory debugging library]\n\t\t\t\t\t)\n\t\t\t\t],\n\t\t\t\t[AC_MSG_ERROR([dmalloc library not found.])]\n\t\t\t)],\n\t\t\t[AC_MSG_ERROR([dmalloc headers not found.])]\n\t\t)\n\t\t;;\n\tssl)\n\t\tAC_CHECK_LIB(\n\t\t\t[ssl],\n\t\t\t[CRYPTO_mem_ctrl],\n\t\t\t[\n\t\t\t\tAC_DEFINE(\n\t\t\t\t\t[CRYPTO_MDEBUG],\n\t\t\t\t\t[1],\n\t\t\t\t\t[Use memory debugging function in OpenSSL]\n\t\t\t\t)\n\t\t\t\tAC_MSG_NOTICE([NOTE: OpenSSL library must be compiled with CRYPTO_MDEBUG])\n\t\t\t],\n\t\t\t[AC_MSG_ERROR([Memory Debugging function in OpenSSL library not found.])]\n\t\t)\n\t\t;;\nesac\n\nPKG_CHECK_MODULES(\n\t[PKCS11_HELPER],\n\t[libpkcs11-helper-1 >= 1.11],\n\t[have_pkcs11_helper=\"yes\"],\n\t[]\n)\n\n\nif test \"$enable_dco\" != \"no\"; then\n\tenable_dco_arg=\"$enable_dco\"\n\tif test \"${enable_iproute2}\" = \"yes\"; then\n\t\tAC_MSG_WARN([DCO cannot be enabled when using iproute2])\n\t\tenable_dco=\"no\"\n\tfi\n\tcase \"$host\" in\n\t\t*-*-linux*)\n\t\t\tif test \"$enable_dco\" = \"no\"; then\n\t\t\t\tif test \"$enable_dco_arg\" = \"auto\"; then\n\t\t\t\t\tAC_MSG_WARN([DCO support disabled])\n\t\t\t\telse\n\t\t\t\t\tAC_MSG_ERROR([DCO support can't be enabled])\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tdnl\n\t\t\t\tdnl Include generic netlink library used to talk to ovpn-dco\n\t\t\t\tdnl\n\t\t\t\tPKG_CHECK_MODULES([LIBNL_GENL],\n\t\t\t\t\t  [libnl-genl-3.0 >= 3.4.0],\n\t\t\t\t\t  [have_libnl=\"yes\"],\n\t\t\t\t\t  [\n\t\t\t\t\t   AC_MSG_ERROR([libnl-genl-3.0 package not found or too old. Is the development package and pkg-config ${pkg_config_found} installed? Must be version 3.4.0 or newer for DCO])\n\t\t\t\t\t  ]\n\t\t\t\t)\n\t\t\t\tOPTIONAL_LIBNL_GENL_CFLAGS=\"${LIBNL_GENL_CFLAGS}\"\n\t\t\t\tOPTIONAL_LIBNL_GENL_LIBS=\"${LIBNL_GENL_LIBS}\"\n\n\t\t\t\tAC_DEFINE(ENABLE_DCO, 1, [Enable shared data channel offload])\n\t\t\t\tAC_MSG_NOTICE([Enabled ovpn-dco support for Linux])\n\t\t\tfi\n\t\t\t;;\n\t\t*-*-freebsd*)\n\t\t\tAC_CHECK_HEADERS([net/if_ovpn.h],\n\t\t\t\t[\n\t\t\t\t LIBS=\"${LIBS} -lnv\"\n\t\t\t\t AC_DEFINE(ENABLE_DCO, 1, [Enable data channel offload for FreeBSD])\n\t\t\t\t AC_MSG_NOTICE([Enabled ovpn-dco support for FreeBSD])\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t enable_dco=\"no\"\n\t\t\t\t AC_MSG_WARN([DCO header not found.])\n\t\t\t\t]\n\t\t\t)\n\t\t\tif test \"$enable_dco\" = \"no\"; then\n\t\t\t\tif test \"$enable_dco_arg\" = \"auto\"; then\n\t\t\t\t\tAC_MSG_WARN([DCO support disabled])\n\t\t\t\telse\n\t\t\t\t\tAC_MSG_ERROR([DCO support can't be enabled])\n\t\t\t\tfi\n\t\t\tfi\n\t\t\t;;\n\t\t*-mingw*)\n\t\t\tAC_MSG_NOTICE([NOTE: --enable-dco ignored on Windows because it's always enabled])\n\t\t\t;;\n\t\t*)\n\t\t\tAC_MSG_NOTICE([Ignoring --enable-dco on non supported platform])\n\t\t\t;;\n\tesac\nfi\n\ndnl\ndnl Depend on libcap-ng on Linux\ndnl\ncase \"$host\" in\n\t*-*-linux*)\n\t\tPKG_CHECK_MODULES([LIBCAPNG],\n\t\t\t\t  [libcap-ng],\n\t\t\t\t  [],\n\t\t\t\t  [AC_MSG_ERROR([libcap-ng package not found. Is the development package and pkg-config ${pkg_config_found} installed?])]\n\t\t)\n\t\tAC_CHECK_HEADER([sys/prctl.h],,[AC_MSG_ERROR([sys/prctl.h not found!])])\n\n\t\tOPTIONAL_LIBCAPNG_CFLAGS=\"${LIBCAPNG_CFLAGS}\"\n\t\tOPTIONAL_LIBCAPNG_LIBS=\"${LIBCAPNG_LIBS}\"\n\t\tAC_DEFINE(HAVE_LIBCAPNG, 1, [Enable libcap-ng support])\n\t;;\nesac\n\n\nif test \"${with_crypto_library}\" = \"openssl\"; then\n\tAC_ARG_VAR([OPENSSL_CFLAGS], [C compiler flags for OpenSSL])\n\tAC_ARG_VAR([OPENSSL_LIBS], [linker flags for OpenSSL])\n\n\tif test -z \"${OPENSSL_CFLAGS}\" -a -z \"${OPENSSL_LIBS}\"; then\n\t\t# if the user did not explicitly specify flags, try to autodetect\n\t\tPKG_CHECK_MODULES(\n\t\t\t[OPENSSL],\n\t\t\t[openssl >= 1.1.0],\n\t\t\t[have_openssl=\"yes\"],\n\t\t\t[AC_MSG_WARN([OpenSSL not found by pkg-config ${pkg_config_found}])] # If this fails, we will do another test next\n\t\t)\n\t\tOPENSSL_LIBS=${OPENSSL_LIBS:--lssl -lcrypto}\n\tfi\n\n\tsaved_CFLAGS=\"${CFLAGS}\"\n\tsaved_LIBS=\"${LIBS}\"\n\tCFLAGS=\"${CFLAGS} ${OPENSSL_CFLAGS}\"\n\tLIBS=\"${LIBS} ${OPENSSL_LIBS}\"\n\n\t# If pkgconfig check failed or OPENSSL_CFLAGS/OPENSSL_LIBS env vars\n\t# are used, check the version directly in the OpenSSL include file\n\tif test \"${have_openssl}\" != \"yes\"; then\n\t\tAC_MSG_CHECKING([additionally if OpenSSL is available and version >= 1.1.0])\n\t\tAC_COMPILE_IFELSE(\n\t\t\t[AC_LANG_PROGRAM(\n\t\t\t\t[[\n#include <openssl/opensslv.h>\n\t\t\t\t]],\n\t\t\t\t[[\n/*\t     Version encoding: MNNFFPPS - see opensslv.h for details */\n#if OPENSSL_VERSION_NUMBER < 0x10100000L\n#error OpenSSL too old\n#endif\n\t\t\t\t]]\n\t\t\t)],\n\t\t\t[AC_MSG_RESULT([ok])],\n\t\t\t[AC_MSG_ERROR([OpenSSL version too old])]\n\t\t)\n\tfi\n\n\tAC_CHECK_FUNCS([SSL_CTX_new],\n\t\t\t\t   ,\n\t\t\t\t   [AC_MSG_ERROR([openssl check failed])]\n\t)\n\n\tif test \"${with_openssl_engine}\" = \"auto\"; then\n\t    AC_COMPILE_IFELSE(\n\t\t\t\t    [AC_LANG_PROGRAM(\n\t\t\t\t\t    [[\n\t    #include <openssl/opensslv.h>\n\t    #include <openssl/opensslconf.h>\n\t\t\t\t\t    ]],\n\t\t\t\t\t    [[\n\t    /*\t     Version encoding: MNNFFPPS - see opensslv.h for details */\n\t    #if OPENSSL_VERSION_NUMBER >= 0x30000000L\n\t    #error Engine support disabled by default in OpenSSL 3.0+\n\t    #endif\n\n\t    /*\t     BoringSSL and LibreSSL >= 3.8.1 removed engine support */\n\t    #ifdef OPENSSL_NO_ENGINE\n\t    #error Engine support disabled in openssl/opensslconf.h\n\t    #endif\n\t\t\t\t\t    ]]\n\t\t\t\t    )],\n\t\t\t\t    [have_openssl_engine=\"yes\"],\n\t\t\t\t    [have_openssl_engine=\"no\"]\n\t    )\n\t    if test \"${have_openssl_engine}\" = \"yes\"; then\n\t\tAC_CHECK_FUNCS(\n\t\t    [ \\\n\t\t\tENGINE_load_builtin_engines \\\n\t\t\tENGINE_register_all_complete \\\n\t\t    ],\n\t\t    ,\n\t\t    [have_openssl_engine=\"no\"; break]\n\t\t)\n\t    fi\n\telse\n\t    have_openssl_engine=\"${with_openssl_engine}\"\n\t    if test \"${have_openssl_engine}\" = \"yes\"; then\n\t\tAC_CHECK_FUNCS(\n\t\t    [ \\\n\t\t\tENGINE_load_builtin_engines \\\n\t\t\tENGINE_register_all_complete \\\n\t\t    ],\n\t\t    ,\n\t\t    [AC_MSG_ERROR([OpenSSL engine support not found])]\n\t\t)\n\t    fi\n\tfi\n\tif test \"${have_openssl_engine}\" = \"yes\"; then\n\t\tAC_DEFINE([HAVE_OPENSSL_ENGINE], [1], [OpenSSL engine support available])\n\tfi\n\n\tAC_CHECK_FUNC(\n\t\t[EVP_aes_256_gcm],\n\t\t,\n\t\t[AC_MSG_ERROR([OpenSSL check for AES-256-GCM support failed])]\n\t)\n\n\t# All supported OpenSSL versions (>= 1.1.0)\n\t# have this feature\n\thave_export_keying_material=\"yes\"\n\n\tCFLAGS=\"${saved_CFLAGS}\"\n\tLIBS=\"${saved_LIBS}\"\n\n\tAC_DEFINE([ENABLE_CRYPTO_OPENSSL], [1], [Use OpenSSL library])\n\tCRYPTO_CFLAGS=\"${OPENSSL_CFLAGS}\"\n\tCRYPTO_LIBS=\"${OPENSSL_LIBS}\"\nelif test \"${with_crypto_library}\" = \"mbedtls\"; then\n\tAC_ARG_VAR([MBEDTLS_CFLAGS], [C compiler flags for mbedtls])\n\tAC_ARG_VAR([MBEDTLS_LIBS], [linker flags for mbedtls])\n\n\tsaved_CFLAGS=\"${CFLAGS}\"\n\tsaved_LIBS=\"${LIBS}\"\n\n\tif test -z \"${MBEDTLS_CFLAGS}\" -a -z \"${MBEDTLS_LIBS}\"; then\n\t\t# if the user did not explicitly specify flags, try to autodetect\n\t\tPKG_CHECK_MODULES([MBEDTLS],\n\t\t\t[mbedtls >= 2.0.0 mbedx509 >= 2.0.0 mbedcrypto >= 2.0.0],\n\t\t\t[have_mbedtls=\"yes\"],\n\t\t\t[LIBS=\"${LIBS} -lmbedtls -lmbedx509 -lmbedcrypto\"]\n\t\t)\n\t\t# mbedtls might not have pkgconfig integration, so try manually\n                if test \"${have_mbedtls}\" != \"yes\"; then\n\t\t\tAC_CHECK_LIB(\n\t\t\t\t[mbedtls],\n\t\t\t\t[mbedtls_ssl_init],\n\t\t\t\t[MBEDTLS_LIBS=\"-lmbedtls -lmbedx509 -lmbedcrypto\"],\n\t\t\t\t[AC_MSG_ERROR([Could not find mbed TLS.])],\n\t\t\t\t[${PKCS11_HELPER_LIBS}]\n\t\t\t)\n\t\tfi\n\tfi\n\n\tCFLAGS=\"${MBEDTLS_CFLAGS} ${PKCS11_HELPER_CFLAGS} ${CFLAGS}\"\n\tLIBS=\"${MBEDTLS_LIBS} ${PKCS11_HELPER_LIBS} ${LIBS}\"\n\n\tAC_MSG_CHECKING([mbedtls version])\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[\n#include <mbedtls/version.h>\n\t\t\t]],\n\t\t\t[[\n#if MBEDTLS_VERSION_NUMBER < 0x02000000 || (MBEDTLS_VERSION_NUMBER >= 0x03000000 && MBEDTLS_VERSION_NUMBER < 0x03020100)\n#error invalid version\n#endif\n\t\t\t]]\n\t\t)],\n\t\t[AC_MSG_RESULT([ok])],\n\t\t[AC_MSG_ERROR([mbed TLS version >= 2.0.0 or >= 3.2.1 required])]\n\t)\n\n\tAC_CHECK_HEADER(\n\t\tpsa/crypto.h,\n\t\t[AC_DEFINE([HAVE_MBEDTLS_PSA_CRYPTO_H], [1], [yes])],\n\t\t[AC_DEFINE([HAVE_MBEDTLS_PSA_CRYPTO_H], [0], [no])]\n\t)\n\n\tAC_CHECK_FUNCS(\n\t\t[ \\\n\t\t\tmbedtls_cipher_write_tag \\\n\t\t\tmbedtls_cipher_check_tag \\\n\t\t],\n\t\t,\n\t\t[AC_MSG_ERROR([mbed TLS check for AEAD support failed])]\n\t)\n\n\tAC_CHECK_FUNC(\n\t\t[mbedtls_ssl_tls_prf],\n\t\t[AC_DEFINE([HAVE_MBEDTLS_SSL_TLS_PRF], [1], [yes])],\n\t\t[AC_DEFINE([HAVE_MBEDTLS_SSL_TLS_PRF], [0], [no])]\n\t)\n\n\thave_export_keying_material=\"yes\"\n\tAC_CHECK_FUNC(\n\t\t[mbedtls_ssl_conf_export_keys_ext_cb],\n\t\t[AC_DEFINE([HAVE_MBEDTLS_SSL_CONF_EXPORT_KEYS_EXT_CB], [1], [yes])],\n\t\t[AC_DEFINE([HAVE_MBEDTLS_SSL_CONF_EXPORT_KEYS_EXT_CB], [0], [no])]\n\t)\n\tif test \"x$ac_cv_func_mbedtls_ssl_conf_export_keys_ext_cb\" != xyes; then\n\t\tAC_CHECK_FUNC(\n\t\t\t[mbedtls_ssl_set_export_keys_cb],\n\t\t\t[AC_DEFINE([HAVE_MBEDTLS_SSL_SET_EXPORT_KEYS_CB], [1], [yes])],\n\t\t\t[AC_DEFINE([HAVE_MBEDTLS_SSL_SET_EXPORT_KEYS_CB], [0], [no])]\n\t\t)\n\t\tif test \"x$ac_cv_func_mbedtls_ssl_set_export_keys_cb\" != xyes; then\n\t\t\thave_export_keying_material=\"no\"\n\t\tfi\n\tfi\n\n\tAC_CHECK_FUNC(\n\t\t[mbedtls_ctr_drbg_update_ret],\n\t\tAC_DEFINE([HAVE_MBEDTLS_CTR_DRBG_UPDATE_RET], [1],\n\t\t\t  [Use mbedtls_ctr_drbg_update_ret from mbed TLS]),\n\t)\n\n\tCFLAGS=\"${saved_CFLAGS}\"\n\tLIBS=\"${saved_LIBS}\"\n\tAC_DEFINE([ENABLE_CRYPTO_MBEDTLS], [1], [Use mbed TLS library])\n\tCRYPTO_CFLAGS=\"${MBEDTLS_CFLAGS}\"\n\tCRYPTO_LIBS=\"${MBEDTLS_LIBS}\"\n\nelif test \"${with_crypto_library}\" = \"wolfssl\"; then\n\tAC_ARG_VAR([WOLFSSL_CFLAGS], [C compiler flags for wolfssl. The include directory should\n contain the regular wolfSSL header files but also the wolfSSL OpenSSL header files.\n Ex: -I/usr/local/include -I/usr/local/include/wolfssl])\n\tAC_ARG_VAR([WOLFSSL_LIBS], [linker flags for wolfssl])\n\n\tsaved_CFLAGS=\"${CFLAGS}\"\n\tsaved_LIBS=\"${LIBS}\"\n\n\tif test -z \"${WOLFSSL_CFLAGS}\" -a -z \"${WOLFSSL_LIBS}\"; then\n\t\t# if the user did not explicitly specify flags, try to autodetect\n\t\tPKG_CHECK_MODULES(\n\t\t\t[WOLFSSL],\n\t\t\t[wolfssl],\n\t\t\t[],\n\t\t\t[AC_MSG_ERROR([Could not find wolfSSL using pkg-config ${pkg_config_found}])]\n\t\t)\n\t\tPKG_CHECK_VAR(\n\t\t\t[WOLFSSL_INCLUDEDIR],\n\t\t\t[wolfssl],\n\t\t\t[includedir],\n\t\t\t[],\n\t\t\t[AC_MSG_ERROR([Could not find wolfSSL includedir variable.])]\n\t\t)\n\t\tWOLFSSL_CFLAGS=\"${WOLFSSL_CFLAGS} -I${WOLFSSL_INCLUDEDIR}/wolfssl\"\n\tfi\n\tsaved_CFLAGS=\"${CFLAGS}\"\n\tsaved_LIBS=\"${LIBS}\"\n\tCFLAGS=\"${CFLAGS} ${WOLFSSL_CFLAGS}\"\n\tLIBS=\"${LIBS} ${WOLFSSL_LIBS}\"\n\n\tAC_CHECK_LIB(\n\t\t[wolfssl],\n\t\t[wolfSSL_Init],\n\t\t[],\n\t\t[AC_MSG_ERROR([Could not link wolfSSL library.])]\n\t)\n\tAC_CHECK_HEADER([wolfssl/options.h],,[AC_MSG_ERROR([wolfSSL header wolfssl/options.h not found!])])\n\n\t# wolfSSL signal EKM support\n\thave_export_keying_material=\"yes\"\n\n\tif test \"${enable_wolfssl_options_h}\" = \"yes\"; then\n\t\tAC_DEFINE([EXTERNAL_OPTS_OPENVPN], [1], [Include options.h from wolfSSL library])\n\telse\n\t\tAC_DEFINE([WOLFSSL_USER_SETTINGS], [1], [Use custom user_settings.h file for wolfSSL library])\n\tfi\n\n\thave_export_keying_material=\"yes\"\n\n\tCFLAGS=\"${saved_CFLAGS}\"\n\tLIBS=\"${saved_LIBS}\"\n\n\tAC_DEFINE([ENABLE_CRYPTO_WOLFSSL], [1], [Use wolfSSL crypto library])\n\tAC_DEFINE([ENABLE_CRYPTO_OPENSSL], [1], [Use wolfSSL openssl compatibility layer])\n\tCRYPTO_CFLAGS=\"${WOLFSSL_CFLAGS}\"\n\tCRYPTO_LIBS=\"${WOLFSSL_LIBS}\"\nelse\n\tAC_MSG_ERROR([Invalid crypto library: ${with_crypto_library}])\nfi\n\nAC_ARG_VAR([LZO_CFLAGS], [C compiler flags for lzo])\nAC_ARG_VAR([LZO_LIBS], [linker flags for lzo])\nif test -z \"${LZO_CFLAGS}\" -a -z \"${LZO_LIBS}\"; then\n    # if the user did not explicitly specify flags, try to autodetect\n    PKG_CHECK_MODULES([LZO],\n\t\t[lzo2],\n\t\t[have_lzo=\"yes\"],\n\t\t[]\n    )\n\n    if test \"${have_lzo}\" != \"yes\"; then\n\t# try to detect without pkg-config\n\thave_lzo=\"yes\"\n\tAC_CHECK_LIB(\n\t\t[lzo2],\n\t\t[lzo1x_1_15_compress],\n\t\t[LZO_LIBS=\"-llzo2\"],\n\t\t[AC_CHECK_LIB(\n\t\t\t[lzo],\n\t\t\t[lzo1x_1_15_compress],\n\t\t\t[LZO_LIBS=\"-llzo\"],\n\t\t\t[have_lzo=\"no\"]\n\t\t)]\n\t)\n    fi\nelse\n    # assume the user configured it correctly\n    have_lzo=\"yes\"\nfi\nif test \"${have_lzo}\" = \"yes\"; then\n\tsaved_CFLAGS=\"${CFLAGS}\"\n\tCFLAGS=\"${CFLAGS} ${LZO_CFLAGS}\"\n\tAC_CHECK_HEADERS(\n\t\t[lzo/lzo1x.h],\n\t\t,\n\t\t[AC_CHECK_HEADERS(\n\t\t\t[lzo1x.h],\n\t\t\t,\n\t\t\t[AC_MSG_ERROR([lzo1x.h is missing])],\n                        [#include <limits.h>\n                         #include <lzodefs.h>\n                         #include <lzoconf.h>]\n\t\t)],\n\t)\n\tCFLAGS=\"${saved_CFLAGS}\"\nfi\n\ndnl\ndnl check for LZ4 library\ndnl\n\nAC_ARG_VAR([LZ4_CFLAGS], [C compiler flags for lz4])\nAC_ARG_VAR([LZ4_LIBS], [linker flags for lz4])\nif test \"$enable_lz4\" = \"yes\" && test \"$enable_comp_stub\" = \"no\"; then\n    if test -z \"${LZ4_CFLAGS}\" -a -z \"${LZ4_LIBS}\"; then\n\t# if the user did not explicitly specify flags, try to autodetect\n\tPKG_CHECK_MODULES([LZ4],\n\t\t\t  [liblz4 >= 1.7.1 liblz4 < 100],\n\t\t\t  [have_lz4=\"yes\"],\n\t\t\t  [LZ4_LIBS=\"-llz4\"] # If this fails, we will do another test next.\n\t\t\t\t\t     # We also add set LZ4_LIBS otherwise the\n\t\t\t\t\t     # linker will not know about the lz4 library\n\t)\n    fi\n\n    saved_CFLAGS=\"${CFLAGS}\"\n    saved_LIBS=\"${LIBS}\"\n    CFLAGS=\"${CFLAGS} ${LZ4_CFLAGS}\"\n    LIBS=\"${LIBS} ${LZ4_LIBS}\"\n\n    # If pkgconfig check failed or LZ4_CFLAGS/LZ4_LIBS env vars\n    # are used, check the version directly in the LZ4 include file\n    if test \"${have_lz4}\" != \"yes\"; then\n\tAC_CHECK_HEADERS([lz4.h],\n\t\t\t [have_lz4h=\"yes\"],\n\t\t\t [])\n\n\tif test \"${have_lz4h}\" = \"yes\" ; then\n\t    AC_MSG_CHECKING([additionally if system LZ4 version >= 1.7.1])\n\t    AC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM([[\n#include <lz4.h>\n\t\t\t\t ]],\n\t\t\t\t [[\n/* Version encoding: MMNNPP (Major miNor Patch) - see lz4.h for details */\n#if LZ4_VERSION_NUMBER < 10701L\n#error LZ4 is too old\n#endif\n\t\t\t\t ]]\n\t\t\t\t)],\n\t\t[\n\t\t    AC_MSG_RESULT([ok])\n\t\t    have_lz4=\"yes\"\n\t\t],\n\t\t[AC_MSG_ERROR([system LZ4 library is too old])]\n\t    )\n\tfi\n    fi\n\n    # Double check we have a few needed functions\n    if test \"${have_lz4}\" = \"yes\" ; then\n\tAC_CHECK_LIB([lz4],\n\t\t     [LZ4_compress_default],\n\t\t     [],\n\t\t     [have_lz4=\"no\"])\n\tAC_CHECK_LIB([lz4],\n\t\t     [LZ4_decompress_safe],\n\t\t     [],\n\t\t     [have_lz4=\"no\"])\n    fi\n\n    if test \"${have_lz4}\" != \"yes\" ; then\n\tAC_MSG_ERROR([No compatible LZ4 compression library found. Consider --disable-lz4])\n\tLZ4_LIBS=\"\"\n    fi\n    OPTIONAL_LZ4_CFLAGS=\"${LZ4_CFLAGS}\"\n    OPTIONAL_LZ4_LIBS=\"${LZ4_LIBS}\"\n    AC_DEFINE(ENABLE_LZ4, [1], [Enable LZ4 compression library])\n    CFLAGS=\"${saved_CFLAGS}\"\n    LIBS=\"${saved_LIBS}\"\nfi\n\n\ndnl\ndnl Check for systemd\ndnl\nAM_CONDITIONAL([ENABLE_SYSTEMD], [test \"${enable_systemd}\" = \"yes\"])\nif test \"$enable_systemd\" = \"yes\" ; then\n    PKG_CHECK_MODULES([libsystemd], [systemd libsystemd],\n                      [],\n                      [PKG_CHECK_MODULES([libsystemd], [libsystemd-daemon])]\n                      )\n\n    PKG_CHECK_EXISTS([libsystemd > 216],\n                     [AC_DEFINE([SYSTEMD_NEWER_THAN_216], [1],\n                           [systemd is newer than v216])]\n                    )\n\n    AC_CHECK_HEADERS(systemd/sd-daemon.h,\n       ,\n       [\n\t   AC_MSG_ERROR([systemd development headers not found.])\n       ])\n\n    saved_LIBS=\"${LIBS}\"\n    LIBS=\"${LIBS} ${libsystemd_LIBS}\"\n    AC_CHECK_FUNCS([sd_booted], [], [AC_MSG_ERROR([systemd library is missing sd_booted()])])\n    OPTIONAL_SYSTEMD_LIBS=\"${libsystemd_LIBS}\"\n    AC_DEFINE(ENABLE_SYSTEMD, 1, [Enable systemd integration])\n    LIBS=\"${saved_LIBS}\"\n\n    if test -n \"${SYSTEMD_UNIT_DIR}\"; then\n        systemdunitdir=\"${SYSTEMD_UNIT_DIR}\"\n    else\n        systemdunitdir=\"\\${libdir}/systemd/system\"\n    fi\n\n    if test -n \"${TMPFILES_DIR}\"; then\n        tmpfilesdir=\"${TMPFILES_DIR}\"\n    else\n        tmpfilesdir=\"\\${libdir}/tmpfiles.d\"\n    fi\nfi\n\n\nAC_MSG_CHECKING([git checkout])\nGIT_CHECKOUT=\"no\"\nif test -n \"${GIT}\"; then\n\tif ${GIT} -C \"$srcdir\" rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n\t\tAC_DEFINE([HAVE_CONFIG_VERSION_H], [1], [extra version available in config-version.h])\n\t\tGIT_CHECKOUT=\"yes\"\n\tfi\nfi\nAC_MSG_RESULT([${GIT_CHECKOUT}])\n\ndnl enable --x509-username-field feature if requested\nif test \"${enable_x509_alt_username}\" = \"yes\"; then\n\tif test \"${with_crypto_library}\" = \"mbedtls\" ; then\n\t\tAC_MSG_ERROR([mbed TLS does not support the --x509-username-field feature])\n\tfi\n\n\tAC_DEFINE([ENABLE_X509ALTUSERNAME], [1], [Enable --x509-username-field feature])\nfi\n\ntest \"${enable_management}\" = \"yes\" && AC_DEFINE([ENABLE_MANAGEMENT], [1], [Enable management server capability])\ntest \"${enable_debug}\" = \"yes\" && AC_DEFINE([ENABLE_DEBUG], [1], [Enable debugging support])\ntest \"${enable_small}\" = \"yes\" && AC_DEFINE([ENABLE_SMALL], [1], [Enable smaller executable size])\ntest \"${enable_fragment}\" = \"yes\" && AC_DEFINE([ENABLE_FRAGMENT], [1], [Enable internal fragmentation support])\ntest \"${enable_port_share}\" = \"yes\" && AC_DEFINE([ENABLE_PORT_SHARE], [1], [Enable TCP Server port sharing])\n\ntest \"${enable_ntlm}\" = \"yes\" && AC_DEFINE([ENABLE_NTLM], [1], [Enable NTLMv2 proxy support])\ntest \"${enable_crypto_ofb_cfb}\" = \"yes\" && AC_DEFINE([ENABLE_OFB_CFB_MODE], [1], [Enable OFB and CFB cipher modes])\nif test \"${have_export_keying_material}\" = \"yes\"; then\n\tAC_DEFINE(\n\t\t[HAVE_EXPORT_KEYING_MATERIAL], [1],\n\t\t[Crypto library supports keying material exporter]\n\t)\nfi\nOPTIONAL_CRYPTO_CFLAGS=\"${OPTIONAL_CRYPTO_CFLAGS} ${CRYPTO_CFLAGS}\"\nOPTIONAL_CRYPTO_LIBS=\"${OPTIONAL_CRYPTO_LIBS} ${CRYPTO_LIBS}\"\n\nif test \"${enable_plugins}\" = \"yes\"; then\n\tOPTIONAL_DL_LIBS=\"${DL_LIBS}\"\n\tAC_DEFINE([ENABLE_PLUGIN], [1], [Enable plug-in support])\nelse\n\tenable_plugin_auth_pam=\"no\"\n\tenable_plugin_down_root=\"no\"\nfi\n\nAM_CONDITIONAL([HAVE_SITNL], [false])\n\nif test \"${enable_iproute2}\" = \"yes\"; then\n\ttest \"${enable_dco}\" = \"yes\" && AC_MSG_ERROR([iproute2 support cannot be enabled when using DCO])\n\ttest -z \"${IPROUTE}\" && AC_MSG_ERROR([ip utility is required but missing])\n\tAC_DEFINE([ENABLE_IPROUTE], [1], [enable iproute2 support])\nelse if test \"${have_sitnl}\" = \"yes\"; then\n\tAC_DEFINE([ENABLE_SITNL], [1], [enable sitnl support])\n\tAM_CONDITIONAL([HAVE_SITNL], [true])\nelse if test \"${WIN32}\" != \"yes\" -a \"${have_sitnl}\" != \"yes\"; then\n\ttest -z \"${ROUTE}\" && AC_MSG_ERROR([route utility is required but missing])\n\ttest -z \"${IFCONFIG}\" && AC_MSG_ERROR([ifconfig utility is required but missing])\nfi\nfi\nfi\n\nif test \"${enable_selinux}\" = \"yes\"; then\n\ttest -z \"${SELINUX_LIBS}\" && AC_MSG_ERROR([libselinux required but missing])\n\tOPTIONAL_SELINUX_LIBS=\"${SELINUX_LIBS}\"\n\tAC_DEFINE([ENABLE_SELINUX], [1], [SELinux support])\nfi\n\nif test \"${enable_lzo}\" = \"yes\"; then\n\ttest \"${have_lzo}\" != \"yes\" && AC_MSG_ERROR([lzo enabled but missing])\n\tOPTIONAL_LZO_CFLAGS=\"${LZO_CFLAGS}\"\n\tOPTIONAL_LZO_LIBS=\"${LZO_LIBS}\"\n\tAC_DEFINE([ENABLE_LZO], [1], [Enable LZO compression library])\nfi\nif test \"${enable_comp_stub}\" = \"yes\"; then\n\ttest \"${enable_lzo}\" = \"yes\" && AC_MSG_ERROR([Cannot have both comp stub and lzo enabled (use --disable-lzo)])\n\ttest \"${enable_lz4}\" = \"yes\" && AC_MSG_ERROR([Cannot have both comp stub and LZ4 enabled (use --disable-lz4)])\n\tAC_DEFINE([ENABLE_COMP_STUB], [1], [Enable compression stub capability])\nfi\n\nAM_CONDITIONAL([HAVE_SOFTHSM2], [false])\nif test \"${enable_pkcs11}\" = \"yes\"; then\n\ttest \"${have_pkcs11_helper}\" != \"yes\" && AC_MSG_ERROR([PKCS11 enabled but libpkcs11-helper is missing])\n\tOPTIONAL_PKCS11_HELPER_CFLAGS=\"${PKCS11_HELPER_CFLAGS}\"\n\tOPTIONAL_PKCS11_HELPER_LIBS=\"${PKCS11_HELPER_LIBS}\"\n\tAC_DEFINE([ENABLE_PKCS11], [1], [Enable PKCS11])\n\tPKG_CHECK_MODULES(\n\t\t[P11KIT],\n\t\t[p11-kit-1],\n\t\t[proxy_module=\"`$PKG_CONFIG --variable=proxy_module p11-kit-1`\"\n\t\t AC_DEFINE_UNQUOTED([DEFAULT_PKCS11_MODULE], \"${proxy_module}\", [p11-kit proxy])],\n\t\t[]\n\t)\n\t#\n\t# softhsm2 for pkcs11 tests\n\t#\n\tAC_ARG_VAR([P11TOOL], [full path to p11tool])\n\tAC_PATH_PROGS([P11TOOL], [p11tool],, [$PATH:/usr/local/bin:/usr/bin:/bin])\n\tAC_DEFINE_UNQUOTED([P11TOOL_PATH], [\"$P11TOOL\"], [Path to p11tool])\n\tAC_ARG_VAR([SOFTHSM2_UTIL], [full path to softhsm2-util])\n\tAC_ARG_VAR([SOFTHSM2_MODULE], [full path to softhsm2 module @<:@default=/usr/lib/softhsm/libsofthsm2.so@:>@])\n\tAC_PATH_PROGS([SOFTHSM2_UTIL], [softhsm2-util],, [$PATH:/usr/local/bin:/usr/bin:/bin])\n\ttest -z \"$SOFTHSM2_MODULE\" && SOFTHSM2_MODULE=/usr/lib/softhsm/libsofthsm2.so\n\tAC_DEFINE_UNQUOTED([SOFTHSM2_UTIL_PATH], [\"$SOFTHSM2_UTIL\"], [Path to softhsm2-util])\n\tAC_DEFINE_UNQUOTED([SOFTHSM2_MODULE_PATH], [\"$SOFTHSM2_MODULE\"], [Path to softhsm2 module])\n\tif test \"${with_crypto_library}\" = \"openssl\"; then\n\t\tAM_CONDITIONAL([HAVE_SOFTHSM2], [test \"${P11TOOL}\" -a \"${SOFTHSM2_UTIL}\" -a \"${SOFTHSM2_MODULE}\"])\n\tfi\nfi\n\n# When testing a compiler option, we add -Werror to force\n# an error when the option is unsupported. This is not\n# required for gcc, but some compilers such as clang need it.\nAC_DEFUN([ACL_CHECK_ADD_COMPILE_FLAGS], [\n    old_cflags=\"$CFLAGS\"\n    CFLAGS=\"$1 -Werror $CFLAGS\"\n    AC_MSG_CHECKING([whether the compiler accepts $1])\n    AC_COMPILE_IFELSE([AC_LANG_PROGRAM()], [AC_MSG_RESULT([yes])]; CFLAGS=\"$1 $old_cflags\",\n        [AC_MSG_RESULT([no]); CFLAGS=\"$old_cflags\"])]\n)\n\nACL_CHECK_ADD_COMPILE_FLAGS([-Wno-stringop-truncation])\nACL_CHECK_ADD_COMPILE_FLAGS([-Wstrict-prototypes])\nACL_CHECK_ADD_COMPILE_FLAGS([-Wold-style-definition])\nACL_CHECK_ADD_COMPILE_FLAGS([-Wall])\n\nif test \"${enable_pedantic}\" = \"yes\"; then\n\tenable_strict=\"yes\"\n\tCFLAGS=\"${CFLAGS} -pedantic\"\n\tAC_DEFINE([PEDANTIC], [1], [Enable pedantic mode])\nfi\nif test \"${enable_strict}\" = \"yes\"; then\n\tCFLAGS=\"${CFLAGS} -Wsign-compare -Wuninitialized\"\nfi\nif test \"${enable_werror}\" = \"yes\"; then\n\tCFLAGS=\"${CFLAGS} -Werror\"\nfi\n\nif test \"${enable_plugin_auth_pam}\" = \"yes\"; then\n\tPLUGIN_AUTH_PAM_CFLAGS=\"${LIBPAM_CFLAGS}\"\n\tif test \"${enable_pam_dlopen}\" = \"yes\"; then\n\t\tAC_DEFINE([USE_PAM_DLOPEN], [1], [dlopen libpam])\n\t\tPLUGIN_AUTH_PAM_LIBS=\"${DL_LIBS}\"\n\telse\n\t\ttest -z \"${LIBPAM_LIBS}\" && AC_MSG_ERROR([libpam required but missing])\n\t\tPLUGIN_AUTH_PAM_LIBS=\"${LIBPAM_LIBS}\"\n\tfi\nfi\n\nif test \"${enable_async_push}\" = \"yes\"; then\n\tcase \"$host\" in\n\t\t*-*-freebsd*)\n\t\t\tPKG_CHECK_MODULES(\n\t\t\t\t[OPTIONAL_INOTIFY],\n\t\t\t\t[libinotify],\n\t\t\t\t[\n\t\t\t\t\tAC_DEFINE([HAVE_SYS_INOTIFY_H])\n\t\t\t\t\tAC_DEFINE([ENABLE_ASYNC_PUSH], [1], [Enable async push])\n\t\t\t\t]\n\t\t\t)\n\t\t;;\n\t\t*)\n\t\t\tAC_CHECK_HEADERS(\n\t\t\t\t[sys/inotify.h],\n\t\t\t\tAC_DEFINE([ENABLE_ASYNC_PUSH], [1], [Enable async push]),\n\t\t\t\tAC_MSG_ERROR([inotify.h not found.])\n\t\t\t)\n\t\t;;\n\tesac\nfi\n\nCONFIGURE_DEFINES=\"`set | grep '^enable_.*=' ; set | grep '^with_.*='`\"\nAC_DEFINE_UNQUOTED([CONFIGURE_DEFINES], [\"`echo ${CONFIGURE_DEFINES}`\"], [Configuration settings])\n\nTAP_WIN_COMPONENT_ID=\"PRODUCT_TAP_WIN_COMPONENT_ID\"\nTAP_WIN_MIN_MAJOR=\"PRODUCT_TAP_WIN_MIN_MAJOR\"\nTAP_WIN_MIN_MINOR=\"PRODUCT_TAP_WIN_MIN_MINOR\"\nAC_DEFINE_UNQUOTED([TAP_WIN_COMPONENT_ID], [\"${TAP_WIN_COMPONENT_ID}\"], [The tap-windows id])\nAC_DEFINE_UNQUOTED([TAP_WIN_MIN_MAJOR], [${TAP_WIN_MIN_MAJOR}], [The tap-windows version number is required for OpenVPN])\nAC_DEFINE_UNQUOTED([TAP_WIN_MIN_MINOR], [${TAP_WIN_MIN_MINOR}], [The tap-windows version number is required for OpenVPN])\nAC_SUBST([TAP_WIN_COMPONENT_ID])\nAC_SUBST([TAP_WIN_MIN_MAJOR])\nAC_SUBST([TAP_WIN_MIN_MINOR])\n\nAC_SUBST([OPTIONAL_DL_LIBS])\nAC_SUBST([OPTIONAL_SELINUX_LIBS])\nAC_SUBST([OPTIONAL_CRYPTO_CFLAGS])\nAC_SUBST([OPTIONAL_CRYPTO_LIBS])\nAC_SUBST([OPTIONAL_LIBCAPNG_CFLAGS])\nAC_SUBST([OPTIONAL_LIBCAPNG_LIBS])\nAC_SUBST([OPTIONAL_LIBNL_GENL_CFLAGS])\nAC_SUBST([OPTIONAL_LIBNL_GENL_LIBS])\nAC_SUBST([OPTIONAL_LZO_CFLAGS])\nAC_SUBST([OPTIONAL_LZO_LIBS])\nAC_SUBST([OPTIONAL_LZ4_CFLAGS])\nAC_SUBST([OPTIONAL_LZ4_LIBS])\nAC_SUBST([OPTIONAL_SYSTEMD_LIBS])\nAC_SUBST([OPTIONAL_PKCS11_HELPER_CFLAGS])\nAC_SUBST([OPTIONAL_PKCS11_HELPER_LIBS])\nAC_SUBST([OPTIONAL_INOTIFY_CFLAGS])\nAC_SUBST([OPTIONAL_INOTIFY_LIBS])\n\nAC_SUBST([PLUGIN_AUTH_PAM_CFLAGS])\nAC_SUBST([PLUGIN_AUTH_PAM_LIBS])\n\nAM_CONDITIONAL([WIN32], [test \"${WIN32}\" = \"yes\"])\nAM_CONDITIONAL([GIT_CHECKOUT], [test \"${GIT_CHECKOUT}\" = \"yes\"])\nAM_CONDITIONAL([ENABLE_PLUGIN_AUTH_PAM], [test \"${enable_plugin_auth_pam}\" = \"yes\"])\nAM_CONDITIONAL([ENABLE_PLUGIN_DOWN_ROOT], [test \"${enable_plugin_down_root}\" = \"yes\"])\nAM_CONDITIONAL([HAVE_LD_WRAP_SUPPORT], [test \"${have_ld_wrap_support}\" = \"yes\"])\nAM_CONDITIONAL([OPENSSL_ENGINE], [test \"${have_openssl_engine}\" = \"yes\"])\n\nsampledir=\"\\$(docdir)/sample\"\nAC_SUBST([plugindir])\nAC_SUBST([sampledir])\n\nAC_SUBST([systemdunitdir])\nAC_SUBST([tmpfilesdir])\n\nAC_ARG_ENABLE(\n     [unit-tests],\n     [AS_HELP_STRING([--disable-unit-tests],\n                     [Disables building and running the unit tests suite])],\n     [],\n     [enable_unit_tests=\"yes\"]\n)\n\n# Check if cmocka is available - needed for unit testing\nPKG_CHECK_MODULES(\n\t[CMOCKA], [cmocka],\n\t[have_cmocka=\"yes\"],\n\t[AC_MSG_WARN([cmocka.pc not found on the system using pkg-config ${pkg_config_found}.  Unit tests disabled])]\n)\nAM_CONDITIONAL([ENABLE_UNITTESTS], [test \"${enable_unit_tests}\" = \"yes\" -a \"${have_cmocka}\" = \"yes\" ])\nAC_SUBST([ENABLE_UNITTESTS])\n\nTEST_LDFLAGS=\"${OPTIONAL_CRYPTO_LIBS} ${OPTIONAL_PKCS11_HELPER_LIBS} ${OPTIONAL_LIBCAPNG_LIBS}\"\nTEST_LDFLAGS=\"${TEST_LDFLAGS} ${OPTIONAL_LIBNL_GENL_LIBS}\"\nTEST_LDFLAGS=\"${TEST_LDFLAGS} ${OPTIONAL_LZO_LIBS} ${CMOCKA_LIBS}\"\nTEST_CFLAGS=\"${OPTIONAL_CRYPTO_CFLAGS} ${OPTIONAL_PKCS11_HELPER_CFLAGS} ${OPTIONAL_LIBCAPNG_CFLAGS}\"\nTEST_CFLAGS=\"${TEST_CFLAGS} ${OPTIONAL_LIBNL_GENL_CFLAGS} ${OPTIONAL_LZO_CFLAGS}\"\nTEST_CFLAGS=\"${TEST_CFLAGS} -I\\$(top_srcdir)/include ${CMOCKA_CFLAGS}\"\n\nAC_SUBST([TEST_LDFLAGS])\nAC_SUBST([TEST_CFLAGS])\n\nAC_CONFIG_FILES([\n\tMakefile\n\tdistro/Makefile\n\tdistro/systemd/Makefile\n\tdoc/Makefile\n\tdoc/doxygen/Makefile\n\tdoc/doxygen/openvpn.doxyfile\n\tinclude/Makefile\n\tsample/sample-plugins/Makefile\n\tsrc/Makefile\n\tsrc/compat/Makefile\n\tsrc/openvpn/Makefile\n\tsrc/openvpnmsica/Makefile\n\tsrc/openvpnserv/Makefile\n\tsrc/plugins/Makefile\n\tsrc/plugins/auth-pam/Makefile\n\tsrc/plugins/down-root/Makefile\n\tsrc/tapctl/Makefile\n\ttests/Makefile\n        tests/unit_tests/Makefile\n        tests/unit_tests/example_test/Makefile\n        tests/unit_tests/openvpn/Makefile\n        tests/unit_tests/plugins/Makefile\n        tests/unit_tests/plugins/auth-pam/Makefile\n\tsample/Makefile\n])\nAC_CONFIG_FILES([tests/t_client.sh], [chmod +x tests/t_client.sh])\nAC_OUTPUT\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "distro",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "forked-test-driver",
          "type": "blob",
          "size": 4.9736328125,
          "content": "#! /bin/sh\n# test-driver - basic testsuite driver script.\n\nscriptversion=2018-03-07.03; # UTC\n\n# Copyright (C) 2011-2021 Free Software Foundation, Inc.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# This file is maintained in Automake, please report\n# bugs to <bug-automake@gnu.org> or send patches to\n# <automake-patches@gnu.org>.\n\n# Make unconditional expansion of undefined variables an error.  This\n# helps a lot in preventing typo-related bugs.\nset -u\n\nusage_error ()\n{\n  echo \"$0: $*\" >&2\n  print_usage >&2\n  exit 2\n}\n\nprint_usage ()\n{\n  cat <<END\nUsage:\n  test-driver --test-name NAME --log-file PATH --trs-file PATH\n              [--expect-failure {yes|no}] [--color-tests {yes|no}]\n              [--enable-hard-errors {yes|no}] [--]\n              TEST-SCRIPT [TEST-SCRIPT-ARGUMENTS]\n\nThe '--test-name', '--log-file' and '--trs-file' options are mandatory.\nSee the GNU Automake documentation for information.\nEND\n}\n\ntest_name= # Used for reporting.\nlog_file=  # Where to save the output of the test script.\ntrs_file=  # Where to save the metadata of the test run.\nexpect_failure=no\ncolor_tests=no\nenable_hard_errors=yes\nwhile test $# -gt 0; do\n  case $1 in\n  --help) print_usage; exit $?;;\n  --version) echo \"test-driver $scriptversion\"; exit $?;;\n  --test-name) test_name=$2; shift;;\n  --log-file) log_file=$2; shift;;\n  --trs-file) trs_file=$2; shift;;\n  --color-tests) color_tests=$2; shift;;\n  --expect-failure) expect_failure=$2; shift;;\n  --enable-hard-errors) enable_hard_errors=$2; shift;;\n  --) shift; break;;\n  -*) usage_error \"invalid option: '$1'\";;\n   *) break;;\n  esac\n  shift\ndone\n\nmissing_opts=\ntest x\"$test_name\" = x && missing_opts=\"$missing_opts --test-name\"\ntest x\"$log_file\"  = x && missing_opts=\"$missing_opts --log-file\"\ntest x\"$trs_file\"  = x && missing_opts=\"$missing_opts --trs-file\"\nif test x\"$missing_opts\" != x; then\n  usage_error \"the following mandatory options are missing:$missing_opts\"\nfi\n\nif test $# -eq 0; then\n  usage_error \"missing argument\"\nfi\n\nif test $color_tests = yes; then\n  # Keep this in sync with 'lib/am/check.am:$(am__tty_colors)'.\n  red='\u001b[0;31m' # Red.\n  grn='\u001b[0;32m' # Green.\n  lgn='\u001b[1;32m' # Light green.\n  blu='\u001b[1;34m' # Blue.\n  mgn='\u001b[0;35m' # Magenta.\n  std='\u001b[m'     # No color.\nelse\n  red= grn= lgn= blu= mgn= std=\nfi\n\ndo_exit='rm -f $log_file $trs_file; (exit $st); exit $st'\ntrap \"st=129; $do_exit\" 1\ntrap \"st=130; $do_exit\" 2\ntrap \"st=141; $do_exit\" 13\ntrap \"st=143; $do_exit\" 15\n\n# Test script is run here. We create the file first, then append to it,\n# to ameliorate tests themselves also writing to the log file. Our tests\n# don't, but others can (automake bug#35762).\n# OVPN changes:\n#  - add tee to see output of tests\n#  - needs portable pipefail mechanism\nestatusfile=\"${trs_file}.exit\"\n: >\"$log_file\"\n(\"$@\" 2>&1; estatus=$?; echo $estatus >\"$estatusfile\") | tee -a \"$log_file\"\nestatus=$(cat \"$estatusfile\")\nrm -f \"$estatusfile\"\n\nif test $enable_hard_errors = no && test $estatus -eq 99; then\n  tweaked_estatus=1\nelse\n  tweaked_estatus=$estatus\nfi\n\ncase $tweaked_estatus:$expect_failure in\n  0:yes) col=$red res=XPASS recheck=yes gcopy=yes;;\n  0:*)   col=$grn res=PASS  recheck=no  gcopy=no;;\n  77:*)  col=$blu res=SKIP  recheck=no  gcopy=yes;;\n  99:*)  col=$mgn res=ERROR recheck=yes gcopy=yes;;\n  *:yes) col=$lgn res=XFAIL recheck=no  gcopy=yes;;\n  *:*)   col=$red res=FAIL  recheck=yes gcopy=yes;;\nesac\n\n# Report the test outcome and exit status in the logs, so that one can\n# know whether the test passed or failed simply by looking at the '.log'\n# file, without the need of also peaking into the corresponding '.trs'\n# file (automake bug#11814).\necho \"$res $test_name (exit status: $estatus)\" >>\"$log_file\"\n\n# Report outcome to console.\necho \"${col}${res}${std}: $test_name\"\n\n# Register the test result, and other relevant metadata.\necho \":test-result: $res\" > $trs_file\necho \":global-test-result: $res\" >> $trs_file\necho \":recheck: $recheck\" >> $trs_file\necho \":copy-in-global-log: $gcopy\" >> $trs_file\n\n# Local Variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC0\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "ltrc.inc",
          "type": "blob",
          "size": 0.6298828125,
          "content": "#\n#  OpenVPN -- An application to securely tunnel IP networks\n#             over a single UDP port, with support for SSL/TLS-based\n#             session authentication and key exchange,\n#             packet encryption, packet authentication, and\n#             packet compression.\n#\n#  Copyright (C) 2008-2012 Alon Bar-Lev <alon.barlev@gmail.com>\n#\n# Required to build Windows resource file\n\nRCCOMPILE = $(RC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n\t$(AM_CPPFLAGS) $(CPPFLAGS)\nLTRCCOMPILE = $(LIBTOOL) --mode=compile --tag=RC $(RCCOMPILE)\n\n.rc.lo:\n\t$(LTRCCOMPILE) -i \"$<\" -o \"$@\"\n\n.rc.o:\n\t$(RCCOMPILE) -i \"$<\" -o \"$@\"\n\n.mc.rc:\n\t$(WINDMC) \"$<\"\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 1.212890625,
          "content": "{\n    \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n    \"packageRules\": [\n        {\n            \"matchDepTypes\": [\n                \"action\"\n            ],\n            \"groupName\": \"github actions\",\n            \"pinDigests\": true,\n            \"extends\": [\n                \"schedule:monthly\"\n            ]\n        },\n        {\n            \"matchDepNames\": [\n                \"vcpkg\"\n            ],\n            \"extends\": [\n                \"schedule:monthly\"\n            ]\n        }\n    ],\n    \"customManagers\": [\n        {\n            \"customType\": \"regex\",\n            \"fileMatch\": [\"^\\\\.github/workflows/.+\\\\.ya?ml$\"],\n            \"matchStrings\": [\"vcpkgGitCommitId:\\\\s*(?<currentDigest>.*?)\\\\n\"],\n            \"currentValueTemplate\": \"master\",\n            \"depNameTemplate\": \"vcpkg\",\n            \"packageNameTemplate\": \"https://github.com/microsoft/vcpkg\",\n            \"datasourceTemplate\": \"git-refs\"\n        },\n        {\n            \"customType\": \"regex\",\n            \"fileMatch\": [\"^\\\\.github/workflows/.+\\\\.ya?ml$\"],\n            \"matchStrings\": [\"versioning=(?<versioning>.*?)\\\\n\\\\s*repository:\\\\s*(?<depName>.*?)\\\\n\\\\s*ref:\\\\s*(?<currentValue>.*?)\\\\n\"],\n            \"datasourceTemplate\": \"github-tags\"\n        }\n    ]\n}\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.m4",
          "type": "blob",
          "size": 0.6474609375,
          "content": "dnl define the OpenVPN version\ndefine([PRODUCT_NAME], [OpenVPN])\ndefine([PRODUCT_TARNAME], [openvpn])\ndefine([PRODUCT_VERSION_MAJOR], [2])\ndefine([PRODUCT_VERSION_MINOR], [7])\ndefine([PRODUCT_VERSION_PATCH], [_git])\nm4_append([PRODUCT_VERSION], [PRODUCT_VERSION_MAJOR])\nm4_append([PRODUCT_VERSION], [PRODUCT_VERSION_MINOR], [[.]])\nm4_append([PRODUCT_VERSION], [PRODUCT_VERSION_PATCH], [[]])\ndefine([PRODUCT_BUGREPORT], [openvpn-users@lists.sourceforge.net])\ndefine([PRODUCT_VERSION_RESOURCE], [2,7,0,0])\ndnl define the TAP version\ndefine([PRODUCT_TAP_WIN_COMPONENT_ID], [tap0901])\ndefine([PRODUCT_TAP_WIN_MIN_MAJOR], [9])\ndefine([PRODUCT_TAP_WIN_MIN_MINOR], [9])\n"
        }
      ]
    }
  ]
}