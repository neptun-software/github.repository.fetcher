{
  "metadata": {
    "timestamp": 1736710395139,
    "page": 12,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openwrt/openwrt",
      "stars": 21146,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0947265625,
          "content": "* -text\n*.patch whitespace=-indent-with-non-tab,-space-before-tab,-tab-in-indent,-trailing-space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.353515625,
          "content": "*.o\n.DS_Store\n.*.swp\n/env\n/dl\n/.config\n/.config.old\n/.toolchain_build_ver\n/bin\n/build_dir\n/staging_dir\n/tmp\n/logs\n/feeds\n/feeds.conf\n/files\n/target/linux/feeds\n/overlay\n/package/feeds\n/package/openwrt-packages\n/*.patch\n/llvm-bpf*\nkey-build*\nprivate-key.pem\npublic-key.pem\n*.orig\n*.rej\n*~\n.#*\n*#\n.emacs.desktop*\nTAGS*~\ngit-src\n.project\n.cproject\n.ccache\n.vscode*\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "BSDmakefile",
          "type": "blob",
          "size": 0.103515625,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2006 OpenWrt.org\n\nworld ${.TARGETS}:\n\t@gmake $@\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.27734375,
          "content": "OpenWrt is provided under:\n\n\tSPDX-License-Identifier: GPL-2.0-only\n\nBeing under the terms of the GNU General Public License version 2 only,\naccording with:\n\n\tLICENSES/GPL-2.0\n\nIn addition, other licenses may also apply.\n\nAll contributions to OpenWrt are subject to this COPYING file.\n"
        },
        {
          "name": "Config.in",
          "type": "blob",
          "size": 0.65234375,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n\nmainmenu \"OpenWrt Configuration\"\n\nconfig MODULES\n\tmodules\n\tbool\n\tdefault y\n\nconfig HAVE_DOT_CONFIG\n\tbool\n\tdefault y\n\nHOST_OS := $(shell, uname)\n\nconfig HOST_OS_LINUX\n\tdef_bool $(shell, ./config/check-uname.sh Linux)\n\nconfig HOST_OS_MACOS\n\tdef_bool $(shell, ./config/check-uname.sh Darwin)\n\nsource \"target/Config.in\"\n\nsource \"config/Config-images.in\"\n\nsource \"config/Config-build.in\"\n\nsource \"config/Config-devel.in\"\n\nsource \"toolchain/Config.in\"\n\nsource \"target/imagebuilder/Config.in\"\n\nsource \"target/sdk/Config.in\"\n\nsource \"target/toolchain/Config.in\"\n\nsource \"tmp/.config-package.in\"\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.1337890625,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2007 OpenWrt.org\n\nTOPDIR:=${CURDIR}\nLC_ALL:=C\nLANG:=C\nTZ:=UTC\nexport TOPDIR LC_ALL LANG TZ\n\nempty:=\nspace:= $(empty) $(empty)\n$(if $(findstring $(space),$(TOPDIR)),$(error ERROR: The path to the OpenWrt directory must not include any spaces))\n\nworld:\n\nDISTRO_PKG_CONFIG:=$(shell $(TOPDIR)/scripts/command_all.sh pkg-config | grep -e '/usr' -e '/nix/store' -m 1)\n\nexport ORIG_PATH:=$(if $(ORIG_PATH),$(ORIG_PATH),$(PATH))\nexport PATH:=$(if $(STAGING_DIR),$(abspath $(STAGING_DIR)/../host/bin),$(TOPDIR)/staging_dir/host/bin):$(PATH)\n\nifneq ($(OPENWRT_BUILD),1)\n  _SINGLE=export MAKEFLAGS=$(space);\n\n  override OPENWRT_BUILD=1\n  export OPENWRT_BUILD\n  GREP_OPTIONS=\n  export GREP_OPTIONS\n  CDPATH=\n  export CDPATH\n  include $(TOPDIR)/include/debug.mk\n  include $(TOPDIR)/include/depends.mk\n  include $(TOPDIR)/include/toplevel.mk\nelse\n  include rules.mk\n  include $(INCLUDE_DIR)/depends.mk\n  include $(INCLUDE_DIR)/subdir.mk\n  include target/Makefile\n  include package/Makefile\n  include tools/Makefile\n  include toolchain/Makefile\n\n# Include the test suite Makefile if it exists\n-include tests/Makefile\n\n$(toolchain/stamp-compile): $(tools/stamp-compile) $(if $(CONFIG_BUILDBOT),toolchain_rebuild_check)\n$(target/stamp-compile): $(toolchain/stamp-compile) $(tools/stamp-compile) $(BUILD_DIR)/.prepared\n$(package/stamp-compile): $(target/stamp-compile) $(package/stamp-cleanup)\n$(package/stamp-install): $(package/stamp-compile)\n$(target/stamp-install): $(package/stamp-compile) $(package/stamp-install)\ncheck: $(tools/stamp-check) $(toolchain/stamp-check) $(package/stamp-check)\n\nprintdb:\n\t@true\n\nprepare: $(target/stamp-compile)\n\n_clean: FORCE\n\trm -rf $(BUILD_DIR) $(STAGING_DIR) $(BIN_DIR) $(OUTPUT_DIR)/packages/$(ARCH_PACKAGES) $(TOPDIR)/staging_dir/packages\n\nclean: _clean\n\trm -rf $(BUILD_LOG_DIR)\n\ntargetclean: _clean\n\trm -rf $(TOOLCHAIN_DIR) $(BUILD_DIR_BASE)/hostpkg $(BUILD_DIR_TOOLCHAIN)\n\ndirclean: targetclean clean\n\trm -rf $(STAGING_DIR_HOST) $(STAGING_DIR_HOSTPKG) $(BUILD_DIR_BASE)/host\n\trm -rf $(TMP_DIR)\n\t$(MAKE) -C $(TOPDIR)/scripts/config clean\n\ntoolchain_rebuild_check:\n\t$(SCRIPT_DIR)/check-toolchain-clean.sh\n\ncacheclean:\nifneq ($(CONFIG_CCACHE),)\n\t$(STAGING_DIR_HOST)/bin/ccache -C\nendif\n\nifndef DUMP_TARGET_DB\n$(BUILD_DIR)/.prepared: Makefile\n\t@mkdir -p $$(dirname $@)\n\t@touch $@\n\ntmp/.prereq_packages: .config\n\tunset ERROR; \\\n\tfor package in $(sort $(prereq-y) $(prereq-m)); do \\\n\t\t$(_SINGLE)$(NO_TRACE_MAKE) -s -r -C package/$$package prereq || ERROR=1; \\\n\tdone; \\\n\tif [ -n \"$$ERROR\" ]; then \\\n\t\techo \"Package prerequisite check failed.\"; \\\n\t\tfalse; \\\n\tfi\n\ttouch $@\nendif\n\n# check prerequisites before starting to build\nprereq: $(target/stamp-prereq) tmp/.prereq_packages\n\t@if [ ! -f \"$(INCLUDE_DIR)/site/$(ARCH)\" ]; then \\\n\t\techo 'ERROR: Missing site config for architecture \"$(ARCH)\" !'; \\\n\t\techo '       The missing file will cause configure scripts to fail during compilation.'; \\\n\t\techo '       Please provide a \"$(INCLUDE_DIR)/site/$(ARCH)\" file and restart the build.'; \\\n\t\texit 1; \\\n\tfi\n\n$(BIN_DIR)/profiles.json: FORCE\n\t$(if $(CONFIG_JSON_OVERVIEW_IMAGE_INFO), \\\n\t\tWORK_DIR=$(BUILD_DIR)/json_info_files \\\n\t\t\t$(SCRIPT_DIR)/json_overview_image_info.py $@ \\\n\t)\n\njson_overview_image_info: $(BIN_DIR)/profiles.json\n\nchecksum: FORCE\n\t$(call sha256sums,$(BIN_DIR),$(CONFIG_BUILDBOT))\n\nbuildversion: FORCE\n\t$(SCRIPT_DIR)/getver.sh > $(BIN_DIR)/version.buildinfo\n\nfeedsversion: FORCE\n\t$(SCRIPT_DIR)/feeds list -fs > $(BIN_DIR)/feeds.buildinfo\n\ndiffconfig: FORCE\n\tmkdir -p $(BIN_DIR)\n\t$(SCRIPT_DIR)/diffconfig.sh > $(BIN_DIR)/config.buildinfo\n\nbuildinfo: FORCE\n\t$(_SINGLE)$(SUBMAKE) -r diffconfig buildversion feedsversion\n\nprepare: .config $(tools/stamp-compile) $(toolchain/stamp-compile)\n\t$(_SINGLE)$(SUBMAKE) -r buildinfo\n\nworld: prepare $(target/stamp-compile) $(package/stamp-compile) $(package/stamp-install) $(target/stamp-install) FORCE\n\t$(_SINGLE)$(SUBMAKE) -r package/index\n\t$(_SINGLE)$(SUBMAKE) -r json_overview_image_info\n\t$(_SINGLE)$(SUBMAKE) -r checksum\nifneq ($(CONFIG_CCACHE),)\n\t$(STAGING_DIR_HOST)/bin/ccache -s\nendif\n\n.PHONY: clean dirclean prereq prepare world package/symlinks package/symlinks-install package/symlinks-clean\n\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1953125,
          "content": "![OpenWrt logo](include/logo.png)\n\nOpenWrt Project is a Linux operating system targeting embedded devices. Instead\nof trying to create a single, static firmware, OpenWrt provides a fully\nwritable filesystem with package management. This frees you from the\napplication selection and configuration provided by the vendor and allows you\nto customize the device through the use of packages to suit any application.\nFor developers, OpenWrt is the framework to build an application without having\nto build a complete firmware around it; for users this means the ability for\nfull customization, to use the device in ways never envisioned.\n\nSunshine!\n\n## Download\n\nBuilt firmware images are available for many architectures and come with a\npackage selection to be used as WiFi home router. To quickly find a factory\nimage usable to migrate from a vendor stock firmware to OpenWrt, try the\n*Firmware Selector*.\n\n* [OpenWrt Firmware Selector](https://firmware-selector.openwrt.org/)\n\nIf your device is supported, please follow the **Info** link to see install\ninstructions or consult the support resources listed below.\n\n## \n\nAn advanced user may require additional or specific package. (Toolchain, SDK, ...) For everything else than simple firmware download, try the wiki download page:\n\n* [OpenWrt Wiki Download](https://openwrt.org/downloads)\n\n## Development\n\nTo build your own firmware you need a GNU/Linux, BSD or macOS system (case\nsensitive filesystem required). Cygwin is unsupported because of the lack of a\ncase sensitive file system.\n\n### Requirements\n\nYou need the following tools to compile OpenWrt, the package names vary between\ndistributions. A complete list with distribution specific packages is found in\nthe [Build System Setup](https://openwrt.org/docs/guide-developer/build-system/install-buildsystem)\ndocumentation.\n\n```\nbinutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-dev\nmake4.1+ perl python3.7+ rsync subversion unzip which\n```\n\n### Quickstart\n\n1. Run `./scripts/feeds update -a` to obtain all the latest package definitions\n   defined in feeds.conf / feeds.conf.default\n\n2. Run `./scripts/feeds install -a` to install symlinks for all obtained\n   packages into package/feeds/\n\n3. Run `make menuconfig` to select your preferred configuration for the\n   toolchain, target system & firmware packages.\n\n4. Run `make` to build your firmware. This will download all sources, build the\n   cross-compile toolchain and then cross-compile the GNU/Linux kernel & all chosen\n   applications for your target system.\n\n### Related Repositories\n\nThe main repository uses multiple sub-repositories to manage packages of\ndifferent categories. All packages are installed via the OpenWrt package\nmanager called `opkg`. If you're looking to develop the web interface or port\npackages to OpenWrt, please find the fitting repository below.\n\n* [LuCI Web Interface](https://github.com/openwrt/luci): Modern and modular\n  interface to control the device via a web browser.\n\n* [OpenWrt Packages](https://github.com/openwrt/packages): Community repository\n  of ported packages.\n\n* [OpenWrt Routing](https://github.com/openwrt/routing): Packages specifically\n  focused on (mesh) routing.\n\n* [OpenWrt Video](https://github.com/openwrt/video): Packages specifically\n  focused on display servers and clients (Xorg and Wayland).\n\n## Support Information\n\nFor a list of supported devices see the [OpenWrt Hardware Database](https://openwrt.org/supported_devices)\n\n### Documentation\n\n* [Quick Start Guide](https://openwrt.org/docs/guide-quick-start/start)\n* [User Guide](https://openwrt.org/docs/guide-user/start)\n* [Developer Documentation](https://openwrt.org/docs/guide-developer/start)\n* [Technical Reference](https://openwrt.org/docs/techref/start)\n\n### Support Community\n\n* [Forum](https://forum.openwrt.org): For usage, projects, discussions and hardware advise.\n* [Support Chat](https://webchat.oftc.net/#openwrt): Channel `#openwrt` on **oftc.net**.\n\n### Developer Community\n\n* [Bug Reports](https://bugs.openwrt.org): Report bugs in OpenWrt\n* [Dev Mailing List](https://lists.openwrt.org/mailman/listinfo/openwrt-devel): Send patches\n* [Dev Chat](https://webchat.oftc.net/#openwrt-devel): Channel `#openwrt-devel` on **oftc.net**.\n\n## License\n\nOpenWrt is licensed under GPL-2.0\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "feeds.conf.default",
          "type": "blob",
          "size": 0.4306640625,
          "content": "src-git packages https://git.openwrt.org/feed/packages.git\nsrc-git luci https://git.openwrt.org/project/luci.git\nsrc-git routing https://git.openwrt.org/feed/routing.git\nsrc-git telephony https://git.openwrt.org/feed/telephony.git\nsrc-git video https://github.com/openwrt/video.git\n#src-git targets https://github.com/openwrt/targets.git\n#src-git oldpackages http://git.openwrt.org/packages.git\n#src-link custom /usr/src/openwrt/custom-feed\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules.mk",
          "type": "blob",
          "size": 16.58203125,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2006-2010 OpenWrt.org\n# Copyright (C) 2016 LEDE Project\n\nifneq ($(__rules_inc),1)\n__rules_inc=1\n\nifeq ($(DUMP),)\n  -include $(TOPDIR)/.config\nendif\ninclude $(TOPDIR)/include/debug.mk\ninclude $(TOPDIR)/include/verbose.mk\n\nifneq ($(filter check,$(MAKECMDGOALS)),)\nCHECK:=1\nDUMP:=1\nendif\n\nexport TMP_DIR:=$(TOPDIR)/tmp\nexport TMPDIR:=$(TMP_DIR)\n\n##@\n# @brief Strip quotes `\"` and pounds `#` from string.\n#\n# @param 1: String.\n##\nqstrip=$(strip $(subst \",,$(1)))\n#\"))\n\nempty:=\nspace:= $(empty) $(empty)\ncomma:=,\npound:=\\#\n##@\n# @brief Merge strings by removing spaces.\n#\n# @param 1: String.\n##\nmerge=$(subst $(space),,$(1))\n##@\n# @brief Get hash sum of variable list.\n#\n# @param 1: List of variable names.\n##\nconfvar=$(shell echo '$(foreach v,$(1),$(v)=$(subst ','\\'',$($(v))))' | $(MKHASH) md5)\n##@\n# @brief Strip last extension from file name.\n#\n# @param 1: File name.\n##\nstrip_last=$(patsubst %.$(lastword $(subst .,$(space),$(1))),%,$(1))\n\nparen_left = (\nparen_right = )\nchars_lower = a b c d e f g h i j k l m n o p q r s t u v w x y z\nchars_upper = A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\ndefine sep\n\nendef\n\ndefine newline\n\n\nendef\n\n__tr_list = $(join $(join $(1),$(foreach char,$(1),$(comma))),$(2))\n__tr_head_stripped = $(subst $(space),,$(foreach cv,$(call __tr_list,$(1),$(2)),$$$(paren_left)subst$(cv)$(comma)))\n__tr_head = $(subst $(paren_left)subst,$(paren_left)subst$(space),$(__tr_head_stripped))\n__tr_tail = $(subst $(space),,$(foreach cv,$(1),$(paren_right)))\n__tr_template = $(__tr_head)$$(1)$(__tr_tail)\n\n##@\n# @brief Convert string characters to upper.\n##\n$(eval toupper = $(call __tr_template,$(chars_lower),$(chars_upper)))\n##@\n# @brief Convert string characters to lower.\n##\n$(eval tolower = $(call __tr_template,$(chars_upper),$(chars_lower)))\n\n##@\n# @brief Abbreviate version. Truncate to 8 characters.\n##\nversion_abbrev = $(if $(if $(CHECK),,$(DUMP)),$(1),$(shell printf '%.8s' $(1)))\n\n_SINGLE=export MAKEFLAGS=$(space);\nCFLAGS:=\nARCH:=$(subst i486,i386,$(subst i586,i386,$(subst i686,i386,$(call qstrip,$(CONFIG_ARCH)))))\nARCH_PACKAGES:=$(call qstrip,$(CONFIG_TARGET_ARCH_PACKAGES))\nBOARD:=$(call qstrip,$(CONFIG_TARGET_BOARD))\nSUBTARGET:=$(call qstrip,$(CONFIG_TARGET_SUBTARGET))\nTARGET_OPTIMIZATION:=$(call qstrip,$(CONFIG_TARGET_OPTIMIZATION))\nTARGET_SUFFIX=$(call qstrip,$(CONFIG_TARGET_SUFFIX))\nBUILD_SUFFIX:=$(call qstrip,$(CONFIG_BUILD_SUFFIX))\nSUBDIR:=$(patsubst $(TOPDIR)/%,%,${CURDIR})\nBUILD_SUBDIR:=$(patsubst $(TOPDIR)/%,%,${CURDIR})\nNPROC:=$(shell sysctl -n hw.ncpu 2>/dev/null || nproc)\nexport SHELL:=/usr/bin/env bash\n\nIS_PACKAGE_BUILD := $(if $(filter package/%,$(BUILD_SUBDIR)),1)\n\nOPTIMIZE_FOR_CPU=$(subst i386,i486,$(ARCH))\n\nifneq (,$(findstring $(ARCH) , aarch64 aarch64_be powerpc ))\n  FPIC:=-DPIC -fPIC\nelse\n  FPIC:=-DPIC -fpic\nendif\n\nHOST_FPIC:=-DPIC -fPIC\n\nARCH_SUFFIX:=$(call qstrip,$(CONFIG_CPU_TYPE))\nGCC_ARCH:=\n\nifneq ($(ARCH_SUFFIX),)\n  ARCH_SUFFIX:=_$(ARCH_SUFFIX)\nendif\nifneq ($(filter -march=armv%,$(TARGET_OPTIMIZATION)),)\n  GCC_ARCH:=$(patsubst -march=%,%,$(filter -march=armv%,$(TARGET_OPTIMIZATION)))\nendif\nifdef CONFIG_HAS_SPE_FPU\n  TARGET_SUFFIX:=$(TARGET_SUFFIX)spe\nendif\nifdef CONFIG_MIPS64_ABI\n  ifneq ($(CONFIG_MIPS64_ABI_O32),y)\n     ARCH_SUFFIX:=$(ARCH_SUFFIX)_$(call qstrip,$(CONFIG_MIPS64_ABI))\n  endif\nendif\n\nDEFAULT_SUBDIR_TARGETS:=clean download prepare compile update refresh prereq dist distcheck configure check check-depends\n\n##@\n# @brief Create default targets.\n#\n# Targets are created from @DEFAULT_SUBDIR_TARGETS and input argument lists.\n#\n# @param 1: Additional targets list.\n##\ndefine DefaultTargets\n$(foreach t,$(DEFAULT_SUBDIR_TARGETS) $(1),\n  .$(t):\n  $(t): .$(t)\n  .PHONY: $(t) .$(t)\n)\nendef\n\nDL_DIR=$(if $(call qstrip,$(CONFIG_DOWNLOAD_FOLDER)),$(call qstrip,$(CONFIG_DOWNLOAD_FOLDER)),$(TOPDIR)/dl)$(if $(DL_SUBDIR),/$(DL_SUBDIR))\nOUTPUT_DIR:=$(if $(call qstrip,$(CONFIG_BINARY_FOLDER)),$(call qstrip,$(CONFIG_BINARY_FOLDER)),$(TOPDIR)/bin)\nBIN_DIR:=$(OUTPUT_DIR)/targets/$(BOARD)/$(SUBTARGET)\nINCLUDE_DIR:=$(TOPDIR)/include\nSCRIPT_DIR:=$(TOPDIR)/scripts\nBUILD_DIR_BASE:=$(TOPDIR)/build_dir\nifeq ($(CONFIG_EXTERNAL_TOOLCHAIN),)\n  GCCV:=$(call qstrip,$(CONFIG_GCC_VERSION))\n  LIBC:=$(call qstrip,$(CONFIG_LIBC))\n  REAL_GNU_TARGET_NAME=$(OPTIMIZE_FOR_CPU)-openwrt-linux$(if $(TARGET_SUFFIX),-$(TARGET_SUFFIX))\n  GNU_TARGET_NAME=$(OPTIMIZE_FOR_CPU)-openwrt-linux\n  DIR_SUFFIX:=_$(LIBC)$(if $(CONFIG_arm),_eabi)\n  BIN_DIR:=$(BIN_DIR)$(if $(CONFIG_USE_MUSL),,-$(LIBC))\n  TARGET_DIR_NAME = target-$(ARCH)$(ARCH_SUFFIX)$(DIR_SUFFIX)$(if $(BUILD_SUFFIX),_$(BUILD_SUFFIX))\n  TOOLCHAIN_DIR_NAME = toolchain-$(ARCH)$(ARCH_SUFFIX)_gcc-$(GCCV)$(DIR_SUFFIX)\nelse\n  ifeq ($(CONFIG_NATIVE_TOOLCHAIN),)\n    GNU_TARGET_NAME=$(call qstrip,$(CONFIG_TARGET_NAME))\n  else\n    GNU_TARGET_NAME=$(shell gcc -dumpmachine)\n  endif\n  REAL_GNU_TARGET_NAME=$(GNU_TARGET_NAME)\n  LIBC:=$(call qstrip,$(CONFIG_LIBC))\n  TARGET_DIR_NAME:=target-$(GNU_TARGET_NAME)_$(LIBC)$(if $(BUILD_SUFFIX),_$(BUILD_SUFFIX))\n  TOOLCHAIN_DIR_NAME:=toolchain-$(GNU_TARGET_NAME)\nendif\n\nifeq ($(or $(CONFIG_EXTERNAL_TOOLCHAIN),$(CONFIG_TARGET_uml)),)\n  iremap = -f$(if $(CONFIG_REPRODUCIBLE_DEBUG_INFO),file,macro)-prefix-map=$(1)=$(2)\nendif\n\nPACKAGE_DIR?=$(BIN_DIR)/packages\nPACKAGE_DIR_ALL?=$(TOPDIR)/staging_dir/packages/$(BOARD)\nBUILD_DIR:=$(BUILD_DIR_BASE)/$(TARGET_DIR_NAME)\nSTAGING_DIR:=$(TOPDIR)/staging_dir/$(TARGET_DIR_NAME)\nBUILD_DIR_TOOLCHAIN:=$(BUILD_DIR_BASE)/$(TOOLCHAIN_DIR_NAME)\nTOOLCHAIN_DIR:=$(TOPDIR)/staging_dir/$(TOOLCHAIN_DIR_NAME)\nSTAMP_DIR:=$(BUILD_DIR)/stamp\nSTAMP_DIR_HOST=$(BUILD_DIR_HOST)/stamp\nTARGET_ROOTFS_DIR?=$(if $(call qstrip,$(CONFIG_TARGET_ROOTFS_DIR)),$(call qstrip,$(CONFIG_TARGET_ROOTFS_DIR)),$(BUILD_DIR))\nTARGET_DIR:=$(TARGET_ROOTFS_DIR)/root-$(BOARD)\nSTAGING_DIR_ROOT:=$(STAGING_DIR)/root-$(BOARD)\nSTAGING_DIR_IMAGE:=$(STAGING_DIR)/image\nBUILD_LOG_DIR:=$(if $(call qstrip,$(CONFIG_BUILD_LOG_DIR)),$(call qstrip,$(CONFIG_BUILD_LOG_DIR)),$(TOPDIR)/logs)\nPKG_INFO_DIR := $(STAGING_DIR)/pkginfo\n\nBUILD_DIR_HOST:=$(if $(IS_PACKAGE_BUILD),$(BUILD_DIR_BASE)/hostpkg,$(BUILD_DIR_BASE)/host)\nSTAGING_DIR_HOST:=$(abspath $(STAGING_DIR)/../host)\nSTAGING_DIR_HOSTPKG:=$(abspath $(STAGING_DIR)/../hostpkg)\n\nTARGET_PATH:=$(subst $(space),:,$(filter-out .,$(filter-out ./,$(subst :,$(space),$(PATH)))))\nTARGET_INIT_PATH:=$(call qstrip,$(CONFIG_TARGET_INIT_PATH))\nTARGET_INIT_PATH:=$(if $(TARGET_INIT_PATH),$(TARGET_INIT_PATH),/usr/sbin:/sbin:/usr/bin:/bin)\nTARGET_CFLAGS:=$(TARGET_OPTIMIZATION)$(if $(CONFIG_DEBUG), -g3) $(call qstrip,$(CONFIG_EXTRA_OPTIMIZATION))\nTARGET_CXXFLAGS = $(TARGET_CFLAGS)\nTARGET_ASFLAGS_DEFAULT = $(TARGET_CFLAGS)\nTARGET_ASFLAGS = $(TARGET_ASFLAGS_DEFAULT)\nifneq ($(CONFIG_EXTERNAL_TOOLCHAIN),)\nLIBGCC_S_PATH=$(realpath $(wildcard $(call qstrip,$(CONFIG_LIBGCC_ROOT_DIR))/$(call qstrip,$(CONFIG_LIBGCC_FILE_SPEC))))\nLIBGCC_S=$(if $(LIBGCC_S_PATH),-L$(dir $(LIBGCC_S_PATH)) -lgcc_s)\nLIBGCC_A=$(realpath $(lastword $(wildcard $(dir $(LIBGCC_S_PATH))/gcc/*/*/libgcc.a)))\nelse\nLIBGCC_A=$(lastword $(wildcard $(TOOLCHAIN_DIR)/lib/gcc/*/*/libgcc.a))\nLIBGCC_S=$(if $(wildcard $(TOOLCHAIN_DIR)/lib/libgcc_s.so),-L$(TOOLCHAIN_DIR)/lib -lgcc_s,$(LIBGCC_A))\nendif\n\nifeq ($(CONFIG_ARCH_64BIT),y)\n  LIB_SUFFIX:=64\nendif\n\nifndef DUMP\n  ifeq ($(CONFIG_EXTERNAL_TOOLCHAIN),)\n    -include $(TOOLCHAIN_DIR)/info.mk\n    export GCC_HONOUR_COPTS:=0\n    TARGET_CROSS:=$(if $(TARGET_CROSS),$(TARGET_CROSS),$(OPTIMIZE_FOR_CPU)-openwrt-linux$(if $(TARGET_SUFFIX),-$(TARGET_SUFFIX))-)\n    TOOLCHAIN_ROOT_DIR:=$(TOPDIR)/staging_dir/$(TOOLCHAIN_DIR_NAME)\n    TOOLCHAIN_BIN_DIRS:=$(TOOLCHAIN_ROOT_DIR)/bin\n    TOOLCHAIN_INC_DIRS:=$(TOOLCHAIN_ROOT_DIR)/usr/include $(TOOLCHAIN_ROOT_DIR)/include\n    TOOLCHAIN_LIB_DIRS:=$(TOOLCHAIN_ROOT_DIR)/usr/lib $(TOOLCHAIN_ROOT_DIR)/lib\n    TARGET_CFLAGS+= -fhonour-copts\n    ifeq ($(CONFIG_USE_MUSL),y)\n      TOOLCHAIN_INC_DIRS+= $(TOOLCHAIN_DIR)/include/fortify\n    endif\n  else\n    ifeq ($(CONFIG_NATIVE_TOOLCHAIN),)\n      -include $(TOOLCHAIN_DIR)/info.mk\n      TARGET_CROSS:=$(call qstrip,$(CONFIG_TOOLCHAIN_PREFIX))\n      TOOLCHAIN_ROOT_DIR:=$(call qstrip,$(CONFIG_TOOLCHAIN_ROOT))\n      TOOLCHAIN_BIN_DIRS:=$(patsubst ./%,$(TOOLCHAIN_ROOT_DIR)/%,$(call qstrip,$(CONFIG_TOOLCHAIN_BIN_PATH)))\n      TOOLCHAIN_INC_DIRS:=$(patsubst ./%,$(TOOLCHAIN_ROOT_DIR)/%,$(call qstrip,$(CONFIG_TOOLCHAIN_INC_PATH)))\n      TOOLCHAIN_LIB_DIRS:=$(patsubst ./%,$(TOOLCHAIN_ROOT_DIR)/%,$(call qstrip,$(CONFIG_TOOLCHAIN_LIB_PATH)))\n    endif\n  endif\n  ifneq ($(TOOLCHAIN_BIN_DIRS),)\n    TARGET_PATH:=$(subst $(space),:,$(TOOLCHAIN_BIN_DIRS)):$(TARGET_PATH)\n  endif\n  ifneq ($(TOOLCHAIN_INC_DIRS),)\n    TARGET_CPPFLAGS+= $(patsubst %,-I%,$(TOOLCHAIN_INC_DIRS))\n  endif\n  ifneq ($(TOOLCHAIN_LIB_DIRS),)\n    TARGET_LDFLAGS+= $(patsubst %,-L%,$(TOOLCHAIN_LIB_DIRS))\n  endif\nendif\n\nTARGET_LINKER?=bfd\nTARGET_LDFLAGS+= -fuse-ld=$(TARGET_LINKER)\n\nTARGET_PATH_PKG:=$(STAGING_DIR)/host/bin:$(STAGING_DIR_HOSTPKG)/bin:$(TARGET_PATH)\n\nifeq ($(CONFIG_SOFT_FLOAT),y)\n  SOFT_FLOAT_CONFIG_OPTION:=--with-float=soft\n  ifeq ($(CONFIG_arm),y)\n    TARGET_CFLAGS+= -mfloat-abi=soft\n  else\n    TARGET_CFLAGS+= -msoft-float\n  endif\nelse\n  SOFT_FLOAT_CONFIG_OPTION:=\n  ifeq ($(CONFIG_arm),y)\n    TARGET_CFLAGS+= -mfloat-abi=hard\n  endif\nendif\n\nexport ORIG_PATH:=$(if $(ORIG_PATH),$(ORIG_PATH),$(PATH))\nexport PATH:=$(TARGET_PATH)\nexport STAGING_DIR STAGING_DIR_HOST STAGING_DIR_HOSTPKG\nexport SH_FUNC:=. $(INCLUDE_DIR)/shell.sh;\n\nPKG_CONFIG:=$(STAGING_DIR_HOST)/bin/pkg-config\n\nexport PKG_CONFIG\n\nHOSTCC:=$(STAGING_DIR_HOST)/bin/gcc\nHOSTCXX:=$(STAGING_DIR_HOST)/bin/g++\nHOST_CPPFLAGS:=-I$(STAGING_DIR_HOST)/include $(if $(IS_PACKAGE_BUILD),-I$(STAGING_DIR_HOSTPKG)/include -I$(STAGING_DIR)/host/include)\nHOST_CFLAGS:=-O2 $(HOST_CPPFLAGS)\nHOST_CXXFLAGS:=$(HOST_CFLAGS)\nHOST_LDFLAGS:=-L$(STAGING_DIR_HOST)/lib $(if $(IS_PACKAGE_BUILD),-L$(STAGING_DIR_HOSTPKG)/lib -L$(STAGING_DIR)/host/lib)\n\nBUILD_KEY=$(TOPDIR)/key-build\nBUILD_KEY_APK_SEC=$(TOPDIR)/private-key.pem\nBUILD_KEY_APK_PUB=$(TOPDIR)/public-key.pem\n\nFAKEROOT:=$(STAGING_DIR_HOST)/bin/fakeroot\n\nTARGET_AR:=$(TARGET_CROSS)gcc-ar\nTARGET_RANLIB:=$(TARGET_CROSS)gcc-ranlib\nTARGET_NM:=$(TARGET_CROSS)gcc-nm\nTARGET_CC:=$(TARGET_CROSS)gcc\nTARGET_CXX:=$(TARGET_CROSS)g++\nTARGET_LD:=$(TARGET_CROSS)ld.$(TARGET_LINKER)\nKPATCH:=$(SCRIPT_DIR)/patch-kernel.sh\nFILECMD:=$(STAGING_DIR_HOST)/bin/file\nSED:=$(STAGING_DIR_HOST)/bin/sed -i -e\nESED:=$(STAGING_DIR_HOST)/bin/sed -E -i -e\nMKHASH:=$(STAGING_DIR_HOST)/bin/mkhash\n# MKHASH is used in /scripts, so we export it here.\nexport MKHASH\nCP:=cp -fpR\nLN:=ln -sf\nXARGS:=xargs -r\n\nBASH:=bash\nTAR:=tar\nFIND:=find\nPATCH:=patch\nPYTHON:=python3\n\nifeq ($(HOST_OS),Darwin)\n  TRUE:=/usr/bin/env gtrue\n  FALSE:=/usr/bin/env gfalse\nelse\n  TRUE:=/usr/bin/env true\n  FALSE:=/usr/bin/env false\nendif\n\nINSTALL_BIN:=install -m0755\nINSTALL_SUID:=install -m4755\nINSTALL_DIR:=install -d -m0755\nINSTALL_DATA:=install -m0644\nINSTALL_CONF:=install -m0600\n\nTARGET_CC_NOCACHE:=$(TARGET_CC)\nTARGET_CXX_NOCACHE:=$(TARGET_CXX)\nHOSTCC_NOCACHE:=$(HOSTCC)\nHOSTCXX_NOCACHE:=$(HOSTCXX)\nexport TARGET_CC_NOCACHE\nexport TARGET_CXX_NOCACHE\nexport HOSTCC_NOCACHE\nexport HOSTCXX_NOCACHE\n\nifneq ($(CONFIG_CCACHE),)\n  TARGET_CC:= ccache $(TARGET_CC)\n  TARGET_CXX:= ccache $(TARGET_CXX)\n  HOSTCC:= ccache $(HOSTCC)\n  HOSTCXX:= ccache $(HOSTCXX)\n  export CCACHE_NOHASHDIR:=true\n  export CCACHE_NOCOMPRESS:=true\n  export CCACHE_BASEDIR:=$(TOPDIR)\n  export CCACHE_DIR:=$(if $(call qstrip,$(CONFIG_CCACHE_DIR)),$(call qstrip,$(CONFIG_CCACHE_DIR)),$(TOPDIR)/.ccache)\n  export CCACHE_COMPILERCHECK:=%compiler% -v -c\nendif\n\nTARGET_CONFIGURE_OPTS = \\\n  AR=\"$(TARGET_AR)\" \\\n  AS=\"$(TARGET_CC) -c $(TARGET_ASFLAGS)\" \\\n  LD=\"$(TARGET_LD)\" \\\n  NM=\"$(TARGET_NM)\" \\\n  CC=\"$(TARGET_CC)\" \\\n  GCC=\"$(TARGET_CC)\" \\\n  CXX=\"$(TARGET_CXX)\" \\\n  RANLIB=\"$(TARGET_RANLIB)\" \\\n  STRIP=$(TARGET_CROSS)strip \\\n  OBJCOPY=$(TARGET_CROSS)objcopy \\\n  OBJDUMP=$(TARGET_CROSS)objdump \\\n  SIZE=$(TARGET_CROSS)size\n\n# strip an entire directory\nifneq ($(CONFIG_NO_STRIP),)\n  RSTRIP:=:\n  STRIP:=:\nelse\n  ifneq ($(CONFIG_USE_STRIP),)\n    STRIP:=$(TARGET_CROSS)strip $(call qstrip,$(CONFIG_STRIP_ARGS))\n  else\n    ifneq ($(CONFIG_USE_SSTRIP),)\n      STRIP:=$(STAGING_DIR_HOST)/bin/sstrip $(if $(CONFIG_SSTRIP_DISCARD_TRAILING_ZEROES),-z)\n    endif\n  endif\n  RSTRIP= \\\n    export CROSS=\"$(TARGET_CROSS)\" \\\n\t\t$(if $(PKG_BUILD_ID),KEEP_BUILD_ID=1) \\\n\t\t$(if $(CONFIG_KERNEL_KALLSYMS),NO_RENAME=1) \\\n\t\t$(if $(CONFIG_KERNEL_PROFILING),KEEP_SYMBOLS=1); \\\n    NM=\"$(TARGET_CROSS)nm\" \\\n    STRIP=\"$(STRIP)\" \\\n    STRIP_KMOD=\"$(SCRIPT_DIR)/strip-kmod.sh\" \\\n    PATCHELF=\"$(STAGING_DIR_HOST)/bin/patchelf\" \\\n    $(SCRIPT_DIR)/rstrip.sh\nendif\n\nNINJA = \\\n\tMAKEFLAGS=\"$(MAKE_JOBSERVER)\" \\\n\t$(STAGING_DIR_HOST)/bin/ninja \\\n\t\t$(if $(findstring c,$(OPENWRT_VERBOSE)),-v) \\\n\t\t$(if $(MAKE_JOBSERVER),,-j1)\n\nifeq ($(CONFIG_IPV6),y)\n  DISABLE_IPV6:=\nelse\n  DISABLE_IPV6:=--disable-ipv6\nendif\n\nTAR_OPTIONS:=-xf -\n\nifeq ($(CONFIG_BUILD_LOG),y)\n  BUILD_LOG:=1\nendif\n\nexport BISON_PKGDATADIR:=$(STAGING_DIR_HOST)/share/bison\nexport HOST_GNULIB_SRCDIR:=$(STAGING_DIR_HOST)/share/gnulib\nexport M4:=$(STAGING_DIR_HOST)/bin/m4\n\n##@\n# @brief Slugify variable name and prepend suffix.\n##\ndefine shvar\nV_$(subst .,_,$(subst -,_,$(subst /,_,$(1))))\nendef\n\n##@\n# @brief Create and export variable, set to function result.\n#\n# @param 1: Function name. Used as variable name, prepended with `V_`.\n##\ndefine shexport\nexport $(call shvar,$(1))=$$(call $(1))\nendef\n\n##@\n# @brief Support 64 bit tine in C code.\n#\n# Test support for 64-bit time with C code from largefile.m4 provided by GNU Gnulib\n# the value is `y` when successful and `` otherwise\n##\ndefine YEAR_2038\n$(shell \\\n  mkdir -p $(TMP_DIR); \\\n  echo '$(pound) include <time.h>' > $(TMP_DIR)/year2038.c; \\\n  echo '$(pound) define LARGE_TIME_T ((time_t) (((time_t) 1 << 30) - 1 + 3 * ((time_t) 1 << 30)))' >> $(TMP_DIR)/year2038.c; \\\n  echo 'int verify_time_t_range[(LARGE_TIME_T / 65537 == 65535 && LARGE_TIME_T % 65537 == 0) ? 1 : -1];' >> $(TMP_DIR)/year2038.c; \\\n  echo 'int main (void) {return 0;}' >> $(TMP_DIR)/year2038.c; \\\n  $(HOSTCC) $(TMP_DIR)/year2038.c -o /dev/null 2>/dev/null && echo y && rm -f $(TMP_DIR)/year2038.c || rm -f $(TMP_DIR)/year2038.c; \\\n)\nendef\n\n##@\n# @brief Execute commands under flock\n#\n# @param 1: The shell expression.\n# @param 2: The lock name. If not given, the global lock will be used.\n##\nifneq ($(wildcard $(STAGING_DIR_HOST)/bin/flock),)\n  define locked\n\tSHELL= \\\n\tflock \\\n\t\t$(TMP_DIR)/.$(if $(2),$(strip $(2)),global).flock \\\n\t\t-c '$(subst ','\\'',$(1))'\n  endef\nelse\n  locked=$(1)\nendif\n\n\n##@\n# @brief Recursively copy paths into another directory, purge dangling\n# symlinks before.\n#\n# @param 1: File glob expression.\n# @param 1: Destination directory.\n##\ndefine file_copy\n\tfor src_dir in $(sort $(foreach d,$(wildcard $(1)),$(dir $(d)))); do \\\n\t\t( cd $$src_dir; find -type f -or -type d ) | \\\n\t\t\t( cd $(2); while :; do \\\n\t\t\t\tread FILE; \\\n\t\t\t\t[ -z \"$$FILE\" ] && break; \\\n\t\t\t\t[ -L \"$$FILE\" ] || continue; \\\n\t\t\t\techo \"Removing symlink $(2)/$$FILE\"; \\\n\t\t\t\trm -f \"$$FILE\"; \\\n\t\t\tdone; ); \\\n\tdone; \\\n\t$(CP) $(1) $(2)\nendef\n\n##@\n# @brief Calculate sha256sum of any plain file within a given directory.\n#\n# @param 1: Input directory.\n# @param 2: If set, recurse into subdirectories.\n##\ndefine sha256sums\n\t(cd $(1); find . $(if $(2),,-maxdepth 1) -type f -not -name 'sha256sums' -printf \"%P\\n\" | sort | \\\n\t\txargs -r $(MKHASH) -n sha256 | sed -ne 's!^\\(.*\\) \\(.*\\)$$!\\1 *\\2!p' > sha256sums)\nendef\n\n##@\n# @brief Retrieve file extension.\n#\n# @param 1: File name.\n##\next=$(word $(words $(subst ., ,$(1))),$(subst ., ,$(1)))\n\n##@\n# @brief Count Git commits of a package.\n#\n# @param 1: if non-empty: count commits since last \": [uU]pdate to \"\n#           or \": [bB]ump to \" in commit message.\n##\ndefine commitcount\n$(shell \\\n  if git log -1 >/dev/null 2>/dev/null; then \\\n    if [ -n \"$(1)\" ]; then \\\n      last_bump=\"$$(git log --pretty=format:'%h %s' . | \\\n        grep -m 1 -e ': [uU]pdate to ' -e ': [bB]ump to ' | \\\n        cut -f 1 -d ' ')\"; \\\n    fi; \\\n    if [ -n \"$$last_bump\" ]; then \\\n      echo -n $$(($$(git rev-list --count \"$$last_bump..HEAD\" .) + 1)); \\\n    else \\\n      git rev-list --count HEAD .; \\\n    fi; \\\n  else \\\n    secs=\"$$(($(SOURCE_DATE_EPOCH) % 86400))\"; \\\n    date=\"$$(date --utc --date=\"@$(SOURCE_DATE_EPOCH)\" \"+%y%m%d\")\"; \\\n    printf '%s.%05d' \"$$date\" \"$$secs\"; \\\n  fi; \\\n)\nendef\n\n##@\n# @brief Get ABI version string, stripping `-`, `_` and `.`.\n#\n# @param 1: Version string.\n##\nabi_version_str = $(subst -,,$(subst _,,$(subst .,,$(1))))\n\nCOMMITCOUNT = $(if $(DUMP),0,$(call commitcount))\nAUTORELEASE = $(if $(DUMP),0,$(call commitcount,1))\n\nall:\nFORCE: ;\n.PHONY: FORCE\n\ncheck: FORCE\n\t@true\n\nval.%:\n\t@$(if $(filter undefined,$(origin $*)),\\\n\t\techo \"$* undefined\" >&2, \\\n\t\techo '$(subst ','\"'\"',$($*))' \\\n\t)\n\nvar.%:\n\t@$(if $(filter undefined,$(origin $*)),\\\n\t\techo \"$* undefined\" >&2, \\\n\t\techo \"$*='\"'$(subst ','\"'\\\"'\\\"'\"',$($*))'\"'\" \\\n\t)\n\nendif #__rules_inc\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "target",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolchain",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}