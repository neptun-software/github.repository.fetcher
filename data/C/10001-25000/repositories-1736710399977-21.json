{
  "metadata": {
    "timestamp": 1736710399977,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jart/cosmopolitan",
      "stars": 18697,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.466796875,
          "content": "---\nBasedOnStyle: Google\nStatementMacros:\n  - INITIALIZER\nAlignConsecutiveMacros: true\nAlignConsecutiveDeclarations: false\nAlwaysBreakBeforeMultilineStrings: false\nAllowShortFunctionsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nKeepEmptyLinesAtTheStartOfBlocks: true\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nIncludeBlocks: Merge\n---\nLanguage: Cpp\nAllowShortFunctionsOnASingleLine: false\n---\nLanguage: Proto\n...\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 1.087890625,
          "content": "# Run this command to always ignore formatting commits in git blame\n# git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# Upgraded clang-format to 19.0.0git\n89fc95fefd40413706ff1bdaac2e8d98b328dbf1\n# vim c++ filetype in modelines\n04c6bc478e082263d67c41bedbd033dde2d429eb\n# Ran clang-format\nf032b5570b4cd87c6bb4abb54c0b98e69c939955\n# Applied clang-format update to repo\n6e6fc38935054db0534d5af4fb99c6193305b946\n# revert retabbing\n2b315626f3af765cdfbc61114647412cdb798b3a\n# more modeline errata\n3a8e01a77a7c97af0b16fb1651b230cee7f7d4c6\n# fix more vi modelines\n2fc507c98f53a76718f61f9a36602f86b5ac0cc9\n# flip et/noet in modelines\ne16a7d8f3b8f906c3ef76e79f57f3adfc7f25186\n# fix vi modelines\n394d998315f613a888cc6b6c051d4163bdf5cd6f\n# clang-format\nc0eacf2eb1e1c0b3bd4f71f12fef258f5b249c3f\n# ape-m1 formatting cleanup\nda8baf2aa5ce93b958aca90a0ae69f537806324b\n# Run clang-format on most sources\n369f9740de4534c28d0e81ab2afc99decbb9a3e6\n# Get rid of .internal.h convention in LIBC_INTRIN\n86d884cce24d773e298a2714c1e3d91ecab9be45\n# Remove .internal from more header filenames\n31194165d2afca36c2315a6e7ca2f0797dde09e3\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3310546875,
          "content": "# -*- conf -*-\n*.gz                         binary\n*.so                         binary\n*.dll                        binary\n*.dylib                      binary\n/build/bootstrap/*           binary\n/usr/share/terminfo/*        binary\n/usr/share/terminfo/*/*      binary\n/usr/share/zoneinfo/*        binary\n/usr/share/zoneinfo/*/*      binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1982421875,
          "content": "# -*- conf -*-\n\n/o\n/cosmocc\n/.cosmocc\n\n# TODO: Find some way to have Python write to o/\n__pycache__\n\n*.tmp\n/.bochs.log\n/HTAGS\n/TAGS\n/bx_enh_dbg.ini\n/tool/emacs/*.elc\n/perf.data\n/perf.data.old\n/qemu*core\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.60546875,
          "content": "# Contributing Guidelines\n\nWe'd love to accept your patches! Please read this guide first.\n\n## Identity Disclosure\n\nThis project does not accept anonymous contributions. Justine Tunney\nwon't merge pull requests from strangers. In order to change the Cosmo\ncodebase, and have your changes be upstreamed, she has to know who you\nare. You're encouraged to disclose your full name and email address to\nthe public too, by including them in your git commit messages; however\nthat's not a requirement; as we're happy to respect the wishes of\ncontributors who prefer to remain anonymous to the public.\n\n## Copyright Assignment\n\nThe first time you send a pull request, you need to send an email to\nJustine Tunney <jtunney@gmail.com> stating that you intend to assign her\nthe copyright to the changes you contribute to Cosmopolitan. It only\nneeds to happen once. This only applies to the code you *choose* to\ncontribute. The email should be sent from an email address associated\nwith your identity. Your email should link to your pull request.\n\nTo make things easy, here's an example of a good email you can use:\n\n> **From**: YOUR NAME (yname@gmail.com)  \n> **To**: Justine Tunney (jtunney@gmail.com)  \n> **Subject**: Cosmopolitan Copyright Assignment for YOUR NAME\n>\n> Hi Justine,\n>\n> I made my first contribution to Cosmopolitan in\n> https://github.com/jart/cosmopolitan/pull/XXXX could you please take a\n> look? I intend to assign you the copyright to the changes I contribute\n> to Cosmopolitan.\n>\n> Thanks!\n\nPlease note that in order to give Justine the copyright, it has to be\nyours to give in the first place. If you're employed, then you should\nget your employer's approval to do this beforehand. Even with big\ncompanies like Google, this process is quick and painless. Usually we\nsee employers granting authorization in less than one day.\n\nIf you live in a country that doesn't recognize one's ability to assign\ncopyright, then you may alternatively consider disclaiming it using the\nlanguage in [Unlicense](https://unlicense.org) or\n[CC-0](http://creativecommons.org/share-your-work/public-domain/cc0).\n\nIf you're checking-in third party code, then you need to have headers at\nthe top of each source file (but never header files) documenting its\nowners and the code should go in the `third_party/` folder. Every third\nparty project should have a `README.cosmo` file that documents its\nprovenance as well as any local changes you've made.\n\n## Copyright Policy Exceptions\n\n### Tests\n\nYou're encoraged to claim ownership of your test code. If you add a new\nfile under the `test/` directory, then you should put your name in the\nISC license header at the top of the file. If you add new test cases to\nan existing unit test file, then you're encouraged to append a line with\nyour name to the existing copyright header of that file.\n\n### Exceptional Features\n\nLet's say you discovered a faster better way to implement `log10()` and\nyou want to give it to Cosmopolitan. In cases like this, it really isn't\nappropriate for Justine to own your code. What you could do instead, is\nwrite your own new and improved `log10.c` from scratch, put your name on\nthe top with the ISC license, and then add a `__notice()` directive so\nthat your name will be embedded inside every executable that links the\n`log10()` function. This will help you get your name out there. Please\nnote you need get approval from Justine each time you want to do this.\n\n## Style Guide\n\nYou can use clang-format to automatically format your files:\n\n```sh\nclang-format -i -style=file tool/net/redbean.c\n```\n\nIf you use Emacs this can be automated on save for Cosmopolitan using\n[tool/emacs/cosmo-format.el](tool/emacs/cosmo-format.el).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.7412109375,
          "content": "ISC License\n\nCopyright 2020 Justine Alexandra Roberts Tunney\n\nPermission to use, copy, modify, and/or distribute this software for\nany purpose with or without fee is hereby granted, provided that the\nabove copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE\nAUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL\nDAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR\nPROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 18.609375,
          "content": "#-*-mode:makefile-gmake;indent-tabs-mode:t;tab-width:8;coding:utf-8-*-┐\n#── vi: set et ft=make ts=8 sw=8 fenc=utf-8 :vi ──────────────────────┘\n#\n# SYNOPSIS\n#\n#   Freestanding Hermetically-Sealed Monolithic Repository\n#\n# REQUIREMENTS\n#\n#   You can run your programs on any operating system, but you have\n#   to build them on Linux 2.6+ (or WSL) using GNU Make. A modern C\n#   compiler that's statically-linked comes included as a courtesy.\n#\n# EXAMPLES\n#\n#   # build and run everything\n#   make -j8 -O\n#   make -j8 -O MODE=dbg\n#   make -j8 -O MODE=opt\n#   make -j8 -O MODE=rel\n#   make -j8 -O MODE=tiny\n#\n#   # build individual target\n#   make -j8 -O o//examples/hello\n#   o//examples/hello\n#\n#   # view source\n#   less examples/hello.c\n#\n#   # view binary\n#   o//tool/viz/bing o//examples/hello |\n#     o//tool/viz/fold\n#\n#   # view transitive closure of legalese\n#   o//tool/viz/bing -n o//examples/hello |\n#     o//tool/viz/fold\n#\n#   # basic debugging\n#   make -j8 -O MODE=dbg o/dbg/examples/crashreport\n#   o/examples/crashreport\n#   less examples/crashreport.c\n#\n#   # extremely tiny binaries\n#   make -j8 -O MODE=tiny\t\t\t\t\\\n#               LDFLAGS+=-s\t\t\t\t\\\n#               CPPFLAGS+=-DIM_FEELING_NAUGHTY\t        \\\n#               CPPFLAGS+=-DSUPPORT_VECTOR=0b00000001\t\\\n#               o/tiny/examples/hello4.elf\n#   ls -hal o/tiny/examples/hello4.elf\n#   o/tiny/examples/hello4.elf\n#\n# TROUBLESHOOTING\n#\n#   make -j8 -O V=1 o//examples/hello\n#   make o//examples/life.elf -pn |& less\n#   etc.\n#\n# SEE ALSO\n#\n#   build/config.mk\n\nSHELL      = build/bootstrap/cocmd\nMAKEFLAGS += --no-builtin-rules\n\n.SUFFIXES:\n.DELETE_ON_ERROR:\n.FEATURES: output-sync\n.PHONY: all o bins check test depend tags aarch64 clean\n\nifneq ($(m),)\nifeq ($(MODE),)\nMODE := $(m)\nendif\nendif\n\nCOMMA := ,\nPWD := $(shell pwd)\n\n# detect wsl2 running cosmopolitan binaries on the host by checking whether:\n# - user ran .cosmocc/current/bin/make, in which case make's working directory\n#   is in wsl\n# - user ran make, in which case cocmd's working directory is in wsl\nifneq ($(findstring //wsl.localhost/,$(CURDIR) $(PWD)),)\n$(warning wsl2 interop is enabled)\n$(error you need to run sudo sh -c 'echo -1 > /proc/sys/fs/binfmt_misc/WSLInterop')\nendif\n\nUNAME_M := $(shell uname -m)\nUNAME_S := $(shell uname -s)\n\n# apple still distributes a 17 year old version of gnu make\nifeq ($(MAKE_VERSION), 3.81)\n$(error please use https://cosmo.zip/pub/cosmos/bin/make)\nendif\n\nLC_ALL = C\nSOURCE_DATE_EPOCH = 0\n\nARFLAGS = rcsD\nZFLAGS ?=\nXARGS ?= xargs -P4 -rs8000\nDOT ?= dot\nCLANG = clang\nTMPDIR = o/tmp\nAR = $(BOOTSTRAP)/ar.ape\nCP = $(BOOTSTRAP)/cp.ape\nRM = $(BOOTSTRAP)/rm.ape -f\nGZIP = $(BOOTSTRAP)/gzip.ape\nECHO = $(BOOTSTRAP)/echo.ape\nCHMOD = $(BOOTSTRAP)/chmod.ape\nTOUCH = $(BOOTSTRAP)/touch.ape\nPKG = $(BOOTSTRAP)/package.ape\nMKDEPS = $(BOOTSTRAP)/mkdeps\nZIPOBJ = $(BOOTSTRAP)/zipobj\nZIPCOPY = $(BOOTSTRAP)/zipcopy\nPECHECK = $(BOOTSTRAP)/pecheck\nFIXUPOBJ = $(BOOTSTRAP)/fixupobj\nOBJBINCOPY = $(BOOTSTRAP)/objbincopy\nMKDIR = $(BOOTSTRAP)/mkdir.ape -p\nCOMPILE = $(BOOTSTRAP)/compile.ape -V9 -M2048m -P8192 $(QUOTA)\n\n# the default build modes is empty string\n# on x86_64 hosts, MODE= is the same as MODE=x86_64\n# on aarch64 hosts, MODE= is changed to MODE=aarch64\nifeq ($(MODE),)\nifeq ($(UNAME_M),arm64)\nMODE := aarch64\nendif\nifeq ($(UNAME_M),aarch64)\nMODE := aarch64\nendif\nendif\n\nifneq ($(findstring aarch64,$(MODE)),)\nARCH = aarch64\nHOSTS ?= pi pi5 studio freebsdarm\nelse\nARCH = x86_64\nHOSTS ?= freebsd rhel7 xnu openbsd netbsd win10 luna\nendif\n\nZIPOBJ_FLAGS += -a$(ARCH)\n\nexport ADDR2LINE\nexport LC_ALL\nexport MKDIR\nexport MODE\nexport SOURCE_DATE_EPOCH\nexport TMPDIR\n\nCOSMOCC = .cosmocc/3.9.2\nBOOTSTRAP = $(COSMOCC)/bin\nTOOLCHAIN = $(COSMOCC)/bin/$(ARCH)-linux-cosmo-\nDOWNLOAD := $(shell build/download-cosmocc.sh $(COSMOCC) 3.9.2 f4ff13af65fcd309f3f1cfd04275996fb7f72a4897726628a8c9cf732e850193)\n\nIGNORE := $(shell $(MKDIR) $(TMPDIR))\n\nAS = $(TOOLCHAIN)as\nCC = $(TOOLCHAIN)gcc\nCXX = $(TOOLCHAIN)g++\nCXXFILT = $(TOOLCHAIN)c++filt\nLD = $(TOOLCHAIN)ld.bfd\nNM = $(TOOLCHAIN)nm\nGCC = $(TOOLCHAIN)gcc\nSTRIP = $(TOOLCHAIN)strip\nOBJCOPY = $(TOOLCHAIN)objcopy\nOBJDUMP = $(TOOLCHAIN)objdump\nifneq ($(wildcard $(PWD)/$(TOOLCHAIN)addr2line),)\nADDR2LINE = $(PWD)/$(TOOLCHAIN)addr2line\nelse\nADDR2LINE = $(TOOLCHAIN)addr2line\nendif\n\n# primary build rules\nall:\to\no:\to/$(MODE)\no/$(MODE):\t\t\t\\\n\to/$(MODE)/ape\t\t\\\n\to/$(MODE)/ctl\t\t\\\n\to/$(MODE)/dsp\t\t\\\n\to/$(MODE)/net\t\t\\\n\to/$(MODE)/libc\t\t\\\n\to/$(MODE)/test\t\t\\\n\to/$(MODE)/tool\t\t\\\n\to/$(MODE)/examples\t\\\n\to/$(MODE)/third_party\n\n# TODO(jart): Make Emacs `C-c C-c` shortcut not need this.\n.PHONY: o/$(MODE)/ o/$(MODE)/.\no/$(MODE)/: o/$(MODE)\no/$(MODE)/.: o/$(MODE)\n\n# check if we're using o//third_party/make/make\n# we added sandboxing to guarantee cosmo's makefile is hermetic\n# it also shaves away 200ms of startup latency with native $(uniq)\nifneq ($(LANDLOCKMAKE_VERSION),)\nifeq ($(UNAME_S),Linux)\nifeq ($(wildcard /usr/bin/ape),)\n$(warning please run ape/apeinstall.sh if you intend to use landlock make)\n$(shell sleep .5)\nendif\nendif\nifneq ($(TOOLCHAIN),)\n.STRICT = 1\nendif\nendif\n\n.PLEDGE += stdio rpath wpath cpath fattr proc\n.UNVEIL +=\t\t\t\t\t\\\n\tlibc/integral\t\t\t\t\\\n\tlibc/stdbool.h\t\t\t\t\\\n\trwc:/dev/shm\t\t\t\t\\\n\trx:.cosmocc\t\t\t\t\\\n\trx:build/bootstrap\t\t\t\\\n\tr:build/portcosmo.h\t\t\t\\\n\t/proc/stat\t\t\t\t\\\n\trw:/dev/null\t\t\t\t\\\n\trw:/dev/full\t\t\t\t\\\n\tw:o/stack.log\t\t\t\t\\\n\t/etc/hosts\t\t\t\t\\\n\t~/.runit.psk\t\t\t\t\\\n\t/proc/self/status\t\t\t\\\n\trx:/usr/bin/qemu-aarch64\t\t\\\n\trx:o/third_party/qemu/qemu-aarch64\t\\\n\t/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n\nPKGS =\n\n-include ~/.cosmo.mk\ninclude build/functions.mk\t\t\t#─┐\ninclude build/definitions.mk\t\t\t# ├──META\ninclude build/config.mk\t\t\t\t# │  You can build\ninclude build/rules.mk\t\t\t\t# │  You can topologically order\ninclude build/online.mk\t\t\t\t#─┘\ninclude libc/nexgen32e/BUILD.mk\t\t\t#─┐\ninclude libc/sysv/BUILD.mk\t\t\t# ├──SYSTEM SUPPORT\ninclude libc/nt/BUILD.mk\t\t\t# │  You can do math\ninclude libc/intrin/BUILD.mk\t\t\t# │  You can use the stack\ninclude third_party/compiler_rt/BUILD.mk\t# │  You can manipulate arrays\ninclude libc/tinymath/BUILD.mk\t\t\t# │  You can issue raw system calls\ninclude libc/str/BUILD.mk\t\t\t# │\ninclude third_party/xed/BUILD.mk\t\t# │\ninclude third_party/puff/BUILD.mk\t\t# │\ninclude libc/elf/BUILD.mk\t\t\t# │\ninclude ape/BUILD.mk\t\t\t\t# │\ninclude libc/fmt/BUILD.mk\t\t\t# │\ninclude libc/vga/BUILD.mk\t\t\t# │\ninclude libc/irq/BUILD.mk\t\t\t#─┘\ninclude libc/calls/BUILD.mk\t\t\t#─┐\ninclude libc/irq/BUILD.mk\t\t\t# ├──SYSTEMS RUNTIME\ninclude third_party/nsync/BUILD.mk\t\t# │  You can issue system calls\ninclude libc/runtime/BUILD.mk\t\t\t# │\ninclude libc/crt/BUILD.mk\t\t\t# │\ninclude third_party/dlmalloc/BUILD.mk\t\t#─┘\ninclude libc/mem/BUILD.mk\t\t\t#─┐\ninclude third_party/gdtoa/BUILD.mk\t\t# ├──DYNAMIC RUNTIME\ninclude third_party/nsync/mem/BUILD.mk\t\t# │  You can now use stdio\ninclude libc/proc/BUILD.mk\t\t\t# │  You can now use threads\ninclude libc/dlopen/BUILD.mk\t\t\t# │  You can now use processes\ninclude libc/thread/BUILD.mk\t\t\t# │  You can finally call malloc()\ninclude third_party/zlib/BUILD.mk\t\t# │\ninclude libc/stdio/BUILD.mk\t\t\t# │\ninclude tool/hello/BUILD.mk\t\t\t# │\ninclude third_party/tz/BUILD.mk\t\t\t# │\ninclude net/BUILD.mk\t\t\t\t# │\ninclude third_party/vqsort/BUILD.mk\t\t# │\ninclude libc/log/BUILD.mk\t\t\t# │\ninclude third_party/getopt/BUILD.mk\t\t# │\ninclude third_party/bzip2/BUILD.mk\t\t# │\ninclude dsp/core/BUILD.mk\t\t\t# │\ninclude third_party/zlib/gz/BUILD.mk\t\t# │\ninclude third_party/intel/BUILD.mk\t\t# │\ninclude third_party/aarch64/BUILD.mk\t\t# │\ninclude libc/BUILD.mk\t\t\t\t#─┘\ninclude libc/sock/BUILD.mk\t\t\t#─┐\ninclude net/http/BUILD.mk\t\t\t# ├──ONLINE RUNTIME\ninclude third_party/musl/BUILD.mk\t\t# │  You can communicate with the network\ninclude third_party/regex/BUILD.mk\t\t# │\ninclude third_party/tr/BUILD.mk\t\t\t# │\ninclude third_party/sed/BUILD.mk\t\t# │\ninclude libc/system/BUILD.mk\t\t\t# │\ninclude libc/x/BUILD.mk\t\t\t\t# │\ninclude dsp/scale/BUILD.mk\t\t\t# │\ninclude dsp/mpeg/BUILD.mk\t\t\t# │\ninclude dsp/tty/BUILD.mk\t\t\t# │\ninclude dsp/audio/BUILD.mk\t\t\t# │\ninclude dsp/prog/BUILD.mk\t\t\t# │\ninclude dsp/BUILD.mk\t\t\t\t# │\ninclude third_party/stb/BUILD.mk\t\t# │\ninclude third_party/mbedtls/BUILD.mk\t\t# │\ninclude third_party/ncurses/BUILD.mk\t\t# │\ninclude third_party/readline/BUILD.mk\t\t# │\ninclude third_party/libunwind/BUILD.mk\t\t# |\ninclude third_party/libcxxabi/BUILD.mk\t\t# |\ninclude third_party/double-conversion/BUILD.mk\t# │\ninclude ctl/BUILD.mk\t\t\t\t# │\ninclude third_party/libcxx/BUILD.mk\t\t# │\ninclude third_party/openmp/BUILD.mk\t\t# │\ninclude third_party/pcre/BUILD.mk\t\t# │\ninclude third_party/less/BUILD.mk\t\t# │\ninclude net/https/BUILD.mk\t\t\t#─┘\ninclude third_party/tidy/BUILD.mk\ninclude third_party/BUILD.mk\ninclude third_party/nsync/testing/BUILD.mk\ninclude libc/testlib/BUILD.mk\ninclude tool/viz/lib/BUILD.mk\ninclude tool/args/BUILD.mk\ninclude test/math/BUILD.mk\ninclude test/posix/BUILD.mk\ninclude test/ctl/BUILD.mk\ninclude test/libcxx/BUILD.mk\ninclude test/tool/args/BUILD.mk\ninclude third_party/linenoise/BUILD.mk\ninclude third_party/maxmind/BUILD.mk\ninclude net/finger/BUILD.mk\ninclude third_party/double-conversion/test/BUILD.mk\ninclude third_party/lua/BUILD.mk\ninclude third_party/tree/BUILD.mk\ninclude third_party/zstd/BUILD.mk\ninclude third_party/awk/BUILD.mk\ninclude third_party/hiredis/BUILD.mk\ninclude third_party/make/BUILD.mk\ninclude third_party/ctags/BUILD.mk\ninclude third_party/finger/BUILD.mk\ninclude third_party/argon2/BUILD.mk\ninclude third_party/smallz4/BUILD.mk\ninclude third_party/sqlite3/BUILD.mk\ninclude third_party/mbedtls/test/BUILD.mk\ninclude third_party/lz4cli/BUILD.mk\ninclude third_party/zip/BUILD.mk\ninclude third_party/xxhash/BUILD.mk\ninclude third_party/unzip/BUILD.mk\ninclude tool/build/lib/BUILD.mk\ninclude third_party/chibicc/BUILD.mk\ninclude third_party/chibicc/test/BUILD.mk\ninclude third_party/python/BUILD.mk\ninclude tool/build/BUILD.mk\ninclude tool/curl/BUILD.mk\ninclude third_party/qemu/BUILD.mk\ninclude third_party/libcxxabi/test/BUILD.mk\ninclude examples/BUILD.mk\ninclude examples/pyapp/BUILD.mk\ninclude examples/pylife/BUILD.mk\ninclude tool/decode/lib/BUILD.mk\ninclude tool/decode/BUILD.mk\ninclude tool/lambda/lib/BUILD.mk\ninclude tool/lambda/BUILD.mk\ninclude tool/plinko/lib/BUILD.mk\ninclude tool/plinko/BUILD.mk\ninclude test/tool/plinko/BUILD.mk\ninclude tool/net/BUILD.mk\ninclude tool/viz/BUILD.mk\ninclude tool/BUILD.mk\ninclude net/turfwar/BUILD.mk\ninclude test/libc/tinymath/BUILD.mk\ninclude test/libc/intrin/BUILD.mk\ninclude test/libc/mem/BUILD.mk\ninclude test/libc/nexgen32e/BUILD.mk\ninclude test/libc/runtime/BUILD.mk\ninclude test/libc/thread/BUILD.mk\ninclude test/libc/sock/BUILD.mk\ninclude test/libc/str/BUILD.mk\ninclude test/libc/log/BUILD.mk\ninclude test/libc/str/BUILD.mk\ninclude test/libc/calls/BUILD.mk\ninclude test/libc/x/BUILD.mk\ninclude test/libc/xed/BUILD.mk\ninclude test/libc/fmt/BUILD.mk\ninclude test/libc/time/BUILD.mk\ninclude test/libc/proc/BUILD.mk\ninclude test/libc/stdio/BUILD.mk\ninclude test/libc/system/BUILD.mk\ninclude test/libc/BUILD.mk\ninclude test/net/http/BUILD.mk\ninclude test/net/https/BUILD.mk\ninclude test/net/finger/BUILD.mk\ninclude test/net/BUILD.mk\ninclude test/tool/build/lib/BUILD.mk\ninclude test/tool/build/BUILD.mk\ninclude test/tool/viz/lib/BUILD.mk\ninclude test/tool/viz/BUILD.mk\ninclude test/tool/net/BUILD.mk\ninclude test/tool/BUILD.mk\ninclude test/dsp/core/BUILD.mk\ninclude test/dsp/scale/BUILD.mk\ninclude test/dsp/tty/BUILD.mk\ninclude test/dsp/BUILD.mk\ninclude examples/package/lib/BUILD.mk\ninclude examples/package/BUILD.mk\n#-φ-examples/package/new.sh\ninclude test/BUILD.mk\n\nOBJS\t = $(foreach x,$(PKGS),$($(x)_OBJS))\nSRCS\t:= $(foreach x,$(PKGS),$($(x)_SRCS))\nHDRS\t:= $(foreach x,$(PKGS),$($(x)_HDRS))\nINCS\t = $(foreach x,$(PKGS),$($(x)_INCS))\nBINS\t = $(foreach x,$(PKGS),$($(x)_BINS))\nTESTS\t = $(foreach x,$(PKGS),$($(x)_TESTS))\nCHECKS\t = $(foreach x,$(PKGS),$($(x)_CHECKS))\n\nbins:\t$(BINS)\ncheck:\t$(CHECKS)\ntest:\t$(TESTS)\ndepend:\to/$(MODE)/depend\ntags:\tTAGS HTAGS\n\no/$(MODE)/.x:\n\t@$(COMPILE) -AMKDIR -tT$@ $(MKDIR) $(@D)\n\no/$(MODE)/srcs.txt: o/$(MODE)/.x $(MAKEFILES) $(call uniq,$(foreach x,$(SRCS),$(dir $(x)))) $(SRCS)\n\t$(file >$@,$(SRCS))\no/$(MODE)/hdrs.txt: o/$(MODE)/.x $(MAKEFILES) $(call uniq,$(foreach x,$(HDRS) $(INCS),$(dir $(x)))) $(HDRS) $(INCS)\n\t$(file >$@,$(HDRS) $(INCS))\no/$(MODE)/incs.txt: o/$(MODE)/.x $(MAKEFILES) $(call uniq,$(foreach x,$(INCS) $(INCS),$(dir $(x)))) $(INCS) $(INCS)\n\t$(file >$@,$(INCS))\no/$(MODE)/depend: o/$(MODE)/.x o/$(MODE)/srcs.txt o/$(MODE)/hdrs.txt o/$(MODE)/incs.txt $(SRCS) $(HDRS) $(INCS)\n\t$(COMPILE) -AMKDEPS -L320 $(MKDEPS) -o $@ -s -r o/$(MODE)/ @o/$(MODE)/srcs.txt @o/$(MODE)/hdrs.txt @o/$(MODE)/incs.txt\n\no/$(MODE)/srcs-old.txt: o/$(MODE)/.x $(MAKEFILES) $(call uniq,$(foreach x,$(SRCS),$(dir $(x))))\n\t$(file >$@) $(foreach x,$(SRCS),$(file >>$@,$(x)))\no/$(MODE)/hdrs-old.txt: o/$(MODE)/.x $(MAKEFILES) $(call uniq,$(foreach x,$(HDRS) $(INCS),$(dir $(x))))\n\t$(file >$@) $(foreach x,$(HDRS) $(INCS),$(file >>$@,$(x)))\n\nTAGS: private .UNSANDBOXED = 1\nTAGS:\to/$(MODE)/srcs-old.txt $(SRCS) #o/$(MODE)/third_party/ctags/ctags\n\t@$(RM) $@\n\t@o/$(MODE)/third_party/ctags/ctags $(TAGSFLAGS) -L $< -o $@\n\nHTAGS: private .UNSANDBOXED = 1\nHTAGS:\to/$(MODE)/hdrs-old.txt $(filter-out third_party/libcxx/%,$(HDRS)) #o/$(MODE)/third_party/ctags/ctags\n\t@$(RM) $@\n\t@build/htags o/$(MODE)/third_party/ctags/ctags -L $< -o $@\n\nloc: private .UNSANDBOXED = 1\nloc: o/$(MODE)/tool/build/summy\n\tfind -name \\*.h -or -name \\*.hpp -or -name \\*.c -or -name \\*.cc -or -name \\*.cpp -or -name \\*.S -or -name \\*.mk | \\\n\t$(XARGS) wc -l | grep total | awk '{print $$1}' | $<\n\nCOSMOPOLITAN =\t\t\t\t\\\n\tCTL\t\t\t\t\\\n\tDSP_AUDIO\t\t\t\\\n\tLIBC_CALLS\t\t\t\\\n\tLIBC_DLOPEN\t\t\t\\\n\tLIBC_ELF\t\t\t\\\n\tLIBC_FMT\t\t\t\\\n\tLIBC_INTRIN\t\t\t\\\n\tLIBC_IRQ\t\t\t\\\n\tLIBC_LOG\t\t\t\\\n\tLIBC_MEM\t\t\t\\\n\tLIBC_NEXGEN32E\t\t\t\\\n\tLIBC_NT_ADVAPI32\t\t\\\n\tLIBC_NT_BCRYPTPRIMITIVES\t\\\n\tLIBC_NT_COMDLG32\t\t\\\n\tLIBC_NT_GDI32\t\t\t\\\n\tLIBC_NT_IPHLPAPI\t\t\\\n\tLIBC_NT_KERNEL32\t\t\\\n\tLIBC_NT_NTDLL\t\t\t\\\n\tLIBC_NT_PDH\t\t\t\\\n\tLIBC_NT_POWRPROF\t\t\\\n\tLIBC_NT_PSAPI\t\t\t\\\n\tLIBC_NT_REALTIME\t\t\\\n\tLIBC_NT_SHELL32\t\t\t\\\n\tLIBC_NT_SYNCHRONIZATION\t\t\\\n\tLIBC_NT_USER32\t\t\t\\\n\tLIBC_NT_WS2_32\t\t\t\\\n\tLIBC_PROC\t\t\t\\\n\tLIBC_RUNTIME\t\t\t\\\n\tLIBC_SOCK\t\t\t\\\n\tLIBC_STDIO\t\t\t\\\n\tLIBC_STR\t\t\t\\\n\tLIBC_SYSTEM\t\t\t\\\n\tLIBC_SYSV\t\t\t\\\n\tLIBC_SYSV_CALLS\t\t\t\\\n\tLIBC_THREAD\t\t\t\\\n\tLIBC_TINYMATH\t\t\t\\\n\tLIBC_VGA\t\t\t\\\n\tLIBC_X\t\t\t\t\\\n\tNET_HTTP\t\t\t\\\n\tTHIRD_PARTY_COMPILER_RT\t\t\\\n\tTHIRD_PARTY_DLMALLOC\t\t\\\n\tTHIRD_PARTY_DOUBLECONVERSION\t\\\n\tTHIRD_PARTY_GDTOA\t\t\\\n\tTHIRD_PARTY_GETOPT\t\t\\\n\tTHIRD_PARTY_LIBCXXABI\t\t\\\n\tTHIRD_PARTY_LIBUNWIND\t\t\\\n\tTHIRD_PARTY_MUSL\t\t\\\n\tTHIRD_PARTY_NSYNC\t\t\\\n\tTHIRD_PARTY_NSYNC_MEM\t\t\\\n\tTHIRD_PARTY_OPENMP\t\t\\\n\tTHIRD_PARTY_PUFF\t\t\\\n\tTHIRD_PARTY_REGEX\t\t\\\n\tTHIRD_PARTY_TZ\t\t\t\\\n\tTHIRD_PARTY_XED\t\t\t\\\n\tTHIRD_PARTY_ZLIB\t\t\\\n\tTHIRD_PARTY_ZLIB_GZ\t\t\\\n\tTOOL_ARGS\t\t\t\\\n\nCOSMOPOLITAN_H_PKGS =\t\t\t\\\n\tAPE\t\t\t\t\\\n\tDSP_AUDIO\t\t\t\\\n\tLIBC\t\t\t\t\\\n\tLIBC_CALLS\t\t\t\\\n\tLIBC_ELF\t\t\t\\\n\tLIBC_FMT\t\t\t\\\n\tLIBC_DLOPEN\t\t\t\\\n\tLIBC_INTRIN\t\t\t\\\n\tLIBC_LOG\t\t\t\\\n\tLIBC_MEM\t\t\t\\\n\tLIBC_NEXGEN32E\t\t\t\\\n\tLIBC_NT\t\t\t\t\\\n\tLIBC_RUNTIME\t\t\t\\\n\tLIBC_SOCK\t\t\t\\\n\tLIBC_STDIO\t\t\t\\\n\tLIBC_PROC\t\t\t\\\n\tTHIRD_PARTY_NSYNC\t\t\\\n\tTHIRD_PARTY_XED\t\t\t\\\n\tLIBC_STR\t\t\t\\\n\tLIBC_SYSV\t\t\t\\\n\tLIBC_THREAD\t\t\t\\\n\tLIBC_TINYMATH\t\t\t\\\n\tLIBC_X\t\t\t\t\\\n\tLIBC_VGA\t\t\t\\\n\tNET_HTTP\t\t\t\\\n\tTOOL_ARGS\t\t\t\\\n\tTHIRD_PARTY_DLMALLOC\t\t\\\n\tTHIRD_PARTY_GDTOA\t\t\\\n\tTHIRD_PARTY_GETOPT\t\t\\\n\tTHIRD_PARTY_MUSL\t\t\\\n\tTHIRD_PARTY_ZLIB\t\t\\\n\tTHIRD_PARTY_ZLIB_GZ\t\t\\\n\tTHIRD_PARTY_REGEX\n\nCOSMOCC_PKGS =\t\t\t\t\\\n\t$(COSMOPOLITAN_H_PKGS)\t\t\\\n\tCTL\t\t\t\t\\\n\tTHIRD_PARTY_AARCH64\t\t\\\n\tTHIRD_PARTY_LIBCXX\t\t\\\n\tTHIRD_PARTY_LIBCXXABI\t\t\\\n\tTHIRD_PARTY_LIBUNWIND\t\t\\\n\tTHIRD_PARTY_OPENMP\t\t\\\n\tTHIRD_PARTY_INTEL\n\no/$(MODE)/cosmopolitan.a:\t\t\\\n\t\t$(call reverse,$(call uniq,$(foreach x,$(COSMOPOLITAN),$($(x)))))\n\nCOSMOCC_HDRS =\t\t\t\t\t\t\t\t\\\n\t$(wildcard libc/integral/*)\t\t\t\t\t\\\n\t$(foreach x,$(COSMOCC_PKGS),$($(x)_HDRS))\t\t\t\\\n\t$(foreach x,$(COSMOCC_PKGS),$($(x)_INCS))\n\no/cosmocc.h.txt: Makefile libc $(MAKEFILES) $(call uniq,$(foreach x,$(HDRS) $(INCS),$(dir $(x)))) $(HDRS) $(INCS)\n\t$(file >$@, $(call uniq,$(COSMOCC_HDRS)))\n\nCOSMOPOLITAN_H_ROOT_HDRS =\t\t\t\t\t\t\\\n\tlibc/integral/normalize.inc\t\t\t\t\t\\\n\t$(foreach x,$(COSMOPOLITAN_H_PKGS),$($(x)_HDRS))\n\no/cosmopolitan.html: private .UNSANDBOXED = 1\no/cosmopolitan.html:\t\t\t\t\t\t\t\\\n\t\to/$(MODE)/third_party/chibicc/chibicc.dbg\t\t\\\n\t\t$(filter-out %.s,$(foreach x,$(COSMOPOLITAN_OBJECTS),$($(x)_SRCS)))\t\\\n\t\t$(filter-out %.cpp,$(filter-out %.cc,$(SRCS)))\t\t\t\t\\\n\t\t$(HDRS)\n\t$(file >$(TMPDIR)/$(subst /,_,$@),$(filter-out %.cpp,$(filter-out %.cc,$(filter-out %.s,$(foreach x,$(COSMOPOLITAN_OBJECTS),$($(x)_SRCS))))))\n\to/$(MODE)/third_party/chibicc/chibicc.dbg -J\t\t\\\n\t\t-fno-common -include libc/integral/normalize.inc -o $@\t\\\n\t\t-DCOSMO @$(TMPDIR)/$(subst /,_,$@)\n\n$(SRCS):\t\t\t\t\t\\\n\tlibc/integral/normalize.inc\t\t\\\n\tlibc/integral/c.inc\t\t\t\\\n\tlibc/integral/cxx.inc\t\t\t\\\n\tlibc/integral/cxxtypescompat.inc\t\\\n\tlibc/integral/lp64arg.inc\t\t\\\n\tlibc/integral/lp64.inc\n\nifeq ($(ARCH), x86_64)\nTOOLCHAIN_ARTIFACTS =\t\t\t\t\\\n\to/$(MODE)/ape/ape.lds\t\t\t\\\n\to/$(MODE)/libc/crt/crt.o\t\t\\\n\to/$(MODE)/ape/ape.elf\t\t\t\\\n\to/$(MODE)/ape/ape.o\t\t\t\\\n\to/$(MODE)/ape/ape-copy-self.o\t\t\\\n\to/$(MODE)/ape/ape-no-modify-self.o\t\\\n\to/$(MODE)/cosmopolitan.a\t\t\\\n\to/$(MODE)/third_party/libcxx/libcxx.a\t\\\n\to/$(MODE)/tool/build/march-native\t\\\n\to/$(MODE)/tool/build/ar\t\t\t\\\n\to/$(MODE)/tool/build/mktemper\t\t\\\n\to/$(MODE)/tool/build/fixupobj\t\t\\\n\to/$(MODE)/tool/build/zipcopy\t\t\\\n\to/$(MODE)/tool/build/apelink\t\t\\\n\to/$(MODE)/tool/build/pecheck\nelse\nTOOLCHAIN_ARTIFACTS =\t\t\t\t\\\n\to/$(MODE)/ape/ape.elf\t\t\t\\\n\to/$(MODE)/ape/aarch64.lds\t\t\\\n\to/$(MODE)/libc/crt/crt.o\t\t\\\n\to/$(MODE)/cosmopolitan.a\t\t\\\n\to/$(MODE)/third_party/libcxx/libcxx.a\t\\\n\to/$(MODE)/tool/build/march-native\t\\\n\to/$(MODE)/tool/build/fixupobj\t\t\\\n\to/$(MODE)/tool/build/zipcopy\nendif\n\n.PHONY: toolchain\ntoolchain: $(TOOLCHAIN_ARTIFACTS)\n\n.PHONY: clean_toolchain\nclean_toolchain:\n\t$(RM) $(TOOLCHAIN_ARTIFACTS)\n\naarch64: private .INTERNET = true\naarch64: private .UNSANDBOXED = true\naarch64:\n\t$(MAKE) m=aarch64\n\nclean:\n\t$(RM) -r o\n\n# UNSPECIFIED PREREQUISITES TUTORIAL\n#\n# A build rule must exist for all files that make needs to consider in\n# order to build the requested goal. That includes input source files,\n# even if the rule is empty and does nothing. Otherwise, the .DEFAULT\n# rule gets triggered.\n#\n# This is a normal and neecssary behavior when source files get deleted.\n# The build reacts automatically to this happening, by simply deleting\n# and regenerating the dependency graph; so we can safely use wildcard.\n#\n# This is abnormal if it needs to keep doing that repeatedly. That can\n# only mean the build config is broken.\n#\n# Also note that a suboptimal in-between state may exist, where running\n# `make -pn` reveals rules being generated with the .DEFAULT target, but\n# never get executed since they're not members of the transitive closure\n# of `make all`. In that case the build config could be improved.\n%.mk:\n~/.cosmo.mk:\n$(SRCS):\n$(HDRS):\n$(INCS):\n.DEFAULT:\n\t@$(ECHO)\n\t@$(ECHO) NOTE: deleting o/$(MODE)/depend because of an unspecified prerequisite: $@\n\t@$(ECHO)\n\t$(RM) o/$(MODE)/depend\n\n-include o/$(MODE)/depend\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.548828125,
          "content": "![Cosmopolitan Honeybadger](usr/share/img/honeybadger.png)\n\n[![build](https://github.com/jart/cosmopolitan/actions/workflows/build.yml/badge.svg)](https://github.com/jart/cosmopolitan/actions/workflows/build.yml)\n# Cosmopolitan\n\n[Cosmopolitan Libc](https://justine.lol/cosmopolitan/index.html) makes C\na build-once run-anywhere language, like Java, except it doesn't need an\ninterpreter or virtual machine. Instead, it reconfigures stock GCC and\nClang to output a POSIX-approved polyglot format that runs natively on\nLinux + Mac + Windows + FreeBSD + OpenBSD 7.3 + NetBSD + BIOS with the\nbest possible performance and the tiniest footprint imaginable.\n\n## Background\n\nFor an introduction to this project, please read the [actually portable\nexecutable](https://justine.lol/ape.html) blog post and [cosmopolitan\nlibc](https://justine.lol/cosmopolitan/index.html) website. We also have\n[API\ndocumentation](https://justine.lol/cosmopolitan/documentation.html).\n\n## Getting Started\n\nYou can start by obtaining a release of our `cosmocc` compiler from\n<https://cosmo.zip/pub/cosmocc/>.\n\n```sh\nmkdir -p cosmocc\ncd cosmocc\nwget https://cosmo.zip/pub/cosmocc/cosmocc.zip\nunzip cosmocc.zip\n```\n\nHere's an example program we can write:\n\n```c\n// hello.c\n#include <stdio.h>\n\nint main() {\n  printf(\"hello world\\n\");\n}\n```\n\nIt can be compiled as follows:\n\n```sh\ncosmocc -o hello hello.c\n./hello\n```\n\nThe Cosmopolitan Libc runtime links some heavyweight troubleshooting\nfeatures by default, which are very useful for developers and admins.\nHere's how you can log system calls:\n\n```sh\n./hello --strace\n```\n\nHere's how you can get a much more verbose log of function calls:\n\n```sh\n./hello --ftrace\n```\n\nYou can use the Cosmopolitan's toolchain to build conventional open\nsource projects which use autotools. This strategy normally works:\n\n```sh\nexport CC=x86_64-unknown-cosmo-cc\nexport CXX=x86_64-unknown-cosmo-c++\n./configure --prefix=/opt/cosmos/x86_64\nmake -j\nmake install\n```\n\n## Cosmopolitan Source Builds\n\nCosmopolitan can be compiled from source on any of our supported\nplatforms. The Makefile will download cosmocc automatically.\n\nIt's recommended that you install a systemwide APE Loader. This command\nrequires `sudo` access to copy the `ape` command to a system folder and\nregister with binfmt_misc on Linux, for even more performance.\n\n```sh\nape/apeinstall.sh\n```\n\nYou can now build the mono repo with any modern version of GNU Make. To\nbootstrap your build, you can install Cosmopolitan Make from this site:\n\nhttps://cosmo.zip/pub/cosmos/bin/make\n\nE.g.:\n\n```sh\ncurl -LO https://cosmo.zip/pub/cosmos/bin/make\n./make -j8\no//examples/hello\n```\n\nAfter you've built the repo once, you can also use the make from your\ncosmocc at `.cosmocc/current/bin/make`. You might even prefer to alias\nmake to `$COSMO/.cosmocc/current/bin/make`.\n\nSince the Cosmopolitan repository is very large, you might only want to\nbuild one particular thing. Here's an example of a target that can be\ncompiled relatively quickly, which is a simple POSIX test that only\ndepends on core LIBC packages.\n\n```sh\nrm -rf o//libc o//test\n.cosmocc/current/bin/make o//test/posix/signal_test\no//test/posix/signal_test\n```\n\nSometimes it's desirable to build a subset of targets, without having to\nlist out each individual one. For example if you wanted to build and run\nall the unit tests in the `TEST_POSIX` package, you could say:\n\n```sh\n.cosmocc/current/bin/make o//test/posix\n```\n\nCosmopolitan provides a variety of build modes. For example, if you want\nreally tiny binaries (as small as 12kb in size) then you'd say:\n\n```sh\n.cosmocc/current/bin/make m=tiny\n```\n\nYou can furthermore cut out the bloat of other operating systems, and\nhave Cosmopolitan become much more similar to Musl Libc.\n\n```sh\n.cosmocc/current/bin/make m=tinylinux\n```\n\nFor further details, see [//build/config.mk](build/config.mk).\n\n## Debugging\n\nTo print a log of system calls to stderr:\n\n```sh\ncosmocc -o hello hello.c\n./hello --strace\n```\n\nTo print a log of function calls to stderr:\n\n```sh\ncosmocc -o hello hello.c\n./hello --ftrace\n```\n\nBoth strace and ftrace use the unbreakable kprintf() facility, which is\nable to be sent to a file by setting an environment variable.\n\n```sh\nexport KPRINTF_LOG=log\n./hello --strace\n```\n\n## GDB\n\nHere's the recommended `~/.gdbinit` config:\n\n```gdb\nset host-charset UTF-8\nset target-charset UTF-8\nset target-wide-charset UTF-8\nset osabi none\nset complaints 0\nset confirm off\nset history save on\nset history filename ~/.gdb_history\ndefine asm\n  layout asm\n  layout reg\nend\ndefine src\n  layout src\n  layout reg\nend\nsrc\n```\n\nYou normally run the `.dbg` file under gdb. If you need to debug the\n`` file itself, then you can load the debug symbols independently as\n\n```sh\ngdb foo -ex 'add-symbol-file foo.dbg 0x401000'\n```\n\n## Platform Notes\n\n### Shells\n\nIf you use zsh and have trouble running APE programs try `sh -c ./prog`\nor simply upgrade to zsh 5.9+ (since we patched it two years ago). The\nsame is the case for Python `subprocess`, old versions of fish, etc.\n\n### Linux\n\nSome Linux systems are configured to launch MZ executables under WINE.\nOther distros configure their stock installs so that APE programs will\nprint \"run-detectors: unable to find an interpreter\". For example:\n\n```sh\njart@ubuntu:~$ wget https://cosmo.zip/pub/cosmos/bin/dash\njart@ubuntu:~$ chmod +x dash\njart@ubuntu:~$ ./dash\nrun-detectors: unable to find an interpreter for ./dash\n```\n\nYou can fix that by registering APE with `binfmt_misc`:\n\n```sh\nsudo wget -O /usr/bin/ape https://cosmo.zip/pub/cosmos/bin/ape-$(uname -m).elf\nsudo chmod +x /usr/bin/ape\nsudo sh -c \"echo ':APE:M::MZqFpD::/usr/bin/ape:' >/proc/sys/fs/binfmt_misc/register\"\nsudo sh -c \"echo ':APE-jart:M::jartsr::/usr/bin/ape:' >/proc/sys/fs/binfmt_misc/register\"\n```\n\nYou should be good now. APE will not only work, it'll launch executables\n400µs faster now too. However if things still didn't work out, it's also\npossible to disable `binfmt_misc` as follows:\n\n```sh\nsudo sh -c 'echo -1 > /proc/sys/fs/binfmt_misc/cli'     # remove Ubuntu's MZ interpreter\nsudo sh -c 'echo -1 > /proc/sys/fs/binfmt_misc/status'  # remove ALL binfmt_misc entries\n```\n\n### WSL\n\nIt's normally unsafe to use APE in a WSL environment, because it tries\nto run MZ executables as WIN32 binaries within the WSL environment. In\norder to make it safe to use Cosmopolitan software on WSL, run this:\n\n```sh\nsudo sh -c \"echo -1 > /proc/sys/fs/binfmt_misc/WSLInterop\"\n```\n\n## Discord Chatroom\n\nThe Cosmopolitan development team collaborates on the Redbean Discord\nserver. You're welcome to join us! <https://discord.gg/FwAVVu7eJ4>\n\n## Support Vector\n\n| Platform       | Min Version    | Circa |\n| :---           | ---:           | ---:  |\n| AMD            | K8             | 2003  |\n| Intel          | Core           | 2006  |\n| Linux          | 2.6.18         | 2007  |\n| Windows        | 8 [1]          | 2012  |\n| Darwin (macOS) | 23.1.0+        | 2023  |\n| OpenBSD        | 7.3 or earlier | 2023  |\n| FreeBSD        | 13             | 2020  |\n| NetBSD         | 9.2            | 2021  |\n\n[1] See our [vista branch](https://github.com/jart/cosmopolitan/tree/vista)\n    for a community supported version of Cosmopolitan that works on Windows\n    Vista and Windows 7.\n\n## Special Thanks\n\nFunding for this project is crowdsourced using\n[GitHub Sponsors](https://github.com/sponsors/jart) and\n[Patreon](https://www.patreon.com/jart). Your support is what makes this\nproject possible. Thank you! We'd also like to give special thanks to\nthe following groups and individuals:\n\n- [Joe Drumgoole](https://github.com/jdrumgoole)\n- [Rob Figueiredo](https://github.com/robfig)\n- [Wasmer](https://wasmer.io/)\n\nFor publicly sponsoring our work at the highest tier.\n"
        },
        {
          "name": "ape",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "ctl",
          "type": "tree",
          "content": null
        },
        {
          "name": "dsp",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "libc",
          "type": "tree",
          "content": null
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        },
        {
          "name": "usr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}