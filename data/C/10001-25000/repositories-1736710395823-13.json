{
  "metadata": {
    "timestamp": 1736710395823,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "radareorg/radare2",
      "stars": 20984,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.9140625,
          "content": "Language: Cpp\nMaxEmptyLinesToKeep: 1\nSpaceBeforeParens: Always\nSpaceInEmptyParentheses: false\nSpacesInContainerLiterals: true\nBasedOnStyle: LLVM\nContinuationIndentWidth: 8\nIndentCaseLabels: false\nIndentFunctionDeclarationAfterType: false\nIndentWidth: 8\nUseTab: ForContinuationAndIndentation\nColumnLimit: 0\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\nAllowShortIfStatementsOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortLoopsOnASingleLine: false\nAlignAfterOpenBracket: DontAlign\nAlignEscapedNewlines: DontAlign\nAlignConsecutiveMacros: true\nAlignTrailingComments: false\nAlignOperands: false\nCpp11BracedListStyle: false\nForEachMacros: ['r_list_foreach', 'ls_foreach', 'fcn_tree_foreach_intersect', 'r_skiplist_foreach', 'graph_foreach_anode', 'r_list_foreach_safe', 'r_pvector_foreach', 'r_rbtree_foreach', 'r_interval_    tree_foreach']\nSortIncludes: false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.12109375,
          "content": "clang-log/\n.clang_complete\n.tmp-format\n.#*\n*._d\n*._o\n*.[ado]\n*.so\n*.pc\n*.sdb\n*.dylib\n*.dll\n*.lib\n*.obj\n*.ilk\n*.dSYM\n*.wasm\nsupported.*\nconfig.mk\nplugins.cfg\nlangs.cfg\n.test.c\n.*.swp\n.*.swo\n*.un~\n*.pdb\n*.lib\n*.ilk\nbinr/r2agent/r2agent\nbinr/r2agent/r2agent.exe\nbinr/rvc2/rvc2\nbinr/rvc2/rvc2.exe\nbinr/ravc2/ravc2\nbinr/ravc2/ravc2.exe\nbinr/r2r/r2r\nbinr/r2r/r2r.exe\nbinr/rabin2/rabin2\nbinr/rabin2/rabin2.exe\nbinr/radare2/radare2\nbinr/radare2/radare2.exe\nbinr/radiff2/radiff2\nbinr/radiff2/radiff2.exe\nbinr/rafind2/rafind2\nbinr/rafind2/rafind2.exe\nbinr/ragg2/ragg2\nbinr/ragg2/ragg2.exe\nbinr/rahash2/rahash2\nbinr/rahash2/rahash2.exe\nbinr/ranal2/ranal2\nbinr/ranal2/ranal2.exe\nbinr/rarun2/rarun2\nbinr/rarun2/rarun2.exe\nbinr/rapatch2/rapatch2\nbinr/rapatch2/rapatch2.exe\nbinr/rasm2/rasm2\nbinr/rasm2/rasm2.exe\nbinr/rax2/rax2\nbinr/rax2/rax2.exe\nbinr/r2pm/r2pm\nbinr/r2pm/r2pm.exe\nbinr/*/_CodeSignature/*\nbuild\nbuild_sdb\nconfig-user.mk\nlibr/bin/d/dll/dll\nlibr/config.h\nlibr/include/r_userconf.h\nlibr/include/r_version.h\nlibr/include/r_version.h.tmp\nlibr/arch/p/arm/v35/arch-arm64\nlibr/arch/p/arm/v35/arch-armv7\nshlr/capstone/\nshlr/java/out\nshlr/java/out.exe\nshlr/spp/config.h\nsubprojects/sdb\nsubprojects/capstone\nsubprojects/capstone-v5\nsubprojects/v35arm64\nsubprojects/v35armv7\nsubprojects/qjs\nshlr/.cs_tmp.zip\nsys/travis/*.txt\nsys/.mark_python-deps\nsys/.mark_swig\nsys/_work\nradare2-bindings\nradare2-regressions\nradare2-w32-*\nradare2-w64-*\ntags\n**/GPATH\n**/GRTAGS\n**/GTAGS\n**/.gdb_history\n.lvimrc\n.nconfig.tmp\n.ycm_extra_conf.py\n.ycm_extra_conf.pyc\n.kdev4/*\n*.kdev4\nradare2-*.zip\n# Ignore meson related files\n./bin\nninja.exe\n.DS_Store\ninfer_out\ninfer-out/\ncscope.out\nr2-static/*\nbinr/rasign2/rasign2\nbinr/rasign2/rasign2.exe\ncompile_commands.json\nlibr/flag/d/tags.r2\n# CLion\n.idea/\n# VSCode\n.vscode/\nCMakeLists.txt\n*.cmake\ncmake-build-*\n# Snap packaging\n/parts\n/prime\n/stage\n/snap\n/*.snap\n# doxygen autogen\ndoc/doxygen/html\n# Python\n__pycache__\n# Dynamic docker building folder to minimize docker context\n.docker_alpine\n.ccls-cache/\nvgcore.*\nlibr/include/sdb\n**/d/*.c\n**/d/*.h\n**/d/*.gperf\n**/d/*.out\n**/d/*.inc\n**/d/*.sdb.txt.tmp\n# Artifacts\n/dist/artifacts\n# libFuzzer\ncrash-*\ncorpus*\n"
        },
        {
          "name": "COMMUNITY.md",
          "type": "blob",
          "size": 2.029296875,
          "content": "# Radare2 community engagement\n\n## Introduction\n\nOver the years, radare2 has grown and grown in terms of source code size,\ncomplexity, features, collaborations, community and more. As a result, it\nhas become increasingly challenging to manage in a consistent manner.\n\nThere exist many different interpretations of problems and solutions.\n\nWhat might make total sense to one community member may not make sense to\nothers. The divergence of opinions and ideas can be great for creativity,\ncollaboration and decision making and rules or conflicts shouldn't be an\nexcuse to frustrate or upset community members.\n\nHowever, this can also bring its own set of challenges, necessitating we\nwork together to continue to build an evolving tool that the community\nembraces and extends. We wish to provide guidance to the r2 community\n(eg. GitHub issues, source code, online chats or conferences) about how\nwe want to operate.\n\n## What we want to see\n\nWe wish to have a supportive community of kind people vibing together,\nconnected by common interests, which are radare2 and software reverse\nengineering in general.\n\nThis does not limit to the conversations in our official chat servers,\nyou can also talk about other things **in the side channel**.\n\nWe urge you to respect the personal boundaries of everyone in this\ncommunity.\n\n## What we don't want to see\n\nWe don't want any form of hate or personal attacks in this community.\n\nWe understand that people make mistakes and sometimes don't even know\nwhat they're saying/doing. This is no excuse for intentional harassment,\ndiscriminatory, and abusive behavior.\n\n## What we explicitly tolerate\n\nMild forms of trolling and non-discriminatory profanity is OK with us.\nInteract with each other as you'd interact with a friend, and it will\nbe well.\n\n## Rule enforcement?\n\nWe do not intend to act as policemen, judges, or legislators, and we\ndon't want to act as enforcers either. We do not want such roles in\nthe radare2 community, so we will not officially formulate any strict\nrules or penalties.\n\nHowever, we will take action if necessary.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.03125,
          "content": "# How to report issues\n\nBefore reporting an issue on GitHub, please check that:\n* You are using the most recent git version of radare2\n* You are using a clean installation of radare2\n* The issue has not already been reported (search\n  [here](https://github.com/radareorg/radare2/issues))\n\nWhen the above conditions are satisfied, feel free to submit an issue. Please\nprovide a precise description, and as many of the following as possible:\n\n* Your operating system and architecture; e.g. \"Windows 10 32-bit\", \"Debian 11\n  64-bit\".\n* The file in use when the issue was encountered (we may add the file or a\n  section of it to our test suite to avoid regressions).\n* A backtrace, if the issue is a segmentation fault. You can compile with ASan\n  on Linux using `sys/sanitize.sh` to allow easier diagnosis of such issues.\n* Detailed steps to reproduce the issue, including a list of commands and\n  expected and/or actual output.\n\n# How to contribute\n\nThere are a few guidelines that we ask contributors to follow to ensure that\nthe codebase is clean and consistent.\n\n## Getting Started\n\n* Make sure you have a GitHub account and a basic understanding of `git`. If\n  you don't know how to use `git`, there is a useful guide\n  [here](https://learnxinyminutes.com/docs/git).\n* Fork the repository on GitHub (there should be a \"Fork\" button on the top\n  right of the repository home page).\n* Create a branch on your fork based off of `master`. Please avoid working\n  directly on the `master` branch. This will make it easier to prepare your\n  changes for merging when it's ready.\n\n```sh\ngit checkout master\ngit checkout -b mybranch\n```\n\n* Make commits of logical units. Try not to make several unrelated changes in\n  the same commit, but don't feel obligated to split them up too much either.\n  Ideally, r2 should successfully compile at each commit. This simplifies the\n  debugging process, as it allows easier use of tools such as `git bisect`\n  alongside the `r2r` testing suite to identify when a bug is introduced.\n* Check for coding style issues with:\n\n```sh\ngit diff master..mybranch | sys/clang-format-diff.py -p1\n```\n\n  For more on the coding style, see [DEVELOPERS.md](DEVELOPERS.md).\n* Open a [pull request](https://github.com/radareorg/radare2/pulls) (PR) on\n  Github.\n* Prefix the PR title with `WIP:` and mark it as a draft if you aren't ready to\n  merge.\n* When relevant, add or modify tests in [test/](test).\n\n## Rebasing onto updated master\n\nNew changes are frequently pushed to the `master` branch. Before your branch\ncan be merged, you must resolve any conflicts with new commits made to\n`master`.\n\nTo prepare your branch for merging onto `master`, you must first `rebase` it\nonto the most recent commit on `radareorg/master`, then, if you already pushed\nto your remote, force-`push` it to overwrite the previous commits after any\nconflict resolution.\n\n#### Step 0: Configuring git\n\nYou may wish to change default git settings to ensure you don't need to always\nprovide specific options. These do not need to be set again after initial\nconfiguration unless your git settings are lost, e.g. if you delete the\nrepository folder and then clone it again.\n\nIf you cloned from your fork, you can add a new remote for upstream. The\ncommands here will assume that `origin` is your fork and `radareorg` is\nupstream, but you can name them as you choose.\n\n```sh\n# Use SSH\ngit remote add radareorg git@github.com:radareorg/radare2.git\n\n# Use HTTPS\ngit remote add radareorg https://github.com/radareorg/radare2\n```\n\nradare2 uses the `squash` merging style to summarize changes. When your changes\nare merged, the merging collaborator can customize the commit message that will\nbe used in `master`. Typically, the pull request title is used as the commit\nmessage. Specific or smaller changes may be included in the body.\n\nDefault settings may create \"merge commits\" when pulling from upstream, which\ncan cause issues. Set `merge` and `pull` to fast-forward only to avoid this.\n\n```sh\ngit config merge.ff only\ngit config pull.ff only\n```\n\n#### Step 1: Pull new commits to `master` from upstream\n\n```sh\ngit checkout master\ngit pull radareorg master\n```\n\nYou may need to add the `-f` flag to force the pull if it is rejected. If you\nhave made commits to your local `master` branch (not recommended!), this may\noverwrite them.\n\nIf there are new commits to master, you will see the list of changed files. If\nthere are no updates, you will see `Already up to date.`.\n\n#### Step 2: Rebase `mybranch` onto master\n\n```sh\ngit checkout mybranch\ngit rebase master\n```\n\nYou may optionally use the interactive mode. This allows you to reorder,\n`reword`, `edit`, or `squash` your commits into fewer individual commits.\n\n```sh\ngit rebase -i master\n```\n\nAgain, you must resolve any conflicts that occur before you can merge.\n\nIf you are concerned about potential loss of work, you can back up your code by\ncreating a new branch using your feature branch as a base before rebasing.\n\n```sh\ngit checkout mybranch\ngit branch backup\ngit rebase master\n```\n\n#### Step 3: Publish your updated local branch\n\nIf you have not pushed this branch before:\n\n```sh\ngit push -u origin mybranch\n```\n\nIf you are updating an existing branch:\n\n```sh\ngit push -f\n```\n\nThe `-f` flag may be needed to `force` the push onto the remote if you are\nreplacing existing commits on the remote because git commits are immutable -\nthis discards the old commits on your remote, and git won't take potentially\ndestructive actions without confirmation.\n\n## Commit message guidelines\n\nWhen committing changes, we ask that you follow some guidelines to keep the\nhistory readable and consistent:\n\n* Start the message capitalized (only the first character must be in uppercase)\n* Be concise. A descriptive message under 100 characters is preferred, but may\n  not be possible in all situations. For large commits, it is acceptable to use\n  a summary line, followed by an empty line, then an asterisk item list of\n  changes.\n* If a command is inlined, use backticks, e.g.:\n\n```sh\ngit commit -m 'Modify output of `ls`'\n```\n\n* Add a tag if the change falls into a relevant category (see below)\n* If the commit fixes an issue, you may optionally start the message with\n  `Fix #number - `\n* Use present simple tense and avoid past tense. Use \"add\", \"fix\", or \"change\"\n  instead of \"added\", \"fixed\", or \"changed\".\n\n### Commit message tag list\n\n| Tag              | Relevant changes |\n|------------------|------------------|\n| `##analysis`     | Analysis |\n| `##arch`         | Architecture |\n| `##asm`          | Assembly (not disassembly) |\n| `##bin`          | Binary parsing |\n| `##build`        | Build system |\n| `##config`       | Configuration variables |\n| `##cons`         | Console/terminal |\n| `##crypto`       | Cryptography |\n| `##debug`        | Debugger |\n| `##diff`         | Diffing code, strings, basic blocks, etc. |\n| `##disasm`       | Disassembler |\n| `##doc`          | Documentation |\n| `##egg`          | The `r_lang` compiler |\n| `##emu`          | Emulation, including esil |\n| `##graph`        | Basic block graph, callgraph, etc. |\n| `##io`           | The `r_io` library |\n| `##json`         | JSON |\n| `##lang`         | Language bindings |\n| `##meta`         | Metadata handling, excluding printing |\n| `##optimization` | Space/time optimizations |\n| `##platform`     | Platform-specific code |\n| `##port`         | Portability - new OS or architectures |\n| `##print`        | Printing data, structures, strings, tables, types, etc. |\n| `##projects`     | Saving and loading state |\n| `##refactor`     | Code quality improvements |\n| `##remote`       | Usage over a remote connection (TCP, HTTP, RAP, etc.), collaboration |\n| `##search`       | `rafind2`, `/` command, etc. |\n| `##shell`        | Command-line, argument parsing, new commands, etc. |\n| `##signatures`   | Searching for or generating signatures |\n| `##test`         | Testing infrastructure, including `r2r` |\n| `##tools`        | `r2pm`, `rarun2`, `rax2` changes that don't fit in another category |\n| `##util`         | Core APIs |\n| `##visual`       | Visual UI, including panels |\n\n# Additional resources\n\n * [README.md](README.md)\n * [DEVELOPERS.md](DEVELOPERS.md)\n * [USAGE.md](USAGE.md)\n"
        },
        {
          "name": "COPYING.md",
          "type": "blob",
          "size": 10.6162109375,
          "content": "# Radare2 License\n\nIn short, radare2 is mostly LGPLv3, but there are some components with compatible licenses like Apache, BSD or MIT.\n\nThe only incompatible part that you may probably need to disable the build of the **GPL** parts which can be disabled with the `--without-gpl` configure flag.\n\nSee `doc/licenses/` and `doc/licenses.md`.\n\nTo get a fully detailed SBOM report from a runtime build use the `licenses.r2.js` script that will return a JSON object with `-Vj` containing all the license and copyright detailed information of all the elements shipped in the build. Here's a sample output:\n\n```console\n$ r2 -qi scripts/licenses.r2.js --\n\nLGPL-3.0-only\ncapstone BSD-3-Clause OK\nsdb MIT OK\narm64v35 Apache-2.0 OK\narmv7v35 Apache-2.0 OK\n- core\n  - a2f : MIT    OK\n  - agD : LGPL-3.0-only    OK\n  - java : Apache-2.0    OK\n  - prj : MIT    OK\n  - sixref : MIT    OK\n  - r2ai-client : MIT    OK\n  - r2dec : BSD-3    OK\n  - r2ghidra : GPL3    OK\n  - decai : MIT    OK\n  - sarif : MIT    OK\n  - r2jadx : MIT    OK\n  - goresym : MIT    OK\n  - codeshare : MIT    OK\n- bin\n  - any : LGPL-3.0-only    OK\n  - art : LGPL-3.0-only    OK\n  - avr : LGPL-3.0-only    OK\n  - bf : LGPL-3.0-only    OK\n  - bflt : LGPL-3.0-only    OK\n  - bios : LGPL-3.0-only    OK\n  - bootimg : LGPL-3.0-only    OK\n  - cgc : LGPL-3.0-only    OK\n  - coff : LGPL-3.0-only    OK\n  - dex : LGPL-3.0-only    OK\n  - dis : MIT    OK\n  - dmp64 : LGPL-3.0-only    OK\n  - dol : BSD-3-Clause    OK\n  - dyldcache : LGPL-3.0-only    OK\n  - elf : LGPL-3.0-only    OK\n  - elf64 : LGPL-3.0-only    OK\n  - fs : LGPL-3.0-only    OK\n  - hunk : MIT    OK\n  - io : MIT    OK\n  - java : LGPL-3.0-only    OK\n  - le : LGPL-3.0-only    OK\n  - lua : MIT    OK\n  - mach0 : LGPL-3.0-only    OK\n  - mach064 : LGPL-3.0-only    OK\n  - mbn : LGPL-3.0-only    OK\n  - mdmp : LGPL-3.0-only    OK\n  - menuet : LGPL-3.0-only    OK\n  - msx : LGPL-3.0-only    OK\n  - mz : MIT    OK\n  - ne : LGPL-3.0-only    OK\n  - nes : MIT    OK\n  - nin3ds : LGPL-3.0-only    OK\n  - ninds : LGPL-3.0-only    OK\n  - ningb : LGPL-3.0-only    OK\n  - ningba : LGPL-3.0-only    OK\n  - nro : MIT    OK\n  - nso : MIT    OK\n  - off : MIT    OK\n  - omf : LGPL-3.0-only    OK\n  - p9 : MIT    OK\n  - pcap : LGPL-3.0-only    OK\n  - pdp11 : MIT    OK\n  - pe : LGPL-3.0-only    OK\n  - pe64 : LGPL-3.0-only    OK\n  - pebble : LGPL-3.0-only    OK\n  - prg : LGPL-3.0-only    OK\n  - psxexe : LGPL-3.0-only    OK\n  - pyc : LGPL-3.0-only    OK\n  - qnx : LGPL-3.0-only    OK\n  - rel : LGPL-3.0-only    OK\n  - s390 : LGPL-3.0-only    OK\n  - sfc : LGPL-3.0-only    OK\n  - smd : LGPL-3.0-only    OK\n  - sms : LGPL-3.0-only    OK\n  - symbols : MIT    OK\n  - te : LGPL-3.0-only    OK\n  - tic : MIT    OK\n  - uf2 : MIT    OK\n  - vsf : LGPL-3.0-only    OK\n  - wad : LGPL-3.0-only    OK\n  - wasm : MIT    OK\n  - xbe : LGPL-3.0-only    OK\n  - xcoff64 : LGPL-3.0-only    OK\n  - kernelcache : LGPL-3.0-only    OK\n  - xtac : Apache-2.0    OK\n  - z64 : LGPL-3.0-only    OK\n  - zimg : LGPL-3.0-only    OK\n- xtr\n  - xtr.dyldcache : LGPL-3.0-only    OK\n  - xtr.fatmach0 : LGPL-3.0-only    OK\n  - xtr.pemixed : LGPL-3.0-only    OK\n  - xtr.sep64 : LGPL-3.0-only    OK\n  - xtr.xalz : MIT    OK\n- ldr\n  - xtr.dyldcache : LGPL-3.0-only    OK\n  - xtr.fatmach0 : LGPL-3.0-only    OK\n  - xtr.pemixed : LGPL-3.0-only    OK\n  - xtr.sep64 : LGPL-3.0-only    OK\n  - xtr.xalz : MIT    OK\n- arch\n  - 6502 : LGPL-3.0-only    OK\n  - 6502.cs : LGPL-3.0-only    OK\n  - 8051 : LGPL-3.0-only    OK\n  - alpha : GPL-3.0-only    OK\n  - amd29k : BSD-3-Clause    OK\n  - any.as : LGPL-3.0-only    OK\n  - any.vasm : MIT    OK\n  - arc : LGPL-3.0-only    OK\n  - arm.nz : LGPL-3.0-only    OK\n  - arm : Apache-2.0    OK\n  - arm.gnu : GPL-3.0-only    OK\n  - arm.v35 : BSD-3-Clause    OK\n  - avr : LGPL-3.0-only    OK\n  - bf : LGPL-3.0-only    OK\n  - bpf.mr : LGPL-3.0-only    OK\n  - bpf : BSD-3-Clause    OK\n  - chip8 : LGPL-3.0-only    OK\n  - cr16 : LGPL-3.0-only    OK\n  - cris : LGPL-3.0-only    OK\n  - dalvik : LGPL-3.0-only    OK\n  - dis : MIT    OK\n  - ebc : LGPL-3.0-only    OK\n  - evm : BSD-3-Clause    OK\n  - fslsp : LGPL-3.0-only    OK\n  - gb : LGPL-3.0-only    OK\n  - h8300 : LGPL-3.0-only    OK\n  - hppa : GPL-3.0-only    OK\n  - i4004 : LGPL-3.0-only    OK\n  - i8080 : LGPL-3.0-only    OK\n  - java : Apache-2.0    OK\n  - jdh8 : LGPL-3.0-only    OK\n  - kvx : LGPL-3.0-only    OK\n  - lanai : GPL-3.0-only    OK\n  - lh5801 : LGPL-3.0-only    OK\n  - lm32 : BSD-3-Clause    OK\n  - loongarch : LGPL-3.0-only    OK\n  - lua : MIT    OK\n  - m680x : Apache-2.0    OK\n  - m68k : BSD-3-Clause    OK\n  - m68k.gnu : GPL-3.0-only    OK\n  - mcore : LGPL-3.0-only    OK\n  - mcs96 : LGPL-3.0-only    OK\n  - mips : Apache-2.0    OK\n  - mips.gnu : LGPL-3.0-only    OK\n  - msp430 : LGPL-3.0-only    OK\n  - nds32 : GPL-3.0-only    OK\n  - nios2 : LGPL-3.0-only    OK\n  - null : LGPL-3.0-only    OK\n  - or1k : LGPL-3.0-only    OK\n  - pdp11 : GPL-3.0-only    OK\n  - pic : LGPL-3.0-only    OK\n  - pickle : BSD-3-Clause    OK\n  - ppc : Apache-2.0    OK\n  - ppc.gnu : LGPL-3.0-only    OK\n  - propeller : LGPL-3.0-only    OK\n  - pyc : LGPL-3.0-only    OK\n  - riscv : GPL-3.0-only    OK\n  - riscv.cs : Apache-2.0    OK\n  - rsp : LGPL-3.0-only    OK\n  - s390 : Apache-2.0    OK\n  - s390.gnu : BSD-3-Clause    OK\n  - sh : LGPL-3.0-only    OK\n  - sh.cs : Apache-2.0    OK\n  - sm5xx : BSD-3-Clause    OK\n  - snes : LGPL-3.0-only    OK\n  - sparc : Apache-2.0    OK\n  - sparc.gnu : GPL-3.0-only    OK\n  - stm8 : GPL-3.0-only    OK\n  - tms320 : LGPL-3.0-only    OK\n  - tricore : LGPL-3.0-only    OK\n  - tricore.cs : Apache-2.0    OK\n  - uxn : MIT    OK\n  - v810 : LGPL-3.0-only    OK\n  - v850 : MIT    OK\n  - vax : GPL-3.0-only    OK\n  - wasm : LGPL-3.0-only    OK\n  - ws : LGPL-3.0-only    OK\n  - x86 : Apache-2.0    OK\n  - x86.nasm : LGPL-3.0-only    OK\n  - x86.nz : LGPL-3.0-only    OK\n  - xap : LGPL-3.0-only    OK\n  - xcore : Apache-2.0    OK\n  - xtensa : LGPL-3.0-only    OK\n  - z80 : GPL-3.0-only    OK\n  - r2ghidra : GPL3    OK\n- crypto\n  - aes-ecb : MIT    OK\n  - aes-cbc : LGPL-3.0-only    OK\n  - aes-wrap : LGPL-3.0-only    OK\n  - base64 : LGPL-3.0-only    OK\n  - base91 : MIT    OK\n  - bech32 : BSD-3-Clause    OK\n  - blowfish : LGPL-3.0-only    OK\n  - cps2 : LGPL-3.0-only    OK\n  - des-ecb : LGPL-3.0-only    OK\n  - ed25519 : Zlib    OK\n  - entropy : MIT    OK\n  - punycode : LGPL-3.0-only    OK\n  - rc2 : LGPL-3.0-only    OK\n  - rc4 : LGPL-3.0-only    OK\n  - rc6 : LGPL-3.0-only    OK\n  - rol : LGPL-3.0-only    OK\n  - ror : LGPL-3.0-only    OK\n  - rot : MIT    OK\n  - serpent-ecb : LGPL-3.0-only    OK\n  - sip : MIT    OK\n  - sm4-ecb : LGPL-3.0-only    OK\n  - strhash : MIT    OK\n  - xor : MIT    OK\n  - md5 : undefined    [31mERROR[0m\n  - sha1 : undefined    [31mERROR[0m\n  - sha256 : undefined    [31mERROR[0m\n  - sha384 : undefined    [31mERROR[0m\n  - sha512 : undefined    [31mERROR[0m\n  - md4 : undefined    [31mERROR[0m\n  - xor : undefined    [31mERROR[0m\n  - xorpair : undefined    [31mERROR[0m\n  - parity : undefined    [31mERROR[0m\n  - entropy : undefined    [31mERROR[0m\n  - hamdist : undefined    [31mERROR[0m\n  - pcprint : undefined    [31mERROR[0m\n  - mod255 : undefined    [31mERROR[0m\n  - xxhash : undefined    [31mERROR[0m\n  - adler32 : undefined    [31mERROR[0m\n  - luhn : undefined    [31mERROR[0m\n  - ssdeep : undefined    [31mERROR[0m\n  - crc8smbus : undefined    [31mERROR[0m\n  - crc15can : undefined    [31mERROR[0m\n  - crc16 : undefined    [31mERROR[0m\n  - crc16hdlc : undefined    [31mERROR[0m\n  - crc16usb : undefined    [31mERROR[0m\n  - crc16citt : undefined    [31mERROR[0m\n  - crc24 : undefined    [31mERROR[0m\n  - crc32 : undefined    [31mERROR[0m\n  - crc32c : undefined    [31mERROR[0m\n  - crc32ecma267 : undefined    [31mERROR[0m\n  - crc32bzip2 : undefined    [31mERROR[0m\n  - crc32d : undefined    [31mERROR[0m\n  - crc32mpeg2 : undefined    [31mERROR[0m\n  - crc32posix : undefined    [31mERROR[0m\n  - crc32q : undefined    [31mERROR[0m\n  - crc32jamcrc : undefined    [31mERROR[0m\n  - crc32xfer : undefined    [31mERROR[0m\n  - crc64 : undefined    [31mERROR[0m\n  - crc64ecma : undefined    [31mERROR[0m\n  - crc64we : undefined    [31mERROR[0m\n  - crc64xz : undefined    [31mERROR[0m\n  - crc64iso : undefined    [31mERROR[0m\n  - fletcher8 : undefined    [31mERROR[0m\n  - fletcher16 : undefined    [31mERROR[0m\n  - fletcher32 : undefined    [31mERROR[0m\n  - fletcher64 : undefined    [31mERROR[0m\n  - elf : undefined    [31mERROR[0m\n- debug\n  - bf : LGPL-3.0-only    OK\n  - bochs : LGPL-3.0-only    OK\n  - esil : LGPL-3.0-only    OK\n  - evm : LGPL-3.0-only    OK\n  - gdb : LGPL-3.0-only    OK\n  - io : MIT    OK\n  - native : LGPL-3.0-only    OK\n  - null : MIT    OK\n  - qnx : LGPL-3.0-only    OK\n  - rap : LGPL-3.0-only    OK\n  - rv32ima : MIT    OK\n  - winkd : LGPL-3.0-only    OK\n- egg\n  - exec : MIT    OK\n  - xor : MIT    OK\n- fs\n  - ext2 : GPL-3.0-only    OK\n  - fat : GPL-3.0-only    OK\n  - fb : GPL-3.0-only    OK\n  - hfs : GPL-3.0-only    OK\n  - hfsplus : GPL-3.0-only    OK\n  - io : MIT    OK\n  - iso9660 : GPL-3.0-only    OK\n  - jfs : GPL-3.0-only    OK\n  - minix : GPL-3.0-only    OK\n  - ntfs : GPL-3.0-only    OK\n  - posix : MIT    OK\n  - r2 : MIT    OK\n  - reiserfs : GPL-3.0-only    OK\n  - sfs : GPL-3.0-only    OK\n  - squashfs : MIT    OK\n  - tar : GPL-3.0-only    OK\n  - udf : GPL-3.0-only    OK\n  - ufs : GPL-3.0-only    OK\n  - xfs : GPL-3.0-only    OK\n  - zip : MIT    OK\n- io\n  - ar : LGPL-3.0-only    OK\n  - bfdbg : LGPL-3.0-only    OK\n  - bochs : LGPL-3.0-only    OK\n  - cyclic : LGPL-3.0-only    OK\n  - debug : LGPL-3.0-only    OK\n  - default : LGPL-3.0-only    OK\n  - dsc : LGPL-3.0-only    OK\n  - fd : MIT    OK\n  - gdb : LGPL-3.0-only    OK\n  - gprobe : LGPL-3.0-only    OK\n  - gzip : LGPL-3.0-only    OK\n  - http : LGPL-3.0-only    OK\n  - ihex : LGPL-3.0-only    OK\n  - isotp : MIT    OK\n  - mach : LGPL-3.0-only    OK\n  - malloc : LGPL-3.0-only    OK\n  - mmap : LGPL-3.0-only    OK\n  - null : LGPL-3.0-only    OK\n  - qnx : GPL-3.0-only    OK\n  - r2k : LGPL-3.0-only    OK\n  - r2pipe : MIT    OK\n  - r2web : LGPL-3.0-only    OK\n  - rap : MIT    OK\n  - rbuf : LGPL-3.0-only    OK\n  - reg : LGPL-3.0-only    OK\n  - self : LGPL-3.0-only    OK\n  - serial : MIT    OK\n  - socket : MIT    OK\n  - sparse : LGPL-3.0-only    OK\n  - sysgdb : MIT    OK\n  - tcp : LGPL-3.0-only    OK\n  - treebuf : LGPL-3.0-only    OK\n  - uf2 : LGPL-3.0-only    OK\n  - winedbg : MIT    OK\n  - winkd : LGPL-3.0-only    OK\n  - xalz : MIT    OK\n  - xattr : LGPL-3.0-only    OK\n  - zip : BSD-3-Clause    OK\n  - frida : MIT    OK\n- lang\n  - s : LGPL-3.0-only    OK\n  - c : LGPL-3.0-only    OK\n  - cpipe : MIT    OK\n  - v : MIT    OK\n  - vala : LGPL-3.0-only    OK\n  - rust : MIT    OK\n  - zig : MIT    OK\n  - pipe : MIT    OK\n  - go : MIT    OK\n  - poke : LGPL-3.0-only    OK\n  - spp : MIT    OK\n  - lib : MIT    OK\n  - asm : LGPL-3.0-only    OK\n  - qjs : MIT    OK\n  - tsc : MIT    OK\n  - nim : MIT    OK\n```\n"
        },
        {
          "name": "DEVELOPERS.md",
          "type": "blob",
          "size": 21.1845703125,
          "content": "# Development information\n\nThis file aims to introduce developers to conventions for working on the code\nbase of radare2.\n\nThe GitHub issues page contains a list of all the bugs that have been reported,\nwith labels to classify them by difficulty, type, milestone, etc. It is a good\nplace to start if you are looking to contribute.\n\nFor information about the git process, see\n[CONTRIBUTING.md](CONTRIBUTING.md#How_to_contribute).\n\n## IDE settings\n### generate compile_commands.json\ncompile_commands.json records the dependency relationship between `.c/.h` file.\nIt is used by language server(ccls, clang, e.g.) to provide accurate code \ncompletion, syntax highlighting, and other intelligent code analysis features.\n\nIf you haven't built the project yet, you can do the following:\n```\nsudo apt-get install bear\nbear -- ./sys/install.sh\n```\nIf you have built the project:\n```\nmake clean\nbear -- make install\n```\n`bear` is tool that will hook the usage of gcc and generate `compile_commands.json`.\n\n### language server\nBoth of `ccls` and `clangd` supports `compile_commands.json`. You can add \ncorresponding plugin for your IDE.\n\n## Documentation\n\nFunctions should have descriptive names and parameters. It should be clear what\nthe function and its arguments do from the declaration. Comments should be used\nto explain purpose or clarify something that may not be immediately apparent or\nrelatively complicated.\n\n```c\n/* Find the min and max addresses in an RList of maps. Returns (max-min)/width. */\nstatic int findMinMax(RList *maps, ut64 *min, ut64 *max, int skip, int width);\n```\n\n## Error diagnosis\n\nThere are several utilities that can be used to diagnose errors in r2, whether\nthey are related to memory (segfaults, uninitialized read, etc.) or problems\nwith features.\n\n### Compilation options\n\n* `sys/sanitize.sh`: Compile with ASan, the address sanitizer. Provides\n  detailed backtraces for memory errors.\n* `R2_DEBUG_ASSERT=1`: Provides a backtrace when a debug assert (typically a\n  `R_RETURN_` macro) fails.\n* `R2_DEBUG=1`: Show error messages and crash signal. Used for debugging plugin\n  loading issues.\n\n### ABI stability and versioning\n\nDuring abi-stable seassons [x.y.0-x.y.8] it is not allowed to break the abi, this\nis checked in the CI using the `abidiff` tool on every commit. Sometimes keeping\nthe abi/api stable implies doing ugly hacks. Those must be marked with the corresponding\nto the next MAJOR.MINOR release of r2.\n\n\nFor example, during the development of 5.8.x we add a comment or use `#if R2_590` code\nblocks to specify those lines need to be changed when 5.8.9 in git.\n\nOnly the even patch version numbers are considered a release. This means that if you have\nan odd patch version of r2 it was built from git instead of the release tarball or binaries.\n\nFor more details read [doc/abi.md](doc/abi.md)\n\n### Useful macros from [r\\_types.h](libr/include/r_types.h)\n\n* `EPRINT_*`: Allows you to quickly add or remove a debug print without\n  worrying about format specifiers.\n\n#### Parameter marking\n\nr2 provides several empty macros to make function signatures more informative.\n\n* `R_OUT`: Parameter is output - written to instead of read.\n* `R_INOUT`: Parameter is read/write.\n* `R_OWN`: Pointer ownership is transferred from the caller.\n* `R_BORROW`: The caller retains ownership of the pointer - the reciever must\n  not free it.\n* `R_NONNULL`: Pointer must not be null.\n* `R_NULLABLE`: Pointer may ne null.\n* `R_DEPRECATE`: Do not use in new code and will be removed in the future.\n* `R_IFNULL(x)`: Default value for a pointer when null.\n* `R_UNUSED`: Not used.\n\n## Code style\n\n### C\n\nIn order to contribute patches or plugins, we encourage you to use the same\ncoding style as the rest of the code base.\n\n* Please use `./sys/clang-format-diff.py` before submitting a PR to be sure you\n  are following the coding style, as described in\n  [CONTRIBUTING.md](CONTRIBUTING.md#Getting Started). If you find a bug in this\n  script, please submit a bug report issue. A detailed style guide can be found\n  below.\n\n* See `sys/indent.sh` for indenting your code automatically.\n\n* A pre-commit hook to check coding style is located at\n  `sys/pre-commit-indent.sh`. You can install it by copying it to\n  `.git/hooks/pre-commit`. To preserve your existing pre-commit hook, use\n  `cat sys/pre-commit-indent.sh >> .git/hooks/pre-commit` instead.\n\n* For a premade `.vimrc`, see `doc/vim`.\n\n* See `.clang-format` for work-in-progress support for automated indentation.\n\n#### Guidelines\n\nThe following guidelines apply to code that we must maintain. Generally, they\nwill not apply to copy-paste external code that will not be touched.\n\n* Tabs are used for indentation. In a switch statement, the cases are indented\n  at the switch level.\n\n* Switch-cases where local variables are needed should be refactored into\n  separate functions instead of using braces. If braced scope syntax is used,\n  put `break;` statements inside the scope.\n\n```c\nswitch (n) {\ncase 1:\n        break;\ncase 2: {\n        break;\n}\ndefault:\n}\n```\n\n* Lines should be at most 140 characters in length. Considering tabs are 8\n  characters long. Originally this limit was 78, and it's still considered\n  as a good practice, try to keep your functions short and readable, with\n  minimum number of function arguments and not much nesting.\n\n* Braces open on the same line as the for/while/if/else/function/etc. Closing\n  braces are put on a line of their own, except in the else of an if statement\n  or in the while of a do-while statement.\n\n```c\nif (a == b) {\n        ...\n}\n\nif (a == b) {\n        ...\n} else if (a > b) {\n        ...\n}\n\nif (a == b) {\n        ...\n} else {\n        do_something_else ();\n}\n\ndo {\n        do_something ();\n} while (cond);\n\nif (a == b) {\n        b = 3;\n}\n```\n\n* Always use braces for if and while.\n\n```diff\n-if (a == b)\n-        return;\n+if (a == b) {\n+        return;\n+}\n```\n\n* In general, avoid `goto`. The `goto` statement only comes in handy when a\n  function exits from multiple locations and some common work such as cleanup\n  has to be done. If there is no cleanup needed, then just return directly.\n\n  Choose label names which say what the `goto` does or why it exists.  An\n  example of a good name could be `out_buffer:` if the `goto` frees `buffer`.\n  Avoid using GW-BASIC names like `err1:` and `err2:`.\n\n* Use `R_RETURN_*` macros to check for conditions that are caused by\n  programming errors or bugs; i.e.: conditions that should **never** happen. Do\n  not use them when checking for runtime error conditions, such as a `NULL`\n  value being returned from `malloc()`. Use a standard if statement for these\n  cases.\n\n```c\nint check(RCore *c, int a, int b) {\n        /* check for programming errors */\n        R_RETURN_VAL_IF_FAIL (c, false);\n        R_RETURN_VAL_IF_FAIL (a >= 0, b >= 1, false);\n\n        /* check for runtime errors */\n        ut8 *buf = calloc (b, sizeof (a));\n        if (!buf) {\n                return -1;\n        }\n\n        /* continue... */\n}\n```\n\n* Use spaces after keywords and around operators.\n\n```c\na = b + 3;\na = (b << 3) * 5;\na = sizeof (b) * 4;\n```\n\n* Multiline ternary operator conditionals are indented in JavaScript style:\n\n```diff\n-ret = over ?\n-        r_debug_step_over (dbg, 1) :\n-        r_debug_step (dbg, 1);\n+ret = over\n+        ? r_debug_step_over (dbg, 1)\n+        : r_debug_step (dbg, 1);\n```\n\n* When breaking up a long line, use a single additional tab if the current and\n  next lines are aligned. Do not align start of line using spaces.\n\n```diff\n-x = function_with_long_signature_and_many_args (arg1, arg2, arg3, arg4, arg5,\n-                                                arg6, arg7, arg8);\n-y = z;\n+x = function_with_long_signature_and_many_args (arg1, arg2, arg3, arg4, arg5,\n+        arg6, arg7, arg8);\n+y = z;\n```\n\n* Use two additional tabs if the next line is indented to avoid confusion with\n  control flow.\n\n```diff\n if (function_with_long_signature_and_many_args (arg1, arg2, arg3, arg4, arg5,\n-        arg6, arg7, arg8)) {\n+                arg6, arg7, arg8)) {\n         do_stuff ();\n }\n```\n\n* When following the above guideline, if additional indentation is needed on\n  consecutive lines, use a single tab for each nested level. Avoid heavy\n  nesting in this manner.\n\n```diff\n if (condition_1 && condition_2 && condition_3\n                 && (condition_4\n-                                || condition_5)) {\n+                        || condition_5)) {\n         do_stuff ();\n }\n```\n\n* Split long conditional expressions into small `static inline` functions to\n  make them more readable.\n\n```diff\n+static inline bool inRange(RBreakpointItem *b, ut64 addr) {\n+        return (addr >= b->addr && addr < (b->addr + b->size));\n+}\n+\n+static inline bool matchProt(RBreakpointItem *b, int rwx) {\n+        return (!rwx || (rwx && b->rwx));\n+}\n+\n R_API RBreakpointItem *r_bp_get_in(RBreakpoint *bp, ut64 addr, int rwx) {\n         RBreakpointItem *b;\n         RListIter *iter;\n         r_list_foreach (bp->bps, iter, b) {\n-                if (addr >= b->addr && addr < (b->addr+b->size) && \\\n-                        (!rwx || rwx&b->rwx)) {\n+                if (inRange (b, addr) && matchProt (b, rwx)) {\n                         return b;\n                 }\n         }\n         return NULL;\n }\n```\n\n* Use `R_API` to mark exportable (public) methods for module APIs.\n\n* Use `R_IPI` to mark functions internal to a library.\n\n* Other functions should be `static` to avoid polluting the global namespace.\n\n* The structure of C files in r2 should be as follows:\n\n```c\n/* Copyright ... */           // copyright\n#include <r_core.h>           // includes\nstatic int globals            // const, define, global variables\nstatic void helper(void) {}   // static functions\nR_IPI void internal(void) {}  // internal apis (used only inside the library)\nR_API void public(void) {}    // public apis starting with constructor/destructor\n```\n\n* Why do we return `int` instead of `enum`?\n\n  The reason why many r2 functions return int instead of an enum type is\n  because enums can't be OR'ed; additionally, it breaks the usage within a\n  switch statement and swig can't handle it.\n\n```\nr_core_wrap.cxx:28612:60: error: assigning to 'RRegisterType' from incompatible type 'long'\n  arg2 = static_cast< long >(val2); if (arg1) (arg1)->type = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:\n                                                           ^ ~~~~\nr_core_wrap.cxx:32103:61: error: assigning to 'RDebugReasonType' from incompatible type 'int'\n    arg2 = static_cast< int >(val2); if (arg1) (arg1)->type = arg2; resultobj = SWIG_Py_Void(); return resultobj; fail:\n                                                            ^ ~~~~\n```\n\n* Do not leave trailing whitespaces at end-of-line.\n\n* Do not use `<assert.h>`. Use `\"r_util/r_assert.h\"` instead.\n\n* You can use `export R2_DEBUG_ASSERT=1` to set a breakpoint when hitting an assert.\n\n* Declare variables at the beginning of code blocks - use C89 declaration\n  instead of C99. In other words, do not mix declarations and code. This helps\n  reduce the number of local variables per function and makes it easier to find\n  which variables are used where.\n\n* Always put a space before an opening parenthesis (function calls, conditionals,\n  for loops, etc.) except when defining a function signature. This is useful\n  for searching the code base with `grep`.\n\n```c\n-if(a == b){\n+if (a == b) {\n```\n\n```c\n-static int check(RCore *core, int a);\n+static int check (RCore *core, int a);\n```\n\n* Where is `function_name()` defined?\n\n```sh\ngrep -R 'function_name(' libr\n```\n\n* Where is `function_name()` used?\n\n```sh\ngrep -R 'function_name (' libr\n```\n\n* Function names should be explicit enough to not require a comment explaining\n  what it does when seen elsewhere in code.\n\n* **Do not use global variables**. The only acceptable time to use them is for\n  singletons and WIP code. Make a comment explaining why it is needed.\n\n* Commenting out code should be avoided because it reduces readability. If you\n  *really* need to comment out code, use `#if 0` and `#endif`.\n\n* Avoid very long functions; split it into multiple sub-functions or simplify\n  your approach.\n\n* Use types from `<r_types.h>` instead of the ones in `<stdint.h>`, which are\n  known to cause some portability issues. Replace `uint8_t` with `ut8`, etc.\n\n* Never use `%lld` or `%llx`, which are not portable. Use the `PFMT64` macros\n  from `<r_types.h>`.\n\n### Shell scripts\n\n* Use `#!/bin/sh`.\n\n* Do not use BASH-only features; `[[`, `$'...'`, etc.\n\n* Use `sys/shellcheck.sh` to check for problems and BASH-only features.\n\n## Managing endianness\n\nEndianness is a common stumbling block when processing buffers or streams and\nstoring intermediate values as integers larger than one byte.\n\n### Problem\n\nThe following code may seem intuitively correct:\n\n```c\nut8 opcode[4] = {0x10, 0x20, 0x30, 0x40};\nut32 value = *(ut32*)opcode;\n```\n\nHowever, when `opcode` is cast to `ut32`, the compiler interprets the memory\nlayout based on the host CPU's endianness. On little-endian architectures such\nas x86, the least-signficiant byte comes first, so `value` contains\n`0x40302010`. On a big-endian architecture, the most-significant byte comes\nfirst, so `value` contains `0x10203040`. This implementation-defined behavior\nis inherently unstable and should be avoided.\n\n### Solution\n\nTo avoid dependency on endianness, use bit-shifting and bitwise OR\ninstructions. Instead of casting streams of bytes to larger width integers, do\nthe following for little endian:\n\n```c\nut8 opcode[4] = {0x10, 0x20, 0x30, 0x40};\nut32 value = opcode[0] | opcode[1] << 8 | opcode[2] << 16 | opcode[3] << 24;\n```\n\nAnd do the following for big endian:\n\n```c\nut32 value = opcode[3] | opcode[2] << 8 | opcode[1] << 16 | opcode[0] << 24;\n```\n\nThis behavior is not dependent on architecture, and will act consistently\nbetween any standard compilers regardless of host endianness.\n\n### Endian helper functions\n\nThe above is not very easy to read. Within radare2, use endianness helper\nfunctions to interpret byte streams in a given endianness.\n\n```c\nval32 = r_read_be32(buffer)         // reads 4 bytes from a stream in BE\nval32 = r_read_le32(buffer)         // reads 4 bytes from a stream in LE\nval32 = r_read_ble32(buffer, isbig) // reads 4 bytes from a stream:\n                                    //   if isbig is true, reads in BE\n                                    //   otherwise reads in LE\n```\n\nSuch helper functions exist for 64, 32, 16, and 8 bit reads and writes.\n\n* Note that 8 bit reads are equivalent to casting a single byte of the buffer\n  to a `ut8` value, i.e.: endian is irrelevant.\n\n## Editor configuration\n\nVim/Neovim:\n\n```vim\nsetl cindent\nsetl tabstop=8\nsetl noexpandtab\nsetl cino=:0,+0,(2,J0,{1,}0,>8,)1,m1\n```\n\nEmacs:\n\n```elisp\n(c-add-style \"radare2\"\n             '((c-basic-offset . 8)\n               (tab-width . 8)\n               (indent-tabs-mode . t)\n               ;;;; You would need (put 'c-auto-align-backslashes 'safe-local-variable 'booleanp) to enable this\n               ;; (c-auto-align-backslashes . nil)\n               (c-offsets-alist\n                (arglist-intro . ++)\n                (arglist-cont . ++)\n                (arglist-cont-nonempty . ++)\n                (statement-cont . ++)\n                )))\n```\n\nYou may use directory-local variables by adding the following to\n`.dir-locals.el`.\n\n```elisp\n((c-mode .  ((c-file-style . \"radare2\"))))\n```\n\n## Packed structures\n\nDue to standards differing between compilers, radare2 provides a portable\nhelper macro for packed structures: `R_PACKED()`, which will automatically\nutilize the correct compiler-dependent macro. Do not use `#pragma pack` or\n`__attribute__((packed))`. Place the packed structure inside `R_PACKED()` like\nso:\n\n```c\nR_PACKED (struct mystruct {\n        int a;\n        char b;\n});\n```\n\nIf you are using `typedef`, do not encapsulate the type name.\n\n```c\nR_PACKED (typedef struct mystruct_t {\n        int a;\n        char b;\n}) mystruct;\n```\n\n## Modules\n\nradare2 is split into modular libraries in the `libr/` directory. The `binr/`\ndirectory contains programs which use these libraries.\n\nThe libraries can be built individually, PIC or non-PIC. You can also create a\nsingle static library archive (`.a`) which you can link your own programs\nagainst to use radare2's libraries without depending on an existing system\ninstallation. See [doc/static.md](doc/static.md) for more info.\n\n[This presentation](http://radare.org/get/lacon-radare-2009/) gives a good\noverview of the libraries. //Link not working temporarily.\n\n## API\n\nThe external API is maintained in a different repository. The API function\ndefinitions in C header files are derived from and documented in the\n`radare2-bindings` repository, found\n[here](https://github.com/radareorg/radare2-bindings).\n\nCurrently, the process of updating the header files from changed API bindings\nrequires human intervention, to ensure that proper review occurs. Incorrect\ndefinitions in the C header files will trigger a build failure in the bindings\nrepository.\n\nIf you are able to write a plugin for various IDE that can associate the\nbindings with the header files, such a contribution would be very welcome.\n\n## Dependencies and installation\n\nradare2 does not require external dependencies. On \\*nix-like systems, it\nrequires only a standard C compiler and GNU `make`. For compiling on Windows,\nsee [doc/windows.md](doc/windows.md). Browse the [doc/](doc/) folder for other\narchitectures. For cross-compilation, see\n[doc/cross-compile.md](doc/cross-compile.md).\n\n## Recompiling and Outdated Dependencies\n\nWhen recompiling code, ensure that you recompile all dependent modules (or\nsimply recompile the entire project). If a module's dependency is not\nrecompiled and relinked, it may cause segmentation faults due to outdated\nstructures and libraries. Such errors are not handles automatically, so if you\nare not sure, recompile all modules.\n\nTo speed up frequent recompilation, you can use `ccache` like so:\n\n```sh\nexport CC=\"ccache gcc\"\n```\n\nThis will automatically detect when files do not need to recompiled and avoid\nunnecessary work.\n\nIt is not necessary to recompile the whole project everytime. Just run make in\nthe directory you are working on to compile these parts only by using:\n\n```sh\nmake\n```\n\nwhile inside a modified module (eg: `libr/core`).\n\nNote that if you have radare2 already installed, you don't have to reinstall it\nagain after recompilation, as the compiled libraries are connected through the symlinks.\n\n## Repeated installation\n\nThere is an alternative installation method for radare2 to make it easier to\nrepeatedly install while making changes. The `symstall` target creates a single\nsystem-wide installation using symlinks instead of copies, making repeated\nbuilds faster.\n\n```sh\nsudo make symstall\n```\n\n## Source repository\n\nThe source for radare2 can be found in the following GitHub repository:\n\n```sh\ngit clone https://github.com/radareorg/radare2\n```\n\nOther packages radare2 depends on, such as Capstone, are pulled from\ntheir git repository as required.\n\nTo get an up-to-date copy of the repository, you should perform the\nfollowing while on the `master` branch:\n\n```sh\ngit pull\n```\n\nIf your local git repository is not tracking upstream, you may need to use the\nfollowing:\n\n```sh\ngit pull https://github.com:radareorg/radare2 master\n```\n\nThe installation scripts `sys/user.sh`, `sys/install.sh`, `sys/meson.py`, and\n`sys/termux.sh` will automatically identify and update using an existing\nupstream remote, if one exists. If not, it will pull using a direct URL.\n\nIf you have modified files on the `master` branch, you may encounter conflicts\nthat must be resolved manually. To save your changes, work on a different\nbranch as described in [CONTRIBUTING.md](CONTRIBUTING.md). If you wish to\ndiscard your current work, use the following commands:\n\n```sh\ngit clean -xdf\ngit reset --hard\nrm -rf shlr/capstone\n```\n\n## Regression testing\n\nUse `r2r` to run the radare2 regression test suite, e.g.:\n\n```sh\nsys/install.sh\nr2r\n```\n\nr2r's source can be found in the `test/` directory, while binaries used for\ntests are located in the following GitHub repository:\n\n```sh\ngit clone https://github.com/radareorg/radare2-testbins\n```\n\nThese can be found in `test/bins/` after being downloaded by r2r.\n\nFor more information, see [r2r's\nREADME](https://github.com/radareorg/radare2-testbins/blob/master/README).\n\nThe test files can be found in `test/db/`. Each test consists of a unique name,\nan input file, a list of input commands, and the expected output. The test must\nbe terminated with a line consisting only of `RUN`.\n\nTesting can always be improved. If you can contribute additional tests or fix\nexisting tests, it is greatly appreciated.\n\n## Reporting bugs\n\nIf you encounter a broken feature, issue, error, problem, or it is unclear how\nto do something that should be covered by radare2's functionality, report an\nissue on the GitHub repository\n[here](https://github.com/radareorg/radare2/issues).\n\nIf you are looking for feedback, check out the [Community section in the\nREADME](README.md#Community) for places where you can contact other r2 devs.\n\n# HOW TO RELEASE\n\n - Set `RELEASE=1` in global.mk and r2-bindings/config.mk.acr.\n - Use `bsdtar` from libarchive package. GNU tar is broken.\n\n  RADARE2\n  ---\n   - bump revision\n   - `./configure`\n   - `make dist`\n\n  R2-BINDINGS\n  ---\n   - `./configure --enable-devel`\n   - `make`\n   - `make dist`\n\n  - Update the [paths on the website](https://github.com/radareorg/radareorg/blob/master/source/download_paths.rst)\n\n# Additional resources\n\n * [CONTRIBUTING.md](CONTRIBUTING.md)\n * [README.md](README.md)\n * [USAGE.md](USAGE.md)\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 1.6357421875,
          "content": "# Installation\n\nYou can find the most recent packaged versions on the\n[Releases](https://github.com/radareorg/radare2/releases) page. However,\ninstalling from git is recommended whenever possible.\n\nThe most used and recommended way is by running `sys/install.sh` which will\nbuild and install r2 from sources and install it **system-wide** using\n**symlinks**.\n\n```sh\ngit clone https://github.com/radareorg/radare2\nradare2/sys/install.sh\n```\n\nTo install in your user's home directory, use `sys/user.sh`. To manage multiple\ninstallations on the same system, use\n[r2env](https://github.com/radareorg/r2env).\n\nThe focus on portability enables r2 to be built in many different ways for\nmultiple operating systems easily by using the `./configure && make` or `meson`\nbuild systems.\n\nr2env allows you to build and install different versions of r2 in your home or\nsystem and it is available via Python's `pip` tool.\n\n```sh\npip install r2env\nr2env init\nr2env add radare2@git\n```\n\n## Uninstallation\n\nIn case of a polluted filesystem, you can uninstall the current version\nor remove all previous installations with one or more of those commands:\n\n```sh\nsudo chown -R $USER  # Fix permissions\nmake uninstall       # Remove the current installation\nmake purge           # Remove all files from all installations\nmake system-purge    # Remove all installed packages\ngit clean -xdf       # Remove any files not tracked by git\nrm -rf shlr/capstone # Remove the current version of capstone\n```\n\n# Packaging status\n\n<a href=\"https://repology.org/metapackage/radare2\">\n<img src=\"https://repology.org/badge/vertical-allrepos/radare2.svg\" alt=\"Packaging status\" align=\"right\" width=\"150px\">\n</a>\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.361328125,
          "content": "-include config-user.mk\ninclude global.mk\n\nPREVIOUS_RELEASE=`git log --tags --simplify-by-decoration --pretty='format:%d'|head -n1|cut -d ' ' -f3 |sed -e 's,),,'`\n\nB=$(DESTDIR)$(BINDIR)\nL=$(DESTDIR)$(LIBDIR)\nMESON?=meson\nPYTHON?=python\nR2BINS=$(shell cd binr ; echo r*2 r2agent r2pm r2-indent r2r)\nifdef SOURCE_DATE_EPOCH\nBUILDSEC=$(shell date -u -d \"@$(SOURCE_DATE_EPOCH)\" \"+__%H:%M:%S\" 2>/dev/null || date -u -r \"$(SOURCE_DATE_EPOCH)\" \"+__%H:%M:%S\" 2>/dev/null || date -u \"+__%H:%M:%S\")\nelse\nBUILDSEC=$(shell date \"+__%H:%M:%S\")\nendif\nDATADIRS=libr/cons/d libr/flag/d libr/bin/d libr/asm/d libr/syscall/d libr/magic/d libr/anal/d libr/util/d libr/arch/d\nUSE_ZIP=YES\nZIP=zip\n\nR2VC=$(shell git rev-list --all --count 2>/dev/null)\nifeq ($(R2VC),)\n# release\nR2VC=0\nendif\n\nSTRIP?=strip\nifneq ($(shell xz --help 2>/dev/null | grep improve),)\nTAR=tar -cvf\nTAREXT=tar.xz\nCZ=xz -f\nelse\nTAR=bsdtar cvf\nTAREXT=tar.gz\nCZ=gzip -f\nendif\nPWD=$(shell pwd)\n\nifeq ($(BUILD_OS),windows)\nifeq ($(OSTYPE),mingw32)\nifneq (,$(findstring mingw32-make,$(MAKE)))\nifneq ($(APPVEYOR),True)\n\tLC_ALL=C\n\texport LC_ALL\nendif\nendif\nendif\nendif\n\nall: plugins.cfg libr/include/r_version.h\n\t@libr/count.sh reset\n\t${MAKE} -C shlr sdbs\n\t${MAKE} -C shlr/zip\n\t${MAKE} -C libr/util\n\t${MAKE} -C libr/socket\n\t${MAKE} -C shlr\n\t${MAKE} -C libr\n\t${MAKE} -C binr\n\nGIT_TAP=$(shell git describe --tags --match '[0-9]*' 2>/dev/null)\nGIT_TIP=$(shell git rev-parse HEAD 2>/dev/null || echo $(R2_VERSION))\nR2_VER=$(shell ./configure -qV)\nifeq ($(GIT_TAP),)\nGIT_TAP=$(R2_VER)\nendif\nifeq ($(GIT_TIP),)\nGIT_TIP=$(R2_VER)\nendif\nifdef SOURCE_DATE_EPOCH\nGIT_NOW=$(shell date -u -d \"@$(SOURCE_DATE_EPOCH)\" \"+%Y-%m-%d\" 2>/dev/null || date -u -r \"$(SOURCE_DATE_EPOCH)\" \"+%Y-%m-%d\" 2>/dev/null || date -u \"+%Y-%m-%d\")\nelse\nGIT_NOW=$(shell date \"+%Y-%m-%d\")\nendif\n\ntap tiptap tip:\n\t@echo tip $(GIT_TIP)\n\t@echo tap $(GIT_TAP)\n\nlibr/include/r_version.h:\n\t@echo Generating r_version.h file\n\t@echo '#ifndef R_VERSION_H' > $@.tmp\n\t@echo '#define R_VERSION_H 1' >> $@.tmp\n\t@echo '#define R2_VERSION_COMMIT $(R2VC)' >> $@.tmp\n\t@echo '#define R2_VERSION \"$(R2_VERSION)\"' >> $@.tmp\n\t@echo '#define R2_VERSION_MAJOR $(R2_VERSION_MAJOR)' >> $@.tmp\n\t@echo '#define R2_VERSION_MINOR $(R2_VERSION_MINOR)' >> $@.tmp\n\t@echo '#define R2_VERSION_PATCH $(R2_VERSION_PATCH)' >> $@.tmp\n\t@echo '#define R2_VERSION_NUMBER $(R2_VERSION_NUMBER)' >> $@.tmp\n\t@echo '#define R2_GITTAP $(ESC)\"$(GIT_TAP)$(ESC)\"' >> $@.tmp\n\t@echo '#define R2_GITTIP $(ESC)\"$(GIT_TIP)$(ESC)\"' >> $@.tmp\n\t@echo '#define R2_BIRTH $(ESC)\"$(GIT_NOW)$(BUILDSEC)$(ESC)\"' >> $@.tmp\n\t@echo '#endif' >> $@.tmp\n\t@mv -f $@.tmp $@\n\t@rm -f $@.tmp\n\nplugins.cfg:\n\t@if [ ! -e config-user.mk ]; then echo ; \\\n\techo \"  Please, run ./configure first\" ; echo ; exit 1 ; fi\n\t$(SHELL) ./configure-plugins\n\nw32:\n\tsys/mingw32.sh\n\ndepgraph.png:\n\tcd libr ; perl depgraph.pl dot | dot -Tpng -o../depgraph.png\n\nandroid:\n\t@if [ -z \"$(NDK_ARCH)\" ]; then echo \"Set NDK_ARCH=[arm|arm64|mips|x86]\" ; false; fi\n\tsys/android-${NDK_ARCH}.sh\n\nw32dist:\n\t${MAKE} windist WINBITS=w32\n\nw64dist:\n\t${MAKE} windist WINBITS=w64\n\nWINDIST=${WINBITS}dist\nZIPNAME?=radare2-${WINBITS}-${VERSION}.zip\n\nC=$(shell printf \"\\033[32m\")\nR=$(shell printf \"\\033[0m\")\nwindist:\n\t@echo \"${C}[WINDIST] Installing binaries and libraries${R}\"\n\t[ -n \"${WINBITS}\" ] || exit 1\n\trm -rf \"radare2-${WINBITS}-${VERSION}\" \"${WINDIST}\"\n\tmkdir \"${WINDIST}\"\n\tfor FILE in `find libr | grep -e dll$$`; do cp \"$$FILE\" \"${WINDIST}\" ; done\n\tfor FILE in `find binr | grep -e exe$$`; do cp \"$$FILE\" \"${WINDIST}\" ; done\n\trm -f \"${WINDIST}/plugin.dll\"\n\t@echo \"${C}[WINDIST] Picking plugins from libraries${R}\"\n\tmkdir -p \"${WINDIST}/libs\"\n\tmv \"${WINDIST}/\"lib*.dll \"${WINDIST}/libs\"\n\tmkdir -p \"${WINDIST}/plugins\"\n\tmv ${WINDIST}/*.dll \"${WINDIST}/plugins\"\n\tmv ${WINDIST}/libs/* \"${WINDIST}\"\n\t@echo \"${C}[WINDIST] Do not include plugins for now${R}\"\n\trm -rf \"${WINDIST}/libs\"\n\trm -rf ${WINDIST}/plugins/*\n\t@echo \"${C}[WINDIST] Copying web interface${R}\"\n\tmkdir -p \"${WINDIST}/www\"\n\tcp -rf shlr/www/* \"${WINDIST}/www\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/magic\"\n\tcp -f libr/magic/d/default/* \"${WINDIST}/share/radare2/${VERSION}/magic\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/syscall\"\n\tcp -f libr/syscall/d/*.sdb \"${WINDIST}/share/radare2/${VERSION}/syscall\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/sysregs\"\n\tcp -f libr/sysregs/d/*.sdb \"${WINDIST}/share/radare2/${VERSION}/sysregs\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/fcnsign\"\n\tcp -f libr/anal/d/*.sdb \"${WINDIST}/share/radare2/${VERSION}/fcnsign\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/platform\"\n\tcp -f libr/arch/d/*.r2 \"${WINDIST}/share/radare2/${VERSION}/platform\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/opcodes\"\n\tcp -f libr/asm/d/*.sdb \"${WINDIST}/share/radare2/${VERSION}/opcodes\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/scripts\"\n\tcp -f scripts/*.js scripts/*.py \"${WINDIST}/share/radare2/${VERSION}/scripts\"\n\tmkdir -p \"${WINDIST}/share/radare2/${VERSION}/flag\"\n\tcp -f libr/flag/d/*.r2 \"${WINDIST}/share/radare2/${VERSION}/flag\"\n\tmkdir -p \"${WINDIST}/share/doc/radare2\"\n\tmkdir -p \"${WINDIST}/include/libr/sdb\"\n\tmkdir -p \"${WINDIST}/include/libr/r_util\"\n\tmkdir -p \"${WINDIST}/include/libr/r_anal\"\n\t@echo \"${C}[WINDIST] Copying development files${R}\"\n\tcp -f subprojects/sdb/include/*.h \"${WINDIST}/include/libr/sdb/\"\n\tcp -f libr/include/r_util/*.h \"${WINDIST}/include/libr/r_util/\"\n\tcp -f libr/include/r_anal/*.h \"${WINDIST}/include/libr/r_anal/\"\n\tcp -f libr/include/*.h \"${WINDIST}/include/libr\"\n\t#mkdir -p \"${WINDIST}/include/libr/sflib\"\n\t@cp -f doc/fortunes.* \"${WINDIST}/share/doc/radare2\"\n\t@mkdir -p \"${WINDIST}/share/radare2/${VERSION}/format/dll\"\n\t@cp -f libr/bin/d/elf32 \"${WINDIST}/share/radare2/${VERSION}/format\"\n\t@cp -f libr/bin/d/elf64 \"${WINDIST}/share/radare2/${VERSION}/format\"\n\t@cp -f libr/bin/d/elf_enums \"${WINDIST}/share/radare2/${VERSION}/format\"\n\t@cp -f libr/bin/d/pe32 \"${WINDIST}/share/radare2/${VERSION}/format\"\n\t@cp -f libr/bin/d/trx \"${WINDIST}/share/radare2/${VERSION}/format\"\n\t@cp -f libr/bin/d/dll/*.sdb \"${WINDIST}/share/radare2/${VERSION}/format/dll\"\n\t@mkdir -p \"${WINDIST}/share/radare2/${VERSION}/cons\"\n\t@cp -PRpf libr/cons/d/* \"${WINDIST}/share/radare2/${VERSION}/cons\"\n\t@mkdir -p \"${WINDIST}/share/radare2/${VERSION}/hud\"\n\t@cp -f doc/hud \"${WINDIST}/share/radare2/${VERSION}/hud/main\"\n\t@mv \"${WINDIST}\" \"radare2-${WINBITS}-${VERSION}\"\n\t@rm -f \"radare2-${WINBITS}-${VERSION}.zip\"\nifneq ($(USE_ZIP),NO)\n\t$(ZIP) -r \"${ZIPNAME}\" \"radare2-${WINBITS}-${VERSION}\"\nendif\n\nclean:\n\trm -f libr/libr.a libr/libr.dylib libr/include/r_version.h\n\trm -rf libr/.libr\n\t-rm -f `find * | grep arm | grep dis.a$$`\n\tfor DIR in shlr libr binr ; do $(MAKE) -C \"$$DIR\" clean ; done\n\trm -f `find . -type f -name '*.d'` || for a in `find . -type f -name '*.d'` ; do rm -f \"$$a\" ; done\n\trm -f `find . -type f -name '*.o'` || for a in `find . -type f -name '*.o'` ; do rm -f \"$$a\" ; done\n\trm -f config-user.mk plugins.cfg libr/config.h\n\trm -f libr/include/r_userconf.h libr/config.mk\n\trm -f pkgcfg/*.pc\n\ndistclean mrproper: clean\n\trm -rf libr/arch/p/arm/v35/arch-arm*\n\trm -rf shlr/capstone\n\t$(MAKE) -C subprojects clean \n\npkgcfg:\n\tcd libr && ${MAKE} pkgcfg\n\ninstall-man:\n\tmkdir -p \"${DESTDIR}${MANDIR}/man1\"\n\tmkdir -p \"${DESTDIR}${MANDIR}/man7\"\n\tfor FILE in man/*.1 ; do ${INSTALL_MAN} \"$$FILE\" \"${DESTDIR}${MANDIR}/man1\" ; done\n\tcd \"${DESTDIR}${MANDIR}/man1\" && ln -fs radare2.1 r2.1\n\tfor FILE in man/*.7 ; do ${INSTALL_MAN} \"$$FILE\" \"${DESTDIR}${MANDIR}/man7\" ; done\n\ninstall-man-symlink:\n\tmkdir -p \"${DESTDIR}${MANDIR}/man1\"\n\tmkdir -p \"${DESTDIR}${MANDIR}/man7\"\n\tfor FILE in $(shell cd man && ls *.1) ; do \\\n\t\tln -fs \"${PWD}/man/$$FILE\" \"${DESTDIR}${MANDIR}/man1/$$FILE\" ; done\n\tcd \"${DESTDIR}${MANDIR}/man1\" && ln -fs radare2.1 r2.1\n\tfor FILE in $(shell cd man && ls *.7) ; do \\\n\t\tln -fs \"${PWD}/man/$$FILE\" \"${DESTDIR}${MANDIR}/man7/$$FILE\" ; done\n\ninstall-doc:\n\tmkdir -p \"${DESTDIR}${DOCDIR}\"\n\t${INSTALL_DIR} \"${DESTDIR}${DOCDIR}\"\n\t@echo ${DOCDIR}\n\tfor FILE in doc/* ; do \\\n\t\tif [ -f $$FILE ]; then ${INSTALL_DATA} $$FILE \"${DESTDIR}${DOCDIR}\" || true ; fi; \\\n\tdone\n\ninstall-doc-symlink:\n\tmkdir -p \"${DESTDIR}${DOCDIR}\"\n\t${INSTALL_DIR} \"${DESTDIR}${DOCDIR}\"\n\tfor FILE in $(shell cd doc ; ls) ; do \\\n\t\tln -fs \"$(PWD)/doc/$$FILE\" \"${DESTDIR}${DOCDIR}\" ; done\n\ninstall: install-doc install-man install-www install-pkgconfig\n\t$(MAKE) -C libr install\n\t$(MAKE) -C binr install\n\t$(MAKE) -C shlr install\n\tfor DIR in ${DATADIRS} ; do $(MAKE) -C \"$$DIR\" install ; done\n\tcd \"$(DESTDIR)$(LIBDIR)/radare2/\" && rm -f last && ln -fs $(VERSION) last\n\tcd \"$(DESTDIR)$(DATADIR)/radare2/\" && rm -f last && ln -fs $(VERSION) last\n\trm -rf \"${DESTDIR}${DATADIR}/radare2/${VERSION}/scripts\"\n\tmkdir -p \"${DESTDIR}${DATADIR}/radare2/${VERSION}/scripts\"\n\tcp -rf scripts/*.js scripts/*.py \"${DESTDIR}${DATADIR}/radare2/${VERSION}/scripts\"\n\trm -rf \"${DESTDIR}${DATADIR}/radare2/${VERSION}/hud\"\n\tmkdir -p \"${DESTDIR}${DATADIR}/radare2/${VERSION}/hud\"\n\tmkdir -p \"${DESTDIR}${BINDIR}\"\n\t#${INSTALL_SCRIPT} \"${PWD}/sys/indent.sh\" \"${DESTDIR}${BINDIR}/r2-indent\"\n\tcp -f doc/hud \"${DESTDIR}${DATADIR}/radare2/${VERSION}/hud/main\"\n\tmkdir -p \"${DESTDIR}${DATADIR}/radare2/${VERSION}/\"\n\t$(SHELL) ./configure-plugins --rm-static $(DESTDIR)$(LIBDIR)/radare2/last/\n\tcp -f subprojects/sdb/sdb \"${DESTDIR}${BINDIR}/r2sdb\"\n\ninstall-www:\n\trm -rf \"${DESTDIR}${WWWROOT}\"\n\trm -rf \"${DESTDIR}${LIBDIR}/radare2/${VERSION}/www\" # old dir\n\tmkdir -p \"${DESTDIR}${WWWROOT}\"\n\tcp -rf shlr/www/* \"${DESTDIR}${WWWROOT}\"\n\nsymstall-www:\n\trm -rf \"${DESTDIR}${WWWROOT}\"\n\trm -rf \"${DESTDIR}${LIBDIR}/radare2/${VERSION}/www\" # old dir\n\tmkdir -p \"${DESTDIR}${WWWROOT}\"\n\tfor FILE in $(shell cd shlr/www ; ls) ; do \\\n\t\tln -fs \"$(PWD)/shlr/www/$$FILE\" \"$(DESTDIR)$(WWWROOT)\" ; done\n\ninstall-pkgconfig pkgconfig-install:\n\t@${INSTALL_DIR} \"${DESTDIR}${LIBDIR}/pkgconfig\"\n\tfor FILE in $(shell cd pkgcfg ; ls *.pc) ; do \\\n\t\tcp -f \"$(PWD)/pkgcfg/$$FILE\" \"${DESTDIR}${LIBDIR}/pkgconfig/$$FILE\" ; done\n\ninstall-pkgconfig-symlink pkgconfig-symstall symstall-pkgconfig:\n\tmkdir -p \"${DESTDIR}${LIBDIR}/pkgconfig\"\n\t@${INSTALL_DIR} \"${DESTDIR}${LIBDIR}/pkgconfig\"\n\tfor FILE in $(shell cd pkgcfg ; ls *.pc) ; do \\\n\t\tln -fs \"$(PWD)/pkgcfg/$$FILE\" \"${DESTDIR}${LIBDIR}/pkgconfig/$$FILE\" ; done\n\nsymstall-sdb:\n\tfor DIR in ${DATADIRS} ; do (\\\n\t\tcd \"$$DIR\" ; \\\n\t\techo \"$$DIR\" ; \\\n\t\t${MAKE} install-symlink ); \\\n\tdone\n\nsymstall install-symlink: install-man-symlink install-doc-symlink install-pkgconfig-symlink symstall-www symstall-sdb\n\tcd libr && ${MAKE} install-symlink\n\tcd binr && ${MAKE} install-symlink\n\tcd shlr && ${MAKE} install-symlink\n\tmkdir -p \"${DESTDIR}${BINDIR}\"\n\tln -fs \"${PWD}/sys/indent.sh\" \"${DESTDIR}${BINDIR}/r2-indent\"\n\trm -rf \"${DESTDIR}${DATADIR}/radare2/${VERSION}/scripts\"\n\tln -fs scripts \"${DESTDIR}${DATADIR}/radare2/${VERSION}/scripts\"\n\tmkdir -p \"${DESTDIR}${DATADIR}/radare2/${VERSION}/hud\"\n\tln -fs \"${PWD}/doc/hud\" \"${DESTDIR}${DATADIR}/radare2/${VERSION}/hud/main\"\n\t#mkdir -p \"${DESTDIR}${DATADIR}/radare2/${VERSION}/flag\"\n\t#ln -fs $(PWD)/libr/flag/d/tags.r2 \"${DESTDIR}${DATADIR}/radare2/${VERSION}/flag/tags.r2\"\n\tcd \"$(DESTDIR)$(LIBDIR)/radare2/\" && rm -f last && ln -fs $(VERSION) last\n\tcd \"$(DESTDIR)$(DATADIR)/radare2/\" && rm -f last && ln -fs $(VERSION) last\n\tmkdir -p \"${DESTDIR}${DATADIR}/radare2/${VERSION}/\"\n\t$(SHELL) ./configure-plugins --rm-static $(DESTDIR)/$(LIBDIR)/radare2/last/\n\ndeinstall uninstall:\n\trm -f $(DESTDIR)$(BINDIR)/r2-indent\n\tcd libr && ${MAKE} uninstall\n\tcd binr && ${MAKE} uninstall\n\tcd shlr && ${MAKE} uninstall\n\tcd libr/util/d && ${MAKE} uninstall\n\tcd libr/syscall/d && ${MAKE} uninstall\n\tcd libr/anal/d && ${MAKE} uninstall\n\tcd libr/arch/d && ${MAKE} uninstall\n\t@echo\n\t@echo \"Run 'make purge' to also remove installed files from previous versions of r2\"\n\t@echo\n\npurge-doc:\n\trm -rf \"${DESTDIR}${DOCDIR}\"\n\tcd man ; for FILE in *.1 ; do rm -f \"${DESTDIR}${MANDIR}/man1/$$FILE\" ; done\n\trm -f \"${DESTDIR}${MANDIR}/man1/r2.1\"\n\nuser-wrap=echo \"\\#!/bin/sh\" > ~/bin/\"$1\" \\\n; echo \"${PWD}/env.sh '${PREFIX}' '$1' \\\"\\$$@\\\"\" >> ~/bin/\"$1\" \\\n; chmod +x ~/bin/\"$1\" ;\n\npurge-dev:\n\trm -f \"${DESTDIR}${LIBDIR}/libr_\"*\".${EXT_AR}\"\n\trm -f \"${DESTDIR}${LIBDIR}/pkgconfig/r_\"*.pc\n\trm -rf \"${DESTDIR}${INCLUDEDIR}/libr\"\n\trm -f \"${DESTDIR}${LIBDIR}/radare2/${VERSION}/-\"*\n\n# required for EXT_SO\ninclude libr/config.mk\n\nstrip:\n\t#-for FILE in ${R2BINS} ; do ${STRIP} -s \"${DESTDIR}${BINDIR}/$$FILE\" 2> /dev/null ; done\nifeq ($(HOST_OS),darwin)\n\t-${STRIP} -STxX \"${DESTDIR}${LIBDIR}/libr_\"*\".${EXT_SO}\"\nelse\n\t-${STRIP} -s \"${DESTDIR}${LIBDIR}/libr_\"*\".${EXT_SO}\"\nendif\n\npurge: purge-doc purge-dev uninstall\n\tfor FILE in ${R2BINS} ; do rm -f \"${DESTDIR}${BINDIR}/$$FILE\" ; done\n\trm -f \"${DESTDIR}${BINDIR}/ragg2-cc\"\n\trm -f \"${DESTDIR}${BINDIR}/r2\"\n\trm -f \"${DESTDIR}${LIBDIR}/libr_\"*\n\trm -f \"${DESTDIR}${LIBDIR}/libr2\"*\".${EXT_SO}\"\n\trm -rf \"${DESTDIR}${LIBDIR}/radare2\"\n\trm -rf \"${DESTDIR}${INCLUDEDIR}/libr\"\n\trm -rf \"${DESTDIR}${DATADIR}/radare2\"\n\nsystem-purge: purge\n\tsys/purge.sh\n\nuser-purge:\n\trm -rf $(HOME)/.local/share/radare2\n\ndist:\n\t$(MAKE) -C dist/tarball\n\tcp -f dist/tarball/*.$(TAREXT) .\n\tcp -f dist/tarball/*.zip .\n\nshot:\n\t$(MAKE) -C dist/tarball VERSION=`date '+%Y%m%d'`\n\ntests test:\n\t$(MAKE) -j -C test\n\nmacos-sign:\n\t$(MAKE) -C binr/radare2 macos-sign\n\nmacos-sign-libs:\n\t$(MAKE) -C binr/radare2 macos-sign-libs\n\nosx-pkg:\n\tsys/osx-pkg.sh $(VERSION)\n\nquality:\n\t./sys/shellcheck.sh\n\nctags:\n\t@ctags **/*.c **/*.h > /dev/null\n\nmenu nconfig:\n\t./sys/menu.sh || true\n\ninclude mk/meson.mk\ninclude ${MKPLUGINS}\n\n.PHONY: all clean install symstall uninstall deinstall strip\n.PHONY: libr binr install-man w32dist tests dist shot pkgcfg depgraph.png love\n.PHONY: purge system-purge\n.PHONY: shlr/capstone\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.984375,
          "content": "<a href=\"https://radare.org/\"><img border=0 src=\"doc/images/r2emoji.png\" alt=\"screenshot\" align=\"left\" width=\"128px\"></a>\n\n## Radare2: Libre Reversing Framework for Unix Geeks\n\n[![Latest packaged version](https://repology.org/badge/latest-versions/radare2.svg)](https://repology.org/project/radare2/versions) [![Tests Status](https://github.com/radareorg/radare2/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/radareorg/radare2/actions/workflows/ci.yml?query=branch%3Amaster) [![build](https://github.com/radareorg/radare2/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/radareorg/radare2/actions/workflows/build.yml?query=branch%3Amaster) [![tcc](https://github.com/radareorg/radare2/actions/workflows/tcc.yml/badge.svg?branch=master)](https://github.com/radareorg/radare2/actions/workflows/tcc.yml)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/741/badge)](https://bestpractices.coreinfrastructure.org/projects/741) [![Build Status](https://scan.coverity.com/projects/416/badge.svg)](https://scan.coverity.com/projects/416) [![Discord](https://badgen.net/discord/members/YBey7CR9jf)](https://discord.gg/YBey7CR9jf)\n\nSee the [Releases](https://github.com/radareorg/radare2/releases) page for\ndownloads. The current git `master` branch is `5.9.9`, next will be `6.0.0`.\n\n* Since 5.6.0, patch releases are [abi stable](doc/abi.md)\n* Even patch numbers used for releases, odd ones for git.\n* .9 patch versions reflect the abi breaking seasson\n\n### Description\n\nr2 is a complete rewrite of radare. It provides a set of libraries, tools and\nplugins to ease reverse engineering tasks. Distributed mostly under LGPLv3,\neach plugin can have different licenses (see r2 -L, rasm2 -L, ...).\n\nThe radare project started as a simple command-line hexadecimal editor focused\non forensics. Today, r2 is a featureful low-level command-line tool with\nsupport for scripting with the embedded Javascript interpreter or via r2pipe.\n\nr2 can edit files on local hard drives, view kernel memory, and debug programs\nlocally or via a remote gdb/windbg servers. r2's wide architecture support allows\nyou to analyze, emulate, debug, modify, and disassemble any binary.\n\n<p align=\"center\">\n<a href=\"https://www.radare.org/\"><img src=\"doc/images/shot.png\" alt=\"screenshot\" align=\"center\" border=0 width=\"600px\"></a>\n</p>\n\n## Installation\n\nThe recommended way to install radare2 is via Git using acr/make or meson:\n\n```sh\ngit clone https://github.com/radareorg/radare2\nradare2/sys/install.sh\n```\n\nOn Windows you may want to use the precompiled builds or the .bat files to compile if you have msvc:\n\n```bat\npreconfigure.bat       REM setup python, meson, ninja\nconfigure.bat          REM run meson b + vs project\nmake.bat               REM run ninja -C b\nprefix\\bin\\radare2.exe\n```\n\n* r2 can be installed from `git` or via `pip` using `r2env`.\n* Run `sys/install.sh` for the default acr+make+symlink installation\n* meson/ninja (muon/samu also works) and make builds are supported.\n* Windows builds require meson and msvc or mingw as compilers\n* To uninstall the current build of r2 run `make uninstall`\n* To uninstall ALL the system installations of r2 do: `sudo make purge`\n\n## Popular Plugins:\n\nUsing the `r2pm` tool you can browse and install many plugins and tools that use radare2.\n\n* [esilsolve](https://github.com/radareorg/esilsolve): The symbolic execution plugin, based on esil and z3\n* [iaito](https://github.com/radareorg/iaito): The official Qt graphical interface\n* [keystone](https://github.com/radareorg/radare2-extras/tree/master/keystone) Assembler instructions using the Keystone library\n* [decai](https://github.com/radareorg/r2ai) Decompiler based on AI\n* [r2ai](https://github.com/radareorg/r2ai) Run a Language Model in localhost with Llama inside r2!\n* [r2dec](https://github.com/wargio/r2dec-js): A decompiler based on r2 written in JS, accessed with the `pdd` command\n* [r2diaphora](https://github.com/FernandoDoming/r2diaphora): [Diaphora](https://github.com/joxeankoret/diaphora)'s binary diffing engine on top of radare2\n* [r2frida](https://github.com/nowsecure/r2frida): The frida io plugin. Start r2 with `r2 frida://0` to use it\n* [r2ghidra](https://github.com/radareorg/r2ghidra): The standalone native ghidra decompiler accessible with `pdg`\n* [r2papi](https://github.com/radareorg/radare2-r2papi) High level api on top of r2pipe\n* [r2pipe](https://github.com/radareorg/radare2-r2pipe) Script radare2 from any programming language\n* [r2poke](https://github.com/radareorg/radare2-extras/tree/master/r2poke) Integration with GNU/Poke for extended binary parsing capabilities\n* [goresym](https://github.com/hanemile/radare2-GoReSym): Import GoReSym symbol as flags\n* [r2yara](https://github.com/radareorg/r2yara) Run Yara from r2 or use r2 primitives from Yara\n* [radius2](https://github.com/nowsecure/radius2): A fast symbolic execution engine based on boolector and esil\n* [r2sarif](https://github.com/radareorg/r2sarif) import/extend/export SARIF documents\n\n## Usage\n\nThese are the first steps to use r2, read the book or find tutorials for more details\n\n```sh\n$ r2 /bin/ls   # open file in read-only\n> aaa          # analyse the program (r2 -A)\n> afl          # list all functions (try aflt, aflm)\n> px 32        # print 32 byte hexdump current block\n> s sym.main   # seek to main (using flag name)\n> f~foo        # filter flags matching 'foo' (internal |grep)\n> iS;is        # list sections and symbols (rabin2 -Ss)\n> pdf; agf     # disassembly and ascii-art function graph\n> oo+;w hello  # reopen in read-write and write a string\n> ?*~...       # interactive filter in all command help\n> q            # quit\n```\n\nMany plugins are included in r2 by default. But you can extend its capabilities\nby using the [r2pm](https://github.com/radareorg/radare2-pm) package manager.\n\n```sh\nr2pm -s <word>  # search packages matching a word\nr2pm -Uci <pkg> # update database and clean install a package\nr2pm -u <pkg>   # uninstall the given package\nr2pm -l <pkg>   # list installed packages\n```\n\n## Resources\n\n* [Official Book](https://book.rada.re): Read about r2 usage\n* [COMMUNITY.md](COMMUNITY.md): Community engagement and loose guidelines\n* [CONTRIBUTING.md](CONTRIBUTING.md): Information about reporting issues and\n  contributing. See also [Contributing](#contributing)\n* [DEVELOPERS.md](DEVELOPERS.md): Development guidelines for r2\n* [SECURITY.md](SECURITY.md): Instructions for reporting vulnerabilities\n* [USAGE.md](USAGE.md): Some example commands\n* [INSTALL.md](INSTALL.md): Installation instructions using make or meson\n\n## Documentation\n\nLearn more about r2 watching [youtube talks](https://www.youtube.com/c/r2con) from [r2con](https://rada.re/con). There are also many blogposts, slidedecks and the [official radare2 book](https://book.rada.re), but it's always a good idea to join any of the official chats and drop your questions or feedback there.\n\n## Community\n\n* [irc.libera.chat](https://libera.chat): `#radare`, `#radare_side`\n* [Matrix](https://matrix.to/#/#radare:matrix.org): `#radare:matrix.org`\n* Telegram: [Main](https://t.me/radare) and [Side](https://t.me/radare_side) channels\n* Discord: [Server](https://discord.gg/YBey7CR9jf)\n* Mastodon: [@radareorg](https://infosec.exchange/@radareorg)\n* Website: [https://www.radare.org/](https://www.radare.org/)\n\n# Supported Platforms\n\n## Operating Systems\n\nWindows (since XP), Linux, Darwin, GNU/Hurd, Apple's {Mac,i,iPad,watch}OS, Android, Wasmer,\n[Dragonfly, Net, Free, Open] BSD, Z/OS, QNX, SerenityOS, Solaris, AIX, Haiku, Vinix, FirefoxOS.\n\n## Architectures\n\ni386, x86-64, Alpha, ARM, AVR, BPF, MIPS, PowerPC, SPARC, RISC-V, SH, m68k,\nS390, XCore, CR16, HPPA, ARC, Blackfin, Z80, H8/300, V810, PDP11, m680x, V850,\nCRIS, XAP (CSR), PIC, LM32, 8051, 6502, i4004, i8080, Propeller, EVM, OR1K\nTricore, CHIP-8, LH5801, T8200, GameBoy, SNES, SPC700, MSP430, Xtensa, xcore,\nNIOS II, Java, Dalvik, Pickle, WebAssembly, MSIL, EBC, TMS320 (c54x, c55x,\nc55+, c64x), Hexagon, Brainfuck, Malbolge, whitespace, DCPU16, LANAI, lm32,\nMCORE, mcs96, RSP, SuperH-4, VAX, KVX, Am29000, LOONGARCH, JDH8, s390x, STM8.\n\n## File Formats\n\nELF, Mach-O, Fatmach-O, PE, PE+, MZ, COFF, XCOFF, OMF, TE, XBE, SEP64, BIOS/UEFI, \nDyldcache, DEX, ART, Java class, Android boot image, Plan9 executables, Amiga HUNK,\nZIMG, MBN/SBL bootloader, ELF coredump, MDMP (Windows minidump), PDP11, XTAC, CGC,\nWASM (WebAssembly binary), Commodore VICE emulator, QNX, WAD, OFF, TIC-80,\nGB/GBA, NDS and N3DS, and mount several filesystems like NTFS, FAT, HFS+, EXT,...\n\n## Packaging Status\n\n* [![Snap package](https://snapcraft.io/radare2/badge.svg)](https://snapcraft.io/radare2)\n* [![Termux package](https://repology.org/badge/version-for-repo/termux/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![Alpine Linux Edge package](https://repology.org/badge/version-for-repo/alpine_edge/radare2.svg)](https://repology.org/project/radare2/versions) [![Alpine Linux 3.20 package](https://repology.org/badge/version-for-repo/alpine_3_20/radare2.svg)](https://repology.org/project/radare2/versions) [![Alpine Linux 3.19 package](https://repology.org/badge/version-for-repo/alpine_3_19/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![Arch package](https://repology.org/badge/version-for-repo/arch/radare2.svg)](https://repology.org/project/radare2/versions) [![AUR package](https://repology.org/badge/version-for-repo/aur/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![EPEL 10 package](https://repology.org/badge/version-for-repo/epel_10/radare2.svg)](https://repology.org/project/radare2/versions) [![EPEL 9 package](https://repology.org/badge/version-for-repo/epel_9/radare2.svg)](https://repology.org/project/radare2/versions) [![EPEL 8 package](https://repology.org/badge/version-for-repo/epel_8/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![Fedora Dev](https://repology.org/badge/version-for-repo/fedora_rawhide/radare2.svg)](https://repology.org/project/radare2/versions) [![Fedora 41](https://repology.org/badge/version-for-repo/fedora_41/radare2.svg)](https://repology.org/project/radare2/versions) [![Fedora 40](https://repology.org/badge/version-for-repo/fedora_40/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![FreeBSD port](https://repology.org/badge/version-for-repo/freebsd/radare2.svg)](https://repology.org/project/radare2/versions) [![OpenBSD port](https://repology.org/badge/version-for-repo/openbsd/radare2.svg)](https://repology.org/project/radare2/versions) [![pkgsrc current package](https://repology.org/badge/version-for-repo/pkgsrc_current/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![Homebrew package](https://repology.org/badge/version-for-repo/homebrew/radare2.svg)](https://repology.org/project/radare2/versions) [![MacPorts package](https://repology.org/badge/version-for-repo/macports/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![Haiku Ports](https://repology.org/badge/version-for-repo/haikuports_master/radare2.svg)](https://repology.org/project/radare2/versions) [![Void Linux](https://repology.org/badge/version-for-repo/void_x86_64/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![Ubuntu 24.10 package](https://repology.org/badge/version-for-repo/ubuntu_24_10/radare2.svg)](https://repology.org/project/radare2/versions) [![Ubuntu 24.04 package](https://repology.org/badge/version-for-repo/ubuntu_24_04/radare2.svg)](https://repology.org/project/radare2/versions) [![Ubuntu 20.04 package](https://repology.org/badge/version-for-repo/ubuntu_20_04/radare2.svg)](https://repology.org/project/radare2/versions) [![Ubuntu 18.04 package](https://repology.org/badge/version-for-repo/ubuntu_18_04/radare2.svg)](https://repology.org/project/radare2/versions)\n* [![Debian Unstable package](https://repology.org/badge/version-for-repo/debian_unstable/radare2.svg)](https://repology.org/project/radare2/versions) [![Debian 12 package](https://repology.org/badge/version-for-repo/debian_12/radare2.svg)](https://repology.org/project/radare2/versions) \n[![Kali Linux Rolling package](https://repology.org/badge/version-for-repo/kali_rolling/radare2.svg)](https://repology.org/project/radare2/versions)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.748046875,
          "content": "# Security Policies and Procedures\n\nWe take security seriously, and encourage everyone to use the last version of\nradare2 from git if possible. We do not backport security fixes to old\nreleases.\n\nSecurity bugs are considered top priority and a fix is required within 24 hours\nof disclosure.\n\n## Reporting a vulnerability\n\nIf you discover a security issue in radare2 (or any related project under the\nradareorg umbrella), please submit a public issue in the [GitHub issue\nsection](https://github.com/radareorg/radare2/issues) repository for that\nproject.\n\nIf possible, we would appreciate a pull request with your suggested fix\ninstead of leaving it to a reproducer. This is typically faster than reporting\nthe error and explaining it for someone who can fix it.\n\nSee [Error diagnosis](DEVELOPERS.md#Error_diagnosis) for details.\n\n## Disclosure policy\n\nWe don't believe in secrecy when security matters. Keeping the bugs for\nyourself or for a limited amount of people results in a false sense of\nsecurity for the community.\n\nWe encourage full disclosure of any and all security bugs in radare2's codebase.\n\nPlease see the \"Reporting a vulnerability\" section above for information on how\nto report a bug. If you do not have or can not create a GitHub account, you may\nemail the bug details to `pancake@nopcode.org` and we will create the issue and\nfix on your behalf.\n\n## Privacy\n\nWhile we are able to publicly acknowledge you for your contribution to radare2\nfor helping us keep our software secure for users, if you so choose we will\nkeep your contribution anonymous.\n\nTo cover those situations we recommend you to create a GitHub, Telegram or IRC\naccounts and report it in the public channel, DMs to the author are also fine.\n\n## Bounties\n\nThere is currently no bug bounty program for r2.\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 1.9228515625,
          "content": "```\n ___  __  ___  __ ___  ___   ____\n| _ \\/  \\|   \\/  \\ _ \\/ _ \\ (__  \\\n|   (  - | |  ) - |  (   _/ /  __/\n|_\\__|_|_|___/__|_|_\\_|___| |____|\n\n      https://www.radare.org\n\n                        --pancake\n```\n\n# Usage\n\nAll r2 tools and commands support printing the output in different formats by\nappending a character at the end or using the `-r` (\\*r2) and `-j` (json)\nflags.\n\n### radare2\n\n```sh\nr2 -       # same as r2 malloc://4096; \"the playground\"\nr2 /bin/ls # standard way to run r2\nr2 -w ls   # open in read-write\nr2 -d ls   # start debugging the ls in PATH\n```\n\n### rasm2\n\n```sh\nrasm2 -L                 # list all supported assembler/disassembler/emulator plugins\nrasm2 -a arm -b 64 'nop' # assemble a nop in 64-bit ARM\nrasm2 -d 90              # disassemble 0x90; nop, if you're using x86\n```\n\n### rabin2\n\n```sh\nrabin2 -s /bin/ls # list symbols in a binary\nrabin2 -z /bin/ls # find strings\n```\n\n### rafind2\n\n```sh\nrafind2 -s lib /bin/ls # search for strings matching 'lib' in /bin/ls\n```\n\n### rax2\n\n```sh\nrax2 '10+0x20' # compute the result\nrax2 -k 10+32  # keep the same base as input (10)\nrax2 -h        # convert between (hex, octal, decimal.. bases)\n```\n\n### Other tools\n\nCheck out the [manpages](https://github.com/radareorg/radare2/blob/master/man)\nand help messages for more information.\n\n## Scripting\n\nThere are native API bindings available for many programming languages,\nbut it is recommended to use [r2pipe](https://github.com/radareorg/radare2-r2pipe) which is a simple interface to\nexecute r2 commands and get the output in result. Appending a `j` in the\ncommands the output will be in JSON, so it can be parsed with `.cmdj()`\n\nSome of the languages supported by r2 are: Python, Ruby, JavaScript,\nLua, Perl, PHP, V, Go, Rust, Swift, C#, Java, Shell, OCaml, Haskell,\nScheme (Guile), Common Lisp, Clojure, Erlang, D, Vala/Genie, Prolog,\nNim, Newlisp...\n\n```python\nimport r2pipe\nr2 = r2pipe.open(\"/bin/ls\")\nprint(r2.cmd(\"pd 10\"))\nr2.quit()\n```\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.7333984375,
          "content": "#!/bin/sh\n#\n# Look for the 'acr' tool here: https://github.com/radare/acr\n# Clone last version of ACR from here:\n#  git clone https://github.com/radare/acr\n#\n# -- pancake\n\nr2pm -h >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo \"Installing the last version of 'acr'...\"\n\tr2pm -i acr > /dev/null\n\tr2pm -r acr -h > /dev/null 2>&1\n\tif [ $? = 0 ]; then\n\t\techo \"Running 'acr -p'...\"\n\t\tr2pm -r acr -p\n\telse\n\t\techo \"Cannot find 'acr' in PATH\"\n\tfi\nelse\n\techo \"Running acr...\"\n\tacr -p\nfi\nV=`./configure -qV | cut -d - -f -1`\nmeson rewrite kwargs set project / version \"$V\"\nif [ -n \"$1\" ]; then\n\techo \"./configure $*\"\n\t./configure $*\nfi\n\n[ -z \"$EDITOR\" ] && EDITOR=vim\n$EDITOR README.md\n$EDITOR dist/npm/package.json\nfor a in dist/wapm/*/*.toml ; do\n\t$EDITOR $a\ndone\n"
        },
        {
          "name": "binr",
          "type": "tree",
          "content": null
        },
        {
          "name": "config-user.mk.acr",
          "type": "blob",
          "size": 2.6806640625,
          "content": "# This file should be generated by the ./configure script\nCC=@CC@\nWITH_GPL=@WITH_GPL@\n\nHAVE_PKGCONFIG=@HAVE_PKGCONFIG@\nUSE_CS4=@USE_CS4@\nUSE_CSNEXT=@USE_CSNEXT@\nDESTDIR=\nPREFIX=@PREFIX@\nBINDIR=@BINDIR@\nLIBDIR=@LIBDIR@\nMANDIR=@MANDIR@\nDOCDIR=@DOCDIR@\nDATADIR=@DATADIR@\nINCLUDEDIR=@INCLUDEDIR@\n\nR2_USE_SQSH=@USE_SQSH@\nSQSH_CFLAGS=@SQSH_CFLAGS@\nSQSH_LDFLAGS=@SQSH_LDFLAGS@\n\nHAVE_LIB_GMP=@HAVE_LIB_GMP@\nUSE_RPATH=@USE_RPATH@\nHAVE_JEMALLOC=@HAVE_JEMALLOC@\nHAVE_FORK=@HAVE_FORK@\nWANT_DYLINK=@WANT_DYLINK@\nWANT_CAPSTONE=@WANT_CAPSTONE@\nWITH_STATIC_THEMES=@WITH_STATIC_THEMES@\nWITH_LIBR=@WITH_LIBR@\nNEW_IO_CACHE=@NEW_IO_CACHE@\n\nifeq ($(USE_RPATH),1)\nLDFLAGS_RPATH=-Wl,-rpath,\"${LIBDIR}\"\nelse\nLDFLAGS_RPATH=\nendif\n\nMKPLUGINS=mk/stat.mk mk/sloc.mk\n\nUSERCC=@USERCC@\nCOMPILER0=$(shell echo \"${USERCC}\" | awk '{print $$1}')\nCOMPILER=$(shell basename ${COMPILER0})\nDEBUGGER=@DEBUGGER@\n\nINSTALL_DIR=@INSTALL_DIR@\nINSTALL_DATA=@INSTALL_DATA@\nINSTALL_PROGRAM=@INSTALL_PROGRAM@\nINSTALL_SCRIPT=@INSTALL_SCRIPT@\nINSTALL_MAN=@INSTALL_MAN@\nINSTALL_LIB=@INSTALL_LIB@\n\nVERSION=@VERSION@\nR2_VERSION=@VERSION@\nR2_VERSION_MAJOR=@VERSION_MAJOR@\nR2_VERSION_MINOR=@VERSION_MINOR@\nR2_VERSION_PATCH=@VERSION_PATCH@\nR2_VERSION_NUMBER=@VERSION_NUMBER@\nLIBVERSION=@LIBVERSION@\nABIVERSION=$(shell echo @LIBVERSION@ | awk -F . '{print $$1\".\"$$2}')\n\n# ./configure --with-ostype=[linux,osx,solaris,windows] # TODO: rename to w32, w64?\nOSTYPE=@USEROSTYPE@\nBUILD_OS=@BUILD_OS@\nHOST_OS=@HOST_OS@\nifeq ($(WANT_DYLINK),1)\n\n# workaround: must be fixed in acr\nifeq ($(OSTYPE),qnx)\nDL_LIBS=\nelse\nifeq ($(OSTYPE),windows)\nelse\nifeq ($(OSTYPE),darwin)\nelse\nDL_LIBS=@DL_LIBS@\nendif\nendif\nendif\n\nelse\n# WANT_DYLINK=0\nDL_LIBS=\nendif\n\n# capstone\nifeq ($(WANT_CAPSTONE),1)\nUSE_CAPSTONE=@USE_CAPSTONE@\nelse\nUSE_CAPSTONE=0\nendif\nifeq ($(USE_CAPSTONE),1)\nCAPSTONE_CFLAGS=$(subst include/capstone,include,@CAPSTONE_CFLAGS@)\nCAPSTONE_LDFLAGS=@CAPSTONE_LDFLAGS@\nelse\nCAPSTONE_CFLAGS=\nCAPSTONE_LDFLAGS=\nendif\n\nHAVE_LIB_GMP=@HAVE_LIB_GMP@\nHAVE_LIB_SSL=@HAVE_OPENSSL@\nWANT_SSL_CRYPTO=@WANT_SSL_CRYPTO@\nHAVE_LIB_MAGIC=@HAVE_LIB_MAGIC@\nUSE_LIB_MAGIC=@USE_LIB_MAGIC@\nHAVE_LIB_XXHASH=@HAVE_LIB_XXHASH@\nUSE_LIB_XXHASH=@USE_LIB_XXHASH@\nUSE_LIB_ZIP=@USE_LIB_ZIP@\nLIBMAGIC=@LIBMAGIC@\nLIBZIP=@LIBZIP@\nLIBXXHASH=@LIBXXHASH@\n\nUSE_SYSLZ4=@USE_SYSLZ4@\nUSE_SMALLZ4=@USE_SMALLZ4@\n\nifeq ($(USE_SYSLZ4),1)\nLZ4_LDFLAGS=@LZ4_LDFLAGS@\nLZ4_CFLAGS=@LZ4_CFLAGS@\nendif\n\nifeq ($(HAVE_LIB_SSL),1)\nSSL_CFLAGS=@SSL_CFLAGS@\nSSL_LDFLAGS=@SSL_LDFLAGS@\nendif\n\nHAVE_LIBUV=@HAVE_LIBUV@\nLIBUV_CFLAGS=@LIBUV_CFLAGS@\nLIBUV_LDFLAGS=@LIBUV_LDFLAGS@\n\nHAVE_GPERF=@HAVE_GPERF@\n\nHAVE_PTRACE=@HAVE_PTRACE@\nUSE_PTRACE_WRAP=@USE_PTRACE_WRAP@\n\nCLOCK_LDFLAGS+=@CLOCK_LDFLAGS@\n\n# cache compiler flags at configure time #\nCFLAGS+=@CFLAGS@\nLDFLAGS+=@LDFLAGS@\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 31.18359375,
          "content": "#!/bin/sh\n# This script was automatically generated by ACR v2.1.4\n# @author: pancake <nopcode.org>\n# @url:    http://www.nopcode.org\n# @repo:   git clone https://github.com/radare/acr\n\n[ -z \"${AWK}\" ] && AWK=awk\ndo_remove() {\nif [ \"${ACR_RMFILES}\" ]; then\n  printf \"cleaning temporally files... \"\n  rm -f ${ACR_RMFILES}\n  echo \"done\"\nfi\n}\ncontrol_c() {\n  printf \"\\n\\n^C control-c : script execution interrupted.\\n\"\n  do_remove\n  exit 1\n}\ntrap control_c 2\nDEBUGGER=1\nUSE_MAGIC=0\nWANT_THREADS=1\nLOADLIBS=1\nR_CRITICAL_ENABLED=0\nWANT_DYLINK=1\nHAVE_FORK=1\nWANT_PTRACE_WRAP=1\nWANT_GPERF=1\nWANT_CAPSTONE=1\nWITH_LIBR=0\nWITH_STATIC_THEMES=0\nUSE_CSNEXT=0\nUSE_CS5=0\nUSE_CS4=0\nWITH_CAPSTONE=0\nWITHOUT_SYSCAPSTONE=1\nWITH_SQSH=1\nWITH_SYSLZ4=0\nUSE_ZIP=0\nUSE_XXHASH=0\nWITH_GPL=1\nWANT_SSL=0\nWANT_SSL_CRYPTO=0\nWANT_LIBUV=0\nUSE_NEW_ABI=0\nUSE_RPATH=0\n[ -z \"${USERCC}\" ] && USERCC=\"gcc\"\n[ -z \"${USEROSTYPE}\" ] && USEROSTYPE=\"auto\"\n[ -z \"${LIBVERSION}\" ] && LIBVERSION=\"xxx\"\nHAVE_JEMALLOC=1\n[ -z \"${R_CHECKS_LEVEL}\" ] && R_CHECKS_LEVEL=\"2\"\nWANT_DEBUGSTUFF=1\nsplit_host() {\nS=\"$\"\nwhile : ; do\nENVWORDS=\"${ENVWORDS} $1_CPU $1_OS\"\nSTR=`eval \"echo ${S}$1\"`\nSPLIT_CPU=\"`echo \"$STR\" | cut -d - -f 1`\"\nSPLIT_OS=\"`echo \"$STR\" | $AWK -F - '{\n\tif ($2==\"unknown\"){\n\t\tif (NF<3) { print $2; } else { print $3; }\n\t} else {\n\t\tif ($2==\"linux\") { print $2; } else\n\t\tif (NF<3) { print $2; } else { print $3; }\n\t}\n}'`\"\neval \"$1_CPU=\\\"$SPLIT_CPU\\\"\"\neval \"$1_OS=\\\"$SPLIT_OS\\\"\"\nshift\n[ -z \"$1\" ] && break\ndone\n}\n\nQUIET=0\nbe_quiet() {\n\tQUIET=1\n}\n\nVPATH=`dirname ${0}`\nif [ \"${VPATH}\" = \".\" ]; then\n\tWODIS=current\nelse\n\tif [ \"${VPATH}\" = \"${PWD}\" ]; then\n\t\tVPATH=.\n\t\tWODIS=current\n\telse\n\t\tWODIS=crosspath\n\t\tCURDIR=$PWD\n\t\tcd $VPATH\n\t\tVPATH=\"${PWD}/\"\n\t\tcd $CURDIR\n\tfi\nfi\n\nguess_os() {\nif [ -e \"${VPATH}/config.guess\" ]; then\n\tsh ${VPATH}/config.guess\n\treturn\nfi\nCPU=\"`uname -m|sed -e 's, ,,g'|cut -d - -f 1`\"\nOS=\"`uname -s|tr A-Z a-z`\"\nuname -r | grep -qE \"(Microsoft|WSL)\" 2>/dev/null && OS=\"wsl\"\nGNU=\"`uname --help 2>&1 | grep gnu`\"\n[ \"${GNU}\" ] && OS=\"${OS}-gnu\"\n[ \"${CPU}\" = ppc ] && CPU=\"powerpc\"\necho \"${CPU}-unknown-${OS}\"\n}\n\nSEARCHPATH=\"/usr /usr/local /usr/pkg /sw\"\n\n: ${PREFIX:=/usr/local}\nCROSSBUILD=0\nBUILD=`guess_os`\nHOST=\"${BUILD}\"\nTARGET=\"${HOST}\"\nETCDIR=\"/etc\"\nSYSCONFDIR=\"\"\nDESCRIPTION=\"The UNIX-like reverse engineering toolkit\"\n\ncreate_environ() {\n: ${EPREFIX:=\"${PREFIX}\"}\n: ${SPREFIX:=\"${PREFIX}\"}\n: ${BINDIR:=\"${SPREFIX}/bin\"}\n: ${SBINDIR:=\"${PREFIX}/sbin\"}\n: ${ETCDIR:=\"${SPREFIX}/etc\"}\n: ${LIBDIR:=\"${SPREFIX}/lib\"}\n: ${PKGCFG_LIBDIR:='${exec_prefix}/lib'}\n: ${PKGCFG_INCDIR:='${prefix}/include'}\n: ${LIBEXECDIR:=\"${SPREFIX}/libexec\"}\n: ${INCLUDEDIR:=\"${SPREFIX}/include\"}\n: ${DATADIR:=\"${SPREFIX}/share\"}\n: ${INFODIR:=\"${DATADIR}/info\"}\n: ${MANDIR:=\"${DATADIR}/man\"}\n: ${DOCDIR:=\"${DATADIR}/doc/radare2\"}\n: ${LOCALSTATEDIR:=\"${SPREFIX}/var\"}\nfor A in `echo ${PATH} | sed -e 's,:, ,g'` ; do\n  [ -e \"$A\"/ginstall ] && : ${INSTALL:=\"$A\"/ginstall} && break\n  [ -e \"$A\"/install ] && : ${INSTALL:=\"$A\"/install} && break\ndone\n: ${INSTALL_DIR:=${INSTALL} -d}\n: ${INSTALL_DATA:=${INSTALL} -m 644}\n: ${INSTALL_SCRIPT:=${INSTALL} -m 755}\n: ${INSTALL_PROGRAM:=${INSTALL} -m 755}\n: ${INSTALL_PROGRAM_STRIP:=${INSTALL} -m 755 -s}\n: ${INSTALL_MAN:=${INSTALL} -m 444}\n: ${INSTALL_LIB:=${INSTALL} -m 755 -c}\n PKGNAME='radare2' ; VERSION='5.9.9' ; VERSION_MAJOR=5; VERSION_MINOR=9; VERSION_PATCH=9; VERSION_NUMBER=50909; CONTACT_MAIL=\"pancake@nopcode.org\" ; CONTACT_NAME=\"pancake\" ; CONTACT=\"pancake <pancake@nopcode.org>\" ;\n}\n\nshow_usage() {\ncat <<EOF2\n'configure' configures radare2-5.9.9 to adapt to many kinds of systems.\n\nUsage: ./configure [OPTION]... [VAR=VALUE]...\n\nTo assign environment variables (e.g., CC, CFLAGS...), specify them as\nVAR=VALUE.  See below for descriptions of some of the useful variables.\n\nDefaults for the options are specified in brackets.\n\nConfiguration:\n  -h, --help              display this help and exit\n  -r, --report            show what libs/programs require to work\n  -q, --quiet             be quiet, less verbose (see ./configure -qV)\n  -V, --version           display version information and exit\n\nInstallation directories:\n  --exec-prefix=EPREFIX  install arch-dependent files in EPREFIX [PREFIX]\n  --prefix=PREFIX        install arch-independent files in PREFIX [/usr/local]\n  --sandbox=SPREFIX      sandbox prefix directory: SPREFIX [PREFIX]\n\nFine tuning of the installation directories:\n  --bindir=DIR           user executables [EPREFIX/bin]\n  --datadir=DIR          read-only architecture-independent data [PREFIX/share]\n  --docdir=DIR           documentation directory [DATADIR/doc/radare2]\n  --includedir=DIR       C header files [PREFIX/include]\n  --infodir=DIR          info documentation [DATADIR/info]\n  --libexecdir=DIR       program executables [EPREFIX/libexec]\n  --libdir=DIR           object code libraries [EPREFIX/lib]\n  --libpath=DIR          set rpath/libname-path to linker\n  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]\n  --mandir=DIR           man documentation [DATADIR/man]\n  --sbindir=DIR          system admin executables [EPREFIX/sbin]\n  --etcdir=DIR           same as --sysconfdir (/etc)\n  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]\n  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]\n\nSystem types:\n  --build=BUILD          configure for building on BUILD [guessed]\n  --host=HOST            cross-compile to build programs to run on HOST [BUILD]\n  --target=TARGET        configure for building compilers for TARGET [HOST]\nEOF2\n\nprintf \"\nOptional Features:\n  --disable-debugger     disable native debugger features\n  --with-sysmagic        force to use system's magic\n  --disable-threads      disable use of thread apis\n  --disable-loadlibs     disable loading plugins\n  --enable-threadsafety  enable mutexes in critical code paths\n  --without-dylink       disable support for dynamic loading of plugins\n  --without-fork         disable fork\n  --without-ptrace-wrap  build ptrace-wrap support needed for the iaito debugger on Linux\n  --without-gperf        do not statically link the sdb databases even if gperf is found\n  --without-capstone     dont build the capstone dependency\n  --with-libr            build libr.a and libr.dylib\n  --with-static-themes   default themes are compiled and fallback if not available on disk\n  --with-capstone-next   build next branch of the capstone disassembler\n  --with-capstone5       build v5 branch of capstone5 (default)\n  --with-capstone4       build v4 branch of capstone\n  --with-syscapstone     force to use system-wide capstone\n  --without-syscapstone  avoid the system-wide capstone\n  --without-sqsh         ensure squashfs support is not included, even if library is found\n  --with-syslz4          force to use system's liblz4\n  --with-syszip          force to use system's libzip and zlib\n  --with-sysxxhash       force to use system's xxhash\n  --without-gpl          do not build GPL code (grub, cxx, ... )\n  --with-ssl             build with (Open|Boring|..)SSL if possible\n  --with-ssl-crypto      build crypto code with libssl\n  --with-libuv           use libuv if available\n  --with-new-abi         use the new ABI breaking changes scheduled for the next major release\n  --with-rpath           use rpath to build\n  --with-compiler        Define compiler to use (see mk/) (USERCC=gcc)\n  --with-ostype          Choose OS ( android windows wsl mingw32 bsd solaris gnulinux darwin haiku ) (USEROSTYPE=auto)\n  --with-libversion      specify different libversion (LIBVERSION=xxx)\n  --without-jemalloc     build without jemalloc\n  --with-checks-level    value between 0 and 3 to enable different level of assert (see R_CHECKS_LEVEL) (R_CHECKS_LEVEL=2)\n  --disable-debug-stuff  disable the log messages and disable control-c\n\"\nprintf \"\nSome influential environment variables:\n  CC          C compiler command\n  CFLAGS      C compiler flags\n  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a\n              nonstandard directory <lib dir>\n  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have\n              headers in a nonstandard directory <include dir>\n  CPP         C preprocessor\n\"\nprintf \"\nReport bugs to: pancake <pancake@nopcode.org>\"\necho \"\"\nexit 0\n}\n\ntake_environ() {\n: ${SH:=/bin/sh}\n: ${CPP:=cpp}\n: ${CC:=gcc}\n: ${PREFIX:=/usr/local/}\n}\n\nochof() {\n\t[ \"$QUIET\" = 1 ] && return\n\tprintf \"$*\"\n}\n\nocho() {\n\t[ \"$QUIET\" = 1 ] && return\n\techo \"$*\"\n}\n\nshow_version() {\nif [ \"$QUIET\" = 1 ]; then\n\techo \"5.9.9\"\n\texit 0\nfi\necho \"radare2-5.9.9 configuration script done with acr v2.1.4.\nThe 'Free Software Foundation' message is only for autodetection.\nOriginally written by pancake <nopcode.org>.\"\nexit 0\n}\n\nparse_options() {\nflag=`echo $1| cut -d = -f 1`\nvalue=`echo $1| $AWK 'BEGIN{FS=\"=\";}{print $2}'`\nflag2=`echo $flag|cut -f2- -d -| sed -e 's,-,_,g' -e 's,^_,,g'|tr '[a-z]' '[A-Z]'`\n\nif [ \"${TARGET_OS}\" = \"darwin\" ]; then\n\tLIBPATH=-Wl,-install_name,\nelse\n\tLIBPATH=-Wl,-R\nfi\n\ncase $flag in\n-h|--help|--hel|--h|--he|-help)\n\tshow_usage ; ;;\n-qV|-quiet-version|--quiet-version)\n\tbe_quiet\n\tshow_version ; ;;\n-q|-quiet|--quiet)\n\tbe_quiet ; ;;\n-V|-version|--version)\n\tshow_version ; ;;\n-r|--r|--report)\necho \"PKGNAME:     radare2\"\necho \"VERSION:     5.9.9\"\necho \"AUTHOR:      pancake\"\necho \"EMAIL:       pancake@nopcode.org\"\necho \"DESCRIPTION: The UNIX-like reverse engineering toolkit\"\necho \"LANGS:       c\"\necho \"REQUIRED:    libdl\"\necho \"OPTIONAL:    libmagic libz libzip libxxhash libssl liblibuv>=1.0.0\"\necho \"PKGCONFIG:   capstone libsqsh liblz4 openssl libuv\"\necho \"FLAGS:       --disable-debugger --with-sysmagic --disable-threads --disable-loadlibs --enable-threadsafety --without-dylink --without-fork --without-ptrace-wrap --without-gperf --without-capstone --with-libr --with-static-themes --with-capstone-next --with-capstone5 --with-capstone4 --with-syscapstone --without-syscapstone --without-sqsh --with-syslz4 --with-syszip --with-sysxxhash --without-gpl --with-ssl --with-ssl-crypto --with-libuv --with-new-abi --with-rpath --with-compiler=gcc --with-ostype=auto --with-libversion=xxx --without-jemalloc --with-checks-level=2 --disable-debug-stuff\"\n\texit 0\n\t;;\n--cache-file)\n\t# ignored: acr have no cache\n\t;;\n--build)\n\tBUILD=\"$value\"; split_host BUILD ; ;;\n--host)\n\tCROSSBUILD=1 # XXX\n\tHOST=\"$value\"; split_host HOST ; ;;\n--target)\n\tTARGET=\"$value\"; split_host TARGET ; ;;\n--prefix)\n\tPREFIX=\"$value\"; ;;\n--exec-prefix)\n\tEPREFIX=\"$value\"; ;;\n--sandbox|--sprefix)\n\tSPREFIX=\"$value\"; ;;\n--bindir)\n\tBINDIR=\"$value\"; ;;\n--sbindir)\n\tSBINDIR=\"$value\"; ;;\n--libexecdir)\n\tLIBEXECDIR=\"$value\"; ;;\n--docdir)\n\tDOCDIR=\"$value\"; ;;\n--datadir)\n\tDATADIR=\"$value\"; ;;\n--sysconfdir)\n\tSYSCONFDIR=\"$value\"\n\tETCDIR=\"$value\"; ;;\n--etcdir)\n\tSYSCONFDIR=\"$value\"\n\tETCDIR=\"$value\"; ;;\n--sharedstatedir)\n\tSHAREDSTATEDIR=\"$value\"; ;;\n--localstatedir)\n\tLOCALSTATEDIR=\"$value\"; ;;\n--libdir)\n\tLIBDIR=\"$value\"\n\tPKGCFG_LIBDIR=\"$value\"; ;;\n--libpath)\n\tLDFLAGS=\"${LDFLAGS} ${LIBPATH}$value\"; ;;\n--includedir)\n\tPKGCFG_INCDIR=\"$value\"\n\tINCLUDEDIR=\"$value\"; CFLAGS=\"${CFLAGS} -I$value\"; ;;\n--infodir)\n\tINFODIR=\"$value\"; ;;\n--mandir)\n\tMANDIR=\"$value\"; ;;\n\n\"--disable-debugger\") DEBUGGER=\"0\"; ;;\n\"--with-sysmagic\") USE_MAGIC=\"1\"; ;;\n\"--disable-threads\") WANT_THREADS=\"0\"; ;;\n\"--disable-loadlibs\") LOADLIBS=\"0\"; ;;\n\"--enable-threadsafety\") R_CRITICAL_ENABLED=\"1\"; ;;\n\"--without-dylink\") WANT_DYLINK=\"0\"; ;;\n\"--without-fork\") HAVE_FORK=\"0\"; ;;\n\"--without-ptrace-wrap\") WANT_PTRACE_WRAP=\"0\"; ;;\n\"--without-gperf\") WANT_GPERF=\"0\"; ;;\n\"--without-capstone\") WANT_CAPSTONE=\"0\"; ;;\n\"--with-libr\") WITH_LIBR=\"1\"; ;;\n\"--with-static-themes\") WITH_STATIC_THEMES=\"1\"; ;;\n\"--with-capstone-next\") USE_CSNEXT=\"1\"; ;;\n\"--with-capstone5\") USE_CS5=\"1\"; ;;\n\"--with-capstone4\") USE_CS4=\"1\"; ;;\n\"--with-syscapstone\") WITH_CAPSTONE=\"1\"; ;;\n\"--without-syscapstone\") WITHOUT_SYSCAPSTONE=\"0\"; ;;\n\"--without-sqsh\") WITH_SQSH=\"0\"; ;;\n\"--with-syslz4\") WITH_SYSLZ4=\"1\"; ;;\n\"--with-syszip\") USE_ZIP=\"1\"; ;;\n\"--with-sysxxhash\") USE_XXHASH=\"1\"; ;;\n\"--without-gpl\") WITH_GPL=\"0\"; ;;\n\"--with-ssl\") WANT_SSL=\"1\"; ;;\n\"--with-ssl-crypto\") WANT_SSL_CRYPTO=\"1\"; ;;\n\"--with-libuv\") WANT_LIBUV=\"1\"; ;;\n\"--with-new-abi\") USE_NEW_ABI=\"1\"; ;;\n\"--with-rpath\") USE_RPATH=\"1\"; ;;\n--with-compiler) if [ -z \"${value}\" ]; then USERCC=\"gcc\"; else USERCC=\"${value}\" ; fi ;;\n--with-ostype) if [ -z \"${value}\" ]; then USEROSTYPE=\"auto\"; else USEROSTYPE=\"${value}\" ; fi ;;\n--with-libversion) if [ -z \"${value}\" ]; then LIBVERSION=\"xxx\"; else LIBVERSION=\"${value}\" ; fi ;;\n\"--without-jemalloc\") HAVE_JEMALLOC=\"0\"; ;;\n--with-checks-level) if [ -z \"${value}\" ]; then R_CHECKS_LEVEL=\"2\"; else R_CHECKS_LEVEL=\"${value}\" ; fi ;;\n\"--disable-debug-stuff\") WANT_DEBUGSTUFF=\"0\"; ;;\n*) if [ \"$value\" ]; then eval \"`echo $flag2=$value`\" ;\nelse echo ; echo \"WARNING: Unknown flag '$flag'.\" >&2 ; echo ; fi ;;\nesac\n}\n\n# MAIN #\ntake_environ\nsplit_host BUILD HOST TARGET\n[ -z \"$ACRHOOK\" ] && ACRHOOK=./configure.hook\n[ -e \"$ACRHOOK\" ] && . ${ACRHOOK}\n\nwhile : ; do\n[ -z \"$1\" ] && break\nparse_options \"$1\"\nshift\ndone\n\nENVWORDS=\"MANDIR DESCRIPTION INFODIR LIBDIR INCLUDEDIR LOCALSTATEDIR ETCDIR SYSCONFDIR DATADIR DOCDIR LIBEXECDIR SBINDIR BINDIR EPREFIX PREFIX SPREFIX TARGET HOST BUILD INSTALL INSTALL_LIB INSTALL_MAN INSTALL_PROGRAM INSTALL_PROGRAM_STRIP INSTALL_DIR INSTALL_SCRIPT INSTALL_DATA HOST_OS HOST_CPU BUILD_OS BUILD_CPU TARGET_OS TARGET_CPU VERSION VERSION_MAJOR VERSION_MINOR VERSION_PATCH VERSION_NUMBER PKGCFG_LIBDIR PKGCFG_INCDIR PKGNAME VPATH CONTACT CONTACT_NAME CONTACT_MAIL CC CFLAGS CPPFLAGS LDFLAGS HAVE_LANG_C DEBUGGER HAVE_LIB_DL DL_LIBS PKGCONFIG R2_BUILDSYSTEM HAVE_PATCH PATCH HAVE_AR AR HAVE_GIT GIT HAVE_GPERF GPERF HAVE_LIB_MAGIC HAVE_LINUX_CAN_H USE_MAGIC USE_LIB_MAGIC LIBMAGIC WANT_THREADS LOADLIBS R_CRITICAL_ENABLED WANT_DYLINK HAVE_FORK WANT_PTRACE_WRAP WANT_GPERF WANT_CAPSTONE WITH_LIBR WITH_STATIC_THEMES USE_CSNEXT USE_CS5 USE_CS4 WITH_CAPSTONE WITHOUT_SYSCAPSTONE CAPSTONE_CFLAGS CAPSTONE_LDFLAGS HAVE_PKGCFG_CAPSTONE USE_CAPSTONE SQSH_CFLAGS SQSH_LDFLAGS HAVE_PKGCFG_LIBSQSH WITH_SQSH USE_SQSH LZ4_CFLAGS LZ4_LDFLAGS HAVE_PKGCFG_LIBLZ4 WITH_SYSLZ4 USE_SYSLZ4 HAVE_LIB_Z HAVE_LIB_ZIP USE_ZIP USE_LIB_ZIP LIBZIP HAVE_LIB_XXHASH USE_XXHASH USE_LIB_XXHASH LIBXXHASH WITH_GPL HAVE_DECL_ADDR_NO_RANDOMIZE HAVE_DECL___GLIBC__ HAVE_ARC4RANDOM_UNIFORM HAVE_EXPLICIT_BZERO HAVE_EXPLICIT_MEMSET HAVE_CLOCK_NANOSLEEP HAVE_SIGACTION HAVE_CLOCK_GETTIME CLOCK_LDFLAGS SUPPORT_GNU99 HAVE_LIB_GMP WANT_SSL WANT_SSL_CRYPTO HAVE_OPENSSL SSL_CFLAGS SSL_LDFLAGS HAVE_LIB_SSL HAVE_PKGCFG_OPENSSL WANT_LIBUV HAVE_LIBUV_VERSION_1_0_0 LIBUV_CFLAGS LIBUV_LDFLAGS HAVE_PKGCFG_LIBUV HAVE_LIBUV USE_NEW_ABI USE_RPATH USERCC USEROSTYPE LIBVERSION HAVE_JEMALLOC HAVE_PTRACE USE_PTRACE_WRAP R_CHECKS_LEVEL WANT_DEBUGSTUFF\"\n\ncreate_environ\n\nocho \"checking build system type... ${BUILD}\"\nocho \"checking host system type... ${HOST}\"\nocho \"checking target system type... ${TARGET}\"\n[ \"${CROSSBUILD}\" = 1 ] && echo \"using crosscompilation mode.\"\n\n#split_host BUILD HOST TARGET\n[ -n \"${prefix}\" ] && PREFIX=\"${prefix}\"\nocho \"checking for working directories... ${WODIS}\"\nocho \"using prefix '${PREFIX}'\"\nACR_RMFILES=\" test.c a.out a.exe\"\n\nCOMPILER=CC\nochof \"checking for c compiler... \"\nHAVE_LANG_C=1\nif [ \"${CROSSBUILD}\" = 1 ]; then\n (command -v ${HOST}-${CC} >/dev/null 2>&1)\n if [ $? = 0 ]; then CC=\"${HOST}-${CC}\"; fi\nfi\necho \"int main(int argc, char **argv){return 0;}\" > test.c\n (exec ${CC} -o a.out ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} test.c >/dev/null 2>&1)\nif [ $? = 0 ]; then echo ${CC}; else\n echo no ; HAVE_LANG_C=0\ndo_remove\necho \"ERROR: ${CC} cannot create executables\" >&2 ;\nexit 1 ; fi\nochof \"checking for dynamic library... \"\nHAVE_LIB_DL=0\nfor OS in gnulinux linux gnu/kfreebsd syllable serenityos vinix sunos darwin beos solaris wsl ; do\nif [ \"${HOST_OS}\" = \"${OS}\" ]; then\n\tHAVE_LIB_DL=1\n\tbreak;\nfi\ndone\nif [ \"${HAVE_LIB_DL}\" = 1 ]; then\n\tDL_LIBS=\"-ldl\"\n\techo \"required\"\nelse\n\tDL_LIBS=\"\"\n\techo \"libc\"\nfi\nochof \"checking for pkg-config... \"\nENVWORDS=\"${ENVWORDS} HAVE_PKGCONFIG\"\nif [ -n \"$PKGCONFIG\" ]; then\n\tif [ -x \"$PKGCONFIG\" ]; then\n\t\t_HAVE_PKGCONFIG=\"${PKGCONFIG}\"\n\telse\n\t\tocho \"PKGCONFIG env is not executable\"\n\t\tPKGCONFIG=\"\"\n\tfi\nelse\n\tIFS=:\n\tfor A in ${PATH} ; do\n\t\tif [ -x \"${A}/pkg-config\" ]; then\n\t\t\tPKGCONFIG=\"${A}/pkg-config\"\n\t\telif [ -x \"${A}/pkgconf\" ]; then\n\t\t\tPKGCONFIG=\"${A}/pkgconf\"\n\t\telse\n\t\t\tcontinue\n\t\tfi\n\t\tbreak\n\tdone\n\tunset IFS\nfi\nif [ -n \"${PKGCONFIG}\" ]; then\n\tocho ${PKGCONFIG}\n\tHAVE_PKGCONFIG=1\nelse\n\tHAVE_PKGCONFIG=0\nocho no; fi\nR2_BUILDSYSTEM=\"\"make\"\"\nochof \"checking for patch... \"\nif [ -x \"${PATCH}\" ]; then\n\tFIND=${PATCH}\nelse\n\tFIND=\"\"\n\tIFS=:\n\tfor A in ${PATH} ; do\n\t\tif [ -x \"${A}/patch\" ]; then\n\t\t\tFIND=\"${A}/patch\"\n\t\t\tbreak;\n\t\tfi\n\tdone\n\tunset IFS\nfi\nif [ -n \"${FIND}\" ]; then\n\tocho ${FIND};\nHAVE_PATCH=1\n\tPATCH=${FIND}\nelse\n\tHAVE_PATCH=0\n\tPATCH=patch\nif [ \"\" = 1 ]; then\necho \"Cannot find patch\" >&2\nelse\necho no\nfi\n\techo \"error: This program is required.\" >&2\n\texit 1 ; fi\nochof \"checking for ar... \"\nif [ -x \"${AR}\" ]; then\n\tFIND=${AR}\nelse\n\tFIND=\"\"\n\tIFS=:\n\tfor A in ${PATH} ; do\n\t\tif [ -x \"${A}/ar\" ]; then\n\t\t\tFIND=\"${A}/ar\"\n\t\t\tbreak;\n\t\tfi\n\tdone\n\tunset IFS\nfi\nif [ -n \"${FIND}\" ]; then\n\tocho ${FIND};\nHAVE_AR=1\n\tAR=${FIND}\nelse\n\tHAVE_AR=0\n\tAR=ar\nif [ \"\" = 1 ]; then\necho \"Cannot find ar\" >&2\nelse\necho no\nfi\n\techo \"error: This program is required.\" >&2\n\texit 1 ; fi\nochof \"checking for git... \"\nif [ -x \"${GIT}\" ]; then\n\tFIND=${GIT}\nelse\n\tFIND=\"\"\n\tIFS=:\n\tfor A in ${PATH} ; do\n\t\tif [ -x \"${A}/git\" ]; then\n\t\t\tFIND=\"${A}/git\"\n\t\t\tbreak;\n\t\tfi\n\tdone\n\tunset IFS\nfi\nif [ -n \"${FIND}\" ]; then\n\tocho ${FIND};\nHAVE_GIT=1\n\tGIT=${FIND}\nelse\n\tHAVE_GIT=0\n\tGIT=git\nif [ \"\" = 1 ]; then\necho \"Cannot find git\" >&2\nelse\necho no\nfi ; fi\nochof \"checking for gperf... \"\nif [ -x \"${GPERF}\" ]; then\n\tFIND=${GPERF}\nelse\n\tFIND=\"\"\n\tIFS=:\n\tfor A in ${PATH} ; do\n\t\tif [ -x \"${A}/gperf\" ]; then\n\t\t\tFIND=\"${A}/gperf\"\n\t\t\tbreak;\n\t\tfi\n\tdone\n\tunset IFS\nfi\nif [ -n \"${FIND}\" ]; then\n\tocho ${FIND};\nHAVE_GPERF=1\n\tGPERF=${FIND}\nelse\n\tHAVE_GPERF=0\n\tGPERF=gperf\nif [ \"\" = 1 ]; then\necho \"Cannot find gperf\" >&2\nelse\necho no\nfi ; fi\ncheck_library() {\nVAR=$1\nS=\"$\"\n_REQUIRED=$3\n_CHKLIB_NAME=$2\n_CHKLIB_LIBS=$(echo \"-l${_CHKLIB_NAME}\" | sed 's,+, -l,g')\nochof \"checking for lib${_CHKLIB_NAME} ... \"\necho \"int main(int ac, char **av){return 0;}\" > test.c\neval ${S}${COMPILER} ${CFLAGS} ${CPPFLAGS} ${CXXFLAGS} ${LDFLAGS} ${_CHKLIB_LIBS} test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\teval ${VAR}=1\n\techo yes\nelse\n\teval ${VAR}=0\n\techo no\n\tif [ \"${_REQUIRED}\" = 1 ]; then\n\t  echo \"this library is required.\"\n\t  do_remove\n\t  exit 1\n\tfi\nfi\n}\n\ncheck_library HAVE_LIB_MAGIC magic 0\ncheck_include() {\nVAR=$1\nINC=$2\n_REQUIRED=$3\nochof \"checking for $2... \"\necho > test.c\n\necho \"#include <${INC}>\" >>test.c\necho 'int main(int ac, char **av){return 0;}' >>test.c\neval \\$${COMPILER} ${CFLAGS} ${CPPFLAGS} ${CXXFLAGS} test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\teval ${VAR}=1\n\techo yes\nelse\n\teval ${VAR}=0\n\techo no\n\tif [ 1 = \"0\" ]; then\n\t\techo 'ERROR: required include not found.' >&2\n\t\tdo_remove\n\t\texit 1\n\tfi\nfi\n}\n\ncheck_include HAVE_LINUX_CAN_H linux/can.h 0\n\nif [ 11 = \"$HAVE_LIB_MAGIC$USE_MAGIC\" ]; then\n\nUSE_LIB_MAGIC=\"1\"\nLIBMAGIC=\"-lmagic\"\nelse\nUSE_LIB_MAGIC=\"0\"\nLIBMAGIC=\"\"; fi\nif [ \"$WANT_GPERF\" = \"0\" ]; then\nHAVE_GPERF=\"0\"; fi\nif [ \"$WITH_CAPSTONE\" = \"1\" ]; then\nif [ -z \"${PKGCONFIG}\" ]; then pkg-config --version >/dev/null 2>&1 ; if [ 0 = 0 ]; then PKGCONFIG=pkg-config ; else PKGCONFIG=pkgconf ; fi; fi\ntype ${PKGCONFIG} > /dev/null 2>&1 || echo \"ERROR: Cannot find valid PKGCONFIG, pkg-config or pkgconf in PATH\"\necho 'Using PKGCONFIG: '${PKGCONFIG}\nprintf 'checking pkg-config flags for capstone... '\ntmp=`${PKGCONFIG} --cflags capstone 2>/dev/null`\nif [ $? != 0 ]; then echo no ; HAVE_PKGCFG_CAPSTONE=0;\nCAPSTONE_CFLAGS='';CAPSTONE_LDFLAGS='';\nelse\nCAPSTONE_CFLAGS=$tmp;\ntmp=`${PKGCONFIG} --libs capstone 2>/dev/null`\nif [ $? = 0 ]; then\necho yes; HAVE_PKGCFG_CAPSTONE=1;\nCAPSTONE_LDFLAGS=$tmp; fi; fi; fi\nif [ 11 = \"$WITH_CAPSTONE$HAVE_PKGCFG_CAPSTONE\" ]; then\n\nUSE_CAPSTONE=\"1\"\nelse\nUSE_CAPSTONE=\"0\"; fi\nif [ \"$WITHOUT_SYSCAPSTONE\" = \"0\" ]; then\nUSE_CAPSTONE=\"0\"\nHAVE_PKGCFG_CAPSTONE=\"0\"\nCAPSTONE_CFLAGS=\"\"\nCAPSTONE_LDFLAGS=\"\"; fi\nif [ -z \"${PKGCONFIG}\" ]; then pkg-config --version >/dev/null 2>&1 ; if [ 0 = 0 ]; then PKGCONFIG=pkg-config ; else PKGCONFIG=pkgconf ; fi; fi\nprintf 'checking pkg-config flags for libsqsh... '\ntmp=`${PKGCONFIG} --cflags libsqsh 2>/dev/null`\nif [ $? != 0 ]; then echo no ; HAVE_PKGCFG_LIBSQSH=0;\nSQSH_CFLAGS='';SQSH_LDFLAGS='';\nelse\nSQSH_CFLAGS=$tmp;\ntmp=`${PKGCONFIG} --libs libsqsh 2>/dev/null`\nif [ $? = 0 ]; then\necho yes; HAVE_PKGCFG_LIBSQSH=1;\nSQSH_LDFLAGS=$tmp; fi; fi\nif [ 11 = \"$WITH_SQSH$HAVE_PKGCFG_LIBSQSH\" ]; then\n\nUSE_SQSH=\"1\"\nelse\nUSE_SQSH=\"0\"; fi\nif [ -z \"${PKGCONFIG}\" ]; then pkg-config --version >/dev/null 2>&1 ; if [ 0 = 0 ]; then PKGCONFIG=pkg-config ; else PKGCONFIG=pkgconf ; fi; fi\nprintf 'checking pkg-config flags for liblz4... '\ntmp=`${PKGCONFIG} --cflags liblz4 2>/dev/null`\nif [ $? != 0 ]; then echo no ; HAVE_PKGCFG_LIBLZ4=0;\nLZ4_CFLAGS='';LZ4_LDFLAGS='';\nelse\nLZ4_CFLAGS=$tmp;\ntmp=`${PKGCONFIG} --libs liblz4 2>/dev/null`\nif [ $? = 0 ]; then\necho yes; HAVE_PKGCFG_LIBLZ4=1;\nLZ4_LDFLAGS=$tmp; fi; fi\nif [ 11 = \"$WITH_SYSLZ4$HAVE_PKGCFG_LIBLZ4\" ]; then\n\nUSE_SYSLZ4=\"1\"\nelse\nUSE_SYSLZ4=\"0\"; fi\ncheck_library HAVE_LIB_Z z 0\ncheck_library HAVE_LIB_ZIP zip 0\nif [ 11 = \"$HAVE_LIB_Z$USE_ZIP\" ]; then\n\nif [ \"$HAVE_LIB_ZIP\" = \"1\" ]; then\nUSE_LIB_ZIP=\"1\"\nLIBZIP=\"-lz -lzip\"\nelse\nUSE_LIB_ZIP=\"0\"\nLIBZIP=\"\"; fi\nelse\nUSE_LIB_ZIP=\"0\"\nLIBZIP=\"\"; fi\ncheck_library HAVE_LIB_XXHASH xxhash 0\nif [ 11 = \"$HAVE_LIB_XXHASH$USE_XXHASH\" ]; then\n\nUSE_LIB_XXHASH=\"1\"\nLIBXXHASH=\"-lxxhash\"\nelse\nUSE_LIB_XXHASH=\"0\"\nLIBXXHASH=\"\"; fi\nprintf \"checking declaration of ADDR_NO_RANDOMIZE in sys/personality.h... \"\necho \"#include <sys/personality.h>\" > test.c\necho \"int main(int ac, char **av){ void *a = (void *)ADDR_NO_RANDOMIZE; return 0; }\" >> test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_DECL_ADDR_NO_RANDOMIZE=1\nelse\n\tHAVE_DECL_ADDR_NO_RANDOMIZE=0 ; echo no ; fi\nprintf \"checking declaration of __GLIBC__ in features.h... \"\necho \"#include <features.h>\" > test.c\necho \"int main(int ac, char **av){ void *a = (void *)__GLIBC__; return 0; }\" >> test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_DECL___GLIBC__=1\nelse\n\tHAVE_DECL___GLIBC__=0 ; echo no ; fi\nprintf \"checking function arc4random_uniform() in c... \"\necho \"extern int arc4random_uniform(); int main(int ac, char **av){ arc4random_uniform(0); return 0; }\" > test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -lc test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_ARC4RANDOM_UNIFORM=1\nelse\n\tHAVE_ARC4RANDOM_UNIFORM=0 ; echo no ; fi\nprintf \"checking function explicit_bzero() in c... \"\necho \"extern int explicit_bzero(); int main(int ac, char **av){ explicit_bzero(0); return 0; }\" > test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -lc test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_EXPLICIT_BZERO=1\nelse\n\tHAVE_EXPLICIT_BZERO=0 ; echo no ; fi\nprintf \"checking function explicit_memset() in c... \"\necho \"extern int explicit_memset(); int main(int ac, char **av){ explicit_memset(0); return 0; }\" > test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -lc test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_EXPLICIT_MEMSET=1\nelse\n\tHAVE_EXPLICIT_MEMSET=0 ; echo no ; fi\nprintf \"checking function clock_nanosleep() in c... \"\necho \"extern int clock_nanosleep(); int main(int ac, char **av){ clock_nanosleep(0); return 0; }\" > test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -lc test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_CLOCK_NANOSLEEP=1\nelse\n\tHAVE_CLOCK_NANOSLEEP=0 ; echo no ; fi\nprintf \"checking function sigaction() in c... \"\necho \"extern int sigaction(); int main(int ac, char **av){ sigaction(0); return 0; }\" > test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -lc test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_SIGACTION=1\nelse\n\tHAVE_SIGACTION=0 ; echo no ; fi\nprintf \"checking function clock_gettime() in c... \"\necho \"extern int clock_gettime(); int main(int ac, char **av){ clock_gettime(0); return 0; }\" > test.c\n${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -lc test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; HAVE_CLOCK_GETTIME=1\nelse\n\tHAVE_CLOCK_GETTIME=0 ; echo no ; fi\nif [ \"$HAVE_CLOCK_GETTIME\" = \"0\" ]; then\nif [ \"$HAVE_DECL___GLIBC__\" = \"1\" ]; then\nCLOCK_LDFLAGS=\"${CLOCK_LDFLAGS} '-lrt'\"; fi; fi\nprintf \"checking cflags  -std=gnu99... \"\necho \"int main(int ac, char **av){ return 0; }\" > .test.c\n${CC}  -std=gnu99 ${CFLAGS} ${CPPFLAGS} ${LDFLAGS}  -std=gnu99 .test.c >/dev/null 2>&1\nif [ $? = 0 ]; then\n\techo yes ; SUPPORT_GNU99=1\nelse\n\tSUPPORT_GNU99=0 ; echo no ; fi\nHAVE_LIB_GMP=\"0\"\nif [ \"$WANT_SSL\" = \"0\" ]; then\nHAVE_OPENSSL=\"0\"\nSSL_CFLAGS=\"\"\nSSL_LDFLAGS=\"\"\nelse\ncheck_library HAVE_LIB_SSL ssl 0\nif [ -z \"${PKGCONFIG}\" ]; then pkg-config --version >/dev/null 2>&1 ; if [ 0 = 0 ]; then PKGCONFIG=pkg-config ; else PKGCONFIG=pkgconf ; fi; fi\nprintf 'checking pkg-config flags for openssl... '\ntmp=`${PKGCONFIG} --cflags openssl 2>/dev/null`\nif [ $? != 0 ]; then echo no ; HAVE_PKGCFG_OPENSSL=0;\nSSL_CFLAGS='';SSL_LDFLAGS='';\nelse\nSSL_CFLAGS=$tmp;\ntmp=`${PKGCONFIG} --libs openssl 2>/dev/null`\nif [ $? = 0 ]; then\necho yes; HAVE_PKGCFG_OPENSSL=1;\nSSL_LDFLAGS=$tmp; fi; fi\nif [ ! \"$SSL_LDFLAGS\" = \"\" ]; then\nHAVE_OPENSSL=\"1\"; fi\nif [ \"$SSL_LDFLAGS\" = \"\" ]; then\nif [ \"$HAVE_LIB_SSL\" = \"0\" ]; then\nHAVE_OPENSSL=\"0\"\nelse\nSSL_LDFLAGS=\"-lssl\"; fi; fi\nif [ 11 = \"$WANT_SSL_CRYPTO$HAVE_OPENSSL\" ]; then\n\nWANT_SSL_CRYPTO=\"1\"\nelse\nWANT_SSL_CRYPTO=\"0\"; fi; fi\nHAVE_LIBUV_VERSION_1_0_0=0\nprintf \"checking version of library libuv >= 1.0.0... \"\n${PKGCONFIG} --atleast-version=1.0.0 libuv >/dev/null 2>&1\nif [ $? = 0 ]; then HAVE_LIBUV_VERSION_1_0_0=1 ; echo ok; else\necho \"no\" ; fi\nif [ \"$HAVE_LIBUV_VERSION_1_0_0\" = \"1\" ]; then\nif [ -z \"${PKGCONFIG}\" ]; then pkg-config --version >/dev/null 2>&1 ; if [ 0 = 0 ]; then PKGCONFIG=pkg-config ; else PKGCONFIG=pkgconf ; fi; fi\nprintf 'checking pkg-config flags for libuv... '\ntmp=`${PKGCONFIG} --cflags libuv 2>/dev/null`\nif [ $? != 0 ]; then echo no ; HAVE_PKGCFG_LIBUV=0;\nLIBUV_CFLAGS='';LIBUV_LDFLAGS='';\nelse\nLIBUV_CFLAGS=$tmp;\ntmp=`${PKGCONFIG} --libs libuv 2>/dev/null`\nif [ $? = 0 ]; then\necho yes; HAVE_PKGCFG_LIBUV=1;\nLIBUV_LDFLAGS=$tmp; fi; fi\nif [ ! \"$LIBUV_LDFLAGS\" = \"\" ]; then\nHAVE_LIBUV=\"1\"\nelse\nHAVE_LIBUV=\"0\"; fi\nif [ \"$WANT_LIBUV\" = \"0\" ]; then\nHAVE_LIBUV=\"0\"; fi\nelse\nHAVE_LIBUV=\"0\"; fi\nif [ \"$USEROSTYPE\" = \"auto\" ]; then\nif [ \"$HOST_OS\" = \"mingw32_nt-6.2\" ]; then\nUSEROSTYPE=\"mingw32\"\nelse\nif [ \"$HOST_OS\" = \"mingw32_nt\" ]; then\nUSEROSTYPE=\"mingw32\"\nelse\nif [ \"$HOST_OS\" = \"wsl\" ]; then\nUSEROSTYPE=\"wsl\"\nelse\nif [ \"$HOST_OS\" = \"linux\" ]; then\nUSEROSTYPE=\"gnulinux\"\nelse\nif [ \"$HOST_OS\" = \"serenityos\" ]; then\nUSEROSTYPE=\"serenityos\"\nHAVE_LIB_DL=\"1\"\nDL_LIBS=\"-ldl\"\nelse\nif [ \"$HOST_OS\" = \"gnu\" ]; then\nUSEROSTYPE=\"gnulinux\"\nHAVE_LIB_DL=\"1\"\nDL_LIBS=\"-ldl\"\nelse\nif [ \"$HOST_OS\" = \"sunos\" ]; then\nUSEROSTYPE=\"solaris\"\nelse\nif [ \"$HOST_OS\" = \"gnu/kfreebsd\" ]; then\nUSEROSTYPE=\"bsd\"\nelse\nif [ \"$HOST_OS\" = \"netbsd\" ]; then\nUSEROSTYPE=\"bsd\"\nelse\nif [ \"$HOST_OS\" = \"freebsd\" ]; then\nUSEROSTYPE=\"bsd\"\nelse\nif [ \"$HOST_OS\" = \"openbsd\" ]; then\nUSEROSTYPE=\"bsd\"\nelse\nif [ \"$HOST_OS\" = \"darwin\" ]; then\nUSEROSTYPE=\"darwin\"\nelse\nif [ \"$HOST_OS\" = \"haiku\" ]; then\nUSEROSTYPE=\"haiku\"\nelse\nif [ \"$HOST_OS\" = \"aix\" ]; then\nUSEROSTYPE=\"aix\"; fi; fi; fi; fi; fi; fi; fi; fi; fi; fi; fi; fi; fi; fi; fi\nif [ \"$LIBVERSION\" = \"xxx\" ]; then\nLIBVERSION=\"$VERSION\"; fi\nif [ \"$USEROSTYPE\" = \"gnulinux\" ]; then\nHAVE_PTRACE=\"1\"\nUSE_PTRACE_WRAP=\"1\"\nelse\nif [ \"$USEROSTYPE\" = \"wsl\" ]; then\nBUILD=\"${SPLIT_CPU}-unknown-linux-gnu\"\nHOST=\"$BUILD\"\nTARGET=\"$HOST\"\nUSEROSTYPE=\"gnulinux\"\nHAVE_PTRACE=\"1\"\nUSE_PTRACE_WRAP=\"0\"\nelse\nif [ \"$USEROSTYPE\" = \"android\" ]; then\nHAVE_PTRACE=\"1\"\nUSE_PTRACE_WRAP=\"1\"\nelse\nif [ \"$USEROSTYPE\" = \"mingw32\" ]; then\nHAVE_PTRACE=\"0\"\nUSE_PTRACE_WRAP=\"0\"\nelse\nif [ \"$USEROSTYPE\" = \"solaris\" ]; then\nHAVE_PTRACE=\"0\"\nUSE_PTRACE_WRAP=\"0\"\nelse\nif [ \"$USEROSTYPE\" = \"haiku\" ]; then\nHAVE_PTRACE=\"0\"\nUSE_PTRACE_WRAP=\"0\"\nelse\nif [ \"$USEROSTYPE\" = \"aix\" ]; then\nHAVE_PTRACE=\"0\"\nUSE_PTRACE_WRAP=\"0\"\nelse\nHAVE_PTRACE=\"1\"\nUSE_PTRACE_WRAP=\"0\"; fi; fi; fi; fi; fi; fi; fi\nif [ \"$DEBUGGER\" = \"0\" ]; then\nHAVE_PTRACE=\"0\"; fi\nif [ \"$WANT_PTRACE_WRAP\" = \"0\" ]; then\nUSE_PTRACE_WRAP=\"0\"; fi\npcgen() {\n\tPCFILE=\"${1}\" ; shift\n\tPCNAME=\"${1}\" ; shift\n\tREQUIRES=\"$@\"\n\n\techo \"generating ${PCFILE}\" >&2\n\techo \"prefix=${PREFIX}\" > ${PCFILE}\n\techo \"exec_prefix=\\${prefix}\" >> ${PCFILE}\n\techo \"libdir=${PKGCFG_LIBDIR}\" >> ${PCFILE}\n\techo \"includedir=${PKGCFG_INCDIR}\" >> ${PCFILE}\n\techo \"\" >> ${PCFILE}\n\techo \"Name: ${PCNAME}\" >> ${PCFILE}\n\tif [ -n \"${DESCRIPTION}\" ]; then\n\t\techo \"Description: ${DESCRIPTION}\" >> ${PCFILE}\n\tfi\n\techo \"Version: ${VERSION}\" >> ${PCFILE}\n\techo \"Requires: ${REQUIRES}\" >> ${PCFILE}\n\techo \"Cflags: -I\\${includedir}/libr\" >> ${PCFILE}\n\techo \"Libs: -L\\${libdir} -l${PCNAME} ${DL_LIBS}\" >> ${PCFILE}\n}\n\npcgen pkgcfg/r_egg.pc r_egg r_asm r_syscall r_util r_reg r_flag r_cons\npcgen pkgcfg/r_io.pc r_io r_util r_socket r_cons r_crypto\npcgen pkgcfg/r_esil.pc r_esil r_util r_reg\npcgen pkgcfg/r_cons.pc r_cons r_util\npcgen pkgcfg/r_socket.pc r_socket r_util\npcgen pkgcfg/r_reg.pc r_reg r_util\npcgen pkgcfg/r_bp.pc r_bp r_util\npcgen pkgcfg/r_flag.pc r_flag r_util\npcgen pkgcfg/r_bin.pc r_bin r_util r_io r_socket r_magic\npcgen pkgcfg/r_lang.pc r_lang r_util\npcgen pkgcfg/r_syscall.pc r_syscall r_util\npcgen pkgcfg/r_config.pc r_config r_util\npcgen pkgcfg/r_fs.pc r_fs r_util r_io\npcgen pkgcfg/r_util.pc r_util\npcgen pkgcfg/r_magic.pc r_magic r_util\npcgen pkgcfg/r_search.pc r_search r_util\npcgen pkgcfg/r_arch.pc r_arch r_util r_reg r_esil\npcgen pkgcfg/r_crypto.pc r_crypto r_util\npcgen pkgcfg/r_anal.pc r_anal r_util r_reg r_syscall r_search r_cons r_flag r_crypto r_arch r_esil\npcgen pkgcfg/r_asm.pc r_asm r_util r_reg r_syscall r_search r_cons r_flag r_crypto r_arch r_esil\npcgen pkgcfg/r_debug.pc r_debug r_util\nSEDFLAGS=\" -e '\"\nCOUNT=0\nfor A in ${ENVWORDS} ; do\n\t[ \"${A}\" = VPATH ] && continue\n\t[ \"${A}\" = srcdir ] && continue\n\teval \"VAR=\\$${A}\"\n\tVAR=\"`echo ${VAR} | sed -e 's/\\,/\\\\\\,/g'`\"\n\t[ $COUNT = 10 ] && COUNT=0 && SEDFLAGS=\"${SEDFLAGS}' -e '\"\n\tCOUNT=$(($COUNT+1))\n\tSEDFLAGS=\"${SEDFLAGS}s,@${A}@,${VAR},g;\"\ndone\nSEDFLAGS=\"${SEDFLAGS}'\"\nfor A in ./config-user.mk libr/include/r_userconf.h pkgcfg/r_core.pc  ; do # SUBDIRS\nif [ -f \"${VPATH}/${A}.acr\" ]; then\n  SD_TARGET=${A}\n else\n  if [ -d \"${VPATH}/${A}\" ]; then\n   SD_TARGET=${A}/Makefile\n   mkdir -p ${A}\n  else\n   echo \"ERROR: Cannot find ${VPATH}/${A}.acr\" >&2\n   exit 1\n  fi\n fi\n ocho \"creating ${SD_TARGET}\"\n[ \"${VPATH}\" != '.' ] &&  mkdir -p $(echo ${A} | sed -e \"s,/`basename ${A}`$,,g\")\n cat ${VPATH}/${SD_TARGET}.acr | \\\neval sed -e \"s,@VPATH@,${VPATH}/${A},g\" ${SEDFLAGS} > ${SD_TARGET}.tmp\n\nfor A in ${ENVWORDS}; do\nVALUE=`eval echo \"$\"${A}`\nif [ \"$VALUE\" = 0 ]; then ## FALSE\n MARK=\"##${A}##\"\nif [ -n \"`grep \\\"${MARK}\\\" ${SD_TARGET}.tmp`\" ]; then\n mv ${SD_TARGET}.tmp ${SD_TARGET}.tmp2\n cat ${SD_TARGET}.tmp2 | MARK=$MARK $AWK 'BEGIN{a=0;}{if($1==ENVIRON[\"MARK\"]){if(a)a=0;else a=1}else{if(!a)print;}}' > ${SD_TARGET}.tmp\n fi\nfi\ndone\n mv ${SD_TARGET}.tmp ${SD_TARGET} && rm -f ${SD_TARGET}.tmp2\n if [ ! $? = 0 ]; then echo Cannot write target file ; control_c ; fi\ndone\n\ndo_remove\nif [ \"$QUIET\" = 0 ]; then\necho\necho \"Final report:\"\nfor A in  BUILD CC CFLAGS DEBUGGER HAVE_ARC4RANDOM_UNIFORM HAVE_EXPLICIT_BZERO USE_NEW_ABI HAVE_EXPLICIT_MEMSET HAVE_FORK HAVE_GPERF HAVE_LIBUV HAVE_LIB_GMP WANT_DEBUGSTUFF HAVE_OPENSSL WANT_SSL_CRYPTO HAVE_PTRACE HOST LDFLAGS LIBVERSION PKGCONFIG PREFIX R_CHECKS_LEVEL TARGET USERCC USEROSTYPE USE_CAPSTONE USE_LIB_MAGIC NEW_IO_CACHE USE_SQSH USE_LIB_XXHASH USE_LIB_ZIP USE_PTRACE_WRAP USE_SYSLZ4 VERSION WANT_DYLINK USE_SMALLZ4 ; do\neval VAL=\"\\$${A}\"\n[ -z \"${VAL}\" ] && VAL=\"\\\"\\\"\"\necho \" - ${A} = ${VAL}\"\ndone\nfi\n"
        },
        {
          "name": "configure-plugins",
          "type": "blob",
          "size": 5.78515625,
          "content": "#!/bin/sh\n#\n# Script to configure \"staticability\" of plugins\n# author: pancake // nopcode\n# update: 2010-01-14\n#\n\nLANG=C\nLC_ALL=C\nLOADLIBS=1\nif [ -z \"$EXT_SO\" ]; then\n\tEXT=so\n\t[ \"`uname`\" = Darwin ] && EXT=dylib\nelse\n\tEXT=\"${EXT_SO}\"\nfi\n\nexport LANG\nexport LC_ALL\n\nlist () {\n  for a in $STATIC ; do echo \"static  $a\" ; done\n  for a in $SHARED ; do echo \"shared  $a\" ; done\n  exit 0\n}\n\nhelp () {\n  echo \"Usage: ./configure-plugins [options]\"\n  echo \"  -n                   do nothing.. do not generate any file\"\n  echo \"  --list               list all static and shared plugins\"\n  echo \"  --rm-static [dir]    remove plugins that are already in core from dir\"\n  echo \"  --static [name ..]   define named plugin as static\"\n  echo \"  --shared [name ..]   define named plugin as shared\"\n  echo \"  --help, -h           display this helpful message\"\n  echo \"NOTE: static plugins are compiled inside the owner library\"\n  exit 0\n}\n\ncfg=./plugins.cfg\n\nif [ ! -f \"$cfg\" ]; then\n  echo \"configure-plugins: Copying dist/plugins-cfg/plugins.def.cfg\"\n  cp -f dist/plugins-cfg/plugins.def.cfg plugins.cfg\nfi\n\nload () {\n  if [ -e $cfg ]; then\n    echo \"configure-plugins: Loading $cfg ..\"\n    . $cfg\n  else\n    echo \"configure-plugins: Loading $1 ..\"\n    . \"$1\"\n  fi\n}\n\ngenerate_configh () {\n  plugins=\"\"\n  oldlib=\"\"\n  for a in ${STATIC} ; do\n    lib=$(echo $a | cut -d . -f 1) # library\n    plg=$(echo $a | cut -d . -f 2) # plugin name\n    if [ ! \"$oldlib\" = \"$lib\" ]; then\n      [ -n \"$oldlib\" ] && echo \"     0\"\n      oldlib=$lib\n      uclib=$(echo $lib | tr '[a-z]' '[A-Z]')\n      echo\n      echo \"#define R_${uclib}_STATIC_PLUGINS \\\\\"\n      plugins=\"${plugins} __${uclib}\"\n    fi\n    echo \"     &r_${lib}_plugin_${plg}, \\\\\"\n  done\n  [ -n \"$oldlib\" ] && echo \"     0\"\n\n  # CAREFULLY FILL EMPTY PLUGIN ARRAYS\n  for a in ${SHARED} ; do\n    lib=$(echo $a | cut -d . -f 1) # library\n    plg=$(echo $a | cut -d . -f 2) # plugin name\n    if [ ! \"$oldlib\" = \"$lib\" ]; then\n      oldlib=$lib\n      uclib=$(echo $lib | tr '[a-z]' '[A-Z]')\n      if [ -z \"`echo ${plugins} | grep __${uclib}`\" ]; then\n        plugins=\"${plugins} __${uclib}\"\n        echo\n        echo \"#define R_${uclib}_STATIC_PLUGINS 0\"\n      fi\n    fi\n  done\n}\n\ngenerate_asmdinc() {\n  plugins=\"\"\n  oldlib=\"\"\n  for a in ${STATIC} ; do\n    lib=$(echo $a | cut -d . -f 1) # library\n    plg=$(echo $a | cut -d . -f 2) # plugin name\n    echo \"(SdbGperf*)&gperf_${plg},\"\n  done\n}\n\ngenerate_configmk () {\n  splugins=\"\"\n  plugins=\"\"\n  oldlib=\"\"\n  for a in `echo \"${STATIC} ${SHARED}\" | tr \" \" \"\\n\" | sort` ; do\n    lib=$(echo $a | cut -d . -f 1) # library\n    plg=$(echo $a | cut -d . -f 2) # plugin name\n    if [ ! \"$oldlib\" = \"$lib\" ]; then\n      [ -n \"$oldlib\" ] && printf \"\\n\"\n      oldlib=$lib\n      uclib=$(echo $lib | tr '[a-z]' '[A-Z]')\n      printf \"STATIC_${uclib}_PLUGINS=\"\n      plugins=\"${plugins} __${uclib}\"\n    fi\n    printf \" p/${plg}.mk\"\n  done\n\n  echo\n\n  for a in ${SHARED} ; do\n    lib=$(echo $a | cut -d . -f 1) # library\n    plg=$(echo $a | cut -d . -f 2) # plugin name\n    uclib=$(echo $lib | tr '[a-z]' '[A-Z]')\n    if [ -z \"`echo ${splugins} | grep __${uclib}`\" ]; then\n      splugins=\"${splugins} __${uclib}\"\n      printf \"SHARED_${uclib}_TARGETS=\"\n    fi\n    printf \" p/io_${plg}.${EXT}\"\n  done\n  echo\n}\n\ngenerate () {\n  echo \"configure-plugins: Generating libr/config.h\"\n  cat libr/config.h.head > libr/config.h\n\n  echo \"#define R2_LOADLIBS ${LOADLIBS}\" >> libr/config.h\n  generate_configh >> libr/config.h\n  cat libr/config.h.tail >> libr/config.h\n\n  echo \"configure-plugins: Generating libr/asm/d/config.inc\"\n  generate_asmdinc >> libr/asm/d/config.inc\n\n  echo \"configure-plugins: Generating libr/config.mk\"\n  cat libr/config.mk.head > libr/config.mk\n  generate_configmk >> libr/config.mk\n  cat libr/config.mk.tail >> libr/config.mk\n  return\n}\n\nadd () {\n  for a in $1 ; do [ $a = $2 ] && return ; done ; echo $1 $2\n}\n\nsub () {\n  n=\"\" ; for a in $1 ; do [ $a = $2 ] && continue ; n=\"$n $a\" ; done ; echo $n\n}\n\necho | sort -t. > /dev/null 2>&1\nif [ $? = 0 ]; then\n  SORT=\"sort -t.\"\nelse\n  SORT=\"sort\"\nfi\n\ndosort () {\n  ( for a in $1 ; do echo $a ; done ) | tr _ Z | ${SORT} | tr Z _\n  #( for a in $1 ; do echo $a ; done ) | sort -t. --key=1,1d\n}\n\nsort_vars () {\n  STATIC=$(dosort \"$STATIC\")\n  SHARED=$(dosort \"$SHARED\")\n}\n\nmake_static () {\n  STATIC=$(add \"$STATIC\" $1)\n  SHARED=$(sub \"$SHARED\" $1)\n}\n\nmake_shared () {\n  SHARED=$(add \"$SHARED\" $1)\n  STATIC=$(sub \"$STATIC\" $1)\n}\n\nmake_ () { : ; }\n\nMODE=\"\"\nDONOTHING=0\nDEFCFG=dist/plugins-cfg/plugins.def.cfg\n\ncheck_conflicts () {\n  CONFLICT=0\n  for a in $STATIC ; do\n    for b in $SHARED ; do\n      if [ \"$a\" = \"$b\" ]; then\n        echo \"\\x1b[1mError\\x1b[0m: Conflict \\x1b[44m$a\\x1b[0m is defined as STATIC and SHARED\"\n        CONFLICT=1\n      fi\n    done\n  done\n  return $CONFLICT\n}\n\nrmstatic() {\n  C=0\n  if [ -z \"$1\" ]; then\n    echo \"Missing argument\"\n    exit 1\n  fi\n  for a in ${STATIC} ; do\n    b=\"`echo $a | tr . _`\"\n    for ext in dll dylib so ; do\n      f=\"$b.$ext\"\n      if [ -f \"$f\" ]; then\n        C=$(($C+1))\n\tprintf \"  $C found\\r\"\n        #echo \"rm -f $f\"\n        rm -f \"$f\"\n      fi\n    done\n  done\n  echo \"Removed $C shared plugins that are already static\"\n}\n\nRMSTATIC=-\n\nwhile : ; do\n  [ -z \"$1\" ] && break\n  case \"$1\" in\n  \"--static\") MODE=static ; ;;\n  \"--shared\") MODE=shared ; ;;\n  \"--without-gpl\") DEFCFG=./plugins.nogpl.cfg ;;\n  \"--disable-loadlibs\") LOADLIBS=0 ;;\n  \"--rm-static\") RMSTATIC=\"$2\" ; ;;\n  \"--list\") sort_vars ; list ; ;;\n  \"-n\") DONOTHING=1 ; ;;\n  \"-h\"|\"--help\") help ; ;;\n  *) eval make_$MODE $1 ; ;;\n  esac\n  shift\ndone\n\nload ${DEFCFG}\nsort_vars\n\nif [ - != \"${RMSTATIC}\" ]; then\n  if [ -z \"${RMSTATIC}\" ]; then\n    echo \"Missing argument\" >&2\n    exit\n  fi\n  if [ -d \"${RMSTATIC}\" ]; then\n    cd \"${RMSTATIC}\" && rmstatic \"${RMSTATIC}\"\n  fi\n  exit 0\nfi\n\ncheck_conflicts || exit 1\n\n[ ${DONOTHING} = 0 ] && generate\n\necho SHARED: ${SHARED}\necho STATIC: ${STATIC}\n\n\nexit 0\n"
        },
        {
          "name": "configure.acr",
          "type": "blob",
          "size": 8.4951171875,
          "content": "PKGNAME radare2\nVERSION 5.9.9\nCONTACT pancake ; pancake@nopcode.org\n\nDESCRIPTION The UNIX-like reverse engineering toolkit ;\n\nLANG_C!\n\nARG_DISABLE DEBUGGER debugger disable native debugger features ;\n\nUSE_DL\n\nUSE_PKGCONFIG\n\nR2_BUILDSYSTEM = \"make\" ;\n\nCHKPRG! PATCH patch\nCHKPRG! AR ar\nCHKPRG GIT git\nCHKPRG GPERF gperf\nCHKLIB magic\nCHKINC linux/can.h\nARG_WITH USE_MAGIC sysmagic force to use system's magic ;\nIFAND HAVE_LIB_MAGIC USE_MAGIC {\n\tUSE_LIB_MAGIC = 1 ;\n\tLIBMAGIC = -lmagic ;\n}{\n\tUSE_LIB_MAGIC = 0 ;\n\tLIBMAGIC = '' ;\n}\n\nARG_DISABLE WANT_THREADS threads disable use of thread apis ;\n\n(( useful for static builds . see sys/static.sh ))\nARG_DISABLE LOADLIBS loadlibs disable loading plugins ;\n\nARG_ENABLE R_CRITICAL_ENABLED threadsafety enable mutexes in critical code paths ;\n\nARG_WITHOUT WANT_DYLINK dylink disable support for dynamic loading of plugins ;\nARG_WITHOUT HAVE_FORK fork disable fork ;\nARG_WITHOUT WANT_PTRACE_WRAP ptrace-wrap build ptrace-wrap support needed for the iaito debugger on Linux ;\nARG_WITHOUT WANT_GPERF gperf do not statically link the sdb databases even if gperf is found ;\nARG_WITHOUT WANT_CAPSTONE capstone dont build the capstone dependency ;\n\nIFNOT WANT_GPERF {\n\tHAVE_GPERF = 0 ;\n}\n\nARG_WITH WITH_LIBR libr build libr.a and libr.dylib ;\nARG_WITH WITH_STATIC_THEMES static-themes default themes are compiled and fallback if not available on disk ;\n\n(( CAPSTONE ))\nARG_WITH USE_CSNEXT capstone-next build next branch of the capstone disassembler ;\n(( TODO rename to capstone-v5 and capstone-v4 ))\nARG_WITH USE_CS5 capstone5 build v5 branch of capstone5 (default) ;\nARG_WITH USE_CS4 capstone4 build v4 branch of capstone ;\n\nARG_WITH WITH_CAPSTONE syscapstone force to use system-wide capstone ;\nARG_WITHOUT WITHOUT_SYSCAPSTONE syscapstone avoid the system-wide capstone ;\nIF WITH_CAPSTONE {\n\tPKGCFG CAPSTONE_CFLAGS CAPSTONE_LDFLAGS capstone\n}\nIFAND WITH_CAPSTONE HAVE_PKGCFG_CAPSTONE {\n\tUSE_CAPSTONE = 1 ;\n}{\n\tUSE_CAPSTONE = 0 ;\n}\n\nIFNOT WITHOUT_SYSCAPSTONE {\n\tUSE_CAPSTONE = 0 ;\n\tHAVE_PKGCFG_CAPSTONE = 0 ;\n\tCAPSTONE_CFLAGS = \"\" ;\n\tCAPSTONE_LDFLAGS = \"\" ;\n}\n\n(( SQSH ))\nPKGCFG SQSH_CFLAGS SQSH_LDFLAGS libsqsh\nARG_WITHOUT WITH_SQSH sqsh ensure squashfs support is not included, even if library is found ;\nIFAND WITH_SQSH HAVE_PKGCFG_LIBSQSH {\n\tUSE_SQSH = 1 ;\n}{\n\tUSE_SQSH = 0 ;\n}\n\n(( LZ4 ))\nPKGCFG LZ4_CFLAGS LZ4_LDFLAGS liblz4\nARG_WITH WITH_SYSLZ4 syslz4 force to use system's liblz4 ;\nIFAND WITH_SYSLZ4 HAVE_PKGCFG_LIBLZ4 {\n\tUSE_SYSLZ4 = 1 ;\n}{\n\tUSE_SYSLZ4 = 0 ;\n\n}\n\n(( ZIP ))\nCHKLIB z\nCHKLIB zip\nARG_WITH USE_ZIP syszip force to use system's libzip and zlib ;\nIFAND HAVE_LIB_Z USE_ZIP {\n\tIF HAVE_LIB_ZIP {\n\t\tUSE_LIB_ZIP = 1 ;\n\t\tLIBZIP = -lz -lzip ;\n\t}{\n\t\tUSE_LIB_ZIP = 0 ;\n\t\tLIBZIP = '' ; (( static linking to shlr/zip ))\n\t}\n}{\n\tUSE_LIB_ZIP = 0 ;\n\tLIBZIP = '' ; (( static linking to shlr/zip ))\n}\n\nCHKLIB xxhash\nARG_WITH USE_XXHASH sysxxhash force to use system's xxhash ;\nIFAND HAVE_LIB_XXHASH USE_XXHASH {\n\tUSE_LIB_XXHASH = 1 ;\n\tLIBXXHASH = -lxxhash ;\n}{\n\tUSE_LIB_XXHASH = 0 ;\n\tLIBXXHASH = '' ;\n}\n\nARG_WITHOUT WITH_GPL gpl do not build GPL code (grub, cxx, ... ) ;\n\nCHKDECL sys/personality.h ADDR_NO_RANDOMIZE\nCHKDECL features.h __GLIBC__\nCHKFNC c arc4random_uniform\nCHKFNC c explicit_bzero\nCHKFNC c explicit_memset\nCHKFNC c clock_nanosleep\nCHKFNC c sigaction\nCHKFNC c clock_gettime\n\nIFNOT HAVE_CLOCK_GETTIME {\n\tIF HAVE_DECL___GLIBC__ {\n\t\tCLOCK_LDFLAGS += '-lrt' ;\n\t}\n}\n\nCHKFLG SUPPORT_GNU99 -std=gnu99 ;\n\n(( TODO must deprecate\nCHKLIB gmp\nARG_WITHOUT HAVE_GMP gmp disable GMP dependency ;\nIFNOT HAVE_GMP { HAVE_LIB_GMP = 0 ; }\nHAVE_GMP = 0 ;\n))\nHAVE_LIB_GMP = 0 ;\n\n\n(( openssl is used for https:// in rsocket and crypto/hash ))\nARG_WITH WANT_SSL ssl build with (Open|Boring|..)SSL if possible ;\nARG_WITH WANT_SSL_CRYPTO ssl-crypto build crypto code with libssl ;\nIFNOT WANT_SSL {\n\tHAVE_OPENSSL = 0 ;\n\tSSL_CFLAGS = \"\" ;\n\tSSL_LDFLAGS = \"\" ;\n}{\n\tCHKLIB ssl\n\tPKGCFG SSL_CFLAGS SSL_LDFLAGS openssl\n\tIFNOTNULL SSL_LDFLAGS {\n\t\tHAVE_OPENSSL = 1 ;\n\t}\n\n\tIFNULL SSL_LDFLAGS {\n\t\tIFNOT HAVE_LIB_SSL {\n\t\t\tHAVE_OPENSSL = 0 ;\n\t\t}{\n\t\t\tSSL_LDFLAGS = -lssl ;\n\t\t}\n\t}\n\tIFAND WANT_SSL_CRYPTO HAVE_OPENSSL {\n\t\tWANT_SSL_CRYPTO = 1 ;\n\t}{\n\t\tWANT_SSL_CRYPTO = 0 ;\n\t}\n}\n\nARG_WITH WANT_LIBUV libuv use libuv if available ;\nCHKVER libuv 1.0.0\nIF HAVE_LIBUV_VERSION_1_0_0 {\n\tPKGCFG LIBUV_CFLAGS LIBUV_LDFLAGS libuv\n\tIFNOTNULL LIBUV_LDFLAGS {\n\t\tHAVE_LIBUV = 1 ;\n\t}{\n\t\tHAVE_LIBUV = 0 ;\n\t}\n\tIFNOT WANT_LIBUV {\n\t\tHAVE_LIBUV = 0 ;\n\t}\n}{\n\tHAVE_LIBUV = 0 ;\n}\n\nARG_WITH USE_NEW_ABI new-abi use the new ABI breaking changes scheduled for the next major release ;\n\nARG_WITH USE_RPATH rpath use rpath to build ;\n\n(( rules for the compiler ))\nARG_WITH USERCC=gcc compiler Define compiler to use (see mk/) ;\nARG_WITH USEROSTYPE=auto ostype Choose OS ( android windows wsl mingw32 bsd solaris gnulinux darwin haiku ) ;\n\n(( TODO: throw error if unknown ostype ))\n(( TODO: handle BSD os as different ostype? ))\nIFEQ USEROSTYPE auto ; {\n\tIFEQ HOST_OS mingw32_nt-6.2 ; {\n\t\tUSEROSTYPE = mingw32 ;\n\t}{\n\tIFEQ HOST_OS mingw32_nt ; {\n\t\tUSEROSTYPE = mingw32 ;\n\t}{\n\tIFEQ HOST_OS wsl ; {\n\t\tUSEROSTYPE =  wsl ;\n\t}{\n\tIFEQ HOST_OS linux ; {\n\t\tUSEROSTYPE = gnulinux ;\n\t}{\n\tIFEQ HOST_OS serenityos ; {\n\t\tUSEROSTYPE = serenityos ;\n\t\tHAVE_LIB_DL = 1 ;\n\t\tDL_LIBS = -ldl ;\n\t}{\n\tIFEQ HOST_OS gnu ; {\n\t\t(( GNU / HURD ))\n\t\tUSEROSTYPE = gnulinux ;\n\t\tHAVE_LIB_DL = 1 ;\n\t\tDL_LIBS = -ldl ;\n\t}{\n\tIFEQ HOST_OS sunos ; {\n\t\tUSEROSTYPE = solaris ;\n\t}{\n\tIFEQ HOST_OS gnu/kfreebsd ; {\n\t\tUSEROSTYPE = bsd ;\n\t}{\n\tIFEQ HOST_OS netbsd ; {\n\t\tUSEROSTYPE = bsd ;\n\t}{\n\tIFEQ HOST_OS freebsd ; {\n\t\tUSEROSTYPE = bsd ;\n\t}{\n\tIFEQ HOST_OS openbsd ; {\n\t\tUSEROSTYPE = bsd ;\n\t}{\n\tIFEQ HOST_OS darwin ; {\n\t\tUSEROSTYPE = darwin ;\n\t}{\n\tIFEQ HOST_OS haiku ; {\n\t\tUSEROSTYPE = haiku ;\n\t}{\n\tIFEQ HOST_OS aix ; {\n\t\tUSEROSTYPE = aix ;\n\t} } } } } } } } } } } } } }\n}\n\n(( this hack is required for openbsd ports ))\nARG_WITH LIBVERSION=xxx libversion specify different libversion ;\nARG_WITHOUT HAVE_JEMALLOC jemalloc build without jemalloc ;\n\nIFEQ LIBVERSION xxx ; {\n\tLIBVERSION = $VERSION ;\n}\n\nIFEQ USEROSTYPE gnulinux ; {\n\tHAVE_PTRACE = 1 ;\n\tUSE_PTRACE_WRAP = 1 ;\n}{\nIFEQ USEROSTYPE wsl ; {\n\tBUILD = ${SPLIT_CPU}-unknown-linux-gnu ;\n\tHOST = $BUILD ;\n\tTARGET = $HOST ;\n\tUSEROSTYPE = gnulinux ;\n\tHAVE_PTRACE = 1 ;\n\tUSE_PTRACE_WRAP = 0 ;\n}{\nIFEQ USEROSTYPE android ; {\n\tHAVE_PTRACE = 1 ;\n\tUSE_PTRACE_WRAP = 1 ;\n}{\nIFEQ USEROSTYPE mingw32 ; {\n\tHAVE_PTRACE = 0 ;\n\tUSE_PTRACE_WRAP = 0 ;\n}{\nIFEQ USEROSTYPE solaris ; {\n\tHAVE_PTRACE = 0 ;\n\tUSE_PTRACE_WRAP = 0 ;\n}{\nIFEQ USEROSTYPE haiku ; {\n\tHAVE_PTRACE = 0 ;\n\tUSE_PTRACE_WRAP = 0 ;\n}{\nIFEQ USEROSTYPE aix ; {\n\tHAVE_PTRACE = 0 ;\n\tUSE_PTRACE_WRAP = 0 ;\n}{\n\tHAVE_PTRACE = 1 ;\n\tUSE_PTRACE_WRAP = 0 ;\n} } } } } } }\n\nIFNOT DEBUGGER {\n\tHAVE_PTRACE = 0 ;\n}\n\nIFEQ WANT_PTRACE_WRAP 0 ; {\n\tUSE_PTRACE_WRAP = 0 ;\n}\n\nARG_WITH R_CHECKS_LEVEL=2 checks-level value between 0 and 3 to enable different level of assert (see R_CHECKS_LEVEL) ;\nARG_DISABLE WANT_DEBUGSTUFF debug-stuff disable the log messages and disable control-c ;\n\nREPORT\n\tBUILD CC CFLAGS DEBUGGER HAVE_ARC4RANDOM_UNIFORM HAVE_EXPLICIT_BZERO USE_NEW_ABI\n\tHAVE_EXPLICIT_MEMSET HAVE_FORK HAVE_GPERF HAVE_LIBUV HAVE_LIB_GMP WANT_DEBUGSTUFF\n\tHAVE_OPENSSL WANT_SSL_CRYPTO HAVE_PTRACE HOST LDFLAGS LIBVERSION PKGCONFIG PREFIX\n\tR_CHECKS_LEVEL TARGET USERCC USEROSTYPE USE_CAPSTONE USE_LIB_MAGIC NEW_IO_CACHE USE_SQSH\n\tUSE_LIB_XXHASH USE_LIB_ZIP USE_PTRACE_WRAP USE_SYSLZ4 VERSION WANT_DYLINK USE_SMALLZ4\n;\n\nPKGCFG_DO pkgcfg/r_egg.pc r_egg r_asm r_syscall r_util r_reg r_flag r_cons ;\nPKGCFG_DO pkgcfg/r_io.pc r_io r_util r_socket r_cons r_crypto ;\nPKGCFG_DO pkgcfg/r_esil.pc r_esil r_util r_reg ;\nPKGCFG_DO pkgcfg/r_cons.pc r_cons r_util ;\nPKGCFG_DO pkgcfg/r_socket.pc r_socket r_util ;\nPKGCFG_DO pkgcfg/r_reg.pc r_reg r_util ;\nPKGCFG_DO pkgcfg/r_bp.pc r_bp r_util ;\nPKGCFG_DO pkgcfg/r_flag.pc r_flag r_util ;\nPKGCFG_DO pkgcfg/r_bin.pc r_bin r_util r_io r_socket r_magic ;\nPKGCFG_DO pkgcfg/r_lang.pc r_lang r_util ;\nPKGCFG_DO pkgcfg/r_syscall.pc r_syscall r_util ;\nPKGCFG_DO pkgcfg/r_config.pc r_config r_util ;\nPKGCFG_DO pkgcfg/r_fs.pc r_fs r_util r_io ;\nPKGCFG_DO pkgcfg/r_util.pc r_util ;\nPKGCFG_DO pkgcfg/r_magic.pc r_magic r_util ;\nPKGCFG_DO pkgcfg/r_search.pc r_search r_util ;\nPKGCFG_DO pkgcfg/r_arch.pc r_arch r_util r_reg r_esil ;\nPKGCFG_DO pkgcfg/r_crypto.pc r_crypto r_util ;\nPKGCFG_DO pkgcfg/r_anal.pc r_anal r_util r_reg r_syscall r_search r_cons r_flag r_crypto r_arch r_esil ;\nPKGCFG_DO pkgcfg/r_asm.pc r_asm r_util r_reg r_syscall r_search r_cons r_flag r_crypto r_arch r_esil ;\nPKGCFG_DO pkgcfg/r_debug.pc r_debug r_util ;\n\n/* TODO: Add the rest of .pc files here.. add a rule for acr? */\nSUBDIRS ./config-user.mk\n\tlibr/include/r_userconf.h\n\tpkgcfg/r_core.pc\n;\n"
        },
        {
          "name": "configure.bat",
          "type": "blob",
          "size": 0.857421875,
          "content": "@echo off\nREM call preconfigure.bat\n\nset MESON_FLAGS=-Dsdb_cgen=false -Dc_std=c11\n\nif \"%*\" == \"asan\" (\n  set MESON_FLAGS=%MESON_FLAGS% -Dwasan=true\n)\n\nif \"%*\" == \"static\" (\n  set MESON_FLAGS=%MESON_FLAGS% -Dstatic_runtime=true -Dblob=true -Denable_r2r=false -Denable_tests=false\n)\n\nif \"%*\" == \"release\" (\n  set MESON_FLAGS=%MESON_FLAGS% --buildtype=release\n)\n\nset PATH=%CD%\\prefix\\bin;%PATH%\nset WORKS=0\nif EXIST vs (\n  meson vs %MESON_FLAGS% --backend vs --reconfigure && set WORKS=1\n) else (\n  meson vs %MESON_FLAGS% --backend vs && set WORKS=1\n)\n\nif %WORKS% EQU 1 (\n  echo Done\n) else (\n  echo VS failed Try running 'preconfigure'\n  exit /b 1\n)\n\nset WORKS=0\nif EXIST b (\n  meson b %MESON_FLAGS% --reconfigure && set WORKS=1\n) else (\n  meson b %MESON_FLAGS% && set WORKS=1\n)\n\nif %WORKS% EQU 1 (\n  echo Done\n  exit /b 0\n) else (\n  echo Try running 'preconfigure'\n  exit /b 1\n)\n"
        },
        {
          "name": "configure.hook",
          "type": "blob",
          "size": 0.208984375,
          "content": "#!/bin/sh\ncase \"$1\" in\n--report|-r|--version|-qV|--quiet-version|--help)\n\t: # nothing to do here\n\t;;\n*)\n\t[ dist/plugins-cfg/plugins.def.cfg -nt ./plugins.cfg ] && rm -f plugins.cfg\n\t./configure-plugins $*\n\t;;\nesac\n"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "env.sh",
          "type": "blob",
          "size": 1.296875,
          "content": "#!/bin/sh\n\ngetabsolutepath() {\n\t[ -d \"$1\" ] && { cd \"$1\"; echo \"$(pwd -P)\"; } ||\n\t{ cd \"$(dirname \"$1\")\"; echo \"$(pwd -P)/$(basename \"$1\")\"; }\n}\n\npfx=$(getabsolutepath \"$1\")\n\nif [ -z \"$1\" ]; then\n\techo \"Usage: ./env.sh [destdir|prefix] [program]\"\n\texit 1\nfi\n\nif [ ! -d \"$pfx\" ]; then\n\techo \"Cannot find $pfx directory\"\n\texit 1\nfi\n\n# Support DESTDIR\nif [ -d \"$pfx/usr/bin\" ]; then\n\tpfx=\"$pfx/usr\"\nfi\n\nnew_env='\nR2_ENV_IS_SET=1\nR2_LIBR_PLUGINS=${pfx}/lib/radare2\nPATH=$pfx/bin${PATH:+:${PATH}}\nLIBRARY_PATH=$pfx/lib${LIBRARY_PATH:+:${LIBRARY_PATH}}\nLD_LIBRARY_PATH=$pfx/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\nDYLD_LIBRARY_PATH=$pfx/lib${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}}\nPKG_CONFIG_PATH=$pfx/lib/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}\n'\n\nshift\nif [ \"$R2_ENV_IS_SET\" = 1 ]; then\n\techo \"Nested call\"\n\texec $*\n\texit $?\nfi\n\nif [ -z \"$*\" ]; then\n\techo\n\techo \"==> Entering radare2 environment shell...\"\n\techo\n\techo $new_env $* \\\n\t   | sed -e 's, ,\\n,g' \\\n\t   | sed -e 's,^,  ,g' \\\n\t   | sed -e 's,$, \\\\,'\n\techo\n\texport PS1=\"r2env.sh$ \"\n\teval $new_env $SHELL\n\techo\n\techo \"==> Back to system shell...\"\n\techo\nelse\n\tif [ $# -gt 1 ]; then\n\t\tpar=\"\"\n\t\tp=0\n\t\twhile : ; do\n\t\t\tp=$(($p+1))\n\t\t\t[ $p -gt $# ] && break\n\t\t\ta=`eval echo \"\\$\\{$p\\}\"`\n\t\t\tpar=\"$par\\\"$a\\\" \"\n\t\tdone\n\t\teval $new_env $par\n\telse\n\t\teval $new_env $*\n\tfi\nfi\n"
        },
        {
          "name": "global.mk",
          "type": "blob",
          "size": 0.9716796875,
          "content": "ifeq ($(_INCLUDE_GLOBAL_MK_),)\n_INCLUDE_GLOBAL_MK_=1\nDESTDIR=\nCOMPILER?=gcc\n\nSPACE:=\nSPACE+=\nifneq (,$(findstring $(SPACE),$(PREFIX)))\n$(error PREFIX cannot contain spaces)\nendif\nifneq (,$(findstring $(SPACE),$(shell pwd)))\n$(error Current working directory cannot contain spaces)\nendif\n\nTOP:=$(dir $(lastword $(MAKEFILE_LIST)))\nLTOP:=$(TOP)/libr\nSTOP:=$(TOP)/shlr\nBTOP:=$(TOP)/binr\nSPRJ:=$(TOP)/subprojects\n\nifeq ($(MAKEFLAGS),s)\nSILENT=1\nelse\nSILENT=\nendif\n\nifndef USE_GIT_URLS\nGIT_PREFIX=https://\nelse\nGIT_PREFIX=git://\nendif\n\nrmdblslash=$(subst //,/,$(subst //,/,$(subst /$$,,$1)))\n\n.c:\nifneq ($(SILENT),)\n\t@echo LD $<\nendif\n\t$(CC) $(LDFLAGS) -c $(CFLAGS) -o $@ $<\n\n.c.o:\nifeq ($(SILENT),)\n\t$(CC) -c $(CFLAGS) -o $@ $<\nelse\n\t#@echo \"[$(shell $(LIBR)/count.sh)] CC $<\"\n\t@echo \"[$(shell basename `pwd`)] CC $<\"\n\t@$(CC) -c $(CFLAGS) -o $@ $<\nendif\n\n-include $(TOP)/config-user.mk\n-include $(TOP)/mk/platform.mk\n-include $(TOP)/mk/${COMPILER}.mk\n\nWWWROOT=$(DATADIR)/radare2/${VERSION}/www\nendif\n"
        },
        {
          "name": "libr",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 0.9052734375,
          "content": ":: Build (and eventually install) r2 for windows\n@echo off\nif \"%*\" == \"clean\" (\n  wsl rm -rf b vs\n  exit /b 0\n)\n\ncall ninja.exe --version > NUL 2> NUL && (\n  if EXIST b (\n    REM meson compile -C b\n    call ninja.exe -C b -j 2 && (\n      echo Installing r2 in %CD%\\prefix\n      set DESTDIR=%CD%\\prefix\n      rmdir /q /s prefix 2> NUL\n      REM meson install -C b\n      call ninja -C b install > NUL\n      copy /y %DESTDIR%\\bin\\radare2.exe %DESTDIR%\\bin\\r2.exe\n      REM COPY ASAN DLL FROM HERE\n      REM \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\Hostx64\\x64\"\n      copy /y C:\\WINDOWS\\System32\\vcruntime140.dll %DESTDIR%\\bin\\vcruntime140.dll\n      exit /b 0\n    ) || (\n      echo Ninja compilation has failed\n      exit /b 1\n    )\n  ) else (\n    echo Please run configure before make\n    exit /b 1\n  )\n) || (\n  echo Cannot find the ninja. Please run preconfigure\n  exit /b 1\n)\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 19.8369140625,
          "content": "project('radare2', 'c', license : 'LGPL3', meson_version : '>=0.50', version : '5.9.9')\n\n# Global Arguments First\n\n# system dependencies\ncc = meson.get_compiler('c')\n\nif get_option('wasan')\n  add_global_arguments('/DEBUG', language: 'c')\n  add_global_arguments('/MD', language: 'c')\n  add_global_arguments('/fsanitize=address', language: 'c')\n  # add_global_arguments('/Zi', language: 'c') # generate .pdb iirc\n  # add_global_arguments('/Z7', language: 'c') # generate .symbols instead of .pdb\n  # add_global_arguments('/guard:cf', language: 'c')\nendif\n\nif cc.get_id() == 'msvc'\n  # add_project_arguments('/Zc:preprocessor', language: 'c')\n  if get_option('static_runtime')\n    add_global_arguments('/MT', language: 'c')\n  endif\nendif\n\nif cc.get_id() == 'clang-cl'\n  add_global_arguments('-D__STDC__=1', language: 'c')\n  add_global_arguments('-D_CRT_DECLARE_NONSTDC_NAMES ', language: 'c')\n  add_global_arguments('-D_CRT_SECURE_NO_WARNINGS', language: 'c')\n  add_global_arguments('-D_CRT_NONSTDC_NO_DEPRECATE', language: 'c')\nendif\n\nif get_option('default_library') == 'shared'\n  if host_machine.system() != 'windows' or cc.get_id() != 'msvc' and cc.get_id() != 'clang-cl'\n    add_global_arguments('-fvisibility=hidden', language: 'c')\n  endif\nendif\n\n\npy3_exe = import('python').find_installation('python3')\ngen_py = '@0@/libr/syscall/d/gen.py'.format(meson.current_source_dir())\ngit_exe = find_program('git', required: false)\npkgconfig_mod = import('pkgconfig')\n\n# Get r2 version\nr2_version = meson.project_version()\nvers = r2_version.split('.')\nr2_version_major = vers[0].to_int()\nr2_version_minor = vers[1].to_int()\nr2_version_patch = vers[2].split('-')[0].to_int()\nr2_version_number = (r2_version_major * 10000) + (r2_version_minor * 100) + (r2_version_patch)\n\nrepo = '.'\nif meson.is_subproject()\n  repo = meson.current_source_dir()\n  if host_machine.system() == 'windows'\n    py_cmd = 'print(__import__(\"os\").readlink(r\"@0@\"))'.format(repo)\n    py_cmd = run_command(py3_exe, '-c', py_cmd)\n    if py_cmd.returncode() == 0\n      repo = py_cmd.stdout().strip()\n      message('r2 real path: ' + repo)\n    endif\n  endif\nendif\n\n# by default, not version commit is used\nversion_commit = '0'\n\ngittap = ''\ngittip = 'unknown'\n\nif git_exe.found()\n  # Get version_commit\n  git_rev_list = run_command(git_exe, '-C', repo, 'rev-list', '--all', '--count')\n  if git_rev_list.returncode() == 0\n    version_commit = git_rev_list.stdout().strip()\n  endif\n  if version_commit == ''\n    version_commit = '0'\n  endif\n\n  # Get gittap\n  git_describe = run_command(git_exe, '-C', repo, 'describe', '--tags', '--match', '[0-9]*')\n  if git_describe.returncode() == 0\n    gittap = git_describe.stdout().strip()\n  endif\n\n  # Get gittip\n  git_rev_parse = run_command(git_exe, '-C', repo, 'rev-parse', 'HEAD')\n  if git_rev_parse.returncode() == 0\n    gittip = git_rev_parse.stdout().strip()\n  endif\nendif\n\nif get_option('r2_version_commit') != ''\n  version_commit = get_option('r2_version_commit')\nendif\n\nif get_option('r2_gittap') != ''\n  gittap = get_option('r2_gittap')\nendif\n# gittap is used for the version of each r_ library\n# in case it has not been set (e.g. a release tarball) set it\nif gittap == ''\n  gittap = r2_version\nendif\n\nif get_option('r2_gittip') != ''\n  gittip = get_option('r2_gittip')\nendif\n\nif gittip == ''\n  gittip = r2_version\nendif\n\n# Get current date\nif host_machine.system() == 'windows'\n  r2birth = run_command('cmd', '/c', 'echo %date%__%time%')\nelse\n  r2birth = run_command('sh', '-c', '''\n      SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-`date +%s`}\";\n      FORMAT=\"+%Y-%m-%d__%H:%M:%S\";\n      date -u -d @\"$SOURCE_DATE_EPOCH\" \"$FORMAT\" 2>/dev/null ||\n      date -u -r  \"$SOURCE_DATE_EPOCH\" \"$FORMAT\" 2>/dev/null ||\n      date -u \"$FORMAT\"''')\nendif\nif r2birth.returncode() != 0\n  r2birth = ''\nelse\n  r2birth = r2birth.stdout().strip()\nendif\n\nr2_libversion = host_machine.system() == 'windows' ? '' : r2_version\nmessage('r2 lib version: ' + r2_libversion)\n\n# required for linux\nldl = cc.find_library('dl', required: false)\npth = dependency('threads', required: false)\nutl = cc.find_library('util', required: false)\nif host_machine.system() == 'sunos'\n  # workaround for Solaris until https://github.com/mesonbuild/meson/issues/4328 is fixed\n  mth = declare_dependency(link_args: '-lm')\nelse\n  mth = cc.find_library('m', required: false)\nendif\n\nplatform_deps = []\nplatform_inc = ['.', 'libr/include']\nif host_machine.system() == 'windows'\n  platform_deps = [cc.find_library('ws2_32'), cc.find_library('wininet'), cc.find_library('psapi')]\nendif\nplatform_inc = include_directories(platform_inc)\n\n\nif get_option('threadsafety')\n  r2_critical_enabled = 1\nelse\n  r2_critical_enabled = 0\nendif\n\nlibrary_cflags = ['-DR2_PLUGIN_INCORE=1']\n\nif host_machine.system() == 'windows'\n  r2_prefix = '.'\n  r2_libdir = 'lib'\n  r2_incdir = 'include/libr'\n  r2_datdir = 'share'\n\n  opts1 = [\n    'r2_libdir',\n    'r2_incdir',\n    'r2_datdir'\n  ]\n  foreach opt : opts1\n    val = get_option(opt)\n    if val != ''\n      set_variable(opt, val)\n    endif\n  endforeach\n\n  r2_wwwroot = join_paths(r2_datdir, 'www')\n  r2_sdb = join_paths(r2_datdir)\n  r2_zigns = join_paths(r2_datdir, 'zigns')\n  r2_scripts = join_paths(r2_datdir, 'scripts')\n  r2_themes = join_paths(r2_datdir, 'cons')\n  r2_platform = join_paths(r2_datdir, 'platform')\n  r2_fortunes = join_paths(r2_datdir, 'doc')\n  r2_flags = join_paths(r2_datdir, 'flag')\n  r2_hud = join_paths(r2_datdir, 'hud')\n\n  opts2 = [\n    'r2_wwwroot',\n    'r2_sdb',\n    'r2_platform',\n    'r2_zigns',\n    'r2_themes',\n    'r2_fortunes',\n    'r2_flags',\n    'r2_hud'\n  ]\n  foreach opt : opts2\n    val = get_option(opt)\n    if val != ''\n      set_variable(opt, val)\n    endif\n  endforeach\n\n  opts3 = [\n    'r2_plugins',\n    'r2_extras',\n    'r2_bindings'\n  ]\n  r2_plugins = join_paths(r2_libdir, 'plugins')\n  r2_extras = join_paths(r2_libdir, 'extras')\n  r2_bindings = join_paths(r2_libdir, 'bindings')\n\n  foreach opt : opts1 + opts2 + opts3\n    val = get_variable(opt)\n    val = '\\\\\\\\'.join(val.split('/'))\n    set_variable(opt, val)\n  endforeach\nelse\n  r2_prefix = get_option('prefix')\n  r2_libdir = get_option('libdir')\n  r2_incdir = join_paths(get_option('includedir'), 'libr')\n  r2_datdir = get_option('datadir')\n  r2_datdir_r2 = join_paths(r2_datdir, 'radare2')\n  r2_wwwroot = join_paths(r2_datdir_r2, r2_version, 'www')\n  r2_sdb = join_paths(r2_datdir_r2, r2_version)\n  r2_scripts = join_paths(r2_datdir_r2, r2_version, 'scripts')\n  r2_zigns = join_paths(r2_datdir_r2, r2_version, 'zigns')\n  r2_platform = join_paths(r2_datdir_r2, r2_version, 'platform')\n  r2_themes = join_paths(r2_datdir_r2, r2_version, 'cons')\n  r2_fortunes = join_paths(r2_datdir, 'doc', 'radare2')\n  r2_flags = join_paths(r2_datdir_r2, r2_version, 'flag')\n  r2_hud = join_paths(r2_datdir_r2, r2_version, 'hud')\n  r2_plugins = join_paths(r2_libdir, 'radare2', r2_version)\n  r2_extras = join_paths(r2_libdir, 'radare2-extras', r2_version)\n  r2_bindings = join_paths(r2_libdir, 'radare2-bindings', r2_version)\nendif\n\nif host_machine.system() == 'aix'\n  library_cflags += ['-D_LINUX_SOURCE_COMPAT']\nendif\n\nr2_zsh_compdir = join_paths(r2_datdir, 'zsh', 'site-functions')\n\n# load plugin configuration\nsubdir('libr')\n\nconf_data = configuration_data()\nconf_data.set('plugins_core', '&r_core_plugin_' + ', &r_core_plugin_'.join(core_plugins) + ', 0')\nconf_data.set('plugins_esil', '&r_esil_plugin_' + ', &r_esil_plugin_'.join(esil_plugins) + ', 0')\nconf_data.set('plugins_anal', '&r_anal_plugin_' + ', &r_anal_plugin_'.join(anal_plugins) + ', 0')\nconf_data.set('plugins_arch', '&r_arch_plugin_' + ', &r_arch_plugin_'.join(arch_plugins) + ', 0')\nconf_data.set('plugins_asm', '&r_asm_plugin_' + ', &r_asm_plugin_'.join(asm_plugins) + ', 0')\nconf_data.set('plugins_bp', '&r_bp_plugin_' + ', &r_bp_plugin_'.join(bp_plugins) + ', 0')\nconf_data.set('plugins_bin', '&r_bin_plugin_' + ', &r_bin_plugin_'.join(bin_plugins) + ', 0')\nconf_data.set('plugins_bin_ldr', '&r_bin_ldr_plugin_' + ', &r_bin_ldr_plugin_'.join(bin_ldr_plugins) + ', 0')\nconf_data.set('plugins_bin_xtr', '&r_bin_xtr_plugin_' + ', &r_bin_xtr_plugin_'.join(bin_xtr_plugins) + ', 0')\nconf_data.set('plugins_crypto', '&r_crypto_plugin_' + ', &r_crypto_plugin_'.join(crypto_plugins) + ', 0')\nconf_data.set('plugins_io', '&r_io_plugin_' + ', &r_io_plugin_'.join(io_plugins) + ', 0')\nconf_data.set('plugins_fs', '&r_fs_plugin_' + ', &r_fs_plugin_'.join(fs_plugins) + ', 0')\nconf_data.set('plugins_debug', '&r_debug_plugin_' + ', &r_debug_plugin_'.join(debug_plugins) + ', 0')\nconf_data.set('plugins_egg', '&r_egg_plugin_' + ', &r_egg_plugin_'.join(egg_plugins) + ', 0')\nconf_data.set('plugins_lang', '&r_lang_plugin_' + ', &r_lang_plugin_'.join(lang_plugins) + ', 0')\nconf_data.set('WANT_THREADS', get_option('want_threads')? '1': '0')\n\nconfig_h = configure_file(\n  input: 'libr/config.h.in',\n  output: 'config.h',\n  configuration: conf_data\n)\n\n# handle magic library\nsys_magic = cc.find_library('magic', required: false)\nuse_syslib_magic = false\n\nif sys_magic.found() and get_option('use_sys_magic')\n  use_syslib_magic = true\nendif\n\n# handle xxhash library\nsys_xxhash = dependency('libxxhash', required: false)\nuse_sys_xxhash = false\nif not sys_xxhash.found()\n  sys_xxhash = dependency('xxhash', required: false)\nendif\nif not sys_xxhash.found()\n  sys_xxhash = cc.find_library('xxhash', required: false)\nendif\n\nif sys_xxhash.found() and get_option('use_sys_xxhash')\n  message('Using system xxhash library')\n  use_sys_xxhash = true\nelse\n  message('Using bundled xxhash library')\nendif\n\n# handle openssl library\nuse_ssl_crypto = get_option('use_ssl_crypto')\nif get_option('use_ssl')\n  static_sys_openssl = get_option('static_sys_openssl')\n  sys_openssl = dependency('openssl', required: false, static: static_sys_openssl)\n  use_sys_openssl = false\n  if sys_openssl.found() and get_option('use_sys_openssl')\n    message('Using system openssl library')\n    use_sys_openssl = true\n  else\n    message('Using bundled openssl code')\n    use_ssl_crypto = false\n  endif\nelse\n  sys_openssl = false\n  use_sys_openssl = false\n  use_ssl_crypto = false\nendif\n\nuse_fork = get_option('use_fork')\nuse_dylink = get_option('use_dylink')\n\n# handle libuv library\nif get_option('use_libuv')\n  libuv_dep = dependency('libuv', version: '>=1.0.0', required: false)\n  use_libuv = libuv_dep.found()\n  if not libuv_dep.found()\n    warning('use_libuv option was set to true, but libuv was not found.')\n  endif\nelse\n  use_libuv = false\nendif\n\nif use_libuv\n  message('Using libuv')\nelse\n  message('Not using libuv, thus using fallback server implementations')\nendif\n\nuse_libsqsh = false\nif get_option('use_libsqsh')\n  libsqsh_dep = dependency('libsqsh', version: '>=1.4.0', required: false)\n  use_libsqsh = libsqsh_dep.found()\n  if not libsqsh_dep.found()\n    use_libsqsh = false\n    warning('use_libsqsh option was set to true, but libsqsh was not found.')\n  endif\nelse\n  use_libsqsh = false\nendif\n\nhas_debugger = get_option('debugger')\nhave_ptrace = not ['haiku', 'windows', 'cygwin', 'sunos', 'aix'].contains(host_machine.system())\ncan_ptrace_wrap = ['linux'].contains(host_machine.system())\n\nhave_ptrace = have_ptrace and has_debugger\nuse_ptrace_wrap = can_ptrace_wrap and has_debugger\n\nmessage('HAVE_PTRACE: @0@'.format(have_ptrace))\nmessage('USE_PTRACE_WRAP: @0@'.format(use_ptrace_wrap))\n\nchecks_level = get_option('checks_level')\nif checks_level == 9999\n  if get_option('buildtype') == 'release'\n    checks_level = 1\n  else\n    checks_level = 2\n  endif\nendif\n\nmessage('R2_CHECKS_LEVEL: @0@'.format(checks_level))\n\nuserconf = configuration_data()\nuserconf.set('R_CHECKS_LEVEL', checks_level)\nuserconf.set10('HAVE_LIB_MAGIC', sys_magic.found())\nuserconf.set10('USE_LIB_MAGIC', use_syslib_magic)\nuserconf.set10('HAVE_LIB_XXHASH', sys_xxhash.found())\nuserconf.set10('USE_LIB_XXHASH', use_sys_xxhash)\nuserconf.set10('HAVE_LINUX_CAN_H', false)\nuserconf.set10('DEBUGGER', has_debugger)\nuserconf.set('ETCDIR', join_paths(r2_prefix, 'etc'))\nuserconf.set('PREFIX', r2_prefix)\nuserconf.set('BINDIR', join_paths(r2_prefix, 'bin'))\nif host_machine.system() == 'windows'\n  userconf.set('LIBDIR', r2_libdir)\n  userconf.set('INCLUDEDIR', r2_incdir)\n  userconf.set('DATADIR_R2', r2_datdir)\n  userconf.set10('HAVE_JEMALLOC', false)\nelse\n  userconf.set('LIBDIR', join_paths(r2_prefix, r2_libdir))\n  userconf.set('INCLUDEDIR', join_paths(r2_prefix, r2_incdir))\n  userconf.set('DATADIR_R2', r2_datdir_r2)\n  userconf.set10('HAVE_JEMALLOC', true)\nendif\nuserconf.set('WITH_STATIC_THEMES', get_option('static_themes'))\n\nuserconf.set('DATADIR', join_paths(r2_prefix, r2_datdir))\nuserconf.set('WWWROOT', join_paths(r2_prefix, r2_wwwroot))\nuserconf.set('SDB', r2_sdb)\nuserconf.set('PLATFORM', r2_platform)\nuserconf.set('ZIGNS', r2_zigns)\nuserconf.set('THEMES', r2_themes)\nuserconf.set('FORTUNES', r2_fortunes)\nuserconf.set('FLAGS', r2_flags)\nuserconf.set('HUD', r2_hud)\nuserconf.set('PLUGINS', r2_plugins)\nuserconf.set('EXTRAS', r2_extras)\nuserconf.set('BINDINGS', r2_bindings)\nuserconf.set('R2_BUILDSYSTEM', 'meson')\nuserconf.set10('USE_SQSH', use_libsqsh)\ncapstone_version = get_option('use_capstone_version')\nuserconf.set10('USE_CS4', capstone_version == 'v4')\nuserconf.set10('USE_CSNEXT', capstone_version == 'v6')\nuserconf.set10('HAVE_OPENSSL', use_sys_openssl)\nuserconf.set10('WANT_SSL_CRYPTO', use_ssl_crypto)\nuserconf.set10('HAVE_LIBUV', use_libuv)\nuserconf.set10('HAVE_FORK', use_fork)\nuserconf.set10('HAVE_GPERF', get_option('sdb_cgen'))\nuserconf.set10('WANT_DYLINK', use_dylink)\nuserconf.set10('WANT_THREADS', get_option('want_threads'))\nuserconf.set10('WANT_CAPSTONE', get_option('want_capstone'))\nuserconf.set10('USE_NEW_ABI', get_option('use_new_abi'))\nuserconf.set10('HAVE_PTRACE', have_ptrace)\nuserconf.set10('WANT_DEBUGSTUFF', get_option('debugstuff'))\nuserconf.set('R_CRITICAL_ENABLED', r2_critical_enabled)\nuserconf.set10('USE_PTRACE_WRAP', use_ptrace_wrap)\nuserconf.set10('WITH_GPL', not get_option('nogpl'))\nok = cc.has_header_symbol('sys/personality.h', 'ADDR_NO_RANDOMIZE')\nuserconf.set10('HAVE_DECL_ADDR_NO_RANDOMIZE', ok)\n\nlrt = []\nif not cc.has_function('clock_gettime', prefix: '#include <time.h>') and cc.has_header_symbol('features.h', '__GLIBC__')\n  lrt = cc.find_library('rt', required: true)\nendif\n\nforeach item : [\n    ['arc4random_uniform', '#include <stdlib.h>', []],\n    ['explicit_bzero', '#include <string.h>', []],\n    ['explicit_memset', '#include <string.h>', []],\n    ['clock_nanosleep', '#include <time.h>', []],\n    ['clock_gettime', '#include <time.h>', [lrt]],\n    ['sigaction', '#include <signal.h>', []]\n  ]\n  func = item[0]\n  ok = cc.has_function(func, prefix: item[1], dependencies: item[2])\n  userconf.set10('HAVE_@0@'.format(func.to_upper()), ok)\nendforeach\n\nr_userconf_h = configure_file(\n  input: 'libr/include/r_userconf.h.acr',\n  output: 'r_userconf.h',\n  configuration: userconf,\n  install_dir: r2_incdir\n)\n\nversionconf = configuration_data()\nversionconf.set('MESON_VERSION', meson.version())\nversionconf.set('VERSIONCOMMIT', version_commit)\nversionconf.set('R2_VERSION_MAJOR', r2_version_major)\nversionconf.set('R2_VERSION_MINOR', r2_version_minor)\nversionconf.set('R2_VERSION_PATCH', r2_version_patch)\nversionconf.set('R2_VERSION_NUMBER', r2_version_number)\nversionconf.set('R2_VERSION', r2_version)\nversionconf.set('R2_GITTAP', gittap)\nversionconf.set('R2_GITTIP', gittip)\nversionconf.set('R2_BIRTH', r2birth)\nr_version_h = configure_file(\n  input: 'libr/include/r_version.h.in',\n  output: 'r_version.h',\n  configuration: versionconf,\n  install_dir: r2_incdir\n)\n\n# Copy missing header\nrun_command(py3_exe, '-c', '__import__(\"shutil\").copyfile(\"shlr/spp/config.def.h\", \"shlr/spp/config.h\")')\n\npcconf = configuration_data()\npcconf.set('PREFIX', get_option('prefix'))\npcconf.set('LIBDIR', join_paths(get_option('prefix'), get_option('libdir')))\npcconf.set('VERSION', r2_version)\nlibr_pc = configure_file(\n  input: 'libr/libr.pc.acr',\n  output: 'libr.pc',\n  configuration: pcconf,\n  install_dir: join_paths(get_option('libdir'), 'pkgconfig')\n)\n\nsubdir('shlr/zip')\n\nscript_files = [\n  'scripts/il2cpp.r2.js',\n  'scripts/ipsw-kernel-symbolicate.r2.js',\n  'scripts/licenses.r2.js',\n  'scripts/parseplug.r2.js',\n  'scripts/r2sptrace.py',\n  'scripts/tags.r2.js',\n  'scripts/unzip.r2.js',\n  'scripts/vsmap.r2.js',\n]\ninstall_data(script_files, install_dir: r2_scripts)\n\nlibsdb_sp = subproject('sdb')\nlibsdb_static = libsdb_sp.get_variable('libsdb_static')\nlibsdb_includes = libsdb_sp.get_variable('sdb_inc')\n\nsdb_dep = declare_dependency(\n  link_whole: libsdb_static,\n  include_directories: libsdb_includes\n)\n\nsdb_exe = libsdb_sp.get_variable('sdb_exe')\n\nsdb_install = custom_target('r2sdb',\n  input : sdb_exe,\n  output : 'r2sdb',\n  command : ['cp', '-f', '@INPUT@', '@OUTPUT@'],\n  install : true,\n  install_dir : get_option('bindir'))\n\nsdb_gen_cmd_cgen = [\n  sdb_exe,\n  '-t',\n  '-C',\n  '-o',\n  '@OUTPUT@',\n  '@INPUT@'\n]\n\nsdb_gen_cmd = [\n  sdb_exe,\n  '@OUTPUT@',\n  '==',\n  '@INPUT@'\n]\n\npy_cmd = '__import__(\"os\").readlink(r\"@0@\"))'.format(repo)\nsyscall_sdb_gen_cmd = [\n  py3_exe,\n  gen_py,\n  sdb_exe,\n  '@INPUT@',\n  '@OUTPUT@',\n]\n\n# handle spp dependency\nspp_files = [\n  'shlr/spp/spp.c'\n]\n\nspp_inc = [platform_inc, include_directories(join_paths('shlr','spp'))]\n\nlibr2spp = static_library('r2spp', spp_files,\n  link_with: [ libsdb_static ], # libsdb_static,\n  include_directories: [ libsdb_includes, spp_inc ],\n  c_args: ['-DHAVE_R_UTIL', '-DUSE_R2=1'],\n  implicit_include_directories: false\n)\n\nspp_dep = declare_dependency(\n  link_with: libr2spp,\n  include_directories: spp_inc\n)\n\npkgcfg_sanitize_libs = ''\nif get_option('b_sanitize').contains('address')\n  pkgcfg_sanitize_libs += ' -lasan'\nendif\nif get_option('b_sanitize').contains('undefined')\n  pkgcfg_sanitize_libs += ' -lubsan'\nendif\nif get_option('b_sanitize').contains('thread')\n  pkgcfg_sanitize_libs += ' -fsanitize=thread'\nendif\n\nrpath_exe = ''\nrpath_lib = ''\nif get_option('local') and get_option('default_library') == 'shared'\n  rpath_exe = '$ORIGIN/../' + get_option('libdir')\n  rpath_lib = '$ORIGIN'\nendif\n\nsubdir('shlr/smallz4')\nsubdir('libr/util')\nsubdir('libr/socket')\nsubdir('libr/crypto')\nsubdir('shlr')\nsubdir('libr/cons')\nsubdir('shlr/gdb')\nsubdir('libr/io')\nsubdir('libr/bp')\nsubdir('libr/syscall')\nsubdir('libr/search')\nsubdir('libr/magic')\nsubdir('libr/flag')\nsubdir('libr/reg')\nsubdir('libr/esil')\nsubdir('libr/arch')\nsubdir('libr/fs')\nsubdir('libr/bin')\nsubdir('libr/config')\nsubdir('libr/asm')\nsubdir('libr/lang')\nsubdir('libr/anal')\nsubdir('libr/egg')\nsubdir('libr/debug')\nsubdir('libr/core')\nsubdir('libr/cons/d')\nsubdir('libr/magic/d')\nsubdir('libr/flag/d')\nsubdir('libr/main')\n\nsubdir('binr')\nif meson.is_subproject()\n  libr2_dep = declare_dependency(\n    dependencies: [\n      r_anal_dep,\n      r_asm_dep,\n      r_bp_dep,\n      r_config_dep,\n      r_cons_dep,\n      r_core_dep,\n      r_main_dep,\n      r_crypto_dep,\n      r_debug_dep,\n      r_egg_dep,\n      r_flag_dep,\n      r_fs_dep,\n      r_bin_dep,\n      r_io_dep,\n      r_lang_dep,\n      r_magic_dep,\n      r_reg_dep,\n      r_search_dep,\n      r_socket_dep,\n      r_syscall_dep,\n      r_util_dep\n    ],\n    include_directories: include_directories('.', 'libr/include'),\n    version: r2_version\n  )\nendif\n\nif get_option('use_webui')\n  install_subdir('shlr/www',\n    install_dir: r2_wwwroot,\n    strip_directory: true\n  )\nendif\n\nsubdir('test/unit')\nsubdir('test/fuzz')\n\ninstall_data(\n  'doc/fortunes.fun',\n  'doc/fortunes.tips',\n  install_dir: r2_fortunes\n)\n\ninstall_data(\n  'libr/arch/d/nes-init.r2',\n  'libr/arch/d/nes-fini.r2',\n  install_dir: r2_platform\n)\n\nif cli_enabled\n  install_man(\n    'man/r2agent.1',\n    'man/r2pm.1',\n    'man/rabin2.1',\n    'man/radare2.1',\n    'man/radiff2.1',\n    'man/rafind2.1',\n    'man/ragg2.1',\n    'man/rahash2.1',\n    'man/rarun2.1',\n    'man/rasign2.1',\n    'man/rasm2.1',\n    'man/rax2.1',\n    'man/ravc2.1',\n    'man/esil.7'\n  )\n\n  install_data('doc/hud',\n    install_dir: r2_hud,\n    rename: 'main'\n  )\n\n  install_data(\n    'doc/zsh/_r2',\n    'doc/zsh/_rabin2',\n    'doc/zsh/_radiff2',\n    'doc/zsh/_rafind2',\n    'doc/zsh/_ragg2',\n    'doc/zsh/_rahash2',\n    'doc/zsh/_rasm2',\n    'doc/zsh/_rax2',\n    install_dir: r2_zsh_compdir\n  )\n\n  if host_machine.system() == 'windows'\n    meson.add_install_script('sys/create_r2.bat')\n  else\n    meson.add_install_script('sys/create_r2.sh')\n  endif\nendif\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 3.7412109375,
          "content": "option('cli', type: 'feature', value: 'auto', description: 'Build CLI programs (\"auto\" means they will be built when not a subproject)')\noption('static_runtime', type: 'boolean', value: false, description: 'Link all libraries statically')\noption('local', type: 'boolean', value: false, description: 'Adds support for local/side-by-side installation (sets rpath if needed)')\noption('blob', type: 'boolean', value: false, description: 'Compile just one binary which dispatch to the right handlers based on the name used to call it')\noption('wasan', type: 'boolean', value: false, description: 'Windows-specific hack to build with asan using msvc')\noption('threadsafety', type: 'boolean', value: false, description: 'Enable thread-safe checks on critical paths')\noption('debugstuff', type: 'boolean', value: true, description: 'Permit and handle ^C hook signals and kept todo and debug logs')\n\n# Plugins\noption('plugins', type: 'string', value: '', description: 'Comma separated list of plugin names')\n\n# For Windows\noption('r2_libdir', type: 'string', value: '')\noption('r2_incdir', type: 'string', value: '')\noption('r2_datdir', type: 'string', value: '')\noption('r2_wwwroot', type: 'string', value: '')\noption('r2_sdb', type: 'string', value: '')\noption('r2_zigns', type: 'string', value: '')\noption('r2_themes', type: 'string', value: '')\noption('r2_fortunes', type: 'string', value: '')\noption('r2_platform', type: 'string', value: '')\noption('r2_flags', type: 'string', value: '')\noption('r2_hud', type: 'string', value: '')\n\noption('r2_version_commit', type: 'string', value: '')\noption('r2_gittap', type: 'string', value: '')\noption('r2_gittip', type: 'string', value: '')\noption('checks_level', type: 'integer', value: 9999, description: 'Value between 0 and 3 to enable different level of assert (see R_CHECKS_LEVEL). By default its value depends on buildtype (2 on debug, 1 on release).')\noption('capstone_in_builddir', type: 'boolean', value: false, description: 'When true, capstone is downloaded in the build directory and not in the source one')\noption('want_threads', type: 'boolean', value: true)\noption('use_new_abi', type: 'boolean', value: false)\noption('want_capstone', type: 'boolean', value: true)\noption('use_sys_capstone', type: 'boolean', value: false)\noption('use_capstone_version', type: 'combo', choices: ['v3', 'v4', 'v5', 'next'], value: 'v5')\noption('use_sys_magic', type: 'boolean', value: false)\noption('use_sys_zip', type: 'boolean', value: false)\noption('use_sys_zlib', type: 'boolean', value: false)\noption('use_sys_lz4', type: 'boolean', value: false)\noption('use_sys_xxhash', type: 'boolean', value: false)\noption('use_ssl', type: 'boolean', value: false)\noption('use_ssl_crypto', type: 'boolean', value: false)\noption('use_v35', type: 'boolean', value: false)\noption('use_sys_openssl', type: 'boolean', value: false)\noption('static_sys_openssl', type: 'boolean', value: false)\noption('use_libuv', type: 'boolean', value: false)\noption('use_libsqsh', type: 'boolean', value: false)\noption('use_fork', type: 'boolean', value: true)\n# host_machine.system() != 'windows')\noption('sdb_cgen', type: 'boolean', value: false)\noption('use_dylink', type: 'boolean', value: true)\noption('debugger', type: 'boolean', value: true)\noption('static_themes', type: 'boolean', value: false)\noption('want_ptrace_wrap', type: 'boolean', value: true)\noption('nogpl', type: 'boolean', value: false)\noption('use_webui', type: 'boolean', value: true, description: 'install different WebUIs for radare2')\noption('enable_tests', type: 'boolean', value: true, description: 'Build unit tests in test/unit')\noption('enable_libfuzzer', type: 'boolean', value: false, description: 'Build libFuzzer targets in test/fuzz')\noption('enable_r2r', type: 'boolean', value: true, description: 'Build r2r executable for regression ')\n"
        },
        {
          "name": "mk",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgcfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "preconfigure",
          "type": "blob",
          "size": 0.7802734375,
          "content": "#!/bin/sh\n\nMAKE=make\ngmake --version > /dev/null 2>&1\n[ $? = 0 ] && MAKE=gmake\n\necho \"[*] Finding `type ${MAKE}` OK\"\n\nif [ ! -f config-user.mk ]; then\n\tprintf \"[*] Configuring the build system ... \"\n\t./configure > /dev/null 2>&1 || exit 1\n\techo OK\nfi\n\n# checks\nif [ -d \"$HOME/.local/share/radare2/prefix/include/capstone\" ]; then\n\techo \"[*] Using capstone from r2pm\"\n\texport PKG_CONFIG_PATH\nelse\n\tprintf \"[*] Checking out capstone... \"\n\trm -rf shlr/capstone\n\t${MAKE} -C shlr capstone > /dev/null 2>&1 || exit 1\n\techo OK\nfi\n\necho \"[*] Checking subprojects... \"\n${MAKE} -C subprojects > /dev/null\n\nprintf \"[*] Running configure... \"\nCFGARGS=\"\"\nif [ `uname` = Linux ]; then\n\tCFGARGS=\"${CFGARGS} --with-rpath\"\nfi\n./configure ${CFGARGS} > /dev/null 2>&1\necho OK\necho \"[*] Ready. You can now run 'make'.\"\n"
        },
        {
          "name": "preconfigure.bat",
          "type": "blob",
          "size": 4.302734375,
          "content": ":: This is a comment\n@echo off\nSETLOCAL EnableDelayedExpansion\n\n:: Preconfigure script for Windows\n\necho === Finding Python...\npython --version > NUL 2> NUL\nif %ERRORLEVEL% == 0 (\n  echo OK\n  pip show setuptools > NUL 1> NUL\n  if errorlevel 1 (\n    echo === Installing setuptools\n    python -m pip install -UI pip setuptools\n  )\n) else (\n  echo ERROR\n  echo You need to install Python from the windows store or something\n  exit /b 1\n)\n\necho === Finding Git...\ngit --version > NUL 2> NUL\nif %ERRORLEVEL% == 0 (\n  echo OK\n) else (\n  echo You need to install GIT\n  exit /b 1\n)\ngit pull\n\necho === Testing for meson and ninja...\nmeson --help > NUL 2> NUL\nif %ERRORLEVEL% == 0 (\n  echo FOUND\n) else (\n  echo === Installing pyenv + meson + ninja\n  python -m venv venv\n  call venv\\Scripts\\activate.bat\n  echo === Testing for meson and ninja...\n  meson --help > NUL 2> NUL\n  if %ERRORLEVEL% == 0 (\n    echo FOUND\n  ) else (\n    pip install -UI pip ninja\n    REM meson==0.59.1 \n    pip install git+https://github.com/frida/meson.git@f7f25b19a8d71cebf8e2934733eb041eb6862eee\n    preconfigure.bat\n    exit /b 0\n  )\n)\n\nREM vs uses HOST_TARGET syntax, so: x86_amd64 means 32bit compiler for 64bit target\nREM: Hosts: x86 amd64 x64\nREM: Targets: x86 amd64 x64 arm arm64\nREM Detect the host architecture intuitively and easily\n\nIF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (\n    SET \"HOST_ARCH=amd64\"\n) ELSE IF \"%PROCESSOR_ARCHITECTURE%\"==\"x86\" (\n    SET \"HOST_ARCH=x86\"\n) ELSE (\n    SET \"HOST_ARCH=unknown\"\n)\n\nREM Check if arguments are passed\nIF \"%~1\"==\"\" (\n    echo Your current Host Architecture is !HOST_ARCH!\n    ECHO Please select the Target Architecture:\n    ECHO 1. x86\n    ECHO 2. amd64 [x64]\n    ECHO 3. arm\n    ECHO 4. arm64\n    SET /P \"CHOICE=Enter your choice (1-4): \"\n\n    REM Set target architecture based on user input\n    IF \"!CHOICE!\"==\"1\" (\n        SET \"TARGET_ARCH=x86\"\n    ) ELSE IF \"!CHOICE!\"==\"2\" (\n        SET \"TARGET_ARCH=amd64\"\n    ) ELSE IF \"!CHOICE!\"==\"3\" (\n        SET \"TARGET_ARCH=arm\"\n    ) ELSE IF \"!CHOICE!\"==\"4\" (\n        SET \"TARGET_ARCH=arm64\"\n    ) ELSE (\n        ECHO Invalid choice. Defaulting to arm64.\n        SET \"TARGET_ARCH=arm64\"\n    )\n\n    REM Check if target and host are the same and set VSARCH accordingly\n    IF \"!TARGET_ARCH!\"==\"!HOST_ARCH!\" (\n        SET \"VSARCH=!HOST_ARCH!\"\n    ) ELSE (\n        SET \"VSARCH=!HOST_ARCH!_!TARGET_ARCH!\"\n    )\n\n) ELSE (\n    REM Use provided host_target argument\n    SET \"VSARCH=%1\"\n)\n\nECHO VSARCH is set to: !VSARCH!\n\necho === Finding Visual Studio...\ncl --help > NUL 2> NUL\nif %ERRORLEVEL% == 0 (\n  echo FOUND\n) else if EXIST \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\" (\n  echo \"Found 2022 Enterprise edition\"\n  call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %VSARCH%\n) else if EXIST \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\" (\n  echo \"Found 2022 Community edition\"\n  call \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %VSARCH%\n) else if EXIST \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsall.bat\" (\n  echo \"Found 2022 BuildTools\"\n  call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %VSARCH%\n) else if EXIST \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\" (\n  echo \"Found 2019 community edition\"\n  call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %VSARCH%\n) else if EXIST \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" (\n  echo \"Found 2019 Enterprise edition\"\n  call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %VSARCH%\n) else if EXIST \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build\\vcvarsall.bat\" (\n  echo \"Found 2019 Professional edition\"\n  call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %VSARCH%\n) else if EXIST \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsall.bat\" (\n  echo \"Found 2019 BuildTools\"\n  call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %VSARCH%\n) else (\n  echo \"Not Found\"\n  exit /b 1\n)\n\necho Now you can run 'configure'\nENDLOCAL\ncmd\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "shlr",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vsfix.bat",
          "type": "blob",
          "size": 0.15625,
          "content": "@cd vs\\libr\n@for /r %%d in (*.dll) do @copy /Y \"%%d\" ..\\binr\\radare2 > NUL\n@cd ..\\binr\n@for /r %%d in (*.exe) do @copy /Y \"%%d\" ..\\binr\\radare2 > NUL\n@cd ..\\..\n"
        }
      ]
    }
  ]
}