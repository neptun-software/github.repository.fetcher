{
  "metadata": {
    "timestamp": 1736710406077,
    "page": 31,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "woltapp/blurhash",
      "stars": 15994,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3173828125,
          "content": "## OS X specific\n.DS_Store\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata/\nC/blurhash_encoder\nC/blurhash_decoder\nRuby/.*\nRuby/Makefile\nPython/build/\n*.bundle\n*.so\n*.o\n*.pyc\n\n# Website\nWebsite/node_modules/\nWebsite/dist/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.091796875,
          "content": "[submodule \"Python\"]\n\tpath = Python\n\turl = https://github.com/creditornot/blurhash-python.git\n"
        },
        {
          "name": "Algorithm.md",
          "type": "blob",
          "size": 3.2060546875,
          "content": "# BlurHash Algorithm\n\n## Summary\n\nBlurHash applies a simple [DCT transform](https://en.wikipedia.org/wiki/Discrete_cosine_transform) to the image data,\nkeeping only the first few components, and then encodes these components using a base 83 encoding, with a JSON,\nHTML and shell-safe character set. The DC component, which represents the average colour of the image, is stored exactly\nas an sRGB value, for easy use without implementing the full algorithm. The AC components are encoded lossily.\n\n## Reference implementation\n\n[Simplified Swift decoder implementation.](Swift/BlurHashDecode.swift)\n\n[Simplified Swift encoder implementation.](Swift/BlurHashEncode.swift)\n\n## Structure\n\nHere follows an example of a BlurHash string, with the different parts labelled:\n\n    Example: LlMF%n00%#MwS|WCWEM{R*bbWBbH\n    Legend:  12333344....................\n\n1. **Number of components, 1 digit.**\n   \n   For a BlurHash with `nx` components along the X axis and `ny` components along the Y axis, this is equal to `(nx - 1) + (ny - 1) * 9`.\n\n2. **Maximum AC component value, 1 digit.**\n   \n   All AC components are scaled by this value. It represents a floating-point value of `(max + 1) / 166`.\n\n3. **Average colour. 4 digits.**\n   \n   The average colour of the image in sRGB space, encoded as a 24-bit RGB value, with R in the most significant position. This value can\n   be used directly if you only want the average colour rather than the full DCT-encoded image.\n\n4. **AC components, 2 digits each, `nx * ny - 1` components in total.**\n   \n   The AC components of the DCT transform, ordered by increasing X first, then Y. They  are encoded as three values for `R`, `G` and `B`,\n   each between 0 and 18. They are combined together as `R * 19^2 + G * 19 + B`, for a total range of 0 to 6859.\n   \n   Each value represents a floating-point value between -1 and 1. 0-8 represent negative values, 9 represents zero, and 10-18\n   represent positive values. Positive values are encoded as `((X - 9) / 9) ^ 2`, while negative\n   values are encoded as `-((9 - X) / 9 ) ^ 2`. `^` represents exponentiation. This value is then multiplied by the maximum AC\n   component value, field 2 above.\n\n## Base 83\n\nA custom base 83 encoding is used. Values are encoded individually, using 1 to 4 digits, and concatenated together. Multiple-digit\nvalues are encoded in big-endian order, with the most significant digit first.\n\nThe character used set is `0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#$%*+,-.:;=?@[]^_{|}~`.\n\n## Discrete Cosine Transform\n\nTo decode a single pixel of output, you loop over the DCT components and calculate a weighted sum of cosine functions. In\npseudocode, for a normalised pixel position `x`, `y`, with each coordinate ranging from 0 to 1, and components `Cij` ,\nyou calculate the following for each of R, G and B:\n\n    foreach j in 0 ... ny - 1\n        foreach i in 0 ... nx - 1\n            value = value + Cij * cos(x * i * pi) * cos(y * j * pi)\n\nThe `C00` component is the DC component, while the others are the AC components. The DC component must first be converted\nfrom sRGB to linear RGB space. AC components are already linear.\n\nOnce the R, G and B values have been calculated, they must be converted from linear to your output colourspace, usually sRGB.\n"
        },
        {
          "name": "C",
          "type": "tree",
          "content": null
        },
        {
          "name": "CodeOfConduct.md",
          "type": "blob",
          "size": 3.1513671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\neducation, socio-economic status, nationality, personal appearance, race,\nreligion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at dag.agren@wolt.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\n"
        },
        {
          "name": "Kotlin",
          "type": "tree",
          "content": null
        },
        {
          "name": "License.md",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2018 Wolt Enterprises\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Media",
          "type": "tree",
          "content": null
        },
        {
          "name": "Python",
          "type": "commit",
          "content": null
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 12.83984375,
          "content": "# [BlurHash](http://blurha.sh)\n\nBlurHash is a compact representation of a placeholder for an image.\n\n## Why would you want this?\n\nDoes your designer cry every time you load their beautifully designed screen, and it is full of empty boxes because all the\nimages have not loaded yet? Does your database engineer cry when you want to solve this by trying to cram little thumbnail\nimages into your data to show as placeholders?\n\nBlurHash will solve your problems! How? Like this:\n\n<img src=\"Media/WhyBlurHash.png\" width=\"600\">\n\nYou can also see nice examples and try it out yourself at [blurha.sh](http://blurha.sh/)!\n\n## How does it work?\n\nIn short, BlurHash takes an image, and gives you a short string (only 20-30 characters!) that represents the placeholder for this\nimage. You do this on the backend of your service, and store the string along with the image. When you send data to your\nclient, you send both the URL to the image, and the BlurHash string. Your client then takes the string, and decodes it into an\nimage that it shows while the real image is loading over the network. The string is short enough that it comfortably fits into\nwhatever data format you use. For instance, it can easily be added as a field in a JSON object.\n\nIn summary:\n\n<img src=\"Media/HowItWorks1.jpg\" width=\"250\">&nbsp;&nbsp;&nbsp;<img src=\"Media/HowItWorks2.jpg\" width=\"250\">\n\nWant to know all the gory technical details? Read the [algorithm description](Algorithm.md).\n\nImplementing the algorithm is actually quite easy! Implementations are short and easily ported to your favourite language or\nplatform.\n\n## Implementations\n\nSo far, we have created these implementations:\n\n* [C](C) - An encoder implementation in portable C code.\n* [Swift](Swift) - Encoder and decoder implementations, and a larger library offering advanced features.\n  There is also an example app to play around with the algorithm.\n* [Kotlin](Kotlin) - A decoder implementation for Android.\n* [TypeScript](TypeScript) - Encoder and decoder implementations, and an example page to test.\n* [Python](https://github.com/woltapp/blurhash-python) - Integration of the C encoder code into Python.\n\nThese cover our use cases, but could probably use polishing, extending and improving. There are also these third party implementations that we know of:\n\n* [Pure Python](https://github.com/halcy/blurhash-python) - Implementation of both the encoder and decoder in pure Python.\n* [One version in Go](https://github.com/bbrks/go-blurhash), and [another version in Go](https://github.com/buckket/go-blurhash).\n* [PHP](https://github.com/kornrunner/php-blurhash) - Encoder and decoder implementations in pure PHP.\n* [Java](https://github.com/hsch/blurhash-java) - Encoder implementation in Java.\n* [Clojure](https://github.com/siili-core/blurhash) - Encoder and decoder implementations in Clojure.\n* [Nim](https://github.com/SolitudeSF/blurhash) - Encoder and decoder implementation in pure Nim.\n* [Rust and WebAssembly](https://github.com/fpapado/blurhash-rust-wasm) - Encoder and decoder implementations in Rust. Distributed as both native Rust and WebAssembly packages.\n* [Ruby](https://github.com/Gargron/blurhash) - Encoder implementation in Ruby.\n* [Crystal](https://github.com/Sija/blurhash.cr) - Encoder implementation in pure Crystal.\n* [Elm](https://github.com/WhileTruu/elm-blurhash) - Encoder and decoder in Elm.\n* [Dart](https://github.com/folksable/blurhash_ffi) - Encoder and decoder implementation in C into Dart using dart-ffi.\n* [Pure Dart](https://github.com/justacid/blurhash-dart) - Encoder and decoder implementation in pure Dart.\n* [.NET](https://github.com/MarkusPalcer/blurhash.net) - Encoder and decoder in C#.\n* [JavaScript](https://github.com/Dens49/blurhash-js) - Encoder and decoder implementation in pure JavaScript.\n* [.NET](https://github.com/Bond-009/BlurHashSharp) - Encoder implementation in C#.\n* [Haskell](https://github.com/SamProtas/JuicyPixels-blurhash) - Encoder and decoder in pure Haskell.\n* [Scala](https://github.com/markussammallahti/blurhash-scala) - Encoder and decoder in Scala.\n* [Elixir](https://github.com/perzanko/blurhash-elixir) - Encoder implementation in pure Elixir.\n* [ReScript](https://github.com/armedi/rescript-blurhash) - Encoder and decoder implementation in ReScript (BuckleScript).\n* [JavaScript](https://github.com/mad-gooze/fast-blurhash) - Tiny optimized decoder implementation JS.\n* [Xojo](https://github.com/piradoiv/xojo-blurhash/) - Encoder and decoder implementation in pure Xojo.\n* [React Native](https://github.com/mrousavy/react-native-blurhash) - UI Component for React Native. (Decoder in Swift and Kotlin)\n* [Zig](https://github.com/mhoward540/blurhash-zig) - Encoder implementation in Zig.\n* [Titanium SDK](https://github.com/m1ga/ti.blurhash) - Decoder for Titanium SDK (Android)\n* [BQN](https://github.com/dancek/blurhash-bqn) - Encoder, decoder and terminal viewer in pure BQN.\n* [Jetpack Compose](https://github.com/wajahat-iqbal/BlurHashPainter) - Decoder Jetpack Compose implementation\n* [C++](https://github.com/Nheko-Reborn/blurhash) - Encoder and decoder in C++.\n* [Kotlin Multiplatform](https://github.com/vanniktech/blurhash) - Encoding & decoding for Android, iOS & JVM\n* [OCaml](https://github.com/ushitora-anqou/ocaml-blurhash) - Encoder implementation in OCaml.\n\nCan't find the language you're looking for? Try your luck with the GitHub search. For example, here are the search results for [repos which have \"blurhash\" in their name](https://github.com/search?q=blurhash+in%3Aname&type=repositories).\n\nPerhaps you'd like to help extend this list? Which brings us to...\n\n## Contributing\n\nWe'd love contributions! The algorithm is [very simple](Algorithm.md) - less than two hundred lines of code - and can easily be\nported to your platform of choice. And having support for more platforms would be wonderful! So, Java decoder? Golang encoder?\nHaskell? Rust? We want them all!\n\nWe will also try to tag any issues on our [issue tracker](https://github.com/woltapp/blurhash/issues) that we'd love help with, so\nif you just want to dip in, go have a look.\n\nYou can file a pull request with us, or you can start your own repo and project if you want to run everything yourself, we don't mind.\n\nIf you do want to contribute to this project, we have a [code of conduct](CodeOfConduct.md).\n\n## Users\n\nWho uses BlurHash? Here are some projects we know about:\n\n* [Wolt](http://wolt.com/) - We are of course using it ourselves. BlurHashes are used in the mobile clients on iOS and Android, as well as on the web, as placeholders during image loading.\n* [Mastodon](https://github.com/tootsuite/mastodon) - The Mastodon decentralised social media network uses BlurHashes both as loading placeholders, as well as for hiding media marked as sensitive.\n* [Signal](https://signal.org/) - Signal Private Messenger uses Blurhashes as placeholders before photo & video messages are downloaded in chat conversations.\n* [Jellyfin](https://jellyfin.org/) - Jellyfin the free software media system uses Blurhashes as placeholders for images of movies and TV shows when they are being downloaded.\n\n## Good Questions\n\n### How fast is encoding? Decoding?\n\nThese implementations are not very optimised. Running them on very large images can be a bit slow. The performance of\nthe encoder and decoder are about the same for the same input or output size, so decoding very large placeholders, especially\non your UI thread, can also be a bit slow.\n\nHowever! The trick to using the algorithm efficiently is to not run it on full-sized data. The fine detail of an image is all thrown away,\nso you should scale your images down before running BlurHash on them. If you are creating thumbnails, run BlurHash on those\ninstead of the full images.\n\nSimilarly, when displaying the placeholders, very small images work very well when scaled up. We usually decode placeholders\nthat are 32 or even 20 pixels wide, and then let the UI layer scale them up, which is indistinguishable from decoding them at full size.\n\n### How do I pick the number of X and Y components?\n\nIt depends a bit on taste. The more components you pick, the more information is retained in the placeholder, but the longer\nthe BlurHash string will be. Also, it doesn't always look good with too many components. We usually go with 4 by 3, which\nseems to strike a nice balance.\n\nHowever, you should adjust the number of components depending on the aspect ratio of your images. For instance, very wide\nimages should have more X components and fewer Y components.\n\nThe Swift example project contains a test app where you can play around with the parameters and see the results.\n\n### What is the `punch` parameter in some of these implementations?\n\nIt is a parameter that adjusts the contrast on the decoded image. 1 means normal, smaller values will make the effect more subtle,\nand larger values will make it stronger. This is basically a design parameter, which lets you adjust the look.\n\nTechnically, what it does is scale the AC components up or down.\n\n### Is this only useful as an image loading placeholder?\n\nWell, that is what it was designed for originally, but it turns out to be useful for a few other things:\n\n* Masking images without having to use expensive blurs - [Mastodon](http://github.com/tootsuite/mastodon) uses it for this.\n* The data representation makes it quite easy to extract colour averages of the image for different areas. You can easily find approximations of things like the average colour of the top edge of the image, or of a corner. There is some code in the Swift BlurHashKit implementation to experiment with this. Also, the average colour of the entire image is just the DC component and can be decoded even without implementing any of the more complicated DCT stuff.\n* We have been meaning to try to implement tinted drop shadows for UI elements by using the BlurHash and extending the borders. Haven't actually had time to implement this yet though.\n\n### Why base 83?\n\nFirst, 83 seems to be about how many low-ASCII characters you can find that are safe for use in all of JSON, HTML and shells.\n\nSecondly, 83 * 83 is very close to, and a little more than, 19 * 19 * 19, making it ideal for encoding three AC components in two\ncharacters.\n\n### What about using the full Unicode character set to get a more efficient encoding?\n\nWe haven't looked into how much overhead UTF-8 encoding would introduce versus base 83 in single-byte characters, but\nthe encoding and decoding would probably be a lot more complicated, so in the spirit of minimalism BlurHash uses the simpler\noption. It might also be awkward to copy-paste, depending on OS capabilities.\n\nIf you think it can be done and is worth it, though, do make your own version and show us! We'd love to see it in action.\n\n### What about other basis representations than DCT?\n\nThis is something we'd *love* to try. The DCT looks quite ugly when you increase the number of components, probably because\nthe shape of the basis functions becomes too visible. Using a different basis with more aesthetically pleasing shape might be\na big win.\n\nHowever, we have not managed come up with one. Some experimenting with a [Fourier-Bessel base](https://en.wikipedia.org/wiki/Fourier–Bessel_series),\ntargeted at images that are going to be cropped into circles has been done, but without much success. Here again we'd love\nto see what you can come up with!\n\n## Authors\n\n* [Dag Ågren](https://github.com/DagAgren) - Original algorithm design, Swift and C implementations\n* [Mykhailo Shchurov](https://github.com/shchurov) - Kotlin decoder implementation\n* [Hang Duy Khiem](https://github.com/hangduykhiem) - Android demo app\n* [Olli Mahlamäki](https://github.com/omahlama) - TypeScript decoder and encoder implementations\n* [Atte Lautanala](https://github.com/lautat) - Python integration\n* [Lorenz Diener](https://github.com/halcy) - Pure Python implementation\n* [Boris Momčilović](https://github.com/kornrunner) - Pure PHP implementation\n* [Hendrik Schnepel](https://github.com/hsch) - Java encoder implementation\n* [Tuomo Virolainen](https://github.com/tvirolai) - Clojure implementation\n* [Fotis Papadogeorgopoulos](https://github.com/fpapado) - Rust and WebAssembly implementation\n* [Sam Protas](https://github.com/SamProtas) - Pure Haskell implementation\n* [Markus Sammallahti](https://github.com/markussammallahti) - Scala implementation\n* [Kacper Perzankowski](https://github.com/perzanko) - Elixir encoder implementation\n* [Belvi Nosakhare](https://github.com/KingsMentor/BlurHashExt) - Kotlin extensions of Blurhash for ImageView, Glide, and Piccasso optimized for Android.\n* [Armedi](https://github.com/armedi) - ReScript (BuckleScript) implementation.\n* [Ricardo Cruz](https://github.com/piradoiv) - Xojo implementation.\n* [Marc Rousavy](https://github.com/mrousavy) - React Native UI Component\n* [Matt Howard](https://github.com/mhoward540) - Zig implementation\n* [Hannu Hartikainen](https://github.com/dancek) - BQN implementation\n* [Wajahat Iqbal](https://github.com/wajahat-iqbal) - Jetpack compose-based implementation optimized for using any component as a painter.\n\n\n* _Your name here?_\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease report security issues to `security@wolt.com`"
        },
        {
          "name": "Swift",
          "type": "tree",
          "content": null
        },
        {
          "name": "TypeScript",
          "type": "tree",
          "content": null
        },
        {
          "name": "Website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}