{
  "metadata": {
    "timestamp": 1736710413723,
    "page": 45,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SpacehuhnTech/esp8266_deauther",
      "stars": 13694,
      "defaultBranch": "v2",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08984375,
          "content": "\n*.bin\n\n*.elf\n\n*.map\n\n.DS_Store\n\n*.pyc\n\nutils/web_converter/css_html_js_minify/__pycache__/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.123046875,
          "content": "Do not redistribute, advertise or sell this software as a \"jammer\"!!!\n\nMIT License\n\nCopyright (c) 2020 Spacehuhn Technologies\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.875,
          "content": "# ESP8266 Deauther\n\n<img src='https://deauther.com/img/logo.png' alt='Deauther Logo' width='200' />\n\n**Scan for WiFi devices, block selected connections, create dozens of networks and confuse WiFi scanners.**\n\n## New Documentation\n\nHi ðŸ‘‹  \nPlease visit [Deauther.com](https://deauther.com) for information about this project.  \nHere are some quick links:\n\n* [Buy](https://deauther.com/docs/buy)\n* [Download](https://deauther.com/docs/download)\n* [DIY Tutorial](https://deauther.com/docs/category/diy-tutorial)\n* [Usage](https://deauther.com/docs/category/usage)\n* [FAQ](https://deauther.com/docs/faq)\n\n## Password\n\nThe password for `pwned` is `deauther`\n\n## About this Project\n\nThis firmware allows you to easily perform a variety of actions to test 802.11 networks using an [ESP8266](https://www.espressif.com/en/products/socs/esp8266). It's also a great project for learning about WiFi, microcontrollers, Arduino, hacking and electronics/programming in general.  \n\nThe deauthentication attack is the main feature, which can be used to disconnect devices from their WiFi network.  \nAlthough this denial-of-service attack is nothing new, a lot of devices are still vulnerable to it. Luckily this is slowly changing with more WiFi 6 enabled devices being used. But a lot of outdated WiFi devices remain in place, for example in cheap IoT hardware.\nWith an ESP8266 Deauther, you can easily test this attack on your 2.4GHz WiFi network/devices and see whether it's successful or not. And if it is, you know you should upgrade your network.\n\n## Disclaimer\n\nThis project is a proof of concept for testing and educational purposes.  \nNeither the ESP8266, nor its SDK was meant or built for such purposes. **Bugs can occur!**  \n\n**Use it only against your own networks and devices!**  \nPlease check the legal regulations in your country before using it.  \nWe don't take any responsibility for what you do with this program.  "
        },
        {
          "name": "Reset_Sketch",
          "type": "tree",
          "content": null
        },
        {
          "name": "arduino-cli.yaml",
          "type": "blob",
          "size": 0.1455078125,
          "content": "# arduino-cli.yaml\nboard_manager:\n  additional_urls:\n    - https://raw.githubusercontent.com/SpacehuhnTech/arduino/main/package_spacehuhn_index.json\n"
        },
        {
          "name": "esp8266_deauther",
          "type": "tree",
          "content": null
        },
        {
          "name": "serialcommands.md",
          "type": "blob",
          "size": 12.86328125,
          "content": "# Serial Commands\n\n**Overview:**  \n- [`help`](#help)\n- [`scan [<all/aps/stations>] [-t <time>] [-c <continue-time>] [-ch <channel>]`](#scan)\n- [`show [selected] [<all/aps/stations/names/ssids>]`](#show)\n- [`select [<all/aps/stations/names>] [<id>]`](#select-deselect)\n- [`deselect [<all/aps/stations/names>] [<id>]`](#select-deselect)\n- [`add ssid <ssid> [-wpa2] [-cl <clones>] [-f]`](#add-ssid)\n- [`add ssid -ap <id> [-cl <clones>] [-f]`](#add-ssid)\n- [`add name <name> [-ap <id>] [-s] [-f]`](#add-name)\n- [`add name <name> [-st <id>] [-s] [-f]`](#add-name)\n- [`add name <name> [-m <mac>] [-ch <channel>] [-b <bssid>] [-s] [-f]`](#add-name)\n- [`replace name <id> [-n <name>] [-m <mac>] [-ch <channel>] [-b <bssid>] [-s]`](#replace-name)\n- [`set name <id> <newname>`](#set-name)\n- [`enable random <interval>`](#random)\n- [`disable random`](#random)\n- [`load [<all/ssids/names/settings>] [<file>]`](#load-save)\n- [`save [<all/ssids/names/settings>] [<file>]`](#load-save)\n- [`remove <ap/station/name/ssid> <id>` ](#remove)\n- [`remove <ap/station/names/ssids> [all]` ](#remove)\n- [`attack [beacon] [deauth] [deauthall] [probe] [nooutput] [-t <timeout>]`](#attack)\n- [`attack status [<on/off>]`](#attack-status)\n- [`sysinfo`](#sysinfo)\n- [`clear`](#clear)\n- [`format`](#format)\n- [`print <file> [<lines>]`](#print)\n- [`delete <file> [<lineFrom>] [<lineTo>]`](#delete)\n- [`replace <file> <line> <new-content>`](#replace)\n- [`copy <file> <newfile>`](#copy)\n- [`rename <file> <newfile>`](#rename)\n- [`get <setting>`](#get)\n- [`set <setting> <value>`](#set)\n- [`reset`](#reset)\n- [`stop <all/scan/attack>`](#stop)\n- [`chicken`](#chicken)\n- [`reboot`](#reboot)\n- [`run <file>`](#run)\n- [`write <file> <commands>`](#write)\n- [`info`](#info)\n- [`// <comments>`](#comment)\n- [`send deauth <apMac> <stMac> <rason> <channel>`](#send)\n- [`send beacon <mac> <ssid> <ch> [wpa2]`](#send)\n- [`send probe <mac> <ssid> <ch>`](#send)\n- [`led <r> <g> <b> [<brightness>]`](#led)\n- [`led <#rrggbb> [<brightness>]`](#led)\n- [`draw`](#draw)\n- [`startap`](#startap)\n- [`stopap`](#startap)\n- [`screen mode <menu/packetmonitor/buttontest/loading>`](#screen)\n## Video Overview\n\n[![@PwnKitteh made this video about deauther 2.0 serial commands. ](https://img.youtube.com/vi/wJu7lgqelZM/0.jpg)](https://www.youtube.com/watch?v=wJu7lgqelZM)\n\n\n## HELP\n`help`  \nPrints out list with all commands.  \n\n## SCAN  \n`scan [<all/aps/stations/wifi>] [-t <time>] [-c <continue-time>] [-ch <channel>]`  \n**Starts scan with given parameters.**  \n**Modes** (optional, default = all): \n  - all (-a)  \n  - aps (-ap)  \n  - stations (-st)  \n  - wifi (-w)  \n**Mode must be the first parameter!**\n**time** [-t] (optional, default = 15s): How long it should scan for stations (client devices) in seconds.  \n**continue** [-c] (optional): How many seconds until it should scan again.  \n**channel** [-ch] (optional): Only scan on a specific channel, instead of going through them all automatically.  \nTo scan indefinitely set the time to 0, i.e. `scan stations -t 0`.  \nThe difference between mode `stations` and mode `wifi` is that `stations` will only scan on channels that are used by at least one access point.  \nThe `wifi` scan mode also doesn't require an access point scan first and is recommended for using the deauth detection and packet monitor feature.  \n\n## SHOW\n`show [<all/aps/stations/names/ssids>]`  \n`show selected [<all/aps/stations/names/ssids>]`  \nPrints out the scan results (access points and stations), the saved device names and the saved ssids.  \n**Selected** (optional, default = false): Only the selected targets are printed out.  \n**Types** (optional, default = all):  \n  - all (-a)  \n  - aps (-ap)  \n  - stations (-st)  \n  - names (-b)  \n  - ssids (-ss)  \n  \n## SELECT-DESELECT\n`select [<all/aps/stations/names>] [<id>]`  \n`deselect [<all/aps/stations/names>] [<id>]`  \n(De)Selects a specific or all access points, stations and device names.  \n**Types** (optional, default = all):\n  - all (-a)  \n  - aps (-ap)  \n  - stations (-st)  \n  - names (-b)  \n  \n**ID** (optional): ID of the AP/station/device you want to select.  \n\n## ADD-SSID\n`add ssid <ssid> [-wpa2] [-cl <clones>] [-f]`  \nAdds SSID with given parameters to list.  \n**ssid**: The SSID you want to add to the list.  \n**-wpa2** (optional, default = false): If the SSID you add should be an open or WPA2 encrypted network.  \n**clones** [-cl] (optional, default = 0): How many SSIDs you want to add with that name.  \n**force** [-f] (optional, default = false): Forces adding of ssid, even if list is full.  \n\n`add ssid -ap <id> [-cl <clones>] [-f]`  \nCopies SSID from scanned access point and adds it to the list.  \n**clones** [-cl] (optional, default = 0): How many SSIDs you want to add with that name.  \n**force** [-f] (optional, default = false): Forces adding of ssid, even if list is full.  \n\n`add ssid -s [-f]`  \nCopies SSIDs from selected access points into list.  \n**force** [-f] (optional, default = false): Forces adding of ssid, overwrites old SSIDs.  \n\n## ADD-NAME\n`add name <name> -ap <id> [-s] [-f]`  \n`add name <name> -st <id> [-s] [-f]`  \n`add name <name> -m <mac> [-ch <channel>] [-b <bssid>] [-s] [-f]`  \nSaves device with given name and parameters.  \n**name** [-n]: Name you want to give the device (max.16 characters!).  \n**ap** [-ap]: Access point you want to save.  \n**station** [-st]: Station you want to save.  \n**mac** [-m]: MAC address of the device.  \n**channel** [-ch] (optional, default = current channel): Channel the device is on.  \n**bssid** [-b] (optional, default = NULL): The MAC address of the access point its connected to.  \n**select** [-s] (optional, default = false): Select the device after adding it.  \n**force** [-f] (optional, default = false): Forces adding name, even if list is full.  \n\n## REPLACE NAME\n`replace name <id> [-n <name>] [-m <mac>] [-ch <channel>] [-b <bssid>] [-s]`  \nRemoves name with given ID and creates a new one with the given parameters.  \n\n## SET-NAME\n`set name <id> <newname>`  \nChanges the name of a saved device.  \n**id**: ID of the saved name you want to change.  \n**newname**: New name you want to give that device.  \n\n## RANDOM\n`enable random <interval>`  \nEnables SSID random mode with given interval in seconds.  \n\n`disable random`\nDisables SSID random mode.  \n\n## LOAD-SAVE\n`load [<all/ssids/names/settings>] [<file>]`  \n`save [<all/ssids/names/settings>] [<file>]`  \nLoads/saves the ssid list, device name list and settings.  \n**Types** (optional, default = all):\n  - all (-a)\n  - ssids (-ss)\n  - names (-n)\n  - settings\n**File** (optional): Where to load/save the file. It will use the default file name when the parameter isn't set.  \n\n## REMOVE\n`remove <ap/station/name/ssid> <id>`  \nRemoves specific ssid or name from the list.  \n**Types**:\n  - ap (-ap) \n  - station (-st) \n  - name (-n)  \n  - ssid (-ss) \n\n`remove <ap/station/names/ssids>`  \n`remove <ap/station/names/ssids> [all]`  \nRemoves everything from the selected list.  \n**all** [-a] (optional, default = true): Remove all.\n\n## ATTACK\n`attack [beacon] [deauth] [deauthall] [probe] [nooutput] [-t <timeout>]`  \nStarts attack with given parameters (1 or more is required):  \n- **beacon** [-b] (optional, default = false)\n- **deauth** [-d] (optional, default = false)\n- **deauthall** [-da] (optional, default = false)\n- **probe** [-p] (optional, default = false)\n- **nooutput** [-no] (optional, default = false): Will stop printing out the packets per second.\n- **timeout** [-t] (optional, default = settings.attackTime): Will change the attack timeout time in the settings.  \n\n**PLEASE NOTE** that *deauthall* will deactivate *deauth* and vice versa.  \nYou can only run one at a time!  \n\n## ATTACK STATUS\n`attack status [<on/off>]`  \nEnables or disables printing the attack status (pkts/s) every second (only when an attack is running).  \n\n## SYSINFO\n`sysinfo`  \nPrints out RAM usage, current WiFi channel, the MAC addresses, SPIFFS (SPI-Flash-File-System usage and files.  \n\n## CLEAR\n`clear`  \nClears the serial console.  \n\n## FORMAT\n`format`  \nDeletes all files in the SPIFFS (SPI-Flash-File-System).  \n\n## PRINT\n`print <file> [lines]`  \n**lines** [-l] (optional, default = false): Show line numbers.   \nPrints out file from SPIFFS (SPI-Flash-File-System) to the serial console.  \n\n## DELETE\n`delete <file>`  \nDeletes file from the SPIFFS (SPI-Flash-File-System).  \n`delete <file> <lineFrom>`  \nRemoves a specific line from a file.  \n`delete <file> <lineFrom> <lineTo>`  \nRemoves specific lines from a file.  \n**The first line number is 0!**  \n\n## REPLACE\n`replace <file> <line> <new-content>`  \nReplaces specific line of file with given content.  \n\n## COPY\n`copy <file> <newfile>`  \nMakes a copy of a file in the SPIFFS.  \n\n## RENAME\n`rename <file> <newfile>`  \nRenames a file in the SPIFFS.  \n\n## GET\n`get <setting>`  \nPrints out the value of the setting.  \n\n## SET\n`set <setting> <value>`  \nChanges the value of the setting.  \n\n## RESET\n`reset`  \nResets the settings.  \n\n## STOP\n`stop [<all/scan/attack/script>]`  \nStops ongoing tasks.  \n**Modes** (optional, default = all):\n  - all (-a)\n  - scan (-sc)\n  - attack (-a)\n  - script\n\n## CHICKEN\n`chicken`  \nPrints out a HUGE spacechick.  \n\n## REBOOT\n`reboot`  \nPerforms a hard reset (just like connecting the RST pin to GND).  \n\n## RUN\n`run <file> [-c <continue-time>]`  \nExecutes script with given filepath.  \n**continue** [-c] (optional, min=1s, default time is 10s): How many seconds until it should run the script again.  \nPlease don't use this command within a script! It won't work but it might lead to errors or unexpected behaviour.  \n\n## WRITE\n`write <file> <commands>`  \nWrites (appends) a command to the given file and saves it.  \n**Please note** that this command has, like all commands, a limit of 512 characters and therefor shouldn't be used \nto write extensive files. There is a better way to upload files to the SPIFFS explained in the tutorials.md file.  \n\n## INFO\n`info`  \nShows version number, copyright info, and link to GitHub.  \n\n## COMMENT\n`// <comments>`  \nCommands that begin with `#` will be printed out as they are and not be tried to execute.  \nThere **must** be a space between the hash sign and the comments.  \nThe hash sign also **has** to be at the beginning of the command!  \n\n## SEND\n`send deauth <AP-MAC> <ST-MAC> <reason> <channel>`  \n`send beacon <mac> <ssid> <ch> [wpa2]`  \n`send probe <mac> <ssid> <ch>`  \nSends single packet out with giving parameters.  \n\nYou can also sent out custom packets with: `send packet <packet>`  \nThe packet must be a hexadecimal string devided by `:` and with a leading zero.  \nIt's only recommended to use this feature if you have experience on how the ESP8266 handles sending custom defined packets.  \nCopy pasting packets out of Wireshark is very unlikely to work.  \nAlso note that you're still limited to 512 characters per command!  \n\n## LED\n`led <r> <g> <b>`  \nChanges LED color based on input.  \nBe sure to disable the LED updates (see command below), if you don't want the color the be rewritten by a scan or attack.   \n\n`led <#rrggbb>`  \nChanges LED color based on input in form of a hex value.  \nThe value **must** start with a `#` and have 6 following characters.  \n\n## DELAY\n`delay <time>`  \nWill pause the serial command interface for a given time.  \n`delay 1000` will wait one second.  \nBut you can also specify the delay time in seconds directly:  \n`delay 1s`.  \n\n## DRAW\n`draw [<height>] [<width>]`  \nDraws packet monitor graph.  \nWill only work if you run a wifi scan first, i.e. `scan wifi -t 65s -ch 1`.  \n- **height** (optional, default = 25): Height of the graph in characters.  \n- **width** (optional, default = 2): Width in characters per bar in graph.  \n\n## STARTAP\n`startap [-p <path][-s <ssid>] [-pswd <password>] [-ch <channel>] [-h] [-cp]`  \nStarts access point.  \n- **path** [-p] (optional, default = \"/web\"): Path to web files.  \n- **ssid** [-s] (optional, default = [settings ssid](https://github.com/spacehuhn/esp8266_deauther/blob/master/settings.md#ssid)): Network name.  \n- **password** [-pswd] (optional, default = [settings password](https://github.com/spacehuhn/esp8266_deauther/blob/master/settings.md#password)): Password.  \n- **channel** [-ch] (optional, default = [settings channel](https://github.com/spacehuhn/esp8266_deauther/blob/master/settings.md#channel)): Channel .  \n- **hidden** [-h] (optional, default = [settings hidden](https://github.com/spacehuhn/esp8266_deauther/blob/master/settings.md#hidden)): Hide SSID.  \n- **captiveportal** [-cp] (optional, default = [settings captiveportal](https://github.com/spacehuhn/esp8266_deauther/blob/master/settings.md#captiveportal)): Enable captiveportal.  \n\n`stopap`  \nStops access point.  \n\n\n## SCREEN\n`screen <on/off>`  \nTurns display on or off. To reactivate the display press the A (select) button.  \n\n`screen mode <menu/packetmonitor/buttontest/loading>`  \nChanges display mode.  \n- **menu**: default mode when using the display interface\n- **packetmonitor**: draws packet graph (will only work when you're scanning at the same time)\n- **buttontest**: special mode for testing the buttons\n- **loading**: loading screen that is normally used when starting a scan over the display menu\n"
        },
        {
          "name": "settings.md",
          "type": "blob",
          "size": 5.0224609375,
          "content": "# Settings\r\n\r\n**Overview**\r\n  - [`version`](#version)\r\n  - [`ssid`](#ssid)\r\n  - [`password`](#password)\r\n  - [`channel`](#channel)\r\n  - [`hidden`](#hidden)\r\n  - [`captivePortal`](#captiveportal)\r\n  - [`lang`](#lang)\r\n  - [`autosave`](#autosave)\r\n  - [`autosaveTime`](#autosave-time)\r\n  - [`displayInterface`](#display-interface)\r\n  - [`displayTimeout`](#displaytimeout)\r\n  - [`serialInterface`](#serial-interface)\r\n  - [`serialEcho`](#serial-echo)\r\n  - [`webInterface`](#web-interface)\r\n  - [`webSpiffs`](#web-spiffs)\r\n  - [`ledEnabled`](#ledEnabled)\r\n  - [`maxCh`](#max-ch)\r\n  - [`macAP`](#macap)\r\n  - [`macSt`](#macst)\r\n  - [`chTime`](#ch-time)\r\n  - [`minDeauths`](#mindeauths)\r\n  - [`attackTimeout`](#attacktimeout)\r\n  - [`deauthsPerTarget`](#deauths-per-target)\r\n  - [`deauthReason`](#deauth-reason)\r\n  - [`beaconChannel`](#beacon-channel)\r\n  - [`beaconInterval`](#beacon-interval)\r\n  - [`randomTx`](#randomtx)\r\n  - [`probesPerSSID`](#probesperssid)\r\n  \r\n## VERSION\r\n`String version = VERSION;`  \r\nVersion number, i.e. `v2.0`.  \r\n**PLEASE NOTE** that this setting can only be changed in the source code.  \r\n\r\n## SSID\r\n`String ssid = \"pwned\";`  \r\nSSID of access point used for the web interface (if enabled).  \r\nThe length must be between 1 and 31 characters.  \r\n\r\n## PASSWORD\r\n`String password = \"deauther\";`  \r\nPassword of access point used for the web interface (if enabled).  \r\nThe length must be between 8 and 31 characters.  \r\n\r\n## CHANNEL\r\n`uint8_t channel = 1;`  \r\nDefault WiFi channel that is used when starting.  \r\n\r\n## HIDDEN\r\n`bool hidden = false`  \r\nHides the access point that is used for the web interface (if enabled).   \r\n\r\n## CAPTIVEPORTAL\r\n`bool captivePortal = true;`  \r\nEnables captive portal for access point (if enabled).  \r\n\r\n## LANG\r\n`String lang = \"en\";`  \r\nDefault language for the web interface.  \r\nBe sure the language file exists!  \r\n\r\n## AUTOSAVE\r\n`bool autosave = true;`  \r\nEnables automatic saving of SSIDs, device names and settings.  \r\n\r\n## AUTOSAVE-TIME\r\n`uint32_t autosaveTime = 30000;`  \r\nTime interval for automatic saving in milliseconds.  \r\n\r\n## DISPLAY-INTERFACE\r\n`bool displayInterface = false;`  \r\nEnables display interface.  \r\n\r\n## DISPLAYTIMEOUT\r\n`uint32_t displayTimeout = 600`  \r\nTime in seconds after which the display turns off when inactive.  \r\nTo disable the display timeout, set it to 0.  \r\n\r\n## SERIAL-INTERFACE\r\n`bool serialInterface = true;`  \r\nEnables serial interface.  \r\n\r\n## SERIAL-ECHO\r\n`bool serialEcho = true`  \r\nEnables echo for each incoming message over serial.  \r\n\r\n## WEB-INTERFACE\r\n`bool webInterface = false;`  \r\nEnables web interface.  \r\n\r\n## WEB-SPIFFS\r\n`bool webSpiffs = false`  \r\nEnables SPIFFS for all web files.  \r\nCan lead to longer loading times but it nice if you need to edit the web files regularly.  \r\n\r\n## LEDENABLED\r\n`bool ledEnabled = true`  \r\nEnables the (RGB) LED feature.  \r\n\r\n## MAX-CH\r\n`uint8_t maxCh = 13;`  \r\nMax channel to scan on.  \r\nUS = 11, EU = 13, Japan = 14.  \r\nFor more information click [here](https://en.wikipedia.org/wiki/List_of_WLAN_channels).  \r\n\r\n## MACAP\r\n`uint8_t* macAP;`  \r\nMac address used for the access point mode.  \r\nPlease note that the mac address will only replace the internal mac address when the accesspoint mode is enabled.  \r\nYou can set a random mac address with `set macap random`.  \r\n\r\n## MACST\r\n`uint8_t* macSt;`  \r\nMac address used for the station mode.  \r\nPlease note that the mac address will only replace the internal mac address when the station mode is enabled.  \r\nYou can set a random mac address with `set macst random`.  \r\n\r\n## CH-TIME\r\n`uint16_t chTime = 384;`  \r\nTime for scanning one channel before going to the next in milliseconds (only if channel hopping is enabled).  \r\n\r\n## MINDEAUTHS\r\n`uint16_t minDeauths = 3`  \r\nMinimum number of deauthentication frames when scanning to change the LED to deauth mode.  \r\n\r\n## ATTACKTIMEOUT\r\n`uint32_t attackTimeout = 600`  \r\nAfter what amount of time (in seconds) the attack will stop automatically.  \r\nSet it to 0 to disable it.  \r\n\r\n## DEAUTHS-PER-TARGET\r\n`uint16_t deauthsPerTarget = 10;`  \r\nHow many deauthentication and disassociation frames are sent out for each target.  \r\n\r\n## DEAUTH-REASON\r\n`uint8_t deauthReason = 1;`  \r\nThe [reason code](https://www.cisco.com/assets/sol/sb/WAP371_Emulators/WAP371_Emulator_v1-0-1-5/help/Apx_ReasonCodes2.html) that is sent with the deauth frames to tell the target device why the connection will be closed.  \r\n\r\n## BEACON-CHANNEL\r\n`bool beaconChannel = false;`  \r\nIf enabled, will sent all beacon and probe frames on different channels when running a beacon attack.  \r\n\r\n## BEACON-INTERVAL\r\n`bool beaconInterval = false;`  \r\nIf set true, beacons will be sent out every second. If set to false, the interval will be 100ms. \r\nA longer interval means more stability and less spamming of packets, but it could take longer \r\nuntil the clients find the ssids when scanning.  \r\n\r\n## RANDOMTX\r\n`bool randomTX = false`  \r\nEnables randomized transmission power for sending out beacon and probe request frames.  \r\n\r\n## PROBESPERSSID\r\n`uint8_t probesPerSSID = 1`  \r\nHow many probe request frames are sent for each SSID.     \r\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "web_interface",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}