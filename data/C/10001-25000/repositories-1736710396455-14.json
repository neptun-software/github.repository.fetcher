{
  "metadata": {
    "timestamp": 1736710396455,
    "page": 14,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iovisor/bcc",
      "stars": 20826,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.1494140625,
          "content": "---\nBasedOnStyle: Google\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nIndentCaseLabels: false\nAccessModifierOffset: -1\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "Dockerfile*\nbuild\n.*.swp\ndocker/Dockerfile*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3037109375,
          "content": "# Editor's files\n*.swp\n*.swo\n*.pyc\n.idea\n*~\n\n# Build artifacts\n/build/\ncmake-build-debug\ndebian/**/*.log\n*critical.log\nobj-x86_64-linux-gnu\nexamples/cgroupid/cgroupid\n\n# Output from docker builds\nscripts/docker/output/\n/output/\n\n# UAPI header generated for libbpf package-based builds\nsrc/cc/compat/linux/bpf.h\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2998046875,
          "content": "[submodule \"src/cc/libbpf\"]\n\tpath = src/cc/libbpf\n\turl = https://github.com/libbpf/libbpf.git\n[submodule \"libbpf-tools/bpftool\"]\n\tpath = libbpf-tools/bpftool\n\turl = https://github.com/libbpf/bpftool\n[submodule \"libbpf-tools/blazesym\"]\n\tpath = libbpf-tools/blazesym\n\turl = https://github.com/libbpf/blazesym\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6904296875,
          "content": "language: python\nmatrix:\n  include:\n    - name: \"Check helpers on Python 2.7\"\n      python: 2.7\n      script: ./scripts/check-helpers.sh\n    - name: \"Python style check on Python 2.7\"\n      python: 2.7\n      script: ./scripts/py-style-check.sh\n    - name: \"flake8 lint on Python 2.7\"      \n      python: 2.7\n      script: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n    - name: \"flake8 lint on Python 3.7\"\n      dist: xenial  # required for Python >= 3.7\n      python: 3.7\n      script: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n  allow_failures:\n    - name: \"Check helpers on Python 2.7\"\nbefore_install: pip install --upgrade pip\ninstall: pip install flake8\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 9.2802734375,
          "content": "# Copyright (c) PLUMgrid, Inc.\n# Licensed under the Apache License, Version 2.0 (the \"License\")\ncmake_minimum_required(VERSION 2.8.12)\n\nif(${CMAKE_VERSION} VERSION_EQUAL 3.12.0 OR ${CMAKE_VERSION} VERSION_GREATER 3.12.0)\n  cmake_policy(SET CMP0074 NEW)\nendif()\n\nif(${CMAKE_VERSION} VERSION_EQUAL 3.3.0 OR ${CMAKE_VERSION} VERSION_GREATER 3.3.0)\n  cmake_policy(SET CMP0057 NEW)\nendif()\n\nproject(bcc)\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n\nif(CMAKE_SANITIZE_TYPE)\n  add_compile_options(-fsanitize=${CMAKE_SANITIZE_TYPE})\n  add_link_options(-fsanitize=${CMAKE_SANITIZE_TYPE})\nendif()\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"/usr\" CACHE PATH \"path to install\" FORCE)\nendif()\n\nenable_testing()\n\nexecute_process(COMMAND git config --global --add safe.directory ${CMAKE_CURRENT_SOURCE_DIR}\n                WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                RESULT_VARIABLE CONFIG_RESULT)\nif(CONFIG_RESULT AND NOT CONFIG_RESULT EQUAL 0)\n  message(WARNING \"Failed to add root source directory to safe.directory\")\nendif()\n\n# populate submodule blazesym\nif(NOT NO_BLAZESYM)\n  execute_process(COMMAND git config --global --add safe.directory ${CMAKE_CURRENT_SOURCE_DIR}/libbpf-tools/blazesym\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                  RESULT_VARIABLE CONFIG_RESULT)\n  if(CONFIG_RESULT AND NOT CONFIG_RESULT EQUAL 0)\n    message(WARNING \"Failed to add blazesym source directory to safe.directory\")\n  endif()\n\n  execute_process(COMMAND git submodule update --init --recursive -- libbpf-tools/blazesym\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                  RESULT_VARIABLE UPDATE_RESULT)\n  if(UPDATE_RESULT AND NOT UPDATE_RESULT EQUAL 0)\n    message(WARNING \"Failed to update submodule blazesym\")\n  endif()\nendif()\n\n# populate submodules (libbpf)\nif(NOT CMAKE_USE_LIBBPF_PACKAGE)\n  execute_process(COMMAND git config --global --add safe.directory ${CMAKE_CURRENT_SOURCE_DIR}/src/cc/libbpf\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                  RESULT_VARIABLE CONFIG_RESULT)\n  if(CONFIG_RESULT AND NOT CONFIG_RESULT EQUAL 0)\n    message(WARNING \"Failed to add libbpf source directory to safe.directory\")\n  endif()\n  execute_process(COMMAND git config --global --add safe.directory ${CMAKE_CURRENT_SOURCE_DIR}/libbpf-tools/bpftool\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                  RESULT_VARIABLE CONFIG_RESULT)\n  if(CONFIG_RESULT AND NOT CONFIG_RESULT EQUAL 0)\n    message(WARNING \"Failed to add bpftool source directory to safe.directory\")\n  endif()\n\n  if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/src/cc/libbpf/src)\n    execute_process(COMMAND git submodule update --init --recursive\n                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                    RESULT_VARIABLE UPDATE_RESULT)\n    if(UPDATE_RESULT AND NOT UPDATE_RESULT EQUAL 0)\n      message(WARNING \"Failed to update submodule libbpf\")\n    endif()\n  else()\n    execute_process(COMMAND git diff --shortstat ${CMAKE_CURRENT_SOURCE_DIR}/src/cc/libbpf/\n                    OUTPUT_VARIABLE DIFF_STATUS)\n    if(\"${DIFF_STATUS}\" STREQUAL \"\")\n      execute_process(COMMAND git submodule update --init --recursive\n                      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                      RESULT_VARIABLE UPDATE_RESULT)\n      if(UPDATE_RESULT AND NOT UPDATE_RESULT EQUAL 0)\n        message(WARNING \"Failed to update submodule libbpf\")\n      endif()\n    else()\n      message(WARNING \"submodule libbpf dirty, so no sync\")\n    endif()\n  endif()\nendif()\n\n# It's possible to use other kernel headers with\n# KERNEL_INCLUDE_DIRS build variable, like:\n#  $ cd <kernel-dir>\n#  $ make INSTALL_HDR_PATH=/tmp/headers headers_install\n#  $ cd <bcc-dir>\n#  $ cmake -DKERNEL_INCLUDE_DIRS=/tmp/headers/include/ ...\ninclude_directories(${KERNEL_INCLUDE_DIRS})\n\noption(ENABLE_NO_PIE \"Build bcc-lua without PIE\" ON)\n\ninclude(cmake/GetGitRevisionDescription.cmake)\ninclude(cmake/version.cmake)\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\ninclude(CheckCXXCompilerFlag)\ninclude(cmake/FindCompilerFlag.cmake)\n\noption(ENABLE_LLVM_NATIVECODEGEN \"Enable use of llvm nativecodegen module (needed by rw-engine)\" ON)\noption(ENABLE_RTTI \"Enable compiling with real time type information\" OFF)\noption(ENABLE_LLVM_SHARED \"Enable linking LLVM as a shared library\" OFF)\noption(ENABLE_CLANG_JIT \"Enable Loading BPF through Clang Frontend\" ON)\noption(ENABLE_USDT \"Enable User-level Statically Defined Tracing\" ON)\noption(ENABLE_EXAMPLES \"Build examples\" ON)\noption(ENABLE_MAN \"Build man pages\" ON)\noption(ENABLE_TESTS \"Build tests\" ON)\noption(RUN_LUA_TESTS \"Run lua tests\" ON)\noption(ENABLE_LIBDEBUGINFOD \"Use libdebuginfod as a source of debug symbols\" ON)\nCMAKE_DEPENDENT_OPTION(ENABLE_CPP_API \"Enable C++ API\" ON \"ENABLE_USDT\" OFF)\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n\nif(ENABLE_TESTS)\n  find_package(KernelHeaders)\nendif()\n\nif(CMAKE_USE_LIBBPF_PACKAGE)\n  find_package(LibBpf)\nendif()\n\nif(NOT PYTHON_ONLY)\n  find_package(LLVM REQUIRED CONFIG)\n  message(STATUS \"Found LLVM: ${LLVM_INCLUDE_DIRS} ${LLVM_PACKAGE_VERSION} (Use LLVM_ROOT envronment variable for another version of LLVM)\")\n\n  if(ENABLE_CLANG_JIT)\n    find_package(BISON)\n    find_package(FLEX)\n    find_package(LibElf REQUIRED)\n    find_package(LibDebuginfod)\n    find_package(LibLzma)\n    if(CLANG_DIR)\n      set(CMAKE_FIND_ROOT_PATH \"${CLANG_DIR}\")\n      include_directories(\"${CLANG_DIR}/include\")\n    endif()\n\n    # clang is linked as a library, but the library path searching is\n    # primitively supported, unlike libLLVM\n    set(CLANG_SEARCH \"/opt/local/llvm/lib;/usr/lib/llvm-3.7/lib;${LLVM_LIBRARY_DIRS}\")\n    find_library(libclangAnalysis NAMES clangAnalysis clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangAST NAMES clangAST clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangBasic NAMES clangBasic clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangCodeGen NAMES clangCodeGen clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangDriver NAMES clangDriver clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangEdit NAMES clangEdit clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangFrontend NAMES clangFrontend clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangLex NAMES clangLex clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangParse NAMES clangParse clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangRewrite NAMES clangRewrite clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangSema NAMES clangSema clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangSerialization NAMES clangSerialization clang-cpp HINTS ${CLANG_SEARCH})\n    find_library(libclangASTMatchers NAMES clangASTMatchers clang-cpp HINTS ${CLANG_SEARCH})\n\n    if(${LLVM_PACKAGE_VERSION} VERSION_EQUAL 15 OR ${LLVM_PACKAGE_VERSION} VERSION_GREATER 15)\n      find_library(libclangSupport NAMES clangSupport clang-cpp HINTS ${CLANG_SEARCH})\n    endif()\n\n    if(${LLVM_PACKAGE_VERSION} VERSION_EQUAL 18 OR ${LLVM_PACKAGE_VERSION} VERSION_GREATER 18)\n      find_library(libclangAPINotes NAMES clangAPINotes clang-cpp HINTS ${CLANG_SEARCH})\n    endif()\n\n    find_library(libclang-shared libclang-cpp.so HINTS ${CLANG_SEARCH})\n\n    if(libclangBasic STREQUAL \"libclangBasic-NOTFOUND\")\n      message(FATAL_ERROR \"Unable to find clang libraries\")\n    endif()\n\n    FOREACH(DIR ${LLVM_INCLUDE_DIRS})\n      include_directories(\"${DIR}/../tools/clang/include\")\n    ENDFOREACH()\n\n  endif(ENABLE_CLANG_JIT)\n\n  # Set to a string path if system places kernel lib directory in\n  # non-default location.\n  if(NOT DEFINED BCC_KERNEL_MODULES_DIR)\n    set(BCC_KERNEL_MODULES_DIR \"/lib/modules\")\n  endif()\n\n  if(NOT DEFINED BCC_PROG_TAG_DIR)\n    set(BCC_PROG_TAG_DIR \"/var/tmp/bcc\")\n  endif()\n\n  # As reported in issue #735, GCC 6 has some behavioral problems when\n  # dealing with -isystem. Hence, skip the warning optimization\n  # altogether on that compiler.\n  option(USINGISYSTEM \"using -isystem\" ON)\n  execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)\n  if(USINGISYSTEM AND GCC_VERSION VERSION_LESS 6.0)\n    # iterate over all available directories in LLVM_INCLUDE_DIRS to\n    # generate a correctly tokenized list of parameters\n    foreach(ONE_LLVM_INCLUDE_DIR ${LLVM_INCLUDE_DIRS})\n      set(CXX_ISYSTEM_DIRS \"${CXX_ISYSTEM_DIRS} -isystem ${ONE_LLVM_INCLUDE_DIR}\")\n    endforeach()\n  endif()\n\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  if(${LLVM_PACKAGE_VERSION} VERSION_EQUAL 16 OR ${LLVM_PACKAGE_VERSION} VERSION_GREATER 16)\n    set(CMAKE_CXX_STANDARD 17)\n  else()\n    set(CMAKE_CXX_STANDARD 14)\n  endif()\n\nendif(NOT PYTHON_ONLY)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall ${CXX_ISYSTEM_DIRS}\")\n\nadd_subdirectory(src)\nadd_subdirectory(introspection)\n\nif(ENABLE_CLANG_JIT)\n  if(ENABLE_EXAMPLES)\n    add_subdirectory(examples)\n  endif(ENABLE_EXAMPLES)\n\n  if(ENABLE_MAN)\n    add_subdirectory(man)\n  endif(ENABLE_MAN)\n\n  if(ENABLE_TESTS)\n    add_subdirectory(tests)\n  endif(ENABLE_TESTS)\n\n  add_subdirectory(tools)\nendif(ENABLE_CLANG_JIT)\n\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/CmakeUninstall.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/CmakeUninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/CmakeUninstall.cmake)\nendif()\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.7763671875,
          "content": "# This file should be kept up to date with the list of maintainers responsible\n# for the different subdirectories within BCC. One of these people SHOULD\n# review code that touches the respective areas, and MUST review it if the\n# change is substantial or API-breaking.\n\n# see https://help.github.com/articles/about-codeowners/ for syntax\n\n# Miscellaneous\n* @drzaeus77 @goldshtn @yonghong-song @4ast @brendangregg @davemarchevsky\n\n# Documentation\n/docs/ @brendangregg @goldshtn @davemarchevsky\n/man/ @brendangregg @goldshtn @davemarchevsky\n\n# Tools\n/tools/ @brendangregg @goldshtn @davemarchevsky\n\n# Compiler, C API\n/src/cc/ @drzaeus77 @yonghong-song @4ast @davemarchevsky\n\n# Python API\n/src/python/ @drzaeus77 @goldshtn @davemarchevsky\n\n# Tests\n/tests/ @drzaeus77 @yonghong-song @davemarchevsky\n"
        },
        {
          "name": "CONTRIBUTING-SCRIPTS.md",
          "type": "blob",
          "size": 7.36328125,
          "content": "# Contributing bcc/eBPF scripts\n\nIf you want to contribute scripts to bcc, or improve your own bcc programs, great! Please read this first.\n\n_(Written by Brendan Gregg.)_\n\n## Type of script\n\nbcc has 2 types of scripts, in different directories:\n\n- **/examples**: intended as short examples of bcc & eBPF code. You should focus on keeping it short, neat, and documented (code comments). A submission can just be the example code.\n- **/tools**: intended as production safe performance and troubleshooting tools. You should focus on it being useful, tested, low overhead, documented (incl. all caveats), and easy to use. A submission should involve 4 changes: the tool, a man page, an example file, and an addition to README.md. Follow [my lead](https://github.com/brendangregg/bcc/commit/9fa156273b395cfc5505f0fff5d6b7b1396f7daa), and see the checklist below. These are run in mission critical environments as root (tech companies, financial institutions, government agencies), so if spending hours testing isn't for you, please submit your idea as an issue instead, or chat with us on irc.\n\nMore detail for each below.\n\n## Examples\n\nThese are grouped into subdirectories (networking, tracing). Your example can either be a Python program with embedded C (eg, tracing/strlen_count.py), or separate Python and C files (eg, tracing/vfsreadlat.*).\n\nAs said earlier: keep it short, neat, and documented (code comments).\n\n## Tools\n\nA checklist for bcc tool development:\n\n1. **Research the topic landscape**. Learn the existing tools and metrics (incl. from /proc). Determine what real world problems exist and need solving. We have too many tools and metrics as it is, we don't need more \"I guess that's useful\" tools, we need more \"ah-hah! I couldn't do this before!\" tools. Consider asking other developers about your idea. Many of us can be found in IRC, in the #iovisor channel on irc.oftc.net. There's also the mailing list (see the README.md), and github for issues.\n1. **Create a known workload for testing**. This might involving writing a 10 line C program, using a micro-benchmark, or just improvising at the shell. If you don't know how to create a workload, learn! Figuring this out will provide invaluable context and details that you may have otherwise overlooked. Sometimes it's easy, and I'm able to just use dd(1) from /dev/urandom or a disk device to /dev/null. It lets me set the I/O size, count, and provides throughput statistics for cross-checking my tool output. But other times I need a micro-benchmark, or some C.\n1. **Write the tool to solve the problem and no more**. Unix philosophy: do one thing and do it well. netstat doesn't have an option to dump packets, tcpdump-style. They are two different tools.\n1. **Check your tool correctly measures your known workload**. If possible, run a prime number of events (eg, 23) and check that the numbers match. Try other workload variations.\n1. **Use other observability tools to perform a cross-check or sanity check**. Eg, imagine you write a PCI bus tool that shows current throughput is 28 Gbytes/sec. How could you sanity test that? Well, what PCI devices are there? Disks and network cards? Measure their throughput (iostat, nicstat, sar), and check if is in the ballpark of 28 Gbytes/sec (which would include PCI frame overheads). Ideally, your numbers match.\n1. **Measure the overhead of the tool**. If you are running a micro-benchmark, how much slower is it with the tool running. Is more CPU consumed? Try to determine the worst case: run the micro-benchmark so that CPU headroom is exhausted, and then run the bcc tool. Can overhead be lowered?\n1. **Test again, and stress test**. You want to discover and fix all the bad things before others hit them.\n1. **Consider command line options**. Should it have -p for filtering on a PID? -T for timestamps? -i for interval? See other tools for examples, and copy the style: the usage message should list example usage at the end. Remember to keep the tool doing one thing and doing it well. Also, if there's one option that seems to be the common case, perhaps it should just be the first argument and not need a switch (no -X). A special case of this is *stat tools, like iostat/vmstat/etc, where the convention is [interval [count]].\n1. **Concise, intuitive, self-explanatory output**. The default output should meet the common need concisely. Leave much less useful fields and data to be shown with options: -v for verbose, etc. Consider including a startup message that's self-explanatory, eg \"Tracing block I/O. Output every 1 seconds. Ctrl-C to end.\".\n1. **Default output <80 chars wide**. Try hard to keep the output less than 80 characters wide, especially the default output of the tool. That way, the output not only fits on the smallest reasonable terminal, it also fits well in slide decks, blog posts, articles, and printed material, all of which help education and adoption. Publishers of technical books often have templates they require books to conform to: it may not be an option to shrink or narrow the font to fit your output.\n1. **Short tool name**. Follow the style of the other tools, which follow the style of other /usr/bin utilities. They are short and easy to type. No underscores.\n1. **Use pep8 to check Python style**: pep8 --show-source --ignore=E123,E125,E126,E127,E128,E302 filename . Note that it misses some things, like consistent usage, so you'll still need to double check your script.\n1. **Make sure your script is Python3-ready**: Adding `from __future__ import absolute_import, division, print_function, unicode_literals` helps make your script Python3-ready.\n1. **Write an _example.txt file**. Copy the style in tools/biolatency_example.txt: start with an intro sentence, then have examples, and finish with the USAGE message. Explain everything: the first example should explain what we are seeing, even if this seems obvious. For some people it won't be obvious. Also explain why we are running the tool: what problems it's solving. It can take a long time (hours) to come up with good examples, but it's worth it. These will get copied around (eg, presentations, articles).\n1. **Read your example.txt file**. Does this sound too niche or convoluted? Are you spending too much time explaining caveats? These can be hints that perhaps you should fix your tool, or abandon it! Perhaps it better belongs as an /example, and not a tool. I've abandoned many tools at this stage.\n1. **Write a man page**. Either ROFF (.8), markdown (.md), or plain text (.txt): so long as it documents the important sections, particularly columns (fields) and caveats. These go under man/man8. See the other examples. Include a section on overhead, and pull no punches. It's better for end users to know about high overhead beforehand, than to discover it the hard way. Also explain caveats. Don't assume those will be obvious to tool users.\n1. **Read your man page**. For ROFF: nroff -man filename. Like before, this exercise is like saying something out loud. Does it sound too niche or convoluted? Again, hints that you might need to go back and fix things, or abandon it.\n1. **Spell check your documentation**. Use a spell checker like aspell to check your document quality before committing.\n1. **Add an entry to README.md**.\n1. **Add a smoke test** to [test_tools_smoke.py](https://github.com/iovisor/bcc/blob/master/tests/python/test_tools_smoke.py), which serves as a basic check that your tool still works when we make changes to the core library.\n1. If you made it this far, pull request!\n"
        },
        {
          "name": "FAQ.txt",
          "type": "blob",
          "size": 2.494140625,
          "content": "Q: while running 'make test' I'm seeing:\n   'ImportError: No module named pyroute2'\nA: Install pyroute2:\n   git clone https://github.com/svinota/pyroute2.git\n   cd pyroute2; sudo make install\n\nQ: hello_world.py fails with:\n   OSError: libbcc.so: cannot open shared object file: No such file or directory\nA: make sure to 'make install' and add the directory\n   where libbcc.so was installed into your LD_LIBRARY_PATH\n   export LD_LIBRARY_PATH=$(dirname `find /usr -name libbcc.so`):$LD_LIBRARY_PATH\n\nQ: hello_world.py fails with:\n   ImportError: No module named bcc\nA: checkout \"sudo make install\" output to find out bpf package installation site,\n   add it to the PYTHONPATH env variable before running the program.\n   export PYTHONPATH=$(dirname `find /usr/lib -name bcc`):$PYTHONPATH\n\nQ: hello_world.py still fails with:\n   bpf: Operation not permitted\n   Exception: Failed to load BPF program hello\nA: sudo\n\nQ: hello_world.py fails with\n   bpf: Failed to load program: Operation not permitted\n   despite running as root, and strace shows each `bpf()` system call failing with an EPERM.\nA: The so-called Kernel lockdown might be the root cause. Try disabling it with the so-called\n   sysrq mechanism:\n       echo 1 > /proc/sys/kernel/sysrq\n       echo x > /proc/sysrq-trigger\n   Also see https://github.com/iovisor/bcc/issues/2525\n   \n   If you have Secure Boot enabled you need to press Alt-PrintScr-x on the keyboard instead:\n   ```\n   This sysrq operation is disabled from userspace.\n   sysrq: Disabling Secure Boot restrictions\n   Lifting lockdown\n   ```\n\nQ: How do I fulfill the Linux kernel version requirement?\nA: You need to obtain a recent version of the Linux source code\n   (please look at the README for the exact version), enable the\n   configuration options listed in the README file, install the image,\n   modules and headers, update your bootloader and reboot into the new\n   kernel.\n\n   If you want to compile your own kernel, you can fetch the sources\n   from kernel.org or through your Linux distribution.\n   To install, you need all of the following:\n      make install\n      make modules_install\n      make headers_install INSTALL_HDR_PATH=/usr/local/\n\nQ: hello_world.py fails with:\n   ImportError: No module named past.builtins\nA: sudo pip install future\n\nQ: Running one of the bcc tools produces an import error:\n   Traceback (most recent call last):\n   File \"./execsnoop\", line 20, in <module>\n     from bcc import BPF\n   ImportError: No module named bcc\nA: Make sure the python bcc bindings package (python2-bcc) is installed.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 21.9755859375,
          "content": "# Installing BCC\n\n* [Kernel Configuration](#kernel-configuration)\n* [Packages](#packages)\n  - [Debian](#debian---binary)\n  - [Ubuntu](#ubuntu---binary)\n  - [Fedora](#fedora---binary)\n  - [Arch](#arch---binary)\n  - [Gentoo](#gentoo---portage)\n  - [openSUSE](#opensuse---binary)\n  - [RHEL](#rhel---binary)\n  - [Amazon Linux 1](#amazon-linux-1---binary)\n  - [Amazon Linux 2](#amazon-linux-2---binary)\n  - [Alpine](#alpine---binary)\n  - [WSL](#wslwindows-subsystem-for-linux---binary)\n* [Source](#source)\n  - [libbpf Submodule](#libbpf-submodule)\n  - [Debian](#debian---source)\n  - [Ubuntu](#ubuntu---source)\n  - [Fedora](#fedora---source)\n  - [openSUSE](#opensuse---source)\n  - [Centos](#centos---source)\n  - [Amazon Linux 1](#amazon-linux-1---source)\n  - [Amazon Linux 2](#amazon-linux-2---source)\n  - [Alpine](#alpine---source)\n  - [Arch](#arch---source)\n* [Older Instructions](#older-instructions)\n\n## Kernel Configuration\n\nIn general, to use these features, a Linux kernel version 4.1 or newer is\nrequired. In addition, the kernel should have been compiled with the following\nflags set:\n\n```\nCONFIG_BPF=y\nCONFIG_BPF_SYSCALL=y\n# [optional, for tc filters]\nCONFIG_NET_CLS_BPF=m\n# [optional, for tc actions]\nCONFIG_NET_ACT_BPF=m\nCONFIG_BPF_JIT=y\n# [for Linux kernel versions 4.1 through 4.6]\nCONFIG_HAVE_BPF_JIT=y\n# [for Linux kernel versions 4.7 and later]\nCONFIG_HAVE_EBPF_JIT=y\n# [optional, for kprobes]\nCONFIG_BPF_EVENTS=y\n# Need kernel headers through /sys/kernel/kheaders.tar.xz\nCONFIG_IKHEADERS=y\n```\n\nThere are a few optional kernel flags needed for running bcc networking examples on vanilla kernel:\n\n```\nCONFIG_NET_SCH_SFQ=m\nCONFIG_NET_ACT_POLICE=m\nCONFIG_NET_ACT_GACT=m\nCONFIG_DUMMY=m\nCONFIG_VXLAN=m\n```\n\nKernel compile flags can usually be checked by looking at `/proc/config.gz` or\n`/boot/config-<kernel-version>`.\n\n# Packages\n\n## Debian - Binary\n\n`bcc` and its tools are available in the standard Debian main repository, from the source package [bpfcc](https://packages.debian.org/source/sid/bpfcc) under the names `bpfcc-tools`, `python3-bpfcc`, `libbpfcc` and `libbpfcc-dev`.\n\nTo install:\n\n```bash\necho deb http://cloudfront.debian.net/debian sid main >> /etc/apt/sources.list\nsudo apt-get install -y bpfcc-tools libbpfcc libbpfcc-dev linux-headers-$(uname -r)\n```\n\n## Ubuntu - Binary\n\nVersions of bcc are available in the standard Ubuntu\nUniverse repository, as well in iovisor's PPA. The Ubuntu packages have slightly different names: where iovisor\npackages use `bcc` in the name (e.g. `bcc-tools`), Ubuntu packages use `bpfcc` (e.g.\n`bpfcc-tools`).\n\nCurrently, BCC packages for both the Ubuntu Universe, and the iovisor builds are outdated. This is a known and tracked in:\n- [Universe - Ubuntu Launchpad](https://bugs.launchpad.net/ubuntu/+source/bpfcc/+bug/1848137)\n- [iovisor - BCC GitHub Issues](https://github.com/iovisor/bcc/issues/2678)\nCurrently, [building from source](#ubuntu---source) is currently the only way to get up to date packaged version of bcc.\n\n**Ubuntu Packages**\nSource packages and the binary packages produced from them can be\nfound at [packages.ubuntu.com](https://packages.ubuntu.com/search?suite=default&section=all&arch=any&keywords=bpfcc&searchon=sourcenames).\n\n```bash\nsudo apt-get install bpfcc-tools linux-headers-$(uname -r)\n```\n\nThe tools are installed in `/sbin` (`/usr/sbin` in Ubuntu 18.04) with a `-bpfcc` extension. Try running `sudo opensnoop-bpfcc`.\n\n**_Note_**: the Ubuntu packages have different names but the package contents, in most cases, conflict\nand as such _cannot_ be installed alongside upstream packages. Should one choose to use\nUbuntu's packages instead of the upstream iovisor packages (or vice-versa), the\nconflicting packages will need to be removed.\n\nThe iovisor packages _do_ declare they provide the Ubuntu packages and as such may be\nused to satisfy dependencies. For example, should one attempt to install package `foo`\nwhich declares a dependency on `libbpfcc` while the upstream `libbcc` package is installed,\n`foo` should install without trouble as `libbcc` declares that it provides `libbpfcc`.\nThat said, one should always test such a configuration in case of version incompatibilities.\n\n**iovisor packages (Upstream Stable and Signed Packages)**\n\n```bash\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD\necho \"deb https://repo.iovisor.org/apt/$(lsb_release -cs) $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/iovisor.list\nsudo apt-get update\nsudo apt-get install bcc-tools libbcc-examples linux-headers-$(uname -r)\n```\n(replace `xenial` with `artful` or `bionic` as appropriate). Tools will be installed under /usr/share/bcc/tools.\n\n**Upstream Nightly Packages**\n\n```bash\necho \"deb [trusted=yes] https://repo.iovisor.org/apt/xenial xenial-nightly main\" | sudo tee /etc/apt/sources.list.d/iovisor.list\nsudo apt-get update\nsudo apt-get install bcc-tools libbcc-examples linux-headers-$(uname -r)\n```\n(replace `xenial` with `artful` or `bionic` as appropriate)\n\n## Fedora - Binary\n\n### Fedora 30 and newer\n\nAs of Fedora 30, bcc binaries are available in the standard repository.\nYou can install them via\n\n```bash\nsudo dnf install bcc\n```\n\n**Note**: if you keep getting `Failed to load program: Operation not permitted` when\ntrying to run the `hello_world.py` example as root then you might need to lift\nthe so-called kernel lockdown (cf.\n[FAQ](https://github.com/iovisor/bcc/blob/c00d10d4552f647491395e326d2e4400f3a0b6c5/FAQ.txt#L24),\n[background article](https://gehrcke.de/2019/09/running-an-ebpf-program-may-require-lifting-the-kernel-lockdown)).\n\n\n### Fedora 29 and older\n\nEnsure that you are running a 4.2+ kernel with `uname -r`. If not, install a 4.2+ kernel from\nhttp://alt.fedoraproject.org/pub/alt/rawhide-kernel-nodebug, for example:\n\n```bash\nsudo dnf config-manager --add-repo=http://alt.fedoraproject.org/pub/alt/rawhide-kernel-nodebug/fedora-rawhide-kernel-nodebug.repo\nsudo dnf update\n# reboot\n```\n\n**Nightly Packages**\n\nNightly bcc binary packages for Fedora 25, 26, 27, and 28 are hosted at\n`https://repo.iovisor.org/yum/nightly/f{25,26,27}`.\n\nTo install:\n```bash\necho -e '[iovisor]\\nbaseurl=https://repo.iovisor.org/yum/nightly/f27/$basearch\\nenabled=1\\ngpgcheck=0' | sudo tee /etc/yum.repos.d/iovisor.repo\nsudo dnf install bcc-tools kernel-headers kernel-devel\n```\n\n**Stable and Signed Packages**\n\nStable bcc binary packages for Fedora 25, 26, 27, and 28 are hosted at\n`https://repo.iovisor.org/yum/main/f{25,26,27}`.\n\n```bash\necho -e '[iovisor]\\nbaseurl=https://repo.iovisor.org/yum/main/f27/$basearch\\nenabled=1' | sudo tee /etc/yum.repos.d/iovisor.repo\nsudo dnf install bcc-tools kernel-devel-$(uname -r) kernel-headers-$(uname -r)\n```\n\n## Arch - Binary\n\nbcc is available in the standard Arch repos, so it can be installed with the `pacman` command:\n```\n# pacman -S bcc bcc-tools python-bcc\n```\n\n## Gentoo - Portage\n\nFirst of all, upgrade the kernel of your choice to a recent version. For example:\n```\nemerge sys-kernel/gentoo-sources\n```\nThen, configure the kernel enabling the features you need. Please consider the following as a starting point:\n```\nCONFIG_BPF=y\nCONFIG_BPF_SYSCALL=y\nCONFIG_NET_CLS_BPF=m\nCONFIG_NET_ACT_BPF=m\nCONFIG_BPF_JIT=y\nCONFIG_BPF_EVENTS=y\n```\nFinally, you can install bcc with:\n```\nemerge dev-util/bcc\n```\nThe appropriate dependencies (e.g., ```clang```, ```llvm``` with BPF backend) will be pulled automatically.\n\n## openSUSE - Binary\n\nFor openSUSE Leap 42.2 (and later) and Tumbleweed, bcc is already included in the official repo. Just install\nthe packages with zypper.\n\n```bash\nsudo zypper ref\nsudo zypper in bcc-tools bcc-examples\n```\n\n## RHEL - Binary\n\nFor RHEL 7.6, bcc is already included in the official yum repository as bcc-tools. As part of the install, the following dependencies are installed: bcc.x86_64 0:0.6.1-2.el7 ,llvm-private.x86_64 0:6.0.1-2.el7 ,python-bcc.x86_64 0:0.6.1-2.el7,python-netaddr.noarch 0:0.7.5-9.el7\n\n```\nyum install bcc-tools\n```\n\n## Amazon Linux 1 - Binary\nUse case 1. Install BCC for latest kernel available in repo:\n   Tested on Amazon Linux AMI release 2018.03 (kernel 4.14.88-72.73.amzn1.x86_64)\n```\nsudo yum update kernel\nsudo yum install bcc\nsudo reboot\n```\n\nUse case 2. Install BCC for your AMI's default kernel (no reboot required):\n   Tested on Amazon Linux AMI release 2018.03 (kernel 4.14.77-70.59.amzn1.x86_64)\n```\nsudo yum install kernel-headers-$(uname -r | cut -d'.' -f1-5)\nsudo yum install kernel-devel-$(uname -r | cut -d'.' -f1-5)\nsudo yum install bcc\n```\n\n## Amazon Linux 2 - Binary\nUse case 1. Install BCC for your AMI's default kernel (no reboot required):\n   Tested on Amazon Linux AMI release 2021.11 (kernel 5.10.75-79.358.amzn2.x86_64)\n```\nsudo amazon-linux-extras install BCC\n```\n\n## Alpine - Binary\n\nAs of Alpine 3.11, bcc binaries are available in the community repository:\n\n```\nsudo apk add bcc-tools bcc-doc\n```\n\nThe tools are installed in `/usr/share/bcc/tools`.\n\n**Python Compatibility**\n\nThe binary packages include bindings for Python 3 only. The Python-based tools assume that a `python` binary is available at `/usr/bin/python`, but that may not be true on recent versions of Alpine. If you encounter errors like `<tool-name>: not found`, you can try creating a symlink to the Python 3.x binary like so:\n\n```\nsudo ln -s $(which python3) /usr/bin/python\n```\n\n**Containers**\n\nAlpine Linux is often used as a base system for containers. `bcc` can be used in such an environment by launching the container in privileged mode with kernel modules available through bind mounts:\n\n```\nsudo docker run --rm -it --privileged \\\n  -v /lib/modules:/lib/modules:ro \\\n  -v /sys:/sys:ro \\\n  -v /usr/src:/usr/src:ro \\\n  alpine:3.12\n```\n\n## WSL(Windows Subsystem for Linux) - Binary\n\n### Install dependencies\nThe compiling depends on the headers and lib of linux kernel module which was not found in wsl distribution packages repo. We have to compile the kernel module manually.\n```bash\napt-get install flex bison libssl-dev libelf-dev dwarves bc\n```\n### Install packages\n\nFirst, you will need to checkout the WSL2 Linux kernel git repository:\n```\nKERNEL_VERSION=$(uname -r | cut -d '-' -f 1)\ngit clone --depth 1 https://github.com/microsoft/WSL2-Linux-Kernel.git -b linux-msft-wsl-$KERNEL_VERSION\ncd WSL2-Linux-Kernel\n```\n\nThen compile and install:\n```\ncp Microsoft/config-wsl .config\nmake oldconfig && make prepare\nmake scripts\nmake modules\nsudo make modules_install\n````\n\nAfter install the module you will need to change the name of the directory to remove the '+' at the end\n\n````\nmv /lib/modules/$KERNEL_VERSION-microsoft-standard-WSL2+/ /lib/modules/$KERNEL_VERSION-microsoft-standard-WSL2\n````\n\nThen you can install bcc tools package according your distribution.\n\nIf you met some problems, try to \n```\nsudo mount -t debugfs debugfs /sys/kernel/debug\n```\n\n# Source\n\n## libbpf Submodule\n\nSince release v0.10.0, bcc starts to leverage libbpf repo (https://github.com/libbpf/libbpf)\nto provide wrapper functions to the kernel for bpf syscalls, uapi headers bpf.h/btf.h etc.\nUnfortunately, the default github release source code does not contain libbpf submodule\nsource code and this will cause build issues.\n\nTo alleviate this problem, starting at release v0.11.0, source code with corresponding\nlibbpf submodule codes will be released as well. See https://github.com/iovisor/bcc/releases.\n\n## Debian - Source\n### sid\n#### Repositories\n\n`/etc/apt/sources.list` should include the `non-free` repository and look something like this:\n\n```\ndeb http://deb.debian.org/debian sid main contrib non-free\ndeb-src http://deb.debian.org/debian sid main contrib non-free\n```\n\n#### Install Build Dependencies\n```\n# Before you begin\napt-get update\n# According to https://packages.debian.org/source/sid/bpfcc,\n# BCC build dependencies:\nsudo apt-get install arping bison clang-format cmake dh-python \\\n  dpkg-dev pkg-kde-tools ethtool flex inetutils-ping iperf \\\n  libbpf-dev libclang-dev libclang-cpp-dev libedit-dev libelf-dev \\\n  libfl-dev libzip-dev linux-libc-dev llvm-dev libluajit-5.1-dev \\\n  luajit python3-netaddr python3-pyroute2 python3-setuptools python3\n```\n\n#### Install and compile BCC\n```\ngit clone https://github.com/iovisor/bcc.git\nmkdir bcc/build; cd bcc/build\ncmake ..\nmake\nsudo make install\n```\n\n## Ubuntu - Source\n\nTo build the toolchain from source, one needs:\n* LLVM 3.7.1 or newer, compiled with BPF support (default=on)\n* Clang, built from the same tree as LLVM\n* cmake (>=3.1), gcc (>=4.7), flex, bison\n* LuaJIT, if you want Lua support\n* Optional tools used in some examples: arping, netperf, and iperf\n\n### Install build dependencies\n```\n# For Focal (20.04.1 LTS)\nsudo apt install -y zip bison build-essential cmake flex git libedit-dev \\\n  libllvm12 llvm-12-dev libclang-12-dev python zlib1g-dev libelf-dev libfl-dev python3-setuptools \\\n  liblzma-dev arping netperf iperf\n\n# For Hirsute (21.04) or Impish (21.10)\nsudo apt install -y zip bison build-essential cmake flex git libedit-dev \\\n  libllvm12 llvm-12-dev libclang-12-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \\\n  liblzma-dev arping netperf iperf\n\n# For Jammy (22.04)\nsudo apt install -y zip bison build-essential cmake flex git libedit-dev \\\n  libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \\\n  liblzma-dev libdebuginfod-dev arping netperf iperf\n  \n# For Lunar Lobster (23.04)\nsudo apt install -y zip bison build-essential cmake flex git libedit-dev \\\n  libllvm15 llvm-15-dev libclang-15-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \\\n  liblzma-dev libdebuginfod-dev arping netperf iperf libpolly-15-dev\n\n# For Mantic Minotaur (23.10)\nsudo apt install -y zip bison build-essential cmake flex git libedit-dev \\\n  libllvm16 llvm-16-dev libclang-16-dev python3 zlib1g-dev libelf-dev libfl-dev python3-setuptools \\\n  liblzma-dev libdebuginfod-dev arping netperf iperf libpolly-16-dev\n\n# For other versions\nsudo apt-get -y install zip bison build-essential cmake flex git libedit-dev \\\n  libllvm3.7 llvm-3.7-dev libclang-3.7-dev python zlib1g-dev libelf-dev python3-setuptools \\\n  liblzma-dev arping netperf iperf\n\n# For Lua support\nsudo apt-get -y install luajit luajit-5.1-dev\n```\n\n### Install and compile BCC\n\n```\ngit clone https://github.com/iovisor/bcc.git\nmkdir bcc/build; cd bcc/build\ncmake ..\nmake\nsudo make install\ncmake -DPYTHON_CMD=python3 .. # build python3 binding\npushd src/python/\nmake\nsudo make install\npopd\n```\n\n## CentOS-8.5 - Source\nsuppose you're running with root or add sudo first\n\n### Install build dependencies\n```\ndnf install -y bison cmake ethtool flex git iperf3 libstdc++-devel python3-netaddr python3-pip gcc gcc-c++ make zlib-devel elfutils-libelf-devel\n# dnf install -y luajit luajit-devel ## if use luajit, will report some lua function(which in lua5.3) undefined problem \ndnf install -y clang clang-devel llvm llvm-devel llvm-static ncurses-devel\ndnf -y install netperf\npip3 install pyroute2\nln -s /usr/bin/python3 /usr/bin/python\n```\n### Install and Compile bcc\n```\ngit clone https://github.com/iovisor/bcc.git\n\nmkdir bcc-build\ncd bcc-build/\n\n## here llvm should always link shared library\ncmake ../bcc -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_LLVM_SHARED=1\nmake -j10\nmake install \n\n```\nafter install, you may add bcc directory to your $PATH, which you can add to ~/.bashrc\n```\nbcctools=/usr/share/bcc/tools\nbccexamples=/usr/share/bcc/examples\nexport PATH=$bcctools:$bccexamples:$PATH\n```\n### let path take effect\n```\nsource ~/.bashrc \n```\nthen run \n```\nhello_world.py\n```\nOr \n```\ncd /usr/share/bcc/examples\n./hello_world.py\n./tracing/bitehist.py\n\ncd /usr/share/bcc/tools\n./bitesize \n\n```\n\n## Fedora - Source\n\n### Install build dependencies\n\n```\nsudo dnf install -y bison cmake ethtool flex git iperf libstdc++-static \\\n  python-netaddr python-pip gcc gcc-c++ make zlib-devel \\\n  elfutils-libelf-devel python-cachetools\nsudo dnf install -y luajit luajit-devel  # for Lua support\nsudo dnf install -y \\\n  http://repo.iovisor.org/yum/extra/mageia/cauldron/x86_64/netperf-2.7.0-1.mga6.x86_64.rpm\nsudo pip install pyroute2\n```\n\n### Install binary clang\n\n```\n# FC22\nwget http://llvm.org/releases/3.7.1/clang+llvm-3.7.1-x86_64-fedora22.tar.xz\nsudo tar xf clang+llvm-3.7.1-x86_64-fedora22.tar.xz -C /usr/local --strip 1\n\n# FC23\nwget http://llvm.org/releases/3.9.0/clang+llvm-3.9.0-x86_64-fedora23.tar.xz\nsudo tar xf clang+llvm-3.9.0-x86_64-fedora23.tar.xz -C /usr/local --strip 1\n\n# FC24 and FC25\nsudo dnf install -y clang clang-devel llvm llvm-devel llvm-static ncurses-devel\n```\n\n### Install and compile BCC\n```\ngit clone https://github.com/iovisor/bcc.git\nmkdir bcc/build; cd bcc/build\ncmake ..\nmake\nsudo make install\n```\n\n## openSUSE - Source\n\n### Install build dependencies\n\n```\nsudo zypper in bison cmake flex gcc gcc-c++ git libelf-devel libstdc++-devel \\\n  llvm-devel clang-devel pkg-config python-devel python-setuptools python3-devel \\\n  python3-setuptools\nsudo zypper in luajit-devel       # for lua support in openSUSE Leap 42.2 or later\nsudo zypper in lua51-luajit-devel # for lua support in openSUSE Tumbleweed\n```\n\n### Install and compile BCC\n```\ngit clone https://github.com/iovisor/bcc.git\nmkdir bcc/build; cd bcc/build\ncmake -DLUAJIT_INCLUDE_DIR=`pkg-config --variable=includedir luajit` \\ # for lua support\n      ..\nmake\nsudo make install\ncmake -DPYTHON_CMD=python3 .. # build python3 binding\npushd src/python/\nmake\nsudo make install\npopd\n```\n\n## Centos - Source\n\nFor Centos 7.6 only\n\n### Install build dependencies\n\n```\nsudo yum install -y epel-release\nsudo yum update -y\nsudo yum groupinstall -y \"Development tools\"\nsudo yum install -y elfutils-libelf-devel cmake3 git bison flex ncurses-devel\nsudo yum install -y luajit luajit-devel  # for Lua support\n```\n\n### Install and compile LLVM\n\nYou could compile LLVM from source code\n\n```\ncurl -LO https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/llvm-10.0.1.src.tar.xz\ncurl -LO https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.1/clang-10.0.1.src.tar.xz\ntar -xf clang-10.0.1.src.tar.xz\ntar -xf llvm-10.0.1.src.tar.xz\n\nmkdir clang-build\nmkdir llvm-build\n\ncd llvm-build\ncmake3 -G \"Unix Makefiles\" -DLLVM_TARGETS_TO_BUILD=\"BPF;X86\" \\\n  -DCMAKE_BUILD_TYPE=Release ../llvm-10.0.1.src\nmake\nsudo make install\n\ncd ../clang-build\ncmake3 -G \"Unix Makefiles\" -DLLVM_TARGETS_TO_BUILD=\"BPF;X86\" \\\n  -DCMAKE_BUILD_TYPE=Release ../clang-10.0.1.src\nmake\nsudo make install\ncd ..\n```\n\nor install from centos-release-scl\n\n```\nyum install -y centos-release-scl\nyum-config-manager --enable rhel-server-rhscl-7-rpms\nyum install -y devtoolset-7 llvm-toolset-10 llvm-toolset-10-llvm-devel llvm-toolset-10-llvm-static llvm-toolset-10-clang-devel\nsource scl_source enable devtoolset-7 llvm-toolset-10\n```\n\nFor permanently enable scl environment, please check https://access.redhat.com/solutions/527703.\n\n### Install and compile BCC\n\n```\ngit clone https://github.com/iovisor/bcc.git\nmkdir bcc/build; cd bcc/build\ncmake3 ..\nmake\nsudo make install\n```\n\n## Amazon Linux 1 - Source\n\nTested on Amazon Linux AMI release 2018.03 (kernel 4.14.47-56.37.amzn1.x86_64)\n\n### Install packages required for building\n```\n# enable epel to get iperf, luajit, luajit-devel, cmake3 (cmake3 is required to support c++11)\nsudo yum-config-manager --enable epel\n\nsudo yum install -y bison cmake3 ethtool flex git iperf libstdc++-static python-netaddr python-cachetools gcc gcc-c++ make zlib-devel elfutils-libelf-devel\nsudo yum install -y luajit luajit-devel\nsudo yum install -y http://repo.iovisor.org/yum/extra/mageia/cauldron/x86_64/netperf-2.7.0-1.mga6.x86_64.rpm\nsudo pip install pyroute2\nsudo yum install -y ncurses-devel\n```\n\n### Install clang 3.7.1 pre-built binaries\n```\nwget http://releases.llvm.org/3.7.1/clang+llvm-3.7.1-x86_64-fedora22.tar.xz\ntar xf clang*\n(cd clang* && sudo cp -R * /usr/local/)\n```\n\n### Build bcc\n```\ngit clone https://github.com/iovisor/bcc.git\npushd .\nmkdir bcc/build; cd bcc/build\ncmake3 ..\ntime make\nsudo make install\npopd\n```\n\n### Setup required to run the tools\n```\nsudo yum -y install kernel-devel-$(uname -r)\nsudo mount -t debugfs debugfs /sys/kernel/debug\n```\n\n### Test\n```\nsudo /usr/share/bcc/tools/execsnoop\n```\n\n## Amazon Linux 2 - Source\n\n```\n# enable epel to get iperf, luajit, luajit-devel, cmake3 (cmake3 is required to support c++11)\nsudo yum-config-manager --enable epel\n\nsudo yum install -y bison cmake3 ethtool flex git iperf libstdc++-static python-netaddr python-cachetools gcc gcc-c++ make zlib-devel elfutils-libelf-devel\nsudo yum install -y luajit luajit-devel\nsudo yum install -y http://repo.iovisor.org/yum/extra/mageia/cauldron/x86_64/netperf-2.7.0-1.mga6.x86_64.rpm\nsudo pip install pyroute2\nsudo yum install -y ncurses-devel\n```\n\n### Install clang\n```\nyum install -y clang llvm llvm-devel llvm-static clang-devel clang-libs\n```\n\n### Build bcc\n```\ngit clone https://github.com/iovisor/bcc.git\npushd .\nmkdir bcc/build; cd bcc/build\ncmake3 ..\ntime make\nsudo make install\npopd\n```\n\n### Setup required to run the tools\n```\nsudo yum -y install kernel-devel-$(uname -r)\nsudo mount -t debugfs debugfs /sys/kernel/debug\n```\n\n### Test\n```\nsudo /usr/share/bcc/tools/execsnoop\n```\n\n## Alpine - Source\n\n### Install packages required for building\n\n```\nsudo apk add tar git build-base iperf linux-headers llvm10-dev llvm10-static \\\n  clang-dev clang-static cmake python3 flex-dev bison luajit-dev elfutils-dev \\\n  zlib-dev\n```\n\n### Build bcc\n\n```\ngit clone https://github.com/iovisor/bcc.git\nmkdir bcc/build; cd bcc/build\n# python2 can be substituted here, depending on your environment\ncmake -DPYTHON_CMD=python3 ..\nmake && sudo make install\n\n# Optional, but needed if you don't have /usr/bin/python on your system\nln -s $(which python3) /usr/bin/python\n```\n\n### Test\n\n```\nsudo /usr/share/bcc/tools/execsnoop\n```\n\n## Arch - Source\n\n### Install dependencies\n\n```\npacman -S cmake clang llvm flex bison python\n```\n\n### Build bcc\n\n```\ngit clone https://github.com/iovisor/bcc.git\npushd .\nmkdir bcc/build\ncd bcc/build\ncmake -DENABLE_LLVM_SHARED=on .. -DPYTHON_CMD=python3 # for python3 support\nmake -j$(nproc)\nsudo make install\ncd src/python\nmake -j$(nproc)\nsudo make install\npopd\n```\n\n# Older Instructions\n\n## Build LLVM and Clang development libs\n\n```\ngit clone https://github.com/llvm/llvm-project.git\nmkdir -p llvm-project/llvm/build/install\ncd llvm-project/llvm/build\ncmake -G \"Ninja\" -DLLVM_TARGETS_TO_BUILD=\"BPF;X86\" \\\n  -DLLVM_ENABLE_PROJECTS=\"clang\" \\\n  -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install ..\nninja && ninja install\nexport PATH=$PWD/install/bin:$PATH\n```\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LINKS.md",
          "type": "blob",
          "size": 6.2802734375,
          "content": "- 2019-12-06: [My learnings on Linux BPF container performance engineering](https://medium.com/@aimvec/my-learnings-on-linux-bpf-container-performance-engineering-3eb424b73d56)\n- 2019-11-21: [Debugging network stalls on Kubernetes](https://github.blog/2019-11-21-debugging-network-stalls-on-kubernetes)\n- 2019-11-12: [bcc-tools brings dynamic kernel tracing to Red Hat Enterprise Linux 8.1](https://www.redhat.com/en/blog/bcc-tools-brings-dynamic-kernel-tracing-red-hat-enterprise-linux-81)\n- 2018-05-03: [Linux System Monitoring with eBPF](https://www.circonus.com/2018/05/linux-system-monitoring-with-ebpf)\n- 2018-02-22: [Some advanced BCC topics](https://lwn.net/Articles/747640)\n- 2018-01-23: [BPFd: Running BCC tools remotely across systems and architectures](https://lwn.net/Articles/744522)\n- 2017-12-22: [An introduction to the BPF Compiler Collection](https://lwn.net/Articles/742082)\n- 2017-09-13: [Performance Analysis Superpowers with Linux BPF](https://www.slideshare.net/brendangregg/ossna-2017-performance-analysis-superpowers-with-linux-bpf)\n- 2017-07-28: [Tracing a packet journey using Linux tracepoints, perf and eBPF](https://blog.yadutaf.fr/2017/07/28/tracing-a-packet-journey-using-linux-tracepoints-perf-ebpf/)\n- 2017-07-13: [Performance Superpowers with Enhanced BPF](https://www.usenix.org/conference/atc17/program/presentation/gregg-superpowers)\n- 2017-06-28: [The BSD Packet Filter](https://speakerdeck.com/tuxology/the-bsd-packet-filter)\n- 2017-03-04: [Linux 4.x Tracing: Performance Analysis with bcc/BPF](https://www.slideshare.net/brendangregg/linux-4x-tracing-performance-analysis-with-bccbpf)\n- 2017-02-27: [Profiling a .NET Core Application on Linux](https://blogs.microsoft.co.il/sasha/2017/02/27/profiling-a-net-core-application-on-linux)\n- 2017-02-05: [gobpf - utilizing eBPF from Go](https://fosdem.org/2017/schedule/event/go_bpf/attachments/slides/1681/export/events/attachments/go_bpf/slides/1681/gobpf_utilizing_eBPF_from_Go_FOSDEM_2017.pdf)\n- 2017-01-31: [Golang bcc/BPF Function Tracing](http://www.brendangregg.com/blog/2017-01-31/golang-bcc-bpf-function-tracing.html)\n- 2017-01-18: [BPF: Tracing and more](https://www.slideshare.net/brendangregg/bpf-tracing-and-more)\n- 2016-12-09: [Linux 4.x Tracing Tools: Using BPF Superpowers](https://www.slideshare.net/brendangregg/linux-4x-tracing-tools-using-bpf-superpowers)\n- 2016-11-30: [Introducing gobpf - Using eBPF from Go](https://kinvolk.io/blog/2016/11/introducing-gobpf---using-ebpf-from-go)\n- 2016-11-30: [Linux bcc/BPF tcplife: TCP Lifespans](http://www.brendangregg.com/blog/2016-11-30/linux-bcc-tcplife.html)\n- 2016-10-27: [DTrace for Linux 2016](http://www.brendangregg.com/blog/2016-10-27/dtrace-for-linux-2016.html)\n- 2016-10-21: [Linux 4.9's Efficient BPF-based Profiler](http://www.brendangregg.com/blog/2016-10-21/linux-efficient-profiler.html)\n- 2016-10-15: [Linux bcc tcptop](http://www.brendangregg.com/blog/2016-10-15/linux-bcc-tcptop.html)\n- 2016-10-12: [Linux bcc/BPF Node.js USDT Tracing](http://www.brendangregg.com/blog/2016-10-12/linux-bcc-nodejs-usdt.html)\n- 2016-10-08: [Linux bcc/BPF Run Queue (Scheduler) Latency](http://www.brendangregg.com/blog/2016-10-08/linux-bcc-runqlat.html)\n- 2016-10-06: [Linux bcc ext4 Latency Tracing](http://www.brendangregg.com/blog/2016-10-06/linux-bcc-ext4dist-ext4slower.html)\n- 2016-10-04: [Installing bcc to evaluate BPF and Postgres](http://blog.gregburek.com/2016/10/04/installing-bcc-to-evaluate-bpf-and-postgres)\n- 2016-10-04: [Linux MySQL Slow Query Tracing with bcc/BPF](http://www.brendangregg.com/blog/2016-10-04/linux-bcc-mysqld-qslower.html)\n- 2016-10-01: [Linux bcc Tracing Security Capabilities](http://www.brendangregg.com/blog/2016-10-01/linux-bcc-security-capabilities.html)\n- 2016-09-23: [BCC – Dynamic Tracing Tools for Linux Performance Monitoring, Networking and More](http://www.tecmint.com/bcc-best-linux-performance-monitoring-tools/)\n- 2016-08-22: [BoF - What Can BPF Do For You?](https://events.linuxfoundation.org/sites/events/files/slides/iovisor-lc-bof-2016.pdf)\n- 2016-07-03: [Linux debugging tools I love](https://jvns.ca/blog/2016/07/03/debugging-tools-i-love)\n- 2016-06-14: [Ubuntu Xenial bcc/BPF](http://www.brendangregg.com/blog/2016-06-14/ubuntu-xenial-bcc-bpf.html)\n- 2016-05-26: [Linux BPF/bcc for Oracle Tracing](https://db-blog.web.cern.ch/blog/luca-canali/2016-05-linux-bpfbcc-oracle-tracing)\n- 2016-05-04: [Tracing your TCP IPv4 connections with eBPF and BCC from the Linux kernel JIT-VM to Splunk](https://www.splunk.com/blog/2016/05/04/tracing-your-tcp-ipv4-connections-with-ebpf-and-bcc-from-the-linux-kernel-jit-vm-to-splunk/)\n- 2016-03-31: [Probing the JVM with BPF/BCC](http://blogs.microsoft.co.il/sasha/2016/03/31/probing-the-jvm-with-bpfbcc/)\n- 2016-03-30: [How to turn any syscall into an event: Introducing eBPF Kernel probes](https://blog.yadutaf.fr/2016/03/30/turn-any-syscall-into-event-introducing-ebpf-kernel-probes)\n- 2016-03-30: [USDT Probe Support in BPF/BCC](http://blogs.microsoft.co.il/sasha/2016/03/30/usdt-probe-support-in-bpfbcc)\n- 2016-03-28: [Linux BPF/bcc Road Ahead, March 2016](http://www.brendangregg.com/blog/2016-03-28/linux-bpf-bcc-road-ahead-2016.html)\n- 2016-03-05: [Linux BPF Superpowers](http://www.brendangregg.com/blog/2016-03-05/linux-bpf-superpowers.html)\n- 2016-03-02: [Linux BPF Superpowers](https://www.slideshare.net/brendangregg/linux-bpf-superpowers)\n- 2016-02-14: [Two New eBPF Tools: memleak and argdist](http://blogs.microsoft.co.il/sasha/2016/02/14/two-new-ebpf-tools-memleak-and-argdist/)\n- 2016-02-08: [Linux eBPF/bcc uprobes](http://www.brendangregg.com/blog/2016-02-08/linux-ebpf-bcc-uprobes.html)\n- 2016-02-05: [Who is waking the waker? (Linux chain graph prototype)](http://www.brendangregg.com/blog/2016-02-05/ebpf-chaingraph-prototype.html)\n- 2016-02-01: [Linux Wakeup and Off-Wake Profiling](http://www.brendangregg.com/blog/2016-02-01/linux-wakeup-offwake-profiling.html)\n- 2016-01-20: [Linux eBPF Off-CPU Flame Graph](http://www.brendangregg.com/blog/2016-01-20/ebpf-offcpu-flame-graph.html)\n- 2016-01-18: [Linux eBPF Stack Trace Hack](http://www.brendangregg.com/blog/2016-01-18/ebpf-stack-trace-hack.html)\n- 2015-10-31: [tcpconnect and tcpaccept for Linux (bcc)](http://www.brendangregg.com/blog/2015-10-31/tcpconnect-tcpaccept-bcc.html)\n- 2015-09-22: [bcc: Taming Linux 4.3+ Tracing Superpowers](http://www.brendangregg.com/blog/2015-09-22/bcc-linux-4.3-tracing.html)\n"
        },
        {
          "name": "QUICKSTART.md",
          "type": "blob",
          "size": 0.5732421875,
          "content": "# Quick Start Guide\n\nA Docker container is provided for user to try out [bcc](https://github.com/iovisor/bcc).\n\nFrom your host shell:\n```bash\ndocker run -it --rm \\\n  --privileged \\\n  -v /lib/modules:/lib/modules:ro \\\n  -v /usr/src:/usr/src:ro \\\n  -v /etc/localtime:/etc/localtime:ro \\\n  --workdir /usr/share/bcc/tools \\\n  zlim/bcc\n```\n\nNow, from the container shell, you can try the various pre-installed bcc tools.\n\nFor examples, please refer to the [tutorial](docs/tutorial.md#1-general-performance).\n\nIf you wish to install bcc on your host, please refer to [INSTALL.md](INSTALL.md).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.6328125,
          "content": "![BCC Logo](images/logo2.png)\n# BPF Compiler Collection (BCC)\n\nBCC is a toolkit for creating efficient kernel tracing and manipulation\nprograms, and includes several useful tools and examples. It makes use of\nextended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature\nthat was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1\nand above.\n\neBPF was [described by](https://lkml.org/lkml/2015/4/14/232) Ingo Molnár as:\n\n> One of the more interesting features in this cycle is the ability to attach eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to kprobes. This allows user-defined instrumentation on a live kernel image that can never crash, hang or interfere with the kernel negatively.\n\nBCC makes BPF programs easier to write, with kernel instrumentation in C\n(and includes a C wrapper around LLVM), and front-ends in Python and lua.\nIt is suited for many tasks, including performance analysis and network\ntraffic control.\n\n## Screenshot\n\nThis example traces a disk I/O kernel function, and populates an in-kernel\npower-of-2 histogram of the I/O size. For efficiency, only the histogram\nsummary is returned to user-level.\n\n```Shell\n# ./bitehist.py\nTracing... Hit Ctrl-C to end.\n^C\n     kbytes          : count     distribution\n       0 -> 1        : 3        |                                      |\n       2 -> 3        : 0        |                                      |\n       4 -> 7        : 211      |**********                            |\n       8 -> 15       : 0        |                                      |\n      16 -> 31       : 0        |                                      |\n      32 -> 63       : 0        |                                      |\n      64 -> 127      : 1        |                                      |\n     128 -> 255      : 800      |**************************************|\n```\n\nThe above output shows a bimodal distribution, where the largest mode of\n800 I/O was between 128 and 255 Kbytes in size.\n\nSee the source: [bitehist.py](examples/tracing/bitehist.py). What this traces,\nwhat this stores, and how the data is presented, can be entirely customized.\nThis shows only some of many possible capabilities.\n\n## Installing\n\nSee [INSTALL.md](INSTALL.md) for installation steps on your platform.\n\n## FAQ\n\nSee [FAQ.txt](FAQ.txt) for the most common troubleshoot questions.\n\n## Reference guide\n\nSee [docs/reference_guide.md](docs/reference_guide.md) for the reference guide to the bcc and bcc/BPF APIs.\n\n## Contents\n\nSome of these are single files that contain both C and Python, others have a\npair of .c and .py files, and some are directories of files.\n\n### Tracing\n\n#### Examples\n\n- examples/tracing/[bitehist.py](examples/tracing/bitehist.py): Block I/O size histogram. [Examples](examples/tracing/bitehist_example.txt).\n- examples/tracing/[disksnoop.py](examples/tracing/disksnoop.py): Trace block device I/O latency. [Examples](examples/tracing/disksnoop_example.txt).\n- examples/[hello_world.py](examples/hello_world.py): Prints \"Hello, World!\" for new processes.\n- examples/tracing/[mysqld_query.py](examples/tracing/mysqld_query.py): Trace MySQL server queries using USDT probes. [Examples](examples/tracing/mysqld_query_example.txt).\n- examples/tracing/[nodejs_http_server.py](examples/tracing/nodejs_http_server.py): Trace Node.js HTTP server requests using USDT probes. [Examples](examples/tracing/nodejs_http_server_example.txt).\n- examples/tracing/[stacksnoop](examples/tracing/stacksnoop.py): Trace a kernel function and print all kernel stack traces. [Examples](examples/tracing/stacksnoop_example.txt).\n- tools/[statsnoop](tools/statsnoop.py): Trace stat() syscalls. [Examples](tools/statsnoop_example.txt).\n- examples/tracing/[task_switch.py](examples/tracing/task_switch.py): Count task switches with from and to PIDs.\n- examples/tracing/[tcpv4connect.py](examples/tracing/tcpv4connect.py): Trace TCP IPv4 active connections. [Examples](examples/tracing/tcpv4connect_example.txt).\n- examples/tracing/[trace_fields.py](examples/tracing/trace_fields.py): Simple example of printing fields from traced events.\n- examples/tracing/[undump.py](examples/tracing/undump.py): Dump UNIX socket packets. [Examples](examples/tracing/undump_example.txt)\n- examples/tracing/[urandomread.py](examples/tracing/urandomread.py): A kernel tracepoint example, which traces random:urandom_read. [Examples](examples/tracing/urandomread_example.txt).\n- examples/tracing/[vfsreadlat.py](examples/tracing/vfsreadlat.py) examples/tracing/[vfsreadlat.c](examples/tracing/vfsreadlat.c): VFS read latency distribution. [Examples](examples/tracing/vfsreadlat_example.txt).\n- examples/tracing/[kvm_hypercall.py](examples/tracing/kvm_hypercall.py): Conditional static kernel tracepoints for KVM entry, exit and hypercall [Examples](examples/tracing/kvm_hypercall.txt).\n\n#### Tools\n<center><a href=\"images/bcc_tracing_tools_2019.png\"><img src=\"images/bcc_tracing_tools_2019.png\" border=0 width=700></a></center>\n\n\n- tools/[argdist](tools/argdist.py): Display function parameter values as a histogram or frequency count. [Examples](tools/argdist_example.txt).\n- tools/[bashreadline](tools/bashreadline.py): Print entered bash commands system wide. [Examples](tools/bashreadline_example.txt).\n- tools/[bpflist](tools/bpflist.py): Display processes with active BPF programs and maps. [Examples](tools/bpflist_example.txt).\n- tools/[capable](tools/capable.py): Trace security capability checks. [Examples](tools/capable_example.txt).\n- tools/[compactsnoop](tools/compactsnoop.py): Trace compact zone events with PID and latency. [Examples](tools/compactsnoop_example.txt).\n- tools/[criticalstat](tools/criticalstat.py): Trace and report long atomic critical sections in the kernel. [Examples](tools/criticalstat_example.txt)\n- tools/[deadlock](tools/deadlock.py): Detect potential deadlocks on a running process. [Examples](tools/deadlock_example.txt).\n- tools/[drsnoop](tools/drsnoop.py): Trace direct reclaim events with PID and latency. [Examples](tools/drsnoop_example.txt).\n- tools/[funccount](tools/funccount.py): Count kernel function calls. [Examples](tools/funccount_example.txt).\n- tools/[inject](tools/inject.py): Targeted error injection with call chain and predicates [Examples](tools/inject_example.txt).\n- tools/[klockstat](tools/klockstat.py): Traces kernel mutex lock events and display locks statistics. [Examples](tools/klockstat_example.txt).\n- tools/[opensnoop](tools/opensnoop.py): Trace open() syscalls. [Examples](tools/opensnoop_example.txt).\n- tools/[readahead](tools/readahead.py): Show performance of read-ahead cache [Examples](tools/readahead_example.txt).\n- tools/[reset-trace](tools/reset-trace.sh): Reset the state of tracing. Maintenance tool only. [Examples](tools/reset-trace_example.txt).\n- tools/[stackcount](tools/stackcount.py): Count kernel function calls and their stack traces. [Examples](tools/stackcount_example.txt).\n- tools/[syncsnoop](tools/syncsnoop.py): Trace sync() syscall. [Examples](tools/syncsnoop_example.txt).\n- tools/[threadsnoop](tools/threadsnoop.py): List new thread creation. [Examples](tools/threadsnoop_example.txt).\n- tools/[tplist](tools/tplist.py): Display kernel tracepoints or USDT probes and their formats. [Examples](tools/tplist_example.txt).\n- tools/[trace](tools/trace.py): Trace arbitrary functions, with filters. [Examples](tools/trace_example.txt).\n- tools/[ttysnoop](tools/ttysnoop.py): Watch live output from a tty or pts device. [Examples](tools/ttysnoop_example.txt).\n- tools/[ucalls](tools/lib/ucalls.py): Summarize method calls or Linux syscalls in high-level languages. [Examples](tools/lib/ucalls_example.txt).\n- tools/[uflow](tools/lib/uflow.py): Print a method flow graph in high-level languages. [Examples](tools/lib/uflow_example.txt).\n- tools/[ugc](tools/lib/ugc.py): Trace garbage collection events in high-level languages. [Examples](tools/lib/ugc_example.txt).\n- tools/[uobjnew](tools/lib/uobjnew.py): Summarize object allocation events by object type and number of bytes allocated. [Examples](tools/lib/uobjnew_example.txt).\n- tools/[ustat](tools/lib/ustat.py): Collect events such as GCs, thread creations, object allocations, exceptions and more in high-level languages. [Examples](tools/lib/ustat_example.txt).\n- tools/[uthreads](tools/lib/uthreads.py): Trace thread creation events in Java and raw pthreads. [Examples](tools/lib/uthreads_example.txt).\n\n##### Memory and Process Tools\n\n- tools/[execsnoop](tools/execsnoop.py): Trace new processes via exec() syscalls. [Examples](tools/execsnoop_example.txt).\n- tools/[exitsnoop](tools/exitsnoop.py): Trace process termination (exit and fatal signals). [Examples](tools/exitsnoop_example.txt).\n- tools/[killsnoop](tools/killsnoop.py): Trace signals issued by the kill() syscall. [Examples](tools/killsnoop_example.txt).\n- tools/[kvmexit](tools/kvmexit.py): Display the exit_reason and its statistics of each vm exit. [Examples](tools/kvmexit_example.txt).\n- tools/[memleak](tools/memleak.py): Display outstanding memory allocations to find memory leaks. [Examples](tools/memleak_example.txt).\n- tools/[numasched](tools/numasched.py): Track the migration of processes between NUMAs. [Examples](tools/numasched_example.txt).\n- tools/[oomkill](tools/oomkill.py): Trace the out-of-memory (OOM) killer. [Examples](tools/oomkill_example.txt).\n- tools/[pidpersec](tools/pidpersec.py): Count new processes (via fork). [Examples](tools/pidpersec_example.txt).\n- tools/[rdmaucma](tools/rdmaucma.py): Trace RDMA Userspace Connection Manager Access events. [Examples](tools/rdmaucma_example.txt).\n- tools/[shmsnoop](tools/shmsnoop.py): Trace System V shared memory syscalls. [Examples](tools/shmsnoop_example.txt).\n- tools/[slabratetop](tools/slabratetop.py): Kernel SLAB/SLUB memory cache allocation rate top. [Examples](tools/slabratetop_example.txt).\n\n##### Performance and Time Tools\n\n- tools/[dbslower](tools/dbslower.py): Trace MySQL/PostgreSQL queries slower than a threshold. [Examples](tools/dbslower_example.txt).\n- tools/[dbstat](tools/dbstat.py): Summarize MySQL/PostgreSQL query latency as a histogram. [Examples](tools/dbstat_example.txt).\n- tools/[funcinterval](tools/funcinterval.py): Time interval between the same function as a histogram. [Examples](tools/funcinterval_example.txt).\n- tools/[funclatency](tools/funclatency.py): Time functions and show their latency distribution. [Examples](tools/funclatency_example.txt).\n- tools/[funcslower](tools/funcslower.py): Trace slow kernel or user function calls. [Examples](tools/funcslower_example.txt).\n- tools/[hardirqs](tools/hardirqs.py):  Measure hard IRQ (hard interrupt) event time. [Examples](tools/hardirqs_example.txt).\n- tools/[mysqld_qslower](tools/mysqld_qslower.py): Trace MySQL server queries slower than a threshold. [Examples](tools/mysqld_qslower_example.txt).\n- tools/[ppchcalls](tools/ppchcalls.py): Summarize ppc hcall counts and latencies. [Examples](tools/ppchcalls_example.txt).\n- tools/[softirqs](tools/softirqs.py):  Measure soft IRQ (soft interrupt) event time. [Examples](tools/softirqs_example.txt).\n- tools/[syscount](tools/syscount.py): Summarize syscall counts and latencies. [Examples](tools/syscount_example.txt).\n\n##### CPU and Scheduler Tools\n\n- tools/[cpudist](tools/cpudist.py): Summarize on- and off-CPU time per task as a histogram. [Examples](tools/cpudist_example.txt)\n- tools/[cpuunclaimed](tools/cpuunclaimed.py): Sample CPU run queues and calculate unclaimed idle CPU. [Examples](tools/cpuunclaimed_example.txt)\n- tools/[llcstat](tools/llcstat.py): Summarize CPU cache references and misses by process. [Examples](tools/llcstat_example.txt).\n- tools/[offcputime](tools/offcputime.py): Summarize off-CPU time by kernel stack trace. [Examples](tools/offcputime_example.txt).\n- tools/[offwaketime](tools/offwaketime.py): Summarize blocked time by kernel off-CPU stack and waker stack. [Examples](tools/offwaketime_example.txt).\n- tools/[profile](tools/profile.py): Profile CPU usage by sampling stack traces at a timed interval. [Examples](tools/profile_example.txt).\n- tools/[runqlat](tools/runqlat.py): Run queue (scheduler) latency as a histogram. [Examples](tools/runqlat_example.txt).\n- tools/[runqlen](tools/runqlen.py): Run queue length as a histogram. [Examples](tools/runqlen_example.txt).\n- tools/[runqslower](tools/runqslower.py): Trace long process scheduling delays. [Examples](tools/runqslower_example.txt).\n- tools/[wakeuptime](tools/wakeuptime.py): Summarize sleep to wakeup time by waker kernel stack. [Examples](tools/wakeuptime_example.txt).\n- tools/[wqlat](tools/wqlat.py): Summarize work waiting latency on workqueue. [Examples](tools/wqlat_example.txt).\n\n##### Network and Sockets Tools\n\n- tools/[gethostlatency](tools/gethostlatency.py): Show latency for getaddrinfo/gethostbyname[2] calls. [Examples](tools/gethostlatency_example.txt).\n- tools/[bindsnoop](tools/bindsnoop.py): Trace IPv4 and IPv6 bind() system calls (bind()). [Examples](tools/bindsnoop_example.txt).\n- tools/[netqtop](tools/netqtop.py) tools/[netqtop.c](tools/netqtop.c): Trace and display packets distribution on NIC queues. [Examples](tools/netqtop_example.txt).\n- tools/[sofdsnoop](tools/sofdsnoop.py): Trace FDs passed through unix sockets. [Examples](tools/sofdsnoop_example.txt).\n- tools/[solisten](tools/solisten.py): Trace TCP socket listen. [Examples](tools/solisten_example.txt).\n- tools/[sslsniff](tools/sslsniff.py): Sniff OpenSSL written and readed data. [Examples](tools/sslsniff_example.txt).\n- tools/[tcpaccept](tools/tcpaccept.py): Trace TCP passive connections (accept()). [Examples](tools/tcpaccept_example.txt).\n- tools/[tcpconnect](tools/tcpconnect.py): Trace TCP active connections (connect()). [Examples](tools/tcpconnect_example.txt).\n- tools/[tcpconnlat](tools/tcpconnlat.py): Trace TCP active connection latency (connect()). [Examples](tools/tcpconnlat_example.txt).\n- tools/[tcpdrop](tools/tcpdrop.py): Trace kernel-based TCP packet drops with details. [Examples](tools/tcpdrop_example.txt).\n- tools/[tcplife](tools/tcplife.py): Trace TCP sessions and summarize lifespan. [Examples](tools/tcplife_example.txt).\n- tools/[tcpretrans](tools/tcpretrans.py): Trace TCP retransmits and TLPs. [Examples](tools/tcpretrans_example.txt).\n- tools/[tcprtt](tools/tcprtt.py): Trace TCP round trip time. [Examples](tools/tcprtt_example.txt).\n- tools/[tcpstates](tools/tcpstates.py): Trace TCP session state changes with durations. [Examples](tools/tcpstates_example.txt).\n- tools/[tcpsubnet](tools/tcpsubnet.py): Summarize and aggregate TCP send by subnet. [Examples](tools/tcpsubnet_example.txt).\n- tools/[tcpsynbl](tools/tcpsynbl.py): Show TCP SYN backlog. [Examples](tools/tcpsynbl_example.txt).\n- tools/[tcptop](tools/tcptop.py): Summarize TCP send/recv throughput by host. Top for TCP. [Examples](tools/tcptop_example.txt).\n- tools/[tcptracer](tools/tcptracer.py): Trace TCP established connections (connect(), accept(), close()). [Examples](tools/tcptracer_example.txt).\n- tools/[tcpcong](tools/tcpcong.py): Trace TCP socket congestion control status duration. [Examples](tools/tcpcong_example.txt).\n\n##### Storage and Filesystems Tools\n\n- tools/[bitesize](tools/bitesize.py): Show per process I/O size histogram. [Examples](tools/bitesize_example.txt).\n- tools/[cachestat](tools/cachestat.py): Trace page cache hit/miss ratio. [Examples](tools/cachestat_example.txt).\n- tools/[cachetop](tools/cachetop.py): Trace page cache hit/miss ratio by processes. [Examples](tools/cachetop_example.txt).\n- tools/[dcsnoop](tools/dcsnoop.py): Trace directory entry cache (dcache) lookups. [Examples](tools/dcsnoop_example.txt).\n- tools/[dcstat](tools/dcstat.py): Directory entry cache (dcache) stats. [Examples](tools/dcstat_example.txt).\n- tools/[biolatency](tools/biolatency.py): Summarize block device I/O latency as a histogram. [Examples](tools/biolatency_example.txt).\n- tools/[biotop](tools/biotop.py): Top for disks: Summarize block device I/O by process. [Examples](tools/biotop_example.txt).\n- tools/[biopattern](tools/biopattern.py): Identify random/sequential disk access patterns. [Examples](tools/biopattern_example.txt).\n- tools/[biosnoop](tools/biosnoop.py): Trace block device I/O with PID and latency. [Examples](tools/biosnoop_example.txt).\n- tools/[dirtop](tools/dirtop.py): File reads and writes by directory. Top for directories. [Examples](tools/dirtop_example.txt).\n- tools/[filelife](tools/filelife.py): Trace the lifespan of short-lived files. [Examples](tools/filelife_example.txt).\n- tools/[filegone](tools/filegone.py): Trace why file gone (deleted or renamed). [Examples](tools/filegone_example.txt).\n- tools/[fileslower](tools/fileslower.py): Trace slow synchronous file reads and writes. [Examples](tools/fileslower_example.txt).\n- tools/[filetop](tools/filetop.py): File reads and writes by filename and process. Top for files. [Examples](tools/filetop_example.txt).\n- tools/[mdflush](tools/mdflush.py): Trace md flush events. [Examples](tools/mdflush_example.txt).\n- tools/[mountsnoop](tools/mountsnoop.py): Trace mount and umount syscalls system-wide. [Examples](tools/mountsnoop_example.txt).\n- tools/[virtiostat](tools/virtiostat.py): Show VIRTIO device IO statistics. [Examples](tools/virtiostat_example.txt).\n\n###### Filesystems Tools\n\n- tools/[btrfsdist](tools/btrfsdist.py): Summarize btrfs operation latency distribution as a histogram. [Examples](tools/btrfsdist_example.txt).\n- tools/[btrfsslower](tools/btrfsslower.py): Trace slow btrfs operations. [Examples](tools/btrfsslower_example.txt).\n- tools/[ext4dist](tools/ext4dist.py): Summarize ext4 operation latency distribution as a histogram. [Examples](tools/ext4dist_example.txt).\n- tools/[ext4slower](tools/ext4slower.py): Trace slow ext4 operations. [Examples](tools/ext4slower_example.txt).\n- tools/[nfsslower](tools/nfsslower.py): Trace slow NFS operations. [Examples](tools/nfsslower_example.txt).\n- tools/[nfsdist](tools/nfsdist.py): Summarize NFS operation latency distribution as a histogram. [Examples](tools/nfsdist_example.txt).\n- tools/[vfscount](tools/vfscount.py): Count VFS calls. [Examples](tools/vfscount_example.txt).\n- tools/[vfsstat](tools/vfsstat.py): Count some VFS calls, with column output. [Examples](tools/vfsstat_example.txt).\n- tools/[xfsdist](tools/xfsdist.py): Summarize XFS operation latency distribution as a histogram. [Examples](tools/xfsdist_example.txt).\n- tools/[xfsslower](tools/xfsslower.py): Trace slow XFS operations. [Examples](tools/xfsslower_example.txt).\n- tools/[zfsdist](tools/zfsdist.py): Summarize ZFS operation latency distribution as a histogram. [Examples](tools/zfsdist_example.txt).\n- tools/[zfsslower](tools/zfsslower.py): Trace slow ZFS operations. [Examples](tools/zfsslower_example.txt).\n\n### Networking\n\nExamples:\n\n- examples/networking/[distributed_bridge/](examples/networking/distributed_bridge): Distributed bridge example.\n- examples/networking/[http_filter/](examples/networking/http_filter): Simple HTTP filter example.\n- examples/networking/[simple_tc.py](examples/networking/simple_tc.py): Simple traffic control example.\n- examples/networking/[simulation.py](examples/networking/simulation.py): Simulation helper.\n- examples/networking/neighbor_sharing/[tc_neighbor_sharing.py](examples/networking/neighbor_sharing/tc_neighbor_sharing.py) examples/networking/neighbor_sharing/[tc_neighbor_sharing.c](examples/networking/neighbor_sharing/tc_neighbor_sharing.c): Per-IP classification and rate limiting.\n- examples/networking/[tunnel_monitor/](examples/networking/tunnel_monitor): Efficiently monitor traffic flows.\n- examples/networking/vlan_learning/[vlan_learning.py](examples/networking/vlan_learning/vlan_learning.py) examples/[vlan_learning.c](examples/networking/vlan_learning/vlan_learning.c): Demux Ethernet traffic into worker veth+namespaces.\n\n### BPF Introspection\n\nTools that help to introspect BPF programs.\n\n- introspection/[bps.c](introspection/bps.c): List all BPF programs loaded into the kernel. 'ps' for BPF programs. [Examples](introspection/bps_example.txt).\n\n## Motivation\n\nBPF guarantees that the programs loaded into the kernel cannot crash, and\ncannot run forever, but yet BPF is general purpose enough to perform many\narbitrary types of computation. Currently, it is possible to write a program in\nC that will compile into a valid BPF program, yet it is vastly easier to\nwrite a C program that will compile into invalid BPF (C is like that). The user\nwon't know until trying to run the program whether it was valid or not.\n\nWith a BPF-specific frontend, one should be able to write in a language and\nreceive feedback from the compiler on the validity as it pertains to a BPF\nbackend. This toolkit aims to provide a frontend that can only create valid BPF\nprograms while still harnessing its full flexibility.\n\nFurthermore, current integrations with BPF have a kludgy workflow, sometimes\ninvolving compiling directly in a linux kernel source tree. This toolchain aims\nto minimize the time that a developer spends getting BPF compiled, and instead\nfocus on the applications that can be written and the problems that can be\nsolved with BPF.\n\nThe features of this toolkit include:\n* End-to-end BPF workflow in a shared library\n  * A modified C language for BPF backends\n  * Integration with llvm-bpf backend for JIT\n  * Dynamic (un)loading of JITed programs\n  * Support for BPF kernel hooks: socket filters, tc classifiers,\n      tc actions, and kprobes\n* Bindings for Python\n* Examples for socket filters, tc classifiers, and kprobes\n* Self-contained tools for tracing a running system\n\nIn the future, more bindings besides python will likely be supported. Feel free\nto add support for the language of your choice and send a pull request!\n\n## Tutorials\n\n- [docs/tutorial.md](docs/tutorial.md): Using bcc tools to solve performance, troubleshooting, and networking issues.\n- [docs/tutorial_bcc_python_developer.md](docs/tutorial_bcc_python_developer.md): Developing new bcc programs using the Python interface.\n\n### Networking\n\nAt Red Hat Summit 2015, BCC was presented as part of a [session on BPF](http://www.devnation.org/#7784f1f7513e8542e4db519e79ff5eec).\nA multi-host vxlan environment is simulated and a BPF program used to monitor\none of the physical interfaces. The BPF program keeps statistics on the inner\nand outer IP addresses traversing the interface, and the userspace component\nturns those statistics into a graph showing the traffic distribution at\nmultiple granularities. See the code [here](examples/networking/tunnel_monitor).\n\n## Contributing\n\nAlready pumped up to commit some code? Here are some resources to join the\ndiscussions in the [IOVisor](https://www.iovisor.org/) community and see\nwhat you want to work on.\n\n* _Mailing List:_ https://lists.iovisor.org/mailman/listinfo/iovisor-dev\n* _IRC:_ #iovisor at irc.oftc.net\n* _BCC Issue Tracker:_ [Github Issues](https://github.com/iovisor/bcc/issues)\n* _A guide for contributing scripts:_ [CONTRIBUTING-SCRIPTS.md](CONTRIBUTING-SCRIPTS.md)\n\n## External links\n\nLooking for more information on BCC and how it's being used? You can find links to other BCC content on the web in [LINKS.md](LINKS.md).\n"
        },
        {
          "name": "SPECS",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "introspection",
          "type": "tree",
          "content": null
        },
        {
          "name": "libbpf-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}