{
  "metadata": {
    "timestamp": 1736710404712,
    "page": 29,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ish-app/ish",
      "stars": 17438,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0849609375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2294921875,
          "content": "build/\nxcuserdata/\n.floo\n\ncross-*.txt\nroot.tar.gz\n\nnode_modules\napp/xtermjs/xterm-dist\napp/xtermjs/.cache\n\nsubprojects/\n!subprojects/*.wrap\n\nfastlane/report.xml\nfastlane/Preview.html\nfastlane/screenshots\nfastlane/test_output\n\ne2e_out/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.294921875,
          "content": "[submodule \"libapps\"]\n\tpath = deps/libapps\n\turl = https://github.com/ish-app/libapps\n[submodule \"deps/libarchive\"]\n\tpath = deps/libarchive\n\turl = https://github.com/libarchive/libarchive\n[submodule \"deps/linux\"]\n\tpath = deps/linux\n\turl = https://github.com/ish-app/linux\n\tupdate = none\n\tshallow = true\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.07421875,
          "content": "source \"https://rubygems.org\"\ngem \"fastlane\", \"~> 2\"\ngem \"dotenv\"\ngem \"pry\"\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 5.95703125,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    CFPropertyList (3.0.6)\n      rexml\n    addressable (2.8.4)\n      public_suffix (>= 2.0.2, < 6.0)\n    artifactory (3.0.15)\n    atomos (0.1.3)\n    aws-eventstream (1.2.0)\n    aws-partitions (1.752.0)\n    aws-sdk-core (3.171.0)\n      aws-eventstream (~> 1, >= 1.0.2)\n      aws-partitions (~> 1, >= 1.651.0)\n      aws-sigv4 (~> 1.5)\n      jmespath (~> 1, >= 1.6.1)\n    aws-sdk-kms (1.63.0)\n      aws-sdk-core (~> 3, >= 3.165.0)\n      aws-sigv4 (~> 1.1)\n    aws-sdk-s3 (1.121.0)\n      aws-sdk-core (~> 3, >= 3.165.0)\n      aws-sdk-kms (~> 1)\n      aws-sigv4 (~> 1.4)\n    aws-sigv4 (1.5.2)\n      aws-eventstream (~> 1, >= 1.0.2)\n    babosa (1.0.4)\n    claide (1.1.0)\n    coderay (1.1.3)\n    colored (1.2)\n    colored2 (3.1.2)\n    commander (4.6.0)\n      highline (~> 2.0.0)\n    declarative (0.0.20)\n    digest-crc (0.6.4)\n      rake (>= 12.0.0, < 14.0.0)\n    domain_name (0.5.20190701)\n      unf (>= 0.0.5, < 1.0.0)\n    dotenv (2.8.1)\n    emoji_regex (3.2.3)\n    excon (0.99.0)\n    faraday (1.10.3)\n      faraday-em_http (~> 1.0)\n      faraday-em_synchrony (~> 1.0)\n      faraday-excon (~> 1.1)\n      faraday-httpclient (~> 1.0)\n      faraday-multipart (~> 1.0)\n      faraday-net_http (~> 1.0)\n      faraday-net_http_persistent (~> 1.0)\n      faraday-patron (~> 1.0)\n      faraday-rack (~> 1.0)\n      faraday-retry (~> 1.0)\n      ruby2_keywords (>= 0.0.4)\n    faraday-cookie_jar (0.0.7)\n      faraday (>= 0.8.0)\n      http-cookie (~> 1.0.0)\n    faraday-em_http (1.0.0)\n    faraday-em_synchrony (1.0.0)\n    faraday-excon (1.1.0)\n    faraday-httpclient (1.0.1)\n    faraday-multipart (1.0.4)\n      multipart-post (~> 2)\n    faraday-net_http (1.0.1)\n    faraday-net_http_persistent (1.2.0)\n    faraday-patron (1.0.0)\n    faraday-rack (1.0.0)\n    faraday-retry (1.0.3)\n    faraday_middleware (1.2.0)\n      faraday (~> 1.0)\n    fastimage (2.2.6)\n    fastlane (2.212.2)\n      CFPropertyList (>= 2.3, < 4.0.0)\n      addressable (>= 2.8, < 3.0.0)\n      artifactory (~> 3.0)\n      aws-sdk-s3 (~> 1.0)\n      babosa (>= 1.0.3, < 2.0.0)\n      bundler (>= 1.12.0, < 3.0.0)\n      colored\n      commander (~> 4.6)\n      dotenv (>= 2.1.1, < 3.0.0)\n      emoji_regex (>= 0.1, < 4.0)\n      excon (>= 0.71.0, < 1.0.0)\n      faraday (~> 1.0)\n      faraday-cookie_jar (~> 0.0.6)\n      faraday_middleware (~> 1.0)\n      fastimage (>= 2.1.0, < 3.0.0)\n      gh_inspector (>= 1.1.2, < 2.0.0)\n      google-apis-androidpublisher_v3 (~> 0.3)\n      google-apis-playcustomapp_v1 (~> 0.1)\n      google-cloud-storage (~> 1.31)\n      highline (~> 2.0)\n      json (< 3.0.0)\n      jwt (>= 2.1.0, < 3)\n      mini_magick (>= 4.9.4, < 5.0.0)\n      multipart-post (~> 2.0.0)\n      naturally (~> 2.2)\n      optparse (~> 0.1.1)\n      plist (>= 3.1.0, < 4.0.0)\n      rubyzip (>= 2.0.0, < 3.0.0)\n      security (= 0.1.3)\n      simctl (~> 1.6.3)\n      terminal-notifier (>= 2.0.0, < 3.0.0)\n      terminal-table (>= 1.4.5, < 2.0.0)\n      tty-screen (>= 0.6.3, < 1.0.0)\n      tty-spinner (>= 0.8.0, < 1.0.0)\n      word_wrap (~> 1.0.0)\n      xcodeproj (>= 1.13.0, < 2.0.0)\n      xcpretty (~> 0.3.0)\n      xcpretty-travis-formatter (>= 0.0.3)\n    gh_inspector (1.1.3)\n    google-apis-androidpublisher_v3 (0.39.0)\n      google-apis-core (>= 0.11.0, < 2.a)\n    google-apis-core (0.11.0)\n      addressable (~> 2.5, >= 2.5.1)\n      googleauth (>= 0.16.2, < 2.a)\n      httpclient (>= 2.8.1, < 3.a)\n      mini_mime (~> 1.0)\n      representable (~> 3.0)\n      retriable (>= 2.0, < 4.a)\n      rexml\n      webrick\n    google-apis-iamcredentials_v1 (0.17.0)\n      google-apis-core (>= 0.11.0, < 2.a)\n    google-apis-playcustomapp_v1 (0.13.0)\n      google-apis-core (>= 0.11.0, < 2.a)\n    google-apis-storage_v1 (0.19.0)\n      google-apis-core (>= 0.9.0, < 2.a)\n    google-cloud-core (1.6.0)\n      google-cloud-env (~> 1.0)\n      google-cloud-errors (~> 1.0)\n    google-cloud-env (1.6.0)\n      faraday (>= 0.17.3, < 3.0)\n    google-cloud-errors (1.3.1)\n    google-cloud-storage (1.44.0)\n      addressable (~> 2.8)\n      digest-crc (~> 0.4)\n      google-apis-iamcredentials_v1 (~> 0.1)\n      google-apis-storage_v1 (~> 0.19.0)\n      google-cloud-core (~> 1.6)\n      googleauth (>= 0.16.2, < 2.a)\n      mini_mime (~> 1.0)\n    googleauth (1.5.2)\n      faraday (>= 0.17.3, < 3.a)\n      jwt (>= 1.4, < 3.0)\n      memoist (~> 0.16)\n      multi_json (~> 1.11)\n      os (>= 0.9, < 2.0)\n      signet (>= 0.16, < 2.a)\n    highline (2.0.3)\n    http-cookie (1.0.5)\n      domain_name (~> 0.5)\n    httpclient (2.8.3)\n    jmespath (1.6.2)\n    json (2.6.3)\n    jwt (2.7.0)\n    memoist (0.16.2)\n    method_source (1.0.0)\n    mini_magick (4.12.0)\n    mini_mime (1.1.2)\n    multi_json (1.15.0)\n    multipart-post (2.0.0)\n    nanaimo (0.3.0)\n    naturally (2.2.1)\n    optparse (0.1.1)\n    os (1.1.4)\n    plist (3.7.0)\n    pry (0.14.1)\n      coderay (~> 1.1)\n      method_source (~> 1.0)\n    public_suffix (5.0.1)\n    rake (13.0.6)\n    representable (3.2.0)\n      declarative (< 0.1.0)\n      trailblazer-option (>= 0.1.1, < 0.2.0)\n      uber (< 0.2.0)\n    retriable (3.1.2)\n    rexml (3.2.5)\n    rouge (2.0.7)\n    ruby2_keywords (0.0.5)\n    rubyzip (2.3.2)\n    security (0.1.3)\n    signet (0.17.0)\n      addressable (~> 2.8)\n      faraday (>= 0.17.5, < 3.a)\n      jwt (>= 1.5, < 3.0)\n      multi_json (~> 1.10)\n    simctl (1.6.10)\n      CFPropertyList\n      naturally\n    terminal-notifier (2.0.0)\n    terminal-table (1.8.0)\n      unicode-display_width (~> 1.1, >= 1.1.1)\n    trailblazer-option (0.1.2)\n    tty-cursor (0.7.1)\n    tty-screen (0.8.1)\n    tty-spinner (0.9.3)\n      tty-cursor (~> 0.7)\n    uber (0.1.0)\n    unf (0.1.4)\n      unf_ext\n    unf_ext (0.0.8.2)\n    unicode-display_width (1.8.0)\n    webrick (1.8.1)\n    word_wrap (1.0.0)\n    xcodeproj (1.22.0)\n      CFPropertyList (>= 2.3.3, < 4.0)\n      atomos (~> 0.1.3)\n      claide (>= 1.0.2, < 2.0)\n      colored2 (~> 3.1)\n      nanaimo (~> 0.3.0)\n      rexml (~> 3.2.4)\n    xcpretty (0.3.0)\n      rouge (~> 2.0.7)\n    xcpretty-travis-formatter (1.0.1)\n      xcpretty (~> 0.2, >= 0.0.7)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  dotenv\n  fastlane (~> 2)\n  pry\n\nBUNDLED WITH\n   2.2.15\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.359375,
          "content": "<!--\nIf you're reporting a crash, please include a crash dump. You can find them in Settings -> Privacy -> Analytics -> Analytics Data on iOS 12, or Settings -> Privacy -> Diagnostics and Usage on iOS 11.\nIf this is a \"Bad system call\", \"Illegal instruction\", or \"Segmentation fault\", run `dmesg` to get a dump of the log messages and include the relevant output.\n-->\n"
        },
        {
          "name": "LICENSE.IOS",
          "type": "blob",
          "size": 0.763671875,
          "content": "The iSH developers are aware that the terms of service that apply to\napps distributed via Apple's App Store services may conflict with\nrights granted under the iSH license, the GNU General Public License,\nversion 2 or 3. The copyright holders of the iSH app do not wish this\nconflict to prevent the otherwise-compliant distribution of derived\napps via the App Store. Therefore, we have committed not to pursue\nany license violation that results solely from the conflict between\nthe GNU GPLv2 or v3 and the Apple App Store terms of service. In other\nwords, as long as you comply with the GPL in all other respects,\nincluding its requirements to provide users with source code and the\ntext of the license, we will not object to your distribution of the\niSH app through the App Store.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.6904296875,
          "content": "iSH is licensed under the [GPLv3][]. The additional terms in LICENSE.IOS also apply.\n\nContributions made after commit 0e3a4144f93135c4fd618c8397d2cfd87194f69f are\nadditionally licensed under the [GPLv2][]. This is intended to allow linking\nwith GPLv2 licensed projects such as Linux and QEMU.\n\nThe following authors have agreed to relicense their past contributions under GPLv2:\n- Theodore Dubois <tblodt@icloud.com>\n- Saagar Jha <saagar@saagarjha.com>\n- Christoffer Tønnessen <christoffertonnessen@icloud.com> <christoffer.tonnessen@gmail.com>\n- Philipp Wallisch <philipp.wallisch@inode.at>\n- Ed Luff <beartechtalks@gmail.com>\n- David Southgate <d@davidsouthgate.co.uk>\n- Charlie Melbye <charles.melbye@gmail.com>\n- David <0b101@users.noreply.github.com>\n- [as@irc](https://gist.github.com/tbodt/45ccbea8d3c095258d63f611654f05b4)\n- asdfugil (name was \"Assfugil\" when last contributed) <towinchenmi@gmail.com> <42699250+Assfugil@users.noreply.github.com>\n- AngeloHYang <38714377+AngeloHYang@users.noreply.github.com>\n- Matthew Merrill <mattmerr47@gmail.com>\n- Siddharth Dushantha <siddharth.dushantha@gmail.com>\n- Lorenzo De Linares <lorenzo.linares@icloud.com>\n- Christopher Albert <albert@alumni.tugraz.at>\n- Stephen Leaf <stephenaleaf@gmail.com>\n- Noah Peeters <noah@noahpeeters.de>\n- Alexis Marquis <alexis@marquis.me>\n- Brian Almeida <bma@thunderkeys.net>\n- Viktor Oreshkin <imselfish@stek29.rocks>\n- Ryan Hileman <lunixbochs@gmail.com>\n- Christoforos Charalambous <chrischaralambous14@gmail.com>\n- Kenta Kubo <kabuto669@icloud.com>\n- Zhuowei Zhang\n- never_released <24752637+woachk@users.noreply.github.com>\n\n[GPLv3]: https://www.gnu.org/licenses/gpl-3.0.html\n[GPLv2]: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2626953125,
          "content": "# [iSH](https://ish.app)\n\n[![Build Status](https://github.com/ish-app/ish/actions/workflows/ci.yml/badge.svg)](https://github.com/ish-app/ish/actions)\n[![goto counter](https://img.shields.io/github/search/ish-app/ish/goto.svg)](https://github.com/ish-app/ish/search?q=goto)\n[![fuck counter](https://img.shields.io/github/search/ish-app/ish/fuck.svg)](https://github.com/ish-app/ish/search?q=fuck)\n\n<p align=\"center\">\n<a href=\"https://ish.app\">\n<img src=\"https://ish.app/assets/github-readme.png\">\n</a>\n</p>\n\nA project to get a Linux shell running on iOS, using usermode x86 emulation and syscall translation.\n\nFor the current status of the project, check the issues tab, and the commit logs.\n\n- [App Store page](https://apps.apple.com/us/app/ish-shell/id1436902243)\n- [TestFlight beta](https://testflight.apple.com/join/97i7KM8O)\n- [Discord server](https://discord.gg/HFAXj44)\n- [Wiki with help and tutorials](https://github.com/ish-app/ish/wiki)\n- [README中文](https://github.com/ish-app/ish/blob/master/README_ZH.md) (如若未能保持最新，请提交PR以更新)\n\n# Hacking\n\nThis project has a git submodule, make sure to clone with `--recurse-submodules` or run `git submodule update --init` after cloning.\n\nYou'll need these things to build the project:\n\n - Python 3\n   + Meson (`pip3 install meson`)\n - Ninja\n - Clang and LLD (on mac, `brew install llvm`, on linux, `sudo apt install clang lld` or `sudo pacman -S clang lld` or whatever)\n - sqlite3 (this is so common it may already be installed on linux and is definitely already installed on mac. if not, do something like `sudo apt install libsqlite3-dev`)\n - libarchive (`brew install libarchive`, `sudo port install libarchive`, `sudo apt install libarchive-dev`) TODO: bundle this dependency\n\n## Build for iOS\n\nOpen the project in Xcode, open iSH.xcconfig, and change `ROOT_BUNDLE_IDENTIFIER` to something unique. You'll also need to update the development team ID in the project (not target!) build settings. Then click Run. There are scripts that should do everything else automatically. If you run into any problems, open an issue and I'll try to help.\n\n## Build command line tool for testing\n\nTo set up your environment, cd to the project and run `meson build` to create a build directory in `build`. Then cd to the build directory and run `ninja`.\n\nTo set up a self-contained Alpine linux filesystem, download the Alpine minirootfs tarball for i386 from the [Alpine website](https://alpinelinux.org/downloads/) and run `./tools/fakefsify`, with the minirootfs tarball as the first argument and the name of the output directory as the second argument. Then you can run things inside the Alpine filesystem with `./ish -f alpine /bin/sh`, assuming the output directory is called `alpine`. If `tools/fakefsify` doesn't exist for you in your build directory, that might be because it couldn't find libarchive on your system (see above for ways to install it.)\n\nYou can replace `ish` with `tools/ptraceomatic` to run the program in a real process and single step and compare the registers at each step. I use it for debugging. Requires 64-bit Linux 4.11 or later.\n\n## Logging\n\niSH has several logging channels which can be enabled at build time. By default, all of them are disabled. To enable them:\n\n- In Xcode: Set the `ISH_LOG` setting in iSH.xcconfig to a space-separated list of log channels.\n- With Meson (command line tool for testing): Run `meson configure -Dlog=\"<space-separated list of log channels>\"`.\n\nAvailable channels:\n\n- `strace`: The most useful channel, logs the parameters and return value of almost every system call.\n- `instr`: Logs every instruction executed by the emulator. This slows things down a lot.\n- `verbose`: Debug logs that don't fit into another category.\n- Grep for `DEFAULT_CHANNEL` to see if more log channels have been added since this list was updated.\n\n# A note on the interpreter\n\nPossibly the most interesting thing I wrote as part of iSH is the interpreter. It's not quite a JIT since it doesn't target machine code. Instead it generates an array of pointers to functions called gadgets, and each gadget ends with a tailcall to the next function; like the threaded code technique used by some Forth interpreters. The result is a speedup of roughly 3-5x compared to emulation using a simpler switch dispatch.\n\nUnfortunately, I made the decision to write nearly all of the gadgets in assembly language. This was probably a good decision with regards to performance (though I'll never know for sure), but a horrible decision with regards to readability, maintainability, and my sanity. The amount of bullshit I've had to put up with from the compiler/assembler/linker is insane. It's like there's a demon in there that makes sure my code is sufficiently deformed, and if not, makes up stupid reasons why it shouldn't compile. In order to stay sane while writing this code, I've had to ignore best practices in code structure and naming. You'll find macros and variables with such descriptive names as `ss` and `s` and `a`. Assembler macros nested beyond belief. And to top it off, there are almost no comments.\n\nSo a warning: Long-term exposure to this code may cause loss of sanity, nightmares about GAS macros and linker errors, or any number of other debilitating side effects. This code is known to the State of California to cause cancer, birth defects, and reproductive harm.\n"
        },
        {
          "name": "README_JP.md",
          "type": "blob",
          "size": 6.826171875,
          "content": "# [iSH](https://ish.app)\n\n[![Build Status](https://github.com/ish-app/ish/actions/workflows/ci.yml/badge.svg)](https://github.com/ish-app/ish/actions)\n[![goto counter](https://img.shields.io/github/search/ish-app/ish/goto.svg)](https://github.com/ish-app/ish/search?q=goto)\n[![fuck counter](https://img.shields.io/github/search/ish-app/ish/fuck.svg)](https://github.com/ish-app/ish/search?q=fuck)\n\n<p align=\"center\">\n<a href=\"https://ish.app\">\n<img src=\"https://ish.app/assets/github-readme.png\">\n</a>\n</p>\n\niSHは、ユーザーモードのx86エミュレーションとシステムコールの翻訳を使用して、iOS上でLinuxシェルを実行するプロジェクトです。\n\nプロジェクトの現状については、issueタブとコミットログを確認してください。\n\n- [App Storeページ](https://apps.apple.com/us/app/ish-shell/id1436902243)\n- [TestFlightベータ](https://testflight.apple.com/join/97i7KM8O)\n- [Discordサーバー](https://discord.gg/HFAXj44)\n- [ヘルプとチュートリアルのWiki](https://github.com/ish-app/ish/wiki)\n\n# ハッキング\n\nこのプロジェクトにはgitサブモジュールがあります。`--recurse-submodules`を使用してクローンするか、クローン後に`git submodule update --init`を実行してください。\n\nプロジェクトをビルドするには、以下のものが必要です：\n\n - Python 3\n   + Meson (`pip3 install meson`)\n - Ninja\n - ClangとLLD（macでは`brew install llvm`、linuxでは`sudo apt install clang lld`または`sudo pacman -S clang lld`など）\n - sqlite3（これは非常に一般的で、linuxではすでにインストールされているかもしれませんし、macでは確実にインストールされています。もしインストールされていない場合は、`sudo apt install libsqlite3-dev`などを実行してください）\n - libarchive（`brew install libarchive`、`sudo port install libarchive`、`sudo apt install libarchive-dev`など）\n\n## iOS用にビルドする\n\nプロジェクトをXcodeで開き、iSH.xcconfigを開いて、`ROOT_BUNDLE_IDENTIFIER`を一意の値に変更します。また、プロジェクト（ターゲットではなく！）のビルド設定で開発チームIDを更新する必要があります。その後、実行をクリックします。他のすべてを自動的に行うスクリプトがあります。問題が発生した場合は、issueを開いてください。お手伝いします。\n\n## テスト用のコマンドラインツールをビルドする\n\n環境を設定するには、プロジェクトディレクトリに移動し、`meson build`を実行して`build`ディレクトリを作成します。その後、buildディレクトリに移動し、`ninja`を実行します。\n\n自己完結型のAlpine linuxファイルシステムを設定するには、[Alpineウェブサイト](https://alpinelinux.org/downloads/)からi386用のAlpine minirootfs tarballをダウンロードし、`./tools/fakefsify`を実行します。minirootfs tarballを最初の引数として、出力ディレクトリの名前を2番目の引数として指定します。その後、`./ish -f alpine /bin/sh`を使用して、Alpineファイルシステム内でコマンドを実行できます。出力ディレクトリの名前が`alpine`であると仮定します。`tools/fakefsify`がbuildディレクトリに存在しない場合、それはシステム上でlibarchiveを見つけられなかったためかもしれません（インストール方法については上記を参照してください）。\n\n`ish`を`tools/ptraceomatic`に置き換えることで、実際のプロセスでプログラムを実行し、各ステップでレジスタを比較しながらシングルステップ実行できます。デバッグに使用します。64ビットLinux 4.11以降が必要です。\n\n## ロギング\n\niSHには、ビルド時に有効にできるいくつかのロギングチャネルがあります。デフォルトでは、すべて無効になっています。有効にするには：\n\n- Xcodeで：iSH.xcconfigの`ISH_LOG`設定をスペースで区切られたログチャネルのリストに設定します。\n- Meson（テスト用のコマンドラインツール）で：`meson configure -Dlog=\"<ログチャネルのスペース区切りリスト>\"`を実行します。\n\n利用可能なチャネル：\n\n- `strace`：最も有用なチャネルで、ほぼすべてのシステムコールのパラメータと戻り値をログに記録します。\n- `instr`：エミュレータが実行するすべての命令をログに記録します。これにより、実行速度が大幅に低下します。\n- `verbose`：他のカテゴリに該当しないデバッグログを記録します。\n- `DEFAULT_CHANNEL`をgrepして、このリストが更新された後に追加されたログチャネルがあるかどうかを確認します。\n\n# JITに関する注意事項\n\niSHの一部として書いた中で最も興味深いものの1つはJITです。実際には、マシンコードをターゲットにしていないため、実際のJITではありません。代わりに、ガジェットと呼ばれる関数へのポインタの配列を生成し、各ガジェットは次の関数へのテールコールで終了します。これは、一部のForthインタープリタが使用するスレッド化コード技術に似ています。その結果、純粋なエミュレーションと比較して、速度が約3〜5倍向上します。\n\n残念ながら、ほぼすべてのガジェットをアセンブリ言語で書くという決定を下しました。これは、パフォーマンスに関してはおそらく良い決定でしたが（確かではありませんが）、可読性、保守性、および私の正気に関してはひどい決定でした。コンパイラ、アセンブラ、リンカからのたくさんの問題に対処しなければなりませんでした。コードが十分に変形していることを確認し、そうでない場合は、コンパイルできない理由をでっち上げる悪魔がいるようなものです。このコードを書いている間に正気を保つために、コード構造と命名のベストプラクティスを無視しなければなりませんでした。`ss`、`s`、`a`などの説明的な名前を持つマクロや変数が見つかるでしょう。信じられないほどネストされたアセンブラマクロ。そして、ほとんどコメントがありません。\n\nしたがって、警告です：このコードに長期間さらされると、正気を失い、GASマクロやリンカエラーについての悪夢に悩まされる可能性があります。カリフォルニア州では、このコードが癌、先天性欠損症、および生殖障害を引き起こすことが知られています。\n"
        },
        {
          "name": "README_KO.md",
          "type": "blob",
          "size": 6.1787109375,
          "content": "# [iSH](https://ish.app)\n\n[![Build Status](https://github.com/ish-app/ish/actions/workflows/ci.yml/badge.svg)](https://github.com/ish-app/ish/actions)\n[![goto counter](https://img.shields.io/github/search/ish-app/ish/goto.svg)](https://github.com/ish-app/ish/search?q=goto)\n[![fuck counter](https://img.shields.io/github/search/ish-app/ish/fuck.svg)](https://github.com/ish-app/ish/search?q=fuck)\n\n<p align=\"center\">\n<a href=\"https://ish.app\">\n<img src=\"https://ish.app/assets/github-readme.png\">\n</a>\n</p>\n\n사용자 모드 x86 에뮬레이션과 시스템 call 번역을 사용하여 iOS 에서 리눅스 쉘을 실행할 수 있게 해줍니다.\n\n프로젝트의 현황을 알고 싶으시면 커밋 로그와 이슈 탭을 참고해주세요.\n\n- [애플 앱스토어](https://apps.apple.com/us/app/ish-shell/id1436902243)\n- [TestFlight beta](https://testflight.apple.com/join/97i7KM8O)\n- [Discord server](https://discord.gg/HFAXj44)\n- [도움 문서 Wiki](https://github.com/ish-app/ish/wiki)\n- [README중문](https://github.com/ish-app/ish/blob/master/README_ZH.md)\n\n\n# Hacking\n\n해당 프로젝트는 깃의 서브 모듈이 있습니다. 해당 저장소를 받은 후 `--recurse-submodules` 또는 `git submodule update --init` 을 입력하여 깃 서브 모듈을 클론하세요.\n\n아래 사항은 이 프로젝트를 빌드하기 위해 필요한 것들 입니다:\n\n - Python 3\n   + Meson (`pip3 install meson`)\n - Ninja\n - Clang and LLD (맥에서는, `brew install llvm`, 리눅스에서는, `sudo apt install clang lld` 또는 `sudo pacman -S clang lld` 을 실행하세요)\n - sqlite3 (맥에서는 이미 제공 되어 있을 확률이 높습니다. 만약 그렇지 않다면 `sudo apt install libsqlite3-dev`)\n - libarchive (`brew install libarchive`, `sudo port install libarchive`, `sudo apt install libarchive-dev`) TODO: 앞에 dependency를 번들링 하기\n\n## iOS 로 빌드하는 법 \n\nXcode로 프로젝트를 열고, iSH.xcconfig 연 후에 `ROOT_BUNDLE_IDENTIFIER`를 해당 프로젝트에 유일한 값으로 바꾸세요. 그후 실행을 누르면 자동으로 나머지를 세팅해줄 스크립트가 제공되어 있습니다. 만약 문제가 생긴다면, issue open을 해주시면 도와드리겠습니다.\n\n\n## 테스트를 위한 cli 도구 빌드하는 법\n\n환경을 세팅하기 위해서는 프로젝트 디렉토리로 이동하고 `meson build`를 커맨드 라인에 입력하세요. 그 후 빌드 된 디렉토리로 cd 후 `ninja` 커맨드를 입력해 실행하세요.\n\n자체적으로 컨테이너 화 된 Alpine 리눅스 파일 시스템으로 실행하고 싶다면, [Alpine 웹사이트](https://alpinelinux.org/downloads/) 에서 i386을 위한 Alpine minirootfs(Mini Root Filesystem) tarball 을 다운로드 받고 `./tools/fakefsify`으로 실행하세요. 매개인자로 다운로드 받은 minirootfs tarball 파일을 입력하고 출력 받을 디렉토리의 이름을 두번째 인자로 입력하면 됩니다. 그 후에는 `./ish -f {출력받을 디렉토리 이름} /bin/sh` 명령어를 사용하여 Alpine 시스템 내에서 원하는 것을 실행할 수 있습니다. 만약 `tools/fakefsify` 가 빌드 디렉토리에 존재하지 않는다면, libarchive를 찾을 수 없어서 그런 것일 수 있습니다. 위를 참고하여 시스템에 설치하는 방법을 참고해주세요.\n\n실제 프로세스로 프로그램을 실행하고 각 단계의 레지스터를 비교하기 위해서 `ish`를 `tools/ptraceomatic`로 바꿔 실행할 수 있습니다. 디버깅을 위해 저는 사용합니다. 64-bit Linux 4.11 이후 버전이 필요합니다.\n\n## 로깅\n\niSH 는 빌드 시간에 허용될 수 있는 다수의 로깅 채널을 갖고 있습니다. 기본 값으로는 모두 꺼놨는데, 사용을 위해서는:\n\n- Xcode에서: iSH.xcconfig에 있는 `ISH_LOG` 값을 스페이스로 나뉜 로그 채널 리스트로 설정해주세요.\n- Meson에서 (테스트를 위한 커맨드 라인 도구): `meson configure -Dlog=\"<스페이스로 나뉜 로그 채널 리스트>\"`을 실행하세요.\n\n제공되는 로그 채널:\n\n- `strace`: 가장 쓸모있는 채널입니다. 매개변수와 거의 모든 시스템 호출의 반환 값을 로깅합니다.\n- `instr`: 에뮬레이터에서 실행된 모든 명령어를 로깅합니다. 이로인해 성능저하가 일어날 수 있습니다.\n- `verbose`: 다른 카타고리에 들지 않는 로그를 디버깅합니다.\n- `DEFAULT_CHANNEL`을 찾아보면 리스트가 업데이트 이후 새로 추가된 로그 채널을 볼수 있습니다.\n\n# JIT(Just In Time 컴파일러)에 대한 추가사항\n\niSH에서 추가한 것 중 가장 흥미로운 것은 JIT 컴파일러 일 것입니다. 기계 코드를 목적으로 하지 않기 때문에 JIT 실질적으로는 아니긴 합니다. Gadget 이라고 불리는 포인터 배열을 생성하는데, 각각의 이것은 다음 함수를 호출하는 꼬리물기를 합니다. 몇몇 Forth 언어 인터프리터에서 사용된 스레드 코드처럼 말이죠. 결과적으로 순수 에뮬보다 3-5배 더 빨라졌습니다.\n\n불행하게도 저는 어셈블리어로 대부분의 이러한 gadget을 작성했습니다. 이것은 성능적으로는 좋은 선택이었을 지 몰라도(실제로는 알 도리가 없지만), 가독성, 유지보수, 그리고 제 정신상태에 대해서는 좋지 않은 선택이 되었습니다. 컴파일러/어셈블러/링커로 인한 여러 고충은 말도 할 수 없을 정도입니다. 거의 무슨 제 코드의 가독성을 해치지 않으면 컴파일을 막는 그러한 악마가 있는 것 같았습니다. 이 코드를 작성하는 도중 제정신을 유지하기 위해서 저는 네이밍과 코드 구조론을 따른 최적의 선택을 하지 못하였습니다. `ss`, `s` 그리고 `a`와 같은 매크로 그리고 변수 명을 찾을 수 있을 것입니다. 주석 또한 찾기 힘들 것입니다.\n\n그렇기에 주의 하세요: 해당 코드를 장기간 접할 경우 정신질환을 앓게되거나 GAS 매크로와 링커오류에 대한 악몽에 시달리고 또다른 부작용이 있을 수 있습니다. 암, 선천적 결함, 또는 생식기 질환을 야기한다고 질병관리청에서 인정했습니다. 암튼 그랬습니다.\n"
        },
        {
          "name": "README_ZH.md",
          "type": "blob",
          "size": 5.6337890625,
          "content": "# [iSH](https://ish.app)\n\n[![Build Status](https://github.com/ish-app/ish/actions/workflows/ci.yml/badge.svg)](https://github.com/ish-app/ish/actions)\n[![goto counter](https://img.shields.io/github/search/ish-app/ish/goto.svg)](https://github.com/ish-app/ish/search?q=goto)\n[![fuck counter](https://img.shields.io/github/search/ish-app/ish/fuck.svg)](https://github.com/ish-app/ish/search?q=fuck)\n\n<p align=\"center\">\n<a href=\"https://ish.app\">\n<img src=\"https://ish.app/assets/github-readme.png\">\n</a>\n</p>\n\niSH 是一个运行在 iOS 上的 Linux shell。本项目使用了 x86 用户模式仿真和系统调用翻译转换。\n\n请查看 issue 和提交记录以了解本项目当前的状态。\n\n- [App Store 页面](https://apps.apple.com/us/app/ish-shell/id1436902243)\n- [Testflight 测试](https://testflight.apple.com/join/97i7KM8O)\n- [Discord 服务器](https://discord.gg/HFAXj44)\n- [维基帮助与教程](https://github.com/ish-app/ish/wiki)\n\n# 上手\n\n本项目下包含了其他 git 项目作为子模块，请确保在克隆时使用参数`--recurse-submodules`，即 `git clone --recurse-submodules https://github.com/ish-app/ish.git`。或是在克隆好了之后执行 `git submodule update --init`。\n\n编译此项目需要以下依赖:\n\n - Python 3\n    + Meson (`pip3 install meson`)\n - Ninja 请查看[此处](https://ninja-build.org/)\n - Clang and LLD (在安装了 `brew` 的 macOS 系统上运行 `brew install llvm`。在 Linux 系统上请根据你的包管理器，选择运行相应的安装命令 `sudo apt install clang lld` 或者 `sudo pacman -S clang lld`)\n - sqlite3 (通常 sqlite3 在 macOS 上是预安装的，但它或许没有安装在你的 Linux 上，运行 `which sqlite3` 以查看它是否存在。如果没有，你可以根据你的包管理器运行 `sudo apt install libsqlite3-dev` 之类的安装命令)\n - libarchive (在 macOS 系统上使用 `brew install libarchive` 或 `sudo port install libarchive` 来安装。在 Linux 系统上请根据你的包管理器，选择运行相应的安装命令如 `sudo apt install libarchive-dev` 来安装)\n\n## 创建iOS应用\n\n使用 Xcode 打开项目，选择 iSH.xcconfig，并且修改 `ROOT_BUNDLE_IDENTIFIER` 为你的[唯一值](https://help.apple.com/xcode/mac/current/#/dev91fe7130a)。此外，还需要在项目（project）的构建设置（build settings）中更新开发团队 ID，注意这里指的不是目标（target）的构建设置（build settings）。然后点击 `运行`，之后应该有脚本帮你自动执行相关操作。如果遇到了任何问题，请提交 issue，我们会帮你解决。\n\n## 为测试构建命令行工具\n\n在项目目录中运行命令 `meson build`，之后 `build` 目录会被创建。进入到 `build` 目录并运行命令 `ninja`。\n\n为了建立一个自有的 Alpine linux 文件系统，请从 [Alpine 网站](https://alpinelinux.org/downloads/) 下载 `Alpine minirotfs tarball for i386` 并运行 `tools/fakefsify` 。将 minirotfs tarball 指定为第一个参数，将输出目录的名称（如`alpine`）指定为第二个参数，即 `tools/fakefsify $MinirotfsTarballFilename alpine` 然后在 Alpine 文件系统中运行 `/ish -f alpine/bin/sh`。如果 `build` 目录下找不到 `tools/fakefsify`，可能是系统上找不到 `libarchive` 的依赖（请参照前面的章节进行安装）。\n\n除了可以使用 `ish`，你也可以使用 `tools/ptraceomatic` 替代它，以便在某个真实进程中单步比较寄存器。我通常使用它来进行调试（需要 64 位 Linux 4.11 或更高版本）。\n\n## 日志\n\n在编译过程中，iSH 提供数种日志类型，默认情况下它们都被禁用，想要启用它们需要:\n\n- 在 Xcode 中将 iSH.xcconfig 中 `ISH_LOG` 设置为以空格分隔的日志类型列表。\n- 在 Meson (测试使用的命令行工具) 中执行命令 `meson configure -Dlog=\"<space-separated list of log channels>\"`。\n\n可用的日志类型:\n\n- `strace`: 最有用的类型，记录几乎每个系统调用的参数和返回值。\n- `instr`: 记录模拟器执行的每个指令，这会让所有执行变得很慢。\n- `verbose`: 记录不属于其他类别的调试日志。\n- 使用 `grep` 命令查看 `DEFAULT_CHANNEL` 变量，以确认在更新此列表后是否添加了更多日志频道。\n\n# 关于 JIT\n\n可能我在写 iSH 中最有趣的部分就是 JIT 了。实际上它不是真正的 JIT，因为它不并以机器代码为目标，而是生成一个称为 gadgets 的函数指针数组，并且每个 gadget 都以对下一个函数的尾调用结束，类似于一些 Forth 解释器使用的线程化代码技术。好处就是，与纯仿真相比，它的速度提高了 3-5 倍。\n\n但不幸的是，我最开始决定用汇编语言编写几乎所有的 gadgets。这可能从性能方面来说是一个好的决定（虽然我永远也无法确定），但是对可读性、可维护性和我的理智来说，这是一个可怕的决定。我承受了大量来自编译器、汇编程序以及链接器的乱七八糟的东西。那里面就像有一个魔鬼，把我的代码搞得畸形，就算没有畸形，也会编造一些愚蠢的理由说它不能够编译。为了在编写代码时保持理智，我不得不忽略代码结构和命名方面的最佳实践。你会发现宏和变量具有诸如 `ss`、`s` 和 `a` 等描述性的名称，并且汇编器的宏嵌套层数超乎你的想象。最重要的是，代码中几乎没有任何注释。\n\n所以这是一个警告: 长期接触此代码可能会使你失去理智，对 GAS 宏和链接器错误产生噩梦，或是任何其他使人虚弱的副作用。在加利福尼亚，众所周知这样的代码会导致癌症、生产缺陷和重复伤害。\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.083984375,
          "content": "# iSH is not a security boundary!\n\nThe goal of this project is to support a Linux shell on iOS. As such, its security model assumes that the app is running in another sandbox and is used by a single user. The project is focused on compatibility, and very little thought has been put into internal security. Permissions are only loosely checked. Memory corruption in edge cases is common. Please do not use iSH for any sort of secure containerization or production use case.\n\nAs such, most types of bugs that are security issues in most projects are not security issues in iSH. Insufficient permission checks, memory corruption, and thread safety issues are generally considered correctness bugs and would be best filed as GitHub issues. We will prioritize bugs encountered by real programs in typical use.\n\nIn our security model, we expect real security bugs to be very rare. It's not completely impossible, e.g. a bug allowing remote code execution without user consent would be a security bug. If you think you found one, you can send it to security@ish.app. We'll work with you to resolve it appropriately.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "asbestos",
          "type": "tree",
          "content": null
        },
        {
          "name": "debug.h",
          "type": "blob",
          "size": 1.904296875,
          "content": "#ifndef UTIL_DEBUG_H\n#define UTIL_DEBUG_H\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid ish_printk(const char *msg, ...);\nvoid ish_vprintk(const char *msg, va_list args);\n#undef printk\n#define printk ish_printk\n\n// debug output utilities\n// save me\n\n#ifndef DEBUG_all\n#define DEBUG_all 0\n#endif\n#ifndef DEBUG_verbose\n#define DEBUG_verbose DEBUG_all\n#endif\n#ifndef DEBUG_instr\n#define DEBUG_instr DEBUG_all\n#endif\n#ifndef DEBUG_debug\n#define DEBUG_debug DEBUG_all\n#endif\n#ifndef DEBUG_strace\n#define DEBUG_strace DEBUG_all\n#endif\n#ifndef DEBUG_memory\n#define DEBUG_memory DEBUG_all\n#endif\n\n#if DEBUG_verbose\n#define TRACE_verbose TRACE__\n#else\n#define TRACE_verbose TRACE__NOP\n#endif\n#if DEBUG_instr\n#define TRACE_instr TRACE__\n#else\n#define TRACE_instr TRACE__NOP\n#endif\n#if DEBUG_debug\n#define TRACE_debug TRACE__\n#else\n#define TRACE_debug TRACE__NOP\n#endif\n#if DEBUG_strace\n#define TRACE_strace TRACE__\n#else\n#define TRACE_strace TRACE__NOP\n#endif\n#if DEBUG_memory\n#define TRACE_memory TRACE__\n#else\n#define TRACE_memory TRACE__NOP\n#endif\n\n#ifdef LOG_OVERRIDE\nextern int log_override;\n#define TRACE__NOP(msg, ...) if (log_override) { TRACE__(msg, ##__VA_ARGS__); }\n#else\n#define TRACE__NOP(msg, ...) use(__VA_ARGS__)\n#endif\n#define TRACE__(msg, ...) printk(msg, ##__VA_ARGS__)\n\n#define TRACE_(chan, msg, ...) glue(TRACE_, chan)(msg, ##__VA_ARGS__)\n#define TRACE(msg, ...) TRACE_(DEFAULT_CHANNEL, msg, ##__VA_ARGS__)\n#ifndef DEFAULT_CHANNEL\n#define DEFAULT_CHANNEL verbose\n#endif\n\n#define TODO(msg, ...) die(\"TODO: \" msg, ##__VA_ARGS__)\n#define FIXME(msg, ...) printk(\"FIXME \" msg \"\\n\", ##__VA_ARGS__)\n#define ERRNO_DIE(msg) { perror(msg); abort(); }\nextern void (*die_handler)(const char *msg);\n_Noreturn void die(const char *msg, ...);\n\n#define STRACE(msg, ...) TRACE_(strace, msg, ##__VA_ARGS__)\n\n#if defined(__i386__) || defined(__x86_64__)\n#define debugger __asm__(\"int3\")\n#else\n#include <signal.h>\n#define debugger raise(SIGTRAP)\n#endif\n\n#endif"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "emu",
          "type": "tree",
          "content": null
        },
        {
          "name": "fastlane",
          "type": "tree",
          "content": null
        },
        {
          "name": "fs",
          "type": "tree",
          "content": null
        },
        {
          "name": "iSH.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "ish-gdb.gdb",
          "type": "blob",
          "size": 0.5390625,
          "content": "handle SIGUSR1 noprint pass\nhandle SIGTTIN noprint pass\nhandle SIGPIPE noprint pass\nset print thread-events off\n\ndefine hook-run\n    python\nimport subprocess\nif subprocess.call('ninja') != 0:\n    raise gdb.CommandError('compilation failed')\n    end\nend\n\ndefine hook-stop\n    python\ntry:\n    symtab = gdb.selected_frame().find_sal().symtab\nexcept:\n    pass\nelse:\n    if symtab is not None and symtab.filename.endswith('.S'):\n        gdb.execute('set disassemble-next-line on')\n    else:\n        gdb.execute('set disassemble-next-line auto')\n    end\nend\n"
        },
        {
          "name": "ish-lldb.lldb",
          "type": "blob",
          "size": 0.052734375,
          "content": "process handle -n 0 -p 1 -s 0 SIGUSR1 SIGTTIN SIGPIPE\n"
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.c",
          "type": "blob",
          "size": 0.5302734375,
          "content": "#include <stdlib.h>\n#include <string.h>\n#include \"kernel/calls.h\"\n#include \"kernel/task.h\"\n#include \"xX_main_Xx.h\"\n\nint main(int argc, char *const argv[]) {\n    char envp[100] = {0};\n    if (getenv(\"TERM\"))\n        strcpy(envp, getenv(\"TERM\") - strlen(\"TERM\") - 1);\n    int err = xX_main_Xx(argc, argv, envp);\n    if (err < 0) {\n        fprintf(stderr, \"xX_main_Xx: %s\\n\", strerror(-err));\n        return err;\n    }\n    do_mount(&procfs, \"proc\", \"/proc\", \"\", 0);\n    do_mount(&devptsfs, \"devpts\", \"/dev/pts\", \"\", 0);\n    task_run_current();\n}\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 5.9140625,
          "content": "project('ish', 'c',\n    default_options: ['default_library=static', 'c_std=gnu11', 'warning_level=2'])\ncc = meson.get_compiler('c')\n\nif cc.get_id() == 'clang'\n    add_project_arguments('-Wimplicit-fallthrough', '-Wtautological-constant-in-range-compare', language: 'c')\nendif\n\nif get_option('b_sanitize').split(',').contains('undefined')\n    add_project_arguments('-fno-sanitize=alignment', language: 'c')\nendif\n\nlog_on = get_option('log').split()\nlog_off = get_option('nolog').split()\nforeach channel : log_on + log_off\n    if log_on.contains(channel)\n        add_project_arguments('-DDEBUG_' + channel + '=1', language: 'c')\n    else\n        add_project_arguments('-DDEBUG_' + channel + '=0', language: 'c')\n    endif\nendforeach\nadd_project_arguments('-DLOG_HANDLER_' + get_option('log_handler').to_upper() + '=1', language: 'c')\nadd_project_arguments('-DENGINE_' + get_option('engine').to_upper() + '=1', language: 'c')\n\nif get_option('no_crlf')\n    add_project_arguments('-DNO_CRLF', language: 'c')\nendif\n\nadd_project_arguments('-Wno-switch', language: 'c')\n\nincludes = [include_directories('.')]\n\nthreads = dependency('threads')\nlibrt = cc.find_library('rt', required: false)\nlibm = cc.find_library('m', required: false)\nlibdl = cc.find_library('dl', required: false)\nsqlite3 = cc.find_library('sqlite3')\ndependencies = [librt, libm, libdl, threads, sqlite3]\n\nsubdir('vdso') # ish depends on the vdso\n\noffsets = custom_target('offsets',\n    output: 'cpu-offsets.h', input: 'asbestos/offsets.c', depfile: 'cpu-offsets.h.d',\n    command: [find_program('tools/staticdefine.sh'), '@OUTDIR@/compile_commands.json', '@INPUT@', '@OUTPUT@', '@DEPFILE@'])\n\nemu_src = [\n    'emu/tlb.c',\n    'emu/fpu.c',\n    'emu/vec.c',\n    'emu/mmx.c',\n    'emu/float80.c',\n\n]\ngadgets = 'asbestos/gadgets-' + host_machine.cpu_family()\nemu_src += [\n    'asbestos/asbestos.c',\n    'asbestos/gen.c',\n    'asbestos/helpers.c',\n    gadgets+'/entry.S',\n    gadgets+'/memory.S',\n    gadgets+'/control.S',\n    gadgets+'/math.S',\n    gadgets+'/bits.S',\n    gadgets+'/string.S',\n    gadgets+'/misc.S',\n    offsets,\n]\n\nlibish_emu = library('ish_emu', emu_src, include_directories: includes)\n\nlibfakefs = library('fakefs',\n    ['fs/fake-db.c', 'fs/fake-migrate.c', 'fs/fake-rebuild.c'],\n    include_directories: includes,\n    dependencies: sqlite3)\n\nsubdir('deps')\n\nif get_option('kernel') == 'ish'\n    if get_option('engine') != 'asbestos'\n        error('Only asbestos is supported with ish kernel')\n    endif\n\n    src = [\n        'kernel/init.c',\n        'kernel/errno.c',\n\n        'kernel/calls.c',\n        'kernel/memory.c',\n        'kernel/user.c',\n        'kernel/vdso.c', vdso,\n        'kernel/task.c',\n        'kernel/group.c',\n        'kernel/log.c',\n\n        'kernel/fork.c',\n        'kernel/exec.c',\n        'kernel/exit.c',\n        'kernel/time.c',\n        'kernel/mmap.c',\n        'kernel/uname.c',\n        'kernel/tls.c',\n        'kernel/futex.c',\n        'kernel/getset.c',\n        'kernel/signal.c',\n        'kernel/resource.c',\n        'kernel/random.c',\n        'kernel/misc.c',\n        'kernel/eventfd.c',\n        'kernel/ipc.c',\n        'kernel/ptrace.c',\n\n        'kernel/fs.c',\n        'kernel/fs_info.c',\n        'fs/mount.c',\n        'fs/fd.c',\n        'fs/inode.c',\n        'fs/stat.c',\n        'fs/dir.c',\n        'fs/generic.c',\n        'fs/path.c',\n        'fs/real.c',\n        'fs/fake.c',\n\n        'fs/proc.c',\n        'fs/proc/entry.c',\n        'fs/proc/ish.c',\n        'fs/proc/root.c',\n        'fs/proc/pid.c',\n\n        'fs/dyndev.c',\n\n        'fs/adhoc.c',\n        'fs/sock.c',\n        'fs/pipe.c',\n        'fs/sockrestart.c',\n        'fs/lock.c',\n\n        'fs/dev.c',\n        'fs/mem.c',\n        'fs/tty.c',\n        'fs/tty-real.c',\n        'fs/pty.c',\n        'fs/tmp.c',\n\n        'fs/poll.c',\n        'kernel/poll.c',\n        'kernel/epoll.c',\n\n        'util/timer.c',\n        'util/sync.c',\n        'util/fifo.c',\n        'util/fchdir.c',\n\n        'platform/' + host_machine.system() + '.c',\n    ]\n\n    libish = library('ish', src,\n        include_directories: includes)\n    ish = declare_dependency(\n        link_with: [libish, libish_emu, libfakefs],\n        dependencies: dependencies,\n        include_directories: includes)\n\n    if not meson.is_cross_build()\n        executable('ish', ['main.c'], dependencies: ish)\n    endif\n\nelif get_option('kernel') == 'linux'\n    kernel_src = [\n        'linux/main.c',\n        'linux/fakefs.c',\n    ]\n    user_src = []\n    emu_deps = []\n\n    if get_option('engine') == 'asbestos'\n        user_src += 'linux/emu_asbestos.c'\n        emu_deps += declare_dependency(link_with: libish_emu)\n    elif get_option('engine') == 'unicorn'\n        user_src += 'linux/emu_unicorn.c'\n        kernel_src += 'linux/emu_unicorn_kernel.c'\n        emu_deps += declare_dependency(\n            dependencies: [cc.find_library('unicorn', dirs: [meson.current_source_dir()+'/deps/unicorn/build'])],\n            include_directories: include_directories('deps/unicorn/include'),\n        )\n    endif\n\n    modules = static_library('linux_modules', kernel_src, dependencies: [linux_headers, sqlite3])\n    user_modules = static_library('linux_user', user_src, dependencies: [user_linux_headers] + emu_deps)\n    executable('ish',\n        build_linux,\n        link_with: [libfakefs],\n        dependencies: [\n            liblinux,\n            libm,\n            libdl,\n            threads,\n            declare_dependency(link_whole: [modules, user_modules]),\n        ] + emu_deps)\nendif\n\nsubdir('tools')\n\ngdb_scripts = ['ish-gdb.gdb']\nforeach script : gdb_scripts\n    custom_target(script,\n        output: script, input: script,\n        command: ['ln', '-sf', '@INPUT@', '@OUTPUT@'],\n        build_by_default: true)\nendforeach\n\nif not meson.is_cross_build()\n    # test for floating point library\n    float80_test = executable('float80_test', ['emu/float80.c', 'emu/float80-test.c'], dependencies: [libm])\n    test('float80', float80_test)\nendif\n\ne2e_test = find_program('tests/e2e/e2e.bash')\ntest('e2e', e2e_test, args: ['-y'], timeout: 180)\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.4326171875,
          "content": "option('log', type: 'string', value: '')\noption('nolog', type: 'string', value: '')\noption('log_handler', type: 'string', value: 'dprintf')\n\noption('engine', type: 'combo', choices: ['asbestos', 'unicorn'], value: 'asbestos')\noption('kernel', type: 'combo', choices: ['ish', 'linux'], value: 'ish')\noption('kconfig', type: 'array', value: [])\n\noption('vdso_c_args', type: 'string', value: '')\n\noption('no_crlf', type: 'boolean', value: false)\n"
        },
        {
          "name": "misc.h",
          "type": "blob",
          "size": 3.06640625,
          "content": "#ifndef MISC_H\n#define MISC_H\n\n#ifdef __KERNEL__\n#include <linux/types.h>\n#else\n#include <assert.h>\n#include <sys/types.h>\n#include <stdnoreturn.h>\n#include <stdbool.h>\n#include <stdint.h>\n#endif\n\n// utility macros\n#define glue(a, b) _glue(a, b)\n#define _glue(a, b) a##b\n#define glue3(a,b,c) glue(a, glue(b, c))\n#define glue4(a,b,c,d) glue(a, glue3(b, c, d))\n\n#define str(x) _str(x)\n#define _str(x) #x\n\n// compiler check\n#define is_gcc(version) (__GNUC__ >= version)\n\n#if !defined(__has_attribute)\n#define has_attribute(x) 0\n#else\n#define has_attribute __has_attribute\n#endif\n\n#if !defined(__has_feature)\n#define has_feature(x) 0\n#else\n#define has_feature __has_feature\n#endif\n\n// keywords\n#define bitfield unsigned int\n#define forceinline inline __attribute__((always_inline))\n#if defined(NDEBUG) || defined(__KERNEL__)\n#define posit __builtin_assume\n#else\n#define posit assert\n#endif\n#define must_check __attribute__((warn_unused_result))\n\n#ifndef __KERNEL__\n#define unlikely(x) __builtin_expect((x), 0)\n#define typecheck(type, x) ({type _x = x; x;})\n#define container_of(ptr, type, member) \\\n    ((type *) ((char *) (ptr) - offsetof(type, member)))\n#if has_attribute(fallthrough)\n#define fallthrough __attribute__((fallthrough))\n#else\n#define fallthrough\n#endif\n#endif\n\n#if has_attribute(no_sanitize)\n#define __no_instrument_msan\n#if defined(__has_feature)\n#if has_feature(memory_sanitizer)\n#undef __no_instrument_msan\n#define __no_instrument_msan __attribute__((no_sanitize(\"memory\"))\n#endif\n#endif\n#define __no_instrument __attribute__((no_sanitize(\"address\", \"thread\", \"undefined\", \"leak\"))) __no_instrument_msan\n#else\n#define __no_instrument\n#endif\n\n#if has_attribute(nonstring)\n#define __strncpy_safe __attribute__((nonstring))\n#else\n#define __strncpy_safe\n#endif\n\n#define zero_init(type) ((type[1]){}[0])\n#define pun(type, x) (((union {typeof(x) _; type a;}) (x)).a)\n\n#define UNUSED(x) UNUSED_##x __attribute__((unused))\nstatic inline void __use(int dummy __attribute__((unused)), ...) {}\n#define use(...) __use(0, ##__VA_ARGS__)\n\n#if defined(__x86_64__)\n#define rdtsc() ({ \\\n        uint32_t low, high; \\\n        __asm__ volatile(\"rdtsc\" : \"=a\" (high), \"=d\" (low)); \\\n        ((uint64_t) high) << 32 | low; \\\n    })\n#elif defined(__arm64__) || defined(__aarch64__)\n#define rdtsc() ({ \\\n        uint64_t tsc; \\\n        __asm__ volatile(\"mrs %0, PMCCNTR_EL0\" : \"=r\" (tsc)); \\\n        tsc; \\\n    })\n#endif\n\n#ifndef __KERNEL__\n#define array_size(arr) (sizeof(arr)/sizeof((arr)[0]))\n#endif\n\n// types\ntypedef int64_t sqword_t;\ntypedef uint64_t qword_t;\ntypedef uint32_t dword_t;\ntypedef int32_t sdword_t;\ntypedef uint16_t word_t;\ntypedef uint8_t byte_t;\n\ntypedef dword_t addr_t;\ntypedef dword_t uint_t;\ntypedef sdword_t int_t;\n\ntypedef sdword_t pid_t_;\ntypedef dword_t uid_t_;\ntypedef word_t mode_t_;\ntypedef sqword_t off_t_;\ntypedef dword_t time_t_;\ntypedef dword_t clock_t_;\n\n#define uint(size) glue3(uint,size,_t)\n#define sint(size) glue3(int,size,_t)\n\n#ifndef __KERNEL__\n#define ERR_PTR(err) (void *) (intptr_t) (err)\n#define PTR_ERR(ptr) (intptr_t) (ptr)\n#define IS_ERR(ptr) ((uintptr_t) (ptr) > (uintptr_t) -0xfff)\n#endif\n\n#endif\n"
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.154296875,
          "content": "{ pkgs ? import <nixpkgs> {} }:\npkgs.mkShell {\n\tnativeBuildInputs = [\n\t\tpkgs.clang\n\t\tpkgs.libarchive\n\t\tpkgs.lld\n\t\tpkgs.meson\n\t\tpkgs.ninja\n\t\tpkgs.sqlite\n\t];\n}\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "vdso",
          "type": "tree",
          "content": null
        },
        {
          "name": "xX_main_Xx.h",
          "type": "blob",
          "size": 3.6728515625,
          "content": "#include <string.h>\n#include <unistd.h>\n#include <signal.h>\n#include <errno.h>\n#include <syslog.h>\n#include \"kernel/init.h\"\n#include \"kernel/fs.h\"\n#include \"fs/devices.h\"\n#include \"fs/real.h\"\n#ifdef __APPLE__\n#include <sys/resource.h>\n#define IOPOL_TYPE_VFS_HFS_CASE_SENSITIVITY 1\n#define IOPOL_VFS_HFS_CASE_SENSITIVITY_FORCE_CASE_SENSITIVE 1\n#endif\n\nvoid real_tty_reset_term(void);\n\nstatic void exit_handler(struct task *task, int code) {\n    if (task->parent != NULL)\n        return;\n    real_tty_reset_term();\n    if (code & 0xff)\n        raise(code & 0xff);\n    exit(code >> 8);\n}\n\n// this function parses command line arguments and initializes global\n// data structures. thanks programming discussions discord server for the name.\n// https://discord.gg/9zT7NHP\nstatic inline int xX_main_Xx(int argc, char *const argv[], const char *envp) {\n#ifdef __APPLE__\n    // Enable case-sensitive filesystem mode on macOS, if possible.\n    // In order for this to succeed, either we need to be running as root, or\n    // be given the com.apple.private.iopol.case_sensitivity entitlement. The\n    // second option isn't possible so you'll need to give iSH the setuid root\n    // bit. In that case it's important to drop root permissions ASAP.\n    // https://worthdoingbadly.com/casesensitive-iossim/\n    int iopol_err = setiopolicy_np(IOPOL_TYPE_VFS_HFS_CASE_SENSITIVITY,\n            IOPOL_SCOPE_PROCESS,\n            IOPOL_VFS_HFS_CASE_SENSITIVITY_FORCE_CASE_SENSITIVE);\n    if (iopol_err != 0 && errno != EPERM)\n        perror(\"could not enable case sensitivity\");\n    setgid(getgid());\n    setuid(getuid());\n#endif\n\n    // parse cli options\n    int opt;\n    const char *root = NULL;\n    const char *workdir = NULL;\n    const struct fs_ops *fs = &realfs;\n    const char *console = \"/dev/tty1\";\n    while ((opt = getopt(argc, argv, \"+r:f:d:c:\")) != -1) {\n        switch (opt) {\n            case 'r':\n            case 'f':\n                root = optarg;\n                if (opt == 'f')\n                    fs = &fakefs;\n                break;\n            case 'd':\n                workdir = optarg;\n                break;\n            case 'c':\n                console = optarg;\n                break;\n\n        }\n    }\n\n    openlog(argv[0], 0, LOG_USER);\n\n    char root_realpath[MAX_PATH + 1] = \"/\";\n    if (root != NULL && realpath(root, root_realpath) == NULL) {\n        perror(root);\n        exit(1);\n    }\n    if (fs == &fakefs)\n        strcat(root_realpath, \"/data\");\n    int err = mount_root(fs, root_realpath);\n    if (err < 0)\n        return err;\n\n    become_first_process();\n    current->thread = pthread_self();\n    char cwd[MAX_PATH + 1];\n    if (root == NULL && workdir == NULL) {\n        getcwd(cwd, sizeof(cwd));\n        workdir = cwd;\n    }\n    if (workdir != NULL) {\n        struct fd *pwd = generic_open(workdir, O_RDONLY_, 0);\n        if (IS_ERR(pwd)) {\n            fprintf(stderr, \"error opening working dir: %ld\\n\", PTR_ERR(pwd));\n            return 1;\n        }\n        fs_chdir(current->fs, pwd);\n    }\n\n    char argv_copy[4096];\n    int i = optind;\n    size_t p = 0;\n    while (i < argc) {\n        strcpy(&argv_copy[p], argv[i]);\n        p += strlen(argv[i]) + 1;\n        i++;\n    }\n    argv_copy[p] = '\\0';\n    if (argv[optind] == NULL)\n\t    return _ENOENT;\n    err = do_execve(argv[optind], argc - optind, argv_copy, envp == NULL ? \"\\0\" : envp);\n    if (err < 0)\n        return err;\n    tty_drivers[TTY_CONSOLE_MAJOR] = &real_tty_driver;\n    if (isatty(STDIN_FILENO) && isatty(STDOUT_FILENO)) {\n        err = create_stdio(console, TTY_CONSOLE_MAJOR, 1);\n        if (err < 0)\n            return err;\n    } else {\n        err = create_piped_stdio();\n        if (err < 0)\n            return err;\n    }\n    exit_hook = exit_handler;\n    return 0;\n}\n"
        }
      ]
    }
  ]
}