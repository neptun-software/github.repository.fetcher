{
  "metadata": {
    "timestamp": 1736710461289,
    "page": 93,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lz4/lz4",
      "stars": 10562,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.1591796875,
          "content": "task:\n  name: FreeBSD\n  freebsd_instance:\n    matrix:\n      image_family: freebsd-14-1\n  install_script: pkg install -y gmake\n  script: |\n    cc -v\n    gmake test\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.4833984375,
          "content": "# This is the configuration file for clang-format, an automatic code formatter.\n# Introduction: https://clang.llvm.org/docs/ClangFormat.html\n# Supported options: https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nLanguage: Cpp\nStandard: Latest\n\nColumnLimit: 110\n\nUseTab: Never\nIndentWidth: 4\nPPIndentWidth: 2\nContinuationIndentWidth: 4\n\nLineEnding: LF\nInsertNewlineAtEOF: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMaxEmptyLinesToKeep: 1\n\nIndentCaseBlocks: false\nIndentCaseLabels: false\nIndentGotoLabels: false\nIndentPPDirectives: AfterHash\nIndentWrappedFunctionNames: false\n\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: Right\nAlignEscapedNewlines: Left\nAlignOperands: Align\nAlignConsecutiveAssignments:\n    Enabled:          true\n    AcrossEmptyLines: false\n    AcrossComments:   false\n    AlignCompound:    false\n    PadOperators:     false\nAlignConsecutiveBitFields:\n    Enabled:          true\n    AcrossEmptyLines: false\n    AcrossComments:   false\nAlignConsecutiveDeclarations:\n    Enabled:          true\n    AcrossEmptyLines: false\n    AcrossComments:   false\nAlignConsecutiveMacros:\n    Enabled:          true\n    AcrossEmptyLines: false\n    AcrossComments:   false\nAlignTrailingComments:\n    Kind:           Leave\n    OverEmptyLines: 0\n\nBinPackArguments: true\nBinPackParameters: false\nAllowAllArgumentsOnNextLine: true\nAllowAllParametersOfDeclarationOnNextLine: false\n\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: AllIfsAndElse\nAllowShortLoopsOnASingleLine: false\n\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nBraceWrapping:\n    AfterCaseLabel:        false\n    AfterControlStatement: Never\n    AfterEnum:             false\n    AfterExternBlock:      false\n    AfterFunction:         true\n    AfterStruct:           false\n    AfterUnion:            false\n    BeforeElse:            false\n    BeforeWhile:           false\n    IndentBraces:          false\n    SplitEmptyFunction:    false\n    SplitEmptyRecord:      false\nBreakAfterAttributes: Never\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInlineASMColon: OnlyMultiline\nBreakBeforeTernaryOperators: true\n\nDerivePointerAlignment: false\nPointerAlignment: Left\n\nQualifierAlignment: Custom\nQualifierOrder: [\"inline\", \"static\", \"volatile\", \"restrict\", \"const\", \"type\"]\n\nReflowComments: false\nBreakStringLiterals: false\nRemoveSemicolon: true\nRemoveParentheses: ReturnStatement\nInsertBraces: false\nSeparateDefinitionBlocks: Always\n\nSpaceAfterCStyleCast: false\nSpaceAfterLogicalNot: false\nSpaceAroundPointerQualifiers: Default\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeParens: ControlStatements\nBitFieldColonSpacing: Both\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpacesBeforeTrailingComments: 1\nSpacesInSquareBrackets: false\nSpacesInLineCommentPrefix:\n    Minimum: 1\n    Maximum: -1\n\nSortIncludes: Never\nIncludeBlocks: Preserve\nIncludeIsMainRegex: \"\"\nIncludeCategories:\n    - {Regex: \"<.*>\",   Priority: -2, CaseSensitive: true}\n    - {Regex: \"\\\".*\\\"\", Priority: -1, CaseSensitive: true}\n\nAttributeMacros: [\"__capability\"]\nStatementAttributeLikeMacros: []\nStatementMacros: []\n\nPenaltyBreakAssignment: 200\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 10\nPenaltyIndentedWhitespace: 0\nPenaltyReturnTypeOnItsOwnLine: 60\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.33984375,
          "content": "# Set the default behavior\n* text eol=lf\n\n# Explicitly declare source files\n*.c text eol=lf\n*.h text eol=lf\n\n# Denote files that should not be modified.\n*.odt binary\n*.png binary\n\n# Visual Studio\n*.sln text eol=crlf\n*.vcxproj* text eol=crlf\n*.vcproj* text eol=crlf\n*.suo binary\n*.rc text eol=crlf\n\n# Windows\n*.bat text eol=crlf\n*.cmd text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4736328125,
          "content": "# Object files\n*.o\n*.ko\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n*.dSYM   # apple\n\n# Executables\n*.exe\n*.out\n*.app\nlz4\n\n# IDE / editors files\n.clang_complete\n.vscode\n_codelite/\n_codelite_lz4/\nbin/\n*.zip\n*.swp\ncompile_flags.txt\ncompile_commands.json\n.vscode\n.cache\n\n# analyzers\ninfer-out\n\n# Mac\n.DS_Store\n*.dSYM\n\n# Windows / Msys\nnul\nld.exe*\n\n# test artifacts\n*.lz4\ntmp*\nbuilddir/\n\n# generated Windows resource files\nlib/*.rc\nprograms/*.rc\n"
        },
        {
          "name": "CODING_STYLE",
          "type": "blob",
          "size": 3.369140625,
          "content": "LZ4 CODING STYLE\n================\n\nWhen contributing code and patches to the `LZ4` project, the following rules are expected to be followed for a successful merge.\n\n\nLibrary\n-------\n\nThe library's source code in `lib/` directory has a BSD 2-clause license.\nIt's designed to be integrated into 3rd party applications.\n\nIt adheres relatively strictly to vanilla `C90`, with the following exceptions:\n- `long long` type is required, in order to support 64-bit values\n- Variadic Macros are used for debug mode (but not required in release mode)\n\nBeyond that, all other rules and limitations of C90 must be respected, including `/* ... */` comment style only, and variable declaration at top of block only. The automated CI test suite will check for these rules.\n\nThe code is allowed to use more modern variants (C99 / C11 / C23) when useful\nas long as it provides a clean C90 backup for older compilers.\nFor example, C99+ compilers will employ the `restrict` keyword, while `C90` ones will ignore it, thanks to conditional macros.\nThis ensures maximum portability across a wide range of systems.\n\nMoreover, in the interest of safety, the code has to respect a fairly strigent list of additional restrictions, provided through warning flags, the list of which is maintained within `Makefile`.\nAmong the less common ones, we want the source to be compatible with `-Wc++-compat`, which ensures that the code can be compiled \"as is\", with no modification, as C++ code. It makes it possible to copy-paste the code into other C++ source files, or the source files are just dropped into a C++ environment which then compiles them as C++ source files.\n\n\nCommand Line Interface\n----------------------\n\nThe CLI executable's source code in `programs/` directory has a GPLv2+ license.\nWhile it's designed to be portable and freely distributable, it's not meant to be integrated into 3rd party applications.\nThe license difference is meant to reflect that choice.\n\nSimilar to the library, the CLI adheres relatively strictly to vanilla `C90`, and features the same exceptions:\n- `long long` requirement for 64-bit values\n- Variadic Macros for console messages (now used all the time, not just debug mode)\n\nThe code can also use system-specific libraries and symbols (such as `posix` ones)\nas long as it provides a backup for plain `C90` platforms.\nIt's even allowed to lose capabilities, as long as the CLI can be cleanly compiled on `C90`.\nFor example, systems without `<pthread>` support nor Completion Ports will just not feature multi-threading support, and run single threaded.\n\nIn the interest of build familiarity, the CLI source code also respects the same set of advanced warning flags as the library.\nThat being said, this last part is debatable and could deviate in the future.\nFor example, there are less reasons to support `-Wc++-compat` on the CLI side, since it's not meant to be integrated into 3rd party applications.\n\n\nOthers\n------\n\nThe repository includes other directories with their own set of compilable projects, such as `tests/`, `examples/` and `contrib/`.\n\nThese repositories do not have to respect the same set of restrictions, and can employ a larger array of different languages.\nFor example, some tests employ `sh`, and others employ `python`.\n\nThese directories may nonetheless include several targets employing the same coding convention as the `lz4` library. This is in a no way a rule, more like a side effect of build familiarity.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.615234375,
          "content": "Installation\n=============\n\n```\nmake\nmake install     # this command may require root access\n```\n\nLZ4's `Makefile` supports standard [Makefile conventions],\nincluding [staged installs], [redirection], or [command redefinition].\nIt is compatible with parallel builds (`-j#`).\n\n[Makefile conventions]: https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html\n[staged installs]: https://www.gnu.org/prep/standards/html_node/DESTDIR.html\n[redirection]: https://www.gnu.org/prep/standards/html_node/Directory-Variables.html\n[command redefinition]: https://www.gnu.org/prep/standards/html_node/Utilities-in-Makefiles.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.630859375,
          "content": "This repository uses 2 different licenses :\n- all files in the `lib` directory use a BSD 2-Clause license\n- all other files use a GPL-2.0-or-later license, unless explicitly stated otherwise\n\nRelevant license is reminded at the top of each source file,\nand with presence of COPYING or LICENSE file in associated directories.\n\nThis model is selected to emphasize that\nfiles in the `lib` directory are designed to be included into 3rd party applications,\nwhile all other files, in `programs`, `tests` or `examples`,\nare intended to be used \"as is\", as part of their intended scenarios,\nwith no intention to support 3rd party integration use cases.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 9.119140625,
          "content": "# ################################################################\n# LZ4 - Makefile\n# Copyright (C) Yann Collet 2011-2023\n# All rights reserved.\n#\n# BSD license\n# Redistribution and use in source and binary forms, with or without modification,\n# are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice, this\n#   list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice, this\n#   list of conditions and the following disclaimer in the documentation and/or\n#   other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n# You can contact the author at :\n#  - LZ4 source repository : https://github.com/lz4/lz4\n#  - LZ4 forum froup : https://groups.google.com/forum/#!forum/lz4c\n# ################################################################\n\nLZ4DIR  = lib\nPRGDIR  = programs\nTESTDIR = tests\nEXDIR   = examples\nFUZZDIR = ossfuzz\n\ninclude Makefile.inc\n\n\n.PHONY: default\ndefault: lib-release lz4-release\n\n# silent mode by default; verbose can be triggered by V=1 or VERBOSE=1\n$(V)$(VERBOSE).SILENT:\n\n.PHONY: all\nall: allmost examples manuals build_tests\n\n.PHONY: allmost\nallmost: lib lz4\n\n.PHONY: lib lib-release liblz4.a\nlib: liblz4.a\nlib lib-release liblz4.a:\n\t$(MAKE) -C $(LZ4DIR) $@\n\n.PHONY: lz4 lz4-release\nlz4 : liblz4.a\nlz4-release : lib-release\nlz4 lz4-release :\n\t$(MAKE) -C $(PRGDIR) $@\n\t$(LN_SF) $(PRGDIR)/lz4$(EXT) .\n\techo lz4 build completed\n\n.PHONY: examples\nexamples: liblz4.a\n\t$(MAKE) -C $(EXDIR) all\n\n.PHONY: manuals\nmanuals:\n\t$(MAKE) -C contrib/gen_manual $@\n\n.PHONY: build_tests\nbuild_tests:\n\t$(MAKE) -C $(TESTDIR) all\n\n.PHONY: clean\nclean:\n\t$(MAKE) -C $(LZ4DIR) $@ > $(VOID)\n\t$(MAKE) -C $(PRGDIR) $@ > $(VOID)\n\t$(MAKE) -C $(TESTDIR) $@ > $(VOID)\n\t$(MAKE) -C $(EXDIR) $@ > $(VOID)\n\t$(MAKE) -C $(FUZZDIR) $@ > $(VOID)\n\t$(MAKE) -C contrib/gen_manual $@ > $(VOID)\n\t$(RM) lz4$(EXT)\n\t$(RM) -r $(CMAKE_BUILD_DIR) $(MESON_BUILD_DIR)\n\t@echo Cleaning completed\n\n\n#-----------------------------------------------------------------------------\n# make install is validated only for Posix environments\n#-----------------------------------------------------------------------------\nifeq ($(POSIX_ENV),Yes)\nHOST_OS = POSIX\n\n.PHONY: install uninstall\ninstall uninstall:\n\t$(MAKE) -C $(LZ4DIR) $@\n\t$(MAKE) -C $(PRGDIR) $@\n\n.PHONY: test-install\ntest-install:\n\t$(MAKE) -j1 install DESTDIR=~/install_test_dir\n\nendif   # POSIX_ENV\n\n\nCMAKE ?= cmake\nCMAKE_BUILD_DIR ?= build/cmake/build\nifneq (,$(filter MSYS%,$(shell $(UNAME))))\nHOST_OS = MSYS\nCMAKE_PARAMS = -G\"MSYS Makefiles\"\nendif\n\n.PHONY: cmakebuild\ncmakebuild:\n\tmkdir -p $(CMAKE_BUILD_DIR)\n\tcd $(CMAKE_BUILD_DIR); $(CMAKE) $(CMAKE_PARAMS) ..; $(CMAKE) --build .\n\nMESON ?= meson\nMESON_BUILD_DIR ?= mesonBuildDir\n\n.PHONY: mesonbuild\nmesonbuild:\n\t$(MESON) setup --fatal-meson-warnings --buildtype=debug -Db_lundef=false -Dauto_features=enabled -Dprograms=true -Dcontrib=true -Dtests=true -Dexamples=true build/meson $(MESON_BUILD_DIR)\n\t$(MESON) test -C $(MESON_BUILD_DIR)\n\n#------------------------------------------------------------------------\n# make tests validated only for MSYS and Posix environments\n#------------------------------------------------------------------------\nifneq (,$(filter $(HOST_OS),MSYS POSIX))\n\n.PHONY: list\nlist:\n\t$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | xargs\n\n.PHONY: check\ncheck:\n\t$(MAKE) -C $(TESTDIR) test-lz4-essentials\n\n.PHONY: test\ntest:\n\t$(MAKE) -C $(TESTDIR) $@\n\t$(MAKE) -C $(EXDIR) $@\n\n.PHONY: usan\nusan: CC      = clang\nusan: CFLAGS  = -O3 -g -fsanitize=undefined -fno-sanitize-recover=undefined -fsanitize-recover=pointer-overflow\nusan: LDFLAGS = $(CFLAGS)\nusan: clean\n\tCC=$(CC) CFLAGS='$(CFLAGS)' LDFLAGS='$(LDFLAGS)' $(MAKE) test FUZZER_TIME=\"-T30s\" NB_LOOPS=-i1\n\n.PHONY: usan32\nusan32: CFLAGS = -m32 -O3 -g -fsanitize=undefined -fno-sanitize-recover=undefined -fsanitize-recover=pointer-overflow\nusan32: LDFLAGS = $(CFLAGS)\nusan32: clean\n\tCFLAGS='$(CFLAGS)' LDFLAGS='$(LDFLAGS)' $(MAKE) V=1 test FUZZER_TIME=\"-T30s\" NB_LOOPS=-i1\n\nSCANBUILD ?= scan-build\nSCANBUILD_FLAGS += --status-bugs -v --force-analyze-debug-code\n.PHONY: staticAnalyze\nstaticAnalyze: clean\n\tCPPFLAGS=-DLZ4_DEBUG=1 CFLAGS=-g $(SCANBUILD) $(SCANBUILD_FLAGS) $(MAKE) all V=1 DEBUGLEVEL=1\n\n.PHONY: cppcheck\ncppcheck:\n\tcppcheck . --force --enable=warning,portability,performance,style --error-exitcode=1 > /dev/null\n\n.PHONY: platformTest\nplatformTest: clean\n\t@echo \"\\n ---- test lz4 with $(CC) compiler ----\"\n\t$(CC) -v\n\tCFLAGS=\"$(CFLAGS) -O3 -Werror\"         $(MAKE) -C $(LZ4DIR) all\n\tCFLAGS=\"$(CFLAGS) -O3 -Werror -static\" $(MAKE) -C $(PRGDIR) all\n\tCFLAGS=\"$(CFLAGS) -O3 -Werror -static\" $(MAKE) -C $(TESTDIR) all\n\t$(MAKE) -C $(TESTDIR) test-platform\n\n.PHONY: versionsTest\nversionsTest:\n\t$(MAKE) -C $(TESTDIR) clean\n\t$(MAKE) -C $(TESTDIR) $@\n\n.PHONY: test-freestanding\ntest-freestanding:\n\t$(MAKE) -C $(TESTDIR) clean\n\t$(MAKE) -C $(TESTDIR) $@\n\n# test linking C libraries from C++ executables\n.PHONY: ctocxxtest\nctocxxtest: LIBCC=\"$(CC)\"\nctocxxtest: EXECC=\"$(CXX) -Wno-deprecated\"\nctocxxtest: CFLAGS=-O0\nctocxxtest:\n\tCC=$(LIBCC) $(MAKE) -C $(LZ4DIR)  CFLAGS=\"$(CFLAGS)\" all\n\tCC=$(LIBCC) $(MAKE) -C $(TESTDIR) CFLAGS=\"$(CFLAGS)\" lz4.o lz4hc.o lz4frame.o\n\tCC=$(EXECC) $(MAKE) -C $(TESTDIR) CFLAGS=\"$(CFLAGS)\" all\n\n.PHONY: cxxtest cxx32test\ncxx32test: CFLAGS += -m32\ncxxtest cxx32test: CC := \"$(CXX) -Wno-deprecated\"\ncxxtest cxx32test: CFLAGS = -O3 -Wall -Wextra -Wundef -Wshadow -Wcast-align -Werror\ncxxtest cxx32test:\n\t$(CXX) -v\n\tCC=$(CC) $(MAKE) -C $(LZ4DIR)  all CFLAGS=\"$(CFLAGS)\"\n\tCC=$(CC) $(MAKE) -C $(PRGDIR)  all CFLAGS=\"$(CFLAGS)\"\n\tCC=$(CC) $(MAKE) -C $(TESTDIR) all CFLAGS=\"$(CFLAGS)\"\n\n.PHONY: cxx17build\ncxx17build : CC = \"$(CXX) -Wno-deprecated\"\ncxx17build : CFLAGS = -std=c++17 -Wall -Wextra -Wundef -Wshadow -Wcast-align -Werror -Wpedantic\ncxx17build : clean\n\t$(CXX) -v\n\tCC=$(CC) $(MAKE) -C $(LZ4DIR)  all CFLAGS=\"$(CFLAGS)\"\n\tCC=$(CC) $(MAKE) -C $(PRGDIR)  all CFLAGS=\"$(CFLAGS)\"\n\tCC=$(CC) $(MAKE) -C $(TESTDIR) all CFLAGS=\"$(CFLAGS)\"\n\n.PHONY: c_standards\nc_standards: clean c_standards_c11 c_standards_c99 c_standards_c90\n\n.PHONY: c_standards_c90\nc_standards_c90: clean\n\t$(MAKE) clean; CFLAGS=\"-std=c90   -Werror -Wpedantic -Wno-long-long -Wno-variadic-macros\" $(MAKE) allmost\n\t$(MAKE) clean; CFLAGS=\"-std=gnu90 -Werror -Wpedantic -Wno-long-long -Wno-variadic-macros\" $(MAKE) allmost\n\n.PHONY: c_standards_c99\nc_standards_c99: clean\n\t$(MAKE) clean; CFLAGS=\"-std=c99   -Werror -Wpedantic\" $(MAKE) all\n\t$(MAKE) clean; CFLAGS=\"-std=gnu99 -Werror -Wpedantic\" $(MAKE) all\n\n.PHONY: c_standards_c11\nc_standards_c11: clean\n\t$(MAKE) clean; CFLAGS=\"-std=c11 -Werror\" $(MAKE) all\n\n# The following test ensures that standard Makefile variables set through environment\n# are correctly transmitted at compilation stage.\n# This test is meant to detect issues like https://github.com/lz4/lz4/issues/958\n.PHONY: standard_variables\nstandard_variables:\n\t$(MAKE) clean\n\t@echo =================\n\t@echo Check support of Makefile Standard variables through environment\n\t@echo note : this test requires V=1 to work properly\n\t@echo =================\n\tCC=\"cc -DCC_TEST\" \\\n\tCFLAGS=-DCFLAGS_TEST \\\n\tCPPFLAGS=-DCPPFLAGS_TEST \\\n\tLDFLAGS=-DLDFLAGS_TEST \\\n\tLDLIBS=-DLDLIBS_TEST \\\n\t$(MAKE) V=1 > tmpsv\n\t# Note: just checking the presence of custom flags\n\t# would not detect situations where custom flags are\n\t# supported in some part of the Makefile, and missed in others.\n\t# So the test checks if they are present the _right nb of times_.\n\t# However, checking static quantities makes this test brittle,\n\t# because quantities (10, 2 and 1) can still evolve in future,\n\t# for example when source directories or Makefile evolve.\n\tif [ $$(grep CC_TEST tmpsv | wc -l) -ne 10 ]; then \\\n\t\techo \"CC environment variable missed\" && False; fi\n\tif [ $$(grep CFLAGS_TEST tmpsv | wc -l) -ne 10 ]; then \\\n\t\techo \"CFLAGS environment variable missed\" && False; fi\n\tif [ $$(grep CPPFLAGS_TEST tmpsv | wc -l) -ne 10 ]; then \\\n\t\techo \"CPPFLAGS environment variable missed\" && False; fi\n\tif [ $$(grep LDFLAGS_TEST tmpsv | wc -l) -ne 2 ]; then \\\n\t\techo \"LDFLAGS environment variable missed\" && False; fi\n\tif [ $$(grep LDLIBS_TEST tmpsv | wc -l) -ne 1 ]; then \\\n\t\techo \"LDLIBS environment variable missed\" && False; fi\n\t@echo =================\n\t@echo all custom variables detected\n\t@echo =================\n\t$(RM) tmpsv\n\nendif   # MSYS POSIX\n"
        },
        {
          "name": "Makefile.inc",
          "type": "blob",
          "size": 3.2705078125,
          "content": "# ################################################################\n# LZ4 - Makefile common definitions\n# Copyright (C) Yann Collet 2020\n# All rights reserved.\n#\n# BSD license\n# Redistribution and use in source and binary forms, with or without modification,\n# are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice, this\n#   list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice, this\n#   list of conditions and the following disclaimer in the documentation and/or\n#   other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n# You can contact the author at :\n#  - LZ4 source repository : https://github.com/lz4/lz4\n#  - LZ4 forum froup : https://groups.google.com/forum/#!forum/lz4c\n# ################################################################\n\nUNAME ?= uname\n\nTARGET_OS ?= $(shell $(UNAME))\nifeq ($(TARGET_OS),)\n  TARGET_OS ?= $(OS)\nendif\n\nifneq (,$(filter Windows%,$(TARGET_OS)))\nLIBLZ4_NAME = liblz4-$(LIBVER_MAJOR)\nLIBLZ4_EXP  = liblz4.lib\nWINBASED    = yes\nelse\nLIBLZ4_EXP  = liblz4.dll.a\n  ifneq (,$(filter MINGW%,$(TARGET_OS)))\nLIBLZ4_NAME = liblz4\nWINBASED    = yes\n  else\n    ifneq (,$(filter MSYS%,$(TARGET_OS)))\nLIBLZ4_NAME = msys-lz4-$(LIBVER_MAJOR)\nWINBASED    = yes\n    else\n      ifneq (,$(filter CYGWIN%,$(TARGET_OS)))\nLIBLZ4_NAME = cyglz4-$(LIBVER_MAJOR)\nWINBASED    = yes\n      else\nLIBLZ4_NAME = liblz4\nWINBASED    = no\nEXT         =\n      endif\n    endif\n  endif\nendif\n\nifeq ($(WINBASED),yes)\nEXT        = .exe\nWINDRES ?= windres\nendif\n\nLIBLZ4      = $(LIBLZ4_NAME).$(SHARED_EXT_VER)\n\n#determine if dev/nul based on host environment\nifneq (,$(filter MINGW% MSYS% CYGWIN%,$(shell $(UNAME))))\nVOID := /dev/null\nelse\n  ifneq (,$(filter Windows%,$(OS)))\nVOID := nul\n  else\nVOID  := /dev/null\n  endif\nendif\n\nifneq (,$(filter Linux Darwin GNU/kFreeBSD GNU OpenBSD FreeBSD NetBSD DragonFly SunOS Haiku MidnightBSD MINGW% CYGWIN% MSYS%,$(shell $(UNAME))))\nPOSIX_ENV = Yes\nelse\nPOSIX_ENV = No\nendif\n\n# Avoid symlinks when targeting Windows or building on a Windows host\nifeq ($(WINBASED),yes)\nLN_SF = cp -p\nelse\n  ifneq (,$(filter MINGW% MSYS% CYGWIN%,$(shell $(UNAME))))\nLN_SF = cp -p\n  else\n    ifneq (,$(filter Windows%,$(OS)))\nLN_SF = cp -p\n    else\nLN_SF  = ln -sf\n    endif\n  endif\nendif\n\nifneq (,$(filter $(shell $(UNAME)),SunOS))\nINSTALL ?= ginstall\nelse\nINSTALL ?= install\nendif\n\nINSTALL_PROGRAM ?= $(INSTALL) -m 755\nINSTALL_DATA    ?= $(INSTALL) -m 644\nMAKE_DIR        ?= $(INSTALL) -d -m 755\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 18.380859375,
          "content": "v1.10.0\ncli  : multithreading compression support: improves speed by X times threads allocated\ncli  : overlap decompression with i/o, improving speed by ~+60%\ncli  : support environment variables LZ4_CLEVEL and LZ4_NBWORKERS\ncli  : license of CLI more clearly labelled GPL-2.0-or-later\ncli  : fix: refuse to compress directories\ncli  : fix dictionary compression benchmark on multiple files\ncli  : change: no more implicit `stdout` (except when input is `stdin`)\nlib  : new level 2, offering mid-way performance (speed and compression)\nlib  : Improved lz4frame compression speed for small data (up to +160% at 1KB)\nlib  : Slightly faster (+5%) HC compression speed (levels 3-9), by @JunHe77\nlib  : dictionary compression support now in stable status\nlib  : lz4frame states can be safely reset and reused after a processing error (described by @QrczakMK)\nlib  : `lz4file` API improvements, by @vsolontsov-volant and @t-mat\nlib  : new experimental symbol `LZ4_compress_destSize_extState()`\nbuild: cmake minimum version raised to 3.5\nbuild: cmake improvements, by @foxeng, @Ohjurot, @LocalSpook, @teo-tsirpanis, @ur4t and @t-mat\nbuild: meson scripts are now hosted into `build/` directory, by @eli-schwartz\nbuild: meson improvements, by @tristan957\nbuild: Visual Studio solutions generated by `cmake` via scripts\nport : support for loongArch, risc-v, m68k, mips and sparc architectures\nport : improved Visual Studio compatibility, by @t-mat\nport : freestanding support improvements, by @t-mat\n\nv1.9.4\nperf : faster decoding speed (~+20%) on aarch64 platforms\nperf : faster decoding speed (~+70%) for -BD4 setting in CLI\napi  : new function `LZ4_decompress_safe_partial_usingDict()` by @yawqi\napi  : lz4frame: ability to provide custom allocators at state creation\napi  : can skip checksum validation for improved decoding speed\napi  : new experimental unit `lz4file` for file i/o API, by @anjiahao1\napi  : new experimental function `LZ4F_uncompressedUpdate()`, by @alexmohr\ncli  : `--list` works on `stdin` input, by @Low-power\ncli  : `--no-crc` does not produce (compression) nor check (decompression) checksums\ncli  : fix: `--test` and `--list` produce an error code when parsing invalid input\ncli  : fix: `--test -m` does no longer create decompressed file artifacts\ncli  : fix: support skippable frames when passed via `stdin`, reported by @davidmankin\nbuild: fix: Makefile respects CFLAGS directives passed via environment variable\nbuild: `LZ4_FREESTANDING`, new build macro for freestanding environments, by @t-mat\nbuild: `make` and `make test` are compatible with `-j` parallel run\nbuild: AS/400 compatibility, by @jonrumsey\nbuild: Solaris 10 compatibility, by @pekdon\nbuild: MSVC 2022 support, by @t-mat\nbuild: improved meson script, by @eli-schwartz\ndoc  : Updated LZ4 block format, provide an \"implementation notes\" section\n\nv1.9.3\nperf: highly improved speed in kernel space, by @terrelln\nperf: faster speed with Visual Studio, thanks to @wolfpld and @remittor\nperf: improved dictionary compression speed, by @felixhandte\nperf: fixed LZ4_compress_HC_destSize() ratio, detected by @hsiangkao\nperf: reduced stack usage in high compression mode, by @Yanpas\napi : LZ4_decompress_safe_partial() supports unknown compressed size, requested by @jfkthame\napi : improved LZ4F_compressBound() with automatic flushing, by Christopher Harvie\napi : can (de)compress to/from NULL without UBs\napi : fix alignment test on 32-bit systems (state initialization)\napi : fix LZ4_saveDictHC() in corner case scenario, detected by @IgorKorkin\ncli : `-l` legacy format is now compatible with `-m` multiple files, by Filipe Calasans\ncli : benchmark mode supports dictionary, by @rkoradi\ncli : fix --fast with large argument, detected by @picoHz\nbuild: link to user-defined memory functions with LZ4_USER_MEMORY_FUNCTIONS, suggested by Yuriy Levchenko\nbuild: contrib/cmake_unofficial/ moved to build/cmake/\nbuild: visual/* moved to build/\nbuild: updated meson script, by @neheb\nbuild: tinycc support, by Anton Kochkov\ninstall: Haiku support, by Jerome Duval\ndoc : updated LZ4 frame format, clarify EndMark\n\nv1.9.2\nfix : out-of-bound read in exceptional circumstances when using decompress_partial(), by @terrelln\nfix : slim opportunity for out-of-bound write with compress_fast() with a large enough input and when providing an output smaller than recommended (< LZ4_compressBound(inputSize)), by @terrelln\nfix : rare data corruption bug with LZ4_compress_destSize(), by @terrelln\nfix : data corruption bug when Streaming with an Attached Dict in HC Mode, by @felixhandte\nperf: enable LZ4_FAST_DEC_LOOP on aarch64/GCC by default, by @prekageo\nperf: improved lz4frame streaming API speed, by @dreambottle\nperf: speed up lz4hc on slow patterns when using external dictionary, by @terrelln\napi: better in-place decompression and compression support\ncli : --list supports multi-frames files, by @gstedman\ncli: --version outputs to stdout\ncli : add option --best as an alias of -12 , by @Low-power\nmisc: Integration into oss-fuzz by @cmeister2, expanded list of scenarios by @terrelln\n\nv1.9.1\nfix : decompression functions were reading a few bytes beyond input size (introduced in v1.9.0, reported by @ppodolsky and @danlark1)\napi : fix : lz4frame initializers compatibility with c++, reported by @degski\ncli : added command --list, based on a patch by @gabrielstedman\nbuild: improved Windows build, by @JPeterMugaas\nbuild: AIX, by Norman Green\n\nv1.9.0\nperf: large decompression speed improvement on x86/x64 (up to +20%) by @djwatson\napi : changed : _destSize() compression variants are promoted to stable API\napi : new : LZ4_initStream(HC), replacing LZ4_resetStream(HC)\napi : changed : LZ4_resetStream(HC) as recommended reset function, for better performance on small data\ncli : support custom block sizes, by @blezsan\nbuild: source code can be amalgamated, by Bing Xu\nbuild: added meson build, by @lzutao\nbuild: new build macros : LZ4_DISTANCE_MAX, LZ4_FAST_DEC_LOOP\ninstall: MidnightBSD, by @laffer1\ninstall: msys2 on Windows 10, by @vtorri\n\nv1.8.3\nperf: minor decompression speed improvement (~+2%) with gcc\nfix : corruption in v1.8.2 at level 9 for files > 64KB under rare conditions (#560)\ncli : new command --fast, by @jennifermliu\ncli : fixed elapsed time, and added cpu load indicator (on -vv) (#555)\napi : LZ4_decompress_safe_partial() now decodes exactly the nb of bytes requested (feature request #566)\nbuild : added Haiku target, by @fbrosson, and MidnightBSD, by @laffer1\ndoc : updated documentation regarding dictionary compression\n\nv1.8.2\nperf: *much* faster dictionary compression on small files, by @felixhandte\nperf: improved decompression speed and binary size, by Alexey Tourbin (@svpv)\nperf: slightly faster HC compression and decompression speed\nperf: very small compression ratio improvement\nfix : compression compatible with low memory addresses (< 0xFFFF)\nfix : decompression segfault when provided with NULL input, by @terrelln\ncli : new command --favor-decSpeed\ncli : benchmark mode more accurate for small inputs\nfullbench : can bench _destSize() variants, by @felixhandte\ndoc : clarified block format parsing restrictions, by Alexey Tourbin (@svpv)\n\nv1.8.1\nperf : faster and stronger ultra modes (levels 10+)\nperf : slightly faster compression and decompression speed\nperf : fix bad degenerative case, reported by @c-morgenstern\nfix : decompression failed when using a combination of extDict + low memory address (#397), reported and fixed by Julian Scheid (@jscheid)\ncli : support for dictionary compression (`-D`), by Felix Handte @felixhandte\ncli : fix : `lz4 -d --rm` preserves timestamp (#441)\ncli : fix : do not modify /dev/null permission as root, by @aliceatlas\napi : `_destSize()` variant supported for all compression levels\nbuild  : `make` and `make test` compatible with `-jX`, reported by @mwgamera\nbuild  : can control LZ4LIB_VISIBILITY macro, by @mikir\ninstall: fix man page directory (#387), reported by Stuart Cardall (@itoffshore)\n\nv1.8.0\ncli : fix : do not modify /dev/null permissions, reported by @Maokaman1\ncli : added GNU separator -- specifying that all following arguments are files\nAPI : added LZ4_compress_HC_destSize(), by Oleg (@remittor)\nAPI : added LZ4F_resetDecompressionContext()\nAPI : lz4frame : negative compression levels trigger fast acceleration, request by Lawrence Chan\nAPI : lz4frame : can control block checksum and dictionary ID\nAPI : fix : expose obsolete decoding functions, reported by Chen Yufei\nAPI : experimental : lz4frame_static : new dictionary compression API\nbuild : fix : static lib installation, by Ido Rosen\nbuild : dragonFlyBSD, OpenBSD, NetBSD supported\nbuild : LZ4_MEMORY_USAGE can be modified at compile time, through external define\ndoc : Updated LZ4 Frame format to v1.6.0, restoring Dictionary-ID field\ndoc : lz4 api manual, by Przemyslaw Skibinski\n\nv1.7.5\nlz4hc : new high compression mode : levels 10-12 compress more and slower, by Przemyslaw Skibinski\nlz4cat : fix : works with relative path (#284) and stdin (#285) (reported by @beiDei8z)\ncli : fix minor notification when using -r recursive mode\nAPI : lz4frame : LZ4F_frameBound(0) gives upper bound of *flush() and *End() operations (#290, #280)\ndoc : markdown version of man page, by Takayuki Matsuoka (#279)\nbuild : Makefile : fix make -jX lib+exe concurrency (#277)\nbuild : cmake : improvements by Michał Górny (#296)\n\nv1.7.4.2\nfix : Makefile : release build compatible with PIE and customized compilation directives provided through environment variables (#274, reported by Antoine Martin)\n\nv1.7.4\nImproved : much better speed in -mx32 mode\ncli : fix : Large file support in 32-bits mode on Mac OS-X\nfix : compilation on gcc 4.4 (#272), reported by Antoine Martin\n\nv1.7.3\nChanged : moved to versioning; package, cli and library have same version number\nImproved: Small decompression speed boost\nImproved: Small compression speed improvement on 64-bits systems\nImproved: Small compression ratio and speed improvement on small files\nImproved: Significant speed boost on ARMv6 and ARMv7\nFix : better ratio on 64-bits big-endian targets\nImproved cmake build script, by Evan Nemerson\nNew liblz4-dll project, by Przemyslaw Skibinki\nMakefile: Generates object files (*.o) for faster (re)compilation on low power systems\ncli : new : --rm and --help commands\ncli : new : preserved file attributes, by Przemyslaw Skibinki\ncli : fix : crash on some invalid inputs\ncli : fix : -t correctly validates lz4-compressed files, by Nick Terrell\ncli : fix : detects and reports fread() errors, thanks to Hiroshi Fujishima report #243\ncli : bench : new : -r recursive mode\nlz4cat : can cat multiple files in a single command line (#184)\nAdded : doc/lz4_manual.html, by Przemyslaw Skibinski\nAdded : dictionary compression and frame decompression examples, by Nick Terrell\nAdded : Debianization, by Evgeniy Polyakov\n\nr131\nNew    : Dos/DJGPP target, thanks to Louis Santillan (#114)\nAdded  : Example using lz4frame library, by Zbigniew Jędrzejewski-Szmek (#118)\nChanged: xxhash symbols are modified (namespace emulation) within liblz4\n\nr130:\nFixed  : incompatibility sparse mode vs console, reported by Yongwoon Cho (#105)\nFixed  : LZ4IO exits too early when frame crc not present, reported by Yongwoon Cho (#106)\nFixed  : incompatibility sparse mode vs append mode, reported by Takayuki Matsuoka (#110)\nPerformance fix : big compression speed boost for clang (+30%)\nNew    : cross-version test, by Takayuki Matsuoka\n\nr129:\nAdded  : LZ4_compress_fast(), LZ4_compress_fast_continue()\nAdded  : LZ4_compress_destSize()\nChanged: New lz4 and lz4hc compression API. Previous function prototypes still supported.\nChanged: Sparse file support enabled by default\nNew    : LZ4 CLI improved performance compressing/decompressing multiple files (#86, kind contribution from Kyle J. Harper & Takayuki Matsuoka)\nFixed  : GCC 4.9+ optimization bug - Reported by Markus Trippelsdorf, Greg Slazinski & Evan Nemerson\nChanged: Enums converted to LZ4F_ namespace convention - by Takayuki Matsuoka\nAdded  : AppVeyor CI environment, for Visual tests - Suggested by Takayuki Matsuoka\nModified:Obsolete functions generate warnings - Suggested by Evan Nemerson, contributed by Takayuki Matsuoka\nFixed  : Bug #75 (unfinished stream), reported by Yongwoon Cho\nUpdated: Documentation converted to MarkDown format\n\nr128:\nNew    : lz4cli sparse file support (Requested by Neil Wilson, and contributed by Takayuki Matsuoka)\nNew    : command -m, to compress multiple files in a single command (suggested by Kyle J. Harper)\nFixed  : Restored lz4hc compression ratio (slightly lower since r124)\nNew    : lz4 cli supports long commands (suggested by Takayuki Matsuoka)\nNew    : lz4frame & lz4cli frame content size support\nNew    : lz4frame supports skippable frames, as requested by Sergey Cherepanov\nChanged: Default \"make install\" directory is /usr/local, as notified by Ron Johnson\nNew    : lz4 cli supports \"pass-through\" mode, requested by Neil Wilson\nNew    : datagen can generate sparse files\nNew    : scan-build tests, thanks to kind help by Takayuki Matsuoka\nNew    : g++ compatibility tests\nNew    : arm cross-compilation test, thanks to kind help by Takayuki Matsuoka\nFixed  : Fuzzer + frametest compatibility with NetBSD (issue #48, reported by Thomas Klausner)\nAdded  : Visual project directory\nUpdated: Man page & Specification\n\nr127:\nN/A   : added a file on SVN\n\nr126:\nNew   : lz4frame API is now integrated into liblz4\nFixed : GCC 4.9 bug on highest performance settings, reported by Greg Slazinski\nFixed : bug within LZ4 HC streaming mode, reported by James Boyle\nFixed : older compiler don't like nameless unions, reported by Cheyi Lin\nChanged : lz4 is C90 compatible\nChanged : added -pedantic option, fixed a few mminor warnings\n\nr125:\nChanged : endian and alignment code\nChanged : directory structure : new \"lib\" directory\nUpdated : lz4io, now uses lz4frame\nImproved: slightly improved decoding speed\nFixed : LZ4_compress_limitedOutput(); Special thanks to Christopher Speller !\nFixed : some alignment warnings under clang\nFixed : deprecated function LZ4_slideInputBufferHC()\n\nr124:\nNew : LZ4 HC streaming mode\nFixed : LZ4F_compressBound() using null preferencesPtr\nUpdated : xxHash to r38\nUpdated library number, to 1.4.0\n\nr123:\nAdded : experimental lz4frame API, thanks to Takayuki Matsuoka and Christopher Jackson for testings\nFix : s390x support, thanks to Nobuhiro Iwamatsu\nFix : test mode (-t) no longer requires confirmation, thanks to Thary Nguyen\n\nr122:\nFix : AIX & AIX64 support (SamG)\nFix : mips 64-bits support (lew van)\nAdded : Examples directory, using code examples from Takayuki Matsuoka\nUpdated : Framing specification, to v1.4.1\nUpdated : xxHash, to r36\n\nr121:\nAdded : Makefile : install for kFreeBSD and Hurd (Nobuhiro Iwamatsu)\nFix : Makefile : install for OS-X and BSD, thanks to Takayuki Matsuoka\n\nr120:\nModified : Streaming API, using strong types\nAdded : LZ4_versionNumber(), thanks to Takayuki Matsuoka\nFix : OS-X : library install name, thanks to Clemens Lang\nUpdated : Makefile : synchronize library version number with lz4.h, thanks to Takayuki Matsuoka\nUpdated : Makefile : stricter compilation flags\nAdded : pkg-config, thanks to Zbigniew Jędrzejewski-Szmek (issue 135)\nMakefile : lz4-test only test native binaries, as suggested by Michał Górny (issue 136)\nUpdated : xxHash to r35\n\nr119:\nFix : Issue 134 : extended malicious address space overflow in 32-bits mode for some specific configurations\n\nr118:\nNew : LZ4 Streaming API (Fast version), special thanks to Takayuki Matsuoka\nNew : datagen : parametrable synthetic data generator for tests\nImproved : fuzzer, support more test cases, more parameters, ability to jump to specific test\nfix : support ppc64le platform (issue 131)\nfix : Issue 52 (malicious address space overflow in 32-bits mode when using large custom format)\nfix : Makefile : minor issue 130 : header files permissions\n\nr117:\nAdded : man pages for lz4c and lz4cat\nAdded : automated tests on Travis, thanks to Takayuki Matsuoka !\nfix : block-dependency command line (issue 127)\nfix : lz4fullbench (issue 128)\n\nr116:\nhotfix (issue 124 & 125)\n\nr115:\nAdded : lz4cat utility, installed on POSX systems (issue 118)\nOS-X compatible compilation of dynamic library (issue 115)\n\nr114:\nMakefile : library correctly compiled with -O3 switch (issue 114)\nMakefile : library compilation compatible with clang\nMakefile : library is versioned and linked (issue 119)\nlz4.h : no more static inline prototypes (issue 116)\nman : improved header/footer (issue 111)\nMakefile : Use system default $(CC) & $(MAKE) variables (issue 112)\nxxhash : updated to r34\n\nr113:\nLarge decompression speed improvement for GCC 32-bits. Thanks to Valery Croizier !\nLZ4HC : Compression Level is now a programmable parameter (CLI from 4 to 9)\nSeparated IO routines from command line (lz4io.c)\nVersion number into lz4.h (suggested by Francesc Alted)\n\nr112:\nquickfix\n\nr111 :\nMakefile : added capability to install libraries\nModified Directory tree, to better separate libraries from programs.\n\nr110 :\nlz4 & lz4hc : added capability to allocate state & stream state with custom allocator (issue 99)\nfuzzer & fullbench : updated to test new functions\nman : documented -l command (Legacy format, for Linux kernel compression) (issue 102)\ncmake : improved version by Mika Attila, building programs and libraries (issue 100)\nxxHash : updated to r33\nMakefile : clean also delete local package .tar.gz\n\nr109 :\nlz4.c : corrected issue 98 (LZ4_compress_limitedOutput())\nMakefile : can specify version number from makefile\n\nr108 :\nlz4.c : corrected compression efficiency issue 97 in 64-bits chained mode (-BD) for streams > 4 GB (thanks Roman Strashkin for reporting)\n\nr107 :\nMakefile : support DESTDIR for staged installs. Thanks Jorge Aparicio.\nMakefile : make install installs both lz4 and lz4c (Jorge Aparicio)\nMakefile : removed -Wno-implicit-declaration compilation switch\nlz4cli.c : include <stduni.h> for isatty() (Luca Barbato)\nlz4.h : introduced LZ4_MAX_INPUT_SIZE constant (Shay Green)\nlz4.h : LZ4_compressBound() : unified macro and inline definitions (Shay Green)\nlz4.h : LZ4_decompressSafe_partial() : clarify comments (Shay Green)\nlz4.c : LZ4_compress() verify input size condition (Shay Green)\nbench.c : corrected a bug in free memory size evaluation\ncmake : install into bin/ directory (Richard Yao)\ncmake : check for just C compiler (Elan Ruusamae)\n\nr106 :\nMakefile : make dist modify text files in the package to respect Unix EoL convention\nlz4cli.c : corrected small display bug in HC mode\n\nr105 :\nMakefile : New install script and man page, contributed by Prasad Pandit\nlz4cli.c : Minor modifications, for easier extensibility\nCOPYING  : added license file\nLZ4_Streaming_Format.odt : modified file name to remove white space characters\nMakefile : .exe suffix now properly added only for Windows target\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2705078125,
          "content": "LZ4 - Extremely fast compression\n================================\n\nLZ4 is lossless compression algorithm,\nproviding compression speed > 500 MB/s per core,\nscalable with multi-cores CPU.\nIt features an extremely fast decoder,\nwith speed in multiple GB/s per core,\ntypically reaching RAM speed limits on multi-core systems.\n\nSpeed can be tuned dynamically, selecting an \"acceleration\" factor\nwhich trades compression ratio for faster speed.\nOn the other end, a high compression derivative, LZ4_HC, is also provided,\ntrading CPU time for improved compression ratio.\nAll versions feature the same decompression speed.\n\nLZ4 is also compatible with [dictionary compression](https://github.com/facebook/zstd#the-case-for-small-data-compression),\nboth at [API](https://github.com/lz4/lz4/blob/v1.8.3/lib/lz4frame.h#L481) and [CLI](https://github.com/lz4/lz4/blob/v1.8.3/programs/lz4.1.md#operation-modifiers) levels.\nIt can ingest any input file as dictionary, though only the final 64KB are used.\nThis capability can be combined with the [Zstandard Dictionary Builder](https://github.com/facebook/zstd/blob/v1.3.5/programs/zstd.1.md#dictionary-builder),\nin order to drastically improve compression performance on small files.\n\n\nLZ4 library is provided as open-source software using BSD 2-Clause license.\n\n\n|Branch      |Status   |\n|------------|---------|\n|dev         | [![Build status][AppveyorDevBadge]][AppveyorLink]  |\n\n[AppveyorDevBadge]: https://ci.appveyor.com/api/projects/status/github/lz4/lz4?branch=dev&svg=true \"Windows test suite\"\n[AppveyorLink]: https://ci.appveyor.com/project/YannCollet/lz4-1lndh\n\n\nBenchmarks\n-------------------------\n\nThe benchmark uses [lzbench], from @inikep\ncompiled with GCC v8.2.0 on Linux 64-bits (Ubuntu 4.18.0-17).\nThe reference system uses a Core i7-9700K CPU @ 4.9GHz (w/ turbo boost).\nBenchmark evaluates the compression of reference [Silesia Corpus]\nin single-thread mode.\n\n[lzbench]: https://github.com/inikep/lzbench\n[Silesia Corpus]: http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia\n\n|  Compressor             | Ratio   | Compression | Decompression |\n|  ----------             | -----   | ----------- | ------------- |\n|  memcpy                 |  1.000  | 13700 MB/s  |  13700 MB/s   |\n|**LZ4 default (v1.9.0)** |**2.101**| **780 MB/s**| **4970 MB/s** |\n|  LZO 2.09               |  2.108  |   670 MB/s  |    860 MB/s   |\n|  QuickLZ 1.5.0          |  2.238  |   575 MB/s  |    780 MB/s   |\n|  Snappy 1.1.4           |  2.091  |   565 MB/s  |   1950 MB/s   |\n| [Zstandard] 1.4.0 -1    |  2.883  |   515 MB/s  |   1380 MB/s   |\n|  LZF v3.6               |  2.073  |   415 MB/s  |    910 MB/s   |\n| [zlib] deflate 1.2.11 -1|  2.730  |   100 MB/s  |    415 MB/s   |\n|**LZ4 HC -9 (v1.9.0)**   |**2.721**|    41 MB/s  | **4900 MB/s** |\n| [zlib] deflate 1.2.11 -6|  3.099  |    36 MB/s  |    445 MB/s   |\n\n[zlib]: http://www.zlib.net/\n[Zstandard]: http://www.zstd.net/\n\nLZ4 is also compatible and optimized for x32 mode (`-mx32`),\nfor which it provides additional speed performance.\n\n\nInstallation\n-------------------------\n\n```\nmake\nmake install     # this command may require root permissions\n```\n\nLZ4's `Makefile` supports standard [Makefile conventions],\nincluding [staged installs], [redirection], or [command redefinition].\nIt is compatible with parallel builds (`-j#`).\n\n[Makefile conventions]: https://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html\n[staged installs]: https://www.gnu.org/prep/standards/html_node/DESTDIR.html\n[redirection]: https://www.gnu.org/prep/standards/html_node/Directory-Variables.html\n[command redefinition]: https://www.gnu.org/prep/standards/html_node/Utilities-in-Makefiles.html\n\n### Building LZ4 - Using vcpkg\n\nYou can download and install LZ4 using the [vcpkg](https://github.com/Microsoft/vcpkg) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg.exe install lz4\n\nThe LZ4 port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nDocumentation\n-------------------------\n\nThe raw LZ4 block compression format is detailed within [lz4_Block_format].\n\nArbitrarily long files or data streams are compressed using multiple blocks,\nfor streaming requirements. These blocks are organized into a frame,\ndefined into [lz4_Frame_format].\nInteroperable versions of LZ4 must also respect the frame format.\n\n[lz4_Block_format]: doc/lz4_Block_format.md\n[lz4_Frame_format]: doc/lz4_Frame_format.md\n\n\nOther source versions\n-------------------------\n\nBeyond the C reference source,\nmany contributors have created versions of lz4 in multiple languages\n(Java, C#, Python, Perl, Ruby, etc.).\nA list of known source ports is maintained on the [LZ4 Homepage].\n\n[LZ4 Homepage]: http://www.lz4.org\n\n### Packaging status\n\nMost distributions are bundled with a package manager\nwhich allows easy installation of both the `liblz4` library\nand the `lz4` command line interface.\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/lz4.svg?columns=4&exclude_unsupported=1)](https://repology.org/project/lz4/versions)\n\n\n### Special Thanks\n\n- Takayuki Matsuoka, aka @t-mat, for exceptional first-class support throughout the lifetime of this project\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7001953125,
          "content": "# Security Policy\n\nIf you have discovered a security vulnerability in this project, please report it\nprivately. **Do not disclose it as a public issue.** This gives me time to work with you\nto fix the issue before public exposure, reducing the chance that the exploit will be\nused before a patch is released.\n\nPlease submit the report by filling out\n[this form](https://github.com/lz4/lz4/security/advisories/new).\n\nPlease provide the following information in your report:\n\n- A description of the vulnerability and its impact\n- How to reproduce the issue\n\nThis project is maintained by a single maintainer on a reasonable-effort basis. As such,\nI ask that you give me 90 days to work on a fix before public exposure.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 4.4130859375,
          "content": "version: 1.0.{build}\nenvironment:\n  matrix:\n  - COMPILER: \"gcc\"\n    PLATFORM: \"mingw32\"\n  - COMPILER: \"visual\"\n    CONFIGURATION: \"Debug\"\n    PLATFORM: \"Win32\"\n  - COMPILER: \"visual\"\n    CONFIGURATION: \"Release\"\n    PLATFORM: \"x64\"\n  - COMPILER: \"visual\"\n    CONFIGURATION: \"Release\"\n    PLATFORM: \"Win32\"\n  - COMPILER: \"clang\"\n    PLATFORM: \"mingw64\"\n  - COMPILER: \"gcc\"\n    PLATFORM: \"mingw64\"\n\ninstall:\n  - ECHO Installing %COMPILER% %PLATFORM% %CONFIGURATION%\n  - MKDIR bin\n  - if [%COMPILER%]==[visual] (\n      if [%PLATFORM%]==[x64] (\n        SET ADDITIONALPARAM=/p:LibraryPath=\"C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\\lib\\x64;c:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\lib\\amd64;C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\;C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\lib\\amd64;\"\n      )\n    ) else (\n      SET \"PATH_MINGW32=c:\\MinGW\\bin;c:\\MinGW\\usr\\bin\" &&\n      SET \"PATH_MINGW64=c:\\msys64\\mingw64\\bin;c:\\msys64\\usr\\bin\" &&\n      COPY C:\\MinGW\\bin\\mingw32-make.exe C:\\MinGW\\bin\\make.exe &&\n      COPY C:\\MinGW\\bin\\gcc.exe C:\\MinGW\\bin\\cc.exe\n    )\n\nbuild_script:\n  - if [%PLATFORM%]==[mingw32] SET PATH=%PATH_MINGW32%;%PATH%\n  - if [%PLATFORM%]==[mingw64] SET PATH=%PATH_MINGW64%;%PATH%\n  - ECHO *** &&\n      ECHO Building %COMPILER% %PLATFORM% %CONFIGURATION% &&\n      ECHO ***\n  - if [%COMPILER%]==[gcc] (\n      echo ----- %TIME% &&\n      gcc -v &&\n      make -v &&\n      echo ----- &&\n      make -j -C programs lz4 V=1 &&\n      make -j -C tests fullbench V=1 &&\n      make -j -C tests fuzzer V=1 &&\n      make -j -C lib lib V=1\n    )\n  - if [%COMPILER%]==[clang] (\n      echo ----- %TIME% &&\n      clang -v &&\n      make -v &&\n      echo ----- &&\n      set CFLAGS=\"--target=x86_64-w64-mingw32 -Werror -Wconversion -Wno-sign-conversion\" &&\n      make -j -C programs lz4 CC=clang V=1    &&\n      make -j -C tests fullbench CC=clang V=1 &&\n      make -j -C tests fuzzer CC=clang V=1    &&\n      make -j -C lib lib CC=clang V=1\n    )\n  - if [%COMPILER%]==[gcc] (\n      MKDIR bin\\dll bin\\static bin\\example bin\\include &&\n      COPY tests\\fullbench.c bin\\example\\ &&\n      COPY lib\\xxhash.c bin\\example\\ &&\n      COPY lib\\xxhash.h bin\\example\\ &&\n      COPY lib\\lz4.h bin\\include\\ &&\n      COPY lib\\lz4hc.h bin\\include\\ &&\n      COPY lib\\lz4frame.h bin\\include\\ &&\n      COPY lib\\liblz4.a bin\\static\\liblz4_static.lib &&\n      COPY lib\\liblz4.dll* bin\\dll\\ &&\n      COPY lib\\dll\\example\\Makefile bin\\example\\ &&\n      COPY lib\\dll\\example\\fullbench-dll.* bin\\example\\ &&\n      COPY lib\\dll\\example\\README.md bin\\ &&\n      COPY programs\\lz4.exe bin\\lz4.exe\n    )\n  - if [%COMPILER%]==[gcc] if [%PLATFORM%]==[mingw64] (\n      7z.exe a -bb1 bin\\lz4_x64.zip NEWS .\\bin\\lz4.exe .\\bin\\README.md .\\bin\\example .\\bin\\dll .\\bin\\static .\\bin\\include &&\n      appveyor PushArtifact bin\\lz4_x64.zip\n    )\n  - if [%COMPILER%]==[gcc] if [%PLATFORM%]==[mingw32] (\n      7z.exe a -bb1 bin\\lz4_x86.zip NEWS .\\bin\\lz4.exe .\\bin\\README.md .\\bin\\example .\\bin\\dll .\\bin\\static .\\bin\\include &&\n      appveyor PushArtifact bin\\lz4_x86.zip\n    )\n  - if [%COMPILER%]==[visual] (\n      ECHO *** %TIME% &&\n      ECHO *** Building Visual Studio 2012 %PLATFORM%\\%CONFIGURATION% &&\n      ECHO *** &&\n      msbuild \"build\\VS2022\\lz4.sln\" /m /verbosity:minimal /property:PlatformToolset=v110 /property:Optimize=false /t:Clean,Build /p:Platform=%PLATFORM% /p:Configuration=%CONFIGURATION% /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\" &&\n      ECHO *** %TIME% &&\n      ECHO *** Building Visual Studio 2013 %PLATFORM%\\%CONFIGURATION% &&\n      ECHO *** &&\n      msbuild \"build\\VS2022\\lz4.sln\" /m /verbosity:minimal /property:PlatformToolset=v120 /property:Optimize=false /t:Clean,Build /p:Platform=%PLATFORM% /p:Configuration=%CONFIGURATION% /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\" &&\n      COPY build\\VS2022\\bin\\%PLATFORM%_%CONFIGURATION%\\*.exe programs\\\n    ) else (\n      COPY tests\\*.exe programs\\\n    )\n\ntest_script:\n  - ECHO *** %TIME% &&\n      ECHO Testing %COMPILER% %PLATFORM% %CONFIGURATION% &&\n      ECHO ***\n  - if not [%COMPILER%]==[unknown] (\n      CD programs &&\n      lz4 -h &&\n      lz4 -i1b lz4.exe &&\n      lz4 -i1b5 lz4.exe &&\n      lz4 -i1b10 lz4.exe &&\n      lz4 -i1b15 lz4.exe &&\n      echo ------- lz4 tested ------- &&\n      fullbench.exe -i0 fullbench.exe &&\n      echo Launching test program fuzzer.exe &&\n      fuzzer.exe -v -T20s\n    )\n  - ECHO *** %TIME%\n\nartifacts:\n  - path: bin\\lz4_x64.zip\n  - path: bin\\lz4_x86.zip\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "ossfuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "programs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}