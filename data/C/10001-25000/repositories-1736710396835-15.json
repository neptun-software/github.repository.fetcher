{
  "metadata": {
    "timestamp": 1736710396835,
    "page": 15,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "micropython/micropython",
      "stars": 19708,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 2.3076171875,
          "content": "# all: Prune trailing whitespace.\ndda9b9c6da5d3c31fa8769e581a753e95a270803\n\n# all: Remove the \"STATIC\" macro and just use \"static\" instead.\ndecf8e6a8bb940d5829ca3296790631fcece7b21\n\n# renesas-ra: Fix spelling mistakes found by codespell.\nb3f2f18f927fa2fad10daf63d8c391331f5edf58\n\n# all: Update Python formatting to ruff-format.\nbbd8760bd9a2302e5abee29db279102bb11d7732\n\n# all: Fix various spelling mistakes found by codespell 2.2.6.\ncf490a70917a1b2d38ba9b58e763e0837d0f7ca7\n\n# all: Fix spelling mistakes based on codespell check.\nb1229efbd1509654dec6053865ab828d769e29db\n\n# top: Update Python formatting to black \"2023 stable style\".\n8b2748269244304854b3462cb8902952b4dcb892\n\n# all: Reformat remaining C code that doesn't have a space after a comma.\n5b700b0af90591d6b1a2c087bb8de6b7f1bfdd2d\n\n# ports: Reformat more C and Python source code.\n5c32111fa0e31e451b0f1666bdf926be2fdfd82c\n\n# all: Update Python formatting to latest Black version 22.1.0.\nab2923dfa1174dc177f0a90cb00a7e4ff87958d2\n\n# all: Update Python formatting to latest Black version 21.12b0.\n3770fab33449a5dadf8eb06edfae0767e75320a6\n\n# tools/gen-cpydiff.py: Fix formatting of doc strings for new Black.\n0f78c36c5aa458a954eed39a46942209107a553e\n\n# tests/run-tests.py: Reformat with Black.\n2a38d7103672580882fb621a5b76e8d26805d593\n\n# all: Update Python code to conform to latest black formatting.\n06659077a81b85882254cf0953c33b27614e018e\n\n# tools/uncrustify: Enable more opts to remove space between func and '('.\n77ed6f69ac35c1663a5633a8ee1d8a2446542204\n\n# tools/codeformat.py: Include extmod/{btstack,nimble} in code formatting.\n026fda605e03113d6e753290d65fed774418bc53\n\n# all: Format code to add space after C++-style comment start.\n84fa3312cfa7d2237d4b56952f2cd6e3591210c4\n\n# tests: Format all Python code with black, except tests in basics subdir.\n3dc324d3f1312e40d3a8ed87e7244966bb756f26\n\n# all: Remove spaces inside and around parenthesis.\n1a3e386c67e03a79eb768cb6e9f6777e002d6660\n\n# all: Remove spaces between nested paren and inside function arg paren.\nfeb25775851ba0c04b8d1013716f442258879d9c\n\n# all: Reformat C and Python source code with tools/codeformat.py.\n69661f3343bedf86e514337cff63d96cc42f8859\n\n# stm32/usbdev: Convert files to unix line endings.\nabde0fa2267f9062b28c3c015d7662a550125cc6\n\n# all: Remove trailing spaces, per coding conventions.\n761e4c7ff62896c7d8f8c3dfc3cc98a4cc4f2f6f\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.7177734375,
          "content": "# Per default everything gets normalized and gets LF line endings on checkout.\n* text eol=lf\n\n# These will always have CRLF line endings on checkout.\n*.vcxproj text eol=crlf\n*.props text eol=crlf\n*.bat text eol=crlf\n\n# These are binary so should never be modified by git.\n*.a binary\n*.ico binary\n*.png binary\n*.jpg binary\n*.dxf binary\n*.mpy binary\n*.der binary\n\n# These should also not be modified by git.\ntests/basics/string_cr_conversion.py -text\ntests/basics/string_crlf_conversion.py -text\nports/stm32/pybcdc.inf_template -text\nports/stm32/usbhost/** -text\nports/cc3200/hal/aes.c -text\nports/cc3200/hal/aes.h -text\nports/cc3200/hal/des.c -text\nports/cc3200/hal/i2s.c -text\nports/cc3200/hal/i2s.h -text\nports/cc3200/version.h -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.623046875,
          "content": "# This .gitignore file is intended to be minimal.\n#\n# If you find that you need additional rules, such as IDE temporary\n# files, please do so either via a global .gitignore file (registered\n# with core.excludesFile), or by adding private repository-specific\n# rules to .git/info/exclude.  See https://git-scm.com/docs/gitignore\n# for more information.\n\n# Build directories\nbuild/\nbuild-*/\ndocs/genrst/\n\n# Test failure outputs and intermediate artefacts\ntests/results/*\ntests/ports/unix/ffi_lib.so\n\n# Python cache files\n__pycache__/\n\n# Customized Makefile/project overrides\nGNUmakefile\nuser.props\n\n# MacOS desktop metadata files\n.DS_Store\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 2.3779296875,
          "content": "[submodule \"lib/axtls\"]\n\tpath = lib/axtls\n\turl = https://github.com/micropython/axtls.git\n[submodule \"lib/libffi\"]\n\tpath = lib/libffi\n\turl = https://github.com/libffi/libffi\n[submodule \"lib/lwip\"]\n\tpath = lib/lwip\n\turl = https://github.com/lwip-tcpip/lwip.git\n[submodule \"lib/berkeley-db-1.xx\"]\n\tpath = lib/berkeley-db-1.xx\n\turl = https://github.com/micropython/berkeley-db-1.xx\n[submodule \"lib/stm32lib\"]\n\tpath = lib/stm32lib\n\turl = https://github.com/micropython/stm32lib\n\tbranch = work-F0-1.9.0+F4-1.16.0+F7-1.7.0+G0-1.5.1+G4-1.3.0+H7-1.6.0+L0-1.11.2+L1-1.10.3+L4-1.17.0+WB-1.10.0+WL-1.1.0\n[submodule \"lib/nrfx\"]\n\tpath = lib/nrfx\n\turl = https://github.com/NordicSemiconductor/nrfx.git\n[submodule \"lib/mbedtls\"]\n\tpath = lib/mbedtls\n\turl = https://github.com/ARMmbed/mbedtls.git\n[submodule \"lib/asf4\"]\n\tpath = lib/asf4\n\turl = https://github.com/adafruit/asf4\n\tbranch = circuitpython\n[submodule \"lib/tinyusb\"]\n\tpath = lib/tinyusb\n\turl = https://github.com/hathach/tinyusb\n[submodule \"lib/mynewt-nimble\"]\n\tpath = lib/mynewt-nimble\n\turl = https://github.com/micropython/mynewt-nimble.git\n[submodule \"lib/btstack\"]\n\tpath = lib/btstack\n\turl = https://github.com/bluekitchen/btstack.git\n[submodule \"lib/nxp_driver\"]\n\tpath = lib/nxp_driver\n\turl = https://github.com/hathach/nxp_driver.git\n[submodule \"lib/libhydrogen\"]\n\tpath = lib/libhydrogen\n\turl = https://github.com/jedisct1/libhydrogen.git\n[submodule \"lib/pico-sdk\"]\n\tpath = lib/pico-sdk\n\turl = https://github.com/raspberrypi/pico-sdk.git\n[submodule \"lib/fsp\"]\n\tpath = lib/fsp\n\turl = https://github.com/renesas/fsp.git\n[submodule \"lib/wiznet\"]\n\tpath = lib/wiznet5k\n\turl = https://github.com/andrewleech/wiznet_ioLibrary_Driver.git\n\t# Requires https://github.com/Wiznet/ioLibrary_Driver/pull/120\n\t# url = https://github.com/Wiznet/ioLibrary_Driver.git\n[submodule \"lib/cyw43-driver\"]\n\tpath = lib/cyw43-driver\n\turl = https://github.com/georgerobotics/cyw43-driver.git\n[submodule \"lib/micropython-lib\"]\n\tpath = lib/micropython-lib\n\turl = https://github.com/micropython/micropython-lib.git\n[submodule \"lib/protobuf-c\"]\n\tpath = lib/protobuf-c\n\turl = https://github.com/protobuf-c/protobuf-c.git\n[submodule \"lib/open-amp\"]\n\tpath = lib/open-amp\n\turl = https://github.com/OpenAMP/open-amp.git\n[submodule \"lib/libmetal\"]\n\tpath = lib/libmetal\n\turl = https://github.com/OpenAMP/libmetal.git\n[submodule \"lib/arduino-lib\"]\n\tpath = lib/arduino-lib\n\turl = https://github.com/arduino/arduino-lib-mpy.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.8740234375,
          "content": "repos:\n  - repo: local\n    hooks:\n      - id: codeformat\n        name: MicroPython codeformat.py for changed C files\n        entry: tools/codeformat.py -v -c -f\n        language: python\n      - id: verifygitlog\n        name: MicroPython git commit message format checker\n        entry: tools/verifygitlog.py --check-file --ignore-rebase\n        language: python\n        verbose: true\n        stages: [commit-msg]\n  - repo: https://github.com/charliermarsh/ruff-pre-commit\n    # Version should be kept in sync with .github/workflows/ruff.yml\n    rev: v0.1.3\n    hooks:\n      - id: ruff\n      - id: ruff-format\n  - repo: https://github.com/codespell-project/codespell\n    # Version should be kept in sync with .github/workflows/codespell.yml\n    rev: v2.2.6\n    hooks:\n      - id: codespell\n        name: Spellcheck for changed files (codespell)\n        additional_dependencies:\n          - tomli\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS",
          "type": "blob",
          "size": 42.22265625,
          "content": "The MicroPython project was proudly and successfully crowdfunded\nvia a Kickstarter campaign which ended on 13th December 2013.  The\nproject was supported by 1923 very generous backers, who pledged\nfor a total of 2320 pyboards.\n\nDamien George, the project creator, is grateful to the people\nlisted below (and others who asked not to be named), whose support\nof the project help make the code in this repository what it is\ntoday.  The names appear in order of pledging.\n\n    3 Cliff Senkbeil\n    4 MacDefender (http://www.macdefender.org)\n   11 Shaun Walker - http://theshaun.com\n   12 Robert Joscelyne\n   17 Peter Simon, Germany\n   18 theNetImp\n   21 Eamonn Maguire\n   22 Rob Knegjens\n   27 Greg, https://www.logre.eu\n   28 Rick S\n   30 Norman Jaffe (OpenDragon)\n   34 UltraBob was here.\n   35 Geoffrey R. Thompson\n   36 MrAtoni\n   40 Proud to be a backer of Micro Python, Phil C. United Kingdom.\n   42 www.babybadger.co.uk\n   45 Mert\n   46 Miles Cederman-Haysom\n   47 unixarmy.com\n   52 Proud to be here! Tonton Pommes\n   54 Espen Sae-Tang Ottersen\n   56 howang.hk\n   58 Innovatology\n   59 Marzsman\n   63 Tristan A. Hearn\n   64 Patrick Clarke\n   65 Bryan Lyon\n   70 Craig Burkhead\n   72 Dr Igor Vizir\n   73 Steve Iltis, @steven_iltis\n   79 www.giacomo.inches.ch\n   80 Alexander Gordeyev\n   81 Steve Conklin www.ai4qr.com\n   83 n1c0la5\n   84 Matthew R. Johnson\n   86 Jeppe Rishede\n   87 Kirill Zakharenko - Russian Federation\n   88 beltwaybureau.com\n   93 felix svoboda\n   95 Smart\n   96 Stephen Goudge\n   97 Dr Richard Whitaker, www.drrich.co.uk, UK\n   99 Tim Robertson\n  101 Rudy De Volder, www.devolder.be,  Belgium\n  104 August H., Wien\n  107 Jason Hsu\n  109 dstensnes\n  110 Joe Reynolds (professorlamp)\n  112 Michael Davies (AU) - @butterparty @spaceduststudio\n  113 Jim Kirk, Westborough, MA, USA\n  114 yfnt\n  117 Even when it looks like someone is reaching for blue sky. Some days you just have to blindly support that dreamer.\n  118 G. Todd Vaules - todd.vaules.net\n  122 Gunnar Wehrhahn\n  124 Eric Masser\n  126 Vaibhav Sagar\n  128 Eric Wallstedt\n  129 Richard G Wiater\n  130 Toby Nance\n  132 Michael Fogleman\n  133 Snepo Research www.snepo.com Gary says Hi!\n  137 nic gihl\n  138 Felix Yuan\n  139 mmhanif\n  141 James Snyder\n  144 roddyr2\n  146 Richard Jones <http://mechanicalcat.net/richard>\n  147 Jon-Eric Simmons\n  148 Craig \"The Coder\" Dunn\n  150 Jesse S (USA)\n  151 Matt I. - github.com/pengii23\n  153 Seth Borders - sethborders.com\n  155 David Zemon (http://david.zemon.name)\n  156 Garry DuBose\n  157 Apeiron Systems\n  158 BAR\n  160 Jakob Hedman\n  163 Bryan Moffatt\n  165 Moises Lorenzo, Tenerife Isl.\n  166 Erik H.\n  170 Peter George\n  171 Nikolas Akerblom\n  174 Chris (@chassing)\n  176 Wei-Ning Huang\n  178 Edd Barrett, UK\n  179 Alec Langford\n  180 Shunya Sato\n  181 Serge GUILLAUME\n  183 Dr. Ross A Lumley\n  184 Dorian Pula\n  189 Tendayi Mawushe\n  190 SDanziger\n  191 Sean O'Donnell\n  192 Kevin McLaughlin\n  193 Tommy Allen\n  194 Beedlebub\n  195 Brad Howes\n  196 Mike B\n  200 Aleš Bublík\n  202 David Dever\n  206 Danilo Bargen, https://dbrgn.ch/\n  209 Brendan Curran-Johnson\n  210 Piotr Maliński http://www.rkblog.rk.edu.pl\n  211 SEE Co. - Science, Engineering and Education Co. - www.seeco.us\n  215 Richard Lancaster\n  218 Bilbo Baggins from Middle Zealand\n  219 Ollie Guy\n  221 Shlomo Zippel\n  222 Andy Kenny\n  223 Double-O-ren\n  226 For the pleasure of @tinproject\n  229 mfr\n  230 Eric Floehr\n  232 Matt from Adp.EU.Com\n  234 Joanna Tustanowska & Wojciech Bederski\n  235 Eric LeBlanc\n  236 Siggy , Belgium\n  238 Mauro De Giorgi\n  239 Belug http://belug.ca/\n  241 Arik Baratz - @arikb\n  242 Zvika Palkovich\n  243 Yves Dorfsman - yves at zioup dot com\n  244 Asad Ansari, Canada\n  245 Brandon Bennett\n  246 Christoph Bluoss\n  248 Konstantin Renner\n  249 Abtin Afshar\n  250 A. Soltani\n  251 Jon Mills\n  256 NoisyGecko\n  258 Lothilius\n  262 Jay Deiman\n  263 flo at twigs dot de\n  265 _Mark_ eichin at thok dot org\n  267 Adrian Astley\n  268 aknerats[::-1]\n  271 @robberwick\n  272 Daniele Lacamera\n  273 Thanks to M. Derome\n  275 Paul Paradigm, Australia\n  276 lyuden\n  277 www.SamuelJohn.de\n  279 John Pinner, funthyme at gmail dot com\n  280 Michael and Vicky Twomey-Lee\n  281 Kenneth Ljungqvist\n  292 Karin Beitins, Australia\n  295 Nick Johnson\n  297 Chris Cole  U.K.\n  298 The planet Andete is famous for its killer edible poets.\n  302 Patrick B (aged 11)\n  304 Chris Mason, Australia\n  306 Steven Foster\n  308 Pat Fleury, Andrew Hodgson\n  311 @moneywithwings\n  313 Neil Stephen\n  314 Cory A. Johannsen\n  315 Massimo Di Stefano - geofemengineering.it - Italy\n  317 James Luscher, Madison, Wisconsin, USA\n  319 Lindsay Watt\n  320 Nils Fischbeck\n  324 Peter J. Farrell - Maestro Publishing, LLC - Minneapolis, MN, USA\n  325 Alex Willmer (@moreati)\n  328 T.R. Renicker\n  329 William B. Phelps\n  330 David Goodger\n  331 Viktoriya Skoryk\n  334 JR Rickerson\n  336 Keven Webb\n  338 www.hcfengineering.com\n  341 Larry Lab Rat, Shalford.\n  342 Rob Hetland\n  343 Brush Technology (NZ)\n  346 Jason Fehr\n  347 Olivier Vigneresse\n  348 Nano Gennari, me at nngn dot net, Brasilia, Brazil\n  352 Petr Viktorin (http://encukou.cz)\n  355 Karijn Wessing (IN2TECH)\n  356 Arsham Hatambeiki\n  358 Alvaro Rivera-Rei\n  360 Nolan & Theo Baldwin\n  362 Tyler Baker, USA\n  363 Russell Warren (Canada)\n  365 Aaron Peterson\n  366 Al Billings\n  367 Jeremy Herbert\n  372 Dimitrios Bogiatzoules, www.bogiatzoules.de, Germany\n  375 Paul Nicholls\n  376 Robert F. Brost\n  378 Aideen (Cambridge, UK) - Very happy backer and follower of this great project\n  379 Caelan Borowiec\n  380 Caroline, Canada - carolinesimpson.ca\n  382 Rikard Anglerud\n  383 Scott Will\n  384 Jussi Ylanen\n  385 @joshbapiste\n  387 spongefile\n  389 Keith Baston\n  392 Holger Steinlechner\n  394 sent by State mail service\n  398 N.Pearce, Wells UK - @t #ashtag UK\n  399 Paid up & stood back;;\n  401 Mike M. Tempe, AZ, USA\n  406 Brandon Jasper\n  407 Dan Mahoney\n  411 George Bushnell, for use in CPSS\n  412 Per Konradsson\n  413 Supported by afinzel\n  417 Tom Igoe\n  418 Jonathan Saggau\n  419 Chris Allick http://chrisallick.com\n  420 joshuaalbers.com\n  423 B. Adryan\n  432 Tim Fuchs\n  433 steven antalics\n  434 BezouwenR\n  435 Andrew Addison\n  436 Hubert de L'arrêtdubus - France\n  437 Salim Fadhley\n  438 Ben Hockley\n  439 Geoffrey Webb\n  441 Vladimir Mikulik\n  442 7 Elements & Troy Benjegerdes - hozer at hozed dot org\n  443 Pashakun\n  444 Craig Barnes, UK\n  445 Andres Ayala\n  446 Stonly Baptiste (urban.us)\n  448 Brian Conner\n  452 Jeremy Blum (jeremyblum.com)\n  454 Pebble Technology\n  455 Andrew\n  456 Jeffrey Allen Randorf, PE PhD\n  457 J.A.Zaratiegui a.k.a. Zara\n  459 simon.vc and hack.rs\n  462 La vida es para vivirla y ser feliz, de esa forma damos gracias por tan gran regalo!\n  463 Alistair Walsh\n  469 fun, Ireland\n  474 martijnthe.nl\n  479 Andreas Kobara\n  486 Armanda\n  487 Richard Myhill\n  488 Ash Gibbons\n  489 Glenn Franxman HackerMojo.com\n  492 Russell Durrett\n  494 Pieter Ennes\n  495 Tom Gross, Washington D.C.\n  496 Mark Schafer\n  497 Sandro Dutra, Brazil\n  500 Can Bulbul\n  501 Chih-Chun Chen, http://abmcet.net/Chih-Chun_Chen/home.html\n  502 Lost Property Bureau Ltd\n  503 skakz\n  504 Chad Cooper\n  505 Makhan Virdi, mlvirdi.com, InfinityXLabs.com, USA\n  506 Glenn Ruben Bakke, Norway\n  507 Alasdair Allan\n  509 dlbrandon\n  511 Dr J Garcia, Sweden\n  513 Tiago Vieira\n  518 Team ME\n  519 OBD Solutions (http://www.obdsol.com)\n  520 @pors\n  521 Joo Chew Ang\n  523 garbas\n  526 http://epoz.org/\n  527 J. Sabater\n  530 José-María Súnico\n  537 Erfundnix\n  538 Tontonisback Belgium\n  539 Greg Benson, Professor, University of San Francisco\n  542 Thomas Sarlandie aka @sarfata\n  545 JanTheMan kickstarter at embedded-systems dot craftx dot biz\n  546 Chuhan Frank Qin\n  549 Peb R Aryan, Indonesia\n  553 Johan Deimert, http://www.ldchome.org\n  555 Conny Sjöblom / Finland\n  558 AndyboyH, UK\n  559 Anthony Lupinetti\n  561 Travis Travelstead\n  566 Siegfried Boyd Isidro-Cloudas\n  567 G. Schroeer\n  568 mmths, http://randomaccessmemory.at/\n  570 Andy Miller - NZ..\n  571 Rodolfo Lara from México\n  572 Gary Patton Wolfe\n  574 Vend-lab Russia\n  578 Super Job! FXF\n  579 Oliver Heggelbacher, www.kickdrive.de\n  581 James Husum\n  585 David Lodge\n  587 Tess\n  592 PR Taylor\n  593 6306665119\n  598 Jorg Bliesener, Brazil - www.bliesener.com\n  602 Rodrigo, Germany\n  605 Tanja Kaiser, www.mrsminirobot.de, Germany\n  606 Franco Ponticelli - www.weblob.net\n  608 Piet Hoffman\n  609 Paul Cunnane\n  610 Balazs Kinszler\n  611 Nathan Ramella (synthesizerpatel)\n  612 Tyler Jones (squirly)\n  613 James Saffery\n  614 Christoffer Sjowall\n  615 Iman Shames\n  616 Thomas Dejanovic, Australia.\n  618 Tom Alker\n  619 Matt Davis, UK\n  621 Design for the real world! @UXnightingale\n  622 Budd Van Lines\n  624 __Gio__\n  628 Chew Kok Hoor\n  630 Santiago Alarcon, Thanks Damien for Micro Python\n  632 hardtoneselector\n  633 supported by Chris Bunker\n  634 Sebus - France\n  635 Mechanical Men Sweden\n  638 A Fellow Electronics Enthusiast\n  639 Stan Seibert\n  642 Dave Curtis\n  652 Sebastian Ross - www.ross.sx\n  653 Julien Goodwin\n  654 Reinoud de Lange, the Netherlands\n  655 carl beck\n  659 John Gaidimas\n  660 Tyler Eckwright\n  661 Keith Rome (Wintellect - http://www.wintellect.com/blogs/krome)\n  662 Kashev Dalmia - kashevdalmia.com\n  666 Alberto Martín de la Torre\n  667 Niels Kjøller Hansen\n  668 pmst - Italy\n  671 Sergio Conde Gómez (skgsergio)\n  672 Micromint, www.micromint.com\n  673 Xie Yanbo, China\n  675 Thank you\n  677 Kacem Ben Dhiab\n  679 CornishSteve\n  680 Daniel Wood, Warrington, UK.\n  682 Greg \"GothAck\" Miell\n  688 Matt Williams & Sam Carter\n  691 Frédéric Lasnier\n  694 Tim K\n  697 Joshua Clarke, Guernsey!\n  700 daynewaterlow.com\n  703 Scott Winder\n  704 @DepletionMode\n  707 Maria Yablonina\n  710 Roger Hausermann\n  713 Crazy_Owl\n  714 mike hardin usa\n  717 C. Towne Springer\n  719 ursm gruesst euch\n  720 madnis\n  727 http://itay.bazoo.org\n  729 @0atman\n  730 Jerry Gagnon\n  732 Emmanuel Boyer\n  738 suspenders\n  739 Roland Frédéric - http://www.creativeconvergence.be/\n  742 @herchu\n  745 Riley Lundquist\n  746 Go LOBOS\n  749 João Alves, http://jpralves.net, Portugal\n  751 Nick Porcino\n  753 Jack E. Wilkinson, Texas, USA\n  754 @rcarmo on Twitter/Github\n  758 Matt Manuel, www.mattmanuel.com\n  759 Padraic D. Hallinan\n  760 Rob Fairbairn\n  763 Zac Luzader\n  768 Sam Shams\n  773 terje nagel, dk\n  775 Luc LEGER\n  782 Luis M. Morales S.\n  785 Charles Edward Pax\n  786 Daryl Cumbo\n  787 Zephyris13\n  788 Wonderful project.\n  792 Sylvain Maziere\n  794 Milen\n  795 Robert Mai, Germany, hsapps.com\n  797 Angelo Compagnucci angelo.compagnucci at gmail dot com\n  801 Long Live Micro Python, airtripper.com\n  804 António M P Mendes\n  805 Marc Z.\n  809 Anoyomouse\n  810 in memory of Dan J. Schlacks III\n  817 Peter Froehlich - http://werk-schau.blogspot.com\n  818 Ahmad Albaqsami\n  821 Peter Lavelle (http://solderintheveins.co.uk)\n  822 Manuel Sagra de Diego http://manuelsagra.com/\n  823 Sam Wilson\n  824 Khalis\n  825 c't Hacks\n  828 Georg Bremer\n  830 Ward en Sanne (WenS)\n  832 javacasm http://www.elcacharreo.com Spain\n  833 mctouch\n  835 Bruce Schreiner @ www.stevenscollege.edu/electronics\n  836 Jonas\n  839 Nick Ludlam\n  840 Patrick_Law, UK\n  843 Alex Crouzen, UK\n  848 Ben Banfield-Zanin\n  850 Wouter Slegers, Your Creative Solutions <http://www.yourcreativesolutions.nl/>\n  851 Fred Zyda\n  853 Gianfranco Risaliti\n  854 Ron Hochsprung\n  858 Vianney Tran\n  862 Aaron Mahler - http://halfpress.com\n  868 Stephan Schulte, Germany\n  869 Kenneth Henderick\n  872 DaveP (www.davepeake.com)\n  873 Markus Schuss, Austria\n  876 Kyle Gordon, http://lodge.glasgownet.com\n  877 Joseph Gerard Campbell\n  881 Thanks for the board. Good luck to you. --Jason Doege\n  883 Garet McKinley\n  884 www.magtouchelectronics.co.za\n  889 Ben Johnson\n  896 Ruairi Newman\n  897 Gemma Hentsch\n  902 Alexander Steppke\n  906 Stephen Paulger\n  907 Martin Buhr, http://lonelycode.com, UK\n  912 Dale Drummond\n  913 Go Utah State\n  918 Jarturomartinez, Mexico\n  921 Barry Bourne Micro Python Supporter\n  923 Andreas Bolka\n  927 Thanks Susan, Tom, Paul, and Mark!\n  935 http://wall-y.fr\n  937 Eero af Heurlin, Finland, https://github.com/rambo/\n  938 Guillaume DAVY\n  941 Alexander Steffen\n  942 Janne \"Lietu\" Enberg\n  945 Luca 'loop' de Marinis - https://github.com/loop23\n  946 Andras Veres-Szentkiralyi http://techblog.vsza.hu/\n  948 Florian flowolf Klien (http://blog.flo.cx)\n  949 nickyb\n  951 Mark Walland, England\n  952 Ian Barfield\n  953 Andrew Murray, UK - eat my code - http://links.bloater.org/micropython\n  955 Kyle Howells\n  956 Chris Cadonic\n  957 LCS, USA: scripting___/||\\===/||\\___embedded\n  958 Sven Wegener\n  963 Kean Electronics http://www.kean.com.au/\n  964 Beandob\n  965 Don't feed the troll.\n  966 Alexis Polti (http://rose.eu.org)\n  969 Scottyler\n  971 The Dead's Own Jones\n  974 Evseev Alexey\n  976 Arnaud\n  978 Jannis Rosenbaum\n  980 paul at fontenworks dot com\n  981 John Griessen ecosensory.com USA\n  982 Tobias Ammann\n  983 Simon V.\n  984 JaWi\n  987 Ergun Kucukkose\n  989 Jonathan Piat France\n  990 Steve Pemberton\n  993 Aaron Robson\n  994 Antoine Authier\n  995 Thomas Winkler, Austria\n  997 Jannes mit dem dicken Pannes\n 1001 Joe Baker\n 1002 Jon Hylands, Canada (blog.huv.com)\n 1004 Mike Asker (aka mpymike)\n 1007 Charles V Bock - Charles at CharlesBock dot com\n 1010 Remember June 4th, 1989\n 1012 Stuart Marsden\n 1013 Herbert Graef, Stuttgart\n 1014 Arthur P, USA\n 1015 John Hall & Jeremy Armijo\n 1017 Luciano Ramalho, Python.pro.br\n 1018 Quentin Stafford-Fraser\n 1019 Marcin Walendzik Ratingpedia.eu\n 1020 Wincent Balin\n 1022 rbp\n 1024 Frank Carver ( www.frankcarver.me )\n 1026 Peter Farmer, http://geekytronics.com/\n 1029 Rubens Altimari\n 1033 Sebastian\n 1035 Gerli, Estonia\n 1036 Maurin, Switzerland\n 1037 Kevin Houlihan (http://crimsoncookie.com)\n 1039 Jon Green of Adeptium Consulting (www.adeptium.com)\n 1040 Eirik S. Mikkelsen\n 1042 Jogy Sam\n 1043 GGG\n 1045 Sean E Palmer, epimetheon.com\n 1049 Greg O'Drobinak, USA\n 1050 RaptorBird Robotics Inc\n 1051 Desmond Larsen-Rosner\n 1056 Crusty\n 1057 ArthurGuy.co.uk\n 1059 Melissa-Ivan, 14/04/2013\n 1064 Enrico Spinielli, https://github.com/espinielli\n 1066 Dave Snowdon\n 1067 Martin P. Hellwig\n 1070 Carl Clement\n 1074 Paul Taylor\n 1076 Pandemon\n 1082 Thrilled to support Damien's effort to put this together: there will no doubt be many applications for this effort and many enhancements and ports..\n 1083 Oddvar Lovaas\n 1090 BenScarb\n 1093 Www.qualnetics.com\n 1094 Manny Muro - Now Python can RULE from below as it does from above! PYTHON RULES!!! :)\n 1095 Michael Grazebrook\n 1098 Mark Shuttleworth, UK\n 1106 wyzzar\n 1110 Luca Zanetti\n 1112 Carl A Fagg\n 1115 Adam Klotblixt\n 1118 Breawn\n 1122 pippyisatruck\n 1124 Andrew \"ClothBot\" Plumb\n 1126 Realise the projects your heart beats for! Sven Wiebus (http://wiebus.tumblr.com)\n 1128 Citius Systems\n 1130 Benjamin & Reuben Fuller\n 1131 aglimme\n 1133 John Becker\n 1135 Mark Drummond\n 1138 JHProuty\n 1141 Lars Olsson Sweden\n 1144 daisuke, http://dkpyn.com\n 1145 Chris Pawley - http://www.pawley.co.uk/honey/\n 1147 Daniel from EzSBC.com\n 1149 New York Mortgage Exchange NYME.COM\n 1150 Herb Winters,USA,www.ecs87.com\n 1151 renttu\n 1159 Joe Rickerby\n 1160 john guthrie\n 1161 PUBLIC\n 1163 dobra-dobra\n 1164 Neil Reynolds, Staffordshire\n 1165 GEHoward\n 1166 Frank Delporte\n 1167 Bauer Brauner Enterprise\n 1168 Francisco Mardones\n 1169 Ryan Kirkpatrick, @rkirkpatnet, http://rkirkpat.net/\n 1170 Krister Svanlund\n 1174 Derek Patton Pearcy\n 1177 Roger Olsson, Sweden\n 1179 Jan-Niklas Braak\n 1180 Pete boy\n 1181 MilenX\n 1182 Ubbe Larsson\n 1183 Simon Freethy\n 1184 Daniel Andersson\n 1187 Daniele Procida\n 1190 Adrian Duke\n 1191 Pauline Middelink\n 1193 Ted Gueniche\n 1197 Craig Knott, University of Queensland, Australia\n 1198 Jamie Mackenzie - Australia\n 1199 ravenoak\n 1200 LucaP Luni Italy\n 1203 jacanterbury\n 1205 Bleachin, www.rhyspowell.com\n 1207 Supported by Andrew Maier via Kickstarter\n 1208 Rob, http://robjstanley.me.uk\n 1210 George Gingell\n 1213 Chris Elleman\n 1215 Jack Barham - @jackbarham - http://jackbarham.com\n 1221 Kyle Dausin\n 1222 Ben Lucker\n 1225 Gareth cheesewhisk Evans\n 1226 Jacob Forsyth\n 1227 Olof S - Germany\n 1231 Brasil\n 1233 glaslos\n 1234 Will Cooke - http://www.whizzy.org\n 1236 Andrew Wright - Canada\n 1239 Resourceful Robin\n 1240 Jay O'Neill @jayoneilluk\n 1241 Dennis G Daniels\n 1244 J. Peterson (www.saccade.com)\n 1245 Chipaca\n 1246 Nicko van Someren\n 1247 C. Cumbaa, Canada\n 1248 Gyro Gearloose was here\n 1249 Magnus Ericmats, Sweden\n 1253 Steve Wilson\n 1256 Adrian Bullock\n 1258 Sarevian & Longwall\n 1261 Skipp Savage\n 1265 Eric Nahon\n 1267 Stuart Dallas / 3ft9 Ltd\n 1270 USA\n 1271 Oliver\n 1277 jeffmcneill.com\n 1278 alnjxn\n 1283 Marc Liyanage\n 1285 Christian Lange\n 1286 Bryant Paul Umali from the Philippines\n 1290 W.B.Hill, Norwich, UK\n 1292 Michael Karliner\n 1293 Oli Larkin\n 1303 A. Pockberger\n 1304 dc - bagel\n 1305 Thadeus Arnel\n 1308 technoweenie\n 1309 Liam Welsh\n 1313 Per Thorell, Sweden\n 1314 peterlee\n 1316 Dustin Mierau\n 1317 tech-zen.tv\n 1320 Cheers from IDF :)\n 1322 www.a-d-k.de\n 1323 rixx\n 1324 @jlev\n 1325 e2e4\n 1328 Thomas J. Quinlan, London UK\n 1329 Don Bone\n 1331 Narayanamurthi\n 1333 PGS_Astra-ProjeX_Wilts\n 1337 Mark Schulz & Phillip Long, CEIT, The University of Queensland\n 1340 Tiegeng (Tim) Ren\n 1344 EMR_1344, DE\n 1348 Matt Ward, Nottingham\n 1351 Rupert\n 1352 Cory Li - http://cory.li\n 1354 Jim Davies, Brighton, UK\n 1355 Jon Watkins, UK\n 1356 Thomas, www.bitmix.de\n 1359 Markus Gritsch\n 1362 Carl H. Blomqvist\n 1371 Brian Green\n 1374 Ben Merryman\n 1375 O'Dea\n 1376 Josh Trujillo\n 1378 Daniel Halloran\n 1379 another_martin\n 1383 Thanks for innovating!\n 1385 CoderDojo Malahide\n 1397 Jacob Z\n 1398 Staffan Hillberg\n 1399 http://kim.ht\n 1402 Can't wait to plug it in!\n 1403 Márton Szinovszki\n 1405 sellorm says 'Hi!'\n 1406 Thomas Provoost\n 1411 Clive Freeman\n 1412 Norman Thomas\n 1415 Javier Llopis\n 1417 Ho Man Fai\n 1418 Anders Helland\n 1421 Richard lavanture\n 1425 Alan Churley, UK\n 1426 Robert'); DROP TABLE Students;--unicode is fun!\n 1427 Go Illini!\n 1430 MicroPy FTW\n 1431 Bryan Morrissey, www.browninnovations.com\n 1436 Krzysztof Chomski, Poland\n 1437 WellAware (USA)\n 1441 Tomas Hau\n 1443 Paul Way\n 1444 Benjamin Anderson\n 1445 Andrew Bates\n 1446 Davide Di Blasi\n 1451 Mathias Fischer\n 1453 Drexore, NL\n 1454 Marek Mroz\n 1455 Mark Easley Jr. - USA\n 1457 Joshua Warren\n 1459 Rohan Menon\n 1460 Paul Sokolovsky\n 1461 Chris Foresman, @foresmac\n 1475 USI\n 1478 Chris Emerson\n 1479 Ph. Truillet, France, http://www.irit.fr/~Philippe.Truillet\n 1480 WAB3\n 1481 Lucidologia.pl\n 1482 Ed Hardebeck | www.hardebeck.us\n 1484 Ludovic Léau-Mercier, www.coriolys.org, France\n 1487 BLUEBOBO\n 1488 Berno Kneer, Germany\n 1491 Julian Eccli\n 1494 Batman\n 1495 Manuel Núñez Sánchez\n 1496 Millie and Sadie Smith\n 1499 Ronald Eddy\n 1500 SynShop Las Vegas\n 1503 This is really cool.  - Jack Conway\n 1505 Victor Suarez, Argentina\n 1507 Renesas Electronics America\n 1509 Team\n 1513 A. Lamborn KD0ZFY\n 1514 olifink\n 1520 mike at sustainable-opportunities dot com\n 1521 luis almeida, Teresina - Brazil\n 1523 Muhammad Jamaludin\n 1524 Sdlion\n 1525 Charles Rogers\n 1526 Diego M. Aires, Brazil\n 1529 muwatt.com\n 1532 Proud supporter of microPython\n 1535 Jesus J. de Felipe\n 1536 slminneman.com -- Wow, an acknowledgement?  ...really?\n 1538 Mike (Meski) Smith\n 1541 Piero Steinger\n 1545 Alex Rembish (https://rembish.org)\n 1551 Sergey [BuG2BuG] Sobko, Russia\n 1553 Serge Krier\n 1556 Luuk Derksen\n 1561 Jimmy Caille (CH)\n 1562 Jesús Leganés Combarro \"piranna\"\n 1564 Viacheslav Olegovich Savitskiy\n 1565 Jamie Whitehorn\n 1567 Bagge Carlson\n 1568 Milan Cermak\n 1569 Matthias Lemp\n 1570 BOFG\n 1571 Johan Elmerfjord, Sweden\n 1573 Matt Finch • fnch.io\n 1574 Jean-Francois Paris\n 1575 Florian Franzen, Germany\n 1576 doganowscy.com\n 1579 Stan Yamane\n 1580 William Cirillo\n 1583 David Dibben\n 1584 Nicolás, Amelia, Luli y alecu\n 1586 Alex W\n 1591 Livia Maria Dias Tavares\n 1593 d freymann chicago il & his australian shepherd jaldi\n 1594 Barnstorm Studio, LLC\n 1595 Sashi Penta\n 1597 tflhyl\n 1598 clacktronics\n 1599 j3hyde\n 1600 Rik Williams\n 1602 Valeriy Van, Ukraine, w7software.com\n 1603 Louis Taylor - https://github.com/kragniz\n 1606 What's the derivative of (6.022 x 10^23)x? That's A(n)mol\n 1611 Bailey & Brayden Yoong Policarpio\n 1613 William Bettridge-Radford\n 1617 Urbane Jackson\n 1618 Henius\n 1622 Alister Galpin, New Zealand\n 1623 Marco Bertoldi\n 1627 Julian Pistorius\n 1628 www.neotral.com\n 1632 ChrisB\n 1633 Norbini\n 1634 Eric Rand at Brownhatsecurity.com\n 1636 Benjamin Eberle\n 1637 MG Projects bvba, Geert Maertens, Belgium\n 1640 Robson dos Santos França (Brasil)\n 1642 Udine\n 1643 Simon Critchley\n 1644 Sven Haiges, Germany\n 1646 \"silicium\" (\"silicium_one\", if \"silicium\" is busy)\n 1648 Andy O'Malia, @andyomalia\n 1650 RedCamelApps.com\n 1652 Christoph Heer\n 1653 AlisonW\n 1654 Yannick Allard (Belgium) supported this project.\n 1655 Andy Pointon, UK\n 1660 Diego Cantalapiedra\n 1664 Pepillou\n 1670 Sonny Cannon\n 1671 Rick W\n 1672 David Chan, USA\n 1674 Philip Rowlands\n 1675 dieresys\n 1676 T.R. Fullhart\n 1683 Oleg Sidorkin\n 1686 Tatsuro Yasukawa\n 1687 Brad Smith, Somerville MA, USA\n 1688 kristoffervikhansen.com\n 1690 Nice Project de W6AKB Alan Biocca\n 1691 Hiss Hisss Hissss Hiss Hiss Hissssssss\n 1692 Alan Kennedy\n 1698 ElChessu\n 1701 Flower Craswell\n 1702 David Fontenot\n 1707 To innovation & creativity. Tony J Winter\n 1708 Joakim Hentula\n 1711 Michael Schaefer\n 1713 Brody Radford ~ www.brodyradford.com\n 1714 Charles Durrant\n 1715 Rodrigo S.\n 1718 Dima Shylo\n 1719 Jiahao James Jian\n 1722 Helen Wilson, Christ's Hospital\n 1726 Martin Aule, http://hackest.org/\n 1727 İsmail Etem Tezcan, Rasteda\n 1728 Charlie \"Blackfrog\" Sizer\n 1729 Matloob Qureshi\n 1730 Travis Saul http://travissaul.com\n 1731 Michael Cavins\n 1733 Peter Köllensperger, Norway\n 1734 Anne Harrison\n 1736 Peter Bradeen\n 1739 Fredrik Luthander\n 1740 Nick LaRosa\n 1744 Aladuino\n 1745 dgrebb\n 1746 Truls Unstad\n 1748 Jesus Saves\n 1750 Andy Stannard (@rockmonkey)\n 1751 Daniel Atkinson\n 1755 John Potter\n 1758 Ian V\n 1760 David Leinbach\n 1761 nemec-automation.com\n 1765 Supported by JoW with Hardwired TCP/IP from www.WIZnet.eu\n 1767 misskniss, Boise Idaho. It is our responsibility to code the freedom we want to see in the world.\n 1768 Jeff Vahue - Knowlogic Software Corp.\n 1769 Pat Molloy\n 1770 Greg Maxwell  gregmaxwell-at-mac-dot-com\n 1771 Rich Robinson\n 1773 Ken Corey @ flippinbits.com\n 1782 Acknowledged\n 1785 Optimized Tomfoolery\n 1791 Nontakan Nuntachit, Thailand\n 1794 Rasit Eskicioglu - Canada\n 1795 Simon Elliston Ball\n 1796 pfh\n 1798 John W. C. McNabb\n 1799 Frank Sanborn\n 1803 Morgan Hough\n 1804 Sorcha Bowler\n 1805 http://www.WayneKeenan.info\n 1806 HBEE, hbee.eu\n 1807 Deadlight\n 1809 www.danenet.org\n 1811 Sergey Nebolsin\n 1813 Threv\n 1817 dynsne\n 1818 David Wright\n 1819 John Warren\n 1821 I wanted Erlang! (╯°□°)╯︵ ┻━┻\n 1825 Howard R Hansen\n 1828 Kevin Schumacher\n 1833 Matthias Erll, Sweden\n 1836 Matt Graham\n 1837 thedawn\n 1838 Ruby Feinstein\n 1839 Gustavo Muñoz (timbergus)\n 1840 Ian Paczek\n 1841 Köteles Károly, Hungary\n 1843 Tobias Sette Ferreira\n 1846 x4FF3 <3 microPython\n 1847 Enrico Faulhaber (Germany)\n 1850 jolan00\n 1854 Red Harbinger Inc\n 1855 Noman\n 1858 @DerLinkshaender\n 1863 Jon Woodcock\n 1864 Elmo, hakkerikartano.fi\n 1865 Imaginals\n 1866 Sam Hathaway and Rachel Stevens\n 1874 Remo Sanges, SZN, Italy\n 1875 Devraj Mukherjee\n 1876 an Embedded fan\n 1877 Peter Huisers\n 1878 Kin-Wai Lee (Malaysia)\n 1879 Samuel Hawksby-Robinson\n 1881 R. Stock\n 1886 Randy of Capistrano street backed Damien's MicroPython!\n 1887 Rogério Bulha Siqueira - www.esd-talk.com - Brazil\n 1889 NickE is happy to support such a worthy project!\n 1892 John Boudreaux\n 1894 Riverfreeloader\n 1895 Jose Marcelino http://metavurt.net\n 1896 T Britto-Borges\n 1899 DannyWhitsonUSA\n 1904 José Iván Ferrer Ruiz.\n 1905 Tom Loredo\n 1906 Gregory Perry USA\n 1908 josephoberholtzer.com\n 1910 Michael Klos, USA\n 1912 Adam Mildenberger\n 1913 R Anderson\n 1914 Nikesh, USA\n 1915 Bogdan Chivoiu, Romania\n 1916 Scott C. Lemon, USA\n 1918 Konstantin Ufimtsev (@KestL)\n 1919 Benny Khoo\n 1922 Nicci Tofts\n 1925 Joshua Coxwell\n 1926 Franklin Hamilton\n 1928 Peter Korcz\n 1929 Leroy Douglas\n 1930 A ナルと fan from Nigeria who likes smileys, here's one for good measure  :)\n 1931 Kimmo Lahtinen, Finland\n 1932 http://staybles.co.uk\n 1937 The Olivetti's: Emanuele Laura Nausicaa Sibilla Ettore\n 1940 Pascal Hirsch\n 1942 cbernander, Sweden\n 1944 Enrico M.\n 1947 Dinis Cruz\n 1949 Jonathan Greig, http://embroidermodder.github.io\n 1950 Andy Bower\n 1952 Gerard Hickey\n 1953 Fabrice BARRAL was here ...\n 1955 Pieter Röhling\n 1957 uomorando, Italy\n 1959 Acacio Cruz\n\nThe MicroPython project raised further funds through a second\nKickstarter campaign that was primarily targeted at porting the\ncode to the ESP8266 WiFi chip.  The campaign ended on 2nd March\n2016 and gained the support of 1384 fantastic backers who believed\nin the project and the principles of Open Source code.  Those\nbackers who asked to be named are listed below, with an asterisk\nindicating that they also supported the first campaign.\n\n*   1 Gabriel, Seattle\n*   2 @robberwick\n*   6 Dave Hylands\n    7 Les, UK\n    8 Ryanteck LTD., UK\n   10 karlsruhe, HU\n*  11 Turbinenreiter\n   13 Ben Nuttall, UK\n*  14 Bryan Morrissey, MA, USA\n*  15 Jogy, Qatar\n*  16 BOB63,IT\n   19 ReaBoyd\n*  20 Andrew, MK\n*  21 chrisq, NO\n   22 Pascal RENOU, France\n   23 Javier G, ES\n   25 Forrest, US\n   26 Filip Korling, Sweden\n   27 roberthh - Rhineland\n*  28 Herbert Graef, Stuttgart, thanking the MicroPython Team for this great project\n*  29 johnsonfamily38, UK\n   30 CympleCy\n   31 OJ, PK\n   32 Daniel, SVK\n   33 Shabaz Mohammad\n*  35 Kenneth Henderick, BE\n*  37 Daniel Mouritzen, DK\n   39 Torntrousers, UK\n*  44 Scanner\n   45 Radomir Dopieralski\n   46 Nick, UK\n*  47 Jon Hylands, Canada\n*  48 Ben Barwise Clacktronics\n   50 Rob Kent, UK\n   52 Carlos Pereira Atencio\n   54 Andy, UK\n*  55 WMinarik, Canada\n   57 Hauffe, Germany\n   58 HyperTaz, IT\n*  61 Michael Kovacs, AT\n   62 Erick Navarro, PE\n   69 Karan,US\n*  71 Nick B, UK\n*  72 Anthony Lister, NZ\n*  73 Bryan Lyon\n   76 Miguel Angel Ajo,  ES\n*  78 Sebastian, Regensburg (GER)\n*  80 iv3unm\n   81 Thierry BÉNET, FR\n   84 Jannis, Germany\n   86 Nathan Jeffrey\n   88 Cory Benfield, UK\n   90 Carlo, IT\n*  91 Wojciech Bederski (@wuub)\n   92 Steve Holden, UK\n   93 Tristan Roddis, UK\n   94 Balder, Sweden\n*  95 Rhys, UK\n   96 Rowan, UK\n*  97 Gary Martin, Edinburgh\n* 100 Mikael Eiman\n* 101 torwag\n* 102 Craig Barnes, UK\n  103 Andrea Grandi, UK\n  105 Piers, UK\n* 109 Wayne Keenan\n  110 makuk66\n  111 Hamine,DZ\n  112 Arahavica,JP\n* 113 Bill Eubanks, USA\n  114 Jonathan, UK\n  115 ghickman\n* 117 Christian Lange, Germany\n  119 Jonty Wareing\n  121 TheHetman\n  123 Víctor R. Ruiz, Spain\n* 124 Laurynas Paukste, Norway\n* 125 Taki\n  126 André Milette, Canada\n* 127 Ron Cromberge,NL\n  128 IJ, Thailand\n* 130 IGOR VIZIR\n  132 Bill Saturno\n  134 scibi\n  136 Timbo, AU\n  137 Raphael Vogel, DE\n* 139 jasonkirk, US\n  141 Linköping, Sweden\n* 142 Dugres\n  144 DarioS, UK\n  146 NelisW\n* 148 _Mark_\n* 149 Folke Berglund, Sweden\n  150 Deniz Dag/Belgium\n  152 Jacques Thomas\n  153 Dag Henrik, Norway\n* 154 Alexander Steppke\n  158 stavros.io\n* 161 Seong-Woo Kim, KR\n  162 Aaron H, Seattle\n  164 Iwan, CZ\n  165 Jenning, DE\n  167 Oliver Z, Germany\n* 168 Chris Mason, Australia\n  169 Fabio P. Italy\n  171 Jonathan, Ireland\n  173 Philipp B., DE\n  174 Mancho, IT\n  175 Mikkel Sørensen, DK\n  176 Raphael Lullis\n* 177 Tim, China\n  179 JasperS, NL\n  180 Scott, AU\n  181 Roland Kay, UK\n  182 Adam Baxter\n  184 Hugo Herter\n  185 Simon AM, Malta\n  186 Leif Denby\n  190 Maxious\n* 192 Guido, GER\n* 193 Pierre Rousseau, Canada\n  195 Pete Hinch\n* 198 KoalaBear,USA. TRUMPED 2016!\n* 200 Pimoroni, UK\n  201 jpwsutton, UK\n  203 Felix, Sweden\n  204 Dmitri Don, Tallinn Estonia\n  205 PeteDemiSwede, UK\n* 207 Serge GUILLAUME\n  208 Gurtubay, ES\n  209 Geir-Olav, NO\n  210 RayDeo, Germany\n  215 DIYAbility\n  216 Josef Dunbar, USA\n* 217 Enrico, BE/IT\n  219 Damian Moore, UK\n  220 Wayne and Layne, LLC\n  221 The Old Crow, USA\n  224 Hackscribble, UK\n* 225 Alex March, UK\n  226 @rdslw\n  227 Mike, Canada\n* 228 Adrian Smith\n  229 Dinu Gherman, Germany\n  230 Tinamous.com\n* 231 Nikesh, US\n* 232 chrisallick.com\n  234 Daniel Von Fange\n* 235 Michal Muhlpachr, CZ\n* 236 Petr Viktorin\n  237 Ryan Aldredge\n  238 Patrik Wallström, SE\n* 239 MobiusNexus\n  240 Stray, US\n* 241 BOFG, no\n  244 Issac Kelly\n* 247 David Prime\n  249 James Marsh, UK\n* 250 BezouwenR\n  252 Avinash Magdum, India\n  253 Greg Abbas, Menlo Park CA\n  254 Jorge, ES\n  256 JohanP, swe\n* 258 Ben Doan\n  259 Jan van Haarst, NL\n* 263 JoshT, Los Angeles\n  264 cstuder, Switzerland\n  266 Jon Armani\n* 270 Liam Welsh\n  271 Jason Peacock\n  272 Alejandro Lopez\n  275 Dan O'Donovan, UK\n  276 N1TWC\n  277 Roland Tanglao, Vancouver\n  278 Twpsyn\n  280 Robert, ME-US\n* 282 Thomas, UK\n  283 Jeff Schroeder, USA\n  284 Paulus Schoutsen\n* 287 Neon22, NZ\n  290 kbmeister\n  291 Gary Hahn\n  292 Dave Matsumoto, USA\n  296 Sam Lee, SG\n  304 Poul Borg, Denmark\n  307 MightyPork\n  308 Dale\n* 312 Anton Kraft, Germany\n  315 Kism3t, UK\n  317 NateM\n* 318 N&T, Calvijn Meerpaal, NL\n  322 Andreas Monitzer\n  323 Rikard, SE\n  328 Olaf, DE\n* 329 John Boudreaux\n  330 DOCE, Germany\n  331 feilipu\n  332 Stefan Schwetschke\n  333 Wayneji, NZ\n  337 Alain de Lamirande, Canada\n  338 Hori, TW\n  340 Azmodie, UK\n  341 Lygon, UK\n* 342 JRM in STL, USA\n  344 R Colistete-Jr., BR\n* 345 ChristianG, DE\n  347 Nis Sarup, DK.\n  350 Nickedynick\n  351 Dazza, Oz\n  352 lispmeister, NL\n  355 Tomas Lubkowitz, SE\n  357 Mark, UK\n* 358 Team ME\n  363 Papahabla\n  364 Greg Chevalley\n  365 Maic Striepe, Germany\n  369 Ian McMahon\n  371 A. DARGA, Fr\n  372 Ernesto Maranesi, BR\n  373 Steve Lyon\n  374 James Cloos\n  375 Bas Zeppenfeldt, The Netherlands\n  378 Pycom Ltd\n  380 Wade Christensen, USA\n  382 Justin Wing Chung Hui, UK\n  383 C Paulson\n  384 Ian Tickle\n  386 Danny, Seattle\n  388 Erik Moe, Chicago, IL\n* 389 Eric B. Wertz, USA\n  390 Michael. CH\n  391 Christopher Baughman\n  392 James Churchill\n  393 Rob, DC\n  395 Whee Min, Singapore\n* 396 Jason Doege, TX\n  401 MrFish\n  403 Thejesh GN\n  404 Markus, Sweden\n  405 AMR, Spain\n  407 Svet, ES\n* 408 Thoralt, Germany\n  409 Emil, Sweden\n  410 David Moloney, ireland\n  411 Marco S, DE\n  415 Peter W., Austria\n  417 emendo A/S\n* 419 Kalestis, Switzerland\n  421 Ondra, CZ\n  422 Elheffe\n  423 thinkl33t, UK\n  424 TonyF\n  425 Herr Robert Linder, PA, USA\n* 426 Anders Astrom S(E|G)\n* 428 Jussi Ylanen, CT, USA\n  431 Neil H., USA\n  434 Rod Perez, MX\n  435 Carol, US\n  436 Gina Haeussge, DE\n  438 Weilinger, GER\n* 439 Ron Ward, Australia\n  441 Rex, UT, USA\n* 444 Slush, CZ\n  445 Bruce, Florida\n* 448 Patrick Di Justo\n  449 ScubaBearLA\n  450 Mike Causer, Sydney AU\n  451 Joel Fries, USA\n* 452 Andrew Bernstein, US\n  454 EAS, Seattle, WA, USA\n* 456 Christopher J. Morrone, USA\n* 457 Anthony Gilley, Sweden\n  458 Andre Breiler, DE\n* 460 Fuffkin, UK\n* 461 adent, CZ\n  462 Samuel Pickard\n  463 Mirko, Germany\n* 464 Ramin/US\n  465 Mike, Grenoble\n  466 Rolf, DE\n* 467 Dave Haynes\n* 469 Mac Ha, Vietnam\n* 470 Enno, DE\n* 473 Smudo, DE\n* 474 Duncan, Scotland\n  475 Chris, UK\n  476 Peter Groen, NL\n  478 Gertjan Geerling, Nijmegen\n* 479 Benjamin Eberle\n* 480 Mechanical Men Sweden\n* 482 Rémi de Chazelles, FR\n  483 mager, Bremen\n  484 jurekh, NL\n* 485 Craig Burkhead\n  487 JohanHartman, SouthAfrica\n* 489 Viktor, NL\n  491 Jean-Denis Carre\n  492 Jesse, Canada\n  493 Alex C. MacDonald, USA\n* 494 GustavoV, MX\n  495 Sebastian, Berlin\n  497 Bernard, Feluy\n* 500 Ron H, USA\n  501 Gregg \"Cabe\" Bond, UK\n  502 Colin, NI\n  504 Robin, USA\n* 507 pkropf\n* 510 6LhasaCo Canada\n  511 Tom Sepe, USA\n  513 Andrew McKenna\n  515 tom46037\n  516 G2, USA\n* 517 Pauline Middelink, NL\n* 518 Brush Technology, Ltd\n  520 Pierre Meyitang, USA\n  521 Stephanie Maks, Canada\n  526 John McClain\n* 527 Sigadore, US\n  528 Richard Hudspeth, US\n  530 Martin, Austria\n  531 Stephen Eaton, Australia\n* 533 RJCE, UK\n  535 Teiste, Finland\n  536 Pio, UK\n  537 DirtyHarry, DE\n* 540 Dom G. UK\n* 541 Nial, UK\n  543 Andreas, AUT\n  545 WisdomWolf\n* 549 MrMx,ES\n  552 Daniel Soto, Landscape.\n  554 Claus Fischer, DK\n  557 Aleksi Määttä\n  560 Justin Wilcott, USA\n  562 LoneTone, UK\n  567 Cameron, US\n  568 Dirck, Germany\n  569 Michael Keirnan\n  571 Harry, CN\n* 572 Ward Wouts\n  573 Dan Anaya, USA\n  574 Ben Bennett\n  575 nirvana2165, US\n  576 PDG, BZH\n* 581 Visit, Thailand\n  582 John Carr, UK\n* 583 Klankschap\n  587 jacky,FR\n  588 JD Marsters\n  591 Ryan Jarvis, US\n  595 Claudio Hediger, CH\n* 597 Bambam, Sweden\n  598 Timothé, FR\n* 599 Luís Manuel, Portugal\n  601 Eric, DE\n  602 Olaf, Cambridge, UK\n* 603 Tim, Dubai\n  604 Tyndell, US\n  606 Ciellt AB, SE\n  607 Ömer Boratav\n  609 Guy Molinari, US\n  614 Freek Dijkstra\n  615 Carlos Camargo CO\n  616 Michael Nemecky, Norway\n  618 Ovidiu G.\n  619 arobg, USA\n* 621 Geoff Shilling, US\n  623 EliotB, NZ\n  624 slos UK\n  625 Montreal, CA\n* 626 Peter Korcz\n  627 Kodi\n  628 Jim, Valdosta, USA\n  629 Sander Boele, NL\n  630 Max Lupo\n  631 Daniel.B, Newcastle Australia\n  632 Andrés Suárez García, Vigo (Spain)\n  633 Rens, NL\n  634 Max Petrich, DE\n  635 Fabian Affolter, CH\n  636 Cadair\n* 637 Mike Karliner\n  638 Daniel T, UK\n  639 Mark Campbell, UK\n  640 James S, Australia\n  641 PBTX!\n* 642 amaza,SP\n  644 se4mus\n* 645 Alexander Steffen\n* 647 Jim Richards Maine, USA\n  649 Doug D, US\n  650 Keaton Walker\n* 651 Scott Winder, USA\n  653 Jeff Fischer, USA\n  654 Andrej Mosat\n  655 Mohd Faizal Mansor, Malaysia\n  657 Mike \"Cutter\" Shievitz, US\n* 658 Daniel Andersson, SE\n  659 Alexander, NL\n  660 François, CH\n* 661 AndrewS, UK\n  662 Denisae, PT\n  663 KC8KZN\n  664 Angelo, Wales\n  665 BlueberryE, Germany\n  667 fvlmurat\n  668 Adam Wilson\n  675 Ulrich Norbisrath (http://ulno.net)\n  676 Daniel, Portland OR\n* 677 Andreas Lindquist, SE\n  680 Jason, NL\n  682 lapawa, GER\n  683 John Batty, UK\n  685 Addy, Netherlands\n  686 Marc, CA\n  690 APapantonatos\n  691 gmorell, US\n* 692 Jamie Mackenzie, Adelaide, SA\n* 693 Dave Dean, US\n  697 woojay, US\n  698 Webabot, NY\n* 699 Jason Fehr, Canada\n  700 Hadi (AU)\n* 701 Abraham Arce\n* 703 Must Be Art\n  712 Thanks for the great work!/datax-holding/Stuttgart\n* 714 Thomas Pr., BE\n  715 Black Country Atelier BCA\n  718 Don W, Arlington VA\n  721 Xavier C. (EU)\n  722 Chad P. Lung, U.S.A\n  726 Alexander Lash (@lexlash)\n  727 Sven, MX\n  728 Terence, PL\n* 730 Mauro De Giorgi, USA\n  735 Jay Ward, Canada\n  736 Fabian Topfstedt, AT\n  739 sjoerdDOTcom\n  740 David, Australia\n  743 Michael Niewiera, Germany\n  745 cbenhagen\n  746 berserck, CH\n  748 Lars Hansson, Sweden\n  750 Landrash\n  751 Richard B., CT USA\n  752 Neil Chandler, UK\n* 753 John Griessen US\n* 755 Caminiti, Mexico\n  757 Mikael Trieb, Sweden\n  760 S1GM9, MX\n  761 Dave C, US\n* 763 Su Zhou, China\n  765 Caitlyn - USA\n  769 Will, NZ\n  770 CJB,UK\n  771 Victor Claessen, NL\n  772 Antal, CH\n  773 Tokyo, Japan\n* 774 Join Business & Technology AB, Sweden\n  777 Overspeed Innovation\n* 778 Bruce, Chanute KS\n  779 TOPALIS, RO\n  780 klaas2\n  781 Matthias Schmitz, Berlin\n  783 Jan Studený wishes \"Python everywhere\"\n  788 Ian, USA\n  789 Mark K, UK\n  791 DerFlob, Germany\n  792 Staffan Johansson, Sweden\n  793 Stefan W., DE\n  795 Mark S. Harris, Small Dog Electronics\n  796 Kittikun, TH\n* 798 aerialist, Japan\n  799 Sweta\n* 800 Mark Shuttleworth\n  802 Kim Thostrup\n  803 Andy Fundinger\n  810 Matt Vallevand, Detroit MI\n  813 Jim McDonald\n  816 Rob Dobson\n  817 Rafał Zieliński, PL\n* 818 Shaun Walker, AUS\n  819 Timothy R, Belgium\n  820 clem\n  825 JuanB, ES\n  826 Randall Gaz, Colorado USA\n  827 Dick van Ginkel, The Netherlands\n  829 Jan-Pieter Van Impe\n  831 David Kirkpatrick, AU\n  832 Ravi Teja, India\n  833 AkosLukacs, HU\n  834 Dave Desson, CAN\n  837 LWQ.CZ, CZ\n  838 Robert W., Issaquah, WA\n  839 Daniel Hrynczenko\n  840 Martin Filtenborg, DK\n  841 InnHuchen, Ger\n  845 Raju Pillai,India\n  847 cfus/DE\n* 851 Juli H.\n  853 David Monterroso Cabello , SP\n  857 24x8, LLC, US\n  860 Sebastian, DE\n  861 pajusmar\n  864 Ronnie, UK\n* 867 Travis Travelstead, USA\n* 870 Woodat, US/UK\n  872 Gary Bake, UK\n  873 Ernesto Martinez\n* 874 Scottt, USA\n  876 Ronnie Kizzle, LA\n  880 Harish, Singapore\n  882 Wacht, Pittsburgh\n  883 PatrickF, US\n  886 Paolo, IT\n  888 Defragster\n  889 Rachel Rayns, UK\n* 890 Peak Data LLC\n  891 Mindwarp, AU\n  892 Vincent Smedley, UK\n* 894 Bailey & Brayden\n  898 Jacek Artymiak, UK\n  900 John Hudson, USA\n* 901 ReneS, NL\n* 902 B Stevens\n  903 Cptnslick, US\n  904 janlj@me.com\n  905 Fabricio Biazzotto\n  906 Lenz Hirsch\n  907 SerSher, RU\n  908 Florian, DE\n  909 Mathias Svendsen, DK\n* 910 Jeremiah Dey-Oh\n  911 Allan Joseph Medwick\n  913 Matt, Australia\n  914 Christian Pedersen\n* 915 SPIN\n  916 Denis M., Russia\n  917 Ahmed Alboori, Saudi Arabia\n  918 Luciano, Italy\n  919 Ragdehl\n* 921 Artur, HU\n  922 Greg, NC - USA\n  924 Gurzixo\n* 927 Gregg, Oregon\n  928 cwschroeder, BY\n  929 W. Bush - NY, USA.\n  932 ddparker\n  933 Enkion\n* 934 Eric G. Barron\n  936 thomasDOTwtf\n  940 mifous, cucurbitae.eu\n  942 VFL68, FR\n  943 Casey, Hong Kong\n* 945 Kean Electronics\n  946 Nima, UK\n  947 Klosinski, USA\n  948 PieWiE, NL\n* 949 Rui Carmo, PT\n* 950 basbrun.com\n  951 Aashu, UK\n* 952 vk2nq - Brian\n  954 gojimmypi\n  955 Jack, USA\n* 957 @SteveBattle\n* 958 Beshr, Sweden\n  962 PeterR, UK\n  964 Russell Calbert\n  965 LAurent_B, Fr\n  967 Qazi, USA\n  971 Jonas, FR\n  973 PK Shiu\n* 974 sea_kev\n  976 Radhika, USA\n  977 Chris Gibson, US\n* 978 Mike, AU\n* 979 Geeky Pete\n  981 Timmy the wonderdog\n  983 An Ostler it IT\n  984 Frank Ray Robles\n  985 Kurtsik\n  987 Johan, SE\n  988 NJBerland, Norway\n  992 Leon Noel - @leonnoel\n  994 Kjell, SE\n  995 boriskourt\n  997 Bartek B., CANADA\n  999 Thomas Wiradikusuma, Indonesia\n 1000 Trey, NOLA\n 1002 Jori, FI\n 1005 nmmarkin\n 1006 Mattias Fornander\n 1007 Panayot Daskalov, Bulgaria\n*1009 AndyP, UK\n 1011 TSD\n 1013 Chris, Berlin\n 1017 Gareth Edwards, UK\n 1018 Trixam,DE\n 1019 César from Makespace Madrid, Spain\n 1020 Prajwal, Australia\n*1024 Fred Dart - FTDI\n 1025 bsx\n*1026 Regis, FR\n 1027 Adrian Hill\n 1029 Alice, UK\n 1030 Erkan Shakir, BG\n 1031 Alexander, EE\n 1033 Patric, Luxembourg\n 1034 For my beloved mother, Colleen Clancy.\n 1035 NigelB\n 1037 François, Aus/Fr\n*1039 Thanura Siribaddana, Australia\n 1041 Harald, USA\n 1042 Jeremy Utting, NZ\n 1043 bejuryu, KR\n*1044 Daniel Wood, UK\n 1046 C. J. Blocker\n*1047 Rodrigo Benenson, Germany\n 1048 Håvard Gulldahl\n 1049 SeB, Belgium\n 1054 Ryan Miller, Austin TX\n 1055 Gianluca Cancelmi\n 1057 Francesco, IT\n 1058 RockTractor!\n 1060 Bill G., Atlanta GA USA\n 1061 joenotjoe\n 1064 ATrivedi, USA\n 1067 Jim Chandler, UK\n 1068 Aria Sabeti\n 1069 Noah Rosamilia, USA\n 1070 GAKgDavid, CA\n 1072 Markus, Austria\n*1073 Tarwin, MUC\n*1077 Balazs Kinszler, HU\n*1080 pfh\n*1082 Ovidiu Hossu, SG\n*1083 mmhanif, NJ\n*1084 Wincent Balin, DE\n*1086 Anatoly Verkhovsky\n*1087 Greg, Plano\n*1089 Angelo Compagnucci\n 1090 Ryan Shaw (ryannathans), AU\n 1092 Dries007, BE\n*1093 Dave Snowdon, UK\n*1094 halfpress\n*1096 DeuxVis, FR\n*1097 Your Creative Solutions\n 1099 Emanuele Goldoni, IT\n*1100 Tendayi Mawushe\n 1101 Rob, Tikitere\n*1102 SolidStateSoul\n*1103 Michael, GER\n*1106 Paul, San Francisco\n*1107 Oddvar Lovaas\n*1108 Doc Savage, Man of Bronze\n 1109 Stijn Debrouwere\n 1111 Ark Nieckarz, USA\n*1112 ECS87.com, USA\n*1114 Gary P. Wolfe, USA\n 1117 Tom Hodson\n*1118 @arikb (twitter)\n 1123 Piotr Gryko UK\n*1125 Cantalaweb, Spain\n 1126 Edward of Clovis\n 1127 Jim G\n*1128 billbr, Loveland, CO, USA\n 1129 dalanmiller\n*1130 StephenH, UK\n*1132 Thomas Sarlandie - @sarfata\n 1133 Doug Rohm, US\n*1134 Eric Floehr, Ohio, USA\n*1135 Sven Haiges\n 1136 relix42\n*1137 Ralf Nyren\n*1138 nickgb\n 1139 zwack, DE\n 1140 Michal B., PL\n 1141 Matt, Australia\n 1143 slv, Mi2\n 1144 Pawel, CH\n*1145 James Saffery\n*1147 nekomatic\n*1149 @nt1, Earth\n*1150 Alister Galpin, NZ\n 1151 Jayemel, UK\n 1152 Koalabs\n 1153 James Myatt, UK\n*1154 DanS, Norway\n 1155 Sandeep, US\n*1156 Anil Kavipurapu\n*1158 Frederik Werner, DE\n 1160 Erik J, Canada\n 1164 bluezebra, Ireland\n 1168 Birk, DE\n 1169 Gabi, FR\n*1173 mliberty, USA\n 1174 Jamie Smith, Scotland\n 1175 Sebastian, Germany\n*1176 John Cooper, UK\n 1177 Moritz, DE\n 1178 Kevin, DE\n*1179 Ming Leung, Canada\n 1180 Laird Popkin\n 1181 tasmaniac, GA\n*1183 RichardW, UK\n*1187 Thomas Quinlan, London, UK\n 1188 LGnap, BE\n*1189 bloater, Edinburgh UK\n 1192 pakt, SE\n 1194 Sandsmark, NO\n*1195 Gert Menke\n 1197 Emsi88, SK\n 1199 GTtronics HK Ltd.\n 1200 Jo, Bergen\n*1202 MarkS, Australia\n 1203 Igor, HR\n 1204 Lord Nightmare\n 1205 Great Uncle Bulgaria, UK\n*1206 salomonderossi\n 1208 Master_Ipse, DE\n 1209 Luis G.F, ES\n 1211 Harald, FO\n*1212 Kimmo, Finland\n*1213 P. Perreijn, Netherlands\n 1214 jcea, Spain\n 1215 simon holmes à court\n 1217 Bill M, Newcastle\n*1218 snowball\n*1221 Georges, CDN\n 1222 JPLa\n 1225 Erik Gullberg, Sweden\n 1226 Matthias Fuchs, IN, Germany\n 1229 Majed, CA\n 1230 Michiel, Reeuwijk\n 1231 Clive, Essex UK\n 1232 Jan Kalina, CZ\n 1234 MBBest, Australia\n*1235 Reinoud de Lange, NL\n 1237 Jeffrey Park, South Korea\n 1238 David Olson\n 1239 Nathan Battan\n 1240 Marcus, TW\n 1241 randyrrt, USA\n 1242 Holger, Germany\n 1243 Dmitri Chapkine, FRANCE\n 1244 Ceyhun Kapucu, TR\n 1245 Hong Kong\n*1246 gPozo, US\n 1247 Peter M, Sweden\n*1249 Duncan, Cambridge\n*1251 Schaeferling, DE\n 1252 Christian Prior, DE\n*1256 ovig\n 1257 Kerry Channing, UK\n 1258 Exception42, GER\n*1259 nchalikias\n 1261 Kittie, US\n 1263 Alex, Norway\n 1264 wats0n, TW\n*1265 Henner\n*1266 Mike M, AZ, USA\n 1268 Bobby Ly, USA\n*1269 Espen STO, Norway\n 1270 arduware.cc\n 1274 Christopher Flynn, NH USA\n*1275 Bruce Boyes, USA\n 1276 DCH\n 1278 McGinkel, Netherlands\n 1279 Dieter, Wien\n 1280 R. Tummers, NL\n 1283 Pranav Maddula, USA\n 1286 Dusan, SLovakia\n 1290 Stephen Youndt\n*1291 Lertsenem, FR\n 1292 NuclearTide, London\n 1293 Ben Gift, USA\n 1294 rmg\n 1295 jmaybe, USA\n 1296 Allan G, Georgia\n 1297 Duncan Brassington, UK\n 1300 Hans, NL\n 1301 Valerio \"valdez\" Paolini, IT\n 1303 Neotreat, DE\n 1306 tomtoump\n 1307 Edward B Cox, England\n 1310 Oliver Steele\n 1311 merps, AUS\n 1313 n8henrie, USA\n*1314 YGA-KSD n7/ULB, FR-BE\n 1317 Adrian, Romania\n*1318 Luca \"Loop\", ITA\n*1319 Michael Twomey, Ireland\n 1321 Trey Aughenbaugh\n 1322 Marcel Hecko, SK\n 1323 Hugo Neira, CL\n 1326 JH, US\n*1330 Luthander, SE\n 1331 Rickard Dahlstrand, Sweden\n 1333 Olivier M., France\n 1334 DWVL, UK\n 1335 MRZANE, Sweden\n 1336 Benedikt, DE\n*1338 Tiegeng, US\n*1339 arthoo Eindhoven Nederland\n 1340 Magnus Gustavsson, Sweden\n 1341 Jan Bednařík\n 1344 Mike McGary: US\n 1346 mp3tobi\n*1350 Cyberhippy\n 1351 Sandro, PT\n 1355 Kwabena W. Agyeman\n 1357 Ryan Young\n*1358 Chiang Mai, Thailand\n 1359 AKLitman, USA\n 1360 JASK Enterprises, Ltd-John\n*1361 Tom Gidden, UK\n 1362 AdamT, USA\n 1363 Jose de la Campa, BOL\n 1365 Steve Laguna, U.S.A\n*1368 Walrusklasse, NL\n 1370 Timofei Korostelev, Belarus\n 1374 Janos,HU\n*1375 Paul Cunnane\n 1377 IanE, UK\n 1378 Hans, NL\n 1379 Jose Angel Jimenez Vadillo, Spain\n*1380 PaulT, Lancs\n 1383 Lutz; DE\n 1385 AnRkey\n 1387 Fredrik, FIN\n 1388 Matt W (funkyHat)\n 1389 Zeev Rotshtein, Israel\n 1391 joostd, NL\n 1392 Lukasz Blaszczyk, USA\n*1397 Wei-Ning Huang, TW\n 1398 myu\n*1399 Thorsten, Germany\n 1401 sm0ihr\n 1403 Xiaotian, Seattle US\n*1406 -gt-, Czech Republic\n 1407 Mike Y. Diallo, US\n 1409 ubii, US\n"
        },
        {
          "name": "CODECONVENTIONS.md",
          "type": "blob",
          "size": 12.330078125,
          "content": "Git commit conventions\n======================\n\nEach commit message should start with a directory or full file path\nprefix, so it was clear which part of codebase a commit affects. If\na change affects one file, it's better to use path to a file. If it\naffects few files in a subdirectory, using subdirectory as a prefix\nis ok. For longish paths, it's acceptable to drop intermediate\ncomponents, which still should provide good context of a change.\nIt's also ok to drop file extensions.\n\nBesides prefix, first line of a commit message should describe a\nchange clearly and to the point, and be a grammatical sentence with\nfinal full stop. First line must fit within 72 characters. Examples\nof good first line of commit messages:\n\n    py/objstr: Add splitlines() method.\n    py: Rename FOO to BAR.\n    docs/machine: Fix typo in reset() description.\n    ports: Switch to use lib/foo instead of duplicated code.\n\nAfter the first line add an empty line and in the following lines describe\nthe change in a detail, if needed, with lines fitting within 75 characters\n(with an exception for long items like URLs which cannot be broken). Any\nchange beyond 5 lines would likely require such detailed description.\n\nTo get good practical examples of good commits and their messages, browse\nthe `git log` of the project.\n\nWhen committing you must sign-off your commit by adding \"Signed-off-by:\"\nline(s) at the end of the commit message, e.g. using `git commit -s`.  You\nare then certifying and signing off against the following:\n\n* That you wrote the change yourself, or took it from a project with\n  a compatible license (in the latter case the commit message, and possibly\n  source code should provide reference where the implementation was taken\n  from and give credit to the original author, as required by the license).\n* That you are allowed to release these changes to an open-source project\n  (for example, changes done during paid work for a third party may require\n  explicit approval from that third party).\n* That you (or your employer) agree to release the changes under\n  MicroPython's license, which is the MIT license. Note that you retain\n  copyright for your changes (for smaller changes, the commit message\n  conveys your copyright; if you make significant changes to a particular\n  source module, you're welcome to add your name to the file header).\n* Your contribution including commit message will be publicly and\n  indefinitely available for anyone to access, including redistribution\n  under the terms of the project's license.\n* Your signature for all of the above, which is the \"Signed-off-by\" line,\n  includes your full real name and a valid and active email address by\n  which you can be contacted in the foreseeable future.\n\nCode auto-formatting\n====================\n\nBoth C and Python code formatting are controlled for consistency across the\nMicroPython codebase.  C code is formatted using the `tools/codeformat.py`\nscript which uses [uncrustify](https://github.com/uncrustify/uncrustify).\nPython code is linted and formatted using\n[ruff & ruff format](https://github.com/astral-sh/ruff).\nAfter making changes, and before committing, run  `tools/codeformat.py` to\nreformat your C code and `ruff format` for any Python code.  Without\narguments this tool will reformat all source code (and may take some time\nto run).  Otherwise pass as arguments to the tool the files that changed,\nand it will only reformat those.\n\nuncrustify\n==========\n\nOnly [uncrustify](https://github.com/uncrustify/uncrustify) v0.71 or v0.72 can\nbe used for MicroPython. Different uncrustify versions produce slightly\ndifferent formatting, and the configuration file formats are often\nincompatible. v0.73 or newer *will not work*.\n\nDepending on your operating system version, it may be possible to install a pre-compiled\nuncrustify version:\n\nUbuntu, Debian\n--------------\n\nUbuntu versions 21.10 or 22.04LTS, and Debian versions bullseye or bookworm all\ninclude v0.72 so can be installed directly:\n\n```\n$ apt install uncrustify\n```\n\nArch Linux\n----------\n\nThe current Arch uncrustify version is too new. There is an [old Arch package\nfor v0.72](https://archive.archlinux.org/packages/u/uncrustify/) that can be\ninstalled from the Arch Linux archive ([more\ninformation](https://wiki.archlinux.org/title/Downgrading_packages#Arch_Linux_Archive)). Use\nthe [IgnorePkg feature](https://wiki.archlinux.org/title/Pacman#Skip_package_from_being_upgraded)\nto prevent it re-updating.\n\nBrew\n----\n\nThis command may work, please raise a new Issue if it doesn't:\n\n```\ncurl -L https://github.com/Homebrew/homebrew-core/raw/2b07d8192623365078a8b855a164ebcdf81494a6/Formula/uncrustify.rb > uncrustify.rb && brew install uncrustify.rb && rm uncrustify.rb\n```\n\nCode spell checking\n===================\n\nCode spell checking is done using [codespell](https://github.com/codespell-project/codespell#codespell)\nand runs in a GitHub action in CI.  Codespell is configured via `pyproject.toml`\nto avoid false positives.  It is recommended run codespell before submitting a\nPR.  To simplify this, codespell is configured as a pre-commit hook and will be\ninstalled if you run `pre-commit install` (see below).\n\nIf you want to install and run codespell manually, you can do so by running:\n\n```\n$ pip install codespell tomli\n$ codespell\n```\n\nAutomatic Pre-Commit Hooks\n==========================\n\nTo have code formatting and commit message conventions automatically checked,\na configuration file is provided for the [pre-commit](https://pre-commit.com/)\ntool.\n\nFirst install `pre-commit`, either from your system package manager or via\n`pip`. When installing `pre-commit` via pip, it is recommended to use a\nvirtual environment. Other sources, such as Brew are also available, see\n[the docs](https://pre-commit.com/index.html#install) for details.\n\n```\n$ apt install pre-commit       # Ubuntu, Debian\n$ pacman -Sy python-precommit  # Arch Linux\n$ brew install pre-commit      # Brew\n$ pip install pre-commit       # PyPI\n```\n\nNext, install [uncrustify (see above)](#uncrustify). Other dependencies are managed by\npre-commit automatically, but uncrustify needs to be installed and available on\nthe PATH.\n\nThen, inside the MicroPython repository, register the git hooks for pre-commit\nby running:\n\n```\n$ pre-commit install --hook-type pre-commit --hook-type commit-msg\n```\n\npre-commit will now automatically run during `git commit` for both code and\ncommit message formatting.\n\nThe same formatting checks will be run by CI for any Pull Request submitted to\nMicroPython. Pre-commit allows you to see any failure more quickly, and in many\ncases will automatically correct it in your local working copy.\n\nTo unregister `pre-commit` from your MicroPython repository, run:\n\n```\n$ pre-commit uninstall --hook-type pre-commit --hook-type commit-msg\n```\n\nTips:\n\n* To skip pre-commit checks on a single commit, use `git commit -n` (for\n  `--no-verify`).\n* To ignore the pre-commit message format check temporarily, start the commit\n  message subject line with \"WIP\" (for \"Work In Progress\").\n\nRunning pre-commit manually\n===========================\n\nOnce pre-commit is installed as per the previous section it can be manually\nrun against the MicroPython python codebase to update file formatting on\ndemand, with either:\n* `pre-commit run --all-files` to fix all files in the MicroPython codebase\n* `pre-commit run --file ./path/to/my/file` to fix just one file\n* `pre-commit run --file ./path/to/my/folder/*` to fix just one folder\n\nPython code conventions\n=======================\n\nPython code follows [PEP 8](https://legacy.python.org/dev/peps/pep-0008/) and\nis auto-formatted using [ruff format](https://docs.astral.sh/ruff/formatter)\nwith a line-length of 99 characters.\n\nNaming conventions:\n- Module names are short and all lowercase; eg pyb, stm.\n- Class names are CamelCase, with abbreviations all uppercase; eg I2C, not\n  I2c.\n- Function and method names are all lowercase with words separated by\n  a single underscore as necessary to improve readability; eg mem_read.\n- Constants are all uppercase with words separated by a single underscore;\n  eg GPIO_IDR.\n\nC code conventions\n==================\n\nC code is auto-formatted using [uncrustify](https://github.com/uncrustify/uncrustify)\nand the corresponding configuration file `tools/uncrustify.cfg`, with a few\nminor fix-ups applied by `tools/codeformat.py`.  When writing new C code please\nadhere to the existing style and use `tools/codeformat.py` to check any changes.\nThe main conventions, and things not enforceable via the auto-formatter, are\ndescribed below.\n\nWhite space:\n- Expand tabs to 4 spaces.\n- Don't leave trailing whitespace at the end of a line.\n- For control blocks (if, for, while), put 1 space between the\n  keyword and the opening parenthesis.\n- Put 1 space after a comma, and 1 space around operators.\n\nBraces:\n- Use braces for all blocks, even no-line and single-line pieces of\n  code.\n- Put opening braces on the end of the line it belongs to, not on\n  a new line.\n- For else-statements, put the else on the same line as the previous\n  closing brace.\n\nHeader files:\n- Header files should be protected from multiple inclusion with #if\n  directives. See an existing header for naming convention.\n\nNames:\n- Use underscore_case, not camelCase for all names.\n- Use CAPS_WITH_UNDERSCORE for enums and macros.\n- When defining a type use underscore_case and put '_t' after it.\n\nInteger types: MicroPython runs on 16, 32, and 64 bit machines, so it's\nimportant to use the correctly-sized (and signed) integer types.  The\ngeneral guidelines are:\n- For most cases use mp_int_t for signed and mp_uint_t for unsigned\n  integer values.  These are guaranteed to be machine-word sized and\n  therefore big enough to hold the value from a MicroPython small-int\n  object.\n- Use size_t for things that count bytes / sizes of objects.\n- You can use int/uint, but remember that they may be 16-bits wide.\n- If in doubt, use mp_int_t/mp_uint_t.\n\nComments:\n- Be concise and only write comments for things that are not obvious.\n- Use `// ` prefix, NOT `/* ... */`. No extra fluff.\n\nMemory allocation:\n- Use m_new, m_renew, m_del (and friends) to allocate and free heap memory.\n  These macros are defined in py/misc.h.\n\nExamples\n--------\n\nBraces, spaces, names and comments:\n\n    #define TO_ADD (123)\n\n    // This function will always recurse indefinitely and is only used to show\n    // coding style\n    int foo_function(int x, int some_value) {\n        if (x < some_value) {\n            foo(some_value, x);\n        } else {\n            foo(x + TO_ADD, some_value - 1);\n        }\n\n        for (int my_counter = 0; my_counter < x; ++my_counter) {\n        }\n    }\n\nType declarations:\n\n    typedef struct _my_struct_t {\n        int member;\n        void *data;\n    } my_struct_t;\n\nDocumentation conventions\n=========================\n\nMicroPython generally follows CPython in documentation process and\nconventions. reStructuredText syntax is used for the documentation.\n\nSpecific conventions/suggestions:\n\n* Use `*` markup to refer to arguments of a function, e.g.:\n\n```\n.. method:: poll.unregister(obj)\n\n   Unregister *obj* from polling.\n```\n\n* Use following syntax for cross-references/cross-links:\n\n```\n:func:`foo` - function foo in current module\n:func:`module1.foo` - function foo in module \"module1\"\n    (similarly for other referent types)\n:class:`Foo` - class Foo\n:meth:`Class.method1` - method1 in Class\n:meth:`~Class.method1` - method1 in Class, but rendered just as \"method1()\",\n    not \"Class.method1()\"\n:meth:`title <method1>` - reference method1, but render as \"title\" (use only\n    if really needed)\n:mod:`module1` - module module1\n\n`symbol` - generic xref syntax which can replace any of the above in case\n    the xref is unambiguous. If there's ambiguity, there will be a warning\n    during docs generation, which need to be fixed using one of the syntaxes\n    above\n```\n\n* Cross-referencing arbitrary locations\n~~~\n.. _xref_target:\n\nNormal non-indented text.\n\nThis is :ref:`reference <xref_target>`.\n\n(If xref target is followed by section title, can be just\n:ref:`xref_target`).\n~~~\n\n* Linking to external URL:\n```\n`link text <http://foo.com/...>`_\n```\n\n* Referencing builtin singleton objects:\n```\n``None``, ``True``, ``False``\n```\n\n* Use following syntax to create common description for more than one element:\n~~~\n.. function:: foo(x)\n              bar(y)\n\n   Description common to foo() and bar().\n~~~\n\n\nMore detailed guides and quickrefs:\n\n* http://www.sphinx-doc.org/en/stable/rest.html\n* http://www.sphinx-doc.org/en/stable/markup/inline.html\n* http://docutils.sourceforge.net/docs/user/rst/quickref.html\n"
        },
        {
          "name": "CODEOFCONDUCT.md",
          "type": "blob",
          "size": 2.578125,
          "content": "MicroPython Code of Conduct\n===========================\n\nThe MicroPython community is made up of members from around the globe with a\ndiverse set of skills, personalities, and experiences.  It is through these\ndifferences that our community experiences great successes and continued growth.\nWhen you're working with members of the community, this Code of Conduct will\nhelp steer your interactions and keep MicroPython a positive, successful, and\ngrowing community.\n\nMembers of the MicroPython community are open, considerate, and respectful.\nBehaviours that reinforce these values contribute to a positive environment, and\ninclude: acknowledging time and effort, being respectful of differing viewpoints\nand experiences, gracefully accepting constructive criticism, and using\nwelcoming and inclusive language.\n\nEvery member of our community has the right to have their identity respected.\nThe MicroPython community is dedicated to providing a positive experience for\neveryone, regardless of age, gender identity and expression, sexual orientation,\ndisability, physical appearance, body size, ethnicity, nationality, race, or\nreligion (or lack thereof), education, or socio-economic status.\n\nUnacceptable behaviour includes: harassment, trolling, deliberate intimidation,\nviolent threats or language directed against another person; insults, put downs,\nor jokes that are based upon stereotypes, that are exclusionary, or that hold\nothers up for ridicule; unwelcome sexual attention or advances; sustained\ndisruption of community discussions; publishing others' private information\nwithout explicit permission; and other conduct that is inappropriate for a\nprofessional audience including people of many different backgrounds.\n\nThis code of conduct covers all online and offline presence related to the\nMicroPython project, including GitHub and the forum.  If a participant engages\nin behaviour that violates this code of conduct, the MicroPython team may take\naction as they deem appropriate, including warning the offender or expulsion\nfrom the community.  Community members asked to stop any inappropriate behaviour\nare expected to comply immediately.\n\nThank you for helping make this a welcoming, friendly community for everyone.\n\nIf you believe that someone is violating the code of conduct, or have any other\nconcerns, please contact a member of the MicroPython team by emailing\ncontact@micropython.org.\n\nLicense\n-------\n\nThis Code of Conduct is licensed under the Creative Commons\nAttribution-ShareAlike 3.0 Unported License.\n\nAttributions\n------------\n\nBased on the Python code of conduct found at https://www.python.org/psf/conduct/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.3486328125,
          "content": "When reporting an issue and especially submitting a pull request, please\nmake sure that you are acquainted with Contributor Guidelines:\n\nhttps://github.com/micropython/micropython/wiki/ContributorGuidelines\n\nas well as the Code Conventions, which includes details of how to commit:\n\nhttps://github.com/micropython/micropython/blob/master/CODECONVENTIONS.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.3095703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2024 Damien P. George\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n--------------------------------------------------------------------------------\n\nUnless specified otherwise (see below), the above license and copyright applies\nto all files in this repository.\n\nIndividual files may include additional copyright holders.\n\nThe various ports of MicroPython may include third-party software that is\nlicensed under different terms. These licenses are summarised in the tree\nbelow, please refer to these files and directories for further license and\ncopyright information. Note that (L)GPL-licensed code listed below is only\nused during the build process and is not part of the compiled source code.\n\n/ (MIT)\n    /drivers\n        /cc3100 (BSD-3-clause)\n    /lib\n        /asf4 (Apache-2.0)\n        /axtls (BSD-3-clause)\n            /config\n                /scripts\n                    /config (GPL-2.0-or-later)\n                /Rules.mak (GPL-2.0)\n        /berkeley-db-1xx (BSD-4-clause)\n        /btstack (See btstack/LICENSE)\n        /cmsis (BSD-3-clause)\n        /crypto-algorithms (NONE)\n        /libhydrogen (ISC)\n        /libmetal (BSD-3-clause)\n        /littlefs (BSD-3-clause)\n        /lwip (BSD-3-clause)\n        /mynewt-nimble (Apache-2.0)\n        /nrfx (BSD-3-clause)\n        /nxp_driver (BSD-3-Clause)\n        /oofatfs (BSD-1-clause)\n        /open-amp (BSD-3-clause)\n        /pico-sdk (BSD-3-clause)\n        /re15 (BSD-3-clause)\n        /stm32lib (BSD-3-clause)\n        /tinyusb (MIT)\n        /uzlib (Zlib)\n        /wiznet5k (MIT)\n    /logo (uses OFL-1.1)\n    /ports\n        /cc3200\n            /hal (BSD-3-clause)\n            /simplelink (BSD-3-clause)\n            /FreeRTOS (GPL-2.0 with FreeRTOS exception)\n        /esp32\n            /ppp_set_auth.* (Apache-2.0)\n        /rp2\n            /mutex_extra.c (BSD-3-clause)\n            /clocks_extra.c (BSD-3-clause)\n        /stm32\n            /usbd*.c (MCD-ST Liberty SW License Agreement V2)\n            /stm32_it.* (MIT + BSD-3-clause)\n            /system_stm32*.c (MIT + BSD-3-clause)\n            /boards\n                /startup_stm32*.s (BSD-3-clause)\n                /*/stm32*.h (BSD-3-clause)\n            /usbdev (MCD-ST Liberty SW License Agreement V2)\n            /usbhost (MCD-ST Liberty SW License Agreement V2)\n        /zephyr\n            /src (Apache-2.0)\n    /tools\n        /dfu.py (LGPL-3.0-only)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.703125,
          "content": "[![Unix CI badge](https://github.com/micropython/micropython/actions/workflows/ports_unix.yml/badge.svg)](https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush) [![STM32 CI badge](https://github.com/micropython/micropython/actions/workflows/ports_stm32.yml/badge.svg)](https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush) [![Docs CI badge](https://github.com/micropython/micropython/actions/workflows/docs.yml/badge.svg)](https://docs.micropython.org/) [![codecov](https://codecov.io/gh/micropython/micropython/branch/master/graph/badge.svg?token=I92PfD05sD)](https://codecov.io/gh/micropython/micropython)\n\nThe MicroPython project\n=======================\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micropython/micropython/master/logo/upython-with-micro.jpg\" alt=\"MicroPython Logo\"/>\n</p>\n\nThis is the MicroPython project, which aims to put an implementation\nof Python 3.x on microcontrollers and small embedded systems.\nYou can find the official website at [micropython.org](http://www.micropython.org).\n\nWARNING: this project is in beta stage and is subject to changes of the\ncode-base, including project-wide name changes and API changes.\n\nMicroPython implements the entire Python 3.4 syntax (including exceptions,\n`with`, `yield from`, etc., and additionally `async`/`await` keywords from\nPython 3.5 and some select features from later versions). The following core\ndatatypes are provided: `str`(including basic Unicode support), `bytes`,\n`bytearray`, `tuple`, `list`, `dict`, `set`, `frozenset`, `array.array`,\n`collections.namedtuple`, classes and instances. Builtin modules include\n`os`, `sys`, `time`, `re`, and `struct`, etc. Some ports have support for\n`_thread` module (multithreading), `socket` and `ssl` for networking, and\n`asyncio`. Note that only a subset of Python 3 functionality is implemented\nfor the data types and modules.\n\nMicroPython can execute scripts in textual source form (.py files) or from\nprecompiled bytecode (.mpy files), in both cases either from an on-device\nfilesystem or \"frozen\" into the MicroPython executable.\n\nMicroPython also provides a set of MicroPython-specific modules to access\nhardware-specific functionality and peripherals such as GPIO, Timers, ADC,\nDAC, PWM, SPI, I2C, CAN, Bluetooth, and USB.\n\nGetting started\n---------------\n\nSee the [online documentation](https://docs.micropython.org/) for the API\nreference and information about using MicroPython and information about how\nit is implemented.\n\nWe use [GitHub Discussions](https://github.com/micropython/micropython/discussions)\nas our forum, and [Discord](https://discord.gg/RB8HZSAExQ) for chat. These\nare great places to ask questions and advice from the community or to discuss your\nMicroPython-based projects.\n\nFor bugs and feature requests, please [raise an issue](https://github.com/micropython/micropython/issues/new/choose)\nand follow the templates there.\n\nFor information about the [MicroPython pyboard](https://store.micropython.org/pyb-features),\nthe officially supported board from the\n[original Kickstarter campaign](https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers),\nsee the [schematics and pinouts](http://github.com/micropython/pyboard) and\n[documentation](https://docs.micropython.org/en/latest/pyboard/quickref.html).\n\nContributing\n------------\n\nMicroPython is an open-source project and welcomes contributions. To be\nproductive, please be sure to follow the\n[Contributors' Guidelines](https://github.com/micropython/micropython/wiki/ContributorGuidelines)\nand the [Code Conventions](https://github.com/micropython/micropython/blob/master/CODECONVENTIONS.md).\nNote that MicroPython is licenced under the MIT license, and all contributions\nshould follow this license.\n\nAbout this repository\n---------------------\n\nThis repository contains the following components:\n- [py/](py/) -- the core Python implementation, including compiler, runtime, and\n  core library.\n- [mpy-cross/](mpy-cross/) -- the MicroPython cross-compiler which is used to turn scripts\n  into precompiled bytecode.\n- [ports/](ports/) -- platform-specific code for the various ports and architectures that MicroPython runs on.\n- [lib/](lib/) -- submodules for external dependencies.\n- [tests/](tests/) -- test framework and test scripts.\n- [docs/](docs/) -- user documentation in Sphinx reStructuredText format. This is used to generate the [online documentation](http://docs.micropython.org).\n- [extmod/](extmod/) -- additional (non-core) modules implemented in C.\n- [tools/](tools/) -- various tools, including the pyboard.py module.\n- [examples/](examples/) -- a few example Python scripts.\n\n\"make\" is used to build the components, or \"gmake\" on BSD-based systems.\nYou will also need bash, gcc, and Python 3.3+ available as the command `python3`\n(if your system only has Python 2.7 then invoke make with the additional option\n`PYTHON=python2`). Some ports (rp2 and esp32) additionally use CMake.\n\nSupported platforms & architectures\n-----------------------------------\n\nMicroPython runs on a wide range of microcontrollers, as well as on Unix-like\n(including Linux, BSD, macOS, WSL) and Windows systems.\n\nMicrocontroller targets can be as small as 256kiB flash + 16kiB RAM, although\ndevices with at least 512kiB flash + 128kiB RAM allow a much more\nfull-featured experience.\n\nThe [Unix](ports/unix) and [Windows](ports/windows) ports allow both\ndevelopment and testing of MicroPython itself, as well as providing\nlightweight alternative to CPython on these platforms (in particular on\nembedded Linux systems).\n\nThe [\"minimal\"](ports/minimal) port provides an example of a very basic\nMicroPython port and can be compiled as both a standalone Linux binary as\nwell as for ARM Cortex M4. Start with this if you want to port MicroPython to\nanother microcontroller. Additionally the [\"bare-arm\"](ports/bare-arm) port\nis an example of the absolute minimum configuration, and is used to keep\ntrack of the code size of the core runtime and VM.\n\nIn addition, the following ports are provided in this repository:\n - [cc3200](ports/cc3200) -- Texas Instruments CC3200 (including PyCom WiPy).\n - [esp32](ports/esp32) -- Espressif ESP32 SoC (including ESP32S2, ESP32S3, ESP32C3, ESP32C6).\n - [esp8266](ports/esp8266) -- Espressif ESP8266 SoC.\n - [mimxrt](ports/mimxrt) -- NXP m.iMX RT (including Teensy 4.x).\n - [nrf](ports/nrf) -- Nordic Semiconductor nRF51 and nRF52.\n - [pic16bit](ports/pic16bit) -- Microchip PIC 16-bit.\n - [powerpc](ports/powerpc) -- IBM PowerPC (including Microwatt)\n - [qemu](ports/qemu) -- QEMU-based emulated target (for testing)\n - [renesas-ra](ports/renesas-ra) -- Renesas RA family.\n - [rp2](ports/rp2) -- Raspberry Pi RP2040 (including Pico and Pico W).\n - [samd](ports/samd) -- Microchip (formerly Atmel) SAMD21 and SAMD51.\n - [stm32](ports/stm32) -- STMicroelectronics STM32 family (including F0, F4, F7, G0, G4, H7, L0, L4, WB)\n - [webassembly](ports/webassembly) -- Emscripten port targeting browsers and NodeJS.\n - [zephyr](ports/zephyr) -- Zephyr RTOS.\n\nThe MicroPython cross-compiler, mpy-cross\n-----------------------------------------\n\nMost ports require the [MicroPython cross-compiler](mpy-cross) to be built\nfirst.  This program, called mpy-cross, is used to pre-compile Python scripts\nto .mpy files which can then be included (frozen) into the\nfirmware/executable for a port.  To build mpy-cross use:\n\n    $ cd mpy-cross\n    $ make\n\nExternal dependencies\n---------------------\n\nThe core MicroPython VM and runtime has no external dependencies, but a given\nport might depend on third-party drivers or vendor HALs. This repository\nincludes [several submodules](lib/) linking to these external dependencies.\nBefore compiling a given port, use\n\n    $ cd ports/name\n    $ make submodules\n\nto ensure that all required submodules are initialised.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extmod",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "mpy-cross",
          "type": "tree",
          "content": null
        },
        {
          "name": "ports",
          "type": "tree",
          "content": null
        },
        {
          "name": "py",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.38671875,
          "content": "[tool.codespell]\ncount = \"\"\nignore-regex = '\\b[A-Z]{3}\\b'\nignore-words-list = \"ans,asend,deques,dout,extint,hsi,iput,mis,numer,shft,synopsys,technic,ure\"\nquiet-level = 3\nskip = \"\"\"\n*/build*,\\\n./.git,\\\n./drivers/cc3100,\\\n./lib,\\\n./ports/cc3200/FreeRTOS,\\\n./ports/cc3200/bootmgr/sl,\\\n./ports/cc3200/hal,\\\n./ports/cc3200/simplelink,\\\n./ports/cc3200/telnet,\\\n./ports/esp32/managed_components,\\\n./ports/nrf/drivers/bluetooth/s1*,\\\n./ports/stm32/usbhost,\\\n./tests,\\\nACKNOWLEDGEMENTS,\\\n\"\"\"\n\n[tool.ruff]\n# Exclude third-party code from linting and formatting\nextend-exclude = [\"lib\"]\nline-length = 99\ntarget-version = \"py37\"\n\n[tool.ruff.lint]\nextend-select = [\"C9\", \"PLC\"]\nignore = [\n  \"E401\",\n  \"E402\",\n  \"E722\",\n  \"E731\",\n  \"E741\",\n  \"F401\",\n  \"F403\",\n  \"F405\",\n  \"PLC1901\",\n]\n\n[tool.ruff.mccabe]\nmax-complexity = 40\n\n[tool.ruff.per-file-ignores]\n# Exclude all tests from linting (does not apply to formatting).\n\"tests/**/*.py\" = [\"ALL\"]\n\"ports/cc3200/tools/uniflash.py\" = [\"E711\"]\n# manifest.py files are evaluated with some global names pre-defined\n\"**/manifest.py\" = [\"F821\"]\n\"ports/**/boards/**/manifest_*.py\" = [\"F821\"]\n\n[tool.ruff.format]\n# Exclude third-party code, and exclude the following tests:\n#   basics: needs careful attention before applying automatic formatting\n#   repl_: not real python files\n#   viper_args: uses f(*)\nexclude = [\"tests/basics/*.py\", \"tests/*/repl_*.py\", \"tests/micropython/viper_args.py\"]\n"
        },
        {
          "name": "shared",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}