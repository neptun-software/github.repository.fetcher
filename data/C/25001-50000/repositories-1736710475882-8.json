{
  "metadata": {
    "timestamp": 1736710475882,
    "page": 8,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jqlang/jq",
      "stars": 30940,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.376953125,
          "content": ".gitattributes export-ignore\n.gitignore export-ignore\n* text=auto eol=lf\n\n# vendored files\nsrc/decNumber/** linguist-vendored\n\n# generated files\nsrc/lexer.[ch] linguist-generated=true\nsrc/parser.[ch] linguist-generated=true\ntests/man.test linguist-generated=true\ntests/manonig.test linguist-generated=true\njq.1.prebuilt linguist-generated=true\ndocs/Pipfile.lock linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5419921875,
          "content": "*.o\n*.a\n*.lo\n*.la\n*.lai\n*.so\n*.so.*\n*.gcda\n*.gcno\n*.gcov\n*~\n.*.sw[a-p]\ntags\n\njq\n!tests/modules/lib/jq/\njq.1\n\n# Generated source\nsrc/builtin.inc\nsrc/config_opts.inc\n*.pc\n\n# Autotools junk\n.libs\n.deps\n.dirstamp\nlibtool\n*.log\nstamp-h1\nconfig.log\nconfig.status\nautom4te.cache\nINSTALL\nMakefile\njq-*.tar.gz\njq-*.zip\nconfigure\naclocal.m4\nMakefile.in\nversion.h\n.remake-version-h\nconfig.cache\n*.rpm\nm4/libtool.m4\nm4/ltoptions.m4\nm4/ltsugar.m4\nm4/ltversion.m4\nm4/lt~obsolete.m4\ntests/*.trs\n\n# Docs output\ndocs/output\n\ncscope.in.out\ncscope.out\ncscope.po.out\njq.dSYM\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1005859375,
          "content": "[submodule \"modules/oniguruma\"]\n\tpath = modules/oniguruma\n\turl = https://github.com/kkos/oniguruma.git\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 7.845703125,
          "content": "Created By:\nStephen Dolan        <mu@netsoc.tcd.ie>\n\nMaintained by:\nDavid Tolnay         <dtolnay@gmail.com>\nEmanuele Torre       <torreemanuele6@gmail.com>\nLeonid S. Usov       <leonid@practi.net>\nMattias Wadman       <mattias.wadman@gmail.com>\nMuh Muhten           <muh.muhten@gmail.com>\nNicolas Williams     <nico@cryptonector.com>\nOwen Ou              <o@owenou.com>\nWilliam Langford     <wlangfor@gmail.com>\nitchyny              <itchyny@cybozu.co.jp>\npkoppstein           <pkoppstein@gmail.com>\n\nContributions by:\n13ren                <melbourne.research@gmail.com>\nAJ Jordan            <alex@strugee.net>\nAaron Peschel        <apeschel@zendesk.com>\nAdam Lindberg        <hello@alind.io>\nAlanscut             <wp_scut@163.com>\nAleksey Tsalolikhin  <atsalolikhin@spokeo.com>\nAlex Chamberlain     <alex@alexchamberlain.co.uk>\nAlex Jurkiewicz      <alex@jurkiewi.cz>\nAlex Ozdemir         <aozdemir@hmc.edu>\nAlex Wilson          <gpg@probablyfine.co.uk>\nAlexandre Jasmin     <ajasmin@transtex-llc.com>\nAllan Clark          <allanc@chickenandporn.com>\nAndrew O'Brien       <obrien.andrew@gmail.com>\nAndrew Rodland       <andrew@cleverdomain.org>\nAndrew Speed         <andrew.cspeed@gmail.com>\nAnkur                <ankz.kothari@gmail.com>\nAnthony Shortland    <anthony@dtosolutions.com>\nAnthony Sottile      <asottile@umich.edu>\nAssaf Gordon         <assafgordon@gmail.com>\nAttila Fülöp         <attila@fueloep.org>\nBenjamin Wuethrich   <benjamin@koho.ca>\nBenoit de Chezelles  <bew@users.noreply.github.com>\nBernard Niset        <bernard.niset@gmail.com>\nBradley Skaggs       <bskaggs@acm.org>\nBrendan Macmillan    <melbourne.research@gmail.com>\nCameron Sparr        <cameronsparr@gmail.com>\nChance Zibolski      <czibolsk@redhat.com>\nCharles Merriam      <charles.merriam@gmail.com>\nChris Moore          <dooglus@gmail.com>\nChristopher Degawa   <ccom@randomderp.com>\nCiaran McNamara      <1372986+ciaranmcnamara@users.noreply.github.com>\nClément MATHIEU      <clement@unportant.info>\nColin von Heuring    <colin@janrain.com>\nDamian Gryski        <damian@gryski.com>\nDan Church           <h3xx@users.noreply.github.com>\nDaniel Lange         <DLange@git.local>\nDavid Biesack        <David.Biesack@apiture.com>\nDavid Fetter         <david@fetter.org>\nDavid Haguenauer     <ml@kurokatta.org>\nDavid Korczynski     <david@adalogics.com>\nDavid R. MacIver     <david@drmaciver.com>\nDawid Ferenczy Rogožan <ferenczy@users.noreply.github.com>\nDerrick Pallas       <derrick@pallas.us>\nDoug Luce            <doug@github.con.com>\nEiichi Sato          <sato.eiichi@gmail.com>\nEli Schwartz         <eschwartz@archlinux.org>\nEric Bréchemier      <eric@egull.co>\nErik Brinkman        <erik.brinkman@gmail.com>\nEugen                <EugenGez@gmail.com>\nEvan Zacks           <zackse@gmail.com>\nFelix Wolfsteller    <felix.wolfsteller@gmail.com>\nFilippo Giunchedi    <fgiunchedi@gmail.com>\nFilippo Valsorda     <filippo.valsorda@gmail.com>\nFlorian Weimer       <fweimer@redhat.com>\nFrederic Cambus      <fcambus@users.sourceforge.net>\nGert Van Gool        <gertvangool@gmail.com>\nGijs Kunze           <gwkunze@gmail.com>\nGustav               <gustav@invoke.se>\nHE, Tao              <sighingnow@gmail.com>\nHanfei Shen          <qqshfox@gmail.com>\nHanson Char          <hanson.char@gmail.com>\nHaochen Xie          <haochenx@acm.org>\nHelmut K. C. Tessarek <tessarek@evermeet.cx>\nHenré Botha          <henrebotha@gmail.com>\nIan Miell            <ian.miell@gmail.com>\nIkko Ashimine        <eltociear@gmail.com>\nJ Phani Mahesh       <github@phanimahesh.me>\nJack Pearkes         <jackpearkes@gmail.com>\nJakub Jirutka        <jakub@jirutka.cz>\nJakub Wilk           <jwilk@jwilk.net>\nJames Andariese      <james.andariese@locationlabs.com>\nJames Pearson Hughes <xiong.chiamiov@gmail.com>\nJan Schulz           <jasc@gmx.net>\nJanne Cederberg      <janne.cederberg@gmail.com>\nJason Hood           <jadoxa@yahoo.com.au>\nJay Satiro           <raysatiro@yahoo.com>\nJingwen Owen Ou      <jingweno@gmail.com>\nJoe Littlejohn       <joe.littlejohn@nokia.com>\nJoel Nothman         <joel.nothman@gmail.com>\nJoel Purra           <code+github@joelpurra.com>\nJonathan Word        <argoday@argoday.com>\nJosh Soref           <2119212+jsoref@users.noreply.github.com>\nJuan Guerrero        <juan.guerrero.lozano@gmail.com>\nKenny Shen           <kenny.shen@zalora.com>\nKim De Mey           <kim.demey@gmail.com>\nKim Toms             <kim.toms@bplglobal.net>\nLCD 47               <lcd047@gmail.com>\nLarry Aasen          <larryaasen@gmail.com>\nLee Thompson         <stagr.lee@gmail.com>\nLoamhoof             <soeren.medard@gmail.com>\nLucas Trzesniewski   <lucas.trzesniewski@gmail.com>\nLukas Lansky         <lukas.lansky@suse.com>\nMCApollo             <34170230+MCApollo@users.noreply.github.com>\nMarc Abramowitz      <marc@marc-abramowitz.com>\nMarc Bruggmann       <marcbr@spotify.com>\nMarcin Kłopotek      <marcin.klopotek@gmail.com>\nMark Feit            <mfeit@internet2.edu>\nMark McKinstry       <mmckinst@umich.edu>\nMarkus Lanthaler     <mark_lanthaler@gmx.net>\nMatt Clegg           <m@cle.gg>\nMatti Åstrand        <mattiastr@gmail.com>\nMattias Hansson      <hansson.mattias@gmail.com>\nMaxime Biais         <maxime.biais@gmail.com>\nMaximilian Roos      <5635139+max-sixty@users.noreply.github.com>\nMichael Daines       <michael@mdaines.com>\nMike Daines          <mdaines@users.noreply.github.com>\nMike Fletcher        <john.m.fletcher@bankofamerica.com>\nMike McCabe          <mccabe@archive.org>\nNaïm Favier          <n@monade.li>\nNicolas Pouillard    <nicolas.pouillard@gmail.com>\nPaul Chvostek        <paul+gitkraken@it.ca>\nPaul Wise            <pabs3@bonedaddy.net>\nPeter van Dijk       <peter@7bits.nl>\nPhilipp Hagemeister  <phihag@phihag.de>\nRémy Léone           <remy.leone@gmail.com>\nRicardo Constantino  <wiiaboo@gmail.com>\nRichard Groves       <richard@noodlfroot.com>\nRichard H Lee        <richard@webdezign.co.uk>\nRiley Avron          <riley.avron@gmail.com>\nRob Wills            <rob.wills@gmail.com>\nRobert Aboukhalil    <robert.aboukhalil@gmail.com>\nRoland C. Dowdeswell <roland.dowdeswell@twosigma.com>\nRoman Inflianskas    <rominf@users.noreply.github.com>\nRomero Malaquias     <romero.malaquias@gmail.com>\nRyoichi KATO         <ryo1kato@gmail.com>\nSantiago Lapresta    <santiago.lapresta@gmail.com>\nSean Wei             <me@sean.taipei>\nSebastian Freundt    <freundt@ga-group.nl>\nShaun Guth           <sguth@practicefusion.com>\nShay Elkin           <shay@everything.me>\nSimon Elsbrock       <simon@iodev.org>\nStefan               <stefan.haubenthal@gmail.com>\nStefan Seemayer      <stefan@seemayer.de>\nStephen Roantree     <stroantree@gmail.com>\nStephen Shaw         <stesh@netsoc.tcd.ie>\nSteven Maude         <StevenMaude@users.noreply.github.com>\nSteven Penny         <svnpenn@gmail.com>\nThomas R. Hall       <trhall@trhall.org>\nTim McCormack        <cortex@brainonfire.net>\nTimothy John Perisho Eccleston <combinatorist@users.noreply.github.com>\nTom Wolf             <github@incognitox.org>\nTomas Halman         <thalman@redhat.com>\nTravis Gockel        <travis@gockelhut.com>\nW-Mark Kubacki       <wmark@hurrikane.de>\nWilliam Chargin      <wchargin@gmail.com>\nYasuhiro Matsumoto   <mattn.jp@gmail.com>\nYoichi Nakayama      <yoichi.nakayama@gmail.com>\nZhaohui Mei          <mzh.whut@gmail.com>\nZhiming Wang         <zmwangx@gmail.com>\ncalpeconsulting      <61429736+calpeconsulting@users.noreply.github.com>\ncdnbacon             <mike@busbud.com>\ndak180               <dak180@users.sf.net>\ndavkor               <david@adalogics.com>\neitsupi              <50911393+eitsupi@users.noreply.github.com>\ni                    <isomorphisms@sdf.org>\njkleint              <jkleint@gmail.com>\nmail6543210          <mail6543210@yahoo.com.tw>\nmjarosie             <mjarosie@users.noreply.github.com>\nnmulcahey            <nmulcahey@gmail.com>\npolyester            <paul@cleanclothes.org>\nrain1                <rain1@airmail.cc>\ntal@whatexit.org     <tal@whatexit.org>\ntrantor              <trantorvega@gmail.com>\nzstadler             <zeev.stadler@gmail.com>\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 6.185546875,
          "content": "jq is copyright (C) 2012 Stephen Dolan\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\njq's documentation (everything found under the docs/ subdirectory in\nthe source tree) is licensed under the Creative Commons CC BY 3.0\nlicense, which can be found at:\n\n         https://creativecommons.org/licenses/by/3.0/\n\nThe documentation website includes a copy of Twitter's Bootstrap and\nrelies on Bonsai, Liquid templates and various other projects, look\nthem up for detailed licensing conditions.\n\n\n\njq incorporates David M. Gay's dtoa.c and g_fmt.c, which bear the\nfollowing notices:\n\ndtoa.c:\nThe author of this software is David M. Gay.\n\nCopyright (c) 1991, 2000, 2001 by Lucent Technologies.\n\nPermission to use, copy, modify, and distribute this software for any\npurpose without fee is hereby granted, provided that this entire notice\nis included in all copies of any software which is or includes a copy\nor modification of this software and in all copies of the supporting\ndocumentation for such software.\n\nTHIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\nREPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\nOF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n\ng_fmt.c:\nThe author of this software is David M. Gay.\n\nCopyright (c) 1991, 1996 by Lucent Technologies.\n\nPermission to use, copy, modify, and distribute this software for any\npurpose without fee is hereby granted, provided that this entire notice\nis included in all copies of any software which is or includes a copy\nor modification of this software and in all copies of the supporting\ndocumentation for such software.\n\nTHIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\nREPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\nOF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n\n\n\njq uses parts of the open source C library \"decNumber\", which is distributed\nunder the following license:\n\n\nICU License - ICU 1.8.1 and later\n\nCOPYRIGHT AND PERMISSION NOTICE\n\nCopyright (c) 1995-2005 International Business Machines Corporation and others\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, and/or sell copies of the Software, and to permit persons\nto whom the Software is furnished to do so, provided that the above\ncopyright notice(s) and this permission notice appear in all copies of\nthe Software and that both the above copyright notice(s) and this\npermission notice appear in supporting documentation.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\nHOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL\nINDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING\nFROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\nWITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nExcept as contained in this notice, the name of a copyright holder\nshall not be used in advertising or otherwise to promote the sale, use\nor other dealings in this Software without prior written authorization\nof the copyright holder.\n\n--------------------------------------------------------------------------------\nAll trademarks and registered trademarks mentioned herein are the property of their respective owners.\n\n\n\njv_thread.h is copied from Heimdal's lib/base/heimbase.h and some code\nin jv.c is copied from Heimdal's lib/base/dll.c:\n\n\nPortions Copyright (c) 2016 Kungliga Tekniska Högskolan\n(Royal Institute of Technology, Stockholm, Sweden).\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 32.505859375,
          "content": "2015-07-10  Nicolas Williams  nico@cryptonector.com\n\n\tUse `include` for import into namespace\n\n\tSimplify import docs\n\n\tFix typo in docs\n\n2015-07-06  James Andariese  james.andariese@locationlabs.com\n\n\tDockerfile reorganized\n\n2015-07-04  David Tolnay  dtolnay@gmail.com\n\n\tMake jq.h usable from C++\n\n2015-07-03  Nicolas Williams  nico@cryptonector.com\n\n\tDocument math support\n\n2015-06-30  David Tolnay  dtolnay@gmail.com\n\n\tstrftime wrong day-of-week (fix #838)\n\n2015-06-28  Nicolas Williams  nico@cryptonector.com\n\n\tDocument --run-tests\n\n\tMake --run-tests' jv_test() quiet\n\n2015-06-27  Nicolas Williams  nico@cryptonector.com\n\n\tMake --run-tests less verbose by default\n\n\tAdd more basic number tests\n\n\tAdd `pow`, better libm detection (fix #443)\n\n2015-06-27  David Tolnay  dtolnay@gmail.com\n\n\tgcov exclusions\n\n\tflag to enable gcov and coveralls\n\n\tadd configure option to run tests without valgrind\n\n2015-06-20  David Tolnay  dtolnay@gmail.com\n\n\tget Travis CI working\n\n2015-06-26  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `{$var}` `. as {$var}` syntax (fix #831)\n\n\tAdd streaming utilities (fix #827)\n\n2015-06-04  Santiago Lapresta  santiago@typeform.com\n\n\tAdd combinations/0 and combinations/1\n\n2015-06-22  Nicolas Williams  nico@cryptonector.com\n\n\tWriteFile() on WIN32 when stdout isatty (fix #824)\n\n2015-06-19  David Tolnay  dtolnay@gmail.com\n\n\tfix errors flagged by clang static analyzer\n\n2015-06-19  Nicolas Williams  nico@cryptonector.com\n\n\tFix #811: use CommandLineToArgvW() and _wfopen()\n\n2015-06-18  David Tolnay  dtolnay@gmail.com\n\n\tfix use after free in f_strptime\n\n\tseparate jq, oniguruma, sh, and man tests\n\n2015-06-18  Nicolas Williams  nico@cryptonector.com\n\n\targv[] may not be UTF-8 (fix #811)\n\n2015-06-18  Doug Luce  doug@github.con.com\n\n\tAdd alloca() discovery to configure.ac\n\n2015-06-18  Nicolas Williams  nico@cryptonector.com\n\n\tFix `finites`\n\n2015-06-17  David Tolnay  dtolnay@gmail.com\n\n\tfix broken tests in manual.yml\n\n2015-06-17  Nicolas Williams  nico@cryptonector.com\n\n\tAdd isnormal and related, rename *inf\n\n2015-06-17  Nicolas Williams  nico@cryptonector.com\n\n\tFix #814: raise on div-0, add inf isinf nan isnan\n\n2015-06-17  Nicolas Williams  nico@cryptonector.com\n\n\tSequence parser: wait for RS on startup (fix #687)\n\n2015-06-07  David Tolnay  dtolnay@gmail.com\n\n\tarray and object destructuring (fix #533)\n\n2015-06-03  Nicolas Williams  nico@cryptonector.com\n\n\tAdd --tab and -indent n options\n\n2015-05-29  Nicolas Williams  nico@cryptonector.com\n\n\tFixup --slurpfile/argile docs\n\n\tAdd --slurpfile\n\n\tBetter handling of stdout errors\n\n2015-05-25  Nicolas Williams  nico@cryptonector.com\n\n\tAdd ./configure --enable-all-static\n\n2015-05-25  Nicolas Williams  nico@cryptonector.com\n\n\tKeywords should be OK as object keys (fix #794)\n\n2015-03-04  Travis Gockel  travis@gockelhut.com\n\n\tAdd wrapping and clamping to jv_array_slice\n\n2015-04-17  Assaf Gordon  assafgordon@gmail.com\n\n\tPrint offending object in runtime error messages\n\n\tAdd filename/line functions to jq (fix #753)\n\n2015-04-17  Assaf Gordon  assafgordon@gmail.com\n\n\tReport filename:line on runtime errors (fix #752)\n\n2015-05-19  Nicolas Williams  nico@cryptonector.com\n\n\tDocument gsub/3\n\n2015-05-03  Nicolas Williams  nico@cryptonector.com\n\n\tAdd error injection library\n\n2015-04-28  Nicolas Williams  nico@cryptonector.com\n\n\tReport read errors too (and fix #772)\n\n2015-05-02  Nicolas Williams  nico@cryptonector.com\n\n\tREADME: send questions to SO and Freenode\n\n2015-04-28  Nicolas Williams  nico@cryptonector.com\n\n\tusage() should check fprintf() result (fix #771)\n\n2015-04-28  Nicolas Williams  nico@cryptonector.com\n\n\tFix header guards (fix #770)\n\n2015-04-24  Nicolas Williams  nico@cryptonector.com\n\n\t--raw-input wrongly adds NULs (fix #761)\n\n2015-04-23  Nicolas Williams  nico@cryptonector.com\n\n\tWith `inputs` builtin, -n and -R can now coexist\n\n\t--raw-input ought to read NULs (partial fix #760)\n\n\t--slurp --raw-input is broken (fix #761)\n\n\tfrom_entries is broken (fix #767)\n\n2015-04-22  Assaf Gordon  assafgordon@gmail.com\n\n\tregex functions: report informative error if not available.\n\n2015-04-21  Andrew O'Brien  obrien.andrew@gmail.com\n\n\tFixes manual generation with psych\n\n2015-04-20  Assaf Gordon  assafgordon@gmail.com\n\n\tHandle NUL in escaped-string output\n\n2015-04-03  tal@whatexit.org  tal@whatexit.org\n\n\tmanual.yml: Clarify how to specify keys with \":\" and special chars.\n\n2015-04-15  Assaf Gordon  assafgordon@gmail.com\n\n\tdocs: expand @tsv section - add escape sequences.\n\n\t@tsv: escape \\r, \\n, \\\\\n\n2015-03-30  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `$__loc__` (fix #740)\n\n2015-03-29  Nicolas Williams  nico@cryptonector.com\n\n\tInclude filename and lineno in error messages\n\n2015-03-06  Assaf Gordon  assafgordon@gmail.com\n\n\tdetect and report output writing errors\n\n2015-03-18  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\tAdds Dockerfile\n\n2015-03-10  Assaf Gordon  assafgordon@gmail.com\n\n\tpartial handling of input errors\n\n2015-03-09  Assaf Gordon  assafgordon@gmail.com\n\n\talways propagate input errors to exit code\n\n2015-03-23  William Langford  wlangfor@gmail.com\n\n\tFix #735 (SIGFPE on modulo by 0)\n\n2015-03-08  Nicolas Williams  nico@cryptonector.com\n\n\tAdd more date builtins\n\n\tAutomake: jq depends on version.h (fix #721)\n\n2015-03-06  Assaf Gordon  assafgordon@gmail.com\n\n\texit with non-zero code on runtime exceptions\n\n2015-03-06  Nicolas Williams  nico@cryptonector.com\n\n\tAdd date builtins (fix #364)\n\n2015-02-18  Stefan Seemayer  stefan@seemayer.de\n\n\tCorrect automake and autoconf version requirements\n\n2015-02-17  Nicolas Williams  nico@cryptonector.com\n\n\tMention --disable-maintainer-mode in bison error\n\n2015-02-16  Sebastian Freundt  freundt@ga-group.nl\n\n\tFix oniguruma detection logic\n\n2015-02-15  Nicolas Williams  nico@cryptonector.com\n\n\tAdd --disable-maintainer-mode; make bison optional\n\n2015-02-14  Nicolas Williams  nico@cryptonector.com\n\n\tMake Oniguruma/regexp optional\n\n2015-02-01  Nicolas Williams  nico@cryptonector.com\n\n\tRefactor moar: move parts of main.c into libjq\n\n2014-12-27  Nicolas Williams  nico@cryptonector.com\n\n\tRefactor handling of inputs in main() (fix #667)\n\n2015-02-10  Kim Toms  kim.toms@bplglobal.net\n\n\tEnhance from_entries to better deal with Amazon AWS Tags\n\n2015-01-26  Nicolas Williams  nico@cryptonector.com\n\n\tUsage message for -h should go to stdout\n\n2015-01-27  i  isomorphisms@sdf.org\n\n\treadability\n\n2015-01-14  Joel Purra  code+github@joelpurra.com\n\n\tEmpty arrays join/1 to an empty string, fixes #668 bug introduced by 9760245\n\n2014-12-27  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `debug` and `stderr` builtins\n\n2015-01-13  Nicolas Williams  nico@cryptonector.com\n\n\tjoin/1: respect empty strings (fix #668)\n\n2015-01-13  Nicolas Williams  nico@cryptonector.com\n\n\tSplit on empty sep: fix #552 moar\n\n2015-01-12  Nicolas Williams  nico@cryptonector.com\n\n\tFix docs for `split/0`\n\n2015-01-12  Nicolas Williams  nico@cryptonector.com\n\n\tFix #552\n\n2015-01-02  Nicolas Williams  nico@cryptonector.com\n\n\tLook for jq/main.jq for imports\n\n2015-01-01  Nicolas Williams  nico@cryptonector.com\n\n\tAdd static build instructions (fix #294)\n\n2014-12-30  Nicolas Williams  nico@cryptonector.com\n\n\tFurther module system revamp (fix #659)\n\n2014-12-28  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `label $name | EXP`; fix `break`\n\n2014-12-30  Nicolas Williams  nico@cryptonector.com\n\n\tRemove string indexing by string (fix #454)\n\n2014-12-30  Nicolas Williams  nico@cryptonector.com\n\n\tAdd support for testing erroneous programs\n\n2014-12-30  Nicolas Williams  nico@cryptonector.com\n\n\tMake --run-tests more informative\n\n2014-10-06  pkoppstein  pkoppstein@gmail.com\n\n\ttranspose/0 for possibly jagged matrices\n\n2014-10-07  pkoppstein  pkoppstein@gmail.com\n\n\tbsearch(x) (binary search): builtin.c (tested), with documentation and test case. Always yields an integer (even if input is unsorted); returns (-1 - ix) if x is not in input array.\n\n2014-10-06  pkoppstein  pkoppstein@gmail.com\n\n\tascii_upcase/0 and ascii_downcase/0\n\n2014-12-27  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `debug` builtin\n\n\tDon't force C API users to set input cb\n\n2014-12-26  Nicolas Williams  nico@cryptonector.com\n\n\tMake jq --run-tests show test line numbers\n\n\tStreaming parser torture tests\n\n\tFuzz JSON parser\n\n2014-12-22  Nicolas Williams  nico@cryptonector.com\n\n\tAdd Streaming parser (--stream)\n\n2014-12-26  Nicolas Williams  nico@cryptonector.com\n\n\tAllow C-coded functions to `empty`\n\n\tAdd BLOCK_8() macro\n\n\tFix `foreach` non-propagation of errors\n\n\tAllow zero-length buffers in jv_parser_set_buf()\n\n2014-12-24  Nicolas Williams  nico@cryptonector.com\n\n\tAdd @tsv; fix #645\n\n\tModule search revamp for pkg managers\n\n\tFix #348: reject unescaped control chars\n\n2014-12-23  Nicolas Williams  nico@cryptonector.com\n\n\tUse __attribute__ __printf__ with GCC\n\n\tMake `values` faster (fix #652)\n\n2014-12-22  Marc Abramowitz  marc@marc-abramowitz.com\n\n\t.travis.yml: Set sudo false; use containers\n\n2014-12-22  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\tDefine `map_values`\n\n2014-05-21  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\t`in` is now `inside`, added `in` as inverse of `has`\n\n2014-05-20  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\tAdded `in` command\n\n2014-12-21  Eiichi Sato  sato.eiichi@gmail.com\n\n\tFix examples in manual\n\n\tFix indents in manual.yml\n\n\tHTML-escape jq programs in manual\n\n\tFix examples in manual\n\n2014-12-12  Nicolas Williams  nico@cryptonector.com\n\n\tAdd until(cond; next); fix #639\n\n\tAdd --argjson, fix #648\n\n2014-11-29  Nicolas Williams  nico@cryptonector.com\n\n\tFix refcount leak, fix #618\n\n2014-11-28  Nicolas Williams  nico@cryptonector.com\n\n\tSTOREV/LOADV* should also print refcnts\n\n\tEnable printing of stack val refcnts\n\n\tPrint stack value refcounts when tracing (#636)\n\n2014-11-23  Colin von Heuring  colin@janrain.com\n\n\tDoc correction\n\n2014-11-11  Ian Miell  ian.miell@gmail.com\n\n\tRequirements made slightly more complete: cf https://github.com/ianmiell/shutit/blob/master/library/jq/jq.py\n\n2014-11-05  Steven Maude  StevenMaude@users.noreply.github.com\n\n\tFix typos in tutorial\n\n2014-10-21  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\tDefine {any,all}/2 independently from {any,all}/0\n\n2014-10-20  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\tDefine {any,all}/{0,1} in terms of {any,all}/2\n\n2014-10-10  Nicolas Williams  nico@cryptonector.com\n\n\tAdd support for JSON sequence MIME type\n\n2014-10-06  William Langford  wlangfor@gmail.com\n\n\tProperly call onig_error_code_to_str\n\n2014-10-06  pkoppstein  pkoppstein@gmail.com\n\n\tfix sub (#586); add gsub/3; add transpose/0.\n\n2014-10-03  Nicolas Williams  nico@cryptonector.com\n\n\tUpdate docs about sort/group/min/max/unique\n\n\tfrom-entries should work with EC2 (fix #592)\n\n\tRemove sort/1 and group/1\n\n2014-09-30  Nicolas Williams  nico@cryptonector.com\n\n\tto_entries should not sort keys (fix #561)\n\n2014-09-22  William Langford  wlangfor@gmail.com\n\n\tProperly handle when objects cannot be folded\n\n2014-08-30  Nicolas Williams  nico@cryptonector.com\n\n\tDrop the jq version directory from search path\n\n\tNever close stdin; allow multiple `-` arguments\n\n\tHandle invalid inputs in argument files (fix #562)\n\n2014-08-28  William Langford  wlangfor@gmail.com\n\n\tProperly handle incomplete json when input is file\n\n2014-08-10  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `module` directive, `modulemeta` builtin\n\n2014-08-09  Nicolas Williams  nico@cryptonector.com\n\n\tConstant fold objects\n\n\tFold constant arrays\n\n\tMore constant folding: null, true, and false\n\n\t`.foo[-1] = ...` trips assertion (fix #490)\n\n\tAllow any number of jq-coded function arguments\n\n2014-08-08  Nicolas Williams  nico@cryptonector.com\n\n\tMake regexp builtins and range/3 use #524 too\n\n\tUse `def f($a): ...;` syntax for builtins\n\n\tAdd `def f($arg):` syntax (fix #524)\n\n2014-07-31  pkoppstein  pkoppstein@gmail.com\n\n\tregex filters (#432): scan, splits, split, sub, gsub\n\n2014-08-06  Nicolas Williams  nico@cryptonector.com\n\n\tBetter error msg for bad shell quoting (fix #538)\n\n2014-08-04  William Langford  wlangfor@gmail.com\n\n\tActually check version for bison.\n\n2014-08-03  pkoppstein  pkoppstein@gmail.com\n\n\tApply TCO to recurse/1, add recurse/2; tweak docs\n\n2014-08-01  Adam Lindberg  hello@alind.io\n\n\tAdd example of selecting object with keys\n\n2014-07-19  pkoppstein  pkoppstein@gmail.com\n\n\tAdd capture; document regular expression filters\n\n2014-07-28  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `first`, `nth`, `last` (fix #510)\n\n2014-07-27  Nicolas Williams  nico@cryptonector.com\n\n\tFold constants (fix #504)\n\n2014-07-21  William Langford  wlangfor@gmail.com\n\n\tChanging color codes to fix #495\n\n2014-07-09  William Langford  wlangfor@gmail.com\n\n\tAdded library system with -l, -L, and JQ_LIBRARY_PATH\n\n2014-07-14  Simon Elsbrock  simon@iodev.org\n\n\tjq 1.4 is in Debian\n\n2014-07-13  Marc Bruggmann  marcbr@spotify.com\n\n\tFix manual example for `endswith`.\n\n2014-07-09  Hanfei Shen  qqshfox@gmail.com\n\n\tFix examples for `del` in manual\n\n2014-07-08  Zhiming Wang  zmwangx@gmail.com\n\n\tFix invalid YAML in manual.yml\n\n\tAdd tests/all.trs to .gitignore\n\n2014-07-09  Nicolas Williams  nico@cryptonector.com\n\n\tBetter document `path()`'s power; also `|=`\n\n\tAdd `foreach EXP as $var (INIT; UPDATE)` form\n\n\tMake `while()` handle `break`\n\n2014-07-07  Nicolas Williams  nico@cryptonector.com\n\n\tMake C-coded built-ins take `jq_state *` argument\n\n\t`error(x)` should not `tostring` its arg; fix #466\n\n\t`limit` should use `break`\n\n\tMake `any/2` and `all/2` efficient using `foreach`\n\n2013-12-24  Nicolas Williams  nico@cryptonector.com\n\n\tjv_invalid() shouldn't allocate\n\n2013-12-31  Nicolas Williams  nico@cryptonector.com\n\n\tjv_show() should be able to display invalid values\n\n2014-07-07  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `break` builtin for `foreach`\n\n\tExplain `foreach`'s powers a bit more\n\n\tDocument `path(path_expression)` builtin\n\n\t$var[\"foo\"]=1 can't work as expected; doc fix #236\n\n\tBetter check for lib has only functions (fix #138)\n\n2014-07-06  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `any/N` and `all/N` x N in (1, 2) (fix #455)\n\n\tAdd `foreach` and `limit`\n\n2014-07-04  William Langford  wlangfor@gmail.com\n\n\tAdd support for negative indices for .[]; fix #462\n\n2014-07-06  Nicolas Williams  nico@cryptonector.com\n\n\tAdd general `?` operator\n\n2014-07-05  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `try EXP catch EXP`\n\n2014-07-06  Nicolas Williams  nico@cryptonector.com\n\n\tDocument `error/1`\n\n2014-07-02  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `while(cond; update)` (fix #314)\n\n\tAdd `range(init;upto;by)` (fix #317)\n\n2014-07-01  Nicolas Williams  nico@cryptonector.com\n\n\tDescribe generators, range() with by to manual\n\n2014-07-01  William Langford  wlangfor@gmail.com\n\n\tFixed base64 issue with UTF-8 strings\n\n2014-06-30  Nicolas Williams  nico@cryptonector.com\n\n\tTCO to the max!\n\n2014-06-25  William Langford  wlangfor@gmail.com\n\n\tAdded cross-compilation script to build libjq for iOS.\n\n2014-06-29  Zhiming Wang  zmwangx@gmail.com\n\n\tLet @uri produce uppercase hexadecimal digits...\n\n2014-06-24  Nicolas Williams  nico@cryptonector.com\n\n\tGet \"Try Online\" button working (fix #440)\n\n2014-06-22  Nicolas Williams  nico@cryptonector.com\n\n\tTail call optimization (close #437)\n\n2014-06-20  Nicolas Williams  nico@cryptonector.com\n\n\tAllow stacking of short options (fix #346)\n\n2014-06-18  William Langford  wlangfor@gmail.com\n\n\tAdded regex support as per issue #164.\n\n2014-06-17  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `-j` / `--join-output` option, similar to `-r`\n\n2014-06-18  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\tSimplified standard library\n\n2014-06-16  Nicolas Williams  nico@cryptonector.com\n\n\tFix #280: from_entries of [] is null, should be {}\n\n2014-06-16  Nicolas Williams  nico@cryptonector.com\n\n\tNo args default w/ tty stdout, not tty stdin #220\n\n2014-06-16  Santiago Lapresta  santiago.lapresta@gmail.com\n\n\tAdded `flatten` and `flatten(x)` functions\n\n2014-06-16  Nicolas Williams  nico@cryptonector.com\n\n\tAdd ChangeLog and NEWS files\n\n2014-06-14  Nicolas Williams  nico@cryptonector.com\n\n\tAllow multiple functions with different arities\n\n2014-06-13  Nicolas Williams  nico@cryptonector.com\n\n\tAdd `env` builtin\n\n2014-06-13  Nicolas Williams  nico@cryptonector.com\n\n\tDocument the lambda nature of function args #391\n\n2014-06-13  Nicolas Williams  nico@cryptonector.com\n\n\tAdd jqplay link to the site\n\n2014-06-12  Jingwen Owen Ou  jingweno@gmail.com\n\n\tjqplay has a domain now\n\n2014-06-12  Nicolas Williams  nico@cryptonector.com\n\n\tMake a better jq.1 when Ruby deps missing\n\n2014-06-11  Kim De Mey  kim.demey@gmail.com\n\n\tDetect endianness at configuration with Autoconf AC_C_BIGENDIAN feature\n\n2014-06-09  Nicolas Williams  <nico@cryptonector.com>\n\n\tAdd libm.h to dist file list\n\n\tAdd note about cmd.exe quoting\n\n\tBuilding docs fails on powerpc (#349)\n\n2014-06-08  Nicolas Williams  <nico@cryptonector.com>\n\n\tUpdate site news\n\n\tAlso fix configure.ac to use git describe --tags\n\n\tFix scripts/version: use git describe --tags ...\n\tAfter tagging as 1.4 scripts/version was still producing jq-1.3-....\n\n\tAdd `indices(s)`, improve `index(s)`, `rindex(s)`\n\tNow these deal with arrays as input and `s` being an array or a scalar.\n\n\tImprove `index` and `rindex` examples\n\n\tRemove reference to `getpath` from docs\n\n\tDocument `index` and `rindex` (#389)\n\n2014-06-07  Santiago Lapresta  <santiago.lapresta@gmail.com>\n\n\tAdded `join` function\n\n2014-06-07  Nicolas Williams  <nico@cryptonector.com>\n\n\tString * number should be commutative\n\n2014-06-04  Nicolas Williams  <nico@cryptonector.com>\n\n\tAdd cross-compilation notes to README\n\tA detailed set of instruction as to how to setup a cross-compilation\n\tenvironment for OS X and Win32/64 would be nice.\n\n\tAdd -j option to scripts/crosscompile\n\n\tAdd flags argument to jv_parser_new()\n\tFor extensibility.  We might add streaming parser options, even binary\n\tJSON encoding options.\n\n2014-06-02  Nicolas Williams  <nico@cryptonector.com>\n\n\tFix tests failures on Windows\n\tAnd Solaris 8 and 9 too, no doubt.  The problem was that non-standard\n\tvsnprintf()s that return -1 when the buffer is too small were not\n\tproperly supported.\n\n2014-05-20  Santiago Lapresta  <santiago.lapresta@gmail.com>\n\n\tDocumented `del` command\n\n2014-05-11  Santiago Lapresta  <santiago.lapresta@gmail.com>\n\n\tAdded texts/examples to unique_by function\n\n\tAdded unique_by function\n\n2014-04-17  Nicolas Williams  <nico@cryptonector.com>\n\n\tMake pthread tls configurable for Mingw build\n\tFor the Mingw build we don't want to pull in the pthread DLL just\n\tbecause we can autodetect pthread support.  That would make the jq.exe\n\tbinary not self-contained.\n\n2014-04-16  Nicolas Williams  <nico@cryptonector.com>\n\n\tAdd autoconf checks for pthreads; fix #340\n\n2014-03-20  Jingwen Owen Ou  <jingweno@gmail.com>\n\n\tAdd link to jqplay\n\n2014-03-13  Nicolas Williams  <nico@cryptonector.com>\n\n\tFix for #303 in the sources\n\n2014-03-13  Santiago Lapresta  <santiago.lapresta@gmail.com>\n\n\tAdded `arrays` and other filters\n\tArrays, objects, numbers, strings, booleans, nulls, values (non-nulls)\n\t-- these builtins filter out those inputs that don't match the name of\n\tthe builtin.\n\n\tThis fixes #322 and #324.\n\n2014-03-07  Filippo Valsorda  <filippo.valsorda@gmail.com>\n\n\tAdd a recursive object merge strategy and bind it to *\n\tThis commit adds a jv_object_merge_recursive function, that performs\n\trecursive object merging, and binds it to multiply when applied to\n\ttwo objects.\n\n\tCloses #320\n\n2014-03-06  Nicolas Williams  <nico@cryptonector.com>\n\n\tMake libm tests more portable\n\n2014-02-26  Andrew Rodland  <andrew@cleverdomain.org>\n\n\tRepair jv_show\n\n2014-02-26  Andrew Rodland  <andrew@cleverdomain.org>\n\n\tMake jq --raw-output --unbuffered work\n\t--unbuffered was only affecting the normal output case, not the --raw-output case. Make the two of them play together.\n\n\tThis also makes sure that the output is flushed *after* printing the newline, so a consumer doesn't lag a line behind.\n\n2014-02-21  Nicolas Williams  <nico@cryptonector.com>\n\n\tAdd cbrt (cube root)\n\n\tAdd missing trig functions and barebones test\n\n\tRemove non-standard exp10()\n\n2014-02-21  Mike McCabe  <mccabe@archive.org>\n\n\tInitial add of math functions.\n\n2014-02-20  Nicolas Williams  <nico@cryptonector.com>\n\n\tAdd `?`, `.[]?`, and `..` operators\n\tMake XPath-like `//a/b` recursive structure traversal easier in jq,\n\twhich then becomes:\n\n\t    ..|.a?.b?\n\n\tThe `?` operator suppresses errors about . not being an array or object.\n\tThe `..` operator is equivalent to calling the new `recurse_down`\n\tbuilt-in, which in turn is equivalent to\n\n\t    recurse(.[]?)\n\n\tNote that `..a` is not supported; neither is `...a`.  That could be add\n\tadded, but it doesn't seem worth the trouble of saving the need to type\n\ta '|'.\n\n2014-02-16  Santiago Lapresta  <santiago.lapresta@gmail.com>\n\n\tAdded `all` and `any` builtins\n\n2014-01-25  polyester  <paul@cleanclothes.org>\n\n\twork with newer versions of automake\n\twhen using a newer automake, the autoreconf step fails with warnings:\n\t\"linking libtool libraries using a non-POSIX archiver requires 'AM_PROG_AR' in 'configure.ac' \"\n\n\tThis happens for instance on ubuntu 13.10.\n\tDoing just that, adding 'AM_PROG_AR' to configure.ac fixes the problem.\n\n2014-01-01  Nicolas Williams  <nico@cryptonector.com>\n\n\tFix #201; check that bison accepts --warnings\n\n2013-12-27  Joe Littlejohn  <joe.littlejohn@nokia.com>\n\n\tFix rpm build (`make rpm`)\n\t* Re-add VERSION as it's required for `./setup superclean`\n\t  and `make rpm`.\n\t* Add *.rpm to git ignore, we never want them under version control.\n\n2013-12-27  Filippo Giunchedi  <fgiunchedi@gmail.com>\n\n\tinclude additional files in jq.spec\n\tthis will probably need changing upon SONAME bump\n\n\tfix rpm Makefile target and prerequisites\n\tdepend on dist and the specfile, plus use automake's variables\n\n2013-12-26  Nicolas Williams  <nico@cryptonector.com>\n\n\tDocument --version\n\n2013-12-26  Nicolas Williams  <nico@cryptonector.com>\n\n\tAdd jv_dumpf() and jv_show()\n\tjv_dumpf() takes a FILE *.\n\n\tjv_show() is intended for use in debuggers, so it dumps the jv to stderr\n\tand it does not jv_free() the jv, so it's safe to\n\t\"call jv_show(some_jv, -1)\" in a debugger.  If flags == -1 then the jv\n\twill be shown pretty-printed and in color.\n\n2013-12-26  Nicolas Williams  <nico@cryptonector.com>\n\n\tDocument .foo.bar in manual\n\n\tDocument exit numbers\n\n\tNormalize errors for -e\n\n2013-12-25  Nicolas Williams  <nico@cryptonector.com>\n\n\tFix doc typos (.[foo] wanted to be .[\"foo\"])\n\n\tAdd note to jq.1 about shell quoting\n\n2013-12-20  Philipp Hagemeister  <phihag@phihag.de>\n\n\tIgnore the config/test-driver file\n\tThis file is automatically generated and does not need to be committed.\n\n\tFix @uri example\n\tPreviously, the @uri example didn't match the actual behavior of the current jq, as exclamation marks do not need to be encoded in URIs.\n\tReplace the example with an input that needs encoding, and is encoded by jq.\n\n2013-12-17  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tAllow negated object values without parens. Fixes #247\n\n2013-12-17  Nicolas Williams  <nico@cryptonector.com>\n\n\tFix memmem() error\n\n2013-12-13  Rémy Léone  <remy.leone@gmail.com>\n\n\tAdding a .travis.yml file to use the travis-ci.org\n\tFrom wikipedia:\n\n\tTravis CI is a hosted, distributed continuous integration service used\n\tto build and test projects hosted at GitHub.\n\n\tTravis CI is configured by adding a file named .travis.yml, which is a\n\tYAML format text file, to the root directory of the GitHub repository.\n\n\tTravis CI automatically detects when a commit has been made and pushed\n\tto a GitHub repository that is using Travis CI, and each time this\n\thappens, it will try to build the project and run tests. This includes\n\tcommits to all branches, not just to the master branch. When that\n\tprocess has completed, it will notify a developer in the way it has been\n\tconfigured to do so — for example, by sending an email containing the\n\ttest results (showing success or failure), or by posting a message on an\n\tIRC channel. It can be configured to run the tests on a range of\n\tdifferent machines, with different software installed (such as older\n\tversions of a programming language, to test for compatibility).\n\n2013-12-13  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tMake the testsuite run on machines without valgrind\n\n\tFormat more integers as integers, not scientific notation.\n\tjq is now willing to put up to 15 zeros after an integer before\n\tmoving to scientific notation.\n\n2013-12-11  Nicolas Williams  <nico@cryptonector.com>\n\n\tComplete more-arity feature not complete\n\tAnd test\n\n2013-12-10  David R. MacIver  <david@drmaciver.com>\n\n\tconvert range bounds to integers in a way that avoids undefined behaviour\n\n\tadd checking of numeric indices to an array to see if they can reasonably be considered integers. Avoid undefined behaviour if out of bounds\n\n2013-12-09  David R. MacIver  <david@drmaciver.com>\n\n\tsome functions were missing prototypes. Add them\n\n2013-12-08  David R. MacIver  <david@drmaciver.com>\n\n\tThese vfprintfs are being used as if they were printfs. Fix that\n\n\tconsistent use of goto out in main\n\n2013-12-08  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tRefactor jv structure.\n\tNew structure layout is simpler and also faster.  In particular, it's\n\tnow small enough to be passed in registers on amd64.\n\n\tMake testsuite not leak when compiled with -DNDEBUG.\n\n2013-12-08  David R. MacIver  <david@drmaciver.com>\n\n\ttest for losing memory on compile errors\n\n\targs to jq_compile_args were not getting freed when there were errors in the compile\n\n2013-12-06  Nicolas Williams  <nico@cryptonector.com>\n\n\tFix double-free typo in print_error()\n\n\tFix manual.yml\n\n2013-12-04  Nicolas Williams  <nico@cryptonector.com>\n\n\tConditionally #define _GNU_SOURCE in compile.c\n\n\tAdd tests for string index by string and builtins\n\n\tAdd index and rindex builtins\n\n\tAdd index strings by string; return string indexes\n\t    % jq '.[\",\"]'\n\t    \"a,bc,def,ghij,klmno\"\n\t    [1,4,8,13]\n\t    %\n\n\tMake length return abs value of numeric inputs\n\n\tAdd callback interface for errors\n\tPrinting to stderr is not the right answer for a library.\n\n\tAdd jv_string_vfmt()\n\n\tDocument ltrimstr and rtrimstr\n\n\tTest ltrimstr and rtrimstr functions\n\n\tAdd ltrimstr and rtrimstr functions\n\n\tDocument -e / --exit-status argument\n\n\tAdd -e | --exit-status CLI option\n\n\tDocument tojson and fromjson builtins\n\n\tTest tojson and fromjson\n\n\tAdd tojson and fromjson builtins\n\n\tDocument split function\n\n\tDocument string multiplication and division\n\n\tDocument string functions and slicing\n\n\tTest string slicing\n\n\tAdd string slicing\n\n\tAdd tests for string division/splitting\n\n\tAdd string division by string (split on separator)\n\n\tTest starts/endswith and string multiplication\n\n\tAdd string multiplication by number\n\n\tAdd startswith/endswith\n\n\tAdd explode/implode jq functions to match jv API\n\n\tUse uint32_t for codepoint in  jv_string_append_codepoint()\n\n\tAdd jv string utility functions\n\t    jv_string_empty()\n\t        -> return an empty string with given allocated length (for fast\n\t           appends)\n\t    jv_string_append_codepoint\n\t        -> append a single codepoint (int) to the given string\n\t    jv_string_explode\n\t        -> return an array of codepoints making up a string\n\t    jv_string_implode\n\t        -> return the UTF-8 encoding of an array of codepoint numbers\n\n\tSupport more arguments for defs\n\n2013-12-04  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tPreserve insertion order in objects. Closes #169.\n\n2013-11-30  Nicolas Pouillard  <nicolas.pouillard@gmail.com>\n\n\tAdd a few more test cases (from the man page)\n\n2013-11-08  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tAdd a --unbuffered option. Closes #206\n\n2013-11-07  Peter van Dijk  <peter@7bits.nl>\n\n\tcount should be length\n\tExample refers to a count function, which does not exist. Replacing it with length works.\n\n2013-11-07  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tFix a crash on group_by of empty list. Fixes #208.\n\n2013-10-16  Ryoichi KATO  <ryo1kato@gmail.com>\n\n\tDocs: add description of --from-file option\n\n2013-10-06  Juan Guerrero  <juan.guerrero.lozano@gmail.com>\n\n\tFix typo on error message\n\n2013-09-19  Kenny Shen  <kenny.shen@zalora.com>\n\n\tAdd missing -i flag in build instructions\n\n2013-09-14  Michael Daines  <michael@mdaines.com>\n\n\tAdd test showing calculation of standard deviation\n\n2013-09-13  Mike Daines  <michael@mdaines.com>\n\n\tFix typo\n\n2013-09-11  Michael Daines  <michael@mdaines.com>\n\n\tAdd sqrt operator\n\n2013-09-04  Jack Pearkes  <jackpearkes@gmail.com>\n\n\tdocs: update the tutorial to use GitHub's API\n\n2013-09-01  Ankur  <ankz.kothari@gmail.com>\n\n\tCall AM_INIT_AUTOMAKE once only\n\tFixes build with automake-1.14\n\n2013-08-19  Joe Littlejohn  <joe.littlejohn@nokia.com>\n\n\tFix Makefile after refactoring of stacks in 05d90517b02\n\n2013-06-23  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tRemove #includes from jv.h\n\n\tFix the jv_parser interface.\n\n\tUse libtool's built-in symbol exporting rather than a mapfile.\n\n\tMove gen_utf8_tables to scripts\n\n\tMove libtool m4 junk to config/ and delete some autogenerated files.\n\n\tRemove Autoconf-generated config.h.\n\n2013-06-22  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tBuild libjq only once, and link it statically to ./jq\n\tThis means ./jq is a real binary rather than a libtool turd.\n\n\tFix distcheck.\n\tUpdate list of files to be distributed.\n\n\tUtf8 fixes. Closes #161\n\n\tReject all overlong UTF8 sequences.\n\n\tFix various UTF8 parsing bugs.\n\tIn particular, parse bad UTF8 by replacing the broken bits with U+FFFD\n\tand resynchronise correctly after broken sequences.\n\n\tFix example in manual for `floor`. See #155.\n\n2013-06-21  Nicolas Williams  <nico@cryptonector.com>\n\n\tDocument floor\n\n\tAdd floor operator\n\n\tDocument mod\n\n\tAdd mod (and setmod) operators\n\n\tUpdate .gitignore\n\n\tAdd libjq autoconf goo\n\n\tQuiet setup.sh re: tmp dir\n\n2013-06-21  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tMove cfunction invocation code to the interpreter loop.\n\n2013-06-18  Nicolas Williams  <nico@cryptonector.com>\n\n\tFix serious bug in handling of --argfile\n\n\tFix leaks in jv_load_file()\n\n2013-06-17  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tFold opcode.{c,h} into bytecode.{c,h}\n\n\tSimplify block functions for variables\n\n\tSaner build instructions in README.md\n\tCloses #144\n\n\tRemove some initialise-to-zero code.\n\tThis lets valgrind find more bugs - if a field isn't given a\n\twell-defined value valgrind will now find it instead of seeing it\n\tset to zero with memset.\n\n2013-06-17  Nicolas Williams  <nico@cryptonector.com>\n\n\tRemove accidentally introduced use of fopen \"e\"\n\n2013-06-16  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tMerge pull request #114 from nicowilliams/nomem_handler\n\tAdd jv_nomem_handler()\n\n2013-06-16  Nicolas Williams  <nico@cryptonector.com>\n\n\tRemove last remnant of main.h\n\n2013-06-15  Nicolas Williams  <nico@cryptonector.com>\n\n\tAllow --run-tests to take a file argument\n\n\tFixup API to get closer to a libjq\n\n2013-06-15  Nicolas Williams  <nico@cryptonector.com>\n\n\tMove slurp_file() into library as jv_load_file()\n\tNeeded as part of creating a libjq.\n\n2013-06-14  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tClean up lots of stack and frame logic.\n\tMove frame defs to execute.c\n\n2013-06-13  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tSimplify frame logic.\n\n\tUnify all stacks. Passes tests, but needs cleanup.\n\n2013-06-11  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tSupport .\"foo\" syntax for accessing fields. See #141.\n\n2013-06-09  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tUnify frame and data stacks\n\n2013-06-05  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tSpeed up cached configure (./configure -C)\n\n\tClean up flex lines in build\n\n\tLex and parse .foo better.\n\t'.as' is now valid, '. foo' is now invalid. See #141.\n\n2013-06-04  Markus Lanthaler  <mark_lanthaler@gmx.net>\n\n\tUpdate README.md\n\tUpdate the link to the documentation. All GitHub pages are now using the github.io domain.\n\n2013-06-03  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tMake jq --version print to stdout, not stderr\n\n\tBetter error handling for .foo case in parser. See #141.\n\n\tLet the parser rather than the lexer handle invalid characters.\n\n\tAdd command-line option to sort object keys.\n\tCloses #79.\n\n\tClean up Makefile.am (distcheck, rebuild version.h less often)\n\n2013-05-31  Brendan Macmillan  <melbourne.research@gmail.com>\n\n\tStop warning on fgets, simple version\n\n\tStop warning on fgets, complex version\n\n2013-05-31  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tSquash a warning on some GCC versions\n\n2013-05-29  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tSupport for printing object keys in sorted order.\n\tNo command-line option to enable this yet. See #79.\n\n2013-05-29  Brendan Macmillan  <melbourne.research@gmail.com>\n\n\tBugfix multiline off-by-one (locfile.c)\n\n\tlocfile.h -> locfile.h + locfile.c\n\tclean up includes of a few files\n\n\tHack bugfix for multiline off-by-one (locfile.c)\n\n\tLoad library from ~/.jq\n\n2013-05-24  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\tMake jq --version report an actual git revision.\n\tCloses #129.\n\n2013-05-23  Nicolas Williams  <nico@cryptonector.com>\n\n\tAdd --argfile variant of --arg (issue #117)\n\tThis is useful when one has a database (in JSON form) to query using jq\n\tinput data.\n\n\t    % echo '{\"a\":1, \"c\":5}' > db.json\n\t    % echo '\"c\"'|./jq --argfile f /tmp/a '$f[.]'\n\t    5\n\t    % echo '\"a\"'|./jq --argfile f /tmp/a '$f[.]'\n\t    1\n\t    % echo '\"b\"'|./jq --argfile f /tmp/a '$f[.]'\n\t    null\n\t    %\n\n2013-05-23  Stephen Dolan  <mu@netsoc.tcd.ie>\n\n\t'make clean' won't delete jq.1 if it can't be rebuilt.\n\tSee #131\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.72265625,
          "content": "FROM debian:12-slim AS builder\n\nENV DEBIAN_FRONTEND=noninteractive \\\n    DEBCONF_NONINTERACTIVE_SEEN=true \\\n    LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8\n\nRUN apt-get update \\\n && apt-get install -y \\\n      build-essential \\\n      autoconf \\\n      libtool \\\n      git \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nCOPY . /app\nRUN autoreconf -i \\\n && ./configure \\\n      --disable-docs \\\n      --disable-valgrind \\\n      --with-oniguruma=builtin \\\n      --enable-static \\\n      --enable-all-static \\\n      --prefix=/usr/local \\\n && make -j$(nproc) \\\n && make check VERBOSE=yes \\\n && make install-strip\n\nFROM scratch\n\nCOPY --from=builder /app/AUTHORS /app/COPYING /usr/local/bin/jq /\nRUN [\"/jq\", \"--version\"]\nENTRYPOINT [\"/jq\"]\n"
        },
        {
          "name": "KEYS",
          "type": "blob",
          "size": 0.4111328125,
          "content": "pub   4096R/71523402 2015-10-11\n      Key fingerprint = 4FD7 01D6 FA9B 3D2D F5AC  935D AF19 040C 7152 3402\nuid                  jq Release Signing Key <jq@stedolan.github.io>\n\npub   2048R/D15684DB 2015-10-12 [expires: 2017-10-11]\n      Key fingerprint = 7F6C 7BD3 0412 AFD5 8C1A  5007 EB26 A4F8 D156 84DB\nuid                  Nicolas Williams <nico@cryptonector.com>\nsub   2048R/9C9CCD6A 2015-10-12 [expires: 2017-10-11]\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 8.826171875,
          "content": "\n### C source files to be built and distributed.\n\nLIBJQ_INCS = src/builtin.h src/bytecode.h src/compile.h                 \\\n        src/exec_stack.h src/jq_parser.h src/jv_alloc.h src/jv_dtoa.h   \\\n        src/jv_unicode.h src/jv_utf8_tables.h src/lexer.l src/libm.h    \\\n        src/linker.h src/locfile.h src/opcode_list.h src/parser.y       \\\n        src/util.h src/decNumber/decContext.h src/decNumber/decNumber.h \\\n        src/decNumber/decNumberLocal.h src/jv_dtoa_tsd.h src/jv_thread.h \\\n        src/jv_private.h\n\nLIBJQ_SRC = src/builtin.c src/bytecode.c src/compile.c src/execute.c    \\\n        src/jq_test.c src/jv.c src/jv_alloc.c src/jv_aux.c              \\\n        src/jv_dtoa.c src/jv_file.c src/jv_parse.c src/jv_print.c       \\\n        src/jv_unicode.c src/linker.c src/locfile.c src/util.c          \\\n        src/decNumber/decContext.c src/decNumber/decNumber.c            \\\n        src/jv_dtoa_tsd.c                                               \\\n        ${LIBJQ_INCS}\n\n### C build options\n\nAM_CFLAGS = -Wextra -Wall -Wno-unused-parameter -Wno-unused-function \\\n            -Woverlength-strings\n\nif WIN32\nAM_CFLAGS += -municode\nendif\n\nACLOCAL_AMFLAGS = -I config/m4\n\n### Generating the lexer and parser\n\n# While there is some autoconf macro support for lex/flex, it doesn't support\n# header file creation so we'll use good old make\nif MAINTAINER_MODE\nBUILT_SOURCES = src/lexer.h src/lexer.c src/parser.h src/parser.c \\\n                src/builtin.inc src/config_opts.inc src/version.h\nsrc/lexer.c: src/lexer.l\n\t$(AM_V_LEX) flex -o src/lexer.c --header-file=src/lexer.h $<\nsrc/lexer.h: src/lexer.c\nelse\nBUILT_SOURCES = src/builtin.inc src/config_opts.inc src/version.h\n.y.c:\n\t$(AM_V_YACC) echo \"NOT building parser.c!\"\n.l.c:\n\t$(AM_V_LEX) echo \"NOT building lexer.c!\"\nendif\n\n# Tell YACC (Bison) autoconf macros that you want a header file created.\n# If the --warnings=all fails, you probably have an old version of Bison\n# macOS ships an old Bison, so update with Homebrew or MacPorts.\nAM_YFLAGS = --warnings=all -Wno-yacc -d\n\n### libjq\n\nlib_LTLIBRARIES = libjq.la\nlibjq_la_SOURCES = ${LIBJQ_SRC}\nlibjq_la_LIBADD = -lm\nlibjq_la_LDFLAGS = $(onig_LDFLAGS) -export-symbols-regex '^j[qv]_' -version-info 1:4:0\n\nif WIN32\nlibjq_la_LIBADD += -lshlwapi\nlibjq_la_LDFLAGS += -no-undefined\nendif\n\ninclude_HEADERS = src/jv.h src/jq.h\n\nif ENABLE_UBSAN\nAM_CFLAGS += -fsanitize=undefined\nendif\n\nAM_CPPFLAGS = -I$(srcdir)/src\n\n### Running tests under Valgrind\n\nif ENABLE_ASAN\nAM_CFLAGS += -fsanitize=address\nNO_VALGRIND = 1\nelse\nif ENABLE_VALGRIND\nNO_VALGRIND =\nelse\nNO_VALGRIND = 1\nendif\nendif\n\n### Code coverage with gcov\n\nif ENABLE_GCOV\nAM_CFLAGS += --coverage --no-inline\nendif\n\n### Error injection for testing\n\nif ENABLE_ERROR_INJECTION\nlib_LTLIBRARIES += libinject_errors.la\nlibinject_errors_la_SOURCES = src/inject_errors.c\nlibinject_errors_la_LIBADD = -ldl\nlibinject_errors_la_LDFLAGS = -module\nendif\n\n### Building the jq binary\n\n# Remake the version.h header file if, and only if, the git ID has changed\n.PHONY: .FORCE\n.FORCE:\ngenerate_ver = ver=\"`{ $(srcdir)/scripts/version || echo '$(VERSION)' ; } | sed 's/.*/\\#define JQ_VERSION \\\"&\\\"/'`\"\n.remake-version-h: .FORCE\n\t@ $(generate_ver); test \"x`cat src/version.h 2>/dev/null`\" = \"x$$ver\" || touch .remake-version-h\nsrc/version.h: .remake-version-h\n\tmkdir -p src\n\t$(AM_V_GEN) $(generate_ver); echo \"$$ver\" > $@\nsrc/config_opts.inc:\n\tmkdir -p src\n\t$(AM_V_GEN) if test -x ./config.status; then \\\n\t  ./config.status --config; \\\n\telse echo \"(unknown)\"; \\\n\tfi | sed -e 's/\\\\/\\\\\\\\/g' -e 's/\"/\\\\\"/g' -e 's/^/\"/' -e 's/$$/\"/' -e 's/^/#define JQ_CONFIG /' > $@\nsrc/main.c: src/version.h src/config_opts.inc\n\nsrc/builtin.inc: $(srcdir)/src/builtin.jq\n\tmkdir -p src\n\t$(AM_V_GEN) od -v -A n -t o1 -- $< | \\\n\tsed -e 's/$$/ /' \\\n\t    -e 's/\\([0123456789]\\) /\\1, /g' \\\n\t    -e 's/ $$//' \\\n\t    -e 's/ 0/  0/g' \\\n\t    -e 's/ \\([123456789]\\)/ 0\\1/g' > $@\nsrc/builtin.o: src/builtin.inc\n\nCLEANFILES = src/version.h .remake-version-h src/builtin.inc src/config_opts.inc\n\nbin_PROGRAMS = jq\njq_SOURCES = src/main.c src/version.h\njq_LDFLAGS = -static-libtool-libs\njq_LDADD = libjq.la -lm\n\nif ENABLE_ALL_STATIC\njq_LDFLAGS += -all-static\nendif\n\n### Tests (make check)\n\nTESTS = tests/mantest tests/jqtest tests/shtest tests/utf8test tests/base64test tests/uritest\nif !WIN32\nTESTS += tests/optionaltest\nendif\nAM_TESTS_ENVIRONMENT = JQ=$(abs_builddir)/jq NO_VALGRIND=$(NO_VALGRIND)\n\n# This is a magic make variable that causes it to treat tests/man.test as a\n# DATA-type dependency for the check target. As a result, it will attempt to\n# run any defined targets for tests/man.test as a dependency for check. This\n# allows us to ensure that the tests are up-to-date if the manual has been updated\ncheck_DATA = tests/man.test\n\n### Building the man tests\n\n# We use the examples in the manual as additional tests, to ensure they always work.\n# As a result, we need to rebuild the tests if the manual has been updated.\n# Making changes to the manpage without having the python deps means your\n# tests won't run. If you aren't making changes to the examples, you probably\n# don't care. But if you are, then you need to run the tests anyway.\ntests/man.test tests/manonig.test: $(srcdir)/docs/content/manual/dev/manual.yml\nif ENABLE_DOCS\n\t$(AM_V_GEN) ( cd ${abs_srcdir}/docs && \\\n\t  $(PIPENV) run python validate_manual_schema.py content/manual/dev/manual.yml && \\\n\t  $(PIPENV) run python build_mantests.py )\nelse\n\t@echo Changes to the manual.yml require docs to be enabled to update the manual test.\n\t@echo As a result, the manual test is out of date.\nendif\n\n### Building the manpage\n\n# We build the docs from the manpage yml. If no changes have been made to the\n# manpage, then we'll end up using the cached version. Otherwise, we need to\n# rebuild it.\nman_MANS = jq.1\njq.1.prebuilt: $(srcdir)/docs/content/manual/dev/manual.yml\nif ENABLE_DOCS\n\t$(AM_V_GEN) ( cd ${abs_srcdir}/docs && \\\n\t  $(PIPENV) run python validate_manual_schema.py content/manual/dev/manual.yml && \\\n\t  $(PIPENV) run python build_manpage.py ) > $@\nelse\n\t@echo Changes to the manual.yml require docs to be enabled to update the manpage.\n\t@echo As a result, the manpage is out of date.\nendif\n\njq.1: jq.1.prebuilt\n\t$(AM_V_GEN) cp $(srcdir)/jq.1.prebuilt $@\n\nCLEANFILES += jq.1\n\n### Build oniguruma\n\nif BUILD_ONIGURUMA\nlibjq_la_LIBADD += modules/oniguruma/src/.libs/libonig.la\nSUBDIRS = modules/oniguruma\nendif\n\nAM_CFLAGS += $(onig_CFLAGS)\n\nif WITH_ONIGURUMA\nTESTS += tests/onigtest tests/manonigtest\nendif\n\n### Packaging\n\ninstall-binaries: $(BUILT_SOURCES)\n\t$(MAKE) $(AM_MAKEFLAGS) install-exec\n\nDOC_FILES = docs/content docs/public docs/templates                     \\\n        docs/Pipfile docs/Pipfile.lock docs/build_manpage.py            \\\n        docs/build_mantests.py docs/build_website.py docs/README.md     \\\n        docs/validate_manual_schema.py docs/manual_schema.yml\n\nEXTRA_DIST = $(DOC_FILES) $(man_MANS) $(TESTS) $(TEST_LOG_COMPILER)     \\\n        jq.1.prebuilt jq.spec src/lexer.c src/lexer.h src/parser.c      \\\n        src/parser.h src/version.h src/builtin.jq scripts/version       \\\n        libjq.pc                                                        \\\n        tests/modules/a.jq tests/modules/b/b.jq tests/modules/c/c.jq    \\\n        tests/modules/c/d.jq tests/modules/data.json                    \\\n        tests/modules/home1/.jq tests/modules/home2/.jq/g.jq            \\\n        tests/modules/lib/jq/e/e.jq tests/modules/lib/jq/f.jq           \\\n        tests/modules/shadow1.jq tests/modules/shadow2.jq               \\\n        tests/modules/syntaxerror/syntaxerror.jq                        \\\n        tests/modules/test_bind_order.jq                                \\\n        tests/modules/test_bind_order0.jq                               \\\n        tests/modules/test_bind_order1.jq                               \\\n        tests/modules/test_bind_order2.jq                               \\\n        tests/onig.supp tests/local.supp                                \\\n        tests/setup tests/torture/input0.json                           \\\n        tests/optional.test tests/man.test tests/manonig.test           \\\n        tests/jq.test tests/onig.test tests/base64.test tests/uri.test  \\\n        tests/utf8-truncate.jq tests/jq-f-test.sh                       \\\n        tests/no-main-program.jq tests/yes-main-program.jq\n\nAM_DISTCHECK_CONFIGURE_FLAGS=--with-oniguruma=builtin\n\n# README.md is expected in GitHub projects, good stuff in it, so we'll\n# distribute it and install it with the package in the doc directory.\ndist_doc_DATA = README.md NEWS.md COPYING AUTHORS\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libjq.pc\n\nRELEASE ?= 1\nrpm: dist jq.spec\n\t@echo \"Packaging jq as an RPM ...\"\n\tmkdir -p rpm/SOURCES rpm/BUILD rpm/BUILDROOT rpm/RPMS rpm/SPECS\n\tcp jq-$(VERSION).tar.gz rpm/SOURCES/\n\trpmbuild -tb --define \"_topdir ${PWD}/rpm\" --define \"_prefix /usr\" --define \"myver $(VERSION)\" --define \"myrel ${RELEASE}\" rpm/SOURCES/jq-$(VERSION).tar.gz\n\tfind rpm/RPMS/ -name \"*.rpm\" -exec mv {} ./ \\;\n\trm -rf rpm\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 14.0205078125,
          "content": "# 1.7.1\n\n## Security\n\n- CVE-2023-50246: Fix heap buffer overflow in jvp\\_literal\\_number\\_literal\n- CVE-2023-50268: fix stack-buffer-overflow if comparing nan with payload\n\n## CLI changes\n\n- Make the default background color more suitable for bright backgrounds. @mjarosie @taoky @nicowilliams @itchyny #2904\n- Allow passing the inline jq script after `--`. @emanuele6 #2919\n- Restrict systems operations on OpenBSD and remove unused `mkstemp`. @klemensn #2934\n- Fix possible uninitialised value dereference if `jq_init()` fails. @emanuele6 @nicowilliams #2935\n\n## Language changes\n\n- Simplify `paths/0` and `paths/1`. @asheiduk @emanuele6 #2946\n- Reject `U+001F` in string literals. @torsten-schenk @itchyny @wader #2911\n- Remove unused nref accumulator in `block_bind_library`. @emanuele6 #2914\n- Remove a bunch of unused variables, and useless assignments. @emanuele6 #2914\n- main.c: Remove unused EXIT\\_STATUS\\_EXACT option. @emanuele6 #2915\n- Actually use the number correctly casted from double to int as index. @emanuele6 #2916\n- src/builtin.c: remove unnecessary jv\\_copy-s in type\\_error/type\\_error2. @emanuele6 #2937\n- Remove undefined behavior caught by LLVM 10 UBSAN. @Gaelan @emanuele6 #2926\n- Convert decnum to binary64 (double) instead of decimal64. This makes jq behave like the JSON specification suggests and more similar to other languages. @wader @leonid-s-usov #2949\n- Fix memory leaks on invalid input for `ltrimstr/1` and `rtrimstr/1`. @emanuele6 #2977\n- Fix memory leak on failed get for `setpath/2`. @emanuele6 #2970\n- Fix nan from json parsing also for nans with payload that start with 'n'. @emanuele6 #2985\n- Allow carriage return characters in comments. @emanuele6 #2942 #2984\n\n## Documentation changes\n\n- Generate links in the man page. @emanuele6 #2931\n- Standardize arch types to AMD64 & ARM64 from index page download dropdown. @owenthereal #2884\n\n## libjq\n\n- Add extern C for C++. @rockwotj #2953\n\n## Build and test changes\n\n- Fix incorrect syntax for checksum file. @kamontat @wader #2899\n- Remove `-dirty` version suffix for windows release build. @itchyny #2888\n- Make use of `od` in tests more compatible. @nabijaczleweli @emanuele6 @nicowilliams #2922\n- Add dependabot. @yeikel #2889\n- Extend fuzzing setup to fuzz parser and JSON serializer. @DavidKorczynski @emanuele6 #2952\n- Keep releasing executables with legacy names. @itchyny #2951\n\n# 1.7\n\nAfter a five year hiatus we're back with a GitHub organization, with new admins and new maintainers who have brought a great deal of energy to make a long-awaited and long-needed new release.  We're very grateful for all the new owners, admins, and maintainers.  Special thanks go to Owen Ou (@owenthereal) for pushing to set up a new GitHub organization for jq, Stephen Dolan (@stedolan) for transferring the jq repository to the new organization, @itchyny for doing a great deal of work to get the release done, Mattias Wadman (@wader) and Emanuele Torre (@emanuele6) for many PRs and code reviews.  Many others also contributed PRs, issues, and code reviews as well, and you can find their contributions in the Git log and on the [closed issues and PRs page](https://github.com/jqlang/jq/issues?q=is%3Aclosed+sort%3Aupdated-desc).\n\nSince the last stable release many things have happened:\n\n- jq now lives at <https://github.com/jqlang>\n- New maintainers, admins, and owners have been recruited.\n  - A list of [current maintainers](https://github.com/jqlang/jq/blob/jq-1.7/AUTHORS#L4-L14)\n- NEWS file is replaced by NEWS.md with Markdown format. @wader #2599\n- CI, scan builds, release, website builds etc now use GitHub actions. @owenthereal @wader @itchyny #2596 #2603 #2620 #2723\n- Lots of documentation improvements and fixes.\n- Website updated with new section search box, better section ids for linking, dark mode, etc. @itchyny #2628\n- Release builds for:\n  - Linux `amd64`, `arm64`, `armel`, `armhf`, `i386`, `mips`, `mips64`, `mips64el`, `mips64r6`, `mips64r6el`, `mipsel`, `mipsr6`, `mipsr6el`, `powerpc`, `ppc64el`, `riscv64` and `s390x`\n  - macOS `amd64` and `arm64`\n  - Windows `i386` and `amd64`\n  - Docker `linux/386`, `linux/amd64`, `linux/arm64`, `linux/mips64le`, `linux/ppc64le`, `linux/riscv64` and `linux/s390x`\n  - More details see @owenthereal #2665\n- Docker images are now available from `ghcr.io/jqlang/jq` instead of Docker Hub. @itchyny #2652 #2686\n- OSS-fuzz. @DavidKorczynski #2760 #2762\n\nFull commit log can be found at <https://github.com/jqlang/jq/compare/jq-1.6...jq-1.7> but here are some highlights:\n\n## CLI changes\n\n- Make object key color configurable using `JQ_COLORS` environment variable. @itchyny @haguenau @ericpruitt #2703\n\n  ```sh\n  # this would make \"field\" bold yellow (`1;33`, the last value)\n  $ JQ_COLORS=\"0;90:0;37:0;37:0;37:0;32:1;37:1;37:1;33\" ./jq -n '{field: 123}'\n  {\n    \"field\": 123\n  }\n  ```\n\n- Change the default color of null to Bright Black. @itchyny #2824\n- Respect `NO_COLOR` environment variable to disable color output. See <https://no-color.org> for details. @itchyny #2728\n- Improved `--help` output. Now mentions all options and nicer order. @itchyny @wader #2747 #2766 #2799\n- Fix multiple issues of exit code using `--exit-code`/`-e` option. @ryo1kato #1697\n\n  ```sh\n  # true-ish last output value exits with zero\n  $ jq -ne true ; echo $?\n  true\n  0\n  # false-ish last output value (false and null) exits with 1\n  $ jq -ne false ; echo $?\n  false\n  1\n  # no output value exists with 4\n  $ jq -ne empty ; echo $?\n  4\n  ```\n\n- Add `--binary`/`-b` on Windows for binary output. To get `\\n` instead of `\\r\\n` line endings. @nicowilliams 0dab2b1\n- Add `--raw-output0` for NUL (zero byte) separated output. @asottile @pabs3 @itchyny #1990 #2235 #2684\n\n  ```sh\n  # will output a zero byte after each output\n  $ jq -n --raw-output0 '1,2,3' | xxd\n  00000000: 3100 3200 3300                           1.2.3.\n  # can be used with xargs -0\n  $ jq -n --raw-output0 '\"a\",\"b\",\"c\"' | xargs -0 -n1\n  a\n  b\n  c\n  $ jq -n --raw-output0 '\"a b c\", \"d\\ne\\nf\"' | xargs -0 printf '[%s]\\n'\n  [a b c]\n  [d\n  e\n  f]\n  # can be used with read -d ''\n  $ while IFS= read -r -d '' json; do\n  >   jq '.name' <<< \"$json\"\n  > done < <(jq -n --raw-output0 '{name:\"a b c\"},{name:\"d\\ne\\nf\"}')\n  \"a b c\"\n  \"d\\ne\\nf\"\n  # also it's an error to output a string containing a NUL when using NUL separator\n  $ jq -n --raw-output0 '\"\\u0000\"'\n  jq: error (at <unknown>): Cannot dump a string containing NUL with --raw-output0 option\n  ```\n\n- Fix assert crash and validate JSON for `--jsonarg`. @wader #2658\n- Remove deprecated `--argfile` option. @itchyny #2768\n- Enable stack protection. @nicowilliams #2801\n\n## Language changes\n\n- Use decimal number literals to preserve precision. Comparison operations respects precision but arithmetic operations might truncate. @leonid-s-usov #1752\n\n  ```sh\n  # precision is preserved\n  $ echo '100000000000000000' | jq .\n  100000000000000000\n  # comparison respects precision (this is false in JavaScript)\n  $ jq -n '100000000000000000 < 100000000000000001'\n  true\n  # sort/0 works\n  $ jq -n -c '[100000000000000001, 100000000000000003, 100000000000000004, 100000000000000002] | sort'\n  [100000000000000001,100000000000000002,100000000000000003,100000000000000004]\n  # arithmetic operations might truncate (same as JavaScript)\n  $ jq -n '100000000000000000 + 10'\n  100000000000000020\n  ```\n\n- Adds new builtin `pick(stream)` to emit a projection of the input object or array. @pkoppstein #2656 #2779\n\n  ```sh\n  $ jq -n '{\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"e\": 4} | pick(.a, .b.c, .x)'\n  {\n    \"a\": 1,\n    \"b\": {\n      \"c\": 2\n    },\n    \"x\": null\n  }\n  ```\n\n- Adds new builtin `debug(msgs)` that works like `debug` but applies a filter on the input before writing to stderr. @pkoppstein #2710\n\n  ```sh\n  $ jq -n '1 as $x | 2 | debug(\"Entering function foo with $x == \\($x)\", .) | (.+1)'\n  [\"DEBUG:\",\"Entering function foo with $x == 1\"]\n  [\"DEBUG:\",2]\n  3\n  $ jq -n '{a: 1, b: 2, c: 3} | debug({a, b, sum: (.a+.b)})'\n  [\"DEBUG:\",{\"a\":1,\"b\":2,\"sum\":3}]\n  {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n  }\n  ```\n\n- Adds new builtin `scan($re; $flags)`. Was documented but not implemented. @itchyny #1961\n\n  ```sh\n  # look for pattern \"ab\" in \"abAB\" ignoring casing\n  $ jq -n '\"abAB\" | scan(\"ab\"; \"i\")'\n  \"ab\"\n  \"AB\"\n  ```\n\n- Adds new builtin `abs` to get absolute value. This potentially allows the literal value of numbers to be preserved as `length` and `fabs` convert to float. @pkoppstein #2767\n- Allow `if` without `else`-branch. When skipped the `else`-branch will be `.` (identity). @chancez @wader #1825 #2481\n\n  ```sh\n  # convert 1 to \"one\" otherwise keep as is\n  $ jq -n '1,2 | if . == 1 then \"one\" end'\n  \"one\"\n  2\n  # behaves the same as\n  $ jq -n '1,2 | if . == 1 then \"one\" else . end'\n  \"one\"\n  2\n  # also works with elif\n  $ jq -n '1,2,3 | if . == 1 then \"one\" elif . == 2 then \"two\" end\n  \"one\"\n  \"two\"\n  3\n  ```\n\n- Allow use of `$binding` as key in object literals. @nicowilliams 8ea4a55\n\n  ```sh\n  $ jq -n '\"a\" as $key | {$key: 123}'\n  {\n    \"a\": 123\n  }\n  # previously parentheses were needed\n  $ jq -n '\"a\" as $key | {($key): 123}'\n  {\n    \"a\": 123\n  }\n  ```\n\n- Allow dot between chained indexes when using `.[\"index\"]` @nicowilliams #1168\n\n  ```sh\n  $ jq -n '{\"a\": {\"b\": 123}} | .a[\"b\"]'\n  123\n  # now this also works\n  $ jq -n '{\"a\": {\"b\": 123}} | .a.[\"b\"]'\n  123\n  ```\n\n- Allow dot for chained value iterator `.[]`, `.[]?` @wader #2650\n\n  ```sh\n  $ jq -n '{\"a\": [123]} | .a[]'\n  123\n  # now this also works\n  $ jq -n '{\"a\": [123]} | .a.[]'\n  123\n  ```\n\n- Fix try/catch catches more than it should. @nicowilliams #2750\n- Speed up and refactor some builtins, also remove `scalars_or_empty/0`. @muhmuhten #1845\n- Now `halt` and `halt_error` exit immediately instead of continuing to the next input. @emanuele6 #2667\n- Fix issue converting string to number after previous convert error. @thalman #2400\n- Fix issue representing large numbers on some platforms causing invalid JSON output. @itchyny #2661\n- Fix deletion using assigning empty against arrays. @itchyny #2133\n\n  ```sh\n  # now this works as expected, filter out all values over 2 by assigning empty\n  $ jq -c '(.[] | select(. >= 2)) |= empty' <<< '[1,5,3,0,7]'\n  [1,0]\n  ```\n\n- Allow keywords to be used as binding name in more places. @emanuele6 #2681\n- Allow using `nan` as NaN in JSON. @emanuele6 #2712\n- Expose a module's function names in `modulemeta`. @mrwilson #2837\n- Fix `contains/1` to handle strings with NUL. @nicowilliams 61cd6db\n- Fix `stderr/0` to output raw text without any decoration. @itchyny #2751\n- Fix `nth/2` to emit empty on index out of range. @itchyny #2674\n- Fix `implode` to not assert and instead replace invalid Unicode codepoints. @wader #2646\n- Fix `indices/1` and `rindex/1` in case of overlapping matches in strings. @emanuele6 #2718\n- Fix `sub/3` to resolve issues involving global search-and-replace (gsub) operations. @pkoppstein #2641\n- Fix `significand/0`, `gamma/0` and `drem/2` to be available on macOS. @itchyny #2756 #2775\n- Fix empty regular expression matches. @itchyny #2677\n- Fix overflow exception of the modulo operator. @itchyny #2629\n- Fix string multiplication by 0 (and less than 1) to emit empty string. @itchyny #2142\n- Fix segfault when using libjq and threads. @thalman #2546\n- Fix constant folding of division and reminder with zero divisor. @itchyny #2797\n- Fix `error/0`, `error/1` to throw null error. @emanuele6 #2823\n- Simpler and faster `transpose`. @pkoppstein #2758\n- Simple and efficient implementation of `walk/1`. @pkoppstein #2795\n- Remove deprecated filters `leaf_paths`, `recurse_down`. @itchyny #2666\n\n# Previous releases\n\nRelease history\n\n- jq version 1.6 was released on Fri Nov 2 2018\n- jq version 1.5 was released on Sat Aug 15 2015\n- jq version 1.4 was released on Mon Jun 9 2014\n- jq version 1.3 was released on Sun May 19 2013\n- jq version 1.2 was released on Thu Dec 20 2012\n- jq version 1.1 was released on Sun Oct 21 2012\n- jq version 1.0 was released on Sun Oct 21 2012\n\nNew features in 1.6 since 1.5:\n\n- Destructuring Alternation\n\n- New Builtins:\n  - builtins/0\n  - stderr/0\n  - halt/0, halt_error/1\n  - isempty/1\n  - walk/1\n  - utf8bytelength/1\n  - localtime/0, strflocaltime/1\n  - SQL-style builtins\n  - and more!\n\n- Add support for ASAN and UBSAN\n\n- Make it easier to use jq with shebangs (8f6f28c)\n\n- Add $ENV builtin variable to access environment\n\n- Add JQ_COLORS env var for configuring the output colors\n\nNew features in 1.5 since 1.4:\n\n- regular expressions (with Oniguruma)\n\n- a library/module system\n\n- many new builtins\n\n  - datetime builtins\n  - math builtins\n  - regexp-related builtins\n  - stream-related builtins (e.g., all/1, any/1)\n  - minimal I/O builtins (`inputs`, `debug`)\n\n- new syntactic features, including:\n\n  - destructuring (`. as [$first, $second] | ...`)\n  - try/catch, generalized `?` operator, and label/break\n  - `foreach`\n  - multiple definitions of a function with different numbers of\n      arguments\n\n- command-line arguments\n\n  - --join-lines / -j for raw output\n  - --argjson and --slurpfile\n  - --tab and --indent\n  - --stream (streaming JSON parser)\n  - --seq (RFC7464 JSON text sequence)\n  - --run-tests improvements\n\n- optimizations:\n\n  - tail-call optimization\n  - reduce and foreach no longer leak a reference to .\n\nNew features in 1.4 since 1.3:\n\n- command-line arguments\n\n  - jq --arg-file variable file\n  - jq --unbuffered\n  - jq -e / --exit-status (set exit status based on outputs)\n  - jq -S / --sort-keys (now jq no longer sorts object keys by\n      default\n\n- syntax\n\n  - .. -> like // in XPath (recursive traversal)\n  - question mark (e.g., .a?) to suppress errors\n  - .\"foo\" syntax (equivalent to .[\"foo\"])\n  - better error handling for .foo\n  - added % operator (modulo)\n  - allow negation without requiring extra parenthesis\n  - more function arguments (up to six)\n\n- filters:\n\n  - any, all\n  - iterables, arrays, objects, scalars, nulls, booleans, numbers,\n      strings, values\n\n- string built-ins:\n\n  - split\n  - join (join an array of strings with a given separator string)\n  - ltrimstr, rtrimstr\n  - startswith, endswith\n  - explode, implode\n  - fromjson, tojson\n  - index, rindex, indices\n\n- math functions\n\n  - floor, sqrt, cbrt, etcetera (depends on what's available from libm)\n\n- libjq -- a C API interface to jq's JSON representation and for\n   running jq programs from C applications\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3818359375,
          "content": "# jq\n\n`jq` is a lightweight and flexible command-line JSON processor akin to `sed`,`awk`,`grep`, and friends for JSON data. It's written in portable C and has zero runtime dependencies, allowing you to easily slice, filter, map, and transform structured data.\n\n## Documentation\n\n- **Official Documentation**: [jqlang.github.io/jq](https://jqlang.github.io/jq)\n- **Try jq Online**: [jqplay.org](https://jqplay.org)\n\n## Installation\n\n### Prebuilt Binaries\n\nDownload the latest releases from the [GitHub release page](https://github.com/jqlang/jq/releases).\n\n### Docker Image\n\nPull the [jq image](https://github.com/jqlang/jq/pkgs/container/jq) to start quickly with Docker.\n\n\n#### Run with Docker\n##### Example: Extracting the version from a `package.json` file\n```bash\ndocker run --rm -i ghcr.io/jqlang/jq:latest < package.json '.version'\n```\n##### Example: Extracting the version from a `package.json` file with a mounted volume\n```bash\ndocker run --rm -i -v \"$PWD:$PWD\" -w \"$PWD\" ghcr.io/jqlang/jq:latest '.version' package.json\n```\n\n### Building from source\n\n#### Dependencies\n\n- libtool\n- make\n- automake\n- autoconf\n\n#### Instructions\n\n```console\ngit submodule update --init    # if building from git to get oniguruma\nautoreconf -i                  # if building from git\n./configure --with-oniguruma=builtin\nmake clean                     # if upgrading from a version previously built from source\nmake -j8\nmake check\nsudo make install\n```\n\nBuild a statically linked version:\n\n```console\nmake LDFLAGS=-all-static\n```\n\nIf you're not using the latest git version but instead building a released tarball (available on the release page), skip the `autoreconf` step, and flex or bison won't be needed.\n\n##### Cross-Compilation\n\nFor details on cross-compilation, check out the [GitHub Actions file](.github/workflows/ci.yml) and the [cross-compilation wiki page](https://github.com/jqlang/jq/wiki/Cross-compilation).\n\n## Community & Support\n\n- Questions & Help: [Stack Overflow (jq tag)](https://stackoverflow.com/questions/tagged/jq)\n- Chat & Community: [Join us on Discord](https://discord.gg/yg6yjNmgAC)\n- Wiki & Advanced Topics: [Explore the Wiki](https://github.com/jqlang/jq/wiki)\n\n## License\n\n`jq` is released under the [MIT License](COPYING). `jq`'s documentation is\nlicensed under the [Creative Commons CC BY 3.0](COPYING).\n`jq` uses parts of the open source C library \"decNumber\", which is distributed\nunder [ICU License](COPYING)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.951171875,
          "content": "# How to report security vulnerabilities in `jq`\n\nGitHub has a [mechanism for private disclosure of vulnerabilities](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability) to repository owners and authorized persons such as maintainers.  The `jqlang/jq` repository now has this feature enabled.\n\n## Reporting a Vulnerability\n\nSee [Privately Reporting a Security Vulnerability](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability).  Click on [`jqlang/jq`](https://github.com/jqlang/jq)'s [Security page](https://github.com/jqlang/jq/security) and click on [Report a vulnerability](https://github.com/jqlang/jq/security/advisories/new).  This will notify the owners and maintainers.  After submitting you'll get an option to start a private clone of `jqlang/jq` for collaboration with the maintainers.\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "compile-ios.sh",
          "type": "blob",
          "size": 3.1533203125,
          "content": "#!/usr/bin/env bash\n# Mac C. compile-ios.sh for JQ.\n\n# Defaults\nset -e\noniguruma='6.9.3'\n\nunset CFLAGS\nunset CXXFLAGS\nunset LDFLAGS\n\n# Parse args. \nusage(){\ncat << EOF\n${0##*/}: usage\n\n    Description:\n       This simple script builds oniguruma and jq for all *-apple-darwin devices.\n\n    Arguments:\n    --extra-cflags <arg>: Pass defines or includes to clang.\n    --extra-ldflags <arg>: Pass libs or includes to ld64.\n\n    --with-oniguruma <arg>: Change default version of onigurma from ${oniguruma}.\nEOF\nexit 1\n}\n\nwhile (( $# )); do\n   case \"$1\" in\n      --with-oniguruma) shift; oniguruma=\"${1}\" ;;\n\n      --extra-cflags) shift; export CFLAGS_=\"${1}\" ;;\n      --extra-ldflags) shift; export LDFLAGS_=\"${1}\" ;;\n\n      --help) usage ;;\n      *) echo -e \"Unknown option: ${1}\\n\"; usage ;;\n   esac\n   shift\ndone \n\n# Start building.\necho \"Building...\"\nMAKEJOBS=\"$(sysctl -n hw.ncpu || echo 1)\"\nCC_=\"$(xcrun -f clang || echo clang)\"\n\nonig_url=\"https://github.com/kkos/oniguruma/releases/download/v${oniguruma}/onig-${oniguruma}.tar.gz\"\nbuilddir=\"${TMPDIR:-/tmp}/${RANDOM:-'xxxxx'}-compile-ios-build\"\ncwd=\"$(realpath ${PWD} 2>/dev/null || echo ${PWD})\"\n\nt_exit() {\ncat << EOF\n\nA error as occurred.\n    oniguruma location: ${builddir}/onig/onig-${oniguruma}\n    jq location: ${cwd}\n\n    Provide config.log and console logs when posting a issue.\n\nEOF\n}\ntrap t_exit ERR\n\n#  Onig.\nmkdir -p \"${builddir}/onig\"\ncd \"${builddir}/\"\n curl -L ${onig_url} | tar xz\n for arch in i386 x86_64 armv7 armv7s arm64; do\n     if [[ \"$arch\" = \"i386\" || \"$arch\" = \"x86_64\" ]]; then\n         SYSROOT=$(xcrun -f --sdk iphonesimulator --show-sdk-path)\n     else\n         SYSROOT=$(xcrun -f --sdk iphoneos --show-sdk-path)\n     fi\n     HOST=\"${arch}-apple-darwin\"\n     [[ \"${arch}\" = \"arm64\" ]] && HOST=\"aarch64-apple-darwin\"\n\n     CFLAGS=\"-arch ${arch} -miphoneos-version-min=9.0 -isysroot ${SYSROOT} ${CFLAGS_} -D_REENTRANT\"\n     LDFLAGS=\"-arch ${arch} -miphoneos-version-min=9.0 -isysroot ${SYSROOT} ${LDFLAGS_}\"\n     CC=\"${CC_} ${CFLAGS}\"\n\n     # ./configure; make install\n     cd \"${builddir}/onig-${oniguruma}\"\n     CC=${CC} LDFLAGS=${LDFLAGS} \\\n     ./configure --host=${HOST} --build=$(./config.guess) --enable-shared=no --enable-static=yes --prefix=/\n     make -j${MAKEJOBS} install DESTDIR=\"${cwd}/ios/onig/${arch}\"\n     make clean\n     \n     # Jump back to JQ.\n     cd ${cwd}\n     [[ ! -f ./configure ]] && autoreconf -ivf\n     CC=${CC} LDFLAGS=${LDFLAGS} \\\n     ./configure --host=${HOST} --build=$(./config/config.guess) --enable-docs=no --enable-shared=no --enable-static=yes --prefix=/ --with-oniguruma=${cwd}/ios/onig/${arch} $(test -z ${BISON+x} || echo '--enable-maintainer-mode')\n     make -j${MAKEJOBS} install DESTDIR=\"${cwd}/ios/jq/${arch}\"\n     make clean\n done\n\nmkdir -p \"${cwd}/ios/dest/lib\"\n# lipo, make a static lib.\nlipo -create -output ${cwd}/ios/dest/lib/libonig.a ${cwd}/ios/onig/{i386,x86_64,armv7,armv7s,arm64}/lib/libonig.a\nlipo -create -output ${cwd}/ios/dest/lib/libjq.a ${cwd}/ios/jq/{i386,x86_64,armv7,armv7s,arm64}/lib/libjq.a\n\n# Take the arm64 headers- the most common target.\ncp -r ${cwd}/ios/jq/arm64/include ${cwd}/ios/dest/\nrm -rf ${cwd}/build/ios/{i386,x86_64,armv7,armv7s,arm64}\n\necho \"Output to ${cwd}/ios/dest\"\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 9.82421875,
          "content": "m4_define([jq_version], m4_esyscmd_s([scripts/version])))\n\nAC_INIT([jq],[jq_version],[https://github.com/jqlang/jq/issues],[jq],[https://jqlang.github.io/jq])\n\ndnl Created autoconf implementation thompson@dtosolutions, 26NOV12\nAC_PREREQ([2.65])\nAC_CONFIG_AUX_DIR([config])\nAC_USE_SYSTEM_EXTENSIONS\nAM_INIT_AUTOMAKE([1.11.2 subdir-objects parallel-tests foreign -Wall])\nAM_SILENT_RULES([yes])\nAM_PROG_AR\nAM_MAINTAINER_MODE([disable])\nAC_PROG_CC\nm4_version_prereq([2.70], [], [AC_PROG_CC_STDC])\nAC_PROG_CPP_WERROR\nAC_PROG_YACC\nAC_OBJEXT\nAC_EXEEXT\nLT_INIT([shared static win32-dll])\nAM_PROG_CC_C_O\n\nAC_SYS_LARGEFILE # issue 2167\n\ndnl couldn't use AM_PROG_LEX as it doesn't support header files like the\ndnl AC_PROG_YACC macros...\n\ndnl check bison version\n\nif test \"$USE_MAINTAINER_MODE\" = yes; then\n  if test \"$YACC\" != \"bison -y\"; then\n    AC_MSG_CHECKING([bison version])\n    AC_MSG_RESULT([not bison])\n  else\n    AX_PROG_BISON_VERSION([3],\n      [],\n      [AC_MSG_ERROR([You need bison version 3.0 or greater])])\n  fi\n\n  AC_CHECK_PROGS(LEX, flex lex)\nfi\n\ndnl Check for valgrind\nAC_CHECK_PROGS(valgrind_cmd, valgrind)\nif test \"x$valgrind_cmd\" = \"x\" ; then\n    AC_MSG_WARN([valgrind is required to test jq.])\nfi\nAC_CHECK_FUNCS(memmem)\n\nAC_CHECK_HEADER(\"sys/cygwin.h\", [have_cygwin=1;])\nAC_CHECK_HEADER(\"shlwapi.h\",[have_shlwapi=1;])\nAM_CONDITIONAL([WIN32], [test \"x$have_shlwapi\" = x1 && test ! \"x$have_cygwin\" = x1])\n\ndnl Running tests with Valgrind is slow. It is faster to iterate on\ndnl code without Valgrind until tests pass, then enable Valgrind and\ndnl fix leaks.\nAC_ARG_ENABLE([valgrind],\n   AS_HELP_STRING([--disable-valgrind],[do not run tests under Valgrind]))\n\ndnl Running tests with Valgrind is slow; address sanitizer (ASAN) is\ndnl faster.\nAC_ARG_ENABLE([asan],\n   AS_HELP_STRING([--enable-asan],[enable address sanitizer]))\n\ndnl Undefined Behavior Sanitizer\nAC_ARG_ENABLE([ubsan],\n   AS_HELP_STRING([--enable-ubsan],[enable undefined behavior sanitizer]))\n\ndnl Code coverage\nAC_ARG_ENABLE([gcov],\n   AS_HELP_STRING([--enable-gcov],[enable gcov code coverage tool]))\n\ndnl Don't attempt to build docs if python deps aren't installed\nAC_ARG_ENABLE([docs],\n   AS_HELP_STRING([--disable-docs],[do not build docs]), [], [enable_docs=yes])\n\ndnl Don't attempt to build the error injection object (if there is no LD_PRELOAD support)\nAC_ARG_ENABLE([error-injection],\n   AS_HELP_STRING([--enable-error-injection],[build and test with error injection]))\n\ndnl Enable building all static\nAC_ARG_ENABLE([all-static],\n   AS_HELP_STRING([--enable-all-static],[link jq with static libraries only]))\n\ndnl find pipenv\nAC_ARG_VAR([PIPENV], [pipenv command])\nAC_CHECK_PROGS([PIPENV], pipenv)\n\nAS_IF([test \"x$enable_docs\" != \"xno\"],[\n   AC_CACHE_CHECK([for Python dependencies], [jq_cv_python_deps],[\n      jq_cv_python_deps=yes\n      AS_IF([test \"x$PIPENV\" = \"x\" || \\\n      ! bmsg=\"`cd ${srcdir}/docs; LC_ALL=$LANG \"$PIPENV\" --venv`\"],[\n         jq_cv_python_deps=no\n      ])\n   ])\n\n   AS_IF([test \"x$jq_cv_python_deps\" != \"xyes\"], [\n      AC_MSG_WARN([Error checking python dependencies: $bmsg\n*****************************************************************\n*  Python dependencies for building jq documentation not found. *\n*  You can still build, install and hack on jq, but the manpage *\n*  will not be rebuilt and new manpage tests will not be run.   *\n*  See docs/README.md for how to install the docs dependencies. *\n*****************************************************************])\n      enable_docs=no\n   ])\n])\n\ndnl Disable decNumber support\nAC_ARG_ENABLE([decnum],\n   AS_HELP_STRING([--disable-decnum],[disable decnum support]))\n\nAS_IF([test \"x$enable_decnum\" != \"xno\"],[\n   AC_DEFINE([USE_DECNUM],1)\n])\n\nAM_CONDITIONAL([ENABLE_VALGRIND], [test \"x$enable_valgrind\" != xno])\nAM_CONDITIONAL([ENABLE_ASAN], [test \"x$enable_asan\" = xyes])\nAM_CONDITIONAL([ENABLE_UBSAN], [test \"x$enable_ubsan\" = xyes])\nAM_CONDITIONAL([ENABLE_GCOV], [test \"x$enable_gcov\" = xyes])\nAM_CONDITIONAL([ENABLE_DOCS], [test \"x$enable_docs\" != xno])\nAM_CONDITIONAL([ENABLE_ERROR_INJECTION], [test \"x$enable_error_injection\" = xyes])\nAM_CONDITIONAL([ENABLE_ALL_STATIC], [test \"x$enable_all_static\" = xyes])\n\ndnl Find pthread, if we have it. We do this first because we may set -pthread on CFLAGS\ndnl which can cause various macros to be defined (__REENTRANT on Darwin, for example)\nAX_PTHREAD([\n   AC_DEFINE([HAVE_PTHREAD], [1])\n   LIBS=\"$PTHREAD_LIBS $LIBS\"\n   CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n   CC=\"$PTHREAD_CC\"\n])\n\nAC_FUNC_ALLOCA\n\nAC_FIND_FUNC([isatty], [c], [#include <unistd.h>], [0])\nAC_FIND_FUNC([_isatty], [c], [#include <io.h>], [0])\nAC_FIND_FUNC([strptime], [c], [#include <time.h>], [0, 0, 0])\nAC_FIND_FUNC([strftime], [c], [#include <time.h>], [0, 0, 0, 0])\nAC_FIND_FUNC([setenv], [c], [#include <stdlib.h>], [0, 0, 0])\nAC_FIND_FUNC([timegm], [c], [#include <time.h>], [0])\nAC_FIND_FUNC([gmtime_r], [c], [#include <time.h>], [0, 0])\nAC_FIND_FUNC([gmtime], [c], [#include <time.h>], [0])\nAC_FIND_FUNC([localtime_r], [c], [#include <time.h>], [0, 0])\nAC_FIND_FUNC([localtime], [c], [#include <time.h>], [0])\nAC_FIND_FUNC([gettimeofday], [c], [#include <sys/time.h>], [0, 0])\nAC_CHECK_MEMBER([struct tm.tm_gmtoff], [AC_DEFINE([HAVE_TM_TM_GMT_OFF],1,[Define to 1 if the system has the tm_gmt_off field in struct tm])],\n                [], [[#include <time.h>]])\nAC_CHECK_MEMBER([struct tm.__tm_gmtoff], [AC_DEFINE([HAVE_TM___TM_GMT_OFF],1,[Define to 1 if the system has the __tm_gmt_off field in struct tm])],\n                [], [[#include <time.h>]])\nAC_FIND_FUNC([setlocale], [c], [#include <locale.h>], [0,0])\n\ndnl Figure out if we have the pthread functions we actually need\nAC_FIND_FUNC_NO_LIBS([pthread_key_create], [], [#include <pthread.h>], [NULL, NULL])\nAC_FIND_FUNC_NO_LIBS([pthread_once], [], [#include <pthread.h>], [NULL, NULL])\nAC_FIND_FUNC_NO_LIBS([atexit], [], [#include <stdlib.h>], [NULL])\n\ndnl libm math.h functions\nAC_CHECK_MATH_FUNC(acos)\nAC_CHECK_MATH_FUNC(acosh)\nAC_CHECK_MATH_FUNC(asin)\nAC_CHECK_MATH_FUNC(asinh)\nAC_CHECK_MATH_FUNC(atan2)\nAC_CHECK_MATH_FUNC(atan)\nAC_CHECK_MATH_FUNC(atanh)\nAC_CHECK_MATH_FUNC(cbrt)\nAC_CHECK_MATH_FUNC(ceil)\nAC_CHECK_MATH_FUNC(copysign)\nAC_CHECK_MATH_FUNC(cos)\nAC_CHECK_MATH_FUNC(cosh)\nAC_CHECK_MATH_FUNC(drem)\nAC_CHECK_MATH_FUNC(erf)\nAC_CHECK_MATH_FUNC(erfc)\nAC_CHECK_MATH_FUNC(exp10)\nAC_CHECK_MATH_FUNC(__exp10) dnl macOS has an __exp10\nAC_CHECK_MATH_FUNC(exp2)\nAC_CHECK_MATH_FUNC(exp)\nAC_CHECK_MATH_FUNC(expm1)\nAC_CHECK_MATH_FUNC(fabs)\nAC_CHECK_MATH_FUNC(fdim)\nAC_CHECK_MATH_FUNC(floor)\nAC_CHECK_MATH_FUNC(fma)\nAC_CHECK_MATH_FUNC(fmax)\nAC_CHECK_MATH_FUNC(fmin)\nAC_CHECK_MATH_FUNC(fmod)\nAC_CHECK_MATH_FUNC(frexp)\nAC_CHECK_MATH_FUNC(gamma)\nAC_CHECK_MATH_FUNC(hypot)\nAC_CHECK_MATH_FUNC(j0)\nAC_CHECK_MATH_FUNC(j1)\nAC_CHECK_MATH_FUNC(jn)\nAC_CHECK_MATH_FUNC(ldexp)\nAC_CHECK_MATH_FUNC(lgamma)\nAC_CHECK_MATH_FUNC(log10)\nAC_CHECK_MATH_FUNC(log1p)\nAC_CHECK_MATH_FUNC(log2)\nAC_CHECK_MATH_FUNC(log)\nAC_CHECK_MATH_FUNC(logb)\nAC_CHECK_MATH_FUNC(modf)\nAC_CHECK_MATH_FUNC(lgamma_r)\nAC_CHECK_MATH_FUNC(nearbyint)\nAC_CHECK_MATH_FUNC(nextafter)\nAC_CHECK_MATH_FUNC(nexttoward)\nAC_CHECK_MATH_FUNC(pow)\nAC_CHECK_MATH_FUNC(remainder)\nAC_CHECK_MATH_FUNC(rint)\nAC_CHECK_MATH_FUNC(round)\nAC_CHECK_MATH_FUNC(scalb)\nAC_CHECK_MATH_FUNC(scalbln)\nAC_CHECK_MATH_FUNC(significand)\ndnl scalbn and ilogb are used on macos to replace significand if we don't have frexp\nAC_CHECK_MATH_FUNC(scalbn)\nAC_CHECK_MATH_FUNC(ilogb)\n\nAC_CHECK_MATH_FUNC(sin)\nAC_CHECK_MATH_FUNC(sinh)\nAC_CHECK_MATH_FUNC(sqrt)\nAC_CHECK_MATH_FUNC(tan)\nAC_CHECK_MATH_FUNC(tanh)\nAC_CHECK_MATH_FUNC(tgamma)\nAC_CHECK_MATH_FUNC(trunc)\nAC_CHECK_MATH_FUNC(y0)\nAC_CHECK_MATH_FUNC(y1)\nAC_CHECK_MATH_FUNC(yn)\n\ndnl Thread local storage\nhave___thread=no\nAC_MSG_CHECKING(for thread-local storage)\nAC_LINK_IFELSE([AC_LANG_SOURCE([\nstatic __thread int x ;\nint main () { x = 123; return x; }\n])], have___thread=yes)\nif test $have___thread = yes; then\n   AC_DEFINE([HAVE___THREAD],1,[Define to 1 if the system supports __thread])\nfi\nAC_MSG_RESULT($have___thread)\n\nAC_C_BIGENDIAN(\n   AC_DEFINE([IEEE_MC68k], 1, [machine is bigendian]),\n   AC_DEFINE([IEEE_8087], 1, [machine is littleendian]),\n   AC_MSG_ERROR(unknown endianness),\n   AC_MSG_ERROR(universal endianness not supported)\n)\n\ndnl Oniguruma\nAC_ARG_WITH([oniguruma],\n   [AS_HELP_STRING([--with-oniguruma=prefix],\n      [try this for a non-standard install prefix of the oniguruma library])], ,\n   [with_oniguruma=yes])\n\nonig_CFLAGS=\nonig_LDFLAGS=\nbuild_oniguruma=no\nAS_IF([test \"x$with_oniguruma\" != xno], [\n   save_CFLAGS=\"$CFLAGS\"\n   save_LDFLAGS=\"$LDFLAGS\"\n   AS_IF([test \"x$with_oniguruma\" != xyes], [\n      AS_IF([test \"x$with_oniguruma\" = xbuiltin], [\n          build_oniguruma=yes\n      ], [\n          onig_CFLAGS=\"-I${with_oniguruma}/include\"\n          onig_LDFLAGS=\"-L${with_oniguruma}/lib\"\n      ])\n   ])\n   AS_IF([test \"x$build_oniguruma\" = xno], [\n       # check for ONIGURUMA library, either in /usr or where requested\n       CFLAGS=\"$CFLAGS $onig_CFLAGS\"\n       LDFLAGS=\"$LDFLAGS $onig_LDFLAGS\"\n       AC_CHECK_HEADER(\"oniguruma.h\",\n          AC_CHECK_LIB([onig],[onig_version]))\n       # handle check results\n       AS_IF([test \"x$ac_cv_lib_onig_onig_version\" != \"xyes\"], [\n          build_oniguruma=yes\n          AC_MSG_NOTICE([Oniguruma was not found. Will use the packaged oniguruma.])\n       ])\n   ])\n   AS_IF([test \"x$build_oniguruma\" = xyes && test -f \"${srcdir}/modules/oniguruma/configure.ac\" ], [\n       onig_CFLAGS=\"-I${srcdir}/modules/oniguruma/src\"\n       onig_LDFLAGS=\"-L${srcdir}/modules/oniguruma/src -Wl,-rpath,${libdir}\"\n       AC_CONFIG_SUBDIRS([modules/oniguruma])\n       AC_DEFINE([HAVE_LIBONIG],1,[Define to 1 if the system includes libonig])\n   ])\n   CFLAGS=\"$save_CFLAGS\"\n   LDFLAGS=\"$save_LDFLAGS\"\n])\nAC_SUBST(onig_CFLAGS)\nAC_SUBST(onig_LDFLAGS)\n\nAM_CONDITIONAL([BUILD_ONIGURUMA], [test \"x$build_oniguruma\" = xyes])\nAM_CONDITIONAL([WITH_ONIGURUMA], [test \"x$with_oniguruma\" != xno])\nAC_SUBST([BUNDLER], [\"$bundle_cmd\"])\n\nAC_CONFIG_MACRO_DIRS([config/m4 m4])\nAC_CONFIG_FILES([Makefile libjq.pc])\nAC_OUTPUT\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "jq.1.prebuilt",
          "type": "blob",
          "size": 120.373046875,
          "content": ".\n.TH \"JQ\" \"1\" \"November 2024\" \"\" \"\"\n.\n.SH \"NAME\"\n\\fBjq\\fR \\- Command\\-line JSON processor\n.\n.SH \"SYNOPSIS\"\n\\fBjq\\fR [\\fIoptions\\fR\\.\\.\\.] \\fIfilter\\fR [\\fIfiles\\fR\\.\\.\\.]\n.\n.P\n\\fBjq\\fR can transform JSON in various ways, by selecting, iterating, reducing and otherwise mangling JSON documents\\. For instance, running the command \\fBjq \\'map(\\.price) | add\\'\\fR will take an array of JSON objects as input and return the sum of their \"price\" fields\\.\n.\n.P\n\\fBjq\\fR can accept text input as well, but by default, \\fBjq\\fR reads a stream of JSON entities (including numbers and other literals) from \\fBstdin\\fR\\. Whitespace is only needed to separate entities such as 1 and 2, and true and false\\. One or more \\fIfiles\\fR may be specified, in which case \\fBjq\\fR will read input from those instead\\.\n.\n.P\nThe \\fIoptions\\fR are described in the [INVOKING JQ] section; they mostly concern input and output formatting\\. The \\fIfilter\\fR is written in the jq language and specifies how to transform the input file or document\\.\n.\n.SH \"FILTERS\"\nA jq program is a \"filter\": it takes an input, and produces an output\\. There are a lot of builtin filters for extracting a particular field of an object, or converting a number to a string, or various other standard tasks\\.\n.\n.P\nFilters can be combined in various ways \\- you can pipe the output of one filter into another filter, or collect the output of a filter into an array\\.\n.\n.P\nSome filters produce multiple results, for instance there\\'s one that produces all the elements of its input array\\. Piping that filter into a second runs the second filter for each element of the array\\. Generally, things that would be done with loops and iteration in other languages are just done by gluing filters together in jq\\.\n.\n.P\nIt\\'s important to remember that every filter has an input and an output\\. Even literals like \"hello\" or 42 are filters \\- they take an input but always produce the same literal as output\\. Operations that combine two filters, like addition, generally feed the same input to both and combine the results\\. So, you can implement an averaging filter as \\fBadd / length\\fR \\- feeding the input array both to the \\fBadd\\fR filter and the \\fBlength\\fR filter and then performing the division\\.\n.\n.P\nBut that\\'s getting ahead of ourselves\\. :) Let\\'s start with something simpler:\n.\n.SH \"INVOKING JQ\"\njq filters run on a stream of JSON data\\. The input to jq is parsed as a sequence of whitespace\\-separated JSON values which are passed through the provided filter one at a time\\. The output(s) of the filter are written to standard output, as a sequence of newline\\-separated JSON data\\.\n.\n.P\nThe simplest and most common filter (or jq program) is \\fB\\.\\fR, which is the identity operator, copying the inputs of the jq processor to the output stream\\. Because the default behavior of the jq processor is to read JSON texts from the input stream, and to pretty\\-print outputs, the \\fB\\.\\fR program\\'s main use is to validate and pretty\\-print the inputs\\. The jq programming language is quite rich and allows for much more than just validation and pretty\\-printing\\.\n.\n.P\nNote: it is important to mind the shell\\'s quoting rules\\. As a general rule it\\'s best to always quote (with single\\-quote characters on Unix shells) the jq program, as too many characters with special meaning to jq are also shell meta\\-characters\\. For example, \\fBjq \"foo\"\\fR will fail on most Unix shells because that will be the same as \\fBjq foo\\fR, which will generally fail because \\fBfoo is not defined\\fR\\. When using the Windows command shell (cmd\\.exe) it\\'s best to use double quotes around your jq program when given on the command\\-line (instead of the \\fB\\-f program\\-file\\fR option), but then double\\-quotes in the jq program need backslash escaping\\. When using the Powershell (\\fBpowershell\\.exe\\fR) or the Powershell Core (\\fBpwsh\\fR/\\fBpwsh\\.exe\\fR), use single\\-quote characters around the jq program and backslash\\-escaped double\\-quotes (\\fB\\e\"\\fR) inside the jq program\\.\n.\n.IP \"\\(bu\" 4\nUnix shells: \\fBjq \\'\\.[\"foo\"]\\'\\fR\n.\n.IP \"\\(bu\" 4\nPowershell: \\fBjq \\'\\.[\\e\"foo\\e\"]\\'\\fR\n.\n.IP \"\\(bu\" 4\nWindows command shell: \\fBjq \"\\.[\\e\"foo\\e\"]\"\\fR\n.\n.IP \"\" 0\n.\n.P\nNote: jq allows user\\-defined functions, but every jq program must have a top\\-level expression\\.\n.\n.P\nYou can affect how jq reads and writes its input and output using some command\\-line options:\n.\n.TP\n\\fB\\-\\-null\\-input\\fR / \\fB\\-n\\fR:\n.\n.IP\nDon\\'t read any input at all\\. Instead, the filter is run once using \\fBnull\\fR as the input\\. This is useful when using jq as a simple calculator or to construct JSON data from scratch\\.\n.\n.TP\n\\fB\\-\\-raw\\-input\\fR / \\fB\\-R\\fR:\n.\n.IP\nDon\\'t parse the input as JSON\\. Instead, each line of text is passed to the filter as a string\\. If combined with \\fB\\-\\-slurp\\fR, then the entire input is passed to the filter as a single long string\\.\n.\n.TP\n\\fB\\-\\-slurp\\fR / \\fB\\-s\\fR:\n.\n.IP\nInstead of running the filter for each JSON object in the input, read the entire input stream into a large array and run the filter just once\\.\n.\n.TP\n\\fB\\-\\-compact\\-output\\fR / \\fB\\-c\\fR:\n.\n.IP\nBy default, jq pretty\\-prints JSON output\\. Using this option will result in more compact output by instead putting each JSON object on a single line\\.\n.\n.TP\n\\fB\\-\\-raw\\-output\\fR / \\fB\\-r\\fR:\n.\n.IP\nWith this option, if the filter\\'s result is a string then it will be written directly to standard output rather than being formatted as a JSON string with quotes\\. This can be useful for making jq filters talk to non\\-JSON\\-based systems\\.\n.\n.TP\n\\fB\\-\\-raw\\-output0\\fR:\n.\n.IP\nLike \\fB\\-r\\fR but jq will print NUL instead of newline after each output\\. This can be useful when the values being output can contain newlines\\. When the output value contains NUL, jq exits with non\\-zero code\\.\n.\n.TP\n\\fB\\-\\-join\\-output\\fR / \\fB\\-j\\fR:\n.\n.IP\nLike \\fB\\-r\\fR but jq won\\'t print a newline after each output\\.\n.\n.TP\n\\fB\\-\\-ascii\\-output\\fR / \\fB\\-a\\fR:\n.\n.IP\njq usually outputs non\\-ASCII Unicode codepoints as UTF\\-8, even if the input specified them as escape sequences (like \"\\eu03bc\")\\. Using this option, you can force jq to produce pure ASCII output with every non\\-ASCII character replaced with the equivalent escape sequence\\.\n.\n.TP\n\\fB\\-\\-sort\\-keys\\fR / \\fB\\-S\\fR:\n.\n.IP\nOutput the fields of each object with the keys in sorted order\\.\n.\n.TP\n\\fB\\-\\-color\\-output\\fR / \\fB\\-C\\fR and \\fB\\-\\-monochrome\\-output\\fR / \\fB\\-M\\fR:\n.\n.IP\nBy default, jq outputs colored JSON if writing to a terminal\\. You can force it to produce color even if writing to a pipe or a file using \\fB\\-C\\fR, and disable color with \\fB\\-M\\fR\\. When the \\fBNO_COLOR\\fR environment variable is not empty, jq disables colored output by default, but you can enable it by \\fB\\-C\\fR\\.\n.\n.IP\nColors can be configured with the \\fBJQ_COLORS\\fR environment variable (see below)\\.\n.\n.TP\n\\fB\\-\\-tab\\fR:\n.\n.IP\nUse a tab for each indentation level instead of two spaces\\.\n.\n.TP\n\\fB\\-\\-indent n\\fR:\n.\n.IP\nUse the given number of spaces (no more than 7) for indentation\\.\n.\n.TP\n\\fB\\-\\-unbuffered\\fR:\n.\n.IP\nFlush the output after each JSON object is printed (useful if you\\'re piping a slow data source into jq and piping jq\\'s output elsewhere)\\.\n.\n.TP\n\\fB\\-\\-stream\\fR:\n.\n.IP\nParse the input in streaming fashion, outputting arrays of path and leaf values (scalars and empty arrays or empty objects)\\. For example, \\fB\"a\"\\fR becomes \\fB[[],\"a\"]\\fR, and \\fB[[],\"a\",[\"b\"]]\\fR becomes \\fB[[0],[]]\\fR, \\fB[[1],\"a\"]\\fR, and \\fB[[2,0],\"b\"]\\fR\\.\n.\n.IP\nThis is useful for processing very large inputs\\. Use this in conjunction with filtering and the \\fBreduce\\fR and \\fBforeach\\fR syntax to reduce large inputs incrementally\\.\n.\n.TP\n\\fB\\-\\-stream\\-errors\\fR:\n.\n.IP\nLike \\fB\\-\\-stream\\fR, but invalid JSON inputs yield array values where the first element is the error and the second is a path\\. For example, \\fB[\"a\",n]\\fR produces \\fB[\"Invalid literal at line 1, column 7\",[1]]\\fR\\.\n.\n.IP\nImplies \\fB\\-\\-stream\\fR\\. Invalid JSON inputs produce no error values when \\fB\\-\\-stream\\fR without \\fB\\-\\-stream\\-errors\\fR\\.\n.\n.TP\n\\fB\\-\\-seq\\fR:\n.\n.IP\nUse the \\fBapplication/json\\-seq\\fR MIME type scheme for separating JSON texts in jq\\'s input and output\\. This means that an ASCII RS (record separator) character is printed before each value on output and an ASCII LF (line feed) is printed after every output\\. Input JSON texts that fail to parse are ignored (but warned about), discarding all subsequent input until the next RS\\. This mode also parses the output of jq without the \\fB\\-\\-seq\\fR option\\.\n.\n.TP\n\\fB\\-f\\fR / \\fB\\-\\-from\\-file\\fR:\n.\n.IP\nRead the filter from a file rather than from a command line, like awk\\'s \\-f option\\. This changes the filter argument to be interpreted as a filename, instead of the source of a program\\.\n.\n.TP\n\\fB\\-L directory\\fR / \\fB\\-\\-library\\-path directory\\fR:\n.\n.IP\nPrepend \\fBdirectory\\fR to the search list for modules\\. If this option is used then no builtin search list is used\\. See the section on modules below\\.\n.\n.TP\n\\fB\\-\\-arg name value\\fR:\n.\n.IP\nThis option passes a value to the jq program as a predefined variable\\. If you run jq with \\fB\\-\\-arg foo bar\\fR, then \\fB$foo\\fR is available in the program and has the value \\fB\"bar\"\\fR\\. Note that \\fBvalue\\fR will be treated as a string, so \\fB\\-\\-arg foo 123\\fR will bind \\fB$foo\\fR to \\fB\"123\"\\fR\\.\n.\n.IP\nNamed arguments are also available to the jq program as \\fB$ARGS\\.named\\fR\\. When the name is not a valid identifier, this is the only way to access it\\.\n.\n.TP\n\\fB\\-\\-argjson name JSON\\-text\\fR:\n.\n.IP\nThis option passes a JSON\\-encoded value to the jq program as a predefined variable\\. If you run jq with \\fB\\-\\-argjson foo 123\\fR, then \\fB$foo\\fR is available in the program and has the value \\fB123\\fR\\.\n.\n.TP\n\\fB\\-\\-slurpfile variable\\-name filename\\fR:\n.\n.IP\nThis option reads all the JSON texts in the named file and binds an array of the parsed JSON values to the given global variable\\. If you run jq with \\fB\\-\\-slurpfile foo bar\\fR, then \\fB$foo\\fR is available in the program and has an array whose elements correspond to the texts in the file named \\fBbar\\fR\\.\n.\n.TP\n\\fB\\-\\-rawfile variable\\-name filename\\fR:\n.\n.IP\nThis option reads in the named file and binds its contents to the given global variable\\. If you run jq with \\fB\\-\\-rawfile foo bar\\fR, then \\fB$foo\\fR is available in the program and has a string whose contents are to the texts in the file named \\fBbar\\fR\\.\n.\n.TP\n\\fB\\-\\-args\\fR:\n.\n.IP\nRemaining arguments are positional string arguments\\. These are available to the jq program as \\fB$ARGS\\.positional[]\\fR\\.\n.\n.TP\n\\fB\\-\\-jsonargs\\fR:\n.\n.IP\nRemaining arguments are positional JSON text arguments\\. These are available to the jq program as \\fB$ARGS\\.positional[]\\fR\\.\n.\n.TP\n\\fB\\-\\-exit\\-status\\fR / \\fB\\-e\\fR:\n.\n.IP\nSets the exit status of jq to 0 if the last output value was neither \\fBfalse\\fR nor \\fBnull\\fR, 1 if the last output value was either \\fBfalse\\fR or \\fBnull\\fR, or 4 if no valid result was ever produced\\. Normally jq exits with 2 if there was any usage problem or system error, 3 if there was a jq program compile error, or 0 if the jq program ran\\.\n.\n.IP\nAnother way to set the exit status is with the \\fBhalt_error\\fR builtin function\\.\n.\n.TP\n\\fB\\-\\-binary\\fR / \\fB\\-b\\fR:\n.\n.IP\nWindows users using WSL, MSYS2, or Cygwin, should use this option when using a native jq\\.exe, otherwise jq will turn newlines (LFs) into carriage\\-return\\-then\\-newline (CRLF)\\.\n.\n.TP\n\\fB\\-\\-version\\fR / \\fB\\-V\\fR:\n.\n.IP\nOutput the jq version and exit with zero\\.\n.\n.TP\n\\fB\\-\\-build\\-configuration\\fR:\n.\n.IP\nOutput the build configuration of jq and exit with zero\\. This output has no supported format or structure and may change without notice in future releases\\.\n.\n.TP\n\\fB\\-\\-help\\fR / \\fB\\-h\\fR:\n.\n.IP\nOutput the jq help and exit with zero\\.\n.\n.TP\n\\fB\\-\\-\\fR:\n.\n.IP\nTerminates argument processing\\. Remaining arguments are not interpreted as options\\.\n.\n.TP\n\\fB\\-\\-run\\-tests [filename]\\fR:\n.\n.IP\nRuns the tests in the given file or standard input\\. This must be the last option given and does not honor all preceding options\\. The input consists of comment lines, empty lines, and program lines followed by one input line, as many lines of output as are expected (one per output), and a terminating empty line\\. Compilation failure tests start with a line containing only \\fB%%FAIL\\fR, then a line containing the program to compile, then a line containing an error message to compare to the actual\\.\n.\n.IP\nBe warned that this option can change backwards\\-incompatibly\\.\n.\n.SH \"BASIC FILTERS\"\n.\n.SS \"Identity: \\.\"\nThe absolute simplest filter is \\fB\\.\\fR \\. This filter takes its input and produces the same value as output\\. That is, this is the identity operator\\.\n.\n.P\nSince jq by default pretty\\-prints all output, a trivial program consisting of nothing but \\fB\\.\\fR can be used to format JSON output from, say, \\fBcurl\\fR\\.\n.\n.P\nAlthough the identity filter never modifies the value of its input, jq processing can sometimes make it appear as though it does\\. For example, using the current implementation of jq, we would see that the expression:\n.\n.IP \"\" 4\n.\n.nf\n\n1E1234567890 | \\.\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nproduces \\fB1\\.7976931348623157e+308\\fR on at least one platform\\. This is because, in the process of parsing the number, this particular version of jq has converted it to an IEEE754 double\\-precision representation, losing precision\\.\n.\n.P\nThe way in which jq handles numbers has changed over time and further changes are likely within the parameters set by the relevant JSON standards\\. Moreover, build configuration options can alter how jq processes numbers\\.\n.\n.P\nThe following remarks are therefore offered with the understanding that they are intended to be descriptive of the current version of jq and should not be interpreted as being prescriptive:\n.\n.P\n(1) Any arithmetic operation on a number that has not already been converted to an IEEE754 double precision representation will trigger a conversion to the IEEE754 representation\\.\n.\n.P\n(2) jq will attempt to maintain the original decimal precision of number literals (if the \\fB\\-\\-disable\\-decnum\\fR build configuration option was not used), but in expressions such \\fB1E1234567890\\fR, precision will be lost if the exponent is too large\\.\n.\n.P\n(3) In jq programs, a leading minus sign will trigger the conversion of the number to an IEEE754 representation\\.\n.\n.P\n(4) Comparisons are carried out using the untruncated big decimal representation of numbers if available, as illustrated in one of the following examples\\.\n.\n.P\nThe examples below use the builtin function \\fBhave_decnum\\fR in order to demonstrate the expected effects of using / not using the \\fB\\-\\-disable\\-decnum\\fR build configuration option, and also to allow automated tests derived from these examples to pass regardless of whether that option is used\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.\\'\n   \"Hello, world!\"\n=> \"Hello, world!\"\n\njq \\'\\.\\'\n   0\\.12345678901234567890123456789\n=> 0\\.12345678901234567890123456789\n\njq \\'[\\., tojson] | \\. == if have_decnum then [12345678909876543212345,\"12345678909876543212345\"] else [12345678909876543000000,\"12345678909876543000000\"] end\\'\n   12345678909876543212345\n=> true\n\njq \\'\\. < 0\\.12345678901234567890123456788\\'\n   0\\.12345678901234567890123456789\n=> false\n\njq \\'map([\\., \\. == 1]) | tojson | \\. == if have_decnum then \"[[1,true],[1\\.000,true],[1\\.0,true],[1\\.00,true]]\" else \"[[1,true],[1,true],[1,true],[1,true]]\" end\\'\n   [1, 1\\.000, 1\\.0, 100e\\-2]\n=> true\n\njq \\'\\. as $big | [$big, $big + 1] | map(\\. > 10000000000000000000000000000000) | \\. == if have_decnum then [true, false] else [false, false] end\\'\n   10000000000000000000000000000001\n=> true\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Object Identifier\\-Index: \\.foo, \\.foo\\.bar\"\nThe simplest \\fIuseful\\fR filter has the form \\fB\\.foo\\fR\\. When given a JSON object (aka dictionary or hash) as input, \\fB\\.foo\\fR produces the value at the key \"foo\" if the key is present, or null otherwise\\.\n.\n.P\nA filter of the form \\fB\\.foo\\.bar\\fR is equivalent to \\fB\\.foo | \\.bar\\fR\\.\n.\n.P\nThe \\fB\\.foo\\fR syntax only works for simple, identifier\\-like keys, that is, keys that are all made of alphanumeric characters and underscore, and which do not start with a digit\\.\n.\n.P\nIf the key contains special characters or starts with a digit, you need to surround it with double quotes like this: \\fB\\.\"foo$\"\\fR, or else \\fB\\.[\"foo$\"]\\fR\\.\n.\n.P\nFor example \\fB\\.[\"foo::bar\"]\\fR and \\fB\\.[\"foo\\.bar\"]\\fR work while \\fB\\.foo::bar\\fR does not\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.foo\\'\n   {\"foo\": 42, \"bar\": \"less interesting data\"}\n=> 42\n\njq \\'\\.foo\\'\n   {\"notfoo\": true, \"alsonotfoo\": false}\n=> null\n\njq \\'\\.[\"foo\"]\\'\n   {\"foo\": 42}\n=> 42\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Optional Object Identifier\\-Index: \\.foo?\"\nJust like \\fB\\.foo\\fR, but does not output an error when \\fB\\.\\fR is not an object\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.foo?\\'\n   {\"foo\": 42, \"bar\": \"less interesting data\"}\n=> 42\n\njq \\'\\.foo?\\'\n   {\"notfoo\": true, \"alsonotfoo\": false}\n=> null\n\njq \\'\\.[\"foo\"]?\\'\n   {\"foo\": 42}\n=> 42\n\njq \\'[\\.foo?]\\'\n   [1,2]\n=> []\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Object Index: \\.[<string>]\"\nYou can also look up fields of an object using syntax like \\fB\\.[\"foo\"]\\fR (\\fB\\.foo\\fR above is a shorthand version of this, but only for identifier\\-like strings)\\.\n.\n.SS \"Array Index: \\.[<number>]\"\nWhen the index value is an integer, \\fB\\.[<number>]\\fR can index arrays\\. Arrays are zero\\-based, so \\fB\\.[2]\\fR returns the third element\\.\n.\n.P\nNegative indices are allowed, with \\-1 referring to the last element, \\-2 referring to the next to last element, and so on\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[0]\\'\n   [{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}]\n=> {\"name\":\"JSON\", \"good\":true}\n\njq \\'\\.[2]\\'\n   [{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}]\n=> null\n\njq \\'\\.[\\-2]\\'\n   [1,2,3]\n=> 2\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Array/String Slice: \\.[<number>:<number>]\"\nThe \\fB\\.[<number>:<number>]\\fR syntax can be used to return a subarray of an array or substring of a string\\. The array returned by \\fB\\.[10:15]\\fR will be of length 5, containing the elements from index 10 (inclusive) to index 15 (exclusive)\\. Either index may be negative (in which case it counts backwards from the end of the array), or omitted (in which case it refers to the start or end of the array)\\. Indices are zero\\-based\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[2:4]\\'\n   [\"a\",\"b\",\"c\",\"d\",\"e\"]\n=> [\"c\", \"d\"]\n\njq \\'\\.[2:4]\\'\n   \"abcdefghi\"\n=> \"cd\"\n\njq \\'\\.[:3]\\'\n   [\"a\",\"b\",\"c\",\"d\",\"e\"]\n=> [\"a\", \"b\", \"c\"]\n\njq \\'\\.[\\-2:]\\'\n   [\"a\",\"b\",\"c\",\"d\",\"e\"]\n=> [\"d\", \"e\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Array/Object Value Iterator: \\.[]\"\nIf you use the \\fB\\.[index]\\fR syntax, but omit the index entirely, it will return \\fIall\\fR of the elements of an array\\. Running \\fB\\.[]\\fR with the input \\fB[1,2,3]\\fR will produce the numbers as three separate results, rather than as a single array\\. A filter of the form \\fB\\.foo[]\\fR is equivalent to \\fB\\.foo | \\.[]\\fR\\.\n.\n.P\nYou can also use this on an object, and it will return all the values of the object\\.\n.\n.P\nNote that the iterator operator is a generator of values\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[]\\'\n   [{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}]\n=> {\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}\n\njq \\'\\.[]\\'\n   []\n=> \n\njq \\'\\.foo[]\\'\n   {\"foo\":[1,2,3]}\n=> 1, 2, 3\n\njq \\'\\.[]\\'\n   {\"a\": 1, \"b\": 1}\n=> 1, 1\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"\\.[]?\"\nLike \\fB\\.[]\\fR, but no errors will be output if \\. is not an array or object\\. A filter of the form \\fB\\.foo[]?\\fR is equivalent to \\fB\\.foo | \\.[]?\\fR\\.\n.\n.SS \"Comma: ,\"\nIf two filters are separated by a comma, then the same input will be fed into both and the two filters\\' output value streams will be concatenated in order: first, all of the outputs produced by the left expression, and then all of the outputs produced by the right\\. For instance, filter \\fB\\.foo, \\.bar\\fR, produces both the \"foo\" fields and \"bar\" fields as separate outputs\\.\n.\n.P\nThe \\fB,\\fR operator is one way to construct generators\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.foo, \\.bar\\'\n   {\"foo\": 42, \"bar\": \"something else\", \"baz\": true}\n=> 42, \"something else\"\n\njq \\'\\.user, \\.projects[]\\'\n   {\"user\":\"stedolan\", \"projects\": [\"jq\", \"wikiflow\"]}\n=> \"stedolan\", \"jq\", \"wikiflow\"\n\njq \\'\\.[4,2]\\'\n   [\"a\",\"b\",\"c\",\"d\",\"e\"]\n=> \"e\", \"c\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Pipe: |\"\nThe | operator combines two filters by feeding the output(s) of the one on the left into the input of the one on the right\\. It\\'s similar to the Unix shell\\'s pipe, if you\\'re used to that\\.\n.\n.P\nIf the one on the left produces multiple results, the one on the right will be run for each of those results\\. So, the expression \\fB\\.[] | \\.foo\\fR retrieves the \"foo\" field of each element of the input array\\. This is a cartesian product, which can be surprising\\.\n.\n.P\nNote that \\fB\\.a\\.b\\.c\\fR is the same as \\fB\\.a | \\.b | \\.c\\fR\\.\n.\n.P\nNote too that \\fB\\.\\fR is the input value at the particular stage in a \"pipeline\", specifically: where the \\fB\\.\\fR expression appears\\. Thus \\fB\\.a | \\. | \\.b\\fR is the same as \\fB\\.a\\.b\\fR, as the \\fB\\.\\fR in the middle refers to whatever value \\fB\\.a\\fR produced\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[] | \\.name\\'\n   [{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}]\n=> \"JSON\", \"XML\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Parenthesis\"\nParenthesis work as a grouping operator just as in any typical programming language\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'(\\. + 2) * 5\\'\n   1\n=> 15\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"TYPES AND VALUES\"\njq supports the same set of datatypes as JSON \\- numbers, strings, booleans, arrays, objects (which in JSON\\-speak are hashes with only string keys), and \"null\"\\.\n.\n.P\nBooleans, null, strings and numbers are written the same way as in JSON\\. Just like everything else in jq, these simple values take an input and produce an output \\- \\fB42\\fR is a valid jq expression that takes an input, ignores it, and returns 42 instead\\.\n.\n.P\nNumbers in jq are internally represented by their IEEE754 double precision approximation\\. Any arithmetic operation with numbers, whether they are literals or results of previous filters, will produce a double precision floating point result\\.\n.\n.P\nHowever, when parsing a literal jq will store the original literal string\\. If no mutation is applied to this value then it will make to the output in its original form, even if conversion to double would result in a loss\\.\n.\n.SS \"Array construction: []\"\nAs in JSON, \\fB[]\\fR is used to construct arrays, as in \\fB[1,2,3]\\fR\\. The elements of the arrays can be any jq expression, including a pipeline\\. All of the results produced by all of the expressions are collected into one big array\\. You can use it to construct an array out of a known quantity of values (as in \\fB[\\.foo, \\.bar, \\.baz]\\fR) or to \"collect\" all the results of a filter into an array (as in \\fB[\\.items[]\\.name]\\fR)\n.\n.P\nOnce you understand the \",\" operator, you can look at jq\\'s array syntax in a different light: the expression \\fB[1,2,3]\\fR is not using a built\\-in syntax for comma\\-separated arrays, but is instead applying the \\fB[]\\fR operator (collect results) to the expression 1,2,3 (which produces three different results)\\.\n.\n.P\nIf you have a filter \\fBX\\fR that produces four results, then the expression \\fB[X]\\fR will produce a single result, an array of four elements\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.user, \\.projects[]]\\'\n   {\"user\":\"stedolan\", \"projects\": [\"jq\", \"wikiflow\"]}\n=> [\"stedolan\", \"jq\", \"wikiflow\"]\n\njq \\'[ \\.[] | \\. * 2]\\'\n   [1, 2, 3]\n=> [2, 4, 6]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Object Construction: {}\"\nLike JSON, \\fB{}\\fR is for constructing objects (aka dictionaries or hashes), as in: \\fB{\"a\": 42, \"b\": 17}\\fR\\.\n.\n.P\nIf the keys are \"identifier\\-like\", then the quotes can be left off, as in \\fB{a:42, b:17}\\fR\\. Variable references as key expressions use the value of the variable as the key\\. Key expressions other than constant literals, identifiers, or variable references, need to be parenthesized, e\\.g\\., \\fB{(\"a\"+\"b\"):59}\\fR\\.\n.\n.P\nThe value can be any expression (although you may need to wrap it in parentheses if, for example, it contains colons), which gets applied to the {} expression\\'s input (remember, all filters have an input and an output)\\.\n.\n.IP \"\" 4\n.\n.nf\n\n{foo: \\.bar}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwill produce the JSON object \\fB{\"foo\": 42}\\fR if given the JSON object \\fB{\"bar\":42, \"baz\":43}\\fR as its input\\. You can use this to select particular fields of an object: if the input is an object with \"user\", \"title\", \"id\", and \"content\" fields and you just want \"user\" and \"title\", you can write\n.\n.IP \"\" 4\n.\n.nf\n\n{user: \\.user, title: \\.title}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nBecause that is so common, there\\'s a shortcut syntax for it: \\fB{user, title}\\fR\\.\n.\n.P\nIf one of the expressions produces multiple results, multiple dictionaries will be produced\\. If the input\\'s\n.\n.IP \"\" 4\n.\n.nf\n\n{\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nthen the expression\n.\n.IP \"\" 4\n.\n.nf\n\n{user, title: \\.titles[]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwill produce two outputs:\n.\n.IP \"\" 4\n.\n.nf\n\n{\"user\":\"stedolan\", \"title\": \"JQ Primer\"}\n{\"user\":\"stedolan\", \"title\": \"More JQ\"}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nPutting parentheses around the key means it will be evaluated as an expression\\. With the same input as above,\n.\n.IP \"\" 4\n.\n.nf\n\n{(\\.user): \\.titles}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nproduces\n.\n.IP \"\" 4\n.\n.nf\n\n{\"stedolan\": [\"JQ Primer\", \"More JQ\"]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nVariable references as keys use the value of the variable as the key\\. Without a value then the variable\\'s name becomes the key and its value becomes the value,\n.\n.IP \"\" 4\n.\n.nf\n\n\"f o o\" as $foo | \"b a r\" as $bar | {$foo, $bar:$foo}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nproduces\n.\n.IP \"\" 4\n.\n.nf\n\n{\"foo\":\"f o o\",\"b a r\":\"f o o\"}\n\njq \\'{user, title: \\.titles[]}\\'\n   {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n=> {\"user\":\"stedolan\", \"title\": \"JQ Primer\"}, {\"user\":\"stedolan\", \"title\": \"More JQ\"}\n\njq \\'{(\\.user): \\.titles}\\'\n   {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n=> {\"stedolan\": [\"JQ Primer\", \"More JQ\"]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Recursive Descent: \\.\\.\"\nRecursively descends \\fB\\.\\fR, producing every value\\. This is the same as the zero\\-argument \\fBrecurse\\fR builtin (see below)\\. This is intended to resemble the XPath \\fB//\\fR operator\\. Note that \\fB\\.\\.a\\fR does not work; use \\fB\\.\\. | \\.a\\fR instead\\. In the example below we use \\fB\\.\\. | \\.a?\\fR to find all the values of object keys \"a\" in any object found \"below\" \\fB\\.\\fR\\.\n.\n.P\nThis is particularly useful in conjunction with \\fBpath(EXP)\\fR (also see below) and the \\fB?\\fR operator\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.\\. | \\.a?\\'\n   [[{\"a\":1}]]\n=> 1\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"BUILTIN OPERATORS AND FUNCTIONS\"\nSome jq operators (for instance, \\fB+\\fR) do different things depending on the type of their arguments (arrays, numbers, etc\\.)\\. However, jq never does implicit type conversions\\. If you try to add a string to an object you\\'ll get an error message and no result\\.\n.\n.P\nPlease note that all numbers are converted to IEEE754 double precision floating point representation\\. Arithmetic and logical operators are working with these converted doubles\\. Results of all such operations are also limited to the double precision\\.\n.\n.P\nThe only exception to this behaviour of number is a snapshot of original number literal\\. When a number which originally was provided as a literal is never mutated until the end of the program then it is printed to the output in its original literal form\\. This also includes cases when the original literal would be truncated when converted to the IEEE754 double precision floating point number\\.\n.\n.SS \"Addition: +\"\nThe operator \\fB+\\fR takes two filters, applies them both to the same input, and adds the results together\\. What \"adding\" means depends on the types involved:\n.\n.IP \"\\(bu\" 4\n\\fBNumbers\\fR are added by normal arithmetic\\.\n.\n.IP \"\\(bu\" 4\n\\fBArrays\\fR are added by being concatenated into a larger array\\.\n.\n.IP \"\\(bu\" 4\n\\fBStrings\\fR are added by being joined into a larger string\\.\n.\n.IP \"\\(bu\" 4\n\\fBObjects\\fR are added by merging, that is, inserting all the key\\-value pairs from both objects into a single combined object\\. If both objects contain a value for the same key, the object on the right of the \\fB+\\fR wins\\. (For recursive merge use the \\fB*\\fR operator\\.)\n.\n.IP \"\" 0\n.\n.P\n\\fBnull\\fR can be added to any value, and returns the other value unchanged\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.a + 1\\'\n   {\"a\": 7}\n=> 8\n\njq \\'\\.a + \\.b\\'\n   {\"a\": [1,2], \"b\": [3,4]}\n=> [1,2,3,4]\n\njq \\'\\.a + null\\'\n   {\"a\": 1}\n=> 1\n\njq \\'\\.a + 1\\'\n   {}\n=> 1\n\njq \\'{a: 1} + {b: 2} + {c: 3} + {a: 42}\\'\n   null\n=> {\"a\": 42, \"b\": 2, \"c\": 3}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Subtraction: \\-\"\nAs well as normal arithmetic subtraction on numbers, the \\fB\\-\\fR operator can be used on arrays to remove all occurrences of the second array\\'s elements from the first array\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'4 \\- \\.a\\'\n   {\"a\":3}\n=> 1\n\njq \\'\\. \\- [\"xml\", \"yaml\"]\\'\n   [\"xml\", \"yaml\", \"json\"]\n=> [\"json\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Multiplication, division, modulo: *, /, %\"\nThese infix operators behave as expected when given two numbers\\. Division by zero raises an error\\. \\fBx % y\\fR computes x modulo y\\.\n.\n.P\nMultiplying a string by a number produces the concatenation of that string that many times\\. \\fB\"x\" * 0\\fR produces \\fB\"\"\\fR\\.\n.\n.P\nDividing a string by another splits the first using the second as separators\\.\n.\n.P\nMultiplying two objects will merge them recursively: this works like addition but if both objects contain a value for the same key, and the values are objects, the two are merged with the same strategy\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'10 / \\. * 3\\'\n   5\n=> 6\n\njq \\'\\. / \", \"\\'\n   \"a, b,c,d, e\"\n=> [\"a\",\"b,c,d\",\"e\"]\n\njq \\'{\"k\": {\"a\": 1, \"b\": 2}} * {\"k\": {\"a\": 0,\"c\": 3}}\\'\n   null\n=> {\"k\": {\"a\": 0, \"b\": 2, \"c\": 3}}\n\njq \\'\\.[] | (1 / \\.)?\\'\n   [1,0,\\-1]\n=> 1, \\-1\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"abs\"\nThe builtin function \\fBabs\\fR is defined naively as: \\fBif \\. < 0 then \\- \\. else \\. end\\fR\\.\n.\n.P\nFor numeric input, this is the absolute value\\. See the section on the identity filter for the implications of this definition for numeric input\\.\n.\n.P\nTo compute the absolute value of a number as a floating point number, you may wish use \\fBfabs\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'map(abs)\\'\n   [\\-10, \\-1\\.1, \\-1e\\-1]\n=> [10,1\\.1,1e\\-1]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"length\"\nThe builtin function \\fBlength\\fR gets the length of various different types of value:\n.\n.IP \"\\(bu\" 4\nThe length of a \\fBstring\\fR is the number of Unicode codepoints it contains (which will be the same as its JSON\\-encoded length in bytes if it\\'s pure ASCII)\\.\n.\n.IP \"\\(bu\" 4\nThe length of a \\fBnumber\\fR is its absolute value\\.\n.\n.IP \"\\(bu\" 4\nThe length of an \\fBarray\\fR is the number of elements\\.\n.\n.IP \"\\(bu\" 4\nThe length of an \\fBobject\\fR is the number of key\\-value pairs\\.\n.\n.IP \"\\(bu\" 4\nThe length of \\fBnull\\fR is zero\\.\n.\n.IP \"\\(bu\" 4\nIt is an error to use \\fBlength\\fR on a \\fBboolean\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[] | length\\'\n   [[1,2], \"string\", {\"a\":2}, null, \\-5]\n=> 2, 6, 1, 0, 5\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"utf8bytelength\"\nThe builtin function \\fButf8bytelength\\fR outputs the number of bytes used to encode a string in UTF\\-8\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'utf8bytelength\\'\n   \"\\eu03bc\"\n=> 2\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"keys, keys_unsorted\"\nThe builtin function \\fBkeys\\fR, when given an object, returns its keys in an array\\.\n.\n.P\nThe keys are sorted \"alphabetically\", by unicode codepoint order\\. This is not an order that makes particular sense in any particular language, but you can count on it being the same for any two objects with the same set of keys, regardless of locale settings\\.\n.\n.P\nWhen \\fBkeys\\fR is given an array, it returns the valid indices for that array: the integers from 0 to length\\-1\\.\n.\n.P\nThe \\fBkeys_unsorted\\fR function is just like \\fBkeys\\fR, but if the input is an object then the keys will not be sorted, instead the keys will roughly be in insertion order\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'keys\\'\n   {\"abc\": 1, \"abcd\": 2, \"Foo\": 3}\n=> [\"Foo\", \"abc\", \"abcd\"]\n\njq \\'keys\\'\n   [42,3,35]\n=> [0,1,2]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"has(key)\"\nThe builtin function \\fBhas\\fR returns whether the input object has the given key, or the input array has an element at the given index\\.\n.\n.P\n\\fBhas($key)\\fR has the same effect as checking whether \\fB$key\\fR is a member of the array returned by \\fBkeys\\fR, although \\fBhas\\fR will be faster\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'map(has(\"foo\"))\\'\n   [{\"foo\": 42}, {}]\n=> [true, false]\n\njq \\'map(has(2))\\'\n   [[0,1], [\"a\",\"b\",\"c\"]]\n=> [false, true]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"in\"\nThe builtin function \\fBin\\fR returns whether or not the input key is in the given object, or the input index corresponds to an element in the given array\\. It is, essentially, an inversed version of \\fBhas\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[] | in({\"foo\": 42})\\'\n   [\"foo\", \"bar\"]\n=> true, false\n\njq \\'map(in([0,1]))\\'\n   [2, 0]\n=> [false, true]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"map(f), map_values(f)\"\nFor any filter \\fBf\\fR, \\fBmap(f)\\fR and \\fBmap_values(f)\\fR apply \\fBf\\fR to each of the values in the input array or object, that is, to the values of \\fB\\.[]\\fR\\.\n.\n.P\nIn the absence of errors, \\fBmap(f)\\fR always outputs an array whereas \\fBmap_values(f)\\fR outputs an array if given an array, or an object if given an object\\.\n.\n.P\nWhen the input to \\fBmap_values(f)\\fR is an object, the output object has the same keys as the input object except for those keys whose values when piped to \\fBf\\fR produce no values at all\\.\n.\n.P\nThe key difference between \\fBmap(f)\\fR and \\fBmap_values(f)\\fR is that the former simply forms an array from all the values of \\fB($x|f)\\fR for each value, $x, in the input array or object, but \\fBmap_values(f)\\fR only uses \\fBfirst($x|f)\\fR\\.\n.\n.P\nSpecifically, for object inputs, \\fBmap_values(f)\\fR constructs the output object by examining in turn the value of \\fBfirst(\\.[$k]|f)\\fR for each key, $k, of the input\\. If this expression produces no values, then the corresponding key will be dropped; otherwise, the output object will have that value at the key, $k\\.\n.\n.P\nHere are some examples to clarify the behavior of \\fBmap\\fR and \\fBmap_values\\fR when applied to arrays\\. These examples assume the input is \\fB[1]\\fR in all cases:\n.\n.IP \"\" 4\n.\n.nf\n\nmap(\\.+1)          #=>  [2]\nmap(\\., \\.)         #=>  [1,1]\nmap(empty)        #=>  []\n\nmap_values(\\.+1)   #=>  [2]\nmap_values(\\., \\.)  #=>  [1]\nmap_values(empty) #=>  []\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\n\\fBmap(f)\\fR is equivalent to \\fB[\\.[] | f]\\fR and \\fBmap_values(f)\\fR is equivalent to \\fB\\.[] |= f\\fR\\.\n.\n.P\nIn fact, these are their implementations\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'map(\\.+1)\\'\n   [1,2,3]\n=> [2,3,4]\n\njq \\'map_values(\\.+1)\\'\n   {\"a\": 1, \"b\": 2, \"c\": 3}\n=> {\"a\": 2, \"b\": 3, \"c\": 4}\n\njq \\'map(\\., \\.)\\'\n   [1,2]\n=> [1,1,2,2]\n\njq \\'map_values(\\. // empty)\\'\n   {\"a\": null, \"b\": true, \"c\": false}\n=> {\"b\":true}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"pick(pathexps)\"\nEmit the projection of the input object or array defined by the specified sequence of path expressions, such that if \\fBp\\fR is any one of these specifications, then \\fB(\\. | p)\\fR will evaluate to the same value as \\fB(\\. | pick(pathexps) | p)\\fR\\. For arrays, negative indices and \\fB\\.[m:n]\\fR specifications should not be used\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'pick(\\.a, \\.b\\.c, \\.x)\\'\n   {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"e\": 4}\n=> {\"a\":1,\"b\":{\"c\":2},\"x\":null}\n\njq \\'pick(\\.[2], \\.[0], \\.[0])\\'\n   [1,2,3,4]\n=> [1,null,3]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"path(path_expression)\"\nOutputs array representations of the given path expression in \\fB\\.\\fR\\. The outputs are arrays of strings (object keys) and/or numbers (array indices)\\.\n.\n.P\nPath expressions are jq expressions like \\fB\\.a\\fR, but also \\fB\\.[]\\fR\\. There are two types of path expressions: ones that can match exactly, and ones that cannot\\. For example, \\fB\\.a\\.b\\.c\\fR is an exact match path expression, while \\fB\\.a[]\\.b\\fR is not\\.\n.\n.P\n\\fBpath(exact_path_expression)\\fR will produce the array representation of the path expression even if it does not exist in \\fB\\.\\fR, if \\fB\\.\\fR is \\fBnull\\fR or an array or an object\\.\n.\n.P\n\\fBpath(pattern)\\fR will produce array representations of the paths matching \\fBpattern\\fR if the paths exist in \\fB\\.\\fR\\.\n.\n.P\nNote that the path expressions are not different from normal expressions\\. The expression \\fBpath(\\.\\.|select(type==\"boolean\"))\\fR outputs all the paths to boolean values in \\fB\\.\\fR, and only those paths\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'path(\\.a[0]\\.b)\\'\n   null\n=> [\"a\",0,\"b\"]\n\njq \\'[path(\\.\\.)]\\'\n   {\"a\":[{\"b\":1}]}\n=> [[],[\"a\"],[\"a\",0],[\"a\",0,\"b\"]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"del(path_expression)\"\nThe builtin function \\fBdel\\fR removes a key and its corresponding value from an object\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'del(\\.foo)\\'\n   {\"foo\": 42, \"bar\": 9001, \"baz\": 42}\n=> {\"bar\": 9001, \"baz\": 42}\n\njq \\'del(\\.[1, 2])\\'\n   [\"foo\", \"bar\", \"baz\"]\n=> [\"foo\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"getpath(PATHS)\"\nThe builtin function \\fBgetpath\\fR outputs the values in \\fB\\.\\fR found at each path in \\fBPATHS\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'getpath([\"a\",\"b\"])\\'\n   null\n=> null\n\njq \\'[getpath([\"a\",\"b\"], [\"a\",\"c\"])]\\'\n   {\"a\":{\"b\":0, \"c\":1}}\n=> [0, 1]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"setpath(PATHS; VALUE)\"\nThe builtin function \\fBsetpath\\fR sets the \\fBPATHS\\fR in \\fB\\.\\fR to \\fBVALUE\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'setpath([\"a\",\"b\"]; 1)\\'\n   null\n=> {\"a\": {\"b\": 1}}\n\njq \\'setpath([\"a\",\"b\"]; 1)\\'\n   {\"a\":{\"b\":0}}\n=> {\"a\": {\"b\": 1}}\n\njq \\'setpath([0,\"a\"]; 1)\\'\n   null\n=> [{\"a\":1}]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"delpaths(PATHS)\"\nThe builtin function \\fBdelpaths\\fR deletes the \\fBPATHS\\fR in \\fB\\.\\fR\\. \\fBPATHS\\fR must be an array of paths, where each path is an array of strings and numbers\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'delpaths([[\"a\",\"b\"]])\\'\n   {\"a\":{\"b\":1},\"x\":{\"y\":2}}\n=> {\"a\":{},\"x\":{\"y\":2}}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"to_entries, from_entries, with_entries(f)\"\nThese functions convert between an object and an array of key\\-value pairs\\. If \\fBto_entries\\fR is passed an object, then for each \\fBk: v\\fR entry in the input, the output array includes \\fB{\"key\": k, \"value\": v}\\fR\\.\n.\n.P\n\\fBfrom_entries\\fR does the opposite conversion, and \\fBwith_entries(f)\\fR is a shorthand for \\fBto_entries | map(f) | from_entries\\fR, useful for doing some operation to all keys and values of an object\\. \\fBfrom_entries\\fR accepts \\fB\"key\"\\fR, \\fB\"Key\"\\fR, \\fB\"name\"\\fR, \\fB\"Name\"\\fR, \\fB\"value\"\\fR, and \\fB\"Value\"\\fR as keys\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'to_entries\\'\n   {\"a\": 1, \"b\": 2}\n=> [{\"key\":\"a\", \"value\":1}, {\"key\":\"b\", \"value\":2}]\n\njq \\'from_entries\\'\n   [{\"key\":\"a\", \"value\":1}, {\"key\":\"b\", \"value\":2}]\n=> {\"a\": 1, \"b\": 2}\n\njq \\'with_entries(\\.key |= \"KEY_\" + \\.)\\'\n   {\"a\": 1, \"b\": 2}\n=> {\"KEY_a\": 1, \"KEY_b\": 2}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"select(boolean_expression)\"\nThe function \\fBselect(f)\\fR produces its input unchanged if \\fBf\\fR returns true for that input, and produces no output otherwise\\.\n.\n.P\nIt\\'s useful for filtering lists: \\fB[1,2,3] | map(select(\\. >= 2))\\fR will give you \\fB[2,3]\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'map(select(\\. >= 2))\\'\n   [1,5,3,0,7]\n=> [5,3,7]\n\njq \\'\\.[] | select(\\.id == \"second\")\\'\n   [{\"id\": \"first\", \"val\": 1}, {\"id\": \"second\", \"val\": 2}]\n=> {\"id\": \"second\", \"val\": 2}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"arrays, objects, iterables, booleans, numbers, normals, finites, strings, nulls, values, scalars\"\nThese built\\-ins select only inputs that are arrays, objects, iterables (arrays or objects), booleans, numbers, normal numbers, finite numbers, strings, null, non\\-null values, and non\\-iterables, respectively\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[]|numbers\\'\n   [[],{},1,\"foo\",null,true,false]\n=> 1\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"empty\"\n\\fBempty\\fR returns no results\\. None at all\\. Not even \\fBnull\\fR\\.\n.\n.P\nIt\\'s useful on occasion\\. You\\'ll know if you need it :)\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'1, empty, 2\\'\n   null\n=> 1, 2\n\njq \\'[1,2,empty,3]\\'\n   null\n=> [1,2,3]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"error, error(message)\"\nProduces an error with the input value, or with the message given as the argument\\. Errors can be caught with try/catch; see below\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'try error catch \\.\\'\n   \"error message\"\n=> \"error message\"\n\njq \\'try error(\"invalid value: \\e(\\.)\") catch \\.\\'\n   42\n=> \"invalid value: 42\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"halt\"\nStops the jq program with no further outputs\\. jq will exit with exit status \\fB0\\fR\\.\n.\n.SS \"halt_error, halt_error(exit_code)\"\nStops the jq program with no further outputs\\. The input will be printed on \\fBstderr\\fR as raw output (i\\.e\\., strings will not have double quotes) with no decoration, not even a newline\\.\n.\n.P\nThe given \\fBexit_code\\fR (defaulting to \\fB5\\fR) will be jq\\'s exit status\\.\n.\n.P\nFor example, \\fB\"Error: something went wrong\\en\"|halt_error(1)\\fR\\.\n.\n.SS \"$__loc__\"\nProduces an object with a \"file\" key and a \"line\" key, with the filename and line number where \\fB$__loc__\\fR occurs, as values\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'try error(\"\\e($__loc__)\") catch \\.\\'\n   null\n=> \"{\\e\"file\\e\":\\e\"<top\\-level>\\e\",\\e\"line\\e\":1}\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"paths, paths(node_filter)\"\n\\fBpaths\\fR outputs the paths to all the elements in its input (except it does not output the empty list, representing \\. itself)\\.\n.\n.P\n\\fBpaths(f)\\fR outputs the paths to any values for which \\fBf\\fR is \\fBtrue\\fR\\. That is, \\fBpaths(type == \"number\")\\fR outputs the paths to all numeric values\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[paths]\\'\n   [1,[[],{\"a\":2}]]\n=> [[0],[1],[1,0],[1,1],[1,1,\"a\"]]\n\njq \\'[paths(type == \"number\")]\\'\n   [1,[[],{\"a\":2}]]\n=> [[0],[1,1,\"a\"]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"add, add(generator)\"\nThe filter \\fBadd\\fR takes as input an array, and produces as output the elements of the array added together\\. This might mean summed, concatenated or merged depending on the types of the elements of the input array \\- the rules are the same as those for the \\fB+\\fR operator (described above)\\.\n.\n.P\nIf the input is an empty array, \\fBadd\\fR returns \\fBnull\\fR\\.\n.\n.P\n\\fBadd(generator)\\fR operates on the given generator rather than the input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'add\\'\n   [\"a\",\"b\",\"c\"]\n=> \"abc\"\n\njq \\'add\\'\n   [1, 2, 3]\n=> 6\n\njq \\'add\\'\n   []\n=> null\n\njq \\'add(\\.[]\\.a)\\'\n   [{\"a\":3}, {\"a\":5}, {\"b\":6}]\n=> 8\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"any, any(condition), any(generator; condition)\"\nThe filter \\fBany\\fR takes as input an array of boolean values, and produces \\fBtrue\\fR as output if any of the elements of the array are \\fBtrue\\fR\\.\n.\n.P\nIf the input is an empty array, \\fBany\\fR returns \\fBfalse\\fR\\.\n.\n.P\nThe \\fBany(condition)\\fR form applies the given condition to the elements of the input array\\.\n.\n.P\nThe \\fBany(generator; condition)\\fR form applies the given condition to all the outputs of the given generator\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'any\\'\n   [true, false]\n=> true\n\njq \\'any\\'\n   [false, false]\n=> false\n\njq \\'any\\'\n   []\n=> false\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"all, all(condition), all(generator; condition)\"\nThe filter \\fBall\\fR takes as input an array of boolean values, and produces \\fBtrue\\fR as output if all of the elements of the array are \\fBtrue\\fR\\.\n.\n.P\nThe \\fBall(condition)\\fR form applies the given condition to the elements of the input array\\.\n.\n.P\nThe \\fBall(generator; condition)\\fR form applies the given condition to all the outputs of the given generator\\.\n.\n.P\nIf the input is an empty array, \\fBall\\fR returns \\fBtrue\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'all\\'\n   [true, false]\n=> false\n\njq \\'all\\'\n   [true, true]\n=> true\n\njq \\'all\\'\n   []\n=> true\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"flatten, flatten(depth)\"\nThe filter \\fBflatten\\fR takes as input an array of nested arrays, and produces a flat array in which all arrays inside the original array have been recursively replaced by their values\\. You can pass an argument to it to specify how many levels of nesting to flatten\\.\n.\n.P\n\\fBflatten(2)\\fR is like \\fBflatten\\fR, but going only up to two levels deep\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'flatten\\'\n   [1, [2], [[3]]]\n=> [1, 2, 3]\n\njq \\'flatten(1)\\'\n   [1, [2], [[3]]]\n=> [1, 2, [3]]\n\njq \\'flatten\\'\n   [[]]\n=> []\n\njq \\'flatten\\'\n   [{\"foo\": \"bar\"}, [{\"foo\": \"baz\"}]]\n=> [{\"foo\": \"bar\"}, {\"foo\": \"baz\"}]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"range(upto), range(from; upto), range(from; upto; by)\"\nThe \\fBrange\\fR function produces a range of numbers\\. \\fBrange(4; 10)\\fR produces 6 numbers, from 4 (inclusive) to 10 (exclusive)\\. The numbers are produced as separate outputs\\. Use \\fB[range(4; 10)]\\fR to get a range as an array\\.\n.\n.P\nThe one argument form generates numbers from 0 to the given number, with an increment of 1\\.\n.\n.P\nThe two argument form generates numbers from \\fBfrom\\fR to \\fBupto\\fR with an increment of 1\\.\n.\n.P\nThe three argument form generates numbers \\fBfrom\\fR to \\fBupto\\fR with an increment of \\fBby\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'range(2; 4)\\'\n   null\n=> 2, 3\n\njq \\'[range(2; 4)]\\'\n   null\n=> [2,3]\n\njq \\'[range(4)]\\'\n   null\n=> [0,1,2,3]\n\njq \\'[range(0; 10; 3)]\\'\n   null\n=> [0,3,6,9]\n\njq \\'[range(0; 10; \\-1)]\\'\n   null\n=> []\n\njq \\'[range(0; \\-5; \\-1)]\\'\n   null\n=> [0,\\-1,\\-2,\\-3,\\-4]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"floor\"\nThe \\fBfloor\\fR function returns the floor of its numeric input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'floor\\'\n   3\\.14159\n=> 3\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"sqrt\"\nThe \\fBsqrt\\fR function returns the square root of its numeric input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'sqrt\\'\n   9\n=> 3\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"tonumber\"\nThe \\fBtonumber\\fR function parses its input as a number\\. It will convert correctly\\-formatted strings to their numeric equivalent, leave numbers alone, and give an error on all other input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[] | tonumber\\'\n   [1, \"1\"]\n=> 1, 1\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"tostring\"\nThe \\fBtostring\\fR function prints its input as a string\\. Strings are left unchanged, and all other values are JSON\\-encoded\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[] | tostring\\'\n   [1, \"1\", [1]]\n=> \"1\", \"1\", \"[1]\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"type\"\nThe \\fBtype\\fR function returns the type of its argument as a string, which is one of null, boolean, number, string, array or object\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'map(type)\\'\n   [0, false, [], {}, null, \"hello\"]\n=> [\"number\", \"boolean\", \"array\", \"object\", \"null\", \"string\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"infinite, nan, isinfinite, isnan, isfinite, isnormal\"\nSome arithmetic operations can yield infinities and \"not a number\" (NaN) values\\. The \\fBisinfinite\\fR builtin returns \\fBtrue\\fR if its input is infinite\\. The \\fBisnan\\fR builtin returns \\fBtrue\\fR if its input is a NaN\\. The \\fBinfinite\\fR builtin returns a positive infinite value\\. The \\fBnan\\fR builtin returns a NaN\\. The \\fBisnormal\\fR builtin returns true if its input is a normal number\\.\n.\n.P\nNote that division by zero raises an error\\.\n.\n.P\nCurrently most arithmetic operations operating on infinities, NaNs, and sub\\-normals do not raise errors\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.[] | (infinite * \\.) < 0\\'\n   [\\-1, 1]\n=> true, false\n\njq \\'infinite, nan | type\\'\n   null\n=> \"number\", \"number\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"sort, sort_by(path_expression)\"\nThe \\fBsort\\fR functions sorts its input, which must be an array\\. Values are sorted in the following order:\n.\n.IP \"\\(bu\" 4\n\\fBnull\\fR\n.\n.IP \"\\(bu\" 4\n\\fBfalse\\fR\n.\n.IP \"\\(bu\" 4\n\\fBtrue\\fR\n.\n.IP \"\\(bu\" 4\nnumbers\n.\n.IP \"\\(bu\" 4\nstrings, in alphabetical order (by unicode codepoint value)\n.\n.IP \"\\(bu\" 4\narrays, in lexical order\n.\n.IP \"\\(bu\" 4\nobjects\n.\n.IP \"\" 0\n.\n.P\nThe ordering for objects is a little complex: first they\\'re compared by comparing their sets of keys (as arrays in sorted order), and if their keys are equal then the values are compared key by key\\.\n.\n.P\n\\fBsort_by\\fR may be used to sort by a particular field of an object, or by applying any jq filter\\. \\fBsort_by(f)\\fR compares two elements by comparing the result of \\fBf\\fR on each element\\. When \\fBf\\fR produces multiple values, it firstly compares the first values, and the second values if the first values are equal, and so on\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'sort\\'\n   [8,3,null,6]\n=> [null,3,6,8]\n\njq \\'sort_by(\\.foo)\\'\n   [{\"foo\":4, \"bar\":10}, {\"foo\":3, \"bar\":10}, {\"foo\":2, \"bar\":1}]\n=> [{\"foo\":2, \"bar\":1}, {\"foo\":3, \"bar\":10}, {\"foo\":4, \"bar\":10}]\n\njq \\'sort_by(\\.foo, \\.bar)\\'\n   [{\"foo\":4, \"bar\":10}, {\"foo\":3, \"bar\":20}, {\"foo\":2, \"bar\":1}, {\"foo\":3, \"bar\":10}]\n=> [{\"foo\":2, \"bar\":1}, {\"foo\":3, \"bar\":10}, {\"foo\":3, \"bar\":20}, {\"foo\":4, \"bar\":10}]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"group_by(path_expression)\"\n\\fBgroup_by(\\.foo)\\fR takes as input an array, groups the elements having the same \\fB\\.foo\\fR field into separate arrays, and produces all of these arrays as elements of a larger array, sorted by the value of the \\fB\\.foo\\fR field\\.\n.\n.P\nAny jq expression, not just a field access, may be used in place of \\fB\\.foo\\fR\\. The sorting order is the same as described in the \\fBsort\\fR function above\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'group_by(\\.foo)\\'\n   [{\"foo\":1, \"bar\":10}, {\"foo\":3, \"bar\":100}, {\"foo\":1, \"bar\":1}]\n=> [[{\"foo\":1, \"bar\":10}, {\"foo\":1, \"bar\":1}], [{\"foo\":3, \"bar\":100}]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"min, max, min_by(path_exp), max_by(path_exp)\"\nFind the minimum or maximum element of the input array\\.\n.\n.P\nThe \\fBmin_by(path_exp)\\fR and \\fBmax_by(path_exp)\\fR functions allow you to specify a particular field or property to examine, e\\.g\\. \\fBmin_by(\\.foo)\\fR finds the object with the smallest \\fBfoo\\fR field\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'min\\'\n   [5,4,2,7]\n=> 2\n\njq \\'max_by(\\.foo)\\'\n   [{\"foo\":1, \"bar\":14}, {\"foo\":2, \"bar\":3}]\n=> {\"foo\":2, \"bar\":3}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"unique, unique_by(path_exp)\"\nThe \\fBunique\\fR function takes as input an array and produces an array of the same elements, in sorted order, with duplicates removed\\.\n.\n.P\nThe \\fBunique_by(path_exp)\\fR function will keep only one element for each value obtained by applying the argument\\. Think of it as making an array by taking one element out of every group produced by \\fBgroup\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'unique\\'\n   [1,2,5,3,5,3,1,3]\n=> [1,2,3,5]\n\njq \\'unique_by(\\.foo)\\'\n   [{\"foo\": 1, \"bar\": 2}, {\"foo\": 1, \"bar\": 3}, {\"foo\": 4, \"bar\": 5}]\n=> [{\"foo\": 1, \"bar\": 2}, {\"foo\": 4, \"bar\": 5}]\n\njq \\'unique_by(length)\\'\n   [\"chunky\", \"bacon\", \"kitten\", \"cicada\", \"asparagus\"]\n=> [\"bacon\", \"chunky\", \"asparagus\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"reverse\"\nThis function reverses an array\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'reverse\\'\n   [1,2,3,4]\n=> [4,3,2,1]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"contains(element)\"\nThe filter \\fBcontains(b)\\fR will produce true if b is completely contained within the input\\. A string B is contained in a string A if B is a substring of A\\. An array B is contained in an array A if all elements in B are contained in any element in A\\. An object B is contained in object A if all of the values in B are contained in the value in A with the same key\\. All other types are assumed to be contained in each other if they are equal\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'contains(\"bar\")\\'\n   \"foobar\"\n=> true\n\njq \\'contains([\"baz\", \"bar\"])\\'\n   [\"foobar\", \"foobaz\", \"blarp\"]\n=> true\n\njq \\'contains([\"bazzzzz\", \"bar\"])\\'\n   [\"foobar\", \"foobaz\", \"blarp\"]\n=> false\n\njq \\'contains({foo: 12, bar: [{barp: 12}]})\\'\n   {\"foo\": 12, \"bar\":[1,2,{\"barp\":12, \"blip\":13}]}\n=> true\n\njq \\'contains({foo: 12, bar: [{barp: 15}]})\\'\n   {\"foo\": 12, \"bar\":[1,2,{\"barp\":12, \"blip\":13}]}\n=> false\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"indices(s)\"\nOutputs an array containing the indices in \\fB\\.\\fR where \\fBs\\fR occurs\\. The input may be an array, in which case if \\fBs\\fR is an array then the indices output will be those where all elements in \\fB\\.\\fR match those of \\fBs\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'indices(\", \")\\'\n   \"a,b, cd, efg, hijk\"\n=> [3,7,12]\n\njq \\'indices(1)\\'\n   [0,1,2,1,3,1,4]\n=> [1,3,5]\n\njq \\'indices([1,2])\\'\n   [0,1,2,3,1,4,2,5,1,2,6,7]\n=> [1,8]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"index(s), rindex(s)\"\nOutputs the index of the first (\\fBindex\\fR) or last (\\fBrindex\\fR) occurrence of \\fBs\\fR in the input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'index(\", \")\\'\n   \"a,b, cd, efg, hijk\"\n=> 3\n\njq \\'index(1)\\'\n   [0,1,2,1,3,1,4]\n=> 1\n\njq \\'index([1,2])\\'\n   [0,1,2,3,1,4,2,5,1,2,6,7]\n=> 1\n\njq \\'rindex(\", \")\\'\n   \"a,b, cd, efg, hijk\"\n=> 12\n\njq \\'rindex(1)\\'\n   [0,1,2,1,3,1,4]\n=> 5\n\njq \\'rindex([1,2])\\'\n   [0,1,2,3,1,4,2,5,1,2,6,7]\n=> 8\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"inside\"\nThe filter \\fBinside(b)\\fR will produce true if the input is completely contained within b\\. It is, essentially, an inversed version of \\fBcontains\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'inside(\"foobar\")\\'\n   \"bar\"\n=> true\n\njq \\'inside([\"foobar\", \"foobaz\", \"blarp\"])\\'\n   [\"baz\", \"bar\"]\n=> true\n\njq \\'inside([\"foobar\", \"foobaz\", \"blarp\"])\\'\n   [\"bazzzzz\", \"bar\"]\n=> false\n\njq \\'inside({\"foo\": 12, \"bar\":[1,2,{\"barp\":12, \"blip\":13}]})\\'\n   {\"foo\": 12, \"bar\": [{\"barp\": 12}]}\n=> true\n\njq \\'inside({\"foo\": 12, \"bar\":[1,2,{\"barp\":12, \"blip\":13}]})\\'\n   {\"foo\": 12, \"bar\": [{\"barp\": 15}]}\n=> false\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"startswith(str)\"\nOutputs \\fBtrue\\fR if \\. starts with the given string argument\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.[]|startswith(\"foo\")]\\'\n   [\"fo\", \"foo\", \"barfoo\", \"foobar\", \"barfoob\"]\n=> [false, true, false, true, false]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"endswith(str)\"\nOutputs \\fBtrue\\fR if \\. ends with the given string argument\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.[]|endswith(\"foo\")]\\'\n   [\"foobar\", \"barfoo\"]\n=> [false, true]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"combinations, combinations(n)\"\nOutputs all combinations of the elements of the arrays in the input array\\. If given an argument \\fBn\\fR, it outputs all combinations of \\fBn\\fR repetitions of the input array\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'combinations\\'\n   [[1,2], [3, 4]]\n=> [1, 3], [1, 4], [2, 3], [2, 4]\n\njq \\'combinations(2)\\'\n   [0, 1]\n=> [0, 0], [0, 1], [1, 0], [1, 1]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"ltrimstr(str)\"\nOutputs its input with the given prefix string removed, if it starts with it\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.[]|ltrimstr(\"foo\")]\\'\n   [\"fo\", \"foo\", \"barfoo\", \"foobar\", \"afoo\"]\n=> [\"fo\",\"\",\"barfoo\",\"bar\",\"afoo\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"rtrimstr(str)\"\nOutputs its input with the given suffix string removed, if it ends with it\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.[]|rtrimstr(\"foo\")]\\'\n   [\"fo\", \"foo\", \"barfoo\", \"foobar\", \"foob\"]\n=> [\"fo\",\"\",\"bar\",\"foobar\",\"foob\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"trim, ltrim, rtrim\"\n\\fBtrim\\fR trims both leading and trailing whitespace\\.\n.\n.P\n\\fBltrim\\fR trims only leading (left side) whitespace\\.\n.\n.P\n\\fBrtrim\\fR trims only trailing (right side) whitespace\\.\n.\n.P\nWhitespace characters are the usual \\fB\" \"\\fR, \\fB\"\\en\"\\fR \\fB\"\\et\"\\fR, \\fB\"\\er\"\\fR and also all characters in the Unicode character database with the whitespace property\\. Note that what considers whitespace might change in the future\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'trim, ltrim, rtrim\\'\n   \" abc \"\n=> \"abc\", \"abc \", \" abc\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"explode\"\nConverts an input string into an array of the string\\'s codepoint numbers\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'explode\\'\n   \"foobar\"\n=> [102,111,111,98,97,114]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"implode\"\nThe inverse of explode\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'implode\\'\n   [65, 66, 67]\n=> \"ABC\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"split(str)\"\nSplits an input string on the separator argument\\.\n.\n.P\n\\fBsplit\\fR can also split on regex matches when called with two arguments (see the regular expressions section below)\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'split(\", \")\\'\n   \"a, b,c,d, e, \"\n=> [\"a\",\"b,c,d\",\"e\",\"\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"join(str)\"\nJoins the array of elements given as input, using the argument as separator\\. It is the inverse of \\fBsplit\\fR: that is, running \\fBsplit(\"foo\") | join(\"foo\")\\fR over any input string returns said input string\\.\n.\n.P\nNumbers and booleans in the input are converted to strings\\. Null values are treated as empty strings\\. Arrays and objects in the input are not supported\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'join(\", \")\\'\n   [\"a\",\"b,c,d\",\"e\"]\n=> \"a, b,c,d, e\"\n\njq \\'join(\" \")\\'\n   [\"a\",1,2\\.3,true,null,false]\n=> \"a 1 2\\.3 true  false\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"ascii_downcase, ascii_upcase\"\nEmit a copy of the input string with its alphabetic characters (a\\-z and A\\-Z) converted to the specified case\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'ascii_upcase\\'\n   \"useful but not for é\"\n=> \"USEFUL BUT NOT FOR é\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"while(cond; update)\"\nThe \\fBwhile(cond; update)\\fR function allows you to repeatedly apply an update to \\fB\\.\\fR until \\fBcond\\fR is false\\.\n.\n.P\nNote that \\fBwhile(cond; update)\\fR is internally defined as a recursive jq function\\. Recursive calls within \\fBwhile\\fR will not consume additional memory if \\fBupdate\\fR produces at most one output for each input\\. See advanced topics below\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[while(\\.<100; \\.*2)]\\'\n   1\n=> [1,2,4,8,16,32,64]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"repeat(exp)\"\nThe \\fBrepeat(exp)\\fR function allows you to repeatedly apply expression \\fBexp\\fR to \\fB\\.\\fR until an error is raised\\.\n.\n.P\nNote that \\fBrepeat(exp)\\fR is internally defined as a recursive jq function\\. Recursive calls within \\fBrepeat\\fR will not consume additional memory if \\fBexp\\fR produces at most one output for each input\\. See advanced topics below\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[repeat(\\.*2, error)?]\\'\n   1\n=> [2]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"until(cond; next)\"\nThe \\fBuntil(cond; next)\\fR function allows you to repeatedly apply the expression \\fBnext\\fR, initially to \\fB\\.\\fR then to its own output, until \\fBcond\\fR is true\\. For example, this can be used to implement a factorial function (see below)\\.\n.\n.P\nNote that \\fBuntil(cond; next)\\fR is internally defined as a recursive jq function\\. Recursive calls within \\fBuntil()\\fR will not consume additional memory if \\fBnext\\fR produces at most one output for each input\\. See advanced topics below\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.,1]|until(\\.[0] < 1; [\\.[0] \\- 1, \\.[1] * \\.[0]])|\\.[1]\\'\n   4\n=> 24\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"recurse(f), recurse, recurse(f; condition)\"\nThe \\fBrecurse(f)\\fR function allows you to search through a recursive structure, and extract interesting data from all levels\\. Suppose your input represents a filesystem:\n.\n.IP \"\" 4\n.\n.nf\n\n{\"name\": \"/\", \"children\": [\n  {\"name\": \"/bin\", \"children\": [\n    {\"name\": \"/bin/ls\", \"children\": []},\n    {\"name\": \"/bin/sh\", \"children\": []}]},\n  {\"name\": \"/home\", \"children\": [\n    {\"name\": \"/home/stephen\", \"children\": [\n      {\"name\": \"/home/stephen/jq\", \"children\": []}]}]}]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nNow suppose you want to extract all of the filenames present\\. You need to retrieve \\fB\\.name\\fR, \\fB\\.children[]\\.name\\fR, \\fB\\.children[]\\.children[]\\.name\\fR, and so on\\. You can do this with:\n.\n.IP \"\" 4\n.\n.nf\n\nrecurse(\\.children[]) | \\.name\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWhen called without an argument, \\fBrecurse\\fR is equivalent to \\fBrecurse(\\.[]?)\\fR\\.\n.\n.P\n\\fBrecurse(f)\\fR is identical to \\fBrecurse(f; true)\\fR and can be used without concerns about recursion depth\\.\n.\n.P\n\\fBrecurse(f; condition)\\fR is a generator which begins by emitting \\. and then emits in turn \\.|f, \\.|f|f, \\.|f|f|f, \\.\\.\\. so long as the computed value satisfies the condition\\. For example, to generate all the integers, at least in principle, one could write \\fBrecurse(\\.+1; true)\\fR\\.\n.\n.P\nThe recursive calls in \\fBrecurse\\fR will not consume additional memory whenever \\fBf\\fR produces at most a single output for each input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'recurse(\\.foo[])\\'\n   {\"foo\":[{\"foo\": []}, {\"foo\":[{\"foo\":[]}]}]}\n=> {\"foo\":[{\"foo\":[]},{\"foo\":[{\"foo\":[]}]}]}, {\"foo\":[]}, {\"foo\":[{\"foo\":[]}]}, {\"foo\":[]}\n\njq \\'recurse\\'\n   {\"a\":0,\"b\":[1]}\n=> {\"a\":0,\"b\":[1]}, 0, [1], 1\n\njq \\'recurse(\\. * \\.; \\. < 20)\\'\n   2\n=> 2, 4, 16\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"walk(f)\"\nThe \\fBwalk(f)\\fR function applies f recursively to every component of the input entity\\. When an array is encountered, f is first applied to its elements and then to the array itself; when an object is encountered, f is first applied to all the values and then to the object\\. In practice, f will usually test the type of its input, as illustrated in the following examples\\. The first example highlights the usefulness of processing the elements of an array of arrays before processing the array itself\\. The second example shows how all the keys of all the objects within the input can be considered for alteration\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'walk(if type == \"array\" then sort else \\. end)\\'\n   [[4, 1, 7], [8, 5, 2], [3, 6, 9]]\n=> [[1,4,7],[2,5,8],[3,6,9]]\n\njq \\'walk( if type == \"object\" then with_entries( \\.key |= sub( \"^_+\"; \"\") ) else \\. end )\\'\n   [ { \"_a\": { \"__b\": 2 } } ]\n=> [{\"a\":{\"b\":2}}]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"have_literal_numbers\"\nThis builtin returns true if jq\\'s build configuration includes support for preservation of input number literals\\.\n.\n.SS \"have_decnum\"\nThis builtin returns true if jq was built with \"decnum\", which is the current literal number preserving numeric backend implementation for jq\\.\n.\n.SS \"$JQ_BUILD_CONFIGURATION\"\nThis builtin binding shows the jq executable\\'s build configuration\\. Its value has no particular format, but it can be expected to be at least the \\fB\\./configure\\fR command\\-line arguments, and may be enriched in the future to include the version strings for the build tooling used\\.\n.\n.P\nNote that this can be overridden in the command\\-line with \\fB\\-\\-arg\\fR and related options\\.\n.\n.SS \"$ENV, env\"\n\\fB$ENV\\fR is an object representing the environment variables as set when the jq program started\\.\n.\n.P\n\\fBenv\\fR outputs an object representing jq\\'s current environment\\.\n.\n.P\nAt the moment there is no builtin for setting environment variables\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'$ENV\\.PAGER\\'\n   null\n=> \"less\"\n\njq \\'env\\.PAGER\\'\n   null\n=> \"less\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"transpose\"\nTranspose a possibly jagged matrix (an array of arrays)\\. Rows are padded with nulls so the result is always rectangular\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'transpose\\'\n   [[1], [2,3]]\n=> [[1,2],[null,3]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"bsearch(x)\"\n\\fBbsearch(x)\\fR conducts a binary search for x in the input array\\. If the input is sorted and contains x, then \\fBbsearch(x)\\fR will return its index in the array; otherwise, if the array is sorted, it will return (\\-1 \\- ix) where ix is an insertion point such that the array would still be sorted after the insertion of x at ix\\. If the array is not sorted, \\fBbsearch(x)\\fR will return an integer that is probably of no interest\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'bsearch(0)\\'\n   [0,1]\n=> 0\n\njq \\'bsearch(0)\\'\n   [1,2,3]\n=> \\-1\n\njq \\'bsearch(4) as $ix | if $ix < 0 then \\.[\\-(1+$ix)] = 4 else \\. end\\'\n   [1,2,3]\n=> [1,2,3,4]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"String interpolation: \\e(exp)\"\nInside a string, you can put an expression inside parens after a backslash\\. Whatever the expression returns will be interpolated into the string\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\"The input was \\e(\\.), which is one less than \\e(\\.+1)\"\\'\n   42\n=> \"The input was 42, which is one less than 43\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Convert to/from JSON\"\nThe \\fBtojson\\fR and \\fBfromjson\\fR builtins dump values as JSON texts or parse JSON texts into values, respectively\\. The \\fBtojson\\fR builtin differs from \\fBtostring\\fR in that \\fBtostring\\fR returns strings unmodified, while \\fBtojson\\fR encodes strings as JSON strings\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.[]|tostring]\\'\n   [1, \"foo\", [\"foo\"]]\n=> [\"1\",\"foo\",\"[\\e\"foo\\e\"]\"]\n\njq \\'[\\.[]|tojson]\\'\n   [1, \"foo\", [\"foo\"]]\n=> [\"1\",\"\\e\"foo\\e\"\",\"[\\e\"foo\\e\"]\"]\n\njq \\'[\\.[]|tojson|fromjson]\\'\n   [1, \"foo\", [\"foo\"]]\n=> [1,\"foo\",[\"foo\"]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Format strings and escaping\"\nThe \\fB@foo\\fR syntax is used to format and escape strings, which is useful for building URLs, documents in a language like HTML or XML, and so forth\\. \\fB@foo\\fR can be used as a filter on its own, the possible escapings are:\n.\n.TP\n\\fB@text\\fR:\n.\n.IP\nCalls \\fBtostring\\fR, see that function for details\\.\n.\n.TP\n\\fB@json\\fR:\n.\n.IP\nSerializes the input as JSON\\.\n.\n.TP\n\\fB@html\\fR:\n.\n.IP\nApplies HTML/XML escaping, by mapping the characters \\fB<>&\\'\"\\fR to their entity equivalents \\fB&lt;\\fR, \\fB&gt;\\fR, \\fB&amp;\\fR, \\fB&apos;\\fR, \\fB&quot;\\fR\\.\n.\n.TP\n\\fB@uri\\fR:\n.\n.IP\nApplies percent\\-encoding, by mapping all reserved URI characters to a \\fB%XX\\fR sequence\\.\n.\n.TP\n\\fB@urid\\fR:\n.\n.IP\nThe inverse of \\fB@uri\\fR, applies percent\\-decoding, by mapping all \\fB%XX\\fR sequences to their corresponding URI characters\\.\n.\n.TP\n\\fB@csv\\fR:\n.\n.IP\nThe input must be an array, and it is rendered as CSV with double quotes for strings, and quotes escaped by repetition\\.\n.\n.TP\n\\fB@tsv\\fR:\n.\n.IP\nThe input must be an array, and it is rendered as TSV (tab\\-separated values)\\. Each input array will be printed as a single line\\. Fields are separated by a single tab (ascii \\fB0x09\\fR)\\. Input characters line\\-feed (ascii \\fB0x0a\\fR), carriage\\-return (ascii \\fB0x0d\\fR), tab (ascii \\fB0x09\\fR) and backslash (ascii \\fB0x5c\\fR) will be output as escape sequences \\fB\\en\\fR, \\fB\\er\\fR, \\fB\\et\\fR, \\fB\\e\\e\\fR respectively\\.\n.\n.TP\n\\fB@sh\\fR:\n.\n.IP\nThe input is escaped suitable for use in a command\\-line for a POSIX shell\\. If the input is an array, the output will be a series of space\\-separated strings\\.\n.\n.TP\n\\fB@base64\\fR:\n.\n.IP\nThe input is converted to base64 as specified by RFC 4648\\.\n.\n.TP\n\\fB@base64d\\fR:\n.\n.IP\nThe inverse of \\fB@base64\\fR, input is decoded as specified by RFC 4648\\. Note\\e: If the decoded string is not UTF\\-8, the results are undefined\\.\n.\n.P\nThis syntax can be combined with string interpolation in a useful way\\. You can follow a \\fB@foo\\fR token with a string literal\\. The contents of the string literal will \\fInot\\fR be escaped\\. However, all interpolations made inside that string literal will be escaped\\. For instance,\n.\n.IP \"\" 4\n.\n.nf\n\n@uri \"https://www\\.google\\.com/search?q=\\e(\\.search)\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwill produce the following output for the input \\fB{\"search\":\"what is jq?\"}\\fR:\n.\n.IP \"\" 4\n.\n.nf\n\n\"https://www\\.google\\.com/search?q=what%20is%20jq%3F\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nNote that the slashes, question mark, etc\\. in the URL are not escaped, as they were part of the string literal\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'@html\\'\n   \"This works if x < y\"\n=> \"This works if x &lt; y\"\n\njq \\'@sh \"echo \\e(\\.)\"\\'\n   \"O\\'Hara\\'s Ale\"\n=> \"echo \\'O\\'\\e\\e\\'\\'Hara\\'\\e\\e\\'\\'s Ale\\'\"\n\njq \\'@base64\\'\n   \"This is a message\"\n=> \"VGhpcyBpcyBhIG1lc3NhZ2U=\"\n\njq \\'@base64d\\'\n   \"VGhpcyBpcyBhIG1lc3NhZ2U=\"\n=> \"This is a message\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Dates\"\njq provides some basic date handling functionality, with some high\\-level and low\\-level builtins\\. In all cases these builtins deal exclusively with time in UTC\\.\n.\n.P\nThe \\fBfromdateiso8601\\fR builtin parses datetimes in the ISO 8601 format to a number of seconds since the Unix epoch (1970\\-01\\-01T00:00:00Z)\\. The \\fBtodateiso8601\\fR builtin does the inverse\\.\n.\n.P\nThe \\fBfromdate\\fR builtin parses datetime strings\\. Currently \\fBfromdate\\fR only supports ISO 8601 datetime strings, but in the future it will attempt to parse datetime strings in more formats\\.\n.\n.P\nThe \\fBtodate\\fR builtin is an alias for \\fBtodateiso8601\\fR\\.\n.\n.P\nThe \\fBnow\\fR builtin outputs the current time, in seconds since the Unix epoch\\.\n.\n.P\nLow\\-level jq interfaces to the C\\-library time functions are also provided: \\fBstrptime\\fR, \\fBstrftime\\fR, \\fBstrflocaltime\\fR, \\fBmktime\\fR, \\fBgmtime\\fR, and \\fBlocaltime\\fR\\. Refer to your host operating system\\'s documentation for the format strings used by \\fBstrptime\\fR and \\fBstrftime\\fR\\. Note: these are not necessarily stable interfaces in jq, particularly as to their localization functionality\\.\n.\n.P\nThe \\fBgmtime\\fR builtin consumes a number of seconds since the Unix epoch and outputs a \"broken down time\" representation of Greenwich Mean Time as an array of numbers representing (in this order): the year, the month (zero\\-based), the day of the month (one\\-based), the hour of the day, the minute of the hour, the second of the minute, the day of the week, and the day of the year \\-\\- all one\\-based unless otherwise stated\\. The day of the week number may be wrong on some systems for dates before March 1st 1900, or after December 31 2099\\.\n.\n.P\nThe \\fBlocaltime\\fR builtin works like the \\fBgmtime\\fR builtin, but using the local timezone setting\\.\n.\n.P\nThe \\fBmktime\\fR builtin consumes \"broken down time\" representations of time output by \\fBgmtime\\fR and \\fBstrptime\\fR\\.\n.\n.P\nThe \\fBstrptime(fmt)\\fR builtin parses input strings matching the \\fBfmt\\fR argument\\. The output is in the \"broken down time\" representation consumed by \\fBmktime\\fR and output by \\fBgmtime\\fR\\.\n.\n.P\nThe \\fBstrftime(fmt)\\fR builtin formats a time (GMT) with the given format\\. The \\fBstrflocaltime\\fR does the same, but using the local timezone setting\\.\n.\n.P\nThe format strings for \\fBstrptime\\fR and \\fBstrftime\\fR are described in typical C library documentation\\. The format string for ISO 8601 datetime is \\fB\"%Y\\-%m\\-%dT%H:%M:%SZ\"\\fR\\.\n.\n.P\njq may not support some or all of this date functionality on some systems\\. In particular, the \\fB%u\\fR and \\fB%j\\fR specifiers for \\fBstrptime(fmt)\\fR are not supported on macOS\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'fromdate\\'\n   \"2015\\-03\\-05T23:51:47Z\"\n=> 1425599507\n\njq \\'strptime(\"%Y\\-%m\\-%dT%H:%M:%SZ\")\\'\n   \"2015\\-03\\-05T23:51:47Z\"\n=> [2015,2,5,23,51,47,4,63]\n\njq \\'strptime(\"%Y\\-%m\\-%dT%H:%M:%SZ\")|mktime\\'\n   \"2015\\-03\\-05T23:51:47Z\"\n=> 1425599507\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"SQL\\-Style Operators\"\njq provides a few SQL\\-style operators\\.\n.\n.TP\nINDEX(stream; index_expression):\n.\n.IP\nThis builtin produces an object whose keys are computed by the given index expression applied to each value from the given stream\\.\n.\n.TP\nJOIN($idx; stream; idx_expr; join_expr):\n.\n.IP\nThis builtin joins the values from the given stream to the given index\\. The index\\'s keys are computed by applying the given index expression to each value from the given stream\\. An array of the value in the stream and the corresponding value from the index is fed to the given join expression to produce each result\\.\n.\n.TP\nJOIN($idx; stream; idx_expr):\n.\n.IP\nSame as \\fBJOIN($idx; stream; idx_expr; \\.)\\fR\\.\n.\n.TP\nJOIN($idx; idx_expr):\n.\n.IP\nThis builtin joins the input \\fB\\.\\fR to the given index, applying the given index expression to \\fB\\.\\fR to compute the index key\\. The join operation is as described above\\.\n.\n.TP\nIN(s):\n.\n.IP\nThis builtin outputs \\fBtrue\\fR if \\fB\\.\\fR appears in the given stream, otherwise it outputs \\fBfalse\\fR\\.\n.\n.TP\nIN(source; s):\n.\n.IP\nThis builtin outputs \\fBtrue\\fR if any value in the source stream appears in the second stream, otherwise it outputs \\fBfalse\\fR\\.\n.\n.SS \"builtins\"\nReturns a list of all builtin functions in the format \\fBname/arity\\fR\\. Since functions with the same name but different arities are considered separate functions, \\fBall/0\\fR, \\fBall/1\\fR, and \\fBall/2\\fR would all be present in the list\\.\n.\n.SH \"CONDITIONALS AND COMPARISONS\"\n.\n.SS \"==, !=\"\nThe expression \\'a == b\\' will produce \\'true\\' if the results of evaluating a and b are equal (that is, if they represent equivalent JSON values) and \\'false\\' otherwise\\. In particular, strings are never considered equal to numbers\\. In checking for the equality of JSON objects, the ordering of keys is irrelevant\\. If you\\'re coming from JavaScript, please note that jq\\'s \\fB==\\fR is like JavaScript\\'s \\fB===\\fR, the \"strict equality\" operator\\.\n.\n.P\n!= is \"not equal\", and \\'a != b\\' returns the opposite value of \\'a == b\\'\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\. == false\\'\n   null\n=> false\n\njq \\'\\. == {\"b\": {\"d\": (4 + 1e\\-20), \"c\": 3}, \"a\":1}\\'\n   {\"a\":1, \"b\": {\"c\": 3, \"d\": 4}}\n=> true\n\njq \\'\\.[] == 1\\'\n   [1, 1\\.0, \"1\", \"banana\"]\n=> true, true, false, false\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"if\\-then\\-else\\-end\"\n\\fBif A then B else C end\\fR will act the same as \\fBB\\fR if \\fBA\\fR produces a value other than false or null, but act the same as \\fBC\\fR otherwise\\.\n.\n.P\n\\fBif A then B end\\fR is the same as \\fBif A then B else \\.  end\\fR\\. That is, the \\fBelse\\fR branch is optional, and if absent is the same as \\fB\\.\\fR\\. This also applies to \\fBelif\\fR with absent ending \\fBelse\\fR branch\\.\n.\n.P\nChecking for false or null is a simpler notion of \"truthiness\" than is found in JavaScript or Python, but it means that you\\'ll sometimes have to be more explicit about the condition you want\\. You can\\'t test whether, e\\.g\\. a string is empty using \\fBif \\.name then A else B end\\fR; you\\'ll need something like \\fBif \\.name == \"\" then A else B end\\fR instead\\.\n.\n.P\nIf the condition \\fBA\\fR produces multiple results, then \\fBB\\fR is evaluated once for each result that is not false or null, and \\fBC\\fR is evaluated once for each false or null\\.\n.\n.P\nMore cases can be added to an if using \\fBelif A then B\\fR syntax\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'if \\. == 0 then\n  \"zero\"\nelif \\. == 1 then\n  \"one\"\nelse\n  \"many\"\nend\\'\n   2\n=> \"many\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \">, >=, <=, <\"\nThe comparison operators \\fB>\\fR, \\fB>=\\fR, \\fB<=\\fR, \\fB<\\fR return whether their left argument is greater than, greater than or equal to, less than or equal to or less than their right argument (respectively)\\.\n.\n.P\nThe ordering is the same as that described for \\fBsort\\fR, above\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\. < 5\\'\n   2\n=> true\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"and, or, not\"\njq supports the normal Boolean operators \\fBand\\fR, \\fBor\\fR, \\fBnot\\fR\\. They have the same standard of truth as if expressions \\- \\fBfalse\\fR and \\fBnull\\fR are considered \"false values\", and anything else is a \"true value\"\\.\n.\n.P\nIf an operand of one of these operators produces multiple results, the operator itself will produce a result for each input\\.\n.\n.P\n\\fBnot\\fR is in fact a builtin function rather than an operator, so it is called as a filter to which things can be piped rather than with special syntax, as in \\fB\\.foo and \\.bar | not\\fR\\.\n.\n.P\nThese three only produce the values \\fBtrue\\fR and \\fBfalse\\fR, and so are only useful for genuine Boolean operations, rather than the common Perl/Python/Ruby idiom of \"value_that_may_be_null or default\"\\. If you want to use this form of \"or\", picking between two values rather than evaluating a condition, see the \\fB//\\fR operator below\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'42 and \"a string\"\\'\n   null\n=> true\n\njq \\'(true, false) or false\\'\n   null\n=> true, false\n\njq \\'(true, true) and (true, false)\\'\n   null\n=> true, false, true, false\n\njq \\'[true, false | not]\\'\n   null\n=> [false, true]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Alternative operator: //\"\nThe \\fB//\\fR operator produces all the values of its left\\-hand side that are neither \\fBfalse\\fR nor \\fBnull\\fR\\. If the left\\-hand side produces no values other than \\fBfalse\\fR or \\fBnull\\fR, then \\fB//\\fR produces all the values of its right\\-hand side\\.\n.\n.P\nA filter of the form \\fBa // b\\fR produces all the results of \\fBa\\fR that are not \\fBfalse\\fR or \\fBnull\\fR\\. If \\fBa\\fR produces no results, or no results other than \\fBfalse\\fR or \\fBnull\\fR, then \\fBa // b\\fR produces the results of \\fBb\\fR\\.\n.\n.P\nThis is useful for providing defaults: \\fB\\.foo // 1\\fR will evaluate to \\fB1\\fR if there\\'s no \\fB\\.foo\\fR element in the input\\. It\\'s similar to how \\fBor\\fR is sometimes used in Python (jq\\'s \\fBor\\fR operator is reserved for strictly Boolean operations)\\.\n.\n.P\nNote: \\fBsome_generator // defaults_here\\fR is not the same as \\fBsome_generator | \\. // defaults_here\\fR\\. The latter will produce default values for all non\\-\\fBfalse\\fR, non\\-\\fBnull\\fR values of the left\\-hand side, while the former will not\\. Precedence rules can make this confusing\\. For example, in \\fBfalse, 1 // 2\\fR the left\\-hand side of \\fB//\\fR is \\fB1\\fR, not \\fBfalse, 1\\fR \\-\\- \\fBfalse, 1 // 2\\fR parses the same way as \\fBfalse, (1 // 2)\\fR\\. In \\fB(false, null, 1) | \\. // 42\\fR the left\\-hand side of \\fB//\\fR is \\fB\\.\\fR, which always produces just one value, while in \\fB(false, null, 1) // 42\\fR the left\\-hand side is a generator of three values, and since it produces a value other \\fBfalse\\fR and \\fBnull\\fR, the default \\fB42\\fR is not produced\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'empty // 42\\'\n   null\n=> 42\n\njq \\'\\.foo // 42\\'\n   {\"foo\": 19}\n=> 19\n\njq \\'\\.foo // 42\\'\n   {}\n=> 42\n\njq \\'(false, null, 1) // 42\\'\n   null\n=> 1\n\njq \\'(false, null, 1) | \\. // 42\\'\n   null\n=> 42, 42, 1\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"try\\-catch\"\nErrors can be caught by using \\fBtry EXP catch EXP\\fR\\. The first expression is executed, and if it fails then the second is executed with the error message\\. The output of the handler, if any, is output as if it had been the output of the expression to try\\.\n.\n.P\nThe \\fBtry EXP\\fR form uses \\fBempty\\fR as the exception handler\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'try \\.a catch \"\\. is not an object\"\\'\n   true\n=> \"\\. is not an object\"\n\njq \\'[\\.[]|try \\.a]\\'\n   [{}, true, {\"a\":1}]\n=> [null, 1]\n\njq \\'try error(\"some exception\") catch \\.\\'\n   true\n=> \"some exception\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Breaking out of control structures\"\nA convenient use of try/catch is to break out of control structures like \\fBreduce\\fR, \\fBforeach\\fR, \\fBwhile\\fR, and so on\\.\n.\n.P\nFor example:\n.\n.IP \"\" 4\n.\n.nf\n\n# Repeat an expression until it raises \"break\" as an\n# error, then stop repeating without re\\-raising the error\\.\n# But if the error caught is not \"break\" then re\\-raise it\\.\ntry repeat(exp) catch if \\.==\"break\" then empty else error\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\njq has a syntax for named lexical labels to \"break\" or \"go (back) to\":\n.\n.IP \"\" 4\n.\n.nf\n\nlabel $out | \\.\\.\\. break $out \\.\\.\\.\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe \\fBbreak $label_name\\fR expression will cause the program to act as though the nearest (to the left) \\fBlabel $label_name\\fR produced \\fBempty\\fR\\.\n.\n.P\nThe relationship between the \\fBbreak\\fR and corresponding \\fBlabel\\fR is lexical: the label has to be \"visible\" from the break\\.\n.\n.P\nTo break out of a \\fBreduce\\fR, for example:\n.\n.IP \"\" 4\n.\n.nf\n\nlabel $out | reduce \\.[] as $item (null; if \\.==false then break $out else \\.\\.\\. end)\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe following jq program produces a syntax error:\n.\n.IP \"\" 4\n.\n.nf\n\nbreak $out\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nbecause no label \\fB$out\\fR is visible\\.\n.\n.SS \"Error Suppression / Optional Operator: ?\"\nThe \\fB?\\fR operator, used as \\fBEXP?\\fR, is shorthand for \\fBtry EXP\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[\\.[] | \\.a?]\\'\n   [{}, true, {\"a\":1}]\n=> [null, 1]\n\njq \\'[\\.[] | tonumber?]\\'\n   [\"1\", \"invalid\", \"3\", 4]\n=> [1, 3, 4]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"REGULAR EXPRESSIONS\"\njq uses the Oniguruma regular expression library, as do PHP, TextMate, Sublime Text, etc, so the description here will focus on jq specifics\\.\n\n.\n.P\nOniguruma supports several flavors of regular expression, so it is important to know that jq uses the \"Perl NG\" (Perl with named groups) flavor\\.\n\n.\n.P\nThe jq regex filters are defined so that they can be used using one of these patterns:\n.\n.IP \"\" 4\n.\n.nf\n\nSTRING | FILTER(REGEX)\nSTRING | FILTER(REGEX; FLAGS)\nSTRING | FILTER([REGEX])\nSTRING | FILTER([REGEX, FLAGS])\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwhere:\n.\n.IP \"\\(bu\" 4\nSTRING, REGEX, and FLAGS are jq strings and subject to jq string interpolation;\n.\n.IP \"\\(bu\" 4\nREGEX, after string interpolation, should be a valid regular expression;\n.\n.IP \"\\(bu\" 4\nFILTER is one of \\fBtest\\fR, \\fBmatch\\fR, or \\fBcapture\\fR, as described below\\.\n.\n.IP \"\" 0\n.\n.P\nSince REGEX must evaluate to a JSON string, some characters that are needed to form a regular expression must be escaped\\. For example, the regular expression \\fB\\es\\fR signifying a whitespace character would be written as \\fB\"\\e\\es\"\\fR\\.\n.\n.P\nFLAGS is a string consisting of one of more of the supported flags:\n.\n.IP \"\\(bu\" 4\n\\fBg\\fR \\- Global search (find all matches, not just the first)\n.\n.IP \"\\(bu\" 4\n\\fBi\\fR \\- Case insensitive search\n.\n.IP \"\\(bu\" 4\n\\fBm\\fR \\- Multi line mode (\\fB\\.\\fR will match newlines)\n.\n.IP \"\\(bu\" 4\n\\fBn\\fR \\- Ignore empty matches\n.\n.IP \"\\(bu\" 4\n\\fBp\\fR \\- Both s and m modes are enabled\n.\n.IP \"\\(bu\" 4\n\\fBs\\fR \\- Single line mode (\\fB^\\fR \\-> \\fB\\eA\\fR, \\fB$\\fR \\-> \\fB\\eZ\\fR)\n.\n.IP \"\\(bu\" 4\n\\fBl\\fR \\- Find longest possible matches\n.\n.IP \"\\(bu\" 4\n\\fBx\\fR \\- Extended regex format (ignore whitespace and comments)\n.\n.IP \"\" 0\n.\n.P\nTo match a whitespace with the \\fBx\\fR flag, use \\fB\\es\\fR, e\\.g\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\-n \\'\"a b\" | test(\"a\\e\\esb\"; \"x\")\\'\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nNote that certain flags may also be specified within REGEX, e\\.g\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\-n \\'(\"test\", \"TEst\", \"teST\", \"TEST\") | test(\"(?i)te(?\\-i)st\")\\'\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nevaluates to: \\fBtrue\\fR, \\fBtrue\\fR, \\fBfalse\\fR, \\fBfalse\\fR\\.\n.\n.SS \"test(val), test(regex; flags)\"\nLike \\fBmatch\\fR, but does not return match objects, only \\fBtrue\\fR or \\fBfalse\\fR for whether or not the regex matches the input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'test(\"foo\")\\'\n   \"foo\"\n=> true\n\njq \\'\\.[] | test(\"a b c # spaces are ignored\"; \"ix\")\\'\n   [\"xabcd\", \"ABC\"]\n=> true, true\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"match(val), match(regex; flags)\"\n\\fBmatch\\fR outputs an object for each match it finds\\. Matches have the following fields:\n.\n.IP \"\\(bu\" 4\n\\fBoffset\\fR \\- offset in UTF\\-8 codepoints from the beginning of the input\n.\n.IP \"\\(bu\" 4\n\\fBlength\\fR \\- length in UTF\\-8 codepoints of the match\n.\n.IP \"\\(bu\" 4\n\\fBstring\\fR \\- the string that it matched\n.\n.IP \"\\(bu\" 4\n\\fBcaptures\\fR \\- an array of objects representing capturing groups\\.\n.\n.IP \"\" 0\n.\n.P\nCapturing group objects have the following fields:\n.\n.IP \"\\(bu\" 4\n\\fBoffset\\fR \\- offset in UTF\\-8 codepoints from the beginning of the input\n.\n.IP \"\\(bu\" 4\n\\fBlength\\fR \\- length in UTF\\-8 codepoints of this capturing group\n.\n.IP \"\\(bu\" 4\n\\fBstring\\fR \\- the string that was captured\n.\n.IP \"\\(bu\" 4\n\\fBname\\fR \\- the name of the capturing group (or \\fBnull\\fR if it was unnamed)\n.\n.IP \"\" 0\n.\n.P\nCapturing groups that did not match anything return an offset of \\-1\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'match(\"(abc)+\"; \"g\")\\'\n   \"abc abc\"\n=> {\"offset\": 0, \"length\": 3, \"string\": \"abc\", \"captures\": [{\"offset\": 0, \"length\": 3, \"string\": \"abc\", \"name\": null}]}, {\"offset\": 4, \"length\": 3, \"string\": \"abc\", \"captures\": [{\"offset\": 4, \"length\": 3, \"string\": \"abc\", \"name\": null}]}\n\njq \\'match(\"foo\")\\'\n   \"foo bar foo\"\n=> {\"offset\": 0, \"length\": 3, \"string\": \"foo\", \"captures\": []}\n\njq \\'match([\"foo\", \"ig\"])\\'\n   \"foo bar FOO\"\n=> {\"offset\": 0, \"length\": 3, \"string\": \"foo\", \"captures\": []}, {\"offset\": 8, \"length\": 3, \"string\": \"FOO\", \"captures\": []}\n\njq \\'match(\"foo (?<bar123>bar)? foo\"; \"ig\")\\'\n   \"foo bar foo foo  foo\"\n=> {\"offset\": 0, \"length\": 11, \"string\": \"foo bar foo\", \"captures\": [{\"offset\": 4, \"length\": 3, \"string\": \"bar\", \"name\": \"bar123\"}]}, {\"offset\": 12, \"length\": 8, \"string\": \"foo  foo\", \"captures\": [{\"offset\": \\-1, \"length\": 0, \"string\": null, \"name\": \"bar123\"}]}\n\njq \\'[ match(\"\\.\"; \"g\")] | length\\'\n   \"abc\"\n=> 3\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"capture(val), capture(regex; flags)\"\nCollects the named captures in a JSON object, with the name of each capture as the key, and the matched string as the corresponding value\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'capture(\"(?<a>[a\\-z]+)\\-(?<n>[0\\-9]+)\")\\'\n   \"xyzzy\\-14\"\n=> { \"a\": \"xyzzy\", \"n\": \"14\" }\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"scan(regex), scan(regex; flags)\"\nEmit a stream of the non\\-overlapping substrings of the input that match the regex in accordance with the flags, if any have been specified\\. If there is no match, the stream is empty\\. To capture all the matches for each input string, use the idiom \\fB[ expr ]\\fR, e\\.g\\. \\fB[ scan(regex) ]\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'scan(\"c\")\\'\n   \"abcdefabc\"\n=> \"c\", \"c\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"split(regex; flags)\"\nSplits an input string on each regex match\\.\n.\n.P\nFor backwards compatibility, when called with a single argument, \\fBsplit\\fR splits on a string, not a regex\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'split(\", *\"; null)\\'\n   \"ab,cd, ef\"\n=> [\"ab\",\"cd\",\"ef\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"splits(regex), splits(regex; flags)\"\nThese provide the same results as their \\fBsplit\\fR counterparts, but as a stream instead of an array\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'splits(\", *\")\\'\n   \"ab,cd,   ef, gh\"\n=> \"ab\", \"cd\", \"ef\", \"gh\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"sub(regex; tostring), sub(regex; tostring; flags)\"\nEmit the string obtained by replacing the first match of regex in the input string with \\fBtostring\\fR, after interpolation\\. \\fBtostring\\fR should be a jq string or a stream of such strings, each of which may contain references to named captures\\. The named captures are, in effect, presented as a JSON object (as constructed by \\fBcapture\\fR) to \\fBtostring\\fR, so a reference to a captured variable named \"x\" would take the form: \\fB\"\\e(\\.x)\"\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'sub(\"[^a\\-z]*(?<x>[a\\-z]+)\"; \"Z\\e(\\.x)\"; \"g\")\\'\n   \"123abc456def\"\n=> \"ZabcZdef\"\n\njq \\'[sub(\"(?<a>\\.)\"; \"\\e(\\.a|ascii_upcase)\", \"\\e(\\.a|ascii_downcase)\")]\\'\n   \"aB\"\n=> [\"AB\",\"aB\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"gsub(regex; tostring), gsub(regex; tostring; flags)\"\n\\fBgsub\\fR is like \\fBsub\\fR but all the non\\-overlapping occurrences of the regex are replaced by \\fBtostring\\fR, after interpolation\\. If the second argument is a stream of jq strings, then \\fBgsub\\fR will produce a corresponding stream of JSON strings\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'gsub(\"(?<x>\\.)[^a]*\"; \"+\\e(\\.x)\\-\")\\'\n   \"Abcabc\"\n=> \"+A\\-+a\\-\"\n\njq \\'[gsub(\"p\"; \"a\", \"b\")]\\'\n   \"p\"\n=> [\"a\",\"b\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"ADVANCED FEATURES\"\nVariables are an absolute necessity in most programming languages, but they\\'re relegated to an \"advanced feature\" in jq\\.\n.\n.P\nIn most languages, variables are the only means of passing around data\\. If you calculate a value, and you want to use it more than once, you\\'ll need to store it in a variable\\. To pass a value to another part of the program, you\\'ll need that part of the program to define a variable (as a function parameter, object member, or whatever) in which to place the data\\.\n.\n.P\nIt is also possible to define functions in jq, although this is is a feature whose biggest use is defining jq\\'s standard library (many jq functions such as \\fBmap\\fR and \\fBselect\\fR are in fact written in jq)\\.\n.\n.P\njq has reduction operators, which are very powerful but a bit tricky\\. Again, these are mostly used internally, to define some useful bits of jq\\'s standard library\\.\n.\n.P\nIt may not be obvious at first, but jq is all about generators (yes, as often found in other languages)\\. Some utilities are provided to help deal with generators\\.\n.\n.P\nSome minimal I/O support (besides reading JSON from standard input, and writing JSON to standard output) is available\\.\n.\n.P\nFinally, there is a module/library system\\.\n.\n.SS \"Variable / Symbolic Binding Operator: \\.\\.\\. as $identifier | \\.\\.\\.\"\nIn jq, all filters have an input and an output, so manual plumbing is not necessary to pass a value from one part of a program to the next\\. Many expressions, for instance \\fBa + b\\fR, pass their input to two distinct subexpressions (here \\fBa\\fR and \\fBb\\fR are both passed the same input), so variables aren\\'t usually necessary in order to use a value twice\\.\n.\n.P\nFor instance, calculating the average value of an array of numbers requires a few variables in most languages \\- at least one to hold the array, perhaps one for each element or for a loop counter\\. In jq, it\\'s simply \\fBadd / length\\fR \\- the \\fBadd\\fR expression is given the array and produces its sum, and the \\fBlength\\fR expression is given the array and produces its length\\.\n.\n.P\nSo, there\\'s generally a cleaner way to solve most problems in jq than defining variables\\. Still, sometimes they do make things easier, so jq lets you define variables using \\fBexpression as $variable\\fR\\. All variable names start with \\fB$\\fR\\. Here\\'s a slightly uglier version of the array\\-averaging example:\n.\n.IP \"\" 4\n.\n.nf\n\nlength as $array_length | add / $array_length\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWe\\'ll need a more complicated problem to find a situation where using variables actually makes our lives easier\\.\n.\n.P\nSuppose we have an array of blog posts, with \"author\" and \"title\" fields, and another object which is used to map author usernames to real names\\. Our input looks like:\n.\n.IP \"\" 4\n.\n.nf\n\n{\"posts\": [{\"title\": \"First post\", \"author\": \"anon\"},\n           {\"title\": \"A well\\-written article\", \"author\": \"person1\"}],\n \"realnames\": {\"anon\": \"Anonymous Coward\",\n               \"person1\": \"Person McPherson\"}}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWe want to produce the posts with the author field containing a real name, as in:\n.\n.IP \"\" 4\n.\n.nf\n\n{\"title\": \"First post\", \"author\": \"Anonymous Coward\"}\n{\"title\": \"A well\\-written article\", \"author\": \"Person McPherson\"}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWe use a variable, $names, to store the realnames object, so that we can refer to it later when looking up author usernames:\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.realnames as $names | \\.posts[] | {title, author: $names[\\.author]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe expression \\fBexp as $x | \\.\\.\\.\\fR means: for each value of expression \\fBexp\\fR, run the rest of the pipeline with the entire original input, and with \\fB$x\\fR set to that value\\. Thus \\fBas\\fR functions as something of a foreach loop\\.\n.\n.P\nJust as \\fB{foo}\\fR is a handy way of writing \\fB{foo: \\.foo}\\fR, so \\fB{$foo}\\fR is a handy way of writing \\fB{foo: $foo}\\fR\\.\n.\n.P\nMultiple variables may be declared using a single \\fBas\\fR expression by providing a pattern that matches the structure of the input (this is known as \"destructuring\"):\n.\n.IP \"\" 4\n.\n.nf\n\n\\&. as {realnames: $names, posts: [$first, $second]} | \\.\\.\\.\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe variable declarations in array patterns (e\\.g\\., \\fB\\. as [$first, $second]\\fR) bind to the elements of the array in from the element at index zero on up, in order\\. When there is no value at the index for an array pattern element, \\fBnull\\fR is bound to that variable\\.\n.\n.P\nVariables are scoped over the rest of the expression that defines them, so\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.realnames as $names | (\\.posts[] | {title, author: $names[\\.author]})\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwill work, but\n.\n.IP \"\" 4\n.\n.nf\n\n(\\.realnames as $names | \\.posts[]) | {title, author: $names[\\.author]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwon\\'t\\.\n.\n.P\nFor programming language theorists, it\\'s more accurate to say that jq variables are lexically\\-scoped bindings\\. In particular there\\'s no way to change the value of a binding; one can only setup a new binding with the same name, but which will not be visible where the old one was\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.bar as $x | \\.foo | \\. + $x\\'\n   {\"foo\":10, \"bar\":200}\n=> 210\n\njq \\'\\. as $i|[(\\.*2|\\. as $i| $i), $i]\\'\n   5\n=> [10,5]\n\njq \\'\\. as [$a, $b, {c: $c}] | $a + $b + $c\\'\n   [2, 3, {\"c\": 4, \"d\": 5}]\n=> 9\n\njq \\'\\.[] as [$a, $b] | {a: $a, b: $b}\\'\n   [[0], [0, 1], [2, 1, 0]]\n=> {\"a\":0,\"b\":null}, {\"a\":0,\"b\":1}, {\"a\":2,\"b\":1}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Destructuring Alternative Operator: ?//\"\nThe destructuring alternative operator provides a concise mechanism for destructuring an input that can take one of several forms\\.\n.\n.P\nSuppose we have an API that returns a list of resources and events associated with them, and we want to get the user_id and timestamp of the first event for each resource\\. The API (having been clumsily converted from XML) will only wrap the events in an array if the resource has multiple events:\n.\n.IP \"\" 4\n.\n.nf\n\n{\"resources\": [{\"id\": 1, \"kind\": \"widget\", \"events\": {\"action\": \"create\", \"user_id\": 1, \"ts\": 13}},\n               {\"id\": 2, \"kind\": \"widget\", \"events\": [{\"action\": \"create\", \"user_id\": 1, \"ts\": 14}, {\"action\": \"destroy\", \"user_id\": 1, \"ts\": 15}]}]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWe can use the destructuring alternative operator to handle this structural change simply:\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.resources[] as {$id, $kind, events: {$user_id, $ts}} ?// {$id, $kind, events: [{$user_id, $ts}]} | {$user_id, $kind, $id, $ts}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nOr, if we aren\\'t sure if the input is an array of values or an object:\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.[] as [$id, $kind, $user_id, $ts] ?// {$id, $kind, $user_id, $ts} | \\.\\.\\.\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nEach alternative need not define all of the same variables, but all named variables will be available to the subsequent expression\\. Variables not matched in the alternative that succeeded will be \\fBnull\\fR:\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.resources[] as {$id, $kind, events: {$user_id, $ts}} ?// {$id, $kind, events: [{$first_user_id, $first_ts}]} | {$user_id, $first_user_id, $kind, $id, $ts, $first_ts}\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nAdditionally, if the subsequent expression returns an error, the alternative operator will attempt to try the next binding\\. Errors that occur during the final alternative are passed through\\.\n.\n.IP \"\" 4\n.\n.nf\n\n[[3]] | \\.[] as [$a] ?// [$b] | if $a != null then error(\"err: \\e($a)\") else {$a,$b} end\n\njq \\'\\.[] as {$a, $b, c: {$d, $e}} ?// {$a, $b, c: [{$d, $e}]} | {$a, $b, $d, $e}\\'\n   [{\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": 4}}, {\"a\": 1, \"b\": 2, \"c\": [{\"d\": 3, \"e\": 4}]}]\n=> {\"a\":1,\"b\":2,\"d\":3,\"e\":4}, {\"a\":1,\"b\":2,\"d\":3,\"e\":4}\n\njq \\'\\.[] as {$a, $b, c: {$d}} ?// {$a, $b, c: [{$e}]} | {$a, $b, $d, $e}\\'\n   [{\"a\": 1, \"b\": 2, \"c\": {\"d\": 3, \"e\": 4}}, {\"a\": 1, \"b\": 2, \"c\": [{\"d\": 3, \"e\": 4}]}]\n=> {\"a\":1,\"b\":2,\"d\":3,\"e\":null}, {\"a\":1,\"b\":2,\"d\":null,\"e\":4}\n\njq \\'\\.[] as [$a] ?// [$b] | if $a != null then error(\"err: \\e($a)\") else {$a,$b} end\\'\n   [[3]]\n=> {\"a\":null,\"b\":3}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Defining Functions\"\nYou can give a filter a name using \"def\" syntax:\n.\n.IP \"\" 4\n.\n.nf\n\ndef increment: \\. + 1;\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nFrom then on, \\fBincrement\\fR is usable as a filter just like a builtin function (in fact, this is how many of the builtins are defined)\\. A function may take arguments:\n.\n.IP \"\" 4\n.\n.nf\n\ndef map(f): [\\.[] | f];\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nArguments are passed as \\fIfilters\\fR (functions with no arguments), \\fInot\\fR as values\\. The same argument may be referenced multiple times with different inputs (here \\fBf\\fR is run for each element of the input array)\\. Arguments to a function work more like callbacks than like value arguments\\. This is important to understand\\. Consider:\n.\n.IP \"\" 4\n.\n.nf\n\ndef foo(f): f|f;\n5|foo(\\.*2)\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe result will be 20 because \\fBf\\fR is \\fB\\.*2\\fR, and during the first invocation of \\fBf\\fR \\fB\\.\\fR will be 5, and the second time it will be 10 (5 * 2), so the result will be 20\\. Function arguments are filters, and filters expect an input when invoked\\.\n.\n.P\nIf you want the value\\-argument behaviour for defining simple functions, you can just use a variable:\n.\n.IP \"\" 4\n.\n.nf\n\ndef addvalue(f): f as $f | map(\\. + $f);\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nOr use the short\\-hand:\n.\n.IP \"\" 4\n.\n.nf\n\ndef addvalue($f): \\.\\.\\.;\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWith either definition, \\fBaddvalue(\\.foo)\\fR will add the current input\\'s \\fB\\.foo\\fR field to each element of the array\\. Do note that calling \\fBaddvalue(\\.[])\\fR will cause the \\fBmap(\\. + $f)\\fR part to be evaluated once per value in the value of \\fB\\.\\fR at the call site\\.\n.\n.P\nMultiple definitions using the same function name are allowed\\. Each re\\-definition replaces the previous one for the same number of function arguments, but only for references from functions (or main program) subsequent to the re\\-definition\\. See also the section below on scoping\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'def addvalue(f): \\. + [f]; map(addvalue(\\.[0]))\\'\n   [[1,2],[10,20]]\n=> [[1,2,1], [10,20,10]]\n\njq \\'def addvalue(f): f as $x | map(\\. + $x); addvalue(\\.[0])\\'\n   [[1,2],[10,20]]\n=> [[1,2,1,2], [10,20,1,2]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Scoping\"\nThere are two types of symbols in jq: value bindings (a\\.k\\.a\\., \"variables\"), and functions\\. Both are scoped lexically, with expressions being able to refer only to symbols that have been defined \"to the left\" of them\\. The only exception to this rule is that functions can refer to themselves so as to be able to create recursive functions\\.\n.\n.P\nFor example, in the following expression there is a binding which is visible \"to the right\" of it, \\fB\\.\\.\\. | \\.*3 as $times_three | [\\. + $times_three] | \\.\\.\\.\\fR, but not \"to the left\"\\. Consider this expression now, \\fB\\.\\.\\. | (\\.*3 as $times_three | [\\. + $times_three]) | \\.\\.\\.\\fR: here the binding \\fB$times_three\\fR is \\fInot\\fR visible past the closing parenthesis\\.\n.\n.SS \"isempty(exp)\"\nReturns true if \\fBexp\\fR produces no outputs, false otherwise\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'isempty(empty)\\'\n   null\n=> true\n\njq \\'isempty(\\.[])\\'\n   []\n=> true\n\njq \\'isempty(\\.[])\\'\n   [1,2,3]\n=> false\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"limit(n; expr)\"\nThe \\fBlimit\\fR function extracts up to \\fBn\\fR outputs from \\fBexpr\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[limit(3; \\.[])]\\'\n   [0,1,2,3,4,5,6,7,8,9]\n=> [0,1,2]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"skip(n; expr)\"\nThe \\fBskip\\fR function skips the first \\fBn\\fR outputs from \\fBexpr\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[skip(3; \\.[])]\\'\n   [0,1,2,3,4,5,6,7,8,9]\n=> [3,4,5,6,7,8,9]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"first(expr), last(expr), nth(n; expr)\"\nThe \\fBfirst(expr)\\fR and \\fBlast(expr)\\fR functions extract the first and last values from \\fBexpr\\fR, respectively\\.\n.\n.P\nThe \\fBnth(n; expr)\\fR function extracts the nth value output by \\fBexpr\\fR\\. Note that \\fBnth(n; expr)\\fR doesn\\'t support negative values of \\fBn\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[first(range(\\.)), last(range(\\.)), nth(5; range(\\.))]\\'\n   10\n=> [0,9,5]\n\njq \\'[first(empty), last(empty), nth(5; empty)]\\'\n   null\n=> []\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"first, last, nth(n)\"\nThe \\fBfirst\\fR and \\fBlast\\fR functions extract the first and last values from any array at \\fB\\.\\fR\\.\n.\n.P\nThe \\fBnth(n)\\fR function extracts the nth value of any array at \\fB\\.\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'[range(\\.)]|[first, last, nth(5)]\\'\n   10\n=> [0,9,5]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"reduce\"\nThe \\fBreduce\\fR syntax allows you to combine all of the results of an expression by accumulating them into a single answer\\. The form is \\fBreduce EXP as $var (INIT; UPDATE)\\fR\\. As an example, we\\'ll pass \\fB[1,2,3]\\fR to this expression:\n.\n.IP \"\" 4\n.\n.nf\n\nreduce \\.[] as $item (0; \\. + $item)\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nFor each result that \\fB\\.[]\\fR produces, \\fB\\. + $item\\fR is run to accumulate a running total, starting from 0 as the input value\\. In this example, \\fB\\.[]\\fR produces the results \\fB1\\fR, \\fB2\\fR, and \\fB3\\fR, so the effect is similar to running something like this:\n.\n.IP \"\" 4\n.\n.nf\n\n0 | 1 as $item | \\. + $item |\n    2 as $item | \\. + $item |\n    3 as $item | \\. + $item\n\njq \\'reduce \\.[] as $item (0; \\. + $item)\\'\n   [1,2,3,4,5]\n=> 15\n\njq \\'reduce \\.[] as [$i,$j] (0; \\. + $i * $j)\\'\n   [[1,2],[3,4],[5,6]]\n=> 44\n\njq \\'reduce \\.[] as {$x,$y} (null; \\.x += $x | \\.y += [$y])\\'\n   [{\"x\":\"a\",\"y\":1},{\"x\":\"b\",\"y\":2},{\"x\":\"c\",\"y\":3}]\n=> {\"x\":\"abc\",\"y\":[1,2,3]}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"foreach\"\nThe \\fBforeach\\fR syntax is similar to \\fBreduce\\fR, but intended to allow the construction of \\fBlimit\\fR and reducers that produce intermediate results\\.\n.\n.P\nThe form is \\fBforeach EXP as $var (INIT; UPDATE; EXTRACT)\\fR\\. As an example, we\\'ll pass \\fB[1,2,3]\\fR to this expression:\n.\n.IP \"\" 4\n.\n.nf\n\nforeach \\.[] as $item (0; \\. + $item; [$item, \\. * 2])\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nLike the \\fBreduce\\fR syntax, \\fB\\. + $item\\fR is run for each result that \\fB\\.[]\\fR produces, but \\fB[$item, \\. * 2]\\fR is run for each intermediate values\\. In this example, since the intermediate values are \\fB1\\fR, \\fB3\\fR, and \\fB6\\fR, the \\fBforeach\\fR expression produces \\fB[1,2]\\fR, \\fB[2,6]\\fR, and \\fB[3,12]\\fR\\. So the effect is similar to running something like this:\n.\n.IP \"\" 4\n.\n.nf\n\n0 | 1 as $item | \\. + $item | [$item, \\. * 2],\n    2 as $item | \\. + $item | [$item, \\. * 2],\n    3 as $item | \\. + $item | [$item, \\. * 2]\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWhen \\fBEXTRACT\\fR is omitted, the identity filter is used\\. That is, it outputs the intermediate values as they are\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'foreach \\.[] as $item (0; \\. + $item)\\'\n   [1,2,3,4,5]\n=> 1, 3, 6, 10, 15\n\njq \\'foreach \\.[] as $item (0; \\. + $item; [$item, \\. * 2])\\'\n   [1,2,3,4,5]\n=> [1,2], [2,6], [3,12], [4,20], [5,30]\n\njq \\'foreach \\.[] as $item (0; \\. + 1; {index: \\., $item})\\'\n   [\"foo\", \"bar\", \"baz\"]\n=> {\"index\":1,\"item\":\"foo\"}, {\"index\":2,\"item\":\"bar\"}, {\"index\":3,\"item\":\"baz\"}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Recursion\"\nAs described above, \\fBrecurse\\fR uses recursion, and any jq function can be recursive\\. The \\fBwhile\\fR builtin is also implemented in terms of recursion\\.\n.\n.P\nTail calls are optimized whenever the expression to the left of the recursive call outputs its last value\\. In practice this means that the expression to the left of the recursive call should not produce more than one output for each input\\.\n.\n.P\nFor example:\n.\n.IP \"\" 4\n.\n.nf\n\ndef recurse(f): def r: \\., (f | select(\\. != null) | r); r;\n\ndef while(cond; update):\n  def _while:\n    if cond then \\., (update | _while) else empty end;\n  _while;\n\ndef repeat(exp):\n  def _repeat:\n    exp, _repeat;\n  _repeat;\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Generators and iterators\"\nSome jq operators and functions are actually generators in that they can produce zero, one, or more values for each input, just as one might expect in other programming languages that have generators\\. For example, \\fB\\.[]\\fR generates all the values in its input (which must be an array or an object), \\fBrange(0; 10)\\fR generates the integers between 0 and 10, and so on\\.\n.\n.P\nEven the comma operator is a generator, generating first the values generated by the expression to the left of the comma, then the values generated by the expression on the right of the comma\\.\n.\n.P\nThe \\fBempty\\fR builtin is the generator that produces zero outputs\\. The \\fBempty\\fR builtin backtracks to the preceding generator expression\\.\n.\n.P\nAll jq functions can be generators just by using builtin generators\\. It is also possible to construct new generators using only recursion and the comma operator\\. If recursive calls are \"in tail position\" then the generator will be efficient\\. In the example below the recursive call by \\fB_range\\fR to itself is in tail position\\. The example shows off three advanced topics: tail recursion, generator construction, and sub\\-functions\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'def range(init; upto; by): def _range: if (by > 0 and \\. < upto) or (by < 0 and \\. > upto) then \\., ((\\.+by)|_range) else \\. end; if by == 0 then init else init|_range end | select((by > 0 and \\. < upto) or (by < 0 and \\. > upto)); range(0; 10; 3)\\'\n   null\n=> 0, 3, 6, 9\n\njq \\'def while(cond; update): def _while: if cond then \\., (update | _while) else empty end; _while; [while(\\.<100; \\.*2)]\\'\n   1\n=> [1,2,4,8,16,32,64]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"MATH\"\njq currently only has IEEE754 double\\-precision (64\\-bit) floating point number support\\.\n.\n.P\nBesides simple arithmetic operators such as \\fB+\\fR, jq also has most standard math functions from the C math library\\. C math functions that take a single input argument (e\\.g\\., \\fBsin()\\fR) are available as zero\\-argument jq functions\\. C math functions that take two input arguments (e\\.g\\., \\fBpow()\\fR) are available as two\\-argument jq functions that ignore \\fB\\.\\fR\\. C math functions that take three input arguments are available as three\\-argument jq functions that ignore \\fB\\.\\fR\\.\n.\n.P\nAvailability of standard math functions depends on the availability of the corresponding math functions in your operating system and C math library\\. Unavailable math functions will be defined but will raise an error\\.\n.\n.P\nOne\\-input C math functions: \\fBacos\\fR \\fBacosh\\fR \\fBasin\\fR \\fBasinh\\fR \\fBatan\\fR \\fBatanh\\fR \\fBcbrt\\fR \\fBceil\\fR \\fBcos\\fR \\fBcosh\\fR \\fBerf\\fR \\fBerfc\\fR \\fBexp\\fR \\fBexp10\\fR \\fBexp2\\fR \\fBexpm1\\fR \\fBfabs\\fR \\fBfloor\\fR \\fBgamma\\fR \\fBj0\\fR \\fBj1\\fR \\fBlgamma\\fR \\fBlog\\fR \\fBlog10\\fR \\fBlog1p\\fR \\fBlog2\\fR \\fBlogb\\fR \\fBnearbyint\\fR \\fBrint\\fR \\fBround\\fR \\fBsignificand\\fR \\fBsin\\fR \\fBsinh\\fR \\fBsqrt\\fR \\fBtan\\fR \\fBtanh\\fR \\fBtgamma\\fR \\fBtrunc\\fR \\fBy0\\fR \\fBy1\\fR\\.\n.\n.P\nTwo\\-input C math functions: \\fBatan2\\fR \\fBcopysign\\fR \\fBdrem\\fR \\fBfdim\\fR \\fBfmax\\fR \\fBfmin\\fR \\fBfmod\\fR \\fBfrexp\\fR \\fBhypot\\fR \\fBjn\\fR \\fBldexp\\fR \\fBmodf\\fR \\fBnextafter\\fR \\fBnexttoward\\fR \\fBpow\\fR \\fBremainder\\fR \\fBscalb\\fR \\fBscalbln\\fR \\fByn\\fR\\.\n.\n.P\nThree\\-input C math functions: \\fBfma\\fR\\.\n.\n.P\nSee your system\\'s manual for more information on each of these\\.\n.\n.SH \"I/O\"\nAt this time jq has minimal support for I/O, mostly in the form of control over when inputs are read\\. Two builtins functions are provided for this, \\fBinput\\fR and \\fBinputs\\fR, that read from the same sources (e\\.g\\., \\fBstdin\\fR, files named on the command\\-line) as jq itself\\. These two builtins, and jq\\'s own reading actions, can be interleaved with each other\\. They are commonly used in combination with the null input option \\fB\\-n\\fR to prevent one input from being read implicitly\\.\n.\n.P\nTwo builtins provide minimal output capabilities, \\fBdebug\\fR, and \\fBstderr\\fR\\. (Recall that a jq program\\'s output values are always output as JSON texts on \\fBstdout\\fR\\.) The \\fBdebug\\fR builtin can have application\\-specific behavior, such as for executables that use the libjq C API but aren\\'t the jq executable itself\\. The \\fBstderr\\fR builtin outputs its input in raw mode to stder with no additional decoration, not even a newline\\.\n.\n.P\nMost jq builtins are referentially transparent, and yield constant and repeatable value streams when applied to constant inputs\\. This is not true of I/O builtins\\.\n.\n.SS \"input\"\nOutputs one new input\\.\n.\n.P\nNote that when using \\fBinput\\fR it is generally be necessary to invoke jq with the \\fB\\-n\\fR command\\-line option, otherwise the first entity will be lost\\.\n.\n.IP \"\" 4\n.\n.nf\n\necho 1 2 3 4 | jq \\'[\\., input]\\' # [1,2] [3,4]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"inputs\"\nOutputs all remaining inputs, one by one\\.\n.\n.P\nThis is primarily useful for reductions over a program\\'s inputs\\. Note that when using \\fBinputs\\fR it is generally necessary to invoke jq with the \\fB\\-n\\fR command\\-line option, otherwise the first entity will be lost\\.\n.\n.IP \"\" 4\n.\n.nf\n\necho 1 2 3 | jq \\-n \\'reduce inputs as $i (0; \\. + $i)\\' # 6\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"debug, debug(msgs)\"\nThese two filters are like \\fB\\.\\fR but have as a side\\-effect the production of one or more messages on stderr\\.\n.\n.P\nThe message produced by the \\fBdebug\\fR filter has the form\n.\n.IP \"\" 4\n.\n.nf\n\n[\"DEBUG:\",<input\\-value>]\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwhere \\fB<input\\-value>\\fR is a compact rendition of the input value\\. This format may change in the future\\.\n.\n.P\nThe \\fBdebug(msgs)\\fR filter is defined as \\fB(msgs | debug | empty), \\.\\fR thus allowing great flexibility in the content of the message, while also allowing multi\\-line debugging statements to be created\\.\n.\n.P\nFor example, the expression:\n.\n.IP \"\" 4\n.\n.nf\n\n1 as $x | 2 | debug(\"Entering function foo with $x == \\e($x)\", \\.) | (\\.+1)\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nwould produce the value 3 but with the following two lines being written to stderr:\n.\n.IP \"\" 4\n.\n.nf\n\n[\"DEBUG:\",\"Entering function foo with $x == 1\"]\n[\"DEBUG:\",2]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"stderr\"\nPrints its input in raw and compact mode to stderr with no additional decoration, not even a newline\\.\n.\n.SS \"input_filename\"\nReturns the name of the file whose input is currently being filtered\\. Note that this will not work well unless jq is running in a UTF\\-8 locale\\.\n.\n.SS \"input_line_number\"\nReturns the line number of the input currently being filtered\\.\n.\n.SH \"STREAMING\"\nWith the \\fB\\-\\-stream\\fR option jq can parse input texts in a streaming fashion, allowing jq programs to start processing large JSON texts immediately rather than after the parse completes\\. If you have a single JSON text that is 1GB in size, streaming it will allow you to process it much more quickly\\.\n.\n.P\nHowever, streaming isn\\'t easy to deal with as the jq program will have \\fB[<path>, <leaf\\-value>]\\fR (and a few other forms) as inputs\\.\n.\n.P\nSeveral builtins are provided to make handling streams easier\\.\n.\n.P\nThe examples below use the streamed form of \\fB[0,[1]]\\fR, which is \\fB[[0],0],[[1,0],1],[[1,0]],[[1]]\\fR\\.\n.\n.P\nStreaming forms include \\fB[<path>, <leaf\\-value>]\\fR (to indicate any scalar value, empty array, or empty object), and \\fB[<path>]\\fR (to indicate the end of an array or object)\\. Future versions of jq run with \\fB\\-\\-stream\\fR and \\fB\\-\\-seq\\fR may output additional forms such as \\fB[\"error message\"]\\fR when an input text fails to parse\\.\n.\n.SS \"truncate_stream(stream_expression)\"\nConsumes a number as input and truncates the corresponding number of path elements from the left of the outputs of the given streaming expression\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'truncate_stream([[0],1],[[1,0],2],[[1,0]],[[1]])\\'\n   1\n=> [[0],2], [[0]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"fromstream(stream_expression)\"\nOutputs values corresponding to the stream expression\\'s outputs\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'fromstream(1|truncate_stream([[0],1],[[1,0],2],[[1,0]],[[1]]))\\'\n   null\n=> [2]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"tostream\"\nThe \\fBtostream\\fR builtin outputs the streamed form of its input\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\. as $dot|fromstream($dot|tostream)|\\.==$dot\\'\n   [0,[1,{\"a\":1},{\"b\":2}]]\n=> true\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"ASSIGNMENT\"\nAssignment works a little differently in jq than in most programming languages\\. jq doesn\\'t distinguish between references to and copies of something \\- two objects or arrays are either equal or not equal, without any further notion of being \"the same object\" or \"not the same object\"\\.\n.\n.P\nIf an object has two fields which are arrays, \\fB\\.foo\\fR and \\fB\\.bar\\fR, and you append something to \\fB\\.foo\\fR, then \\fB\\.bar\\fR will not get bigger, even if you\\'ve previously set \\fB\\.bar = \\.foo\\fR\\. If you\\'re used to programming in languages like Python, Java, Ruby, JavaScript, etc\\. then you can think of it as though jq does a full deep copy of every object before it does the assignment (for performance it doesn\\'t actually do that, but that\\'s the general idea)\\.\n.\n.P\nThis means that it\\'s impossible to build circular values in jq (such as an array whose first element is itself)\\. This is quite intentional, and ensures that anything a jq program can produce can be represented in JSON\\.\n.\n.P\nAll the assignment operators in jq have path expressions on the left\\-hand side (LHS)\\. The right\\-hand side (RHS) provides values to set to the paths named by the LHS path expressions\\.\n.\n.P\nValues in jq are always immutable\\. Internally, assignment works by using a reduction to compute new, replacement values for \\fB\\.\\fR that have had all the desired assignments applied to \\fB\\.\\fR, then outputting the modified value\\. This might be made clear by this example: \\fB{a:{b:{c:1}}} | (\\.a\\.b|=3), \\.\\fR\\. This will output \\fB{\"a\":{\"b\":3}}\\fR and \\fB{\"a\":{\"b\":{\"c\":1}}}\\fR because the last sub\\-expression, \\fB\\.\\fR, sees the original value, not the modified value\\.\n.\n.P\nMost users will want to use modification assignment operators, such as \\fB|=\\fR or \\fB+=\\fR, rather than \\fB=\\fR\\.\n.\n.P\nNote that the LHS of assignment operators refers to a value in \\fB\\.\\fR\\. Thus \\fB$var\\.foo = 1\\fR won\\'t work as expected (\\fB$var\\.foo\\fR is not a valid or useful path expression in \\fB\\.\\fR); use \\fB$var | \\.foo = 1\\fR instead\\.\n.\n.P\nNote too that \\fB\\.a,\\.b=0\\fR does not set \\fB\\.a\\fR and \\fB\\.b\\fR, but \\fB(\\.a,\\.b)=0\\fR sets both\\.\n.\n.SS \"Update\\-assignment: |=\"\nThis is the \"update\" operator \\fB|=\\fR\\. It takes a filter on the right\\-hand side and works out the new value for the property of \\fB\\.\\fR being assigned to by running the old value through this expression\\. For instance, \\fB(\\.foo, \\.bar) |= \\.+1\\fR will build an object with the \\fBfoo\\fR field set to the input\\'s \\fBfoo\\fR plus 1, and the \\fBbar\\fR field set to the input\\'s \\fBbar\\fR plus 1\\.\n.\n.P\nThe left\\-hand side can be any general path expression; see \\fBpath()\\fR\\.\n.\n.P\nNote that the left\\-hand side of \\fB|=\\fR refers to a value in \\fB\\.\\fR\\. Thus \\fB$var\\.foo |= \\. + 1\\fR won\\'t work as expected (\\fB$var\\.foo\\fR is not a valid or useful path expression in \\fB\\.\\fR); use \\fB$var | \\.foo |= \\. + 1\\fR instead\\.\n.\n.P\nIf the right\\-hand side outputs no values (i\\.e\\., \\fBempty\\fR), then the left\\-hand side path will be deleted, as with \\fBdel(path)\\fR\\.\n.\n.P\nIf the right\\-hand side outputs multiple values, only the first one will be used (COMPATIBILITY NOTE: in jq 1\\.5 and earlier releases, it used to be that only the last one was used)\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'(\\.\\.|select(type==\"boolean\")) |= if \\. then 1 else 0 end\\'\n   [true,false,[5,true,[true,[false]],false]]\n=> [1,0,[5,1,[1,[0]],0]]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Arithmetic update\\-assignment: +=, \\-=, *=, /=, %=, //=\"\njq has a few operators of the form \\fBa op= b\\fR, which are all equivalent to \\fBa |= \\. op b\\fR\\. So, \\fB+= 1\\fR can be used to increment values, being the same as \\fB|= \\. + 1\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.foo += 1\\'\n   {\"foo\": 42}\n=> {\"foo\": 43}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Plain assignment: =\"\nThis is the plain assignment operator\\. Unlike the others, the input to the right\\-hand side (RHS) is the same as the input to the left\\-hand side (LHS) rather than the value at the LHS path, and all values output by the RHS will be used (as shown below)\\.\n.\n.P\nIf the RHS of \\fB=\\fR produces multiple values, then for each such value jq will set the paths on the left\\-hand side to the value and then it will output the modified \\fB\\.\\fR\\. For example, \\fB(\\.a,\\.b) = range(2)\\fR outputs \\fB{\"a\":0,\"b\":0}\\fR, then \\fB{\"a\":1,\"b\":1}\\fR\\. The \"update\" assignment forms (see above) do not do this\\.\n.\n.P\nThis example should show the difference between \\fB=\\fR and \\fB|=\\fR:\n.\n.P\nProvide input \\fB{\"a\": {\"b\": 10}, \"b\": 20}\\fR to the programs\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.a = \\.b\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nand\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.a |= \\.b\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe former will set the \\fBa\\fR field of the input to the \\fBb\\fR field of the input, and produce the output \\fB{\"a\": 20, \"b\": 20}\\fR\\. The latter will set the \\fBa\\fR field of the input to the \\fBa\\fR field\\'s \\fBb\\fR field, producing \\fB{\"a\": 10, \"b\": 20}\\fR\\.\n.\n.IP \"\" 4\n.\n.nf\n\njq \\'\\.a = \\.b\\'\n   {\"a\": {\"b\": 10}, \"b\": 20}\n=> {\"a\":20,\"b\":20}\n\njq \\'\\.a |= \\.b\\'\n   {\"a\": {\"b\": 10}, \"b\": 20}\n=> {\"a\":10,\"b\":20}\n\njq \\'(\\.a, \\.b) = range(3)\\'\n   null\n=> {\"a\":0,\"b\":0}, {\"a\":1,\"b\":1}, {\"a\":2,\"b\":2}\n\njq \\'(\\.a, \\.b) |= range(3)\\'\n   null\n=> {\"a\":0,\"b\":0}\n.\n.fi\n.\n.IP \"\" 0\n.\n.SS \"Complex assignments\"\nLots more things are allowed on the left\\-hand side of a jq assignment than in most languages\\. We\\'ve already seen simple field accesses on the left hand side, and it\\'s no surprise that array accesses work just as well:\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.posts[0]\\.title = \"JQ Manual\"\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nWhat may come as a surprise is that the expression on the left may produce multiple results, referring to different points in the input document:\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.posts[]\\.comments |= \\. + [\"this is great\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThat example appends the string \"this is great\" to the \"comments\" array of each post in the input (where the input is an object with a field \"posts\" which is an array of posts)\\.\n.\n.P\nWhen jq encounters an assignment like \\'a = b\\', it records the \"path\" taken to select a part of the input document while executing a\\. This path is then used to find which part of the input to change while executing the assignment\\. Any filter may be used on the left\\-hand side of an equals \\- whichever paths it selects from the input will be where the assignment is performed\\.\n.\n.P\nThis is a very powerful operation\\. Suppose we wanted to add a comment to blog posts, using the same \"blog\" input above\\. This time, we only want to comment on the posts written by \"stedolan\"\\. We can find those posts using the \"select\" function described earlier:\n.\n.IP \"\" 4\n.\n.nf\n\n\\&.posts[] | select(\\.author == \"stedolan\")\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe paths provided by this operation point to each of the posts that \"stedolan\" wrote, and we can comment on each of them in the same way that we did before:\n.\n.IP \"\" 4\n.\n.nf\n\n(\\.posts[] | select(\\.author == \"stedolan\") | \\.comments) |=\n    \\. + [\"terrible\\.\"]\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"COMMENTS\"\nYou can write comments in your jq filters using \\fB#\\fR\\.\n.\n.P\nA \\fB#\\fR character (not part of a string) starts a comment\\. All characters from \\fB#\\fR to the end of the line are ignored\\.\n.\n.P\nIf the end of the line is preceded by an odd number of backslash characters, the following line is also considered part of the comment and is ignored\\.\n.\n.P\nFor example, the following code outputs \\fB[1,3,4,7]\\fR\n.\n.IP \"\" 4\n.\n.nf\n\n[\n  1,\n  # foo \\e\n  2,\n  # bar \\e\\e\n  3,\n  4, # baz \\e\\e\\e\n  5, \\e\n  6,\n  7\n  # comment \\e\n    comment \\e\n    comment\n]\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nBackslash continuing the comment on the next line can be useful when writing the \"shebang\" for a jq script:\n.\n.IP \"\" 4\n.\n.nf\n\n#!/bin/sh \\-\\-\n# total \\- Output the sum of the given arguments (or stdin)\n# usage: total [numbers\\.\\.\\.]\n# \\e\nexec jq \\-\\-args \\-MRnf \\-\\- \"$0\" \"$@\"\n\n$ARGS\\.positional |\nreduce (\n  if \\. == []\n    then inputs\n    else \\.[]\n  end |\n  \\. as $dot |\n  try tonumber catch false |\n  if not or isnan then\n    @json \"total: Invalid number \\e($dot)\\.\\en\" | halt_error(1)\n  end\n) as $n (0; \\. + $n)\n.\n.fi\n.\n.IP \"\" 0\n.\n.P\nThe \\fBexec\\fR line is considered a comment by jq, so it is ignored\\. But it is not ignored by \\fBsh\\fR, since in \\fBsh\\fR a backslash at the end of the line does not continue the comment\\. With this trick, when the script is invoked as \\fBtotal 1 2\\fR, \\fB/bin/sh \\-\\- /path/to/total 1 2\\fR will be run, and \\fBsh\\fR will then run \\fBexec jq \\-\\-args \\-MRnf \\-\\- /path/to/total 1 2\\fR replacing itself with a \\fBjq\\fR interpreter invoked with the specified options (\\fB\\-M\\fR, \\fB\\-R\\fR, \\fB\\-n\\fR, \\fB\\-\\-args\\fR), that evaluates the current file (\\fB$0\\fR), with the arguments (\\fB$@\\fR) that were passed to \\fBsh\\fR\\.\n.\n.SH \"MODULES\"\njq has a library/module system\\. Modules are files whose names end in \\fB\\.jq\\fR\\.\n.\n.P\nModules imported by a program are searched for in a default search path (see below)\\. The \\fBimport\\fR and \\fBinclude\\fR directives allow the importer to alter this path\\.\n.\n.P\nPaths in the search path are subject to various substitutions\\.\n.\n.P\nFor paths starting with \\fB~/\\fR, the user\\'s home directory is substituted for \\fB~\\fR\\.\n.\n.P\nFor paths starting with \\fB$ORIGIN/\\fR, the directory where the jq executable is located is substituted for \\fB$ORIGIN\\fR\\.\n.\n.P\nFor paths starting with \\fB\\./\\fR or paths that are \\fB\\.\\fR, the path of the including file is substituted for \\fB\\.\\fR\\. For top\\-level programs given on the command\\-line, the current directory is used\\.\n.\n.P\nImport directives can optionally specify a search path to which the default is appended\\.\n.\n.P\nThe default search path is the search path given to the \\fB\\-L\\fR command\\-line option, else \\fB[\"~/\\.jq\", \"$ORIGIN/\\.\\./lib/jq\", \"$ORIGIN/\\.\\./lib\"]\\fR\\.\n.\n.P\nNull and empty string path elements terminate search path processing\\.\n.\n.P\nA dependency with relative path \\fBfoo/bar\\fR would be searched for in \\fBfoo/bar\\.jq\\fR and \\fBfoo/bar/bar\\.jq\\fR in the given search path\\. This is intended to allow modules to be placed in a directory along with, for example, version control files, README files, and so on, but also to allow for single\\-file modules\\.\n.\n.P\nConsecutive components with the same name are not allowed to avoid ambiguities (e\\.g\\., \\fBfoo/foo\\fR)\\.\n.\n.P\nFor example, with \\fB\\-L$HOME/\\.jq\\fR a module \\fBfoo\\fR can be found in \\fB$HOME/\\.jq/foo\\.jq\\fR and \\fB$HOME/\\.jq/foo/foo\\.jq\\fR\\.\n.\n.P\nIf \\fB\\.jq\\fR exists in the user\\'s home directory, and is a file (not a directory), it is automatically sourced into the main program\\.\n.\n.SS \"import RelativePathString as NAME [<metadata>];\"\nImports a module found at the given path relative to a directory in a search path\\. A \\fB\\.jq\\fR suffix will be added to the relative path string\\. The module\\'s symbols are prefixed with \\fBNAME::\\fR\\.\n.\n.P\nThe optional metadata must be a constant jq expression\\. It should be an object with keys like \\fBhomepage\\fR and so on\\. At this time jq only uses the \\fBsearch\\fR key/value of the metadata\\. The metadata is also made available to users via the \\fBmodulemeta\\fR builtin\\.\n.\n.P\nThe \\fBsearch\\fR key in the metadata, if present, should have a string or array value (array of strings); this is the search path to be prefixed to the top\\-level search path\\.\n.\n.SS \"include RelativePathString [<metadata>];\"\nImports a module found at the given path relative to a directory in a search path as if it were included in place\\. A \\fB\\.jq\\fR suffix will be added to the relative path string\\. The module\\'s symbols are imported into the caller\\'s namespace as if the module\\'s content had been included directly\\.\n.\n.P\nThe optional metadata must be a constant jq expression\\. It should be an object with keys like \\fBhomepage\\fR and so on\\. At this time jq only uses the \\fBsearch\\fR key/value of the metadata\\. The metadata is also made available to users via the \\fBmodulemeta\\fR builtin\\.\n.\n.SS \"import RelativePathString as $NAME [<metadata>];\"\nImports a JSON file found at the given path relative to a directory in a search path\\. A \\fB\\.json\\fR suffix will be added to the relative path string\\. The file\\'s data will be available as \\fB$NAME::NAME\\fR\\.\n.\n.P\nThe optional metadata must be a constant jq expression\\. It should be an object with keys like \\fBhomepage\\fR and so on\\. At this time jq only uses the \\fBsearch\\fR key/value of the metadata\\. The metadata is also made available to users via the \\fBmodulemeta\\fR builtin\\.\n.\n.P\nThe \\fBsearch\\fR key in the metadata, if present, should have a string or array value (array of strings); this is the search path to be prefixed to the top\\-level search path\\.\n.\n.SS \"module <metadata>;\"\nThis directive is entirely optional\\. It\\'s not required for proper operation\\. It serves only the purpose of providing metadata that can be read with the \\fBmodulemeta\\fR builtin\\.\n.\n.P\nThe metadata must be a constant jq expression\\. It should be an object with keys like \\fBhomepage\\fR\\. At this time jq doesn\\'t use this metadata, but it is made available to users via the \\fBmodulemeta\\fR builtin\\.\n.\n.SS \"modulemeta\"\nTakes a module name as input and outputs the module\\'s metadata as an object, with the module\\'s imports (including metadata) as an array value for the \\fBdeps\\fR key and the module\\'s defined functions as an array value for the \\fBdefs\\fR key\\.\n.\n.P\nPrograms can use this to query a module\\'s metadata, which they could then use to, for example, search for, download, and install missing dependencies\\.\n.\n.SH \"COLORS\"\nTo configure alternative colors just set the \\fBJQ_COLORS\\fR environment variable to colon\\-delimited list of partial terminal escape sequences like \\fB\"1;31\"\\fR, in this order:\n.\n.IP \"\\(bu\" 4\ncolor for \\fBnull\\fR\n.\n.IP \"\\(bu\" 4\ncolor for \\fBfalse\\fR\n.\n.IP \"\\(bu\" 4\ncolor for \\fBtrue\\fR\n.\n.IP \"\\(bu\" 4\ncolor for numbers\n.\n.IP \"\\(bu\" 4\ncolor for strings\n.\n.IP \"\\(bu\" 4\ncolor for arrays\n.\n.IP \"\\(bu\" 4\ncolor for objects\n.\n.IP \"\\(bu\" 4\ncolor for object keys\n.\n.IP \"\" 0\n.\n.P\nThe default color scheme is the same as setting \\fBJQ_COLORS=\"0;90:0;39:0;39:0;39:0;32:1;39:1;39:1;34\"\\fR\\.\n.\n.P\nThis is not a manual for VT100/ANSI escapes\\. However, each of these color specifications should consist of two numbers separated by a semi\\-colon, where the first number is one of these:\n.\n.IP \"\\(bu\" 4\n1 (bright)\n.\n.IP \"\\(bu\" 4\n2 (dim)\n.\n.IP \"\\(bu\" 4\n4 (underscore)\n.\n.IP \"\\(bu\" 4\n5 (blink)\n.\n.IP \"\\(bu\" 4\n7 (reverse)\n.\n.IP \"\\(bu\" 4\n8 (hidden)\n.\n.IP \"\" 0\n.\n.P\nand the second is one of these:\n.\n.IP \"\\(bu\" 4\n30 (black)\n.\n.IP \"\\(bu\" 4\n31 (red)\n.\n.IP \"\\(bu\" 4\n32 (green)\n.\n.IP \"\\(bu\" 4\n33 (yellow)\n.\n.IP \"\\(bu\" 4\n34 (blue)\n.\n.IP \"\\(bu\" 4\n35 (magenta)\n.\n.IP \"\\(bu\" 4\n36 (cyan)\n.\n.IP \"\\(bu\" 4\n37 (white)\n.\n.IP \"\" 0\n.\n.SH \"BUGS\"\nPresumably\\. Report them or discuss them at:\n.\n.IP \"\" 4\n.\n.nf\n\nhttps://github\\.com/jqlang/jq/issues\n.\n.fi\n.\n.IP \"\" 0\n.\n.SH \"AUTHOR\"\nStephen Dolan \\fB<mu@netsoc\\.tcd\\.ie>\\fR\n"
        },
        {
          "name": "jq.spec",
          "type": "blob",
          "size": 1.40625,
          "content": "# This is spec file maintained by developers of JQ, not by a OS distro.\n# Your OS of choice will likely ignore this RPM spec file.\nSummary: Command-line JSON processor\nName: jq\nVersion: %{myver}\nRelease: %{myrel}%{?dist}\nSource0: jq-%{myver}.tar.gz\nURL: https://jqlang.github.io/jq\nLicense: MIT AND ICU AND CC-BY-3.0\nAutoReqProv: no\n#BuildPrereq: autoconf, libtool, automake, flex, bison, python\n\nGroup: Applications/System\n# Requires:\n\n# Disables debug packages and stripping of binaries:\n%global _enable_debug_package 0\n%global debug_package %{nil}\n%global __os_install_post %{nil}\n\n# Crank up the compression\n%define _binary_payload w7.lzdio\n\n%description\njq is a command-line JSON processor\n\n%prep\n%setup\n\n%build\necho \"Building in: \\\"$(pwd)\\\"\"\n%if \"%{devbuild}\" == \"yes\"\n./configure --prefix=%{_prefix} --enable-devel\n%else\n./configure --prefix=%{_prefix}\n%endif\nmake\n\n%install\necho \"Installing to: \\\"%{buildroot}\\\"\"\nmake install DESTDIR=%{buildroot}\n\n%clean\nrm -rf %{buildroot}\n\n%files\n%defattr(-,root,root)\n%{_bindir}/jq\n%if \"%{devbuild}\" == \"yes\"\n%{_libexecdir}/%{name}/jq_test\n%{_libexecdir}/%{name}/testdata\n%endif\n%{_datadir}/doc/%{name}/AUTHORS\n%{_datadir}/doc/%{name}/COPYING\n%{_datadir}/doc/%{name}/README.md\n%{_datadir}/man/man1/jq.1\n%{_includedir}/jq.h\n%{_includedir}/jv.h\n%{_prefix}/lib/libjq.a\n%{_prefix}/lib/libjq.la\n%{_prefix}/lib/libjq.so\n%{_prefix}/lib/libjq.so.1\n%{_prefix}/lib/libjq.so.1.0.4\n\n%changelog\n\n%pre\n\n%post\n"
        },
        {
          "name": "libjq.pc.in",
          "type": "blob",
          "size": 0.2490234375,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: libjq\nURL: https://jqlang.github.io/jq/\nDescription: Library to process JSON using a query language\nVersion: @VERSION@\nLibs: -L${libdir} -ljq\nCflags: -I${includedir}\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sig",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}