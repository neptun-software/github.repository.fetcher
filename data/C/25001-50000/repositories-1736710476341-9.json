{
  "metadata": {
    "timestamp": 1736710476341,
    "page": 9,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "coolsnowwolf/lede",
      "stars": 30170,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0078125,
          "content": "* -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.271484375,
          "content": "*.o\n.DS_Store\n.*.swp\n/env\n/dl\n/.config\n/.config.old\n/bin\n/build_dir\n/staging_dir\n/tmp\n/logs\n/feeds\n/feeds.conf\n/files\n/overlay\n/package/feeds\n/package/openwrt-packages\n/*.patch\nkey-build*\n*.orig\n*.rej\n*~\n.#*\n*#\n.emacs.desktop*\nTAGS*~\ngit-src\n.project\n.cproject\n.ccache\n.vscode*\n"
        },
        {
          "name": "BSDmakefile",
          "type": "blob",
          "size": 0.103515625,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2006 OpenWrt.org\n\nworld ${.TARGETS}:\n\t@gmake $@\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.27734375,
          "content": "OpenWrt is provided under:\n\n\tSPDX-License-Identifier: GPL-2.0-only\n\nBeing under the terms of the GNU General Public License version 2 only,\naccording with:\n\n\tLICENSES/GPL-2.0\n\nIn addition, other licenses may also apply.\n\nAll contributions to OpenWrt are subject to this COPYING file.\n"
        },
        {
          "name": "Config.in",
          "type": "blob",
          "size": 0.6494140625,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2006-2013 OpenWrt.org\n\nmainmenu \"LEDE Configuration\"\n\nconfig MODULES\n\tmodules\n\tbool\n\tdefault y\n\nconfig HAVE_DOT_CONFIG\n\tbool\n\tdefault y\n\nHOST_OS := $(shell, uname)\n\nconfig HOST_OS_LINUX\n\tdef_bool $(shell, ./config/check-uname.sh Linux)\n\nconfig HOST_OS_MACOS\n\tdef_bool $(shell, ./config/check-uname.sh Darwin)\n\nsource \"target/Config.in\"\n\nsource \"config/Config-images.in\"\n\nsource \"config/Config-build.in\"\n\nsource \"config/Config-devel.in\"\n\nsource \"toolchain/Config.in\"\n\nsource \"target/imagebuilder/Config.in\"\n\nsource \"target/sdk/Config.in\"\n\nsource \"target/toolchain/Config.in\"\n\nsource \"tmp/.config-package.in\"\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.130859375,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2007 OpenWrt.org\n\nTOPDIR:=${CURDIR}\nLC_ALL:=C\nLANG:=C\nTZ:=UTC\nexport TOPDIR LC_ALL LANG TZ\n\nempty:=\nspace:= $(empty) $(empty)\n$(if $(findstring $(space),$(TOPDIR)),$(error ERROR: The path to the LEDE directory must not include any spaces))\n\nworld:\n\nDISTRO_PKG_CONFIG:=$(shell $(TOPDIR)/scripts/command_all.sh pkg-config | grep -e '/usr' -e '/nix/store' -m 1)\n\nexport ORIG_PATH:=$(if $(ORIG_PATH),$(ORIG_PATH),$(PATH))\nexport PATH:=$(if $(STAGING_DIR),$(abspath $(STAGING_DIR)/../host/bin),$(TOPDIR)/staging_dir/host/bin):$(PATH)\n\nifneq ($(OPENWRT_BUILD),1)\n  _SINGLE=export MAKEFLAGS=$(space);\n\n  override OPENWRT_BUILD=1\n  export OPENWRT_BUILD\n  GREP_OPTIONS=\n  export GREP_OPTIONS\n  CDPATH=\n  export CDPATH\n  include $(TOPDIR)/include/debug.mk\n  include $(TOPDIR)/include/depends.mk\n  include $(TOPDIR)/include/toplevel.mk\nelse\n  include rules.mk\n  include $(INCLUDE_DIR)/depends.mk\n  include $(INCLUDE_DIR)/subdir.mk\n  include target/Makefile\n  include package/Makefile\n  include tools/Makefile\n  include toolchain/Makefile\n\n# Include the test suite Makefile if it exists\n-include tests/Makefile\n\n$(toolchain/stamp-compile): $(tools/stamp-compile) $(if $(CONFIG_BUILDBOT),toolchain_rebuild_check)\n$(target/stamp-compile): $(toolchain/stamp-compile) $(tools/stamp-compile) $(BUILD_DIR)/.prepared\n$(package/stamp-compile): $(target/stamp-compile) $(package/stamp-cleanup)\n$(package/stamp-install): $(package/stamp-compile)\n$(target/stamp-install): $(package/stamp-compile) $(package/stamp-install)\ncheck: $(tools/stamp-check) $(toolchain/stamp-check) $(package/stamp-check)\n\nprintdb:\n\t@true\n\nprepare: $(target/stamp-compile)\n\n_clean: FORCE\n\trm -rf $(BUILD_DIR) $(STAGING_DIR) $(BIN_DIR) $(OUTPUT_DIR)/packages/$(ARCH_PACKAGES) $(TOPDIR)/staging_dir/packages\n\nclean: _clean\n\trm -rf $(BUILD_LOG_DIR)\n\ntargetclean: _clean\n\trm -rf $(TOOLCHAIN_DIR) $(BUILD_DIR_BASE)/hostpkg $(BUILD_DIR_TOOLCHAIN)\n\ndirclean: targetclean clean\n\trm -rf $(STAGING_DIR_HOST) $(STAGING_DIR_HOSTPKG) $(BUILD_DIR_BASE)/host\n\trm -rf $(TMP_DIR)\n\t$(MAKE) -C $(TOPDIR)/scripts/config clean\n\ntoolchain_rebuild_check:\n\t$(SCRIPT_DIR)/check-toolchain-clean.sh\n\ncacheclean:\nifneq ($(CONFIG_CCACHE),)\n\t$(STAGING_DIR_HOST)/bin/ccache -C\nendif\n\nifndef DUMP_TARGET_DB\n$(BUILD_DIR)/.prepared: Makefile\n\t@mkdir -p $$(dirname $@)\n\t@touch $@\n\ntmp/.prereq_packages: .config\n\tunset ERROR; \\\n\tfor package in $(sort $(prereq-y) $(prereq-m)); do \\\n\t\t$(_SINGLE)$(NO_TRACE_MAKE) -s -r -C package/$$package prereq || ERROR=1; \\\n\tdone; \\\n\tif [ -n \"$$ERROR\" ]; then \\\n\t\techo \"Package prerequisite check failed.\"; \\\n\t\tfalse; \\\n\tfi\n\ttouch $@\nendif\n\n# check prerequisites before starting to build\nprereq: $(target/stamp-prereq) tmp/.prereq_packages\n\t@if [ ! -f \"$(INCLUDE_DIR)/site/$(ARCH)\" ]; then \\\n\t\techo 'ERROR: Missing site config for architecture \"$(ARCH)\" !'; \\\n\t\techo '       The missing file will cause configure scripts to fail during compilation.'; \\\n\t\techo '       Please provide a \"$(INCLUDE_DIR)/site/$(ARCH)\" file and restart the build.'; \\\n\t\texit 1; \\\n\tfi\n\n$(BIN_DIR)/profiles.json: FORCE\n\t$(if $(CONFIG_JSON_OVERVIEW_IMAGE_INFO), \\\n\t\tWORK_DIR=$(BUILD_DIR)/json_info_files \\\n\t\t\t$(SCRIPT_DIR)/json_overview_image_info.py $@ \\\n\t)\n\njson_overview_image_info: $(BIN_DIR)/profiles.json\n\nchecksum: FORCE\n\t$(call sha256sums,$(BIN_DIR),$(CONFIG_BUILDBOT))\n\nbuildversion: FORCE\n\t$(SCRIPT_DIR)/getver.sh > $(BIN_DIR)/version.buildinfo\n\nfeedsversion: FORCE\n\t$(SCRIPT_DIR)/feeds list -fs > $(BIN_DIR)/feeds.buildinfo\n\ndiffconfig: FORCE\n\tmkdir -p $(BIN_DIR)\n\t$(SCRIPT_DIR)/diffconfig.sh > $(BIN_DIR)/config.buildinfo\n\nbuildinfo: FORCE\n\t$(_SINGLE)$(SUBMAKE) -r diffconfig buildversion feedsversion\n\nprepare: .config $(tools/stamp-compile) $(toolchain/stamp-compile)\n\t$(_SINGLE)$(SUBMAKE) -r buildinfo\n\nworld: prepare $(target/stamp-compile) $(package/stamp-compile) $(package/stamp-install) $(target/stamp-install) FORCE\n\t$(_SINGLE)$(SUBMAKE) -r package/index\n\t$(_SINGLE)$(SUBMAKE) -r json_overview_image_info\n\t$(_SINGLE)$(SUBMAKE) -r checksum\nifneq ($(CONFIG_CCACHE),)\n\t$(STAGING_DIR_HOST)/bin/ccache -s\nendif\n\n.PHONY: clean dirclean prereq prepare world package/symlinks package/symlinks-install package/symlinks-clean\n\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.31640625,
          "content": "# 欢迎来到 Lean 的 LEDE 源码仓库\n\n为国产龙芯 LOONGSON SoC loongarch64 / 飞腾 Phytium 腾锐 D2000 系列架构添加支持\n\nI18N: [English](README_EN.md) | [简体中文](README.md) | [日本語](README_JA.md)\n\n## 官方讨论群\n\n如有技术问题需要讨论或者交流，欢迎加入以下群：\n\n1. QQ 讨论群：Op 固件技术研究群，号码 891659613，加群链接：[点击加入](https://qm.qq.com/q/IMa6Yf2SgC \"Op固件技术研究群\")\n2. TG 讨论群：OP 编译官方大群，加群链接：[点击加入](https://t.me/JhKgAA6Hx1 \"OP 编译官方大群\")\n\n## 软路由 ArmSoM Sige 系列介绍\n\nArmSoM-Sige 系列：软路由、单板计算机、小型服务器与智能家居的全能之选。\n\n[商品介绍页面 - ArmSom 品牌店](https://shop518100695.taobao.com/)\n\n购买链接：\n\n[![sige1-zh](doc/sige-zh.jpg)](https://item.taobao.com/item.htm?id=721197662185)\n\n## 注意\n\n1. **不要用 root 用户进行编译**\n2. 国内用户编译前最好准备好梯子\n3. 默认登陆IP 192.168.1.1 密码 password\n\n## 编译命令\n\n1. 首先装好 Linux 系统，推荐 Debian 或 Ubuntu LTS\n\n2. 安装编译依赖\n\n   ```bash\n   sudo apt update -y\n   sudo apt full-upgrade -y\n   sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\\n   bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \\\n   genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \\\n   libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \\\n   libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \\\n   python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \\\n   swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev\n   ```\n\n3. 下载源代码，更新 feeds 并选择配置\n\n   ```bash\n   git clone https://github.com/coolsnowwolf/lede\n   cd lede\n   ./scripts/feeds update -a\n   ./scripts/feeds install -a\n   make menuconfig\n   ```\n\n4. 下载 dl 库，编译固件\n（-j 后面是线程数，第一次编译推荐用单线程）\n\n   ```bash\n   make download -j8\n   make V=s -j1\n   ```\n\n本套代码保证肯定可以编译成功。里面包括了 R24 所有源代码，包括 IPK 的。\n\n你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！\n\n二次编译：\n\n```bash\ncd lede\ngit pull\n./scripts/feeds update -a\n./scripts/feeds install -a\nmake defconfig\nmake download -j8\nmake V=s -j$(nproc)\n```\n\n如果需要重新配置：\n\n```bash\nrm -rf .config\nmake menuconfig\nmake V=s -j$(nproc)\n```\n\n编译完成后输出路径：bin/targets\n\n### 使用 WSL/WSL2 进行编译\n\n由于 WSL 的 PATH 中包含带有空格的 Windows 路径，有可能会导致编译失败，请在 `make` 前面加上：\n\n```bash\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n```\n\n由于默认情况下，装载到 WSL 发行版的 NTFS 格式的驱动器将不区分大小写，因此大概率在 WSL/WSL2 的编译检查中会返回以下错误：\n\n```txt\nBuild dependency: OpenWrt can only be built on a case-sensitive filesystem\n```\n\n一个比较简洁的解决方法是，在 `git clone` 前先创建 Repository 目录，并为其启用大小写敏感：\n\n```powershell\n# 以管理员身份打开终端\nPS > fsutil.exe file setCaseSensitiveInfo <your_local_lede_path> enable\n# 将本项目 git clone 到开启了大小写敏感的目录 <your_local_lede_path> 中\nPS > git clone https://github.com/coolsnowwolf/lede <your_local_lede_path>\n```\n\n> 对已经 `git clone` 完成的项目目录执行 `fsutil.exe` 命令无法生效，大小写敏感只对新增的文件变更有效。\n\n### macOS 原生系统进行编译\n\n1. 在 AppStore 中安装 Xcode\n\n2. 安装 Homebrew：\n\n   ```bash\n   /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n   ```\n\n3. 使用 Homebrew 安装工具链、依赖与基础软件包：\n\n   ```bash\n   brew unlink awk\n   brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz\n   brew install gcc@11\n   ```\n\n4. 然后输入以下命令，添加到系统环境变量中：\n\n   - intel 芯片的 mac\n\n   ```bash\n   echo 'export PATH=\"/usr/local/opt/coreutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/findutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-getopt/bin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-tar/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/grep/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-sed/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/make/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   ```\n\n   - apple 芯片的 mac\n\n   ```zsh\n   echo 'export PATH=\"/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/findutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-getopt/bin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/grep/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/make/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   ```\n\n5. 重新加载一下 shell 启动文件 `source ~/.bashrc`，然后输入 `bash` 进入 bash shell，就可以和 Linux 一样正常编译了\n\n## 特别提示\n\n1. 源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件， SSL 安全是互联网最后的壁垒，安全干净才是固件应该做到的。\n\n2. 想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？跟着佐大学 OpenWrt 开发入门培训班助你能学有所成\n报名地址：[点击报名](http://forgotfun.org/2018/04/openwrt-training-2018.html \"报名\")\n\n3. QCA IPQ60xx 开源仓库地址：<https://github.com/coolsnowwolf/openwrt-gl-ax1800>\n\n4. 存档版本仓库地址：<https://github.com/coolsnowwolf/openwrt>\n\n## 捐贈\n\n如果你觉得此项目对你有帮助，可以捐助我们，以鼓励项目能持续发展，更加完善\n\n ![star](doc/star.png)\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 7.1552734375,
          "content": "# Welcome to Lean's git source of OpenWrt and packages\n\nI18N: [English](README_EN.md) | [简体中文](README.md) | [日本語](README_JA.md)\n\n## Official Channels\n\nIf you have technical questions for discussion or sharing, feel free to join the following channels:\n\n1. QQ Group: *OpenWRT Firmware Technical Research Group*, Group Number is `891659613`.\nJoin the group: [Link](https://jq.qq.com/?_wv=1027&k=XL8SK5aC \"Op固件技术研究群\").\n    - [Click to download QQ client](https://im.qq.com/pcqq).\n\n2. Telegram Group: *OpenWRT Firmware Technical Research Group*.\nJoin the group: [Link](https://t.me/JhKgAA6Hx1 \"OP 编译官方大群\").\n\n## ArmSoM Sige Board Series Introduction\n\nArmSoM-Sige Series: Your All-in-One Powerhouse for Soft Routing, SBCs, Mini Servers, and Home Automation.\n\n[ArmSoM Store](https://www.aliexpress.com/store/1102800175)\n\nBuy Link ：\n[![sige1-en](doc/sige-en.jpg)](https://aliexpress.com/item/3256807356692995.html)\n\n## Notice\n\n1. **Never compile OpenWRT as `root`**\n2. If you are living in mainland China, please make sure you could visit the **REAL** Internet.\n3. Default login IP is `192.168.1.1`, password is `password`.\n\n## How to Compile\n\n1. Install a Linux distribution, Debian or Ubuntu LTS is recommended.\n\n2. Install dependencies:\n\n   ```bash\n   sudo apt update -y\n   sudo apt full-upgrade -y\n   sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\\n   bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \\\n   git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \\\n   libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \\\n   libssl-dev libtool llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 \\\n   python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \\\n   uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev\n   ```\n\n3. Clone the source code, update `feeds` and configure:\n\n   ```bash\n   git clone https://github.com/coolsnowwolf/lede\n   cd lede\n   ./scripts/feeds update -a\n   ./scripts/feeds install -a\n   make menuconfig\n   ```\n\n4. Download libraries and compile firmware\n   > (`-j` is the thread count, single-thread is recommended for the first build):\n\n   ```bash\n   make download -j8\n   make V=s -j1\n   ```\n\nThese commands are supposed to compile the source code successfully.\nAll source code of R23 is included, including IPK.\n\nYou can use this source code freely, but please link this GitHub repository when redistributing.\nThank you for your cooperation!\n\nRebuild:\n\n```bash\ncd lede\ngit pull\n./scripts/feeds update -a\n./scripts/feeds install -a\nmake defconfig\nmake download -j8\nmake V=s -j$(nproc)\n```\n\nIf reconfiguration is need:\n\n```bash\nrm -rf ./tmp && rm -rf .config\nmake menuconfig\nmake V=s -j$(nproc)\n```\n\nBuild artifacts will be outputted to `bin/targets` directory.\n\n### If you are using WSL/WSL2 as your build environment\n\nWSL's `PATH` potentially contain Windows paths with spaces, which may cause compilation failure.\nPlease add the following lines to your local environment profiles before compiling:\n\n```bash\n# Update and reload your profile, ~/.bashrc for example.\ncat << EOF >> ~/.bashrc\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH\"\nEOF\nsource ~/.bashrc\n```\n\nNTFS-formatted drives mounted to a WSL distribution will be case-insensitive by default.\nThis will cause the following error when compiling in WSL/WSL2:\n\n```txt\nBuild dependency: OpenWrt can only be built on a case-sensitive filesystem\n```\n\nA simple solution is to create a case-sensitive directory for the repository before `git clone`:\n\n```powershell\n# Open a terminal as administrator\nPS > fsutil.exe file setCaseSensitiveInfo <your_local_lede_path> enable\n# Clone this repository to the case-sensitive directory <your_local_lede_path>\nPS > git clone git@github.com:coolsnowwolf/lede.git <your_local_lede_path>\n```\n\n> For directories that have already been `git clone`, `fsutil.exe` will not take effect.\n> Case sensitivity will only be enabled for new changes in the directory.\n\n### macOS Compilation\n\n1. Install Xcode from AppStore\n\n2. Install Homebrew:\n\n   ```bash\n   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n   ```\n\n3. Install toolchain, dependencies and packages with Homebrew:\n\n   ```bash\n   brew unlink awk\n   brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz\n   brew install gcc@11\n   ```\n\n4. Update your system environment:\n\n   - mac with intel chip\n\n   ```bash\n   echo 'export PATH=\"/usr/local/opt/coreutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/findutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-getopt/bin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-tar/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/grep/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-sed/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/make/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   ```\n\n   - mac with apple chip\n\n   ```zsh\n   echo 'export PATH=\"/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/findutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-getopt/bin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/grep/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/make/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   ```\n\n5. Reload your shell profile `source ~/.bashrc && bash`, then you can compile normally like Linux.\n\n## Declaration\n\n1. This source code doesn't contain any backdoors or closed source applications that can monitor/capture your HTTPS traffic. SSL security is the final castle of cyber security. Safety is what a firmware should do.\n2. Want to learn OpenWRT development but don't know how to start? Can't motivate yourself for self-learning? Do not have enough fundamental knowledge? Learn OpenWRT development with Mr. Zuo through his Beginner OpenWRT Training Course. Click [here](http://forgotfun.org/2018/04/openwrt-training-2018.html) to register.\n3. QCA IPQ60xx open source repository: <https://github.com/coolsnowwolf/openwrt-gl-ax1800>\n4. OpenWRT Archive repository: <https://github.com/coolsnowwolf/openwrt>\n\n## Introduction to Software Routers\n\nYingku R2 - N95/N300 Mini Four-Network HomeLab Server\n\n(Introduction page - Yingku Technology (support AliPay Huabei)):\n\n[Pre-sale link](https://item.taobao.com/item.htm?ft=t&id=719159813003)\n<div align=\"left\">\n<a href=\"https://item.taobao.com/item.htm?ft=t&id=719159813003\">\n  <img src=\"doc/r1.jpg\" width = \"600\" alt=\"\" align=center />\n</a>\n</div>\n<br>\n\n## Donation\n\nIf this project did helped you, please consider donating to support the development of this project.\n\n<div align=\"left\">\n  <img src=\"./doc/star.png\" width = \"400\" alt=\"\" align=center />\n</div>\n<br>\n"
        },
        {
          "name": "README_JA.md",
          "type": "blob",
          "size": 8.30859375,
          "content": "# OpenWrt とパッケージの Lean の git ソースへようこそ\n\nI18N: [English](README_EN.md) | [简体中文](README.md) | [日本語](README_JA.md)\n\n## 公式チャンネル\n\nディスカッションや共有したい技術的な質問がある場合は、以下のチャンネルにお気軽にご参加ください:\n\n1. QQ グループ: *OpenWRT ファームウェア技術研究グループ*、グループ番号は `891659613` です。\nグループに参加する: [リンク](https://jq.qq.com/?_wv=1027&k=XL8SK5aC \"Op固件技术研究群\")。\n    - [クリックして QQ クライアントをダウンロードする](https://im.qq.com/pcqq)。\n\n2. Telegram グループ: *OpenWRT ファームウェア技術研究グループ*。グループに参加する: [リンク](https://t.me/JhKgAA6Hx1 \"OP 编译官方大群\")。\n\n## 注意\n\n1. **OpenWRT を決して `root` としてコンパイルしないこと**\n2. 中国本土にお住まいの方は、ぜひ **REAL** インターネットをご覧ください。\n3. デフォルトのログイン IP は `192.168.1.1` で、パスワードは `password` です。\n\n## コンパイル方法\n\n1. Linuxディストリビューションをインストールし、Debian または Ubuntu LTS を推奨します。\n\n2. 依存関係をインストールする:\n\n   ```bash\n   sudo apt update -y\n   sudo apt full-upgrade -y\n   sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\\n   bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \\\n   git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \\\n   libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \\\n   libssl-dev libtool llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 \\\n   python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \\\n   uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev\n   ```\n\n3. ソースコードをクローンし、`feeds` を更新し、設定する:\n\n   ```bash\n   git clone https://github.com/coolsnowwolf/lede\n   cd lede\n   ./scripts/feeds update -a\n   ./scripts/feeds install -a\n   make menuconfig\n   ```\n\n4. ライブラリのダウンロードとファームウェアのコンパイル\n   > (`-j` はスレッドカウント、最初のビルドはシングルスレッドを推奨):\n\n   ```bash\n   make download -j8\n   make V=s -j1\n   ```\n\nこれらのコマンドは、ソースコードを正常にコンパイルするためのものです。\nR23 のソースコードは IPK を含めてすべて含まれています。\n\nこのソースコードはご自由にお使いいただけますが、再配布の際はこの GitHub リポジトリをリンクしてください。\nご協力ありがとうございました！\n\nリビルド:\n\n```bash\ncd lede\ngit pull\n./scripts/feeds update -a\n./scripts/feeds install -a\nmake defconfig\nmake download -j8\nmake V=s -j$(nproc)\n```\n\n再設定が必要な場合:\n\n```bash\nrm -rf ./tmp && rm -rf .config\nmake menuconfig\nmake V=s -j$(nproc)\n```\n\nビルドの成果物は `bin/targets` ディレクトリに出力されます。\n\n### WSL/WSL2 をビルド環境として使用している場合\n\nWSL の `PATH` には、Windows のパスが空白で含まれている可能性があり、コンパイルに失敗することがあります。\nコンパイルする前に、ローカルの環境プロファイルに以下の行を追加してください:\n\n```bash\n# 例えば、~/.bashrc などのプロファイルを更新した後、再読み込みを行う。\ncat << EOF >> ~/.bashrc\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH\"\nEOF\nsource ~/.bashrc\n```\n\nWSL ディストリビューションにマウントされた NTFS フォーマットのドライブは、デフォルトで大文字と小文字が区別されません。\nこのため、WSL/WSL2 でコンパイルすると、次のようなエラーが発生します:\n\n```txt\nBuild dependency: OpenWrt can only be built on a case-sensitive filesystem\n```\n\n単純な解決策は、`git clone` の前に大文字小文字を区別してリポジトリ用のディレクトリを作成することです:\n\n```powershell\n# 管理者としてターミナルを開く\nPS > fsutil.exe file setCaseSensitiveInfo <your_local_lede_path> enable\n# 大文字と小文字を区別して、このリポジトリを <your_local_lede_path> ディレクトリにクローンする\nPS > git clone git@github.com:coolsnowwolf/lede.git <your_local_lede_path>\n```\n\n> すでに `git clone` されたディレクトリでは、`fsutil.exe` は有効になりません。\n> 大文字小文字の区別はディレクトリの新しい変更に対してのみ有効になります。\n\n### macOS コンパイル\n\n1. AppStore から Xcode をインストールする\n\n2. Homebrew をインストールする:\n\n   ```bash\n   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n   ```\n\n3. Homebrew でツールチェーン、依存関係、パッケージをインストールする:\n\n   ```bash\n   brew unlink awk\n   brew install coreutils diffutils findutils gawk gnu-getopt gnu-tar grep make ncurses pkg-config wget quilt xz\n   brew install gcc@11\n   ```\n\n4. システム環境のアップデート:\n\n   - MacのIntelシリコンバージョン\n\n   ```bash\n   echo 'export PATH=\"/usr/local/opt/coreutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/findutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-getopt/bin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-tar/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/grep/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/gnu-sed/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/usr/local/opt/make/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   ```\n\n   - MacのAppleシリコンバージョン\n\n   ```zsh\n   echo 'export PATH=\"/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/findutils/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-getopt/bin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/grep/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   echo 'export PATH=\"/opt/homebrew/opt/make/libexec/gnubin:$PATH\"' >> ~/.bashrc\n   ```\n\n5. シェルプロファイル `source ~/.bashrc && bash` を再読み込みすれば、Linux のように普通にコンパイルできます。\n\n## 宣言\n\n1. このソースコードには、HTTPS トラフィックを監視／キャプチャできるバックドアやクローズドソースアプリケーションは含まれていません。SSL セキュリティはサイバーセキュリティの最後の城です。安全性はファームウェアがすべきことです。\n2. OpenWRT の開発を学びたいが、何から始めたらいいかわからないですか？自己学習のモチベーションが上がらない？基礎知識が足りない？ズオ氏の初心者 OpenWRT トレーニングコースで一緒に OpenWRT 開発を学びましょう。お申し込みは[こちら](http://forgotfun.org/2018/04/openwrt-training-2018.html)をクリックしてください。\n3. QCA IPQ60xx オープンソースリポジトリ: <https://github.com/coolsnowwolf/openwrt-gl-ax1800>\n4. OpenWRT アーカイブリポジトリ: <https://github.com/coolsnowwolf/openwrt>\n\n## ソフトウェアルーター入門\n\nYingku R2 - N95/N300 Mini Four-Network HomeLab Server\n\n(紹介ページ - Yingku Technology (support AliPay Huabei)):\n\n[先行販売リンク](https://item.taobao.com/item.htm?ft=t&id=719159813003)\n<div align=\"left\">\n<a href=\"https://item.taobao.com/item.htm?ft=t&id=719159813003\">\n  <img src=\"doc/r1.jpg\" width = \"600\" alt=\"\" align=center />\n</a>\n</div>\n<br>\n\n## 寄付\n\nこのプロジェクトがあなたのお役に立てたのであれば、このプロジェクトの発展を支援するための寄付をご検討ください。\n\n<div align=\"left\">\n  <img src=\"./doc/star.png\" width = \"400\" alt=\"\" align=center />\n</div>\n<br>\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "feeds.conf.default",
          "type": "blob",
          "size": 0.603515625,
          "content": "src-git packages https://github.com/coolsnowwolf/packages\n#src-git luci https://github.com/coolsnowwolf/luci\nsrc-git luci https://github.com/coolsnowwolf/luci.git;openwrt-23.05\nsrc-git routing https://github.com/coolsnowwolf/routing\nsrc-git telephony https://github.com/coolsnowwolf/telephony.git\n#src-git helloworld https://github.com/fw876/helloworld.git\n#src-git oui https://github.com/zhaojh329/oui.git\n#src-git video https://github.com/openwrt/video.git\n#src-git targets https://github.com/openwrt/targets.git\n#src-git oldpackages http://git.openwrt.org/packages.git\n#src-link custom /usr/src/openwrt/custom-feed\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "rules.mk",
          "type": "blob",
          "size": 16.5498046875,
          "content": "# SPDX-License-Identifier: GPL-2.0-only\n#\n# Copyright (C) 2006-2010 OpenWrt.org\n# Copyright (C) 2016 LEDE Project\n\nifneq ($(__rules_inc),1)\n__rules_inc=1\n\nifeq ($(DUMP),)\n  -include $(TOPDIR)/.config\nendif\ninclude $(TOPDIR)/include/debug.mk\ninclude $(TOPDIR)/include/verbose.mk\n\nifneq ($(filter check,$(MAKECMDGOALS)),)\nCHECK:=1\nDUMP:=1\nendif\n\nexport TMP_DIR:=$(TOPDIR)/tmp\nexport TMPDIR:=$(TMP_DIR)\n\n##@\n# @brief Strip quotes `\"` and pounds `#` from string.\n#\n# @param 1: String.\n##\nqstrip=$(strip $(subst \",,$(1)))\n#\"))\n\nempty:=\nspace:= $(empty) $(empty)\ncomma:=,\npound:=\\#\n##@\n# @brief Merge strings by removing spaces.\n#\n# @param 1: String.\n##\nmerge=$(subst $(space),,$(1))\n##@\n# @brief Get hash sum of variable list.\n#\n# @param 1: List of variable names.\n##\nconfvar=$(shell echo '$(foreach v,$(1),$(v)=$(subst ','\\'',$($(v))))' | $(MKHASH) md5)\n##@\n# @brief Strip last extension from file name.\n#\n# @param 1: File name.\n##\nstrip_last=$(patsubst %.$(lastword $(subst .,$(space),$(1))),%,$(1))\n\nparen_left = (\nparen_right = )\nchars_lower = a b c d e f g h i j k l m n o p q r s t u v w x y z\nchars_upper = A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\ndefine sep\n\nendef\n\ndefine newline\n\n\nendef\n\n__tr_list = $(join $(join $(1),$(foreach char,$(1),$(comma))),$(2))\n__tr_head_stripped = $(subst $(space),,$(foreach cv,$(call __tr_list,$(1),$(2)),$$$(paren_left)subst$(cv)$(comma)))\n__tr_head = $(subst $(paren_left)subst,$(paren_left)subst$(space),$(__tr_head_stripped))\n__tr_tail = $(subst $(space),,$(foreach cv,$(1),$(paren_right)))\n__tr_template = $(__tr_head)$$(1)$(__tr_tail)\n\n##@\n# @brief Convert string characters to upper.\n##\n$(eval toupper = $(call __tr_template,$(chars_lower),$(chars_upper)))\n##@\n# @brief Convert string characters to lower.\n##\n$(eval tolower = $(call __tr_template,$(chars_upper),$(chars_lower)))\n\n##@\n# @brief Abbreviate version. Truncate to 8 characters.\n##\nversion_abbrev = $(if $(if $(CHECK),,$(DUMP)),$(1),$(shell printf '%.8s' $(1)))\n\n_SINGLE=export MAKEFLAGS=$(space);\nCFLAGS:=\nARCH:=$(subst i486,i386,$(subst i586,i386,$(subst i686,i386,$(call qstrip,$(CONFIG_ARCH)))))\nARCH_PACKAGES:=$(call qstrip,$(CONFIG_TARGET_ARCH_PACKAGES))\nBOARD:=$(call qstrip,$(CONFIG_TARGET_BOARD))\nSUBTARGET:=$(call qstrip,$(CONFIG_TARGET_SUBTARGET))\nTARGET_OPTIMIZATION:=$(call qstrip,$(CONFIG_TARGET_OPTIMIZATION))\nTARGET_SUFFIX=$(call qstrip,$(CONFIG_TARGET_SUFFIX))\nBUILD_SUFFIX:=$(call qstrip,$(CONFIG_BUILD_SUFFIX))\nSUBDIR:=$(patsubst $(TOPDIR)/%,%,${CURDIR})\nBUILD_SUBDIR:=$(patsubst $(TOPDIR)/%,%,${CURDIR})\nNPROC:=$(shell sysctl -n hw.ncpu 2>/dev/null || nproc)\nexport SHELL:=/usr/bin/env bash\n\nIS_PACKAGE_BUILD := $(if $(filter package/%,$(BUILD_SUBDIR)),1)\n\nOPTIMIZE_FOR_CPU=$(subst i386,i486,$(ARCH))\n\nifneq (,$(findstring $(ARCH) , aarch64 aarch64_be powerpc ))\n  FPIC:=-DPIC -fPIC\nelse\n  FPIC:=-DPIC -fpic\nendif\n\nHOST_FPIC:=-DPIC -fPIC\n\nARCH_SUFFIX:=$(call qstrip,$(CONFIG_CPU_TYPE))\nGCC_ARCH:=\n\nifneq ($(ARCH_SUFFIX),)\n  ARCH_SUFFIX:=_$(ARCH_SUFFIX)\nendif\nifneq ($(filter -march=armv%,$(TARGET_OPTIMIZATION)),)\n  GCC_ARCH:=$(patsubst -march=%,%,$(filter -march=armv%,$(TARGET_OPTIMIZATION)))\nendif\nifdef CONFIG_HAS_SPE_FPU\n  TARGET_SUFFIX:=$(TARGET_SUFFIX)spe\nendif\nifdef CONFIG_MIPS64_ABI\n  ifneq ($(CONFIG_MIPS64_ABI_O32),y)\n     ARCH_SUFFIX:=$(ARCH_SUFFIX)_$(call qstrip,$(CONFIG_MIPS64_ABI))\n  endif\nendif\n\nDEFAULT_SUBDIR_TARGETS:=clean download prepare compile update refresh prereq dist distcheck configure check check-depends\n\n##@\n# @brief Create default targets.\n#\n# Targets are created from @DEFAULT_SUBDIR_TARGETS and input argument lists.\n#\n# @param 1: Additional targets list.\n##\ndefine DefaultTargets\n$(foreach t,$(DEFAULT_SUBDIR_TARGETS) $(1),\n  .$(t):\n  $(t): .$(t)\n  .PHONY: $(t) .$(t)\n)\nendef\n\nDL_DIR=$(if $(call qstrip,$(CONFIG_DOWNLOAD_FOLDER)),$(call qstrip,$(CONFIG_DOWNLOAD_FOLDER)),$(TOPDIR)/dl)$(if $(DL_SUBDIR),/$(DL_SUBDIR))\nOUTPUT_DIR:=$(if $(call qstrip,$(CONFIG_BINARY_FOLDER)),$(call qstrip,$(CONFIG_BINARY_FOLDER)),$(TOPDIR)/bin)\nBIN_DIR:=$(OUTPUT_DIR)/targets/$(BOARD)/$(SUBTARGET)\nINCLUDE_DIR:=$(TOPDIR)/include\nSCRIPT_DIR:=$(TOPDIR)/scripts\nBUILD_DIR_BASE:=$(TOPDIR)/build_dir\nifeq ($(CONFIG_EXTERNAL_TOOLCHAIN),)\n  GCCV:=$(call qstrip,$(CONFIG_GCC_VERSION))\n  LIBC:=$(call qstrip,$(CONFIG_LIBC))\n  REAL_GNU_TARGET_NAME=$(OPTIMIZE_FOR_CPU)-openwrt-linux$(if $(TARGET_SUFFIX),-$(TARGET_SUFFIX))\n  GNU_TARGET_NAME=$(OPTIMIZE_FOR_CPU)-openwrt-linux\n  DIR_SUFFIX:=_$(LIBC)$(if $(CONFIG_arm),_eabi)\n  BIN_DIR:=$(BIN_DIR)$(if $(CONFIG_USE_MUSL),,-$(LIBC))\n  TARGET_DIR_NAME = target-$(ARCH)$(ARCH_SUFFIX)$(DIR_SUFFIX)$(if $(BUILD_SUFFIX),_$(BUILD_SUFFIX))\n  TOOLCHAIN_DIR_NAME = toolchain-$(ARCH)$(ARCH_SUFFIX)_gcc-$(GCCV)$(DIR_SUFFIX)\nelse\n  ifeq ($(CONFIG_NATIVE_TOOLCHAIN),)\n    GNU_TARGET_NAME=$(call qstrip,$(CONFIG_TARGET_NAME))\n  else\n    GNU_TARGET_NAME=$(shell gcc -dumpmachine)\n  endif\n  REAL_GNU_TARGET_NAME=$(GNU_TARGET_NAME)\n  LIBC:=$(call qstrip,$(CONFIG_LIBC))\n  TARGET_DIR_NAME:=target-$(GNU_TARGET_NAME)_$(LIBC)$(if $(BUILD_SUFFIX),_$(BUILD_SUFFIX))\n  TOOLCHAIN_DIR_NAME:=toolchain-$(GNU_TARGET_NAME)\nendif\n\nifeq ($(or $(CONFIG_EXTERNAL_TOOLCHAIN),$(CONFIG_TARGET_uml)),)\n  iremap = -f$(if $(CONFIG_REPRODUCIBLE_DEBUG_INFO),file,macro)-prefix-map=$(1)=$(2)\nendif\n\nPACKAGE_DIR?=$(BIN_DIR)/packages\nPACKAGE_DIR_ALL?=$(TOPDIR)/staging_dir/packages/$(BOARD)\nBUILD_DIR:=$(BUILD_DIR_BASE)/$(TARGET_DIR_NAME)\nSTAGING_DIR:=$(TOPDIR)/staging_dir/$(TARGET_DIR_NAME)\nBUILD_DIR_TOOLCHAIN:=$(BUILD_DIR_BASE)/$(TOOLCHAIN_DIR_NAME)\nTOOLCHAIN_DIR:=$(TOPDIR)/staging_dir/$(TOOLCHAIN_DIR_NAME)\nSTAMP_DIR:=$(BUILD_DIR)/stamp\nSTAMP_DIR_HOST=$(BUILD_DIR_HOST)/stamp\nTARGET_ROOTFS_DIR?=$(if $(call qstrip,$(CONFIG_TARGET_ROOTFS_DIR)),$(call qstrip,$(CONFIG_TARGET_ROOTFS_DIR)),$(BUILD_DIR))\nTARGET_DIR:=$(TARGET_ROOTFS_DIR)/root-$(BOARD)\nSTAGING_DIR_ROOT:=$(STAGING_DIR)/root-$(BOARD)\nSTAGING_DIR_IMAGE:=$(STAGING_DIR)/image\nBUILD_LOG_DIR:=$(if $(call qstrip,$(CONFIG_BUILD_LOG_DIR)),$(call qstrip,$(CONFIG_BUILD_LOG_DIR)),$(TOPDIR)/logs)\nPKG_INFO_DIR := $(STAGING_DIR)/pkginfo\n\nBUILD_DIR_HOST:=$(if $(IS_PACKAGE_BUILD),$(BUILD_DIR_BASE)/hostpkg,$(BUILD_DIR_BASE)/host)\nSTAGING_DIR_HOST:=$(abspath $(STAGING_DIR)/../host)\nSTAGING_DIR_HOSTPKG:=$(abspath $(STAGING_DIR)/../hostpkg)\n\nTARGET_PATH:=$(subst $(space),:,$(filter-out .,$(filter-out ./,$(subst :,$(space),$(PATH)))))\nTARGET_INIT_PATH:=$(call qstrip,$(CONFIG_TARGET_INIT_PATH))\nTARGET_INIT_PATH:=$(if $(TARGET_INIT_PATH),$(TARGET_INIT_PATH),/usr/sbin:/sbin:/usr/bin:/bin)\nTARGET_CFLAGS:=$(TARGET_OPTIMIZATION)$(if $(CONFIG_DEBUG), -g3) $(call qstrip,$(CONFIG_EXTRA_OPTIMIZATION))\nTARGET_CXXFLAGS = $(TARGET_CFLAGS)\nTARGET_ASFLAGS_DEFAULT = $(TARGET_CFLAGS)\nTARGET_ASFLAGS = $(TARGET_ASFLAGS_DEFAULT)\nifneq ($(CONFIG_EXTERNAL_TOOLCHAIN),)\nLIBGCC_S_PATH=$(realpath $(wildcard $(call qstrip,$(CONFIG_LIBGCC_ROOT_DIR))/$(call qstrip,$(CONFIG_LIBGCC_FILE_SPEC))))\nLIBGCC_S=$(if $(LIBGCC_S_PATH),-L$(dir $(LIBGCC_S_PATH)) -lgcc_s)\nLIBGCC_A=$(realpath $(lastword $(wildcard $(dir $(LIBGCC_S_PATH))/gcc/*/*/libgcc.a)))\nelse\nLIBGCC_A=$(lastword $(wildcard $(TOOLCHAIN_DIR)/lib/gcc/*/*/libgcc.a))\nLIBGCC_S=$(if $(wildcard $(TOOLCHAIN_DIR)/lib/libgcc_s.so),-L$(TOOLCHAIN_DIR)/lib -lgcc_s,$(LIBGCC_A))\nendif\n\nifeq ($(CONFIG_ARCH_64BIT),y)\n  LIB_SUFFIX:=64\nendif\n\nifndef DUMP\n  ifeq ($(CONFIG_EXTERNAL_TOOLCHAIN),)\n    -include $(TOOLCHAIN_DIR)/info.mk\n    export GCC_HONOUR_COPTS:=0\n    TARGET_CROSS:=$(if $(TARGET_CROSS),$(TARGET_CROSS),$(OPTIMIZE_FOR_CPU)-openwrt-linux$(if $(TARGET_SUFFIX),-$(TARGET_SUFFIX))-)\n    TOOLCHAIN_ROOT_DIR:=$(TOPDIR)/staging_dir/$(TOOLCHAIN_DIR_NAME)\n    TOOLCHAIN_BIN_DIRS:=$(TOOLCHAIN_ROOT_DIR)/bin\n    TOOLCHAIN_INC_DIRS:=$(TOOLCHAIN_ROOT_DIR)/usr/include $(TOOLCHAIN_ROOT_DIR)/include\n    TOOLCHAIN_LIB_DIRS:=$(TOOLCHAIN_ROOT_DIR)/usr/lib $(TOOLCHAIN_ROOT_DIR)/lib\n    TARGET_CFLAGS+= -fhonour-copts\n    ifeq ($(CONFIG_USE_MUSL),y)\n      TOOLCHAIN_INC_DIRS+= $(TOOLCHAIN_DIR)/include/fortify\n    endif\n  else\n    ifeq ($(CONFIG_NATIVE_TOOLCHAIN),)\n      -include $(TOOLCHAIN_DIR)/info.mk\n      TARGET_CROSS:=$(call qstrip,$(CONFIG_TOOLCHAIN_PREFIX))\n      TOOLCHAIN_ROOT_DIR:=$(call qstrip,$(CONFIG_TOOLCHAIN_ROOT))\n      TOOLCHAIN_BIN_DIRS:=$(patsubst ./%,$(TOOLCHAIN_ROOT_DIR)/%,$(call qstrip,$(CONFIG_TOOLCHAIN_BIN_PATH)))\n      TOOLCHAIN_INC_DIRS:=$(patsubst ./%,$(TOOLCHAIN_ROOT_DIR)/%,$(call qstrip,$(CONFIG_TOOLCHAIN_INC_PATH)))\n      TOOLCHAIN_LIB_DIRS:=$(patsubst ./%,$(TOOLCHAIN_ROOT_DIR)/%,$(call qstrip,$(CONFIG_TOOLCHAIN_LIB_PATH)))\n    endif\n  endif\n  ifneq ($(TOOLCHAIN_BIN_DIRS),)\n    TARGET_PATH:=$(subst $(space),:,$(TOOLCHAIN_BIN_DIRS)):$(TARGET_PATH)\n  endif\n  ifneq ($(TOOLCHAIN_INC_DIRS),)\n    TARGET_CPPFLAGS+= $(patsubst %,-I%,$(TOOLCHAIN_INC_DIRS))\n  endif\n  ifneq ($(TOOLCHAIN_LIB_DIRS),)\n    TARGET_LDFLAGS+= $(patsubst %,-L%,$(TOOLCHAIN_LIB_DIRS))\n  endif\nendif\n\nTARGET_LINKER?=bfd\nTARGET_LDFLAGS+= -fuse-ld=$(TARGET_LINKER)\n\nTARGET_PATH_PKG:=$(STAGING_DIR)/host/bin:$(STAGING_DIR_HOSTPKG)/bin:$(TARGET_PATH)\n\nifeq ($(CONFIG_SOFT_FLOAT),y)\n  SOFT_FLOAT_CONFIG_OPTION:=--with-float=soft\n  ifeq ($(CONFIG_arm),y)\n    TARGET_CFLAGS+= -mfloat-abi=soft\n  else\n    TARGET_CFLAGS+= -msoft-float\n  endif\nelse\n  SOFT_FLOAT_CONFIG_OPTION:=\n  ifeq ($(CONFIG_arm),y)\n    TARGET_CFLAGS+= -mfloat-abi=hard\n  endif\nendif\n\nexport ORIG_PATH:=$(if $(ORIG_PATH),$(ORIG_PATH),$(PATH))\nexport PATH:=$(TARGET_PATH)\nexport STAGING_DIR STAGING_DIR_HOST STAGING_DIR_HOSTPKG\nexport SH_FUNC:=. $(INCLUDE_DIR)/shell.sh;\n\nPKG_CONFIG:=$(STAGING_DIR_HOST)/bin/pkg-config\n\nexport PKG_CONFIG\n\nHOSTCC:=$(STAGING_DIR_HOST)/bin/gcc\nHOSTCXX:=$(STAGING_DIR_HOST)/bin/g++\nHOST_CPPFLAGS:=-I$(STAGING_DIR_HOST)/include $(if $(IS_PACKAGE_BUILD),-I$(STAGING_DIR_HOSTPKG)/include -I$(STAGING_DIR)/host/include)\nHOST_CFLAGS:=-O2 $(HOST_CPPFLAGS)\nHOST_CXXFLAGS:=$(HOST_CFLAGS)\nHOST_LDFLAGS:=-L$(STAGING_DIR_HOST)/lib $(if $(IS_PACKAGE_BUILD),-L$(STAGING_DIR_HOSTPKG)/lib -L$(STAGING_DIR)/host/lib)\n\nBUILD_KEY=$(TOPDIR)/key-build\nBUILD_KEY_APK_SEC=$(TOPDIR)/private-key.pem\nBUILD_KEY_APK_PUB=$(TOPDIR)/public-key.pem\n\nFAKEROOT:=$(STAGING_DIR_HOST)/bin/fakeroot\n\nTARGET_AR:=$(TARGET_CROSS)gcc-ar\nTARGET_RANLIB:=$(TARGET_CROSS)gcc-ranlib\nTARGET_NM:=$(TARGET_CROSS)gcc-nm\nTARGET_CC:=$(TARGET_CROSS)gcc\nTARGET_CXX:=$(TARGET_CROSS)g++\nTARGET_LD:=$(TARGET_CROSS)ld.$(TARGET_LINKER)\nKPATCH:=$(SCRIPT_DIR)/patch-kernel.sh\nFILECMD:=$(STAGING_DIR_HOST)/bin/file\nSED:=$(STAGING_DIR_HOST)/bin/sed -i -e\nESED:=$(STAGING_DIR_HOST)/bin/sed -E -i -e\nMKHASH:=$(STAGING_DIR_HOST)/bin/mkhash\n# MKHASH is used in /scripts, so we export it here.\nexport MKHASH\nCP:=cp -fpR\nLN:=ln -sf\nXARGS:=xargs -r\n\nBASH:=bash\nTAR:=tar\nFIND:=find\nPATCH:=patch\nPYTHON:=python3\n\nifeq ($(HOST_OS),Darwin)\n  TRUE:=/usr/bin/env gtrue\n  FALSE:=/usr/bin/env gfalse\nelse\n  TRUE:=/usr/bin/env true\n  FALSE:=/usr/bin/env false\nendif\n\nINSTALL_BIN:=install -m0755\nINSTALL_SUID:=install -m4755\nINSTALL_DIR:=install -d -m0755\nINSTALL_DATA:=install -m0644\nINSTALL_CONF:=install -m0600\n\nTARGET_CC_NOCACHE:=$(TARGET_CC)\nTARGET_CXX_NOCACHE:=$(TARGET_CXX)\nHOSTCC_NOCACHE:=$(HOSTCC)\nHOSTCXX_NOCACHE:=$(HOSTCXX)\nexport TARGET_CC_NOCACHE\nexport TARGET_CXX_NOCACHE\nexport HOSTCC_NOCACHE\nexport HOSTCXX_NOCACHE\n\nifneq ($(CONFIG_CCACHE),)\n  TARGET_CC:= ccache $(TARGET_CC)\n  TARGET_CXX:= ccache $(TARGET_CXX)\n  HOSTCC:= ccache $(HOSTCC)\n  HOSTCXX:= ccache $(HOSTCXX)\n  export CCACHE_BASEDIR:=$(TOPDIR)\n  export CCACHE_DIR:=$(if $(call qstrip,$(CONFIG_CCACHE_DIR)),$(call qstrip,$(CONFIG_CCACHE_DIR)),$(TOPDIR)/.ccache)\n  export CCACHE_COMPILERCHECK:=%compiler% -dumpmachine; %compiler% -dumpversion\nendif\n\nTARGET_CONFIGURE_OPTS = \\\n  AR=\"$(TARGET_AR)\" \\\n  AS=\"$(TARGET_CC) -c $(TARGET_ASFLAGS)\" \\\n  LD=\"$(TARGET_LD)\" \\\n  NM=\"$(TARGET_NM)\" \\\n  CC=\"$(TARGET_CC)\" \\\n  GCC=\"$(TARGET_CC)\" \\\n  CXX=\"$(TARGET_CXX)\" \\\n  RANLIB=\"$(TARGET_RANLIB)\" \\\n  STRIP=$(TARGET_CROSS)strip \\\n  OBJCOPY=$(TARGET_CROSS)objcopy \\\n  OBJDUMP=$(TARGET_CROSS)objdump \\\n  SIZE=$(TARGET_CROSS)size\n\n# strip an entire directory\nifneq ($(CONFIG_NO_STRIP),)\n  RSTRIP:=:\n  STRIP:=:\nelse\n  ifneq ($(CONFIG_USE_STRIP),)\n    STRIP:=$(TARGET_CROSS)strip $(call qstrip,$(CONFIG_STRIP_ARGS))\n  else\n    ifneq ($(CONFIG_USE_SSTRIP),)\n      STRIP:=$(STAGING_DIR_HOST)/bin/sstrip $(if $(CONFIG_SSTRIP_DISCARD_TRAILING_ZEROES),-z)\n    endif\n  endif\n  RSTRIP= \\\n    export CROSS=\"$(TARGET_CROSS)\" \\\n\t\t$(if $(PKG_BUILD_ID),KEEP_BUILD_ID=1) \\\n\t\t$(if $(CONFIG_KERNEL_KALLSYMS),NO_RENAME=1) \\\n\t\t$(if $(CONFIG_KERNEL_PROFILING),KEEP_SYMBOLS=1); \\\n    NM=\"$(TARGET_CROSS)nm\" \\\n    STRIP=\"$(STRIP)\" \\\n    STRIP_KMOD=\"$(SCRIPT_DIR)/strip-kmod.sh\" \\\n    PATCHELF=\"$(STAGING_DIR_HOST)/bin/patchelf\" \\\n    $(SCRIPT_DIR)/rstrip.sh\nendif\n\nNINJA = \\\n\tMAKEFLAGS=\"$(MAKE_JOBSERVER)\" \\\n\t$(STAGING_DIR_HOST)/bin/ninja \\\n\t\t$(if $(findstring c,$(OPENWRT_VERBOSE)),-v) \\\n\t\t$(if $(MAKE_JOBSERVER),,-j1)\n\nifeq ($(CONFIG_IPV6),y)\n  DISABLE_IPV6:=\nelse\n  DISABLE_IPV6:=--disable-ipv6\nendif\n\nTAR_OPTIONS:=-xf -\n\nifeq ($(CONFIG_BUILD_LOG),y)\n  BUILD_LOG:=1\nendif\n\nexport BISON_PKGDATADIR:=$(STAGING_DIR_HOST)/share/bison\nexport HOST_GNULIB_SRCDIR:=$(STAGING_DIR_HOST)/share/gnulib\nexport M4:=$(STAGING_DIR_HOST)/bin/m4\n\n##@\n# @brief Slugify variable name and prepend suffix.\n##\ndefine shvar\nV_$(subst .,_,$(subst -,_,$(subst /,_,$(1))))\nendef\n\n##@\n# @brief Create and export variable, set to function result.\n#\n# @param 1: Function name. Used as variable name, prepended with `V_`.\n##\ndefine shexport\nexport $(call shvar,$(1))=$$(call $(1))\nendef\n\n##@\n# @brief Support 64 bit tine in C code.\n#\n# Test support for 64-bit time with C code from largefile.m4 provided by GNU Gnulib\n# the value is `y` when successful and `` otherwise\n##\ndefine YEAR_2038\n$(shell \\\n  mkdir -p $(TMP_DIR); \\\n  echo '$(pound) include <time.h>' > $(TMP_DIR)/year2038.c; \\\n  echo '$(pound) define LARGE_TIME_T ((time_t) (((time_t) 1 << 30) - 1 + 3 * ((time_t) 1 << 30)))' >> $(TMP_DIR)/year2038.c; \\\n  echo 'int verify_time_t_range[(LARGE_TIME_T / 65537 == 65535 && LARGE_TIME_T % 65537 == 0) ? 1 : -1];' >> $(TMP_DIR)/year2038.c; \\\n  echo 'int main (void) {return 0;}' >> $(TMP_DIR)/year2038.c; \\\n  $(HOSTCC) $(TMP_DIR)/year2038.c -o /dev/null 2>/dev/null && echo y && rm -f $(TMP_DIR)/year2038.c || rm -f $(TMP_DIR)/year2038.c; \\\n)\nendef\n\n##@\n# @brief Execute commands under flock\n#\n# @param 1: The shell expression.\n# @param 2: The lock name. If not given, the global lock will be used.\n##\nifneq ($(wildcard $(STAGING_DIR_HOST)/bin/flock),)\n  define locked\n\tSHELL= \\\n\tflock \\\n\t\t$(TMP_DIR)/.$(if $(2),$(strip $(2)),global).flock \\\n\t\t-c '$(subst ','\\'',$(1))'\n  endef\nelse\n  locked=$(1)\nendif\n\n\n##@\n# @brief Recursively copy paths into another directory, purge dangling\n# symlinks before.\n#\n# @param 1: File glob expression.\n# @param 1: Destination directory.\n##\ndefine file_copy\n\tfor src_dir in $(sort $(foreach d,$(wildcard $(1)),$(dir $(d)))); do \\\n\t\t( cd $$src_dir; find -type f -or -type d ) | \\\n\t\t\t( cd $(2); while :; do \\\n\t\t\t\tread FILE; \\\n\t\t\t\t[ -z \"$$FILE\" ] && break; \\\n\t\t\t\t[ -L \"$$FILE\" ] || continue; \\\n\t\t\t\techo \"Removing symlink $(2)/$$FILE\"; \\\n\t\t\t\trm -f \"$$FILE\"; \\\n\t\t\tdone; ); \\\n\tdone; \\\n\t$(CP) $(1) $(2)\nendef\n\n##@\n# @brief Calculate sha256sum of any plain file within a given directory.\n#\n# @param 1: Input directory.\n# @param 2: If set, recurse into subdirectories.\n##\ndefine sha256sums\n\t(cd $(1); find . $(if $(2),,-maxdepth 1) -type f -not -name 'sha256sums' -printf \"%P\\n\" | sort | \\\n\t\txargs -r $(MKHASH) -n sha256 | sed -ne 's!^\\(.*\\) \\(.*\\)$$!\\1 *\\2!p' > sha256sums)\nendef\n\n##@\n# @brief Retrieve file extension.\n#\n# @param 1: File name.\n##\next=$(word $(words $(subst ., ,$(1))),$(subst ., ,$(1)))\n\n##@\n# @brief Count Git commits of a package.\n#\n# @param 1: if non-empty: count commits since last \": [uU]pdate to \"\n#           or \": [bB]ump to \" in commit message.\n##\ndefine commitcount\n$(shell \\\n  if git log -1 >/dev/null 2>/dev/null; then \\\n    if [ -n \"$(1)\" ]; then \\\n      last_bump=\"$$(git log --pretty=format:'%h %s' . | \\\n        grep -m 1 -e ': [uU]pdate to ' -e ': [bB]ump to ' | \\\n        cut -f 1 -d ' ')\"; \\\n    fi; \\\n    if [ -n \"$$last_bump\" ]; then \\\n      echo -n $$(($$(git rev-list --count \"$$last_bump..HEAD\" .) + 1)); \\\n    else \\\n      git rev-list --count HEAD .; \\\n    fi; \\\n  else \\\n    secs=\"$$(($(SOURCE_DATE_EPOCH) % 86400))\"; \\\n    date=\"$$(date --utc --date=\"@$(SOURCE_DATE_EPOCH)\" \"+%y%m%d\")\"; \\\n    printf '%s.%05d' \"$$date\" \"$$secs\"; \\\n  fi; \\\n)\nendef\n\n##@\n# @brief Get ABI version string, stripping `-`, `_` and `.`.\n#\n# @param 1: Version string.\n##\nabi_version_str = $(subst -,,$(subst _,,$(subst .,,$(1))))\n\nCOMMITCOUNT = $(if $(DUMP),0,$(call commitcount))\nAUTORELEASE = $(if $(DUMP),0,$(call commitcount,1))\n\nall:\nFORCE: ;\n.PHONY: FORCE\n\ncheck: FORCE\n\t@true\n\nval.%:\n\t@$(if $(filter undefined,$(origin $*)),\\\n\t\techo \"$* undefined\" >&2, \\\n\t\techo '$(subst ','\"'\"',$($*))' \\\n\t)\n\nvar.%:\n\t@$(if $(filter undefined,$(origin $*)),\\\n\t\techo \"$* undefined\" >&2, \\\n\t\techo \"$*='\"'$(subst ','\"'\\\"'\\\"'\"',$($*))'\"'\" \\\n\t)\n\nendif #__rules_inc\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "target",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolchain",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}