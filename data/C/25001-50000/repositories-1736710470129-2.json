{
  "metadata": {
    "timestamp": 1736710470129,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "php/php-src",
      "stars": 38512,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.7919921875,
          "content": "# https://editorconfig.org/\n\nroot = true\n\n[*]\ntrim_trailing_whitespace = true\ninsert_final_newline     = true\nend_of_line              = lf\ncharset                  = utf-8\ntab_width                = 4\n\n[{*.{awk,bat,c,cpp,d,dasc,h,l,re,skl,w32,y},Makefile*}]\nindent_size              = 4\nindent_style             = tab\n\n[*.{dtd,html,inc,php,phpt,rng,wsdl,xml,xsd,xsl}]\nindent_size              = 4\nindent_style             = space\n\n[*.{ac,m4,sh,yml}]\nindent_size              = 2\nindent_style             = space\n\n[*.md]\nindent_style             = space\nmax_line_length          = 80\n\n[COMMIT_EDITMSG]\nindent_size              = 4\nindent_style             = space\nmax_line_length          = 80\n\n[*.patch]\ntrim_trailing_whitespace = false\n\n[*.rst]\nindent_style             = space\nmax_line_length          = 100\n"
        },
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 13.0986328125,
          "content": "define set_ts\n\tset $tsrm_ls = $arg0\nend\n\ndocument set_ts\n\tset the ts resource, it is impossible for gdb to\n\tcall ts_resource_ex while no process is running,\n\tbut we could get the resource from the argument\n\tof frame info.\nend\n\ndefine ____executor_globals\n\tif basic_functions_module.zts\n\t\tset $tsrm_ls = _tsrm_ls_cache\n\t\tset $eg = ((zend_executor_globals*) (*((void ***) $tsrm_ls))[executor_globals_id-1])\n\t\tset $cg = ((zend_compiler_globals*) (*((void ***) $tsrm_ls))[compiler_globals_id-1])\n\t\tset $eg_ptr = $eg\n\telse\n\t\tset $eg = executor_globals\n\t\tset $cg = compiler_globals\n\t\tset $eg_ptr = (zend_executor_globals*) &executor_globals\n\tend\nend\n\ndocument ____executor_globals\n\tportable way of accessing executor_globals, set $eg\n\tthis also sets compiler_globals to $cg\n\tZTS detection is automatically based on ext/standard module struct\nend\n\ndefine print_cvs\n\tif $argc == 0\n\t\t____executor_globals\n\t\tset $cv_ex_ptr = $eg.current_execute_data\n\telse\n\t\tset $cv_ex_ptr = (zend_execute_data *)$arg0\n\tend\n\tset $cv_count = $cv_ex_ptr.func.op_array.last_var\n\tset $cv = $cv_ex_ptr.func.op_array.vars\n\tset $cv_idx = 0\n\tset $callFrameSize = (sizeof(zend_execute_data) + sizeof(zval) - 1) / sizeof(zval)\n\n\tprintf \"Compiled variables count: %d\\n\\n\", $cv_count\n\twhile $cv_idx < $cv_count\n\t\tprintf \"[%d] '%s'\\n\", $cv_idx, $cv[$cv_idx].val\n\t\tset $zvalue = ((zval *) $cv_ex_ptr) + $callFrameSize + $cv_idx\n\t\tprintzv $zvalue\n\t\tset $cv_idx = $cv_idx + 1\n\tend\nend\n\ndocument print_cvs\n\tPrints the compiled variables and their values.\n\tIf a zend_execute_data pointer is set this will print the compiled\n\tvariables of that scope. If no parameter is used it will use\n\tcurrent_execute_data for scope.\n\n\tusage: print_cvs [zend_execute_data *]\nend\n\ndefine dump_bt\n\tset $ex = $arg0\n\twhile $ex\n\t\tprintf \"[%p] \", $ex\n\t\tset $func = $ex->func\n\t\tif $func\n\t\t\tif $ex->This->value.obj\n\t\t\t\tif $func->common.scope\n\t\t\t\t\tprintf \"%s->\", (char*)$func->common.scope->name->val\n\t\t\t\telse\n\t\t\t\t\tprintf \"%s->\", (char*)$ex->This->value.obj->ce.name->val\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif $func->common.scope\n\t\t\t\t\tprintf \"%s::\", (char*)$func->common.scope->name->val\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tif $func->common.function_name\n\t\t\t\tprintf \"%s(\", (char*)$func->common.function_name->val\n\t\t\telse\n\t\t\t\tprintf \"(main\"\n\t\t\tend\n\n\t\t\tset $callFrameSize = (sizeof(zend_execute_data) + sizeof(zval) - 1) / sizeof(zval)\n\n\t\t\tset $count = $ex->This.u2.num_args\n\t\t\tset $arg = 0\n\t\t\twhile $arg < $count\n\t\t\t\tif $arg > 0\n\t\t\t\t\tprintf \", \"\n\t\t\t\tend\n\n\t\t\t\tset $zvalue = (zval *) $ex + $callFrameSize + $arg\n\t\t\t\tset $type = $zvalue->u1.v.type\n\t\t\t\tif $type == 1\n\t\t\t\t\tprintf \"NULL\"\n\t\t\t\tend\n\t\t\t\tif $type == 2\n\t\t\t\t\tprintf \"false\"\n\t\t\t\tend\n\t\t\t\tif $type == 3\n\t\t\t\t\tprintf \"true\"\n\t\t\t\tend\n\t\t\t\tif $type == 4\n\t\t\t\t\tprintf \"%ld\", $zvalue->value.lval\n\t\t\t\tend\n\t\t\t\tif $type == 5\n\t\t\t\t\tprintf \"%f\", $zvalue->value.dval\n\t\t\t\tend\n\t\t\t\tif $type == 6\n\t\t\t\t\t____print_str (char*)$zvalue->value.str->val $zvalue->value.str->len\n\t\t\t\tend\n\t\t\t\tif $type == 7\n\t\t\t\t\tprintf \"array(%d)[%p]\", $zvalue->value.arr->nNumOfElements, $zvalue\n\t\t\t\tend\n\t\t\t\tif $type == 8\n\t\t\t\t\tprintf \"object[%p]\", $zvalue\n\t\t\t\tend\n\t\t\t\tif $type == 9\n\t\t\t\t\tprintf \"resource(#%d)\", $zvalue->value.lval\n\t\t\t\tend\n\t\t\t\tif $type == 10\n\t\t\t\t\tprintf \"reference\"\n\t\t\t\tend\n\t\t\t\tif $type > 10\n\t\t\t\t\tprintf \"unknown type %d\", $type\n\t\t\t\tend\n\t\t\t\tset $arg = $arg + 1\n\t\t\tend\n\n\t\t\tprintf \") \"\n\t\telse\n\t\t\tprintf \"??? \"\n\t\tend\n\t\tif $func != 0\n\t\t\tif $func->type == 2\n\t\t\t\tprintf \"%s:%d \", (char*)$func->op_array.filename->val, $ex->opline->lineno\n\t\t\telse\n\t\t\t\tprintf \"[internal function]\"\n\t\t\tend\n\t\tend\n\t\tset $ex = $ex->prev_execute_data\n\t\tprintf \"\\n\"\n\tend\nend\n\ndocument dump_bt\n\tdumps the current execution stack. usage: dump_bt executor_globals.current_execute_data\nend\n\ndefine printzv\n\tset $ind = 1\n\t____printzv $arg0 0\nend\n\ndocument printzv\n\tprints zval contents\nend\n\ndefine ____printzv_contents\n\tset $zvalue = $arg0\n\tset $type = $zvalue->u1.v.type\n\n\t# 15 == IS_INDIRECT\n\tif $type > 5 && $type < 12\n\t\tprintf \"(refcount=%d) \", $zvalue->value.counted->gc.refcount\n\tend\n\n\tif $type == 0\n\t\tprintf \"UNDEF\"\n\tend\n\tif $type == 1\n\t\tprintf \"NULL\"\n\tend\n\tif $type == 2\n\t\tprintf \"bool: false\"\n\tend\n\tif $type == 3\n\t\tprintf \"bool: true\"\n\tend\n\tif $type == 4\n\t\tprintf \"long: %ld\", $zvalue->value.lval\n\tend\n\tif $type == 5\n\t\tprintf \"double: %f\", $zvalue->value.dval\n\tend\n\tif $type == 6\n\t\tprintf \"string: %s\", (char*)$zvalue->value.str->val\n\tend\n\tif $type == 7\n\t\tprintf \"array: \"\n\t\tif ! $arg1\n\t\t\tset $ind = $ind + 1\n\t\t\t____print_ht $zvalue->value.arr 1\n\t\t\tset $ind = $ind - 1\n\t\t\tset $i = $ind\n\t\t\twhile $i > 0\n\t\t\t\tprintf \"  \"\n\t\t\t\tset $i = $i - 1\n\t\t\tend\n\t\tend\n\t\tset $type = 0\n\tend\n\tif $type == 8\n\t\tprintf \"object\"\n\t\t____executor_globals\n\t\tset $handle = $zvalue->value.obj.handle\n\t\tset $handlers = $zvalue->value.obj.handlers\n\t\tset $zobj = $zvalue->value.obj\n\t\tset $cname = (char*)$zobj->ce->name->val\n\t\tprintf \"(%s) #%d\", $cname, $handle\n\t\tif ! $arg1\n\t\t\tif $handlers->get_properties == &zend_std_get_properties\n\t\t\t\tif $zobj->properties\n\t\t\t\t\tprintf \"\\nProperties \"\n\t\t\t\t\tset $ht = $zobj->properties\n\t\t\t\t\tset $ind = $ind + 1\n\t\t\t\t\t____print_ht $ht 1\n\t\t\t\t\tset $ind = $ind - 1\n\t\t\t\t\tset $i = $ind\n\t\t\t\t\twhile $i > 0\n\t\t\t\t\t\tprintf \"  \"\n\t\t\t\t\t\tset $i = $i - 1\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tprintf \" {\\n\"\n\t\t\t\t\tset $ht = &$zobj->ce->properties_info\n\t\t\t\t\tset $k = 0\n\t\t\t\t\tset $num = $ht->nNumUsed\n\t\t\t\t\twhile $k < $num\n\t\t\t\t\t\tset $p = (Bucket*)($ht->arData + $k)\n\t\t\t\t\t\tset $name = $p->key\n\t\t\t\t\t\tset $prop = (zend_property_info*)$p->val.value.ptr\n\t\t\t\t\t\tset $val = (zval*)((char*)$zobj + $prop->offset)\n\t\t\t\t\t\tprintf \"%s => \", (char*)$name->val\n\t\t\t\t\t\tprintzv $val\n\t\t\t\t\t\tset $k = $k + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tset $type = 0\n\tend\n\tif $type == 9\n\t\tprintf \"resource: #%d\", $zvalue->value.res->handle\n\tend\n\tif $type == 10\n\t\tprintf \"reference: \"\n\t\t____printzv &$zvalue->value.ref->val $arg1\n\tend\n\tif $type == 11\n\t\tprintf \"CONSTANT_AST\"\n\tend\n\tif $type == 12\n\t\tprintf \"indirect: \"\n\t\t____printzv $zvalue->value.zv $arg1\n\tend\n\tif $type == 13\n\t\tprintf \"pointer: %p\", $zvalue->value.ptr\n\tend\n\tif $type == 15\n\t\tprintf \"_ERROR\"\n\tend\n\tif $type == 16\n\t\tprintf \"_BOOL\"\n\tend\n\tif $type == 17\n\t\tprintf \"_NUMBER\"\n\tend\n\tif $type > 17\n\t\tprintf \"unknown type %d\", $type\n\tend\n\tprintf \"\\n\"\nend\n\ndefine ____printzv\n\t____executor_globals\n\tset $zvalue = $arg0\n\n\tprintf \"[%p] \", $zvalue\n\n\tset $zcontents = (zval*) $zvalue\n\tif $arg1\n\t\t____printzv_contents $zcontents $arg1\n\telse\n\t\t____printzv_contents $zcontents 0\n\tend\nend\n\ndefine print_global_vars\n\t____executor_globals\n\tset $symtable = ((HashTable *)&($eg_ptr->symbol_table))\n\tprint_ht $symtable\nend\n\ndocument print_global_vars\n\tPrints the global variables\nend\n\ndefine print_const_table\n\tset $ind = 1\n\tprintf \"[%p] {\\n\", $arg0\n\t____print_ht $arg0 4\n\tprintf \"}\\n\"\nend\n\ndocument print_const_table\n\tDumps elements of Constants HashTable\n\tExample: print_const_table executor_globals.zend_constants\nend\n\ndefine ____print_ht\n\tset $ht = (HashTable*)$arg0\n\tset $n = $ind\n\twhile $n > 0\n\t\tprintf \"  \"\n\t\tset $n = $n - 1\n\tend\n\n\tset $packed = $ht->u.v.flags & 4\n\tif $packed\n\t\tprintf \"Packed\"\n\telse\n\t\tprintf \"Hash\"\n\tend\n\tprintf \"(%d)[%p]: {\\n\", $ht->nNumOfElements, $ht\n\n\tset $num = $ht->nNumUsed\n\tset $i = 0\n\tset $ind = $ind + 1\n\twhile $i < $num\n\t\tif $packed\n\t\t\tset $val = (zval*)($ht->arPacked + $i)\n\t\t\tset $key = (zend_string*)0\n\t\t\tset $h = $i\n\t\telse\n\t\t\tset $bucket = (Bucket*)($ht->arData + $i)\n\t\t\tset $val = &$bucket->val\n\t\t\tset $key = $bucket->key\n\t\t\tset $h = $bucket->h\n\t\tend\n\t\tset $n = $ind\n\t\tif $val->u1.v.type > 0\n\t\t\twhile $n > 0\n\t\t\t\tprintf \"  \"\n\t\t\t\tset $n = $n - 1\n\t\t\tend\n\t\t\tprintf \"[%d] \", $i\n\t\t\tif $key\n\t\t\t\t____print_str (char*)$key->val $key->len\n\t\t\t\tprintf \" => \"\n\t\t\telse\n\t\t\t\tprintf \"%d => \", $h\n\t\t\tend\n\t\t\tif $arg1 == 0\n\t\t\t\tprintf \"%p\\n\", $val\n\t\t\tend\n\t\t\tif $arg1 == 1\n\t\t\t\tset $zval = $val\n\t\t\t\t____printzv $zval 1\n\t\t\tend\n\t\t\tif $arg1 == 2\n\t\t\t\tprintf \"%s\\n\", (char*)$val->value.ptr\n\t\t\tend\n\t\t\tif $arg1 == 3\n\t\t\t\tset $func = (zend_function*)$val->value.ptr\n\t\t\t\tprintf \"\\\"%s\\\"\\n\", (char*)$func->common.function_name->val\n\t\t\tend\n\t\t\tif $arg1 == 4\n\t\t\t\tset $const = (zend_constant *)$val->value.ptr\n\t\t\t\t____printzv $const 1\n\t\t\tend\n\t\tend\n\t\tset $i = $i + 1\n\tend\n\tset $ind = $ind - 1\n\tprintf \"}\\n\"\nend\n\ndefine print_ht\n\tset $ind = 0\n\t____print_ht $arg0 1\nend\n\ndocument print_ht\n\tdumps elements of HashTable made of zval\nend\n\ndefine print_htptr\n\tset $ind = 0\n\t____print_ht $arg0 0\nend\n\ndocument print_htptr\n\tdumps elements of HashTable made of pointers\nend\n\ndefine print_htstr\n\tset $ind = 0\n\t____print_ht $arg0 2\nend\n\ndocument print_htstr\n\tdumps elements of HashTable made of strings\nend\n\ndefine print_ft\n\tset $ind = 0\n\t____print_ht $arg0 3\nend\n\ndocument print_ft\n\tdumps a function table (HashTable)\nend\n\ndefine ____print_inh_class\n\tset $ce = $arg0\n\tif $ce->ce_flags & 0x10 || $ce->ce_flags & 0x20\n\t\tprintf \"abstract \"\n\telse\n\t\tif $ce->ce_flags & 0x40\n\t\t\tprintf \"final \"\n\t\tend\n\tend\n\tprintf \"class %s\", (char*)$ce->name->val\n\tif $ce->parent != 0\n\t\tprintf \" extends %s\", (char*)$ce->parent->name->val\n\tend\n\tif $ce->num_interfaces != 0\n\t\tprintf \" implements\"\n\t\tset $tmp = 0\n\t\twhile $tmp < $ce->num_interfaces\n\t\t\tprintf \" %s\", (char*)$ce->interfaces[$tmp]->name->val\n\t\t\tset $tmp = $tmp + 1\n\t\t\tif $tmp < $ce->num_interfaces\n\t\t\t\tprintf \",\"\n\t\t\tend\n\t\tend\n\tend\n\tset $ce = $ce->parent\nend\n\ndefine ____print_inh_iface\n\tset $ce = $arg0\n\tprintf \"interface %s\", (char*)$ce->name->val\n\tif $ce->num_interfaces != 0\n\t\tset $ce = $ce->interfaces[0]\n\t\tprintf \" extends %s\", (char*)$ce->name->val\n\telse\n\t\tset $ce = 0\n\tend\nend\n\ndefine print_inh\n\tset $ce = $arg0\n\tset $depth = 0\n\twhile $ce != 0\n\t\tset $tmp = $depth\n\t\twhile $tmp != 0\n\t\t\tprintf \" \"\n\t\t\tset $tmp = $tmp - 1\n\t\tend\n\t\tset $depth = $depth + 1\n\t\tif $ce->ce_flags & 0x80\n\t\t\t____print_inh_iface $ce\n\t\telse\n\t\t\t____print_inh_class $ce\n\t\tend\n\t\tprintf \" {\\n\"\n\tend\n\twhile $depth != 0\n\t\tset $tmp = $depth\n\t\twhile $tmp != 1\n\t\t\tprintf \" \"\n\t\t\tset $tmp = $tmp - 1\n\t\tend\n\t\tprintf \"}\\n\"\n\t\tset $depth = $depth - 1\n\tend\nend\n\ndefine print_pi\n\tset $pi = (zend_property_info *)$arg0\n\tset $initial_offset = ((uint32_t)(uintptr_t)(&((zend_object*)0)->properties_table[(0)]))\n\tset $ptr_to_val = (zval*)((char*)$pi->ce->default_properties_table + $pi->offset - $initial_offset)\n\tprintf \"[%p] {\\n\", $pi\n\tprintf \"    offset = %p\\n\", $pi->offset\n\tprintf \"    ce = [%p] %s\\n\", $pi->ce, (char*)$pi->ce->name->val\n\tprintf \"    flags = 0x%x (\", $pi->flags\n\tif $pi->flags & 0x100\n\t\tprintf \"ZEND_ACC_PUBLIC\"\n\telse\n\t\tif $pi->flags & 0x200\n\t\t\tprintf \"ZEND_ACC_PROTECTED\"\n\t\telse\n\t\t\tif $pi->flags & 0x400\n\t\t\t\tprintf \"ZEND_ACC_PRIVATE\"\n\t\t\telse\n\t\t\t\tif $pi->flags & 0x800\n\t\t\t\t\tprintf \"ZEND_ACC_EARLY_BINDING\"\n\t\t\t\telse\n\t\t\t\t\tif $pi->flags & 0x20000\n\t\t\t\t\t\tprintf \"ZEND_ACC_SHADOW\"\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tprintf \")\\n\"\n\tprintf \"    name  = \"\n\tprint_zstr $pi->name\n\tprintf \"    default value: \"\n\tprintzv $ptr_to_val\n\tprintf \"}\\n\"\nend\n\ndocument print_pi\n\tTakes a pointer to an object's property and prints the property information\n\tusage: print_pi <ptr>\nend\n\ndefine ____print_str\n\tset $tmp = 0\n\tset $str = $arg0\n\tif $argc > 2\n\t\tset $maxlen = $arg2\n\telse\n\t\tset $maxlen = 256\n\tend\n\n\tprintf \"\\\"\"\n\twhile $tmp < $arg1 && $tmp < $maxlen\n\t\tif $str[$tmp] > 31 && $str[$tmp] < 127\n\t\t\tprintf \"%c\", $str[$tmp]\n\t\telse\n\t\t\tprintf \"\\\\%o\", $str[$tmp]\n\t\tend\n\t\tset $tmp = $tmp + 1\n\tend\n\tif $tmp != $arg1\n\t\tprintf \"...\"\n\tend\n\tprintf \"\\\"\"\nend\n\ndefine printzn\n\t____executor_globals\n\tset $ind = 0\n\tset $znode = $arg0\n\tif $znode->op_type == 1\n\t\tset $optype = \"IS_CONST\"\n\tend\n\tif $znode->op_type == 2\n\t\tset $optype = \"IS_TMP_VAR\"\n\tend\n\tif $znode->op_type == 4\n\t\tset $optype = \"IS_VAR\"\n\tend\n\tif $znode->op_type == 8\n\t\tset $optype = \"IS_UNUSED\"\n\tend\n\n\tprintf \"[%p] %s\", $znode, $optype\n\n\tif $znode->op_type == 1\n\t\tprintf \": \"\n\t\t____printzv &$znode->u.constant 0\n\tend\n\tif $znode->op_type == 2\n\t\tprintf \": \"\n\t\tset $tvar = (union _temp_variable *)((char *)$eg.current_execute_data->Ts + $znode->u.var)\n\t\t____printzv ((union _temp_variable *)$tvar)->tmp_var 0\n\tend\n\tif $znode->op_type == 4\n\t\tprintf \": \"\n\t\tset $tvar = (union _temp_variable *)((char *)$eg.current_execute_data->Ts + $znode->u.var)\n\t\t____printzv *$tvar->var.ptr_ptr 0\n\tend\n\tif $znode->op_type == 8\n\t\tprintf \"\\n\"\n\tend\nend\n\ndocument printzn\n\tprint type and content of znode.\n\tusage: printzn &opline->op1\nend\n\ndefine printzops\n\tprintf \"op1 => \"\n\tprintzn &execute_data->opline.op1\n\tprintf \"op2 => \"\n\tprintzn &execute_data->opline.op2\n\tprintf \"result => \"\n\tprintzn &execute_data->opline.result\nend\n\ndocument printzops\n\tdump operands of the current opline\nend\n\ndefine print_zstr\n\tset $zstr = (zend_string *)$arg0\n\tif $argc == 2\n\t\tset $maxlen = $arg1\n\telse\n\t\tset $maxlen = $zstr->len\n\tend\n\tprintf \"string(%d) \", $zstr->len\n\t____print_str (char*)$zstr->val $zstr->len $maxlen\n\tprintf \"\\n\"\nend\n\ndocument print_zstr\n\tprint the length and contents of a zend string\n\tusage: print_zstr <ptr> [max length]\nend\n\ndefine zbacktrace\n\t____executor_globals\n\tdump_bt $eg.current_execute_data\nend\n\ndocument zbacktrace\n\tprints backtrace.\n\tThis command is almost a short cut for\n\t> (gdb) ____executor_globals\n\t> (gdb) dump_bt $eg.current_execute_data\nend\n\ndefine lookup_root\n\tset $found = 0\n\tif gc_globals->roots\n\t\tset $current = gc_globals->roots->next\n\t\tprintf \"looking ref %p in roots\\n\", $arg0\n\t\twhile $current != &gc_globals->roots\n\t\t\tif $current->ref == $arg0\n\t\t\t\tset $found = $current\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tset $current = $current->next\n\t\tend\n\t\tif $found != 0\n\t\t\tprintf \"found root %p\\n\", $found\n\t\telse\n\t\t\tprintf \"not found\\n\"\n\t\tend\n\tend\nend\n\ndocument lookup_root\n\tlookup a refcounted in root\n\tusage: lookup_root [ptr].\nend\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.14453125,
          "content": "# Replace $Id$ strings with 40-character hexadecimal blob object name.\n/ext/ext_skel.php               ident\n/ext/phar/phar/pharcommand.inc  ident\n/ext/dba/libinifile/inifile.c   ident\n/ext/dba/libflatfile/flatfile.c ident\n/ext/dba/libcdb/cdb_make.c      ident\n/ext/dba/libcdb/cdb.c           ident\n/run-tests.php                  ident\n\n# A custom merge driver to avoid automatic merges. These are manually merged.\n# See https://wiki.php.net/vcs/gitfaq\n/NEWS                merge=NEWS\n/UPGRADING           merge=NEWS\n/UPGRADING.INTERNALS merge=NEWS\n\n# Configure proper diff drivers to improve the context lines in the output\n# of git diff and to improve token splitting for --word-diff.\n*.phpt diff=php\n*.php diff=php\n*.[ch] diff=cpp\n\n# Collapse generated files within git and pull request diff.\n**/*_arginfo.h linguist-generated -diff\n/main/gdb_inlined_script.c linguist-generated -diff\n/Zend/zend_vm_execute.h linguist-generated -diff\n/Zend/zend_vm_handlers.h linguist-generated -diff\n/Zend/zend_vm_opcodes.[ch] linguist-generated -diff\n\n# The OSS fuzz files are binary\n/ext/date/tests/ossfuzz*.txt binary\n\n# Vendored libraries\n/ext/dom/lexbor/lexbor linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 8.6796875,
          "content": "# These files are generated during building or development and are intentionally\n# untracked to ignore by Git. For other development environment specific files,\n# such as editor configuration, a good practice is to exclude them using the\n# .git/info/exclude in the cloned repository or a global .gitignore file.\n\n# ------------------------------------------------------------------------------\n# Common files ignored across the repository\n# ------------------------------------------------------------------------------\n\n# Backup copies created by various editors or development tools\n*~\n\n# Patches downloaded to patch files or to apply open source contributions\n*.patch\n\n# Swap files created by editors and tools to indicate a locked file\n*.swp\n\n# Various temporary generated files\n*.tmp\n\n# ------------------------------------------------------------------------------\n# Generated by the PHP build system\n# ------------------------------------------------------------------------------\n\n# Archive library containing .o files, generated during build process\n*.a\n\n# Libtool library files generated during build process\n*.la\n\n# Directories created by Libtool for storing generated library files\n.libs/\n\n# Library object files generated during build process\n*.lo\n\n# Temporary library object files generated by compiler and libtool due to failure\n*.loT\n\n# Standard object files generated during build process\n*.o\n\n# Dependency files generated during build process\n*.dep\n\n# Cache directories created by Autoconf tools\nautom4te.cache/\n\n# Cache file(s) generated by Autoconf's configure when run as `configure -C`\nconfig.cache\n\n# A log file(s) generated by Autoconf during *nix build system\nconfig.log\n\n# Helper(s) generated by *nix build system to save the last configure command\nconfig.nice\n\n# Generated by Autoconf's configure script for instantiating templates\nconfig.status\n\n# Main *nix build system configuration script(s) generated by Autoconf\nconfigure\n\n# Generated by `./configure` when test programs create temporary files\nconfdefs.h\nconftest*\n\n# Generated by configure scripts on all systems\n/main/internal_functions.c\n/main/internal_functions_cli.c\n\n# The Libtool script(s) generated by the *nix build system\nlibtool\n\n# Makefile(s) generated from Makefile fragment templates by `./configure`\nMakefile\nMakefile.fragments\nMakefile.objects\n\n# Directories for shared object files generated by `./configure`\nlibs/\nmodules/\n\n# Used by build/gen_stub.php\nbuild/PHP-Parser-*\n\n# ------------------------------------------------------------------------------\n# Configuration headers generated by the PHP build system\n# ------------------------------------------------------------------------------\nconfig.h\nconfig.h.in\n/ext/date/lib/timelib_config.h\n/main/build-defs.h\n/main/php_config.h.in\n/main/php_config.h\n/Zend/zend_config.h\n\n# ------------------------------------------------------------------------------\n# Manual (man 1 and 8) pages generated from templates for *nix alike systems\n# ------------------------------------------------------------------------------\n/ext/phar/phar.1\n/ext/phar/phar.phar.1\n/sapi/cgi/php-cgi.1\n/sapi/cli/php.1\n/sapi/fpm/php-fpm.1\n/sapi/fpm/php-fpm.8\n/sapi/phpdbg/phpdbg.1\n/scripts/man1/*.1\n\n# ------------------------------------------------------------------------------\n# SAPIs specific ignores\n# ------------------------------------------------------------------------------\n/sapi/apache2handler/libphp.module\n/sapi/fpm/fpm/php-cgi\n/sapi/fpm/init.d.php-fpm\n/sapi/fpm/php-fpm.conf\n/sapi/fpm/php-fpm.service\n/sapi/fpm/status.html\n/sapi/fpm/www.conf\n\n# ------------------------------------------------------------------------------\n# Executable binaries and scripts generated during the build process\n# ------------------------------------------------------------------------------\n/ext/phar/phar.phar\n/ext/phar/phar.php\n/pear/install-pear-nozlib.phar\n/sapi/cgi/php-cgi\n/sapi/fpm/php-fpm\n/sapi/phpdbg/phpdbg\n/scripts/php-config\n/scripts/phpize\nphp\n\n# ------------------------------------------------------------------------------\n# Lexer files generated by re2c\n# ------------------------------------------------------------------------------\n/ext/json/json_scanner.c\n/ext/json/php_json_scanner_defs.h\n/ext/pdo*/*_sql_parser.c\n/ext/phar/phar_path_check.c\n/ext/standard/url_scanner_ex.c\n/ext/standard/var_unserializer.c\n/sapi/phpdbg/phpdbg_lexer.c\n/Zend/zend_ini_scanner.c\n/Zend/zend_ini_scanner_defs.h\n/Zend/zend_language_scanner.c\n/Zend/zend_language_scanner_defs.h\n\n# ------------------------------------------------------------------------------\n# PHP parser files generated by bison during the build process\n# ------------------------------------------------------------------------------\n/ext/json/json_parser.tab.h\n/ext/json/json_parser.tab.c\n/sapi/phpdbg/phpdbg_parser.c\n/sapi/phpdbg/phpdbg_parser.h\n/sapi/phpdbg/phpdbg_parser.output\n/Zend/zend_ini_parser.c\n/Zend/zend_ini_parser.h\n/Zend/zend_ini_parser.output\n/Zend/zend_language_parser.c\n/Zend/zend_language_parser.h\n/Zend/zend_language_parser.output\n\n# ------------------------------------------------------------------------------\n# Extensions files\n# ------------------------------------------------------------------------------\n\n# Miscellaneous extensions files\n/ext/fileinfo/libmagic.orig/\n/ext/opcache/jit/zend_jit_x86.c\n/ext/opcache/jit/zend_jit_arm64.c\n/ext/opcache/minilua\n\n# Generated by `cd ext/name && phpize && ./configure`\n/ext/*/build/\n/ext/*/configure.ac\n/ext/*/run-tests.php\n\n# Generated by ./configure if libc might be musl\n/ext/gettext/tests/locale/en_US\n\n# ------------------------------------------------------------------------------\n# Generated by Windows build system\n# ------------------------------------------------------------------------------\n\n# Generated by `/buildconf.bat`\n/configure.bat\n/configure.js\n\n# Generated by `/configure.(bat|js)` (architecture dependent)\n/config.nice.bat\n\n# NTS debug build x86\n/Debug/\n\n# ZTS debug build x86\n/Debug_TS/\n\n# NTS build x86\n/Release/\n\n# ZTS build x86\n/Release_TS/\n\n# Generated by x64 compiler, includes Debug, Debug_TS, Release, Release_TS\n/x64/\n\n# Generated by arm64 compiler, includes Debug, Debug_TS, Release, Release_TS\n/arm64/\n\n# Miscellaneous files generated by Windows build system\n/main/config.w32.h\n/win32/build/deplister.exe\n/win32/build/deplister.obj\n/win32/*.aps\n/win32/*.positions\n/win32/*.suo\n/win32/ext\n/win32/syslog.reg\n/win32/wsyslog.h\n\n# Standard object files generated by Visual Studio\n*.obj\n\n# ------------------------------------------------------------------------------\n# Tests\n# ------------------------------------------------------------------------------\n\n# Generated by `./run-tests.php` upon failure\n**/tests/**/*.diff\n**/tests/**/*.out*\n**/tests/**/*.php\n**/tests/**/*.exp\n**/tests/**/*.log\n**/tests/**/*.sh\n\n# Generated by some test cases\n**/tests/**/*.db\n\n# Microsoft Access database created for passing to tests\n/ext/pdo_odbc/tests/*.mdb\n\n# Files generated by `./run-tests.php -m` when checking for memory leaks\n**/tests/**/*.mem\n\n# Test results generated by `./run-tests.php`\nphp_test_results_*.txt\n\n# Temporary test information generated by `./run-tests.php`\n/run-test-info.php\n\n# Temporary POST data placeholder files generated by `./run-tests.php`\nphpt.*\n\n# Temporary PHP INI configuration file(s) for tests, generated by `make test`\ntmp-php.ini\n\n# ------------------------------------------------------------------------------\n# Generated by GCC's gcov and LCOV via build/Makefile.gcov\n# ------------------------------------------------------------------------------\n*.gcda\n*.gcno\n/gcovr.xml\n/gcovr_html/\n/lcov_html/\n/php_lcov.info\n\n# ------------------------------------------------------------------------------\n# Archives generated during the PHP release process\n# ------------------------------------------------------------------------------\n/*.manifest\n/*.tar.gz\n/*.tar.bz2\n/*.tar.xz\n/*.tar.gz.asc\n/*.tar.bz2.asc\n/*.tar.xz.asc\n\n# ------------------------------------------------------------------------------\n# Generated by `./configure --enable-dtrace` for using DTrace framework\n# ------------------------------------------------------------------------------\n/Zend/zend_dtrace_gen.h\n/Zend/zend_dtrace_gen.h.bak\n\n# ------------------------------------------------------------------------------\n# GitHub actions cache\n# ------------------------------------------------------------------------------\n/branch-commit-cache.json\n/junit.out.xml\n/.ccache/\n\n# ------------------------------------------------------------------------------\n# Special cases to invert previous ignore patterns\n# ------------------------------------------------------------------------------\n!/ext/bcmath/libbcmath/src/config.h\n!/ext/fileinfo/libmagic/config.h\n!/ext/fileinfo/libmagic.patch\n!/ext/fileinfo/magicdata.patch\n!/ext/dom/lexbor/patches/*.patch\n!/ext/pcre/pcre2lib/config.h\n!/win32/build/Makefile\n"
        },
        {
          "name": "CODING_STANDARDS.md",
          "type": "blob",
          "size": 11.1533203125,
          "content": "# PHP coding standards\n\nThis file lists standards that any programmer adding or changing code in\nPHP should follow. The code base does not yet fully follow it, but new\nfeatures are going in that general direction. Many sections have been\nrewritten to comply with these rules.\n\n## Code implementation\n\n1. Document your code in source files and the manual. (tm)\n\n1. PHP is implemented in C11.\n    For instance, the optional fixed-width integers from\n    stdint.h (int8_t, int16_t, int32_t, int64_t and their unsigned\n    counterparts) are supposed to be available.\n\n1. Functions that are given pointers to resources should not free them.\n\n    For instance, `function int mail(char *to, char *from)` should NOT free `to`\n    and/or `from`.\n\n    Exceptions:\n\n    * The function's designated behavior is freeing that resource. E.g.\n      `efree()`\n\n    * The function is given a boolean argument, that controls whether or not the\n      function may free its arguments (if true, the function must free its\n      arguments; if false, it must not)\n\n    * Low-level parser routines, that are tightly integrated with the token\n      cache and the bison code for minimum memory copying overhead.\n\n1. Functions that are tightly integrated with other functions within the same\n    module, and rely on each other's non-trivial behavior, should be documented as\n    such and declared `static`. They should be avoided if possible.\n\n1. Use definitions and macros whenever possible, so that constants have\n    meaningful names and can be easily manipulated. Any use of a numeric\n    constant to specify different behavior or actions should be done through\n    a `#define`.\n\n1. When writing functions that deal with strings, be sure to remember that PHP\n    holds the length property of each string, and that it shouldn't be\n    calculated with `strlen()`. Write your functions in such a way so that\n    they'll take advantage of the length property, both for efficiency and in\n    order for them to be binary-safe. Functions that change strings and obtain\n    their new lengths while doing so, should return that new length, so it\n    doesn't have to be recalculated with `strlen()` (e.g. `php_addslashes()`).\n\n1. NEVER USE `strncat()`. If you're absolutely sure you know what you're doing,\n    check its man page again, and only then, consider using it, and even then,\n    try avoiding it.\n\n1. Use `PHP_*` macros in the PHP source, and `ZEND_*` macros in the Zend part of\n    the source. Although the `PHP_*` macros are mostly aliased to the `ZEND_*`\n    macros it gives a better understanding on what kind of macro you're calling.\n\n1. Do not define functions that are not available. For instance, if a library is\n    missing a function, do not define the PHP version of the function, and do\n    not raise a run-time error about the function not existing. End users should\n    use `function_exists()` to test for the existence of a function.\n\n1. Prefer `emalloc()`, `efree()`, `estrdup()`, etc. to their standard C library\n    counterparts. These functions implement an internal \"safety-net\" mechanism\n    that ensures the deallocation of any unfreed memory at the end of a request.\n    They also provide useful allocation and overflow information while running\n    in debug mode.\n\n    In almost all cases, memory returned to the engine must be allocated using\n    `emalloc()`.\n\n    The use of `malloc()` should be limited to cases where a third-party library\n    may need to control or free the memory, or when the memory in question needs\n    to survive between multiple requests.\n\n1. The return type of \"is\" or \"has\" style functions should be `bool`,\n    which return a \"yes\"/\"no\" answer.  `zend_result` is an appropriate\n    return value for functions that perform some operation that may\n    succeed or fail.\n\n## User functions/methods naming conventions\n\n1. Function names for user-level functions should be enclosed with in the\n    `PHP_FUNCTION()` macro. They should be in lowercase, with words underscore\n    delimited, with care taken to minimize the letter count. Abbreviations\n    should not be used when they greatly decrease the readability of the\n    function name itself:\n\n    Good:\n\n    ```php\n    str_word_count\n    array_key_exists\n    ```\n\n    Ok:\n\n    ```php\n    date_interval_create_from_date_string\n    // Could be 'date_intvl_create_from_date_str'?\n    get_html_translation_table()\n    // Could be 'html_get_trans_table'?\n    ```\n\n    Bad:\n\n    ```php\n    hw_GetObjectByQueryCollObj\n    pg_setclientencoding\n    jf_n_s_i\n    ```\n\n1. If they are part of a \"parent set\" of functions, that parent should be\n    included in the user function name, and should be clearly related to the\n    parent program or function family. This should be in the form of `parent_*`:\n\n    A family of `foo` functions, for example:\n\n    Good:\n\n    ```php\n    foo_select_bar\n    foo_insert_baz\n    foo_delete_baz\n    ```\n\n    Bad:\n\n    ```php\n    fooselect_bar\n    fooinsertbaz\n    delete_foo_baz\n    ```\n\n1. Function names used by user functions should be prefixed with `_php_`, and\n    followed by a word or an underscore-delimited list of words, in lowercase\n    letters, that describes the function. If applicable, they should be declared\n    `static`.\n\n1. Variable names must be meaningful. One letter variable names must be avoided,\n    except for places where the variable has no real meaning or a trivial\n    meaning (e.g. `for (i=0; i<100; i++) ...`).\n\n1. Variable names should be in lowercase. Use underscores to separate between\n    words.\n\n1. Method names follow the *studlyCaps* (also referred to as *bumpy case* or\n    *camel caps*) naming convention, with care taken to minimize the letter\n    count. The initial letter of the name is lowercase, and each letter that\n    starts a new \"word\" is capitalized.\n\n1. Class names should be descriptive nouns in *PascalCase* and as short as\n    possible. Each word in the class name should start with a capital letter,\n    without underscore delimiters. The class name should be prefixed with the\n    name of the \"parent set\" (e.g. the name of the extension) if no namespaces\n    are used.\n\n1.  Abbreviations and acronyms as well as initialisms should be avoided wherever\n    possible, unless they are much more widely used than the long form (e.g. HTTP\n    or URL). Abbreviations, acronyms, and initialisms should be treated like\n    regular words, thus they should be written with an uppercase first character,\n    followed by lowercase characters.\n\n1.  Diverging from this policy is allowed to keep internal consistency within a\n    single extension, if the name follows an established, language-agnostic\n    standard, or for other reasons, if those reasons are properly justified\n    and voted on as part of the RFC process.\n\n\n    Good method names:\n\n    ```php\n    connect()\n    getData()\n    buildSomeWidget()\n    performHttpRequest()\n    ```\n\n    Bad method names:\n\n    ```php\n    get_Data()\n    buildsomewidget()\n    getI()\n    performHTTPRequest()\n    ```\n\n    Good class names:\n\n    ```php\n    Curl\n    CurlResponse\n    HttpStatusCode\n    Url\n    BtreeMap // B-tree Map\n    UserId // User Identifier\n    Char // Character\n    Intl // Internationalization\n    Ssl\\Certificate\n    Ssl\\Crl // Certificate Revocation List\n    Ssl\\CrlUrl\n    ```\n\n    Bad class names:\n\n    ```php\n    curl\n    curl_response\n    HTTPStatusCode\n    URL\n    BTreeMap\n    UserID // User Identifier\n    CHAR\n    INTL\n    SSL\\Certificate\n    SSL\\CRL\n    SSL\\CRLURL\n    ```\n\n## Internal function naming conventions\n\n1. Functions that are part of the external API should be named\n    `php_modulename_function()` to avoid symbol collision. They should be in\n    lowercase, with words underscore delimited. Exposed API must be defined in\n    `php_modulename.h`.\n\n    ```c\n    PHPAPI char *php_session_create_id(PS_CREATE_SID_ARGS);\n    ```\n\n    Unexposed module function should be static and should not be defined in\n    `php_modulename.h`.\n\n    ```c\n    static int php_session_destroy()\n    ```\n\n1. Main module source file must be named `modulename.c`.\n\n1. Header file that is used by other sources must be named `php_modulename.h`.\n\n## Syntax and indentation\n\n1. Use K&R-style. Of course, we can't and don't want to force anybody to use a\n    style he or she is not used to, but, at the very least, when you write code\n    that goes into the core of PHP or one of its standard modules, please\n    maintain the K&R style. This applies to just about everything, starting with\n    indentation and comment styles and up to function declaration syntax. Also\n    see [Indentstyle](http://www.catb.org/~esr/jargon/html/I/indent-style.html).\n\n1. Be generous with whitespace and braces. Keep one empty line between the\n    variable declaration section and the statements in a block, as well as\n    between logical statement groups in a block. Maintain at least one empty\n    line between two functions, preferably two. Always prefer:\n\n    ```c\n    if (foo) {\n        bar;\n    }\n    ```\n\n    to:\n\n    ```c\n    if(foo)bar;\n    ```\n\n1. When indenting, use the tab character. A tab is expected to represent four\n    spaces. It is important to maintain consistency in indentation so that\n    definitions, comments, and control structures line up correctly.\n\n1. Preprocessor statements (`#if` and such) MUST start at column one. To indent\n    preprocessor directives you should put the `#` at the beginning of a line,\n    followed by any number of spaces.\n\n1. The length of constant string literals should be calculated via ``strlen()``\n   instead of using ``sizeof()-1`` as it is clearer and any modern compiler\n   will optimize it away. Legacy usages of the latter style exists within the\n   codebase but should not be refactored, unless larger refactoring around that\n   code is taking place.\n\n## Testing\n\n1. Extensions should be well tested using `*.phpt` tests. Read more at\n    [qa.php.net](https://qa.php.net/write-test.php) documentation.\n\n## New and experimental functions\n\nTo reduce the problems normally associated with the first public implementation\nof a new set of functions, it has been suggested that the first implementation\ninclude a file labeled `EXPERIMENTAL` in the function directory, and that the\nfunctions follow the standard prefixing conventions during their initial\nimplementation.\n\nThe file labelled `EXPERIMENTAL` should include the following information:\n\n* Any authoring information (known bugs, future directions of the module).\n* Ongoing status notes which may not be appropriate for Git comments.\n\nIn general, new features should go to PECL or experimental branches until there\nare specific reasons for directly adding them to the core distribution.\n\n## Aliases & legacy documentation\n\nYou may also have some deprecated aliases with close to duplicate names, for\nexample, `somedb_select_result` and `somedb_selectresult`. For documentation\npurposes, these will only be documented by the most current name, with the\naliases listed in the documentation for the parent function. For ease of\nreference, user-functions with completely different names, that alias to the\nsame function (such as `highlight_file` and `show_source`), will be separately\ndocumented.\n\nBackwards compatible functions and names should be maintained as long as the\ncode can be reasonably be kept as part of the codebase. See the `README` in the\nPHP documentation repository for more information on documentation.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 21.259765625,
          "content": "# Contributing to PHP\n\nAnybody who programs in PHP can be a contributing member of the community that\ndevelops and deploys it; the task of deploying PHP, documentation and associated\nwebsites is a never-ending one. With every release or release candidate comes a\nwave of work, which takes a lot of organization and co-ordination.\n\nYou don't need any special access to download, build, debug and begin submitting\nPHP or PECL code, tests or documentation. Once you've followed this guide and\nhad several contributions accepted, commit privileges are often quickly granted.\n\n## Index\n\n* [Pull requests](#pull-requests)\n* [Filing bugs](#filing-bugs)\n* [Feature requests](#feature-requests)\n* [Technical resources](#technical-resources)\n* [Writing tests](#writing-tests)\n* [Writing documentation](#writing-documentation)\n* [Getting help](#getting-help)\n* [PHP source code directory structure](#php-source-code-directory-structure)\n* [PHP internals](#php-internals)\n* [PECL extensions](#pecl-extensions)\n* [Checklist for submitting contribution](#checklist-for-submitting-contribution)\n* [What happens after submitting contribution?](#what-happens-after-submitting-contribution)\n* [What happens when your contribution is applied?](#what-happens-when-your-contribution-is-applied)\n* [Git commit rules](#git-commit-rules)\n* [Copyright and license headers](#copyright-and-license-headers)\n\n## Pull requests\n\nPHP welcomes pull requests to [add tests](#writing-tests), fix bugs and to\nimplement RFCs. Please be sure to include tests as appropriate!\n\nIf you are fixing a bug, then please submit your PR against the lowest actively\nsupported branch of PHP that the bug affects (only green branches on\n[the supported version page](https://www.php.net/supported-versions.php) are\nsupported). For example, at the time of writing, the lowest supported version is\nPHP 8.0, which corresponds to the `PHP-8.0` branch in Git. Please also make sure\nyou add a link to the PR in the bug on [the bug tracker](https://github.com/php/php-src/issues)\nor [the old bug tracker](https://bugs.php.net/).\n\nPull requests implementing RFCs should be submitted against `master`.\n\nPull requests should *never* be submitted against `PHP-x.y.z` branches, as these\nare only used for release management.\n\nIf your pull request exhibits conflicts with the base branch, please resolve\nthem by using `git rebase` instead of `git merge`.\n\nFork the official PHP repository and send a pull request. A notification will be\nsent to the pull request mailing list. Sending a note to PHP Internals list\n(internals@lists.php.net) may help getting more feedback and quicker turnaround.\nYou can also add pull requests to [bug reports](https://github.com/php/php-src/issues)\nand [old bug reports](https://bugs.php.net/).\n\nRead [Git access page](https://www.php.net/git.php) for help on using Git to get\nand build PHP source code. We recommend to look at our\n[workflow](https://wiki.php.net/vcs/gitworkflow) and our\n[FAQ](https://wiki.php.net/vcs/gitfaq).\n\n## Filing bugs\n\nBugs can be filed on [GitHub Issues](https://github.com/php/php-src/issues/new/choose).\nIf this is the first time you've filed a bug, we suggest reading the\n[guide to reporting a bug](https://bugs.php.net/how-to-report.php).\n\nWhere possible, please include a self-contained reproduction case!\n\n## Feature requests\n\nFeature requests are generally submitted in the form of\n[Requests for Comments (RFC)](https://wiki.php.net/rfc/howto), ideally\naccompanied by [pull requests](#pull-requests). You can find the extremely large\nlist of RFCs that have been previously considered on the\n[PHP Wiki](https://wiki.php.net/rfc).\n\nTo create an RFC, discuss it with the extension maintainer, and discuss it on\nthe development mailing list internals@lists.php.net. RFC Wiki accounts can be\nrequested on https://wiki.php.net/start?do=register. PHP extension maintainers\ncan be found in the [EXTENSIONS](/EXTENSIONS) file in the PHP source code\nrepository. Mailing list subscription is explained on the\n[mailing lists page](https://www.php.net/mailing-lists.php).\n\nYou may also want to read\n[The Mysterious PHP RFC Process](https://blogs.oracle.com/opal/post/the-mysterious-php-rfc-process-and-how-you-can-change-the-web)\nfor additional notes on the best way to approach submitting an RFC.\n\n## Technical resources\n\nThere are a number of technical resources on php-src. Unfortunately, they are\nscattered across different websites, and often outdated. Nonetheless, they can\nprovide a good starting point for learning about the fundamentals of the code\nbase.\n\n* https://www.phpinternalsbook.com/\n* https://www.npopov.com/\n  * [Internal value representation](https://www.npopov.com/2015/05/05/Internal-value-representation-in-PHP-7-part-1.html), [part 2](https://www.npopov.com/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html)\n  * [HashTable implementation](https://www.npopov.com/2014/12/22/PHPs-new-hashtable-implementation.html)\n  * [Zend Virtual Machine](https://www.npopov.com/2017/04/14/PHP-7-Virtual-machine.html)\n  * [How opcache works](https://www.npopov.com/2021/10/13/How-opcache-works.html)\n  * [The opcache optimizer](https://www.npopov.com/2022/05/22/The-opcache-optimizer.html)\n* https://wiki.php.net/internals\n  * [Objects](https://wiki.php.net/internals/engine/objects)\n* https://qa.php.net/\n  * [Writing tests](https://qa.php.net/write-test.php)\n  * [Running tests](https://qa.php.net/running-tests.php)\n  * [PHPT structure](https://qa.php.net/phpt_details.php)\n* https://phpinternals.net/\n  * [Implementing new operator](https://phpinternals.net/articles/implementing_a_range_operator_into_php), [part 2](https://phpinternals.net/articles/a_reimplementation_of_the_range_operator)\n  * [Opcode extending](https://phpinternals.net/articles/implementing_new_language_constructs_via_opcode_extending)\n\n## Writing tests\n\nWe love getting new tests! PHP is a huge project and improving test coverage is\na huge win for every PHP user.\n\n[Our QA site includes a page detailing how to write test cases.](https://qa.php.net/write-test.php)\n\nSubmitting test scripts helps us to understand what functionality has changed.\nIt is important for the stability and maintainability of PHP that tests are\ncomprehensive.\n\nFailure conditions of `zend_parse_parameters`, `ZEND_PARSE_PARAMETERS()` and\nsimilar functions should not be tested. These parameter parsing APIs are already\nextensively tested, and additional tests only complicate future modifications.\n\nFor newly created tests, a `--CREDITS--` section should no longer be included,\nas test authorship is already accurately tracked by Git. If multiple authors\nshould be credited, the `Co-authored-by` tag in the commit message may be used.\n\n## Writing documentation\n\nEditing the manual is done by checking out the XML sources using Git and editing\nand building it [per the instructions on the documentation site](http://doc.php.net/tutorial/).\n\n## Getting help\n\nIf you are having trouble contributing to PHP, or just want to talk to a human\nabout what you're working on, you can contact us via the\n[internals mailing list](mailto:internals@lists.php.net), or the\n[documentation mailing list](mailto:phpdoc@lists.php.net) for documentation\nissues.\n\nAlthough not a formal channel, you can also find a number of core developers on\nthe #php.pecl channel on [EFnet](http://www.efnet.org/). Similarly, many\ndocumentation writers can be found on #php.doc. Windows development IRC channel\nis available at #winphp-dev on FreeNode.\n\n## PHP source code directory structure\n\nPHP source code also includes several files generated during development and\nseveral parts where maintenance is happening upstream in their respective\nlocations.\n\n```bash\n<php-src>/\n ├─ .git/                           # Git configuration and source directory\n ├─ TSRM/                           # Thread Safe Resource Manager\n └─ Zend/                           # Zend Engine\n    ├─ asm/                         # Bundled from src/asm in https://github.com/boostorg/context\n    ├─ zend_vm_execute.h            # Generated by `Zend/zend_vm_gen.php`\n    ├─ zend_vm_opcodes.c            # Generated by `Zend/zend_vm_gen.php`\n    ├─ zend_vm_opcodes.h            # Generated by `Zend/zend_vm_gen.php`\n    └─ ...\n └─ build/                          # *nix build system files\n    ├─ ax_*.m4                      # https://github.com/autoconf-archive/autoconf-archive\n    ├─ config.guess                 # https://git.savannah.gnu.org/cgit/config.git\n    ├─ config.sub                   # https://git.savannah.gnu.org/cgit/config.git\n    ├─ libtool.m4                   # https://git.savannah.gnu.org/cgit/libtool.git\n    ├─ ltmain.sh                    # https://git.savannah.gnu.org/cgit/libtool.git\n    ├─ pkg.m4                       # https://gitlab.freedesktop.org/pkg-config/pkg-config\n    ├─ shtool                       # https://www.gnu.org/software/shtool/\n    └─ ...\n ├─ docs/                           # PHP internals and repository documentation\n └─ ext/                            # PHP core extensions\n    └─ bcmath/\n       ├─ libbcmath/                # Forked and maintained in php-src\n       └─ ...\n    └─ curl/\n       ├─ sync-constants.php        # The curl symbols checker\n       └─ ...\n    └─ date/\n       └─ lib/                      # Bundled datetime library https://github.com/derickr/timelib\n          ├─ parse_date.c           # Generated by re2c 0.15.3\n          ├─ parse_iso_intervals.c  # Generated by re2c 0.15.3\n          └─ ...\n       └─ ...\n    └─ ffi/\n       ├─ ffi_parser.c              # Generated by https://github.com/dstogov/llk\n       └─ ...\n    └─ fileinfo/\n       ├─ libmagic/                 # Modified libmagic https://github.com/file/file\n       ├─ data_file.c               # Generated by `ext/fileinfo/create_data_file.php`\n       ├─ libmagic.patch            # Modifications patch from upstream libmagic\n       ├─ magicdata.patch           # Modifications patch from upstream libmagic\n       └─ ...\n    └─ gd/\n       ├─ libgd/                    # Bundled and modified GD library https://github.com/libgd/libgd\n       └─ ...\n    └─ mbstring/\n       ├─ libmbfl/                  # Forked and maintained in php-src\n       ├─ unicode_data.h            # Generated by `ext/mbstring/ucgendat/ucgendat.php`\n       └─ ...\n    └─ opcache/\n       └─ jit/\n          └─ ir/                    # Bundled part of IR framework https://github.com/dstogov/ir\n    └─ pcre/\n       ├─ pcre2lib/                 # https://www.pcre.org/\n       └─ ...\n    └─ skeleton/                    # Skeleton for developing new extensions with `ext/ext_skel.php`\n       └─ ...\n    └─ standard/\n       └─ html_tables/\n          ├─ mappings/              # https://www.unicode.org/Public/MAPPINGS/\n          └─ ...\n       ├─ credits_ext.h             # Generated by `scripts/dev/credits`\n       ├─ credits_sapi.h            # Generated by `scripts/dev/credits`\n       ├─ html_tables.h             # Generated by `ext/standard/html_tables/html_table_gen.php`\n       └─ ...\n    └─ tokenizer/\n       ├─ tokenizer_data.c          # Generated by `ext/tokenizer/tokenizer_data_gen.sh`\n       └─ ...\n    └─ zend_test                    # For testing internal APIs. Not needed for regular builds.\n       └─ ...\n    └─ zip/                         # Bundled https://github.com/pierrejoye/php_zip\n       └─ ...\n    └─ ...\n └─ main/                           # Binding that ties extensions, SAPIs, and engine together\n    ├─ streams/                     # Streams layer subsystem\n    ├─ php_version.h                # Generated by release managers using `configure`\n    └─ ...\n ├─ pear/                           # PEAR installation\n └─ sapi/                           # PHP SAPI modules\n    └─ cli/\n       ├─ mime_type_map.h           # Generated by `sapi/cli/generate_mime_type_map.php`\n       └─ ...\n    └─ ...\n ├─ scripts/                        # php-config, phpize and internal development scripts\n ├─ tests/                          # Core features tests\n └─ win32/                          # Windows build system files\n    ├─ cp_enc_map.c                 # Generated by `win32/cp_enc_map_gen.exe`\n    └─ ...\n └─ ...\n```\n\n## PHP internals\n\nFor information on PHP internal C functions see\n[References about Maintaining and Extending PHP](https://wiki.php.net/internals/references).\nVarious external resources can be found on the web. A standard printed reference\nis the book \"Extending and Embedding PHP\" by Sara Golemon.\n\n## PECL extensions\n\nIf you are fixing broken functionality in a [PECL](https://pecl.php.net)\nextension then create a bug or identify an existing bug at\n[bugs.php.net](https://bugs.php.net). A bug can be used to track the change\nprogress and prevent your changes getting lost in the PHP mail archives. Some\nPECL extensions have their own bug tracker locations and different contributing\nprocedures.\n\nIf your change is large then create a\n[Request for Comments (RFC)](https://wiki.php.net/rfc), discuss it with the\nextension maintainer, and discuss it on the development mailing list\npecl-dev@lists.php.net depending on the extension. PECL mailing list\nsubscription is explained on the\n[PECL support page](https://pecl.php.net/support.php).\n\nUpdate any open bugs and add a link to the source of your change. Send the patch\nor pointer to the bug to pecl-dev@lists.php.net. Also CC the extension\nmaintainer. Explain what has been changed by your patch. Test scripts should be\nincluded.\n\n## Checklist for submitting contribution\n\n- Read [Coding standards](/CODING_STANDARDS.md) before you start working.\n- Update git source just before running your final `diff` and before testing.\n- Add inline comments and/or have external documentation ready. Use only\n  `/* */` style comments, not `//`.\n- Create test scripts for use with `make test`.\n- Run `make test` to check your change doesn't break other features.\n- Rebuild PHP with `--enable-debug` which will show some kinds of memory errors\n  and check the PHP and web server error logs after running your PHP tests.\n- Rebuild PHP with `--enable-zts` to check your change compiles and operates\n  correctly in a thread-safe PHP.\n- Review the change once more just before submitting it.\n\n## What happens after submitting contribution?\n\nIf your change is easy to review and obviously has no side-effects, it might be\ncommitted relatively quickly.\n\nBecause PHP is a volunteer-driven effort, more complex changes will require\npatience on your side. If you do not receive feedback in a few days, consider\nbumping. Before doing this think about these questions:\n\n- Did I send the patch to the right mailing list?\n- Did I review the mailing list archives to see if these kind of changes had\n  been discussed before?\n- Did I explain my change clearly?\n- Is my change too hard to review? If so, why?\n\n## What happens when your contribution is applied?\n\nYour name will likely be included in the Git commit log. If your change affects\nend users, a brief description and your name might be added to the [NEWS](/NEWS)\nfile.\n\n## Git commit rules\n\nThis section refers to contributors that have Git push access and make commit\nchanges themselves. We'll assume you're basically familiar with Git, but feel\nfree to post your questions on the mailing list. Please have a look at the more\ndetailed [information on Git](https://git-scm.com/).\n\nPHP is developed through the efforts of a large number of people. Collaboration\nis a Good Thing(tm), and Git lets us do this. Thus, following some basic rules\nwith regard to Git usage will:\n\n* Make everybody happier, especially those responsible for maintaining PHP\n  itself.\n* Keep the changes consistently well documented and easily trackable.\n* Prevent some of those 'Oops' moments.\n* Increase the general level of good will on planet Earth.\n\nHaving said that, here are the organizational rules:\n\n1. Respect other people working on the project.\n\n2. Discuss any significant changes on the list before committing and get\n   confirmation from the release manager for the given branch.\n\n3. Look at [EXTENSIONS](/EXTENSIONS) file to see who is the primary maintainer\n   of the code you want to contribute to.\n\n4. If you \"strongly disagree\" about something another person did, don't start\n   fighting publicly - take it up in private email.\n\n5. If you don't know how to do something, ask first!\n\n6. Test your changes before committing them. We mean it. Really. To do so use\n   `make test`.\n\n7. For development use the `--enable-debug` switch to avoid memory leaks and the\n   `--enable-zts` switch to ensure your code handles TSRM correctly and doesn't\n   break for those who need that.\n\nCurrently, we have the following branches in use:\n\n| Branch    |           |\n| --------- | --------- |\n| master    | Active development branch for PHP 8.5, which is open for backwards incompatible changes and major internal API changes. |\n| PHP-8.4   | Is used to release the PHP 8.4.x series. This is a current stable version and is open for bugfixes only. |\n| PHP-8.3   | Is used to release the PHP 8.3.x series. This is a current stable version and is open for bugfixes only. |\n| PHP-8.2   | Is used to release the PHP 8.2.x series. This is a current stable version and is open for bugfixes only. |\n| PHP-8.1   | Is used to release the PHP 8.1.x series. This is an old stable version and is open for security fixes only. |\n| PHP-8.0   | This branch is closed. |\n| PHP-7.4   | This branch is closed. |\n| PHP-7.3   | This branch is closed. |\n| PHP-7.2   | This branch is closed. |\n| PHP-7.1   | This branch is closed. |\n| PHP-7.0   | This branch is closed. |\n| PHP-5.6   | This branch is closed. |\n| PHP-5.5   | This branch is closed. |\n| PHP-5.4   | This branch is closed. |\n| PHP-5.3   | This branch is closed. |\n| PHP-5.2   | This branch is closed. |\n| PHP-5.1   | This branch is closed. |\n| PHP-4.4   | This branch is closed. |\n| PHP-X.Y.Z | These branches are used for the release managers for tagging the releases, hence they are closed to the general public. |\n\nThe next few rules are more of a technical nature:\n\n1. All non-security bugfix changes should first go to the lowest bugfix branch\n   (i.e. 8.0) and then get merged up to all other branches. All security fixes\n   should go to the lowest security fixes branch (i.e 7.4). If a change is not\n   needed for later branches (i.e. fixes for features which were dropped from\n   later branches) an empty merge should be done.\n\n2. All news updates intended for public viewing, such as new features, bug\n   fixes, improvements, etc., should go into the NEWS file of *any stable\n   release* version with the given change. In other words, news about a bug fix\n   which went into PHP-5.4, PHP-5.5 and master should be noted in both\n   PHP-5.4/NEWS and PHP-5.5/NEWS but not master, which is not a public released\n   version yet.\n\n3. Do not commit multiple files and dump all messages in one commit. If you\n   modified several unrelated files, commit each group separately and provide a\n   nice commit message for each one. See example below.\n\n4. Do write your commit message in such a way that it makes sense even without\n   the corresponding diff. One should be able to look at it, and immediately\n   know what was modified. Definitely include the function name in the message\n   as shown below.\n\n5. In your commit messages, keep each line shorter than 80 characters. And try\n   to align your lines vertically, if they wrap. It looks bad otherwise.\n\n6. If you modified a function that is callable from PHP, prepend PHP to the\n   function name as shown below.\n\nThe format of the commit messages is pretty simple.\n\n    <max 79 characters short description>\\n\n    \\n\n    <long description, 79 chars per line>\n    \\n\n\nAn Example from the git project (commit 2b34e486bc):\n\n    pack-objects: Fix compilation with NO_PTHREDS\n\n    It looks like commit 99fb6e04 (pack-objects: convert to use parse_options(),\n    2012-02-01) moved the #ifdef NO_PTHREDS around but hasn't noticed that the\n    'arg' variable no longer is available.\n\nIf you fix some bugs, you should note the bug ID numbers in your commit message.\nBug ID should be prefixed by `#`.\n\nExample:\n\n    Fixed bug #14016 (pgsql notice handler double free crash bug.)\n\nWhen you change the NEWS file for a bug fix, then please keep the bugs sorted in\ndecreasing order under the fixed version.\n\n## Copyright and license headers\n\nNew source code files should include the following header block:\n\n```c\n/*\n  +----------------------------------------------------------------------+\n  | Copyright (c) The PHP Group                                          |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 3.01 of the PHP license,      |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | https://www.php.net/license/3_01.txt                                 |\n  | If you did not receive a copy of the PHP license and are unable to   |\n  | obtain it through the world-wide-web, please send a note to          |\n  | license@php.net so we can mail you a copy immediately.               |\n  +----------------------------------------------------------------------+\n  | Author:                                                              |\n  +----------------------------------------------------------------------+\n*/\n```\n\nThank you for contributing to PHP!\n"
        },
        {
          "name": "EXTENSIONS",
          "type": "blob",
          "size": 23.189453125,
          "content": "                     List of PHP maintainers\n                     =======================\n\nMaintenance legend\n------------------\n    Maintained:      Someone actually looks after it.\n    Odd Fixes:       It has a maintainer but they don't have time to do\n                     much other than throw the odd patch in. See below.\n    Orphan:          No current maintainer [but maybe you could take the\n                     role as you write your new code].\n    Obsolete:        Old code. Something tagged obsolete generally means\n                     it has been replaced by a better system and you\n                     should be using that.\n    Unknown:         Not known at this time.\n\nStatus legend\n-------------\n    Working:         Working under both Windows and Unix.\n    Windows:         Working only under Windows.\n    Unix:            Working only under Unix.\n    Experimental:    Under development or initial release.\n    Not Working:     Not working.\n    Unknown:         Status unknown.\n\n\n== Server APIs ==\n\n-------------------------------------------------------------------------------\nEXTENSION:           apache2handler\nPRIMARY MAINTAINER:  Aaron Bannert <aaron@php.net>, Ilia Alshanetsky <iliaa@php.net>\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           cgi\nMAINTENANCE:         Unknown\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           cli\nPRIMARY MAINTAINER:  Marcus Börger <helly@php.net>, Edin Kadribasic <edink@php.net>\nMAINTENANCE:         Xinchen Hui <laruence@php.net> (2013 - 2020)\nSTATUS:              Working\nSINCE:               4.3.0\n-------------------------------------------------------------------------------\nEXTENSION:           embed\nPRIMARY MAINTAINER:  Edin Kadribasic <edink@php.net>\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           fpm\nPRIMARY MAINTAINER:  Jakub Zelenka <bukka@php.net>\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3.3\n-------------------------------------------------------------------------------\nEXTENSION:           litespeed\nPRIMARY MAINTAINER:  George Wang <gwang@php.net>\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3\n-------------------------------------------------------------------------------\nEXTENSION:           phpdbg\nPRIMARY MAINTAINER:  Joe Watkins <krakjoe@php.net>, Bob Weinand <bwoebi@php.net>\nMAINTENANCE:         Unknown\nSTATUS:              5.6\n-------------------------------------------------------------------------------\n\n\n== Database extensions ==\n\n-------------------------------------------------------------------------------\nEXTENSION:           dba\nPRIMARY MAINTAINER:  Marcus Börger <helly@php.net> (2002 - 2007)\n                     Christopher Jones <sixd@php.net> (2008 - 2013)\n                     Pierre-Alain Joye <pajoye@php.net> (2011 - 2011)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nCOMMENT:             DBM abstraction for db2, db3, db4, dbm, ndbm, gdbm, ini\n-------------------------------------------------------------------------------\nEXTENSION:           mysqli\nPRIMARY MAINTAINER:  Georg Richter <georg@php.net> (2003 - 2006)\n                     Andrey Hristov <andrey@php.net> (2003 - 2016)\n                     Johannes Schlüter <johannes@php.net> (2008 - 2014)\n                     Ulf Wendel <uw@php.net> (2007 - 2013)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.0\n-------------------------------------------------------------------------------\nEXTENSION:           mysqlnd\nPRIMARY MAINTAINER:  Andrey Hristov <andrey@php.net> (2007 - 2017)\n                     Johannes Schlüter <johannes@php.net> (2008 - 2018)\n                     Ulf Wendel <uw@php.net> (2009 - 2011)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3\n-------------------------------------------------------------------------------\nEXTENSION:           odbc\nPRIMARY MAINTAINER:  Daniel R. Kalowsky <kalowsky@php.net> (2000 - 2004)\n                     Calvin Buckley <calvin@cmpct.info> (2024 - )\nMAINTENANCE:         Maintained\nSTATUS:              Working\nCOMMENT:             Working\n-------------------------------------------------------------------------------\nEXTENSION:           pdo\nPRIMARY MAINTAINER:  Ilia Alshanetsky <iliaa@php.net> (2004 - 2011)\n                     Wez Furlong <wez@php.net> (2004 - 2006)\nMAINTENANCE:         Odd fixes\nSTATUS:              Working\nSINCE:               5.1\n-------------------------------------------------------------------------------\nEXTENSION:           pdo_dblib\nPRIMARY MAINTAINER:  Adam Baratz <adambaratz@php.net> (2016 - 2017)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.1\n-------------------------------------------------------------------------------\nEXTENSION:           pdo_firebird\nPRIMARY MAINTAINER:  Lars Westermann <lwe@php.net> (2007 - 2007)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.1\n-------------------------------------------------------------------------------\nEXTENSION:           pdo_mysql\nPRIMARY MAINTAINER:  Ilia Alshanetsky <iliaa@php.net> (2004 - 2010)\n                     Johannes Schlüter <johannes@php.net> (2008 - 2014)\n                     Andrey Hristov <andrey@php.net> (2005 - 2015)\n                     Ulf Wendel <uw@php.net> (2008 - 2012)\nMAINTENANCE:         Odd fixes\nSTATUS:              Working\nSINCE:               5.1\n-------------------------------------------------------------------------------\nEXTENSION:           pdo_odbc\nPRIMARY MAINTAINER:  Calvin Buckley <calvin@cmpct.info> (2024 - )\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.1\n-------------------------------------------------------------------------------\nEXTENSION:           pdo_pgsql\nPRIMARY MAINTAINER:  Ilia Alshanetsky <iliaa@php.net> (2004 - 2011)\nMAINTENANCE:         Odd fixes\nSTATUS:              Working\nSINCE:               5.1\n-------------------------------------------------------------------------------\nEXTENSION:           pdo_sqlite\nPRIMARY MAINTAINER:  Ilia Alshanetsky <iliaa@php.net> (2005 - 2011)\nMAINTENANCE:         Odd fixes\nSTATUS:              Working\nSINCE:               5.1\n-------------------------------------------------------------------------------\nEXTENSION:           pgsql\nPRIMARY MAINTAINER:  Marcus Börger <helly@php.net> (2002 - 2007)\n                     Yasuo Ohgaki <yohgaki@php.net> (2001 - 2015)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nCOMMENT:             Use PostgreSQL 7.0.x or later. PostgreSQL 6.5.3 or less have fatal bug.\n-------------------------------------------------------------------------------\nEXTENSION:           sqlite3\nPRIMARY MAINTAINER:  Scott MacVicar <scottmac@php.net> (2008 - 2011)\n                     Christoph M. Becker <cmb@php.net> (2016 - 2020)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3\nCOMMENT:             Integrates SQLite 3 embeddable SQL database engine.\n-------------------------------------------------------------------------------\n\n\n== XML extensions ==\n\n-------------------------------------------------------------------------------\nEXTENSION:           dom\nPRIMARY MAINTAINER:  Christian Stocker <chregu@php.net> (2003 - 2011)\n                     Rob Richards <rrichards@php.net> (2003 - 2012)\n                     Marcus Börger <helly@php.net> (2003 - 2006)\n                     Niels Dossche <nielsdos@php.net> (2023 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.0\n-------------------------------------------------------------------------------\nEXTENSION:           simplexml\nPRIMARY MAINTAINER:  Marcus Börger <helly@php.net> (2003 - 2008)\n                     Niels Dossche <nielsdos@php.net> (2023 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.0\n-------------------------------------------------------------------------------\nEXTENSION:           soap\nPRIMARY MAINTAINER:  Dmitry Stogov <dmitry@php.net> (2004 - 2018)\n                     Niels Dossche <nielsdos@php.net> (2024 - 2024)\nMAINTENANCE:         Odd fixes\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           xml\nPRIMARY MAINTAINER:  Thies C. Arntzen <thies@thieso.net> (1999 - 2002)\n                     Rob Richards <rrichards@php.net> (2003 - 2013)\n                     Niels Dossche <nielsdos@php.net> (2023 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           libxml\nPRIMARY MAINTAINER:  Rob Richards <rrichards@php.net> (2003 - 2009)\n                     Christian Stocker <chregu@php.net> (2004 - 2011)\n                     Niels Dossche <nielsdos@php.net> (2023 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           xmlreader\nPRIMARY MAINTAINER:  Rob Richards <rrichards@php.net> (2004 - 2010)\n                     Christian Stocker <chregu@php.net> (2004 - 2004)\n                     Niels Dossche <nielsdos@php.net> (2023 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           xmlwriter\nPRIMARY MAINTAINER:  Rob Richards <rrichards@php.net> (2004 - 2010)\n                     Pierre-Alain Joye <pajoye@php.net> (2005-2009)\n                     Niels Dossche <nielsdos@php.net> (2023 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           xsl\nPRIMARY MAINTAINER:  Christian Stocker <chregu@php.net> (2003 - 2011)\n                     Rob Richards <rrichards@php.net> (2003 - 2010)\n                     Niels Dossche <nielsdos@php.net> (2023 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.0\n-------------------------------------------------------------------------------\n\n\n== Other extensions ==\n\n-------------------------------------------------------------------------------\nEXTENSION:           bcmath\nPRIMARY MAINTAINER:  Andi Gutmans <andi@php.net> (2000 - 2004)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           bz2\nPRIMARY MAINTAINER:  Hartmut Holzgraefe <hholzgra@php.net> (2004 - 2004)\nMAINTENANCE:         Odd Fixes\nSTATUS:              Working\nSINCE:               4.0.3\n-------------------------------------------------------------------------------\nEXTENSION:           calendar\nPRIMARY MAINTAINER:  Hartmut Holzgraefe <hholzgra@php.net> (2000 - 2004)\nMAINTENANCE:         Odd Fixes\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           com_dotnet\nPRIMARY MAINTAINER:  Wez Furlong <wez@php.net> (2003 - 2005)\n                     Christoph M. Becker <cmb@php.net> (2018 - 2022)\nMAINTENANCE:         Maintained\nSTATUS:              Windows\nSINCE:               5.0\n-------------------------------------------------------------------------------\nEXTENSION:           ctype\nPRIMARY MAINTAINER:  Hartmut Holzgraefe <hholzgra@php.net> (2000 - 2004)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           curl\nPRIMARY MAINTAINER:  Sterling Hughes <sterling@php.net> (2000 - 2004)\n                     Ilia Alshanetsky <iliaa@php.net> (2002 - 2011)\n                     Pierrick Charron <pierrick@php.net> (2010 - 2016)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               4.0.2\n-------------------------------------------------------------------------------\nEXTENSION:           date\nPRIMARY MAINTAINER:  Derick Rethans <derick@php.net> (2005 - 2018)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           enchant\nPRIMARY MAINTAINER:  Unknown\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3\n-------------------------------------------------------------------------------\nEXTENSION:           exif\nPRIMARY MAINTAINER:  Kalle Sommer Nielsen <kalle@php.net> (2010 - 2018)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               4.2\n-------------------------------------------------------------------------------\nEXTENSION:           ffi\nPRIMARY MAINTAINER:  Dmitry Stogov <dmitry@php.net> (2018 - 2019)\nMAINTENANCE:         Maintained\nSTATUS:              Experimental\nSINCE:               7.4.0\n-------------------------------------------------------------------------------\nEXTENSION:           fileinfo\nPRIMARY MAINTAINER:  Derick Rethans <derick@php.net> (2004 - 2008)\n                     Anatol Belski <ab@php.net> (2012 - 2020)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3\n-------------------------------------------------------------------------------\nEXTENSION:           filter\nPRIMARY MAINTAINER:  Derick Rethans <derick@php.net> (2006 - 2006)\n                     Pierre-Alain Joye <pajoye@php.net> (2006 - 2011)\n                     Ilia Alshanetsky <iliaa@php.net> (2006 - 2011)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.2\n-------------------------------------------------------------------------------\nEXTENSION:           ftp\nPRIMARY MAINTAINER:  Unknown\nMAINTENANCE:         Odd fixes\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           gd\nPRIMARY MAINTAINER:  Pierre-Alain Joye <pajoye@php.net> (2002 - 2016)\n                     Christoph M. Becker <cmb@php.net> (2015 - 2022)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           gettext\nPRIMARY MAINTAINER:  Unknown\nMAINTENANCE:         Unknown\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           gmp\nPRIMARY MAINTAINER:  Stanislav Malyshev <stas@php.net> (2000 - 2019)\n                     Antony Dovgal <tony2001@php.net> (2005 - 2010)\n                     Nikita Popov <nikic@php.net> (2013 - 2020)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               4.0.4\n-------------------------------------------------------------------------------\nEXTENSION:           hash\nPRIMARY MAINTAINER:  Sara Golemon <pollita@php.net> (2005 - 2017)\n                     Mike Wallner <mike@php.net> (2005 - 2013)\n                     Anatol Belski <ab@php.net> (2014 - 2018)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.1.2\n-------------------------------------------------------------------------------\nEXTENSION:           iconv\nPRIMARY MAINTAINER:  Moriyoshi Koizumi <moriyoshi@php.net> (2002 - 2010)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           intl\nPRIMARY MAINTAINER:  Stanislav Malyshev <stas@php.net> (2008 - 2019)\n                     Anatol Belski <ab@php.net> (2017 - 2018)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3\n-------------------------------------------------------------------------------\nEXTENSION:           json\nPRIMARY MAINTAINER:  Jakub Zelenka <bukka@php.net> (2014 - 2018)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.2\n-------------------------------------------------------------------------------\nEXTENSION:           ldap\nPRIMARY MAINTAINER:  Stig Venaas <venaas@php.net> (2000 - 2002)\n                     Douglas Goldstein <cardoe@php.net> (2007 - 2007)\n                     Pierre-Alain Joye <pajoye@php.net> (2008 - 2010)\n                     Côme Bernigaud <mcmic@php.net> (2015 - 2017)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           mbstring\nPRIMARY MAINTAINER:  Rui Hirokawa <hirokawa@php.net> (2001 - 2013)\n                     Nikita Popov <nikic@php.net> (2017 - 2020)\n                     Alex Dowad <alexinbeijing@gmail.com> (2021 - 2024)\n                     Yuya Hamada <youkidearitai@gmail.com> (2024 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           opcache\nPRIMARY MAINTAINER:  Dmitry Stogov <dmitry@php.net> (2013 - 2018)\n                     Xinchen Hui <laruence@php.net> (2013 - 2020)\n                     Nikita Popov <nikic@php.net> (2016 - 2020)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.5.0\n-------------------------------------------------------------------------------\nEXTENSION:           openssl\nPRIMARY MAINTAINER:  Wez Furlong <wez@php.net> (2001 - 2006)\n                     Pierre-Alain Joye <pajoye@php.net> (2006 - 2011)\n                     Jakub Zelenka <bukka@php.net> (2015 - 2019)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               4.0.4\n-------------------------------------------------------------------------------\nEXTENSION:           pcntl\nPRIMARY MAINTAINER:  Arnaud Le Blanc <lbarnaud@php.net> (2008 - 2010)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           pcre\nPRIMARY MAINTAINER:  Andrei Zmievski <andrei@php.net> (1999 - 2006)\n                     Nuno Lopes <nlopess@php.net> (2006 - 2009)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           phar\nPRIMARY MAINTAINER:  Greg Beaver <cellog@php.net> (2008 - 2009)\n                     Marcus Börger <helly@php.net> (2008 - 2008)\n                     Steph Fox <sfox@php.net> (2008 - 2008)\n                     Bishop Bettini <bishop@php.net> (2018 - 2019)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.3\n-------------------------------------------------------------------------------\nEXTENSION:           posix\nPRIMARY MAINTAINER:  Kristian Köhntopp <kris@koehntopp.de> (2000 - 2000)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           random\nPRIMARY MAINTAINER   Go Kudo <zeriyoshi@php.net> (2022 - 2024)\n                     Tim Düsterhus <timwolla@php.net> (2022 - 2024)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               8.2.0\n-------------------------------------------------------------------------------\nEXTENSION:           readline\nPRIMARY MAINTAINER:  Unknown\nMAINTENANCE:         Unknown\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           reflection\nPRIMARY MAINTAINER:  Marcus Börger <helly@php.net> (2003 - 2009)\n                     Johannes Schlüter <johannes@php.net> (2006 - 2014)\n                     Nikita Popov <nikic@php.net> (2019 - 2020)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           session\nPRIMARY MAINTAINER:  Sascha Schumann <sascha@schumann.cx> (1999 - 2004)\n                     Ilia Alshanetsky <iliaa@php.net> (2002 - 2012)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           shmop\nPRIMARY MAINTAINER:  Ilia Alshanetsky <iliaa@php.net> (2002 - 2008)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               4.0.3\n-------------------------------------------------------------------------------\nEXTENSION:           snmp\nPRIMARY MAINTAINER:  Boris Lytochkin <lytboris@php.net> (2011 - 2013)\n                     Rasmus Lerdorf <rasmus@php.net> (1999 - 2002)\n                     Pierre-Alain Joye <pajoye@php.net> (2010 - 2011)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           sockets\nPRIMARY MAINTAINER:  Chris Vandomelen <chrisv@b0rked.dhs.org> (2000 - 2000)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               4.0.2\n-------------------------------------------------------------------------------\nEXTENSION:           sodium\nPRIMARY MAINTAINER:  Frank Denis <jedisct1@php.net> (2017 - 2017)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               7.2.0\n-------------------------------------------------------------------------------\nEXTENSION:           spl\nPRIMARY MAINTAINER:  Marcus Börger <helly@php.net> (2003 - 2009)\n                     Etienne Kneuss <colder@php.net> (2008 - 2014)\nMAINTENANCE:         Maintained\nSTATUS:              Working\nSINCE:               5.0.0\n-------------------------------------------------------------------------------\nEXTENSION:           sysvmsg\nPRIMARY MAINTAINER:  Unknown\nMAINTENANCE:         Unknown\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           sysvsem\nPRIMARY MAINTAINER:  Unknown\nMAINTENANCE:         Unknown\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           sysvshm\nPRIMARY MAINTAINER:  Unknown\nMAINTENANCE:         Unknown\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           tidy\nPRIMARY MAINTAINER:  John Coggeshall <john@php.net> (2003 - 2006)\n                     Ilia Alshanetsky <iliaa@php.net> (2003 - 2009)\n                     Nuno Lopes <nlopess@php.net> (2006 - 2012)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           tokenizer\nPRIMARY MAINTAINER:  Andrei Zmievski <andrei@php.net> (2002 - 2002)\n                     Nikita Popov <nikic@php.net> (2013 - 2020)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           zip\nPRIMARY MAINTAINER:  Pierre-Alain Joye <pajoye@php.net> (2006 - 2011)\n                     Remi Collet <remi@php.net> (2013-2020)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\nEXTENSION:           zlib\nPRIMARY MAINTAINER:  Stefan Roehrich <sr@linux.de> (1999 - 2003)\nMAINTENANCE:         Maintained\nSTATUS:              Working\n-------------------------------------------------------------------------------\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.12890625,
          "content": "--------------------------------------------------------------------\n                  The PHP License, version 3.01\nCopyright (c) 1999 - 2024 The PHP Group. All rights reserved.\n--------------------------------------------------------------------\n\nRedistribution and use in source and binary forms, with or without\nmodification, is permitted provided that the following conditions\nare met:\n\n  1. Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n     distribution.\n\n  3. The name \"PHP\" must not be used to endorse or promote products\n     derived from this software without prior written permission. For\n     written permission, please contact group@php.net.\n\n  4. Products derived from this software may not be called \"PHP\", nor\n     may \"PHP\" appear in their name, without prior written permission\n     from group@php.net.  You may indicate that your software works in\n     conjunction with PHP by saying \"Foo for PHP\" instead of calling\n     it \"PHP Foo\" or \"phpfoo\"\n\n  5. The PHP Group may publish revised and/or new versions of the\n     license from time to time. Each version will be given a\n     distinguishing version number.\n     Once covered code has been published under a particular version\n     of the license, you may always continue to use it under the terms\n     of that version. You may also choose to use such covered code\n     under the terms of any subsequent version of the license\n     published by the PHP Group. No one other than the PHP Group has\n     the right to modify the terms applicable to covered code created\n     under this License.\n\n  6. Redistributions of any form whatsoever must retain the following\n     acknowledgment:\n     \"This product includes PHP software, freely available from\n     <http://www.php.net/software/>\".\n\nTHIS SOFTWARE IS PROVIDED BY THE PHP DEVELOPMENT TEAM ``AS IS'' AND\nANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PHP\nDEVELOPMENT TEAM OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\n\n--------------------------------------------------------------------\n\nThis software consists of voluntary contributions made by many\nindividuals on behalf of the PHP Group.\n\nThe PHP Group can be contacted via Email at group@php.net.\n\nFor more information on the PHP Group and the PHP project,\nplease see <http://www.php.net>.\n\nPHP includes the Zend Engine, freely available at\n<http://www.zend.com>.\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 5.0380859375,
          "content": "PHP                                                                        NEWS\n|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n?? ??? ????, PHP 8.5.0alpha1\n\n- COM:\n  . Fixed property access of PHP objects wrapped in variant. (cmb)\n  . Fixed method calls for PHP objects wrapped in variant. (cmb)\n\n- Core:\n  . Fixed bug GH-16665 (\\array and \\callable should not be usable in\n    class_alias). (nielsdos)\n  . Added PHP_BUILD_DATE constant. (cmb)\n  . Added support for Closures in constant expressions. (timwolla,\n    Volker Dusch)\n  . Use `clock_gettime_nsec_np()` for high resolution timer on macOS\n    if available. (timwolla)\n  . Implement GH-15680 (Enhance zend_dump_op_array to properly represent\n    non-printable characters in string literals). (nielsdos, WangYihang)\n\n- Curl:\n  . Added curl_multi_get_handles(). (timwolla)\n  . Added curl_share_init_persistent(). (enorris)\n\n- Date:\n  . Fix undefined behaviour problems regarding integer overflow in extreme edge\n    cases. (nielsdos, cmb, ilutov)\n\n- DOM:\n  . Added Dom\\Element::$outerHTML. (nielsdos)\n  . Added Dom\\Element::insertAdjacentHTML(). (nielsdos)\n\n- Enchant:\n  . Added enchant_dict_remove_from_session(). (nielsdos)\n\n-GD:\n  . Fixed bug #68629 (Transparent artifacts when using imagerotate). (pierre,\n    cmb)\n\n- Intl:\n  . Bumped ICU requirement to ICU >= 57.1. (cmb)\n  . IntlDateFormatter::setTimeZone()/datefmt_set_timezone() throws an exception\n    with uninitialised classes or clone failure. (David Carlier)\n\n- MySQLnd:\n  . Added mysqlnd.collect_memory_statistics to ini quick reference.\n    (hauk92)\n\n- OPcache:\n  . Fixed ZTS OPcache build on Cygwin. (cmb)\n  . Added opcache.file_cache_read_only. (Samuel Melrose)\n\n- Output:\n  . Fixed calculation of aligned buffer size. (cmb)\n\n- PDO_PGSQL:\n  . Added Iterable support for PDO::pgsqlCopyFromArray. (KentarouTakeda)\n  . Implement GH-15387 Pdo\\Pgsql::setAttribute(PDO::ATTR_PREFETCH, 0) or\n    Pdo\\Pgsql::prepare(…, [ PDO::ATTR_PREFETCH => 0 ]) make fetch() lazy\n    instead of storing the whole result set in memory (Guillaume Outters)\n\n- PGSQL:\n  . Added pg_close_stmt to close a prepared statement while allowing\n    its name to be reused. (David Carlier)\n  . Added Iterable support for pgsql_copy_from. (David Carlier)\n\n- POSIX:\n  . Added POSIX_SC_OPEN_MAX constant to get the number of file descriptors\n    a process can handle. (David Carlier)\n  . posix_ttyname() sets last_error to EBADF on invalid file descriptors,\n    posix_isatty() raises E_WARNING on invalid file descriptors,\n    posix_fpathconf checks invalid file descriptors. (David Carlier)\n\n- Random:\n  . Moves from /dev/urandom usage to arc4random_buf on Haiku. (David Carlier)\n\n- Reflection:\n  . Added ReflectionConstant::getExtension() and ::getExtensionName().\n    (DanielEScherzer)\n\n- Session:\n  . session_start() throws a ValueError on option argument if not a hashmap\n    or a TypeError if read_and_close value is not compatible with int.\n    (David Carlier)\n\n- SOAP:\n  . Fixed bug #49169 (SoapServer calls wrong function, although \"SOAP action\"\n    header is correct). (nielsdos)\n\n- Sockets:\n  . Added IPPROTO_ICMP/IPPROTO_ICMPV6 to create raw socket for ICMP usage.\n    (David Carlier)\n  . Added TCP_FUNCTION_BLK to change the TCP stack algorithm on FreeBSD.\n    (David Carlier)\n  . socket_set_option() catches possible overflow with SO_RCVTIMEO/SO_SNDTIMEO\n    with timeout setting on windows. (David Carlier)\n  . Added TCP_FUNCTION_ALIAS, TCP_REUSPORT_LB_NUMA, TCP_REUSPORT_LB_NUMA_NODOM,\n    TCP_REUSPORT_LB_CURDOM, TCP_BBR_ALGORITHM constants.\n  . socket_create_listen() throws an exception on invalid port value.\n    (David Carlier)\n  . socket_bind() throws an exception on invalid port value.\n    (David Carlier)\n  . socket_sendto() throws an exception on invalid port value.\n    (David Carlier)\n  . socket_addrinfo_lookup throws an exception on invalid hints value types.\n    (David Carlier)\n  . socket_addrinfo_lookup throws an exception if any of the hints value\n    overflows. (David Carlier)\n  . socket_addrinfo_lookup throws an exception if one or more hints entries\n    has an index as numeric. (David Carlier)\n  . socket_set_option with the options MCAST_LEAVE_GROUP/MCAST_LEAVE_SOURCE_GROUP\n    will throw an exception if its value is not a valid array/object.\n    (David Carlier)\n\n- Standard:\n  . Fixed crypt() tests on musl when using --with-external-libcrypt\n    (Michael Orlitzky).\n\n- Streams:\n  . Fixed bug GH-16889 (stream_select() timeout useless for pipes on Windows).\n    (cmb)\n\n- Tests:\n  . Allow to shuffle tests even in non-parallell mode. (dhuang00)\n\n- Windows:\n  . Fixed bug GH-10992 (Improper long path support for relative paths). (cmb,\n    nielsdos)\n  . Fixed bug GH-16843 (Windows phpize builds ignore source subfolders). (cmb)\n\n- XMLWriter:\n  . Improved performance and reduce memory consumption. (nielsdos)\n\n- XSL:\n  . Implement request #30622 (make $namespace parameter functional). (nielsdos)\n\n- Zlib:\n  . gzfile, gzopen and readgzfile, their \"use_include_path\" argument\n    is now a boolean. (David Carlier)\n\n\n<<< NOTE: Insert NEWS from last stable release here prior to actual release! >>>\n"
        },
        {
          "name": "README.REDIST.BINS",
          "type": "blob",
          "size": 29.6513671875,
          "content": " 1. libmagic (ext/fileinfo) see ext/fileinfo/libmagic/LICENSE\n 2. libmbfl (ext/mbstring) see ext/mbstring/libmbfl/LICENSE\n 3. pcre2lib (ext/pcre)\n 4. ext/standard crypt\n 5. ext/standard crypt's blowfish implementation\n 6. ext/standard/rand\n 7. ext/standard/scanf\n 8. ext/standard/strnatcmp.c\n 9. ext/standard/uuencode\n10. main/snprintf.c\n11. main/strlcat\n12. main/strlcpy\n13. libgd (ext/gd)\n14. ext/phar portions of tar implementations\n15. ext/phar/zip.c portion extracted from libzip\n16. libbcmath (ext/bcmath) see ext/bcmath/libbcmath/LICENSE\n17. ext/mbstring/ucgendat portions based on the ucgendat.c from the OpenLDAP\n18. avifinfo (ext/standard/libavifinfo) see ext/standard/libavifinfo/LICENSE\n19. xxHash (ext/hash/xxhash)\n20. Lexbor (ext/dom/lexbor/lexbor) see ext/dom/lexbor/LICENSE\n21. Portions of libcperciva (ext/hash/hash_sha_{ni,sse2}.c) see the header in the source file\n\n3. pcre2lib (ext/pcre)\n\nPCRE2 LICENCE\n-------------\n\nPCRE2 is a library of functions to support regular expressions whose syntax\nand semantics are as close as possible to those of the Perl 5 language.\n\nReleases 10.00 and above of PCRE2 are distributed under the terms of the \"BSD\"\nlicence, as specified below, with one exemption for certain binary\nredistributions. The documentation for PCRE2, supplied in the \"doc\" directory,\nis distributed under the same terms as the software itself. The data in the\ntestdata directory is not copyrighted and is in the public domain.\n\nThe basic library functions are written in C and are freestanding. Also\nincluded in the distribution is a just-in-time compiler that can be used to\noptimize pattern matching. This is an optional feature that can be omitted when\nthe library is built.\n\n\nTHE BASIC LIBRARY FUNCTIONS\n---------------------------\n\nWritten by:       Philip Hazel\nEmail local part: ph10\nEmail domain:     cam.ac.uk\n\nUniversity of Cambridge Computing Service,\nCambridge, England.\n\nCopyright (c) 1997-2019 University of Cambridge\nAll rights reserved.\n\n\nPCRE2 JUST-IN-TIME COMPILATION SUPPORT\n--------------------------------------\n\nWritten by:       Zoltan Herczeg\nEmail local part: hzmester\nEmail domain:     freemail.hu\n\nCopyright(c) 2010-2019 Zoltan Herczeg\nAll rights reserved.\n\n\nSTACK-LESS JUST-IN-TIME COMPILER\n--------------------------------\n\nWritten by:       Zoltan Herczeg\nEmail local part: hzmester\nEmail domain:     freemail.hu\n\nCopyright(c) 2009-2019 Zoltan Herczeg\nAll rights reserved.\n\n\nTHE \"BSD\" LICENCE\n-----------------\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notices,\n      this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notices, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the name of the University of Cambridge nor the names of any\n      contributors may be used to endorse or promote products derived from this\n      software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n\nEXEMPTION FOR BINARY LIBRARY-LIKE PACKAGES\n------------------------------------------\n\nThe second condition in the BSD licence (covering binary redistributions) does\nnot apply all the way down a chain of software. If binary package A includes\nPCRE2, it must respect the condition, but if package B is software that\nincludes package A, the condition is not imposed on package B unless it uses\nPCRE2 independently.\n\nEnd\n\n\n4. ext/standard crypt\n\nFreeSec: libcrypt for NetBSD\n\nCopyright (c) 1994 David Burren\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the author nor the names of other contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n\n5. ext/standard crypt's blowfish implementation\n\nThe crypt_blowfish homepage is:\n\nhttp://www.openwall.com/crypt/\n\nThis code comes from John the Ripper password cracker, with reentrant\nand crypt(3) interfaces added, but optimizations specific to password\ncracking removed.\n\nWritten by Solar Designer <solar at openwall.com> in 1998-2011.\nNo copyright is claimed, and the software is hereby placed in the public\ndomain. In case this attempt to disclaim copyright and place the software\nin the public domain is deemed null and void, then the software is\nCopyright (c) 1998-2011 Solar Designer and it is hereby released to the\ngeneral public under the following terms:\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted.\n\nThere's ABSOLUTELY NO WARRANTY, express or implied.\n\nIt is my intent that you should be able to use this on your system,\nas part of a software package, or anywhere else to improve security,\nensure compatibility, or for any other purpose. I would appreciate\nit if you give credit where it is due and keep your modifications in\nthe public domain as well, but I don't require that in order to let\nyou place this code and any modifications you make under a license\nof your choice.\n\nThis implementation is mostly compatible with OpenBSD's bcrypt.c (prefix\n\"$2a$\") by Niels Provos <provos at citi.umich.edu>, and uses some of his\nideas. The password hashing algorithm was designed by David Mazieres\n<dm at lcs.mit.edu>. For more information on the level of compatibility,\nplease refer to the comments in BF_set_key() and to the crypt(3) man page\nincluded in the crypt_blowfish tarball.\n\nThere's a paper on the algorithm that explains its design decisions:\n\nhttp://www.usenix.org/events/usenix99/provos.html\n\nSome of the tricks in BF_ROUND might be inspired by Eric Young's\nBlowfish library (I can't be sure if I would think of something if I\nhadn't seen his code).\n\n\n6. ext/standard/rand\n\nThe following php_mt_...() functions are based on a C++ class MTRand by\nRichard J. Wagner. For more information see the web page at\nhttp://www-personal.engin.umich.edu/~wagnerr/MersenneTwister.html\n\nMersenne Twister random number generator -- a C++ class MTRand\nBased on code by Makoto Matsumoto, Takuji Nishimura, and Shawn Cokus\nRichard J. Wagner  v1.0  15 May 2003  rjwagner@writeme.com\n\nThe Mersenne Twister is an algorithm for generating random numbers.  It\nwas designed with consideration of the flaws in various other generators.\nThe period, 2^19937-1, and the order of equidistribution, 623 dimensions,\nare far greater.  The generator is also fast; it avoids multiplication and\ndivision, and it benefits from caches and pipelines.  For more information\nsee the inventors' web page at http://www.math.keio.ac.jp/~matumoto/emt.html\n\nReference\nM. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-Dimensionally\nEquidistributed Uniform Pseudo-Random Number Generator\", ACM Transactions on\nModeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.\n\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nCopyright (C) 2000 - 2003, Richard J. Wagner\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. The names of its contributors may not be used to endorse or promote\n   products derived from this software without specific prior written\n   permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n7. ext/standard/scanf\n\nscanf.c --\n\nThis file contains the base code which implements sscanf and by extension\nfscanf. Original code is from TCL8.3.0 and bears the following copyright:\n\nThis software is copyrighted by the Regents of the University of\nCalifornia, Sun Microsystems, Inc., Scriptics Corporation,\nand other parties.  The following terms apply to all files associated\nwith the software unless explicitly disclaimed in individual files.\n\nThe authors hereby grant permission to use, copy, modify, distribute,\nand license this software and its documentation for any purpose, provided\nthat existing copyright notices are retained in all copies and that this\nnotice is included verbatim in any distributions. No written agreement,\nlicense, or royalty fee is required for any of the authorized uses.\nModifications to this software may be copyrighted by their authors\nand need not follow the licensing terms described here, provided that\nthe new terms are clearly indicated on the first page of each file where\nthey apply.\n\nIN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY\nFOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES\nARISING OUT OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY\nDERIVATIVES THEREOF, EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nTHE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE\nIS PROVIDED ON AN \"AS IS\" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE\nNO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR\nMODIFICATIONS.\n\nGOVERNMENT USE: If you are acquiring this software on behalf of the\nU.S. government, the Government shall have only \"Restricted Rights\"\nin the software and related documentation as defined in the Federal\nAcquisition Regulations (FARs) in Clause 52.227.19 (c) (2).  If you\nare acquiring the software on behalf of the Department of Defense, the\nsoftware shall be classified as \"Commercial Computer Software\" and the\nGovernment shall have only \"Restricted Rights\" as defined in Clause\n252.227-7013 (c) (1) of DFARs.  Notwithstanding the foregoing, the\nauthors grant the U.S. Government and others acting in its behalf\npermission to use and distribute the software in accordance with the\nterms specified in this license.\n\n\n8. ext/standard/strnatcmp.c\n\nstrnatcmp.c -- Perform 'natural order' comparisons of strings in C.\nCopyright (C) 2000 by Martin Pool <mbp@humbug.org.au>\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\n\n9. ext/standard/uuencode\n\nPortions of this code are based on Berkeley's uuencode/uudecode\nimplementation.\n\nCopyright (c) 1983, 1993\nThe Regents of the University of California.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. All advertising materials mentioning features or use of this software\n   must display the following acknowledgement:\nThis product includes software developed by the University of\nCalifornia, Berkeley and its contributors.\n4. Neither the name of the University nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n\n10. main/snprintf.c\n\nCopyright (c) 2002, 2006 Todd C. Miller <Todd.Miller@courtesan.com>\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nSponsored in part by the Defense Advanced Research Projects\nAgency (DARPA) and Air Force Research Laboratory, Air Force\nMateriel Command, USAF, under agreement number F39502-99-1-0512.\n\nmain/spprintf\nCopyright (c) 1995-1998 The Apache Group.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n\n3. All advertising materials mentioning features or use of this\n   software must display the following acknowledgment:\n   \"This product includes software developed by the Apache Group\n   for use in the Apache HTTP server project (http://www.apache.org/).\"\n\n4. The names \"Apache Server\" and \"Apache Group\" must not be used to\n   endorse or promote products derived from this software without\n   prior written permission.\n\n5. Redistributions of any form whatsoever must retain the following\n   acknowledgment:\n   \"This product includes software developed by the Apache Group\n   for use in the Apache HTTP server project (http://www.apache.org/).\"\n\nTHIS SOFTWARE IS PROVIDED BY THE APACHE GROUP ``AS IS'' AND ANY\nEXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE APACHE GROUP OR\nITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\n====================================================================\n\nThis software consists of voluntary contributions made by many\nindividuals on behalf of the Apache Group and was originally based\non public domain software written at the National Center for\nSupercomputing Applications, University of Illinois, Urbana-Champaign.\nFor more information on the Apache Group and the Apache HTTP server\nproject, please see <http://www.apache.org/>.\n\nThis code is based on, and used with the permission of, the\nSIO stdio-replacement strx_* functions by Panos Tsirigotis\n<panos@alumni.cs.colorado.edu> for xinetd.\n\n\n11. main/strlcat\n12. main/strlcpy\n\nCopyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. The name of the author may not be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL\nTHE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n13. libgd (ext/gd)\n\n* Portions copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n  2002, 2003, 2004 by Cold Spring Harbor Laboratory. Funded under\n  Grant P41-RR02188 by the National Institutes of Health.\n\n* Portions copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n  2004 by Boutell.Com, Inc.\n\n* Portions relating to GD2 format copyright 1999, 2000, 2001, 2002,\n  2003, 2004 Philip Warner.\n\n* Portions relating to PNG copyright 1999, 2000, 2001, 2002, 2003,\n  2004 Greg Roelofs.\n\n* Portions relating to gdttf.c copyright 1999, 2000, 2001, 2002,\n  2003, 2004 John Ellson (ellson@graphviz.org).\n\n* Portions relating to gdft.c copyright 2001, 2002, 2003, 2004 John\n  Ellson (ellson@graphviz.org).\n\n* Portions copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n  Pierre-Alain Joye (pierre@libgd.org).\n\n* Portions relating to JPEG and to color quantization copyright\n  2000, 2001, 2002, 2003, 2004, Doug Becker and copyright (C) 1994,\n  1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Thomas\n  G. Lane. This software is based in part on the work of the\n  Independent JPEG Group. See the file README-JPEG.TXT for more\n  information.\n\n* Portions relating to GIF compression copyright 1989 by Jef\n  Poskanzer and David Rowley, with modifications for thread safety\n  by Thomas Boutell.\n\n* Portions relating to GIF decompression copyright 1990, 1991, 1993\n  by David Koblas, with modifications for thread safety by Thomas\n  Boutell.\n\n* Portions relating to WBMP copyright 2000, 2001, 2002, 2003, 2004\n  Maurice Szmurlo and Johan Van den Brande.\n\n* Portions relating to GIF animations copyright 2004 Jaakko Hyvätti\n  (jaakko.hyvatti@iki.fi)\n\nPermission has been granted to copy, distribute and modify gd in\nany context without fee, including a commercial application,\nprovided that this notice is present in user-accessible supporting\ndocumentation.\n\nThis does not affect your ownership of the derived work itself,\nand the intent is to assure proper credit for the authors of gd,\nnot to interfere with your productive use of gd. If you have\nquestions, ask. \"Derived works\" includes all programs that utilize\nthe library. Credit must be given in user-accessible\ndocumentation.\n\nThis software is provided \"AS IS.\" The copyright holders disclaim\nall warranties, either express or implied, including but not\nlimited to implied warranties of merchantability and fitness for a\nparticular purpose, with respect to this code and accompanying\ndocumentation.\n\nAlthough their code does not appear in the current release, the\nauthors wish to thank David Koblas, David Rowley, and Hutchison\nAvenue Software Corporation for their prior contributions.\n\nEND OF COPYRIGHT STATEMENT\n\n\n14. ext/phar portions of tar implementations\n\nportions of tar implementations in ext/phar - phar_tar_octal() are based on an\nimplementation by Tim Kientzle from libarchive, licensed with this license:\n\n Copyright (c) 2003-2007 Tim Kientzle\n All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions\n are met:\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR\n IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n15. ext/phar/zip.c portion extracted from libzip\n\nzip_dirent.c -- read directory entry (local or central), clean dirent\nCopyright (C) 1999, 2003, 2004, 2005 Dieter Baron and Thomas Klausner\n\nThis function is part of libzip, a library to manipulate ZIP archives.\nThe authors can be contacted at <nih@giga.or.at>\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in\n   the documentation and/or other materials provided with the\n   distribution.\n3. The names of the authors may not be used to endorse or promote\n   products derived from this software without specific prior\n   written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\nGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\nIF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n17. ext/mbstring/ucgendat portions based on the ucgendat.c from the OpenLDAP\n\nThe OpenLDAP Public License\n  Version 2.8, 17 August 2003\n\nRedistribution and use of this software and associated documentation\n(\"Software\"), with or without modification, are permitted provided\nthat the following conditions are met:\n\n1. Redistributions in source form must retain copyright statements\n   and notices,\n\n2. Redistributions in binary form must reproduce applicable copyright\n   statements and notices, this list of conditions, and the following\n   disclaimer in the documentation and/or other materials provided\n   with the distribution, and\n\n3. Redistributions must contain a verbatim copy of this document.\n\nThe OpenLDAP Foundation may revise this license from time to time.\nEach revision is distinguished by a version number.  You may use\nthis Software under terms of this license revision or under the\nterms of any subsequent revision of the license.\n\nTHIS SOFTWARE IS PROVIDED BY THE OPENLDAP FOUNDATION AND ITS\nCONTRIBUTORS ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT\nSHALL THE OPENLDAP FOUNDATION, ITS CONTRIBUTORS, OR THE AUTHOR(S)\nOR OWNER(S) OF THE SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\nThe names of the authors and copyright holders must not be used in\nadvertising or otherwise to promote the sale, use or other dealing\nin this Software without specific, written prior permission.  Title\nto copyright in this Software shall at all times remain with copyright\nholders.\n\nOpenLDAP is a registered trademark of the OpenLDAP Foundation.\n\nCopyright 1999-2003 The OpenLDAP Foundation, Redwood City,\nCalifornia, USA.  All Rights Reserved.  Permission to copy and\ndistribute verbatim copies of this document is granted.\n\n\n19. xxHash\n\nxxHash - Extremely Fast Hash algorithm\nHeader File\nCopyright (C) 2012-2020 Yann Collet\n\nBSD 2-Clause License (https://www.opensource.org/licenses/bsd-license.php)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\n     copyright notice, this list of conditions and the following disclaimer\n     in the documentation and/or other materials provided with the\n     distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nYou can contact the author at:\n  - xxHash homepage: https://www.xxhash.com\n  - xxHash source repository: https://github.com/Cyan4973/xxHash\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.724609375,
          "content": "<div align=\"center\">\n    <a href=\"https://www.php.net\">\n        <img\n            alt=\"PHP\"\n            src=\"https://www.php.net/images/logos/new-php-logo.svg\"\n            width=\"150\">\n    </a>\n</div>\n\n# The PHP Interpreter\n\nPHP is a popular general-purpose scripting language that is especially suited to\nweb development. Fast, flexible and pragmatic, PHP powers everything from your\nblog to the most popular websites in the world. PHP is distributed under the\n[PHP License v3.01](LICENSE).\n\n[![Push](https://github.com/php/php-src/actions/workflows/push.yml/badge.svg)](https://github.com/php/php-src/actions/workflows/push.yml)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/php.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:php)\n\n## Documentation\n\nThe PHP manual is available at [php.net/docs](https://www.php.net/docs).\n\n## Installation\n\n### Prebuilt packages and binaries\n\nPrebuilt packages and binaries can be used to get up and running fast with PHP.\n\nFor Windows, the PHP binaries can be obtained from\n[windows.php.net](https://windows.php.net). After extracting the archive the\n`*.exe` files are ready to use.\n\nFor other systems, see the [installation chapter](https://www.php.net/install).\n\n### Building PHP source code\n\n*For Windows, see [Build your own PHP on Windows](https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2).*\n\nFor a minimal PHP build from Git, you will need autoconf, bison, and re2c. For\na default build, you will additionally need libxml2 and libsqlite3.\n\nOn Ubuntu, you can install these using:\n\n    sudo apt install -y pkg-config build-essential autoconf bison re2c \\\n                        libxml2-dev libsqlite3-dev\n\nOn Fedora, you can install these using:\n\n    sudo dnf install re2c bison autoconf make libtool ccache libxml2-devel sqlite-devel\n\nGenerate configure:\n\n    ./buildconf\n\nConfigure your build. `--enable-debug` is recommended for development, see\n`./configure --help` for a full list of options.\n\n    # For development\n    ./configure --enable-debug\n    # For production\n    ./configure\n\nBuild PHP. To speed up the build, specify the maximum number of jobs using `-j`:\n\n    make -j4\n\nThe number of jobs should usually match the number of available cores, which\ncan be determined using `nproc`.\n\n## Testing PHP source code\n\nPHP ships with an extensive test suite, the command `make test` is used after\nsuccessful compilation of the sources to run this test suite.\n\nIt is possible to run tests using multiple cores by setting `-jN` in\n`TEST_PHP_ARGS`:\n\n    make TEST_PHP_ARGS=-j4 test\n\nShall run `make test` with a maximum of 4 concurrent jobs: Generally the maximum\nnumber of jobs should not exceed the number of cores available.\n\nThe [qa.php.net](https://qa.php.net) site provides more detailed info about\ntesting and quality assurance.\n\n## Installing PHP built from source\n\nAfter a successful build (and test), PHP may be installed with:\n\n    make install\n\nDepending on your permissions and prefix, `make install` may need super user\npermissions.\n\n## PHP extensions\n\nExtensions provide additional functionality on top of PHP. PHP consists of many\nessential bundled extensions. Additional extensions can be found in the PHP\nExtension Community Library - [PECL](https://pecl.php.net).\n\n## Contributing\n\nThe PHP source code is located in the Git repository at\n[github.com/php/php-src](https://github.com/php/php-src). Contributions are most\nwelcome by forking the repository and sending a pull request.\n\nDiscussions are done on GitHub, but depending on the topic can also be relayed\nto the official PHP developer mailing list internals@lists.php.net.\n\nNew features require an RFC and must be accepted by the developers. See\n[Request for comments - RFC](https://wiki.php.net/rfc) and\n[Voting on PHP features](https://wiki.php.net/rfc/voting) for more information\non the process.\n\nBug fixes don't require an RFC. If the bug has a GitHub issue, reference it in\nthe commit message using `GH-NNNNNN`. Use `#NNNNNN` for tickets in the old\n[bugs.php.net](https://bugs.php.net) bug tracker.\n\n    Fix GH-7815: php_uname doesn't recognise latest Windows versions\n    Fix #55371: get_magic_quotes_gpc() throws deprecation warning\n\nSee [Git workflow](https://wiki.php.net/vcs/gitworkflow) for details on how pull\nrequests are merged.\n\n### Guidelines for contributors\n\nSee further documents in the repository for more information on how to\ncontribute:\n\n- [Contributing to PHP](/CONTRIBUTING.md)\n- [PHP coding standards](/CODING_STANDARDS.md)\n- [Internal documentation](https://php.github.io/php-src/)\n- [Mailing list rules](/docs/mailinglist-rules.md)\n- [PHP release process](/docs/release-process.md)\n\n## Credits\n\nFor the list of people who've put work into PHP, please see the\n[PHP credits page](https://www.php.net/credits.php).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.603515625,
          "content": "# Reporting Security Issues\n\nPlease report security vulnerabilities on GitHub at:\n<https://github.com/php/php-src/security/advisories/new>\n\nIf for some reason you cannot use the form at GitHub, or you need to talk to\nsomebody about a PHP security issue that might not be a bug report, please write\nto <security@php.net>.\n\nVulnerability reports remain private until published. When published, you will\nbe credited as a contributor, and your contribution will reflect the MITRE\nCredit System.\n\n# Vulnerability Policy\n\nOur full policy is described at\nhttps://github.com/php/policies/blob/main/security-classification.rst\n"
        },
        {
          "name": "TSRM",
          "type": "tree",
          "content": null
        },
        {
          "name": "UPGRADING",
          "type": "blob",
          "size": 9.880859375,
          "content": "PHP 8.5 UPGRADE NOTES\n\n1. Backward Incompatible Changes\n2. New Features\n3. Changes in SAPI modules\n4. Deprecated Functionality\n5. Changed Functions\n6. New Functions\n7. New Classes and Interfaces\n8. Removed Extensions and SAPIs\n9. Other Changes to Extensions\n10. New Global Constants\n11. Changes to INI File Handling\n12. Windows Support\n13. Other Changes\n14. Performance Improvements\n\n========================================\n1. Backward Incompatible Changes\n========================================\n\n- BZ2:\n  . bzcompress() now throws a ValueError when $block_size is not between\n    1 and 9.\n  . bzcompress() now throws a ValueError when $work_factor is not between\n    0 and 250.\n\n- Core:\n  . It is no longer possible to use \"array\" and \"callable\" as class alias names\n    in class_alias().\n  . Loosely comparing uncomparable objects (e.g. enums, \\CurlHandle and other\n    internal classes) to booleans was previously inconsistent. If compared to a\n    boolean literal $object == true, it would behave the same way as (bool)\n    $object. If compared to a statically unknown value $object == $true, it\n    would always return false. This behavior was consolidated to always follow\n    the behavior of (bool) $object.\n  . The return value of gc_collect_cycles() no longer includes strings and\n    resources that were indirectly collected through cycles.\n\n- Intl:\n  . The extension now requires at least ICU 57.1.\n\n- LDAP:\n  . ldap_get_option() and ldap_set_option() now throw a ValueError when\n    passing an invalid option.\n\n- PCNTL:\n  . pcntl_exec() now throws ValueErrors when entries of the $args parameter\n    contain null bytes.\n  . pcntl_exec() now throws ValueErrors when entries or keys of the\n    $env_vars parameter contain null bytes.\n\n- PDO_FIREBIRD:\n  . A ValueError is now thrown when trying to set a cursor name that is too\n    long on a PDOStatement resulting from the Firebird driver.\n\n- SPL:\n  . ArrayObject no longer accepts enums, as modifying the $name or $value\n    properties can break engine assumptions.\n  . SplFileObject::fwrite's parameter $length is now nullable. The default\n    value changed from 0 to null.\n\n========================================\n2. New Features\n========================================\n\n- Core:\n  . Added support for Closures in constant expressions.\n    RFC: https://wiki.php.net/rfc/closures_in_const_expr\n\n- Curl:\n  . Added support for share handles that are persisted across multiple PHP\n    requests, safely allowing for more effective connection reuse.\n    RFC: https://wiki.php.net/rfc/curl_share_persistence_improvement\n\n- DOM:\n  . Added Dom\\Element::$outerHTML.\n\n- XSL:\n  . The $namespace argument of XSLTProcessor::getParameter(),\n    XSLTProcessor::setParameter() and XSLTProcessor::removeParameter()\n    now actually works instead of being treated as empty.\n    This only works if the $name argument does not use Clark notation\n    and is not a QName because in those cases the namespace is taken\n    from the namespace href or prefix respectively.\n\n========================================\n3. Changes in SAPI modules\n========================================\n\n- CLI:\n  . Trying to set a process title that is too long with cli_set_process_title()\n    will now fail instead of silently truncating the given title.\n\n========================================\n4. Deprecated Functionality\n========================================\n\n- Hash:\n  The MHASH_* constants have been deprecated.  These have been overlooked\n  when the mhash*() function family has been deprecated per\n  https://wiki.php.net/rfc/deprecations_php_8_1#mhash_function_family\n\n========================================\n5. Changed Functions\n========================================\n\n- Intl:\n  . IntlDateFormatter::setTimeZone()/datefmt_set_timezone()\n    throws an IntlException on uninitialised classes/clone failures.\n\n- PCNTL:\n  . pcntl_exec() now has a formal return type of false.\n\n- PDO_PGSQL:\n  . PDO::pgsqlCopyFromArray also supports inputs as Iterable.\n  . Pdo\\Pgsql::setAttribute and Pdo\\Pgsql::prepare supports\n    PDO::ATTR_PREFETCH sets to 0 which set to lazy fetch mode.\n    In this mode, statements cannot be run parallely.\n\n- PGSQL:\n  . pg_copy_from also supports inputs as Iterable.\n\n- POSIX:\n  . posix_ttyname sets last_error to EBADF when encountering\n    an invalid file descriptor.\n  . posix_isatty raises an E_WARNING message when encountering\n    an invalid file descriptor.\n  . posix_fpathconf checks invalid file descriptors and sets\n    last_error to EBADF and raises an E_WARNING message.\n\n- Session:\n  . session_start is stricter in regard of the option argument.\n    it throws a ValueError if the whole is not a hashmap or\n    a TypeError if read_on_close value is not a valid type\n    compatible with int.\n\n- Sockets:\n  . socket_create_listen, socket_bind and socket_sendto throw a\n    ValueError if the port is lower than 0 or greater than 65535,\n    also if any of the hints array entry is indexes numerically.\n  . socket_addrinfo_lookup throw a TypeError if any of the hints\n    values cannot be cast to a int and can throw a ValueError if\n    any of these values overflow.\n  . socket_set_option with MCAST_LEAVE_GROUP/MCAST_LEAVE_SOURCE_GROUP\n    options will throw an exception if the value isn't a valid object\n    or array.\n\n- Zlib:\n  . The \"use_include_path\" argument for the\n    gzfile, gzopen and readgzfile functions had been changed\n    from int to boolean.\n\n========================================\n6. New Functions\n========================================\n\n- Curl:\n  . curl_multi_get_handles() allows retrieving all CurlHandles current\n    attached to a CurlMultiHandle. This includes both handles added using\n    curl_multi_add_handle() and handles accepted by CURLMOPT_PUSHFUNCTION.\n  . curl_share_init_persistent() allows creating a share handle that is\n    persisted across multiple PHP requests.\n    RFC: https://wiki.php.net/rfc/curl_share_persistence_improvement\n\n- DOM:\n  . Added Dom\\Element::insertAdjacentHTML().\n\n- Enchant:\n  . Added enchant_dict_remove_from_session() to remove a word added to the\n    spellcheck session via enchant_dict_add_to_session().\n\n- PGSQL:\n  . pg_close_stmt offers an alternative way to close a prepared\n    statement from the DEALLOCATE sql command in that we can reuse\n    its name afterwards.\n\n- Reflection:\n  . ReflectionConstant::getFileName() was introduced.\n  . ReflectionConstant::getExtension() and\n    ReflectionConstant::getExtensionName() were introduced.\n\n========================================\n7. New Classes and Interfaces\n========================================\n\n- Curl:\n  . CurlSharePersistentHandle representing a share handle that is persisted\n    across multiple PHP requests.\n    RFC: https://wiki.php.net/rfc/curl_share_persistence_improvement\n\n========================================\n8. Removed Extensions and SAPIs\n========================================\n\n========================================\n9. Other Changes to Extensions\n========================================\n\n- Readline:\n  . The return types of readline_add_history(), readline_clear_history(), and\n    readline_callback_handler_install() have been changed to true, rather\n    than bool.\n\n========================================\n10. New Global Constants\n========================================\n\n- Core:\n  . PHP_BUILD_DATE.\n\n- POSIX:\n  . POSIX_SC_OPEN_MAX.\n\n- Sockets:\n  . IPPROTO_ICMP/IPPROTO_ICMPV6.\n  . TCP_FUNCTION_BLK (FreeBSD only).\n  . TCP_FUNCTION_ALIAS (FreeBSD only).\n  . TCP_REUSPORT_LB_NUMA (FreeBSD only).\n  . TCP_REUSPORT_LB_NUMA_NODOM (FreeBSD only).\n  . TCP_REUSPORT_LB_NUMA_CURDOM (FreeBSD only).\n  . TCP_BBR_ALGORITHM (FreeBSD only).\n\n========================================\n11. Changes to INI File Handling\n========================================\n\n- Opcache:\n  . Added opcache.file_cache_read_only to support a read-only\n    opcache.file_cache directory, for use with read-only file systems\n    (e.g. read-only Docker containers).\n    Best used with opcache.validate_timestamps=0,\n    opcache.enable_file_override=1,\n    and opcache.file_cache_consistency_checks=0.\n    Note: A cache generated with a different build of PHP, a different file\n    path, or different settings (including which extensions are loaded), may be\n    ignored.\n\n========================================\n12. Windows Support\n========================================\n\n* The configuration variables PHP_VERSION, PHP_MINOR_VERSION, and\n  PHP_RELEASE_VERSION are now always numbers.  Previously, they have been\n  strings for buildconf builds.\n\n* phpize builds now reflect the source tree in the build dir (like that already\n  worked for in-tree builds); some extension builds (especially when using\n  Makefile.frag.w32) may need adjustments.\n\n* --enable-sanitzer is now supported for MSVC builds.  This enables ASan and\n  debug assertions, and is supported as of MSVC 16.10 and Windows 10.\n\n* COM:\n  . The extension is now build shared by default; previously it defaulted to a\n    static extension, although the official Windows binaries built a shared\n    extension.\n\n* FFI:\n  . It is no longer necessary to specify the library when using FFI::cdef()\n    and FFI::load(). However, this convenience feature should not be used in\n    production.\n\n* Streams:\n  . If only pipe streams are contained in the $read array, and the $write and\n    $except arrays are empty, stream_select() now behaves similar to POSIX\n    systems, i.e. the function only returns if at least one pipe is ready to be\n    read, or after the timeout expires.  Previously, stream_select() returned\n    immediately, reporting all streams as ready to read.\n\n========================================\n13. Other Changes\n========================================\n\n- Core:\n  The high resolution timer (`hrtime()`) on macOS now uses the recommended\n  `clock_gettime_nsec_np(CLOCK_UPTIME_RAW)` API instead of\n  `mach_absolute_time()`.\n\n========================================\n14. Performance Improvements\n========================================\n\n- XMLReader:\n  . Improved property access performance.\n\n- XMLWriter:\n  . Improved performance and reduce memory consumption.\n"
        },
        {
          "name": "UPGRADING.INTERNALS",
          "type": "blob",
          "size": 0.720703125,
          "content": "PHP 8.5 INTERNALS UPGRADE NOTES\n\n1. Internal API changes\n\n2. Build system changes\n\n3. Module changes\n\n4. OpCode changes\n\n5. SAPI changes\n\n========================\n1. Internal API changes\n========================\n\n========================\n2. Build system changes\n========================\n\n========================\n3. Module changes\n========================\n\n- ext/gd\n  . The gdImageScale*() and gdImageRotate*() helpers are now internal in the\n    bundled libgd, like they have been in external libgd as of gd-2.1.1.\n\n- ext/libxml\n  . The refcount APIs now return an `unsigned int` instead of an `int`.\n\n========================\n4. OpCode changes\n========================\n\n========================\n5. SAPI changes\n========================\n"
        },
        {
          "name": "Zend",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "buildconf",
          "type": "blob",
          "size": 3.9375,
          "content": "#!/bin/sh\n#\n# A wrapper around Autoconf that generates files to build PHP on *nix systems.\n\nPHP_AUTOCONF=${PHP_AUTOCONF:-autoconf}\nPHP_AUTOHEADER=${PHP_AUTOHEADER:-autoheader}\nforce=0\ndebug=0\n\n# Go to project root.\ncd \"$(CDPATH='' cd -- \"$(dirname -- \"$0\")\" && pwd -P)\" || exit\n\nphp_extra_version=$(grep '^AC_INIT(' configure.ac) || exit\ncase \"$php_extra_version\" in\n  *-dev*)\n    dev=1\n    ;;\n  *)\n    dev=0\n    ;;\nesac\n\nwhile test $# -gt 0; do\n  if test \"$1\" = \"-h\" || test \"$1\" = \"--help\"; then\n    cat << HELP\nPHP buildconf\n\nA wrapper around the autoconf and autoheader that generate files for building\nPHP on *nix systems (configure and main/php_config.h.in). The configure script\nis used to customize the PHP build based on the provided options and system. PHP\nreleases downloaded from PHP.net already include the configure script so\ninstalling Autoconf and running buildconf is not needed. For the PHP sources\nfrom the Git repository, buildconf is used for generating a new configure script\nand required files.\n\nSYNOPSIS:\n  buildconf [<options>]\n\nOPTIONS:\n  -f, --force     Regenerate configure files in PHP release packages.\n  --debug         Display warnings emitted by Autoconf.\n  -h, --help      Display this help.\n\nENVIRONMENT:\n  The following optional variables are supported:\n\n  PHP_AUTOCONF    Overrides the path to autoconf tool.\n                  PHP_AUTOCONF=/path/to/autoconf ./buildconf\n  PHP_AUTOHEADER  Overrides the path to autoheader tool.\n                  PHP_AUTOHEADER=/path/to/autoheader ./buildconf\nHELP\n    exit 0\n  fi\n\n  if test \"$1\" = \"-f\" || test \"$1\" = \"--force\"; then\n    force=1\n  fi\n\n  if test \"$1\" = \"--debug\"; then\n    debug=1\n  fi\n\n  shift\ndone\n\nif test \"$dev\" = \"0\" && test \"$force\" = \"0\"; then\n  if test -f \"configure\" && test -f \"main/php_config.h.in\"; then\n    echo \"buildconf: The configure script is already built. All done.\"\n    echo \"           Run ./configure to proceed with customizing the PHP build.\"\n    exit 0\n  else\n    echo \"buildconf: Configure files are missing.\" >&2\n    echo \"           Run ./buildconf --force to create a configure script.\" >&2\n    exit 1\n  fi\nfi\n\necho \"buildconf: Checking installation\"\n\n# Get minimum required autoconf version from the configure.ac file.\nmin_version=$(sed -n 's/AC_PREREQ(\\[\\(.*\\)\\])/\\1/p' configure.ac)\n\n# Check if autoconf exists.\nac_version=$($PHP_AUTOCONF --version 2>/dev/null|head -n 1|sed -e 's/^[^0-9]*//' -e 's/[^0-9.]*$//')\n\nif test -z \"$ac_version\"; then\n  echo \"buildconf: autoconf not found.\" >&2\n  echo \"           You need autoconf version $min_version or newer installed\" >&2\n  echo \"           to build PHP from Git.\" >&2\n  exit 1\nfi\n\n# Check autoconf version.\nset -f; IFS='.'; set -- $ac_version; set +f; IFS=' '\nac_version_num=\"$(expr ${1} \\* 10000 + ${2} \\* 100)\"\nset -f; IFS='.'; set -- $min_version; set +f; IFS=' '\nmin_version_num=\"$(expr ${1} \\* 10000 + ${2} \\* 100)\"\n\nif test \"$ac_version_num\" -lt \"$min_version_num\"; then\n  echo \"buildconf: autoconf version $ac_version found.\" >&2\n  echo \"           You need autoconf version $min_version or newer installed\" >&2\n  echo \"           to build PHP from Git.\" >&2\n  exit 1\nelse\n  echo \"buildconf: autoconf version $ac_version (ok)\"\nfi\n\nif test \"$force\" = \"1\"; then\n  echo \"buildconf: Forcing buildconf. The configure files will be regenerated.\"\nfi\n\n# Clean cache and explicitly remove all targets if present. Remove also\n# aclocal.m4 if present. It is automatically included by autoconf but not used\n# by the PHP build system since PHP 7.4.\necho \"buildconf: Cleaning cache and configure files\"\nrm -rf \\\n  aclocal.m4 \\\n  autom4te.cache \\\n  config.cache \\\n  configure \\\n  main/php_config.h.in\n\nif test \"$debug\" = \"1\"; then\n  autoconf_flags=\"-f -Wall\"\n  autoheader_flags=\"-Wall\"\nelse\n  autoconf_flags=\"-f\"\n  autoheader_flags=\"\"\nfi\n\necho \"buildconf: Rebuilding configure\"\n$PHP_AUTOCONF $autoconf_flags\n\necho \"buildconf: Rebuilding main/php_config.h.in\"\n$PHP_AUTOHEADER $autoheader_flags\n\necho \"buildconf: Run ./configure to proceed with customizing the PHP build.\"\n"
        },
        {
          "name": "buildconf.bat",
          "type": "blob",
          "size": 0.337890625,
          "content": "@echo off\ncscript /nologo /e:jscript win32\\build\\buildconf.js %*\nSET PHP_BUILDCONF_PATH=%~dp0\ncopy %PHP_BUILDCONF_PATH%\\win32\\build\\configure.bat %PHP_BUILDCONF_PATH% > nul\nSET PHP_SDK_SCRIPT_PATH=\n\nIF NOT EXIST %PHP_BUILDCONF_PATH% (echo Error generating configure script, configure script was not copied) ELSE (echo Now run 'configure --help')\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.310546875,
          "content": "ignore:\n  # bundled libraries\n  - \"ext/dom/lexbor/lexbor/core\"\n  - \"ext/dom/lexbor/lexbor/css\"\n  - \"ext/dom/lexbor/lexbor/dom\"\n  - \"ext/dom/lexbor/lexbor/encoding\"\n  - \"ext/dom/lexbor/lexbor/html\"\n  - \"ext/dom/lexbor/lexbor/ns\"\n  - \"ext/dom/lexbor/lexbor/ports\"\n  - \"ext/dom/lexbor/lexbor/tag\"\n  - \"ext/pcre/pcre2lib\"\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 51.4560546875,
          "content": "dnl Process this file with autoconf to produce a configure script.\n\ndnl Include external macro definitions before the AC_INIT to also remove\ndnl comments starting with # and empty newlines from the included files.\ndnl ----------------------------------------------------------------------------\nm4_include([build/ax_check_compile_flag.m4])\nm4_include([build/ax_func_which_gethostbyname_r.m4])\nm4_include([build/ax_gcc_func_attribute.m4])\nm4_include([build/libtool.m4])\nm4_include([build/php_cxx_compile_stdcxx.m4])\nm4_include([build/php.m4])\nm4_include([build/pkg.m4])\nm4_include([TSRM/threads.m4])\nm4_include([Zend/Zend.m4])\n\ndnl Basic autoconf initialization, generation of config.nice.\ndnl ----------------------------------------------------------------------------\n\nAC_PREREQ([2.68])\nAC_INIT([PHP],[8.5.0-dev],[https://github.com/php/php-src/issues],[php],[https://www.php.net])\nAC_CONFIG_SRCDIR([main/php_version.h])\nAC_CONFIG_AUX_DIR([build])\nAC_PRESERVE_HELP_ORDER\n\nPHP_CONFIG_NICE([config.nice])\n\nPHP_CANONICAL_HOST_TARGET\n\nAC_CONFIG_HEADERS([main/php_config.h])\n\nAH_TOP([\n#ifndef PHP_CONFIG_H\n#define PHP_CONFIG_H\n\n#if defined(__GNUC__) && __GNUC__ >= 4\n# define ZEND_API __attribute__ ((visibility(\"default\")))\n# define ZEND_DLEXPORT __attribute__ ((visibility(\"default\")))\n#else\n# define ZEND_API\n# define ZEND_DLEXPORT\n#endif\n\n#define ZEND_DLIMPORT\n])\nAH_BOTTOM([\n#include <stdlib.h>\n\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n\n#ifdef HAVE_SYS_SELECT_H\n#include <sys/select.h>\n#endif\n\n#include <string.h>\n\n#endif /* PHP_CONFIG_H */\n])\n\nac_IFS=$IFS; IFS=\".\"\nset $(echo AC_PACKAGE_VERSION | \"${SED}\" 's/\\([[0-9\\.]]*\\)\\(.*\\)/\\1\\.\\2/')\nIFS=$ac_IFS\nPHP_MAJOR_VERSION=[$]1\nPHP_MINOR_VERSION=[$]2\nPHP_RELEASE_VERSION=[$]3\ndnl Allow overriding PHP_EXTRA_VERSION through the homonymous env var\nAC_ARG_VAR([PHP_EXTRA_VERSION],\n  [Extra PHP version label suffix, e.g. '-dev', 'rc1', '-acme'])dnl\nAS_VAR_IF([PHP_EXTRA_VERSION],, [PHP_EXTRA_VERSION=[$]4])\nPHP_VERSION=\"$PHP_MAJOR_VERSION.$PHP_MINOR_VERSION.$PHP_RELEASE_VERSION$PHP_EXTRA_VERSION\"\nPHP_VERSION_ID=$(expr [$]PHP_MAJOR_VERSION \\* 10000 + [$]PHP_MINOR_VERSION \\* 100 + [$]PHP_RELEASE_VERSION)\n\ndnl Allow version values to be used in Makefile.\nPHP_SUBST([PHP_MAJOR_VERSION])\nPHP_SUBST([PHP_MINOR_VERSION])\nPHP_SUBST([PHP_RELEASE_VERSION])\nPHP_SUBST([PHP_EXTRA_VERSION])\n\ndnl Setting up the PHP version based on the information above.\ndnl ----------------------------------------------------------------------------\n\necho \"/* automatically generated by configure */\" > php_version.h.new\necho \"/* edit configure.ac to change version number */\" >> php_version.h.new\necho \"#define PHP_MAJOR_VERSION $PHP_MAJOR_VERSION\" >> php_version.h.new\necho \"#define PHP_MINOR_VERSION $PHP_MINOR_VERSION\" >> php_version.h.new\necho \"#define PHP_RELEASE_VERSION $PHP_RELEASE_VERSION\" >> php_version.h.new\necho \"#define PHP_EXTRA_VERSION \\\"$PHP_EXTRA_VERSION\\\"\" >> php_version.h.new\necho \"#define PHP_VERSION \\\"$PHP_VERSION\\\"\" >> php_version.h.new\necho \"#define PHP_VERSION_ID $PHP_VERSION_ID\" >> php_version.h.new\ncmp php_version.h.new $srcdir/main/php_version.h >/dev/null 2>&1\nif test $? -ne 0 ; then\n  rm -f $srcdir/main/php_version.h && mv php_version.h.new $srcdir/main/php_version.h && \\\n  echo 'Updated main/php_version.h'\nelse\n  rm -f php_version.h.new\nfi\n\ndnl Settings we want to make before the checks.\ndnl ----------------------------------------------------------------------------\n\nPHP_INIT_BUILD_SYSTEM\n\ndnl Because 'make install' is often performed by the superuser, we create the\ndnl libs subdirectory as the user who configures PHP. Otherwise, the current\ndnl user will not be able to delete libs or the contents of libs.\n\n$php_shtool mkdir -p libs\nrm -f libs/*\n\ndnl Checks for programs.\ndnl ----------------------------------------------------------------------------\n\nPKG_PROG_PKG_CONFIG\nAC_PROG_CC([cc gcc])\nPHP_DETECT_ICC\nPHP_DETECT_SUNCC\n\ndnl AC_PROG_CC_C99 is obsolete with autoconf >= 2.70 yet necessary for <= 2.69.\nm4_version_prereq([2.70],,[AC_PROG_CC_C99])\nAC_PROG_CPP\nAC_USE_SYSTEM_EXTENSIONS\nAC_PROG_LN_S\n\nAS_VAR_IF([cross_compiling], [yes],\n  [AC_CHECK_PROGS([BUILD_CC], [gcc clang c99 c89 cc cl], [none])\n    AC_MSG_CHECKING([for native build C compiler])\n    AC_MSG_RESULT([$BUILD_CC])],\n  [BUILD_CC=$CC])\n\ndnl Support systems with system libraries in e.g. /usr/lib64.\nPHP_ARG_WITH([libdir],\n  [for system library directory],\n  [AS_HELP_STRING([--with-libdir=NAME],\n    [Look for libraries in .../NAME rather than .../lib])],\n  [lib],\n  [no])\n\nPHP_ARG_ENABLE([rpath],\n  [whether to enable runpaths],\n  [AS_HELP_STRING([--disable-rpath],\n    [Disable passing additional runtime library search paths])],\n  [yes],\n  [no])\n\ndnl Check for -R, etc. switch.\nPHP_RUNPATH_SWITCH\n\ndnl Checks for some support/generator progs.\nPHP_PROG_BISON([3.0.0])\nPHP_PROG_RE2C([1.0.3], [--no-generation-date])\ndnl Find installed PHP. Minimum supported version for gen_stub.php is PHP 7.4.\nPHP_PROG_PHP([7.4])\n\nPHP_ARG_ENABLE([re2c-cgoto],\n  [whether to enable computed goto extension with re2c],\n  [AS_HELP_STRING([--enable-re2c-cgoto],\n    [Enable re2c -g flag to optimize conditional jumps using computed goto\n    extension, if supported by the compiler])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_RE2C_CGOTO], [no],,\n[AC_CACHE_CHECK([whether re2c -g works], [php_cv_have_re2c_cgoto],\n  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([[\nint main(void)\n{\nlabel1:\n  ;\nlabel2:\n  ;\n  static void *adr[] = { &&label1, &&label2 };\n  goto *adr[0];\n  return 0;\n}]])],\n  [php_cv_have_re2c_cgoto=yes],\n  [php_cv_have_re2c_cgoto=no])])\nAS_VAR_IF([php_cv_have_re2c_cgoto], [yes],\n  [AS_VAR_APPEND([RE2C_FLAGS], [\" -g\"])])\n])\n\ndnl Platform-specific compile settings.\ndnl ----------------------------------------------------------------------------\n\ndnl See bug #28605\ncase $host_cpu in\n  alpha*)\n    if test \"$GCC\" = \"yes\"; then\n      CFLAGS=\"$CFLAGS -mieee\"\n    else\n      CFLAGS=\"$CFLAGS -ieee\"\n    fi\n    ;;\n  sparc*)\n    if test \"$SUNCC\" = \"yes\"; then\n      CFLAGS=\"$CFLAGS -xmemalign=8s\"\n    fi\n    ;;\nesac\n\ndnl See https://github.com/php/php-src/issues/14140\nAX_CHECK_COMPILE_FLAG([-ffp-contract=off], [CFLAGS=\"$CFLAGS -ffp-contract=off\"])\n\ndnl Mark symbols hidden by default if the compiler (for example, gcc >= 4)\ndnl supports it. This can help reduce the binary size and startup time.\nAX_CHECK_COMPILE_FLAG([-fvisibility=hidden],\n                       [CFLAGS=\"$CFLAGS -fvisibility=hidden\"])\n\ncase $host_alias in\n  *solaris*)\n    CPPFLAGS=\"$CPPFLAGS -D_POSIX_PTHREAD_SEMANTICS\"\n    ;;\n  *hpux*)\n    if test \"$GCC\" = \"yes\"; then\n      CPPFLAGS=\"$CPPFLAGS -D_XOPEN_SOURCE_EXTENDED\"\n    fi\n    ;;\nesac\n\ndnl Disable PIC mode by default where it is known to be safe to do so, to avoid\ndnl the performance hit from the lost register.\nAC_MSG_CHECKING([whether to force non-PIC code in shared modules])\ncase $host_alias in\n  i?86-*-linux*|i?86-*-freebsd*)\n    if test \"${with_pic+set}\" != \"set\" || test \"$with_pic\" = \"no\"; then\n      with_pic=no\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\nesac\n\ndnl Detect musl libc\nAC_MSG_CHECKING([whether we are using musl libc])\nif command -v ldd >/dev/null && ldd --version 2>&1 | grep ^musl >/dev/null 2>&1\nthen\n  AC_MSG_RESULT([yes])\n  AC_DEFINE([__MUSL__], [1], [Define to 1 when using musl libc.])\nelse\n  AC_MSG_RESULT([no])\nfi\n\ndnl Add _GNU_SOURCE compile definition because the php_config.h with definitions\ndnl by AC_USE_SYSTEM_EXTENSIONS might be included after the system headers which\ndnl require extensions to C and POSIX.\nAS_VAR_APPEND([CPPFLAGS], [\" -D_GNU_SOURCE\"])\n\nPTHREADS_CHECK\nPHP_HELP_SEPARATOR([SAPI modules:])\nPHP_SHLIB_SUFFIX_NAMES\nPHP_BUILD_PROGRAM\nPHP_SAPI=none\n\ndnl SAPI configuration.\ndnl ----------------------------------------------------------------------------\n\ndnl Paths to the targets are relative to the build directory.\nSAPI_LIBNAME=libphp\nSAPI_LIBNAME_SHARED=$SAPI_LIBNAME.[]$SHLIB_DL_SUFFIX_NAME\nSAPI_LIBNAME_STATIC=$SAPI_LIBNAME.a\nSAPI_SHARED=libs/$SAPI_LIBNAME_SHARED\nSAPI_STATIC=libs/$SAPI_LIBNAME_STATIC\nSAPI_LIBTOOL=libphp.la\n\nPHP_CONFIGURE_PART([Configuring SAPI modules])\n\nesyscmd(./build/config-stubs sapi)\n\ndnl Show which main SAPI was selected.\nAC_MSG_CHECKING([for chosen SAPI module])\nAC_MSG_RESULT([$PHP_SAPI])\n\ndnl Show which binaries were selected.\nAC_MSG_CHECKING([for executable SAPI binaries])\nAS_VAR_IF([PHP_BINARIES],,\n  [AC_MSG_RESULT([none])],\n  [AC_MSG_RESULT([$PHP_BINARIES])])\n\ndnl Exit early.\nAS_VAR_IF([PHP_INSTALLED_SAPIS],, [AC_MSG_ERROR([Nothing to build.])])\n\ndnl Add POSIX threads compilation and linker flags when thread safety is enabled\ndnl with either the '--enable-zts' configure option or automatically enabled by\ndnl PHP SAPIs. For example, Apache SAPI.\nAS_VAR_IF([enable_zts], [yes], [\n  if test -n \"$ac_cv_pthreads_lib\"; then\n    LIBS=\"$LIBS -l$ac_cv_pthreads_lib\"\n  fi\n  if test -n \"$ac_cv_pthreads_cflags\"; then\n    CFLAGS=\"$CFLAGS $ac_cv_pthreads_cflags\"\n  fi\n\n  PTHREADS_FLAGS\n])\n\ndnl Starting system checks.\ndnl ----------------------------------------------------------------------------\n\nPHP_CONFIGURE_PART([Running system checks])\n\ndnl Find sendmail binary.\nPHP_PROG_SENDMAIL\n\ndnl Check whether the system uses EBCDIC (not ASCII) as its native codeset.\nPHP_EBCDIC\n\ndnl Check whether the system byte ordering is bigendian.\nPHP_C_BIGENDIAN\n\ndnl Check whether writing to stdout works.\nPHP_TEST_WRITE_STDOUT\n\ndnl Check for /usr/pkg/{lib,include} which is where NetBSD puts binary and\ndnl source packages. This should be harmless on other OSs.\nif test -d /usr/pkg/include && test -d /usr/pkg/lib; then\n   CPPFLAGS=\"$CPPFLAGS -I/usr/pkg/include\"\n   LDFLAGS=\"$LDFLAGS -L/usr/pkg/lib\"\nfi\ntest -d /usr/ucblib && PHP_ADD_LIBPATH([/usr/ucblib])\n\ndnl First, library checks.\ndnl ----------------------------------------------------------------------------\n\nAC_SEARCH_LIBS([socket], [socket network])\n\nAC_CHECK_FUNCS([socketpair],,\n  [AC_SEARCH_LIBS([socketpair], [socket network],\n    [AC_DEFINE([HAVE_SOCKETPAIR], [1])])])\n\nAC_SEARCH_LIBS([gethostbyaddr], [nsl network])\n\nAC_SEARCH_LIBS([dlopen], [dl],\n  [AC_DEFINE([HAVE_LIBDL], [1],\n    [Define to 1 if you have the 'dl' library (-ldl).])])\n\nAC_SEARCH_LIBS([sin], [m])\n\ncase $host_alias in\n  riscv64*)\n    PHP_CHECK_FUNC(__atomic_exchange_1, atomic)\n    ;;\nesac\n\ndnl Solaris/Illumos for process mapping.\nAC_SEARCH_LIBS([Pgrab], [proc])\n\ndnl Haiku does not have network api in libc.\nAC_SEARCH_LIBS([setsockopt], [network])\n\ndnl Check for openpty. It may require linking against libutil or libbsd.\nAC_CHECK_FUNCS([openpty],,\n  [AC_SEARCH_LIBS([openpty], [util bsd], [AC_DEFINE([HAVE_OPENPTY], [1])])])\n\ndnl Then headers.\ndnl ----------------------------------------------------------------------------\n\ndnl QNX requires unix.h to allow functions in libunix to work properly.\nAC_CHECK_HEADERS(m4_normalize([\n  dirent.h\n  sys/param.h\n  sys/types.h\n  sys/time.h\n  netinet/in.h\n  alloca.h\n  arpa/inet.h\n  arpa/nameser.h\n  dns.h\n  fcntl.h\n  grp.h\n  ieeefp.h\n  langinfo.h\n  linux/sock_diag.h\n  poll.h\n  pty.h\n  pwd.h\n  resolv.h\n  strings.h\n  syslog.h\n  sysexits.h\n  sys/ioctl.h\n  sys/file.h\n  sys/mman.h\n  sys/mount.h\n  sys/poll.h\n  sys/resource.h\n  sys/select.h\n  sys/socket.h\n  sys/stat.h\n  sys/statfs.h\n  sys/statvfs.h\n  sys/vfs.h\n  sys/sysexits.h\n  sys/uio.h\n  sys/wait.h\n  sys/loadavg.h\n  unistd.h\n  unix.h\n  utime.h\n  sys/utsname.h\n  sys/ipc.h\n  dlfcn.h\n  tmmintrin.h\n  nmmintrin.h\n  wmmintrin.h\n  immintrin.h\n]),,, [dnl\n#ifdef HAVE_SYS_PARAM_H\n#include <sys/param.h>\n#endif\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_TIME_H\n#include <sys/time.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#include <netinet/in.h>\n#endif\n#ifdef HAVE_ARPA_NAMESER_H\n#include <arpa/nameser.h>\n#endif\n])\n\nPHP_FOPENCOOKIE\nPHP_BROKEN_GETCWD\nAS_VAR_IF([GCC], [yes], [PHP_BROKEN_GCC_STRLEN_OPT])\n\ndnl Detect the headers required to use makedev, major, and minor.\ndnl Autoconf <= 2.69 didn't check glibc 2.25 deprecated macros in sys/types.h.\nm4_version_prereq([2.70],,[ac_cv_header_sys_types_h_makedev=no])\nAC_HEADER_MAJOR\n\ndnl Checks for typedefs, structures, and compiler characteristics.\ndnl ----------------------------------------------------------------------------\n\nAC_STRUCT_TIMEZONE\n\nPHP_MISSING_TIME_R_DECL\n\nAC_CHECK_TYPES([struct flock],,,[#include <fcntl.h>])\nAC_CHECK_TYPES([socklen_t], [], [], [\n  #ifdef HAVE_SYS_TYPES_H\n  # include <sys/types.h>\n  #endif\n  #ifdef HAVE_SYS_SOCKET_H\n  # include <sys/socket.h>\n  #endif\n])\n\ndnl These are defined elsewhere than stdio.h.\nPHP_CHECK_SIZEOF([intmax_t], [0])\nPHP_CHECK_SIZEOF([ssize_t], [8])\nPHP_CHECK_SIZEOF([ptrdiff_t], [8])\n\ndnl Check stdint types (must be after header check).\nPHP_CHECK_STDINT_TYPES\n\ndnl Check GNU C builtins.\nPHP_CHECK_BUILTIN([__builtin_clz])\nPHP_CHECK_BUILTIN([__builtin_clzl])\nPHP_CHECK_BUILTIN([__builtin_clzll])\nPHP_CHECK_BUILTIN([__builtin_cpu_init])\nPHP_CHECK_BUILTIN([__builtin_cpu_supports])\nPHP_CHECK_BUILTIN([__builtin_ctzl])\nPHP_CHECK_BUILTIN([__builtin_ctzll])\nPHP_CHECK_BUILTIN([__builtin_expect])\nPHP_CHECK_BUILTIN([__builtin_frame_address])\nPHP_CHECK_BUILTIN([__builtin_saddl_overflow])\nPHP_CHECK_BUILTIN([__builtin_saddll_overflow])\nPHP_CHECK_BUILTIN([__builtin_smull_overflow])\nPHP_CHECK_BUILTIN([__builtin_smulll_overflow])\nPHP_CHECK_BUILTIN([__builtin_ssubl_overflow])\nPHP_CHECK_BUILTIN([__builtin_ssubll_overflow])\nPHP_CHECK_BUILTIN([__builtin_unreachable])\nPHP_CHECK_BUILTIN([__builtin_usub_overflow])\n\ndnl Check AVX512\nPHP_CHECK_AVX512_SUPPORTS\ndnl Check AVX512 VBMI\nPHP_CHECK_AVX512_VBMI_SUPPORTS\n\ndnl Check for __alignof__ support in the compiler\nAC_CACHE_CHECK([whether the compiler supports __alignof__],\n[php_cv_have_alignof],\n[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [\n  int align = __alignof__(int);\n  (void)align;\n])],\n[php_cv_have_alignof=yes],\n[php_cv_have_alignof=no])])\nAS_VAR_IF([php_cv_have_alignof], [yes],\n  [AC_DEFINE([HAVE_ALIGNOF], [1],\n    [Define to 1 if the compiler supports '__alignof__'.])])\n\ndnl Check for structure members.\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff],,,[#include <time.h>])\nAC_CHECK_MEMBERS([struct stat.st_blksize, struct stat.st_rdev])\ndnl AC_STRUCT_ST_BLOCKS will screw QNX because fileblocks.o does not exist.\nif test \"$(uname -s 2>/dev/null)\" != \"QNX\"; then\n  AC_STRUCT_ST_BLOCKS\nfi\n\ndnl Checks for types.\nAC_TYPE_UID_T\n\ndnl Checks for sockaddr_storage and sockaddr.sa_len.\nAC_CHECK_TYPES([struct sockaddr_storage],,,[#include <sys/socket.h>])\nAC_CHECK_MEMBERS([struct sockaddr.sa_len],,,[#include <sys/socket.h>])\n\ndnl Checks for GCC function attributes on all systems except ones without glibc\ndnl Fix for these systems is already included in GCC 7, but not on GCC 6.\ndnl\ndnl At least some versions of FreeBSD seem to have buggy ifunc support, see\ndnl bug #77284. Conservatively don't use ifuncs on FreeBSD prior to version 12.\nAS_CASE([$host_alias], [*-*-*android*|*-*-*uclibc*|*-*-*musl*|*openbsd*], [true], [\n  if test \"$(uname -s 2>/dev/null)\" != \"FreeBSD\" || test \"$(uname -U 2>/dev/null)\" -ge 1200000; then\n    AX_GCC_FUNC_ATTRIBUTE([ifunc])\n    AX_GCC_FUNC_ATTRIBUTE([target])\n  fi\n])\n\ndnl Check for __attribute__ ((__aligned__)) support in the compiler.\nPHP_CHECK_VARIABLE_ATTRIBUTE([aligned])\n\ndnl Checks for library functions.\ndnl ----------------------------------------------------------------------------\n\nAC_CHECK_FUNCS(m4_normalize([\n  alphasort\n  asctime_r\n  asprintf\n  chroot\n  ctime_r\n  explicit_memset\n  fdatasync\n  flock\n  ftok\n  funopen\n  gai_strerror\n  getcwd\n  getgrnam_r\n  gethostname\n  getloadavg\n  getlogin\n  getprotobyname\n  getprotobynumber\n  getpwnam_r\n  getpwuid_r\n  getrusage\n  getservbyname\n  getservbyport\n  gettimeofday\n  getwd\n  glob\n  gmtime_r\n  lchown\n  localtime_r\n  memcntl\n  memfd_create\n  memmem\n  mempcpy\n  memrchr\n  mkstemp\n  mmap\n  nice\n  nl_langinfo\n  poll\n  pthread_jit_write_protect_np\n  putenv\n  scandir\n  setenv\n  setitimer\n  shutdown\n  sigprocmask\n  statfs\n  statvfs\n  std_syslog\n  strcasecmp\n  strnlen\n  strptime\n  strtok_r\n  symlink\n  tzset\n  unsetenv\n  usleep\n  utime\n  vasprintf\n]))\n\nAC_CHECK_FUNC([inet_ntop],, [AC_MSG_FAILURE([Required inet_ntop not found.])])\nAC_CHECK_FUNC([inet_pton],, [AC_MSG_FAILURE([Required inet_pton not found.])])\n\ndnl Check for strerror_r, and if its a POSIX-compatible or a GNU specific version.\nAC_FUNC_STRERROR_R\n\ndnl Check for functions inside their belonging headers.\nAC_CHECK_HEADER([sys/prctl.h], [AC_CHECK_FUNCS([prctl])])\nAC_CHECK_HEADER([sys/procctl.h], [AC_CHECK_FUNCS([procctl])])\n\nAX_FUNC_WHICH_GETHOSTBYNAME_R\n\ndnl Some systems (Solaris 10) do not have nanosleep in libc.\nAC_CHECK_FUNCS([nanosleep],,\n  [AC_SEARCH_LIBS([nanosleep], [rt], [AC_DEFINE([HAVE_NANOSLEEP], [1])])])\n\ndnl Check for getaddrinfo, should be a better way, but... Also check for working\ndnl getaddrinfo.\nAC_CACHE_CHECK([for getaddrinfo], [php_cv_func_getaddrinfo],\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <netdb.h>],\n  [struct addrinfo *g,h;g=&h;getaddrinfo(\"\",\"\",g,&g);])],\n  [AC_RUN_IFELSE([AC_LANG_SOURCE([\n#include <netdb.h>\n#include <sys/types.h>\n#include <string.h>\n#include <stdlib.h>\n#ifndef AF_INET\n# include <sys/socket.h>\n#endif\nint main(void) {\n  struct addrinfo *ai, *pai, hints;\n\n  memset(&hints, 0, sizeof(hints));\n  hints.ai_flags = AI_NUMERICHOST;\n\n  if (getaddrinfo(\"127.0.0.1\", 0, &hints, &ai) < 0) {\n    return 1;\n  }\n\n  if (ai == 0) {\n    return 1;\n  }\n\n  pai = ai;\n\n  while (pai) {\n    if (pai->ai_family != AF_INET) {\n      /* 127.0.0.1/NUMERICHOST should only resolve ONE way */\n      return 1;\n    }\n    if (pai->ai_addr->sa_family != AF_INET) {\n      /* 127.0.0.1/NUMERICHOST should only resolve ONE way */\n      return 1;\n    }\n    pai = pai->ai_next;\n  }\n  freeaddrinfo(ai);\n  return 0;\n}\n  ])],\n  [php_cv_func_getaddrinfo=yes],\n  [php_cv_func_getaddrinfo=no],\n  [AS_CASE([$host_alias],\n    [*linux*|*midipix], [php_cv_func_getaddrinfo=yes],\n    [php_cv_func_getaddrinfo=no])])],\n[php_cv_func_getaddrinfo=no])])\nAS_VAR_IF([php_cv_func_getaddrinfo], [yes],\n  [AC_DEFINE([HAVE_GETADDRINFO], [1],\n    [Define to 1 if you have the 'getaddrinfo' function.])])\n\ndnl on FreeBSD, copy_file_range() works only with the undocumented flag 0x01000000;\ndnl until the problem is fixed properly, copy_file_range() is used only on Linux\nAC_CACHE_CHECK([for copy_file_range], [php_cv_func_copy_file_range],\n[AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n#ifndef __linux__\n# error \"unsupported platform\"\n#endif\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n#include <linux/version.h>\n#if LINUX_VERSION_CODE < KERNEL_VERSION(5,3,0)\n# error \"kernel too old\"\n#endif\n#include <unistd.h>\nint main(void)\n{\n  (void)copy_file_range(-1, 0, -1, 0, 0, 0);\n  return 0;\n}\n])],\n[php_cv_func_copy_file_range=yes],\n[php_cv_func_copy_file_range=no])\n])\nAS_VAR_IF([php_cv_func_copy_file_range], [yes],\n  [AC_DEFINE([HAVE_COPY_FILE_RANGE], [1],\n    [Define to 1 if you have the 'copy_file_range' function.])])\n\nAC_REPLACE_FUNCS([strlcat strlcpy explicit_bzero getopt])\nAC_FUNC_ALLOCA\nPHP_TIME_R_TYPE\n\nAC_CACHE_CHECK([for aarch64 CRC32 API], [php_cv_func___crc32d],\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([\n#include <arm_acle.h>\n# if defined(__GNUC__)\n#  if!defined(__clang__)\n#   pragma GCC push_options\n#   pragma GCC target (\"+nothing+crc\")\n#  elif defined(__APPLE__)\n#   pragma clang attribute push(__attribute__((target(\"crc\"))), apply_to=function)\n#  else\n#   pragma clang attribute push(__attribute__((target(\"+nothing+crc\"))), apply_to=function)\n#  endif\n# endif\n], [__crc32d(0, 0);])],\n[php_cv_func___crc32d=yes],\n[php_cv_func___crc32d=no])])\nAS_VAR_IF([php_cv_func___crc32d], [yes],\n  [AC_DEFINE([HAVE_AARCH64_CRC32], [1],\n    [Define to 1 when aarch64 CRC32 API is available.])])\n\ndnl Check for asm goto support.\nAC_CACHE_CHECK([for asm goto], [php_cv_have__asm_goto],\n[AC_LINK_IFELSE([AC_LANG_PROGRAM([], [\n#if defined(__x86_64__) || defined(__i386__)\n  __asm__ goto(\"jmp %l0\\n\" :::: end);\n#elif defined(__aarch64__)\n  __asm__ goto(\"b %l0\\n\" :::: end);\n#endif\nend:\n  return 0;\n])],\n[php_cv_have__asm_goto=yes],\n[php_cv_have__asm_goto=no])])\nAS_VAR_IF([php_cv_have__asm_goto], [yes],\n  [AC_DEFINE([HAVE_ASM_GOTO], [1],\n    [Define to 1 if asm goto support is available.])])\n\ndnl Check Valgrind support.\nPHP_ARG_WITH([valgrind],\n  [whether to enable Valgrind support],\n  [AS_HELP_STRING([--with-valgrind],\n    [Enable Valgrind support])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_VALGRIND], [no],, [\n  PKG_CHECK_MODULES([VALGRIND], [valgrind],\n     [PHP_EVAL_INCLINE([$VALGRIND_CFLAGS])\n       AC_DEFINE([HAVE_VALGRIND], [1],\n        [Define to 1 if Valgrind is enabled and supported.])])\n  save_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS $VALGRIND_CFLAGS\"\n  AC_CHECK_HEADERS([valgrind/cachegrind.h])\n  CFLAGS=$save_CFLAGS\n])\n\ndnl General settings.\ndnl ----------------------------------------------------------------------------\nPHP_CONFIGURE_PART([General settings])\n\nPHP_HELP_SEPARATOR([General settings:])\n\nPHP_ARG_ENABLE([gcov],\n  [whether to include gcov symbols],\n  [AS_HELP_STRING([--enable-gcov],\n    [Enable GCOV code coverage - FOR DEVELOPERS ONLY!!])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_GCOV], [yes], [\n  AS_VAR_IF([GCC], [yes],,\n    [AC_MSG_ERROR([GNU C compatible compiler is required for --enable-gcov])])\n\n  dnl Check if ccache is being used.\n  AS_CASE([$($php_shtool path $CC)],\n    [*ccache*], [gcc_ccache=yes],\n    [gcc_ccache=no])\n\n  if test \"$gcc_ccache\" = \"yes\" && (test -z \"$CCACHE_DISABLE\" || test \"$CCACHE_DISABLE\" != \"1\"); then\n    AC_MSG_ERROR(m4_text_wrap([\n      ccache must be disabled when --enable-gcov option is used. You can disable\n      ccache by setting environment variable CCACHE_DISABLE=1.\n    ]))\n  fi\n\n  AC_DEFINE([HAVE_GCOV], [1], [Define to 1 if GCOV code coverage is enabled.])\n  PHP_ADD_MAKEFILE_FRAGMENT([$abs_srcdir/build/Makefile.gcov], [$abs_srcdir])\n\n  dnl Remove all optimization flags from CFLAGS.\n  PHP_REMOVE_OPTIMIZATION_FLAGS\n\n  dnl Add the special gcc flags.\n  CFLAGS=\"$CFLAGS -O0 -fprofile-arcs -ftest-coverage\"\n  CXXFLAGS=\"$CXXFLAGS -O0 -fprofile-arcs -ftest-coverage\"\n])\n\nPHP_ARG_ENABLE([debug],\n  [whether to include debugging symbols],\n  [AS_HELP_STRING([--enable-debug],\n    [Compile with debugging symbols])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_DEBUG], [yes], [\n  PHP_DEBUG=1\n  ZEND_DEBUG=yes\n  CFLAGS=\"$CFLAGS -UNDEBUG\"\n  CXXFLAGS=\"$CXXFLAGS -UNDEBUG\"\n  PHP_REMOVE_OPTIMIZATION_FLAGS\n  dnl Add -O0 only if GCC or ICC is used.\n  if test \"$GCC\" = \"yes\" || test \"$ICC\" = \"yes\"; then\n    CFLAGS=\"$CFLAGS -O0\"\n    CXXFLAGS=\"$CXXFLAGS -g -O0\"\n  fi\n  if test \"$SUNCC\" = \"yes\"; then\n    if test -n \"$auto_cflags\"; then\n      CFLAGS=\"-g\"\n      CXXFLAGS=\"-g\"\n    else\n      CFLAGS=\"$CFLAGS -g\"\n      CXXFLAGS=\"$CFLAGS -g\"\n    fi\n  fi\n], [\n  PHP_DEBUG=0\n  ZEND_DEBUG=no\n  CFLAGS=\"$CFLAGS -DNDEBUG\"\n  CXXFLAGS=\"$CXXFLAGS -DNDEBUG\"\n])\n\nPHP_ARG_ENABLE([debug-assertions],\n  [whether to enable debug assertions in release mode],\n  [AS_HELP_STRING([--enable-debug-assertions],\n    [Compile with debug assertions even in release mode])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_DEBUG_ASSERTIONS], [yes], [\n  PHP_DEBUG=1\n  ZEND_DEBUG=yes\n  CFLAGS=\"$CFLAGS -UNDEBUG\"\n  CXXFLAGS=\"$CXXFLAGS -UNDEBUG\"\n])\n\nAC_ARG_ENABLE([zts],\n  [AS_HELP_STRING([--enable-zts],\n    [Enable thread safety])],\n  [ZEND_ZTS=$enableval],\n  [ZEND_ZTS=no])\n\nAS_VAR_IF([ZEND_ZTS], [yes], [PHP_THREAD_SAFETY=yes], [PHP_THREAD_SAFETY=no])\n\nAS_VAR_IF([PHP_THREAD_SAFETY], [yes], [\n  AS_VAR_IF([pthreads_working], [yes], [],\n    [AC_MSG_FAILURE(m4_text_wrap([\n      Unable to verify system support for POSIX Threads, which are required for\n      PHP thread safety (ZTS) build.\n    ]))])\n\n  AC_MSG_CHECKING([for POSIX threads])\n  AC_MSG_RESULT([yes])\n])\n\nPHP_ARG_ENABLE([rtld-now],\n  [whether to dlopen extensions with RTLD_NOW instead of RTLD_LAZY],\n  [AS_HELP_STRING([--enable-rtld-now],\n    [Use dlopen with RTLD_NOW instead of RTLD_LAZY])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_RTLD_NOW], [yes],\n  [AC_DEFINE([PHP_USE_RTLD_NOW], [1],\n    [Define to 1 if 'dlopen()' uses the 'RTLD_NOW' mode flag instead of\n    'RTLD_LAZY'.])])\n\nPHP_ARG_WITH([layout],\n  [layout of installed files],\n  [AS_HELP_STRING([--with-layout=TYPE],\n    [Set how installed files will be laid out. Type can be either PHP or GNU [PHP]])],\n  [PHP],\n  [no])\n\nAS_CASE([$PHP_LAYOUT], [GNU], [oldstyleextdir=no], [oldstyleextdir=yes])\n\nPHP_ARG_WITH([config-file-path],\n  [path to configuration file],\n  [AS_HELP_STRING([--with-config-file-path=PATH],\n    [Set the path in which to look for php.ini [PREFIX/lib]])],\n  [DEFAULT],\n  [no])\n\nAS_VAR_IF([PHP_CONFIG_FILE_PATH], [DEFAULT],\n  [AS_CASE([$PHP_LAYOUT],\n    [GNU], [PHP_CONFIG_FILE_PATH=$sysconfdir],\n    [PHP_CONFIG_FILE_PATH=$libdir])])\n\nAC_MSG_CHECKING([where to scan for configuration files])\nPHP_ARG_WITH([config-file-scan-dir],,\n  [AS_HELP_STRING([--with-config-file-scan-dir=PATH],\n    [Set the path where to scan for configuration files])],\n  [DEFAULT],\n  [no])\n\nAS_VAR_IF([PHP_CONFIG_FILE_SCAN_DIR], [DEFAULT], [PHP_CONFIG_FILE_SCAN_DIR=])\nAC_MSG_RESULT([$PHP_CONFIG_FILE_SCAN_DIR])\n\nPHP_ARG_ENABLE([sigchild],\n  [whether to enable PHP's own SIGCHLD handler],\n  [AS_HELP_STRING([--enable-sigchild],\n    [Enable PHP's own SIGCHLD handler])],\n  [no],\n  [no])\n\nAH_TEMPLATE([PHP_SIGCHILD],\n  [Define to 1 if PHP uses its own SIGCHLD handler, and to 0 if not.])\nAS_VAR_IF([PHP_SIGCHILD], [yes],\n  [AC_DEFINE([PHP_SIGCHILD], [1])],\n  [AC_DEFINE([PHP_SIGCHILD], [0])])\n\nPHP_ARG_ENABLE([libgcc],\n  [whether to explicitly link against libgcc],\n  [AS_HELP_STRING([--enable-libgcc],\n    [Enable explicitly linking against libgcc])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_LIBGCC], [yes], [\n  PHP_LIBGCC_LIBPATH([gcc])\n  AS_VAR_IF([libgcc_libpath],,\n    [AC_MSG_ERROR([Cannot locate libgcc. Make sure that gcc is in your path])])\n  PHP_ADD_LIBPATH([$libgcc_libpath])\n  PHP_ADD_LIBRARY([gcc], [yes])\n])\n\nPHP_ARG_ENABLE([short-tags],\n  [whether to enable short tags by default],\n  [AS_HELP_STRING([--disable-short-tags],\n    [Disable the short-form <? start tag by default])],\n  [yes],\n  [no])\n\nAH_TEMPLATE([DEFAULT_SHORT_OPEN_TAG],\n  [Define to string \"1\" if PHP short open tags '<?' are enabled by default, and\n  to string \"0\" if they are not.])\nAS_VAR_IF([PHP_SHORT_TAGS], [yes],\n  [AC_DEFINE([DEFAULT_SHORT_OPEN_TAG], [\"1\"])],\n  [AC_DEFINE([DEFAULT_SHORT_OPEN_TAG], [\"0\"])])\n\nPHP_ARG_ENABLE([dmalloc],\n  [whether to enable dmalloc],\n  [AS_HELP_STRING([--enable-dmalloc],\n    [Enable dmalloc])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_DMALLOC], [yes],\n  [AC_CHECK_LIB([dmalloc], [dmalloc_error],\n    [PHP_ADD_LIBRARY([dmalloc])\n      AC_DEFINE([HAVE_DMALLOC], [1], [Define to 1 if you have dmalloc.])\n      AS_VAR_APPEND([CPPFLAGS], [\" -DDMALLOC_FUNC_CHECK\"])],\n    [AC_MSG_FAILURE([The dmalloc check failed. Cannot enable dmalloc.])])])\n\nPHP_ARG_ENABLE([ipv6],\n  [whether to enable IPv6 support],\n  [AS_HELP_STRING([--disable-ipv6],\n    [Disable IPv6 support])],\n  [yes],\n  [no])\n\nAS_VAR_IF([PHP_IPV6], [yes],\n  [AC_CACHE_CHECK([for IPv6 support], [php_cv_have_ipv6],\n    [AC_LINK_IFELSE([AC_LANG_PROGRAM([\n      #include <sys/types.h>\n      #include <sys/socket.h>\n      #include <netinet/in.h>\n    ], [[\n      struct sockaddr_in6 s;\n      struct in6_addr t = in6addr_any;\n      int i = AF_INET6;\n      (void)s;\n      t.s6_addr[0] = 0;\n      (void)i;\n    ]])],\n    [php_cv_have_ipv6=yes],\n    [php_cv_have_ipv6=no])])\n])\nAS_VAR_IF([php_cv_have_ipv6], [yes],\n  [AC_DEFINE([HAVE_IPV6], [1],\n    [Define to 1 if IPv6 is enabled and supported.])])\n\ndnl DTRACE checks. Note: this has to be done after SAPI configuration.\nPHP_ARG_ENABLE([dtrace],\n  [whether to enable DTrace support],\n  [AS_HELP_STRING([--enable-dtrace],\n    [Enable DTrace support])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_DTRACE], [yes], [\n  PHP_INIT_DTRACE([Zend/zend_dtrace.d], [Zend/zend_dtrace_gen.h], [\n    main/main.c\n    Zend/zend_API.c\n    Zend/zend_dtrace.c\n    Zend/zend_exceptions.c\n    Zend/zend_execute.c\n    Zend/zend.c\n  ])\n  AC_DEFINE([HAVE_DTRACE], [1], [Define to 1 if DTrace support is enabled.])\n])\n\nAC_MSG_CHECKING([how big to make fd sets])\nPHP_ARG_ENABLE([fd-setsize],,\n  [AS_HELP_STRING([--enable-fd-setsize],\n    [Set size of descriptor sets])],\n  [no],\n  [no])\n\nAS_VAR_IF([PHP_FD_SETSIZE], [no], [AC_MSG_RESULT([using system default])], [\n  if test \"0$PHP_FD_SETSIZE\" -gt 0 2>/dev/null; then\n    CPPFLAGS=\"$CPPFLAGS -DFD_SETSIZE=$PHP_FD_SETSIZE\"\n    AC_MSG_RESULT([using $PHP_FD_SETSIZE])\n  else\n    AC_MSG_ERROR([Invalid value passed to --enable-fd-setsize!])\n  fi\n])\n\nPHP_ARG_ENABLE([werror],,\n  [AS_HELP_STRING([--enable-werror],\n    [Enable -Werror])],\n  [no],\n  [no])\nPHP_ARG_ENABLE([memory-sanitizer],,\n  [AS_HELP_STRING([--enable-memory-sanitizer],\n    [Enable memory sanitizer (clang only)])],\n  [no],\n  [no])\nPHP_ARG_ENABLE([address-sanitizer],,\n  [AS_HELP_STRING([--enable-address-sanitizer],\n    [Enable address sanitizer])],\n  [no],\n  [no])\nPHP_ARG_ENABLE([undefined-sanitizer],,\n  [AS_HELP_STRING([--enable-undefined-sanitizer],\n    [Enable undefined sanitizer])],\n  [no],\n  [no])\n\ndnl Extension configuration.\ndnl ----------------------------------------------------------------------------\n\nPHP_HELP_SEPARATOR([[Extensions:\n  --with-EXTENSION=[shared[,PATH]]\n\n    NOTE: Not all extensions can be built as 'shared'.\n\n    Example: --with-foobar=shared,/usr/local/foobar/\n\n      o Builds the foobar extension as shared extension.\n      o foobar package install prefix is /usr/local/foobar/\n]])\n\nPHP_CONFIGURE_PART([Configuring extensions])\n\ndnl Check if all enabled by default extensions should be disabled.\nAC_ARG_ENABLE([all],\n  [AS_HELP_STRING([--disable-all],\n    [Disable all extensions which are enabled by default])],\n  [PHP_ENABLE_ALL=$enableval])\n\ndnl Reading config stubs.\nesyscmd(./build/config-stubs ext)\n\ndnl Extensions post-config.\ndnl ----------------------------------------------------------------------------\n\ndnl Align segments on huge page boundary\nAS_CASE([$host_alias], [[i[3456]86-*-linux-* | x86_64-*-linux-*]],\n  [AC_CACHE_CHECK([linker support for -zcommon-page-size=2097152],\n    [php_cv_have_common_page_size], [\n    save_LDFLAGS=$LDFLAGS\n    LDFLAGS=\"$LDFLAGS -Wl,-zcommon-page-size=2097152 -Wl,-zmax-page-size=2097152\"\n    AC_RUN_IFELSE([AC_LANG_PROGRAM()],\n      [php_cv_have_common_page_size=yes],\n      [php_cv_have_common_page_size=no],\n      [php_cv_have_common_page_size=no])\n    LDFLAGS=$save_LDFLAGS])\n  AS_VAR_IF([php_cv_have_common_page_size], [yes],\n    [EXTRA_LDFLAGS_PROGRAM=\"$EXTRA_LDFLAGS_PROGRAM -Wl,-zcommon-page-size=2097152 -Wl,-zmax-page-size=2097152\"],\n    [AC_CACHE_CHECK([linker support for -zmax-page-size=2097152],\n      [php_cv_have_max_page_size], [\n      save_LDFLAGS=$LDFLAGS\n      LDFLAGS=\"$LDFLAGS -Wl,-zmax-page-size=2097152\"\n      AC_RUN_IFELSE([AC_LANG_PROGRAM()],\n        [php_cv_have_max_page_size=yes],\n        [php_cv_have_max_page_size=no],\n        [php_cv_have_max_page_size=no])\n      LDFLAGS=$save_LDFLAGS])\n    AS_VAR_IF([php_cv_have_max_page_size], [yes],\n      [EXTRA_LDFLAGS_PROGRAM=\"$EXTRA_LDFLAGS_PROGRAM -Wl,-zmax-page-size=2097152\"])\n  ])\n])\n\nenable_shared=yes\nenable_static=yes\n\ncase $php_sapi_module in\n  shared[)]\n    if test \"$PHP_CGI\" = \"no\" && test \"$PHP_CLI\" = \"no\" && test \"$PHP_FPM\" = \"no\" && test \"$PHP_LITESPEED\" = \"no\" && test \"$PHP_PHPDBG\" = \"no\"; then\n      enable_static=no\n    fi\n    case $with_pic in\n      yes)\n        standard_libtool_flag='-prefer-pic'\n        ;;\n      no)\n        standard_libtool_flag='-prefer-non-pic'\n        ;;\n    esac\n    EXTRA_LDFLAGS=\"$EXTRA_LDFLAGS -avoid-version -module\"\n    ;;\n  *[)]\n    standard_libtool_flag='-prefer-non-pic -static'\n    if test -z \"$PHP_MODULES\" && test -z \"$PHP_ZEND_EX\"; then\n      enable_shared=no\n    fi\n    ;;\nesac\n\nEXTRA_LIBS=\"$EXTRA_LIBS $DLIBS $LIBS\"\nunset LIBS\n\ndnl PEAR\ndnl ----------------------------------------------------------------------------\n\nPHP_HELP_SEPARATOR([PEAR:])\nPHP_CONFIGURE_PART([Configuring PEAR])\n\ndnl If CLI is disabled disable PEAR.\nAS_VAR_IF([PHP_CLI], [no], [with_pear=no])\n\nPHP_ARG_WITH([pear],\n  [whether to install PEAR],\n  [AS_HELP_STRING([[--with-pear[=DIR]]],\n    [Install PEAR in DIR [PREFIX/lib/php]])],\n  [no],\n  [yes])\n\nAS_VAR_IF([PHP_PEAR], [no],, [\n  AC_MSG_WARN([The --with-pear option is deprecated])\n\n  dnl PEAR dependencies.\n  AS_VAR_IF([PHP_XML], [no], [AC_MSG_ERROR(m4_text_wrap([\n    PEAR requires XML to be enabled. Add '--enable-xml' to the configure line,\n    or disable PEAR (--without-pear).\n  ]))])\n\n  install_pear=install-pear\n\n  AS_VAR_IF([PHP_PEAR], [yes],\n    [AS_CASE([$PHP_LAYOUT],\n      [GNU], [PEAR_INSTALLDIR=$datadir/pear],\n      [PEAR_INSTALLDIR=$libdir/php])],\n    [PEAR_INSTALLDIR=$PHP_PEAR])\n\n  PHP_SUBST([PEAR_INSTALLDIR])\n  PHP_ADD_BUILD_DIR([pear])\n  PHP_ADD_MAKEFILE_FRAGMENT([$abs_srcdir/pear/Makefile.frag],\n    [$abs_srcdir/pear],\n    [pear])\n])\n\ndnl Configuring Zend and TSRM.\ndnl ----------------------------------------------------------------------------\n\nPHP_HELP_SEPARATOR([Zend:])\nPHP_CONFIGURE_PART([Configuring Zend])\n\nAC_ARG_ENABLE([fiber-asm],\n  [AS_HELP_STRING([--disable-fiber-asm],\n    [Disable the use of boost fiber assembly files])],\n  [fiber_asm=$enableval], [fiber_asm='yes'])\n\nAS_CASE([$host_cpu],\n  [x86_64*|amd64*], [fiber_cpu=\"x86_64\"],\n  [x86*|amd*|i?86*|pentium], [fiber_cpu=\"i386\"],\n  [aarch64*|arm64*], [fiber_cpu=\"arm64\"],\n  [arm*], [fiber_cpu=\"arm32\"],\n  [ppc64*|powerpc64*], [fiber_cpu=\"ppc64\"],\n  [ppc*|powerpc*], [fiber_cpu=\"ppc32\"],\n  [riscv64*], [fiber_cpu=\"riscv64\"],\n  [sparc64], [fiber_cpu=\"sparc64\"],\n  [s390x*], [fiber_cpu=\"s390x\"],\n  [loongarch64*], [fiber_cpu=\"loongarch64\"],\n  [mips64*], [fiber_cpu=\"mips64\"],\n  [mips*], [fiber_cpu=\"mips32\"],\n  [fiber_cpu=\"unknown\"]\n)\n\nAS_CASE([$host_os],\n  [darwin*], [fiber_os=\"mac\"],\n  [aix*|os400*], [fiber_os=\"aix\"],\n  [freebsd*], [fiber_os=\"freebsd\"],\n  [midipix], [fiber_os=\"midipix\"],\n  [fiber_os=\"other\"]\n)\n\nAS_CASE([$fiber_cpu],\n  [x86_64], [fiber_asm_file_prefix=\"x86_64_sysv\"],\n  [i386], [fiber_asm_file_prefix=\"i386_sysv\"],\n  [arm64], [fiber_asm_file_prefix=\"arm64_aapcs\"],\n  [arm32], [fiber_asm_file_prefix=\"arm_aapcs\"],\n  [ppc64], [fiber_asm_file_prefix=\"ppc64_sysv\"],\n  [ppc32], [fiber_asm_file_prefix=\"ppc32_sysv\"],\n  [riscv64], [fiber_asm_file_prefix=\"riscv64_sysv\"],\n  [sparc64], [fiber_asm_file_prefix=\"sparc64_sysv\"],\n  [s390x], [fiber_asm_file_prefix=\"s390x_sysv\"],\n  [loongarch64], [fiber_asm_file_prefix=\"loongarch64_sysv\"],\n  [mips64], [fiber_asm_file_prefix=\"mips64_n64\"],\n  [mips32], [fiber_asm_file_prefix=\"mips32_o32\"],\n  [fiber_asm_file_prefix=\"unknown\"]\n)\n\nif test \"$fiber_os\" = 'mac'; then\n  fiber_asm_file=\"combined_sysv_macho_gas\"\nelif test \"$fiber_os\" = 'aix'; then\n  # AIX uses a different calling convention (shared with non-_CALL_ELF Linux).\n  # The AIX assembler isn't GNU, but the file is compatible.\n  fiber_asm_file=\"${fiber_asm_file_prefix}_xcoff_gas\"\nelif test \"$fiber_os\" = 'freebsd'; then\n  case $fiber_cpu in\n    i386*)\n      fiber_asm=\"no\"\n      ;;\n    *)\n      fiber_asm_file=\"${fiber_asm_file_prefix}_elf_gas\"\n      ;;\n  esac\nelif test \"$fiber_os\" = 'midipix'; then\n  case $fiber_cpu in\n    i386*)\n      fiber_asm=\"no\"\n      ;;\n    x86_64)\n      fiber_asm_file=\"x86_64_ms_pe_gas\"\n      ;;\n  esac\nelif test \"$fiber_asm_file_prefix\" != 'unknown'; then\n  fiber_asm_file=\"${fiber_asm_file_prefix}_elf_gas\"\nelse\n  fiber_asm=\"no\"\nfi\n\nAC_CACHE_CHECK([whether syscall to create shadow stack exists],\n[php_cv_have_shadow_stack_syscall],\n[AC_RUN_IFELSE([AC_LANG_SOURCE([\n#include <unistd.h>\n#include <sys/mman.h>\nint main(void) {\n  /* test if syscall 451, i.e., map_shadow_stack is available */\n  void* base = (void *)syscall(451, 0, 0x20000, 0x1);\n  if (base != (void*)-1) {\n    munmap(base, 0x20000);\n    return 0;\n  }\n  return 1;\n}\n])],\n  [php_cv_have_shadow_stack_syscall=yes],\n  [php_cv_have_shadow_stack_syscall=no],\n  [php_cv_have_shadow_stack_syscall=no])\n])\ndnl The asm files can't see macro from AC_DEFINE, workaround this via cflag. If\ndnl the syscall doesn't exist, we may block the final ELF from __PROPERTY_SHSTK\ndnl via redefine macro as \"-D__CET__=1\".\nAS_VAR_IF([php_cv_have_shadow_stack_syscall], [yes],\n  [fiber_asm_cflag=\"-DSHADOW_STACK_SYSCALL=1\"],\n  [fiber_asm_cflag=\"-DSHADOW_STACK_SYSCALL=0\"])\n\nif test \"$fiber_asm\" = 'yes'; then\n  AC_MSG_CHECKING([for fiber switching context])\n  PHP_ADD_SOURCES([Zend/asm],\n    [make_${fiber_asm_file}.S jump_${fiber_asm_file}.S],\n    [$fiber_asm_cflag])\n  AC_MSG_RESULT([$fiber_asm_file])\nelse\n  AS_VAR_IF([fiber_os], [mac], [AC_DEFINE([_XOPEN_SOURCE], [1], [ ])])\n  AC_CHECK_HEADER([ucontext.h],\n    [AC_DEFINE([ZEND_FIBER_UCONTEXT], [1],\n      [Define to 1 if Zend fiber uses ucontext instead of boost context.])],\n    [AC_MSG_FAILURE([fibers not available on this platform])])\nfi\n\nZEND_INIT\n\nZEND_EXTRA_LIBS=$LIBS\nunset LIBS\n\nPHP_ADD_INCLUDE([$abs_srcdir], [1])\nPHP_ADD_INCLUDE([$abs_srcdir/main], [1])\nPHP_ADD_INCLUDE([$abs_builddir], [1])\nPHP_ADD_INCLUDE([$abs_builddir/main], [1])\nPHP_ADD_INCLUDE([$abs_builddir/TSRM])\nPHP_ADD_INCLUDE([$abs_builddir/Zend])\nPHP_ADD_INCLUDE([$abs_srcdir/Zend])\nPHP_ADD_INCLUDE([$abs_srcdir/TSRM])\n\nEXTRA_LDFLAGS=\"$EXTRA_LDFLAGS $LDFLAGS\"\nEXTRA_LDFLAGS_PROGRAM=\"$EXTRA_LDFLAGS_PROGRAM $LDFLAGS\"\nunset LDFLAGS\n\nAC_ARG_PROGRAM\n\nAS_VAR_IF([prefix], [NONE], [prefix=/usr/local])\nAS_VAR_IF([exec_prefix], [NONE], [exec_prefix='${prefix}'])\nAS_VAR_IF([program_prefix], [NONE], [program_prefix=])\nAS_VAR_IF([program_suffix], [NONE], [program_suffix=])\n\norig_libdir=$libdir\nAS_CASE([$libdir],\n  ['${exec_prefix}/lib'], [libdir=$libdir/php])\n\nAS_CASE([$(eval echo $datadir)],\n  ['${prefix}/share'], [datadir=$datadir/php])\n\nphptempdir=$(pwd)/libs\n\nold_exec_prefix=$exec_prefix\nold_libdir=$libdir\nold_datadir=$datadir\nexec_prefix=$(eval echo $exec_prefix)\nlibdir=$(eval echo $libdir)\ndatadir=$(eval eval echo $datadir)\n\ndnl Build extension directory path.\nZEND_MODULE_API_NO=$($EGREP '#define ZEND_MODULE_API_NO ' $srcdir/Zend/zend_modules.h|\"${SED}\" 's/#define ZEND_MODULE_API_NO //')\n\nAC_ARG_VAR([EXTENSION_DIR],\n  [Default directory for dynamically loadable PHP extensions. If left empty, it\n  is determined automatically. Can be overridden using the PHP 'extension_dir'\n  INI directive.])\nAS_VAR_IF([EXTENSION_DIR],, [\n  extbasedir=$ZEND_MODULE_API_NO\n  AS_VAR_IF([oldstyleextdir], [yes], [\n    AS_VAR_IF([PHP_DEBUG], [1], [part1=debug], [part1=no-debug])\n    AS_VAR_IF([PHP_THREAD_SAFETY], [yes], [part2=zts], [part2=non-zts])\n    extbasedir=$part1-$part2-$extbasedir\n    EXTENSION_DIR=$libdir/extensions/$extbasedir\n  ], [\n    AS_VAR_IF([PHP_THREAD_SAFETY], [yes], [extbasedir=$extbasedir-zts])\n    AS_VAR_IF([PHP_DEBUG], [1], [extbasedir=$extbasedir-debug])\n    EXTENSION_DIR=$libdir/$extbasedir\n  ])\n])\n\nAS_CASE([$PHP_LAYOUT],\n  [GNU], [datarootdir=$prefix/share],\n  [datarootdir=$prefix/php])\n\ndnl Expand all directory names for use in macros/constants.\nEXPANDED_PEAR_INSTALLDIR=$(eval echo $PEAR_INSTALLDIR)\nEXPANDED_EXTENSION_DIR=$(eval echo $EXTENSION_DIR)\nEXPANDED_LOCALSTATEDIR=$(eval echo $localstatedir)\nEXPANDED_BINDIR=$(eval echo $bindir)\nEXPANDED_SBINDIR=$(eval echo $sbindir)\nEXPANDED_MANDIR=$(eval echo $mandir)\nEXPANDED_LIBDIR=$libdir\nEXPANDED_SYSCONFDIR=$(eval echo $sysconfdir)\nEXPANDED_DATADIR=$datadir\nEXPANDED_PHP_CONFIG_FILE_PATH=$(eval echo \"$PHP_CONFIG_FILE_PATH\")\nEXPANDED_PHP_CONFIG_FILE_SCAN_DIR=$(eval echo \"$PHP_CONFIG_FILE_SCAN_DIR\")\nINCLUDE_PATH=.:$EXPANDED_PEAR_INSTALLDIR\n\nexec_prefix=$old_exec_prefix\nlibdir=$old_libdir\ndatadir=$old_datadir\n\nAC_SUBST([INCLUDE_PATH])\nAC_SUBST([EXPANDED_PEAR_INSTALLDIR])\nAC_SUBST([EXPANDED_EXTENSION_DIR])\nAC_SUBST([EXPANDED_BINDIR])\nAC_SUBST([EXPANDED_SBINDIR])\nAC_SUBST([EXPANDED_MANDIR])\nAC_SUBST([EXPANDED_LIBDIR])\nAC_SUBST([EXPANDED_DATADIR])\nAC_SUBST([EXPANDED_SYSCONFDIR])\nAC_SUBST([EXPANDED_LOCALSTATEDIR])\nAC_SUBST([EXPANDED_PHP_CONFIG_FILE_PATH])\nAC_SUBST([EXPANDED_PHP_CONFIG_FILE_SCAN_DIR])\nAC_SUBST([PHP_INSTALLED_SAPIS])\nAC_SUBST([SAPI_LIBNAME_SHARED])\nAC_SUBST([SAPI_LIBNAME_STATIC])\nAC_SUBST([PHP_VERSION])\nAC_SUBST([PHP_VERSION_ID])\nAC_SUBST([PHP_LDFLAGS])\n\nPHP_UTILIZE_RPATHS\n\nPHP_REMOVE_USR_LIB([PHP_LDFLAGS])\nPHP_REMOVE_USR_LIB([LDFLAGS])\n\nEXTRA_LDFLAGS=\"$EXTRA_LDFLAGS $PHP_LDFLAGS\"\nEXTRA_LDFLAGS_PROGRAM=\"$EXTRA_LDFLAGS_PROGRAM $PHP_LDFLAGS\"\n\nAC_ARG_VAR([PHP_UNAME],\n  [System information (defaults to the 'uname -a' output)])\nAS_VAR_IF([PHP_UNAME],, [PHP_UNAME=$(uname -a | xargs)])\nAC_DEFINE_UNQUOTED([PHP_UNAME], [\"$PHP_UNAME\"], [The 'uname -a' output.])\n\nPHP_OS=$(uname | xargs)\nAC_DEFINE_UNQUOTED([PHP_OS], [\"$PHP_OS\"], [The 'uname' output.])\n\nAC_ARG_VAR([PHP_BUILD_SYSTEM],\n  [The system that PHP was built on (defaults to the 'uname -a' output)])\nAS_VAR_IF([PHP_BUILD_SYSTEM],, [PHP_BUILD_SYSTEM=$PHP_UNAME])\nAC_DEFINE_UNQUOTED([PHP_BUILD_SYSTEM], [\"$PHP_BUILD_SYSTEM\"],\n  [The system that PHP was built on.])\n\nAC_ARG_VAR([PHP_BUILD_PROVIDER], [The PHP build provider information])\nAS_VAR_IF([PHP_BUILD_PROVIDER],,,\n  [AC_DEFINE_UNQUOTED([PHP_BUILD_PROVIDER], [\"$PHP_BUILD_PROVIDER\"],\n    [The PHP build provider information.])])\n\nAC_ARG_VAR([PHP_BUILD_COMPILER],\n  [Information about the compiler used for the PHP build])\nAS_VAR_IF([PHP_BUILD_COMPILER],,,\n  [AC_DEFINE_UNQUOTED([PHP_BUILD_COMPILER], [\"$PHP_BUILD_COMPILER\"],\n    [The compiler used for the PHP build.])])\n\nAC_ARG_VAR([PHP_BUILD_ARCH], [The build architecture])\nAS_VAR_IF([PHP_BUILD_ARCH],,,\n  [AC_DEFINE_UNQUOTED([PHP_BUILD_ARCH], [\"$PHP_BUILD_ARCH\"],\n    [The build architecture.])])\n\nPHP_SUBST([PHP_FASTCGI_OBJS])\nPHP_SUBST([PHP_SAPI_OBJS])\nPHP_SUBST([PHP_BINARY_OBJS])\nPHP_SUBST([PHP_GLOBAL_OBJS])\nPHP_SUBST([PHP_BINARIES])\nPHP_SUBST([PHP_MODULES])\nPHP_SUBST([PHP_ZEND_EX])\nPHP_SUBST([bindir])\nPHP_SUBST([sbindir])\nPHP_SUBST([exec_prefix])\nPHP_SUBST_OLD([program_prefix])\nPHP_SUBST_OLD([program_suffix])\nPHP_SUBST([includedir])\nPHP_SUBST_OLD([orig_libdir])\nPHP_SUBST([libdir])\nPHP_SUBST([mandir])\nPHP_SUBST([phptempdir])\nPHP_SUBST([prefix])\nPHP_SUBST([localstatedir])\nPHP_SUBST([datadir])\nPHP_SUBST([datarootdir])\nPHP_SUBST([sysconfdir])\nPHP_SUBST([EXEEXT])\nPHP_SUBST([CC])\nPHP_SUBST([BUILD_CC])\nPHP_SUBST([CFLAGS])\nPHP_SUBST([CFLAGS_CLEAN])\nPHP_SUBST([CPP])\nPHP_SUBST([CPPFLAGS])\nPHP_SUBST([CXX])\nPHP_SUBST([CXXFLAGS])\nPHP_SUBST([CXXFLAGS_CLEAN])\nPHP_SUBST_OLD([EXTENSION_DIR])\nPHP_SUBST([EXTRA_LDFLAGS])\nPHP_SUBST([EXTRA_LDFLAGS_PROGRAM])\nPHP_SUBST_OLD([EXTRA_LIBS])\nPHP_SUBST([ZEND_EXTRA_LIBS])\nPHP_SUBST([INCLUDES])\nPHP_SUBST([EXTRA_INCLUDES])\nPHP_SUBST([INSTALL_IT])\nPHP_SUBST([LIBTOOL])\nPHP_SUBST([LN_S])\nPHP_SUBST([NATIVE_RPATHS])\nPHP_SUBST([OVERALL_TARGET])\nPHP_SUBST([PHP_RPATHS])\nPHP_SUBST([PHP_SAPI])\nPHP_SUBST([SHELL])\nPHP_SUBST([PHP_FRAMEWORKS])\nPHP_SUBST([PHP_FRAMEWORKPATH])\nPHP_SUBST([INSTALL_HEADERS])\n\nif test \"$PHP_THREAD_SAFETY\" = \"yes\" && test -n \"$ac_cv_pthreads_cflags\"; then\n  CXXFLAGS=\"$CXXFLAGS $ac_cv_pthreads_cflags\"\n  CPPFLAGS=\"$CPPFLAGS $ac_cv_pthreads_cflags\"\nfi\n\ndnl Enable -Werror late, because it may break configure checks throwing warnings.\nAS_VAR_IF([PHP_WERROR], [yes], [\n  CFLAGS=\"$CFLAGS -Werror\"\n  CXXFLAGS=\"$CXXFLAGS -Werror\"\n])\n\nif test \"$PHP_MEMORY_SANITIZER\" = \"yes\" &&\n   test \"$PHP_ADDRESS_SANITIZER\" = \"yes\"; then\n   AC_MSG_ERROR([MemorySanitizer and AddressSanitizer are mutually exclusive])\nfi\n\ndnl Enable -fsanitize=memory late, because interceptors may break linking detection.\nAS_VAR_IF([PHP_MEMORY_SANITIZER], [yes],\n  [AX_CHECK_COMPILE_FLAG([-fsanitize=memory -fsanitize-memory-track-origins], [\n    CFLAGS=\"$CFLAGS -fsanitize=memory -fsanitize-memory-track-origins\"\n    CXXFLAGS=\"$CXXFLAGS -fsanitize=memory -fsanitize-memory-track-origins\"\n  ], [AC_MSG_ERROR([MemorySanitizer is not available])])\n])\n\nAS_VAR_IF([PHP_ADDRESS_SANITIZER], [yes],\n  [AS_VAR_IF([PHP_VALGRIND], [no],, [AC_MSG_ERROR(m4_text_wrap([\n    Valgrind and address sanitizer are not compatible. Either disable Valgrind\n    (remove --with-valgrind) or disable address sanitizer (remove\n    --enable-address-sanitizer).\n  ]))])\n\n  AX_CHECK_COMPILE_FLAG([-fsanitize=address], [\n    CFLAGS=\"$CFLAGS -fsanitize=address -DZEND_TRACK_ARENA_ALLOC\"\n    CXXFLAGS=\"$CXXFLAGS -fsanitize=address -DZEND_TRACK_ARENA_ALLOC\"\n  ], [AC_MSG_ERROR([AddressSanitizer is not available])])\n])\n\nAS_VAR_IF([PHP_UNDEFINED_SANITIZER], [yes],\n  [AX_CHECK_COMPILE_FLAG([-fsanitize=undefined], [\n    CFLAGS=\"$CFLAGS -fsanitize=undefined -fno-sanitize-recover=undefined\"\n    CXXFLAGS=\"$CXXFLAGS -fsanitize=undefined -fno-sanitize-recover=undefined\"\n    AX_CHECK_COMPILE_FLAG([-fno-sanitize=object-size], [\n      dnl Disable object-size sanitizer, because it is incompatible with our zend_function\n      dnl union, and this can't be easily fixed.\n      CFLAGS=\"$CFLAGS -fno-sanitize=object-size\"\n      CXXFLAGS=\"$CFLAGS -fno-sanitize=object-size\"\n    ])\n\n    dnl Clang 17 adds stricter function pointer compatibility checks where pointer args cannot be\n    dnl cast to void*. In that case, set -fno-sanitize=function.\n    OLD_CFLAGS=$CFLAGS\n    CFLAGS=\"$CFLAGS -fno-sanitize-recover=undefined\"\n    AC_CACHE_CHECK([whether to add -fno-sanitize=function],\n    [php_cv_ubsan_no_function],\n    [AC_RUN_IFELSE([AC_LANG_SOURCE([\n      void foo(char *string) { (void)string; }\n      int main(void) {\n        void (*f)(void *) = (void (*)(void *))foo;\n        f(\"foo\");\n        return 0;\n      }\n    ])],\n    [php_cv_ubsan_no_function=no],\n    [php_cv_ubsan_no_function=yes],\n    [php_cv_ubsan_no_function=no])])\n    CFLAGS=$OLD_CFLAGS\n    AS_VAR_IF([php_cv_ubsan_no_function], [yes], [\n      CFLAGS=\"$CFLAGS -fno-sanitize=function\"\n      CXXFLAGS=\"$CFLAGS -fno-sanitize=function\"\n    ])\n  ], [AC_MSG_ERROR([UndefinedBehaviorSanitizer is not available])])\n])\n\nif test \"$PHP_MEMORY_SANITIZER\" = \"yes\" ||\n   test \"$PHP_ADDRESS_SANITIZER\" = \"yes\" ||\n   test \"$PHP_UNDEFINED_SANITIZER\" = \"yes\"; then\n    CFLAGS=\"$CFLAGS -fno-omit-frame-pointer\"\n    CXXFLAGS=\"$CXXFLAGS -fno-omit-frame-pointer\"\nfi\n\ndnl\ndnl Libtool creation.\ndnl\n\nPHP_HELP_SEPARATOR([Libtool:])\nPHP_CONFIGURE_PART([Configuring libtool])\n\ndnl Silence warning: \"ar: 'u' modifier ignored since 'D' is the default\".\ndnl See https://github.com/php/php-src/pull/3017\nAC_SUBST([AR_FLAGS], [cr])\n\ndnl Only allow AC_PROG_CXX and AC_PROG_CXXCPP if they are explicitly called (by\ndnl PHP_REQUIRE_CXX). Otherwise AC_PROG_LIBTOOL fails if there is no working C++\ndnl compiler.\nAC_PROVIDE_IFELSE([PHP_REQUIRE_CXX], [], [\n  undefine([AC_PROG_CXX])\n  AC_DEFUN([AC_PROG_CXX], [])\n  undefine([AC_PROG_CXXCPP])\n  AC_DEFUN([AC_PROG_CXXCPP], [php_prog_cxxcpp=disabled])\n])\nAC_PROG_LIBTOOL\n\nPHP_SET_LIBTOOL_VARIABLE([--silent])\n\ndnl libtool 1.4.3 needs this.\nPHP_SET_LIBTOOL_VARIABLE([--preserve-dup-deps])\n\nPHP_CONFIGURE_PART([Generating files])\n\nCXXFLAGS_CLEAN=$CXXFLAGS\nCFLAGS_CLEAN=\"$CFLAGS \\$(PROF_FLAGS)\"\nCFLAGS=\"\\$(CFLAGS_CLEAN) $standard_libtool_flag\"\nCXXFLAGS=\"$CXXFLAGS $standard_libtool_flag \\$(PROF_FLAGS)\"\n\nif test \"$PHP_PHAR\" != \"no\" && test \"$PHP_CLI\" != \"no\"; then\n  pharcmd=pharcmd\n  pharcmd_install=install-pharcmd\nelse\n  pharcmd=\n  pharcmd_install=\nfi;\n\nall_targets=\"\\$(OVERALL_TARGET) \\$(PHP_MODULES) \\$(PHP_ZEND_EX) \\$(PHP_BINARIES) $pharcmd\"\ninstall_targets=\"$install_sapi $install_modules $install_binaries install-build install-headers install-programs $install_pear $pharcmd_install\"\n\nPHP_SUBST([all_targets])\nPHP_SUBST([install_targets])\nPHP_SUBST([install_binary_targets])\n\nPHP_INSTALL_HEADERS([Zend/ TSRM/ main/ main/streams/])\nPHP_INSTALL_HEADERS([Zend/Optimizer], m4_normalize([\n  zend_call_graph.h\n  zend_cfg.h\n  zend_dfg.h\n  zend_dump.h\n  zend_func_info.h\n  zend_inference.h\n  zend_optimizer.h\n  zend_ssa.h\n  zend_worklist.h\n]))\n\nPHP_ADD_SOURCES([TSRM], [TSRM.c], [-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1])\n\nPHP_ADD_SOURCES([main], m4_normalize([\n    explicit_bzero.c\n    fopen_wrappers.c\n    getopt.c\n    main.c\n    network.c\n    output.c\n    php_content_types.c\n    php_ini_builder.c\n    php_ini.c\n    php_odbc_utils.c\n    php_open_temporary_file.c\n    php_scandir.c\n    php_syslog.c\n    php_ticks.c\n    php_variables.c\n    reentrancy.c\n    rfc1867.c\n    safe_bcmp.c\n    SAPI.c\n    snprintf.c\n    spprintf.c\n    strlcat.c\n    strlcpy.c\n  ]),\n  [-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1])\n\nif printf \"#if __ELF__\\nelf\\n#endif\\n\" | $CC -E - | grep elf > /dev/null; then\n  PHP_ADD_SOURCES([main], [debug_gdb_scripts.c])\n\n  cat >> Makefile.objects <<EOF\n$abs_srcdir/main/debug_gdb_scripts.c: $abs_srcdir/scripts/gdb/debug_gdb_scripts_gen.php $abs_srcdir/scripts/gdb/php_gdb.py $abs_srcdir/.gdbinit\n\t@if test ! -z \"\\$(PHP)\"; then \\\\\n\t\t\\$(PHP) $abs_srcdir/scripts/gdb/debug_gdb_scripts_gen.php; \\\\\n\tfi;\nEOF\nfi\n\nPHP_ADD_SOURCES_X([main],\n  [fastcgi.c],\n  [-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1],\n  [PHP_FASTCGI_OBJS],\n  [no])\n\nPHP_ADD_SOURCES([main/streams], m4_normalize([\n    cast.c\n    filter.c\n    glob_wrapper.c\n    memory.c\n    mmap.c\n    plain_wrapper.c\n    streams.c\n    transports.c\n    userspace.c\n    xp_socket.c\n  ]),\n  [-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1])\n\nPHP_ADD_SOURCES([/main],\n  [internal_functions.c],\n  [-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1],\n  [sapi])\nPHP_ADD_SOURCES_X([/main],\n  [internal_functions_cli.c],\n  [-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1],\n  [PHP_BINARY_OBJS])\n\nPHP_ADD_SOURCES([Zend], m4_normalize([\n    Optimizer/block_pass.c\n    Optimizer/compact_literals.c\n    Optimizer/compact_vars.c\n    Optimizer/dce.c\n    Optimizer/dfa_pass.c\n    Optimizer/escape_analysis.c\n    Optimizer/nop_removal.c\n    Optimizer/optimize_func_calls.c\n    Optimizer/optimize_temp_vars_5.c\n    Optimizer/pass1.c\n    Optimizer/pass3.c\n    Optimizer/sccp.c\n    Optimizer/scdf.c\n    Optimizer/zend_call_graph.c\n    Optimizer/zend_cfg.c\n    Optimizer/zend_dfg.c\n    Optimizer/zend_dump.c\n    Optimizer/zend_func_info.c\n    Optimizer/zend_inference.c\n    Optimizer/zend_optimizer.c\n    Optimizer/zend_ssa.c\n    zend_alloc.c\n    zend_API.c\n    zend_ast.c\n    zend_atomic.c\n    zend_attributes.c\n    zend_builtin_functions.c\n    zend_call_stack.c\n    zend_closures.c\n    zend_compile.c\n    zend_constants.c\n    zend_cpuinfo.c\n    zend_default_classes.c\n    zend_dtrace.c\n    zend_enum.c\n    zend_exceptions.c\n    zend_execute_API.c\n    zend_execute.c\n    zend_extensions.c\n    zend_fibers.c\n    zend_float.c\n    zend_frameless_function.c\n    zend_gc.c\n    zend_gdb.c\n    zend_generators.c\n    zend_hash.c\n    zend_highlight.c\n    zend_hrtime.c\n    zend_inheritance.c\n    zend_ini_parser.c\n    zend_ini_scanner.c\n    zend_ini.c\n    zend_interfaces.c\n    zend_iterators.c\n    zend_language_parser.c\n    zend_language_scanner.c\n    zend_lazy_objects.c\n    zend_list.c\n    zend_llist.c\n    zend_max_execution_timer.c\n    zend_multibyte.c\n    zend_object_handlers.c\n    zend_objects_API.c\n    zend_objects.c\n    zend_observer.c\n    zend_opcode.c\n    zend_operators.c\n    zend_property_hooks.c\n    zend_ptr_stack.c\n    zend_signal.c\n    zend_smart_str.c\n    zend_sort.c\n    zend_stack.c\n    zend_stream.c\n    zend_string.c\n    zend_strtod.c\n    zend_system_id.c\n    zend_variables.c\n    zend_virtual_cwd.c\n    zend_vm_opcodes.c\n    zend_weakrefs.c\n    zend.c\n  ]),\n  [-DZEND_ENABLE_STATIC_TSRMLS_CACHE=1 $fiber_asm_cflag])\n\nPHP_ADD_MAKEFILE_FRAGMENT([$abs_srcdir/scripts/Makefile.frag],\n  [$abs_srcdir/scripts],\n  [scripts])\nPHP_ADD_MAKEFILE_FRAGMENT([$abs_srcdir/Zend/Makefile.frag],\n  [$abs_srcdir/Zend],\n  [Zend])\n\nAC_DEFINE([HAVE_BUILD_DEFS_H], [1],\n  [Define to 1 if PHP has the <main/build-defs.h> header file.])\n\nPHP_ADD_BUILD_DIR([\n  main\n  main/streams\n  scripts\n  scripts/man1\n  TSRM\n  Zend\n  Zend/asm\n  Zend/Optimizer\n])\n\nAC_CONFIG_FILES([\n  main/build-defs.h\n  scripts/man1/php-config.1\n  scripts/man1/phpize.1\n  scripts/php-config\n  scripts/phpize\n])\n\nAC_CONFIG_COMMANDS_PRE([PHP_PATCH_CONFIG_HEADERS([main/php_config.h.in])])\n\nAC_CONFIG_COMMANDS([Zend/zend_config.h], [\ncat >Zend/zend_config.h <<FEO\n#include <../main/php_config.h>\nFEO\n])\n\nAC_CONFIG_COMMANDS([main/internal_functions.c], [], [\n  AWK=\"$AWK\" $SHELL $srcdir/build/genif.sh \\\n    $srcdir/main/internal_functions.c.in \\\n    \"$EXT_STATIC\" > main/internal_functions.c\n])\n\nAC_CONFIG_COMMANDS([main/internal_functions_cli.c], [], [\n  AWK=\"$AWK\" $SHELL $srcdir/build/genif.sh \\\n    $srcdir/main/internal_functions.c.in \\\n    \"$EXT_CLI_STATIC\" > main/internal_functions_cli.c\n])\n\nAC_CONFIG_COMMANDS([default], [\ncat <<X\n\n+--------------------------------------------------------------------+\n| License:                                                           |\n| This software is subject to the PHP License, available in this     |\n| distribution in the file LICENSE. By continuing this installation  |\n| process, you are bound by the terms of this license agreement.     |\n| If you do not agree with the terms of this license, you must abort |\n| the installation process at this point.                            |\n+--------------------------------------------------------------------+\n\nThank you for using PHP.\n\nX\n])\nAC_OUTPUT\n"
        },
        {
          "name": "docs-old",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "main",
          "type": "tree",
          "content": null
        },
        {
          "name": "pear",
          "type": "tree",
          "content": null
        },
        {
          "name": "php.ini-development",
          "type": "blob",
          "size": 67.662109375,
          "content": "[PHP]\n\n;;;;;;;;;;;;;;;;;;;\n; About php.ini   ;\n;;;;;;;;;;;;;;;;;;;\n; PHP's initialization file, generally called php.ini, is responsible for\n; configuring many of the aspects of PHP's behavior.\n\n; PHP attempts to find and load this configuration from a number of locations.\n; The following is a summary of its search order:\n; 1. SAPI module specific location.\n; 2. The PHPRC environment variable.\n; 3. A number of predefined registry keys on Windows\n; 4. Current working directory (except CLI)\n; 5. The web server's directory (for SAPI modules), or directory of PHP\n; (otherwise in Windows)\n; 6. The directory from the --with-config-file-path compile time option, or the\n; Windows directory (usually C:\\windows)\n; See the PHP docs for more specific information.\n; https://php.net/configuration.file\n\n; The syntax of the file is extremely simple.  Whitespace and lines\n; beginning with a semicolon are silently ignored (as you probably guessed).\n; Section headers (e.g. [Foo]) are also silently ignored, even though\n; they might mean something in the future.\n\n; Directives following the section heading [PATH=/www/mysite] only\n; apply to PHP files in the /www/mysite directory.  Directives\n; following the section heading [HOST=www.example.com] only apply to\n; PHP files served from www.example.com.  Directives set in these\n; special sections cannot be overridden by user-defined INI files or\n; at runtime. Currently, [PATH=] and [HOST=] sections only work under\n; CGI/FastCGI.\n; https://php.net/ini.sections\n\n; Directives are specified using the following syntax:\n; directive = value\n; Directive names are *case sensitive* - foo=bar is different from FOO=bar.\n; Directives are variables used to configure PHP or PHP extensions.\n; There is no name validation.  If PHP can't find an expected\n; directive because it is not set or is mistyped, a default value will be used.\n\n; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one\n; of the INI constants (On, Off, True, False, Yes, No and None) or an expression\n; (e.g. E_ALL & ~E_NOTICE), a quoted string (\"bar\"), or a reference to a\n; previously set variable or directive (e.g. ${foo})\n\n; Expressions in the INI file are limited to bitwise operators and parentheses:\n; |  bitwise OR\n; ^  bitwise XOR\n; &  bitwise AND\n; ~  bitwise NOT\n; !  boolean NOT\n\n; Boolean flags can be turned on using the values 1, On, True or Yes.\n; They can be turned off using the values 0, Off, False or No.\n\n; An empty string can be denoted by simply not writing anything after the equal\n; sign, or by using the None keyword:\n\n; foo =         ; sets foo to an empty string\n; foo = None    ; sets foo to an empty string\n; foo = \"None\"  ; sets foo to the string 'None'\n\n; If you use constants in your value, and these constants belong to a\n; dynamically loaded extension (either a PHP extension or a Zend extension),\n; you may only use these constants *after* the line that loads the extension.\n\n;;;;;;;;;;;;;;;;;;;\n; About this file ;\n;;;;;;;;;;;;;;;;;;;\n; PHP comes packaged with two INI files. One that is recommended to be used\n; in production environments and one that is recommended to be used in\n; development environments.\n\n; php.ini-production contains settings which hold security, performance and\n; best practices at its core. But please be aware, these settings may break\n; compatibility with older or less security-conscious applications. We\n; recommending using the production ini in production and testing environments.\n\n; php.ini-development is very similar to its production variant, except it is\n; much more verbose when it comes to errors. We recommend using the\n; development version only in development environments, as errors shown to\n; application users can inadvertently leak otherwise secure information.\n\n; This is the php.ini-development INI file.\n\n;;;;;;;;;;;;;;;;;;;\n; Quick Reference ;\n;;;;;;;;;;;;;;;;;;;\n\n; The following are all the settings which are different in either the production\n; or development versions of the INIs with respect to PHP's default behavior.\n; Please see the actual settings later in the document for more details as to why\n; we recommend these changes in PHP's behavior.\n\n; display_errors\n;   Default Value: On\n;   Development Value: On\n;   Production Value: Off\n\n; display_startup_errors\n;   Default Value: On\n;   Development Value: On\n;   Production Value: Off\n\n; error_reporting\n;   Default Value: E_ALL\n;   Development Value: E_ALL\n;   Production Value: E_ALL & ~E_DEPRECATED\n\n; log_errors\n;   Default Value: Off\n;   Development Value: On\n;   Production Value: On\n\n; max_input_time\n;   Default Value: -1 (Unlimited)\n;   Development Value: 60 (60 seconds)\n;   Production Value: 60 (60 seconds)\n\n; mysqlnd.collect_memory_statistics\n;   Default Value: Off\n;   Development Value: On\n;   Production Value: Off\n\n; output_buffering\n;   Default Value: Off\n;   Development Value: 4096\n;   Production Value: 4096\n\n; register_argc_argv\n;   Default Value: On\n;   Development Value: Off\n;   Production Value: Off\n\n; request_order\n;   Default Value: None\n;   Development Value: \"GP\"\n;   Production Value: \"GP\"\n\n; session.gc_divisor\n;   Default Value: 100\n;   Development Value: 1000\n;   Production Value: 1000\n\n; short_open_tag\n;   Default Value: On\n;   Development Value: Off\n;   Production Value: Off\n\n; variables_order\n;   Default Value: \"EGPCS\"\n;   Development Value: \"GPCS\"\n;   Production Value: \"GPCS\"\n\n; zend.assertions\n;   Default Value: 1\n;   Development Value: 1\n;   Production Value: -1\n\n; zend.exception_ignore_args\n;   Default Value: Off\n;   Development Value: Off\n;   Production Value: On\n\n; zend.exception_string_param_max_len\n;   Default Value: 15\n;   Development Value: 15\n;   Production Value: 0\n\n;;;;;;;;;;;;;;;;;;;;\n; php.ini Options  ;\n;;;;;;;;;;;;;;;;;;;;\n; Name for user-defined php.ini (.htaccess) files. Default is \".user.ini\"\n;user_ini.filename = \".user.ini\"\n\n; To disable this feature set this option to an empty value\n;user_ini.filename =\n\n; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)\n;user_ini.cache_ttl = 300\n\n;;;;;;;;;;;;;;;;;;;;\n; Language Options ;\n;;;;;;;;;;;;;;;;;;;;\n\n; Enable the PHP scripting language engine under Apache.\n; https://php.net/engine\nengine = On\n\n; This directive determines whether or not PHP will recognize code between\n; <? and ?> tags as PHP source which should be processed as such. It is\n; generally recommended that <?php and ?> should be used and that this feature\n; should be disabled, as enabling it may result in issues when generating XML\n; documents, however this remains supported for backward compatibility reasons.\n; Note that this directive does not control the <?= shorthand tag, which can be\n; used regardless of this directive.\n; Default Value: On\n; Development Value: Off\n; Production Value: Off\n; https://php.net/short-open-tag\nshort_open_tag = Off\n\n; The number of significant digits displayed in floating point numbers.\n; https://php.net/precision\nprecision = 14\n\n; Output buffering is a mechanism for controlling how much output data\n; (excluding headers and cookies) PHP should keep internally before pushing that\n; data to the client. If your application's output exceeds this setting, PHP\n; will send that data in chunks of roughly the size you specify.\n; Turning on this setting and managing its maximum buffer size can yield some\n; interesting side-effects depending on your application and web server.\n; You may be able to send headers and cookies after you've already sent output\n; through print or echo. You also may see performance benefits if your server is\n; emitting less packets due to buffered output versus PHP streaming the output\n; as it gets it. On production servers, 4096 bytes is a good setting for performance\n; reasons.\n; Note: Output buffering can also be controlled via Output Buffering Control\n;   functions.\n; Possible Values:\n;   On = Enabled and buffer is unlimited. (Use with caution)\n;   Off = Disabled\n;   Integer = Enables the buffer and sets its maximum size in bytes.\n; Note: This directive is hardcoded to Off for the CLI SAPI\n; Default Value: Off\n; Development Value: 4096\n; Production Value: 4096\n; https://php.net/output-buffering\noutput_buffering = 4096\n\n; You can redirect all of the output of your scripts to a function.  For\n; example, if you set output_handler to \"mb_output_handler\", character\n; encoding will be transparently converted to the specified encoding.\n; Setting any output handler automatically turns on output buffering.\n; Note: People who wrote portable scripts should not depend on this ini\n;   directive. Instead, explicitly set the output handler using ob_start().\n;   Using this ini directive may cause problems unless you know what script\n;   is doing.\n; Note: You cannot use both \"mb_output_handler\" with \"ob_iconv_handler\"\n;   and you cannot use both \"ob_gzhandler\" and \"zlib.output_compression\".\n; Note: output_handler must be empty if this is set 'On' !!!!\n;   Instead you must use zlib.output_handler.\n; https://php.net/output-handler\n;output_handler =\n\n; URL rewriter function rewrites URL on the fly by using\n; output buffer. You can set target tags by this configuration.\n; \"form\" tag is special tag. It will add hidden input tag to pass values.\n; Refer to session.trans_sid_tags for usage.\n; Default Value: \"form=\"\n; Development Value: \"form=\"\n; Production Value: \"form=\"\n;url_rewriter.tags\n\n; URL rewriter will not rewrite absolute URL nor form by default. To enable\n; absolute URL rewrite, allowed hosts must be defined at RUNTIME.\n; Refer to session.trans_sid_hosts for more details.\n; Default Value: \"\"\n; Development Value: \"\"\n; Production Value: \"\"\n;url_rewriter.hosts\n\n; Transparent output compression using the zlib library\n; Valid values for this option are 'off', 'on', or a specific buffer size\n; to be used for compression (default is 4KB)\n; Note: Resulting chunk size may vary due to nature of compression. PHP\n;   outputs chunks that are few hundreds bytes each as a result of\n;   compression. If you prefer a larger chunk size for better\n;   performance, enable output_buffering in addition.\n; Note: You need to use zlib.output_handler instead of the standard\n;   output_handler, or otherwise the output will be corrupted.\n; https://php.net/zlib.output-compression\nzlib.output_compression = Off\n\n; https://php.net/zlib.output-compression-level\n;zlib.output_compression_level = -1\n\n; You cannot specify additional output handlers if zlib.output_compression\n; is activated here. This setting does the same as output_handler but in\n; a different order.\n; https://php.net/zlib.output-handler\n;zlib.output_handler =\n\n; Implicit flush tells PHP to tell the output layer to flush itself\n; automatically after every output block.  This is equivalent to calling the\n; PHP function flush() after each and every call to print() or echo() and each\n; and every HTML block.  Turning this option on has serious performance\n; implications and is generally recommended for debugging purposes only.\n; https://php.net/implicit-flush\n; Note: This directive is hardcoded to On for the CLI SAPI\nimplicit_flush = Off\n\n; The unserialize callback function will be called (with the undefined class'\n; name as parameter), if the unserializer finds an undefined class\n; which should be instantiated. A warning appears if the specified function is\n; not defined, or if the function doesn't include/implement the missing class.\n; So only set this entry, if you really want to implement such a\n; callback-function.\nunserialize_callback_func =\n\n; The unserialize_max_depth specifies the default depth limit for unserialized\n; structures. Setting the depth limit too high may result in stack overflows\n; during unserialization. The unserialize_max_depth ini setting can be\n; overridden by the max_depth option on individual unserialize() calls.\n; A value of 0 disables the depth limit.\n;unserialize_max_depth = 4096\n\n; When floats & doubles are serialized, store serialize_precision significant\n; digits after the floating point. The default value ensures that when floats\n; are decoded with unserialize, the data will remain the same.\n; The value is also used for json_encode when encoding double values.\n; If -1 is used, then dtoa mode 0 is used which automatically select the best\n; precision.\nserialize_precision = -1\n\n; open_basedir, if set, limits all file operations to the defined directory\n; and below.  This directive makes most sense if used in a per-directory\n; or per-virtualhost web server configuration file.\n; Note: disables the realpath cache\n; https://php.net/open-basedir\n;open_basedir =\n\n; This directive allows you to disable certain functions.\n; It receives a comma-delimited list of function names.\n; https://php.net/disable-functions\ndisable_functions =\n\n; This directive allows you to disable certain classes.\n; It receives a comma-delimited list of class names.\n; https://php.net/disable-classes\ndisable_classes =\n\n; Colors for Syntax Highlighting mode.  Anything that's acceptable in\n; <span style=\"color: ???????\"> would work.\n; https://php.net/syntax-highlighting\n;highlight.string  = #DD0000\n;highlight.comment = #FF9900\n;highlight.keyword = #007700\n;highlight.default = #0000BB\n;highlight.html    = #000000\n\n; If enabled, the request will be allowed to complete even if the user aborts\n; the request. Consider enabling it if executing long requests, which may end up\n; being interrupted by the user or a browser timing out. PHP's default behavior\n; is to disable this feature.\n; https://php.net/ignore-user-abort\n;ignore_user_abort = On\n\n; Determines the size of the realpath cache to be used by PHP. This value should\n; be increased on systems where PHP opens many files to reflect the quantity of\n; the file operations performed.\n; Note: if open_basedir is set, the cache is disabled\n; https://php.net/realpath-cache-size\n;realpath_cache_size = 4096k\n\n; Duration of time, in seconds for which to cache realpath information for a given\n; file or directory. For systems with rarely changing files, consider increasing this\n; value.\n; https://php.net/realpath-cache-ttl\n;realpath_cache_ttl = 120\n\n; Enables or disables the circular reference collector.\n; https://php.net/zend.enable-gc\nzend.enable_gc = On\n\n; If enabled, scripts may be written in encodings that are incompatible with\n; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such\n; encodings.  To use this feature, mbstring extension must be enabled.\n;zend.multibyte = Off\n\n; Allows to set the default encoding for the scripts.  This value will be used\n; unless \"declare(encoding=...)\" directive appears at the top of the script.\n; Only affects if zend.multibyte is set.\n;zend.script_encoding =\n\n; Allows to include or exclude arguments from stack traces generated for exceptions.\n; In production, it is recommended to turn this setting on to prohibit the output\n; of sensitive information in stack traces\n; Default Value: Off\n; Development Value: Off\n; Production Value: On\nzend.exception_ignore_args = Off\n\n; Allows setting the maximum string length in an argument of a stringified stack trace\n; to a value between 0 and 1000000.\n; This has no effect when zend.exception_ignore_args is enabled.\n; Default Value: 15\n; Development Value: 15\n; Production Value: 0\nzend.exception_string_param_max_len = 15\n\n;;;;;;;;;;;;;;;;;\n; Miscellaneous ;\n;;;;;;;;;;;;;;;;;\n\n; Decides whether PHP may expose the fact that it is installed on the server\n; (e.g. by adding its signature to the Web server header).  It is no security\n; threat in any way, but it makes it possible to determine whether you use PHP\n; on your server or not.\n; https://php.net/expose-php\nexpose_php = On\n\n;;;;;;;;;;;;;;;;;;;\n; Resource Limits ;\n;;;;;;;;;;;;;;;;;;;\n\n; Maximum execution time of each script, in seconds\n; https://php.net/max-execution-time\n; Note: This directive is hardcoded to 0 for the CLI SAPI\nmax_execution_time = 30\n\n; Maximum amount of time each script may spend parsing request data. It's a good\n; idea to limit this time on productions servers in order to eliminate unexpectedly\n; long running scripts.\n; Note: This directive is hardcoded to -1 for the CLI SAPI\n; Default Value: -1 (Unlimited)\n; Development Value: 60 (60 seconds)\n; Production Value: 60 (60 seconds)\n; https://php.net/max-input-time\nmax_input_time = 60\n\n; Maximum input variable nesting level\n; https://php.net/max-input-nesting-level\n;max_input_nesting_level = 64\n\n; How many GET/POST/COOKIE input variables may be accepted\n;max_input_vars = 1000\n\n; How many multipart body parts (combined input variable and file uploads) may\n; be accepted.\n; Default Value: -1 (Sum of max_input_vars and max_file_uploads)\n;max_multipart_body_parts = 1500\n\n; Maximum amount of memory a script may consume\n; https://php.net/memory-limit\nmemory_limit = 128M\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; Error handling and logging ;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; This directive informs PHP of which errors, warnings and notices you would like\n; it to take action for. The recommended way of setting values for this\n; directive is through the use of the error level constants and bitwise\n; operators. The error level constants are below here for convenience as well as\n; some common settings and their meanings.\n; By default, PHP is set to take action on all errors, notices and warnings EXCEPT\n; those related to E_NOTICE, which together cover best practices and\n; recommended coding standards in PHP. For performance reasons, this is the\n; recommend error reporting setting. Your production server shouldn't be wasting\n; resources complaining about best practices and coding standards. That's what\n; development servers and development settings are for.\n; Note: The php.ini-development file has this setting as E_ALL. This\n; means it pretty much reports everything which is exactly what you want during\n; development and early testing.\n;\n; Error Level Constants:\n; E_ALL             - All errors and warnings\n; E_ERROR           - fatal run-time errors\n; E_RECOVERABLE_ERROR  - almost fatal run-time errors\n; E_WARNING         - run-time warnings (non-fatal errors)\n; E_PARSE           - compile-time parse errors\n; E_NOTICE          - run-time notices (these are warnings which often result\n;                     from a bug in your code, but it's possible that it was\n;                     intentional (e.g., using an uninitialized variable and\n;                     relying on the fact it is automatically initialized to an\n;                     empty string)\n; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup\n; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's\n;                     initial startup\n; E_COMPILE_ERROR   - fatal compile-time errors\n; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)\n; E_USER_ERROR      - user-generated error message\n; E_USER_WARNING    - user-generated warning message\n; E_USER_NOTICE     - user-generated notice message\n; E_DEPRECATED      - warn about code that will not work in future versions\n;                     of PHP\n; E_USER_DEPRECATED - user-generated deprecation warnings\n;\n; Common Values:\n;   E_ALL (Show all errors, warnings and notices including coding standards.)\n;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)\n;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)\n; Default Value: E_ALL\n; Development Value: E_ALL\n; Production Value: E_ALL & ~E_DEPRECATED\n; https://php.net/error-reporting\nerror_reporting = E_ALL\n\n; This directive controls whether or not and where PHP will output errors,\n; notices and warnings too. Error output is very useful during development, but\n; it could be very dangerous in production environments. Depending on the code\n; which is triggering the error, sensitive information could potentially leak\n; out of your application such as database usernames and passwords or worse.\n; For production environments, we recommend logging errors rather than\n; sending them to STDOUT.\n; Possible Values:\n;   Off = Do not display any errors\n;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)\n;   On or stdout = Display errors to STDOUT\n; Default Value: On\n; Development Value: On\n; Production Value: Off\n; https://php.net/display-errors\ndisplay_errors = On\n\n; The display of errors which occur during PHP's startup sequence are handled\n; separately from display_errors. We strongly recommend you set this to 'off'\n; for production servers to avoid leaking configuration details.\n; Default Value: On\n; Development Value: On\n; Production Value: Off\n; https://php.net/display-startup-errors\ndisplay_startup_errors = On\n\n; Besides displaying errors, PHP can also log errors to locations such as a\n; server-specific log, STDERR, or a location specified by the error_log\n; directive found below. While errors should not be displayed on productions\n; servers they should still be monitored and logging is a great way to do that.\n; Default Value: Off\n; Development Value: On\n; Production Value: On\n; https://php.net/log-errors\nlog_errors = On\n\n; Do not log repeated messages. Repeated errors must occur in same file on same\n; line unless ignore_repeated_source is set true.\n; https://php.net/ignore-repeated-errors\nignore_repeated_errors = Off\n\n; Ignore source of message when ignoring repeated messages. When this setting\n; is On you will not log errors with repeated messages from different files or\n; source lines.\n; https://php.net/ignore-repeated-source\nignore_repeated_source = Off\n\n; If this parameter is set to Off, then memory leaks will not be shown (on\n; stdout or in the log). This is only effective in a debug compile, and if\n; error reporting includes E_WARNING in the allowed list\n; https://php.net/report-memleaks\nreport_memleaks = On\n\n; This setting is off by default.\n;report_zend_debug = 0\n\n; Turn off normal error reporting and emit XML-RPC error XML\n; https://php.net/xmlrpc-errors\n;xmlrpc_errors = 0\n\n; An XML-RPC faultCode\n;xmlrpc_error_number = 0\n\n; When PHP displays or logs an error, it has the capability of formatting the\n; error message as HTML for easier reading. This directive controls whether\n; the error message is formatted as HTML or not.\n; Note: This directive is hardcoded to Off for the CLI SAPI\n; https://php.net/html-errors\n;html_errors = On\n\n; If html_errors is set to On *and* docref_root is not empty, then PHP\n; produces clickable error messages that direct to a page describing the error\n; or function causing the error in detail.\n; You can download a copy of the PHP manual from https://php.net/docs\n; and change docref_root to the base URL of your local copy including the\n; leading '/'. You must also specify the file extension being used including\n; the dot. PHP's default behavior is to leave these settings empty, in which\n; case no links to documentation are generated.\n; Note: Never use this feature for production boxes.\n; https://php.net/docref-root\n; Examples\n;docref_root = \"/phpmanual/\"\n\n; https://php.net/docref-ext\n;docref_ext = .html\n\n; String to output before an error message. PHP's default behavior is to leave\n; this setting blank.\n; https://php.net/error-prepend-string\n; Example:\n;error_prepend_string = \"<span style='color: #ff0000'>\"\n\n; String to output after an error message. PHP's default behavior is to leave\n; this setting blank.\n; https://php.net/error-append-string\n; Example:\n;error_append_string = \"</span>\"\n\n; Log errors to specified file. PHP's default behavior is to leave this value\n; empty.\n; https://php.net/error-log\n; Example:\n;error_log = php_errors.log\n; Log errors to syslog (Event Log on Windows).\n;error_log = syslog\n\n; The syslog ident is a string which is prepended to every message logged\n; to syslog. Only used when error_log is set to syslog.\n;syslog.ident = php\n\n; The syslog facility is used to specify what type of program is logging\n; the message. Only used when error_log is set to syslog.\n;syslog.facility = user\n\n; Set this to disable filtering control characters (the default).\n; Some loggers only accept NVT-ASCII, others accept anything that's not\n; control characters. If your logger accepts everything, then no filtering\n; is needed at all.\n; Allowed values are:\n;   ascii (all printable ASCII characters and NL)\n;   no-ctrl (all characters except control characters)\n;   all (all characters)\n;   raw (like \"all\", but messages are not split at newlines)\n; https://php.net/syslog.filter\n;syslog.filter = ascii\n\n;windows.show_crt_warning\n; Default value: 0\n; Development value: 0\n; Production value: 0\n\n;;;;;;;;;;;;;;;;;\n; Data Handling ;\n;;;;;;;;;;;;;;;;;\n\n; The separator used in PHP generated URLs to separate arguments.\n; PHP's default setting is \"&\".\n; https://php.net/arg-separator.output\n; Example:\n;arg_separator.output = \"&amp;\"\n\n; List of separator(s) used by PHP to parse input URLs into variables.\n; PHP's default setting is \"&\".\n; NOTE: Every character in this directive is considered as separator!\n; https://php.net/arg-separator.input\n; Example:\n;arg_separator.input = \";&\"\n\n; This directive determines which super global arrays are registered when PHP\n; starts up. G,P,C,E & S are abbreviations for the following respective super\n; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty\n; paid for the registration of these arrays and because ENV is not as commonly\n; used as the others, ENV is not recommended on productions servers. You\n; can still get access to the environment variables through getenv() should you\n; need to.\n; Default Value: \"EGPCS\"\n; Development Value: \"GPCS\"\n; Production Value: \"GPCS\";\n; https://php.net/variables-order\nvariables_order = \"GPCS\"\n\n; This directive determines which super global data (G,P & C) should be\n; registered into the super global array REQUEST. If so, it also determines\n; the order in which that data is registered. The values for this directive\n; are specified in the same manner as the variables_order directive,\n; EXCEPT one. Leaving this value empty will cause PHP to use the value set\n; in the variables_order directive. It does not mean it will leave the super\n; globals array REQUEST empty.\n; Default Value: None\n; Development Value: \"GP\"\n; Production Value: \"GP\"\n; https://php.net/request-order\nrequest_order = \"GP\"\n\n; This directive determines whether PHP registers $argv & $argc each time it\n; runs. $argv contains an array of all the arguments passed to PHP when a script\n; is invoked. $argc contains an integer representing the number of arguments\n; that were passed when the script was invoked. These arrays are extremely\n; useful when running scripts from the command line. When this directive is\n; enabled, registering these variables consumes CPU cycles and memory each time\n; a script is executed. For performance reasons, this feature should be disabled\n; on production servers.\n; Note: This directive is hardcoded to On for the CLI SAPI\n; Default Value: On\n; Development Value: Off\n; Production Value: Off\n; https://php.net/register-argc-argv\nregister_argc_argv = Off\n\n; When enabled, the ENV, REQUEST and SERVER variables are created when they're\n; first used (Just In Time) instead of when the script starts. If these\n; variables are not used within a script, having this directive on will result\n; in a performance gain. The PHP directive register_argc_argv must be disabled\n; for this directive to have any effect.\n; https://php.net/auto-globals-jit\nauto_globals_jit = On\n\n; Whether PHP will read the POST data.\n; This option is enabled by default.\n; Most likely, you won't want to disable this option globally. It causes $_POST\n; and $_FILES to always be empty; the only way you will be able to read the\n; POST data will be through the php://input stream wrapper. This can be useful\n; to proxy requests or to process the POST data in a memory efficient fashion.\n; https://php.net/enable-post-data-reading\n;enable_post_data_reading = Off\n\n; Maximum size of POST data that PHP will accept.\n; Its value may be 0 to disable the limit. It is ignored if POST data reading\n; is disabled through enable_post_data_reading.\n; https://php.net/post-max-size\npost_max_size = 8M\n\n; Automatically add files before PHP document.\n; https://php.net/auto-prepend-file\nauto_prepend_file =\n\n; Automatically add files after PHP document.\n; https://php.net/auto-append-file\nauto_append_file =\n\n; By default, PHP will output a media type using the Content-Type header. To\n; disable this, simply set it to be empty.\n;\n; PHP's built-in default media type is set to text/html.\n; https://php.net/default-mimetype\ndefault_mimetype = \"text/html\"\n\n; PHP's default character set is set to UTF-8.\n; https://php.net/default-charset\ndefault_charset = \"UTF-8\"\n\n; PHP internal character encoding is set to empty.\n; If empty, default_charset is used.\n; https://php.net/internal-encoding\n;internal_encoding =\n\n; PHP input character encoding is set to empty.\n; If empty, default_charset is used.\n; https://php.net/input-encoding\n;input_encoding =\n\n; PHP output character encoding is set to empty.\n; If empty, default_charset is used.\n; See also output_buffer.\n; https://php.net/output-encoding\n;output_encoding =\n\n;;;;;;;;;;;;;;;;;;;;;;;;;\n; Paths and Directories ;\n;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; UNIX: \"/path1:/path2\"\n;include_path = \".:/php/includes\"\n;\n; Windows: \"\\path1;\\path2\"\n;include_path = \".;c:\\php\\includes\"\n;\n; PHP's default setting for include_path is \".;/path/to/php/pear\"\n; https://php.net/include-path\n\n; The root of the PHP pages, used only if nonempty.\n; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root\n; if you are running php as a CGI under any web server (other than IIS)\n; see documentation for security issues.  The alternate is to use the\n; cgi.force_redirect configuration below\n; https://php.net/doc-root\ndoc_root =\n\n; The directory under which PHP opens the script using /~username used only\n; if nonempty.\n; https://php.net/user-dir\nuser_dir =\n\n; Directory in which the loadable extensions (modules) reside.\n; https://php.net/extension-dir\n;extension_dir = \"./\"\n; On windows:\n;extension_dir = \"ext\"\n\n; Directory where the temporary files should be placed.\n; Defaults to the system default (see sys_get_temp_dir)\n;sys_temp_dir = \"/tmp\"\n\n; Whether or not to enable the dl() function.  The dl() function does NOT work\n; properly in multithreaded servers, such as IIS or Zeus, and is automatically\n; disabled on them.\n; https://php.net/enable-dl\nenable_dl = Off\n\n; cgi.force_redirect is necessary to provide security running PHP as a CGI under\n; most web servers.  Left undefined, PHP turns this on by default.  You can\n; turn it off here AT YOUR OWN RISK\n; **You CAN safely turn this off for IIS, in fact, you MUST.**\n; https://php.net/cgi.force-redirect\n;cgi.force_redirect = 1\n\n; if cgi.nph is enabled it will force cgi to always sent Status: 200 with\n; every request. PHP's default behavior is to disable this feature.\n;cgi.nph = 1\n\n; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape\n; (iPlanet) web servers, you MAY need to set an environment variable name that PHP\n; will look for to know it is OK to continue execution.  Setting this variable MAY\n; cause security issues, KNOW WHAT YOU ARE DOING FIRST.\n; https://php.net/cgi.redirect-status-env\n;cgi.redirect_status_env =\n\n; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's\n; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok\n; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting\n; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting\n; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts\n; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.\n; https://php.net/cgi.fix-pathinfo\n;cgi.fix_pathinfo=1\n\n; if cgi.discard_path is enabled, the PHP CGI binary can safely be placed outside\n; of the web tree and people will not be able to circumvent .htaccess security.\n;cgi.discard_path=1\n\n; FastCGI under IIS supports the ability to impersonate\n; security tokens of the calling client.  This allows IIS to define the\n; security context that the request runs under.  mod_fastcgi under Apache\n; does not currently support this feature (03/17/2002)\n; Set to 1 if running under IIS.  Default is zero.\n; https://php.net/fastcgi.impersonate\n;fastcgi.impersonate = 1\n\n; Disable logging through FastCGI connection. PHP's default behavior is to enable\n; this feature.\n;fastcgi.logging = 0\n\n; cgi.rfc2616_headers configuration option tells PHP what type of headers to\n; use when sending HTTP response code. If set to 0, PHP sends Status: header that\n; is supported by Apache. When this option is set to 1, PHP will send\n; RFC2616 compliant header.\n; Default is zero.\n; https://php.net/cgi.rfc2616-headers\n;cgi.rfc2616_headers = 0\n\n; cgi.check_shebang_line controls whether CGI PHP checks for line starting with #!\n; (shebang) at the top of the running script. This line might be needed if the\n; script support running both as stand-alone script and via PHP CGI<. PHP in CGI\n; mode skips this line and ignores its content if this directive is turned on.\n; https://php.net/cgi.check-shebang-line\n;cgi.check_shebang_line=1\n\n;;;;;;;;;;;;;;;;\n; File Uploads ;\n;;;;;;;;;;;;;;;;\n\n; Whether to allow HTTP file uploads.\n; https://php.net/file-uploads\nfile_uploads = On\n\n; Temporary directory for HTTP uploaded files (will use system default if not\n; specified).\n; https://php.net/upload-tmp-dir\n;upload_tmp_dir =\n\n; Maximum allowed size for uploaded files.\n; https://php.net/upload-max-filesize\nupload_max_filesize = 2M\n\n; Maximum number of files that can be uploaded via a single request\nmax_file_uploads = 20\n\n;;;;;;;;;;;;;;;;;;\n; Fopen wrappers ;\n;;;;;;;;;;;;;;;;;;\n\n; Whether to allow the treatment of URLs (like http:// or ftp://) as files.\n; https://php.net/allow-url-fopen\nallow_url_fopen = On\n\n; Whether to allow include/require to open URLs (like https:// or ftp://) as files.\n; https://php.net/allow-url-include\nallow_url_include = Off\n\n; Define the anonymous ftp password (your email address). PHP's default setting\n; for this is empty.\n; https://php.net/from\n;from=\"john@doe.com\"\n\n; Define the User-Agent string. PHP's default setting for this is empty.\n; https://php.net/user-agent\n;user_agent=\"PHP\"\n\n; Default timeout for socket based streams (seconds)\n; https://php.net/default-socket-timeout\ndefault_socket_timeout = 60\n\n; If your scripts have to deal with files from Macintosh systems,\n; or you are running on a Mac and need to deal with files from\n; unix or win32 systems, setting this flag will cause PHP to\n; automatically detect the EOL character in those files so that\n; fgets() and file() will work regardless of the source of the file.\n; https://php.net/auto-detect-line-endings\n;auto_detect_line_endings = Off\n\n;;;;;;;;;;;;;;;;;;;;;;\n; Dynamic Extensions ;\n;;;;;;;;;;;;;;;;;;;;;;\n\n; If you wish to have an extension loaded automatically, use the following\n; syntax:\n;\n;   extension=modulename\n;\n; For example:\n;\n;   extension=mysqli\n;\n; When the extension library to load is not located in the default extension\n; directory, You may specify an absolute path to the library file:\n;\n;   extension=/path/to/extension/mysqli.so\n;\n; Note : The syntax used in previous PHP versions ('extension=<ext>.so' and\n; 'extension='php_<ext>.dll') is supported for legacy reasons and may be\n; deprecated in a future PHP major version. So, when it is possible, please\n; move to the new ('extension=<ext>) syntax.\n;\n; Notes for Windows environments :\n;\n; - Many DLL files are located in the ext/\n;   extension folders as well as the separate PECL DLL download.\n;   Be sure to appropriately set the extension_dir directive.\n;\n;extension=bz2\n;extension=curl\n;extension=exif\n;extension=ffi\n;extension=ftp\n;extension=fileinfo\n;extension=gd\n;extension=gettext\n;extension=gmp\n;extension=intl\n;extension=ldap\n;extension=mbstring\n;extension=mysqli\n;extension=odbc\n;extension=openssl\n;extension=pdo_firebird\n;extension=pdo_mysql\n;extension=pdo_odbc\n;extension=pdo_pgsql\n;extension=pdo_sqlite\n;extension=pgsql\n;extension=shmop\n\n; The MIBS data available in the PHP distribution must be installed.\n; See https://www.php.net/manual/en/snmp.installation.php\n;extension=snmp\n\n;extension=soap\n;extension=sockets\n;extension=sodium\n;extension=sqlite3\n;extension=tidy\n;extension=xsl\n;extension=zip\n\n;zend_extension=opcache\n\n;;;;;;;;;;;;;;;;;;;\n; Module Settings ;\n;;;;;;;;;;;;;;;;;;;\n\n[CLI Server]\n; Whether the CLI web server uses ANSI color coding in its terminal output.\ncli_server.color = On\n\n[Date]\n; Defines the default timezone used by the date functions\n; https://php.net/date.timezone\n;date.timezone =\n\n; https://php.net/date.default-latitude\n;date.default_latitude = 31.7667\n\n; https://php.net/date.default-longitude\n;date.default_longitude = 35.2333\n\n; https://php.net/date.sunrise-zenith\n;date.sunrise_zenith = 90.833333\n\n; https://php.net/date.sunset-zenith\n;date.sunset_zenith = 90.833333\n\n[filter]\n; https://php.net/filter.default\n;filter.default = unsafe_raw\n\n; https://php.net/filter.default-flags\n;filter.default_flags =\n\n[iconv]\n; Use of this INI entry is deprecated, use global input_encoding instead.\n; If empty, default_charset or input_encoding or iconv.input_encoding is used.\n; The precedence is: default_charset < input_encoding < iconv.input_encoding\n;iconv.input_encoding =\n\n; Use of this INI entry is deprecated, use global internal_encoding instead.\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\n;iconv.internal_encoding =\n\n; Use of this INI entry is deprecated, use global output_encoding instead.\n; If empty, default_charset or output_encoding or iconv.output_encoding is used.\n; The precedence is: default_charset < output_encoding < iconv.output_encoding\n; To use an output encoding conversion, iconv's output handler must be set\n; otherwise output encoding conversion cannot be performed.\n;iconv.output_encoding =\n\n[intl]\n;intl.default_locale =\n; This directive allows you to produce PHP errors when some error\n; happens within intl functions. The value is the level of the error produced.\n; Default is 0, which does not produce any errors.\n;intl.error_level = E_WARNING\n;intl.use_exceptions = 0\n\n[sqlite3]\n; Directory pointing to SQLite3 extensions\n; https://php.net/sqlite3.extension-dir\n;sqlite3.extension_dir =\n\n; SQLite defensive mode flag (only available from SQLite 3.26+)\n; When the defensive flag is enabled, language features that allow ordinary\n; SQL to deliberately corrupt the database file are disabled. This forbids\n; writing directly to the schema, shadow tables (eg. FTS data tables), or\n; the sqlite_dbpage virtual table.\n; https://www.sqlite.org/c3ref/c_dbconfig_defensive.html\n; (for older SQLite versions, this flag has no use)\n;sqlite3.defensive = 1\n\n[Pcre]\n; PCRE library backtracking limit.\n; https://php.net/pcre.backtrack-limit\n;pcre.backtrack_limit=100000\n\n; PCRE library recursion limit.\n; Please note that if you set this value to a high number you may consume all\n; the available process stack and eventually crash PHP (due to reaching the\n; stack size limit imposed by the Operating System).\n; https://php.net/pcre.recursion-limit\n;pcre.recursion_limit=100000\n\n; Enables or disables JIT compilation of patterns. This requires the PCRE\n; library to be compiled with JIT support.\n;pcre.jit=1\n\n[Pdo]\n; Whether to pool ODBC connections. Can be one of \"strict\", \"relaxed\" or \"off\"\n; https://php.net/pdo-odbc.connection-pooling\n;pdo_odbc.connection_pooling=strict\n\n[Pdo_mysql]\n; Default socket name for local MySQL connects.  If empty, uses the built-in\n; MySQL defaults.\npdo_mysql.default_socket=\n\n[Phar]\n; https://php.net/phar.readonly\n;phar.readonly = On\n\n; https://php.net/phar.require-hash\n;phar.require_hash = On\n\n;phar.cache_list =\n\n[mail function]\n; For Win32 only.\n; https://php.net/smtp\nSMTP = localhost\n; https://php.net/smtp-port\nsmtp_port = 25\n\n; For Win32 only.\n; https://php.net/sendmail-from\n;sendmail_from = me@example.com\n\n; For Unix only.  You may supply arguments as well (default: \"sendmail -t -i\").\n; https://php.net/sendmail-path\n;sendmail_path =\n\n; Force the addition of the specified parameters to be passed as extra parameters\n; to the sendmail binary. These parameters will always replace the value of\n; the 5th parameter to mail().\n;mail.force_extra_parameters =\n\n; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename\nmail.add_x_header = Off\n\n; Use mixed LF and CRLF line separators to keep compatibility with some\n; RFC 2822 non conformant MTA.\nmail.mixed_lf_and_crlf = Off\n\n; The path to a log file that will log all mail() calls. Log entries include\n; the full path of the script, line number, To address and headers.\n;mail.log =\n; Log mail to syslog (Event Log on Windows).\n;mail.log = syslog\n\n[ODBC]\n; https://php.net/odbc.default-db\n;odbc.default_db    =  Not yet implemented\n\n; https://php.net/odbc.default-user\n;odbc.default_user  =  Not yet implemented\n\n; https://php.net/odbc.default-pw\n;odbc.default_pw    =  Not yet implemented\n\n; Controls the ODBC cursor model.\n; Default: SQL_CURSOR_STATIC (default).\n;odbc.default_cursortype\n\n; Allow or prevent persistent links.\n; https://php.net/odbc.allow-persistent\nodbc.allow_persistent = On\n\n; Check that a connection is still valid before reuse.\n; https://php.net/odbc.check-persistent\nodbc.check_persistent = On\n\n; Maximum number of persistent links.  -1 means no limit.\n; https://php.net/odbc.max-persistent\nodbc.max_persistent = -1\n\n; Maximum number of links (persistent + non-persistent).  -1 means no limit.\n; https://php.net/odbc.max-links\nodbc.max_links = -1\n\n; Handling of LONG fields.  Returns number of bytes to variables.  0 means\n; passthru.\n; https://php.net/odbc.defaultlrl\nodbc.defaultlrl = 4096\n\n; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.\n; See the documentation on odbc_binmode and odbc_longreadlen for an explanation\n; of odbc.defaultlrl and odbc.defaultbinmode\n; https://php.net/odbc.defaultbinmode\nodbc.defaultbinmode = 1\n\n[MySQLi]\n\n; Maximum number of persistent links.  -1 means no limit.\n; https://php.net/mysqli.max-persistent\nmysqli.max_persistent = -1\n\n; Allow accessing, from PHP's perspective, local files with LOAD DATA statements\n; https://php.net/mysqli.allow_local_infile\n;mysqli.allow_local_infile = On\n\n; It allows the user to specify a folder where files that can be sent via LOAD DATA\n; LOCAL can exist. It is ignored if mysqli.allow_local_infile is enabled.\n;mysqli.local_infile_directory =\n\n; Allow or prevent persistent links.\n; https://php.net/mysqli.allow-persistent\nmysqli.allow_persistent = On\n\n; Maximum number of links.  -1 means no limit.\n; https://php.net/mysqli.max-links\nmysqli.max_links = -1\n\n; Default port number for mysqli_connect().\n; https://php.net/mysqli.default-port\nmysqli.default_port = 3306\n\n; Default socket name for local MySQL connects.  If empty, uses the built-in\n; MySQL defaults.\n; https://php.net/mysqli.default-socket\nmysqli.default_socket =\n\n; Default host for mysqli_connect().\n; https://php.net/mysqli.default-host\nmysqli.default_host =\n\n; Default user for mysqli_connect().\n; https://php.net/mysqli.default-user\nmysqli.default_user =\n\n; Default password for mysqli_connect().\n; Note that this is generally a *bad* idea to store passwords in this file.\n; *Any* user with PHP access can run 'echo get_cfg_var(\"mysqli.default_pw\")\n; and reveal this password!  And of course, any users with read access to this\n; file will be able to reveal the password as well.\n; https://php.net/mysqli.default-pw\nmysqli.default_pw =\n\n; If this option is enabled, closing a persistent connection will rollback\n; any pending transactions of this connection, before it is put back\n; into the persistent connection pool.\n;mysqli.rollback_on_cached_plink = Off\n\n[mysqlnd]\n; Enable / Disable collection of general statistics by mysqlnd which can be\n; used to tune and monitor MySQL operations.\nmysqlnd.collect_statistics = On\n\n; Enable / Disable collection of memory usage statistics by mysqlnd which can be\n; used to tune and monitor MySQL operations.\n; Default Value: Off\n; Development Value: On\n; Production Value: Off\nmysqlnd.collect_memory_statistics = On\n\n; Records communication from all extensions using mysqlnd to the specified log\n; file.\n; https://php.net/mysqlnd.debug\n;mysqlnd.debug =\n\n; Defines which queries will be logged.\n;mysqlnd.log_mask = 0\n\n; Default size of the mysqlnd memory pool, which is used by result sets.\n;mysqlnd.mempool_default_size = 16000\n\n; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.\n;mysqlnd.net_cmd_buffer_size = 2048\n\n; Size of a pre-allocated buffer used for reading data sent by the server in\n; bytes.\n;mysqlnd.net_read_buffer_size = 32768\n\n; Timeout for network requests in seconds.\n;mysqlnd.net_read_timeout = 31536000\n\n; SHA-256 Authentication Plugin related. File with the MySQL server public RSA\n; key.\n;mysqlnd.sha256_server_public_key =\n\n[PostgreSQL]\n; Allow or prevent persistent links.\n; https://php.net/pgsql.allow-persistent\npgsql.allow_persistent = On\n\n; Detect broken persistent links always with pg_pconnect().\n; Auto reset feature requires a little overheads.\n; https://php.net/pgsql.auto-reset-persistent\npgsql.auto_reset_persistent = Off\n\n; Maximum number of persistent links.  -1 means no limit.\n; https://php.net/pgsql.max-persistent\npgsql.max_persistent = -1\n\n; Maximum number of links (persistent+non persistent).  -1 means no limit.\n; https://php.net/pgsql.max-links\npgsql.max_links = -1\n\n; Ignore PostgreSQL backends Notice message or not.\n; Notice message logging require a little overheads.\n; https://php.net/pgsql.ignore-notice\npgsql.ignore_notice = 0\n\n; Log PostgreSQL backends Notice message or not.\n; Unless pgsql.ignore_notice=0, module cannot log notice message.\n; https://php.net/pgsql.log-notice\npgsql.log_notice = 0\n\n[bcmath]\n; Number of decimal digits for all bcmath functions.\n; https://php.net/bcmath.scale\nbcmath.scale = 0\n\n[browscap]\n; https://php.net/browscap\n;browscap = extra/browscap.ini\n\n[Session]\n; Handler used to store/retrieve data.\n; https://php.net/session.save-handler\nsession.save_handler = files\n\n; Argument passed to save_handler.  In the case of files, this is the path\n; where data files are stored. Note: Windows users have to change this\n; variable in order to use PHP's session functions.\n;\n; The path can be defined as:\n;\n;     session.save_path = \"N;/path\"\n;\n; where N is an integer.  Instead of storing all the session files in\n; /path, what this will do is use subdirectories N-levels deep, and\n; store the session data in those directories.  This is useful if\n; your OS has problems with many files in one directory, and is\n; a more efficient layout for servers that handle many sessions.\n;\n; NOTE 1: PHP will not create this directory structure automatically.\n;         You can use the script in the ext/session dir for that purpose.\n; NOTE 2: See the section on garbage collection below if you choose to\n;         use subdirectories for session storage\n;\n; The file storage module creates files using mode 600 by default.\n; You can change that by using\n;\n;     session.save_path = \"N;MODE;/path\"\n;\n; where MODE is the octal representation of the mode. Note that this\n; does not overwrite the process's umask.\n; https://php.net/session.save-path\n;session.save_path = \"/tmp\"\n\n; Whether to use strict session mode.\n; Strict session mode does not accept an uninitialized session ID, and\n; regenerates the session ID if the browser sends an uninitialized session ID.\n; Strict mode protects applications from session fixation via a session adoption\n; vulnerability. It is disabled by default for maximum compatibility, but\n; enabling it is encouraged.\n; https://wiki.php.net/rfc/strict_sessions\nsession.use_strict_mode = 0\n\n; Whether to use cookies.\n; https://php.net/session.use-cookies\nsession.use_cookies = 1\n\n; https://php.net/session.cookie-secure\n;session.cookie_secure =\n\n; This option forces PHP to fetch and use a cookie for storing and maintaining\n; the session id. We encourage this operation as it's very helpful in combating\n; session hijacking when not specifying and managing your own session id. It is\n; not the be-all and end-all of session hijacking defense, but it's a good start.\n; https://php.net/session.use-only-cookies\nsession.use_only_cookies = 1\n\n; Name of the session (used as cookie name).\n; https://php.net/session.name\nsession.name = PHPSESSID\n\n; Initialize session on request startup.\n; https://php.net/session.auto-start\nsession.auto_start = 0\n\n; Lifetime in seconds of cookie or, if 0, until browser is restarted.\n; https://php.net/session.cookie-lifetime\nsession.cookie_lifetime = 0\n\n; The path for which the cookie is valid.\n; https://php.net/session.cookie-path\nsession.cookie_path = /\n\n; The domain for which the cookie is valid.\n; https://php.net/session.cookie-domain\nsession.cookie_domain =\n\n; Whether or not to add the httpOnly flag to the cookie, which makes it\n; inaccessible to browser scripting languages such as JavaScript.\n; https://php.net/session.cookie-httponly\nsession.cookie_httponly =\n\n; Add SameSite attribute to cookie to help mitigate Cross-Site Request Forgery (CSRF/XSRF)\n; Current valid values are \"Strict\", \"Lax\" or \"None\". When using \"None\",\n; make sure to include the quotes, as `none` is interpreted like `false` in ini files.\n; https://tools.ietf.org/html/draft-west-first-party-cookies-07\nsession.cookie_samesite =\n\n; Handler used to serialize data. php is the standard serializer of PHP.\n; https://php.net/session.serialize-handler\nsession.serialize_handler = php\n\n; Defines the probability that the 'garbage collection' process is started on every\n; session initialization. The probability is calculated by using gc_probability/gc_divisor,\n; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.\n; Default Value: 1\n; Development Value: 1\n; Production Value: 1\n; https://php.net/session.gc-probability\nsession.gc_probability = 1\n\n; Defines the probability that the 'garbage collection' process is started on every\n; session initialization. The probability is calculated by using gc_probability/gc_divisor,\n; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.\n; For high volume production servers, using a value of 1000 is a more efficient approach.\n; Default Value: 100\n; Development Value: 1000\n; Production Value: 1000\n; https://php.net/session.gc-divisor\nsession.gc_divisor = 1000\n\n; After this number of seconds, stored data will be seen as 'garbage' and\n; cleaned up by the garbage collection process.\n; https://php.net/session.gc-maxlifetime\nsession.gc_maxlifetime = 1440\n\n; NOTE: If you are using the subdirectory option for storing session files\n;       (see session.save_path above), then garbage collection does *not*\n;       happen automatically.  You will need to do your own garbage\n;       collection through a shell script, cron entry, or some other method.\n;       For example, the following script is the equivalent of setting\n;       session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):\n;          find /path/to/sessions -cmin +24 -type f | xargs rm\n\n; Check HTTP Referer to invalidate externally stored URLs containing ids.\n; HTTP_REFERER has to contain this substring for the session to be\n; considered as valid.\n; https://php.net/session.referer-check\nsession.referer_check =\n\n; Set to {nocache,private,public,} to determine HTTP caching aspects\n; or leave this empty to avoid sending anti-caching headers.\n; https://php.net/session.cache-limiter\nsession.cache_limiter = nocache\n\n; Document expires after n minutes.\n; https://php.net/session.cache-expire\nsession.cache_expire = 180\n\n; trans sid support is disabled by default.\n; Use of trans sid may risk your users' security.\n; Use this option with caution.\n; - User may send URL contains active session ID\n;   to other person via. email/irc/etc.\n; - URL that contains active session ID may be stored\n;   in publicly accessible computer.\n; - User may access your site with the same session ID\n;   always using URL stored in browser's history or bookmarks.\n; https://php.net/session.use-trans-sid\nsession.use_trans_sid = 0\n\n; The URL rewriter will look for URLs in a defined set of HTML tags.\n; <form> is special; if you include them here, the rewriter will\n; add a hidden <input> field with the info which is otherwise appended\n; to URLs. <form> tag's action attribute URL will not be modified\n; unless it is specified.\n; Note that all valid entries require a \"=\", even if no value follows.\n; Default Value: \"a=href,area=href,frame=src,form=\"\n; Development Value: \"a=href,area=href,frame=src,form=\"\n; Production Value: \"a=href,area=href,frame=src,form=\"\n; https://php.net/url-rewriter.tags\nsession.trans_sid_tags = \"a=href,area=href,frame=src,form=\"\n\n; URL rewriter does not rewrite absolute URLs by default.\n; To enable rewrites for absolute paths, target hosts must be specified\n; at RUNTIME. i.e. use ini_set()\n; <form> tags is special. PHP will check action attribute's URL regardless\n; of session.trans_sid_tags setting.\n; If no host is defined, HTTP_HOST will be used for allowed host.\n; Example value: php.net,www.php.net,wiki.php.net\n; Use \",\" for multiple hosts. No spaces are allowed.\n; Default Value: \"\"\n; Development Value: \"\"\n; Production Value: \"\"\n;session.trans_sid_hosts=\"\"\n\n; Enable upload progress tracking in $_SESSION\n; Default Value: On\n; Development Value: On\n; Production Value: On\n; https://php.net/session.upload-progress.enabled\n;session.upload_progress.enabled = On\n\n; Cleanup the progress information as soon as all POST data has been read\n; (i.e. upload completed).\n; Default Value: On\n; Development Value: On\n; Production Value: On\n; https://php.net/session.upload-progress.cleanup\n;session.upload_progress.cleanup = On\n\n; A prefix used for the upload progress key in $_SESSION\n; Default Value: \"upload_progress_\"\n; Development Value: \"upload_progress_\"\n; Production Value: \"upload_progress_\"\n; https://php.net/session.upload-progress.prefix\n;session.upload_progress.prefix = \"upload_progress_\"\n\n; The index name (concatenated with the prefix) in $_SESSION\n; containing the upload progress information\n; Default Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n; Development Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n; Production Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n; https://php.net/session.upload-progress.name\n;session.upload_progress.name = \"PHP_SESSION_UPLOAD_PROGRESS\"\n\n; How frequently the upload progress should be updated.\n; Given either in percentages (per-file), or in bytes\n; Default Value: \"1%\"\n; Development Value: \"1%\"\n; Production Value: \"1%\"\n; https://php.net/session.upload-progress.freq\n;session.upload_progress.freq =  \"1%\"\n\n; The minimum delay between updates, in seconds\n; Default Value: 1\n; Development Value: 1\n; Production Value: 1\n; https://php.net/session.upload-progress.min-freq\n;session.upload_progress.min_freq = \"1\"\n\n; Only write session data when session data is changed. Enabled by default.\n; https://php.net/session.lazy-write\n;session.lazy_write = On\n\n[Assertion]\n; Switch whether to compile assertions at all (to have no overhead at run-time)\n; -1: Do not compile at all\n;  0: Jump over assertion at run-time\n;  1: Execute assertions\n; Changing from or to a negative value is only possible in php.ini!\n; (For turning assertions on and off at run-time, toggle zend.assertions between the values 1 and 0)\n; Default Value: 1\n; Development Value: 1\n; Production Value: -1\n; https://php.net/zend.assertions\nzend.assertions = 1\n\n[COM]\n; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs\n; https://php.net/com.typelib-file\n;com.typelib_file =\n\n; allow Distributed-COM calls\n; https://php.net/com.allow-dcom\n;com.allow_dcom = true\n\n; autoregister constants of a component's typelib on com_load()\n; https://php.net/com.autoregister-typelib\n;com.autoregister_typelib = true\n\n; register constants casesensitive\n; https://php.net/com.autoregister-casesensitive\n;com.autoregister_casesensitive = false\n\n; show warnings on duplicate constant registrations\n; https://php.net/com.autoregister-verbose\n;com.autoregister_verbose = true\n\n; The default character set code-page to use when passing strings to and from COM objects.\n; Default: system ANSI code page\n;com.code_page=\n\n; The version of the .NET framework to use. The value of the setting are the first three parts\n; of the framework's version number, separated by dots, and prefixed with \"v\", e.g. \"v4.0.30319\".\n;com.dotnet_version=\n\n[mbstring]\n; language for internal character representation.\n; This affects mb_send_mail() and mbstring.detect_order.\n; https://php.net/mbstring.language\n;mbstring.language = Japanese\n\n; Use of this INI entry is deprecated, use global internal_encoding instead.\n; internal/script encoding.\n; Some encoding cannot work as internal encoding. (e.g. SJIS, BIG5, ISO-2022-*)\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\n;mbstring.internal_encoding =\n\n; Use of this INI entry is deprecated, use global input_encoding instead.\n; http input encoding.\n; mbstring.encoding_translation = On is needed to use this setting.\n; If empty, default_charset or input_encoding or mbstring.input is used.\n; The precedence is: default_charset < input_encoding < mbstring.http_input\n; https://php.net/mbstring.http-input\n;mbstring.http_input =\n\n; Use of this INI entry is deprecated, use global output_encoding instead.\n; http output encoding.\n; mb_output_handler must be registered as output buffer to function.\n; If empty, default_charset or output_encoding or mbstring.http_output is used.\n; The precedence is: default_charset < output_encoding < mbstring.http_output\n; To use an output encoding conversion, mbstring's output handler must be set\n; otherwise output encoding conversion cannot be performed.\n; https://php.net/mbstring.http-output\n;mbstring.http_output =\n\n; enable automatic encoding translation according to\n; mbstring.internal_encoding setting. Input chars are\n; converted to internal encoding by setting this to On.\n; Note: Do _not_ use automatic encoding translation for\n;       portable libs/applications.\n; https://php.net/mbstring.encoding-translation\n;mbstring.encoding_translation = Off\n\n; automatic encoding detection order.\n; \"auto\" detect order is changed according to mbstring.language\n; https://php.net/mbstring.detect-order\n;mbstring.detect_order = auto\n\n; substitute_character used when character cannot be converted\n; one from another\n; https://php.net/mbstring.substitute-character\n;mbstring.substitute_character = none\n\n; Enable strict encoding detection.\n;mbstring.strict_detection = Off\n\n; This directive specifies the regex pattern of content types for which mb_output_handler()\n; is activated.\n; Default: mbstring.http_output_conv_mimetypes=^(text/|application/xhtml\\+xml)\n;mbstring.http_output_conv_mimetypes=\n\n; This directive specifies maximum stack depth for mbstring regular expressions. It is similar\n; to the pcre.recursion_limit for PCRE.\n;mbstring.regex_stack_limit=100000\n\n; This directive specifies maximum retry count for mbstring regular expressions. It is similar\n; to the pcre.backtrack_limit for PCRE.\n;mbstring.regex_retry_limit=1000000\n\n[gd]\n; Tell the jpeg decode to ignore warnings and try to create\n; a gd image. The warning will then be displayed as notices\n; disabled by default\n; https://php.net/gd.jpeg-ignore-warning\n;gd.jpeg_ignore_warning = 1\n\n[exif]\n; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.\n; With mbstring support this will automatically be converted into the encoding\n; given by corresponding encode setting. When empty mbstring.internal_encoding\n; is used. For the decode settings you can distinguish between motorola and\n; intel byte order. A decode setting must not be empty.\n; https://php.net/exif.encode-unicode\n;exif.encode_unicode = ISO-8859-15\n\n; https://php.net/exif.decode-unicode-motorola\n;exif.decode_unicode_motorola = UCS-2BE\n\n; https://php.net/exif.decode-unicode-intel\n;exif.decode_unicode_intel    = UCS-2LE\n\n; https://php.net/exif.encode-jis\n;exif.encode_jis =\n\n; https://php.net/exif.decode-jis-motorola\n;exif.decode_jis_motorola = JIS\n\n; https://php.net/exif.decode-jis-intel\n;exif.decode_jis_intel    = JIS\n\n[Tidy]\n; The path to a default tidy configuration file to use when using tidy\n; https://php.net/tidy.default-config\n;tidy.default_config = /usr/local/lib/php/default.tcfg\n\n; Should tidy clean and repair output automatically?\n; WARNING: Do not use this option if you are generating non-html content\n; such as dynamic images\n; https://php.net/tidy.clean-output\ntidy.clean_output = Off\n\n[soap]\n; Enables or disables WSDL caching feature.\n; https://php.net/soap.wsdl-cache-enabled\nsoap.wsdl_cache_enabled=1\n\n; Sets the directory name where SOAP extension will put cache files.\n; https://php.net/soap.wsdl-cache-dir\nsoap.wsdl_cache_dir=\"/tmp\"\n\n; (time to live) Sets the number of second while cached file will be used\n; instead of original one.\n; https://php.net/soap.wsdl-cache-ttl\nsoap.wsdl_cache_ttl=86400\n\n; Sets the size of the cache limit. (Max. number of WSDL files to cache)\nsoap.wsdl_cache_limit = 5\n\n[sysvshm]\n; A default size of the shared memory segment\n;sysvshm.init_mem = 10000\n\n[ldap]\n; Sets the maximum number of open links or -1 for unlimited.\nldap.max_links = -1\n\n[dba]\n;dba.default_handler=\n\n[opcache]\n; Determines if Zend OPCache is enabled\n;opcache.enable=1\n\n; Determines if Zend OPCache is enabled for the CLI version of PHP\n;opcache.enable_cli=0\n\n; The OPcache shared memory storage size.\n;opcache.memory_consumption=128\n\n; The amount of memory for interned strings in Mbytes.\n;opcache.interned_strings_buffer=8\n\n; The maximum number of keys (scripts) in the OPcache hash table.\n; Only numbers between 200 and 1000000 are allowed.\n;opcache.max_accelerated_files=10000\n\n; The maximum percentage of \"wasted\" memory until a restart is scheduled.\n;opcache.max_wasted_percentage=5\n\n; When this directive is enabled, the OPcache appends the current working\n; directory to the script key, thus eliminating possible collisions between\n; files with the same name (basename). Disabling the directive improves\n; performance, but may break existing applications.\n;opcache.use_cwd=1\n\n; When disabled, you must reset the OPcache manually or restart the\n; webserver for changes to the filesystem to take effect.\n;opcache.validate_timestamps=1\n\n; How often (in seconds) to check file timestamps for changes to the shared\n; memory storage allocation. (\"1\" means validate once per second, but only\n; once per request. \"0\" means always validate)\n;opcache.revalidate_freq=2\n\n; Enables or disables file search in include_path optimization\n;opcache.revalidate_path=0\n\n; If disabled, all PHPDoc comments are dropped from the code to reduce the\n; size of the optimized code.\n;opcache.save_comments=1\n\n; If enabled, compilation warnings (including notices and deprecations) will\n; be recorded and replayed each time a file is included. Otherwise, compilation\n; warnings will only be emitted when the file is first cached.\n;opcache.record_warnings=0\n\n; Allow file existence override (file_exists, etc.) performance feature.\n;opcache.enable_file_override=0\n\n; A bitmask, where each bit enables or disables the appropriate OPcache\n; passes\n;opcache.optimization_level=0x7FFFBFFF\n\n;opcache.dups_fix=0\n\n; The location of the OPcache blacklist file (wildcards allowed).\n; Each OPcache blacklist file is a text file that holds the names of files\n; that should not be accelerated. The file format is to add each filename\n; to a new line. The filename may be a full path or just a file prefix\n; (i.e., /var/www/x  blacklists all the files and directories in /var/www\n; that start with 'x'). Line starting with a ; are ignored (comments).\n;opcache.blacklist_filename=\n\n; Allows exclusion of large files from being cached. By default all files\n; are cached.\n;opcache.max_file_size=0\n\n; How long to wait (in seconds) for a scheduled restart to begin if the cache\n; is not being accessed.\n;opcache.force_restart_timeout=180\n\n; OPcache error_log file name. Empty string assumes \"stderr\".\n;opcache.error_log=\n\n; All OPcache errors go to the Web server log.\n; By default, only fatal errors (level 0) or errors (level 1) are logged.\n; You can also enable warnings (level 2), info messages (level 3) or\n; debug messages (level 4).\n;opcache.log_verbosity_level=1\n\n; Preferred Shared Memory back-end. Leave empty and let the system decide.\n;opcache.preferred_memory_model=\n\n; Protect the shared memory from unexpected writing during script execution.\n; Useful for internal debugging only.\n;opcache.protect_memory=0\n\n; Allows calling OPcache API functions only from PHP scripts which path is\n; started from specified string. The default \"\" means no restriction\n;opcache.restrict_api=\n\n; Mapping base of shared memory segments (for Windows only). All the PHP\n; processes have to map shared memory into the same address space. This\n; directive allows to manually fix the \"Unable to reattach to base address\"\n; errors.\n;opcache.mmap_base=\n\n; Facilitates multiple OPcache instances per user (for Windows only). All PHP\n; processes with the same cache ID and user share an OPcache instance.\n;opcache.cache_id=\n\n; Enables and sets the second level cache directory.\n; It should improve performance when SHM memory is full, at server restart or\n; SHM reset. The default \"\" disables file based caching.\n;opcache.file_cache=\n\n; Enables or disables read-only mode for the second level cache directory.\n; It should improve performance for read-only containers,\n; when the cache is pre-warmed and packaged alongside the application.\n; Best used with `opcache.validate_timestamps=0`, `opcache.enable_file_override=1`\n; and `opcache.file_cache_consistency_checks=0`.\n; Note: A cache generated with a different build of PHP, a different file path,\n; or different settings (including which extensions are loaded), may be ignored.\n;opcache.file_cache_read_only=0\n\n; Enables or disables opcode caching in shared memory.\n;opcache.file_cache_only=0\n\n; Enables or disables checksum validation when script loaded from file cache.\n;opcache.file_cache_consistency_checks=1\n\n; Implies opcache.file_cache_only=1 for a certain process that failed to\n; reattach to the shared memory (for Windows only). Explicitly enabled file\n; cache is required.\n;opcache.file_cache_fallback=1\n\n; Enables or disables copying of PHP code (text segment) into HUGE PAGES.\n; Under certain circumstances (if only a single global PHP process is\n; started from which all others fork), this can increase performance\n; by a tiny amount because TLB misses are reduced.  On the other hand, this\n; delays PHP startup, increases memory usage and degrades performance\n; under memory pressure - use with care.\n; Requires appropriate OS configuration.\n;opcache.huge_code_pages=0\n\n; Validate cached file permissions.\n;opcache.validate_permission=0\n\n; Prevent name collisions in chroot'ed environment.\n;opcache.validate_root=0\n\n; If specified, it produces opcode dumps for debugging different stages of\n; optimizations.\n;opcache.opt_debug_level=0\n\n; Specifies a PHP script that is going to be compiled and executed at server\n; start-up.\n; https://php.net/opcache.preload\n;opcache.preload=\n\n; Preloading code as root is not allowed for security reasons. This directive\n; facilitates to let the preloading to be run as another user.\n; https://php.net/opcache.preload_user\n;opcache.preload_user=\n\n; Prevents caching files that are less than this number of seconds old. It\n; protects from caching of incompletely updated files. In case all file updates\n; on your site are atomic, you may increase performance by setting it to \"0\".\n;opcache.file_update_protection=2\n\n; Absolute path used to store shared lockfiles (for *nix only).\n;opcache.lockfile_path=/tmp\n\n[curl]\n; A default value for the CURLOPT_CAINFO option. This is required to be an\n; absolute path.\n;curl.cainfo =\n\n[openssl]\n; The location of a Certificate Authority (CA) file on the local filesystem\n; to use when verifying the identity of SSL/TLS peers. Most users should\n; not specify a value for this directive as PHP will attempt to use the\n; OS-managed cert stores in its absence. If specified, this value may still\n; be overridden on a per-stream basis via the \"cafile\" SSL stream context\n; option.\n;openssl.cafile=\n\n; If openssl.cafile is not specified or if the CA file is not found, the\n; directory pointed to by openssl.capath is searched for a suitable\n; certificate. This value must be a correctly hashed certificate directory.\n; Most users should not specify a value for this directive as PHP will\n; attempt to use the OS-managed cert stores in its absence. If specified,\n; this value may still be overridden on a per-stream basis via the \"capath\"\n; SSL stream context option.\n;openssl.capath=\n\n[ffi]\n; FFI API restriction. Possible values:\n; \"preload\" - enabled in CLI scripts and preloaded files (default)\n; \"false\"   - always disabled\n; \"true\"    - always enabled\n;ffi.enable=preload\n\n; List of headers files to preload, wildcard patterns allowed.\n;ffi.preload=\n"
        },
        {
          "name": "php.ini-production",
          "type": "blob",
          "size": 67.79296875,
          "content": "[PHP]\n\n;;;;;;;;;;;;;;;;;;;\n; About php.ini   ;\n;;;;;;;;;;;;;;;;;;;\n; PHP's initialization file, generally called php.ini, is responsible for\n; configuring many of the aspects of PHP's behavior.\n\n; PHP attempts to find and load this configuration from a number of locations.\n; The following is a summary of its search order:\n; 1. SAPI module specific location.\n; 2. The PHPRC environment variable.\n; 3. A number of predefined registry keys on Windows\n; 4. Current working directory (except CLI)\n; 5. The web server's directory (for SAPI modules), or directory of PHP\n; (otherwise in Windows)\n; 6. The directory from the --with-config-file-path compile time option, or the\n; Windows directory (usually C:\\windows)\n; See the PHP docs for more specific information.\n; https://php.net/configuration.file\n\n; The syntax of the file is extremely simple.  Whitespace and lines\n; beginning with a semicolon are silently ignored (as you probably guessed).\n; Section headers (e.g. [Foo]) are also silently ignored, even though\n; they might mean something in the future.\n\n; Directives following the section heading [PATH=/www/mysite] only\n; apply to PHP files in the /www/mysite directory.  Directives\n; following the section heading [HOST=www.example.com] only apply to\n; PHP files served from www.example.com.  Directives set in these\n; special sections cannot be overridden by user-defined INI files or\n; at runtime. Currently, [PATH=] and [HOST=] sections only work under\n; CGI/FastCGI.\n; https://php.net/ini.sections\n\n; Directives are specified using the following syntax:\n; directive = value\n; Directive names are *case sensitive* - foo=bar is different from FOO=bar.\n; Directives are variables used to configure PHP or PHP extensions.\n; There is no name validation.  If PHP can't find an expected\n; directive because it is not set or is mistyped, a default value will be used.\n\n; The value can be a string, a number, a PHP constant (e.g. E_ALL or M_PI), one\n; of the INI constants (On, Off, True, False, Yes, No and None) or an expression\n; (e.g. E_ALL & ~E_NOTICE), a quoted string (\"bar\"), or a reference to a\n; previously set variable or directive (e.g. ${foo})\n\n; Expressions in the INI file are limited to bitwise operators and parentheses:\n; |  bitwise OR\n; ^  bitwise XOR\n; &  bitwise AND\n; ~  bitwise NOT\n; !  boolean NOT\n\n; Boolean flags can be turned on using the values 1, On, True or Yes.\n; They can be turned off using the values 0, Off, False or No.\n\n; An empty string can be denoted by simply not writing anything after the equal\n; sign, or by using the None keyword:\n\n; foo =         ; sets foo to an empty string\n; foo = None    ; sets foo to an empty string\n; foo = \"None\"  ; sets foo to the string 'None'\n\n; If you use constants in your value, and these constants belong to a\n; dynamically loaded extension (either a PHP extension or a Zend extension),\n; you may only use these constants *after* the line that loads the extension.\n\n;;;;;;;;;;;;;;;;;;;\n; About this file ;\n;;;;;;;;;;;;;;;;;;;\n; PHP comes packaged with two INI files. One that is recommended to be used\n; in production environments and one that is recommended to be used in\n; development environments.\n\n; php.ini-production contains settings which hold security, performance and\n; best practices at its core. But please be aware, these settings may break\n; compatibility with older or less security-conscious applications. We\n; recommending using the production ini in production and testing environments.\n\n; php.ini-development is very similar to its production variant, except it is\n; much more verbose when it comes to errors. We recommend using the\n; development version only in development environments, as errors shown to\n; application users can inadvertently leak otherwise secure information.\n\n; This is the php.ini-production INI file.\n\n;;;;;;;;;;;;;;;;;;;\n; Quick Reference ;\n;;;;;;;;;;;;;;;;;;;\n\n; The following are all the settings which are different in either the production\n; or development versions of the INIs with respect to PHP's default behavior.\n; Please see the actual settings later in the document for more details as to why\n; we recommend these changes in PHP's behavior.\n\n; display_errors\n;   Default Value: On\n;   Development Value: On\n;   Production Value: Off\n\n; display_startup_errors\n;   Default Value: On\n;   Development Value: On\n;   Production Value: Off\n\n; error_reporting\n;   Default Value: E_ALL\n;   Development Value: E_ALL\n;   Production Value: E_ALL & ~E_DEPRECATED\n\n; log_errors\n;   Default Value: Off\n;   Development Value: On\n;   Production Value: On\n\n; max_input_time\n;   Default Value: -1 (Unlimited)\n;   Development Value: 60 (60 seconds)\n;   Production Value: 60 (60 seconds)\n\n; mysqlnd.collect_memory_statistics\n;   Default Value: Off\n;   Development Value: On\n;   Production Value: Off\n\n; output_buffering\n;   Default Value: Off\n;   Development Value: 4096\n;   Production Value: 4096\n\n; register_argc_argv\n;   Default Value: On\n;   Development Value: Off\n;   Production Value: Off\n\n; request_order\n;   Default Value: None\n;   Development Value: \"GP\"\n;   Production Value: \"GP\"\n\n; session.gc_divisor\n;   Default Value: 100\n;   Development Value: 1000\n;   Production Value: 1000\n\n; short_open_tag\n;   Default Value: On\n;   Development Value: Off\n;   Production Value: Off\n\n; variables_order\n;   Default Value: \"EGPCS\"\n;   Development Value: \"GPCS\"\n;   Production Value: \"GPCS\"\n\n; zend.assertions\n;   Default Value: 1\n;   Development Value: 1\n;   Production Value: -1\n\n; zend.exception_ignore_args\n;   Default Value: Off\n;   Development Value: Off\n;   Production Value: On\n\n; zend.exception_string_param_max_len\n;   Default Value: 15\n;   Development Value: 15\n;   Production Value: 0\n\n;;;;;;;;;;;;;;;;;;;;\n; php.ini Options  ;\n;;;;;;;;;;;;;;;;;;;;\n; Name for user-defined php.ini (.htaccess) files. Default is \".user.ini\"\n;user_ini.filename = \".user.ini\"\n\n; To disable this feature set this option to an empty value\n;user_ini.filename =\n\n; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)\n;user_ini.cache_ttl = 300\n\n;;;;;;;;;;;;;;;;;;;;\n; Language Options ;\n;;;;;;;;;;;;;;;;;;;;\n\n; Enable the PHP scripting language engine under Apache.\n; https://php.net/engine\nengine = On\n\n; This directive determines whether or not PHP will recognize code between\n; <? and ?> tags as PHP source which should be processed as such. It is\n; generally recommended that <?php and ?> should be used and that this feature\n; should be disabled, as enabling it may result in issues when generating XML\n; documents, however this remains supported for backward compatibility reasons.\n; Note that this directive does not control the <?= shorthand tag, which can be\n; used regardless of this directive.\n; Default Value: On\n; Development Value: Off\n; Production Value: Off\n; https://php.net/short-open-tag\nshort_open_tag = Off\n\n; The number of significant digits displayed in floating point numbers.\n; https://php.net/precision\nprecision = 14\n\n; Output buffering is a mechanism for controlling how much output data\n; (excluding headers and cookies) PHP should keep internally before pushing that\n; data to the client. If your application's output exceeds this setting, PHP\n; will send that data in chunks of roughly the size you specify.\n; Turning on this setting and managing its maximum buffer size can yield some\n; interesting side-effects depending on your application and web server.\n; You may be able to send headers and cookies after you've already sent output\n; through print or echo. You also may see performance benefits if your server is\n; emitting less packets due to buffered output versus PHP streaming the output\n; as it gets it. On production servers, 4096 bytes is a good setting for performance\n; reasons.\n; Note: Output buffering can also be controlled via Output Buffering Control\n;   functions.\n; Possible Values:\n;   On = Enabled and buffer is unlimited. (Use with caution)\n;   Off = Disabled\n;   Integer = Enables the buffer and sets its maximum size in bytes.\n; Note: This directive is hardcoded to Off for the CLI SAPI\n; Default Value: Off\n; Development Value: 4096\n; Production Value: 4096\n; https://php.net/output-buffering\noutput_buffering = 4096\n\n; You can redirect all of the output of your scripts to a function.  For\n; example, if you set output_handler to \"mb_output_handler\", character\n; encoding will be transparently converted to the specified encoding.\n; Setting any output handler automatically turns on output buffering.\n; Note: People who wrote portable scripts should not depend on this ini\n;   directive. Instead, explicitly set the output handler using ob_start().\n;   Using this ini directive may cause problems unless you know what script\n;   is doing.\n; Note: You cannot use both \"mb_output_handler\" with \"ob_iconv_handler\"\n;   and you cannot use both \"ob_gzhandler\" and \"zlib.output_compression\".\n; Note: output_handler must be empty if this is set 'On' !!!!\n;   Instead you must use zlib.output_handler.\n; https://php.net/output-handler\n;output_handler =\n\n; URL rewriter function rewrites URL on the fly by using\n; output buffer. You can set target tags by this configuration.\n; \"form\" tag is special tag. It will add hidden input tag to pass values.\n; Refer to session.trans_sid_tags for usage.\n; Default Value: \"form=\"\n; Development Value: \"form=\"\n; Production Value: \"form=\"\n;url_rewriter.tags\n\n; URL rewriter will not rewrite absolute URL nor form by default. To enable\n; absolute URL rewrite, allowed hosts must be defined at RUNTIME.\n; Refer to session.trans_sid_hosts for more details.\n; Default Value: \"\"\n; Development Value: \"\"\n; Production Value: \"\"\n;url_rewriter.hosts\n\n; Transparent output compression using the zlib library\n; Valid values for this option are 'off', 'on', or a specific buffer size\n; to be used for compression (default is 4KB)\n; Note: Resulting chunk size may vary due to nature of compression. PHP\n;   outputs chunks that are few hundreds bytes each as a result of\n;   compression. If you prefer a larger chunk size for better\n;   performance, enable output_buffering in addition.\n; Note: You need to use zlib.output_handler instead of the standard\n;   output_handler, or otherwise the output will be corrupted.\n; https://php.net/zlib.output-compression\nzlib.output_compression = Off\n\n; https://php.net/zlib.output-compression-level\n;zlib.output_compression_level = -1\n\n; You cannot specify additional output handlers if zlib.output_compression\n; is activated here. This setting does the same as output_handler but in\n; a different order.\n; https://php.net/zlib.output-handler\n;zlib.output_handler =\n\n; Implicit flush tells PHP to tell the output layer to flush itself\n; automatically after every output block.  This is equivalent to calling the\n; PHP function flush() after each and every call to print() or echo() and each\n; and every HTML block.  Turning this option on has serious performance\n; implications and is generally recommended for debugging purposes only.\n; https://php.net/implicit-flush\n; Note: This directive is hardcoded to On for the CLI SAPI\nimplicit_flush = Off\n\n; The unserialize callback function will be called (with the undefined class'\n; name as parameter), if the unserializer finds an undefined class\n; which should be instantiated. A warning appears if the specified function is\n; not defined, or if the function doesn't include/implement the missing class.\n; So only set this entry, if you really want to implement such a\n; callback-function.\nunserialize_callback_func =\n\n; The unserialize_max_depth specifies the default depth limit for unserialized\n; structures. Setting the depth limit too high may result in stack overflows\n; during unserialization. The unserialize_max_depth ini setting can be\n; overridden by the max_depth option on individual unserialize() calls.\n; A value of 0 disables the depth limit.\n;unserialize_max_depth = 4096\n\n; When floats & doubles are serialized, store serialize_precision significant\n; digits after the floating point. The default value ensures that when floats\n; are decoded with unserialize, the data will remain the same.\n; The value is also used for json_encode when encoding double values.\n; If -1 is used, then dtoa mode 0 is used which automatically select the best\n; precision.\nserialize_precision = -1\n\n; open_basedir, if set, limits all file operations to the defined directory\n; and below.  This directive makes most sense if used in a per-directory\n; or per-virtualhost web server configuration file.\n; Note: disables the realpath cache\n; https://php.net/open-basedir\n;open_basedir =\n\n; This directive allows you to disable certain functions.\n; It receives a comma-delimited list of function names.\n; https://php.net/disable-functions\ndisable_functions =\n\n; This directive allows you to disable certain classes.\n; It receives a comma-delimited list of class names.\n; https://php.net/disable-classes\ndisable_classes =\n\n; Colors for Syntax Highlighting mode.  Anything that's acceptable in\n; <span style=\"color: ???????\"> would work.\n; https://php.net/syntax-highlighting\n;highlight.string  = #DD0000\n;highlight.comment = #FF9900\n;highlight.keyword = #007700\n;highlight.default = #0000BB\n;highlight.html    = #000000\n\n; If enabled, the request will be allowed to complete even if the user aborts\n; the request. Consider enabling it if executing long requests, which may end up\n; being interrupted by the user or a browser timing out. PHP's default behavior\n; is to disable this feature.\n; https://php.net/ignore-user-abort\n;ignore_user_abort = On\n\n; Determines the size of the realpath cache to be used by PHP. This value should\n; be increased on systems where PHP opens many files to reflect the quantity of\n; the file operations performed.\n; Note: if open_basedir is set, the cache is disabled\n; https://php.net/realpath-cache-size\n;realpath_cache_size = 4096k\n\n; Duration of time, in seconds for which to cache realpath information for a given\n; file or directory. For systems with rarely changing files, consider increasing this\n; value.\n; https://php.net/realpath-cache-ttl\n;realpath_cache_ttl = 120\n\n; Enables or disables the circular reference collector.\n; https://php.net/zend.enable-gc\nzend.enable_gc = On\n\n; If enabled, scripts may be written in encodings that are incompatible with\n; the scanner.  CP936, Big5, CP949 and Shift_JIS are the examples of such\n; encodings.  To use this feature, mbstring extension must be enabled.\n;zend.multibyte = Off\n\n; Allows to set the default encoding for the scripts.  This value will be used\n; unless \"declare(encoding=...)\" directive appears at the top of the script.\n; Only affects if zend.multibyte is set.\n;zend.script_encoding =\n\n; Allows to include or exclude arguments from stack traces generated for exceptions.\n; In production, it is recommended to turn this setting on to prohibit the output\n; of sensitive information in stack traces\n; Default Value: Off\n; Development Value: Off\n; Production Value: On\nzend.exception_ignore_args = On\n\n; Allows setting the maximum string length in an argument of a stringified stack trace\n; to a value between 0 and 1000000.\n; This has no effect when zend.exception_ignore_args is enabled.\n; Default Value: 15\n; Development Value: 15\n; Production Value: 0\n; In production, it is recommended to set this to 0 to reduce the output\n; of sensitive information in stack traces.\nzend.exception_string_param_max_len = 0\n\n;;;;;;;;;;;;;;;;;\n; Miscellaneous ;\n;;;;;;;;;;;;;;;;;\n\n; Decides whether PHP may expose the fact that it is installed on the server\n; (e.g. by adding its signature to the Web server header).  It is no security\n; threat in any way, but it makes it possible to determine whether you use PHP\n; on your server or not.\n; https://php.net/expose-php\nexpose_php = On\n\n;;;;;;;;;;;;;;;;;;;\n; Resource Limits ;\n;;;;;;;;;;;;;;;;;;;\n\n; Maximum execution time of each script, in seconds\n; https://php.net/max-execution-time\n; Note: This directive is hardcoded to 0 for the CLI SAPI\nmax_execution_time = 30\n\n; Maximum amount of time each script may spend parsing request data. It's a good\n; idea to limit this time on productions servers in order to eliminate unexpectedly\n; long running scripts.\n; Note: This directive is hardcoded to -1 for the CLI SAPI\n; Default Value: -1 (Unlimited)\n; Development Value: 60 (60 seconds)\n; Production Value: 60 (60 seconds)\n; https://php.net/max-input-time\nmax_input_time = 60\n\n; Maximum input variable nesting level\n; https://php.net/max-input-nesting-level\n;max_input_nesting_level = 64\n\n; How many GET/POST/COOKIE input variables may be accepted\n;max_input_vars = 1000\n\n; How many multipart body parts (combined input variable and file uploads) may\n; be accepted.\n; Default Value: -1 (Sum of max_input_vars and max_file_uploads)\n;max_multipart_body_parts = 1500\n\n; Maximum amount of memory a script may consume\n; https://php.net/memory-limit\nmemory_limit = 128M\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; Error handling and logging ;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; This directive informs PHP of which errors, warnings and notices you would like\n; it to take action for. The recommended way of setting values for this\n; directive is through the use of the error level constants and bitwise\n; operators. The error level constants are below here for convenience as well as\n; some common settings and their meanings.\n; By default, PHP is set to take action on all errors, notices and warnings EXCEPT\n; those related to E_NOTICE, which together cover best practices and\n; recommended coding standards in PHP. For performance reasons, this is the\n; recommend error reporting setting. Your production server shouldn't be wasting\n; resources complaining about best practices and coding standards. That's what\n; development servers and development settings are for.\n; Note: The php.ini-development file has this setting as E_ALL. This\n; means it pretty much reports everything which is exactly what you want during\n; development and early testing.\n;\n; Error Level Constants:\n; E_ALL             - All errors and warnings\n; E_ERROR           - fatal run-time errors\n; E_RECOVERABLE_ERROR  - almost fatal run-time errors\n; E_WARNING         - run-time warnings (non-fatal errors)\n; E_PARSE           - compile-time parse errors\n; E_NOTICE          - run-time notices (these are warnings which often result\n;                     from a bug in your code, but it's possible that it was\n;                     intentional (e.g., using an uninitialized variable and\n;                     relying on the fact it is automatically initialized to an\n;                     empty string)\n; E_CORE_ERROR      - fatal errors that occur during PHP's initial startup\n; E_CORE_WARNING    - warnings (non-fatal errors) that occur during PHP's\n;                     initial startup\n; E_COMPILE_ERROR   - fatal compile-time errors\n; E_COMPILE_WARNING - compile-time warnings (non-fatal errors)\n; E_USER_ERROR      - user-generated error message\n; E_USER_WARNING    - user-generated warning message\n; E_USER_NOTICE     - user-generated notice message\n; E_DEPRECATED      - warn about code that will not work in future versions\n;                     of PHP\n; E_USER_DEPRECATED - user-generated deprecation warnings\n;\n; Common Values:\n;   E_ALL (Show all errors, warnings and notices including coding standards.)\n;   E_ALL & ~E_NOTICE  (Show all errors, except for notices)\n;   E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR  (Show only errors)\n; Default Value: E_ALL\n; Development Value: E_ALL\n; Production Value: E_ALL & ~E_DEPRECATED\n; https://php.net/error-reporting\nerror_reporting = E_ALL & ~E_DEPRECATED\n\n; This directive controls whether or not and where PHP will output errors,\n; notices and warnings too. Error output is very useful during development, but\n; it could be very dangerous in production environments. Depending on the code\n; which is triggering the error, sensitive information could potentially leak\n; out of your application such as database usernames and passwords or worse.\n; For production environments, we recommend logging errors rather than\n; sending them to STDOUT.\n; Possible Values:\n;   Off = Do not display any errors\n;   stderr = Display errors to STDERR (affects only CGI/CLI binaries!)\n;   On or stdout = Display errors to STDOUT\n; Default Value: On\n; Development Value: On\n; Production Value: Off\n; https://php.net/display-errors\ndisplay_errors = Off\n\n; The display of errors which occur during PHP's startup sequence are handled\n; separately from display_errors. We strongly recommend you set this to 'off'\n; for production servers to avoid leaking configuration details.\n; Default Value: On\n; Development Value: On\n; Production Value: Off\n; https://php.net/display-startup-errors\ndisplay_startup_errors = Off\n\n; Besides displaying errors, PHP can also log errors to locations such as a\n; server-specific log, STDERR, or a location specified by the error_log\n; directive found below. While errors should not be displayed on productions\n; servers they should still be monitored and logging is a great way to do that.\n; Default Value: Off\n; Development Value: On\n; Production Value: On\n; https://php.net/log-errors\nlog_errors = On\n\n; Do not log repeated messages. Repeated errors must occur in same file on same\n; line unless ignore_repeated_source is set true.\n; https://php.net/ignore-repeated-errors\nignore_repeated_errors = Off\n\n; Ignore source of message when ignoring repeated messages. When this setting\n; is On you will not log errors with repeated messages from different files or\n; source lines.\n; https://php.net/ignore-repeated-source\nignore_repeated_source = Off\n\n; If this parameter is set to Off, then memory leaks will not be shown (on\n; stdout or in the log). This is only effective in a debug compile, and if\n; error reporting includes E_WARNING in the allowed list\n; https://php.net/report-memleaks\nreport_memleaks = On\n\n; This setting is off by default.\n;report_zend_debug = 0\n\n; Turn off normal error reporting and emit XML-RPC error XML\n; https://php.net/xmlrpc-errors\n;xmlrpc_errors = 0\n\n; An XML-RPC faultCode\n;xmlrpc_error_number = 0\n\n; When PHP displays or logs an error, it has the capability of formatting the\n; error message as HTML for easier reading. This directive controls whether\n; the error message is formatted as HTML or not.\n; Note: This directive is hardcoded to Off for the CLI SAPI\n; https://php.net/html-errors\n;html_errors = On\n\n; If html_errors is set to On *and* docref_root is not empty, then PHP\n; produces clickable error messages that direct to a page describing the error\n; or function causing the error in detail.\n; You can download a copy of the PHP manual from https://php.net/docs\n; and change docref_root to the base URL of your local copy including the\n; leading '/'. You must also specify the file extension being used including\n; the dot. PHP's default behavior is to leave these settings empty, in which\n; case no links to documentation are generated.\n; Note: Never use this feature for production boxes.\n; https://php.net/docref-root\n; Examples\n;docref_root = \"/phpmanual/\"\n\n; https://php.net/docref-ext\n;docref_ext = .html\n\n; String to output before an error message. PHP's default behavior is to leave\n; this setting blank.\n; https://php.net/error-prepend-string\n; Example:\n;error_prepend_string = \"<span style='color: #ff0000'>\"\n\n; String to output after an error message. PHP's default behavior is to leave\n; this setting blank.\n; https://php.net/error-append-string\n; Example:\n;error_append_string = \"</span>\"\n\n; Log errors to specified file. PHP's default behavior is to leave this value\n; empty.\n; https://php.net/error-log\n; Example:\n;error_log = php_errors.log\n; Log errors to syslog (Event Log on Windows).\n;error_log = syslog\n\n; The syslog ident is a string which is prepended to every message logged\n; to syslog. Only used when error_log is set to syslog.\n;syslog.ident = php\n\n; The syslog facility is used to specify what type of program is logging\n; the message. Only used when error_log is set to syslog.\n;syslog.facility = user\n\n; Set this to disable filtering control characters (the default).\n; Some loggers only accept NVT-ASCII, others accept anything that's not\n; control characters. If your logger accepts everything, then no filtering\n; is needed at all.\n; Allowed values are:\n;   ascii (all printable ASCII characters and NL)\n;   no-ctrl (all characters except control characters)\n;   all (all characters)\n;   raw (like \"all\", but messages are not split at newlines)\n; https://php.net/syslog.filter\n;syslog.filter = ascii\n\n;windows.show_crt_warning\n; Default value: 0\n; Development value: 0\n; Production value: 0\n\n;;;;;;;;;;;;;;;;;\n; Data Handling ;\n;;;;;;;;;;;;;;;;;\n\n; The separator used in PHP generated URLs to separate arguments.\n; PHP's default setting is \"&\".\n; https://php.net/arg-separator.output\n; Example:\n;arg_separator.output = \"&amp;\"\n\n; List of separator(s) used by PHP to parse input URLs into variables.\n; PHP's default setting is \"&\".\n; NOTE: Every character in this directive is considered as separator!\n; https://php.net/arg-separator.input\n; Example:\n;arg_separator.input = \";&\"\n\n; This directive determines which super global arrays are registered when PHP\n; starts up. G,P,C,E & S are abbreviations for the following respective super\n; globals: GET, POST, COOKIE, ENV and SERVER. There is a performance penalty\n; paid for the registration of these arrays and because ENV is not as commonly\n; used as the others, ENV is not recommended on productions servers. You\n; can still get access to the environment variables through getenv() should you\n; need to.\n; Default Value: \"EGPCS\"\n; Development Value: \"GPCS\"\n; Production Value: \"GPCS\";\n; https://php.net/variables-order\nvariables_order = \"GPCS\"\n\n; This directive determines which super global data (G,P & C) should be\n; registered into the super global array REQUEST. If so, it also determines\n; the order in which that data is registered. The values for this directive\n; are specified in the same manner as the variables_order directive,\n; EXCEPT one. Leaving this value empty will cause PHP to use the value set\n; in the variables_order directive. It does not mean it will leave the super\n; globals array REQUEST empty.\n; Default Value: None\n; Development Value: \"GP\"\n; Production Value: \"GP\"\n; https://php.net/request-order\nrequest_order = \"GP\"\n\n; This directive determines whether PHP registers $argv & $argc each time it\n; runs. $argv contains an array of all the arguments passed to PHP when a script\n; is invoked. $argc contains an integer representing the number of arguments\n; that were passed when the script was invoked. These arrays are extremely\n; useful when running scripts from the command line. When this directive is\n; enabled, registering these variables consumes CPU cycles and memory each time\n; a script is executed. For performance reasons, this feature should be disabled\n; on production servers.\n; Note: This directive is hardcoded to On for the CLI SAPI\n; Default Value: On\n; Development Value: Off\n; Production Value: Off\n; https://php.net/register-argc-argv\nregister_argc_argv = Off\n\n; When enabled, the ENV, REQUEST and SERVER variables are created when they're\n; first used (Just In Time) instead of when the script starts. If these\n; variables are not used within a script, having this directive on will result\n; in a performance gain. The PHP directive register_argc_argv must be disabled\n; for this directive to have any effect.\n; https://php.net/auto-globals-jit\nauto_globals_jit = On\n\n; Whether PHP will read the POST data.\n; This option is enabled by default.\n; Most likely, you won't want to disable this option globally. It causes $_POST\n; and $_FILES to always be empty; the only way you will be able to read the\n; POST data will be through the php://input stream wrapper. This can be useful\n; to proxy requests or to process the POST data in a memory efficient fashion.\n; https://php.net/enable-post-data-reading\n;enable_post_data_reading = Off\n\n; Maximum size of POST data that PHP will accept.\n; Its value may be 0 to disable the limit. It is ignored if POST data reading\n; is disabled through enable_post_data_reading.\n; https://php.net/post-max-size\npost_max_size = 8M\n\n; Automatically add files before PHP document.\n; https://php.net/auto-prepend-file\nauto_prepend_file =\n\n; Automatically add files after PHP document.\n; https://php.net/auto-append-file\nauto_append_file =\n\n; By default, PHP will output a media type using the Content-Type header. To\n; disable this, simply set it to be empty.\n;\n; PHP's built-in default media type is set to text/html.\n; https://php.net/default-mimetype\ndefault_mimetype = \"text/html\"\n\n; PHP's default character set is set to UTF-8.\n; https://php.net/default-charset\ndefault_charset = \"UTF-8\"\n\n; PHP internal character encoding is set to empty.\n; If empty, default_charset is used.\n; https://php.net/internal-encoding\n;internal_encoding =\n\n; PHP input character encoding is set to empty.\n; If empty, default_charset is used.\n; https://php.net/input-encoding\n;input_encoding =\n\n; PHP output character encoding is set to empty.\n; If empty, default_charset is used.\n; See also output_buffer.\n; https://php.net/output-encoding\n;output_encoding =\n\n;;;;;;;;;;;;;;;;;;;;;;;;;\n; Paths and Directories ;\n;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; UNIX: \"/path1:/path2\"\n;include_path = \".:/php/includes\"\n;\n; Windows: \"\\path1;\\path2\"\n;include_path = \".;c:\\php\\includes\"\n;\n; PHP's default setting for include_path is \".;/path/to/php/pear\"\n; https://php.net/include-path\n\n; The root of the PHP pages, used only if nonempty.\n; if PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root\n; if you are running php as a CGI under any web server (other than IIS)\n; see documentation for security issues.  The alternate is to use the\n; cgi.force_redirect configuration below\n; https://php.net/doc-root\ndoc_root =\n\n; The directory under which PHP opens the script using /~username used only\n; if nonempty.\n; https://php.net/user-dir\nuser_dir =\n\n; Directory in which the loadable extensions (modules) reside.\n; https://php.net/extension-dir\n;extension_dir = \"./\"\n; On windows:\n;extension_dir = \"ext\"\n\n; Directory where the temporary files should be placed.\n; Defaults to the system default (see sys_get_temp_dir)\n;sys_temp_dir = \"/tmp\"\n\n; Whether or not to enable the dl() function.  The dl() function does NOT work\n; properly in multithreaded servers, such as IIS or Zeus, and is automatically\n; disabled on them.\n; https://php.net/enable-dl\nenable_dl = Off\n\n; cgi.force_redirect is necessary to provide security running PHP as a CGI under\n; most web servers.  Left undefined, PHP turns this on by default.  You can\n; turn it off here AT YOUR OWN RISK\n; **You CAN safely turn this off for IIS, in fact, you MUST.**\n; https://php.net/cgi.force-redirect\n;cgi.force_redirect = 1\n\n; if cgi.nph is enabled it will force cgi to always sent Status: 200 with\n; every request. PHP's default behavior is to disable this feature.\n;cgi.nph = 1\n\n; if cgi.force_redirect is turned on, and you are not running under Apache or Netscape\n; (iPlanet) web servers, you MAY need to set an environment variable name that PHP\n; will look for to know it is OK to continue execution.  Setting this variable MAY\n; cause security issues, KNOW WHAT YOU ARE DOING FIRST.\n; https://php.net/cgi.redirect-status-env\n;cgi.redirect_status_env =\n\n; cgi.fix_pathinfo provides *real* PATH_INFO/PATH_TRANSLATED support for CGI.  PHP's\n; previous behaviour was to set PATH_TRANSLATED to SCRIPT_FILENAME, and to not grok\n; what PATH_INFO is.  For more information on PATH_INFO, see the cgi specs.  Setting\n; this to 1 will cause PHP CGI to fix its paths to conform to the spec.  A setting\n; of zero causes PHP to behave as before.  Default is 1.  You should fix your scripts\n; to use SCRIPT_FILENAME rather than PATH_TRANSLATED.\n; https://php.net/cgi.fix-pathinfo\n;cgi.fix_pathinfo=1\n\n; if cgi.discard_path is enabled, the PHP CGI binary can safely be placed outside\n; of the web tree and people will not be able to circumvent .htaccess security.\n;cgi.discard_path=1\n\n; FastCGI under IIS supports the ability to impersonate\n; security tokens of the calling client.  This allows IIS to define the\n; security context that the request runs under.  mod_fastcgi under Apache\n; does not currently support this feature (03/17/2002)\n; Set to 1 if running under IIS.  Default is zero.\n; https://php.net/fastcgi.impersonate\n;fastcgi.impersonate = 1\n\n; Disable logging through FastCGI connection. PHP's default behavior is to enable\n; this feature.\n;fastcgi.logging = 0\n\n; cgi.rfc2616_headers configuration option tells PHP what type of headers to\n; use when sending HTTP response code. If set to 0, PHP sends Status: header that\n; is supported by Apache. When this option is set to 1, PHP will send\n; RFC2616 compliant header.\n; Default is zero.\n; https://php.net/cgi.rfc2616-headers\n;cgi.rfc2616_headers = 0\n\n; cgi.check_shebang_line controls whether CGI PHP checks for line starting with #!\n; (shebang) at the top of the running script. This line might be needed if the\n; script support running both as stand-alone script and via PHP CGI<. PHP in CGI\n; mode skips this line and ignores its content if this directive is turned on.\n; https://php.net/cgi.check-shebang-line\n;cgi.check_shebang_line=1\n\n;;;;;;;;;;;;;;;;\n; File Uploads ;\n;;;;;;;;;;;;;;;;\n\n; Whether to allow HTTP file uploads.\n; https://php.net/file-uploads\nfile_uploads = On\n\n; Temporary directory for HTTP uploaded files (will use system default if not\n; specified).\n; https://php.net/upload-tmp-dir\n;upload_tmp_dir =\n\n; Maximum allowed size for uploaded files.\n; https://php.net/upload-max-filesize\nupload_max_filesize = 2M\n\n; Maximum number of files that can be uploaded via a single request\nmax_file_uploads = 20\n\n;;;;;;;;;;;;;;;;;;\n; Fopen wrappers ;\n;;;;;;;;;;;;;;;;;;\n\n; Whether to allow the treatment of URLs (like http:// or ftp://) as files.\n; https://php.net/allow-url-fopen\nallow_url_fopen = On\n\n; Whether to allow include/require to open URLs (like https:// or ftp://) as files.\n; https://php.net/allow-url-include\nallow_url_include = Off\n\n; Define the anonymous ftp password (your email address). PHP's default setting\n; for this is empty.\n; https://php.net/from\n;from=\"john@doe.com\"\n\n; Define the User-Agent string. PHP's default setting for this is empty.\n; https://php.net/user-agent\n;user_agent=\"PHP\"\n\n; Default timeout for socket based streams (seconds)\n; https://php.net/default-socket-timeout\ndefault_socket_timeout = 60\n\n; If your scripts have to deal with files from Macintosh systems,\n; or you are running on a Mac and need to deal with files from\n; unix or win32 systems, setting this flag will cause PHP to\n; automatically detect the EOL character in those files so that\n; fgets() and file() will work regardless of the source of the file.\n; https://php.net/auto-detect-line-endings\n;auto_detect_line_endings = Off\n\n;;;;;;;;;;;;;;;;;;;;;;\n; Dynamic Extensions ;\n;;;;;;;;;;;;;;;;;;;;;;\n\n; If you wish to have an extension loaded automatically, use the following\n; syntax:\n;\n;   extension=modulename\n;\n; For example:\n;\n;   extension=mysqli\n;\n; When the extension library to load is not located in the default extension\n; directory, You may specify an absolute path to the library file:\n;\n;   extension=/path/to/extension/mysqli.so\n;\n; Note : The syntax used in previous PHP versions ('extension=<ext>.so' and\n; 'extension='php_<ext>.dll') is supported for legacy reasons and may be\n; deprecated in a future PHP major version. So, when it is possible, please\n; move to the new ('extension=<ext>) syntax.\n;\n; Notes for Windows environments :\n;\n; - Many DLL files are located in the ext/\n;   extension folders as well as the separate PECL DLL download.\n;   Be sure to appropriately set the extension_dir directive.\n;\n;extension=bz2\n;extension=curl\n;extension=exif\n;extension=ffi\n;extension=ftp\n;extension=fileinfo\n;extension=gd\n;extension=gettext\n;extension=gmp\n;extension=intl\n;extension=ldap\n;extension=mbstring\n;extension=mysqli\n;extension=odbc\n;extension=openssl\n;extension=pdo_firebird\n;extension=pdo_mysql\n;extension=pdo_odbc\n;extension=pdo_pgsql\n;extension=pdo_sqlite\n;extension=pgsql\n;extension=shmop\n\n; The MIBS data available in the PHP distribution must be installed.\n; See https://www.php.net/manual/en/snmp.installation.php\n;extension=snmp\n\n;extension=soap\n;extension=sockets\n;extension=sodium\n;extension=sqlite3\n;extension=tidy\n;extension=xsl\n;extension=zip\n\n;zend_extension=opcache\n\n;;;;;;;;;;;;;;;;;;;\n; Module Settings ;\n;;;;;;;;;;;;;;;;;;;\n\n[CLI Server]\n; Whether the CLI web server uses ANSI color coding in its terminal output.\ncli_server.color = On\n\n[Date]\n; Defines the default timezone used by the date functions\n; https://php.net/date.timezone\n;date.timezone =\n\n; https://php.net/date.default-latitude\n;date.default_latitude = 31.7667\n\n; https://php.net/date.default-longitude\n;date.default_longitude = 35.2333\n\n; https://php.net/date.sunrise-zenith\n;date.sunrise_zenith = 90.833333\n\n; https://php.net/date.sunset-zenith\n;date.sunset_zenith = 90.833333\n\n[filter]\n; https://php.net/filter.default\n;filter.default = unsafe_raw\n\n; https://php.net/filter.default-flags\n;filter.default_flags =\n\n[iconv]\n; Use of this INI entry is deprecated, use global input_encoding instead.\n; If empty, default_charset or input_encoding or iconv.input_encoding is used.\n; The precedence is: default_charset < input_encoding < iconv.input_encoding\n;iconv.input_encoding =\n\n; Use of this INI entry is deprecated, use global internal_encoding instead.\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\n;iconv.internal_encoding =\n\n; Use of this INI entry is deprecated, use global output_encoding instead.\n; If empty, default_charset or output_encoding or iconv.output_encoding is used.\n; The precedence is: default_charset < output_encoding < iconv.output_encoding\n; To use an output encoding conversion, iconv's output handler must be set\n; otherwise output encoding conversion cannot be performed.\n;iconv.output_encoding =\n\n[intl]\n;intl.default_locale =\n; This directive allows you to produce PHP errors when some error\n; happens within intl functions. The value is the level of the error produced.\n; Default is 0, which does not produce any errors.\n;intl.error_level = E_WARNING\n;intl.use_exceptions = 0\n\n[sqlite3]\n; Directory pointing to SQLite3 extensions\n; https://php.net/sqlite3.extension-dir\n;sqlite3.extension_dir =\n\n; SQLite defensive mode flag (only available from SQLite 3.26+)\n; When the defensive flag is enabled, language features that allow ordinary\n; SQL to deliberately corrupt the database file are disabled. This forbids\n; writing directly to the schema, shadow tables (eg. FTS data tables), or\n; the sqlite_dbpage virtual table.\n; https://www.sqlite.org/c3ref/c_dbconfig_defensive.html\n; (for older SQLite versions, this flag has no use)\n;sqlite3.defensive = 1\n\n[Pcre]\n; PCRE library backtracking limit.\n; https://php.net/pcre.backtrack-limit\n;pcre.backtrack_limit=100000\n\n; PCRE library recursion limit.\n; Please note that if you set this value to a high number you may consume all\n; the available process stack and eventually crash PHP (due to reaching the\n; stack size limit imposed by the Operating System).\n; https://php.net/pcre.recursion-limit\n;pcre.recursion_limit=100000\n\n; Enables or disables JIT compilation of patterns. This requires the PCRE\n; library to be compiled with JIT support.\n;pcre.jit=1\n\n[Pdo]\n; Whether to pool ODBC connections. Can be one of \"strict\", \"relaxed\" or \"off\"\n; https://php.net/pdo-odbc.connection-pooling\n;pdo_odbc.connection_pooling=strict\n\n[Pdo_mysql]\n; Default socket name for local MySQL connects.  If empty, uses the built-in\n; MySQL defaults.\npdo_mysql.default_socket=\n\n[Phar]\n; https://php.net/phar.readonly\n;phar.readonly = On\n\n; https://php.net/phar.require-hash\n;phar.require_hash = On\n\n;phar.cache_list =\n\n[mail function]\n; For Win32 only.\n; https://php.net/smtp\nSMTP = localhost\n; https://php.net/smtp-port\nsmtp_port = 25\n\n; For Win32 only.\n; https://php.net/sendmail-from\n;sendmail_from = me@example.com\n\n; For Unix only.  You may supply arguments as well (default: \"sendmail -t -i\").\n; https://php.net/sendmail-path\n;sendmail_path =\n\n; Force the addition of the specified parameters to be passed as extra parameters\n; to the sendmail binary. These parameters will always replace the value of\n; the 5th parameter to mail().\n;mail.force_extra_parameters =\n\n; Add X-PHP-Originating-Script: that will include uid of the script followed by the filename\nmail.add_x_header = Off\n\n; Use mixed LF and CRLF line separators to keep compatibility with some\n; RFC 2822 non conformant MTA.\nmail.mixed_lf_and_crlf = Off\n\n; The path to a log file that will log all mail() calls. Log entries include\n; the full path of the script, line number, To address and headers.\n;mail.log =\n; Log mail to syslog (Event Log on Windows).\n;mail.log = syslog\n\n[ODBC]\n; https://php.net/odbc.default-db\n;odbc.default_db    =  Not yet implemented\n\n; https://php.net/odbc.default-user\n;odbc.default_user  =  Not yet implemented\n\n; https://php.net/odbc.default-pw\n;odbc.default_pw    =  Not yet implemented\n\n; Controls the ODBC cursor model.\n; Default: SQL_CURSOR_STATIC (default).\n;odbc.default_cursortype\n\n; Allow or prevent persistent links.\n; https://php.net/odbc.allow-persistent\nodbc.allow_persistent = On\n\n; Check that a connection is still valid before reuse.\n; https://php.net/odbc.check-persistent\nodbc.check_persistent = On\n\n; Maximum number of persistent links.  -1 means no limit.\n; https://php.net/odbc.max-persistent\nodbc.max_persistent = -1\n\n; Maximum number of links (persistent + non-persistent).  -1 means no limit.\n; https://php.net/odbc.max-links\nodbc.max_links = -1\n\n; Handling of LONG fields.  Returns number of bytes to variables.  0 means\n; passthru.\n; https://php.net/odbc.defaultlrl\nodbc.defaultlrl = 4096\n\n; Handling of binary data.  0 means passthru, 1 return as is, 2 convert to char.\n; See the documentation on odbc_binmode and odbc_longreadlen for an explanation\n; of odbc.defaultlrl and odbc.defaultbinmode\n; https://php.net/odbc.defaultbinmode\nodbc.defaultbinmode = 1\n\n[MySQLi]\n\n; Maximum number of persistent links.  -1 means no limit.\n; https://php.net/mysqli.max-persistent\nmysqli.max_persistent = -1\n\n; Allow accessing, from PHP's perspective, local files with LOAD DATA statements\n; https://php.net/mysqli.allow_local_infile\n;mysqli.allow_local_infile = On\n\n; It allows the user to specify a folder where files that can be sent via LOAD DATA\n; LOCAL can exist. It is ignored if mysqli.allow_local_infile is enabled.\n;mysqli.local_infile_directory =\n\n; Allow or prevent persistent links.\n; https://php.net/mysqli.allow-persistent\nmysqli.allow_persistent = On\n\n; Maximum number of links.  -1 means no limit.\n; https://php.net/mysqli.max-links\nmysqli.max_links = -1\n\n; Default port number for mysqli_connect().\n; https://php.net/mysqli.default-port\nmysqli.default_port = 3306\n\n; Default socket name for local MySQL connects.  If empty, uses the built-in\n; MySQL defaults.\n; https://php.net/mysqli.default-socket\nmysqli.default_socket =\n\n; Default host for mysqli_connect().\n; https://php.net/mysqli.default-host\nmysqli.default_host =\n\n; Default user for mysqli_connect().\n; https://php.net/mysqli.default-user\nmysqli.default_user =\n\n; Default password for mysqli_connect().\n; Note that this is generally a *bad* idea to store passwords in this file.\n; *Any* user with PHP access can run 'echo get_cfg_var(\"mysqli.default_pw\")\n; and reveal this password!  And of course, any users with read access to this\n; file will be able to reveal the password as well.\n; https://php.net/mysqli.default-pw\nmysqli.default_pw =\n\n; If this option is enabled, closing a persistent connection will rollback\n; any pending transactions of this connection, before it is put back\n; into the persistent connection pool.\n;mysqli.rollback_on_cached_plink = Off\n\n[mysqlnd]\n; Enable / Disable collection of general statistics by mysqlnd which can be\n; used to tune and monitor MySQL operations.\nmysqlnd.collect_statistics = On\n\n; Enable / Disable collection of memory usage statistics by mysqlnd which can be\n; used to tune and monitor MySQL operations.\n; Default Value: Off\n; Development Value: On\n; Production Value: Off\nmysqlnd.collect_memory_statistics = Off\n\n; Records communication from all extensions using mysqlnd to the specified log\n; file.\n; https://php.net/mysqlnd.debug\n;mysqlnd.debug =\n\n; Defines which queries will be logged.\n;mysqlnd.log_mask = 0\n\n; Default size of the mysqlnd memory pool, which is used by result sets.\n;mysqlnd.mempool_default_size = 16000\n\n; Size of a pre-allocated buffer used when sending commands to MySQL in bytes.\n;mysqlnd.net_cmd_buffer_size = 2048\n\n; Size of a pre-allocated buffer used for reading data sent by the server in\n; bytes.\n;mysqlnd.net_read_buffer_size = 32768\n\n; Timeout for network requests in seconds.\n;mysqlnd.net_read_timeout = 31536000\n\n; SHA-256 Authentication Plugin related. File with the MySQL server public RSA\n; key.\n;mysqlnd.sha256_server_public_key =\n\n[PostgreSQL]\n; Allow or prevent persistent links.\n; https://php.net/pgsql.allow-persistent\npgsql.allow_persistent = On\n\n; Detect broken persistent links always with pg_pconnect().\n; Auto reset feature requires a little overheads.\n; https://php.net/pgsql.auto-reset-persistent\npgsql.auto_reset_persistent = Off\n\n; Maximum number of persistent links.  -1 means no limit.\n; https://php.net/pgsql.max-persistent\npgsql.max_persistent = -1\n\n; Maximum number of links (persistent+non persistent).  -1 means no limit.\n; https://php.net/pgsql.max-links\npgsql.max_links = -1\n\n; Ignore PostgreSQL backends Notice message or not.\n; Notice message logging require a little overheads.\n; https://php.net/pgsql.ignore-notice\npgsql.ignore_notice = 0\n\n; Log PostgreSQL backends Notice message or not.\n; Unless pgsql.ignore_notice=0, module cannot log notice message.\n; https://php.net/pgsql.log-notice\npgsql.log_notice = 0\n\n[bcmath]\n; Number of decimal digits for all bcmath functions.\n; https://php.net/bcmath.scale\nbcmath.scale = 0\n\n[browscap]\n; https://php.net/browscap\n;browscap = extra/browscap.ini\n\n[Session]\n; Handler used to store/retrieve data.\n; https://php.net/session.save-handler\nsession.save_handler = files\n\n; Argument passed to save_handler.  In the case of files, this is the path\n; where data files are stored. Note: Windows users have to change this\n; variable in order to use PHP's session functions.\n;\n; The path can be defined as:\n;\n;     session.save_path = \"N;/path\"\n;\n; where N is an integer.  Instead of storing all the session files in\n; /path, what this will do is use subdirectories N-levels deep, and\n; store the session data in those directories.  This is useful if\n; your OS has problems with many files in one directory, and is\n; a more efficient layout for servers that handle many sessions.\n;\n; NOTE 1: PHP will not create this directory structure automatically.\n;         You can use the script in the ext/session dir for that purpose.\n; NOTE 2: See the section on garbage collection below if you choose to\n;         use subdirectories for session storage\n;\n; The file storage module creates files using mode 600 by default.\n; You can change that by using\n;\n;     session.save_path = \"N;MODE;/path\"\n;\n; where MODE is the octal representation of the mode. Note that this\n; does not overwrite the process's umask.\n; https://php.net/session.save-path\n;session.save_path = \"/tmp\"\n\n; Whether to use strict session mode.\n; Strict session mode does not accept an uninitialized session ID, and\n; regenerates the session ID if the browser sends an uninitialized session ID.\n; Strict mode protects applications from session fixation via a session adoption\n; vulnerability. It is disabled by default for maximum compatibility, but\n; enabling it is encouraged.\n; https://wiki.php.net/rfc/strict_sessions\nsession.use_strict_mode = 0\n\n; Whether to use cookies.\n; https://php.net/session.use-cookies\nsession.use_cookies = 1\n\n; https://php.net/session.cookie-secure\n;session.cookie_secure =\n\n; This option forces PHP to fetch and use a cookie for storing and maintaining\n; the session id. We encourage this operation as it's very helpful in combating\n; session hijacking when not specifying and managing your own session id. It is\n; not the be-all and end-all of session hijacking defense, but it's a good start.\n; https://php.net/session.use-only-cookies\nsession.use_only_cookies = 1\n\n; Name of the session (used as cookie name).\n; https://php.net/session.name\nsession.name = PHPSESSID\n\n; Initialize session on request startup.\n; https://php.net/session.auto-start\nsession.auto_start = 0\n\n; Lifetime in seconds of cookie or, if 0, until browser is restarted.\n; https://php.net/session.cookie-lifetime\nsession.cookie_lifetime = 0\n\n; The path for which the cookie is valid.\n; https://php.net/session.cookie-path\nsession.cookie_path = /\n\n; The domain for which the cookie is valid.\n; https://php.net/session.cookie-domain\nsession.cookie_domain =\n\n; Whether or not to add the httpOnly flag to the cookie, which makes it\n; inaccessible to browser scripting languages such as JavaScript.\n; https://php.net/session.cookie-httponly\nsession.cookie_httponly =\n\n; Add SameSite attribute to cookie to help mitigate Cross-Site Request Forgery (CSRF/XSRF)\n; Current valid values are \"Strict\", \"Lax\" or \"None\". When using \"None\",\n; make sure to include the quotes, as `none` is interpreted like `false` in ini files.\n; https://tools.ietf.org/html/draft-west-first-party-cookies-07\nsession.cookie_samesite =\n\n; Handler used to serialize data. php is the standard serializer of PHP.\n; https://php.net/session.serialize-handler\nsession.serialize_handler = php\n\n; Defines the probability that the 'garbage collection' process is started on every\n; session initialization. The probability is calculated by using gc_probability/gc_divisor,\n; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.\n; Default Value: 1\n; Development Value: 1\n; Production Value: 1\n; https://php.net/session.gc-probability\nsession.gc_probability = 1\n\n; Defines the probability that the 'garbage collection' process is started on every\n; session initialization. The probability is calculated by using gc_probability/gc_divisor,\n; e.g. 1/100 means there is a 1% chance that the GC process starts on each request.\n; For high volume production servers, using a value of 1000 is a more efficient approach.\n; Default Value: 100\n; Development Value: 1000\n; Production Value: 1000\n; https://php.net/session.gc-divisor\nsession.gc_divisor = 1000\n\n; After this number of seconds, stored data will be seen as 'garbage' and\n; cleaned up by the garbage collection process.\n; https://php.net/session.gc-maxlifetime\nsession.gc_maxlifetime = 1440\n\n; NOTE: If you are using the subdirectory option for storing session files\n;       (see session.save_path above), then garbage collection does *not*\n;       happen automatically.  You will need to do your own garbage\n;       collection through a shell script, cron entry, or some other method.\n;       For example, the following script is the equivalent of setting\n;       session.gc_maxlifetime to 1440 (1440 seconds = 24 minutes):\n;          find /path/to/sessions -cmin +24 -type f | xargs rm\n\n; Check HTTP Referer to invalidate externally stored URLs containing ids.\n; HTTP_REFERER has to contain this substring for the session to be\n; considered as valid.\n; https://php.net/session.referer-check\nsession.referer_check =\n\n; Set to {nocache,private,public,} to determine HTTP caching aspects\n; or leave this empty to avoid sending anti-caching headers.\n; https://php.net/session.cache-limiter\nsession.cache_limiter = nocache\n\n; Document expires after n minutes.\n; https://php.net/session.cache-expire\nsession.cache_expire = 180\n\n; trans sid support is disabled by default.\n; Use of trans sid may risk your users' security.\n; Use this option with caution.\n; - User may send URL contains active session ID\n;   to other person via. email/irc/etc.\n; - URL that contains active session ID may be stored\n;   in publicly accessible computer.\n; - User may access your site with the same session ID\n;   always using URL stored in browser's history or bookmarks.\n; https://php.net/session.use-trans-sid\nsession.use_trans_sid = 0\n\n; The URL rewriter will look for URLs in a defined set of HTML tags.\n; <form> is special; if you include them here, the rewriter will\n; add a hidden <input> field with the info which is otherwise appended\n; to URLs. <form> tag's action attribute URL will not be modified\n; unless it is specified.\n; Note that all valid entries require a \"=\", even if no value follows.\n; Default Value: \"a=href,area=href,frame=src,form=\"\n; Development Value: \"a=href,area=href,frame=src,form=\"\n; Production Value: \"a=href,area=href,frame=src,form=\"\n; https://php.net/url-rewriter.tags\nsession.trans_sid_tags = \"a=href,area=href,frame=src,form=\"\n\n; URL rewriter does not rewrite absolute URLs by default.\n; To enable rewrites for absolute paths, target hosts must be specified\n; at RUNTIME. i.e. use ini_set()\n; <form> tags is special. PHP will check action attribute's URL regardless\n; of session.trans_sid_tags setting.\n; If no host is defined, HTTP_HOST will be used for allowed host.\n; Example value: php.net,www.php.net,wiki.php.net\n; Use \",\" for multiple hosts. No spaces are allowed.\n; Default Value: \"\"\n; Development Value: \"\"\n; Production Value: \"\"\n;session.trans_sid_hosts=\"\"\n\n; Enable upload progress tracking in $_SESSION\n; Default Value: On\n; Development Value: On\n; Production Value: On\n; https://php.net/session.upload-progress.enabled\n;session.upload_progress.enabled = On\n\n; Cleanup the progress information as soon as all POST data has been read\n; (i.e. upload completed).\n; Default Value: On\n; Development Value: On\n; Production Value: On\n; https://php.net/session.upload-progress.cleanup\n;session.upload_progress.cleanup = On\n\n; A prefix used for the upload progress key in $_SESSION\n; Default Value: \"upload_progress_\"\n; Development Value: \"upload_progress_\"\n; Production Value: \"upload_progress_\"\n; https://php.net/session.upload-progress.prefix\n;session.upload_progress.prefix = \"upload_progress_\"\n\n; The index name (concatenated with the prefix) in $_SESSION\n; containing the upload progress information\n; Default Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n; Development Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n; Production Value: \"PHP_SESSION_UPLOAD_PROGRESS\"\n; https://php.net/session.upload-progress.name\n;session.upload_progress.name = \"PHP_SESSION_UPLOAD_PROGRESS\"\n\n; How frequently the upload progress should be updated.\n; Given either in percentages (per-file), or in bytes\n; Default Value: \"1%\"\n; Development Value: \"1%\"\n; Production Value: \"1%\"\n; https://php.net/session.upload-progress.freq\n;session.upload_progress.freq =  \"1%\"\n\n; The minimum delay between updates, in seconds\n; Default Value: 1\n; Development Value: 1\n; Production Value: 1\n; https://php.net/session.upload-progress.min-freq\n;session.upload_progress.min_freq = \"1\"\n\n; Only write session data when session data is changed. Enabled by default.\n; https://php.net/session.lazy-write\n;session.lazy_write = On\n\n[Assertion]\n; Switch whether to compile assertions at all (to have no overhead at run-time)\n; -1: Do not compile at all\n;  0: Jump over assertion at run-time\n;  1: Execute assertions\n; Changing from or to a negative value is only possible in php.ini!\n; (For turning assertions on and off at run-time, toggle zend.assertions between the values 1 and 0)\n; Default Value: 1\n; Development Value: 1\n; Production Value: -1\n; https://php.net/zend.assertions\nzend.assertions = -1\n\n[COM]\n; path to a file containing GUIDs, IIDs or filenames of files with TypeLibs\n; https://php.net/com.typelib-file\n;com.typelib_file =\n\n; allow Distributed-COM calls\n; https://php.net/com.allow-dcom\n;com.allow_dcom = true\n\n; autoregister constants of a component's typelib on com_load()\n; https://php.net/com.autoregister-typelib\n;com.autoregister_typelib = true\n\n; register constants casesensitive\n; https://php.net/com.autoregister-casesensitive\n;com.autoregister_casesensitive = false\n\n; show warnings on duplicate constant registrations\n; https://php.net/com.autoregister-verbose\n;com.autoregister_verbose = true\n\n; The default character set code-page to use when passing strings to and from COM objects.\n; Default: system ANSI code page\n;com.code_page=\n\n; The version of the .NET framework to use. The value of the setting are the first three parts\n; of the framework's version number, separated by dots, and prefixed with \"v\", e.g. \"v4.0.30319\".\n;com.dotnet_version=\n\n[mbstring]\n; language for internal character representation.\n; This affects mb_send_mail() and mbstring.detect_order.\n; https://php.net/mbstring.language\n;mbstring.language = Japanese\n\n; Use of this INI entry is deprecated, use global internal_encoding instead.\n; internal/script encoding.\n; Some encoding cannot work as internal encoding. (e.g. SJIS, BIG5, ISO-2022-*)\n; If empty, default_charset or internal_encoding or iconv.internal_encoding is used.\n; The precedence is: default_charset < internal_encoding < iconv.internal_encoding\n;mbstring.internal_encoding =\n\n; Use of this INI entry is deprecated, use global input_encoding instead.\n; http input encoding.\n; mbstring.encoding_translation = On is needed to use this setting.\n; If empty, default_charset or input_encoding or mbstring.input is used.\n; The precedence is: default_charset < input_encoding < mbstring.http_input\n; https://php.net/mbstring.http-input\n;mbstring.http_input =\n\n; Use of this INI entry is deprecated, use global output_encoding instead.\n; http output encoding.\n; mb_output_handler must be registered as output buffer to function.\n; If empty, default_charset or output_encoding or mbstring.http_output is used.\n; The precedence is: default_charset < output_encoding < mbstring.http_output\n; To use an output encoding conversion, mbstring's output handler must be set\n; otherwise output encoding conversion cannot be performed.\n; https://php.net/mbstring.http-output\n;mbstring.http_output =\n\n; enable automatic encoding translation according to\n; mbstring.internal_encoding setting. Input chars are\n; converted to internal encoding by setting this to On.\n; Note: Do _not_ use automatic encoding translation for\n;       portable libs/applications.\n; https://php.net/mbstring.encoding-translation\n;mbstring.encoding_translation = Off\n\n; automatic encoding detection order.\n; \"auto\" detect order is changed according to mbstring.language\n; https://php.net/mbstring.detect-order\n;mbstring.detect_order = auto\n\n; substitute_character used when character cannot be converted\n; one from another\n; https://php.net/mbstring.substitute-character\n;mbstring.substitute_character = none\n\n; Enable strict encoding detection.\n;mbstring.strict_detection = Off\n\n; This directive specifies the regex pattern of content types for which mb_output_handler()\n; is activated.\n; Default: mbstring.http_output_conv_mimetypes=^(text/|application/xhtml\\+xml)\n;mbstring.http_output_conv_mimetypes=\n\n; This directive specifies maximum stack depth for mbstring regular expressions. It is similar\n; to the pcre.recursion_limit for PCRE.\n;mbstring.regex_stack_limit=100000\n\n; This directive specifies maximum retry count for mbstring regular expressions. It is similar\n; to the pcre.backtrack_limit for PCRE.\n;mbstring.regex_retry_limit=1000000\n\n[gd]\n; Tell the jpeg decode to ignore warnings and try to create\n; a gd image. The warning will then be displayed as notices\n; disabled by default\n; https://php.net/gd.jpeg-ignore-warning\n;gd.jpeg_ignore_warning = 1\n\n[exif]\n; Exif UNICODE user comments are handled as UCS-2BE/UCS-2LE and JIS as JIS.\n; With mbstring support this will automatically be converted into the encoding\n; given by corresponding encode setting. When empty mbstring.internal_encoding\n; is used. For the decode settings you can distinguish between motorola and\n; intel byte order. A decode setting must not be empty.\n; https://php.net/exif.encode-unicode\n;exif.encode_unicode = ISO-8859-15\n\n; https://php.net/exif.decode-unicode-motorola\n;exif.decode_unicode_motorola = UCS-2BE\n\n; https://php.net/exif.decode-unicode-intel\n;exif.decode_unicode_intel    = UCS-2LE\n\n; https://php.net/exif.encode-jis\n;exif.encode_jis =\n\n; https://php.net/exif.decode-jis-motorola\n;exif.decode_jis_motorola = JIS\n\n; https://php.net/exif.decode-jis-intel\n;exif.decode_jis_intel    = JIS\n\n[Tidy]\n; The path to a default tidy configuration file to use when using tidy\n; https://php.net/tidy.default-config\n;tidy.default_config = /usr/local/lib/php/default.tcfg\n\n; Should tidy clean and repair output automatically?\n; WARNING: Do not use this option if you are generating non-html content\n; such as dynamic images\n; https://php.net/tidy.clean-output\ntidy.clean_output = Off\n\n[soap]\n; Enables or disables WSDL caching feature.\n; https://php.net/soap.wsdl-cache-enabled\nsoap.wsdl_cache_enabled=1\n\n; Sets the directory name where SOAP extension will put cache files.\n; https://php.net/soap.wsdl-cache-dir\nsoap.wsdl_cache_dir=\"/tmp\"\n\n; (time to live) Sets the number of second while cached file will be used\n; instead of original one.\n; https://php.net/soap.wsdl-cache-ttl\nsoap.wsdl_cache_ttl=86400\n\n; Sets the size of the cache limit. (Max. number of WSDL files to cache)\nsoap.wsdl_cache_limit = 5\n\n[sysvshm]\n; A default size of the shared memory segment\n;sysvshm.init_mem = 10000\n\n[ldap]\n; Sets the maximum number of open links or -1 for unlimited.\nldap.max_links = -1\n\n[dba]\n;dba.default_handler=\n\n[opcache]\n; Determines if Zend OPCache is enabled\n;opcache.enable=1\n\n; Determines if Zend OPCache is enabled for the CLI version of PHP\n;opcache.enable_cli=0\n\n; The OPcache shared memory storage size.\n;opcache.memory_consumption=128\n\n; The amount of memory for interned strings in Mbytes.\n;opcache.interned_strings_buffer=8\n\n; The maximum number of keys (scripts) in the OPcache hash table.\n; Only numbers between 200 and 1000000 are allowed.\n;opcache.max_accelerated_files=10000\n\n; The maximum percentage of \"wasted\" memory until a restart is scheduled.\n;opcache.max_wasted_percentage=5\n\n; When this directive is enabled, the OPcache appends the current working\n; directory to the script key, thus eliminating possible collisions between\n; files with the same name (basename). Disabling the directive improves\n; performance, but may break existing applications.\n;opcache.use_cwd=1\n\n; When disabled, you must reset the OPcache manually or restart the\n; webserver for changes to the filesystem to take effect.\n;opcache.validate_timestamps=1\n\n; How often (in seconds) to check file timestamps for changes to the shared\n; memory storage allocation. (\"1\" means validate once per second, but only\n; once per request. \"0\" means always validate)\n;opcache.revalidate_freq=2\n\n; Enables or disables file search in include_path optimization\n;opcache.revalidate_path=0\n\n; If disabled, all PHPDoc comments are dropped from the code to reduce the\n; size of the optimized code.\n;opcache.save_comments=1\n\n; If enabled, compilation warnings (including notices and deprecations) will\n; be recorded and replayed each time a file is included. Otherwise, compilation\n; warnings will only be emitted when the file is first cached.\n;opcache.record_warnings=0\n\n; Allow file existence override (file_exists, etc.) performance feature.\n;opcache.enable_file_override=0\n\n; A bitmask, where each bit enables or disables the appropriate OPcache\n; passes\n;opcache.optimization_level=0x7FFFBFFF\n\n;opcache.dups_fix=0\n\n; The location of the OPcache blacklist file (wildcards allowed).\n; Each OPcache blacklist file is a text file that holds the names of files\n; that should not be accelerated. The file format is to add each filename\n; to a new line. The filename may be a full path or just a file prefix\n; (i.e., /var/www/x  blacklists all the files and directories in /var/www\n; that start with 'x'). Line starting with a ; are ignored (comments).\n;opcache.blacklist_filename=\n\n; Allows exclusion of large files from being cached. By default all files\n; are cached.\n;opcache.max_file_size=0\n\n; How long to wait (in seconds) for a scheduled restart to begin if the cache\n; is not being accessed.\n;opcache.force_restart_timeout=180\n\n; OPcache error_log file name. Empty string assumes \"stderr\".\n;opcache.error_log=\n\n; All OPcache errors go to the Web server log.\n; By default, only fatal errors (level 0) or errors (level 1) are logged.\n; You can also enable warnings (level 2), info messages (level 3) or\n; debug messages (level 4).\n;opcache.log_verbosity_level=1\n\n; Preferred Shared Memory back-end. Leave empty and let the system decide.\n;opcache.preferred_memory_model=\n\n; Protect the shared memory from unexpected writing during script execution.\n; Useful for internal debugging only.\n;opcache.protect_memory=0\n\n; Allows calling OPcache API functions only from PHP scripts which path is\n; started from specified string. The default \"\" means no restriction\n;opcache.restrict_api=\n\n; Mapping base of shared memory segments (for Windows only). All the PHP\n; processes have to map shared memory into the same address space. This\n; directive allows to manually fix the \"Unable to reattach to base address\"\n; errors.\n;opcache.mmap_base=\n\n; Facilitates multiple OPcache instances per user (for Windows only). All PHP\n; processes with the same cache ID and user share an OPcache instance.\n;opcache.cache_id=\n\n; Enables and sets the second level cache directory.\n; It should improve performance when SHM memory is full, at server restart or\n; SHM reset. The default \"\" disables file based caching.\n;opcache.file_cache=\n\n; Enables or disables read-only mode for the second level cache directory.\n; It should improve performance for read-only containers,\n; when the cache is pre-warmed and packaged alongside the application.\n; Best used with `opcache.validate_timestamps=0`, `opcache.enable_file_override=1`\n; and `opcache.file_cache_consistency_checks=0`.\n; Note: A cache generated with a different build of PHP, a different file path,\n; or different settings (including which extensions are loaded), may be ignored.\n;opcache.file_cache_read_only=0\n\n; Enables or disables opcode caching in shared memory.\n;opcache.file_cache_only=0\n\n; Enables or disables checksum validation when script loaded from file cache.\n;opcache.file_cache_consistency_checks=1\n\n; Implies opcache.file_cache_only=1 for a certain process that failed to\n; reattach to the shared memory (for Windows only). Explicitly enabled file\n; cache is required.\n;opcache.file_cache_fallback=1\n\n; Enables or disables copying of PHP code (text segment) into HUGE PAGES.\n; Under certain circumstances (if only a single global PHP process is\n; started from which all others fork), this can increase performance\n; by a tiny amount because TLB misses are reduced.  On the other hand, this\n; delays PHP startup, increases memory usage and degrades performance\n; under memory pressure - use with care.\n; Requires appropriate OS configuration.\n;opcache.huge_code_pages=0\n\n; Validate cached file permissions.\n;opcache.validate_permission=0\n\n; Prevent name collisions in chroot'ed environment.\n;opcache.validate_root=0\n\n; If specified, it produces opcode dumps for debugging different stages of\n; optimizations.\n;opcache.opt_debug_level=0\n\n; Specifies a PHP script that is going to be compiled and executed at server\n; start-up.\n; https://php.net/opcache.preload\n;opcache.preload=\n\n; Preloading code as root is not allowed for security reasons. This directive\n; facilitates to let the preloading to be run as another user.\n; https://php.net/opcache.preload_user\n;opcache.preload_user=\n\n; Prevents caching files that are less than this number of seconds old. It\n; protects from caching of incompletely updated files. In case all file updates\n; on your site are atomic, you may increase performance by setting it to \"0\".\n;opcache.file_update_protection=2\n\n; Absolute path used to store shared lockfiles (for *nix only).\n;opcache.lockfile_path=/tmp\n\n[curl]\n; A default value for the CURLOPT_CAINFO option. This is required to be an\n; absolute path.\n;curl.cainfo =\n\n[openssl]\n; The location of a Certificate Authority (CA) file on the local filesystem\n; to use when verifying the identity of SSL/TLS peers. Most users should\n; not specify a value for this directive as PHP will attempt to use the\n; OS-managed cert stores in its absence. If specified, this value may still\n; be overridden on a per-stream basis via the \"cafile\" SSL stream context\n; option.\n;openssl.cafile=\n\n; If openssl.cafile is not specified or if the CA file is not found, the\n; directory pointed to by openssl.capath is searched for a suitable\n; certificate. This value must be a correctly hashed certificate directory.\n; Most users should not specify a value for this directive as PHP will\n; attempt to use the OS-managed cert stores in its absence. If specified,\n; this value may still be overridden on a per-stream basis via the \"capath\"\n; SSL stream context option.\n;openssl.capath=\n\n[ffi]\n; FFI API restriction. Possible values:\n; \"preload\" - enabled in CLI scripts and preloaded files (default)\n; \"false\"   - always disabled\n; \"true\"    - always enabled\n;ffi.enable=preload\n\n; List of headers files to preload, wildcard patterns allowed.\n;ffi.preload=\n"
        },
        {
          "name": "run-tests.php",
          "type": "blob",
          "size": 138.2607421875,
          "content": "#!/usr/bin/env php\n<?php\n/*\n   +----------------------------------------------------------------------+\n   | Copyright (c) The PHP Group                                          |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 3.01 of the PHP license,      |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available through the world-wide-web at the following url:           |\n   | https://www.php.net/license/3_01.txt                                 |\n   | If you did not receive a copy of the PHP license and are unable to   |\n   | obtain it through the world-wide-web, please send a note to          |\n   | license@php.net so we can mail you a copy immediately.               |\n   +----------------------------------------------------------------------+\n   | Authors: Ilia Alshanetsky <iliaa@php.net>                            |\n   |          Preston L. Bannister <pbannister@php.net>                   |\n   |          Marcus Boerger <helly@php.net>                              |\n   |          Derick Rethans <derick@php.net>                             |\n   |          Sander Roobol <sander@php.net>                              |\n   |          Andrea Faulds <ajf@ajf.me>                                  |\n   | (based on version by: Stig Bakken <ssb@php.net>)                     |\n   | (based on the PHP 3 test framework by Rasmus Lerdorf)                |\n   +----------------------------------------------------------------------+\n */\n\n/* Let there be no top-level code beyond this point:\n * Only functions and classes, thanks!\n *\n * Minimum required PHP version: 8.0.0\n */\n\nfunction show_usage(): void\n{\n    echo <<<HELP\nSynopsis:\n    php run-tests.php [options] [files] [directories]\n\nOptions:\n    -j<workers> Run up to <workers> simultaneous testing processes in parallel for\n                quicker testing on systems with multiple logical processors.\n                Note that this is experimental feature.\n\n    -l <file>   Read the testfiles to be executed from <file>. After the test\n                has finished all failed tests are written to the same <file>.\n                If the list is empty and no further test is specified then\n                all tests are executed (same as: -r <file> -w <file>).\n\n    -r <file>   Read the testfiles to be executed from <file>.\n\n    -w <file>   Write a list of all failed tests to <file>.\n\n    -a <file>   Same as -w but append rather then truncating <file>.\n\n    -W <file>   Write a list of all tests and their result status to <file>.\n\n    -c <file>   Look for php.ini in directory <file> or use <file> as ini.\n\n    -n          Pass -n option to the php binary (Do not use a php.ini).\n\n    -d foo=bar  Pass -d option to the php binary (Define INI entry foo\n                with value 'bar').\n\n    -g          Comma separated list of groups to show during test run\n                (possible values: PASS, FAIL, XFAIL, XLEAK, SKIP, BORK, WARN, LEAK, REDIRECT).\n\n    -m          Test for memory leaks with Valgrind (equivalent to -M memcheck).\n\n    -M <tool>   Test for errors with Valgrind tool.\n\n    -p <php>    Specify PHP executable to run.\n\n    -P          Use PHP_BINARY as PHP executable to run (default).\n\n    -q          Quiet, no user interaction (same as environment NO_INTERACTION).\n\n    -s <file>   Write output to <file>.\n\n    -x          Sets 'SKIP_SLOW_TESTS' environment variable.\n\n    --online    Prevents setting the 'SKIP_ONLINE_TESTS' environment variable.\n\n    --offline   Sets 'SKIP_ONLINE_TESTS' environment variable (default).\n\n    --verbose\n    -v          Verbose mode.\n\n    --help\n    -h          This Help.\n\n    --temp-source <sdir>  --temp-target <tdir> [--temp-urlbase <url>]\n                Write temporary files to <tdir> by replacing <sdir> from the\n                filenames to generate with <tdir>. In general you want to make\n                <sdir> the path to your source files and <tdir> some patch in\n                your web page hierarchy with <url> pointing to <tdir>.\n\n    --keep-[all|php|skip|clean]\n                Do not delete 'all' files, 'php' test file, 'skip' or 'clean'\n                file.\n\n    --set-timeout <n>\n                Set timeout for individual tests, where <n> is the number of\n                seconds. The default value is 60 seconds, or 300 seconds when\n                testing for memory leaks.\n\n    --context <n>\n                Sets the number of lines of surrounding context to print for diffs.\n                The default value is 3.\n\n    --show-[all|php|skip|clean|exp|diff|out|mem]\n                Show 'all' files, 'php' test file, 'skip' or 'clean' file. You\n                can also use this to show the output 'out', the expected result\n                'exp', the difference between them 'diff' or the valgrind log\n                'mem'. The result types get written independent of the log format,\n                however 'diff' only exists when a test fails.\n\n    --show-slow <n>\n                Show all tests that took longer than <n> milliseconds to run.\n\n    --no-clean  Do not execute clean section if any.\n\n    --color\n    --no-color  Do/Don't colorize the result type in the test result.\n\n    --progress\n    --no-progress  Do/Don't show the current progress.\n\n    --repeat [n]\n                Run the tests multiple times in the same process and check the\n                output of the last execution (CLI SAPI only).\n\n    --bless     Bless failed tests using scripts/dev/bless_tests.php.\n\nHELP;\n}\n\n/**\n * One function to rule them all, one function to find them, one function to\n * bring them all and in the darkness bind them.\n * This is the entry point and exit point überfunction. It contains all the\n * code that was previously found at the top level. It could and should be\n * refactored to be smaller and more manageable.\n */\nfunction main(): void\n{\n    /* This list was derived in a naïve mechanical fashion. If a member\n     * looks like it doesn't belong, it probably doesn't; cull at will.\n     */\n    global $DETAILED, $PHP_FAILED_TESTS, $SHOW_ONLY_GROUPS, $argc, $argv, $cfg,\n           $end_time, $environment,\n           $exts_skipped, $exts_tested, $exts_to_test, $failed_tests_file,\n           $ignored_by_ext, $ini_overwrites, $colorize,\n           $log_format, $no_clean, $no_file_cache,\n           $pass_options, $php, $php_cgi, $preload,\n           $result_tests_file, $slow_min_ms, $start_time,\n           $temp_source, $temp_target, $test_cnt,\n           $test_files, $test_idx, $test_results, $testfile,\n           $valgrind, $sum_results, $shuffle, $file_cache, $num_repeats,\n           $show_progress;\n    // Parallel testing\n    global $workers, $workerID;\n    global $context_line_count;\n\n    // Temporary for the duration of refactoring\n    /** @var JUnit $junit */\n    global $junit;\n\n    define('IS_WINDOWS', substr(PHP_OS, 0, 3) == \"WIN\");\n\n    $workerID = 0;\n    if (getenv(\"TEST_PHP_WORKER\")) {\n        $workerID = intval(getenv(\"TEST_PHP_WORKER\"));\n        run_worker();\n        return;\n    }\n\n    define('INIT_DIR', getcwd());\n\n    // Change into the PHP source directory.\n    if (getenv('TEST_PHP_SRCDIR')) {\n        @chdir(getenv('TEST_PHP_SRCDIR'));\n    }\n\n    define('TEST_PHP_SRCDIR', getcwd());\n\n    check_proc_open_function_exists();\n\n    // If timezone is not set, use UTC.\n    if (ini_get('date.timezone') == '') {\n        date_default_timezone_set('UTC');\n    }\n\n    // Delete some security related environment variables\n    putenv('SSH_CLIENT=deleted');\n    putenv('SSH_AUTH_SOCK=deleted');\n    putenv('SSH_TTY=deleted');\n    putenv('SSH_CONNECTION=deleted');\n\n    set_time_limit(0);\n\n    ini_set('pcre.backtrack_limit', PHP_INT_MAX);\n\n    init_output_buffers();\n\n    error_reporting(E_ALL);\n\n    $environment = $_ENV ?? [];\n\n    // Some configurations like php.ini-development set variables_order=\"GPCS\"\n    // not \"EGPCS\", in which case $_ENV is NOT populated. Detect if the $_ENV\n    // was empty and handle it by explicitly populating through getenv().\n    if (empty($environment)) {\n        $environment = getenv();\n    }\n\n    if (empty($environment['TEMP'])) {\n        $environment['TEMP'] = sys_get_temp_dir();\n\n        if (empty($environment['TEMP'])) {\n            // For example, OpCache on Windows will fail in this case because\n            // child processes (for tests) will not get a TEMP variable, so\n            // GetTempPath() will fallback to c:\\windows, while GetTempPath()\n            // will return %TEMP% for parent (likely a different path). The\n            // parent will initialize the OpCache in that path, and child will\n            // fail to reattach to the OpCache because it will be using the\n            // wrong path.\n            die(\"TEMP environment is NOT set\");\n        }\n\n        if (count($environment) == 1) {\n            // Not having other environment variables, only having TEMP, is\n            // probably ok, but strange and may make a difference in the\n            // test pass rate, so warn the user.\n            echo \"WARNING: Only 1 environment variable will be available to tests(TEMP environment variable)\" , PHP_EOL;\n        }\n    }\n\n    if (IS_WINDOWS && empty($environment[\"SystemRoot\"])) {\n        $environment[\"SystemRoot\"] = getenv(\"SystemRoot\");\n    }\n\n    if (getenv('TEST_PHP_LOG_FORMAT')) {\n        $log_format = strtoupper(getenv('TEST_PHP_LOG_FORMAT'));\n    } else {\n        $log_format = 'LEODS';\n    }\n\n    // Check whether a detailed log is wanted.\n    if (getenv('TEST_PHP_DETAILED')) {\n        $DETAILED = getenv('TEST_PHP_DETAILED');\n    } else {\n        $DETAILED = 0;\n    }\n\n    $junit = new JUnit($environment, $workerID);\n\n    if (getenv('SHOW_ONLY_GROUPS')) {\n        $SHOW_ONLY_GROUPS = explode(\",\", getenv('SHOW_ONLY_GROUPS'));\n    } else {\n        $SHOW_ONLY_GROUPS = [];\n    }\n\n    // Check whether user test dirs are requested.\n    $user_tests = [];\n    if (getenv('TEST_PHP_USER')) {\n        $user_tests = explode(',', getenv('TEST_PHP_USER'));\n    }\n\n    $exts_to_test = [];\n    $ini_overwrites = [\n        'output_handler=',\n        'open_basedir=',\n        'disable_functions=',\n        'output_buffering=Off',\n        'error_reporting=' . E_ALL,\n        'display_errors=1',\n        'display_startup_errors=1',\n        'log_errors=0',\n        'html_errors=0',\n        'track_errors=0',\n        'report_memleaks=1',\n        'report_zend_debug=0',\n        'docref_root=',\n        'docref_ext=.html',\n        'error_prepend_string=',\n        'error_append_string=',\n        'auto_prepend_file=',\n        'auto_append_file=',\n        'ignore_repeated_errors=0',\n        'precision=14',\n        'serialize_precision=-1',\n        'memory_limit=128M',\n        'opcache.fast_shutdown=0',\n        'opcache.file_update_protection=0',\n        'opcache.revalidate_freq=0',\n        'opcache.jit_hot_loop=1',\n        'opcache.jit_hot_func=1',\n        'opcache.jit_hot_return=1',\n        'opcache.jit_hot_side_exit=1',\n        'opcache.jit_max_root_traces=100000',\n        'opcache.jit_max_side_traces=100000',\n        'opcache.jit_max_exit_counters=100000',\n        'opcache.protect_memory=1',\n        'zend.assertions=1',\n        'zend.exception_ignore_args=0',\n        'zend.exception_string_param_max_len=15',\n        'short_open_tag=0',\n    ];\n\n    $no_file_cache = '-d opcache.file_cache= -d opcache.file_cache_only=0';\n\n    // Determine the tests to be run.\n\n    $test_files = [];\n    $redir_tests = [];\n    $test_results = [];\n    $PHP_FAILED_TESTS = [\n        'BORKED' => [],\n        'FAILED' => [],\n        'WARNED' => [],\n        'LEAKED' => [],\n        'XFAILED' => [],\n        'XLEAKED' => [],\n        'SLOW' => []\n    ];\n\n    // If parameters given assume they represent selected tests to run.\n    $result_tests_file = false;\n    $failed_tests_file = false;\n    $pass_option_n = false;\n    $pass_options = '';\n\n    $output_file = INIT_DIR . '/php_test_results_' . date('Ymd_Hi') . '.txt';\n\n    $just_save_results = false;\n    $valgrind = null;\n    $temp_source = null;\n    $temp_target = null;\n    $conf_passed = null;\n    $no_clean = false;\n    $colorize = true;\n    if (function_exists('sapi_windows_vt100_support') && !sapi_windows_vt100_support(STDOUT, true)) {\n        $colorize = false;\n    }\n    if (array_key_exists('NO_COLOR', $environment)) {\n        $colorize = false;\n    }\n    $selected_tests = false;\n    $slow_min_ms = INF;\n    $preload = false;\n    $file_cache = null;\n    $shuffle = false;\n    $bless = false;\n    $workers = null;\n    $context_line_count = 3;\n    $num_repeats = 1;\n    $show_progress = true;\n    $ignored_by_ext = [];\n    $online = null;\n\n    $cfgtypes = ['show', 'keep'];\n    $cfgfiles = ['skip', 'php', 'clean', 'out', 'diff', 'exp', 'mem'];\n    $cfg = [];\n\n    foreach ($cfgtypes as $type) {\n        $cfg[$type] = [];\n\n        foreach ($cfgfiles as $file) {\n            $cfg[$type][$file] = false;\n        }\n    }\n\n    if (!isset($argc, $argv) || !$argc) {\n        $argv = [__FILE__];\n        $argc = 1;\n    }\n\n    if (getenv('TEST_PHP_ARGS')) {\n        $argv = array_merge($argv, explode(' ', getenv('TEST_PHP_ARGS')));\n        $argc = count($argv);\n    }\n\n    for ($i = 1; $i < $argc; $i++) {\n        $is_switch = false;\n        $switch = substr($argv[$i], 1, 1);\n        $repeat = substr($argv[$i], 0, 1) == '-';\n\n        while ($repeat) {\n            if (!$is_switch) {\n                $switch = substr($argv[$i], 1, 1);\n            }\n\n            $is_switch = true;\n\n            foreach ($cfgtypes as $type) {\n                if (strpos($switch, '--' . $type) === 0) {\n                    foreach ($cfgfiles as $file) {\n                        if ($switch == '--' . $type . '-' . $file) {\n                            $cfg[$type][$file] = true;\n                            $is_switch = false;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (!$is_switch) {\n                $is_switch = true;\n                break;\n            }\n\n            $repeat = false;\n\n            switch ($switch) {\n                case 'j':\n                    $workers = substr($argv[$i], 2);\n                    if ($workers == 0 || !preg_match('/^\\d+$/', $workers)) {\n                        error(\"'$workers' is not a valid number of workers, try e.g. -j16 for 16 workers\");\n                    }\n                    $workers = intval($workers, 10);\n                    // Don't use parallel testing infrastructure if there is only one worker.\n                    if ($workers === 1) {\n                        $workers = null;\n                    }\n                    break;\n                case 'r':\n                case 'l':\n                    $test_list = file($argv[++$i]);\n                    if ($test_list) {\n                        foreach ($test_list as $test) {\n                            $matches = [];\n                            if (preg_match('/^#.*\\[(.*)\\]\\:\\s+(.*)$/', $test, $matches)) {\n                                $redir_tests[] = [$matches[1], $matches[2]];\n                            } elseif (strlen($test)) {\n                                $test_files[] = trim($test);\n                            }\n                        }\n                    }\n                    if ($switch != 'l') {\n                        break;\n                    }\n                    $i--;\n                // no break\n                case 'w':\n                    $failed_tests_file = fopen($argv[++$i], 'w+t');\n                    break;\n                case 'a':\n                    $failed_tests_file = fopen($argv[++$i], 'a+t');\n                    break;\n                case 'W':\n                    $result_tests_file = fopen($argv[++$i], 'w+t');\n                    break;\n                case 'c':\n                    $conf_passed = $argv[++$i];\n                    break;\n                case 'd':\n                    $ini_overwrites[] = $argv[++$i];\n                    break;\n                case 'g':\n                    $SHOW_ONLY_GROUPS = explode(\",\", $argv[++$i]);\n                    break;\n                case '--keep-all':\n                    foreach ($cfgfiles as $file) {\n                        $cfg['keep'][$file] = true;\n                    }\n                    break;\n                case 'm':\n                    $valgrind = new RuntestsValgrind($environment);\n                    break;\n                case 'M':\n                    $valgrind = new RuntestsValgrind($environment, $argv[++$i]);\n                    break;\n                case 'n':\n                    if (!$pass_option_n) {\n                        $pass_options .= ' -n';\n                    }\n                    $pass_option_n = true;\n                    break;\n                case 'e':\n                    $pass_options .= ' -e';\n                    break;\n                case '--preload':\n                    $preload = true;\n                    $environment['SKIP_PRELOAD'] = 1;\n                    break;\n                case '--file-cache-prime':\n                    $file_cache = 'prime';\n                    break;\n                case '--file-cache-use':\n                    $file_cache = 'use';\n                    break;\n                case '--no-clean':\n                    $no_clean = true;\n                    break;\n                case '--color':\n                    $colorize = true;\n                    break;\n                case '--no-color':\n                    $colorize = false;\n                    break;\n                case 'p':\n                    $php = $argv[++$i];\n                    putenv(\"TEST_PHP_EXECUTABLE=$php\");\n                    $environment['TEST_PHP_EXECUTABLE'] = $php;\n                    break;\n                case 'P':\n                    $php = PHP_BINARY;\n                    putenv(\"TEST_PHP_EXECUTABLE=$php\");\n                    $environment['TEST_PHP_EXECUTABLE'] = $php;\n                    break;\n                case 'q':\n                    putenv('NO_INTERACTION=1');\n                    $environment['NO_INTERACTION'] = 1;\n                    break;\n                case 's':\n                    $output_file = $argv[++$i];\n                    $just_save_results = true;\n                    break;\n                case '--set-timeout':\n                    $timeout = $argv[++$i] ?? '';\n                    if (!preg_match('/^\\d+$/', $timeout)) {\n                        error(\"'$timeout' is not a valid number of seconds, try e.g. --set-timeout 60 for 1 minute\");\n                    }\n                    $environment['TEST_TIMEOUT'] = intval($timeout, 10);\n                    break;\n                case '--context':\n                    $context_line_count = $argv[++$i] ?? '';\n                    if (!preg_match('/^\\d+$/', $context_line_count)) {\n                        error(\"'$context_line_count' is not a valid number of lines of context, try e.g. --context 3 for 3 lines\");\n                    }\n                    $context_line_count = intval($context_line_count, 10);\n                    break;\n                case '--show-all':\n                    foreach ($cfgfiles as $file) {\n                        $cfg['show'][$file] = true;\n                    }\n                    break;\n                case '--show-slow':\n                    $slow_min_ms = $argv[++$i] ?? '';\n                    if (!preg_match('/^\\d+$/', $slow_min_ms)) {\n                        error(\"'$slow_min_ms' is not a valid number of milliseconds, try e.g. --show-slow 1000 for 1 second\");\n                    }\n                    $slow_min_ms = intval($slow_min_ms, 10);\n                    break;\n                case '--temp-source':\n                    $temp_source = $argv[++$i];\n                    break;\n                case '--temp-target':\n                    $temp_target = $argv[++$i];\n                    break;\n                case 'v':\n                case '--verbose':\n                    $DETAILED = true;\n                    break;\n                case 'x':\n                    $environment['SKIP_SLOW_TESTS'] = 1;\n                    break;\n                case '--online':\n                    $online = true;\n                    break;\n                case '--offline':\n                    $online = false;\n                    break;\n                case '--shuffle':\n                    $shuffle = true;\n                    break;\n                case '--asan':\n                case '--msan':\n                    $environment['USE_ZEND_ALLOC'] = 0;\n                    $environment['USE_TRACKED_ALLOC'] = 1;\n                    $environment['SKIP_ASAN'] = 1;\n                    $environment['SKIP_PERF_SENSITIVE'] = 1;\n                    if ($switch === '--msan') {\n                        $environment['SKIP_MSAN'] = 1;\n                        $environment['MSAN_OPTIONS'] = 'intercept_tls_get_addr=0';\n                    }\n\n                    $lsanSuppressions = __DIR__ . '/.github/lsan-suppressions.txt';\n                    if (file_exists($lsanSuppressions)) {\n                        $environment['LSAN_OPTIONS'] = 'suppressions=' . $lsanSuppressions\n                            . ':print_suppressions=0';\n                    }\n                    break;\n                case '--repeat':\n                    $num_repeats = (int) $argv[++$i];\n                    $environment['SKIP_REPEAT'] = 1;\n                    break;\n                case '--bless':\n                    $bless = true;\n                    break;\n                case '-':\n                    // repeat check with full switch\n                    $switch = $argv[$i];\n                    if ($switch != '-') {\n                        $repeat = true;\n                    }\n                    break;\n                case '--progress':\n                    $show_progress = true;\n                    break;\n                case '--no-progress':\n                    $show_progress = false;\n                    break;\n                case '--version':\n                    echo '$Id$' . \"\\n\";\n                    exit(1);\n\n                default:\n                    echo \"Illegal switch '$switch' specified!\\n\";\n                    // no break\n                case 'h':\n                case '-help':\n                case '--help':\n                    show_usage();\n                    exit(1);\n            }\n        }\n\n        if (!$is_switch) {\n            $selected_tests = true;\n            $testfile = realpath($argv[$i]);\n\n            if (!$testfile && strpos($argv[$i], '*') !== false && function_exists('glob')) {\n                if (substr($argv[$i], -5) == '.phpt') {\n                    $pattern_match = glob($argv[$i]);\n                } elseif (preg_match(\"/\\*$/\", $argv[$i])) {\n                    $pattern_match = glob($argv[$i] . '.phpt');\n                } else {\n                    die('Cannot find test file \"' . $argv[$i] . '\".' . PHP_EOL);\n                }\n\n                if (is_array($pattern_match)) {\n                    $test_files = array_merge($test_files, $pattern_match);\n                }\n            } elseif (is_dir($testfile)) {\n                find_files($testfile);\n            } elseif (substr($testfile, -5) == '.phpt') {\n                $test_files[] = $testfile;\n            } else {\n                die('Cannot find test file \"' . $argv[$i] . '\".' . PHP_EOL);\n            }\n        }\n    }\n\n    if ($online === null && !isset($environment['SKIP_ONLINE_TESTS'])) {\n        $online = false;\n    }\n    if ($online !== null) {\n        $environment['SKIP_ONLINE_TESTS'] = $online ? '0' : '1';\n    }\n\n    if ($selected_tests && count($test_files) === 0) {\n        echo \"No tests found.\\n\";\n        return;\n    }\n\n    if (!$php) {\n        $php = getenv('TEST_PHP_EXECUTABLE') ?: PHP_BINARY;\n    }\n\n    $php_cgi = getenv('TEST_PHP_CGI_EXECUTABLE') ?: get_binary($php, 'php-cgi', 'sapi/cgi/php-cgi');\n    $phpdbg = getenv('TEST_PHPDBG_EXECUTABLE') ?: get_binary($php, 'phpdbg', 'sapi/phpdbg/phpdbg');\n\n    putenv(\"TEST_PHP_EXECUTABLE=$php\");\n    $environment['TEST_PHP_EXECUTABLE'] = $php;\n    putenv(\"TEST_PHP_EXECUTABLE_ESCAPED=\" . escapeshellarg($php));\n    $environment['TEST_PHP_EXECUTABLE_ESCAPED'] = escapeshellarg($php);\n    putenv(\"TEST_PHP_CGI_EXECUTABLE=$php_cgi\");\n    $environment['TEST_PHP_CGI_EXECUTABLE'] = $php_cgi;\n    putenv(\"TEST_PHP_CGI_EXECUTABLE_ESCAPED=\" . escapeshellarg($php_cgi ?? ''));\n    $environment['TEST_PHP_CGI_EXECUTABLE_ESCAPED'] = escapeshellarg($php_cgi ?? '');\n    putenv(\"TEST_PHPDBG_EXECUTABLE=$phpdbg\");\n    $environment['TEST_PHPDBG_EXECUTABLE'] = $phpdbg;\n    putenv(\"TEST_PHPDBG_EXECUTABLE_ESCAPED=\" . escapeshellarg($phpdbg ?? ''));\n    $environment['TEST_PHPDBG_EXECUTABLE_ESCAPED'] = escapeshellarg($phpdbg ?? '');\n\n    if ($conf_passed !== null) {\n        if (IS_WINDOWS) {\n            $pass_options .= \" -c \" . escapeshellarg($conf_passed);\n        } else {\n            $pass_options .= \" -c '\" . realpath($conf_passed) . \"'\";\n        }\n    }\n\n    $test_files = array_unique($test_files);\n    $test_files = array_merge($test_files, $redir_tests);\n\n    // Run selected tests.\n    $test_cnt = count($test_files);\n\n    verify_config($php);\n    write_information($user_tests, $phpdbg);\n\n    if ($test_cnt) {\n        putenv('NO_INTERACTION=1');\n        usort($test_files, \"test_sort\");\n        $start_time = hrtime(true);\n\n        echo \"Running selected tests.\\n\";\n\n        $test_idx = 0;\n        run_all_tests($test_files, $environment);\n        $end_time = hrtime(true);\n\n        if ($failed_tests_file) {\n            fclose($failed_tests_file);\n        }\n\n        if ($result_tests_file) {\n            fclose($result_tests_file);\n        }\n\n        if (0 == count($test_results)) {\n            echo \"No tests were run.\\n\";\n            return;\n        }\n\n        compute_summary();\n        echo \"=====================================================================\";\n        echo get_summary(false);\n\n        if ($output_file != '' && $just_save_results) {\n            save_results($output_file, /* prompt_to_save_results: */ false);\n        }\n    } else {\n        // Compile a list of all test files (*.phpt).\n        $test_files = [];\n        $exts_tested = $exts_to_test;\n        $exts_skipped = [];\n        sort($exts_to_test);\n\n        foreach (['Zend', 'tests', 'ext', 'sapi'] as $dir) {\n            if (is_dir($dir)) {\n                find_files(TEST_PHP_SRCDIR . \"/{$dir}\", $dir == 'ext');\n            }\n        }\n\n        foreach ($user_tests as $dir) {\n            find_files($dir, $dir == 'ext');\n        }\n\n        $test_files = array_unique($test_files);\n        usort($test_files, \"test_sort\");\n\n        $start_timestamp = time();\n        $start_time = hrtime(true);\n        show_start($start_timestamp);\n\n        $test_cnt = count($test_files);\n        $test_idx = 0;\n        run_all_tests($test_files, $environment);\n        $end_time = hrtime(true);\n\n        if ($failed_tests_file) {\n            fclose($failed_tests_file);\n        }\n\n        if ($result_tests_file) {\n            fclose($result_tests_file);\n        }\n\n        // Summarize results\n\n        if (0 == count($test_results)) {\n            echo \"No tests were run.\\n\";\n            return;\n        }\n\n        compute_summary();\n\n        show_end($start_timestamp, $start_time, $end_time);\n        show_summary();\n\n        save_results($output_file, /* prompt_to_save_results: */ true);\n    }\n\n    $junit->saveXML();\n    if ($bless) {\n        bless_failed_tests($PHP_FAILED_TESTS['FAILED']);\n    }\n    if (getenv('REPORT_EXIT_STATUS') !== '0' && getenv('REPORT_EXIT_STATUS') !== 'no' &&\n            ($sum_results['FAILED'] || $sum_results['BORKED'] || $sum_results['LEAKED'])) {\n        exit(1);\n    }\n}\n\nfunction verify_config(string $php): void\n{\n    if (empty($php) || !file_exists($php)) {\n        error('environment variable TEST_PHP_EXECUTABLE must be set to specify PHP executable!');\n    }\n\n    if (!is_executable($php)) {\n        error(\"invalid PHP executable specified by TEST_PHP_EXECUTABLE  = $php\");\n    }\n}\n\n/**\n * @param string[] $user_tests\n */\nfunction write_information(array $user_tests, $phpdbg): void\n{\n    global $php, $php_cgi, $php_info, $ini_overwrites, $pass_options, $exts_to_test, $valgrind, $no_file_cache;\n    $php_escaped = escapeshellarg($php);\n\n    // Get info from php\n    $info_file = __DIR__ . '/run-test-info.php';\n    @unlink($info_file);\n    $php_info = '<?php echo \"\nPHP_SAPI    : \" , PHP_SAPI , \"\nPHP_VERSION : \" , phpversion() , \"\nZEND_VERSION: \" , zend_version() , \"\nPHP_OS      : \" , PHP_OS , \" - \" , php_uname() , \"\nINI actual  : \" , realpath(get_cfg_var(\"cfg_file_path\")) , \"\nMore .INIs  : \" , (function_exists(\\'php_ini_scanned_files\\') ? str_replace(\"\\n\",\"\", php_ini_scanned_files()) : \"** not determined **\"); ?>';\n    save_text($info_file, $php_info);\n    $info_params = [];\n    settings2array($ini_overwrites, $info_params);\n    $info_params = settings2params($info_params);\n    $php_info = shell_exec(\"$php_escaped $pass_options $info_params $no_file_cache \\\"$info_file\\\"\");\n    define('TESTED_PHP_VERSION', shell_exec(\"$php_escaped -n -r \\\"echo PHP_VERSION;\\\"\"));\n\n    if ($php_cgi && $php != $php_cgi) {\n        $php_cgi_escaped = escapeshellarg($php_cgi);\n        $php_info_cgi = shell_exec(\"$php_cgi_escaped $pass_options $info_params $no_file_cache -q \\\"$info_file\\\"\");\n        $php_info_sep = \"\\n---------------------------------------------------------------------\";\n        $php_cgi_info = \"$php_info_sep\\nPHP         : $php_cgi $php_info_cgi$php_info_sep\";\n    } else {\n        $php_cgi_info = '';\n    }\n\n    if ($phpdbg) {\n        $phpdbg_escaped = escapeshellarg($phpdbg);\n        $phpdbg_info = shell_exec(\"$phpdbg_escaped $pass_options $info_params $no_file_cache -qrr \\\"$info_file\\\"\");\n        $php_info_sep = \"\\n---------------------------------------------------------------------\";\n        $phpdbg_info = \"$php_info_sep\\nPHP         : $phpdbg $phpdbg_info$php_info_sep\";\n    } else {\n        $phpdbg_info = '';\n    }\n\n    if (function_exists('opcache_invalidate')) {\n        opcache_invalidate($info_file, true);\n    }\n    @unlink($info_file);\n\n    // load list of enabled and loadable extensions\n    save_text($info_file, <<<'PHP'\n        <?php\n        $exts = get_loaded_extensions();\n        $ext_dir = ini_get('extension_dir');\n        foreach (scandir($ext_dir) as $file) {\n            if (preg_match('/^(?:php_)?([_a-zA-Z0-9]+)\\.(?:so|dll)$/', $file, $matches)) {\n                if (!extension_loaded($matches[1])) {\n                    $exts[] = $matches[1];\n                }\n            }\n        }\n        echo implode(',', $exts);\n        PHP);\n    $extensionsNames = explode(',', shell_exec(\"$php_escaped $pass_options $info_params $no_file_cache \\\"$info_file\\\"\"));\n    $exts_to_test = array_unique(remap_loaded_extensions_names($extensionsNames));\n    // check for extensions that need special handling and regenerate\n    $info_params_ex = [\n        'session' => ['session.auto_start=0'],\n        'tidy' => ['tidy.clean_output=0'],\n        'zlib' => ['zlib.output_compression=Off'],\n        'xdebug' => ['xdebug.mode=off'],\n    ];\n\n    foreach ($info_params_ex as $ext => $ini_overwrites_ex) {\n        if (in_array($ext, $exts_to_test)) {\n            $ini_overwrites = array_merge($ini_overwrites, $ini_overwrites_ex);\n        }\n    }\n\n    if (function_exists('opcache_invalidate')) {\n        opcache_invalidate($info_file, true);\n    }\n    @unlink($info_file);\n\n    // Write test context information.\n    echo \"\n=====================================================================\nPHP         : $php $php_info $php_cgi_info $phpdbg_info\nCWD         : \" . TEST_PHP_SRCDIR . \"\nExtra dirs  : \";\n    foreach ($user_tests as $test_dir) {\n        echo \"{$test_dir}\\n\t\t\t  \";\n    }\n    echo \"\nVALGRIND    : \" . ($valgrind ? $valgrind->getHeader() : 'Not used') . \"\n=====================================================================\n\";\n}\n\nfunction save_results(string $output_file, bool $prompt_to_save_results): void\n{\n    global $sum_results, $failed_test_summary, $PHP_FAILED_TESTS, $php;\n\n    if (getenv('NO_INTERACTION')) {\n        return;\n    }\n\n    if ($prompt_to_save_results) {\n        /* We got failed Tests, offer the user to save a QA report */\n        $fp = fopen(\"php://stdin\", \"r+\");\n        if ($sum_results['FAILED'] || $sum_results['BORKED'] || $sum_results['WARNED'] || $sum_results['LEAKED']) {\n            echo \"\\nYou may have found a problem in PHP.\";\n        }\n        echo \"\\nThis report can be saved and used to open an issue on the bug tracker at\\n\";\n        echo \"https://github.com/php/php-src/issues\\n\";\n        echo \"This gives us a better understanding of PHP's behavior.\\n\";\n        echo \"Do you want to save this report in a file? [Yn]: \";\n        flush();\n\n        $user_input = fgets($fp, 10);\n        fclose($fp);\n        if (!(strlen(trim($user_input)) == 0 || strtolower($user_input[0]) == 'y')) {\n            return;\n        }\n    }\n    /**\n     * Collect information about the host system for our report\n     * Fetch phpinfo() output so that we can see the PHP environment\n     * Make an archive of all the failed tests\n     */\n    $failed_tests_data = '';\n    $sep = \"\\n\" . str_repeat('=', 80) . \"\\n\";\n    $failed_tests_data .= $failed_test_summary . \"\\n\";\n    $failed_tests_data .= get_summary(true) . \"\\n\";\n\n    if ($sum_results['FAILED']) {\n        foreach ($PHP_FAILED_TESTS['FAILED'] as $test_info) {\n            $failed_tests_data .= $sep . $test_info['name'] . $test_info['info'];\n            $failed_tests_data .= $sep . file_get_contents(realpath($test_info['output']));\n            $failed_tests_data .= $sep . file_get_contents(realpath($test_info['diff']));\n            $failed_tests_data .= $sep . \"\\n\\n\";\n        }\n    }\n\n    $failed_tests_data .= \"\\n\" . $sep . 'BUILD ENVIRONMENT' . $sep;\n    $failed_tests_data .= \"OS:\\n\" . PHP_OS . \" - \" . php_uname() . \"\\n\\n\";\n    $ldd = $autoconf = $sys_libtool = $libtool = $compiler = 'N/A';\n\n    if (!IS_WINDOWS) {\n        /* If PHP_AUTOCONF is set, use it; otherwise, use 'autoconf'. */\n        if (getenv('PHP_AUTOCONF')) {\n            $autoconf = shell_exec(getenv('PHP_AUTOCONF') . ' --version');\n        } else {\n            $autoconf = shell_exec('autoconf --version');\n        }\n\n        /* Always use the generated libtool - Mac OSX uses 'glibtool' */\n        $libtool = shell_exec(INIT_DIR . '/libtool --version');\n\n        /* Use shtool to find out if there is glibtool present (MacOSX) */\n        $sys_libtool_path = shell_exec(__DIR__ . '/build/shtool path glibtool libtool');\n\n        if ($sys_libtool_path) {\n            $sys_libtool = shell_exec(str_replace(\"\\n\", \"\", $sys_libtool_path) . ' --version');\n        }\n\n        /* Try the most common flags for 'version' */\n        $flags = ['-v', '-V', '--version'];\n        $cc_status = 0;\n\n        foreach ($flags as $flag) {\n            system(getenv('CC') . \" $flag >/dev/null 2>&1\", $cc_status);\n            if ($cc_status == 0) {\n                $compiler = shell_exec(getenv('CC') . \" $flag 2>&1\");\n                break;\n            }\n        }\n\n        $ldd = shell_exec(\"ldd $php 2>/dev/null\");\n    }\n\n    $failed_tests_data .= \"Autoconf:\\n$autoconf\\n\";\n    $failed_tests_data .= \"Bundled Libtool:\\n$libtool\\n\";\n    $failed_tests_data .= \"System Libtool:\\n$sys_libtool\\n\";\n    $failed_tests_data .= \"Compiler:\\n$compiler\\n\";\n    $failed_tests_data .= \"Bison:\\n\" . shell_exec('bison --version 2>/dev/null') . \"\\n\";\n    $failed_tests_data .= \"Libraries:\\n$ldd\\n\";\n    $failed_tests_data .= \"\\n\";\n    $failed_tests_data .= $sep . \"PHPINFO\" . $sep;\n    $failed_tests_data .= shell_exec($php . ' -ddisplay_errors=stderr -dhtml_errors=0 -i 2> /dev/null');\n\n    file_put_contents($output_file, $failed_tests_data);\n    echo \"Report saved to: \", $output_file, \"\\n\";\n}\n\nfunction get_binary(string $php, string $sapi, string $sapi_path): ?string\n{\n    $dir = dirname($php);\n    if (IS_WINDOWS && file_exists(\"$dir/$sapi.exe\")) {\n        return realpath(\"$dir/$sapi.exe\");\n    }\n    // Sources tree\n    if (file_exists(\"$dir/../../$sapi_path\")) {\n        return realpath(\"$dir/../../$sapi_path\");\n    }\n    // Installation tree, preserve command prefix/suffix\n    $inst = str_replace('php', $sapi, basename($php));\n    if (file_exists(\"$dir/$inst\")) {\n        return realpath(\"$dir/$inst\");\n    }\n    return null;\n}\n\nfunction find_files(string $dir, bool $is_ext_dir = false, bool $ignore = false): void\n{\n    global $test_files, $exts_to_test, $ignored_by_ext, $exts_skipped;\n\n    $o = opendir($dir) or error(\"cannot open directory: $dir\");\n\n    while (($name = readdir($o)) !== false) {\n        if (is_dir(\"{$dir}/{$name}\") && !in_array($name, ['.', '..', '.svn'])) {\n            $skip_ext = ($is_ext_dir && !in_array($name, $exts_to_test));\n            if ($skip_ext) {\n                $exts_skipped[] = $name;\n            }\n            find_files(\"{$dir}/{$name}\", false, $ignore || $skip_ext);\n        }\n\n        // Cleanup any left-over tmp files from last run.\n        if (substr($name, -4) == '.tmp') {\n            @unlink(\"$dir/$name\");\n            continue;\n        }\n\n        // Otherwise we're only interested in *.phpt files.\n        // (but not those starting with a dot, which are hidden on\n        // many platforms)\n        if (substr($name, -5) == '.phpt' && substr($name, 0, 1) !== '.') {\n            $testfile = realpath(\"{$dir}/{$name}\");\n            if ($ignore) {\n                $ignored_by_ext[] = $testfile;\n            } else {\n                $test_files[] = $testfile;\n            }\n        }\n    }\n\n    closedir($o);\n}\n\n/**\n * @param array|string $name\n */\nfunction test_name($name): string\n{\n    if (is_array($name)) {\n        return $name[0] . ':' . $name[1];\n    }\n\n    return $name;\n}\n/**\n * @param array|string $a\n * @param array|string $b\n */\nfunction test_sort($a, $b): int\n{\n    $a = test_name($a);\n    $b = test_name($b);\n\n    $ta = strpos($a, TEST_PHP_SRCDIR . \"/tests\") === 0 ? 1 + (strpos($a,\n            TEST_PHP_SRCDIR . \"/tests/run-test\") === 0 ? 1 : 0) : 0;\n    $tb = strpos($b, TEST_PHP_SRCDIR . \"/tests\") === 0 ? 1 + (strpos($b,\n            TEST_PHP_SRCDIR . \"/tests/run-test\") === 0 ? 1 : 0) : 0;\n\n    if ($ta == $tb) {\n        return strcmp($a, $b);\n    }\n\n    return $tb - $ta;\n}\n\n//\n//  Write the given text to a temporary file.\n//\n\nfunction save_text(string $filename, string $text, ?string $filename_copy = null): void\n{\n    global $DETAILED;\n\n    if ($filename_copy && $filename_copy != $filename && file_put_contents($filename_copy, $text) === false) {\n        error(\"Cannot open file '\" . $filename_copy . \"' (save_text)\");\n    }\n\n    if (file_put_contents($filename, $text) === false) {\n        error(\"Cannot open file '\" . $filename . \"' (save_text)\");\n    }\n\n    if (1 < $DETAILED) {\n        echo \"\nFILE $filename {{{\n$text\n}}}\n\";\n    }\n}\n\n//\n//  Write an error in a format recognizable to Emacs or MSVC.\n//\n\nfunction error_report(string $testname, string $logname, string $tested): void\n{\n    $testname = realpath($testname);\n    $logname = realpath($logname);\n\n    switch (strtoupper(getenv('TEST_PHP_ERROR_STYLE'))) {\n        case 'MSVC':\n            echo $testname . \"(1) : $tested\\n\";\n            echo $logname . \"(1) :  $tested\\n\";\n            break;\n        case 'EMACS':\n            echo $testname . \":1: $tested\\n\";\n            echo $logname . \":1:  $tested\\n\";\n            break;\n    }\n}\n\n/**\n * @return false|string\n */\nfunction system_with_timeout(\n    string $commandline,\n    ?array $env = null,\n    ?string $stdin = null,\n    bool $captureStdIn = true,\n    bool $captureStdOut = true,\n    bool $captureStdErr = true\n) {\n    global $valgrind;\n\n    // when proc_open cmd is passed as a string (without bypass_shell=true option) the cmd goes thru shell\n    // and on Windows quotes are discarded, this is a fix to honor the quotes and allow values containing\n    // spaces like '\"C:\\Program Files\\PHP\\php.exe\"' to be passed as 1 argument correctly\n    if (IS_WINDOWS) {\n        $commandline = 'start \"\" /b /wait ' . $commandline . ' & exit';\n    }\n\n    $data = '';\n\n    $bin_env = [];\n    foreach ((array) $env as $key => $value) {\n        $bin_env[$key] = $value;\n    }\n\n    $descriptorspec = [];\n    if ($captureStdIn) {\n        $descriptorspec[0] = ['pipe', 'r'];\n    }\n    if ($captureStdOut) {\n        $descriptorspec[1] = ['pipe', 'w'];\n    }\n    if ($captureStdErr) {\n        $descriptorspec[2] = ['pipe', 'w'];\n    }\n    $proc = proc_open($commandline, $descriptorspec, $pipes, TEST_PHP_SRCDIR, $bin_env, ['suppress_errors' => true]);\n\n    if (!$proc) {\n        return false;\n    }\n\n    if ($captureStdIn) {\n        if (!is_null($stdin)) {\n            fwrite($pipes[0], $stdin);\n        }\n        fclose($pipes[0]);\n        unset($pipes[0]);\n    }\n\n    $timeout = $valgrind ? 300 : ($env['TEST_TIMEOUT'] ?? 60);\n    /* ASAN can cause a ~2-3x slowdown. */\n    if (isset($env['SKIP_ASAN'])) {\n        $timeout *= 3;\n    }\n\n    while (true) {\n        /* hide errors from interrupted syscalls */\n        $r = $pipes;\n        $w = null;\n        $e = null;\n\n        $n = @stream_select($r, $w, $e, $timeout);\n\n        if ($n === false) {\n            break;\n        }\n\n        if ($n === 0) {\n            /* timed out */\n            $data .= \"\\n ** ERROR: process timed out **\\n\";\n            proc_terminate($proc, 9);\n            return $data;\n        }\n\n        if ($n > 0) {\n            if ($captureStdOut) {\n                $line = fread($pipes[1], 8192);\n            } elseif ($captureStdErr) {\n                $line = fread($pipes[2], 8192);\n            } else {\n                $line = '';\n            }\n            if (strlen($line) == 0) {\n                /* EOF */\n                break;\n            }\n            $data .= $line;\n        }\n    }\n\n    $stat = proc_get_status($proc);\n\n    if ($stat['signaled']) {\n        $data .= \"\\nTermsig=\" . $stat['stopsig'] . \"\\n\";\n    }\n    if ($stat[\"exitcode\"] > 128 && $stat[\"exitcode\"] < 160) {\n        $data .= \"\\nTermsig=\" . ($stat[\"exitcode\"] - 128) . \"\\n\";\n    } else if (defined('PHP_WINDOWS_VERSION_MAJOR') && (($stat[\"exitcode\"] >> 28) & 0b1111) === 0b1100) {\n        // https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/87fba13e-bf06-450e-83b1-9241dc81e781\n        $data .= \"\\nTermsig=\" . $stat[\"exitcode\"] . \"\\n\";\n    }\n\n    proc_close($proc);\n    return $data;\n}\n\nfunction run_all_tests(array $test_files, array $env, ?string $redir_tested = null): void\n{\n    global $test_results, $failed_tests_file, $result_tests_file, $php, $test_idx, $file_cache, $shuffle;\n    global $preload;\n    // Parallel testing\n    global $PHP_FAILED_TESTS, $workers, $workerID, $workerSock;\n\n    if ($file_cache !== null || $preload) {\n        /* Automatically skip opcache tests in --file-cache and --preload mode,\n         * because opcache generally expects these to run under a default configuration. */\n        $test_files = array_filter($test_files, function($test) use($preload) {\n            if (!is_string($test)) {\n                return true;\n            }\n            if (false !== strpos($test, 'ext/opcache')) {\n                return false;\n            }\n            if ($preload && false !== strpos($test, 'ext/zend_test/tests/observer')) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    // To discover parallelization issues and order dependent tests it is useful to randomize the test order.\n    if ($shuffle) {\n        shuffle($test_files);\n    }\n\n    /* Ignore -jN if there is only one file to analyze. */\n    if ($workers !== null && count($test_files) > 1 && !$workerID) {\n        run_all_tests_parallel($test_files, $env, $redir_tested);\n        return;\n    }\n\n    foreach ($test_files as $name) {\n        if (is_array($name)) {\n            $index = \"# $name[1]: $name[0]\";\n\n            if ($redir_tested) {\n                $name = $name[0];\n            }\n        } elseif ($redir_tested) {\n            $index = \"# $redir_tested: $name\";\n        } else {\n            $index = $name;\n        }\n        $test_idx++;\n\n        if ($workerID) {\n            $PHP_FAILED_TESTS = ['BORKED' => [], 'FAILED' => [], 'WARNED' => [], 'LEAKED' => [], 'XFAILED' => [], 'XLEAKED' => [], 'SLOW' => []];\n            ob_start();\n        }\n\n        $result = run_test($php, $name, $env);\n        if ($workerID) {\n            $resultText = ob_get_clean();\n        }\n\n        if (!is_array($name) && $result != 'REDIR') {\n            if ($workerID) {\n                send_message($workerSock, [\n                    \"type\" => \"test_result\",\n                    \"name\" => $name,\n                    \"index\" => $index,\n                    \"result\" => $result,\n                    \"text\" => $resultText,\n                    \"PHP_FAILED_TESTS\" => $PHP_FAILED_TESTS\n                ]);\n                continue;\n            }\n\n            $test_results[$index] = $result;\n            if ($failed_tests_file && ($result == 'XFAILED' || $result == 'XLEAKED' || $result == 'FAILED' || $result == 'WARNED' || $result == 'LEAKED')) {\n                fwrite($failed_tests_file, \"$index\\n\");\n            }\n            if ($result_tests_file) {\n                fwrite($result_tests_file, \"$result\\t$index\\n\");\n            }\n        }\n    }\n}\n\nfunction run_all_tests_parallel(array $test_files, array $env, ?string $redir_tested): void\n{\n    global $workers, $test_idx, $test_results, $failed_tests_file, $result_tests_file, $PHP_FAILED_TESTS, $shuffle, $valgrind, $show_progress;\n\n    global $junit;\n\n    // The PHP binary running run-tests.php, and run-tests.php itself\n    // This PHP executable is *not* necessarily the same as the tested version\n    $thisPHP = PHP_BINARY;\n    $thisScript = __FILE__;\n\n    $workerProcs = [];\n    $workerSocks = [];\n\n    // Each test may specify a list of conflict keys. While a test that conflicts with\n    // key K is running, no other test that conflicts with K may run. Conflict keys are\n    // specified either in the --CONFLICTS-- section, or CONFLICTS file inside a directory.\n    $dirConflictsWith = [];\n    $fileConflictsWith = [];\n    $sequentialTests = [];\n    foreach ($test_files as $i => $file) {\n        $contents = file_get_contents($file);\n        if (preg_match('/^--CONFLICTS--(.+?)^--/ms', $contents, $matches)) {\n            $conflicts = parse_conflicts($matches[1]);\n        } else {\n            // Cache per-directory conflicts in a separate map, so we compute these only once.\n            $dir = dirname($file);\n            if (!isset($dirConflictsWith[$dir])) {\n                $dirConflicts = [];\n                if (file_exists($dir . '/CONFLICTS')) {\n                    $contents = file_get_contents($dir . '/CONFLICTS');\n                    $dirConflicts = parse_conflicts($contents);\n                }\n                $dirConflictsWith[$dir] = $dirConflicts;\n            }\n            $conflicts = $dirConflictsWith[$dir];\n        }\n\n        // For tests conflicting with \"all\", no other tests may run in parallel. We'll run these\n        // tests separately at the end, when only one worker is left.\n        if (in_array('all', $conflicts, true)) {\n            $sequentialTests[] = $file;\n            unset($test_files[$i]);\n        }\n\n        $fileConflictsWith[$file] = $conflicts;\n    }\n\n    // Some tests assume that they are executed in a certain order. We will be popping from\n    // $test_files, so reverse its order here. This makes sure that order is preserved at least\n    // for tests with a common conflict key.\n    if (!$shuffle) {\n        $test_files = array_reverse($test_files);\n    }\n\n    // Don't start more workers than test files.\n    $workers = max(1, min($workers, count($test_files)));\n\n    echo \"Spawning $workers workers... \";\n\n    // We use sockets rather than STDIN/STDOUT for comms because on Windows,\n    // those can't be non-blocking for some reason.\n    $listenSock = stream_socket_server(\"tcp://127.0.0.1:0\") or error(\"Couldn't create socket on localhost.\");\n    $sockName = stream_socket_get_name($listenSock, false);\n    // PHP is terrible and returns IPv6 addresses not enclosed by []\n    $portPos = strrpos($sockName, \":\");\n    $sockHost = substr($sockName, 0, $portPos);\n    if (false !== strpos($sockHost, \":\")) {\n        $sockHost = \"[$sockHost]\";\n    }\n    $sockPort = substr($sockName, $portPos + 1);\n    $sockUri = \"tcp://$sockHost:$sockPort\";\n    $totalFileCount = count($test_files);\n\n    $startTime = microtime(true);\n    for ($i = 1; $i <= $workers; $i++) {\n        $proc = proc_open(\n            [$thisPHP, $thisScript],\n            [], // Inherit our stdin, stdout and stderr\n            $pipes,\n            null,\n            $GLOBALS['environment'] + [\n                \"TEST_PHP_WORKER\" => $i,\n                \"TEST_PHP_URI\" => $sockUri,\n            ],\n            [\n                \"suppress_errors\" => true,\n                'create_new_console' => true,\n            ]\n        );\n        if ($proc === false) {\n            kill_children($workerProcs);\n            error(\"Failed to spawn worker $i\");\n        }\n        $workerProcs[$i] = $proc;\n    }\n\n    for ($i = 1; $i <= $workers; $i++) {\n        $workerSock = stream_socket_accept($listenSock, 5);\n        if ($workerSock === false) {\n            kill_children($workerProcs);\n            error(\"Failed to accept connection from worker.\");\n        }\n\n        $greeting = base64_encode(serialize([\n            \"type\" => \"hello\",\n            \"GLOBALS\" => $GLOBALS,\n            \"constants\" => [\n                \"INIT_DIR\" => INIT_DIR,\n                \"TEST_PHP_SRCDIR\" => TEST_PHP_SRCDIR,\n            ]\n        ])) . \"\\n\";\n\n        stream_set_timeout($workerSock, 5);\n        if (fwrite($workerSock, $greeting) === false) {\n            kill_children($workerProcs);\n            error(\"Failed to send greeting to worker.\");\n        }\n\n        $rawReply = fgets($workerSock);\n        if ($rawReply === false) {\n            kill_children($workerProcs);\n            error(\"Failed to read greeting reply from worker.\");\n        }\n\n        $reply = unserialize(base64_decode($rawReply));\n        if (!$reply || $reply[\"type\"] !== \"hello_reply\") {\n            kill_children($workerProcs);\n            error(\"Greeting reply from worker unexpected or could not be decoded: '$rawReply'\");\n        }\n\n        stream_set_timeout($workerSock, 0);\n        stream_set_blocking($workerSock, false);\n\n        $workerID = $reply[\"workerID\"];\n        $workerSocks[$workerID] = $workerSock;\n    }\n    printf(\"Done in %.2fs\\n\", microtime(true) - $startTime);\n    echo \"=====================================================================\\n\";\n    echo \"\\n\";\n\n    $rawMessageBuffers = [];\n    $testsInProgress = 0;\n\n    // Map from conflict key to worker ID.\n    $activeConflicts = [];\n    // Tests waiting due to conflicts. Map from conflict key to array.\n    $waitingTests = [];\n\nescape:\n    while ($test_files || $sequentialTests || $testsInProgress > 0) {\n        $toRead = array_values($workerSocks);\n        $toWrite = null;\n        $toExcept = null;\n        if (stream_select($toRead, $toWrite, $toExcept, 10)) {\n            foreach ($toRead as $workerSock) {\n                $i = array_search($workerSock, $workerSocks);\n                if ($i === false) {\n                    kill_children($workerProcs);\n                    error(\"Could not find worker stdout in array of worker stdouts, THIS SHOULD NOT HAPPEN.\");\n                }\n                if (feof($workerSock)) {\n                    kill_children($workerProcs);\n                    error(\"Worker $i died unexpectedly\");\n                }\n                while (false !== ($rawMessage = fgets($workerSock))) {\n                    // work around fgets truncating things\n                    if (($rawMessageBuffers[$i] ?? '') !== '') {\n                        $rawMessage = $rawMessageBuffers[$i] . $rawMessage;\n                        $rawMessageBuffers[$i] = '';\n                    }\n                    if (substr($rawMessage, -1) !== \"\\n\") {\n                        $rawMessageBuffers[$i] = $rawMessage;\n                        continue;\n                    }\n\n                    $message = unserialize(base64_decode($rawMessage));\n                    if (!$message) {\n                        kill_children($workerProcs);\n                        $stuff = fread($workerSock, 65536);\n                        error(\"Could not decode message from worker $i: '$rawMessage$stuff'\");\n                    }\n\n                    switch ($message[\"type\"]) {\n                        case \"tests_finished\":\n                            $testsInProgress--;\n                            foreach ($activeConflicts as $key => $workerId) {\n                                if ($workerId === $i) {\n                                    unset($activeConflicts[$key]);\n                                    if (isset($waitingTests[$key])) {\n                                        while ($test = array_pop($waitingTests[$key])) {\n                                            $test_files[] = $test;\n                                        }\n                                        unset($waitingTests[$key]);\n                                    }\n                                }\n                            }\n                            $junit->mergeResults($message[\"junit\"]);\n                            // no break\n                        case \"ready\":\n                            // Schedule sequential tests only once we are down to one worker.\n                            if (count($workerProcs) === 1 && $sequentialTests) {\n                                $test_files = array_merge($test_files, $sequentialTests);\n                                $sequentialTests = [];\n                            }\n                            // Batch multiple tests to reduce communication overhead.\n                            // - When valgrind is used, communication overhead is relatively small,\n                            //   so just use a batch size of 1.\n                            // - If this is running a small enough number of tests,\n                            //   reduce the batch size to give batches to more workers.\n                            $files = [];\n                            $maxBatchSize = $valgrind ? 1 : ($shuffle ? 4 : 32);\n                            $averageFilesPerWorker = max(1, (int) ceil($totalFileCount / count($workerProcs)));\n                            $batchSize = min($maxBatchSize, $averageFilesPerWorker);\n                            while (count($files) <= $batchSize && $file = array_pop($test_files)) {\n                                foreach ($fileConflictsWith[$file] as $conflictKey) {\n                                    if (isset($activeConflicts[$conflictKey])) {\n                                        $waitingTests[$conflictKey][] = $file;\n                                        continue 2;\n                                    }\n                                }\n                                $files[] = $file;\n                            }\n                            if ($files) {\n                                foreach ($files as $file) {\n                                    foreach ($fileConflictsWith[$file] as $conflictKey) {\n                                        $activeConflicts[$conflictKey] = $i;\n                                    }\n                                }\n                                $testsInProgress++;\n                                send_message($workerSocks[$i], [\n                                    \"type\" => \"run_tests\",\n                                    \"test_files\" => $files,\n                                    \"env\" => $env,\n                                    \"redir_tested\" => $redir_tested\n                                ]);\n                            } else {\n                                proc_terminate($workerProcs[$i]);\n                                unset($workerProcs[$i], $workerSocks[$i]);\n                                goto escape;\n                            }\n                            break;\n                        case \"test_result\":\n                            list($name, $index, $result, $resultText) = [$message[\"name\"], $message[\"index\"], $message[\"result\"], $message[\"text\"]];\n                            foreach ($message[\"PHP_FAILED_TESTS\"] as $category => $tests) {\n                                $PHP_FAILED_TESTS[$category] = array_merge($PHP_FAILED_TESTS[$category], $tests);\n                            }\n                            $test_idx++;\n\n                            if ($show_progress) {\n                                clear_show_test();\n                            }\n\n                            echo $resultText;\n\n                            if ($show_progress) {\n                                show_test($test_idx, count($workerProcs) . \"/$workers concurrent test workers running\");\n                            }\n\n                            if (!is_array($name) && $result != 'REDIR') {\n                                $test_results[$index] = $result;\n\n                                if ($failed_tests_file && ($result == 'XFAILED' || $result == 'XLEAKED' || $result == 'FAILED' || $result == 'WARNED' || $result == 'LEAKED')) {\n                                    fwrite($failed_tests_file, \"$index\\n\");\n                                }\n                                if ($result_tests_file) {\n                                    fwrite($result_tests_file, \"$result\\t$index\\n\");\n                                }\n                            }\n                            break;\n                        case \"error\":\n                            kill_children($workerProcs);\n                            error(\"Worker $i reported error: $message[msg]\");\n                            break;\n                        case \"php_error\":\n                            kill_children($workerProcs);\n                            $error_consts = [\n                                'E_ERROR',\n                                'E_WARNING',\n                                'E_PARSE',\n                                'E_NOTICE',\n                                'E_CORE_ERROR',\n                                'E_CORE_WARNING',\n                                'E_COMPILE_ERROR',\n                                'E_COMPILE_WARNING',\n                                'E_USER_ERROR',\n                                'E_USER_WARNING',\n                                'E_USER_NOTICE',\n                                'E_RECOVERABLE_ERROR',\n                                'E_DEPRECATED',\n                                'E_USER_DEPRECATED'\n                            ];\n                            $error_consts = array_combine(array_map('constant', $error_consts), $error_consts);\n                            error(\"Worker $i reported unexpected {$error_consts[$message['errno']]}: $message[errstr] in $message[errfile] on line $message[errline]\");\n                            // no break\n                        default:\n                            kill_children($workerProcs);\n                            error(\"Unrecognised message type '$message[type]' from worker $i\");\n                    }\n                }\n            }\n        }\n    }\n\n    if ($show_progress) {\n        clear_show_test();\n    }\n\n    kill_children($workerProcs);\n\n    if ($testsInProgress < 0) {\n        error(\"$testsInProgress test batches “in progress”, which is less than zero. THIS SHOULD NOT HAPPEN.\");\n    }\n}\n\n/**\n * Calls fwrite and retries when network writes fail with errors such as \"Resource temporarily unavailable\"\n *\n * @param resource $stream the stream to fwrite to\n * @param string $data\n * @return int|false\n */\nfunction safe_fwrite($stream, string $data)\n{\n    // safe_fwrite was tested by adding $message['unused'] = str_repeat('a', 20_000_000); in send_message()\n    // fwrites on tcp sockets can return false or less than strlen if the recipient is busy.\n    // (e.g. fwrite(): Send of 577 bytes failed with errno=35 Resource temporarily unavailable)\n    $bytes_written = 0;\n    while ($bytes_written < strlen($data)) {\n        $n = @fwrite($stream, substr($data, $bytes_written));\n        if ($n === false) {\n            $write_streams = [$stream];\n            $read_streams = [];\n            $except_streams = [];\n            /* Wait for up to 10 seconds for the stream to be ready to write again. */\n            $result = stream_select($read_streams, $write_streams, $except_streams, 10);\n            if (!$result) {\n                echo \"ERROR: send_message() stream_select() failed\\n\";\n                return false;\n            }\n            $n = @fwrite($stream, substr($data, $bytes_written));\n            if ($n === false) {\n                echo \"ERROR: send_message() Failed to write chunk after stream_select: \" . error_get_last()['message'] . \"\\n\";\n                return false;\n            }\n        }\n        $bytes_written += $n;\n    }\n    return $bytes_written;\n}\n\nfunction send_message($stream, array $message): void\n{\n    $blocking = stream_get_meta_data($stream)[\"blocked\"];\n    stream_set_blocking($stream, true);\n    safe_fwrite($stream, base64_encode(serialize($message)) . \"\\n\");\n    stream_set_blocking($stream, $blocking);\n}\n\nfunction kill_children(array $children): void\n{\n    foreach ($children as $child) {\n        if ($child) {\n            proc_terminate($child);\n        }\n    }\n}\n\nfunction run_worker(): void\n{\n    global $workerID, $workerSock;\n\n    global $junit;\n\n    $sockUri = getenv(\"TEST_PHP_URI\");\n\n    $workerSock = stream_socket_client($sockUri, $_, $_, 5) or error(\"Couldn't connect to $sockUri\");\n\n    $greeting = fgets($workerSock);\n    $greeting = unserialize(base64_decode($greeting)) or die(\"Could not decode greeting\\n\");\n    if ($greeting[\"type\"] !== \"hello\") {\n        error(\"Unexpected greeting of type $greeting[type]\");\n    }\n\n    set_error_handler(function (int $errno, string $errstr, string $errfile, int $errline) use ($workerSock): bool {\n        if (error_reporting() & $errno) {\n            send_message($workerSock, compact('errno', 'errstr', 'errfile', 'errline') + [\n                'type' => 'php_error'\n            ]);\n        }\n\n        return true;\n    });\n\n    foreach ($greeting[\"GLOBALS\"] as $var => $value) {\n        if ($var !== \"workerID\" && $var !== \"workerSock\" && $var !== \"GLOBALS\") {\n            $GLOBALS[$var] = $value;\n        }\n    }\n    foreach ($greeting[\"constants\"] as $const => $value) {\n        define($const, $value);\n    }\n\n    send_message($workerSock, [\n        \"type\" => \"hello_reply\",\n        \"workerID\" => $workerID\n    ]);\n\n    send_message($workerSock, [\n        \"type\" => \"ready\"\n    ]);\n\n    while (($command = fgets($workerSock))) {\n        $command = unserialize(base64_decode($command));\n\n        switch ($command[\"type\"]) {\n            case \"run_tests\":\n                run_all_tests($command[\"test_files\"], $command[\"env\"], $command[\"redir_tested\"]);\n                send_message($workerSock, [\n                    \"type\" => \"tests_finished\",\n                    \"junit\" => $junit->isEnabled() ? $junit : null,\n                ]);\n                $junit->clear();\n                break;\n            default:\n                send_message($workerSock, [\n                    \"type\" => \"error\",\n                    \"msg\" => \"Unrecognised message type: $command[type]\"\n                ]);\n                break 2;\n        }\n    }\n}\n\n//\n//  Show file or result block\n//\nfunction show_file_block(string $file, string $block, ?string $section = null): void\n{\n    global $cfg;\n    global $colorize;\n\n    if ($cfg['show'][$file]) {\n        if (is_null($section)) {\n            $section = strtoupper($file);\n        }\n        if ($section === 'DIFF' && $colorize) {\n            // '-' is Light Red for removal, '+' is Light Green for addition\n            $block = preg_replace('/^[0-9]+\\-\\s.*$/m', \"\\e[1;31m\\\\0\\e[0m\", $block);\n            $block = preg_replace('/^[0-9]+\\+\\s.*$/m', \"\\e[1;32m\\\\0\\e[0m\", $block);\n        }\n\n        echo \"\\n========\" . $section . \"========\\n\";\n        echo rtrim($block);\n        echo \"\\n========DONE========\\n\";\n    }\n}\n\nfunction skip_test(string $tested, string $tested_file, string $shortname, string $reason): string\n{\n    global $junit;\n\n    show_result('SKIP', $tested, $tested_file, \"reason: $reason\");\n    $junit->initSuite($junit->getSuiteName($shortname));\n    $junit->markTestAs('SKIP', $shortname, $tested, 0, $reason);\n    return 'SKIPPED';\n}\n\n//\n//  Run an individual test case.\n//\n/**\n * @param string|array $file\n */\nfunction run_test(string $php, $file, array $env): string\n{\n    global $log_format, $ini_overwrites, $PHP_FAILED_TESTS;\n    global $pass_options, $DETAILED, $IN_REDIRECT, $test_cnt, $test_idx;\n    global $valgrind, $temp_source, $temp_target, $cfg, $environment;\n    global $no_clean;\n    global $SHOW_ONLY_GROUPS;\n    global $no_file_cache;\n    global $slow_min_ms;\n    global $preload, $file_cache;\n    global $num_repeats;\n    // Parallel testing\n    global $workerID;\n    global $show_progress;\n\n    // Temporary\n    /** @var JUnit $junit */\n    global $junit;\n\n    static $skipCache;\n    if (!$skipCache) {\n        $enableSkipCache = !($env['DISABLE_SKIP_CACHE'] ?? '0');\n        $skipCache = new SkipCache($enableSkipCache, $cfg['keep']['skip']);\n    }\n\n    $orig_php = $php;\n    $php = escapeshellarg($php);\n\n    $retried = false;\nretry:\n\n    $org_file = $file;\n\n    $php_cgi = $env['TEST_PHP_CGI_EXECUTABLE'] ?? null;\n    $phpdbg = $env['TEST_PHPDBG_EXECUTABLE'] ?? null;\n\n    if (is_array($file)) {\n        $file = $file[0];\n    }\n\n    if ($DETAILED) {\n        echo \"\n=================\nTEST $file\n\";\n    }\n\n    $shortname = str_replace(TEST_PHP_SRCDIR . '/', '', $file);\n    $tested_file = $shortname;\n\n    try {\n        $test = new TestFile($file, (bool)$IN_REDIRECT);\n    } catch (BorkageException $ex) {\n        show_result(\"BORK\", $ex->getMessage(), $tested_file);\n        $PHP_FAILED_TESTS['BORKED'][] = [\n            'name' => $file,\n            'test_name' => '',\n            'output' => '',\n            'diff' => '',\n            'info' => \"{$ex->getMessage()} [$file]\",\n        ];\n\n        $junit->markTestAs('BORK', $shortname, $tested_file, 0, $ex->getMessage());\n        return 'BORKED';\n    }\n\n    $tested = $test->getName();\n\n    if ($test->hasSection('FILE_EXTERNAL')) {\n        if ($num_repeats > 1) {\n            return skip_test($tested, $tested_file, $shortname, 'Test with FILE_EXTERNAL might not be repeatable');\n        }\n    }\n\n    if ($test->hasSection('CAPTURE_STDIO')) {\n        $capture = $test->getSection('CAPTURE_STDIO');\n        $captureStdIn = stripos($capture, 'STDIN') !== false;\n        $captureStdOut = stripos($capture, 'STDOUT') !== false;\n        $captureStdErr = stripos($capture, 'STDERR') !== false;\n    } else {\n        $captureStdIn = true;\n        $captureStdOut = true;\n        $captureStdErr = true;\n    }\n    if ($captureStdOut && $captureStdErr) {\n        $cmdRedirect = ' 2>&1';\n    } else {\n        $cmdRedirect = '';\n    }\n\n    /* For GET/POST/PUT tests, check if cgi sapi is available and if it is, use it. */\n    $uses_cgi = false;\n    if ($test->isCGI()) {\n        if (!$php_cgi) {\n            return skip_test($tested, $tested_file, $shortname, 'CGI not available');\n        }\n        $php = escapeshellarg($php_cgi) . ' -C ';\n        $uses_cgi = true;\n        if ($num_repeats > 1) {\n            return skip_test($tested, $tested_file, $shortname, 'CGI does not support --repeat');\n        }\n    }\n\n    /* For phpdbg tests, check if phpdbg sapi is available and if it is, use it. */\n    $extra_options = '';\n    if ($test->hasSection('PHPDBG')) {\n        if (isset($phpdbg)) {\n            $php = escapeshellarg($phpdbg) . ' -qIb';\n\n            // Additional phpdbg command line options for sections that need to\n            // be run straight away. For example, EXTENSIONS, SKIPIF, CLEAN.\n            $extra_options = '-rr';\n        } else {\n            return skip_test($tested, $tested_file, $shortname, 'phpdbg not available');\n        }\n        if ($num_repeats > 1) {\n            return skip_test($tested, $tested_file, $shortname, 'phpdbg does not support --repeat');\n        }\n    }\n\n    foreach (['CLEAN', 'STDIN', 'CAPTURE_STDIO'] as $section) {\n        if ($test->hasSection($section)) {\n            if ($num_repeats > 1) {\n                return skip_test($tested, $tested_file, $shortname, \"Test with $section might not be repeatable\");\n            }\n        }\n    }\n\n    if ($show_progress && !$workerID) {\n        show_test($test_idx, $shortname);\n    }\n\n    if (is_array($IN_REDIRECT)) {\n        $temp_dir = $test_dir = $IN_REDIRECT['dir'];\n    } else {\n        $temp_dir = $test_dir = realpath(dirname($file));\n    }\n\n    if ($temp_source && $temp_target) {\n        $temp_dir = str_replace($temp_source, $temp_target, $temp_dir);\n    }\n\n    $main_file_name = basename($file, 'phpt');\n\n    $diff_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'diff';\n    $log_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'log';\n    $exp_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'exp';\n    $output_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'out';\n    $memcheck_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'mem';\n    $sh_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'sh';\n    $temp_file = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'php';\n    $test_file = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'php';\n    $temp_skipif = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'skip.php';\n    $test_skipif = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'skip.php';\n    $temp_clean = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'clean.php';\n    $test_clean = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'clean.php';\n    $preload_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'preload.php';\n    $tmp_post = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'post';\n    $tmp_relative_file = str_replace(__DIR__ . DIRECTORY_SEPARATOR, '', $test_file) . 't';\n\n    if ($temp_source && $temp_target) {\n        $temp_skipif .= 's';\n        $temp_file .= 's';\n        $temp_clean .= 's';\n        $copy_file = $temp_dir . DIRECTORY_SEPARATOR . basename($file) . '.phps';\n\n        if (!is_dir(dirname($copy_file))) {\n            mkdir(dirname($copy_file), 0777, true) or error(\"Cannot create output directory - \" . dirname($copy_file));\n        }\n\n        if ($test->hasSection('FILE')) {\n            save_text($copy_file, $test->getSection('FILE'));\n        }\n    }\n\n    if (is_array($IN_REDIRECT)) {\n        $tested = $IN_REDIRECT['prefix'] . ' ' . $tested;\n        $tested_file = $tmp_relative_file;\n        $shortname = str_replace(TEST_PHP_SRCDIR . '/', '', $tested_file);\n    }\n\n    // unlink old test results\n    @unlink($diff_filename);\n    @unlink($log_filename);\n    @unlink($exp_filename);\n    @unlink($output_filename);\n    @unlink($memcheck_filename);\n    @unlink($sh_filename);\n    @unlink($temp_file);\n    @unlink($test_file);\n    @unlink($temp_skipif);\n    @unlink($test_skipif);\n    @unlink($tmp_post);\n    @unlink($temp_clean);\n    @unlink($test_clean);\n    @unlink($preload_filename);\n\n    // Reset environment from any previous test.\n    $env['REDIRECT_STATUS'] = '';\n    $env['QUERY_STRING'] = '';\n    $env['PATH_TRANSLATED'] = '';\n    $env['SCRIPT_FILENAME'] = '';\n    $env['REQUEST_METHOD'] = '';\n    $env['CONTENT_TYPE'] = '';\n    $env['CONTENT_LENGTH'] = '';\n    $env['TZ'] = '';\n\n    if ($test->sectionNotEmpty('ENV')) {\n        $env_str = str_replace('{PWD}', dirname($file), $test->getSection('ENV'));\n        foreach (explode(\"\\n\", $env_str) as $e) {\n            $e = explode('=', trim($e), 2);\n\n            if (!empty($e[0]) && isset($e[1])) {\n                $env[$e[0]] = $e[1];\n            }\n        }\n    }\n\n    // Default ini settings\n    $ini_settings = $workerID ? ['opcache.cache_id' => \"worker$workerID\"] : [];\n\n    // Additional required extensions\n    $extensions = [];\n    if ($test->hasSection('EXTENSIONS')) {\n        $extensions = preg_split(\"/[\\n\\r]+/\", trim($test->getSection('EXTENSIONS')));\n    }\n    if (is_array($IN_REDIRECT) && $IN_REDIRECT['EXTENSIONS'] != []) {\n        $extensions = array_merge($extensions, $IN_REDIRECT['EXTENSIONS']);\n    }\n\n    /* Load required extensions */\n    if ($extensions != []) {\n        $ext_params = [];\n        settings2array($ini_overwrites, $ext_params);\n        $ext_params = settings2params($ext_params);\n        [$ext_dir, $loaded] = $skipCache->getExtensions(\"$orig_php $pass_options $extra_options $ext_params $no_file_cache\");\n        $ext_prefix = IS_WINDOWS ? \"php_\" : \"\";\n        $missing = [];\n        foreach ($extensions as $req_ext) {\n            if (!in_array($req_ext, $loaded, true)) {\n                if ($req_ext == 'opcache' || $req_ext == 'xdebug') {\n                    $ext_file = $ext_dir . DIRECTORY_SEPARATOR . $ext_prefix . $req_ext . '.' . PHP_SHLIB_SUFFIX;\n                    $ini_settings['zend_extension'][] = $ext_file;\n                } else {\n                    $ext_file = $ext_dir . DIRECTORY_SEPARATOR . $ext_prefix . $req_ext . '.' . PHP_SHLIB_SUFFIX;\n                    $ini_settings['extension'][] = $ext_file;\n                }\n                if (!is_readable($ext_file)) {\n                    $missing[] = $req_ext;\n                }\n            }\n        }\n        if ($missing) {\n            $message = 'Required extension' . (count($missing) > 1 ? 's' : '')\n                . ' missing: ' . implode(', ', $missing);\n            return skip_test($tested, $tested_file, $shortname, $message);\n        }\n    }\n\n    // additional ini overwrites\n    //$ini_overwrites[] = 'setting=value';\n    settings2array($ini_overwrites, $ini_settings);\n\n    $orig_ini_settings = settings2params($ini_settings);\n\n    if ($file_cache !== null) {\n        $ini_settings['opcache.file_cache'] = '/tmp';\n        // Make sure warnings still show up on the second run.\n        $ini_settings['opcache.record_warnings'] = '1';\n        // File cache is currently incompatible with JIT.\n        $ini_settings['opcache.jit'] = '0';\n        if ($file_cache === 'use') {\n            // Disable timestamp validation in order to fetch from file cache,\n            // even though all the files are re-created.\n            $ini_settings['opcache.validate_timestamps'] = '0';\n        }\n    } else if ($num_repeats > 1) {\n        // Make sure warnings still show up on the second run.\n        $ini_settings['opcache.record_warnings'] = '1';\n    }\n\n    // Any special ini settings\n    // these may overwrite the test defaults...\n    if ($test->hasSection('INI')) {\n        $ini = str_replace('{PWD}', dirname($file), $test->getSection('INI'));\n        $ini = str_replace('{TMP}', sys_get_temp_dir(), $ini);\n        $replacement = IS_WINDOWS ? '\"' . PHP_BINARY . ' -r \\\"while ($in = fgets(STDIN)) echo $in;\\\" > $1\"' : 'tee $1 >/dev/null';\n        $ini = preg_replace('/{MAIL:(\\S+)}/', $replacement, $ini);\n        $skip = false;\n        $ini = preg_replace_callback('/{ENV:(\\S+)}/', function ($m) use (&$skip) {\n            $name = $m[1];\n            $value = getenv($name);\n            if ($value === false) {\n                $skip = sprintf('Environment variable %s is not set', $name);\n                return '';\n            }\n            return $value;\n        }, $ini);\n        if ($skip !== false) {\n            return skip_test($tested, $tested_file, $shortname, $skip);\n        }\n        settings2array(preg_split(\"/[\\n\\r]+/\", $ini), $ini_settings);\n\n        if (isset($ini_settings['opcache.opt_debug_level'])) {\n            if ($num_repeats > 1) {\n                return skip_test($tested, $tested_file, $shortname, 'opt_debug_level tests are not repeatable');\n            }\n        }\n    }\n\n    $ini_settings = settings2params($ini_settings);\n\n    $env['TEST_PHP_EXTRA_ARGS'] = $pass_options . ' ' . $ini_settings;\n\n    // Check if test should be skipped.\n    $info = '';\n    $warn = false;\n\n    if ($test->sectionNotEmpty('SKIPIF')) {\n        show_file_block('skip', $test->getSection('SKIPIF'));\n        $extra = !IS_WINDOWS ?\n            \"unset REQUEST_METHOD; unset QUERY_STRING; unset PATH_TRANSLATED; unset SCRIPT_FILENAME; unset REQUEST_METHOD;\" : \"\";\n\n        if ($valgrind) {\n            $env['USE_ZEND_ALLOC'] = '0';\n            $env['ZEND_DONT_UNLOAD_MODULES'] = 1;\n        }\n\n        $junit->startTimer($shortname);\n\n        $startTime = microtime(true);\n        $commandLine = \"$extra $php $pass_options $extra_options -q $orig_ini_settings $no_file_cache -d display_errors=1 -d display_startup_errors=0\";\n        $output = $skipCache->checkSkip($commandLine, $test->getSection('SKIPIF'), $test_skipif, $temp_skipif, $env);\n\n        $time = microtime(true) - $startTime;\n        $junit->stopTimer($shortname);\n\n        if ($time > $slow_min_ms / 1000) {\n            $PHP_FAILED_TESTS['SLOW'][] = [\n                'name' => $file,\n                'test_name' => 'SKIPIF of ' . $tested . \" [$tested_file]\",\n                'output' => '',\n                'diff' => '',\n                'info' => $time,\n            ];\n        }\n\n        if (!$cfg['keep']['skip']) {\n            @unlink($test_skipif);\n        }\n\n        if (!strncasecmp('skip', $output, 4)) {\n            if (preg_match('/^skip\\s*(.+)/i', $output, $m)) {\n                show_result('SKIP', $tested, $tested_file, \"reason: $m[1]\");\n            } else {\n                show_result('SKIP', $tested, $tested_file, '');\n            }\n\n            $message = !empty($m[1]) ? $m[1] : '';\n            $junit->markTestAs('SKIP', $shortname, $tested, null, $message);\n            return 'SKIPPED';\n        }\n\n        if (!strncasecmp('info', $output, 4) && preg_match('/^info\\s*(.+)/i', $output, $m)) {\n            $info = \" (info: $m[1])\";\n        } elseif (!strncasecmp('warn', $output, 4) && preg_match('/^warn\\s+(.+)/i', $output, $m)) {\n            $warn = true; /* only if there is a reason */\n            $info = \" (warn: $m[1])\";\n        } elseif (!strncasecmp('xfail', $output, 5)) {\n            // Pretend we have an XFAIL section\n            $test->setSection('XFAIL', ltrim(substr($output, 5)));\n        } elseif (!strncasecmp('xleak', $output, 5)) {\n            // Pretend we have an XLEAK section\n            $test->setSection('XLEAK', ltrim(substr($output, 5)));\n        } elseif (!strncasecmp('flaky', $output, 5)) {\n            // Pretend we have a FLAKY section\n            $test->setSection('FLAKY', ltrim(substr($output, 5)));\n        } elseif ($output !== '') {\n            show_result(\"BORK\", $output, $tested_file, 'reason: invalid output from SKIPIF');\n            $PHP_FAILED_TESTS['BORKED'][] = [\n                'name' => $file,\n                'test_name' => '',\n                'output' => '',\n                'diff' => '',\n                'info' => \"$output [$file]\",\n            ];\n\n            $junit->markTestAs('BORK', $shortname, $tested, null, $output);\n            return 'BORKED';\n        }\n    }\n\n    if (!extension_loaded(\"zlib\") && $test->hasAnySections(\"GZIP_POST\", \"DEFLATE_POST\")) {\n        $message = \"ext/zlib required\";\n        show_result('SKIP', $tested, $tested_file, \"reason: $message\");\n        $junit->markTestAs('SKIP', $shortname, $tested, null, $message);\n        return 'SKIPPED';\n    }\n\n    if ($test->hasSection('REDIRECTTEST')) {\n        $test_files = [];\n\n        $IN_REDIRECT = eval($test->getSection('REDIRECTTEST'));\n        $IN_REDIRECT['via'] = \"via [$shortname]\\n\\t\";\n        $IN_REDIRECT['dir'] = realpath(dirname($file));\n        $IN_REDIRECT['prefix'] = $tested;\n        $IN_REDIRECT['EXTENSIONS'] = $extensions;\n\n        if (!empty($IN_REDIRECT['TESTS'])) {\n            if (is_array($org_file)) {\n                $test_files[] = $org_file[1];\n            } else {\n                $GLOBALS['test_files'] = $test_files;\n                find_files($IN_REDIRECT['TESTS']);\n\n                foreach ($GLOBALS['test_files'] as $f) {\n                    $test_files[] = [$f, $file];\n                }\n            }\n            $test_cnt += count($test_files) - 1;\n            $test_idx--;\n\n            show_redirect_start($IN_REDIRECT['TESTS'], $tested, $tested_file);\n\n            // set up environment\n            $redirenv = array_merge($environment, $IN_REDIRECT['ENV']);\n            $redirenv['REDIR_TEST_DIR'] = realpath($IN_REDIRECT['TESTS']) . DIRECTORY_SEPARATOR;\n\n            usort($test_files, \"test_sort\");\n            run_all_tests($test_files, $redirenv, $tested);\n\n            show_redirect_ends($IN_REDIRECT['TESTS'], $tested, $tested_file);\n\n            // a redirected test never fails\n            $IN_REDIRECT = false;\n\n            $junit->markTestAs('PASS', $shortname, $tested);\n            return 'REDIR';\n        }\n\n        $bork_info = \"Redirect info must contain exactly one TEST string to be used as redirect directory.\";\n        show_result(\"BORK\", $bork_info, '', '');\n        $PHP_FAILED_TESTS['BORKED'][] = [\n            'name' => $file,\n            'test_name' => '',\n            'output' => '',\n            'diff' => '',\n            'info' => \"$bork_info [$file]\",\n        ];\n    }\n\n    if (is_array($org_file) || $test->hasSection('REDIRECTTEST')) {\n        if (is_array($org_file)) {\n            $file = $org_file[0];\n        }\n\n        $bork_info = \"Redirected test did not contain redirection info\";\n        show_result(\"BORK\", $bork_info, '', '');\n        $PHP_FAILED_TESTS['BORKED'][] = [\n            'name' => $file,\n            'test_name' => '',\n            'output' => '',\n            'diff' => '',\n            'info' => \"$bork_info [$file]\",\n        ];\n\n        $junit->markTestAs('BORK', $shortname, $tested, null, $bork_info);\n\n        return 'BORKED';\n    }\n\n    // We've satisfied the preconditions - run the test!\n    if ($test->hasSection('FILE')) {\n        show_file_block('php', $test->getSection('FILE'), 'TEST');\n        save_text($test_file, $test->getSection('FILE'), $temp_file);\n    } else {\n        $test_file = \"\";\n    }\n\n    if ($test->hasSection('GET')) {\n        $query_string = trim($test->getSection('GET'));\n    } else {\n        $query_string = '';\n    }\n\n    $env['REDIRECT_STATUS'] = '1';\n    if (empty($env['QUERY_STRING'])) {\n        $env['QUERY_STRING'] = $query_string;\n    }\n    if (empty($env['PATH_TRANSLATED'])) {\n        $env['PATH_TRANSLATED'] = $test_file;\n    }\n    if (empty($env['SCRIPT_FILENAME'])) {\n        $env['SCRIPT_FILENAME'] = $test_file;\n    }\n\n    if ($test->hasSection('COOKIE')) {\n        $env['HTTP_COOKIE'] = trim($test->getSection('COOKIE'));\n    } else {\n        $env['HTTP_COOKIE'] = '';\n    }\n\n    $args = $test->hasSection('ARGS') ? ' -- ' . $test->getSection('ARGS') : '';\n\n    if ($preload && !empty($test_file)) {\n        save_text($preload_filename, \"<?php opcache_compile_file('$test_file');\");\n        $local_pass_options = $pass_options;\n        unset($pass_options);\n        $pass_options = $local_pass_options;\n        $pass_options .= \" -d opcache.preload=\" . $preload_filename;\n    }\n\n    if ($test->sectionNotEmpty('POST_RAW')) {\n        $post = trim($test->getSection('POST_RAW'));\n        $raw_lines = explode(\"\\n\", $post);\n\n        $request = '';\n        $started = false;\n\n        foreach ($raw_lines as $line) {\n            if (empty($env['CONTENT_TYPE']) && preg_match('/^Content-Type:(.*)/i', $line, $res)) {\n                $env['CONTENT_TYPE'] = trim(str_replace(\"\\r\", '', $res[1]));\n                continue;\n            }\n\n            if ($started) {\n                $request .= \"\\n\";\n            }\n\n            $started = true;\n            $request .= $line;\n        }\n\n        $env['CONTENT_LENGTH'] = strlen($request);\n        if (empty($env['REQUEST_METHOD'])) {\n            $env['REQUEST_METHOD'] = 'POST';\n        }\n\n        if (empty($request)) {\n            $junit->markTestAs('BORK', $shortname, $tested, null, 'empty $request');\n            return 'BORKED';\n        }\n\n        save_text($tmp_post, $request);\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('PUT')) {\n        $post = trim($test->getSection('PUT'));\n        $raw_lines = explode(\"\\n\", $post);\n\n        $request = '';\n        $started = false;\n\n        foreach ($raw_lines as $line) {\n            if (empty($env['CONTENT_TYPE']) && preg_match('/^Content-Type:(.*)/i', $line, $res)) {\n                $env['CONTENT_TYPE'] = trim(str_replace(\"\\r\", '', $res[1]));\n                continue;\n            }\n\n            if ($started) {\n                $request .= \"\\n\";\n            }\n\n            $started = true;\n            $request .= $line;\n        }\n\n        $env['CONTENT_LENGTH'] = strlen($request);\n        $env['REQUEST_METHOD'] = 'PUT';\n\n        if (empty($request)) {\n            $junit->markTestAs('BORK', $shortname, $tested, null, 'empty $request');\n            return 'BORKED';\n        }\n\n        save_text($tmp_post, $request);\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('POST')) {\n        $post = trim($test->getSection('POST'));\n        $content_length = strlen($post);\n        save_text($tmp_post, $post);\n\n        $env['REQUEST_METHOD'] = 'POST';\n        if (empty($env['CONTENT_TYPE'])) {\n            $env['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';\n        }\n\n        if (empty($env['CONTENT_LENGTH'])) {\n            $env['CONTENT_LENGTH'] = $content_length;\n        }\n\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('GZIP_POST')) {\n        $post = trim($test->getSection('GZIP_POST'));\n        $post = gzencode($post, 9, FORCE_GZIP);\n        $env['HTTP_CONTENT_ENCODING'] = 'gzip';\n\n        save_text($tmp_post, $post);\n        $content_length = strlen($post);\n\n        $env['REQUEST_METHOD'] = 'POST';\n        $env['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';\n        $env['CONTENT_LENGTH'] = $content_length;\n\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('DEFLATE_POST')) {\n        $post = trim($test->getSection('DEFLATE_POST'));\n        $post = gzcompress($post, 9);\n        $env['HTTP_CONTENT_ENCODING'] = 'deflate';\n        save_text($tmp_post, $post);\n        $content_length = strlen($post);\n\n        $env['REQUEST_METHOD'] = 'POST';\n        $env['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';\n        $env['CONTENT_LENGTH'] = $content_length;\n\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } else {\n        $env['REQUEST_METHOD'] = 'GET';\n        $env['CONTENT_TYPE'] = '';\n        $env['CONTENT_LENGTH'] = '';\n\n        $repeat_option = $num_repeats > 1 ? \"--repeat $num_repeats\" : \"\";\n        $cmd = \"$php $pass_options $repeat_option $ini_settings -f \\\"$test_file\\\" $args$cmdRedirect\";\n    }\n\n    $orig_cmd = $cmd;\n    if ($valgrind) {\n        $env['USE_ZEND_ALLOC'] = '0';\n        $env['ZEND_DONT_UNLOAD_MODULES'] = 1;\n\n        $cmd = $valgrind->wrapCommand($cmd, $memcheck_filename, strpos($test_file, \"pcre\") !== false);\n    }\n\n    if ($test->hasSection('XLEAK')) {\n        $env['ZEND_ALLOC_PRINT_LEAKS'] = '0';\n        if (isset($env['SKIP_ASAN'])) {\n            // $env['LSAN_OPTIONS'] = 'detect_leaks=0';\n            /* For unknown reasons, LSAN_OPTIONS=detect_leaks=0 would occasionally not be picked up\n             * in CI. Skip the test with ASAN, as it's not worth investegating. */\n            return skip_test($tested, $tested_file, $shortname, 'xleak does not work with asan');\n        }\n    }\n\n    if ($DETAILED) {\n        echo \"\nCONTENT_LENGTH  = \" . $env['CONTENT_LENGTH'] . \"\nCONTENT_TYPE    = \" . $env['CONTENT_TYPE'] . \"\nPATH_TRANSLATED = \" . $env['PATH_TRANSLATED'] . \"\nQUERY_STRING    = \" . $env['QUERY_STRING'] . \"\nREDIRECT_STATUS = \" . $env['REDIRECT_STATUS'] . \"\nREQUEST_METHOD  = \" . $env['REQUEST_METHOD'] . \"\nSCRIPT_FILENAME = \" . $env['SCRIPT_FILENAME'] . \"\nHTTP_COOKIE     = \" . $env['HTTP_COOKIE'] . \"\nCOMMAND $cmd\n\";\n    }\n\n    $junit->startTimer($shortname);\n    $hrtime = hrtime();\n    $startTime = $hrtime[0] * 1000000000 + $hrtime[1];\n\n    $stdin = $test->hasSection('STDIN') ? $test->getSection('STDIN') : null;\n    $out = system_with_timeout($cmd, $env, $stdin, $captureStdIn, $captureStdOut, $captureStdErr);\n\n    $junit->stopTimer($shortname);\n    $hrtime = hrtime();\n    $time = $hrtime[0] * 1000000000 + $hrtime[1] - $startTime;\n    if ($time >= $slow_min_ms * 1000000) {\n        $PHP_FAILED_TESTS['SLOW'][] = [\n            'name' => $file,\n            'test_name' => $tested . \" [$tested_file]\",\n            'output' => '',\n            'diff' => '',\n            'info' => $time / 1000000000,\n        ];\n    }\n\n    // Remember CLEAN output to report borked test if it otherwise passes.\n    $clean_output = null;\n    if ((!$no_clean || $cfg['keep']['clean']) && $test->sectionNotEmpty('CLEAN')) {\n        show_file_block('clean', $test->getSection('CLEAN'));\n        save_text($test_clean, trim($test->getSection('CLEAN')), $temp_clean);\n\n        if (!$no_clean) {\n            $extra = !IS_WINDOWS ?\n                \"unset REQUEST_METHOD; unset QUERY_STRING; unset PATH_TRANSLATED; unset SCRIPT_FILENAME; unset REQUEST_METHOD;\" : \"\";\n            $clean_output = system_with_timeout(\"$extra $orig_php $pass_options -q $orig_ini_settings $no_file_cache \\\"$test_clean\\\"\", $env);\n        }\n\n        if (!$cfg['keep']['clean']) {\n            @unlink($test_clean);\n        }\n    }\n\n    $leaked = false;\n    $passed = false;\n\n    if ($valgrind) { // leak check\n        $leaked = filesize($memcheck_filename) > 0;\n\n        if (!$leaked) {\n            @unlink($memcheck_filename);\n        }\n    }\n\n    if ($num_repeats > 1) {\n        // In repeat mode, retain the output before the first execution,\n        // and of the last execution. Do this early, because the trimming below\n        // makes the newline handling complicated.\n        $separator1 = \"Executing for the first time...\\n\";\n        $separator1_pos = strpos($out, $separator1);\n        if ($separator1_pos !== false) {\n            $separator2 = \"Finished execution, repeating...\\n\";\n            $separator2_pos = strrpos($out, $separator2);\n            if ($separator2_pos !== false) {\n                $out = substr($out, 0, $separator1_pos)\n                     . substr($out, $separator2_pos + strlen($separator2));\n            } else {\n                $out = substr($out, 0, $separator1_pos)\n                     . substr($out, $separator1_pos + strlen($separator1));\n            }\n        }\n    }\n\n    // Does the output match what is expected?\n    $output = preg_replace(\"/\\r\\n/\", \"\\n\", trim($out));\n\n    /* when using CGI, strip the headers from the output */\n    $headers = [];\n\n    if ($uses_cgi && preg_match(\"/^(.*?)\\r?\\n\\r?\\n(.*)/s\", $out, $match)) {\n        $output = trim($match[2]);\n        $rh = preg_split(\"/[\\n\\r]+/\", $match[1]);\n\n        foreach ($rh as $line) {\n            if (strpos($line, ':') !== false) {\n                $line = explode(':', $line, 2);\n                $headers[trim($line[0])] = trim($line[1]);\n            }\n        }\n    }\n\n    $wanted_headers = null;\n    $output_headers = null;\n    $failed_headers = false;\n\n    if ($test->hasSection('EXPECTHEADERS')) {\n        $want = [];\n        $wanted_headers = [];\n        $lines = preg_split(\"/[\\n\\r]+/\", $test->getSection('EXPECTHEADERS'));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                $line = explode(':', $line, 2);\n                $want[trim($line[0])] = trim($line[1]);\n                $wanted_headers[] = trim($line[0]) . ': ' . trim($line[1]);\n            }\n        }\n\n        $output_headers = [];\n\n        foreach ($want as $k => $v) {\n            if (isset($headers[$k])) {\n                $output_headers[] = $k . ': ' . $headers[$k];\n            }\n\n            if (!isset($headers[$k]) || $headers[$k] != $v) {\n                $failed_headers = true;\n            }\n        }\n\n        $wanted_headers = implode(\"\\n\", $wanted_headers);\n        $output_headers = implode(\"\\n\", $output_headers);\n    }\n\n    show_file_block('out', $output);\n\n    if ($preload) {\n        $output = trim(preg_replace(\"/\\n?Warning: Can't preload [^\\n]*\\n?/\", \"\", $output));\n    }\n\n    if ($test->hasAnySections('EXPECTF', 'EXPECTREGEX')) {\n        if ($test->hasSection('EXPECTF')) {\n            $wanted = trim($test->getSection('EXPECTF'));\n        } else {\n            $wanted = trim($test->getSection('EXPECTREGEX'));\n        }\n\n        show_file_block('exp', $wanted);\n        $wanted_re = preg_replace('/\\r\\n/', \"\\n\", $wanted);\n\n        if ($test->hasSection('EXPECTF')) {\n            $wanted_re = expectf_to_regex($wanted_re);\n        }\n\n        if (preg_match('/^' . $wanted_re . '$/s', $output)) {\n            $passed = true;\n        }\n    } else {\n        $wanted = trim($test->getSection('EXPECT'));\n        $wanted = preg_replace('/\\r\\n/', \"\\n\", $wanted);\n        show_file_block('exp', $wanted);\n\n        // compare and leave on success\n        if (!strcmp($output, $wanted)) {\n            $passed = true;\n        }\n\n        $wanted_re = null;\n    }\n    if (!$passed && !$retried && error_may_be_retried($test, $output)) {\n        $retried = true;\n        goto retry;\n    }\n\n    if ($passed) {\n        if (!$cfg['keep']['php'] && !$leaked) {\n            @unlink($test_file);\n            @unlink($preload_filename);\n        }\n        @unlink($tmp_post);\n\n        if (!$leaked && !$failed_headers) {\n            // If the test passed and CLEAN produced output, report test as borked.\n            if ($clean_output) {\n                show_result(\"BORK\", $output, $tested_file, 'reason: invalid output from CLEAN');\n                $PHP_FAILED_TESTS['BORKED'][] = [\n                    'name' => $file,\n                    'test_name' => '',\n                    'output' => '',\n                    'diff' => '',\n                    'info' => \"$clean_output [$file]\",\n                ];\n\n                $junit->markTestAs('BORK', $shortname, $tested, null, $clean_output);\n                return 'BORKED';\n            }\n\n            if ($test->hasSection('XFAIL')) {\n                $warn = true;\n                $info = \" (warn: XFAIL section but test passes)\";\n            } elseif ($test->hasSection('XLEAK') && $valgrind) {\n                // XLEAK with ASAN completely disables LSAN so the test is expected to pass\n                $warn = true;\n                $info = \" (warn: XLEAK section but test passes)\";\n            } elseif ($retried) {\n                $warn = true;\n                $info = \" (warn: Test passed on retry attempt)\";\n            } else {\n                show_result(\"PASS\", $tested, $tested_file, '');\n                $junit->markTestAs('PASS', $shortname, $tested);\n                return 'PASSED';\n            }\n        }\n    }\n\n    // Test failed so we need to report details.\n    if ($failed_headers) {\n        $passed = false;\n        $wanted = $wanted_headers . \"\\n--HEADERS--\\n\" . $wanted;\n        $output = $output_headers . \"\\n--HEADERS--\\n\" . $output;\n\n        if (isset($wanted_re)) {\n            $wanted_re = preg_quote($wanted_headers . \"\\n--HEADERS--\\n\", '/') . $wanted_re;\n        }\n    }\n\n    $restype = [];\n\n    if ($leaked) {\n        $restype[] = $test->hasSection('XLEAK') ?\n                        'XLEAK' : 'LEAK';\n    }\n\n    if ($warn) {\n        $restype[] = 'WARN';\n    }\n\n    if (!$passed) {\n        if ($test->hasSection('XFAIL')) {\n            $restype[] = 'XFAIL';\n            $info = '  XFAIL REASON: ' . rtrim($test->getSection('XFAIL'));\n        } elseif ($test->hasSection('XLEAK') && $valgrind) {\n            // XLEAK with ASAN completely disables LSAN so the test is expected to pass\n            $restype[] = 'XLEAK';\n            $info = '  XLEAK REASON: ' . rtrim($test->getSection('XLEAK'));\n        } else {\n            $restype[] = 'FAIL';\n        }\n    }\n\n    if (!$passed) {\n        // write .exp\n        if (strpos($log_format, 'E') !== false && file_put_contents($exp_filename, $wanted) === false) {\n            error(\"Cannot create expected test output - $exp_filename\");\n        }\n\n        // write .out\n        if (strpos($log_format, 'O') !== false && file_put_contents($output_filename, $output) === false) {\n            error(\"Cannot create test output - $output_filename\");\n        }\n\n        // write .diff\n        if (!empty($environment['TEST_PHP_DIFF_CMD'])) {\n            $diff = generate_diff_external($environment['TEST_PHP_DIFF_CMD'], $exp_filename, $output_filename);\n        } else {\n            $diff = generate_diff($wanted, $wanted_re, $output);\n        }\n\n        if (is_array($IN_REDIRECT)) {\n            $orig_shortname = str_replace(TEST_PHP_SRCDIR . '/', '', $file);\n            $diff = \"# original source file: $orig_shortname\\n\" . $diff;\n        }\n        if (!$SHOW_ONLY_GROUPS || array_intersect($restype, $SHOW_ONLY_GROUPS)) {\n            show_file_block('diff', $diff);\n        }\n        if (strpos($log_format, 'D') !== false && file_put_contents($diff_filename, $diff) === false) {\n            error(\"Cannot create test diff - $diff_filename\");\n        }\n\n        // write .log\n        if (strpos($log_format, 'L') !== false && file_put_contents($log_filename, \"\n---- EXPECTED OUTPUT\n$wanted\n---- ACTUAL OUTPUT\n$output\n---- FAILED\n\") === false) {\n            error(\"Cannot create test log - $log_filename\");\n            error_report($file, $log_filename, $tested);\n        }\n    }\n\n    if (!$passed || $leaked) {\n        // write .sh\n        if (strpos($log_format, 'S') !== false) {\n            $env_lines = [];\n            foreach ($env as $env_var => $env_val) {\n                $env_lines[] = \"export $env_var=\" . escapeshellarg($env_val ?? \"\");\n            }\n            $exported_environment = \"\\n\" . implode(\"\\n\", $env_lines) . \"\\n\";\n            $sh_script = <<<SH\n#!/bin/sh\n{$exported_environment}\ncase \"$1\" in\n\"gdb\")\n    gdb --args {$orig_cmd}\n    ;;\n\"lldb\")\n    lldb -- {$orig_cmd}\n    ;;\n\"valgrind\")\n    USE_ZEND_ALLOC=0 valgrind $2 {$orig_cmd}\n    ;;\n\"rr\")\n    rr record $2 {$orig_cmd}\n    ;;\n*)\n    {$orig_cmd}\n    ;;\nesac\nSH;\n            if (file_put_contents($sh_filename, $sh_script) === false) {\n                error(\"Cannot create test shell script - $sh_filename\");\n            }\n            chmod($sh_filename, 0755);\n        }\n    }\n\n    if ($valgrind && $leaked && $cfg[\"show\"][\"mem\"]) {\n        show_file_block('mem', file_get_contents($memcheck_filename));\n    }\n\n    show_result(implode('&', $restype), $tested, $tested_file, $info);\n\n    foreach ($restype as $type) {\n        $PHP_FAILED_TESTS[$type . 'ED'][] = [\n            'name' => $file,\n            'test_name' => (is_array($IN_REDIRECT) ? $IN_REDIRECT['via'] : '') . $tested . \" [$tested_file]\",\n            'output' => $output_filename,\n            'diff' => $diff_filename,\n            'info' => $info,\n        ];\n    }\n\n    $diff = empty($diff) ? '' : preg_replace('/\\e/', '<esc>', $diff);\n\n    $junit->markTestAs($restype, $shortname, $tested, null, $info, $diff);\n\n    return $restype[0] . 'ED';\n}\n\nfunction is_flaky(TestFile $test): bool\n{\n    if ($test->hasSection('FLAKY')) {\n        return true;\n    }\n    if (!$test->hasSection('FILE')) {\n        return false;\n    }\n    $file = $test->getSection('FILE');\n    $flaky_functions = [\n        'disk_free_space',\n        'hrtime',\n        'microtime',\n        'sleep',\n        'usleep',\n    ];\n    $regex = '(\\b(' . implode('|', $flaky_functions) . ')\\()i';\n    return preg_match($regex, $file) === 1;\n}\n\nfunction is_flaky_output(string $output): bool\n{\n    $messages = [\n        '404: page not found',\n        'address already in use',\n        'connection refused',\n        'deadlock',\n        'mailbox already exists',\n        'timed out',\n    ];\n    $regex = '(\\b(' . implode('|', $messages) . ')\\b)i';\n    return preg_match($regex, $output) === 1;\n}\n\nfunction error_may_be_retried(TestFile $test, string $output): bool\n{\n    return is_flaky_output($output)\n        || is_flaky($test);\n}\n\nfunction expectf_to_regex(?string $wanted): string\n{\n    $wanted_re = $wanted ?? '';\n\n    $wanted_re = preg_replace('/\\r\\n/', \"\\n\", $wanted_re);\n\n    // do preg_quote, but miss out any %r delimited sections\n    $temp = \"\";\n    $r = \"%r\";\n    $startOffset = 0;\n    $length = strlen($wanted_re);\n    while ($startOffset < $length) {\n        $start = strpos($wanted_re, $r, $startOffset);\n        if ($start !== false) {\n            // we have found a start tag\n            $end = strpos($wanted_re, $r, $start + 2);\n            if ($end === false) {\n                // unbalanced tag, ignore it.\n                $end = $start = $length;\n            }\n        } else {\n            // no more %r sections\n            $start = $end = $length;\n        }\n        // quote a non re portion of the string\n        $temp .= preg_quote(substr($wanted_re, $startOffset, $start - $startOffset), '/');\n        // add the re unquoted.\n        if ($end > $start) {\n            $temp .= '(' . substr($wanted_re, $start + 2, $end - $start - 2) . ')';\n        }\n        $startOffset = $end + 2;\n    }\n    $wanted_re = $temp;\n\n    return strtr($wanted_re, [\n        '%e' => preg_quote(DIRECTORY_SEPARATOR, '/'),\n        '%s' => '[^\\r\\n]+',\n        '%S' => '[^\\r\\n]*',\n        '%a' => '.+?',\n        '%A' => '.*?',\n        '%w' => '\\s*',\n        '%i' => '[+-]?\\d+',\n        '%d' => '\\d+',\n        '%x' => '[0-9a-fA-F]+',\n        '%f' => '[+-]?(?:\\d+|(?=\\.\\d))(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?',\n        '%c' => '.',\n        '%0' => '\\x00',\n    ]);\n}\n/**\n * Map \"Zend OPcache\" to \"opcache\" and convert all ext names to lowercase.\n */\nfunction remap_loaded_extensions_names(array $names): array\n{\n    $exts = [];\n    foreach ($names as $name) {\n        if ($name === 'Core') {\n            continue;\n        }\n        $exts[] = ['Zend OPcache' => 'opcache'][$name] ?? strtolower($name);\n    }\n\n    return $exts;\n}\n\nfunction generate_diff_external(string $diff_cmd, string $exp_file, string $output_file): string\n{\n    $retval = shell_exec(\"{$diff_cmd} {$exp_file} {$output_file}\");\n\n    return is_string($retval) ? $retval : 'Could not run external diff tool set through TEST_PHP_DIFF_CMD environment variable';\n}\n\nfunction generate_diff(string $wanted, ?string $wanted_re, string $output): string\n{\n    $w = explode(\"\\n\", $wanted);\n    $o = explode(\"\\n\", $output);\n    $is_regex = $wanted_re !== null;\n\n    $differ = new Differ(function ($expected, $new) use ($is_regex) {\n        if (!$is_regex) {\n            return $expected === $new;\n        }\n        $regex = '/^' . expectf_to_regex($expected). '$/s';\n        return preg_match($regex, $new);\n    });\n    return $differ->diff($w, $o);\n}\n\nfunction error(string $message): void\n{\n    echo \"ERROR: {$message}\\n\";\n    exit(1);\n}\n\nfunction settings2array(array $settings, array &$ini_settings): void\n{\n    foreach ($settings as $setting) {\n        if (strpos($setting, '=') !== false) {\n            $setting = explode(\"=\", $setting, 2);\n            $name = trim($setting[0]);\n            $value = trim($setting[1]);\n\n            if ($name == 'extension' || $name == 'zend_extension') {\n                if (!isset($ini_settings[$name])) {\n                    $ini_settings[$name] = [];\n                }\n\n                $ini_settings[$name][] = $value;\n            } else {\n                $ini_settings[$name] = $value;\n            }\n        }\n    }\n}\n\nfunction settings2params(array $ini_settings): string\n{\n    $settings = '';\n\n    foreach ($ini_settings as $name => $value) {\n        if (is_array($value)) {\n            foreach ($value as $val) {\n                $val = addslashes($val);\n                $settings .= \" -d \\\"$name=$val\\\"\";\n            }\n        } else {\n            if (IS_WINDOWS && !empty($value) && $value[0] == '\"') {\n                $len = strlen($value);\n\n                if ($value[$len - 1] == '\"') {\n                    $value[0] = \"'\";\n                    $value[$len - 1] = \"'\";\n                }\n            } else {\n                $value = addslashes($value);\n            }\n\n            $settings .= \" -d \\\"$name=$value\\\"\";\n        }\n    }\n\n    return $settings;\n}\n\nfunction compute_summary(): void\n{\n    global $n_total, $test_results, $ignored_by_ext, $sum_results, $percent_results;\n\n    $n_total = count($test_results);\n    $n_total += count($ignored_by_ext);\n    $sum_results = [\n        'PASSED' => 0,\n        'WARNED' => 0,\n        'SKIPPED' => 0,\n        'FAILED' => 0,\n        'BORKED' => 0,\n        'LEAKED' => 0,\n        'XFAILED' => 0,\n        'XLEAKED' => 0\n    ];\n\n    foreach ($test_results as $v) {\n        $sum_results[$v]++;\n    }\n\n    $sum_results['SKIPPED'] += count($ignored_by_ext);\n    $percent_results = [];\n\n    foreach ($sum_results as $v => $n) {\n        $percent_results[$v] = (100.0 * $n) / $n_total;\n    }\n}\n\nfunction get_summary(bool $show_ext_summary): string\n{\n    global $exts_skipped, $exts_tested, $n_total, $sum_results, $percent_results, $end_time, $start_time, $failed_test_summary, $PHP_FAILED_TESTS, $valgrind;\n\n    $x_total = $n_total - $sum_results['SKIPPED'] - $sum_results['BORKED'];\n\n    if ($x_total) {\n        $x_warned = (100.0 * $sum_results['WARNED']) / $x_total;\n        $x_failed = (100.0 * $sum_results['FAILED']) / $x_total;\n        $x_xfailed = (100.0 * $sum_results['XFAILED']) / $x_total;\n        $x_xleaked = (100.0 * $sum_results['XLEAKED']) / $x_total;\n        $x_leaked = (100.0 * $sum_results['LEAKED']) / $x_total;\n        $x_passed = (100.0 * $sum_results['PASSED']) / $x_total;\n    } else {\n        $x_warned = $x_failed = $x_passed = $x_leaked = $x_xfailed = $x_xleaked = 0;\n    }\n\n    $summary = '';\n\n    if ($show_ext_summary) {\n        $summary .= '\n=====================================================================\nTEST RESULT SUMMARY\n---------------------------------------------------------------------\nExts skipped    : ' . sprintf('%5d', count($exts_skipped)) . ($exts_skipped ? ' (' . implode(', ', $exts_skipped) . ')' : '') . '\nExts tested     : ' . sprintf('%5d', count($exts_tested)) . '\n---------------------------------------------------------------------\n';\n    }\n\n    $summary .= '\nNumber of tests : ' . sprintf('%5d', $n_total) . '          ' . sprintf('%8d', $x_total);\n\n    if ($sum_results['BORKED']) {\n        $summary .= '\nTests borked    : ' . sprintf('%5d (%5.1f%%)', $sum_results['BORKED'], $percent_results['BORKED']) . ' --------';\n    }\n\n    $summary .= '\nTests skipped   : ' . sprintf('%5d (%5.1f%%)', $sum_results['SKIPPED'], $percent_results['SKIPPED']) . ' --------\nTests warned    : ' . sprintf('%5d (%5.1f%%)', $sum_results['WARNED'], $percent_results['WARNED']) . ' ' . sprintf('(%5.1f%%)', $x_warned) . '\nTests failed    : ' . sprintf('%5d (%5.1f%%)', $sum_results['FAILED'], $percent_results['FAILED']) . ' ' . sprintf('(%5.1f%%)', $x_failed);\n\n    if ($sum_results['XFAILED']) {\n        $summary .= '\nExpected fail   : ' . sprintf('%5d (%5.1f%%)', $sum_results['XFAILED'], $percent_results['XFAILED']) . ' ' . sprintf('(%5.1f%%)', $x_xfailed);\n    }\n\n    if ($valgrind) {\n        $summary .= '\nTests leaked    : ' . sprintf('%5d (%5.1f%%)', $sum_results['LEAKED'], $percent_results['LEAKED']) . ' ' . sprintf('(%5.1f%%)', $x_leaked);\n        if ($sum_results['XLEAKED']) {\n            $summary .= '\nExpected leak   : ' . sprintf('%5d (%5.1f%%)', $sum_results['XLEAKED'], $percent_results['XLEAKED']) . ' ' . sprintf('(%5.1f%%)', $x_xleaked);\n        }\n    }\n\n    $summary .= '\nTests passed    : ' . sprintf('%5d (%5.1f%%)', $sum_results['PASSED'], $percent_results['PASSED']) . ' ' . sprintf('(%5.1f%%)', $x_passed) . '\n---------------------------------------------------------------------\nTime taken      : ' . sprintf('%5.3f seconds', ($end_time - $start_time) / 1e9) . '\n=====================================================================\n';\n    $failed_test_summary = '';\n\n    if (count($PHP_FAILED_TESTS['SLOW'])) {\n        usort($PHP_FAILED_TESTS['SLOW'], function (array $a, array $b): int {\n            return $a['info'] < $b['info'] ? 1 : -1;\n        });\n\n        $failed_test_summary .= '\n=====================================================================\nSLOW TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['SLOW'] as $failed_test_data) {\n            $failed_test_summary .= sprintf('(%.3f s) ', $failed_test_data['info']) . $failed_test_data['test_name'] . \"\\n\";\n        }\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['BORKED'])) {\n        $failed_test_summary .= '\n=====================================================================\nBORKED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['BORKED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['info'] . \"\\n\";\n        }\n\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['FAILED'])) {\n        $failed_test_summary .= '\n=====================================================================\nFAILED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['FAILED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n    if (count($PHP_FAILED_TESTS['WARNED'])) {\n        $failed_test_summary .= '\n=====================================================================\nWARNED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['WARNED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['LEAKED'])) {\n        $failed_test_summary .= '\n=====================================================================\nLEAKED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['LEAKED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if ($failed_test_summary && !getenv('NO_PHPTEST_SUMMARY')) {\n        $summary .= $failed_test_summary;\n    }\n\n    return $summary;\n}\n\nfunction show_start(int $start_timestamp): void\n{\n    echo \"TIME START \" . date('Y-m-d H:i:s', $start_timestamp) . \"\\n=====================================================================\\n\";\n}\n\nfunction show_end(int $start_timestamp, int|float $start_time, int|float $end_time): void\n{\n    echo \"=====================================================================\\nTIME END \" . date('Y-m-d H:i:s', $start_timestamp + (int)(($end_time - $start_time)/1e9)) . \"\\n\";\n}\n\nfunction show_summary(): void\n{\n    echo get_summary(true);\n}\n\nfunction show_redirect_start(string $tests, string $tested, string $tested_file): void\n{\n    global $SHOW_ONLY_GROUPS, $show_progress;\n\n    if (!$SHOW_ONLY_GROUPS || in_array('REDIRECT', $SHOW_ONLY_GROUPS)) {\n        echo \"REDIRECT $tests ($tested [$tested_file]) begin\\n\";\n    } elseif ($show_progress) {\n        clear_show_test();\n    }\n}\n\nfunction show_redirect_ends(string $tests, string $tested, string $tested_file): void\n{\n    global $SHOW_ONLY_GROUPS, $show_progress;\n\n    if (!$SHOW_ONLY_GROUPS || in_array('REDIRECT', $SHOW_ONLY_GROUPS)) {\n        echo \"REDIRECT $tests ($tested [$tested_file]) done\\n\";\n    } elseif ($show_progress) {\n        clear_show_test();\n    }\n}\n\nfunction show_test(int $test_idx, string $shortname): void\n{\n    global $test_cnt;\n    global $line_length;\n\n    $str = \"TEST $test_idx/$test_cnt [$shortname]\\r\";\n    $line_length = strlen($str);\n    echo $str;\n    flush();\n}\n\nfunction clear_show_test(): void\n{\n    global $line_length;\n    // Parallel testing\n    global $workerID;\n\n    if (!$workerID && isset($line_length)) {\n        // Write over the last line to avoid random trailing chars on next echo\n        echo str_repeat(\" \", $line_length), \"\\r\";\n    }\n}\n\nfunction parse_conflicts(string $text): array\n{\n    // Strip comments\n    $text = preg_replace('/#.*/', '', $text);\n    return array_map('trim', explode(\"\\n\", trim($text)));\n}\n\nfunction show_result(\n    string $result,\n    string $tested,\n    string $tested_file,\n    string $extra = ''\n): void {\n    global $SHOW_ONLY_GROUPS, $colorize, $show_progress;\n\n    if (!$SHOW_ONLY_GROUPS || in_array($result, $SHOW_ONLY_GROUPS)) {\n        if ($colorize) {\n            /* Use ANSI escape codes for coloring test result */\n            switch ( $result ) {\n                case 'PASS': // Light Green\n                    $color = \"\\e[1;32m{$result}\\e[0m\"; break;\n                case 'FAIL':\n                case 'BORK':\n                case 'LEAK':\n                case 'LEAK&FAIL':\n                    // Light Red\n                    $color = \"\\e[1;31m{$result}\\e[0m\"; break;\n                default: // Yellow\n                    $color = \"\\e[1;33m{$result}\\e[0m\"; break;\n            }\n\n            echo \"$color $tested [$tested_file] $extra\\n\";\n        } else {\n            echo \"$result $tested [$tested_file] $extra\\n\";\n        }\n    } elseif ($show_progress) {\n        clear_show_test();\n    }\n}\n\nclass BorkageException extends Exception\n{\n}\n\nclass JUnit\n{\n    private bool $enabled = true;\n    private $fp = null;\n    private array $suites = [];\n    private array $rootSuite = self::EMPTY_SUITE + ['name' => 'php'];\n\n    private const EMPTY_SUITE = [\n        'test_total' => 0,\n        'test_pass' => 0,\n        'test_fail' => 0,\n        'test_error' => 0,\n        'test_skip' => 0,\n        'test_warn' => 0,\n        'files' => [],\n        'execution_time' => 0,\n    ];\n\n    /**\n     * @throws Exception\n     */\n    public function __construct(array $env, int $workerID)\n    {\n        // Check whether a junit log is wanted.\n        $fileName = $env['TEST_PHP_JUNIT'] ?? null;\n        if (empty($fileName)) {\n            $this->enabled = false;\n            return;\n        }\n        if (!$workerID && !$this->fp = fopen($fileName, 'w')) {\n            throw new Exception(\"Failed to open $fileName for writing.\");\n        }\n    }\n\n    public function isEnabled(): bool\n    {\n        return $this->enabled;\n    }\n\n    public function clear(): void\n    {\n        $this->rootSuite = self::EMPTY_SUITE + ['name' => 'php'];\n        $this->suites = [];\n    }\n\n    public function saveXML(): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        $xml = '<' . '?' . 'xml version=\"1.0\" encoding=\"UTF-8\"' . '?' . '>' . PHP_EOL;\n        $xml .= sprintf(\n            '<testsuites name=\"%s\" tests=\"%s\" failures=\"%d\" errors=\"%d\" skip=\"%d\" time=\"%s\">' . PHP_EOL,\n            $this->rootSuite['name'],\n            $this->rootSuite['test_total'],\n            $this->rootSuite['test_fail'],\n            $this->rootSuite['test_error'],\n            $this->rootSuite['test_skip'],\n            $this->rootSuite['execution_time']\n        );\n        $xml .= $this->getSuitesXML();\n        $xml .= '</testsuites>';\n        fwrite($this->fp, $xml);\n    }\n\n    private function getSuitesXML(): string\n    {\n        $result = '';\n\n        foreach ($this->suites as $suite_name => $suite) {\n            $result .= sprintf(\n                '<testsuite name=\"%s\" tests=\"%s\" failures=\"%d\" errors=\"%d\" skip=\"%d\" time=\"%s\">' . PHP_EOL,\n                $suite['name'],\n                $suite['test_total'],\n                $suite['test_fail'],\n                $suite['test_error'],\n                $suite['test_skip'],\n                $suite['execution_time']\n            );\n\n            if (!empty($suite_name)) {\n                foreach ($suite['files'] as $file) {\n                    $result .= $this->rootSuite['files'][$file]['xml'];\n                }\n            }\n\n            $result .= '</testsuite>' . PHP_EOL;\n        }\n\n        return $result;\n    }\n\n    public function markTestAs(\n        $type,\n        string $file_name,\n        string $test_name,\n        ?int $time = null,\n        string $message = '',\n        string $details = ''\n    ): void {\n        if (!$this->enabled) {\n            return;\n        }\n\n        $suite = $this->getSuiteName($file_name);\n\n        $this->record($suite, 'test_total');\n\n        $time = $time ?? $this->getTimer($file_name);\n        $this->record($suite, 'execution_time', $time);\n\n        $escaped_details = htmlspecialchars($details, ENT_QUOTES, 'UTF-8');\n        $escaped_details = preg_replace_callback('/[\\0-\\x08\\x0B\\x0C\\x0E-\\x1F]/', function ($c) {\n            return sprintf('[[0x%02x]]', ord($c[0]));\n        }, $escaped_details);\n        $escaped_message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');\n\n        $escaped_test_name = htmlspecialchars($file_name . ' (' . $test_name . ')', ENT_QUOTES);\n        $this->rootSuite['files'][$file_name]['xml'] = \"<testcase name='$escaped_test_name' time='$time'>\\n\";\n\n        if (is_array($type)) {\n            $output_type = $type[0] . 'ED';\n            $temp = array_intersect(['XFAIL', 'XLEAK', 'FAIL', 'WARN'], $type);\n            $type = reset($temp);\n        } else {\n            $output_type = $type . 'ED';\n        }\n\n        if ('PASS' == $type || 'XFAIL' == $type || 'XLEAK' == $type) {\n            $this->record($suite, 'test_pass');\n        } elseif ('BORK' == $type) {\n            $this->record($suite, 'test_error');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<error type='$output_type' message='$escaped_message'/>\\n\";\n        } elseif ('SKIP' == $type) {\n            $this->record($suite, 'test_skip');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<skipped>$escaped_message</skipped>\\n\";\n        } elseif ('WARN' == $type) {\n            $this->record($suite, 'test_warn');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<warning>$escaped_message</warning>\\n\";\n        } elseif ('FAIL' == $type) {\n            $this->record($suite, 'test_fail');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<failure type='$output_type' message='$escaped_message'>$escaped_details</failure>\\n\";\n        } else {\n            $this->record($suite, 'test_error');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<error type='$output_type' message='$escaped_message'>$escaped_details</error>\\n\";\n        }\n\n        $this->rootSuite['files'][$file_name]['xml'] .= \"</testcase>\\n\";\n    }\n\n    private function record(string $suite, string $param, $value = 1): void\n    {\n        $this->rootSuite[$param] += $value;\n        $this->suites[$suite][$param] += $value;\n    }\n\n    private function getTimer(string $file_name)\n    {\n        if (!$this->enabled) {\n            return 0;\n        }\n\n        if (isset($this->rootSuite['files'][$file_name]['total'])) {\n            return number_format($this->rootSuite['files'][$file_name]['total'], 4);\n        }\n\n        return 0;\n    }\n\n    public function startTimer(string $file_name): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        if (!isset($this->rootSuite['files'][$file_name]['start'])) {\n            $this->rootSuite['files'][$file_name]['start'] = microtime(true);\n\n            $suite = $this->getSuiteName($file_name);\n            $this->initSuite($suite);\n            $this->suites[$suite]['files'][$file_name] = $file_name;\n        }\n    }\n\n    public function getSuiteName(string $file_name): string\n    {\n        return $this->pathToClassName(dirname($file_name));\n    }\n\n    private function pathToClassName(string $file_name): string\n    {\n        if (!$this->enabled) {\n            return '';\n        }\n\n        $ret = $this->rootSuite['name'];\n        $_tmp = [];\n\n        // lookup whether we're in the PHP source checkout\n        $max = 5;\n        if (is_file($file_name)) {\n            $dir = dirname(realpath($file_name));\n        } else {\n            $dir = realpath($file_name);\n        }\n        do {\n            array_unshift($_tmp, basename($dir));\n            $chk = $dir . DIRECTORY_SEPARATOR . \"main\" . DIRECTORY_SEPARATOR . \"php_version.h\";\n            $dir = dirname($dir);\n        } while (!file_exists($chk) && --$max > 0);\n        if (file_exists($chk)) {\n            if ($max) {\n                array_shift($_tmp);\n            }\n            foreach ($_tmp as $p) {\n                $ret .= \".\" . preg_replace(\",[^a-z0-9]+,i\", \".\", $p);\n            }\n            return $ret;\n        }\n\n        return $this->rootSuite['name'] . '.' . str_replace([DIRECTORY_SEPARATOR, '-'], '.', $file_name);\n    }\n\n    public function initSuite(string $suite_name): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        if (!empty($this->suites[$suite_name])) {\n            return;\n        }\n\n        $this->suites[$suite_name] = self::EMPTY_SUITE + ['name' => $suite_name];\n    }\n\n    /**\n     * @throws Exception\n     */\n    public function stopTimer(string $file_name): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        if (!isset($this->rootSuite['files'][$file_name]['start'])) {\n            throw new Exception(\"Timer for $file_name was not started!\");\n        }\n\n        if (!isset($this->rootSuite['files'][$file_name]['total'])) {\n            $this->rootSuite['files'][$file_name]['total'] = 0;\n        }\n\n        $start = $this->rootSuite['files'][$file_name]['start'];\n        $this->rootSuite['files'][$file_name]['total'] += microtime(true) - $start;\n        unset($this->rootSuite['files'][$file_name]['start']);\n    }\n\n    public function mergeResults(?JUnit $other): void\n    {\n        if (!$this->enabled || !$other) {\n            return;\n        }\n\n        $this->mergeSuites($this->rootSuite, $other->rootSuite);\n        foreach ($other->suites as $name => $suite) {\n            if (!isset($this->suites[$name])) {\n                $this->suites[$name] = $suite;\n                continue;\n            }\n\n            $this->mergeSuites($this->suites[$name], $suite);\n        }\n    }\n\n    private function mergeSuites(array &$dest, array $source): void\n    {\n        $dest['test_total'] += $source['test_total'];\n        $dest['test_pass']  += $source['test_pass'];\n        $dest['test_fail']  += $source['test_fail'];\n        $dest['test_error'] += $source['test_error'];\n        $dest['test_skip']  += $source['test_skip'];\n        $dest['test_warn']  += $source['test_warn'];\n        $dest['execution_time'] += $source['execution_time'];\n        $dest['files'] += $source['files'];\n    }\n}\n\nclass SkipCache\n{\n    private bool $enable;\n    private bool $keepFile;\n\n    private array $skips = [];\n    private array $extensions = [];\n\n    private int $hits = 0;\n    private int $misses = 0;\n    private int $extHits = 0;\n    private int $extMisses = 0;\n\n    public function __construct(bool $enable, bool $keepFile)\n    {\n        $this->enable = $enable;\n        $this->keepFile = $keepFile;\n    }\n\n    public function checkSkip(string $php, string $code, string $checkFile, string $tempFile, array $env): string\n    {\n        // Extension tests frequently use something like <?php require 'skipif.inc';\n        // for skip checks. This forces us to cache per directory to avoid pollution.\n        $dir = dirname($checkFile);\n        $key = \"$php => $dir\";\n\n        if (isset($this->skips[$key][$code])) {\n            $this->hits++;\n            if ($this->keepFile) {\n                save_text($checkFile, $code, $tempFile);\n            }\n            return $this->skips[$key][$code];\n        }\n\n        save_text($checkFile, $code, $tempFile);\n        $result = trim(system_with_timeout(\"$php \\\"$checkFile\\\"\", $env));\n        if (strpos($result, 'nocache') === 0) {\n            $result = '';\n        } else if ($this->enable) {\n            $this->skips[$key][$code] = $result;\n        }\n        $this->misses++;\n\n        if (!$this->keepFile) {\n            @unlink($checkFile);\n        }\n\n        return $result;\n    }\n\n    public function getExtensions(string $php): array\n    {\n        if (isset($this->extensions[$php])) {\n            $this->extHits++;\n            return $this->extensions[$php];\n        }\n\n        $extDir = shell_exec(\"$php -d display_errors=0 -r \\\"echo ini_get('extension_dir');\\\"\");\n        $extensionsNames = explode(\",\", shell_exec(\"$php -d display_errors=0 -r \\\"echo implode(',', get_loaded_extensions());\\\"\"));\n        $extensions = remap_loaded_extensions_names($extensionsNames);\n\n        $result = [$extDir, $extensions];\n        $this->extensions[$php] = $result;\n        $this->extMisses++;\n\n        return $result;\n    }\n}\n\nclass RuntestsValgrind\n{\n    protected string $header;\n    protected bool $version_3_8_0;\n    protected string $tool;\n\n    public function getHeader(): string\n    {\n        return $this->header;\n    }\n\n    public function __construct(array $environment, string $tool = 'memcheck')\n    {\n        $this->tool = $tool;\n        $header = system_with_timeout(\"valgrind --tool={$this->tool} --version\", $environment);\n        if (!$header) {\n            error(\"Valgrind returned no version info for {$this->tool}, cannot proceed.\\n\".\n                \"Please check if Valgrind is installed and the tool is named correctly.\");\n        }\n        $count = 0;\n        $version = preg_replace(\"/valgrind-(\\d+)\\.(\\d+)\\.(\\d+)([.\\w_-]+)?(\\s+)/\", '$1.$2.$3', $header, 1, $count);\n        if ($count != 1) {\n            error(\"Valgrind returned invalid version info (\\\"{$header}\\\") for {$this->tool}, cannot proceed.\");\n        }\n        $this->header = sprintf(\"%s (%s)\", trim($header), $this->tool);\n        $this->version_3_8_0 = version_compare($version, '3.8.0', '>=');\n    }\n\n    public function wrapCommand(string $cmd, string $memcheck_filename, bool $check_all): string\n    {\n        $vcmd = \"valgrind -q --tool={$this->tool} --trace-children=yes\";\n        if ($check_all) {\n            $vcmd .= ' --smc-check=all';\n        }\n\n        /* --vex-iropt-register-updates=allregs-at-mem-access is necessary for phpdbg watchpoint tests */\n        if ($this->version_3_8_0) {\n            return \"$vcmd --vex-iropt-register-updates=allregs-at-mem-access --log-file=$memcheck_filename $cmd\";\n        }\n        return \"$vcmd --vex-iropt-precise-memory-exns=yes --log-file=$memcheck_filename $cmd\";\n    }\n}\n\nclass TestFile\n{\n    private string $fileName;\n\n    private array $sections = ['TEST' => ''];\n\n    private const ALLOWED_SECTIONS = [\n        'EXPECT', 'EXPECTF', 'EXPECTREGEX', 'EXPECTREGEX_EXTERNAL', 'EXPECT_EXTERNAL', 'EXPECTF_EXTERNAL', 'EXPECTHEADERS',\n        'POST', 'POST_RAW', 'GZIP_POST', 'DEFLATE_POST', 'PUT', 'GET', 'COOKIE', 'ARGS',\n        'FILE', 'FILEEOF', 'FILE_EXTERNAL', 'REDIRECTTEST',\n        'CAPTURE_STDIO', 'STDIN', 'CGI', 'PHPDBG',\n        'INI', 'ENV', 'EXTENSIONS',\n        'SKIPIF', 'XFAIL', 'XLEAK', 'CLEAN',\n        'CREDITS', 'DESCRIPTION', 'CONFLICTS', 'WHITESPACE_SENSITIVE',\n        'FLAKY',\n    ];\n\n    /**\n     * @throws BorkageException\n     */\n    public function __construct(string $fileName, bool $inRedirect)\n    {\n        $this->fileName = $fileName;\n\n        $this->readFile();\n        $this->validateAndProcess($inRedirect);\n    }\n\n    public function hasSection(string $name): bool\n    {\n        return isset($this->sections[$name]);\n    }\n\n    public function hasAnySections(string ...$names): bool\n    {\n        foreach ($names as $section) {\n            if (isset($this->sections[$section])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function sectionNotEmpty(string $name): bool\n    {\n        return !empty($this->sections[$name]);\n    }\n\n    /**\n     * @throws Exception\n     */\n    public function getSection(string $name): string\n    {\n        if (!isset($this->sections[$name])) {\n            throw new Exception(\"Section $name not found\");\n        }\n        return $this->sections[$name];\n    }\n\n    public function getName(): string\n    {\n        return trim($this->getSection('TEST'));\n    }\n\n    public function isCGI(): bool\n    {\n        return $this->hasSection('CGI')\n            || $this->sectionNotEmpty('GET')\n            || $this->sectionNotEmpty('POST')\n            || $this->sectionNotEmpty('GZIP_POST')\n            || $this->sectionNotEmpty('DEFLATE_POST')\n            || $this->sectionNotEmpty('POST_RAW')\n            || $this->sectionNotEmpty('PUT')\n            || $this->sectionNotEmpty('COOKIE')\n            || $this->sectionNotEmpty('EXPECTHEADERS');\n    }\n\n    /**\n     * TODO Refactor to make it not needed\n     */\n    public function setSection(string $name, string $value): void\n    {\n        $this->sections[$name] = $value;\n    }\n\n    /**\n     * Load the sections of the test file\n     * @throws BorkageException\n     */\n    private function readFile(): void\n    {\n        $fp = fopen($this->fileName, \"rb\") or error(\"Cannot open test file: {$this->fileName}\");\n\n        if (!feof($fp)) {\n            $line = fgets($fp);\n\n            if ($line === false) {\n                throw new BorkageException(\"cannot read test\");\n            }\n        } else {\n            throw new BorkageException(\"empty test [{$this->fileName}]\");\n        }\n        if (strncmp('--TEST--', $line, 8)) {\n            throw new BorkageException(\"tests must start with --TEST-- [{$this->fileName}]\");\n        }\n\n        $section = 'TEST';\n        $secfile = false;\n        $secdone = false;\n\n        while (!feof($fp)) {\n            $line = fgets($fp);\n\n            if ($line === false) {\n                break;\n            }\n\n            // Match the beginning of a section.\n            if (preg_match('/^--([_A-Z]+)--/', $line, $r)) {\n                $section = $r[1];\n\n                if (isset($this->sections[$section]) && $this->sections[$section]) {\n                    throw new BorkageException(\"duplicated $section section\");\n                }\n\n                // check for unknown sections\n                if (!in_array($section, self::ALLOWED_SECTIONS)) {\n                    throw new BorkageException('Unknown section \"' . $section . '\"');\n                }\n\n                $this->sections[$section] = '';\n                $secfile = $section == 'FILE' || $section == 'FILEEOF' || $section == 'FILE_EXTERNAL';\n                $secdone = false;\n                continue;\n            }\n\n            // Add to the section text.\n            if (!$secdone) {\n                $this->sections[$section] .= $line;\n            }\n\n            // End of actual test?\n            if ($secfile && preg_match('/^===DONE===\\s*$/', $line)) {\n                $secdone = true;\n            }\n        }\n\n        fclose($fp);\n    }\n\n    /**\n     * @throws BorkageException\n     */\n    private function validateAndProcess(bool $inRedirect): void\n    {\n        // the redirect section allows a set of tests to be reused outside of\n        // a given test dir\n        if ($this->hasSection('REDIRECTTEST')) {\n            if ($inRedirect) {\n                throw new BorkageException(\"Can't redirect a test from within a redirected test\");\n            }\n            return;\n        }\n        if (!$this->hasSection('PHPDBG') && $this->hasSection('FILE') + $this->hasSection('FILEEOF') + $this->hasSection('FILE_EXTERNAL') != 1) {\n            throw new BorkageException(\"missing section --FILE--\");\n        }\n\n        if ($this->hasSection('FILEEOF')) {\n            $this->sections['FILE'] = preg_replace(\"/[\\r\\n]+$/\", '', $this->sections['FILEEOF']);\n            unset($this->sections['FILEEOF']);\n        }\n\n        foreach (['FILE', 'EXPECT', 'EXPECTF', 'EXPECTREGEX'] as $prefix) {\n            // For grepping: FILE_EXTERNAL, EXPECT_EXTERNAL, EXPECTF_EXTERNAL, EXPECTREGEX_EXTERNAL\n            $key = $prefix . '_EXTERNAL';\n\n            if ($this->hasSection($key)) {\n                // don't allow tests to retrieve files from anywhere but this subdirectory\n                $dir = dirname($this->fileName);\n                $fileName = $dir . '/' . trim(str_replace('..', '', $this->getSection($key)));\n\n                if (file_exists($fileName)) {\n                    $this->sections[$prefix] = file_get_contents($fileName);\n                } else {\n                    throw new BorkageException(\"could not load --\" . $key . \"-- \" . $dir . '/' . trim($fileName));\n                }\n            }\n        }\n\n        if (($this->hasSection('EXPECT') + $this->hasSection('EXPECTF') + $this->hasSection('EXPECTREGEX')) != 1) {\n            throw new BorkageException(\"missing section --EXPECT--, --EXPECTF-- or --EXPECTREGEX--\");\n        }\n\n        if ($this->hasSection('PHPDBG') && !$this->hasSection('STDIN')) {\n            $this->sections['STDIN'] = $this->sections['PHPDBG'] . \"\\n\";\n        }\n    }\n}\n\nfunction init_output_buffers(): void\n{\n    // Delete as much output buffers as possible.\n    while (@ob_end_clean()) {\n    }\n\n    if (ob_get_level()) {\n        echo \"Not all buffers were deleted.\\n\";\n    }\n}\n\nfunction check_proc_open_function_exists(): void\n{\n    if (!function_exists('proc_open')) {\n        echo <<<NO_PROC_OPEN_ERROR\n\n+-----------------------------------------------------------+\n|                       ! ERROR !                           |\n| The test-suite requires that proc_open() is available.    |\n| Please check if you disabled it in php.ini.               |\n+-----------------------------------------------------------+\n\nNO_PROC_OPEN_ERROR;\n        exit(1);\n    }\n}\n\nfunction bless_failed_tests(array $failedTests): void\n{\n    if (empty($failedTests)) {\n        return;\n    }\n    $args = [\n        PHP_BINARY,\n        __DIR__ . '/scripts/dev/bless_tests.php',\n    ];\n    foreach ($failedTests as $test) {\n        $args[] = $test['name'];\n    }\n    proc_open($args, [], $pipes);\n}\n\n/*\n * BSD 3-Clause License\n *\n * Copyright (c) 2002-2023, Sebastian Bergmann\n * All rights reserved.\n *\n * This file is part of sebastian/diff.\n * https://github.com/sebastianbergmann/diff\n */\n\nfinal class Differ\n{\n    public const OLD = 0;\n    public const ADDED = 1;\n    public const REMOVED = 2;\n    private DiffOutputBuilder $outputBuilder;\n    private $isEqual;\n\n    public function __construct(callable $isEqual)\n    {\n        $this->outputBuilder = new DiffOutputBuilder;\n        $this->isEqual = $isEqual;\n    }\n\n    public function diff(array $from, array $to): string\n    {\n        $diff = $this->diffToArray($from, $to);\n\n        return $this->outputBuilder->getDiff($diff);\n    }\n\n    public function diffToArray(array $from, array $to): array\n    {\n        $fromLine = 1;\n        $toLine = 1;\n\n        [$from, $to, $start, $end] = $this->getArrayDiffParted($from, $to);\n\n        $common = $this->calculateCommonSubsequence(array_values($from), array_values($to));\n        $diff   = [];\n\n        foreach ($start as $token) {\n            $diff[] = [$token, self::OLD];\n            $fromLine++;\n            $toLine++;\n        }\n\n        reset($from);\n        reset($to);\n\n        foreach ($common as $token) {\n            while (!empty($from) && !($this->isEqual)(reset($from), $token)) {\n                $diff[] = [array_shift($from), self::REMOVED, $fromLine++];\n            }\n\n            while (!empty($to) && !($this->isEqual)($token, reset($to))) {\n                $diff[] = [array_shift($to), self::ADDED, $toLine++];\n            }\n\n            $diff[] = [$token, self::OLD];\n            $fromLine++;\n            $toLine++;\n\n            array_shift($from);\n            array_shift($to);\n        }\n\n        while (($token = array_shift($from)) !== null) {\n            $diff[] = [$token, self::REMOVED, $fromLine++];\n        }\n\n        while (($token = array_shift($to)) !== null) {\n            $diff[] = [$token, self::ADDED, $toLine++];\n        }\n\n        foreach ($end as $token) {\n            $diff[] = [$token, self::OLD];\n        }\n\n        return $diff;\n    }\n\n    private function getArrayDiffParted(array &$from, array &$to): array\n    {\n        $start = [];\n        $end   = [];\n\n        reset($to);\n\n        foreach ($from as $k => $v) {\n            $toK = key($to);\n\n            if (($this->isEqual)($toK, $k) && ($this->isEqual)($v, $to[$k])) {\n                $start[$k] = $v;\n\n                unset($from[$k], $to[$k]);\n            } else {\n                break;\n            }\n        }\n\n        end($from);\n        end($to);\n\n        do {\n            $fromK = key($from);\n            $toK   = key($to);\n\n            if (null === $fromK || null === $toK || !($this->isEqual)(current($from), current($to))) {\n                break;\n            }\n\n            prev($from);\n            prev($to);\n\n            $end = [$fromK => $from[$fromK]] + $end;\n            unset($from[$fromK], $to[$toK]);\n        } while (true);\n\n        return [$from, $to, $start, $end];\n    }\n\n    public function calculateCommonSubsequence(array $from, array $to): array\n    {\n        $cFrom = count($from);\n        $cTo   = count($to);\n\n        if ($cFrom === 0) {\n            return [];\n        }\n\n        if ($cFrom === 1) {\n            foreach ($to as $toV) {\n                if (($this->isEqual)($from[0], $toV)) {\n                    return [$toV];\n                }\n            }\n\n            return [];\n        }\n\n        $i         = (int) ($cFrom / 2);\n        $fromStart = array_slice($from, 0, $i);\n        $fromEnd   = array_slice($from, $i);\n        $llB       = $this->commonSubsequenceLength($fromStart, $to);\n        $llE       = $this->commonSubsequenceLength(array_reverse($fromEnd), array_reverse($to));\n        $jMax      = 0;\n        $max       = 0;\n\n        for ($j = 0; $j <= $cTo; $j++) {\n            $m = $llB[$j] + $llE[$cTo - $j];\n\n            if ($m >= $max) {\n                $max  = $m;\n                $jMax = $j;\n            }\n        }\n\n        $toStart = array_slice($to, 0, $jMax);\n        $toEnd   = array_slice($to, $jMax);\n\n        return array_merge(\n            $this->calculateCommonSubsequence($fromStart, $toStart),\n            $this->calculateCommonSubsequence($fromEnd, $toEnd)\n        );\n    }\n\n    private function commonSubsequenceLength(array $from, array $to): array\n    {\n        $current = array_fill(0, count($to) + 1, 0);\n        $cFrom   = count($from);\n        $cTo     = count($to);\n\n        for ($i = 0; $i < $cFrom; $i++) {\n            $prev = $current;\n\n            for ($j = 0; $j < $cTo; $j++) {\n                if (($this->isEqual)($from[$i], $to[$j])) {\n                    $current[$j + 1] = $prev[$j] + 1;\n                } else {\n                    $current[$j + 1] = max($current[$j], $prev[$j + 1]);\n                }\n            }\n        }\n\n        return $current;\n    }\n}\n\nclass DiffOutputBuilder\n{\n    public function getDiff(array $diffs): string\n    {\n        global $context_line_count;\n        $i = 0;\n        $number_len = max(3, strlen((string)count($diffs)));\n        $line_number_spec = '%0' . $number_len . 'd';\n        $buffer = fopen('php://memory', 'r+b');\n        while ($i < count($diffs)) {\n            // Find next difference\n            $next = $i;\n            while ($next < count($diffs)) {\n                if ($diffs[$next][1] !== Differ::OLD) {\n                    break;\n                }\n                $next++;\n            }\n            // Found no more differentiating rows, we're done\n            if ($next === count($diffs)) {\n                if (($i - 1) < count($diffs)) {\n                    fwrite($buffer, \"--\\n\");\n                }\n                break;\n            }\n            // Print separator if necessary\n            if ($i < ($next - $context_line_count)) {\n                fwrite($buffer, \"--\\n\");\n                $i = $next - $context_line_count;\n            }\n            // Print leading context\n            while ($i < $next) {\n                fwrite($buffer, str_repeat(' ', $number_len + 2));\n                fwrite($buffer, $diffs[$i][0]);\n                fwrite($buffer, \"\\n\");\n                $i++;\n            }\n            // Print differences\n            while ($i < count($diffs) && $diffs[$i][1] !== Differ::OLD) {\n                fwrite($buffer, sprintf($line_number_spec, $diffs[$i][2]));\n                switch ($diffs[$i][1]) {\n                    case Differ::ADDED:\n                        fwrite($buffer, '+ ');\n                        break;\n                    case Differ::REMOVED:\n                        fwrite($buffer, '- ');\n                        break;\n                }\n                fwrite($buffer, $diffs[$i][0]);\n                fwrite($buffer, \"\\n\");\n                $i++;\n            }\n            // Print trailing context\n            $afterContext = min($i + $context_line_count, count($diffs));\n            while ($i < $afterContext && $diffs[$i][1] === Differ::OLD) {\n                fwrite($buffer, str_repeat(' ', $number_len + 2));\n                fwrite($buffer, $diffs[$i][0]);\n                fwrite($buffer, \"\\n\");\n                $i++;\n            }\n        }\n\n        $diff = stream_get_contents($buffer, -1, 0);\n        fclose($buffer);\n\n        return $diff;\n    }\n}\n\nmain();\n"
        },
        {
          "name": "sapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "win32",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}