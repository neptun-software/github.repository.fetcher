{
  "metadata": {
    "timestamp": 1736710331678,
    "page": 135,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nanomsg/nanomsg",
      "stars": 6036,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.822265625,
          "content": ".*/\nbuild/\n*.a\n*.deps\n*.la\n*.libs\n*.lo\n*.o\n*.swo\n*.swp\n*.out\n*Makefile\n.dirstamp\ndoc/asciidoc.conf\nnanocat\ntcpmuxd\n*.tar.gz\n*.zip\nperf/inproc_lat\nperf/inproc_thr\nperf/local_lat\nperf/local_thr\nperf/remote_lat\nperf/remote_thr\ndoc/*.1\ndoc/*.7\ndoc/*.3\ndoc/*.html\ndoc/diagrams\n*.log\ntests/*.trs\ntests/block\ntests/bus\ntests/device\ntests/domain\ntests/emfile\ntests/pipeline\ntests/hash\ntests/inproc\ntests/inproc_shutdown\ntests/iovec\ntests/ipc\ntests/ipc_shutdown\ntests/ipc_stress\ntests/list\ntests/msg\ntests/pair\ntests/poll\ntests/prio\ntests/pubsub\ntests/reqrep\ntests/separation\ntests/shutdown\ntests/survey\ntests/symbol\ntests/tcp\ntests/tcp_shutdown\ntests/timeo\ntests/trie\ntests/zerocopy\ntests/term\ntests/cmsg\ntests/ws\ntests/tcpmux\n*.dir\n*.vcxproj\n*.vcxproj.filters\n*.vcxproj.user\nDebug\nRelease\nCMakeFiles\n.cproject\n.project\n.pydevproject\n*.sdf\n*.opensdf\n"
        },
        {
          "name": ".version",
          "type": "blob",
          "size": 0.005859375,
          "content": "1.2.1\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 2.6103515625,
          "content": "Complete list of copyright holders to nanomsg codebase:\n\nAchille Roussel <ach@fb.com>\nAleksandar Fabijanic <alex@pocoproject.org>\nAlex Brem <alex@fluktuation.net>\nAndre Jonsson <andre.jonsson@dataductus.se>\nAndrew Starks <andrew.starks@trms.com>\nAram Santogidis <aram.santogidis@cern.ch>\nArk Degtiarov <a@amcloud.co>\nBill McCroskey <Bill.McCroskey@Crown.com>\nBoris Zentner <bzm@2bz.de>\nBruce Mitchener <bruce.mitchener@gmail.com>\nBruno Bigras <bigras.bruno@gmail.com>\nChip Salzenberg <chip@pobox.com>\nDavid Beck <dbeck@beckground.hu>\nDennis Klein <d.klein@gsi.de>\nDirkjan Ochtman <dirkjan@ochtman.nl>\nDong Fang <yp.fangdong@gmail.com>\nDrew Crawford <drew@sealedabstract.com>\nDylan Socolobsky <dsocolobsky@gmail.com>\nEmeric Chevalier <emericchevalier.pro@gmail.com>\nEmil Renner Berthing <esmil@mailme.dk>\nEvan Wies <evan@neomantra.net>\nFranklin \"Snaipe\" Mathieu <franklinmathieu@gmail.com>\nGareth Roberts <blutack@gmail.com>\nGarrett D'Amore <garrett@damore.org>\nGonzalo Diethelm <gonzalo.diethelm@diethelm.org>\nGaurav Gupta <g.gupta@samsung.com>\nHajime Saito <emijah.s@gmail.com>\nHarlan Lieberman-Berg <H.LiebermanBerg@gmail.com>\nImmanuel Weber <immanuel.weber@fhr.fraunhofer.de>\nIvan Pechorin <ivan.pechorin@gmail.com>\nIvo Vachkov <ivachkov@xi-group.com>\nJack R. Dunaway <jack@wirebirdlabs.com>\nJoshua Foster <jhawk28@gmail.com>\nJulien Ammous <schmurfy@gmail.com>\nKaspar Schiess <kaspar.schiess@absurd.li>\nKristian Lein-Mathisen <kristianlein@gmail.com>\nLuca Barbato <luca.barbato@gmail.com>\nManuel Mendez <mmendez534@gmail.com>\nMark Ellzey <socket@gmail.com>\nMartin Sustrik <sustrik@250bpm.com>\nMatt Howlett <matt.howlett@gmail.com>\nMax Drechsler <max.drechsler@web.de>\nMichael John <gosh.mike@gmail.com>\nMikko Koppanen <mikko@kuut.io>\nNick Desaulniers <ndesaulniers@mozilla.com>\nNicolas Hillegeer <nicolashillegeer@gmail.com>\nNir Soffer <nirsof@gmail.com>\n√ñrjan Persson <o@42mm.org>\nOskari Timperi <oskari.timperi@iki.fi>\nPaul Colomiets <paul@colomiets.name>\nPavlo Kapyshin <i@93z.org>\nRemy Brunno <remy.bruno@trinnov.com>\nRob Sciuk <rob@controlq.com>\nRyan Killea <ryanbaylorkillea@wpi.edu>\nRobert G. Jakabosky <bobby@sharedrealm.com>\nSergey Avseyev <sergey.avseyev@gmail.com>\nSergey Kovalevich <inndie@gmail.com>\nSergei Nikulov <sergey.nikulov@gmail.com>\nShivanand Velmurugan <shiv@shiv.me>\nSimon Strandgaard <simon@iroots.dk>\nStan Mihai <stanmihai4@gmail.com>\nSteve Atkins <steve@wordtothewise.com>\nSteve McKay <shubalubdub@gmail.com>\nStuart Wallace <stuart.wallace@flextrade.com>\nTimothee Besset <ttimo@ttimo.net>\nTobias Peters <tobias.peters@kreativeffekt.at>\nVictor Guerra <vguerra@gmail.com>\nYonggang Luo <luoyonggang@gmail.com>\nZoltan Boszormenyi <zboszor@pr.hu>\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 17.8447265625,
          "content": "#\n#   Copyright (c) 2012 Martin Sustrik  All rights reserved.\n#   Copyright (c) 2013 GoPivotal, Inc.  All rights reserved.\n#   Copyright (c) 2015-2016 Jack R. Dunaway. All rights reserved.\n#   Copyright 2016 Franklin \"Snaipe\" Mathieu <franklinmathieu@gmail.com>\n#   Copyright 2017 Garrett D'Amore <garrett@damore.org>\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a copy\n#   of this software and associated documentation files (the \"Software\"),\n#   to deal in the Software without restriction, including without limitation\n#   the rights to use, copy, modify, merge, publish, distribute, sublicense,\n#   and/or sell copies of the Software, and to permit persons to whom\n#   the Software is furnished to do so, subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included\n#   in all copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n#   IN THE SOFTWARE.\n#\n\ncmake_minimum_required (VERSION 2.8.12)\n\nproject (nanomsg C)\ninclude (CheckFunctionExists)\ninclude (CheckSymbolExists)\ninclude (CheckStructHasMember)\ninclude (CheckLibraryExists)\ninclude (CheckCSourceCompiles)\ninclude (GNUInstallDirs)\n\nif (POLICY CMP0042)\n    # Newer cmake on MacOS should use @rpath\n    cmake_policy (SET CMP0042 NEW)\nendif ()\n\nset (CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\nlist (FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\" isSystemDir)\nif (\"${isSystemDir}\" STREQUAL \"-1\")\n    set (CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\")\nendif (\"${isSystemDir}\" STREQUAL \"-1\")\n\nset (NN_DESCRIPTION \"High-Performance Scalability Protocols\")\nset (ISSUE_REPORT_MSG \"Please consider opening an issue at https://github.com/nanomsg/nanomsg\")\n\n# Determine library versions.\n\nfile (READ src/nn.h NN_HDR_STR)\nstring (REGEX REPLACE \".*#define +NN_VERSION_CURRENT +([0-9]+).*\" \"\\\\1\" NN_VERSION_CURRENT \"${NN_HDR_STR}\")\nstring (REGEX REPLACE \".*#define +NN_VERSION_REVISION +([0-9]+).*\" \"\\\\1\" NN_VERSION_REVISION \"${NN_HDR_STR}\")\nstring (REGEX REPLACE \".*#define +NN_VERSION_AGE +([0-9]+).*\" \"\\\\1\" NN_VERSION_AGE \"${NN_HDR_STR}\")\n\nif ((NN_VERSION_CURRENT STREQUAL \"\") OR (NN_VERSION_REVISION STREQUAL \"\") OR (NN_VERSION_AGE STREQUAL \"\"))\n    message (FATAL_ERROR \"Could not read ABI version from nn.h\")\nelse ()\n    set (NN_ABI_VERSION \"${NN_VERSION_CURRENT}\")\n    set (NN_LIB_VERSION \"${NN_VERSION_CURRENT}.${NN_VERSION_REVISION}.${NN_VERSION_AGE}\")\n    message (STATUS \"Detected nanomsg ABI v${NN_ABI_VERSION} (v${NN_LIB_VERSION})\")\nendif ()\n\n# Determine package version.\nfind_package (Git QUIET)\nif (DEFINED ENV{TRAVIS_TAG})\n    set (NN_PACKAGE_VERSION \"$ENV{TRAVIS_TAG}\")\nelseif (GIT_FOUND AND EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\n    # Working off a git repo, using git versioning\n\n    # Get version from last tag\n    execute_process (\n        COMMAND             \"${GIT_EXECUTABLE}\" describe --always# | sed -e \"s:v::\"\n        WORKING_DIRECTORY   \"${PROJECT_SOURCE_DIR}\"\n        OUTPUT_VARIABLE     NN_PACKAGE_VERSION\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\n\n    # If the sources have been changed locally, add -dirty to the version.\n    execute_process (\n        COMMAND             \"${GIT_EXECUTABLE}\" diff --quiet\n        WORKING_DIRECTORY   \"${PROJECT_SOURCE_DIR}\"\n        RESULT_VARIABLE     res)\n    if (res EQUAL 1)\n        set (NN_PACKAGE_VERSION \"${NN_PACKAGE_VERSION}-dirty\")\n    endif()\n\nelseif (EXISTS ${PROJECT_SOURCE_DIR}/.version)\n    #  If git is not available (e.g. when building from source package)\n    #  we can extract the package version from .version file.\n    file (STRINGS .version NN_PACKAGE_VERSION)\nelse ()\n    set (NN_PACKAGE_VERSION \"Unknown\")\nendif()\n\n# User-defined options.\n\noption (NN_STATIC_LIB \"Build static library instead of shared library.\" OFF)\noption (NN_ENABLE_DOC \"Enable building documentation.\" ON)\noption (NN_ENABLE_COVERAGE \"Enable coverage reporting.\" OFF)\noption (NN_ENABLE_GETADDRINFO_A \"Enable/disable use of getaddrinfo_a in place of getaddrinfo.\" ON)\noption (NN_TESTS \"Build and run nanomsg tests\" ON)\noption (NN_TOOLS \"Build nanomsg tools\" ON)\noption (NN_ENABLE_NANOCAT \"Enable building nanocat utility.\" ${NN_TOOLS})\nset (NN_MAX_SOCKETS 512 CACHE STRING \"max number of nanomsg sockets that can be created\")\n\n#  Platform checks.\n\nif (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n    set(NN_WARN_FLAGS \"-Wall -Wextra\")\nelseif (CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n    set(NN_WARN_FLAGS \"-Wall -Wextra\")\nelseif (CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\")\n    set(NN_WARN_FLAGS \"-Wall -Wextra\")\nendif()\n\nif (NN_ENABLE_COVERAGE)\n    # NB: This only works for GCC and Clang 3.0 and newer.  If your stuff\n    # is older than that, you will need to find something newer.  For\n    # correct reporting, we always turn off all optimizations.\n    if (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n        set(NN_COVERAGE_FLAGS \"-g -O0 --coverage\")\n    elseif (CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n        set(NN_COVERAGE_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n    elseif (CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\")\n        set(NN_COVERAGE_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n    else()\n        message(FATAL_ERROR \"Unable to enable coverage for your compiler.\")\n    endif()\nendif()\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${NN_WARN_FLAGS} ${NN_COVERAGE_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${NN_WARN_FLAGS} ${NN_COVERAGE_FLAGS}\")\n\nfind_package (Threads REQUIRED)\n\nmessage(STATUS \"OS System is ${CMAKE_SYSTEM_NAME}\")\nmessage(STATUS \"OS Version is ${CMAKE_SYSTEM_VERSION}\")\nif (CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    add_definitions (-DNN_HAVE_LINUX)\n    if (CMAKE_SYSTEM_VERSION MATCHES \"Microsoft\")\n        add_definitions (-DNN_HAVE_WSL)\n    endif()\nelseif (CMAKE_SYSTEM_NAME MATCHES \"Android\")\n    add_definitions (-DNN_HAVE_ANDROID)\n    add_definitions (-DNN_HAVE_LINUX)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n    add_definitions (-DNN_HAVE_OSX)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n    set (NN_HAVE_WINSOCK 1)\n    add_definitions (-DNN_HAVE_WINDOWS)\n    add_definitions (-D_CRT_SECURE_NO_WARNINGS)\n\n    # Target Windows Vista and later\n    add_definitions (-D_WIN32_WINNT=0x0600)\n    list (APPEND CMAKE_REQUIRED_DEFINITIONS -D_WIN32_WINNT=0x0600)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n    add_definitions (-DNN_HAVE_FREEBSD)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n    add_definitions (-DNN_HAVE_NETBSD)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"OpenBSD\")\n    add_definitions (-DNN_HAVE_OPENBSD)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"Solaris|SunOS\")\n    add_definitions (-DNN_HAVE_SOLARIS)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"HP-UX\")\n    add_definitions (-DNN_HAVE_HPUX)\nelseif (CMAKE_SYSTEM_NAME MATCHES \"QNX\")\n    add_definitions (-DNN_HAVE_QNX)\nelse ()\n    message (AUTHOR_WARNING \"WARNING: This platform may or may not be supported: ${CMAKE_SYSTEM_NAME}\")\n    message (AUTHOR_WARNING \"${ISSUE_REPORT_MSG}\")\nendif ()\n\nif (NN_STATIC_LIB)\n    add_definitions (-DNN_STATIC_LIB)\nendif ()\n\nmacro (nn_check_func SYM DEF)\n    check_function_exists (${SYM} ${DEF})\n    if (${DEF})\n        add_definitions (-D${DEF}=1)\n    endif ()\nendmacro (nn_check_func)\n\nmacro (nn_check_sym SYM HDR DEF)\n    check_symbol_exists (${SYM} ${HDR} ${DEF})\n    if (${DEF})\n        add_definitions (-D${DEF}=1)\n    endif ()\nendmacro (nn_check_sym)\n\nmacro (nn_check_lib LIB SYM DEF)\n    check_library_exists (${LIB} ${SYM} \"\" ${DEF})\n    if (${DEF})\n        add_definitions (-D${DEF}=1)\n        set(NN_REQUIRED_LIBRARIES ${NN_REQUIRED_LIBRARIES} ${LIB})\n    endif ()\nendmacro (nn_check_lib)\n\nmacro (nn_check_struct_member STR MEM HDR DEF)\n    check_struct_has_member (\"struct ${STR}\" ${MEM} ${HDR} ${DEF})\n    if (${DEF})\n        add_definitions (-D${DEF}=1)\n    endif ()\nendmacro (nn_check_struct_member)\n\nif (WIN32)\n    # Windows is a special snowflake.\n    set(NN_REQUIRED_LIBRARIES ${NN_REQUIRED_LIBRARIES} ws2_32)\n    set(NN_REQUIRED_LIBRARIES ${NN_REQUIRED_LIBRARIES} mswsock)\n    set(NN_REQUIRED_LIBRARIES ${NN_REQUIRED_LIBRARIES} advapi32)\n    nn_check_sym (InitializeConditionVariable windows.h NN_HAVE_CONDVAR)\n    if (NOT NN_HAVE_CONDVAR)\n        message (FATAL_ERROR\n\t    \"Modern Windows API support is missing. \"\n\t    \"Versions of Windows prior to Vista are not supported.  \"\n\t    \"Further, the 32-bit MinGW environment is not supported. \"\n\t    \"Ensure you have at least Windows Vista or newer, and are \"\n\t    \"using either Visual Studio 2010 or newer or MinGW-W64.\")\n    endif()\nelse ()\n    # Unconditionally declare the following feature test macros.  These are\n    # needed for some platforms (glibc and SunOS/illumos) and should be harmless\n    # on the others.\n    add_definitions (-D_GNU_SOURCE)\n    add_definitions (-D_REENTRANT)\n    add_definitions (-D_THREAD_SAFE)\n    add_definitions (-D_POSIX_PTHREAD_SEMANTICS)\n\n    nn_check_func (gethrtime NN_HAVE_GETHRTIME)\n    nn_check_func (socketpair NN_HAVE_SOCKETPAIR)\n    nn_check_func (eventfd NN_HAVE_EVENTFD)\n    nn_check_func (pipe NN_HAVE_PIPE)\n    nn_check_func (pipe2 NN_HAVE_PIPE2)\n    nn_check_func (accept4 NN_HAVE_ACCEPT4)\n    nn_check_func (epoll_create NN_HAVE_EPOLL)\n    nn_check_func (kqueue NN_HAVE_KQUEUE)\n    nn_check_func (poll NN_HAVE_POLL)\n\n    nn_check_lib (anl getaddrinfo_a NN_HAVE_GETADDRINFO_A)\n    nn_check_lib (rt clock_gettime  NN_HAVE_CLOCK_GETTIME)\n    nn_check_lib (rt sem_wait NN_HAVE_SEMAPHORE_RT)\n    nn_check_lib (pthread sem_wait  NN_HAVE_SEMAPHORE_PTHREAD)\n    nn_check_lib (nsl gethostbyname NN_HAVE_LIBNSL)\n    nn_check_lib (socket socket NN_HAVE_LIBSOCKET)\n\n    nn_check_sym (CLOCK_MONOTONIC time.h NN_HAVE_CLOCK_MONOTONIC)\n    nn_check_sym (atomic_cas_32 atomic.h NN_HAVE_ATOMIC_SOLARIS)\n    nn_check_sym (AF_UNIX sys/socket.h NN_HAVE_UNIX_SOCKETS)\n    nn_check_sym (backtrace_symbols_fd execinfo.h NN_HAVE_BACKTRACE)\n    nn_check_struct_member(msghdr msg_control sys/socket.h NN_HAVE_MSG_CONTROL)\n    if (NN_HAVE_SEMAPHORE_RT OR NN_HAVE_SEMAPHORE_PTHREAD)\n        if (NOT CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n            # macOS doesn't have unnamed semaphores\n            add_definitions (-DNN_HAVE_SEMAPHORE)\n        endif()\n    endif ()\nendif ()\n\n\nif (NOT NN_ENABLE_GETADDRINFO_A)\n    add_definitions (-DNN_DISABLE_GETADDRINFO_A)\nendif ()\n\ncheck_c_source_compiles (\"\n    #include <stdint.h>\n    int main()\n    {\n        volatile uint32_t n = 0;\n        __sync_fetch_and_add (&n, 1);\n        __sync_fetch_and_sub (&n, 1);\n        return 0;\n    }\n\" NN_HAVE_GCC_ATOMIC_BUILTINS)\nif (NN_HAVE_GCC_ATOMIC_BUILTINS)\n    add_definitions (-DNN_HAVE_GCC_ATOMIC_BUILTINS)\nendif ()\n\nadd_definitions(-DNN_MAX_SOCKETS=${NN_MAX_SOCKETS})\n\nadd_subdirectory (src)\n\n#  Build the tools\n\nif (NN_ENABLE_NANOCAT)\n    add_executable (nanocat tools/nanocat.c tools/options.c)\n    target_link_libraries (nanocat ${PROJECT_NAME})\nendif ()\n\nif (NN_ENABLE_DOC)\n    find_program (ASCIIDOCTOR_EXE asciidoctor)\n    if (NOT ASCIIDOCTOR_EXE)\n        message (WARNING \"Could not find asciidoctor: skipping docs\")\n        set (NN_ENABLE_DOC OFF)\n    else ()\n        message (STATUS \"Using asciidoctor at ${ASCIIDOCTOR_EXE}\")\n    endif ()\nendif ()\n\n# Build the documenation\nif (NN_ENABLE_DOC)\n\n    set (NN_DOCDIR ${CMAKE_CURRENT_SOURCE_DIR}/doc)\n    set (NN_STYLESHEET ${NN_DOCDIR}/stylesheet.css)\n    set (NN_TITLE ${PROJECT_NAME} ${NN_PACKAGE_VERSION})\n    set (NN_A2M ${ASCIIDOCTOR_EXE} -b manpage -amanmanual='${NN_TITLE}')\n    set (NN_A2H ${ASCIIDOCTOR_EXE} -d manpage -b html5 -a stylesheeet=${NN_STYLESHEET} -aversion-label=${PROJECT_NAME} -arevnumber=${NN_PACKAGE_VERSION})\n\n    macro (add_libnanomsg_man NAME SECT)\n        add_custom_command (\n            OUTPUT ${NAME}.${SECT}\n            COMMAND ${NN_A2M} -o ${NAME}.${SECT} ${NN_DOCDIR}/${NAME}.adoc\n            MAIN_DEPENDENCY ${NN_DOCDIR}/${NAME}.adoc\n        )\n\n        add_custom_command (\n            OUTPUT ${NAME}.html\n            COMMAND ${NN_A2H} -o ${NAME}.html ${NN_DOCDIR}/${NAME}.adoc\n            DEPENDS ${NN_STYLESHEET}\n            MAIN_DEPENDENCY ${NN_DOCDIR}/${NAME}.adoc\n        )\n\n        set(NN_MANS ${NN_MANS} ${NAME}.${SECT})\n        set(NN_HTMLS ${NN_HTMLS} ${NAME}.html)\n\n        install (\n            FILES ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.html\n            DESTINATION ${CMAKE_INSTALL_DOCDIR}\n        )\n        install (\n            FILES ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.${SECT}\n            DESTINATION ${CMAKE_INSTALL_MANDIR}/man${SECT}\n        )\n\n    endmacro (add_libnanomsg_man)\n\n    if (NN_ENABLE_NANOCAT)\n        add_libnanomsg_man (nanocat 1)\n    endif ()\n\n    add_libnanomsg_man (nn_errno 3)\n    add_libnanomsg_man (nn_strerror 3)\n    add_libnanomsg_man (nn_symbol 3)\n    add_libnanomsg_man (nn_symbol_info 3)\n    add_libnanomsg_man (nn_allocmsg 3)\n    add_libnanomsg_man (nn_reallocmsg 3)\n    add_libnanomsg_man (nn_freemsg 3)\n    add_libnanomsg_man (nn_socket 3)\n    add_libnanomsg_man (nn_close 3)\n    add_libnanomsg_man (nn_get_statistic 3)\n    add_libnanomsg_man (nn_getsockopt 3)\n    add_libnanomsg_man (nn_setsockopt 3)\n    add_libnanomsg_man (nn_bind 3)\n    add_libnanomsg_man (nn_connect 3)\n    add_libnanomsg_man (nn_shutdown 3)\n    add_libnanomsg_man (nn_send 3)\n    add_libnanomsg_man (nn_recv 3)\n    add_libnanomsg_man (nn_sendmsg 3)\n    add_libnanomsg_man (nn_recvmsg 3)\n    add_libnanomsg_man (nn_device 3)\n    add_libnanomsg_man (nn_cmsg 3)\n    add_libnanomsg_man (nn_poll 3)\n    add_libnanomsg_man (nn_term 3)\n\n    add_libnanomsg_man (nanomsg 7)\n    add_libnanomsg_man (nn_pair 7)\n    add_libnanomsg_man (nn_reqrep 7)\n    add_libnanomsg_man (nn_pubsub 7)\n    add_libnanomsg_man (nn_survey 7)\n    add_libnanomsg_man (nn_pipeline 7)\n    add_libnanomsg_man (nn_bus 7)\n    add_libnanomsg_man (nn_inproc 7)\n    add_libnanomsg_man (nn_ipc 7)\n    add_libnanomsg_man (nn_tcp 7)\n    add_libnanomsg_man (nn_ws 7)\n    add_libnanomsg_man (nn_env 7)\n\n    add_custom_target (man ALL DEPENDS ${NN_MANS})\n    add_custom_target (html ALL DEPENDS ${NN_HTMLS})\n\nendif ()\n\n#  Build unit tests.\n\nif (NN_TESTS)\n\n    enable_testing ()\n    set (all_tests \"\")\n\n    set (TEST_PORT 12100)\n    macro (add_libnanomsg_test NAME TIMEOUT)\n        list (APPEND all_tests ${NAME})\n        add_executable (${NAME} tests/${NAME}.c)\n        target_link_libraries (${NAME} ${PROJECT_NAME})\n        add_test (NAME ${NAME} COMMAND ${NAME} ${TEST_PORT})\n        set_tests_properties (${NAME} PROPERTIES TIMEOUT ${TIMEOUT})\n        math (EXPR TEST_PORT \"${TEST_PORT}+10\")\n    endmacro (add_libnanomsg_test)\n\n    #  Transport tests.\n    add_libnanomsg_test (inproc 5)\n    add_libnanomsg_test (inproc_shutdown 10)\n    add_libnanomsg_test (ipc 5)\n    add_libnanomsg_test (ipc_shutdown 40)\n    add_libnanomsg_test (ipc_stress 5)\n    add_libnanomsg_test (tcp 20)\n    add_libnanomsg_test (tcp_shutdown 120)\n    add_libnanomsg_test (ws 20)\n\n    #  Protocol tests.\n    add_libnanomsg_test (pair 5)\n    add_libnanomsg_test (pubsub 5)\n    add_libnanomsg_test (reqrep 5)\n    add_libnanomsg_test (pipeline 5)\n    add_libnanomsg_test (survey 5)\n    add_libnanomsg_test (bus 5)\n\n    #  Feature tests.\n    add_libnanomsg_test (async_shutdown 30)\n    add_libnanomsg_test (block 5)\n    add_libnanomsg_test (term 5)\n    add_libnanomsg_test (timeo 5)\n    add_libnanomsg_test (iovec 5)\n    add_libnanomsg_test (msg 5)\n    add_libnanomsg_test (prio 5)\n    add_libnanomsg_test (poll 5)\n    add_libnanomsg_test (device 5)\n    add_libnanomsg_test (device4 5)\n    add_libnanomsg_test (device5 5)\n    add_libnanomsg_test (device6 5)\n    add_libnanomsg_test (device7 30)\n    add_libnanomsg_test (emfile 5)\n    add_libnanomsg_test (domain 5)\n    add_libnanomsg_test (trie 5)\n    add_libnanomsg_test (list 5)\n    add_libnanomsg_test (hash 5)\n    add_libnanomsg_test (stats 5)\n    add_libnanomsg_test (symbol 5)\n    add_libnanomsg_test (separation 5)\n    add_libnanomsg_test (zerocopy 5)\n    add_libnanomsg_test (shutdown 5)\n    add_libnanomsg_test (cmsg 5)\n    add_libnanomsg_test (bug328 5)\n    add_libnanomsg_test (bug777 5)\n    add_libnanomsg_test (ws_async_shutdown 10)\n    add_libnanomsg_test (reqttl 10)\n    add_libnanomsg_test (surveyttl 10)\n\n    # Platform-specific tests\n    if (WIN32)\n        add_libnanomsg_test (win_sec_attr 5)\n    endif()\n\n    #  Build the performance tests.\n\n    macro (add_libnanomsg_perf NAME)\n        add_executable (${NAME} perf/${NAME}.c)\n        target_link_libraries (${NAME} ${PROJECT_NAME})\n    endmacro (add_libnanomsg_perf)\n\n    add_libnanomsg_perf (inproc_lat)\n    add_libnanomsg_perf (inproc_thr)\n    add_libnanomsg_perf (local_lat)\n    add_libnanomsg_perf (remote_lat)\n    add_libnanomsg_perf (local_thr)\n    add_libnanomsg_perf (remote_thr)\n\nendif ()\n\ninstall (TARGETS LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})\ninstall (TARGETS ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})\ninstall (FILES src/nn.h DESTINATION include/nanomsg)\ninstall (FILES src/inproc.h DESTINATION include/nanomsg)\ninstall (FILES src/ipc.h DESTINATION include/nanomsg)\ninstall (FILES src/tcp.h DESTINATION include/nanomsg)\ninstall (FILES src/ws.h DESTINATION include/nanomsg)\ninstall (FILES src/pair.h DESTINATION include/nanomsg)\ninstall (FILES src/pubsub.h DESTINATION include/nanomsg)\ninstall (FILES src/reqrep.h DESTINATION include/nanomsg)\ninstall (FILES src/pipeline.h DESTINATION include/nanomsg)\ninstall (FILES src/survey.h DESTINATION include/nanomsg)\ninstall (FILES src/bus.h DESTINATION include/nanomsg)\n\nif (NN_ENABLE_NANOCAT)\n    install (TARGETS nanocat RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\nendif()\n\nset (CPACK_PACKAGE_NAME ${PROJECT_NAME})\nset (CPACK_PACKAGE_VERSION ${NN_PACKAGE_VERSION})\nset (CPACK_SOURCE_GENERATOR \"TBZ2;TGZ;ZIP\")\nset (CPACK_SOURCE_IGNORE_FILES \"/build/;/.git/;~$;${CPACK_SOURCE_IGNORE_FILES}\")\nset (CPACK_SOURCE_PACKAGE_FILE_NAME \"${PROJECT_NAME}-${NN_PACKAGE_VERSION}\")\nadd_custom_target(dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)\ninclude (CPack)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.0439453125,
          "content": "\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom\nthe Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n\n\"nanomsg\" is a trademark of Martin Sustrik\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.283203125,
          "content": "Welcome to nanomsg\n==================\n\n[![Release](https://img.shields.io/github/release/nanomsg/nanomsg.svg)](https://github.com/nanomsg/nanomsg/releases/latest)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/nanomsg/nanomsg/blob/master/COPYING)\n[![Linux](https://img.shields.io/github/actions/workflow/status/nanomsg/nanomsg/linux.yml?branch=master&logoColor=grey&logo=linux&label=)](https://github.com/nanomsg/nanomsg/actions/workflows/linux.yml)\n[![Windows](https://img.shields.io/github/actions/workflow/status/nanomsg/nanomsg/windows.yml?branch=master&logoColor=grey&logo=windows&label=)](https://github.com/nanomsg/nanomsg/actions/workflows/windows.yml)\n[![Darwin](https://img.shields.io/github/actions/workflow/status/nanomsg/nanomsg/darwin.yml?branch=master&logoColor=grey&logo=apple&label=)](https://github.com/nanomsg/nanomsg/actions/workflows/darwin.yml)\n[![Discord](https://img.shields.io/discord/639573728212156478?label=&logo=discord)](https://discord.com/channels/639573728212156478/639574516812742686)\n\nThe nanomsg library is a simple high-performance implementation of several\n\"scalability protocols\". These scalability protocols are light-weight messaging\nprotocols which can be used to solve a number of very common messaging\npatterns, such as request/reply, publish/subscribe, surveyor/respondent,\nand so forth.  These protocols can run over a variety of transports such\nas TCP, UNIX sockets, and even WebSocket.\n\nFor more information check the [website](http://nanomsg.org).\n\nPrerequisites\n-------------\n\n1. Windows.\n   * Windows Vista or newer (Windows XP and 2003 are *NOT* supported)\n   * Microsoft Visual Studio 2010 (including C++) or newer, or mingw-w64.\n     (Specifically mingw and older Microsoft compilers are *NOT* supported,\n     and we do not test mingw-w64 at all, so YMMV.)\n   * CMake 2.8.12 or newer, available in $PATH as `cmake`\n\n2. POSIX (Linux, MacOS X, UNIX)\n   * ANSI C compiler supporting C89\n   * POSIX pthreads (should be present on all modern POSIX systems)\n   * BSD sockets support for both TCP and UNIX domain sockets\n   * CMake (http://cmake.org) 2.8.12 or newer, available in $PATH as `cmake`\n\n3. Documentation (optional)\n   * asciidoctor (http://asciidoctor.org/) available as `asciidoctor`\n   * If not present, docs are not formatted, but left in readable ASCII\n   * Available on-line at http://nanomsg.org/documentation\n\nQuick Build Instructions\n------------------------\n\nThese steps here are the minimum steps to get a default Debug\nbuild.  Using CMake you can do many other things, including\nsetting additional variables, setting up for static builds, or\ngeneration project or solution files for different development\nenvironments.  Please check the CMake website for all the various\noptions that CMake supports.\n\n## POSIX\n\nThis assumes you have a shell in the project directory, and have\nthe cmake and suitable compilers (and any required supporting tools\nlike linkers or archivers) on your path.\n\n1.  `% mkdir build`\n2.  `% cd build`\n3.  `% cmake ..`\n4.  `% cmake --build .`\n5.  `% ctest .`\n6.  `% sudo cmake --build . --target install`\n7.  `% sudo ldconfig` (if on Linux)\n\n## Windows\n\nThis assumes you are in a command or powershell window and have\nthe appropriate variables setup to support Visual Studio, typically\nby running `vcvarsall.bat` or similar with the appropriate argument(s).\nIt also assumes you are in the project directory.\n\n1.  `md build`\n2.  `cd build`\n3.  `cmake ..`\n4.  `cmake --build . --config Debug`\n5.  `ctest -C Debug .`\n6.  `cmake --build . --config Debug --target install`\n    *NB:* This may have to be done using an Administrator account.\n\nAlternatively, you can build and install nanomsg using [vcpkg](https://github.com/microsoft/vcpkg/) dependency manager:\n\n1.  `git clone https://github.com/Microsoft/vcpkg.git`\n2.  `cd vcpkg`\n3.  `./bootstrap-vcpkg.bat`\n4.  `./vcpkg integrate install`\n5.  `./vcpkg install nanomsg`\n\nThe nanomsg port in vcpkg is kept up to date by microsoft team members and community contributors.\nIf the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nStatic Library\n--------------\n\nWe normally build a dynamic library (.so or .DLL) by default.\n\nIf you want a static library (.a or .LIB), configure by passing\n`-DNN_STATIC_LIB=ON` to the first `cmake` command.\n\n### POSIX\n\nPOSIX systems will need to link with the libraries normally used when building\nnetwork applications.  For some systems this might mean -lnsl or -lsocket.\n\n### Windows\n\nYou will also need to define `NN_STATIC_LIB` in your compilation environment\nwhen building programs that use this library.  This is required because of\nthe way Windows changes symbol names depending on whether the symbols should\nbe exported in a DLL or not.\n\nWhen using the .LIB on Windows, you will also need to link with the\nws2_32, mswsock, and advapi32 libraries, as nanomsg depends on them.\n\nSupport\n-------\n\nThis library is considered to be in \"sustaining\" mode, which means that new\nfeature development has ended, and bug fixes are made only when strictly\nnecessary for severe issues.\n\nNew development is now occurring in the [NNG](https://github.com/nanomsg/nng)\nproject, which offers both protocol and API compatibility with this project.\nPlease consider using NNG for new projects.\n\nPlease see the file SUPPORT for more details.\n"
        },
        {
          "name": "RELEASING",
          "type": "blob",
          "size": 1.53515625,
          "content": "Release process\n===============\n\n 1. Check CI\n\n   * CircleCI: https://circleci.com/gh/nanomsg/nanomsg/tree/master\n   * AppVeyor: https://ci.appveyor.com/project/nanomsg/nanomsg\n\n 2. Bump ABI version as appropriate (see the docs on versioning). This happens\n    in src/nn.h, check links there on which numbers to update.\n\n 3. Bump the version in the .version file, such as 0.10-beta or 1.0 or\n    whatever.  This should match the tag you are going to use.\n\n 4. Commit and push both of the above changes back to the public repo.\n\n 5. Tag the new version, e.g. git tag -a 0.3-beta.  (Make sure to use -a\n    to create an annotated tag.)\n\n 6. Push the tag to the repo, e.g. git push origin 0.3-beta.\n\n 7. Wait a little bit for CI to build.\n\n 8. Check the AppVeyor CI again just to be sure.\n\n 9. Check the github releases page - a release for the tag should have\n    already been created with artifacts ready to download.\n\n10. Update the _config.yml page on the website (see gh-pages branch of the\n    repo).  The only thing that needs to be updated is the \"latest\" and\n    \"latest_date\".\n\n11. In the online docs (gh-pages branch), copy the man pages (adoc format)\n    into a subdirectory of _adoc named after the version (e.g.\n    \"_adoc/v1.1.3\"), then run the _adoc/build.sh script.  Add the resulting\n    \"v1.1.3\" directory, commit, and push.\n\n12. Send the announcement about the release. These commands might be useful:\n    git log --oneline 0.2-alpha..0.3-beta | wc -l\n    git diff -U0 0.2-alpha..0.3-beta AUTHORS\n\n13. Update the topic in the Gitter chatroom accordingly.\n"
        },
        {
          "name": "SUPPORT",
          "type": "blob",
          "size": 1.04296875,
          "content": "SUPPORT\n=======\n\nThis project (\"nanomsg\") or more properly \"nanomsg 1.0\" is now in\n\"sustaining\" mode.\n\nThis means that generally the project maintainers will only integrate fixes\nor release new versions when severe defects are found.  The  reason for this\nis that new development effort has transitioned to the \"NNG\" project\n(see https://github.com/nanomsg/nng for more information).\n\nThe possible exception to this would be for features with a specific\ncommercial sponsorship, for commercial users unable to use NNG.\n\nThe NNG project as of this writing has *nearly* complete compatibility\nwith nanomsg (99% of apps will work with no source code changes, and\nthe NNG library is also wire compatible with nanomsg, so that projects\nbuilt with the two separate libraries can interoperate seamlessly).\nIn addition it offers higher scalability, reliability, and usability.\nIt also offers a number of more advanced features.\n\nCommercial support for both NNG and this project (\"nanomsg\") is offered\nby Staysail Systems, Inc.  Contact info@staysail.tech for more information.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 2.607421875,
          "content": "#!/bin/sh\n#\n# Copyright 2016 Garrett D'Amore <garrett@damore.org>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"),\n# to deal in the Software without restriction, including without limitation\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n# and/or sell copies of the Software, and to permit persons to whom\n# the Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n#\n#\n# This configure script provides the usual autoconf style interface for\n# installation, but simply uses cmake.\n#\nSRCDIR=`dirname $0`\nCURDIR=`pwd`\n\nstrip_arg()\n{\n\tx=`echo \"$1\" | sed \"s/[^=]*=//\"`\n\teval $2=\\\"$x\\\"\n}\n\nwarn() {\n\techo \"$*\" 1>&2\n}\n\nfind_prog() {\n\tSIFS=\"${IFS=\t }\"\n\tIFS=:\n\tfor p in $PATH; do\n\t\tif [ -x ${p}/$1 ]\n\t\tthen\n\t\t\tIFS=\"${SIFS}\"\n\t\t\techo \"${p}/${1}\"\n\t\t\treturn 0\n\t\tfi\n\tdone\n\tIFS=\"${SIFS}\"\n\treturn 1\n}\n\nneed_cmake() {\n\twarn \"This program requires CMake 2.6 or newer to build.\"\n\twarn \"Obtain CMake from www.cmake.org\"\n\texit 1\n}\n\nhelp() {\n\techo \"This configure script is a convenience wrapper around\"\n\techo \"CMake.  Only a limited subset of configuration options\"\n\techo \"are supported.  For a fully featured build, use CMake\".\n\techo\n\techo \"Execute as $0 [options]\"\n\techo\n\techo \"Options supported are:\"\n\techo\n\techo \" --prefix={path}      Set installation directory prefix.\"\n\techo \" --with-cmake={path}  Location of CMake executable.\"\n\techo\n\texit 1\n}\n\n# Argument parsing\nPREFIX=/usr/local\nwhile [ -n \"$1\" ]; do\n\tcase \"$1\" in\n\t--with-cmake)\n\t\tCMAKE=\"$2\"\n\t\tshift 2\n\t\t;;\n\t--with-cmake=*)\n\t\tstrip_arg \"$1\" CMAKE\n\t\tshift\n\t\t;;\n\t--prefix)\n\t\tif [ -z \"$2\" ]; then\n\t\t\thelp\n\t\tfi\n\t\tPREFIX=\"$2\"\n\t\tshift 2\n\t\t;;\n\t--prefix=*)\n\t\tstrip_arg \"$1\" PREFIX\n\t\tshift\n\t\t;;\n\t*)\n\t\thelp\n\t\t;;\n\tesac\ndone\n\nif [ -z \"${CMAKE}\" ]; then\n\tCMAKE=`find_prog cmake` || need_cmake\nfi\n\nif [ -f src/nn.h ]\nthen\n\twarn \"NOTE: Building in the source directory is not recommended.\"\nfi\n\nGENERATOR=\"Unix Makefiles\"\n\n\"$CMAKE\" -G \"$GENERATOR\" \"-DCMAKE_INSTALL_PREFIX=$PREFIX\" $SRCDIR\n"
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "rfc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}