{
  "metadata": {
    "timestamp": 1736710273091,
    "page": 37,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Wind4/vlmcsd",
      "stars": 8465,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1376953125,
          "content": "VisualStudio/\nbin/\nbuild/\nbuildroot-configs/\nfloppy/\nhotbird64-mass-build/\nlib/\nsrc/VisualStudio-Linux-Remote/\n*.vcxproj*\n*.html\n*.pdf\n*.txt\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.16796875,
          "content": "[submodule \"debian\"]\n\tpath = debian\n\turl = https://github.com/Wind4/vlmcsd-debian.git\n[submodule \"docker\"]\n\tpath = docker\n\turl = https://github.com/Wind4/vlmcsd-docker.git\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 12.5107421875,
          "content": ".NOTPARALLEL:\n\nMAX_THREADS ?= 16\n\nPROGRAM_NAME ?= bin/vlmcsd\nCLIENT_NAME ?= bin/vlmcs\nMULTI_NAME ?= bin/vlmcsdmulti\nOBJ_NAME ?= build/libkms-static.o\nA_NAME ?= lib/libkms.a\n\nBASE_PROGRAM_NAME=$(notdir $(PROGRAM_NAME))\nBASE_CLIENT_NAME=$(notdir $(CLIENT_NAME))\nBASE_MULTI_NAME=$(notdir $(MULTI_NAME))\nBASE_DLL_NAME=$(notdir $(DLL_NAME))\nBASE_A_NAME=$(notdir $(A_NAME))\n\nTARGETPLATFORM := $(shell LANG=en_US.UTF-8 $(CC) -v 2>&1 | grep '^Target: ' | cut -f 2 -d ' ')\n\nifneq (,$(findstring darwin,$(TARGETPLATFORM)))\n  DARWIN := 1\n  UNIX := 1\nendif\n\nifneq (,$(findstring android,$(TARGETPLATFORM)))\n  ANDROID := 1\n  UNIX := 1\n  ELF := 1\nendif\n\nifneq (,$(findstring minix,$(TARGETPLATFORM)))\n  MINIX := 1\n  UNIX := 1\n  ELF := 1\nendif\n\nifneq (,$(findstring mingw,$(TARGETPLATFORM)))\n  MINGW := 1\n  WIN := 1\n  PE := 1 \nendif\n\nifneq (,$(findstring cygwin,$(TARGETPLATFORM)))\n  CYGWIN := 1\n  WIN := 1\n  PE := 1\nendif\n\nifneq (,$(findstring cygnus,$(TARGETPLATFORM)))\n  CYGWIN := 1\n  WIN := 1\n  PE := 1\nendif\n\nifneq (,$(findstring freebsd,$(TARGETPLATFORM)))\n  FREEBSD := 1\n  UNIX := 1\n  BSD := 1\n  ELF := 1\nendif\n\nifneq (,$(findstring netbsd,$(TARGETPLATFORM)))\n  NETBSD := 1\n  UNIX := 1\n  BSD := 1\n  ELF := 1\nendif\n\nifneq (,$(findstring openbsd,$(TARGETPLATFORM)))\n  OPENBSD := 1\n  UNIX := 1\n  BSD := 1\n  ELF := 1\nendif\n\nifneq (,$(findstring solaris,$(TARGETPLATFORM)))\n  SOLARIS := 1\n  UNIX := 1\n  ELF := 1\nendif\n\nifneq (,$(findstring linux,$(TARGETPLATFORM)))\n  LINUX := 1\n  UNIX := 1\n  ELF := 1\nendif\n\nifneq (,$(findstring gnu,$(TARGETPLATFORM)))\nifeq (,$(findstring linux,$(TARGETPLATFORM)))\n  UNIX := 1\n  HURD := 1\n  ELF := 1\nendif\nendif\n\nifeq ($(CYGWIN),1)\n  DLL_NAME ?= lib/cygkms.dll\nelse ifeq ($(WIN),1)\n  DLL_NAME ?= lib/libkms.dll\nelse ifeq ($(DARWIN),1)\n  DLL_NAME ?= lib/libkms.dylib\nelse\n  DLL_NAME ?= lib/libkms.so\nendif\n\n.DEFAULT:\n\t+@(test -d bin || mkdir bin) & (test -d lib || mkdir lib) & (test -d build || mkdir build)\n\t+@$(MAKE) -j$(MAX_THREADS) -C src $@ FROM_PARENT=1 PROGRAM_NAME=$(PROGRAM_NAME) CLIENT_NAME=$(CLIENT_NAME) MULTI_NAME=$(MULTI_NAME) DLL_NAME=$(DLL_NAME) A_NAME=$(A_NAME)\n\nall:\n\t+@(test -d bin || mkdir bin) & (test -d lib || mkdir lib) & (test -d build || mkdir build)\n\t+@$(MAKE) -j$(MAX_THREADS) -C src $@ FROM_PARENT=1 PROGRAM_NAME=$(PROGRAM_NAME) CLIENT_NAME=$(CLIENT_NAME) MULTI_NAME=$(MULTI_NAME) DLL_NAME=$(DLL_NAME) A_NAME=$(A_NAME)\n\nclean:\n\t+@$(MAKE) -j$(MAX_THREADS) -C src $@ FROM_PARENT=1 PROGRAM_NAME=$(PROGRAM_NAME) CLIENT_NAME=$(CLIENT_NAME) MULTI_NAME=$(MULTI_NAME) DLL_NAME=$(DLL_NAME) A_NAME=$(A_NAME)\n\t+@$(MAKE) -j$(MAX_THREADS) -C man $@\n\nalldocs:\n\t+@$(MAKE) -j$(MAX_THREADS) -C man $@\n\ndosdocs:\n\t+@$(MAKE) -j$(MAX_THREADS) -C man $@\n\nunixdocs:\n\t+@$(MAKE) -j$(MAX_THREADS) -C man $@\n\nhtmldocs:\n\t+@$(MAKE) -j$(MAX_THREADS) -C man $@\n\npdfdocs:\n\t+@$(MAKE) -j$(MAX_THREADS) -C man $@\n\nGNUmakefile:\n\nhelp:\n\t@echo \"Type\"\n\t@echo \"    ${MAKE}               - to build $(BASE_PROGRAM_NAME) and $(BASE_CLIENT_NAME)\"\n\t@echo \"    ${MAKE} clean         - to remove all targets and temporary files\"\n\t@echo \"    ${MAKE} pdfdocs       - Create PDF versions of the documentation (Requires groff with PDF support).\"\n\t@echo \"    ${MAKE} htmldocs      - Create HTML versions of the documentation.\"\n\t@echo \"    ${MAKE} unixdocs      - Create Unix TXT versions of the documentation.\"\n\t@echo \"    ${MAKE} dosdocs       - Create DOS/Windows TXT versions of the documentation.\"\n\t@echo \"    ${MAKE} alldocs       - Create all versions of the documentation.\"\n\t@echo \"    ${MAKE} vlmcsd        - to build KMS server $(PROGRAM_NAME)\"\n\t@echo \"    ${MAKE} vlmcs         - to build KMS client $(CLIENT_NAME)\"\n\t@echo \"    ${MAKE} vlmcsdmulti   - to build $(BASE_PROGRAM_NAME) and $(BASE_CLIENT_NAME) in a single multi-call binary $(MULTI_NAME)\"\n\t@echo \"    ${MAKE} libkms        - to build the shared library $(DLL_NAME)\"\n\t@echo \"    ${MAKE} libkms-static - to build the static library $(A_NAME)\"\n\t@echo \"\"\n\t@echo \"Options\"\n\t@echo \"    CONFIG=<x>                   Compile <x> as instead of config.h.\"\n\t@echo \"    INI=<x>                      Compile $(BASE_PROGRAM_NAME) with default ini file <x>\"\n\t@echo \"    DATA=<x>                     Compile $(BASE_PROGRAM_NAME) and $(BASE_CLIENT_NAME) with default KMS data file <x>\"\n\t@echo \"    PROGRAM_NAME=<x>             Use <x> as output file name for the KMS server. Defaults to vlmcsd.\"\n\t@echo \"    CLIENT_NAME=<x>              Use <x> as output file name for the KMS client. Defaults to vlmcs.\"\n\t@echo \"    MULTI_NAME=<x>               Use <x> as output file name for the multi-call binary. Defaults to vlmcsdmulti.\"\n\t@echo \"    DEPENDENCIES=1               Create dependency files.\"\n\t@echo \"    CRYPTO=openssl               Use openssl for SHA256/HMAC calculations.\"\n\t@echo \"    CRYPTO=openssl_with_aes      EXPERIMENTAL: Use openssl for SHA256/HMAC and AES calculations (hardware, e.g. AES-NI on x86).\"\n\t@echo \"    CRYPTO=openssl_with_aes_soft EXPERIMENTAL: Use openssl for SHA256/HMAC and AES calculations (software).\"\n\t@echo \"    CRYPTO=polarssl              Use polarssl instead of internal crypto code for SHA256/HMAC calculations.\"\n\t@echo \"    CRYPTO=windows               Use Windows CryptoAPI instead of internal crypto code for SHA256/HMAC calculations.\"\n\t@echo \"    MSRPC=1                      Use Microsoft RPC instead of vlmcsd's internal RPC. Only works with Windows and Cygwin targets.\"\n\t@echo \"    CC=<x>                       Use compiler <x>. Supported compilers are gcc, icc, tcc and clang. Others may or may not work.\"\n\t@echo \"    AR=<x>                       Use <x> instead of ar to build $(BASE_A_NAME). Set to gcc-ar if you want to use gcc's LTO feature.\"\n\t@echo \"    COMPILER_LANGUAGE=<x>        May be c or c++.\"\n\t@echo \"    TERMINAL_WIDTH=<x>           Assume a fixed terminal width of <x> columns. Use in case of problems only.\"  \n\t@echo \"    VLMCSD_VERSION=<x>           Sets <x> as your version identifier. Defaults to \\\"private build\\\".\"\n\t@echo \"    CFLAGS=<x>                   Pass <x> as additional arguments to the compiler.\"\n\t@echo \"    LDFLAGS=<x>                  Pass <x> as additional arguments to the linker.\"\n\t@echo \"    PLATFORMFLAGS=<x>            Pass <x> as additional arguments to the compiler and the linker.\"\n\t@echo \"    BASECFLAGS=<x>               Pass only <x> as arguments to the compiler (advanced users only).\"\n\t@echo \"    BASELDFLAGS=<x>              Pass only <x> as arguments to the linker (advanced users only).\"\n\t@echo \"    STRIP=0                      Don't strip debug information from $(BASE_PROGRAM_NAME) and $(BASE_CLIENT_NAME) (for developers).\"\n\t@echo \"    VERBOSE=1                    Be verbose when making targets.\"\n\t@echo \"    VERBOSE=3                    Show name of compiler.\"\n\t@echo \"    THREADS=1                    Use threads instead of fork(). Automatically set for native Windows. Recommended for Cygwin.\"\n\t@echo \"    HWID=<x>                     Use <x> as the default HWID (when it can't be found in an ini file).\"\n\t@echo \"    FEATURES=full                Compile $(BASE_PROGRAM_NAME) with all features (default).\"\n\t@echo \"    FEATURES=most                Compile $(BASE_PROGRAM_NAME) without rarely used features.\"\n\t@echo \"    FEATURES=embedded            Compile $(BASE_PROGRAM_NAME) with typical features for embedded systems.\"\n\t@echo \"    FEATURES=autostart           Removes features typically not needed if you place $(BASE_PROGRAM_NAME) in an autostart script.\"\n\t@echo \"    FEATURES=inetd               Compile $(BASE_PROGRAM_NAME) for running through an internet superserver only.\"\n\t@echo \"    FEATURES=minimum             Compiles only basic features of $(BASE_PROGRAM_NAME).\"\n\t@echo \"    FEATURES=fixedepids          $(BASE_PROGRAM_NAME) only uses bultin internal ePIDs.\"\n\t@echo \"\"\n\t@echo \"Useful CFLAGS to save memory when running $(BASE_PROGRAM_NAME) on very small embedded devices (finer control than FEATURES=)\"\n\t@echo \"    -DNO_STRICT_MODES            Don't support enhanced emulator detection prevention.\"\n\t@echo \"    -DNO_CLIENT_LIST             Don't support maintaining a client list (CMIDs).\"\n\t@echo \"    -DNO_VERBOSE_LOG             Don't support verbose logging. Removes -v option.\"\n\t@echo \"    -DNO_LOG                     Don't add support for logging. Implies -DNO_VERBOSE_LOG.\"\n\t@echo \"    -DNO_RANDOM_EPID             Don't support random ePIDs.\"\n\t@echo \"    -DNO_INI_FILE                Don't support reading ePIDs/HWIDs from a file.\"\n\t@echo \"    -DNO_PID_FILE                Don't support writing a PID file. Removes -p option.\"\n\t@echo \"    -DNO_USER_SWITCH             Don't support changing uid/gid after program start. Removes -u and -g options.\"\n\t@echo \"    -DNO_HELP                    Don't support command line help.\"\n\t@echo \"    -DNO_CUSTOM_INTERVALS        Don't support custom intervals for retry and refresh activation. Removes -A and -R options.\"\n\t@echo \"    -DNO_FREEBIND                Don't support binding to foreign IP addresses. Removes -F0 and -F1 options. Only affects FreeBSD and Linux.\"\n\t@echo \"    -DNO_SOCKETS                 Don't support standalone operation. Requires an internet superserver to start $(BASE_PROGRAM_NAME).\"\n\t@echo \"    -DSIMPLE_SOCKETS             Compile $(BASE_PROGRAM_NAME) with basic socket support only. Removes -L option.\"\n\t@echo \"    -DSIMPLE_RPC                 Don't support RPC with NDR64 and BTFN in $(BASE_PROGRAM_NAME) (but do in $(BASE_CLIENT_NAME)). Makes emulator detection easy.\"\n\t@echo \"    -DNO_TAP                     Compile $(BASE_PROGRAM_NAME) without VPN support (Windows and Cygwin only).\"\n\t@echo \"    -DNO_CL_PIDS                 Don't support specifying ePIDs and HwId from the command line in $(BASE_PROGRAM_NAME).\"\n\t@echo \"    -DNO_LIMIT                   Don't support limiting concurrent clients in $(BASE_PROGRAM_NAME).\"\n\t@echo \"    -DNO_SIGHUP                  Don't support SIGHUP handling in $(BASE_PROGRAM_NAME).\"\n\t@echo \"    -DNO_VERSION_INFORMATION     Don't support displaying version information in $(BASE_PROGRAM_NAME) and $(BASE_CLIENT_NAME). Removes -V option.\"\n\t@echo \"    -DNO_PRIVATE_IP_DETECT       Don't support protection against clients with public IP addresses in $(BASE_PROGRAM_NAME)\"\t\n\t@echo \"    -DSMALL_AES                  Use a smaller (saves about 200 bytes) but slower implementation of AES.\"\n\t@echo \"    -DNO_EXTERNAL_DATA           Don't support loading an external database. Mutually exclusive with -DNO_INTERNAL_DATA\"\n\t@echo \"    -DNO_INTERNAL_DATA           Don't compile an internal database. Mutually exclusive with -DNO_EXTERNAL_DATA\"\n\t@echo \"    -DUNSAFE_DATA_LOAD           Don't check the KMS data file for integrity. Saves some bytes but is dangerous.\"\n\t@echo \"\"\n\t@echo \"Troubleshooting options\"\n\t@echo \"    CAT=1                        Combine all sources in a single in-memory file and compile directly to target.\"\n\t@echo \"    NOPROCFS=1                   Don't rely on a properly mounted proc filesystem in /proc.\"\n\t@echo \"    AUXV=1                       Use /proc/self/auxv (requires Linux with glibc >= 2.16 or musl.)\"\n\t@echo \"    NOLPTHREAD=1                 Disable detection if -lpthread is required (for use with Android NDK).\"\n\t@echo \"    NOLRESOLV=1                  Disable detection if -lresolv is required  (for use with Android NDK).\"\n\t@echo \"    NOLIBS=1                     Do not attempt to autodetect any library dependencies.\"\n\t@echo \"    OPENSSL_HMAC=0               Compile for openssl versions that don't have HMAC support (required on some embedded devices).\"\n\t@echo \"    NO_TIMEOUT=1                 Do not set timeouts for sockets (for systems that don't support it).\"\n\t@echo \"    CHILD_HANDLER=1              Install a handler for SIGCHLD (for systems that don't support SA_NOCLDWAIT).\"\n\t@echo \"    NO_DNS=1                     Compile $(BASE_CLIENT_NAME) without support for detecting KMS servers via DNS.\"\n\t@echo \"    NO_GETIFADDRS=1              Compile $(BASE_PROGRAM_NAME) without using getifaddrs().\"\n\t@echo \"    GETIFADDRS=musl              Compile $(BASE_PROGRAM_NAME) with its own implementation of getifaddrs() based on musl.\"\n\t@echo \"    DNS_PARSER=internal          Use $(BASE_CLIENT_NAME) internal DNS parsing routines. No effect on MingW (native Windows).\"\n\t@echo \"\"\n\t@echo \"Other useful CFLAGS\"\n\t@echo \"    -DNO_COMPILER_UAA            Do not use compiler support for byte swapping and unaligned access\"\n\t@echo \"    -DFULL_INTERNAL_DATA         Embed full internal KMS data in $(BASE_PROGRAM_NAME).\"\n\t@echo \"    -DSUPPORT_WINE               Add code that the Windows version of $(BASE_PROGRAM_NAME) runs on Wine if MSRPC=1\"\n\t@echo \"    -D_PEDANTIC                  Report rare error/warning conditions instead of silently ignoring them.\"\n\t@echo \"    -DFD_SETSIZE=<x>             Allow <x> -L statements in $(BASE_PROGRAM_NAME) (default: 64 on Windows, 1024 on most Unixes).\"\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.287109375,
          "content": "# Let BSD make switch to GNU make\nall ${.TARGETS}:\n\t@echo \"================================================================\"\n\t@echo \" PLEASE USE THE GNU VERSION OF MAKE (gmake) INSTEAD OF ${MAKE}  \"\n\t@echo \"================================================================\"\n\t@echo \"\"\n\t@gmake $@\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.330078125,
          "content": "To view the documentation cd to the directory containing the distribution\nfiles and type\n\nman man/vlmcsd.8\n\tto see documentation for vlmcsd\n\nman man/vlmcs.1\n\tto see documentation for vlmcs\n\nman man/vlmcsd.7\n\tto see general documentation for kms\n\nIf you don't have man, you may also use the .txt, .html and .pdf files\nin the man directory\n"
        },
        {
          "name": "README.compile-and-pre-built-binaries",
          "type": "blob",
          "size": 4.2119140625,
          "content": "Compilation and pre-built binaries FAQ\n======================================\n\nWhat is the best pre-built binary for my system or device?\n----------------------------------------------------------\n\nNone. The best binary is compiled by yourself using a toolchain that is\noptimized for your system or device in every respect.\n\n\nHow do I compile my own binary?\n-------------------------------\n\nOn a full blown desktop system this is relativly easy. If not already done so,\ninstall a C compiler (e.g. gcc or clang) through your packet manager, e.g.\n\"sudo apt-get install gcc\" (Debian/Ubuntu) or \"sudo yum install gcc\"\n(RedHat/Fedora).\n\nThen cd to your vlmcsd directory and type \"make\". vlmcs and vlmcsd will\nbe built right away for your local system.\n\nIf you installed gcc and it is not the default compiler for your OS or\ndistribution, you may need to type \"make CC=gcc\" to explicitly select a\nspecific C compiller.\n\n\nHow do I compile a binary for my embedded device?\n-------------------------------------------------\n\nWhat you need is cross-compiling toolchain for your device. It consists of a\nC compiler, libraries, header files and some tools (called binutils). The\ntoolchain must match the device in processor architecture, endianess, ABI,\nlibrary and header files version, library configuration, ...\n\nIf the endianess or ABI differs or the version of some library between\ntoolchain and device differs too much, the resulting binary does not run\non your device.\n\nOnce you have a proper toolchain (probably found on the Internet for download),\nunpack it to any directory and type\n\n     \"make CC=/path/to/toolchain/bindir/c-compiler-binary\"\n\nBuilding vlmcsd for using a cross-compiling toolchain is as easy as building\nvlmcsd for your local machine. The only question is, whether this you have\na toolchain that actually matches your device.\n\nWhenever you change any parameter of the make command line, you must \"clean\"\nthe source directory from intermediate files and output from previous runs\nof make. You can do so by typeing \"make clean\" or force make to behave as if\nthe directory were clean by adding -B to the command line, e.g.\n\n     \"make -B CC=/path/to/toolchain/bindir/c-compiler-binary\"\n\n\nI have downloaded several promising toolchains for my device but they all\ndon't work. Can I create my own toolchain?\n-------------------------------------------------------------------------\n\nYou can use tools like buildroot or OpenWRT. Both are able to create toolchains\nfor many embedded devices. But this is out of the scope of this document.\nIf you are unable to walk through thousands of configuration options and make\nthe right choice, you may probably want to try the pre-built binaries.\n\n\nHow to choose a pre-built binary?\n---------------------------------\n\nThe directory structure for the binaries is\n\nbinaries\n+\n+--<operating system>\n   +\n   +--<cpu arch>\n      +\n      +--<endianess> (omitted if CPU or OS does not allow multi-endianess)\n         +\n         +--<C-library>\n\n<C-library> can also be \"static\". That means no special library is required.\nStatic binaries are much bigger and need more RAM than dynamic binaries but\nare more likely to run on your system. Use a static binary only, if none of\nthe dynmic binaries run.\n\nDon't get confused when a binary is named after an OS or a specific device,\ne.g. the name contains \"openwrt\", \"tomato\" or \"Fritzbox\". This does not mean\nthat the binary will run only on that OS or on that device. It is a hint only\nwhere I got or built the toolchain from.\n\n\nHow to determine the endianess of my system?\n--------------------------------------------\n\n- All Intel CPUs (x86, x32, x64) are little-endian only\n- Windows is little-endian only even if the CPU support big-endian\n- big-endian ARM is extremely uncommon. You can safely assume little-endian\n- little-endian PowerPC virtually does not exist since only newer POWER7\n  and POWER8 CPUs support it. Always assume big-endian.\n- For MIPS both little-endian and big-endian are common. Most Broadcomm and\n  TI chips run little-endian. Most Atheros and Ikanos CPUs run big-endian.\n\nTry typing\n     echo -n I | od -o | awk 'FNR==1{ print substr($2,6,1)}'\n\nThis returns 1 for little-endian systems and 0 for big-endian systems. However\nsome devices do not have the od command and thus this method won't work.\n\n\n\n"
        },
        {
          "name": "README.openssl",
          "type": "blob",
          "size": 2.2509765625,
          "content": "IMPORTANT\n=========\n\n1. Do not use any of the OpenSSL binaries\n2. Do not compile OpenSSL binaries yourself\n\n(except for doing some research into the deep internals of OpenSSL)\n\nREASONS\n=======\n\nAll OpenSSL binaries included are highly experimental and are likely to fail\nin many cases. To get some real benefit from OpenSSL (or PolarSSL) it should\nhandle all crypting/hashing.\n\nHowever this is not possible because Microsoft has slightly altered AES\nencryption in KMSv6 and uses a non-AES variant of the Rijndael CMAC in\nKMSv4. OpenSSL is not able to handle this if you use it correctly.\n\nThis means OpenSSL can be used safely only for SHA256 and HMAC SHA256\ncalculations used in KMSv5 and KMSv6 but the code size benefit is only\n100 to 300 bytes (depending on the architecture).\n\nTo benefit more from OpenSSL (getting it performing the AES stuff) I do\nthe first phase of AES encryption/decryption (called key expansion) with my\nown code. I then poke the expanded key into internal OpenSSL structs to make\nit behave in a way not intended by the OpenSSL developers but in a way to\nperform non-standard AES crypting as required by KMSv4 and KMSv6. KMSv5 is\nthe only protocol that could use OpenSSL without hacking the OpenSSL internals.\n\nThat means vlmcsd still needs about 40% of the internal AES code plus some\nOpenSSL hacking code to poke the expanded key into OpenSSL.\n\nThe entire OpenSSL hacking does not work in every case because the internal\nOpenSSL structs differ depending on the OpenSSL version, OpenSSL configuration\nat compile time (whether it is configured to use compiled C code or assembler\ncode), CPU architecture and CPU features (whether it can perform AES in\nhardware).\n\nSUMMARY\n=======\n\nIf you use OpenSSL in a safe way (compile with CRYPTO=openssl), there is not\nmuch benefit from it. The binary may become bigger or smaller and you\ndefinitely need more RAM when you run vlmcsd or vlmcs.\n\nIf you use hacked OpenSSL (compile with CRYPTO=openssl_with_aes or\nCRYPTO=openssl_with_aes_soft) you risk malfunction of vlmcs/vlmcsd even if it\nperformed correctly several times before.\n\nBoth vlmcs and vlmcsd do not have more features when compiled with OpenSSL\nsupport. It may be faster (especially on CPUs with hardware assisted AES) but\nuses more memory and may fail or perform unreliably.\n\n\n"
        },
        {
          "name": "debian",
          "type": "commit",
          "content": null
        },
        {
          "name": "docker",
          "type": "commit",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}