{
  "metadata": {
    "timestamp": 1736710297958,
    "page": 81,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/Windows-driver-samples",
      "stars": 7080,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.380859375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n# Declare files that will always have CRLF line endings on checkout.\n*.appxmanifest text eol=crlf\n*.c            text eol=crlf\n*.cpp          text eol=crlf\n*.cs           text eol=crlf\n*.csproj       text eol=crlf\n*.css          text eol=crlf\n*.def          text eol=crlf\n*.filters      text eol=crlf\n*.h            text eol=crlf\n*.htm          text eol=crlf\n*.html         text eol=crlf\n*.idl          text eol=crlf\n*.js           text eol=crlf\n*.jsproj       text eol=crlf\n*.rc           text eol=crlf\n*.rgs          text eol=crlf\n*.sln          text eol=crlf\n*.vcxproj      text eol=crlf\n*.xaml         text eol=crlf\n\n# Declare files that are encoded in UTF-16\n*.inf          text diff working-tree-encoding=UTF-16LE-BOM eol=crlf\n*.inx          text diff working-tree-encoding=UTF-16LE-BOM eol=crlf\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n*.cs     diff=csharp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.8955078125,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n_logs\n\n# Visual Studio 2015 cache/options directory\n.vs/\n\n# Visual Studio Code directory\n.vscode/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.tlog\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n*.[Cc]ache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\nbower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n*.db\n*.opendb\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.068359375,
          "content": "[submodule \"wil\"]\n\tpath = wil\n\turl = https://github.com/microsoft/wil\n"
        },
        {
          "name": "Build-AllSamples.ps1",
          "type": "blob",
          "size": 2.8779296875,
          "content": "<#\n.SYNOPSIS\nBuilds all available sample solutions in the repository (excluding specific solutions).\n\n.DESCRIPTION\nThis script searches for all available Visual Studio Solutions (.sln files) and attempts to run MSBuild to build them for the specified configurations and platforms.\n\n.PARAMETER Samples\nA regular expression matching the samples to be built.  Default is '' that matches all samples.  Examples include '^tools.' or '.dchu'.\n\n.PARAMETER Configurations\nA list of configurations to build samples under. Values available are 'Debug' and 'Release'. By default, $env:WDS_Configuration will be used as the sole configuration to build for. If this environment variable is not set the default is 'Debug' and 'Release'.\n\n.PARAMETER Platforms\nA list of platforms to build samples under (e.g. 'x64', 'arm64'). By default, $env:WDS_Platform will be used as the sole platform to build for. If this environment variable is not set the default is 'x64' and'arm64'.\n\n.PARAMETER LogFilesDirectory\nPath to a directory where the log files will be written to. If not provided, outputs will be logged to the '_logs' directory within the current working directory.\n\n.PARAMETER ThrottleLimit\nAn integer indicating how many combinations to build in parallel.  If 0 or not provided this defaults to 5 x number of logical processors.\n\n.INPUTS\nNone.\n\n.OUTPUTS\nNone.\n\n.EXAMPLE\n.\\Build-AllSamples\n\n.EXAMPLE\n.\\Build-AllSamples -Samples '^tools.' -Configurations 'Debug','Release' -Platforms 'x64','arm64'\n\n#>\n\n[CmdletBinding()]\nparam(\n    [string]$Samples = \"\",\n    [string[]]$Configurations = @(if ([string]::IsNullOrEmpty($env:WDS_Configuration)) { ('Debug', 'Release') } else { $env:WDS_Configuration }),\n    [string[]]$Platforms = @(if ([string]::IsNullOrEmpty($env:WDS_Platform)) { ('x64', 'arm64') } else { $env:WDS_Platform }),\n    [string]$LogFilesDirectory = (Join-Path (Get-Location) \"_logs\"),\n    [int]$ThrottleLimit\n)\n\n$Verbose = $false\nif ($PSBoundParameters.ContainsKey('Verbose')) {\n    $Verbose = $PsBoundParameters.Get_Item('Verbose')\n}\n\n$root = Get-Location\n$solutionFiles = Get-ChildItem -Path $root -Recurse -Filter *.sln | Select-Object -ExpandProperty FullName\n\n# To include in CI gate\n$sampleSet = @{}\nforeach ($file in $solutionFiles) {\n    $dir = (Get-Item $file).DirectoryName\n    $dir_norm = $dir.Replace($root, '').Trim('\\').Replace('\\', '.').ToLower()\n    if ($dir_norm -match (\"^packages.\")) {\n        Write-Verbose \"`u{1F50E} Found and ignored non-sample [$dir_norm] at $dir\"\n    }\n    elseif ($dir_norm -match ($Samples)) {\n        Write-Verbose \"`u{1F50E} Found and filtered in sample [$dir_norm] at $dir\"\n        $sampleSet[$dir_norm] = $dir\n    }\n    else {\n        Write-Verbose \"`u{1F50E} Found and filtered out sample [$dir_norm] at $dir\"\n    }\n}\n\n.\\Build-SampleSet -SampleSet $sampleSet -Configurations $Configurations -Platform $Platforms -LogFilesDirectory $LogFilesDirectory -Verbose:$Verbose -ThrottleLimit $ThrottleLimit\n"
        },
        {
          "name": "Build-Sample.ps1",
          "type": "blob",
          "size": 6.728515625,
          "content": "<#\n.SYNOPSIS\nBuilds an specific directory containing a sample solution.\n\n.DESCRIPTION\nThis script attempts to build a directory containing a driver sample Solution for the specified configurations and platforms.\n\n.PARAMETER Directory\nPath to a directory containing a valid Visual Studio Solution (.sln file). This is the solution that will be built.\n\n.PARAMETER SampleName\nA friendly name to refer to the sample. Is unspecified, a name will be automatically generated one from the sample path.\n\n.PARAMETER Configuration\nConfiguration name that will be used to build the solution. Common available values are \"Debug\" and \"Release\".\n\n.PARAMETER Platform\nPlatform to build the solution for (e.g. \"x64\", \"arm64\").\n\n.PARAMETER InfVerif_AdditionalOptions\nAdditional options for infverif (e.g. \"/samples\").\n\n.PARAMETER LogFilesDirectoy\nPath to a directory where the log files will be written to. If not provided, outputs will be logged to the current working directory.\n\n.INPUTS\nNone.\n\n.OUTPUTS\nVerbose output about the execution of this script will be provided only if -Verbose is provided. Otherwise, no output will be generated.\n\n.EXAMPLE\n.\\Build-Sample -Directory .\\usb\\kmdf_fx2\n\n.EXAMPLE\n.\\Build-Sample -Directory .\\usb\\kmdf_fx2 -Configuration 'Release' -Platform 'x64' -Verbose -LogFilesDirectory .\\_logs\n\n#>\n\n[CmdletBinding()]\nparam(\n    [Parameter(Mandatory = $true,\n            HelpMessage = 'Enter one directory path',\n            Position = 0)]\n    [string]$Directory,\n    [string]$SampleName,\n    [string]$Configuration = \"Debug\",\n    [string]$Platform = \"x64\",\n    [string]$InfVerif_AdditionalOptions = \"/samples\",\n    $LogFilesDirectory = (Get-Location)\n)\n\n$Verbose = $false\nif ($PSBoundParameters.ContainsKey('Verbose')) {\n    $Verbose = $PsBoundParameters.Get_Item('Verbose')\n}\n\n$oldPreference = $ErrorActionPreference\n$ErrorActionPreference = \"stop\"\ntry\n{\n    # Check that msbuild can be called before trying anything.\n    Get-Command \"msbuild\" | Out-Null\n}\ncatch\n{\n    Write-Verbose \"`u{274C} msbuild cannot be called from current environment. Check that msbuild is set in current path (for example, that it is called from a Visual Studio developer command).\"\n    Write-Error \"msbuild cannot be called from current environment.\"\n    exit 1\n}\nfinally\n{\n    $ErrorActionPreference = $oldPreference\n}\n\nif (-not (Test-Path -Path $Directory -PathType Container))\n{\n    Write-Warning \"`u{274C} A valid directory could not be found under $Directory\"\n    exit 1\n}\n\nNew-Item -ItemType Directory -Force -Path $LogFilesDirectory | Out-Null\n\nif (-not (Test-Path -Path $LogFilesDirectory -PathType Container))\n{\n    Write-Warning \"`u{274C} A valid directory for storing log files could not be created under $LogFilesDirectory\"\n    # No exit here: process will continue but logs won't be available.\n}\n\nif ([string]::IsNullOrWhitespace($SampleName))\n{\n    $SampleName = (Resolve-Path $Directory).Path.Replace((Get-Location), '').Replace('\\', '.').Trim('.').ToLower()\n}\n\n$solutionFile = Get-ChildItem -Path $Directory -Filter *.sln | Select-Object -ExpandProperty FullName -First 1\n\nif ($null -eq $solutionFile)\n{\n    Write-Warning \"`u{274C} A solution could not be found under $Directory\"\n    exit 1\n}\n\n$configurationIsSupported = $false\n$inSolutionConfigurationPlatformsSection = $false\nforeach ($line in Get-Content -Path $solutionFile)\n{\n    if (-not $inSolutionConfigurationPlatformsSection -and $line -match \"\\s*GlobalSection\\(SolutionConfigurationPlatforms\\).*\")\n    {\n        $inSolutionConfigurationPlatformsSection = $true;\n        continue;\n    }\n    elseif ($line -match \"\\s*EndGlobalSection.*\")\n    {\n        $inSolutionConfigurationPlatformsSection = $false;\n        continue;\n    }\n\n    if ($inSolutionConfigurationPlatformsSection)\n    {\n        [regex]$regex = \".*=\\s*(?<ConfigString>(?<Configuration>.*)\\|(?<Platform>.*))\\s*\"\n        $match = $regex.Match($line)\n        if ([string]::IsNullOrWhiteSpace($match.Groups[\"ConfigString\"].Value) -or [string]::IsNullOrWhiteSpace($match.Groups[\"Platform\"].Value))\n        {\n            Write-Warning \"Could not parse configuration entry $line from file $solutionFile.\"\n            continue;\n        }\n        if ($match.Groups[\"Configuration\"].Value.Trim() -eq $Configuration -and $match.Groups[\"Platform\"].Value.Trim() -eq $Platform)\n        {\n            $configurationIsSupported = $true;\n        }\n    }\n}\n\nif (-not $configurationIsSupported)\n{\n    Write-Verbose \"[$SampleName] `u{23E9} Skipped. Configuration $Configuration|$Platform not supported.\"\n    exit 3\n}\n\nWrite-Verbose \"Building Sample: $SampleName; Configuration: $Configuration; Platform: $Platform {\"\n\n$myexit=0\n\n#\n# Let us build up to three times (0th, 1st, and 2nd attempt).\n# If we succeed at first, then it is a success.\n# If we fail at first, but succeed at either of next two attempts, then it is a sporadic failure.\n# If we even at third attempt fail, then it is a true failure.\n#\nfor ($i=0; $i -le 2; $i++) {\n    $errorLogFilePath = \"$LogFilesDirectory\\$SampleName.$Configuration.$Platform.$i.err\"\n    $warnLogFilePath = \"$LogFilesDirectory\\$SampleName.$Configuration.$Platform.$i.wrn\"\n    $OutLogFilePath = \"$LogFilesDirectory\\$SampleName.$Configuration.$Platform.$i.out\"\n\n    msbuild $solutionFile -clp:Verbosity=m -t:rebuild -property:Configuration=$Configuration -property:Platform=$Platform -p:TargetVersion=Windows10 -p:InfVerif_AdditionalOptions=\"$InfVerif_AdditionalOptions\" -warnaserror -flp1:errorsonly`;logfile=$errorLogFilePath -flp2:WarningsOnly`;logfile=$warnLogFilePath -noLogo > $OutLogFilePath\n    if ($env:WDS_WipeOutputs -ne $null)\n    {\n        Write-Verbose (\"WipeOutputs: \"+$Directory+\" \"+(((Get-Volume ($DriveLetter=(Get-Item \".\").PSDrive.Name)).SizeRemaining/1GB)))\n        Get-ChildItem -path $Directory -Recurse -Include x64|Remove-Item -Recurse\n        Get-ChildItem -path $Directory -Recurse -Include arm64|Remove-Item -Recurse\n    }\n    if ($LASTEXITCODE -eq 0)\n    {\n        # We succeeded building. \n        # If at first attempt, then $myexit=0\n        # If at later attempt, then $myexit=2\n        if ($i -eq 0)\n        {\n            $myexit=0\n        }\n        else\n        {\n            $myexit=2\n        }\n         break;\n    }\n    else\n    {\n        # We failed building. \n        # Let us sleep for a bit.\n        # Then let the while loop do its thing and re-run.\n        sleep 1\n        if ($Verbose)\n        {\n            Write-Warning \"`u{274C} Build failed. Retrying to see if sporadic...\"\n        }\n    }\n}\n\nif ($myexit -eq 1)\n{\n    if ($Verbose)\n    {\n        Write-Warning \"`u{274C} Build failed. Log available at $errorLogFilePath\"\n    }\n    exit 1\n}\n\nif ($myexit -eq 2)\n{\n    if ($Verbose)\n    {\n        Write-Warning \"`u{274C} Build sporadically failed. Log available at $errorLogFilePath\"\n    }\n    exit 2\n}\n\nWrite-Verbose \"Building Sample: $SampleName; Configuration: $Configuration; Platform: $Platform }\"\n"
        },
        {
          "name": "Build-SampleSet.ps1",
          "type": "blob",
          "size": 16.146484375,
          "content": "[CmdletBinding()]\nparam(\n    [hashtable]$SampleSet,\n    [string[]]$Configurations = @(if ([string]::IsNullOrEmpty($env:WDS_Configuration)) { \"Debug\" } else { $env:WDS_Configuration }),\n    [string[]]$Platforms = @(if ([string]::IsNullOrEmpty($env:WDS_Platform)) { \"x64\" } else { $env:WDS_Platform }),\n    $LogFilesDirectory = (Get-Location),\n    [string]$ReportFileName = $(if ([string]::IsNullOrEmpty($env:WDS_ReportFileName)) { \"_overview\" } else { $env:WDS_ReportFileName }),\n    [int]$ThrottleLimit = 0\n)\n\n$root = Get-Location\n\n# launch developer powershell (if necessary to prevent multiple developer sessions)\nif (-not $env:VSCMD_VER) {\n    Import-Module (Resolve-Path \"$env:ProgramFiles\\Microsoft Visual Studio\\2022\\*\\Common7\\Tools\\Microsoft.VisualStudio.DevShell.dll\")\n    Enter-VsDevShell -VsInstallPath (Resolve-Path \"$env:ProgramFiles\\Microsoft Visual Studio\\2022\\*\")\n    cd $root\n}\n\n$ThrottleFactor = 5\n$LogicalProcessors = (Get-CIMInstance -Class 'CIM_Processor' -Verbose:$false).NumberOfLogicalProcessors\n\nif ($ThrottleLimit -eq 0) {\n    $ThrottleLimit = $ThrottleFactor * $LogicalProcessors\n}\n\n$Verbose = $false\nif ($PSBoundParameters.ContainsKey('Verbose')) {\n    $Verbose = $PsBoundParameters.Get_Item('Verbose')\n}\n\nNew-Item -ItemType Directory -Force -Path $LogFilesDirectory | Out-Null\n$reportFilePath = Join-Path $LogFilesDirectory \"$ReportFileName.htm\"\n$reportCsvFilePath = Join-Path $LogFilesDirectory \"$ReportFileName.csv\"\n\n\nRemove-Item  -Recurse -Path $LogFilesDirectory 2>&1 | Out-Null\nNew-Item -ItemType Directory -Force -Path $LogFilesDirectory | Out-Null\n\n$oldPreference = $ErrorActionPreference\n$ErrorActionPreference = \"stop\"\ntry {\n    # Check that msbuild can be called before trying anything.\n    Get-Command \"msbuild\" | Out-Null\n}\ncatch {\n    Write-Host \"`u{274C} msbuild cannot be called from current environment. Check that msbuild is set in current path (for example, that it is called from a Visual Studio developer command).\"\n    Write-Error \"msbuild cannot be called from current environment.\"\n    exit 1\n}\nfinally {\n    $ErrorActionPreference = $oldPreference\n}\n\n#\n# Determine build environment: 'GitHub', 'NuGet', 'EWDK', or 'WDK'.\n# Determine build number (used for exclusions based on build number).  Five digits.  Say, '22621'.\n# Determine NuGet package version (if applicable).\n#\n$build_environment=\"\"\n$build_number=0\n$nuget_package_version=0\n#\n# In Github we build using NuGet.\n#\nif ($env:GITHUB_REPOSITORY) {\n    $build_environment=\"GitHub\"\n    $nuget_package_version=([regex]'(?<=x64\\.)(\\d+\\.)(\\d+\\.)(\\d+\\.)(\\d+)').Matches((Get-Childitem .\\packages\\*WDK.x64* -Name)).Value\n    $build_number=$nuget_package_version.split('.')[2]\n}\n#\n# WDK NuGet will require presence of a folder 'packages'. The version is sourced from repo .\\Env-Vars.ps1.\n#\n# Hack: If user has hydrated nuget packages, then use those. That will be indicated by presence of a folder named '.\\packages'. \n#       Further, we need to test that the directory has been hydrated using '.\\packages\\*'.\n#\nelseif(Test-Path(\".\\packages\\*\")) {\n    $build_environment=(\"NuGet\")\n    $nuget_package_version=([regex]'(?<=x64\\.)(\\d+\\.)(\\d+\\.)(\\d+\\.)(\\d+)').Matches((Get-Childitem .\\packages\\*WDK.x64* -Name)).Value\n    $build_number=$nuget_package_version.split('.')[2]\n}\n#\n# EWDK sets environment variable BuildLab.  For example 'ni_release_svc_prod1.22621.2428'.\n#\nelseif($env:BuildLab -match '(?<branch>[^.]*).(?<build>[^.]*).(?<qfe>[^.]*)') {\n    $build_environment=(\"EWDK.\"+$Matches.branch+\".\"+$Matches.build+\".\"+$Matches.qfe)\n    $build_number=$Matches.build\n}\n#\n# WDK sets environment variable UCRTVersion.  For example '10.0.22621.0'.\n#\nelseif ($env:UCRTVersion -match '10.0.(?<build>.*).0') {\n    $build_environment=\"WDK\"\n    $build_number=$Matches.build\n}\nelse {\n\n    # Dump all environment variables so as to help debug error:\n    Write-Output \"Environment variables {\"\n    gci env:* | sort-object name\n    Write-Output \"Environment variables }\"\n\n    Write-Error \"Could not determine build environment.\"\n    exit 1\n}\n#\n# Get the WDK extension version from installed packages\n$wdk_extension_ver = ls \"${env:ProgramData}\\Microsoft\\VisualStudio\\Packages\\Microsoft.Windows.DriverKit,version=*\" | Select -ExpandProperty Name\n$wdk_extension_ver = ([regex]'(\\d+\\.)(\\d+\\.)(\\d+\\.)(\\d+)').Matches($wdk_extension_ver).Value\nif (-not $wdk_extension_ver) {\n    Write-Error \"No version of the WDK Visual Studio Extension could be found. The WDK Extension is not installed.\"\n    exit 1\n}\n#\n#\n# InfVerif_AdditionalOptions\n#\n# Samples must build cleanly and even without warnings.\n#\n# An exception is for infverif where specific warnings are acceptable.  Those\n# specific warnings indicates issues intentially present in the samples, that\n# anyone that clones the samples must fix as part of productizing a driver.\n# \n# In 22621 those warnings are: /sw1284 /sw1285 /sw1293 /sw2083 /sw2086\n# \n# After 22621 those warnings are put under a common flag: /samples\n#\n$InfVerif_AdditionalOptions=($build_number -le 22621 ? \"/sw1284 /sw1285 /sw1293 /sw2083 /sw2086\" : \"/samples\")\n\n#\n# Determine exclusions.  \n#\n# Exclusions are loaded from .\\exclusions.csv.\n# Each line has form:\n#   Path,Configurations,MinBuild,MaxBuild,Reason\n# Where:\n#   Path: Is the path to folder containing solution(s) using backslashes. For example: 'audio\\acx\\samples\\audiocodec\\driver' .\n#   Configurations: Are the configurations to exclude.  For example: '*|arm64' .\n#   MinBuild: Is the minimum WDK/EWDK build number the exclusion is applicable for.  For example: '22621' .\n#   MaxBuild: Is the maximum WDK/EWDK build number the exclusion is applicable for.  For example: '26031' .\n#   Reason: Is plain text documenting the reason for the exclusion. For example: 'error C1083: Cannot open include file: 'acx.h': No such file or directory' .\n#\n$exclusionConfigurations = @{}\n$exclusionReasons = @{}\nImport-Csv 'exclusions.csv' | ForEach-Object {\n    $excluded_driver=$_.Path.Replace($root, '').Trim('\\').Replace('\\', '.').ToLower()\n    $excluded_configurations=($_.configurations -eq '' ? '*' : $_.configurations)\n    $excluded_minbuild=($_.MinBuild -eq '' ? 00000 : $_.MinBuild)\n    $excluded_maxbuild=($_.MaxBuild -eq '' ? 99999 : $_.MaxBuild)\n    if (($excluded_minbuild -le $build_number) -and ($build_number -le $excluded_maxbuild) )\n    {\n        $exclusionConfigurations[$excluded_driver] = $excluded_configurations\n        $exclusionReasons[$excluded_driver] = $_.Reason\n        Write-Verbose \"Exclusion.csv entry applied for '$excluded_driver' for configuration '$excluded_configurations'.\"\n    }\n    else\n    {\n        Write-Verbose \"Exclusion.csv entry not applied for '$excluded_driver' due to build number.\"\n    }\n}\n\n$jresult = @{\n    SolutionsBuilt       = 0\n    SolutionsSucceeded   = 0\n    SolutionsExcluded    = 0\n    SolutionsUnsupported = 0\n    SolutionsFailed      = 0\n    SolutionsSporadic    = 0\n    Results              = @()\n    FailSet              = @()\n    lock                 = [System.Threading.Mutex]::new($false)\n}\n\n$SolutionsTotal = $sampleSet.Count * $Configurations.Count * $Platforms.Count\n\nWrite-Output \"WDK Build Environment:      $build_environment\"\nWrite-Output \"WDK Build Number:           $build_number\"\nif (($build_environment -eq \"GitHub\") -or ($build_environment -eq \"NuGet\")) { \nWrite-Output \"WDK Nuget Version:          $nuget_package_version\" \n}\nWrite-Output \"WDK Extension Version:      $wdk_extension_ver\"\nWrite-Output \"Samples:                    $($sampleSet.Count)\"\nWrite-Output \"Configurations:             $($Configurations.Count) ($Configurations)\"\nWrite-Output \"Platforms:                  $($Platforms.Count) ($Platforms)\"\nWrite-Output \"InfVerif_AdditionalOptions: $InfVerif_AdditionalOptions\"\nWrite-Output \"Combinations:               $SolutionsTotal\"\nWrite-Output \"LogicalProcessors:          $LogicalProcessors\"\nWrite-Output \"ThrottleFactor:             $ThrottleFactor\"\nWrite-Output \"ThrottleLimit:              $ThrottleLimit\"\nWrite-Output \"WDS_WipeOutputs:            $env:WDS_WipeOutputs\"\nWrite-Output \"Disk Remaining (GB):        $(((Get-Volume ((Get-Item \".\").PSDrive.Name)).SizeRemaining) / 1GB)\"\nWrite-Output \"\"\nWrite-Output \"T: Combinations\"\nWrite-Output \"B: Built\"\nWrite-Output \"R: Build is running currently\"\nWrite-Output \"P: Build is pending an available build slot\"\nWrite-Output \"\"\nWrite-Output \"S: Built and result was 'Succeeded'\"\nWrite-Output \"E: Built and result was 'Excluded'\"\nWrite-Output \"U: Built and result was 'Unsupported' (Platform and Configuration combination)\"\nWrite-Output \"F: Built and result was 'Failed'\"\nWrite-Output \"O: Built and result was 'Sporadic'\"\nWrite-Output \"\"\nWrite-Output \"Building all combinations...\"\n\n$Results = @()\n\n$sw = [Diagnostics.Stopwatch]::StartNew()\n\n$SampleSet.GetEnumerator() | ForEach-Object -ThrottleLimit $ThrottleLimit -Parallel {\n    $LogFilesDirectory = $using:LogFilesDirectory\n    $exclusionConfigurations = $using:exclusionConfigurations\n    $exclusionReasons = $using:exclusionReasons\n    $Configurations = $using:Configurations\n    $Platforms = $using:Platforms\n    $InfVerif_AdditionalOptions = $using:InfVerif_AdditionalOptions\n    $Verbose = $using:Verbose\n\n    $sampleName = $_.Key\n    $directory = $_.Value\n\n    $ResultElement = new-object psobject\n    Add-Member -InputObject $ResultElement -MemberType NoteProperty -Name Sample -Value \"$sampleName\"\n\n    foreach ($configuration in $Configurations) {\n        foreach ($platform in $Platforms) {\n            $thisunsupported = 0\n            $thisfailed = 0\n            $thissporadic = 0\n            $thisexcluded = 0\n            $thissucceeded = 0\n            $thisresult = \"Not run\"\n            $thisfailset = @()\n            $thissporadicset = @()\n\n            if ($exclusionConfigurations.ContainsKey($sampleName) -and ($exclusionConfigurations[$sampleName].Split(';') | Where-Object { \"$configuration|$platform\" -like $_ })) {\n                # Verbose\n                Write-Verbose \"[$sampleName $configuration|$platform] `u{23E9} Excluded and skipped. Reason: $($exclusionReasons[$sampleName])\"\n                $thisexcluded += 1\n                $thisresult = \"Excluded\"\n            }\n            else {\n                .\\Build-Sample -Directory $directory -SampleName $sampleName -LogFilesDirectory $LogFilesDirectory -Configuration $configuration -Platform $platform -InfVerif_AdditionalOptions $InfVerif_AdditionalOptions -Verbose:$Verbose\n                if ($LASTEXITCODE -eq 0) {\n                    $thissucceeded += 1\n                    $thisresult = \"Succeeded\"\n                }\n                elseif ($LASTEXITCODE -eq 1) {\n                    $thisfailset += \"$sampleName $configuration|$platform\"\n                    $thisfailed += 1\n                    $thisresult = \"Failed\"\n                }\n                elseif ($LASTEXITCODE -eq 2) {\n                    $thissporadicset += \"$sampleName $configuration|$platform\"\n                    $thissporadic += 1\n                    $thisresult = \"Sporadic\"\n                }\n                else {\n                    # ($LASTEXITCODE -eq 3)\n                    $thisunsupported += 1\n                    $thisresult = \"Unsupported\"\n                }\n            }\n            Add-Member -InputObject $ResultElement -MemberType NoteProperty -Name \"$configuration|$platform\" -Value \"$thisresult\"\n\n            $null = ($using:jresult).lock.WaitOne()\n            try {\n                ($using:jresult).SolutionsBuilt += 1\n                ($using:jresult).SolutionsSucceeded += $thissucceeded\n                ($using:jresult).SolutionsExcluded += $thisexcluded\n                ($using:jresult).SolutionsUnsupported += $thisunsupported\n                ($using:jresult).SolutionsFailed += $thisfailed\n                ($using:jresult).SolutionsSporadic += $thissporadic\n                ($using:jresult).FailSet += $thisfailset\n                ($using:jresult).SporadicSet += $thissporadicset\n                $SolutionsTotal = $using:SolutionsTotal\n                $ThrottleLimit = $using:ThrottleLimit\n                $SolutionsBuilt = ($using:jresult).SolutionsBuilt\n                $SolutionsRemaining = $SolutionsTotal - $SolutionsBuilt\n                $SolutionsRunning = if ($SolutionsRemaining -ge $ThrottleLimit) { $ThrottleLimit } else { $SolutionsRemaining }\n                $SolutionsPending = if ($SolutionsRemaining -ge $ThrottleLimit) { ($SolutionsRemaining - $ThrottleLimit) } else { 0 }\n                $SolutionsBuiltPercent = [Math]::Round(100 * ($SolutionsBuilt / $using:SolutionsTotal))\n                $TBRP = \"T:\" + ($SolutionsTotal) + \"; B:\" + (($using:jresult).SolutionsBuilt) + \"; R:\" + ($SolutionsRunning) + \"; P:\" + ($SolutionsPending)\n                $rstr = \"S:\" + (($using:jresult).SolutionsSucceeded) + \"; E:\" + (($using:jresult).SolutionsExcluded) + \"; U:\" + (($using:jresult).SolutionsUnsupported) + \"; F:\" + (($using:jresult).SolutionsFailed) + \"; O:\" + (($using:jresult).SolutionsSporadic)\n                Write-Progress -Activity \"Building combinations\" -Status \"$SolutionsBuilt of $using:SolutionsTotal combinations built ($SolutionsBuiltPercent%) | $TBRP | $rstr\" -PercentComplete $SolutionsBuiltPercent\n            }\n            finally {\n                ($using:jresult).lock.ReleaseMutex()\n            }\n        }\n    }\n    $null = ($using:jresult).lock.WaitOne()\n    try {\n        ($using:jresult).Results += $ResultElement\n    }\n    finally {\n        ($using:jresult).lock.ReleaseMutex()\n    }\n}\n\n$sw.Stop()\n\nWrite-Output \"\"\n\nif ($jresult.FailSet.Count -gt 0) {\n    Write-Output \"Some combinations were built with errors:\"\n    $jresult.FailSet = $jresult.FailSet | Sort-Object\n    foreach ($failedSample in $jresult.FailSet) {\n        $failedSample -match \"^(.*) (\\w*)\\|(\\w*)$\" | Out-Null\n        $failName = $Matches[1]\n        $failConfiguration = $Matches[2]\n        $failPlatform = $Matches[3]\n        Write-Output \"Build errors in Sample $failName; Configuration: $failConfiguration; Platform: $failPlatform {\"\n        Get-Content \"$LogFilesDirectory\\$failName.$failConfiguration.$failPlatform.0.err\" | Write-Output\n        Write-Output \"} $failedSample\"\n    }\n    Write-Error \"Some combinations were built with errors.\"\n    Write-Output \"\"\n}\n\nif ($jresult.SporadicSet.Count -gt 0) {\n    Write-Output \"Some combinations were built with sporadic error:\"\n    $jresult.SporadicSet = $jresult.SporadicSet | Sort-Object\n    foreach ($sporadicSample in $jresult.SporadicSet) {\n        $sporadicSample -match \"^(.*) (\\w*)\\|(\\w*)$\" | Out-Null\n        $sporadicName = $Matches[1]\n        $sporadicConfiguration = $Matches[2]\n        $sporadicPlatform = $Matches[3]\n        Write-Output \"Build sporadic errors in Sample $sporadicName; Configuration: $sporadicConfiguration; Platform: $sporadicPlatform {\"\n        Get-Content \"$LogFilesDirectory\\$sporadicName.$sporadicConfiguration.$sporadicPlatform.0.err\" | Write-Output\n        Write-Output \"} $sporadicSample\"\n    }\n    Write-Error \"Some combinations were built with sporadic errors.\"\n    Write-Output \"\"\n}\n\n# Display timer statistics to host\n$min = $sw.Elapsed.Minutes\n$seconds = $sw.Elapsed.Seconds\n\n$SolutionsSucceeded = $jresult.SolutionsSucceeded\n$SolutionsExcluded = $jresult.SolutionsExcluded\n$SolutionsUnsupported = $jresult.SolutionsUnsupported\n$SolutionsFailed = $jresult.SolutionsFailed\n$SolutionsSporadic = $jresult.SolutionsSporadic\n$Results = $jresult.Results\n\nWrite-Output \"Built all combinations.\"\nWrite-Output \"\"\nWrite-Output \"Elapsed time:         $min minutes, $seconds seconds.\"\nWrite-Output (\"Disk Remaining (GB):  \" + (((Get-Volume ($DriveLetter = (Get-Item \".\").PSDrive.Name)).SizeRemaining / 1GB)))\nWrite-Output (\"Samples:              \" + $sampleSet.Count)\nWrite-Output (\"Configurations:       \" + $Configurations.Count + \" (\" + $Configurations + \")\")\nWrite-Output (\"Platforms:            \" + $Platforms.Count + \" (\" + $Platforms + \")\")\nWrite-Output \"Combinations:         $SolutionsTotal\"\nWrite-Output \"Succeeded:            $SolutionsSucceeded\"\nWrite-Output \"Excluded:             $SolutionsExcluded\"\nWrite-Output \"Unsupported:          $SolutionsUnsupported\"\nWrite-Output \"Failed:               $SolutionsFailed\"\nWrite-Output \"Sporadic:             $SolutionsSporadic\"\nWrite-Output \"Log files directory:  $LogFilesDirectory\"\nWrite-Output \"Overview report:      $reportFilePath\"\nWrite-Output \"\"\n\n$Results | Sort-Object { $_.Sample } | ConvertTo-Csv | Out-File $reportCsvFilePath\n$Results | Sort-Object { $_.Sample } | ConvertTo-Html -Title \"Overview\" | Out-File $reportFilePath\nInvoke-Item $reportFilePath\n"
        },
        {
          "name": "Building-Locally.md",
          "type": "blob",
          "size": 8.1845703125,
          "content": "# How to build locally\n\n## Step 1: Install Tools\n\n```powershell\nwinget install --id Microsoft.Powershell --source winget\nwinget install --id Git.Git --source winget\n```\n\nFor using WDK NuGet feed based build additionally:\n\n```powershell\nwinget install --id Microsoft.NuGet --source winget\n```\n\n---\n\n## Step 2: Optional: Disable Strong Name Validation\n\nWhen: This step is only required if you will be using pre-release versions of the WDK.\n\nAs per https://learn.microsoft.com/en-us/windows-hardware/drivers/installing-preview-versions-wdk :\n\nRun the following commands from an elevated command prompt to disable strong name validation:\n\n```\nreg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\StrongName\\Verification\\*,31bf3856ad364e35 /v TestPublicKey /t REG_SZ /d 00240000048000009400000006020000002400005253413100040000010001003f8c902c8fe7ac83af7401b14c1bd103973b26dfafb2b77eda478a2539b979b56ce47f36336741b4ec52bbc51fecd51ba23810cec47070f3e29a2261a2d1d08e4b2b4b457beaa91460055f78cc89f21cd028377af0cc5e6c04699b6856a1e49d5fad3ef16d3c3d6010f40df0a7d6cc2ee11744b5cfb42e0f19a52b8a29dc31b0 /f\n\nreg add HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\StrongName\\Verification\\*,31bf3856ad364e35 /v TestPublicKey /t REG_SZ /d 00240000048000009400000006020000002400005253413100040000010001003f8c902c8fe7ac83af7401b14c1bd103973b26dfafb2b77eda478a2539b979b56ce47f36336741b4ec52bbc51fecd51ba23810cec47070f3e29a2261a2d1d08e4b2b4b457beaa91460055f78cc89f21cd028377af0cc5e6c04699b6856a1e49d5fad3ef16d3c3d6010f40df0a7d6cc2ee11744b5cfb42e0f19a52b8a29dc31b0 /f\n```\n\n---\n\n## Step 3: Optional: Install Microsoft .NET Framework 4.7.2 Targeting Pack and Microsoft .NET Framework 4.8.1 SDK\n\nWhen: This step is only required to build sample usb\\usbview .\n\n### Option A: Install VS Components\n\nEasy: If you will install Visual Studio (see later) you may at that point select to add both of following individual components:\n* .NET Framework 4.7.2 targeting pack\n* .NET Framework 4.8.1 SDK\n\n### Option B: Use EWDK\n\nEasy: If you use EWDK, then all necessary prequisites are included.\n\n### Option C: Install Developer Pack\n\nHardest: Install from https://aka.ms/msbuild/developerpacks -> '.NET Framework' -> 'Supported versions' both of following packages:\n* .NET Framework 4.7.2 -> Developer Pack \n* .NET Framework 4.8.1 -> Developer Pack \n\nThis will install following Apps:\n* Microsoft .NET Framework 4.7.2 SDK\n* Microsoft .NET Framework 4.7.2 Targeting Pack\n* Microsoft .NET Framework 4.7.2 Targeting Pack (ENU)\n* Microsoft .NET Framework 4.8.1 SDK\n* Microsoft .NET Framework 4.8.1 Targeting Pack\n* Microsoft .NET Framework 4.8.1 Targeting Pack (ENU)\n\n---\n\n## Step 4: Clone Windows Driver Samples and checkout relevant branch\n\n```powershell\ncd \"path\\to\\your\\repos\"\ngit clone --recurse-submodules \"https://github.com/microsoft/Windows-driver-samples.git\"\ncd \".\\Windows-driver-samples\"\n```\n\nIf you are planning to use in-market WDK, then you would typically want to use the 'main' branch:\n\n```\ngit checkout main\n```\n\nIf you are planning to use a WDK Preview or WDK EEAP release, then you would typically want to use the 'develop' branch:\n\n```\ngit checkout develop\n```\n\n---\n\n## Step 5: Create a \"driver build environment\"\n\nTo build the Windows Driver Samples you need a \"driver build environment\".  In essence an environment that consist of following prerequisites:\n* Visual Studio Build Tools including tools such as for example cl.exe and link.exe .\n* The Windows Software Development Kit.\n* The Windows Driver Kit.\n\n### Option A: Use WDK NuGet Packages\n\n* See [Download the Windows Driver Kit (WDK)](https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk) for instructions on how to install Visual Studio, but only complete `Step 1`.  You do not need to install the SDK or the WDK.\n* Launch a \"Developer Command Prompt for VS 2022\".\n* Restore WDK packages from feed :\n\n```powershell\ncd \"path\\to\\your\\repos\\Windows-driver-samples\"\nnuget restore -PackagesDirectory \".\\packages\"\n```\n\n* When this is done you should have a .\\packages folder that looks like example below:\n\n```powershell\ncd \"path\\to\\your\\repos\\Windows-driver-samples\"\ndir /b packages\nMicrosoft.Windows.SDK.CPP.10.0.26000.1\nMicrosoft.Windows.SDK.CPP.x64.10.0.26000.1\nMicrosoft.Windows.SDK.CPP.arm64.10.0.26000.1\nMicrosoft.Windows.WDK.x64.10.0.26000.1\nMicrosoft.Windows.WDK.arm64.10.0.26000.1\n```\n\n### Option B: Use the Windows Driver Kit\n\n* Here you will install each of above prerequisites one at a time.\n* See [Download the Windows Driver Kit (WDK)](https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk) for instructions on how to install Visual Studio, SDK, and WDK.\n* Launch a \"Developer Command Prompt for VS 2022\".\n\n### Option C: Use an Enterprise WDK\n\n* You can also simply use the Enterprise WDK (EWDK), a standalone, self-contained command-line environment for building drivers that contains all prerequisites in one combined ISO.\n* See [Download the Windows Driver Kit (WDK)](https://learn.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk) for instructions on how to download the EWDK.\n* Mount ISO image\n* Open a terminal\n* `.\\LaunchBuildEnv`\n\n---\n\n## Step 6: Check all samples builds with expected results for all flavors\n\n```powershell\npwsh\n.\\Build-AllSamples\n```\nAbove builds all samples for all configurations and platforms.  \n\nYou can refine what exact samples to build, what configurations, and platforms to build.  build Here are a few examples:\n\n```powershell\n# Get Help:\nGet-Help .\\Build-AllSamples\n\n# Build all solutions for all flavors with builds running in parallel:\n.\\Build-AllSamples\n\n# Build with Verbose output (print start and finish of each sample):\n.\\Build-AllSamples -Verbose\n\n# Build without massive parallism (slow, but good debugging):\n.\\Build-AllSamples -ThrottleLimit 1\n\n# Build the solutions in the tools folder for all flavors:\n.\\Build-AllSamples -Samples '^tools.' -Configurations 'Debug','Release' -Platforms 'x64','arm64'\n\n# Build the solutions in the tools folder for only 'Debug|x64':\n.\\Build-AllSamples -Samples '^tools.' -Configurations 'Debug' -Platforms 'x64'\n```\n\nExample of expected output:\n\n```\nBuild Environment:          NuGet\nBuild Number:               26100\nSamples:                    132\nConfigurations:             2 (Debug Release)\nPlatforms:                  2 (x64 arm64)\nInfVerif_AdditionalOptions: /samples\nCombinations:               528\nLogicalProcessors:          12\nThrottleFactor:             5\nThrottleLimit:              60\nWDS_WipeOutputs:\nDisk Remaining (GB):        ...\n\nT: Combinations\nB: Built\nR: Build is running currently\nP: Build is pending an available build slot\n\nS: Built and result was 'Succeeded'\nE: Built and result was 'Excluded'\nU: Built and result was 'Unsupported' (Platform and Configuration combination)\nF: Built and result was 'Failed'\nO: Built and result was 'Sporadic'\n\nBuilding all combinations...\n\nBuilt all combinations.\n\nElapsed time:         12 minutes, 42 seconds.\nDisk Remaining (GB):  ...\nSamples:              132\nConfigurations:       2 (Debug Release)\nPlatforms:            2 (x64 arm64)\nCombinations:         528\nSucceeded:            526\nExcluded:             0\nUnsupported:          2\nFailed:               0\nSporadic:             0\nLog files directory:  .\\_logs\nOverview report:      .\\_overview.htm\n```\n\n---\n\n## 7: NuGet - Additional Notes\n\nTo restore a specific version of our WDK NuGet packages:\n\nFollow these steps before running \"nuget restore\" command:\n* Open the .\\packages.config file and update the full version (including the branch if required) in all three entries.\n* Open the .\\Directory.build.props file and update the version and build of the package with the same values as in previous step.\n* Open .\\Build-SampleSet and change the NuGet build number (used by .\\exclusions.csv and for determining infverif flags)\n* Now you can run \"nuget restore\"\n\nA few examples of how to interact with nuget:\n\n```powershell\n# To add an alternative online NuGet source:\nnuget sources add -Name \"MyNuGetFeed\" -Source \"https://nugetserver.com/_packaging/feedname/nuget/v3/index.json\"\n\n# To add an alternative local NuGet source:\nnuget sources add -Name \"MyNuGetFeed\" -Source \"\\\\path\\to\\mylocalrepo\"\n\n# To remove an alternative NuGet source:\nnuget sources remove -Name \"MyNuGetFeed\"\n\n# To enumerate NuGet locals:\nnuget locals all -list\n\n# To clear NuGet locals:\nnuget locals all -clear\n```\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.3193359375,
          "content": "<Project>\n<Import Project=\"packages\\Microsoft.Windows.WDK.x64.10.0.26100.2454\\build\\native\\Microsoft.Windows.WDK.x64.props\" Condition=\"Exists('packages\\Microsoft.Windows.WDK.x64.10.0.26100.2454\\build\\native\\Microsoft.Windows.WDK.x64.props') and '$(Platform)' == 'x64'\"/>\n<Import Project=\"packages\\Microsoft.Windows.WDK.arm64.10.0.26100.2454\\build\\native\\Microsoft.Windows.WDK.arm64.props\" Condition=\"Exists('packages\\Microsoft.Windows.WDK.arm64.10.0.26100.2454\\build\\native\\Microsoft.Windows.WDK.arm64.props') and '$(Platform)' == 'ARM64'\"/>\n<Import Project=\"packages\\Microsoft.Windows.SDK.CPP.x64.10.0.26100.2454\\build\\native\\Microsoft.Windows.SDK.cpp.x64.props\" Condition=\"Exists('packages\\Microsoft.Windows.SDK.CPP.x64.10.0.26100.2454\\build\\native\\Microsoft.Windows.SDK.cpp.x64.props') and '$(Platform)' == 'x64'\"/>\n<Import Project=\"packages\\Microsoft.Windows.SDK.CPP.arm64.10.0.26100.2454\\build\\native\\Microsoft.Windows.SDK.cpp.arm64.props\" Condition=\"Exists('packages\\Microsoft.Windows.SDK.CPP.arm64.10.0.26100.2454\\build\\native\\Microsoft.Windows.SDK.cpp.arm64.props') and '$(Platform)' == 'ARM64'\"/>\n<Import Project=\"packages\\Microsoft.Windows.SDK.CPP.10.0.26100.2454\\build\\native\\Microsoft.Windows.SDK.cpp.props\" Condition=\"Exists('packages\\Microsoft.Windows.SDK.CPP.10.0.26100.2454\\build\\native\\Microsoft.Windows.SDK.cpp.props')\"/>\n</Project>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.6025390625,
          "content": "The Microsoft Public License (MS-PL)\nCopyright (c) 2015 Microsoft\n\nThis license governs use of the accompanying software. If you use the software, you\n accept this license. If you do not accept the license, do not use the software.\n\n1. Definitions\n The terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the\n same meaning here as under U.S. copyright law.\n A \"contribution\" is the original software, or any additions or changes to the software.\n A \"contributor\" is any person that distributes its contribution under this license.\n \"Licensed patents\" are a contributor's patent claims that read directly on its contribution.\n\n2. Grant of Rights\n (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create.\n (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software.\n\n3. Conditions and Limitations\n (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks.\n (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically.\n (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software.\n (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license.\n (E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.328125,
          "content": "# Driver samples for Windows 11\n\nThese are the official Microsoft Windows Driver Kit (WDK) driver code samples for Windows 11. They provide a foundation for Universal Windows driver support of all hardware form factors, from phones to desktop PCs. Use these samples with Visual Studio 2022 and Windows Driver Kit (WDK) 11.\n\n[Windows Driver Kit documentation](https://docs.microsoft.com/windows-hardware/drivers/)\n\n## Windows 11 driver development\n\nUse Visual Studio 2022 and Windows Driver Kit (WDK) 11 to build, test, and deploy your drivers. With Windows 11, the driver development environment is integrated into Visual Studio. To get started, download the driver development kits and tools for Windows 11.\n\n[Download the WDK, WinDbg, and associated tools](https://developer.microsoft.com/windows/hardware/windows-driver-kit)\n\n### Windows Driver Kit (WDK)\n\nTake a look at the compilation of the new and changed driver-related content for Windows 11. Areas of improvement include camera, print, display, Near Field Communication (NFC), WLAN, Bluetooth, and more.\n\n[Find out what's new in the WDK](https://docs.microsoft.com/windows-hardware/drivers/what-s-new-in-driver-development)\n\n### Universal Windows drivers\n\nWrite one driver that runs on Windows 11 for desktop editions, as well as other Windows editions that share a common set of interfaces.\n\n[Getting Started with Universal Windows drivers](https://docs.microsoft.com/windows-hardware/drivers/develop/getting-started-with-universal-drivers)\n\n### Windows Driver Frameworks\n\nThe Windows Driver Frameworks (WDF) are a set of libraries that make it simple to write high-quality device drivers.\n\n[WDF driver development guide](https://docs.microsoft.com/windows-hardware/drivers/wdf/)\n\n### Samples\n\nUse the samples in this repo to guide your Windows driver development. Whether you're just getting started or porting an older driver to the newest version of Windows, code samples are valuable guides on how to write drivers.\n\nFor information about important changes that need to be made to the WDK sample drivers before releasing device drivers based on the sample code, see the following topic:\n\n[From Sample Code to Production Driver - What to Change in the Samples](https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/from-sample-code-to-production-driver)\n\n### Build your first driver\n\nIf you're writing your first driver, use these exercises to get started. Each exercise is independent of the others, so you can do them in any order.\n\n[Write a UMDF driver based on a template](https://docs.microsoft.com/windows-hardware/drivers/gettingstarted/writing-a-umdf-driver-based-on-a-template)\n\n[Write a KMDF Hello World driver](https://docs.microsoft.com/windows-hardware/drivers/gettingstarted/writing-a-very-small-kmdf--driver)\n\n[Write a KMDF driver based on a template](https://docs.microsoft.com/windows-hardware/drivers/gettingstarted/writing-a-kmdf-driver-based-on-a-template)\n\n[Use GitHub Actions to build a simple driver project](.github/Build-with-GitHub.md)\n\n# Microsoft Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "TrEE",
          "type": "tree",
          "content": null
        },
        {
          "name": "audio",
          "type": "tree",
          "content": null
        },
        {
          "name": "avstream",
          "type": "tree",
          "content": null
        },
        {
          "name": "bluetooth",
          "type": "tree",
          "content": null
        },
        {
          "name": "configuration.dsc.yaml",
          "type": "blob",
          "size": 2.6953125,
          "content": "# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2\nproperties:\n  resources:\n    - resource: Microsoft.WinGet.DSC/WinGetPackage\n      id: vsPackage\n      directives:\n        description: Install Visual Studio 2022 Community\n        allowPrerelease: true\n      settings:\n        id: Microsoft.VisualStudio.2022.Community\n        source: winget\n        useLatest: true\n    - resource: Microsoft.VisualStudio.DSC/VSComponents\n      id: vsComponents\n      dependsOn:\n        - vsPackage\n      directives:\n        description: Install required VS workloads and components\n      settings:\n        productId: Microsoft.VisualStudio.Product.Community\n        channelId: VisualStudio.17.Release\n        includeRecommended: false\n        components:\n          - Microsoft.VisualStudio.Component.VC.CoreBuildTools\n          - Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core\n          - Microsoft.VisualStudio.Component.VC.Tools.x86.x64\n          - Microsoft.VisualStudio.Component.VC.Tools.ARM64\n          - Microsoft.VisualStudio.Component.VC.Tools.ARM64EC\n          - Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre\n          - Microsoft.VisualStudio.Component.VC.Runtimes.ARM64.Spectre\n          - Microsoft.VisualStudio.Component.VC.Runtimes.ARM64EC.Spectre\n          - Microsoft.VisualStudio.Component.VC.Redist.14.Latest\n          - Microsoft.VisualStudio.Component.Windows10SDK\n          - Microsoft.VisualStudio.Component.VC.ATL\n          - Microsoft.VisualStudio.Component.VC.ATL.ARM64\n          - Microsoft.VisualStudio.Component.VC.ATL.Spectre\n          - Microsoft.VisualStudio.Component.VC.ATL.ARM64.Spectre\n          - Microsoft.VisualStudio.Component.VC.ATLMFC\n          - Microsoft.VisualStudio.Component.VC.ATLMFC.Spectre\n          - Microsoft.VisualStudio.Component.VC.ASAN\n          - Microsoft.VisualStudio.Component.NuGet.BuildTools\n          - Microsoft.VisualStudio.Component.VC.MFC.ARM64\n          - Microsoft.VisualStudio.Component.VC.MFC.ARM64.Spectre\n          - Microsoft.VisualStudio.Workload.NativeDesktop\n          - Component.Microsoft.Windows.DriverKit\n    - resource: Microsoft.WinGet.DSC/WinGetPackage\n      id: sdkPackage\n      directives:\n        description: Install Windows SDK version 26100\n        allowPrerelease: true\n      settings:\n        id: Microsoft.WindowsSDK.10.0.26100\n        source: winget\n        useLatest: true\n    - resource: Microsoft.WinGet.DSC/WinGetPackage\n      id: wdkPackage\n      dependsOn:\n        - sdkPackage\n      directives:\n        description: Install Windows Driver Kit version 26100\n        allowPrerelease: true\n      settings:\n        id: Microsoft.WindowsWDK.10.0.26100\n        source: winget\n        useLatest: true\n  configurationVersion: 0.2.1\n"
        },
        {
          "name": "configuration_vsonly.dsc.yaml",
          "type": "blob",
          "size": 2.1005859375,
          "content": "# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2\nproperties:\n  resources:\n    - resource: Microsoft.WinGet.DSC/WinGetPackage\n      id: vsPackage\n      directives:\n        description: Install Visual Studio 2022 Community\n        allowPrerelease: true\n      settings:\n        id: Microsoft.VisualStudio.2022.Community\n        source: winget\n        useLatest: true\n    - resource: Microsoft.VisualStudio.DSC/VSComponents\n      id: vsComponents\n      dependsOn:\n        - vsPackage\n      directives:\n        description: Install required VS workloads and components\n      settings:\n        productId: Microsoft.VisualStudio.Product.Community\n        channelId: VisualStudio.17.Release\n        includeRecommended: false\n        components:\n          - Microsoft.VisualStudio.Component.VC.CoreBuildTools\n          - Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core\n          - Microsoft.VisualStudio.Component.VC.Tools.x86.x64\n          - Microsoft.VisualStudio.Component.VC.Tools.ARM64\n          - Microsoft.VisualStudio.Component.VC.Tools.ARM64EC\n          - Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre\n          - Microsoft.VisualStudio.Component.VC.Runtimes.ARM64.Spectre\n          - Microsoft.VisualStudio.Component.VC.Runtimes.ARM64EC.Spectre\n          - Microsoft.VisualStudio.Component.VC.Redist.14.Latest\n          - Microsoft.VisualStudio.Component.Windows10SDK\n          - Microsoft.VisualStudio.Component.VC.ATL\n          - Microsoft.VisualStudio.Component.VC.ATL.ARM64\n          - Microsoft.VisualStudio.Component.VC.ATL.Spectre\n          - Microsoft.VisualStudio.Component.VC.ATL.ARM64.Spectre\n          - Microsoft.VisualStudio.Component.VC.ATLMFC\n          - Microsoft.VisualStudio.Component.VC.ATLMFC.Spectre\n          - Microsoft.VisualStudio.Component.VC.ASAN\n          - Microsoft.VisualStudio.Component.NuGet.BuildTools\n          - Microsoft.VisualStudio.Component.VC.MFC.ARM64\n          - Microsoft.VisualStudio.Component.VC.MFC.ARM64.Spectre\n          - Microsoft.VisualStudio.Workload.NativeDesktop\n          - Component.Microsoft.Windows.DriverKit\n  configurationVersion: 0.2.1\n"
        },
        {
          "name": "exclusions.csv",
          "type": "blob",
          "size": 0.6435546875,
          "content": "Path,Configurations,MinBuild,MaxBuild,Reason\naudio\\acx\\samples\\audiocodec\\driver,*,,22621,Only NI: error C1083: Cannot open include file: 'acx.h': No such file or directory\ngeneral\\dchu\\osrfx2_dchu_extension_loose,*|x64,,22621,Only NI: Only x64: Fails to build\ngeneral\\dchu\\osrfx2_dchu_extension_tight,*|x64,,22621,Only NI: Only x64: Fails to build\nnetwork\\trans\\WFPSampler,Debug|ARM64,,22621,Only NI: Only ARM: Fails to build on EWDK 22621 with VS 17.1.5 - CallingConvention=StdCall not supported\nprm,*,,22621,Only NI: Not supported on NI.\npowerlimit\\plclient,*,,22621,Only NI: Not supported on NI.\npowerlimit\\plpolicy,*,,22621,Only NI: Not supported on NI.\n"
        },
        {
          "name": "filesys",
          "type": "tree",
          "content": null
        },
        {
          "name": "general",
          "type": "tree",
          "content": null
        },
        {
          "name": "gnss",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpio",
          "type": "tree",
          "content": null
        },
        {
          "name": "hid",
          "type": "tree",
          "content": null
        },
        {
          "name": "input",
          "type": "tree",
          "content": null
        },
        {
          "name": "network",
          "type": "tree",
          "content": null
        },
        {
          "name": "nfc",
          "type": "tree",
          "content": null
        },
        {
          "name": "nfp",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages.config",
          "type": "blob",
          "size": 0.5439453125,
          "content": "﻿<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<packages>\n  <package id=\"Microsoft.Windows.SDK.CPP\" version=\"10.0.26100.2454\" targetFramework=\"native\" />\n  <package id=\"Microsoft.Windows.SDK.CPP.x64\" version=\"10.0.26100.2454\" targetFramework=\"native\" />\n  <package id=\"Microsoft.Windows.SDK.CPP.arm64\" version=\"10.0.26100.2454\" targetFramework=\"native\" />\n  <package id=\"Microsoft.Windows.WDK.x64\" version=\"10.0.26100.2454\" targetFramework=\"native\" />\n  <package id=\"Microsoft.Windows.WDK.arm64\" version=\"10.0.26100.2454\" targetFramework=\"native\" />\n</packages>\n"
        },
        {
          "name": "pofx",
          "type": "tree",
          "content": null
        },
        {
          "name": "pos",
          "type": "tree",
          "content": null
        },
        {
          "name": "powerlimit",
          "type": "tree",
          "content": null
        },
        {
          "name": "print",
          "type": "tree",
          "content": null
        },
        {
          "name": "prm",
          "type": "tree",
          "content": null
        },
        {
          "name": "sd",
          "type": "tree",
          "content": null
        },
        {
          "name": "security",
          "type": "tree",
          "content": null
        },
        {
          "name": "sensors",
          "type": "tree",
          "content": null
        },
        {
          "name": "serial",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup",
          "type": "tree",
          "content": null
        },
        {
          "name": "simbatt",
          "type": "tree",
          "content": null
        },
        {
          "name": "smartcrd",
          "type": "tree",
          "content": null
        },
        {
          "name": "spb",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "thermal",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "usb",
          "type": "tree",
          "content": null
        },
        {
          "name": "video",
          "type": "tree",
          "content": null
        },
        {
          "name": "wia",
          "type": "tree",
          "content": null
        },
        {
          "name": "wil",
          "type": "commit",
          "content": null
        },
        {
          "name": "wmi",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}