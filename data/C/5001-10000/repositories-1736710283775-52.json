{
  "metadata": {
    "timestamp": 1736710283775,
    "page": 52,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "baskerville/bspwm",
      "stars": 7847,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.248046875,
          "content": "# EditorConfig: https://editorconfig.org\n\n# Top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\ninsert_final_newline = true\ntrim_trailing_whitespace = true\ncharset = utf-8\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": "tags\nbspwm\nbspc\n*.o\ntests/test_window\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.26953125,
          "content": "Copyright (c) 2012, Bastien Dejean\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.5029296875,
          "content": "VERCMD  ?= git describe --tags 2> /dev/null\nVERSION := $(shell $(VERCMD) || cat VERSION)\n\nCPPFLAGS += -D_POSIX_C_SOURCE=200809L -DVERSION=\\\"$(VERSION)\\\"\nCFLAGS   += -std=c99 -pedantic -Wall -Wextra -DJSMN_STRICT\nLDFLAGS  ?=\nLDLIBS    = $(LDFLAGS) -lm -lxcb -lxcb-util -lxcb-keysyms -lxcb-icccm -lxcb-ewmh -lxcb-randr -lxcb-xinerama -lxcb-shape\n\nPREFIX    ?= /usr/local\nBINPREFIX ?= $(PREFIX)/bin\nMANPREFIX ?= $(PREFIX)/share/man\nDOCPREFIX ?= $(PREFIX)/share/doc/bspwm\nBASHCPL   ?= $(PREFIX)/share/bash-completion/completions\nFISHCPL   ?= $(PREFIX)/share/fish/vendor_completions.d\nZSHCPL    ?= $(PREFIX)/share/zsh/site-functions\n\nMD_DOCS    = README.md doc/CHANGELOG.md doc/CONTRIBUTING.md doc/INSTALL.md doc/MISC.md doc/TODO.md\nXSESSIONS ?= $(PREFIX)/share/xsessions\n\nWM_SRC   = bspwm.c helpers.c geometry.c jsmn.c settings.c monitor.c desktop.c tree.c stack.c history.c \\\n\t events.c pointer.c window.c messages.c parse.c query.c restore.c rule.c ewmh.c subscribe.c\nWM_OBJ  := $(WM_SRC:.c=.o)\nCLI_SRC  = bspc.c helpers.c\nCLI_OBJ := $(CLI_SRC:.c=.o)\n\nall: bspwm bspc\n\ndebug: CFLAGS += -O0 -g\ndebug: bspwm bspc\n\nVPATH=src\n\ninclude Sourcedeps\n\n$(WM_OBJ) $(CLI_OBJ): Makefile\n\nbspwm: $(WM_OBJ)\n\nbspc: $(CLI_OBJ)\n\ninstall:\n\tmkdir -p \"$(DESTDIR)$(BINPREFIX)\"\n\tcp -pf bspwm \"$(DESTDIR)$(BINPREFIX)\"\n\tcp -pf bspc \"$(DESTDIR)$(BINPREFIX)\"\n\tmkdir -p \"$(DESTDIR)$(MANPREFIX)\"/man1\n\tcp -p doc/bspwm.1 \"$(DESTDIR)$(MANPREFIX)\"/man1\n\tcp -Pp doc/bspc.1 \"$(DESTDIR)$(MANPREFIX)\"/man1\n\tmkdir -p \"$(DESTDIR)$(BASHCPL)\"\n\tcp -p contrib/bash_completion \"$(DESTDIR)$(BASHCPL)\"/bspc\n\tmkdir -p \"$(DESTDIR)$(FISHCPL)\"\n\tcp -p contrib/fish_completion \"$(DESTDIR)$(FISHCPL)\"/bspc.fish\n\tmkdir -p \"$(DESTDIR)$(ZSHCPL)\"\n\tcp -p contrib/zsh_completion \"$(DESTDIR)$(ZSHCPL)\"/_bspc\n\tmkdir -p \"$(DESTDIR)$(DOCPREFIX)\"\n\tcp -p $(MD_DOCS) \"$(DESTDIR)$(DOCPREFIX)\"\n\tmkdir -p \"$(DESTDIR)$(DOCPREFIX)\"/examples\n\tcp -pr examples/* \"$(DESTDIR)$(DOCPREFIX)\"/examples\n\tmkdir -p \"$(DESTDIR)$(XSESSIONS)\"\n\tcp -p contrib/freedesktop/bspwm.desktop \"$(DESTDIR)$(XSESSIONS)\"\n\nuninstall:\n\trm -f \"$(DESTDIR)$(BINPREFIX)\"/bspwm\n\trm -f \"$(DESTDIR)$(BINPREFIX)\"/bspc\n\trm -f \"$(DESTDIR)$(MANPREFIX)\"/man1/bspwm.1\n\trm -f \"$(DESTDIR)$(MANPREFIX)\"/man1/bspc.1\n\trm -f \"$(DESTDIR)$(BASHCPL)\"/bspc\n\trm -f \"$(DESTDIR)$(FISHCPL)\"/bspc.fish\n\trm -f \"$(DESTDIR)$(ZSHCPL)\"/_bspc\n\trm -rf \"$(DESTDIR)$(DOCPREFIX)\"\n\trm -f \"$(DESTDIR)$(XSESSIONS)\"/bspwm.desktop\n\ndoc:\n\ta2x -v -d manpage -f manpage -a revnumber=$(VERSION) doc/bspwm.1.asciidoc\n\nclean:\n\trm -f $(WM_OBJ) $(CLI_OBJ) bspwm bspc\n\n.PHONY: all debug install uninstall doc clean\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3427734375,
          "content": "## Description\n\n*bspwm* is a tiling window manager that represents windows as the leaves of a full binary tree.\n\nIt only responds to X events, and the messages it receives on a dedicated socket.\n\n*bspc* is a program that writes messages on *bspwm*'s socket.\n\n*bspwm* doesn't handle any keyboard or pointer inputs: a third party program (e.g. *sxhkd*) is needed in order to translate keyboard and pointer events to *bspc* invocations.\n\nThe outlined architecture is the following:\n\n```\n        PROCESS          SOCKET\nsxhkd  -------->  bspc  <------>  bspwm\n```\n\n## Configuration\n\nThe default configuration file is `$XDG_CONFIG_HOME/bspwm/bspwmrc`: this is simply a shell script that calls *bspc*.\n\nAn argument is passed to that script to indicate whether is was executed after a restart (`$1 -gt 0`) or not (`$1 -eq 0`).\n\nKeyboard and pointer bindings are defined with [sxhkd](https://github.com/baskerville/sxhkd).\n\nExample configuration files can be found in the [examples](examples) directory.\n\n## Monitors, desktops and windows\n\n*bspwm* holds a list of monitors.\n\nA monitor is just a rectangle that contains desktops.\n\nA desktop is just a pointer to a tree.\n\nMonitors only show the tree of one desktop at a time (their focused desktop).\n\nThe tree is a partition of a monitor's rectangle into smaller rectangular regions.\n\nEach node in a tree either has zero or two children.\n\nEach internal node is responsible for splitting a rectangle in half.\n\nA split is defined by two parameters: the type (horizontal or vertical) and the ratio (a real number *r* such that *0 < r < 1*).\n\nEach leaf node holds exactly one window.\n\n## Insertion modes\n\nWhen *bspwm* receives a new window, it inserts it into a window tree at the specified insertion point (a leaf) using the insertion mode specified for that insertion point.\n\nThe insertion mode tells *bspwm* how it should alter the tree in order to insert new windows on a given insertion point.\n\nBy default the insertion point is the focused window and its insertion mode is *automatic*.\n\n### Manual mode\n\nThe user can specify a region in the insertion point where the next new window should appear by sending a *node -p|--presel-dir DIR* message to *bspwm*.\n\nThe *DIR* argument allows to specify how the insertion point should be split (horizontally or vertically) and if the new window should be the first or the second child of the new internal node (the insertion point will become its *brother*).\n\nAfter doing so the insertion point goes into *manual* mode.\n\nLet's consider the following scenario:\n\n```\n            a                          a                          a\n           / \\                        / \\                        / \\\n          1   b         --->         c   b         --->         c   b\n          ^  / \\                    / \\ / \\                    / \\ / \\\n            2   3                  4  1 2  3                  d  1 2  3\n                                   ^                         / \\\n                                                            5   4\n                                                            ^\n\n+-----------------------+  +-----------------------+  +-----------------------+\n|           |           |  |           |           |  |     |     |           |\n|           |     2     |  |     4     |     2     |  |  5  |  4  |     2     |\n|           |           |  |     ^     |           |  |  ^  |     |           |\n|     1     |-----------|  |-----------|-----------|  |-----------|-----------|\n|     ^     |           |  |           |           |  |           |           |\n|           |     3     |  |     1     |     3     |  |     1     |     3     |\n|           |           |  |           |           |  |           |           |\n+-----------------------+  +-----------------------+  +-----------------------+\n\n            X                          Y                          Z \n```\n\nIn state *X*, the insertion point is *1*.\n\nWe send the following message to *bspwm*: *node -p north*.\n\nThen add a new window: *4*, this leads to state *Y*: the new internal node, *c* becomes *a*'s first child.\n\nFinally we send another message: *node -p west* and add window *5*.\n\nThe ratio of the preselection (that ends up being the ratio of the split of the new internal node) can be changed with the *node -o|--presel-ratio* message.\n\n### Automatic mode\n\nThe *automatic* mode, as opposed to the *manual* mode, doesn't require any user choice. The way the new window is inserted is determined by the value of the automatic scheme and the initial polarity settings.\n\n#### Longest side scheme\n\nWhen the value of the automatic scheme is `longest_side`, the window will be attached as if the insertion point was in manual mode and the split direction was chosen based on the dimensions of the tiling rectangle and the initial polarity.\n\nLet's consider the following scenario, where the initial polarity is set to `second_child`:\n\n```\n             1                          a                          a\n             ^                         / \\                        / \\\n                         --->         1   2         --->         1   b\n                                          ^                         / \\\n                                                                   2   3\n                                                                       ^\n\n +-----------------------+  +-----------------------+  +-----------------------+\n |                       |  |           |           |  |           |           |\n |                       |  |           |           |  |           |     2     |\n |                       |  |           |           |  |           |           |\n |           1           |  |     1     |     2     |  |     1     |-----------|\n |           ^           |  |           |     ^     |  |           |           |\n |                       |  |           |           |  |           |     3     |\n |                       |  |           |           |  |           |     ^     |\n +-----------------------+  +-----------------------+  +-----------------------+\n\n             X                          Y                          Z\n```\n\nIn state *X*, a new window is added.\n\nSince *1* is wide, it gets split vertically and *2* is added as *a*'s second child given the initial polarity.\n\nThis leads to *Y* where we insert window *3*. *2* is tall and is therefore split horizontally. *3* is once again added as *b*'s second child.\n\n#### Alternate scheme\n\nWhen the value of the automatic scheme is `alternate`, the window will be attached as if the insertion point was in manual mode and the split direction was chosen based on the split type of the insertion point's parent and the initial polarity. If the parent is split horizontally, the insertion point will be split vertically and vice versa.\n\n#### Spiral scheme\n\nWhen the value of the automatic scheme is `spiral`, the window will *take the space* of the insertion point.\n\nLet's dive into the details with the following scenario:\n\n```\n             a                          a                          a\n            / \\                        / \\                        / \\\n           1   b         --->         1   c         --->         1   d\n              / \\                        / \\                        / \\\n             2   3                      4   b                      5   c\n             ^                          ^  / \\                     ^  / \\\n                                          3   2                      b   4\n                                                                    / \\\n                                                                   3   2\n\n +-----------------------+  +-----------------------+  +-----------------------+\n |           |           |  |           |           |  |           |           |\n |           |     2     |  |           |     4     |  |           |     5     |\n |           |     ^     |  |           |     ^     |  |           |     ^     |\n |     1     |-----------|  |     1     |-----------|  |     1     |-----------|\n |           |           |  |           |     |     |  |           |  3  |     |\n |           |     3     |  |           |  3  |  2  |  |           |-----|  4  |\n |           |           |  |           |     |     |  |           |  2  |     |\n +-----------------------+  +-----------------------+  +-----------------------+\n\n             X                          Y                          Z\n```\n\nIn state *X*, the insertion point, *2* is in automatic mode.\n\nWhen we add a new window, *4*, the whole tree rooted at *b* is reattached, as the second child of a new internal node, *c*.\n\nThe splitting parameters of *b* (type: *horizontal*, ratio: *½*) are copied to *c* and *b* is rotated by 90° clockwise.\n\nThe tiling rectangle of *4* in state *Y* is equal to the tiling rectangle of *2* in state *X*.\n\nThen the insertion of *5*, with *4* as insertion point, leads to *Z*.\n\nThe *spiral* automatic scheme generates window spirals that rotate clockwise (resp. anti-clockwise) if the insertion point is the first (resp. second) child of its parent.\n\n\n## Supported protocols and standards\n\n- The RandR and Xinerama protocols.\n- A subset of the EWMH and ICCCM standards.\n\n## Community\n\nWant to get in touch with other *bspwm* users or you need help? Join us on our:\n\n- Subreddit at [r/bspwm](https://www.reddit.com/r/bspwm/).\n- IRC channel at `#bspwm` on `irc.libera.chat` (maintained by [Emanuele Torre](https://github.com/emanuele6) / emanuele6 on IRC).\n- Matrix room at https://matrix.to/#/#bspwm:matrix.org\n"
        },
        {
          "name": "Sourcedeps",
          "type": "blob",
          "size": 2.0791015625,
          "content": "bspc.o: bspc.c common.h helpers.h\nbspwm.o: bspwm.c bspwm.h common.h desktop.h events.h ewmh.h helpers.h history.h messages.h monitor.h pointer.h rule.h settings.h subscribe.h types.h window.h\ndesktop.o: desktop.c bspwm.h desktop.h ewmh.h helpers.h history.h monitor.h query.h settings.h subscribe.h tree.h types.h window.h\nevents.o: events.c bspwm.h events.h ewmh.h helpers.h monitor.h pointer.h query.h settings.h subscribe.h tree.h types.h window.h\newmh.o: ewmh.c bspwm.h ewmh.h helpers.h settings.h tree.h types.h\ngeometry.o: geometry.c geometry.h helpers.h types.h\nhelpers.o: helpers.c bspwm.h helpers.h types.h\nhistory.o: history.c bspwm.h helpers.h query.h tree.h types.h\njsmn.o: jsmn.c jsmn.h\nmessages.o: messages.c bspwm.h common.h desktop.h helpers.h jsmn.h messages.h monitor.h parse.h pointer.h query.h restore.h rule.h settings.h subscribe.h tree.h types.h window.h\nmonitor.o: monitor.c bspwm.h desktop.h ewmh.h geometry.h helpers.h monitor.h pointer.h query.h settings.h subscribe.h tree.h types.h window.h\nparse.o: parse.c helpers.h parse.h subscribe.h types.h\npointer.o: pointer.c bspwm.h events.h helpers.h monitor.h pointer.h query.h settings.h stack.h subscribe.h tree.h types.h window.h\nquery.o: query.c bspwm.h desktop.h helpers.h history.h monitor.h parse.h query.h subscribe.h tree.h types.h window.h\nrestore.o: restore.c bspwm.h desktop.h ewmh.h helpers.h history.h jsmn.h monitor.h parse.h pointer.h query.h restore.h settings.h stack.h subscribe.h tree.h types.h window.h\nrule.o: rule.c bspwm.h ewmh.h helpers.h parse.h rule.h settings.h subscribe.h types.h window.h\nsettings.o: settings.c bspwm.h helpers.h settings.h types.h\nstack.o: stack.c bspwm.h ewmh.h helpers.h stack.h subscribe.h tree.h types.h window.h\nsubscribe.o: subscribe.c bspwm.h desktop.h helpers.h settings.h subscribe.h types.h\ntree.o: tree.c bspwm.h desktop.h ewmh.h geometry.h helpers.h history.h monitor.h pointer.h query.h settings.h stack.h subscribe.h tree.h types.h window.h\nwindow.o: window.c bspwm.h ewmh.h geometry.h helpers.h monitor.h parse.h pointer.h query.h rule.h settings.h stack.h subscribe.h tree.h types.h window.h\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "0.9.10"
        },
        {
          "name": "artworks",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}