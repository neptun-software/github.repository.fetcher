{
  "metadata": {
    "timestamp": 1736710383848,
    "page": 204,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "haproxy/haproxy",
      "stars": 5150,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.8671875,
          "content": "FreeBSD_task:\n  freebsd_instance:\n    matrix:\n      image_family: freebsd-14-1\n  only_if: $CIRRUS_BRANCH =~ 'master|next'\n  install_script:\n    - pkg update -f && pkg upgrade -y && pkg install -y openssl git gmake lua54 socat pcre2\n  script:\n    - sudo sysctl kern.corefile=/tmp/%N.%P.core\n    - sudo sysctl kern.sugid_coredump=1\n    - scripts/build-vtest.sh\n    - gmake CC=clang V=1 ERR=1 TARGET=freebsd USE_ZLIB=1 USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 USE_LUA=1 LUA_INC=/usr/local/include/lua54 LUA_LIB=/usr/local/lib LUA_LIB_NAME=lua-5.4\n    - ./haproxy -vv\n    - ldd haproxy\n  test_script:\n    - env VTEST_PROGRAM=../vtest/vtest gmake reg-tests REGTESTS_TYPES=default,bug,devel\n  on_failure:\n    debug_script: (for folder in /tmp/*regtest*/vtc.*; do cat $folder/INFO $folder/LOG; done && ls /tmp/haproxy.*.core && gdb -ex 'thread apply all bt full' ./haproxy /tmp/haproxy.*.core)\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.056640625,
          "content": "SUBVERS export-subst\nVERDATE export-subst\n*.[ch] diff=cpp\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.884765625,
          "content": "# Below we forbid everything and only allow what we know, that's much easier\n# than blocking about 500 different test files and bug report outputs.\n/.*\n/*\n!/.cirrus.yml\n!/.gitattributes\n!/.github\n!/.gitignore\n!/.travis.yml\n!/CHANGELOG\n!/LICENSE\n!/BRANCHES\n!/BSDmakefile\n!/Makefile\n!/README\n!/INSTALL\n!/CONTRIBUTING\n!/MAINTAINERS\n!/SUBVERS\n!/VERDATE\n!/VERSION\n!/addons\n!/admin\n!/dev\n!/doc\n!/ebtree\n!/examples\n!/include\n!/src\n!/tests\n!/debian\n!/scripts\n!/reg-tests\n# Reject some generic files\n*.o\n*.a\n*~\n*.rej\n*.orig\n*.bak\n*.sw[op]\n# And reject some specific files\n/admin/halog/halog\n/admin/dyncookie/dyncookie\n/admin/iprange/ip6range\n/admin/iprange/iprange\n/admin/systemd/haproxy.service\ndev/base64/base64rev-gen\ndev/flags/flags\ndev/poll/poll\ndev/tcploop/tcploop\ndev/haring/haring\ndev/hpack/decode\ndev/hpack/gen-rht\ndev/qpack/decode\ndev/udp/udp-perturb\n/src/dlmalloc.c\n/tests/test_hashes\ndoc/lua-api/_build\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.033203125,
          "content": "Tim Duesterhus <tim@bastelstu.be>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.966796875,
          "content": "dist: focal\n\nlanguage: c\n\nbranches:\n  only:\n    - master\n\nenv:\n  global:\n    - FLAGS=\"USE_LUA=1 USE_OPENSSL=1 USE_PCRE=1 USE_PCRE_JIT=1 USE_ZLIB=1\"\n    - TMPDIR=/tmp\n\naddons:\n  apt:\n    update: true\n    packages: [ liblua5.3-dev, libsystemd-dev, libpcre2-dev, socat, libpcre3-dev ]\n\nmatrix:\n  include:\n  - os: linux\n    arch: ppc64le\n    compiler: gcc\n    if: type == cron\n#  - os: linux\n#    arch: arm64\n#    compiler: gcc\n#    if: type == cron\n  - os: linux\n    arch: arm64-graviton2\n    group: edge\n    virt: vm\n    compiler: gcc\n    if: type == cron\n  - os: linux\n    arch: s390x\n    compiler: gcc\n    if: type == cron\n\ninstall:\n  - scripts/build-vtest.sh\n\nscript:\n  - make -j$(nproc) ERR=1 TARGET=linux-glibc CC=$CC DEBUG=-DDEBUG_STRICT=1 $FLAGS\n  - ./haproxy -vv\n  - ldd haproxy\n  - make reg-tests VTEST_PROGRAM=../vtest/vtest REGTESTS_TYPES=default,bug,devel\n\nafter_failure:\n  - |\n    for folder in ${TMPDIR}/*regtest*/vtc.*; do\n      cat $folder/INFO\n      cat $folder/LOG\n    done\n"
        },
        {
          "name": "BRANCHES",
          "type": "blob",
          "size": 13.716796875,
          "content": "HAProxy branches and life cycle\n===============================\n\nThe HAProxy project evolves quickly to stay up to date with modern features\nfound in web environments but also takes a great care of addressing bugs which\nmay affect deployed versions without forcing such users to upgrade when not\nneeded. For this reason the project is developed in branches.\n\nA branch is designated as two numbers separated by a dot, for example \"1.8\".\nThis numbering is historical. Each new development cycle increases the second\ndigit by one, and after it reaches '9' it goes back to zero and the first digit\nincreases by one. It effectively grows as a decimal number increased by 0.1 per\nversion.\n\nThe complete version is made of the branch suffixed with \"-dev\" followed by a\nsequence number during development, then by \".\" followed by a number when the\ndevelopment of that branch is finished and the branch enters a maintenance\nphase. The first release of a branch starts at \".0\". Immediately after \".0\" is\nissued, the next branch is created as \"-dev0\" as an exact copy of the previous\nbranch's \".0\" version. Thus we observe the following development sequence:\n\n ... 1.9-dev10 -> 1.9-dev11 -> 1.9.0 -> 2.0-dev0 -> 2.0-dev1 ... 2.0 -> ...\n\nOccasionally a series of \"-rc\" versions may be emitted between the latest -dev\nand the release to mark the end of development and start of stabilizing, though\nit's mostly a signal send to users that the release is approaching rather than\na change in the cycle as it is always hard to categorize patches.\n\nVery often the terms \"branch\" and \"version\" will be used interchangeably with\nonly the first two digits to designate \"the latest version of that branch\". So\nwhen someone asks you \"Could you please try the same on 1.8\", it means \"1.8.X\"\nwith X as high as possible, thus for example 1.8.20 if this one is available at\nthis moment.\n\nDuring the maintenance phase, a maintenance branch is created for the just\nreleased version. The development version remains in the development branch\ncalled \"master\", or sometimes \"-dev\". If branches are represented vertically\nand time horizontally, this will look like this:\n\n                     versions                                       branch\n  1.9-dev10  1.9-dev11  1.9.0  2.0-dev0  2.0-dev1  2.0-dev2\n   ----+--------+---------+-------+---------+---------+---------->  master\n                           \\\n                            \\          1.9.1         1.9.2\n                             `-----------+-------------+--------->   1.9\n\nEach released version (e.g. 1.9.0 above) appears once in the master branch so\nthat it is easy to list history of changes between versions.\n\nBefore version 1.4, development and maintenance were inter-mixed in the same\nbranch, which resulted in latest maintenance branches becoming unstable after\nsome point. This is why versions 1.3.14 and 1.3.15 became maintenance branches\non their own while the development pursued on 1.3 to stabilize again in the\nlatest versions.\n\nStarting with version 1.4.0, a rule has been set not to create new features\ninto a maintenance branch. It was not well respected and still created trouble\nwith certain 1.4 versions causing regressions and confusing users.\n\nSince 1.5.0 this \"no new feature\" rule has become strict and maintenance\nversions only contain bug fixes that are necessary in this branch. This means\nthat any version X.Y.Z is necessarily more stable than X.Y.W with W<Z.\n\nFor this reason there is absolutely no excuse for not updating a version within\nyour branch, as your version necessarily contains bugs that are fixed in any\nlater version in that same branch. Obviously when a branch is just released,\nthere will be some occasional bugs. And once in a while a fix for a recently\ndiscovered bug may have an undesired side effect called a regression. This must\nnever happen but this will happen from time to time, especially on recently\nreleased versions. This is often presented as an excuse by some users for not\nupdating but this is wrong, as the risk staying with an older version is much\nhigher than the risk of updating. If you fear there could be an issue with an\nupdate because you don't completely trust the version in your branch, it simply\nmeans you're using the wrong branch and need an older one.\n\nWhen a bug is reported in a branch, developers will systematically ask if the\nbug is present in the latest version of this branch (since developers don't\nlike to work on bugs that were already fixed). It's a good practice to perform\nthe update yourself and to test again before reporting the bug. Note, as long\nas you're using a supported branch, as indicated on the haproxy.org web site,\nyou don't need to upgrade to another branch to report a bug. However from time\nto time it may happen that a developer will ask you if you can try it in order\nto help narrow the problem down. But this will never be a requirement, just a\nquestion.\n\nOnce a bug is understood, it is tested on the development branch and fixed\nthere. Then the fix will be applied in turn to older branches, jumping from\none to the other in descending order. For example:\n\n               FIX\n     2.0-dev4  HERE       2.0-dev5     2.0-dev6\n   -----+-------V-------------+-----------+--------------> master\n   1.9.4         \\      1.9.5     1.9.6         1.9.7\n   --+------------o-------+---------+-------------+------> 1.9\n      1.8.18       \\          1.8.19         1.8.20\n   -----+-----------o------------+-------------+---------> 1.8\n\nThis principle ensures that you will always have a safe upgrade path from an\nolder branch to a newer: under no circumstances a bug that was already fixed\nin an older branch will still be present in a newer one. In the diagram above,\na bug reported for 1.8.18 would be fixed between 2.0-dev4 and 2.0-dev5. The\nfix will be backported into 1.9 and from there into 1.8. 1.9.5 will be issued\nwith the fix before 1.8.19 will be issued. This guarantees that for any version\n1.8 having the fix, there always exists a version 1.9 with it as well. So if\nyou would upgrade to 1.8.19 to benefit from the fix and the next day decide\nthat for whatever new feature you need to upgrade to 1.9, you'll have 1.9.5\navailable with the same set of fixes so you will not reintroduce a previously\nfixed problem.\n\nIn practice, it takes longer to release older versions than newer ones. There\nare two reasons to this. One is technical: the fixes often require some\nadaptations to be done for older versions. The other reason is stability: in\nspite of the great care and the tests, there is always a faint risk that a fix\nintroduces a regression. By leaving fixes exposed in more recent versions\nbefore appearing in older ones, there is a much smaller probability that such a\nregression remains undetected when the next version of the older branch is\nissued.\n\nSo the rule for the best stability is very simple:\n\n    STICK TO THE BRANCH THAT SUITS YOUR NEEDS AND APPLY ALL UPDATES.\n\nWith other projects, some people developed a culture of backporting only a\nselection of fixes into their own maintenance branch. Usually they consider\nthese fixes are critical, or security-related only. THIS IS TERRIBLY WRONG.\nIt is already very difficult for the developers who made the initial patch to\nfigure if and how it must be backported to an older branch, what extra patches\nit depends on to be safe, as you can imagine it is impossible for anyone else\nto make a safe guess about what to pick.\n\n     A VERSION WHICH ONLY CONTAINS A SELECTION OF FIXES IS WAY MORE\n     DANGEROUS AND LESS STABLE THAN ONE WITHOUT ANY OF THESE FIXES.\n\nBranches up to 1.8 are all designated as \"long-term supported\" (\"LTS\" for\nshort), which means that they are maintained for several years after the\nrelease. These branches were emitted at a pace of one per year since 1.5 in\n2014. As of 2019, 1.5 is still supported and widely used, even though it very\nrarely receives updates. After a few years these LTS branches enter a\n\"critical fixes only\" status, which means that they will rarely receive a fix\nbut if that a critital issue affects them, a release will be made, with or\nwithout any other fix. Once a version is not supported anymore, it will not\nreceive any fix at all and it will really be time for you to upgrade to a more\nrecent branch. Please note that even when an upgrade is needed, a great care is\ngiven to backwards compatibility so that most configs written for version 1.1\nstill work with little to no modification 16 years later on version 2.0.\n\nSince 1.9, the release pacing has increased to match faster moving feature sets\nand a faster stabilization of the technical foundations. The principle is now\nthe following:\n  - one release is emitted between October and December, with an odd version\n    number (such as \"1.9\"). This version heavily focuses on risky changes that\n    are considered necessary to develop new features. It can for example bring\n    nice performance improvements as well as invisible changes that will serve\n    later ; these versions will only be emitted for developers and highly\n    skilled users. They will not be maintained for a long time, they will\n    receive updates for 12 to 18 months only after which they will be marked\n    End-Of-Life (\"EOL\" for short). They may receive delicate fixes during their\n    maintenance cycle so users have to be prepared to see some breakage once in\n    a while as fixes are stabilizing. THESE VERSIONS MUST ABSOLUTELY NOT BE\n    PACKAGED BY OPERATING SYSTEM VENDORS.\n\n  - one release is emitted between May and June, with an even version number\n    (such as \"2.0\"). This version mostly relies on the technical foundations\n    brought by the previous release and tries hard not to apply risky changes.\n    Instead it will bring new user-visible features. Such versions will be\n    long-term supported and may be packaged by operating system vendors.\n\nThis development model provides better stability for end users and better\nfeedback for developers:\n  - regular users stick to LTS versions which rely on the same foundations\n    as the previous releases that had 6 months to stabilize. In terms of\n    stability it really means that the point zero version already accumulated\n    6 months of fixes and that it is much safer to use even just after it is\n    released.\n\n  - for developers, given that the odd versions are solely used by highly\n    skilled users, it's easier to get advanced traces and captures, and there\n    is less pressure during bug reports because there is no doubt the user is\n    autonomous and knows how to work around the issue or roll back to the last\n    working version.\n\nThus the release cycle from 1.8 to 2.2 should look like this:\n\n 1.8.0           1.9.0           2.0.0          2.1.0          2.2.0\n --+---------------+---------------+--------------+--------------+----> master\n    \\               \\               \\              \\              \\\n     \\               \\               \\              \\              `--> 2.2 LTS\n      \\               \\               \\              `--+--+--+---+---> 2.1\n       \\               \\               `----+-----+------+-------+----> 2.0 LTS\n        \\               `--+-+-+--+---+------+--------+-----|  EOL      1.9\n         `---+---+---+-----+-------+-----------+---------------+------> 1.8 LTS\n\nIn short the non-LTS odd releases can be seen as technological previews of the\nnext feature release, and will be terminated much earlier. The plan is to barely\nlet them overlap with the next non-LTS release, allowing advanced users to\nalways have the choice between the last two major releases.\n\nWith all this in mind, what version should you use ? It's quite simple:\n  - if you're a first-time HAProxy user, just use the version provided by your\n    operating system. Just take a look at the \"known bugs\" section on the\n    haproxy.org web site to verify that it's not affected by bugs that could\n    have an impact for you.\n\n  - if you don't want or cannot use the version shipped with your operating\n    system, it is possible that other people (including the package maintainer)\n    provide alternate versions. This is the case for Debian and Ubuntu for\n    example, where you can choose your distribution and pick the branch you\n    need here: https://haproxy.debian.net/\n\n  - if you want to build with specific options, apply some patches, you'll\n    have to build from sources. If you have little experience or are not\n    certain to devote regular time to perform this task, take an \"old\" branch\n    (i.e. 1-2 years old max, for example 1.8 when 2.0 is emitted). You'll avoid\n    most bugs and will not have to work too often to update your local version.\n\n  - if you need a fresh version for application development, or to benefit from\n    latest improvements, take the most recent version of the most recent branch\n    and keep it up to date. You may even want to use the Git version or nightly\n    snapshots.\n\n  - if you want to develop on HAProxy, use the master from the Git tree.\n\n  - if you want to follow HAProxy's development by doing some tests without\n    the burden of entering too much into the development process, just use the\n    -dev versions of the master branch. At some point you'll feel the urge to\n    switch to the Git version anyway as it will ultimately simplify your work.\n\n  - if you're installing it on unmanaged servers with little to no hostile\n    exposure, or your home router, you should pick the latest version in one\n    of the oldest supported branches. While it doesn't guarantee that you will\n    never have to upgrade it, at least as long as you don't use too complex a\n    setup, it's unlikely that you will need to update it often.\n\nAnd as a general rule, do not put a non-LTS version on a server unless you are\nabsolutely certain you are going to keep it up to date yourself and already\nplan to replace it once the following LTS version is issued. If you are not\ngoing to manage updates yourself, use pre-packaged versions exclusively and do\nnot expect someone else to have to deal with the burden of building from\nsources.\n"
        },
        {
          "name": "BSDmakefile",
          "type": "blob",
          "size": 0.3369140625,
          "content": "# Makefile stub for FreeBSD, it checks BSDmakefile before Makefile so\n# we can be friendly to the user and tell them to use gmake.\n.BEGIN:\n\t@echo \"Please use GNU make instead. It is often called gmake on BSD systems.\"\n\t@echo \"Example:\"\n\t@echo '  gmake ${MAKEFLAGS} $(.TARGETS)' | sed -e 's, -J[ ]*[0-9,]*,,'\n\t@echo\n\nall $(.TARGETS): .SILENT\n\t@-\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 1551.623046875,
          "content": "ChangeLog :\n===========\n\n2025/01/09 : 3.2-dev3\n    - DOC: config: add missing \"track-sc0\" in action keywords matrix\n    - BUG/MINOR: stktable: invalid use of stkctr_set_entry() with mixed table types\n    - BUG/MAJOR: mux-quic: fix BUG_ON on empty STREAM emission\n    - BUG/MEDIUM: mux-h2: Count copied data when looping on RX bufs in h2_rcv_buf()\n    - Revert \"BUG/MAJOR: mux-quic: fix BUG_ON on empty STREAM emission\"\n    - BUG/MAJOR: mux-quic: properly fix BUG_ON on empty STREAM emission\n    - MINOR: mux-quic: add traces on sd attach\n    - BUG/MEDIUM: mux-quic: do not attach on already closed stream\n    - BUG/MINOR: compression: handle a possible strdup() failure\n    - BUG/MINOR: pool: handle a possible strdup() failure\n    - BUG/MINOR: cfgparse-tcp: handle a possible strdup() failure\n    - BUG/MINOR: log: Allow to use if/unless conditionnals for do-log action\n    - MINOR: config: Alert about extra arguments for errorfile and errorloc\n    - BUG/MINOR: mux-quic: fix wakeup on qcc_set_error()\n    - MINOR: mux-quic: change return value of qcs_attach_sc()\n    - BUG/MINOR: mux-quic: handle closure of uni-stream\n    - BUG/MEDIUM: promex/resolvers: Don't dump metrics if no nameserver is defined\n    - BUG/MAJOR: ssl/ocsp: fix NULL conn object dereferencing to access QUIC TLS counters\n    - MEDIUM: errors: get rid of shm_open()\n    - BUILD: makefile: do not clean standalone binaries on a simple \"make clean\"\n    - BUILD: makefile: add a qinfo macro to pass info in quiet mode\n    - DEV: ncpu: add a simple utility to help with NUMA development\n    - DEV: ncpu: implement a wrapper mode\n    - DEV: ncpu: make the wrapper work both as a lib and executable\n    - BUG/MEDIUM: h1-htx: Properly handle bodyless messages\n    - MINOR: tools: add a few functions to simply check for a file's existence\n\n2024/12/25 : 3.2-dev2\n    - MINOR: build: define DEBUG_STRESS\n    - MINOR: applet: define applet_putchk_stress() alternative\n    - MINOR: stats: use stress mode to force reentrant dumps\n    - CI: scripts: add support for AWS-LC-FIPS in build-ssl.sh\n    - MINOR: ssl: add \"FIPS\" details in haproxy -vv\n    - MEDIUM: ssl: rename 'OpenSSL' by 'SSL library' in haproxy -vv\n    - CI: github: let's add an AWS-LC-FIPS job\n    - MINOR: window_filter: rely on the time to update the filter samples (QUIC/BBR)\n    - BUG/MINOR: quic: wrong logical statement in in_recovery_period() (BBR)\n    - BUG/MINOR: quic: fix BBB max bandwidth oscillation issue.\n    - BUG/MINOR: quic: wrong bbr_target_inflight() implementation\n    - BUG/MINOR: quic: remove max_bw filter from delivery rate sampling\n    - BUG/MINOR: quic: underflow issue for bbr_inflight_hi_from_lost_packet()\n    - BUG/MINOR: quic: reduce packet losses at least during ProbeBW_CRUISE (BBR)\n    - MINOR: quic: reduce the private data size of QUIC cc algos\n    - CLEANUP: quic: remove a wrong comment about ->app_limited (drs)\n    - BUG/MINOR: quic: fix the wrong tracked recovery start time value\n    - BUG/MINOR: quic: too permissive exit condition for high loss detection in Startup (BBR)\n    - BUG/MINOR: cli: cli_snd_buf: preserve \\r\\n for payload lines\n    - REGTESTS: ssl: add a PEM with mix of LF and CRLF line endings\n    - BUG/MINOR: quic: missing Startup accelerating probing bw states\n    - CLEANUP: quic: Rename some BBR functions in relation with bw probing\n    - REORG: startup: move global.maxconn calculations in limits.c\n    - REORG: startup: move code that applies limits to limits.c\n    - REORG: startup: move nofile limit checks in limits.c\n    - MINOR: ssl: add utils functions to extract X509 notAfter date\n    - MINOR: ssl/cli: allow to filter expired certificates with 'show ssl sni'\n    - MINOR: ssl/cli: add -A to the 'show ssl sni' command description\n    - BUG/MINOR: ssl/cli: 'show ssl cert' escape the first '*' of a filename\n    - BUG/MINOR: ssl/cli: 'show ssl crl-file' escape the first '*' of a filename\n    - BUG/MINOR: ssl/cli: 'show ssl ca-file' escape the first '*' of a filename\n    - BUG/MEDIUM: stconn: Only consider I/O timers to update stream's expiration date\n    - BUG/MEDIUM: queues: Make sure we call process_srv_queue() when leaving\n    - BUG/MEDIUM: queues: Do not use pendconn_grab_from_px().\n    - CLEANUP: queues: Remove pendconn_grab_from_px().\n    - BUILD: debug: only dump/reset glitch counters when really defined\n    - MINOR: compiler: add a __has_builtin() macro to detect features more easily\n    - MINOR: compiler: rely on builtin detection for __builtin_unreachable()\n    - MINOR: compiler: add a new \"ASSUME\" macro to help the compiler\n    - MINOR: compiler: also enable __builtin_assume() for ASSUME()\n    - MINOR: compiler: add ASSUME_NONNULL() to tell the compiler a pointer is valid\n    - MINOR: bug: make BUG_ON() fall back to ASSUME\n    - CLEANUP: cache: use ASSUME_NONNULL() instead of DISGUISE()\n    - CLEANUP: hlua: use ASSUME_NONNULL() instead of ALREADY_CHECKED()\n    - CLEANUP: htx: use ASSUME_NONNULL() to mark the start line as non-null\n    - CLEANUP: mux-fcgi: use ASSUME_NONNULL() to indicate that the first block exists\n    - CLEANUP: stats: use ASSUME_NONNULL() to indicate that the first block exists\n    - CLEANUP: quic: replace ALREADY_CHECKED() with ASSUME_NONNULL() at a few places\n    - CLEANUP: ssl-sock: drop two now unneeded ALREADY_CHECKED()\n    - BUG/MEDIUM: mux-quic: do not mix qcc_io_send() return codes with pacing\n    - CLEANUP: mux-quic: remove unused qcc member send_retry_list\n    - MINOR: quic: add traces\n    - MINOR: mux-quic: refactor wait-for-handshake support\n    - MEDIUM/OPTIM: mux-quic: define a recv_list for demux resumption\n    - MEDIUM/OPTIM: mux-quic: implement purg_list\n    - MINOR: mux-quic: extract code to build STREAM frames list\n    - MINOR: mux-quic: split STREAM and RS/SS emission\n    - MEDIUM/OPTIM: mux-quic: do not rebuild frms list on every send\n    - MEDIUM: mux-quic: remove pacing specific code on qcc_io_cb\n    - MINOR: trace: implement tracing disabling API\n    - MINOR: mux-quic: hide traces when woken up on pacing only\n    - MINOR: ssl/cli: add a 'Uncommitted' status for 'show ssl' commands\n    - MINOR: ssl/ocsp: Add extra details in error logs when possible\n    - BUILD: ssl/ocsp: error: ‘%.*s’ directive argument is null\n    - MEDIUM: ssl/ocsp: OCSP response is expired with OCSP_MAX_RESPONSE_TIME_SKEW\n    - MINOR: ssl: improve HAVE_SSL_OCSP ifdef\n    - DOC: config: add example for server \"track\" keyword\n    - DOC: config: reorder \"tune.lua.*\" keywords by alphabetical order\n    - DOC: config: add \"tune.lua.burst-timeout\" to the list of global parameters\n    - MINOR: hlua: add option to preserve bool type from smp to lua\n    - REGTESTS: fix lua-based regtests using tune.lua.smp-preserve-bool\n    - BUG/MEDIUM: mux-quic: prevent BUG_ON() by refreshing frms on MAX_DATA\n    - CLEANUP: mux-quic: remove dead err label in qcc_build_frms()\n    - BUG/MINOR: h2/rhttp: fix HTTP2 conn counters on reverse\n    - MINOR: hlua: rename \"tune.lua.preserve-smp-bool\" to \"tune.lua.bool-sample-conversion\"\n    - MINOR: ssl: change visibility of ssl_stats_module\n    - MINOR: ssl: rework the error management in the OCSP callback\n    - MEDIUM: ssl/ocsp: counters for OCSP stapling\n    - CI: limit aws-lc and libressl Quic Interop to \"haproxy\" only\n    - BUG/MEDIUM: queue: Make process_srv_queue return the number of streams\n    - CI: github: try to build the latest WolfSSL master weekly\n    - CI: github: activate ASAN on the WolfSSL weekly job\n    - BUG/MINOR: stats: fix segfault caused by uninitialized value in \"show schema json\"\n    - MINOR: stktable: add stktable_get_data_type_idx() helper function\n    - MINOR: stktable: support optional index for array types in {set, clear, show} table commands\n    - CI: scripts: allow to build wolfssl with --enable-debug\n    - CI: github: activate debug in wolfssl weekly build\n    - BUG/MEDIUM: queues: Stricly respect maxconn for outgoing connections\n    - MEDIUM: queue: Handle the race condition between queue and dequeue differently\n    - CLEANUP: Remove pendconn_must_try_again().\n    - BUILD: compat: add missing fcntl.h before defining F_SETPIPE_SZ\n    - BUILD: mworker: always initialize the saveptr of strtok_r()\n    - BUILD: limits: make normalize_rlim() take an rlim_t to fix build on m68k\n    - BUG/MINOR: checks: handle a possible strdup() failure\n    - BUG/MINOR: listener: handle a possible strdup() failure\n    - BUG/MINOR: mux_h1: handle a possible strdup() failure\n    - BUG/MINOR: debug: handle a possible strdup() failure\n\n2024/12/11 : 3.2-dev1\n    - MINOR: pattern: split pat_ref_set()\n    - MINOR: pattern: add pat_ref_gen_set() function\n    - MINOR: pattern: add pat_ref_gen_find_elt() function\n    - MINOR: pattern: add pat_ref_gen_delete() function\n    - MEDIUM: pattern: consider gen_id in pat_ref_set_from_node()\n    - MEDIUM: pattern: always consider gen_id for pat_ref lookup operations\n    - MINOR: version: this is development again (3.2)\n    - DEV: patchbot: prepare for new version 3.2-dev\n    - BUG/MEDIUM: sock: Remove FD_POLL_HUP during connect() if FD_POLL_ERR is not set\n    - MINOR: proxy: Add support of 421-Misdirected-Request in retry-on status\n    - BUG/MINOR: log: fix lf_text() behavior with empty string\n    - MINOR: log: always consider \"+M\" option in lf_text_len()\n    - BUG/MINOR: improve BBR throughput on very fast links\n    - MINOR: event_hdl: add PAT_REF events\n    - MINOR: pattern: publish event_hdl events on pat_ref updates\n    - MINOR: hlua: add patref class\n    - MINOR: hlua: add core.get_patref method\n    - MINOR: hlua_fcn: implement index and pair metamethods for patref class\n    - MINOR: hlua_fcn: wrap pat_ref struct for patref class\n    - MINOR: pattern: add pat_ref_may_commit() helper function\n    - MINOR: hlua_fcn: add Patref:commit() method\n    - MINOR: hlua_fcn: add Patref:prepare() method\n    - MINOR: hlua_fcn: add Patref:purge() method\n    - MINOR: hlua_fcn: add Patref:giveup()\n    - MINOR: hlua_fcn: add Patref:add()\n    - MINOR: hlua_fcn: add Patref:del()\n    - MINOR: hlua_fcn: add Patref:set()\n    - MINOR: hlua_fcn: add Patref:add_bulk()\n    - MINOR: hlua_fcn: add Patref:event_sub()\n    - DOC: lua: prefer Patref:{set,add}() over legacy methods for acl and maps\n    - BUG/MINOR: hlua_fcn: fix Patref:set() force parameter\n    - BUG/MEDIUM: event_hdl: fix uninitialized value in async mode when no data is provided\n    - BUG/MEDIUM: quic: prevent stream freeze on pacing\n    - BUG/MEDIUM: http-ana: Reset request flag about data sent to perform a L7 retry\n    - BUG/MINOR: h1-htx: Use default reason if not set when formatting the response\n    - BUILD: quic: fix a build error about an non initialized timestamp\n    - CI: github: allow coredumps on aws-lc and wolfssl jobs\n    - BUG/MINOR: listener: fix potential null pointer dereference in listener_release()\n    - MINOR: hlua: fix ambiguous hlua usage in hlua_filter_delete()\n    - BUG/MINOR: signal: register default handler for SIGINT in signal_init()\n    - BUG/MINOR: startup: close pidfd and free global.pidfile in handle_pidfile()\n    - BUG/MINOR: startup: fix pidfile creation\n    - MINOR: tools: add a new macro DEFVAL() to provide a default argument\n    - MINOR: tasklet: set TASK_WOKEN_OTHER on tasklets by default\n    - BUG/MINOR: quic: fix bbr_inflight() calls with wrong gain value\n    - BUG/MEDIUM: init: make sure only daemonized processes change their session\n    - BUG/MINOR: init: do not call fork_poller() for non-forked processes\n    - BUG/MEDIUM: mux-quic: remove pacing status when everything is sent\n    - BUG/MINOR: quic: remove startup alert if conn socket-owner unsupported\n    - BUG/MINOR: quic: remove startup alert if GSO unsupported\n    - MINOR: stktable: implement \"recv-only\" table option\n    - CLEANUP: stktable: replace nopurge attribute with flag\n    - CLEANUP: stktable: add some stktable flags polishing\n    - BUG/MEDIUM: mux-h2: make sure not to touch dummy streams when sending WU\n    - MINOR: mux-quic: clean up zero-copy done_ff callback\n    - BUG/MINOR: config: Fix parsing of accept-invalid-http-{request,response}\n    - BUG/MINOR: mworker: don't save program PIDs in oldpids\n    - BUG/MINOR: mworker: fix -D -W -sf/-st modes\n    - BUG/MINOR: startup: fix error path for master, if can't open pidfile\n    - CLEANUP: startup: make if condition to kill old pids more readable\n    - DOC: config: fix confusing init-state examples\n    - MINOR: mux-h1: use explicit __objt_server on idle conn reinsert\n    - MINOR: mux-h2: use explicit __objt_server on idle conn reinsert\n    - MINOR: mux-spop: use explicit __objt_server on idle conn reinsert\n    - MINOR: mux-fcgi: use explicit __objt_server on idle conn reinsert\n    - MINOR: quic: convert startup check in a freestanding function\n    - MINOR: quic: split startup check function\n    - MINOR: quic: implement build options report\n    - BUG/MINOR: debug: COUNT_IF() should return true/false\n    - MINOR: mux-h2/traces: add a missing trace on negative initial window size\n    - CLEANUP: mux-h2/traces: reword certain ambiguous traces\n    - MINOR: mux-h2/glitches: add a description to the H2 glitches\n    - BUG/MINOR: mux-h2: fix expression when detecting excess of CONTINUATION frames\n    - BUILD: debug: fix build issues in COUNT_IF() with -Wunused-value\n    - MINOR: tools: make fddebug() automatically emit the location\n    - MINOR: ssl: add notBefore and notAfter utility functions\n    - MEDIUM: ssl/cli: \"show ssl sni\" list the loaded SNI in frontends\n    - BUG/MEDIUM: startup: don't daemonize if started with -c\n    - BUG/MEDIUM: startup: report status if daemonized process fails\n    - BUG/MEDIUM: mworker: report status, if daemonized master fails\n    - BUG/MINOR: mworker: detach from tty when received READY from worker\n    - BUG/MINOR: namespace: handle a possible strdup() failure\n    - BUG/MINOR: ssl_crtlist: handle a possible strdup() failure\n    - BUG/MINOR: resolvers: handle a possible strdup() failure\n    - CI: use \"/tmp\" as default value for TMPDIR when searching logs\n    - DOC: management: fix typos and paragraph ordering in 'show ssl sni'\n    - CLEANUP: ssl: fix comment in 'show ssl sni'\n    - MINOR: ssl/cli: add negative filters to \"show ssl sni\"\n    - BUG/MINOR: stats: decrement srv refcount on stats-file release\n    - MINOR: list: define a watcher type\n    - BUG/MEDIUM: stats/server: use watcher to track server during stats dump\n    - MINOR: server: remove prev_deleted server list\n    - BUG/MINOR: http-fetch: Ignore empty argument string for query()\n    - BUG/MINOR: server-state: Fix expiration date of srvrq_check tasks\n    - BUG/MINOR: hlua_fcn: restore server pairs iterator pointer consistency\n\n2024/11/26 : 3.2-dev0\n    - exact copy of 3.1.0\n\n2024/11/26 : 3.1.0\n    - BUG/MAJOR: mux-h1: Properly handle wrapping on obuf when dumping the first-line\n    - BUILD: activity/memprofile: fix a build warning in the posix_memalign handler\n    - BUG/MINOR: quic: Avoid BUG_ON() on ->on_pkt_lost() BBR callback call\n    - CI: update to the latest AWS-LC version\n    - CI: update to the latest WolfSSL version\n    - DOC: ot: mention planned deprecation of the OT filter\n    - Revert \"CI: update to the latest WolfSSL version\"\n    - CI: github: add a WolfSSL job which tries the latest version\n    - BUILD: systemd: fix usage of reserved name \"sun\" in the address field\n    - BUILD: init: use the more portable FD_CLOEXEC for /dev/null\n    - CI: github: improve the Wolfssl job\n    - CI: github: improve the AWS-LC job\n    - BUG/MINOR: mux-quic: fix show quic report of QCS prepared bytes\n    - BUG/MEDIUM: quic: fix sending performance due to qc_prep_pkts() return\n    - MINOR: mux-quic: use sched call time for pacing\n    - CI: github: allow to run the Illumos job manually\n    - BUILD: tcp_sample: var_fc_counter defined but not used\n    - CI: github: add 'workflow_dispatch' on remaining build jobs\n    - DOC: config: refine a little bit the text on QUIC pacing\n    - MINOR: proto_sockpair: send_fd_uxst: init iobuf, cmsghdr, cmsgbuf to zeros\n    - MINOR: startup: rename on_new_child_failure to mworker_on_new_child_failure\n    - REORG: startup: move on_new_child_failure in mworker.c\n    - MINOR: startup: prefix prepare_master and run_master with mworker_*\n    - REORG: startup: move mworker_prepare_master in mworker.c\n    - MINOR: startup: keep updating verbosity modes only in haproxy.c\n    - REORG: startup: move mworker_run_master and mworker_loop in mworker.c\n    - REORG: startup: move mworker_reexec and mworker_reload in mworker.c\n    - MINOR: startup: prefix apply_master_worker_mode with mworker_*\n    - REORG: startup: move mworker_apply_master_worker_mode in mworker.c\n    - MINOR: cfgparse-quic: strengthen quic-cc-algo parsing\n    - BUG/MAJOR: quic: fix wrong packet building due to already acked frames\n    - DEV: lags/show-sess-to-flags: Properly handle fd state on server side\n    - BUG/MEDIUM: http-ana: Don't release too early the L7 buffer\n    - MINOR: quic: make bbr consider the max window size setting\n    - DOC: quic: Amend the pacing information about BBR.\n    - BUG/MEDIUM: quic: prevent EMSGSIZE with GSO for larger bufsize\n    - MINOR: cli: Add a \"help\" keyword to show sess\n    - MINOR: cli/quic: Add a \"help\" keyword to show quic\n    - DOC: management: mention \"show sess help\" and \"show quic help\"\n    - DOC: install: update the list of supported versions\n    - MINOR: version: mention that 3.1 is stable now\n\n2024/11/21 : 3.1-dev14\n    - MINOR: acl: export find_acl_default()\n    - MINOR: sample: extend the \"when\" converter to support an ACL\n    - MINOR: cfgparse: parse tune.{rcvbuf,sndbuf}.{client,server} as sizes\n    - MINOR: cfgparse: parse tune.{rcvbuf,sndbuf}.{frontend,backend} as sizes\n    - MINOR: cfgparse: parse tune.pipesize as a size\n    - MINOR: cfgparse: parse tune.recv_enough as a size\n    - MINOR: cfgparse: parse tune.bufsize as a size\n    - MINOR: cfgparse: parse tune.bufsize.small as a size\n    - REGTESTS: silence the \"log format ignored\" warnings\n    - REGTESTS: silence warning \"previous 'http-response' action is final\"\n    - REGTESTS: make the unit explicit for very short timeouts\n    - REGTESTS: silence warnings about content-type being ignored\n    - REGTESTS: remove a duplicate \"option httpslog\" in the defaults section\n    - REGTESTS: silence warning \"L6 sample fetches ignored\" in cond_set_var\n    - REGTESTS: add missing timeouts to 30 tests\n    - REGTESTS: only use tune.ssl.default-dh-param when not using AWS-LC\n    - REGTESTS: enable -dW on almost all tests to fail on warnings\n    - MEDIUM: config: warn on unitless timeouts < 100 ms\n    - MINOR: tools: make parse_size_err() support 32/64 bits\n    - MINOR: ring: support unit suffixes in the size\n    - MINOR: cfgparse-global: parse options to allow non std keywords in discovery mode\n    - BUG/MINOR: mworker-prog: don't warn about deprecated section with expose-deprecated-directives\n    - MINOR: cli: make \"show env\" accessible via master CLI without enabling debug\n    - MINOR: config: show HAPROXY_BRANCH in \"show env\" output\n    - MINOR: http-ana: Add option to keep query-string on a localtion-based redirect\n    - MINOR: http-ana: Add support for \"set-cookie-fmt\" option to redirect rules\n    - MINOR: agent-check: Be able to set absolute weight via an agent\n    - MINOR: stream: Add an option to \"show sess\" command to dump the captured URI\n    - DOC: config: A a space before ':' for {bs,fs}.aborted and {bs,fs}.rst_code\n    - DOC: config: Fix a typo in \"1.3.1. The Request line\"\n    - MINOR: http: Add support for HTTP 414/431 status codes\n    - DEV: phash: Update 414 and 431 status codes to phash\n    - MINIR: mux-h1: Return 414 or 431 when appropriate\n    - BUG/MINOR: http_ana: Report -1 for %Tr for invalid response only\n    - DOC: config: Slightly improve the %Tr documentation\n    - DOC: config: Move wait_end in section about internal samples\n    - DOC: config: Move fs.* and bs.* in section about L5 samples\n    - MINOR: stats-file: add the filename in the warning\n    - MEDIUM: stats-file: explicitely ignore comments starting by //\n    - DOC: quic: rename max-window-size as with default prefix\n    - MINOR: mux-quic: add missing values for show flags\n    - MINOR: quic: simplify qc_prep_pkts() exit path\n    - MINOR: quic: support a max number of built packet per send iteration\n    - MINOR: quic: extend qc_send_mux() return type with a dedicated enum\n    - MINOR: quic: define quic_pacing module\n    - MINOR: quic/pacing: implement quic_pacer engine\n    - MINOR: quic/pacing: support pacing emission on quic_conn layer\n    - MINOR: quic/pacing: add burst support\n    - MINOR: mux-quic: define a tx STREAM frame list member\n    - MINOR: mux-quic: encapsulate QCC tasklet wakeup\n    - MAJOR: mux-quic: support pacing emission\n    - MINOR: quic: use dynamic cc_algo on bind_conf\n    - MINOR: quic: extend quic-cc-algo optional parameters\n    - MEDIUM: quic: define cubic-pacing congestion algorithm\n    - MINOR: mux_quic/pacing: display pacing info on show quic\n    - MEDIUM: stats-file: silently ignore be/fe mistmatch\n    - REGTESTS: use -dW by default on every reg-tests\n    - DOC: lua: fix yield-dependent methods expected contexts\n    - DOC: sched: add missing scheduler API documentation for tasklet_wakeup_after()\n    - DOC: sched: document the missing TASK_F_UEVT* flags\n    - CLEANUP: tinfo: move sched_*_date/*_mono_time to the thread-local area\n    - MINOR: stream: don't update s->lat_time when the wakeup date is not set\n    - MINOR: tinfo/clock: turn sched_call_date to 64-bits\n    - MINOR: sched: add TASK_F_WANTS_TIME to make the scheduler update the call date\n    - MINOR: tools: add new macro DEFZERO to provide a default zero argument\n    - MINOR: tasklet: make the low-level tasklet API take a flag\n    - MINOR: tasklet: support an optional set of wakeup flags to tasklet_wakeup_on()\n    - DOC: configuration: explain the rules regarding spaces in arguments\n    - DOC: configuration: explain quotes and spaces in conditional blocks\n    - DOC: configuration: wrap long line for \"strstr()\" conditional expression\n    - BUG/MINOR: http-ana: Adjust the server status before the L7 retries\n    - MINOR: http-fetch: Add an option to 'query\" to get the QS with the '?'\n    - BUG/MINOR: cfgparse-quic: fix renaming of max-window-size\n    - MEDIUM: mworker: remove USE_SYSTEMD requirement for -Ws\n    - CI: vtest: temporarily build from the sd-notify PR\n    - MINOR: systemd: replace SOCK_CLOEXEC by fcntl call to FD_CLOEXEC\n    - BUILD: makefile: make ERR apply to build options as well\n    - MINOR: startup: set HAPROXY_LOCALPEER only once\n    - DOC: configuration: update \"Environment variables\" chapter\n    - DOC: config: indent the list of environment variables\n    - OPTION: map/hlua: make core.set_map() lookup more efficient\n    - REGTESTS: switch to -Ws for master-worker reg-tests\n    - REGTESTS: disable temporarly mworker test on OSX\n    - MINOR: quic: Add the congestion window initial value to QUIC path\n    - MINOR: window_filter: Implement windowed filter (only max)\n    - MINOR: quic: implement delivery rate sampling algorithm\n    - MINOR: quic: implement BBR congestion control algorithm for QUIC\n    - MINOR: quic: quic_cc modifications to support BBR\n    - MINOR: quic: quic_loss modifications to support BBR\n    - MINOR: quic: RX part modifications to support BBR\n    - MINOR: quic: TX part modifications to support BBR.\n    - MINOR: quic: add \"bbr\" new \"quic-cc-algo\" option\n    - BUG/MEDIUM: mux-h2: Increase max number of headers when encoding HEADERS frames\n    - BUG/MEDIUM: mux-h2: Check the number of headers in HEADERS frame after decoding\n    - BUG/MEDIUM: h3: Properly limit the number of headers received\n    - BUG/MEDIUM: h3: Increase max number of headers when sending headers\n    - DOC: config: Improve documentation of tune.http.maxhdr directive\n    - DOC: management: Clearly state \"show errors\" only reports malformed H1 messages\n    - BUILD: makefile: build flags.c before haproxy to speed up the build\n    - BUILD: makefile: reorder object files by build time\n    - MINOR: config: Improve warnings on misplaced rules by adding an optional arg\n    - CLEANUP: cfgparse: Add direction in functions name that warn on misplaced rules\n    - MINOR: cfgparse: Emit a warning for misplaced \"tcp-response content\" rules\n    - BUG/MINOR: cfgparse-quic: fix bbr initialization\n    - MINOR: cfgparse-quic: activate pacing only via burst argument\n    - MINOR: quic: Useless rate sample member initialization\n    - BUG/MINOR: cfgparse-quic: fix warning for cc-aglo with 0 burst\n    - MINOR: quic: support pacing for newreno and nocc\n    - BUG/MINOR: quic: Missing application limitations tracking for BBR\n    - MINOR: cfgparse-global: add cfg_parse_global_chroot\n    - MINOR: cfgparse-global: add more checks for \"chroot\" argument\n    - BUG/MINOR: startup: fix UAF when set the default for log_tag\n    - MINOR: capabilities: rename program_name argument to progname\n    - MINOR: startup: use global progname variable\n    - MINOR: cfgparse-global: add cfg_parse_global_localpeer\n    - BUG/MINOR: config: allow to check HAPROXY_LOCALPEER in config\n    - BUG/MINOR: startup: init_early: remove obsolete comment\n    - BUG/MEDIUM: debug: don't set the STUCK flag from debug_handler()\n    - BUG/MEDIUM: wdt: fix the stuck detection for warnings\n    - BUG/MINOR: activity/memprofile: reinitialize the free calls on DSO summary\n    - MINOR: activity/memprofile: offer a function to unregister stale info\n    - BUG/MEDIUM: pools/memprofile: always clean stale pool info on pool_destroy()\n    - MINOR: activity: better report nil than ffff in unknown callers\n    - CLEANUP: activity: better use a mask to tests freeing methods\n    - MINOR: activity/memprofile: also monitor strdup() activity\n    - MINOR: activity/memprofile: monitor non-portable calls as well\n    - MINOR: activity: interrupt the show profile dump more often\n    - MINOR: tools: resolve main() only once in resolve_sym_name()\n    - MINOR: tools: add a new function \"resolve_dso_name\" to find a symbol's DSO\n    - MINOR: activity/memprofile: use resolve_dso_name() for the DSO summary\n    - REGTESTS: relax strerror matching to avoid a failure on libmusl\n    - REGTESTS: don't rely on the base64 utility when openssl base64 is already used\n\n2024/11/15 : 3.1-dev13\n    - MEDIUM: mworker: depreciate the 'program' section\n    - BUILD: ot: use a cebtree instead of a list for variable names\n    - MINOR: startup: replace HAPROXY_LOAD_SUCCESS with global load_status\n    - BUG/MINOR: startup: set HAPROXY_CFGFILES in read_cfg\n    - BUG/MINOR: cli: don't show sockpairs in HAPROXY_CLI and HAPROXY_MASTER_CLI\n    - BUG/MEDIUM: stconn: Don't forward shut for SC in connecting state\n    - BUG/MEDIUM: resolvers: Insert a non-executed resulution in front of the wait list\n    - MINOR: debug: explicitly permit the counter condition to be empty\n    - MINOR: debug: add a new counter type for glitches\n    - MINOR: mux-h2: count glitches when they're reported\n    - BUG/MINOR: deinit: release uri_auth admin rules\n    - MINOR: uri_auth: add stats_uri_auth_free helper\n    - MEDIUM: uri_auth: implement clean uri_auth cleaning\n    - MINOR: mux-quic/h3: count glitches when they're reported\n    - BUG/MEDIUM: mux-h2: Don't send RST_STREAM frame for streams with no ID\n    - BUG/MINOR: Don't report early srv aborts on request forwarding in DONE state\n    - MINOR: promex: Expose the global node and description in process metrics\n    - MINOR: promex: Add global and proxies description as labels to all metrics\n    - OPTIM: pattern: only apply LRU cache for large enough lists\n    - BUG/MEDIUM: checks: make sure to always apply offsets to now_ms in expiration\n    - BUG/MINOR: debug: do not set task expiration to TICK_ETERNITY\n    - BUG/MEDIUM: mailers: make sure to always apply offsets to now_ms in expiration\n    - BUG/MINOR: mux_quic: make sure to always apply offsets to now_ms in expiration\n    - BUG/MINOR: peers: make sure to always apply offsets to now_ms in expiration\n    - BUG/MEDIUM: clock: make sure now_ms cannot be TICK_ETERNITY\n    - MINOR: debug/cli: replace \"debug dev counters\" with \"debug counters\"\n    - DOC: config: add tune.h2.{be,fe}.rxbuf to the global keywords index\n    - MINOR: chunk: add a BUG_ON upon the next init_trash_buffer()\n\n2024/11/08 : 3.1-dev12\n    - MINOR: startup: tune.renice.{startup,runtime} allow to change priorities\n    - BUG/MEDIUM: promex: Fix dump of extra counters\n    - BUILD: import/mt_list: support building with TCC\n    - BUILD: compiler: define __builtin_prefetch() for tcc\n    - CLEANUP: quic: Remove the useless directive \"tune.quic.backend.max-idle-timeou\"\n    - DOC: config: document connection error 44 (reverse connect failure)\n    - CLEANUP: connection: properly name the CO_ER_SSL_FATAL enum entry\n    - DEBUG: cli: support closing \"hard\" using close() in addition to fd_delete()\n    - MINOR: connection: add more connection error codes to cover common errno\n    - MINOR: rawsock: set connection error codes when returning from recv/send/splice\n    - MINOR: connection: add new sample fetch functions fc_err_name and bc_err_name\n    - MINOR: quic: Help diagnosing malformed probing packets\n    - BUG/MINOR: quic: fix malformed probing packet building\n    - MINOR: listener: Remove useless checks on the receiver protocol existence\n    - MINOR: http-conv: Remove unreachable goto statement in sample_conv_q_preferred\n    - MINOR: http: don't %-encode the payload when not relevant\n    - MINOR: quic: simplify qc_parse_pkt_frms() return path\n    - MINOR: quic: use dynamically allocated frame on parsing\n    - MINOR: quic: extend return value of CRYPTO parsing\n    - BUG/MINOR: quic: repeat packet parsing to deal with fragmented CRYPTO\n    - BUG/MINOR: mworker: do 'program' postparser checks in read_cfg_in_discovery_mode\n    - EXAMPLES: add \"traces.cfg\" with traces examples\n    - BUG/MEDIUM: quic: do not consider ACK on released stream as error\n    - CLEANUP: stats: fix misleading comment on top of stat_idx_info\n    - MINOR: wdt: move the local timers to a struct\n    - MINOR: debug: add a function to dump a stuck thread\n    - DEBUG: wdt: better detect apparently locked up threads and warn about them\n    - DEBUG: cli: make it possible for \"debug dev loop\" to trigger warnings\n    - DEBUG: wdt: make the blocked traffic warning delay configurable\n    - DEBUG: wdt: add a stats counter \"BlockedTrafficWarnings\" in show info\n    - DEBUG: wdt: set the default blocked task delay to 100 ms\n    - MINOR: debug: move the \"recover now\" warn message after the optional notes\n    - MINOR: event_hdl: add event_hdl_sub_list_empty() helper func\n    - MINOR: pattern: add _pat_ref_new() helper func\n    - OPTIM: pattern: use malloc() to initialize new pat_ref struct\n    - MINOR: pattern: add pat_ref_free() helper func\n    - CLEANUP: guid: remove global tree export\n    - BUG/MINOR: guid/server: ensure thread-safety on GUID insert/delete\n    - DOC: management: explain the change of behavior of the program section\n    - BUG/MEDIUM: mux-h2: try to wait for the peer to read the GOAWAY\n    - BUG/MEDIUM: quic: prevent crash due to CRYPTO parsing error\n\n2024/11/01 : 3.1-dev11\n    - BUG/MINOR: httpclient: return NULL when no proxy available during httpclient_new()\n    - BUG/MEDIUM: mworker/httpclient: initialization skipped by accident in mworker mode\n    - BUG/MINOR: resolvers/mworker: missing default resolvers in mworker mode\n    - MINOR: mworker/ocsp: skip ocsp-update proxy init in master\n    - BUG/MEDIUM: stconn: Wait iobuf is empty to shut SE down during a check send\n    - MINOR: mux-h1: Show the SD iobuf in trace messages on stream send events\n    - MINOR: mux-h1: Add a trace on shutdown when keep-alive is not possible\n    - BUG/MINOR: http-ana: Don't report a server abort if response payload is invalid\n    - BUG/MEDIUM: stconn: Check FF data of SC to perform a shutdown in sc_notify()\n    - BUG/MAJOR: filters/htx: Add a flag to state the payload is altered by a filter\n    - REGTESTS: Never reuse server connection in http-messaging/truncated.vtc\n    - BUG/MINOR: quic: avoid leaking post handshake frames\n    - MINOR: quic: send new tokens (NEW_TOKEN) even for 1RTT sessions\n    - BUG/MEDIUM: quic: avoid freezing 0RTT connections\n    - DOC: config: fix rfc7239 forwarded typo in desc\n    - MINOR: http_ext: implement rfc7239_{nn,np} converters\n    - CLEANUP: http_ext: remove useless BUG_ON() in http_handle_xot_header()\n    - BUG/MINOR: sample: free err2 in smp_resolve_args for type ARGT_REG\n    - MINOR: arg: add an argument type for identifier\n    - BUILD: buffers: keep b_getblk_nc() and b_peek_varint() in buf.h\n    - CLEANUP: buffers: simplify b_get_varint()\n    - OPTIM: buffers: avoid a useless wrapping check for ofs == 0\n    - MINOR: debug: make mark_tainted() return the previous value\n    - MINOR: chunk: drop the global thread_dump_buffer\n    - MINOR: debug: split ha_thread_dump() in two parts\n    - MINOR: debug: slightly change the thread_dump_pointer signification\n    - MINOR: debug: make ha_thread_dump_done() take the pointer to be used\n    - MINOR: debug: replace ha_thread_dump() with its two components\n    - MEDIUM: debug: on panic, make the target thread automatically allocate its buf\n    - BUILD: mux-h2/traces: fix build on 32-bit due to size of the DATA frame\n    - CI: prepare Coverity build for Ubuntu 24\n    - CI: bump development builds explicitely to Ubuntu 24.04\n    - CI: modernize macos builds to macos-15\n    - BUG/MINOR: mworker: fix mworker-max-reloads parser\n    - MINOR: mux-quic: simplify sending of empty STREAM FIN\n    - BUG/MINOR: mux-quic: do not close STREAM with empty FIN if no data sent\n    - CLEANUP: debug: make the BUG_ON() macros check the condition in the outer one\n    - MEDIUM: debug: add match counters for BUG_ON/WARN_ON/CHECK_IF\n    - MINOR: debug: add a new debug macro COUNT_IF()\n    - MINOR: debug: add \"debug dev counters\" to list code counters\n    - BUG/MEDIUM: stats-html: Never dump more data than expected during 0-copy FF\n    - BUG/MEDIUM: mux-h2: Remove H2S from send list if data are sent via 0-copy FF\n    - BUG/MINOR: stconn: Pretend the SE have more data to deliver on abortonclose\n    - CLEANUP: stream: remove outdated comments\n    - DEBUG: stream: Add debug counters to track some client/server aborts\n    - DEBUG: mux-h1: Add debug counters to track some errors\n    - MINOR: mux-h1: Add support of the debug string for logs\n    - MINOR: stream: maintain per-stream counters of the number of passes on code\n    - MINOR: filters: add per-filter call counters\n    - MINOR: sample: add the \"when\" converter to condition some expressions\n    - BUG/MEDIUM: connection/http-reuse: fix address collision on unhandled address families\n    - BUILD: spoe: fix build warning on older gcc around sub-struct initialization\n    - Revert \"OPTIM: mux-h2: make h2_send() report more accurate wake up conditions\"\n    - DEBUG: mux-h1: Add debug counters to track errors with in/out pending data\n    - BUG/MINOR: mux-h1: Fix conditions on pipe in some COUNT_IF()\n    - MINOR: activity/memprofile: show per-DSO stats\n    - BUG/MINOR: mworker/cli: show master startup logs in recovery mode\n    - MINOR: mworker: stop MASTER proxy listener on worker mcli sockpair\n    - MINOR: error: simplify startup_logs_init_shm\n    - BUG/MINOR: mworker: show worker warnings in startup logs\n    - CLEANUP: mworker: clean mworker_reexec\n    - MINOR: mworker/cli: split mworker_cli_proxy_create\n    - BUG/MINOR: server: fix dynamic server leak with check on failed init\n    - BUG/MEDIUM: server: fix race on servers_list during server deletion\n    - BUG/MEDIUM: stconn: Report blocked send if sends are blocked by an error\n    - BUG/MINOR: http-ana: Fix wrong client abort reports during responses forwarding\n    - BUG/MINOR: stconn: Don't disable 0-copy FF if EOS was reported on consumer side\n    - MINOR: mworker/cli: add 'debug' to 'show proc'\n    - MINOR: mworker/cli: remove comment line for program when useless\n    - MINOR: mworker/cli: 'show proc debug' for old workers\n    - BUILD: debug: silence a build warning with threads disabled\n    - CLEANUP: mux-h2: remove the unused \"full\" variable in h2_frt_transfer_data()\n    - MINOR: pools: export the pools variable\n    - MINOR: debug: place a magic pattern at the beginning of post_mortem\n    - MINOR: debug: place the post_mortem struct in its own section.\n    - MINOR: debug: store important pointers in post_mortem\n    - MINOR: debug: do not limit backtraces to stuck threads\n    - MINOR: cli: remove non-printable characters from 'debug dev fd'\n    - MINOR: cli: add an 'echo' command\n    - MINOR: debug: also add a pointer to struct global to post_mortem\n    - CLEANUP: mworker: make mworker_create_master_cli more readable\n    - BUG/MEIDUM: mworker: fix fd leak from master to worker\n    - BUG/MINOR: mworker/cli: fix mworker_cli_global_proxy_new_listener\n    - MINOR: tools: add strnlen2() helper\n    - CLEANUP: log: use strnlen2() in _lf_text_len() to compute string length\n    - DOC: design: add notes about more detailed error reporting for logs\n    - MINOR: debug: also add fdtab and acitvity to struct post_mortem\n    - MINOR: debug: remove the redundant process.thread_info array from post_mortem\n    - DEV: gdb: add a number of gdb scripts to navigate in core dumps\n    - BUG/MINOR: trace: stop rewriting argv with -dt\n    - MEDIUM: protocol: make abns a custom unix socket address family\n    - MEDIUM: protocol: rely on AF_CUST_ABNS family to recognize ABNS sockets\n    - CLEANUP: tools: rely on address family to detect ABNS sockets\n    - MINOR: protocol: create abnsz socket address family\n    - MINOR: sock: restore effective UNIX family in sock_get_old_sockets()\n    - MEDIUM: sock: also restore effective unix family in get_{src,dst}()\n    - MEDIUM: sock_unix: use per-family addrcmp function\n    - MEDIUM: socket: add zero-terminated ABNS alternative\n    - BUG/MINOR: ssl/cli: 'set ssl cert' does not check the transaction name correctly\n    - BUG/MINOR: mworker: mworker_reexec: unset MODE_STARTING before free startup logs ring\n    - BUG/MINOR: errors: startup_logs_free: set global startup_logs ptr to NULL\n    - BUG/MINOR: errors: print_message: don't allocate startup logs ring\n    - BUG/MINOR: startup: don't fork worker if started with -c -W\n    - BUG/MINOR: startup: dump libs only in worker if started with -W -dL\n    - BUG/MINOR: startup: dump keywords only in worker if started with -W -dKAll\n    - BUG/MINOR: startup: don't dump polling info for master in verbose mode\n    - CI: switch QUIC Interop on AWS-LC to common docker image\n    - CI: switch QUIC Interop on LibreSSL to common docker image\n    - CI: enable chacha20 test on LibreSSL QUIC Interop\n    - DOC: config: add missing glitch_{cnt,rate} data types\n    - DOC: config: add missing glitch_{cnt,rate} sample definitions\n    - CI: LibreSSL QUIC Interop: fix docker context\n    - DEBUG: mux-h1: Add H1C expiration dates in trace messages\n    - BUG/MEDIUM: mux-h1: Fix how timeouts are applied on H1 connections\n    - BUG/MINOR: http-ana: Report internal error if an action yields on a final eval\n    - MINOR: stream: Save last evaluated rule on invalid yield\n    - MINOR: quic: complete trace in qc_may_build_pkt()\n    - MINOR: quic: move qc_send_mux() prototype into quic_tx.h\n    - MINOR: stream: Replace last_rule_file/line fields by a more generic field\n    - MINOR: stream: Save the last filter evaluated interrupting the processing\n    - MINOR: stream: Save the entity waiting to continue its processing\n    - MINOR: stream: Use an enum to identify last and waiting entities for streams\n    - MINOR: stream: Add http-buffer-request option in the waiting entities\n    - DOC: config: Add documentation about last_entity sample fetch\n    - DOC: config: Add documentation about waiting_entity sample fetch\n\n2024/10/16 : 3.1-dev10\n    - BUG/MAJOR: mux-quic: do not crash on empty STREAM frame emission\n    - BUG/MINOR: stats: Fix the name for the total number of streams created\n    - MINOR: quic: strengthen qc_release_frm()\n    - MEDIUM: quic: decount acknowledged data for MUX txbuf window\n    - MINOR: quic: implement dedicated type for out-of-order stream ACK\n    - MEDIUM: quic: merge contiguous/overlapping buffered ack stream range\n    - MEDIUM: quic: decount out-of-order ACK data range for MUX txbuf window\n    - MINOR: log: add do_log() logging helper\n    - MINOR: log: add do_log_parse_act() helper func\n    - MINOR: action: add do-log action\n    - REGTESTS: add some tests for 'do-log' action\n    - BUG/MEDIUM: hlua: make hlua_ctx_renew() safe\n    - BUG/MEDIUM: hlua: properly handle sample func errors in hlua_run_sample_{fetch,conv}()\n    - BUG/MINOR: quic: fix discarding of already stored out-of-order ACK\n    - BUG/MEDIUM: quic: properly decount out-of-order ACK on stream release\n    - MINOR: ssl: disable server side default CRL check with WolfSSL\n    - MEDIUM: sink: implement sink_find_early()\n    - MINOR: trace: postresolve sink names\n    - MINOR: sample: postresolve sink names in debug() converter\n    - BUG/MEDIUM: mux-quic: ensure timeout server is active for short requests\n    - MINOR: cfgparse: simulate long configuration parsing with force-cfg-parser-pause\n    - BUILD: cache: silence an uninitialized warning at -Og with gcc-12.2\n    - BUG/MINOR: mux-h2/traces: present the correct buffer for trailers errors traces\n    - MINOR: mux-h2/traces: print the size of the DATA frames\n    - CLEANUP: muxes: remove useless inclusion of ebmbtree.h\n    - REORG: buffers: move some of the heavy functions from buf.h to buf.c\n    - MINOR: buffer: add a buffer list type with functions\n    - MINOR: mux-h2: split the amount of rx data from the amount to ack\n    - MINOR: mux-h2: create and initialize an rx offset per stream\n    - MEDIUM: mux-h2: start to update stream when sending WU\n    - MEDIUM: mux-h2: start to introduce the window size in the offset calculation\n    - MINOR: mux-h2: count within a connection, how many streams are receiving data\n    - MINOR: mux-h2: allocate the array of shared rx bufs in the h2c\n    - MINOR: mux-h2: add rxbuf head/tail/count management for h2s\n    - MINOR: mux-h2: move H2_CF_WAIT_IN_LIST flag away from the demux flags\n    - MINOR: mux-h2: simplify the exit code in h2_rcv_buf()\n    - MINOR: mux-h2: simplify the wake up code in h2_rcv_buf()\n    - MINOR: mux-h2: clear up H2_CF_DEM_DFULL and H2_CF_DEM_SHORT_READ ambiguity\n    - MAJOR: mux-h2: make streams use the connection's buffers\n    - MAJOR: mux-h2: permit a stream to allocate as many buffers as desired\n    - MAJOR: mux-h2: make the rxbuf allocation algorithm a bit smarter\n    - MINOR: mux-h2: add tune.h2.be.rxbuf and tune.h2.fe.rxbuf global settings\n    - MEDIUM: mux-h2: change the default initial window to 16kB\n    - DOC: design-thoughts: add diagrams illustrating an rx win groth\n    - MEDIUM: mux-h2: rework h2_restart_reading() to differentiate recv and demux\n    - OPTIM: mux-h2: make h2_send() report more accurate wake up conditions\n    - OPTIM: mux-h2: try to continue reading after demuxing when useful\n    - OPTIM: mux-h2: use tasklet_wakeup_after() in h2s_notify_recv()\n    - MINOR: mux-h2/traces: add missing flags and proxy ID in traces\n    - MINOR: mux-h2/traces: add buffer-related info to h2s and h2c\n    - CI: cirrus-ci: bump FreeBSD image to 14-1\n    - REGTESTS: fix a reload race in abns_socket.vtc\n    - MINOR: activity/memprofile: always return \"other\" bin on NULL return address\n    - MINOR: quic: notify connection layer on handshake completion\n    - BUG/MINOR: stream: unblock stream on wait-for-handshake completion\n    - BUG/MEDIUM: quic: support wait-for-handshake\n    - BUG/MEDIUM: server: server stuck in maintenance after FQDN change\n    - BUG/MEDIUM: queue: make sure never to queue when there's no more served conns\n    - DEBUG: mux-h2/flags: add H2_CF_DEM_RXBUF & H2_SF_EXPECT_RXDATA for the decoder\n    - REGTESTS: cli: add delay 0.1 before connect to cli\n    - MINOR: startup: add O_CLOEXEC flag to open /dev/null\n    - MEDIUM: startup: move daemonization fork in init\n    - MINOR: startup: refactor \"daemonization\" fork\n    - MEDIUM: startup: move PID handling in init()\n    - MAJOR: mworker: move master-worker fork in init()\n    - BUG/MINOR: mworker: fix memory leak due to master-worker fork\n    - REORG: mworker: set nbthread=1 for master after fork\n    - MINOR: init: check MODE_MWORKER before creating master CLI\n    - REORG: mworker: move mworker_create_master_cli in master 'case'\n    - MEDIUM: startup: call chroot() if needed in one place\n    - MEDIUM: startup: do set_identity() if needed in one place\n    - MINOR: startup: only worker gets capabilities from bin\n    - CLEANUP: haproxy: rm no longer used mworker_reexec_waitmode\n    - MINOR: startup: rename exit_on_waitmode_failure to exit_on_failure\n    - MINOR: defaults: update MASTER_MAXCONN description\n    - MEDIUM: startup: remove MODE_MWORKER_WAIT\n    - MINOR: global: add MODE_DISCOVERY flag\n    - MEDIUM: cfgparse: add KWF_DISCOVERY keyword flag\n    - MEDIUM: cfgparse: call some parsers only in MODE_DISCOVERY\n    - MEDIUM: cfgparse-global: parse only KWF_DISCOVERY keywords in MODE_DISCOVERY\n    - MEDIUM: cfgparse: parse only \"global\" section in MODE_DISCOVERY\n    - MEDIUM: startup: introduce load_cfg and read_cfg\n    - MINOR: cfgparse: fix *thread keywords sensitive to global section position\n    - MINOR: mworker/cli: rename mworker_cli_proxy_new_listener\n    - MINOR: mworker/cli: rename and clean mworker_cli_sockpair_new\n    - MINOR: mworker/cli: create master CLI sockpair before fork\n    - MINOR: mworker/cli: create MASTER proxy before mcli listeners\n    - MINOR: mworker: add and set state PROC_O_INIT for new worker\n    - MEDIUM: mworker/cli: close child and parent fds, setup listeners\n    - MINOR: mworker: mworker_catch_sigchld: use fd_delete instead of close\n    - MINOR: startup: rename and adapt reexec_on_failure\n    - MINOR: mworker: add support for case when new worker dies\n    - MINOR: mworker: simplify the code that sets PROC_O_LEAVING\n    - MINOR: mworker/cli: add _send_status to support state transition\n    - MEDIUM: startup: split sending oldpids_sig logic for standalone and mworker modes\n    - MINOR: startup: split init() into separate initialization routines\n    - MINOR: startup: split main: add step_init_3\n    - MINOR: startup: simplify check for calling sock_get_old_sockets\n    - MINOR: startup: encapsulate sock_get_old_sockets in a function\n    - MINOR: startup: add bind_listeners\n    - MINOR: startup: split main: add step_init_4\n    - MINOR: startup: encapsulate master's code in run_master\n    - MINOR: startup: add read_cfg_in_discovery_mode\n    - MINOR: mworker: adapt exit_on_failure for master recovery mode\n    - MEDIUM: mworker: add support of master recovery mode\n    - MINOR: startup: add set_verbosity\n    - MEDIUM: mworker: block reloads\n    - MINOR: mworker: slow load status delivery if worker is starting\n    - MINOR: mworker: readapt program support in mworker_catch_sigchld\n    - MINOR: mworker: deserialize process list before read_cfg_in_discovery_mode\n    - MINOR: mworker: parse program only in MODE_DISCOVERY\n    - MINOR: cfgparse: add support for program section\n    - MINOR: startup: reintroduce program support\n    - MINOR: mworker-prog: stop old programs in mworker_ext_launch_all\n    - MINOR: mworker: reintroduce systemd support\n    - MINOR: mworker: report explicitly when worker exits due to max reloads\n    - MINOR: cfgparse-global: parse *env keywords in MODE_DISCOVERY\n    - MINOR: startup: reintroduce *env keywords support\n    - MINOR: startup: close devnullfd, when daemon mode is applied\n\n2024/10/03 : 3.1-dev9\n    - MINOR: tools: add minimal file name management\n    - CLEANUP: stick-table: make the file location point to a global file name\n    - MINOR: proxy: use the global file names for conf->file\n    - CLEANUP: cfgparse: factor proxy vs log-forward collisions\n    - BUG/MINOR: cfgparse: detect another uncaught case of duplicate defaults\n    - MINOR: proxy: add a list of orphaned defaults sections\n    - MEDIUM: cfgparse: drop duplicate named defaults sections after use\n    - OPTIM: cfgparse: speed up duplicate server detection\n    - MEDIUM: cfgparse: warn about deprecated use of duplicate server names\n    - BUG/MINOR: server: shut down streams under thread isolation\n    - BUG/MINOR: proxy: also make the cli and resolvers use the global name\n    - REGTESTS: log: fix log-profile.vtc\n    - MEDIUM: mailers: warn about deprecated legacy mailers\n    - BUG/MEDIUM: cli: Be sure to catch immediate client abort\n    - DEV: flags/applet: decode appctx flags\n    - BUG/MEDIUM: cli: Deadlock when setting frontend maxconn\n    - MINOR: log: fix indent in strm_log()\n    - MINOR: log: introduce extra log profile steps\n    - MINOR: log: handle extra log origins in _process_send_log_override()\n    - MINOR: log: introduce log_orig flags\n    - MINOR: log: explicitly handle extra log origins as error when relevant\n    - MINOR: log: support extra log origins for '%OG' alias\n    - MINOR: proxy: add log_steps struct member\n    - MINOR: log: introduce \"log-steps\" proxy keyword\n    - MINOR: log: add log_orig_proxy() helper function\n    - MEDIUM: log: consider log-steps proxy setting for existing log origins\n    - DOC: config: document proxy \"log-steps\" keyword\n    - REGTESTS: add a test for proxy \"log-steps\"\n    - Revert \"BUG/MINOR: server: shut down streams under thread isolation\"\n    - MINOR: task: define two new one-shot events for use with WOKEN_OTHER or MSG\n    - BUG/MEDIUM: stream: make stream_shutdown() async-safe\n    - BUG/MINOR: server: make sure the HMAINT state is part of MAINT\n    - BUG/MINOR: queue: make sure that maintenance redispatches server queue\n    - MINOR: server: make srv_shutdown_sessions() call pendconn_redistribute()\n    - BUILD: tools: only include execinfo.h for the real backtrace() function\n    - MINOR: tools: do not attempt to use backtrace() on linux without glibc\n    - OPTIM: channel: speed up co_getline()'s search of the end of line\n    - OPTIM: stconn: Don't pretend mux have more data to deliver on EOI/EOS/ERROR\n    - BUG/MINOR: mcli: Pretend the mux have more data to deliver between two commands\n    - MINOR: action: Export release_expr_int_action() release function\n    - MINOR: stream: Rely on a per-stream max connection retries value\n    - MINOR: stream: Support dynamic changes of the number of connection retries\n    - MINOR: stream/stats: Expose the current number of streams in stats\n    - MINOR: stream/stats: Expose the total number of streams ever created in stats\n    - BUG/MINOR: cfgparse-global: fix allowed args number for setenv\n    - MINOR: cfgparse-global: add dedicated parser for *env keywords\n    - MINOR: mux-quic: complete Tx infos for QCS dump\n    - MINOR: quic: ensure txbuf realloc is only performed on empty buffer\n    - MINOR: mux-quic: strengthen qcs_send_metadata() usage\n    - MINOR: quic: remove unneeded notification of txbuf room\n    - MINOR: quic: refactor MUX send notification\n    - MEDIUM: quic: strengthen MUX send notification\n    - MINOR: quic: refactor STREAM room notification\n    - MINOR: quic: do not remove qc_stream_desc automatically on ACK handling\n    - MINOR: quic: store streambuf in a streamdesc tree\n    - MINOR: quic: move buffered ACK to streambuf\n    - MEDIUM: quic: handle out-of-order ACK at streamdesc layer\n    - MEDIUM: quic: refactor buffered STREAM ACK consuming\n    - BUG/MEDIUM: queue: always dequeue the backend when redistributing the last server\n    - MINOR: config/trace: Add a 'traces' section to declare debug traces\n    - MINOR: trace: Be able to chain commands for a source in one line\n    - MINOR: tcpcheck: Add support for an option host header value for httpchk option\n    - BUG/MINOR: mux-h1: Fix condition to set EOI on SE during zero-copy forwarding\n    - MINOR: mux-h1: Use a dedicated function to conditionnaly set EOI flag on SE\n    - BUG/MINOR: http-ana: Disable fast-fwd for unfinished req waiting for upgrade\n    - BUG/MINOR: mux-quic: fix crash on qcc_init() early return\n    - BUG/MINOR: quic: fix trace on releasing STREAM frame after ack\n\n2024/09/18 : 3.1-dev8\n    - DOC: configuration: place the HAPROXY_HTTP_LOG_FMT example on the correct line\n    - MINOR: mux-h1: Set EOI on SE during demux when both side are in DONE state\n    - BUG/MEDIUM: mux-h1/mux-h2: Reject upgrades with payload on H2 side only\n    - REGTESTS: h1/h2: Update script testing H1/H2 protocol upgrades\n    - BUG/MEDIUM: clock: detect and cover jumps during execution\n    - BUG/MINOR: pattern: prevent const sample from being tampered in pat_match_beg()\n    - BUG/MEDIUM: pattern: prevent uninitialized reads in pat_match_{str,beg}\n    - BUG/MEDIUM: pattern: prevent UAF on reused pattern expr\n    - MEDIUM: ssl/cli: \"dump ssl cert\" allow to dump a certificate in PEM format\n    - BUG/MAJOR: mux-h1: Wake SC to perform 0-copy forwarding in CLOSING state\n    - BUG/MINOR: h1-htx: Don't flag response as bodyless when a tunnel is established\n    - REGTESTS: fix random failures with wrong_ip_port_logging.vtc under load\n    - BUG/MINOR: pattern: do not leave a leading comma on \"set\" error messages\n    - REGTESTS: shorten a bit the delay for the h1/h2 upgrade test\n    - MINOR: server: allow init-state for dynamic servers\n    - DOC: server: document what to check for when adding new server keywords\n    - MEDIUM: h1: Accept invalid T-E values with accept-invalid-http-response option\n    - BUG/MINOR: polling: fix time reporting when using busy polling\n    - BUG/MINOR: clock: make time jump corrections a bit more accurate\n    - BUG/MINOR: clock: validate that now_offset still applies to the current date\n    - BUG/MEDIUM: queue: implement a flag to check for the dequeuing\n    - OPTIM: sample: don't check casts for samples of same type\n    - OPTIM: vars: remove the unneeded lock in vars_prune_*\n    - OPTIM: vars: inline vars_prune() to avoid many calls\n    - MINOR: vars: remove the emptiness tests in callers before pruning\n    - IMPORT: import cebtree (compact elastic binary trees)\n    - OPTIM: vars: use a cebtree instead of a list for variable names\n    - OPTIM: vars: use multiple name heads in the vars struct\n    - BUG/MINOR: peers: local entries updates may not be advertised after resync\n    - DOC: config: Explicitly list relaxing rules for accept-invalid-http-* options\n    - MINOR: proxy: Rename accept-invalid-http-* options\n    - DOC: configuration: Remove dangerous directives from the proxy matrix\n    - BUG/MEDIUM: sc_strm/applet: Wake applet after a successfull synchronous send\n    - BUG/MEDIUM: cache/stats: Wait to have the request before sending the response\n    - BUG/MEDIUM: promex: Wait to have the request before sending the response\n    - MINOR: clock: test all clock_gettime() return values\n    - MEDIUM: clock: collect the monotonic time in clock_local_update_date()\n    - MEDIUM: clock: opportunistically use CLOCK_MONOTONIC for the internal time\n    - MEDIUM: clock: use the monotonic clock for idle time calculation\n    - MEDIUM: clock: don't compute before_poll when using monotonic clock\n    - BUG/MINOR: fix missing \"log-format overrides previous 'option tcplog clf'...\" detection\n    - BUG/MINOR: fix missing \"'option httpslog' overrides previous 'option tcplog clf'...\" detection\n    - BUG/MINOR: cfgparse-listen: fix option httpslog override warning message\n    - BUG/MINOR: cfgparse: detect incorrect overlap of same backend names\n    - MEDIUM: cfgparse: warn about proxies having the same names\n    - DOC: management: add init-state to add server keywords\n    - BUG/MINOR: mux-quic: report glitches to session\n    - BUILD: cebtree: silence a bogus gcc warning on impossible code paths\n    - MEDIUM: cfgparse: warn about colliding names between defaults and proxies\n    - MEDIUM: cfgparse: detect collisions between defaults and log-forward\n\n2024/09/05 : 3.1-dev7\n    - MINOR: config: Created env variables for http and tcp clf formats\n    - MINOR: mux-quic: add buf_in_flight to QCC debug infos\n    - MINOR: mux-quic: correct qcc_bufwnd_full() documentation\n    - MINOR: tools: add helpers to backup/clean/restore env\n    - MINOR: mworker: restore initial env before wait mode\n    - BUG/MINOR: haproxy: free init_env in deinit only if allocated\n    - BUILD: tools: environ is not defined in OS X and BSD\n    - DEV: coccinelle: add a test to detect unchecked malloc()\n    - DEV: coccinelle: add a test to detect unchecked calloc()\n    - CI: QUIC Interop AWS-LC: enable ngtcp2 client\n    - CI: fix missing comma introduced in 956839c0f68a7722acc586ecd91ffefad2ccb303\n    - CI: QUIC Interop: do not run bandwidth measurement tests\n    - CI: QUIC Interop: use different artifact names for uploading logs\n    - BUILD: quic: 32bits build broken by wrong integer conversions for printf()\n    - CLEANUP: ssl: cleanup the clienthello capture\n    - MEDIUM: ssl: capture the supported_versions extension from Client Hello\n    - MEDIUM: ssl/sample: add ssl_fc_supported_versions_bin sample fetch\n    - MEDIUM: ssl: capture the signature_algorithms extension from Client Hello\n    - MEDIUM: ssl/sample: add ssl_fc_sigalgs_bin sample fetch\n    - MINOR: proxy: Add support of 429-Too-Many-Requests in retry-on status\n    - BUG/MEDIUM: mux-h2: Set ES flag when necessary on 0-copy data forwarding\n    - BUG/MEDIUM: stream: Prevent mux upgrades if client connection is no longer ready\n    - BUG/MINIR: proxy: Match on 429 status when trying to perform a L7 retry\n    - CLEANUP: haproxy: fix typos in code comment\n    - CLEANUP: mqtt: fix typo in MQTT_REMAINING_LENGHT_MAX_SIZE\n    - MINOR: tools: Implement ipaddrcpy().\n    - MINOR: quic: Implement quic_tls_derive_token_secret().\n    - MINOR: quic: Token for future connections implementation.\n    - BUG/MINOR: quic: Missing incrementation in NEW_TOKEN frame builder\n    - MINOR: quic: Modify NEW_TOKEN frame structure (qf_new_token struct)\n    - MINOR: quic: Implement qc_ssl_eary_data_accepted().\n    - MINOR: quic: Add trace for QUIC_EV_CONN_IO_CB event.\n    - BUG/MEDIUM: quic: always validate sender address on 0-RTT\n    - BUILD: quic: fix build errors on FreeBSD since recent GSO changes\n    - MINOR: tools: extend str2sa_range to add an alt parameter\n    - MINOR: server: add a alt_proto field for server\n    - MEDIUM: sock: use protocol when creating socket\n    - MEDIUM: protocol: add MPTCP per address support\n    - BUG/MINOR: quic: Crash from trace dumping SSL eary data status (AWS-LC)\n    - MEDIUM: stick-table: Add support of a factor for IN/OUT bytes rates\n    - MEDIUM: bwlim: Use a read-lock on the sticky session to apply a shared limit\n    - BUG/MEDIUM: mux-pt: Never fully close the connection on shutdown\n    - BUG/MEDIUM: cli: Always release back endpoint between two commands on the mcli\n    - BUG/MINOR: quic: unexploited retransmission cases for Initial pktns.\n    - BUG/MEDIUM: mux-h1: Properly handle empty message when an error is triggered\n    - MINOR: mux-h2: try to clear DEM_MROOM and MUX_MFULL at more places\n    - BUG/MAJOR: mux-h2: always clear MUX_MFULL and DEM_MROOM when clearing the mbuf\n    - BUG/MINOR: mux-spop: always clear MUX_MFULL and DEM_MROOM when clearing the mbuf\n    - BUG/MINOR: Crash on O-RTT RX packet after dropping Initial pktns\n    - BUG/MEDIUM: mux-pt: Fix condition to perform a shutdown for writes in mux_pt_shut()\n    - CLEANUP: assorted typo fixes in the code and comments\n    - DEV: patchbot: count the number of backported/non-backported patches\n    - DEV: patchbot: add direct links to show only specific categories\n    - DEV: patchbot: detect commit IDs starting with 7 chars\n    - BUG/MEDIUM: clock: also update the date offset on time jumps\n    - MEDIUM: server: add init-state\n\n2024/08/21 : 3.1-dev6\n    - BUG/MINOR: proto_tcp: delete fd from fdtab if listen() fails\n    - BUG/MINOR: proto_tcp: keep error msg if listen() fails\n    - MINOR: proto_tcp: tcp_bind_listener: copy errno in errmsg\n    - MINOR: channel: implement ci_insert() function\n    - BUG/MEDIUM: mworker/cli: fix pipelined modes on master CLI\n    - REGTESTS: mcli: test the pipelined commands on master CLI\n    - MINOR: cfgparse: load_cfg_in_mem: fix null ptr dereference reported by coverity\n    - MINOR: startup: fix unused value reported by coverity\n    - BUG/MINOR: mux-quic: do not send too big MAX_STREAMS ID\n    - BUG/MINOR: proto_uxst: delete fd from fdtab if listen() fails\n    - BUG/MINOR: cfgparse: parse_cfg: fix null ptr dereference reported by coverity\n    - MINOR: proto_uxst: copy errno in errmsg for syscalls\n    - MINOR: mux-quic: do not trace error in qcc_send_frames() on empty list\n    - BUG/MINOR: h3: properly reject too long header responses\n    - CLEANUP: mworker/cli: clean up the mode handling\n    - BUG/MINOR: tools: make fgets_from_mem() stop at the end of the input\n    - BUG/MINOR: pattern: pat_ref_set: fix UAF reported by coverity\n    - BUG/MINOR: pattern: pat_ref_set: return 0 if err was found\n    - CI: keep logs for failed QIUC Interop jobs\n    - BUG/MINOR: release-estimator: fix relative scheme in CHANGELOG URL\n    - MINOR: release-estimator: add requirements.txt\n    -  MINOR: release-estimator: add installation steps in README.md\n    - MINOR: release-estimator: fix the shebang of the python script\n    - DOC: config: correct the table for option tcplog\n    - MEDIUM: log: relax some checks and emit diag warnings instead in lf_expr_postcheck()\n    - MINOR: log: \"drop\" support for log-profile steps\n    - CI: QUIC Interop LibreSSL: document chacha20 test status\n    - CI: modernize codespell action, switch to node 16\n    - CI: QUIC Interop AWS-LC: enable chrome client\n    - DOC: lua: fix incorrect english in lua.txt\n    - MINOR: Implements new log format of option tcplog clf\n    - MINOR: cfgparse: limit file size loaded via /dev/stdin\n    - BUG/MINOR: stats: fix color of input elements in dark mode\n    - CLEANUP: stats: use modern DOCTYPE tag\n    - BUG/MINOR: stats: add lang attribute to html tag\n    - DOC: quic: fix default minimal value for max window size\n    - DOC: quic: document nocc debug congestion algorithm\n    - MINOR: quic: extract config window-size parsing\n    - MINOR: quic: define max-window-size config setting\n    - MINOR: quic: allocate stream txbuf via qc_stream_desc API\n    - MINOR: mux-quic: account stream txbuf in QCC\n    - MEDIUM: mux-quic: implement API to ignore txbuf limit for some streams\n    - MINOR: h3: mark control stream as metadata\n    - MINOR: mux-quic: define buf_in_flight\n    - MAJOR: mux-quic: allocate Tx buffers based on congestion window\n    - MINOR: quic/config: adapt settings to new conn buffer limit\n    - MINOR: quic: define sbuf pool\n    - MINOR: quic: support sbuf allocation in quic_stream\n    - MEDIUM: h3: allocate small buffers for headers frames\n    - MINOR: mux-quic: retry after small buf alloc failure\n    - BUG/MINOR: cfgparse-global: fix err msg in mworker keyword parser\n    - BUG/MINOR: cfgparse-global: clean common_kw_list\n    - BUG/MINOR: cfgparse-global: remove redundant goto\n    - MINOR: cfgparse-global: move 'pidfile' in global keywords list\n    - MINOR: cfgparse-global: move 'expose-*' in global keywords list\n    - MINOR: cfgparse-global: move tune options in global keywords list\n    - MINOR: cfgparse-global: move unsupported keywords in global list\n    - BUG/MINOR: cfgparse-global: remove tune.fast-forward from common_kw_list\n    - MINOR: quic: store the lost packets counter in the quic_cc_event element\n    - MINOR: quic: support a tolerance for spurious losses\n    - MINOR: protocol: properly assign the sock_domain and sock_family\n    - MINOR: protocol: add a family lookup\n    - MEDIUM: socket: always properly use the sock_domain for requested families\n    - MINOR: protocol: add the real address family to the protocol\n    - MINOR: socket: don't ban all custom families from reuseport\n    - MINOR: protocol: always initialize the receivers list on registration\n    - CLEANUP: protocol: no longer initialize .receivers nor .nb_receivers\n\n2024/08/07 : 3.1-dev5\n    - BUG/MINOR: quic: Lack of precision when computing K (cubic only cc)\n    - MEDIUM: ssl/quic: implement quic crypto with EVP_AEAD\n    - MINOR: quic: rename confusing wording aes to hp\n    - MEDIUM: quic: add key argument to header protection crypto functions\n    - MEDIUM: quic: implement CHACHA20_POLY1305 for AWS-LC\n    - MEDIUM: sink: assume sft appctx stickiness\n    - MINOR: quic: delay Retry emission on quic-force-retry\n    - MEDIUM: quic: implement quic-initial rules\n    - MINOR: quic: support ACL for quic-initial rules\n    - MINOR: quic: pass quic_dgram as obj_type for quic-initial rules\n    - MINOR: quic: implement reject quic-initial action\n    - MINOR: quic: implement send-retry quic-initial rules\n    - BUG/MEDIUM: quic: fix invalid conn reject with CONNECTION_REFUSED\n    - MEDIUM: h1: allow to preserve keep-alive on T-E + C-L\n    - MINOR: quic: Add information to \"show quic\" for CUBIC cc.\n    - MINOR: quic: Dump TX in flight bytes vs window values ratio.\n    - BUG/MEDIUM: jwt: Clear SSL error queue on error when checking the signature\n    - BUILD: cfgparse-quic: fix build error on Solaris due to missing netinet/in.h\n    - MINOR: queue: add a function to check for TOCTOU after queueing\n    - BUG/MEDIUM: queue: deal with a rare TOCTOU in assign_server_and_queue()\n    - DOC: config: Add documentation about spop mode for backends\n    - BUG/MEDIUM: stconn: Report error on SC on send if a previous SE error was set\n    - BUG/MEDIUM: mux-pt/mux-h1: Release the pipe on connection error on sending path\n    - BUILD: mux-pt: Use the right name for the sedesc variable\n    - BUG/MINOR: stconn: bs.id and fs.id had their dependencies incorrect\n    - BUG/MEDIUM: ssl: reactivate 0-RTT for AWS-LC\n    - BUG/MEDIUM: ssl: 0-RTT initialized at the wrong place for AWS-LC\n    - BUILD: ssl: replace USE_OPENSSL_AWSLC by OPENSSL_IS_AWSLC\n    - BUG/MEDIUM: quic: prevent conn freeze on 0RTT undeciphered content\n    - MINOR: tcp_sample: Move TCP low level sample fetch function to control layer\n    - MINOR: quic: Define ->get_info() control layer callback for QUIC\n    - MINOR: flags/mux-quic: decode qcc and qcs flags\n    - BUG/MINOR: quic: fix fc_rtt/srtt values\n    - BUG/MIONR: quic: fix fc_lost\n    - BUG/MINOR: h1: do not forward h2c upgrade header token\n    - BUG/MINOR: h2: reject extended connect for h2c protocol\n    - BUG/MEDIUM: http-ana: Report error on write error waiting for the response\n    - BUG/MEDIUM: h2: Only report early HTX EOM for tunneled streams\n    - BUG/MEDIUM: mux-h2: Propagate term flags to SE on error in h2s_wake_one_stream\n    - BUG/MEDIUM: peer: Notify the applet won't consume data when it waits for sync\n    - BUG/MINOR: quic: Too shord datagram during O-RTT handshakes (aws-lc only)\n    - CI: add weekly QUIC Interop regression against AWS-LC\n    - CI: harden NetBSD builds by ERR=1\n    - BUG/MINOR: quic: Too short datagram during packet building failures (aws-lc only)\n    - DEV: coccinelle: add a test to detect unchecked strdup()\n    - BUG/MINOR: fcgi-app: handle a possible strdup() failure\n    - BUG/MEDIUM: server/addr: fix tune.events.max-events-at-once event miss and leak\n    - MINOR: quic: convert qc_stream_desc release field to flags\n    - MINOR: quic: implement function to check if STREAM is fully acked\n    - BUG/MEDIUM: quic: handle retransmit for standalone FIN STREAM\n    - MINOR: quic: enforce ACK reception is handled in order\n    - DOC: configuration: fix alphabetical ordering of {bs,fs}.aborted\n    - MINOR: stconn: add a new pair of sf functions {bs,fs}.debug_str\n    - MINOR: mux-h2: implement the debug string for logs\n    - MINOR: mux-quic: define dump functions for QCC and QCS\n    - MINOR: mux-quic: implement debug string for logs\n    - MINOR: quic: dump quic_conn debug string for logs\n    - MINOR: time: define tot_time structure\n    - MINOR: mux-quic: measure QCS lifetime and its blocking state\n    - BUG/MINOR: trace/quic: enable conn/session pointer recovery from quic_conn\n    - BUG/MINOR: trace/quic: permit to lock on frontend/connect/session etc\n    - BUG/MEDIUM: trace: fix null deref in lockon mechanism since TRACE_ENABLED()\n    - BUG/MINOR: trace: automatically start in waiting mode with \"start <evt>\"\n    - BUG/MINOR: trace/quic: make \"qconn\" selectable as a lockon criterion\n    - BUG/MINOR: quic/trace: make quic_conn_enc_level_init() emit NEW not CLOSE\n    - MINOR: trace: support setting the sink and level for all sources at once\n    - MINOR: session/trace: enable very minimal session tracing\n    - MEDIUM: trace: implement a \"follow\" mechanism\n    - MINOR: trace: move the known trace context into a dedicated struct\n    - MINOR: trace: add a per-source helper to pre-fill the context\n    - MINOR: mux-h2: add a trace context filling helper\n    - MINOR: mux-h1: add a trace context filling helper\n    - MINOR: mux-quic: don't leave dangling pointer after freeing qcs->sd\n    - MINOR: mux-quic: add a trace context filling helper\n    - MINOR: mux-h1/trace: add a state trace on stream creation/upgrade\n    - MINOR: mux-h2/trace: add a state trace on stream creation/destruction\n    - MINOR: mux-h3/trace: add a state trace on stream creation/destruction\n    - BUG/MINOR: quic: prevent freeze after early QCS closure\n    - MINOR: server: ensure max_events_at_once > 0 in server_atomic_sync()\n    - MINOR: cfgparse: add struct cfgfile to represent config in memory\n    - REORG: tools: move list_append_word to cfgparse\n    - MINOR: startup: adapt list_append_word to use cfgfile\n    - MINOR: cfgparse: add load_cfg_in_mem\n    - MINOR: cfgparse: load_cfg_in_mem: take in account file size\n    - MINOR: tools: add fgets_from_mem\n    - MEDIUM: startup: make read_cfg() return immediately on ENOMEM\n    - MEDIUM: startup: load and parse configs from memory\n    - MINOR: startup: rename readcfgfile in parse_cfg\n\n2024/07/24 : 3.1-dev4\n    - MINOR: limits: prepare to keep limits in one place\n    - REORG: fd: move raise_rlim_nofile to limits\n    - CLEANUP: fd: rm struct rlimit definition\n    - REORG: global: move rlim_fd_*_at_boot in limits\n    - MINOR: haproxy: prepare to move limits-related code\n    - REORG: haproxy: move limits handlers to limits\n    - MINOR: limits: add is_any_limit_configured\n    - CLEANUP: quic: remove obsolete comment on send\n    - MINOR: quic: extend detection of UDP API OS features\n    - MINOR: quic: activate UDP GSO for QUIC if supported\n    - MINOR: quic: define quic_cc_path MTU as constant\n    - MINOR: quic: add GSO parameter on quic_sock send API\n    - MAJOR: quic: support GSO when encoding datagrams\n    - MEDIUM: quic: implement GSO fallback mechanism\n    - MINOR: quic: add counters of sent bytes with and without GSO\n    - BUG/MEDIUM: bwlim: Be sure to never set the analyze expiration date in past\n    - CLEANUP: proto: rename TID affinity callbacks\n    - CLEANUP: quic: rename TID affinity elements\n    - BUG/MINOR: limits: fix license type in limits.h\n    - BUG/MINOR: session: Eval L4/L5 rules defined in the default section\n    - CLEANUP: stconn: Fix a typo in comments for SE_ABRT_SRC_*\n    - MEDIUM: spoe: Remove fragmentation support\n    - MEDIUM: spoe: Remove async mode support\n    - MINOR: spoe: Use only a global engine-id per agent\n    - MINOR: spoe: Remove debugging\n    - MAJOR: spoe: Remove idle applets and pipelining support\n    - MINOR: spoe: Remove the dedicated SPOE applet task\n    - MEDIUM: proxy/spoe: Add a SPOP mode\n    - MEDIUM: applet: Add a .shut callback function for applets\n    - MINOR: connection: No longer include stconn type header in connection-t.h\n    - MINOR: stconn: Use a dedicated function to get the opposite sedesc\n    - MINOR: spoe: Rename some flags and constant to use SPOP prefix\n    - MINOR: spoe: Dynamically alloc the message list per event of an agent\n    - MINOR: spoe: Move all stuff regarding the filter/applet in the C file\n    - MINOR: spoe: Move spoe_str_to_vsn() into the header file\n    - MEDIUM: mux-spop: Introduce the SPOP multiplexer\n    - MEDIUM: check/spoe: Use SPOP multiplexer to perform SPOP health-checks\n    - MAJOR: spoe: Rewrite SPOE applet to use the SPOP mux\n    - CLEANUP: spoe: Uniformize function definitions\n    - MINOR: spoe: Add internal sample fetch to retrieve the SPOE engine ID\n    - MEDIUM: spoe: Set a specific name for the connection pool of SPOP servers\n    - MINOR: backend: Remove test on HTX streams to reuse idle connections on connect\n    - MEDIUM: spoe: Force the reuse 'always' mode for SPOP backends\n    - MINOR: mux-spop: Use a dedicated function to update the SPOP connection timeout\n    - MAJOR: mux-spop: Make the SPOP connections reusable\n    - MINOR: stats-html: Display reuse ratio for spop connections\n    - MEDIUM: spoe: Directly xfer NOTIFY frame when SPOE applet is created\n    - MEDIUM: spoe: Directly receive ACK frame in the SPOE context buffer\n    - MEDIUM: mux-spop/spoe: Save negociated max-frame-size value in the mux\n    - MINOR: spoe: Remove the spop version from the SPOE appctx context\n    - MEDIUM: mux-spop: Add checks on received frames\n    - MEDIUM: mux-spop: Announce the pipeling support if possible\n    - MEDIUM: spoe: Forward SPOE context error to the SPOE applet\n    - MEDIUM: spoe: Make the SPOE applet use its own buffers\n    - DOC: spoe: Update SPOE documentation to reflect recent refactoring\n    - BUILD: mux-spop: fix build failure on gcc 4-10 and clang\n    - MINOR: fd: don't scan the full fdtab on all threads\n    - MINOR: server: better mt_list usage for node migration (prev_deleted handling)\n    - BUG/MINOR: do not close uninit FD in quic_test_socketops()\n    - BUG/MEDIUM: debug/cli: fix \"show threads\" crashing with low thread counts\n    - MINOR: debug: prepare feed_post_mortem_late\n    - CLEANUP: debug: fix indents in debug_parse_cli_show_dev\n    - MINOR: debug: store runtime uid/gid in postmortem\n    - MINOR: debug: keep runtime capabilities in post_mortem\n    - MINOR: debug: use LIM2A to show limits\n    - MINOR: debug: prepare to show runtime limits\n    - MINOR: debug: keep runtime limits in postmortem\n    - DOC: install: don't reference removed CPU arg\n    - BUG/MEDIUM: ssl_sock: fix deadlock in ssl_sock_load_ocsp() on error path\n    - BUG/MAJOR: mux-h2: force a hard error upon short read with pending error\n    - MEDIUM: sink: start applets asynchronously\n    - OPTIM: sink: balance applets accross threads\n    - MEDIUM: ocsp: fix ocsp when the chain is loaded from 'issuers-chain-path'\n    - MEDIUM: ssl: add extra_chain to ckch_data\n    - MINOR: ssl: change issuers-chain for show_cert_detail()\n    - REGTESTS: ssl: test the issuers-chain-path keyword\n    - DOC: configuration: issuers-chain-path not compatible with OCSP\n    - DOC: configuration: issuers-chain-path is compatible with OCSP\n    - BUG/MEDIUM: startup: fix zero-warning mode\n    - BUILD: tree-wide: cast arguments to tolower/toupper to unsigned char (2)\n    - MINOR: cfgparse-global: move mode's keywords in cfg_kw_list\n    - MINOR: cfgparse-global: move no<poller_name> in cfg_kw_list\n    - DOC: config: improve the http-keep-alive section\n    - BUG/MINOR: stick-table: fix crash for src_inc_gpc() without stkcounter\n    - BUG/MINOR: server: Don't warn fallback IP is used during init-addr resolution\n    - BUG/MINOR: cli: Atomically inc the global request counter between CLI commands\n    - MINOR: stream: Add a pointer to set the parent stream\n    - MINOR: vars: Fill a description instead of hash and scope when a name is parsed\n    - MINOR: vars: Use a description to set/unset a variable instead of its hash and scope\n    - MEDIUM: vars: Be able to parse parent scopes for variables\n    - MINOR: vars: Use a variable description to get variables of a specific scope\n    - MEDIUM: vars: Be able to retrieve variable of the parent stream, if any\n    - MEDIUM: spoe: Set the parent stream for SPOE streams\n    - BUG/MINOR: quic: Non optimal first datagram.\n    - DOC: config: Add a dedicated section about variables\n    - DOC: config: Add info about variable scopes referencing the parent stream\n    - DOC: config: Explicitly state the SPOE streams have a usable parent stream\n    - MINOR: quic: Avoid cc priv buffer overflow.\n    - MINOR: spoe: Add a function to validate a version is supported\n    - MINOR: spoe: export the list of SPOP error reasons\n    - MEDIUM: spoe/tcpcheck: Reintroduce SPOP check as a customized tcp-check\n    - REGTESTS: check/spoe: Re-enable the script performing SPOP health-checks\n    - BUG/MEDIUM: sink: properly init applet under sft lock\n    - MINOR: sink: unify and sink_forward_io_handler() and sink_forward_oc_io_handler()\n    - MINOR: sink: Remove useless test on SE_FL_SHR/SHW flags\n    - MINOR: sink: merge sink_forward_io_handler() with sink_forward_oc_io_handler()\n    - MINOR: sink: add some comments about sft->appctx usage in applet handlers\n    - MINOR: sink: distinguish between hard and soft close in _sink_forward_io_handler()\n    - MEDIUM: sink: don't set NOLINGER flag on the outgoing stream interface\n    - MINOR: ring: count processed messages in ring_dispatch_messages()\n    - MINOR: sink: add processed events counter in sft\n    - MEDIUM: sink: \"max-reuse\" support for sink servers\n    - OPTIM: sink: consider threads' current load when rebalancing applets\n\n2024/07/10 : 3.1-dev3\n    - BUG/MINOR: quic: Wrong datagram building when probing.\n    - BUG/MEDIUM: quic: fix possible exit from qc_check_dcid() without unlocking\n    - BUG/MINOR: promex: Remove Help prefix repeated twice for each metric\n    - DOC: configuration: add details about crt-store in bind \"crt\" keyword\n    - BUG/MEDIUM: hlua/cli: Fix lua CLI commands to work with applet's buffers\n    - DOC: configuration: more details about the master-worker mode\n    - BUG/MEDIUM: server: fix race on server_atomic_sync()\n    - BUG/MINOR: jwt: don't try to load files with HMAC algorithm\n    - CLEANUP: quic: cleanup prototypes related to CIDs handling\n    - CLEANUP: quic: remove non-existing quic_cid_tree definition\n    - MINOR: quic: remove access to CID global tree outside of quic_cid module\n    - REORG: quic: remove quic_cid_trees reference from proto_quic\n    - MINOR: quic: add 2 BUG_ON() on datagram dispatch\n    - MINOR: quic: ensure quic_conn is never removed on thread affinity rebind\n    - MEDIUM: init: set default for fd_hard_limit via DEFAULT_MAXFD\n    - DOC: configuration: update maxconn description\n    - MINOR: proto: extend connection thread rebind API\n    - BUG/MEDIUM: quic: prevent crash on accept queue full\n    - BUG/MEDIUM: peers: Fix crash when syncing learn state of a peer without appctx\n    - CI: add weekly QUIC Interop regression against LibreSSL\n    - DEV: flags/quic: decode quic_conn flags\n    - MINOR: quic: rename \"ssl error\" trace\n    - BUG/MEDIUM: init: fix fd_hard_limit default in compute_ideal_maxconn\n    - BUG/MINOR: jwt: fix variable initialisation\n    - MINOR: ssl/sample: ssl_c_san returns a comma separated list of SAN\n    - OPTIM: pool: improve needed_avg cache line access pattern\n    - MAJOR: import: update mt_list to support exponential back-off (try #2)\n    - CI: weekly QUIC Interop: try to fix private image\n    - BUG/MINOR: h1: Fail to parse empty transfer coding names\n    - BUG/MINOR: h1: Reject empty coding name as last transfer-encoding value\n    - BUG/MEDIUM: h1: Reject empty Transfer-encoding header\n    - BUG/MEDIUM: spoe: Be sure to create a SPOE applet if none on the current thread\n    - BUILD: listener: silence a build warning about unused value without threads\n    - DOC: architecture: remove the totally outdated architecture manual\n    - SCRIPTS: create-release: no more need to skip architecture.txt\n\n2024/06/29 : 3.1-dev2\n    - BUG/MINOR: log: fix broken '+bin' logformat node option\n    - DEBUG: hlua: distinguish burst timeout errors from exec timeout errors\n    - REGTESTS: ssl: fix some regtests 'feature cmd' start condition\n    - BUG/MEDIUM: ssl: AWS-LC + TLSv1.3 won't do ECDSA in RSA+ECDSA configuration\n    - MINOR: ssl: activate sigalgs feature for AWS-LC\n    - REGTESTS: ssl: activate new SSL reg-tests with AWS-LC\n    - BUG/MEDIUM: proxy: fix email-alert invalid free\n    - REORG: mailers: move free_email_alert() to mailers.c\n    - BUG/MINOR: proxy: fix email-alert leak on deinit() (2nd try)\n    - DOC: configuration: fix alphabetical order of bind options\n    - DOC: management: document ptr lookup for table commands\n    - BUG/MAJOR: quic: fix padding with short packets\n    - BUG/MAJOR: quic: do not loop on emission on closing/draining state\n    - MINOR: sample: date converter takes HTTP date and output an UNIX timestamp\n    - SCRIPTS: git-show-backports: do not truncate git-show output\n    - DOC: api/event_hdl: small updates, fix an example and add some precisions\n    - BUG/MINOR: h3: fix crash on STOP_SENDING receive after GOAWAY emission\n    - BUG/MINOR: mux-quic: fix crash on qcs SD alloc failure\n    - BUG/MINOR: h3: fix BUG_ON() crash on control stream alloc failure\n    - BUG/MINOR: quic: fix BUG_ON() on Tx pkt alloc failure\n    - DEV: flags/show-fd-to-flags: adapt to recent versions\n    - MINOR: capabilities: export capget and __user_cap_header_struct\n    - MINOR: capabilities: prepare support for version 3\n    - MINOR: capabilities: use _LINUX_CAPABILITY_VERSION_3\n    - MINOR: cli/debug: show dev: add cmdline and version\n    - MINOR: cli/debug: show dev: show capabilities\n    - MINOR: debug: print gdb hints when crashing\n    - BUILD: debug: also declare strlen() in __ABORT_NOW()\n    - BUILD: Missing inclusion header for ssize_t type\n    - BUG/MINOR: hlua: report proper context upon error in hlua_cli_io_handler_fct()\n    - MINOR: cfgparse/log: remove leftover dead code\n    - BUG/MEDIUM: stick-table: Decrement the ref count inside lock to kill a session\n    - MINOR: stick-table: Always decrement ref count before killing a session\n    - REORG: init: do MODE_CHECK_CONDITION logic first\n    - REORG: init: encapsulate CHECK_CONDITION logic in a func\n    - REORG: init: encapsulate 'reload' sockpair and master CLI listeners creation\n    - REORG: init: encapsulate code that reads cfg files\n    - BUG/MINOR: server: fix first server template name lookup UAF\n    - MINOR: activity: make the memory profiling hash size configurable at build time\n    - BUG/MEDIUM: server/dns: prevent DOWN/UP flap upon resolution timeout or error\n    - BUG/MEDIUM: h3: ensure the \":method\" pseudo header is totally valid\n    - BUG/MEDIUM: h3: ensure the \":scheme\" pseudo header is totally valid\n    - BUG/MEDIUM: quic: fix race-condition in quic_get_cid_tid()\n    - BUG/MINOR: quic: fix race condition in qc_check_dcid()\n    - BUG/MINOR: quic: fix race-condition on trace for CID retrieval\n\n2024/06/14 : 3.1-dev1\n    - REGTESTS: Remove REQUIRE_VERSION=2.1 from all tests\n    - REGTESTS: Remove REQUIRE_VERSION=2.2 from all tests\n    - CI: use \"--no-install-recommends\" for apt-get\n    - CI: switch to lua 5.4\n    - CI: use USE_PCRE2 instead of USE_PCRE\n    - DOC: replace the README by a markdown version\n    - CI: VTest: accelerate package install a bit\n    - ADMIN: acme.sh: remove the old acme.sh code\n    - BUG/MINOR: cfgparse: remove the correct option on httpcheck send-state warning\n    - BUG/MINOR: tcpcheck: report correct error in tcp-check rule parser\n    - BUG/MINOR: tools: fix possible null-deref in env_expand() on out-of-memory\n    - DOC: configuration: add an example for keywords from crt-store\n    - CI: speedup apt package install\n    - DOC: add the FreeBSD status badge to README.md\n    - DOC: change the link to the FreeBSD CI in README.md\n    - MINOR: stktable: avoid ambiguous stktable_data_ptr() usage in cli_io_handler_table()\n    - BUG/MINOR: hlua: use CertCache.set() from various hlua contexts\n    - CLEANUP: hlua: fix CertCache class comment\n    - CI: FreeBSD: upgrade image, packages\n    - BUG/MEDIUM: h1-htx: Don't state interim responses are bodyless\n    - MEDIUM: stconn: Be able to unblock zero-copy data forwarding from done_fastfwd\n    - BUG/MEDIUM: mux-quic: Unblock zero-copy forwarding if the txbuf can be released\n    - BUG/MINOR: quic: prevent crash on qc_kill_conn()\n    - CLEANUP: hlua: use hlua_pusherror() where relevant\n    - BUG/MINOR: hlua: don't use lua_pushfstring() when we don't expect LJMP\n    - BUG/MINOR: hlua: fix unsafe hlua_pusherror() usage\n    - BUG/MINOR: hlua: prevent LJMP in hlua_traceback()\n    - CLEANUP: hlua: get rid of hlua_traceback() security checks\n    - BUG/MINOR: hlua: fix leak in hlua_ckch_set() error path\n    - CLEANUP: hlua: simplify ambiguous lua_insert() usage in hlua_ctx_resume()\n    - BUG/MEDIUM: mux-quic: Don't unblock zero-copy fwding if blocked during nego\n    - MINOR: mux-quic: Don't send an emtpy H3 DATA frame during zero-copy forwarding\n    - BUG/MEDIUM: ssl: wrong priority whem limiting ECDSA ciphers in ECDSA+RSA configuration\n    - BUG/MEDIUM: ssl: bad auth selection with TLS1.2 and WolfSSL\n    - BUG/MINOR: quic: fix computed length of emitted STREAM frames\n    - BUG/MINOR: quic: ensure Tx buf is always purged\n    - BUG/MEDIUM: stconn/mux-h1: Fix suspect change causing timeouts\n    - BUG/MAJOR: mux-h1:  Properly copy chunked input data during zero-copy nego\n    - BUG/MINOR: mux-h1: Use the right variable to set NEGO_FF_FL_EXACT_SIZE flag\n    - DOC: install: remove boringssl from the list of supported libraries\n    - MINOR: log: fix \"http-send-name-header\" ignore warning message\n    - BUG/MINOR: proxy: fix server_id_hdr_name leak on deinit()\n    - BUG/MINOR: proxy: fix log_tag leak on deinit()\n    - BUG/MINOR: proxy: fix email-alert leak on deinit()\n    - BUG/MINOR: proxy: fix check_{command,path} leak on deinit()\n    - BUG/MINOR: proxy: fix dyncookie_key leak on deinit()\n    - BUG/MINOR: proxy: fix source interface and usesrc leaks on deinit()\n    - BUG/MINOR: proxy: fix header_unique_id leak on deinit()\n    - MINOR: proxy: add proxy_free_common() helper function\n    - BUG/MEDIUM: proxy: fix UAF with {tcp,http}checks logformat expressions\n    - MINOR: log: change wording in lf_expr_postcheck() error message\n    - BUG/MEDIUM: log: fix lf_expr_postcheck() behavior with default section\n    - CLEANUP: log/proxy: fix comment in proxy_free_common()\n    - DOC: config: move \"hash-key\" from proxy to server options\n    - DOC: config: add missing section hint for \"guid\" proxy keyword\n    - DOC: config: add missing context hint for new server and proxy keywords\n    - BUG/MINOR: promex: Skip resolvers metrics when there is no resolver section\n    - DOC: internals: add a documentation about the master worker\n    - BUG/MAJOR: mux-h1: Prevent any UAF on H1 connection after draining a request\n    - BUG/MINOR: quic: fix padding of INITIAL packets\n    - OPTIM: quic: fill whole Tx buffer if needed\n    - MINOR: quic: refactor qc_build_pkt() error handling\n    - MINOR: quic: use global datagram headlen definition\n    - MINOR: quic: refactor qc_prep_pkts() loop\n    - DOC/MINOR: management: add missed -dR and -dv options\n    - DOC/MINOR: management: add -dZ option\n    - DOC: management: rename show stats domain cli \"dns\" to \"resolvers\"\n    - REORG: log: reorder send log helpers by dependency order\n    - MINOR: session: expose session_embryonic_build_legacy_err() function\n    - MEDIUM: log/session: handle embryonic session log within sess_log()\n    - MINOR: log: provide sending log context to process_send_log() when available\n    - MINOR: log: add log_orig_to_str() function\n    - MINOR: log: provide log origin in logformat expressions using '%OG'\n    - CLEANUP: log: remove ambiguous legacy comment for resolve_logger()\n    - MINOR: log/backend: always free parsing hints in resolve_logger()\n    - MINOR: log: make resolve_logger() static\n    - MINOR: log: provide proxy context to resolve_logger()\n    - MINOR: log: add __send_log_set_metadata_sd helper\n    - MINOR: log: add logger flags\n    - MINOR: log: add log-profile parsing logic\n    - MINOR: log: add log profile buildlines\n    - MEDIUM: log: handle log-profile in process_send_log()\n    - DOC: config: add documentation for log profiles\n    - REGTESTS: log: add a test for log-profile\n    - MINOR: ssl: add ssl_sock_bind_verifycbk() in ssl_sock.h\n    - REORG: ssl: move the SNI selection code in ssl_clienthello.c\n    - BUILD: ssl: fix build with wolfSSL\n    - CI: github: upgrade aws-lc to 1.29.0\n    - Revert \"CI: github: upgrade aws-lc to 1.29.0\"\n    - MEDIUM: ssl: support for ECDA+RSA certificate selection with AWS-LC\n    - BUILD: ssl: disable deprecated functions for AWS-LC 1.29.0\n    - MINOR: ssl: relax the 'ssl.default-dh-param' keyword parsing\n    - CI: github: upgrade aws-lc to 1.29.0\n    - DOC: INSTALL: minimum AWS-LC version is v1.22.0\n    - CI: github: do the AWS-LC weekly build with ERR=1\n\n2024/05/29 : 3.1-dev0\n    - MINOR: version: mention that it's development again\n\n2024/05/29 : 3.0.0\n    - MINOR: sample: implement the uptime sample fetch\n    - CI: scripts: fix build of vtest regarding option -C\n    - CI: scripts: build vtest using multiple CPUs\n    - MINOR: log: rename 'log-format tag' to 'log-format alias'\n    - DOC: config: document logformat item naming and typecasting features\n    - BUILD: makefile: yearly reordering of objects by build time\n    - BUILD: fd: errno is also needed without poll()\n    - DOC: config: fix two typos \"RST_STEAM\" vs \"RST_STREAM\"\n    - DOC: config: refer to the non-deprecated keywords in ocsp-update on/off\n    - DOC: streamline http-reuse and connection naming definition\n    - REGTESTS: complete http-reuse test with pool-conn-name\n    - DOC: config: add %ID logformat alias alternative\n    - CLEANUP: ssl/ocsp: readable ifdef in ssl_sock_load_ocsp\n    - BUG/MINOR: ssl/ocsp: init callback func ptr as NULL\n    - CLEANUP: ssl_sock: move dirty openssl-1.0.2 wrapper to openssl-compat\n    - BUG/MINOR: activity: fix Delta_calls and Delta_bytes count\n    - CI: github: upgrade the WolfSSL job to 5.7.0\n    - DOC: install: update quick build reminders with some missing options\n    - DOC: install: update the range of tested openssl version to cover 3.3\n    - DEV: patchbot: prepare for new version 3.1-dev\n    - MINOR: version: mention that it's 3.0 LTS now.\n\n2024/05/24 : 3.0-dev13\n    - CLEANUP: ssl/cli: remove unused code in dump_crtlist_conf\n    - MINOR: ssl: check parameter in ckch_conf_cmp()\n    - BUG/MINOR: ring: free ring's allocated area not ring's usable area when using maps\n    - DOC: configuration: rework the crt-store load documentation\n    - DEBUG: tools: add vma_set_name() helper\n    - DEBUG: shctx: name shared memory using vma_set_name()\n    - DEBUG: sink: add name hint for memory area used by memory-backed sinks\n    - DEBUG: pollers: add name hint for large memory areas used by pollers\n    - DEBUG: errors: add name hint for startup-logs memory area\n    - DEBUG: fd: add name hint for large memory areas\n    - MEDIUM: ssl: don't load file by discovering them in crt-store\n    - DOC: configuration: update the crt-list documentation\n    - DOC: configuration: add the supported crt-store options in crt-list\n    - BUG/MEDIUM: proto: fix fd leak in <proto>_connect_server\n    - MINOR: sock: set conn->err_code in case of EPERM\n    - BUG/MINOR: http-ana: Don't crush stream termination condition on internal error\n    - MAJOR: spoe: Let the SPOE back into the game\n    - BUG/MINOR: connection: parse PROXY TLV for LOCAL mode\n    - BUG/MINOR: server: free PROXY v2 TLVs on srv drop\n    - MINOR: rhttp: add log on connection allocation failure\n    - BUG/MEDIUM: rhttp: fix preconnect on single-thread\n    - BUG/MINOR: rhttp: prevent listener suspend\n    - BUG/MINOR: rhttp: fix task_wakeup state\n    - MINOR: session: define flag to explicitely release listener on free\n    - MEDIUM: rhttp: create session for active preconnect\n    - MINOR: rhttp: support PROXY emission on preconnect\n    - MINOR: connection: support PROXY v2 TLV emission without stream\n    - MINOR: traces: enumerate the list of levels/verbosities when not found\n    - BUG/MINOR: sock: fix sock_create_server_socket\n    - MINOR: proto: fix coding style\n    - BUG/MAJOR: quic: Crash with TLS_AES_128_CCM_SHA256 (libressl only)\n    - REGTESTS: scripts: allow to change the vtest timeout\n    - BUG/MEDIUM: quic_tls: prevent LibreSSL < 4.0 from negotiating CHACHA20_POLY1305\n    - CI: scripts/build-ssl.sh: loudly fail on unsupported platforms\n    - BUG/MEDIUM: mux-quic: Create sedesc in same time of the QUIC stream\n    - MINOR: mux-quic: Set abort info for SC-less QCS on STOP_SENDING frame\n    - CI: scripts/build-ssl: add a DESTDIR and TMPDIR variable\n    - CI: scripts/buil-ssl: cleanup the boringssl and quictls build\n    - MINOR: config: add thread-hard-limit to set an upper bound to nbthread\n    - BUILD: quic: fix unused variable warning when threads are disabled\n    - BUG/MEDIUM: stick-tables: Fix race with peers when trashing oldest entries\n    - BUG/MEDIUM: stick-tables: Fix race with peers when killing a sticky session\n    - BUG/MEDIUM: stick-tables: make sure never to create two same remote entries\n    - CLEANUP: stick-tables: remove a few unneeded tests for use_wrlock\n    - MINOR: stick-tables: remove the uneeded read lock in stksess_free()\n    - CLEANUP: tools: fix vma_set_name() function comment\n    - DEBUG: tools: add vma_set_name_id() helper\n    - DEBUG: pollers/fd: add thread id suffix to per-thread memory areas name hints\n    - DOC: config: fix aes_gcm_enc() description text\n    - BUILD: trace: fix warning on null dereference\n    - MEDIUM: config: prevent communication with privileged ports\n    - MAJOR: config: prevent QUIC with clients privileged port by default\n    - BUG/MINOR: quic: adjust restriction for stateless reset emission\n    - MINOR: quic: clarify doc for quic_recv()\n    - MINOR: server: generalize sni expr parsing\n    - MINOR: server: define pool-conn-name keyword\n    - MEDIUM: connection: use pool-conn-name instead of sni on reuse\n    - BUG/MINOR: rhttp: initialize session origin after preconnect reversal\n    - BUG/MEDIUM: server/dns: preserve server's port upon resolution timeout or error\n    - BUG/MINOR: http-htx: Support default path during scheme based normalization\n    - BUG/MINOR: server: Don't reset resolver options on a new default-server line\n    - DOC: quic: specify that connection migration is not supported\n    - DOC: config: fix incorrect section reference about custom log format\n    - DOC: config: uniformize the naming and description of custom log format args\n    - DOC: config: clarify the fact that custom log format is not just for logging\n    - REGTESTS: acl_cli_spaces: avoid a warning caused by undefined logs\n\n2024/05/18 : 3.0-dev12\n    - CI: drop asan.log umbrella completely\n    - BUG/MINOR: log: fix leak in add_sample_to_logformat_list() error path\n    - BUG/MINOR: log: smp_rgs array issues with inherited global log directives\n    - MINOR: rhttp: Don't require SSL when attach-srv name parsing\n    - REGTESTS: ssl: be more verbose with ocsp_compat_check.vtc\n    - DOC: Update UUID references to RFC 9562\n    - MINOR: hlua: add hlua_nb_instruction getter\n    - MEDIUM: hlua: take nbthread into account in hlua_get_nb_instruction()\n    - BUG/MEDIUM: server: clear purgeable conns before server deletion\n    - BUG/MINOR: mux-quic: fix error code on shutdown for non HTTP/3\n    - BUG/MINOR: qpack: fix error code reported on QPACK decoding failure\n    - BUG/MEDIUM: htx: mark htx_sl as packed since it may be realigned\n    - BUG/MEDIUM: stick-tables: properly mark stktable_data as packed\n    - SCRIPTS: run-regtests: fix a few occurrences of extended regexes\n    - BUG/MINOR: ssl_sock: fix xprt_set_used() to properly clear the TASK_F_USR1 bit\n    - MINOR: dynbuf: provide a b_dequeue() variant for multi-thread\n    - BUG/MEDIUM: muxes: enforce buf_wait check in takeover()\n    - BUG/MINOR: h1: Check authority for non-CONNECT methods only if a scheme is found\n    - BUG/MEDIUM: h1: Reject CONNECT request if the target has a scheme\n    - BUG/MAJOR: h1: Be stricter on request target validation during message parsing\n    - MINOR: qpack: prepare error renaming\n    - MINOR: h3/qpack: adjust naming for errors\n    - MINOR: h3: adjust error reporting on sending\n    - MINOR: h3: adjust error reporting on receive\n    - MINOR: mux-quic: support glitches\n    - MINOR: h3: report glitch on RFC violation\n    - BUILD: stick-tables: better mark the stktable_data as 32-bit aligned\n    - MINOR: ssl: rename tune.ssl.ocsp-update.mode in ocsp-update.mode\n    - REGTESTS: update the ocsp-update tests\n    - BUILD: stats: remove non portable getline() usage\n    - MEDIUM: ssl: add ocsp-update.mindelay and ocsp-update.maxdelay\n    - BUILD: log: get rid of non-portable strnlen() func\n    - BUG/MEDIUM: fd: prevent memory waste in fdtab array\n    - CLEANUP: compat: make the MIN/MAX macros more reliable\n    - Revert: MEDIUM: evports: permit to report multiple events at once\"\n    - BUG/MINOR: stats: Don't state the 303 redirect response is chunked\n    - MINOR: mux-h1: Add a flag to ignore the request payload\n    - REORG: mux-h1: Group H1S_F_BODYLESS_* flags\n    - CLEANUP: mux-h1: Remove unused H1S_F_ERROR_MASK mask value\n    - MEDIUM: mux-h1: Support C-L/T-E header suppressions when sending messages\n    - MINOR: ssl: ckch_store_new_load_files_conf() loads filenames from ckch_conf\n    - MEDIUM: ssl/crtlist: loading crt-store keywords from a crt-list\n    - CLEANUP: ssl/ocsp: remove the deprecated parsing code for \"ocsp-update\"\n    - MINOR: ssl: pass ckch_store instead of ckch_data to ssl_sock_load_ocsp()\n    - MEDIUM: ssl: ckch_conf_parse() uses -1/0/1 for off/default/on\n    - MINOR: ssl: handle PARSE_TYPE_INT and PARSE_TYPE_ONOFF in ckch_store_load_files()\n    - MINOR: ssl/ocsp: use 'ocsp-update' in crt-store\n    - MINOR: ssl: ckch_conf_clean() utility function for ckch_conf\n    - MEDIUM: ssl: add ocsp-update.disable global option\n    - MEDIUM: ssl/cli: handle crt-store keywords in crt-list over the CLI\n    - MINOR: ssl: ckch_conf_cmp() compare multiple ckch_conf structures\n    - MEDIUM: ssl: temporarily load files by detecting their presence in crt-store\n    - REGTESTS: ocsp-update: change the reg-test to support the new crt-store mode\n    - DOC: capabilities: fix chapter header rendering\n\n2024/05/10 : 3.0-dev11\n    - BUILD: clock: improve check for pthread_getcpuclockid()\n    - CI: add Illumos scheduled workflow\n    - CI: netbsd: limit scheduled workflow to parent repo only\n    - OPTIM: log: resolve logformat options during postparsing\n    - BUG/MINOR: haproxy: only tid 0 must not sleep if got signal\n    - REGTEST: add tests for acl() sample fetch\n    - BUG/MINOR: acl: support built-in ACLs with acl() sample\n    - BUG/MINOR: cfgparse: use curproxy global var from config post validation\n    - MEDIUM: stconn/muxes: Add an abort reason for SE shutdowns on muxes\n    - MINOR: mux-h2: Set the SE abort reason when a RST_STREAM frame is received\n    - MEDIUM: mux-h2: Forward h2 client cancellations to h2 servers\n    - MINOR: mux-quic: Set tha SE abort reason when a STOP_SENDING frame is received\n    - MINOR: stconn: Add samples to retrieve about stream aborts\n    - MINOR: mux-quic: Add .ctl callback function to get info about a mux connection\n    - MINOR: muxes: Add ctl commands to get info on streams for a connection\n    - MINOR: connection: Add samples to retrieve info on streams for a connection\n    - BUG/MEDIUM: log/ring: broken syslog octet counting\n    - BUG/MEDIUM: mux-quic: fix crash on STOP_SENDING received without SD\n    - DOC: lua: fix filters.txt file location\n    - MINOR: dynbuf: pass a criticality argument to b_alloc()\n    - MINOR: dynbuf: add functions to help queue/requeue buffer_wait fields\n    - MINOR: dynbuf: use the b_queue()/b_requeue() functions everywhere\n    - MEDIUM: dynbuf: make the buffer_wq an array of list heads\n    - CLEANUP: tinfo: better align fields in thread_ctx\n    - MINOR: dynbuf: provide a b_dequeue() function to detach a bw from the queue\n    - MEDIUM: dynbuf: generalize the use of b_dequeue() to detach buffer_wait\n    - MEDIUM: dynbuf/stream: re-enable queueing upon failed buffer allocation\n    - MEDIUM: dynbuf/stream: do not allocate the buffers in the callback\n    - MEDIUM: applet: make appctx_buf_available() only wake the applet up, not allocate\n    - MINOR: applet: set the blocking flag in the buffer allocation function\n    - MINOR: applet: adjust the allocation criticity based on the requested buffer\n    - MINOR: dynbuf/mux-h1: use different criticalities for buffer allocations\n    - MEDIUM: dynbuf/mux-h1: do not allocate the buffers in the callback\n    - MEDIUM: dynbuf: refrain from offering a buffer if more critical ones are waiting\n    - MINOR: stconn: report that a buffer allocation succeeded\n    - MINOR: stream: report that a buffer allocation succeeded\n    - MINOR: applet: report about buffer allocation success\n    - MINOR: mux-h1: report that a buffer allocation succeeded\n    - MEDIUM: stream: allocate without queuing when retrying\n    - MEDIUM: channel: allocate without queuing when retrying\n    - MEDIUM: mux-h1: allocate without queuing when retrying\n    - MEDIUM: dynbuf: implement emergency buffers\n    - MEDIUM: dynbuf: use emergency buffers upon failed memory allocations\n\n2024/05/04 : 3.0-dev10\n    - BUG/MEDIUM: cache: Vary not working properly on anything other than accept-encoding\n    - REGTESTS: cache: Add test on 'vary' other than accept-encoding\n    - BUG/MINOR: stats: replace objt_* by __objt_* macros\n    - CLEANUP: tools/cbor: rename cbor_encode_ctx struct members\n    - MINOR: log/cbor: _lf_cbor_encode_byte() explicitly requires non-NULL ctx\n    - BUG/MINOR: log: fix global lf_expr node options behavior\n    - CLEANUP: log: add a macro to know if a lf_node is configurable\n    - MINOR: httpclient: allow to use absolute URI with new flag HC_F_HTTPROXY\n    - MINOR: ssl: introduce ocsp_update.http_proxy for ocsp-update keyword\n    - BUG/MINOR: log/encode: consider global options for key encoding\n    - BUG/MINOR: log/encode: fix potential NULL-dereference in LOGCHAR()\n    - BUG/MINOR: log: fix global lf_expr node options behavior (2nd try)\n    - MINOR: log/cbor: _lf_cbor_encode_byte() explicitly requires non-NULL ctx (again)\n    - BUG/MEDIUM: log: don't ignore disabled node's options\n    - BUG/MINOR: stconn: don't wake up an applet waiting on buffer allocation\n    - MINOR: sock: rename sock to sock_fd in sock_create_server_socket\n    - MEDIUM: proto_uxst: take in account server namespace\n    - MEIDUM: unix sock: use my_socketat to create bind socket\n    - MINOR: sock_set_mark: take sock family in account\n    - MEDIUM: proto: make common fd checks in sock_create_server_socket\n    - MINOR: sock: add EPERM case in sock_handle_system_err\n    - MINOR: capabilities: add cap_sys_admin support\n    - CLEANUP: ssl: clean the includes in ssl_ocsp.c\n    - CLEANUP: ssl: move the global ocsp-update options parsing to ssl_ocsp.c\n    - MINOR: stats: fix visual alignment for stat_cols_px definition\n    - MINOR: stats: convert req_tot as generic column\n    - MINOR: stats: prepare stats-file support for values other than FN_COUNTER\n    - MINOR: counters: move freq-ctr from proxy/server into counters struct\n    - MINOR: stats: support rate in stats-file\n    - MINOR: stats: convert rate as generic column for proxy stats\n    - MINOR: counters: move last_change into counters struct\n    - MINOR: stats: support age in stats-file\n    - MINOR: stats: convert age as generic column for proxy stat\n    - CLEANUP: ssl: rename new_ckch_store_load_files_path() to ckch_store_new_load_files_path()\n    - MINOR: ssl: rename ocsp_update.http_proxy into ocsp-update.httpproxy\n    - REORG: stats: define stats-proxy source module\n    - MINOR: stats: extract proxy clear-counter in a dedicated function\n    - REGTESTS: stats: add test stats-file counters preload\n    - CI: netbsd: adjust packages after NetBSD-10 released\n    - CLEANUP: assorted typo fixes in the code and comments\n    - REGTESTS: replace REQUIRE_VERSION by version_atleast\n    - MEDIUM: log: optimizing tmp->type handling in sess_build_logline()\n    - BUG/MINOR: log: prevent double spaces emission in sess_build_logline()\n    - OPTIM: log: declare empty buffer as global variable\n    - OPTIM: log: use thread local lf_buildctx to stop pushing it on the stack\n    - OPTIM: log: use lf_buildctx's buffer instead of temporary stack buffers\n    - OPTIM: log: speedup date printing in sess_build_logline() when no encoding is used\n\n2024/04/27 : 3.0-dev9\n    - BUILD: ssl: use %zd for sizeof() in ssl_ckch.c\n    - MINOR: backend: use be_counters for health down accounting\n    - BUG/MINOR: backend: use cum_sess counters instead of cum_conn\n    - BUG/MINOR: stats: fix stot metric for listeners\n    - REGTESTS: use -dI for insecure fork by default in the regtest scripts\n    - MINOR: stats: rename proxy stats\n    - MINOR: stats: rename ambiguous stat_l and stat_count\n    - MINOR: stats: rename info stats\n    - MINOR: stats: use stricter naming stats/field/line\n    - MINOR: stats: use STAT_F_* prefix for flags\n    - BUG/MEDIUM: applet: Let's applets decide if they have more data to deliver\n    - BUILD: stick-tables: silence build warnings when threads are disabled\n    - MINOR: tools: Rename `ha_generate_uuid` to `ha_generate_uuid_v4`\n    - MINOR: Add `ha_generate_uuid_v7`\n    - MINOR: Add support for UUIDv7 to the `uuid` sample fetch\n    - MEDIUM: shctx: Naming shared memory context\n    - BUG/MINOR: h1: fix detection of upper bytes in the URI\n    - MINOR: intops: add a pair of functions to check multi-byte ranges\n    - TESTS: add a unit test for the multi-byte range checks\n    - CLEANUP: h1: make use of the multi-byte matching functions\n    - REGTESTS: ssl: Remove \"sleep\" calls from ocsp auto update test\n    - BUG/MEDIUM: peers: Automatically start to learn on local peer\n    - BUG/MEDIUM: peers: Reprocess peer state after all session shutdowns\n    - MINOR: peers: Remove unused PEERS_F_RESYNC_REQUESTED flag\n    - MINOR: peers: Don't set TEACH flags on a peer from the sync task\n    - MINOR: peers: Use a peer flag to block the applet waiting ack of the sync task\n    - BUG/MEDIUM: peers: Wait for sync task ack when a resynchro is finished\n    - MINOR: peers: Remove unused PEERS_F_RESYNC_PROCESS flag\n    - MINOR: applet: Add a function to know the side where an applet was created\n    - MEDIUM: peers: Simplify the peer flags dealing with the connection state\n    - MEDIUM: peers: Use true states for the peer applets as seen from outside\n    - MEDIUM: peers: Use true states for the learn state of a peer\n    - MINOR: peers: Start learning for local peer before receiving messages\n    - MINOR: peers: Rename PEERS_F_TEACH_COMPLETE to PEERS_F_LOCAL_TEACH_COMPLETE\n    - MINOR: peers: Reorder and slightly rename PEER flags\n    - MINOR: peers: Reorder and rename PEERS flags\n    - REORG: peers: Move peer and peers flags in the corresponding header file\n    - DEV: flags/peers: Decode PEER and PEERS flags\n    - MINOR: peers: Add comment on processing functions of the sync task\n    - MINOR: peers: Use a static variable to wait a resync on reload\n    - BUG/MEDIUM: peers: Use atomic operations on peers flags when necessary\n    - REORG: peers: Rename all occurrences to 'ps' variable\n    - BUG/MINOR: peers: Don't wait for a remote resync if there no remote peer\n    - MINOR: stats: update ambiguous \"metrics\" naming to \"stat_cols\"\n    - MINOR: stats: introduce a more expressive stat definition method\n    - MINOR: stats: implement automatic metric generation from stat_col\n    - MINOR: stats: hide some columns in output\n    - MEDIUM: stats: convert counters to new column definition\n    - MINOR: stats: define stats-file output format support\n    - MEDIUM: stats: implement dump stats-file CLI\n    - MINOR: ist: define iststrip() new function\n    - MINOR: guid: define guid_is_valid_fmt()\n    - MINOR: stats: apply stats-file on process startup\n    - MINOR: stats: parse header lines from stats-file\n    - MINOR: stats: parse values from stats-file\n    - MEDIUM: stats: define stats-file keyword\n    - BUG/MINOR: mworker: reintroduce way to disable seamless reload with -x /dev/null\n    - CLEANUP: log: remove unused checks for encode_{chunk,string}\n    - MINOR: log: store lf_expr nodes inside substruct\n    - MINOR: log: global lf_expr node options\n    - CLEANUP: log: simplify complex values usages in sess_build_logline()\n    - MINOR: log: skip custom logformat_node name if empty\n    - MINOR: log: add lf_int() wrapper to print integers\n    - MINOR: log: add lf_rawtext{_len}() functions\n    - MEDIUM: log: pass date strings to lf_rawtext()\n    - MEDIUM: log: write raw strings using lf_rawtext()\n    - MEDIUM: log: use lf_rawtext for lf_ip() and lf_port() hex strings\n    - MINOR: log: explicitly handle %ts and %tsc as text strings\n    - MINOR: log: use LOG_VARTEXT_{START,END} to enclose text strings\n    - MINOR: log: make all lf_* sess build helper static\n    - MINOR: log: merge lf_encode_string() and lf_encode_chunk() logic\n    - MEDIUM: log: lf_* build helpers now take a ctx argument\n    - MINOR: log: expose node typecast in lf_buildctx struct\n    - MINOR: log: postpone conversion for sample expressions in sess_build_logline()\n    - MINOR: log: add LOG_OPT_NONE flag\n    - MINOR: log: add no_escape_map to bypass escape with _lf_encode_bytes()\n    - MINOR: log: add +bin logformat node option\n    - MINOR: log: add +json encoding option\n    - MINOR: tools: add cbor encode helpers\n    - MINOR: log: add +cbor encoding option\n    - MINOR: log: support true cbor binary encoding\n    - CLEANUP: dynbuf: move the reserve and limit parsers to dynbuf.c\n    - MINOR: list: add a macro to detect that a list contains at most one element\n    - MINOR: cli/wait: rename the condition \"srv-unused\" to \"srv-removable\"\n\n2024/04/19 : 3.0-dev8\n    - BUG/MINOR: cli: Don't warn about a too big command for incomplete commands\n    - BUG/MINOR: listener: always assign distinct IDs to shards\n    - BUG/MINOR: log: fix lf_text_len() truncate inconsistency\n    - BUG/MINOR: tools/log: invalid encode_{chunk,string} usage\n    - BUG/MINOR: log: invalid snprintf() usage in sess_build_logline()\n    - CLEANUP: log: lf_text_len() returns a pointer not an integer\n    - MINOR: quic: simplify qc_send_hdshk_pkts() return\n    - MINOR: quic: uniformize sending methods for handshake\n    - MINOR: quic: improve sending API on retransmit\n    - MINOR: quic: use qc_send_hdshk_pkts() in handshake IO cb\n    - MEDIUM: quic: remove duplicate hdshk/app send functions\n    - OPTIM: quic: do not call qc_send() if nothing to emit\n    - OPTIM: quic: do not call qc_prep_pkts() if everything sent\n    - BUG/MEDIUM: http-ana: Deliver 502 on keep-alive for fressh server connection\n    - BUG/MINOR: http-ana: Fix TX_L7_RETRY and TX_D_L7_RETRY values\n    - BUILD: makefile: warn about unknown USE_* variables\n    - BUILD: makefile: support USE_xxx=0 as well\n    - BUG/MINOR: guid: fix crash on invalid guid name\n    - BUILD: atomic: fix peers build regression on gcc < 4.7 after recent changes\n    - BUG/MINOR: debug: make sure DEBUG_STRICT=0 does work as documented\n    - BUILD: cache: fix non-inline vs inline declaration mismatch to silence a warning\n    - BUILD: debug: make DEBUG_STRICT=1 the default\n    - BUILD: pools: make DEBUG_MEMORY_POOLS=1 the default option\n    - CI: update the build options to get rid of unneeded DEBUG options\n    - BUILD: makefile: get rid of the config CFLAGS variable\n    - BUILD: makefile: allow to use CFLAGS to append build options\n    - BUILD: makefile: drop the SMALL_OPTS settings\n    - BUILD: makefile: move -O2 from CPU_CFLAGS to OPT_CFLAGS\n    - BUILD: makefile: get rid of the CPU variable\n    - BUILD: makefile: drop the ARCH variable and better document ARCH_FLAGS\n    - BUILD: makefile: extract ARCH_FLAGS out of LDFLAGS\n    - BUILD: makefile: move the fwrapv option to STD_CFLAGS\n    - BUILD: makefile: make the ERR variable also support 0\n    - BUILD: makefile: add FAILFAST to select the -Wfatal-errors behavior\n    - BUILD: makefile: extract -Werror/-Wfatal-errors from automatic CFLAGS\n    - BUILD: makefile: split WARN_CFLAGS from SPEC_CFLAGS\n    - BUILD: makefile: rename SPEC_CFLAGS to NOWARN_CFLAGS\n    - BUILD: makefile: do not pass warnings to VERBOSE_CFLAGS\n    - BUILD: makefile: also drop DEBUG_CFLAGS\n    - CLEANUP: makefile: make the output of the \"opts\" target more readable\n    - DOC: install: clarify the build process by splitting it into subsections\n    - BUG/MINOR: server: fix slowstart behavior\n    - BUG/MEDIUM: cache/stats: Handle inbuf allocation failure in the I/O handler\n    - MINOR: ssl: add the section parser for 'crt-store'\n    - DOC: configuration: Add 3.12 Certificate Storage\n    - REGTESTS: ssl: test simple case of crt-store\n    - MINOR: ssl: rename ckchs_load_cert_file to new_ckch_store_load_files_path\n    - MINOR: ssl/crtlist: alloc ssl_conf only when a valid keyword is found\n    - BUG/MEDIUM: stick-tables: fix the task's next expiration date\n    - CLEANUP: stick-tables: always respect the to_batch limit when trashing\n    - BUG/MEDIUM: peers/trace: fix crash when listing event types\n    - BUG/MAJOR: stick-tables: fix race with peers in entry expiration\n    - DEBUG: pool: improve decoding of corrupted pools\n    - REORG: pool: move the area dump with symbol resolution to tools.c\n    - DEBUG: pools: report the data around the offending area in case of mismatch\n    - MINOR: listener/protocol: add proto name in alerts\n    - MINOR: proto_quic: add proto name in alert\n    - BUG/MINOR: lru: fix the standalone test case for invalid revision\n    - DOC: management: fix typos\n    - CI: revert kernel addr randomization introduced in 3a0fc864\n    - MINOR: ring: clarify the usage of ring_size() and add ring_allocated_size()\n    - BUG/MAJOR: ring: use the correct size to reallocate startup_logs\n    - MINOR: ring: always check that the old ring fits in the new one in ring_dup()\n    - CLEANUP: ssl: remove dead code in cfg_parse_crtstore()\n    - MINOR: ssl: supports crt-base in crt-store\n    - MINOR: ssl: 'key-base' allows to load a 'key' from a specific path\n    - MINOR: net_helper: Add support for floats/doubles.\n    - BUG/MEDIUM: grpc: Fix several unaligned 32/64 bits accesses\n    - MINOR: peers: Split resync process function to separate running/stopping states\n    - MINOR: peers: Add 2 peer flags about the peer learn status\n    - MINOR: peers: Add flags to report the peer state to the resync task\n    - MINOR: peers: sligthly adapt part processing the stopping signal\n    - MINOR: peers: Add functions to commit peer changes from the resync task\n    - BUG/MINOR: peers: Report a resync was explicitly requested from a thread-safe manner\n    - BUG/MAJOR: peers: Update peers section state from a thread-safe manner\n    - MEDIUM: peers: Only lock one peer at a time in the sync process function\n    - MINOR: peer: Restore previous peer flags value to ease debugging\n    - BUG/MEDIUM: stconn: Don't forward channel data if input data must be filtered\n    - BUILD: cache: fix a build warning with gcc < 7\n    - BUILD: xxhash: silence a build warning on Solaris + gcc-5.5\n    - CI: reduce ASAN log redirection umbrella size\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUG/MEDIUM: evports: do not clear returned events list on signal\n    - MEDIUM: evports: permit to report multiple events at once\n    - MEDIUM: ssl: support aliases in crt-store\n    - BUG/MINOR: ssl: check on forbidden character on wrong value\n    - BUG/MINOR: ssl: fix crt-store load parsing\n    - BUG/MEDIUM: applet: Fix applet API to put input data in a buffer\n    - BUG/MEDIUM: spoe: Always retry when an applet fails to send a frame\n    - BUG/MEDIUM: peers: Fix exit condition when max-updates-at-once is reached\n    - BUILD: linuxcap: Properly declare prepare_caps_from_permitted_set()\n    - BUG/MEDIUM: peers: fix localpeer regression with 'bind+server' config style\n    - MINOR: peers: stop relying on srv->addr to find peer port\n    - MEDIUM: ssl: support a named crt-store section\n    - MINOR: stats: remove implicit static trash_chunk usage\n    - REORG: stats: extract HTML related functions\n    - REORG: stats: extract JSON related functions\n    - MEDIUM: ssl: crt-base and key-base local keywords for crt-store\n    - MINOR: stats: Get the right prototype for stats_dump_html_end().\n    - MAJOR: ssl: use the msg callback mecanism for backend connections\n    - MINOR: ssl: implement keylog fetches for backend connections\n    - BUG/MINOR: stconn: Fix sc_mux_strm() return value\n    - MINOR: mux-pt: Test conn flags instead of sedesc ones to perform a full close\n    - MINOR: stconn/connection: Move shut modes at the SE descriptor level\n    - MINOR: stconn: Rewrite shutdown functions to simplify the switch statements\n    - MEDIUM: stconn: Use only one SC function to shut connection endpoints\n    - MEDIUM: stconn: Explicitly pass shut modes to shut applet endpoints\n    - MEDIUM: stconn: Use one function to shut connection and applet endpoints\n    - MEDIUM: muxes: Use one callback function to shut a mux stream\n    - BUG/MINOR: sock: handle a weird condition with connect()\n    - BUG/MINOR: fd: my_closefrom() on Linux could skip contiguous series of sockets\n    - BUG/MEDIUM: peers: Don't set PEERS_F_RESYNC_PROCESS flag on a peer\n    - BUG/MEDIUM: peers: Fix state transitions of a peer\n    - MINOR: init: use RLIMIT_DATA instead of RLIMIT_AS\n    - CI: modernize macos matrix\n\n2024/04/06 : 3.0-dev7\n    - BUG/MINOR: ssl: Wrong ocsp-update \"incompatibility\" error message\n    - BUG/MINOR: ssl: Detect more 'ocsp-update' incompatibilities\n    - MEDIUM: ssl: Add 'tune.ssl.ocsp-update.mode' global option\n    - REGTESTS: ssl: Add OCSP update compatibility tests\n    - REGTESTS: ssl: Add functional test for global ocsp-update option\n    - BUG/MINOR: server: reject enabled for dynamic server\n    - BUG/MINOR: server: fix persistence cookie for dynamic servers\n    - MINOR: server: allow cookie for dynamic servers\n    - REGTESTS: Fix script about OCSP update compatibility tests\n    - BUG/MINOR: cli: Report an error to user if command or payload is too big\n    - MINOR: sc_strm: Add generic version to perform sync receives and sends\n    - MEDIUM: stream: Use generic version to perform sync receives and sends\n    - MEDIUM: buf: Add b_getline() and b_getdelim() functions\n    - MEDIUM: applet: Handle applets with their own buffers in put functions\n    - MEDIUM: cli/applet: Stop to test opposite SC in I/O handler of CLI commands\n    - MINOR: applet: Always use applet API to set appctx flags\n    - BUG/MEDIUM: applet: State appctx have more data if its EOI/EOS/ERROR flag is set\n    - MAJOR: cli: Update the CLI applet to handle its own buffers\n    - MINOR: applet: Let's applets .snd_buf function deal with full input buffers\n    - MINOR: stconn: Add a connection flag to notify sending data are the last ones\n    - MAJOR: cli: Use a custom .snd_buf function to only copy the current command\n    - DOC: config: balance 'first' not usable in LOG mode\n    - BUG/MINOR: log/balance: detect if user tries to use unsupported algo\n    - MINOR: lbprm: implement true \"sticky\" balance algo\n    - MEDIUM: log/balance: leverage lbprm api for log load-balancing\n    - BUG/BUILD: debug: fix unused variable error\n    - MEDIUM: lb-chash: Deterministic node hashes based on server address\n    - BUG/MEDIUM: stick-tables: fix a small remaining race in expiration task\n    - REGTESTS: Do not use REQUIRE_VERSION for HAProxy 2.5+ (4)\n    - REGTESTS: Remove REQUIRE_VERSION=1.9 from all tests (2)\n    - CLEANUP: Reapply ist.cocci (3)\n    - CLEANUP: Reapply strcmp.cocci (2)\n    - CLEANUP: Reapply xalloc_cast.cocci\n    - CLEANUP: Reapply ha_free.cocci\n    - CI: vtest: show coredumps if any\n    - REGTESTS: ssl: disable ssl/ocsp_auto_update.vtc\n    - BUG/MINOR: backend: properly handle redispatch 0\n    - MINOR: quic: HyStart++ implementation (RFC 9406)\n    - BUG/MEDIUM: stconn: Don't forward shutdown to SE if iobuf is not empty\n    - BUG/MEDIUM: stick-table: use the update lock when reading tables from peers\n    - BUG/MAJOR: applet: fix a MIN vs MAX usage in appctx_raw_rcv_buf()\n    - OPTIM: peers: avoid the locking dance around peer_send_teach_process_msgs()\n    - BUILD: quic: 32 bits compilation issue (QUIC_MIN() usage)\n    - BUG/MEDIUM: server/lbprm: fix crash in _srv_set_inetaddr_port()\n    - MEDIUM: mworker: get rid of libsystemd\n    - BUILD: systemd: fix build error on non-systemd systems with USE_SYSTEMD=1\n    - BUG/MINOR: bwlim/config: fix missing '\\n' after error messages\n    - MINOR: stick-tables: mark the seen stksess with a flag \"seen\"\n    - OPTIM: stick-tables: check the stksess without taking the read lock\n    - MAJOR: stktable: split the keys across multiple shards to reduce contention\n    - CI: extend Fedora Rawhide, add m32 mode\n    - BUG/MINOR: stick-tables: Missing stick-table key nullity check\n    - BUILD: systemd: enable USE_SYSTEMD by default with TARGET=linux-glibc\n    - MINOR: systemd: Include MONOTONIC_USEC field in RELOADING=1 message\n    - BUG/MINOR: proxy: fix logformat expression leak in use_backend rules\n    - MEDIUM: log: rename logformat var to logformat tag\n    - MINOR: log: expose logformat_tag struct\n    - MEDIUM: log: carry tag context in logformat node\n    - MEDIUM: tree-wide: add logformat expressions wrapper\n    - MINOR: proxy: add PR_FL_CHECKED flag\n    - MAJOR: log: implement proper postparsing for logformat expressions\n    - MEDIUM: log: add compiling logic to logformat expressions\n    - MEDIUM: proxy/log: leverage lf_expr API for logformat preparsing\n    - MINOR: guid: introduce global UID module\n    - MINOR: guid: restrict guid format\n    - MINOR: proxy: implement GUID support\n    - MINOR: server: implement GUID support\n    - MINOR: listener: implement GUID support\n    - DOC: configuration: grammar fixes for strict-sni\n    - BUG/MINOR: init: relax LSTCHK_NETADM checks for non root\n    - MEDIUM: capabilities: check process capabilities sets\n    - CLEANUP: global: remove LSTCHK_CAP_BIND\n    - BUG/MEDIUM: quic: don't blindly rely on unaligned accesses\n\n2024/03/26 : 3.0-dev6\n    - MINOR: mux-h2: always use h2c_report_glitch()\n    - MEDIUM: mux-h2: allow to set the glitches threshold to kill a connection\n    - MINOR: quic: simplify rescheduling for handshake\n    - MINOR: quic: remove qc_treat_rx_crypto_frms()\n    - DOC: configuration: clarify ciphersuites usage (V2)\n    - MINOR: tools: use public interface for FreeBSD get_exec_path()\n    - BUG/MINOR: ssl: fix possible ctx memory leak in sample_conv_aes_gcm()\n    - BUG/MINOR: ssl: do not set the aead_tag flags in sample_conv_aes_gcm()\n    - BUG/MINOR: server: fix first server template not being indexed\n    - MEDIUM: ssl: initialize the SSL stack explicitely\n    - MEDIUM: ssl: allow to change the OpenSSL security level from global section\n    - CLEANUP: ssl: remove useless #ifdef in openssl-compat.h\n    - CI: github: add -DDEBUG_LIST to the default builds\n    - BUG/MINOR: hlua: segfault when loading the same filter from different contexts\n    - BUG/MINOR: hlua: missing lock in hlua_filter_new()\n    - BUG/MINOR: hlua: fix missing lock in hlua_filter_delete()\n    - DEBUG: lua: precisely identify if stream is stuck inside lua or not\n    - MINOR: hlua: use accessors for stream hlua ctx\n    - BUG/MEDIUM: hlua: streams don't support mixing lua-load with lua-load-per-thread (2nd try)\n    - MINOR: debug: enable insecure fork on the command line\n    - CI: github: add -dI to haproxy arguments\n    - BUG/MINOR: listener: Wake proxy's mngmt task up if necessary on session release\n    - BUG/MINOR: listener: Don't schedule frontend without task in listener_release()\n    - MINOR: session: rename private conns elements\n    - BUG/MAJOR: server: do not delete srv referenced by session\n    - BUG/MEDIUM: spoe: Don't rely on stream's expiration to detect processing timeout\n    - BUG/MINOR: spoe: Be sure to be able to quickly close IDLE applets on soft-stop\n    - MAJOR: spoe: Deprecate the SPOE filter\n    - MINOR: cfgparse: Add a global option to expose deprecated directives\n    - MINOR: spoe: Add SPOE filters in the exposed deprecated directives\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CI: temporarily adjust kernel entropy to work with ASAN/clang\n    - BUG/MEDIUM: spoe: Return an invalid frame on recv if size is too small\n    - BUG/MINOR: session: ensure conn owner is set after insert into session\n    - BUG/MEDIUM: http_ana: ignore NTLM for reuse aggressive/always and no H1\n    - BUG/MAJOR: connection: fix server used_conns with H2 + reuse safe\n    - BUG/MAJOR: ocsp: Separate refcount per instance and per store\n    - REGTESTS: ssl: Add OCSP related tests\n    - BUG/MEDIUM: ssl: Fix crash when calling \"update ssl ocsp-response\" when an update is ongoing\n    - BUG/MEDIUM: ssl: Fix crash in ocsp-update log function\n    - MEDIUM: ssl: Change output of ocsp-update log\n    - MINOR: ssl: Change level of ocsp-update logs\n    - CLEANUP: ssl: Remove undocumented ocsp fetches\n    - REGTESTS: ssl: Add checks on ocsp-update log format\n    - MINOR: connection: implement conn_release()\n    - MINOR: connection: extend takeover with release option\n    - MEDIUM: server: close idle conn on server deletion\n    - MEDIUM: mux: prepare for takeover on private connections\n    - MEDIUM: server: close private idle connection before server deletion\n    - BUG/MINOR: mux-quic: close all QCS before freeing QCC tasklet\n    - BUG/MEDIUM: mux-fcgi: Properly handle EOM flag on end-of-trailers HTX block\n    - BUILD: server: fix build regression on old compilers (<= gcc-4.4)\n    - OPTIM: http_ext: avoid useless copy in http_7239_extract_{ipv4,ipv6}\n    - MINOR: debug: add \"debug dev trace\" to flood with traces\n    - MINOR: atomic: add a read-specific variant of __ha_cpu_relax()\n    - MINOR: applet: add new function applet_append_line()\n    - MINOR: log/applet: add new function syslog_applet_append_event()\n    - MEDIUM: ring/sink: use applet_append_line()/syslog_applet_append_event() for readers\n    - REORG: dns/ring: split the ring between the generic one and the DNS one\n    - MEDIUM: ring: move the ring reader code to ring_dispatch_messages()\n    - MEDIUM: sink: move the generic ring forwarder code use ring_dispatch_messages()\n    - MEDIUM: log/sink: make the log forwarder code use ring_dispatch_messages()\n    - MINOR: buf: add b_add_ofs() to add a count to an absolute position\n    - MINOR: buf: add b_rel_ofs() to turn an absolute offset into a relative one\n    - MINOR: buf: add b_putblk_ofs() to copy a block at a specific position\n    - MINOR: buf: add b_getblk_ofs() that works relative to area and not head\n    - MINOR: ring: make the ring reader use only absolute offsets\n    - MINOR: ring: reserve one special value for the readers count\n    - MINOR: vecpair: add new vector pair based data manipulation mechanisms\n    - MINOR: vecpair: add necessary functions to use vecpairss from/to ring APIs\n    - MINOR: ring: rename totlen vs msglen in ring_write()\n    - MINOR: ring: add ring_data() to report the amount of data in a ring\n    - MINOR: ring: add ring_size() to return the ring's size\n    - MINOR: ring: add ring_dup() to copy a ring into another one\n    - MINOR: ring: also add ring_area(), ring_head(), ring_tail()\n    - MINOR: ring: make callers use ring_data() and ring_size(), not ring->buf\n    - MINOR: errors: use ring_dup() to duplicate the startup_logs\n    - MINOR: ring: use ring_size(), ring_area(), ring_head() and ring_tail()\n    - MINOR: ring: add a flag to indicate a mapped file\n    - MAJOR: ring: insert an intermediary ring_storage level\n    - MINOR: ring: resize only under thread isolation\n    - MINOR: ring: allow to reduce a ring size\n    - MEDIUM: ring: replace the buffer API in ring_write() with the vec<->ring API\n    - MEDIUM: ring: change the ring reader to use the new vector-based API now\n    - MEDIUM: ring: remove the struct buffer from the ring\n    - MEDIUM: ring: align the head and tail fields in the ring_storage structure\n    - MINOR: ring: make the reader check the readers count before inc/dec\n    - MEDIUM: ring: lock the tail's readers counters before proceeding with the changes\n    - MEDIUM: ring: protect the reader's positions against writers\n    - MEDIUM: ring: use the topmost bit of the tail as a lock\n    - MEDIUM: move the ring's lock to only protect the readers list\n    - MEDIUM: ring: unlock the ring's tail earlier\n    - MINOR: ring: don't take the readers lock if there are no readers\n    - MEDIUM: ring/applet: turn the wait_entry list to an mt_list instead\n    - MEDIUM: ring: protect the initialization of the initial reader offset\n    - MINOR: ring: make sure ring_dispatch waits when facing a changing message\n    - MAJOR: ring: drop the now unneeded lock\n    - OPTIM: ring: don't even try to update offset when failed to read\n    - OPTIM: ring: have only one thread at a time wake up all readers\n    - MINOR: ring: keep a few frequently used pointers in the local stack\n    - MINOR: ring: add the definition of a ring waiting cell\n    - MINOR: ring: make the number of queues configurable\n    - MAJOR: ring: implement a waiting queue in front of the ring\n    - MEDIUM: ring: significant boost in the loop by checking the ring queue ptr first\n    - MEDIUM: ring: improve speed in the queue waiting loop on x86_64\n    - MINOR: ring: simplify the write loop a little bit\n    - CLEANUP: ring: further simplify the write loop\n    - MINOR: ring: it's not x86 but all non-ARMv8.1 which needs the read before OR\n    - MINOR: ring: avoid writes to cells during copy\n    - OPTIM: ring: use relaxed stores to release the threads\n    - CLEANUP: ring: use only curr_cell and not next_cell in the main write loop\n    - BUILD: ssl: fix build error on older compilers with openssl-3.2\n    - BUG/MINOR: server: 'source' interface ignored from 'default-server' directive\n    - BUG/MAJOR: ring: free the ring storage not the ring itself when using maps\n\n2024/03/09 : 3.0-dev5\n    - BUG/MEDIUM: applet: Fix HTX .rcv_buf callback function to release outbuf buffer\n    - BUG/MAJOR: ssl/ocsp: crash with ocsp when old process exit or using ocsp CLI\n    - BUG/MEDIUM: server: fix dynamic servers initial settings\n    - BUG/MINOR: ssl/cli: duplicate cleaning code in cli_parse_del_crtlist\n    - LICENSE: event_hdl: fix GPL license version\n    - LICENSE: http_ext: fix GPL license version\n    - BUG/MEDIUM: mux-h1: Fix again 0-copy forwarding of chunks with an unknown size\n    - BUG/MINOR: mux-h1: Properly report when mux is blocked during a nego\n    - MINOR: mux-h1: Move checks performed before a shutdown in a dedicated function\n    - MINOR: mux-h1: Move all stuff to detach a stream in an internal function\n    - MAJOR: mux-h1: Drain requests on client side before shut a stream down\n    - MEDIUM: htx/http-ana: No longer close connection on early HAProxy response\n    - MINOR: quic: filter show quic by address\n    - MINOR: quic: specify show quic output fields\n    - MINOR: quic: add MUX output for show quic\n    - CLEANUP: mux-h2: Fix h2s_make_data() comment about the return value\n    - DOC: configuration: clarify ciphersuites usage\n    - BUG/MINOR: config/quic: Alert about PROXY protocol use on a QUIC listener\n    - BUG/MINOR: hlua: Fix log level to the right value when set via TXN:set_loglevel\n    - MINOR: hlua: Be able to disable logging from lua\n    - BUG/MINOR: tools: seed the statistical PRNG slightly better\n    - BUG/MINOR: hlua: fix unsafe lua_tostring() usage with empty stack\n    - BUG/MINOR: hlua: don't use lua_tostring() from unprotected contexts\n    - BUG/MINOR: hlua: fix possible crash in hlua_filter_new() under load\n    - BUG/MINOR: hlua: improper lock usage in hlua_filter_callback()\n    - BUG/MINOR: hlua: improper lock usage in hlua_filter_new()\n    - BUG/MEDIUM: hlua: improper lock usage with SET_SAFE_LJMP()\n    - BUG/MAJOR: hlua: improper lock usage with hlua_ctx_resume()\n    - BUG/MINOR: hlua: don't call ha_alert() in hlua_event_subscribe()\n    - MINOR: hlua: use SEND_ERR to report errors in hlua_event_runner()\n    - CLEANUP: hlua: txn class functions may LJMP\n    - BUG/MINOR: sink: fix a race condition in the TCP log forwarding code\n    - BUILD: thread: move lock label definitions to thread-t.h\n    - BUILD: tree-wide: fix a few missing includes in a few files\n    - BUILD: buf: make b_ncat() take a const for the source\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CLEANUP: fix typo in naming for variable \"unused\"\n    - CI: run more smoke tests on config syntax to check memory related issues\n    - CI: enable monthly build only test on netbsd-9.3\n    - CI: skip scheduled builds on forks\n    - BUG/MINOR: ssl/cli: typo in new ssl crl-file CLI description\n    - BUG/MEDIUM: quic: fix connection freeze on post handshake\n    - BUG/MINOR: mux-quic: fix crash on aborting uni remote stream\n    - CLEANUP: log: fix obsolete comment for add_sample_to_logformat_list()\n    - CLEANUP: tree-wide: use proper ERR_* return values for PRE_CHECK fcts\n    - BUG/MINOR: cfgparse: report proper location for log-format-sd errors\n    - MINOR: vars: export var_set and var_unset functions\n    - MINOR: Add aes_gcm_enc converter\n    - BUG/MEDIUM: quic: fix handshake freeze under high traffic\n    - MINOR: quic: always use ncbuf for rx CRYPTO\n    - BUILD: ssl: define EVP_CTRL_AEAD_GET_TAG for older versions\n    - DOC: design: write first notes about ring-v2\n    - OPTIM: sink: try to merge \"dropped\" messages faster\n    - OPTIM: sink: drop the sink lock used to count drops\n    - DEV: haring: make haring not depend on the struct ring itself\n    - DEV: haring: split the code between ring and buffer\n    - DEV: haring: automatically use the advertised ring header size\n    - BUILD: solaris: fix compilation errors\n\n2024/02/23 : 3.0-dev4\n    - BUG/MEDIUM: ssl: Fix crash when calling \"update ssl ocsp-response\" when an update is ongoing\n    - BUG/MEDIUM: quic: Wrong K CUBIC calculation.\n    - MINOR: quic: Update K CUBIC calculation (RFC 9438)\n    - MINOR: quic: Dynamic packet reordering threshold\n    - MINOR: quic: Add a counter for reordered packets\n    - BUG/MAJOR: mux-h1: Fix zero-copy forwarding when sending chunks of unknown size\n    - MINOR: stats: Use a dedicated function to check if output is almost full\n    - BUG/MEDIUM: applet: Add a flag to state an applet is using zero-copy forwarding\n    - BUG/MEDIUM: stconn/applet: Block 0-copy forwarding if producer needs more room\n    - MINOR: applet: Remove uselelss test on SE_FL_SHR/SHW flags\n    - MEDIUM: applet: Add notion of shutdown for write for applets\n    - MINOR: cli: No longer check SC for shutdown to interrupt wait command\n    - BUG/MEDIUM: stconn: Allow expiration update when READ/WRITE event is pending\n    - BUG/MEDIUM: stconn: Don't check pending shutdown to wake an applet up\n    - CLEANUP: stconn: Move SE flags set by app layer at the end of the bitfield\n    - MINOR: stconn: Rename SE_FL_MAY_FASTFWD and reorder bitfield\n    - MINOR: stconn: Add SE flag to announce zero-copy forwarding on consumer side\n    - MINOR: muxes: Announce support for zero-copy forwarding on consumer side\n    - BUG/MAJOR: stconn: Check support for zero-copy forwarding on both sides\n    - MINOR: muxes/applet: Simplify checks on options to disable zero-copy forwarding\n    - BUG/MINOR: quic: reject unknown frame type\n    - MINOR: quic: handle all frame types on reception\n    - BUG/MINOR: quic: reject HANDSHAKE_DONE as server\n    - BUG/MINOR: qpack: reject invalid increment count decoding\n    - BUG/MINOR: qpack: reject invalid dynamic table capacity\n    - DOC/MINOR: userlists: mention solutions to high cpu with hashes\n    - DOC: quic: Missing tuning setting in \"Global parameters\"\n    - BUG/MEDIUM: applet: Immediately free appctx on early error\n    - BUG/MEDIUM: hlua: Be able to garbage collect uninitialized lua sockets\n    - BUG/MEDIUM: hlua: Don't loop if a lua socket does not consume received data\n    - BUG/MEDIUM: quic: fix transient send error with listener socket\n    - MINOR: log: custom name for logformat node\n    - MINOR: sample: add type_to_smp() helper function\n    - MINOR: log: explicit typecasting for logformat nodes\n    - MINOR: log: simplify last_isspace in sess_build_logline()\n    - MINOR: log: simplify quotes handling in sess_build_logline()\n    - MINOR: log: print metadata prefixes separately in sess_build_logline()\n    - MINOR: log: automate string array construction in sess_build_logline()\n    - DOC: quic: fix recommandation for bind on multiple address\n    - MINOR: quic: warn on bind on multiple addresses if no IP_PKTINFO support\n    - OPTIM: quic: improve slightly qc_snd_buf() internal\n    - MINOR: quic: move IP_PKTINFO on send on a dedicated function\n    - MINOR: quic: remove sendto() usage variant\n    - MINOR: quic: only use sendmsg() syscall variant\n    - BUILD: applet: fix build on some 32-bit archs\n    - BUG/MINOR: quic: initialize msg_flags before sendmsg\n    - BUG/MEDIUM: mux-h1: Don't emit 0-CRLF chunk in h1_done_ff() when iobuf is empty\n    - CLEANUP: proxy/log: remove unused proxy flag\n    - CLEANUP: log: fix process_send_log() indentation\n    - CLEANUP: log: use free_logformat_list() in parse_logformat_string()\n    - MINOR: log: add free_logformat_node() helper function\n    - BUG/MINOR: log: fix potential lf->name memory leak\n    - BUG/MINOR: ist: allocate nul byte on istdup\n    - BUG/MINOR: stats: drop srv refcount on early release\n    - BUG/MAJOR: promex: fix crash on deleted server\n    - BUG/MAJOR: server: fix stream crash due to deleted server\n    - BUG/MEDIUM: mux-quic: do not crash on qcs_destroy for connection error\n    - MINOR: cli: Remove useless loop on commands to find unescaped semi-colon\n    - BUG/MEDIUM: cli: Warn if pipelined commands are delimited by a \\n\n    - BUG/MAJOR: cli: Restore non-interactive mode behavior with pipelined commands\n    - BUG/MINOR: quic: fix output of show quic\n    - MINOR: ssl: Call callback function after loading SSL CRL data\n    - BUG/MINOR: ist: only store NUL byte on succeeded alloc\n\n2024/02/10 : 3.0-dev3\n    - DOC: configuration: clarify http-request wait-for-body\n    - BUG/MAJOR: ssl_sock: Always clear retry flags in read/write functions\n    - MINOR: h3: add traces for stream sending function\n    - BUG/MEDIUM: h3: do not crash on invalid response status code\n    - BUG/MEDIUM: qpack: allow 6xx..9xx status codes\n    - BUG/MEDIUM: quic: fix crash on invalid qc_stream_buf_free() BUG_ON\n    - CLEANUP: log: deinitialization of the log buffer in one function\n    - BUG/MINOR: h1: Don't support LF only at the end of chunks\n    - BUG/MEDIUM: h1: Don't support LF only to mark the end of a chunk size\n    - MINOR: ssl: add HAVE_SSL_0RTT constant\n    - MINOR: ssl: rename HA_OPENSSL_HAVE_0RTT_SUPPORT constant to HAVE_SSL_0RTT_QUIC\n    - MEDIUM: ssl/quic: always compile the ssl_conf.early_data test\n    - DOC: httpclient: add dedicated httpclient section\n    - BUG/MINOR: h1-htx: properly initialize the err_pos field\n    - BUG/MEDIUM: h1: always reject the NUL character in header values\n    - CLEANUP: h1: remove unused function h1_measure_trailers()\n    - BUG/MINOR: ssl/quic: fix 0RTT define\n    - MINOR: mux-quic: prepare for earlier flow control update\n    - MINOR: mux-quic: define a flow control related type\n    - MEDIUM: mux-quic: limit stream flow control on snd_buf\n    - MEDIUM: mux-quic: limit conn flow control on snd_buf\n    - MINOR: mux-quic: remove unneeded sent-offset fields\n    - MINOR: mux-quic: check fctl during STREAM frame build\n    - MAJOR: mux-quic: remove intermediary Tx buffer\n    - MEDIUM: mux-quic: simplify sending API\n    - MEDIUM: mux-quic: release Tx buf on too small room\n    - MEDIUM: mux-quic: properly handle conn Tx buf exhaustion\n    - MINOR: mux-quic: realign Tx buffer if possible\n    - CLEANUP: connection: remove obsolete comment in header file\n    - OPTIM: connection: progressive hash for conn_calculate_hash()\n    - MINOR: tcp_act: fix alphabetical ordering of tcp request content actions\n    - MINOR: tcp-act: Rename \"set-{mark,tos}\" to \"set-fc-{mark,tos}\"\n    - MINOR: hlua: Rename set_{tos, mark} to set_fc_{tos, mark}\n    - MEDIUM: tcp-act: <expr> support for set-fc-{mark,tos} actions\n    - MEDIUM: tcp-act/backend: support for set-bc-{mark,tos} actions\n    - MINOR: stats: Be able to access to registered stats modules from anywhere\n    - MEDIUM: stats: Be able to access a specific field into a stats module\n    - MINOR: promex: Add a param to override the description when a metric is dumped\n    - MINOR: promex: Add info in the promex context to dump extra counters\n    - MEDIUM: promex: Dump frontends extra counters if requested\n    - MEDIUM: promex: Dump backends extra counters if requested\n    - MEDIUM: promex: Dump servers extra counters if requested\n    - MEDIUM: promex: Dump listeners extra counters if requested\n    - DOC: promex: Add documentation about extra-counters\n    - MINOR: promex: Always limit the number of labels dumped for each metric\n    - MEDIUM: promex: Simplify the context using generic pointers for restart points\n    - MINOR: promex: Remove unsued htx parameter when a metric is dumped\n    - MEDIUM: promex: Add a registration mechanism to support modules\n    - MEDIUM: promex: Dump metrics of registered modules with a way to filter them\n    - MEDIUM: promex/stick-table: Dump stick-table metrics via a promex module\n    - MEDIUM: promex/resolvers: Dump resolvers metrics via a promex module\n    - MINOR: promex: Rename dump functions to use the right wording\n    - MINOR: promex: Always pass the final name and description to promex_dmp_ts()\n    - MEDIUM: promex: Add support for filters on metric names\n    - REGTESTS: promex: Adapt script to be less verbose\n    - MINOR: compiler: add a new DO_NOT_FOLD() macro to prevent code folding\n    - MINOR: debug: make sure calls to ha_crash_now() are never merged\n    - MINOR: debug: make ABORT_NOW() store the caller's line number when using abort\n    - BUG/MINOR: diag: always show the version before dumping a diag warning\n    - BUG/MINOR: diag: run the final diags before quitting when using -c\n    - MINOR: acl: add extra diagnostics about suspicious string patterns\n    - BUG/MINOR: quic: Wrong ack ranges handling when reaching the limit.\n    - BUILD: quic: Variable name typo inside a BUG_ON().\n    - DOC: config: fix typo for '%ms' log format alternative\n    - DOC: config: fix ordering for \"txn.*\" fetches\n    - MINOR: stream: add \"txn.redispatch\" fetch\n    - BUILD: debug: remove leftover parentheses in ABORT_NOW()\n    - MINOR: debug: make BUG_ON() catch build errors even without DEBUG_STRICT\n    - BUG/MINOR: ssl: Fix error message after ssl_sock_load_ocsp call\n    - MINOR: debug: support passing an optional message in ABORT_NOW()\n    - MINOR: debug: add an optional message argument to the BUG_ON() family\n    - DEBUG: make the \"debug dev {debug|warn|check}\" command print a message\n    - CLEANUP: quic: Code clarifications for QUIC CUBIC (RFC 9438)\n    - BUG/MINOR: quic: fix possible integer wrap around in cubic window calculation\n    - MINOR: quic: Stop using 1024th of a second.\n    - CI: github: abandon asan matrix.py helper\n    - CI: ssl: add yet another OpenSSL download fallback\n    - DOC: install: clarify WolfSSL chroot requirements\n    - MINOR: task: Move wait_event in the task header file\n    - MINOR: stconn: Be able to detect applets using HTX\n    - MINOR: stconn: Explicitly use an appctx to attach a stconn on it\n    - MINOR: stconn: Be prepared to handle error when a SC is attached to an applet\n    - MINOR: applet: Add dedicated IN/OUT buffers for appctx\n    - MINOR: applet: Add traces to debug receive/send and block/wake events\n    - MINOR: applet: Add support for callback functions to exchange data with channels\n    - MINOR: applet: Implement default functions to exchange data with channels\n    - MEDIUM: stconn: Add functions to handle applets I/O from the SC layer\n    - MEDIM: applet: Add the applet handler based on IN/OUT buffers\n    - MINOR: applet: Show IN/OUT buffers in trace messages when used\n    - MINOR: applet: Add flags on the appctx and stop abusing its state\n    - MINIOR: applet: Add flags to deal with ends of input, ends of stream and errors\n    - MINOR: applet: Remove appctx state field to only used the flags\n    - MINOR: applet: Add an appctx flag to report shutdown to applets\n    - MEDIUM: applet: Use appctx flags to report EOS/EOI/ERROR to SE\n    - MINOR: applet: Add callback function to deal with zero-copy forwarding\n    - MEDIUM: applet: Add support for zero-copy forwarding from an applet\n    - MINOR: applet: Automatically handle applets having more data for the stream\n    - MEDIUM: stats: Don't interrupt processing on partial post\n    - MAJOR: stats: Update HTTP stats applet to handle its own buffers\n    - MEDIUM: cache: Temporarily remove zero-copy forwarding support\n    - MAJOR: cache: Update HTTP cache applet to handle its own buffers\n    - MAJOR: cache: Send cached objects using zero-copy forwarding\n    - MINOR: stconn: Add support for flags during zero-copy forwarding negotiation\n    - MINOR: mux-h1: Be able to define the length of a chunk size when it is prepended\n    - MEDIUM: stconn: Nofify requested size during zero-copy forwarding nego is exact\n    - MINOR: mux-h1: Stop zero-copy forwarding during nego for too big requested size\n    - MEDIUM: mux-h1: Support zero-copy forwarding for chunks with an unknown size\n    - MAJOR: stats: Send stats dump over HTTP using zero-copy forwarding\n    - MEDIUM: applet: Simplify a bit API to exchange data with applets\n    - MINOR: cache: Remove unsed .data_sent field from the cache applet context\n    - MINOR: applet: Use an option to disable zero-copy forwarding for all applets\n    - MINOR: applet: Identify applets using their own buffers via a flag\n    - BUG/MINOR: ssl: Duplicate ocsp update mode when dup'ing ckch\n    - MINOR: ssl: Use OCSP_CERTID instead of ckch_store in ckch_store_build_certid\n    - BUG/MINOR: ssl: Clear the ckch instance when deleting a crt-list line\n    - BUG/MEDIUM: ocsp: Separate refcount per instance and per store\n    - BUG/MINOR: ssl: Destroy ckch instances before the store during deinit\n    - BUG/MINOR: ssl: Reenable ocsp auto-update after an \"add ssl crt-list\"\n    - REGTESTS: ssl: Add OCSP related tests\n    - REGTESTS: ssl: Fix empty line in cli command input\n    - DOC: install: recommend pcre2\n    - DOC: config: fix misplaced \"txn.conn_retries\"\n    - DOC: config: fix typos for \"bytes_{in,out}\"\n    - DOC: config: fix misplaced \"bytes_{in,out}\"\n    - DOC: config: add more custom log format table alternatives\n    - MINOR: stream: rename \"txn.redispatch\" to \"txn.redispatched\"\n    - MINOR: sample: implement bc_{be,srv}_queue samples\n    - BUG/MINOR: mux-h2: count rejected DATA frames against the connection's flow control\n    - MINOR: mux-h2: count excess of CONTINUATION frames as a glitch\n    - MINOR: mux-h2: count late reduction of INITIAL_WINDOW_SIZE as a glitch\n    - DOC: internal: update missing data types in peers-v2.0.txt\n    - MEDIUM: stick-tables: add a new stored type for glitch_cnt and glitch_rate\n    - MINOR: session: add the necessary functions to update the per-session glitches\n    - MEDIUM: mux-h2: update session trackers with number of glitches\n    - BUG/MINOR: server/cli: add missing LF at the end of certain notice/error lines\n    - BUG/MINOR: vars/cli: fix missing LF after \"get var\" output\n    - BUG/MEDIUM: cli: fix once for all the problem of missing trailing LFs\n    - MINOR: cli: make sure to always print a pending message after release()\n    - MINOR: cli: always reset the applet task's timeout\n    - MINOR: cli: add a new \"wait\" command to wait for a certain delay\n    - BUG/MINOR: applet: Always release empty appctx buffers after processing\n    - MINOR: server: split the server deletion code in two parts\n    - MINOR: cli/wait: make the wait command support a more detailed help message\n    - MINOR: cli/wait: also support an unrecoverable failure status\n    - MINOR: cli/wait: also pass up to 4 arguments to the external conditions\n    - MINOR: cli/wait: add a condition to wait on a server to become unused\n    - CI: Update to actions/cache@v4\n    - BUILD: address a few remaining calloc(size, n) cases\n    - BUG/MEDIUM: pool: fix rare risk of deadlock in pool_flush()\n\n2024/01/26 : 3.0-dev2\n    - MINOR: ot: logsrv struct becomes logger\n    - MINOR: ssl: Update ssl_fc_curve/ssl_bc_curve to use SSL_get0_group_name\n    - CLEANUP: ssl: fix indentation in smp_fetch_ssl_fc_ec()\n    - DEV: patchbot: produce a verdict for too long commit messages\n    - CLEANUP: ssl: fix indentation in smp_fetch_ssl_fc_ec() (part 2)\n    - CLEANUP: quic: Double quic_dgram_parse() prototype declaration.\n    - BUG/MINOR: map: list-based matching potential ordering regression\n    - REGTESTS: add a test to ensure map-ordering is preserved\n    - DOC: config: fix typo about map_*_key converters\n    - DOC: configuration: corrected description of keyword tune.ssl.ocsp-update.mindelay\n    - MINOR: map: mapfile ordering also matters for tree-based match types\n    - DEV: phash: add a trivial perfect hash generator for integers\n    - OPTIM: http: simplify http_get_status_idx() using a hash\n    - CLEANUP: http: avoid duplicating literals in find_http_meth()\n    - MINOR: http: add infrastructure to choose status codes for err / fail\n    - MEDIUM: http_act: check status codes against the bit fields for err/fail\n    - MEDIUM: http: add the ability to redefine http-err-codes and http-fail-codes\n    - CI: codespell: ignore some words in URLs\n    - CI: codespell: add more words to whitelist\n    - CLEANUP: fix spelling of \"occured\" in src/h3.c\n    - BUILD: quic: missing include for quic_tp\n    - BUG/MINOR: mux-quic: do not prevent non-STREAM sending on flow control\n    - MEDIUM: ssl: allow multiple fallback certificate to allow ECDSA/RSA selection\n    - MEDIUM: ssl: generate '*' SNI filters for default certificates\n    - MEDIUM: ssl: does not use default_ctx for 'generate-certificate' option\n    - REORG: ssl: move 'generate-certificates' code to ssl_gencert.c\n    - DOC: configuration: update configuration on how to have multiple default certs\n    - MEDIUM: ssl: implements 'default-crt' keyword for bind Lines\n    - CI: github: update wolfSSL to 5.6.6\n    - DOC: INSTALL: require at least WolfSSL 5.6.6\n    - DEV: h2: add support for multiple flags in mkhdr\n    - DEV: h2: support hex-encoded data sequences in mkhdr\n    - BUG/MINOR: mux-h2: also count streams for refused ones\n    - BUG/MEDIUM: quic: keylog callback not called (USE_OPENSSL_COMPAT)\n    - MINOR: vars: fix indentation in var_clear_buffer()\n    - DOC: configuration: fix set-dst in actions keywords matrix\n    - BUG/MEDIUM: mux-h2: refine connection vs stream error on headers\n    - MINOR: mux-h2/traces: add a missing trace on connection WU with negative inc\n    - MINOR: mux-h2: add a counter of \"glitches\" on a connection\n    - MINOR: connection: add a new mux_ctl to report number of connection glitches\n    - MINOR: mux-h2: implement MUX_CTL_GET_GLITCHES\n    - MINOR: connection: add sample fetches to report per-connection glitches\n    - BUILD: stick-table: fix build error on 32-bit platforms\n    - MINOR: quic: Transport parameters encoding without version_information\n    - MINOR: quic: Enable early data at SSL session level (aws-lc)\n    - MINOR: ssl_sock: Early data disabled during SSL_CTX switching (aws-lc)\n    - MINOR: quic: Correctly wait for the completion of handshakes with early data (aws-lc)\n    - BUG/MEDIUM: cli: some err/warn msg dumps add LR into CSV output on stat's CLI\n    - BUG/MINOR: jwt: fix jwt_verify crash on 32-bit archs\n    - BUILD: quic: fix build error when using the compatibility layer\n    - BUILD: quic: Fix build error when building QUIC against wolfssl.\n    - BUILD: quic: Fix build error when building QUIC against libressl.\n    - BUG/MINOR: hlua: fix uninitialized var in hlua_core_get_var()\n    - CLEANUP: hlua: fix indent, remove extra return in hlua_core_get_var()\n    - BUG/MEDIUM: cache: Fix crash when deleting secondary entry\n    - BUG/MINOR: quic: newreno QUIC congestion control algorithm no more available\n    - CLEANUP: quic: Remove unused CUBIC_BETA_SCALE_FACTOR_SHIFT macro.\n    - MINOR: quic: Stop hardcoding a scale shifting value (CUBIC_BETA_SCALE_FACTOR_SHIFT)\n    - MINOR: quic: extract qc_stream_buf free in a dedicated function\n    - BUG/MEDIUM: quic: remove unsent data from qc_stream_desc buf\n    - CLEANUP: fix spelling of \"elemt\"\n    - CI: extend spell check white list\n    - CI: enable spell check on git push\n    - BUILD: makefile: also define cmd_CXX to pretty-print C++ build commands\n    - BUILD/MEDIUM: deviceatlas: addon build rework.\n    - DOC: deviceatlas: update to be in line with the v3 api.\n    - BUILD/MEDIUM: deviceatlas: updating the addon part.\n    - BUILD: deviceatlas: remove unneeded depenency on libcurl / libzip\n    - BUILD: deviceatlas: fix empty \"-I\" left on CFLAGS\n    - Revert \"CI: enable spell check on git push\"\n\n2024/01/06 : 3.0-dev1\n    - MINOR: channel: Use dedicated functions to deal with STREAMER flags\n    - MEDIUM: applet: Handle channel's STREAMER flags on applets size\n    - MINOR: applets: Use channel's field to compute amount of data received\n    - MEDIUM: cache: Save body size of cached objects and track it on delivery\n    - MEDIUM: cache: Add support for endp-to-endp fast-forwarding\n    - MINOR: cache: Add global option to enable/disable zero-copy forwarding\n    - MINOR: pattern: Use reference name as filename to read patterns from a file\n    - MEDIUM: pattern: Add support for virtual and optional files for patterns\n    - DOC: config: Add section about name format for maps and ACLs\n    - DOC: management/lua: Update commands about map and acl\n    - MINOR: promex: Add support for specialized front/back/li/srv metric names\n    - MINOR: promex: Export active/backup metrics per-server\n    - BUG/MINOR: ssl: Double free of OCSP Certificate ID\n    - MINOR: ssl/cli: Add ha_(warning|alert) msgs to CLI ckch callback\n    - BUG/MINOR: ssl: Wrong OCSP CID after modifying an SSL certficate\n    - BUG/MINOR: lua: Wrong OCSP CID after modifying an SSL certficate (LUA)\n    - DOC: configuration: typo req.ssl_hello_type\n    - MINOR: hq-interop: add fastfwd support\n    - CLEANUP: mux_quic: rename ffwd function with prefix qmux_strm_\n    - MINOR: mux-quic: add traces for 0-copy/fast-forward\n    - BUG/MINOR: mworker/cli: fix set severity-output support\n    - CLEANUP: mworker/cli: add comments about pcli_find_and_exec_kw()\n    - BUG/MEDIUM: quic: Possible buffer overflow when building TLS records\n    - BUILD: ssl: update types in wolfssl cert selection callback\n    - MINOR: ssl: activate the certificate selection callback for WolfSSL\n    - CI: github: switch to wolfssl git-c4b77ad for new PR\n    - BUG/MEDIUM: map/acl: pat_ref_{set,delete}_by_id regressions\n    - BUG/MINOR: ext-check: cannot use without preserve-env\n    - CLEANUP: mux-quic: remove unused prototype\n    - MINOR: mux-quic: clean up qcs Rx buffer allocation API\n    - MINOR: mux-quic: clean up qcs Tx buffer allocation API\n    - CLEANUP: mux-quic: clean up app ops callback definitions\n    - MINOR: mux-quic: factorize QC_SF_UNKNOWN_PL_LENGTH set\n    - MINOR: h3: complete traces for sending\n    - MINOR: h3: adjust zero-copy sending related code\n    - MINOR: hq-interop: use zero-copy to transfer single HTX data block\n    - BUG/MEDIUM: quic: QUIC CID removed from tree without locking\n    - BUG/MEDIUM: stconn: Block zero-copy forwarding if EOS/ERROR on consumer side\n    - BUG/MEDIUM: mux-h1: Cound data from input buf during zero-copy forwarding\n    - BUG/MEDIUM: mux-h1: Explicitly skip request's C-L header if not set originally\n    - CLEANUP: mux-h1: Fix a trace message about C-L header addition\n    - BUG/MEDIUM: mux-h2: Report too large HEADERS frame only when rxbuf is empty\n    - BUG/MEDIUM: mux-quic: report early error on stream\n    - DOC: config: add arguments to sample fetch methods in the table\n    - DOC: config: also add arguments to the converters in the table\n    - BUG/MINOR: resolvers: default resolvers fails when network not configured\n    - SCRIPTS: mk-patch-list: produce a list of patches\n    - DEV: patchbot: add the AI-based bot to pre-select candidate patches to backport\n    - BUG/MEDIUM: mux-h2: Switch pending error to error if demux buffer is empty\n    - BUG/MEDIUM: mux-h2: Only Report H2C error on read error if demux buffer is empty\n    - BUG/MEDIUM: mux-h2: Don't report error on SE if error is only pending on H2C\n    - BUG/MEDIUM: mux-h2: Don't report error on SE for closed H2 streams\n    - DOC: config: Update documentation about local haproxy response\n    - DEV: patchbot: use checked buttons as reference instead of internal table\n    - DEV: patchbot: allow to show/hide backported patches\n    - MINOR: h3: remove quic_conn only reference\n    - BUG/MINOR: server: Use the configured address family for the initial resolution\n    - MINOR: mux-quic: remove qcc_shutdown() from qcc_release()\n    - MINOR: mux-quic: use qcc_release in case of init failure\n    - MINOR: mux-quic: adjust error code in init failure\n    - MINOR: h3: add traces for connection init stage\n    - BUG/MINOR: h3: properly handle alloc failure on finalize\n    - MINOR: h3: use INTERNAL_ERROR code for init failure\n    - BUG/MAJOR: stconn: Disable zero-copy forwarding if consumer is shut or in error\n    - MINOR: stats: store the parent proxy in stats ctx (http)\n    - BUG/MEDIUM: stats: unhandled switching rules with TCP frontend\n    - MEDIUM: proxy: set PR_O_HTTP_UPG on implicit upgrades\n    - MINOR: proxy: monitor-uri works with tcp->http upgrades\n    - OPTIM: server: eb lookup for server_find_by_name()\n    - OPTIM: server: ebtree lookups for findserver_unique_* functions\n    - MINOR: server/event_hdl: add server_inetaddr struct to facilitate event data usage\n    - MINOR: server/event_hdl: update _srv_event_hdl_prepare_inetaddr prototype\n    - BUG/MINOR: server/event_hdl: propagate map port info through inetaddr event\n    - MINOR: server: ensure connection cleanup on server addr changes\n    - CLEANUP: server/event_hdl: remove purge_conn hint in INETADDR event\n    - MEDIUM: server: merge srv_update_addr() and srv_update_addr_port() logic\n    - CLEANUP: server: remove unused server_parse_addr_change_request() function\n    - CLEANUP: resolvers: remove duplicate func prototype\n    - MINOR: resolvers: add unique numeric id to nameservers\n    - MEDIUM: server: make server_set_inetaddr() updater serializable\n    - MINOR: server/event_hdl: expose updater info through INETADDR event\n    - MINOR: server: add dns hint in server_inetaddr_updater struct\n    - MEDIUM: server/dns: clear RMAINT when addr resolves again\n    - BUG/MINOR: server/dns: use server_set_inetaddr() to unset srv addr from DNS\n    - BUG/MEDIUM: server/dns: perform svc_port updates atomically from SRV records\n    - MEDIUM: peers: use server as stream target\n    - CLEANUP: peers: remove unused sock_init_arg struct member\n    - CLEANUP: peers: remove unused \"proto\" and \"xprt\" struct members\n    - MINOR: peers: rely on srv->addr and remove peer->addr\n    - DOC: config: add context hint for server keywords\n    - MINOR: stktable: add table_process_entry helper function\n    - MINOR: stktable: use {show,set,clear} table with ptr\n    - MINOR: map: add map_*_key converters to provide the matching key\n    - DOC: fix typo for fastfwd QUIC option\n    - BUG/MINOR: mux-quic: always report error to SC on RESET_STREAM emission\n    - MEDIUM: mux-quic: add BUG_ON if sending on locally closed QCS\n    - BUG/MINOR: mux-quic: disable fast-fwd if connection on error\n    - BUG/MINOR: quic: Wrong keylog callback setting.\n    - BUG/MINOR: quic: Missing call to TLS message callbacks\n    - MINOR: h3: check connection error during sending\n    - BUG/MINOR: h3: close connection on header list too big\n    - BUG/MINOR: h3: close connection on sending alloc errors\n    - BUG/MINOR: h3: disable fast-forward on buffer alloc failure\n    - Revert \"MINOR: mux-quic: Disable zero-copy forwarding for send by default\"\n    - MINOR: stktable: stktable_data_ptr() cannot fail in table_process_entry()\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CI: use semantic version compare for determing \"latest\" OpenSSL\n    - CLEANUP: server: remove ambiguous check in srv_update_addr_port()\n    - CLEANUP: resolvers: remove unused RSLV_UPD_OBSOLETE_IP flag\n    - CLEANUP: resolvers: remove some more unused RSLV_UDP flags\n    - MEDIUM: server: simplify snr_set_srv_down() to prevent confusions\n    - MINOR: backend: export get_server_*() functions\n    - MINOR: tcpcheck: export proxy_parse_tcpcheck()\n    - MEDIUM: udp: allow to retrieve the frontend destination address\n    - MINOR: global: export a way to list build options\n    - MINOR: debug: add features and build options to \"show dev\"\n    - BUG/MINOR: server: fix server_find_by_name() usage during parsing\n    - REGTESTS: check attach-srv out of order declaration\n    - CLEANUP: quic: Remaining useless code into server part\n    - BUILD: quic: Missing quic_ssl.h header protection\n    - BUG/MEDIUM: h3: fix incorrect snd_buf return value\n    - MINOR: h3: do not consider missing buf room as error on trailers\n    - BUG/MEDIUM: stconn: Forward shutdown on write timeout only if it is forwardable\n    - BUG/MEDIUM: stconn: Set fsb date if zero-copy forwarding is blocked during nego\n    - BUG/MEDIUM: spoe: Never create new spoe applet if there is no server up\n    - MINOR: mux-h2: support limiting the total number of H2 streams per connection\n    - CLEANUP: mux-h2: remove the printfs from previous commit on h2 streams limit.\n    - DEV: h2: add the ability to emit literals in mkhdr\n    - DEV: h2: add the preface as well in supported output types\n    - DEV: h2: support passing raw data for a frame\n    - IMPORT: ebtree: implement and use flsnz_long() to count bits\n    - IMPORT: ebtree: switch the sizes and offsets to size_t and ssize_t\n    - IMPORT: ebtree: rework the fls macros to better deal with arch-specific ones\n    - IMPORT: ebtree: make string_equal_bits turn back to unsigned char\n    - IMPORT: ebtree: use unsigned ints for flznz()\n    - IMPORT: ebtree: make string_equal_bits() return an unsigned\n\n2023/12/05 : 3.0-dev0\n    - exact copy of 2.9.0\n\n2023/12/05 : 2.9.0\n    - DOC: config: add missing colon to \"bytes_out\" sample fetch keyword (2)\n    - BUG/MINOR: cfgparse-listen: fix warning being reported as an alert\n    - DOC: config: add matrix entry for \"max-session-srv-conns\"\n    - DOC: config: fix monitor-fail typo\n    - DOC: config: add context hint for proxy keywords\n    - DEBUG: stream: Report lra/fsb values for front end back SC in stream dump\n    - REGTESTS: sample: Test the behavior of consecutive delimiters for the field converter\n    - BUG/MINOR: sample: Make the `word` converter compatible with `-m found`\n    - DOC: Clarify the differences between field() and word()\n    - BUG/MINOR: server/event_hdl: properly handle AF_UNSPEC for INETADDR event\n    - BUILD: http_htx: silence uninitialized warning on some gcc versions\n    - MINOR: acme.sh: don't use '*' in the filename for wildcard domain\n    - MINOR: global: Use a dedicated bitfield to customize zero-copy fast-forwarding\n    - MINOR: mux-pt: Add global option to enable/disable zero-copy forwarding\n    - MINOR: mux-h1: Add global option to enable/disable zero-copy forwarding\n    - MINOR: mux-h2: Add global option to enable/disable zero-copy forwarding\n    - MINOR: mux-quic: Add global option to enable/disable zero-copy forwarding\n    - MINOR: mux-quic: Disable zero-copy forwarding for send by default\n    - DOC: config: update the reminder on the HTTP model and add some terminology\n    - DOC: config: add a few more differences between HTTP/1 and 2+\n    - DOC: config: clarify session vs stream\n    - DOC: config: fix typo abandonned -> abandoned\n    - DOC: management: fix two latest typos (optionally, exception)\n    - BUG/MEDIUM: peers: fix partial message decoding\n    - DOC: management: update stream vs session\n\n2023/11/30 : 2.9-dev12\n    - BUG/MINOR: global: Fix tune.disable-(fast-forward/zero-copy-forwarding) options\n    - DOC: config: removing \"log-balance\" references\n    - MINOR: server/event_hdl: add SERVER_INETADDR event\n    - MINOR: tools: use const for read only pointers in ip{cmp,cpy}\n    - MINOR: server/ip: centralize server ip updates\n    - MINOR: backend: remove invalid mode test for \"hash-balance-factor\"\n    - Revert \"MINOR: cfgparse-listen: warn when use-server rules is used in wrong mode\"\n    - MINOR: proxy: add free_logformat_list() helper function\n    - MINOR: proxy: add free_server_rules() helper function\n    - MINOR: log/backend: prevent \"use-server\" rules use with LOG mode\n    - MINOR: log/balance: set lbprm tot_weight on server on queue/dequeue\n    - DOC: config: specify supported sections for \"max-session-srv-conns\"\n    - DOC: config: fix timeout check inheritance restrictions\n    - REGTESTS: connection: disable http_reuse_be_transparent.vtc if !TPROXY\n    - DOC: lua: add sticktable class reference from Proxy.stktable\n    - DOC: lua: fix Proxy.get_mode() output\n    - DOC: lua: add \"syslog\" to Proxy.get_mode() output\n    - MEDIUM: ssl: implement rsa/ecdsa selection with WolfSSL\n    - MINOR: ssl: replace 'trash.area' by 'servername' in ssl_sock_switchctx_cbk()\n    - MINOR: ssl: move certificate selection in a dedicate function\n    - MEDIUM: ssl: use ssl_sock_chose_sni_ctx() in the clienthello callback\n    - MINOR: mworker/cli: implement hard-reload over the master CLI\n    - BUG/MEDIUM: mux-h1: Properly ignore trailers when a content-length is announced\n    - MINOR: task/profiling: do not record task_drop_running() as a caller\n    - OPTIM: pattern: save memory and time using ebst instead of ebis\n    - BUILD: map: fix build warning\n    - MINOR: trace: define simple -dt argument\n    - MINOR: trace: parse level in a function\n    - MINOR: trace: parse verbosity in a function\n    - MINOR: trace: support -dt optional format\n    - OPTIM: mux-h2/zero-copy: don't allocate more buffers per connections than streams\n    - BUG/MINOR: quic: fix CONNECTION_CLOSE_APP encoding\n    - BUG/MEDIUM: stconn: Don't perform zero-copy FF if opposite SC is blocked\n    - BUG/MEDIUM: mux-h2: Remove H2_SF_NOTIFIED flag for H2S blocked on fast-forward\n    - CLEANUP: quic: Remove dead definitions/declarations\n    - REORG: quic: Move some QUIC CLI code to its C file\n    - REORG: quic: Add a new module to handle QUIC connection IDs\n    - REORG: quic: QUIC connection types header cleaning\n    - BUILD: quic: Missing RX header inclusions\n    - REORG: quic: Move CRYPTO data buffer defintions to QUIC TLS module\n    - REORG: quic: Move QUIC CRYPTO stream definitions/declarations to QUIC TLS\n    - REORG: quic: Move several inlined functions from quic_conn.h\n    - REORG: quic: Move QUIC SSL BIO method related functions to quic_ssl.c\n    - REORG: quic: Move the QUIC DCID parser to quic_sock.c\n    - REORG: quic: Rename some functions used upon ACK receipt\n    - REORG: quic: Move QUIC path definitions/declarations to quic_cc module\n    - REORG: quic: Move qc_handle_conn_migration() to quic_conn.c\n    - REORG: quic: Move quic_build_post_handshake_frames() to quic_conn module\n    - REORG: quic: Move qc_may_probe_ipktns() to quic_tls.h\n    - REORG: quic: Move qc_pkt_long() to quic_rx.h\n    - REORG: quic: Rename some (quic|qc)_conn* objects to quic_conn_closed\n    - REORG: quic: Move NEW_CONNECTION_ID frame builder to quic_cid\n    - REORG: quic: Move ncbuf related function from quic_rx to quic_conn\n    - REORG: quic: Add a new module for QUIC retry\n    - BUILD: quic: Several compiler warns fixes after retry module creation\n    - REORG: quic: Move qc_notify_send() to quic_conn\n    - REORG: quic: Add a new module for retransmissions\n    - REORG: quic: Remove qc_pkt_insert() implementation\n    - REORG: quic: Move quic_increment_curr_handshake() to quic_sock\n    - BUG/MINOR: cache: Remove incomplete entries from the cache when stream is closed\n    - MEDIUM: cli: allow custom pattern for payload\n    - CLEANUP: mworker/cli: use a label to return errors\n    - MINOR: mworker/cli: implements the customized payload pattern for master CLI\n    - DOC: management: add documentation about customized payload pattern\n    - BUG/MEDIUM: server/event_hdl: memory overrun in _srv_event_hdl_prepare_inetaddr()\n    - MINOR: event_hdl: add global tunables\n    - BUG/MAJOR: server/addr: fix a race during server addr:svc_port updates\n    - MEDIUM: log/balance: support FQDN for UDP log servers\n    - BUG/MINOR: compression: possible NULL dereferences in comp_prepare_compress_request()\n    - BUG/MEDIUM: master/cli: Properly pin the master CLI on thread 1 / group 1\n    - BUG/MEDIUM: mux-quic: Stop zero-copy FF during nego if input is not empty\n    - CLEANUP: log: Fix %rc comment in sess_build_logline()\n    - BUG/MINOR: h3: fix TRAILERS encoding\n    - BUG/MINOR: h3: always reject PUSH_PROMISE\n    - MINOR: h3: use correct error code for missing SETTINGS\n    - MINOR: http-fetch: Add a sample to retrieve the server status code\n    - DOC: config: Improve 'status' sample documentation\n    - MINOR: http-fetch: Add a sample to get the transaction status code\n    - MEDIUM: http-ana: Set termination state before returning haproxy response\n    - MINOR: stream: Expose session terminate state via a new sample fetch\n    - MINOR: stream: add a sample fetch to get the number of connection retries\n    - MINOR: stream: Expose the stream's uniq_id via a new sample fetch\n    - MINOR: muxes: Rename mux_ctl_type values to use MUX_CTL_ prefix\n    - MINOR: muxes: Add a callback function to send commands to mux streams\n    - MINOR: muxes: Implement ->sctl() callback for muxes and return the stream id\n    - MINOR: Add sample fetches to get the frontend and backend stream ID\n    - BUG/MEDIUM: cli: Don't look for payload pattern on empty commands\n    - DOC: config: Add argument for tune.lua.maxmem\n    - DOC: config: fix mention of request slot in http-response capture\n    - DOC: config: fix remaining mention of @reverse for attach-srv action\n    - DOC: config: fix missing characters in set-spoe-group action\n    - DOC: config: reorganize actions into their own section\n    - BUG/MINOR: acme.sh: update the deploy script\n    - MINOR: rhttp: mark reverse HTTP as experimental\n    - CLEANUP: quic_cid: remove unused listener arg\n    - BUG/MINOR: quic_tp: fix preferred_address decoding\n    - MINOR: quic_tp: use in_addr/in6_addr for preferred_address\n    - MINOR: acme.sh: use the master CLI for hot update\n    - DOC: config: move the cache-use and cache-store actions to the proper section\n    - DOC: config: fix alphabetical ordering of converter keywords\n    - DOC: config: add missing colon to \"bytes_out\" sample fetch keyword\n    - DOC: config: add an index of converter keywords\n    - DOC: config: add an index of sample fetch keywords\n    - BUG/MINOR: config: Stopped parsing upon unmatched environment variables\n    - DEBUG: unstatify a few functions that are often present in backtraces\n    - BUILD: server: shut a bogus gcc warning on certain ubuntu\n\n2023/11/24 : 2.9-dev11\n    - BUG/MINOR: startup: set GTUNE_SOCKET_TRANSFER correctly\n    - BUG/MINOR: sock: mark abns sockets as non-suspendable and always unbind them\n    - BUILD: cache: fix build error on older compilers\n    - BUG/MAJOR: quic: complete thread migration before tcp-rules\n    - BUG/MEDIUM: quic: Possible crash for connections to be killed\n    - MINOR: quic: remove unneeded QUIC specific stopping function\n    - MINOR: acl: define explicit HTTP_3.0\n    - DEBUG: connection/flags: update flags for reverse HTTP\n    - BUILD: log: silence a build warning when threads are disabled\n    - MINOR: quic: Add traces to debug frames handling during retransmissions\n    - BUG/MEDIUM: quic: Possible crash during retransmissions and heavy load\n    - BUG/MINOR: quic: Possible leak of TX packets under heavy load\n    - BUG/MINOR: quic: Possible RX packet memory leak under heavy load\n    - BUG/MINOR: server: do not leak default-server in defaults sections\n    - DEBUG: tinfo: store the pthread ID and the stack pointer in tinfo\n    - MINOR: debug: start to create a new struct post_mortem\n    - MINOR: debug: add OS/hardware info to the post_mortem struct\n    - MINOR: debug: report in port_mortem whether a container was detected\n    - MINOR: debug: report in post_mortem if the container techno used is docker\n    - MINOR: debug: detect CPU model and store it in post_mortem\n    - MINOR: debug: report any detected hypervisor in post_mortem\n    - MINOR: debug: collect some boot-time info related to the process\n    - MINOR: debug: copy the thread info into the post_mortem struct\n    - MINOR: debug: dump the mapping of the libs into post_mortem\n    - MINOR: debug: add the ability to enter components in the post_mortem struct\n    - MINOR: init: add info about the main program to the post_mortem struct\n    - DOC: management: document \"show dev\"\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CI: limit codespell checks to main repo, not forks\n    - DOC: 51d: updated 51Degrees repo URL for v3.2.10\n    - DOC: install: update the list of openssl versions\n    - MINOR: ext-check: add an option to preserve environment variables\n    - BUG/MEDIUM: mux-h1: Don't set CO_SFL_MSG_MORE flag on last fast-forward send\n    - MINOR: rhttp: rename proto_reverse_connect\n    - MINOR: rhttp: large renaming to use rhttp prefix\n    - MINOR: rhttp: add count of active conns per thread\n    - MEDIUM: rhttp: support multi-thread active connect\n    - MINOR: listener: allow thread kw for rhttp bind\n    - DOC: rhttp: replace maxconn by nbconn\n    - MINOR: log/balance: rename \"log-sticky\" to \"sticky\"\n    - MEDIUM: mux-quic: Add consumer-side fast-forwarding support\n    - MAJOR: h3: Implement zero-copy support to send DATA frame\n\n2023/11/18 : 2.9-dev10\n    - CLEANUP: Re-apply xalloc_size.cocci (3)\n    - BUG/MEDIUM: stconn: Report send activity during mux-to-mux fast-forward\n    - BUG/MEDIUM: stconn: Don't report rcv/snd expiration date if SC cannot epxire\n    - MINOR: stconn: Don't queue stream task in past in sc_notify()\n    - BUG/MEDIUM: Don't apply a max value on room_needed in sc_need_room()\n    - BUG/MINOR: stconn: Sanitize report for read activity\n    - CLEANUP: htx: Properly indent htx_reserve_max_data() function\n    - DOC: stconn: Improve comments about lra and fsb usage\n    - BUG/MEDIUM: quic: fix actconn on quic_conn alloc failure\n    - BUG/MEDIUM: quic: fix sslconns on quic_conn alloc failure\n    - BUG/MEDIUM: mux-h1: Be sure xprt support splicing to use it during fast-forward\n    - MINOR: proto_reverse_connect: use connect timeout\n    - BUG/MINOR: mux-h1: Release empty ibuf during data fast-forwarding\n    - BUG/MINOR: stick-table/cli: Check for invalid ipv4 key\n    - MEDIUM: stktable/cli: simplify entry key handling\n    - MINOR: stktable/cli: support v6tov4 and v4tov6 conversions\n    - BUG/MINOR: mux-h1: Properly handle http-request and http-keep-alive timeouts\n    - BUG/MEDIUM: freq-ctr: Don't report overshoot for long inactivity period\n    - BUG/MEDIUM: pool: fix releasable pool calculation when overloaded\n    - BUG/MINOR: pool: check one other random bucket on alloc conflict\n    - BUG/MEDIUM: pool: try once to allocate from another bucket if empty\n    - MEDIUM: stconn/muxes: Loop on data fast-forwarding to forward at least a buffer\n    - MINOR: stconn/mux-h2: Use a iobuf flag to report EOI to consumer side during FF\n    - MEDIUM: quic: Heavy task mode during handshake\n    - MEDIUM: quic: Heavy task mode with non contiguously bufferized CRYPTO data\n    - MINOR: quic: release the TLS context asap from quic_conn_release()\n    - MINOR: quic: Add idle timer task pointer to traces\n    - BUG/MINOR: quic: idle timer task requeued in the past\n    - CLEANUP: quic: Indentation fix in qc_do_build_pkt()\n    - MINOR: quic: Avoid zeroing frame structures\n    - BUG/MEDIUM: quic: Too short Initial packet sent (enc. level allocation failed)\n    - BUG/MEDIUM: quic: Avoid trying to send ACK frames from an empty ack ranges tree\n    - BUG/MEDIUM: quic: Possible crashes when sending too short Initial packets\n    - BUG/MEDIUM: quic: Avoid some crashes upon TX packet allocation failures\n    - BUG/MEDIUM: quic: Possible crashes during secrets allocations (heavy load)\n    - BUG/MEDIUM: stconn: Don't update stream expiration date if already expired\n    - MINOR: errors: ha_alert() and ha_warning() uses warn_exec_path()\n    - MINOR: errors: does not check MODE_STARTING for log emission\n    - MEDIUM: errors: move the MODE_QUIET test in print_message()\n    - DOC: management: -q is quiet all the time\n    - MEDIUM: mworker: -W is mandatory when using -S\n    - BUG/MEDIUM: mux-h1: Exit early if fast-forward is not supported by opposite SC\n    - MEDIUM: quic: adjust address validation\n    - MINOR: quic: reduce half open counters scope\n    - MEDIUM: quic: limit handshake per listener\n    - MEDIUM: quic: define an accept queue limit\n    - BUG/MINOR: quic: fix retry token check inconsistency\n    - MINOR: task/debug: explicitly support passing a null caller to wakeup functions\n    - MINOR: task/debug: make task_queue() and task_schedule() possible callers\n    - OPTIM: mux-h2: don't allocate more buffers per connections than streams\n    - BUG/MINOR: quic: remove dead code in error path\n    - MEDIUM: quic: respect closing state even on soft-stop\n    - MEDIUM: quic: release conn socket before using quic_cc_conn\n    - DOC: config: use the word 'backend' instead of 'proxy' in 'track' description\n    - BUG/MEDIUM: applet: Remove appctx from buffer wait list on release\n    - MINOR: tools: make str2sa_range() directly return type hints\n    - BUG/MEDIUM: server: invalid address (post)parsing checks\n    - BUG/MINOR: sink: don't learn srv port from srv addr\n    - CLEANUP: sink: bad indent in sink_new_from_logger()\n    - CLEANUP: sink: useless leftover in sink_add_srv()\n    - BUG/MINOR: quic: Useless use of non-contiguous buffer for in order CRYPTO data\n    - MINOR: server: always initialize pp_tlvs for default servers\n    - BUG/MEDIUM: proxy: always initialize the default settings after init\n    - MEDIUM: startup: 'haproxy -c' is quiet when valid\n    - BUG/MINOR: sample: Fix bytes converter if offset is bigger than sample length\n    - BUG/MINOR: log: keep the ref in dup_logger()\n    - BUG/MINOR: quic: fix crash on qc_new_conn alloc failure\n    - BUG/MINOR: quic: fix decrement of half_open counter on qc alloc failure\n    - BUG/MEDIUM: quic: fix FD for quic_cc_conn\n    - DOC: config: Fix name for tune.disable-zero-copy-forwarding global param\n    - REGTESTS: startup: -conf-OK requires -V with current VTest\n    - BUG/MEDIUM: quic: Non initialized CRYPTO data stream deferencing\n    - MINOR: quic: Add a max window parameter to congestion control algorithms\n    - MINOR: quic: Maximum congestion control window for each algo\n    - DOC: quic: Wrong syntax for \"quic-cc-algo\" keyword.\n    - DOC: quic: Maximum congestion control window configuration\n    - BUG/MINOR: quic: maximum window limits do not match the doc\n    - BUG/MEDIUM: connection: report connection errors even when no mux is installed\n    - BUG/MINOR: stconn: Handle abortonclose if backend connection was already set up\n    - MINOR: connection: Add a CTL flag to notify mux it should wait for reads again\n    - MEDIUM: mux-h1: Handle MUX_SUBS_RECV flag in h1_ctl() and susbscribe for reads\n    - BUG/MEDIUM: stream: Properly handle abortonclose when set on backend only\n    - MINOR: stconn: Use SC to detect frontend connections in sc_conn_recv()\n    - REGTESTS: http: Improve script testing abortonclose option\n    - MINOR: activity: report profiling duration and age in \"show profiling\"\n    - BUG/MEDIUM: mworker: set the master variable earlier\n    - BUG/MEDIUM: stream: Don't call mux .ctl() callback if not implemented\n    - MINOR: connection: update rhttp flags usage\n    - BUG/MINOR: mux_h2: reject passive reverse conn if error on add to idle\n    - MINOR: server: force add to idle on reverse\n    - MINOR: shctx: Set last_append to NULL when reserving block in hot list\n    - MEDIUM: shctx: Move list between hot and avail list in O(1)\n    - MEDIUM: shctx: Simplify shctx_row_reserve_hot loop\n    - MINOR: shctx: Remove explicit 'from' param from shctx_row_data_append\n    - MEDIUM: cache: Use dedicated cache tree lock alongside shctx lock\n    - MINOR: cache: Remove expired entry delete in \"show cache\" command\n    - MINOR: cache: Add option to avoid removing expired entries in lookup function\n    - MEDIUM: cache: Use rdlock on cache in cache_use\n    - MEDIUM: shctx: Remove 'hot' list from shared_context\n    - MINOR: cache: Use dedicated trash for \"show cache\" cli command\n    - MEDIUM: cache: Switch shctx spinlock to rwlock and restrict its scope\n    - MEDIUM: cache: Add refcount on cache_entry\n    - MEDIUM: shctx: Descend shctx_lock calls into the shctx_row_reserve_hot\n    - MINOR: shctx: Add new reserve_finish callback call to shctx_row_reserve_hot\n    - MAJOR: cache: Delay cache entry delete in reserve_hot function\n    - MINOR: shctx: Remove redundant arg from free_block callback\n    - MINOR: shctx: Remove 'use_shared_mem' variable\n    - DOC: cache: Specify when function expects a cache lock\n    - BUG/MEDIUM: stconn: Update fsb date on partial sends\n    - MINOR: htx: Use a macro for overhead induced by HTX\n    - MINOR: channel: Add functions to get info on buffers and deal with HTX streams\n    - BUG/MINOR: stconn: Fix streamer detection for HTX streams\n    - BUG/MINOR: stconn: Use HTX-aware channel's functions to get info on buffer\n    - BUG/MINOR: stconn/applet: Report send activity only if there was output data\n    - BUG/MINOR: stconn: Report read activity on non-indep streams for partial sends\n    - BUG/MINOR: shctx: Remove old HA_SPIN_INIT\n    - REGTESTS: try to activate again the seamless reload test with the master CLI\n    - MINOR: proxy: Add \"handshake\" new timeout (frontend side)\n    - MEDIUM: quic: Add support for \"handshake\" timeout setting.\n    - MINOR: quic: Dump the expiration date of the idle timer task\n    - BUG/MINOR: quic: Malformed CONNECTION_CLOSE frame\n    - MEDIUM: session: handshake timeout (TCP)\n    - DOC: proxy: Add \"handshake\" timeout documentation.\n    - MINOR: quic: Rename \"handshake\" timeout to \"client-hs\"\n    - CLEANUP: haproxy: remove old comment from 1.1 from the file header\n    - BUG/MEDIUM: mux-h2: fail earlier on malloc in takeover()\n    - BUG/MEDIUM: mux-h1: fail earlier on malloc in takeover()\n    - BUG/MEDIUM: mux-fcgi: fail earlier on malloc in takeover()\n    - MINOR: rhttp: remove the unused outgoing connect() function\n    - MINOR: backend: without ->connect(), allow to pick another thread's connection\n    - BUG/MINOR: stream/cli: report correct stream age in \"show sess\"\n    - MINOR: stream/cli: add an optional \"older\" filter for \"show sess\"\n    - MINOR: stream/cli: add another filter \"susp\" to \"show sess\"\n    - MINOR: stktable: add stktable_deinit function\n    - BUG/MINOR: proxy/stktable: missing frees on proxy cleanup\n    - CLEANUP: backend: removing unused LB param\n    - MEDIUM: lbprm: store algo params on 32bits\n    - MEDIUM: log/balance: merge tcp/http algo with log ones\n    - Revert \"MINOR: proxy: report a warning for max_ka_queue in proxy_cfg_ensure_no_http()\"\n    - Revert \"MINOR: tcp_rules: tcp-{request,response} requires TCP or HTTP mode\"\n    - Revert \"MINOR: stktable: \"stick\" requires TCP or HTTP mode\"\n    - Revert \"MINOR: cfgparse-listen: \"http-send-name-header\" requires TCP or HTTP mode\"\n    - Revert \"MINOR: cfgparse-listen: \"dynamic-cookie-key\" requires TCP or HTTP mode\"\n    - Revert \"MINOR: cfgparse-listen: \"http-reuse\" requires TCP or HTTP mode\"\n    - Revert \"MINOR: fcgi-app: \"use-fcgi-app\" requires TCP or HTTP mode\"\n    - Revert \"MINOR: http_htx/errors: prevent the use of some keywords when not in tcp/http mode\"\n    - Revert \"MINOR: flt_http_comp: \"compression\" requires TCP or HTTP mode\"\n    - Revert \"MINOR: filter: \"filter\" requires TCP or HTTP mode\"\n    - MINOR: log/backend: ensure log exclusive params are not used in other modes\n    - MINOR: log/backend: prevent tcp-{request,response} use with LOG mode\n    - MINOR: log/backend: prevent stick table and stick rules with LOG mode\n    - MINOR: log/backend: prevent \"http-send-name-header\" use with LOG mode\n    - MINOR: log/backend: prevent \"dynamic-cookie-key\" use with LOG mode\n    - REGTESTS: http: add a test to validate chunked responses delivery\n\n2023/11/04 : 2.9-dev9\n    - DOC: internal: filters: fix reference to entities.pdf\n    - BUG/MINOR: ssl: load correctly @system-ca when ca-base is define\n    - MINOR: lua: Add flags to configure logging behaviour\n    - MINOR: lua: change tune.lua.log.stderr default from 'on' to 'auto'\n    - BUG/MINOR: backend: fix wrong BUG_ON for avail conn\n    - BUG/MAJOR: backend: fix idle conn crash under low FD\n    - MINOR: backend: refactor insertion in avail conns tree\n    - DEBUG: mux-h2/flags: fix list of h2c flags used by the flags decoder\n    - BUG/MEDIUM: server/log: \"mode log\" after server keyword causes crash\n    - MINOR: connection: add conn_pr_mode_to_proto_mode() helper func\n    - BUG/MEDIUM: server: \"proto\" not working for dynamic servers\n    - MINOR: server: add helper function to detach server from proxy list\n    - DEBUG: add a tainted flag when ha_panic() is called\n    - DEBUG: lua: add tainted flags for stuck Lua contexts\n    - DEBUG: pools: detect that malloc_trim() is in progress\n    - BUG/MINOR: quic: do not consider idle timeout on CLOSING state\n    - MINOR: frontend: implement a dedicated actconn increment function\n    - BUG/MINOR: ssl: use a thread-safe sslconns increment\n    - MEDIUM: quic: count quic_conn instance for maxconn\n    - MEDIUM: quic: count quic_conn for global sslconns\n    - BUG/MINOR: ssl: suboptimal certificate selection with TLSv1.3 and dual ECDSA/RSA\n    - REGTESTS: ssl: update the filters test for TLSv1.3 and sigalgs\n    - BUG/MINOR: mux-quic: fix early close if unset client timeout\n    - BUG/MEDIUM: ssl: segfault when cipher is NULL\n    - BUG/MINOR: tcpcheck: Report hexstring instead of binary one on check failure\n    - MEDIUM: systemd: be more verbose about the reload\n    - MINOR: sample: Add fetcher for getting all cookie names\n    - BUG/MINOR: proto_reverse_connect: support SNI on active connect\n    - MINOR: proxy/stktable: add resolve_stick_rule helper function\n    - BUG/MINOR: stktable: missing free in parse_stick_table()\n    - BUG/MINOR: cfgparse/stktable: fix error message on stktable_init() failure\n    - MINOR: stktable: stktable_init() sets err_msg on error\n    - MINOR: stktable: check if a type should be used as-is\n    - MEDIUM: stktable/peers: \"write-to\" local table on peer updates\n    - CI: github: update wolfSSL to 5.6.4\n    - DOC: install: update the wolfSSL required version\n    - MINOR: server: Add parser support for set-proxy-v2-tlv-fmt\n    - MINOR: connection: Send out generic, user-defined server TLVs\n    - BUG/MEDIUM: pattern: don't trim pools under lock in pat_ref_purge_range()\n    - MINOR: mux-h2: always use h2_send() in h2_done_ff(), not h2_process()\n    - OPTIM: mux-h2: call h2_send() directly from h2_snd_buf()\n    - BUG/MINOR: server: remove some incorrect free() calls on null elements\n\n2023/10/20 : 2.9-dev8\n    - MINOR: ssl: add an explicit error when 'ciphersuites' are not supported\n    - BUILD: ssl: enable 'ciphersuites' for WolfSSL\n    - BUILD: ssl: add 'ssl_c_r_dn' fetch for WolfSSL\n    - BUILD: ssl: add 'secure_memcmp' converter for WolfSSL and awslc\n    - BUILD: ssl: enable keylog for awslc\n    - CLEANUP: ssl: remove compat functions for openssl < 1.0.0\n    - BUILD: ssl: enable keylog for WolfSSL\n    - REGTESTS: pki: add a pki for SSL tests\n    - REGTESTS: ssl: update common.pem with the new pki\n    - REGTESTS: ssl: disable ssl_dh.vtc for WolfSSL\n    - REGTESTS: wolfssl: temporarly disable some failing reg-tests\n    - CI: ssl: add wolfssl to build-ssl.sh\n    - CI: ssl: add git id support for wolfssl download\n    - CI: github: add a wolfssl entry to the CI\n    - CI: github: update wolfssl to git revision d83f2fa\n    - CI: github: add awslc 1.16.0 to the push CI\n    - BUG/MINOR: quic: Avoid crashing with unsupported cryptographic algos\n    - REORG: quic: cleanup traces definition\n    - BUG/MINOR: quic: reject packet with no frame\n    - BUG/MEDIUM: mux-quic: fix RESET_STREAM on send-only stream\n    - BUG/MINOR: mux-quic: support initial 0 max-stream-data\n    - BUG/MINOR: h3: strengthen host/authority header parsing\n    - CLEANUP: connection: drop an uneeded leftover cast\n    - BUG/MAJOR: connection: make sure to always remove a connection from the tree\n    - BUG/MINOR: quic: fix qc.cids access on quic-conn fail alloc\n    - BUG/MINOR: quic: fix free on quic-conn fail alloc\n    - BUG/MINOR: mux-quic: fix free on qcs-new fail alloc\n    - BUG/MEDIUM: quic-conn: free unsent frames on retransmit to prevent crash\n    - MEDIUM: tree-wide: logsrv struct becomes logger\n    - MEDIUM: log: introduce log target\n    - DOC: config: log <address> becomes log <target> in \"log\" related doc\n    - MEDIUM: sink/log: stop relying on AF_UNSPEC for rings\n    - MINOR: log: support explicit log target as argument in __do_send_log()\n    - MINOR: log: remove the logger dependency in do_send_log()\n    - MEDIUM: log/sink: simplify log header handling\n    - MEDIUM: sink: inherit from caller fmt in ring_write() when rings didn't set one\n    - MINOR: sink: add sink_new_from_srv() function\n    - MAJOR: log: introduce log backends\n    - MINOR: log/balance: support for the \"sticky\" lb algorithm\n    - MINOR: log/balance: support for the \"random\" lb algorithm\n    - MINOR: lbprm: support for the \"none\" hash-type function\n    - MINOR: lbprm: compute the hash avalanche in gen_hash()\n    - MINOR: sample: add sample_process_cnv() function\n    - MEDIUM: log/balance: support for the \"hash\" lb algorithm\n    - REGTEST: add a test for log-backend used as a log target\n    - MINOR: server: introduce \"log-bufsize\" kw\n    - BUG/MEDIUM: stconn: Report a send activity everytime data were sent\n    - BUG/MEDIUM: applet: Report a send activity everytime data were sent\n    - BUG/MINOR: mux-h1: Send a 400-bad-request on shutdown before the first request\n    - MINOR: support for http-response set-timeout\n    - BUG/MINOR: mux-h2: make up other blocked streams upon removal from list\n    - DEBUG: pool: store the memprof bin on alloc() and update it on free()\n    - BUG/MEDIUM: quic_conn: let the scheduler kill the task when needed\n    - CLEANUP: hlua: Remove dead-code on error path in hlua_socket_new()\n    - BUG/MEDIUM: mux-h1: do not forget TLR/EOT even when no data is sent\n    - BUG/MINOR: htpp-ana/stats: Specify that HTX redirect messages have a C-L header\n    - BUG/MEDIUM: mux-h2: Don't report an error on shutr if a shutw is pending\n    - MEDIUM: stconn/channel: Move pipes used for the splicing in the SE descriptors\n    - MINOR: stconn: Start to introduce mux-to-mux fast-forwarding notion\n    - MINOR: stconn: Extend iobuf to handle a buffer in addition to a pipe\n    - MINOR: connection: Add new mux callbacks to perform data fast-forwarding\n    - MINOR: stconn: Temporarily remove kernel splicing support\n    - MINOR: mux-pt: Temporarily remove splicing support\n    - MINOR: mux-h1: Temporarily remove splicing support\n    - MINOR: connection: Remove mux callbacks about splicing\n    - MEDIUM: stconn: Add mux-to-mux fast-forward support\n    - MINOR: mux-h1: Use HTX extra field only for responses with known length\n    - MEDIUM: mux-h1: Properly handle state transitions of chunked outgoing messages\n    - MEDIUM: raw-sock: Specifiy amount of data to send via snd_pipe callback\n    - MINOR: mux-h1: Add function to add size of a chunk to an outgoind message\n    - MEDIUM: mux-h1: Simplify zero-copy on sending path\n    - MEDIUM: mux-h1: Simplify payload formatting based on HTX blocks on sending path\n    - MEDIUM: mux-h1: Add fast-forwarding support\n    - MINOR: h2: Set the BODYLESS_RESP flag on the HTX start-line if necessary\n    - MEDIUM: mux-h2: Add consumer-side fast-forwarding support\n    - MEDIUM: channel: don't look at iobuf to report an empty channel\n    - MINOR: tree-wide: Only rely on co_data() to check channel emptyness\n    - REGTESTS: Reenable HTTP tests about splicing\n    - CLEAN: mux-h1: Remove useless __maybe_unused attribute on h1_make_chunk()\n    - MEDIUM: mux-pt: Add fast-forwarding support\n    - MINOR: global: Add an option to disable the zero-copy forwarding\n    - BUILD: mux-h1: Fix build without kernel splicing support\n    - REORG: stconn/muxes: Rename init step in fast-forwarding\n    - MINOR: dgram: allow to set rcv/sndbuf for dgram sockets as well\n    - BUG/MINOR: mux-h2: fix http-request and http-keep-alive timeouts again\n    - BUG/MINOR: trace: fix trace parser error reporting\n    - BUG/MEDIUM: peers: Be sure to always refresh recconnect timer in sync task\n    - BUG/MEDIUM: peers: Fix synchro for huge number of tables\n    - MINOR: cfgparse: forbid mixing reverse and standard listeners\n    - MINOR: listener: add nbconn kw for reverse connect\n    - MINOR: server: convert @reverse to rev@ standard format\n    - MINOR: cfgparse: rename \"rev@\" prefix to \"rhttp@\"\n    - REGTESTS: remove maxconn from rhttp bind line\n    - MINOR: listener: forbid most keywords for reverse HTTP bind\n    - MINOR: sample: Added support for Arrays in sample_conv_json_query in sample.c\n    - MINOR: mux-h2/traces: explicitly show the error/refused stream states\n    - MINOR: mux-h2/traces: clarify the \"rejected H2 request\" event\n    - BUG/MINOR: mux-h2: commit the current stream ID even on reject\n    - BUG/MINOR: mux-h2: update tracked counters with req cnt/req err\n\n2023/10/06 : 2.9-dev7\n    - MINOR: support for http-request set-timeout client\n    - BUG/MINOR: mux-quic: remove full demux flag on ncbuf release\n    - CLEANUP: freq_ctr: make all freq_ctr readers take a const\n    - CLEANUP: stream: make the dump code not depend on the CLI appctx\n    - MINOR: stream: split stats_dump_full_strm_to_buffer() in two\n    - CLEANUP: stream: use const filters in the dump function\n    - CLEANUP: stream: make strm_dump_to_buffer() take a const stream\n    - MINOR: stream: make strm_dump_to_buffer() take an arbitrary buffer\n    - MINOR: stream: make strm_dump_to_buffer() show the list of filters\n    - MINOR: stream: make stream_dump() always multi-line\n    - MINOR: streams: add support for line prefixes to strm_dump_to_buffer()\n    - MEDIUM: stream: now provide full stream dumps in case of loops\n    - MINOR: debug: use the more detailed stream dump in panics\n    - CLEANUP: stream: remove the now unused stream_dump() function\n    - Revert \"BUG/MEDIUM: quic: missing check of dcid for init pkt including a token\"\n    - MINOR: stream: fix output alignment of stuck thread dumps\n    - BUG/MINOR: proto_reverse_connect: fix FD leak on connection error\n    - BUG/MINOR: tcp_act: fix attach-srv rule ACL parsing\n    - MINOR: connection: define error for reverse connect\n    - MINOR: connection: define mux flag for reverse support\n    - MINOR: tcp_act: remove limitation on protocol for attach-srv\n    - BUG/MINOR: proto_reverse_connect: fix FD leak upon connect\n    - BUG/MAJOR: plock: fix major bug in pl_take_w() introduced with EBO\n    - Revert \"MEDIUM: sample: Small fix in function check_operator for eror reporting\"\n    - DOC: sample: Add a comment in 'check_operator' to explain why 'vars_check_arg' should ignore the 'err' buffer\n    - DEV: sslkeylogger: handle file opening error\n    - MINOR: quic: define quic-socket bind setting\n    - MINOR: quic: handle perm error on bind during runtime\n    - MINOR: backend: refactor specific source address allocation\n    - MINOR: proto_reverse_connect: support source address setting\n    - BUILD: pool: Fix GCC error about potential null pointer dereference\n    - MINOR: hlua: Set context's appctx when the lua socket is created\n    - MINOR: hlua: Don't preform operations on a not connected socket\n    - MINOR: hlua: Save the lua socket's timeout in its context\n    - MINOR: hlua: Save the lua socket's server in its context\n    - MINOR: hlua: Test the hlua struct first when the lua socket is connecting\n    - BUG/MEDIUM: hlua: Initialize appctx used by a lua socket on connect only\n    - DEBUG: mux-h1: Fix event label from trace messages about payload formatting\n    - BUG/MINOR: mux-h1: Handle read0 in rcv_pipe() only when data receipt was tried\n    - BUG/MINOR: mux-h1: Ignore C-L when sending H1 messages if T-E is also set\n    - BUG/MEDIUM: h1: Ignore C-L value in the H1 parser if T-E is also set\n    - REGTESTS: filters: Don't set C-L header in the successful response to CONNECT\n    - MINOR: mux-h1: Add flags if outgoing msg contains a header about its payload\n    - MINOR: mux-h1: Rely on H1S_F_HAVE_CHNK to add T-E in outgoing messages\n    - BUG/MEDIUM: mux-h1: Add C-L header in outgoing message if it was removed\n    - BUG/MEDIUM: mux-h1; Ignore headers modifications about payload representation\n    - BUG/MINOR: h1-htx: Keep flags about C-L/T-E during HEAD response parsing\n    - MINOR: h1-htx: Declare successful tunnel establishment as bodyless\n    - BUILD: quic: allow USE_QUIC to work with AWSLC\n    - CI: github: add USE_QUIC=1 to aws-lc build\n    - BUG/MINOR: hq-interop: simplify parser requirement\n    - MEDIUM: cache: Add \"Origin\" header to secondary cache key\n    - MINOR: haproxy: permit to register features during boot\n    - MINOR: tcp_rules: tcp-{request,response} requires TCP or HTTP mode\n    - MINOR: stktable: \"stick\" requires TCP or HTTP mode\n    - MINOR: filter: \"filter\" requires TCP or HTTP mode\n    - MINOR: backend/balance: \"balance\" requires TCP or HTTP mode\n    - MINOR: flt_http_comp: \"compression\" requires TCP or HTTP mode\n    - MINOR: http_htx/errors: prevent the use of some keywords when not in tcp/http mode\n    - MINOR: fcgi-app: \"use-fcgi-app\" requires TCP or HTTP mode\n    - MINOR: cfgparse-listen: \"http-send-name-header\" requires TCP or HTTP mode\n    - MINOR: cfgparse-listen: \"dynamic-cookie-key\" requires TCP or HTTP mode\n    - MINOR: proxy: dynamic-cookie CLIs require TCP or HTTP mode\n    - MINOR: cfgparse-listen: \"http-reuse\" requires TCP or HTTP mode\n    - MINOR: proxy: report a warning for max_ka_queue in proxy_cfg_ensure_no_http()\n    - MINOR: cfgparse-listen: warn when use-server rules is used in wrong mode\n    - DOC: config: unify \"log\" directive doc\n    - MINOR: sink/log: fix some typos around postparsing logic\n    - MINOR: sink: remove useless check after sink creation\n    - MINOR: sink: don't rely on p->parent in sink appctx\n    - MINOR: sink: don't rely on forward_px to init sink forwarding\n    - MINOR: sink: refine forward_px usage\n    - MINOR: sink: function to add new sink servers\n    - BUG/MEDIUM: stconn: Fix comparison sign in sc_need_room()\n    - BUG/MEDIUM: actions: always apply a longest match on prefix lookup\n\n2023/09/22 : 2.9-dev6\n    - BUG/MINOR: quic: fdtab array underflow access\n    - DEBUG: pools: always record the caller for uncached allocs as well\n    - DEBUG: pools: pass the caller pointer to the check functions and macros\n    - DEBUG: pools: make pool_check_pattern() take a pointer to the pool\n    - DEBUG: pools: inspect pools on fatal error and dump information found\n    - BUG/MEDIUM: quic: quic_cc_conn ->cntrs counters unreachable\n    - DEBUG: pools: also print the item's pointer when crashing\n    - DEBUG: pools: also print the value of the tag when it doesn't match\n    - DEBUG: pools: print the contents surrounding the expected tag location\n    - MEDIUM: pools: refine pool size rounding\n    - BUG/MEDIUM: hlua: don't pass stale nargs argument to lua_resume()\n    - BUG/MINOR: hlua/init: coroutine may not resume itself\n    - BUG/MEDIUM: mux-fcgi: Don't swap trash and dbuf when handling STDERR records\n    - BUG/MINOR: promex: fix backend_agg_check_status\n    - BUG/MEDIUM: master/cli: Pin the master CLI on the first thread of the group 1\n    - MAJOR: import: update mt_list to support exponential back-off\n    - CLEANUP: pools: simplify the pool expression when no pool was matched in dump\n    - MINOR: samples: implement bytes_in and bytes_out samples\n    - DOC: configuration: add %[req.ver] sample to %HV\n    - BUG/MINOR: quic: Leak of frames to send.\n    - DOC: configuration: add %[query] to %HQ\n    - BUG/MINOR: freq_ctr: fix possible negative rate with the scaled API\n    - BUG/MAJOR: mux-h2: Report a protocol error for any DATA frame before headers\n    - BUILD: quic: fix build on centos 8 and USE_QUIC_OPENSSL_COMPAT\n    - Revert \"MAJOR: import: update mt_list to support exponential back-off\"\n    - BUG/MINOR: server: add missing free for server->rdr_pfx\n    - REGTESTS: ssl: skip OCSP test w/ WolfSSL\n    - REGTESTS: ssl: skip generate-certificates test w/ wolfSSL\n    - MINOR: logs: clarify the check of the log range\n    - MINOR: log: remove the unused curr_idx in struct smp_log_range\n    - CLEANUP: logs: rename a confusing local variable \"curr_rg\" to \"smp_rg\"\n    - MINOR: logs: use a single index to store the current range and index\n    - MEDIUM: logs: atomically check and update the log sample index\n    - CLEANUP: ring: rename the ring lock \"RING_LOCK\" instead of \"LOGSRV_LOCK\"\n    - BUG/MEDIUM: http-ana: Try to handle response before handling server abort\n    - MEDIUM: tools/ip: v4tov6() and v6tov4() rework\n    - MINOR: pattern/ip: offload ip conversion logic to helper functions\n    - MINOR: pattern: fix pat_{parse,match}_ip() function comments\n    - MINOR: pattern/ip: simplify pat_match_ip() function\n    - BUG/MEDIUM: server/cli: don't delete a dynamic server that has streams\n    - MINOR: hlua: Add support for the \"http-after-res\" action\n    - BUG/MINOR: proto_reverse_connect: fix preconnect with startup name resolution\n    - MINOR: proto_reverse_connect: prevent transparent server for pre-connect\n    - CI: cirrus-ci: display gdb bt if any\n    - MEDIUM: sample: Enhances converter \"bytes\" to take variable names as arguments\n    - MEDIUM: sample: Small fix in function check_operator for eror reporting\n    - MINOR: quic: handle external extra CIDs generator.\n    - BUG/MINOR: proto_reverse_connect: set default maxconn\n    - MINOR: proto_reverse_connect: refactor preconnect failure\n    - MINOR: proto_reverse_connect: remove unneeded wakeup\n    - MINOR: proto_reverse_connect: emit log for preconnect\n\n2023/09/08 : 2.9-dev5\n    - BUG/MEDIUM: mux-h2: fix crash when checking for reverse connection after error\n    - BUILD: import: guard plock.h against multiple inclusion\n    - BUILD: pools: import plock.h to build even without thread support\n    - BUG/MINOR: ssl/cli: can't find \".crt\" files when replacing a certificate\n    - BUG/MINOR: stream: protect stream_dump() against incomplete streams\n    - DOC: config: mention uid dependency on the tune.quic.socket-owner option\n    - MEDIUM: capabilities: enable support for Linux capabilities\n    - CLEANUP/MINOR: connection: Improve consistency of PPv2 related constants\n    - MEDIUM: connection: Generic, list-based allocation and look-up of PPv2 TLVs\n    - MEDIUM: sample: Add fetch for arbitrary TLVs\n    - MINOR: sample: Refactor fc_pp_authority by wrapping the generic TLV fetch\n    - MINOR: sample: Refactor fc_pp_unique_id by wrapping the generic TLV fetch\n    - MINOR: sample: Add common TLV types as constants for fc_pp_tlv\n    - MINOR: ssl_sock: avoid iterating realloc(+1) on stored context\n    - DOC: ssl: add some comments about the non-obvious session allocation stuff\n    - CLEANUP: ssl: keep a pointer to the server in ssl_sock_init()\n    - MEDIUM: ssl_sock: always use the SSL's server name, not the one from the tid\n    - MEDIUM: server/ssl: place an rwlock in the per-thread ssl server session\n    - MINOR: server/ssl: maintain an index of the last known valid SSL session\n    - MINOR: server/ssl: clear the shared good session index on failure\n    - MEDIUM: server/ssl: pick another thread's session when we have none yet\n    - MINOR: activity: report the current run queue size\n    - BUG/MINOR: checks: do not queue/wake a bounced check\n    - MINOR: checks: start the checks in sleeping state\n    - MINOR: checks: pin the check to its thread upon wakeup\n    - MINOR: check: remember when we migrate a check\n    - MINOR: check/activity: collect some per-thread check activity stats\n    - MINOR: checks: maintain counters of active checks per thread\n    - MINOR: check: also consider the random other thread's active checks\n    - MEDIUM: checks: search more aggressively for another thread on overload\n    - MEDIUM: checks: implement a queue in order to limit concurrent checks\n    - MINOR: checks: also consider the thread's queue for rebalancing\n    - DEBUG: applet: Properly report opposite SC expiration dates in traces\n    - BUG/MEDIUM: stconn: Update stream expiration date on blocked sends\n    - BUG/MINOR: stconn: Don't report blocked sends during connection establishment\n    - BUG/MEDIUM: stconn: Wake applets on sending path if there is a pending shutdown\n    - BUG/MEDIUM: stconn: Don't block sends if there is a pending shutdown\n    - BUG/MINOR: quic: Possible skipped RTT sampling\n    - MINOR: quic: Add a trace to quic_release_frm()\n    - BUG/MAJOR: quic: Really ignore malformed ACK frames.\n    - BUG/MINOR: quic: Unchecked pointer to packet number space dereferenced\n    - BUG/MEDIUM: connection: fix pool free regression with recent ppv2 TLV patches\n    - BUG/MEDIUM: h1-htx: Ensure chunked parsing with full output buffer\n    - BUG/MINOR: stream: further protect stream_dump() against incomplete sessions\n    - DOC: configuration: update examples for req.ver\n    - MINOR: properly mark the end of the CLI command in error messages\n    - BUILD: ssl: Build with new cryptographic library AWS-LC\n    - REGTESTS: ssl: skip ssl_dh test with AWS-LC\n    - BUILD: bug: make BUG_ON() void to avoid a rare warning\n    - BUILD: checks: shut up yet another stupid gcc warning\n    - MINOR: cpuset: add ha_cpuset_isset() to check for the presence of a CPU in a set\n    - MINOR: cpuset: add ha_cpuset_or() to bitwise-OR two CPU sets\n    - MINOR: cpuset: centralize a reliable bound cpu detection\n    - MEDIUM: threads: detect incomplete CPU bindings\n    - MEDIUM: threads: detect excessive thread counts vs cpu-map\n    - BUILD: quic: Compilation issue on 32-bits systems with quic_may_send_bytes()\n    - BUG/MINOR: quic: Unchecked pointer to Handshake packet number space\n    - MINOR: global: export the display_version() symbol\n    - MEDIUM: mworker: display a more accessible message when a worker crash\n    - MINOR: httpclient: allow to configure the retries\n    - MINOR: httpclient: allow to configure the timeout.connect\n    - BUG/MINOR: quic: Wrong RTT adjusments\n    - BUG/MINOR: quic: Wrong RTT computation (srtt and rrt_var)\n    - BUG/MINOR: stconn: Don't inhibit shutdown on connection on error\n    - BUG/MEDIUM: applet: Fix API for function to push new data in channels buffer\n    - BUG/MEDIUM: stconn: Report read activity when a stream is attached to front SC\n    - BUG/MEDIUM: applet: Report an error if applet request more room on aborted SC\n    - BUG/MEDIUM: stconn/stream: Forward shutdown on write timeout\n    - NUG/MEDIUM: stconn: Always update stream's expiration date after I/O\n    - BUG/MINOR: applet: Always expect data when CLI is waiting for a new command\n    - BUG/MINOR: ring/cli: Don't expect input data when showing events\n    - BUG/MINOR: quic: Dereferenced unchecked pointer to Handshke packet number space\n    - BUG/MINOR: hlua/action: incorrect message on E_YIELD error\n    - MINOR: http_ana: position the FINAL flag for http_after_res execution\n    - CI: scripts: add support to build-ssl.sh to download and build AWS-LC\n    - CI: add support to matrix.py to determine the latest AWS-LC release\n    - CI: Update matrix.py so all code is contained in functions.\n    - CI: github: Add a weekly CI run building with AWS-LC\n    - MINOR: ring: add a function to compute max ring payload\n    - BUG/MEDIUM: ring: adjust maxlen consistency check\n    - MINOR: sink: simplify post_sink_resolve function\n    - MINOR: log/sink: detect when log maxlen exceeds sink size\n    - MINOR: sink: inform the user when logs will be implicitly truncated\n    - MEDIUM: sink: don't perform implicit truncations when maxlen is not set\n    - MINOR: log: move log-forwarders cleanup in log.c\n    - MEDIUM: httpclient/logs: rely on per-proxy post-check instead of global one\n    - MINOR: log: add dup_logsrv() helper function\n    - MEDIUM: log/sink: make logsrv postparsing more generic\n    - MEDIUM: fcgi-app: properly postresolve logsrvs\n    - MEDIUM: spoe-agent: properly postresolve log rings\n    - MINOR: sink: add helper function to deallocate sink struct\n    - MEDIUM: sink/ring: introduce high level ring creation helper function\n    - MEDIUM: sink: add sink_finalize() function\n    - CLEANUP: log: remove unnecessary trim in __do_send_log\n    - MINOR: cache: Change hash function in default normalizer used in case of \"vary\"\n    - MINOR: tasks/stats: report the number of niced tasks in \"show info\"\n    - CI: Update to actions/checkout@v4\n    - MINOR: ssl: add support for 'curves' keyword on server lines\n    - BUG/MINOR: quic: Wrong cluster secret initialization\n    - CLEANUP: quic: Remove useless free_quic_tx_pkts() function.\n    - MEDIUM: init: initialize the trash earlier\n    - MINOR: tools: add function read_line_to_trash() to read a line of a file\n    - MINOR: cfgparse: use read_line_from_trash() to read from /sys\n    - MEDIUM: cfgparse: assign NUMA affinity to cpu-maps\n    - MINOR: cpuset: dynamically allocate cpu_map\n    - REORG: cpuset: move parse_cpu_set() and parse_cpumap() to cpuset.c\n    - CI: musl: highlight section if there are coredumps\n    - CI: musl: drop shopt in workflow invocation\n\n2023/08/25 : 2.9-dev4\n    - DEV: flags/show-sess-to-flags: properly decode fd.state\n    - BUG/MINOR: stktable: allow sc-set-gpt(0) from tcp-request connection\n    - BUG/MINOR: stktable: allow sc-add-gpc from tcp-request connection\n    - DOC: typo: fix sc-set-gpt references\n    - SCRIPTS: git-show-backports: automatic ref and base detection with -m\n    - REGTESTS: Do not use REQUIRE_VERSION for HAProxy 2.5+ (3)\n    - DOC: jwt: Add explicit list of supported algorithms\n    - BUILD: Makefile: add the USE_QUIC option to make help\n    - BUILD: Makefile: add USE_QUIC_OPENSSL_COMPAT to make help\n    - BUILD: Makefile: realigned USE_* options in make help\n    - DEV: makefile: fix POSIX compatibility for \"range\" target\n    - IMPORT: plock: also support inlining the int code\n    - IMPORT: plock: always expose the inline version of the lock wait function\n    - IMPORT: lorw: support inlining the wait call\n    - MINOR: threads: inline the wait function for pthread_rwlock emulation\n    - MINOR: atomic: make sure to always relax after a failed CAS\n    - MINOR: pools: use EBO to wait for unlock during pool_flush()\n    - BUILD/IMPORT: fix compilation with PLOCK_DISABLE_EBO=1\n    - MINOR: quic+openssl_compat: Do not start without \"limited-quic\"\n    - MINOR: quic+openssl_compat: Emit an alert for \"allow-0rtt\" option\n    - BUG/MINOR: quic: allow-0rtt warning must only be emitted with quic bind\n    - BUG/MINOR: quic: ssl_quic_initial_ctx() uses error count not error code\n    - MINOR: pattern: do not needlessly lookup the LRU cache for empty lists\n    - IMPORT: xxhash: update xxHash to version 0.8.2\n    - MINOR: proxy: simplify parsing 'backend/server'\n    - MINOR: connection: centralize init/deinit of backend elements\n    - MEDIUM: connection: implement passive reverse\n    - MEDIUM: h2: reverse connection after SETTINGS reception\n    - MINOR: server: define reverse-connect server\n    - MINOR: backend: only allow reuse for reverse server\n    - MINOR: tcp-act: parse 'tcp-request attach-srv' session rule\n    - REGTESTS: provide a reverse-server test\n    - MINOR: tcp-act: define optional arg name for attach-srv\n    - MINOR: connection: use attach-srv name as SNI reuse parameter on reverse\n    - REGTESTS: provide a reverse-server test with name argument\n    - MINOR: proto: define dedicated protocol for active reverse connect\n    - MINOR: connection: extend conn_reverse() for active reverse\n    - MINOR: proto_reverse_connect: parse rev@ addresses for bind\n    - MINOR: connection: prepare init code paths for active reverse\n    - MEDIUM: proto_reverse_connect: bootstrap active reverse connection\n    - MINOR: proto_reverse_connect: handle early error before reversal\n    - MEDIUM: h2: implement active connection reversal\n    - MEDIUM: h2: prevent stream opening before connection reverse completed\n    - REGTESTS: write a full reverse regtest\n    - BUG/MINOR: h2: fix reverse if no timeout defined\n    - CI: fedora: fix \"dnf\" invocation syntax\n    - BUG/MINOR: hlua_fcn: potentially unsafe stktable_data_ptr usage\n    - DOC: lua: fix Sphinx warning from core.get_var()\n    - DOC: lua: fix core.register_action typo\n    - BUG/MINOR: ssl_sock: fix possible memory leak on OOM\n    - MEDIUM: map/acl: Improve pat_ref_set() efficiency (for \"set-map\", \"add-acl\" action perfs)\n    - MEDIUM: map/acl: Improve pat_ref_set_elt() efficiency (for \"set-map\", \"add-acl\"action perfs)\n    - MEDIUM: map/acl: Accelerate several functions using pat_ref_elt struct ->head list\n    - MEDIUM: map/acl: Replace map/acl spin lock by a read/write lock.\n    - DOC: map/acl: Remove the comments about map/acl performance issue\n    - DOC: Explanation of be_name and be_id fetches\n    - MINOR: connection: simplify removal of idle conns from their trees\n    - MINOR: server: move idle tree insert in a dedicated function\n    - MAJOR: connection: purge idle conn by last usage\n\n2023/08/12 : 2.9-dev3\n    - BUG/MINOR: ssl: OCSP callback only registered for first SSL_CTX\n    - BUG/MEDIUM: h3: Properly report a C-L header was found to the HTX start-line\n    - MINOR: sample: add pid sample\n    - MINOR: sample: implement act_conn sample fetch\n    - MINOR: sample: accept_date / request_date return %Ts / %tr timestamp values\n    - MEDIUM: sample: implement us and ms variant of utime and ltime\n    - BUG/MINOR: sample: check alloc_trash_chunk() in conv_time_common()\n    - DOC: configuration: describe Td in Timing events\n    - MINOR: sample: implement the T* timer tags from the log-format as fetches\n    - DOC: configuration: add sample fetches for timing events\n    - BUG/MINOR: quic: Possible crash when acknowledging Initial v2 packets\n    - MINOR: quic: Export QUIC traces code from quic_conn.c\n    - MINOR: quic: Export QUIC CLI code from quic_conn.c\n    - MINOR: quic: Move TLS related code to quic_tls.c\n    - MINOR: quic: Add new \"QUIC over SSL\" C module.\n    - MINOR: quic: Add a new quic_ack.c C module for QUIC acknowledgements\n    - CLEANUP: quic: Defined but no more used function (quic_get_tls_enc_levels())\n    - MINOR: quic: Split QUIC connection code into three parts\n    - CLEANUP: quic: quic_conn struct cleanup\n    - MINOR: quic; Move the QUIC frame pool to its proper location\n    - BUG/MINOR: chunk: fix chunk_appendf() to not write a zero if buffer is full\n    - BUG/MEDIUM: h3: Be sure to handle fin bit on the last DATA frame\n    - DOC: configuration: rework the custom log format table\n    - BUG/MINOR: quic+openssl_compat: Non initialized TLS encryption levels\n    - CLEANUP: acl: remove cache_idx from acl struct\n    - REORG: cfgparse: extract curproxy as a global variable\n    - MINOR: acl: add acl() sample fetch\n    - BUILD: cfgparse: keep a single \"curproxy\"\n    - BUG/MEDIUM: bwlim: Reset analyse expiration date when then channel analyse ends\n    - MEDIUM: stream: Reset response analyse expiration date if there is no analyzer\n    - BUG/MINOR: htx/mux-h1: Properly handle bodyless responses when splicing is used\n    - BUG/MEDIUM: quic: consume contig space on requeue datagram\n    - BUG/MINOR: http-client: Don't forget to commit changes on HTX message\n    - CLEANUP: stconn: Move comment about sedesc fields on the field line\n    - REGTESTS: http: Create a dedicated script to test spliced bodyless responses\n    - REGTESTS: Test SPLICE feature is enabled to execute script about splicing\n    - BUG/MINOR: quic: reappend rxbuf buffer on fake dgram alloc error\n    - BUILD: quic: fix wrong potential NULL dereference\n    - MINOR: h3: abort request if not completed before full response\n    - BUG/MAJOR: http-ana: Get a fresh trash buffer for each header value replacement\n    - CLEANUP: quic: Remove quic_path_room().\n    - MINOR: quic: Amplification limit handling sanitization.\n    - MINOR: quic: Move some counters from [rt]x quic_conn anonymous struct\n    - MEDIUM: quic: Send CONNECTION_CLOSE packets from a dedicated buffer.\n    - MINOR: quic: Use a pool for the connection ID tree.\n    - MEDIUM: quic: Allow the quic_conn memory to be asap released.\n    - MINOR: quic: Release asap quic_conn memory (application level)\n    - MINOR: quic: Release asap quic_conn memory from ->close() xprt callback.\n    - MINOR: quic: Warning for OpenSSL wrapper QUIC bindings without \"limited-quic\"\n    - REORG: http: move has_forbidden_char() from h2.c to http.h\n    - BUG/MAJOR: h3: reject header values containing invalid chars\n    - MINOR: mux-h2/traces: also suggest invalid header upon parsing error\n    - MINOR: ist: add new function ist_find_range() to find a character range\n    - MINOR: http: add new function http_path_has_forbidden_char()\n    - MINOR: h2: pass accept-invalid-http-request down the request parser\n    - REGTESTS: http-rules: add accept-invalid-http-request for normalize-uri tests\n    - BUG/MINOR: h1: do not accept '#' as part of the URI component\n    - BUG/MINOR: h2: reject more chars from the :path pseudo header\n    - BUG/MINOR: h3: reject more chars from the :path pseudo header\n    - REGTESTS: http-rules: verify that we block '#' by default for normalize-uri\n    - DOC: clarify the handling of URL fragments in requests\n    - BUG/MAJOR: http: reject any empty content-length header value\n    - BUG/MINOR: http: skip leading zeroes in content-length values\n    - BUG/MEDIUM: mux-h1: fix incorrect state checking in h1_process_mux()\n    - BUG/MEDIUM: mux-h1: do not forget EOH even when no header is sent\n    - BUILD: mux-h1: shut a build warning on clang from previous commit\n    - DEV: makefile: add a new \"range\" target to iteratively build all commits\n    - CI: do not use \"groupinstall\" for Fedora Rawhide builds\n    - CI: get rid of travis-ci wrapper for Coverity scan\n    - BUG/MINOR: quic: mux started when releasing quic_conn\n    - BUG/MINOR: quic: Possible crash in quic_cc_conn_io_cb() traces.\n    - MINOR: quic: Add a trace for QUIC conn fd ready for receive\n    - BUG/MINOR: quic: Possible crash when issuing \"show fd/sess\" CLI commands\n    - BUG/MINOR: quic: Missing tasklet (quic_cc_conn_io_cb) memory release (leak)\n    - BUG/MEDIUM: quic: fix tasklet_wakeup loop on connection closing\n    - BUG/MINOR: hlua: fix invalid use of lua_pop on error paths\n    - MINOR: hlua: add hlua_stream_ctx_prepare helper function\n    - BUG/MEDIUM: hlua: streams don't support mixing lua-load with lua-load-per-thread\n    - MAJOR: threads/plock: update the embedded library again\n    - MINOR: stick-table: move the task_queue() call outside of the lock\n    - MINOR: stick-table: move the task_wakeup() call outside of the lock\n    - MEDIUM: stick-table: change the ref_cnt atomically\n    - MINOR: stick-table: better organize the struct stktable\n    - MEDIUM: peers: update ->commitupdate out of the lock using a CAS\n    - MEDIUM: peers: drop then re-acquire the wrlock in peer_send_teachmsgs()\n    - MEDIUM: peers: only read-lock peer_send_teachmsgs()\n    - MEDIUM: stick-table: use a distinct lock for the updates tree\n    - MEDIUM: stick-table: touch updates under an upgradable read lock\n    - MEDIUM: peers: drop the stick-table lock before entering peer_send_teachmsgs()\n    - MINOR: stick-table: move the update lock into its own cache line\n    - CLEANUP: stick-table: slightly reorder the stktable struct\n    - BUILD: defaults: use __WORDSIZE not LONGBITS for MAX_THREADS_PER_GROUP\n    - MINOR: tools: make ptr_hash() support 0-bit outputs\n    - MINOR: tools: improve ptr hash distribution on 64 bits\n    - OPTIM: tools: improve hash distribution using a better prime seed\n    - OPTIM: pools: use exponential back-off on shared pool allocation/release\n    - OPTIM: pools: make pool_get_from_os() / pool_put_to_os() not update ->allocated\n    - MINOR: pools: introduce the use of multiple buckets\n    - MEDIUM: pools: spread the allocated counter over a few buckets\n    - MEDIUM: pools: move the used counter over a few buckets\n    - MEDIUM: pools: move the needed_avg counter over a few buckets\n    - MINOR: pools: move the failed allocation counter over a few buckets\n    - MAJOR: pools: move the shared pool's free_list over multiple buckets\n    - MINOR: pools: make pool_evict_last_items() use pool_put_to_os_no_dec()\n    - BUILD: pools: fix build error on clang with inline vs forceinline\n\n2023/07/21 : 2.9-dev2\n    - BUG/MINOR: quic: Possible leak when allocating an encryption level\n    - BUG/MINOR: quic: Missing QUIC connection path member initialization\n    - BUILD: quic: Compilation fixes for some gcc warnings with -O1\n    - DOC: ssl: Fix typo in 'ocsp-update' option\n    - DOC: ssl: Add ocsp-update troubleshooting clues and emphasize on crt-list only aspect\n    - BUG/MINOR: tcp_sample: bc_{dst,src} return IP not INT\n    - MEDIUM: acl/sample: unify sample conv parsing in a single function\n    - MINOR: sample: introduce c_pseudo() conv function\n    - MEDIUM: sample: add missing ADDR=>? compatibility matrix entries\n    - MINOR: sample: fix ipmask sample definition\n    - MEDIUM: tree-wide: fetches that may return IPV4+IPV6 now return ADDR\n    - MEDIUM: sample: introduce 'same' output type\n    - BUG/MINOR: quic: Possible crash in \"show quic\" dumping packet number spaces\n    - BUG/MINOR: cache: A 'max-age=0' cache-control directive can be overriden by a s-maxage\n    - BUG/MEDIUM: sink: invalid server list in sink_new_from_logsrv()\n    - BUG/MINOR: http_ext: unhandled ERR_ABORT in proxy_http_parse_7239()\n    - BUG/MINOR: sink: missing sft free in sink_deinit()\n    - BUG/MINOR: ring: size warning incorrectly reported as fatal error\n    - BUG/MINOR: ring: maxlen warning reported as alert\n    - BUG/MINOR: log: LF upsets maxlen for UDP targets\n    - MINOR: sink/api: pass explicit maxlen parameter to sink_write()\n    - BUG/MEDIUM: log: improper use of logsrv->maxlen for buffer targets\n    - BUG/MINOR: log: fix missing name error message in cfg_parse_log_forward()\n    - BUG/MINOR: log: fix multiple error paths in cfg_parse_log_forward()\n    - BUG/MINOR: log: free errmsg on error in cfg_parse_log_forward()\n    - BUG/MINOR: sink: invalid sft free in sink_deinit()\n    - BUG/MINOR: sink: fix errors handling in cfg_post_parse_ring()\n    - BUG/MINOR: server: set rid default value in new_server()\n    - MINOR: hlua_fcn/mailers: handle timeout mail from mailers section\n    - BUG/MINOR: sink/log: properly deinit srv in sink_new_from_logsrv()\n    - EXAMPLES: maintain haproxy 2.8 retrocompatibility for lua mailers script\n    - BUG/MINOR: hlua_fcn/queue: use atomic load to fetch queue size\n    - BUG/MINOR: config: Remove final '\\n' in error messages\n    - BUG/MINOR: config: Lenient port configuration parsing\n    - BUG/MEDIUM: quic: token IV was not computed using a strong secret\n    - BUG/MINOR: quic: retry token remove one useless intermediate expand\n    - BUG/MEDIUM: quic: missing check of dcid for init pkt including a token\n    - BUG/MEDIUM: quic: timestamp shared in token was using internal time clock\n    - CLEANUP: quic: remove useless parameter 'key' from quic_packet_encrypt\n    - BUG/MINOR: hlua: hlua_yieldk ctx argument should support pointers\n    - BUG/MEDIUM: hlua_fcn/queue: bad pop_wait sequencing\n    - DOC: config: Fix fc_src description to state the source address is returned\n    - BUG/MINOR: sample: Fix wrong overflow detection in add/sub conveters\n    - BUG/MINOR: http: Return the right reason for 302\n    - MEDIUM: ssl: new sample fetch method to get curve name\n    - CI: add naming convention documentation\n    - CI: explicitely highlight VTest result section if there's something\n    - BUG/MINOR: quic: Unckecked encryption levels availability\n    - BUILD: quic: fix warning during compilation using gcc-6.5\n    - BUG/MINOR: hlua: add check for lua_newstate\n    - BUG/MINOR: h1-htx: Return the right reason for 302 FCGI responses\n    - MINOR: lua: Allow reading \"proc.\" scoped vars from LUA core.\n    - MINOR: cpuset: add cpu_map_configured() to know if a cpu-map was found\n    - BUG/MINOR: config: do not detect NUMA topology when cpu-map is configured\n    - BUG/MINOR: cpuset: remove the bogus \"proc\" from the cpu_map struct\n    - BUG/MINOR: init: set process' affinity even in foreground\n    - CLEANUP: cpuset: remove the unused proc_t1 field in cpu_map\n    - CLEANUP: config: make parse_cpu_set() return documented values\n    - BUG/MINOR: server: Don't warn on server resolution failure with init-addr none\n    - MINOR: peers: add peers keyword registration\n    - MINOR: quic: Stop storing the TX encoded transport parameters\n    - MINOR: quic: Dynamic allocation for negotiated Initial TLS cipher context.\n    - MINOR: quic: Release asap the negotiated Initial TLS context.\n    - MINOR: quic: Add traces to qc_may_build_pkt()\n    - MEDIUM: quic: Packet building rework.\n    - CLEANUP: quic: Remove a useless TLS related variable from quic_conn_io_cb().\n    - MEDIUM: quic: Handshake I/O handler rework.\n    - MINOR: quic: Add traces for qc_frm_free()\n    - MINOR: quic: add trace about pktns packet/frames releasing\n    - BUG/MINOR: quic: Missing parentheses around PTO probe variable.\n    - MINOR: quic: Ping from Initial pktns before reaching anti-amplification limit\n    - BUG/MINOR: server-state: Ignore empty files\n    - BUG/MINOR: server-state: Avoid warning on 'file not found'\n    - BUG/MEDIUM: listener: Acquire proxy's lock in relax_listener() if necessary\n    - MINOR: quic: QUIC openssl wrapper implementation\n    - MINOR: quic: Include QUIC opensssl wrapper header from TLS stacks compatibility header\n    - MINOR: quic: Do not enable O-RTT with USE_QUIC_OPENSSL_COMPAT\n    - MINOR: quic: Set the QUIC connection as extra data before calling SSL_set_quic_method()\n    - MINOR: quic: Do not enable 0RTT with SSL_set_quic_early_data_enabled()\n    - MINOR: quic: Add a compilation option for the QUIC OpenSSL wrapper\n    - MINOR: quic: Export some KDF functions (QUIC-TLS)\n    - MINOR: quic: Make ->set_encryption_secrets() be callable two times\n    - MINOR: quic: Initialize TLS contexts for QUIC openssl wrapper\n    - MINOR: quic: Call the keylog callback for QUIC openssl wrapper from SSL_CTX_keylog()\n    - MINOR: quic: Add a quic_openssl_compat struct to quic_conn struct\n    - MINOR: quic: Useless call to SSL_CTX_set_quic_method()\n    - MINOR: quic: SSL context initialization with QUIC OpenSSL wrapper.\n    - MINOR: quic: Missing encoded transport parameters for QUIC OpenSSL wrapper\n    - MINOR: quic: Add \"limited-quic\" new tuning setting\n    - DOC: quic: Add \"limited-quic\" new tuning setting\n    - DOC: install: Document how to build a limited support for QUIC\n\n2023/07/02 : 2.9-dev1\n    - BUG/MINOR: stats: Fix Lua's `get_stats` function\n    - MINOR: stats: protect against future stats fields omissions\n    - BUG/MINOR: stream: do not use client-fin/server-fin with HTX\n    - BUG/MINOR: quic: Possible crash when SSL session init fails\n    - CONTRIB: Add vi file extensions to .gitignore\n    - BUG/MINOR: spoe: Only skip sending new frame after a receive attempt\n    - BUG/MINOR: peers: Improve detection of config errors in peers sections\n    - REG-TESTS: stickiness: Delay haproxys start to properly resolv variables\n    - DOC: quic: fix misspelled tune.quic.socket-owner\n    - DOC: config: fix jwt_verify() example using var()\n    - DOC: config: fix rfc7239 converter examples (again)\n    - BUG/MINOR: cfgparse-tcp: leak when re-declaring interface from bind line\n    - BUG/MINOR: proxy: add missing interface bind free in free_proxy\n    - BUG/MINOR: proxy/server: free default-server on deinit\n    - BUG/MEDIUM: hlua: Use front SC to detect EOI in HTTP applets' receive functions\n    - BUG/MINOR: ssl: log message non thread safe in SSL Hanshake failure\n    - BUG/MINOR: quic: Wrong encryption level flags checking\n    - BUG/MINOR: quic: Address inversion in \"show quic full\"\n    - BUG/MINOR: server: inherit from netns in srv_settings_cpy()\n    - BUG/MINOR: namespace: missing free in netns_sig_stop()\n    - BUG/MINOR: quic: Missing initialization (packet number space probing)\n    - BUG/MINOR: quic: Possible crash in quic_conn_prx_cntrs_update()\n    - BUG/MINOR: quic: Possible endless loop in quic_lstnr_dghdlr()\n    - MINOR: quic: Remove pool_zalloc() from qc_new_conn()\n    - MINOR: quic: Remove pool_zalloc() from qc_conn_alloc_ssl_ctx()\n    - MINOR: quic: Remove pool_zalloc() from quic_dgram_parse()\n    - BUG/MINOR: quic: Missing transport parameters initializations\n    - BUG/MEDIUM: mworker: increase maxsock with each new worker\n    - BUG/MINOR: quic: ticks comparison without ticks API use\n    - BUG/MINOR: quic: Missing TLS secret context initialization\n    - DOC: Add tune.h2.be.* and tune.h2.fe.* options to table of contents\n    - DOC: Add tune.h2.max-frame-size option to table of contents\n    - DOC: Attempt to fix dconv parsing error for tune.h2.fe.initial-window-size\n    - REGTESTS: h1_host_normalization : Add a barrier to not mix up log messages\n    - MEDIUM: mux-h1: Split h1_process_mux() to make code more readable\n    - REORG: mux-h1: Rename functions to emit chunk size/crlf in the output buffer\n    - MINOR: mux-h1: Add function to append the chunk size to the output buffer\n    - MINOR: mux-h1: Add function to prepend the chunk crlf to the output buffer\n    - MEDIUM: filters/htx: Don't rely on HTX extra field if payload is filtered\n    - MEDIIM: mux-h1: Add splicing support for chunked messages\n    - REGTESTS: Add a script to test the kernel splicing with chunked messages\n    - CLEANUP: mux-h1: Remove useless __maybe_unused statement\n    - BUG/MINOR: http_ext: fix if-none regression in forwardfor option\n    - REGTEST: add an extra testcase for ifnone-forwardfor\n    - BUG/MINOR: mworker: leak of a socketpair during startup failure\n    - BUG/MINOR: quic: Prevent deadlock with CID tree lock\n    - MEDIUM: ssl: handle the SSL_ERROR_ZERO_RETURN during the handshake\n    - BUG/MINOR: ssl: SSL_ERROR_ZERO_RETURN returns CO_ER_SSL_EMPTY\n    - BUILD: mux-h1: silence a harmless fallthrough warning\n    - BUG/MEDIUM: quic: error checking buffer large enought to receive the retry tag\n    - MINOR: ssl: allow to change the server signature algorithm on server lines\n    - MINOR: ssl: allow to change the client-sigalgs on server lines\n    - BUG/MINOR: config: fix stick table duplicate name check\n    - BUG/MINOR: quic: Missing random bits in Retry packet header\n    - BUG/MINOR: quic: Wrong Retry paquet version field endianess\n    - BUG/MINOR: quic: Wrong endianess for version field in Retry token\n    - IMPORT: slz: implement a synchronous flush() operation\n    - MINOR: compression/slz: add support for a pure flush of pending bytes\n    - MINOR: quic: Move QUIC TLS encryption level related code (quic_conn_enc_level_init())\n    - MINOR: quic: Move QUIC encryption level structure definition\n    - MINOR: quic: Implement a packet number space identification function\n    - MINOR: quic: Move packet number space related functions\n    - MEDIUM: quic: Dynamic allocations of packet number spaces\n    - CLEANUP: quic: Remove qc_list_all_rx_pkts() defined but not used\n    - MINOR: quic: Add a pool for the QUIC TLS encryption levels\n    - MEDIUM: quic: Dynamic allocations of QUIC TLS encryption levels\n    - MINOR: quic: Reduce the maximum length of TLS secrets\n    - CLEANUP: quic: Remove two useless pools a low QUIC connection level\n    - MEDIUM: quic: Handle the RX in one pass\n    - MINOR: quic: Remove call to qc_rm_hp_pkts() from I/O callback\n    - CLEANUP: quic: Remove server specific about Initial packet number space\n    - MEDIUM: quic: Release encryption levels and packet number spaces asap\n    - CLEANUP: quic: Remove a useless test about discarded pktns (qc_handle_crypto_frm())\n    - MINOR: quic: Move the packet number space status at quic_conn level\n    - MINOR: quic: Drop packet with type for discarded packet number space.\n    - BUILD: quic: Add a DISGUISE() to please some compiler to qc_prep_hpkts() 1st parameter\n    - BUILD: debug: avoid a build warning related to epoll_wait() in debug code\n\n2023/05/31 : 2.9-dev0\n    - MINOR: version: mention that it's development again\n\n2023/05/31 : 2.8.0\n    - MINOR: compression: Improve the way Vary header is added\n    - BUILD: makefile: search for SSL_INC/wolfssl before SSL_INC\n    - MINOR: init: pre-allocate kernel data structures on init\n    - DOC: install: add details about WolfSSL\n    - BUG/MINOR: ssl_sock: add check for ha_meth\n    - BUG/MINOR: thread: add a check for pthread_create\n    - BUILD: init: print rlim_cur as regular integer\n    - DOC: install: specify the minimum openssl version recommended\n    - CLEANUP: mux-quic: remove unneeded fields in qcc\n    - MINOR: mux-quic: remove nb_streams from qcc\n    - MINOR: quic: fix stats naming for flow control BLOCKED frames\n    - BUG/MEDIUM: mux-quic: only set EOI on FIN\n    - BUG/MEDIUM: threads: fix a tiny race in thread_isolate()\n    - DOC: config: fix rfc7239 converter examples\n    - DOC: quic: remove experimental status for QUIC\n    - CLEANUP: mux-quic: rename functions for mux_ops\n    - CLEANUP: mux-quic: rename internal functions\n    - BUG/MINOR: mux-h2: refresh the idle_timer when the mux is empty\n    - DOC: config: Fix bind/server/peer documentation in the peers section\n    - BUILD: Makefile: use -pthread not -lpthread when threads are enabled\n    - CLEANUP: doc: remove 21 totally obsolete docs\n    - DOC: install: mention the common strict-aliasing warning on older compilers\n    - DOC: install: clarify a few points on the wolfSSL build method\n    - MINOR: quic: Add QUIC connection statistical counters values to \"show quic\"\n    - EXAMPLES: update the basic-config-edge file for 2.8\n    - MINOR: quic/cli: clarify the \"show quic\" help message\n    - MINOR: version: mention that it's LTS now.\n\n2023/05/24 : 2.8-dev13\n    - DOC: add size format section to manual\n    - CLEANUP: mux-quic/h3: complete BUG_ON with comments\n    - MINOR: quic: remove return val of quic_aead_iv_build()\n    - MINOR: quic: use WARN_ON for encrypt failures\n    - BUG/MINOR: quic: handle Tx packet allocation failure properly\n    - MINOR: quic: fix alignment of oneline show quic\n    - MEDIUM: stconn/applet: Allow SF_SL_EOS flag alone\n    - MEDIUM: stconn: make the SE_FL_ERR_PENDING to ERROR transition systematic\n    - DOC: internal: add a bit of documentation for the stconn closing conditions\n    - DOC/MINOR: config: Fix typo in description for `ssl_bc` in configuration.txt\n    - BUILD: quic: re-enable chacha20_poly1305 for libressl\n    - MINOR: mux-quic: set both EOI EOS for stream fin\n    - MINOR: mux-quic: only set EOS on RESET_STREAM recv\n    - MINOR: mux-quic: report error on stream-endpoint earlier\n    - BUILD: makefile: fix build issue on GNU make < 3.82\n    - BUG/MINOR: mux-h2: Check H2_SF_BODY_TUNNEL on H2S flags and not demux frame ones\n    - MINOR: mux-h2: Set H2_SF_ES_RCVD flag when decoding the HEADERS frame\n    - MINOR: mux-h2: Add a function to propagate termination flags from h2s to SE\n    - BUG/MEDIUM: mux-h2: Propagate termination flags when frontend SC is created\n    - DEV: add a Lua helper script for SSL keys logging\n    - CLEANUP: makefile: don't display a dummy features list without a target\n    - BUILD: makefile: do not erase build options for some build options\n    - MINOR: quic: Add low level traces (addresses, DCID)\n    - BUG/MINOR: quic: Wrong token length check (quic_generate_retry_token())\n    - BUG/MINOR: quic: Missing Retry token length on receipt\n    - MINOR: quic: Align \"show quic\" command help information\n    - CLEANUP: quic: Indentation fix quic_rx_pkt_retrieve_conn()\n    - CLEANUP: quic: Useless tests in qc_rx_pkt_handle()\n    - MINOR: quic: Add some counters at QUIC connection level\n    - MINOR: quic: Add a counter for sent packets\n    - MINOR: hlua: hlua_smp2lua_str() may LJMP\n    - MINOR: hlua: hlua_smp2lua() may LJMP\n    - MINOR: hlua: hlua_arg2lua() may LJMP\n    - DOC: hlua: document hlua_lua2arg() function\n    - DOC: hlua: document hlua_lua2smp() function\n    - BUG/MINOR: hlua: unsafe hlua_lua2smp() usage\n    - BUILD: makefile: commit the tiny FreeBSD makefile stub\n    - BUILD: makefile: fix build options when building tools first\n    - BUILD: ist: do not put a cast in an array declaration\n    - BUILD: ist: use the literal declaration for ist_lc/ist_uc under TCC\n    - BUILD: compiler: systematically set USE_OBSOLETE_LINKER with TCC\n    - DOC: install: update reference to known supported versions\n    - SCRIPTS: publish-release: update the umask to keep group write access\n\n2023/05/17 : 2.8-dev12\n    - BUILD: mjson: Fix warning about unused variables\n    - MINOR: spoe: Don't stop disabled proxies\n    - BUG/MEDIUM: filters: Don't deinit filters for disabled proxies during startup\n    - BUG/MINOR: hlua_fcn/queue: fix broken pop_wait()\n    - BUG/MINOR: hlua_fcn/queue: fix reference leak\n    - CLEANUP: hlua_fcn/queue: make queue:push() easier to read\n    - BUG/MINOR: quic: Buggy acknowlegments of acknowlegments function\n    - DEBUG: list: add DEBUG_LIST to purposely corrupt list heads after delete\n    - MINOR: stats: report the total number of warnings issued\n    - MINOR: stats: report the number of times the global maxconn was reached\n    - BUG/MINOR: mux-quic: do not prevent shutw on error\n    - BUG/MINOR: mux-quic: do not free frame already released by quic-conn\n    - BUG/MINOR: mux-quic: no need to subscribe for detach streams\n    - MINOR: mux-quic: add traces for stream wake\n    - MINOR: mux-quic: do not send STREAM frames if already subscribe\n    - MINOR: mux-quic: factorize send subscribing\n    - MINOR: mux-quic: simplify return path of qc_send()\n    - MEDIUM: quic: streamline error notification\n    - MEDIUM: mux-quic: adjust transport layer error handling\n    - MINOR: stats: report the listener's protocol along with the address in stats\n    - BUG/MEDIUM: mux-fcgi: Never set SE_FL_EOS without SE_FL_EOI or SE_FL_ERROR\n    - BUG/MEDIUM: mux-fcgi: Don't request more room if mux is waiting for more data\n    - MINOR: stconn: Add a cross-reference between SE descriptor\n    - BUG/MINOR: proxy: missing free in free_proxy for redirect rules\n    - MINOR: proxy: add http_free_redirect_rule() function\n    - BUG/MINOR: http_rules: fix errors paths in http_parse_redirect_rule()\n    - CLEANUP: http_act: use http_free_redirect_rule() to clean redirect act\n    - MINOR: tree-wide: use free_acl_cond() where relevant\n    - CLEANUP: acl: discard prune_acl_cond() function\n    - BUG/MINOR: cli: don't complain about empty command on empty lines\n    - MINOR: cli: add an option to display the uptime in the CLI's prompt\n    - MINOR: master/cli: also implement the timed prompt on the master CLI\n    - MINOR: cli: make \"show fd\" identify QUIC connections and listeners\n    - MINOR: httpclient: allow to disable the DNS resolvers of the httpclient\n    - BUILD: debug: fix build issue on 32-bit platforms in \"debug dev task\"\n    - MINOR: ncbuf: missing malloc checks in standalone code\n    - DOC: lua: fix core.{proxies,frontends,backends} visibility\n    - EXAMPLES: fix race condition in lua mailers script\n    - BUG/MINOR: errors: handle malloc failure in usermsgs_put()\n    - BUG/MINOR: log: fix memory error handling in parse_logsrv()\n    - BUG/MINOR: quic: Wrong redispatch for external data on connection socket\n    - MINOR: htx: add function to set EOM reliably\n    - MINOR: mux-quic: remove dedicated function to handle standalone FIN\n    - BUG/MINOR: mux-quic: properly handle buf alloc failure\n    - BUG/MINOR: mux-quic: handle properly recv ncbuf alloc failure\n    - BUG/MINOR: quic: do not alloc buf count on alloc failure\n    - BUG/MINOR: mux-quic: differentiate failure on qc_stream_desc alloc\n    - BUG/MINOR: mux-quic: free task on qc_init() app ops failure\n    - MEDIUM: session/ssl: return the SSL error string during a SSL handshake error\n    - CI: enable monthly Fedora Rawhide clang builds\n    - MEDIUM: mworker/cli: does not disconnect the master CLI upon error\n    - MINOR: stconn: Remove useless test on sedesc on detach to release the xref\n    - MEDIUM: proxy: stop emitting logs for internal proxies when stopping\n    - MINOR: ssl: add new sample ssl_c_r_dn\n    - BUG/MEDIUM: mux-h2: make sure control frames do not refresh the idle timeout\n    - BUILD: ssl: ssl_c_r_dn fetches uses  functiosn only available since 1.1.1\n    - BUG/MINOR: mux-quic: handle properly Tx buf exhaustion\n    - BUG/MINOR: h3: missing goto on buf alloc failure\n    - BUILD: ssl: get0_verified chain is available on libreSSL\n    - BUG/MINOR: makefile: use USE_LIBATOMIC instead of USE_ATOMIC\n    - MINOR: mux-quic: add trace to stream rcv_buf operation\n    - MINOR: mux-quic: properly report end-of-stream on recv\n    - MINOR: mux-quic: uninline qc_attach_sc()\n    - BUG/MEDIUM: mux-quic: fix EOI for request without payload\n    - MINOR: checks: make sure spread-checks is used also at boot time\n    - BUG/MINOR: tcp-rules: Don't shortened the inspect-delay when EOI is set\n    - REGTESTS: log: Reduce response inspect-delay for last_rule.vtc\n    - DOC: config: Clarify conditions to shorten the inspect-delay for TCP rules\n    - CLEANUP: server: remove useless tmptrash assigments in srv_update_status()\n    - BUG/MINOR: server: memory leak in _srv_update_status_op() on server DOWN\n    - CLEANUP: check; Remove some useless assignments to NULL\n    - CLEANUP: stats: update the trash chunk where it's used\n    - MINOR: clock: measure the total boot time\n    - MINOR: stats: report the boot time in \"show info\"\n    - BUG/MINOR: checks: postpone the startup of health checks by the boot time\n    - MINOR: clock: provide a function to automatically adjust now_offset\n    - BUG/MINOR: clock: automatically adjust the internal clock with the boot time\n    - CLEANUP: fcgi-app; Remove useless assignment to NULL\n    - REGTESTS: log: Reduce again response inspect-delay for last_rule.vtc\n    - CI: drop Fedora m32 pipeline in favour of cross matrix\n    - MEDIUM: checks: Stop scheduling healthchecks during stopping stage\n    - MEDIUM: resolvers: Stop scheduling resolution during stopping stage\n    - BUG/MINOR: hlua: SET_SAFE_LJMP misuse in hlua_event_runner()\n    - BUG/MINOR: debug: fix pointer check in debug_parse_cli_task()\n\n2023/05/11 : 2.8-dev11\n    - BUILD: debug: do not check the isolated_thread variable in non-threaded builds\n    - BUILD: quic: fix build warning when threads are disabled\n    - CI: more granular failure on generating build matrix\n    - CLEANUP: quic: No more used q_buf structure\n    - CLEANUP: quic: Rename several <buf> variables in quic_frame.(c|h)\n    - CLEANUP: quic: Typo fix for quic_connection_id pool\n    - BUG/MINOR: quic: Wrong key update cipher context initialization for encryption\n    - BUG/MEDIUM: cache: Don't request more room than the max allowed\n    - MEDIUM: stconn: Be sure to always be able to unblock a SC that needs room\n    - EXAMPLES: fix IPV6 support for lua mailers script\n    - BUILD: ssl: buggy -Werror=dangling-pointer since gcc 13.0\n    - DOC: stconn: Update comments about ABRT/SHUT for stconn structure\n    - BUG/MEDIUM: stats: Require more room if buffer is almost full\n    - DOC: configuration: add info about ssl-engine for 2.6\n    - BUG/MINOR: mux-quic: fix transport VS app CONNECTION_CLOSE\n    - BUG/MEDIUM: mux-quic: wakeup tasklet to close on error\n    - DEV: flags: add a script to decode most flags in the \"show sess all\" output\n    - BUG/MINOR: quic: Possible crash when dumping version information\n    - BUG/MINOR: config: make compression work again in defaults section\n    - BUG/MEDIUM: stream: Forward shutdowns when unhandled errors are caught\n    - MEDIUM: stream: Resync analyzers at the end of process_stream() on change\n    - DEV: flags: add missing stream flags to show-sess-to-flags\n    - DEV: flags/show-sess-to-flags: only retrieve hex digits from hex fields\n    - DEV: flags/show-sess-to-flags: add support for color output\n    - CLEANUP: src/listener.c: remove redundant NULL check\n\n2023/05/07 : 2.8-dev10\n    - BUG/MINOR: stats: fix typo in `TotalSplicedBytesOut` field name\n    - REGTESTS: add success test, \"set server\" via fqdn\n    - MINOR: ssl: disable CRL checks with WolfSSL when no CRL file\n    - BUG/MINOR: stream/cli: fix stream age calculation in \"show sess\"\n    - MINOR: debug: clarify \"debug dev stream\" help message\n    - DEBUG: cli: add \"debug dev task\" to show/wake/expire/kill tasks and tasklets\n    - BUG/MINOR: ssl/sample: x509_v_err_str converter output when not found\n    - REGTESTS: ssl: simplify X509_V code check in ssl_client_auth.vtc\n    - BUILD: cli: fix build on Windows due to isalnum() implemented as a macro\n    - MINOR: activity: use a single macro to iterate over all fields\n    - MINOR: activity: show the line header inside the SHOW_VAL macro\n    - MINOR: activity: iterate over all fields in a main loop for dumping\n    - MINOR: activity: allow \"show activity\" to restart dumping on any line\n    - MINOR: activity: allow \"show activity\" to restart in the middle of a line\n    - DEV: haring: automatically disable DEBUG_STRICT\n    - DEV: haring: update readme to suggest using the same build options for haring\n    - BUG/MINOR: debug: fix incorrect profiling status reporting in show threads\n    - MINOR: debug: permit the \"debug dev loop\" to run under isolation\n    - BUG/MEDIUM: mux-h2: Properly handle end of request to expect data from server\n    - BUG/MINOR: mux-quic: prevent quic_conn error code to be overwritten\n    - MINOR: mux-quic: add trace event for local error\n    - MINOR: mux-quic: wake up after recv only if avail data\n    - MINOR: mux-quic: adjust local error API\n    - MINOR: mux-quic: report local error on stream endpoint asap\n    - MINOR: mux-quic: close connection asap on local error\n    - BUG/MINOR: debug: do not emit empty lines in thread dumps\n    - BUG/MINOR: mux-h2: Also expect data when waiting for a tunnel establishment\n    - BUG/MINOR: time: fix NS_TO_TV macro\n    - MEDIUM: debug: simplify the thread dump mechanism\n    - MINOR: debug: write panic dump to stderr one thread at a time\n    - MINOR: debug: make \"show threads\" properly iterate over all threads\n    - CLEANUP: debug: remove the now unused ha_thread_dump_all_to_trash()\n    - MINOR: ssl: allow to change the server signature algorithm\n    - MINOR: ssl: allow to change the signature algorithm for client authentication\n    - MINOR: cli: Use applet API to write output message\n    - MINOR: stats: Use the applet API to write data\n    - MINOR: peers: Use the applet API to send message\n    - MINOR: stconn: Add a field to specify the room needed by the SC to progress\n    - MEDIUM: tree-wide: Change sc API to specify required free space to progress\n    - BUG/MEDIUM: stconn: Unblock SC from stream if there is enough room to progrees\n    - MEDIUM: applet: Check room needed to unblock opposite SC when data was consumed\n    - MEDIUM: stconn: Check room needed to unblock SC on fast-forward\n    - MEDIUM: stconn: Check room needed to unblock opposite SC when data was sent\n    - MINOR: hlua_fcn: fix Server.is_draining() return type\n    - MINOR: hlua_fcn: add Server.is_backup()\n    - MINOR: hlua_fcn: add Server.is_dynamic()\n    - MINOR: hlua_fcn: add Server.tracking()\n    - MINOR: hlua_fcn: add Server.get_trackers()\n    - MINOR: hlua_fcn: add Server.get_proxy()\n    - MINOR: hlua_fcn: add Server.get_pend_conn() and Server.get_cur_sess()\n    - MINOR: hlua_fcn: add Proxy.get_srv_act() and Proxy.get_srv_bck()\n    - DOC: lua/event: add ServerEvent class header\n    - MINOR: server/event_hdl: publish macro helper\n    - MINOR: server/event_hdl: add SERVER_STATE event\n    - OPTIM: server: publish UP/DOWN events from STATE change\n    - MINOR: hlua: expose SERVER_STATE event\n    - MINOR: server/event_hdl: add SERVER_ADMIN event\n    - MINOR: hlua: expose SERVER_ADMIN event\n    - MINOR: checks/event_hdl: SERVER_CHECK event\n    - MINOR: hlua/event_hdl: expose SERVER_CHECK event\n    - MINOR: mailers/hlua: disable email sending from lua\n    - MINOR: hlua: expose proxy mailers\n    - EXAMPLES: add lua mailers script to replace tcpcheck mailers\n    - BUG/MINOR: hlua: spinning loop in hlua_socket_handler()\n    - MINOR: server: fix message report when IDRAIN is set and MAINT is cleared\n    - CLEANUP: hlua: hlua_register_task() may longjmp\n    - REGTESTS: use lua mailer script for mailers tests\n    - MINOR: hlua: declare hlua_{ref,pushref,unref} functions\n    - MINOR: hlua: declare hlua_gethlua() function\n    - MINOR: hlua: declare hlua_yieldk() function\n    - MINOR: hlua_fcn: add Queue class\n    - EXAMPLES: mailqueue for lua mailers script\n    - MINOR: quic: add format argument for \"show quic\"\n    - MINOR: quic: implement oneline format for \"show quic\"\n    - MINOR: config: allow cpu-map to take commas in lists of ranges\n    - CLEANUP: fix a few reported typos in code comments\n    - DOC: fix a few reported typos in the config and install doc\n\n2023/04/28 : 2.8-dev9\n    - MINOR: quic: Move traces at proto level\n    - BUG/MINOR: quic: Possible memory leak from TX packets\n    - BUG/MINOR: quic: Possible leak during probing retransmissions\n    - BUG/MINOR: quic: Useless probing retransmission in draining or killing state\n    - BUG/MINOR: quic: Useless I/O handler task wakeups (draining, killing state)\n    - CLEANUP: quic: rename frame types with an explicit prefix\n    - CLEANUP: quic: rename frame variables\n    - CLEANUP: quic: Remove useless parameters passes to qc_purge_tx_buf()\n    - CLEANUP: quic: Rename <buf> variable to <token> in quic_generate_retry_token()\n    - CLEANUP: quic: Rename <buf> variable into quic_padding_check()\n    - CLEANUP: quic: Rename <buf> variable into quic_rx_pkt_parse()\n    - CLEANUP: quic: Rename <buf> variable for several low level functions\n    - CLEANUP: quic: Make qc_build_pkt() be more readable\n    - CLEANUP: quic: Rename quic_get_dgram_dcid() <buf> variable\n    - CLEANUP: quic: Rename several <buf> variables at low level\n    - CLEANUP: quic: Rename <buf> variable into quic_packet_read_long_header()\n    - CLEANUP: quic: Rename <buf> variable into qc_parse_hd_form()\n    - CLEANUP: quic: Rename several <buf> variables into quic_sock.c\n    - DEBUG: crash using an invalid opcode on x86/x86_64 instead of an invalid access\n    - DEBUG: crash using an invalid opcode on aarch64 instead of an invalid access\n    - DEV: h2: add a script \"mkhdr\" to build h2 frames from scratch\n    - DEV: h2: support reading frame payload from a file\n    - MINOR: acme.sh: add the deploy script for acme.sh in admin directory\n    - BUG/MEDIUM: mux-quic: do not emit RESET_STREAM for unknown length\n    - BUG/MEDIUM: mux-quic: improve streams fairness to prevent early timeout\n    - BUG/MINOR: quic: prevent buggy memcpy for empty STREAM\n    - MINOR: mux-quic: do not set buffer for empty STREAM frame\n    - MINOR: mux-quic: do not allocate Tx buf for empty STREAM frame\n    - MINOR: quic: finalize affinity change as soon as possible\n    - BUG/MINOR: quic: fix race on quic_conns list during affinity rebind\n    - CI: switch to Fastly CDN to download LibreSSL\n    - BUILD: ssl: switch LibreSSL to Fastly CDN\n    - BUG/MINOR: clock: fix a few occurrences of 'now' being used in place of 'date'\n    - BUG/MINOR: spoe: use \"date\" not \"now\" in debug messages\n    - BUG/MINOR: activity: show wall-clock date, not internal date in show activity\n    - BUG/MINOR: opentracing: use 'date' instead of 'now' in debug output\n    - Revert \"BUG/MINOR: clock: fix a few occurrences of 'now' being used in place of 'date'\"\n    - BUG/MINOR: calltrace: fix 'now' being used in place of 'date'\n    - BUG/MINOR: trace: show wall-clock date, not internal date in show activity\n    - BUG/MINOR: hlua: return wall-clock date, not internal date in core.now()\n    - BUG/MEDIUM: spoe: Don't start new applet if there are enough idle ones\n    - BUG/MINOR: stconn: Fix SC flags with same value\n    - BUG/MINOR: resolvers: Use sc_need_room() to wait more room when dumping stats\n    - BUG/MEDIUM: tcpcheck: Don't eval custom expect rule on an empty buffer\n    - BUG/MINOR: stats: report the correct start date in \"show info\"\n    - MINOR: time: add conversions to/from nanosecond timestamps\n    - MINOR: time: replace calls to tv_ms_elapsed() with a linear subtract\n    - MINOR: spoe: switch the timeval-based timestamps to nanosecond timestamps\n    - MEDIUM: tree-wide: replace timeval with nanoseconds in tv_accept and tv_request\n    - MINOR: stats: use nanoseconds, not timeval to compute uptime\n    - MINOR: activity: use nanoseconds, not timeval to compute uptime\n    - MINOR: checks: use a nanosecond counters instead of timeval for checks->start\n    - MINOR: clock: do not use now.tv_sec anymore\n    - MEDIUM: clock: replace timeval \"now\" with integer \"now_ns\"\n    - MINOR: clock: replace the timeval start_time with start_time_ns\n    - MINOR: sample: Add bc_rtt and bc_rttvar\n    - MINOR: quic: use real sending rate measurement\n    - MINOR: proxy: factorize send rate measurement\n\n2023/04/23 : 2.8-dev8\n    - BUG/MEDIUM: cli: Set SE_FL_EOI flag for '_getsocks' and 'quit' commands\n    - BUG/MEDIUM: cli: Eat output data when waiting for appctx shutdown\n    - BUG/MEDIUM: http-client: Eat output data when waiting for appctx shutdown\n    - BUG/MEDIUM: stats: Eat output data when waiting for appctx shutdown\n    - BUG/MEDIUM: log: Eat output data when waiting for appctx shutdown\n    - BUG/MEDIUM: dns: Kill idle DNS sessions during stopping stage\n    - BUG/MINOR: resolvers: Wakeup DNS idle task on stopping\n    - BUG/MEDIUM: resolvers: Force the connect timeout for DNS resolutions\n    - MINOR: hlua: Stop to check the SC state when executing a hlua cli command\n    - BUG/MEDIUM: mux-h1: Report EOI when a TCP connection is upgraded to H2\n    - BUG/MEDIUM: mux-h2: Never set SE_FL_EOS without SE_FL_EOI or SE_FL_ERROR\n    - MINOR: quic: Trace fix in quic_pto_pktns() (handshaske status)\n    - BUG/MINOR: quic: Wrong packet number space probing before confirmed handshake\n    - MINOR: quic: Modify qc_try_rm_hp() traces\n    - MINOR: quic: Dump more information at proto level when building packets\n    - MINOR: quic: Add a trace for packet with an ACK frame\n    - MINOR: activity: add a line reporting the average CPU usage to \"show activity\"\n    - BUG/MINOR: stick_table: alert when type len has incorrect characters\n    - MINOR: thread: keep a bitmask of enabled groups in thread_set\n    - MINOR: fd: optimize fd_claim_tgid() for use in fd_insert()\n    - MINOR: fd: add a lock bit with the tgid\n    - MINOR: fd: implement fd_migrate_on() to migrate on a non-local thread\n    - MINOR: receiver: reserve special values for \"shards\"\n    - MINOR: bind-conf: support a new shards value: \"by-group\"\n    - BUG/MEDIUM: fd: don't wait for tmask to stabilize if we're not in it.\n    - MINOR: quic: Add packet loss and maximum cc window to \"show quic\"\n    - BUG/MINOR: quic: Ignored less than 1ms RTTs\n    - MINOR: quic: Add connection flags to traces\n    - BUG/MEDIUM: quic: Code sanitization about acknowledgements requirements\n    - BUG/MINOR: quic: Possible wrapped values used as ACK tree purging limit.\n    - BUG/MINOR: quic: SIGFPE in quic_cubic_update()\n    - MINOR: quic: Display the packet number space flags in traces\n    - MINOR: quic: Remove a useless test about probing in qc_prep_pkts()\n    - BUG/MINOR: quic: Wrong Application encryption level selection when probing\n    - CI: bump \"actions/checkout\" to v3 for cross zoo matrix\n    - CI: enable monthly test on Fedora Rawhide\n    - BUG/MINOR: stream: Fix test on SE_FL_ERROR on the wrong entity\n    - BUG/MEDIUM: stream: Report write timeouts before testing the flags\n    - BUG/MEDIUM: stconn: Do nothing in sc_conn_recv() when the SC needs more room\n    - MINOR: stream: Uninline and export sess_set_term_flags() function\n    - MINOR: filters: Review and simplify errors handling\n    - REGTESTS: fix the race conditions in log_uri.vtc\n    - MINOR: channel: Forwad close to other side on abort\n    - MINOR: stream: Introduce stream_abort() to abort on both sides in same time\n    - MINOR: stconn: Rename SC_FL_SHUTR_NOW in SC_FL_ABRT_WANTED\n    - MINOR: channel/stconn: Replace channel_shutr_now() by sc_schedule_abort()\n    - MINOR: stconn: Rename SC_FL_SHUTW_NOW in SC_FL_SHUT_WANTED\n    - MINOR: channel/stconn: Replace channel_shutw_now() by sc_schedule_shutdown()\n    - MINOR: stconn: Rename SC_FL_SHUTR in SC_FL_ABRT_DONE\n    - MINOR: channel/stconn: Replace sc_shutr() by sc_abort()\n    - MINOR: stconn: Rename SC_FL_SHUTW in SC_FL_SHUT_DONE\n    - MINOR: channel/stconn: Replace sc_shutw() by sc_shutdown()\n    - MINOR: tree-wide: Replace several chn_cons() by the corresponding SC\n    - MINOR: tree-wide: Replace several chn_prod() by the corresponding SC\n    - BUG/MINOR: cli: Don't close when SE_FL_ERR_PENDING is set in cli analyzer\n    - MINOR: stconn: Stop to set SE_FL_ERROR on sending path\n    - MEDIUM: stconn: Forbid applets with more to deliver if EOI was reached\n    - MINOR: stconn: Don't clear SE_FL_ERROR when endpoint is reset\n    - MINOR: stconn: Add a flag to ack endpoint errors at SC level\n    - MINOR: backend: Set SC_FL_ERROR on connection error\n    - MINOR: stream: Set SC_FL_ERROR on channels' buffer allocation error\n    - MINOR: tree-wide: Test SC_FL_ERROR with SE_FL_ERROR from upper layer\n    - MEDIUM: tree-wide: Stop to set SE_FL_ERROR from upper layer\n    - MEDIUM: backend: Stop to use SE flags to detect connection errors\n    - MEDIUM: stream: Stop to use SE flags to detect read errors from analyzers\n    - MEDIUM: stream: Stop to use SE flags to detect endpoint errors\n    - MEDIUM: stconn: Rely on SC flags to handle errors instead of SE flags\n    - BUG/MINOR: stconn: Don't set SE_FL_ERROR at the end of sc_conn_send()\n    - BUG/MINOR: quic: Do not use ack delay during the handshakes\n    - CLEANUP: use \"offsetof\" where appropriate\n    - MINOR: ssl: remove OpenSSL 1.0.2 mention into certificate loading error\n    - BUG/MEDIUM: http-ana: Properly switch the request in tunnel mode on upgrade\n    - BUG/MEDIUM: log: Properly handle client aborts in syslog applet\n    - MINOR: stconn: Add a flag to report EOS at the stream-connector level\n    - MINOR: stconn: Propagate EOS from a mux to the attached stream-connector\n    - MINOR: stconn: Propagate EOS from an applet to the attached stream-connector\n    - MINOR: mux-h2: make the initial window size configurable per side\n    - MINOR: mux-h2: make the max number of concurrent streams configurable per side\n    - BUG/MINOR: task: allow to use tasklet_wakeup_after with tid -1\n    - CLEANUP: quic: remove unused QUIC_LOCK label\n    - CLEANUP: quic: remove unused scid_node\n    - CLEANUP: quic: remove unused qc param on stateless reset token\n    - CLEANUP: quic: rename quic_connection_id vars\n    - MINOR: quic: remove uneeded tasklet_wakeup after accept\n    - MINOR: quic: adjust Rx packet type parsing\n    - MINOR: quic: adjust quic CID derive API\n    - MINOR: quic: remove TID ref from quic_conn\n    - MEDIUM: quic: use a global CID trees list\n    - MINOR: quic: remove TID encoding in CID\n    - MEDIUM: quic: handle conn bootstrap/handshake on a random thread\n    - MINOR: quic: do not proceed to accept for closing conn\n    - MINOR: protocol: define new callback set_affinity\n    - MINOR: quic: delay post handshake frames after accept\n    - MEDIUM: quic: implement thread affinity rebinding\n    - BUG/MINOR: quic: transform qc_set_timer() as a reentrant function\n    - MINOR: quic: properly finalize thread rebinding\n    - MAJOR: quic: support thread balancing on accept\n    - MINOR: listener: remove unneeded local accept flag\n    - BUG/MINOR: http-ana: Update analyzers on both sides when switching in TUNNEL mode\n    - CLEANUP: backend: Remove useless debug message in assign_server()\n    - CLEANUP: cli: Remove useless debug message in cli_io_handler()\n    - BUG/MEDIUM: stconn: Propagate error on the SC on sending path\n    - MINOR: config: add \"no-alpn\" support for bind lines\n    - REGTESTS: add a new \"ssl_alpn\" test to test ALPN negotiation\n    - DOC: add missing documentation for \"no-alpn\" on bind lines\n    - MINOR: ssl: do not set ALPN callback with the empty string\n    - MINOR: ssl_crtlist: dump \"no-alpn\" on \"show crtlist\" when \"no-alpn\" was set\n    - MEDIUM: config: set useful ALPN defaults for HTTPS and QUIC\n    - BUG/MEDIUM: quic: prevent crash on Retry sending\n    - BUG/MINOR: cfgparse: make sure to include openssl-compat\n    - MINOR: clock: add now_mono_time_fast() function\n    - MINOR: clock: add now_cpu_time_fast() function\n    - MEDIUM: hlua: reliable timeout detection\n    - MEDIUM: hlua: introduce tune.lua.burst-timeout\n    - CLEANUP: hlua: avoid confusion between internal timers and tick based timers\n    - MINOR: hlua: hook yield on known lua state\n    - MINOR: hlua: safe coroutine.create()\n    - BUG/MINOR: quic: Stop removing ACK ranges when building packets\n    - MINOR: quic: Do not allocate too much ack ranges\n    - BUG/MINOR: quic: Unchecked buffer length when building the token\n    - BUG/MINOR: quic: Wrong Retry token generation timestamp computing\n    - BUG/MINOR: mux-quic: fix crash with app ops install failure\n    - BUG/MINOR: mux-quic: properly handle STREAM frame alloc failure\n    - BUG/MINOR: h3: fix crash on h3s alloc failure\n    - BUG/MINOR: quic: prevent crash on qc_new_conn() failure\n    - BUG/MINOR: quic: consume Rx datagram even on error\n    - CLEANUP: errors: fix obsolete function comments\n    - CLEANUP: server: fix update_status() function comment\n    - MINOR: server/event_hdl: add proxy_uuid to event_hdl_cb_data_server\n    - MINOR: hlua/event_hdl: rely on proxy_uuid instead of proxy_name for lookups\n    - MINOR: hlua/event_hdl: expose proxy_uuid variable in server events\n    - MINOR: hlua/event_hdl: fix return type for hlua_event_hdl_cb_data_push_args\n    - MINOR: server/event_hdl: prepare for upcoming refactors\n    - BUG/MINOR: event_hdl: don't waste 1 event subtype slot\n    - CLEANUP: event_hdl: updating obsolete comment for EVENT_HDL_CB_DATA\n    - CLEANUP: event_hdl: fix comment typo about _sync assertion\n    - MINOR: event_hdl: dynamically allocated event data members\n    - MINOR: event_hdl: provide event->when for advanced handlers\n    - MINOR: hlua/event_hdl: timestamp for events\n    - DOC: lua: restore 80 char limitation\n    - BUG/MINOR: server: incorrect report for tracking servers leaving drain\n    - MINOR: server: explicitly commit state change in srv_update_status()\n    - BUG/MINOR: server: don't miss proxy stats update on server state transitions\n    - BUG/MINOR: server: don't miss server stats update on server state transitions\n    - BUG/MINOR: server: don't use date when restoring last_change from state file\n    - MINOR: server: central update for server counters on state change\n    - MINOR: server: propagate server state change to lb through single function\n    - MINOR: server: propagate lb changes through srv_lb_propagate()\n    - MINOR: server: change adm_st_chg_cause storage type\n    - MINOR: server: srv_append_status refacto\n    - MINOR: server: change srv_op_st_chg_cause storage type\n    - CLEANUP: server: remove unused variables in srv_update_status()\n    - CLEANUP: server: fix srv_set_{running, stopping, stopped} function comment\n    - MINOR: server: pass adm and op cause to srv_update_status()\n    - MEDIUM: server: split srv_update_status() in two functions\n    - MINOR: server/event_hdl: prepare for server event data wrapper\n    - MINOR: quic: support migrating the listener as well\n    - MINOR: quic_sock: index li->per_thr[] on local thread id, not global one\n    - MINOR: listener: support another thread dispatch mode: \"fair\"\n    - MINOR: receiver: add a struct shard_info to store info about each shard\n    - MINOR: receiver: add RX_F_MUST_DUP to indicate that an rx must be duped\n    - MEDIUM: proto: duplicate receivers marked RX_F_MUST_DUP\n    - MINOR: proto: skip socket setup for duped FDs\n    - MEDIUM: config: permit to start a bind on multiple groups at once\n    - MINOR: listener: make accept_queue index atomic\n    - MEDIUM: listener: rework thread assignment to consider all groups\n    - MINOR: listener: use a common thr_idx from the reference listener\n    - MINOR: listener: resync with the thread index before heavy calculations\n    - MINOR: listener: make sure to avoid ABA updates in per-thread index\n    - MINOR: listener: always compare the local thread as well\n    - MINOR: Make `tasklet_free()` safe to be called with `NULL`\n    - CLEANUP: Stop checking the pointer before calling `tasklet_free()`\n    - CLEANUP: Stop checking the pointer before calling `pool_free()`\n    - CLEANUP: Stop checking the pointer before calling `task_free()`\n    - CLEANUP: Stop checking the pointer before calling `ring_free()`\n    - BUG/MINOR: cli: clarify error message about stats bind-process\n    - CI: cirrus-ci: bump FreeBSD image to 13-1\n    - REGTESTS: remove unsupported \"stats bind-process\" keyword\n    - CI: extend spellchecker whitelist, add \"clen\" as well\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUG/MINOR: sock_inet: use SO_REUSEPORT_LB where available\n    - BUG/MINOR: tools: check libssl and libcrypto separately\n    - BUG/MINOR: config: fix NUMA topology detection on FreeBSD\n    - BUILD: sock_inet: forward-declare struct receiver\n    - BUILD: proto_tcp: export the correct names for proto_tcpv[46]\n    - CLEANUP: protocol: move the l3_addrlen to plug a hole in proto_fam\n    - CLEANUP: protocol: move the nb_receivers to plug a hole in protocol\n    - REORG: listener: move the bind_conf's thread setup code to listener.c\n    - MINOR: proxy: make proxy_type_str() recognize peers sections\n    - MEDIUM: peers: call bind_complete_thread_setup() to finish the config\n    - MINOR: protocol: add a flags field to store info about protocols\n    - MINOR: protocol: move the global reuseport flag to the protocols\n    - MINOR: listener: automatically adjust shards based on support for SO_REUSEPORT\n    - MINOR: protocol: add a function to check if some features are supported\n    - MINOR: sock: add a function to check for SO_REUSEPORT support at runtime\n    - MINOR: protocol: perform a live check for SO_REUSEPORT support\n    - MINOR: listener: do not restrict CLI to first group anymore\n    - MINOR: listener: add a new global tune.listener.default-shards setting\n    - MEDIUM: listener: switch the default sharding to by-group\n\n2023/04/08 : 2.8-dev7\n    - BUG/MINOR: stats: Don't replace sc_shutr() by SE_FL_EOS flag yet\n    - BUG/MEDIUM: mux-h2: Be able to detect connection error during handshake\n    - BUG/MINOR: quic: Missing padding in very short probe packets\n    - MINOR: proxy/pool: prevent unnecessary calls to pool_gc()\n    - CLEANUP: proxy: remove stop_time related dead code\n    - DOC/MINOR: reformat configuration.txt's \"quoting and escaping\" table\n    - MINOR: http_fetch: Add support for empty delim in url_param\n    - MINOR: http_fetch: add case insensitive support for smp_fetch_url_param\n    - MINOR: http_fetch: Add case-insensitive argument for url_param/urlp_val\n    - REGTESTS : Add test support for case insentitive for url_param\n    - BUG/MEDIUM: proxy/sktable: prevent watchdog trigger on soft-stop\n    - BUG/MINOR: backend: make be_usable_srv() consistent when stopping\n    - BUG/MINOR: ssl: Remove dead code in cli_parse_update_ocsp_response\n    - BUG/MINOR: ssl: Fix potential leak in cli_parse_update_ocsp_response\n    - BUG/MINOR: ssl: ssl-(min|max)-ver parameter not duplicated for bundles in crt-list\n    - BUG/MINOR: quic: Wrong use of now_ms timestamps (cubic algo)\n    - MINOR: quic: Add recovery related information to \"show quic\"\n    - BUG/MINOR: quic: Wrong use of now_ms timestamps (newreno algo)\n    - BUG/MINOR: quic: Missing max_idle_timeout initialization for the connection\n    - MINOR: quic: Implement cubic state trace callback\n    - MINOR: quic: Adjustments for generic control congestion traces\n    - MINOR: quic: Traces adjustments at proto level.\n    - MEDIUM: quic: Ack delay implementation\n    - BUG/MINOR: quic: Wrong rtt variance computing\n    - MINOR: cli: support filtering on FD types in \"show fd\"\n    - MINOR: quic: Add a fake congestion control algorithm named \"nocc\"\n    - CI: run smoke tests on config syntax to check memory related issues\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CI: exclude doc/{design-thoughts,internals} from spell check\n    - BUG/MINOR: quic: Remaining useless statements in cubic slow start callback\n    - BUG/MINOR: quic: Cubic congestion control window may wrap\n    - MINOR: quic: Add missing traces in cubic algorithm implementation\n    - BUG/MAJOR: quic: Congestion algorithms states shared between the connection\n    - BUG/MINOR: ssl: Undefined reference when building with OPENSSL_NO_DEPRECATED\n    - BUG/MINOR: quic: Remove useless BUG_ON() in newreno and cubic algo implementation\n    - MINOR: http-act: emit a warning when a header field name contains forbidden chars\n    - DOC: config: strict-sni allows to start without certificate\n    - MINOR: quic: Add trace to debug idle timer task issues\n    - BUG/MINOR: quic: Unexpected connection closures upon idle timer task execution\n    - BUG/MINOR: quic: Wrong idle timer expiration (during 20s)\n    - BUILD: quic: 32bits compilation issue in cli_io_handler_dump_quic()\n    - BUG/MINOR: quic: Possible wrong PTO computing\n    - BUG/MINOR: tcpcheck: Be able to expect an empty response\n    - BUG/MEDIUM: stconn: Add a missing return statement in sc_app_shutr()\n    - BUG/MINOR: stream: Fix test on channels flags to set clientfin/serverfin touts\n    - MINOR: applet: Uninline appctx_free()\n    - MEDIUM: applet/trace: Register a new trace source with its events\n    - CLEANUP: stconn: Remove remaining debug messages\n    - BUG/MEDIUM: channel: Improve reports for shut in co_getblk()\n    - BUG/MEDIUM: dns: Properly handle error when a response consumed\n    - MINOR: stconn: Remove unecessary test on SE_FL_EOS before receiving data\n    - MINOR: stconn/channel: Move CF_READ_DONTWAIT into the SC and rename it\n    - MINOR: stconn/channel: Move CF_SEND_DONTWAIT into the SC and rename it\n    - MINOR: stconn/channel: Move CF_NEVER_WAIT into the SC and rename it\n    - MINOR: stconn/channel: Move CF_EXPECT_MORE into the SC and rename it\n    - MINOR: mux-pt: Report end-of-input with the end-of-stream after a read\n    - BUG/MINOR: mux-h1: Properly report EOI/ERROR on read0 in h1_rcv_pipe()\n    - CLEANUP: mux-h1/mux-pt: Remove useless test on SE_FL_SHR/SE_FL_SHW flags\n    - MINOR: mux-h1: Report an error to the SE descriptor on truncated message\n    - MINOR: stconn: Always ack EOS at the end of sc_conn_recv()\n    - MINOR: stconn/applet: Handle EOI in the applet .wake callback function\n    - MINOR: applet: No longer set EOI on the SC\n    - MINOR: stconn/applet: Handle EOS in the applet .wake callback function\n    - MEDIUM: cache: Use the sedesc to report and detect end of processing\n    - MEDIUM: cli: Use the sedesc to report and detect end of processing\n    - MINOR: dns: Remove the test on the opposite SC state to send requests\n    - MEDIUM: dns: Use the sedesc to report and detect end of processing\n    - MEDIUM: spoe: Use the sedesc to report and detect end of processing\n    - MEDIUM: hlua/applet: Use the sedesc to report and detect end of processing\n    - MEDIUM: log: Use the sedesc to report and detect end of processing\n    - MEDIUM: peers: Use the sedesc to report and detect end of processing\n    - MINOR: sink: Remove the tests on the opposite SC state to process messages\n    - MEDIUM: sink: Use the sedesc to report and detect end of processing\n    - MEDIUM: stats: Use the sedesc to report and detect end of processing\n    - MEDIUM: promex: Use the sedesc to report and detect end of processing\n    - MEDIUM: http_client: Use the sedesc to report and detect end of processing\n    - MINOR: stconn/channel: Move CF_EOI into the SC and rename it\n    - MEDIUM: tree-wide: Move flags about shut from the channel to the SC\n    - MINOR: tree-wide: Simplifiy some tests on SHUT flags by accessing SCs directly\n    - MINOR: stconn/applet: Add BUG_ON_HOT() to be sure SE_FL_EOS is never set alone\n    - MINOR: server: add SRV_F_DELETED flag\n    - BUG/MINOR: server/del: fix srv->next pointer consistency\n    - BUG/MINOR: stats: properly handle server stats dumping resumption\n    - BUG/MINOR: sink: free forward_px on deinit()\n    - BUG/MINOR: log: free log forward proxies on deinit()\n    - MINOR: server: always call ssl->destroy_srv when available\n    - MINOR: server: correctly free servers on deinit()\n    - BUG/MINOR: hlua: hook yield does not behave as expected\n    - MINOR: hlua: properly handle hlua_process_task HLUA_E_ETMOUT\n    - BUG/MINOR: hlua: enforce proper running context for register_x functions\n    - MINOR: hlua: Fix two functions that return nothing useful\n    - MEDIUM: hlua: Dynamic list of frontend/backend in Lua\n    - MINOR: hlua_fcn: alternative to old proxy and server attributes\n    - MEDIUM: hlua_fcn: dynamic server iteration and indexing\n    - MEDIUM: hlua_fcn/api: remove some old server and proxy attributes\n    - CLEANUP: hlua: fix conflicting comment in hlua_ctx_destroy()\n    - MINOR: hlua: add simple hlua reference handling API\n    - MINOR: hlua: fix return type for hlua_checkfunction() and hlua_checktable()\n    - BUG/MINOR: hlua: fix reference leak in core.register_task()\n    - BUG/MINOR: hlua: fix reference leak in hlua_post_init_state()\n    - BUG/MINOR: hlua: prevent function and table reference leaks on errors\n    - CLEANUP: hlua: use hlua_ref() instead of luaL_ref()\n    - CLEANUP: hlua: use hlua_pushref() instead of lua_rawgeti()\n    - CLEANUP: hlua: use hlua_unref() instead of luaL_unref()\n    - MINOR: hlua: simplify lua locking\n    - BUG/MEDIUM: hlua: prevent deadlocks with main lua lock\n    - MINOR: hlua_fcn: add server->get_rid() method\n    - MINOR: hlua: support for optional arguments to core.register_task()\n    - DOC: lua: silence \"literal block ends without a blank line\" Sphinx warnings\n    - DOC: lua: silence \"Unexpected indentation\" Sphinx warnings\n    - BUG/MINOR: event_hdl: fix rid storage type\n    - BUG/MINOR: event_hdl: make event_hdl_subscribe thread-safe\n    - MINOR: event_hdl: global sublist management clarification\n    - BUG/MEDIUM: event_hdl: clean soft-stop handling\n    - BUG/MEDIUM: event_hdl: fix async data refcount issue\n    - MINOR: event_hdl: normal tasks support for advanced async mode\n    - MINOR: event_hdl: add event_hdl_async_equeue_isempty() function\n    - MINOR: event_hdl: add event_hdl_async_equeue_size() function\n    - MINOR: event_hdl: pause/resume for subscriptions\n    - MINOR: proxy: add findserver_unique_id() and findserver_unique_name()\n    - MEDIUM: hlua/event_hdl: initial support for event handlers\n    - MINOR: hlua/event_hdl: per-server event subscription\n    - EXAMPLES: add basic event_hdl lua example script\n    - MINOR: http-ana: Add a HTTP_MSGF flag to state the Expect header was checked\n    - BUG/MINOR: http-ana: Don't switch message to DATA when waiting for payload\n    - BUG/MINOR: quic: Possible crashes in qc_idle_timer_task()\n    - MINOR: quic: derive first DCID from client ODCID\n    - MINOR: quic: remove ODCID dedicated tree\n    - MINOR: quic: remove address concatenation to ODCID\n    - BUG/MINOR: mworker: unset more internal variables from program section\n    - BUG/MINOR: errors: invalid use of memprintf in startup_logs_init()\n    - MINOR: applet: Use unsafe version to get stream from SC in the trace function\n    - BUG/MUNOR: http-ana: Use an unsigned integer for http_msg flags\n    - MINOR: compression: Make compression offload a flag\n    - MINOR: compression: Prepare compression code for request compression\n    - MINOR: compression: Store algo and type for both request and response\n    - MINOR: compression: Count separately request and response compression\n    - MEDIUM: compression: Make it so we can compress requests as well.\n    - BUG/MINOR: lua: remove incorrect usage of strncat()\n    - CLEANUP: tcpcheck: remove the only occurrence of sprintf() in the code\n    - CLEANUP: ocsp: do no use strpcy() to copy a path!\n    - CLEANUP: tree-wide: remove strpcy() from constant strings\n    - CLEANUP: opentracing: remove the last two occurrences of strncat()\n    - BUILD: compiler: fix __equals_1() on older compilers\n    - MINOR: compiler: define a __attribute__warning() macro\n    - BUILD: bug.h: add a warning in the base API when unsafe functions are used\n    - BUG/MEDIUM: listeners: Use the right parameters for strlcpy2().\n\n2023/03/28 : 2.8-dev6\n    - BUG/MEDIUM: mux-pt: Set EOS on error on sending path if read0 was received\n    - MINOR: ssl: Change the ocsp update log-format\n    - MINOR: ssl: Use ocsp update task for \"update ssl ocsp-response\" command\n    - BUG/MINOR: ssl: Fix double free in ocsp update deinit\n    - MINOR: ssl: Accept certpath as param in \"show ssl ocsp-response\" CLI command\n    - MINOR: ssl: Add certificate path to 'show ssl ocsp-response' output\n    - BUG/MEDIUM: proxy: properly stop backends on soft-stop\n    - BUG/MEDIUM: resolvers: Properly stop server resolutions on soft-stop\n    - DEBUG: cli/show_fd: Display connection error code\n    - DEBUG: ssl-sock/show_fd: Display SSL error code\n    - BUG/MEDIUM: mux-h1: Don't block SE_FL_ERROR if EOS is not reported on H1C\n    - BUG/MINOR: tcp_sample: fix a bug in fc_dst_port and fc_dst_is_local sample fetches\n    - BUG/MINOR: quic: Missing STREAM frame length updates\n    - BUG/MEDIUM: connection: Preserve flags when a conn is removed from an idle list\n    - BUG/MINOR: mux-h2: make sure the h2c task exists before refreshing it\n    - MINOR: buffer: add br_count() to return the number of allocated bufs\n    - MINOR: buffer: add br_single() to check if a buffer ring has more than one buf\n    - BUG/MEDIUM: mux-h2: only restart sending when mux buffer is decongested\n    - BUG/MINOR: mux-h2: set CO_SFL_STREAMER when sending lots of data\n    - BUG/MINOR: quic: Missing STREAM frame data pointer updates\n    - MINOR: stick-table: add sc-add-gpc() to http-after-response\n    - MINOR: doc: missing entries for sc-add-gpc()\n    - BUG/MAJOR: qpack: fix possible read out of bounds in static table\n    - OPTIM: mux-h1: limit first read size to avoid wrapping\n    - MINOR: mux-h2: set CO_SFL_MSG_MORE when sending multiple buffers\n    - MINOR: ssl-sock: pass the CO_SFL_MSG_MORE info down the stack\n    - MINOR: quic: Stop stressing the acknowledgments process (RX ACK frames)\n    - BUG/MINOR: quic: Dysfunctional 01RTT packet number space probing\n    - BUG/MEDIUM: stream: do not try to free a failed stream-conn\n    - BUG/MEDIUM: mux-h2: do not try to free an unallocated h2s->sd\n    - BUG/MEDIUM: mux-h2: erase h2c->wait_event.tasklet on error path\n    - BUG/MEDIUM: stconn: don't set the type before allocation succeeds\n    - BUG/MINOR: stconn: fix sedesc memory leak on stream allocation failure\n    - MINOR: dynbuf: set POOL_F_NO_FAIL on buffer allocation\n    - MINOR: pools: preset the allocation failure rate to 1% with -dMfail\n    - BUG/MEDIUM: mux-h1: properly destroy a partially allocated h1s\n    - BUG/MEDIUM: applet: only set appctx->sedesc on successful allocation\n    - BUG/MINOR: quic: wake up MUX on probing only for 01RTT\n    - BUG/MINOR: quic: ignore congestion window on probing for MUX wakeup\n    - BUILD: thread: implement thread_harmless_end_sig() for threadless builds\n    - BUILD: thread: silence a build warning when threads are disabled\n    - MINOR: debug: support dumping the libs addresses when running in verbose mode\n    - BUG/MINOR: illegal use of the malloc_trim() function if jemalloc is used\n    - BUG/MINOR: trace: fix hardcoded level for TRACE_PRINTF\n    - BUG/MEDIUM: mux-quic: release data from conn flow-control on qcs reset\n    - MINOR: mux-quic: complete traces for qcs emission\n    - MINOR: mux-quic: adjust trace level for MAX_DATA/MAX_STREAM_DATA recv\n    - MINOR: mux-quic: add flow-control info to minimal trace level\n    - MINOR: pools: make sure 'no-memory-trimming' is always used\n    - MINOR: pools: intercept malloc_trim() instead of trying to plug holes\n    - MEDIUM: pools: move the compat code from trim_all_pools() to malloc_trim()\n    - MINOR: pools: export trim_all_pools()\n    - MINOR: pattern: use trim_all_pools() instead of a conditional malloc_trim()\n    - MINOR: tools: relax dlopen() on malloc/free checks\n    - MEDIUM: tools: further relax dlopen() checks too consider grouped symbols\n    - BUG/MINOR: pools: restore detection of built-in allocator\n    - MINOR: pools: report a replaced memory allocator instead of just malloc_trim()\n    - BUG/MINOR: h3: properly handle incomplete remote uni stream type\n    - BUG/MINOR: mux-quic: prevent CC status to be erased by shutdown\n    - MINOR: mux-quic: interrupt qcc_recv*() operations if CC scheduled\n    - MINOR: mux-quic: ensure CONNECTION_CLOSE is scheduled once per conn\n    - MINOR: mux-quic: close on qcs allocation failure\n    - MINOR: mux-quic: close on frame alloc failure\n    - BUG/MINOR: syslog: Request for more data if message was not fully received\n    - BUG/MEDIUM: stats: Consume the request except when parsing the POST payload\n    - DOC: config: set-var() dconv rendering issues\n    - BUG/MEDIUM: mux-h1: Wakeup H1C on shutw if there is no I/O subscription\n    - BUG/MINOR: applet/new: fix sedesc freeing logic\n    - BUG/MINOR: quic: Missing STREAM frame type updated\n    - BUILD: da: extends CFLAGS to support API v3 from 3.1.7 and onwards.\n    - BUG/MINOR: ssl: Stop leaking `err` in ssl_sock_load_ocsp()\n\n2023/03/10 : 2.8-dev5\n    - MINOR: ssl: rename confusing ssl_bind_kws\n    - BUG/MINOR: config: crt-list keywords mistaken for bind ssl keywords\n    - BUG/MEDIUM: http-ana: Detect closed SC on opposite side during body forwarding\n    - BUG/MEDIUM: stconn: Don't rearm the read expiration date if EOI was reached\n    - MINOR: global: Add an option to disable the data fast-forward\n    - MINOR: haproxy: Add an command option to disable data fast-forward\n    - REGTESTS: Remove unsupported feature command in http_splicing.vtc\n    - BUG/MEDIUM: wdt: fix wrong thread being checked for sleeping\n    - BUG/MINOR: sched: properly report long_rq when tasks remain in the queue\n    - BUG/MEDIUM: sched: allow a bit more TASK_HEAVY to be processed when needed\n    - MINOR: threads: add flags to know if a thread is started and/or running\n    - MINOR: h3/hq-interop: handle no data in decode_qcs() with FIN set\n    - BUG/MINOR: mux-quic: transfer FIN on empty STREAM frame\n    - BUG/MINOR: mworker: prevent incorrect values in uptime\n    - MINOR: h3: add traces on decode_qcs callback\n    - BUG/MINOR: quic: Possible unexpected counter incrementation on send*() errors\n    - MINOR: quic: Add new traces about by connection RX buffer handling\n    - MINOR: quic: Move code to wakeup the timer task to avoid anti-amplication deadlock\n    - BUG/MINOR: quic: Really cancel the connection timer from qc_set_timer()\n    - MINOR: quic: Simplication for qc_set_timer()\n    - MINOR: quic: Kill the connections on ICMP (port unreachable) packet receipt\n    - MINOR: quic: Add traces to qc_kill_conn()\n    - MINOR: quic: Make qc_dgrams_retransmit() return a status.\n    - BUG/MINOR: quic: Missing call to task_queue() in qc_idle_timer_do_rearm()\n    - MINOR: quic: Add a trace to identify connections which sent Initial packet.\n    - MINOR: quic: Add <pto_count> to the traces\n    - BUG/MINOR: quic: Do not probe with too little Initial packets\n    - BUG/MINOR: quic: Wrong initialization for io_cb_wakeup boolean\n    - BUG/MINOR: quic: Do not drop too small datagrams with Initial packets\n    - BUG/MINOR: quic: Missing padding for short packets\n    - MINOR: quic: adjust request reject when MUX is already freed\n    - BUG/MINOR: quic: also send RESET_STREAM if MUX released\n    - BUG/MINOR: quic: acknowledge STREAM frame even if MUX is released\n    - BUG/MINOR: h3: prevent hypothetical demux failure on int overflow\n    - MEDIUM: h3: enforce GOAWAY by resetting higher unhandled stream\n    - MINOR: mux-quic: define qc_shutdown()\n    - MINOR: mux-quic: define qc_process()\n    - MINOR: mux-quic: implement client-fin timeout\n    - MEDIUM: mux-quic: properly implement soft-stop\n    - MINOR: quic: mark quic-conn as jobs on socket allocation\n    - MEDIUM: quic: trigger fast connection closing on process stopping\n    - MINOR: mux-h2/traces: do not log h2s pointer for dummy streams\n    - MINOR: mux-h2/traces: add a missing TRACE_LEAVE() in h2s_frt_handle_headers()\n    - BUG/MEDIUM: quic: Missing TX buffer draining from qc_send_ppkts()\n    - DEBUG: stream: Add a BUG_ON to never exit process_stream with an expired task\n    - DOC: config: Fix description of options about HTTP connection modes\n    - MINOR: proxy: Only consider backend httpclose option for server connections\n    - BUG/MINOR: haproxy: Fix option to disable the fast-forward\n    - DOC: config: Add the missing tune.fail-alloc option from global listing\n    - MINOR: cfgcond: Implement strstr condition expression\n    - MINOR: cfgcond: Implement enabled condition expression\n    - REGTESTS: Skip http_splicing.vtc script if fast-forward is disabled\n    - REGTESTS: Fix ssl_errors.vtc script to wait for connections close\n    - BUG/MINOR: mworker: stop doing strtok directly from the env\n    - BUG/MEDIUM: mworker: prevent inconsistent reload when upgrading from old versions\n    - BUG/MEDIUM: mworker: don't register mworker_accept_wrapper() when master FD is wrong\n    - MINOR: startup: HAPROXY_STARTUP_VERSION contains the version used to start\n    - BUG/MINOR: cache: Cache response even if request has \"no-cache\" directive\n    - BUG/MINOR: cache: Check cache entry is complete in case of Vary\n    - MINOR: compiler: add a TOSTR() macro to turn a value into a string\n    - BUG/MINOR: lua/httpclient: missing free in hlua_httpclient_send()\n    - BUG/MEDIUM: httpclient/lua: fix a race between lua GC and hlua_ctx_destroy\n    - MEDIUM: channel: Remove CF_READ_NOEXP flag\n    - MAJOR: channel: Remove flags to report READ or WRITE errors\n    - DEBUG: stream/trace: Add sedesc flags in trace messages\n    - MINOR: channel/stconn: Move rto/wto from the channel to the stconn\n    - MEDIUM: channel/stconn: Move rex/wex timer from the channel to the sedesc\n    - MEDIUM: stconn: Don't requeue the stream's task after I/O\n    - MEDIUM: stconn: Replace read and write timeouts by a unique I/O timeout\n    - MEDIUM: stconn: Add two date to track successful reads and blocked sends\n    - MINOR: applet/stconn: Add a SE flag to specify an endpoint does not expect data\n    - MAJOR: stream: Use SE descriptor date to detect read/write timeouts\n    - MINOR: stream: Dump the task expiration date in trace messages\n    - MINOR: stream: Report rex/wex value using the sedesc date in trace messages\n    - MINOR: stream: Use relative expiration date in trace messages\n    - MINOR: stconn: Always report READ/WRITE event on shutr/shutw\n    - CLEANUP: stconn: Remove old read and write expiration dates\n    - MINOR: stconn: Set half-close timeout using proxy settings\n    - MINOR: stconn: Remove half-closed timeout\n    - REGTESTS: cache: Use rxresphdrs to only get headers for 304 responses\n    - MINOR: stconn: Add functions to set/clear SE_FL_EXP_NO_DATA flag from endpoint\n    - BUG/MINOR: proto_ux: report correct error when bind_listener fails\n    - BUG/MINOR: protocol: fix minor memory leak in protocol_bind_all()\n    - MINOR: proto_uxst: add resume method\n    - MINOR: listener/api: add lli hint to listener functions\n    - MINOR: listener: add relax_listener() function\n    - MINOR: listener: workaround for closing a tiny race between resume_listener() and stopping\n    - MINOR: listener: make sure we don't pause/resume bypassed listeners\n    - BUG/MEDIUM: listener: fix pause_listener() suspend return value handling\n    - BUG/MINOR: listener: fix resume_listener() resume return value handling\n    - BUG/MEDIUM: resume from LI_ASSIGNED in default_resume_listener()\n    - MINOR: listener: pause_listener() becomes suspend_listener()\n    - BUG/MEDIUM: listener/proxy: fix listeners notify for proxy resume\n    - BUG/MINOR: sock_unix: match finalname with tempname in sock_unix_addrcmp()\n    - MEDIUM: proto_ux: properly suspend named UNIX listeners\n    - MINOR: proto_ux: ability to dump ABNS names in error messages\n    - MINOR: haproxy: always protocol unbind on startup error path\n    - BUILD: quic: 32-bits compilation issue with %zu in quic_rx_pkts_del()\n    - BUG/MINOR: ring: do not realign ring contents on resize\n    - MEDIUM: ring: make the offset relative to the head/tail instead of absolute\n    - CLEANUP: ring: remove the now unused ring's offset\n    - MINOR: config: add HAPROXY_BRANCH environment variable\n    - BUILD: thead: Fix several 32 bits compilation issues with uint64_t variables\n    - BUG/MEDIUM: fd: avoid infinite loops in fd_add_to_fd_list and fd_rm_from_fd_list\n    - BUG/MEDIUM: h1-htx: Never copy more than the max data allowed during parsing\n    - BUG/MINOR: stream: Remove BUG_ON about the task expiration in process_stream()\n    - MINOR: stream: Handle stream's timeouts in a dedicated function\n    - MEDIUM: stream: Eventually handle stream timeouts when exiting process_stream()\n    - MINOR: stconn: Report a send activity when endpoint is willing to consume data\n    - BUG/MEDIUM: stconn: Report a blocked send if some output data are not consumed\n    - MEDIUM: mux-h1: Don't expect data from server as long as request is unfinished\n    - MEDIUM: mux-h2: Don't expect data from server as long as request is unfinished\n    - MEDIUM: mux-quic: Don't expect data from server as long as request is unfinished\n    - DOC: config: Clarify the meaning of 'hold' in the 'resolvers' section\n    - DOC: config: Replace TABs by spaces\n    - BUG/MINOR: fd: used the update list from the fd's group instead of tgid\n    - BUG/MEDIUM: fd: make fd_delete() support being called from a different group\n    - CLEANUP: listener: only store conn counts for local threads\n    - MINOR: tinfo: make thread_set functions return nth group/mask instead of first\n    - MEDIUM: quic: improve fatal error handling on send\n    - MINOR: quic: consider EBADF as critical on send()\n    - BUG/MEDIUM: connection: Clear flags when a conn is removed from an idle list\n    - BUG/MINOR: mux-h1: Don't report an error on an early response close\n    - BUG/MINOR: http-check: Don't set HTX_SL_F_BODYLESS flag with a log-format body\n    - BUG/MINOR: http-check: Skip C-L header for empty body when it's not mandatory\n    - BUG/MINOR: http-fetch: recognize IPv6 addresses in square brackets in req.hdr_ip()\n    - REGTEST: added tests covering smp_fetch_hdr_ip()\n    - MINOR: quic: simplify return path in send functions\n    - MINOR: quic: implement qc_notify_send()\n    - MINOR: quic: purge txbuf before preparing new packets\n    - MEDIUM: quic: implement poller subscribe on sendto error\n    - MINOR: quic: notify on send ready\n    - BUG/MINOR: http-ana: Don't increment conn_retries counter before the L7 retry\n    - BUG/MINOR: http-ana: Do a L7 retry on read error if there is no response\n    - BUG/MEDIUM: http-ana: Don't close request side when waiting for response\n    - BUG/MINOR: mxu-h1: Report a parsing error on abort with pending data\n    - MINOR: ssl: Destroy ocsp update http_client during cleanup\n    - MINOR: ssl: Reinsert ocsp update entries later in case of unknown error\n    - MINOR: ssl: Add ocsp update success/failure counters\n    - MINOR: ssl: Store specific ocsp update errors in response and update ctx\n    - MINOR: ssl: Add certificate's path to certificate_ocsp structure\n    - MINOR: ssl: Add 'show ssl ocsp-updates' CLI command\n    - MINOR: ssl: Add sample fetches related to OCSP update\n    - MINOR: ssl: Use dedicated proxy and log-format for OCSP update\n    - MINOR: ssl: Reorder struct certificate_ocsp members\n    - MINOR: ssl: Increment OCSP update replay delay in case of failure\n    - MINOR: ssl: Add way to dump ocsp response in base64\n    - MINOR: ssl: Add global options to modify ocsp update min/max delay\n    - REGTESTS: ssl: Fix ocsp update crt-lists\n    - REGTESTS: ssl: Add test for new ocsp update cli commands\n    - MINOR: ssl: Add ocsp-update information to \"show ssl crt-list\"\n    - BUG/MINOR: ssl: Fix ocsp-update when using \"add ssl crt-list\"\n    - MINOR: ssl: Replace now.tv_sec with date.tv_sec in ocsp update task\n    - BUG/MINOR: ssl: Use 'date' instead of 'now' in ocsp stapling callback\n    - BUG/MEDIUM: quic: properly handle duplicated STREAM frames\n    - BUG/MINOR: cli: fix CLI handler \"set anon global-key\" call\n    - MINOR: http_ext: adding some documentation, forgot to inline function\n    - BUG/MINOR: quic: Do not send too small datagrams (with Initial packets)\n    - MINOR: quic: Add a BUG_ON_HOT() call for too small datagrams\n    - BUG/MINOR: quic: Ensure to be able to build datagrams to be retransmitted\n    - BUG/MINOR: quic: v2 Initial packets decryption failed\n    - MINOR: quic: Add traces about QUIC TLS key update\n    - BUG/MINOR: quic: Remove force_ack for Initial,Handshake packets\n    - BUG/MINOR: quic: Ensure not to retransmit packets with no ack-eliciting frames\n    - BUG/MINOR: quic: Do not resend already acked frames\n    - BUG/MINOR: quic: Missing detections of amplification limit reached\n    - MINOR: quic: Send PING frames when probing Initial packet number space\n    - BUG/MEDIUM: quic: do not crash when handling STREAM on released MUX\n    - BUG/MAJOR: fd/thread: fix race between updates and closing FD\n    - BUG/MEDIUM: dns: ensure ring offset is properly reajusted to head\n    - BUG/MINOR: mux-quic: properly init STREAM frame as not duplicated\n    - MINOR: quic: Do not accept wrong active_connection_id_limit values\n    - MINOR: quic: Store the next connection IDs sequence number in the connection\n    - MINOR: quic: Typo fix for ACK_ECN frame\n    - MINOR: quic: RETIRE_CONNECTION_ID frame handling (RX)\n    - MINOR: quic: Useless TLS context allocations in qc_do_rm_hp()\n    - MINOR: quic: Add spin bit support\n    - MINOR: quic: Add transport parameters to \"show quic\"\n    - BUG/MEDIUM: sink/forwarder: ensure ring offset is properly readjusted to head\n    - BUG/MINOR: dns: fix ring offset calculation on first read\n    - BUG/MINOR: dns: fix ring offset calculation in dns_resolve_send()\n    - MINOR: jwt: Add support for RSA-PSS signatures (PS256 algorithm)\n    - MINOR: h3: add traces on h3_init_uni_stream() error paths\n    - MINOR: quic: create a global list dedicated for closing QUIC conns\n    - MINOR: quic: handle new closing list in show quic\n    - MEDIUM: quic: release closing connections on stopping\n    - BUG/MINOR: quic: Wrong RETIRE_CONNECTION_ID sequence number check\n    - MINOR: fd/cli: report the polling mask in \"show fd\"\n    - CLEANUP: sock: always perform last connection updates before wakeup\n    - MINOR: quic: Do not stress the peer during retransmissions of lost packets\n    - BUG/MINOR: init: properly detect NUMA bindings on large systems\n    - BUG/MINOR: thread: report thread and group counts in the correct order\n    - BUG/MAJOR: fd/threads: close a race on closing connections after takeover\n    - MINOR: debug: add random delay injection with \"debug dev delay-inj\"\n    - BUG/MINOR: mworker: use MASTER_MAXCONN as default maxconn value\n    - BUG/MINOR: quic: Missing listener accept queue tasklet wakeups\n    - MINOR: quic_sock: un-statify quic_conn_sock_fd_iocb()\n    - DOC: config: fix typo \"dependeing\" in bind thread description\n    - DOC/CLEANUP: fix typos\n\n2023/02/14 : 2.8-dev4\n    - BUG/MINOR: stats: fix source buffer size for http dump\n    - BUG/MEDIUM: stats: fix resolvers dump\n    - BUG/MINOR: stats: fix ctx->field update in stats_dump_proxy_to_buffer()\n    - BUG/MINOR: stats: fix show stats field ctx for servers\n    - BUG/MINOR: stats: fix STAT_STARTED behavior with full htx\n    - MINOR: quic: Update version_information transport parameter to draft-14\n    - BUG/MINOR: stats: Prevent HTTP \"other sessions\" counter underflows\n    - BUG/MEDIUM: thread: fix extraneous shift in the thread_set parser\n    - BUG/MEDIUM: listener/thread: bypass shards setting on failed thread resolution\n    - BUG/MINOR: ssl/crt-list: warn when a line is malformated\n    - BUG/MEDIUM: stick-table: do not leave entries in end of window during purge\n    - BUG/MINOR: clock: do not mix wall-clock and monotonic time in uptime calculation\n    - BUG/MEDIUM: cache: use the correct time reference when comparing dates\n    - MEDIUM: clock: force internal time to wrap early after boot\n    - BUILD: ssl/ocsp: ssl_ocsp-t.h depends on ssl_sock-t.h\n    - MINOR: ssl/ocsp: add a function to check the OCSP update configuration\n    - MINOR: cfgparse/server: move (min/max)conn postparsing logic into dedicated function\n    - BUG/MINOR: server/add: ensure minconn/maxconn consistency when adding server\n    - BUG/MEDIUM: stconn: Schedule a shutw on shutr if data must be sent first\n    - BUG/MEDIUM: quic: fix crash when \"option nolinger\" is set in the frontend\n    - MINOR: quic: implement a basic \"show quic\" CLI handler\n    - MINOR: quic: display CIDs and state in \"show quic\"\n    - MINOR: quic: display socket info on \"show quic\"\n    - MINOR: quic: display infos about various encryption level on \"show quic\"\n    - MINOR: quic: display Tx stream info on \"show quic\"\n    - MINOR: quic: filter closing conn on \"show quic\"\n    - BUG/MINOR: quic: fix filtering of closing connections on \"show quic\"\n    - BUG/MEDIUM: stconn: Don't needlessly wake the stream on send during fast-forward\n    - BUG/MINOR: quic: fix type bug on \"show quic\" for 32-bits arch\n    - BUG/MINOR: mworker: fix uptime for master process\n    - BUG/MINOR: clock/stats: also use start_time not start_date in HTML info\n    - BUG/MEDIUM: stconn: stop to enable/disable reads from streams via si_update_rx\n    - BUG/MEDIUM: quic: Buffer overflow when looking through QUIC CLI keyword list\n    - DOC: proxy-protocol: fix wrong byte in provided example\n    - MINOR: ssl-ckch: Stop to test CF_WRITE_ERROR to commit CA/CRL file\n    - MINOR: bwlim: Remove useless test on CF_READ_ERROR to detect the last packet\n    - BUG/MINOR: http-ana: Fix condition to set LAST termination flag\n    - BUG/MINOR: mux-h1: Don't report an H1C error on client timeout\n    - BUG/MEDIUM: spoe: Don't set the default traget for the SPOE agent frontend\n    - BUG/MINOR: quic: Wrong datagram dispatch because of qc_check_dcid()\n    - BUG/CRITICAL: http: properly reject empty http header field names\n\n2023/02/04 : 2.8-dev3\n    - BUG/MINOR: sink: make sure to always properly unmap a file-backed ring\n    - DEV: haring: add a new option \"-r\" to automatically repair broken files\n    - BUG/MINOR: ssl: Fix leaks in 'update ssl ocsp-response' CLI command\n    - MINOR: ssl: Remove debug fprintf in 'update ssl ocsp-response' cli command\n    - MINOR: connection: add a BUG_ON() to detect destroying connection in idle list\n    - MINOR: mux-quic/h3: send SETTINGS as soon as transport is ready\n    - BUG/MINOR: h3: fix GOAWAY emission\n    - BUG/MEDIUM: mux-quic: fix crash on H3 SETTINGS emission\n    - BUG/MEDIUM: hpack: fix incorrect huffman decoding of some control chars\n    - BUG/MINOR: log: release global log servers on exit\n    - BUG/MINOR: ring: release the backing store name on exit\n    - BUG/MINOR: sink: free the forwarding task on exit\n    - CLEANUP: trace: remove the QUIC-specific ifdefs\n    - MINOR: trace: add a TRACE_ENABLED() macro to determine if a trace is active\n    - MINOR: trace: add a trace_no_cb() dummy callback for when to use no callback\n    - MINOR: trace: add the long awaited TRACE_PRINTF()\n    - MINOR: h2: add h2_phdr_to_ist() to make ISTs from pseudo headers\n    - MEDIUM: mux-h2/trace: add tracing support for headers\n    - CLEANUP: mux-h2/trace: shorten the name of the header enc/dec functions\n    - DEV: hpack: fix `trash` build regression\n    - MINOR: http_htx: add http_append_header() to append value to header\n    - MINOR: http_htx: add http_prepend_header() to prepend value to header\n    - MINOR: sample: add ARGC_OPT\n    - MINOR: proxy: introduce http only options\n    - MINOR: proxy/http_ext: introduce proxy forwarded option\n    - REGTEST: add ifnone-forwardfor test\n    - MINOR: proxy: move 'forwardfor' option to http_ext\n    - MINOR: proxy: move 'originalto' option to http_ext\n    - MINOR: http_ext: introduce http ext converters\n    - MINOR: http_ext: add rfc7239_is_valid converter\n    - MINOR: http_ext: add rfc7239_field converter\n    - MINOR: http_ext: add rfc7239_n2nn converter\n    - MINOR: http_ext: add rfc7239_n2np converter\n    - REGTEST: add RFC7239 forwarded header tests\n    - OPTIM: http_ext/7239: introduce c_mode to save some space\n    - MINOR: http_ext/7239: warn the user when fetch is not available\n    - MEDIUM: proxy/http_ext: implement dynamic http_ext\n    - MINOR: cfgparse/http_ext: move post-parsing http_ext steps to http_ext\n    - DOC: config: fix option spop-check proxy compatibility\n    - BUG/MINOR: fcgi-app: prevent 'use-fcgi-app' in default section\n    - DOC: config: 'http-send-name-header' option may be used in default section\n    - BUG/MINOR: mux-h2: Fix possible null pointer deref on h2c in _h2_trace_header()\n    - BUG/MINOR: http_ext/7239: ipv6 dumping relies on out of scope variables\n    - BUG/MEDIUM: h3: do not crash if no buf space for trailers\n    - OPTIM: h3: skip buf realign if no trailer to encode\n    - MINOR: mux-quic/h3: define stream close callback\n    - BUG/MEDIUM: h3: handle STOP_SENDING on control stream\n    - BUG/MINOR: h3: reject RESET_STREAM received for control stream\n    - MINOR: h3: add missing traces on closure\n    - BUG/MEDIUM: ssl: wrong eviction from the session cache tree\n    - BUG/MINOR: h3: fix crash due to h3 traces\n    - BUG/MINOR: h3: fix crash due to h3 traces\n    - BUG/MEDIUM: thread: consider secondary threads as idle+harmless during boot\n    - BUG/MINOR: stats: use proper buffer size for http dump\n    - BUILD: makefile: fix PCRE overriding specific lib path\n    - MINOR: quic: remove fin from quic_stream frame type\n    - MINOR: quic: ensure offset is properly set for STREAM frames\n    - MINOR: quic: define new functions for frame alloc\n    - MINOR: quic: refactor frame deallocation\n    - MEDIUM: quic: implement a retransmit limit per frame\n    - MINOR: quic: add config for retransmit limit\n    - OPTIM: htx: inline the most common memcpy(8)\n    - CLEANUP: quic: no need for atomics on packet refcnt\n    - MINOR: stats: add by HTTP version cumulated number of sessions and requests\n    - BUG/MINOR: quic: Possible stream truncations under heavy loss\n    - BUG/MINOR: quic: Too big PTO during handshakes\n    - MINOR: quic: Add a trace about variable states in qc_prep_fast_retrans()\n    - BUG/MINOR: quic: Do not ignore coalesced packets in qc_prep_fast_retrans()\n    - MINOR: quic: When probing Handshake packet number space, also probe the Initial one\n    - BUG/MAJOR: quic: Possible crash when processing 1-RTT during 0-RTT session\n    - MEDIUM: quic: Remove qc_conn_finalize() from the ClientHello TLS callbacks\n    - BUG/MINOR: quic: Unchecked source connection ID\n    - MEDIUM: listener: move the analysers mask to the bind_conf\n    - MINOR: listener: move maxseg and tcp_ut to bind_conf\n    - MINOR: listener: move maxaccept from listener to bind_conf\n    - MINOR: listener: move the backlog setting from listener to bind_conf\n    - MINOR: listener: move the maxconn parameter to the bind_conf\n    - MINOR: listener: move the ->accept callback to the bind_conf\n    - MINOR: listener: remove the useless ->default_target field\n    - MINOR: listener: move the nice field to the bind_conf\n    - MINOR: listener: move the NOLINGER option to the bind_conf\n    - MINOR: listener: move the NOQUICKACK option to the bind_conf\n    - MINOR: listener: move the DEF_ACCEPT option to the bind_conf\n    - MINOR: listener: move TCP_FO to bind_conf\n    - MINOR: listener: move the ACC_PROXY and ACC_CIP options to bind_conf\n    - MINOR: listener: move LI_O_UNLIMITED and LI_O_NOSTOP to bind_conf\n    - MINOR: listener: get rid of LI_O_TCP_L4_RULES and LI_O_TCP_L5_RULES\n    - CLEANUP: listener: remove the now unused options field\n    - MINOR: listener: remove the now useless LI_F_QUIC_LISTENER flag\n    - CLEANUP: config: remove test for impossible case regarding bind thread mask\n    - MINOR: thread: add a simple thread_set API\n    - MEDIUM: listener/config: make the \"thread\" parser rely on thread_sets\n    - CLEANUP: config: stop using bind_tgroup and bind_thread\n    - CLEANUP: listener/thread: remove now unused bind_conf's bind_tgroup/bind_thread\n    - CLEANUP: listener/config: remove the special case for shards==1\n    - MEDIUM: config: restrict shards, not bind_conf to one group each\n    - BUG/MEDIUM: quic: do not split STREAM frames if no space\n    - BUILD: thread: fix build warnings with older gcc compilers\n\n2023/01/22 : 2.8-dev2\n    - CLEANUP: htx: fix a typo in an error message of http_str_to_htx\n    - DOC: config: added optional rst-ttl argument to silent-drop in action lists\n    - BUG/MINOR: ssl: Fix crash in 'update ssl ocsp-response' CLI command\n    - BUG/MINOR: ssl: Crash during cleanup because of ocsp structure pointer UAF\n    - MINOR: ssl: Create temp X509_STORE filled with cert chain when checking ocsp response\n    - MINOR: ssl: Only set ocsp->issuer if issuer not in cert chain\n    - MINOR: ssl: Release ssl_ocsp_task_ctx.cur_ocsp when destroying task\n    - MINOR: ssl: Detect more OCSP update inconsistencies\n    - BUG/MINOR: ssl: Fix OCSP_CERTID leak when same certificate is used multiple times\n    - MINOR: ssl: Limit ocsp_uri buffer size to minimum\n    - MINOR: ssl: Remove mention of ckch_store in error message of cli command\n    - MINOR: channel: Don't test CF_READ_NULL while CF_SHUTR is enough\n    - REORG: channel: Rename CF_READ_NULL to CF_READ_EVENT\n    - REORG: channel: Rename CF_WRITE_NULL to CF_WRITE_EVENT\n    - MEDIUM: channel: Use CF_READ_EVENT instead of CF_READ_PARTIAL\n    - MEDIUM: channel: Use CF_WRITE_EVENT instead of CF_WRITE_PARTIAL\n    - MINOR: channel: Remove CF_READ_ACTIVITY\n    - MINOR: channel: Remove CF_WRITE_ACTIVITY\n    - MINOR: channel: Remove CF_ANA_TIMEOUT and report CF_READ_EVENT instead\n    - MEDIUM: channel: Remove CF_READ_ATTACHED and report CF_READ_EVENT instead\n    - MINOR: channel: Stop to test CF_READ_ERROR flag if CF_SHUTR is enough\n    - MINOR: channel/applets: Stop to test CF_WRITE_ERROR flag if CF_SHUTW is enough\n    - DOC: management: add details on \"Used\" status\n    - DOC: management: add details about @system-ca in \"show ssl ca-file\"\n    - BUG/MINOR: mux-quic: fix transfer of empty HTTP response\n    - MINOR: mux-quic: add traces for flow-control limit reach\n    - MAJOR: mux-quic: rework stream sending priorization\n    - MEDIUM: h3: send SETTINGS before STREAM frames\n    - MINOR: mux-quic: use send-list for STOP_SENDING/RESET_STREAM emission\n    - MINOR: mux-quic: use send-list for immediate sending retry\n    - BUG/MINOR: h1-htx: Remove flags about protocol upgrade on non-101 responses\n    - BUG/MINOR: hlua: Fix Channel.line and Channel.data behavior regarding the doc\n    - BUG/MINOR: resolvers: Wait the resolution execution for a do_resolv action\n    - BUG/MINOR: ssl: Remove unneeded pointer check in ocsp cli release function\n    - BUG/MINOR: ssl: Missing ssl_conf pointer check when checking ocsp update inconsistencies\n    - DEV: tcploop: add minimal support for unix sockets\n    - BUG/MEDIUM: listener: duplicate inherited FDs if needed\n    - BUG/MINOR: ssl: OCSP minimum update threshold not properly set\n    - MINOR: ssl: Treat ocsp-update inconsistencies as fatal errors\n    - MINOR: ssl: Do not wake ocsp update task if update tree empty\n    - MINOR: ssl: Reinsert updated ocsp response later in tree in case of http error\n    - REGTEST: ssl: Add test for 'update ssl ocsp-response' CLI command\n    - OPTIM: global: move byte counts out of global and per-thread\n    - BUG/MEDIUM: peers: make \"show peers\" more careful about partial initialization\n    - BUG/MINOR: promex: Don't forget to consume the request on error\n    - MINOR: http-ana: Add a function to set HTTP termination flags\n    - MINOR: http-ana: Use http_set_term_flags() in most of HTTP analyzers\n    - BUG/MINOR: http-ana: Report SF_FINST_R flag on error waiting the request body\n    - MINOR: http-ana: Use http_set_term_flags() when waiting the request body\n    - BUG/MINOR: http-fetch: Don't block HTTP sample fetch eval in HTTP_MSG_ERROR state\n    - MAJOR: http-ana: Review error handling during HTTP payload forwarding\n    - CLEANUP: http-ana: Remove HTTP_MSG_ERROR state\n    - BUG/MEDIUM: mux-h2: Don't send CANCEL on shutw when response length is unkown\n    - MINOR: htx: Add an HTX value for the extra field is payload length is unknown\n    - BUG/MINOR: http-ana: make set-status also update txn->status\n    - BUG/MINOR: listeners: fix suspend/resume of inherited FDs\n    - DOC: config: fix wrong section number for \"protocol prefixes\"\n    - DOC: config: fix aliases for protocol prefixes \"udp4@\" and \"udp6@\"\n    - DOC: config: mention the missing \"quic4@\" and \"quic6@\" in protocol prefixes\n    - MINOR: listener: also support \"quic+\" as an address prefix\n    - CLEANUP: stconn: always use se_fl_set_error() to set the pending error\n    - BUG/MEDIUM: stconn: also consider SE_FL_EOI to switch to SE_FL_ERROR\n    - MINOR: quic: Useless test about datagram destination addresses\n    - MINOR: quic: Disable the active connection migrations\n    - MINOR: quic: Add \"no-quic\" global option\n    - MINOR: sample: Add \"quic_enabled\" sample fetch\n    - MINOR: quic: Replace v2 draft definitions by those of the final 2 version\n    - BUG/MINOR: mux-fcgi: Correctly set pathinfo\n    - DOC: config: fix \"Address formats\" chapter syntax\n    - BUG/MEDIUM: jwt: Properly process ecdsa signatures (concatenated R and S params)\n    - BUILD: ssl: add ECDSA_SIG_set0() for openssl < 1.1 or libressl < 2.7\n    - Revert \"BUILD: ssl: add ECDSA_SIG_set0() for openssl < 1.1 or libressl < 2.7\"\n    - BUG/MINOR: ssl: Fix compilation with OpenSSL 1.0.2 (missing ECDSA_SIG_set0)\n    - BUG/MINOR: listener: close tiny race between resume_listener() and stopping\n    - BUG/MINOR: h3: properly handle connection headers\n    - MINOR: h3: extend function for QUIC varint encoding\n    - MINOR: h3: implement TRAILERS encoding\n    - BUG/MINOR: bwlim: Check scope for period expr for set-bandwitdh-limit actions\n    - MEDIUM: bwlim: Support constants limit or period on set-bandwidth-limit actions\n    - BUG/MINOR: bwlim: Fix parameters check for set-bandwidth-limit actions\n    - MINOR: h3: implement TRAILERS decoding\n    - BUG/MEDIUM: fd/threads: fix again incorrect thread selection in wakeup broadcast\n    - BUG/MINOR: thread: always reload threads_enabled in loops\n    - MINOR: threads: add a thread_harmless_end() version that doesn't wait\n    - BUG/MEDIUM: debug/thread: make the debug handler not wait for !rdv_requests\n    - BUG/MINOR: mux-h2: make sure to produce a log on invalid requests\n    - BUG/MINOR: mux-h2: add missing traces on failed headers decoding\n    - BUILD: hpack: include global.h for the trash that is needed in debug mode\n    - BUG/MINOR: jwt: Wrong return value checked\n    - BUG/MINOR: quic: Do not request h3 clients to close its unidirection streams\n    - MEDIUM: quic-sock: fix udp source address for send on listener socket\n\n2023/01/07 : 2.8-dev1\n    - MEDIUM: 51d: add support for 51Degrees V4 with Hash algorithm\n    - MINOR: debug: support pool filtering on \"debug dev memstats\"\n    - MINOR: debug: add a balance of alloc - free at the end of the memstats dump\n    - LICENSE: wurfl: clarify the dummy library license.\n    - MINOR: event_hdl: add event handler base api\n    - DOC/MINOR: api: add documentation for event_hdl feature\n    - MEDIUM: ssl: rename the struct \"cert_key_and_chain\" to \"ckch_data\"\n    - MINOR: quic: remove qc from quic_rx_packet\n    - MINOR: quic: complete traces in qc_rx_pkt_handle()\n    - MINOR: quic: extract datagram parsing code\n    - MINOR: tools: add port for ipcmp as optional criteria\n    - MINOR: quic: detect connection migration\n    - MINOR: quic: ignore address migration during handshake\n    - MINOR: quic: startup detect for quic-conn owned socket support\n    - MINOR: quic: test IP_PKTINFO support for quic-conn owned socket\n    - MINOR: quic: define config option for socket per conn\n    - MINOR: quic: allocate a socket per quic-conn\n    - MINOR: quic: use connection socket for emission\n    - MEDIUM: quic: use quic-conn socket for reception\n    - MEDIUM: quic: move receive out of FD handler to quic-conn io-cb\n    - MINOR: mux-quic: rename duplicate function names\n    - MEDIUM: quic: requeue datagrams received on wrong socket\n    - MINOR: quic: reconnect quic-conn socket on address migration\n    - MINOR: quic: activate socket per conn by default\n    - BUG/MINOR: ssl: initialize SSL error before parsing\n    - BUG/MINOR: ssl: initialize WolfSSL before parsing\n    - BUG/MINOR: quic: fix fd leak on startup check quic-conn owned socket\n    - BUG/MEDIIM: stconn: Flush output data before forwarding close to write side\n    - MINOR: server: add srv->rid (revision id) value\n    - MINOR: stats: add server revision id support\n    - MINOR: server/event_hdl: add support for SERVER_ADD and SERVER_DEL events\n    - MINOR: server/event_hdl: add support for SERVER_UP and SERVER_DOWN events\n    - BUG/MEDIUM: checks: do not reschedule a possibly running task on state change\n    - BUG/MINOR: checks: make sure fastinter is used even on forced transitions\n    - CLEANUP: assorted typo fixes in the code and comments\n    - MINOR: mworker: display an alert upon a wait-mode exit\n    - BUG/MEDIUM: mworker: fix segv in early failure of mworker mode with peers\n    - BUG/MEDIUM: mworker: create the mcli_reload socketpairs in case of upgrade\n    - BUG/MINOR: checks: restore legacy on-error fastinter behavior\n    - MINOR: check: use atomic for s->consecutive_errors\n    - MINOR: stats: properly handle ST_F_CHECK_DURATION metric\n    - MINOR: mworker: remove unused legacy code in mworker_cleanlisteners\n    - MINOR: peers: unused code path in process_peer_sync\n    - BUG/MINOR: init/threads: continue to limit default thread count to max per group\n    - CLEANUP: init: remove useless assignment of nbthread\n    - BUILD: atomic: atomic.h may need compiler.h on ARMv8.2-a\n    - BUILD: makefile/da: also clean Os/ in Device Atlas dummy lib dir\n    - BUG/MEDIUM: httpclient/lua: double LIST_DELETE on end of lua task\n    - CLEANUP: pools: move the write before free to the uaf-only function\n    - CLEANUP: pool: only include pool-os from pool.c not pool.h\n    - REORG: pool: move all the OS specific code to pool-os.h\n    - CLEANUP: pools: get rid of CONFIG_HAP_POOLS\n    - DEBUG: pool: show a few examples in -dMhelp\n    - MINOR: pools: make DEBUG_UAF a runtime setting\n    - BUG/MINOR: promex: create haproxy_backend_agg_server_status\n    - MINOR: promex: introduce haproxy_backend_agg_check_status\n    - DOC: promex: Add missing backend metrics\n    - BUG/MAJOR: fcgi: Fix uninitialized reserved bytes\n    - REGTESTS: fix the race conditions in iff.vtc\n    - CI: github: reintroduce openssl 1.1.1\n    - BUG/MINOR: quic: properly handle alloc failure in qc_new_conn()\n    - BUG/MINOR: quic: handle alloc failure on qc_new_conn() for owned socket\n    - CLEANUP: mux-quic: remove unused attribute on qcs_is_close_remote()\n    - BUG/MINOR: mux-quic: remove qcs from opening-list on free\n    - BUG/MINOR: mux-quic: handle properly alloc error in qcs_new()\n    - CI: github: split ssl lib selection based on git branch\n    - REGTESTS: startup: check maxconn computation\n    - BUG/MINOR: startup: don't use internal proxies to compute the maxconn\n    - REGTESTS: startup: change the expected maxconn to 11000\n    - CI: github: set ulimit -n to a greater value\n    - REGTESTS: startup: activate automatic_maxconn.vtc\n    - MINOR: sample: add param converter\n    - CLEANUP: ssl: remove check on srv->proxy\n    - BUG/MEDIUM: freq-ctr: Don't compute overshoot value for empty counters\n    - BUG/MEDIUM: resolvers: Use tick_first() to update the resolvers task timeout\n    - REGTESTS: startup: add alternatives values in automatic_maxconn.vtc\n    - BUG/MEDIUM: h3: reject request with invalid header name\n    - BUG/MEDIUM: h3: reject request with invalid pseudo header\n    - MINOR: http: extract content-length parsing from H2\n    - BUG/MEDIUM: h3: parse content-length and reject invalid messages\n    - CI: github: remove redundant ASAN loop\n    - CI: github: split matrix for development and stable branches\n    - BUG/MEDIUM: mux-h1: Don't release H1 stream upgraded from TCP on error\n    - BUG/MINOR: mux-h1: Fix test instead a BUG_ON() in h1_send_error()\n    - MINOR: http-htx: add BUG_ON to prevent API error on http_cookie_register\n    - BUG/MEDIUM: h3: fix cookie header parsing\n    - BUG/MINOR: h3: fix memleak on HEADERS parsing failure\n    - MINOR: h3: check return values of htx_add_* on headers parsing\n    - MINOR: ssl: Remove unneeded buffer allocation in show ocsp-response\n    - MINOR: ssl: Remove unnecessary alloc'ed trash chunk in show ocsp-response\n    - BUG/MINOR: ssl: Fix memory leak of find_chain in ssl_sock_load_cert_chain\n    - MINOR: stats: provide ctx for dumping functions\n    - MINOR: stats: introduce stats field ctx\n    - BUG/MINOR: stats: fix show stat json buffer limitation\n    - MINOR: stats: make show info json future-proof\n    - BUG/MINOR: quic: fix crash on PTO rearm if anti-amplification reset\n    - BUILD: 51d: fix build issue with recent compilers\n    - REGTESTS: startup: disable automatic_maxconn.vtc\n    - BUILD: peers: peers-t.h depends on stick-table-t.h\n    - BUG/MEDIUM: tests: use tmpdir to create UNIX socket\n    - BUG/MINOR: mux-h1: Report EOS on parsing/internal error for not running stream\n    - BUG/MINOR:: mux-h1: Never handle error at mux level for running connection\n    - BUG/MEDIUM: stats: Rely on a local trash buffer to dump the stats\n    - OPTIM: pool: split the read_mostly from read_write parts in pool_head\n    - MINOR: pool: make the thread-local hot cache size configurable\n    - MINOR: freq_ctr: add opportunistic versions of swrate_add()\n    - MINOR: pool: only use opportunistic versions of the swrate_add() functions\n    - REGTESTS: ssl: enable the ssl_reuse.vtc test for WolfSSL\n    - BUG/MEDIUM: mux-quic: fix double delete from qcc.opening_list\n    - BUG/MEDIUM: quic: properly take shards into account on bind lines\n    - BUG/MINOR: quic: do not allocate more rxbufs than necessary\n    - MINOR: ssl: Add a lock to the OCSP response tree\n    - MINOR: httpclient: Make the CLI flags public for future use\n    - MINOR: ssl: Add helper function that extracts an OCSP URI from a certificate\n    - MINOR: ssl: Add OCSP request helper function\n    - MINOR: ssl: Add helper function that checks the validity of an OCSP response\n    - MINOR: ssl: Add \"update ssl ocsp-response\" cli command\n    - MEDIUM: ssl: Add ocsp_certid in ckch structure and discard ocsp buffer early\n    - MINOR: ssl: Add ocsp_update_tree and helper functions\n    - MINOR: ssl: Add crt-list ocsp-update option\n    - MINOR: ssl: Store 'ocsp-update' mode in the ckch_data and check for inconsistencies\n    - MEDIUM: ssl: Insert ocsp responses in update tree when needed\n    - MEDIUM: ssl: Add ocsp update task main function\n    - MEDIUM: ssl: Start update task if at least one ocsp-update option is set to on\n    - DOC: ssl: Add documentation for ocsp-update option\n    - REGTESTS: ssl: Add tests for ocsp auto update mechanism\n    - MINOR: ssl: Move OCSP code to a dedicated source file\n    - BUG/MINOR: ssl/ocsp: check chunk_strcpy() in ssl_ocsp_get_uri_from_cert()\n    - CLEANUP: ssl/ocsp: add spaces around operators\n    - BUG/MEDIUM: mux-h2: Refuse interim responses with end-stream flag set\n    - BUG/MINOR: pool/stats: Use ullong to report total pool usage in bytes in stats\n    - BUG/MINOR: ssl/ocsp: httpclient blocked when doing a GET\n    - MINOR: httpclient: don't add body when istlen is empty\n    - MEDIUM: httpclient: change the default log format to skip duplicate proxy data\n    - BUG/MINOR: httpclient/log: free of invalid ptr with httpclient_log_format\n    - MEDIUM: mux-quic: implement shutw\n    - MINOR: mux-quic: do not count stream flow-control if already closed\n    - MINOR: mux-quic: handle RESET_STREAM reception\n    - MEDIUM: mux-quic: implement STOP_SENDING emission\n    - MINOR: h3: use stream error when needed instead of connection\n    - CI: github: enable github api authentication for OpenSSL tags read\n    - BUG/MINOR: mux-quic: ignore remote unidirectional stream close\n    - CI: github: use the GITHUB_TOKEN instead of a manually generated token\n    - BUILD: makefile: build the features list dynamically\n    - BUILD: makefile: move common options-oriented macros to include/make/options.mk\n    - BUILD: makefile: sort the features list\n    - BUILD: makefile: initialize all build options' variables at once\n    - BUILD: makefile: add a function to collect all options' CFLAGS/LDFLAGS\n    - BUILD: makefile: start to automatically collect CFLAGS/LDFLAGS\n    - BUILD: makefile: ensure that all USE_* handlers appear before CFLAGS are used\n    - BUILD: makefile: clean the wolfssl include and lib generation rules\n    - BUILD: makefile: make sure to also ignore SSL_INC when using wolfssl\n    - BUILD: makefile: reference libdl only once\n    - BUILD: makefile: make sure LUA_INC and LUA_LIB are always initialized\n    - BUILD: makefile: do not restrict Lua's prepend path to empty LUA_LIB_NAME\n    - BUILD: makefile: never force -latomic, set USE_LIBATOMIC instead\n    - BUILD: makefile: add an implicit USE_MATH variable for -lm\n    - BUILD: makefile: properly report USE_PCRE/USE_PCRE2 in features\n    - CLEANUP: makefile: properly indent ifeq/ifneq conditional blocks\n    - BUILD: makefile: rework 51D to split v3/v4\n    - BUILD: makefile: support LIBCRYPT_LDFLAGS\n    - BUILD: makefile: support RT_LDFLAGS\n    - BUILD: makefile: support THREAD_LDFLAGS\n    - BUILD: makefile: support BACKTRACE_LDFLAGS\n    - BUILD: makefile: support SYSTEMD_LDFLAGS\n    - BUILD: makefile: support ZLIB_CFLAGS and ZLIB_LDFLAGS\n    - BUILD: makefile: support ENGINE_CFLAGS\n    - BUILD: makefile: support OPENSSL_CFLAGS and OPENSSL_LDFLAGS\n    - BUILD: makefile: support WOLFSSL_CFLAGS and WOLFSSL_LDFLAGS\n    - BUILD: makefile: support LUA_CFLAGS and LUA_LDFLAGS\n    - BUILD: makefile: support DEVICEATLAS_CFLAGS and DEVICEATLAS_LDFLAGS\n    - BUILD: makefile: support PCRE[2]_CFLAGS and PCRE[2]_LDFLAGS\n    - BUILD: makefile: refactor support for 51DEGREES v3/v4\n    - BUILD: makefile: support WURFL_CFLAGS and WURFL_LDFLAGS\n    - BUILD: makefile: make all OpenSSL variants use the same settings\n    - BUILD: makefile: remove the special case of the SSL option\n    - BUILD: makefile: only consider settings from enabled options\n    - BUILD: makefile: also list per-option settings in 'make opts'\n    - BUG/MINOR: debug: don't mask the TH_FL_STUCK flag before dumping threads\n    - MINOR: cfgparse-ssl: avoid a possible crash on OOM in ssl_bind_parse_npn()\n    - BUG/MINOR: ssl: Missing goto in error path in ocsp update code\n    - BUG/MINOR: stick-table: report the correct action name in error message\n    - CI: Improve headline in matrix.py\n    - CI: Add in-memory cache for the latest OpenSSL/LibreSSL\n    - CI: Use proper `if` blocks instead of conditional expressions in matrix.py\n    - CI: Unify the `GITHUB_TOKEN` name across matrix.py and vtest.yml\n    - CI: Explicitly check environment variable against `None` in matrix.py\n    - CI: Reformat `matrix.py` using `black`\n    - MINOR: config: add environment variables for default log format\n    - REGTESTS: Remove REQUIRE_VERSION=1.9 from all tests\n    - REGTESTS: Remove REQUIRE_VERSION=2.0 from all tests\n    - REGTESTS: Remove tests with REQUIRE_VERSION_BELOW=1.9\n    - BUG/MINOR: http-fetch: Only fill txn status during prefetch if not already set\n    - BUG/MAJOR: buf: Fix copy of wrapping output data when a buffer is realigned\n    - DOC: config: fix alphabetical ordering of http-after-response rules\n    - MINOR: http-rules: Add missing actions in http-after-response ruleset\n    - DOC: config: remove duplicated \"http-response sc-set-gpt0\" directive\n    - BUG/MINOR: proxy: free orgto_hdr_name in free_proxy()\n    - REGTEST: fix the race conditions in json_query.vtc\n    - REGTEST: fix the race conditions in add_item.vtc\n    - REGTEST: fix the race conditions in digest.vtc\n    - REGTEST: fix the race conditions in hmac.vtc\n    - BUG/MINOR: fd: avoid bad tgid assertion in fd_delete() from deinit()\n    - BUG/MINOR: http: Memory leak of http redirect rules' format string\n    - MEDIUM: stick-table: set the track-sc limit at boottime via tune.stick-counters\n    - MINOR: stick-table: implement the sc-add-gpc() action\n\n2022/12/01 : 2.8-dev0\n    - MINOR: version: mention that it's development again\n\n2022/12/01 : 2.7.0\n    - MINOR: ssl: forgotten newline in error messages on ca-file\n    - BUG/MINOR: ssl: shut the ca-file errors emitted during httpclient init\n    - DOC: config: provide some configuration hints for \"http-reuse\"\n    - DOC: config: refer to section about quoting in the \"add_item\" converter\n    - DOC: halog: explain how to use -ac and -ad in the help message\n    - DOC: config: clarify the fact that SNI should not be used in HTTP scenarios\n    - DOC: config: mention that a single monitor-uri rule is supported\n    - DOC: config: explain how default matching method for ACL works\n    - DOC: config: clarify the fact that \"retries\" is not just for connections\n    - BUILD: halog: fix missing double-quote at end of help line\n    - DOC: config: clarify the -m dir and -m dom pattern matching methods\n    - MINOR: activity: report uptime in \"show activity\"\n    - REORG: activity/cli: move the \"show activity\" handler to activity.c\n    - DEV: poll: add support for epoll\n    - DEV: tcploop: centralize the polling code into wait_for_fd()\n    - DEV: tcploop: add support for POLLRDHUP when supported\n    - DEV: tcploop: do not report an error on POLLERR\n    - DEV: tcploop: add optional support for epoll\n    - SCRIPTS: announce-release: add a link to the data plane API\n    - CLEANUP: stick-table: fill alignment holes in the stktable struct\n    - MINOR: stick-table: store a per-table hash seed and use it\n    - MINOR: stick-table: show the shard number in each entry's \"show table\" output\n    - CLEANUP: ncbuf: remove ncb_blk args by value\n    - CLEANUP: ncbuf: inline small functions\n    - CLEANUP: ncbuf: use standard BUG_ON with DEBUG_STRICT\n    - BUG/MINOR: quic: Endless loop during retransmissions\n    - MINOR: mux-h2: add the expire task and its expiration date in \"show fd\"\n    - BUG/MINOR: peers: always initialize the stksess shard value\n    - REGTESTS: fix peers-related regtests regarding \"show table\"\n    - BUG/MEDIUM: mux-h1: Close client H1C on EOS when there is no output data\n    - MINOR: stick-table: change the API of the function used to calculate the shard\n    - CLEANUP: peers: factor out the key len calculation in received updates\n    - BUG/MINOR: peers: always update the stksess shard number on incoming updates\n    - CLEANUP: assorted typo fixes in the code and comments\n    - MINOR: mux-h1: add the expire task and its expiration date in \"show fd\"\n    - MINOR: debug: improve error handling on the memstats command parser\n    - BUILD: quic: allow build with USE_QUIC and USE_OPENSSL_WOLFSSL\n    - CLEANUP: anon: clarify the help message on \"debug dev hash\"\n    - MINOR: debug: relax access restrictions on \"debug dev hash\" and \"memstats\"\n    - SCRIPTS: run-regtests: add a version check\n    - MINOR: version: mention that it's stable now\n\n2022/11/24 : 2.7-dev10\n    - MEDIUM: tcp-act: add parameter rst-ttl to silent-drop\n    - BUG/MAJOR: quic: Crash upon retransmission of dgrams with several packets\n    - MINOR: cli: print parsed command when not found\n    - BUG/MAJOR: quic: Crash after discarding packet number spaces\n    - CLEANUP: quic: replace \"choosen\" with \"chosen\" all over the code\n    - MINOR: cli/pools: store \"show pools\" results into a temporary array\n    - MINOR: cli/pools: add sorting capabilities to \"show pools\"\n    - MINOR: cli/pools: add pool name filtering capability to \"show pools\"\n    - DOC: configuration: fix quic prefix typo\n    - MINOR: quic: report error if force-retry without cluster-secret\n    - MINOR: global: generate random cluster.secret if not defined\n    - BUG/MINOR: resolvers: do not run the timeout task when there's no resolution\n    - BUG/MINOR: server/idle: at least use atomic stores when updating max_used_conns\n    - MINOR: server/idle: make the next_takeover index per-tgroup\n    - BUILD: listener: fix build warning on global_listener_rwlock without threads\n    - BUG/MAJOR: sched: protect task during removal from wait queue\n    - BUILD: sched: fix build with DEBUG_THREAD with the previous commit\n    - DOC: quic: add note on performance issue with listener contention\n    - BUG/MINOR: cfgparse-listen: fix ebpt_next_dup pointer dereference on proxy \"from\" inheritance\n    - BUG/MINOR: log: fix parse_log_message rfc5424 size check\n    - CLEANUP: arg: remove extra check in make_arg_list arg escaping\n    - CLEANUP: tools: extra check in utoa_pad\n    - MINOR: h1: Consider empty port as invalid in authority for CONNECT\n    - MINOR: http: Considere empty ports as valid default ports\n    - BUG/MINOR: http-htx: Normalized absolute URIs with an empty port\n    - BUG/MINOR: h1: Replace authority validation to conform RFC3986\n    - REG-TESTS: http: Add more tests about authority/host matching\n    - BUG/MINOR: http-htx: Don't consider an URI as normalized after a set-uri action\n    - BUG/MEDIUM: mux-h1: Don't release H1C on timeout if there is a SC attached\n    - BUG/MEDIUM: mux-h1: Subscribe for reads on error on sending path\n    - BUILD: http-htx: Silent build error about a possible NULL start-line\n    - DOC: configuration.txt: add default_value for table_idle signature\n    - BUILD: ssl-sock: Silent error about NULL deref in ssl_sock_bind_verifycbk()\n    - BUG/MEDIUM: mux-h1: Remove H1C_F_WAIT_NEXT_REQ flag on a next request\n    - BUG/MINOR: mux-h1: Fix handling of 408-Request-Time-Out\n    - MINOR: mux-h1: Remove H1C_F_WAIT_NEXT_REQ in functions handling errors\n    - MINOR: mux-h1: Avoid useless call to h1_send() if no error is sent\n    - DOC: configuration.txt: fix typo in table_idle signature\n    - BUILD: stick-tables: fix build breakage in xxhash on older compilers\n    - BUILD: compiler: include compiler's definitions before ours\n    - BUILD: quic: global.h is needed in cfgparse-quic\n    - CLEANUP: tools: do not needlessly include xxhash nor cli from tools.h\n    - BUILD: flags: really restrict the cases where flags are exposed\n    - BUILD: makefile: minor reordering of objects by build time\n    - BUILD: quic: silence two invalid build warnings at -O1 with gcc-6.5\n    - BUILD: quic: use openssl-compat.h instead of openssl/ssl.h\n    - MEDIUM: ssl: add minimal WolfSSL support with OpenSSL compatibility mode\n    - MINOR: sample: make the rand() sample fetch function use the statistical_prng\n    - MINOR: auth: silence null dereference warning in check_user()\n    - CLEANUP: peers: fix format string for status messages (int signedness)\n    - CLEANUP: qpack: fix format string in debugging code (int signedness)\n    - CLEANUP: qpack: properly use the QPACK macros not HPACK ones in debug code\n    - BUG/MEDIUM: quic: fix datagram dropping on queueing failed\n\n2022/11/18 : 2.7-dev9\n    - BUILD: quic: QUIC mux build fix for 32-bit build\n    - BUILD: scripts: disable tests build on QuicTLS build\n    - BUG/MEDIUM: httpclient: segfault when the httpclient parser fails\n    - BUILD: ssl_sock: fix null dereference for QUIC build\n    - BUILD: quic: Fix build for m68k cross-compilation\n    - BUG/MINOR: quic: fix buffer overflow on retry token generation\n    - MINOR: quic: add version field on quic_rx_packet\n    - MINOR: quic: extend pn_offset field from quic_rx_packet\n    - MINOR: quic: define first packet flag\n    - MINOR: quic: extract connection retrieval\n    - MINOR: quic: split and rename qc_lstnr_pkt_rcv()\n    - MINOR: quic: refactor packet drop on reception\n    - MINOR: quic: extend Retry token check function\n    - BUG/MINOR: log: Preserve message facility when the log target is a ring buffer\n    - BUG/MINOR: ring: Properly parse connect timeout\n    - BUG/MEDIUM: httpclient/lua: crash when the lua task timeout before the httpclient\n    - BUG/MEDIUM: httpclient: check if the httpclient was released in the IO handler\n    - REGTESTS: httpclient/lua: test the lua task timeout with the httpclient\n    - CI: github: dump the backtrace of coredumps in the alpine container\n    - BUILD: Makefile: add \"USE_SHM_OPEN\" on the linux-musl target\n    - DOC: lua: add a note about compression w/ httpclient\n    - CLEANUP: mworker/cli: rename the status function to loadstatus\n    - MINOR: mworker/cli: does no try to dump the startup-logs w/o USE_SHM_OPEN\n    - MINOR: list: fixing typo in MT_LIST_LOCK_ELT\n    - DOC/MINOR: list: fixing MT_LIST_LOCK_ELT macro documentation\n    - MINOR: list: adding MT_LIST_APPEND_LOCKED macro\n    - BUG/MINOR: mux-quic: complete flow-control for uni streams\n    - BUG/MEDIUM: compression: handle rewrite errors when updating response headers\n    - MINOR: quic: do not crash on unhandled sendto error\n    - MINOR: quic: display unknown error sendto counter on stat page\n    - MINOR: peers: Support for peer shards\n    - MINOR: peers: handle multiple resync requests using shards\n    - BUG/MINOR: sink: Only use backend capability for the sink proxies\n    - BUG/MINOR: sink: Set default connect/server timeout for implicit ring buffers\n    - MINOR: ssl: add the SSL error string when failing to load a certificate\n    - MINOR: ssl: add the SSL error string before the chain\n    - MEDIUM: ssl: be stricter about chain error\n    - BUG/MAJOR: stick-table: don't process store-response rules for applets\n    - MINOR: quic: remove unnecessary quic_session_accept()\n    - BUG/MINOR: quic: fix subscribe operation\n    - BUG/MINOR: log: fixing bug in tcp syslog_io_handler Octet-Counting\n    - MINOR: ssl: dump the SSL string error when SSL_CTX_use_PrivateKey() failed.\n    - MINOR: quic: add counter for interrupted reception\n    - BUG/MINOR: quic: fix race condition on datagram purging\n    - CI: add monthly gcc cross compile jobs\n    - CLEANUP: assorted typo fixes in the code and comments\n    - CLEANUP: ssl: remove dead code in ssl_sock_load_pem_into_ckch()\n    - BUG/MINOR: httpclient: fixed memory allocation for the SSL ca_file\n    - BUG/MINOR: ssl: Memory leak of DH BIGNUM fields\n    - BUG/MINOR: ssl: Memory leak of AUTHORITY_KEYID struct when loading issuer\n    - BUG/MINOR: ssl: ocsp structure not freed properly in case of error\n    - CI: switch to the \"latest\" LibreSSL\n    - CI: enable QUIC for LibreSSL builds\n    - BUG/MEDIUM: ssl: Verify error codes can exceed 63\n    - MEDIUM: ssl: {ca,crt}-ignore-err can now use error constant name\n    - MINOR: ssl: x509_v_err_str converter transforms an integer to a X509_V_ERR name\n    - CLEANUP: cli: rename dynamic error printing state\n    - MINOR: cli: define usermsgs print context\n    - MINOR: server: clear prefix on stderr logs after add server\n    - BUG/MINOR: ssl: bind_conf is uncorrectly accessed when using QUIC\n    - BUILD: ssl_utils: fix build on gcc versions before 8\n    - BUILD: debug: remove unnecessary quotes in HA_WEAK() calls\n    - CI: emit the compiler's version in the build reports\n    - IMPORT: xxhash: update xxHash to version 0.8.1\n    - IMPORT: slz: declare len to fix debug build when optimal match is enabled\n    - IMPORT: slz: mention the potential header in slz_finish()\n    - IMPORT: slz: define and use a __fallthrough statement for switch/case\n    - BUILD: compiler: add a macro to detect if another one is set and equals 1\n    - BUILD: compiler: add a default definition for __has_attribute()\n    - BUILD: compiler: define a __fallthrough statement for switch/case\n    - BUILD: sample: use __fallthrough in smp_is_rw() and smp_dup()\n    - BUILD: quic: use __fallthrough in quic_connect_server()\n    - BUILD: ssl/crt-list: use __fallthrough in cli_io_handler_add_crtlist()\n    - BUILD: ssl: use __fallthrough in cli_io_handler_commit_{cert,cafile_crlfile}()\n    - BUILD: ssl: use __fallthrough in cli_io_handler_tlskeys_files()\n    - BUILD: hlua: use __fallthrough in hlua_post_init_state()\n    - BUILD: stream: use __fallthrough in stats_dump_full_strm_to_buffer()\n    - BUILD: tcpcheck: use __fallthrough in check_proxy_tcpcheck()\n    - BUILD: stats: use __fallthrough in stats_dump_proxy_to_buffer()\n    - BUILD: peers: use __fallthrough in peer_io_handler()\n    - BUILD: hash: use __fallthrough in hash_djb2()\n    - BUILD: tools: use __fallthrough in url_decode()\n    - BUILD: args: use __fallthrough in make_arg_list()\n    - BUILD: acl: use __fallthrough in parse_acl_expr()\n    - BUILD: spoe: use __fallthrough in spoe_handle_appctx()\n    - BUILD: logs: use __fallthrough in build_log_header()\n    - BUILD: check: use __fallthrough in __health_adjust()\n    - BUILD: http_act: use __fallthrough in parse_http_del_header()\n    - BUILD: h1_htx: use __fallthrough in h1_parse_chunk()\n    - BUILD: vars: use __fallthrough in var_accounting_{diff,add}()\n    - BUILD: map: use __fallthrough in cli_io_handler_*()\n    - BUILD: compression: use __fallthrough in comp_http_payload()\n    - BUILD: stconn: use __fallthrough in various shutw() functions\n    - BUILD: prometheus: use __fallthrough in promex_dump_metrics() and IO handler()\n    - CLEANUP: ssl: remove printf in bind_parse_ignore_err\n    - BUG/MINOR: ssl:  crt-ignore-err memory leak with 'all' parameter\n    - BUG/MINOR: ssl: Fix potential overflow\n    - CLEANUP: stick-table: remove the unused table->exp_next\n    - OPTIM: stick-table: avoid atomic ops in stktable_requeue_exp() when possible\n    - BUG/MEDIUM: stick-table: fix a race condition when updating the expiration task\n    - MEDIUM: http-ana: remove set-cookie2 support\n    - BUG/MEDIUM: wdt/clock: properly handle early task hangs\n    - MINOR: deinit: add a \"quick-exit\" option to bypass the deinit step\n    - OPTIM: ebtree: make ebmb_insert_prefix() keep a copy the new node's pfx\n    - OPTIM: ebtree: make ebmb_insert_prefix() keep a copy the new node's key\n    - MINOR: ssl: ssl_sock_load_cert_chain() display error strings\n    - MINOR: ssl: reintroduce ERR_GET_LIB(ret) == ERR_LIB_PEM in ssl_sock_load_pem_into_ckch()\n    - BUG/MINOR: http-htx: Fix error handling during parsing http replies\n    - BUG/MINOR: resolvers: Don't wait periodic resolution on healthcheck failure\n    - BUG/MINOR: resolvers: Set port before IP address when processing SRV records\n    - BUG/MINOR: mux-fcgi: Be sure to send empty STDING record in case of zero-copy\n    - BUG/MEDIUM: mux-fcgi: Avoid value length overflow when it doesn't fit at once\n    - BUG/MINOR: ssl: SSL_load_error_strings might not be defined\n    - MINOR: pool/debug: create a new pool_alloc_flag() macro\n    - MINOR: dynbuf: switch allocation and release to macros to better track users\n    - BUG/MINOR: mux-h1: Do not send a last null chunk on body-less answers\n    - REG-TESTS: cache: Remove T-E header for 304-Not-Modified responses\n    - DOC: config: fix alphabetical ordering of global section\n    - MINOR: trace: split the CLI \"trace\" parser in CLI vs statement\n    - MEDIUM: trace: create a new \"trace\" statement in the \"global\" section\n    - BUG/MEDIUM: ring: fix creation of server in uninitialized ring\n    - BUILD: quic: fix dubious 0-byte overflow on qc_release_lost_pkts\n    - BUILD: makefile: mark poll and tcploop targets as phony\n    - BUILD: makefile: properly pass CC to sub-projects\n    - BUILD: makefile: move default verbosity settings to include/make/verbose.mk\n    - BUILD: makefile: use $(cmd_MAKE) in quiet mode\n    - BUILD: makefile: move the compiler option detection stuff to compiler.mk\n    - DEV: poll: make the connect() step an action as well\n    - DEV: poll: strip the \"do_\" prefix from reported function names\n    - DEV: poll: indicate the FD's side in front of its value\n    - BUG/MINOR: pool/cli: use ullong to report total pool usage in bytes\n    - MINOR: mux-h1: Remove usless code inside shutr callback\n    - CLEANUP: mux-h1; Rename H1S_F_ERROR flag into H1S_F_ERROR_MASK\n    - REORG: mux-h1: Reorg the H1C structure\n    - CLEANUP: mux-h1: Rename H1C_F_ST_ERROR and H1C_F_ST_SILENT_SHUT flags\n    - MINOR: mux-h1: Add a dedicated enum to deal with H1 connection state\n    - MEDIUM: mux-h1: Handle H1C states via its state field instead of H1C_F_ST_*\n    - MINOR: mux-h1: Don't handle subscribe for reads in h1_process_demux()\n    - CLEANUP: mux-h1: Rename H1C_F_ERR_PENDING into H1C_F_ABRT_PENDING\n    - MINOR: mux-h1: Add flag on H1 stream to deal with internal errors\n    - MEDIUM: mux-h1: Rely on the H1C to deal with shutdown for reads\n    - CLEANUP: mux-h1: Reorder H1 connection flags to avoid holes\n    - MEDIUM: mux-h1: Don't report a final error whe a message is aborted\n    - MEDIUM: mux-pt: Don't always set a final error on SE on the sending path\n    - MEDIUM: mux-h2: Introduce flags to deal with connection read/write errors\n    - CLEANUP: mux-h2: Remove unused fields in h2c structures\n    - MEDIUM: mux-fcgi: Introduce flags to deal with connection read/write errors\n    - MINOR: sconn: Set SE_FL_ERROR only when there is no more data to read\n    - MINOR: mux-h1: Rely on a H1S flag to know a WS key was found or not\n    - DOC: lua-api: Remove warning about the lua filters\n    - BUG/MEDIUM: listener: Fix race condition when updating the global mngmt task\n    - CLEANUP: listener: Remove useless task_queue from manage_global_listener_queue\n    - BUG/MINOR: mux-h1: Fix error handling when H1S allocation failed on client side\n    - DOC: internal: commit notes about polling states and flags\n    - DOC: internal: commit notes about polling states and flags on connect()\n    - CLEANUP: mux-h1: Don't test h1c in h1_shutw_conn()\n    - BUG/MINOR: http_ana/txn: don't re-initialize txn and req var lists\n    - BUG/MEDIUM: raw-sock: Don't report connection error if something was received\n    - BUG/MINOR: ssl: don't initialize the keylog callback when not required\n    - BUILD: Makefile: enable USE_SHM_OPEN by default on freebsd\n    - BUG/MEDIUM: peers: messages about unkown tables not correctly ignored\n    - MINOR: cfgparse: Always check the section position\n    - MEDIUM: thread: Restric nbthread/thread-group(s) to very first global sections\n    - BUILD: peers: Remove unused variables\n    - MINOR: ncbuf: complete doc for ncb_advance()\n    - BUG/MEDIUM: quic: fix unsuccessful handshakes on ncb_advance error\n    - BUG/MEDIUM: quic: fix memleak for out-of-order crypto data\n    - MINOR: quic: complete traces/debug for handshake\n\n2022/10/14 : 2.7-dev8\n    - BUG/MINOR: checks: update pgsql regex on auth packet\n    - DOC: config: Fix pgsql-check documentation to make user param mandatory\n    - CLEANUP: mux-quic: remove usage of non-standard ull type\n    - CLEANUP: quic: remove global var definition in quic_tls header\n    - BUG/MINOR: quic: adjust quic_tls prototypes\n    - CLEANUP: quic: fix headers\n    - CLEANUP: quic: remove unused function prototype\n    - CLEANUP: quic: remove duplicated varint code from xprt_quic.h\n    - CLEANUP: quic: create a dedicated quic_conn module\n    - BUG/MINOR: mux-quic: ignore STOP_SENDING for locally closed stream\n    - BUG/MEDIUM: lua: Don't crash in hlua_lua2arg_check on failure\n    - BUG/MEDIUM: lua: handle stick table implicit arguments right.\n    - BUILD: h1: silence an initiialized warning with gcc-4.7 and -Os\n    - MINOR: fd: add a new function to only raise RLIMIT_NOFILE\n    - MINOR: init: do not try to shrink existing RLIMIT_NOFIlE\n    - BUG/MINOR: http-fetch: Update method after a prefetch in smp_fetch_meth()\n    - BUILD: http_fetch: silence an uninitiialized warning with gcc-4/5/6 at -Os\n    - BUG/MINOR: hlua: hlua_channel_insert_data() behavior conflicts with documentation\n    - MINOR: quic: limit usage of ssl_sock_ctx in favor of quic_conn\n    - MINOR: mux-quic: check quic-conn return code on Tx\n    - CLEANUP: quic: fix indentation\n    - MEDIUM: quic: retrieve frontend destination address\n    - CLEANUP: Reapply ist.cocci (2)\n    - CLEANUP: Reapply strcmp.cocci\n    - CLEANUP: quic/receiver: remove the now unused tx_qring list\n    - BUG/MINOR: quic: set IP_PKTINFO socket option for QUIC receivers only\n    - MINOR: hlua: some luaL_checktype() calls were not guarded with MAY_LJMP\n    - DOC: configuration: missing 'if' in tcp-request content example\n    - MINOR: hlua: removing ambiguous lua_pushvalue with 0 index\n    - BUG/MAJOR: stick-tables: do not try to index a server name for applets\n    - MINOR: plock: support disabling exponential back-off\n    - MINOR: freq_ctr: use the thread's local time whenever possible\n    - MEDIUM: stick-table: switch the table lock to rwlock\n    - MINOR: stick-table: do not take an exclusive lock when downing ref_cnt\n    - MINOR: stick-table: move the write lock inside stktable_touch_with_exp()\n    - MEDIUM: stick-table: only take the lock when needed in stktable_touch_with_exp()\n    - MEDIUM: stick-table: make stksess_kill_if_expired() avoid the exclusive lock\n    - MEDIUM: stick-table: return inserted entry in __stktable_store()\n    - MEDIUM: stick-table: free newly allocated stkess if it couldn't be inserted\n    - MEDIUM: stick-table: switch to rdlock in stktable_lookup() and lookup_key()\n    - MEDIUM: stick-table: make stktable_get_entry() look up under a read lock\n    - MEDIUM: stick-table: do not take a lock to update t->current anymore.\n    - MEDIUM: stick-table: make stktable_set_entry() look up under a read lock\n    - MEDIUM: stick-table: requeue the expiration task out of the exclusive lock\n    - MINOR: stick-table: split stktable_store() between key and requeue\n    - MEDIUM: stick-table: always use atomic ops to requeue the table's task\n    - MEDIUM: stick-table: requeue the wakeup task out of the write lock\n    - BUG/MINOR: stick-table: fix build with DEBUG_THREAD\n    - REORG: mux-fcgi: Extract flags and enums into mux_fcgi-t.h\n    - MINOR: flags/mux-fcgi: Decode FCGI connection and stream flags\n    - BUG/MEDIUM: mux-h1: Add connection error handling when reading/sending on a pipe\n    - BUG/MEDIUM: mux-h1: Handle abort with an incomplete message during parsing\n    - BUG/MINOR: server: make sure \"show servers state\" hides private bits\n    - MINOR: checks: use the lighter PRNG for spread checks\n    - MEDIUM: checks: spread the checks load over random threads\n    - CI: SSL: use proper version generating when \"latest\" semantic is used\n    - CI: SSL: temporarily stick to LibreSSL=3.5.3\n    - MINOR: quic: New quic_cstream object implementation\n    - MINOR: quic: Extract CRYPTO frame parsing from qc_parse_pkt_frms()\n    - MINOR: quic: Use a non-contiguous buffer for RX CRYPTO data\n    - BUG/MINOR: quic: Stalled 0RTT connections with big ClientHello TLS message\n    - MINOR: quic: Split the secrets key allocation in two parts\n    - CLEANUP: quic: remove unused rxbufs member in receiver\n    - CLEANUP: quic: improve naming for rxbuf/datagrams handling\n    - MINOR: quic: implement datagram cleanup for quic_receiver_buf\n    - MINOR: ring: ring_cast_from_area() cast from an allocated area\n    - MINOR: buffers: split b_force_xfer() into b_cpy() and b_force_xfer()\n    - MINOR: logs: startup-logs can use a shm for logging the reload\n    - MINOR: mworker/cli: reload command displays the startup-logs\n    - MEDIUM: quic: respect the threads assigned to a bind line\n    - DOC: management: update the \"reload\" command of the master CLI\n    - BUILD: ssl_sock: bind_conf uninitialized in ssl_sock_bind_verifycbk()\n    - BUG/MEDIUM: httpclient: Don't set EOM flag on an empty HTX message\n    - MINOR: httpclient/lua: Don't set req_payload callback if body is empty\n    - DOC/CLEANUP: lua-api: some minor corrections\n    - DOC: lua-api: updating toolbox link\n    - DOC/CLEANUP: lua-api: removing duplicate core.proxies attribute\n    - DOC: management: add forgotten \"show startup-logs\"\n    - DOC: management: \"show startup-logs\" for master CLI\n    - CI: Replace the deprecated `::set-output` command by writing to $GITHUB_OUTPUT in matrix.py\n    - CI: Replace the deprecated `::set-output` command by writing to $GITHUB_OUTPUT in workflow definition\n\n2022/10/03 : 2.7-dev7\n    - BUG/MEDIUM: mux-quic: fix nb_hreq decrement\n    - CLEANUP: httpclient: deleted unused variables\n    - MINOR: httpclient: enabled the use of SNI presets\n    - OPTIM: hpack-huff: reduce the cache footprint of the huffman decoder\n    - BUG/MINOR: mux-quic: do not keep detached qcs with empty Tx buffers\n    - REORG: mux-quic: extract traces in a dedicated source file\n    - REORG: mux-quic: export HTTP related function in a dedicated file\n    - MINOR: mux-quic: refactor snd_buf\n    - BUG/MEDIUM: mux-quic: properly trim HTX buffer on snd_buf reset\n    - BUG/MINOR: mux-h1: Account consumed output data on synchronous connection error\n    - BUG/MINOR: log: improper behavior when escaping log data\n    - CLEANUP: tools: removing escape_chunk() function\n    - MINOR: clock: split local and global date updates\n    - MINOR: pollers: only update the local date during busy polling\n    - MINOR: clock: do not update the global date too often\n    - REGTESTS: 4be_1srv_smtpchk_httpchk_layer47errors: Return valid SMTP replies\n    - MINOR: smtpchk: Update expect rule to fully match replies to EHLO commands\n    - BUG/MINOR: smtpchk: SMTP Service check should gracefully close SMTP transaction\n    - MINOR: list: documenting mt_list_for_each_entry_safe() macro\n    - CLEANUP: list: Fix mt_list_for_each_entry_safe indentation\n    - BUG/MINOR: hlua: Remove \\n in Lua error message built with memprintf\n    - MINOR: hlua: Allow argument on lua-lod(-per-thread) directives\n    - BUG/MINOR: anon: memory illegal accesses in tools.c with hash_anon and hash_ipanon\n    - MEDIUM: mworker/cli: keep the connection of the FD that ask for a reload\n    - BUG/MINOR: hlua: fixing ambiguous sizeof in hlua_load_per_thread\n    - MINOR: mworker/cli: replace close() by fd_delete()\n    - MINOR: mworker: store and shows loading status\n    - MINOR: mworker: mworker_cli_proxy_new_listener() returns a bind_conf\n    - MINOR: mworker: stores the mcli_reload bind_conf\n    - MINOR: mworker/cli: the mcli_reload bind_conf only send the reload status\n    - DOC: management: describe the new reload command behavior\n    - CLEANUP: list: fix again some style issues in the recent comments\n    - BUG/MINOR: stream: Perform errors handling in right order in stream_new()\n    - BUG/MEDIUM: stconn: Reset SE descriptor when we fail to create a stream\n    - BUG/MEDIUM: resolvers: Remove aborted resolutions from query_ids tree\n    - DOC: management: add timeout on the \"reload\" command\n    - BUG/MINOR: ring: fix the size check in ring_make_from_area()\n    - BUG/MINOR: config: don't count trailing spaces as empty arg\n    - Revert \"BUG/MINOR: config: don't count trailing spaces as empty arg\"\n    - BUG/MINOR: hlua: fixing hlua_http_msg_del_data behavior\n    - BUG/MINOR: hlua: fixing hlua_http_msg_insert_data behavior\n    - MINOR: cli: Add anonymization on a missed element for 'show sess all'\n    - MINOR: cli: remove error message with 'set anon on|off'\n    - MINOR: tools: modify hash_ipanon in order to use it in cli\n    - MINOR: cli: use hash_ipanon to anonymized address\n    - MINOR: cli: Add an anonymization on a missed element in 'show server state'\n    - MINOR: config: correct errors about argument number in condition in cfgparse.c\n    - MINOR: config: Add other keywords when dump the anonymized configuration file\n    - MINOR: config: Add option line when the configuration file is dumped\n    - MINOR: cli: correct commentary and replace 'set global-key' name\n    - MINOR: tools: Impprove hash_ipanon to support dgram sockets and port offsets\n    - MINOR: tools: Impprove hash_ipanon to not hash FD-based addresses\n    - BUG/MINOR: hlua: _hlua_http_msg_delete incorrect behavior when offset is used\n    - DOC: management: httpclient can resolve server names in URLs\n    - BUG/MINOR: hlua: prevent crash when loading numerous arguments using lua-load(per-thread)\n    - DOC/CLEANUP: lua-api: removing duplicate date functions doc\n    - MINOR: hlua: ambiguous lua_pushvalue with 0 index\n    - BUG/MINOR: config: don't count trailing spaces as empty arg (v2)\n    - BUG/MEDIUM: config: count line arguments without dereferencing the output\n    - BUG/MAJOR: conn-idle: fix hash indexing issues on idle conns\n    - BUG/MINOR: config: insufficient syntax check of the global \"maxconn\" value\n    - BUG/MINOR: backend: only enforce turn-around state when not redispatching\n\n2022/09/17 : 2.7-dev6\n    - MINOR: Revert part of clarifying samples support per os commit\n    - BUILD: makefile: enable crypt(3) for NetBSD\n    - BUG/MINOR: quic: Retransmitted frames marked as acknowledged\n    - BUG/MINOR: quic: Possible crash with \"tls-ticket-keys\" on QUIC bind lines\n    - MINOR: http-check: Remove support for headers/body in \"option httpchk\" version\n    - BUG/MINOR: h1: Support headers case adjustment for TCP proxies\n    - BUG/MINOR: quic: Possible crash when verifying certificates\n    - BUILD: quic: add some ifdef around the SSL_ERROR_* for libressl\n    - BUILD: ssl: fix ssl_sock_switchtx_cbk when no client_hello_cb\n    - BUILD: quic: temporarly ignore chacha20_poly1305 for libressl\n    - BUILD: quic: enable early data only with >= openssl 1.1.1\n    - BUILD: ssl: fix the ifdef mess in ssl_sock_initial_ctx\n    - BUILD: quic: fix the #ifdef in ssl_quic_initial_ctx()\n    - MINOR: quic: add QUIC support when no client_hello_cb\n    - MINOR: quic: Add traces about sent or resent TX frames\n    - MINOR: quic: No TRACE_LEAVE() in retrieve_qc_conn_from_cid()\n    - BUG/MINOR: quic: Wrong connection ID to thread ID association\n    - BUG/MINOR: task: always reset a new tasklet's call date\n    - BUG/MINOR: task: make task_instant_wakeup() work on a task not a tasklet\n    - MINOR: task: permanently enable latency measurement on tasklets\n    - CLEANUP: task: rename ->call_date to ->wake_date\n    - BUG/MINOR: sched: properly account for the CPU time of dying tasks\n    - MINOR: sched: store the current profile entry in the thread context\n    - BUG/MINOR: stream/sched: take into account CPU profiling for the last call\n    - MINOR: tasks: do not keep cpu and latency times in struct task\n    - MINOR: tools: add generic pointer hashing functions\n    - CLEANUP: activity: make memprof use the generic ptr_hash() function\n    - CLEANUP: activity: make taskprof use ptr_hash()\n    - MINOR: debug: add struct ha_caller to describe a calling location\n    - CLEANUP: debug: use struct ha_caller for memstat\n    - DEBUG: task: define a series of wakeup types for tasks and tasklets\n    - DEBUG: task: use struct ha_caller instead of arrays of file:line\n    - DEBUG: applet: instrument appctx_wakeup() to log the caller's location\n    - DEBUG: task: simplify the caller recording in DEBUG_TASK\n    - CLEANUP: task: move tid and wake_date into the common part\n    - CLEANUP: sched: remove duplicate code in run_tasks_from_list()\n    - CLEANUP: activity: make the number of sched activity entries more configurable\n    - DEBUG: resolvers: unstatify process_resolvers() to make it appear in profiling\n    - DEBUG: quic: export the few task handlers that often appear in task dumps\n    - MEDIUM: tasks/activity: combine the called function with the caller\n    - MINOR: tasks/activity: improve the caller-callee activity hash\n    - MINOR: activity/cli: support aggregating task profiling outputs\n    - MINOR: activity/cli: support sorting task profiling by total CPU time\n    - BUG/MINOR: signals/poller: set the poller timeout to 0 when there are signals\n    - BUG/MINOR: quic: Speed up the handshake completion only one time\n    - BUG/MINOR: quic: Trace fix about packet number space information.\n    - BUG/MINOR: h3: Crash when h3 trace verbosity is \"minimal\"\n    - MINOR: h3: Add the quic_conn object to h3 traces\n    - MINOR: h3: Missing connection argument for a TRACE_LEAVE() argument\n    - MINOR: h3: Send the h3 settings with others streams (requests)\n    - MINOR: dev/udp: Apply the corruption to both directions\n    - BUILD: udp-perturb: Add a make target for udp-perturb tool\n    - BUG/MINOR: signals/poller: ensure wakeup from signals\n    - CI: cirrus-ci: bump FreeBSD image to 13-1\n    - DEV: flags: fix usage message to reflect available options\n    - DEV: flags: add missing CO_FL_FDLESS connection flag\n    - MINOR: flags: add a new file to host flag dumping macros\n    - MINOR: flags: implement a macro used to dump enums inside masks\n    - MINOR: flags/channel: use flag dumping for channel flags and analysers\n    - MINOR: flags/connection: use flag dumping for connection flags\n    - MINOR: flags/stconn: use flag dumping for stconn and sedesc flags\n    - MINOR: flags/stream: use flag dumping for stream error type\n    - MINOR: flags/stream: use flag dumping for stream flags\n    - MINOR: flags/task: use flag dumping for task state\n    - MINOR: flags/http_ana: use flag dumping for txn flags\n    - DEV: flags: remove the now unused SHOW_FLAG() definition\n    - DEV: flags: remove the now useless intermediary functions\n    - MINOR: flags/htx: use flag dumping to show htx and start-line flags\n    - MINOR: flags/http_ana: use flag dumping to show http msg states\n    - BUG/MEDIUM: proxy: ensure pause_proxy() and resume_proxy() own PROXY_LOCK\n    - MINOR: listener: small API change\n    - MINOR: proxy/listener: support for additional PAUSED state\n    - BUG/MINOR: stats: fixing stat shows disabled frontend status as 'OPEN'\n    - BUILD: flags: fix build warning in some macros used by show_flags\n    - BUILD: flags: fix the fallback macros for missing stdio\n    - CLEANUP: pollers: remove dead code in the polling loop\n    - BUG/MINOR: mux-h1: Increment open_streams counter when H1 stream is created\n    - REGTESTS: healthcheckmail: Relax matching on the healthcheck log message\n    - CLEANUP: listener: function comment typo in stop_listener()\n    - BUG/MINOR: listener: null pointer dereference suspected by coverity\n    - MINOR: flags/fd: decode FD flags states\n    - REORG: mux-h2: extract flags and enums into mux_h2-t.h\n    - MINOR: flags/mux-h2: decode H2C and H2S flags\n    - REGTESTS: log: test the log-forward feature\n    - BUG/MEDIUM: sink: bad init sequence on tcp sink from a ring.\n    - REGTESTS: ssl/log: test the log-forward with SSL\n    - MEDIUM: httpclient: httpclient_create_proxy() creates a proxy for httpclient\n    - MEDIUM: httpclient: allow to use another proxy\n    - DOC: fix TOC in starter guide for subsection 3.3.8. Statistics\n    - MINOR: httpclient: export httpclient_create_proxy()\n    - MEDIUM: quic: separate path for rx and tx with set_encryption_secrets\n    - BUG/MEDIUM: mux-quic: fix crash on early app-ops release\n    - REORG: mux-h1: extract flags and enums into mux_h1-t.h\n    - MINOR: flags/mux-h1: decode H1C and H1S flags\n    - CLEANUP: mux-quic: remove stconn usage in h3/hq\n    - BUG/MINOR: mux-quic: do not remotely close stream too early\n    - CLEANUP: exclude udp-perturb with .gitignore\n    - BUG/MEDIUM: server: segv when adding server with hostname from CLI\n    - CLEANUP: quic,ssl: fix tiny typos in C comments\n    - BUG/MEDIUM: captures: free() an error capture out of the proxy lock\n    - BUILD: fd: fix a build warning on the DWCAS\n    - MINOR: anon: add new macros and functions to anonymize contents\n    - MINOR: anon: store the anonymizing key in the global structure\n    - MINOR: anon: store the anonymizing key in the CLI's appctx\n    - MINOR: cli: anonymize commands 'show sess' and 'show sess all'\n    - MINOR: cli: anonymize 'show servers state' and 'show servers conn'\n    - MINOR: config: add command-line -dC to dump the configuration file\n    - SCRIPTS: announce-release: update some URLs to https\n\n2022/09/02 : 2.7-dev5\n    - BUG/MINOR: mux-quic: Fix memleak on QUIC stream buffer for unacknowledged data\n    - BUG/MEDIUM: cpu-map: fix thread 1's affinity affecting all threads\n    - MINOR: cpu-map: remove obsolete diag warning about combined ranges\n    - BUG/MAJOR: mworker: fix infinite loop on master with no proxies.\n    - REGTESTS: launch http_reuse_always in mworker mode\n    - BUG/MINOR: quix: Memleak for non in flight TX packets\n    - BUG/MINOR: quic: Wrong list_for_each_entry() use when building packets from qc_do_build_pkt()\n    - BUG/MINOR: quic: Safer QUIC frame builders\n    - MINOR: quic: Replace MT_LISTs by LISTs for RX packets.\n    - BUG/MEDIUM: applet: fix incorrect check for abnormal return condition from handler\n    - BUG/MINOR: applet: make the call_rate only count the no-progress calls\n    - MEDIUM: peers: limit the number of updates sent at once\n    - BUILD: tcp_sample: fix build of get_tcp_info() on OpenBSD\n    - BUG/MINOR: resolvers: return the correct value in resolvers_finalize_config()\n    - BUG/MINOR: mworker: does not create the \"default\" resolvers in wait mode\n    - BUG/MINOR: tcpcheck: Disable QUICKACK only if data should be sent after connect\n    - REGTESTS: Fix prometheus script to perform HTTP health-checks\n    - MINOR: resolvers: shut the warning when \"default\" resolvers is implicit\n    - Revert \"BUG/MINOR: quix: Memleak for non in flight TX packets\"\n    - BUG/MINOR: quic: Leak in qc_release_lost_pkts() for non in flight TX packets\n    - BUG/MINOR: quic: Stalled connections (missing I/O handler wakeup)\n    - CLEANUP: quic: No more use ->rx_list MT_LIST entry point (quic_rx_packet)\n    - CLEANUP: quic: Remove a useless check in qc_lstnr_pkt_rcv()\n    - MINOR: quic: Remove useless traces about references to TX packets\n    - Revert \"MINOR: quic: Remove useless traces about references to TX packets\"\n    - DOC: configuration: do-resolve doesn't work with a port in the string\n    - MINOR: sample: add the host_only and port_only converters\n    - BUG/MINOR: httpclient: fix resolution with port\n    - DOC: configuration.txt: do-resolve must use host_only to remove its port.\n    - BUG/MINOR: quic: Null packet dereferencing from qc_dup_pkt_frms() trace\n    - BUG/MINOR: quic: Frames added to packets even if not built.\n    - BUG/MEDIUM: spoe: Properly update streams waiting for a ACK in async mode\n    - BUG/MEDIUM: peers: Add connect and server timeut to peers proxy\n    - BUG/MEDIUM: peers: Don't use resync timer when local resync is in progress\n    - BUG/MEDIUM: peers: Don't start resync on reload if local peer is not up-to-date\n    - BUG/MINOR: hlua: Rely on CF_EOI to detect end of message in HTTP applets\n    - BUG/MEDIUM: mux-h1: do not refrain from signaling errors after end of input\n    - BUG/MINOR: epoll: do not actively poll for Rx after an error\n    - MINOR: raw-sock: don't try to send if an error was already reported\n    - BUG/MINOR: quic: Missing header protection AES cipher context initialisations (draft-v2)\n    - MINOR: quic: Add a trace to distinguish the datagram from the packets inside\n    - BUG/MINOR: ssl: fix deinit of the ca-file tree\n    - BUG/MINOR: ssl: leak of ckch_inst_link in ckch_inst_free()\n    - BUG/MINOR: tcpcheck: Disable QUICKACK for default tcp-check (with no rule)\n    - BUG/MEDIUM: ssl: Fix a UAF when old ckch instances are released\n    - BUG/MINOR: ssl: revert two wrong fixes with ckhi_link\n    - BUG/MINOR: dev/udp: properly preset the rx address size\n    - BUILD: debug: make sure debug macros are never empty\n    - MINOR: quic: Move traces about RX/TX bytes from QUIC_EV_CONN_PRSAFRM event\n    - BUG/MINOR: quic: TX frames memleak\n    - BUG/MINOR: ssl: leak of ckch_inst_link in ckch_inst_free() v2\n    - MINOR: sink/ring: rotate non-empty file-backed contents only\n    - BUG/MINOR: regex: Properly handle PCRE2 lib compiled without JIT support\n    - REGTESTS: http_request_buffer: Add a barrier to not mix up log messages\n    - BUG/MEDIUM: mux-h1: always use RST to kill idle connections in pools\n    - MINOR: backend: always satisfy the first req reuse rule with l7 retries\n    - BUG/MINOR: quic: Do not ack when probing\n    - MINOR: quic: Add TX frames addresses to traces to several trace events\n    - MINOR: quic: Trace typo fix in qc_release_frm()\n    - BUG/MINOR: quic: Frames leak during retransmissions\n    - BUG/MINOR: h2: properly set the direction flag on HTX response\n    - BUG/MEDIUM: httpclient: always detach the caller before self-killing\n    - BUG/MINOR: httpclient: only ask for more room on failed writes\n    - BUG/MINOR: httpclient: keep-alive was accidentely disabled\n    - MEDIUM: httpclient: enable ALPN support on outgoing https connections\n    - BUG/MINOR: mux-h2: fix the \"show fd\" dest buffer for the subscriber\n    - BUG/MINOR: mux-h1: fix the \"show fd\" dest buffer for the subscriber\n    - BUG/MINOR: mux-fcgi: fix the \"show fd\" dest buffer for the subscriber\n    - DEBUG: stream: minor rearrangement of a few fields in struct stream.\n    - MINOR: debug: report applet pointer and handler in crashes when known\n    - MINOR: mux-h2: extract the stream dump function out of h2_show_fd()\n    - MINOR: mux-h2: extract the connection dump function out of h2_show_fd()\n    - MINOR: muxes: add a \"show_sd\" helper to complete \"show sess\" dumps\n    - MINOR: mux-h2: provide a \"show_sd\" helper to output stream debugging info\n    - MINOR: mux-h2: insert line breaks in \"show sess all\" output for legibility\n    - MINOR: mux-quic: provide a \"show_sd\" helper to output stream debugging info\n    - MINOR: mux-h1: split \"show_fd\" into connection and stream\n    - MINOR: mux-h1: provide a \"show_sd\" helper to output stream debugging info\n    - BUG/MINOR: http-act: initialize http fmt head earlier\n\n2022/08/20 : 2.7-dev4\n    - BUG/MEDIUM: quic: Wrong packet length check in qc_do_rm_hp()\n    - MINOR: quic: Too much useless traces in qc_build_frms()\n    - BUG/MEDIUM: quic: Missing AEAD TAG check after removing header protection\n    - MINOR: quic: Replace pool_zalloc() by pool_malloc() for fake datagrams\n    - MINOR: debug: make the mem_stats section aligned to void*\n    - MINOR: debug: store and report the pool's name in struct mem_stats\n    - MINOR: debug: also store the function name in struct mem_stats\n    - MINOR: debug/memstats: automatically determine first column size\n    - MINOR: debug/memstats: permit to pass the size to free()\n    - CLEANUP: mux-quic: remove loop on sending frames\n    - MINOR: quic: replace custom buf on Tx by default struct buffer\n    - MINOR: quic: release Tx buffer on each send\n    - MINOR: quic: refactor datagram commit in Tx buffer\n    - MINOR: quic: skip sending if no frame to send in io-cb\n    - BUG/MINOR: mux-quic: open stream on STOP_SENDING\n    - BUG/MINOR: quic: fix crash on handshake io-cb for null next enc level\n    - BUG/MEDIUM: quic: always remove the connection from the accept list on close\n    - BUG/MEDIUM: poller: use fd_delete() to release the poller pipes\n    - BUG/MEDIUM: task: relax one thread consistency check in task_unlink_wq()\n    - MEDIUM: quic: xprt traces rework\n    - BUILD: stconn: fix build warning at -O3 about possible null sc\n    - MINOR: quic: Remove useless lock for RX packets\n    - BUG/MINOR: quic: Possible infinite loop in quic_build_post_handshake_frames()\n    - CLEANUP: quic: Remove trailing spaces\n    - MINOR: mux-quic: adjust enter/leave traces\n    - MINOR: mux-quic: define protocol error traces\n    - CLEANUP: mux-quic: adjust traces level\n    - MINOR: mux-quic: define new traces\n    - BUG/MEDIUM: mux-quic: fix crash due to invalid trace arg\n    - BUG/MEDIUM: quic: Possible use of uninitialized <odcid> variable in qc_lstnr_params_init()\n    - BUG/MEDIUM: ring: fix too lax 'size' parser\n    - BUG/MEDIUM: quic: Wrong use of <token_odcid> in qc_lsntr_pkt_rcv()\n    - BUILD: ring: forward-declare struct appctx to avoid a build warning\n    - MINOR: ring: support creating a ring from a linear area\n    - MINOR: ring: add support for a backing-file\n    - DEV: haring: add a simple utility to read file-backed rings\n    - DEV: haring: support remapping LF in contents with CR VT\n    - BUG/MINOR: quic: memleak on wrong datagram receipt\n    - BUILD: sink: replace S_IRUSR, S_IWUSR with their octal value\n    - MINOR: ring: archive a previous file-backed ring on startup\n    - BUG/MINOR: mux-quic: fix crash with traces in qc_detach()\n    - BUG/MINOR: quic: MIssing check when building TX packets\n    - BUG/MINOR: quic: Wrong status returned by qc_pkt_decrypt()\n    - MINOR: memprof: export the minimum definitions for memory profiling\n    - MINOR: pool/memprof: report pool alloc/free in memory profiling\n    - MINOR: pools/memprof: store and report the pool's name in each bin\n    - MINOR: chunk: inline alloc_trash_chunk()\n    - MINOR: stick-table: Add table_expire() and table_idle() new converters\n    - CLEANUP: exclude haring with .gitignore\n    - MINOR: quic: adjust quic_frame flag manipulation\n    - MINOR: h3: report error on control stream close\n    - MINOR: qpack: report error on enc/dec stream close\n    - BUG/MEDIUM: mux-quic: reject uni stream ID exceeding flow control\n    - MINOR: mux-quic: adjust traces on stream init\n    - MINOR: mux-quic: add missing args on some traces\n    - MINOR: quic: refactor application send\n    - BUG/MINOR: quic: do not notify MUX on frame retransmit\n    - BUG/MEDIUM: http-ana: fix crash or wrong header deletion by http-restrict-req-hdr-names\n    - BUG/MINOR: quic: Missing initializations for ducplicated frames.\n    - BUG/MEDIUM: quic: fix crash on MUX send notification\n    - REORG: h2: extract cookies concat function in http_htx\n    - REGTESTS: add test for HTTP/2 cookies concatenation\n    - MEDIUM: h3: concatenate multiple cookie headers\n    - MINOR: applet: add a function to reset the svcctx of an applet\n    - BUG/MEDIUM: cli: always reset the service context between commands\n    - BUG/MEDIUM: mux-h2: do not fiddle with ->dsi to indicate demux is idle\n    - MINOR: mux-h2/traces: report transition to SETTINGS1 before not after\n    - MINOR: mux-h2: make streams know if they need to send more data\n    - BUG/MINOR: mux-h2: send a CANCEL instead of ES on truncated writes\n    - BUG/MINOR: quic: Possible crashes when dereferencing ->pkt quic_frame struct member\n    - MINOR: quic: Add frame addresses to QUIC_EV_CONN_PRSAFRM event traces\n    - BUG/MINOR: quic: Wrong splitted duplicated frames handling\n    - MINOR: quic: Add the QUIC connection to mux traces\n    - MINOR: quic: Trace fix in qc_release_frm()\n    - BUG/MAJOR: log-forward: Fix log-forward proxies not fully initialized\n    - BUG/MAJOR: log-forward: Fix ssl layer not initialized on bind even if configured\n    - MINOR: quic: Add reusable cipher contexts for header protection\n    - BUG/MINOR: ssl/cli: error when the ca-file is empty\n    - MINOR: ssl: handle ca-file appending in cafile_entry\n    - MINOR: ssl/cli: implement \"add ssl ca-file\"\n\n2022/08/07 : 2.7-dev3\n    - BUILD: makefile: Fix install(1) handling for OpenBSD/NetBSD/Solaris/AIX\n    - BUG/MEDIUM: tools: avoid calling dlsym() in static builds (try 2)\n    - MINOR: resolvers: resolvers_destroy() deinit and free a resolver\n    - BUG/MINOR: resolvers: shut off the warning for the default resolvers\n    - BUG/MINOR: ssl: allow duplicate certificates in ca-file directories\n    - BUG/MINOR: tools: fix statistical_prng_range()'s output range\n    - BUG/MINOR: quic: do not send CONNECTION_CLOSE_APP in initial/handshake\n    - BUILD: debug: Add braces to if statement calling only CHECK_IF()\n    - BUG/MINOR: fd: Properly init the fd state in fd_insert()\n    - BUG/MEDIUM: fd/threads: fix incorrect thread selection in wakeup broadcast\n    - MINOR: init: load OpenSSL error strings\n    - MINOR: ssl: enhance ca-file error emitting\n    - BUG/MINOR: mworker/cli: relative pid prefix not validated anymore\n    - BUG/MAJOR: mux_quic: fix invalid PROTOCOL_VIOLATION on POST data overlap\n    - BUG/MEDIUM: mworker: proc_self incorrectly set crashes upon reload\n    - BUILD: add detection for unsupported compiler models\n    - BUG/MEDIUM: stconn: Only reset connect expiration when processing backend side\n    - BUG/MINOR: backend: Fallback on RR algo if balance on source is impossible\n    - BUG/MEDIUM: master: force the thread count earlier\n    - BUG/MAJOR: poller: drop FD's tgid when masks don't match\n    - DEBUG: fd: detect possibly invalid tgid in fd_insert()\n    - BUG/MINOR: sockpair: wrong return value for fd_send_uxst()\n    - MINOR: sockpair: move send_fd_uxst() error message in caller\n    - Revert \"BUG/MINOR: peers: set the proxy's name to the peers section name\"\n    - DEBUG: fd: split the fd check\n    - MEDIUM: resolvers: continue startup if network is unavailable\n    - BUG/MINOR: fd: always remove late updates when freeing fd_updt[]\n    - MINOR: cli: emit a warning when _getsocks was used more than once\n    - BUG/MINOR: mworker: PROC_O_LEAVING used but not updated\n    - Revert \"MINOR: cli: emit a warning when _getsocks was used more than once\"\n    - MINOR: cli: warning on _getsocks when socket were closed\n    - BUG/MEDIUM: mux-quic: fix missing EOI flag to prevent streams leaks\n    - MINOR: quic: Congestion control architecture refactoring\n    - MEDIUM: quic: Cubic congestion control algorithm implementation\n    - MINOR: quic: New \"quic-cc-algo\" bind keyword\n    - BUG/MINOR: quic: loss time limit variable computed but not used\n    - MINOR: quic: Stop looking for packet loss asap\n    - BUG/MAJOR: quic: Useless resource intensive loop qc_ackrng_pkts()\n    - MINOR: quic: Send packets as much as possible from qc_send_app_pkts()\n    - BUG/MEDIUM: queue/threads: limit the number of entries dequeued at once\n    - MAJOR: threads/plock: update the embedded library\n    - MINOR: thread: provide an alternative to pthread's rwlock\n    - DEBUG: tools: provide a tree dump function for ebmbtrees as well\n    - MINOR: ebtree: add ebmb_lookup_shorter() to pursue lookups\n    - BUG/MEDIUM: pattern: only visit equivalent nodes when skipping versions\n    - BUG/MINOR: mux-quic: prevent crash if conn released during IO callback\n    - CLEANUP: mux-quic: remove useless app_ops is_active callback\n    - BUG/MINOR: mux-quic: do not free conn if attached streams\n    - MINOR: mux-quic: save proxy instance into qcc\n    - MINOR: mux-quic: use timeout server for backend conns\n    - MEDIUM: mux-quic: adjust timeout refresh\n    - MINOR: mux-quic: count in-progress requests\n    - MEDIUM: mux-quic: implement http-keep-alive timeout\n    - MINOR: peers: Add a warning about incompatible SSL config for the local peer\n    - MINOR: peers: Use a dedicated reconnect timeout when stopping the local peer\n    - BUG/MEDIUM: peers: limit reconnect attempts of the old process on reload\n    - BUG/MINOR: peers: Use right channel flag to consider the peer as connected\n    - BUG/MEDIUM: dns: Properly initialize new DNS session\n    - BUG/MINOR: backend: Don't increment conn_retries counter too early\n    - MINOR: server: Constify source server to copy its settings\n    - REORG: server: Export srv_settings_cpy() function\n    - BUG/MEDIUM: proxy: Perform a custom copy for default server settings\n    - BUG/MINOR: quic: Missing in flight ack eliciting packet counter decrement\n    - BUG/MEDIUM: quic: Floating point exception in cubic_root()\n    - MINOR: h3: support HTTP request framing state\n    - MINOR: mux-quic: refresh timeout on frame decoding\n    - MINOR: mux-quic: refactor refresh timeout function\n    - MEDIUM: mux-quic: implement http-request timeout\n    - BUG/MINOR: quic: Avoid sending truncated datagrams\n    - BUG/MINOR: ring/cli: fix a race condition between the writer and the reader\n    - BUG/MEDIUM: sink: Set the sink ref for forwarders created during ring parsing\n    - BUG/MINOR: sink: fix a race condition between the writer and the reader\n    - BUG/MINOR: quic: do not reject datagrams matching minimum permitted size\n    - MINOR: quic: Add two new stats counters for sendto() errors\n    - BUG/MINOR: quic: Missing Initial packet dropping case\n    - MINOR: quic: explicitely ignore sendto error\n    - BUG/MINOR: quic: adjust errno handling on sendto\n    - BUG/MEDIUM: quic: break out of the loop in quic_lstnr_dghdlr\n    - MINOR: threads: report the number of thread groups in build options\n    - MINOR: config: automatically preset MAX_THREADS based on MAX_TGROUPS\n    - BUILD: SSL: allow to pass additional configure args to QUICTLS\n    - CI: enable weekly \"m32\" builds on x86_64\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUG/MEDIUM: fix DH length when EC key is used\n    - REGTESTS: ssl: adopt tests to OpenSSL-3.0.N\n    - REGTESTS: ssl: adopt tests to OpenSSL-3.0.N\n    - REGTESTS: ssl: fix grep invocation to use extended regex in ssl_generate_certificate.vtc\n    - BUILD: cfgparse: always defined _GNU_SOURCE for sched.h and crypt.h\n\n2022/07/16 : 2.7-dev2\n    - BUG/MINOR: qpack: fix build with QPACK_DEBUG\n    - MINOR: h3: handle errors on HEADERS parsing/QPACK decoding\n    - BUG/MINOR: qpack: abort on dynamic index field line decoding\n    - MINOR: qpack: properly handle invalid dynamic table references\n    - MINOR: task: Add tasklet_wakeup_after()\n    - BUG/MINOR: quic: Dropped packets not counted (with RX buffers full)\n    - MINOR: quic: Add new stats counter to diagnose RX buffer overrun\n    - MINOR: quic: Duplicated QUIC_RX_BUFSZ definition\n    - MINOR: quic: Improvements for the datagrams receipt\n    - CLEANUP: h2: Typo fix in h2_unsubcribe() traces\n    - MINOR: quic: Increase the QUIC connections RX buffer size (upto 64Kb)\n    - CLEANUP: mux-quic: adjust comment on qcs_consume()\n    - MINOR: ncbuf: implement ncb_is_fragmented()\n    - BUG/MINOR: mux-quic: do not signal FIN if gap in buffer\n    - MINOR: fd: add a new FD_DISOWN flag to prevent from closing a deleted FD\n    - BUG/MEDIUM: ssl/fd: unexpected fd close using async engine\n    - MINOR: tinfo: make tid temporarily still reflect global ID\n    - CLEANUP: config: remove unused proc_mask()\n    - MINOR: debug: remove mask support from \"debug dev sched\"\n    - MEDIUM: task: add and preset a thread ID in the task struct\n    - MEDIUM: task/debug: move the ->thread_mask integrity checks to ->tid\n    - MAJOR: task: use t->tid instead of ffsl(t->thread_mask) to take the thread ID\n    - MAJOR: task: replace t->thread_mask with 1<<t->tid when thread mask is needed\n    - CLEANUP: task: remove thread_mask from the struct task\n    - MEDIUM: applet: only keep appctx_new_*() and drop appctx_new()\n    - MEDIUM: task: only keep task_new_*() and drop task_new()\n    - MINOR: applet: always use task_new_on() on applet creation\n    - MEDIUM: task: remove TASK_SHARED_WQ and only use t->tid\n    - MINOR: task: replace task_set_affinity() with task_set_thread()\n    - CLEANUP: task: remove the unused task_unlink_rq()\n    - CLEANUP: task: remove the now unused TASK_GLOBAL flag\n    - MINOR: task: make rqueue_ticks atomic\n    - MEDIUM: task: move the shared runqueue to one per thread\n    - MEDIUM: task: replace the global rq_lock with a per-rq one\n    - MINOR: task: remove grq_total and use rq_total instead\n    - MINOR: task: replace global_tasks_mask with a check for tree's emptiness\n    - MEDIUM: task: use regular eb32 trees for the run queues\n    - MEDIUM: queue: revert to regular inter-task wakeups\n    - MINOR: thread: make wake_thread() take care of the sleeping threads mask\n    - MINOR: thread: move the flags to the shared cache line\n    - MINOR: thread: only use atomic ops to touch the flags\n    - MINOR: poller: centralize poll return handling\n    - MEDIUM: polling: make update_fd_polling() not care about sleeping threads\n    - MINOR: poller: update_fd_polling: wake a random other thread\n    - MEDIUM: thread: add a new per-thread flag TH_FL_NOTIFIED to remember wakeups\n    - MEDIUM: tasks/fd: replace sleeping_thread_mask with a TH_FL_SLEEPING flag\n    - MINOR: tinfo: add the tgid to the thread_info struct\n    - MINOR: tinfo: replace the tgid with tgid_bit in tgroup_info\n    - MINOR: tinfo: add the mask of enabled threads in each group\n    - MINOR: debug: use ltid_bit in ha_thread_dump()\n    - MINOR: wdt: use ltid_bit in wdt_handler()\n    - MINOR: clock: use ltid_bit in clock_report_idle()\n    - MINOR: thread: use ltid_bit in ha_tkillall()\n    - MINOR: thread: add a new all_tgroups_mask variable to know about active tgroups\n    - CLEANUP: thread: remove thread_sync_release() and thread_sync_mask\n    - MEDIUM: tinfo: add a dynamic thread-group context\n    - MEDIUM: thread: make stopping_threads per-group and add stopping_tgroups\n    - MAJOR: threads: change thread_isolate to support inter-group synchronization\n    - MINOR: thread: add is_thread_harmless() to know if a thread already is harmless\n    - MINOR: debug: mark oneself harmless while waiting for threads to finish\n    - MINOR: wdt: do not rely on threads_to_dump anymore\n    - MEDIUM: debug: make the thread dumper not rely on a thread mask anymore\n    - BUILD: debug: fix build issue on clang with previous commit\n    - BUILD: debug: re-export thread_dump_state\n    - BUG/MEDIUM: threads: fix incorrect thread group being used on soft-stop\n    - BUG/MEDIUM: thread: check stopping thread against local bit and not global one\n    - MINOR: proxy: use tg->threads_enabled in hard_stop() to detect stopped threads\n    - BUILD: Makefile: Add Lua 5.4 autodetect\n    - CI: re-enable gcc asan builds\n    - MEDIUM: mworker: set the iocb of the socketpair without using fd_insert()\n    - MINOR: fd: Add BUG_ON checks on fd_insert()\n    - CLEANUP: mworker: rename mworker_pipe to mworker_sockpair\n    - CLEANUP: mux-quic: do not export qc_get_ncbuf\n    - REORG: mux-quic: reorganize flow-control fields\n    - MINOR: mux-quic: implement accessor for sedesc\n    - MEDIUM: mux-quic: refactor streams opening\n    - MINOR: mux-quic: rename qcs flag FIN_RECV to SIZE_KNOWN\n    - MINOR: mux-quic: emit FINAL_SIZE_ERROR on invalid STREAM size\n    - BUG/MINOR: peers/config: always fill the bind_conf's argument\n    - BUG/MEDIUM: peers/config: properly set the thread mask\n    - CLEANUP: bwlim: Set pointers to NULL when memory is released\n    - BUG/MINOR: http-check: Preserve headers if not redefined by an implicit rule\n    - BUG/MINOR: http-act: Properly generate 103 responses when several rules are used\n    - BUG/MEDIUM: thread: mask stopping_threads with threads_enabled when checking it\n    - CLEANUP: thread: also remove a thread's bit from stopping_threads on stop\n    - BUG/MINOR: peers: fix possible NULL dereferences at config parsing\n    - BUG/MINOR: http-htx: Fix scheme based normalization for URIs wih userinfo\n    - MINOR: http: Add function to get port part of a host\n    - MINOR: http: Add function to detect default port\n    - BUG/MEDIUM: h1: Improve authority validation for CONNCET request\n    - MINOR: http-htx: Use new HTTP functions for the scheme based normalization\n    - BUG/MEDIUM: http-fetch: Don't fetch the method if there is no stream\n    - REGTEESTS: filters: Fix CONNECT request in random-forwarding script\n    - MEDIUM: mworker/systemd: send STATUS over sd_notify\n    - BUG/MINOR: mux-h1: Be sure to commit htx changes in the demux buffer\n    - BUG/MEDIUM: http-ana: Don't wait to have an empty buf to switch in TUNNEL state\n    - BUG/MEDIUM: mux-h1: Handle connection error after a synchronous send\n    - MEDIUM: epoll: don't synchronously delete migrated FDs\n    - BUILD: debug: silence warning on gcc-5\n    - BUILD: http: silence an uninitialized warning affecting gcc-5\n    - BUG/MEDIUM: mux-quic: fix server chunked encoding response\n    - REORG: mux-quic: rename stream initialization function\n    - MINOR: mux-quic: rename stream purge function\n    - MINOR: mux-quic: add traces on frame parsing functions\n    - MINOR: mux-quic: implement qcs_alert()\n    - MINOR: mux-quic: filter send/receive-only streams on frame parsing\n    - MINOR: mux-quic: do not ack STREAM frames on unrecoverable error\n    - MINOR: mux-quic: support stream opening via MAX_STREAM_DATA\n    - MINOR: mux-quic: define basic stream states\n    - MINOR: mux-quic: use stream states to mark as detached\n    - MEDIUM: mux-quic: implement RESET_STREAM emission\n    - MEDIUM: mux-quic: implement STOP_SENDING handling\n    - BUG/MEDIUM: debug: fix possible hang when multiple threads dump at once\n    - BUG/MINOR: quic: fix closing state on NO_ERROR code sent\n    - CLEANUP: quic: clean up include on quic_frame-t.h\n    - MINOR: quic: define a generic QUIC error type\n    - MINOR: mux-quic: support app graceful shutdown\n    - MINOR: mux-quic/h3: prepare CONNECTION_CLOSE on release\n    - MEDIUM: quic: send CONNECTION_CLOSE on released MUX\n    - CLEANUP: mux-quic: move qc_release()\n    - MINOR: mux-quic: send one last time before release\n    - MINOR: h3: store control stream in h3c\n    - MINOR: h3: implement graceful shutdown with GOAWAY\n    - BUG/MINOR: threads: produce correct global mask for tgroup > 1\n    - BUG/MEDIUM: cli/threads: make \"show threads\" more robust on applets\n    - BUG/MINOR: thread: use the correct thread's group in ha_tkillall()\n    - BUG/MINOR: debug: enter ha_panic() only once\n    - BUG/MEDIUM: debug: fix parallel thread dumps again\n    - MINOR: cli/streams: show a stream's tgid next to its thread ID\n    - DEBUG: cli: add a new \"debug dev deadlock\" expert command\n    - MINOR: cli/activity: add a thread number argument to \"show activity\"\n    - CLEANUP: applet: remove the obsolete command context from the appctx\n    - MEDIUM: config: remove deprecated \"bind-process\" directives from frontends\n    - MEDIUM: config: remove the \"process\" keyword on \"bind\" lines\n    - MINOR: listener/config: make \"thread\" always support up to LONGBITS\n    - CLEANUP: fd: get rid of the __GET_{NEXT,PREV} macros\n    - MEDIUM: debug/threads: make the lock debugging take tgroups into account\n    - MEDIUM: proto: stop protocols under thread isolation during soft stop\n    - MEDIUM: poller: program the update in fd_update_events() for a migrated FD\n    - MEDIUM: poller: disable thread-groups for poll() and select()\n    - MINOR: thread: remove MAX_THREADS limitation\n    - MEDIUM: cpu-map: replace the process number with the thread group number\n    - MINOR: mworker/threads: limit the mworker sockets to group 1\n    - MINOR: cli/threads: always bind CLI to thread group 1\n    - MINOR: fd/thread: get rid of thread_mask()\n    - MEDIUM: task/thread: move the task shared wait queues per thread group\n    - MINOR: task: move the niced_tasks counter to the thread group context\n    - DOC: design: add some thoughts about how to handle the update_list\n    - MEDIUM: conn: make conn_backend_get always scan the same group\n    - MAJOR: fd: remove pending updates upon real close\n    - MEDIUM: fd/poller: make the update-list per-group\n    - MINOR: fd: delete unused updates on close()\n    - MINOR: fd: make fd_insert() apply the thread mask itself\n    - MEDIUM: fd: add the tgid to the fd and pass it to fd_insert()\n    - MINOR: cli/fd: show fd's tgid and refcount in \"show fd\"\n    - MINOR: fd: add functions to manipulate the FD's tgid\n    - MINOR: fd: add fd_get_running() to atomically return the running mask\n    - MAJOR: fd: grab the tgid before manipulating running\n    - MEDIUM: fd/poller: turn polled_mask to group-local IDs\n    - MEDIUM: fd/poller: turn update_mask to group-local IDs\n    - MEDIUM: fd/poller: turn running_mask to group-local IDs\n    - MINOR: fd: make fd_clr_running() return the previous value instead\n    - MEDIUM: fd: make thread_mask now represent group-local IDs\n    - MEDIUM: fd: make fd_insert() take local thread masks\n    - MEDIUM: fd: make fd_insert/fd_delete atomically update fd.tgid\n    - MEDIUM: fd: quit fd_update_events() when FD is closed\n    - MEDIUM: thread: change thread_resolve_group_mask() to return group-local values\n    - MEDIUM: listener: switch bind_thread from global to group-local\n    - MINOR: fd: add fd_reregister_all() to deal with boot-time FDs\n    - MEDIUM: fd: support stopping FDs during starting\n    - MAJOR: pollers: rely on fd_reregister_all() at boot time\n    - MAJOR: poller: only touch/inspect the update_mask under tgid protection\n    - MEDIUM: fd: support broadcasting updates for foreign groups in updt_fd_polling\n    - CLEANUP: threads: remove the now unused all_threads_mask and tid_bit\n    - MINOR: config: change default MAX_TGROUPS to 16\n    - BUG/MEDIUM: tools: avoid calling dlsym() in static builds\n\n2022/06/24 : 2.7-dev1\n    - BUG/MINOR: ssl_ckch: Free error msg if commit changes on a cert entry fails\n    - BUG/MINOR: ssl_ckch: Free error msg if commit changes on a CA/CRL entry fails\n    - BUG/MEDIUM: ssl_ckch: Don't delete a cert entry if it is being modified\n    - BUG/MEDIUM: ssl_ckch: Don't delete CA/CRL entry if it is being modified\n    - BUG/MINOR: ssl_ckch: Don't duplicate path when replacing a cert entry\n    - BUG/MINOR: ssl_ckch: Don't duplicate path when replacing a CA/CRL entry\n    - BUG/MEDIUM: ssl_ckch: Rework 'commit ssl cert' to handle full buffer cases\n    - BUG/MEDIUM: ssl_ckch: Rework 'commit ssl ca-file' to handle full buffer cases\n    - BUG/MEDIUM: ssl/crt-list: Rework 'add ssl crt-list' to handle full buffer cases\n    - BUG/MEDIUM: httpclient: Don't remove HTX header blocks before duplicating them\n    - BUG/MEDIUM: httpclient: Rework CLI I/O handler to handle full buffer cases\n    - MEDIUM: httpclient: Don't close CLI applet at the end of a response\n    - MEDIUM: http-ana: Always report rewrite failures as PRXCOND in logs\n    - CLEANUP: Re-apply xalloc_size.cocci (2)\n    - REGTESTS: abortonclose: Add a barrier to not mix up log messages\n    - REGTESTS: http_request_buffer: Increase client timeout to wait \"slow\" clients\n    - CLEANUP: ssl_ckch: Use corresponding enum for commit_cacrlfile_ctx.cafile_type\n    - MINOR: ssl_ckch: Simplify I/O handler to commit changes on CA/CRL entry\n    - BUG/MINOR: ssl_ckch: Use right type for old entry in show_crlfile_ctx\n    - BUG/MINOR: ssl_ckch: Dump CRL transaction only once if show command yield\n    - BUG/MINOR: ssl_ckch: Dump CA transaction only once if show command yield\n    - BUG/MINOR: ssl_ckch: Dump cert transaction only once if show command yield\n    - BUG/MINOR: ssl_ckch: Init right field when parsing \"commit ssl crl-file\" cmd\n    - CLEANUP: ssl_ckch: Remove unused field in commit_cacrlfile_ctx structure\n    - MINOR: ssl_ckch: Simplify structure used to commit changes on CA/CRL entries\n    - MINOR: ssl_ckch: Remove service context for \"set ssl cert\" command\n    - MINOR: ssl_ckch: Remove service context for \"set ssl ca-file\" command\n    - MINOR: ssl_ckch: Remove service context for \"set ssl crl-file\" command\n    - BUG/MINOR: ssl_ckch: Fix possible uninitialized value in show_cert I/O handler\n    - BUG/MINOR: ssl_ckch: Fix possible uninitialized value in show_cafile I/O handler\n    - BUG/MINOR: ssl_ckch: Fix possible uninitialized value in show_crlfile I/O handler\n    - BUILD: ssl_ckch: Fix build error about a possible uninitialized value\n    - BUG/MINOR: ssl_ckch: Fix another possible uninitialized value\n    - REGTESTS: http_abortonclose: Extend supported versions\n    - REGTESTS: restrict_req_hdr_names: Extend supported versions\n    - MINOR: connection: support HTTP/3.0 for smp_*_http_major fetch\n    - MINOR: h3: add h3c pointer into h3s instance\n    - MINOR: mux-quic: simplify decode_qcs API\n    - MINOR: mux-quic/h3: adjust demuxing function return values\n    - BUG/MINOR: h3: fix return value on decode_qcs on error\n    - BUILD: quic: fix anonymous union for gcc-4.4\n    - BUILD: compiler: implement unreachable for older compilers too\n    - DEV: tcploop: reorder options in the usage message\n    - DEV: tcploop: make the current address the default address\n    - DEV: tcploop: make it possible to change the target address of a connect()\n    - DEV: tcploop: factor out the socket creation\n    - DEV: tcploop: permit port 0 to ease handling of default options\n    - DEV: tcploop: add a new \"bind\" command to bind to ip/port.\n    - DEV: tcploop: add minimal UDP support\n    - BUG/MINOR: trace: Test server existence for health-checks to get proxy\n    - BUG/MINOR: checks: Properly handle email alerts in trace messages\n    - BUG/MEDIUM: mailers: Set the object type for check attached to an email alert\n    - REGTESTS: healthcheckmail: Update the test to be functionnal again\n    - REGTESTS: healthcheckmail: Relax health-check failure condition\n    - BUG/MINOR: h3: fix incorrect BUG_ON assert on SETTINGS parsing\n    - MEDIUM: mux-h2: try to coalesce outgoing WINDOW_UPDATE frames\n    - OPTIM: mux-h2: increase h2_settings_initial_window_size default to 64k\n    - BUG/MINOR: h3: fix frame type definition\n    - BUG/MEDIUM: h3: fix SETTINGS parsing\n    - BUG/MINOR: cli/stats: add missing trailing LF after JSON outputs\n    - BUG/MINOR: server: do not enable DNS resolution on disabled proxies\n    - BUG/MINOR: cli/stats: add missing trailing LF after \"show info json\"\n    - DOC: design: update the notes on thread groups\n    - BUG/MEDIUM: mux-quic: fix flow control connection Tx level\n    - MINOR: mux-quic: complete BUG_ON on TX flow-control enforcing\n    - BUG/MINOR: mux-quic: fix memleak on frames rejected by transport\n    - BUG/MINOR: tcp-rules: Make action call final on read error and delay expiration\n    - CLEANUP: check: Remove useless tests on check's stream-connector\n    - BUG/MEDIUM: stconn: Don't wakeup applet for send if it won't consume data\n    - BUG/MEDIUM: cli: Notify cli applet won't consume data during request processing\n    - BUG/MEDIUM: mux-quic: fix segfault on flow-control frame cleanup\n    - MINOR: task: move profiling bit to per-thread\n    - CLEANUP: quic: use task_new_on() for single-threaded tasks\n    - MINOR: tinfo: remove the global thread ID bit (tid_bit)\n    - CLEANUP: hlua: check for at least 2 threads on a task\n    - MINOR: thread: get rid of MAX_THREADS_MASK\n    - OPTIM: task: do not consult shared WQ when we're already full\n    - DOC: design: update the task vs thread affinity requirements\n    - MINOR: qpack: add comments and remove a useless trace\n    - MINOR: qpack: reduce dependencies on other modules\n    - BUG/MINOR: qpack: support header litteral name decoding\n    - MINOR: qpack: add ABORT_NOW on unimplemented decoding\n    - BUG/MINOR: h3/qpack: deal with too many headers\n    - MINOR: qpack: improve decoding function\n    - MINOR: qpack: implement standalone decoder tool\n    - BUG/BUILD: h3: fix wrong label name\n    - BUG/MINOR: quic: Stop hardcoding Retry packet Version field\n    - MINOR: quic: Add several nonce and key definitions for Retry tag\n    - BUG/MINOR: quic: Wrong PTO calculation\n    - MINOR: quic: Parse long packet version from qc_parse_hd_form()\n    - CLEANUP: quid: QUIC draft-28 no more supported\n    - MEDIUM: quic: Add QUIC v2 draft support\n    - MINOR: quic: Released QUIC TLS extension for QUIC v2 draft\n    - MEDIUM: quic: Compatible version negotiation implementation (draft-08)\n    - CLEANUP: quic: Remove any reference to boringssl\n    - BUG/MINOR: task: fix thread assignment in tasklet_kill()\n    - BUG/MEDIUM: stream: Properly handle destructive client connection upgrades\n    - MINOR: stream: Rely on stconn flags to abort stream destructive upgrade\n    - CLEANUP: stconn: Don't expect to have no sedesc on detach\n    - BUG/MINOR: log: Properly test connection retries to fix dontlog-normal option\n    - MINOR: hlua: don't dump empty entries in hlua_traceback()\n    - MINOR: hlua: add a new hlua_show_current_location() function\n    - MEDIUM: debug: add a tainted flag when a shared library is loaded\n    - MEDIUM: debug: detect redefinition of symbols upon dlopen()\n    - BUILD: quic: Wrong HKDF label constant variable initializations\n    - BUG/MINOR: quic: Unexpected half open connection counter wrapping\n    - BUG/MINOR: quic_stats: Duplicate \"quic_streams_data_blocked_bidi\" field name\n    - BUG/MINOR: quic: purge conn Rx packet list on release\n    - BUG/MINOR: quic: free rejected Rx packets\n    - BUG/MINOR: qpack: abort on dynamic index field line decoding\n    - BUG/MEDIUM: ssl/cli: crash when crt inserted into a crt-list\n    - REGTESTS: ssl: add the same cert for client/server\n    - BUG/MINOR: quic: Acknowledgement must be forced during handshake\n    - MINOR: quic: Dump version_information transport parameter\n    - BUG/MEDIUM: mworker: use default maxconn in wait mode\n    - MINOR: intops: add a function to return a valid bit position from a mask\n    - TESTS: add a unit test for one_among_mask()\n    - BUILD: ssl_ckch: fix \"maybe-uninitialized\" build error on gcc-9.4 + ARM\n    - BUG/MINOR: ssl: Do not look for key in extra files if already in pem\n    - BUG/MINOR: quic: Missing acknowledgments for trailing packets\n    - BUG/MINOR: http-ana: Set method to HTTP_METH_OTHER when an HTTP txn is created\n    - BUG/MINOR: http-fetch: Use integer value when possible in \"method\" sample fetch\n    - MINOR: freq_ctr: Add a function to get events excess over the current period\n    - BUG/MINOR: stream: only free the req/res captures when set\n    - CLEANUP: pool/tree-wide: remove suffix \"_pool\" from certain pool names\n    - MEDIUM: debug: improve DEBUG_MEM_STATS to also report pool alloc/free\n    - BUG/MINOR: quic: Wrong reuse of fulfilled dgram RX buffer\n    - BUG/MAJOR: quic: Big RX dgrams leak when fulfilling a buffer\n    - BUG/MAJOR: quic: Big RX dgrams leak with POST requests\n    - BUILD: quic+h3: 32-bit compilation errors fixes\n    - MEDIUM: bwlim: Add support of bandwith limitation at the stream level\n\n2022/05/31 : 2.7-dev0\n    - MINOR: version: it's development again\n\n2022/05/31 : 2.6.0\n    - DOC: Fix formatting in configuration.txt to fix dconv\n    - CLEANUP: tcpcheck: Remove useless test on the stream-connector in tcpcheck_main\n    - CLEANUP: muxes: Consider stream's sd as defined in .show_fd callback functions\n    - MINOR: quic: Ignore out of packet padding.\n    - CLEANUP: quic: Useless QUIC_CONN_TX_BUF_SZ definition\n    - CLEANUP: quic: No more used handshake output buffer\n    - MINOR: quic: QUIC transport parameters split.\n    - MINOR: quic: Transport parameters dump\n    - DOC: quic: Update documentation for QUIC Retry\n    - MINOR: quic: Tunable \"max_idle_timeout\" transport parameter\n    - MINOR: quic: Tunable \"initial_max_streams_bidi\" transport parameter\n    - MINOR: quic: Clarifications about transport parameters value\n    - MINOIR: quic_stats: add QUIC connection errors counters\n    - BUG/MINOR: quic: Largest RX packet numbers mixing\n    - MINOR: quic_stats: Add transport new counters (lost, stateless reset, drop)\n    - DOC: quic: Documentation update for QUIC\n    - MINOR: quic: Connection TX buffer setting renaming.\n    - MINOR: h3: Add a statistics module for h3\n    - MINOR: quic: Send STOP_SENDING frames if mux is released\n    - MINOR: quic: Do not drop packets with RESET_STREAM frames\n    - BUG/MINOR: qpack: fix buffer API usage on prefix integer encoding\n    - BUG/MINOR: qpack: support bigger prefix-integer encoding\n    - BUG/MINOR: h3: do not report bug on unknown method\n    - SCRIPTS: add make-releases-json to recreate a releases.json file in download dirs\n    - SCRIPTS: make publish-release try to launch make-releases-json\n    - MINOR: htx: add an unchecked version of htx_get_head_blk()\n    - BUILD: htx: use the unchecked version of htx_get_head_blk() where needed\n    - BUILD: quic: use inttypes.h instead of stdint.h\n    - DOC: internal: remove totally outdated diagrams\n    - DOC: remove the outdated ROADMAP file\n    - DOC: add maintainers for QUIC and HTTP/3\n    - MINOR: h3: define h3 trace module\n    - MINOR: h3: add traces on frame recv\n    - MINOR: h3: add traces on frame send\n    - MINOR: h3: add traces on h3s init/end\n    - EXAMPLES: remove completely outdated acl-content-sw.cfg\n    - BUILD: makefile: reorder objects by build time\n    - DOC: fix a few spelling mistakes in the docs\n    - BUG/MEDIUM: peers/cli: fix \"show peers\" crash\n    - CLEANUP: peers/cli: stop misusing the appctx local variable\n    - CLEANUP: peers/cli: make peers_dump_peer() take an appctx instead of an stconn\n    - BUG/MINOR: peers: set the proxy's name to the peers section name\n    - MINOR: server: indicate when no address was expected for a server\n    - BUG/MINOR: peers: detect and warn on init_addr/resolvers/check/agent-check\n    - DOC: peers: indicate that some server settings are not usable\n    - DOC: peers: clarify when entry expiration date is renewed.\n    - DOC: peers: fix port number and addresses on new peers section format\n    - DOC: gpc/gpt: add commments of gpc/gpt array definitions on stick tables.\n    - DOC: install: update supported OpenSSL versions in the INSTALL doc\n    - MINOR: ncbuf: adjust ncb_data with NCBUF_NULL\n    - BUG/MINOR: h3: fix frame demuxing\n    - BUG/MEDIUM: h3: fix H3_EXCESSIVE_LOAD when receiving H3 frame header only\n    - BUG/MINOR: quic: Fix QUIC_EV_CONN_PRSAFRM event traces\n    - CLEANUP: quic: remove useless check on local UNI stream reception\n    - BUG/MINOR: qpack: do not consider empty enc/dec stream as error\n    - DOC: intro: adjust the numbering of paragrams to keep the output ordered\n    - MINOR: version: mention that it's LTS now.\n\n2022/05/27 : 2.6-dev12\n    - CLEANUP: tools: Clean up non-QUIC error message handling in str2sa_range()\n    - BUG/MEDIUM: tools: Fix `inet_ntop` usage in sa2str\n    - CLEANUP: tools: Crash if inet_ntop fails due to ENOSPC in sa2str\n    - BUG/MEDIUM: mux-quic: adjust buggy proxy closing support\n    - Revert \"MINOR: quic: activate QUIC traces at compilation\"\n    - Revert \"MINOR: mux-quic: activate qmux traces on stdout via macro\"\n    - CLEANUP: init: address a coverity warning about possible multiply overflow\n    - BUG/MEDIUM: http: Properly reject non-HTTP/1.x protocols\n    - MEDIUM: h1: enlarge the scope of accepted version chars with accept-invalid-http-request\n    - BUG/MEDIUM: resolvers: Don't defer resolutions release in deinit function\n    - BUG/MEDIUM: peers: fix segfault using multiple bind on peers sections\n    - BUG/MEDIUM: peers: prevent unitialized multiple listeners on peers section\n    - BUG/MINOR: task: Don't defer tasks release when HAProxy is stopping\n    - MINOR: h3: mark ncbuf as const on h3_b_dup\n    - MINOR: mux-quic: do not alloc quic_stream_desc for uni remote stream\n    - MINOR: mux-quic: delay cs_endpoint allocation\n    - MINOR: mux-quic: add traces in qc_recv()\n    - MINOR: mux-quic: adjust return value of decode_qcs\n    - CLEANUP: h3: rename struct h3 -> h3c\n    - CLEANUP: h3: rename uni stream type constants\n    - BUG/MINOR: h3: prevent overflow when parsing SETTINGS\n    - MINOR: h3: refactor h3_control_send()\n    - MINOR: quic: support CONNECTION_CLOSE_APP emission\n    - MINOR: mux-quic: disable read on CONNECTION_CLOSE emission\n    - MINOR: h3: reject too big frames\n    - MINOR: mux-quic: emit STREAM_STATE_ERROR in qcc_recv\n    - BUG/MINOR: mux-quic: refactor uni streams TX/send H3 SETTINGS\n    - MINOR: h3/qpack: use qcs as type in decode callbacks\n    - MINOR: h3: define stream type\n    - MINOR: h3: refactor uni streams initialization\n    - MINOR: h3: check if frame is valid for stream type\n    - MINOR: h3: define non-h3 generic parsing function\n    - MEDIUM: quic: refactor uni streams RX\n    - CLEANUP: h3: remove h3 uni tasklet\n    - MINOR: h3: abort read on unknown uni stream\n    - MINOR: h3: refactor SETTINGS parsing/error reporting\n    - Revert \"BUG/MINOR: task: Don't defer tasks release when HAProxy is stopping\"\n    - DOC: configuration: add a warning for @system-ca on bind\n    - CLEANUP: init: address another coverity warning about a possible multiply overflow\n    - BUG/MINOR: ssl/lua: use correctly cert_ext in CertCache.set()\n    - BUG/MEDIUM: sample: Fix adjusting size in word converter\n    - REGTESTS: Do not use REQUIRE_VERSION for HAProxy 2.5+ (2)\n    - CLEANUP: conn_stream: remove unneeded exclusion of RX_WAIT_EP from RXBLK_ANY\n    - CLEANUP: conn_stream: rename the cs_endpoint's context to \"conn\"\n    - MINOR: conn_stream: add new sets of functions to set/get endpoint flags\n    - DEV: coccinelle: add cs_endp_flags.cocci\n    - CLEANUP: conn_stream: apply cs_endp_flags.cocci tree-wide\n    - DEV: coccinelle: add endp_flags.cocci\n    - CLEANUP: conn_stream: apply endp_flags.cocci tree-wide\n    - CLEANUP: conn_stream: rename the stream endpoint flags CS_EP_* to  SE_FL_*\n    - CLEANUP: conn_stream: rename the cs_endpoint's target to \"se\"\n    - CLEANUP: conn_stream: rename cs_endpoint to sedesc (stream endpoint descriptor)\n    - CLEANUP: applet: rename the sedesc pointer from \"endp\" to \"sedesc\"\n    - CLEANUP: conn_stream: rename the conn_stream's endp to sedesc\n    - CLEANUP: conn_stream: rename cs_app_* to sc_app_*\n    - CLEANUP: conn_stream: tree-wide rename to stconn (stream connector)\n    - CLEANUP: mux-h1: add and use h1s_sc() to retrieve the stream connector\n    - CLEANUP: mux-h2: add and use h2s_sc() to retrieve the stream connector\n    - CLEANUP: mux-fcgi: add and use fcgi_strm_sc() to retrieve the stream connector\n    - CLEANUP: mux-pt: add and use pt_sc() to retrieve the stream connector\n    - CLEANUP: stdesc: rename the stream connector ->cs field to ->sc\n    - CLEANUP: stream: rename \"csf\" and \"csb\" to \"scf\" and \"scb\"\n    - CLEANUP: stconn: tree-wide rename stream connector flags CS_FL_* to SC_FL_*\n    - CLEANUP: stconn: tree-wide rename stconn states CS_ST/SB_* to SC_ST/SB_*\n    - MINOR: check: export wake_srv_chk()\n    - MINOR: conn_stream: test the various ops functions before calling them\n    - MEDIUM: stconn: merge the app_ops and the data_cb fields\n    - MINOR: applet: add new wrappers to put chk/blk/str/chr to channel from appctx\n    - CLEANUP: applet: use applet_put*() everywhere possible\n    - CLEANUP: stconn: rename cs_{i,o}{b,c} to sc_{i,o}{b,c}\n    - CLEANUP: stconn: rename cs_{check,strm,strm_task} to sc_strm_*\n    - CLEANUP: stconn: rename cs_conn() to sc_conn()\n    - CLEANUP: stconn: rename cs_mux() to sc_mux_strm()\n    - CLEANUP: stconn: rename cs_conn_mux() to sc_mux_ops()\n    - CLEANUP: stconn: rename cs_appctx() to sc_appctx()\n    - CLEANUP: stconn: rename __cs_endp_target() to __sc_endp()\n    - CLEANUP: stconn: rename cs_get_data_name() to sc_get_data_name()\n    - CLEANUP: stconn: rename cs_conn_*() to sc_conn_*()\n    - CLEANUP: stconn: rename cs_conn_get_first() to conn_get_first_sc()\n    - CLEANUP: stconn: rename cs_ep_set_error() to se_fl_set_error()\n    - CLEANUP: stconn: make a few functions take a const argument\n    - CLEANUP: stconn: use a single function to know if SC may send to SE\n    - MINOR: stconn: consider CF_SHUTW for sc_is_send_allowed()\n    - MINOR: stconn: remove calls to cs_done_get()\n    - MEDIUM: stconn: always rely on CF_SHUTR in addition to cs_rx_blocked()\n    - MEDIUM: stconn: remove SE_FL_RXBLK_SHUT\n    - MINOR: stconn: rename SE_FL_RXBLK_CONN to SE_FL_APPLET_NEED_CONN\n    - MEDIUM: stconn: take SE_FL_APPLET_NEED_CONN out of the RXBLK_ANY flags\n    - CLEANUP: stconn: rename cs_rx_room_{blk,rdy} to sc_{need,have}_room()\n    - CLEANUP: stconn: rename cs_rx_chan_{blk,rdy} to sc_{wont,will}_read()\n    - CLEANUP: stconn: rename cs_rx_buff_{blk,rdy} to sc_{need,have}_buff()\n    - MINOR: stconn: start to rename cs_rx_endp_{more,done}() to se_have_{no_,}more_data()\n    - MINOR: stconn: add sc_is_recv_allowed() to check for ability to receive\n    - CLEANUP: stconn: rename SE_FL_RX_WAIT_EP to SE_FL_HAVE_NO_DATA\n    - MEDIUM: stconn: move the RXBLK flags to the stream connector\n    - CLEANUP: stconn: rename SE_FL_WANT_GET to SE_FL_WILL_CONSUME\n    - CLEANUP: stconn: remove cs_tx_blocked() and cs_tx_endp_ready()\n    - CLEANUP: stconn: rename cs_{want,stop}_get() to se_{will,wont}_consume()\n    - CLEANUP: stconn: rename cs_cant_get() to se_need_more_data()\n    - CLEANUP: stconn: rename cs_{new,create,free,destroy}_* to sc_*\n    - CLEANUP: stconn: rename remaining management functions from cs_* to sc_*\n    - CLEANUP: stconn: rename cs{,_get}_{src,dst} to sc_*\n    - CLEANUP: stconn: rename cs_{shut,chk}* to sc_*\n    - CLEANUP: stconn: rename final state manipulation functions from cs_* to sc_*\n    - CLEANUP: quic: drop the name \"conn_stream\" from the pool variable names\n    - REORG: rename cs_utils.h to sc_strm.h\n    - REORG: stconn: rename conn_stream.{c,h} to stconn.{c,h}\n    - CLEANUP: muxes: rename \"get_first_cs\" to \"get_first_sc\"\n    - DEV: flags: use \"sc\" for stream conns instead of \"cs\"\n    - CLEANUP: check: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: connection: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: stconn: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: quic/h3: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: stream: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: promex: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: stats: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: cli: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: applet: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: cache: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: dns: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: spoe: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: hlua: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: log-forward: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: http-client: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: mux-fcgi: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: mux-h1: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: mux-h2: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: mux-pt: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: peers: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: sink: rename all occurrences of stconn \"cs\" to \"sc\"\n    - CLEANUP: sslsock: remove only occurrence of local variable \"cs\"\n    - CLEANUP: applet: rename appctx_cs() to appctx_sc()\n    - CLEANUP: stream: rename stream_upgrade_from_cs() to stream_upgrade_from_sc()\n    - CLEANUP: obj_type: rename OBJ_TYPE_CS to OBJ_TYPE_SC\n    - CLEANUP: stconn: replace a few remaining occurrences of CS in comments or traces\n    - DOC: internal: update the muxes doc to mention the stconn\n    - CLEANUP: mux-quic: rename the \"endp\" field to \"sd\"\n    - CLEANUP: mux-h1: rename the \"endp\" field to \"sd\"\n    - CLEANUP: mux-h2: rename the \"endp\" field to \"sd\"\n    - CLEANUP: mux-fcgi: rename the \"endp\" field to \"sd\"\n    - CLEANUP: mux-pt: rename the \"endp\" field to \"sd\"\n    - CLEANUP: stconn: rename a few \"endp\" arguments and variables to \"sd\"\n    - MINOR: stconn: turn SE_FL_WILL_CONSUME to SE_FL_WONT_CONSUME\n    - CLEANUP: stream: remove unneeded test on appctx during initialization\n    - CLEANUP: stconn: remove the new unneeded SE_FL_APP_MASK\n    - DEV: flags: fix \"siet\" shortcut name\n    - DEV: flags: rename the \"endp\" shortcut to \"sd\" for \"stream descriptor\"\n    - DEV: flags: reorder a few SC/SE flags\n    - DOC: internal: add a description of the stream connectors and descriptors\n\n2022/05/20 : 2.6-dev11\n    - CI: determine actual LibreSSL version dynamically\n    - BUG/MEDIUM: ncbuf: fix null buffer usage\n    - MINOR: ncbuf: fix warnings for testing build\n    - MEDIUM: http-ana: Add a proxy option to restrict chars in request header names\n    - MEDIUM: ssl: Delay random generator initialization after config parsing\n    - MINOR: ssl: Add 'ssl-propquery' global option\n    - MINOR: ssl: Add 'ssl-provider' global option\n    - CLEANUP: Add missing header to ssl_utils.c\n    - CLEANUP: Add missing header to hlua_fcn.c\n    - CLEANUP: Remove unused function hlua_get_top_error_string\n    - BUILD: fix build warning on solaris based systems with __maybe_unused.\n    - MINOR: tools: add get_exec_path implementation for solaris based systems.\n    - BUG/MINOR: ssl: Fix crash when no private key is found in pem\n    - CLEANUP: conn-stream: Remove cs_applet_shut declaration from header file\n    - MINOR: applet: Prepare appctx to own the session on frontend side\n    - MINOR: applet: Let the frontend appctx release the session\n    - MINOR: applet: Change return value for .init callback function\n    - MINOR: stream: Export stream_free()\n    - MINOR: applet: Add appctx_init() helper fnuction\n    - MINOR: applet: Add a function to finalize frontend appctx startup\n    - MINOR: applet: Add function to release appctx on error during init stage\n    - MEDIUM: dns: Refactor dns appctx creation\n    - MEDIUM: spoe: Refactor SPOE appctx creation\n    - MEDIUM: lua: Refactor cosocket appctx creation\n    - MEDIUM: httpclient: Refactor http-client appctx creation\n    - MINOR: sink: Add a ref to sink in the sink_forward_target structure\n    - MEDIUM: sink: Refactor sink forwarder appctx creation\n    - MINOR: peers: Add a ref to peers section in the peer structure\n    - MEDIUM: peers: Refactor peer appctx creation\n    - MINOR: applet: Add API to start applet on a thread subset\n    - MEDIUM: applet: Add support for async appctx startup on a thread subset\n    - MINOR: peers: Track number of applets run by thread\n    - MEDIUM: peers: Balance applets across threads\n    - MINOR: conn-stream/applet: Stop setting appctx as the endpoint context\n    - CLEANUP: proxy: Remove dead code when parsing \"http-restrict-req-hdr-names\" option\n    - REGTESTS: abortonclose: Fix some race conditions\n    - MINOR: ssl: Add 'ssl-provider-path' global option\n    - CLEANUP: http_ana: Make use of the return value of stream_generate_unique_id()\n    - BUG/MINOR: spoe: Fix error handling in spoe_init_appctx()\n    - CLEANUP: peers: Remove unreachable code in peer_session_create()\n    - CLEANUP: httpclient: Remove useless test on ss_dst in httpclient_applet_init()\n    - BUG/MEDIUM: quic: fix Rx buffering\n    - OPTIM: quic: realign empty Rx buffer\n    - BUG/MINOR: ncbuf: fix ncb_is_empty()\n    - MINOR: ncbuf: refactor ncb_advance()\n    - BUG/MINOR: mux-quic: update session's idle delay before stream creation\n    - MINOR: h3: do not wait a complete frame for demuxing\n    - MINOR: h3: flag demux as full on HTX full\n    - MEDIUM: mux-quic: implement recv on io-cb\n    - MINOR: mux-quic: remove qcc_decode_qcs() call in XPRT\n    - MINOR: mux-quic: reorganize flow-control frames emission\n    - MINOR: mux-quic: implement MAX_STREAM_DATA emission\n    - MINOR: mux-quic: implement MAX_DATA emission\n    - BUG/MINOR: mux-quic: support nul buffer with qc_free_ncbuf()\n    - MINOR: mux-quic: free RX buf if empty\n    - BUG/MEDIUM: config: Reset outline buffer size on realloc error in readcfgfile()\n    - BUG/MINOR: check: Reinit the buffer wait list at the end of a check\n    - MEDIUM: check: No longer shutdown the connection in .wake callback function\n    - REORG: check: Rename and export I/O callback function\n    - MEDIUM: check: Use the CS to handle subscriptions for read/write events\n    - BUG/MINOR: quic: break for error on sendto\n    - MINOR: quic: abort on unlisted errno on sendto()\n    - MINOR: quic: detect EBADF on sendto()\n    - BUG/MEDIUM: quic: fix initialization for local/remote TPs\n    - CLEANUP: quic: adjust comment/coding style for TPs init\n    - BUG/MINOR: cfgparse: abort earlier in case of allocation error\n    - MINOR: quic: Dump initial derived secrets\n    - MINOR: quic_tls: Add quic_tls_derive_retry_token_secret()\n    - MINOR: quic_tls: Add quic_tls_decrypt2() implementation\n    - MINOR: quic: Retry implementation\n    - MINOR: cfgparse: Update for \"cluster-secret\" keyword for QUIC Retry\n    - MINOR: quic: Move quic_lstnr_dgram_dispatch() out of xprt_quic.c\n    - BUILD: stats: Missing headers inclusions from stats.h\n    - MINOR: quic_stats: Add a new stats module for QUIC\n    - MINOR: quic: Attach proxy QUIC stats counters to the QUIC connection\n    - BUG/MINOR: quic: Fix potential memory leak during QUIC connection allocations\n    - MINOR: quic: QUIC stats counters handling\n    - MINOR: quic: Add tune.quic.retry-threshold keyword\n    - MINOR: quic: Dynamic Retry implementation\n    - MINOR: quic/mux-quic: define CONNECTION_CLOSE send API\n    - MINOR: mux-quic: emit FLOW_CONTROL_ERROR\n    - MINOR: mux-quic: emit STREAM_LIMIT_ERROR\n    - MINOR: mux-quic: close connection on error if different data at offset\n    - BUG/MINOR: peers: fix error reporting of \"bind\" lines\n    - CLEANUP: config: improve address parser error report for unmatched protocols\n    - CLEANUP: config: provide cleare hints about unsupported QUIC addresses\n    - MINOR: protocol: replace ctrl_type with xprt_type and clarify it\n    - MINOR: listener: provide a function to process all of a bind_conf's arguments\n    - MINOR: config: use the new bind_parse_args_list() to parse a \"bind\" line\n    - CLEANUP: listener: add a comment about what the BC_SSL_O_* flags are for\n    - MINOR: listener: add a new \"options\" entry in bind_conf\n    - CLEANUP: listener: replace all uses of bind_conf->is_ssl with BC_O_USE_SSL\n    - CLEANUP: listener: replace bind_conf->generate_cers with BC_O_GENERATE_CERTS\n    - CLEANUP: listener: replace bind_conf->quic_force_retry with BC_O_QUIC_FORCE_RETRY\n    - CLEANUP: listener: store stream vs dgram at the bind_conf level\n    - MINOR: listener: detect stream vs dgram conflict during parsing\n    - MINOR: listener: set the QUIC xprt layer immediately after parsing the args\n    - MINOR: listener/ssl: set the SSL xprt layer only once the whole config is known\n    - MINOR: connection: add flag MX_FL_FRAMED to mark muxes relying on framed xprt\n    - MINOR: config: detect and report mux and transport incompatibilities\n    - MINOR: listener: automatically select a QUIC mux with a QUIC transport\n    - MINOR: listener: automatically enable SSL if a QUIC transport is found\n    - BUG/MINOR: quic: Fixe a typo in qc_idle_timer_task()\n    - BUG/MINOR: quic: Missing <conn_opening> stats counter decrementation\n    - BUILD/MINOR: cpuset fix build for FreeBSD 13.1\n    - CI: determine actual OpenSSL version dynamically\n\n2022/05/14 : 2.6-dev10\n    - MINOR: ssl: ignore dotfiles when loading a dir w/ ca-file\n    - MEDIUM: ssl: ignore dotfiles when loading a dir w/ crt\n    - BUG/MINOR: ssl: Fix typos in crl-file related CLI commands\n    - MINOR: compiler: add a new macro to set an attribute on an enum when possible\n    - BUILD: stats: conditionally mark obsolete stats states as deprecated\n    - BUILD: ssl: work around bogus warning in gcc 12's -Wformat-truncation\n    - BUILD: debug: work around gcc-12 excessive -Warray-bounds warnings\n    - BUILD: listener: shut report of possible null-deref in listener_accept()\n    - BUG/MEDIUM: ssl: fix the gcc-12 broken fix :-(\n    - DOC: install: update gcc version requirements\n    - BUILD: makefile: add -Wfatal-errors to the default flags\n    - BUG/MINOR: server: Make SRV_STATE_LINE_MAXLEN value from 512 to 2kB (2000 bytes).\n    - BUG/MAJOR: dns: multi-thread concurrency issue on UDP socket\n    - BUG/MINOR: mux-h2: mark the stream as open before processing it not after\n    - MINOR: mux-h2: report a trace event when failing to create a new stream\n    - DOC: configuration: add the httpclient keywords to the global keywords index\n    - MINOR: quic: Add a debug counter for sendto() errors\n    - BUG/MINOR: quic: Dropped peer transport parameters\n    - BUG/MINOR: quic: Wrong unit for ack delay for incoming ACK frames\n    - MINOR: quic: Congestion controller event trace fix (loss)\n    - MINOR: quic: Add correct ack delay values to ACK frames\n    - MINOR: config: Add \"cluster-secret\" new global keyword\n    - MINOR: quic-tls: Add quic_hkdf_extract_and_expand() for HKDF\n    - MINOR: quic: new_quic_cid() code moving\n    - MINOR: quic: Initialize stateless reset tokens with HKDF secrets\n    - MINOR: qc_new_conn() rework for stateless reset\n    - MINOR: quic: Stateless reset token copy to transport parameters\n    - MINOR: quic: Send stateless reset tokens\n    - MINOR: quic: Short packets always embed a trailing AEAD TAG\n    - CLEANUP: quic: wrong use of eb*entry() macro\n    - CLEANUP: quic: Useless use of pointer for quic_hkdf_extract()\n    - CLEANUP: quic_tls: QUIC_TLS_IV_LEN defined two times\n    - MINOR: ncbuf: define non-contiguous buffer\n    - MINOR: ncbuf: complete API and define block interal abstraction\n    - MINOR: ncbuf: optimize storage for the last gap\n    - MINOR: ncbuf: implement insertion\n    - MINOR: ncbuf: define various insertion modes\n    - MINOR: ncbuf: implement advance\n    - MINOR: ncbuf: write unit tests\n    - BUG/MEDIUM: lua: fix argument handling in data removal functions\n    - DOC/MINOR: fix typos in the lua-api document\n    - BUG/MEDIUM: wdt: don't trigger the watchdog when p is unitialized\n    - MINOR: mux-h1: Add global option accpet payload for any HTTP/1.0 requests\n    - CLEANUP: mux-h1: Fix comments and error messages for global options\n    - MINOR: conn_stream: make cs_set_error() work on the endpoint instead\n    - CLEANUP: mux-h1: always take the endp from the h1s not the cs\n    - CLEANUP: mux-h2: always take the endp from the h2s not the cs\n    - CLEANUP: mux-pt: always take the endp from the context not the cs\n    - CLEANUP: mux-fcgi: always take the endp from the fstrm not the cs\n    - CLEANUP: mux-quic: always take the endp from the qcs not the cs\n    - CLEANUP: applet: use the appctx's endp instead of cs->endp\n    - MINOR: conn_stream: add a pointer back to the cs from the endpoint\n    - MINOR: mux-h1: remove the now unneeded h1s->cs\n    - MINOR: mux-h2: make sure any h2s always has an endpoint\n    - MINOR: mux-h2: remove the now unneeded conn_stream from the h2s\n    - MINOR: mux-fcgi: make sure any stream always has an endpoint\n    - MINOR: mux-fcgi: remove the now unneeded conn_stream from the fcgi_strm\n    - MINOR: mux-quic: remove the now unneeded conn_stream from the qcs\n    - MINOR: mux-pt: remove the now unneeded conn_stream from the context\n    - CLEANUP: muxes: make mux->attach/detach take a conn_stream endpoint\n    - MINOR: applet: replace cs_applet_shut() with appctx_shut()\n    - MINOR: applet: add appctx_strm() and appctx_cs() to access common fields\n    - CLEANUP: applet: remove the unneeded appctx->owner\n    - CLEANUP: conn_stream: merge cs_new_from_{mux,applet} into cs_new_from_endp()\n    - MINOR: ext-check: indicate the transport and protocol of a server\n    - BUG/MEDIUM: mux-quic: fix a thinko in the latest cs/endpoint cleanup\n    - MINOR: tools: improve error message accuracy in str2sa_range\n    - MINOR: config: make sure never to mix dgram and stream protocols on a bind line\n    - BUG/MINOR: ncbuf: fix coverity warning on uninit sz_data\n    - MINOR: xprt_quic: adjust flow-control according to bufsize\n    - MEDIUM: mux-quic/h3/hq-interop: use ncbuf for bidir streams\n    - MEDIUM: mux-quic/h3/qpack: use ncbuf for uni streams\n    - CLEANUP: mux-quic: remove unused fields for Rx\n    - CLEANUP: quic: remove unused quic_rx_strm_frm\n\n2022/05/08 : 2.6-dev9\n    - MINOR: mux-quic: support full request channel buffer\n    - BUG/MINOR: h3: fix parsing of unknown frame type with null length\n    - CLEANUP: backend: make alloc_{bind,dst}_address() idempotent\n    - MEDIUM: stream: remove the confusing SF_ADDR_SET flag\n    - MINOR: conn_stream: remove the now unused CS_FL_ADDR_*_SET flags\n    - CLEANUP: protocol: make sure the connect_* functions always receive a dst\n    - MINOR: connection: get rid of the CO_FL_ADDR_*_SET flags\n    - MINOR: session: get rid of the now unused SESS_FL_ADDR_*_SET flags\n    - CLEANUP: mux: Useless xprt_quic-t.h inclusion\n    - MINOR: quic: Make the quic_conn be aware of the number of streams\n    - BUG/MINOR: quic: Dropped retransmitted STREAM frames\n    - BUG/MINOR: mux_quic: Dropped packet upon retransmission for closed streams\n    - MEDIUM: httpclient: remove url2sa to use a more flexible parser\n    - MEDIUM: httpclient: http-request rules for resolving\n    - MEDIUM: httpclient: allow address and port change for resolving\n    - CLEANUP: httpclient: remove the comment about resolving\n    - MINOR: httpclient: handle unix and other socket types in dst\n    - MINOR: httpclient: rename dash by dot in global option\n    - MINOR: init: exit() after pre-check upon error\n    - MINOR: httpclient: cleanup the error handling in init\n    - MEDIUM: httpclient: hard-error when SSL is configured\n    - MINOR: httpclient: allow to configure the ca-file\n    - MINOR: httpclient: configure the resolvers section to use\n    - MINOR: httpclient: allow ipv4 or ipv6 preference for resolving\n    - DOC: configuration: httpclient global option\n    - MINOR: conn-stream: Add mask from flags set by endpoint or app layer\n    - BUG/MEDIUM: conn-stream: Only keep app layer flags of the endpoint on reset\n    - BUG/MEDIUM: mux-fcgi: Be sure to never set EOM flag on an empty HTX message\n    - BUG/MEDIUM: mux-h1: Be able to handle trailers when C-L header was specified\n    - DOC: config: Update doc for PR/PH session states to warn about rewrite failures\n    - MINOR: resolvers: cleanup alert/warning in parse-resolve-conf\n    - MINOR: resolvers: move the resolv.conf parser in parse_resolv_conf()\n    - MINOR: resolvers: resolvers_new() create a resolvers with default values\n    - BUILD: debug: unify the definition of ha_backtrace_to_stderr()\n    - BUG/MINOR: tcp/http: release the expr of set-{src,dst}[-port]\n    - MEDIUM: resolvers: create a \"default\" resolvers section at startup\n    - DOC: resolvers: default resolvers section\n    - BUG/MINOR: startup: usage() when no -cc arguments\n    - BUG/MEDIUM: resolvers: make \"show resolvers\" properly yield\n    - BUG/MEDIUM: cli: make \"show cli sockets\" really yield\n    - BUG/MINOR: proxy/cli: don't enumerate internal proxies on \"show backend\"\n    - BUG/MINOR: map/cli: protect the backref list during \"show map\" errors\n    - BUG/MINOR: map/cli: make sure patterns don't vanish under \"show map\"'s init\n    - BUG/MINOR: ssl/cli: fix \"show ssl ca-file/crl-file\" not to mix cli+ssl contexts\n    - BUG/MINOR: ssl/cli: fix \"show ssl ca-file <name>\" not to mix cli+ssl contexts\n    - BUG/MINOR: ssl/cli: fix \"show ssl crl-file\" not to mix cli+ssl contexts\n    - BUG/MINOR: ssl/cli: fix \"show ssl cert\" not to mix cli+ssl contexts\n    - CLEANUP: ssl/cli: do not loop on unknown states in \"add ssl crt-list\" handler\n    - MINOR: applet: reserve some generic storage in the applet's context\n    - CLEANUP: applet: make appctx_new() initialize the whole appctx\n    - CLEANUP: stream/cli: take the \"show sess\" context definition out of the appctx\n    - CLEANUP: stream/cli: stop using appctx->st2 for the dump state\n    - CLEANUP: stream/cli: remove the unneeded init state from \"show sess\"\n    - CLEANUP: stream/cli: remove the unneeded STATE_FIN state from \"show sess\"\n    - CLEANUP: stream/cli: remove the now unneeded dump state from \"show sess\"\n    - CLEANUP: proxy/cli: take the \"show errors\" context definition out of the appctx\n    - CLEANUP: stick-table/cli: take the \"show table\" context definition out of the appctx\n    - CLEANUP: stick-table/cli: stop using appctx->st2 for the dump state\n    - CLEANUP: stick-table/cli: remove the unneeded STATE_INIT for \"show table\"\n    - CLEANUP: map/cli: take the \"show map\" context definition out of the appctx\n    - CLEANUP: map/cli: stop using cli.i0/i1 to store the generation numbers\n    - CLEANUP: map/cli: stop using appctx->st2 for the dump state\n    - CLEANUP: map/cli: always detach the backref from the list after \"show map\"\n    - CLEANUP: peers/cli: take the \"show peers\" context definition out of the appctx\n    - CLEANUP: peers/cli: stop using appctx->st2 for the dump state\n    - CLEANUP: peers/cli: remove unneeded state STATE_INIT\n    - CLEANUP: cli: initialize the whole appctx->ctx, not just the stats part\n    - CLEANUP: promex: make the applet use its own context\n    - CLEANUP: promex: stop using appctx->st2\n    - CLEANUP: stats/cli: take the \"show stat\" context definition out of the appctx\n    - CLEANUP: stats/cli: stop using appctx->st2\n    - CLEANUP: hlua/cli: take the hlua_cli context definition out of the appctx\n    - CLEANUP: ssl/cli: use a local context for \"show cafile\"\n    - CLEANUP: ssl/cli: use a local context for \"show crlfile\"\n    - CLEANUP: ssl/cli: use a local context for \"show ssl cert\"\n    - CLEANUP: ssl/cli: use a local context for \"commit ssl cert\"\n    - CLEANUP: ssl/cli: stop using appctx->st2 for \"commit ssl cert\"\n    - CLEANUP: ssl/cli: use a local context for \"set ssl cert\"\n    - CLEANUP: ssl/cli: use a local context for \"set ssl cafile\"\n    - CLEANUP: ssl/cli: use a local context for \"set ssl crlfile\"\n    - CLEANUP: ssl/cli: use a local context for \"commit ssl {ca|crl}file\"\n    - CLEANUP: ssl/cli: stop using appctx->st2 for \"commit ssl ca/crl\"\n    - CLEANUP: ssl/cli: stop using ctx.cli.i0/i1/p0 for \"show tls-keys\"\n    - CLEANUP: ssl/cli: add a new \"dump_entries\" field to \"show_keys_ref\"\n    - CLEANUP: ssl/cli: make \"show tlskeys\" not use appctx->st2 anymore\n    - CLEANUP: ssl/cli: make \"show ssl ocsp-response\" not use cli.p0 anymore\n    - CLEANUP: ssl/cli: make \"{show|dump} ssl crtlist\" use its own context\n    - CLEANUP: ssl/cli: make \"add ssl crtlist\" use its own context\n    - CLEANUP: ssl/cli: make \"add ssl crtlist\" not use st2 anymore\n    - CLEANUP: dns: stop abusing the sink forwarder's context\n    - CLEANUP: sink: use the generic context to store the forwarder's context\n    - CLEANUP: activity/cli: make \"show profiling\" not use ctx.cli anymore\n    - CLEANUP: debug/cli: make \"debug dev fd\" not use ctx.cli anymore\n    - CLEANUP: debug/cli: make \"debug dev memstats\" not use ctx.cli anymore\n    - CLEANUP: ring: pass the ring watch flags to ring_attach_cli(), not in ctx.cli\n    - CLEANUP: ring/cli: use a locally-defined context instead of using ctx.cli\n    - CLEANUP: resolvers/cli: make \"show resolvers\" use a locally-defined context\n    - CLEANUP: resolvers/cli: remove the unneeded appctx->st2 from \"show resolvers\"\n    - CLEANUP: cache/cli: make use of a locally defined context for \"show cache\"\n    - CLEANUP: proxy/cli: make use of a locally defined context for \"show servers\"\n    - CLEANUP: proxy/cli: get rid of appctx->st2 in \"show servers\"\n    - CLEANUP: proxy/cli: make \"show backend\" only use the generic context\n    - CLEANUP: cli: make \"show fd\" use its own context\n    - CLEANUP: cli: make \"show env\" use its own context\n    - CLEANUP: cli: simplify the \"show cli sockets\" I/O handler\n    - CLEANUP: cli: make \"show cli sockets\" use its own context\n    - CLEANUP: httpclient/cli: use a locally-defined context instead of ctx.cli\n    - CLEANUP: httpclient: do not use the appctx.ctx anymore\n    - CLEANUP: peers: do not use appctx.ctx anymore\n    - CLEANUP: spoe: do not use appctx.ctx anymore\n    - BUILD: applet: mark the CLI's generic variables as deprecated\n    - BUILD: applet: mark the appctx's st2 variable as deprecated\n    - CLEANUP: cache: take the context out of appctx.ctx\n    - MEDIUM: lua: move the cosocket storage outside of appctx.ctx\n    - MINOR: lua: move the tcp service storage outside of appctx.ctx\n    - MINOR: lua: move the http service context out of appctx.ctx\n    - CLEANUP: cli: move the status print context into its own context\n    - CLEANUP: stats: rename the stats state values an mark the old ones deprecated\n    - DOC: internal: document the new cleaner approach to the appctx\n    - MINOR: tcp: socket translate TCP_KEEPIDLE for macOs equivalent\n    - DOC: fix typo \"ant\" for \"and\" in INSTALL\n    - CI: dynamically determine actual version of h2spec\n\n2022/04/30 : 2.6-dev8\n    - BUG/MINOR: quic: fix use-after-free with trace on ACK consume\n    - BUG/MINOR: rules: Forbid captures in defaults section if used by a backend\n    - BUG/MEDIUM: rules: Be able to use captures defined in defaults section\n    - BUG/MINOR: rules: Fix check_capture() function to use the right rule arguments\n    - BUG/MINOR: http-act: make release_http_redir() more robust\n    - BUG/MINOR: sample: add missing use_backend/use-server contexts in smp_resolve_args\n    - MINOR: sample: don't needlessly call c_none() in sample_fetch_as_type()\n    - MINOR: sample: make the bool type cast to bin\n    - MEDIUM: backend: add new \"balance hash <expr>\" algorithm\n    - MINOR: init: add global setting \"fd-hard-limit\" to bound system limits\n    - BUILD: pollers: use an initcall to register the pollers\n    - BUILD: xprt: use an initcall to register the transport layers\n    - BUILD: thread: use initcall instead of a constructor\n    - BUILD: http: remove the two unused constructors in rules and ana\n    - CLEANUP: compression: move the default setting of maxzlibmem to defaults\n    - MINOR: tree-wide: always consider EWOULDBLOCK in addition to EAGAIN\n    - BUG/MINOR: connection: \"connection:close\" header added despite 'close-spread-time'\n    - MINOR: fd: add functions to set O_NONBLOCK and FD_CLOEXEC\n    - CLEANUP: tree-wide: use fd_set_nonblock() and fd_set_cloexec()\n    - CLEANUP: tree-wide: remove 25 occurrences of unneeded fcntl.h\n    - REGTESTS: fix the race conditions in be2dec.vtc ad field.vtc\n    - REGTESTS: webstats: remove unused stats socket in /tmp\n    - MEDIUM: httpclient: disable SSL when the ca-file couldn't be loaded\n    - BUG/MINOR: httpclient/lua: error when the httpclient_start() fails\n    - BUG/MINOR: ssl: free the cafile entries on deinit\n    - BUG/MINOR: ssl: memory leak when trying to load a directory with ca-file\n    - MEDIUM: httpclient: re-enable the verify by default\n    - BUG/MEDIUM: ssl/cli: fix yielding in show_cafile_detail\n    - BUILD: compiler: properly distinguish weak and global symbols\n    - MINOR: connection: Add way to disable active connection closing during soft-stop\n    - BUG/MEDIUM: http-ana: Fix memleak in redirect rules with ignore-empty option\n    - CLEANUP: Destroy `http_err_chunks` members during deinit\n    - BUG/MINOR: resolvers: Fix memory leak in resolvers_deinit()\n    - MINOR: Call deinit_and_exit(0) for `haproxy -vv`\n    - BUILD: fd: disguise the fd_set_nonblock/cloexec result\n    - BUG/MINOR: pools: make sure to also destroy shared pools in pool_destroy_all()\n    - MINOR: ssl: add a new global option \"tune.ssl.hard-maxrecord\"\n    - CLEANUP: errors: also call deinit_errors_buffers() on deinit()\n    - CLEANUP: chunks: release trash also in deinit\n    - CLEANUP: deinit: release the pre-check callbacks\n    - CLEANUP: deinit: release the config postparsers\n    - CLEANUP: listeners/deinit: release accept queue tasklets on deinit\n    - CLEANUP: connections/deinit: destroy the idle_conns tasks\n    - BUG/MINOR: mux-quic: fix build in release mode\n    - MINOR: mux-quic: adjust comment on emission function\n    - MINOR: mux-quic: remove unused bogus qcc_get_stream()\n    - BUG/MINOR: mux-quic: fix leak if cs alloc failure\n    - MINOR: mux-quic: count local flow-control stream limit on reception\n    - BUG/MINOR: h3: fix incomplete POST requests\n    - BUG/MEDIUM: h3: fix use-after-free on mux Rx buffer wrapping\n    - MINOR: mux-quic: partially copy Rx frame if almost full buf\n    - MINOR: h3: change frame demuxing API\n    - MINOR: mux-quic: add a app-layer context in qcs\n    - MINOR: h3: implement h3 stream context\n    - MINOR: h3: support DATA demux if buffer full\n    - MINOR: quic: decode as much STREAM as possible\n    - MINOR: quic: Improve qc_prep_pkts() flexibility\n    - MINOR: quic: Prepare quic_frame struct duplication\n    - MINOR: quic: Do not retransmit frames from coalesced packets\n    - MINOR: quic: Add traces about TX frame memory releasing\n    - MINOR: quic: process_timer() rework\n    - MEDIUM: quic: New functions for probing rework\n    - MEDIUM: quic: Retransmission functions rework\n    - MEDIUM: quic: qc_requeue_nacked_pkt_tx_frms() rework\n    - MINOR: quic: old data distinction for qc_send_app_pkt()\n    - MINOR: quic: Mark packets as probing with old data\n    - MEDIUM: quic: Mark copies of acknowledged frames as acknowledged\n    - MEDIUM: quic: Enable the new datagram probing process\n    - MINOR: quic: Do not send ACK frames when probing\n    - BUG/MINOR: quic: Wrong returned status by qc_build_frms()\n    - BUG/MINOR: quic: Avoid sending useless PADDING frame\n    - BUG/MINOR: quic: Traces fix about remaining frames upon packet build failure\n    - MINOR: quic: Wake up the mux to probe with new data\n    - BUG/MEDIUM: quic: Possible crash on STREAM frame loss\n    - BUG/MINOR: quic: Missing Initial packet length check\n    - CLEANUP: quic: Rely on the packet length set by qc_lstnr_pkt_rcv()\n    - MINOR: quic: Drop 0-RTT packets if not allowed\n    - BUG/MINOR: httpclient/ssl: use the correct verify constant\n    - BUG/MEDIUM: conn-stream: Don't erase endpoint flags on reset\n    - BUG/MEDIUM: httpclient: Fix loop consuming HTX blocks from the response channel\n    - BUG/MINOR: httpclient: Count metadata in size to transfer via htx_xfer_blks()\n    - MINOR: httpclient: Don't use co_set_data() to decrement output\n    - BUG/MINOR: conn_stream: do not confirm a connection from the frontend path\n    - MEDIUM: quic: do not ACK packet with STREAM if MUX not present\n    - MEDIUM: quic: do not ack packet with invalid STREAM\n    - MINOR: quic: Drop 0-RTT packets without secrets\n    - CLEANUP: quic: Remaining fprintf() debug trace\n    - MINOR: quic: moving code for QUIC loss detection\n    - BUG/MINOR: quic: Missing time threshold multiplifier for loss delay computation\n    - CI: github actions: update LibreSSL to 3.5.2\n    - SCRIPTS: announce-release: add URL of dev packages\n\n2022/04/23 : 2.6-dev7\n    - BUILD: calltrace: fix wrong include when building with TRACE=1\n    - MINOR: ssl: Use DH parameters defined in RFC7919 instead of hard coded ones\n    - MEDIUM: ssl: Disable DHE ciphers by default\n    - BUILD: ssl: Fix compilation with OpenSSL 1.0.2\n    - MINOR: mux-quic: split xfer and STREAM frames build\n    - REORG: quic: use a dedicated module for qc_stream_desc\n    - MINOR: quic-stream: use distinct tree nodes for quic stream and qcs\n    - MINOR: quic-stream: add qc field\n    - MEDIUM: quic: implement multi-buffered Tx streams\n    - MINOR: quic-stream: refactor ack management\n    - MINOR: quic: limit total stream buffers per connection\n    - MINOR: mux-quic: implement immediate send retry\n    - MINOR: cfg-quic: define tune.quic.conn-buf-limit\n    - MINOR: ssl: Add 'show ssl providers' cli command and providers list in -vv option\n    - REGTESTS: ssl: Update error messages that changed with OpenSSLv3.1.0-dev\n    - BUG/MEDIUM: quic: Possible crash with released mux\n    - BUG/MINOR: mux-quic: unsubscribe on release\n    - BUG/MINOR: mux-quic: handle null timeout\n    - BUG/MEDIUM: logs: fix http-client's log srv initialization\n    - BUG/MINOR: mux-quic: remove dead code in qcs_xfer_data()\n    - DEV: stream: Fix conn-streams dump in full stream message\n    - CLEANUP: conn-stream: Rename cs_conn_close() and cs_conn_drain_and_close()\n    - CLEANUP: conn-stream: Rename cs_applet_release()\n    - MINOR: conn-stream: Rely on endpoint shutdown flags to shutdown an applet\n    - BUG/MINOR: cache: Disable cache if applet creation fails\n    - BUG/MINOR: backend: Don't allow to change backend applet\n    - BUG/MEDIUM: conn-stream: Set back CS to RDY state when the appctx is created\n    - MINOR: stream: Don't needlessly detach server endpoint on early client abort\n    - MINOR: conn-stream: Make cs_detach_* private and use cs_destroy() from outside\n    - MINOR: init: add the pre-check callback\n    - MEDIUM: httpclient: change the init sequence\n    - MEDIUM: httpclient/ssl: verify required\n    - MINOR: httpclient/mworker: disable in the master process\n    - MEDIUM: httpclient/ssl: verify is configurable and disabled by default\n    - BUG/MAJOR: connection: Never remove connection from idle lists outside the lock\n    - BUG/MEDIUM: mux-quic: fix stalled POST requets\n    - BUG/MINOR: mux-quic: fix POST with abortonclose\n    - MINOR: task: add a new task_instant_wakeup() function\n    - MEDIUM: queue: use tasklet_instant_wakeup() to wake tasks\n    - DOC: remove my name from the config doc\n\n2022/04/16 : 2.6-dev6\n    - CLEANUP: connection: reduce the with of the mux dump output\n    - CI: Update to actions/checkout@v3\n    - CI: Update to actions/cache@v3\n    - DOC: adjust QUIC instruction in INSTALL\n    - BUG/MINOR: stats: define the description' background color in dark color scheme\n    - BUILD: ssl: add USE_ENGINE and disable the openssl engine by default\n    - BUILD: makefile: pass USE_ENGINE to cflags\n    - BUILD: xprt-quic: replace ERR_func_error_string() with ERR_peek_error_func()\n    - DOC: install: document the fact that SSL engines are not enabled by default\n    - CI: github actions: disable -Wno-deprecated\n    - BUILD: makefile: silence unbearable OpenSSL deprecation warnings\n    - MINOR: sock: check configured limits at the sock layer, not the listener's\n    - MINOR: connection: add a new flag CO_FL_FDLESS on fd-less connections\n    - MINOR: connection: add conn_fd() to retrieve the FD only when it exists\n    - MINOR: stream: only dump connections' FDs when they are valid\n    - MINOR: connection: use conn_fd() when displaying connection errors\n    - MINOR: connection: skip FD-based syscalls for FD-less connections\n    - MEDIUM: connection: panic when calling FD-specific functions on FD-less conns\n    - MINOR: mux-quic: properly set the flags and name fields\n    - MINOR: connection: rearrange conn_get_src/dst to be a bit more extensible\n    - MINOR: protocol: add get_src() and get_dst() at the protocol level\n    - MINOR: quic-sock: provide a pair of get_src/get_dst functions\n    - MEDIUM: ssl: improve retrieval of ssl_sock_ctx and SSL detection\n    - MEDIUM: ssl: stop using conn->xprt_ctx to access the ssl_sock_ctx\n    - MEDIUM: xprt-quic: implement get_ssl_sock_ctx()\n    - MEDIUM: quic: move conn->qc into conn->handle\n    - BUILD: ssl: fix build warning with previous changes to ssl_sock_ctx\n    - BUILD: ssl: add an unchecked version of __conn_get_ssl_sock_ctx()\n    - MINOR: ssl: refine the error testing for fc_err and fc_err_str\n    - BUG/MINOR: sock: do not double-close the accepted socket on the error path\n    - CI: cirrus: switch to FreeBSD-13.0\n    - MINOR: log: add '~' to frontend when the transport layer provides SSL\n    - BUILD/DEBUG: lru: fix printf format in debug code\n    - BUILD: peers: adjust some printf format to silence cppcheck\n    - BUILD/DEBUG: hpack-tbl: fix format string in standalone debug code\n    - BUILD/DEBUG: hpack: use unsigned int in printf format in debug code\n    - BUILD: halog: fix some incorrect signs in printf formats for integers\n    - BUG/MINOR: h3: fix build with DEBUG_H3\n    - BUG/MINOR: mux-h2: do not send GOAWAY if SETTINGS were not sent\n    - BUG/MINOR: cache: do not display expired entries in \"show cache\"\n    - BUG/MINOR: mux-h1: Don't release unallocated CS on error path\n    - MINOR: applet: Make .init callback more generic\n    - MINOR: conn-stream: Add flags to set the type of the endpoint\n    - MEDIUM: applet: Set the appctx owner during allocation\n    - MAJOR: conn-stream: Invert conn-stream endpoint and its context\n    - REORG: Initialize the conn-stream by hand in cs_init()\n    - MEDIUM: conn-stream: Add an endpoint structure in the conn-stream\n    - MINOR: conn-stream: Move some CS flags to the endpoint\n    - MEDIUM: conn-stream: Be able to pass endpoint to create a conn-stream\n    - MEDIUM: conn-stream: Pre-allocate endpoint to create CS from muxes and applets\n    - REORG: applet: Uninline appctx_new function\n    - MAJOR: conn-stream: Share endpoint struct between the CS and the mux/applet\n    - MEDIUM: conn-stream: Move remaning flags from CS to endpoint\n    - MINOR: mux-pt: Rely on the endpoint instead of the conn-stream when possible\n    - MINOR: conn-stream: Add ISBACK conn-stream flag\n    - MINOR: conn-stream: Add header file with util functions related to conn-streams\n    - MEDIUM: tree-wide: Use CS util functions instead of SI ones\n    - MINOR: stream-int/txn: Move buffer for L7 retries in the HTTP transaction\n    - CLEANUP: http-ana: Remove http_alloc_txn() function\n    - MINOR: stream-int/stream: Move conn_retries counter in the stream\n    - MINOR: stream: Simplify retries counter calculation\n    - MEDIUM: stream-int/conn-stream: Move src/dst addresses in the conn-stream\n    - MINOR: stream-int/conn-stream: Move half-close timeout in the conn-stream\n    - MEDIUM: stream-int/stream: Use connect expiration instead of SI expiration\n    - MINOR: stream-int/conn-stream: Report error to the CS instead of the SI\n    - MEDIUM: conn-stream: Use endpoint error instead of conn-stream error\n    - MINOR: channel: Use conn-streams as channel producer and consumer\n    - MINOR: stream-int: Remove SI_FL_KILL_CON to rely on conn-stream endpoint only\n    - MINOR: mux-h2/mux-fcgi: Fully rely on CS_EP_KILL_CONN\n    - MINOR: stream-int: Remove SI_FL_NOLINGER/NOHALF to rely on CS flags instead\n    - MINOR: stream-int: Remove SI_FL_DONT_WAKE to rely on CS flags instead\n    - MINOR: stream-int: Remove SI_FL_INDEP_STR to rely on CS flags instead\n    - MINOR: stream-int: Remove SI_FL_SRC_ADDR to rely on stream flags instead\n    - CLEANUP: stream-int: Remove unused SI_FL_CLEAN_ABRT flag\n    - MINOR: stream: Only save previous connection state for the server side\n    - MEDIUM: stream-int: Move SI err_type in the stream\n    - MEDIUM: stream-int/conn-stream: Move stream-interface state in the conn-stream\n    - MINOR: stream-int/stream: Move si_retnclose() in the stream scope\n    - MINOR: stream-int/backend: Move si_connect() in the backend scope\n    - MINOR: stream-int/conn-stream: Move si_conn_ready() in the conn-stream scope\n    - MINOR: conn-stream/connection: Move SHR/SHW modes in the connection scope\n    - MEDIUM: conn-stream: Be prepared to fail to attach a cs to a mux\n    - MEDIUM: stream-int/conn-stream: Handle I/O subscriptions in the conn-stream\n    - MINOR: conn-stream: Rename CS functions dedicated to connections\n    - MINOR: stream-int/conn-stream: Move si_shut* and si_chk* in conn-stream scope\n    - MEDIUM: stream-int/conn-stream: Move si_ops in the conn-stream scope\n    - MINOR: applet: Use the CS to register and release applets instead of SI\n    - MINOR: connection: unconst mux's get_fist_cs() callback function\n    - MINOR: stream-int/connection: Move conn_si_send_proxy() in the connection scope\n    - REORG: stream-int: Export si_cs_recv(), si_cs_send() and si_cs_process()\n    - REORG: stream-int: Move si_is_conn_error() in the header file\n    - REORG: conn-stream: Move cs_shut* and cs_chk* in cs_utils\n    - REORG: conn-stream: Move cs_app_ops in conn_stream.c\n    - MINOR: stream-int-conn-stream: Move si_update_* in conn-stream scope\n    - MINOR: stream-int/stream: Move si_update_both in stream scope\n    - MEDIUM: conn-stream/applet: Add a data callback for applets\n    - MINOR: stream-int/conn-stream: Move stream_int_read0() in the conn-stream scope\n    - MINOR: stream-int/conn-stream: Move stream_int_notify() in the conn-stream scope\n    - MINOR: stream-int/conn-stream: Move si_cs_io_cb() in the conn-stream scope\n    - MINOR: stream-int/conn-stream: Move si_sync_recv/send() in conn-stream scope\n    - MINOR: conn-stream: Move si_conn_cb in the conn-stream scope\n    - MINOR: stream-int/conn-stream Move si_is_conn_error() in the conn-stream scope\n    - MINOR: stream-int/conn-stream: Move si_alloc_ibuf() in the conn-stream scope\n    - CLEANUP: stream-int:  Remove unused SI functions\n    - MEDIUM: stream-int/conn-stream: Move blocking flags from SI to CS\n    - MEDIUM: stream-int/conn-stream: Move I/O functions to conn-stream\n    - REORG: stream-int/conn-stream: Move remaining functions to conn-stream\n    - MINOR: stream: Use conn-stream to report server error\n    - MINOR: http-ana: Use CS to perform L7 retries\n    - MEDIUM: stream: Don't use the stream-int anymore in process_stream()\n    - MINOR: conn-stream: Remove the stream-interface from the conn-stream\n    - DEV: flags: No longer dump SI flags\n    - CLEANUP: tree-wide: Remove any ref to stream-interfaces\n    - CLEANUP: conn-stream: Don't export internal functions\n    - DOC: conn-stream: Add comments on functions of the new CS api\n    - MEDIUM: check: Use a new conn-stream for each health-check run\n    - CLEANUP: muxes: Remove MX_FL_CLEAN_ABRT flag\n    - MINOR: conn-stream: Use a dedicated function to conditionally remove a CS\n    - CLEANUP: conn-stream: rename cs_register_applet() to cs_applet_create()\n    - MINOR: muxes: Improve show_fd callbacks to dump endpoint flags\n    - MINOR: mux-h1: Rely on the endpoint instead of the conn-stream when possible\n    - BUG/MINOR: quic: Avoid starting the mux if no ALPN sent by the client\n    - BUILD: debug: mark the __start_mem_stats/__stop_mem_stats symbols as weak\n    - BUILD: initcall: mark the __start_i_* symbols as weak, not global\n    - BUG/MINOR: mux-h2: do not use timeout http-keep-alive on backend side\n    - BUG/MINOR: mux-h2: use timeout http-request as a fallback for http-keep-alive\n    - MINOR: muxes: Don't expect to have a mux without connection in destroy callback\n    - MINOR: muxes: Don't handle proto upgrade for muxes not supporting it\n    - MINOR: muxes: Don't expect to call release function with no mux defined\n    - MINOR: conn-stream: Use unsafe functions to get conn/appctx in cs_detach_endp\n    - BUG/MEDIUM: mux-h1: Don't request more room on partial trailers\n    - BUILD: http-client: Avoid dead code when compiled without SSL support\n    - BUG/MINOR: mux-quic: prevent a crash in session_free on mux.destroy\n    - BUG/MINOR: quic-sock: do not double free session on conn init failure\n    - BUG/MINOR: quic: fix return value for error in start\n    - MINOR: quic: emit CONNECTION_CLOSE on app init error\n    - BUILD: sched: workaround crazy and dangerous warning in Clang 14\n    - BUILD: compiler: use a more portable set of asm(\".weak\") statements\n    - BUG/MEDIUM: stream: do not abort connection setup too early\n    - CLEANUP: extcheck: do not needlessly preset the server's address/port\n    - MINOR: extcheck: fill in the server's UNIX socket address when known\n    - BUG/MEDIUM: connection: Don't crush context pointer location if it is a CS\n    - BUG/MEDIUM: quic: properly clean frames on stream free\n    - BUG/MEDIUM: fcgi-app: Use http_msg flags to know if C-L header can be added\n    - BUG/MEDIUM: compression: Don't forget to update htx_sl and http_msg flags\n    - MINOR: tcp_sample: clarifying samples support per os, for further expansion.\n    - MINOR: tcp_sample: extend support for get_tcp_info to macOs.\n    - SCRIPTS: announce-release: update the doc's URL\n    - DOC: lua: update a few doc URLs\n    - SCRIPTS: announce-release: add shortened links to pending issues\n\n2022/04/09 : 2.6-dev5\n    - DOC: reflect H2 timeout changes\n    - BUG/MEDIUM: mux-fcgi: Properly handle return value of headers/trailers parsing\n    - BUG/MEDIUM: mux-h1: Properly detect full buffer cases during message parsing\n    - BUG/MINOR: log: Initialize the list element when allocating a new log server\n    - BUG/MINOR: samples: add missing context names for sample fetch functions\n    - MINOR: management: add some basic keyword dump infrastructure\n    - MINOR: config: add a function to dump all known config keywords\n    - MINOR: filters: extend flt_dump_kws() to dump to stdout\n    - MINOR: services: extend list_services() to dump to stdout\n    - MINOR: cli: add a new keyword dump function\n    - MINOR: acl: add a function to dump the list of known ACL keywords\n    - MINOR: samples: add a function to list register sample fetch keywords\n    - MINOR: sample: list registered sample converter functions\n    - MINOR: tools: add strordered() to check whether strings are ordered\n    - MINOR: action: add a function to dump the list of actions for a ruleset\n    - MINOR: config: alphanumerically sort config keywords output\n    - MINOR: sample: alphanumerically sort sample & conv keyword dumps\n    - MINOR: acl: alphanumerically sort the ACL dump\n    - MINOR: cli: alphanumerically sort the dump of supported commands\n    - MINOR: filters: alphabetically sort the list of filter names\n    - MINOR: services: alphabetically sort service names\n    - MEDIUM: httpclient/lua: be stricter with httpclient parameters\n    - MINOR: ssl: split the cert commit io handler\n    - MINOR: ssl: move the cert_exts and the CERT_TYPE enum\n    - MINOR: ssl: simplify the certificate extensions array\n    - MINOR: ssl: export ckch_inst_rebuild()\n    - MINOR: ssl: add \"crt\" in the cert_exts array\n    - MINOR: ssl/lua: CertCache.set() allows to update an SSL certificate file\n    - BUILD: ssl/lua: CacheCert needs OpenSSL\n    - DOC: lua: CertCache class documentation\n    - BUG/MEDIUM: quic: do not use qcs from quic_stream on ACK parsing\n    - MINOR: mux-quic: return qcs instance from qcc_get_qcs\n    - MINOR: mux-quic: reorganize qcs free\n    - MINOR: mux-quic: define release app-ops\n    - BUG/MINOR: h3: release resources on close\n    - BUG/MINOR: mux-quic: ensure to free all qcs on MUX release\n    - CLEANUP: quic: complete comment on qcs_try_to_consume\n    - MINOR: quic: implement stream descriptor for transport layer\n    - MEDIUM: quic: move transport fields from qcs to qc_conn_stream\n    - MEDIUM: mux-quic: remove qcs tree node\n    - BUG/MINOR: cli/stream: fix \"shutdown session\" to iterate over all threads\n    - DOC: management: add missing dot in 9.4.1\n    - BUG/MAJOR: mux_pt: always report the connection error to the conn_stream\n    - DOC: remove double blanks in configuration.txt\n    - CI: github actions: update OpenSSL to 3.0.2\n    - BUG/MEDIUM: quic: Possible crash in ha_quic_set_encryption_secrets()\n    - CLEANUP: quic: Remove all atomic operations on quic_conn struct\n    - CLEANUP: quic: Remove all atomic operations on packet number spaces\n    - MEDIUM: quic: Send ACK frames asap\n    - BUG/MINOR: quic: Missing probing packets when coalescing\n    - BUG/MINOR: quic: Discard Initial packet number space only one time\n    - MINOR: quic: Do not display any timer value from process_timer()\n    - BUG/MINOR: quic: Do not probe from an already probing packet number space\n    - BUG/MINOR: quic: Non duplicated frames upon fast retransmission\n    - BUG/MINOR: quic: Too much prepared retransmissions due to anti-amplification\n    - MINOR: quic: Useless call to SSL_CTX_set_default_verify_paths()\n    - MINOR: quic: Add traces about list of frames\n    - BUG/MINOR: h3: Missing wait event struct field initialization\n    - BUG/MINOR: quic: QUIC TLS secrets memory leak\n    - BUG/MINOR: quic: Missing ACK range deallocations\n    - BUG/MINOR: quic: Missing TX packet deallocations\n    - CLEANUP: hpack: be careful about integer promotion from uint8_t\n    - OPTIM: hpack: read 32 bits at once when possible.\n    - MEDIUM: ssl: allow loading of a directory with the ca-file directive\n    - BUG/MINOR: ssl: continue upon error when opening a directory w/ ca-file\n    - MINOR: ssl: ca-file @system-ca loads the system trusted CA\n    - DOC: configuration: add the ca-file changes\n    - MINOR: sample: converter: Add add_item convertor\n    - BUG/MINOR: ssl: handle X509_get_default_cert_dir() returning NULL\n    - BUG/MINOR: ssl/cli: Remove empty lines from CLI output\n    - MINOR: httpclient: enable request buffering\n    - MEDIUM: httpclient: enable l7-retry\n    - BUG/MINOR: httpclient: end callback in applet release\n    - MINOR: quic: Add draining connection state.\n    - MINOR: quic: Add closing connection state\n    - BUG/MEDIUM: quic: ensure quic-conn survives to the MUX\n    - CLEANUP: quic: use static qualifer on quic_close\n    - CLEANUP: mux-quic: remove unused QC_CF_CC_RECV\n    - BUG/MINOR: fix memleak on quic-conn streams cleaning\n    - MINOR: mux-quic: factorize conn-stream attach\n    - MINOR: mux-quic: adjust timeout to accelerate closing\n    - MINOR: mux-quic: define is_active app-ops\n    - MINOR: mux-quic: centralize send operations in qc_send\n    - MEDIUM: mux-quic: report CO_FL_ERROR on send\n    - MEDIUM: mux-quic: report errors on conn-streams\n    - MEDIUM: quic: report closing state for the MUX\n    - BUG/MINOR: fcgi-app: Don't add C-L header on response to HEAD requests\n    - BUG/MEDIUM: stats: Be sure to never set EOM flag on an empty HTX message\n    - BUG/MEDIUM: hlua: Don't set EOM flag on an empty HTX message in HTTP applet\n    - BUG/MEDIUM: promex: Be sure to never set EOM flag on an empty HTX message\n    - BUG/MEDIUM: mux-h1: Set outgoing message to DONE when payload length is reached\n    - BUG/MINOR: http_client: Don't add input data on an empty request buffer\n    - BUG/MEDIUM: http-conv: Fix url_enc() to not crush const samples\n    - BUG/MEDIUM: http-act: Don't replace URI if path is not found or invalid\n    - CLEANUP: mux-quic: remove uneeded TODO in qc_detach\n    - BUG/MEDIUM: mux-quic: properly release conn-stream on detach\n    - BUG/MINOR: quic: set the source not the destination address on accept()\n    - BUG/MEDIUM: quic: Possible crash from quic_free_arngs()\n    - MINOR: quic_tls: Add reusable cipher contexts to QUIC TLS contexts\n    - MINOR: quic_tls: Stop hardcoding cipher IV lengths\n    - CLEANUP: quic: Do not set any cipher/group from ssl_quic_initial_ctx()\n    - MINOR: quic: Add short packet key phase bit values to traces\n    - MINOR: quic_tls: Make key update use of reusable cipher contexts\n    - BUG/MINOR: opentracing: setting the return value in function flt_ot_var_set()\n    - BUG/BUILD: opentracing: fixed OT_DEFINE variable setting\n    - EXAMPLES: opentracing: refined shell scripts for testing filter performance\n    - DOC: opentracing: corrected comments in function descriptions\n    - CLEANUP: opentracing: removed unused function flt_ot_var_unset()\n    - CLEANUP: opentracing: removed unused function flt_ot_var_get()\n    - Revert \"MINOR: opentracing: change the scope of the variable 'ot.uuid' from 'sess' to 'txn'\"\n    - MINOR: opentracing: only takes the variables lock on shared entries\n    - CLEANUP: opentracing: added flt_ot_smp_init() function\n    - CLEANUP: opentracing: added variable to store variable length\n    - MINOR: opentracing: improved normalization of context variable names\n    - DEBUG: opentracing: show return values of all functions in the debug output\n    - CLEANUP: opentracing: added FLT_OT_PARSE_INVALID_enum enum\n    - DEBUG: opentracing: display the contents of the err variable after setting\n    - MAJOR: opentracing: reenable usage of vars to transmit opentracing context\n    - Revert \"BUILD: opentracing: display warning in case of using OT_USE_VARS at compile time\"\n    - MEDIUM: global: Add a \"close-spread-time\" option to spread soft-stop on time window\n\n2022/03/26 : 2.6-dev4\n    - BUG/MEDIUM: httpclient: don't consume data before it was analyzed\n    - CLEANUP: htx: remove unused co_htx_remove_blk()\n    - BUG/MINOR: httpclient: consume partly the blocks when necessary\n    - BUG/MINOR: httpclient: remove the UNUSED block when parsing headers\n    - BUG/MEDIUM: httpclient: must manipulate head, not first\n    - REGTESTS: fix the race conditions in be2hex.vtc\n    - BUG/MEDIUM: quic: Blocked STREAM when retransmitted\n    - BUG/MAJOR: quic: Possible crash with full congestion control window\n    - BUG/MINOR: httpclient/lua: stuck when closing without data\n    - BUG/MEDIUM: applet: Don't call .release callback function twice\n    - BUG/MEDIUM: cli/debug: Properly get the stream-int in all debug I/O handlers\n    - BUG/MEDIUM: sink: Properly get the stream-int in appctx callback functions\n    - DEV: udp: switch parser to getopt() instead of positional arguments\n    - DEV: udp: add support for random packet corruption\n    - MINOR: server: export server_parse_sni_expr() function\n    - BUG/MINOR: httpclient: send the SNI using the host header\n    - BUILD: httpclient: fix build without SSL\n    - BUG/MINOR: server/ssl: free the SNI sample expression\n    - BUG/MINOR: logs: fix logsrv leaks on clean exit\n    - MINOR: actions: add new function free_act_rule() to free a single rule\n    - BUG/MINOR: tcp-rules: completely free incorrect TCP rules on error\n    - BUG/MINOR: http-rules: completely free incorrect TCP rules on error\n    - BUG/MINOR: httpclient: only check co_data() instead of HTTP_MSG_DATA\n    - BUG/MINOR: httpclient: process the response when received before the end of the request\n    - BUG/MINOR: httpclient: CF_SHUTW_NOW should be tested with channel_is_empty()\n    - CI: github actions: switch to LibreSSL-3.5.1\n    - BUG/MEDIUM: mux-h1: only turn CO_FL_ERROR to CS_FL_ERROR with empty ibuf\n    - BUG/MEDIUM: stream-int: do not rely on the connection error once established\n    - BUG/MEDIUM: trace: avoid race condition when retrieving session from conn->owner\n    - MEDIUM: mux-h2: slightly relax timeout management rules\n    - BUG/MEDIUM: mux-h2: make use of http-request and keep-alive timeouts\n    - BUG/MINOR: rules: Initialize the list element when allocating a new rule\n    - BUG/MINOR: http-rules: Don't free new rule on allocation failure\n    - DEV: coccinelle: Fix incorrect replacement in ist.cocci\n    - CLEANUP: Reapply ist.cocci with `--include-headers-for-types --recursive-includes`\n    - DEV: coccinelle: Add a new pattern to ist.cocci\n    - CLEANUP: Reapply ist.cocci\n    - REGTESTS: Do not use REQUIRE_VERSION for HAProxy 2.5+\n    - MINOR: quic: Code factorization (TX buffer reuse)\n    - CLEANUP: quic: \"largest_acked_pn\" pktns struc member moving\n    - MEDIUM: quic: Limit the number of ACK ranges\n    - MEDIUM: quic: Rework of the TX packets memory handling\n    - BUG/MINOR: quic: Possible crash in parse_retry_token()\n    - BUG/MINOR: quic: Possible leak in quic_build_post_handshake_frames()\n    - BUG/MINOR: quic: Unsent frame because of qc_build_frms()\n    - BUG/MINOR: mux-quic: Access to empty frame list from qc_send_frames()\n    - BUG/MINOR: mux-quic: Missing I/O handler events initialization\n    - BUG/MINOR: quic: Missing TX packet initializations\n    - BUG/MINOR: quic: 1RTT packets ignored after mux was released\n    - BUG/MINOR: quic: Incorrect peer address validation\n    - BUG/MINOR: quic: Non initialized variable in quic_build_post_handshake_frames()\n    - BUG/MINOR: quic: Wrong TX packet related counters handling\n    - MEDIUM: mqtt: support mqtt_is_valid and mqtt_field_value converters for MQTTv3.1\n    - DOC: config: Explictly add supported MQTT versions\n    - MINOR: quic: Add traces about stream TX buffer consumption\n    - MINOR: quic: Add traces in qc_set_timer() (scheduling)\n    - CLEANUP: mux-quic: change comment style to not mess with git conflict\n    - CLEANUP: mux-quic: adjust comment for coding-style\n    - MINOR: mux-quic: complete trace when stream is not found\n    - MINOR: mux-quic: add comments for send functions\n    - MINOR: mux-quic: use shorter name for flow-control fields\n    - MEDIUM: mux-quic: respect peer bidirectional stream data limit\n    - MEDIUM: mux-quic: respect peer connection data limit\n    - MINOR: mux-quic: support MAX_STREAM_DATA frame parsing\n    - MINOR: mux-quic: support MAX_DATA frame parsing\n    - BUILD: stream-int: avoid a build warning when DEBUG is empty\n    - BUG/MINOR: quic: Wrong buffer length passed to generate_retry_token()\n    - BUG/MINOR: tools: fix url2sa return value with IPv4\n    - MINOR: mux-quic: convert fin on push-frame as boolean\n    - BUILD: quic: add missing includes\n    - REORG: quic: use a dedicated quic_loss.c\n    - MINOR: mux-quic: declare the qmux trace module\n    - MINOR: mux-quic: replace printfs by traces\n    - MINOR: mux-quic: add trace event for frame sending\n    - MINOR: mux-quic: add trace event for qcs_push_frame\n    - MINOR: mux-quic: activate qmux traces on stdout via macro\n    - BUILD: qpack: fix unused value when not using DEBUG_HPACK\n    - CLEANUP: qpack: suppress by default stdout traces\n    - CLEANUP: h3: suppress by default stdout traces\n    - BUG/MINOR: tools: url2sa reads too far when no port nor path\n\n2022/03/11 : 2.6-dev3\n    - DEBUG: rename WARN_ON_ONCE() to CHECK_IF()\n    - DEBUG: improve BUG_ON output message accuracy\n    - DEBUG: implement 4 levels of choices between warn and crash.\n    - DEBUG: add two new macros to enable debugging in hot paths\n    - DEBUG: buf: replace some sensitive BUG_ON() with BUG_ON_HOT()\n    - DEBUG: buf: add BUG_ON_HOT() to most buffer management functions\n    - MINOR: channel: don't use co_set_data() to decrement output\n    - DEBUG: channel: add consistency checks using BUG_ON_HOT() in some key functions\n    - MINOR: conn-stream: Improve API to have safe/unsafe accessors\n    - MEDIUM: tree-wide: Use unsafe conn-stream API when it is relevant\n    - CLEANUP: stream-int: Make si_cs_send() function static\n    - REORG: stream-int: Uninline si_sync_recv() and make si_cs_recv() private\n    - BUG/MEDIUM: mux-fcgi: Don't rely on SI src/dst addresses for FCGI health-checks\n    - BUG/MEDIUM: htx: Fix a possible null derefs in htx_xfer_blks()\n    - REGTESTS: fix the race conditions in normalize_uri.vtc\n    - DEBUG: stream-int: Fix BUG_ON used to test appctx in si_applet_ops callbacks\n    - BUILD: debug: fix build warning on older compilers around DEBUG_STRICT_ACTION\n    - CLEANUP: connection: Indicate unreachability to the compiler in conn_recv_proxy\n    - MINOR: connection: Transform safety check in PROXYv2 parsing into BUG_ON()\n    - DOC: install: it's DEBUG_CFLAGS, not DEBUG, which is set to -g\n    - DOC: install: describe the DEP variable\n    - DOC: install: describe how to choose options used in the DEBUG variable\n    - MINOR: queue: Replace if() + abort() with BUG_ON()\n    - CLEANUP: adjust indentation in bidir STREAM handling function\n    - MINOR: quic: simplify copy of STREAM frames to RX buffer\n    - MINOR: quic: handle partially received buffered stream frame\n    - MINOR: mux-quic: define flag for last received frame\n    - BUG/MINOR: quic: support FIN on Rx-buffered STREAM frames\n    - MEDIUM: quic: rearchitecture Rx path for bidirectional STREAM frames\n    - REGTESTS: fix the race conditions in secure_memcmp.vtc\n    - CLEANUP: stream: Remove useless tests on conn-stream in stream_dump()\n    - BUILD: ssl: another build warning on LIBRESSL_VERSION_NUMBER\n    - MINOR: quic: Ensure PTO timer is not set in the past\n    - MINOR: quic: Post handshake I/O callback switching\n    - MINOR: quic: Drop the packets of discarded packet number spaces\n    - CLEANUP: quic: Useless tests in qc_try_rm_hp()\n    - CLEANUP: quic: Indentation fix in qc_prep_pkts()\n    - MINOR: quic: Assemble QUIC TLS flags at the same level\n    - BUILD: conn_stream: avoid null-deref warnings on gcc 6\n    - BUILD: connection: do not declare register_mux_proto() inline\n    - BUILD: http_rules: do not declare http_*_keywords_registre() inline\n    - BUILD: trace: do not declare trace_registre_source() inline\n    - BUILD: tcpcheck: do not declare tcp_check_keywords_register() inline\n    - DEBUG: reduce the footprint of BUG_ON() calls\n    - BUG/MEDIUM: httpclient/lua: infinite appctx loop with POST\n    - BUG/MINOR: pool: always align pool_heads to 64 bytes\n    - DEV: udp: add a tiny UDP proxy for testing\n    - DEV: udp: implement pseudo-random reordering/loss\n    - DEV: udp: add an optional argument to set the prng seed\n    - BUG/MINOR: quic: fix segfault on CC if mux uninitialized\n    - BUG/MEDIUM: pools: fix ha_free() on area in the process of being freed\n    - CLEANUP: tree-wide: remove a few rare non-ASCII chars\n    - CI: coverity: simplify debugging options\n    - CLEANUP: quic: complete ABORT_NOW with a TODO comment\n    - MINOR: quic: qc_prep_app_pkts() implementation\n    - MINOR: quic: Send short packet from a frame list\n    - MINOR: quic: Make qc_build_frms() build ack-eliciting frames from a list\n    - MINOR: quic: Export qc_send_app_pkts()\n    - MINOR: mux-quic: refactor transport parameters init\n    - MINOR: mux-quic: complete functions to detect stream type\n    - MINOR: mux-quic: define new unions for flow-control fields\n    - MEDIUM: mux-quic: use direct send transport API for STREAMs\n    - MINOR: mux-quic: retry send opportunistically for remaining frames\n    - MEDIUM: mux-quic: implement MAX_STREAMS emission for bidir streams\n    - BUILD: fix kFreeBSD build.\n    - MINOR: quic: Retry on qc_build_pkt() failures\n    - BUG/MINOR: quic: Missing recovery start timer reset\n    - CLEANUP: quic: Remove QUIC path manipulations out of the congestion controller\n    - MINOR: quic: Add a \"slow start\" callback to congestion controller\n    - MINOR: quic: Persistent congestion detection outside of controllers\n    - CLEANUP: quic: Remove useless definitions from quic_cc_event struct\n    - BUG/MINOR: quic: Confusion betwen \"in_flight\" and \"prep_in_flight\" in quic_path_prep_data()\n    - MINOR: quic: More precise window update calculation\n    - CLEANUP: quic: Remove window redundant variable from NewReno algorithm state struct\n    - MINOR: quic: Add quic_max_int_by_size() function\n    - BUG/MAJOR: quic: Wrong quic_max_available_room() returned value\n    - MINOR: pools: add a new global option \"no-memory-trimming\"\n    - BUG/MINOR: add missing modes in proxy_mode_str()\n    - BUG/MINOR: cli: shows correct mode in \"show sess\"\n    - BUG/MEDIUM: quic: do not drop packet on duplicate stream/decoding error\n    - MINOR: stats: Add dark mode support for socket rows\n    - BUILD: fix recent build breakage of freebsd caused by kFreeBSD build fix\n    - BUG/MINOR: httpclient: Set conn-stream/channel EOI flags at the end of request\n    - BUG/MINOR: hlua: Set conn-stream/channel EOI flags at the end of request\n    - BUG/MINOR: stats: Set conn-stream/channel EOI flags at the end of request\n    - BUG/MINOR: cache: Set conn-stream/channel EOI flags at the end of request\n    - BUG/MINOR: promex: Set conn-stream/channel EOI flags at the end of request\n    - BUG/MEDIUM: stream: Use the front analyzers for new listener-less streams\n    - DEBUG: cache: Update underlying buffer when loading HTX message in cache applet\n    - BUG/MEDIUM: mcli: Properly handle errors and timeouts during reponse processing\n    - DEBUG: stream: Add the missing descriptions for stream trace events\n    - DEBUG: stream: Fix stream trace message to print response buffer state\n    - MINOR: proxy: Store monitor_uri as a `struct ist`\n    - MINOR: proxy: Store fwdfor_hdr_name as a `struct ist`\n    - MINOR: proxy: Store orgto_hdr_name as a `struct ist`\n    - MEDIUM: proxy: Store server_id_hdr_name as a `struct ist`\n    - CLEANUP: fcgi: Replace memcpy() on ist by istcat()\n    - CLEANUP: fcgi: Use `istadv()` in `fcgi_strm_send_params`\n    - BUG/MAJOR: mux-pt: Always destroy the backend connection on detach\n    - DOC: sample fetch methods: move distcc_* to the right locations\n    - MINOR: rules: record the last http/tcp rule that gave a final verdict\n    - MINOR: stream: add \"last_rule_file\" and \"last_rule_line\" samples\n    - BUG/MINOR: session: fix theoretical risk of memleak in session_accept_fd()\n    - MINOR: quic: Add max_idle_timeout advertisement handling\n    - MEDIUM: quic: Remove the QUIC connection reference counter\n    - BUG/MINOR: quic: ACK_REQUIRED and ACK_RECEIVED flag collision\n    - BUG/MINOR: quic: Missing check when setting the anti-amplification limit as reached\n    - MINOR: quic: Add a function to compute the current PTO\n    - MEDIUM: quic: Implement the idle timeout feature\n    - BUG/MEDIUM: quic: qc_prep_app_pkts() retries on qc_build_pkt() failures\n    - CLEANUP: quic: Comments fix for qc_prep_(app)pkts() functions\n    - MINOR: mux-quic: prevent push frame for unidir streams\n    - MINOR: mux-quic: improve opportunistic retry sending for STREAM frames\n    - MINOR: quic: implement sending confirmation\n    - MEDIUM: mux-quic: improve bidir STREAM frames sending\n    - MEDIUM: check: do not auto configure SSL/PROXY for dynamic servers\n    - REGTESTS: server: test SSL/PROXY with checks for dynamic servers\n    - MEDIUM: server: remove experimental-mode for dynamic servers\n    - BUG/MINOR: buffer: fix debugging condition in b_peek_varint()\n\n2022/02/25 : 2.6-dev2\n    - DOC: management: rework the Master CLI section\n    - DOC: management: add expert and experimental mode in 9.4.1\n    - CLEANUP: cleanup a commentary in pcli_parse_request()\n    - BUG/MINOR: mworker/cli: don't display help on master applet\n    - MINOR: mworker/cli: mcli-debug-mode enables every command\n    - MINOR: mworker/cli: add flags in the prompt\n    - BUG/MINOR: httpclient: Revisit HC request and response buffers allocation\n    - BUG/MEDIUM: httpclient: Xfer the request when the stream is created\n    - MINOR: httpclient: Don't limit data transfer to 1024 bytes\n    - BUILD: ssl: adjust guard for X509_get_X509_PUBKEY(x)\n    - REGTESTS: ssl: skip show_ssl_ocspresponse.vtc when BoringSSL is used\n    - MINOR: quic: Do not modify a marked as consumed datagram\n    - MINOR: quic: Wrong datagram buffer passed to quic_lstnr_dgram_dispatch()\n    - MINOR: quic: Remove a useless test in quic_get_dgram_dcid()\n    - BUG/MINOR: ssl: Remove empty lines from \"show ssl ocsp-response <id>\" output\n    - CLEANUP: ssl: Remove unused ssl_sock_create_cert function\n    - MINOR: ssl: Use high level OpenSSL APIs in sha2 converter\n    - MINOR: ssl: Remove EC_KEY related calls when preparing SSL context\n    - REGTESTS: ssl: Add test for \"curves\" and \"ecdhe\" SSL options\n    - MINOR: ssl: Remove EC_KEY related calls when creating a certificate\n    - REGTESTS: ssl: Add test for \"generate-certificates\" SSL option\n    - MINOR: ssl: Remove call to SSL_CTX_set_tlsext_ticket_key_cb with OpenSSLv3\n    - MINOR: ssl: Remove call to HMAC_Init_ex with OpenSSLv3\n    - MINOR: h3: hardcode the stream id of control stream\n    - MINOR: mux-quic: remove quic_transport_params_update\n    - MINOR: quic: rename local tid variable\n    - MINOR: quic: remove unused xprt rcv_buf operation\n    - MINOR: quic: take out xprt snd_buf operation\n    - CI: enable QUIC for Coverity scan\n    - BUG/MINOR: mworker: does not erase the pidfile upon reload\n    - MINOR: ssl: Remove call to ERR_func_error_string with OpenSSLv3\n    - MINOR: ssl: Remove call to ERR_load_SSL_strings with OpenSSLv3\n    - REGTESTS: ssl: Add tests for DH related options\n    - MINOR: ssl: Create HASSL_DH wrapper structure\n    - MINOR: ssl: Add ssl_sock_get_dh_from_bio helper function\n    - MINOR: ssl: Factorize ssl_get_tmp_dh and append a cbk to its name\n    - MINOR: ssl: Add ssl_sock_set_tmp_dh helper function\n    - MINOR: ssl: Add ssl_sock_set_tmp_dh_from_pkey helper function\n    - MINOR: ssl: Add ssl_new_dh_fromdata helper function\n    - MINOR: ssl: Build local DH of right size when needed\n    - MINOR: ssl: Set default dh size to 2048\n    - MEDIUM: ssl: Replace all DH objects by EVP_PKEY on OpenSSLv3 (via HASSL_DH type)\n    - MINOR: ssl: Remove calls to SSL_CTX_set_tmp_dh_callback on OpenSSLv3\n    - MINOR: quic: Remove an RX buffer useless lock\n    - MINOR: quic: Variable used before being checked in ha_quic_add_handshake_data()\n    - MINOR: quic: EINTR error ignored\n    - MINOR: quic: Potential overflow expression in qc_parse_frm()\n    - MINOR: quic: Possible overflow in qpack_get_varint()\n    - CLEANUP: h3: Unreachable target in h3_uqs_init()\n    - MINOR: quic: Possible memleak in qc_new_conn()\n    - MINOR: quic: Useless statement in quic_crypto_data_cpy()\n    - BUG/MEDIUM: pools: ensure items are always large enough for the pool_cache_item\n    - BUG/MINOR: pools: always flush pools about to be destroyed\n    - CLEANUP: pools: don't needlessly set a call mark during refilling of caches\n    - DEBUG: pools: add extra sanity checks when picking objects from a local cache\n    - DEBUG: pools: let's add reverse mapping from cache heads to thread and pool\n    - DEBUG: pools: replace the link pointer with the caller's address on pool_free()\n    - BUG/MAJOR: sched: prevent rare concurrent wakeup of multi-threaded tasks\n    - MINOR: quic: use a global dghlrs for each thread\n    - BUG/MEDIUM: quic: fix crash on CC if mux not present\n    - MINOR: qpack: fix typo in trace\n    - BUG/MINOR: quic: fix FIN stream signaling\n    - BUG/MINOR: h3: fix the header length for QPACK decoding\n    - MINOR: h3: remove transfer-encoding header\n    - MINOR: h3: add documentation on h3_decode_qcs\n    - MINOR: h3: set properly HTX EOM/BODYLESS on HEADERS parsing\n    - MINOR: mux-quic: implement rcv_buf\n    - MINOR: mux-quic: set EOS on rcv_buf\n    - MINOR: h3: set CS_FL_NOT_FIRST\n    - MINOR: h3: report frames bigger than rx buffer\n    - MINOR: h3: extract HEADERS parsing in a dedicated function\n    - MINOR: h3: implement DATA parsing\n    - MINOR: quic: Wrong smoothed rtt initialization\n    - MINOR: quic: Wrong loss delay computation\n    - MINOR: quic: Code never reached in qc_ssl_sess_init()\n    - MINOR: quic: ha_quic_set_encryption_secrets without server specific code\n    - MINOR: quic: Avoid warning about NULL pointer dereferences\n    - MINOR: quic: Useless test in quic_lstnr_dghdlr()\n    - MINOR: quic: Non checked returned value for cs_new() in hq_interop_decode_qcs()\n    - MINOR: h3: Dead code in h3_uqs_init()\n    - MINOR: quic: Non checked returned value for cs_new() in h3_decode_qcs()\n    - MINOR: quic: Possible frame parsers array overrun\n    - MINOR: quic: Do not retransmit too much packets.\n    - MINOR: quic: Move quic_rxbuf_pool pool out of xprt part\n    - MINOR: h3: report error on HEADERS/DATA parsing\n    - BUG/MINOR: jwt: Double free in deinit function\n    - BUG/MINOR: jwt: Missing pkey free during cleanup\n    - BUG/MINOR: jwt: Memory leak if same key is used in multiple jwt_verify calls\n    - BUG/MINOR: httpclient/cli: display junk characters in vsn\n    - MINOR: h3: remove unused return value on decode_qcs\n    - BUG/MAJOR: http/htx: prevent unbounded loop in http_manage_server_side_cookies\n    - BUG/MAJOR: spoe: properly detach all agents when releasing the applet\n    - REGTESTS: server: close an occasional race on dynamic_server_ssl.vtc\n    - REGTESTS: peers: leave a bit more time to peers to synchronize\n    - BUG/MEDIUM: h2/hpack: fix emission of HPACK DTSU after settings change\n    - BUG/MINOR: mux-h2: update the session's idle delay before creating the stream\n    - BUG/MINOR: httpclient: reinit flags in httpclient_start()\n    - BUG/MINOR: mailers: negotiate SMTP, not ESMTP\n    - MINOR: httpclient: sets an alternative destination\n    - MINOR: httpclient/lua: add 'dst' optionnal field\n    - BUG/MINOR: ssl: Add missing return value check in ssl_ocsp_response_print\n    - BUG/MINOR: ssl: Fix leak in \"show ssl ocsp-response\" CLI command\n    - BUG/MINOR: ssl: Missing return value check in ssl_ocsp_response_print\n    - CLEANUP: httpclient/cli: fix indentation alignment of the help message\n    - BUG/MINOR: tools: url2sa reads ipv4 too far\n    - BUG/MEDIUM: httpclient: limit transfers to the maximum available room\n    - DEBUG: buffer: check in __b_put_blk() whether the buffer room is respected\n    - MINOR: mux-quic: fix a possible null dereference in qc_timeout_task\n    - BUG/MEDIUM: htx: Be sure to have a buffer to perform a raw copy of a message\n    - BUG/MEDIUM: mux-h1: Don't wake h1s if mux is blocked on lack of output buffer\n    - BUG/MAJOR: mux-h2: Be sure to always report HTX parsing error to the app layer\n    - DEBUG: stream-int: Check CS_FL_WANT_ROOM is not set with an empty input buffer\n    - MINOR: quic: do not modify offset node if quic_rx_strm_frm in tree\n    - MINOR: h3: fix compiler warning variable set but not used\n    - MINOR: mux-quic: fix uninitialized return on qc_send\n    - MINOR: quic: fix handling of out-of-order received STREAM frames\n    - MINOR: pools: mark most static pool configuration variables as read-mostly\n    - CLEANUP: pools: remove the now unused pool_is_crowded()\n    - REGTESTS: fix the race conditions in 40be_2srv_odd_health_checks\n    - BUG/MEDIUM: stream: Abort processing if response buffer allocation fails\n    - MINOR: httpclient/lua: ability to set a server timeout\n    - BUG/MINOR: httpclient/lua: missing pop for new timeout parameter\n    - DOC: httpclient/lua: fix the type of the dst parameter\n    - CLEANUP: httpclient: initialize the client in stage INIT not REGISTER\n    - CLEANUP: muxes: do not use a dynamic trash in list_mux_protos()\n    - CLEANUP: vars: move the per-process variables initialization to vars.c\n    - CLEANUP: init: remove the ifdef on HAPROXY_MEMMAX\n    - MINOR: pools: disable redundant poisonning on pool_free()\n    - MINOR: pools: introduce a new pool_debugging global variable\n    - MINOR: pools: switch the fail-alloc test to runtime only\n    - MINOR: pools: switch DEBUG_DONT_SHARE_POOLS to runtime\n    - MINOR: pools: add a new debugging flag POOL_DBG_COLD_FIRST\n    - MINOR: pools: add a new debugging flag POOL_DBG_INTEGRITY\n    - MINOR: pools: make the global pools a runtime option.\n    - MEDIUM: pools: replace CONFIG_HAP_POOLS with a runtime \"NO_CACHE\" flag.\n    - MINOR: pools: store the allocated size for each pool\n    - MINOR: pools: get rid of POOL_EXTRA\n    - MINOR: pools: replace DEBUG_POOL_TRACING with runtime POOL_DBG_CALLER\n    - MINOR: pools: replace DEBUG_MEMORY_POOLS with runtime POOL_DBG_TAG\n    - MINOR: pools: add a debugging flag for memory poisonning option\n    - MEDIUM: initcall: move STG_REGISTER earlier\n    - MEDIUM: init: split the early initialization in its own function\n    - MINOR: init: extract args parsing to their own function\n    - MEDIUM: init: handle arguments earlier\n    - MINOR: pools: delegate parsing of command line option -dM to a new function\n    - MINOR: pools: support setting debugging options using -dM\n    - BUILD: makefile: enable both DEBUG_STRICT and DEBUG_MEMORY_POOLS by default\n    - CI: github: enable pool debugging by default\n    - DOC: Fix usage/examples of deprecated ACLs\n    - DOC: internal: update the pools API to mention boot-time settings\n    - DOC: design: add design thoughts for later simplification of the pools\n    - DOC: design: commit the temporary design notes on thread groups\n    - MINOR: stream-int: Handle appctx case first when releasing the endpoint\n    - MINOR: connection: Be prepared to handle conn-stream with no connection\n    - MINOR: stream: Handle appctx case first when creating a new stream\n    - MINOR: connection: Add a function to detach a conn-stream from the connection\n    - MINOR: stream-int: Add function to reset a SI endpoint\n    - MINOR: stream-int: Add function to attach a connection to a SI\n    - MINOR: stream-int: Be able to allocate a CS without connection\n    - MEDIUM: stream: No longer release backend conn-stream on connection retry\n    - MEDIUM: stream: Allocate backend CS when the stream is created\n    - REORG: conn_stream: move conn-stream stuff in dedicated files\n    - MEDIUM: conn-stream: No longer access connection field directly\n    - MEDIUM: conn-stream: Be prepared to use an appctx as conn-stream endpoint\n    - MAJOR: conn_stream/stream-int: move the appctx to the conn-stream\n    - MEDIUM: applet: Set the conn-stream as appctx owner instead of the stream-int\n    - MEDIUM: conn_stream: Add a pointer to the app object into the conn-stream\n    - MINOR: stream: Add pointer to front/back conn-streams into stream struct\n    - MINOR: stream: Slightly rework stream_new to separate CS/SI initialization\n    - MINOR: stream-int: Always access the stream-int via the conn-stream\n    - MINOR: backend: Always access the stream-int via the conn-stream\n    - MINOR: stream: Always access the stream-int via the conn-stream\n    - MINOR: http-ana: Always access the stream-int via the conn-stream\n    - MINOR: cli: Always access the stream-int via the conn-stream\n    - MINOR: log: Always access the stream-int via the conn-stream\n    - MINOR: frontend: Always access the stream-int via the conn-stream\n    - MINOR: proxy: Always access the stream-int via the conn-stream\n    - MINOR: peers: Always access the stream-int via the conn-stream\n    - MINOR: debug: Always access the stream-int via the conn-stream\n    - MINOR: hlua: Always access the stream-int via the conn-stream\n    - MINOR: cache: Always access the stream-int via the conn-stream\n    - MINOR: dns: Always access the stream-int via the conn-stream\n    - MINOR: http-act: Always access the stream-int via the conn-stream\n    - MINOR: httpclient: Always access the stream-int via the conn-stream\n    - MINOR: tcp-act: Always access the stream-int via the conn-stream\n    - MINOR: sink: Always access the stream-int via the conn-stream\n    - MINOR: conn-stream: Rename cs_detach() to cs_detach_endp()\n    - CLEANUP: conn-stream: Don't export conn-stream pool\n    - MAJOR: stream/conn_stream: Move the stream-interface into the conn-stream\n    - CLEANUP: stream-int: rename si_reset() to si_init()\n    - MINOR: conn-stream: Release a CS when both app and endp are detached\n    - MINOR: stream: Don't destroy conn-streams but detach app and endp\n    - MAJOR: check: Use a persistent conn-stream for health-checks\n    - CLEANUP: conn-stream: Remove cs_destroy()\n    - CLEANUP: backend: Don't export connect_server anymore\n    - BUG/MINOR: h3/hq_interop: Fix CS and stream creation\n    - BUILD: tree-wide: Avoid warnings about undefined entities retrieved from a CS\n    - BUG/MINOR: proxy: preset the error message pointer to NULL in parse_new_proxy()\n    - BUG/MEDIUM: quic: fix received ACK stream calculation\n    - BUILD: stream: fix build warning with older compilers\n    - BUG/MINOR: debug: fix get_tainted() to properly read an atomic value\n    - DEBUG: move the tainted stuff to bug.h for easier inclusion\n    - DEBUG: cleanup back trace generation\n    - DEBUG: cleanup BUG_ON() configuration\n    - DEBUG: mark ABORT_NOW() as unreachable\n    - DBEUG: add a new WARN_ON() macro\n    - DEBUG: make the _BUG_ON() macro return the condition\n    - DEBUG: add a new WARN_ON_ONCE() macro\n    - DEBUG: report BUG_ON() and WARN_ON() in the tainted flags\n    - MINOR: quic: adjust buffer handling for STREAM transmission\n    - MINOR: quic: liberate the TX stream buffer after ACK processing\n    - MINOR: quic: add a TODO for a memleak frame on ACK consume\n\n2022/02/01 : 2.6-dev1\n    - BUG/MINOR: cache: Fix loop on cache entries in \"show cache\"\n    - BUG/MINOR: httpclient: allow to replace the host header\n    - BUG/MINOR: lua: don't expose internal proxies\n    - MEDIUM: mworker: seamless reload use the internal sockpairs\n    - BUG/MINOR: lua: remove loop initial declarations\n    - BUG/MINOR: mworker: does not add the -sf in wait mode\n    - BUG/MEDIUM: mworker: FD leak of the eventpoll in wait mode\n    - MINOR: quic: do not reject PADDING followed by other frames\n    - REORG: quic: add comment on rare thread concurrence during CID alloc\n    - CLEANUP: quic: add comments on CID code\n    - MEDIUM: quic: handle CIDs to rattach received packets to connection\n    - MINOR: qpack: support litteral field line with non-huff name\n    - MINOR: quic: activate QUIC traces at compilation\n    - MINOR: quic: use more verbose QUIC traces set at compile-time\n    - MEDIUM: pool: refactor malloc_trim/glibc and jemalloc api addition detections.\n    - MEDIUM: pool: support purging jemalloc arenas in trim_all_pools()\n    - BUG/MINOR: mworker: deinit of thread poller was called when not initialized\n    - BUILD: pools: only detect link-time jemalloc on ELF platforms\n    - CI: github actions: add the output of $CC -dM -E-\n    - BUG/MEDIUM: cli: Properly set stream analyzers to process one command at a time\n    - BUILD: evports: remove a leftover from the dead_fd cleanup\n    - MINOR: quic: Set \"no_application_protocol\" alert\n    - MINOR: quic: More accurate immediately close.\n    - MINOR: quic: Immediately close if no transport parameters extension found\n    - MINOR: quic: Rename qc_prep_hdshk_pkts() to qc_prep_pkts()\n    - MINOR: quic: Possible crash when inspecting the xprt context\n    - MINOR: quic: Dynamically allocate the secrete keys\n    - MINOR: quic: Add a function to derive the key update secrets\n    - MINOR: quic: Add structures to maintain key phase information\n    - MINOR: quic: Optional header protection key for quic_tls_derive_keys()\n    - MINOR: quic: Add quic_tls_key_update() function for Key Update\n    - MINOR: quic: Enable the Key Update process\n    - MINOR: quic: Delete the ODCIDs asap\n    - BUG/MINOR: vars: Fix the set-var and unset-var converters\n    - MEDIUM: pool: Following up on previous pool trimming update.\n    - BUG/MEDIUM: mux-h1: Fix splicing by properly detecting end of message\n    - BUG/MINOR: mux-h1: Fix splicing for messages with unknown length\n    - MINOR: mux-h1: Improve H1 traces by adding info about http parsers\n    - MINOR: mux-h1: register a stats module\n    - MINOR: mux-h1: add counters instance to h1c\n    - MINOR: mux-h1: count open connections/streams on stats\n    - MINOR: mux-h1: add stat for total count of connections/streams\n    - MINOR: mux-h1: add stat for total amount of bytes received and sent\n    - REGTESTS: h1: Add a script to validate H1 splicing support\n    - BUG/MINOR: server: Don't rely on last default-server to init server SSL context\n    - BUG/MEDIUM: resolvers: Detach query item on response error\n    - MEDIUM: resolvers: No longer store query items in a list into the response\n    - BUG/MAJOR: segfault using multiple log forward sections.\n    - BUG/MEDIUM: h1: Properly reset h1m flags when headers parsing is restarted\n    - BUG/MINOR: resolvers: Don't overwrite the error for invalid query domain name\n    - BUILD: bug: Fix error when compiling with -DDEBUG_STRICT_NOCRASH\n    - BUG/MEDIUM: sample: Fix memory leak in sample_conv_jwt_member_query\n    - DOC: spoe: Clarify use of the event directive in spoe-message section\n    - DOC: config: Specify %Ta is only available in HTTP mode\n    - BUILD: tree-wide: avoid warnings caused by redundant checks of obj_types\n    - IMPORT: slz: use the correct CRC32 instruction when running in 32-bit mode\n    - MINOR: quic: fix segfault on CONNECTION_CLOSE parsing\n    - MINOR: h3: add BUG_ON on control receive function\n    - MEDIUM: xprt-quic: finalize app layer initialization after ALPN nego\n    - MINOR: h3: remove duplicated FIN flag position\n    - MAJOR: mux-quic: implement a simplified mux version\n    - MEDIUM: mux-quic: implement release mux operation\n    - MEDIUM: quic: detect the stream FIN\n    - MINOR: mux-quic: implement subscribe on stream\n    - MEDIUM: mux-quic: subscribe on xprt if remaining data after send\n    - MEDIUM: mux-quic: wake up xprt on data transferred\n    - MEDIUM: mux-quic: handle when sending buffer is full\n    - MINOR: quic: RX buffer full due to wrong CRYPTO data handling\n    - MINOR: quic: Race issue when consuming RX packets buffer\n    - MINOR: quic: QUIC encryption level RX packets race issue\n    - MINOR: quic: Delete remaining RX handshake packets\n    - MINOR: quic: Remove QUIC TX packet length evaluation function\n    - MINOR: hq-interop: fix tx buffering\n    - MINOR: mux-quic: remove uneeded code to check fin on TX\n    - MINOR: quic: add HTX EOM on request end\n    - BUILD: mux-quic: fix compilation with DEBUG_MEM_STATS\n    - MINOR: http-rules: Add capture action to http-after-response ruleset\n    - BUG/MINOR: cli/server: Don't crash when a server is added with a custom id\n    - MINOR: mux-quic: do not release qcs if there is remaining data to send\n    - MINOR: quic: notify the mux on CONNECTION_CLOSE\n    - BUG/MINOR: mux-quic: properly initialize flow control\n    - MINOR: quic: Compilation fix for quic_rx_packet_refinc()\n    - MINOR: h3: fix possible invalid dereference on htx parsing\n    - DOC: config: retry-on list is space-delimited\n    - DOC: config: fix error-log-format example\n    - BUG/MEDIUM: mworker/cli: crash when trying to access an old PID in prompt mode\n    - MINOR: hq-interop: refix tx buffering\n    - REGTESTS: ssl: use X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY for cert check\n    - MINOR: cli: \"show version\" displays the current process version\n    - CLEANUP: cfgparse: modify preprocessor guards around numa detection code\n    - MEDIUM: cfgparse: numa detect topology on FreeBSD.\n    - BUILD: ssl: unbreak the build with newer libressl\n    - MINOR: vars: Move UPDATEONLY flag test to vars_set_ifexist\n    - MINOR: vars: Set variable type to ANY upon creation\n    - MINOR: vars: Delay variable content freeing in var_set function\n    - MINOR: vars: Parse optional conditions passed to the set-var converter\n    - MINOR: vars: Parse optional conditions passed to the set-var actions\n    - MEDIUM: vars: Enable optional conditions to set-var converter and actions\n    - DOC: vars: Add documentation about the set-var conditions\n    - REGTESTS: vars: Add new test for conditional set-var\n    - MINOR: quic: Attach timer task to thread for the connection.\n    - CLEANUP: quic_frame: Remove a useless suffix to STOP_SENDING\n    - MINOR: quic: Add traces for STOP_SENDING frame and modify others\n    - CLEANUP: quic: Remove cdata_len from quic_tx_packet struct\n    - MINOR: quic: Enable TLS 0-RTT if needed\n    - MINOR: quic: No TX secret at EARLY_DATA encryption level\n    - MINOR: quic: Add quic_set_app_ops() function\n    - MINOR: ssl_sock: Set the QUIC application from ssl_sock_advertise_alpn_protos.\n    - MINOR: quic: Make xprt support 0-RTT.\n    - MINOR: qpack: Missing check for truncated QPACK fields\n    - CLEANUP: quic: Comment fix for qc_strm_cpy()\n    - MINOR: hq_interop: Stop BUG_ON() truncated streams\n    - MINOR: quic: Do not mix packet number space and connection flags\n    - CLEANUP: quic: Shorten a litte bit the traces in lstnr_rcv_pkt()\n    - MINOR: mux-quic: fix trace on stream creation\n    - CLEANUP: quic: fix spelling mistake in a trace\n    - CLEANUP: quic: rename quic_conn conn to qc in quic_conn_free\n    - MINOR: quic: add missing lock on cid tree\n    - MINOR: quic: rename constant for haproxy CIDs length\n    - MINOR: quic: refactor concat DCID with address for Initial packets\n    - MINOR: quic: compare coalesced packets by DCID\n    - MINOR: quic: refactor DCID lookup\n    - MINOR: quic: simplify the removal from ODCID tree\n    - REGTESTS: vars: Remove useless ssl tunes from conditional set-var test\n    - MINOR: ssl: Remove empty lines from \"show ssl ocsp-response\" output\n    - MINOR: quic: Increase the RX buffer for each connection\n    - MINOR: quic: Add a function to list remaining RX packets by encryption level\n    - MINOR: quic: Stop emptying the RX buffer asap.\n    - MINOR: quic: Do not expect to receive only one O-RTT packet\n    - MINOR: quic: Do not forget STREAM frames received in disorder\n    - MINOR: quic: Wrong packet refcount handling in qc_pkt_insert()\n    - DOC: fix misspelled keyword \"resolve_retries\" in resolvers\n    - CLEANUP: quic: rename quic_conn instances to qc\n    - REORG: quic: move mux function outside of xprt\n    - MINOR: quic: add reference to quic_conn in ssl context\n    - MINOR: quic: add const qualifier for traces function\n    - MINOR: trace: add quic_conn argument definition\n    - MINOR: quic: use quic_conn as argument to traces\n    - MINOR: quic: add quic_conn instance in traces for qc_new_conn\n    - MINOR: quic: Add stream IDs to qcs_push_frame() traces\n    - MINOR: quic: unchecked qc_retrieve_conn_from_cid() returned value\n    - MINOR: quic: Wrong dropped packet skipping\n    - MINOR: quic: Handle the cases of overlapping STREAM frames\n    - MINOR: quic: xprt traces fixes\n    - MINOR: quic: Drop asap Retry or Version Negotiation packets\n    - MINOR: pools: work around possibly slow malloc_trim() during gc\n    - DEBUG: ssl: make sure we never change a servername on established connections\n    - MINOR: quic: Add traces for RX frames (flow control related)\n    - MINOR: quic: Add CONNECTION_CLOSE phrase to trace\n    - REORG: quic: remove qc_ prefix on functions which not used it directly\n    - BUG/MINOR: quic: upgrade rdlock to wrlock for ODCID removal\n    - MINOR: quic: remove unnecessary call to free_quic_conn_cids()\n    - MINOR: quic: store ssl_sock_ctx reference into quic_conn\n    - MINOR: quic: remove unnecessary if in qc_pkt_may_rm_hp()\n    - MINOR: quic: replace usage of ssl_sock_ctx by quic_conn\n    - MINOR: quic: delete timer task on quic_close()\n    - MEDIUM: quic: implement refcount for quic_conn\n    - BUG/MINOR: quic: fix potential null dereference\n    - BUG/MINOR: quic: fix potential use of uninit pointer\n    - BUG/MEDIUM: backend: fix possible sockaddr leak on redispatch\n    - BUG/MEDIUM: peers: properly skip conn_cur from incoming messages\n    - CI: Github Actions: do not show VTest failures if build failed\n    - BUILD: opentracing: display warning in case of using OT_USE_VARS at compile time\n    - MINOR: compat: detect support for dl_iterate_phdr()\n    - MINOR: debug: add ability to dump loaded shared libraries\n    - MINOR: debug: add support for -dL to dump library names at boot\n    - BUG/MEDIUM: ssl: initialize correctly ssl w/ default-server\n    - REGTESTS: ssl: fix ssl_default_server.vtc\n    - BUG/MINOR: ssl: free the fields in srv->ssl_ctx\n    - BUG/MEDIUM: ssl: free the ckch instance linked to a server\n    - REGTESTS: ssl: update of a crt with server deletion\n    - BUILD/MINOR: cpuset FreeBSD 14 build fix.\n    - MINOR: pools: always evict oldest objects first in pool_evict_from_local_cache()\n    - DOC: pool: document the purpose of various structures in the code\n    - CLEANUP: pools: do not use the extra pointer to link shared elements\n    - CLEANUP: pools: get rid of the POOL_LINK macro\n    - MINOR: pool: allocate from the shared cache through the local caches\n    - CLEANUP: pools: group list updates in pool_get_from_cache()\n    - MINOR: pool: rely on pool_free_nocache() in pool_put_to_shared_cache()\n    - MINOR: pool: make pool_is_crowded() always true when no shared pools are used\n    - MINOR: pool: check for pool's fullness outside of pool_put_to_shared_cache()\n    - MINOR: pool: introduce pool_item to represent shared pool items\n    - MINOR: pool: add a function to estimate how many may be released at once\n    - MEDIUM: pool: compute the number of evictable entries once per pool\n    - MINOR: pools: prepare pool_item to support chained clusters\n    - MINOR: pools: pass the objects count to pool_put_to_shared_cache()\n    - MEDIUM: pools: centralize cache eviction in a common function\n    - MEDIUM: pools: start to batch eviction from local caches\n    - MEDIUM: pools: release cached objects in batches\n    - OPTIM: pools: reduce local pool cache size to 512kB\n    - CLEANUP: assorted typo fixes in the code and comments This is 29th iteration of typo fixes\n    - CI: github actions: update OpenSSL to 3.0.1\n    - BUILD/MINOR: tools: solaris build fix on dladdr.\n    - BUG/MINOR: cli: fix _getsocks with musl libc\n    - BUG/MEDIUM: http-ana: Preserve response's FLT_END analyser on L7 retry\n    - MINOR: quic: Wrong traces after rework\n    - MINOR: quic: Add trace about in flight bytes by packet number space\n    - MINOR: quic: Wrong first packet number space computation\n    - MINOR: quic: Wrong packet number space computation for PTO\n    - MINOR: quic: Wrong loss time computation in qc_packet_loss_lookup()\n    - MINOR: quic: Wrong ack_delay compution before calling quic_loss_srtt_update()\n    - MINOR: quic: Remove nb_pto_dgrams quic_conn struct member\n    - MINOR: quic: Wrong packet number space trace in qc_prep_pkts()\n    - MINOR: quic: Useless test in qc_prep_pkts()\n    - MINOR: quic: qc_prep_pkts() code moving\n    - MINOR: quic: Speeding up Handshake Completion\n    - MINOR: quic: Probe Initial packet number space more often\n    - MINOR: quic: Probe several packet number space upon timer expiration\n    - MINOR: quic: Comment fix.\n    - MINOR: quic: Improve qc_prep_pkts() flexibility\n    - MINOR: quic: Do not drop secret key but drop the CRYPTO data\n    - MINOR: quic: Prepare Handshake packets asap after completed handshake\n    - MINOR: quic: Flag asap the connection having reached the anti-amplification limit\n    - MINOR: quic: PTO timer too often reset\n    - MINOR: quic: Re-arm the PTO timer upon datagram receipt\n    - MINOR: proxy: add option idle-close-on-response\n    - MINOR: cpuset: switch to sched_setaffinity for FreeBSD 14 and above.\n    - CI: refactor spelling check\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUILD: makefile: add -Wno-atomic-alignment to work around clang abusive warning\n    - MINOR: quic: Only one CRYPTO frame by encryption level\n    - MINOR: quic: Missing retransmission from qc_prep_fast_retrans()\n    - MINOR: quic: Non-optimal use of a TX buffer\n    - BUG/MEDIUM: mworker: don't use _getsocks in wait mode\n    - BUG/MINOR: ssl: Store client SNI in SSL context in case of ClientHello error\n    - BUG/MAJOR: mux-h1: Don't decrement .curr_len for unsent data\n    - DOC: internals: document the pools architecture and API\n    - CI: github actions: clean default step conditions\n    - BUILD: cpuset: fix build issue on macos introduced by previous change\n    - MINOR: quic: Remaining TRACEs with connection as firt arg\n    - MINOR: quic: Reset ->conn quic_conn struct member when calling qc_release()\n    - MINOR: quic: Flag the connection as being attached to a listener\n    - MINOR: quic: Wrong CRYPTO frame concatenation\n    - MINOR: quid: Add traces quic_close() and quic_conn_io_cb()\n    - REGTESTS: ssl: Fix ssl_errors regtest with OpenSSL 1.0.2\n    - MINOR: quic: Do not dereference ->conn quic_conn struct member\n    - MINOR: quic: fix return of quic_dgram_read\n    - MINOR: quic: add config parse source file\n    - MINOR: quic: implement Retry TLS AEAD tag generation\n    - MEDIUM: quic: implement Initial token parsing\n    - MINOR: quic: define retry_source_connection_id TP\n    - MEDIUM: quic: implement Retry emission\n    - MINOR: quic: free xprt tasklet on its thread\n    - BUG/MEDIUM: connection: properly leave stopping list on error\n    - MINOR: pools: enable pools with DEBUG_FAIL_ALLOC as well\n    - MINOR: quic: As server, skip 0-RTT packet number space\n    - MINOR: quic: Do not wakeup the I/O handler before the mux is started\n    - BUG/MEDIUM: htx: Adjust length to add DATA block in an empty HTX buffer\n    - CI: github actions: use cache for OpenTracing\n    - BUG/MINOR: httpclient: don't send an empty body\n    - BUG/MINOR: httpclient: set default Accept and User-Agent headers\n    - BUG/MINOR: httpclient/lua: don't pop the lua stack when getting headers\n    - BUILD/MINOR: fix solaris build with clang.\n    - BUG/MEDIUM: server: avoid changing healthcheck ctx with set server ssl\n    - CI: refactor OpenTracing build script\n    - DOC: management: mark \"set server ssl\" as deprecated\n    - MEDIUM: cli: yield between each pipelined command\n    - MINOR: channel: add new function co_getdelim() to support multiple delimiters\n    - BUG/MINOR: cli: avoid O(bufsize) parsing cost on pipelined commands\n    - MEDIUM: h2/hpack: emit a Dynamic Table Size Update after settings change\n    - MINOR: quic: Retransmit the TX frames in the same order\n    - MINOR: quic: Remove the packet number space TX MT_LIST\n    - MINOR: quic: Splice the frames which could not be added to packets\n    - MINOR: quic: Add the number of TX bytes to traces\n    - CLEANUP: quic: Replace <nb_pto_dgrams> by <probe>\n    - MINOR: quic: Send two ack-eliciting packets when probing packet number spaces\n    - MINOR: quic: Probe regardless of the congestion control\n    - MINOR: quic: Speeding up handshake completion\n    - MINOR: quic: Release RX Initial packets asap\n    - MINOR: quic: Release asap TX frames to be transmitted\n    - MINOR: quic: Probe even if coalescing\n    - BUG/MEDIUM: cli: Never wait for more data on client shutdown\n    - BUG/MEDIUM: mcli: do not try to parse empty buffers\n    - BUG/MEDIUM: mcli: always realign wrapping buffers before parsing them\n    - BUG/MINOR: stream: make the call_rate only count the no-progress calls\n    - MINOR: quic: do not use quic_conn after dropping it\n    - MINOR: quic: adjust quic_conn refcount decrement\n    - MINOR: quic: fix race-condition on xprt tasklet free\n    - MINOR: quic: free SSL context on quic_conn free\n    - MINOR: quic: Add QUIC_FT_RETIRE_CONNECTION_ID parsing case\n    - MINOR: quic: Wrong packet number space selection\n    - DEBUG: pools: add new build option DEBUG_POOL_INTEGRITY\n    - MINOR: quic: add missing include in quic_sock\n    - MINOR: quic: fix indentation in qc_send_ppkts\n    - MINOR: quic: remove dereferencement of connection when possible\n    - MINOR: quic: set listener accept cb on parsing\n    - MEDIUM: quic/ssl: add new ex data for quic_conn\n    - MINOR: quic: initialize ssl_sock_ctx alongside the quic_conn\n    - MINOR: ssl: fix build in release mode\n    - MINOR: pools: partially uninline pool_free()\n    - MINOR: pools: partially uninline pool_alloc()\n    - MINOR: pools: prepare POOL_EXTRA to be split into multiple extra fields\n    - MINOR: pools: extend pool_cache API to pass a pointer to a caller\n    - DEBUG: pools: add new build option DEBUG_POOL_TRACING\n    - DEBUG: cli: add a new \"debug dev fd\" expert command\n    - MINOR: fd: register the write side of the poller pipe as well\n    - CI: github actions: use cache for SSL libs\n    - BUILD: debug/cli: condition test of O_ASYNC to its existence\n    - BUILD: pools: fix build error on DEBUG_POOL_TRACING\n    - MINOR: quic: refactor header protection removal\n    - MINOR: quic: handle app data according to mux/connection layer status\n    - MINOR: quic: refactor app-ops initialization\n    - MINOR: receiver: define a flag for local accept\n    - MEDIUM: quic: flag listener for local accept\n    - MINOR: quic: do not manage connection in xprt snd_buf\n    - MINOR: quic: remove wait handshake/L6 flags on init connection\n    - MINOR: listener: add flags field\n    - MINOR: quic: define QUIC flag on listener\n    - MINOR: quic: create accept queue for QUIC connections\n    - MINOR: listener: define per-thr struct\n    - MAJOR: quic: implement accept queue\n    - CLEANUP: mworker: simplify mworker_free_child()\n    - BUILD/DEBUG: lru: update the standalone code to support the revision\n    - DEBUG: lru: use a xorshift generator in the testing code\n    - BUG/MAJOR: compiler: relax alignment constraints on certain structures\n    - BUG/MEDIUM: fd: always align fdtab[] to 64 bytes\n    - MINOR: quic: No DCID length for datagram context\n    - MINOR: quic: Comment fix about the token found in Initial packets\n    - MINOR: quic: Get rid of a struct buffer in quic_lstnr_dgram_read()\n    - MINOR: quic: Remove the QUIC haproxy server packet parser\n    - MINOR: quic: Add new defintion about DCIDs offsets\n    - MINOR: quic: Add a list to QUIC sock I/O handler RX buffer\n    - MINOR: quic: Allocate QUIC datagrams from sock I/O handler\n    - MINOR: proto_quic: Allocate datagram handlers\n    - MINOR: quic: Pass CID as a buffer to quic_get_cid_tid()\n    - MINOR: quic: Convert quic_dgram_read() into a task\n    - CLEANUP: quic: Remove useless definition\n    - MINOR: proto_quic: Wrong allocations for TX rings and RX bufs\n    - MINOR: quic: Do not consume the RX buffer on QUIC sock i/o handler side\n    - MINOR: quic: Do not reset a full RX buffer\n    - MINOR: quic: Attach all the CIDs to the same connection\n    - MINOR: quic: Make usage of by datagram handler trees\n    - MEDIUM: da: new optional data file download scheduler service.\n    - MEDIUM: da: update doc and build for new scheduler mode service.\n    - MEDIUM: da: update module to handle schedule mode.\n    - MINOR: quic: Drop Initial packets with wrong ODCID\n    - MINOR: quic: Wrong RX buffer tail handling when no more contiguous data\n    - MINOR: quic: Iterate over all received datagrams\n    - MINOR: quic: refactor quic CID association with threads\n    - BUG/MEDIUM: resolvers: Really ignore trailing dot in domain names\n    - DEV: flags: Add missing flags\n    - BUG/MINOR: sink: Use the right field in appctx context in release callback\n    - MINOR: sock: move the unused socket cleaning code into its own function\n    - BUG/MEDIUM: mworker: close unused transferred FDs on load failure\n    - BUILD: atomic: make the old HA_ATOMIC_LOAD() support const pointers\n    - BUILD: cpuset: do not use const on the source of CPU_AND/CPU_ASSIGN\n    - BUILD: checks: fix inlining issue on set_srv_agent_[addr,port}\n    - BUILD: vars: avoid overlapping field initialization\n    - BUILD: server-state: avoid using not-so-portable isblank()\n    - BUILD: mux_fcgi: avoid aliasing of a const struct in traces\n    - BUILD: tree-wide: mark a few numeric constants as explicitly long long\n    - BUILD: tools: fix warning about incorrect cast with dladdr1()\n    - BUILD: task: use list_to_mt_list() instead of casting list to mt_list\n    - BUILD: mworker: include tools.h for platforms without unsetenv()\n    - BUG/MINOR: mworker: fix a FD leak of a sockpair upon a failed reload\n    - MINOR: mworker: set the master side of ipc_fd in the worker to -1\n    - MINOR: mworker: allocate and initialize a mworker_proc\n    - CI: Consistently use actions/checkout@v2\n    - REGTESTS: Remove REQUIRE_VERSION=1.8 from all tests\n    - MINOR: mworker: sets used or closed worker FDs to -1\n    - MINOR: quic: Try to accept 0-RTT connections\n    - MINOR: quic: Do not try to treat 0-RTT packets without started mux\n    - MINOR: quic: Do not try to accept a connection more than one time\n    - MINOR: quic: Initialize the connection timer asap\n    - MINOR: quic: Do not use connection struct xprt_ctx too soon\n    - Revert \"MINOR: mworker: sets used or closed worker FDs to -1\"\n    - BUILD: makefile: avoid testing all -Wno-* options when not needed\n    - BUILD: makefile: validate support for extra warnings by batches\n    - BUILD: makefile: only compute alternative options if required\n    - DEBUG: fd: make sure we never try to insert/delete an impossible FD number\n    - MINOR: mux-quic: add comment\n    - MINOR: mux-quic: properly initialize qcc flags\n    - MINOR: mux-quic: do not consider CONNECTION_CLOSE for the moment\n    - MINOR: mux-quic: create a timeout task\n    - MEDIUM: mux-quic: delay the closing with the timeout\n    - MINOR: mux-quic: release idle conns on process stopping\n    - MINOR: listener: replace the listener's spinlock with an rwlock\n    - BUG/MEDIUM: listener: read-lock the listener during accept()\n    - MINOR: mworker/cli: set expert/experimental mode from the CLI\n\n2021/11/23 : 2.6-dev0\n    - MINOR: version: it's development again\n\n2021/11/23 : 2.5.0\n    - BUILD: SSL: add quictls build to scripts/build-ssl.sh\n    - BUILD: SSL: add QUICTLS to build matrix\n    - CLEANUP: sock: Wrap `accept4_broken = 1` into additional parenthesis\n    - BUILD: cli: clear a maybe-unused  warning on some older compilers\n    - BUG/MEDIUM: cli: make sure we can report a warning from a bind keyword\n    - BUG/MINOR: ssl: make SSL counters atomic\n    - CLEANUP: assorted typo fixes in the code and comments\n    - BUG/MINOR: ssl: free correctly the sni in the backend SSL cache\n    - MINOR: version: mention that it's stable now\n\n2021/11/19 : 2.5-dev15\n    - BUG/MINOR: stick-table/cli: Check for invalid ipv6 key\n    - CLEANUP: peers: Remove useless test on peer variable in peer_trace()\n    - DOC: log: Add comments to specify when session's listener is defined or not\n    - BUG/MEDIUM: mux-h1: Handle delayed silent shut in h1_process() to release H1C\n    - REGTESTS: ssl_crt-list_filters: feature cmd incorrectly set\n    - DOC: internals: document the list API\n    - BUG/MINOR: h3: ignore unknown frame types\n    - MINOR: quic: redirect app_ops snd_buf through mux\n    - MEDIUM: quic: inspect ALPN to install app_ops\n    - MINOR: quic: support hq-interop\n    - MEDIUM: quic: send version negotiation packet on unknown version\n    - BUG/MEDIUM: mworker: cleanup the listeners when reexecuting\n    - DOC: internals: document the scheduler API\n    - BUG/MINOR: quic: fix version negotiation packet generation\n    - CLEANUP: ssl: fix wrong #else commentary\n    - MINOR: config: support default values for environment variables\n    - SCRIPTS: run-regtests: reduce the number of processes needed to check options\n    - SCRIPT: run-regtests: avoid several calls to grep to test for features\n    - SCRIPT: run-regtests: avoid calling awk to compute the version\n    - REGTEST: set retries count to zero for all tests that expect at 503\n    - REGTESTS: make tcp-check_min-recv fail fast\n    - REGTESTS: extend the default I/O timeouts and make them overridable\n    - BUG/MEDIUM: ssl: backend TLS resumption with sni and TLSv1.3\n    - BUG/MEDIUM: ssl: abort with the correct SSL error when SNI not found\n    - REGTESTS: ssl: test the TLS resumption\n    - BUILD: makefile: stop opening sub-shells for each and every command\n    - BUILD: makefile: reorder objects by build time\n    - BUG/MEDIUM: mux-h2: always process a pending shut read\n    - MINOR: quic_sock: missing CO_FL_ADDR_TO_SET flag\n    - MINOR: quic: Possible wrong connection identification\n    - MINOR: quic: Correctly pad UDP datagrams\n    - MINOR: quic: Support transport parameters draft TLS extension\n    - MINOR: quic: Anti-amplifi"
        },
        {
          "name": "CONTRIBUTING",
          "type": "blob",
          "size": 54.4677734375,
          "content": "                    HOW TO GET YOUR CODE ACCEPTED IN HAPROXY\n                   READ THIS CAREFULLY BEFORE SUBMITTING CODE\n\nTHIS DOCUMENT PROVIDES SOME RULES TO FOLLOW WHEN SENDING CONTRIBUTIONS. PATCHES\nNOT FOLLOWING THESE RULES WILL SIMPLY BE IGNORED IN ORDER TO PROTECT ALL OTHER\nRESPECTFUL CONTRIBUTORS' VALUABLE TIME.\n\n\nAbstract\n--------\n\nIf you have never contributed to HAProxy before, or if you did so and noticed\nthat nobody seems to be interested in reviewing your submission, please do read\nthis long document carefully. HAProxy maintainers are particularly demanding on\nrespecting certain simple rules related to general code and documentation style\nas well as splitting your patches and providing high quality commit messages.\nThe reason behind this is that your patch will be met multiple times in the\nfuture, when doing some backporting work or when bisecting a bug, and it is\ncritical that anyone can quickly decide if the patch is right, wrong, if it\nmisses something, if it must be reverted or needs to be backported. Maintainers\nare generally benevolent with newcomers and will help them provided their work\nindicates they have at least read this document. Some have improved over time,\nto the point of being totally trusted and gaining commit access so they don't\nneed to depend on anyone to pick their code. On the opposite, those who insist\nnot making minimal efforts however will simply be ignored.\n\n\nBackground\n----------\n\nHAProxy is a community-driven project. But like most highly technical projects\nit takes a lot of time to develop the skills necessary to be autonomous in the\nproject, and there is a very small core team helped by a small set of very\nactive participants. While most of the core team members work on the code as\npart of their day job, most participants do it on a voluntary basis during\ntheir spare time. The ideal model for developers is to spend their time:\n  1) developing new features\n  2) fixing bugs\n  3) doing maintenance backports\n  4) reviewing other people's code\n\nIt turns out that on a project like HAProxy, like many other similarly complex\nprojects, the time spent is exactly the opposite:\n  1) reviewing other people's code\n  2) doing maintenance backports\n  3) fixing bugs\n  4) developing new features\n\nA large part of the time spent reviewing code often consists in giving basic\nrecommendations that are already explained in this file. In addition to taking\ntime, it is not appealing for people willing to spend one hour helping others\nto do the same thing over and over instead of discussing the code design, and\nit tends to delay the start of code reviews.\n\nRegarding backports, they are necessary to provide a set of stable branches\nthat are deployed in production at many places. Load balancers are complex and\nnew features often induce undesired side effects in other areas, which we will\ncall bugs. Thus it's common for users to stick to a branch featuring everything\nthey need and not to upgrade too often. This backporting job is critical to the\necosystem's health and must be done regularly. Very often the person devoting\nsome time on backports has little to no information about the relevance (let\nalone importance) of a patch and is unlikely to be an expert in the area\naffected by the patch. It's the role of the commit message to explain WHAT\nproblem the patch tries to solve, WHY it is estimated that it is a problem, and\nHOW it tries to address it. With these elements, the person in charge of the\nbackports can decide whether or not to pick the patch. And if the patch does\nnot apply (which is common for older versions) they have information in the\ncommit message about the principle and choices that the initial developer made\nand will try to adapt the patch sticking to these principles. Thus, the time\nspent backporting patches solely depends on the code quality and the commit\nmessage details and accuracy.\n\nWhen it turns to fixing bugs, before declaring a bug, there is an analysis\nphase. It starts with \"is this behaviour expected\", \"is it normal\", \"under what\ncircumstances does it happen\", \"when did it start to happen\", \"was it intended\",\n\"was it just overlooked\", and \"how to fix it without breaking the initial\nintent\". A utility called \"git bisect\" is usually involved in determining when\nthe behaviour started to happen. It determines the first patch which introduced\nthe new behaviour. If the patch is huge, touches many areas, is really difficult\nto read because it needlessly reindents code or adds/removes line breaks out of\ncontext, it will be very difficult to figure what part of this patch broke the\nbehaviour. Then once the part is figured, if the commit message doesn't provide\na detailed description about the intent of the patch, i.e. the problem it was\ntrying to solve, why and how, the developer landing on that patch will really\nfeel powerless. And very often in this case, the fix for the problem will break\nsomething else or something that depended on the original patch.\n\nBut contrary to what it could look like, providing great quality patches is not\ndifficult, and developers will always help contributors improve their patches\nquality because it's in their interest as well. History has shown that first\ntime contributors can provide an excellent work when they have carefully read\nthis document, and that people coming from projects with different practices\ncan grow from first-time contributor to trusted committer in about 6 months.\n\n\nPreparation\n-----------\n\nIt is possible that you'll want to add a specific feature to satisfy your needs\nor one of your customers'. Contributions are welcome, however maintainers are\noften very picky about changes. Patches that change massive parts of the code,\nor that touch the core parts without any good reason will generally be rejected\nif those changes have not been discussed first.\n\nThe proper place to discuss your changes is the HAProxy Mailing List. There are\nenough skilled readers to catch hazardous mistakes and to suggest improvements.\nThere is no other place where you'll find as many skilled people on the project,\nand these people can help you get your code integrated quickly. You can\nsubscribe to it by sending an empty e-mail at the following address :\n\n                        haproxy+subscribe@formilux.org\n\nIt is not even necessary to subscribe, you can post there and verify via the\npublic list archives that your message was properly delivered. In this case you\nshould indicate in your message that you'd like responders to keep you CCed.\nPlease visit http://haproxy.org/ to figure available options to join the list.\n\nIf you have an idea about something to implement, *please* discuss it on the\nlist first. It has already happened several times that two persons did the same\nthing simultaneously. This is a waste of time for both of them. It's also very\ncommon to see some changes rejected because they're done in a way that will\nconflict with future evolutions, or that does not leave a good feeling. It's\nalways unpleasant for the person who did the work, and it is unpleasant in\ngeneral because people's time and efforts are valuable and would be better\nspent working on something else. That would not happen if these were discussed\nfirst. There is no problem posting work in progress to the list, it happens\nquite often in fact. Just prefix your mail subject with \"RFC\" (it stands for\n\"request for comments\") and everyone will understand you'd like some opinion\non your work in progress. Also, don't waste your time with the doc when\nsubmitting patches for review, only add the doc with the patch you consider\nready to merge (unless you need some help on the doc itself, of course).\n\nAnother important point concerns code portability. HAProxy requires gcc as the\nC compiler, and may or may not work with other compilers. However it's known to\nbuild using gcc 2.95 or any later version. As such, it is important to keep in\nmind that certain facilities offered by recent versions must not be used in the\ncode:\n\n  - declarations mixed in the code (requires gcc >= 3.x and is a bad practice)\n  - GCC builtins without checking for their availability based on version and\n    architecture ;\n  - assembly code without any alternate portable form for other platforms\n  - use of stdbool.h, \"bool\", \"false\", \"true\" : simply use \"int\", \"0\", \"1\"\n  - in general, anything which requires C99 (such as declaring variables in\n    \"for\" statements)\n\nSince most of these restrictions are just a matter of coding style, it is\nnormally not a problem to comply. Please read doc/coding-style.txt for all the\ndetails.\n\nWhen modifying some optional subsystem (SSL, Lua, compression, device detection\nengines), please make sure the code continues to build (and to work) when these\nfeatures are disabled. Similarly, when modifying the SSL stack, please always\nensure that supported OpenSSL versions continue to build and to work, especially\nif you modify support for alternate libraries. Clean support for the legacy\nOpenSSL libraries is mandatory, support for its derivatives is a bonus and may\noccasionally break even though a great care is taken. In other words, if you\nprovide a patch for OpenSSL you don't need to test its derivatives, but if you\nprovide a patch for a derivative you also need to test with OpenSSL.\n\nIf your work is very confidential and you can't publicly discuss it, you can\nalso mail willy@haproxy.org directly about it, but your mail may be waiting\nseveral days in the queue before you get a response, if you get a response at\nall. Retransmit if you don't get a response by one week. Please note that\ndirect sent e-mails to this address for non-confidential subjects may simply\nbe forwarded to the list or be deleted without notification. An auto-responder\nbot is in place to try to detect e-mails from people asking for help and to\nredirect them to the mailing list. Do not be surprised if this happens to you.\n\nIf you'd like a feature to be added but you think you don't have the skills to\nimplement it yourself, you should follow these steps :\n\n    1. discuss the feature on the mailing list. It is possible that someone\n       else has already implemented it, or that someone will tell you how to\n       proceed without it, or even why not to do it. It is also possible that\n       in fact it's quite easy to implement and people will guide you through\n       the process. That way you'll finally have YOUR patch merged, providing\n       the feature YOU need.\n\n    2. if you really can't code it yourself after discussing it, then you may\n       consider contacting someone to do the job for you. Some people on the\n       list might sometimes be OK with trying to do it.\n\nThe version control system used by the project (Git) keeps authorship\ninformation in the form of the patch author's e-mail address. This way you will\nbe credited for your work in the project's history. If you contract with\nsomeone to implement your idea you may have to discuss such modalities with\nthe person doing the work as by default this person will be mentioned as the\nwork's author.\n\n\nRules: the 12 laws of patch contribution\n----------------------------------------\n\nPeople contributing patches must apply the following rules. That may sound heavy\nat the beginning but it's common sense more than anything else and contributors\ndo not think about them anymore after a few patches.\n\n1) Comply with the license\n\n   Before modifying some code, you have read the LICENSE file (\"main license\")\n   coming with the sources, and all the files this file references. Certain\n   files may be covered by different licenses, in which case it will be\n   indicated in the files themselves. In any case, you agree to respect these\n   licenses and to contribute your changes under the same licenses. If you want\n   to create new files, they will be under the main license, or any license of\n   your choice that you have verified to be compatible with the main license,\n   and that will be explicitly mentioned in the affected files. The project's\n   maintainers are free to reject contributions proposing license changes they\n   feel are not appropriate or could cause future trouble.\n\n2) Develop on development branch, not stable ones\n\n   Your work may only be based on the latest development version. No development\n   is made on a stable branch. If your work needs to be applied to a stable\n   branch, it will first be applied to the development branch and only then will\n   be backported to the stable branch. You are responsible for ensuring that\n   your work correctly applies to the development version. If at any moment you\n   are going to work on restructuring something important which may impact other\n   contributors, the rule that applies is that the first sent is the first\n   served. However it is considered good practice and politeness to warn others\n   in advance if you know you're going to make changes that may force them to\n   re-adapt their code, because they did probably not expect to have to spend\n   more time discovering your changes and rebasing their work.\n\n3) Read and respect the coding style\n\n   You have read and understood \"doc/coding-style.txt\", and you're actively\n   determined to respect it and to enforce it on your coworkers if you're going\n   to submit a team's work. We don't care what text editor you use, whether it's\n   an hex editor, cat, vi, emacs, Notepad, Word, or even Eclipse. The editor is\n   only the interface between you and the text file. What matters is what is in\n   the text file in the end. The editor is not an excuse for submitting poorly\n   indented code, which only proves that the person has no consideration for\n   quality and/or has done it in a hurry (probably worse). Please note that most\n   bugs were found in low-quality code. Reviewers know this and tend to be much\n   more reluctant to accept poorly formatted code because by experience they\n   won't trust their author's ability to write correct code. It is also worth\n   noting that poor quality code is painful to read and may result in nobody\n   willing to waste their time even reviewing your work.\n\n4) Present clean work\n\n   The time it takes for you to polish your code is always much smaller than the\n   time it takes others to do it for you, because they always have to wonder if\n   what they see is intended (meaning they didn't understand something) or if it\n   is a mistake that needs to be fixed. And since there are less reviewers than\n   submitters, it is vital to spread the effort closer to where the code is\n   written and not closer to where it gets merged. For example if you have to\n   write a report for a customer that your boss wants to review before you send\n   it to the customer, will you throw on his desk a pile of paper with stains,\n   typos and copy-pastes everywhere ? Will you say \"come on, OK I made a mistake\n   in the company's name but they will find it by themselves, it's obvious it\n   comes from us\" ? No. When in doubt, simply ask for help on the mailing list.\n\n5) Documentation is very important\n\n   There are four levels of importance of quality in the project :\n\n   - The most important one, and by far, is the quality of the user-facing\n     documentation. This is the first contact for most users and it immediately\n     gives them an accurate idea of how the project is maintained. Dirty docs\n     necessarily belong to a dirty project. Be careful to the way the text you\n     add is presented and indented. Be very careful about typos, usual mistakes\n     such as double consonants when only one is needed or \"it's\" instead of\n     \"its\", don't mix US English and UK English in the same paragraph, etc.\n     When in doubt, check in a dictionary. Fixes for existing typos in the doc\n     are always welcome and chasing them is a good way to become familiar with\n     the project and to get other participants' respect and consideration.\n\n   - The second most important level is user-facing messages emitted by the\n     code. You must try to see all the messages your code produces to ensure\n     they are understandable outside of the context where you wrote them,\n     because the user often doesn't expect them. That's true for warnings, and\n     that's even more important for errors which prevent the program from\n     working and which require an immediate and well understood fix in the\n     configuration. It's much better to say \"line 35: compression level must be\n     an integer between 1 and 9\" than \"invalid argument at line 35\". In HAProxy,\n     error handling roughly represents half of the code, and that's about 3/4 of\n     the configuration parser. Take the time to do something you're proud of. A\n     good rule of thumb is to keep in mind that your code talks to a human and\n     tries to teach them how to proceed. It must then speak like a human.\n\n   - The third most important level is the code and its accompanying comments,\n     including the commit message which is a complement to your code and\n     comments. It's important for all other contributors that the code is\n     readable, fluid, understandable and that the commit message describes what\n     was done, the choices made, the possible alternatives you thought about,\n     the reason for picking this one and its limits if any. Comments should be\n     written where it's easy to have a doubt or after some error cases have been\n     wiped out and you want to explain what possibilities remain. All functions\n     must have a comment indicating what they take on input and what they\n     provide on output. Please adjust the comments when you copy-paste a\n     function or change its prototype, this type of lazy mistake is too common\n     and very confusing when reading code later to debug an issue. Do not forget\n     that others will feel really angry at you when they have to dig into your\n     code for a bug that your code caused and they feel like this code is dirty\n     or confusing, that the commit message doesn't explain anything useful and\n     that the patch should never have been accepted in the first place. That\n     will strongly impact your reputation and will definitely affect your\n     chances to contribute again!\n\n   - The fourth level of importance is in the technical documentation that you\n     may want to add with your code. Technical documentation is always welcome\n     as it helps others make the best use of your work and to go exactly in the\n     direction you thought about during the design. This is also what reduces\n     the risk that your design gets changed in the near future due to a misuse\n     and/or a poor understanding. All such documentation is actually considered\n     as a bonus. It is more important that this documentation exists than that\n     it looks clean. Sometimes just copy-pasting your draft notes in a file to\n     keep a record of design ideas is better than losing them. Please do your\n     best so that other ones can read your doc. If these docs require a special\n     tool such as a graphics utility, ensure that the file name makes it\n     unambiguous how to process it. So there are no rules here for the contents,\n     except one.  Please write the date in your file. Design docs tend to stay\n     forever and to remain long after they become obsolete. At this point that\n     can cause harm more than it can help. Writing the date in the document\n     helps developers guess the degree of validity and/or compare them with the\n     date of certain commits touching the same area.\n\n6) US-ASCII only!\n\n   All text files and commit messages are written using the US-ASCII charset.\n   Please be careful that your contributions do not contain any character not\n   printable using this charset, as they will render differently in different\n   editors and/or terminals. Avoid latin1 and more importantly UTF-8 which some\n   editors tend to abuse to replace some US-ASCII characters with their\n   typographic equivalent which aren't readable anymore in other editors. The\n   only place where alternative charsets are tolerated is in your name in the\n   commit message, but it's at your own risk as it can be mangled during the\n   merge. Anyway if you have an e-mail address, you probably have a valid\n   US-ASCII representation for it as well.\n\n7) Comments\n\n   Be careful about comments when you move code around. It's not acceptable that\n   a block of code is moved to another place leaving irrelevant comments at the\n   old place, just like it's not acceptable that a function is duplicated without\n   the comments being adjusted. The example below started to become quite common\n   during the 1.6 cycle, it is not acceptable and wastes everyone's time :\n\n      /* Parse switching <str> to build rule <rule>. Returns 0 on error. */\n      int parse_switching_rule(const char *str, struct rule *rule)\n      {\n       ...\n      }\n\n      /* Parse switching <str> to build rule <rule>. Returns 0 on error. */\n      void execute_switching_rule(struct rule *rule)\n      {\n       ...\n      }\n\n   This patch is not acceptable either (and it's unfortunately not that rare) :\n\n    +   if (!session || !arg || list_is_empty(&session->rules->head))\n    +         return 0;\n    +\n        /* Check if session->rules is valid before dereferencing it */\n        if (!session->rules_allocated)\n              return 0;\n\n    -   if (!arg || list_is_empty(&session->rules->head))\n    -         return 0;\n    -\n\n8) Short, readable identifiers\n\n   Limit the length of your identifiers in the code. When your identifiers start\n   to sound like sentences, it's very hard for the reader to keep on track with\n   what operation they are observing. Also long names force expressions to fit\n   on several lines which also cause some difficulties to the reader. See the\n   example below :\n\n       int file_name_len_including_global_path;\n       int file_name_len_without_global_path;\n       int global_path_len_or_zero_if_default;\n\n       if (global_path)\n               global_path_len_or_zero_if_default = strlen(global_path);\n       else\n               global_path_len_or_zero_if_default = 0;\n\n       file_name_len_without_global_path = strlen(file_name);\n       file_name_len_including_global_path =\n               file_name_len_without_global_path + 1 + /* for '/' */\n               global_path_len_or_zero_if_default ?\n                       global_path_len_or_zero_if_default : default_path_len;\n\n   Compare it to this one :\n\n       int f, p;\n\n       p = global_path ? strlen(global_path) : default_path_len;\n       f = p + 1 + strlen(file_name);  /* 1 for '/' */\n\n   A good rule of thumb is that if your identifiers start to contain more than\n   3 words or more than 15 characters, they can become confusing. For function\n   names it's less important especially if these functions are rarely used or\n   are used in a complex context where it is important to differentiate between\n   their multiple variants.\n\n9) Unified diff only\n\n   The best way to build your patches is to use \"git format-patch\". This means\n   that you have committed your patch to a local branch, with an appropriate\n   subject line and a useful commit message explaining what the patch attempts\n   to do. It is not strictly required to use git, but what is strictly required\n   is to have all these elements in the same mail, easily distinguishable, and\n   a patch in \"diff -up\" format (which is also the format used by Git). This\n   means the \"unified\" diff format must be used exclusively, and with the\n   function name printed in the diff header of each block. That significantly\n   helps during reviews. Keep in mind that most reviews are done on the patch\n   and not on the code after applying the patch. Your diff must keep some\n   context (3 lines above and 3 lines below) so that there's no doubt where the\n   code has to be applied. Don't change code outside of the context of your\n   patch (eg: take care of not adding/removing empty lines once you remove\n   your debugging code). If you are using Git (which is strongly recommended),\n   always use \"git show\" after doing a commit to ensure it looks good, and\n   enable syntax coloring that will automatically report in red the trailing\n   spaces or tabs that your patch added to the code and that must absolutely be\n   removed. These ones cause a real pain to apply patches later because they\n   mangle the context in an invisible way. Such patches with trailing spaces at\n   end of lines will be rejected.\n\n10) One patch per feature\n\n   Please cut your work in series of patches that can be independently reviewed\n   and merged. Each patch must do something on its own that you can explain to\n   someone without being ashamed of what you did. For example, you must not say\n   \"This is the patch that implements SSL, it was tricky\". There's clearly\n   something wrong there, your patch will be huge, will definitely break things\n   and nobody will be able to figure what exactly introduced the bug. However\n   it's much better to say \"I needed to add some fields in the session to store\n   the SSL context so this patch does this and doesn't touch anything else, so\n   it's safe\". Also when dealing with series, you will sometimes fix a bug that\n   one of your patches introduced. Please do merge these fixes (eg: using git\n   rebase -i and squash or fixup), as it is not acceptable to see patches which\n   introduce known bugs even if they're fixed later. Another benefit of cleanly\n   splitting patches is that if some of your patches need to be reworked after\n   a review, the other ones can still be merged so that you don't need to care\n   about them anymore. When sending multiple patches for review, prefer to send\n   one e-mail per patch than all patches in a single e-mail. The reason is that\n   not everyone is skilled in all areas nor has the time to review everything\n   at once. With one patch per e-mail, it's easy to comment on a single patch\n   without giving an opinion on the other ones, especially if a long thread\n   starts about one specific patch on the mailing list. \"git send-email\" does\n   that for you though it requires a few trials before getting it right.\n\n   If you can, please always put all the bug fixes at the beginning of the\n   series. This often makes it easier to backport them because they will not\n   depend on context that your other patches changed. As a hint, if you can't\n   do this, there are little chances that your bug fix can be backported.\n\n11) Real commit messages please!\n\n   The commit message is how you're trying to convince a maintainer to adopt\n   your work and maintain it as long as possible. A dirty commit message almost\n   always comes with dirty code. Too short a commit message indicates that too\n   short an analysis was done and that side effects are extremely likely to be\n   encountered. It's the maintainer's job to decide to accept this work in its\n   current form or not, with the known constraints. Some patches which rework\n   architectural parts or fix sensitive bugs come with 20-30 lines of design\n   explanations, limitations, hypothesis or even doubts, and despite this it\n   happens when reading them 6 months later while trying to identify a bug that\n   developers still miss some information about corner cases.\n\n   So please properly format your commit messages. To get an idea, just run\n   \"git log\" on the file you've just modified. Patches always have the format\n   of an e-mail made of a subject, a description and the actual patch. If you\n   are sending a patch as an e-mail formatted this way, it can quickly be\n   applied with limited effort so that's acceptable :\n\n     - A subject line (may wrap to the next line, but please read below)\n     - an empty line (subject delimiter)\n     - a non-empty description (the body of the e-mail)\n     - the patch itself\n\n   The subject describes the \"What\" of the change ; the description explains\n   the \"why\", the \"how\" and sometimes \"what next\". For example a commit message\n   looking like this will be rejected :\n\n     | From: Mr Foobar <foobar@example.com>\n     | Subject: BUG: fix typo in ssl_sock\n     |\n\n   This one as well (too long subject, not the right place for the details) :\n\n     | From: Mr Foobar <foobar@example.com>\n     | Subject: BUG/MEDIUM: ssl: use an error flag to prevent ssl_read() from\n     |    returning 0 when dealing with large buffers because that can cause\n     |    an infinite loop\n     |\n\n   This one ought to be used instead :\n\n     | From: Mr Foobar <foobar@example.com>\n     | Subject: BUG/MEDIUM: ssl: fix risk of infinite loop in ssl_sock\n     |\n     | ssl_read() must not return 0 on error or the caller may loop forever.\n     | Instead we add a flag to the connection to notify about the error and\n     | check it at all call places. This situation can only happen with large\n     | buffers so a workaround is to limit buffer sizes. Another option would\n     | have been to return -1 but it required to use signed ints everywhere\n     | and would have made the patch larger and riskier. This fix should be\n     | backported to versions 1.2 and upper.\n\n   It is important to understand that for any reader to guess the text above\n   when it's absent, it will take a huge amount of time. If you made the\n   analysis leading to your patch, you must explain it, including the ideas\n   you dropped if you had a good reason for this.\n\n   While it's not strictly required to use Git, it is strongly recommended\n   because it helps you do the cleanest job with the least effort. But if you\n   are comfortable with writing clean e-mails and inserting your patches, you\n   don't need to use Git.\n\n   But in any case, it is important that there is a clean description of what\n   the patch does, the motivation for what it does, why it's the best way to do\n   it, its impacts, and what it does not yet cover. And this is particularly\n   important for bugs. A patch tagged \"BUG\" must absolutely explain what the\n   problem is, why it is considered as a bug. Anybody, even non-developers,\n   should be able to tell whether or not a patch is likely to address an issue\n   they are facing. Indicating what the code will do after the fix doesn't help\n   if it does not say what problem is encountered without the patch. Note that\n   in some cases the bug is purely theoretical and observed by reading the code.\n   In this case it's perfectly fine to provide an estimate about possible\n   effects. Also, in HAProxy, like many projects which take a great care of\n   maintaining stable branches, patches are reviewed later so that some of them\n   can be backported to stable releases.\n\n   While reviewing hundreds of patches can seem cumbersome, with a proper\n   formatting of the subject line it actually becomes very easy. For example,\n   here's how one can find patches that need to be reviewed for backports (bugs\n   and doc) between since commit ID 827752e :\n\n       $ git log --oneline 827752e.. | grep 'BUG\\|DOC'\n       0d79cf6 DOC: fix function name\n       bc96534 DOC: ssl: missing LF\n       10ec214 BUG/MEDIUM: lua: the lua function Channel:close() causes a segf\n       bdc97a8 BUG/MEDIUM: lua: outgoing connection was broken since 1.6-dev2\n       ba56d9c DOC: mention support for RFC 5077 TLS Ticket extension in start\n       f1650a8 DOC: clarify some points about SSL and the proxy protocol\n       b157d73 BUG/MAJOR: peers: fix current table pointer not re-initialized\n       e1ab808 BUG/MEDIUM: peers: fix wrong message id on stick table updates\n       cc79b00 BUG/MINOR: ssl: TLS Ticket Key rotation broken via socket comma\n       d8e42b6 DOC: add new file intro.txt\n       c7d7607 BUG/MEDIUM: lua: bad error processing\n       386a127 DOC: match several lua configuration option names to those impl\n       0f4eadd BUG/MEDIUM: counters: ensure that src_{inc,clr}_gpc0 creates a\n\n   It is made possible by the fact that subject lines are properly formatted and\n   always respect the same principle : one part indicating the nature and\n   severity of the patch, another one to indicate which subsystem is affected,\n   and the last one is a succinct description of the change, with the important\n   part at the beginning so that it's obvious what it does even when lines are\n   truncated like above. The whole stable maintenance process relies on this.\n   For this reason, it is mandatory to respect some easy rules regarding the\n   way the subject is built. Please see the section below for more information\n   regarding this formatting.\n\n   As a rule of thumb, your patch MUST NEVER be made only of a subject line,\n   it *must* contain a description. Even one or two lines, or indicating\n   whether a backport is desired or not. It turns out that single-line commits\n   are so rare in the Git world that they require special manual (hence\n   painful) handling when they are backported, and at least for this reason\n   it's important to keep this in mind.\n\n   Maintainers who pick your patch may slightly adjust the description as they\n   see fit. Do not see this as a failure to do a clean job, it just means they\n   think it will help them do their daily job this way. The code may also be\n   slightly adjusted before being merged (non-functional changes only, fix for\n   typos, tabs vs spaces for example), unless your patch contains a\n   Signed-off-By tag, in which case they will either modify it and mention the\n   changes after your Signed-off-By line, or (more likely) ask you to perform\n   these changes yourself. This ability to slightly adjust a patch before\n   merging is is the main reason for not using pull requests which do not\n   provide this facility and will require to iterate back and forth with the\n   submitter and significantly delay the patch inclusion.\n\n   Each patch fixing a bug MUST be tagged with \"BUG\", a severity level, an\n   indication of the affected subsystem and a brief description of the nature\n   of the issue in the subject line, and a detailed analysis in the message\n   body. The explanation of the user-visible impact and the need for\n   backporting to stable branches or not are MANDATORY. Bug fixes with no\n   indication will simply be rejected as they are very likely to cause more\n   harm when nobody is able to tell whether or not the patch needs to be\n   backported or can be reverted in case of regression.\n\n   When fixing a bug which is reproducible, if possible, the contributors are\n   strongly encouraged to write a regression testing VTC file for varnishtest\n   to add to reg-tests directory. More information about varnishtest may be\n   found in README file of reg-tests directory and in doc/regression-testing.txt\n   file.\n\n12) Discuss on the mailing list\n\n   Note, some first-time contributors might feel impressed or scared by posting\n   to a list. This list is frequented only by nice people who are willing to\n   help you polish your work so that it is perfect and can last long. What you\n   think could be perceived as a proof of incompetence or lack of care will\n   instead be a proof of your ability to work with a community. You will not be\n   judged nor blamed for making mistakes. The project maintainers are the ones\n   creating the most bugs and mistakes anyway, and nobody knows the project in\n   its entirety anymore so you're just like anyone else. And people who have no\n   consideration for other's work are quickly ejected from the list so the\n   place is as safe and welcoming to new contributors as it is to long time\n   ones.\n\n   When submitting changes, please always CC the mailing list address so that\n   everyone gets a chance to spot any issue in your code. It will also serve\n   as an advertisement for your work, you'll get more testers quicker and\n   you'll feel better knowing that people really use your work. It's often\n   convenient to prepend \"[PATCH]\" in front of your mail's subject to mention\n   that this e-mail contains a patch (or a series of patches), because it will\n   easily catch reviewer's attention. It's automatically done by tools such as\n   \"git format-patch\" and \"git send-email\". If you don't want your patch to be\n   merged yet and prefer to show it for discussion, better tag it as \"[RFC]\"\n   (stands for \"Request For Comments\") and it will be reviewed but not merged\n   without your approval. It is also important to CC any author mentioned in\n   the file you change, or a subsystem maintainers whose address is mentioned\n   in a MAINTAINERS file. Not everyone reads the list on a daily basis so it's\n   very easy to miss some changes. Don't consider it as a failure when a\n   reviewer tells you you have to modify your patch, actually it's a success\n   because now you know what is missing for your work to get accepted.  That's\n   why you should not hesitate to CC enough people. Don't copy people who have\n   no deal with your work area just because you found their address on the\n   list. That's the best way to appear careless about their time and make them\n   reject your changes in the future.\n\n\nPatch classifying rules\n-----------------------\n\nThere are 3 criteria of particular importance in any patch :\n  - its nature (is it a fix for a bug, a new feature, an optimization, ...)\n  - its importance, which generally reflects the risk of merging/not merging it\n  - what area it applies to (eg: http, stats, startup, config, doc, ...)\n\nIt's important to make these 3 criteria easy to spot in the patch's subject,\nbecause it's the first (and sometimes the only) thing which is read when\nreviewing patches to find which ones need to be backported to older versions.\nIt also helps when trying to find which patch is the most likely to have caused\na regression.\n\nSpecifically, bugs must be clearly easy to spot so that they're never missed.\nAny patch fixing a bug must have the \"BUG\" tag in its subject. Most common\npatch types include :\n\n  - BUG      fix for a bug. The severity of the bug should also be indicated\n             when known. Similarly, if a backport is needed to older versions,\n             it should be indicated on the last line of the commit message. The\n             commit message MUST ABSOLUTELY describe the problem and its impact\n             to non-developers. Any user must be able to guess if this patch is\n             likely to fix a problem they are facing. Even if the bug was\n             discovered by accident while reading the code or running an\n             automated tool, it is mandatory to try to estimate what potential\n             issue it might cause and under what circumstances. There may even\n             be security implications sometimes so a minimum analysis is really\n             required. Also please think about stable maintainers who have to\n             build the release notes, they need to have enough input about the\n             bug's impact to explain it. If the bug has been identified as a\n             regression brought by a specific patch or version, this indication\n             will be appreciated too. New maintenance releases are generally\n             emitted when a few of these patches are merged. If the bug is a\n             vulnerability for which a CVE identifier was assigned before you\n             publish the fix, you can mention it in the commit message, it will\n             help distro maintainers.\n\n  - CLEANUP  code cleanup, silence of warnings, etc... theoretically no impact.\n             These patches will rarely be seen in stable branches, though they\n             may appear when they remove some annoyance or when they make\n             backporting easier. By nature, a cleanup is always of minor\n             importance and it's not needed to mention it.\n\n  - DOC      updates to any of the documentation files, including README. Many\n             documentation updates are backported since they don't impact the\n             product's stability and may help users avoid bugs. So please\n             indicate in the commit message if a backport is desired. When a\n             feature gets documented, it's preferred that the doc patch appears\n             in the same patch or after the feature patch, but not before, as it\n             becomes confusing when someone working on a code base including\n             only the doc patch won't understand why a documented feature does\n             not work as documented.\n\n  - REORG    code reorganization. Some blocks may be moved to other places,\n             some important checks might be swapped, etc... These changes\n             always present a risk of regression. For this reason, they should\n             never be mixed with any bug fix nor functional change. Code is\n             only moved as-is. Indicating the risk of breakage is highly\n             recommended. Minor breakage is tolerated in such patches if trying\n             to fix it at once makes the whole change even more confusing. That\n             may happen for example when some #ifdefs need to be propagated in\n             every file consecutive to the change.\n\n  - BUILD    updates or fixes for build issues. Changes to makefiles also fall\n             into this category. The risk of breakage should be indicated if\n             known. It is also appreciated to indicate what platforms and/or\n             configurations were tested after the change.\n\n  - OPTIM    some code was optimised. Sometimes if the regression risk is very\n             low and the gains significant, such patches may be merged in the\n             stable branch. Depending on the amount of code changed or replaced\n             and the level of trust the author has in the change, the risk of\n             regression should be indicated. If the optimization depends on the\n             architecture or on build options, it is important to verify that\n             the code continues to work without it.\n\n  - RELEASE  release of a new version (development or stable).\n\n  - LICENSE  licensing updates (may impact distro packagers).\n\n  - REGTEST  updates to any of the regression testing files found in reg-tests\n             directory, including README or any documentation file.\n\n\nWhen the patch cannot be categorized, it's best not to put any type tag, and to\nonly use a risk or complexity information only as below. This is commonly the\ncase for new features, which development versions are mostly made of.\n\nThe importance, complexity of the patch, or severity of the bug it fixes must\nbe indicated when relevant. A single upper-case word is preferred, among :\n\n  - MINOR    minor change, very low risk of impact. It is often the case for\n             code additions that don't touch live code. As a rule of thumb, a\n             patch tagged \"MINOR\" is safe enough to be backported to stable\n             branches. For a bug, it generally indicates an annoyance, nothing\n             more.\n\n  - MEDIUM   medium risk, may cause unexpected regressions of low importance or\n             which may quickly be discovered. In short, the patch is safe but\n             touches working areas and it is always possible that you missed\n             something you didn't know existed (eg: adding a \"case\" entry or\n             an error message after adding an error code to an enum). For a bug,\n             it generally indicates something odd which requires changing the\n             configuration in an undesired way to work around the issue.\n\n  - MAJOR    major risk of hidden regression. This happens when large parts of\n             the code are rearranged, when new timeouts are introduced, when\n             sensitive parts of the session scheduling are touched, etc... We\n             should only exceptionally find such patches in stable branches when\n             there is no other option to fix a design issue. For a bug, it\n             indicates severe reliability issues for which workarounds are\n             identified with or without performance impacts.\n\n  - CRITICAL medium-term reliability or security is at risk and workarounds,\n             if they exist, might not always be acceptable. An upgrade is\n             absolutely required. A maintenance release may be emitted even if\n             only one of these bugs are fixed. Note that this tag is only used\n             with bugs. Such patches must indicate what is the first version\n             affected, and if known, the commit ID which introduced the issue.\n\nThe expected length of the commit message grows with the importance of the\nchange. While a MINOR patch may sometimes be described in 1 or 2 lines, MAJOR\nor CRITICAL patches cannot have less than 10-15 lines to describe exactly the\nimpacts otherwise the submitter's work will be considered as rough sabotage.\nIf you are sending a new patch series after a review, it is generally good to\nenumerate at the end of the commit description what changed from the previous\none as it helps reviewers quickly glance over such changes and not re-read the\nrest.\n\nFor BUILD, DOC and CLEANUP types, this tag is not always relevant and may be\nomitted.\n\nThe area the patch applies to is quite important, because some areas are known\nto be similar in older versions, suggesting a backport might be desirable, and\nconversely, some areas are known to be specific to one version. The area is a\nsingle-word lowercase name the contributor find clear enough to describe what\npart is being touched. The following list of tags is suggested but not\nexhaustive:\n\n  - examples  example files. Be careful, sometimes these files are packaged.\n\n  - tests     regression test files. No code is affected, no need to upgrade.\n\n  - reg-tests regression test files for varnishtest. No code is affected, no\n              need to upgrade.\n\n  - init      initialization code, arguments parsing, etc...\n\n  - config    configuration parser, mostly used when adding new config keywords\n\n  - http      the HTTP engine\n\n  - stats     the stats reporting engine\n\n  - cli       the stats socket CLI\n\n  - checks    the health checks engine (eg: when adding new checks)\n\n  - sample    the sample fetch system (new fetch or converter functions)\n\n  - acl       the ACL processing core or some ACLs from other areas\n\n  - filters   everything related to the filters core\n\n  - peers     the peer synchronization engine\n\n  - lua       the Lua scripting engine\n\n  - listeners everything related to incoming connection settings\n\n  - frontend  everything related to incoming connection processing\n\n  - backend   everything related to LB algorithms and server farm\n\n  - session   session processing and flags (very sensible, be careful)\n\n  - server    server connection management, queueing\n\n  - spoe      SPOE code\n\n  - ssl       the SSL/TLS interface\n\n  - proxy     proxy maintenance (start/stop)\n\n  - log       log management\n\n  - poll      any of the pollers\n\n  - halog     the halog sub-component in the admin directory\n\n  - htx       general HTX subsystem\n\n  - mux-h1    HTTP/1.x multiplexer/demultiplexer\n\n  - mux-h2    HTTP/2 multiplexer/demultiplexer\n\n  - h1        general HTTP/1.x protocol parser\n\n  - h2        general HTTP/2 protocol parser\n\nOther names may be invented when more precise indications are meaningful, for\ninstance : \"cookie\" which indicates cookie processing in the HTTP core. Last,\nindicating the name of the affected file is also a good way to quickly spot\nchanges. Many commits were already tagged with \"stream_sock\" or \"cfgparse\" for\ninstance.\n\nIt is required that the type of change and the severity when relevant are\nindicated, as well as the touched area when relevant as well in the patch\nsubject. Normally, we would have the 3 most often. The two first criteria should\nbe present before a first colon (':'). If both are present, then they should be\ndelimited with a slash ('/'). The 3rd criterion (area) should appear next, also\nfollowed by a colon. Thus, all of the following subject lines are valid :\n\nExamples of subject lines :\n  - DOC: document options forwardfor to logasap\n  - DOC/MAJOR: reorganize the whole document and change indenting\n  - BUG: stats: connection reset counters must be plain ascii, not HTML\n  - BUG/MINOR: stats: connection reset counters must be plain ascii, not HTML\n  - MEDIUM: checks: support multi-packet health check responses\n  - RELEASE: Released version 1.4.2\n  - BUILD: stats: stdint is not present on solaris\n  - OPTIM/MINOR: halog: make fgets parse more bytes by blocks\n  - REORG/MEDIUM: move syscall redefinition to specific places\n\nPlease do not use square brackets anymore around the tags, because they induce\nmore work when merging patches, which need to be hand-edited not to lose the\nenclosed part.\n\nIn fact, one of the only square bracket tags that still makes sense is '[RFC]'\nat the beginning of the subject, when you're asking for someone to review your\nchange before getting it merged. If the patch is OK to be merged, then it can\nbe merge as-is and the '[RFC]' tag will automatically be removed. If you don't\nwant it to be merged at all, you can simply state it in the message, or use an\nalternate 'WIP/' prefix in front of your tag tag (\"work in progress\").\n\nThe tags are not rigid, follow your intuition first, and they may be readjusted\nwhen your patch is merged. It may happen that a same patch has a different tag\nin two distinct branches. The reason is that a bug in one branch may just be a\ncleanup or safety measure in the other one because the code cannot be triggered.\n\n\nWorking with Git\n----------------\n\nFor a more efficient interaction between the mainline code and your code, you\nare strongly encouraged to try the Git version control system :\n\n                        http://git-scm.com/\n\nIt's very fast, lightweight and lets you undo/redo your work as often as you\nwant, without making your mistakes visible to the rest of the world. It will\ndefinitely help you contribute quality code and take other people's feedback\nin consideration. In order to clone the HAProxy Git repository :\n\n   $ git clone http://git.haproxy.org/git/haproxy.git/       (development)\n\nIf you decide to use Git for your developments, then your commit messages will\nhave the subject line in the format described above, then the whole description\nof your work (mainly why you did it) will be in the body. You can directly send\nyour commits to the mailing list, the format is convenient to read and process.\n\nIt is recommended to create a branch for your work that is based on the master\nbranch :\n\n   $ git checkout -b 20150920-fix-stats master\n\nYou can then do your work and even experiment with multiple alternatives if you\nare not completely sure that your solution is the best one :\n\n   $ git checkout -b 20150920-fix-stats-v2\n\nThen reorder/merge/edit your patches :\n\n   $ git rebase -i master\n\nWhen you think you're ready, reread your whole patchset to ensure there is no\nformatting or style issue :\n\n   $ git show master..\n\nAnd once you're satisfied, you should update your master branch to be sure that\nnothing changed during your work (only needed if you left it unattended for days\nor weeks) :\n\n   $ git checkout -b 20150920-fix-stats-rebased\n   $ git fetch origin master:master\n   $ git rebase master\n\nYou can build a list of patches ready for submission like this :\n\n   $ git format-patch master\n\nThe output files are the patches ready to be sent over e-mail, either via a\nregular e-mail or via git send-email (carefully check the man page). Don't\ndestroy your other work branches until your patches get merged, it may happen\nthat earlier designs will be preferred for various reasons. Patches should be\nsent to the mailing list : haproxy@formilux.org and CCed to relevant subsystem\nmaintainers or authors of the modified files if their address appears at the\ntop of the file.\n\nPlease don't send pull requests, they are really inconvenient as they make it\nmuch more complicate to perform minor adjustments, and nobody benefits from\nany comment on the code while on a list all subscribers learn a little bit on\neach review of anyone else's code.\n\n\nWhat to do if your patch is ignored\n-----------------------------------\n\nAll patches merged are acknowledged by the maintainer who picked it. If you\ndidn't get an acknowledgement, check the mailing list archives to see if your\nmail was properly delivered there and possibly if anyone responded and you did\nnot get their response (please look at http://haproxy.org/ for the mailing list\narchive's address).\n\nIf you see that your mail is there but nobody responded, please recheck:\n  - was the subject clearly indicating that it was a patch and/or that you were\n    seeking some review?\n\n  - was your email mangled by your mail agent? If so it's possible that\n    nobody had the willingness yet to mention it.\n\n  - was your email sent as HTML? If so it definitely ended in spam boxes\n    regardless of the archives.\n\n  - did the patch violate some of the principles explained in this document?\n\nIf none of these cases matches, it might simply be that everyone was busy when\nyour patch was sent and that it was overlooked. In this case it's fine to\neither resubmit it or respond to your own email asking if anything's wrong\nabout it. In general don't expect a response after one week of silence, just\nbecause your email will not appear in anyone else's current window. So after\none week it's time to resubmit.\n\nAmong the mistakes that tend to make reviewers not respond are those who send\nmultiple versions of a patch in a row. It's natural for others then to wait for\nthe series to stabilize. And once it doesn't move anymore everyone forgot about\nit. As a rule of thumb, if you have to update your original email more than\ntwice, first double-check that your series is really ready for submission, and\nsecond, start a new thread and stop responding to the previous one. In this\ncase it is well appreciated to mention a version of your patch set in the\nsubject such as \"[PATCH v2]\", so that reviewers can immediately spot the new\nversion and not waste their time on the old one.\n\nIf you still do not receive any response, it is possible that you've already\nplayed your last card by not respecting the basic principles multiple times\ndespite being told about it several times, and that nobody is willing to spend\nmore of their time than normally needed with your work anymore. Your best\noption at this point probably is to ask \"did I do something wrong\" than to\nresend the same patches.\n\n\nHow to be sure to irritate everyone\n-----------------------------------\n\nAmong the best ways to quickly lose everyone's respect, there is this small\nselection, which should help you improve the way you work with others, if\nyou notice you're already practising some of them:\n  - repeatedly send improperly formatted commit messages, with no type or\n    severity, or with no commit message body. These ones require manual\n    edition, maintainers will quickly learn to recognize your name.\n\n  - repeatedly send patches which break something, and disappear or take a long\n    time to provide a fix.\n\n  - fail to respond to questions related to features you have contributed in\n    the past, which can further lead to the feature being declared unmaintained\n    and removed in a future version.\n\n  - send a new patch iteration without taking *all* comments from previous\n    review into consideration, so that the reviewer discovers they have to do\n    the exact same work again.\n\n  - \"hijack\" an existing thread to discuss something different or promote your\n    work. This will generally make you look like a fool so that everyone wants\n    to stay away from your e-mails.\n\n  - continue to send pull requests after having been explained why they are not\n    welcome.\n\n  - give wrong advices to people asking for help, or sending them patches to\n    try which make no sense, waste their time, and give them a bad impression\n    of the people working on the project.\n\n  - be disrespectful to anyone asking for help or contributing some work. This\n    may actually even get you kicked out of the list and banned from it.\n\n-- end\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 41.8134765625,
          "content": "Installation instructions for HAProxy\n=====================================\n\nThis is a development version, so it is expected to break from time to time,\nto add and remove features without prior notification and it should not be used\nin production, unless you're an experienced user and are willing to follow\nweekly updates. If you are not used to build from sources or if you are not\nused to follow updates then it is recommended that instead you use the packages\nprovided by your software vendor or Linux distribution. Most of them are taking\nthis task seriously and are doing a good job at backporting important fixes.\n\nIf for any reason you would prefer a different version than the one packaged\nfor your system, you want to be certain to have all the fixes or to get some\ncommercial support, other choices are available at http://www.haproxy.com/.\n\n\nAreas covered in this document\n==============================\n\n1) Quick build & install\n2) Basic principles\n3) Build environment\n4) Dependencies\n5) Advanced build options\n6) How to install HAProxy\n\n\n1) Quick build & install\n========================\n\nIf you've already built HAProxy and are just looking for a quick reminder, here\nare a few build examples :\n\n  - recent Linux system with all options, make and install :\n    $ make clean\n    $ make -j $(nproc) TARGET=linux-glibc \\\n           USE_OPENSSL=1 USE_QUIC=1 USE_QUIC_OPENSSL_COMPAT=1 \\\n           USE_LUA=1 USE_PCRE2=1\n    $ sudo make install\n\n  - FreeBSD + OpenSSL, build with all options :\n    $ gmake -j $(sysctl -n hw.ncpu) TARGET=freebsd \\\n           USE_OPENSSL=1 USE_QUIC=1 USE_QUIC_OPENSSL_COMPAT=1 \\\n           USE_LUA=1 USE_PCRE2=1\n\n  - OpenBSD + LibreSSL, build with all options :\n    $ gmake -j $(sysctl -n hw.ncpu) TARGET=openbsd \\\n           USE_OPENSSL=1 USE_QUIC=1 USE_LUA=1 USE_PCRE2=1\n\n  - embedded Linux, build using a cross-compiler :\n    $ make -j $(nproc) TARGET=linux-glibc USE_OPENSSL=1 USE_PCRE2=1 \\\n           CC=/opt/cross/gcc730-arm/bin/gcc CFLAGS=\"-mthumb\" ADDLIB=-latomic\n\n  - Build with static PCRE on Solaris / UltraSPARC :\n    $ make -j $(/usr/sbin/psrinfo -p) TARGET=solaris \\\n           CPU_CFLAGS=\"-mcpu=v9\" USE_STATIC_PCRE2=1\n\nFor more advanced build options or if a command above reports an error, please\nread the following sections.\n\n\n2) Basic principles\n===================\n\nHAProxy uses a single GNU Makefile which supports options on the command line,\nso that there is no need to hack a \"configure\" file to work on your system. The\nmakefile totally supports parallel build using \"make -j <jobs>\" where <jobs>\nmatches the number of usable processors, which on some platforms is returned by\nthe \"nproc\" utility. The explanations below may occasionally refer to some\noptions, usually in the form \"name=value\", which have to be passed to the\ncommand line. This means that the option has to be passed after the \"make\"\ncommand. For example :\n\n  $ make -j $(nproc) TARGET=generic USE_GZIP=1\n\nOne required option is TARGET, it must be set to a target platform name, which\nprovides a number of presets. The list of known platforms is displayed when no\ntarget is specified. It is not strictly required to use the exact target, you\ncan use a relatively similar one and adjust specific variables by hand.\n\nMost configuration variables are in fact booleans. Some options are detected and\nenabled by default if available on the target platform. This is the case for all\nthose named \"USE_<feature>\". These booleans are enabled by \"USE_<feature>=1\"\nand are disabled by \"USE_<feature>=\" (with no value) or \"USE_<feature>=0\". An\nexhaustive list of the supported USE_* features is located at the top of the\nmain Makefile. The last occurrence of such an option on the command line\noverrides any previous one. Example :\n\n  $ make TARGET=generic USE_THREAD=\n\nIn case of error or missing TARGET, a help screen is displayed. It is also\npossible to display a list of all known options using \"make help\".\n\nSome optional components which may depend on third-party libraries, are used\nwith popular tools which are not necessarily standard implementations, or are\nmaintained at slower pace than the core of the project, are located in the\n\"addons/\" directory. These ones may disappear in a future version if the\nproduct they depend on disappears or if their maintainers do not assign enough\nresources to maintain them any more. For this reason they are not built by\ndefault, but some USE_* options are usually provided for them, and their build\nis routinely tested anyway.\n\n\n3) Build environment\n====================\n\nHAProxy requires a working GCC or Clang toolchain and GNU make :\n\n  - GNU make >= 3.80. Note that neither Solaris nor OpenBSD's make work with\n    the GNU Makefile. If you get many syntax errors when running \"make\", you\n    may want to retry with \"gmake\" which is the name commonly used for GNU make\n    on BSD systems.\n\n  - GCC >= 4.2 (up to 14 tested). Older versions can be made to work with a\n    few minor adaptations if really needed. Newer versions may sometimes break\n    due to compiler regressions or behaviour changes. The version shipped with\n    your operating system is very likely to work with no trouble. Clang >= 3.0\n    is also known to work as an alternative solution. Recent versions may emit\n    a bit more warnings that are worth reporting as they may reveal real bugs.\n    TCC (https://repo.or.cz/tinycc.git) is also usable for developers but will\n    not support threading and was found at least once to produce bad code in\n    some rare corner cases (since fixed). But it builds extremely quickly\n    (typically half a second for the whole project) and is very convenient to\n    run quick tests during API changes or code refactoring.\n\n  - GNU ld (binutils package), with no particular version. Other linkers might\n    work but were not tested.\n\nOn debian or Ubuntu systems and their derivatives, you may get all these tools\nat once by issuing the two following commands :\n\n  $ sudo apt-get update\n  $ sudo apt-get install build-essential\n\nOn Fedora, CentOS, RHEL and derivatives, you may get the equivalent packages\nwith the following command :\n\n  $ sudo yum groupinstall \"Development Tools\"\n\nPlease refer to your operating system's documentation for other systems.\n\nIt is also possible to build HAProxy for another system or platform using a\ncross-compiler but in this case you probably already have installed these\ntools.\n\nBuilding HAProxy may require between 60 and 80 MB of free space in the\ndirectory where the sources have been extracted, depending on the debugging\noptions involved.\n\n\n4) Dependencies\n===============\n\nHAProxy in its basic form does not depend on anything beyond a working libc.\nHowever a number of options are enabled by default, or are highly recommended,\nand these options will typically involve some external components or libraries,\ndepending on the targeted platform.\n\nOptional dependencies may be split into several categories :\n\n  - memory allocation\n  - regular expressions\n  - multi-threading\n  - password encryption\n  - cryptography\n  - compression\n  - lua\n  - device detection\n  - miscellaneous\n\n\n4.1) Memory allocation\n----------------------\nBy default, HAProxy uses the standard malloc() call provided by the libc. It\nmay also be built to use jemalloc, which is fast and thread-safe. In order to\nuse it, please add \"-ljemalloc\" to the ADDLIB variable. You may possibly also\nneed to append \"-lpthread\" and/or \"-ldl\" depending on the operating system.\n\n\n4.2) Regular expressions\n------------------------\nHAProxy may make use regular expressions (regex) to match certain patterns. The\nregex engine is provided by default in the libc. On some operating systems, it\nmight happen that the original regex library provided by the libc is too slow,\ntoo limited or even bogus. For example, on older Solaris versions up to 8, the\ndefault regex used not to properly extract group references, without reporting\ncompilation errors. Also, some early versions of the GNU libc used to include a\nregex engine which could be slow or even crash on certain patterns.\n\nIf you plan on importing a particularly heavy configuration involving a lot of\nregex, you may benefit from using some alternative regex implementations such as\nPCRE. HAProxy natively supports PCRE and PCRE2 (recommended), both in standard\nand JIT flavors (Just In Time). The following options are available depending on\nthe library version provided on your system :\n\n  - \"USE_PCRE=1\"         : enable PCRE version 1, dynamic linking\n  - \"USE_STATIC_PCRE=1\"  : enable PCRE version 1, static linking\n  - \"USE_PCRE_JIT=1\"     : enable PCRE version 1 in JIT mode\n  - \"USE_PCRE2=1\"        : enable PCRE version 2, dynamic linking\n  - \"USE_STATIC_PCRE2=1\" : enable PCRE version 2, static linking\n  - \"USE_PCRE2_JIT=1\"    : enable PCRE version 2 in JIT mode\n\nBoth of these libraries may be downloaded from https://www.pcre.org/.\n\nBy default, the include and library paths are figured from the \"pcre-config\"\nand \"pcre2-config\" utilities. If these ones are not installed or inaccurate\n(for example when cross-compiling), it is possible to force the path to include\nfiles using \"PCRE_INC\" and \"PCRE2_INC\" respectively, and the path to library\nfiles using \"PCRE_LIB\" and \"PCRE2_LIB\" respectively. For example :\n\n  $ make TARGET=generic \\\n    USE_PCRE2_JIT=1 PCRE2_INC=/opt/cross/include PCRE2_LIB=/opt/cross/lib\n\n\n4.3) Multi-threading\n--------------------\nOn some systems for which positive feedback was reported, multi-threading will\nbe enabled by default. When multi-threading is used, the libpthread library\n(POSIX threading) will be used. If the target system doesn't contain such a\nlibrary, it is possible to forcefully disable multi-threading by adding\n\"USE_THREAD=\" on the command line.\n\n\n4.4) Password encryption\n------------------------\nMany systems provide password encryption functions used for authentication. On\nsome systems these functions are part of the libc. On others, they're part of a\nseparate library called \"libcrypt\". The default targets are pre-configured\nbased on which system needs the library. It is possible to forcefully disable\nthe linkage against libcrypt by adding \"USE_LIBCRYPT=\" on the command line, or\nto forcefully enable it using \"USE_LIBCRYPT=1\".\n\n\n4.5) Cryptography\n-----------------\nFor SSL/TLS, it is necessary to use a cryptography library. HAProxy currently\nsupports the OpenSSL library, and is known to build and work with branches\n1.0.0, 1.0.1, 1.0.2, 1.1.0, 1.1.1, and 3.0 to 3.4. It is recommended to use\nat least OpenSSL 1.1.1 to have support for all SSL keywords and configuration\nin HAProxy. OpenSSL follows a long-term support cycle similar to HAProxy's,\nand each of the branches above receives its own fixes, without forcing you to\nupgrade to another branch. There is no excuse for staying vulnerable by not\napplying a fix available for your version. There is always a small risk of\nregression when jumping from one branch to another one, especially when it's\nvery new, so it's preferable to observe for a while if you use a different\nversion than your system's defaults. Specifically, it has been well established\nthat OpenSSL 3.0 can be 2 to 20 times slower than earlier versions on\nmultiprocessor systems due to design issues that cannot be fixed without a\nmajor redesign, so in this case upgrading should be carefully thought about\n(please see https://github.com/openssl/openssl/issues/20286 and\nhttps://github.com/openssl/openssl/issues/17627). If a migration to 3.x is\nmandated by support reasons, at least 3.1 recovers a small fraction of this\nimportant loss.\n\nThree OpenSSL derivatives called LibreSSL, QUICTLS, and AWS-LC are\nreported to work as well. While there are some efforts from the community to\nensure they work well, OpenSSL remains the primary target and this means that\nin case of conflicting choices, OpenSSL support will be favored over other\noptions.  Note that QUIC is not fully supported when haproxy is built with\nOpenSSL. In this case, QUICTLS is the preferred alternative.  As of writing\nthis, the QuicTLS project follows OpenSSL very closely and provides update\nsimultaneously, but being a volunteer-driven project, its long-term future does\nnot look certain enough to convince operating systems to package it, so it\nneeds to be build locally. See the section about QUIC in this document.\n\nA fifth option is wolfSSL (https://github.com/wolfSSL/wolfssl). It is the only\nsupported alternative stack not based on OpenSSL, yet which implements almost\nall of its API and natively supports QUIC. At the time of writing, the vast\nmajority of SSL features are well supported by wolfSSL though not everything is\nexposed in haproxy yet, advanced users might notice tiny differences that the\nwolfSSL and HAProxy teams are working on together to address in the wolfSSL\ncode base. Features like ecdsa/rsa dual stack, crt-list and client auth might\nnot work as expected. As of November 2023, wolfSSL support is considered\nexperimental. This stack is not affected by OpenSSL's design issue regarding\nmulti-processor systems and is viewed by the HAProxy team as the most promising\nmid-term solution for general deployments and QUIC deployments.\n\nIn order to enable SSL/TLS support, simply pass \"USE_OPENSSL=1\" on the command\nline and the default library present on your system will be used :\n\n  $ make TARGET=generic USE_OPENSSL=1\n\nIf you want to use a different version from the one provided by your system\n(which is not recommended due to the risk of missing security fixes), it is\npossible to indicate the path to the SSL include files using SSL_INC, and the\nSSL library files using SSL_LIB. Example :\n\n  $ make TARGET=generic \\\n    USE_OPENSSL=1 SSL_INC=/opt/ssl-1.1.1/include SSL_LIB=/opt/ssl-1.1.1/lib\n\nTo use HAProxy with WolfSSL, WolfSSL must be built with haproxy support, at\nleast WolfSSL 5.6.6 is needed, but a development version might be needed for\nsome of the features:\n\n  $ cd ~/build/wolfssl\n  $ ./configure --enable-haproxy --enable-quic --prefix=/opt/wolfssl-5.6.6/\n  $ make -j $(nproc)\n  $ make install\n\nPlease also note that wolfSSL supports many platform-specific features that may\naffect performance, and that for production uses it might be a good idea to\ncheck them using \"./configure --help\". Please refer to the lib's documentation.\n\nWhen running wolfSSL in chroot, either mount /dev/[u]random devices into the\nchroot:\n\n  $ mkdir -p /path/to/chrootdir/dev/\n  $ mknod -m 444 /path/to/chrootdir/dev/random c 1 8\n  $ mknod -m 444 /path/to/chrootdir/dev/urandom c 1 9\n\nOr, if your OS supports it, enable the getrandom() syscall by appending the\nfollowing argument to the wolfSSL configure command:\n\n  EXTRA_CFLAGS=-DWOLFSSL_GETRANDOM=1\n\nBuilding HAProxy with wolfSSL requires to specify the API variant on the \"make\"\ncommand line, for example:\n\n  $ cd ~/build/haproxy\n  $ make -j $(nproc) TARGET=generic USE_OPENSSL_WOLFSSL=1 USE_QUIC=1 \\\n    SSL_INC=/opt/wolfssl-5.6.6/include SSL_LIB=/opt/wolfssl-5.6.6/lib\n\nTo use HAProxy with AWS-LC you must have version v1.22.0 or newer of AWS-LC\nbuilt and installed locally.\n $ cd ~/build/aws-lc\n $ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/opt/aws-lc\n $ make -j $(nproc)\n $ make install\n\nBuilding HAProxy with AWS-LC requires you to enable AWS-LC support, and specify\nthe path it was installed to when running make for HAPRoxy.\n\n $ cd ~/build/haproxy\n $ make -j $(nproc) TARGET=generic USE_OPENSSL_AWSLC=1 \\\n   SSL_INC=/opt/aws-lc/include SSL_LIB=/opt/aws-lc/lib\n\nIn order to link OpenSSL statically against HAProxy, first download OpenSSL\nfrom https://www.openssl.org/ then build it with the \"no-shared\" keyword and\ninstall it to a local directory, so your system is not affected :\n\n  $ export STATICLIBSSL=/tmp/staticlibssl\n  $ ./config --prefix=$STATICLIBSSL no-shared\n  $ make && make install_sw\n\nThen when building haproxy, pass that path via SSL_INC and SSL_LIB :\n\n  $ make TARGET=generic \\\n    USE_OPENSSL=1 SSL_INC=$STATICLIBSSL/include SSL_LIB=$STATICLIBSSL/lib\n\nWhen building with OpenSSL on some systems, you may also need to enable support\nfor the \"libz\" library, which is visible if the linker complains about function\n\"deflateInit()\" not being found. In this case, simply append \"ADDLIB=-lz\" to\nthe command line.\n\nIt is worth mentioning that asynchronous cryptography engines are supported on\nOpenSSL 1.1.0 and above. Such engines are used to access hardware cryptography\nacceleration that might be present on your system. Due to API changes that\nappeared with OpenSSL 3.0 and cause lots of build warnings, engines are not\nenabled by default anymore in HAProxy 2.6. It is required to pass USE_ENGINE=1\nif they are desired.\n\nIf for any reason you are forced to use OpenSSL 3.x and the performance is not\nacceptable at all, you may want to try replacing the pthread locks that OpenSSL\nuses with HAProxy's much lighter locks that are able to emulate them:\n\n  $ make TARGET=generic \\\n    USE_OPENSSL=1 USE_PTHREAD_EMULATION=1\n\nOn large multi-processor systems, this may result in a performance increase of\n50 to 100% on OpenSSL 3.0 depending on the level of contention, but this will\nof course not recover everything. It should not be used by distro packagers as\nit is a bit less observable.\n\n\n4.6) Compression\n----------------\nHAProxy can compress HTTP responses before delivering them to clients, in order\nto save network bandwidth. Two compression options are available. The first one\nrelies on the libslz library (http://libslz.org) that is embedded in haproxy.\nIt is enabled by default as it is very fast and does not keep a copy of the\ncontents in memory. It is possible to disable it, for example for very small\nsystems, by passing \"USE_SLZ=\" to the \"make\" command.\n\nPlease note that SLZ will benefit from some CPU-specific instructions like the\navailability of the CRC32 extension on some ARM processors. Thus it can further\nimprove its performance to build with:\n\n  - \"CPU_CFLAGS=-march=native\" on the target system or\n  - \"CPU_CFLAGS=-march=armv81\" on modern systems such as Graviton2 or A55/A75\n     and beyond)\n  - \"CPU_CFLAGS=-march=a72\" (e.g. for RPi4, or AWS Graviton)\n  - \"CPU_CFLAGS=-march=a53\" (e.g. for RPi3)\n  - \"CPU_CFLAGS=-march=armv8-auto\" automatic detection with minor runtime\n     penalty)\n\nA second option involves the widely known zlib library, which is very likely\ninstalled on your system. In order to use zlib, simply pass \"USE_ZLIB=1\" to the\n\"make\" command line, which will also automatically disable SLZ. If the library\nis not installed in your default system's path, it is possible to specify the\npath to the include files using ZLIB_INC, and the path to the library files\nusing ZLIB_LIB :\n\n  $ make TARGET=generic \\\n    USE_ZLIB=1 ZLIB_INC=/opt/zlib-1.2.11/include ZLIB_LIB=/opt/zlib-1.2.11/lib\n\nZlib is commonly found on most systems, otherwise updates can be retrieved from\nhttp://www.zlib.net/. It is easy and fast to build, and new versions sometimes\nprovide better performance so it might be worth using an up-to-date one.\n\nZlib compresses a bit better than libslz but at the expense of more CPU usage\n(about 3.5 times more minimum), and a huge memory usage (~260 kB per compressed\nstream). The only valid reason for uzing Zlib instead of SLZ here usually is to\ndeal with a very limited internet bandwidth while CPU and RAM are abundant so\nthat the last few percent of compression ratio are worth the invested hardware.\n\n\n4.7) Lua\n--------\nLua is an embedded programming language supported by HAProxy to provide more\nadvanced scripting capabilities. Only versions 5.3 and above are supported.\nIn order to enable Lua support, please specify \"USE_LUA=1\" on the command line.\nSome systems provide this library under various names to avoid conflicts with\nprevious versions. By default, HAProxy looks for \"lua5.4\", \"lua54\", \"lua5.3\",\n\"lua53\", \"lua\". If your system uses a different naming, you may need to set the\nlibrary name in the \"LUA_LIB_NAME\" variable.\n\nIf Lua is not provided on your system, it can be very simply built locally. It\ncan be downloaded from https://www.lua.org/, extracted and built, for example :\n\n  $ cd /opt/lua-5.4.6\n  $ make linux\n\nThe path to the include files and library files may be set using \"LUA_INC\" and\n\"LUA_LIB\" respectively. For example :\n\n  $ make TARGET=generic \\\n    USE_LUA=1 LUA_INC=/opt/lua-5.4.6/src LUA_LIB=/opt/lua-5.4.6/src\n\n\n4.8) Device detection\n---------------------\nHAProxy supports several device detection modules relying on third party\nproducts. Some of them may provide free code, others free libs, others free\nevaluation licenses. Please read about their respective details in the\nfollowing files :\n\n    doc/DeviceAtlas-device-detection.txt   for DeviceAtlas\n    doc/51Degrees-device-detection.txt     for 51Degrees\n    doc/WURFL-device-detection.txt         for Scientiamobile WURFL\n\n\n4.9) Miscellaneous\n------------------\nSome systems have specificities. Usually these specificities are known and/or\ndetected and properly set for you. If you need to adjust the behaviour, here\nare the extra libraries that may be referenced at build time :\n\n  - USE_RT=1      build with librt, which is sometimes needed on some systems\n                  when using threads. It is set by default on Linux platforms,\n                  and may be disabled using \"USE_RT=\" if your system doesn't\n                  have one. You may have to set it as well if you face an error\n                  indicating that clock_gettime() was not found.\n\n  - USE_DL=1      build with libdl, which is usually needed for Lua and OpenSSL\n                  on Linux. It is automatically detected and may be disabled\n                  using \"USE_DL=\", though it should never harm.\n\n4.10) Common errors\n-------------------\nSome build errors may happen depending on the options combinations or the\nselected target. When facing build errors, if you know that your system is a\nbit special or particularly old, start from TARGET=generic, it is easier to\nstart from there and fix the remaining issues than trying to degrade another\ntarget. Common issues may include:\n\n  - clock_gettime() not found\n    => your system needs USE_RT=1\n\n  - many __sync_<something> errors in many files\n    => your gcc is too old, build without threads.\n\n  - many openssl errors\n    => your OpenSSL version really is too old, do not enable OpenSSL\n\n  - quic_conn-t.h: field 'level' has incomplete type\n    => you tried to build QUIC with the legacy OpenSSL library, which does\n       not support QUIC. Either disable QUIC with \"USE_QUIC=\" or use any\n       other supported compatible library.\n\n  - many \"dereferencing pointer 'sa.985' does break strict-aliasing rules\"\n    => these warnings happen on old compilers (typically gcc-4.4), and may\n       safely be ignored; newer ones are better on these.\n\n\n4.11) QUIC\n----------\nQUIC is the new transport layer protocol and is required for HTTP/3. This\nprotocol stack is currently supported as an experimental feature in haproxy on\nthe frontend side. In order to enable it, use \"USE_QUIC=1 USE_OPENSSL=1\".\n\nNote that QUIC is not fully supported by the OpenSSL library. Indeed QUIC 0-RTT\ncannot be supported by OpenSSL contrary to others libraries with full QUIC\nsupport. The preferred option is to use QUICTLS. This is a fork of OpenSSL with\na QUIC-compatible API. Its repository is available at this location:\n\n     https://github.com/quictls/openssl\n\nYou can use the following instruction to build a functional QUICTLS.\n\n  $ ./config --libdir=lib [--prefix=/opt/quictls]\n  $ make\n  $ make install\n\nOn a development environment, use SSL_INC and SSL_LIB when building haproxy to\npoint to the correct cryptographic library. It may be useful to specify QUICTLS\nlocation via rpath for haproxy execution. Example :\n\n  $ make -j $(nproc) TARGET=generic \\\n    USE_QUIC=1 \\\n    USE_OPENSSL=1 SSL_INC=/opt/quictls/include SSL_LIB=/opt/quictls/lib \\\n    LDFLAGS=\"-Wl,-rpath,/opt/quictls/lib\"\n\nAlternately, building against wolfSSL is supported as well, for example this\nway assuming that wolfSSL was installed in /opt/wolfssl-5.6.0 as shown in 4.5:\n\n  $ make -j $(nproc) TARGET=generic \\\n    USE_QUIC=1 \\\n    USE_OPENSSL_WOLFSSL=1 \\\n    SSL_INC=/opt/wolfssl-5.6.0/include SSL_LIB=/opt/wolfssl-5.6.0/lib\n    LDFLAGS=\"-Wl,-rpath,/opt/wolfssl-5.6.0/lib\"\n\nAs last resort, haproxy may be compiled against OpenSSL as follows:\n\n  $ make TARGET=generic USE_OPENSSL=1 USE_QUIC=1 USE_QUIC_OPENSSL_COMPAT=1\n\nNote that QUIC 0-RTT is not supported by haproxy QUIC stack when built against\nOpenSSL. In addition to this compilation requirements, the QUIC listener\nbindings must be explicitly enabled with a specific QUIC tuning parameter.\n(see \"limited-quic\" global parameter of haproxy Configuration Manual).\n\n\n5) How to build HAProxy\n=======================\n\nThis section assumes that you have already read section 2 (basic principles)\nand section 3 (build environment). It often refers to section 4 (dependencies).\nIt goes into more details with the main options.\n\n\n5.1) Configuring the TARGET\n---------------------------\nTo build haproxy, you have to choose your target OS amongst the following ones\nand assign it to the TARGET variable :\n\n  - linux-glibc         for Linux kernel 2.6.28 and above\n  - linux-glibc-legacy  for Linux kernel 2.6.28 and above without new features\n  - linux-musl          for Linux kernel 2.6.28 and above with musl libc\n  - solaris             for Solaris 10 and above\n  - freebsd             for FreeBSD 10 and above\n  - dragonfly           for DragonFlyBSD 4.3 and above\n  - netbsd              for NetBSD 8 and above\n  - osx                 for Mac OS/X\n  - openbsd             for OpenBSD 6.3 and above\n  - aix51               for AIX 5.1\n  - aix52               for AIX 5.2\n  - aix72-gcc           for AIX 7.2 (using gcc)\n  - cygwin              for Cygwin\n  - haiku               for Haiku\n  - generic             for any other OS or version.\n  - custom              to manually adjust every setting\n\nExample:\n    $ make -j $(nproc) TARGET=linux-glibc\n\nAIX 5.3 is known to work with the generic target. However, for the binary to\nalso run on 5.2 or earlier, you need to build with DEFINE=\"-D_MSGQSUPPORT\",\notherwise __fd_select() will be used while not being present in the libc, but\nthis is easily addressed using the \"aix52\" target. If you get build errors\nbecause of strange symbols or section mismatches, simply remove -g from\nARCH_FLAGS.\n\nBuilding on AIX 7.2 works fine using the \"aix72-gcc\" TARGET. It adds two\nspecial CFLAGS to prevent the loading of AIX's xmem.h and var.h. This is done\nby defining the corresponding include-guards _H_XMEM and _H_VAR. Without\nexcluding those header-files the build fails because of redefinition errors.\nFurthermore, the atomic library is added to the LDFLAGS to allow for\nmultithreading via USE_THREAD.\n\nYou can easily define your own target with the GNU Makefile. Unknown targets\nare processed with no default option except USE_POLL=default. So you can very\nwell use that property to define your own set of options. USE_POLL and USE_SLZ\ncan even be disabled by setting them to an empty string or a zero. For\nexample :\n\n  $ gmake TARGET=tiny USE_POLL=\"\" USE_SLZ=0 TARGET_CFLAGS=-fomit-frame-pointer\n\n\n5.2) Adding extra CFLAGS for compiling\n--------------------------------------\nA generic CFLAGS variable may be set to append any option to pass to the C\ncompiler. These flags are passed last so the variable may be used to override\nother options such as warnings, optimization levels, include paths etc.\n\nA default optimization level of -O2 is set by variable OPT_CFLAGS which may be\noverridden if desired. It's used early in the list of CFLAGS so that any other\nset of CFLAGS providing a different value may easily override it.\n\nSome platforms may benefit from some CPU-specific options that will enable\ncertain instruction sets, word size or endianness for example. One of them is\nthe common \"-march=native\" that indicates to modern compilers that they need to\noptimize for the machine the compiler is running on. Such options may be either\npassed in the CPU_CFLAGS or in the CFLAGS variable, either will work though\none may be more convenient for certain methods of packaging and the other one\nfor other methods. Among the many possible options, the following ones are\nknown for having successfully been used:\n\n  - \"-march=native\" for a native build\n  - \"-march=armv8-a+crc\" for older ARM Cortex A53/A72/A73 (such as RPi 3B/4B)\n  - \"-march=armv8.1-a\" for modern ARM Cortex A55/A76, Graviton2+, RPi 5\n  - \"-march=armv8-a+crc -moutline-atomics\" to support older ARM with better\n      support of modern cores with gcc-10+\n  - \"-mavx\", \"-mavx2\", \"-mavx512\", to enable certain x86 SIMD instruction sets\n  - \"-march=i586\" to support almost all 32-bit x86 systems\n  - \"-march=i686\" to support only the latest 32-bit x86 systems\n  - \"-march=i386\" to support even the oldest 32-bit x86 systems\n  - \"-mlittle-endian -march=armv5te\" for some little-endian ARMv5 systems\n  - \"-mcpu=v9 -mtune=ultrasparc -m64\" for a 64-bit Solaris SPARC build\n  - \"-march=1004kc -mtune=1004kc\" for some multi-core 32-bit MIPS 1004Kc\n  - \"-march=24kc -mtune=24kc\" for some single-core 32-bit MIPS 24Kc\n\nIf you are building for a different system than the one you're building on,\nthis is called \"cross-compiling\". HAProxy supports cross-compilation pretty\nwell and tries to ease it by letting you adjust paths to all libraries (please\nread section 4 on dependencies for more details). When cross-compiling, you\njust need to pass the path to your compiler in the \"CC\" variable, and the path\nto the linker in the \"LD\" variable. Most of the time, setting the CC variable\nis enough since LD points to it by default.\n\nBy default the build process runs in quiet mode and hide the details of the\ncommands that are executed. This allows to more easily catch build warnings\nand see what is happening. However it is not convenient at all to observe what\nflags are passed to the compiler nor what compiler is involved. Simply append\n\"V=1\" to the \"make\" command line to switch to verbose mode and display the\ndetails again. It is recommended to use this option when cross-compiling to\nverify that the paths are correct and that /usr/include is never involved.\n\nIf you need to pass some defines to the preprocessor or compiler, you may pass\nthem all in the DEFINE variable. Example:\n\n  $ make TARGET=generic DEFINE=\"-DDEBUG_DONT_SHARE_POOLS\"\n\nThe ADDINC variable may be used to add some extra include paths; this is\nsometimes needed when cross-compiling. Similarly the ADDLIB variable may be\nused to specify extra paths to library files. Example :\n\n  $ make TARGET=generic ADDINC=-I/opt/cross/include ADDLIB=-L/opt/cross/lib64\n\n\n5.3) Adding extra LDFLAGS for linking\n-------------------------------------\nIf a particular target requires specific link-time flags, these can be passed\nvia the LDFLAGS variable. This variable is passed to the linker immediately\nafter ARCH_FLAGS. One of the common use cases is to add some run time search\npaths for a dynamic library that's not part of the default system search path:\n\n    $ make -j $(nproc) TARGET=generic USE_OPENSSL_AWSLC=1 USE_QUIC=1 \\\n      SSL_INC=/opt/aws-lc/include SSL_LIB=/opt/aws-lc/lib \\\n      LDFLAGS=\"-Wl,-rpath,/opt/aws-lc/lib\"\n\nSome options require to be consistent between the compilation stage and the\nlinking stage. This is the case for options which enable debugging (e.g. \"-g\"),\nprofiling (\"-pg\"), link-time optimization (\"-flto\"), endianness (\"-EB\", \"-EL\"),\nbit width (\"-m32\", \"-m64\"), or code analyzers (\"-fsanitize=address\"). These\noptions can be passed via the ARCH_FLAGS variable, which will be used at both\nstages during the build process, thus avoiding the risk of inconsistencies. By\ndefault, ARCH_FLAGS only contains \"-g\" to enable the generation of debug\nsymbols. For example, in order to build a 32-bit binary on an x86_64 Linux\nsystem with SSL support without support for compression but when OpenSSL\nrequires ZLIB anyway :\n\n    $ make TARGET=linux-glibc ARCH_FLAGS=\"-m32 -g\" USE_OPENSSL=1 ADDLIB=-lz\n\nand building with the address sanitizer (ASAN) simply requires:\n\n    $ make TARGET=linux-glibc ARCH_FLAGS=\"-fsanitize=address -g\"\n\n\n5.4) Other common OS-specific options\n-------------------------------------\nRecent systems can resolve IPv6 host names using getaddrinfo(). This primitive\nis not present in all libcs and does not work in all of them either. Support in\nglibc was broken before 2.3. Some embedded libs may not properly work either,\nthus, support is disabled by default, meaning that some host names which only\nresolve as IPv6 addresses will not resolve and configs might emit an error\nduring parsing. If you know that your OS libc has reliable support for\ngetaddrinfo(), you can add USE_GETADDRINFO=1 on the make command line to enable\nit. This is the recommended option for most Linux distro packagers since it's\nworking fine on all recent mainstream distros. It is automatically enabled on\nSolaris 8 and above, as it's known to work.\n\nIf your system supports PCRE (Perl Compatible Regular Expressions), then you\nreally should build with libpcre which is between 2 and 10 times faster than\nother libc implementations. Regex are used for header processing (deletion,\nrewriting, allow, deny). Please see section 4 about dependencies to figure\nhow to build with PCRE support.\n\nIt is possible to add native support for SSL, by passing \"USE_OPENSSL=1\" on the\nmake command line. The libssl and libcrypto will automatically be linked with\nHAProxy. Some systems also require libz, so if the build fails due to missing\nsymbols such as deflateInit(), then try again with \"ADDLIB=-lz\". Please check\nsection 4 about dependencies for more information on how to build with OpenSSL.\n\nHAProxy can compress HTTP responses to save bandwidth. Please see section 4\nabout dependencies to see the available libraries and associated options.\n\nIf you need to pass other defines, includes, libraries, etc... then please\ncheck the Makefile to see which ones will be available in your case, and\nuse/override the USE_* variables from the Makefile.\n\n\n5.5) Adjusting the build error / warning behavior\n-------------------------------------------------\nIf the ERR variable is set to any non-empty value other than \"0\", then -Werror\nwill be added to the compiler so that any build warning will trigger an error.\nThis is the recommended way to build when developing, and it is expected that\ncontributed patches were tested with ERR=1. Similarly, for developers, another\nvariable, FAILFAST enables -Wfatal-errors when set to non-empty except 0, and\nmakes the compiler stop at the first error instead of scrolling pages. It's\nessentially a matter of taste.\n\nPackagers who want to achieve the cleanest warning-free builds may be\ninterested in knowing that all enabled warnings are normally placed into\nthe WARN_CFLAGS variable. The variable contains a list of pre-established\nwarnings and a list of some that are dynamically detected on the compiler.\nIf the build environment or toolchain doesn't even support some of the basic\nones, it is then possible to just redefine them by passing the main ones in\nWARN_CFLAGS (e.g. at the very least -W -Wall). Similarly, it may sometimes\nbe desirable not to disable certain warnings when porting to new platforms\nor during code audits, or simply because the toolchain doesn't support some\nof the most basic -Wno options. In this case, the list of automatic -Wno\nvariables is specified by variable NOWARN_CFLAGS, which is passed after\nWARN_CFLAGS (i.e. it can undo some of the WARN_CFLAGS settings). Be careful\nwith it, as clearing this list can yield many warnings depending on the\ncompiler and options.\n\nThe DEP variable is automatically set to the list of include files and also\ndesignates a file that contains the last build options used. It is used during\nthe build process to compute dependencies and decide whether or not to rebuild\neverything (we do rebuild everything when .h files are touched or when build\noptions change). Sometimes when performing fast build iterations on inline\nfunctions it may be desirable to avoid a full rebuild. Forcing this variable\nto be empty will be sufficient to achieve this. This variable must never be\nforced to produce final binaries, and must not be used during bisect sessions,\nas it will often lead to the wrong commit.\n\nExamples:\n  # silence strict-aliasing warnings with old gcc-4.4:\n  $ make -j$(nproc) TARGET=linux-glibc CC=gcc-44 CFLAGS=-fno-strict-aliasing\n\n  # disable all warning options:\n  $ make -j$(nproc) TARGET=linux-glibc CC=mycc WARN_CFLAGS= NOWARN_CFLAGS=\n\n  # enable -Werror and -Wfatal-errors to immediately stop on error\n  $ make -j$(nproc) TARGET=linux-glibc ERR=1 FAILFAST=1\n\n  # try to restart the build where it was after hacking an include file, to\n  # check if that was sufficient or not:\n  $ make -j$(nproc) TARGET=linux-glibc ERR=1 DEP=\n\n\n5.6) Enabling a DEBUG build\n---------------------------\nThe DEBUG variable is used to extend the CFLAGS and is preset to a list of\nbuild-time options that are known for providing significant reliability\nimprovements and a barely perceptible performance cost. Unless instructed to do\nso by some project developers, or trying to save the last ounce of performance,\nthese options should not be changed. Among the usable ones are:\n  - -DDEBUG_STRICT: enable some runtime assertions at key places in the code.\n    The goal is to emit a warning or stop the program if certain expected\n    conditions are not met, and whose violation will result in a misbehaving\n    process due to memory corruption or other significant trouble, possibly\n    caused by an attempt to exploit a bug in the program or a library it relies\n    on. The option knows 3 values: 0 (disable all such assertions, not\n    recommended), 1 (enable all inexpensive assertions, the default), and\n    2 (enable all assertions even in fast paths). Setting the option with no\n    value corresponds to 1, which is the recommended value for production.\n\n  - -DDEBUG_STRICT_ACTION: indicates how to react to a check violation. There\n    are 3 types of checks: BUG (condition that is known to have serious\n    consequences), WARN (warning about a highly suspicious condition which the\n    process may recover from, but whose unknown cause may also have serious\n    consequences), CHECK (verification whether a condition that developers now\n    consider impossible still happens). The variable takes a value from 0 to 3,\n    that adjusts the behavior on these 3 violations:\n\n               BUG       WARN      CHECK\n         0     warn      warn      warn\n         1     stop      warn      warn\n         2     stop      stop      warn\n         3     stop      stop      stop\n\n    The default value is 1, which is the best balance for production in that it\n    will do its best to prevent a known bogus process from running away, but\n    will let it run if it believes it can recover. Users running the process in\n    sensitive environments (finance etc) may prefer to run at level 2 to make\n    sure to stop any detected anomaly before it may have an impact. Level 3\n    should only be used at the request of developers. In any case, any emitted\n    warning should be reported to developers.\n\n  - -DDEBUG_MEMORY_POOLS: this enables by default extra controls around memory\n    allocation that will help detect coding errors such as double-frees and\n    freeing a bad memory location. It will also detect earlier risks of memory\n    overflows, which may have security implications. The cost is extremely low\n    (less than 1% increase in memory footprint). This is equivalent to adding\n    \"-dMtag\" on the command line. This option is enabled in the default build\n    options and may be disabled with -DDEBUG_MEMORY_POOLS=0.\n\n  - -DDEBUG_DONT_SHARE_POOLS: this will keep separate pools for same-sized\n    objects of different types. Using this increases the memory usage a little\n    bit but further reduces the risk of memory management related bugs and will\n    lead to more accurate traces in case of error. It is equivalent to adding\n    \"-dMno-merge\" on the command line. It is not enabled in the default build\n    options.\n\n  - -DDEBUG_POOL_INTEGRITY: this will enable runtime detection and stopping of\n    a class of bugs known as \"use after free\", which consists in modifying a\n    memory area after freeing it while it was reused for something else. This\n    option is quite powerful but such bugs are fortunately extremely rare, and\n    it will cause a measurable performance degradation (a few percent). This is\n    equivalent to adding \"-dMcold-first,integrity\" on the command line. This\n    option is not enabled by default but users running development versions on\n    moderate performance sites in order to participate to reliability testing\n    are encouraged to use it, in combination with -DDEBUG_DONT_SHARE_POOLS and\n    -DDEBUG_MEMORY_POOLS, as this could catch dangerous regressions.\n\nAs such, \"-DDEBUG_STRICT -DDEBUG_MEMORY_POOLS\" is implicit and recommended for\nproduction. For security sensitive environments, it is recommended to use\n\"-DDEBUG_STRICT_ACTION=2 -DDEBUG_DONT_SHARE_POOLS\". When testing new versions\nor trying to nail a bug down, use \"-DDEBUG_STRICT=2 -DDEBUG_STRICT_ACTION=2 \\\n-DDEBUG_DONT_SHARE_POOLS -DDEBUG_POOL_INTEGRITY\". Finally in order to minimize\nmemory usage by disabling these integrity features, it is also possible to use\n\"-DDEBUG_STRICT=0 -DDEBUG_MEMORY_POOLS=0\".\n\n\n5.7) Summary of the Makefile's main variables\n---------------------------------------------\n\nThe following variables are commonly used:\n  - TARGET        platform name, empty by default, see help\n  - CC            path to the C compiler, defaults to \"cc\"\n  - LD            path to the linker, defaults to \"$CC\"\n  - CFLAGS        CFLAGS to append at the end, empty by default\n  - LDFLAGS       LDFLAGS to append at the end, empty by default\n  - ARCH_FLAGS    flags common to CC and LD (-fsanitize, etc). Defaults to \"-g\"\n  - OPT_CFLAGS    C compiler optimization level. Defaults to \"-O2\"\n  - WARN_CFLAGS   list of autodetected C compiler warnings to enable\n  - NOWARN_CFLAGS list of autodetected C compiler warnings to disable\n  - ADDINC        include directives to append at the end, empty by default\n  - ADDLIB        lib directives to append at the end, empty by default\n  - DEFINE        extra macros definitions for compiler, empty by default\n  - DEBUG         extra DEBUG options for compiler, empty by default\n  - ERR           enables -Werror if non-zero, empty by default\n  - FAILFAST      enables -Wfatal-error if non-zero, empty by default\n\n\n6) How to install HAProxy\n=========================\n\nTo install haproxy, you can either copy the single resulting binary to the\nplace you want, or run :\n\n    $ sudo make install\n\nIf you're packaging it for another system, you can specify its root directory\nin the usual DESTDIR variable.\n\n-- end\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.9814453125,
          "content": "HAPROXY's license - 2006/06/15\n\nHistorically, haproxy has been covered by GPL version 2. However, an issue\nappeared in GPL which will prevent external non-GPL code from being built\nusing the headers provided with haproxy. My long-term goal is to build a core\nsystem able to load external modules to support specific application protocols.\n\nSince some protocols are found in rare environments (finance, industry, ...),\nsome of them might be accessible only after signing an NDA. Enforcing GPL on\nsuch modules would only prevent them from ever being implemented, while not\nproviding anything useful to ordinary users.\n\nFor this reason, I *want* to be able to support binary only external modules\nwhen needed, with a GPL core and GPL modules for standard protocols, so that\npeople fixing bugs don't keep them secretly to try to stay over competition.\n\nThe solution was then to apply the LGPL license to the exportable include\nfiles, while keeping the GPL for all the rest. This way, it still is mandatory\nto redistribute modified code under customer request, but at the same time, it\nis expressly permitted to write, compile, link and load non-GPL code using the\nLGPL header files and not to distribute them if it causes a legal problem.\n\nOf course, users are strongly encouraged to continue the work under GPL as long\nas possible, since this license has allowed useful enhancements, contributions\nand fixes from talented people around the world.\n\nDue to the incompatibility between the GPL and the OpenSSL licence, you must\napply the GPL/LGPL licence with the following exception:\nThis program is released under the GPL with the additional exemption that\ncompiling, linking, and/or using OpenSSL is allowed.\n\nThe text of the licenses lies in the \"doc\" directory. All the files provided in\nthis package are covered by the GPL unless expressly stated otherwise in them.\nEvery patch or contribution provided by external people will by default comply\nwith the license of the files it affects, or be rejected.\n\nWilly Tarreau - w@1wt.eu\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 5.49609375,
          "content": "This file contains a list of people who are responsible for certain parts of\nthe HAProxy project and who have authority on them. This means that these\npeople have to be consulted before doing any change in the parts they maintain,\nincluding when fixing bugs. These persons are allowed to reject any change on\nthe parts they maintain, and in parallel they try their best to ensure these\nparts work well. Similarly, any change to these parts not being validated by\nthem will be rejected.\n\nThe best way to deal with such subsystems when sending patches is to send the\npatches to the mailing list and to CC these people. When no maintainer is\nlisted for a subsystem, you can simply send your changes the usual way, and it\nis also a sign that if you want to strengthen your skills on certain parts you\ncan become yourself a maintainer of the parts you care a lot about.\n\nPlease do not ask them to troubleshoot your bugs, it's not their job even though\nthey may occasionally help as time permits.\n\nList of maintainers\n-------------------\n\n51Degrees device identification\nMaintainer: Ben Shillito <ben@51degrees.com>\nFiles: addons/51degrees, doc/51Degrees-device-detection.txt\n\nCache\nMaintainer: William Lallemand <wlallemand@haproxy.com>\nFiles: src/cache.c, include/haproxy/cache*.h\n\nDeviceAtlas device identification\nMaintainer: David Carlier <dcarlier@deviceatlas.com>\nFiles: addons/deviceatlas, doc/DeviceAtlas-device-detection.txt\n\nDNS and Resolvers\nMaintainer: Emeric Brun <ebrun@haproxy.com>\nMaintainer: Baptiste Assmann <bedis9@gmail.com>\nFiles: src/dns.c, include/haproxy/dns*.h\nFiles: src/resolvers.c, include/haproxy/resolvers*.h\n\nDoc to HTML converter (dconv)\nMaintainer: Cyril Bonté <cyril.bonte@free.fr>\nFiles: doc/*.txt\nNote: ask Cyril before changing any doc's format or structure.\n\nEBTree\nMaintainer: Willy Tarreau <w@1wt.eu>\nFiles: src/eb*.c, include/import/eb*.h\n\nFCGI:\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/mux_fcgi.c, src/fcgi*.c, include/haproxy/fcgi*.h\n\nFilters:\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/filters.c, src/flt_*.c, include/haproxy/filters*.h\nFiles: doc/internals/filters.txt\n\nH1 and HTX\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/mux_h1.c src/h1_htx.c, include/haproxy/h1_htx.h\n\nH2 and HPACK\nMaintainer: Willy Tarreau <w@1wt.eu>\nFiles: src/mux_h2.c src/h2.c src/hpack*.c\nFiles: include/haproxy/h2.h, include/haproxy/hpack*.h\n\nHealth checks\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/checks.c, include/haproxy/check*.h\nFiles: src/tcpcheck.c, include/haproxy/tcpcheck*.h\nNote: health checks are fragile and have been broken many times, so please\n      consult the relevant maintainers if you want to change these specific\n      parts.\n\nHTTP\nMaintainer: Willy Tarreau <w@1wt.eu>\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/http*.h, include/haproxy/http*.h\n\nHTX\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/htx.c, include/haproxy/htx*.c, doc/internals/htx-api.txt\n\nLua\nMaintainer: Thierry Fournier <tfournier@arpalert.org>\nFiles: src/hlua.c, include/haproxy/hlua*.h\n\nMailers\nMaintainer: Simon Horman <horms@verge.net.au>\nFiles: src/mailers.c, include/haproxy/mailers*.h\n\nMaps and pattern matching\nMaintainer: Thierry Fournier <tfournier@arpalert.org>\nFiles: src/map.c, include/haproxy/map*.h\nFiles: src/pattern.c, include/haproxy/pattern*.h\n\nMaster-worker\nMaintainer: William Lallemand <wlallemand@haproxy.com>\nNote: Please CC William when touching src/haproxy.c and admin/systemd\n\nMulti-threading\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nMaintainer: Emeric Brun <ebrun@haproxy.com>\nFiles: src/thread.c, include/haproxy/thread*.h\nNote: every change around the locking or synchronization point will require\n      approval from one of these maintainers. Problems which only appear when\n      nbthread is greater than 1 and which disappear otherwise are also\n      relevant.\n\nMulti-threaded task scheduler\nMaintainer: Willy Tarreau <w@1wt.eu>\nMaintainer: Olivier Houchard <cognet@ci0.org>\nFiles: include/haproxy/task*.h src/task.c\n\nPeers\nMaintainer: Emeric Brun <ebrun@haproxy.com>\nFrédéric Lécaille <flecaille@haproxy.com>\nFiles: src/peers.c, include/haproxy/peers*.h\n\nPrometheus Exporter\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nMaintainer: William Dauchy <wdauchy@gmail.com>\nFiles: addons/promex\nNote: William is the referent regarding Prometheus. He should be consulted for\n      all additions and modifications of features. Christopher is the referent\n      for the code itself. He should be consulted for questions regarding the\n      exporter integration into HAProxy, as well as for the bugs.\n\nQUIC and HTTP/3\nMaintainer: Frédéric Lécaille <flecaille@haproxy.com>\nMaintainer: Amaury Denoyelle <adenoyelle@haproxy.com>\nFiles: src/quic*.c, src/cfgparse-quic.c, include/haproxy/quic*.h\nFiles: src/mux_quic.c, include/haproxy/mux_quic.h,\nFiles: src/proto_quic.c, include/haproxy/proto_quic.h\nFiles: src/xprt_quic.c, include/haproxy/xprt_quic.h\nFiles: src/h3*.c, include/haproxy/h3*.h\n\nScientiaMobile WURFL Device Detection\nMaintainer: Paul Borile, Massimiliano Bellomi <wurfl-haproxy-support@scientiamobile.com>\nFiles: addons/wurfl, doc/WURFL-device-detection.txt\n\nSPOE\nMaintainer: Christopher Faulet <cfaulet@haproxy.com>\nFiles: src/flt_spoe.c, include/haproxy/spoe*.h, doc/SPOE.txt\n\nSSL\nMaintainer: Emeric Brun <ebrun@haproxy.com>\nMaintainer: William Lallemand <wlallemand@haproxy.com>\nFiles: src/cfgparse-ssl.c, src/ssl_*.c, include/haproxy/ssl_*.h\n\nThread-safe lists\nMaintainer: Olivier Houchard <cognet@ci0.org>\nFiles: include/haproxy/list*.h\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 53.9111328125,
          "content": "# This GNU Makefile supports different OS and CPU combinations.\n#\n# You should use it this way :\n#   [g]make TARGET=os [CFLAGS=...] USE_xxx=1 ...\n#\n# When in doubt, invoke help, possibly with a known target :\n#   [g]make help\n#   [g]make help TARGET=linux-glibc\n#\n# By default the detailed commands are hidden for a cleaner output, but you may\n# see them by appending \"V=1\" to the make command.\n#\n# Valid USE_* options are enumerated in the \"use_opts\" variable and are listed\n# below. Most of them are automatically set by the TARGET, others have to be\n# explicitly specified :\n#   USE_EPOLL               : enable epoll() on Linux 2.6. Automatic.\n#   USE_KQUEUE              : enable kqueue() on BSD. Automatic.\n#   USE_EVPORTS             : enable event ports on SunOS systems. Automatic.\n#   USE_NETFILTER           : enable netfilter on Linux. Automatic.\n#   USE_PCRE                : enable use of libpcre for regex.\n#   USE_PCRE_JIT            : enable JIT for faster regex on libpcre >= 8.32\n#   USE_PCRE2               : enable use of libpcre2 for regex. Recommended.\n#   USE_PCRE2_JIT           : enable JIT for faster regex on libpcre2\n#   USE_POLL                : enable poll(). Automatic.\n#   USE_THREAD              : enable threads support.\n#   USE_STATIC_PCRE         : enable static libpcre.\n#   USE_STATIC_PCRE2        : enable static libpcre2. Recommended.\n#   USE_TPROXY              : enable transparent proxy. Automatic.\n#   USE_LINUX_TPROXY        : enable full transparent proxy. Automatic.\n#   USE_LINUX_SPLICE        : enable kernel 2.6 splicing. Automatic.\n#   USE_LINUX_CAP           : enable Linux capabilities.\n#   USE_LIBCRYPT            : enable encrypted passwords using -lcrypt\n#   USE_CRYPT_H             : set it if your system requires including crypt.h\n#   USE_GETADDRINFO         : use getaddrinfo() to resolve IPv6 host names.\n#   USE_OPENSSL             : enable use of OpenSSL. Recommended, but see below.\n#   USE_OPENSSL_AWSLC       : enable use of AWS-LC\n#   USE_OPENSSL_WOLFSSL     : enable use of wolfSSL with the OpenSSL API\n#   USE_QUIC                : enable use of QUIC with the quictls API (quictls, libressl, boringssl)\n#   USE_QUIC_OPENSSL_COMPAT : enable use of QUIC with the standard openssl API (limited features)\n#   USE_ENGINE              : enable use of OpenSSL Engine.\n#   USE_LUA                 : enable Lua support.\n#   USE_ACCEPT4             : enable use of accept4() on linux. Automatic.\n#   USE_CLOSEFROM           : enable use of closefrom() on *bsd, solaris. Automatic.\n#   USE_PRCTL               : enable use of prctl(). Automatic.\n#   USE_PROCCTL             : enable use of procctl(). Automatic.\n#   USE_ZLIB                : enable zlib library support and disable SLZ\n#   USE_SLZ                 : enable slz library instead of zlib (default=enabled)\n#   USE_CPU_AFFINITY        : enable pinning processes to CPU on Linux. Automatic.\n#   USE_TFO                 : enable TCP fast open. Supported on Linux >= 3.7.\n#   USE_NS                  : enable network namespace support. Supported on Linux >= 2.6.24.\n#   USE_DL                  : enable it if your system requires -ldl. Automatic on Linux.\n#   USE_MATH                : enable use of -lm. Automatic.\n#   USE_RT                  : enable it if your system requires -lrt. Automatic on Linux.\n#   USE_BACKTRACE           : enable backtrace(). Automatic on Linux.\n#   USE_PROMEX              : enable the Prometheus exporter\n#   USE_DEVICEATLAS         : enable DeviceAtlas api.\n#   USE_51DEGREES           : enable third party device detection library from 51Degrees\n#   USE_WURFL               : enable WURFL detection library from Scientiamobile\n#   USE_OBSOLETE_LINKER     : use when the linker fails to emit __start_init/__stop_init\n#   USE_THREAD_DUMP         : use the more advanced thread state dump system. Automatic.\n#   USE_OT                  : enable the OpenTracing filter\n#   USE_MEMORY_PROFILING    : enable the memory profiler. Linux-glibc only.\n#   USE_LIBATOMIC           : force to link with/without libatomic. Automatic.\n#   USE_PTHREAD_EMULATION   : replace pthread's rwlocks with ours\n#\n# Options can be forced by specifying \"USE_xxx=1\" or can be disabled by using\n# \"USE_xxx=\" (empty string). The list of enabled and disabled options for a\n# given TARGET is enumerated at the end of \"make help\". Most of these options\n# support specific xxx_CFLAGS and/or xxx_LDFLAGS that can be individually\n# forced. The currently active ones for a given set of options are listed in\n# \"make opts USE_xxx=1 ...\".\n#\n# Variables useful for packagers :\n#   CC is set to \"cc\" by default and is used for compilation only.\n#   LD is set to \"cc\" by default and is used for linking only.\n#   OPT_CFLAGS sets the default optimization level (-O2).\n#   CFLAGS may be used to append any flags for the C compiler.\n#   LDFLAGS is automatically set to -g and may be overridden.\n#   ARCH_FLAGS for flags common to both CC and LD. Defaults to -g.\n#   DEP may be cleared to ignore changes to include files during development\n#   DEBUG may be used to set some internal debugging options.\n#   ERR may be set to non-empty to pass -Werror to the compiler\n#   FAILFAST may be set to non-empty to pass -Wfatal-errors to the compiler\n#   WARN_CFLAGS overrides the default set of enabled warning options\n#   NOWARN_CFLAGS overrides the default set of disabled warning options\n#   ADDINC may be used to complete the include path in the form -Ipath.\n#   ADDLIB may be used to complete the library list in the form -Lpath -llib.\n#   DEFINE may be used to specify any additional define, which will be reported\n#          by \"haproxy -vv\" in CFLAGS.\n#   SILENT_DEFINE may be used to specify other defines which will not be\n#     reported by \"haproxy -vv\".\n#   EXTRA   is used to force building or not building some extra tools.\n#   DESTDIR is not set by default and is used for installation only.\n#           It might be useful to set DESTDIR if you want to install haproxy\n#           in a sandbox.\n#   INSTALL is set to \"install\" by default and is used to provide the name of\n#           the install binary used by the install targets and any additional\n#           flags.\n#   PREFIX  is set to \"/usr/local\" by default and is used for installation only.\n#   SBINDIR is set to \"$(PREFIX)/sbin\" by default and is used for installation\n#           only.\n#   MANDIR  is set to \"$(PREFIX)/share/man\" by default and is used for\n#           installation only.\n#   DOCDIR  is set to \"$(PREFIX)/doc/haproxy\" by default and is used for\n#           installation only.\n#   HLUA_PREPEND_PATH may be used to prepend a folder to Lua's default package.path.\n#   HLUA_PREPEND_CPATH may be used to prepend a folder to Lua's default package.cpath.\n#\n# Other variables :\n#   PCRE_CONFIG    : force the binary path to get pcre config (by default\n#                                                              pcre-config)\n#   PCREDIR        : force the path to libpcre.\n#   PCRE_LIB       : force the lib path to libpcre (defaults to $PCREDIR/lib).\n#   PCRE_INC       : force the include path to libpcre ($PCREDIR/inc)\n#   PCRE2_CONFIG   : force the binary path to get pcre2 config (by default\n#                                                               pcre2-config)\n#   SSL_LIB        : force the lib path to libssl/libcrypto\n#   SSL_INC        : force the include path to libssl/libcrypto\n#   LUA_LIB        : force the lib path to lua\n#   LUA_INC        : force the include path to lua\n#   LUA_LIB_NAME   : force the lib name (or automatically evaluated, by order of\n#                                        priority : lua5.4, lua54, lua5.3, lua53, lua).\n#   OT_DEBUG       : compile the OpenTracing filter in debug mode\n#   OT_INC         : force the include path to libopentracing-c-wrapper\n#   OT_LIB         : force the lib path to libopentracing-c-wrapper\n#   OT_RUNPATH     : add RUNPATH for libopentracing-c-wrapper to haproxy executable\n#   OT_USE_VARS    : allows the use of variables for the OpenTracing context\n#   IGNOREGIT      : ignore GIT commit versions if set.\n#   VERSION        : force haproxy version reporting.\n#   SUBVERS        : add a sub-version (eg: platform, model, ...).\n#   EXTRAVERSION   : local version string to append (e.g. build number etc)\n#   VERDATE        : force haproxy's release date.\n#   VTEST_PROGRAM  : location of the vtest program to run reg-tests.\n#   DEBUG_USE_ABORT: use abort() for program termination, see include/haproxy/bug.h for details\n\n#### Add -Werror when set to non-empty, and make Makefile stop on warnings.\n#### It must be declared before includes because it's used there.\nERR =\n\ninclude include/make/verbose.mk\ninclude include/make/errors.mk\ninclude include/make/compiler.mk\ninclude include/make/options.mk\n\n#### Installation options.\nDESTDIR =\nINSTALL = install\nPREFIX = /usr/local\nSBINDIR = $(PREFIX)/sbin\nMANDIR = $(PREFIX)/share/man\nDOCDIR = $(PREFIX)/doc/haproxy\n\n#### TARGET system\n# Use TARGET=<target_name> to optimize for a specific target OS among the\n# following list (use the default \"generic\" if uncertain) :\n#    linux-glibc, linux-glibc-legacy, linux-musl, solaris, freebsd, freebsd-glibc,\n#    dragonfly, openbsd, netbsd, cygwin, haiku, aix51, aix52, aix72-gcc, osx, generic,\n#    custom\nTARGET =\n\n#### No longer used\nCPU =\nifneq ($(CPU),)\nifneq ($(CPU),generic)\n$(call $(complain),the \"CPU\" variable was forced to \"$(CPU)\" but is no longer \\\n  used and will be ignored. For native builds, modern compilers generally     \\\n  prefer that the string \"-march=native\" is passed in CPU_CFLAGS or CFLAGS.   \\\n  For other CPU-specific options, please read suggestions in the INSTALL file.)\nendif\nendif\n\n#### No longer used\nARCH =\nifneq ($(ARCH),)\n$(call $(complain),the \"ARCH\" variable was forced to \"$(ARCH)\" but is no \\\n  longer used and will be ignored. Please check the INSTALL file for other \\\n  options, but usually in order to pass arch-specific options, ARCH_FLAGS, \\\n  CFLAGS or LDFLAGS are preferred.)\nendif\n\n#### Toolchain options.\nCC = cc\nLD = $(CC)\n\n#### Default optimizations\n# Those are integrated early in the list of CFLAGS, and may be overridden by\n# other CFLAGS options if needed.\nOPT_CFLAGS = -O2\n\n#### No longer used\nDEBUG_CFLAGS =\nifneq ($(DEBUG_CFLAGS),)\n$(call $(complain),DEBUG_CFLAGS was forced to \"$(DEBUG_CFLAGS)\" but is no     \\\n  longer used and will be ignored. If you have ported this build setting from \\\n  and older version, it is likely that you just want to pass these options    \\\n  to the CFLAGS variable. If you are passing some debugging-related options   \\\n  such as -g/-ggdb3/-pg etc, they can now be passed in ARCH_FLAGS at once for \\\n  both the compilation and linking stages.)\nendif\n\n#### May be used to force running a specific set of reg-tests\nREG_TEST_FILES =\nREG_TEST_SCRIPT=./scripts/run-regtests.sh\n\n#### Standard C definition\n# Compiler-specific flags that may be used to set the standard behavior we\n# rely on and to disable some negative over-optimization. More specifically,\n# we rely on signed integer wraparound on overflow, however recently clang and\n# gcc decided to change their code generation regarding this and abuse the\n# undefined behavior to silently produce invalid code. For this reason we have\n# to use -fwrapv or -fno-strict-overflow to guarantee the intended behavior.\n# It is preferable not to change this option in order to avoid breakage.\nSTD_CFLAGS  := $(call cc-opt-alt,-fwrapv,-fno-strict-overflow)\n\n#### Compiler-specific flags to enable certain classes of warnings.\n# Some are hard-coded, others are enabled only if supported.\nWARN_CFLAGS := -Wall -Wextra -Wundef -Wdeclaration-after-statement            \\\n               $(call cc-all-fast,                                            \\\n                 -Wtype-limits -Wshift-negative-value -Wshift-overflow=2      \\\n                 -Wduplicated-cond -Wnull-dereference)\n\n#### Compiler-specific flags to enable certain classes of warnings.\nNOWARN_CFLAGS := $(cc-wnouwo)\nNOWARN_CFLAGS += $(call cc-nowarn,address-of-packed-member)\nNOWARN_CFLAGS += $(call cc-nowarn,unused-label)\nNOWARN_CFLAGS += $(call cc-nowarn,sign-compare)\nNOWARN_CFLAGS += $(call cc-nowarn,unused-parameter)\nNOWARN_CFLAGS += $(call cc-nowarn,clobbered)\nNOWARN_CFLAGS += $(call cc-nowarn,missing-field-initializers)\nNOWARN_CFLAGS += $(call cc-nowarn,cast-function-type)\nNOWARN_CFLAGS += $(call cc-nowarn,string-plus-int)\nNOWARN_CFLAGS += $(call cc-nowarn,atomic-alignment)\n\n#### CFLAGS defining error handling\n# ERROR_CFLAGS are just accumulators for these variables, they're not meant\n# to be exposed nor manipulated outside of this. They're not reported in\n# VERBOSE_CFLAGS and don't cause a rebuild when changed.\nERROR_CFLAGS :=\nifneq ($(ERR:0=),)\n  ERROR_CFLAGS += -Werror\nendif\n\nifneq ($(FAILFAST:0=),)\n  ERROR_CFLAGS += -Wfatal-errors\nendif\n\n#### No longer used\nSMALL_OPTS =\nifneq ($(SMALL_OPTS),)\n$(call $(complain),SMALL_OPTS was forced to \"$(SMALL_OPTS)\" but is no longer \\\n  used and will be ignored. Please check if this setting are still relevant, \\\n  and move it either to DEFINE or to CFLAGS instead.)\nendif\n\n#### Debug settings\n# You can enable debugging on specific code parts by setting DEBUG=-DDEBUG_xxx.\n# Use quotes and spaces if multiple options are needed (the DEBUG variables is\n# passed as-is to CFLAGS). Please check sources for their exact meaning or do\n# not use them at all. Some even more obscure ones might also be available\n# without appearing here. Currently defined DEBUG macros include DEBUG_FULL,\n# DEBUG_MEM_STATS, DEBUG_DONT_SHARE_POOLS, DEBUG_FD, DEBUG_POOL_INTEGRITY,\n# DEBUG_NO_POOLS, DEBUG_FAIL_ALLOC, DEBUG_STRICT_ACTION=[0-3], DEBUG_HPACK,\n# DEBUG_AUTH, DEBUG_SPOE, DEBUG_UAF, DEBUG_THREAD, DEBUG_STRICT, DEBUG_DEV,\n# DEBUG_TASK, DEBUG_MEMORY_POOLS, DEBUG_POOL_TRACING, DEBUG_QPACK, DEBUG_LIST,\n# DEBUG_GLITCHES, DEBUG_STRESS.\nDEBUG =\n\n#### Trace options\n# Use TRACE=1 to trace function calls to file \"trace.out\" or to stderr if not\n# possible.\nTRACE =\n\n#### Additional include and library dirs\n# Redefine this if you want to add some special PATH to include/libs\nADDINC =\nADDLIB =\n\n#### Specific macro definitions\n# Use DEFINE=-Dxxx to set any tunable macro. Anything declared here will appear\n# in the build options reported by \"haproxy -vv\". Use SILENT_DEFINE if you do\n# not want to pollute the report with complex defines.\n# The following settings might be of interest when SSL is enabled :\n#   LISTEN_DEFAULT_CIPHERS is a cipher suite string used to set the default SSL\n#           ciphers on \"bind\" lines instead of using OpenSSL's defaults.\n#   CONNECT_DEFAULT_CIPHERS is a cipher suite string used to set the default\n#           SSL ciphers on \"server\" lines instead of using OpenSSL's defaults.\nDEFINE =\nSILENT_DEFINE =\n\n#### extra programs to build\n# Force this to enable building extra programs or to disable them.\n# It's automatically appended depending on the targets.\nEXTRA =\n\n#### CPU dependent optimizations\n# This may optionally be used to pass CPU-specific optimizations such as\n# -march=native, -mcpu=something, -m64 etc independently of CFLAGS if it is\n# considered more convenient. Historically, the optimization level was also\n# passed there. This is still supported but not recommended though; OPT_CFLAGS\n# is better suited. The default is empty.\nCPU_CFLAGS        =\n\n#### Architecture dependent flags.\n# These flags are passed both to the compiler and to the linker. A number of\n# settings may need to be passed to both tools, among which some arch-specific\n# options such as -m32 or -m64, some debugging options (-g), some profiling\n# options (-pg), some options affecting how the linkage is done (-flto), as\n# well as some code analysers such as -fsanitize=address. All of these make\n# sense here and will be consistently propagated to both stages. By default\n# only the debugging is enabled (-g).\nARCH_FLAGS        = -g\n\n#### Extra CFLAGS\n# These CFLAGS are empty by default and are appended at the end of all the\n# flags passed to the compiler, so that it is possible to use them to force\n# some optimization levels, architecture types and/or disable certain warnings.\n# Just set CFLAGS to the desired ones on the \"make\" command line.\nCFLAGS =\n\n#### Extra LDFLAGS\n# These LDFLAGS are used as the first \"ld\" options just after ARCH_FLAGS,\n# regardless of any library path or any other option. They may be used to add\n# any linker-specific option at the beginning of the ld command line. It may be\n# convenient to set a run time search path (-rpath), see INSTALL for more info.\nLDFLAGS =\n\n#### list of all \"USE_*\" options. These ones must be updated if new options are\n# added, so that the relevant options are properly added to the CFLAGS and to\n# the reported build options.\n#\n# Relevant *_CFLAGS/*_LDFLAGS will be concatenated in the order defined here.\n# Note that PCRE last position is advisable as it relies on pcre configuration\n# detection tool which may generate default include/lib paths overriding more\n# specific entries if present before them.\nuse_opts = USE_EPOLL USE_KQUEUE USE_NETFILTER USE_POLL                        \\\n           USE_THREAD USE_PTHREAD_EMULATION USE_BACKTRACE                     \\\n           USE_TPROXY USE_LINUX_TPROXY USE_LINUX_CAP                          \\\n           USE_LINUX_SPLICE USE_LIBCRYPT USE_CRYPT_H USE_ENGINE               \\\n           USE_GETADDRINFO USE_OPENSSL USE_OPENSSL_WOLFSSL USE_OPENSSL_AWSLC  \\\n           USE_SSL USE_LUA USE_ACCEPT4 USE_CLOSEFROM USE_ZLIB USE_SLZ         \\\n           USE_CPU_AFFINITY USE_TFO USE_NS USE_DL USE_RT USE_LIBATOMIC        \\\n           USE_MATH USE_DEVICEATLAS USE_51DEGREES                             \\\n           USE_WURFL USE_OBSOLETE_LINKER USE_PRCTL USE_PROCCTL                \\\n           USE_THREAD_DUMP USE_EVPORTS USE_OT USE_QUIC USE_PROMEX             \\\n           USE_MEMORY_PROFILING                                               \\\n           USE_STATIC_PCRE USE_STATIC_PCRE2                                   \\\n           USE_PCRE USE_PCRE_JIT USE_PCRE2 USE_PCRE2_JIT USE_QUIC_OPENSSL_COMPAT\n\n# preset all variables for all supported build options among use_opts\n$(reset_opts_vars)\n\n# Check that any USE_* variable that was forced actually exist.\n$(warn_unknown_options)\n\n#### Target system options\n\n# poll() is always supported, unless explicitly disabled by passing USE_POLL=\"\"\n# on the make command line.\nUSE_POLL   = default\n\n# SLZ is always supported unless explicitly disabled by passing USE_SLZ=\"\"\n# or disabled by enabling ZLIB using USE_ZLIB=1\nifeq ($(USE_ZLIB:0=),)\n  USE_SLZ    = default\nendif\n\n# generic system target has nothing specific\nifeq ($(TARGET),generic)\n  set_target_defaults = $(call default_opts,USE_POLL USE_TPROXY)\nendif\n\n# Haiku\nifeq ($(TARGET),haiku)\n  TARGET_LDFLAGS = -lnetwork\n  set_target_defaults = $(call default_opts,USE_POLL USE_TPROXY USE_OBSOLETE_LINKER)\nendif\n\n# For linux >= 2.6.28 and glibc\nifeq ($(TARGET),linux-glibc)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_DL USE_RT USE_CRYPT_H USE_NETFILTER  \\\n    USE_CPU_AFFINITY USE_THREAD USE_EPOLL USE_LINUX_TPROXY USE_LINUX_CAP      \\\n    USE_ACCEPT4 USE_LINUX_SPLICE USE_PRCTL USE_THREAD_DUMP USE_NS USE_TFO     \\\n    USE_GETADDRINFO USE_BACKTRACE)\n  INSTALL = install -v\nendif\n\n# For linux >= 2.6.28, glibc without new features\nifeq ($(TARGET),linux-glibc-legacy)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_DL USE_RT USE_CRYPT_H USE_NETFILTER  \\\n    USE_CPU_AFFINITY USE_THREAD USE_EPOLL USE_LINUX_TPROXY USE_LINUX_CAP      \\\n    USE_ACCEPT4 USE_LINUX_SPLICE USE_PRCTL USE_THREAD_DUMP USE_GETADDRINFO)\n  INSTALL = install -v\nendif\n\n# For linux >= 2.6.28 and musl\nifeq ($(TARGET),linux-musl)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_DL USE_RT USE_CRYPT_H USE_NETFILTER  \\\n    USE_CPU_AFFINITY USE_THREAD USE_EPOLL USE_LINUX_TPROXY USE_LINUX_CAP      \\\n    USE_ACCEPT4 USE_LINUX_SPLICE USE_PRCTL USE_THREAD_DUMP USE_NS USE_TFO     \\\n    USE_GETADDRINFO)\n  INSTALL = install -v\nendif\n\n# Solaris 10 and above\nifeq ($(TARGET),solaris)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_CRYPT_H USE_GETADDRINFO USE_THREAD \\\n    USE_RT USE_OBSOLETE_LINKER USE_EVPORTS USE_CLOSEFROM)\n  TARGET_CFLAGS  = -DFD_SETSIZE=65536 -D_REENTRANT -D_XOPEN_SOURCE=600 -D__EXTENSIONS__\n  TARGET_LDFLAGS = -lnsl -lsocket\nendif\n\n# FreeBSD 10 and above\nifeq ($(TARGET),freebsd)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_CPU_AFFINITY USE_KQUEUE   \\\n    USE_ACCEPT4 USE_CLOSEFROM USE_GETADDRINFO USE_PROCCTL)\nendif\n\n# kFreeBSD glibc\nifeq ($(TARGET),freebsd-glibc)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_CPU_AFFINITY USE_KQUEUE   \\\n    USE_ACCEPT4 USE_GETADDRINFO USE_CRYPT_H USE_DL)\nendif\n\n# DragonFlyBSD 4.3 and above\nifeq ($(TARGET),dragonfly)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_CPU_AFFINITY USE_KQUEUE   \\\n    USE_ACCEPT4 USE_CLOSEFROM USE_GETADDRINFO)\nendif\n\n# Mac OS/X\nifeq ($(TARGET),osx)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_CPU_AFFINITY USE_KQUEUE   \\\n    USE_GETADDRINFO)\n  EXPORT_SYMBOL  = -export_dynamic\nendif\n\n# OpenBSD 6.3 and above\nifeq ($(TARGET),openbsd)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_KQUEUE USE_ACCEPT4        \\\n    USE_CLOSEFROM USE_GETADDRINFO)\nendif\n\n# NetBSD 8 and above\nifeq ($(TARGET),netbsd)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_LIBCRYPT USE_THREAD USE_KQUEUE USE_ACCEPT4        \\\n    USE_CLOSEFROM USE_GETADDRINFO)\nendif\n\n# AIX 5.1 only\nifeq ($(TARGET),aix51)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_LIBCRYPT USE_OBSOLETE_LINKER)\n  TARGET_CFLAGS   = -Dss_family=__ss_family -Dip6_hdr=ip6hdr -DSTEVENS_API -D_LINUX_SOURCE_COMPAT -Dunsetenv=my_unsetenv\nendif\n\n# AIX 5.2\nifeq ($(TARGET),aix52)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_LIBCRYPT USE_OBSOLETE_LINKER)\n  TARGET_CFLAGS   = -D_MSGQSUPPORT\nendif\n\n# AIX 7.2 and above\nifeq ($(TARGET),aix72-gcc)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_THREAD USE_LIBCRYPT USE_OBSOLETE_LINKER USE_GETADDRINFO)\n  TARGET_CFLAGS   = -D_H_XMEM -D_H_VAR\n  USE_LIBATOMIC   = implicit\nendif\n\n# Cygwin\nifeq ($(TARGET),cygwin)\n  set_target_defaults = $(call default_opts, \\\n    USE_POLL USE_TPROXY USE_OBSOLETE_LINKER)\n  # Cygwin adds IPv6 support only in version 1.7 (in beta right now).\n  TARGET_CFLAGS  = $(if $(filter 1.5.%, $(shell uname -r)), -DUSE_IPV6 -DAF_INET6=23 -DINET6_ADDRSTRLEN=46, )\nendif\n\n# set the default settings according to the target above\n$(set_target_defaults)\n\n# Some architectures require to link with libatomic for atomics of certain\n# sizes. These ones are reported as value 1 in the *_LOCK_FREE macros. Value\n# 2 indicates that the builtin is native thus doesn't require libatomic. Hence\n# any occurrence of 1 indicates libatomic is necessary. It's better to avoid\n# linking with it by default as it's not always available nor deployed\n# (especially on archs which do not need it).\nifneq ($(USE_THREAD:0=),)\n  ifneq ($(shell $(CC) $(OPT_CFLAGS) $(ARCH_FLAGS) $(CPU_CFLAGS) $(STD_CFLAGS) $(WARN_CFLAGS) $(NOWARN_CFLAGS) $(ERROR_CFLAGS) $(CFLAGS) -dM -E -xc - </dev/null 2>/dev/null | grep -c 'LOCK_FREE.*1'),0)\n    USE_LIBATOMIC   = implicit\n  endif\nendif\n\n#### Determine version, sub-version and release date.\n# If GIT is found, and IGNOREGIT is not set, VERSION, SUBVERS and VERDATE are\n# extracted from the last commit. Otherwise, use the contents of the files\n# holding the same names in the current directory.\n\nifeq ($(IGNOREGIT),)\n  VERSION := $(shell [ -d .git/. ] && (git describe --tags --match 'v*' --abbrev=0 | cut -c 2-) 2>/dev/null)\n  ifneq ($(VERSION),)\n    # OK git is there and works.\n    SUBVERS := $(shell comms=`git log --format=oneline --no-merges v$(VERSION).. 2>/dev/null | wc -l | tr -d '[:space:]'`; commit=`(git log -1 --pretty=%h --abbrev=6) 2>/dev/null`; [ $$comms -gt 0 ] && echo \"-$$commit-$$comms\")\n    VERDATE := $(shell git log -1 --pretty=format:%ci | cut -f1 -d' ' | tr '-' '/')\n  endif\nendif\n\n# Last commit version not found, take it from the files.\nifeq ($(VERSION),)\n  VERSION := $(shell cat VERSION 2>/dev/null || touch VERSION)\nendif\nifeq ($(SUBVERS),)\n  SUBVERS := $(shell (grep -v '\\$$Format' SUBVERS 2>/dev/null || touch SUBVERS) | head -n 1)\nendif\nifeq ($(VERDATE),)\n  VERDATE := $(shell (grep -v '^\\$$Format' VERDATE 2>/dev/null || touch VERDATE) | head -n 1 | cut -f1 -d' ' | tr '-' '/')\nendif\n\n# this one is always empty by default and appended verbatim\nEXTRAVERSION =\n\n#### Build options\n# Do not change these ones, enable USE_* variables instead.\nOPTIONS_CFLAGS  =\nOPTIONS_LDFLAGS =\nOPTIONS_OBJS    =\n\n#### Extra objects to be built and integrated (used only for development)\nEXTRA_OBJS =\n\n# This variable collects all USE_* values except those set to \"implicit\". This\n# is used to report a list of all flags which were used to build this version.\n# Do not assign anything to it.\nBUILD_OPTIONS  := $(call build_options)\n\n# All USE_* options have their equivalent macro defined in the code (some might\n# possibly be unused though)\nOPTIONS_CFLAGS += $(call opts_as_defines)\n\nifneq ($(USE_LIBCRYPT:0=),)\n  ifneq ($(TARGET),openbsd)\n    ifneq ($(TARGET),osx)\n      LIBCRYPT_LDFLAGS = -lcrypt\n    endif\n  endif\nendif\n\nifneq ($(USE_ZLIB:0=),)\n  # Use ZLIB_INC and ZLIB_LIB to force path to zlib.h and libz.{a,so} if needed.\n  ZLIB_CFLAGS      = $(if $(ZLIB_INC),-I$(ZLIB_INC))\n  ZLIB_LDFLAGS     = $(if $(ZLIB_LIB),-L$(ZLIB_LIB)) -lz\nendif\n\nifneq ($(USE_SLZ:0=),)\n  OPTIONS_OBJS   += src/slz.o\nendif\n\nifneq ($(USE_POLL:0=),)\n  OPTIONS_OBJS   += src/ev_poll.o\nendif\n\nifneq ($(USE_EPOLL:0=),)\n  OPTIONS_OBJS   += src/ev_epoll.o\nendif\n\nifneq ($(USE_KQUEUE:0=),)\n  OPTIONS_OBJS   += src/ev_kqueue.o\nendif\n\nifneq ($(USE_EVPORTS:0=),)\n  OPTIONS_OBJS   += src/ev_evports.o\nendif\n\nifneq ($(USE_RT:0=),)\n  RT_LDFLAGS = -lrt\nendif\n\nifneq ($(USE_THREAD:0=),)\n  THREAD_LDFLAGS = -pthread\nendif\n\nifneq ($(USE_BACKTRACE:0=),)\n  BACKTRACE_LDFLAGS = -Wl,$(if $(EXPORT_SYMBOL),$(EXPORT_SYMBOL),--export-dynamic)\nendif\n\nifneq ($(USE_CPU_AFFINITY:0=),)\n  OPTIONS_OBJS   += src/cpuset.o\nendif\n\n# OpenSSL is packaged in various forms and with various dependencies.\n# In general -lssl is enough, but on some platforms, -lcrypto may be needed,\n# reason why it's added by default. Some even need -lz, then you'll need to\n# pass it in the \"ADDLIB\" variable if needed. If your SSL libraries are not\n# in the usual path, use SSL_INC=/path/to/inc and SSL_LIB=/path/to/lib.\n\n# This is for the WolfSSL variant of the OpenSSL API. Setting it implies\n# OPENSSL so it's not necessary to set the latter.\nifneq ($(USE_OPENSSL_WOLFSSL:0=),)\n  SSL_CFLAGS      := $(if $(SSL_INC),-I$(SSL_INC)/wolfssl -I$(SSL_INC))\n  SSL_LDFLAGS     := $(if $(SSL_LIB),-L$(SSL_LIB)) -lwolfssl\n  # always automatically set USE_OPENSSL\n  USE_OPENSSL     := $(if $(USE_OPENSSL:0=),$(USE_OPENSSL:0=),implicit)\nendif\n\n# This is for the AWS-LC variant of the OpenSSL API. Setting it implies\n# OPENSSL so it's not necessary to set the latter.\nifneq ($(USE_OPENSSL_AWSLC:0=),)\n  # always automatically set USE_OPENSSL\n  USE_OPENSSL     := $(if $(USE_OPENSSL:0=),$(USE_OPENSSL:0=),implicit)\nendif\n\n# This is for any variant of the OpenSSL API. By default it uses OpenSSL.\nifneq ($(USE_OPENSSL:0=),)\n  # only preset these for the regular openssl\n  ifeq ($(USE_OPENSSL_WOLFSSL:0=),)\n    SSL_CFLAGS    := $(if $(SSL_INC),-I$(SSL_INC))\n    SSL_LDFLAGS   := $(if $(SSL_LIB),-L$(SSL_LIB)) -lssl -lcrypto\n  endif\n  USE_SSL         := $(if $(USE_SSL:0=),$(USE_SSL:0=),implicit)\n  OPTIONS_OBJS += src/ssl_sock.o src/ssl_ckch.o src/ssl_ocsp.o src/ssl_crtlist.o src/ssl_sample.o src/cfgparse-ssl.o src/ssl_gencert.o src/ssl_utils.o src/jwt.o src/ssl_clienthello.o\nendif\n\nifneq ($(USE_ENGINE:0=),)\n  # OpenSSL 3.0 emits loud deprecation warnings by default when building with\n  # engine support, and this option is made to silence them. Better use it\n  # only when absolutely necessary, until there's a viable alternative to the\n  # engine API.\n  ENGINE_CFLAGS   = -DOPENSSL_SUPPRESS_DEPRECATED\nendif\n\nifneq ($(USE_QUIC:0=),)\n\nOPTIONS_OBJS += src/mux_quic.o src/h3.o src/quic_rx.o src/quic_tx.o\t\\\n                src/quic_conn.o src/quic_frame.o src/quic_sock.o\t\\\n                src/quic_tls.o src/quic_ssl.o src/proto_quic.o\t\t\\\n                src/quic_cli.o src/quic_trace.o src/quic_tp.o\t\t\\\n                src/quic_cid.o src/quic_stream.o\t\t\t\\\n                src/quic_retransmit.o src/quic_loss.o\t\t\t\\\n                src/hq_interop.o src/quic_cc_cubic.o\t\t\t\\\n                src/quic_cc_bbr.o src/quic_retry.o\t\t\t\\\n                src/cfgparse-quic.o src/xprt_quic.o src/quic_token.o\t\\\n                src/quic_ack.o src/qpack-dec.o src/quic_cc_newreno.o\t\\\n                src/qmux_http.o src/qmux_trace.o src/quic_rules.o\t\\\n                src/quic_cc_nocc.o src/quic_cc.o src/quic_pacing.o\t\\\n                src/h3_stats.o src/quic_stats.o src/qpack-enc.o\t\t\\\n                src/qpack-tbl.o src/quic_cc_drs.o src/quic_fctl.o\t\\\n                src/cbuf.o\nendif\n\nifneq ($(USE_QUIC_OPENSSL_COMPAT:0=),)\nOPTIONS_OBJS += src/quic_openssl_compat.o\nendif\n\nifneq ($(USE_LUA:0=),)\n  check_lua_inc = $(shell if [ -d $(2)$(1) ]; then echo $(2)$(1); fi;)\n  LUA_INC      := $(firstword $(foreach lib,lua5.4 lua54 lua5.3 lua53 lua,$(call check_lua_inc,$(lib),\"/usr/include/\")))\n\n  check_lua_lib = $(shell echo \"int main(){}\" | $(CC) -o /dev/null -x c - $(2) -l$(1) 2>/dev/null && echo $(1))\n  LUA_LD_FLAGS := -Wl,$(if $(EXPORT_SYMBOL),$(EXPORT_SYMBOL),--export-dynamic) $(if $(LUA_LIB),-L$(LUA_LIB))\n\n  # Try to automatically detect the Lua library if not set\n  ifeq ($(LUA_LIB_NAME),)\n    LUA_LIB_NAME := $(firstword $(foreach lib,lua5.4 lua54 lua5.3 lua53 lua,$(call check_lua_lib,$(lib),$(LUA_LD_FLAGS))))\n  endif\n\n  # Lua lib name must be set now (forced/detected above)\n  ifeq ($(LUA_LIB_NAME),)\n    $(error unable to automatically detect the Lua library name, you can enforce its name with LUA_LIB_NAME=<name> (where <name> can be lua5.4, lua54, lua, ...))\n  endif\n\n  ifneq ($(HLUA_PREPEND_PATH),)\n    LUA_CFLAGS      += -DHLUA_PREPEND_PATH=$(HLUA_PREPEND_PATH)\n    BUILD_OPTIONS   += HLUA_PREPEND_PATH=$(HLUA_PREPEND_PATH)\n  endif # HLUA_PREPEND_PATH\n\n  ifneq ($(HLUA_PREPEND_CPATH),)\n    LUA_CFLAGS      += -DHLUA_PREPEND_CPATH=$(HLUA_PREPEND_CPATH)\n    BUILD_OPTIONS   += HLUA_PREPEND_CPATH=$(HLUA_PREPEND_CPATH)\n  endif # HLUA_PREPEND_CPATH\n\n  USE_MATH         = implicit\n  LUA_CFLAGS      += $(if $(LUA_INC),-I$(LUA_INC))\n  LUA_LDFLAGS      = $(LUA_LD_FLAGS) -l$(LUA_LIB_NAME)\n  OPTIONS_OBJS    += src/hlua.o src/hlua_fcn.o\nendif # USE_LUA\n\nifneq ($(USE_PROMEX:0=),)\n  OPTIONS_OBJS    += addons/promex/service-prometheus.o\n  PROMEX_CFLAGS    = -Iaddons/promex/include\nendif\n\nifneq ($(USE_DEVICEATLAS:0=),)\n  # Use DEVICEATLAS_SRC and possibly DEVICEATLAS_INC and DEVICEATLAS_LIB to force path\n  # to DeviceAtlas headers and libraries if needed. In this context, DEVICEATLAS_NOCACHE\n  # can be used to disable the cache support if needed (this also removes the necessity of having\n  # a C++ toolchain installed).\n  DEVICEATLAS_INC = $(DEVICEATLAS_SRC)\n  DEVICEATLAS_LIB = $(DEVICEATLAS_SRC)\n  include addons/deviceatlas/Makefile.inc\n  OPTIONS_OBJS += addons/deviceatlas/da.o\nendif\n\n# Use 51DEGREES_SRC and possibly 51DEGREES_INC and 51DEGREES_LIB to force path\n# to 51degrees v3/v4 headers and libraries if needed. Note that the SRC/INC/\n# LIB/CFLAGS/LDFLAGS variables names all use 51DEGREES as the prefix,\n# regardless of the version since they are mutually exclusive. The version\n# (51DEGREES_VER) must be either 3 or 4, and defaults to 3 if not set.\n51DEGREES_INC = $(51DEGREES_SRC)\n51DEGREES_LIB = $(51DEGREES_SRC)\n51DEGREES_VER = 3\n\nifneq ($(USE_51DEGREES:0=),)\n  ifeq ($(51DEGREES_VER),4)  # v4 here\n    _51DEGREES_SRC      = $(shell find $(51DEGREES_LIB) -maxdepth 2 -name '*.c')\n    OPTIONS_OBJS       += $(_51DEGREES_SRC:%.c=%.o)\n    51DEGREES_CFLAGS   += -DUSE_51DEGREES_V4\n    ifeq ($(USE_THREAD:0=),)\n      51DEGREES_CFLAGS += -DFIFTYONEDEGREES_NO_THREADING -DFIFTYONE_DEGREES_NO_THREADING\n    endif\n    USE_LIBATOMIC       = implicit\n  endif # 51DEGREES_VER==4\n\n  ifeq ($(51DEGREES_VER),3)  # v3 here\n    OPTIONS_OBJS       += $(51DEGREES_LIB)/../cityhash/city.o\n    OPTIONS_OBJS       += $(51DEGREES_LIB)/51Degrees.o\n    ifeq ($(USE_THREAD:0=),)\n      51DEGREES_CFLAGS += -DFIFTYONEDEGREES_NO_THREADING\n    else\n      OPTIONS_OBJS     += $(51DEGREES_LIB)/../threading.o\n    endif\n  else\n    ifneq ($(51DEGREES_VER),4)\n      $(error 51Degrees version (51DEGREES_VER) must be either 3 or 4)\n    endif\n  endif # 51DEGREES_VER==3\n\n  OPTIONS_OBJS        += addons/51degrees/51d.o\n  51DEGREES_CFLAGS    += $(if $(51DEGREES_INC),-I$(51DEGREES_INC))\n  51DEGREES_LDFLAGS   += $(if $(51DEGREES_LIB),-L$(51DEGREES_LIB))\n  USE_MATH             = implicit\nendif # USE_51DEGREES\n\nifneq ($(USE_WURFL:0=),)\n  # Use WURFL_SRC and possibly WURFL_INC and WURFL_LIB to force path\n  # to WURFL headers and libraries if needed.\n  WURFL_INC = $(WURFL_SRC)\n  WURFL_LIB = $(WURFL_SRC)\n  OPTIONS_OBJS    += addons/wurfl/wurfl.o\n  WURFL_CFLAGS     = $(if $(WURFL_INC),-I$(WURFL_INC))\n  ifneq ($(WURFL_DEBUG),)\n    WURFL_CFLAGS  += -DWURFL_DEBUG\n  endif\n  ifneq ($(WURFL_HEADER_WITH_DETAILS),)\n    WURFL_CFLAGS  += -DWURFL_HEADER_WITH_DETAILS\n  endif\n  WURFL_LDFLAGS    = $(if $(WURFL_LIB),-L$(WURFL_LIB)) -lwurfl\nendif\n\nifneq ($(USE_PCRE:0=)$(USE_STATIC_PCRE:0=)$(USE_PCRE_JIT:0=),)\n  ifneq ($(USE_PCRE2:0=)$(USE_STATIC_PCRE2:0=)$(USE_PCRE2_JIT:0=),)\n    $(error cannot compile both PCRE and PCRE2 support)\n  endif\n  # PCREDIR is used to automatically construct the PCRE_INC and PCRE_LIB paths,\n  # by appending /include and /lib respectively. If your system does not use the\n  # same sub-directories, simply force these variables instead of PCREDIR. It is\n  # automatically detected but can be forced if required (for cross-compiling).\n  # Forcing PCREDIR to an empty string will let the compiler use the default\n  # locations.\n\n  # in case only USE_STATIC_PCRE/USE_PCRE_JIT were set\n  USE_PCRE    := $(if $(USE_PCRE:0=),$(USE_PCRE:0=),implicit)\n  PCRE_CONFIG := pcre-config\n  PCREDIR     := $(shell $(PCRE_CONFIG) --prefix 2>/dev/null || echo /usr/local)\n  ifneq ($(PCREDIR),)\n    PCRE_INC := $(PCREDIR)/include\n    PCRE_LIB := $(PCREDIR)/lib\n  endif\n\n  PCRE_CFLAGS := $(if $(PCRE_INC),-I$(PCRE_INC))\n  ifeq ($(USE_STATIC_PCRE:0=),)\n    PCRE_LDFLAGS := $(if $(PCRE_LIB),-L$(PCRE_LIB)) -lpcreposix -lpcre\n  else\n    PCRE_LDFLAGS := $(if $(PCRE_LIB),-L$(PCRE_LIB)) -Wl,-Bstatic -lpcreposix -lpcre -Wl,-Bdynamic\n  endif\nendif # USE_PCRE\n\nifneq ($(USE_PCRE2:0=)$(USE_STATIC_PCRE2:0=)$(USE_PCRE2_JIT:0=),)\n  # in case only USE_STATIC_PCRE2/USE_PCRE2_JIT were set\n  USE_PCRE2    := $(if $(USE_PCRE2:0=),$(USE_PCRE2:0=),implicit)\n  PCRE2_CONFIG := pcre2-config\n  PCRE2DIR     := $(shell $(PCRE2_CONFIG) --prefix 2>/dev/null || echo /usr/local)\n  ifneq ($(PCRE2DIR),)\n    PCRE2_INC := $(PCRE2DIR)/include\n    PCRE2_LIB := $(PCRE2DIR)/lib\n\n    ifeq ($(PCRE2_WIDTH),)\n      PCRE2_WIDTH = 8\n    endif\n\n    ifneq ($(PCRE2_WIDTH),8)\n      ifneq ($(PCRE2_WIDTH),16)\n        ifneq ($(PCRE2_WIDTH),32)\n          $(error PCRE2_WIDTH needs to be set to either 8,16 or 32)\n        endif\n      endif\n    endif\n\n    PCRE2_CFLAGS  := -DPCRE2_CODE_UNIT_WIDTH=$(PCRE2_WIDTH) $(if $(PCRE2_INC), -I$(PCRE2_INC))\n    PCRE2_LDFLAGS := $(shell $(PCRE2_CONFIG) --libs$(PCRE2_WIDTH) 2>/dev/null || echo -L/usr/local/lib -lpcre2-$(PCRE2_WIDTH))\n\n    ifeq ($(PCRE2_LDFLAGS),)\n      $(error libpcre2-$(PCRE2_WIDTH) not found)\n    else\n      ifeq ($(PCRE2_WIDTH),8)\n        PCRE2_LDFLAGS += -lpcre2-posix\n      endif\n    endif\n\n    ifneq ($(USE_STATIC_PCRE2:0=),)\n      PCRE2_LDFLAGS := $(if $(PCRE2_LIB),-L$(PCRE2_LIB)) -Wl,-Bstatic -L$(PCRE2_LIB) $(PCRE2_LDFLAGS) -Wl,-Bdynamic\n    else\n      PCRE2_LDFLAGS := $(if $(PCRE2_LIB),-L$(PCRE2_LIB)) -L$(PCRE2_LIB) $(PCRE2_LDFLAGS)\n    endif\n  endif # PCRE2DIR\nendif # USE_PCRE2\n\nifneq ($(USE_NS:0=),)\n  OPTIONS_OBJS  += src/namespace.o\nendif\n\nifneq ($(USE_LINUX_CAP:0=),)\n  OPTIONS_OBJS   += src/linuxcap.o\nendif\n\nifneq ($(USE_OT:0=),)\n  include addons/ot/Makefile\nendif\n\n# better keep this one close to the end, as several libs above may need it\nifneq ($(USE_DL:0=),)\n  DL_LDFLAGS = -ldl\nendif\n\nifneq ($(USE_MATH:0=),)\n  MATH_LDFLAGS = -lm\nendif\n\nifneq ($(USE_LIBATOMIC:0=),)\n  LIBATOMIC_LDFLAGS = -latomic\nendif\n\n#### End of the USE_* options handling, any such option that would be added\n#### below could be silently ignored.\n\n# appends all foo_{C,LD}FLAGS to OPTIONS_{C,LD}FLAGS\n$(collect_opts_flags)\n\n#### Global compile options\nVERBOSE_CFLAGS = $(OPT_CFLAGS) $(ARCH_FLAGS) $(CPU_CFLAGS) $(STD_CFLAGS) $(TARGET_CFLAGS) $(CFLAGS) $(DEFINE)\nCOPTS  = -Iinclude\n\nCOPTS += $(OPT_CFLAGS) $(ARCH_FLAGS) $(CPU_CFLAGS) $(STD_CFLAGS) $(WARN_CFLAGS) $(NOWARN_CFLAGS) $(ERROR_CFLAGS) $(TARGET_CFLAGS) $(DEFINE) $(SILENT_DEFINE)\nCOPTS += $(DEBUG) $(OPTIONS_CFLAGS) $(CFLAGS) $(ADDINC)\n\nifneq ($(VERSION)$(SUBVERS)$(EXTRAVERSION),)\n  COPTS += -DCONFIG_HAPROXY_VERSION=\\\"$(VERSION)$(SUBVERS)$(EXTRAVERSION)\\\"\nendif\n\nifneq ($(VERDATE),)\n  COPTS += -DCONFIG_HAPROXY_DATE=\\\"$(VERDATE)\\\"\nendif\n\nifneq ($(TRACE),)\n  # if tracing is enabled, we want it to be as fast as possible\n  TRACE_COPTS := $(filter-out -O0 -O1 -O2 -pg -finstrument-functions,$(COPTS)) -O3 -fomit-frame-pointer\n  COPTS += -finstrument-functions\nendif\n\n#### Global link options\n# These options are added at the end of the \"ld\" command line. Use LDFLAGS to\n# add options at the beginning of the \"ld\" command line if needed.\nLDOPTS = $(TARGET_LDFLAGS) $(OPTIONS_LDFLAGS) $(ADDLIB)\n\nifeq ($(TARGET),)\nall:\n\t@echo \"Building HAProxy without specifying a TARGET is not supported.\"\n\t@echo\n\t@echo \"Usage:\"\n\t@echo\n\t@echo \"    $ make help                       # To print a full explanation.\"\n\t@echo \"    $ make TARGET=xxx USE_<feature>=1 # To build HAProxy.\"\n\t@echo\n\t@echo \"The most commonly used targets are:\"\n\t@echo\n\t@echo \"    linux-glibc    - Modern Linux with glibc\"\n\t@echo \"    linux-musl     - Modern Linux with musl\"\n\t@echo \"    freebsd        - FreeBSD\"\n\t@echo \"    openbsd        - OpenBSD\"\n\t@echo \"    netbsd         - NetBSD\"\n\t@echo \"    osx            - macOS\"\n\t@echo \"    solaris        - Solaris\"\n\t@echo\n\t@echo \"Choose the target which matches your OS the most in order to\"\n\t@echo \"gain the maximum performance out of it.\"\n\t@echo\n\t@echo \"Common features you might want to include in your build are:\"\n\t@echo\n\t@echo \"    USE_OPENSSL=1 - Support for TLS encrypted connections\"\n\t@echo \"    USE_ZLIB=1    - Support for HTTP response compression\"\n\t@echo \"    USE_PCRE=1    - Support for PCRE regular expressions\"\n\t@echo \"    USE_LUA=1     - Support for dynamic processing using Lua\"\n\t@echo\n\t@echo \"Use 'make help' to print a full explanation of supported targets\"\n\t@echo \"and features, and 'make ... opts' to show the variables in use\"\n\t@echo \"for a given set of build options, in a reusable form.\"\n\t@echo\n\t@exit 1\nelse\nifneq ($(filter $(TARGET), linux linux22 linux24 linux24e linux26 linux2628),)\nall:\n\t@echo\n\t@echo \"Target '$(TARGET)' was removed from HAProxy 2.0 due to being irrelevant and\"\n\t@echo \"often wrong. Please use 'linux-glibc' instead or define your custom target\"\n\t@echo \"by checking available options using 'make help TARGET=<your-target>'.\"\n\t@echo\n\t@exit 1\nelse\nall: dev/flags/flags haproxy $(EXTRA)\nendif # obsolete targets\nendif # TARGET\n\nOBJS =\n\nifneq ($(EXTRA_OBJS),)\n  OBJS += $(EXTRA_OBJS)\nendif\n\nOBJS += src/mux_h2.o src/mux_h1.o src/mux_fcgi.o src/log.o\t\t\\\n        src/server.o src/stream.o src/tcpcheck.o src/http_ana.o\t\t\\\n        src/stick_table.o src/tools.o src/mux_spop.o src/sample.o\t\\\n        src/activity.o src/cfgparse.o src/peers.o src/cli.o\t\t\\\n        src/backend.o src/connection.o src/resolvers.o src/proxy.o\t\\\n        src/cache.o src/stconn.o src/http_htx.o src/debug.o\t\t\\\n        src/check.o src/stats-html.o src/haproxy.o src/listener.o\t\\\n        src/applet.o src/pattern.o src/cfgparse-listen.o\t\t\\\n        src/flt_spoe.o src/cebuis_tree.o src/http_ext.o\t\t\t\\\n        src/http_act.o src/http_fetch.o src/cebus_tree.o\t\t\\\n        src/cebuib_tree.o src/http_client.o src/dns.o\t\t\t\\\n        src/cebub_tree.o src/vars.o src/event_hdl.o src/tcp_rules.o\t\\\n        src/trace.o src/stats-proxy.o src/pool.o src/stats.o\t\t\\\n        src/cfgparse-global.o src/filters.o src/mux_pt.o\t\t\\\n        src/flt_http_comp.o src/sock.o src/h1.o src/sink.o\t\t\\\n        src/cebua_tree.o src/session.o src/payload.o src/htx.o\t\t\\\n        src/cebul_tree.o src/cebu32_tree.o src/cebu64_tree.o\t\t\\\n        src/server_state.o src/proto_rhttp.o src/flt_trace.o src/fd.o\t\\\n        src/task.o src/map.o src/fcgi-app.o src/h2.o src/mworker.o\t\\\n        src/tcp_sample.o src/mjson.o src/h1_htx.o src/tcp_act.o\t\t\\\n        src/ring.o src/flt_bwlim.o src/acl.o src/thread.o src/queue.o\t\\\n        src/http_rules.o src/http.o src/channel.o src/proto_tcp.o\t\\\n        src/mqtt.o src/lb_chash.o src/extcheck.o src/dns_ring.o\t\t\\\n        src/errors.o src/ncbuf.o src/compression.o src/http_conv.o\t\\\n        src/frontend.o src/stats-json.o src/proto_sockpair.o\t\t\\\n        src/raw_sock.o src/action.o src/stats-file.o src/buf.o\t\t\\\n        src/xprt_handshake.o src/proto_uxst.o src/lb_fwrr.o\t\t\\\n        src/uri_normalizer.o src/mailers.o src/protocol.o\t\t\\\n        src/cfgcond.o src/proto_udp.o src/lb_fwlc.o src/ebmbtree.o\t\\\n        src/proto_uxdg.o src/cfgdiag.o src/sock_unix.o src/sha1.o\t\\\n        src/lb_fas.o src/clock.o src/sock_inet.o src/ev_select.o\t\\\n        src/lb_map.o src/shctx.o src/mworker-prog.o src/hpack-dec.o\t\\\n        src/arg.o src/signal.o src/fix.o src/dynbuf.o src/guid.o\t\\\n        src/cfgparse-tcp.o src/lb_ss.o src/chunk.o\t\t\t\\\n        src/cfgparse-unix.o src/regex.o src/fcgi.o src/uri_auth.o\t\\\n        src/eb64tree.o src/eb32tree.o src/eb32sctree.o src/lru.o\t\\\n        src/limits.o src/ebimtree.o src/wdt.o src/hpack-tbl.o\t\t\\\n        src/ebistree.o src/base64.o src/auth.o src/time.o\t\t\\\n        src/ebsttree.o src/freq_ctr.o src/systemd.o src/init.o\t\t\\\n        src/http_acl.o src/dict.o src/dgram.o src/pipe.o\t\t\\\n        src/hpack-huff.o src/hpack-enc.o src/ebtree.o src/hash.o\t\\\n        src/version.o\n\nifneq ($(TRACE),)\n  OBJS += src/calltrace.o\nendif\n\n# Used only for forced dependency checking. May be cleared during development.\nINCLUDES = $(wildcard include/*/*.h)\nDEP = $(INCLUDES) .build_opts\n\nhelp:\n\t@sed -ne \"/^[^#]*$$/q;s/^# \\{0,1\\}\\(.*\\)/\\1/;p\" Makefile\n\t@echo; \\\n\t   if [ -n \"$(TARGET)\" ]; then \\\n\t     if [ -n \"$(set_target_defaults)\" ]; then \\\n\t        echo \"Current TARGET: $(TARGET)\"; \\\n\t     else \\\n\t        echo \"Current TARGET: $(TARGET) (custom target)\"; \\\n\t     fi; \\\n\t     echo;echo \"Enabled features for TARGET '$(TARGET)' (disable with 'USE_xxx=') :\"; \\\n\t     set -- $(enabled_opts); echo \"  $$*\" | (fmt || cat) 2>/dev/null; \\\n\t     echo;echo \"Disabled features for TARGET '$(TARGET)' (enable with 'USE_xxx=1') :\"; \\\n\t     set -- $(disabled_opts); echo \"  $$*\" | (fmt || cat) 2>/dev/null; \\\n\t   else \\\n\t     echo \"TARGET not set, you should pass 'TARGET=xxx' to set one among :\";\\\n\t     echo \"  linux-glibc, linux-glibc-legacy, solaris, freebsd, dragonfly, netbsd,\"; \\\n\t     echo \"  osx, openbsd, aix51, aix52, aix72-gcc, cygwin, haiku, generic,\"; \\\n\t     echo \"  custom\"; \\\n\t   fi\n\n# Used only to force a rebuild if some build options change, but we don't do\n# it for certain build targets which take no build options nor when the\n# TARGET variable is not set since we're not building, by definition.\nIGNORE_OPTS=help install install-man install-doc install-bin \\\n\tuninstall clean tags cscope tar git-tar version update-version \\\n\topts reg-tests reg-tests-help admin/halog/halog dev/flags/flags \\\n\tdev/haring/haring dev/ncpu/ncpu dev/poll/poll dev/tcploop/tcploop\n\nifneq ($(TARGET),)\nifeq ($(filter $(firstword $(MAKECMDGOALS)),$(IGNORE_OPTS)),)\nbuild_opts = $(shell rm -f .build_opts.new; echo \\'$(TARGET) $(BUILD_OPTIONS) $(VERBOSE_CFLAGS) $(WARN_CFLAGS) $(NOWARN_CFLAGS) $(DEBUG)\\' > .build_opts.new; if cmp -s .build_opts .build_opts.new; then rm -f .build_opts.new; else mv -f .build_opts.new .build_opts; fi)\n.build_opts: $(build_opts)\nelse\n.build_opts:\nendif # ignore_opts\nelse\n.build_opts:\nendif # non-empty target\n\nhaproxy: $(OPTIONS_OBJS) $(OBJS)\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\nobjsize: haproxy\n\t$(Q)objdump -t $^|grep ' g '|grep -F '.text'|awk '{print $$5 FS $$6}'|sort\n\n%.o:\t%.c $(DEP)\n\t$(cmd_CC) $(COPTS) -c -o $@ $<\n\nadmin/halog/halog: admin/halog/halog.o admin/halog/fgets2.o src/ebtree.o src/eb32tree.o src/eb64tree.o src/ebmbtree.o src/ebsttree.o src/ebistree.o src/ebimtree.o\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\nadmin/dyncookie/dyncookie: admin/dyncookie/dyncookie.o\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\ndev/flags/flags: dev/flags/flags.o\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\ndev/haring/haring: dev/haring/haring.o\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\ndev/hpack/%: dev/hpack/%.o\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\ndev/ncpu/ncpu:\n\t$(cmd_MAKE) -C dev/ncpu ncpu V='$(V)'\n\ndev/poll/poll:\n\t$(cmd_MAKE) -C dev/poll poll CC='$(CC)' OPTIMIZE='$(COPTS)' V='$(V)'\n\ndev/qpack/decode: dev/qpack/decode.o\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\ndev/tcploop/tcploop:\n\t$(cmd_MAKE) -C dev/tcploop tcploop CC='$(CC)' OPTIMIZE='$(COPTS)' V='$(V)'\n\ndev/udp/udp-perturb: dev/udp/udp-perturb.o\n\t$(cmd_LD) $(ARCH_FLAGS) $(LDFLAGS) -o $@ $^ $(LDOPTS)\n\n# rebuild it every time\n.PHONY: src/version.c dev/ncpu/ncpu dev/poll/poll dev/tcploop/tcploop\n\nsrc/calltrace.o: src/calltrace.c $(DEP)\n\t$(cmd_CC) $(TRACE_COPTS) -c -o $@ $<\n\nsrc/haproxy.o:\tsrc/haproxy.c $(DEP)\n\t$(cmd_CC) $(COPTS) \\\n\t      -DBUILD_TARGET='\"$(strip $(TARGET))\"' \\\n\t      -DBUILD_CC='\"$(strip $(CC))\"' \\\n\t      -DBUILD_CFLAGS='\"$(strip $(VERBOSE_CFLAGS))\"' \\\n\t      -DBUILD_OPTIONS='\"$(strip $(BUILD_OPTIONS))\"' \\\n\t      -DBUILD_DEBUG='\"$(strip $(DEBUG))\"' \\\n\t      -DBUILD_FEATURES='\"$(strip $(build_features))\"' \\\n\t       -c -o $@ $<\n\ninstall-man:\n\t$(Q)$(INSTALL) -d \"$(DESTDIR)$(MANDIR)\"/man1\n\t$(Q)$(INSTALL) -m 644 doc/haproxy.1 \"$(DESTDIR)$(MANDIR)\"/man1\n\nEXCLUDE_DOCUMENTATION = lgpl gpl coding-style\nDOCUMENTATION = $(filter-out $(EXCLUDE_DOCUMENTATION),$(patsubst doc/%.txt,%,$(wildcard doc/*.txt)))\n\ninstall-doc:\n\t$(Q)$(INSTALL) -d \"$(DESTDIR)$(DOCDIR)\"\n\t$(Q)for x in $(DOCUMENTATION); do \\\n\t\t$(INSTALL) -m 644 doc/$$x.txt \"$(DESTDIR)$(DOCDIR)\" ; \\\n\tdone\n\ninstall-bin:\n\t$(Q)for i in haproxy $(EXTRA); do \\\n\t\tif ! [ -e \"$$i\" ]; then \\\n\t\t\techo \"Please run 'make' before 'make install'.\"; \\\n\t\t\texit 1; \\\n\t\tfi; \\\n\tdone\n\t$(Q)$(INSTALL) -d \"$(DESTDIR)$(SBINDIR)\"\n\t$(Q)$(INSTALL) haproxy $(EXTRA) \"$(DESTDIR)$(SBINDIR)\"\n\ninstall: install-bin install-man install-doc\n\nuninstall:\n\t$(Q)rm -f \"$(DESTDIR)$(MANDIR)\"/man1/haproxy.1\n\t$(Q)for x in $(DOCUMENTATION); do \\\n\t\trm -f \"$(DESTDIR)$(DOCDIR)\"/$$x.txt ; \\\n\tdone\n\t$(Q)-rmdir \"$(DESTDIR)$(DOCDIR)\"\n\t$(Q)rm -f \"$(DESTDIR)$(SBINDIR)\"/haproxy\n\nclean:\n\t$(Q)rm -f *.[oas] src/*.[oas] haproxy test .build_opts .build_opts.new\n\t$(Q)for dir in . src dev/* admin/* addons/* include/* doc; do rm -f $$dir/*~ $$dir/*.rej $$dir/core; done\n\t$(Q)rm -f haproxy-$(VERSION).tar.gz haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)rm -f haproxy-$(VERSION) haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION) nohup.out gmon.out\n\t$(Q)rm -f addons/promex/*.[oas]\n\t$(Q)rm -f addons/51degrees/*.[oas] addons/51degrees/dummy/*.[oas] addons/51degrees/dummy/*/*.[oas]\n\t$(Q)rm -f addons/deviceatlas/*.[oas] addons/deviceatlas/dummy/*.[oas] addons/deviceatlas/dummy/*.o\n\t$(Q)rm -f addons/deviceatlas/dummy/Os/*.o\n\t$(Q)rm -f addons/ot/src/*.[oas]\n\t$(Q)rm -f addons/wurfl/*.[oas] addons/wurfl/dummy/*.[oas]\n\t$(Q)rm -f admin/*/*.[oas] admin/*/*/*.[oas]\n\t$(Q)rm -f dev/*/*.[oas]\n\t$(Q)rm -f dev/flags/flags\n\ndistclean: clean\n\t$(Q)rm -f admin/iprange/iprange admin/iprange/ip6range admin/halog/halog\n\t$(Q)rm -f admin/dyncookie/dyncookie\n\t$(Q)rm -f dev/haring/haring dev/ncpu/ncpu{,.so} dev/poll/poll dev/tcploop/tcploop\n\t$(Q)rm -f dev/hpack/decode dev/hpack/gen-enc dev/hpack/gen-rht\n\t$(Q)rm -f dev/qpack/decode\n\ntags:\n\t$(Q)find src include \\( -name '*.c' -o -name '*.h' \\) -print0 | \\\n\t   xargs -0 etags --declarations --members\n\ncscope:\n\t$(Q)find src include -name \"*.[ch]\" -print | cscope -q -b -i -\n\ntar:\tclean\n\t$(Q)ln -s . haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)\n\t$(Q)tar --exclude=haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/.git \\\n\t    --exclude=haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION) \\\n\t    --exclude=haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz \\\n\t    -cf - haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/* | gzip -c9 >haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)echo haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)rm -f haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)\n\ngit-tar:\n\t$(Q)git archive --format=tar --prefix=\"haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION)/\" HEAD | gzip -9 > haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\t$(Q)echo haproxy-$(VERSION)$(SUBVERS)$(EXTRAVERSION).tar.gz\n\nversion:\n\t@echo \"VERSION: $(VERSION)\"\n\t@echo \"SUBVERS: $(SUBVERS)\"\n\t@echo \"VERDATE: $(VERDATE)\"\n\n# never use this one if you don't know what it is used for.\nupdate-version:\n\t@echo \"Ready to update the following versions :\"\n\t@echo \"VERSION: $(VERSION)\"\n\t@echo \"SUBVERS: $(SUBVERS)\"\n\t@echo \"VERDATE: $(VERDATE)\"\n\t@echo \"Press [ENTER] to continue or Ctrl-C to abort now.\";read\n\techo \"$(VERSION)\" > VERSION\n\techo \"$(SUBVERS)\" > SUBVERS\n\techo \"$(VERDATE)\" > VERDATE\n\n# just display the build options. The \"USE_*\" options and their respective\n# settings are also listed if they're explicitly set on the command line, or if\n# they are not empty. Implicit \"USE_*\" are not listed.\nopts:\n\t@echo 'Using the following variables (copy-pastable as make arguments):'\n\t@echo '  TARGET=\"$(strip $(TARGET))\" '\\\\\n\t@echo '  ARCH=\"$(strip $(ARCH))\" '\\\\\n\t@echo '  CC=\"$(strip $(CC))\" '\\\\\n\t@echo '  OPT_CFLAGS=\"$(strip $(OPT_CFLAGS))\" '\\\\\n\t@echo '  ARCH_FLAGS=\"$(strip $(ARCH_FLAGS))\" '\\\\\n\t@echo '  CPU_CFLAGS=\"$(strip $(CPU_CFLAGS))\" '\\\\\n\t@echo '  STD_CFLAGS=\"$(strip $(STD_CFLAGS))\" '\\\\\n\t@echo '  WARN_CFLAGS=\"$(strip $(WARN_CFLAGS))\" '\\\\\n\t@echo '  NOWARN_CFLAGS=\"$(strip $(NOWARN_CFLAGS))\" '\\\\\n\t@echo '  ERROR_CFLAGS=\"$(strip $(ERROR_CFLAGS))\" '\\\\\n\t@echo '  CFLAGS=\"$(strip $(CFLAGS))\" '\\\\\n\t@$(foreach opt,$(enabled_opts),\\\n\t\t$(if $(subst command line,,$(origin USE_$(opt))),,\\\n\t\t\techo '  USE_$(opt)=$(USE_$(opt:0=)) '\\\\;) \\\n\t\t$(if $(subst command line,,$(origin $(opt)_CFLAGS)),\\\n\t\t\t$(if $($(opt)_CFLAGS),echo '  $(opt)_CFLAGS=\"$($(opt)_CFLAGS)\" '\\\\;),\\\n\t\t\techo '  $(opt)_CFLAGS=\"$($(opt)_CFLAGS)\" '\\\\;) \\\n\t\t$(if $(subst command line,,$(origin $(opt)_LDFLAGS)),\\\n\t\t\t$(if $($(opt)_LDFLAGS),echo '  $(opt)_LDFLAGS=\"$($(opt)_LDFLAGS)\" '\\\\;),\\\n\t\t\techo '  $(opt)_LDFLAGS=\"$($(opt)_LDFLAGS)\" '\\\\;))\n\t@echo '  LDFLAGS=\"$(strip $(LDFLAGS))\"'\n\t@echo\n\t@echo 'COPTS=\"$(strip $(COPTS))\"'\n\t@echo 'LDOPTS=\"$(strip $(LDOPTS))\"'\n\t@echo 'OPTIONS_OBJS=\"$(strip $(OPTIONS_OBJS))\"'\n\t@echo 'OBJS=\"$(strip $(OBJS))\"'\n\nifeq (reg-tests, $(firstword $(MAKECMDGOALS)))\n  REGTEST_ARGS := $(wordlist 2, $(words $(MAKECMDGOALS)), $(MAKECMDGOALS))\n  $(eval $(REGTEST_ARGS):;@true)\nendif\n\n# Target to run the regression testing script files.\nreg-tests:\n\t$(Q)$(REG_TEST_SCRIPT) --type \"$(REGTESTS_TYPES)\" $(REGTEST_ARGS) $(REG_TEST_FILES)\n.PHONY: $(REGTEST_ARGS)\n\nreg-tests-help:\n\t@echo\n\t@echo \"To launch the reg tests for haproxy, first export to your environment \"\n\t@echo \"VTEST_PROGRAM variable to point to your vtest program:\"\n\t@echo \"    $$ export VTEST_PROGRAM=/opt/local/bin/vtest\"\n\t@echo \"or\"\n\t@echo \"    $$ setenv VTEST_PROGRAM /opt/local/bin/vtest\"\n\t@echo\n\t@echo \"The same thing may be done to set your haproxy program with HAPROXY_PROGRAM \"\n\t@echo \"but with ./haproxy as default value.\"\n\t@echo\n\t@echo \"To run all the tests:\"\n\t@echo \"    $$ make reg-tests\"\n\t@echo\n\t@echo \"You can also set the programs to be used on the command line:\"\n\t@echo \"    $$ VTEST_PROGRAM=<...> HAPROXY_PROGRAM=<...> make reg-tests\"\n\t@echo\n\t@echo \"To run tests with specific types:\"\n\t@echo \"    $$ REGTESTS_TYPES=slow,default make reg-tests\"\n\t@echo\n\t@echo \"with 'default,bug,devel,slow' as default value for REGTESTS_TYPES variable.\"\n\t@echo\n\t@echo \"About the reg test types:\"\n\t@echo \"    any         : all the tests without distinction (this is the default\"\n\t@echo \"                  value of REGTESTS_TYPES.\"\n\t@echo \"    default     : dedicated to pure haproxy compliance tests.\"\n\t@echo \"    slow        : scripts which take non negligible time to run.\"\n\t@echo \"    bug         : scripts in relation with bugs they help to reproduce.\"\n\t@echo \"    broken      : scripts triggering known broken behaviors for which\"\n\t@echo \"                  there is still no fix.\"\n\t@echo \"    experimental: for scripts which are experimental, typically used to\"\n\t@echo \"                  develop new scripts.\"\n\t@echo\n\t@echo \"Note that 'reg-tests' target run '\"$(REG_TEST_SCRIPT)\"' script\"\n\t@echo \"(see --help option of this script for more information).\"\n\n.PHONY: reg-tests reg-tests-help\n\n# \"make range\" iteratively builds using \"make all\" and the exact same build\n# options for all commits within RANGE. RANGE may be either a git range\n# such as ref1..ref2 or a single commit, in which case all commits from\n# the master branch to this one will be tested.\n\nrange:\n\t$(Q)[ -d .git/. ] || { echo \"## Fatal: \\\"make $@\\\" may only be used inside a Git repository.\"; exit 1; }\n\n\t$(Q)if git diff-index --name-only HEAD 2>/dev/null | grep -q ^; then \\\n\t\techo \"Fatal: \\\"make $@\\\" requires a clean working tree.\"; exit 1; fi\n\n\t$(Q)[ -n \"$(RANGE)\" ] || { echo \"## Fatal: \\\"make $@\\\" requires a git commit range in RANGE.\"; exit 1; }\n\t$(Q)[ -n \"$(TARGET)\" ] || { echo \"## Fatal: \\\"make $@\\\" needs the same variables as \\\"all\\\" (TARGET etc).\"; exit 1; }\n\n\t$(Q) (  die() { echo;echo \"## Stopped in error at index [ $$index/$$count ] commit $$commit\";\\\n\t\t\techo \"Previous branch was $$BRANCH\"; exit $$1; }; \\\n\t\tBRANCH=$$(git branch --show-current HEAD 2>/dev/null); \\\n\t\t[ -n \"$$BRANCH\" ] || { echo \"Fatal: \\\"make $@\\\" may only be used inside a checked out branch.\"; exit 1; }; \\\n\t\t[ -z \"$${RANGE##*..*}\" ] || RANGE=\"master..$${RANGE}\"; \\\n\t\tCOMMITS=$$(git rev-list --abbrev-commit --reverse \"$${RANGE}\"); \\\n\t\tindex=1; count=$$(echo $$COMMITS | wc -w); \\\n\t\t[ \"$${count}\" -gt 0 ] || { echo \"## Fatal: no commit(s) found in range $${RANGE}.\"; exit 1; }; \\\n\t\techo \"Found $${count} commit(s) in range $${RANGE}.\" ; \\\n\t\techo \"Current branch is $$BRANCH\"; \\\n\t\techo \"Starting to building now...\"; \\\n\t\tfor commit in $$COMMITS; do \\\n\t\t\techo \"[ $$index/$$count ]   $$commit #############################\"; \\\n\t\t\tgit checkout -q $$commit || die 1; \\\n\t\t\t$(MAKE) all || die 1; \\\n\t\t\tindex=$$((index + 1)); \\\n\t\tdone; \\\n\t\techo;echo \"Done! $${count} commit(s) built successfully for RANGE $${RANGE}\" ; \\\n\t\tgit checkout -q \"$$BRANCH\"; \\\n\t)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7236328125,
          "content": "# HAProxy\n\n[![alpine/musl](https://github.com/haproxy/haproxy/actions/workflows/musl.yml/badge.svg)](https://github.com/haproxy/haproxy/actions/workflows/musl.yml)\n[![AWS-LC](https://github.com/haproxy/haproxy/actions/workflows/aws-lc.yml/badge.svg)](https://github.com/haproxy/haproxy/actions/workflows/aws-lc.yml)\n[![openssl no-deprecated](https://github.com/haproxy/haproxy/actions/workflows/openssl-nodeprecated.yml/badge.svg)](https://github.com/haproxy/haproxy/actions/workflows/openssl-nodeprecated.yml)\n[![Illumos](https://github.com/haproxy/haproxy/actions/workflows/illumos.yml/badge.svg)](https://github.com/haproxy/haproxy/actions/workflows/illumos.yml)\n[![NetBSD](https://github.com/haproxy/haproxy/actions/workflows/netbsd.yml/badge.svg)](https://github.com/haproxy/haproxy/actions/workflows/netbsd.yml)\n[![FreeBSD](https://api.cirrus-ci.com/github/haproxy/haproxy.svg?task=FreeBSD)](https://cirrus-ci.com/github/haproxy/haproxy/)\n[![VTest](https://github.com/haproxy/haproxy/actions/workflows/vtest.yml/badge.svg)](https://github.com/haproxy/haproxy/actions/workflows/vtest.yml)\n\n![HAProxy logo](doc/HAProxyCommunityEdition_60px.png)\n\nHAProxy is a free, very fast and reliable reverse-proxy offering high availability, load balancing, and proxying for TCP\nand HTTP-based applications.\n\n## Installation\n\nThe [INSTALL](INSTALL) file describes how to build HAProxy.\nA [list of packages](https://github.com/haproxy/wiki/wiki/Packages) is also available on the wiki.\n\n## Getting help\n\nThe [discourse](https://discourse.haproxy.org/) and the [mailing-list](https://www.mail-archive.com/haproxy@formilux.org/)\nare available for questions or configuration assistance. You can also use the [slack](https://slack.haproxy.org/) or\n[IRC](irc://irc.libera.chat/%23haproxy) channel. Please don't use the issue tracker for these.\n\nThe [issue tracker](https://github.com/haproxy/haproxy/issues/) is only for bug reports or feature requests.\n\n## Documentation\n\nThe HAProxy documentation has been split into a number of different files for\nease of use. It is available in text format as well as HTML. The wiki is also meant to replace the old architecture\nguide.\n\n- [HTML documentation](http://docs.haproxy.org/)\n- [HTML HAProxy LUA API Documentation](https://www.arpalert.org/haproxy-api.html)\n- [Wiki](https://github.com/haproxy/wiki/wiki)\n\nPlease refer to the following files depending on what you're looking for:\n\n  - [INSTALL](INSTALL) for instructions on how to build and install HAProxy\n  - [BRANCHES](BRANCHES) to understand the project's life cycle and what version to use\n  - [LICENSE](LICENSE) for the project's license\n  - [CONTRIBUTING](CONTRIBUTING) for the process to follow to submit contributions\n\nThe more detailed documentation is located into the doc/ directory:\n\n  - [ doc/intro.txt ](doc/intro.txt) for a quick introduction on HAProxy\n  - [ doc/configuration.txt ](doc/configuration.txt) for the configuration's reference manual\n  - [ doc/lua.txt ](doc/lua.txt) for the Lua's reference manual\n  - [ doc/SPOE.txt ](doc/SPOE.txt) for how to use the SPOE engine\n  - [ doc/network-namespaces.txt ](doc/network-namespaces.txt) for how to use network namespaces under Linux\n  - [ doc/management.txt ](doc/management.txt) for the management guide\n  - [ doc/regression-testing.txt ](doc/regression-testing.txt) for how to use the regression testing suite\n  - [ doc/peers.txt ](doc/peers.txt) for the peers protocol reference\n  - [ doc/coding-style.txt ](doc/coding-style.txt) for how to adopt HAProxy's coding style\n  - [ doc/internals ](doc/internals) for developer-specific documentation (not all up to date)\n\n## License\n\nHAProxy is licensed under [GPL 2](doc/gpl.txt) or any later version, the headers under [LGPL 2.1](doc/lgpl.txt). See the\n[LICENSE](LICENSE) file for a more detailed explanation.\n"
        },
        {
          "name": "SUBVERS",
          "type": "blob",
          "size": 0.013671875,
          "content": "-$Format:%h$\n\n"
        },
        {
          "name": "VERDATE",
          "type": "blob",
          "size": 0.0234375,
          "content": "$Format:%ci$\n2025/01/09\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0087890625,
          "content": "3.2-dev3\n"
        },
        {
          "name": "addons",
          "type": "tree",
          "content": null
        },
        {
          "name": "admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "reg-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}