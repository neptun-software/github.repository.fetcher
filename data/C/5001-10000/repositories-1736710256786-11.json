{
  "metadata": {
    "timestamp": 1736710256786,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jemalloc/jemalloc",
      "stars": 9691,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.9140625,
          "content": "version: '{build}'\n\nenvironment:\n  matrix:\n  - MSYSTEM: MINGW64\n    CPU: x86_64\n    MSVC: amd64\n    CONFIG_FLAGS: --enable-debug\n  - MSYSTEM: MINGW64\n    CPU: x86_64\n    CONFIG_FLAGS: --enable-debug\n  - MSYSTEM: MINGW32\n    CPU: i686\n    MSVC: x86\n    CONFIG_FLAGS: --enable-debug\n  - MSYSTEM: MINGW32\n    CPU: i686\n    CONFIG_FLAGS: --enable-debug\n  - MSYSTEM: MINGW64\n    CPU: x86_64\n    MSVC: amd64\n  - MSYSTEM: MINGW64\n    CPU: x86_64\n  - MSYSTEM: MINGW32\n    CPU: i686\n    MSVC: x86\n  - MSYSTEM: MINGW32\n    CPU: i686\n\ninstall:\n  - set PATH=c:\\msys64\\%MSYSTEM%\\bin;c:\\msys64\\usr\\bin;%PATH%\n  - if defined MSVC call \"c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat\" %MSVC%\n  - if defined MSVC pacman --noconfirm -Rsc mingw-w64-%CPU%-gcc gcc\n\nbuild_script:\n  - bash -c \"autoconf\"\n  - bash -c \"./configure $CONFIG_FLAGS\"\n  - mingw32-make\n  - file lib/jemalloc.dll\n  - mingw32-make tests\n  - mingw32-make -k check\n"
        },
        {
          "name": ".autom4te.cfg",
          "type": "blob",
          "size": 0.1044921875,
          "content": "begin-language: \"Autoconf-without-aclocal-m4\"\nargs: --no-cache\nend-language: \"Autoconf-without-aclocal-m4\"\n"
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.298828125,
          "content": "env:\n  CIRRUS_CLONE_DEPTH: 1\n  ARCH: amd64\n\ntask:\n  matrix:\n      env:\n        DEBUG_CONFIG: --enable-debug\n      env:\n        DEBUG_CONFIG: --disable-debug\n  matrix:\n    - env:\n        PROF_CONFIG: --enable-prof\n    - env:\n        PROF_CONFIG: --disable-prof\n  matrix:\n    - name: 64-bit\n      env:\n        CC:\n        CXX:\n    - name: 32-bit\n      env:\n        CC: cc -m32\n        CXX: c++ -m32\n  matrix:\n    - env:\n        UNCOMMON_CONFIG:\n    - env:\n        UNCOMMON_CONFIG: --with-lg-page=16 --with-malloc-conf=tcache:false\n  matrix:\n     - name: 15-CURRENT\n       freebsd_instance:\n         image_family: freebsd-15-0-snap\n     - name: 14-STABLE\n       freebsd_instance:\n         image_family: freebsd-14-0-snap\n  install_script:\n    - sed -i.bak -e 's,pkg+http://pkg.FreeBSD.org/\\${ABI}/quarterly,pkg+http://pkg.FreeBSD.org/\\${ABI}/latest,' /etc/pkg/FreeBSD.conf\n    - pkg upgrade -y\n    - pkg install -y autoconf gmake\n  script:\n    - autoconf\n    # We don't perfectly track freebsd stdlib.h definitions.  This is fine when\n    # we count as a system header, but breaks otherwise, like during these\n    # tests.\n    - ./configure --with-jemalloc-prefix=ci_ ${DEBUG_CONFIG} ${PROF_CONFIG} ${UNCOMMON_CONFIG}\n    - export JFLAG=`sysctl -n kern.smp.cpus`\n    - gmake -j${JFLAG}\n    - gmake -j${JFLAG} tests\n    - gmake check\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.5078125,
          "content": "# jemalloc targets clang-format version 8.  We include every option it supports\n# here, but comment out the ones that aren't relevant for us.\n---\n# AccessModifierOffset: -2\nAlignAfterOpenBracket: DontAlign\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands: false\nAlignTrailingComments: false\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Empty\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: AllDefinitions\nAlwaysBreakBeforeMultilineStrings: true\n# AlwaysBreakTemplateDeclarations: Yes\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass: false\n  AfterControlStatement: false\n  AfterEnum: false\n  AfterFunction: false\n  AfterNamespace: false\n  AfterObjCDeclaration: false\n  AfterStruct: false\n  AfterUnion: false\n  BeforeCatch: false\n  BeforeElse: false\n  IndentBraces: false\n# BreakAfterJavaFieldAnnotations: true\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: true\n# BreakConstructorInitializers: BeforeColon\n# BreakInheritanceList: BeforeColon\nBreakStringLiterals: false\nColumnLimit: 80\n# CommentPragmas: ''\n# CompactNamespaces: true\n# ConstructorInitializerAllOnOneLineOrOnePerLine: true\n# ConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 2\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:   [ ql_foreach, qr_foreach, ]\n# IncludeBlocks: Preserve\n# IncludeCategories:\n#   - Regex:           '^<.*\\.h(pp)?>'\n#     Priority:        1\n# IncludeIsMainRegex: ''\nIndentCaseLabels: false\nIndentPPDirectives: AfterHash\nIndentWidth: 4\nIndentWrappedFunctionNames: false\n# JavaImportGroups: []\n# JavaScriptQuotes: Leave\n# JavaScriptWrapImports: True\nKeepEmptyLinesAtTheStartOfBlocks: false\nLanguage: Cpp\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMaxEmptyLinesToKeep: 1\n# NamespaceIndentation: None\n# ObjCBinPackProtocolList: Auto\n# ObjCBlockIndentWidth: 2\n# ObjCSpaceAfterProperty: false\n# ObjCSpaceBeforeProtocolList: false\n\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 1\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\n# PenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\n# RawStringFormats:\n#   - Language: TextProto\n#       Delimiters:\n#         - 'pb'\n#         - 'proto'\n#       EnclosingFunctions:\n#         - 'PARSE_TEXT_PROTO'\n#       BasedOnStyle: google\n#   - Language: Cpp\n#       Delimiters:\n#         - 'cc'\n#         - 'cpp'\n#       BasedOnStyle: llvm\n#       CanonicalDelimiter: 'cc'\nReflowComments: true\nSortIncludes: false\nSpaceAfterCStyleCast: false\n# SpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\n# SpaceBeforeCpp11BracedList: false\n# SpaceBeforeCtorInitializerColon: true\n# SpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatements\n# SpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles:  false\nSpacesInCStyleCastParentheses: false\n# SpacesInContainerLiterals: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\n# Standard: Cpp11\n# This is nominally supported in clang-format version 8, but not in the build\n# used by some of the core jemalloc developers.\n# StatementMacros: []\nTabWidth: 8\nUseTab: Never\n...\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.1376953125,
          "content": "/bin/jemalloc-config\n/bin/jemalloc.sh\n/bin/jeprof\n\n/config.stamp\n/config.log\n/config.status\n/configure\n\n/doc/html.xsl\n/doc/manpages.xsl\n/doc/jemalloc.xml\n/doc/jemalloc.html\n/doc/jemalloc.3\n\n/doc_internal/PROFILING_INTERNALS.pdf\n\n/jemalloc.pc\n\n/lib/\n\n/Makefile\n\n/include/jemalloc/internal/jemalloc_preamble.h\n/include/jemalloc/internal/jemalloc_internal_defs.h\n/include/jemalloc/internal/private_namespace.gen.h\n/include/jemalloc/internal/private_namespace.h\n/include/jemalloc/internal/private_namespace_jet.gen.h\n/include/jemalloc/internal/private_namespace_jet.h\n/include/jemalloc/internal/private_symbols.awk\n/include/jemalloc/internal/private_symbols_jet.awk\n/include/jemalloc/internal/public_namespace.h\n/include/jemalloc/internal/public_symbols.txt\n/include/jemalloc/internal/public_unnamespace.h\n/include/jemalloc/jemalloc.h\n/include/jemalloc/jemalloc_defs.h\n/include/jemalloc/jemalloc_macros.h\n/include/jemalloc/jemalloc_mangle.h\n/include/jemalloc/jemalloc_mangle_jet.h\n/include/jemalloc/jemalloc_protos.h\n/include/jemalloc/jemalloc_protos_jet.h\n/include/jemalloc/jemalloc_rename.h\n/include/jemalloc/jemalloc_typedefs.h\n\n/src/*.[od]\n/src/*.sym\n\n# These are semantically meaningful for clangd and related tooling.\n/build/\n/.cache/\ncompile_commands.json\n/static_analysis_raw_results\n/static_analysis_results\n\n/run_tests.out/\n\n/test/test.sh\ntest/include/test/jemalloc_test.h\ntest/include/test/jemalloc_test_defs.h\n\n/test/integration/[A-Za-z]*\n!/test/integration/cpp/\n!/test/integration/[A-Za-z]*.*\n/test/integration/*.[od]\n/test/integration/*.out\n\n/test/integration/cpp/[A-Za-z]*\n!/test/integration/cpp/[A-Za-z]*.*\n/test/integration/cpp/*.[od]\n/test/integration/cpp/*.out\n\n/test/src/*.[od]\n\n/test/stress/[A-Za-z]*\n!/test/stress/[A-Za-z]*.*\n/test/stress/*.[od]\n/test/stress/*.out\n\n/test/unit/[A-Za-z]*\n!/test/unit/[A-Za-z]*.*\n/test/unit/*.[od]\n/test/unit/*.out\n\n/test/analyze/[A-Za-z]*\n!/test/analyze/[A-Za-z]*.*\n/test/analyze/*.[od]\n/test/analyze/*.out\n\n/VERSION\n\n*.pdb\n*.sdf\n*.opendb\n*.VC.db\n*.opensdf\n*.cachefile\n*.suo\n*.user\n*.sln.docstates\n*.tmp\n.vs/\n/msvc/Win32/\n/msvc/x64/\n/msvc/projects/*/*/Debug*/\n/msvc/projects/*/*/Release*/\n/msvc/projects/*/*/Win32/\n/msvc/projects/*/*/x64/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 19.2158203125,
          "content": "# This config file is generated by ./scripts/gen_travis.py.\n# Do not edit by hand.\n\n# We use 'minimal', because 'generic' makes Windows VMs hang at startup. Also\n# the software provided by 'generic' is simply not needed for our tests.\n# Differences are explained here:\n# https://docs.travis-ci.com/user/languages/minimal-and-generic/\nlanguage: minimal\ndist: jammy\n\njobs:\n  include:\n    - os: windows\n      arch: amd64\n      env: CC=gcc CXX=g++ EXTRA_CFLAGS=\"-fcommon\"\n    - os: windows\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug\" EXTRA_CFLAGS=\"-fcommon\"\n    - os: windows\n      arch: amd64\n      env: CC=cl.exe CXX=cl.exe\n    - os: windows\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes EXTRA_CFLAGS=\"-fcommon\"\n    - os: windows\n      arch: amd64\n      env: CC=cl.exe CXX=cl.exe CONFIGURE_FLAGS=\"--enable-debug\"\n    - os: windows\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes CONFIGURE_FLAGS=\"--enable-debug\" EXTRA_CFLAGS=\"-fcommon\"\n    - os: windows\n      arch: amd64\n      env: CC=cl.exe CXX=cl.exe CROSS_COMPILE_32BIT=yes\n    - os: windows\n      arch: amd64\n      env: CC=cl.exe CXX=cl.exe CROSS_COMPILE_32BIT=yes CONFIGURE_FLAGS=\"--enable-debug\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--enable-debug\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--enable-prof\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--disable-stats\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=clang CXX=clang++ CONFIGURE_FLAGS=\"--with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--enable-debug\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--enable-prof\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--disable-stats\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes COMPILER_FLAGS=\"-m32\" CONFIGURE_FLAGS=\"--with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --enable-prof\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --disable-stats\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --disable-stats\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof --with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats --disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats --enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats --with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats --with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats --with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats --with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats --with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl --enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl --with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl --with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl --with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl --with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl --with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks --with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks --with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks --with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks --with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks --with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16 --with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16 --with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16 --with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16 --with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false,dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false,percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false,background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=dss:primary,percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=dss:primary,background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=percpu_arena:percpu,background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=clang CXX=clang++ EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-prof\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16 --with-lg-hugepage=29\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=dss:primary\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: linux\n      arch: arm64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=background_thread:true\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CROSS_COMPILE_32BIT=yes EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-stats\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--disable-libdl\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-opt-safety-checks\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-lg-page=16\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=tcache:false\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    - os: osx\n      arch: amd64\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--with-malloc-conf=percpu_arena:percpu\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds -Wno-unknown-warning-option -Wno-ignored-attributes -Wno-deprecated-declarations\"\n    # Development build\n    - os: linux\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --disable-cache-oblivious --enable-stats --enable-log --enable-prof\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n    # --enable-expermental-smallocx:\n    - os: linux\n      env: CC=gcc CXX=g++ CONFIGURE_FLAGS=\"--enable-debug --enable-experimental-smallocx --enable-stats --enable-prof\" EXTRA_CFLAGS=\"-Werror -Wno-array-bounds\"\n\n\nbefore_install:\n  - |-\n    if test -f \"./scripts/$TRAVIS_OS_NAME/before_install.sh\"; then\n      source ./scripts/$TRAVIS_OS_NAME/before_install.sh\n    fi\n\nbefore_script:\n  - |-\n    if test -f \"./scripts/$TRAVIS_OS_NAME/before_script.sh\"; then\n      source ./scripts/$TRAVIS_OS_NAME/before_script.sh\n    else\n      scripts/gen_travis.py > travis_script && diff .travis.yml travis_script\n      autoconf\n      # If COMPILER_FLAGS are not empty, add them to CC and CXX\n      ./configure ${COMPILER_FLAGS:+ CC=\"$CC $COMPILER_FLAGS\" CXX=\"$CXX $COMPILER_FLAGS\"} $CONFIGURE_FLAGS\n      make -j3\n      make -j3 tests\n    fi\n\nscript:\n  - |-\n    if test -f \"./scripts/$TRAVIS_OS_NAME/script.sh\"; then\n      source ./scripts/$TRAVIS_OS_NAME/script.sh\n    else\n      make check\n    fi\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.6689453125,
          "content": "Unless otherwise specified, files in the jemalloc source distribution are\nsubject to the following license:\n--------------------------------------------------------------------------------\nCopyright (C) 2002-present Jason Evans <jasone@canonware.com>.\nAll rights reserved.\nCopyright (C) 2007-2012 Mozilla Foundation.  All rights reserved.\nCopyright (C) 2009-present Facebook, Inc.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright notice(s),\n   this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice(s),\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY EXPRESS\nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\nEVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--------------------------------------------------------------------------------\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 77.5966796875,
          "content": "Following are change highlights associated with official releases.  Important\nbug fixes are all mentioned, but some internal enhancements are omitted here for\nbrevity.  Much more detail can be found in the git revision history:\n\n    https://github.com/jemalloc/jemalloc\n\n* 5.3.0 (May 6, 2022)\n\n  This release contains many speed and space optimizations, from micro\n  optimizations on common paths to rework of internal data structures and\n  locking schemes, and many more too detailed to list below.  Multiple percent\n  of system level metric improvements were measured in tested production\n  workloads.  The release has gone through large-scale production testing.\n\n  New features:\n  - Add the thread.idle mallctl which hints that the calling thread will be\n    idle for a nontrivial period of time.  (@davidtgoldblatt)\n  - Allow small size classes to be the maximum size class to cache in the\n    thread-specific cache, through the opt.[lg_]tcache_max option.  (@interwq,\n    @jordalgo)\n  - Make the behavior of realloc(ptr, 0) configurable with opt.zero_realloc.\n    (@davidtgoldblatt)\n  - Add 'make uninstall' support.  (@sangshuduo, @Lapenkov)\n  - Support C++17 over-aligned allocation.  (@marksantaniello)\n  - Add the thread.peak mallctl for approximate per-thread peak memory tracking.\n    (@davidtgoldblatt)\n  - Add interval-based stats output opt.stats_interval.  (@interwq)\n  - Add prof.prefix to override filename prefixes for dumps.  (@zhxchen17)\n  - Add high resolution timestamp support for profiling.  (@tyroguru)\n  - Add the --collapsed flag to jeprof for flamegraph generation.\n    (@igorwwwwwwwwwwwwwwwwwwww)\n  - Add the --debug-syms-by-id option to jeprof for debug symbols discovery.\n    (@DeannaGelbart)\n  - Add the opt.prof_leak_error option to exit with error code when leak is\n    detected using opt.prof_final.  (@yunxuo)\n  - Add opt.cache_oblivious as an runtime alternative to config.cache_oblivious.\n    (@interwq)\n  - Add mallctl interfaces:\n    + opt.zero_realloc  (@davidtgoldblatt)\n    + opt.cache_oblivious  (@interwq)\n    + opt.prof_leak_error  (@yunxuo)\n    + opt.stats_interval  (@interwq)\n    + opt.stats_interval_opts  (@interwq)\n    + opt.tcache_max  (@interwq)\n    + opt.trust_madvise  (@azat)\n    + prof.prefix  (@zhxchen17)\n    + stats.zero_reallocs  (@davidtgoldblatt)\n    + thread.idle  (@davidtgoldblatt)\n    + thread.peak.{read,reset}  (@davidtgoldblatt)\n\n  Bug fixes:\n  - Fix the synchronization around explicit tcache creation which could cause\n    invalid tcache identifiers.  This regression was first released in 5.0.0.\n    (@yoshinorim, @davidtgoldblatt)\n  - Fix a profiling biasing issue which could cause incorrect heap usage and\n    object counts.  This issue existed in all previous releases with the heap\n    profiling feature.  (@davidtgoldblatt)\n  - Fix the order of stats counter updating on large realloc which could cause\n    failed assertions.  This regression was first released in 5.0.0.  (@azat)\n  - Fix the locking on the arena destroy mallctl, which could cause concurrent\n    arena creations to fail.  This functionality was first introduced in 5.0.0.\n    (@interwq)\n\n  Portability improvements:\n  - Remove nothrow from system function declarations on macOS and FreeBSD.\n    (@davidtgoldblatt, @fredemmott, @leres)\n  - Improve overcommit and page alignment settings on NetBSD.  (@zoulasc)\n  - Improve CPU affinity support on BSD platforms.  (@devnexen)\n  - Improve utrace detection and support.  (@devnexen)\n  - Improve QEMU support with MADV_DONTNEED zeroed pages detection.  (@azat)\n  - Add memcntl support on Solaris / illumos.  (@devnexen)\n  - Improve CPU_SPINWAIT on ARM.  (@AWSjswinney)\n  - Improve TSD cleanup on FreeBSD.  (@Lapenkov)\n  - Disable percpu_arena if the CPU count cannot be reliably detected.  (@azat)\n  - Add malloc_size(3) override support.  (@devnexen)\n  - Add mmap VM_MAKE_TAG support.  (@devnexen)\n  - Add support for MADV_[NO]CORE.  (@devnexen)\n  - Add support for DragonFlyBSD.  (@devnexen)\n  - Fix the QUANTUM setting on MIPS64.  (@brooksdavis)\n  - Add the QUANTUM setting for ARC.  (@vineetgarc)\n  - Add the QUANTUM setting for LoongArch.  (@wangjl-uos)\n  - Add QNX support.  (@jqian-aurora)\n  - Avoid atexit(3) calls unless the relevant profiling features are enabled.\n    (@BusyJay, @laiwei-rice, @interwq)\n  - Fix unknown option detection when using Clang.  (@Lapenkov)\n  - Fix symbol conflict with musl libc.  (@georgthegreat)\n  - Add -Wimplicit-fallthrough checks.  (@nickdesaulniers)\n  - Add __forceinline support on MSVC.  (@santagada)\n  - Improve FreeBSD and Windows CI support.  (@Lapenkov)\n  - Add CI support for PPC64LE architecture.  (@ezeeyahoo)\n\n  Incompatible changes:\n  - Maximum size class allowed in tcache (opt.[lg_]tcache_max) now has an upper\n    bound of 8MiB.  (@interwq)\n\n  Optimizations and refactors (@davidtgoldblatt, @Lapenkov, @interwq):\n  - Optimize the common cases of the thread cache operations.\n  - Optimize internal data structures, including RB tree and pairing heap.\n  - Optimize the internal locking on extent management.\n  - Extract and refactor the internal page allocator and interface modules.\n\n  Documentation:\n  - Fix doc build with --with-install-suffix.  (@lawmurray, @interwq)\n  - Add PROFILING_INTERNALS.md.  (@davidtgoldblatt)\n  - Ensure the proper order of doc building and installation.  (@Mingli-Yu)\n\n* 5.2.1 (August 5, 2019)\n\n  This release is primarily about Windows.  A critical virtual memory leak is\n  resolved on all Windows platforms.  The regression was present in all releases\n  since 5.0.0.\n\n  Bug fixes:\n  - Fix a severe virtual memory leak on Windows.  This regression was first\n    released in 5.0.0.  (@Ignition, @j0t, @frederik-h, @davidtgoldblatt,\n    @interwq)\n  - Fix size 0 handling in posix_memalign().  This regression was first released\n    in 5.2.0.  (@interwq)\n  - Fix the prof_log unit test which may observe unexpected backtraces from\n    compiler optimizations.  The test was first added in 5.2.0.  (@marxin,\n    @gnzlbg, @interwq)\n  - Fix the declaration of the extent_avail tree.  This regression was first\n    released in 5.1.0.  (@zoulasc)\n  - Fix an incorrect reference in jeprof.  This functionality was first released\n    in 3.0.0.  (@prehistoric-penguin)\n  - Fix an assertion on the deallocation fast-path.  This regression was first\n    released in 5.2.0.  (@yinan1048576)\n  - Fix the TLS_MODEL attribute in headers.  This regression was first released\n    in 5.0.0.  (@zoulasc, @interwq)\n\n  Optimizations and refactors:\n  - Implement opt.retain on Windows and enable by default on 64-bit.  (@interwq,\n    @davidtgoldblatt)\n  - Optimize away a branch on the operator delete[] path.  (@mgrice)\n  - Add format annotation to the format generator function.  (@zoulasc)\n  - Refactor and improve the size class header generation.  (@yinan1048576)\n  - Remove best fit.  (@djwatson)\n  - Avoid blocking on background thread locks for stats.  (@oranagra, @interwq)\n\n* 5.2.0 (April 2, 2019)\n\n  This release includes a few notable improvements, which are summarized below:\n  1) improved fast-path performance from the optimizations by @djwatson; 2)\n  reduced virtual memory fragmentation and metadata usage; and 3) bug fixes on\n  setting the number of background threads.  In addition, peak / spike memory\n  usage is improved with certain allocation patterns.  As usual, the release and\n  prior dev versions have gone through large-scale production testing.\n\n  New features:\n  - Implement oversize_threshold, which uses a dedicated arena for allocations\n    crossing the specified threshold to reduce fragmentation.  (@interwq)\n  - Add extents usage information to stats.  (@tyleretzel)\n  - Log time information for sampled allocations.  (@tyleretzel)\n  - Support 0 size in sdallocx.  (@djwatson)\n  - Output rate for certain counters in malloc_stats.  (@zinoale)\n  - Add configure option --enable-readlinkat, which allows the use of readlinkat\n    over readlink.  (@davidtgoldblatt)\n  - Add configure options --{enable,disable}-{static,shared} to allow not\n    building unwanted libraries.  (@Ericson2314)\n  - Add configure option --disable-libdl to enable fully static builds.\n    (@interwq)\n  - Add mallctl interfaces:\n\t+ opt.oversize_threshold (@interwq)\n\t+ stats.arenas.<i>.extent_avail (@tyleretzel)\n\t+ stats.arenas.<i>.extents.<j>.n{dirty,muzzy,retained} (@tyleretzel)\n\t+ stats.arenas.<i>.extents.<j>.{dirty,muzzy,retained}_bytes\n\t  (@tyleretzel)\n\n  Portability improvements:\n  - Update MSVC builds.  (@maksqwe, @rustyx)\n  - Workaround a compiler optimizer bug on s390x.  (@rkmisra)\n  - Make use of pthread_set_name_np(3) on FreeBSD.  (@trasz)\n  - Implement malloc_getcpu() to enable percpu_arena for windows.  (@santagada)\n  - Link against -pthread instead of -lpthread.  (@paravoid)\n  - Make background_thread not dependent on libdl.  (@interwq)\n  - Add stringify to fix a linker directive issue on MSVC.  (@daverigby)\n  - Detect and fall back when 8-bit atomics are unavailable.  (@interwq)\n  - Fall back to the default pthread_create if dlsym(3) fails.  (@interwq)\n\n  Optimizations and refactors:\n  - Refactor the TSD module.  (@davidtgoldblatt)\n  - Avoid taking extents_muzzy mutex when muzzy is disabled.  (@interwq)\n  - Avoid taking large_mtx for auto arenas on the tcache flush path.  (@interwq)\n  - Optimize ixalloc by avoiding a size lookup.  (@interwq)\n  - Implement opt.oversize_threshold which uses a dedicated arena for requests\n    crossing the threshold, also eagerly purges the oversize extents.  Default\n    the threshold to 8 MiB.  (@interwq)\n  - Clean compilation with -Wextra.  (@gnzlbg, @jasone)\n  - Refactor the size class module.  (@davidtgoldblatt)\n  - Refactor the stats emitter.  (@tyleretzel)\n  - Optimize pow2_ceil.  (@rkmisra)\n  - Avoid runtime detection of lazy purging on FreeBSD.  (@trasz)\n  - Optimize mmap(2) alignment handling on FreeBSD.  (@trasz)\n  - Improve error handling for THP state initialization.  (@jsteemann)\n  - Rework the malloc() fast path.  (@djwatson)\n  - Rework the free() fast path.  (@djwatson)\n  - Refactor and optimize the tcache fill / flush paths.  (@djwatson)\n  - Optimize sync / lwsync on PowerPC.  (@chmeeedalf)\n  - Bypass extent_dalloc() when retain is enabled.  (@interwq)\n  - Optimize the locking on large deallocation.  (@interwq)\n  - Reduce the number of pages committed from sanity checking in debug build.\n    (@trasz, @interwq)\n  - Deprecate OSSpinLock.  (@interwq)\n  - Lower the default number of background threads to 4 (when the feature\n    is enabled).  (@interwq)\n  - Optimize the trylock spin wait.  (@djwatson)\n  - Use arena index for arena-matching checks.  (@interwq)\n  - Avoid forced decay on thread termination when using background threads.\n    (@interwq)\n  - Disable muzzy decay by default.  (@djwatson, @interwq)\n  - Only initialize libgcc unwinder when profiling is enabled.  (@paravoid,\n    @interwq)\n\n  Bug fixes (all only relevant to jemalloc 5.x):\n  - Fix background thread index issues with max_background_threads.  (@djwatson,\n    @interwq)\n  - Fix stats output for opt.lg_extent_max_active_fit.  (@interwq)\n  - Fix opt.prof_prefix initialization.  (@davidtgoldblatt)\n  - Properly trigger decay on tcache destroy.  (@interwq, @amosbird)\n  - Fix tcache.flush.  (@interwq)\n  - Detect whether explicit extent zero out is necessary with huge pages or\n    custom extent hooks, which may change the purge semantics.  (@interwq)\n  - Fix a side effect caused by extent_max_active_fit combined with decay-based\n    purging, where freed extents can accumulate and not be reused for an\n    extended period of time.  (@interwq, @mpghf)\n  - Fix a missing unlock on extent register error handling.  (@zoulasc)\n\n  Testing:\n  - Simplify the Travis script output.  (@gnzlbg)\n  - Update the test scripts for FreeBSD.  (@devnexen)\n  - Add unit tests for the producer-consumer pattern.  (@interwq)\n  - Add Cirrus-CI config for FreeBSD builds.  (@jasone)\n  - Add size-matching sanity checks on tcache flush.  (@davidtgoldblatt,\n    @interwq)\n\n  Incompatible changes:\n  - Remove --with-lg-page-sizes.  (@davidtgoldblatt)\n\n  Documentation:\n  - Attempt to build docs by default, however skip doc building when xsltproc\n    is missing. (@interwq, @cmuellner)\n\n* 5.1.0 (May 4, 2018)\n\n  This release is primarily about fine-tuning, ranging from several new features\n  to numerous notable performance and portability enhancements.  The release and\n  prior dev versions have been running in multiple large scale applications for\n  months, and the cumulative improvements are substantial in many cases.\n\n  Given the long and successful production runs, this release is likely a good\n  candidate for applications to upgrade, from both jemalloc 5.0 and before.  For\n  performance-critical applications, the newly added TUNING.md provides\n  guidelines on jemalloc tuning.\n\n  New features:\n  - Implement transparent huge page support for internal metadata.  (@interwq)\n  - Add opt.thp to allow enabling / disabling transparent huge pages for all\n    mappings.  (@interwq)\n  - Add maximum background thread count option.  (@djwatson)\n  - Allow prof_active to control opt.lg_prof_interval and prof.gdump.\n    (@interwq)\n  - Allow arena index lookup based on allocation addresses via mallctl.\n    (@lionkov)\n  - Allow disabling initial-exec TLS model.  (@davidtgoldblatt, @KenMacD)\n  - Add opt.lg_extent_max_active_fit to set the max ratio between the size of\n    the active extent selected (to split off from) and the size of the requested\n    allocation.  (@interwq, @davidtgoldblatt)\n  - Add retain_grow_limit to set the max size when growing virtual address\n    space.  (@interwq)\n  - Add mallctl interfaces:\n    + arena.<i>.retain_grow_limit  (@interwq)\n    + arenas.lookup  (@lionkov)\n    + max_background_threads  (@djwatson)\n    + opt.lg_extent_max_active_fit  (@interwq)\n    + opt.max_background_threads  (@djwatson)\n    + opt.metadata_thp  (@interwq)\n    + opt.thp  (@interwq)\n    + stats.metadata_thp  (@interwq)\n\n  Portability improvements:\n  - Support GNU/kFreeBSD configuration.  (@paravoid)\n  - Support m68k, nios2 and SH3 architectures.  (@paravoid)\n  - Fall back to FD_CLOEXEC when O_CLOEXEC is unavailable.  (@zonyitoo)\n  - Fix symbol listing for cross-compiling.  (@tamird)\n  - Fix high bits computation on ARM.  (@davidtgoldblatt, @paravoid)\n  - Disable the CPU_SPINWAIT macro for Power.  (@davidtgoldblatt, @marxin)\n  - Fix MSVC 2015 & 2017 builds.  (@rustyx)\n  - Improve RISC-V support.  (@EdSchouten)\n  - Set name mangling script in strict mode.  (@nicolov)\n  - Avoid MADV_HUGEPAGE on ARM.  (@marxin)\n  - Modify configure to determine return value of strerror_r.\n    (@davidtgoldblatt, @cferris1000)\n  - Make sure CXXFLAGS is tested with CPP compiler.  (@nehaljwani)\n  - Fix 32-bit build on MSVC.  (@rustyx)\n  - Fix external symbol on MSVC.  (@maksqwe)\n  - Avoid a printf format specifier warning.  (@jasone)\n  - Add configure option --disable-initial-exec-tls which can allow jemalloc to\n    be dynamically loaded after program startup.  (@davidtgoldblatt, @KenMacD)\n  - AArch64: Add ILP32 support.  (@cmuellner)\n  - Add --with-lg-vaddr configure option to support cross compiling.\n    (@cmuellner, @davidtgoldblatt)\n\n  Optimizations and refactors:\n  - Improve active extent fit with extent_max_active_fit.  This considerably\n    reduces fragmentation over time and improves virtual memory and metadata\n    usage.  (@davidtgoldblatt, @interwq)\n  - Eagerly coalesce large extents to reduce fragmentation.  (@interwq)\n  - sdallocx: only read size info when page aligned (i.e. possibly sampled),\n    which speeds up the sized deallocation path significantly.  (@interwq)\n  - Avoid attempting new mappings for in place expansion with retain, since\n    it rarely succeeds in practice and causes high overhead.  (@interwq)\n  - Refactor OOM handling in newImpl.  (@wqfish)\n  - Add internal fine-grained logging functionality for debugging use.\n    (@davidtgoldblatt)\n  - Refactor arena / tcache interactions.  (@davidtgoldblatt)\n  - Refactor extent management with dumpable flag.  (@davidtgoldblatt)\n  - Add runtime detection of lazy purging.  (@interwq)\n  - Use pairing heap instead of red-black tree for extents_avail.  (@djwatson)\n  - Use sysctl on startup in FreeBSD.  (@trasz)\n  - Use thread local prng state instead of atomic.  (@djwatson)\n  - Make decay to always purge one more extent than before, because in\n    practice large extents are usually the ones that cross the decay threshold.\n    Purging the additional extent helps save memory as well as reduce VM\n    fragmentation.  (@interwq)\n  - Fast division by dynamic values.  (@davidtgoldblatt)\n  - Improve the fit for aligned allocation.  (@interwq, @edwinsmith)\n  - Refactor extent_t bitpacking.  (@rkmisra)\n  - Optimize the generated assembly for ticker operations.  (@davidtgoldblatt)\n  - Convert stats printing to use a structured text emitter.  (@davidtgoldblatt)\n  - Remove preserve_lru feature for extents management.  (@djwatson)\n  - Consolidate two memory loads into one on the fast deallocation path.\n    (@davidtgoldblatt, @interwq)\n\n  Bug fixes (most of the issues are only relevant to jemalloc 5.0):\n  - Fix deadlock with multithreaded fork in OS X.  (@davidtgoldblatt)\n  - Validate returned file descriptor before use.  (@zonyitoo)\n  - Fix a few background thread initialization and shutdown issues.  (@interwq)\n  - Fix an extent coalesce + decay race by taking both coalescing extents off\n    the LRU list.  (@interwq)\n  - Fix potentially unbound increase during decay, caused by one thread keep\n    stashing memory to purge while other threads generating new pages.  The\n    number of pages to purge is checked to prevent this.  (@interwq)\n  - Fix a FreeBSD bootstrap assertion.  (@strejda, @interwq)\n  - Handle 32 bit mutex counters.  (@rkmisra)\n  - Fix a indexing bug when creating background threads.  (@davidtgoldblatt,\n    @binliu19)\n  - Fix arguments passed to extent_init.  (@yuleniwo, @interwq)\n  - Fix addresses used for ordering mutexes.  (@rkmisra)\n  - Fix abort_conf processing during bootstrap.  (@interwq)\n  - Fix include path order for out-of-tree builds.  (@cmuellner)\n\n  Incompatible changes:\n  - Remove --disable-thp.  (@interwq)\n  - Remove mallctl interfaces:\n    + config.thp  (@interwq)\n\n  Documentation:\n  - Add TUNING.md.  (@interwq, @davidtgoldblatt, @djwatson)\n\n* 5.0.1 (July 1, 2017)\n\n  This bugfix release fixes several issues, most of which are obscure enough\n  that typical applications are not impacted.\n\n  Bug fixes:\n  - Update decay->nunpurged before purging, in order to avoid potential update\n    races and subsequent incorrect purging volume.  (@interwq)\n  - Only abort on dlsym(3) error if the failure impacts an enabled feature (lazy\n    locking and/or background threads).  This mitigates an initialization\n    failure bug for which we still do not have a clear reproduction test case.\n    (@interwq)\n  - Modify tsd management so that it neither crashes nor leaks if a thread's\n    only allocation activity is to call free() after TLS destructors have been\n    executed.  This behavior was observed when operating with GNU libc, and is\n    unlikely to be an issue with other libc implementations.  (@interwq)\n  - Mask signals during background thread creation.  This prevents signals from\n    being inadvertently delivered to background threads.  (@jasone,\n    @davidtgoldblatt, @interwq)\n  - Avoid inactivity checks within background threads, in order to prevent\n    recursive mutex acquisition.  (@interwq)\n  - Fix extent_grow_retained() to use the specified hooks when the\n    arena.<i>.extent_hooks mallctl is used to override the default hooks.\n    (@interwq)\n  - Add missing reentrancy support for custom extent hooks which allocate.\n    (@interwq)\n  - Post-fork(2), re-initialize the list of tcaches associated with each arena\n    to contain no tcaches except the forking thread's.  (@interwq)\n  - Add missing post-fork(2) mutex reinitialization for extent_grow_mtx.  This\n    fixes potential deadlocks after fork(2).  (@interwq)\n  - Enforce minimum autoconf version (currently 2.68), since 2.63 is known to\n    generate corrupt configure scripts.  (@jasone)\n  - Ensure that the configured page size (--with-lg-page) is no larger than the\n    configured huge page size (--with-lg-hugepage).  (@jasone)\n\n* 5.0.0 (June 13, 2017)\n\n  Unlike all previous jemalloc releases, this release does not use naturally\n  aligned \"chunks\" for virtual memory management, and instead uses page-aligned\n  \"extents\".  This change has few externally visible effects, but the internal\n  impacts are... extensive.  Many other internal changes combine to make this\n  the most cohesively designed version of jemalloc so far, with ample\n  opportunity for further enhancements.\n\n  Continuous integration is now an integral aspect of development thanks to the\n  efforts of @davidtgoldblatt, and the dev branch tends to remain reasonably\n  stable on the tested platforms (Linux, FreeBSD, macOS, and Windows).  As a\n  side effect the official release frequency may decrease over time.\n\n  New features:\n  - Implement optional per-CPU arena support; threads choose which arena to use\n    based on current CPU rather than on fixed thread-->arena associations.\n    (@interwq)\n  - Implement two-phase decay of unused dirty pages.  Pages transition from\n    dirty-->muzzy-->clean, where the first phase transition relies on\n    madvise(... MADV_FREE) semantics, and the second phase transition discards\n    pages such that they are replaced with demand-zeroed pages on next access.\n    (@jasone)\n  - Increase decay time resolution from seconds to milliseconds.  (@jasone)\n  - Implement opt-in per CPU background threads, and use them for asynchronous\n    decay-driven unused dirty page purging.  (@interwq)\n  - Add mutex profiling, which collects a variety of statistics useful for\n    diagnosing overhead/contention issues.  (@interwq)\n  - Add C++ new/delete operator bindings.  (@djwatson)\n  - Support manually created arena destruction, such that all data and metadata\n    are discarded.  Add MALLCTL_ARENAS_DESTROYED for accessing merged stats\n    associated with destroyed arenas.  (@jasone)\n  - Add MALLCTL_ARENAS_ALL as a fixed index for use in accessing\n    merged/destroyed arena statistics via mallctl.  (@jasone)\n  - Add opt.abort_conf to optionally abort if invalid configuration options are\n    detected during initialization.  (@interwq)\n  - Add opt.stats_print_opts, so that e.g. JSON output can be selected for the\n    stats dumped during exit if opt.stats_print is true.  (@jasone)\n  - Add --with-version=VERSION for use when embedding jemalloc into another\n    project's git repository.  (@jasone)\n  - Add --disable-thp to support cross compiling.  (@jasone)\n  - Add --with-lg-hugepage to support cross compiling.  (@jasone)\n  - Add mallctl interfaces (various authors):\n    + background_thread\n    + opt.abort_conf\n    + opt.retain\n    + opt.percpu_arena\n    + opt.background_thread\n    + opt.{dirty,muzzy}_decay_ms\n    + opt.stats_print_opts\n    + arena.<i>.initialized\n    + arena.<i>.destroy\n    + arena.<i>.{dirty,muzzy}_decay_ms\n    + arena.<i>.extent_hooks\n    + arenas.{dirty,muzzy}_decay_ms\n    + arenas.bin.<i>.slab_size\n    + arenas.nlextents\n    + arenas.lextent.<i>.size\n    + arenas.create\n    + stats.background_thread.{num_threads,num_runs,run_interval}\n    + stats.mutexes.{ctl,background_thread,prof,reset}.\n      {num_ops,num_spin_acq,num_wait,max_wait_time,total_wait_time,max_num_thds,\n      num_owner_switch}\n    + stats.arenas.<i>.{dirty,muzzy}_decay_ms\n    + stats.arenas.<i>.uptime\n    + stats.arenas.<i>.{pmuzzy,base,internal,resident}\n    + stats.arenas.<i>.{dirty,muzzy}_{npurge,nmadvise,purged}\n    + stats.arenas.<i>.bins.<j>.{nslabs,reslabs,curslabs}\n    + stats.arenas.<i>.bins.<j>.mutex.\n      {num_ops,num_spin_acq,num_wait,max_wait_time,total_wait_time,max_num_thds,\n      num_owner_switch}\n    + stats.arenas.<i>.lextents.<j>.{nmalloc,ndalloc,nrequests,curlextents}\n    + stats.arenas.i.mutexes.{large,extent_avail,extents_dirty,extents_muzzy,\n      extents_retained,decay_dirty,decay_muzzy,base,tcache_list}.\n      {num_ops,num_spin_acq,num_wait,max_wait_time,total_wait_time,max_num_thds,\n      num_owner_switch}\n\n  Portability improvements:\n  - Improve reentrant allocation support, such that deadlock is less likely if\n    e.g. a system library call in turn allocates memory.  (@davidtgoldblatt,\n    @interwq)\n  - Support static linking of jemalloc with glibc.  (@djwatson)\n\n  Optimizations and refactors:\n  - Organize virtual memory as \"extents\" of virtual memory pages, rather than as\n    naturally aligned \"chunks\", and store all metadata in arbitrarily distant\n    locations.  This reduces virtual memory external fragmentation, and will\n    interact better with huge pages (not yet explicitly supported).  (@jasone)\n  - Fold large and huge size classes together; only small and large size classes\n    remain.  (@jasone)\n  - Unify the allocation paths, and merge most fast-path branching decisions.\n    (@davidtgoldblatt, @interwq)\n  - Embed per thread automatic tcache into thread-specific data, which reduces\n    conditional branches and dereferences.  Also reorganize tcache to increase\n    fast-path data locality.  (@interwq)\n  - Rewrite atomics to closely model the C11 API, convert various\n    synchronization from mutex-based to atomic, and use the explicit memory\n    ordering control to resolve various hypothetical races without increasing\n    synchronization overhead.  (@davidtgoldblatt)\n  - Extensively optimize rtree via various methods:\n    + Add multiple layers of rtree lookup caching, since rtree lookups are now\n      part of fast-path deallocation.  (@interwq)\n    + Determine rtree layout at compile time.  (@jasone)\n    + Make the tree shallower for common configurations.  (@jasone)\n    + Embed the root node in the top-level rtree data structure, thus avoiding\n      one level of indirection.  (@jasone)\n    + Further specialize leaf elements as compared to internal node elements,\n      and directly embed extent metadata needed for fast-path deallocation.\n      (@jasone)\n    + Ignore leading always-zero address bits (architecture-specific).\n      (@jasone)\n  - Reorganize headers (ongoing work) to make them hermetic, and disentangle\n    various module dependencies.  (@davidtgoldblatt)\n  - Convert various internal data structures such as size class metadata from\n    boot-time-initialized to compile-time-initialized.  Propagate resulting data\n    structure simplifications, such as making arena metadata fixed-size.\n    (@jasone)\n  - Simplify size class lookups when constrained to size classes that are\n    multiples of the page size.  This speeds lookups, but the primary benefit is\n    complexity reduction in code that was the source of numerous regressions.\n    (@jasone)\n  - Lock individual extents when possible for localized extent operations,\n    rather than relying on a top-level arena lock.  (@davidtgoldblatt, @jasone)\n  - Use first fit layout policy instead of best fit, in order to improve\n    packing.  (@jasone)\n  - If munmap(2) is not in use, use an exponential series to grow each arena's\n    virtual memory, so that the number of disjoint virtual memory mappings\n    remains low.  (@jasone)\n  - Implement per arena base allocators, so that arenas never share any virtual\n    memory pages.  (@jasone)\n  - Automatically generate private symbol name mangling macros.  (@jasone)\n\n  Incompatible changes:\n  - Replace chunk hooks with an expanded/normalized set of extent hooks.\n    (@jasone)\n  - Remove ratio-based purging.  (@jasone)\n  - Remove --disable-tcache.  (@jasone)\n  - Remove --disable-tls.  (@jasone)\n  - Remove --enable-ivsalloc.  (@jasone)\n  - Remove --with-lg-size-class-group.  (@jasone)\n  - Remove --with-lg-tiny-min.  (@jasone)\n  - Remove --disable-cc-silence.  (@jasone)\n  - Remove --enable-code-coverage.  (@jasone)\n  - Remove --disable-munmap (replaced by opt.retain).  (@jasone)\n  - Remove Valgrind support.  (@jasone)\n  - Remove quarantine support.  (@jasone)\n  - Remove redzone support.  (@jasone)\n  - Remove mallctl interfaces (various authors):\n    + config.munmap\n    + config.tcache\n    + config.tls\n    + config.valgrind\n    + opt.lg_chunk\n    + opt.purge\n    + opt.lg_dirty_mult\n    + opt.decay_time\n    + opt.quarantine\n    + opt.redzone\n    + opt.thp\n    + arena.<i>.lg_dirty_mult\n    + arena.<i>.decay_time\n    + arena.<i>.chunk_hooks\n    + arenas.initialized\n    + arenas.lg_dirty_mult\n    + arenas.decay_time\n    + arenas.bin.<i>.run_size\n    + arenas.nlruns\n    + arenas.lrun.<i>.size\n    + arenas.nhchunks\n    + arenas.hchunk.<i>.size\n    + arenas.extend\n    + stats.cactive\n    + stats.arenas.<i>.lg_dirty_mult\n    + stats.arenas.<i>.decay_time\n    + stats.arenas.<i>.metadata.{mapped,allocated}\n    + stats.arenas.<i>.{npurge,nmadvise,purged}\n    + stats.arenas.<i>.huge.{allocated,nmalloc,ndalloc,nrequests}\n    + stats.arenas.<i>.bins.<j>.{nruns,reruns,curruns}\n    + stats.arenas.<i>.lruns.<j>.{nmalloc,ndalloc,nrequests,curruns}\n    + stats.arenas.<i>.hchunks.<j>.{nmalloc,ndalloc,nrequests,curhchunks}\n\n  Bug fixes:\n  - Improve interval-based profile dump triggering to dump only one profile when\n    a single allocation's size exceeds the interval.  (@jasone)\n  - Use prefixed function names (as controlled by --with-jemalloc-prefix) when\n    pruning backtrace frames in jeprof.  (@jasone)\n\n* 4.5.0 (February 28, 2017)\n\n  This is the first release to benefit from much broader continuous integration\n  testing, thanks to @davidtgoldblatt.  Had we had this testing infrastructure\n  in place for prior releases, it would have caught all of the most serious\n  regressions fixed by this release.\n\n  New features:\n  - Add --disable-thp and the opt.thp mallctl to provide opt-out mechanisms for\n    transparent huge page integration.  (@jasone)\n  - Update zone allocator integration to work with macOS 10.12.  (@glandium)\n  - Restructure *CFLAGS configuration, so that CFLAGS behaves typically, and\n    EXTRA_CFLAGS provides a way to specify e.g. -Werror during building, but not\n    during configuration.  (@jasone, @ronawho)\n\n  Bug fixes:\n  - Fix DSS (sbrk(2)-based) allocation.  This regression was first released in\n    4.3.0.  (@jasone)\n  - Handle race in per size class utilization computation.  This functionality\n    was first released in 4.0.0.  (@interwq)\n  - Fix lock order reversal during gdump.  (@jasone)\n  - Fix/refactor tcache synchronization.  This regression was first released in\n    4.0.0.  (@jasone)\n  - Fix various JSON-formatted malloc_stats_print() bugs.  This functionality\n    was first released in 4.3.0.  (@jasone)\n  - Fix huge-aligned allocation.  This regression was first released in 4.4.0.\n    (@jasone)\n  - When transparent huge page integration is enabled, detect what state pages\n    start in according to the kernel's current operating mode, and only convert\n    arena chunks to non-huge during purging if that is not their initial state.\n    This functionality was first released in 4.4.0.  (@jasone)\n  - Fix lg_chunk clamping for the --enable-cache-oblivious --disable-fill case.\n    This regression was first released in 4.0.0.  (@jasone, @428desmo)\n  - Properly detect sparc64 when building for Linux.  (@glaubitz)\n\n* 4.4.0 (December 3, 2016)\n\n  New features:\n  - Add configure support for *-*-linux-android.  (@cferris1000, @jasone)\n  - Add the --disable-syscall configure option, for use on systems that place\n    security-motivated limitations on syscall(2).  (@jasone)\n  - Add support for Debian GNU/kFreeBSD.  (@thesam)\n\n  Optimizations:\n  - Add extent serial numbers and use them where appropriate as a sort key that\n    is higher priority than address, so that the allocation policy prefers older\n    extents.  This tends to improve locality (decrease fragmentation) when\n    memory grows downward.  (@jasone)\n  - Refactor madvise(2) configuration so that MADV_FREE is detected and utilized\n    on Linux 4.5 and newer.  (@jasone)\n  - Mark partially purged arena chunks as non-huge-page.  This improves\n    interaction with Linux's transparent huge page functionality.  (@jasone)\n\n  Bug fixes:\n  - Fix size class computations for edge conditions involving extremely large\n    allocations.  This regression was first released in 4.0.0.  (@jasone,\n    @ingvarha)\n  - Remove overly restrictive assertions related to the cactive statistic.  This\n    regression was first released in 4.1.0.  (@jasone)\n  - Implement a more reliable detection scheme for os_unfair_lock on macOS.\n    (@jszakmeister)\n\n* 4.3.1 (November 7, 2016)\n\n  Bug fixes:\n  - Fix a severe virtual memory leak.  This regression was first released in\n    4.3.0.  (@interwq, @jasone)\n  - Refactor atomic and prng APIs to restore support for 32-bit platforms that\n    use pre-C11 toolchains, e.g. FreeBSD's mips.  (@jasone)\n\n* 4.3.0 (November 4, 2016)\n\n  This is the first release that passes the test suite for multiple Windows\n  configurations, thanks in large part to @glandium setting up continuous\n  integration via AppVeyor (and Travis CI for Linux and OS X).\n\n  New features:\n  - Add \"J\" (JSON) support to malloc_stats_print().  (@jasone)\n  - Add Cray compiler support.  (@ronawho)\n\n  Optimizations:\n  - Add/use adaptive spinning for bootstrapping and radix tree node\n    initialization.  (@jasone)\n\n  Bug fixes:\n  - Fix large allocation to search starting in the optimal size class heap,\n    which can substantially reduce virtual memory churn and fragmentation.  This\n    regression was first released in 4.0.0.  (@mjp41, @jasone)\n  - Fix stats.arenas.<i>.nthreads accounting.  (@interwq)\n  - Fix and simplify decay-based purging.  (@jasone)\n  - Make DSS (sbrk(2)-related) operations lockless, which resolves potential\n    deadlocks during thread exit.  (@jasone)\n  - Fix over-sized allocation of radix tree leaf nodes.  (@mjp41, @ogaun,\n    @jasone)\n  - Fix over-sized allocation of arena_t (plus associated stats) data\n    structures.  (@jasone, @interwq)\n  - Fix EXTRA_CFLAGS to not affect configuration.  (@jasone)\n  - Fix a Valgrind integration bug.  (@ronawho)\n  - Disallow 0x5a junk filling when running in Valgrind.  (@jasone)\n  - Fix a file descriptor leak on Linux.  This regression was first released in\n    4.2.0.  (@vsarunas, @jasone)\n  - Fix static linking of jemalloc with glibc.  (@djwatson)\n  - Use syscall(2) rather than {open,read,close}(2) during boot on Linux.  This\n    works around other libraries' system call wrappers performing reentrant\n    allocation.  (@kspinka, @Whissi, @jasone)\n  - Fix OS X default zone replacement to work with OS X 10.12.  (@glandium,\n    @jasone)\n  - Fix cached memory management to avoid needless commit/decommit operations\n    during purging, which resolves permanent virtual memory map fragmentation\n    issues on Windows.  (@mjp41, @jasone)\n  - Fix TSD fetches to avoid (recursive) allocation.  This is relevant to\n    non-TLS and Windows configurations.  (@jasone)\n  - Fix malloc_conf overriding to work on Windows.  (@jasone)\n  - Forcibly disable lazy-lock on Windows (was forcibly *enabled*).  (@jasone)\n\n* 4.2.1 (June 8, 2016)\n\n  Bug fixes:\n  - Fix bootstrapping issues for configurations that require allocation during\n    tsd initialization (e.g. --disable-tls).  (@cferris1000, @jasone)\n  - Fix gettimeofday() version of nstime_update().  (@ronawho)\n  - Fix Valgrind regressions in calloc() and chunk_alloc_wrapper().  (@ronawho)\n  - Fix potential VM map fragmentation regression.  (@jasone)\n  - Fix opt_zero-triggered in-place huge reallocation zeroing.  (@jasone)\n  - Fix heap profiling context leaks in reallocation edge cases.  (@jasone)\n\n* 4.2.0 (May 12, 2016)\n\n  New features:\n  - Add the arena.<i>.reset mallctl, which makes it possible to discard all of\n    an arena's allocations in a single operation.  (@jasone)\n  - Add the stats.retained and stats.arenas.<i>.retained statistics.  (@jasone)\n  - Add the --with-version configure option.  (@jasone)\n  - Support --with-lg-page values larger than actual page size.  (@jasone)\n\n  Optimizations:\n  - Use pairing heaps rather than red-black trees for various hot data\n    structures.  (@djwatson, @jasone)\n  - Streamline fast paths of rtree operations.  (@jasone)\n  - Optimize the fast paths of calloc() and [m,d,sd]allocx().  (@jasone)\n  - Decommit unused virtual memory if the OS does not overcommit.  (@jasone)\n  - Specify MAP_NORESERVE on Linux if [heuristic] overcommit is active, in order\n    to avoid unfortunate interactions during fork(2).  (@jasone)\n\n  Bug fixes:\n  - Fix chunk accounting related to triggering gdump profiles.  (@jasone)\n  - Link against librt for clock_gettime(2) if glibc < 2.17.  (@jasone)\n  - Scale leak report summary according to sampling probability.  (@jasone)\n\n* 4.1.1 (May 3, 2016)\n\n  This bugfix release resolves a variety of mostly minor issues, though the\n  bitmap fix is critical for 64-bit Windows.\n\n  Bug fixes:\n  - Fix the linear scan version of bitmap_sfu() to shift by the proper amount\n    even when sizeof(long) is not the same as sizeof(void *), as on 64-bit\n    Windows.  (@jasone)\n  - Fix hashing functions to avoid unaligned memory accesses (and resulting\n    crashes).  This is relevant at least to some ARM-based platforms.\n    (@rkmisra)\n  - Fix fork()-related lock rank ordering reversals.  These reversals were\n    unlikely to cause deadlocks in practice except when heap profiling was\n    enabled and active.  (@jasone)\n  - Fix various chunk leaks in OOM code paths.  (@jasone)\n  - Fix malloc_stats_print() to print opt.narenas correctly.  (@jasone)\n  - Fix MSVC-specific build/test issues.  (@rustyx, @yuslepukhin)\n  - Fix a variety of test failures that were due to test fragility rather than\n    core bugs.  (@jasone)\n\n* 4.1.0 (February 28, 2016)\n\n  This release is primarily about optimizations, but it also incorporates a lot\n  of portability-motivated refactoring and enhancements.  Many people worked on\n  this release, to an extent that even with the omission here of minor changes\n  (see git revision history), and of the people who reported and diagnosed\n  issues, so much of the work was contributed that starting with this release,\n  changes are annotated with author credits to help reflect the collaborative\n  effort involved.\n\n  New features:\n  - Implement decay-based unused dirty page purging, a major optimization with\n    mallctl API impact.  This is an alternative to the existing ratio-based\n    unused dirty page purging, and is intended to eventually become the sole\n    purging mechanism.  New mallctls:\n    + opt.purge\n    + opt.decay_time\n    + arena.<i>.decay\n    + arena.<i>.decay_time\n    + arenas.decay_time\n    + stats.arenas.<i>.decay_time\n    (@jasone, @cevans87)\n  - Add --with-malloc-conf, which makes it possible to embed a default\n    options string during configuration.  This was motivated by the desire to\n    specify --with-malloc-conf=purge:decay , since the default must remain\n    purge:ratio until the 5.0.0 release.  (@jasone)\n  - Add MS Visual Studio 2015 support.  (@rustyx, @yuslepukhin)\n  - Make *allocx() size class overflow behavior defined.  The maximum\n    size class is now less than PTRDIFF_MAX to protect applications against\n    numerical overflow, and all allocation functions are guaranteed to indicate\n    errors rather than potentially crashing if the request size exceeds the\n    maximum size class.  (@jasone)\n  - jeprof:\n    + Add raw heap profile support.  (@jasone)\n    + Add --retain and --exclude for backtrace symbol filtering.  (@jasone)\n\n  Optimizations:\n  - Optimize the fast path to combine various bootstrapping and configuration\n    checks and execute more streamlined code in the common case.  (@interwq)\n  - Use linear scan for small bitmaps (used for small object tracking).  In\n    addition to speeding up bitmap operations on 64-bit systems, this reduces\n    allocator metadata overhead by approximately 0.2%.  (@djwatson)\n  - Separate arena_avail trees, which substantially speeds up run tree\n    operations.  (@djwatson)\n  - Use memoization (boot-time-computed table) for run quantization.  Separate\n    arena_avail trees reduced the importance of this optimization.  (@jasone)\n  - Attempt mmap-based in-place huge reallocation.  This can dramatically speed\n    up incremental huge reallocation.  (@jasone)\n\n  Incompatible changes:\n  - Make opt.narenas unsigned rather than size_t.  (@jasone)\n\n  Bug fixes:\n  - Fix stats.cactive accounting regression.  (@rustyx, @jasone)\n  - Handle unaligned keys in hash().  This caused problems for some ARM systems.\n    (@jasone, @cferris1000)\n  - Refactor arenas array.  In addition to fixing a fork-related deadlock, this\n    makes arena lookups faster and simpler.  (@jasone)\n  - Move retained memory allocation out of the default chunk allocation\n    function, to a location that gets executed even if the application installs\n    a custom chunk allocation function.  This resolves a virtual memory leak.\n    (@buchgr)\n  - Fix a potential tsd cleanup leak.  (@cferris1000, @jasone)\n  - Fix run quantization.  In practice this bug had no impact unless\n    applications requested memory with alignment exceeding one page.\n    (@jasone, @djwatson)\n  - Fix LinuxThreads-specific bootstrapping deadlock.  (Cosmin Paraschiv)\n  - jeprof:\n    + Don't discard curl options if timeout is not defined.  (@djwatson)\n    + Detect failed profile fetches.  (@djwatson)\n  - Fix stats.arenas.<i>.{dss,lg_dirty_mult,decay_time,pactive,pdirty} for\n    --disable-stats case.  (@jasone)\n\n* 4.0.4 (October 24, 2015)\n\n  This bugfix release fixes another xallocx() regression.  No other regressions\n  have come to light in over a month, so this is likely a good starting point\n  for people who prefer to wait for \"dot one\" releases with all the major issues\n  shaken out.\n\n  Bug fixes:\n  - Fix xallocx(..., MALLOCX_ZERO to zero the last full trailing page of large\n    allocations that have been randomly assigned an offset of 0 when\n    --enable-cache-oblivious configure option is enabled.\n\n* 4.0.3 (September 24, 2015)\n\n  This bugfix release continues the trend of xallocx() and heap profiling fixes.\n\n  Bug fixes:\n  - Fix xallocx(..., MALLOCX_ZERO) to zero all trailing bytes of large\n    allocations when --enable-cache-oblivious configure option is enabled.\n  - Fix xallocx(..., MALLOCX_ZERO) to zero trailing bytes of huge allocations\n    when resizing from/to a size class that is not a multiple of the chunk size.\n  - Fix prof_tctx_dump_iter() to filter out nodes that were created after heap\n    profile dumping started.\n  - Work around a potentially bad thread-specific data initialization\n    interaction with NPTL (glibc's pthreads implementation).\n\n* 4.0.2 (September 21, 2015)\n\n  This bugfix release addresses a few bugs specific to heap profiling.\n\n  Bug fixes:\n  - Fix ixallocx_prof_sample() to never modify nor create sampled small\n    allocations.  xallocx() is in general incapable of moving small allocations,\n    so this fix removes buggy code without loss of generality.\n  - Fix irallocx_prof_sample() to always allocate large regions, even when\n    alignment is non-zero.\n  - Fix prof_alloc_rollback() to read tdata from thread-specific data rather\n    than dereferencing a potentially invalid tctx.\n\n* 4.0.1 (September 15, 2015)\n\n  This is a bugfix release that is somewhat high risk due to the amount of\n  refactoring required to address deep xallocx() problems.  As a side effect of\n  these fixes, xallocx() now tries harder to partially fulfill requests for\n  optional extra space.  Note that a couple of minor heap profiling\n  optimizations are included, but these are better thought of as performance\n  fixes that were integral to discovering most of the other bugs.\n\n  Optimizations:\n  - Avoid a chunk metadata read in arena_prof_tctx_set(), since it is in the\n    fast path when heap profiling is enabled.  Additionally, split a special\n    case out into arena_prof_tctx_reset(), which also avoids chunk metadata\n    reads.\n  - Optimize irallocx_prof() to optimistically update the sampler state.  The\n    prior implementation appears to have been a holdover from when\n    rallocx()/xallocx() functionality was combined as rallocm().\n\n  Bug fixes:\n  - Fix TLS configuration such that it is enabled by default for platforms on\n    which it works correctly.\n  - Fix arenas_cache_cleanup() and arena_get_hard() to handle\n    allocation/deallocation within the application's thread-specific data\n    cleanup functions even after arenas_cache is torn down.\n  - Fix xallocx() bugs related to size+extra exceeding HUGE_MAXCLASS.\n  - Fix chunk purge hook calls for in-place huge shrinking reallocation to\n    specify the old chunk size rather than the new chunk size.  This bug caused\n    no correctness issues for the default chunk purge function, but was\n    visible to custom functions set via the \"arena.<i>.chunk_hooks\" mallctl.\n  - Fix heap profiling bugs:\n    + Fix heap profiling to distinguish among otherwise identical sample sites\n      with interposed resets (triggered via the \"prof.reset\" mallctl).  This bug\n      could cause data structure corruption that would most likely result in a\n      segfault.\n    + Fix irealloc_prof() to prof_alloc_rollback() on OOM.\n    + Make one call to prof_active_get_unlocked() per allocation event, and use\n      the result throughout the relevant functions that handle an allocation\n      event.  Also add a missing check in prof_realloc().  These fixes protect\n      allocation events against concurrent prof_active changes.\n    + Fix ixallocx_prof() to pass usize_max and zero to ixallocx_prof_sample()\n      in the correct order.\n    + Fix prof_realloc() to call prof_free_sampled_object() after calling\n      prof_malloc_sample_object().  Prior to this fix, if tctx and old_tctx were\n      the same, the tctx could have been prematurely destroyed.\n  - Fix portability bugs:\n    + Don't bitshift by negative amounts when encoding/decoding run sizes in\n      chunk header maps.  This affected systems with page sizes greater than 8\n      KiB.\n    + Rename index_t to szind_t to avoid an existing type on Solaris.\n    + Add JEMALLOC_CXX_THROW to the memalign() function prototype, in order to\n      match glibc and avoid compilation errors when including both\n      jemalloc/jemalloc.h and malloc.h in C++ code.\n    + Don't assume that /bin/sh is appropriate when running size_classes.sh\n      during configuration.\n    + Consider __sparcv9 a synonym for __sparc64__ when defining LG_QUANTUM.\n    + Link tests to librt if it contains clock_gettime(2).\n\n* 4.0.0 (August 17, 2015)\n\n  This version contains many speed and space optimizations, both minor and\n  major.  The major themes are generalization, unification, and simplification.\n  Although many of these optimizations cause no visible behavior change, their\n  cumulative effect is substantial.\n\n  New features:\n  - Normalize size class spacing to be consistent across the complete size\n    range.  By default there are four size classes per size doubling, but this\n    is now configurable via the --with-lg-size-class-group option.  Also add the\n    --with-lg-page, --with-lg-page-sizes, --with-lg-quantum, and\n    --with-lg-tiny-min options, which can be used to tweak page and size class\n    settings.  Impacts:\n    + Worst case performance for incrementally growing/shrinking reallocation\n      is improved because there are far fewer size classes, and therefore\n      copying happens less often.\n    + Internal fragmentation is limited to 20% for all but the smallest size\n      classes (those less than four times the quantum).  (1B + 4 KiB)\n      and (1B + 4 MiB) previously suffered nearly 50% internal fragmentation.\n    + Chunk fragmentation tends to be lower because there are fewer distinct run\n      sizes to pack.\n  - Add support for explicit tcaches.  The \"tcache.create\", \"tcache.flush\", and\n    \"tcache.destroy\" mallctls control tcache lifetime and flushing, and the\n    MALLOCX_TCACHE(tc) and MALLOCX_TCACHE_NONE flags to the *allocx() API\n    control which tcache is used for each operation.\n  - Implement per thread heap profiling, as well as the ability to\n    enable/disable heap profiling on a per thread basis.  Add the \"prof.reset\",\n    \"prof.lg_sample\", \"thread.prof.name\", \"thread.prof.active\",\n    \"opt.prof_thread_active_init\", \"prof.thread_active_init\", and\n    \"thread.prof.active\" mallctls.\n  - Add support for per arena application-specified chunk allocators, configured\n    via the \"arena.<i>.chunk_hooks\" mallctl.\n  - Refactor huge allocation to be managed by arenas, so that arenas now\n    function as general purpose independent allocators.  This is important in\n    the context of user-specified chunk allocators, aside from the scalability\n    benefits.  Related new statistics:\n    + The \"stats.arenas.<i>.huge.allocated\", \"stats.arenas.<i>.huge.nmalloc\",\n      \"stats.arenas.<i>.huge.ndalloc\", and \"stats.arenas.<i>.huge.nrequests\"\n      mallctls provide high level per arena huge allocation statistics.\n    + The \"arenas.nhchunks\", \"arenas.hchunk.<i>.size\",\n      \"stats.arenas.<i>.hchunks.<j>.nmalloc\",\n      \"stats.arenas.<i>.hchunks.<j>.ndalloc\",\n      \"stats.arenas.<i>.hchunks.<j>.nrequests\", and\n      \"stats.arenas.<i>.hchunks.<j>.curhchunks\" mallctls provide per size class\n      statistics.\n  - Add the 'util' column to malloc_stats_print() output, which reports the\n    proportion of available regions that are currently in use for each small\n    size class.\n  - Add \"alloc\" and \"free\" modes for for junk filling (see the \"opt.junk\"\n    mallctl), so that it is possible to separately enable junk filling for\n    allocation versus deallocation.\n  - Add the jemalloc-config script, which provides information about how\n    jemalloc was configured, and how to integrate it into application builds.\n  - Add metadata statistics, which are accessible via the \"stats.metadata\",\n    \"stats.arenas.<i>.metadata.mapped\", and\n    \"stats.arenas.<i>.metadata.allocated\" mallctls.\n  - Add the \"stats.resident\" mallctl, which reports the upper limit of\n    physically resident memory mapped by the allocator.\n  - Add per arena control over unused dirty page purging, via the\n    \"arenas.lg_dirty_mult\", \"arena.<i>.lg_dirty_mult\", and\n    \"stats.arenas.<i>.lg_dirty_mult\" mallctls.\n  - Add the \"prof.gdump\" mallctl, which makes it possible to toggle the gdump\n    feature on/off during program execution.\n  - Add sdallocx(), which implements sized deallocation.  The primary\n    optimization over dallocx() is the removal of a metadata read, which often\n    suffers an L1 cache miss.\n  - Add missing header includes in jemalloc/jemalloc.h, so that applications\n    only have to #include <jemalloc/jemalloc.h>.\n  - Add support for additional platforms:\n    + Bitrig\n    + Cygwin\n    + DragonFlyBSD\n    + iOS\n    + OpenBSD\n    + OpenRISC/or1k\n\n  Optimizations:\n  - Maintain dirty runs in per arena LRUs rather than in per arena trees of\n    dirty-run-containing chunks.  In practice this change significantly reduces\n    dirty page purging volume.\n  - Integrate whole chunks into the unused dirty page purging machinery.  This\n    reduces the cost of repeated huge allocation/deallocation, because it\n    effectively introduces a cache of chunks.\n  - Split the arena chunk map into two separate arrays, in order to increase\n    cache locality for the frequently accessed bits.\n  - Move small run metadata out of runs, into arena chunk headers.  This reduces\n    run fragmentation, smaller runs reduce external fragmentation for small size\n    classes, and packed (less uniformly aligned) metadata layout improves CPU\n    cache set distribution.\n  - Randomly distribute large allocation base pointer alignment relative to page\n    boundaries in order to more uniformly utilize CPU cache sets.  This can be\n    disabled via the --disable-cache-oblivious configure option, and queried via\n    the \"config.cache_oblivious\" mallctl.\n  - Micro-optimize the fast paths for the public API functions.\n  - Refactor thread-specific data to reside in a single structure.  This assures\n    that only a single TLS read is necessary per call into the public API.\n  - Implement in-place huge allocation growing and shrinking.\n  - Refactor rtree (radix tree for chunk lookups) to be lock-free, and make\n    additional optimizations that reduce maximum lookup depth to one or two\n    levels.  This resolves what was a concurrency bottleneck for per arena huge\n    allocation, because a global data structure is critical for determining\n    which arenas own which huge allocations.\n\n  Incompatible changes:\n  - Replace --enable-cc-silence with --disable-cc-silence to suppress spurious\n    warnings by default.\n  - Assure that the constness of malloc_usable_size()'s return type matches that\n    of the system implementation.\n  - Change the heap profile dump format to support per thread heap profiling,\n    rename pprof to jeprof, and enhance it with the --thread=<n> option.  As a\n    result, the bundled jeprof must now be used rather than the upstream\n    (gperftools) pprof.\n  - Disable \"opt.prof_final\" by default, in order to avoid atexit(3), which can\n    internally deadlock on some platforms.\n  - Change the \"arenas.nlruns\" mallctl type from size_t to unsigned.\n  - Replace the \"stats.arenas.<i>.bins.<j>.allocated\" mallctl with\n    \"stats.arenas.<i>.bins.<j>.curregs\".\n  - Ignore MALLOC_CONF in set{uid,gid,cap} binaries.\n  - Ignore MALLOCX_ARENA(a) in dallocx(), in favor of using the\n    MALLOCX_TCACHE(tc) and MALLOCX_TCACHE_NONE flags to control tcache usage.\n\n  Removed features:\n  - Remove the *allocm() API, which is superseded by the *allocx() API.\n  - Remove the --enable-dss options, and make dss non-optional on all platforms\n    which support sbrk(2).\n  - Remove the \"arenas.purge\" mallctl, which was obsoleted by the\n    \"arena.<i>.purge\" mallctl in 3.1.0.\n  - Remove the unnecessary \"opt.valgrind\" mallctl; jemalloc automatically\n    detects whether it is running inside Valgrind.\n  - Remove the \"stats.huge.allocated\", \"stats.huge.nmalloc\", and\n    \"stats.huge.ndalloc\" mallctls.\n  - Remove the --enable-mremap option.\n  - Remove the \"stats.chunks.current\", \"stats.chunks.total\", and\n    \"stats.chunks.high\" mallctls.\n\n  Bug fixes:\n  - Fix the cactive statistic to decrease (rather than increase) when active\n    memory decreases.  This regression was first released in 3.5.0.\n  - Fix OOM handling in memalign() and valloc().  A variant of this bug existed\n    in all releases since 2.0.0, which introduced these functions.\n  - Fix an OOM-related regression in arena_tcache_fill_small(), which could\n    cause cache corruption on OOM.  This regression was present in all releases\n    from 2.2.0 through 3.6.0.\n  - Fix size class overflow handling for malloc(), posix_memalign(), memalign(),\n    calloc(), and realloc() when profiling is enabled.\n  - Fix the \"arena.<i>.dss\" mallctl to return an error if \"primary\" or\n    \"secondary\" precedence is specified, but sbrk(2) is not supported.\n  - Fix fallback lg_floor() implementations to handle extremely large inputs.\n  - Ensure the default purgeable zone is after the default zone on OS X.\n  - Fix latent bugs in atomic_*().\n  - Fix the \"arena.<i>.dss\" mallctl to handle read-only calls.\n  - Fix tls_model configuration to enable the initial-exec model when possible.\n  - Mark malloc_conf as a weak symbol so that the application can override it.\n  - Correctly detect glibc's adaptive pthread mutexes.\n  - Fix the --without-export configure option.\n\n* 3.6.0 (March 31, 2014)\n\n  This version contains a critical bug fix for a regression present in 3.5.0 and\n  3.5.1.\n\n  Bug fixes:\n  - Fix a regression in arena_chunk_alloc() that caused crashes during\n    small/large allocation if chunk allocation failed.  In the absence of this\n    bug, chunk allocation failure would result in allocation failure, e.g.  NULL\n    return from malloc().  This regression was introduced in 3.5.0.\n  - Fix backtracing for gcc intrinsics-based backtracing by specifying\n    -fno-omit-frame-pointer to gcc.  Note that the application (and all the\n    libraries it links to) must also be compiled with this option for\n    backtracing to be reliable.\n  - Use dss allocation precedence for huge allocations as well as small/large\n    allocations.\n  - Fix test assertion failure message formatting.  This bug did not manifest on\n    x86_64 systems because of implementation subtleties in va_list.\n  - Fix inconsequential test failures for hash and SFMT code.\n\n  New features:\n  - Support heap profiling on FreeBSD.  This feature depends on the proc\n    filesystem being mounted during heap profile dumping.\n\n* 3.5.1 (February 25, 2014)\n\n  This version primarily addresses minor bugs in test code.\n\n  Bug fixes:\n  - Configure Solaris/Illumos to use MADV_FREE.\n  - Fix junk filling for mremap(2)-based huge reallocation.  This is only\n    relevant if configuring with the --enable-mremap option specified.\n  - Avoid compilation failure if 'restrict' C99 keyword is not supported by the\n    compiler.\n  - Add a configure test for SSE2 rather than assuming it is usable on i686\n    systems.  This fixes test compilation errors, especially on 32-bit Linux\n    systems.\n  - Fix mallctl argument size mismatches (size_t vs. uint64_t) in the stats unit\n    test.\n  - Fix/remove flawed alignment-related overflow tests.\n  - Prevent compiler optimizations that could change backtraces in the\n    prof_accum unit test.\n\n* 3.5.0 (January 22, 2014)\n\n  This version focuses on refactoring and automated testing, though it also\n  includes some non-trivial heap profiling optimizations not mentioned below.\n\n  New features:\n  - Add the *allocx() API, which is a successor to the experimental *allocm()\n    API.  The *allocx() functions are slightly simpler to use because they have\n    fewer parameters, they directly return the results of primary interest, and\n    mallocx()/rallocx() avoid the strict aliasing pitfall that\n    allocm()/rallocm() share with posix_memalign().  Note that *allocm() is\n    slated for removal in the next non-bugfix release.\n  - Add support for LinuxThreads.\n\n  Bug fixes:\n  - Unless heap profiling is enabled, disable floating point code and don't link\n    with libm.  This, in combination with e.g. EXTRA_CFLAGS=-mno-sse on x64\n    systems, makes it possible to completely disable floating point register\n    use.  Some versions of glibc neglect to save/restore caller-saved floating\n    point registers during dynamic lazy symbol loading, and the symbol loading\n    code uses whatever malloc the application happens to have linked/loaded\n    with, the result being potential floating point register corruption.\n  - Report ENOMEM rather than EINVAL if an OOM occurs during heap profiling\n    backtrace creation in imemalign().  This bug impacted posix_memalign() and\n    aligned_alloc().\n  - Fix a file descriptor leak in a prof_dump_maps() error path.\n  - Fix prof_dump() to close the dump file descriptor for all relevant error\n    paths.\n  - Fix rallocm() to use the arena specified by the ALLOCM_ARENA(s) flag for\n    allocation, not just deallocation.\n  - Fix a data race for large allocation stats counters.\n  - Fix a potential infinite loop during thread exit.  This bug occurred on\n    Solaris, and could affect other platforms with similar pthreads TSD\n    implementations.\n  - Don't junk-fill reallocations unless usable size changes.  This fixes a\n    violation of the *allocx()/*allocm() semantics.\n  - Fix growing large reallocation to junk fill new space.\n  - Fix huge deallocation to junk fill when munmap is disabled.\n  - Change the default private namespace prefix from empty to je_, and change\n    --with-private-namespace-prefix so that it prepends an additional prefix\n    rather than replacing je_.  This reduces the likelihood of applications\n    which statically link jemalloc experiencing symbol name collisions.\n  - Add missing private namespace mangling (relevant when\n    --with-private-namespace is specified).\n  - Add and use JEMALLOC_INLINE_C so that static inline functions are marked as\n    static even for debug builds.\n  - Add a missing mutex unlock in a malloc_init_hard() error path.  In practice\n    this error path is never executed.\n  - Fix numerous bugs in malloc_strotumax() error handling/reporting.  These\n    bugs had no impact except for malformed inputs.\n  - Fix numerous bugs in malloc_snprintf().  These bugs were not exercised by\n    existing calls, so they had no impact.\n\n* 3.4.1 (October 20, 2013)\n\n  Bug fixes:\n  - Fix a race in the \"arenas.extend\" mallctl that could cause memory corruption\n    of internal data structures and subsequent crashes.\n  - Fix Valgrind integration flaws that caused Valgrind warnings about reads of\n    uninitialized memory in:\n    + arena chunk headers\n    + internal zero-initialized data structures (relevant to tcache and prof\n      code)\n  - Preserve errno during the first allocation.  A readlink(2) call during\n    initialization fails unless /etc/malloc.conf exists, so errno was typically\n    set during the first allocation prior to this fix.\n  - Fix compilation warnings reported by gcc 4.8.1.\n\n* 3.4.0 (June 2, 2013)\n\n  This version is essentially a small bugfix release, but the addition of\n  aarch64 support requires that the minor version be incremented.\n\n  Bug fixes:\n  - Fix race-triggered deadlocks in chunk_record().  These deadlocks were\n    typically triggered by multiple threads concurrently deallocating huge\n    objects.\n\n  New features:\n  - Add support for the aarch64 architecture.\n\n* 3.3.1 (March 6, 2013)\n\n  This version fixes bugs that are typically encountered only when utilizing\n  custom run-time options.\n\n  Bug fixes:\n  - Fix a locking order bug that could cause deadlock during fork if heap\n    profiling were enabled.\n  - Fix a chunk recycling bug that could cause the allocator to lose track of\n    whether a chunk was zeroed.  On FreeBSD, NetBSD, and OS X, it could cause\n    corruption if allocating via sbrk(2) (unlikely unless running with the\n    \"dss:primary\" option specified).  This was completely harmless on Linux\n    unless using mlockall(2) (and unlikely even then, unless the\n    --disable-munmap configure option or the \"dss:primary\" option was\n    specified).  This regression was introduced in 3.1.0 by the\n    mlockall(2)/madvise(2) interaction fix.\n  - Fix TLS-related memory corruption that could occur during thread exit if the\n    thread never allocated memory.  Only the quarantine and prof facilities were\n    susceptible.\n  - Fix two quarantine bugs:\n    + Internal reallocation of the quarantined object array leaked the old\n      array.\n    + Reallocation failure for internal reallocation of the quarantined object\n      array (very unlikely) resulted in memory corruption.\n  - Fix Valgrind integration to annotate all internally allocated memory in a\n    way that keeps Valgrind happy about internal data structure access.\n  - Fix building for s390 systems.\n\n* 3.3.0 (January 23, 2013)\n\n  This version includes a few minor performance improvements in addition to the\n  listed new features and bug fixes.\n\n  New features:\n  - Add clipping support to lg_chunk option processing.\n  - Add the --enable-ivsalloc option.\n  - Add the --without-export option.\n  - Add the --disable-zone-allocator option.\n\n  Bug fixes:\n  - Fix \"arenas.extend\" mallctl to output the number of arenas.\n  - Fix chunk_recycle() to unconditionally inform Valgrind that returned memory\n    is undefined.\n  - Fix build break on FreeBSD related to alloca.h.\n\n* 3.2.0 (November 9, 2012)\n\n  In addition to a couple of bug fixes, this version modifies page run\n  allocation and dirty page purging algorithms in order to better control\n  page-level virtual memory fragmentation.\n\n  Incompatible changes:\n  - Change the \"opt.lg_dirty_mult\" default from 5 to 3 (32:1 to 8:1).\n\n  Bug fixes:\n  - Fix dss/mmap allocation precedence code to use recyclable mmap memory only\n    after primary dss allocation fails.\n  - Fix deadlock in the \"arenas.purge\" mallctl.  This regression was introduced\n    in 3.1.0 by the addition of the \"arena.<i>.purge\" mallctl.\n\n* 3.1.0 (October 16, 2012)\n\n  New features:\n  - Auto-detect whether running inside Valgrind, thus removing the need to\n    manually specify MALLOC_CONF=valgrind:true.\n  - Add the \"arenas.extend\" mallctl, which allows applications to create\n    manually managed arenas.\n  - Add the ALLOCM_ARENA() flag for {,r,d}allocm().\n  - Add the \"opt.dss\", \"arena.<i>.dss\", and \"stats.arenas.<i>.dss\" mallctls,\n    which provide control over dss/mmap precedence.\n  - Add the \"arena.<i>.purge\" mallctl, which obsoletes \"arenas.purge\".\n  - Define LG_QUANTUM for hppa.\n\n  Incompatible changes:\n  - Disable tcache by default if running inside Valgrind, in order to avoid\n    making unallocated objects appear reachable to Valgrind.\n  - Drop const from malloc_usable_size() argument on Linux.\n\n  Bug fixes:\n  - Fix heap profiling crash if sampled object is freed via realloc(p, 0).\n  - Remove const from __*_hook variable declarations, so that glibc can modify\n    them during process forking.\n  - Fix mlockall(2)/madvise(2) interaction.\n  - Fix fork(2)-related deadlocks.\n  - Fix error return value for \"thread.tcache.enabled\" mallctl.\n\n* 3.0.0 (May 11, 2012)\n\n  Although this version adds some major new features, the primary focus is on\n  internal code cleanup that facilitates maintainability and portability, most\n  of which is not reflected in the ChangeLog.  This is the first release to\n  incorporate substantial contributions from numerous other developers, and the\n  result is a more broadly useful allocator (see the git revision history for\n  contribution details).  Note that the license has been unified, thanks to\n  Facebook granting a license under the same terms as the other copyright\n  holders (see COPYING).\n\n  New features:\n  - Implement Valgrind support, redzones, and quarantine.\n  - Add support for additional platforms:\n    + FreeBSD\n    + Mac OS X Lion\n    + MinGW\n    + Windows (no support yet for replacing the system malloc)\n  - Add support for additional architectures:\n    + MIPS\n    + SH4\n    + Tilera\n  - Add support for cross compiling.\n  - Add nallocm(), which rounds a request size up to the nearest size class\n    without actually allocating.\n  - Implement aligned_alloc() (blame C11).\n  - Add the \"thread.tcache.enabled\" mallctl.\n  - Add the \"opt.prof_final\" mallctl.\n  - Update pprof (from gperftools 2.0).\n  - Add the --with-mangling option.\n  - Add the --disable-experimental option.\n  - Add the --disable-munmap option, and make it the default on Linux.\n  - Add the --enable-mremap option, which disables use of mremap(2) by default.\n\n  Incompatible changes:\n  - Enable stats by default.\n  - Enable fill by default.\n  - Disable lazy locking by default.\n  - Rename the \"tcache.flush\" mallctl to \"thread.tcache.flush\".\n  - Rename the \"arenas.pagesize\" mallctl to \"arenas.page\".\n  - Change the \"opt.lg_prof_sample\" default from 0 to 19 (1 B to 512 KiB).\n  - Change the \"opt.prof_accum\" default from true to false.\n\n  Removed features:\n  - Remove the swap feature, including the \"config.swap\", \"swap.avail\",\n    \"swap.prezeroed\", \"swap.nfds\", and \"swap.fds\" mallctls.\n  - Remove highruns statistics, including the\n    \"stats.arenas.<i>.bins.<j>.highruns\" and\n    \"stats.arenas.<i>.lruns.<j>.highruns\" mallctls.\n  - As part of small size class refactoring, remove the \"opt.lg_[qc]space_max\",\n    \"arenas.cacheline\", \"arenas.subpage\", \"arenas.[tqcs]space_{min,max}\", and\n    \"arenas.[tqcs]bins\" mallctls.\n  - Remove the \"arenas.chunksize\" mallctl.\n  - Remove the \"opt.lg_prof_tcmax\" option.\n  - Remove the \"opt.lg_prof_bt_max\" option.\n  - Remove the \"opt.lg_tcache_gc_sweep\" option.\n  - Remove the --disable-tiny option, including the \"config.tiny\" mallctl.\n  - Remove the --enable-dynamic-page-shift configure option.\n  - Remove the --enable-sysv configure option.\n\n  Bug fixes:\n  - Fix a statistics-related bug in the \"thread.arena\" mallctl that could cause\n    invalid statistics and crashes.\n  - Work around TLS deallocation via free() on Linux.  This bug could cause\n    write-after-free memory corruption.\n  - Fix a potential deadlock that could occur during interval- and\n    growth-triggered heap profile dumps.\n  - Fix large calloc() zeroing bugs due to dropping chunk map unzeroed flags.\n  - Fix chunk_alloc_dss() to stop claiming memory is zeroed.  This bug could\n    cause memory corruption and crashes with --enable-dss specified.\n  - Fix fork-related bugs that could cause deadlock in children between fork\n    and exec.\n  - Fix malloc_stats_print() to honor 'b' and 'l' in the opts parameter.\n  - Fix realloc(p, 0) to act like free(p).\n  - Do not enforce minimum alignment in memalign().\n  - Check for NULL pointer in malloc_usable_size().\n  - Fix an off-by-one heap profile statistics bug that could be observed in\n    interval- and growth-triggered heap profiles.\n  - Fix the \"epoch\" mallctl to update cached stats even if the passed in epoch\n    is 0.\n  - Fix bin->runcur management to fix a layout policy bug.  This bug did not\n    affect correctness.\n  - Fix a bug in choose_arena_hard() that potentially caused more arenas to be\n    initialized than necessary.\n  - Add missing \"opt.lg_tcache_max\" mallctl implementation.\n  - Use glibc allocator hooks to make mixed allocator usage less likely.\n  - Fix build issues for --disable-tcache.\n  - Don't mangle pthread_create() when --with-private-namespace is specified.\n\n* 2.2.5 (November 14, 2011)\n\n  Bug fixes:\n  - Fix huge_ralloc() race when using mremap(2).  This is a serious bug that\n    could cause memory corruption and/or crashes.\n  - Fix huge_ralloc() to maintain chunk statistics.\n  - Fix malloc_stats_print(..., \"a\") output.\n\n* 2.2.4 (November 5, 2011)\n\n  Bug fixes:\n  - Initialize arenas_tsd before using it.  This bug existed for 2.2.[0-3], as\n    well as for --disable-tls builds in earlier releases.\n  - Do not assume a 4 KiB page size in test/rallocm.c.\n\n* 2.2.3 (August 31, 2011)\n\n  This version fixes numerous bugs related to heap profiling.\n\n  Bug fixes:\n  - Fix a prof-related race condition.  This bug could cause memory corruption,\n    but only occurred in non-default configurations (prof_accum:false).\n  - Fix off-by-one backtracing issues (make sure that prof_alloc_prep() is\n    excluded from backtraces).\n  - Fix a prof-related bug in realloc() (only triggered by OOM errors).\n  - Fix prof-related bugs in allocm() and rallocm().\n  - Fix prof_tdata_cleanup() for --disable-tls builds.\n  - Fix a relative include path, to fix objdir builds.\n\n* 2.2.2 (July 30, 2011)\n\n  Bug fixes:\n  - Fix a build error for --disable-tcache.\n  - Fix assertions in arena_purge() (for real this time).\n  - Add the --with-private-namespace option.  This is a workaround for symbol\n    conflicts that can inadvertently arise when using static libraries.\n\n* 2.2.1 (March 30, 2011)\n\n  Bug fixes:\n  - Implement atomic operations for x86/x64.  This fixes compilation failures\n    for versions of gcc that are still in wide use.\n  - Fix an assertion in arena_purge().\n\n* 2.2.0 (March 22, 2011)\n\n  This version incorporates several improvements to algorithms and data\n  structures that tend to reduce fragmentation and increase speed.\n\n  New features:\n  - Add the \"stats.cactive\" mallctl.\n  - Update pprof (from google-perftools 1.7).\n  - Improve backtracing-related configuration logic, and add the\n    --disable-prof-libgcc option.\n\n  Bug fixes:\n  - Change default symbol visibility from \"internal\", to \"hidden\", which\n    decreases the overhead of library-internal function calls.\n  - Fix symbol visibility so that it is also set on OS X.\n  - Fix a build dependency regression caused by the introduction of the .pic.o\n    suffix for PIC object files.\n  - Add missing checks for mutex initialization failures.\n  - Don't use libgcc-based backtracing except on x64, where it is known to work.\n  - Fix deadlocks on OS X that were due to memory allocation in\n    pthread_mutex_lock().\n  - Heap profiling-specific fixes:\n    + Fix memory corruption due to integer overflow in small region index\n      computation, when using a small enough sample interval that profiling\n      context pointers are stored in small run headers.\n    + Fix a bootstrap ordering bug that only occurred with TLS disabled.\n    + Fix a rallocm() rsize bug.\n    + Fix error detection bugs for aligned memory allocation.\n\n* 2.1.3 (March 14, 2011)\n\n  Bug fixes:\n  - Fix a cpp logic regression (due to the \"thread.{de,}allocatedp\" mallctl fix\n    for OS X in 2.1.2).\n  - Fix a \"thread.arena\" mallctl bug.\n  - Fix a thread cache stats merging bug.\n\n* 2.1.2 (March 2, 2011)\n\n  Bug fixes:\n  - Fix \"thread.{de,}allocatedp\" mallctl for OS X.\n  - Add missing jemalloc.a to build system.\n\n* 2.1.1 (January 31, 2011)\n\n  Bug fixes:\n  - Fix aligned huge reallocation (affected allocm()).\n  - Fix the ALLOCM_LG_ALIGN macro definition.\n  - Fix a heap dumping deadlock.\n  - Fix a \"thread.arena\" mallctl bug.\n\n* 2.1.0 (December 3, 2010)\n\n  This version incorporates some optimizations that can't quite be considered\n  bug fixes.\n\n  New features:\n  - Use Linux's mremap(2) for huge object reallocation when possible.\n  - Avoid locking in mallctl*() when possible.\n  - Add the \"thread.[de]allocatedp\" mallctl's.\n  - Convert the manual page source from roff to DocBook, and generate both roff\n    and HTML manuals.\n\n  Bug fixes:\n  - Fix a crash due to incorrect bootstrap ordering.  This only impacted\n    --enable-debug --enable-dss configurations.\n  - Fix a minor statistics bug for mallctl(\"swap.avail\", ...).\n\n* 2.0.1 (October 29, 2010)\n\n  Bug fixes:\n  - Fix a race condition in heap profiling that could cause undefined behavior\n    if \"opt.prof_accum\" were disabled.\n  - Add missing mutex unlocks for some OOM error paths in the heap profiling\n    code.\n  - Fix a compilation error for non-C99 builds.\n\n* 2.0.0 (October 24, 2010)\n\n  This version focuses on the experimental *allocm() API, and on improved\n  run-time configuration/introspection.  Nonetheless, numerous performance\n  improvements are also included.\n\n  New features:\n  - Implement the experimental {,r,s,d}allocm() API, which provides a superset\n    of the functionality available via malloc(), calloc(), posix_memalign(),\n    realloc(), malloc_usable_size(), and free().  These functions can be used to\n    allocate/reallocate aligned zeroed memory, ask for optional extra memory\n    during reallocation, prevent object movement during reallocation, etc.\n  - Replace JEMALLOC_OPTIONS/JEMALLOC_PROF_PREFIX with MALLOC_CONF, which is\n    more human-readable, and more flexible.  For example:\n      JEMALLOC_OPTIONS=AJP\n    is now:\n      MALLOC_CONF=abort:true,fill:true,stats_print:true\n  - Port to Apple OS X.  Sponsored by Mozilla.\n  - Make it possible for the application to control thread-->arena mappings via\n    the \"thread.arena\" mallctl.\n  - Add compile-time support for all TLS-related functionality via pthreads TSD.\n    This is mainly of interest for OS X, which does not support TLS, but has a\n    TSD implementation with similar performance.\n  - Override memalign() and valloc() if they are provided by the system.\n  - Add the \"arenas.purge\" mallctl, which can be used to synchronously purge all\n    dirty unused pages.\n  - Make cumulative heap profiling data optional, so that it is possible to\n    limit the amount of memory consumed by heap profiling data structures.\n  - Add per thread allocation counters that can be accessed via the\n    \"thread.allocated\" and \"thread.deallocated\" mallctls.\n\n  Incompatible changes:\n  - Remove JEMALLOC_OPTIONS and malloc_options (see MALLOC_CONF above).\n  - Increase default backtrace depth from 4 to 128 for heap profiling.\n  - Disable interval-based profile dumps by default.\n\n  Bug fixes:\n  - Remove bad assertions in fork handler functions.  These assertions could\n    cause aborts for some combinations of configure settings.\n  - Fix strerror_r() usage to deal with non-standard semantics in GNU libc.\n  - Fix leak context reporting.  This bug tended to cause the number of contexts\n    to be underreported (though the reported number of objects and bytes were\n    correct).\n  - Fix a realloc() bug for large in-place growing reallocation.  This bug could\n    cause memory corruption, but it was hard to trigger.\n  - Fix an allocation bug for small allocations that could be triggered if\n    multiple threads raced to create a new run of backing pages.\n  - Enhance the heap profiler to trigger samples based on usable size, rather\n    than request size.\n  - Fix a heap profiling bug due to sometimes losing track of requested object\n    size for sampled objects.\n\n* 1.0.3 (August 12, 2010)\n\n  Bug fixes:\n  - Fix the libunwind-based implementation of stack backtracing (used for heap\n    profiling).  This bug could cause zero-length backtraces to be reported.\n  - Add a missing mutex unlock in library initialization code.  If multiple\n    threads raced to initialize malloc, some of them could end up permanently\n    blocked.\n\n* 1.0.2 (May 11, 2010)\n\n  Bug fixes:\n  - Fix junk filling of large objects, which could cause memory corruption.\n  - Add MAP_NORESERVE support for chunk mapping, because otherwise virtual\n    memory limits could cause swap file configuration to fail.  Contributed by\n    Jordan DeLong.\n\n* 1.0.1 (April 14, 2010)\n\n  Bug fixes:\n  - Fix compilation when --enable-fill is specified.\n  - Fix threads-related profiling bugs that affected accuracy and caused memory\n    to be leaked during thread exit.\n  - Fix dirty page purging race conditions that could cause crashes.\n  - Fix crash in tcache flushing code during thread destruction.\n\n* 1.0.0 (April 11, 2010)\n\n  This release focuses on speed and run-time introspection.  Numerous\n  algorithmic improvements make this release substantially faster than its\n  predecessors.\n\n  New features:\n  - Implement autoconf-based configuration system.\n  - Add mallctl*(), for the purposes of introspection and run-time\n    configuration.\n  - Make it possible for the application to manually flush a thread's cache, via\n    the \"tcache.flush\" mallctl.\n  - Base maximum dirty page count on proportion of active memory.\n  - Compute various additional run-time statistics, including per size class\n    statistics for large objects.\n  - Expose malloc_stats_print(), which can be called repeatedly by the\n    application.\n  - Simplify the malloc_message() signature to only take one string argument,\n    and incorporate an opaque data pointer argument for use by the application\n    in combination with malloc_stats_print().\n  - Add support for allocation backed by one or more swap files, and allow the\n    application to disable over-commit if swap files are in use.\n  - Implement allocation profiling and leak checking.\n\n  Removed features:\n  - Remove the dynamic arena rebalancing code, since thread-specific caching\n    reduces its utility.\n\n  Bug fixes:\n  - Modify chunk allocation to work when address space layout randomization\n    (ASLR) is in use.\n  - Fix thread cleanup bugs related to TLS destruction.\n  - Handle 0-size allocation requests in posix_memalign().\n  - Fix a chunk leak.  The leaked chunks were never touched, so this impacted\n    virtual memory usage, but not physical memory usage.\n\n* linux_2008082[78]a (August 27/28, 2008)\n\n  These snapshot releases are the simple result of incorporating Linux-specific\n  support into the FreeBSD malloc sources.\n\n--------------------------------------------------------------------------------\nvim:filetype=text:textwidth=80\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 18.5048828125,
          "content": "Building and installing a packaged release of jemalloc can be as simple as\ntyping the following while in the root directory of the source tree:\n\n    ./configure\n    make\n    make install\n\nIf building from unpackaged developer sources, the simplest command sequence\nthat might work is:\n\n    ./autogen.sh\n    make\n    make install\n\nYou can uninstall the installed build artifacts like this:\n\n    make uninstall\n\nNotes:\n - \"autoconf\" needs to be installed\n - Documentation is built by the default target only when xsltproc is\navailable.  Build will warn but not stop if the dependency is missing.\n\n\n## Advanced configuration\n\nThe 'configure' script supports numerous options that allow control of which\nfunctionality is enabled, where jemalloc is installed, etc.  Optionally, pass\nany of the following arguments (not a definitive list) to 'configure':\n\n* `--help`\n\n    Print a definitive list of options.\n\n* `--prefix=<install-root-dir>`\n\n    Set the base directory in which to install.  For example:\n\n        ./configure --prefix=/usr/local\n\n    will cause files to be installed into /usr/local/include, /usr/local/lib,\n    and /usr/local/man.\n\n* `--with-version=(<major>.<minor>.<bugfix>-<nrev>-g<gid>|VERSION)`\n\n    The VERSION file is mandatory for successful configuration, and the\n    following steps are taken to assure its presence:\n    1) If --with-version=<major>.<minor>.<bugfix>-<nrev>-g<gid> is specified,\n       generate VERSION using the specified value.\n    2) If --with-version is not specified in either form and the source\n       directory is inside a git repository, try to generate VERSION via 'git\n       describe' invocations that pattern-match release tags.\n    3) If VERSION is missing, generate it with a bogus version:\n       0.0.0-0-g0000000000000000000000000000000000000000\n\n    Note that --with-version=VERSION bypasses (1) and (2), which simplifies\n    VERSION configuration when embedding a jemalloc release into another\n    project's git repository.\n\n* `--with-rpath=<colon-separated-rpath>`\n\n    Embed one or more library paths, so that libjemalloc can find the libraries\n    it is linked to.  This works only on ELF-based systems.\n\n* `--with-mangling=<map>`\n\n    Mangle public symbols specified in <map> which is a comma-separated list of\n    name:mangled pairs.\n\n    For example, to use ld's --wrap option as an alternative method for\n    overriding libc's malloc implementation, specify something like:\n\n      --with-mangling=malloc:__wrap_malloc,free:__wrap_free[...]\n\n    Note that mangling happens prior to application of the prefix specified by\n    --with-jemalloc-prefix, and mangled symbols are then ignored when applying\n    the prefix.\n\n* `--with-jemalloc-prefix=<prefix>`\n\n    Prefix all public APIs with <prefix>.  For example, if <prefix> is\n    \"prefix_\", API changes like the following occur:\n\n      malloc()         --> prefix_malloc()\n      malloc_conf      --> prefix_malloc_conf\n      /etc/malloc.conf --> /etc/prefix_malloc.conf\n      MALLOC_CONF      --> PREFIX_MALLOC_CONF\n\n    This makes it possible to use jemalloc at the same time as the system\n    allocator, or even to use multiple copies of jemalloc simultaneously.\n\n    By default, the prefix is \"\", except on OS X, where it is \"je_\".  On OS X,\n    jemalloc overlays the default malloc zone, but makes no attempt to actually\n    replace the \"malloc\", \"calloc\", etc. symbols.\n\n* `--without-export`\n\n    Don't export public APIs.  This can be useful when building jemalloc as a\n    static library, or to avoid exporting public APIs when using the zone\n    allocator on OSX.\n\n* `--with-private-namespace=<prefix>`\n\n    Prefix all library-private APIs with <prefix>je_.  For shared libraries,\n    symbol visibility mechanisms prevent these symbols from being exported, but\n    for static libraries, naming collisions are a real possibility.  By\n    default, <prefix> is empty, which results in a symbol prefix of je_ .\n\n* `--with-install-suffix=<suffix>`\n\n    Append <suffix> to the base name of all installed files, such that multiple\n    versions of jemalloc can coexist in the same installation directory.  For\n    example, libjemalloc.so.0 becomes libjemalloc<suffix>.so.0.\n\n* `--with-malloc-conf=<malloc_conf>`\n\n    Embed `<malloc_conf>` as a run-time options string that is processed prior to\n    the malloc_conf global variable, the /etc/malloc.conf symlink, and the\n    MALLOC_CONF environment variable.  For example, to change the default decay\n    time to 30 seconds:\n\n      --with-malloc-conf=decay_ms:30000\n\n* `--enable-debug`\n\n    Enable assertions and validation code.  This incurs a substantial\n    performance hit, but is very useful during application development.\n\n* `--disable-stats`\n\n    Disable statistics gathering functionality.  See the \"opt.stats_print\"\n    option documentation for usage details.\n\n* `--enable-prof`\n\n    Enable heap profiling and leak detection functionality.  See the \"opt.prof\"\n    option documentation for usage details.  When enabled, there are several\n    approaches to backtracing, and the configure script chooses the first one\n    in the following list that appears to function correctly:\n\n    + libunwind      (requires --enable-prof-libunwind)\n    + frame pointer  (requires --enable-prof-frameptr)\n    + libgcc         (unless --disable-prof-libgcc)\n    + gcc intrinsics (unless --disable-prof-gcc)\n\n* `--enable-prof-libunwind`\n\n    Use the libunwind library (http://www.nongnu.org/libunwind/) for stack\n    backtracing.\n\n* `--enable-prof-frameptr`\n\n    Use the optimized frame pointer unwinder for stack backtracing. Safe\n    to use in mixed code (with and without frame pointers) - but requires\n    frame pointers to produce meaningful stacks. Linux only.\n\n* `--disable-prof-libgcc`\n\n    Disable the use of libgcc's backtracing functionality.\n\n* `--disable-prof-gcc`\n\n    Disable the use of gcc intrinsics for backtracing.\n\n* `--with-static-libunwind=<libunwind.a>`\n\n    Statically link against the specified libunwind.a rather than dynamically\n    linking with -lunwind.\n\n* `--disable-fill`\n\n    Disable support for junk/zero filling of memory.  See the \"opt.junk\" and\n    \"opt.zero\" option documentation for usage details.\n\n* `--disable-zone-allocator`\n\n    Disable zone allocator for Darwin.  This means jemalloc won't be hooked as\n    the default allocator on OSX/iOS.\n\n* `--enable-utrace`\n\n    Enable utrace(2)-based allocation tracing.  This feature is not broadly\n    portable (FreeBSD has it, but Linux and OS X do not).\n\n* `--enable-xmalloc`\n\n    Enable support for optional immediate termination due to out-of-memory\n    errors, as is commonly implemented by \"xmalloc\" wrapper function for malloc.\n    See the \"opt.xmalloc\" option documentation for usage details.\n\n* `--enable-lazy-lock`\n\n    Enable code that wraps pthread_create() to detect when an application\n    switches from single-threaded to multi-threaded mode, so that it can avoid\n    mutex locking/unlocking operations while in single-threaded mode.  In\n    practice, this feature usually has little impact on performance unless\n    thread-specific caching is disabled.\n\n* `--disable-cache-oblivious`\n\n    Disable cache-oblivious large allocation alignment by default, for large\n    allocation requests with no alignment constraints.  If this feature is\n    disabled, all large allocations are page-aligned as an implementation\n    artifact, which can severely harm CPU cache utilization.  However, the\n    cache-oblivious layout comes at the cost of one extra page per large\n    allocation, which in the most extreme case increases physical memory usage\n    for the 16 KiB size class to 20 KiB.\n\n* `--disable-syscall`\n\n    Disable use of syscall(2) rather than {open,read,write,close}(2).  This is\n    intended as a workaround for systems that place security limitations on\n    syscall(2).\n\n* `--disable-cxx`\n\n    Disable C++ integration.  This will cause new and delete operator\n    implementations to be omitted.\n\n* `--with-xslroot=<path>`\n\n    Specify where to find DocBook XSL stylesheets when building the\n    documentation.\n\n* `--with-lg-page=<lg-page>`\n\n    Specify the base 2 log of the allocator page size, which must in turn be at\n    least as large as the system page size.  By default the configure script\n    determines the host's page size and sets the allocator page size equal to\n    the system page size, so this option need not be specified unless the\n    system page size may change between configuration and execution, e.g. when\n    cross compiling.\n\n* `--with-lg-hugepage=<lg-hugepage>`\n\n    Specify the base 2 log of the system huge page size.  This option is useful\n    when cross compiling, or when overriding the default for systems that do\n    not explicitly support huge pages.\n\n* `--with-lg-quantum=<lg-quantum>`\n\n    Specify the base 2 log of the minimum allocation alignment.  jemalloc needs\n    to know the minimum alignment that meets the following C standard\n    requirement (quoted from the April 12, 2011 draft of the C11 standard):\n\n    >  The pointer returned if the allocation succeeds is suitably aligned so\n      that it may be assigned to a pointer to any type of object with a\n      fundamental alignment requirement and then used to access such an object\n      or an array of such objects in the space allocated [...]\n\n    This setting is architecture-specific, and although jemalloc includes known\n    safe values for the most commonly used modern architectures, there is a\n    wrinkle related to GNU libc (glibc) that may impact your choice of\n    <lg-quantum>.  On most modern architectures, this mandates 16-byte\n    alignment (<lg-quantum>=4), but the glibc developers chose not to meet this\n    requirement for performance reasons.  An old discussion can be found at\n    <https://sourceware.org/bugzilla/show_bug.cgi?id=206> .  Unlike glibc,\n    jemalloc does follow the C standard by default (caveat: jemalloc\n    technically cheats for size classes smaller than the quantum), but the fact\n    that Linux systems already work around this allocator noncompliance means\n    that it is generally safe in practice to let jemalloc's minimum alignment\n    follow glibc's lead.  If you specify `--with-lg-quantum=3` during\n    configuration, jemalloc will provide additional size classes that are not\n    16-byte-aligned (24, 40, and 56).\n\n* `--with-lg-vaddr=<lg-vaddr>`\n\n    Specify the number of significant virtual address bits.  By default, the\n    configure script attempts to detect virtual address size on those platforms\n    where it knows how, and picks a default otherwise.  This option may be\n    useful when cross-compiling.\n\n* `--disable-initial-exec-tls`\n\n    Disable the initial-exec TLS model for jemalloc's internal thread-local\n    storage (on those platforms that support explicit settings).  This can allow\n    jemalloc to be dynamically loaded after program startup (e.g. using dlopen).\n    Note that in this case, there will be two malloc implementations operating\n    in the same process, which will almost certainly result in confusing runtime\n    crashes if pointers leak from one implementation to the other.\n\n* `--disable-libdl`\n\n    Disable the usage of libdl, namely dlsym(3) which is required by the lazy\n    lock option.  This can allow building static binaries.\n\nThe following environment variables (not a definitive list) impact configure's\nbehavior:\n\n* `CFLAGS=\"?\"`\n* `CXXFLAGS=\"?\"`\n\n    Pass these flags to the C/C++ compiler.  Any flags set by the configure\n    script are prepended, which means explicitly set flags generally take\n    precedence.  Take care when specifying flags such as -Werror, because\n    configure tests may be affected in undesirable ways.\n\n* `EXTRA_CFLAGS=\"?\"`\n* `EXTRA_CXXFLAGS=\"?\"`\n\n    Append these flags to CFLAGS/CXXFLAGS, without passing them to the\n    compiler(s) during configuration.  This makes it possible to add flags such\n    as -Werror, while allowing the configure script to determine what other\n    flags are appropriate for the specified configuration.\n\n* `CPPFLAGS=\"?\"`\n\n    Pass these flags to the C preprocessor.  Note that CFLAGS is not passed to\n    'cpp' when 'configure' is looking for include files, so you must use\n    CPPFLAGS instead if you need to help 'configure' find header files.\n\n* `LD_LIBRARY_PATH=\"?\"`\n\n    'ld' uses this colon-separated list to find libraries.\n\n* `LDFLAGS=\"?\"`\n\n    Pass these flags when linking.\n\n* `PATH=\"?\"`\n\n    'configure' uses this to find programs.\n\nIn some cases it may be necessary to work around configuration results that do\nnot match reality.  For example, Linux 3.4 added support for the MADV_DONTDUMP\nflag to madvise(2), which can cause problems if building on a host with\nMADV_DONTDUMP support and deploying to a target without.  To work around this,\nuse a cache file to override the relevant configuration variable defined in\nconfigure.ac, e.g.:\n\n    echo \"je_cv_madv_dontdump=no\" > config.cache && ./configure -C\n\n\n## Advanced compilation\n\nTo build only parts of jemalloc, use the following targets:\n\n    build_lib_shared\n    build_lib_static\n    build_lib\n    build_doc_html\n    build_doc_man\n    build_doc\n\nTo install only parts of jemalloc, use the following targets:\n\n    install_bin\n    install_include\n    install_lib_shared\n    install_lib_static\n    install_lib_pc\n    install_lib\n    install_doc_html\n    install_doc_man\n    install_doc\n\nTo clean up build results to varying degrees, use the following make targets:\n\n    clean\n    distclean\n    relclean\n\n\n## Advanced installation\n\nOptionally, define make variables when invoking make, including (not\nexclusively):\n\n* `INCLUDEDIR=\"?\"`\n\n    Use this as the installation prefix for header files.\n\n* `LIBDIR=\"?\"`\n\n    Use this as the installation prefix for libraries.\n\n* `MANDIR=\"?\"`\n\n    Use this as the installation prefix for man pages.\n\n* `DESTDIR=\"?\"`\n\n    Prepend DESTDIR to INCLUDEDIR, LIBDIR, DATADIR, and MANDIR.  This is useful\n    when installing to a different path than was specified via --prefix.\n\n* `CC=\"?\"`\n\n    Use this to invoke the C compiler.\n\n* `CFLAGS=\"?\"`\n\n    Pass these flags to the compiler.\n\n* `CPPFLAGS=\"?\"`\n\n    Pass these flags to the C preprocessor.\n\n* `LDFLAGS=\"?\"`\n\n    Pass these flags when linking.\n\n* `PATH=\"?\"`\n\n    Use this to search for programs used during configuration and building.\n\n## Building for Windows\n\nThere are at least two ways to build jemalloc's libraries for Windows. They\ndiffer in their ease of use and flexibility.\n\n### With MSVC solutions\nThis is the easy, but less flexible approach. It doesn't let you specify\narguments to the `configure` script.\n  \n1. Install Cygwin with at least the following packages:\n   * autoconf\n   * autogen\n   * gawk\n   * grep\n   * sed\n\n2. Install Visual Studio 2015 or 2017 with Visual C++\n\n3. Add Cygwin\\bin to the PATH environment variable\n\n4. Open \"x64 Native Tools Command Prompt for VS 2017\"\n   (note: x86/x64 doesn't matter at this point)\n\n5. Generate header files:\n   sh -c \"CC=cl ./autogen.sh\"\n\n6. Now the project can be opened and built in Visual Studio:\n   msvc\\jemalloc_vc2017.sln\n\n### With MSYS\nThis is a more involved approach that offers the same configuration flexibility\nas Linux builds. We use it for our CI workflow to test different jemalloc\nconfigurations on Windows.\n\n1. Install the prerequisites\n    1. MSYS2\n    2. Chocolatey\n    3. Visual Studio if you want to compile with MSVC compiler\n\n2. Run your bash emulation. It could be MSYS2 or Git Bash (this manual was\n   tested on both)\n3. Manually and selectively follow\n   [before_install.sh](https://github.com/jemalloc/jemalloc/blob/dev/scripts/windows/before_install.sh)\n   script.\n    1. Skip the `TRAVIS_OS_NAME` check, `rm -rf C:/tools/msys64` and `choco\n       uninstall/upgrade` part.\n    2.  If using `msys2` shell, add path to `RefreshEnv.cmd` to `PATH`:\n        `PATH=\"$PATH:/c/ProgramData/chocolatey/bin\"`\n    3. Assign `msys_shell_cmd`, `msys2`, `mingw32` and `mingw64` as in the\n       script.\n    4. Pick `CROSS_COMPILE_32BIT` , `CC` and `USE_MSVC` values depending on\n       your needs. For instance, if you'd like to build for x86_64 Windows\n       with `gcc`, then `CROSS_COMPILE_32BIT=\"no\"`, `CC=\"gcc\"` and\n       `USE_MSVC=\"\"`. If you'd like to build for x86 Windows with `cl.exe`,\n       then `CROSS_COMPILE_32BIT=\"yes\"`, `CC=\"cl.exe\"`, `USE_MSVC=\"x86\"`.\n       For x86_64 builds with `cl.exe`, assign `USE_MSVC=\"amd64\"` and\n       `CROSS_COMPILE_32BIT=\"no\"`.\n    5. Replace the path to `vcvarsall.bat` with the path on your system. For\n       instance, on my Windows PC with Visual Studio 17, the path is\n       `C:\\Program Files (x86)\\Microsoft Visual\n       Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsall.bat`.\n    6. Execute the rest of the script. It will install the required\n       dependencies and assign the variable `build_env`, which is a function\n       that executes following commands with the correct environment\n       variables set.\n4. Use `$build_env <command>` as you would in a Linux shell:\n     1. `$build_env autoconf`\n     2. `$build_env ./configure CC=\"<desired compiler>\" <configuration flags>`\n     3. `$build_env mingw32-make`\n\nIf you're having any issues with the above, ensure the following:\n\n5. When you run `cmd //C RefreshEnv.cmd`, you get an output line starting with\n   `Refreshing` . If it errors saying `RefreshEnv.cmd` is not found, then you\n   need to add it to your `PATH` as described above in item 3.2\n\n6. When you run `cmd //C $vcvarsall`, it prints a bunch of environment\n   variables. Otherwise, check the path to the `vcvarsall.bat` in `$vcvarsall`\n   script and fix it.\n\n### Building from vcpkg\n\nThe jemalloc port in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. The url of vcpkg is: https://github.com/Microsoft/vcpkg\n. You can download and install jemalloc using the vcpkg dependency manager:\n\n```shell\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh  # ./bootstrap-vcpkg.bat for Windows\n./vcpkg integrate install\n./vcpkg install jemalloc\n```\n\nIf the version is out of date, please [create an issue or pull\nrequest](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Development\n\nIf you intend to make non-trivial changes to jemalloc, use the 'autogen.sh'\nscript rather than 'configure'.  This re-generates 'configure', enables\nconfiguration dependency rules, and enables re-generation of automatically\ngenerated source files.\n\nThe build system supports using an object directory separate from the source\ntree.  For example, you can create an 'obj' directory, and from within that\ndirectory, issue configuration and build commands:\n\n    autoconf\n    mkdir obj\n    cd obj\n    ../configure --enable-autogen\n    make\n\n\n## Documentation\n\nThe manual page is generated in both html and roff formats.  Any web browser\ncan be used to view the html manual.  The roff manual page can be formatted\nprior to installation via the following command:\n\n    nroff -man -t doc/jemalloc.3\n"
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 27.8818359375,
          "content": "# Clear out all vpaths, then set just one (default vpath) for the main build\n# directory.\nvpath\nvpath % .\n\n# Clear the default suffixes, so that built-in rules are not used.\n.SUFFIXES :\n\nSHELL := /bin/sh\n\nCC := @CC@\nCXX := @CXX@\n\n# Configuration parameters.\nDESTDIR =\nBINDIR := $(DESTDIR)@BINDIR@\nINCLUDEDIR := $(DESTDIR)@INCLUDEDIR@\nLIBDIR := $(DESTDIR)@LIBDIR@\nDATADIR := $(DESTDIR)@DATADIR@\nMANDIR := $(DESTDIR)@MANDIR@\nsrcroot := @srcroot@\nobjroot := @objroot@\nabs_srcroot := @abs_srcroot@\nabs_objroot := @abs_objroot@\n\n# Build parameters.\nCPPFLAGS := @CPPFLAGS@ -I$(objroot)include -I$(srcroot)include\nCONFIGURE_CFLAGS := @CONFIGURE_CFLAGS@\nSPECIFIED_CFLAGS := @SPECIFIED_CFLAGS@\nEXTRA_CFLAGS := @EXTRA_CFLAGS@\nCFLAGS := $(strip $(CONFIGURE_CFLAGS) $(SPECIFIED_CFLAGS) $(EXTRA_CFLAGS))\nCONFIGURE_CXXFLAGS := @CONFIGURE_CXXFLAGS@\nSPECIFIED_CXXFLAGS := @SPECIFIED_CXXFLAGS@\nEXTRA_CXXFLAGS := @EXTRA_CXXFLAGS@\nCXXFLAGS := $(strip $(CONFIGURE_CXXFLAGS) $(SPECIFIED_CXXFLAGS) $(EXTRA_CXXFLAGS))\nLDFLAGS := @LDFLAGS@\nEXTRA_LDFLAGS := @EXTRA_LDFLAGS@\nLIBS := @LIBS@\nRPATH_EXTRA := @RPATH_EXTRA@\nSO := @so@\nIMPORTLIB := @importlib@\nO := @o@\nA := @a@\nEXE := @exe@\nLIBPREFIX := @libprefix@\nREV := @rev@\ninstall_suffix := @install_suffix@\nABI := @abi@\nXSLTPROC := @XSLTPROC@\nXSLROOT := @XSLROOT@\nAUTOCONF := @AUTOCONF@\n_RPATH = @RPATH@\nRPATH = $(if $(1),$(call _RPATH,$(1)))\ncfghdrs_in := $(addprefix $(srcroot),@cfghdrs_in@)\ncfghdrs_out := @cfghdrs_out@\ncfgoutputs_in := $(addprefix $(srcroot),@cfgoutputs_in@)\ncfgoutputs_out := @cfgoutputs_out@\nenable_autogen := @enable_autogen@\nenable_doc := @enable_doc@\nenable_shared := @enable_shared@\nenable_static := @enable_static@\nenable_prof := @enable_prof@\nenable_zone_allocator := @enable_zone_allocator@\nenable_experimental_smallocx := @enable_experimental_smallocx@\nMALLOC_CONF := @JEMALLOC_CPREFIX@MALLOC_CONF\nlink_whole_archive := @link_whole_archive@\nDSO_LDFLAGS = @DSO_LDFLAGS@\nSOREV = @SOREV@\nPIC_CFLAGS = @PIC_CFLAGS@\nCTARGET = @CTARGET@\nLDTARGET = @LDTARGET@\nTEST_LD_MODE = @TEST_LD_MODE@\nMKLIB = @MKLIB@\nAR = @AR@\nARFLAGS = @ARFLAGS@\nDUMP_SYMS = @DUMP_SYMS@\nAWK := @AWK@\nCC_MM = @CC_MM@\nLM := @LM@\nINSTALL = @INSTALL@\n\nifeq (macho, $(ABI))\nTEST_LIBRARY_PATH := DYLD_FALLBACK_LIBRARY_PATH=\"$(objroot)lib\"\nelse\nifeq (pecoff, $(ABI))\nTEST_LIBRARY_PATH := PATH=\"$(PATH):$(objroot)lib\"\nelse\nTEST_LIBRARY_PATH :=\nendif\nendif\n\nLIBJEMALLOC := $(LIBPREFIX)jemalloc$(install_suffix)\n\n# Lists of files.\nBINS := $(objroot)bin/jemalloc-config $(objroot)bin/jemalloc.sh $(objroot)bin/jeprof\nC_HDRS := $(objroot)include/jemalloc/jemalloc$(install_suffix).h\nC_SRCS := $(srcroot)src/jemalloc.c \\\n\t$(srcroot)src/arena.c \\\n\t$(srcroot)src/background_thread.c \\\n\t$(srcroot)src/base.c \\\n\t$(srcroot)src/batcher.c \\\n\t$(srcroot)src/bin.c \\\n\t$(srcroot)src/bin_info.c \\\n\t$(srcroot)src/bitmap.c \\\n\t$(srcroot)src/buf_writer.c \\\n\t$(srcroot)src/cache_bin.c \\\n\t$(srcroot)src/ckh.c \\\n\t$(srcroot)src/counter.c \\\n\t$(srcroot)src/ctl.c \\\n\t$(srcroot)src/decay.c \\\n\t$(srcroot)src/div.c \\\n\t$(srcroot)src/ecache.c \\\n\t$(srcroot)src/edata.c \\\n\t$(srcroot)src/edata_cache.c \\\n\t$(srcroot)src/ehooks.c \\\n\t$(srcroot)src/emap.c \\\n\t$(srcroot)src/eset.c \\\n\t$(srcroot)src/exp_grow.c \\\n\t$(srcroot)src/extent.c \\\n\t$(srcroot)src/extent_dss.c \\\n\t$(srcroot)src/extent_mmap.c \\\n\t$(srcroot)src/fxp.c \\\n\t$(srcroot)src/san.c \\\n\t$(srcroot)src/san_bump.c \\\n\t$(srcroot)src/hook.c \\\n\t$(srcroot)src/hpa.c \\\n\t$(srcroot)src/hpa_hooks.c \\\n\t$(srcroot)src/hpdata.c \\\n\t$(srcroot)src/inspect.c \\\n\t$(srcroot)src/large.c \\\n\t$(srcroot)src/log.c \\\n\t$(srcroot)src/malloc_io.c \\\n\t$(srcroot)src/mutex.c \\\n\t$(srcroot)src/nstime.c \\\n\t$(srcroot)src/pa.c \\\n\t$(srcroot)src/pa_extra.c \\\n\t$(srcroot)src/pai.c \\\n\t$(srcroot)src/pac.c \\\n\t$(srcroot)src/pages.c \\\n\t$(srcroot)src/peak_event.c \\\n\t$(srcroot)src/prof.c \\\n\t$(srcroot)src/prof_data.c \\\n\t$(srcroot)src/prof_log.c \\\n\t$(srcroot)src/prof_recent.c \\\n\t$(srcroot)src/prof_stack_range.c \\\n\t$(srcroot)src/prof_stats.c \\\n\t$(srcroot)src/prof_sys.c \\\n\t$(srcroot)src/psset.c \\\n\t$(srcroot)src/rtree.c \\\n\t$(srcroot)src/safety_check.c \\\n\t$(srcroot)src/sc.c \\\n\t$(srcroot)src/sec.c \\\n\t$(srcroot)src/stats.c \\\n\t$(srcroot)src/sz.c \\\n\t$(srcroot)src/tcache.c \\\n\t$(srcroot)src/test_hooks.c \\\n\t$(srcroot)src/thread_event.c \\\n\t$(srcroot)src/ticker.c \\\n\t$(srcroot)src/tsd.c \\\n\t$(srcroot)src/util.c \\\n\t$(srcroot)src/witness.c\nifeq ($(enable_zone_allocator), 1)\nC_SRCS += $(srcroot)src/zone.c\nendif\nifeq ($(IMPORTLIB),$(SO))\nSTATIC_LIBS := $(objroot)lib/$(LIBJEMALLOC).$(A)\nendif\nifdef PIC_CFLAGS\nSTATIC_LIBS += $(objroot)lib/$(LIBJEMALLOC)_pic.$(A)\nelse\nSTATIC_LIBS += $(objroot)lib/$(LIBJEMALLOC)_s.$(A)\nendif\nDSOS := $(objroot)lib/$(LIBJEMALLOC).$(SOREV)\nifneq ($(SOREV),$(SO))\nDSOS += $(objroot)lib/$(LIBJEMALLOC).$(SO)\nendif\nifeq (1, $(link_whole_archive))\nLJEMALLOC := -Wl,--whole-archive -L$(objroot)lib -l$(LIBJEMALLOC) -Wl,--no-whole-archive\nelse\nLJEMALLOC := $(objroot)lib/$(LIBJEMALLOC).$(IMPORTLIB)\nendif\nPC := $(objroot)jemalloc.pc\nDOCS_XML := $(objroot)doc/jemalloc$(install_suffix).xml\nDOCS_HTML := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.html)\nDOCS_MAN3 := $(DOCS_XML:$(objroot)%.xml=$(objroot)%.3)\nDOCS := $(DOCS_HTML) $(DOCS_MAN3)\nC_TESTLIB_SRCS := $(srcroot)test/src/btalloc.c $(srcroot)test/src/btalloc_0.c \\\n\t$(srcroot)test/src/btalloc_1.c $(srcroot)test/src/math.c \\\n\t$(srcroot)test/src/mtx.c $(srcroot)test/src/sleep.c \\\n\t$(srcroot)test/src/SFMT.c $(srcroot)test/src/test.c \\\n\t$(srcroot)test/src/thd.c $(srcroot)test/src/timer.c\nifeq (1, $(link_whole_archive))\nC_UTIL_INTEGRATION_SRCS :=\nC_UTIL_CPP_SRCS :=\nelse\nC_UTIL_INTEGRATION_SRCS := $(srcroot)src/nstime.c $(srcroot)src/malloc_io.c \\\n\t$(srcroot)src/ticker.c\nC_UTIL_CPP_SRCS := $(srcroot)src/nstime.c $(srcroot)src/malloc_io.c\nendif\nTESTS_UNIT := \\\n\t$(srcroot)test/unit/a0.c \\\n\t$(srcroot)test/unit/arena_decay.c \\\n\t$(srcroot)test/unit/arena_reset.c \\\n\t$(srcroot)test/unit/atomic.c \\\n\t$(srcroot)test/unit/background_thread.c \\\n\t$(srcroot)test/unit/background_thread_enable.c \\\n\t$(srcroot)test/unit/base.c \\\n\t$(srcroot)test/unit/batch_alloc.c \\\n\t$(srcroot)test/unit/batcher.c \\\n\t$(srcroot)test/unit/bin_batching.c \\\n\t$(srcroot)test/unit/binshard.c \\\n\t$(srcroot)test/unit/bitmap.c \\\n\t$(srcroot)test/unit/bit_util.c \\\n\t$(srcroot)test/unit/buf_writer.c \\\n\t$(srcroot)test/unit/cache_bin.c \\\n\t$(srcroot)test/unit/ckh.c \\\n\t$(srcroot)test/unit/counter.c \\\n\t$(srcroot)test/unit/decay.c \\\n\t$(srcroot)test/unit/div.c \\\n\t$(srcroot)test/unit/double_free.c \\\n\t$(srcroot)test/unit/edata_cache.c \\\n\t$(srcroot)test/unit/emitter.c \\\n\t$(srcroot)test/unit/extent_quantize.c \\\n\t${srcroot}test/unit/fb.c \\\n\t$(srcroot)test/unit/fork.c \\\n\t${srcroot}test/unit/fxp.c \\\n\t${srcroot}test/unit/san.c \\\n\t${srcroot}test/unit/san_bump.c \\\n\t$(srcroot)test/unit/hash.c \\\n\t$(srcroot)test/unit/hook.c \\\n\t$(srcroot)test/unit/hpa.c \\\n\t$(srcroot)test/unit/hpa_background_thread.c \\\n\t$(srcroot)test/unit/hpdata.c \\\n\t$(srcroot)test/unit/huge.c \\\n\t$(srcroot)test/unit/inspect.c \\\n\t$(srcroot)test/unit/junk.c \\\n\t$(srcroot)test/unit/junk_alloc.c \\\n\t$(srcroot)test/unit/junk_free.c \\\n\t$(srcroot)test/unit/log.c \\\n\t$(srcroot)test/unit/mallctl.c \\\n\t$(srcroot)test/unit/malloc_conf_2.c \\\n\t$(srcroot)test/unit/malloc_io.c \\\n\t$(srcroot)test/unit/math.c \\\n\t$(srcroot)test/unit/mpsc_queue.c \\\n\t$(srcroot)test/unit/mq.c \\\n\t$(srcroot)test/unit/mtx.c \\\n\t$(srcroot)test/unit/nstime.c \\\n\t$(srcroot)test/unit/ncached_max.c \\\n\t$(srcroot)test/unit/oversize_threshold.c \\\n\t$(srcroot)test/unit/pa.c \\\n\t$(srcroot)test/unit/pack.c \\\n\t$(srcroot)test/unit/pages.c \\\n\t$(srcroot)test/unit/peak.c \\\n\t$(srcroot)test/unit/ph.c \\\n\t$(srcroot)test/unit/prng.c \\\n\t$(srcroot)test/unit/prof_accum.c \\\n\t$(srcroot)test/unit/prof_active.c \\\n\t$(srcroot)test/unit/prof_gdump.c \\\n\t$(srcroot)test/unit/prof_hook.c \\\n\t$(srcroot)test/unit/prof_idump.c \\\n\t$(srcroot)test/unit/prof_log.c \\\n\t$(srcroot)test/unit/prof_mdump.c \\\n\t$(srcroot)test/unit/prof_recent.c \\\n\t$(srcroot)test/unit/prof_reset.c \\\n\t$(srcroot)test/unit/prof_small.c \\\n\t$(srcroot)test/unit/prof_stats.c \\\n\t$(srcroot)test/unit/prof_tctx.c \\\n\t$(srcroot)test/unit/prof_thread_name.c \\\n\t$(srcroot)test/unit/prof_sys_thread_name.c \\\n\t$(srcroot)test/unit/psset.c \\\n\t$(srcroot)test/unit/ql.c \\\n\t$(srcroot)test/unit/qr.c \\\n\t$(srcroot)test/unit/rb.c \\\n\t$(srcroot)test/unit/retained.c \\\n\t$(srcroot)test/unit/rtree.c \\\n\t$(srcroot)test/unit/safety_check.c \\\n\t$(srcroot)test/unit/sc.c \\\n\t$(srcroot)test/unit/sec.c \\\n\t$(srcroot)test/unit/seq.c \\\n\t$(srcroot)test/unit/SFMT.c \\\n\t$(srcroot)test/unit/size_check.c \\\n\t$(srcroot)test/unit/size_classes.c \\\n\t$(srcroot)test/unit/slab.c \\\n\t$(srcroot)test/unit/smoothstep.c \\\n\t$(srcroot)test/unit/spin.c \\\n\t$(srcroot)test/unit/stats.c \\\n\t$(srcroot)test/unit/stats_print.c \\\n\t$(srcroot)test/unit/sz.c \\\n\t$(srcroot)test/unit/tcache_max.c \\\n\t$(srcroot)test/unit/test_hooks.c \\\n\t$(srcroot)test/unit/thread_event.c \\\n\t$(srcroot)test/unit/ticker.c \\\n\t$(srcroot)test/unit/tsd.c \\\n\t$(srcroot)test/unit/uaf.c \\\n\t$(srcroot)test/unit/witness.c \\\n\t$(srcroot)test/unit/zero.c \\\n\t$(srcroot)test/unit/zero_realloc_abort.c \\\n\t$(srcroot)test/unit/zero_realloc_free.c \\\n\t$(srcroot)test/unit/zero_realloc_alloc.c \\\n\t$(srcroot)test/unit/zero_reallocs.c\nifeq (@enable_prof@, 1)\nTESTS_UNIT += \\\n\t$(srcroot)test/unit/arena_reset_prof.c \\\n\t$(srcroot)test/unit/batch_alloc_prof.c\nendif\nTESTS_INTEGRATION := $(srcroot)test/integration/aligned_alloc.c \\\n\t$(srcroot)test/integration/allocated.c \\\n\t$(srcroot)test/integration/extent.c \\\n\t$(srcroot)test/integration/malloc.c \\\n\t$(srcroot)test/integration/mallocx.c \\\n\t$(srcroot)test/integration/MALLOCX_ARENA.c \\\n\t$(srcroot)test/integration/overflow.c \\\n\t$(srcroot)test/integration/posix_memalign.c \\\n\t$(srcroot)test/integration/rallocx.c \\\n\t$(srcroot)test/integration/sdallocx.c \\\n\t$(srcroot)test/integration/slab_sizes.c \\\n\t$(srcroot)test/integration/thread_arena.c \\\n\t$(srcroot)test/integration/thread_tcache_enabled.c \\\n\t$(srcroot)test/integration/xallocx.c\nifeq (@enable_experimental_smallocx@, 1)\nTESTS_INTEGRATION += \\\n  $(srcroot)test/integration/smallocx.c\nendif\nifeq (@enable_cxx@, 1)\nCPP_SRCS := $(srcroot)src/jemalloc_cpp.cpp\nTESTS_INTEGRATION_CPP := $(srcroot)test/integration/cpp/basic.cpp \\\n\t$(srcroot)test/integration/cpp/infallible_new_true.cpp \\\n\t$(srcroot)test/integration/cpp/infallible_new_false.cpp\nelse\nCPP_SRCS :=\nTESTS_INTEGRATION_CPP :=\nendif\nTESTS_ANALYZE := $(srcroot)test/analyze/prof_bias.c \\\n\t$(srcroot)test/analyze/rand.c \\\n\t$(srcroot)test/analyze/sizes.c\nTESTS_STRESS := $(srcroot)test/stress/batch_alloc.c \\\n\t$(srcroot)test/stress/fill_flush.c \\\n\t$(srcroot)test/stress/hookbench.c \\\n\t$(srcroot)test/stress/large_microbench.c \\\n\t$(srcroot)test/stress/mallctl.c \\\n\t$(srcroot)test/stress/microbench.c\nifeq (@enable_cxx@, 1)\nTESTS_STRESS_CPP := $(srcroot)test/stress/cpp/microbench.cpp\nelse\nTESTS_STRESS_CPP :=\nendif\n\n\nTESTS := $(TESTS_UNIT) $(TESTS_INTEGRATION) $(TESTS_INTEGRATION_CPP) \\\n\t$(TESTS_ANALYZE) $(TESTS_STRESS) $(TESTS_STRESS_CPP)\n\nPRIVATE_NAMESPACE_HDRS := $(objroot)include/jemalloc/internal/private_namespace.h $(objroot)include/jemalloc/internal/private_namespace_jet.h\nPRIVATE_NAMESPACE_GEN_HDRS := $(PRIVATE_NAMESPACE_HDRS:%.h=%.gen.h)\nC_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym.$(O))\nC_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.sym)\nC_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.$(O))\nCPP_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.$(O))\nC_PIC_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.pic.$(O))\nCPP_PIC_OBJS := $(CPP_SRCS:$(srcroot)%.cpp=$(objroot)%.pic.$(O))\nC_JET_SYM_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym.$(O))\nC_JET_SYMS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.sym)\nC_JET_OBJS := $(C_SRCS:$(srcroot)%.c=$(objroot)%.jet.$(O))\nC_TESTLIB_UNIT_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.unit.$(O))\nC_TESTLIB_INTEGRATION_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))\nC_UTIL_INTEGRATION_OBJS := $(C_UTIL_INTEGRATION_SRCS:$(srcroot)%.c=$(objroot)%.integration.$(O))\nC_TESTLIB_ANALYZE_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.analyze.$(O))\nC_TESTLIB_STRESS_OBJS := $(C_TESTLIB_SRCS:$(srcroot)%.c=$(objroot)%.stress.$(O))\nC_TESTLIB_OBJS := $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) \\\n\t$(C_UTIL_INTEGRATION_OBJS) $(C_TESTLIB_ANALYZE_OBJS) \\\n\t$(C_TESTLIB_STRESS_OBJS)\n\nTESTS_UNIT_OBJS := $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%.$(O))\nTESTS_INTEGRATION_OBJS := $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%.$(O))\nTESTS_INTEGRATION_CPP_OBJS := $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%.$(O))\nTESTS_ANALYZE_OBJS := $(TESTS_ANALYZE:$(srcroot)%.c=$(objroot)%.$(O))\nTESTS_STRESS_OBJS := $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%.$(O))\nTESTS_STRESS_CPP_OBJS := $(TESTS_STRESS_CPP:$(srcroot)%.cpp=$(objroot)%.$(O))\nTESTS_OBJS := $(TESTS_UNIT_OBJS) $(TESTS_INTEGRATION_OBJS) $(TESTS_ANALYZE_OBJS) \\\n\t$(TESTS_STRESS_OBJS)\nTESTS_CPP_OBJS := $(TESTS_INTEGRATION_CPP_OBJS) $(TESTS_STRESS_CPP_OBJS)\n\n.PHONY: all dist build_doc_html build_doc_man build_doc\n.PHONY: install_bin install_include install_lib\n.PHONY: install_doc_html install_doc_man install_doc install\n.PHONY: tests check clean distclean relclean\n\n.SECONDARY : $(PRIVATE_NAMESPACE_GEN_HDRS) $(TESTS_OBJS) $(TESTS_CPP_OBJS)\n\n# Default target.\nall: build_lib\n\ndist: build_doc\n\n$(objroot)doc/%$(install_suffix).html : $(objroot)doc/%.xml $(srcroot)doc/stylesheet.xsl $(objroot)doc/html.xsl\nifneq ($(XSLROOT),)\n\t$(XSLTPROC) -o $@ $(objroot)doc/html.xsl $<\nelse\nifeq ($(wildcard $(DOCS_HTML)),)\n\t@echo \"<p>Missing xsltproc.  Doc not built.</p>\" > $@\nendif\n\t@echo \"Missing xsltproc.  \"$@\" not (re)built.\"\nendif\n\n$(objroot)doc/%$(install_suffix).3 : $(objroot)doc/%.xml $(srcroot)doc/stylesheet.xsl $(objroot)doc/manpages.xsl\nifneq ($(XSLROOT),)\n\t$(XSLTPROC) -o $@ $(objroot)doc/manpages.xsl $<\n# The -o option (output filename) of xsltproc may not work (it uses the\n# <refname> in the .xml file).  Manually add the suffix if so.\n  ifneq ($(install_suffix),)\n\t@if [ -f $(objroot)doc/jemalloc.3 ]; then \\\n\t\tmv $(objroot)doc/jemalloc.3 $(objroot)doc/jemalloc$(install_suffix).3 ; \\\n\tfi\n  endif\nelse\nifeq ($(wildcard $(DOCS_MAN3)),)\n\t@echo \"Missing xsltproc.  Doc not built.\" > $@\nendif\n\t@echo \"Missing xsltproc.  \"$@\" not (re)built.\"\nendif\n\nbuild_doc_html: $(DOCS_HTML)\nbuild_doc_man: $(DOCS_MAN3)\nbuild_doc: $(DOCS)\n\n#\n# Include generated dependency files.\n#\nifdef CC_MM\n-include $(C_SYM_OBJS:%.$(O)=%.d)\n-include $(C_OBJS:%.$(O)=%.d)\n-include $(CPP_OBJS:%.$(O)=%.d)\n-include $(C_PIC_OBJS:%.$(O)=%.d)\n-include $(CPP_PIC_OBJS:%.$(O)=%.d)\n-include $(C_JET_SYM_OBJS:%.$(O)=%.d)\n-include $(C_JET_OBJS:%.$(O)=%.d)\n-include $(C_TESTLIB_OBJS:%.$(O)=%.d)\n-include $(TESTS_OBJS:%.$(O)=%.d)\n-include $(TESTS_CPP_OBJS:%.$(O)=%.d)\nendif\n\n$(C_SYM_OBJS): $(objroot)src/%.sym.$(O): $(srcroot)src/%.c\n$(C_SYM_OBJS): CPPFLAGS += -DJEMALLOC_NO_PRIVATE_NAMESPACE\n$(C_SYMS): $(objroot)src/%.sym: $(objroot)src/%.sym.$(O)\n$(C_OBJS): $(objroot)src/%.$(O): $(srcroot)src/%.c\n$(CPP_OBJS): $(objroot)src/%.$(O): $(srcroot)src/%.cpp\n$(C_PIC_OBJS): $(objroot)src/%.pic.$(O): $(srcroot)src/%.c\n$(C_PIC_OBJS): CFLAGS += $(PIC_CFLAGS)\n$(CPP_PIC_OBJS): $(objroot)src/%.pic.$(O): $(srcroot)src/%.cpp\n$(CPP_PIC_OBJS): CXXFLAGS += $(PIC_CFLAGS)\n$(C_JET_SYM_OBJS): $(objroot)src/%.jet.sym.$(O): $(srcroot)src/%.c\n$(C_JET_SYM_OBJS): CPPFLAGS += -DJEMALLOC_JET -DJEMALLOC_NO_PRIVATE_NAMESPACE\n$(C_JET_SYMS): $(objroot)src/%.jet.sym: $(objroot)src/%.jet.sym.$(O)\n$(C_JET_OBJS): $(objroot)src/%.jet.$(O): $(srcroot)src/%.c\n$(C_JET_OBJS): CPPFLAGS += -DJEMALLOC_JET\n$(C_TESTLIB_UNIT_OBJS): $(objroot)test/src/%.unit.$(O): $(srcroot)test/src/%.c\n$(C_TESTLIB_UNIT_OBJS): CPPFLAGS += -DJEMALLOC_UNIT_TEST\n$(C_TESTLIB_INTEGRATION_OBJS): $(objroot)test/src/%.integration.$(O): $(srcroot)test/src/%.c\n$(C_TESTLIB_INTEGRATION_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_TEST\n$(C_UTIL_INTEGRATION_OBJS): $(objroot)src/%.integration.$(O): $(srcroot)src/%.c\n$(C_TESTLIB_ANALYZE_OBJS): $(objroot)test/src/%.analyze.$(O): $(srcroot)test/src/%.c\n$(C_TESTLIB_ANALYZE_OBJS): CPPFLAGS += -DJEMALLOC_ANALYZE_TEST\n$(C_TESTLIB_STRESS_OBJS): $(objroot)test/src/%.stress.$(O): $(srcroot)test/src/%.c\n$(C_TESTLIB_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST -DJEMALLOC_STRESS_TESTLIB\n$(C_TESTLIB_OBJS): CPPFLAGS += -I$(srcroot)test/include -I$(objroot)test/include\n$(TESTS_UNIT_OBJS): CPPFLAGS += -DJEMALLOC_UNIT_TEST\n$(TESTS_INTEGRATION_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_TEST\n$(TESTS_INTEGRATION_CPP_OBJS): CPPFLAGS += -DJEMALLOC_INTEGRATION_CPP_TEST\n$(TESTS_ANALYZE_OBJS): CPPFLAGS += -DJEMALLOC_ANALYZE_TEST\n$(TESTS_STRESS_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_TEST\n$(TESTS_STRESS_CPP_OBJS): CPPFLAGS += -DJEMALLOC_STRESS_CPP_TEST\n$(TESTS_OBJS): $(objroot)test/%.$(O): $(srcroot)test/%.c\n$(TESTS_CPP_OBJS): $(objroot)test/%.$(O): $(srcroot)test/%.cpp\n$(TESTS_OBJS): CPPFLAGS += -I$(srcroot)test/include -I$(objroot)test/include\n$(TESTS_CPP_OBJS): CPPFLAGS += -I$(srcroot)test/include -I$(objroot)test/include\n$(TESTS_OBJS): CFLAGS += -fno-builtin\n$(TESTS_CPP_OBJS): CPPFLAGS += -fno-builtin\nifneq ($(IMPORTLIB),$(SO))\n$(CPP_OBJS) $(C_SYM_OBJS) $(C_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS): CPPFLAGS += -DDLLEXPORT\nendif\n\n# Dependencies.\nifndef CC_MM\nHEADER_DIRS = $(srcroot)include/jemalloc/internal \\\n\t$(objroot)include/jemalloc $(objroot)include/jemalloc/internal\nHEADERS = $(filter-out $(PRIVATE_NAMESPACE_HDRS),$(wildcard $(foreach dir,$(HEADER_DIRS),$(dir)/*.h)))\n$(C_SYM_OBJS) $(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_OBJS) $(TESTS_CPP_OBJS): $(HEADERS)\n$(TESTS_OBJS) $(TESTS_CPP_OBJS): $(objroot)test/include/test/jemalloc_test.h\nendif\n\n$(C_OBJS) $(CPP_OBJS) $(C_PIC_OBJS) $(CPP_PIC_OBJS) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEGRATION_OBJS) $(TESTS_INTEGRATION_OBJS) $(TESTS_INTEGRATION_CPP_OBJS): $(objroot)include/jemalloc/internal/private_namespace.h\n$(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS) $(C_TESTLIB_ANALYZE_OBJS) $(C_TESTLIB_STRESS_OBJS) $(TESTS_UNIT_OBJS) $(TESTS_ANALYZE_OBJS) $(TESTS_STRESS_OBJS) $(TESTS_STRESS_CPP_OBJS): $(objroot)include/jemalloc/internal/private_namespace_jet.h\n\n$(C_SYM_OBJS) $(C_OBJS) $(C_PIC_OBJS) $(C_JET_SYM_OBJS) $(C_JET_OBJS) $(C_TESTLIB_OBJS) $(TESTS_OBJS): %.$(O):\n\t@mkdir -p $(@D)\n\t$(CC) $(CFLAGS) -c $(CPPFLAGS) $(CTARGET) $<\nifdef CC_MM\n\t@$(CC) -MM $(CPPFLAGS) -MT $@ -o $(@:%.$(O)=%.d) $<\nendif\n\n$(C_SYMS): %.sym:\n\t@mkdir -p $(@D)\n\t$(DUMP_SYMS) $< | $(AWK) -f $(objroot)include/jemalloc/internal/private_symbols.awk > $@\n\n$(C_JET_SYMS): %.sym:\n\t@mkdir -p $(@D)\n\t$(DUMP_SYMS) $< | $(AWK) -f $(objroot)include/jemalloc/internal/private_symbols_jet.awk > $@\n\n$(objroot)include/jemalloc/internal/private_namespace.gen.h: $(C_SYMS)\n\t$(SHELL) $(srcroot)include/jemalloc/internal/private_namespace.sh $^ > $@\n\n$(objroot)include/jemalloc/internal/private_namespace_jet.gen.h: $(C_JET_SYMS)\n\t$(SHELL) $(srcroot)include/jemalloc/internal/private_namespace.sh $^ > $@\n\n%.h: %.gen.h\n\t@if ! `cmp -s $< $@` ; then echo \"cp $< $@\"; cp $< $@ ; fi\n\n$(CPP_OBJS) $(CPP_PIC_OBJS) $(TESTS_CPP_OBJS): %.$(O):\n\t@mkdir -p $(@D)\n\t$(CXX) $(CXXFLAGS) -c $(CPPFLAGS) $(CTARGET) $<\nifdef CC_MM\n\t@$(CXX) -MM $(CPPFLAGS) -MT $@ -o $(@:%.$(O)=%.d) $<\nendif\n\nifneq ($(SOREV),$(SO))\n%.$(SO) : %.$(SOREV)\n\t@mkdir -p $(@D)\n\tln -sf $(<F) $@\nendif\n\n$(objroot)lib/$(LIBJEMALLOC).$(SOREV) : $(if $(PIC_CFLAGS),$(C_PIC_OBJS),$(C_OBJS)) $(if $(PIC_CFLAGS),$(CPP_PIC_OBJS),$(CPP_OBJS))\n\t@mkdir -p $(@D)\nifeq (@enable_cxx@, 1)\n\t$(CXX) $(DSO_LDFLAGS) $(call RPATH,$(RPATH_EXTRA)) $(LDTARGET) $+ $(LDFLAGS) $(LIBS) $(EXTRA_LDFLAGS)\nelse\n\t$(CC) $(DSO_LDFLAGS) $(call RPATH,$(RPATH_EXTRA)) $(LDTARGET) $+ $(LDFLAGS) $(LIBS) $(EXTRA_LDFLAGS)\nendif\n\n$(objroot)lib/$(LIBJEMALLOC)_pic.$(A) : $(C_PIC_OBJS) $(CPP_PIC_OBJS)\n$(objroot)lib/$(LIBJEMALLOC).$(A) : $(C_OBJS) $(CPP_OBJS)\n$(objroot)lib/$(LIBJEMALLOC)_s.$(A) : $(C_OBJS) $(CPP_OBJS)\n\n$(STATIC_LIBS):\n\t@mkdir -p $(@D)\n\t$(AR) $(ARFLAGS)@AROUT@ $+\n\n$(objroot)test/unit/%$(EXE): $(objroot)test/unit/%.$(O) $(C_JET_OBJS) $(C_TESTLIB_UNIT_OBJS)\n\t@mkdir -p $(@D)\n\t$(CC) $(LDTARGET) $(filter %.$(O),$^) $(call RPATH,$(objroot)lib) $(LDFLAGS) $(filter-out -lm,$(LIBS)) $(LM) $(EXTRA_LDFLAGS)\n\n$(objroot)test/integration/%$(EXE): $(objroot)test/integration/%.$(O) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEGRATION_OBJS) $(objroot)lib/$(LIBJEMALLOC).$(IMPORTLIB)\n\t@mkdir -p $(@D)\n\t$(CC) $(TEST_LD_MODE) $(LDTARGET) $(filter %.$(O),$^) $(call RPATH,$(objroot)lib) $(LJEMALLOC) $(LDFLAGS) $(filter-out -lm,$(filter -lrt -pthread -lstdc++,$(LIBS))) $(LM) $(EXTRA_LDFLAGS)\n\n$(objroot)test/integration/cpp/%$(EXE): $(objroot)test/integration/cpp/%.$(O) $(C_TESTLIB_INTEGRATION_OBJS) $(C_UTIL_INTEGRATION_OBJS) $(objroot)lib/$(LIBJEMALLOC).$(IMPORTLIB)\n\t@mkdir -p $(@D)\n\t$(CXX) $(LDTARGET) $(filter %.$(O),$^) $(call RPATH,$(objroot)lib) $(objroot)lib/$(LIBJEMALLOC).$(IMPORTLIB) $(LDFLAGS) $(filter-out -lm,$(LIBS)) -lm $(EXTRA_LDFLAGS)\n\n$(objroot)test/analyze/%$(EXE): $(objroot)test/analyze/%.$(O) $(C_JET_OBJS) $(C_TESTLIB_ANALYZE_OBJS)\n\t@mkdir -p $(@D)\n\t$(CC) $(LDTARGET) $(filter %.$(O),$^) $(call RPATH,$(objroot)lib) $(LDFLAGS) $(filter-out -lm,$(LIBS)) $(LM) $(EXTRA_LDFLAGS)\n\n$(objroot)test/stress/%$(EXE): $(objroot)test/stress/%.$(O) $(C_JET_OBJS) $(C_TESTLIB_STRESS_OBJS) $(objroot)lib/$(LIBJEMALLOC).$(IMPORTLIB)\n\t@mkdir -p $(@D)\n\t$(CC) $(TEST_LD_MODE) $(LDTARGET) $(filter %.$(O),$^) $(call RPATH,$(objroot)lib) $(objroot)lib/$(LIBJEMALLOC).$(IMPORTLIB) $(LDFLAGS) $(filter-out -lm,$(LIBS)) $(LM) $(EXTRA_LDFLAGS)\n\nbuild_lib_shared: $(DSOS)\nbuild_lib_static: $(STATIC_LIBS)\nifeq ($(enable_shared), 1)\nbuild_lib: build_lib_shared\nendif\nifeq ($(enable_static), 1)\nbuild_lib: build_lib_static\nendif\n\ninstall_bin:\n\t$(INSTALL) -d $(BINDIR)\n\t@for b in $(BINS); do \\\n\techo \"$(INSTALL) -m 755 $$b $(BINDIR)\"; \\\n\t$(INSTALL) -m 755 $$b $(BINDIR); \\\ndone\n\ninstall_include:\n\t$(INSTALL) -d $(INCLUDEDIR)/jemalloc\n\t@for h in $(C_HDRS); do \\\n\techo \"$(INSTALL) -m 644 $$h $(INCLUDEDIR)/jemalloc\"; \\\n\t$(INSTALL) -m 644 $$h $(INCLUDEDIR)/jemalloc; \\\ndone\n\ninstall_lib_shared: $(DSOS)\n\t$(INSTALL) -d $(LIBDIR)\n\t$(INSTALL) -m 755 $(objroot)lib/$(LIBJEMALLOC).$(SOREV) $(LIBDIR)\nifneq ($(SOREV),$(SO))\n\tln -sf $(LIBJEMALLOC).$(SOREV) $(LIBDIR)/$(LIBJEMALLOC).$(SO)\nendif\n\ninstall_lib_static: $(STATIC_LIBS)\n\t$(INSTALL) -d $(LIBDIR)\n\t@for l in $(STATIC_LIBS); do \\\n\techo \"$(INSTALL) -m 755 $$l $(LIBDIR)\"; \\\n\t$(INSTALL) -m 755 $$l $(LIBDIR); \\\ndone\n\ninstall_lib_pc: $(PC)\n\t$(INSTALL) -d $(LIBDIR)/pkgconfig\n\t@for l in $(PC); do \\\n\techo \"$(INSTALL) -m 644 $$l $(LIBDIR)/pkgconfig\"; \\\n\t$(INSTALL) -m 644 $$l $(LIBDIR)/pkgconfig; \\\ndone\n\nifeq ($(enable_shared), 1)\ninstall_lib: install_lib_shared\nendif\nifeq ($(enable_static), 1)\ninstall_lib: install_lib_static\nendif\ninstall_lib: install_lib_pc\n\ninstall_doc_html: build_doc_html\n\t$(INSTALL) -d $(DATADIR)/doc/jemalloc$(install_suffix)\n\t@for d in $(DOCS_HTML); do \\\n\techo \"$(INSTALL) -m 644 $$d $(DATADIR)/doc/jemalloc$(install_suffix)\"; \\\n\t$(INSTALL) -m 644 $$d $(DATADIR)/doc/jemalloc$(install_suffix); \\\ndone\n\ninstall_doc_man: build_doc_man\n\t$(INSTALL) -d $(MANDIR)/man3\n\t@for d in $(DOCS_MAN3); do \\\n\techo \"$(INSTALL) -m 644 $$d $(MANDIR)/man3\"; \\\n\t$(INSTALL) -m 644 $$d $(MANDIR)/man3; \\\ndone\n\ninstall_doc: install_doc_html install_doc_man\n\ninstall: install_bin install_include install_lib\n\nifeq ($(enable_doc), 1)\ninstall: install_doc\nendif\n\nuninstall_bin:\n\t$(RM) -v $(foreach b,$(notdir $(BINS)),$(BINDIR)/$(b))\n\nuninstall_include:\n\t$(RM) -v $(foreach h,$(notdir $(C_HDRS)),$(INCLUDEDIR)/jemalloc/$(h))\n\trmdir -v $(INCLUDEDIR)/jemalloc\n\nuninstall_lib_shared:\n\t$(RM) -v $(LIBDIR)/$(LIBJEMALLOC).$(SOREV)\nifneq ($(SOREV),$(SO))\n\t$(RM) -v $(LIBDIR)/$(LIBJEMALLOC).$(SO)\nendif\n\nuninstall_lib_static:\n\t$(RM) -v $(foreach l,$(notdir $(STATIC_LIBS)),$(LIBDIR)/$(l))\n\nuninstall_lib_pc:\n\t$(RM) -v $(foreach p,$(notdir $(PC)),$(LIBDIR)/pkgconfig/$(p))\n\nifeq ($(enable_shared), 1)\nuninstall_lib: uninstall_lib_shared\nendif\nifeq ($(enable_static), 1)\nuninstall_lib: uninstall_lib_static\nendif\nuninstall_lib: uninstall_lib_pc\n\nuninstall_doc_html:\n\t$(RM) -v $(foreach d,$(notdir $(DOCS_HTML)),$(DATADIR)/doc/jemalloc$(install_suffix)/$(d))\n\trmdir -v $(DATADIR)/doc/jemalloc$(install_suffix)\n\nuninstall_doc_man:\n\t$(RM) -v $(foreach d,$(notdir $(DOCS_MAN3)),$(MANDIR)/man3/$(d))\n\nuninstall_doc: uninstall_doc_html uninstall_doc_man\n\nuninstall: uninstall_bin uninstall_include uninstall_lib\n\nifeq ($(enable_doc), 1)\nuninstall: uninstall_doc\nendif\n\ntests_unit: $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%$(EXE))\ntests_integration: $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%$(EXE)) $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%$(EXE))\ntests_analyze: $(TESTS_ANALYZE:$(srcroot)%.c=$(objroot)%$(EXE))\ntests_stress: $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%$(EXE)) $(TESTS_STRESS_CPP:$(srcroot)%.cpp=$(objroot)%$(EXE))\ntests: tests_unit tests_integration tests_analyze tests_stress\n\ncheck_unit_dir:\n\t@mkdir -p $(objroot)test/unit\ncheck_integration_dir:\n\t@mkdir -p $(objroot)test/integration\nanalyze_dir:\n\t@mkdir -p $(objroot)test/analyze\nstress_dir:\n\t@mkdir -p $(objroot)test/stress\ncheck_dir: check_unit_dir check_integration_dir\n\ncheck_unit: tests_unit check_unit_dir\n\t$(SHELL) $(objroot)test/test.sh $(TESTS_UNIT:$(srcroot)%.c=$(objroot)%)\ncheck_integration_prof: tests_integration check_integration_dir\nifeq ($(enable_prof), 1)\n\t$(MALLOC_CONF)=\"prof:true\" $(SHELL) $(objroot)test/test.sh $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%) $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%)\n\t$(MALLOC_CONF)=\"prof:true,prof_active:false\" $(SHELL) $(objroot)test/test.sh $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%) $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%)\nendif\ncheck_integration_decay: tests_integration check_integration_dir\n\t$(MALLOC_CONF)=\"dirty_decay_ms:-1,muzzy_decay_ms:-1\" $(SHELL) $(objroot)test/test.sh $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%) $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%)\n\t$(MALLOC_CONF)=\"dirty_decay_ms:0,muzzy_decay_ms:0\" $(SHELL) $(objroot)test/test.sh $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%) $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%)\ncheck_integration: tests_integration check_integration_dir\n\t$(SHELL) $(objroot)test/test.sh $(TESTS_INTEGRATION:$(srcroot)%.c=$(objroot)%) $(TESTS_INTEGRATION_CPP:$(srcroot)%.cpp=$(objroot)%)\nanalyze: tests_analyze analyze_dir\nifeq ($(enable_prof), 1)\n\t$(MALLOC_CONF)=\"prof:true\" $(SHELL) $(objroot)test/test.sh $(TESTS_ANALYZE:$(srcroot)%.c=$(objroot)%)\nelse\n\t$(SHELL) $(objroot)test/test.sh $(TESTS_ANALYZE:$(srcroot)%.c=$(objroot)%)\nendif\nstress: tests_stress stress_dir\n\t$(SHELL) $(objroot)test/test.sh $(TESTS_STRESS:$(srcroot)%.c=$(objroot)%)\n\t$(SHELL) $(objroot)test/test.sh $(TESTS_STRESS_CPP:$(srcroot)%.cpp=$(objroot)%)\ncheck: check_unit check_integration check_integration_decay check_integration_prof\n\nclean:\n\trm -f $(PRIVATE_NAMESPACE_HDRS)\n\trm -f $(PRIVATE_NAMESPACE_GEN_HDRS)\n\trm -f $(C_SYM_OBJS)\n\trm -f $(C_SYMS)\n\trm -f $(C_OBJS)\n\trm -f $(CPP_OBJS)\n\trm -f $(C_PIC_OBJS)\n\trm -f $(CPP_PIC_OBJS)\n\trm -f $(C_JET_SYM_OBJS)\n\trm -f $(C_JET_SYMS)\n\trm -f $(C_JET_OBJS)\n\trm -f $(C_TESTLIB_OBJS)\n\trm -f $(C_SYM_OBJS:%.$(O)=%.d)\n\trm -f $(C_OBJS:%.$(O)=%.d)\n\trm -f $(CPP_OBJS:%.$(O)=%.d)\n\trm -f $(C_PIC_OBJS:%.$(O)=%.d)\n\trm -f $(CPP_PIC_OBJS:%.$(O)=%.d)\n\trm -f $(C_JET_SYM_OBJS:%.$(O)=%.d)\n\trm -f $(C_JET_OBJS:%.$(O)=%.d)\n\trm -f $(C_TESTLIB_OBJS:%.$(O)=%.d)\n\trm -f $(TESTS_OBJS:%.$(O)=%$(EXE))\n\trm -f $(TESTS_OBJS)\n\trm -f $(TESTS_OBJS:%.$(O)=%.d)\n\trm -f $(TESTS_OBJS:%.$(O)=%.out)\n\trm -f $(TESTS_CPP_OBJS:%.$(O)=%$(EXE))\n\trm -f $(TESTS_CPP_OBJS)\n\trm -f $(TESTS_CPP_OBJS:%.$(O)=%.d)\n\trm -f $(TESTS_CPP_OBJS:%.$(O)=%.out)\n\trm -f $(DSOS) $(STATIC_LIBS)\n\ndistclean: clean\n\trm -f $(objroot)bin/jemalloc-config\n\trm -f $(objroot)bin/jemalloc.sh\n\trm -f $(objroot)bin/jeprof\n\trm -f $(objroot)config.log\n\trm -f $(objroot)config.status\n\trm -f $(objroot)config.stamp\n\trm -f $(cfghdrs_out)\n\trm -f $(cfgoutputs_out)\n\nrelclean: distclean\n\trm -f $(objroot)configure\n\trm -f $(objroot)VERSION\n\trm -f $(DOCS_HTML)\n\trm -f $(DOCS_MAN3)\n\n#===============================================================================\n# Re-configuration rules.\n\nifeq ($(enable_autogen), 1)\n$(srcroot)configure : $(srcroot)configure.ac\n\tcd ./$(srcroot) && $(AUTOCONF)\n\n$(objroot)config.status : $(srcroot)configure\n\t./$(objroot)config.status --recheck\n\n$(srcroot)config.stamp.in : $(srcroot)configure.ac\n\techo stamp > $(srcroot)config.stamp.in\n\n$(objroot)config.stamp : $(cfgoutputs_in) $(cfghdrs_in) $(srcroot)configure\n\t./$(objroot)config.status\n\t@touch $@\n\n# There must be some action in order for make to re-read Makefile when it is\n# out of date.\n$(cfgoutputs_out) $(cfghdrs_out) : $(objroot)config.stamp\n\t@true\nendif\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 1.0234375,
          "content": "jemalloc is a general purpose malloc(3) implementation that emphasizes\nfragmentation avoidance and scalable concurrency support.  jemalloc first came\ninto use as the FreeBSD libc allocator in 2005, and since then it has found its\nway into numerous applications that rely on its predictable behavior.  In 2010\njemalloc development efforts broadened to include developer support features\nsuch as heap profiling and extensive monitoring/tuning hooks.  Modern jemalloc\nreleases continue to be integrated back into FreeBSD, and therefore versatility\nremains critical.  Ongoing development efforts trend toward making jemalloc\namong the best allocators for a broad range of demanding applications, and\neliminating/mitigating weaknesses that have practical repercussions for real\nworld applications.\n\nThe COPYING file contains copyright and licensing information.\n\nThe INSTALL file contains information on how to configure, build, and install\njemalloc.\n\nThe ChangeLog file contains a brief summary of changes for each release.\n\nURL: https://jemalloc.net/\n"
        },
        {
          "name": "TUNING.md",
          "type": "blob",
          "size": 5.80859375,
          "content": "This document summarizes the common approaches for performance fine tuning with\njemalloc (as of 5.3.0).  The default configuration of jemalloc tends to work\nreasonably well in practice, and most applications should not have to tune any\noptions. However, in order to cover a wide range of applications and avoid\npathological cases, the default setting is sometimes kept conservative and\nsuboptimal, even for many common workloads.  When jemalloc is properly tuned for\na specific application / workload, it is common to improve system level metrics\nby a few percent, or make favorable trade-offs.\n\n\n## Notable runtime options for performance tuning\n\nRuntime options can be set via\n[malloc_conf](https://jemalloc.net/jemalloc.3.html#tuning).\n\n* [background_thread](https://jemalloc.net/jemalloc.3.html#background_thread)\n\n    Enabling jemalloc background threads generally improves the tail latency for\n    application threads, since unused memory purging is shifted to the dedicated\n    background threads.  In addition, unintended purging delay caused by\n    application inactivity is avoided with background threads.\n\n    Suggested: `background_thread:true` when jemalloc managed threads can be\n    allowed.\n\n* [metadata_thp](https://jemalloc.net/jemalloc.3.html#opt.metadata_thp)\n\n    Allowing jemalloc to utilize transparent huge pages for its internal\n    metadata usually reduces TLB misses significantly, especially for programs\n    with large memory footprint and frequent allocation / deallocation\n    activities.  Metadata memory usage may increase due to the use of huge\n    pages.\n\n    Suggested for allocation intensive programs: `metadata_thp:auto` or\n    `metadata_thp:always`, which is expected to improve CPU utilization at a\n    small memory cost.\n\n* [dirty_decay_ms](https://jemalloc.net/jemalloc.3.html#opt.dirty_decay_ms) and\n  [muzzy_decay_ms](https://jemalloc.net/jemalloc.3.html#opt.muzzy_decay_ms)\n\n    Decay time determines how fast jemalloc returns unused pages back to the\n    operating system, and therefore provides a fairly straightforward trade-off\n    between CPU and memory usage.  Shorter decay time purges unused pages faster\n    to reduces memory usage (usually at the cost of more CPU cycles spent on\n    purging), and vice versa.\n\n    Suggested: tune the values based on the desired trade-offs.\n\n* [narenas](https://jemalloc.net/jemalloc.3.html#opt.narenas)\n\n    By default jemalloc uses multiple arenas to reduce internal lock contention.\n    However high arena count may also increase overall memory fragmentation,\n    since arenas manage memory independently.  When high degree of parallelism\n    is not expected at the allocator level, lower number of arenas often\n    improves memory usage.\n\n    Suggested: if low parallelism is expected, try lower arena count while\n    monitoring CPU and memory usage.\n\n* [percpu_arena](https://jemalloc.net/jemalloc.3.html#opt.percpu_arena)\n\n    Enable dynamic thread to arena association based on running CPU.  This has\n    the potential to improve locality, e.g. when thread to CPU affinity is\n    present.\n    \n    Suggested: try `percpu_arena:percpu` or `percpu_arena:phycpu` if\n    thread migration between processors is expected to be infrequent.\n\nExamples:\n\n* High resource consumption application, prioritizing CPU utilization:\n\n    `background_thread:true,metadata_thp:auto` combined with relaxed decay time\n    (increased `dirty_decay_ms` and / or `muzzy_decay_ms`,\n    e.g. `dirty_decay_ms:30000,muzzy_decay_ms:30000`).\n\n* High resource consumption application, prioritizing memory usage:\n\n    `background_thread:true,tcache_max:4096` combined with shorter decay time\n    (decreased `dirty_decay_ms` and / or `muzzy_decay_ms`,\n    e.g. `dirty_decay_ms:5000,muzzy_decay_ms:5000`), and lower arena count\n    (e.g. number of CPUs).\n\n* Low resource consumption application:\n\n    `narenas:1,tcache_max:1024` combined with shorter decay time (decreased\n    `dirty_decay_ms` and / or `muzzy_decay_ms`,e.g.\n    `dirty_decay_ms:1000,muzzy_decay_ms:0`).\n\n* Extremely conservative -- minimize memory usage at all costs, only suitable when\nallocation activity is very rare:\n\n    `narenas:1,tcache:false,dirty_decay_ms:0,muzzy_decay_ms:0`\n\nNote that it is recommended to combine the options with `abort_conf:true` which\naborts immediately on illegal options.\n\n## Beyond runtime options\n\nIn addition to the runtime options, there are a number of programmatic ways to\nimprove application performance with jemalloc.\n\n* [Explicit arenas](https://jemalloc.net/jemalloc.3.html#arenas.create)\n\n    Manually created arenas can help performance in various ways, e.g. by\n    managing locality and contention for specific usages.  For example,\n    applications can explicitly allocate frequently accessed objects from a\n    dedicated arena with\n    [mallocx()](https://jemalloc.net/jemalloc.3.html#MALLOCX_ARENA) to improve\n    locality.  In addition, explicit arenas often benefit from individually\n    tuned options, e.g. relaxed [decay\n    time](https://jemalloc.net/jemalloc.3.html#arena.i.dirty_decay_ms) if\n    frequent reuse is expected.\n\n* [Extent hooks](https://jemalloc.net/jemalloc.3.html#arena.i.extent_hooks)\n\n    Extent hooks allow customization for managing underlying memory.  One use\n    case for performance purpose is to utilize huge pages -- for example,\n    [HHVM](httpss://github.com/facebook/hhvm/blob/master/hphp/util/alloc.cpp)\n    uses explicit arenas with customized extent hooks to manage 1GB huge pages\n    for frequently accessed data, which reduces TLB misses significantly.\n\n* [Explicit thread-to-arena\n  binding](https://jemalloc.net/jemalloc.3.html#thread.arena)\n\n    It is common for some threads in an application to have different memory\n    access / allocation patterns.  Threads with heavy workloads often benefit\n    from explicit binding, e.g. binding very active threads to dedicated arenas\n    may reduce contention at the allocator level.\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.265625,
          "content": "#!/bin/sh\n\nfor i in autoconf; do\n    echo \"$i\"\n    $i\n    if [ $? -ne 0 ]; then\n\techo \"Error $? in $i\"\n\texit 1\n    fi\ndone\n\necho \"./configure --enable-autogen \\\"$@\\\"\"\n./configure --enable-autogen \"$@\"\nif [ $? -ne 0 ]; then\n    echo \"Error $? in ./configure\"\n    exit 1\nfi\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.stamp.in",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 89.345703125,
          "content": "dnl Process this file with autoconf to produce a configure script.\nAC_PREREQ(2.68)\nAC_INIT([Makefile.in])\n\nAC_CONFIG_AUX_DIR([build-aux])\n\ndnl ============================================================================\ndnl Custom macro definitions.\n\ndnl JE_CONCAT_VVV(r, a, b)\ndnl\ndnl Set $r to the concatenation of $a and $b, with a space separating them iff\ndnl both $a and $b are non-empty.\nAC_DEFUN([JE_CONCAT_VVV],\nif test \"x[$]{$2}\" = \"x\" -o \"x[$]{$3}\" = \"x\" ; then\n  $1=\"[$]{$2}[$]{$3}\"\nelse\n  $1=\"[$]{$2} [$]{$3}\"\nfi\n)\n\ndnl JE_APPEND_VS(a, b)\ndnl\ndnl Set $a to the concatenation of $a and b, with a space separating them iff\ndnl both $a and b are non-empty.\nAC_DEFUN([JE_APPEND_VS],\n  T_APPEND_V=$2\n  JE_CONCAT_VVV($1, $1, T_APPEND_V)\n)\n\nCONFIGURE_CFLAGS=\nSPECIFIED_CFLAGS=\"${CFLAGS}\"\ndnl JE_CFLAGS_ADD(cflag)\ndnl\ndnl CFLAGS is the concatenation of CONFIGURE_CFLAGS and SPECIFIED_CFLAGS\ndnl (ignoring EXTRA_CFLAGS, which does not impact configure tests.  This macro\ndnl appends to CONFIGURE_CFLAGS and regenerates CFLAGS.\nAC_DEFUN([JE_CFLAGS_ADD],\n[\nAC_MSG_CHECKING([whether compiler supports $1])\nT_CONFIGURE_CFLAGS=\"${CONFIGURE_CFLAGS}\"\nJE_APPEND_VS(CONFIGURE_CFLAGS, $1)\nJE_CONCAT_VVV(CFLAGS, CONFIGURE_CFLAGS, SPECIFIED_CFLAGS)\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[[\n]], [[\n    return 0;\n]])],\n              [je_cv_cflags_added=$1]\n              AC_MSG_RESULT([yes]),\n              [je_cv_cflags_added=]\n              AC_MSG_RESULT([no])\n              [CONFIGURE_CFLAGS=\"${T_CONFIGURE_CFLAGS}\"]\n)\nJE_CONCAT_VVV(CFLAGS, CONFIGURE_CFLAGS, SPECIFIED_CFLAGS)\n])\n\ndnl JE_CFLAGS_SAVE()\ndnl JE_CFLAGS_RESTORE()\ndnl\ndnl Save/restore CFLAGS.  Nesting is not supported.\nAC_DEFUN([JE_CFLAGS_SAVE],\nSAVED_CONFIGURE_CFLAGS=\"${CONFIGURE_CFLAGS}\"\n)\nAC_DEFUN([JE_CFLAGS_RESTORE],\nCONFIGURE_CFLAGS=\"${SAVED_CONFIGURE_CFLAGS}\"\nJE_CONCAT_VVV(CFLAGS, CONFIGURE_CFLAGS, SPECIFIED_CFLAGS)\n)\n\nCONFIGURE_CXXFLAGS=\nSPECIFIED_CXXFLAGS=\"${CXXFLAGS}\"\ndnl JE_CXXFLAGS_ADD(cxxflag)\nAC_DEFUN([JE_CXXFLAGS_ADD],\n[\nAC_MSG_CHECKING([whether compiler supports $1])\nT_CONFIGURE_CXXFLAGS=\"${CONFIGURE_CXXFLAGS}\"\nJE_APPEND_VS(CONFIGURE_CXXFLAGS, $1)\nJE_CONCAT_VVV(CXXFLAGS, CONFIGURE_CXXFLAGS, SPECIFIED_CXXFLAGS)\nAC_LANG_PUSH([C++])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[[\n]], [[\n    return 0;\n]])],\n              [je_cv_cxxflags_added=$1]\n              AC_MSG_RESULT([yes]),\n              [je_cv_cxxflags_added=]\n              AC_MSG_RESULT([no])\n              [CONFIGURE_CXXFLAGS=\"${T_CONFIGURE_CXXFLAGS}\"]\n)\nAC_LANG_POP([C++])\nJE_CONCAT_VVV(CXXFLAGS, CONFIGURE_CXXFLAGS, SPECIFIED_CXXFLAGS)\n])\n\ndnl JE_COMPILABLE(label, hcode, mcode, rvar)\ndnl\ndnl Use AC_LINK_IFELSE() rather than AC_COMPILE_IFELSE() so that linker errors\ndnl cause failure.\nAC_DEFUN([JE_COMPILABLE],\n[\nAC_CACHE_CHECK([whether $1 is compilable],\n               [$4],\n               [AC_LINK_IFELSE([AC_LANG_PROGRAM([$2],\n                                                [$3])],\n                               [$4=yes],\n                               [$4=no])])\n])\n\ndnl ============================================================================\n\nCONFIG=`echo ${ac_configure_args} | sed -e 's#'\"'\"'\\([^ ]*\\)'\"'\"'#\\1#g'`\nAC_SUBST([CONFIG])\n\ndnl Library revision.\nrev=2\nAC_SUBST([rev])\n\nsrcroot=$srcdir\nif test \"x${srcroot}\" = \"x.\" ; then\n  srcroot=\"\"\nelse\n  srcroot=\"${srcroot}/\"\nfi\nAC_SUBST([srcroot])\nabs_srcroot=\"`cd \\\"${srcdir}\\\"; pwd`/\"\nAC_SUBST([abs_srcroot])\n\nobjroot=\"\"\nAC_SUBST([objroot])\nabs_objroot=\"`pwd`/\"\nAC_SUBST([abs_objroot])\n\ndnl Munge install path variables.\ncase \"$prefix\" in\n   *\\ * ) AC_MSG_ERROR([Prefix should not contain spaces]) ;;\n   \"NONE\" ) prefix=\"/usr/local\" ;;\nesac\ncase \"$exec_prefix\" in\n   *\\ * ) AC_MSG_ERROR([Exec prefix should not contain spaces]) ;;\n   \"NONE\" ) exec_prefix=$prefix ;;\nesac\nPREFIX=$prefix\nAC_SUBST([PREFIX])\nBINDIR=`eval echo $bindir`\nBINDIR=`eval echo $BINDIR`\nAC_SUBST([BINDIR])\nINCLUDEDIR=`eval echo $includedir`\nINCLUDEDIR=`eval echo $INCLUDEDIR`\nAC_SUBST([INCLUDEDIR])\nLIBDIR=`eval echo $libdir`\nLIBDIR=`eval echo $LIBDIR`\nAC_SUBST([LIBDIR])\nDATADIR=`eval echo $datadir`\nDATADIR=`eval echo $DATADIR`\nAC_SUBST([DATADIR])\nMANDIR=`eval echo $mandir`\nMANDIR=`eval echo $MANDIR`\nAC_SUBST([MANDIR])\n\ndnl Support for building documentation.\nAC_PATH_PROG([XSLTPROC], [xsltproc], [false], [$PATH])\nif test -d \"/usr/share/xml/docbook/stylesheet/docbook-xsl\" ; then\n  DEFAULT_XSLROOT=\"/usr/share/xml/docbook/stylesheet/docbook-xsl\"\nelif test -d \"/usr/share/sgml/docbook/xsl-stylesheets\" ; then\n  DEFAULT_XSLROOT=\"/usr/share/sgml/docbook/xsl-stylesheets\"\nelse\n  dnl Documentation building will fail if this default gets used.\n  DEFAULT_XSLROOT=\"\"\nfi\nAC_ARG_WITH([xslroot],\n  [AS_HELP_STRING([--with-xslroot=<path>], [XSL stylesheet root path])], [\nif test \"x$with_xslroot\" = \"xno\" ; then\n  XSLROOT=\"${DEFAULT_XSLROOT}\"\nelse\n  XSLROOT=\"${with_xslroot}\"\nfi\n],\n  XSLROOT=\"${DEFAULT_XSLROOT}\"\n)\nif test \"x$XSLTPROC\" = \"xfalse\" ; then\n  XSLROOT=\"\"\nfi\nAC_SUBST([XSLROOT])\n\ndnl If CFLAGS isn't defined, set CFLAGS to something reasonable.  Otherwise,\ndnl just prevent autoconf from molesting CFLAGS.\nCFLAGS=$CFLAGS\nAC_PROG_CC\n\nif test \"x$GCC\" != \"xyes\" ; then\n  AC_CACHE_CHECK([whether compiler is MSVC],\n                 [je_cv_msvc],\n                 [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],\n                                                     [\n#ifndef _MSC_VER\n  int fail[-1];\n#endif\n])],\n                               [je_cv_msvc=yes],\n                               [je_cv_msvc=no])])\nfi\n\ndnl check if a cray prgenv wrapper compiler is being used\nje_cv_cray_prgenv_wrapper=\"\"\nif test \"x${PE_ENV}\" != \"x\" ; then\n  case \"${CC}\" in\n    CC|cc)\n\tje_cv_cray_prgenv_wrapper=\"yes\"\n\t;;\n    *)\n       ;;\n  esac\nfi\n\nAC_CACHE_CHECK([whether compiler is cray],\n              [je_cv_cray],\n              [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],\n                                                  [\n#ifndef _CRAYC\n  int fail[-1];\n#endif\n])],\n                            [je_cv_cray=yes],\n                            [je_cv_cray=no])])\n\nif test \"x${je_cv_cray}\" = \"xyes\" ; then\n  AC_CACHE_CHECK([whether cray compiler version is 8.4],\n                [je_cv_cray_84],\n                [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],\n                                                      [\n#if !(_RELEASE_MAJOR == 8 && _RELEASE_MINOR == 4)\n  int fail[-1];\n#endif\n])],\n                              [je_cv_cray_84=yes],\n                              [je_cv_cray_84=no])])\nfi\n\nif test \"x$GCC\" = \"xyes\" ; then\n  JE_CFLAGS_ADD([-std=gnu11])\n  if test \"x$je_cv_cflags_added\" = \"x-std=gnu11\" ; then\n    AC_DEFINE_UNQUOTED([JEMALLOC_HAS_RESTRICT], [ ], [ ])\n  else\n    JE_CFLAGS_ADD([-std=gnu99])\n    if test \"x$je_cv_cflags_added\" = \"x-std=gnu99\" ; then\n      AC_DEFINE_UNQUOTED([JEMALLOC_HAS_RESTRICT], [ ], [ ])\n    fi\n  fi\n  JE_CFLAGS_ADD([-Werror=unknown-warning-option])\n  JE_CFLAGS_ADD([-Wall])\n  JE_CFLAGS_ADD([-Wextra])\n  JE_CFLAGS_ADD([-Wshorten-64-to-32])\n  JE_CFLAGS_ADD([-Wsign-compare])\n  JE_CFLAGS_ADD([-Wundef])\n  JE_CFLAGS_ADD([-Wno-format-zero-length])\n  JE_CFLAGS_ADD([-Wpointer-arith])\n  dnl This warning triggers on the use of the universal zero initializer, which\n  dnl is a very handy idiom for things like the tcache static initializer (which\n  dnl has lots of nested structs).  See the discussion at.\n  dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53119\n  JE_CFLAGS_ADD([-Wno-missing-braces])\n  dnl This one too.\n  JE_CFLAGS_ADD([-Wno-missing-field-initializers])\n  JE_CFLAGS_ADD([-Wno-missing-attributes])\n  JE_CFLAGS_ADD([-pipe])\n  JE_CFLAGS_ADD([-g3])\nelif test \"x$je_cv_msvc\" = \"xyes\" ; then\n  CC=\"$CC -nologo\"\n  JE_CFLAGS_ADD([-Zi])\n  JE_CFLAGS_ADD([-MT])\n  JE_CFLAGS_ADD([-W3])\n  JE_CFLAGS_ADD([-FS])\n  JE_APPEND_VS(CPPFLAGS, -I${srcdir}/include/msvc_compat)\nfi\nif test \"x$je_cv_cray\" = \"xyes\" ; then\n  dnl cray compiler 8.4 has an inlining bug\n  if test \"x$je_cv_cray_84\" = \"xyes\" ; then\n    JE_CFLAGS_ADD([-hipa2])\n    JE_CFLAGS_ADD([-hnognu])\n  fi\n  dnl ignore unreachable code warning\n  JE_CFLAGS_ADD([-hnomessage=128])\n  dnl ignore redefinition of \"malloc\", \"free\", etc warning\n  JE_CFLAGS_ADD([-hnomessage=1357])\nfi\nAC_SUBST([CONFIGURE_CFLAGS])\nAC_SUBST([SPECIFIED_CFLAGS])\nAC_SUBST([EXTRA_CFLAGS])\nAC_PROG_CPP\n\nAC_ARG_ENABLE([cxx],\n  [AS_HELP_STRING([--disable-cxx], [Disable C++ integration])],\nif test \"x$enable_cxx\" = \"xno\" ; then\n  enable_cxx=\"0\"\nelse\n  enable_cxx=\"1\"\nfi\n,\nenable_cxx=\"1\"\n)\nif test \"x$enable_cxx\" = \"x1\" ; then\n  dnl Require at least c++14, which is the first version to support sized\n  dnl deallocation.  C++ support is not compiled otherwise.\n  m4_include([m4/ax_cxx_compile_stdcxx.m4])\n  AX_CXX_COMPILE_STDCXX([17], [noext], [optional])\n  if test \"x${HAVE_CXX17}\" != \"x1\"; then\n    AX_CXX_COMPILE_STDCXX([14], [noext], [optional])\n  fi\n  if test \"x${HAVE_CXX14}\" = \"x1\" -o \"x${HAVE_CXX17}\" = \"x1\"; then\n    JE_CXXFLAGS_ADD([-Wall])\n    JE_CXXFLAGS_ADD([-Wextra])\n    JE_CXXFLAGS_ADD([-g3])\n\n    SAVED_LIBS=\"${LIBS}\"\n    JE_APPEND_VS(LIBS, -lstdc++)\n    JE_COMPILABLE([libstdc++ linkage], [\n#include <stdlib.h>\n], [[\n\tint *arr = (int *)malloc(sizeof(int) * 42);\n\tif (arr == NULL)\n\t\treturn 1;\n]], [je_cv_libstdcxx])\n    if test \"x${je_cv_libstdcxx}\" = \"xno\" ; then\n      LIBS=\"${SAVED_LIBS}\"\n    fi\n  else\n    enable_cxx=\"0\"\n  fi\nfi\nif test \"x$enable_cxx\" = \"x1\"; then\n  AC_DEFINE([JEMALLOC_ENABLE_CXX], [ ], [ ])\nfi\nAC_SUBST([enable_cxx])\nAC_SUBST([CONFIGURE_CXXFLAGS])\nAC_SUBST([SPECIFIED_CXXFLAGS])\nAC_SUBST([EXTRA_CXXFLAGS])\n\nAC_C_BIGENDIAN([ac_cv_big_endian=1], [ac_cv_big_endian=0])\nif test \"x${ac_cv_big_endian}\" = \"x1\" ; then\n  AC_DEFINE_UNQUOTED([JEMALLOC_BIG_ENDIAN], [ ], [ ])\nfi\n\nif test \"x${je_cv_msvc}\" = \"xyes\" -a \"x${ac_cv_header_inttypes_h}\" = \"xno\"; then\n  JE_APPEND_VS(CPPFLAGS, -I${srcdir}/include/msvc_compat/C99)\nfi\n\nif test \"x${je_cv_msvc}\" = \"xyes\" ; then\n  LG_SIZEOF_PTR=LG_SIZEOF_PTR_WIN\n  AC_MSG_RESULT([Using a predefined value for sizeof(void *): 4 for 32-bit, 8 for 64-bit])\nelse\n  AC_CHECK_SIZEOF([void *])\n  if test \"x${ac_cv_sizeof_void_p}\" = \"x8\" ; then\n    LG_SIZEOF_PTR=3\n  elif test \"x${ac_cv_sizeof_void_p}\" = \"x4\" ; then\n    LG_SIZEOF_PTR=2\n  else\n    AC_MSG_ERROR([Unsupported pointer size: ${ac_cv_sizeof_void_p}])\n  fi\nfi\nAC_DEFINE_UNQUOTED([LG_SIZEOF_PTR], [$LG_SIZEOF_PTR], [ ])\n\nAC_CHECK_SIZEOF([int])\nif test \"x${ac_cv_sizeof_int}\" = \"x8\" ; then\n  LG_SIZEOF_INT=3\nelif test \"x${ac_cv_sizeof_int}\" = \"x4\" ; then\n  LG_SIZEOF_INT=2\nelse\n  AC_MSG_ERROR([Unsupported int size: ${ac_cv_sizeof_int}])\nfi\nAC_DEFINE_UNQUOTED([LG_SIZEOF_INT], [$LG_SIZEOF_INT], [ ])\n\nAC_CHECK_SIZEOF([long])\nif test \"x${ac_cv_sizeof_long}\" = \"x8\" ; then\n  LG_SIZEOF_LONG=3\nelif test \"x${ac_cv_sizeof_long}\" = \"x4\" ; then\n  LG_SIZEOF_LONG=2\nelse\n  AC_MSG_ERROR([Unsupported long size: ${ac_cv_sizeof_long}])\nfi\nAC_DEFINE_UNQUOTED([LG_SIZEOF_LONG], [$LG_SIZEOF_LONG], [ ])\n\nAC_CHECK_SIZEOF([long long])\nif test \"x${ac_cv_sizeof_long_long}\" = \"x8\" ; then\n  LG_SIZEOF_LONG_LONG=3\nelif test \"x${ac_cv_sizeof_long_long}\" = \"x4\" ; then\n  LG_SIZEOF_LONG_LONG=2\nelse\n  AC_MSG_ERROR([Unsupported long long size: ${ac_cv_sizeof_long_long}])\nfi\nAC_DEFINE_UNQUOTED([LG_SIZEOF_LONG_LONG], [$LG_SIZEOF_LONG_LONG], [ ])\n\nAC_CHECK_SIZEOF([intmax_t])\nif test \"x${ac_cv_sizeof_intmax_t}\" = \"x16\" ; then\n  LG_SIZEOF_INTMAX_T=4\nelif test \"x${ac_cv_sizeof_intmax_t}\" = \"x8\" ; then\n  LG_SIZEOF_INTMAX_T=3\nelif test \"x${ac_cv_sizeof_intmax_t}\" = \"x4\" ; then\n  LG_SIZEOF_INTMAX_T=2\nelse\n  AC_MSG_ERROR([Unsupported intmax_t size: ${ac_cv_sizeof_intmax_t}])\nfi\nAC_DEFINE_UNQUOTED([LG_SIZEOF_INTMAX_T], [$LG_SIZEOF_INTMAX_T], [ ])\n\nAC_CANONICAL_HOST\ndnl CPU-specific settings.\nCPU_SPINWAIT=\"\"\ncase \"${host_cpu}\" in\n  i686|x86_64)\n\tHAVE_CPU_SPINWAIT=1\n\tif test \"x${je_cv_msvc}\" = \"xyes\" ; then\n\t    AC_CACHE_VAL([je_cv_pause_msvc],\n\t      [JE_COMPILABLE([pause instruction MSVC], [],\n\t\t\t\t\t[[_mm_pause(); return 0;]],\n\t\t\t\t\t[je_cv_pause_msvc])])\n\t    if test \"x${je_cv_pause_msvc}\" = \"xyes\" ; then\n\t\tCPU_SPINWAIT='_mm_pause()'\n\t    fi\n\telse\n\t    AC_CACHE_VAL([je_cv_pause],\n\t      [JE_COMPILABLE([pause instruction], [],\n\t\t\t\t\t[[__asm__ volatile(\"pause\"); return 0;]],\n\t\t\t\t\t[je_cv_pause])])\n\t    if test \"x${je_cv_pause}\" = \"xyes\" ; then\n\t\tCPU_SPINWAIT='__asm__ volatile(\"pause\")'\n\t    fi\n\tfi\n\t;;\n  aarch64|arm*)\n\tHAVE_CPU_SPINWAIT=1\n\tdnl isb is a better equivalent to the pause instruction on x86.\n\tAC_CACHE_VAL([je_cv_isb],\n\t  [JE_COMPILABLE([isb instruction], [],\n\t\t\t[[__asm__ volatile(\"isb\"); return 0;]],\n\t\t\t[je_cv_isb])])\n\tif test \"x${je_cv_isb}\" = \"xyes\" ; then\n\t    CPU_SPINWAIT='__asm__ volatile(\"isb\")'\n\tfi\n\t;;\n  *)\n\tHAVE_CPU_SPINWAIT=0\n\t;;\nesac\nAC_DEFINE_UNQUOTED([HAVE_CPU_SPINWAIT], [$HAVE_CPU_SPINWAIT], [ ])\nAC_DEFINE_UNQUOTED([CPU_SPINWAIT], [$CPU_SPINWAIT], [ ])\n\nAC_ARG_WITH([lg_vaddr],\n  [AS_HELP_STRING([--with-lg-vaddr=<lg-vaddr>], [Number of significant virtual address bits])],\n  [LG_VADDR=\"$with_lg_vaddr\"], [LG_VADDR=\"detect\"])\n\ncase \"${host_cpu}\" in\n  aarch64)\n    if test \"x$LG_VADDR\" = \"xdetect\"; then\n      AC_MSG_CHECKING([number of significant virtual address bits])\n      if test \"x${LG_SIZEOF_PTR}\" = \"x2\" ; then\n        #aarch64 ILP32\n        LG_VADDR=32\n      else\n        #aarch64 LP64\n        LG_VADDR=48\n      fi\n      AC_MSG_RESULT([$LG_VADDR])\n    fi\n    ;;\n  x86_64)\n    if test \"x$LG_VADDR\" = \"xdetect\"; then\n      AC_CACHE_CHECK([number of significant virtual address bits],\n                     [je_cv_lg_vaddr],\n                     AC_RUN_IFELSE([AC_LANG_PROGRAM(\n[[\n#include <stdio.h>\n#ifdef _WIN32\n#include <limits.h>\n#include <intrin.h>\ntypedef unsigned __int32 uint32_t;\n#else\n#include <stdint.h>\n#endif\n]], [[\n\tuint32_t r[[4]];\n\tuint32_t eax_in = 0x80000008U;\n#ifdef _WIN32\n\t__cpuid((int *)r, (int)eax_in);\n#else\n\tasm volatile (\"cpuid\"\n\t    : \"=a\" (r[[0]]), \"=b\" (r[[1]]), \"=c\" (r[[2]]), \"=d\" (r[[3]])\n\t    : \"a\" (eax_in), \"c\" (0)\n\t);\n#endif\n\tuint32_t eax_out = r[[0]];\n\tuint32_t vaddr = ((eax_out & 0x0000ff00U) >> 8);\n\tFILE *f = fopen(\"conftest.out\", \"w\");\n\tif (f == NULL) {\n\t\treturn 1;\n\t}\n\tif (vaddr > (sizeof(void *) << 3)) {\n\t\tvaddr = sizeof(void *) << 3;\n\t}\n\tfprintf(f, \"%u\", vaddr);\n\tfclose(f);\n\treturn 0;\n]])],\n                   [je_cv_lg_vaddr=`cat conftest.out`],\n                   [je_cv_lg_vaddr=error],\n                   [je_cv_lg_vaddr=57]))\n      if test \"x${je_cv_lg_vaddr}\" != \"x\" ; then\n        LG_VADDR=\"${je_cv_lg_vaddr}\"\n      fi\n      if test \"x${LG_VADDR}\" != \"xerror\" ; then\n        AC_DEFINE_UNQUOTED([LG_VADDR], [$LG_VADDR], [ ])\n      else\n        AC_MSG_ERROR([cannot determine number of significant virtual address bits])\n      fi\n      AC_CACHE_CHECK([rdtscp support],\n\t\t     [je_cv_rdtscp],\n\t\t     AC_RUN_IFELSE([AC_LANG_PROGRAM(\n[[\n#include <stdint.h>\n]],\n[[\n      unsigned int dx;\n      asm volatile(\"rdtscp\" : \"=d\"(dx) ::);\n      return 0;\n]])],\n      [je_cv_rdtscp=yes],\n      [je_cv_rdtscp=no],\n      [je_cv_rdtscp=no]))\n      if test \"x${je_cv_rdtscp}\" = \"xyes\"; then\n        AC_DEFINE([JEMALLOC_HAVE_RDTSCP], [ ], [ ])\n      fi\n    fi\n    ;;\n  *)\n    if test \"x$LG_VADDR\" = \"xdetect\"; then\n      AC_MSG_CHECKING([number of significant virtual address bits])\n      if test \"x${LG_SIZEOF_PTR}\" = \"x3\" ; then\n        LG_VADDR=64\n      elif test \"x${LG_SIZEOF_PTR}\" = \"x2\" ; then\n        LG_VADDR=32\n      elif test \"x${LG_SIZEOF_PTR}\" = \"xLG_SIZEOF_PTR_WIN\" ; then\n        LG_VADDR=\"(1U << (LG_SIZEOF_PTR_WIN+3))\"\n      else\n        AC_MSG_ERROR([Unsupported lg(pointer size): ${LG_SIZEOF_PTR}])\n      fi\n      AC_MSG_RESULT([$LG_VADDR])\n    fi\n    ;;\nesac\nAC_DEFINE_UNQUOTED([LG_VADDR], [$LG_VADDR], [ ])\nAC_CACHE_CHECK([asm volatile support],\n               [je_cv_asm_volatile],\n               AC_RUN_IFELSE([AC_LANG_PROGRAM(\n[[\n]],\n[[\n      void* ptr;\n      asm volatile(\"\" : \"+r\"(ptr));\n      return 0;\n]])],\n[je_cv_asm_volatile=yes],\n[je_cv_asm_volatile=no],\n[je_cv_asm_volatile=no]))\nif test \"x${je_cv_asm_volatile}\" = \"xyes\"; then\n  AC_DEFINE([JEMALLOC_HAVE_ASM_VOLATILE], [ ], [ ])\nfi\nAC_CACHE_CHECK([__int128 support],\n               [je_cv_int128],\n               AC_RUN_IFELSE([AC_LANG_PROGRAM(\n[[\n]],\n[[\n      __int128 temp = 0;\n      return temp;\n]])],\n[je_cv_int128=yes],\n[je_cv_int128=no],\n[je_cv_int128=no]))\nif test \"x${je_cv_int128}\" = \"xyes\"; then\n  AC_DEFINE([JEMALLOC_HAVE_INT128], [ ], [ ])\nfi\n\nLD_PRELOAD_VAR=\"LD_PRELOAD\"\nso=\"so\"\nimportlib=\"${so}\"\no=\"$ac_objext\"\na=\"a\"\nexe=\"$ac_exeext\"\nlibprefix=\"lib\"\nlink_whole_archive=\"0\"\nDSO_LDFLAGS='-shared -Wl,-soname,$(@F)'\nRPATH='-Wl,-rpath,$(1)'\nSOREV=\"${so}.${rev}\"\nPIC_CFLAGS='-fPIC -DPIC'\nCTARGET='-o $@'\nLDTARGET='-o $@'\nTEST_LD_MODE=\nEXTRA_LDFLAGS=\nARFLAGS='crus'\nAROUT=' $@'\nCC_MM=1\n\nif test \"x$je_cv_cray_prgenv_wrapper\" = \"xyes\" ; then\n  TEST_LD_MODE='-dynamic'\nfi\n\nif test \"x${je_cv_cray}\" = \"xyes\" ; then\n  CC_MM=\nfi\n\nAN_MAKEVAR([AR], [AC_PROG_AR])\nAN_PROGRAM([ar], [AC_PROG_AR])\nAC_DEFUN([AC_PROG_AR], [AC_CHECK_TOOL(AR, ar, :)])\nAC_PROG_AR\n\nAN_MAKEVAR([NM], [AC_PROG_NM])\nAN_PROGRAM([nm], [AC_PROG_NM])\nAC_DEFUN([AC_PROG_NM], [AC_CHECK_TOOL(NM, nm, :)])\nAC_PROG_NM\n\nAC_PROG_AWK\n\ndnl ============================================================================\ndnl jemalloc version.\ndnl\n\nAC_ARG_WITH([version],\n  [AS_HELP_STRING([--with-version=<major>.<minor>.<bugfix>-<nrev>-g<gid>],\n   [Version string])],\n  [\n    echo \"${with_version}\" | grep ['^[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+-[0-9]\\+-g[0-9a-f]\\+$'] 2>&1 1>/dev/null\n    if test $? -eq 0 ; then\n      echo \"$with_version\" > \"${objroot}VERSION\"\n    else\n      echo \"${with_version}\" | grep ['^VERSION$'] 2>&1 1>/dev/null\n      if test $? -ne 0 ; then\n        AC_MSG_ERROR([${with_version} does not match <major>.<minor>.<bugfix>-<nrev>-g<gid> or VERSION])\n      fi\n    fi\n  ], [\n    dnl Set VERSION if source directory is inside a git repository.\n    if test \"x`test ! \\\"${srcroot}\\\" && cd \\\"${srcroot}\\\"; git rev-parse --is-inside-work-tree 2>/dev/null`\" = \"xtrue\" ; then\n      dnl Pattern globs aren't powerful enough to match both single- and\n      dnl double-digit version numbers, so iterate over patterns to support up\n      dnl to version 99.99.99 without any accidental matches.\n      for pattern in ['[0-9].[0-9].[0-9]' '[0-9].[0-9].[0-9][0-9]' \\\n                     '[0-9].[0-9][0-9].[0-9]' '[0-9].[0-9][0-9].[0-9][0-9]' \\\n                     '[0-9][0-9].[0-9].[0-9]' '[0-9][0-9].[0-9].[0-9][0-9]' \\\n                     '[0-9][0-9].[0-9][0-9].[0-9]' \\\n                     '[0-9][0-9].[0-9][0-9].[0-9][0-9]']; do\n        (test ! \"${srcroot}\" && cd \"${srcroot}\"; git describe --long --abbrev=40 --match=\"${pattern}\") > \"${objroot}VERSION.tmp\" 2>/dev/null\n        if test $? -eq 0 ; then\n          mv \"${objroot}VERSION.tmp\" \"${objroot}VERSION\"\n          break\n        fi\n      done\n    fi\n    rm -f \"${objroot}VERSION.tmp\"\n  ])\n\nif test ! -e \"${objroot}VERSION\" ; then\n  if test ! -e \"${srcroot}VERSION\" ; then\n    AC_MSG_RESULT(\n      [Missing VERSION file, and unable to generate it; creating bogus VERSION])\n    echo \"0.0.0-0-g000000missing_version_try_git_fetch_tags\" > \"${objroot}VERSION\"\n  else\n    cp ${srcroot}VERSION ${objroot}VERSION\n  fi\nfi\njemalloc_version=`cat \"${objroot}VERSION\"`\njemalloc_version_major=`echo ${jemalloc_version} | tr \".g-\" \" \" | awk '{print [$]1}'`\njemalloc_version_minor=`echo ${jemalloc_version} | tr \".g-\" \" \" | awk '{print [$]2}'`\njemalloc_version_bugfix=`echo ${jemalloc_version} | tr \".g-\" \" \" | awk '{print [$]3}'`\njemalloc_version_nrev=`echo ${jemalloc_version} | tr \".g-\" \" \" | awk '{print [$]4}'`\njemalloc_version_gid=`echo ${jemalloc_version} | tr \".g-\" \" \" | awk '{print [$]5}'`\nAC_SUBST([jemalloc_version])\nAC_SUBST([jemalloc_version_major])\nAC_SUBST([jemalloc_version_minor])\nAC_SUBST([jemalloc_version_bugfix])\nAC_SUBST([jemalloc_version_nrev])\nAC_SUBST([jemalloc_version_gid])\n\ndnl Platform-specific settings.  abi and RPATH can probably be determined\ndnl programmatically, but doing so is error-prone, which makes it generally\ndnl not worth the trouble.\ndnl\ndnl Define cpp macros in CPPFLAGS, rather than doing AC_DEFINE(macro), since the\ndnl definitions need to be seen before any headers are included, which is a pain\ndnl to make happen otherwise.\ndefault_retain=\"0\"\nzero_realloc_default_free=\"0\"\nmaps_coalesce=\"1\"\nDUMP_SYMS=\"${NM} -a\"\nSYM_PREFIX=\"\"\ncase \"${host}\" in\n  *-*-darwin* | *-*-ios*)\n\tabi=\"macho\"\n\tRPATH=\"\"\n\tLD_PRELOAD_VAR=\"DYLD_INSERT_LIBRARIES\"\n\tso=\"dylib\"\n\timportlib=\"${so}\"\n\tforce_tls=\"0\"\n\tDSO_LDFLAGS='-shared -Wl,-install_name,$(LIBDIR)/$(@F)'\n\tSOREV=\"${rev}.${so}\"\n\tsbrk_deprecated=\"1\"\n\tSYM_PREFIX=\"_\"\n\tif test \"${LG_SIZEOF_PTR}\" = \"3\"; then\n\t  default_retain=\"1\"\n\tfi\n\t;;\n  *-*-freebsd*)\n\tJE_APPEND_VS(CPPFLAGS, -D_BSD_SOURCE)\n\tabi=\"elf\"\n\tAC_DEFINE([JEMALLOC_SYSCTL_VM_OVERCOMMIT], [ ], [ ])\n\tforce_lazy_lock=\"1\"\n\t;;\n  *-*-dragonfly*)\n\tabi=\"elf\"\n\t;;\n  *-*-openbsd*)\n\tabi=\"elf\"\n\tforce_tls=\"0\"\n\t;;\n  *-*-bitrig*)\n\tabi=\"elf\"\n\t;;\n  *-*-linux-android*)\n\tdnl syscall(2) and secure_getenv(3) are exposed by _GNU_SOURCE.\n\tJE_APPEND_VS(CPPFLAGS, -D_GNU_SOURCE)\n\tabi=\"elf\"\n\tglibc=\"0\"\n\tAC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED_ZEROS], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_HAS_ALLOCA_H], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_THREADED_INIT], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_C11_ATOMICS], [ ], [ ])\n\tforce_tls=\"0\"\n\tif test \"${LG_SIZEOF_PTR}\" = \"3\"; then\n\t  default_retain=\"1\"\n\tfi\n\tzero_realloc_default_free=\"1\"\n\t;;\n  *-*-linux-musl*)\n\tdnl syscall(2) and secure_getenv(3) are exposed by _GNU_SOURCE.\n\tJE_APPEND_VS(CPPFLAGS, -D_GNU_SOURCE)\n\tabi=\"elf\"\n\tAC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED_ZEROS], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_HAS_ALLOCA_H], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_THREADED_INIT], [ ], [ ])\n\tif test \"${LG_SIZEOF_PTR}\" = \"3\"; then\n\t  default_retain=\"1\"\n\tfi\n\tzero_realloc_default_free=\"1\"\n\t;;\n  *-*-linux*)\n\tdnl syscall(2) and secure_getenv(3) are exposed by _GNU_SOURCE.\n\tJE_APPEND_VS(CPPFLAGS, -D_GNU_SOURCE)\n\tabi=\"elf\"\n\tglibc=\"1\"\n\tAC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED_ZEROS], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_HAS_ALLOCA_H], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_PROC_SYS_VM_OVERCOMMIT_MEMORY], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_THREADED_INIT], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_USE_CXX_THROW], [ ], [ ])\n\tif test \"${LG_SIZEOF_PTR}\" = \"3\"; then\n\t  default_retain=\"1\"\n\tfi\n\tzero_realloc_default_free=\"1\"\n\t;;\n  *-*-kfreebsd*)\n\tdnl syscall(2) and secure_getenv(3) are exposed by _GNU_SOURCE.\n\tJE_APPEND_VS(CPPFLAGS, -D_GNU_SOURCE)\n\tabi=\"elf\"\n\tAC_DEFINE([JEMALLOC_HAS_ALLOCA_H], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_SYSCTL_VM_OVERCOMMIT], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_THREADED_INIT], [ ], [ ])\n\tAC_DEFINE([JEMALLOC_USE_CXX_THROW], [ ], [ ])\n\t;;\n  *-*-netbsd*)\n\tAC_MSG_CHECKING([ABI])\n        AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[[#ifdef __ELF__\n/* ELF */\n#else\n#error aout\n#endif\n]])],\n                          [abi=\"elf\"],\n                          [abi=\"aout\"])\n\tAC_MSG_RESULT([$abi])\n\t;;\n  *-*-solaris2*)\n\tabi=\"elf\"\n\tRPATH='-Wl,-R,$(1)'\n\tdnl Solaris needs this for sigwait().\n\tJE_APPEND_VS(CPPFLAGS, -D_POSIX_PTHREAD_SEMANTICS)\n\tJE_APPEND_VS(LIBS, -lposix4 -lsocket -lnsl)\n\t;;\n  *-ibm-aix*)\n\tif test \"${LG_SIZEOF_PTR}\" = \"3\"; then\n\t  dnl 64bit AIX\n\t  LD_PRELOAD_VAR=\"LDR_PRELOAD64\"\n\telse\n\t  dnl 32bit AIX\n\t  LD_PRELOAD_VAR=\"LDR_PRELOAD\"\n\tfi\n\tabi=\"xcoff\"\n\t;;\n  *-*-mingw* | *-*-cygwin*)\n\tabi=\"pecoff\"\n\tforce_tls=\"0\"\n\tmaps_coalesce=\"0\"\n\tRPATH=\"\"\n\tso=\"dll\"\n\tif test \"x$je_cv_msvc\" = \"xyes\" ; then\n\t  importlib=\"lib\"\n\t  DSO_LDFLAGS=\"-LD\"\n\t  EXTRA_LDFLAGS=\"-link -DEBUG\"\n\t  CTARGET='-Fo$@'\n\t  LDTARGET='-Fe$@'\n\t  AR='lib'\n\t  ARFLAGS='-nologo -out:'\n\t  AROUT='$@'\n\t  CC_MM=\n        else\n\t  importlib=\"${so}\"\n\t  DSO_LDFLAGS=\"-shared\"\n\t  link_whole_archive=\"1\"\n\tfi\n\tcase \"${host}\" in\n\t  *-*-cygwin*)\n\t    DUMP_SYMS=\"dumpbin /SYMBOLS\"\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\ta=\"lib\"\n\tlibprefix=\"\"\n\tSOREV=\"${so}\"\n\tPIC_CFLAGS=\"\"\n\tif test \"${LG_SIZEOF_PTR}\" = \"3\"; then\n\t  default_retain=\"1\"\n\tfi\n\tzero_realloc_default_free=\"1\"\n\t;;\n  *-*-nto-qnx)\n\tabi=\"elf\"\n  force_tls=\"0\"\n  AC_DEFINE([JEMALLOC_HAS_ALLOCA_H], [ ], [ ])\n\t;;\n  *)\n\tAC_MSG_RESULT([Unsupported operating system: ${host}])\n\tabi=\"elf\"\n\t;;\nesac\n\nJEMALLOC_USABLE_SIZE_CONST=const\nAC_CHECK_HEADERS([malloc.h], [\n  AC_MSG_CHECKING([whether malloc_usable_size definition can use const argument])\n  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n    [#include <malloc.h>\n     #include <stddef.h>\n    size_t malloc_usable_size(const void *ptr);\n    ],\n    [])],[\n                AC_MSG_RESULT([yes])\n         ],[\n                JEMALLOC_USABLE_SIZE_CONST=\n                AC_MSG_RESULT([no])\n         ])\n])\nAC_DEFINE_UNQUOTED([JEMALLOC_USABLE_SIZE_CONST], [$JEMALLOC_USABLE_SIZE_CONST], [ ])\nAC_SUBST([abi])\nAC_SUBST([RPATH])\nAC_SUBST([LD_PRELOAD_VAR])\nAC_SUBST([so])\nAC_SUBST([importlib])\nAC_SUBST([o])\nAC_SUBST([a])\nAC_SUBST([exe])\nAC_SUBST([libprefix])\nAC_SUBST([link_whole_archive])\nAC_SUBST([DSO_LDFLAGS])\nAC_SUBST([EXTRA_LDFLAGS])\nAC_SUBST([SOREV])\nAC_SUBST([PIC_CFLAGS])\nAC_SUBST([CTARGET])\nAC_SUBST([LDTARGET])\nAC_SUBST([TEST_LD_MODE])\nAC_SUBST([MKLIB])\nAC_SUBST([ARFLAGS])\nAC_SUBST([AROUT])\nAC_SUBST([DUMP_SYMS])\nAC_SUBST([CC_MM])\n\ndnl Determine whether libm must be linked to use e.g. log(3).\n\n# On MSVC, log is an intrinsic that doesn't require libm. However,\n# AC_SEARCH_LIBS does not successfully detect this, as it will try to compile\n# a program using the wrong signature for log. Newer versions of MSVC CL detects\n# this and rejects the program with the following messages.\n#\n# conftest.c(40): warning C4391: 'char log()': incorrect return type for intrinsic function, expected 'double'\n# conftest.c(44): error C2168: 'log': too few actual parameters for intrinsic function\n#\n# Since log is always available on MSVC (it's been around since the dawn of\n# time), we simply always assume it's there if MSVC is detected.\nif test \"x$je_cv_msvc\" = \"xyes\" ; then\n  LM=\nelse\n  AC_SEARCH_LIBS([log], [m], , [AC_MSG_ERROR([Missing math functions])])\n    if test \"x$ac_cv_search_log\" != \"xnone required\" ; then\n      LM=\"$ac_cv_search_log\"\n    else\n      LM=\n    fi\nfi\nAC_SUBST(LM)\n\nJE_COMPILABLE([__attribute__ syntax],\n              [static __attribute__((unused)) void foo(void){}],\n              [],\n              [je_cv_attribute])\nif test \"x${je_cv_attribute}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR], [ ], [ ])\n  if test \"x${GCC}\" = \"xyes\" -a \"x${abi}\" = \"xelf\"; then\n    JE_CFLAGS_ADD([-fvisibility=hidden])\n    JE_CXXFLAGS_ADD([-fvisibility=hidden])\n  fi\nfi\ndnl Check for tls_model attribute support (clang 3.0 still lacks support).\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Werror])\nJE_CFLAGS_ADD([-herror_on_warning])\nJE_COMPILABLE([tls_model attribute], [],\n              [static __thread int\n               __attribute__((tls_model(\"initial-exec\"), unused)) foo;\n               foo = 0;],\n              [je_cv_tls_model])\nJE_CFLAGS_RESTORE()\ndnl (Setting of JEMALLOC_TLS_MODEL is done later, after we've checked for\ndnl --disable-initial-exec-tls)\n\ndnl Check for alloc_size attribute support.\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Werror])\nJE_CFLAGS_ADD([-herror_on_warning])\nJE_COMPILABLE([alloc_size attribute], [#include <stdlib.h>],\n              [void *foo(size_t size) __attribute__((alloc_size(1)));],\n              [je_cv_alloc_size])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_alloc_size}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR_ALLOC_SIZE], [ ], [ ])\nfi\ndnl Check for format(gnu_printf, ...) attribute support.\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Werror])\nJE_CFLAGS_ADD([-herror_on_warning])\nJE_COMPILABLE([format(gnu_printf, ...) attribute], [#include <stdlib.h>],\n              [void *foo(const char *format, ...) __attribute__((format(gnu_printf, 1, 2)));],\n              [je_cv_format_gnu_printf])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_format_gnu_printf}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF], [ ], [ ])\nfi\ndnl Check for format(printf, ...) attribute support.\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Werror])\nJE_CFLAGS_ADD([-herror_on_warning])\nJE_COMPILABLE([format(printf, ...) attribute], [#include <stdlib.h>],\n              [void *foo(const char *format, ...) __attribute__((format(printf, 1, 2)));],\n              [je_cv_format_printf])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_format_printf}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR_FORMAT_PRINTF], [ ], [ ])\nfi\n\ndnl Check for format_arg(...) attribute support.\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Werror])\nJE_CFLAGS_ADD([-herror_on_warning])\nJE_COMPILABLE([format(printf, ...) attribute], [#include <stdlib.h>],\n              [const char * __attribute__((__format_arg__(1))) foo(const char *format);],\n              [je_cv_format_arg])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_format_arg}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR_FORMAT_ARG], [ ], [ ])\nfi\n\ndnl Check for fallthrough attribute support.\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Wimplicit-fallthrough])\nJE_COMPILABLE([fallthrough attribute],\n              [#if !__has_attribute(fallthrough)\n               #error \"foo\"\n               #endif],\n              [int x = 0;\n               switch (x) {\n               case 0: __attribute__((__fallthrough__));\n               case 1: return 1;\n               }],\n              [je_cv_fallthrough])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_fallthrough}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR_FALLTHROUGH], [ ], [ ])\n  JE_CFLAGS_ADD([-Wimplicit-fallthrough])\n  JE_CXXFLAGS_ADD([-Wimplicit-fallthrough])\nfi\n\ndnl Check for cold attribute support.\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Werror])\nJE_CFLAGS_ADD([-herror_on_warning])\nJE_COMPILABLE([cold attribute], [],\n              [__attribute__((__cold__)) void foo();],\n              [je_cv_cold])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_cold}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR_COLD], [ ], [ ])\nfi\n\ndnl Check for deprecated attribute support.\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-Wdeprecated-declarations])\nJE_COMPILABLE([deprecated attribute],\n              [#if !__has_attribute(deprecated)\n               #error \"deprecated attribute not supported\"\n               #endif\n               struct has_deprecated_field {\n                   int good;\n                   int __attribute__((deprecated(\"Do not use\"))) bad;\n               };\n              ],\n              [struct has_deprecated_field instance;\n               instance.good = 0;\n               instance.bad = 1;\n              ],\n              [je_cv_deprecated])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_deprecated}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ATTR_DEPRECATED], [ ], [ ])\n  JE_CFLAGS_ADD([-Wdeprecated-declarations])\n  JE_CXXFLAGS_ADD([-Wdeprecated-declarations])\nfi\n\ndnl Check for VM_MAKE_TAG for mmap support.\nJE_COMPILABLE([vm_make_tag],\n\t      [#include <sys/mman.h>\n\t       #include <mach/vm_statistics.h>],\n\t      [void *p;\n\t       p = mmap(0, 16, PROT_READ, MAP_ANON|MAP_PRIVATE, VM_MAKE_TAG(1), 0);\n\t       munmap(p, 16);],\n\t      [je_cv_vm_make_tag])\nif test \"x${je_cv_vm_make_tag}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_VM_MAKE_TAG], [ ], [ ])\nfi\n\ndnl Support optional additions to rpath.\nAC_ARG_WITH([rpath],\n  [AS_HELP_STRING([--with-rpath=<rpath>], [Colon-separated rpath (ELF systems only)])],\nif test \"x$with_rpath\" = \"xno\" ; then\n  RPATH_EXTRA=\nelse\n  RPATH_EXTRA=\"`echo $with_rpath | tr \\\":\\\" \\\" \\\"`\"\nfi,\n  RPATH_EXTRA=\n)\nAC_SUBST([RPATH_EXTRA])\n\ndnl Disable rules that do automatic regeneration of configure output by default.\nAC_ARG_ENABLE([autogen],\n  [AS_HELP_STRING([--enable-autogen], [Automatically regenerate configure output])],\nif test \"x$enable_autogen\" = \"xno\" ; then\n  enable_autogen=\"0\"\nelse\n  enable_autogen=\"1\"\nfi\n,\nenable_autogen=\"0\"\n)\nAC_SUBST([enable_autogen])\n\nAC_PROG_INSTALL\nAC_PROG_RANLIB\nAC_PATH_PROG([LD], [ld], [false], [$PATH])\nAC_PATH_PROG([AUTOCONF], [autoconf], [false], [$PATH])\n\ndnl Enable documentation\nAC_ARG_ENABLE([doc],\n\t      [AS_HELP_STRING([--enable-doc], [Build documentation])],\nif test \"x$enable_doc\" = \"xno\" ; then\n  enable_doc=\"0\"\nelse\n  enable_doc=\"1\"\nfi\n,\nenable_doc=\"1\"\n)\nAC_SUBST([enable_doc])\n\ndnl Enable shared libs\nAC_ARG_ENABLE([shared],\n  [AS_HELP_STRING([--enable-shared], [Build shared libaries])],\nif test \"x$enable_shared\" = \"xno\" ; then\n  enable_shared=\"0\"\nelse\n  enable_shared=\"1\"\nfi\n,\nenable_shared=\"1\"\n)\nAC_SUBST([enable_shared])\n\ndnl Enable static libs\nAC_ARG_ENABLE([static],\n  [AS_HELP_STRING([--enable-static], [Build static libaries])],\nif test \"x$enable_static\" = \"xno\" ; then\n  enable_static=\"0\"\nelse\n  enable_static=\"1\"\nfi\n,\nenable_static=\"1\"\n)\nAC_SUBST([enable_static])\n\nif test \"$enable_shared$enable_static\" = \"00\" ; then\n  AC_MSG_ERROR([Please enable one of shared or static builds])\nfi\n\ndnl Perform no name mangling by default.\nAC_ARG_WITH([mangling],\n  [AS_HELP_STRING([--with-mangling=<map>], [Mangle symbols in <map>])],\n  [mangling_map=\"$with_mangling\"], [mangling_map=\"\"])\n\ndnl Do not prefix public APIs by default.\nAC_ARG_WITH([jemalloc_prefix],\n  [AS_HELP_STRING([--with-jemalloc-prefix=<prefix>], [Prefix to prepend to all public APIs])],\n  [JEMALLOC_PREFIX=\"$with_jemalloc_prefix\"],\n  [if test \"x$abi\" != \"xmacho\" -a \"x$abi\" != \"xpecoff\"; then\n  JEMALLOC_PREFIX=\"\"\nelse\n  JEMALLOC_PREFIX=\"je_\"\nfi]\n)\nif test \"x$JEMALLOC_PREFIX\" = \"x\" ; then\n  AC_DEFINE([JEMALLOC_IS_MALLOC], [ ], [ ])\nelse\n  JEMALLOC_CPREFIX=`echo ${JEMALLOC_PREFIX} | tr \"a-z\" \"A-Z\"`\n  AC_DEFINE_UNQUOTED([JEMALLOC_PREFIX], [\"$JEMALLOC_PREFIX\"], [ ])\n  AC_DEFINE_UNQUOTED([JEMALLOC_CPREFIX], [\"$JEMALLOC_CPREFIX\"], [ ])\nfi\nAC_SUBST([JEMALLOC_PREFIX])\nAC_SUBST([JEMALLOC_CPREFIX])\n\nAC_ARG_WITH([export],\n  [AS_HELP_STRING([--without-export], [disable exporting jemalloc public APIs])],\n  [if test \"x$with_export\" = \"xno\"; then\n  AC_DEFINE([JEMALLOC_EXPORT], [ ], [ ])\nfi]\n)\n\npublic_syms=\"aligned_alloc calloc dallocx free free_sized free_aligned_sized mallctl mallctlbymib mallctlnametomib malloc malloc_conf malloc_conf_2_conf_harder malloc_message malloc_stats_print malloc_usable_size mallocx smallocx_${jemalloc_version_gid} nallocx posix_memalign rallocx realloc sallocx sdallocx xallocx\"\ndnl Check for additional platform-specific public API functions.\nAC_CHECK_FUNC([memalign],\n\t      [AC_DEFINE([JEMALLOC_OVERRIDE_MEMALIGN], [ ], [ ])\n\t       public_syms=\"${public_syms} memalign\"])\nAC_CHECK_FUNC([valloc],\n\t      [AC_DEFINE([JEMALLOC_OVERRIDE_VALLOC], [ ], [ ])\n\t       public_syms=\"${public_syms} valloc\"])\nAC_CHECK_FUNC([pvalloc],\n\t      [AC_DEFINE([JEMALLOC_OVERRIDE_PVALLOC], [ ], [ ])\n\t       public_syms=\"${public_syms} pvalloc\"])\nAC_CHECK_FUNC([malloc_size],\n\t      [AC_DEFINE([JEMALLOC_HAVE_MALLOC_SIZE], [ ], [ ])\n\t       public_syms=\"${public_syms} malloc_size\"])\n\ndnl Check for allocator-related functions that should be wrapped.\nwrap_syms=\nif test \"x${JEMALLOC_PREFIX}\" = \"x\" ; then\n  AC_CHECK_FUNC([__libc_calloc],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_CALLOC], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_calloc\"])\n  AC_CHECK_FUNC([__libc_free],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_FREE], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_free\"])\n  dnl __libc_free_sized and __libc_free_aligned_sized are here speculatively\n  dnl under the assumption that glibc will eventually define symbols with these\n  dnl names. In the event glibc chooses different names for these symbols,\n  dnl these will need to be amended to match.\n  AC_CHECK_FUNC([__libc_free_sized],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_FREE_SIZED], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_free_sized\"])\n  AC_CHECK_FUNC([__libc_free_aligned_sized],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_FREE_ALIGNED_SIZED], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_free_aligned_sized\"])\n  AC_CHECK_FUNC([__libc_malloc],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_MALLOC], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_malloc\"])\n  AC_CHECK_FUNC([__libc_memalign],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_MEMALIGN], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_memalign\"])\n  AC_CHECK_FUNC([__libc_realloc],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_REALLOC], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_realloc\"])\n  AC_CHECK_FUNC([__libc_valloc],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_VALLOC], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_valloc\"])\n  AC_CHECK_FUNC([__libc_pvalloc],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___LIBC_PVALLOC], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __libc_pvalloc\"])\n  AC_CHECK_FUNC([__posix_memalign],\n\t\t[AC_DEFINE([JEMALLOC_OVERRIDE___POSIX_MEMALIGN], [ ], [ ])\n\t\t wrap_syms=\"${wrap_syms} __posix_memalign\"])\nfi\n\ncase \"${host}\" in\n  *-*-mingw* | *-*-cygwin*)\n    wrap_syms=\"${wrap_syms} tls_callback\"\n    ;;\n  *)\n    ;;\nesac\n\ndnl Mangle library-private APIs.\nAC_ARG_WITH([private_namespace],\n  [AS_HELP_STRING([--with-private-namespace=<prefix>], [Prefix to prepend to all library-private APIs])],\n  [JEMALLOC_PRIVATE_NAMESPACE=\"${with_private_namespace}je_\"],\n  [JEMALLOC_PRIVATE_NAMESPACE=\"je_\"]\n)\nAC_DEFINE_UNQUOTED([JEMALLOC_PRIVATE_NAMESPACE], [$JEMALLOC_PRIVATE_NAMESPACE], [ ])\nprivate_namespace=\"$JEMALLOC_PRIVATE_NAMESPACE\"\nAC_SUBST([private_namespace])\n\ndnl Do not add suffix to installed files by default.\nAC_ARG_WITH([install_suffix],\n  [AS_HELP_STRING([--with-install-suffix=<suffix>], [Suffix to append to all installed files])],\n  [case \"$with_install_suffix\" in\n   *\\ * ) AC_MSG_ERROR([Install suffix should not contain spaces]) ;;\n   * ) INSTALL_SUFFIX=\"$with_install_suffix\" ;;\nesac],\n  [INSTALL_SUFFIX=]\n)\ninstall_suffix=\"$INSTALL_SUFFIX\"\nAC_SUBST([install_suffix])\n\ndnl Specify default malloc_conf.\nAC_ARG_WITH([malloc_conf],\n  [AS_HELP_STRING([--with-malloc-conf=<malloc_conf>], [config.malloc_conf options string])],\n  [JEMALLOC_CONFIG_MALLOC_CONF=\"$with_malloc_conf\"],\n  [JEMALLOC_CONFIG_MALLOC_CONF=\"\"]\n)\nconfig_malloc_conf=\"$JEMALLOC_CONFIG_MALLOC_CONF\"\nAC_DEFINE_UNQUOTED([JEMALLOC_CONFIG_MALLOC_CONF], [\"$config_malloc_conf\"], [ ])\n\ndnl Substitute @je_@ in jemalloc_protos.h.in, primarily to make generation of\ndnl jemalloc_protos_jet.h easy.\nje_=\"je_\"\nAC_SUBST([je_])\n\ncfgoutputs_in=\"Makefile.in\"\ncfgoutputs_in=\"${cfgoutputs_in} jemalloc.pc.in\"\ncfgoutputs_in=\"${cfgoutputs_in} doc/html.xsl.in\"\ncfgoutputs_in=\"${cfgoutputs_in} doc/manpages.xsl.in\"\ncfgoutputs_in=\"${cfgoutputs_in} doc/jemalloc.xml.in\"\ncfgoutputs_in=\"${cfgoutputs_in} include/jemalloc/jemalloc_macros.h.in\"\ncfgoutputs_in=\"${cfgoutputs_in} include/jemalloc/jemalloc_protos.h.in\"\ncfgoutputs_in=\"${cfgoutputs_in} include/jemalloc/jemalloc_typedefs.h.in\"\ncfgoutputs_in=\"${cfgoutputs_in} include/jemalloc/internal/jemalloc_preamble.h.in\"\ncfgoutputs_in=\"${cfgoutputs_in} test/test.sh.in\"\ncfgoutputs_in=\"${cfgoutputs_in} test/include/test/jemalloc_test.h.in\"\n\ncfgoutputs_out=\"Makefile\"\ncfgoutputs_out=\"${cfgoutputs_out} jemalloc.pc\"\ncfgoutputs_out=\"${cfgoutputs_out} doc/html.xsl\"\ncfgoutputs_out=\"${cfgoutputs_out} doc/manpages.xsl\"\ncfgoutputs_out=\"${cfgoutputs_out} doc/jemalloc.xml\"\ncfgoutputs_out=\"${cfgoutputs_out} include/jemalloc/jemalloc_macros.h\"\ncfgoutputs_out=\"${cfgoutputs_out} include/jemalloc/jemalloc_protos.h\"\ncfgoutputs_out=\"${cfgoutputs_out} include/jemalloc/jemalloc_typedefs.h\"\ncfgoutputs_out=\"${cfgoutputs_out} include/jemalloc/internal/jemalloc_preamble.h\"\ncfgoutputs_out=\"${cfgoutputs_out} test/test.sh\"\ncfgoutputs_out=\"${cfgoutputs_out} test/include/test/jemalloc_test.h\"\n\ncfgoutputs_tup=\"Makefile\"\ncfgoutputs_tup=\"${cfgoutputs_tup} jemalloc.pc:jemalloc.pc.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} doc/html.xsl:doc/html.xsl.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} doc/manpages.xsl:doc/manpages.xsl.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} doc/jemalloc.xml:doc/jemalloc.xml.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} include/jemalloc/jemalloc_macros.h:include/jemalloc/jemalloc_macros.h.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} include/jemalloc/jemalloc_protos.h:include/jemalloc/jemalloc_protos.h.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} include/jemalloc/jemalloc_typedefs.h:include/jemalloc/jemalloc_typedefs.h.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} include/jemalloc/internal/jemalloc_preamble.h\"\ncfgoutputs_tup=\"${cfgoutputs_tup} test/test.sh:test/test.sh.in\"\ncfgoutputs_tup=\"${cfgoutputs_tup} test/include/test/jemalloc_test.h:test/include/test/jemalloc_test.h.in\"\n\ncfghdrs_in=\"include/jemalloc/jemalloc_defs.h.in\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/internal/jemalloc_internal_defs.h.in\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/internal/private_symbols.sh\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/internal/private_namespace.sh\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/internal/public_namespace.sh\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/internal/public_unnamespace.sh\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/jemalloc_rename.sh\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/jemalloc_mangle.sh\"\ncfghdrs_in=\"${cfghdrs_in} include/jemalloc/jemalloc.sh\"\ncfghdrs_in=\"${cfghdrs_in} test/include/test/jemalloc_test_defs.h.in\"\n\ncfghdrs_out=\"include/jemalloc/jemalloc_defs.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/jemalloc${install_suffix}.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/internal/private_symbols.awk\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/internal/private_symbols_jet.awk\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/internal/public_symbols.txt\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/internal/public_namespace.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/internal/public_unnamespace.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/jemalloc_protos_jet.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/jemalloc_rename.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/jemalloc_mangle.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/jemalloc_mangle_jet.h\"\ncfghdrs_out=\"${cfghdrs_out} include/jemalloc/internal/jemalloc_internal_defs.h\"\ncfghdrs_out=\"${cfghdrs_out} test/include/test/jemalloc_test_defs.h\"\n\ncfghdrs_tup=\"include/jemalloc/jemalloc_defs.h:include/jemalloc/jemalloc_defs.h.in\"\ncfghdrs_tup=\"${cfghdrs_tup} include/jemalloc/internal/jemalloc_internal_defs.h:include/jemalloc/internal/jemalloc_internal_defs.h.in\"\ncfghdrs_tup=\"${cfghdrs_tup} test/include/test/jemalloc_test_defs.h:test/include/test/jemalloc_test_defs.h.in\"\n\ndnl ============================================================================\ndnl jemalloc build options.\ndnl\n\ndnl Do not compile with debugging by default.\nAC_ARG_ENABLE([debug],\n  [AS_HELP_STRING([--enable-debug],\n                  [Build debugging code])],\n[if test \"x$enable_debug\" = \"xno\" ; then\n  enable_debug=\"0\"\nelse\n  enable_debug=\"1\"\nfi\n],\n[enable_debug=\"0\"]\n)\nif test \"x$enable_debug\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_DEBUG], [ ], [ ])\nfi\nAC_SUBST([enable_debug])\n\ndnl Only optimize if not debugging.\nif test \"x$enable_debug\" = \"x0\" ; then\n  if test \"x$GCC\" = \"xyes\" ; then\n    JE_CFLAGS_ADD([-O3])\n    JE_CXXFLAGS_ADD([-O3])\n    JE_CFLAGS_ADD([-funroll-loops])\n  elif test \"x$je_cv_msvc\" = \"xyes\" ; then\n    JE_CFLAGS_ADD([-O2])\n    JE_CXXFLAGS_ADD([-O2])\n  else\n    JE_CFLAGS_ADD([-O])\n    JE_CXXFLAGS_ADD([-O])\n  fi\nfi\n\ndnl Enable statistics calculation by default.\nAC_ARG_ENABLE([stats],\n  [AS_HELP_STRING([--disable-stats],\n                  [Disable statistics calculation/reporting])],\n[if test \"x$enable_stats\" = \"xno\" ; then\n  enable_stats=\"0\"\nelse\n  enable_stats=\"1\"\nfi\n],\n[enable_stats=\"1\"]\n)\nif test \"x$enable_stats\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_STATS], [ ], [ ])\nfi\nAC_SUBST([enable_stats])\n\ndnl Do not enable smallocx by default.\nAC_ARG_ENABLE([experimental_smallocx],\n  [AS_HELP_STRING([--enable-experimental-smallocx], [Enable experimental smallocx API])],\n[if test \"x$enable_experimental_smallocx\" = \"xno\" ; then\nenable_experimental_smallocx=\"0\"\nelse\nenable_experimental_smallocx=\"1\"\nfi\n],\n[enable_experimental_smallocx=\"0\"]\n)\nif test \"x$enable_experimental_smallocx\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_EXPERIMENTAL_SMALLOCX_API], [ ], [ ])\nfi\nAC_SUBST([enable_experimental_smallocx])\n\ndnl Do not enable profiling by default.\nAC_ARG_ENABLE([prof],\n  [AS_HELP_STRING([--enable-prof], [Enable allocation profiling])],\n[if test \"x$enable_prof\" = \"xno\" ; then\n  enable_prof=\"0\"\nelse\n  enable_prof=\"1\"\nfi\n],\n[enable_prof=\"0\"]\n)\nif test \"x$enable_prof\" = \"x1\" ; then\n  backtrace_method=\"\"\nelse\n  backtrace_method=\"N/A\"\nfi\n\nAC_ARG_ENABLE([prof-libunwind],\n  [AS_HELP_STRING([--enable-prof-libunwind], [Use libunwind for backtracing])],\n[if test \"x$enable_prof_libunwind\" = \"xno\" ; then\n  enable_prof_libunwind=\"0\"\nelse\n  enable_prof_libunwind=\"1\"\n  if test \"x$enable_prof\" = \"x0\" ; then\n    AC_MSG_ERROR([--enable-prof-libunwind should only be used with --enable-prof])\n  fi\nfi\n],\n[enable_prof_libunwind=\"0\"]\n)\nAC_ARG_WITH([static_libunwind],\n  [AS_HELP_STRING([--with-static-libunwind=<libunwind.a>],\n  [Path to static libunwind library; use rather than dynamically linking])],\nif test \"x$with_static_libunwind\" = \"xno\" ; then\n  LUNWIND=\"-lunwind\"\nelse\n  if test ! -f \"$with_static_libunwind\" ; then\n    AC_MSG_ERROR([Static libunwind not found: $with_static_libunwind])\n  fi\n  LUNWIND=\"$with_static_libunwind\"\nfi,\n  LUNWIND=\"-lunwind\"\n)\nif test \"x$backtrace_method\" = \"x\" -a \"x$enable_prof_libunwind\" = \"x1\" ; then\n  AC_CHECK_HEADERS([libunwind.h], , [enable_prof_libunwind=\"0\"])\n  if test \"x$LUNWIND\" = \"x-lunwind\" ; then\n    AC_CHECK_LIB([unwind], [unw_backtrace], [JE_APPEND_VS(LIBS, $LUNWIND)],\n                 [enable_prof_libunwind=\"0\"])\n  else\n    JE_APPEND_VS(LIBS, $LUNWIND)\n  fi\n  if test \"x${enable_prof_libunwind}\" = \"x1\" ; then\n    backtrace_method=\"libunwind\"\n    AC_DEFINE([JEMALLOC_PROF_LIBUNWIND], [ ], [ ])\n  fi\nfi\n\nif test `uname -s` = \"Linux\"\nthen\n  AC_ARG_ENABLE([prof-frameptr],\n    [AS_HELP_STRING([--enable-prof-frameptr], [Use optimized frame pointer unwinder for backtracing (Linux only)])],\n  [if test \"x$enable_prof_frameptr\" = \"xno\" ; then\n    enable_prof_frameptr=\"0\"\n  else\n    enable_prof_frameptr=\"1\"\n    if test \"x$enable_prof\" = \"x0\" ; then\n      AC_MSG_ERROR([--enable-prof-frameptr should only be used with --enable-prof])\n    fi\n  fi\n  ],\n  [enable_prof_frameptr=\"0\"]\n  )\n  if test \"x$backtrace_method\" = \"x\" -a \"x$enable_prof_frameptr\" = \"x1\" \\\n      -a \"x$GCC\" = \"xyes\" ; then\n    JE_CFLAGS_ADD([-fno-omit-frame-pointer])\n    backtrace_method=\"frame pointer linux\"\n    AC_DEFINE([JEMALLOC_PROF_FRAME_POINTER], [ ], [ ])\n  else\n    enable_prof_frameptr=\"0\"\n  fi\nelse\n  enable_prof_frameptr=\"0\"\nfi\n\nAC_ARG_ENABLE([prof-libgcc],\n  [AS_HELP_STRING([--disable-prof-libgcc],\n  [Do not use libgcc for backtracing])],\n[if test \"x$enable_prof_libgcc\" = \"xno\" ; then\n  enable_prof_libgcc=\"0\"\nelse\n  enable_prof_libgcc=\"1\"\nfi\n],\n[enable_prof_libgcc=\"1\"]\n)\nif test \"x$backtrace_method\" = \"x\" -a \"x$enable_prof_libgcc\" = \"x1\" \\\n     -a \"x$GCC\" = \"xyes\" ; then\n  AC_CHECK_HEADERS([unwind.h], , [enable_prof_libgcc=\"0\"])\n  if test \"x${enable_prof_libgcc}\" = \"x1\" ; then\n    AC_CHECK_LIB([gcc], [_Unwind_Backtrace], [JE_APPEND_VS(LIBS, -lgcc)], [enable_prof_libgcc=\"0\"])\n  fi\n  if test \"x${enable_prof_libgcc}\" = \"x1\" ; then\n    backtrace_method=\"libgcc\"\n    AC_DEFINE([JEMALLOC_PROF_LIBGCC], [ ], [ ])\n  fi\nelse\n  enable_prof_libgcc=\"0\"\nfi\n\nAC_ARG_ENABLE([prof-gcc],\n  [AS_HELP_STRING([--disable-prof-gcc],\n  [Do not use gcc intrinsics for backtracing])],\n[if test \"x$enable_prof_gcc\" = \"xno\" ; then\n  enable_prof_gcc=\"0\"\nelse\n  enable_prof_gcc=\"1\"\nfi\n],\n[enable_prof_gcc=\"1\"]\n)\nif test \"x$backtrace_method\" = \"x\" -a \"x$enable_prof_gcc\" = \"x1\" \\\n     -a \"x$GCC\" = \"xyes\" ; then\n  JE_CFLAGS_ADD([-fno-omit-frame-pointer])\n  backtrace_method=\"gcc intrinsics\"\n  AC_DEFINE([JEMALLOC_PROF_GCC], [ ], [ ])\nelse\n  enable_prof_gcc=\"0\"\nfi\n\nif test \"x$backtrace_method\" = \"x\" ; then\n  backtrace_method=\"none (disabling profiling)\"\n  enable_prof=\"0\"\nfi\nAC_MSG_CHECKING([configured backtracing method])\nAC_MSG_RESULT([$backtrace_method])\nif test \"x$enable_prof\" = \"x1\" ; then\n  dnl Heap profiling uses the log(3) function.\n  JE_APPEND_VS(LIBS, $LM)\n\n  AC_DEFINE([JEMALLOC_PROF], [ ], [ ])\nfi\nAC_SUBST([enable_prof])\n\ndnl Indicate whether adjacent virtual memory mappings automatically coalesce\ndnl (and fragment on demand).\nif test \"x${maps_coalesce}\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_MAPS_COALESCE], [ ], [ ])\nfi\n\ndnl Indicate whether to retain memory (rather than using munmap()) by default.\nif test \"x$default_retain\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_RETAIN], [ ], [ ])\nfi\n\ndnl Indicate whether realloc(ptr, 0) defaults to the \"alloc\" behavior.\nif test \"x$zero_realloc_default_free\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_ZERO_REALLOC_DEFAULT_FREE], [ ], [ ])\nfi\n\ndnl Support allocation from DSS by default\nAC_ARG_ENABLE([dss],\n  [AS_HELP_STRING([--disable-dss], [Disable usage of sbrk(2)])],\n[if test \"x$enable_dss\" = \"xno\" ; then\n  enable_dss=\"0\"\nelse\n  enable_dss=\"1\"\nfi\n],\n[enable_dss=\"1\"]\n)\n\ndnl Enable allocation from DSS if supported by the OS.\nhave_dss=\"1\"\ndnl Check whether the BSD/SUSv1 sbrk() exists.  If not, disable DSS support.\nAC_CHECK_FUNC([sbrk], [have_sbrk=\"1\"], [have_sbrk=\"0\"])\nif test \"x$have_sbrk\" = \"x1\" ; then\n  if test \"x$sbrk_deprecated\" = \"x1\" ; then\n    AC_MSG_RESULT([Disabling dss allocation because sbrk is deprecated])\n    have_dss=\"0\"\n  fi\nelse\n  have_dss=\"0\"\nfi\n\nif test \"x$have_dss\" = \"x1\" -a \"x$enable_dss\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_DSS], [ ], [ ])\nfi\n\ndnl Support the junk/zero filling option by default.\nAC_ARG_ENABLE([fill],\n  [AS_HELP_STRING([--disable-fill], [Disable support for junk/zero filling])],\n[if test \"x$enable_fill\" = \"xno\" ; then\n  enable_fill=\"0\"\nelse\n  enable_fill=\"1\"\nfi\n],\n[enable_fill=\"1\"]\n)\nif test \"x$enable_fill\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_FILL], [ ], [ ])\nfi\nAC_SUBST([enable_fill])\n\ndnl Disable utrace(2)-based tracing by default.\nAC_ARG_ENABLE([utrace],\n  [AS_HELP_STRING([--enable-utrace], [Enable utrace(2)-based tracing])],\n[if test \"x$enable_utrace\" = \"xno\" ; then\n  enable_utrace=\"0\"\nelse\n  enable_utrace=\"1\"\nfi\n],\n[enable_utrace=\"0\"]\n)\nJE_COMPILABLE([utrace(2)], [\n#include <sys/types.h>\n#include <sys/param.h>\n#include <sys/time.h>\n#include <sys/uio.h>\n#include <sys/ktrace.h>\n], [\n\tutrace((void *)0, 0);\n], [je_cv_utrace])\nif test \"x${je_cv_utrace}\" = \"xno\" ; then\n  JE_COMPILABLE([utrace(2) with label], [\n  #include <sys/types.h>\n  #include <sys/param.h>\n  #include <sys/time.h>\n  #include <sys/uio.h>\n  #include <sys/ktrace.h>\n  ], [\n\t  utrace((void *)0, (void *)0, 0);\n  ], [je_cv_utrace_label])\n  if test \"x${je_cv_utrace_label}\" = \"xno\"; then\n    enable_utrace=\"0\"\n  fi\n  if test \"x$enable_utrace\" = \"x1\" ; then\n    AC_DEFINE([JEMALLOC_UTRACE_LABEL], [ ], [ ])\n  fi\nelse\n  if test \"x$enable_utrace\" = \"x1\" ; then\n    AC_DEFINE([JEMALLOC_UTRACE], [ ], [ ])\n  fi\nfi\nAC_SUBST([enable_utrace])\n\ndnl Do not support the xmalloc option by default.\nAC_ARG_ENABLE([xmalloc],\n  [AS_HELP_STRING([--enable-xmalloc], [Support xmalloc option])],\n[if test \"x$enable_xmalloc\" = \"xno\" ; then\n  enable_xmalloc=\"0\"\nelse\n  enable_xmalloc=\"1\"\nfi\n],\n[enable_xmalloc=\"0\"]\n)\nif test \"x$enable_xmalloc\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_XMALLOC], [ ], [ ])\nfi\nAC_SUBST([enable_xmalloc])\n\ndnl Support cache-oblivious allocation alignment by default.\nAC_ARG_ENABLE([cache-oblivious],\n  [AS_HELP_STRING([--disable-cache-oblivious],\n                  [Disable support for cache-oblivious allocation alignment])],\n[if test \"x$enable_cache_oblivious\" = \"xno\" ; then\n  enable_cache_oblivious=\"0\"\nelse\n  enable_cache_oblivious=\"1\"\nfi\n],\n[enable_cache_oblivious=\"1\"]\n)\nif test \"x$enable_cache_oblivious\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_CACHE_OBLIVIOUS], [ ], [ ])\nfi\nAC_SUBST([enable_cache_oblivious])\n\ndnl Do not log by default.\nAC_ARG_ENABLE([log],\n  [AS_HELP_STRING([--enable-log], [Support debug logging])],\n[if test \"x$enable_log\" = \"xno\" ; then\n  enable_log=\"0\"\nelse\n  enable_log=\"1\"\nfi\n],\n[enable_log=\"0\"]\n)\nif test \"x$enable_log\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_LOG], [ ], [ ])\nfi\nAC_SUBST([enable_log])\n\ndnl Do not use readlinkat by default\nAC_ARG_ENABLE([readlinkat],\n  [AS_HELP_STRING([--enable-readlinkat], [Use readlinkat over readlink])],\n[if test \"x$enable_readlinkat\" = \"xno\" ; then\n  enable_readlinkat=\"0\"\nelse\n  enable_readlinkat=\"1\"\nfi\n],\n[enable_readlinkat=\"0\"]\n)\nif test \"x$enable_readlinkat\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_READLINKAT], [ ], [ ])\nfi\nAC_SUBST([enable_readlinkat])\n\ndnl Do not force getenv by default\nAC_ARG_ENABLE([force-getenv],\n  [AS_HELP_STRING([--enable-force-getenv], [Use getenv over secure_getenv])],\n[if test \"x$enable_force_getenv\" = \"xno\" ; then\n  enable_force_getenv=\"0\"\nelse\n  enable_force_getenv=\"1\"\nfi\n],\n[enable_force_getenv=\"0\"]\n)\nif test \"x$enable_force_getenv\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_FORCE_GETENV], [ ], [ ])\nfi\nAC_SUBST([force_getenv])\n\ndnl Avoid extra safety checks by default\nAC_ARG_ENABLE([opt-safety-checks],\n  [AS_HELP_STRING([--enable-opt-safety-checks],\n  [Perform certain low-overhead checks, even in opt mode])],\n[if test \"x$enable_opt_safety_checks\" = \"xno\" ; then\n  enable_opt_safety_checks=\"0\"\nelse\n  enable_opt_safety_checks=\"1\"\nfi\n],\n[enable_opt_safety_checks=\"0\"]\n)\nif test \"x$enable_opt_safety_checks\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_OPT_SAFETY_CHECKS], [ ], [ ])\nfi\nAC_SUBST([enable_opt_safety_checks])\n\ndnl Look for sized-deallocation bugs while otherwise being in opt mode.\nAC_ARG_ENABLE([opt-size-checks],\n  [AS_HELP_STRING([--enable-opt-size-checks],\n  [Perform sized-deallocation argument checks, even in opt mode])],\n[if test \"x$enable_opt_size_checks\" = \"xno\" ; then\n  enable_opt_size_checks=\"0\"\nelse\n  enable_opt_size_checks=\"1\"\nfi\n],\n[enable_opt_size_checks=\"0\"]\n)\nif test \"x$enable_opt_size_checks\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_OPT_SIZE_CHECKS], [ ], [ ])\nfi\nAC_SUBST([enable_opt_size_checks])\n\ndnl Do not check for use-after-free by default.\nAC_ARG_ENABLE([uaf-detection],\n  [AS_HELP_STRING([--enable-uaf-detection],\n  [Allow sampled junk-filling on deallocation to detect use-after-free])],\n[if test \"x$enable_uaf_detection\" = \"xno\" ; then\n  enable_uaf_detection=\"0\"\nelse\n  enable_uaf_detection=\"1\"\nfi\n],\n[enable_uaf_detection=\"0\"]\n)\nif test \"x$enable_uaf_detection\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_UAF_DETECTION], [ ], [ ])\nfi\nAC_SUBST([enable_uaf_detection])\n\nJE_COMPILABLE([a program using __builtin_unreachable], [\nvoid foo (void) {\n  __builtin_unreachable();\n}\n], [\n\t{\n\t\tfoo();\n\t}\n], [je_cv_gcc_builtin_unreachable])\nif test \"x${je_cv_gcc_builtin_unreachable}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_INTERNAL_UNREACHABLE], [__builtin_unreachable], [ ])\nelse\n  AC_DEFINE([JEMALLOC_INTERNAL_UNREACHABLE], [abort], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for  __builtin_ffsl(), then ffsl(3), and fail if neither are found.\ndnl One of those two functions should (theoretically) exist on all platforms\ndnl that jemalloc currently has a chance of functioning on without modification.\ndnl We additionally assume ffs[ll]() or __builtin_ffs[ll]() are defined if\ndnl ffsl() or __builtin_ffsl() are defined, respectively.\nJE_COMPILABLE([a program using __builtin_ffsl], [\n#include <stdio.h>\n#include <strings.h>\n#include <string.h>\n], [\n\t{\n\t\tint rv = __builtin_ffsl(0x08);\n\t\tprintf(\"%d\\n\", rv);\n\t}\n], [je_cv_gcc_builtin_ffsl])\nif test \"x${je_cv_gcc_builtin_ffsl}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_INTERNAL_FFSLL], [__builtin_ffsll], [ ])\n  AC_DEFINE([JEMALLOC_INTERNAL_FFSL], [__builtin_ffsl], [ ])\n  AC_DEFINE([JEMALLOC_INTERNAL_FFS], [__builtin_ffs], [ ])\nelse\n  JE_COMPILABLE([a program using ffsl], [\n  #include <stdio.h>\n  #include <strings.h>\n  #include <string.h>\n  ], [\n\t{\n\t\tint rv = ffsl(0x08);\n\t\tprintf(\"%d\\n\", rv);\n\t}\n  ], [je_cv_function_ffsl])\n  if test \"x${je_cv_function_ffsl}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_INTERNAL_FFSLL], [ffsll], [ ])\n    AC_DEFINE([JEMALLOC_INTERNAL_FFSL], [ffsl], [ ])\n    AC_DEFINE([JEMALLOC_INTERNAL_FFS], [ffs], [ ])\n  else\n    AC_MSG_ERROR([Cannot build without ffsl(3) or __builtin_ffsl()])\n  fi\nfi\n\nJE_COMPILABLE([a program using __builtin_popcountl], [\n#include <stdio.h>\n#include <strings.h>\n#include <string.h>\n], [\n\t{\n\t\tint rv = __builtin_popcountl(0x08);\n\t\tprintf(\"%d\\n\", rv);\n\t}\n], [je_cv_gcc_builtin_popcountl])\nif test \"x${je_cv_gcc_builtin_popcountl}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_INTERNAL_POPCOUNT], [__builtin_popcount], [ ])\n  AC_DEFINE([JEMALLOC_INTERNAL_POPCOUNTL], [__builtin_popcountl], [ ])\n  AC_DEFINE([JEMALLOC_INTERNAL_POPCOUNTLL], [__builtin_popcountll], [ ])\nfi\n\nAC_ARG_WITH([lg_quantum],\n  [AS_HELP_STRING([--with-lg-quantum=<lg-quantum>],\n   [Base 2 log of minimum allocation alignment])])\nif test \"x$with_lg_quantum\" != \"x\" ; then\n  AC_DEFINE_UNQUOTED([LG_QUANTUM], [$with_lg_quantum], [ ])\nfi\n\nAC_ARG_WITH([lg_slab_maxregs],\n  [AS_HELP_STRING([--with-lg-slab-maxregs=<lg-slab-maxregs>],\n   [Base 2 log of maximum number of regions in a slab (used with malloc_conf slab_sizes)])],\n  [CONFIG_LG_SLAB_MAXREGS=\"with_lg_slab_maxregs\"],\n  [CONFIG_LG_SLAB_MAXREGS=\"\"])\nif test \"x$with_lg_slab_maxregs\" != \"x\" ; then\n  AC_DEFINE_UNQUOTED([CONFIG_LG_SLAB_MAXREGS], [$with_lg_slab_maxregs], [ ])\nfi\n\nAC_ARG_WITH([lg_page],\n  [AS_HELP_STRING([--with-lg-page=<lg-page>], [Base 2 log of system page size])],\n  [LG_PAGE=\"$with_lg_page\"], [LG_PAGE=\"detect\"])\ncase \"${host}\" in\n  aarch64-apple-darwin*)\n      dnl When cross-compile for Apple M1 and no page size specified, use the\n      dnl default and skip detecting the page size (which is likely incorrect).\n      if test \"x${host}\" != \"x${build}\" -a \"x$LG_PAGE\" = \"xdetect\"; then\n        LG_PAGE=14\n      fi\n      ;;\nesac\nif test \"x$LG_PAGE\" = \"xdetect\"; then\n  AC_CACHE_CHECK([LG_PAGE],\n               [je_cv_lg_page],\n               AC_RUN_IFELSE([AC_LANG_PROGRAM(\n[[\n#include <strings.h>\n#ifdef _WIN32\n#include <windows.h>\n#else\n#include <unistd.h>\n#endif\n#include <stdio.h>\n]],\n[[\n    int result;\n    FILE *f;\n\n#ifdef _WIN32\n    SYSTEM_INFO si;\n    GetSystemInfo(&si);\n    result = si.dwPageSize;\n#else\n    result = sysconf(_SC_PAGESIZE);\n#endif\n    if (result == -1) {\n\treturn 1;\n    }\n    result = JEMALLOC_INTERNAL_FFSL(result) - 1;\n\n    f = fopen(\"conftest.out\", \"w\");\n    if (f == NULL) {\n\treturn 1;\n    }\n    fprintf(f, \"%d\", result);\n    fclose(f);\n\n    return 0;\n]])],\n                             [je_cv_lg_page=`cat conftest.out`],\n                             [je_cv_lg_page=undefined],\n                             [je_cv_lg_page=12]))\nfi\nif test \"x${je_cv_lg_page}\" != \"x\" ; then\n  LG_PAGE=\"${je_cv_lg_page}\"\nfi\nif test \"x${LG_PAGE}\" != \"xundefined\" ; then\n   AC_DEFINE_UNQUOTED([LG_PAGE], [$LG_PAGE], [ ])\nelse\n   AC_MSG_ERROR([cannot determine value for LG_PAGE])\nfi\n\nAC_ARG_WITH([lg_hugepage],\n  [AS_HELP_STRING([--with-lg-hugepage=<lg-hugepage>],\n   [Base 2 log of system huge page size])],\n  [je_cv_lg_hugepage=\"${with_lg_hugepage}\"],\n  [je_cv_lg_hugepage=\"\"])\nif test \"x${je_cv_lg_hugepage}\" = \"x\" ; then\n  dnl Look in /proc/meminfo (Linux-specific) for information on the default huge\n  dnl page size, if any.  The relevant line looks like:\n  dnl\n  dnl   Hugepagesize:       2048 kB\n  if test -e \"/proc/meminfo\" ; then\n    hpsk=[`cat /proc/meminfo 2>/dev/null | \\\n          grep -e '^Hugepagesize:[[:space:]]\\+[0-9]\\+[[:space:]]kB$' | \\\n          awk '{print $2}'`]\n    if test \"x${hpsk}\" != \"x\" ; then\n      je_cv_lg_hugepage=10\n      while test \"${hpsk}\" -gt 1 ; do\n        hpsk=\"$((hpsk / 2))\"\n        je_cv_lg_hugepage=\"$((je_cv_lg_hugepage + 1))\"\n      done\n    fi\n  fi\n\n  dnl Set default if unable to automatically configure.\n  if test \"x${je_cv_lg_hugepage}\" = \"x\" ; then\n    je_cv_lg_hugepage=21\n  fi\nfi\nif test \"x${LG_PAGE}\" != \"xundefined\" -a \\\n        \"${je_cv_lg_hugepage}\" -lt \"${LG_PAGE}\" ; then\n  AC_MSG_ERROR([Huge page size (2^${je_cv_lg_hugepage}) must be at least page size (2^${LG_PAGE})])\nfi\nAC_DEFINE_UNQUOTED([LG_HUGEPAGE], [${je_cv_lg_hugepage}], [ ])\n\ndnl ============================================================================\ndnl Enable libdl by default.\nAC_ARG_ENABLE([libdl],\n  [AS_HELP_STRING([--disable-libdl],\n  [Do not use libdl])],\n[if test \"x$enable_libdl\" = \"xno\" ; then\n  enable_libdl=\"0\"\nelse\n  enable_libdl=\"1\"\nfi\n],\n[enable_libdl=\"1\"]\n)\nAC_SUBST([libdl])\n\ndnl ============================================================================\ndnl Configure pthreads.\n\nif test \"x$abi\" != \"xpecoff\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_PTHREAD], [ ], [ ])\n  AC_CHECK_HEADERS([pthread.h], , [AC_MSG_ERROR([pthread.h is missing])])\n  dnl Some systems may embed pthreads functionality in libc; check for libpthread\n  dnl first, but try libc too before failing.\n  AC_CHECK_LIB([pthread], [pthread_create], [JE_APPEND_VS(LIBS, -pthread)],\n               [AC_SEARCH_LIBS([pthread_create], , ,\n                               AC_MSG_ERROR([libpthread is missing]))])\n  wrap_syms=\"${wrap_syms} pthread_create\"\n  have_pthread=\"1\"\n\ndnl Check if we have dlsym support.\n  if test \"x$enable_libdl\" = \"x1\" ; then\n    have_dlsym=\"1\"\n    AC_CHECK_HEADERS([dlfcn.h],\n      AC_CHECK_FUNC([dlsym], [],\n        [AC_CHECK_LIB([dl], [dlsym], [LIBS=\"$LIBS -ldl\"], [have_dlsym=\"0\"])]),\n      [have_dlsym=\"0\"])\n    if test \"x$have_dlsym\" = \"x1\" ; then\n      AC_DEFINE([JEMALLOC_HAVE_DLSYM], [ ], [ ])\n    fi\n  else\n    have_dlsym=\"0\"\n  fi\n\n  JE_COMPILABLE([pthread_atfork(3)], [\n#include <pthread.h>\n], [\n  pthread_atfork((void *)0, (void *)0, (void *)0);\n], [je_cv_pthread_atfork])\n  if test \"x${je_cv_pthread_atfork}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_HAVE_PTHREAD_ATFORK], [ ], [ ])\n  fi\n  dnl Check if pthread_setname_np is available with the expected API.\n  JE_COMPILABLE([pthread_setname_np(3)], [\n#include <pthread.h>\n], [\n  pthread_setname_np(pthread_self(), \"setname_test\");\n], [je_cv_pthread_setname_np])\n  if test \"x${je_cv_pthread_setname_np}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_HAVE_PTHREAD_SETNAME_NP], [ ], [ ])\n  fi\n  dnl Check if pthread_getname_np is not necessarily present despite\n  dnl the pthread_setname_np counterpart\n  JE_COMPILABLE([pthread_getname_np(3)], [\n#include <pthread.h>\n#include <stdlib.h>\n], [\n  {\n  \tchar *name = malloc(16);\n  \tpthread_getname_np(pthread_self(), name, 16);\n\tfree(name);\n  }\n], [je_cv_pthread_getname_np])\n  if test \"x${je_cv_pthread_getname_np}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_HAVE_PTHREAD_GETNAME_NP], [ ], [ ])\n  fi\n  dnl Check if pthread_set_name_np is available with the expected API.\n  JE_COMPILABLE([pthread_set_name_np(3)], [\n#include <pthread.h>\n#include <pthread_np.h>\n], [\n  pthread_set_name_np(pthread_self(), \"set_name_test\");\n], [je_cv_pthread_set_name_np])\n  if test \"x${je_cv_pthread_set_name_np}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_HAVE_PTHREAD_SET_NAME_NP], [ ], [ ])\n  fi\n  dnl Check if pthread_get_name_np is not necessarily present despite\n  dnl the pthread_set_name_np counterpart\n  JE_COMPILABLE([pthread_get_name_np(3)], [\n#include <pthread.h>\n#include <pthread_np.h>\n#include <stdlib.h>\n], [\n  {\n  \tchar *name = malloc(16);\n  \tpthread_get_name_np(pthread_self(), name, 16);\n\tfree(name);\n  }\n], [je_cv_pthread_get_name_np])\n  if test \"x${je_cv_pthread_get_name_np}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_HAVE_PTHREAD_GET_NAME_NP], [ ], [ ])\n  fi\nfi\n\nJE_APPEND_VS(CPPFLAGS, -D_REENTRANT)\n\ndnl Check whether clock_gettime(2) is in libc or librt.\nAC_SEARCH_LIBS([clock_gettime], [rt])\n\ndnl Cray wrapper compiler often adds `-lrt` when using `-static`. Check with\ndnl `-dynamic` as well in case a user tries to dynamically link in jemalloc\nif test \"x$je_cv_cray_prgenv_wrapper\" = \"xyes\" ; then\n  if test \"$ac_cv_search_clock_gettime\" != \"-lrt\"; then\n    JE_CFLAGS_SAVE()\n\n    unset ac_cv_search_clock_gettime\n    JE_CFLAGS_ADD([-dynamic])\n    AC_SEARCH_LIBS([clock_gettime], [rt])\n\n    JE_CFLAGS_RESTORE()\n  fi\nfi\n\ndnl check for CLOCK_MONOTONIC_COARSE (Linux-specific).\nJE_COMPILABLE([clock_gettime(CLOCK_MONOTONIC_COARSE, ...)], [\n#include <time.h>\n], [\n\tstruct timespec ts;\n\n\tclock_gettime(CLOCK_MONOTONIC_COARSE, &ts);\n], [je_cv_clock_monotonic_coarse])\nif test \"x${je_cv_clock_monotonic_coarse}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_CLOCK_MONOTONIC_COARSE], [ ], [ ])\nfi\n\ndnl check for CLOCK_MONOTONIC.\nJE_COMPILABLE([clock_gettime(CLOCK_MONOTONIC, ...)], [\n#include <unistd.h>\n#include <time.h>\n], [\n\tstruct timespec ts;\n\n\tclock_gettime(CLOCK_MONOTONIC, &ts);\n#if !defined(_POSIX_MONOTONIC_CLOCK) || _POSIX_MONOTONIC_CLOCK < 0\n#  error _POSIX_MONOTONIC_CLOCK missing/invalid\n#endif\n], [je_cv_clock_monotonic])\nif test \"x${je_cv_clock_monotonic}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_CLOCK_MONOTONIC], [ ], [ ])\nfi\n\ndnl Check for mach_absolute_time().\nJE_COMPILABLE([mach_absolute_time()], [\n#include <mach/mach_time.h>\n], [\n\tmach_absolute_time();\n], [je_cv_mach_absolute_time])\nif test \"x${je_cv_mach_absolute_time}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_MACH_ABSOLUTE_TIME], [ ], [ ])\nfi\n\ndnl check for CLOCK_REALTIME (always should be available on Linux)\nJE_COMPILABLE([clock_gettime(CLOCK_REALTIME, ...)], [\n#include <time.h>\n], [\n\tstruct timespec ts;\n\n\tclock_gettime(CLOCK_REALTIME, &ts);\n], [je_cv_clock_realtime])\nif test \"x${je_cv_clock_realtime}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_CLOCK_REALTIME], [ ], [ ])\nfi\n\ndnl Check for clock_gettime_nsec_np().\nJE_COMPILABLE([clock_gettime_nsec_np()], [\n#include <time.h>\n], [\n\tclock_gettime_nsec_np(CLOCK_UPTIME_RAW);\n], [je_cv_clock_gettime_nsec_np])\nif test \"x${je_cv_clock_gettime_nsec_np}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_CLOCK_GETTIME_NSEC_NP], [ ], [ ])\nfi\n\ndnl Use syscall(2) (if available) by default.\nAC_ARG_ENABLE([syscall],\n  [AS_HELP_STRING([--disable-syscall], [Disable use of syscall(2)])],\n[if test \"x$enable_syscall\" = \"xno\" ; then\n  enable_syscall=\"0\"\nelse\n  enable_syscall=\"1\"\nfi\n],\n[enable_syscall=\"1\"]\n)\nif test \"x$enable_syscall\" = \"x1\" ; then\n  dnl Check if syscall(2) is usable.  Treat warnings as errors, so that e.g. OS\n  dnl X 10.12's deprecation warning prevents use.\n  JE_CFLAGS_SAVE()\n  JE_CFLAGS_ADD([-Werror])\n  JE_COMPILABLE([syscall(2)], [\n#include <sys/syscall.h>\n#include <unistd.h>\n], [\n\tsyscall(SYS_write, 2, \"hello\", 5);\n],\n                [je_cv_syscall])\n  JE_CFLAGS_RESTORE()\n  if test \"x$je_cv_syscall\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_USE_SYSCALL], [ ], [ ])\n  fi\nfi\n\ndnl Check if the GNU-specific secure_getenv function exists.\nAC_CHECK_FUNC([secure_getenv],\n              [have_secure_getenv=\"1\"],\n              [have_secure_getenv=\"0\"]\n             )\nif test \"x$have_secure_getenv\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_SECURE_GETENV], [ ], [ ])\nfi\n\ndnl Check if the GNU-specific sched_getcpu function exists.\nAC_CHECK_FUNC([sched_getcpu],\n              [have_sched_getcpu=\"1\"],\n              [have_sched_getcpu=\"0\"]\n             )\nif test \"x$have_sched_getcpu\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_SCHED_GETCPU], [ ], [ ])\nfi\n\ndnl Check if the GNU-specific sched_setaffinity function exists.\nAC_CHECK_FUNC([sched_setaffinity],\n              [have_sched_setaffinity=\"1\"],\n              [have_sched_setaffinity=\"0\"]\n             )\nif test \"x$have_sched_setaffinity\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_SCHED_SETAFFINITY], [ ], [ ])\nfi\n\ndnl Check if the pthread_setaffinity_np function exists.\nAC_CHECK_FUNC([pthread_setaffinity_np],\n              [have_pthread_setaffinity_np=\"1\"],\n              [have_pthread_setaffinity_np=\"0\"]\n             )\nif test \"x$have_pthread_setaffinity_np\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_PTHREAD_SETAFFINITY_NP], [ ], [ ])\nfi\n\ndnl Check if the Solaris/BSD issetugid function exists.\nAC_CHECK_FUNC([issetugid],\n              [have_issetugid=\"1\"],\n              [have_issetugid=\"0\"]\n             )\nif test \"x$have_issetugid\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_ISSETUGID], [ ], [ ])\nfi\n\ndnl Check whether the BSD-specific _malloc_thread_cleanup() exists.  If so, use\ndnl it rather than pthreads TSD cleanup functions to support cleanup during\ndnl thread exit, in order to avoid pthreads library recursion during\ndnl bootstrapping.\nAC_CHECK_FUNC([_malloc_thread_cleanup],\n              [have__malloc_thread_cleanup=\"1\"],\n              [have__malloc_thread_cleanup=\"0\"]\n             )\nif test \"x$have__malloc_thread_cleanup\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_MALLOC_THREAD_CLEANUP], [ ], [ ])\n  wrap_syms=\"${wrap_syms} _malloc_thread_cleanup _malloc_tsd_cleanup_register\"\n  force_tls=\"1\"\nfi\n\ndnl Check whether the BSD-specific _pthread_mutex_init_calloc_cb() exists.  If\ndnl so, mutex initialization causes allocation, and we need to implement this\ndnl callback function in order to prevent recursive allocation.\nAC_CHECK_FUNC([_pthread_mutex_init_calloc_cb],\n              [have__pthread_mutex_init_calloc_cb=\"1\"],\n              [have__pthread_mutex_init_calloc_cb=\"0\"]\n             )\nif test \"x$have__pthread_mutex_init_calloc_cb\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_MUTEX_INIT_CB], [ ], [ ])\n  wrap_syms=\"${wrap_syms} _malloc_prefork _malloc_postfork\"\nfi\n\nAC_CHECK_FUNC([memcntl],\n\t      [have_memcntl=\"1\"],\n\t      [have_memcntl=\"0\"],\n\t      )\nif test \"x$have_memcntl\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_MEMCNTL], [ ], [ ])\nfi\n\nAC_CHECK_FUNC([prctl],\n\t      [have_prctl=\"1\"],\n\t      [have_prctl=\"0\"],\n\t      )\nif test \"x$have_prctl\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_PRCTL], [ ], [ ])\nfi\n\ndnl Disable lazy locking by default.\nAC_ARG_ENABLE([lazy_lock],\n  [AS_HELP_STRING([--enable-lazy-lock],\n  [Enable lazy locking (only lock when multi-threaded)])],\n[if test \"x$enable_lazy_lock\" = \"xno\" ; then\n  enable_lazy_lock=\"0\"\nelse\n  enable_lazy_lock=\"1\"\nfi\n],\n[enable_lazy_lock=\"\"]\n)\nif test \"x${enable_lazy_lock}\" = \"x\" ; then\n  if test \"x${force_lazy_lock}\" = \"x1\" ; then\n    AC_MSG_RESULT([Forcing lazy-lock to avoid allocator/threading bootstrap issues])\n    enable_lazy_lock=\"1\"\n  else\n    enable_lazy_lock=\"0\"\n  fi\nfi\nif test \"x${enable_lazy_lock}\" = \"x1\" -a \"x${abi}\" = \"xpecoff\" ; then\n  AC_MSG_RESULT([Forcing no lazy-lock because thread creation monitoring is unimplemented])\n  enable_lazy_lock=\"0\"\nfi\nif test \"x$enable_lazy_lock\" = \"x1\" ; then\n  if test \"x$have_dlsym\" = \"x1\" ; then\n    AC_DEFINE([JEMALLOC_LAZY_LOCK], [ ], [ ])\n  else\n    AC_MSG_ERROR([Missing dlsym support: lazy-lock cannot be enabled.])\n  fi\nfi\nAC_SUBST([enable_lazy_lock])\n\ndnl Automatically configure TLS.\nif test \"x${force_tls}\" = \"x1\" ; then\n  enable_tls=\"1\"\nelif test \"x${force_tls}\" = \"x0\" ; then\n  enable_tls=\"0\"\nelse\n  enable_tls=\"1\"\nfi\nif test \"x${enable_tls}\" = \"x1\" ; then\nAC_MSG_CHECKING([for TLS])\nAC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n[[\n    __thread int x;\n]], [[\n    x = 42;\n\n    return 0;\n]])],\n              AC_MSG_RESULT([yes]),\n              AC_MSG_RESULT([no])\n              enable_tls=\"0\")\nelse\n  enable_tls=\"0\"\nfi\nAC_SUBST([enable_tls])\nif test \"x${enable_tls}\" = \"x1\" ; then\n  AC_DEFINE_UNQUOTED([JEMALLOC_TLS], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for C11 atomics.\n\nJE_COMPILABLE([C11 atomics], [\n#include <stdint.h>\n#if (__STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_ATOMICS__)\n#include <stdatomic.h>\n#else\n#error Atomics not available\n#endif\n], [\n    uint64_t *p = (uint64_t *)0;\n    uint64_t x = 1;\n    volatile atomic_uint_least64_t *a = (volatile atomic_uint_least64_t *)p;\n    uint64_t r = atomic_fetch_add(a, x) + x;\n    return r == 0;\n], [je_cv_c11_atomics])\nif test \"x${je_cv_c11_atomics}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_C11_ATOMICS], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for GCC-style __atomic atomics.\n\nJE_COMPILABLE([GCC __atomic atomics], [\n], [\n    int x = 0;\n    int val = 1;\n    int y = __atomic_fetch_add(&x, val, __ATOMIC_RELAXED);\n    int after_add = x;\n    return after_add == 1;\n], [je_cv_gcc_atomic_atomics])\nif test \"x${je_cv_gcc_atomic_atomics}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_GCC_ATOMIC_ATOMICS], [ ], [ ])\n\n  dnl check for 8-bit atomic support\n  JE_COMPILABLE([GCC 8-bit __atomic atomics], [\n  ], [\n      unsigned char x = 0;\n      int val = 1;\n      int y = __atomic_fetch_add(&x, val, __ATOMIC_RELAXED);\n      int after_add = (int)x;\n      return after_add == 1;\n  ], [je_cv_gcc_u8_atomic_atomics])\n  if test \"x${je_cv_gcc_u8_atomic_atomics}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_GCC_U8_ATOMIC_ATOMICS], [ ], [ ])\n  fi\nfi\n\ndnl ============================================================================\ndnl Check for GCC-style __sync atomics.\n\nJE_COMPILABLE([GCC __sync atomics], [\n], [\n    int x = 0;\n    int before_add = __sync_fetch_and_add(&x, 1);\n    int after_add = x;\n    return (before_add == 0) && (after_add == 1);\n], [je_cv_gcc_sync_atomics])\nif test \"x${je_cv_gcc_sync_atomics}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_GCC_SYNC_ATOMICS], [ ], [ ])\n\n  dnl check for 8-bit atomic support\n  JE_COMPILABLE([GCC 8-bit __sync atomics], [\n  ], [\n      unsigned char x = 0;\n      int before_add = __sync_fetch_and_add(&x, 1);\n      int after_add = (int)x;\n      return (before_add == 0) && (after_add == 1);\n  ], [je_cv_gcc_u8_sync_atomics])\n  if test \"x${je_cv_gcc_u8_sync_atomics}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_GCC_U8_SYNC_ATOMICS], [ ], [ ])\n  fi\nfi\n\ndnl ============================================================================\ndnl Check for atomic(3) operations as provided on Darwin.\ndnl We need this not for the atomic operations (which are provided above), but\ndnl rather for the OS_unfair_lock type it exposes.\n\nJE_COMPILABLE([Darwin OSAtomic*()], [\n#include <libkern/OSAtomic.h>\n#include <inttypes.h>\n], [\n\t{\n\t\tint32_t x32 = 0;\n\t\tvolatile int32_t *x32p = &x32;\n\t\tOSAtomicAdd32(1, x32p);\n\t}\n\t{\n\t\tint64_t x64 = 0;\n\t\tvolatile int64_t *x64p = &x64;\n\t\tOSAtomicAdd64(1, x64p);\n\t}\n], [je_cv_osatomic])\nif test \"x${je_cv_osatomic}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_OSATOMIC], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for madvise(2).\n\nJE_COMPILABLE([madvise(2)], [\n#include <sys/mman.h>\n], [\n\tmadvise((void *)0, 0, 0);\n], [je_cv_madvise])\nif test \"x${je_cv_madvise}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_MADVISE], [ ], [ ])\n\n  dnl Check for madvise(..., MADV_FREE).\n  JE_COMPILABLE([madvise(..., MADV_FREE)], [\n#include <sys/mman.h>\n], [\n\tmadvise((void *)0, 0, MADV_FREE);\n], [je_cv_madv_free])\n  if test \"x${je_cv_madv_free}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_PURGE_MADVISE_FREE], [ ], [ ])\n  elif test \"x${je_cv_madvise}\" = \"xyes\" ; then\n    case \"${host_cpu}\" in i686|x86_64)\n        case \"${host}\" in *-*-linux*)\n            AC_DEFINE([JEMALLOC_PURGE_MADVISE_FREE], [ ], [ ])\n            AC_DEFINE([JEMALLOC_DEFINE_MADVISE_FREE], [ ], [ ])\n\t    ;;\n        esac\n        ;;\n    esac\n  fi\n\n  dnl Check for madvise(..., MADV_DONTNEED).\n  JE_COMPILABLE([madvise(..., MADV_DONTNEED)], [\n#include <sys/mman.h>\n], [\n\tmadvise((void *)0, 0, MADV_DONTNEED);\n], [je_cv_madv_dontneed])\n  if test \"x${je_cv_madv_dontneed}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_PURGE_MADVISE_DONTNEED], [ ], [ ])\n  fi\n\n  dnl Check for madvise(..., MADV_DO[NT]DUMP).\n  JE_COMPILABLE([madvise(..., MADV_DO[[NT]]DUMP)], [\n#include <sys/mman.h>\n], [\n\tmadvise((void *)0, 0, MADV_DONTDUMP);\n\tmadvise((void *)0, 0, MADV_DODUMP);\n], [je_cv_madv_dontdump])\n  if test \"x${je_cv_madv_dontdump}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_MADVISE_DONTDUMP], [ ], [ ])\n  fi\n\n  dnl Check for madvise(..., MADV_[NO]HUGEPAGE).\n  JE_COMPILABLE([madvise(..., MADV_[[NO]]HUGEPAGE)], [\n#include <sys/mman.h>\n], [\n\tmadvise((void *)0, 0, MADV_HUGEPAGE);\n\tmadvise((void *)0, 0, MADV_NOHUGEPAGE);\n], [je_cv_thp])\n  case \"${host_cpu}\" in\n    arm*)\n      ;;\n    *)\n    if test \"x${je_cv_thp}\" = \"xyes\" ; then\n      AC_DEFINE([JEMALLOC_HAVE_MADVISE_HUGE], [ ], [ ])\n    fi\n    ;;\n  esac\n\n  dnl Check for madvise(..., MADV_[NO]CORE).\n  JE_COMPILABLE([madvise(..., MADV_[[NO]]CORE)], [\n#include <sys/mman.h>\n], [\n\tmadvise((void *)0, 0, MADV_NOCORE);\n\tmadvise((void *)0, 0, MADV_CORE);\n], [je_cv_madv_nocore])\n  if test \"x${je_cv_madv_nocore}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_MADVISE_NOCORE], [ ], [ ])\n  fi\n\n  dnl Check for madvise(..., MADV_COLLAPSE).\n  JE_COMPILABLE([madvise(..., MADV_COLLAPSE)], [\n#include <sys/mman.h>\n], [\n\tmadvise((void *)0, 0, MADV_COLLAPSE);\n], [je_cv_madv_collapse])\n  if test \"x${je_cv_madv_collapse}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_HAVE_MADVISE_COLLAPSE], [ ], [ ])\n  fi\nelse\n  dnl Check for posix_madvise.\n  JE_COMPILABLE([posix_madvise], [\n  #include <sys/mman.h>\n  ], [\n    posix_madvise((void *)0, 0, 0);\n  ], [je_cv_posix_madvise])\n  if test \"x${je_cv_posix_madvise}\" = \"xyes\" ; then\n    AC_DEFINE([JEMALLOC_HAVE_POSIX_MADVISE], [ ], [ ])\n\n    dnl Check for posix_madvise(..., POSIX_MADV_DONTNEED).\n    JE_COMPILABLE([posix_madvise(..., POSIX_MADV_DONTNEED)], [\n  #include <sys/mman.h>\n  ], [\n    posix_madvise((void *)0, 0, POSIX_MADV_DONTNEED);\n  ], [je_cv_posix_madv_dontneed])\n    if test \"x${je_cv_posix_madv_dontneed}\" = \"xyes\" ; then\n      AC_DEFINE([JEMALLOC_PURGE_POSIX_MADVISE_DONTNEED], [ ], [ ])\n    fi\n  fi\nfi\n\ndnl ============================================================================\ndnl Check for mprotect(2).\n\nJE_COMPILABLE([mprotect(2)], [\n#include <sys/mman.h>\n], [\n\tmprotect((void *)0, 0, PROT_NONE);\n], [je_cv_mprotect])\nif test \"x${je_cv_mprotect}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_MPROTECT], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for __builtin_clz(), __builtin_clzl(), and __builtin_clzll().\n\nAC_CACHE_CHECK([for __builtin_clz],\n               [je_cv_builtin_clz],\n               [AC_LINK_IFELSE([AC_LANG_PROGRAM([],\n                                                [\n                                                {\n                                                        unsigned x = 0;\n                                                        int y = __builtin_clz(x);\n                                                }\n                                                {\n                                                        unsigned long x = 0;\n                                                        int y = __builtin_clzl(x);\n                                                }\n                                                {\n                                                        unsigned long long x = 0;\n                                                        int y = __builtin_clzll(x);\n                                                }\n                                                ])],\n                               [je_cv_builtin_clz=yes],\n                               [je_cv_builtin_clz=no])])\n\nif test \"x${je_cv_builtin_clz}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_BUILTIN_CLZ], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for os_unfair_lock operations as provided on Darwin.\n\nJE_COMPILABLE([Darwin os_unfair_lock_*()], [\n#include <os/lock.h>\n#include <AvailabilityMacros.h>\n], [\n\t#if MAC_OS_X_VERSION_MIN_REQUIRED < 101200\n\t#error \"os_unfair_lock is not supported\"\n\t#else\n\tos_unfair_lock lock = OS_UNFAIR_LOCK_INIT;\n\tos_unfair_lock_lock(&lock);\n\tos_unfair_lock_unlock(&lock);\n\t#endif\n], [je_cv_os_unfair_lock])\nif test \"x${je_cv_os_unfair_lock}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_OS_UNFAIR_LOCK], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Darwin-related configuration.\n\nAC_ARG_ENABLE([zone-allocator],\n  [AS_HELP_STRING([--disable-zone-allocator],\n                  [Disable zone allocator for Darwin])],\n[if test \"x$enable_zone_allocator\" = \"xno\" ; then\n  enable_zone_allocator=\"0\"\nelse\n  enable_zone_allocator=\"1\"\nfi\n],\n[if test \"x${abi}\" = \"xmacho\"; then\n  enable_zone_allocator=\"1\"\nfi\n]\n)\nAC_SUBST([enable_zone_allocator])\n\nif test \"x${enable_zone_allocator}\" = \"x1\" ; then\n  if test \"x${abi}\" != \"xmacho\"; then\n    AC_MSG_ERROR([--enable-zone-allocator is only supported on Darwin])\n  fi\n  AC_DEFINE([JEMALLOC_ZONE], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Use initial-exec TLS by default.\nAC_ARG_ENABLE([initial-exec-tls],\n  [AS_HELP_STRING([--disable-initial-exec-tls],\n                  [Disable the initial-exec tls model])],\n[if test \"x$enable_initial_exec_tls\" = \"xno\" ; then\n  enable_initial_exec_tls=\"0\"\nelse\n  enable_initial_exec_tls=\"1\"\nfi\n],\n[enable_initial_exec_tls=\"1\"]\n)\nAC_SUBST([enable_initial_exec_tls])\n\nif test \"x${je_cv_tls_model}\" = \"xyes\" -a \\\n       \"x${enable_initial_exec_tls}\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_TLS_MODEL],\n            [__attribute__((tls_model(\"initial-exec\")))],\n            [ ])\nelse\n  AC_DEFINE([JEMALLOC_TLS_MODEL], [ ], [ ])\nfi\n\ndnl Do not compile with debugging by default.\nAC_ARG_ENABLE([pageid],\n  [AS_HELP_STRING([--enable-pageid],\n                  [Enable named pages])],\n[if test \"x$enable_pageid\" = \"xno\" ; then\n  enable_pageid=\"0\"\nelse\n  enable_pageid=\"1\"\nfi\n],\n[enable_pageid=\"0\"]\n)\nif test \"x$enable_pageid\" = \"x1\" ; then\n  AC_DEFINE([JEMALLOC_PAGEID], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Enable background threads if possible.\n\nif test \"x${have_pthread}\" = \"x1\" -a \"x${je_cv_os_unfair_lock}\" != \"xyes\" -a \\\n       \"x${abi}\" != \"xmacho\" ; then\n  AC_DEFINE([JEMALLOC_BACKGROUND_THREAD], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for glibc malloc hooks\n\nif test \"x$glibc\" = \"x1\" ; then\n  JE_COMPILABLE([glibc malloc hook], [\n  #include <stddef.h>\n\n  extern void (* __free_hook)(void *ptr);\n  extern void *(* __malloc_hook)(size_t size);\n  extern void *(* __realloc_hook)(void *ptr, size_t size);\n], [\n    void *ptr = 0L;\n    if (__malloc_hook) ptr = __malloc_hook(1);\n    if (__realloc_hook) ptr = __realloc_hook(ptr, 2);\n    if (__free_hook && ptr) __free_hook(ptr);\n], [je_cv_glibc_malloc_hook])\n  if test \"x${je_cv_glibc_malloc_hook}\" = \"xyes\" ; then\n    if test \"x${JEMALLOC_PREFIX}\" = \"x\" ; then\n      AC_DEFINE([JEMALLOC_GLIBC_MALLOC_HOOK], [ ], [ ])\n      wrap_syms=\"${wrap_syms} __free_hook __malloc_hook __realloc_hook\"\n    fi\n  fi\n\n  JE_COMPILABLE([glibc memalign hook], [\n  #include <stddef.h>\n\n  extern void *(* __memalign_hook)(size_t alignment, size_t size);\n], [\n    void *ptr = 0L;\n    if (__memalign_hook) ptr = __memalign_hook(16, 7);\n], [je_cv_glibc_memalign_hook])\n  if test \"x${je_cv_glibc_memalign_hook}\" = \"xyes\" ; then\n    if test \"x${JEMALLOC_PREFIX}\" = \"x\" ; then\n      AC_DEFINE([JEMALLOC_GLIBC_MEMALIGN_HOOK], [ ], [ ])\n      wrap_syms=\"${wrap_syms} __memalign_hook\"\n    fi\n  fi\nfi\n\nJE_COMPILABLE([pthreads adaptive mutexes], [\n#include <pthread.h>\n], [\n  pthread_mutexattr_t attr;\n  pthread_mutexattr_init(&attr);\n  pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);\n  pthread_mutexattr_destroy(&attr);\n], [je_cv_pthread_mutex_adaptive_np])\nif test \"x${je_cv_pthread_mutex_adaptive_np}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_PTHREAD_MUTEX_ADAPTIVE_NP], [ ], [ ])\nfi\n\nJE_COMPILABLE([gettid], [\n#include <unistd.h>\n], [\n  int tid = gettid();\n], [je_cv_gettid])\nif test \"x${je_cv_gettid}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_HAVE_GETTID], [ ], [ ])\nfi\n\nJE_CFLAGS_SAVE()\nJE_CFLAGS_ADD([-D_GNU_SOURCE])\nJE_CFLAGS_ADD([-Werror])\nJE_CFLAGS_ADD([-herror_on_warning])\nJE_COMPILABLE([strerror_r returns char with gnu source], [\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n], [\n  char *buffer = (char *) malloc(100);\n  char *error = strerror_r(EINVAL, buffer, 100);\n  printf(\"%s\\n\", error);\n], [je_cv_strerror_r_returns_char_with_gnu_source])\nJE_CFLAGS_RESTORE()\nif test \"x${je_cv_strerror_r_returns_char_with_gnu_source}\" = \"xyes\" ; then\n  AC_DEFINE([JEMALLOC_STRERROR_R_RETURNS_CHAR_WITH_GNU_SOURCE], [ ], [ ])\nfi\n\ndnl ============================================================================\ndnl Check for typedefs, structures, and compiler characteristics.\nAC_HEADER_STDBOOL\n\ndnl ============================================================================\ndnl Define commands that generate output files.\n\nAC_CONFIG_COMMANDS([include/jemalloc/internal/public_symbols.txt], [\n  f=\"${objroot}include/jemalloc/internal/public_symbols.txt\"\n  mkdir -p \"${objroot}include/jemalloc/internal\"\n  cp /dev/null \"${f}\"\n  for nm in `echo ${mangling_map} |tr ',' ' '` ; do\n    n=`echo ${nm} |tr ':' ' ' |awk '{print $[]1}'`\n    m=`echo ${nm} |tr ':' ' ' |awk '{print $[]2}'`\n    echo \"${n}:${m}\" >> \"${f}\"\n    dnl Remove name from public_syms so that it isn't redefined later.\n    public_syms=`for sym in ${public_syms}; do echo \"${sym}\"; done |grep -v \"^${n}\\$\" |tr '\\n' ' '`\n  done\n  for sym in ${public_syms} ; do\n    n=\"${sym}\"\n    m=\"${JEMALLOC_PREFIX}${sym}\"\n    echo \"${n}:${m}\" >> \"${f}\"\n  done\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n  mangling_map=\"${mangling_map}\"\n  public_syms=\"${public_syms}\"\n  JEMALLOC_PREFIX=\"${JEMALLOC_PREFIX}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/internal/private_symbols.awk], [\n  f=\"${objroot}include/jemalloc/internal/private_symbols.awk\"\n  mkdir -p \"${objroot}include/jemalloc/internal\"\n  export_syms=`for sym in ${public_syms}; do echo \"${JEMALLOC_PREFIX}${sym}\"; done; for sym in ${wrap_syms}; do echo \"${sym}\"; done;`\n  \"${srcdir}/include/jemalloc/internal/private_symbols.sh\" \"${SYM_PREFIX}\" ${export_syms} > \"${objroot}include/jemalloc/internal/private_symbols.awk\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n  public_syms=\"${public_syms}\"\n  wrap_syms=\"${wrap_syms}\"\n  SYM_PREFIX=\"${SYM_PREFIX}\"\n  JEMALLOC_PREFIX=\"${JEMALLOC_PREFIX}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/internal/private_symbols_jet.awk], [\n  f=\"${objroot}include/jemalloc/internal/private_symbols_jet.awk\"\n  mkdir -p \"${objroot}include/jemalloc/internal\"\n  export_syms=`for sym in ${public_syms}; do echo \"jet_${sym}\"; done; for sym in ${wrap_syms}; do echo \"${sym}\"; done;`\n  \"${srcdir}/include/jemalloc/internal/private_symbols.sh\" \"${SYM_PREFIX}\" ${export_syms} > \"${objroot}include/jemalloc/internal/private_symbols_jet.awk\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n  public_syms=\"${public_syms}\"\n  wrap_syms=\"${wrap_syms}\"\n  SYM_PREFIX=\"${SYM_PREFIX}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/internal/public_namespace.h], [\n  mkdir -p \"${objroot}include/jemalloc/internal\"\n  \"${srcdir}/include/jemalloc/internal/public_namespace.sh\" \"${objroot}include/jemalloc/internal/public_symbols.txt\" > \"${objroot}include/jemalloc/internal/public_namespace.h\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/internal/public_unnamespace.h], [\n  mkdir -p \"${objroot}include/jemalloc/internal\"\n  \"${srcdir}/include/jemalloc/internal/public_unnamespace.sh\" \"${objroot}include/jemalloc/internal/public_symbols.txt\" > \"${objroot}include/jemalloc/internal/public_unnamespace.h\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/jemalloc_protos_jet.h], [\n  mkdir -p \"${objroot}include/jemalloc\"\n  cat \"${srcdir}/include/jemalloc/jemalloc_protos.h.in\" | sed -e 's/@je_@/jet_/g' > \"${objroot}include/jemalloc/jemalloc_protos_jet.h\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/jemalloc_rename.h], [\n  mkdir -p \"${objroot}include/jemalloc\"\n  \"${srcdir}/include/jemalloc/jemalloc_rename.sh\" \"${objroot}include/jemalloc/internal/public_symbols.txt\" > \"${objroot}include/jemalloc/jemalloc_rename.h\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/jemalloc_mangle.h], [\n  mkdir -p \"${objroot}include/jemalloc\"\n  \"${srcdir}/include/jemalloc/jemalloc_mangle.sh\" \"${objroot}include/jemalloc/internal/public_symbols.txt\" je_ > \"${objroot}include/jemalloc/jemalloc_mangle.h\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/jemalloc_mangle_jet.h], [\n  mkdir -p \"${objroot}include/jemalloc\"\n  \"${srcdir}/include/jemalloc/jemalloc_mangle.sh\" \"${objroot}include/jemalloc/internal/public_symbols.txt\" jet_ > \"${objroot}include/jemalloc/jemalloc_mangle_jet.h\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n])\nAC_CONFIG_COMMANDS([include/jemalloc/jemalloc.h], [\n  mkdir -p \"${objroot}include/jemalloc\"\n  \"${srcdir}/include/jemalloc/jemalloc.sh\" \"${objroot}\" > \"${objroot}include/jemalloc/jemalloc${install_suffix}.h\"\n], [\n  srcdir=\"${srcdir}\"\n  objroot=\"${objroot}\"\n  install_suffix=\"${install_suffix}\"\n])\n\ndnl Process .in files.\nAC_SUBST([cfghdrs_in])\nAC_SUBST([cfghdrs_out])\nAC_CONFIG_HEADERS([$cfghdrs_tup])\n\ndnl ============================================================================\ndnl Generate outputs.\n\nAC_CONFIG_FILES([$cfgoutputs_tup config.stamp bin/jemalloc-config bin/jemalloc.sh bin/jeprof])\nAC_SUBST([cfgoutputs_in])\nAC_SUBST([cfgoutputs_out])\nAC_OUTPUT\n\ndnl ============================================================================\ndnl Print out the results of configuration.\nAC_MSG_RESULT([===============================================================================])\nAC_MSG_RESULT([jemalloc version   : ${jemalloc_version}])\nAC_MSG_RESULT([library revision   : ${rev}])\nAC_MSG_RESULT([])\nAC_MSG_RESULT([CONFIG             : ${CONFIG}])\nAC_MSG_RESULT([CC                 : ${CC}])\nAC_MSG_RESULT([CONFIGURE_CFLAGS   : ${CONFIGURE_CFLAGS}])\nAC_MSG_RESULT([SPECIFIED_CFLAGS   : ${SPECIFIED_CFLAGS}])\nAC_MSG_RESULT([EXTRA_CFLAGS       : ${EXTRA_CFLAGS}])\nAC_MSG_RESULT([CPPFLAGS           : ${CPPFLAGS}])\nAC_MSG_RESULT([CXX                : ${CXX}])\nAC_MSG_RESULT([CONFIGURE_CXXFLAGS : ${CONFIGURE_CXXFLAGS}])\nAC_MSG_RESULT([SPECIFIED_CXXFLAGS : ${SPECIFIED_CXXFLAGS}])\nAC_MSG_RESULT([EXTRA_CXXFLAGS     : ${EXTRA_CXXFLAGS}])\nAC_MSG_RESULT([LDFLAGS            : ${LDFLAGS}])\nAC_MSG_RESULT([EXTRA_LDFLAGS      : ${EXTRA_LDFLAGS}])\nAC_MSG_RESULT([DSO_LDFLAGS        : ${DSO_LDFLAGS}])\nAC_MSG_RESULT([LIBS               : ${LIBS}])\nAC_MSG_RESULT([RPATH_EXTRA        : ${RPATH_EXTRA}])\nAC_MSG_RESULT([])\nAC_MSG_RESULT([XSLTPROC           : ${XSLTPROC}])\nAC_MSG_RESULT([XSLROOT            : ${XSLROOT}])\nAC_MSG_RESULT([])\nAC_MSG_RESULT([PREFIX             : ${PREFIX}])\nAC_MSG_RESULT([BINDIR             : ${BINDIR}])\nAC_MSG_RESULT([DATADIR            : ${DATADIR}])\nAC_MSG_RESULT([INCLUDEDIR         : ${INCLUDEDIR}])\nAC_MSG_RESULT([LIBDIR             : ${LIBDIR}])\nAC_MSG_RESULT([MANDIR             : ${MANDIR}])\nAC_MSG_RESULT([])\nAC_MSG_RESULT([srcroot            : ${srcroot}])\nAC_MSG_RESULT([abs_srcroot        : ${abs_srcroot}])\nAC_MSG_RESULT([objroot            : ${objroot}])\nAC_MSG_RESULT([abs_objroot        : ${abs_objroot}])\nAC_MSG_RESULT([])\nAC_MSG_RESULT([JEMALLOC_PREFIX    : ${JEMALLOC_PREFIX}])\nAC_MSG_RESULT([JEMALLOC_PRIVATE_NAMESPACE])\nAC_MSG_RESULT([                   : ${JEMALLOC_PRIVATE_NAMESPACE}])\nAC_MSG_RESULT([install_suffix     : ${install_suffix}])\nAC_MSG_RESULT([malloc_conf        : ${config_malloc_conf}])\nAC_MSG_RESULT([documentation      : ${enable_doc}])\nAC_MSG_RESULT([shared libs        : ${enable_shared}])\nAC_MSG_RESULT([static libs        : ${enable_static}])\nAC_MSG_RESULT([autogen            : ${enable_autogen}])\nAC_MSG_RESULT([debug              : ${enable_debug}])\nAC_MSG_RESULT([stats              : ${enable_stats}])\nAC_MSG_RESULT([experimental_smallocx : ${enable_experimental_smallocx}])\nAC_MSG_RESULT([prof               : ${enable_prof}])\nAC_MSG_RESULT([prof-libunwind     : ${enable_prof_libunwind}])\nAC_MSG_RESULT([prof-frameptr      : ${enable_prof_frameptr}])\nAC_MSG_RESULT([prof-libgcc        : ${enable_prof_libgcc}])\nAC_MSG_RESULT([prof-gcc           : ${enable_prof_gcc}])\nAC_MSG_RESULT([fill               : ${enable_fill}])\nAC_MSG_RESULT([utrace             : ${enable_utrace}])\nAC_MSG_RESULT([xmalloc            : ${enable_xmalloc}])\nAC_MSG_RESULT([log                : ${enable_log}])\nAC_MSG_RESULT([lazy_lock          : ${enable_lazy_lock}])\nAC_MSG_RESULT([cache-oblivious    : ${enable_cache_oblivious}])\nAC_MSG_RESULT([pageid             : ${enable_pageid}])\nAC_MSG_RESULT([cxx                : ${enable_cxx}])\nAC_MSG_RESULT([dss                : ${enable_dss}])\nAC_MSG_RESULT([===============================================================================])\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc_internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "jemalloc.pc.in",
          "type": "blob",
          "size": 0.5087890625,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\ninstall_suffix=@install_suffix@\njemalloc_prefix=@JEMALLOC_PREFIX@\n\nName: jemalloc\nDescription: A general purpose malloc(3) implementation that emphasizes fragmentation avoidance and scalable concurrency support.\nURL: https://jemalloc.net/\nVersion: @jemalloc_version_major@.@jemalloc_version_minor@.@jemalloc_version_bugfix@_@jemalloc_version_nrev@\nCflags: -I${includedir}\nLibs: -L${libdir} -ljemalloc${install_suffix}\nLibs.private: @LIBS@\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "msvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_tests.sh",
          "type": "blob",
          "size": 0.046875,
          "content": "$(dirname \"$)\")/scripts/gen_run_tests.py | bash\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}