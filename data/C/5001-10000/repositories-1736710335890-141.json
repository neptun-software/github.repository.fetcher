{
  "metadata": {
    "timestamp": 1736710335890,
    "page": 141,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lpereira/lwan",
      "stars": 5943,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 3.2314453125,
          "content": "---\nLanguage:        Cpp\nAccessModifierOffset: -2\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: Right\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: false\nBinPackArguments: true\nBinPackParameters: false\nBraceWrapping:   \n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   true\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Custom\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     80\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:   \n  - list_for_each\n  - list_for_each_rev\n  - list_for_each_safe\n  - list_for_each_off\n  - list_for_each_safe_off\n  - LWAN_ARRAY_FOREACH_REVERSE\n  - LWAN_ARRAY_FOREACH\n  - STRING_SWITCH\n  - STRING_SWITCH_L\n  - STRING_SWITCH_SMALL\n  - STRING_SWITCH_SMALL_L\n  - STRING_SWITCH_LARGE\n  - STRING_SWITCH_LARGE_L\nIncludeCategories: \n  - Regex:           '^\"lwan-.*'\n    Priority:        2\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n  - Regex:           '.*'\n    Priority:        1\nIncludeIsMainRegex: '(Test)?$'\nIndentCaseLabels: false\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBlockIndentWidth: 2\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 60\nPointerAlignment: Right\nReflowComments:  true\nSortIncludes:    true\nSortUsingDeclarations: true\nSpaceAfterCStyleCast: false\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 1\nSpacesInAngles:  false\nSpacesInContainerLiterals: true\nSpacesInCStyleCastParentheses: false\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard:        Cpp11\nTabWidth:        8\nUseTab:          Never\n...\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "*~\nDEADJOE\n*.o\nbuild/*\n.gitignore\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.046875,
          "content": "L. Pereira <l@tia.mat.br> <leandro@hardinfo.org>"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.6982421875,
          "content": "cmake_minimum_required(VERSION 3.20)\nproject(lwan C)\nset(PROJECT_DESCRIPTION \"Scalable, high performance, experimental web server\")\nmessage(STATUS \"Running CMake for ${PROJECT_NAME} (${PROJECT_DESCRIPTION})\")\n\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/src/cmake\")\n\ninclude_directories(${CMAKE_BINARY_DIR})\n\ninclude(CheckCCompilerFlag)\ninclude(CheckCSourceCompiles)\ninclude(CheckFunctionExists)\ninclude(CheckSymbolExists)\ninclude(CheckIncludeFile)\ninclude(CheckIncludeFiles)\ninclude(EnableCFlag)\ninclude(FindPkgConfig)\ninclude(TrySanitizer)\ninclude(GNUInstallDirs)\n\nif (NOT CMAKE_BUILD_TYPE)\n\tmessage(STATUS \"No build type selected, defaulting to Debug\")\n\tset(CMAKE_BUILD_TYPE \"Debug\")\nendif ()\n\n#\n# Find libraries\n#\nfind_package(ZLIB REQUIRED)\nfind_package(Threads REQUIRED)\nset(ADDITIONAL_LIBRARIES ${ZLIB_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})\nif (NOT ZLIB_INCLUDES STREQUAL \"\")\n\tinclude_directories(${ZLIB_INCLUDES})\nendif ()\n\nforeach (pc_file luajit lua lua51 lua5.1 lua-5.1)\n\tif (${pc_file} STREQUAL \"luajit\")\n\t\tpkg_check_modules(LUA luajit>=2.0 luajit<2.2)\n\t\tset(LWAN_HAVE_LUA_JIT 1)\n\telse ()\n\t\tpkg_check_modules(LUA ${pc_file}>=5.1.0 ${pc_file}<=5.1.999)\n\tendif ()\n\tif (LUA_FOUND)\n\t\tlist(APPEND ADDITIONAL_LIBRARIES \"${LUA_LDFLAGS}\")\n\t\tinclude_directories(${LUA_INCLUDE_DIRS})\n\t\tbreak()\n\tendif()\nendforeach ()\nif (NOT LUA_FOUND)\n\tmessage(STATUS \"Disabling Lua support\")\nelse ()\n\tmessage(STATUS \"Building with Lua support using ${LUA_LIBRARIES}\")\n\tset(LWAN_HAVE_LUA 1)\nendif ()\n\noption(ENABLE_BROTLI \"Enable support for brotli\" \"ON\")\nif (ENABLE_BROTLI)\n\tpkg_check_modules(BROTLI libbrotlienc libbrotlidec libbrotlicommon)\nendif ()\nif (BROTLI_FOUND)\n\tlist(APPEND ADDITIONAL_LIBRARIES \"${BROTLI_LDFLAGS}\")\n\tif (NOT BROTLI_INCLUDE_DIRS STREQUAL \"\")\n\t\tinclude_directories(${BROTLI_INCLUDE_DIRS})\n\tendif ()\n\tset(LWAN_HAVE_BROTLI 1)\nendif ()\n\noption(ENABLE_ZSTD \"Enable support for zstd\" \"ON\")\nif (ENABLE_ZSTD)\n\tpkg_check_modules(ZSTD libzstd)\nendif ()\nif (ZSTD_FOUND)\n\tlist(APPEND ADDITIONAL_LIBRARIES \"${ZSTD_LDFLAGS}\")\n\tif (NOT ZSTD_INCLUDE_DIRS STREQUAL \"\")\n\t\tinclude_directories(${ZSTD_INCLUDE_DIRS})\n\tendif ()\n\tset(LWAN_HAVE_ZSTD 1)\nendif ()\n\noption(ENABLE_TLS \"Enable support for TLS (Linux-only)\" \"OFF\")\nif (ENABLE_TLS)\n\tcheck_include_file(linux/tls.h LWAN_HAVE_LINUX_TLS_H)\n\tif (LWAN_HAVE_LINUX_TLS_H)\n\t\t# TLS support requires Linux, as Lwan uses the kTLS flavor\n\t\t# only supported there.\n\t\t# TODO: Try using BearSSL instead of mbedTLS and only link\n\t\t# against things that are absolutely necessary to perform\n\t\t# a TLS 1.2 handshake to inform the kernel about the keys.\n\t\tfind_library(MBEDTLS NAMES mbedtls)\n\t\tif (NOT ${MBEDTLS} STREQUAL \"MBEDTLS-NOTFOUND\")\n\t\t\tfind_library(MBEDTLS_CRYPTO NAMES mbedcrypto REQUIRED)\n\t\t\tfind_library(MBEDTLS_X509 NAMES mbedx509 REQUIRED)\n\n\t\t\tmessage(STATUS \"Building with Linux kTLS + mbedTLS at ${MBEDTLS}\")\n\t\t\tset(LWAN_HAVE_MBEDTLS 1)\n\t\t\tlist(APPEND ADDITIONAL_LIBRARIES ${MBEDTLS} ${MBEDTLS_CRYPTO} ${MBEDTLS_X509})\n\t\telse ()\n\t\t\tmessage(STATUS \"mbedTLS not found: not building with TLS support\")\n\t\tendif ()\n\telse ()\n\t\tmessage(STATUS \"<linux/tls.h> not found: not building with TLS support\")\n\tendif ()\nendif ()\n\noption(USE_ALTERNATIVE_MALLOC \"Use alternative malloc implementations\" \"OFF\")\nif (USE_ALTERNATIVE_MALLOC)\n\tunset(ALTMALLOC_LIBS CACHE)\n\tunset(ALTMALLOC_LIBRARY CACHE)\n\n\tif (${USE_ALTERNATIVE_MALLOC} STREQUAL \"mimalloc\")\n\t\tset(ALTMALLOC_LIBS mimalloc)\n\telseif (${USE_ALTERNATIVE_MALLOC} STREQUAL \"tcmalloc\")\n\t\tset(ALTMALLOC_LIBS tcmalloc_minimal tcmalloc)\n\telseif (${USE_ALTERNATIVE_MALLOC} STREQUAL \"jemalloc\")\n\t\tset(ALTMALLOC_LIBS jemalloc)\n\telse ()\n\t\tset(ALTMALLOC_LIBS \"mimalloc tcmalloc_minimal tcmalloc jemalloc\")\n\tendif()\n\n\tfind_library(ALTMALLOC_LIBRARY NAMES ${ALTMALLOC_LIBS})\n\tif (ALTMALLOC_LIBRARY)\n\t\tmessage(STATUS \"Using alternative malloc (${USE_ALTERNATIVE_MALLOC}): ${ALTMALLOC_LIBRARY}\")\n\t\tlist(PREPEND ADDITIONAL_LIBRARIES ${ALTMALLOC_LIBRARY})\n\tendif ()\nendif ()\n\n###\n# syslog\noption(USE_SYSLOG \"Enable syslog\" \"OFF\")\nif (${USE_SYSLOG} STREQUAL \"ON\" AND LWAN_HAVE_SYSLOG_FUNC)\n    set(LWAN_HAVE_SYSLOG 1)\nendif ()\nif (LWAN_HAVE_SYSLOG)\n    message(STATUS \"Using syslog/rsyslog for logging.\")\nendif ()\n\n#\n# Look for C library functions\n#\n\nset(CMAKE_EXTRA_INCLUDE_FILES\n\tfcntl.h\n\tstdlib.h\n\tsys/socket.h\n\tsys/types.h\n\tstring.h\n\ttime.h\n\tunistd.h\n\tdlfcn.h\n\tsyslog.h\n)\ncheck_include_file(linux/capability.h LWAN_HAVE_LINUX_CAPABILITY)\ncheck_include_file(sys/auxv.h LWAN_HAVE_SYS_AUXV)\ncheck_include_file(sys/epoll.h LWAN_HAVE_EPOLL)\ncheck_include_files(\"sys/time.h;sys/types.h;sys/event.h\" LWAN_HAVE_SYS_EVENT)\nif (LWAN_HAVE_SYS_EVENT)\n\tset(CMAKE_EXTRA_INCLUDE_FILES\n\t\t${CMAKE_EXTRA_INCLUDE_FILES}\n\t\tsys/event.h sys/types.h sys/time.h\n\t)\n\tcheck_function_exists(kqueue LWAN_HAVE_KQUEUE)\n\tcheck_function_exists(kqueue1 LWAN_HAVE_KQUEUE1)\nendif ()\ncheck_include_file(alloca.h LWAN_HAVE_ALLOCA_H)\nif (LWAN_HAVE_SYS_AUXV)\n\tset(CMAKE_EXTRA_INCLUDE_FILES\n\t\t${CMAKE_EXTRA_INCLUDE_FILES}\n\t\tsys/auxv.h\n\t)\n\tcheck_function_exists(getauxval LWAN_HAVE_GETAUXVAL)\nendif ()\n\nset(CMAKE_REQUIRED_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})\n\ncheck_function_exists(get_current_dir_name LWAN_HAVE_GET_CURRENT_DIR_NAME)\ncheck_symbol_exists(reallocarray stdlib.h LWAN_HAVE_REALLOCARRAY)\ncheck_symbol_exists(eventfd sys/eventfd.h LWAN_HAVE_EVENTFD)\ncheck_symbol_exists(mincore sys/mman.h LWAN_HAVE_MINCORE)\ncheck_function_exists(mempcpy LWAN_HAVE_MEMPCPY)\ncheck_function_exists(memrchr LWAN_HAVE_MEMRCHR)\ncheck_function_exists(pipe2 LWAN_HAVE_PIPE2)\ncheck_function_exists(accept4 LWAN_HAVE_ACCEPT4)\ncheck_function_exists(readahead LWAN_HAVE_READAHEAD)\ncheck_function_exists(mkostemp LWAN_HAVE_MKOSTEMP)\ncheck_function_exists(clock_gettime LWAN_HAVE_CLOCK_GETTIME)\ncheck_function_exists(pthread_barrier_init LWAN_HAVE_PTHREADBARRIER)\ncheck_function_exists(pthread_set_name_np LWAN_HAVE_PTHREAD_SET_NAME_NP)\ncheck_function_exists(posix_fadvise LWAN_HAVE_POSIX_FADVISE)\ncheck_function_exists(getentropy LWAN_HAVE_GETENTROPY)\ncheck_function_exists(fwrite_unlocked LWAN_HAVE_FWRITE_UNLOCKED)\ncheck_function_exists(gettid LWAN_HAVE_GETTID)\ncheck_function_exists(secure_getenv LWAN_HAVE_SECURE_GETENV)\ncheck_function_exists(statfs LWAN_HAVE_STATFS)\ncheck_function_exists(syslog LWAN_HAVE_SYSLOG_FUNC)\ncheck_function_exists(stpcpy LWAN_HAVE_STPCPY)\n\n# This is available on -ldl in glibc, but some systems (such as OpenBSD)\n# will bundle these in the C library.  This isn't required for glibc anyway,\n# as there's getauxval(), with a fallback to reading the link\n# /proc/self/exe.\ncheck_function_exists(dladdr LWAN_HAVE_DLADDR)\n\nif (NOT LWAN_HAVE_CLOCK_GETTIME AND ${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n\tlist(APPEND ADDITIONAL_LIBRARIES rt)\nendif ()\n\n\n#\n# Ensure compiler is compatible with GNU11 standard\n#\ncheck_c_compiler_flag(-std=gnu11 LWAN_HAVE_STD_GNU11)\nif (NOT LWAN_HAVE_STD_GNU11)\n\tmessage(FATAL_ERROR \"Compiler does not support -std=gnu11. Consider using a newer compiler\")\nendif()\n\n\n#\n# Check for GCC builtin functions\n#\ncheck_c_source_compiles(\"int main(void) { __builtin_cpu_init(); }\" LWAN_HAVE_BUILTIN_CPU_INIT)\ncheck_c_source_compiles(\"int main(void) { __builtin_expect_with_probability(0, 0, 0); }\" LWAN_HAVE_BUILTIN_EXPECT_PROBABILITY)\ncheck_c_source_compiles(\"int main(void) { __builtin_clzll(0); }\" LWAN_HAVE_BUILTIN_CLZLL)\ncheck_c_source_compiles(\"int main(void) { __builtin_fpclassify(0, 0, 0, 0, 0, 0.0f); }\" LWAN_HAVE_BUILTIN_FPCLASSIFY)\ncheck_c_source_compiles(\"int main(void) { unsigned long long p; (void)__builtin_mul_overflow(0, 0, &p); }\" LWAN_HAVE_BUILTIN_MUL_OVERFLOW)\ncheck_c_source_compiles(\"int main(void) { unsigned long long p; (void)__builtin_add_overflow(0, 0, &p); }\" LWAN_HAVE_BUILTIN_ADD_OVERFLOW)\ncheck_c_source_compiles(\"int main(void) { _Static_assert(1, \\\"\\\"); }\" LWAN_HAVE_STATIC_ASSERT)\ncheck_c_source_compiles(\"#include <linux/filter.h>\n#include <sys/socket.h>\n#include <stddef.h>\nint main(void) {\n\tsetsockopt(0, SOL_SOCKET, SO_ATTACH_REUSEPORT_CBPF, NULL, 0);\n}\" LWAN_HAVE_SO_ATTACH_REUSEPORT_CBPF)\ncheck_c_source_compiles(\"#include <sys/socket.h>\n#include <stddef.h>\nint main(void) {\n\tsetsockopt(0, SOL_SOCKET, SO_INCOMING_CPU, NULL, 0);\n}\" LWAN_HAVE_SO_INCOMING_CPU)\n\n#\n# Look for Valgrind header\n#\nfind_path(VALGRIND_INCLUDE_DIR valgrind.h /usr/include /usr/include/valgrind /usr/local/include /usr/local/include/valgrind)\nif (VALGRIND_INCLUDE_DIR)\n\tmessage(STATUS \"Building with Valgrind support\")\n\tinclude_directories(${VALGRIND_INCLUDE_DIR})\n\n\tset(LWAN_HAVE_VALGRIND 1)\nelse ()\n\tmessage(STATUS \"Valgrind headers not found -- disabling valgrind support\")\nendif()\n\noption(MTUNE_NATIVE \"Build with -mtune=native/-march=native\" \"ON\")\nif (MTUNE_NATIVE)\n    enable_c_flag_if_avail(-mtune=native C_FLAGS_REL LWAN_HAVE_MTUNE_NATIVE)\n    enable_c_flag_if_avail(-march=native C_FLAGS_REL LWAN_HAVE_MARCH_NATIVE)\nendif ()\n\nenable_c_flag_if_avail(-fstack-protector-explicit CMAKE_C_FLAGS\n\tLWAN_HAVE_STACK_PROTECTOR_EXPLICIT)\n\n#\n# Check if immediate binding and read-only global offset table flags\n# can be used\n#\nif (APPLE)\n\tenable_c_flag_if_avail(-Wl,-bind_at_load CMAKE_EXE_LINKER_FLAGS\n\t\tLWAN_HAVE_IMMEDIATE_BINDING)\nelse ()\n\tenable_c_flag_if_avail(-Wl,-z,now CMAKE_EXE_LINKER_FLAGS\n\t\tLWAN_HAVE_IMMEDIATE_BINDING)\n\tenable_c_flag_if_avail(-Wl,-z,relro CMAKE_EXE_LINKER_FLAGS\n\t\tLWAN_HAVE_READ_ONLY_GOT)\n\tenable_c_flag_if_avail(-fno-plt CMAKE_C_FLAGS\n\t\tLWAN_HAVE_NO_PLT)\n\tenable_c_flag_if_avail(-Wl,-z,noexecstack CMAKE_EXE_LINKER_FLAGS\n\t\tLWAN_HAVE_NOEXEC_STACK)\nendif ()\n\nif (${CMAKE_BUILD_TYPE} MATCHES \"Rel\")\n\tenable_c_flag_if_avail(-falign-functions=32 C_FLAGS_REL LWAN_HAVE_ALIGN_FNS)\n\tenable_c_flag_if_avail(-fno-semantic-interposition C_FLAGS_REL LWAN_HAVE_NO_SEMANTIC_INTERPOSITION)\n\tenable_c_flag_if_avail(-malign-data=abi C_FLAGS_REL LWAN_HAVE_ALIGN_DATA)\n\tenable_c_flag_if_avail(-fno-asynchronous-unwind-tables C_FLAGS_REL LWAN_HAVE_NO_ASYNC_UNWIND_TABLES)\n\n\tenable_c_flag_if_avail(-fPIC -flto C_FLAGS_REL LWAN_HAVE_LTO)\n\n\tenable_c_flag_if_avail(-ffat-lto-objects C_FLAGS_REL LWAN_HAVE_LTO_FAT_OBJS)\n\tenable_c_flag_if_avail(-mcrc32 C_FLAGS_REL LWAN_HAVE_BUILTIN_IA32_CRC32)\nendif ()\n\nif (${CMAKE_BUILD_TYPE} MATCHES \"Deb\")\n\toption(SANITIZER \"Use sanitizer (undefined, address, thread, none)\" \"none\")\n\n\tif (${SANITIZER} MATCHES \"(undefined|ub|ubsan)\")\n\t\ttry_sanitizer(\"undefined\")\n\telseif (${SANITIZER} MATCHES \"(address|memory)\")\n\t\ttry_sanitizer(\"address\")\n\telseif (${SANITIZER} MATCHES \"(thread|race)\")\n\t\ttry_sanitizer(\"thread\")\n\telse ()\n\t\tmessage(STATUS \"Building without a sanitizer\")\n\tendif ()\nendif ()\n\n#\n# These warnings are only supported by GCC, and some only in newer versions.\n#\nenable_warning_if_supported(-Waggressive-loop-optimizations)\nenable_warning_if_supported(-Warith-conversion)\nenable_warning_if_supported(-Warray-bounds)\nenable_warning_if_supported(-Wdouble-promotion)\nenable_warning_if_supported(-Wduplicated-branches)\nenable_warning_if_supported(-Wduplicated-cond)\nenable_warning_if_supported(-Wformat-overflow)\nenable_warning_if_supported(-Wlogical-not-parentheses)\nenable_warning_if_supported(-Wlogical-op)\nenable_warning_if_supported(-Wno-override-init)\nenable_warning_if_supported(-Wno-unknown-warning-option)\nenable_warning_if_supported(-Wno-unused-parameter)\nenable_warning_if_supported(-Wrestrict)\nenable_warning_if_supported(-Wstringop-overflow)\nenable_warning_if_supported(-Wstringop-overread)\nenable_warning_if_supported(-Wstringop-truncation)\nenable_warning_if_supported(-Wunsequenced)\nenable_warning_if_supported(-Wvla)\n\n# While a useful warning, this is giving false positives.\nenable_warning_if_supported(-Wno-free-nonheap-object)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Wextra -Wshadow -Wconversion -std=gnu11\")\nset(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} ${C_FLAGS_REL}\")\nset(CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO} ${C_FLAGS_REL}\")\nset(CMAKE_C_FLAGS_MINSIZEREL \"${CMAKE_C_FLAGS_MINSIZEREL} ${C_FLAGS_REL}\")\nadd_definitions(\"-D_FILE_OFFSET_BITS=64\")\nadd_definitions(\"-D_TIME_BITS=64\")\n\nif (APPLE)\n\tset(LWAN_COMMON_LIBS -Wl,-force_load lwan-static)\nelse ()\n\tset(LWAN_COMMON_LIBS -Wl,-whole-archive lwan-static -Wl,-no-whole-archive)\nendif ()\n\nif (NOT CMAKE_SYSTEM_PROCESSOR MATCHES \"^x86_64|amd64|aarch64\")\n\tset(LWAN_HAVE_LIBUCONTEXT 1)\nendif ()\n\ninclude_directories(src/lib)\ninclude_directories(BEFORE src/lib/missing)\n\n#\n# Generate lwan-build-config.h\n#\nadd_definitions(-include ${CMAKE_BINARY_DIR}/lwan-build-config.h)\nconfigure_file(\n\t\"${CMAKE_CURRENT_SOURCE_DIR}/src/cmake/lwan-build-config.h.cmake\"\n\t\"${CMAKE_CURRENT_BINARY_DIR}/lwan-build-config.h\"\n)\ninstall(\n\tFILES ${CMAKE_CURRENT_BINARY_DIR}/lwan-build-config.h\n\tDESTINATION \"include/lwan\"\n)\n\n\n#\n# Generate pkg-config file\n#\nset(PKG_CONFIG_REQUIRES \"\")\nset(PKG_CONFIG_LIBDIR \"\\${prefix}/lib\")\nset(PKG_CONFIG_INCLUDEDIR \"\\${prefix}/include/lwan\")\n\nstring (REPLACE \";\" \" \" ADDITIONAL_LIBRARIES_STR \"${ADDITIONAL_LIBRARIES}\")\nset(PKG_CONFIG_LIBS \"-L\\${libdir} -llwan ${ADDITIONAL_LIBRARIES_STR}\")\nunset(ADDITIONAL_LIBRARIES_STR)\nset(PKG_CONFIG_CFLAGS \"-I\\${includedir}\")\n\nexecute_process(\n\tCOMMAND git log -1 --format=%h\n\tWORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n\tOUTPUT_VARIABLE PROJECT_VERSION\n\tOUTPUT_STRIP_TRAILING_WHITESPACE\n)\nconfigure_file(\n\t\"${CMAKE_CURRENT_SOURCE_DIR}/src/cmake/lwan.pc.cmake\"\n\t\"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n)\ninstall(FILES \"${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc\" DESTINATION lib/pkgconfig)\n\n\n#\n# Set up testsuite and benchmark targets\n#\nfind_package(Python3 COMPONENTS Interpreter)\nif (LUA_FOUND AND Python3_Interpreter_FOUND)\n\tadd_custom_target(testsuite\n\t\tCOMMAND ${Python3_EXECUTABLE}\n\t\t\t${PROJECT_SOURCE_DIR}/src/scripts/testsuite.py -v ${CMAKE_BINARY_DIR}\n\t\tDEPENDS testrunner techempower\n\t\tWORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n\t\tCOMMENT \"Running test suite.\")\n\n\tadd_custom_target(benchmark\n\t\tCOMMAND ${Python3_EXECUTABLE}\n\t\t\t${PROJECT_SOURCE_DIR}/src/scripts/benchmark.py\n\t\t\t${CMAKE_BINARY_DIR}/src/bin/testrunner/testrunner\n\t\tDEPENDS testrunner weighttp\n\t\tWORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n\t\tCOMMENT \"Running benchmark.\")\nendif()\n\nadd_subdirectory(src)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Containerfile",
          "type": "blob",
          "size": 0.498046875,
          "content": "FROM docker.io/library/alpine:3.14.2 AS build\nRUN apk add --no-cache gcc make musl-dev cmake pkgconfig linux-headers \\\n      luajit-dev sqlite-dev zlib-dev brotli-dev zstd-dev\nCOPY . /lwan\nWORKDIR /lwan/build\nRUN cmake .. -DCMAKE_BUILD_TYPE=Release -DMTUNE_NATIVE=OFF\nRUN make -j\n\nFROM docker.io/library/alpine:3.14.2\nRUN apk add --no-cache luajit sqlite zlib brotli zstd-dev\nCOPY --from=build /lwan/build/src/bin/lwan/lwan .\nCOPY --from=build /lwan/lwan.conf .\nEXPOSE 8080\nVOLUME /wwwroot\nENTRYPOINT [\"/lwan\"]"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.0126953125,
          "content": "Containerfile"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 59.6328125,
          "content": "Lwan Web Server\n===============\n\nLwan is a **high-performance** & **scalable** web server.\n\nThe [project web site](https://lwan.ws/) contains more details.\n\nBuild status\n------------\n\n| OS          | Arch   | Release | Debug | Static Analysis | Tests |\n|-------------|--------|---------|-------|-----------------|------------|\n| Linux       | x86_64 | ![release](https://shield.lwan.ws/img/gycKbr/release \"Release\")  | ![debug](https://shield.lwan.ws/img/gycKbr/debug \"Debug\")     | ![static-analysis](https://shield.lwan.ws/img/gycKbr/clang-analyze \"Static Analysis\") ![coverity](https://scan.coverity.com/projects/375/badge.svg) [Report history](https://buildbot.lwan.ws/sa/) | ![tests](https://shield.lwan.ws/img/gycKbr/unit-tests \"Test\") [![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/lwan.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:lwan)           |\n| FreeBSD 14  | x86_64 | ![freebsd-release](https://shield.lwan.ws/img/gycKbr/release-freebsd \"Release FreeBSD\") | ![freebsd-debug](https://shield.lwan.ws/img/gycKbr/debug-freebsd \"Debug FreeBSD\")     |                |           |\n| OpenBSD 7.4 | x86_64 | ![openbsd-release](https://shield.lwan.ws/img/gycKbr/release-openbsd \"Release OpenBSD\")       | ![openbsd-debug](https://shield.lwan.ws/img/gycKbr/debug-openbsd \"Debug OpenBSD\")     |               | ![openbsd-tests](https://shield.lwan.ws/img/gycKbr/openbsd-unit-tests \"OpenBSD Tests\")         |\n\nInstalling\n----------\n\nYou can either [build Lwan yourself](#Building), use a [container\nimage](#container-images), or grab a package from [your favorite\ndistribution](#lwan-in-the-wild).\n\nBuilding\n--------\n\nBefore installing Lwan, ensure all dependencies are installed. All of them\nare common dependencies found in any GNU/Linux distribution; package names\nwill be different, but it shouldn't be difficult to search using whatever\npackage management tool that's used by your distribution.\n\n### Required dependencies\n\n - [CMake](https://cmake.org/), at least version 2.8\n - [ZLib](http://zlib.net)\n\n### Optional dependencies\n\nThe build system will look for these libraries and enable/link if available.\n\n - [Lua 5.1](http://www.lua.org) or [LuaJIT 2.0](http://luajit.org)\n - [Valgrind](http://valgrind.org)\n - [Brotli](https://github.com/google/brotli)\n    - Can be disabled by passing `-DENABLE_BROTLI=NO`\n - [ZSTD](https://github.com/facebook/zstd)\n    - Can be disabled by passing `-DENABLE_ZSTD=NO`\n - On Linux builds, if `-DENABLE_TLS=ON` (default) is passed:\n    - [mbedTLS](https://github.com/ARMmbed/mbedtls)\n - Alternative memory allocators can be used by passing `-DUSE_ALTERNATIVE_MALLOC` to CMake with the following values:\n    - [\"mimalloc\"](https://github.com/microsoft/mimalloc)\n    - [\"jemalloc\"](http://jemalloc.net/)\n    - [\"tcmalloc\"](https://github.com/gperftools/gperftools)\n    - \"auto\": Autodetect from the list above, falling back to libc malloc if none found\n - To run test suite:\n    - [Python](https://www.python.org/) (2.6+) with Requests\n    - [Lua 5.1](http://www.lua.org)\n - To run benchmark:\n    - [Weighttp](https://github.com/lpereira/weighttp) -- bundled and built alongside Lwan for convenience\n    - [Matplotlib](https://github.com/matplotlib/matplotlib)\n - To build TechEmpower benchmark suite:\n    - Client libraries for [MariaDB](https://mariadb.org)\n    - [SQLite 3](http://sqlite.org)\n\n### Common operating system package names\n\n#### Minimum to build\n - ArchLinux: `pacman -S cmake zlib`\n - FreeBSD: `pkg install cmake pkgconf`\n - Ubuntu 14+: `apt-get update && apt-get install git cmake zlib1g-dev pkg-config`\n - macOS: `brew install cmake`\n\n#### Build with all optional features\n - ArchLinux: `pacman -S cmake zlib sqlite luajit mariadb-libs gperftools valgrind mbedtls`\n - FreeBSD: `pkg install cmake pkgconf sqlite3 lua51`\n - Ubuntu 14+: `apt-get update && apt-get install git cmake zlib1g-dev pkg-config lua5.1-dev libsqlite3-dev libmariadb-dev libmbedtls-dev`\n - macOS: `brew install cmake mariadb-connector-c sqlite lua@5.1 pkg-config`\n\n### Build commands\n\n#### Clone the repository\n\n    ~$ git clone git://github.com/lpereira/lwan\n    ~$ cd lwan\n\n#### Create the build directory\n\n    ~/lwan$ mkdir build\n    ~/lwan$ cd build\n\n#### Select build type\n\nSelecting a *release* version (no debugging symbols, messages, enable some\noptimizations, etc):\n\n    ~/lwan/build$ cmake .. -DCMAKE_BUILD_TYPE=Release\n\nIf you'd like to enable optimizations but still use a debugger, use this instead:\n\n    ~/lwan/build$ cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo\n\nTo disable optimizations and build a more debugging-friendly version:\n\n    ~/lwan/build$ cmake .. -DCMAKE_BUILD_TYPE=Debug\n\n#### Build Lwan\n\n    ~/lwan/build$ make\n\nThis will generate a few binaries:\n\n - `src/bin/lwan/lwan`: The main Lwan executable. May be executed with `--help` for guidance.\n - `src/bin/testrunner/testrunner`: Contains code to execute the test suite (`src/scripts/testsuite.py`).\n - `src/samples/freegeoip/freegeoip`: [FreeGeoIP sample implementation](https://freegeoip.lwan.ws). Requires SQLite.\n - `src/samples/techempower/techempower`: Code for the TechEmpower Web Framework benchmark. Requires SQLite and MariaDB libraries.\n - `src/samples/clock/clock`: [Clock sample](https://time.lwan.ws). Generates a GIF file that always shows the local time.\n - `src/bin/tools/mimegen`: Builds the extension-MIME type table. Used during the build process.\n - `src/bin/tools/bin2hex`: Generates a C file from a binary file, suitable for use with #include. Used during the build process.\n - `src/bin/tools/configdump`: Dumps a configuration file using the configuration reader API. Used for testing.\n - `src/bin/tools/weighttp`: Rewrite of the `weighttp` HTTP benchmarking tool.\n - `src/bin/tools/statuslookupgen`: Generates a perfect hash table for HTTP status codes and their descriptions. Used during the build process.\n\n#### Remarks\n\nPassing `-DCMAKE_BUILD_TYPE=Release` will enable some compiler\noptimizations (such as [LTO](http://gcc.gnu.org/wiki/LinkTimeOptimization))\nand tune the code for current architecture.\n\n> [!IMPORTANT]\n>\n> *Please use the release build when benchmarking*.\n> The default is the Debug build, which not only logs all requests to the\n> standard output, but does so while holding a lock, severely holding down\n> the server.\n\nThe default build (i.e. not passing `-DCMAKE_BUILD_TYPE=Release`) will build\na version suitable for debugging purposes.  This version can be used under\nValgrind *(if its headers are present)* and includes debugging messages that\nare stripped in the release version.  Debugging messages are printed for\neach and every request.\n\nOn these builds, sanitizers can be enabled.  To select which one to build Lwan\nwith, specify one of the following options to the CMake invocation line:\n\n - `-DSANITIZER=ubsan` selects the Undefined Behavior Sanitizer.\n - `-DSANITIZER=address` selects the Address Sanitizer.\n - `-DSANITIZER=thread` selects the Thread Sanitizer.\n\nAlternative memory allocators can be selected as well.  Lwan currently\nsupports [TCMalloc](https://github.com/google/tcmalloc),\n[mimalloc](https://github.com/microsoft/mimalloc), and\n[jemalloc](http://jemalloc.net/) out of the box.  To use either one of them,\npass `-DALTERNATIVE_MALLOC=name` to the CMake invocation line, using the\nnames provided in the \"Optional dependencies\"  section.\n\nThe `-DUSE_SYSLOG=ON` option can be passed to CMake to also log to the system log\nin addition to the standard output.\n\nIf you're building Lwan for a distribution, it might be wise to use the\n`-DMTUNE_NATIVE=OFF` option, otherwise the generated binary may fail to\nrun on some computers.\n\nTLS support is enabled automatically in the presence of a suitable mbedTLS\ninstallation on Linux systems with headers new enough to support kTLS, but\ncan be disabled by passing `-DENABLE_TLS=NO` to CMake.\n\n### Tests\n\n    ~/lwan/build$ make testsuite\n\nThis will compile the `testrunner` program and execute regression test suite\nin `src/scripts/testsuite.py`.\n\n### Benchmark\n\n    ~/lwan/build$ make benchmark\n\nThis will compile `testrunner` and execute benchmark script\n`src/scripts/benchmark.py`.\n\n### Coverage\n\nLwan can also be built with the Coverage build type by specifying\n`-DCMAKE_BUILD_TYPE=Coverage`.  This enables the `generate-coverage` make\ntarget, which will run `testrunner` to prepare a test coverage report with\n[lcov](http://ltp.sourceforge.net/coverage/lcov.php).\n\nEvery commit in this repository triggers the generation of this report,\nand results are [publicly available](https://buildbot.lwan.ws/lcov/).\n\nRunning\n-------\n\nSet up the server by editing the provided `lwan.conf`; the format is\nexplained in details below.\n\n> [!NOTE]\n>\n> Lwan will try to find a configuration file based in the\n> executable name in the current directory; `testrunner.conf` will be used\n> for the `testrunner` binary, `lwan.conf` for the `lwan` binary, and so on.\n\nConfiguration files are loaded from the current directory. If no changes\nare made to this file, running Lwan will serve static files located in\nthe `./wwwroot` directory. Lwan will listen on port 8080 on all interfaces.\n\nLwan will detect the number of CPUs, will increase the maximum number of\nopen file descriptors and generally try its best to autodetect reasonable\nsettings for the environment it's running on.  Many of these settings can\nbe tweaked in the configuration file, but it's usually a good idea to not\nmess with them.\n\n> [!TIP]\n>\n>  Optionally, the `lwan` binary can be used for one-shot\n> static file serving without any configuration file.  Run it with `--help`\n> for help on that.\n\nConfiguration File\n------------------\n\n### Format\n\nLwan uses a familiar `key = value` configuration file syntax.  Comments are\nsupported with the `#` character (similar to e.g.  shell scripts, Python,\nand Perl).  Nested sections can be created with curly brackets.  Sections\ncan be empty; in this case, curly brackets are optional.\n\n`some_key_name` is equivalent to `some key name` in configuration files (as\nan implementation detail, code reading configuration options will only be\ngiven the version with underscores).\n\n> [!TIP]\n>\n>  Values can contain environment variables. Use the\n> syntax `${VARIABLE_NAME}`.  Default values can be specified with a colon\n> (e.g.  `${VARIABLE_NAME:foo}`, which evaluates to `${VARIABLE_NAME}` if\n> it's set, or `foo` otherwise).\n\n```\nsound volume = 11 # This one is 1 louder\n\nplaylist metal {\n   files = '''\n\t/multi/line/strings/are/supported.mp3\n\t/anything/inside/these/are/stored/verbatim.mp3\n   '''\n}\n\nplaylist chiptune {\n   files = \"\"\"\n\t/if/it/starts/with/single/quotes/it/ends/with/single/quotes.mod\n\t/but/it/can/use/double/quotes.s3m\n   \"\"\"\n}\n```\n\nSome examples can be found in `lwan.conf` and `techempower.conf`.\n\n#### Constants\n\nConstants can be defined and reused throughout the configuration file by\nspecifying them in a `constants` section anywhere in the configuration\nfile.  A constant will be available only after that section defines a\nparticular constant. Constants can be re-defined.  If a constant isn't\ndefined, its value will be obtained from an environment variable.  If\nit's not defined in either one `constants` section, or in the environment,\nLwan will abort with an appropriate error message.\n\n```\nconstants {\n    user_name = ${USER}\n    home_directory = ${HOME}\n    buffer_size = 1000000\n}\n```\n\nThe same syntax for default values specified above is valid here (e.g.\nspecifying `user_name` to be `${USER:nobody}` will set `${user_name}` to\n`nobody` if `${USER}` isn't set in the environment variable or isn't\nanother constant.)\n\n#### Value types\n\n| Type   | Description |\n|--------|-------------|\n| `str`  | Any kind of free-form text, usually application specific |\n| `int`  | Integer number. Range is application specific |\n| `time` | Time interval.  See table below for units |\n| `bool` | Boolean value. See table below for valid values |\n\n#### Time Intervals\n\nTime fields can be specified using multipliers. Multiple can be specified, they're\njust added together; for instance, \"1M 1w\" specifies \"1 month and 1 week\"\n(37 days).  The following table lists all known multipliers:\n\n| Multiplier | Description |\n|------------|-------------|\n| `s`        | Seconds |\n| `m`        | Minutes |\n| `h`        | Hours |\n| `d`        | Days |\n| `w`        | 7-day Weeks |\n| `M`        | 30-day Months |\n| `y`        | 365-day Years |\n\n> [!NOTE]\n>\n> A number with a multiplier not in this table is ignored; a\n> warning is issued while reading the configuration file.  No spaces must\n> exist between the number and its multiplier.\n\n#### Boolean Values\n\n| True Values | False Values |\n|-------------|--------------|\n| Any integer number different than 0 | 0 |\n| `on` | `off` |\n| `true` | `false` |\n| `yes` | `no` |\n\n### Global Settings\n\nIt's generally a good idea to let Lwan decide the best settings for your\nenvironment.  However, not every environment is the same, and not all uses\ncan be decided automatically, so some configuration options are provided.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `keep_alive_timeout` | `time`  | `15` | Timeout to keep a connection alive |\n| `quiet` | `bool` | `false` | Set to true to not print any debugging messages. Only effective in release builds. |\n| `expires` | `time` | `1M 1w` | Value of the \"Expires\" header. Default is 1 month and 1 week |\n| `threads` | `int` | `0` | Number of I/O threads. Default (0) is the number of online CPUs |\n| `proxy_protocol` | `bool` | `false` | Enables the [PROXY protocol](https://www.haproxy.com/blog/haproxy/proxy-protocol/). Versions 1 and 2 are supported. Only enable this setting if using Lwan behind a proxy, and the proxy supports this protocol; otherwise, this allows anybody to spoof origin IP addresses |\n| `max_post_data_size` | `int` | `40960` | Sets the maximum number of data size for POST requests, in bytes |\n| `max_put_data_size` | `int` | `40960` | Sets the maximum number of data size for PUT requests, in bytes |\n| `max_file_descriptors` | `int` | `524288` | Maximum number of file descriptors. Needs to be at least 10x `threads` |\n| `request_buffer_size` | `int` | `4096` | Request buffer size length. If larger than the default of `4096`, it'll be dynamically allocated. |\n| `allow_temp_files` | `str` | `\"\"` | Use temporary files; set to `post` for POST requests, `put` for PUT requests, or `all` (equivalent to setting to `post put`) for both.|\n| `error_template` | `str` | Default error template | Template for error codes. See variables below. |\n\n#### Variables for `error_template`\n\n| Variable | Type | Description |\n|----------|------|-------------|\n| `short_message` | `str` | Short error message (e.g. `Not found`) |\n| `long_message` | `str` | Long error message (e.g. `The requested resource could not be found on this server`) |\n\n### Straitjacket\n\nLwan can drop its privileges to a user in the system, and limit its\nfilesystem view with a chroot.  While not bulletproof, this provides a\nfirst layer of security in the case there's a bug in Lwan.\n\nIn order to use this feature, declare a `straitjacket` (or `straightjacket`)\nsection, and set some options.  This requires Lwan to be executed as `root`.\n\nAlthough this section can be written anywhere in the file (as long as\nit is a top level declaration), if any directories are open, due to\ne.g.  instantiating the `serve_files` module, Lwan will refuse to\nstart.  (This check is only performed on Linux as a safeguard for\nmalconfiguration.)\n\n> [!TIP]\n>\n>  Declare a Straitjacket right before a `site` section\n> in such a way that configuration files and private data (e.g. TLS keys)\n> are out of reach of the server after initialization has taken place.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `user` | `str`  | `NULL` | Drop privileges to this user name |\n| `chroot` | `str` | `NULL` | Path to `chroot()` |\n| `drop_capabilities` | `bool` | `true` | Drop all capabilities with capset(2) (under Linux), or pledge(2) (under OpenBSD). |\n\n### Headers\n\nIf there's a need to specify custom headers for each response, one can declare\na `headers` section in the global scope.  The order which this section appears\nisn't important.\n\nFor example, this declaration:\n\n```\nheaders {\n\tServer = Apache/1.0.0 or nginx/1.0.0 (at your option)\n\tSome-Custom-Header = ${WITH_THIS_ENVIRONMENT_VARIABLE}\n}\n```\n\nWill both override the `Server` header (`Server: lwan` won't be sent), and set\n`Some-Custom-Header` with the value obtained from the environment variable\n`$WITH_THIS_ENVIRONMENT_VARIABLE`.\n\nSome headers can't be overridden, as that would cause issues when sending their\nactual values while servicing requests.  These include but is not limited to:\n\n  - `Date`\n  - `Expires`\n  - `WWW-Authenticate`\n  - `Connection`\n  - `Content-Type`\n  - `Transfer-Encoding`\n  - All `Access-Control-Allow-` headers\n\n> [!NOTE]\n>\n> Header names are also case-insensitive (and case-preserving).  Overriding\n> `SeRVeR` will override the `Server` header, but send it the way it was\n> written in the configuration file.\n\n### Listeners\n\nOnly two listeners are supported per Lwan process: the HTTP listener (`listener`\nsection), and the HTTPS listener (`tls_listener` section).  Only one listener\nof each type is allowed.\n\n> [!WARNING]\n>\n> TLS support is experimental.  Although it is stable\n> during initial testing, your mileage may vary. Only TLSv1.2 is supported\n> at this point, but TLSv1.3 is planned.\n\n> [!NOTE]\n>\n> TLS support requires :penguin: Linux with the `tls.ko`\n> module built-in or loaded.  Support for other operating systems may be\n> added in the future.  FreeBSD seems possible, other operating systems\n> do not seem to offer similar feature.  For unsupported operating systems,\n> using a TLS terminator proxy such as [Hitch](https://hitch-tls.org/) is a good\n> option.\n\nFor both `listener` and `tls_listener` sections, the only parameter is the\nthe interface address and port to listen on.  The listener syntax is\n`${ADDRESS}:${PORT}`, where `${ADDRESS}` can either be `*` (binding to all\ninterfaces), an IPv6 address (if surrounded by square brackets), an IPv4\naddress, or a hostname.  For instance, `listener localhost:9876` would\nlisten only in the `lo` interface, port `9876`.\n\nWhile a `listener` section takes no keys, a `tls_listener` section requires\ntwo: `cert` and `key` (each pointing, respectively, to the location on disk\nwhere the TLS certificate and private key files are located) and takes an\noptional boolean `hsts` key, which controls if `Strict-Transport-Security`\nheaders will be sent on HTTPS responses.\n\n> [!TIP]\n>\n>  To generate these keys for testing purposes, the\n> OpenSSL command-line tool can be used like the following:\n> `openssl req -nodes -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 7`\n\n> [!NOTE]\n>\n> It's recommended that a [Straitjacket](#Straitjacket) with a `chroot` option is declared\n> right after a `tls_listener` section, in such a way that the paths to the\n> certificate and key are out of reach from that point on.\n\nIf systemd socket activation is used, `systemd` can be specified as a\nparameter.  (If multiple listeners from systemd are specified,\n`systemd:FileDescriptorName` can be specified, where `FileDescriptorName`\nfollows the [conventions set in the `systemd.socket` documentation](https://www.freedesktop.org/software/systemd/man/systemd.socket.html).)\n\nExamples:\n\n```\nlistener *:8080\t\t# Listen on all interfaces, port 8080, HTTP\n\ntls_listener *:8081 {\t# Listen on all interfaces, port 8081, HTTPS\n\tcert = /path/to/cert.pem\n\tkey = /path/to/key.pem\n}\n\n# Use named systemd socket activation for HTTP listener\nlistener systemd:my-service-http.socket\n\n# Use named systemd socket activation for HTTPS listener\ntls_listener systemd:my-service-https.socket {\n\t...\n}\n```\n\n### Site\n\nA `site` section groups instances of modules and handlers that will respond to\nrequests to a given URL prefix.\n\n#### Routing URLs Using Modules or Handlers\n\nIn order to route URLs, Lwan matches the largest common prefix from the request\nURI with a set of prefixes specified in the listener section.  How a request to\na particular prefix will be handled depends on which handler or module has been\ndeclared in the listener section.  Handlers and modules are similar internally;\nhandlers are merely functions and hold no state, and modules holds state (named\ninstance).  Multiple instances of a module can appear in a listener section.\n\nThere is no special syntax to attach a prefix to a handler or module; all the\nconfiguration parser rules apply here.  Use `${NAME} ${PREFIX}` to link the\n`${PREFIX}` prefix path to either a handler named `${NAME}` (if `${NAME}`\nbegins with `&`, as with C's \"address of\" operator), or a module named\n`${NAME}`.  Empty sections can be used here.\n\nEach module will have its specific set of options, and they're listed in the\nnext sections.  In addition to configuration options, a special `authorization`\nsection can be present in the declaration of a module instance.  Handlers do\nnot take any configuration options, but may include the `authorization`\nsection.\n\n> [!TIP]\n>\n>  Executing Lwan with the `--help` command-line\n> argument will show a list of built-in modules and handlers.\n\nThe following is some basic documentation for the modules shipped with Lwan.\n\n#### File Serving\n\nThe `serve_files` module will serve static files, and automatically create\ndirectory indices or serve pre-compressed files.  It'll generally try its\nbest to serve files in the fastest way possible according to some heuristics.\n\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `path`                     | `str`  | `NULL`       | Path to a directory containing files to be served |\n| `index_path`               | `str`  | `index.html` | File name to serve as an index for a directory |\n| `serve_precompressed_path` | `bool` | `true`       | If $FILE.gz exists, is smaller and newer than $FILE, and the client accepts `gzip` encoding, transfer it |\n| `auto_index`               | `bool` | `true`       | Generate a directory list automatically if no `index_path` file present.  Otherwise, yields 404 |\n| `auto_index_readme`        | `bool` | `true`       | Includes the contents of README files as part of the automatically generated directory index |\n| `directory_list_template`  | `str`  | `NULL`       | Path to a Mustache template for the directory list; by default, use an internal template |\n| `read_ahead`               | `int`  | `131702`     | Maximum amount of bytes to read ahead when caching open files.  A value of `0` disables readahead.  Readahead is performed by a low priority thread to not block the I/O threads while file extents are being read from the filesystem. |\n| `cache_for`                | `time` | `5s`         | Time to keep file metadata (size, compressed contents, open file descriptor, etc.) in cache |\n\n> [!NOTE]\n>\n> Files smaller than 16KiB will be compressed in RAM for\n> the duration specified in the `cache_for` setting.  Lwan will always try\n> to compress with deflate, and will optionally compress with Brotli and\n> zstd (if Lwan has been built with proper support).\n>\n> In cases where compression wouldn't be worth the effort (e.g. adding the\n> `Content-Encoding` header would result in a larger response than sending\n> the uncompressed file, usually the case for very small files), Lwan won't\n> spend time compressing a file.\n>\n> For files larger than 16KiB, Lwan will not attempt to compress them.  In\n> future versions, it might do this and send responses using\n> chunked-encoding while the file is being compressed (up to a certain\n> limit, of course), but for now, only precompressed files (see\n> `serve_precompressed_path` setting in the table above) are considered.\n>\n> For all cases, Lwan might try using the gzipped version if that's found in\n> the filesystem and the client requested this encoding.\n\n##### Variables for `directory_list_template`\n\n| Variable | Type | Description |\n|----------|------|-------------|\n| `rel_path` | `str` | Path relative to the root directory real path |\n| `readme`   | `str` | Contents of first readme file found (`readme`, `readme.txt`, `read.me`, `README.TXT`, `README`) |\n| `file_list` | iterator | Iterates on file list |\n| `file_list.zebra_class` | `str` | `odd` for odd items, or `even` or even items |\n| `file_list.icon` | `str` | Path to the icon for the file type |\n| `file_list.name` | `str` | File name (escaped) |\n| `file_list.type` | `str` | File type (directory or regular file) |\n| `file_list.size` | `int` | File size |\n| `file_list.unit` | `str` | Unit for `file_size` |\n\n#### Lua\n\nThe `lua` module will allow requests to be serviced by scripts written in\nthe [Lua](https://www.lua.org/) programming language.  Although the\nfunctionality provided by this module is quite spartan, it's able to run\nframeworks such as [Sailor](https://github.com/lpereira/sailor-hello-lwan).\n\nScripts can be served from files or embedded in the configuration file, and\nthe results of loading them, the standard Lua modules, and (optionally, if\nusing LuaJIT) optimizing the code will be cached for a while.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `default_type` | `str` | `text/plain` | Default MIME-Type for responses |\n| `script_file` | `str` | `NULL` | Path to Lua script|\n| `cache_period` | `time` | `15s` | Time to keep Lua state loaded in memory |\n| `script` | `str` | `NULL` | Inline lua script |\n\n##### Writing request handlers\n\n> [!NOTE]\n>\n> Lua scripts can't use global variables, as they may be not\n> only serviced by different threads, but the state will be available only\n> for the amount of time specified in the `cache_period` configuration\n> option.  This is because each I/O thread in Lwan will create an instance\n> of a Lua VM (i.e.  one `lua_State` struct for every I/O thread), and each\n> Lwan coroutine will spawn a Lua thread (with `lua_newthread()`) per\n> request.\n\nThere's no need to have one instance of the Lua module for each endpoint; a\nsingle script, embedded in the configuration file or otherwise, can service\nmany different endpoints.  Scripts are supposed to implement functions with\nthe following signature: `handle_${METHOD}_${ENDPOINT}(req)`, where\n`${METHOD}` can be a HTTP method (i.e.  `get`, `post`, `head`, etc.), and\n`${ENDPOINT}` is the desired endpoint to be handled by that function.  A generic\n`handle(req)` function will be called if the specific version doesn't exist.\n\n> [!TIP]\n>\n>  Use the `root` endpoint for a catchall. For example,\n> the handler function `handle_get_root()` will be called if no other handler\n> could be found for that request.  If no catchall is specified, the server\n> will return a `404 Not Found` error.\n\nThe `req` parameter points to a metatable that contains methods to obtain\ninformation from the request, or to set the response, as seen below:\n\n   - `req:query_param(param)` returns the query parameter (from the query string) with the key `param`, or `nil` if not found\n   - `req:post_param(param)` returns the post parameter (only for `${POST}` handlers) with the key `param`, or `nil` if not found\n   - `req:set_response(str)` sets the response to the string `str`\n   - `req:say(str)` sends a response chunk (using chunked encoding in HTTP)\n   - `req:send_event(event, str)` sends an event (using server-sent events)\n   - `req:cookie(param)` returns the cookie named `param`, or `nil` is not found\n   - `req:set_headers(tbl)` sets the response headers from the table `tbl`; a header may be specified multiple times by using a table, rather than a string, in the table value (`{'foo'={'bar', 'baz'}}`); must be called before sending any response with `say()` or `send_event()`\n   - `req:header(name)` obtains the header from the request with the given name or `nil` if not found\n   - `req:sleep(ms)` pauses the current handler for the specified amount of milliseconds\n   - `req:ws_upgrade()` returns `1` if the connection could be upgraded to a WebSocket; `0` otherwise\n   - `req:ws_write_text(str)` sends `str` through the WebSocket-upgraded connection as text frame\n   - `req:ws_write_binary(str)` sends `str` through the WebSocket-upgraded connection as binary frame\n   - `req:ws_write(str)` sends `str` through the WebSocket-upgraded connection as text or binary frame, depending on content containing only ASCII characters or not\n   - `req:ws_read()` returns a string with the contents of the last WebSocket frame, or a number indicating an status (ENOTCONN/107 on Linux if it has been disconnected; EAGAIN/11 on Linux if nothing was available; ENOMSG/42 on Linux otherwise).  The return value here might change in the future for something more Lua-like.\n   - `req:remote_address()` returns a string with the remote IP address.\n   - `req:path()` returns a string with the request path.\n   - `req:query_string()` returns a string with the query string (empty string if no query string present).\n   - `req:body()` returns the request body (POST/PUT requests).\n   - `req:request_id()` returns a string containing the request ID.\n   - `req:request_date()` returns the date as it'll be written in the `Date` response header.\n   - `req:is_https()` returns `true` if this request is serviced through HTTPS, `false` otherwise.\n   - `req:host()` returns the value of the `Host` header if present, otherwise `nil`.\n   - `req:http_version()` returns `HTTP/1.0` or `HTTP/1.1` depending on the request version.\n   - `req:http_method()` returns a string, in uppercase, with the HTTP method (e.g. `\"GET\"`).\n   - `req:http_headers()` returns a table with all headers and their values.\n\nHandler functions may return either `nil` (in which case, a `200 OK` response\nis generated), or a number matching an HTTP status code.  Attempting to return\nan invalid HTTP status code or anything other than a number or `nil` will result\nin a `500 Internal Server Error` response being thrown.\n\n##### Logging\n\nIn addition to the metamethods in the `req` parameter, one can also log messages\nwith different logging levels by calling methods from `Lwan.log`:\n\n   - `Lwan.log:warning(str)`\n   - `Lwan.log:info(str)`\n   - `Lwan.log:error(str)`\n   - `Lwan.log:critical(str)` (Will also abort Lwan! Use with caution)\n   - `Lwan.log:debug(str)` (Only available in debug builds; no-op otherwise)\n\n> [!NOTE]\n>\n> If Lwan is built with syslog support, these messages will also be sent to the\n> system log, otherwise they'll be printed to the standard error.\n\n\n#### Rewrite\n\nThe `rewrite` module will match\n[patterns](https://man.openbsd.org/patterns.7) in URLs and give the option\nto either redirect to another URL, or rewrite the request in a way that Lwan\nwill handle the request as if it were made in that way originally.\n\n> [!NOTE]\n>\n> Forked from Lua 5.3.1, the regular expresion\n> engine may not be as feature-packed as most general-purpose engines, but\n> has been chosen specifically because it is a [deterministic finite\n> automaton](https://en.wikipedia.org/wiki/Deterministic_finite_automaton)\n> in an attempt to make some kinds of [denial of service\n> attacks](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n> impossible.\n\nThe new URL can be specified using a simple text substitution syntax, or use Lua scripts.\n\n> [!TIP]\n>\n>  Lua scripts will contain the same metamethods\n> available in the `req` metatable provided by the Lua module, so it can be\n> quite powerful.\n\nEach instance of the rewrite module will require a `pattern` and the action\nto execute when such pattern is matched.  Patterns are evaluated in the\norder they appear in the configuration file, and are specified using nested\nsections in the configuration file.  For instance, consider the following\nexample, where two patterns are specified:\n\n```\nrewrite /some/base/endpoint {\n    pattern posts/(%d+) {\n        # Matches /some/base/endpointposts/2600 and /some/base/endpoint/posts/2600\n        rewrite_as = /cms/view-post?id=%1\n    }\n    pattern imgur/(%a+)/(%g+) {\n        # Matches /some/base/endpointimgur/gif/mpT94Ld and /some/base/endpoint/imgur/gif/mpT94Ld\n        redirect_to = https://i.imgur.com/%2.%1\n    }\n}\n```\n\nThis example defines two patterns, one providing a nicer URL that's hidden\nfrom the user, and another providing a different way to obtain a direct link\nto an image hosted on a popular image hosting service (i.e.  requesting\n`/some/base/endpoint/imgur/mp4/4kOZNYX` will redirect directly to a resource\nin the Imgur service).\n\nThe value of `rewrite_as` or `redirect_to` can be Lua scripts as well; in\nwhich case, the option `expand_with_lua` must be set to `true`, and, instead\nof using the simple text substitution syntax as the example above, a\nfunction named `handle_rewrite(req, captures)` has to be defined instead.\nThe `req` parameter is documented in the Lua module section; the `captures`\nparameter is a table containing all the captures, in order (i.e. ``captures[2]``\nis equivalent to ``%2`` in the simple text substitition syntax).  This function\nreturns the new URL to redirect to.\n\nThis module has no options by itself.  Options are specified in each and\nevery pattern.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `rewrite_as` | `str` | `NULL` | Rewrite the URL following this pattern |\n| `redirect_to` | `str` | `NULL` | Redirect to a new URL following this pattern |\n| `expand_with_lua` | `bool` | `false` | Use Lua scripts to redirect to or rewrite a request |\n\n`redirect_to` and `rewrite_as` options are mutually exclusive, and one of\nthem must be specified at least.\n\nIt's also possible to specify conditions to trigger a rewrite.  To specify one,\nopen a `condition` block, specify the condition type, and then the parameters\nfor that condition to be evaluated.  Multiple conditions can be set per rewrite\nrule as long as there's one condition per type:\n\n|Condition          |Can use subst. syntax|Section required|Parameters|Description|\n|-------------------|---------------------|----------------|----------|-----------|\n|`cookie`           | Yes | Yes | A single `key` = `value`| Checks if request has cookie `key` has value `value` |\n|`query`            | Yes | Yes | A single `key` = `value`| Checks if request has query variable `key` has value `value` |\n|`post`             | Yes | Yes | A single `key` = `value`| Checks if request has post data `key` has value `value` |\n|`header`           | Yes | Yes | A single `key` = `value`| Checks if request header `key` has value `value` |\n|`environment`      | Yes | Yes | A single `key` = `value`| Checks if environment variable `key` has value `value` |\n|`stat`             | Yes | Yes | `path`, `is_dir`, `is_file` | Checks if `path` exists in the filesystem, and optionally checks if `is_dir` or `is_file` |\n|`encoding`         | No  | Yes | `deflate`, `gzip`, `brotli`, `zstd`, `none` | Checks if client accepts responses in a determined encoding (e.g. `deflate = yes` for Deflate encoding) |\n|`proxied`          | No  | No  | Boolean | Checks if request has been proxied through PROXY protocol |\n|`http_1.0`         | No  | No  | Boolean | Checks if request is made with a HTTP/1.0 client |\n|`is_https`         | No  | No  | Boolean | Checks if request is made through HTTPS |\n|`has_query_string` | No  | No  | Boolean | Checks if request has a query string (even if empty) |\n|`method`           | No  | No  | Method name | Checks if HTTP method is the one specified |\n|`lua`              | No  | No  | String | Runs Lua function `matches(req)` inside String and checks if it returns `true` or `false` |\n|`backref`          | No  | Yes | A single `backref index` = `value` | Checks if the backref number matches the provided value |\n\n*Can use subst. syntax* refers to the ability to reference the matched\npattern using the same substitution syntax used for the `rewrite as` or\n`redirect to` actions.  For instance, `condition cookie { some-cookie-name =\nfoo-%1-bar }` will substitute `%1` with the first match from the pattern\nthis condition is related to.\n\n> [!NOTE]\n>\n> Conditions that do not require a section have to be written\n> as a key; for instance, `condition has_query_string = yes`.\n\nFor example, if one wants to send `site-dark-mode.css` if there is a\n`style` cookie with the value `dark`, and send `site-light-mode.css`\notherwise, one can write:\n\n```\npattern site.css {\n   rewrite as = /site-dark-mode.css\n   condition cookie { style = dark }\n}\npattern site.css {\n   rewrite as = /site-light-mode.css\n}\n```\n\nAnother example: if one wants to send pre-compressed files\nif they do exist in the filesystem and the user requested them:\n\n```\npattern (%g+) {\n   condition encoding { brotli = yes }\n   condition stat { path = %1.brotli }\n   rewrite as = %1.brotli\n}\npattern (%g+) {\n   condition encoding { gzip = yes }\n   condition stat { path = %1.gzip }\n   rewrite as = %1.gzip\n}\npattern (%g+) {\n   condition encoding { zstd = yes }\n   condition stat { path = %1.zstd }\n   rewrite as = %1.zstd\n}\npattern (%g+) {\n   condition encoding { deflate = yes }\n   condition stat { path = %1.deflate }\n   rewrite as = %1.deflate\n}\n```\n\n> [!NOTE]\n>\n> In general, this is not necessary, as the file serving\n> module will do this automatically and pick the smallest file available for\n> the requested encoding, but this shows it's possible to have a similar\n> feature by configuration alone.\n\n#### Redirect\n\nThe `redirect` module will, as it says in the tin, generate a `301\nMoved permanently` (by default; the code can be changed, see below)\nresponse, according to the options specified in its configuration.\nGenerally, the `rewrite` module should be used instead as it packs more\nfeatures; however, this module serves also as an example of how to\nwrite Lwan modules (less than 100 lines of code).\n\nIf the `to` option is not specified, it always generates a `500\nInternal Server Error` response.  Specifying an invalid HTTP code, or a\ncode that Lwan doesn't know about (see `enum lwan_http_status`), will\nproduce a `301 Moved Permanently` response.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `to` | `str` | `NULL` | The location to redirect to |\n| `code` | `int` | `301` | The HTTP code to perform a redirect |\n\n#### Response\n\nThe `response` module will generate an artificial response of any HTTP code.\nIn addition to also serving as an example of how to write a Lwan module,\nit can be used to carve out voids from other modules (e.g. generating a\n`405 Not Allowed` response for files in `/.git`, if `/` is served with\nthe `serve_files` module).\n\nIf the supplied `code` falls outside the response codes known by Lwan,\na `404 Not Found` error will be sent instead.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `code` | `int` | `999` | A HTTP response code |\n\n#### FastCGI\n\nThe `fastcgi` module proxies requests between the HTTP client connecting to\nLwan and a [FastCGI](https://en.wikipedia.org/wiki/FastCGI) server\naccessible by Lwan.  This is useful, for instance, to serve pages from a\nscripting language such as PHP.\n\n> [!NOTE]\n>\n> This is a preliminary version of this module, and\n> as such, it's not well optimized, some features are missing, and\n> some values provided to the environment are hardcoded.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `address` | `str` |  | Address to connect to. Can be a file path (for Unix Domain Sockets), IPv4 address (`aaa.bbb.ccc.ddd:port`), or IPv6 address (`[...]:port`). |\n| `script_path` | `str` |  | Location where the CGI scripts are located. |\n| `default_index` | `str` | `index.php` | Default script to execute if unspecified in the request URI. |\n\n### Authorization Section\n\nAuthorization sections can be declared in any module instance or handler,\nand provides a way to authorize the fulfillment of that request through\nthe standard HTTP authorization mechanism.  In order to require authorization\nto access a certain module instance or handler, declare an `authorization`\nsection with a `basic` parameter, and set one of its options.\n\n| Option | Type | Default | Description |\n|--------|------|---------|-------------|\n| `realm` | `str` | `Lwan` | Realm for authorization. This is usually shown in the user/password UI in browsers |\n| `password_file` | `str` | `NULL` | Path for a file containing username and passwords (in clear text).  The file format is the same as the configuration file format used by Lwan |\n\n> [!WARNING]\n>\n> Not only passwords are stored in clear text in a file\n> that should be accessible by the server, they'll be kept in memory for a few\n> seconds.  Avoid using this feature if possible.\n\nHacking\n-------\n\nPlease read this section (and follow it) if you're planning on contributing\nto Lwan.  There's nothing unexpected here; this mostly follows the rules and\nexpectations of many other FOSS projects, but every one expects things a\nlittle bit different from one another.\n\n### Coding Style\n\nLwan tries to follow a consistent coding style throughout the project.  If you're\nconsidering contributing a patch to the project, please respect this style by trying\nto match the style of the surrounding code.  In general:\n\n - `global_variables_are_named_like_this`, even though they tend to be rare and should be marked as `static` (with rare exceptions)\n - Local variables are usually shorter, e.g. `local_var`, `i`, `conn`\n - Struct names are often as short as they're descriptive.  `typedef` for structs are rarely used in Lwan\n - Header files should use `#pragma once` instead of the usual include guard hackery\n - Functions that are used between .c files but are not APIs to be exposed to liblwan should have their prototype added to `lwan-private.h`\n - Functions should be short and sweet.  Exceptions may apply\n - Public functions should be prefixed with `lwan_`\n - Public types should be prefixed with `lwan_`\n - Private functions must be static, and can be named without the `lwan_` prefix\n - Code is indented with 4 spaces; don't use tabs\n - There's a suggested line break at column 80, but it's not enforced\n - `/* Old C-style comments are preferred */`\n - `clang-format` can be used to format the source code in an acceptable way; a `.clang-format` file is provided\n\n### Tests\n\nIf modifying well-tested areas of the code (e.g. the event loop, HTTP parser,\netc.), please add a new integration test and make sure that, before you send a\npull request, all tests (including the new ones you've sent) are working.\nTests can be added by modifying `src/scripts/testsuite.py`, and executed by\neither invoking that script directly from the source root, or executing the\n`testsuite` build target.\n\nSome tests will only work on Linux, and won't be executed on other platforms.\n\n### Fuzz-testing\n\nLwan is automatically fuzz-tested by\n[OSS-Fuzz](https://github.com/google/oss-fuzz/).  To fuzz-test locally,\nthough, one can [follow the instructions to test\nlocally](https://github.com/google/oss-fuzz/blob/master/docs/new_project_guide.md#testing-locally).\n\nCurrently, there are fuzzing drivers for the request parsing code, the\nconfiguration file parser, the template parser, and the Lua string pattern\nmatching library used in the rewrite module.\n\nAdding new fuzzers is trivial:\n\n- Fuzzers are implemented in C++ and the sources are placed in\n  `src/bin/fuzz`.\n- Fuzzers should be named `${FUZZER_NAME}_fuzzer.cc`.  Look at the OSS-Fuzz\n  documentation and other fuzzers on information about how to write these.\n- These files are not compiled by the Lwan build system, but rather by the\n  build scripts used by OSS-Fuzz.  To test your fuzzer, please follow the\n  instructions to test locally, which will build the fuzzer in the\n  environment they'll be executed in.\n- A fuzzing corpus has to be provided in `src/fuzz/corpus`.  Files have to\n  be named `corpus-${FUZZER_NAME}-${UNIQUE_ID}`.\n\n### Exporting APIs\n\nThe shared object version of `liblwan` on ELF targets (e.g. Linux) will use\na symbol filter script to hide symbols that are considered private to the\nlibrary.  Please edit `src/lib/liblwan.sym` to add new symbols that should\nbe exported to `liblwan.so`.\n\n### Using Git and Pull Requests\n\nLwan tries to maintain a source history that's as flat as possible, devoid of\nmerge commits.  This means that pull requests should be rebased on top of the\ncurrent master before they can be merged; sometimes this can be done\nautomatically by the GitHub interface, sometimes they need some manual work to\nfix conflicts.  It is appreciated if the contributor fixes these conflicts when\nasked.\n\nIt is advisable to push your changes to your fork on a branch-per-pull request,\nrather than pushing to the `master` branch; the reason is explained below.\n\nPlease ensure that Git is configured properly with your name (it doesn't really\nmatter if it is your legal name or a nickname, but it should be enough to credit\nyou) and a valid email address.  There's no need to add `Signed-off-by` lines,\neven though it's fine to send commits with them.\n\nIf a change is requested in a pull request, you have two choices:\n\n - *Reply asking for clarification.*  Maybe the intentions were not clear enough,\nand whoever asked for changes didn't fully understand what you were trying to\nachieve\n - *Fix the issue.*  When fixing issues found in pull requests, *please* use\n[interactive rebases](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History) to\nsquash or fixup commits; don't add your fixes on top of your tree.  Do not create\nanother pull request just to accomodate the changes. After rewriting\nthe history locally, force-push to your PR branch; the PR will update automatically\nwith your changes.  Rewriting the history of development branches is fine, and\nforce-pushing them is normal and expected\n\nIt is not enforced, but it is recommended to create smaller commits. How\ncommits are split in Lwan is pretty much arbitrary, so please take a look at\nthe commit history to get an idea on how the division should be made.  Git\noffers a plethora of commands to achieve this result: the already mentioned\ninteractive rebase, the `-p` option to `git add`, and `git commit --amend`\nare good examples.\n\nCommit messages should have one line of summary (~72 chars), followed by an\nempty line, followed by paragraphs of 80-char lines explaining the change.  The\nparagraphs explaining the changes are usually not necessary if the summary\nis good enough.  Try to [write good commit messages](https://chris.beams.io/posts/git-commit/).\n\n### Licensing\n\nLwan is licensed under the GNU General Public License, version 2, or (at your option),\nany later version.  Therefore:\n\n - Code must be either LGPLv2.1, GPLv2, a permissive \"copyfree\" license that is compatible\nwith GPLv2 (e.g. MIT, BSD 3-clause), or public domain code (e.g. CC0)\n - Although the program can be distributed and used as if it were licensed as GPLv3,\nits code must be compatible with GPLv2 as well; no new code can be licensed under versions\nof GPL newer than 2\n - Likewise, code licensed under licenses compatible with GPLv3 but\nincompatible with GPLv2 (e.g.  Apache 2) are not suitable for inclusion in\nLwan\n - Even if the license does not specify that credit should be given (e.g. CC0-licensed code),\nplease give credit to the original author for that piece of code\n - Contrary to popular belief, it is possible to use a GPL'd piece of code on a server without\nhaving to share the code for your application.  It is only when the binary of that server is\nshared that source must be available to whoever has that binary.  Merely accessing a Lwan\nserver through HTTP does not qualify as having access to the binary program that's running\non the server\n - When in doubt, don't take legal advice from a README file: please consult\na lawyer that understands free software licensing\n\nPortability\n-----------\n\nWhile Lwan was written originally for Linux, it has been ported to BSD\nsystems as well.  The build system will detect the supported features\nand build support library functions as appropriate.\n\nFor instance, [epoll](https://en.wikipedia.org/wiki/Epoll) has been\nimplemented on top of [kqueue](https://en.wikipedia.org/wiki/Kqueue), and\nLinux-only syscalls and GNU extensions have been implemented for the\nsupported systems.  [This blog post](https://tia.mat.br/posts/2018/06/28/include_next_and_portability.html)\nexplains the details and how `#include_next` is used.\n\nPerformance\n-----------\n\nIt can achieve good performance, yielding about **320000 requests/second**\non a Core i7 laptop for requests without disk access, and without pipelining.\n\nWhen disk I/O is required, for files up to 16KiB, it yields about\n**290000 requests/second**; for larger files, this drops to **185000\nrequests/second**, which isn't too shabby either.\n\nThese results, of course, with keep-alive connections, and with weighttp\nrunning on the same machine (and thus using resources that could be used\nfor the webserver itself).\n\nWithout keep-alive, these numbers drop around 6-fold.\n\nIRC Channel\n-----------\n\nThere is an IRC channel (`#lwan`) on [Libera](https://libera.chat). A\nstandard IRC client can be used.\n\nLwan in the wild\n----------------\n\nHere's a non-definitive list of third-party stuff that uses Lwan and have\nbeen seen in the wild.  *If you see mentions of Lwan in the media or\nacademia, however small it might be, please contact the author! It'll make\nher day!*\n\n* [This project uses Cython and Lwan](https://www.erp5.com/NXD-Blog.Multicore.Python.HTTP.Server) to make it possible to write handlers in Python.\n* [An experimental version of Node.js using Lwan](https://github.com/raadad/node-lwan) as its HTTP server is maintained by [@raadad](https://github.com/raadad).\n* The beginnings of a C++11 [web framework](https://github.com/vileda/wfpp) based on Lwan written by [@vileda](https://github.com/vileda).\n* A more complete C++14 [web framework](https://github.com/matt-42/silicon) by [@matt-42](https://github.com/matt-42) offers Lwan as one of its backends.\n* A [word ladder sample program](https://github.com/sjnam/lwan-sgb-ladders) by [@sjnam](https://github.com/sjnam). [Demo](http://tbcoe.ddns.net/sgb/ladders?start=chaos&goal=order).\n* A [Shodan search](https://www.shodan.io/search?query=server%3A+lwan) listing some brave souls that expose Lwan to the public internet.\n* This [write-up shows the use of Lwan on a Capture the Flag competition](https://medium.com/feedzaitech/pixels-camp-ctf-challenge-qualifiers-writeup-ac661f4af96a).\n\nSome other distribution channels were made available as well:\n\n* Container images are available from the [GitHub Container Registry](https://ghcr.io/lpereira/lwan).  [More information below](#container-images).\n* A `Dockerfile` is maintained by [@jaxgeller](https://github.com/jaxgeller), and is [available from the Docker registry](https://hub.docker.com/r/jaxgeller/lwan/).\n* A buildpack for Heroku is maintained by [@bherrera](https://github.com/bherrera), and is [available from its repo](https://github.com/bherrera/heroku-buildpack-lwan).\n* Lwan is also available as a package in [Biicode](http://docs.biicode.com/c++/examples/lwan.html).\n* It's also available in some GNU/Linux distributions:\n    * [Arch Linux](https://aur.archlinux.org/packages/lwan-git/)\n    * [Ubuntu](https://launchpad.net/lwan-unofficial)\n    * [Alpine Linux](https://pkgs.alpinelinux.org/package/edge/testing/x86_64/lwan)\n    * [NixOS](https://nixos.org/nixos/packages.html#lwan)\n* It's also available as a package for the [Nanos unikernel](https://github.com/nanovms/nanos).\n\nLwan has been also used as a benchmark:\n\n* [Raphael Javaux's master thesis](https://github.com/RaphaelJ/master-thesis) cites Lwan in chapter 5 (\"Performance Analysis\").\n* Lwan is used as a benchmark by the [PyParallel](http://pyparallel.org/) [author](https://www.reddit.com/r/programming/comments/3jhv80/pyparallel_an_experimental_proofofconcept_fork_of/cur4tut).\n* [Kong](https://getkong.org/about/benchmark/) uses Lwan as the [backend API](https://gist.github.com/montanaflynn/01376991f0a3ad07059c) in its benchmark.\n* [TechEmpower Framework benchmarks](https://www.techempower.com/benchmarks/#section=data-r10&hw=peak&test=json) feature Lwan since round 10.\n* [KrakenD](http://www.krakend.io) used Lwan for the REST API in all official [benchmarks](http://www.krakend.io/docs/benchmarks/aws/)\n* [Effective System Call Aggregation (ESCA)](https://github.com/eecheng87/ESCA) project uses Lwan as one of the benchmarks; they claim that Lwan throughput improved by about 30% with their system call batching approach.\n\nMentions in academic journals:\n\n* [A dynamic predictive race detector for C/C++ programs (in English, published 2017)](https://link.springer.com/article/10.1007/s11227-017-1996-8) uses Lwan as a \"real world example\".\n* [High-precision Data Race Detection Method for Large Scale Programs (in Chinese, published 2021)](http://www.jos.org.cn/jos/article/abstract/6260) also uses Lwan as one of the case studies.\n* [AGE: Automatic Performance Evaluation of API Gateways (in English, published 2023)](https://www.computer.org/csdl/proceedings-article/iscc/2023/10218286/1PYLvz6ihBm) mentions Lwan as part of its usage in the KrakenD benchmarks.\n* [Canary: Practical Static Detection of Inter-thread Value-Flow Bugs](https://rainoftime.github.io/files/PLDI21Canary.pdf) used Lwan as one of the pieces of software that have been analyzed.\n* [Uma análise comparativa de ferramentas de análise estática para deteção de erros de memória](https://arxiv.org/pdf/1807.08015.pdf) used Lwan as one of the evaluation softwares.\n\nMentions in magazines:\n\n* [Linux-Magazin (Germany) mentions Lwan in their December/2021 issue](https://www.linux-magazin.de/ausgaben/2021/12/tooltipps/)\n* [Raspberry Pi Geek (Germany) mentions Lwan in their October/November 2022 issue](https://www.discountmags.com/magazine/raspberry-pi-geek-october-6-2022-digital/in-this-issue/17)\n* [LinuxUser (Germany) mentions Lwan in their October 2022 issue](https://www.linux-community.de/ausgaben/linuxuser/2022/10/aktuelle-software-im-kurztest-30/)\n\nMentions in books:\n\n* [The Ascetic Programmer](https://asceticprogrammer.info/book) has a paragraph about Lwan.\n\nSome talks mentioning Lwan:\n\n* [Talk about Lwan](https://www.youtube.com/watch?v=cttY9FdCzUE) at Polyconf16, given by [@lpereira](https://github.com/lpereira).\n* This [talk about Iron](https://michaelsproul.github.io/iron-talk/), a framework for Rust, mentions Lwan as an *insane C thing*.\n* [University seminar presentation](https://github.com/cu-data-engineering-s15/syllabus/blob/master/student_lectures/LWAN.pdf) about Lwan.\n* This [presentation about Sailor web framework](http://www.slideshare.net/EtieneDalcol/web-development-with-lua-bulgaria-web-summit) mentions Lwan.\n* [Performance and Scale @ Istio Service Mesh](https://www.youtube.com/watch?v=G4F5aRFEXnU), presented at KubeCon Europe 2018, mentions (at the 7:30 mark) that Lwan is used on the server side for testing due to its performance and robustness.\n* [A multi-core Python HTTP server (much) faster than Go (spoiler: Cython)](https://www.youtube.com/watch?v=mZ9cXOH6NYk) presented at PyConFR 2018 by J.-P. Smets mentions [Nexedi's work](https://www.nexedi.com/NXD-Blog.Multicore.Python.HTTP.Server) on using Lwan as a backend for Python services with Cython.\n\nNot really third-party, but alas:\n\n* The [author's blog](http://tia.mat.br).\n* The [project's webpage](http://lwan.ws).\n\nContainer Images\n----------------\n\nLwan container images are available at\n[ghcr.io/lpereira/lwan](https://ghcr.io/lpereira/lwan).  Container runtimes\nlike [Docker](https://docker.io) or [Podman](https://podman.io) may be used\nto build and run Lwan in a container.\n\n### Pull lwan images from GHCR\nContainer images are tagged with release version numbers, so a specific version of Lwan can be pulled.\n\n    # latest version\n    docker pull ghcr.io/lpereira/lwan:latest\n    # pull a specific version\n    docker pull ghcr.io/lpereira/lwan:v0.3\n\n### Build images locally\nClone the repository and use `Containerfile` (Dockerfile) to build Lwan with all optional dependencies enabled.\n\n    podman build -t lwan .\n\n### Run your image\nThe image expects to find static content at `/wwwroot`, so a volume containing your content can be mounted.\n\n    docker run --rm -p 8080:8080 -v ./www:/wwwroot lwan\n\nTo bring your own `lwan.conf`, simply mount it at `/lwan.conf`.\n\n    podman run --rm -p 8080:8080 -v ./lwan.conf:/lwan.conf lwan\n\n### Run image with socket activation on a Linux host with Podman\n\nPodman supports [socket activation of containers](https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#socket-activation-of-containers).\nThis example shows how to run lwan with socket activation and Podman on a Linux host.\n\nRequirements: Podman version 4.5.0 or higher.\n\n1. Create user _test_\n   ```\n   sudo useradd test\n   ```\n2. Start a login shell for the user _test_\n   ```\n   sudo machinectl shell test@\n   ```\n3. Clone the lwan git repository to _~/lwan_\n4. Build the image\n   ```\n   podman build -t lwan ~/lwan\n   ```\n5. Create directories\n   ```\n   mkdir -p ~/.config/containers/systemd\n   mkdir -p ~/.config/systemd/user\n   ```\n6. Create the file _~/lwan.conf_ with the contents\n   ```\n   listener systemd:my.socket\n   site {\n       serve_files / {\n               path = /web\n       }\n   }\n   ```\n7. Create the file _~/.config/systemd/user/my.socket_ with the contents\n   ```\n   [Socket]\n   ListenStream=8080\n   ```\n8. Create the file _~/.config/containers/systemd/my.container_ with the contents\n   ```\n   [Unit]\n   After=my.socket\n   Requires=my.socket\n\n   [Container]\n   Network=none\n   Image=localhost/lwan\n   Volume=/home/test/lwan.conf:/lwan.conf:Z\n   Volume=/home/test/web:/web:Z\n   ```\n   The option `:Z` is needed on SELinux systems.\n   As __lwan__ only needs to communicate over the socket-activated socket, it's possible to use `Network=none`. See the article [How to limit container privilege with socket activation](https://www.redhat.com/sysadmin/socket-activation-podman).\n9. Create the web directory and an example text file\n   ```\n   mkdir ~/web\n   echo hello > ~/web/file.txt\n   ```\n10. Reload systemd configuration\n    ```\n    systemctl --user daemon-reload\n    ```\n11. Start the socket\n    ```\n    systemctl --user start my.socket\n    ```\n12. Download the example text file from the lwan web server\n    ```\n    $ curl localhost:8080/file.txt\n    hello\n    ```\n\nLwan quotes\n-----------\n\nThese are some of the quotes found in the wild about Lwan.  They're presented\nin no particular order.  Contributions are appreciated:\n\n> \"Lwan is like a classic, according to the definition given by Italian\n> -- writer Italo Calvino: you can read it again and again\" [Antonio\n> Piccolboni](https://asceticprogrammer.info/book)\n\n> \"I read lwan's source code. Especially, the part of using coroutine was\n> very impressive and it was more interesting than a good novel.  Thank you\n> for that.\" --\n> [@patagonia](https://twitter.com/hakman314/status/996617563470680064)\n\n> \"For the server side, we're using Lwan, which can handle 100k+ reqs/s.\n> It's supposed to be super robust and it's working well for us.\" --\n> [@fawadkhaliq](https://twitter.com/fawadkhaliq)\n\n> \"Insane C thing\" -- [Michael\n> Sproul](https://michaelsproul.github.io/iron-talk/)\n\n> \"The best performer is LWAN, a newcomer\" -- [InfoQ](https://www.infoq.com/news/2015/04/web-frameworks-benchmark-2015/)\n\n> \"I've never had a chance to thank you for Lwan.  It inspired me a lot to\n> develop [Zewo](https://github.com/Zewo/Zero)\" --\n> [@paulofariarl](https://twitter.com/paulofariarl/status/707926806373003265)\n\n> \"Let me say that lwan is a thing of beauty.  I got sucked into reading the\n> source code for pure entertainment, it's so good.  *high five*\" --\n> [@kwilczynski](https://twitter.com/kwilczynski/status/692881117003644929)\n\n> \"mad science\" -- [jwz](https://jwz.org/b/yjFZ)\n\n> \"Nice work with Lwan! I haven't looked _that_ carefully yet but so far I\n> like what I saw.  You definitely have the right ideas.\" --\n> [@thinkingfish](https://twitter.com/thinkingfish/status/521574267612196864)\n\n> \"Lwan is a work of art. Every time I read through it, I am almost always\n> awe-struck.\" --\n> [@neurodrone](https://twitter.com/neurodrone/status/359296080283840513)\n\n> \"For Round 10, Lwan has taken the crown\" --\n> [TechEmpower](https://www.techempower.com/blog/2015/04/21/framework-benchmarks-round-10/)\n\n> \"Jeez this is amazing. Just end to end, rock solid engineering. (...) But that sells this work short.\"\n> [kjeetgill](https://news.ycombinator.com/item?id=17548983)\n\n> \"I am only a spare time C coder myself and was surprised that I can follow the code. Nice!\"\n> [cntlzw](https://news.ycombinator.com/item?id=17550319)\n\n> \"Impressive all and all, even more for being written in (grokkable!) C. Nice work.\"\n> [tpaschalis](https://news.ycombinator.com/item?id=17550961)\n\n> \"LWAN was a complete failure\" [dermetfan](http://dermetfan.net/posts/zig-with-c-web-servers.html)\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "lwan.conf",
          "type": "blob",
          "size": 0.9482421875,
          "content": "# Timeout in seconds to keep a connection alive.\nkeep_alive_timeout = 15\n\n# Set to true to not print any debugging messages. (Only effective in\n# release builds.)\nquiet = false\n\n# Value of \"Expires\" header. Default is 1 month and 1 week.\nexpires = 1M 1w\n\n# Number of I/O threads. Default (0) is number of online CPUs.\nthreads = 0\n\n# Disable HAProxy's PROXY protocol by default. Only enable if needed.\nproxy_protocol = false\n\n# Enable straitjacket by default. The `drop_capabilities` option is `true`\n# by default.  Other options may require more privileges.\nstraitjacket\n\nlistener *:8080\n\n#tls_listener *:8081 {\n#    cert = /path/to/cert.pem\n#    key = /path/to/key.pem\n#}\n\nsite {\n    serve_files / {\n            path = ./wwwroot\n\n            # When requesting for file.ext, look for a smaller/newer file.ext.gz,\n            # and serve that instead if `Accept-Encoding: gzip` is in the\n            # request headers.\n            serve precompressed files = true\n    }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "wwwroot",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}