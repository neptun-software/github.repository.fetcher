{
  "metadata": {
    "timestamp": 1736710371519,
    "page": 190,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "swiftlang/swift-corelibs-foundation",
      "stars": 5310,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.35546875,
          "content": "*~\n\n# Mac OS X filesystem metadata\n.DS_Store\n\nPackage.resolved\n\n# Xcode user artifacts\nxcuserdata/\nproject.xcworkspace\n\n# AppCode artifacts\n.idea/\n\n# VSCode artifacts\n.vscode/\n\n# python generated files\n*.pyc\n\n# build files generated by the configure script\n*.ninja\n.ninja_deps\n.ninja_log\n\nBuild\n.build\n.index-build\n.configuration\n\n*.swp\n*.orig\n.arcconfig\n.swiftpm\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 7.7978515625,
          "content": "Adrian-Constantin Popescu <epsilon.gamma@gmail.com> <adrian-constantin.popescu@outlook.com>\nAlex Blewitt <alblue@apple.com> <alex.blewitt@gmail.com>\nAlex Hoppen <alex@alexhoppen.de> <alex@ateamer.de>\nAlexis Beingessner <abeingessner@apple.com> <a.beingessner@gmail.com>\nAlper Çugun <github@alper.nl> <alper@users.noreply.github.com>\nAmr Aboelela <amraboelela@gmail.com> <amraboelela@users.noreply.github.com>\nAnkit Aggarwal <ankit_aggarwal@apple.com> <ankit.spd@gmail.com>\nArgyrios Kyrtzidis <kyrtzidis@apple.com> <akyrtzi@gmail.com>\nArsen Gasparyan <to.arsen.gasparyan@gmail.com> <frootloops@users.noreply.github.com>\nBen Cohen <ben_cohen@apple.com>\nBen Cohen <ben_cohen@apple.com> <airspeedswift@users.noreply.github.com>\nBen Cohen <ben_cohen@apple.com> <ben@airspeedvelocity.net>\nBen Langmuir <blangmuir@apple.com> <ben.langmuir@gmail.com>\nBrent Royal-Gordon <brent@brentdax.com> <brent@architechies.com>\nBrian Croom <bcroom@apple.com> <brian.s.croom@gmail.com>\nBrian Gesiak <bgesiak@fb.com> <modocache@gmail.com>\nBryan Chan <bryan.chan@ca.ibm.com> <bryanpkc@gmail.com>\nCalvin Hill <mr_j.c.h@hotmail.com> <return@users.noreply.github.com>\nChris Bieneman <beanz@apple.com>\nChris Bieneman <beanz@apple.com> <cbieneman@apple.com>\nChris Lattner <clattner@nondot.org> <clattner@apple.com>\nChris Lattner <clattner@nondot.org> <lattner@users.noreply.github.com>\nChris Lattner <clattner@nondot.org> <sabre@iMac.local>\nChris Williams <cwilliams@fitbit.com> <ultramiraculous@users.noreply.github.com>\ncodester <sahil.profile@gmail.com> codestergit <sahil.profile@gmail.com>\nDan Liew <dliew@apple.com> <36706441+danliew-apple@users.noreply.github.com>\nDaniel Duan <daniel@duan.org> <danmarner@gmail.com>\nDante Broggi <34220985+Dante-Broggi@users.noreply.github.com>\nDave <davesweeris@mac.com>\nDave Abrahams <dabrahams@apple.com> <dave@boostpro.com>\nDave Abrahams <dabrahams@apple.com> <dave@fripp.apple.com>\nDave Abrahams <dabrahams@apple.com> <dave@Skree.local>\nDave Abrahams <dabrahams@apple.com> <dave@Wingy.local>\nDave Lee <davelee@lyft.com> <davelee.com@gmail.com>\nDavid Rönnqvist <david.ronnqvist@gmail.com> <david.ronnqvist@skype.net>\nDavid Zarzycki <dave@znu.io> <zarzycki@icloud.com>\nDavid Zarzycki <dave@znu.io> <zarzycki@mac.com>\nDavide Italiano <ditaliano@apple.com> <dcci@users.noreply.github.com>\nDavide Italiano <ditaliano@apple.com> <dccitaliano@gmail.com>\nDmitri Gribenko <gribozavr@gmail.com> <dgribenko@apple.com>\nDoug Coleman <doug_coleman@apple.com> <doug.coleman@gmail.com>\nEnrico Granata <egranata@apple.com> <egranata@egranata.apple.com>\nEnrico Granata <egranata@apple.com> <granata.enrico@gmail.com>\nErik Eckstein <eeckstein@apple.com> <eeckstein@apple.com>\nErik Eckstein <eeckstein@apple.com> <eeckstein@rad-main.corp.apple.com>\nErik Verbruggen <erik.verbruggen@me.com> <erikjv@users.noreply.github.com>\nEwa Matejska <ematejska@apple.com> <ematejska@apple.com>\nEwa Matejska <ematejska@apple.com> <ematejska@Ewas-MacBook-Pro.local>\nEwa Matejska <ematejska@apple.com> <ewamatejska@Ewas-iMac.local>\nFlorent Bruneau <florent.bruneau@intersec.com> <florent.bruneau_github@m4x.org>\nFrancis Ricci <fjricci@fb.com> <francisjricci@gmail.com>\nGauravDS <er.gauravds@gmail.com> <gaurav.sharma@punchh.com>\nGraydon Hoare <ghoare@apple.com> <graydon@users.noreply.github.com>\nGreg Parker <gparker@apple.com> <gparker-github@sealiesoftware.com>\nGuillaume Lessard <dhtnstff@gmail.com> <glessard@users.noreply.github.com>\nHamish <hamish2knight@gmail.com> <hamish2knight@gmail.com>\nHan Sangjin <tinysun@jssolution.co.kr> <tinysun.net@gmail.com>\nHarlan Haskins <harlan@apple.com> <harlan@harlanhaskins.com>\nHitster GTD <hitstergtd@users.noreply.github.com> <hitstergtd@users.noreply.github.com>\nHuon Wilson <huon@apple.com> <dbau.pp+github@gmail.com>\nIngmar Stein <IngmarStein@users.noreply.github.com>\nItai Ferber <iferber@apple.com> <itai@itaiferber.net>\nJacob Bandes-Storch <jacob@bandes-stor.ch> <jacob@bandes-storch.net>\nJacob Mizraji <jmizraji@apple.com> <jacobmizraji@gmail.com>\nJanosch Hildebrand <jnosh@jnosh.com> <jnosh+git@jnosh.com>\nJanosch Hildebrand <jnosh@jnosh.com> <jnosh+github@jnosh.com>\nJavier Soto <jsbustos@twitch.tv> <javier.api@gmail.com>\nJavier Soto <jsbustos@twitch.tv> <javiers@twitter.com>\nJoe <joe@iachieved.it>\nJoe <joewillsher@icloud.com>\njoe DeCapo <joe@polka.cat>\nJoe Groff <jgroff@apple.com> <arcata@gmail.com>\nJoe Shajrawi <shajrawi@apple.com> <joeshajrawi@iMac-2.local>\nJoe Shajrawi <shajrawi@apple.com> <joeshajrawi@Joes-iMac-Pro.local>\nJohannes Weiß <johannesweiss@apple.com> <github@tux4u.de>\nJohn Regner <john@johnregner.com> <regnerjr@gmail.com>\nKaroy Lorentey <klorentey@apple.com> <karoly@lorentey.hu>\nKeith Smiley <k@keith.so> <keithbsmiley@gmail.com>\nKevin Ballard <kevin@sb.org> <kevin.ballard@postmates.com>\nKosuke Ogawa <ogawa_kousuke@aratana.jp> <koogawa.app@gmail.com>\nKuba Mracek <mracek@apple.com> <jbrecka@apple.com>\nLuiz Fernando Silva <luizinho_mack@yahoo.com.br>\nLuqman Aden <luqman@apple.com> <luqman_aden@apple.com>\nMarcelo Fabri <me@marcelofabri.com> <marcelofabri@users.noreply.github.com>\nMark Lacey <mark.lacey@apple.com> <rudkx@icloud.com>\nMark Lacey <mark.lacey@apple.com> <rudkx@users.noreply.github.com>\nMatt Rajca <matt.rajca@me.com> <mattrajca@users.noreply.github.com>\nMax Moiseev <moiseev@apple.com> <maxim.moiseev@gmail.com>\nMax Moiseev <moiseev@apple.com> <moiseev@users.noreply.github.com>\nMaxwell Swadling <maxs@apple.com> <maxwellswadling@gmail.com>\nMaxwell Swadling <maxs@apple.com> <mswadling@apple.com>\nMayur Raiturkar <mayur@mayur.xyz> <mayurkr@users.noreply.github.com>\nMichael Gottesman <mgottesman@apple.com> <gottesmm@users.noreply.github.com>\nMichael Ilseman <milseman@apple.com> <michael.ilseman@gmail.com>\nMike Ash <mikeash@apple.com> <mike@mikeash.com>\nMike Ferris <mferris@apple.com> <mike@lorax.com>\nMishal Awadah <mawadah@apple.com>\nMishal Shah <mishal_shah@apple.com> <shahmishal@users.noreply.github.com>\nNadav Rotem <nrotem@apple.com> <nadavrot@users.noreply.github.com>\nNate Cook <natecook@apple.com> <nate@Nates-MacBook-Pro.local>\nNate Cook <natecook@apple.com> <natecook@gmail.com>\nNate Cook <natecook@apple.com> <natecook1000@users.noreply.github.com>\nNate Cook <natecook@apple.com> <nmersethcook@apple.com>\nNathan Lanza <lanza@fb.com> <nathan@lanza.io>\nNicole Jacque <jacque@apple.com>\nNiels Andriesse <andriesseniels@gmail.com> <nielsandriesse@users.noreply.github.com>\nPaul Meng <mno2@mno2.org> <mno2.csie@gmail.com>\nPavel Yaskevich <pyaskevich@apple.com> <xedin@apache.org>\nPaweł Szot <pszot@pgs-soft.com>\nPaweł Szot <pszot@pgs-soft.com> <qwertyszot@gmail.com>\nPete Cooper <peter_cooper@apple.com>\nPhilip Ridgeway <pridgeway@vernier.com> <philip.ridgeway@gmail.com>\nRichard Wei <rxwei@apple.com> <rxwei@google.com>\nRintaro Ishizaki <rishizaki@apple.com> <fs.output@gmail.com>\nRobert Widmann <rwidmann@apple.com> <devteam.codafi@gmail.com>\nRoman Levenstein <rlevenstein@apple.com> <swiftix@users.noreply.github.com>\nRoss Bayer <ross.m.bayer@gmail.com> <Rostepher@users.noreply.github.com>\nRuss Bishop <rbishopjr@apple.com> <russ@plangrid.com>\nRyan Lovelett <ryan@lovelett.me> <RLovelett@users.noreply.github.com>\nShawn Erickson <shawn.erickson@citrix.com> <shawnce@gmail.com>\nSlava Pestov <spestov@apple.com> <spestov@rad-main.corp.apple.com>\nSlava Pestov <spestov@apple.com> <sviatoslav.pestov@gmail.com>\nStephen Canon <scanon@apple.com>\nStephen Canon <scanon@apple.com> <stephentyrone@gmail.com>\nSukolsak Sakshuwong <sukolsak@gmail.com>\nTodd Fiala <tfiala@apple.com> <todd.fiala@gmail.com>\nToni Suter <tonisuter@me.com> <tonisuter@users.noreply.github.com>\nVedant Kumar <vsk@apple.com> <vk@vedantk.com>\nXi Ge <xi_ge@apple.com> <xi_ge@rad-main.corp.apple.com>\nXin Tong <xin_tong@apple.com> <trent.xin.tong@gmail.com>\nXin Tong <xin_tong@apple.com> <trentxintong@Xins-MacBook-Pro.local>\nYuka Ezura <ezura@users.noreply.github.com> <2020337+ezura@users.noreply.github.com>\nYurii Samsoniuk <ura@google.com> <mr.sigito@gmail.com>\nZac Bowling <zbowling@google.com> <zac@zacbowling.com>\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.25390625,
          "content": "##===----------------------------------------------------------------------===##\n##\n## This source file is part of the Swift open source project\n##\n## Copyright (c) 2024 Apple Inc. and the Swift project authors\n## Licensed under Apache License v2.0\n##\n## See LICENSE.txt for license information\n## See CONTRIBUTORS.md for the list of Swift project authors\n##\n## SPDX-License-Identifier: Apache-2.0\n##\n##===----------------------------------------------------------------------===##\n\ncmake_minimum_required(VERSION 3.24)\n\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)\n\nif(POLICY CMP0156)\n    # Deduplicate linked libraries where appropriate\n    cmake_policy(SET CMP0156 NEW)\nendif()\n\nif(POLICY CMP0157)\n    # New Swift build model: improved incremental build performance and LSP support\n    cmake_policy(SET CMP0157 NEW)\nendif()\n\nif (NOT DEFINED CMAKE_C_COMPILER)\n    set(CMAKE_C_COMPILER clang)\nendif()\n\nproject(Foundation\n    LANGUAGES C Swift)\n\nif(NOT SWIFT_SYSTEM_NAME)\n  if(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n    set(SWIFT_SYSTEM_NAME macosx)\n  else()\n    set(SWIFT_SYSTEM_NAME \"$<LOWER_CASE:${CMAKE_SYSTEM_NAME}>\")\n  endif()\nendif()\n\n# Don't enable WMO on Windows due to linker failures\nif(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)\n    # Enable whole module optimization for release builds & incremental for debug builds\n    if(POLICY CMP0157)\n        set(CMAKE_Swift_COMPILATION_MODE \"$<IF:$<CONFIG:Release>,wholemodule,incremental>\")\n    else()\n        add_compile_options($<$<AND:$<COMPILE_LANGUAGE:Swift>,$<CONFIG:Release>>:-wmo>)\n    endif()\nendif()\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_Swift_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/swift)\n\noption(BUILD_SHARED_LIBS \"build shared libraries\" ON)\noption(BUILD_FULLY_STATIC \"build fully static\" NO)\n\n# Optionally build tools (on by default) but only when building shared libraries\nif(BUILD_SHARED_LIBS)\n    option(FOUNDATION_BUILD_TOOLS \"build tools\" ON)\nendif()\n\nset(FOUNDATION_BUILD_NETWORKING_default ON)\nif(CMAKE_SYSTEM_NAME STREQUAL \"WASI\")\n    # Networking is not supported on WASI\n    set(FOUNDATION_BUILD_NETWORKING_default OFF)\nendif()\noption(FOUNDATION_BUILD_NETWORKING \"build FoundationNetworking\"\n    ${FOUNDATION_BUILD_NETWORKING_default})\n\nset(CMAKE_POSITION_INDEPENDENT_CODE YES)\n\n# Fetchable dependencies\ninclude(FetchContent)\nif (_SwiftFoundationICU_SourceDIR)\n    FetchContent_Declare(SwiftFoundationICU\n        SOURCE_DIR ${_SwiftFoundationICU_SourceDIR})\nelse()\n    FetchContent_Declare(SwiftFoundationICU\n        GIT_REPOSITORY https://github.com/apple/swift-foundation-icu.git\n        GIT_TAG 0.0.9)\nendif()\n\nif (_SwiftFoundation_SourceDIR)\n    FetchContent_Declare(SwiftFoundation\n        SOURCE_DIR ${_SwiftFoundation_SourceDIR})\nelse()\n    FetchContent_Declare(SwiftFoundation\n        GIT_REPOSITORY https://github.com/apple/swift-foundation.git\n        GIT_TAG main)\nendif()\nFetchContent_MakeAvailable(SwiftFoundationICU SwiftFoundation)\n\ninclude(CheckLinkerFlag)\ninclude(CheckSymbolExists)\n\ncheck_linker_flag(C \"LINKER:--build-id=sha1\" LINKER_SUPPORTS_BUILD_ID)\n\n# Detect if the system libc defines symbols for these functions.\n# If it is not availble, swift-corelibs-foundation has its own implementations\n# that will be used. If it is available, it should not redefine them.\n# Note: SwiftPM does not have the ability to introspect the contents of the SDK\n#       and therefore will always include these functions in the build and will\n#       cause build failures on platforms that define these functions.\ncheck_symbol_exists(\"strlcat\" \"string.h\" HAVE_STRLCAT)\ncheck_symbol_exists(\"strlcpy\" \"string.h\" HAVE_STRLCPY)\ncheck_symbol_exists(\"issetugid\" \"unistd.h\" HAVE_ISSETUGID)\nadd_compile_definitions(\n  $<$<AND:$<COMPILE_LANGUAGE:C>,$<BOOL:${HAVE_STRLCAT}>>:HAVE_STRLCAT>\n  $<$<AND:$<COMPILE_LANGUAGE:C>,$<BOOL:${HAVE_STRLCPY}>>:HAVE_STRLCPY>\n  $<$<AND:$<COMPILE_LANGUAGE:C>,$<BOOL:${HAVE_ISSETUGID}>>:HAVE_ISSETUGID>)\n\nif(CMAKE_SYSTEM_NAME STREQUAL Linux)\n  check_symbol_exists(sched_getaffinity \"sched.h\" HAVE_SCHED_GETAFFINITY)\n  add_compile_definitions($<$<COMPILE_LANGUAGE:C>:HAVE_SCHED_GETAFFINITY>)\nendif()\n\n# Precompute module triple for installation\nif(NOT SwiftFoundation_MODULE_TRIPLE)\n    set(module_triple_command \"${CMAKE_Swift_COMPILER}\" -print-target-info)\n    if(CMAKE_Swift_COMPILER_TARGET)\n        list(APPEND module_triple_command -target ${CMAKE_Swift_COMPILER_TARGET})\n    endif()\n    execute_process(COMMAND ${module_triple_command} OUTPUT_VARIABLE target_info_json)\n    string(JSON module_triple GET \"${target_info_json}\" \"target\" \"moduleTriple\")\n    set(SwiftFoundation_MODULE_TRIPLE \"${module_triple}\" CACHE STRING \"swift module triple used for installed swiftmodule and swiftinterface files\")\n    mark_as_advanced(SwiftFoundation_MODULE_TRIPLE)\nendif()\n\n# System dependencies\n\n# We know libdispatch is always unavailable on WASI\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"WASI\")\n    find_package(LibRT)\n    find_package(dispatch CONFIG)\n    if(NOT dispatch_FOUND)\n        if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\" OR CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n            set(DEFAULT_DISPATCH_INCLUDE_PATH \"/usr/lib/swift\")\n        elseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n            set(DEFAULT_DISPATCH_INCLUDE_PATH \"$ENV{SDKROOT}usr/include\")\n        endif()\n        set(DISPATCH_INCLUDE_PATH \"${DEFAULT_DISPATCH_INCLUDE_PATH}\" CACHE STRING \"A path to where you can find libdispatch headers\")\n        message(\"-- dispatch_DIR not found, using dispatch from SDK at ${DISPATCH_INCLUDE_PATH}\")\n        list(APPEND _Foundation_common_build_flags\n            \"-I${DISPATCH_INCLUDE_PATH}\"\n            \"-I${DISPATCH_INCLUDE_PATH}/Block\")\n    endif()\nendif()\nif(ANDROID)\n  # LibXml2 looks for the Threads package, so\n  # ensure that it doesn't try to use the `-pthread`\n  # flag on Android.\n  set(CMAKE_HAVE_LIBC_PTHREAD YES)\nendif()\nfind_package(LibXml2 REQUIRED)\nif(FOUNDATION_BUILD_NETWORKING)\n    find_package(CURL REQUIRED)\nendif()\n\n# Common build flags (_CFURLSessionInterface, _CFXMLInterface, CoreFoundation)\nlist(APPEND _Foundation_common_build_flags\n    \"-DDEPLOYMENT_RUNTIME_SWIFT\"\n    \"-DCF_BUILDING_CF\"\n    \"-DHAVE_STRUCT_TIMESPEC\"\n    \"-Wno-shorten-64-to-32\"\n    \"-Wno-deprecated-declarations\"\n    \"-Wno-unreachable-code\"\n    \"-Wno-conditional-uninitialized\"\n    \"-Wno-unused-variable\"\n    \"-Wno-unused-function\"\n    \"-Wno-microsoft-enum-forward-reference\"\n    \"-Wno-int-conversion\"\n    \"-Wno-switch\"\n    \"-fblocks\")\n\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"WASI\")\n    list(APPEND _Foundation_common_build_flags\n        \"-DDEPLOYMENT_ENABLE_LIBDISPATCH\"\n        \"-DSWIFT_CORELIBS_FOUNDATION_HAS_THREADS\")\nendif()\n\nif(NOT \"${CMAKE_C_SIMULATE_ID}\" STREQUAL \"MSVC\")\n    list(APPEND _Foundation_common_build_flags\n        \"-fconstant-cfstrings\"\n        \"-fdollars-in-identifiers\"\n        \"-fno-common\"\n        \"-fcf-runtime-abi=swift\")\n\n    if(NOT CMAKE_SYSTEM_NAME STREQUAL OpenBSD)\n        list(APPEND _Foundation_common_build_flags\n            \"-fexceptions\")\n    endif()\nelse()\n    list(APPEND _Foundation_common_build_flags\n        \"/EHsc\"\n        \"/clang:-fcf-runtime-abi=swift\")\nendif()\n\nif(CMAKE_BUILD_TYPE STREQUAL Debug)\n    list(APPEND _Foundation_common_build_flags\n        \"-DDEBUG\")\nendif()\n\n# Swift build flags (Foundation, FoundationNetworking, FoundationXML)\nset(_Foundation_swift_build_flags)\nlist(APPEND _Foundation_swift_build_flags\n    \"-swift-version 6\"\n    \"-DDEPLOYMENT_RUNTIME_SWIFT\"\n    \"-Xfrontend\"\n    \"-require-explicit-sendable\")\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"WASI\")\n    # Enable wasi-libc emulation features\n    set(WASI_EMULATION_DEFS _WASI_EMULATED_MMAN _WASI_EMULATED_SIGNAL _WASI_EMULATED_PROCESS_CLOCKS)\n    foreach(def ${WASI_EMULATION_DEFS})\n        list(APPEND _Foundation_swift_build_flags \"SHELL:-Xcc -D${def}\")\n        list(APPEND _Foundation_common_build_flags \"-D${def}\")\n    endforeach()\nelse()\n    # Assume we have threads on other platforms\n    list(APPEND _Foundation_swift_build_flags\n        \"-DSWIFT_CORELIBS_FOUNDATION_HAS_THREADS\")\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\" OR CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    list(APPEND _Foundation_common_build_flags\n        \"-D_GNU_SOURCE\")\nendif()\n\ninclude(GNUInstallDirs)\ninclude(FoundationSwiftSupport)\n\nadd_subdirectory(Sources)\nadd_subdirectory(cmake/modules)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.291015625,
          "content": "# Contributing\n\nContributions to Foundation are welcome! This project follows the [contribution guidelines for the Swift project](https://swift.org/contributing/#contributing-code). If you are interested in contributing, please consult with our [status page](Docs/Status.md) to see what work remains to be done. A few additional details are outlined below.\n\n\n## Bug Reports\n\nYou can use the `Foundation` component in the [bug reporter](https://bugs.swift.org) if you know your bug is specifically about Swift Foundation.\n\nPlease remember to include platform information with your report. If the bug is about the Foundation framework on Darwin, then please use [Feedback Assistant](https://feedbackassistant.apple.com).\n\n## Pull Requests\n\nBefore embarking on a large amount of work to implement missing functionality, please double-check with the community in the [Swift Forums](https://forums.swift.org/). Someone may already be working in this area, and we want to avoid duplication of work.\n\nIf your request includes functionality changes, please be sure to test your code on Linux as well as macOS. Differences in the compiler and runtime on each platform means that code that compiles and runs correctly on Darwin (where the Objective-C runtime is present) may not compile at all on Linux.\n\n##### Review\n\nEach pull request will be reviewed by a code owner before merging.\n\n* Pull requests should contain small, incremental change.\n* Focus on one task. If a pull request contains several unrelated commits, we will ask for the pull request to be split up.\n* Please squash work-in-progress commits. Each commit should stand on its own (including the addition of tests if possible). This allows us to bisect issues more effectively.\n* After addressing review feedback, please rebase your commit so that we create a clean history in the `master` branch.\n\n##### Tests\n\nAll pull requests which contain code changes should come with a new set of automated tests, and every current test must pass on all supported platforms.\n\n##### Documentation\n\nMost of the methods in Foundation are lacking documentation. We appreciate your help in filling out documentation when you implement a method. Use the markdown syntax in the [Swift Naming Guidelines](https://swift.org/documentation/api-design-guidelines.html#write-doc-comment).\n\n##### Implementation Status\nWe are currently keeping track of the implementation status and test coverage status of our public classes on our [status page](Docs/Status.md). If you make changes to our public interfaces, please take care to update the corresponding entries in that document.\n\n## API Changes\n\nThe interface of Foundation is intended to be both stable and cross-platform. This means that when API is added to Foundation, it is effectively permanent.\n\nIt is therefore critical that any code change that affects the public-facing API go through a full  `swift-evolution` review process. This gives us the chance to ensure several important requirements are satisfied:\n\n* The proposal aligns with our current goals for the upcoming release.\n* We are comfortable supporting the proposed API for the long term.\n* We believe we can make the same change to the API of Darwin Foundation. This could be done via changes in the overlay, changes in the compiler, or changes in Darwin Foundation itself. This must be addressed in every proposal.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.4833984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright [yyyy] [name of copyright owner]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n   \n   \n### Runtime Library Exception to the Apache 2.0 License: ###\n\n\n    As an exception, if you use this Software to compile your source code and\n    portions of this Software are embedded into the binary product as a result,\n    you may redistribute such product without providing attribution as would\n    otherwise be required by Sections 4(a), 4(b) and 4(d) of the License.\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 11.8720703125,
          "content": "// swift-tools-version: 6.0\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet platformsWithThreads: [Platform] = [\n    .iOS,\n    .macOS,\n    .tvOS,\n    .watchOS,\n    .macCatalyst,\n    .driverKit,\n    .android,\n    .linux,\n    .windows,\n]\n\nvar dispatchIncludeFlags: [CSetting] = []\nif let environmentPath = Context.environment[\"DISPATCH_INCLUDE_PATH\"] {\n    dispatchIncludeFlags.append(.unsafeFlags([\n        \"-I\\(environmentPath)\",\n        \"-I\\(environmentPath)/Block\"\n    ]))\n} else {\n    dispatchIncludeFlags.append(\n        .unsafeFlags([\n            \"-I/usr/lib/swift\",\n            \"-I/usr/lib/swift/Block\"\n        ], .when(platforms: [.linux]))\n    )\n    if let sdkRoot = Context.environment[\"SDKROOT\"] {\n        dispatchIncludeFlags.append(.unsafeFlags([\n            \"-I\\(sdkRoot)usr\\\\include\",\n            \"-I\\(sdkRoot)usr\\\\include\\\\Block\",\n        ], .when(platforms: [.windows])))\n    }\n}\n\nvar libxmlIncludeFlags: [CSetting] = []\nif let environmentPath = Context.environment[\"LIBXML_INCLUDE_PATH\"] {\n    libxmlIncludeFlags = [\n        .unsafeFlags([\n            \"-I\\(environmentPath)\"\n        ]),\n        .define(\"LIBXML_STATIC\")\n    ]\n}\n\nvar curlIncludeFlags: [CSetting] = []\nif let environmentPath = Context.environment[\"CURL_INCLUDE_PATH\"] {\n    curlIncludeFlags  = [\n        .unsafeFlags([\n            \"-I\\(environmentPath)\"\n        ]),\n        .define(\"CURL_STATICLIB\")\n    ]\n}\n\nvar curlLinkFlags: [LinkerSetting] = [\n    .linkedLibrary(\"libcurl.lib\", .when(platforms: [.windows])),\n    .linkedLibrary(\"zlibstatic.lib\", .when(platforms: [.windows]))\n]\nif let environmentPath = Context.environment[\"CURL_LIBRARY_PATH\"] {\n    curlLinkFlags.append(.unsafeFlags([\n        \"-L\\(environmentPath)\"\n    ]))\n}\nif let environmentPath = Context.environment[\"ZLIB_LIBRARY_PATH\"] {\n    curlLinkFlags.append(.unsafeFlags([\n        \"-L\\(environmentPath)\"\n    ]))\n}\n\nvar libxmlLinkFlags: [LinkerSetting] = [\n    .linkedLibrary(\"libxml2s.lib\", .when(platforms: [.windows]))\n]\nif let environmentPath = Context.environment[\"LIBXML_LIBRARY_PATH\"] {\n    libxmlLinkFlags.append(.unsafeFlags([\n        \"-L\\(environmentPath)\"\n    ]))\n}\n\nlet coreFoundationBuildSettings: [CSetting] = [\n    .headerSearchPath(\"internalInclude\"),\n    .define(\"DEBUG\", .when(configuration: .debug)),\n    .define(\"CF_BUILDING_CF\"),\n    .define(\"CF_WINDOWS_EXECUTABLE_INITIALIZER\", .when(platforms: [.windows])), // Ensure __CFInitialize is run even when statically linked into an executable\n    .define(\"DEPLOYMENT_ENABLE_LIBDISPATCH\", .when(platforms: platformsWithThreads)),\n    .define(\"DEPLOYMENT_RUNTIME_SWIFT\"),\n    .define(\"HAVE_STRUCT_TIMESPEC\"),\n    .define(\"SWIFT_CORELIBS_FOUNDATION_HAS_THREADS\", .when(platforms: platformsWithThreads)),\n    .define(\"_GNU_SOURCE\", .when(platforms: [.linux, .android])),\n    .define(\"_WASI_EMULATED_SIGNAL\", .when(platforms: [.wasi])),\n    .unsafeFlags([\n        \"-Wno-shorten-64-to-32\",\n        \"-Wno-deprecated-declarations\",\n        \"-Wno-unreachable-code\",\n        \"-Wno-conditional-uninitialized\",\n        \"-Wno-unused-variable\",\n        \"-Wno-unused-function\",\n        \"-Wno-microsoft-enum-forward-reference\",\n        \"-Wno-int-conversion\",\n        \"-Wno-switch\",\n        \"-fconstant-cfstrings\",\n        \"-fexceptions\", // TODO: not on OpenBSD\n        \"-fdollars-in-identifiers\",\n        \"-fno-common\",\n        \"-fcf-runtime-abi=swift\",\n        \"-include\",\n        \"\\(Context.packageDirectory)/Sources/CoreFoundation/internalInclude/CoreFoundation_Prefix.h\",\n        // /EHsc for Windows\n    ])\n] + dispatchIncludeFlags\n\n// For _CFURLSessionInterface, _CFXMLInterface\nlet interfaceBuildSettings: [CSetting] = [\n    .headerSearchPath(\"../CoreFoundation/internalInclude\"),\n    .define(\"DEBUG\", .when(configuration: .debug)),\n    .define(\"CF_BUILDING_CF\"),\n    .define(\"DEPLOYMENT_ENABLE_LIBDISPATCH\"),\n    .define(\"HAVE_STRUCT_TIMESPEC\"),\n    .define(\"SWIFT_CORELIBS_FOUNDATION_HAS_THREADS\", .when(platforms: platformsWithThreads)),\n    .define(\"_GNU_SOURCE\", .when(platforms: [.linux, .android])),\n    .define(\"_WASI_EMULATED_SIGNAL\", .when(platforms: [.wasi])),\n    .unsafeFlags([\n        \"-Wno-shorten-64-to-32\",\n        \"-Wno-deprecated-declarations\",\n        \"-Wno-unreachable-code\",\n        \"-Wno-conditional-uninitialized\",\n        \"-Wno-unused-variable\",\n        \"-Wno-unused-function\",\n        \"-Wno-microsoft-enum-forward-reference\",\n        \"-Wno-int-conversion\",\n        \"-fconstant-cfstrings\",\n        \"-fexceptions\", // TODO: not on OpenBSD\n        \"-fdollars-in-identifiers\",\n        \"-fno-common\",\n        \"-fcf-runtime-abi=swift\"\n        // /EHsc for Windows\n    ])\n] + dispatchIncludeFlags\n\nlet swiftBuildSettings: [SwiftSetting] = [\n    .define(\"DEPLOYMENT_RUNTIME_SWIFT\"),\n    .define(\"SWIFT_CORELIBS_FOUNDATION_HAS_THREADS\"),\n    .swiftLanguageMode(.v6),\n    .unsafeFlags([\n        \"-Xfrontend\",\n        \"-require-explicit-sendable\",\n    ])\n]\n\nvar dependencies: [Package.Dependency] = []\n\nif let useLocalDepsEnv = Context.environment[\"SWIFTCI_USE_LOCAL_DEPS\"] {\n    let root: String\n    if useLocalDepsEnv == \"1\" {\n        root = \"..\"\n    } else {\n        root = useLocalDepsEnv\n    }\n    dependencies += \n        [\n            .package(\n                name: \"swift-foundation-icu\",\n                path: \"\\(root)/swift-foundation-icu\"),\n            .package(\n                name: \"swift-foundation\",\n                path: \"\\(root)/swift-foundation\")\n        ]\n} else {\n    dependencies += \n        [\n            .package(\n                url: \"https://github.com/apple/swift-foundation-icu\",\n                branch: \"main\"),\n            .package(\n                url: \"https://github.com/apple/swift-foundation\",\n                branch: \"main\")\n        ]\n}\n\nlet package = Package(\n    name: \"swift-corelibs-foundation\",\n    // Deployment target note: This package only builds for non-Darwin targets.\n    platforms: [.macOS(\"99.9\")],\n    products: [\n        .library(name: \"Foundation\", targets: [\"Foundation\"]),\n        .library(name: \"FoundationXML\", targets: [\"FoundationXML\"]),\n        .library(name: \"FoundationNetworking\", targets: [\"FoundationNetworking\"]),\n        .executable(name: \"plutil\", targets: [\"plutil\"]),\n    ],\n    dependencies: dependencies,\n    targets: [\n        .target(\n            name: \"Foundation\",\n            dependencies: [\n                .product(name: \"FoundationEssentials\", package: \"swift-foundation\"),\n                .product(name: \"FoundationInternationalization\", package: \"swift-foundation\"),\n                \"CoreFoundation\"\n            ],\n            path: \"Sources/Foundation\",\n            exclude: [\n                \"CMakeLists.txt\"\n            ],\n            swiftSettings: swiftBuildSettings\n        ),\n        .target(\n            name: \"FoundationXML\",\n            dependencies: [\n                .product(name: \"FoundationEssentials\", package: \"swift-foundation\"),\n                \"Foundation\",\n                \"CoreFoundation\",\n                \"_CFXMLInterface\",\n                .target(name: \"BlocksRuntime\", condition: .when(platforms: [.wasi])),\n            ],\n            path: \"Sources/FoundationXML\",\n            exclude: [\n                \"CMakeLists.txt\"\n            ],\n            swiftSettings: swiftBuildSettings\n        ),\n        .target(\n            name: \"FoundationNetworking\",\n            dependencies: [\n                .product(name: \"FoundationEssentials\", package: \"swift-foundation\"),\n                \"Foundation\",\n                \"CoreFoundation\",\n                \"_CFURLSessionInterface\"\n            ],\n            path: \"Sources/FoundationNetworking\",\n            exclude: [\n                \"CMakeLists.txt\"\n            ],\n            swiftSettings: swiftBuildSettings\n        ),\n        .target(\n            name: \"CoreFoundation\",\n            dependencies: [\n                .product(name: \"_FoundationICU\", package: \"swift-foundation-icu\"),\n                .target(name: \"BlocksRuntime\", condition: .when(platforms: [.wasi])),\n            ],\n            path: \"Sources/CoreFoundation\",\n            exclude: [\n                \"BlockRuntime\",\n                \"CMakeLists.txt\"\n            ],\n            cSettings: coreFoundationBuildSettings,\n            linkerSettings: [.linkedLibrary(\"log\", .when(platforms: [.android]))]\n        ),\n        .target(\n            name: \"BlocksRuntime\",\n            path: \"Sources/CoreFoundation/BlockRuntime\",\n            exclude: [\n                \"CMakeLists.txt\"\n            ],\n            cSettings: [\n                // For CFTargetConditionals.h\n                .headerSearchPath(\"../include\"),\n            ]\n        ),\n        .target(\n            name: \"_CFXMLInterface\",\n            dependencies: [\n                \"CoreFoundation\",\n                .target(name: \"Clibxml2\", condition: .when(platforms: [.linux, .android])),\n            ],\n            path: \"Sources/_CFXMLInterface\",\n            exclude: [\n                \"CMakeLists.txt\"\n            ],\n            cSettings: interfaceBuildSettings + libxmlIncludeFlags,\n            linkerSettings: libxmlLinkFlags\n        ),\n        .target(\n            name: \"_CFURLSessionInterface\",\n            dependencies: [\n                \"CoreFoundation\",\n                .target(name: \"Clibcurl\", condition: .when(platforms: [.linux, .android])),\n            ],\n            path: \"Sources/_CFURLSessionInterface\",\n            exclude: [\n                \"CMakeLists.txt\"\n            ],\n            cSettings: interfaceBuildSettings + curlIncludeFlags,\n            linkerSettings: curlLinkFlags\n        ),\n        .systemLibrary(\n            name: \"Clibxml2\",\n            pkgConfig: \"libxml-2.0\",\n            providers: [\n                .brew([\"libxml2\"]),\n                .apt([\"libxml2-dev\"])\n            ]\n        ),\n        .systemLibrary(\n            name: \"Clibcurl\",\n            pkgConfig: \"libcurl\",\n            providers: [\n                .brew([\"libcurl\"]),\n                .apt([\"libcurl\"])\n            ]\n        ),\n        .executableTarget(\n            name: \"plutil\",\n            dependencies: [\n                \"Foundation\"\n            ],\n            exclude: [\n                \"CMakeLists.txt\"\n            ],\n            swiftSettings: [\n                .swiftLanguageMode(.v6)\n            ]\n        ),\n        .executableTarget(\n            name: \"xdgTestHelper\",\n            dependencies: [\n                \"Foundation\",\n                \"FoundationXML\",\n                \"FoundationNetworking\"\n            ],\n            swiftSettings: [\n                .swiftLanguageMode(.v6)\n            ]\n        ),\n            // swift-corelibs-foundation has a copy of XCTest's sources so:\n            // (1) we do not depend on the toolchain's XCTest, which depends on toolchain's Foundation, which we cannot pull in at the same time as a Foundation package\n            // (2) we do not depend on a swift-corelibs-xctest Swift package, which depends on Foundation, which causes a circular dependency in swiftpm\n            // We believe Foundation is the only project that needs to take this rather drastic measure.\n            // We also have a stub for swift-testing for the same purpose, but without an implementation since this package has no swift-testing style tests\n        .target(\n            name: \"XCTest\",\n            dependencies: [\n                \"Foundation\"\n            ],\n            path: \"Sources/XCTest\"\n        ),\n        .target(\n            name: \"Testing\",\n            dependencies: [],\n            path: \"Sources/Testing\"\n        ),\n        .testTarget(\n            name: \"TestFoundation\",\n            dependencies: [\n                \"Foundation\",\n                \"FoundationXML\",\n                \"FoundationNetworking\",\n                \"XCTest\",\n                \"Testing\",\n                .target(name: \"xdgTestHelper\", condition: .when(platforms: [.linux, .android]))\n            ],\n            resources: [\n                .copy(\"Foundation/Resources\")\n            ],\n            swiftSettings: [\n                .define(\"NS_FOUNDATION_ALLOWS_TESTABLE_IMPORT\"),\n                .swiftLanguageMode(.v6)\n            ]\n        ),\n    ]\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7724609375,
          "content": "# Foundation\n\nThe Foundation framework defines a base layer of functionality that is required for almost all applications. It provides primitive classes and introduces several paradigms that define functionality not provided by either the Objective-C runtime and language or Swift standard library and language.\n\nIt is designed with these goals in mind:\n\n* Provide a small set of basic utility classes and data structures.\n* Make software development easier by introducing consistent conventions.\n* Support internationalization and localization, to make software accessible to users around the world.\n* Provide a level of OS independence, to enhance portability.\n\nThere is more information on the Foundation framework [here](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/).\n\nThis project, `swift-corelibs-foundation`, provides a compatibility implementation of the Foundation API for platforms where there is no Objective-C runtime. On macOS, iOS, and other Apple platforms, apps should use the Foundation that comes with the operating system.\n\n## Project Navigator\n\nFoundation builds in different configurations and is composed of several projects.\n\n```mermaid\n  graph TD;\n      FF[Foundation.framework]-->SF\n      subgraph GitHub\n        SCLF[swift-corelibs-foundation]-->SF\n        SF[swift-foundation]-->FICU[swift-foundation-icu]\n        SF-->SC[swift-collections]\n      end   \n```\n\n### Swift Foundation\n\nA shared library shipped in the Swift toolchain, written in Swift. It provides the core implementation of many key types, including `URL`, `Data`, `JSONDecoder`, `Locale`, `Calendar`, and more in the `FoundationEssentials` and `FoundationInternationalization` modules. Its source code is shared across all platforms.\n\n_swift-foundation_ depends on a limited set of packages, primarily [swift-collections](http://github.com/apple/swift-collections) and [swift-syntax](http://github.com/apple/swift-syntax).\n\n### Swift Corelibs Foundation\n\nA shared library shipped in the Swift toolchain. It provides compatibility API for clients that need pre-Swift API from Foundation. It is written in Swift and C. It provides, among other types, `NSObject`, class-based data structures, `NSFormatter`, and `NSKeyedArchiver`. It re-exports the `FoundationEssentials` and `FoundationInternationalization` modules, allowing compatibility for source written before the introduction of the _swift-foundation_ project. As these implementations are distinct from those written in Objective-C, the compatibility is best-effort only.\n\n_swift-corelibs-foundation_ builds for non-Darwin platforms only. It installs the `Foundation` umbrella module, `FoundationXML`, and `FoundationNetworking`.\n\n### Foundation ICU\n\nA private library for Foundation, wrapping ICU. Using a standard version of ICU provides stability in the behavior of our internationalization API, and consistency with the latest releases on Darwin platforms. It is imported from the `FoundationInternationalization` module only. Clients that do not need API that relies upon the data provided by ICU can import `FoundationEssentials` instead.\n\n### Foundation Framework\n\nA [framework](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Frameworks.html) built into macOS, iOS, and all other Darwin platforms. It is written in a combination of C, Objective-C, and Swift. The Foundation framework compiles the sources from _swift-foundation_ into its binary and provides one `Foundation` module that contains all features.\n\n\n## Using Foundation\n\nHere is a simple `main.swift` file which uses Foundation. This guide assumes you have already installed a version of the latest [Swift binary distribution](https://swift.org/download/#latest-development-snapshots).\n\n```swift\nimport Foundation\n\n// Make a URLComponents instance\nlet swifty = URLComponents(string: \"https://swift.org\")!\n\n// Print something useful about the URL\nprint(\"\\(swifty.host!)\")\n\n// Output: \"swift.org\"\n```\n\nYou will want to use the [Swift Package Manager](https://swift.org/package-manager/) to build your Swift apps.\n\n## Working on Foundation\n\nswift-corelibs-foundation builds as a standalone project using Swift Package Manager. Simply use `swift build` in the root of the checkout to build the project.\n\nswift-corelibs-foundation also builds as part of the toolchain for non-Darwin platforms. Instructions on building the toolchain are available in the [Swift project](https://github.com/swiftlang/swift?tab=readme-ov-file#building).\n\n## Contributions\n\nWe welcome contributions to Foundation! Please see the [known issues](Docs/Issues.md) page if you are looking for an area where we need help. We are also standing by on the [mailing lists](https://swift.org/community/#communication) to answer questions about what is most important to do and what we will accept into the project.\n"
        },
        {
          "name": "Sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}