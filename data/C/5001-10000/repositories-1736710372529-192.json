{
  "metadata": {
    "timestamp": 1736710372529,
    "page": 192,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kornelski/pngquant",
      "stars": 5295,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12109375,
          "content": "*.dylib\n*.mode1v3\n*.o\n*.lo\n*.pbxuser\nbuild\nDerivedData\npngquant\nlib/libimagequant.a\n*.obj\n*.lib\nconfig.mk\ntest/test\ntarget/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0703125,
          "content": "[submodule \"lib\"]\n\tpath = lib\n\turl = ../../ImageOptim/libimagequant.git\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 5.9365234375,
          "content": "version 3.0\n-----------\n - replaced C libimagequant library with a Rust imagequant crate\n - switched build system from make to Cargo\n\nversion 2.17\n------------\n - fixed Unicode filenames on Windows\n - builds for ARM\n - small quality improvements\n\nversion 2.16\n------------\n - reduced stack usage, prevenitng stack overlfow in pathological cases\n\nversion 2.13-2.15\n------------\n - speed and quality improvements\n\nversion 2.12\n------------\n - improved speed on large images\n - OpenMP fixes/workarounds\n\nversion 2.11\n------------\n - fixed wildcard support on Windows\n - fixed argument parsing on Windows\n\nversion 2.10\n------------\n - supports building with Rust/Cargo\n - supports dynamic linking with system-wide libimagequant\n\nversion 2.9\n-----------\n - added support for `-o -`\n - windows/JNI build fixes\n\nversion 2.8\n-----------\n - libimagequant is a separate project\n - --strip option to disable copying of PNG metadata\n\nversion 2.7\n-----------\n - improved dithering of saturated and semitransparent colors\n - fixed order of log output when using openmp\n - improved quality sanity check in --skip-if-larger option\n - disabled palette post-processing on colors from --map option to preserve them exactly\n\nversion 2.6\n-----------\n - when source image has no color profile information, the output won't have either\n\nversion 2.5\n-----------\n - replaced color search algorithm with vantage point tree, which is much faster and more reliable\n - deprecated IE6 workaround\n - warn when compiled without color profile support\n - Rust API for libimagequant\n\nversion 2.4\n-----------\n - fixed remapping of bright colors when dithering\n\nversion 2.3\n-----------\n - added ./configure script for better support of Intel C compiler and dependencies [thanks to pdknsk]\n - tweaked quality metric to better estimate quality of images with large solid backgrounds [thanks to Rolf Timmermans]\n - atomic file saves and fixed --skip-if-larger\n - avoid applying quality setting to images that use palette already\n - preserving standard PNG chunks (requires libpng 1.6)\n - deprecated libpng 1.2 support\n\nversion 2.2\n-----------\n - preserving of unknown PNG chunks (enables optimized Android 9-patch images)\n - improved color profile support: cHRM & gAMA as alternative to ICC profiles, OpenMP acceleration\n - improved support for Intel C Compiler, speedup in 32-bit GCC, and some workarounds for Visual Studio's incomplete C support\n\nversion 2.1\n-----------\n - option to save files only if they're compressed better than the original\n - option to generate posterized output (for use with 16-bit textures)\n - support for ICC profiles via Little CMS library\n\nversion 2.0\n-----------\n - refactored codebase into pngquant and standalone libimagequant\n - reduced memory usage by further 30% (and more for very large images)\n - less precise remapping improving speed by 25% in higher speed settings\n - --output option for writing converted file under the given path\n - light dithering with --floyd=0.5\n - fixed regression in dithering of alpha channel\n\nversion 1.8\n-----------\n - min/max quality option (number of colors is automatically adjusted for desired quality level)\n - switched option parsing to getopt_long (syntax such as -s1 and --ext=ext is supported)\n - significantly improved performance thanks to custom partial sorting\n - optional Cocoa (Mac OS X) image reader for color profile support\n - reduced memory usage by 20%\n - remapping improved for very low number of colors\n\nversion 1.7\n-----------\n - new, accurate RGBA color similarity algorithm\n - change of optional SSE3 code to SSE2 that is always enabled on x86-64\n - optional OpenMP-based parallelisation of remapping\n - changed long options to use double hyphen (-force to --force) [thanks to Jari Aalto]\n\nversion 1.6\n-----------\n - novel dithering algorithm that doesn't add noise unless necessary\n - perceptual weighting of colors taking into account edges and noise\n - much faster remapping\n - improved portability, makefiles and man page\n\nversion 1.5\n-----------\n - palettes postprocessed with Voronoi iteration\n - better RGBA color similarity algorithm and Floyd-Steinberg remapping\n - SSE optimisations\n\nversion 1.4\n-----------\n - median cut is applied many times in a feedback loop\n - speed/quality trade-off option\n - faster remap of transparent areas\n\nversion 1.3\n-----------\n - significant changes to the algorithm: use of variance\n   to find largest dimensioin and to split most varying boxes\n - use of premultiplied alpha for color blending\n - conversion of output to gamma 2.2\n\nversion 1.2\n-----------\n - color computation done in floating point\n - gamma correction applied\n - dropped support for very old systems & compilers\n\nversion 1.1\n-----------\n - alpha-sensitive color reduction and dithering\n - support -- and - arguments in command line\n - number of colors optional (defaults to 256)\n - increased maximum number of colors in histogram\n\nversion 1.0\n-----------\n - cleaned up Makefile.unx (better gcc optimizations, \"clean\" target)\n - recompiled binaries with zlib 1.1.4\n\nversion 0.95\n------------\n - fixed Win32 filter bug (binary mode for stdin/stdout)\n - fixed cosmetic \"choosing colors\" verbosity buglet\n - fixed palette-size bug when number of colors in image < number requested\n - fixed sample-depth bug (png_set_packing() not retroactively smart)\n\nversion 0.91\n------------\n - fixed some verbose/non-verbose oopers\n - fixed Win32 (MSVC) portability issues (getpid(), random(), srandom())\n - added Makefile.w32 for MSVC (tested with 5.0)\n\nversion 0.90\n------------\n - added support for multiple files on command line\n - changed stdin support to write PNG stream to stdout (not \"stdin-fs8.png\")\n\nversion 0.75\n------------\n - added support for any type of input file [Glenn Randers-Pehrson]\n - fixed palette-(re)scaling bug\n - added -verbose and -quiet options (default now is -quiet)\n - added palette-remapping to minimize size of tRNS chunk\n - made Floyd-Steinberg dithering default\n - changed output naming scheme to -fs8.png and -or8.png (FS or ordered dither)\n\nversion 0.70\n------------\n - first public release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1513671875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at kornel@geekhood.net. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4541015625,
          "content": "\nThank you for contributing! pngquant and libimagequant are licensed under multiple\nlicensed, so to make things clear, I'm accepting contributions as licensed under\nthe BSD 2-clause license:\n\n   Redistribution and use in source and binary forms, with or without modification,\n   are permitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 34.7861328125,
          "content": "\npngquant and libimagequant are derived from code by Jef Poskanzer and Greg Roelofs\nlicensed under pngquant's original licenses (near the end of this file),\nand contain extensive changes and additions by Kornel Lesiński\nlicensed under GPL v3 or later.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\npngquant © 2009-2018 by Kornel Lesiński.\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nThe quantization and dithering code in pngquant is lifted from Jef Poskanzer's\n'ppmquant', part of his wonderful PBMPLUS tool suite.\n\nGreg Roelofs hacked it into a (in his words) \"slightly cheesy\" 'pamquant' back\nin 1997 (see http://pobox.com/~newt/greg_rgba.html) and finally he ripped out\nthe cheesy file-I/O parts and replaced them with nice PNG code in December\n2000. The PNG reading and writing code is a merged and slightly simplified\nversion of readpng, readpng2, and writepng from his book \"PNG: The Definitive\nGuide.\"\nIn 2014 Greg has relicensed the code under the simplified BSD license.\n\nNote that both licenses are basically BSD-like; that is, use the code however\nyou like, as long as you acknowledge its origins.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\npngquant.c:\n\n   © 1989, 1991 by Jef Poskanzer.\n\n   Permission to use, copy, modify, and distribute this software and its\n   documentation for any purpose and without fee is hereby granted, provided\n   that the above copyright notice appear in all copies and that both that\n   copyright notice and this permission notice appear in supporting\n   documentation.  This software is provided \"as is\" without express or\n   implied warranty.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\npngquant.c and rwpng.c/h:\n\n   © 1997-2002 by Greg Roelofs; based on an idea by Stefan Schneider.\n\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without modification,\n   are permitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.4853515625,
          "content": "[package]\nname = \"pngquant\"\nversion = \"3.0.3\"\nauthors = [\"Kornel Lesiński <kornel@pngquant.org>\"]\ndescription = \"Convert 24/32-bit PNG images to efficient 8-bit format with alpha channel\"\nbuild = \"rust/build.rs\"\ncategories = [\"multimedia::images\"]\nhomepage = \"https://pngquant.org\"\ndocumentation = \"https://github.com/kornelski/pngquant#readme\"\ninclude = [\"/rwpng*.[ch]\", \"/pngquant.c\",\"/pngquant_opts.[ch]\", \"/rust/*.rs\", \"/COPYRIGHT\", \"/Cargo.toml\", \"/README.md\", \"/pngquant.1\"]\nkeywords = [\"quantization\", \"palette\", \"image\", \"pngquant\", \"compression\"]\nlicense = \"GPL-3.0-or-later\"\nreadme = \"README.md\"\nrepository = \"https://github.com/kornelski/pngquant.git\"\nedition = \"2021\"\nrust-version = \"1.63\"\n\n[[bin]]\nname = \"pngquant\"\npath = \"rust/bin.rs\"\n\n[build-dependencies]\ncc = \"1.0.72\"\ndunce = \"1.0.4\"\n\n[dependencies]\ngetopts = \"0.2.21\"\nlibc = \"0.2.112\"\nlibpng-sys = \"1.1.9\"\nwild = \"2.2.0\"\nimagequant-sys = { version = \"4.0.3\", path = \"lib/imagequant-sys\" }\n\n[dependencies.cocoa_image]\noptional = true\nversion = \"1.0.6\"\n\n[dependencies.lcms2-sys]\noptional = true\nversion = \"4.0.3\"\n\n[features]\ncocoa = [\"dep:cocoa_image\"]\ndefault = [\"lcms2\"]\nlcms2 = [\"dep:lcms2-sys\"]\nlcms2-static = [\"lcms2\", \"lcms2-sys?/static\"]\npng-static = [\"libpng-sys/static\"]\nz-static = [\"libpng-sys/static-libz\"]\nstatic = [\"lcms2-static\", \"png-static\"]\n\n[profile.release]\nopt-level = 3\ncodegen-units = 1\nlto = true\npanic = \"abort\"\n\n[package.metadata.docs.rs]\ntargets = [\"x86_64-unknown-linux-gnu\"]\nrustdoc-args = [\"--generate-link-to-definition\"]\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 1.689453125,
          "content": "## Compiling via Rust/Cargo\n\nThe old `configure && make` method is no longer supported.\n\n### Prerequisites\n\nInstall Rust 1.70 or later: https://rustup.rs\n\nOn Windows also install msys-git and Visual C++ Build Tools\nwith Windows 8/10/11 SDK enabled, and reboot.\n\n### Building\n\nGet the code by cloning *recursively*:\n\n    # Unix version\n    git clone --recursive https://github.com/kornelski/pngquant.git\n\n    # Windows version\n    git clone -b msvc --recursive https://github.com/kornelski/pngquant.git\n\nAnd then build:\n\n    cd pngquant\n    cargo build --release\n\nThis will create executable in `target/release/pngquant`(`.exe`).\n\nYou can build with additional features:\n\n    cargo build --release --features=lcms2\n\nThe features are:\n\n * `lcms2` — compile with support for color profiles via Little CMS.\n * `lcms2-static` — same, but link statically.\n * `cocoa` — compile with support for color profiles via macOS Cocoa.\n\n## Compilation with Cocoa image reader\n\nmacOS version can use Cocoa to read images. This adds support for color profiles\nand other image formats as input. However, it also disables support for preserving PNG metadata.\n\n    cargo build --release --features=cocoa\n\n## Compilation with Little CMS 2\n\nLittle CMS library is used by default.\n\nIt's linked dynamically if `pkg-config` is working (e.g. install `liblcms2-dev`).\nOtherwise uses static build as a fallback.\n\nSet `export LCMS2_STATIC=1` or build `--features=lcms2-static` to force static linking.\n\n## Compilation of `libimagequant_sys.a` only\n\nIf you want to use pngquant's conversion algorithm without loading/saving PNG\nfiles, then you can run `cargo build --release` in the `lib/` directory.\n\nThe imagequant library doesn't need libpng nor zlib.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9404296875,
          "content": "# pngquant 3 [![CI](https://github.com/kornelski/pngquant/actions/workflows/ci.yml/badge.svg)](https://github.com/kornelski/pngquant/actions/workflows/ci.yml)\n\n[pngquant](https://pngquant.org) is a PNG compressor that significantly reduces file sizes by converting images to a more efficient 8-bit PNG format *with alpha channel* (often 60-80% smaller than 24/32-bit PNG files). Compressed images are fully standards-compliant and are supported by all web browsers and operating systems.\n\n[This](https://github.com/kornelski/pngquant) is the official `pngquant` repository. The compression engine is also available [as an embeddable library](https://github.com/ImageOptim/libimagequant).\n\n## Usage\n\n- batch conversion of multiple files: `pngquant *.png`\n- Unix-style stdin/stdout chaining: `… | pngquant - | …`\n\nTo further reduce file size, try [oxipng](https://lib.rs/oxipng), [ImageOptim](https://imageoptim.com), or [zopflipng](https://github.com/google/zopfli).\n\n## Features\n\n * High-quality palette generation\n  - advanced quantization algorithm with support for gamma correction and premultiplied alpha\n  - unique dithering algorithm that does not add unnecessary noise to the image\n\n * Configurable quality level\n  - automatically finds required number of colors and can skip images which can't be converted with the desired quality\n\n * Fast, modern code\n  - based on a portable [libimagequant library](https://github.com/ImageOptim/libimagequant)\n  - C99 with no workarounds for legacy systems or compilers ([apart from Visual Studio](https://github.com/kornelski/pngquant/tree/msvc))\n  - multicore support (via OpenMP) and Intel SSE optimizations\n\n## Options\n\nSee `pngquant -h` for full list.\n\n### `--quality min-max`\n\n`min` and `max` are numbers in range 0 (worst) to 100 (perfect), similar to JPEG. pngquant will use the least amount of colors required to meet or exceed the `max` quality. If conversion results in quality below the `min` quality the image won't be saved (if outputting to stdin, 24-bit original will be output) and pngquant will exit with status code 99.\n\n    pngquant --quality=65-80 image.png\n\n### `--ext new.png`\n\nSet custom extension (suffix) for output filename. By default `-or8.png` or `-fs8.png` is used. If you use `--ext=.png --force` options pngquant will overwrite input files in place (use with caution).\n\n### `-o out.png` or `--output out.png`\n\nWrites converted file to the given path. When this option is used only single input file is allowed.\n\n### `--skip-if-larger`\n\nDon't write converted files if the conversion isn't worth it.\n\n### `--speed N`\n\nSpeed/quality trade-off from 1 (slowest, highest quality, smallest files) to 11 (fastest, less consistent quality, light comperssion). The default is 4. It's recommended to keep the default, unless you need to generate images in real time (e.g. map tiles). Higher speeds are fine with 256 colors, but don't handle lower number of colors well.\n\n### `--nofs`\n\nDisables Floyd-Steinberg dithering.\n\n### `--floyd=0.5`\n\nControls level of dithering (0 = none, 1 = full). Note that the `=` character is required.\n\n### `--posterize bits`\n\nReduce precision of the palette by number of bits. Use when the image will be displayed on low-depth screens (e.g. 16-bit displays or compressed textures in ARGB444 format).\n\n### `--strip`\n\nDon't copy optional PNG chunks. Metadata is always removed on Mac (when using Cocoa reader).\n\nSee [man page](https://github.com/kornelski/pngquant/blob/master/pngquant.1) (`man pngquant`) for the full list of options.\n\n## License\n\npngquant is dual-licensed:\n\n* Under **GPL v3** or later with an additional [copyright notice](https://github.com/kornelski/pngquant/blob/master/COPYRIGHT) that must be kept for the older parts of the code.\n\n* Or [a **commercial license**](https://supso.org/projects/pngquant) for use in non-GPL software (e.g. closed-source or App Store distribution). You can [get the license via Super Source](https://supso.org/projects/pngquant). Email kornel@pngquant.org if you have any questions.\n"
        },
        {
          "name": "lib",
          "type": "commit",
          "content": null
        },
        {
          "name": "pngquant.1",
          "type": "blob",
          "size": 3.587890625,
          "content": ".Dd 2013-02-25\n.Dt pngquant 1\n.Sh NAME\n.Nm pngquant\n.Nd PNG converter and lossy image compressor\n.Sh SYNOPSIS\n.Nm\n.Aq options\n.Op ncolors\n.Pa file\n.Op Ar\n.Nm\n.Aq options\n.Op ncolors\n.Fl\n.Cm < Ns Pa file\n.Cm > Ns Pa file\n.Sh DESCRIPTION\n.Nm\nconverts 32-bit RGBA PNGs to 8-bit (or smaller) RGBA-palette PNGs, optionally using Floyd-Steinberg dithering.\nThe output filename is the same as the input name except that it ends in\n.Ql -fs8.png\nor\n.Ql -or8.png\n(unless the input is stdin, in which case the quantized image will go to stdout).\nThe default behavior if the output file exists is to skip the conversion; use\n.Fl Fl force\nto overwrite.\n.Sh OPTIONS\n.Bl -tag -width -indent\n.It Fl o Ar out.png , Fl Fl output Ar out.png\nWrites converted file to the given path. When this option is used only single input file is allowed.\n.It Fl Fl ext Ar new.png\nFile extension (suffix) to use for output files instead of the default\n.Ql -fs8.png\nor\n.Ql -or8.png .\n.It Fl f , Fl Fl force\nOverwrite existing output files.\n.Do\n.Fl Fl ext\n.Ar .png\n.Fl Fl force\n.Dc\ncan be used to convert files in place (which is unsafe).\n.It Fl Fl nofs , Fl Fl ordered\nDisable Floyd-Steinberg dithering.\n.It Fl Fl floyd Op Ar =N\nSet dithering level using fractional number between\n.Cm 0\n(none) and\n.Cm 1\n(full, the default).\n.It Fl s Ar N , Fl Fl speed Ar N\n.Cm 1\n(brute-force) to\n.Cm 11\n(fastest). The default is\n.Cm 3 .\nSpeed\n.Cm 10\nhas 5% lower quality, but is about 8 times faster than the default. Speed 11 disables dithering and lowers compression level.\n.It Fl Q Ar min-max , Fl Fl quality Ar min-max\n.Va min\nand\n.Va max\nare numbers in range\n.Cm 0\n(worst) to\n.Cm 100\n(perfect), similar to JPEG.\n.Nm\nwill use the least amount of colors required to meet or exceed the\n.Va max\nquality. If conversion results in quality below the\n.Va min\nquality the image won't be saved (or if outputting to stdin, 24-bit original will be output) and pngquant will exit with status code\n.Er 99 .\n.It Fl Fl skip-if-larger\nIf conversion results in a file larger than the original, the image won't be saved and pngquant will exit with status code\n.Er 98 .\nAdditionally, file size gain must be greater than the amount of quality lost. If quality drops by 50%, it will expect 50% file size reduction to consider it worthwhile.\n.It Fl Fl posterize Ar bits\nTruncate number of least significant bits of color (per channel). Use this when image will be output on low-depth displays (e.g. 16-bit RGB).\n.Nm\nwill make almost-opaque pixels fully opaque and will reduce amount of semi-transparent colors. When this option is enabled the default filename suffix is\n.Ql -ie-fs8.png\n/\n.Ql -ie-or8.png .\n.It Fl Fl strip\nRemove optional chunks (metadata) from PNG files.\n.It Fl Fl transbug\nWorkaround for readers that expect fully transparent color to be the last entry in the palette.\n.It Fl v , Fl Fl verbose\nEnable verbose messages showing progress and information about input/output. Opposite is\n.Fl Fl quiet .\nErrors are output to\n.Pa stderr\nregardless of this option.\n.It Fl V , Fl Fl version\nDisplay version on\n.Pa stdout\nand exit.\n.It Fl h , Fl Fl help\nDisplay help and exit.\n.El\n.Sh EXAMPLE\nCreating a new image with the number of colors reduced to 64:\n.Bd -ragged -offset indent\n.Nm\n.Cm 64 image.png\n.Ed\n.Pp\nThe resulting image will have 64 colors and will be saved as\n.Pa image-fs8.png .\n.Pp\nOverwriting image in-place if it can be reduced without too much quality loss:\n.Bd -ragged -offset indent\n.Nm\n.Cm -f --ext .png --quality 70-95 image.png\n.Ed\n.Sh AUTHOR\n.Nm\nis developed by Kornel Lesinski\n.Aq Mt kornel@pngquant.org\nbased on code by Greg Roelofs\n.Aq Mt newt@pobox.com .\n.Pp\n.Lk https://pngquant.org \"pngquant homepage\" .\n"
        },
        {
          "name": "pngquant.c",
          "type": "blob",
          "size": 26.3837890625,
          "content": "/* pngquant.c - quantize the colors in an alphamap down to a specified number\n**\n** © 2009-2019 by Kornel Lesiński.\n** © 1989, 1991 by Jef Poskanzer.\n** © 1997-2002 by Greg Roelofs; based on an idea by Stefan Schneider.\n**\n** See COPYRIGHT file for license.\n*/\n\nchar *PNGQUANT_USAGE = \"\\\nusage:  pngquant [options] [ncolors] -- pngfile [pngfile ...]\\n\\\n        pngquant [options] [ncolors] - >stdout <stdin\\n\\n\\\noptions:\\n\\\n  --force           overwrite existing output files (synonym: -f)\\n\\\n  --skip-if-larger  only save converted files if they're smaller than original\\n\\\n  --output file     destination file path to use instead of --ext (synonym: -o)\\n\\\n  --ext new.png     set custom suffix/extension for output filenames\\n\\\n  --quality min-max don't save below min, use fewer colors below max (0-100)\\n\\\n  --speed N         speed/quality trade-off. 1=slow, 4=default, 11=fast & rough\\n\\\n  --nofs            disable Floyd-Steinberg dithering\\n\\\n  --posterize N     output lower-precision color (e.g. for ARGB4444 output)\\n\\\n  --strip           remove optional metadata (default on Mac)\\n\\\n  --verbose         print status messages (synonym: -v)\\n\\\n\\n\\\nQuantizes one or more 32-bit RGBA PNGs to 8-bit (or smaller) RGBA-palette.\\n\\\nThe output filename is the same as the input name except that\\n\\\nit ends in \\\"-fs8.png\\\", \\\"-or8.png\\\" or your custom extension (unless the\\n\\\ninput is stdin, in which case the quantized image will go to stdout).\\n\\\nIf you pass the special output path \\\"-\\\" and a single input file, that file\\n\\\nwill be processed and the quantized image will go to stdout.\\n\\\nThe default behavior if the output file exists is to skip the conversion;\\n\\\nuse --force to overwrite. See man page for full list of options.\\n\";\n\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <math.h>\n\n#if defined(_WIN32) || defined(WIN32) || defined(__WIN32__)\n#include <fcntl.h>    /* O_BINARY */\n#include <io.h>   /* setmode() */\n#include <locale.h> /* UTF-8 locale */\n#else\n#include <unistd.h>\n#endif\n\n#ifdef _OPENMP\n#include <omp.h>\n#else\n#define omp_get_max_threads() 1\n#define omp_get_thread_num() 0\n#endif\n\n#include \"rwpng.h\"  /* typedefs, common macros, public prototypes */\n#include \"libimagequant.h\" /* if it fails here, run: git submodule update or add -Ilib to compiler flags */\n#include \"pngquant_opts.h\"\n\nchar *PNGQUANT_VERSION = LIQ_VERSION_STRING \" (January 2022)\";\n\nstatic pngquant_error prepare_output_image(liq_result *result, liq_image *input_image, rwpng_color_transform tag, png8_image *output_image);\nstatic void set_palette(liq_result *result, png8_image *output_image);\nstatic pngquant_error read_image(liq_attr *options, const char *filename, int using_stdin, png24_image *input_image_p, liq_image **liq_image_p, bool keep_input_pixels, bool strip, bool verbose);\nstatic pngquant_error write_image(png8_image *output_image, png24_image *output_image24, const char *outname, struct pngquant_options *options, liq_attr *liq);\nstatic char *add_filename_extension(const char *filename, const char *newext);\nstatic bool file_exists(const char *outname);\n\nstatic void verbose_printf(liq_attr *liq, struct pngquant_options *context, const char *fmt, ...)\n{\n    if (context->log_callback) {\n        va_list va;\n        va_start(va, fmt);\n        int required_space = vsnprintf(NULL, 0, fmt, va)+1; // +\\0\n        va_end(va);\n\n#if defined(_MSC_VER)\n        char *buf = malloc(required_space);\n#else\n        char buf[required_space];\n#endif\n        va_start(va, fmt);\n        vsnprintf(buf, required_space, fmt, va);\n        va_end(va);\n\n        context->log_callback(liq, buf, context->log_callback_user_info);\n#if defined(_MSC_VER)\n        free(buf);\n#endif\n    }\n}\n\nstatic void log_callback(const liq_attr *attr, const char *msg, void* user_info)\n{\n    fprintf(stderr, \"%s\\n\", msg);\n}\n\n#ifdef _OPENMP\n#define LOG_BUFFER_SIZE 1300\nstruct buffered_log {\n    int buf_used;\n    char buf[LOG_BUFFER_SIZE];\n};\n\nstatic void log_callback_buferred_flush(const liq_attr *attr, void *context)\n{\n    struct buffered_log *log = context;\n    if (log->buf_used) {\n        fwrite(log->buf, 1, log->buf_used, stderr);\n        fflush(stderr);\n        log->buf_used = 0;\n    }\n}\n\nstatic void log_callback_buferred(const liq_attr *attr, const char *msg, void* context)\n{\n    struct buffered_log *log = context;\n    int len = strlen(msg);\n    if (len > LOG_BUFFER_SIZE-2) len = LOG_BUFFER_SIZE-2;\n\n    if (len > LOG_BUFFER_SIZE - log->buf_used - 2) log_callback_buferred_flush(attr, log);\n    memcpy(&log->buf[log->buf_used], msg, len);\n    log->buf_used += len+1;\n    log->buf[log->buf_used-1] = '\\n';\n    log->buf[log->buf_used] = '\\0';\n}\n#endif\n\nvoid pngquant_internal_print_config(FILE *fd) {\n    fputs(\"\"\n        #ifndef NDEBUG\n                    \"   WARNING: this is a DEBUG (slow) version.\\n\" /* NDEBUG disables assert() */\n        #endif\n        #if !USE_SSE && (defined(__SSE__) || defined(__amd64__) || defined(__X86_64__) || defined(__i386__))\n                    \"   SSE acceleration disabled.\\n\"\n        #endif\n        #if _OPENMP\n                    \"   Compiled with OpenMP (multicore support).\\n\"\n        #endif\n    , fd);\n    fflush(fd);\n}\n\nFILE *pngquant_c_stderr() {\n    return stderr;\n}\nFILE *pngquant_c_stdout() {\n    return stdout;\n}\n\nstatic void print_full_version(FILE *fd)\n{\n    fprintf(fd, \"pngquant, %s, by Kornel Lesinski, Greg Roelofs.\\n\", PNGQUANT_VERSION);\n    pngquant_internal_print_config(fd);\n    rwpng_version_info(fd);\n    fputs(\"\\n\", fd);\n}\n\nstatic void print_usage(FILE *fd)\n{\n    fputs(PNGQUANT_USAGE, fd);\n}\n\n/**\n *   N = automatic quality, uses limit unless force is set (N-N or 0-N)\n *  -N = no better than N (same as 0-N)\n * N-M = no worse than N, no better than M\n * N-  = no worse than N, perfect if possible (same as N-100)\n *\n * where N,M are numbers between 0 (lousy) and 100 (perfect)\n */\nstatic bool parse_quality(const char *quality, liq_attr *options, bool *min_quality_limit)\n{\n    long limit, target;\n    const char *str = quality; char *end;\n\n    long t1 = strtol(str, &end, 10);\n    if (str == end) return false;\n    str = end;\n\n    if ('\\0' == end[0] && t1 < 0) { // quality=\"-%d\"\n        target = -t1;\n        limit = 0;\n    } else if ('\\0' == end[0]) { // quality=\"%d\"\n        target = t1;\n        limit = t1*9/10;\n    } else if ('-' == end[0] && '\\0' == end[1]) { // quality=\"%d-\"\n        target = 100;\n        limit = t1;\n    } else { // quality=\"%d-%d\"\n        long t2 = strtol(str, &end, 10);\n        if (str == end || t2 > 0) return false;\n        target = -t2;\n        limit = t1;\n    }\n\n    *min_quality_limit = (limit > 0);\n    return LIQ_OK == liq_set_quality(options, limit, target);\n}\n\npngquant_error pngquant_main_internal(struct pngquant_options *options, liq_attr *liq);\nstatic pngquant_error pngquant_file_internal(const char *filename, const char *outname, struct pngquant_options *options, liq_attr *liq);\n\n#ifndef PNGQUANT_NO_MAIN\nint main(int argc, char *argv[])\n{\n    struct pngquant_options options = {\n        .floyd = 1.f, // floyd-steinberg dithering\n        .strip = false,\n    };\n\n    pngquant_error retval = pngquant_parse_options(argc, argv, &options);\n    if (retval != SUCCESS) {\n        return retval;\n    }\n\n    if (options.print_version) {\n        puts(PNGQUANT_VERSION);\n        return SUCCESS;\n    }\n\n    if (options.missing_arguments) {\n        print_full_version(stderr);\n        print_usage(stderr);\n        return MISSING_ARGUMENT;\n    }\n\n    if (options.print_help) {\n        print_full_version(stdout);\n        print_usage(stdout);\n        return SUCCESS;\n    }\n\n#if defined(_WIN32) || defined(WIN32) || defined(__WIN32__)\n    setlocale(LC_ALL, \".65001\"); // issue #376; set UTF-8 for Unicode filenames\n#endif\n\n    liq_attr *liq = liq_attr_create();\n\n    if (!liq) {\n        fputs(\"SSE-capable CPU is required for this build.\\n\", stderr);\n        return WRONG_ARCHITECTURE;\n    }\n\n    if (options.quality && !parse_quality(options.quality, liq, &options.min_quality_limit)) {\n        fputs(\"Quality should be in format min-max where min and max are numbers in range 0-100.\\n\", stderr);\n        return INVALID_ARGUMENT;\n    }\n\n    if (options.iebug) {\n        // opacities above 238 will be rounded up to 255, because IE6 truncates <255 to 0.\n        liq_set_min_opacity(liq, 238);\n        fputs(\"  warning: the workaround for IE6 is deprecated\\n\", stderr);\n    }\n\n    if (options.verbose) {\n        liq_set_log_callback(liq, log_callback, NULL);\n        options.log_callback = log_callback;\n    }\n\n    if (options.last_index_transparent) {\n        liq_set_last_index_transparent(liq, true);\n    }\n\n    if (options.speed >= 10) {\n        options.fast_compression = true;\n        if (options.speed == 11) {\n            options.floyd = 0;\n            options.speed = 10;\n        }\n    }\n\n    if (options.speed && LIQ_OK != liq_set_speed(liq, options.speed)) {\n        fputs(\"Speed should be between 1 (slow) and 11 (fast).\\n\", stderr);\n        return INVALID_ARGUMENT;\n    }\n\n    if (options.colors && LIQ_OK != liq_set_max_colors(liq, options.colors)) {\n        fputs(\"Number of colors must be between 2 and 256.\\n\", stderr);\n        return INVALID_ARGUMENT;\n    }\n\n    if (options.posterize && LIQ_OK != liq_set_min_posterization(liq, options.posterize)) {\n        fputs(\"Posterization should be number of bits in range 0-4.\\n\", stderr);\n        return INVALID_ARGUMENT;\n    }\n\n    if (options.extension && options.output_file_path) {\n        fputs(\"--ext and --output options can't be used at the same time\\n\", stderr);\n        return INVALID_ARGUMENT;\n    }\n\n    // new filename extension depends on options used. Typically basename-fs8.png\n    if (options.extension == NULL) {\n        options.extension = options.floyd > 0 ? \"-fs8.png\" : \"-or8.png\";\n    }\n\n    if (options.output_file_path && options.num_files != 1) {\n        fputs(\"  error: Only one input file is allowed when --output is used. This error also happens when filenames with spaces are not in quotes.\\n\", stderr);\n        return INVALID_ARGUMENT;\n    }\n\n    if (options.using_stdout && !options.using_stdin && options.num_files != 1) {\n        fputs(\"  error: Only one input file is allowed when using the special output path \\\"-\\\" to write to stdout. This error also happens when filenames with spaces are not in quotes.\\n\", stderr);\n        return INVALID_ARGUMENT;\n    }\n\n    if (!options.num_files && !options.using_stdin) {\n        fputs(\"No input files specified.\\n\", stderr);\n        if (options.verbose) {\n            print_full_version(stderr);\n        }\n        print_usage(stderr);\n        return MISSING_ARGUMENT;\n    }\n\n    retval = pngquant_main_internal(&options, liq);\n    liq_attr_destroy(liq);\n    return retval;\n}\n#endif\n\n// Don't use this. This is not a public API.\npngquant_error pngquant_main_internal(struct pngquant_options *options, liq_attr *liq)\n{\n#if defined(_WIN32) || defined(WIN32) || defined(__WIN32__)\n    setlocale(LC_ALL, \".65001\"); // issue #376; set UTF-8 for Unicode filenames\n#endif\n\n    if (options->map_file) {\n        png24_image tmp = {.width=0};\n        if (SUCCESS != read_image(liq, options->map_file, false, &tmp, &options->fixed_palette_image, true, true, false)) {\n            fprintf(stderr, \"  error: unable to load %s\", options->map_file);\n            return INVALID_ARGUMENT;\n        }\n        liq_result *tmp_quantize = liq_quantize_image(liq, options->fixed_palette_image);\n        const liq_palette *pal = liq_get_palette(tmp_quantize);\n        if (!pal) {\n            fprintf(stderr, \"  error: unable to read colors from %s\", options->map_file);\n            return INVALID_ARGUMENT;\n        }\n        for(unsigned int i=0; i < pal->count; i++) {\n            liq_image_add_fixed_color(options->fixed_palette_image, pal->entries[i]);\n        }\n        liq_result_destroy(tmp_quantize);\n    }\n\n#ifdef _OPENMP\n    // if there's a lot of files, coarse parallelism can be used\n    if (options->num_files > 2*omp_get_max_threads()) {\n        omp_set_nested(0);\n        omp_set_dynamic(1);\n    } else {\n        omp_set_nested(1);\n    }\n#endif\n\n    unsigned int error_count=0, skipped_count=0, file_count=0;\n    pngquant_error latest_error=SUCCESS;\n\n    #pragma omp parallel for \\\n        schedule(static, 1) reduction(+:skipped_count) reduction(+:error_count) reduction(+:file_count) shared(latest_error)\n    for(int i=0; i < options->num_files; i++) {\n        const char *filename = options->using_stdin ? \"stdin\" : options->files[i];\n        struct pngquant_options opts = *options;\n        liq_attr *local_liq = liq_attr_copy(liq);\n\n\n        #ifdef _OPENMP\n        struct buffered_log buf = {0};\n        if (opts.log_callback && omp_get_num_threads() > 1 && opts.num_files > 1) {\n            liq_set_log_callback(local_liq, log_callback_buferred, &buf);\n            liq_set_log_flush_callback(local_liq, log_callback_buferred_flush, &buf);\n            opts.log_callback = log_callback_buferred;\n            opts.log_callback_user_info = &buf;\n        }\n        #endif\n\n\n        pngquant_error retval = SUCCESS;\n\n        const char *outname = opts.output_file_path;\n        char *outname_free = NULL;\n        if (!opts.using_stdout) {\n            if (!outname) {\n                outname = outname_free = add_filename_extension(filename, opts.extension);\n            }\n            if (!opts.force && file_exists(outname)) {\n                fprintf(stderr, \"  error: '%s' exists; not overwriting\\n\", outname);\n                retval = NOT_OVERWRITING_ERROR;\n            }\n        }\n\n        if (SUCCESS == retval) {\n            retval = pngquant_file_internal(filename, outname, &opts, local_liq);\n        }\n\n        free(outname_free);\n\n        liq_attr_destroy(local_liq);\n\n        if (retval) {\n            #pragma omp critical\n            {\n                latest_error = retval;\n            }\n            if (retval == TOO_LOW_QUALITY || retval == TOO_LARGE_FILE) {\n                skipped_count++;\n            } else {\n                error_count++;\n            }\n        }\n        ++file_count;\n    }\n\n    if (error_count) {\n        verbose_printf(liq, options, \"There were errors quantizing %d file%s out of a total of %d file%s.\",\n                       error_count, (error_count == 1)? \"\" : \"s\", file_count, (file_count == 1)? \"\" : \"s\");\n    }\n    if (skipped_count) {\n        verbose_printf(liq, options, \"Skipped %d file%s out of a total of %d file%s.\",\n                       skipped_count, (skipped_count == 1)? \"\" : \"s\", file_count, (file_count == 1)? \"\" : \"s\");\n    }\n    if (!skipped_count && !error_count) {\n        verbose_printf(liq, options, \"Quantized %d image%s.\",\n                       file_count, (file_count == 1)? \"\" : \"s\");\n    }\n\n    if (options->fixed_palette_image) liq_image_destroy(options->fixed_palette_image);\n\n    return latest_error;\n}\n\n/// Don't hack this. Instead use https://github.com/ImageOptim/libimagequant/blob/f54d2f1a3e1cf728e17326f4db0d45811c63f063/example.c\nstatic pngquant_error pngquant_file_internal(const char *filename, const char *outname, struct pngquant_options *options, liq_attr *liq)\n{\n    pngquant_error retval = SUCCESS;\n\n    verbose_printf(liq, options, \"%s:\", filename);\n\n    liq_image *input_image = NULL;\n    png24_image input_image_rwpng = {.width=0};\n    bool keep_input_pixels = options->skip_if_larger || (options->using_stdout && options->min_quality_limit); // original may need to be output to stdout\n    if (SUCCESS == retval) {\n        retval = read_image(liq, filename, options->using_stdin, &input_image_rwpng, &input_image, keep_input_pixels, options->strip, options->verbose);\n    }\n\n    int quality_percent = 90; // quality on 0-100 scale, updated upon successful remap\n    png8_image output_image = {.width=0};\n    if (SUCCESS == retval) {\n        verbose_printf(liq, options, \"  read %luKB file\", (input_image_rwpng.file_size+1023UL)/1024UL);\n\n        if (RWPNG_ICCP == input_image_rwpng.input_color) {\n            verbose_printf(liq, options, \"  used embedded ICC profile to transform image to sRGB colorspace\");\n        } else if (RWPNG_GAMA_CHRM == input_image_rwpng.input_color) {\n            verbose_printf(liq, options, \"  used gAMA and cHRM chunks to transform image to sRGB colorspace\");\n        } else if (RWPNG_ICCP_WARN_GRAY == input_image_rwpng.input_color) {\n            verbose_printf(liq, options, \"  warning: ignored ICC profile in GRAY colorspace\");\n        } else if (RWPNG_COCOA == input_image_rwpng.input_color) {\n            // No comment\n        } else if (RWPNG_SRGB == input_image_rwpng.input_color) {\n            verbose_printf(liq, options, \"  passing sRGB tag from the input\");\n        } else if (input_image_rwpng.gamma != 0.45455) {\n            verbose_printf(liq, options, \"  converted image from gamma %2.1f to gamma 2.2\",\n                           1.0/input_image_rwpng.gamma);\n        }\n\n        // when using image as source of a fixed palette the palette is extracted using regular quantization\n        liq_result *remap;\n        liq_error remap_error = liq_image_quantize(options->fixed_palette_image ? options->fixed_palette_image : input_image, liq, &remap);\n\n        if (LIQ_OK == remap_error) {\n\n            // fixed gamma ~2.2 for the web. PNG can't store exact 1/2.2\n            // NB: can't change gamma here, because output_color is allowed to be an sRGB tag\n            liq_set_output_gamma(remap, 0.45455);\n            liq_set_dithering_level(remap, options->floyd);\n\n            retval = prepare_output_image(remap, input_image, input_image_rwpng.output_color, &output_image);\n            if (SUCCESS == retval) {\n                if (LIQ_OK != liq_write_remapped_image_rows(remap, input_image, output_image.row_pointers)) {\n                    retval = OUT_OF_MEMORY_ERROR;\n                }\n\n                set_palette(remap, &output_image);\n\n                double palette_error = liq_get_quantization_error(remap);\n                if (palette_error >= 0) {\n                    quality_percent = liq_get_quantization_quality(remap);\n                    verbose_printf(liq, options, \"  mapped image to new colors...MSE=%.3f (Q=%d)\", palette_error, quality_percent);\n                }\n            }\n            liq_result_destroy(remap);\n        } else if (LIQ_QUALITY_TOO_LOW == remap_error) {\n            retval = TOO_LOW_QUALITY;\n        } else {\n            retval = INVALID_ARGUMENT; // dunno\n        }\n    }\n\n    if (SUCCESS == retval) {\n\n        if (options->skip_if_larger) {\n            // this is very rough approximation, but generally avoid losing more quality than is gained in file size.\n            // Quality is raised to 1.5, because even greater savings are needed to justify big quality loss.\n            // but >50% savings are considered always worthwhile in order to allow low quality conversions to work at all\n            const double quality = quality_percent/100.0;\n            const double expected_reduced_size = pow(quality, 1.5);\n            output_image.maximum_file_size = (input_image_rwpng.file_size-1) * (expected_reduced_size < 0.5 ? 0.5 : expected_reduced_size);\n        }\n\n        output_image.fast_compression = options->fast_compression;\n        output_image.chunks = input_image_rwpng.chunks; input_image_rwpng.chunks = NULL;\n        retval = write_image(&output_image, NULL, outname, options, liq);\n\n        if (TOO_LARGE_FILE == retval) {\n            verbose_printf(liq, options, \"  file exceeded expected size of %luKB\", (unsigned long)output_image.maximum_file_size/1024UL);\n        }\n        if (SUCCESS == retval && output_image.metadata_size > 0) {\n            verbose_printf(liq, options, \"  copied %dKB of additional PNG metadata\", (int)(output_image.metadata_size+999)/1000);\n        }\n    }\n\n    if (options->using_stdout && keep_input_pixels && (TOO_LARGE_FILE == retval || TOO_LOW_QUALITY == retval)) {\n        // when outputting to stdout it'd be nasty to create 0-byte file\n        // so if quality is too low, output 24-bit original\n        pngquant_error write_retval = write_image(NULL, &input_image_rwpng, outname, options, liq);\n        if (write_retval) {\n            retval = write_retval;\n        }\n    }\n\n    if (input_image) liq_image_destroy(input_image);\n    rwpng_free_image24(&input_image_rwpng);\n    rwpng_free_image8(&output_image);\n\n    return retval;\n}\n\nstatic void set_palette(liq_result *result, png8_image *output_image)\n{\n    const liq_palette *palette = liq_get_palette(result);\n\n    output_image->num_palette = palette->count;\n    for(unsigned int i=0; i < palette->count; i++) {\n        const liq_color px = palette->entries[i];\n        output_image->palette[i] = (rwpng_rgba){.r=px.r, .g=px.g, .b=px.b, .a=px.a};\n    }\n}\n\n\nstatic bool file_exists(const char *outname)\n{\n    FILE *outfile = fopen(outname, \"rb\");\n    if ((outfile ) != NULL) {\n        fclose(outfile);\n        return true;\n    }\n    return false;\n}\n\n/* build the output filename from the input name by inserting \"-fs8\" or\n * \"-or8\" before the \".png\" extension (or by appending that plus \".png\" if\n * there isn't any extension), then make sure it doesn't exist already */\nstatic char *add_filename_extension(const char *filename, const char *newext)\n{\n    size_t x = strlen(filename);\n\n    char* outname = malloc(x+4+strlen(newext)+1);\n    if (!outname) return NULL;\n\n    strcpy(outname, filename);\n    if (x > 4 && (strncmp(outname+x-4, \".png\", 4) == 0 || strncmp(outname+x-4, \".PNG\", 4) == 0)) {\n        strcpy(outname+x-4, newext);\n    } else {\n        strcpy(outname+x, newext);\n    }\n\n    return outname;\n}\n\nstatic char *temp_filename(const char *basename) {\n    size_t x = strlen(basename);\n\n    char *outname = malloc(x+1+4);\n    if (!outname) return NULL;\n\n    strcpy(outname, basename);\n    strcpy(outname+x, \".tmp\");\n\n    return outname;\n}\n\nstatic void set_binary_mode(FILE *fp)\n{\n#if defined(_WIN32) || defined(WIN32) || defined(__WIN32__)\n    setmode(fp == stdout ? 1 : 0, O_BINARY);\n#endif\n}\n\nstatic const char *filename_part(const char *path)\n{\n    const char *outfilename = strrchr(path, '/');\n    if (outfilename) {\n        return outfilename+1;\n    } else {\n        return path;\n    }\n}\n\nstatic bool replace_file(const char *from, const char *to, const bool force) {\n#if defined(_WIN32) || defined(WIN32) || defined(__WIN32__)\n    if (force) {\n        // On Windows rename doesn't replace\n        unlink(to);\n    }\n#endif\n    return (0 == rename(from, to));\n}\n\nstatic pngquant_error write_image(png8_image *output_image, png24_image *output_image24, const char *outname, struct pngquant_options *options, liq_attr *liq)\n{\n    FILE *outfile;\n    char *tempname = NULL;\n\n    if (options->using_stdout) {\n        set_binary_mode(stdout);\n        outfile = stdout;\n\n        if (output_image) {\n            verbose_printf(liq, options, \"  writing %d-color image to stdout\", output_image->num_palette);\n        } else {\n            verbose_printf(liq, options, \"  writing truecolor image to stdout\");\n        }\n    } else {\n        tempname = temp_filename(outname);\n        if (!tempname) return OUT_OF_MEMORY_ERROR;\n\n        if ((outfile = fopen(tempname, \"wb\")) == NULL) {\n            fprintf(stderr, \"  error: cannot open '%s' for writing\\n\", tempname);\n            free(tempname);\n            return CANT_WRITE_ERROR;\n        }\n\n        if (output_image) {\n            verbose_printf(liq, options, \"  writing %d-color image as %s\", output_image->num_palette, filename_part(outname));\n        } else {\n            verbose_printf(liq, options, \"  writing truecolor image as %s\", filename_part(outname));\n        }\n    }\n\n    pngquant_error retval;\n    #pragma omp critical (libpng)\n    {\n        if (output_image) {\n            retval = rwpng_write_image8(outfile, output_image);\n        } else {\n            retval = rwpng_write_image24(outfile, output_image24);\n        }\n    }\n\n    if (!options->using_stdout) {\n        fclose(outfile);\n\n        if (SUCCESS == retval) {\n            // Image has been written to a temporary file and then moved over destination.\n            // This makes replacement atomic and avoids damaging destination file on write error.\n            if (!replace_file(tempname, outname, options->force)) {\n                retval = CANT_WRITE_ERROR;\n            }\n        }\n\n        if (retval) {\n            unlink(tempname);\n        }\n    }\n    free(tempname);\n\n    if (retval && retval != TOO_LARGE_FILE) {\n        fprintf(stderr, \"  error: failed writing image to %s (%d)\\n\", options->using_stdout ? \"stdout\" : outname, retval);\n    }\n\n    return retval;\n}\n\nstatic pngquant_error read_image(liq_attr *options, const char *filename, int using_stdin, png24_image *input_image_p, liq_image **liq_image_p, bool keep_input_pixels, bool strip, bool verbose)\n{\n    FILE *infile;\n\n    if (using_stdin) {\n        set_binary_mode(stdin);\n        infile = stdin;\n    } else if ((infile = fopen(filename, \"rb\")) == NULL) {\n        fprintf(stderr, \"  error: cannot open %s for reading\\n\", filename);\n        return READ_ERROR;\n    }\n\n    pngquant_error retval;\n    #pragma omp critical (libpng)\n    {\n        retval = rwpng_read_image24(infile, input_image_p, strip, verbose);\n    }\n\n    if (!using_stdin) {\n        fclose(infile);\n    }\n\n    if (retval) {\n        fprintf(stderr, \"  error: cannot decode image %s\\n\", using_stdin ? \"from stdin\" : filename_part(filename));\n        return retval;\n    }\n\n    *liq_image_p = liq_image_create_rgba_rows(options, (void**)input_image_p->row_pointers, input_image_p->width, input_image_p->height, input_image_p->gamma);\n\n    if (!*liq_image_p) {\n        return OUT_OF_MEMORY_ERROR;\n    }\n\n    if (!keep_input_pixels) {\n        if (LIQ_OK != liq_image_set_memory_ownership(*liq_image_p, LIQ_OWN_ROWS | LIQ_OWN_PIXELS)) {\n            return OUT_OF_MEMORY_ERROR;\n        }\n        input_image_p->row_pointers = NULL;\n        input_image_p->rgba_data = NULL;\n    }\n\n    return SUCCESS;\n}\n\nstatic pngquant_error prepare_output_image(liq_result *result, liq_image *input_image, rwpng_color_transform output_color, png8_image *output_image)\n{\n    output_image->width = liq_image_get_width(input_image);\n    output_image->height = liq_image_get_height(input_image);\n    output_image->gamma = liq_get_output_gamma(result);\n    output_image->output_color = output_color;\n\n    /*\n    ** Step 3.7 [GRR]: allocate memory for the entire indexed image\n    */\n\n    output_image->indexed_data = malloc((size_t)output_image->height * (size_t)output_image->width);\n    output_image->row_pointers = malloc((size_t)output_image->height * sizeof(output_image->row_pointers[0]));\n\n    if (!output_image->indexed_data || !output_image->row_pointers) {\n        return OUT_OF_MEMORY_ERROR;\n    }\n\n    for(size_t row = 0; row < output_image->height; row++) {\n        output_image->row_pointers[row] = output_image->indexed_data + row * output_image->width;\n    }\n\n    const liq_palette *palette = liq_get_palette(result);\n    // tRNS, etc.\n    output_image->num_palette = palette->count;\n\n    return SUCCESS;\n}\n"
        },
        {
          "name": "pngquant.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "pngquant_opts.c",
          "type": "blob",
          "size": 5.67578125,
          "content": "/*\n** © 2017 by Kornel Lesiński.\n**\n** See COPYRIGHT file for license.\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <getopt.h>\n\n#include \"rwpng.h\"\n#include \"libimagequant.h\" /* if you get compile error, add -Ilib to compiler flags */\n#include \"pngquant_opts.h\"\n\nextern char *optarg;\nextern int optind, opterr;\n\nstatic const struct {const char *old; const char *newopt;} obsolete_options[] = {\n    {\"-fs\",\"--floyd=1\"},\n    {\"-nofs\", \"--ordered\"},\n    {\"-floyd\", \"--floyd=1\"},\n    {\"-nofloyd\", \"--ordered\"},\n    {\"-ordered\", \"--ordered\"},\n    {\"-force\", \"--force\"},\n    {\"-noforce\", \"--no-force\"},\n    {\"-verbose\", \"--verbose\"},\n    {\"-quiet\", \"--quiet\"},\n    {\"-noverbose\", \"--quiet\"},\n    {\"-noquiet\", \"--verbose\"},\n    {\"-help\", \"--help\"},\n    {\"-version\", \"--version\"},\n    {\"-ext\", \"--ext\"},\n    {\"-speed\", \"--speed\"},\n};\n\nstatic void fix_obsolete_options(const unsigned int argc, char *argv[])\n{\n    for(unsigned int argn=1; argn < argc; argn++) {\n        if ('-' != argv[argn][0]) continue;\n\n        if ('-' == argv[argn][1]) break; // stop on first --option or --\n\n        for(unsigned int i=0; i < sizeof(obsolete_options)/sizeof(obsolete_options[0]); i++) {\n            if (0 == strcmp(obsolete_options[i].old, argv[argn])) {\n                fprintf(stderr, \"  warning: option '%s' has been replaced with '%s'.\\n\", obsolete_options[i].old, obsolete_options[i].newopt);\n                argv[argn] = (char*)obsolete_options[i].newopt;\n            }\n        }\n    }\n}\n\nenum {arg_floyd=1, arg_ordered, arg_ext, arg_no_force, arg_iebug,\n    arg_transbug, arg_map, arg_posterize, arg_skip_larger, arg_strip};\n\nstatic const struct option long_options[] = {\n    {\"verbose\", no_argument, NULL, 'v'},\n    {\"quiet\", no_argument, NULL, 'q'},\n    {\"force\", no_argument, NULL, 'f'},\n    {\"no-force\", no_argument, NULL, arg_no_force},\n    {\"floyd\", optional_argument, NULL, arg_floyd},\n    {\"ordered\", no_argument, NULL, arg_ordered},\n    {\"nofs\", no_argument, NULL, arg_ordered},\n    {\"iebug\", no_argument, NULL, arg_iebug},\n    {\"transbug\", no_argument, NULL, arg_transbug},\n    {\"ext\", required_argument, NULL, arg_ext},\n    {\"skip-if-larger\", no_argument, NULL, arg_skip_larger},\n    {\"output\", required_argument, NULL, 'o'},\n    {\"speed\", required_argument, NULL, 's'},\n    {\"quality\", required_argument, NULL, 'Q'},\n    {\"posterize\", required_argument, NULL, arg_posterize},\n    {\"strip\", no_argument, NULL, arg_strip},\n    {\"map\", required_argument, NULL, arg_map},\n    {\"version\", no_argument, NULL, 'V'},\n    {\"help\", no_argument, NULL, 'h'},\n    {NULL, 0, NULL, 0},\n};\n\npngquant_error pngquant_parse_options(int argc, char *argv[], struct pngquant_options *options)\n{\n    fix_obsolete_options(argc, argv);\n\n    int opt;\n    do {\n        opt = getopt_long(argc, argv, \"Vvqfhs:Q:o:\", long_options, NULL);\n        switch (opt) {\n            case 'v':\n                options->verbose = true;\n                break;\n            case 'q':\n                options->verbose = false;\n                break;\n\n            case arg_floyd:\n                options->floyd = optarg ? atof(optarg) : 1.f;\n                if (options->floyd < 0 || options->floyd > 1.f) {\n                    fputs(\"--floyd argument must be in 0..1 range\\n\", stderr);\n                    return INVALID_ARGUMENT;\n                }\n                break;\n            case arg_ordered: options->floyd = 0; break;\n\n            case 'f': options->force = true; break;\n            case arg_no_force: options->force = false; break;\n\n            case arg_ext: options->extension = optarg; break;\n            case 'o':\n                if (options->output_file_path) {\n                    fputs(\"--output option can be used only once\\n\", stderr);\n                    return INVALID_ARGUMENT;\n                }\n                if (strcmp(optarg, \"-\") == 0) {\n                    options->using_stdout = true;\n                    break;\n                }\n                options->output_file_path = optarg; break;\n\n            case arg_iebug:\n                options->iebug = true;\n                break;\n\n            case arg_transbug:\n                options->last_index_transparent = true;\n                break;\n\n            case arg_skip_larger:\n                options->skip_if_larger = true;\n                break;\n\n            case 's':\n                options->speed = optarg[0] == '0' ? -1 : atoi(optarg);\n                break;\n\n            case 'Q':\n                options->quality = optarg;\n                break;\n\n            case arg_posterize:\n                options->posterize = atoi(optarg);\n                break;\n\n            case arg_strip:\n                options->strip = true;\n                break;\n\n            case arg_map:\n                options->map_file = optarg;\n                break;\n\n            case 'h':\n                options->print_help = true;\n                break;\n\n            case 'V':\n                options->print_version = true;\n                break;\n\n            case -1: break;\n\n            default:\n                return INVALID_ARGUMENT;\n        }\n    } while (opt != -1);\n\n    int argn = optind;\n\n    if (argn < argc) {\n        char *colors_end;\n        unsigned long colors = strtoul(argv[argn], &colors_end, 10);\n        if (colors_end != argv[argn] && '\\0' == colors_end[0]) {\n            options->colors = colors;\n            argn++;\n        }\n\n        if (argn == argc || (argn == argc-1 && 0==strcmp(argv[argn],\"-\"))) {\n            options->using_stdin = true;\n            options->using_stdout = !options->output_file_path;\n            argn = argc-1;\n        }\n\n        options->num_files = argc-argn;\n        options->files = argv+argn;\n    } else if (argn <= 1) {\n        options->missing_arguments = true;\n    }\n\n    return SUCCESS;\n}\n"
        },
        {
          "name": "pngquant_opts.h",
          "type": "blob",
          "size": 0.7587890625,
          "content": "#ifndef PNGQUANT_OPTS_H\n#define PNGQUANT_OPTS_H\n\nstruct pngquant_options {\n    liq_image *fixed_palette_image;\n    liq_log_callback_function *log_callback;\n    void *log_callback_user_info;\n    const char *quality;\n    const char *extension;\n    const char *output_file_path;\n    const char *map_file;\n    char *const *files;\n    unsigned int num_files;\n    unsigned int colors;\n    unsigned int speed;\n    unsigned int posterize;\n    float floyd;\n    bool using_stdin, using_stdout, force, fast_compression,\n        min_quality_limit, skip_if_larger,\n        strip, iebug, last_index_transparent,\n        print_help, print_version, missing_arguments,\n        verbose;\n};\n\npngquant_error pngquant_parse_options(int argc, char *argv[], struct pngquant_options *options);\n#endif\n"
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "rwpng.c",
          "type": "blob",
          "size": 21.2587890625,
          "content": "/*\n** PNG read/write functions\n**\n** © 1998-2000 by Greg Roelofs.\n** © 2009-2017 by Kornel Lesiński.\n**\n** See COPYRIGHT file for license.\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#include \"png.h\"  /* if this include fails, you need to install libpng (e.g. libpng-devel package) */\n#include \"rwpng.h\"\n#if USE_LCMS\n#include \"lcms2.h\"\n#endif\n\n#ifndef Z_BEST_COMPRESSION\n#define Z_BEST_COMPRESSION 9\n#endif\n#ifndef Z_BEST_SPEED\n#define Z_BEST_SPEED 1\n#endif\n\n#ifdef _OPENMP\n#include <omp.h>\n#else\n#define omp_get_max_threads() 1\n#endif\n\n#if PNG_LIBPNG_VER < 10400\n#error libpng version 1.4 or later is required. 1.6 is recommended. You have an obsolete version of libpng or compiling on an outdated/unsupported operating system. Please upgrade.\n#endif\n\n#if PNG_LIBPNG_VER < 10500\ntypedef png_const_charp png_const_bytep;\n#endif\n\nstatic void rwpng_error_handler(png_structp png_ptr, png_const_charp msg);\npngquant_error rwpng_read_image32_cocoa(FILE *infile, uint32_t *width, uint32_t *height, size_t *file_size, rwpng_rgba **image_data);\n\n\nvoid rwpng_version_info(FILE *fp)\n{\n    const char *pngver = png_get_header_ver(NULL);\n\n#if USE_COCOA\n    fprintf(fp, \"   Color profiles are supported via Cocoa. Using libpng %s.\\n\", pngver);\n#elif USE_LCMS\n    fprintf(fp, \"   Color profiles are supported via Little CMS. Using libpng %s.\\n\", pngver);\n#else\n    fprintf(fp, \"   Compiled with no support for color profiles. Using libpng %s.\\n\", pngver);\n#endif\n\n#if PNG_LIBPNG_VER < 10600\n    if (strcmp(pngver, \"1.3.\") < 0) {\n        fputs(\"\\nWARNING: Your version of libpng is outdated and may produce corrupted files.\\n\"\n              \"Please recompile pngquant with the current version of libpng (1.6 or later).\\n\", fp);\n    } else if (strcmp(pngver, \"1.6.\") < 0) {\n        #if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)\n        fputs(\"\\nWARNING: Your version of libpng is old and has buggy support for custom chunks.\\n\"\n              \"Please recompile pngquant with the current version of libpng (1.6 or later).\\n\", fp);\n        #endif\n    }\n#endif\n}\n\n\nstruct rwpng_read_data {\n    FILE *const fp;\n    png_size_t bytes_read;\n};\n\n#if !USE_COCOA\nstatic void user_read_data(png_structp png_ptr, png_bytep data, png_size_t length)\n{\n    struct rwpng_read_data *read_data = (struct rwpng_read_data *)png_get_io_ptr(png_ptr);\n\n    png_size_t read = fread(data, 1, length, read_data->fp);\n    if (!read) {\n        png_error(png_ptr, \"Read error\");\n    }\n    read_data->bytes_read += read;\n}\n#endif\n\nstruct rwpng_write_state {\n    FILE *outfile;\n    png_size_t maximum_file_size;\n    png_size_t bytes_written;\n    pngquant_error retval;\n};\n\nstatic void user_write_data(png_structp png_ptr, png_bytep data, png_size_t length)\n{\n    struct rwpng_write_state *write_state = (struct rwpng_write_state *)png_get_io_ptr(png_ptr);\n\n    if (SUCCESS != write_state->retval) {\n        return;\n    }\n\n    if (!fwrite(data, length, 1, write_state->outfile)) {\n        write_state->retval = CANT_WRITE_ERROR;\n    }\n\n    write_state->bytes_written += length;\n}\n\nstatic void user_flush_data(png_structp png_ptr)\n{\n    // libpng never calls this :(\n}\n\n\nstatic png_bytepp rwpng_create_row_pointers(png_infop info_ptr, png_structp png_ptr, unsigned char *base, size_t height, png_size_t rowbytes)\n{\n    if (!rowbytes) {\n        rowbytes = png_get_rowbytes(png_ptr, info_ptr);\n    }\n\n    png_bytepp row_pointers = malloc(height * sizeof(row_pointers[0]));\n    if (!row_pointers) return NULL;\n    for(size_t row = 0; row < height; row++) {\n        row_pointers[row] = base + row * rowbytes;\n    }\n    return row_pointers;\n}\n\n#if !USE_COCOA\nstatic int read_chunk_callback(png_structp png_ptr, png_unknown_chunkp in_chunk)\n{\n    if (0 == memcmp(\"iCCP\", in_chunk->name, 5) ||\n        0 == memcmp(\"cHRM\", in_chunk->name, 5) ||\n        0 == memcmp(\"gAMA\", in_chunk->name, 5)) {\n        return 0; // not handled\n    }\n\n    if (in_chunk->location == 0 ) {\n        return 1; // ignore chunks with invalid location\n    }\n\n    struct rwpng_chunk **head = (struct rwpng_chunk **)png_get_user_chunk_ptr(png_ptr);\n\n    struct rwpng_chunk *chunk = malloc(sizeof(struct rwpng_chunk));\n    memcpy(chunk->name, in_chunk->name, 5);\n    chunk->size = in_chunk->size;\n    chunk->location = in_chunk->location;\n    chunk->data = in_chunk->size ? malloc(in_chunk->size) : NULL;\n    if (in_chunk->size) {\n        memcpy(chunk->data, in_chunk->data, in_chunk->size);\n    }\n\n    chunk->next = *head;\n    *head = chunk;\n\n    return 1; // marks as \"handled\", libpng won't store it\n}\n#endif\n\n/*\n   retval:\n     0 = success\n    21 = bad sig\n    22 = bad IHDR\n    24 = insufficient memory\n    25 = libpng error (via longjmp())\n    26 = wrong PNG color type (no alpha channel)\n */\n\n#if !USE_COCOA\nstatic void rwpng_warning_stderr_handler(png_structp png_ptr, png_const_charp msg) {\n    fprintf(stderr, \"  libpng warning: %s\\n\", msg);\n}\n\nstatic void rwpng_warning_silent_handler(png_structp png_ptr, png_const_charp msg) {\n}\n\nstatic pngquant_error rwpng_read_image24_libpng(FILE *infile, png24_image *mainprog_ptr, int strip, int verbose)\n{\n    png_structp  png_ptr = NULL;\n    png_infop    info_ptr = NULL;\n    png_size_t   rowbytes;\n    int          color_type, bit_depth;\n\n    png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, mainprog_ptr,\n      rwpng_error_handler, verbose ? rwpng_warning_stderr_handler : rwpng_warning_silent_handler);\n    if (!png_ptr) {\n        return PNG_OUT_OF_MEMORY_ERROR;   /* out of memory */\n    }\n\n    info_ptr = png_create_info_struct(png_ptr);\n    if (!info_ptr) {\n        png_destroy_read_struct(&png_ptr, NULL, NULL);\n        return PNG_OUT_OF_MEMORY_ERROR;   /* out of memory */\n    }\n\n    /* setjmp() must be called in every function that calls a non-trivial\n     * libpng function */\n\n    if (setjmp(mainprog_ptr->jmpbuf)) {\n        png_destroy_read_struct(&png_ptr, &info_ptr, NULL);\n        return LIBPNG_FATAL_ERROR;   /* fatal libpng error (via longjmp()) */\n    }\n\n#if defined(PNG_SKIP_sRGB_CHECK_PROFILE) && defined(PNG_SET_OPTION_SUPPORTED)\n    png_set_option(png_ptr, PNG_SKIP_sRGB_CHECK_PROFILE, PNG_OPTION_ON);\n#endif\n\n#if PNG_LIBPNG_VER >= 10500 && defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)\n    if (!strip) {\n        /* copy standard chunks too */\n        png_set_keep_unknown_chunks(png_ptr, PNG_HANDLE_CHUNK_IF_SAFE, (png_const_bytep)\"pHYs\\0iTXt\\0tEXt\\0zTXt\", 4);\n    }\n#endif\n    if (!strip) {\n        png_set_read_user_chunk_fn(png_ptr, &mainprog_ptr->chunks, read_chunk_callback);\n    }\n\n    struct rwpng_read_data read_data = {infile, 0};\n    png_set_read_fn(png_ptr, &read_data, user_read_data);\n\n    png_read_info(png_ptr, info_ptr);  /* read all PNG info up to image data */\n\n    /* alternatively, could make separate calls to png_get_image_width(),\n     * etc., but want bit_depth and color_type for later [don't care about\n     * compression_type and filter_type => NULLs] */\n\n    png_get_IHDR(png_ptr, info_ptr, &mainprog_ptr->width, &mainprog_ptr->height,\n                 &bit_depth, &color_type, NULL, NULL, NULL);\n\n    /* expand palette images to RGB, low-bit-depth grayscale images to 8 bits,\n     * transparency chunks to full alpha channel; strip 16-bit-per-sample\n     * images to 8 bits per sample; and convert grayscale to RGB[A] */\n\n    /* GRR TO DO:  preserve all safe-to-copy ancillary PNG chunks */\n\n    if (!(color_type & PNG_COLOR_MASK_ALPHA)) {\n#ifdef PNG_READ_FILLER_SUPPORTED\n        png_set_expand(png_ptr);\n        png_set_filler(png_ptr, 65535L, PNG_FILLER_AFTER);\n#else\n        fprintf(stderr, \"pngquant readpng:  image is neither RGBA nor GA\\n\");\n        png_destroy_read_struct(&png_ptr, &info_ptr, NULL);\n        mainprog_ptr->retval = WRONG_INPUT_COLOR_TYPE;\n        return mainprog_ptr->retval;\n#endif\n    }\n\n    if (bit_depth == 16) {\n        png_set_strip_16(png_ptr);\n    }\n\n    if (!(color_type & PNG_COLOR_MASK_COLOR)) {\n        png_set_gray_to_rgb(png_ptr);\n    }\n\n    /* get source gamma for gamma correction, or use sRGB default */\n    double gamma = 0.45455;\n    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_sRGB)) {\n        mainprog_ptr->input_color = RWPNG_SRGB;\n        mainprog_ptr->output_color = RWPNG_SRGB;\n    } else {\n        png_get_gAMA(png_ptr, info_ptr, &gamma);\n        if (gamma > 0 && gamma <= 1.0) {\n            mainprog_ptr->input_color = RWPNG_GAMA_ONLY;\n            mainprog_ptr->output_color = RWPNG_GAMA_ONLY;\n        } else {\n            fprintf(stderr, \"pngquant readpng:  ignored out-of-range gamma %f\\n\", gamma);\n            mainprog_ptr->input_color = RWPNG_NONE;\n            mainprog_ptr->output_color = RWPNG_NONE;\n            gamma = 0.45455;\n        }\n    }\n    mainprog_ptr->gamma = gamma;\n\n    png_set_interlace_handling(png_ptr);\n\n    /* all transformations have been registered; now update info_ptr data,\n     * get rowbytes and channels, and allocate image memory */\n\n    png_read_update_info(png_ptr, info_ptr);\n\n    rowbytes = png_get_rowbytes(png_ptr, info_ptr);\n\n    // For overflow safety reject images that won't fit in 32-bit\n    if (rowbytes > INT_MAX/mainprog_ptr->height) {\n        png_destroy_read_struct(&png_ptr, &info_ptr, NULL);\n        return PNG_OUT_OF_MEMORY_ERROR;\n    }\n\n    if ((mainprog_ptr->rgba_data = malloc(rowbytes * mainprog_ptr->height)) == NULL) {\n        fprintf(stderr, \"pngquant readpng:  unable to allocate image data\\n\");\n        png_destroy_read_struct(&png_ptr, &info_ptr, NULL);\n        return PNG_OUT_OF_MEMORY_ERROR;\n    }\n\n    png_bytepp row_pointers = rwpng_create_row_pointers(info_ptr, png_ptr, mainprog_ptr->rgba_data, mainprog_ptr->height, 0);\n\n    /* now we can go ahead and just read the whole image */\n\n    png_read_image(png_ptr, row_pointers);\n\n    /* and we're done!  (png_read_end() can be omitted if no processing of\n     * post-IDAT text/time/etc. is desired) */\n\n    png_read_end(png_ptr, NULL);\n\n#if USE_LCMS\n#if PNG_LIBPNG_VER < 10500\n    png_charp ProfileData;\n#else\n    png_bytep ProfileData;\n#endif\n    png_uint_32 ProfileLen;\n\n    cmsHPROFILE hInProfile = NULL;\n\n    /* color_type is read from the image before conversion to RGBA */\n    int COLOR_PNG = color_type & PNG_COLOR_MASK_COLOR;\n\n    /* embedded ICC profile */\n    if (png_get_iCCP(png_ptr, info_ptr, &(png_charp){0}, &(int){0}, &ProfileData, &ProfileLen)) {\n\n        hInProfile = cmsOpenProfileFromMem(ProfileData, ProfileLen);\n        cmsColorSpaceSignature colorspace = cmsGetColorSpace(hInProfile);\n\n        /* only RGB (and GRAY) valid for PNGs */\n        if (colorspace == cmsSigRgbData && COLOR_PNG) {\n            mainprog_ptr->input_color = RWPNG_ICCP;\n            mainprog_ptr->output_color = RWPNG_SRGB;\n        } else {\n            if (colorspace == cmsSigGrayData && !COLOR_PNG) {\n                mainprog_ptr->input_color = RWPNG_ICCP_WARN_GRAY;\n                mainprog_ptr->output_color = RWPNG_SRGB;\n            }\n            cmsCloseProfile(hInProfile);\n            hInProfile = NULL;\n        }\n    }\n\n    /* build RGB profile from cHRM and gAMA */\n    if (hInProfile == NULL && COLOR_PNG &&\n        !png_get_valid(png_ptr, info_ptr, PNG_INFO_sRGB) &&\n        png_get_valid(png_ptr, info_ptr, PNG_INFO_gAMA) &&\n        png_get_valid(png_ptr, info_ptr, PNG_INFO_cHRM)) {\n\n        cmsCIExyY WhitePoint;\n        cmsCIExyYTRIPLE Primaries;\n\n        png_get_cHRM(png_ptr, info_ptr, &WhitePoint.x, &WhitePoint.y,\n                     &Primaries.Red.x, &Primaries.Red.y,\n                     &Primaries.Green.x, &Primaries.Green.y,\n                     &Primaries.Blue.x, &Primaries.Blue.y);\n\n        WhitePoint.Y = Primaries.Red.Y = Primaries.Green.Y = Primaries.Blue.Y = 1.0;\n\n        cmsToneCurve *GammaTable[3];\n        GammaTable[0] = GammaTable[1] = GammaTable[2] = cmsBuildGamma(NULL, 1/gamma);\n\n        hInProfile = cmsCreateRGBProfile(&WhitePoint, &Primaries, GammaTable);\n\n        cmsFreeToneCurve(GammaTable[0]);\n\n        mainprog_ptr->input_color = RWPNG_GAMA_CHRM;\n        mainprog_ptr->output_color = RWPNG_SRGB;\n    }\n\n    /* transform image to sRGB colorspace */\n    if (hInProfile != NULL) {\n\n        cmsHPROFILE hOutProfile = cmsCreate_sRGBProfile();\n        cmsHTRANSFORM hTransform = cmsCreateTransform(hInProfile, TYPE_RGBA_8,\n                                                      hOutProfile, TYPE_RGBA_8,\n                                                      INTENT_PERCEPTUAL,\n                                                      omp_get_max_threads() > 1 ? cmsFLAGS_NOCACHE : 0);\n        if(!hTransform) {\n            png_destroy_read_struct(&png_ptr, &info_ptr, NULL);\n            cmsCloseProfile(hOutProfile);\n            cmsCloseProfile(hInProfile);\n            return LCMS_FATAL_ERROR;\n        }\n\n        #pragma omp parallel for \\\n            if (mainprog_ptr->height*mainprog_ptr->width > 8000) \\\n            schedule(static)\n        for (unsigned int i = 0; i < mainprog_ptr->height; i++) {\n            /* It is safe to use the same block for input and output,\n               when both are of the same TYPE. */\n            cmsDoTransform(hTransform, row_pointers[i],\n                                       row_pointers[i],\n                                       mainprog_ptr->width);\n        }\n\n        cmsDeleteTransform(hTransform);\n        cmsCloseProfile(hOutProfile);\n        cmsCloseProfile(hInProfile);\n\n        mainprog_ptr->gamma = 0.45455;\n    }\n#endif\n\n    png_destroy_read_struct(&png_ptr, &info_ptr, NULL);\n\n    mainprog_ptr->file_size = read_data.bytes_read;\n    mainprog_ptr->row_pointers = (unsigned char **)row_pointers;\n\n    return SUCCESS;\n}\n#endif\n\nstatic void rwpng_free_chunks(struct rwpng_chunk *chunk) {\n    if (!chunk) return;\n    rwpng_free_chunks(chunk->next);\n    free(chunk->data);\n    free(chunk);\n}\n\nvoid rwpng_free_image24(png24_image *image)\n{\n    free(image->row_pointers);\n    image->row_pointers = NULL;\n\n    free(image->rgba_data);\n    image->rgba_data = NULL;\n\n    rwpng_free_chunks(image->chunks);\n    image->chunks = NULL;\n}\n\nvoid rwpng_free_image8(png8_image *image)\n{\n    free(image->indexed_data);\n    image->indexed_data = NULL;\n\n    free(image->row_pointers);\n    image->row_pointers = NULL;\n\n    rwpng_free_chunks(image->chunks);\n    image->chunks = NULL;\n}\n\npngquant_error rwpng_read_image24(FILE *infile, png24_image *out, int strip, int verbose)\n{\n#if USE_COCOA\n    rwpng_rgba *pixel_data;\n    pngquant_error res = rwpng_read_image32_cocoa(infile, &out->width, &out->height, &out->file_size, &pixel_data);\n    if (res != SUCCESS) {\n        return res;\n    }\n    out->gamma = 0.45455;\n    out->input_color = RWPNG_COCOA;\n    out->output_color = RWPNG_SRGB;\n    out->rgba_data = (unsigned char *)pixel_data;\n    out->row_pointers = malloc(sizeof(out->row_pointers[0])*out->height);\n    for(int i=0; i < out->height; i++) {\n        out->row_pointers[i] = (unsigned char *)&pixel_data[out->width*i];\n    }\n    return SUCCESS;\n#else\n    return rwpng_read_image24_libpng(infile, out, strip, verbose);\n#endif\n}\n\n\nstatic pngquant_error rwpng_write_image_init(rwpng_png_image *mainprog_ptr, png_structpp png_ptr_p, png_infopp info_ptr_p, int fast_compression)\n{\n    /* could also replace libpng warning-handler (final NULL), but no need: */\n\n    *png_ptr_p = png_create_write_struct(PNG_LIBPNG_VER_STRING, mainprog_ptr, rwpng_error_handler, NULL);\n\n    if (!(*png_ptr_p)) {\n        return LIBPNG_INIT_ERROR;   /* out of memory */\n    }\n\n    *info_ptr_p = png_create_info_struct(*png_ptr_p);\n    if (!(*info_ptr_p)) {\n        png_destroy_write_struct(png_ptr_p, NULL);\n        return LIBPNG_INIT_ERROR;   /* out of memory */\n    }\n\n    /* setjmp() must be called in every function that calls a PNG-writing\n     * libpng function, unless an alternate error handler was installed--\n     * but compatible error handlers must either use longjmp() themselves\n     * (as in this program) or exit immediately, so here we go: */\n\n    if (setjmp(mainprog_ptr->jmpbuf)) {\n        png_destroy_write_struct(png_ptr_p, info_ptr_p);\n        return LIBPNG_INIT_ERROR;   /* libpng error (via longjmp()) */\n    }\n\n    png_set_compression_level(*png_ptr_p, fast_compression ? Z_BEST_SPEED : Z_BEST_COMPRESSION);\n    png_set_compression_mem_level(*png_ptr_p, fast_compression ? 9 : 5); // judging by optipng results, smaller mem makes libpng compress slightly better\n\n    return SUCCESS;\n}\n\n\nstatic void rwpng_write_end(png_infopp info_ptr_p, png_structpp png_ptr_p, png_bytepp row_pointers)\n{\n    png_write_info(*png_ptr_p, *info_ptr_p);\n\n    png_set_packing(*png_ptr_p);\n\n    png_write_image(*png_ptr_p, row_pointers);\n\n    png_write_end(*png_ptr_p, NULL);\n\n    png_destroy_write_struct(png_ptr_p, info_ptr_p);\n}\n\nstatic void rwpng_set_gamma(png_infop info_ptr, png_structp png_ptr, double gamma, rwpng_color_transform color)\n{\n    if (color != RWPNG_GAMA_ONLY && color != RWPNG_NONE) {\n        png_set_gAMA(png_ptr, info_ptr, gamma);\n    }\n    if (color == RWPNG_SRGB) {\n        png_set_sRGB(png_ptr, info_ptr, 0); // 0 = Perceptual\n    }\n}\n\npngquant_error rwpng_write_image8(FILE *outfile, png8_image *mainprog_ptr)\n{\n    png_structp png_ptr;\n    png_infop info_ptr;\n\n    if (mainprog_ptr->num_palette > 256) return INVALID_ARGUMENT;\n\n    pngquant_error retval = rwpng_write_image_init((rwpng_png_image*)mainprog_ptr, &png_ptr, &info_ptr, mainprog_ptr->fast_compression);\n    if (retval) return retval;\n\n    struct rwpng_write_state write_state;\n    write_state = (struct rwpng_write_state){\n        .outfile = outfile,\n        .maximum_file_size = mainprog_ptr->maximum_file_size,\n        .retval = SUCCESS,\n    };\n    png_set_write_fn(png_ptr, &write_state, user_write_data, user_flush_data);\n\n    // Palette images generally don't gain anything from filtering\n    png_set_filter(png_ptr, PNG_FILTER_TYPE_BASE, PNG_FILTER_VALUE_NONE);\n\n    rwpng_set_gamma(info_ptr, png_ptr, mainprog_ptr->gamma, mainprog_ptr->output_color);\n\n    /* set the image parameters appropriately */\n    int sample_depth;\n#if PNG_LIBPNG_VER > 10400 /* old libpng corrupts files with low depth */\n    if (mainprog_ptr->num_palette <= 2)\n        sample_depth = 1;\n    else if (mainprog_ptr->num_palette <= 4)\n        sample_depth = 2;\n    else if (mainprog_ptr->num_palette <= 16)\n        sample_depth = 4;\n    else\n#endif\n        sample_depth = 8;\n\n    struct rwpng_chunk *chunk = mainprog_ptr->chunks;\n    mainprog_ptr->metadata_size = 0;\n    int chunk_num=0;\n    while(chunk) {\n        png_unknown_chunk pngchunk = {\n            .size = chunk->size,\n            .data = chunk->data,\n            .location = chunk->location,\n        };\n        memcpy(pngchunk.name, chunk->name, 5);\n        png_set_unknown_chunks(png_ptr, info_ptr, &pngchunk, 1);\n\n        #if defined(PNG_HAVE_IHDR) && PNG_LIBPNG_VER < 10600\n        png_set_unknown_chunk_location(png_ptr, info_ptr, chunk_num, pngchunk.location ? pngchunk.location : PNG_HAVE_IHDR);\n        #endif\n\n        mainprog_ptr->metadata_size += chunk->size + 12;\n        chunk = chunk->next;\n        chunk_num++;\n    }\n\n    png_set_IHDR(png_ptr, info_ptr, mainprog_ptr->width, mainprog_ptr->height,\n      sample_depth, PNG_COLOR_TYPE_PALETTE,\n      0, PNG_COMPRESSION_TYPE_DEFAULT,\n      PNG_FILTER_TYPE_BASE);\n\n    png_color palette[256];\n    png_byte trans[256];\n    unsigned int num_trans = 0;\n    for(unsigned int i = 0; i < mainprog_ptr->num_palette; i++) {\n        palette[i] = (png_color){\n            .red   = mainprog_ptr->palette[i].r,\n            .green = mainprog_ptr->palette[i].g,\n            .blue  = mainprog_ptr->palette[i].b,\n        };\n        trans[i] = mainprog_ptr->palette[i].a;\n        if (mainprog_ptr->palette[i].a < 255) {\n            num_trans = i+1;\n        }\n    }\n\n    png_set_PLTE(png_ptr, info_ptr, palette, mainprog_ptr->num_palette);\n\n    if (num_trans > 0) {\n        png_set_tRNS(png_ptr, info_ptr, trans, num_trans, NULL);\n    }\n\n    rwpng_write_end(&info_ptr, &png_ptr, mainprog_ptr->row_pointers);\n\n    if (SUCCESS == write_state.retval && write_state.maximum_file_size && write_state.bytes_written > write_state.maximum_file_size) {\n        return TOO_LARGE_FILE;\n    }\n\n    return write_state.retval;\n}\n\npngquant_error rwpng_write_image24(FILE *outfile, const png24_image *mainprog_ptr)\n{\n    png_structp png_ptr;\n    png_infop info_ptr;\n\n    pngquant_error retval = rwpng_write_image_init((rwpng_png_image*)mainprog_ptr, &png_ptr, &info_ptr, 0);\n    if (retval) return retval;\n\n    png_init_io(png_ptr, outfile);\n\n    rwpng_set_gamma(info_ptr, png_ptr, mainprog_ptr->gamma, mainprog_ptr->output_color);\n\n    png_set_IHDR(png_ptr, info_ptr, mainprog_ptr->width, mainprog_ptr->height,\n                 8, PNG_COLOR_TYPE_RGB_ALPHA,\n                 0, PNG_COMPRESSION_TYPE_DEFAULT,\n                 PNG_FILTER_TYPE_BASE);\n\n\n    png_bytepp row_pointers = rwpng_create_row_pointers(info_ptr, png_ptr, mainprog_ptr->rgba_data, mainprog_ptr->height, 0);\n\n    rwpng_write_end(&info_ptr, &png_ptr, row_pointers);\n\n    free(row_pointers);\n\n    return SUCCESS;\n}\n\nstatic void rwpng_error_handler(png_structp png_ptr, png_const_charp msg)\n{\n    rwpng_png_image  *mainprog_ptr;\n\n    /* This function, aside from the extra step of retrieving the \"error\n     * pointer\" (below) and the fact that it exists within the application\n     * rather than within libpng, is essentially identical to libpng's\n     * default error handler.  The second point is critical:  since both\n     * setjmp() and longjmp() are called from the same code, they are\n     * guaranteed to have compatible notions of how big a jmp_buf is,\n     * regardless of whether _BSD_SOURCE or anything else has (or has not)\n     * been defined. */\n\n    fprintf(stderr, \"  error: %s (libpng failed)\\n\", msg);\n    fflush(stderr);\n\n    mainprog_ptr = png_get_error_ptr(png_ptr);\n    if (mainprog_ptr == NULL) abort();\n\n    longjmp(mainprog_ptr->jmpbuf, 1);\n}\n"
        },
        {
          "name": "rwpng.h",
          "type": "blob",
          "size": 2.482421875,
          "content": "/*\n** PNG read/write functions\n**\n** © 1998-2000 by Greg Roelofs.\n** © 2009-2017 by Kornel Lesiński.\n**\n** See COPYRIGHT file for license.\n*/\n\n#ifndef RWPNG_H\n#define RWPNG_H\n\n#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <setjmp.h>\n\n#ifndef USE_COCOA\n#define USE_COCOA 0\n#endif\n\ntypedef enum {\n    SUCCESS = 0,\n    MISSING_ARGUMENT = 1,\n    READ_ERROR = 2,\n    INVALID_ARGUMENT = 4,\n    NOT_OVERWRITING_ERROR = 15,\n    CANT_WRITE_ERROR = 16,\n    OUT_OF_MEMORY_ERROR = 17,\n    WRONG_ARCHITECTURE = 18, // Missing SSE\n    PNG_OUT_OF_MEMORY_ERROR = 24,\n    LIBPNG_FATAL_ERROR = 25,\n    WRONG_INPUT_COLOR_TYPE = 26,\n    LIBPNG_INIT_ERROR = 35,\n    LCMS_FATAL_ERROR = 45,\n    TOO_LARGE_FILE = 98,\n    TOO_LOW_QUALITY = 99,\n} pngquant_error;\n\ntypedef struct rwpng_rgba {\n  unsigned char r,g,b,a;\n} rwpng_rgba;\n\nstruct rwpng_chunk {\n    struct rwpng_chunk *next;\n    unsigned char *data;\n    size_t size;\n    unsigned char name[5];\n    unsigned char location;\n};\n\ntypedef enum {\n  RWPNG_NONE,\n  RWPNG_SRGB, // sRGB chunk\n  RWPNG_ICCP, // used ICC profile\n  RWPNG_ICCP_WARN_GRAY, // ignore and warn about GRAY ICC profile\n  RWPNG_GAMA_CHRM, // used gAMA and cHRM\n  RWPNG_GAMA_ONLY, // used gAMA only (i.e. not sRGB)\n  RWPNG_COCOA, // Colors handled by Cocoa reader\n} rwpng_color_transform;\n\ntypedef struct {\n    jmp_buf jmpbuf;\n    uint32_t width;\n    uint32_t height;\n    size_t file_size;\n    double gamma;\n    unsigned char **row_pointers;\n    unsigned char *rgba_data;\n    struct rwpng_chunk *chunks;\n    rwpng_color_transform input_color;\n    rwpng_color_transform output_color;\n} png24_image;\n\ntypedef struct {\n    jmp_buf jmpbuf;\n    uint32_t width;\n    uint32_t height;\n    size_t maximum_file_size;\n    size_t metadata_size;\n    double gamma;\n    unsigned char **row_pointers;\n    unsigned char *indexed_data;\n    struct rwpng_chunk *chunks;\n    unsigned int num_palette;\n    rwpng_rgba palette[256];\n    rwpng_color_transform output_color;\n    char fast_compression;\n} png8_image;\n\ntypedef union {\n    jmp_buf jmpbuf;\n    png24_image png24;\n    png8_image png8;\n} rwpng_png_image;\n\n/* prototypes for public functions in rwpng.c */\n\nvoid rwpng_version_info(FILE *fp);\n\npngquant_error rwpng_read_image24(FILE *infile, png24_image *mainprog_ptr, int strip, int verbose);\npngquant_error rwpng_write_image8(FILE *outfile, png8_image *mainprog_ptr);\npngquant_error rwpng_write_image24(FILE *outfile, const png24_image *mainprog_ptr);\nvoid rwpng_free_image24(png24_image *);\nvoid rwpng_free_image8(png8_image *);\n\n#endif\n"
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 0.5478515625,
          "content": "name: pngquant\nversion: 3.0.3\nsummary: pngquant\ndescription: |\n  Lossy PNG compressor — pngquant command based\n  on libimagequant library https://pngquant.org\n\nbase: core20\nconfinement: strict\n\napps:\n  pngquant:\n    command: bin/pngquant\n    plugs:\n    - home\n\nparts:\n  pngquant:\n    source-type: git\n    source: https://github.com/kornelski/pngquant.git\n    source-tag: 3.0.3\n    plugin: rust\n    build-packages:\n      - gcc\n      - libpng-dev\n      - zlib1g-dev\n      - liblcms2-dev\n    stage-packages:\n      - libpng16-16\n      - zlib1g\n      - liblcms2-2\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}