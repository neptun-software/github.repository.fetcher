{
  "metadata": {
    "timestamp": 1736710342508,
    "page": 150,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mgba-emu/mgba",
      "stars": 5849,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 0.708984375,
          "content": "image:\n- Visual Studio 2019\nplatform:\n- x64\nconfiguration:\n- Release\ninstall:\n- git -C C:\\Tools\\vcpkg clean -dfq docs ports scripts toolsrc triplets versions\n- git -C C:\\Tools\\vcpkg pull --force --quiet\n- C:\\Tools\\vcpkg\\bootstrap-vcpkg\n- vcpkg --triplet x64-windows-release --recurse install ffmpeg libepoxy libpng libzip lua sdl2 sqlite3\n- vcpkg --no-dry-run upgrade\n- rd /Q /S C:\\Tools\\vcpkg\\buildtrees\nbefore_build:\n- cmake . -DCMAKE_PREFIX_PATH=C:\\Qt\\5.15\\msvc2019_64 \\\n    -DCMAKE_TOOLCHAIN_FILE=C:\\Tools\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake \\\n    -DVCPKG_TARGET_TRIPLET=x64-windows-release \\\n    -DCMAKE_CONFIGURATION_TYPES=Release \\\n    -DCMAKE_SYSTEM_VERSION=10.0.22000.1\nbuild:\n  parallel: true\n  project: mGBA.sln\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.96484375,
          "content": "Language: Cpp\nBasedOnStyle: WebKit\nAccessModifierOffset: -4\nAlignAfterOpenBracket: true\nAlignEscapedNewlinesLeft: true\nAlignOperands: false\nAlignTrailingComments: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakTemplateDeclarations: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: true\nColumnLimit: 120\nConstructorInitializerIndentWidth: 4\nIndentCaseLabels: false\nIndentWidth: 4\nKeepEmptyLinesAtTheStartOfBlocks: false\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nPointerAlignment: Left\nSpaceAfterCStyleCast: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeParens: ControlStatements\nSpacesInContainerLiterals: true\nSpaceInEmptyParentheses: false\nSpacesInAngles: false\nStandard: Cpp11\nTabWidth: 4\nUseTab: ForIndentation\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.443359375,
          "content": "# Generic files\r\n*.user*\r\n*~\r\n*.swp\r\n*.pyc\r\n\r\n# Build directories\r\n/build\r\n/build-*\r\n/.vs\r\n\r\n# Build files\r\n*.a\r\n*.dylib\r\n*.dll\r\n*.lib\r\n*.exe\r\n*.o\r\n*.so\r\nCMakeCache.txt\r\nCMakeFiles\r\nCMakeSettings.json\r\nCMakeUserPresets.json\r\ncompile_commands.json\r\n/.cache\r\n/.vscode\r\ncmake_install.cmake\r\nhle-bios.bin\r\nversion.c\r\n\r\n# Runtime generated cruft\r\n*.sav\r\n*.ss0\r\n.\u0000c\u0000l\u0000j\u0000-\u0000k\u0000o\u0000n\u0000d\u0000o\u0000/\u0000.\u0000c\u0000a\u0000c\u0000h\u0000e\u0000/\u0000\r\u0000\n\u0000.\u0000l\u0000s\u0000p\u0000/\u0000.\u0000c\u0000a\u0000c\u0000h\u0000e\u0000/\u0000d\u0000b\u0000.\u0000t\u0000r\u0000a\u0000n\u0000s\u0000i\u0000t\u0000.\u0000j\u0000s\u0000o\u0000n\u0000\r\u0000\n\u0000"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 103.52734375,
          "content": "0.11.0: (Future)\nFeatures:\n - New option to lock the maximum frame size\n - Scripting: New `input` API for getting raw keyboard/mouse/controller state\n - Scripting: New `storage` API for saving data for a script, e.g. settings\n - Scripting: Debugger integration to allow for breakpoints and watchpoints\n - New unlicensed GB mappers: NT (older types 1 and 2), Li Cheng, GGB-81\n - Debugger: Add range watchpoints\nEmulation fixes:\n - ARM: Add framework for coprocessor support\n - GB Serialize: Add missing Pocket Cam state to savestates\n - GB Video: Implement DMG-style sprite ordering\n - GBA: Unhandled bkpt should be treated as an undefined exception\n - GBA: Add baseline CP0 (Wii U VC) and CP1 (DCC) implementations\n - GBA Serialize: Fix some minor save state edge cases\n - GBA Video: Disable BG target 1 blending when OBJ blending (fixes mgba.io/i/2722)\n - GBA Video: Improve emulation of window start/end conditions (fixes mgba.io/i/1945)\nOther fixes:\n - Core: Fix inconsistencies with setting game-specific overrides (fixes mgba.io/i/2963)\n - Debugger: Fix writing to specific segment in command-line debugger\n - FFmpeg: Fix failing to record videos with CRF video (fixes mgba.io/i/3368)\n - GB Core: Fix cloning savedata when backing file is outdated (fixes mgba.io/i/3388)\n - GBA: Fix getting game info for multiboot ROMs\n - GBA Core: Fix booting into BIOS when skip BIOS is enabled\n - GBA Hardware: Fix loading states unconditionally overwriting GPIO memory\n - mGUI: Load parent directory if last used directory is missing (fixes mgba.io/i/3379)\n - Qt: Fix savestate preview sizes with different scales (fixes mgba.io/i/2560)\n - Qt: Fix potential crash when configuring shortcuts\nMisc:\n - Core: Handle relative paths for saves, screenshots, etc consistently (fixes mgba.io/i/2826)\n - Core: Improve rumble emulation by averaging state over entire frame (fixes mgba.io/i/3232)\n - Core: Add MD5 hashing for ROMs\n - GB: Prevent incompatible BIOSes from being used on differing models\n - GB Serialize: Add missing savestate support for MBC6 and NT (newer)\n - GBA: Improve detection of valid ELF ROMs\n - GBA Audio: Remove broken XQ audio pending rewrite\n - GBA BIOS: Move SoftReset implementation to assembly\n - GBA Memory: Improve VRAM access stall cycle estimation\n - GBA SIO: Rewrite lockstep driver for improved stability\n - GBA Video: Add special circlular window handling in OpenGL renderer\n - Libretro: Add Super Game Boy Color support (closes mgba.io/i/3188)\n - mGUI: Enable auto-softpatching (closes mgba.io/i/2899)\n - mGUI: Persist fast forwarding after closing menu (fixes mgba.io/i/2414)\n - mGUI: Wrap around menu cursor when navigating past end (closes mgba.io/i/3356)\n - Qt: Handle multiple save game files for disparate games separately (fixes mgba.io/i/2887)\n - Qt: Remove maligned double-click-to-fullscreen shortcut (closes mgba.io/i/2632)\n - Qt: Pass logging context through to video proxy thread (fixes mgba.io/i/3095)\n - Qt: Show maker code and game version in ROM info\n - Qt: Show a dummy shader settings tab if shaders aren't supported\n - Qt: Allow passing multiple games on command line for multiplayer (closes mgba.io/i/3061)\n - Res: Port NSO-gba-colors shader (closes mgba.io/i/2834)\n - Scripting: Add `callbacks:oneshot` for single-call callbacks\n - Updater: Fix rewriting folders and files on Windows (fixes mgba.io/i/3384)\n\n0.10.4: (2024-12-07)\nEmulation fixes:\n - GB Audio: Fix audio envelope timing resetting too often (fixes mgba.io/i/3164)\n - GB I/O: Fix STAT writing IRQ trigger conditions (fixes mgba.io/i/2501)\n - GBA GPIO: Fix gyro read-out start (fixes mgba.io/i/3141)\n - GBA I/O: Fix HALTCNT access behavior (fixes mgba.io/i/2309)\n - GBA I/O: Fix audio register 8-bit write behavior (fixes mgba.io/i/3086)\n - GBA Serialize: Properly restore GPIO register state (fixes mgba.io/i/3294)\n - GBA SIO: Fix MULTI mode SIOCNT bit 7 writes on secondary GBAs (fixes mgba.io/i/3110)\nOther fixes:\n - Core: Fix patch autoloading leaking the file handle\n - GB: Fix uninitialized save data when loading undersized temporary saves\n - GB, GBA Core: Fix memory leak if reloading debug symbols\n - GB Serialize: Prevent loading invalid states where LY >= 144 in modes other than 1\n - GBA Audio: Fix crash if audio FIFOs and timers get out of sync\n - GBA Audio: Fix crash in audio subsampling if timing lockstep breaks\n - GBA Core: Fix loading symbols from ELF files if the file doesn't end with .elf\n - GBA Memory: Let raw access read high MMIO addresses\n - Qt: Fix crash when applying changes to GB I/O registers in I/O view\n - Qt: Fix LCDC background priority/enable bit being mis-mapped in I/O view\n - Qt: Fix saving named states breaking when screenshot states disabled (fixes mgba.io/i/3320)\n - Qt: Fix potential crash on Wayland with OpenGL (fixes mgba.io/i/3276)\n - Qt: Fix installer updates if a version number is in the filename (fixes mgba.io/i/3109)\n - Updater: Fix updating appimage across filesystems\nMisc:\n - Qt: Make window corners square on Windows 11 (fixes mgba.io/i/3285)\n - Switch: Add bilinear filtering option (closes mgba.io/i/3111)\n - Vita: Add imc0 and xmc0 mount point support\n\n0.10.3: (2024-01-07)\nEmulation fixes:\n - ARM: Remove obsolete force-alignment in `bx pc` (fixes mgba.io/i/2964)\n - ARM: Fake bpkt instruction should take no cycles (fixes mgba.io/i/2551)\n - GB Audio: Fix channels 1/2 staying muted if restarted after long silence\n - GB Audio: Fix channel 1 restarting if sweep applies after stop (fixes mgba.io/i/2965)\n - GB Audio: Fix restarting envelope when writing to register (fixes mgba.io/i/3067)\n - GB Audio: Improve \"zombie mode\" emulation in CGB mode (fixes mgba.io/i/2029)\n - GB I/O: Read back proper SVBK value after writing 0 (fixes mgba.io/i/2921)\n - GB SIO: Disabling SIO should cancel pending transfers (fixes mgba.io/i/2537)\n - GBA Audio: Fix sample timing drifting when changing sample interval\n - GBA Audio: Fix initial channel 3 wave RAM (fixes mgba.io/i/2947)\n - GBA Audio: Fix sample position issues when rate changes (fixes mgba.io/i/3006)\n - GBA GPIO: Fix tilt scale and orientation (fixes mgba.io/i/2703)\n - GBA BIOS: Fix clobbering registers with word-sized CpuSet\n - GBA SIO: Fix normal mode SI/SO semantics (fixes mgba.io/i/2925)\nOther fixes:\n - GB: Fix applying a patch that changes the cartridge mapper (fixes mgba.io/i/3077)\n - GBA Savedata: Fix crash when resizing flash save games for RTC data\n - mGUI: Fix cases where an older save state screenshot would be shown (fixes mgba.io/i/2183)\n - Qt: Re-enable sync for multiplayer windows that aren't connected (fixes mgba.io/i/2974)\n - Qt: Fix mute settings not being loaded on setting screen (fixes mgba.io/i/2990)\n - Qt: Fix screen freezing on macOS after closing save state window (fixes mgba.io/i/2885)\n - Vita: Fix camera setting not appearing (fixes mgba.io/i/3012)\nMisc:\n - mGUI: Persist fast forwarding after closing menu (fixes mgba.io/i/2414)\n - Qt: Add exporting of SAV + RTC saves from Save Converter to strip RTC data\n - VFS: Use anonymousMemoryMap for large 7z allocations (fixes mgba.io/i/3013)\n\n0.10.2: (2023-04-23)\nEmulation fixes:\n - GBA Audio: Fix improperly deserializing GB audio registers (fixes mgba.io/i/2793)\n - GBA Audio: Clear GB audio state when disabled\n - GBA Memory: Make VRAM access stalls only apply to BG RAM\n - GBA Overrides: Fix saving in PMD:RRT (JP) (fixes mgba.io/i/2862)\n - GBA SIO: Fix SIOCNT SI pin value after attaching player 2 (fixes mgba.io/i/2805)\n - GBA SIO: Fix unconnected normal mode SIOCNT SI bit (fixes mgba.io/i/2810)\n - GBA SIO: Normal mode transfers with no clock should not finish (fixes mgba.io/i/2811)\n - GBA Timers: Cascading timers don't tick when disabled (fixes mgba.io/i/2812)\n - GBA Video: Fix interpolation issues with OpenGL renderer\nOther fixes:\n - Core: Allow sending thread requests to a crashed core (fixes mgba.io/i/2784)\n - FFmpeg: Force lower sample rate for codecs not supporting high rates (fixes mgba.io/i/2869)\n - Qt: Fix crash when attempting to use OpenGL 2.1 to 3.1 (fixes mgba.io/i/2794)\n - Qt: Disable sync while running scripts from main thread (fixes mgba.io/i/2738)\n - Qt: Properly cap number of attached players by platform (fixes mgba.io/i/2807)\n - Qt: Disable attempted linking betwen incompatible platforms (fixes mgba.io/i/2702)\n - Qt: Fix modifier key names in shortcut editor (fixes mgba.io/i/2817)\n - Qt: Fix a handful of edge cases with graphics viewers (fixes mgba.io/i/2827)\n - Qt: Fix full-buffer rewind\n - Qt: Fix crash if loading a shader fails\n - Qt: Fix black screen when starting with a game (fixes mgba.io/i/2781)\n - Qt: Fix OSD on modern macOS (fixes mgba.io/i/2736)\n - Qt: Fix checked state of mute menu option at load (fixes mgba.io/i/2701)\n - Qt: Remove OpenGL proxy thread and override SwapInterval directly instead\n - Scripting: Fix receiving packets for client sockets\n - Scripting: Fix empty receive calls returning unknown error on Windows\n - Scripting: Return proper callback ID from socket.add\n - Vita: Work around broken mktime implementation in Vita SDK (fixes mgba.io/i/2876)\nMisc:\n - Qt: Include wayland QPA in AppImage (fixes mgba.io/i/2796)\n - Qt: Stop eating boolean action key events (fixes mgba.io/i/2636)\n - Qt: Automatically change video file extension as appropriate\n - Qt: Swap P1 and other player's save if P1 loaded it first (closes mgba.io/i/2750)\n\n0.10.1: (2023-01-10)\nEmulation fixes:\n - GB Audio: Fix channels 1/2 not playing when resetting volume (fixes mgba.io/i/2614)\n - GB Audio: Fix channel 3 volume being changed between samples (fixes mgba.io/i/1896)\n - GB Audio: Fix up boot sequence\n - GB Audio: Fix updating channels other than 2 when writing NR5x\n - GB Memory: Actually, HDMAs should start when LCD is off (fixes mgba.io/i/2662)\n - GB Serialize: Don't write BGP/OBP when loading SCGB state (fixes mgba.io/i/2694)\n - GB SIO: Further fix bidirectional transfer starting\n - GBA: Fix resetting key IRQ state (fixes mgba.io/i/2716)\n - GBA BIOS: Include timing in degenerate ArcTan2 cases (fixes mgba.io/i/2763)\n - GBA Video: Ignore disabled backgrounds as OBJ blend target (fixes mgba.io/i/2489)\nOther fixes:\n - GBA: Fix forceskip BIOS logic for multiboot ROMs (fixes mgba.io/i/2753)\n - GBA Cheats: Fix issues detecting unencrypted cheats (fixes mgba.io/i/2724)\n - Qt: Manually split filename to avoid overzealous splitting (fixes mgba.io/i/2681)\n - Qt: Fix scanning specific e-Reader dotcodes (fixes mgba.io/i/2693)\n - Qt: Don't re-enable sync if GBA link modes aren't the same (fixes mgba.io/i/2044)\n - Qt: Improve handling of multiplayer syncing (fixes mgba.io/i/2720)\n - Qt: Fix initializing update revision info\n - Qt: Redo stable branch detection heuristic (fixes mgba.io/i/2679)\n - Res: Fix species name location in Ruby/Sapphire revs 1/2 (fixes mgba.io/i/2685)\n - VFS: Fix minizip write returning 0 on success instead of size\nMisc:\n - macOS: Add category to plist (closes mgba.io/i/2691)\n - macOS: Fix modern build with libepoxy (fixes mgba.io/i/2700)\n - Qt: Keep track of current palette preset name (fixes mgba.io/i/2680)\n - Qt: Move OpenGL proxy onto its own thread (fixes mgba.io/i/2493)\n\n0.10.0: (2022-10-11)\nFeatures:\n - Preliminary Lua scripting support\n - Presets for Game Boy palettes\n - Add Super Game Boy palettes for original Game Boy games\n - Tool for converting scanned pictures of e-Reader cards to raw dotcode data\n - Options for muting when inactive, minimized, or for different players in multiplayer\n - Cheat code support in homebrew ports\n - Accelerometer and gyro support for controllers on PC\n - Support for combo \"Super Game Boy Color\" SGB + GBC ROM hacks\n - Improved support for HuC-3 mapper, including RTC\n - Support for 64 kiB SRAM saves used in some bootlegs\n - Discord Rich Presence now supports time elapsed\n - Additional scaling shaders\n - Support for GameShark Advance SP (.gsv) save file importing\n - Support for multiple saves per game using .sa2, .sa3, etc.\n - Support for GBX format Game Boy ROMs\n - New unlicensed GB mappers: NT (newer type), Sachen (MMC1, MMC2)\nEmulation fixes:\n - ARM7: Fix unsigned multiply timing\n - GB: Copy logo from ROM if not running the BIOS intro (fixes mgba.io/i/2378)\n - GB: Fix HALT breaking M-cycle alignment (fixes mgba.io/i/250)\n - GB Audio: Fix channel 1/2 resetting edge cases (fixes mgba.io/i/1925)\n - GB Audio: Properly apply per-model audio differences\n - GB Audio: Revamp channel rendering\n - GB Audio: Fix APU re-enable timing glitch\n - GB I/O: Fix writing to WAVE RAM behavior (fixes mgba.io/i/1334)\n - GB MBC: Fix edge case with Pocket Cam register accesses (fixes mgba.io/i/2557)\n - GB Memory: Add cursory cartridge open bus emulation (fixes mgba.io/i/2032)\n - GB Serialize: Fix loading MBC1 states that affect bank 0 (fixes mgba.io/i/2402)\n - GB SIO: Fix bidirectional transfer starting (fixes mgba.io/i/2290)\n - GB Video: Draw SGB border pieces that overlap GB graphics (fixes mgba.io/i/1339)\n - GBA: Improve timing when not booting from BIOS\n - GBA: Fix expected entry point for multiboot ELFs (fixes mgba.io/i/2450)\n - GBA: Fix booting multiboot ROMs with no JOY entrypoint\n - GBA: Fix 1 MiB ROM mirroring to only mirror 4 times\n - GBA Audio: Adjust PSG sampling rate with SOUNDBIAS\n - GBA Audio: Sample FIFOs at SOUNDBIAS-set frequency\n - GBA BIOS: Work around IRQ handling hiccup in Mario & Luigi (fixes mgba.io/i/1059)\n - GBA BIOS: Initial HLE timing estimation of UnLz77 functions (fixes mgba.io/i/2141)\n - GBA DMA: Fix DMA source direction bits being cleared (fixes mgba.io/i/2410)\n - GBA I/O: Redo internal key input, enabling edge-based key IRQs\n - GBA I/O: Disable open bus behavior on invalid register 06A\n - GBA Memory: Fix misaligned 32-bit I/O loads (fixes mgba.io/i/2307)\n - GBA Video: Fix OpenGL rendering on M1 Macs\n - GBA Video: Ignore horizontally off-screen sprite timing (fixes mgba.io/i/2391)\n - GBA Video: Fix Hblank timing (fixes mgba.io/i/2131, mgba.io/i/2310)\n - GBA Video: Fix rare crash in modes 3-5\n - GBA Video: Fix sprites with mid-frame palette changes in GL (fixes mgba.io/i/2476)\n - GBA Video: Fix OBJ tile wrapping with 2D char mapping (fixes mgba.io/i/2443)\n - GBA Video: Fix horizontal lines in GL when charbase is changed (fixes mgba.io/i/1631)\n - GBA Video: Fix sprite layer priority updating in GL\nOther fixes:\n - ARM: Disassemble Thumb mov pseudo-instruction properly\n - ARM: Disassemble ARM asr/lsr #32 properly\n - ARM: Disassemble ARM movs properly\n - Core: Don't attempt to restore rewind diffs past start of rewind\n - Core: Fix the runloop resuming after a game has crashed (fixes mgba.io/i/2451)\n - Core: Fix crash if library can't be opened\n - Debugger: Fix crash with extremely long CLI strings\n - Debugger: Fix multiple conditional watchpoints at the same address\n - FFmpeg: Fix crash when encoding audio with some containers\n - FFmpeg: Fix GIF recording (fixes mgba.io/i/2393)\n - GB: Fix temporary saves\n - GB: Fix replacing the ROM crashing when accessing ROM base\n - GB: Don't try to map a 0-byte SRAM (fixes mgba.io/i/2668)\n - GB, GBA: Save writeback-pending masked saves on unload (fixes mgba.io/i/2396)\n - mGUI: Fix FPS counter after closing menu\n - Qt: Fix some hangs when using the debugger console\n - Qt: Fix crash when clicking past last tile in viewer\n - Qt: Fix preloading for ROM replacing\n - Qt: Fix screen not displaying on Wayland (fixes mgba.io/i/2190)\n - Qt: Fix crash when selecting 256-color sprite in sprite view\n - Qt: Fix coloration of swatches on styles with distinct frame backgrounds\n - VFS: Failed file mapping should return NULL on POSIX\nMisc:\n - Core: Suspend runloop when a core crashes\n - Core: Add wallclock offset RTC type\n - Debugger: Save and restore CLI history\n - Debugger: GDB now works while the game is paused\n - Debugger: Add command to load external symbol file (fixes mgba.io/i/2480)\n - FFmpeg: Support dynamic audio sample rate\n - GB: Support CGB0 boot ROM loading\n - GB Audio: Increase sample rate\n - GB MBC: Filter out MBC errors when cartridge is yanked (fixes mgba.io/i/2488)\n - GB MBC: Partially implement TAMA5 RTC\n - GB Video: Add default SGB border\n - GBA: Automatically skip BIOS if ROM has invalid logo\n - GBA: Refine multiboot detection (fixes mgba.io/i/2192)\n - GBA Cheats: Implement \"never\" type codes (closes mgba.io/i/915)\n - GBA DMA: Enhanced logging (closes mgba.io/i/2454)\n - GBA Memory: Implement adjustable EWRAM waitstates (closes mgba.io/i/1276)\n - GBA Savedata: Store RTC data in savegames (closes mgba.io/i/240)\n - GBA Video: Implement layer placement for OpenGL renderer (fixes mgba.io/i/1962)\n - GBA Video: Fix highlighting for sprites with mid-frame palette changes\n - mGUI: Add margin to right-aligned menu text (fixes mgba.io/i/871)\n - mGUI: Autosave less frequently when fast-forwarding\n - Qt: Rearrange menus some\n - Qt: Clean up cheats dialog\n - Qt: Only set default controller bindings if loading fails (fixes mgba.io/i/799)\n - Qt: Save converter now supports importing GameShark Advance saves\n - Qt: Save positions of multiplayer windows (closes mgba.io/i/2128)\n - Qt: Add optional frame counter to OSD (closes mgba.io/i/1728)\n - Qt: Add optional emulation-related information on reset (closes mgba.io/i/1780)\n - Qt: Add QOpenGLWidget cross-thread codepath for macOS (fixes mgba.io/i/1754)\n - Qt: Enable -b for Boot BIOS menu option (fixes mgba.io/i/2074)\n - Qt: Add tile range selection to tile viewer (closes mgba.io/i/2455)\n - Qt: Show warning if XQ audio is toggled while loaded (fixes mgba.io/i/2295)\n - Qt: Add e-Card passing to the command line (closes mgba.io/i/2474)\n - Qt: Boot both a multiboot image and ROM with CLI args (closes mgba.io/i/1941)\n - Qt: Improve cheat parsing (fixes mgba.io/i/2297)\n - Qt: Change lossless setting to use WavPack audio\n - Qt: Use FFmpeg to convert additional camera formats, if available\n - Qt: Resume crashed game when loading a save state\n - Qt: Include cheats in bug report\n - SDL: Support exposing an axis directly as the gyro value (closes mgba.io/i/2531)\n - Windows: Attach to console if present\n - VFS: Early return NULL if attempting to map 0 bytes from a file\n - Vita: Add bilinear filtering option (closes mgba.io/i/344)\n\n0.9.3: (2021-12-17)\nEmulation fixes:\n - GB I/O: Fix incrementing SGB controller when P14 is low (fixes mgba.io/i/2202)\n - GB Memory: Add cursory cartridge open bus emulation (fixes mgba.io/i/2032)\n - GB Video: Render SGB border when unmasking with ATTR/PAL_SET (fixes mgba.io/i/2261)\n - GBA SIO: Fix SI value for unattached MULTI mode\n - GBA Video: Fix backdrop color if DISPCNT is first set to 0 (fixes mgba.io/i/2260)\n - GBA Video: Don't iterate affine backgrounds when disabled\n - GBA Video: Delay enabling backgrounds in bitmap modes (fixes mgba.io/i/1668)\nOther fixes:\n - ARM Decoder: Fix decoding of lsl r0 (fixes mgba.io/i/2349)\n - FFmpeg: Don't attempt to use YUV 4:2:0 for lossless videos (fixes mgba.io/i/2084)\n - GB Video: Fix memory leak when resetting SGB games\n - GBA: Fix out of bounds ROM accesses on patched ROMs smaller than 32 MiB\n - GBA: Fix maximum tile ID in caching for 256-color modes\n - GBA Video: Fix cache updating with proxy and GL renderers\n - Libretro: Fix crash when using Game Boy codes (fixes mgba.io/i/2281)\n - mGUI: Fix crash if autosave file can't be opened (fixes mgba.io/i/2268)\n - Qt: Remove potentially deadlocking optimization\n - Qt: Fix corrupted savestate and fatal error text\n - Qt: Fix sprite compositing when sprite tiles go out of bounds (fixes mgba.io/i/2348)\nMisc:\n - GBA I/O: Update KEYINPUT in internal I/O memory (fixes mgba.io/i/2235)\n - SDL: Use SDL_JoystickRumble where available\n - Wii: Add adjustable gyroscope settings (closes mgba.io/i/2245)\n\n0.9.2: (2021-07-10)\nEmulation fixes:\n - GB Video: Clear VRAM on reset (fixes mgba.io/i/2152)\n - GBA SIO: Add missing NORMAL8 implementation bits (fixes mgba.io/i/2172)\n - GBA SIO: Fix missing interrupt on an unattached NORMAL transfer\n - GBA Memory: Fix prefetch mask when swapping modes within a region\n - GBA Serialize: Fix loading audio enable bit late (fixes mgba.io/i/2230)\n - GBA Video: Revert scanline latching changes (fixes mgba.io/i/2153, mgba.io/i/2149)\nOther fixes:\n - 3DS: Fix disabling \"wide\" mode on 2DS (fixes mgba.io/i/2167)\n - ARM Debugger: Fix disassembly alignment (fixes mgba.io/i/2204)\n - Core: Fix memory leak in opening games from the library\n - Core: Fix memory searches for relative values (fixes mgba.io/i/2135)\n - Core: Fix portable mode on macOS\n - GB Audio: Fix audio channel 4 being slow to deserialize\n - GB Core: Fix GBC colors setting breaking default model overrides (fixes mgba.io/i/2161)\n - mGUI: Cache save state screenshot validity in state menu (fixes mgba.io/i/2005)\n - Qt: Fix eventual deadlock when using sync to video\n - Qt: Fix applying savetype-only overrides\n - Qt: Fix crash in sprite view for partially out-of-bounds sprites (fixes mgba.io/i/2165)\n - Qt: Fix having to press controller buttons twice for menu items (fixes mgba.io/i/2143)\n - Qt: Redo sensor binding to be less fragile\n - Qt: Reuse timer when rescheduling missing frames (fixes mgba.io/i/2236)\n - Qt: Fix bounded fast forward with enhancement OpenGL renderer\n - Util: Fix loading UPS patches that affect the last byte of the file\nMisc:\n - Util: Improve speed of UPS patch loading\n\n0.9.1: (2021-04-18)\nEmulation fixes:\n - ARM: Fix LDM^ with empty rlist (fixes mgba.io/i/2127)\n - Core: Fix first event scheduling after loading savestate\n - GB Serialize: Fix switching speed modes when loading a state (fixes mgba.io/i/2097)\n - GB: Fix skipping BIOS\n - GBA Memory: Fix loading Thumb savestates when in ARM mode\n - GBA Video: Fix window start on modes 3-5 with mosaic (fixes mgba.io/i/1690)\n - GBA Video: Fix mode 3-5 overflow with mosaic (fixes mgba.io/i/1691)\nOther fixes:\n - GBA: Fix non-USA 1.0 FireRed misdetecting as a ROM hack (fixes mgba.io/i/2100)\n - GBA: Fix crash when ROM loading fails\n - GBA e-Reader: Fix bitmap short strip scanning\n - GBA Video: Fix mode 5 frame 1 caching (fixes mgba.io/i/2075)\n - GBA Video: Don't attempt to copy invalid registers when switching renderer\n - Qt: Fix crash when switching from high-resolution OpenGL renderer to software\n - Qt: Fix OpenGL renderer lagging behind when fast-forwarding (fixes mgba.io/i/2094)\n - Qt: Fix smudged window icon on Windows\n - Qt: Fix saving settings enabling camera when camera name changes (fixes mgba.io/i/2125)\n - Qt: Fix frames getting backlogged (fixes mgba.io/i/2122)\n - Qt: Restore maximized state when starting (fixes mgba.io/i/487)\nMisc:\n - Core: Truncate preloading ROMs that slightly exceed max size (fixes mgba.io/i/2093)\n - GBA: Default-enable VBA bug compat for Ruby and Emerald ROM hacks\n - GBA Memory: Log GPIO writes on non-GPIO carts as Pak Hardware instead of Memory\n - Qt: Add ROM filename and size to bug reporter\n - Qt: Improve handling of disabling VBA bug compat mode (fixes mgba.io/i/2129)\n\n0.9.0: (2021-03-28)\nFeatures:\n - e-Reader card scanning\n - New tool for converting between different save game formats\n - WebP and APNG recording\n - Separate overrides for GBC games that can also run on SGB or regular GB\n - Game Boy Player features can be enabled by default for all compatible games\n - Frame and I/O viewer support for Game Boy\n - Bug report tool for gathering information helpful for reporting bugs\n - Mute option in homebrew ports\n - Status indicators for fast-forward and mute in homebrew ports\n - VBA bug compatibility mode for ROM hacks that don't work on real hardware\n - Read-only support for MBC6 flash memory\n - New unlicensed GB mappers: Pokémon Jade/Diamond, BBD, and Hitek\n - Stack tracing tools in ARM debugger (by ahigerd)\n - Command scripts for CLI debugger (by ahigerd)\n - Scheduled event dumping in CLI debugger\n - ARM disassembler now resolves addresses to symbol names\n - Add Game Boy Player feature support to ports\n - Individual window types can now be toggled in debugging views\n - Support for the Wii U GamePad when running as an injected VC title\nEmulation fixes:\n - ARM: Fix ALU reading PC after shifting\n - ARM: Fix STR storing PC after address calculation\n - ARM: Fix Addressing mode 1 shifter on rs == pc (fixes mgba.io/i/1926)\n - ARM: Fix long multiply-and-accumulate register write order (fixes mgba.io/1/1956)\n - ARM: Fix long and accumulate multiply timing\n - GB: Partially fix timing for skipped BIOS\n - GB: Downgrade DMG-only ROMs from CGB mode even without boot ROM\n - GB: Fix marking BIOS as unmapped when skipping BIOS (fixes mgba.io/i/2061)\n - GB Audio: Fix serializing sweep time\n - GB Audio: Fix some channel 4 timing edge cases\n - GB MBC: Fix MBC1 mode changing behavior\n - GB MBC: Fix some MBC3 bit masking\n - GB Video: Fix state after skipping BIOS (fixes mgba.io/i/1715 and mgba.io/i/1716)\n - GBA: Fix timing advancing too quickly in rare cases\n - GBA: Clear GBP connection on reset\n - GBA Audio: Revamp FIFO emulation (fixes mgba.io/i/356, mgba.io/i/875, mgba.io/i/1847)\n - GBA BIOS: Implement dummy sound driver calls\n - GBA BIOS: Improve HLE BIOS timing\n - GBA BIOS: Fix reloading video registers after reset (fixes mgba.io/i/1808)\n - GBA BIOS: Make HLE BIOS calls interruptible (fixes mgba.io/i/1711 and mgba.io/i/1823)\n - GBA BIOS: Fix invalid decompression bounds checking\n - GBA DMA: Linger last DMA on bus (fixes mgba.io/i/301 and mgba.io/i/1320)\n - GBA DMA: Fix ordering and timing of overlapping DMAs\n - GBA I/O: Green swap register should be readable\n - GBA I/O: Ignore high bits on IME\n - GBA Memory: Improve gamepak prefetch timing\n - GBA Memory: Stall on VRAM access in mode 2 (fixes mgba.io/i/190)\n - GBA Memory: Improve robustness of Matrix memory support\n - GBA Memory: Mark Famicom Mini games 22 through 28 as non-mirroring\n - GBA Memory: Return correct byte for odd ROM open bus addresses\n - GBA Memory: Improved AGBPrint emulation of edge cases (fixes mgba.io/i/1867)\n - GBA Memory: Fix masking of misaligned jumps\n - GBA Serialize: Fix alignment check when loading states\n - GBA SIO: Fix copying Normal mode transfer values\n - GBA SIO: Fix Normal mode being totally broken (fixes mgba.io/i/1800)\n - GBA SIO: Fix deserializing SIO registers\n - GBA SIO: Fix hanging on starting a second multiplayer window (fixes mgba.io/i/854)\n - GBA SIO: Fix Normal mode transfer start timing (fixes mgba.io/i/425)\n - GBA Timers: Fix toggling timer cascading while timer is active (fixes mgba.io/i/2043)\n - GBA Video: Latch scanline at end of Hblank (fixes mgba.io/i/1319)\n - GBA Video: Fix Hblank timing\n - GBA Video: Implement green swap (fixes mgba.io/i/1609)\n - GBA Video: Emulate sprite cycle limits in OpenGL renderer (fixes mgba.io/i/1635)\n - GBA Video: Fix OBJWIN erratic rendering in OpenGL renderer\n - GBA Video: Fix x offset in 256-color BG mosaic (fixes mgba.io/i/1684)\n - GBA Video: Fix transposed BG mosaic parameters in GL renderer\n - SM83: Emulate HALT bug\n - SM83: Improve mid-M-cycle interrupts\n - SM83: HALT should not consume an extra T-state\nOther fixes:\n - 3DS: Fix thread cleanup\n - All: Improve export headers (fixes mgba.io/i/1738)\n - Cheats: Fix indirect write cheats (fixes mgba.io/i/2026)\n - CMake: Fix build with downstream minizip that exports incompatible symbols\n - CMake: Link with correct OpenGL library (fixes mgba.io/i/1872)\n - Core: Ensure ELF regions can be written before trying\n - Core: Fix threading improperly setting paused state while interrupted\n - Core: Fix loading ELF files that have unexpected empty program headers\n - Core: Fix destroying an mVL with an invalid channel count\n - Debugger: Don't skip undefined instructions when debugger attached\n - Debugger: Close trace log when done tracing\n - Debugger: Fix change watchpoints (fixes mgba.io/i/1947)\n - Debugger: Call CLI debugger system init\n - FFmpeg: Fix some small memory leaks\n - FFmpeg: Fix encoding of time base\n - GB: Fix crash when changing ROM while in banked address space\n - GB: Fix loading model overrides\n - GB MBC: Force minimum SRAM size on rare MBCs that always have SRAM\n - GB Serialize: Fix crash when loading pre-0.7 SGB savestates\n - GB Video: Fix SGB video logs\n - GB Video: Discard SGB packets in non-SGB mVLs\n - GB Video: Fix deserializing negative LX state\n - GB Video: Don't rendering negative batches\n - GBA: Fix loading multiboot ELF files (fixes mgba.io/i/1949)\n - GBA: Fix loading subsequent save files (fixes mgba.io/i/2067)\n - mGUI: Don't attempt to preload files larger than can fit in RAM\n - Qt: Force OpenGL paint engine creation thread (fixes mgba.io/i/1642)\n - Qt: Fix static compilation in MinGW (fixes mgba.io/i/1769)\n - Qt: Fix a race condition in the frame inspector\n - Qt: Load/save bytes from memory viewer in the order visible (fixes mgba.io/i/1900)\n - Qt: Fix running proxied video if it gets pushed to the main thread\n - Qt: Fix game display sometimes disappearing after closing load/save state screen\n - Qt: Fix cancelling pausing before the frame ends\n - Qt: Fix gamepad event dispatching (fixes mgba.io/i/1922)\n - Qt: Pre-attach GDB stub when launching with -g (fixes mgba.io/i/1950)\n - Qt: Fix crash when editing shortcuts with none selected (fixes mgba.io/i/1964)\n - Qt: Fix crashing when no OpenGL context can be obtained\n - Qt: Fix issues with I/O viewer not properly synchronizing state\n - Qt: Fix loading a new game crashing on Wayland (fixes mgba.io/i/1992)\n - Qt: Fix inability to clear hat bindings\n - SM83: Simplify register pair access on big endian\n - SM83: Disassemble STOP as one byte\n - Switch: Fix GB game height in pixel accurate mode (fixes mgba.io/i/2073)\n - Wii: Fix crash on unloading irregularly sized GBA ROMs\nMisc:\n - 3DS: Use \"wide mode\" where applicable for slightly better filtering\n - 3DS: Batch directory reads\n - Core: Add savedataUpdated callback\n - Core: Add shutdown callback\n - Core: Rework thread state synchronization\n - Core: Improve support for ROM patch cheats, supporting disabling overlapping patches\n - Core: Adding to library is now recursive\n - GB: Allow pausing event loop while CPU is blocked\n - GB: Add support for sleep and shutdown callbacks\n - GB: Redo double speed emulation (closes mgba.io/i/1515)\n - GB: Support loading CGB-on-AGB boot ROM\n - GB Audio: Add channel 4 batching back (fixes mgba.io/i/1313)\n - GB Core: Return the current number of banks for ROM/SRAM, not theoretical max\n - GB I/O: Implement preliminary support for PCM12/PCM34 (closes mgba.io/i/1468)\n - GB MBC: Remove unused SRAM size\n - GBA: Allow pausing event loop while CPU is blocked\n - GBA BIOS: Division by zero should emit a FATAL error\n - GBA Cheats: Allow unlimited ROM patch-type codes per set\n - GBA Video: Convert OpenGL VRAM texture to integer\n - GBA Video: Skip attempting to render offscreen sprites in OpenGL\n - GBA Video: New GL palette approach, no more batch splitting on palette edits\n - GBA Video: Avoid integer division using reciprocal tricks\n - Debugger: Keep track of global cycle count\n - FFmpeg: Add looping option for GIF/APNG\n - FFmpeg: Add CRF support for applicable codecs\n - mGUI: Show battery percentage\n - mGUI: Skip second scan loop when possible\n - mGUI: Improve loading speed (fixes mgba.io/i/1957)\n - Qt: Renderer can be changed while a game is running\n - Qt: Add hex index to palette view\n - Qt: Add transformation matrix info to sprite view\n - Qt: Memory viewer now supports editing decimal values directly (closes mgba.io/i/1705)\n - Qt: Add copy button to GB printer dialog\n - Qt: Window title updates can be disabled (closes mgba.io/i/1912)\n - Qt: Redo OpenGL context thread handling (fixes mgba.io/i/1724)\n - Qt: Discard additional frame draws if waiting fails\n - Qt: Unify monospace font usage\n - Qt: Add button to jump to log settings\n - Qt: Use relative paths in portable mode when applicable (fixes mgba.io/i/838)\n - Qt: Better initial shortcut editor column sizes\n - SDL: Fall back to sw blit if OpenGL init fails\n - Switch: Optimize font rendering (fixes mgba.io/i/2078)\n - Switch: Allow switching between CPU and GPU renderers without reloading\n - Util: Reset vector size on deinit\n - VFS: Change semantics of VFile.sync on mapped files (fixes mgba.io/i/1730)\n\n0.8.4: (2020-10-29)\nEmulation fixes:\n - GB Audio: Fix initial sweep state\n - GB Audio: Fix deserializing audio channels 2 and 3\n - GB Audio: Fix deserializing while audio was disabled (fixes mgba.io/i/1305)\n - GB Video: Fix drawing background when window is force-disabled by frontend\n - GB, GBA Video: Copy disable flags when drawing scanlines in proxy when not blocking\n - GBA Audio: Fix deserializing SOUNDCNT_L\n - GBA Audio: Fix stereo in XQ audio\n - GBA Audio: Fix volume/mute in XQ audio (fixes mgba.io/i/1864)\n - GBA Hardware: Fix GB Player detection on big endian platforms\n - GBA Video: Invalidate map cache when modifying BGCNT (fixes mgba.io/i/1846)\n - GBA Video: Don't draw sprites using unmapped VRAM in GL renderer (fixes mgba.io/i/1865)\n - GBA Video: Fix rare regression blending semitransparent sprites (fixes mgba.io/i/1876)\n - GBA Video: Do not affect OBJ pixel priority when writing OBJWIN (fixes mgba.io/i/1890)\n - GBA Video: Fix deferred blending when OBJWIN matches window (fixes mgba.io/i/1905)\n - GBA Video: Fix mode 4 transparency in OpenGL (fixes mgba.io/i/1907)\nOther fixes:\n - 3DS: Redo video sync to be more precise\n - 3DS: Fix crash with libctru 2.0 when exiting\n - ARM Decoder: Fix decoding pre-indexed writeback instructions (fixes mgba.io/i/1915)\n - Core: Fix reported ROM size when a fixed buffer size is used\n - Core: Fix memory leak loading ELF files\n - GBA: Disable more checks when loading GS save with checks disabled (fixes mgba.io/i/1851)\n - GBA: Fix endianness issues in renderer proxy\n - GBA Core: Fix memory leak when loading symbols\n - GBA Serialize: Ensure program counter is aligned when loading\n - Qt: Add dummy English translation file (fixes mgba.io/i/1469)\n - Qt: Fix Battle Chip view not displaying chips on some DPI settings\n - Qt: Fix camera image being upside-down sometimes (fixes mgba.io/i/829 again)\n - Qt: Fix drawing on macOS break when using OpenGL (fixes mgba.io/i/1899)\n - Qt: Fix stride changing when toggling SGB borders (fixes mgba.io/i/1898)\n - Qt: Fix aliasing on background logo (fixes mgba.io/i/1886)\n - mGUI: Fix closing down a game if an exit is signalled\n - mGUI: Fix cycling through config setting states with accept button\n - mVL: Fix injecting accidentally draining non-injection buffer\n - VFS: Fix directory node listing on some filesystems\nMisc:\n - GBA Video: Improve speed of window texture generation on AMD\n - Vita: Clear both buffers when loading a game\n\n0.8.3: (2020-08-03)\nEmulation fixes:\n - ARM: Fix LDM^ writeback to user-mode register\n - ARM: Fix LDM^ {pc} differences (fixes mgba.io/i/1698)\n - ARM: Fix edge case with Thumb SBC flags (fixes mgba.io/i/1818)\n - GB MBC: Fix MBC1 RAM enable bit selection\n - GB MBC: Fix MBC2 bit selection\n - GB Memory: Fix OAM DMA from top 8 kB\n - GB Video: Always initialize palette\n - GBA Savedata: Fix potential corruption when loading a 1Mbit flash save\n - GBA Video: Fix invalid read in mode 4 mosaic\n - GBA Video: Fix color of disabled screen\n - SM83: Fix flags on little endian PowerPC\nOther fixes:\n - 3DS: Fix garbage on borders of scaled screens\n - All: Correct format strings for some numbers on Windows (fixes mgba.io/i/1794)\n - All: Correct more format strings on Windows (fixes mgba.io/i/1817)\n - ARM: Fix decoder detection of branches with ALU and LDR instrctions\n - CMake: Fix build with libzip 1.7\n - CMake: Add missing dllexports.h file to dev installation\n - GB Core: Fix extracting SRAM when none is present\n - GBA: Fix leak if attempting to load BIOS multiple times\n - GBA Memory: Fix instability on Wii when using AGBPrint\n - GBA Savedata: Fix extracting save when not yet configured in-game\n - Qt: Fix file handle leak on opening an invalid ROM\n - Qt: Fix Italian RTC translation (fixes mgba.io/i/1798)\n - Qt: Add missing option for Wisdom Tree in overrides list\n - Qt: Fix stability regression on AMD drivers (fixes mgba.io/i/1791)\n - Util: Fix crash if PNG header fails to write\n - Vita: Fix flickering when using frameskip (fixes mgba.io/i/1822)\n - Wii: Fix pixelated filtering on interframe blending (fixes mgba.io/i/1830)\nMisc:\n - FFmpeg: Use range coder for FFV1 to reduce output size\n - Qt: Add per-page scrolling to memory view (fixes mgba.io/i/1795)\n - Qt: Add setting to display ROM filename in title (closes mgba.io/i/1784)\n\n0.8.2: (2020-06-14)\nEmulation fixes:\n - ARM: Fix timing on Thumb shift instructions\n - GB: Fix GBC game registers after skipping BIOS\n - GB MBC: Support 4MB MBC30 ROMs (fixes mgba.io/i/1713)\n - GB Video: Fix BGPS value after skipping BIOS (fixes mgba.io/i/1717)\n - GBA: Add missing RTC overrides for Legendz games\n - GBA BIOS: Reset renderer when RegisterRamReset called (fixes mgba.io/i/1756)\n - GBA SIO: Fix Multiplayer busy bit\n - GBA SIO: Fix double-unloading active driver\n - GBA Timers: Fix deserializing count-up timers\n - GBA Video: Fix mosaic objects drawing past the end (fixes mgba.io/i/1702)\n - GBA Video: Fix disabling OBJWIN in GL renderer (fixes mgba.io/i/1759)\n - GBA Video: Add missing parts of 256-color mode 0 mosaic (fixes mgba.io/i/1701)\n - GBA Video: Fix double-size OBJ wrapping in GL renderer (fixes mgba.io/i/1712)\n - GBA Video: Simplify sprite cycle counting (fixes mgba.io/i/1279)\n - GBA Video: Fix sprite/backdrop blending regression\nOther fixes:\n - 3DS: Fix framelimiter on newer citro3d (fixes mgba.io/i/1771)\n - ARM: Fix disassembling of several S-type instructions (fixes mgba.io/i/1778)\n - ARM Debugger: Clear low bit on breakpoint addresses (fixes mgba.io/i/1764)\n - CMake: Always use devkitPro toolchain when applicable (fixes mgba.io/i/1755)\n - Core: Fix ELF loading regression (fixes mgba.io/i/1669)\n - Core: Fix crash modifying hash table entry (fixes mgba.io/i/1673)\n - GB Video: Fix some cases where SGB border doesn't draw to multi-buffers\n - GBA: Reject incorrectly sized BIOSes\n - GBA: Break infinite loop for 0-frame mVLs (fixes mgba.io/i/1723)\n - Qt: Fix OpenGL 2.1 support (fixes mgba.io/i/1678)\n - Qt: Fix unmapping zipped ROM (fixes mgba.io/i/1777)\nMisc:\n - 3DS: Clean up legacy initialization (fixes mgba.io/i/1768)\n - GBA Serialize: Only flunk BIOS check if official BIOS was expected\n - Qt: Disable Replace ROM option when no game loaded\n - Qt: Defer texture updates until frame is drawn (fixes mgba.io/i/1590)\n - Qt: Set icon for Discord Rich Presence\n - Qt: Show a warning when save file can't be opened\n\n0.8.1: (2020-02-16)\nEmulation fixes:\n - GB Serialize: Fix timing bug loading channel 4 timing\n - GBA: Fix multiboot entry point while skipping BIOS\n - GBA BIOS: Fix undefined instruction HLE behavior\n - GBA DMA: Fix invalid audio DMA parameters\n - GBA Memory: Misaligned SRAM writes are ignored\n - GBA Serialize: Fix serializing DMA transfer register\n - GBA Serialize: Fix audio DMA timing deserialization\n - GBA Video: Fix OAM not invalidating after reset (fixes mgba.io/i/1630)\n - GBA Video: Fix backdrop blending on lines without sprites (fixes mgba.io/i/1647)\n - GBA Video: Fix OpenGL sprite flag priority\nOther fixes:\n - Core: Fix race condition initializing thread proxy\n - Core: Fix integer overflow in ELF loading\n - FFmpeg: Fix crash when -strict -2 is needed for vcodec or container\n - FFmpeg: Disallow recording video with no audio nor video\n - GBA: Automatically skip BIOS for multiboot ROMs\n - Qt: Only dynamically reset video scale if a game is running\n - Qt: Fix race condition with proxied video events\n - Qt: Fix color selection in asset view (fixes mgba.io/i/1648)\n - Qt: Fix missing OSD messages\n - Qt: Fix crash unloading shaders\n - Qt: Fix toggled actions on gamepads (fixes mgba.io/i/1650)\n - Qt: Fix extraneous dialog (fixes mgba.io/i/1654)\n - Qt: Fix window title not updating after shutting down game\n - Qt: Fix GIF view not allowing manual filename entry\n - Qt: Fix non-GB build (fixes mgba.io/i/1664)\n - Qt: Fix pausing Qt Multimedia audio (fixes mgba.io/i/1643)\n - Qt: Fix invalid names for modifier keys (fixes mgba.io/i/525)\n - SDL: Refresh stale pointers after adding a joystick (fixes mgba.io/i/1622)\n - Util: Fix crash reading invalid ELFs\n - VFS: Fix handle leak when double-mapping (fixes mgba.io/i/1659)\nMisc:\n - FFmpeg: Add more presets\n - Qt: Fix non-SDL build (fixes mgba.io/i/1656)\n - SDL: Use DirectSound audio driver by default on Windows\n - Switch: Make OpenGL scale adjustable while running\n\n0.8.0: (2020-01-21)\nFeatures:\n - Improved logging configuration\n - One-Player BattleChip/Progress/Beast Link Gate support\n - Add Game Boy Color palettes for original Game Boy games\n - Debugger: Add unary operators and memory dereferencing\n - GB: Expose platform information to CLI debugger\n - Support Discord Rich Presence\n - Debugger: Add tracing to file\n - Enhanced map viewer, supporting bitmapped GBA modes and more displayed info\n - OpenGL renderer with high-resolution upscaling support\n - Experimental high level \"XQ\" audio for most GBA games\n - Interframe blending for games that use flicker effects\n - Frame inspector for dissecting and debugging rendering\n - Switch: Option to use built-in brightness sensor for Boktai\n - Ports: Ability to enable or disable all SGB features (closes mgba.io/i/1205)\n - Ports: Ability to crop SGB borders off screen (closes mgba.io/i/1204)\n - Cheats: Add support for loading Libretro-style cht files\n - GBA Cheats: Add support for loading EZ Flash-style cht files\n - Support for unlicensed Wisdom Tree Game Boy mapper\n - Qt: Add export button for tile view (closes mgba.io/i/1507)\n - Qt: Add recent game list clearing (closes mgba.io/i/1380)\n - GB: Yanking gamepak now supported\n - Qt: Memory range dumping (closes mgba.io/i/1298)\nEmulation fixes:\n - GB: Fix using boot ROM with MMM01 games\n - GB Audio: Only reset channel 3 sample in DMG mode\n - GB Audio: Sample inactive channels (fixes mgba.io/i/1455, mgba.io/i/1456)\n - GB Audio: Fix channel 4 volume (fixes mgba.io/i/1529)\n - GB I/O: Filter IE top bits properly (fixes mgba.io/i/1329)\n - GB Memory: Better emulate 0xFEA0 region on DMG, MGB and AGB\n - GB Video: Delay LYC STAT check (fixes mgba.io/i/1331)\n - GB Video: Fix window being enabled mid-scanline (fixes mgba.io/i/1328)\n - GB Video: Fix mode 0 window edge case (fixes mgba.io/i/1519)\n - GB Video: Fix color scaling in AGB mode\n - GBA: All IRQs have 7 cycle delay (fixes mgba.io/i/539, mgba.io/i/1208)\n - GBA: Reset now reloads multiboot ROMs\n - GBA BIOS: Fix multiboot entry point (fixes Magic Floor)\nOther fixes:\n - Core: Improved lockstep driver reliability (Le Hoang Quyen)\n - FFmpeg: Drain recording buffers\n - GB: Fix reading ROM immediately after unmapping BIOS\n - GB SIO: Fix lockstep failing games aren't reloaded\n - GBA Cheats: Fix value incrementing in CB slide codes (fixes mgba.io/i/1501)\n - Libretro: Fix crash changing allowing opposing directions (hhromic)\n - Qt: Fix some Qt display driver race conditions\n - Qt: Fix menu bar staying hidden in full screen (fixes mgba.io/i/317)\n - Qt: Only show emulator restart warning once per settings saving\n - Qt: Fix LibraryController initialization (fixes mgba.io/i/1324)\n - Shaders: Fix gba-color shader resolution (fixes mgba.io/i/1435)\n - Switch: Fix audio when video rate desyncs (fixes mgba.io/i/1532)\nMisc:\n - CMake: Don't use libzip on embedded platforms (fixes mgba.io/i/1527)\n - Core: Add keysRead callback\n - Core: Create game-related paths if they don't exist (fixes mgba.io/i/1446)\n - Core: Add more memory search ops (closes mgba.io/i/1510)\n - Debugger: Make tracing compatible with breakpoints/watchpoints\n - Debugger: Print breakpoint/watchpoint number when inserting\n - Feature: Switch from ImageMagick to FFmpeg for GIF generation\n - FFmpeg: Support audio-only recording\n - GB Memory: Support running from blocked memory\n - GBA BIOS: Add timings for HLE BIOS math functions (fixes mgba.io/i/1396)\n - GBA BIOS: Fix clobbered registers in CpuSet (fixes mgba.io/i/1531)\n - GBA Savedata: EEPROM performance fixes\n - GBA Savedata: Automatically map 1Mbit Flash files as 1Mbit Flash\n - Debugger: Add breakpoint and watchpoint listing\n - mGUI: Remember name and position of last loaded game\n - OpenGL: Only resize textures when needed\n - Qt: Don't unload ROM immediately if it crashes\n - Qt: Support switching webcams\n - Qt: Cap window size on start to monitor size\n - Qt: Open a message box for Qt frontend errors\n - Qt: Increase maximum magnifications and scaling\n - Qt: Add native FPS button to settings view\n - Qt: Improve sync code\n - Qt: Add option to pause on minimizing window (closes mgba.io/i/1379)\n - Qt: Scale pixel color values to full range (fixes mgba.io/i/1511)\n - Qt: Remove What's This icon from dialogs\n - Qt: Printer quality of life improvements (fixes mgba.io/i/1540)\n - Qt: Add copy and QoL improvements to graphic views (closes mgba.io/i/1541)\n - Qt: Show list of all sprites in sprite view\n - Qt: Add option for disabling OSD messages\n - Qt, OpenGL: Disable integer scaling for dimensions that don't fit\n - SM83: Support PC-relative opcode decoding\n - Switch: Dynamic display resizing\n - Switch: Support file associations\n - Vita: L2/R2 and L3/R3 can now be mapped on PSTV (fixes mgba.io/i/1292)\nChanges from beta 1:\nEmulation fixes:\n - ARM: Fix STR writeback pipeline stage\n - ARM: Partially fix LDM/STM writeback with empty register list\n - ARM: Fix stepping when events are pending\n - GBA DMA: Fix case where DMAs could get misaligned (fixes mgba.io/i/1092)\n - GBA Memory: Fix open bus from IWRAM (fixes mgba.io/i/1575)\n - GBA Timers: Improve timer startup emulation\n - GBA Video: Fix OpenGL renderer 512x512 backgrounds (fixes mgba.io/i/1572)\n - GBA Video: Fix BLDY for semitransparent sprite on non-target-2 backgrounds\n - GBA Video: Fix effects blending improperly in some non-last windows\n - GBA Video: Copy higher priority target 1 flag\nOther fixes:\n - 3DS: Fix screen darkening (fixes mgba.io/i/1562)\n - Core: Fix uninitialized memory issues with graphics caches\n - Core: Return null for out of bounds cached tile VRAM querying\n - GBA Video: Fix OpenGL fragment data binding\n - GBA Video: Fix mosaic in modes 1-5 in OpenGL (fixes mgba.io/i/1620)\n - Debugger: Fix tracing skipping instructions (fixes mgba.io/i/1614)\n - OpenGL: Only invalidate texture if dimensions change (fixes mgba.io/i/1612)\n - Qt: Fix fast forward mute being reset (fixes mgba.io/i/1574)\n - Qt: Fix scrollbar arrows in memory view (fixes mgba.io/i/1558)\n - Qt: Fix several cases where shader selections don't get saved\n - Qt: Fix division by zero error in invalid TilePainter state\n - Qt: Fix \"restart needed\" dialog after first config (fixes mgba.io/i/1601)\n - Qt: Fix undesired screen filtering when paused (fixes mgba.io/i/1602)\n - Qt: Fix sprite view using wrong base address (fixes mgba.io/i/1603)\n - Qt: Fix inability to clear default keybindings\n - Qt: Release held actions if they get rebound\n - Qt: Fix crash double-clicking menus in shortcut settings (fixes mgba.io/i/1627)\n - Qt: Fix record A/V window not updating resolution (fixes mgba.io/i/1626)\n - Vita: Fix analog controls (fixes mgba.io/i/1554)\n - Wii: Fix game fast-forwarding after slowing down\n - Wii: Improve audio buffering (fixes mgba.io/i/1617)\nMisc:\n - GB Memory: Support manual SRAM editing (fixes mgba.io/i/1580)\n - GBA: Trim non-movie ROMs to 32 MiB if applicable\n - GBA Audio: Redo channel 4 batching for GBA only\n - GBA I/O: Stop logging several harmless invalid register reads\n - GBA Video: Changing OpenGL scaling no longer requires restart\n - Debugger: Separate aliases from main commands\n - Debugger: Print break-/watchpoint ID when breaking in CLI\n - Debugger: Minor interface cleanup\n - SDL: Use controller GUID instead of name\n - SM83: Rename LR35902 to SM83\n - Tools: Allow using threaded renderer in perf.py\n - Tools: Clean up unused argument in mgba-perf\n\n0.8 beta 1: (2019-10-20)\n- Initial beta for 0.8\n\n0.7.3: (2019-09-15)\nEmulation fixes:\n - GB: Fix savedata initialization (fixes mgba.io/i/1473, mgba.io/i/1478)\n - GB: Fix SGB controller incrementing (fixes mgba.io/i/1104)\n - GB Audio: Improve channel 4 supersampling\n - GB Printer: Reset printer buffer index after printing\n - GB Audio: Deschedule channel 3 when disabled (fixes mgba.io/i/1463)\n - GB Audio: Deschedule channel 1 when disabled by sweep (fixes mgba.io/i/1467)\n - GB Video: Increment BCPS/OCPS even in mode 3 (fixes mgba.io/i/1462)\n - GBA Memory: Fix STM to VRAM (fixes mgba.io/i/1430)\n - GBA Memory: Fix STM/LDM to invalid VRAM\n - GBA Video: Fix wrapped sprite mosaic clamping (fixes mgba.io/i/1432)\n - GBA Audio: Fix channel 4 aliasing (fixes mgba.io/i/1265)\nOther fixes:\n - Core: Fix crashes if core directories aren't set\n - Core: Fix crash when exiting game with cheats loaded\n - GBA: Set up GPIO mapping on null and ELF ROM regions (fixes mgba.io/i/1481)\n - GBA Cheats: Fix PARv3 Thumb hooks\n - GBA Cheats: Fix value incrementing in CB slide codes (fixes mgba.io/i/1501)\n - Qt: Fix FPS target maxing out at 59.727 (fixes mgba.io/i/1421)\n - Qt: Cap audio buffer size to 8192 (fixes mgba.io/i/1433)\n - Qt: Fix race conditions initializing GDB stub\n - Qt: Improve cheat view UX\n - Libretro: Fix crash changing allowing opposing directions (hhromic)\n - mGUI: Fix crash if last loaded ROM directory disappears (fixes mgba.io/i/1466)\n - Switch: Fix threading-related crash on second launch\nMisc:\n - Qt: Make mute menu option also toggle fast-forward mute (fixes mgba.io/i/1424)\n - Qt: Show error message if file failed to load\n\n0.7.2: (2019-05-25)\nEmulation fixes:\n - GB: Fix HALT when IE and IF unused bits are set (fixes mgba.io/i/1349)\n - GB Timer: Fix timing adjustments when writing to TAC (fixes mgba.io/i/1340)\n - GB Video: Fix window y changing mid-window (fixes mgba.io/i/1345)\n - GB Video: Fix more window edge cases (fixes mgba.io/i/1346)\n - GBA: Fix RTC on non-standard sized ROMs (fixes mgba.io/i/1400)\n - GBA DMA: Fix DMA0-2 lengths (fixes mgba.io/i/1344)\n - GBA Memory: Fix writing to OBJ memory in modes 3 and 5\n - GBA Memory: Prevent writing to mirrored BG VRAM (fixes mgba.io/i/743)\n - GBA Video: Fix scanline cache with scale factor change edge cases\n - GBA Video: Fix sprite mosaic clamping (fixes mgba.io/i/1008)\n - GBA Video: Implement mosaic on transformed sprites (fixes mgba.io/b/5)\nOther fixes:\n - 3DS: Ensure core 2 can be used for threaded renderer (fixes mgba.io/i/1371)\n - All: Fix several memory leaks\n - GB Core: Fix toggling WIN and OBJ being swapped\n - GBA: Fix skipping BIOS on irregularly sized ROMs\n - CMake: Fix .deb imagemagick dependencies\n - FFmpeg: Improve initialization reliability and cleanup\n - FFmpeg: Fix audio conversion producing gaps\n - LR35902: Fix disassembly of several CB-prefix instructions\n - LR35902: Fix trailing whitespace in disassembly\n - Qt: More app metadata fixes\n - Qt: Fix load recent from archive (fixes mgba.io/i/1325)\n - Qt: Fix overrides getting discarded (fixes mgba.io/i/1354)\n - Qt: Fix saved scale not getting set on resize (fixes mgba.io/i/1074)\n - Qt: Fix crash in sprite viewer magnification (fixes mgba.io/i/1362)\n - Qt: Fix adjusting magnification in tile viewer when not fitting to window\n - Qt: Fix bounded fast forward with Qt Multimedia\n - Qt: Fix saving settings with native FPS target\n - Wii: Fix aspect ratio (fixes mgba.io/i/500)\nMisc:\n - Qt: Add missing HEVC NVENC option (fixes mgba.io/i/1323)\n - Qt: Improve camera initialization\n - Vita: Improved frame drawing speed\n\n0.7.1: (2019-02-24)\nBugfixes:\n - 3DS: Work around menu freezing (fixes mgba.io/i/1294)\n - GB: Fix crash when accessing SRAM if no save loaded and cartridge has no SRAM\n - GB Serialize: Fix loading states with negative pixel x (fixes mgba.io/i/1293)\n - GB, GBA Serialize: Fix loading two states in a row\n - GBA: Fix video timing when skipping BIOS (fixes mgba.io/i/1318)\n - GBA DMA: Fix Display Start DMAs\n - GBA DMA: Fix DMA start/end timing\n - GBA DMA: Fix invalid DMA handling (fixes mgba.io/i/1301)\n - GBA Memory: Fix a few AGBPrint crashes\n - GBA Memory: Fix OOB ROM reads showing up as AGBPrint memory\n - GBA SIO: Prevent writing read-only multiplayer bits\n - GBA Video: Fix enabling layers in non-tile modes (fixes mgba.io/i/1317)\n - Python: Fix crash when deleting files owned by library\n - Python: Make sure GB link object isn't GC'd before GB object\n - PSP2: Fix file descriptors dying on suspend (fixes mgba.io/i/1123)\n - Qt: Fix tile and sprite views not always displaying at first\n - Qt: Fix audio context holding onto closed game controller\n - Qt: Fix color picking in sprite view (fixes mgba.io/i/1307)\n - Qt: Fix window icon on X11\n - Qt: Fix quick load recent accidentally saving (fixes mgba.io/i/1309)\n - Switch: Fix final cleanup (fixes mgba.io/i/1283)\n - Switch: Fix gyroscope orientation (fixes mgba.io/i/1300)\nMisc:\n - GBA Video: Improve sprite cycle counting (fixes mgba.io/i/1274)\n - Qt: Updated Italian translation (by Vecna)\n\n0.7.0: (2019-01-26)\nFeatures:\n - ELF support\n - Game Boy Camera support\n - Qt: Set default Game Boy colors\n - Game Boy Printer support\n - Super Game Boy support\n - Customizable autofire speed\n - Ability to set default Game Boy model\n - Map viewer\n - Automatic cheat loading and saving\n - GameShark and Action Replay button support\n - AGBPrint support\n - Debugger: Conditional breakpoints and watchpoints\n - Ability to select GB/GBC/SGB BIOS on console ports\n - Optional automatic state saving/loading\n - Access to ur0 and uma0 partitions on the Vita\n - Partial support for MBC6, MMM01, TAMA and HuC-1 GB mappers\n - GBA: ARMIPS/A22i-style and ELF symbol table support\n - Initial Switch port\nBugfixes:\n - ARM: Fix MSR when T bit is set\n - Core: Fix audio sync breaking when interrupted\n - Core: Fix ordering events when scheduling during events\n - FFmpeg: Fix encoding audio/video queue issues\n - GB: Revamp IRQ handling based on new information\n - GB: Fix IRQ disabling on the same T-cycle as an assert\n - GB Audio: Make audio unsigned with bias (fixes mgba.io/i/749)\n - GB Audio: Clock frame events on DIV\n - GB Audio: Fix channel 3 reset value\n - GB Audio: Fix channel 4 initial LFSR\n - GB Audio: Fix channel 1, 2 and 4 reset timing\n - GB I/O: DMA register is R/W\n - GB MBC: Improve multicart detection heuristic (fixes mgba.io/i/1177)\n - GB, GBA Savedata: Fix savestate loading overwriting saves on reset\n - GB, GBA Savedata: Fix unmasking savedata crash\n - GB Serialize: Fix audio state loading\n - GB Serialize: Fix game title check\n - GB Serialize: Fix IRQ pending/EI pending confusion\n - GB Timer: Minor accuracy improvements\n - GB Video: Fix dot clock timing being slightly wrong\n - GB Video: Fix loading states while in mode 3\n - GB Video: Fix enabling window when LY > WY (fixes mgba.io/i/409)\n - GB Video: Fix SCX timing\n - GB, GBA Video: Don't call finishFrame twice in thread proxy\n - GBA: Reset WAITCNT properly\n - GBA BIOS: Fix BitUnPack final byte\n - GBA BIOS: Fix BitUnPack narrowing\n - GBA DMA: Fix invalid DMA reads (fixes mgba.io/i/142)\n - GBA DMA: Fix temporal sorting of DMAs of different priorities\n - GBA Hardware: Fix RTC overriding light sensor (fixes mgba.io/i/1069)\n - GBA Hardware: Fix RTC handshake transition (fixes mgba.io/i/1134)\n - GBA Memory: Fix Vast Fame support (taizou) (fixes mgba.io/i/1170)\n - GBA Savedata: Fix savedata modified time updating when read-only\n - GBA Serialize: Fix loading channel 3 volume (fixes mgba.io/i/1107)\n - GBA Serialize: Fix loading states in Hblank\n - GBA SIO: Fix unconnected SIOCNT for multi mode (fixes mgba.io/i/1105)\n - GBA Timer: Fix timers sometimes being late (fixes mgba.io/i/1012)\n - GBA Video: Don't mask out high bits of BLDY (fixes mgba.io/i/899)\n - GBA Video: Add delay when enabling BGs (fixes mgba.io/i/744, mgba.io/i/752)\n - GBA Video: Start timing mid-scanline when skipping BIOS\n - GBA Video: Improve sprite cycle counting (fixes mgba.io/i/1126)\n - GBA Video: Make layer disabling work consistently\n - PSP2: Fix more issues causing poor audio\n - Qt: Fix GL display when loading a game from CLI (fixes mgba.io/i/843)\n - Qt: Improve FPS timer stability\n - Util: Fix wrapping edge cases in RingFIFO\nMisc:\n - 3DS: Remove deprecated CSND interface\n - All: Make FIXED_ROM_BUFFER an option instead of 3DS-only\n - Core: Remove broken option for whether rewinding restores save games\n - Feature: Added loading savestates from command line\n - FFmpeg: Support libswresample (fixes mgba.io/i/1120, mgba.io/b/123)\n - FFmpeg: Support lossless h.264 encoding\n - FFmpeg: Support lossless VP9 encoding\n - GBA Cheats: Allow multiple ROM patches in the same slot\n - GB: Skip BIOS option now works\n - GB: Fix VRAM/palette locking (fixes mgba.io/i/1109)\n - GB Audio: Improved audio quality\n - GB, GBA Audio: Increase max audio volume\n - GB MBC: Remove erroneous bank 0 wrapping\n - GB Video: Darken colors in GBA mode\n - GBA: Extend oddly-sized ROMs to full address space (fixes mgba.io/i/722)\n - GBA: Implement display start DMAs\n - GBA: Improve multiboot image detection\n - GBA Memory: 64 MiB GBA Video cartridge support\n - GBA Savedata: Remove ability to disable realistic timing\n - GBA Timer: Use global cycles for timers\n - Libretro: Add frameskip option\n - mGUI: Add fast forward toggle\n - PSP2: Use system enter key by default\n - Python: Integrate tests from cinema test suite\n - Qt: Redo GameController into multiple classes\n - Qt: Prevent window from being created off-screen\n - Qt: Add option to disable FPS display\n - Qt: Options to mess around with layer placement\n - Qt: Add load alternate save option\n - Qt: Allow pausing game at load (fixes mgba.io/i/1129)\n - Qt: Clean up FPS target UI (fixes mgba.io/i/436)\n - Test: Restructure test suite into multiple executables\n - Util: Don't build crc32 if the function already exists\n - Wii: Move audio handling to callbacks (fixes mgba.io/i/803)\nChanges from beta 1:\nFeatures:\n - Libretro: Add Game Boy cheat support\n - Qt: Separate fast forward volume control (fixes mgba.io/i/846, mgba.io/i/1143)\n - Switch: Rumble support\n - Switch: Rotation support\n - Switch: Screen stretching options\n - Qt: State file load/save menu options\n - Windows installer\n - Tile viewer now has adjustable width\n - Python: Experimental audio API\nBugfixes:\n - 3DS: Fix unused screens not clearing (fixes mgba.io/i/1184)\n - Core: Remember to deinit proxy ring FIFO\n - Core: Reroot timing list when (de)scheduling\n - GB, GBA: Fix broken opposing button filter (fixes mgba.io/i/1191)\n - GB MBC: Fix MBC30 SRAM\n - GB, GBA Savedata: Fix leaks when loading masked save (fixes mgba.io/i/1197)\n - GB Video: Fix SGB border hole size\n - GB Video: Changing LYC while LCDC off doesn't affect STAT (fixes mgba.io/i/1224)\n - GBA: Fix GB Player features\n - GBA I/O: SOUNDCNT_HI is readable when sound is off\n - GBA Savedata: Fix EEPROM writing codepath when savetype is not EEPROM\n - GBA Video: Fix caching with background toggling (fixes mgba.io/i/1118)\n - Libretro: Fix adding codes with hooks\n - PSP2: Fix audio crackling after fast forward\n - PSP2: Fix audio crackling when buffer is full\n - Qt: Fix jumbled background when paused\n - Qt: Fix FPS counter on Windows\n - Qt: Fix focus issues with load/save state overlay\n - Switch: Fix incorrect mapping for fast forward cap\n - Wii: Fix drawing caching regression (fixes mgba.io/i/1185)\n - PSP2: Fix tearing issues (fixes mgba.io/i/1211)\n - Qt: Fix mapping analog triggers (fixes mgba.io/i/495)\n - Qt: Grab focus when game starts (fixes mgba.io/i/804)\n - Qt: Ensure FATAL logs reach log view\n - SDL: Fix handling of invalid gamepads (fixes mgba.io/i/1239)\nMisc:\n - CMake: Fix libswresample version dependencies (fixes mgba.io/i/1229)\n - Debugger: Minor text fixes\n - Debugger: Readability improvements (fixes mgba.io/i/1238)\n - GB: Improved SGB2 support\n - GB Audio: Skip frame if enabled when clock is high\n - Libretro: Reduce rumble callbacks\n - mGUI: Add SGB border configuration option\n - mGUI: Add support for different settings types\n - Python: Minor API improvements\n - Qt: Ensure camera image is valid\n - Qt: Debugger console history\n - Qt: Detect presence of GL_ARB_framebuffer_object\n - Qt: Minor memory view tweaks\n - Res: Improve modeling of AGB/AGS screen in shaders\n - Wii: Define _GNU_SOURCE (fixes mgba.io/i/1106)\n - Wii: Expose stretch configuration in settings\n - Wii: Stretch now sets pixel-accurate mode size cap\n\n0.7 beta 1: (2018-09-24)\n- Initial beta for 0.7\n\n0.6.3: (2018-04-14)\nBugfixes:\n - GB Audio: Revert unsigned audio changes\n - GB Video: Fix bad merge (fixes mgba.io/i/1040)\n - GBA Video: Fix OBJ blending regression (fixes mgba.io/i/1037)\n\n0.6.2: (2018-04-03)\nBugfixes:\n - Core: Fix ROM patches not being unloaded when disabled (fixes mgba.io/i/962)\n - 3DS: Fix opening files in directory names with trailing slashes\n - LR35902: Fix watchpoints not reporting new value\n - GB MBC: Fix MBC2 saves (fixes mgba.io/i/954)\n - GB Memory: HDMAs should not start when LCD is off (fixes mgba.io/i/310)\n - GB Memory: Fix OAM DMA blocking regions (fixes mgba.io/i/1013)\n - GB Video: Only trigger STAT write IRQs when screen is on (fixes mgba.io/i/912)\n - GBA: Fix some GBA ROM misdetection (fixes mgba.io/i/978)\n - GBA: Fix SharkPort saves for EEPROM games\n - GBA Audio: Increase PSG volume (fixes mgba.io/i/932)\n - GBA BIOS: Fix incorrect exit condition in LZ77\n - GBA Cheats: Fix PARv3 slide codes (fixes mgba.io/i/919)\n - GBA Cheats: Fix slide codes not initializing properly\n - GBA DMA: ROM reads are forced to increment\n - GBA Hardware: RTC accuracy improvements\n - GBA I/O: Fix writing to DISPCNT CGB flag (fixes mgba.io/i/902)\n - GBA Memory: Fix copy-on-write memory leak\n - GBA Memory: Partially revert prefetch changes (fixes mgba.io/i/840)\n - GBA Savedata: Fix crash when resizing flash\n - GBA Video: Force align 256-color tiles\n - GBA Video: OBJWIN can change blend params after OBJ is drawn (fixes mgba.io/i/921)\n - PSP2: Fix issues causing poor audio\n - Python: Fix package directory\n - Qt: Fix locale being set to English on settings save (fixes mgba.io/i/906)\n - Qt: Fix opening in fullscreen (fixes mgba.io/i/993)\n - Wii: Fix screen tear when unpausing\n - Wii: Fix various setup and teardown drawing issues (fixes mgba.io/i/988)\nMisc:\n - 3DS: Scale font based on glyph heights (fixes mgba.io/i/961)\n - GB MBC: Remove erroneous bank 0 wrapping\n - GBA: Improve multiboot image detection\n - PSP2: Use system enter key by default\n\n0.6.1: (2017-10-01)\nBugfixes:\n - GB, GBA: Fix crashes when attempting to identify null VFiles\n - GB, GBA: Fix sync to video with frameskip\n - GB, GBA Savedata: Fix savestate-related save overwriting (fixes mgba.io/i/834)\n - GB Audio: Fix NRx2 writes while active (fixes mgba.io/i/866)\n - GB Core: Fix palette loading when loading a foreign config\n - GB MBC: Pocket Cam memory should be accessible without enabling\n - GB MBC: Fix SRAM sizes 4 and 5\n - GB MBC: Fix RTC initialization (fixes mgba.io/i/825)\n - GB MBC: Fix RTC loading when file size is off\n - GB Memory: Initialize peripheral pointers\n - GB Memory: Prevent accessing empty SRAM (fixes mgba.io/i/831)\n - GB Memory: Fix HDMA count starting in mode 0 (fixes mgba.io/i/855)\n - GB Memory: Actually load latch time from savestate\n - GB Serialize: Fix deserializing video STAT\n - GB Video: Fix 16-bit screenshots (fixes mgba.io/i/826)\n - GB Video: Fix potential hang when ending mode 0\n - GB Video: Fix read mode when enabling LCD\n - GBA: Reset active region as needed when loading a ROM\n - GBA: Fix keypad IRQs not firing when extra buttons are pressed\n - GBA BIOS: Use core's VRAM variable instead of renderer's\n - GBA Cheats: Fix PARv3 multiline blocks (fixes mgba.io/i/889)\n - GBA I/O: Fix reading from a few invalid I/O registers (fixes mgba.io/i/876)\n - GBA Savedata: Fix 512 byte EEPROM saving as 8kB (fixes mgba.io/i/877)\n - GBA Savedata: Fix size of SRAM saves (fixes mgba.io/i/883)\n - GBA Video: Fix broken sprite blending hack (fixes mgba.io/i/532)\n - Python: Fix importing .gb or .gba before .core\n - Qt: Fix command line debugger closing second game\n - Qt: Fix LOG argument order\n - Qt: Fix timezone issues with time overrides\n - Qt: Fix sprite export pausing game indefinitely (fixes mgba.io/i/841)\n - SDL: Fix potential race condition when pressing keys (fixes mgba.io/i/872)\nMisc:\n - CMake: Fix CPack dependencies for libpng 1.6\n - GBA: Detect hardware for Pokémon FireRed ROM hacks\n - GBA Cheats: Improve detection of raw cheats\n - Qt: Don't rebuild library view if style hasn't changed\n - Qt: Allow overrides to be saved before a game is loaded\n - Qt: Hide mouse immediately when loading\n - SDL: Fix 2.0.5 build on macOS under some circumstances\n - VFS: Make VFile.truncate work growing files on PSV (fixes mgba.io/i/885)\n\n0.6.0: (2017-07-16)\nFeatures:\n - Library view\n - Sprite viewer\n - Debugging console\n - Improved memory viewer\n - Memory search\n - Command line ability to override configuration values\n - Add option to allow preloading the entire ROM before running\n - Add option for whether rewinding restores save games\n - Savestates now contain any RTC override data\n - Add option to lock video to integer scaling\n - LR35902: Watchpoints\n - LR35902/GB-Z80 disassembler\n - GB: Tile viewer\n - GB: Video/audio channel enabling/disabling\n - GB: Symbol table support\n - GB MBC: Add MBC1 multicart support\n - GBA: Support printing debug strings from inside a game\n - GBA: Better cheat type autodetection\n - Implement keypad interrupts\n - Configuration of gamepad hats\n - Video log recording for testing and bug reporting\n - Debugger: Segment/bank support\n - Debugger: Execution tracing\n - Qt: German translation (by Lothar Serra Mari)\n - Qt: Spanish translation (by Kevin López)\n - Qt: Italian translation (by theheroGAC)\nBugfixes:\n - ARM7: Fix MLA/*MULL/*MLAL timing\n - Core: Fix crash with rewind if savestates shrink\n - Core: Fix interrupting a thread while on the thread (fixes mgba.io/i/692)\n - Core: Fix directory sets crashing on close if base isn't properly detached\n - FFmpeg: Fix overflow and general issues with audio encoding\n - GB: Fix flickering when screen is strobed quickly\n - GB: Fix STAT blocking\n - GB MBC: Fix ROM bank overflows getting set to bank 0\n - GB MBC: Fix swapping carts not detect new MBC\n - GB Timer: Improve DIV reset behavior\n - GB Timer: Fix DIV batching if TAC changes\n - GB Video: Reset renderer when loading state\n - GBA: Fix multiboot ROM loading\n - GBA: Fix multiboot loading resulting in too small WRAM\n - GBA BIOS: Implement BitUnPack\n - GBA BIOS: Fix ArcTan sign in HLE BIOS\n - GBA BIOS: Fix ArcTan2 sign in HLE BIOS (fixes mgba.io/i/689)\n - GBA BIOS: Fix INT_MIN/-1 crash\n - GBA Hardware: Fix crash if a savestate lies about game hardware\n - GBA I/O: Handle audio registers specially when deserializing\n - GBA Memory: Improve initial skipped BIOS state\n - GBA Savedata: Fix savedata unmasking (fixes mgba.io/i/441)\n - GBA Savedata: Update and fix Sharkport importing (fixes mgba.io/i/658)\n - GBA Video: Fix wrong palette on 256-color sprites in OBJWIN\n - GBA Video: Don't update background scanline params in mode 0 (fixes mgba.io/i/377)\n - Libretro: Fix saving in GB games (fixes mgba.io/i/486)\n - LR35902: Fix core never exiting with certain event patterns\n - LR35902: Fix pc overflowing current region off-by-one\n - LR35902: Fix decoding LD r, $imm and 0-valued immediates (fixes mgba.io/i/735)\n - OpenGL: Fix some shaders causing offset graphics\n - GB Timer: Fix sub-M-cycle DIV reset timing and edge triggering\n - Qt: Fix window icon being stretched\n - Qt: Fix data directory path\n - Qt: Fix timing issues on high refresh rate monitors\n - Qt: Fix linking after some windows have been closed\n - Qt: Fix crash when changing audio settings after a game is closed\n - Qt: Ensure CLI backend is attached when submitting commands (fixes mgba.io/i/662)\n - Qt: Disable \"New multiplayer window\" when MAX_GBAS is reached (fixes mgba.io/i/107)\n - Qt: Fix game unpausing after frame advancing and refocusing\n - SDL: Fix game crash check\n - SDL: Fix race condition with audio thread when starting\n - SDL: Fix showing version number\n - Test: Fix crash when loading invalid file\n - Test: Fix crash when fuzzing fails to load a file\n - Test: Don't rely on core for frames elapsed\n - Test: Fix crash when loading invalid file\n - Test: Fix crash when fuzzing fails to load a file\n - Tools: Fix recurring multiple times over the same library\n - Util: Fix overflow when loading invalid UPS patches\n - Util: Fix highest-fd socket not being returned by SocketAccept\n - Windows: Fix VDir.rewind\nMisc:\n - All: Add C++ header guards\n - All: Move time.h include to common.h\n - 3DS, PSP2, Wii: Last directory loaded is saved\n - CMake: Add ability to just print version string\n - Core: New, faster event timing subsystem\n - Core: Clean up some thread state checks\n - Core: Add generic checksum function\n - Core: Cores can now have multiple sets of callbacks\n - Core: Restore sleep callback\n - Core: Move rewind diffing to its own thread\n - Core: Ability to enumerate and modify video and audio channels\n - Core: List memory segments in the core\n - Core: Move savestate creation time to extdata\n - Core: Config values can now be hexadecimal\n - Core: Improved threading interrupted detection\n - Debugger: Modularize CLI debugger\n - Debugger: Make building with debugging aspects optional\n - Debugger: Add functions for read- or write-only watchpoints\n - Debugger: Make attaching a backend idempotent\n - Debugger: Add mDebuggerRunFrame convenience function\n - Feature: Move game database from flatfile to SQLite3\n - Feature: Support ImageMagick 7\n - Feature: Make -l option explicit\n - FFmpeg: Return false if a file fails to open\n - FFmpeg: Force MP4 files to YUV420P\n - GB: Trust ROM header for number of SRAM banks (fixes mgba.io/i/726)\n - GB: Reset with initial state of DIV register\n - GB MBC: New MBC7 implementation\n - GB Audio: Simplify envelope code\n - GB Audio: Improve initial envelope samples\n - GB Audio: Start implementing \"zombie\" audio (fixes mgba.io/i/389)\n - GB Video: Improved video timings\n - GBA: Ignore invalid opcodes used by the Wii U VC emulator\n - GBA, GB: ROM is now unloaded if a patch is applied\n - GBA DMA: Refactor DMA out of memory.c\n - GBA DMA: Move DMAs to using absolute timing\n - GBA I/O: Clear JOYSTAT RECV flag when reading JOY_RECV registers\n - GBA I/O: Set JOYSTAT TRANS flag when writing JOY_TRANS registers\n - GBA Memory: Support for Mo Jie Qi Bing by Vast Fame (taizou)\n - GBA Memory: Support reading/writing POSTFLG\n - GBA Memory: Remove unused prefetch cruft\n - GBA Timer: Improve accuracy of timers\n - GBA Video: Clean up unused timers\n - GBA Video: Allow multiple handles into the same tile cache\n - GBA Video, GB Video: Colors are now fully scaled\n - GBA Video: Optimize when BLD* registers are written frequently\n - OpenGL: Add xBR-lv2 shader\n - Qt: Move last directory setting from qt.ini to config.ini\n - Qt: Improved HiDPI support\n - Qt: Expose configuration directory\n - Qt: Merge \"Save\" and \"OK\" buttons in shader options\n - Qt: Automatically load controller profile when plugged in\n - Qt: Rename \"Resample video\" option to \"Bilinear filtering\"\n - Qt: Remove audio thread\n - Qt: Remove audio buffer sizing in AudioProcessorQt\n - Qt: Re-enable QtMultimedia on Windows\n - Qt: Make \"Mute\" able to be bound to a key\n - Qt: Add .gb/.gbc files to the extension list in Info.plist\n - Qt: Relax hard dependency on OpenGL\n - Qt: Better highlight active key in control binding\n - SDL: Remove scancode key input\n - SDL: Automatically map controllers when plugged in\n - Test: Add a basic test suite\n - Util: Add size counting to Table\n - Util: Add 8-bit PNG write support\n - Util: Tune patch-fast extent sizes\n - VFS: Call msync when syncing mapped data\n - VFS: Allow truncating memory chunk VFiles\n - VFS: Fix some minor VFile issues with FILEs\n - VFS: Optimize expanding in-memory files\n - VFS: Add VFileFIFO for operating on circle buffers\nChanges from beta 1:\nFeatures:\n - Qt: Italian translation (by theheroGAC)\n - Qt: Updated German translation\nBugfixes:\n - GB Audio: Fix incorrect channel 4 iteration\n - GB Audio: Fix zombie mode bit masking\n - GB Serialize: Fix timer serialization\n - GB Video: Fix LYC regression\n - GBA SIO: Improve SIO Normal dummy driver (fixes mgba.io/i/520)\n - GBA Timer: Fix count-up timing overflowing timer 3\n - PSP2: Use custom localtime_r since newlib version is broken (fixes mgba.io/i/560)\n - Qt: Fix memory search close button (fixes mgba.io/i/769)\n - Qt: Fix window icon being stretched\n - Qt: Fix initial window size (fixes mgba.io/i/766)\n - Qt: Fix data directory path\n - Qt: Fix controls not saving on non-SDL builds\n - Qt: Fix translation initialization (fixes mgba.io/i/776)\n - Qt: Fix patch loading while a game is running\n - Qt: Fix shader selector on Ubuntu (fixes mgba.io/i/767)\n - Core: Fix rewinding getting out of sync (fixes mgba.io/i/791)\n - Qt: Fix GL-less build\n - Qt: Fix Software renderer not handling alpha bits properly\n - Qt: Fix screen background improperly stretching\n - SDL: Fix cheats not loading\nMisc:\n - GB Serialize: Add MBC state serialization\n - GBA Memory: Call crash callbacks regardless of if hard crash is enabled\n - GBA Timer: Improve accuracy of timers\n - PSP2: Update toolchain to use vita.cmake\n - Qt: Add language selector\n - Qt: Minor test fixes\n - Qt: Move shader settings into main settings window\n - Qt: Dismiss game crashing/failing dialogs when a new game loads\n - Qt: Properly ship Qt translations\n - SDL: Remove writing back obtained samples (fixes mgba.io/i/768)\n\n0.6 beta 1: (2017-06-29)\n - Initial beta for 0.6\n\n0.5.2: (2016-12-31)\nBugfixes:\n - All: Fix fullscreen config option being ignored\n - ARM7: PSR mode bits should not get sign extended\n - GB: Fix audio not being deinitialized\n - GB: Fix crash when masking savedata\n - GB: Properly initialize sramRealVf variable\n - GB Audio: Fix serialization of channel 3 and NR52 properties\n - GB Audio: Reset envelope timer when reseting sound channel\n - GB MBC: Fix SRAM dangling pointer with RTC games\n - GB MBC: Fix initializing MBC when no ROM is loaded\n - GB Memory: Fix patching ROM bank 0\n - GB Memory: Fix starting HDMAs during mode 0\n - GB Memory: Fix HDMA5 value after DMA completes\n - GB Video: Initialize LCDC in renderer\n - GB Video: Hblank IRQs should mask LYC=LY IRQs\n - GBA: Fix IRQs firing after already being cleared\n - GBA: Only unhalt CPU if appropriate bit is set in IE\n - GBA: Add savegame override for Crash Bandicoot 2\n - GBA BIOS: Fix MidiKey2Freq BIOS reads\n - GBA BIOS: Fix invalid CpuSet not setting BIOS prefetch\n - GBA Cheats: Fix GameShark ROM patches\n - GBA I/O: Mask off WAITCNT bits that cannot be written\n - GBA Memory: Fix misaligned BIOS reads\n - GBA Memory: Fix VCOUNT being writable\n - GBA Video: Fix out of bounds sprite transforms\n - Libretro: Fix unterminated SET_INPUT_DESCRIPTORS\n - Libretro: Fix disabling BIOS\n - Libretro: Fix Game Boy savestates and audio\n - Qt: Fix changing resolution of software renderer\n - Qt: Fix setting overrides\n - Qt: Fix cut off tiles and alignment issues in tile viewer\n - Qt: Only reset window dimensions when first shown\n - Qt: Fix Qt Multimedia audio driver on big endian\n - Qt: Fix Apply button for key and controller configurations\n - VFS: Fix resizing memory chunks when not needed\n - Windows: Fix Unicode directory handling\nMisc:\n - GB, GBA: Prevent loading null ROMs\n - GB Audio: Initialize wave RAM to GBC values\n - GB Memory: Reset ROM bank when loading a ROM\n - PSP2: Improved controller rumble\n\n0.5.1: (2016-10-05)\nBugfixes:\n - Core: Fix importing save games as read-only\n - FFmpeg: Fix encoding AAC\n - GB: Fix invalid STOP behavior on Game Boy Color\n - GB: Initialize audio properly\n - GB: Properly clear KEY1 bit 0 when switching speeds\n - GB: Properly unload save files when unloading a ROM\n - GB, GBA: Fix emulator hardlocking when halting with IRQs off\n - GB MBC: Fix MBC7 when size is incorrectly specified\n - GB MBC: Fix RTC access when no save file is loaded\n - GB SIO: Don't auto-clock external shift clock\n - GB Video: Setting LYC=LY during mode 2 should trigger an IRQ\n - GB Video: Fix video frames getting missed when LCDC is off\n - GB Video: Clear screen when LCDC is off\n - GBA Cheats: Fix holding onto pointers that may get invalidated\n - GBA Cheats: Fix key-activated CodeBreaker cheats\n - GBA Cheats: Fix uninitialized memory getting freed when saving\n - GBA Hardware: Improve Game Boy Player rumble behavior\n - GBA Memory: Fix several unused I/O register read values\n - GBA Savedata: Fix loading savestates with 512Mb Flash saves\n - LR35902: Fix events running with the wrong cycle active\n - Qt: Fix \"close\" button on Overrides view\n - Qt: Fix saving overrides\n - Qt: Fix directory set unloading when replacing the ROM\n - Qt: Fix patch loading\n - Qt: Fix crash when saving an override if a game isn't loaded\n - Qt: Fix showing default display driver as OpenGL (force 1.x)\n - SDL: Attach rumble in SDL frontend\n - Util: Fix PNG identification on files too small to be a PNG\nMisc:\n - All: Only update version info if needed\n - All: Split out install locations for Libretro and OpenEmu\n - FFmpeg: Encoding cleanup\n - GB: Reset active region when reloading ROM\n - GB Memory: Initialize RAM pattern for GBC\n - GB Video: Improved video timings\n - Qt: Manage window sizes slightly better\n - Qt: Remember scale option independent of core dimensions\n\n0.5.0: (2016-09-19)\nFeatures:\n - Game Boy support\n - Support for encrypted CodeBreaker GBA cheats\n - Emulation of Vast Fame protected GBA carts (taizou)\n - Tile viewer\n - Threaded rendering mode\n - Libretro: Memory map and achievement support (leiradel)\n - GUI: Add UI control remapping\n - GUI: Add fast-forward\n - Wii: 240p support\n - 3DS: Adjustable screen darkening\n - Ability to temporarily load a savegame\n - Load specific files out of archives\n - Automatic BIOS detection\nBugfixes:\n - ARM7: Fix decoding of Thumb ADD (variants 5 and 6)\n - Debugger: Fix GDB breakpoints\n - GBA: Fix losing IRQs when CPSR I bit isn't cleared\n - GBA: Fix filehandle leak with savegames\n - GBA: Timer 0 cannot be count up\n - GBA: Count up timers should not count themselves\n - GBA Memory: Fix mirror on non-overdumped Classic NES games\n - GBA Memory: Fix ldm {pc}\n - GBA Savedata: Fix savedata sync timer\n - GBA Savedata: Only unmap savedata if present\n - GBA Serialize: Savestates now properly store prefetch\n - GBA Video: WIN0/1 take priority over OBJWIN\n - GBA Video: Fix out-of-order OBJWIN\n - PSP2: Fix GPU crash while exiting\n - PSP2: Fix VSync\n - PSP2: Fix accelerometer range\n - PSP2: Actually load screen mode setting\n - PSP2: Fix gyroscope direction\n - PSP2: Delete threads after they return\n - PSP2: Fix mapping/unmapping from not at 0\n - Qt: Fix bug in software renderer scaling\n - Qt: Fix hanging key press after disabling autofire\n - Qt: Fix being unable to pause manually when using auto-pausing\n - SDL: Fix axes being mapped wrong\n - Util: Fix realloc semantics in utf16to8\n - Util: Fix inserting too many items into a hash table\n - VFS: Fix uninitialized varaible reading from 7z\n - VFS: Fix reading multiple files from a 7z archive\n - Wii: Fix framelimiting after a slowdown\n - Wii: Fix garbage flash at startup\nMisc:\n - 3DS: Use blip_add_delta_fast for a small speed improvement\n - 3DS: Allow UTF-16 filenames\n - 3DS: Port to using citro3D\n - 3DS: Use system font for menus\n - 3DS: Attempt to use Core 2 for threads\n - 3DS: Adjustable filering\n - 3DS: 3D banner\n - All: Add QUIET parameter to silence CMake\n - All: Faster memory read/write\n - ARM7: Support forcing Thumb mode via MSR\n - ARM7: Flush prefetch cache when loading CPSR via MSR\n - ARM7: Clean up instruction decoding for future expandability\n - Debugger: Support register and memory writes via GDB stub\n - Debugger: Add software breakpoint support to gdb\n - FFmpeg: Full support for libavcodec 56+\n - GBA: Better debug logging if event processing breaks\n - GBA Audio: Force audio DMAs to not increment destination\n - GBA BIOS: Use custom ArcTan, not relying on OS\n - GBA Hardware: Clean up dead code in GBP\n - GBA Memory: Optimize stalling behavior\n - GBA Memory: Optimize Load-/StoreMultiple\n - GBA Savedata: Add realistic timing for EEPROM\n - GBA Serialize: Savestates now store if CPU was halted\n - GBA Video: Remove old slow path fallback\n - GBA Video: Optimize sprite drawing\n - GBA Video: Optimize mode 0 rendering\n - GBA Video: Optimize compositing cases slightly\n - GUI: Screenshot dimensions are now passed through\n - GUI: Add back logging\n - GUI: Only reload config if manually saved\n - GUI: Increase scrolling speed\n - OpenGL: Log shader compilation failure\n - OpenGL: Add texSize uniform\n - Qt: Make -g flag work in Qt build\n - Qt: Simplify OpenGL context creation\n - Qt: Thread startup improvements\n - Qt: Make audio channel/video layer options shortcut mappable\n - Qt: Remove some C99isms from C++ code\n - Qt: Remove default autofire mappings\n - Qt: Make reseting when pasued frame-accurate\n - Qt: Rearchitect game closing codepath\n - PSP2: Use system font for menus\n - PSP2: Add rumble for PS TV\n - PSP2: Add fit-to-height screen mode\n - PSP2: Sync files per descriptor\n - PSP2: Allow UTF-8 filenames\n - PSP2: Screenshots are now saved into the Photo Gallery\n - PSP2: Stop underclocking when menuing\n - SDL: Increase default audio buffer size to 1024 samples\n - SDL: More responsive rumble\n - Util: Add Vector GetConstPointer\n - Util: Add rtrim\n - Util: Add endswith\n - VFS: Improve zip file detection\n - Wii: Add pixelated resample filter\n - Windows: Add native VDir support\n - Util: Add PRIz macro for libc versions that don't support %z\n\n0.4.1: (2016-07-11)\nBugfixes:\n - All: Fix several file handle leaks\n - All: Fix instruction tables getting zeroed when linking sometimes\n - ARM7: Fix flags on SBC/RSC\n - ARM7: Fix setting spsr privilege bits when spsr is empty\n - GBA Audio: Reset audio FIFO DMA if an invalid destination is set\n - GBA BIOS: Fix RegisterRamReset setting DISPCNT to the wrong value\n - GBA BIOS: Fix ArcTan2 accuracy and boundary conditions\n - GBA Memory: Fix executing code from OBJ region of VRAM\n - GBA Serialize: Fix memory corruption bug in GBAExtdataSerialize\n - GBA Serialize: Fix loading savegames from savestates\n - OpenGL: Correct boolean vector strcmp strings for uniforms\n - Qt: Fix sending gameStopped twice\n - Qt: Fix hang if audio sync is enabled and audio fails to initialize\n - Qt: Fix initial state of key mapping\n - Qt: Initialize m_useBios\n - SDL: Fix joystick initialization on BSD\n - SDL: Fix potential joystick crash in games with rumble\n - SDL: Fix SDL 1.2 build\n - SDL: Fix sporadic crash when deinitializing audio\n - Shaders: Fix AGS-001 shader with some bad drivers\n - Util: Use closesocket on Windows\n - Util: Fix socket bind addresses\n - VFS: Fix reading 7z archives without rewinding first\n - VFS: VFileFromFD should not open directories\n - Wii: Fix tilting direction\n - Util: Fix realloc semantics in utf16to8\nMisc:\n - All: Allow use of external minizip library\n - Debugger: CLI debugger now exits when end-of-stream is reached\n - FFmpeg: Update dependencies on Ubuntu\n - GBA: Slightly optimize GBAProcessEvents\n - GBA: Add overrides for DBZ: Legacy of Goku II and Ueki no Housoku\n - GBA Video: Null renderer should return proper register values\n - Libretro: Disable logging game errors, BIOS calls and stubs in release builds\n - Qt: Add preset for DualShock 4\n - Qt: Update 360 input profile on OS X to reflect newer drivers\n - Qt: Remove use of NaN\n - Qt: Canonicalize file paths when loading games\n - Qt: Add refresh button to controller editing\n - SDL: Remove default gamepad mappings\n - Util: Fix intermittent build failure on OS X\n - VFS: VFile.sync now updates modified time\n\n0.4.0: (2016-02-02)\nFeatures:\n - Officially supported ports for the Nintendo 3DS, Wii, and PlayStation Vita\n - I/O viewer\n - Booting of multiboot images\n - Customization of GIF recording\n - Libretro: Cheat code support\n - Support for GLSL shaders\n - ROM information view\n - Support for VBA-style cheat codes\n - Savestates now store creation timestamps\n - Key autofire\n - Libretro: Allow blocking opposing directional input\n - OpenEmu core for OS X\n - Libretro: Settings for using BIOS and skipping intro\n - Libretro: Customizable idle loop removal\n - Implemented cycle counting for sprite rendering\n - Cleaner, unified settings window\n - Added a setting for pausing when the emulator is not in focus\n - Customizable paths for save games, save states, screenshots and patches\n - Controller hotplugging\n - Ability to store save games and active cheats within savestates\nBugfixes:\n - ARM7: Fix sign of unaligned LDRSH\n - ARM7: Fix decoding of some ARM ALU instructions with shifters\n - Debugger: Fix watchpoints in gdb\n - GBA: Fix warnings when creating and loading savestates\n - GBA: Fix Iridion II savetype\n - GBA BIOS: Fix misaligned CpuSet\n - GBA Cheats: Fix cheats setting the Action Replay version\n - GBA Hardware: Fix GPIO on big endian\n - GBA Memory: Fix DMA register writing behavior\n - GBA Memory: Fix DMAs triggering two cycles early\n - Libretro: Fix aspect ratio\n - Qt: Fix some potential crashes with the gamepad mapping\n - Qt: Fix keys being mapped incorrectly when loading configuration file\n - Util: Fix PowerPC PNG read/write pixel order\n - Util: Fix excessive memory allocation when decoding a PNG\n - VFS: Fix VFileReadline and remove _vfdReadline\nMisc:\n - All: Improved PowerPC support\n - All: Fix some undefined behavior warnings\n - ARM7: Combine shifter-immediate and shifter-register functions to reduce binary size\n - Debugger: Convert breakpoints and watchpoints from linked-lists to vectors\n - GBA: Implement bad I/O register loading\n - GBA: Allow jumping to OAM and palette RAM\n - GBA BIOS: Finish implementing RegisterRamReset\n - GBA Config: Add \"override\" layer for better one-time configuration\n - GBA Input: Consolidate GBA_KEY_NONE and GBA_NO_MAPPING\n - GBA Memory: Use a dynamically sized mask for ROM memory\n - GBA Memory: Implement several unimplemented memory access types\n - GBA Memory: Add GBAView* functions for viewing memory directly without bus issues\n - GBA RR: Starting from savestate now embeds the savegame\n - GBA RR: Add preliminary SRAM support for VBM loading\n - GBA RR: Add support for resets in movies\n - GBA Video: Remove lastHblank, as it is implied\n - Libretro: Use anonymous memory mappers for large blocks of memory\n - Libretro: Add install target for libretro core\n - Qt: Window size command line options are now supported\n - Qt: Increase usability of key mapper\n - Qt: Add 'Apply' button to settings window\n - Qt: Gray out \"Skip BIOS intro\" while \"Use BIOS file\" is unchecked\n - Qt: Allow use of modifier keys as input\n - Qt: Optimize log viewer\n - Qt: Added button for breaking into the GDB debugger\n - Qt: Add box for showing duration of rewind\n - SDL: Support fullscreen in SDL 1.2\n - SDL: Allow GBASDLAudio to be used without a thread context\n - Util: Use VFile for configuration\n - Util: Add MutexTryLock\n\n0.3.2: (2015-12-16)\nBugfixes:\n - ARM7: Fix STRT/STRBT\n - ARM7: Implement undefined STRH/LDRH/LDRSH/LDRSB versions\n - ARM7: Fix bank switching with LDR[B]T/STR[B]T\n - Libretro: Fix problems with rumble not turning off\n - GBA: Fix idle skip state being retained between games\n - GBA: Initialize uninitialized pristineRom and pristineRomSize members\n - GBA BIOS: Fix CpuSet on 0x01XXXXXX addresses\n - GBA BIOS: Fix Sqrt sign\n - GBA BIOS: Fix misaligned RLUnCompReadNormalWrite*\n - GBA Hardware: Fix Game Boy Player rumble in Pokemon Pinball\n - GBA Memory: Fix DMA behavior for SRAM accesses\n - GBA Memory: Fix Store8 to OBJ VRAM\n - GBA Memory: Fix alignment of LDM/STM on SRAM\n - GBA Memory: Fix unaligned out-of-bounds ROM loads\n - GBA Memory: Fix timing of DMAs\n - GBA Video: Fix _mix for 15-bit color\n - GBA Video: Fix OAM and palette initialization\n - OpenGL: Fix fast-forward on some OpenGL drivers where it may block early\n - Qt: Use safer isLoaded check in GameController\n - Qt: Fix a race condition in PainterGL that could lead to a crash\n - Qt: Fix clear button/analog buttons in gamepad mapper on some platforms\n - Qt: Fix font size in memory viewer\n - Qt: Fix a crash in the memory viewer\n - Qt: Add additional checks in CheatModel to prevent crashes\n - Qt: Fix race condition with setting sample rate\n - Qt: Fix crash when closing multiplayer windows\n - Qt: Fix resetting while paused\nMisc:\n - GBA Audio: Implement missing flags on SOUNDCNT_X register\n - Qt: Add mute option to menu\n\n0.3.1: (2015-10-24)\nBugfixes:\n - ARM7: Fix instruction decoding of Thumb shifts\n - GBA: Deinit savegame when unloading a ROM\n - GBA: Fix BIOS check on big endian\n - GBA: Fix autodetect problems with some bad dumps of Super Mario Advance 2\n - GBA Audio: Fix 8-bit writes to audio channel 3 and 4 registers\n - GBA Audio: Fix audio channels being silenced at the wrong time\n - GBA Memory: Fix bad BIOS Load16 on big endian\n - GBA Memory: Fix bad Load8 on big endian\n - GBA Video: Start on the scanline BIOS finishes on if no BIOS is loaded\n - GBA Video: Fix edge case with sprite blend modes and semitransparency\n - GBA Video: Fix objwin and blending interaction on sprites\n - GBA Video: Fix OBJ semitransparency improperly interacting with other blending ops\n - Libretro: Fix a memory leak with the render buffer\n - Qt: Windows no longer spawn in the top left on first launch\n - Qt: Fix install path of XDG desktop file with DESTDIR\n - Qt: Fix drag and drop on Windows\n - Qt: Reenable double buffering, as disabling it broke some Windows configs\n - VFS: Fix return values of VFileFILE.read and .write\nMisc:\n - All: Reset next event to cycles instead of zero to interrupt\n - All: Add --version flag\n - ARM7: Force disable LTO on two files to work around a GCC bug\n - GBA: Attempting to save a screenshot-style savestate should be allowed without libpng\n - GBA: Better memory handling with PNG savestates\n - GBA: Additional savestate sanity checks\n - GBA: Check for cycle count being too high\n - GBA Audio: Allow GBAAVStream to have no video callback\n - GBA BIOS: Implement RegisterRamReset for SIO registers\n - Qt: Remove useless help icons in dialogs\n - Qt: Prevent savestate window from opening while in multiplayer\n - Qt: Disable menu items in multiplayer that don't make sense to have enabled\n - Qt: Dropping multiplayer windows works more cleanly now\n\n0.3.0: (2015-08-16)\nFeatures:\n - Ability to hide individual background layers, or OBJs\n - Ability to mute individual audio channels\n - Palette viewer and exporter\n - Volume control\n - More shortcuts are editable (e.g. quick save/load)\n - Rewind now shows the frame after rewinding\n - Import/Export of GameShark/Action Replay snapshots\n - Add \"Step backwards\" item for single increment rewind\n - Deadzone estimation for game controllers\n - Analog inputs can be used for shortcuts\n - Menu items for specific solar sensor brightness levels\n - Remappable controls for tilt and gyroscope sensors\n - Status messages for actions taken while a game is running (e.g. save/load state)\n - Memory inspector\n - Screensaver can now be suspended while a game is running\n - Load/save the most recent savestate slot\n - Support varible speed (PWM) rumble\n - Ability to cap fast forward speed\n - Finer control over FPS target\n - Holdable shortcut for rewinding one frame at a time\n - Ability to boot directly into the BIOS\n - Preliminary support for yanking out the game pak while a game is running\n - Thumb-drive mode by putting a file called portable.ini in the same folder\n - Configurable display driver, between software and OpenGL\n - Undo-able savestate loading and saving\n - Controller profiles now store shortcut settings\n - Default controller profiles for several common controllers\n - Libretro now supports BIOS, rumble and solar sensor\n - Implement BIOS call Stop, for sleep mode\n - Automatically load patches, if found\n - Improved video synchronization\n - Configurable audio output sample rate\nBugfixes:\n - ARM7: Fix SWI and IRQ timings\n - ARM7: Fix Thumb MUL timing\n - ARM7: Fix timing of multiplies to use N cycles\n - ARM7: ARMHotplugDetach should call deinit\n - Debugger: Fix use-after-free in breakpoint clearing code\n - GBA: Fix crash if a 512kb flash save is loaded when a game has a 1Mb flash override\n - GBA: Cap audio FIFO read size during deserialization\n - GBA: Check for corrupted savestates when loading\n - GBA: Check for improperly sized savestates when loading\n - GBA: Check for savestates made from differently sized ROMs\n - GBA: Fix calls to endian-independent loadstores\n - GBA: Fix timing of reading from timer registers\n - GBA: Ensure cycles never go negative\n - GBA Audio: Force audio FIFOs to 32-bit\n - GBA Audio: Fix audio pitch changing when adjusting buffer size\n - GBA Audio: Fix sample order in audio channel 3\n - GBA Audio: Fix 8-bit writes to audio channel 3 frequency\n - GBA Cheats: Fix Pro Action Replay and GameShark issues when used together\n - GBA Memory: Improve Thumb open bus behavior\n - GBA Memory: Fix potential DMA issue when loading a savestate\n - GBA Memory: Fix load/store multiple video memory waitstates\n - GBA SIO: Fix reseting when there are SIO devices attached\n - GBA Video: Blended sprites should never have other effects applied\n - GBA Video: Fix out-of-bounds tiles in mosaic\n - GBA Video: Fix windows not affecting sprites\n - GBA Video: Prevent tiles < 512 from being used in modes 3 - 5\n - GBA Video: Fix timing on first scanline\n - Qt: Better cleanup when a game crashes\n - Qt: Fix open ROM dialog filtering for archive formats\n - Qt: Cap the maximum number of multiplayer windows\n - Qt: Fix maximum year in sensor override\n - Qt: Fix window being too tall after exiting fullscreen\n - Qt: Fix a missing va_end call in the log handler lambda within the GameController constructor\n - Qt: Fix analog buttons not getting unmapped\n - Qt: Fix passing command line options\n - Qt: Fix crashes on Windows by using using QMetaObject to do cross-thread calls\n - SDL: Fix SDL build when OpenGL is missing\n - Util: Allow loading IPS patches that grow the ROM\n - VFS: Fix resource leaks if some allocations fail\n - VFS: Fix line-reading to return proper values\n - Video: Fix an issue with very long filenames\n - Util: Fix formatting of floats\nMisc:\n - All: Add --help flag for command line programs\n - All: Fix sanitize-deb script to set file permissions properly if run as (fake)root\n - All: Enable static linking for Windows\n - All: Enable static linking for OS X\n - All: Threads are now named\n - All: Proper handling of Unicode file paths\n - ARM7: Add emulation for Undefined CPU mode\n - ARM7: Reduce the size of the Thumb instruction table\n - GBA: Add status log level\n - GBA: GBARewind now returns how many states it has rewound\n - GBA: SIO logging layer\n - GBA BIOS: Stub out SoundBias\n - GBA: More accurate cycle estimation for ROM prefetch and flash save chips\n - GBA: Don't include GBACLIDebugger struct unless needed\n - GBA: Savedata is now synced shortly after data finishes being written\n - GBA: Process multiple timer events at once, if necessary\n - GBA Audio: Implement audio reset for channels A/B\n - GBA Audio: Process multiple audio events at once, if necessary\n - GBA Hardware: Backport generic RTC source into core\n - GBA Input: Allow axes and buttons to be mapped to the same key\n - GBA Memory: Run multiple DMAs in a tight loop if they all occur before present\n - GBA SIO: Add a dummy driver for Normal mode\n - GBA Thread: Add functionality for running callbacks on the GBA thread\n - GBA Thread: Split GBASync into a separate file\n - GBA Video: Refactor software renderer into separate files\n - GBA Video: Slightly optimize mode 0 mosaic rendering\n - Debugger: Free watchpoints in addition to breakpoints\n - Qt: Handle saving input settings better\n - Qt: Move GL frame drawing back onto its own thread\n - Qt: Fast forward (held) option moved from Other to Emulation menu\n - Qt: Show version info in window title\n - Qt: Migrate multiplayer window handling into GBAApp\n - Qt: Unified file opening and saving with last location\n - Qt: Fix windows being resizable when they shouldn't have been\n - Qt: Only hide cursor in full screen\n - Qt: Replace pause-after-frame mutex with an atomic\n - Qt: Add application icon and XDG desktop files\n - Qt: Rename \"Fullscreen\" to \"Toggle fullscreen\"\n - Qt: Don't save window size when entering fullscreen\n - Qt: Make the default fullscreen binding for Windows be Alt-Enter\n - Qt: Gamepads can now have both buttons and analog axes mapped to the same key\n - Qt: Increase usability of key mapper\n - Qt: Show checkmark for window sizes\n - Qt: Set window path to loaded ROM\n - Perf: Ability to load savestates immediately on launch\n - SDL: Properly check for initialization\n - SDL: Clean up initialization functions\n - SDL: Clean up GL context\n - Util: Allow disabling the threading code entirely\n - VFS: Add sync method to force syncing with backing\n\n0.2.1: (2015-05-13)\nBugfixes:\n - All: Fix sanitize-deb script not cleaning up after itself\n - All: Fix dependencies for libavcodec on Debian-derived platforms\n - ARM7: Handle writeback for PC in addressing modes 2 and 3\n - ARM7: Make illegal instruction decoding consistent between ARM and Thumb\n - ARM7: Fix ARM multiply instructions when PC is a destination register\n - Debugger: Fix use-after-free in breakpoint clearing code\n - Debugger: Fix boundary conditions in tab completion\n - GBA: Fix timers not updating timing when writing to only the reload register\n - GBA: Fix rewind boundary conditions\n - GBA: Add initial I/O register settings for background matrix registers\n - GBA: Fix hang when loading a savestate if sync to video is enabled\n - GBA: Handle out-of-bounds I/O access\n - GBA: Fix bounds-checking on EEPROM access\n - GBA Audio: FIFOs should not poll DMAs that are not scheduled for audio\n - GBA BIOS: Initialize a variable that may be uninitialized in very rare cases\n - GBA Memory: Allow SRAM to be 64kB\n - GBA Memory: Fix 32-bit loads from unaddress cartridge space\n - GBA Memory: Fix jumping to invalid memory when switching from Thumb to ARM\n - GBA Video: Fix second frame mode 5\n - Perf: Fix race condition if a game crashes immediately on start\n - Qt: Fix Display object leak when closing a window\n - Qt: Fix .deb dependencies\n - Qt: Fix \"QOpenGLContext::swapBuffers() called with non-exposed window\" warning\n - Qt: Fix window not regaining focus after exiting savestate window\n - Qt: Fix regression where video would not record if the game had already started\n - Qt: Fix potential crash if a gamepad causes focus to change\n - Qt: Fix controller axis querying\n - Qt: Fix multiplayer windows opening as the wrong size\n - Qt: Fix controllers sometimes not loading the right profile\n - SDL: Fix boundary conditions for joystick adjustments\n - SDL: Allocate properly sized input maps\n - SDL: Fix potential build issues when Qt and SDL2 are in use\n - Util: Fix resource leak in UTF-8 handling code\n - Util: Fix a null-pointer issue when attempting to delete a key\n - VFS: Fix resource leaks if some allocations fail\n - Video: Fix an issue with very long filenames\nMisc:\n - GBA Memory: Soft-crash if jumping past the end of a ROM\n - Qt: Show multiplayer numbers in window title\n - Qt: Solar sensor can have shortcuts set\n\n0.2.0: (2015-04-03)\nFeatures:\n - Support for gamepad axes, e.g. analog sticks or triggers\n - Add scale presets for up to 6x\n - Settings window\n - Bilinear resampling option\n - Add option to skip BIOS start screen\n - List of recently opened games\n - Support for games using the Solar Sensor\n - Better audio resampling via blip-buf\n - Game Pak overrides dialog for setting savetype and sensor values\n - Support for games using the tilt sensor\n - Remappable shortcuts for keyboard and gamepad\n - Rewinding of emulation\n - Implemented BIOS routines SoftReset, RegisterRamReset, Diff8bitUnFilterWram, Diff8bitUnFilterVram, and Diff16bitUnFilter\n - Support IPv6\n - Save directory of last loaded file\n - Support BPS patches\n - Automatically detect and optimize out idle loops\n - Configurable game overrides\n - Support loading 7-Zip files\n - Drag and drop game loading\n - Cheat code support\n - Runtime configurable audio driver\n - Libretro core for use with RetroArch and other front-ends\n - Controller profiles for setting different bindings for different controllers\n - Ability to lock aspect ratio\n - Local link cable support\n - Ability to switch which game controller is in use per instance\n - Ability to prevent opposing directional input\n - Warning dialog if an unimplemented BIOS feature is called\n - Debugger: Add CLI \"frame\", frame advance command\n - Debugger: Add CLI functions for writing to memory\n - Debugger: Add CLI functions for examining memory regions\n - Debugger: Add CLI function for writing a register\nBugfixes:\n - ARM7: Extend prefetch by one stage\n - ARM7: Fix cycle counting for loads\n - Debugger: Disassembly now lists PSR bitmasks (fixes #191)\n - GBA: Fix savestate loading of DISPSTAT and WAITCNT registers\n - GBA: Initialize gba.sync to null\n - GBA: Fix timer initialization\n - GBA Audio: Support 16-bit writes to FIFO audio\n - GBA Audio: Audio buffer sizes are now correct sizes for both sample rates\n - GBA BIOS: Fix BIOS prefetch after returning from an IRQ\n - GBA BIOS: Fix BIOS prefetch after reset\n - GBA BIOS: Prevent CpuSet and CpuFastSet from using BIOS addresses as a source (fixes #184)\n - GBA BIOS: Fix BIOS decompression routines with invalid source addresses\n - GBA Memory: Fix alignment of open bus 8- and 16-bit loads\n - GBA Memory: Fix I cycles that had been moved to ARM7 core\n - GBA Memory: Fix cycle counting for 32-bit load/stores\n - GBA RR: Fix fallthrough error when reading tags from a movie\n - GBA Thread: Fix possible hang when loading an archive\n - GBA Thread: Fix possible deadlock in video sync\n - Perf: Fix crash when the GBA thread fails to start\n - Qt: Fix crash starting a GDB stub if a game isn't loaded\n - Qt: Fix crash when adjusting settings after closing a game\n - Qt: Fix crash when starting GDB stub after closing a game\n - Qt: Fix patch loading while a game is running\n - Qt: Fix crash when loading a game after stopping GDB server\n - Qt: Pause game while open file dialogs are open (fixes #6 on GitHub)\n - Qt: Fix crash when attempting to pause if a game is not running\n - SDL: Properly clean up if a game doesn't launch\n - Util: Fix sockets on Windows\nMisc:\n - All: Enable link-time optimization\n - Debugger: Watchpoints now work on STM/LDM instructions\n - Debugger: Clean up GDB stub network interfacing\n - Debugger: Simplify debugger state machine to play nicer with the GBA thread loop\n - Debugger: Merge Thumb BL instructions when disassembling\n - Debugger: Clean up debugger interface, removing obsolete state (fixes #67)\n - Debugger: Watchpoints now report address watched (fixes #68)\n - Debugger: Add support for soft breakpoints\n - Debugger: Make I/O register names be addresses instead of values\n - Debugger: Rename read/write commands\n - GBA: Improve accuracy of event timing\n - GBA: Add API for getting Configuration structs for overrides and input\n - GBA: Refactor gba-sensors and gba-gpio into gba-hardware\n - GBA: Refactor gba directory, dropping gba- prefix and making supervisor directory\n - GBA: Move A/V stream interface into core\n - GBA: Savestates now take into account savedata state machines (fixes #109)\n - GBA Audio: Change internal audio sample buffer from 32-bit to 16-bit samples\n - GBA Memory: Simplify memory API and use fixed bus width\n - GBA Thread: Make GBASyncWaitFrameStart time out\n - GBA Video: Start video at the last scanline instead of the first\n - Qt: Optimize logo drawing\n - Qt: Move frame upload back onto main thread\n - Qt: Remember window position\n - Qt: Double-clicking on the window toggles full screen\n - Util: Use proper locale for reading and writing float values\n\n0.1.1: (2015-01-24)\nBugfixes:\n - ARM7: Fix LDM writeback to a register already written\n - GBA: Fix timers 2 and 3 updating incorrectly\n - GBA Audio: Make larger buffer sizes than 2048 actually work properly\n - GBA Audio: Fix GB audio channels being too quiet (fixes #159)\n - GBA Audio: Properly initialize audio FIFO channels\n - GBA BIOS: Fix HLE Lz77 and RL functions to properly account for width and invalid addresses\n - GBA BIOS: Fix BIOS prefetch after returning from a SWI\n - GBA BIOS: Fix LZ77UnCompVram to use 16-bit loads from decompressed memory\n - GBA BIOS: Fix HuffUnComp to work when games pass an invalid bit length\n - GBA BIOS: Fix GetBiosChecksum to return the value of a real GBA, regardless of used BIOS\n - GBA BIOS: Fix HuffUnComp boundary conditions\n - GBA Memory: Don't call into GPIO write calls if GPIO devices are absent\n - GBA Memory: Properly initialize 1 Mb flash, and add debug logging\n - GBA Memory: Filter out top nybble of DMA addresses\n - GBA Memory: Properly bounds-check VRAM accesses\n - GBA Memory: Fix initial DMA state\n - GBA Thread: Allow halted games to exit cleanly\n - GBA Video: Fix blend issues with obscured middle layers\n - GBA Video: Fix windows not disabling target 1 appropriately (fixes #161)\n - GBA Video: Fix sprite mis-ordering behavior in some cases (fixes #168)\n - GBA Video: Fix window interactions with 16-color mode 0 mosaic\n - GBA Video: Fix sprite boundary conditions with mosaic\n - GBA Video: Fix mode 0 being able to read tiles above appropriate tile range\n - Qt: Fix issue with set frame sizes being the wrong height\n - Qt: Fix emulator crashing when full screen if a game is not running\n - Qt: Fix window focus issues\n - Qt: Properly set default video recording settings\n - Qt: Fix a race condition when a game crashes immediately\n - Qt: Fix some cases where key mapping can break if focus is adjusted\n - Qt: Fix crash if a game pauses before any frames are shown\n - Debugger: Negative PC-relative loads now properly subtract the offset\n - Debugger: Align PC-relative loads in Thumb\n - Debugger: Fix watchpoints triggering too late\n - Debugger: Fix binary print putting spaces between digits\n - Video: Ensure FFmpeg encoder has audio frames\n - Video: Fix uncompressed PCM audio recording\n - Video: Fix FFmpeg crashing when the file extension is wrong\n - Util: Fix SOCKET_FAILED macro\nMisc:\n - GBA: Exit cleanly on FATAL if the port supports it\n - GBA Memory: Implement 16- and 32-bit loads from SRAM\n - Qt: Disable sync to video by default\n - Qt: Handle a game crash without crashing\n - Qt: Set default log level to FATAL, ERROR and WARN\n - Qt: Clarify some phrasing in the menus\n - Qt: Clear active buttons when focus is lost\n\n0.1.0: (2014-12-13)\n - Initial release\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 52.6865234375,
          "content": "cmake_minimum_required(VERSION 3.3)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/src/platform/cmake/\")\n\nif(POLICY CMP0025)\n\tcmake_policy(SET CMP0025 NEW)\nendif()\nif(POLICY CMP0072)\n\tcmake_policy(SET CMP0072 NEW)\n\tset(OpenGL_GL_PREFERENCE LEGACY)\nendif()\n\nproject(mGBA)\n\nif(NOT DEFINED LIBMGBA_ONLY)\n\tget_directory_property(LIBMGBA_ONLY EXCLUDE_FROM_ALL)\nendif()\n\nif(NOT DEFINED BINARY_NAME)\n\tset(BINARY_NAME mgba)\nendif()\nif(NOT LIBMGBA_ONLY)\n\tset(BINARY_NAME ${BINARY_NAME} CACHE INTERNAL \"Name of output binaries\")\nendif()\n\nset(CMAKE_C_STANDARD 11)\nif(NOT MSVC)\n\tset(CMAKE_C_STANDARD_REQUIRED ON)\n\tset(CMAKE_C_EXTENSIONS OFF)\n\tif(SWITCH OR 3DS OR (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"4.3\"))\n\t\tset(CMAKE_C_EXTENSIONS ON)\n\tendif()\n\tset(WARNING_FLAGS \"-Wall -Wextra -Wno-missing-field-initializers\")\n\tif(WIN32)\n\t\t# mingw32 likes to complain about using the \"wrong\" format strings despite them actually working\n\t\tset(WARNING_FLAGS \"${WARNING_FLAGS} -Wno-format\")\n\tendif()\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${WARNING_FLAGS} -Werror=implicit-function-declaration -Werror=implicit-int -fwrapv\")\n\tif(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n\t\t# TODO: Remove this once mScript KV pairs support const correctness\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Werror=incompatible-pointer-types\")\n\tendif()\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} -Woverloaded-virtual -Werror=reorder\")\nelse()\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_WARNINGS /wd4003 /wd4244 /wd4146 /wd4267 /Zc:preprocessor-\")\n\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_WARNINGS /wd4003 /wd4244 /wd4146 /wd4267 /Zc:preprocessor-\")\nendif()\n\nif(NOT LIBMGBA_ONLY)\n\tset(ENABLE_DEBUGGERS ON CACHE BOOL \"Whether or not to enable the debugging infrastructure\")\n\tif (NOT WIN32)\n\t\tset(USE_EDITLINE ON CACHE BOOL \"Whether or not to enable the CLI-mode debugger\")\n\tendif()\n\tset(ENABLE_GDB_STUB ON CACHE BOOL \"Whether or not to enable the GDB stub ARM debugger\")\n\tset(USE_FFMPEG ON CACHE BOOL \"Whether or not to enable FFmpeg support\")\n\tset(USE_ZLIB ON CACHE BOOL \"Whether or not to enable zlib support\")\n\tset(USE_MINIZIP ON CACHE BOOL \"Whether or not to enable external minizip support\")\n\tset(USE_PNG ON CACHE BOOL \"Whether or not to enable PNG support\")\n\tset(USE_LIBZIP ON CACHE BOOL \"Whether or not to enable LIBZIP support\")\n\tset(USE_SQLITE3 ON CACHE BOOL \"Whether or not to enable SQLite3 support\")\n\tset(USE_ELF ON CACHE BOOL \"Whether or not to enable ELF support\")\n\tset(USE_LUA ON CACHE BOOL \"Whether or not to enable Lua scripting support\")\n\tset(USE_JSON_C ON CACHE BOOL \"Whether or not to enable JSON-C support\")\n\tset(M_CORE_GBA ON CACHE BOOL \"Build Game Boy Advance core\")\n\tset(M_CORE_GB ON CACHE BOOL \"Build Game Boy core\")\n\tset(USE_LZMA ON CACHE BOOL \"Whether or not to enable 7-Zip support\")\n\tset(USE_DISCORD_RPC ON CACHE BOOL \"Whether or not to enable Discord RPC support\")\n\tset(ENABLE_SCRIPTING ON CACHE BOOL \"Whether or not to enable scripting support\")\n\tset(BUILD_QT ON CACHE BOOL \"Build Qt frontend\")\n\tset(BUILD_SDL ON CACHE BOOL \"Build SDL frontend\")\n\tset(BUILD_LIBRETRO OFF CACHE BOOL \"Build libretro core\")\n\tset(BUILD_PERF OFF CACHE BOOL \"Build performance profiling tool\")\n\tset(BUILD_TEST OFF CACHE BOOL \"Build testing harness\")\n\tset(BUILD_SUITE OFF CACHE BOOL \"Build test suite\")\n\tset(BUILD_CINEMA OFF CACHE BOOL \"Build video tests suite\")\n\tset(BUILD_HEADLESS OFF CACHE BOOL \"Build headless tool\")\n\tset(BUILD_EXAMPLE OFF CACHE BOOL \"Build example frontends\")\n\tset(BUILD_PYTHON OFF CACHE BOOL \"Build Python bindings\")\n\tset(BUILD_STATIC OFF CACHE BOOL \"Build a static library\")\n\tset(BUILD_SHARED ON CACHE BOOL \"Build a shared library\")\n\tset(SKIP_LIBRARY OFF CACHE BOOL \"Skip building the library (useful for only building libretro core)\")\n\tset(BUILD_GL ON CACHE BOOL \"Build with OpenGL\")\n\tset(BUILD_GLES2 ON CACHE BOOL \"Build with OpenGL|ES 2\")\n\tset(BUILD_GLES3 ON CACHE BOOL \"Build with OpenGL|ES 3\")\n\tset(BUILD_DOCGEN OFF CACHE BOOL \"Build the scripting API documentation generator\")\n\tset(BUILD_MAINTAINER_TOOLS OFF CACHE BOOL \"Build tools only useful for maintainers\")\n\tset(USE_EPOXY ON CACHE STRING \"Build with libepoxy\")\n\tset(DISABLE_DEPS OFF CACHE BOOL \"Build without dependencies\")\n\tset(DISTBUILD OFF CACHE BOOL \"Build distribution packages\")\n\tif(WIN32)\n\t\tset(WIN32_UNIX_PATHS OFF CACHE BOOL \"Use Unix-like paths\")\n\t\tmark_as_advanced(WIN32_UNIX_PATHS)\n\tendif()\n\tmark_as_advanced(BUILD_DOCGEN)\n\tmark_as_advanced(BUILD_MAINTAINER_TOOLS)\nelse()\n\tset(DISABLE_FRONTENDS ON)\n\tset(DISABLE_DEPS ON)\n\tset(BUILD_STATIC ON)\n\tset(BUILD_SHARED OFF)\n\tif(NOT DEFINED M_CORE_GBA)\n\t\tset(M_CORE_GBA ON)\n\tendif()\n\tif(NOT DEFINED M_CORE_GB)\n\t\tset(M_CORE_GB ON)\n\tendif()\nendif()\n\nfile(GLOB THIRD_PARTY_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/inih/*.c)\nset(CORE_VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-mem.c ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-fifo.c)\nset(VFS_SRC)\ninclude_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/src ${CMAKE_CURRENT_BINARY_DIR}/include)\n\nif(NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE Release CACHE STRING \"Build type (e.g. Release, RelWithDebInfo, or Debug)\" FORCE)\nendif()\n\nif(UNIX OR WIN32_UNIX_PATHS)\n\tinclude(GNUInstallDirs)\nelse()\n\tset(CMAKE_INSTALL_LIBDIR \".\")\n\tset(CMAKE_INSTALL_BINDIR \".\")\n\tset(CMAKE_INSTALL_DATADIR \".\")\n\tset(CMAKE_INSTALL_DOCDIR \".\")\n\tset(CMAKE_INSTALL_INCLUDEDIR \"include\")\nendif()\n\nif(APPLE AND DISTBUILD)\n\tset(CMAKE_INSTALL_DOCDIR \".\")\nendif()\n\nif(NOT DEFINED LIBDIR)\n\tset(LIBDIR \"${CMAKE_INSTALL_LIBDIR}\")\nendif()\nif(NOT LIBMGBA_ONLY)\n\tset(LIBDIR \"${LIBDIR}\" CACHE PATH \"Installed library directory\")\n\tmark_as_advanced(LIBDIR)\nendif()\n\nif (BUILD_LIBRETRO)\n\tset(LIBRETRO_LIBDIR \"${LIBDIR}\" CACHE PATH \"Installed library directory (Libretro)\")\n\tmark_as_advanced(LIBRETRO_LIBDIR)\nendif()\n\nif (DISTBUILD)\n       set(EXTRA_LICENSES \"\" CACHE FILEPATH \"Extra licenses to include in distribution packaages\")\n       mark_as_advanced(EXTRA_LICENSES)\nendif()\nmark_as_advanced(DISTBUILD)\n\nset(CMAKE_INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${LIBDIR}\")\nif(${CMAKE_INSTALL_PREFIX} STREQUAL \"/usr\")\n\tset(CMAKE_SKIP_RPATH ON)\nendif()\n\nif (NOT DEFINED MANDIR)\n\tset(MANDIR ${CMAKE_INSTALL_MANDIR})\nendif()\n\ninclude(FindFeature)\ninclude(FindFunction)\ninclude(DebugStrip)\n\n# Version information\nadd_custom_target(${BINARY_NAME}-version-info ALL\n\tCOMMAND ${CMAKE_COMMAND}\n\t-DBINARY_NAME=${BINARY_NAME}\n\t-DCONFIG_FILE=${CMAKE_CURRENT_SOURCE_DIR}/src/core/version.c.in\n\t-DOUT_FILE=${CMAKE_CURRENT_BINARY_DIR}/version.c\n\t-P ${CMAKE_CURRENT_SOURCE_DIR}/version.cmake\n\tWORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})\n\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/version.cmake)\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/core/version.c.in ${CMAKE_CURRENT_BINARY_DIR}/version.c)\n\nsource_group(\"Generated sources\" FILES ${CMAKE_CURRENT_BINARY_DIR}/version.c)\n\n# Advanced settings\nif(NOT (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"4.5\"))\n\tset(DEFAULT_LTO ON)\nelse()\n\tset(DEFAULT_LTO OFF)\nendif()\n\nif(NOT LIBMGBA_ONLY)\n\tset(BUILD_LTO ${DEFAULT_LTO} CACHE BOOL \"Build with link-time optimization\")\n\tset(BUILD_PGO OFF CACHE BOOL \"Build with profiling-guided optimization\")\n\tset(PGO_STAGE_2 CACHE BOOL \"Rebuild for profiling-guided optimization after profiles have been generated\")\n\tset(PGO_DIR \"/tmp/gba-pgo/\" CACHE PATH \"Profiling-guided optimization profiles path\")\n\tmark_as_advanced(BUILD_LTO BUILD_PGO PGO_STAGE_2 PGO_DIR)\nendif()\nset(PGO_PRE_FLAGS \"-fprofile-generate=${PGO_DIR} -fprofile-arcs\")\nset(PGO_POST_FLAGS \"-fprofile-use=${PGO_DIR} -fbranch-probabilities\")\n\nif(BUILD_PGO AND CMAKE_SYSTEM_NAME STREQUAL \"Generic\")\n\tadd_definitions(-DTARGET_POSIX_IO)\nendif()\n\nif(BUILD_PGO AND NOT PGO_STAGE_2)\n\tset(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} ${PGO_PRE_FLAGS}\")\n\tset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} ${PGO_PRE_FLAGS}\")\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${PGO_PRE_FLAGS}\")\n\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${PGO_PRE_FLAGS}\")\nelseif(BUILD_PGO AND PGO_STAGE_2)\n\tset(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} ${PGO_POST_FLAGS}\")\n\tset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} ${PGO_POST_FLAGS}\")\n\tset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${PGO_POST_FLAGS}\")\n\tset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${PGO_POST_FLAGS}\")\nendif()\n\n# Platform support\nset(OS_DEFINES)\nif(WIN32)\n\tset(WIN32_VERSION \"${LIB_VERSION_MAJOR},${LIB_VERSION_MINOR},${LIB_VERSION_PATCH}\")\n\tset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)\n\tif(MSVC)\n\t\tadd_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN)\n\t\tadd_definitions(-D_UNICODE -DUNICODE)\n\telse()\n\t\tadd_definitions(-D_GNU_SOURCE)\n\t\tif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\t\t\tadd_compile_definitions(_FILE_OFFSET_BITS=64)\n\t\tendif()\n\tendif()\n\tlist(APPEND OS_LIB ws2_32 shlwapi)\n\tlist(APPEND OS_DEFINES ENABLE_VFS_FD)\n\tlist(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-fd.c ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/vfs-w32.c)\n\tfile(GLOB OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/*.c)\n\tsource_group(\"Windows-specific code\" FILES ${OS_SRC})\nelseif(UNIX)\n\tset(USE_PTHREADS ON)\n\n\tif(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n\t\tadd_definitions(-D_GNU_SOURCE)\n\tendif()\n\n\tlist(APPEND OS_DEFINES ENABLE_VFS_FD)\n\tlist(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-fd.c ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-dirent.c)\n\tfile(GLOB OS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/posix/*.c)\n\tsource_group(\"POSIX-specific code\" FILES ${OS_SRC})\nendif()\n\nif(APPLE)\n\texecute_process(COMMAND xcrun --show-sdk-version OUTPUT_VARIABLE MACOSX_SDK)\n\tadd_definitions(-D_DARWIN_C_SOURCE)\n\tlist(APPEND OS_LIB \"-framework Foundation\")\n\n\t# Xcode 15 introduced a warning about duplicate libraries that CMake doesn't disable itself, we do it here globally\n\tif(MACOSX_SDK VERSION_GREATER_EQUAL 10.15)\n\t\tadd_link_options(LINKER:-no_warn_duplicate_libraries)\n\tendif()\n\n\tif(NOT CMAKE_SYSTEM_VERSION VERSION_LESS \"10.0\") # Darwin 10.x is Mac OS X 10.6\n\t\tset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.6\")\n\tendif()\n\t# Not supported until Xcode 9\n\tif(CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"9\")\n\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D__STDC_NO_THREADS__=1\")\n\tendif()\n\tif(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS \"9\")\n\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__STDC_NO_THREADS__=1\")\n\tendif()\nendif()\n\nif(NOT HAIKU AND NOT MSVC AND NOT PSP2)\n\tset(M_LIBRARY m)\nendif()\nlist(APPEND OS_LIB ${M_LIBRARY})\n\nif(APPLE OR CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND BUILD_LTO)\n\tset(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} -flto\")\n\tset(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -flto\")\nendif()\n\nif(CMAKE_C_COMPILER_ID STREQUAL \"GNU\" OR CMAKE_C_COMPILER_ID STREQUAL \"Clang\" OR CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\")\n\tfind_program(OBJCOPY ${cross_prefix}objcopy)\n\tfind_program(STRIP ${cross_prefix}strip)\n\n\tset(CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELEASE} -gdwarf\")\n\tset(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELEASE} -gdwarf\")\nendif()\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"arm.*\")\n\tenable_language(ASM)\nendif()\n\nif(PSP2)\n\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-format\")\nendif()\n\nif(DEFINED 3DS OR DEFINED PSP2 OR DEFINED WII OR DEFINED SWITCH)\n\tset(IS_EMBEDDED ON)\n\tset(ENABLE_DEBUGGERS OFF)\n\tset(USE_SQLITE3 OFF)\n\tset(USE_DISCORD_RPC OFF)\n\tset(USE_LIBZIP OFF CACHE BOOL \"\")\nendif()\n\nif(DEFINED SWITCH)\n\tset(BUILD_GLES2 OFF CACHE BOOL \"Build with OpenGL|ES 2\" FORCE)\n\tset(BUILD_GLES3 ON CACHE BOOL \"Build with OpenGL|ES 3\" FORCE)\nendif()\n\nif(NOT M_CORE_GBA)\n\tset(ENABLE_GDB_STUB OFF)\nendif()\n\nif(NOT ENABLE_DEBUGGERS)\n\tset(USE_EDITLINE OFF)\n\tset(ENABLE_GDB_STUB OFF)\nendif()\n\nif(WII)\n\tadd_definitions(-U__STRICT_ANSI__)\nendif()\n\ninclude(CheckCCompilerFlag)\ninclude(CheckIncludeFiles)\n\nset(FUNCTION_DEFINES)\n\nfind_function(strdup)\nfind_function(strlcpy)\nfind_function(strndup)\nfind_function(vasprintf)\n\nfind_function(freelocale)\nfind_function(newlocale)\nfind_function(setlocale)\nfind_function(snprintf_l)\nfind_function(uselocale)\n\nfind_function(popcount32)\n\nfind_function(futimens)\nfind_function(futimes)\nfind_function(localtime_r)\n\nfind_function(realpath)\n\nif(ANDROID AND ANDROID_NDK_MAJOR GREATER 13)\n\tlist(APPEND FUNCTION_DEFINES HAVE_STRTOF_L)\nelseif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n\t# The strtof_l on Linux not actually exposed nor actually strtof_l\n\tfind_function(strtof_l)\nendif()\n\ncheck_include_files(\"xlocale.h\" HAVE_XLOCALE)\n\nset(ENABLE_VFS ON)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Generic\")\n\tif(NOT IS_EMBEDDED)\n\t\tset(DISABLE_DEPS ON CACHE BOOL \"This platform cannot build with dependencies\" FORCE)\n\tendif()\n\tset(BUILD_STATIC ON CACHE BOOL \"\" FORCE)\n\tset(BUILD_SHARED OFF CACHE BOOL \"\" FORCE)\n\tset(DISABLE_FRONTENDS ON)\n\tset(MINIMAL_CORE ON)\n\tset(ENABLE_EXTRA ON)\nendif()\n\nif(USE_PTHREADS)\n\tcheck_include_files(\"pthread.h\" HAVE_PTHREAD_H)\n\tif(HAVE_PTHREAD_H)\n\t\tcheck_c_compiler_flag(-pthread HAVE_PTHREAD)\n\t\tif(HAVE_PTHREAD AND NOT APPLE AND NOT HAIKU)\n\t\t\tset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pthread\")\n\t\t\tset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n\t\tendif()\n\n\t\tfind_function(pthread_create)\n\t\tif(HAVE_PTHREAD_CREATE)\n\t\t\tadd_definitions(-DUSE_PTHREADS)\n\n\t\t\tcheck_include_files(\"pthread_np.h\" HAVE_PTHREAD_NP_H)\n\n\t\t\tfind_function(pthread_setname_np)\n\t\t\tfind_function(pthread_set_name_np)\n\t\tendif()\n\tendif()\nendif()\n\nif(HAVE_NEWLOCALE AND HAVE_FREELOCALE OR APPLE)\n\tlist(APPEND FUNCTION_DEFINES HAVE_LOCALE)\n\tif (HAVE_SNPRINTF_L)\n\t\tlist(APPEND FUNCTION_DEFINES HAVE_SNPRINTF_L)\n\tendif()\nendif()\n\nif(HAVE_XLOCALE)\n\tlist(APPEND FUNCTION_DEFINES HAVE_XLOCALE)\nendif()\n\nif(HAVE_PTHREAD_NP_H)\n\tlist(APPEND FUNCTION_DEFINES HAVE_PTHREAD_NP_H)\nendif()\n\n# Feature dependencies\nset(FEATURE_DEFINES)\nset(FEATURE_FLAGS)\nset(FEATURE_SRC)\nset(FEATURES)\nset(ENABLES)\nif(CMAKE_SYSTEM_NAME MATCHES \".*BSD|DragonFly\")\n\tset(LIBEDIT_LIBRARIES -ledit)\n\tif (CMAKE_SYSTEM_NAME STREQUAL OpenBSD)\n\t\tlist(APPEND LIBEDIT_LIBRARIES -ltermcap)\n\tendif()\nelse()\n\tfind_feature(USE_EDITLINE \"libedit\")\nendif()\n\nif(BUILD_GL)\n\tfind_package(OpenGL QUIET)\n\tif(NOT OPENGL_FOUND OR (APPLE AND MACOSX_SDK VERSION_GREATER 10.14))\n\t\tset(BUILD_GL OFF CACHE BOOL \"OpenGL not found\" FORCE)\n\telseif(UNIX AND NOT APPLE AND TARGET OpenGL::GL)\n\t\tset(OPENGL_LIBRARY OpenGL::GL)\n\tendif()\n\tif(OpenGL_GLX_FOUND)\n\t\tlist(APPEND FEATURES GLX)\n\tendif()\n\tif(OpenGL_EGL_FOUND)\n\t\tlist(APPEND FEATURES EGL)\n\t\tlist(APPEND OPENGL_LIBRARY ${OPENGL_egl_LIBRARY})\n\tendif()\nendif()\nif(BUILD_GL)\n\tlist(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gl.c)\n\tlist(APPEND FEATURE_DEFINES BUILD_GL)\n\tlist(APPEND DEPENDENCY_LIB ${OPENGL_LIBRARY})\n\tinclude_directories(${OPENGL_INCLUDE_DIR})\nendif()\nif(NOT BUILD_GL AND NOT LIBMGBA_ONLY)\n\tset(OPENGL_LIBRARY \"\" CACHE PATH \"\" FORCE)\nendif()\n\nif(BUILD_GLES2 AND NOT BUILD_GL)\n\tif(APPLE AND MACOSX_SDK VERSION_GREATER 10.14)\n\t\tfind_package(OpenGL QUIET)\n\t\tset(OPENGLES2_INCLUDE_DIR ${OPENGL_INCLUDE_DIR})\n\t\tset(OPENGLES2_LIBRARY ${OPENGL_LIBRARY})\n\tendif()\n\tfind_path(OPENGLES2_INCLUDE_DIR NAMES GLES2/gl2.h)\n\tfind_library(OPENGLES2_LIBRARY NAMES GLESv2 GLESv2_CM)\n\tif(NOT OPENGLES2_INCLUDE_DIR OR NOT OPENGLES2_LIBRARY)\n\t\tset(BUILD_GLES2 OFF CACHE BOOL \"OpenGL|ES 2 not found\" FORCE)\n\tendif()\nendif()\nif(BUILD_GLES2)\n\tlist(APPEND FEATURE_DEFINES BUILD_GLES2)\n\tlist(APPEND DEPENDENCY_LIB ${OPENGLES2_LIBRARY})\n\tinclude_directories(${OPENGLES2_INCLUDE_DIR})\nendif()\n\nif(BUILD_GLES3 AND NOT BUILD_GL)\n\tif(APPLE AND MACOSX_SDK VERSION_GREATER 10.14)\n\t\tfind_package(OpenGL QUIET)\n\t\tset(OPENGLES3_INCLUDE_DIR ${OPENGL_INCLUDE_DIR})\n\t\tset(OPENGLES3_LIBRARY ${OPENGL_LIBRARY})\n\tendif()\n\tfind_path(OPENGLES3_INCLUDE_DIR NAMES GLES3/gl3.h)\n\tfind_library(OPENGLES3_LIBRARY NAMES GLESv3 GLESv2)\n\tif(NOT OPENGLES3_INCLUDE_DIR OR NOT OPENGLES3_LIBRARY)\n\t\tset(BUILD_GLES3 OFF CACHE BOOL \"OpenGL|ES 3 not found\" FORCE)\n\tendif()\nendif()\nif(BUILD_GLES3)\n\tlist(APPEND FEATURE_DEFINES BUILD_GLES3)\n\tlist(APPEND DEPENDENCY_LIB ${OPENGLES3_LIBRARY})\n\tinclude_directories(${OPENGLES3_INCLUDE_DIR})\nendif()\n\nif(BUILD_GLES2 OR BUILD_GLES3)\n\tlist(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gles2.c)\nendif()\n\nif(NOT BUILD_GLES2 AND NOT BUILD_GLES3 AND NOT LIBMGBA_ONLY)\n\tset(OPENGLES2_LIBRARY \"\" CACHE PATH \"\" FORCE)\nendif()\n\nif(DISABLE_DEPS)\n\tset(ENABLE_GDB_STUB OFF)\n\tset(USE_DISCORD_RPC OFF)\n\tset(USE_JSON_C OFF)\n\tset(USE_SQLITE3 OFF)\n\tset(USE_PNG OFF)\n\tset(USE_ZLIB OFF)\nendif()\n\nset(WANT_ZLIB ${USE_ZLIB})\nset(WANT_PNG ${USE_PNG})\nset(WANT_SQLITE3 ${USE_SQLITE3})\nset(USE_CMOCKA ${BUILD_SUITE})\n\nif(DEFINED VCPKG_TARGET_TRIPLET)\n\tfind_feature(USE_FFMPEG \"FFMPEG\")\n\tif(FFMPEG_FOUND)\n\t\tset(LIBAVRESAMPLE_FOUND OFF)\n\t\tset(LIBSWRESAMPLE_FOUND ON)\n\tendif()\nelse()\n\tfind_feature(USE_FFMPEG \"libavcodec;libavfilter;libavformat;libavutil;libswscale;libswresample|libavresample\")\nendif()\nfind_feature(USE_ZLIB \"ZLIB\")\nfind_feature(USE_MINIZIP \"minizip\")\nfind_feature(USE_PNG \"PNG\")\nfind_feature(USE_LIBZIP \"libzip\")\nfind_feature(USE_EPOXY \"epoxy\")\nfind_feature(USE_CMOCKA \"cmocka\")\nfind_feature(USE_SQLITE3 \"SQLite3|sqlite3\")\nfind_feature(USE_ELF \"libelf\")\nfind_feature(ENABLE_PYTHON \"PythonLibs\")\n\n# Features\nadd_subdirectory(src/debugger)\nadd_subdirectory(src/feature)\n\nset(CPACK_DEBIAN_PACKAGE_DEPENDS \"libc6\")\n\nif(USE_EDITLINE)\n\tlist(APPEND FEATURES EDITLINE)\n\tinclude_directories(AFTER ${LIBEDIT_INCLUDE_DIRS})\n\tlink_directories(${LIBEDIT_LIBRARY_DIRS})\n\tif(BUILD_STATIC)\n\t\tset(DEBUGGER_LIB ${LIBEDIT_STATIC_LIBRARIES})\n\telse()\n\t\tset(DEBUGGER_LIB ${LIBEDIT_LIBRARIES})\n\tendif()\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libedit2\")\nelse()\n\tset(DEBUGGER_LIB \"\")\nendif()\n\nif(ENABLE_GDB_STUB)\n\tlist(APPEND ENABLES GDB_STUB)\nendif()\nsource_group(\"Debugger\" FILES ${DEBUGGER_SRC})\n\nif(USE_FFMPEG)\n\tlist(APPEND FEATURES FFMPEG)\n\tif(LIBSWRESAMPLE_FOUND)\n\t\tlist(APPEND FEATURES LIBSWRESAMPLE)\n\telse()\n\t\tlist(APPEND FEATURES LIBAVRESAMPLE)\n\t\tlist(APPEND FEATURES LIBAV)\n\tendif()\n\tinclude_directories(AFTER ${FFMPEG_INCLUDE_DIRS} ${LIBAVCODEC_INCLUDE_DIRS} ${LIBAVFILTER_INCLUDE_DIRS} ${LIBAVFORMAT_INCLUDE_DIRS} ${LIBAVRESAMPLE_INCLUDE_DIRS} ${LIBAVUTIL_INCLUDE_DIRS} ${LIBSWRESAMPLE_INCLUDE_DIRS} ${LIBSWSCALE_INCLUDE_DIRS})\n\tlink_directories(${FFMPEG_LIBRARY_DIRS} ${LIBAVCODEC_LIBRARY_DIRS} ${LIBAVFILTER_LIBRARY_DIRS} ${LIBAVFORMAT_LIBRARY_DIRS} ${LIBAVRESAMPLE_LIBRARY_DIRS} ${LIBAVUTIL_LIBRARY_DIRS} ${LIBSWRESAMPLE_LIBRARY_DIRS} ${LIBSWSCALE_LIBRARY_DIRS})\n\tlist(APPEND FEATURE_SRC \"${CMAKE_CURRENT_SOURCE_DIR}/src/feature/ffmpeg/ffmpeg-encoder.c\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/feature/ffmpeg/ffmpeg-decoder.c\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/feature/ffmpeg/ffmpeg-scale.c\")\n\tlist(APPEND DEPENDENCY_LIB ${FFMPEG_LIBRARIES} ${LIBAVCODEC_LIBRARIES} ${LIBAVFILTER_LIBRARIES} ${LIBAVFORMAT_LIBRARIES} ${LIBAVRESAMPLE_LIBRARIES} ${LIBAVUTIL_LIBRARIES} ${LIBSWSCALE_LIBRARIES} ${LIBSWRESAMPLE_LIBRARIES})\n\tif(WIN32 AND NOT DEFINED VCPKG_TARGET_TRIPLET)\n\t\tlist(APPEND DEPENDENCY_LIB bcrypt)\n\tendif()\n\tif(UNIX)\n\t\tstring(REGEX MATCH \"^[0-9]+\" LIBAVCODEC_VERSION_MAJOR ${libavcodec_VERSION})\n\t\tstring(REGEX MATCH \"^[0-9]+\" LIBAVFILTER_VERSION_MAJOR ${libavfilter_VERSION})\n\t\tstring(REGEX MATCH \"^[0-9]+\" LIBAVFORMAT_VERSION_MAJOR ${libavformat_VERSION})\n\t\tstring(REGEX MATCH \"^[0-9]+\" LIBAVUTIL_VERSION_MAJOR ${libavutil_VERSION})\n\t\tstring(REGEX MATCH \"^[0-9]+\" LIBSWSCALE_VERSION_MAJOR ${libswscale_VERSION})\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libavcodec${LIBAVCODEC_VERSION_MAJOR}|libavcodec-extra-${LIBAVCODEC_VERSION_MAJOR}|libavcodec-ffmpeg${LIBAVCODEC_VERSION_MAJOR}|libavcodec-ffmpeg-extra${LIBAVCODEC_VERSION_MAJOR}\")\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libavfilter${LIBAVFILTER_VERSION_MAJOR}|libavfilter-ffmpeg${LIBAVFILTER_VERSION_MAJOR}\")\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libavformat${LIBAVFORMAT_VERSION_MAJOR}|libavformat-ffmpeg${LIBAVFORMAT_VERSION_MAJOR}\")\n\t\tif(LIBSWRESAMPLE_FOUND)\n\t\t\tstring(REGEX MATCH \"^[0-9]+\" LIBSWRESAMPLE_VERSION_MAJOR ${libswresample_VERSION})\n\t\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libswresample${LIBSWRESAMPLE_VERSION_MAJOR}|libswresample-ffmpeg${LIBSWRESAMPLE_VERSION_MAJOR}\")\n\t\telse()\n\t\t\tstring(REGEX MATCH \"^[0-9]+\" LIBAVRESAMPLE_VERSION_MAJOR ${libavresample_VERSION})\n\t\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libavresample${LIBAVRESAMPLE_VERSION_MAJOR}|libavresample-ffmpeg${LIBAVRESAMPLE_VERSION_MAJOR}\")\n\t\tendif()\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libavutil${LIBAVUTIL_VERSION_MAJOR}|libavutil-ffmpeg${LIBAVUTIL_VERSION_MAJOR}\")\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libswscale${LIBSWSCALE_VERSION_MAJOR}|libswscale-ffmpeg${LIBSWSCALE_VERSION_MAJOR}\")\n\t\tset(CPACK_DEBIAN_PACKAGE_RECOMMENDS \"libavcodec-extra|libavcodec-ffmpeg-extra${LIBAVCODEC_VERSION_MAJOR}\")\n\tendif()\n\tif(APPLE)\n\t\tlist(APPEND DEPENDENCY_LIB \"-framework VideoDecodeAcceleration\" \"-framework CoreVideo\")\n\tendif()\nendif()\n\nif(WANT_ZLIB AND NOT USE_ZLIB)\n\tset(SKIP_INSTALL_ALL ON)\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib zlib EXCLUDE_FROM_ALL)\n\tset_target_properties(zlibstatic PROPERTIES INCLUDE_DIRECTORIES \"${CMAKE_CURRENT_BINARY_DIR}/zlib;${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib\" POSITION_INDEPENDENT_CODE ON)\n\tset(ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib ${CMAKE_CURRENT_BINARY_DIR}/zlib)\n\tset(ZLIB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib ${CMAKE_CURRENT_BINARY_DIR}/zlib)\n\tset(ZLIB_LIBRARY zlibstatic)\n\tlist(APPEND DEPENDENCY_LIB zlibstatic)\n\tset(USE_ZLIB ON)\nendif()\n\nif(USE_ZLIB)\n\tlist(APPEND FEATURES ZLIB)\n\tinclude_directories(AFTER ${ZLIB_INCLUDE_DIRS})\n\tlist(APPEND DEPENDENCY_LIB ${ZLIB_LIBRARIES})\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},zlib1g\")\n\tset(HAVE_CRC32 ON)\n\tlist(APPEND OS_LIB ${ZLIB_LIBRARIES})\nelse()\n\t# zlib pulls in crc32\n\tcheck_function_exists(crc32 HAVE_CRC32)\nendif()\n\nif(HAVE_CRC32)\n\tlist(APPEND FUNCTION_DEFINES HAVE_CRC32)\nendif()\n\nif(WANT_PNG AND USE_ZLIB AND NOT USE_PNG)\n\tset(PNG_STATIC ON CACHE BOOL \"\" FORCE)\n\tset(PNG_SHARED OFF CACHE BOOL \"\" FORCE)\n\tset(PNG_TESTS OFF CACHE BOOL \"\" FORCE)\n\tset(SKIP_INSTALL_ALL ON)\n\tif (SWITCH)\n\t\tset(PNG_ARM_NEON \"off\" CACHE STRING \"\" FORCE)\n\tendif()\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/libpng libpng EXCLUDE_FROM_ALL)\n\tset_target_properties(png_static PROPERTIES INCLUDE_DIRECTORIES \"${CMAKE_CURRENT_BINARY_DIR}/libpng;${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/libpng;${ZLIB_INCLUDE_DIRS}\" POSITION_INDEPENDENT_CODE ON)\n\tset(PNG_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/libpng ${CMAKE_CURRENT_BINARY_DIR}/libpng)\n\tlist(APPEND DEPENDENCY_LIB png_static)\n\tset(USE_PNG ON)\nendif()\n\nif(USE_PNG)\n\tlist(APPEND FEATURES PNG)\n\tinclude_directories(AFTER ${PNG_INCLUDE_DIRS})\n\tlist(APPEND DEPENDENCY_LIB ${PNG_LIBRARIES} ${ZLIB_LIBRARIES})\n\tif(PNG_VERSION_STRING)\n\t\tstring(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\" PNG_VERSION_PARTIAL ${PNG_VERSION_STRING})\n\t\tif(${PNG_VERSION_PARTIAL} STREQUAL \"1.6\")\n\t\t\tset(PNG_DEB_VERSION \"16-16\")\n\t\telse()\n\t\t\tset(PNG_DEB_VERSION \"12-0\")\n\t\tendif()\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libpng${PNG_DEB_VERSION}\")\n\tendif()\nendif()\n\nif(WANT_SQLITE3 AND NOT USE_SQLITE3)\n\tlist(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/sqlite3/sqlite3.c)\n\tinclude_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/sqlite3/)\n\tset(USE_SQLITE3 ON)\nendif()\n\nif(USE_LIBZIP)\n\tif(TARGET libzip::zip)\n\t\tset(ZIP_LIBRARIES libzip::zip)\n\telseif(TARGET zip)\n\t\tset(ZIP_LIBRARIES zip)\n\telse()\n\t\tinclude_directories(AFTER ${LIBZIP_INCLUDE_DIRS})\n\t\tlink_directories(${LIBZIP_LIBRARY_DIRS})\n\t\tset(ZIP_LIBRARIES ${LIBZIP_LIBRARIES})\n\tendif()\n\tlist(APPEND DEPENDENCY_LIB ${ZIP_LIBRARIES})\n\tlist(APPEND FEATURES LIBZIP)\n\tlist(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-zip.c)\n\tstring(REGEX MATCH \"^[0-9]+\" LIBZIP_VERSION_MAJOR \"${libzip_VERSION}\")\n\tif (LIBZIP_VERSION_MAJOR LESS 1)\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libzip2\")\n\telseif(LIBZIP_VERSION_MAJOR EQUAL 1 OR NOT LIBZIP_VERSION_MAJOR)\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libzip4|libzip5\")\n\telse()\n\t\tmessage(AUTHOR_WARNING \"Unknown version of libzip detected: ${libzip_VERSION}\")\n\tendif()\nelseif(USE_MINIZIP)\n\tinclude_directories(AFTER ${MINIZIP_INCLUDE_DIRS})\n\tlink_directories(${MINIZIP_LIBRARY_DIRS})\n\tset(ZIP_LIBRARIES ${MINIZIP_LIBRARIES})\n\tlist(APPEND DEPENDENCY_LIB ${MINIZIP_LIBRARIES})\n\tlist(APPEND FEATURES MINIZIP)\n\tlist(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-zip.c)\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libminizip1\")\n\tset(CMAKE_REQUIRED_LIBRARIES ${MINIZIP_LIBRARIES})\n\tcheck_function_exists(unztell64 HAVE_UNZTELL64)\n\tunset(CMAKE_REQUIRED_LIBRARIES)\n\tif(NOT HAVE_UNZTELL64)\n\t\tadd_definitions(-Dunztell64=unzTell64)  # Bug in downstream minizip that some distros use\n\tendif()\nelseif(USE_ZLIB)\n\tlist(APPEND FEATURES MINIZIP)\n\tlist(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-zip.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/ioapi.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/unzip.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/zip.c)\n\tinclude_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib)\n\tif(NOT MSVC)\n\t\tset_source_files_properties(\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/ioapi.c\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/unzip.c\n\t\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/zlib/contrib/minizip/zip.c\n\t\t\tPROPERTIES COMPILE_FLAGS \"-Wno-unused-parameter -Wno-implicit-function-declaration\")\n\tendif()\nendif()\n\nif (USE_LZMA)\n\tinclude_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma)\n\tadd_definitions(-D_7ZIP_PPMD_SUPPPORT)\n\tlist(APPEND VFS_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/util/vfs/vfs-lzma.c)\n\tset(LZMA_SRC\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zAlloc.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zArcIn.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zBuf.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zBuf2.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zCrc.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zCrcOpt.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zDec.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/CpuArch.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Delta.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/LzmaDec.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Lzma2Dec.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Bra.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Bra86.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/BraIA64.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Bcj2.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Ppmd7.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/Ppmd7Dec.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zFile.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/lzma/7zStream.c)\n\tlist(APPEND VFS_SRC ${LZMA_SRC})\n\tlist(APPEND FEATURES LZMA)\nendif()\n\nif(USE_EPOXY)\n\tif(NOT APPLE OR NOT MACOSX_SDK VERSION_GREATER 10.14)\n\t\tlist(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gl.c)\n\t\tlist(APPEND FEATURE_DEFINES BUILD_GL)\n\tendif()\n\tlist(APPEND FEATURE_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/opengl/gles2.c)\n\tlist(APPEND FEATURE_DEFINES BUILD_GLES2 BUILD_GLES3)\n\tlist(APPEND FEATURES EPOXY)\n\tinclude_directories(AFTER ${EPOXY_INCLUDE_DIRS})\n\tlink_directories(${EPOXY_LIBRARY_DIRS})\n\tset(OPENGLES2_LIBRARY ${EPOXY_LIBRARIES})\n\tlist(APPEND DEPENDENCY_LIB ${EPOXY_LIBRARIES})\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libepoxy0\")\nelseif(BUILD_GL)\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libgl1|libgles2\")\nelseif(BUILD_GLES2)\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libgles2\")\nendif()\n\nif(WIN32 AND NOT (LIBMGBA_ONLY OR SKIP_LIBRARY OR USE_EPOXY))\n    message(FATAL_ERROR \"Windows requires epoxy module!\")\nendif()\n\nif(USE_SQLITE3)\n\tlist(APPEND FEATURES SQLITE3)\n\tinclude_directories(AFTER ${SQLITE3_INCLUDE_DIRS})\n\tlink_directories(${SQLITE3_LIBRARY_DIRS})\n\tlist(APPEND DEPENDENCY_LIB ${SQLITE3_LIBRARIES})\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libsqlite3-0\")\n\tlist(APPEND FEATURE_SRC \"${CMAKE_CURRENT_SOURCE_DIR}/src/feature/sqlite3/no-intro.c\")\nendif()\n\nif(USE_ELF)\n\tlist(APPEND FEATURES ELF)\n\tinclude_directories(AFTER ${LIBELF_INCLUDE_DIRS})\n\tlink_directories(${LIBELF_LIBRARY_DIRS})\n\tlist(APPEND DEPENDENCY_LIB ${LIBELF_LIBRARIES})\n\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libelf1\")\nendif()\n\nif (USE_DISCORD_RPC)\n\tset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.7\")\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/discord-rpc discord-rpc EXCLUDE_FROM_ALL)\n\tlist(APPEND FEATURES DISCORD_RPC)\n\tinclude_directories(AFTER ${CMAKE_CURRENT_SOURCE_DIR}/src/third-party/discord-rpc/include)\nendif()\n\nif(ENABLE_SCRIPTING)\n\tlist(APPEND ENABLES SCRIPTING)\n\tfind_feature(USE_JSON_C \"json-c\")\n\tif(NOT USE_LUA VERSION_LESS 5.1)\n\t\tfind_feature(USE_LUA \"Lua\" ${USE_LUA})\n\telse()\n\t\tfind_feature(USE_LUA \"Lua\")\n\tendif()\n\tif(USE_JSON_C)\n\t\tlist(APPEND FEATURES JSON_C)\n\t\tif(TARGET json-c::json-c)\n\t\t\tlist(APPEND DEPENDENCY_LIB json-c::json-c)\n\t\t\tget_target_property(JSON_C_SONAME json-c::json-c IMPORTED_SONAME_NONE)\n\t\t\tstring(SUBSTRING \"${JSON_C_SONAME}\" 13 -1 JSON_C_SOVER)\n\n\t\t\t# This is only needed on 0.15, but the target unhelpfully does not contain version info\n\t\t\tget_target_property(JSON_C_INCLUDE_DIR json-c::json-c INTERFACE_INCLUDE_DIRECTORIES)\n\t\t\tif(NOT JSON_C_INCLUDE_DIR MATCHES json-c$)\n\t\t\t\tinclude_directories(AFTER \"${JSON_C_INCLUDE_DIR}/json-c\")\n\t\t\tendif()\n\t\telse()\n\t\t\tif(${json-c_VERSION} VERSION_LESS 0.13.0)\n\t\t\t\tset(JSON_C_SOVER 3)\n\t\t\telseif(${json-c_VERSION} VERSION_LESS 0.15.0)\n\t\t\t\tset(JSON_C_SOVER 4)\n\t\t\tendif()\n\t\t\tlist(APPEND DEPENDENCY_LIB ${json-c_LIBRARIES})\n\t\t\tinclude_directories(AFTER ${json-c_INCLUDE_DIRS})\n\t\t\tlink_directories(${json-c_LIBDIRS})\n\t\tendif()\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},libjson-c${JSON_C_SOVER}\")\n\tendif()\n\tif(USE_LUA)\n\t\tlist(APPEND FEATURE_DEFINES USE_LUA)\n\t\tinclude_directories(AFTER ${LUA_INCLUDE_DIR})\n\t\tlist(APPEND FEATURE_DEFINES LUA_VERSION_ONLY=\\\"${LUA_VERSION_MAJOR}.${LUA_VERSION_MINOR}\\\")\n\t\tlist(APPEND DEPENDENCY_LIB ${LUA_LIBRARY})\n\t\tset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS},liblua${LUA_VERSION_MAJOR}.${LUA_VERSION_MINOR}-0\")\n\tendif()\n\n\tif(BUILD_PYTHON)\n\t\tfind_package(PythonLibs ${USE_PYTHON_VERSION})\n\t\tlist(APPEND DEPENDENCY_LIB ${PYTHON_LIBRARIES})\n\t\tinclude_directories(AFTER ${PYTHON_INCLUDE_DIRS})\n\t\tlist(APPEND ENABLES PYTHON)\n\tendif()\n\tadd_subdirectory(src/script)\nendif()\n\nadd_subdirectory(src/arm)\nadd_subdirectory(src/core)\nadd_subdirectory(src/gb)\nadd_subdirectory(src/gba)\nadd_subdirectory(src/sm83)\nadd_subdirectory(src/util)\n\nlist(APPEND GUI_SRC ${EXTRA_GUI_SRC})\nlist(APPEND UTIL_BASE_SRC ${CMAKE_CURRENT_BINARY_DIR}/version.c)\nlist(APPEND UTIL_SRC ${CMAKE_CURRENT_BINARY_DIR}/version.c)\n\nset(TEST_SRC ${CORE_TEST_SRC})\nif(M_CORE_GB)\n\tadd_definitions(-DM_CORE_GB)\n\tlist(APPEND CORE_SRC ${SM83_SRC} ${GB_SRC})\n\tlist(APPEND DEBUGGER_SRC ${SM83_DEBUGGER_SRC} ${GB_DEBUGGER_SRC})\n\tlist(APPEND TEST_SRC ${SM83_TEST_SRC} ${GB_TEST_SRC})\nendif()\n\nif(M_CORE_GBA)\n\tadd_definitions(-DM_CORE_GBA)\n\tlist(APPEND CORE_SRC ${ARM_SRC} ${GBA_SRC})\n\tlist(APPEND DEBUGGER_SRC ${ARM_DEBUGGER_SRC} ${GBA_DEBUGGER_SRC})\n\tlist(APPEND TEST_SRC ${ARM_TEST_SRC} ${GBA_TEST_SRC})\nendif()\n\nif(ENABLE_DEBUGGERS)\n\tlist(APPEND FEATURE_SRC ${DEBUGGER_SRC})\n\tlist(APPEND TEST_SRC ${DEBUGGER_TEST_SRC})\n\tlist(APPEND ENABLES DEBUGGERS)\nendif()\n\nif(ENABLE_SCRIPTING)\n\tlist(APPEND FEATURE_SRC ${SCRIPT_SRC})\n\tlist(APPEND TEST_SRC ${SCRIPT_TEST_SRC})\nendif()\n\nif(ENABLE_VFS)\n\tlist(APPEND ENABLES VFS)\nendif()\n\nforeach(FEATURE IN LISTS FEATURES)\n\tlist(APPEND FEATURE_DEFINES \"USE_${FEATURE}\")\nendforeach()\n\nforeach(ENABLE IN LISTS ENABLES)\n\tlist(APPEND FEATURE_DEFINES \"ENABLE_${ENABLE}\")\nendforeach()\n\nsource_group(\"Virtual files\" FILES ${CORE_VFS_SRC} ${VFS_SRC})\nsource_group(\"Extra features\" FILES ${FEATURE_SRC})\nsource_group(\"Third-party code\" FILES ${THIRD_PARTY_SRC})\n\n# Platform binaries\nif(DEFINED 3DS)\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/3ds ${CMAKE_CURRENT_BINARY_DIR}/3ds)\nendif()\n\nif(DEFINED WII)\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/wii ${CMAKE_CURRENT_BINARY_DIR}/wii)\nendif()\n\nif(DEFINED PSP2)\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/psp2 ${CMAKE_CURRENT_BINARY_DIR}/psp2)\nendif()\n\nif(DEFINED SWITCH)\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/switch ${CMAKE_CURRENT_BINARY_DIR}/switch)\nendif()\n\n# Binaries\nlist(APPEND CORE_SRC\n\t${UTIL_SRC}\n\t${CORE_VFS_SRC}\n\t${OS_SRC}\n\t${THIRD_PARTY_SRC})\nlist(APPEND TEST_SRC ${UTIL_TEST_SRC})\n\nset(SRC ${CORE_SRC})\nif(ENABLE_VFS)\n\tlist(APPEND SRC ${VFS_SRC})\nendif()\n\nif(NOT MINIMAL_CORE)\n\tset(ENABLE_EXTRA ON)\n\tif(M_CORE_GBA)\n\t\tlist(APPEND SRC ${GBA_SIO_SRC})\n\tendif()\n\tif(M_CORE_GB)\n\t\tlist(APPEND SRC ${GB_SIO_SRC})\n\tendif()\n\tlist(APPEND SRC ${FEATURE_SRC})\nendif()\n\nif(ENABLE_EXTRA)\n\tif(M_CORE_GBA)\n\t\tlist(APPEND SRC ${GBA_EXTRA_SRC})\n\tendif()\n\tif(M_CORE_GB)\n\t\tlist(APPEND SRC ${GB_EXTRA_SRC})\n\tendif()\n\tlist(APPEND SRC ${EXTRA_SRC})\nendif()\n\nif(ENABLE_SCRIPTING)\n\tlist(APPEND SRC ${CORE_SCRIPT_SRC})\nendif()\n\nif(NOT SKIP_LIBRARY)\n\tif(NOT BUILD_STATIC AND NOT BUILD_SHARED)\n\t\tset(BUILD_SHARED ON)\n\tendif()\n\n\tif(BUILD_SHARED)\n\t\tadd_library(${BINARY_NAME} SHARED ${SRC})\n\t\tset(EXPORT_DEFINES MGBA_DLL)\n\t\tif(BUILD_STATIC)\n\t\t\tadd_library(${BINARY_NAME}-static STATIC ${SRC})\n\t\t\ttarget_include_directories(${BINARY_NAME}-static BEFORE PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR}/include)\n\t\t\tset_target_properties(${BINARY_NAME}-static PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES};BUILD_STATIC\" COMPILE_OPTIONS \"${FEATURE_FLAGS}\")\n\t\t\tinstall(TARGETS ${BINARY_NAME}-static DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME})\n\t\t\tadd_dependencies(${BINARY_NAME}-static ${BINARY_NAME}-version-info)\n\t\tendif()\n\telse()\n\t\tadd_library(${BINARY_NAME} STATIC ${SRC})\n\t\tlist(APPEND OS_DEFINES BUILD_STATIC)\n\tendif()\n\n\ttarget_include_directories(${BINARY_NAME} BEFORE PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR}/include)\n\tset_target_properties(${BINARY_NAME} PROPERTIES VERSION ${LIB_VERSION_STRING} SOVERSION ${LIB_VERSION_ABI} COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES};${EXPORT_DEFINES}\" COMPILE_OPTIONS \"${FEATURE_FLAGS}\")\n\tadd_dependencies(${BINARY_NAME} ${BINARY_NAME}-version-info)\n\n\tfile(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/mgba-util)\n\n\tif(BUILD_STATIC)\n\t\t# Some versions of CMake are remarkably bad about deduplicating this list,\n\t\t# leading to issues with static linking. Let's do it manually.\n\t\tlist(REVERSE DEPENDENCY_LIB)\n\t\tlist(REMOVE_DUPLICATES DEPENDENCY_LIB)\n\t\tlist(REVERSE DEPENDENCY_LIB)\n\tendif()\n\n\ttarget_link_libraries(${BINARY_NAME} ${DEBUGGER_LIB} ${DEPENDENCY_LIB} ${OS_LIB})\n\tinstall(TARGETS ${BINARY_NAME} LIBRARY DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME} NAMELINK_SKIP ARCHIVE DESTINATION ${LIBDIR} RUNTIME DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME})\n\tif(BUILD_SHARED)\n\t\tinstall(TARGETS ${BINARY_NAME} LIBRARY DESTINATION ${LIBDIR} COMPONENT ${BINARY_NAME}-dev NAMELINK_ONLY)\n\tendif()\n\tif(UNIX AND NOT APPLE AND NOT HAIKU)\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-16.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/16x16/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-24.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/24x24/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-32.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/32x32/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-48.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/48x48/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-64.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/64x64/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-96.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/96x96/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-128.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/128x128/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-256.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/256x256/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/mgba-512.png DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/512x512/apps RENAME io.mgba.${PROJECT_NAME}.png COMPONENT ${BINARY_NAME})\n\tendif()\nelse()\n\tset(BUILD_SHARED OFF)\n\tset(BUILD_STATIC OFF)\n\tfind_library(${BINARY_NAME} ${BINARY_NAME})\n\tif(NOT ${BINARY_NAME}_FOUND)\n\t\tset(DISABLE_FRONTENDS ON)\n\t\tset(BUILD_PERF OFF)\n\t\tset(BUILD_TEST OFF)\n\t\tset(BUILD_SUITE OFF)\n\tendif()\nendif()\n\nif(DISABLE_FRONTENDS)\n\tset(BUILD_SDL OFF)\n\tset(BUILD_QT OFF)\nendif()\n\nif(BUILD_PYTHON)\n\tenable_testing()\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/python ${CMAKE_CURRENT_BINARY_DIR}/python)\nendif()\n\nif(BUILD_LIBRETRO)\n\tfile(GLOB RETRO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/libretro/*.c)\n\tadd_library(${BINARY_NAME}_libretro SHARED ${CORE_SRC} ${RETRO_SRC} ${VFS_SRC})\n\tadd_dependencies(${BINARY_NAME}_libretro ${BINARY_NAME}-version-info)\n\tset_target_properties(${BINARY_NAME}_libretro PROPERTIES PREFIX \"\" COMPILE_DEFINITIONS \"__LIBRETRO__;COLOR_16_BIT;COLOR_5_6_5;DISABLE_THREADING;MGBA_STANDALONE;${OS_DEFINES};${FUNCTION_DEFINES};ENABLE_VFS;MINIMAL_CORE=2\")\n\ttarget_link_libraries(${BINARY_NAME}_libretro ${OS_LIB})\n\tif(MSVC)\n\t\tinstall(TARGETS ${BINARY_NAME}_libretro RUNTIME DESTINATION ${LIBRETRO_LIBDIR} COMPONENT ${BINARY_NAME}_libretro)\n\telse()\n\t\tinstall(TARGETS ${BINARY_NAME}_libretro LIBRARY DESTINATION ${LIBRETRO_LIBDIR} COMPONENT ${BINARY_NAME}_libretro NAMELINK_SKIP)\n\tendif()\nendif()\n\nif(BUILD_QT AND (WIN32 OR APPLE OR CMAKE_SYSTEM_NAME STREQUAL \"Linux\") AND ENABLE_VFS)\n\tset(BUILD_UPDATER ON)\nendif()\n\nif(BUILD_UPDATER)\n\tadd_executable(updater-stub WIN32 ${CORE_VFS_SRC} ${VFS_SRC} ${OS_SRC} ${UTIL_BASE_SRC} ${THIRD_PARTY_SRC}\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/core/config.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/feature/updater.c\n\t\t${CMAKE_CURRENT_SOURCE_DIR}/src/tools/updater-main.c)\n\ttarget_link_libraries(updater-stub ${ZLIB_LIBRARY} ${ZLIB_LIBRARY} ${ZIP_LIBRARIES} ${OS_LIB} ${PLATFORM_LIBRARY})\n\tset_target_properties(updater-stub PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FUNCTION_DEFINES};${FEATURE_DEFINES};BUILD_STATIC\")\n\tif(MSVC)\n\t\tset_target_properties(updater-stub PROPERTIES LINK_FLAGS /ENTRY:mainCRTStartup)\n\telse()\n\t\tset_target_properties(updater-stub PROPERTIES LINK_FLAGS_RELEASE -s)\n\t\tset_target_properties(updater-stub PROPERTIES LINK_FLAGS_RELWITHDEBINFO -s)\n\tendif()\nendif()\n\nif(ENABLE_SCRIPTING AND BUILD_DOCGEN)\n\tadd_executable(docgen ${CMAKE_CURRENT_SOURCE_DIR}/src/tools/docgen.c)\n\ttarget_link_libraries(docgen ${OS_LIB} ${PLATFORM_LIBRARY} ${BINARY_NAME})\n\tset_target_properties(docgen PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FUNCTION_DEFINES};${FEATURE_DEFINES}\")\nendif()\n\nif(BUILD_MAINTAINER_TOOLS)\n\tadd_executable(font-sdf-tool ${CMAKE_CURRENT_SOURCE_DIR}/src/tools/font-sdf.c ${CMAKE_CURRENT_SOURCE_DIR}/src/util/gui/font-metrics.c)\n\ttarget_link_libraries(font-sdf-tool ${OS_LIB} ${PLATFORM_LIBRARY} ${BINARY_NAME})\nendif()\n\nif(BUILD_SDL)\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/sdl ${CMAKE_CURRENT_BINARY_DIR}/sdl)\nendif()\n\nif(BUILD_QT)\n\tadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/qt ${CMAKE_CURRENT_BINARY_DIR}/qt)\nendif()\n\nif(BUILD_HEADLESS)\n\tadd_executable(${BINARY_NAME}-headless ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/headless-main.c)\n\ttarget_link_libraries(${BINARY_NAME}-headless ${PLATFORM_LIBRARY} ${BINARY_NAME})\n\tdebug_strip(${BINARY_NAME}-headless)\n\ttarget_compile_definitions(${BINARY_NAME}-headless PRIVATE \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\n\tinstall(TARGETS ${BINARY_NAME}-headless DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${BINARY_NAME}-headless)\nendif()\n\nif(NOT USE_CMOCKA)\n\tset(BUILD_SUITE OFF)\nendif()\nif(BUILD_TEST OR BUILD_SUITE OR BUILD_CINEMA)\n\tenable_testing()\nendif()\nadd_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/test ${CMAKE_CURRENT_BINARY_DIR}/test)\n\nif(BUILD_EXAMPLE)\n\tadd_executable(${BINARY_NAME}-example-server ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/example/client-server/server.c)\n\ttarget_link_libraries(${BINARY_NAME}-example-server ${BINARY_NAME})\n\tset_target_properties(${BINARY_NAME}-example-server PROPERTIES COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}\")\n\n\tif(SDL_FOUND)\n\t\tadd_executable(${BINARY_NAME}-example-client ${CMAKE_CURRENT_SOURCE_DIR}/src/platform/example/client-server/client.c)\n\t\ttarget_link_libraries(${BINARY_NAME}-example-client ${BINARY_NAME} ${SDL_LIBRARY} ${SDLMAIN_LIBRARY} ${OPENGL_LIBRARY} ${OPENGLES2_LIBRARY})\n\t\tset_target_properties(${BINARY_NAME}-example-client PROPERTIES\n\t\t                      COMPILE_DEFINITIONS \"${OS_DEFINES};${FEATURE_DEFINES};${FUNCTION_DEFINES}\"\n\t\t                      INCLUDE_DIRECTORIES \"${SDL_INCLUDE_DIR};${CMAKE_CURRENT_SOURCE_DIR}/src;${CMAKE_CURRENT_SOURCE_DIR}/include\")\n\tendif()\nendif()\n\nfile(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/mgba)\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/core/flags.h.in ${CMAKE_CURRENT_BINARY_DIR}/include/mgba/flags.h)\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/mgba DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT ${BINARY_NAME}-dev FILES_MATCHING PATTERN \"*.h\")\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/mgba-util DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT ${BINARY_NAME}-dev FILES_MATCHING PATTERN \"*.h\")\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/include/mgba/flags.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/mgba COMPONENT ${BINARY_NAME}-dev)\n\n# Packaging\ninstall(FILES DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})\ninstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/inih.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})\nif(USE_DISCORD_RPC)\n\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/discord-rpc.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})\n\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/rapidjson.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})\n\tif(WIN32)\n\t\tinstall(FILES ${CMAKE_CURRENT_SOURCE_DIR}/res/licenses/mingw-std-threads.txt DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})\n\tendif()\nendif()\nif(EXTRA_LICENSES)\n\tinstall(FILES ${EXTRA_LICENSES} DESTINATION ${CMAKE_INSTALL_DOCDIR}/licenses COMPONENT ${BINARY_NAME})\nendif()\n\nfile(GLOB READMES ${CMAKE_CURRENT_SOURCE_DIR}/README*.md)\n\nfind_program(UNIX2DOS NAMES unix2dos)\nfind_program(MARKDOWN NAMES markdown kramdown pandoc)\n\nif(UNIX OR NOT UNIX2DOS)\n\tif(UNIX OR NOT MARKDOWN)\n\t\tinstall(FILES ${READMES} DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})\n\tendif()\n\tinstall(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/CHANGES\" \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\" DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})\nelse()\n\tadd_custom_command(OUTPUT CHANGES.txt COMMAND ${UNIX2DOS} -n \"${CMAKE_CURRENT_SOURCE_DIR}/CHANGES\" \"${CMAKE_CURRENT_BINARY_DIR}/CHANGES.txt\" MAIN_DEPENDENCY \"${CMAKE_CURRENT_SOURCE_DIR}/CHANGES\")\n\tadd_custom_command(OUTPUT LICENSE.txt COMMAND ${UNIX2DOS} -n \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\" \"${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt\" MAIN_DEPENDENCY \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\n\tadd_custom_target(CHANGES ALL DEPENDS CHANGES.txt)\n\tadd_custom_target(LICENSE ALL DEPENDS LICENSE.txt)\n\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/CHANGES.txt ${CMAKE_CURRENT_BINARY_DIR}/LICENSE.txt DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})\n\tif(DISTBUILD AND WIN32)\n\t\tset(BIN_DIR \".\\\\\")\n\t\tstring(REGEX REPLACE \"[^-A-Za-z0-9_.]\" \"-\" CLEAN_VERSION_STRING \"${VERSION_STRING}\")\n\t\tfile(RELATIVE_PATH SETUP_DIR_SLASH \"${CMAKE_CURRENT_BINARY_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/setup\")\n\t\tfile(RELATIVE_PATH RES_DIR_SLASH \"${CMAKE_CURRENT_BINARY_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}/res\")\n\t\tstring(REPLACE \"/\" \"\\\\\" SETUP_DIR \"${SETUP_DIR_SLASH}\")\n\t\tstring(REPLACE \"/\" \"\\\\\" RES_DIR \"${RES_DIR_SLASH}\")\n\t\tif(CMAKE_SYSTEM_PROCESSOR MATCHES \".*64$\")\n\t\t\tset(WIN_BITS 64)\n\t\telse()\n\t\t\tset(WIN_BITS 32)\n\t\tendif()\n\t\tif(GIT_TAG)\n\t\t\tset(IS_RELEASE 1)\n\t\telse()\n\t\t\tset(IS_RELEASE 0)\n\t\tendif()\n\t\tconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/platform/windows/setup/setup.iss.in\" setup.iss)\n\t\tset_source_files_properties(setup.iss PROPERTIES GENERATED ON)\n\n\t\tif(INSTALLER_NAME)\n\t\t\tset(INSTALLER_TARGET \"${INSTALLER_NAME}.exe\")\n\t\t\tset(ISCC_FLAGS \"/F${INSTALLER_NAME}\")\n\t\telse()\n\t\t\tset(INSTALLER_TARGET \"${PROJECT_NAME}-setup-${CLEAN_VERSION_STRING}-win${WIN_BITS}.exe\")\n\t\tendif()\n\t\tif(CMAKE_CROSSCOMPILING)\n\t\t\tfind_program(WINE NAMES wine wine-stable wine-development)\n\t\t\tfind_file(ISCC ISCC.exe HINTS \"$ENV{HOME}/.wine/drive_c/Program Files/\" PATH_SUFFIXES \"Inno Setup 5\")\n\t\t\tadd_custom_command(OUTPUT ${INSTALLER_TARGET}\n\t\t\t                   COMMAND \"${WINE}\" \"${ISCC}\" setup.iss /Q ${ISCC_FLAGS}\n\t\t\t                   DEPENDS ${BINARY_NAME}-qt ${BINARY_NAME}-sdl setup.iss CHANGES LICENSE)\n\t\telse()\n\t\t\tfind_program(ISCC NAMES ISCC ISCC.exe PATH_SUFFIXES \"Inno Setup 5\")\n\t\t\tadd_custom_command(OUTPUT ${INSTALLER_TARGET}\n\t\t\t                   COMMAND \"${ISCC}\" setup.iss /Q ${ISCC_FLAGS}\n\t\t\t                   DEPENDS ${BINARY_NAME}-qt ${BINARY_NAME}-sdl setup.iss CHANGES LICENSE)\n\t\tendif()\n\t\tif(ISCC)\n\t\t\tadd_custom_target(installer ALL DEPENDS ${INSTALLER_TARGET})\n\t\t\tinstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/${INSTALLER_TARGET}\" DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT installer)\n\t\tendif()\n\tendif()\nendif()\n\nif(MARKDOWN)\n\tforeach(README ${READMES})\n\t\tget_filename_component(README_BASE \"${README}\" NAME_WE)\n\t\tadd_custom_command(OUTPUT ${README_BASE}.html COMMAND ${MARKDOWN} \"${README}\" > ${README_BASE}.html MAIN_DEPENDENCY \"${README}\")\n\t\tadd_custom_target(${README_BASE} ALL DEPENDS ${README_BASE}.html)\n\t\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/${README_BASE}.html DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT ${BINARY_NAME})\n\tendforeach()\nendif()\n\nset(CPACK_PACKAGE_VERSION ${VERSION_STRING})\nset(CPACK_PACKAGE_VERSION_MAJOR ${LIB_VERSION_MAJOR})\nset(CPACK_PACKAGE_VERSION_MINOR ${LIB_VERSION_MINOR})\nset(CPACK_PACKAGE_VERSION_PATCH ${LIB_VERSION_PATCH})\nset(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE)\nset(CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/README.md)\n\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"mGBA Game Boy Advance Emulator\")\nset(CPACK_PACKAGE_VENDOR \"Vicki Pfau\")\nset(CPACK_PACKAGE_CONTACT \"Vicki Pfau <vi@endrift.com>\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\nset(CPACK_DEBIAN_PACKAGE_SECTION \"games\")\n\nset(CPACK_DEB_COMPONENT_INSTALL ON)\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n\tset(CPACK_STRIP_FILES ON)\nendif()\n\nif(DISTBUILD)\n\tset(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\n\tset(CPACK_DMG_FILESYSTEM \"HFS+\")\n\tset(CPACK_DMG_FORMAT \"UDBZ\")\n\tset(CPACK_DMG_VOLUME_NAME \"${PROJECT_NAME} ${VERSION_STRING}\")\n\tif(CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\" AND BUILD_SHARED)\n\t\tif(NOT APPLE)\n\t\t\tadd_custom_command(TARGET ${BINARY_NAME} POST_BUILD COMMAND \"${OBJCOPY}\" --only-keep-debug \"$<TARGET_FILE:${BINARY_NAME}>\" \"$<TARGET_FILE:${BINARY_NAME}>.debug\")\n\t\t\tadd_custom_command(TARGET ${BINARY_NAME} POST_BUILD COMMAND \"${STRIP}\" \"$<TARGET_FILE:${BINARY_NAME}>\")\n\t\t\tadd_custom_command(TARGET ${BINARY_NAME} POST_BUILD COMMAND \"${OBJCOPY}\" --add-gnu-debuglink \"$<TARGET_FILE:${BINARY_NAME}>.debug\" \"$<TARGET_FILE:${BINARY_NAME}>\")\n\t\t\tinstall(FILES \"$<TARGET_FILE:${BINARY_NAME}>.debug\" DESTINATION ${LIBDIR} COMPONENT lib${BINARY_NAME}-dbg)\n\t\tendif()\n\tendif()\n\tif(APPLE)\n\t\tset(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-qt ${BINARY_NAME}-sdl ${BINARY_NAME}-qt-dbg ${BINARY_NAME}-sdl-dbg ${BINARY_NAME}-perf)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/platform/cmake/DMGOverrides.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/DMGOverrides.cmake @ONLY)\n\t\tset(CPACK_PROJECT_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/DMGOverrides.cmake)\n\telseif(WIN32)\n\t\tset(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-qt ${BINARY_NAME}-sdl ${BINARY_NAME}-qt-dbg ${BINARY_NAME}-sdl-dbg ${BINARY_NAME}-perf installer)\n\telseif(3DS)\n\t\tset(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-3ds ${BINARY_NAME}-perf)\n\telseif(WII)\n\t\tset(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-wii ${BINARY_NAME}-perf)\n\telseif(PSP2)\n\t\tset(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-psp2 ${BINARY_NAME}-perf)\n\telseif(SWITCH)\n\t\tset(CPACK_COMPONENTS_ALL ${BINARY_NAME} ${BINARY_NAME}-dbg ${BINARY_NAME}-switch)\n\tendif()\nendif()\n\ninclude(CPack)\n\ncpack_add_component_group(base)\ncpack_add_component(${BINARY_NAME} GROUP base)\n\ncpack_add_component_group(dev PARENT_GROUP base)\nif(BUILD_SHARED)\n\tcpack_add_component(lib${BINARY_NAME} GROUP base)\n\tif(BUILD_STATIC)\n\t\tcpack_add_component(lib${BINARY_NAME}-static GROUP dev)\n\tendif()\nelseif(BUILD_STATIC)\n\tcpack_add_component(lib${BINARY_NAME} GROUP dev)\nendif()\ncpack_add_component(${BINARY_NAME}-dev GROUP dev)\n\nif(3DS)\n\tcpack_add_component(${BINARY_NAME}-3ds GROUP base)\nelseif(PSP2)\n\tcpack_add_component(${BINARY_NAME}-psp2 GROUP base)\nelseif(WII)\n\tcpack_add_component(${BINARY_NAME}-wii GROUP base)\nelseif(SWITCH)\n\tcpack_add_component(${BINARY_NAME}-switch GROUP base)\nendif()\n\nif(BUILD_QT)\n\tcpack_add_component_group(qt PARENT_GROUP base)\n\tcpack_add_component(${BINARY_NAME}-qt GROUP qt)\nendif()\n\nif(SDL_FOUND)\n\tcpack_add_component_group(sdl PARENT_GROUP base)\n\tcpack_add_component(${BINARY_NAME}-sdl GROUP sdl)\nendif()\n\nif(BUILD_HEADLESS)\n\tcpack_add_component_group(headless PARENT_GROUP base)\n\tcpack_add_component(${BINARY_NAME}-headless GROUP headless)\nendif()\n\nif(DISTBUILD)\n\tcpack_add_component_group(debug PARENT_GROUP dev)\n\tif(BUILD_SHARED AND NOT IS_EMBEDDED)\n\t\tcpack_add_component(lib${BINARY_NAME}-dbg GROUP debug)\n\tendif()\n\tif(IS_EMBEDDED)\n\t\tcpack_add_component(${BINARY_NAME}-dbg GROUP debug)\n\tendif()\n\tif(BUILD_QT)\n\t\tcpack_add_component(${BINARY_NAME}-qt-dbg GROUP debug)\n\tendif()\n\tif(SDL_FOUND)\n\t\tcpack_add_component(${BINARY_NAME}-sdl-dbg GROUP debug)\n\tendif()\n\tif(BUILD_HEADLESS)\n\t\tcpack_add_component(${BINARY_NAME}-headless-dbg GROUP debug)\n\tendif()\n\tif(WIN32)\n\t\tcpack_add_component_group(installer PARENT_GROUP base)\n\tendif()\nendif()\n\ncpack_add_component_group(test PARENT_GROUP dev)\ncpack_add_component(${BINARY_NAME}-perf GROUP test)\ncpack_add_component(${BINARY_NAME}-test GROUP test)\n\n# Summaries\nset(SUMMARY_GL_LIST)\nif(USE_EPOXY)\n\tset(SUMMARY_GL_LIST \"libepoxy\")\nelse()\n\tif(BUILD_GL)\n\t\tlist(APPEND SUMMARY_GL_LIST \"OpenGL\")\n\tendif()\n\tif(BUILD_GLES2)\n\t\tlist(APPEND SUMMARY_GL_LIST \"OpenGL|ES 2\")\n\tendif()\n\tif(BUILD_GLES3)\n\t\tlist(APPEND SUMMARY_GL_LIST \"OpenGL|ES 3\")\n\tendif()\nendif()\nif(NOT SUMMARY_GL_LIST)\n\tset(SUMMARY_GL OFF)\nelse()\n\tstring(REPLACE \";\" \", \" SUMMARY_GL \"${SUMMARY_GL_LIST}\")\nendif()\nif(USE_LIBZIP)\n\tset(SUMMARY_ZIP libzip)\nelseif(USE_MINIZIP)\n\tset(SUMMARY_ZIP \"minizip (external)\")\nelseif(USE_ZLIB)\n\tset(SUMMARY_ZIP \"minizip (included)\")\nelse()\n\tset(SUMMARY_ZIP OFF)\nendif()\n\nif(NOT QUIET AND NOT LIBMGBA_ONLY)\n\tmessage(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\tmessage(STATUS \"Platforms:\")\n\tmessage(STATUS \"\tGame Boy Advance: ${M_CORE_GBA}\")\n\tmessage(STATUS \"\tGame Boy: ${M_CORE_GB}\")\n\tmessage(STATUS \"Features:\")\n\tmessage(STATUS \"\tDebuggers: ${ENABLE_DEBUGGERS}\")\n\tif(NOT WIN32)\n\t\tmessage(STATUS \"\tCLI debugger: ${USE_EDITLINE}\")\n\tendif()\n\tmessage(STATUS \"\tGDB stub: ${ENABLE_GDB_STUB}\")\n\tmessage(STATUS \"\tGIF/Video recording: ${USE_FFMPEG}\")\n\tmessage(STATUS \"\tScreenshot/advanced savestate support: ${USE_PNG}\")\n\tmessage(STATUS \"\tZIP support: ${SUMMARY_ZIP}\")\n\tmessage(STATUS \"\t7-Zip support: ${USE_LZMA}\")\n\tmessage(STATUS \"\tSQLite3 game database: ${USE_SQLITE3}\")\n\tmessage(STATUS \"\tELF loading support: ${USE_ELF}\")\n\tmessage(STATUS \"\tDiscord Rich Presence support: ${USE_DISCORD_RPC}\")\n\tmessage(STATUS \"\tOpenGL support: ${SUMMARY_GL}\")\n\tmessage(STATUS \"Scripting support: ${ENABLE_SCRIPTING}\")\n\tif(ENABLE_SCRIPTING)\n\t\tif(LUA_VERSION_STRING)\n\t\t\tmessage(STATUS \"\tLua: ${LUA_VERSION_STRING}\")\n\t\telse()\n\t\t\tmessage(STATUS \"\tLua: ${USE_LUA}\")\n\t\tendif()\n\t\tmessage(STATUS \"\tstorage API: ${USE_JSON_C}\")\n\tendif()\n\tmessage(STATUS \"Frontends:\")\n\tmessage(STATUS \"\tQt: ${BUILD_QT}\")\n\tmessage(STATUS \"\tSDL (${SDL_VERSION}): ${BUILD_SDL}\")\n\tmessage(STATUS \"\tHeadless: ${BUILD_HEADLESS}\")\n\tmessage(STATUS \"\tPython bindings: ${BUILD_PYTHON}\")\n\tmessage(STATUS \"\tExamples: ${BUILD_EXAMPLE}\")\n\tmessage(STATUS \"Test tools:\")\n\tmessage(STATUS \"\tProfiling: ${BUILD_PERF}\")\n\tmessage(STATUS \"\tTest harness: ${BUILD_TEST}\")\n\tmessage(STATUS \"\tTest suite: ${BUILD_SUITE}\")\n\tmessage(STATUS \"\tVideo test suite: ${BUILD_CINEMA}\")\n\tmessage(STATUS \"Cores:\")\n\tmessage(STATUS \"\tLibretro core: ${BUILD_LIBRETRO}\")\n\tmessage(STATUS \"Libraries:\")\n\tmessage(STATUS \"\tStatic: ${BUILD_STATIC}\")\n\tmessage(STATUS \"\tShared: ${BUILD_SHARED}\")\nendif()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 0.515625,
          "content": "{\r\n    \"version\": 3,\r\n    \"configurePresets\": [\r\n        {\r\n            \"name\": \"clang\",\r\n            \"generator\": \"Ninja\",\r\n            \"cacheVariables\": {\r\n                \"CMAKE_BUILD_TYPE\": \"Debug\",\r\n                \"CMAKE_EXPORT_COMPILE_COMMANDS\": \"ON\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"gcc\",\r\n            \"generator\": \"Ninja\",\r\n            \"cacheVariables\": {\r\n                \"CMAKE_BUILD_TYPE\": \"Debug\",\r\n                \"CMAKE_EXPORT_COMPILE_COMMANDS\": \"ON\"\r\n            }\r\n        }\r\n    ]\r\n}"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.154296875,
          "content": "Contribution Guidelines\n=======================\n\nIn order to contribute to mGBA, there are a few things to be mindful of so as to ease the process.\n\nFiling issues\n-------------\nNew issues should be filed on the [mGBA GitHub Issues tracker](http://mgba.io/i/). When filing issues, please include the following information:\n\n* The build you are using. For recent builds, this is visible in the title bar. For example, `0.3-2134-4ec19aa`. On older builds, such as 0.2.1, this is not present, so please specify the version you downloaded or built. If present, this contains the version, branch name (if not `master`), a revision number and a truncated revision hash. For this example, it means that it's version 0.3, on `master`, commit number 2134 and revision hash `4ec19aa`. Additionally, `-dirty` will be appended if there are local changes that haven't been commited.\n* The operating system you're using, for example Windows 7 32-bit or Ubuntu 15.04 64-bit.\n* Your CPU and graphics card (usually not necessary). For example, Core i5-3570K and AMD Radeon R9 280X.\n\nPlease also describe the issue in as much detail as possible, including the name of the games you have reproduced the issue on, and how you managed to enter the buggy state. If applicable, savestates can be renamed to be .png files and attached to the issue directly.\n\nFiling pull requests\n--------------------\nWhen filing a pull request, please make sure you adhere to the coding style as outlined below, and are aware of the requirements for licensing. Furthermore, please make sure all commits in the pull request have coherent commit messages as well as the name of the component being modified in the commit message.\n\nSome components are as follows:\n\n* ARM7: The ARM core\n* GBA: GBA code\n\t* GBA Memory: Memory-specific\n\t* GBA Video: Video, rendering\n\t* GBA Audio: Audio processing\n\t* GBA SIO: Serial I/O, multiplayer, link\n\t* GBA Hardware: Extra devices, e.g. gyro, light sensor\n\t* GBA RR: Rerecording features\n\t* GBA Thread: Thread-layer abstractions\n\t* GBA BIOS: High-level BIOS\n* Qt: Qt port-related code\n* SDL: SDL port-related code (including as used in other ports)\n* Video: Video recording code\n* Util: Common utility code\n* Tools: Miscellaneous tools\n* Debugger: Included debugging functionality\n* All: Changes that don't touch specific components but affect the project overall\n\n\nCoding Style\n------------\nmGBA aims to have a consistent, clean codebase, so when contributing code to mGBA, please adhere to the following rules. If a pull request has style errors, you will be asked to fix them before the PR will be accepted.\n\n### Naming\n\nVariable names, including parameters, should all be in camelCase. File-scoped static variables must start with an underscore.\n\nC struct names should start with a capital letter, and functions relating to these structs should start with the name of the class (including the capital letter) and be in camelCase after. C struct should not be `typedef`ed.\n\nFunctions not associated with structs should be in camelCase throughout. Static functions not associated with structs must start with an underscore.\n\nEnum values and `#define`s should be all caps with underscores.\n\nGood:\n\n\tstatic int _localVariable;\n\n\tstruct LocalStruct {\n\t\tvoid (*methodName)(struct LocalStruct struct, param);\n\n\t\tint memberName;\n\t};\n\n\tenum {\n\t\tENUM_ITEM_1,\n\t\tENUM_ITEM_2\n\t};\n\n\tvoid LocalStructCreate(struct LocalStruct* struct);\n\t\n\tvoid functionName(int argument);\n\n\tstatic void _LocalStructUse(struct LocalStruct* struct);\n\tstatic void _function2(int argument2);\n\nC++ classes should be confined to namespaces. For the Qt port, this namespace is called `QGBA`.\n\nClass names should be handled similarly to C structs. Fields should be prefixed according to their scoping:\n\n* `m_` for non-static member.\n* `s_` for static member.\n\n### Braces\n\nBraces do not go on their own lines, apart from the terminating brace. There should be a single space between the condition clause and the brace. Furthermore, braces must be used even for single-line blocks.\n\nGood:\n\n\tif (condition) {\n\t\tblock;\n\t} else if (condition2) {\n\t\tblock2;\n\t} else {\n\t\tblock3;\n\t}\n\nBad (separate line):\n\n\tif (condition)\n\t{\n\t\tblock;\n\t}\n\telse if (condition2)\n\t{\n\t\tblock2;\n\t}\n\telse\n\t{\n\t\tblock3;\n\t}\n\nBad (missing braces):\n\n\tif (condition)\n\t\tstatement;\n\telse if (condition2)\n\t\tstatement2;\n\telse\n\t\tstatement3;\n\nBad (missing space):\n\n\tif (condition){\n\t\tblock;\n\t}\n\n### Spacing\n\nIndentation should be done using tabs and should match the level of braces. Alignment within a line should be done sparingly, but only done with spaces.\n\n### Header guards\n\nFor C headers guards, the define should be the filename (including H), all-caps, with underscores instead of punctuation.\n\nGood:\n\n\t#ifndef FILE_NAME_H\n\t#define FILE_NAME_H\n\n\t// Header\n\n\t#endif\n\nThere should be no comment on the `#endif`.\n\nFor Qt (C++ header guards), the define should start with `QGBA_` and not include `_H`, but is otherwise the same. This is mostly for legacy reasons., and may change in the future.\n\nGood:\n\n\t#ifndef QGBA_FILE_NAME\n\t#define QGBA_FILE_NAME\n\t\n\t// Header\n\t\n\t#endif\n\n### Other\n\nBlock statements such as `if`, `while` and `for` should have a space between the type of block and the parenthesis.\n\nGood:\n\n\twhile (condition) {\n\t\tblock;\n\t}\n\nBad:\n\n\twhile(condition) {\n\t\tblock;\n\t}\n\nIn C code, use `0` instead of `NULL`. This is mostly for legacy reasons and may change in the future. C code should also use `bool` types and values `true` and `false` instead of `1` and `0` where applicable. In C++ code, use `nullptr` instead of `NULL` or `0`.\n\nIf a statement has no body, putting braces is not required, and a semicolon can be used. This is not required, but is suggested.\n\nGood:\n\n\twhile (f());\n\nBad:\n\n\twhile (f()) {}\n\n\nFor infinite loops that `break` statements internally, `while (true)` is preferred over `for (;;)`.\n\nLicensing\n---------\n\nmGBA is licensed under the [Mozilla Public License version 2.0](https://www.mozilla.org/MPL/2.0/). This entails a few things when it comes to adding code to mGBA.\n\n* New code to mGBA will be licensed under the MPL 2.0 license.\n* GPL-licensed code cannot be added to mGBA upstream, but can be linked with mGBA when compiled.\n* MIT, BSD, CC0, etc., code can be added to mGBA upstream, but preferably in the `third-party` section if applicable."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.333984375,
          "content": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "PORTING.md",
          "type": "blob",
          "size": 1.5234375,
          "content": "Porting\n=======\n\nPorting is preferentially done upstream so as to avoid fragmenting the codebase into individually unmergeable forks. As such, precaution must be taken to keep changes separate enough to not interfere with other ports, while still maintaining the ability to add new port-specific code seamlessly.\n\nFolders for each port should be under the `src/platform` folder, and make minimally invasive changes to the rest of the tree. If any changes are needed, try to make sure they are generic and have the ability to be ironed out in the future. For example, if a function doesn't work on a specific platform, maybe a way to make that function more portable should be added.\n\nThe general porting process involves branching `master`, making the needed changes, and, when the port is mature enough to not have major effects to other ports, merged into `port/crucible`. The crucible is used for mixing upcoming ports to make sure they aren't fragile when `master` merges into it every so often. At this time, the crucible hasn't yet been merged into `master`, but in the future this may occur regularly. Until then, if a port is to get merged into master, make sure the changes to each port occur on the port-specific branch before being merged into `port/crucible`.\n\nPort-specific TODO\n------------------\n\nThe following ports are considered incomplete and are thus on branches still. They may work, but should not be considered stable.\n\n### PSP (port/psp)\n* Add menu\n* Add audio\n* Thread support\n* Make it faster\n\t* MIPS dynarec\n\t* Hardware acceleration\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.25,
          "content": "mGBA\n====\n\nmGBA is an emulator for running Game Boy Advance games. It aims to be faster and more accurate than many existing Game Boy Advance emulators, as well as adding features that other emulators lack. It also supports Game Boy and Game Boy Color games.\n\nUp-to-date news and downloads can be found at [mgba.io](https://mgba.io/).\n\n[![Build status](https://buildbot.mgba.io/badges/build-win32.svg)](https://buildbot.mgba.io)\n[![Translation status](https://hosted.weblate.org/widgets/mgba/-/svg-badge.svg)](https://hosted.weblate.org/engage/mgba)\n\nFeatures\n--------\n\n- Highly accurate Game Boy Advance hardware support[<sup>[1]</sup>](#missing).\n- Game Boy/Game Boy Color hardware support.\n- Fast emulation. Known to run at full speed even on low end hardware, such as netbooks.\n- Qt and SDL ports for a heavy-weight and a light-weight frontend.\n- Local (same computer) link cable support.\n- Save type detection, even for flash memory size[<sup>[2]</sup>](#flashdetect).\n- Support for cartridges with motion sensors and rumble (only usable with game controllers).\n- Real-time clock support, even without configuration.\n- Solar sensor support for Boktai games.\n- Game Boy Camera and Game Boy Printer support.\n- A built-in BIOS implementation, and ability to load external BIOS files.\n- Scripting support using Lua.\n- Turbo/fast-forward support by holding Tab.\n- Rewind by holding Backquote.\n- Frameskip, configurable up to 10.\n- Screenshot support.\n- Cheat code support.\n- 9 savestate slots. Savestates are also viewable as screenshots.\n- Video, GIF, WebP, and APNG recording.\n- e-Reader support.\n- Remappable controls for both keyboards and gamepads.\n- Loading from ZIP and 7z files.\n- IPS, UPS and BPS patch support.\n- Game debugging via a command-line interface and GDB remote support, compatible with Ghidra and IDA Pro.\n- Configurable emulation rewinding.\n- Support for loading and exporting GameShark and Action Replay snapshots.\n- Cores available for RetroArch/Libretro and OpenEmu.\n- Community-provided translations for several languages via [Weblate](https://hosted.weblate.org/engage/mgba).\n- Many, many smaller things.\n\n#### Game Boy mappers\n\nThe following mappers are fully supported:\n\n- MBC1\n- MBC1M\n- MBC2\n- MBC3\n- MBC3+RTC\n- MBC30\n- MBC5\n- MBC5+Rumble\n- MBC7\n- Wisdom Tree (unlicensed)\n- NT \"old type\" 1 and 2 (unlicensed multicart)\n- NT \"new type\" (unlicensed MBC5-like)\n- Pokémon Jade/Diamond (unlicensed)\n- Sachen MMC1 (unlicensed)\n\nThe following mappers are partially supported:\n\n- MBC6 (missing flash memory write support)\n- MMM01\n- Pocket Cam\n- TAMA5 (incomplete RTC support)\n- HuC-1 (missing IR support)\n- HuC-3 (missing IR support)\n- Sachen MMC2 (missing alternate wiring support)\n- BBD (missing logo switching)\n- Hitek (missing logo switching)\n- GGB-81 (missing logo switching)\n- Li Cheng (missing logo switching)\n\n### Planned features\n\n- Networked multiplayer link cable support.\n- Dolphin/JOY bus link cable support.\n- MP2k audio mixing, for higher quality sound than hardware.\n- Re-recording support for tool-assist runs.\n- A comprehensive debug suite.\n- Wireless adapter support.\n\nSupported Platforms\n-------------------\n\n- Windows 7 or newer\n- OS X 10.9 (Mavericks)[<sup>[3]</sup>](#osxver) or newer\n- Linux\n- FreeBSD\n- Nintendo 3DS\n- Nintendo Switch\n- Wii\n- PlayStation Vita\n\nOther Unix-like platforms, such as OpenBSD, are known to work as well, but are untested and not fully supported.\n\n### System requirements\n\nRequirements are minimal. Any computer that can run Windows Vista or newer should be able to handle emulation. Support for OpenGL 1.1 or newer is also required, with OpenGL 3.2 or newer for shaders and advanced features.\n\nDownloads\n---------\n\nDownloads can be found on the official website, in the [Downloads][downloads] section. The source code can be found on [GitHub][source].\n\nControls\n--------\n\nControls are configurable in the settings menu. Many game controllers should be automatically mapped by default. The default keyboard controls are as follows:\n\n- **A**: X\n- **B**: Z\n- **L**: A\n- **R**: S\n- **Start**: Enter\n- **Select**: Backspace\n\nCompiling\n---------\n\nCompiling requires using CMake 3.1 or newer. GCC, Clang, and Visual Studio 2019 are known to work for compiling mGBA.\n\n#### Docker building\n\nThe recommended way to build for most platforms is to use Docker. Several Docker images are provided that contain the requisite toolchain and dependencies for building mGBA across several platforms.\n\nNote: If you are on an older Windows system before Windows 10, you may need to configure your Docker to use VirtualBox shared folders to correctly map your current `mgba` checkout directory to the Docker image's working directory. (See issue [#1985](https://mgba.io/i/1985) for details.)\n\nTo use a Docker image to build mGBA, simply run the following command while in the root of an mGBA checkout:\n\n\tdocker run --rm -it -v ${PWD}:/home/mgba/src mgba/windows:w32\n\nAfter starting the Docker container, it will produce a `build-win32` directory with the build products. Replace `mgba/windows:w32` with another Docker image for other platforms, which will produce a corresponding other directory. The following Docker images available on Docker Hub:\n\n- mgba/3ds\n- mgba/switch\n- mgba/ubuntu:xenial\n- mgba/ubuntu:bionic\n- mgba/ubuntu:focal\n- mgba/ubuntu:groovy\n- mgba/vita\n- mgba/wii\n- mgba/windows:w32\n- mgba/windows:w64\n\nIf you want to speed up the build process, consider adding the flag `-e MAKEFLAGS=-jN` to do a parallel build for mGBA with `N` number of CPU cores.\n\n#### *nix building\n\nTo use CMake to build on a Unix-based system, the recommended commands are as follows:\n\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..\n\tmake\n\tsudo make install\n\nThis will build and install mGBA into `/usr/bin` and `/usr/lib`. Dependencies that are installed will be automatically detected, and features that are disabled if the dependencies are not found will be shown after running the `cmake` command after warnings about being unable to find them.\n\nIf you are on macOS, the steps are a little different. Assuming you are using the homebrew package manager, the recommended commands to obtain the dependencies and build are:\n\n\tbrew install cmake ffmpeg libzip qt5 sdl2 libedit lua pkg-config\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_PREFIX_PATH=`brew --prefix qt5` ..\n\tmake\n\nNote that you should not do a `make install` on macOS, as it will not work properly.\n\n#### Windows developer building\n\n##### MSYS2\n\nTo build on Windows for development, using MSYS2 is recommended. Follow the installation steps found on their [website](https://msys2.github.io). Make sure you're running the 32-bit version (\"MSYS2 MinGW 32-bit\") (or the 64-bit version \"MSYS2 MinGW 64-bit\" if you want to build for x86_64) and run this additional command (including the braces) to install the needed dependencies (please note that this involves downloading over 1100MiB of packages, so it will take a long time):\n\n\tpacman -Sy --needed base-devel git ${MINGW_PACKAGE_PREFIX}-{cmake,ffmpeg,gcc,gdb,libelf,libepoxy,libzip,lua,pkgconf,qt5,SDL2,ntldd-git}\n\nCheck out the source code by running this command:\n\n\tgit clone https://github.com/mgba-emu/mgba.git\n\nThen finally build it by running these commands:\n\n\tmkdir -p mgba/build\n\tcd mgba/build\n\tcmake .. -G \"MSYS Makefiles\"\n\tmake -j$(nproc --ignore=1)\n\nPlease note that this build of mGBA for Windows is not suitable for distribution, due to the scattering of DLLs it needs to run, but is perfect for development. However, if distributing such a build is desired (e.g. for testing on machines that don't have the MSYS2 environment installed), running `cpack -G ZIP` will prepare a zip file with all of the necessary DLLs.\n\n##### Visual Studio\n\nTo build using Visual Studio is a similarly complicated setup. To begin you will need to install [vcpkg](https://github.com/Microsoft/vcpkg). After installing vcpkg you will need to install several additional packages:\n\n    vcpkg install ffmpeg[vpx,x264] libepoxy libpng libzip lua sdl2 sqlite3\n\nNote that this installation won't support hardware accelerated video encoding on Nvidia hardware. If you care about this, you'll need to install CUDA beforehand, and then substitute `ffmpeg[vpx,x264,nvcodec]` into the previous command.\n\nYou will also need to install Qt. Unfortunately due to Qt being owned and run by an ailing company as opposed to a reasonable organization there is no longer an offline open source edition installer for the latest version, so you'll need to either fall back to an [old version installer](https://download.qt.io/official_releases/qt/5.12/5.12.9/qt-opensource-windows-x86-5.12.9.exe) (which wants you to create an otherwise-useless account, but you can bypass temporarily setting an invalid proxy or otherwise disabling networking), use the online installer (which requires an account regardless), or use vcpkg to build it (slowly). None of these are great options. For the installer you'll want to install the applicable MSVC versions. Note that the offline installers do not support MSVC 2019. For vcpkg you'll want to install it as such, which will take quite a while, especially on quad core or less computers:\n\n    vcpkg install qt5-base qt5-multimedia\n\nNext, open Visual Studio, select Clone Repository, and enter `https://github.com/mgba-emu/mgba.git`. When Visual Studio is done cloning, go to File > CMake and open the CMakeLists.txt file at the root of the checked out repository. From there, mGBA can be developed in Visual Studio similarly to other Visual Studio CMake projects.\n\n#### Toolchain building\n\nIf you have devkitARM (for 3DS), devkitPPC (for Wii), devkitA64 (for Switch), or vitasdk (for PS Vita), you can use the following commands for building:\n\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_TOOLCHAIN_FILE=../src/platform/3ds/CMakeToolchain.txt ..\n\tmake\n\nReplace the `-DCMAKE_TOOLCHAIN_FILE` parameter for the following platforms:\n\n- 3DS: `../src/platform/3ds/CMakeToolchain.txt`\n- Switch: `../src/platform/switch/CMakeToolchain.txt`\n- Vita: `../src/platform/psp2/CMakeToolchain.vitasdk`\n- Wii: `../src/platform/wii/CMakeToolchain.txt`\n\n### Dependencies\n\nmGBA has no hard dependencies, however, the following optional dependencies are required for specific features. The features will be disabled if the dependencies can't be found.\n\n- Qt 5: for the GUI frontend. Qt Multimedia or SDL are required for audio.\n- SDL: for a more basic frontend and gamepad support in the Qt frontend. SDL 2 is recommended, but 1.2 is supported.\n- zlib and libpng: for screenshot support and savestate-in-PNG support.\n- libedit: for command-line debugger support.\n- ffmpeg or libav: for video, GIF, WebP, and APNG recording.\n- libzip or zlib: for loading ROMs stored in zip files.\n- SQLite3: for game databases.\n- libelf: for ELF loading.\n- Lua: for scripting.\n- json-c: for the scripting `storage` API.\n\nSQLite3, libpng, and zlib are included with the emulator, so they do not need to be externally compiled first.\n\nFootnotes\n---------\n\n<a name=\"missing\">[1]</a> Currently missing features are\n\n- OBJ window for modes 3, 4 and 5 ([Bug #5](http://mgba.io/b/5))\n\n<a name=\"flashdetect\">[2]</a> Flash memory size detection does not work in some cases. These can be configured at runtime, but filing a bug is recommended if such a case is encountered.\n\n<a name=\"osxver\">[3]</a> 10.9 is only needed for the Qt port. It may be possible to build or running the Qt port on 10.7 or older, but this is not officially supported. The SDL port is known to work on 10.5, and may work on older.\n\n[downloads]: http://mgba.io/downloads.html\n[source]: https://github.com/mgba-emu/mgba/\n\nCopyright\n---------\n\nmGBA is Copyright © 2013 – 2023 Jeffrey Pfau. It is distributed under the [Mozilla Public License version 2.0](https://www.mozilla.org/MPL/2.0/). A copy of the license is available in the distributed LICENSE file.\n\nmGBA contains the following third-party libraries:\n\n- [inih](https://github.com/benhoyt/inih), which is copyright © 2009 – 2020 Ben Hoyt and used under a BSD 3-clause license.\n- [LZMA SDK](http://www.7-zip.org/sdk.html), which is public domain.\n- [MurmurHash3](https://github.com/aappleby/smhasher) implementation by Austin Appleby, which is public domain.\n- [getopt for MSVC](https://github.com/skandhurkat/Getopt-for-Visual-Studio/), which is public domain.\n- [SQLite3](https://www.sqlite.org), which is public domain.\n\nIf you are a game publisher and wish to license mGBA for commercial usage, please email [licensing@mgba.io](mailto:licensing@mgba.io) for more information.\n"
        },
        {
          "name": "README_DE.md",
          "type": "blob",
          "size": 13.7998046875,
          "content": "mGBA\r\n====\r\n\r\nmGBA ist ein Emulator für Game Boy Advance-Spiele. Das Ziel von mGBA ist, schneller und genauer als viele existierende Game Boy Advance-Emulatoren zu sein. Außerdem verfügt mGBA über Funktionen, die anderen Emulatoren fehlen. Zusätzlich werden auch Game Boy- und Game Boy Color-Spiele unterstützt.\r\n\r\nAktuelle Neuigkeiten und Downloads findest Du auf [mgba.io](https://mgba.io).\r\n\r\n[![Build-Status](https://travis-ci.org/mgba-emu/mgba.svg?branch=master)](https://travis-ci.org/mgba-emu/mgba)\r\n[![Status der Übersetzungen](https://hosted.weblate.org/widgets/mgba/-/svg-badge.svg)](https://hosted.weblate.org/engage/mgba)\r\n\r\nFeatures\r\n--------\r\n\r\n- Sehr genaue Unterstützung der Game Boy Advance-Hardware[<sup>[1]</sup>](#missing).\r\n- Unterstützung der Game Boy-/Game Boy Color-Hardware.\r\n- Schnelle Emulation. mGBA ist dafür bekannt, auch auf schwacher Hardware wie Netbooks mit voller Geschwindigkeit zu laufen.\r\n- Qt- und SDL-Portierungen für eine vollwertige und eine \"leichtgewichtige\" Benutzeroberfläche.\r\n- Lokale (gleicher Computer) Unterstützung für Link-Kabel.\r\n- Erkennung des Speichertypes, einschließlich der Größe des Flash-Speichers[<sup>[2]</sup>](#flashdetect).\r\n- Unterstützung für Spielmodule mit Bewegungssensoren und Rüttel-Effekten (nur verwendbar mit Spiele-Controllern).\r\n- Unterstützung für Echtzeituhren, selbst ohne Konfiguration.\r\n- Unterstützung für den Lichtsensor in Boktai-Spielen\r\n- Unterstützung für Game Boy Printer und Game Boy Camera.\r\n- Eingebaute BIOS-Implementierung mit der Möglichkeit, externe BIOS-Dateien zu laden.\r\n- Turbo/Vorlauf-Unterstützung durch drücken der Tab-Taste.\r\n- Rücklauf-Unterstützung durch drücken der Akzent-Taste.\r\n- Frameskip von bis zu 10 Bildern.\r\n- Unterstützung für Screenshots.\r\n- Unterstützung für Cheat-Codes.\r\n- 9 Speicherstände für Savestates/Spielzustände. Savestates können auch als Screenshots dargestellt werden.\r\n- Video-, GIF-, WebP- und APNG-Aufzeichnung.\r\n- e-Reader-Unterstützung.\r\n- Frei wählbare Tastenbelegungen für Tastaturen und Controller.\r\n- Unterstützung für ZIP- und 7z-Archive.\r\n- Unterstützung für Patches im IPS-, UPS- und BPS-Format.\r\n- Spiele-Debugging über ein Kommandozeilen-Interface und IDA Pro-kompatible GDB-Unterstützung.\r\n- Einstellbare Rücklauf-Funktion.\r\n- Unterstützung für das Laden und Exportieren von GameShark- und Action Replay-Abbildern.\r\n- Verfügbare Cores für RetroArch/Libretro und OpenEmu.\r\n- Übersetzungen für mehrere Sprachen über [Weblate](https://hosted.weblate.org/engage/mgba).\r\n- Viele, viele kleinere Dinge.\r\n\r\n### Game Boy-Mapper\r\n\r\nDie folgenden Mapper werden vollständig unterstützt:\r\n\r\n- MBC1\r\n- MBC1M\r\n- MBC2\r\n- MBC3\r\n- MBC3+RTC (MBC3+Echtzeituhr)\r\n- MBC5\r\n- MBC5+Rumble (MBC5+Rüttel-Modul)\r\n- MBC7\r\n- Wisdom Tree (nicht lizenziert)\r\n- Pokémon Jade/Diamond (nicht lizenziert)\r\n- BBD (nicht lizenziert, ählich MBC5)\r\n- Hitek (nicht lizenziert, ähnlich MBC5)\r\n\r\nDie folgenden Mapper werden teilweise unterstützt:\r\n\r\n- MBC6 (fehlende Unterstützung für Schreibzugriffe auf den Flash-Speicher)\r\n- MMM01\r\n- Pocket Cam\r\n- TAMA5 (fehlende RTC-Unterstützung)\r\n- HuC-1 (fehlende Infrarot-Unterstützung)\r\n- HuC-3 (fehlende RTC- und Infrarot-Unterstützung)\r\n\r\n### Geplante Features\r\n\r\n- Unterstützung für Link-Kabel-Multiplayer über ein Netzwerk.\r\n- Unterstützung für Link-Kabel über Dolphin/JOY-Bus.\r\n- MP2k-Audio-Abmischung für höhere Audio-Qualität als echte Hardware.\r\n- Unterstützung für Tool-Assisted Speedruns.\r\n- Lua-Unterstützung für Scripting.\r\n- Eine umfangreiche Debugging-Suite.\r\n- Unterstützung für Drahtlosadapter.\r\n\r\nUnterstützte Plattformen\r\n------------------------\r\n\r\n- Windows 7 oder neuer\r\n- OS X 10.9 (Mavericks)[<sup>[3]</sup>](#osxver) oder neuer\r\n- Linux\r\n- FreeBSD\r\n- Nintendo 3DS\r\n- Nintendo Switch\r\n- Wii\r\n- PlayStation Vita\r\n\r\nAndere Unix-ähnliche Plattformen wie OpenBSD sind ebenfalls dafür bekannt, mit mGBA kompatibel zu sein. Sie sind jedoch nicht getestet und werden nicht voll unterstützt.\r\n\r\n### Systemvoraussetzungen\r\n\r\nDie Systemvoraussetzungen sind minimal. Jeder Computer, der mit Windows Vista oder neuer läuft, sollte in der Lage sein, die Emulation zu bewältigen. Unterstützung für OpenGL 1.1 oder neuer ist ebenfalls voraussgesetzt. OpenGL 3.2 oder neuer wird für Shader und erweiterte Funktionen benötigt.\r\n\r\nDownloads\r\n---------\r\n\r\nDownload-Links befinden sich in der [Downloads][downloads]-Sektion auf der offiziellen Website. Der Quellcode befindet sich auf [GitHub][source].\r\n\r\nSteuerung\r\n---------\r\n\r\nDie Steuerung kann im Einstellungs-Menü konfiguriert werden. Viele Spiele-Controller werden automatisch erkannt und entsprechend belegt. Für Tastaturen wird standardmäßig folgende Belegung verwendet:\r\n\r\n- **A**: X\r\n- **B**: Z\r\n- **L**: A\r\n- **R**: S\r\n- **Start**: Enter\r\n- **Select**: Rücktaste\r\n\r\nKompilieren\r\n-----------\r\n\r\nUm mGBA kompilieren zu können, wird CMake 3.1 oder neuer benötigt. GCC und Clang sind beide dafür bekannt, mGBA kompilieren zu können. Visual Studio 2013 und älter funktionieren nicht. Unterstützung für Visual Studio 2015 und neuer wird bald hinzugefügt.\r\n\r\n#### Kompilieren mit Docker\r\n\r\nDer empfohlene Weg, um mGBA für die meisten Plattformen zu kompilieren, ist die Verwendung von Docker. Mehrere Docker-Images sind verfügbar, welche die benötigte Compiler-Umgebung und alle benötigten Abhängigkeiten beinhaltet, um mGBA für verschiedene Plattformen zu bauen.\r\n\r\nUm ein Docker-Image zum Bau von mGBA zu verwenden, führe einfach folgenden Befehl in dem Verzeichnis aus, in welches Du den mGBA-Quellcode ausgecheckt hast:\r\n\r\n\tdocker run --rm -t -v $PWD:/home/mgba/src mgba/windows:w32\r\n\r\nDieser Befehl erzeugt ein Verzeichnis `build-win32` mit den erzeugten Programmdateien. Ersetze `mgba/windows:32` durch ein Docker-Image für eine andere Plattform, wodurch dann das entsprechende Verzeichnis erzeugt wird. Die folgenden Docker-Images sind im Docker Hub verfügbar:\r\n\r\n- mgba/3ds\r\n- mgba/switch\r\n- mgba/ubuntu:xenial\r\n- mgba/ubuntu:bionic\r\n- mgba/ubuntu:focal\r\n- mgba/ubuntu:groovy\r\n- mgba/vita\r\n- mgba/wii\r\n- mgba/windows:w32\r\n- mgba/windows:w64\r\n\r\n#### Unter *nix kompilieren\r\n\r\nVerwende folgende Befehle, um mGBA mithilfe von CMake auf einem Unix-basierten System zu bauen:\r\n\r\n\tmkdir build\r\n\tcd build\r\n\tcmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..\r\n\tmake\r\n\tsudo make install\r\n\r\nDamit wird mGBA gebaut und in `/usr/bin` und `/usr/lib` installiert. Installierte Abhängigkeiten werden automatisch erkannt. Features, die aufgrund fehlender Abhängigkeiten deaktiviert wurden, werden nach dem `cmake`-Kommando angezeigt.\r\n\r\nWenn Du macOS verwendest, sind die einzelnen Schritte etwas anders. Angenommen, dass Du den Homebrew-Paketmanager verwendest, werden folgende Schritte zum installieren der Abhängigkeiten und anschließenden bauen von mGBA empfohlen:\r\n\r\n\tbrew install cmake ffmpeg libzip qt5 sdl2 libedit pkg-config\r\n\tmkdir build\r\n\tcd build\r\n\tcmake -DCMAKE_PREFIX_PATH=`brew --prefix qt5` ..\r\n\tmake\r\n\r\nBitte beachte, dass Du unter macOS nicht `make install` verwenden solltest, da dies nicht korrekt funktionieren wird.\r\n\r\n#### Für Entwickler: Kompilieren unter Windows\r\n\r\n##### MSYS2\r\n\r\nUm mGBA auf Windows zu kompilieren, wird MSYS2 empfohlen. Befolge die Installationsschritte auf der [MSYS2-Website](https://msys2.github.io). Stelle sicher, dass Du die 32-Bit-Version (\"MSYS2 MinGW 32-bit\") (oder die 64-Bit-Version \"MSYS2 MinGW 64-bit\", wenn Du mGBA für x86_64 kompilieren willst) verwendest und führe folgendes Kommando (einschließlich der Klammern) aus, um alle benötigten Abhängigkeiten zu installieren. Bitte beachte, dass dafür über 1100MiB an Paketen heruntergeladen werden, was eine Weile dauern kann:\r\n\r\n\tpacman -Sy --needed base-devel git ${MINGW_PACKAGE_PREFIX}-{cmake,ffmpeg,gcc,gdb,libelf,libepoxy,libzip,pkgconf,qt5,SDL2,ntldd-git}\r\n\r\nLade den aktuellen mGBA-Quellcode mithilfe des folgenden Kommandos herunter:\r\n\r\n\tgit clone https://github.com/mgba-emu/mgba.git\r\n\r\nAbschließend wird mGBA über folgende Kommandos kompiliert:\r\n\r\n\tmkdir -p mgba/build\r\n\tcd mgba/build\r\n\tcmake .. -G \"MSYS Makefiles\"\r\n\tmake -j$(nproc --ignore=1)\r\n\r\nBitte beachte, dass mGBA für Windows aufgrund der Vielzahl an benötigten DLLs nicht für die weitere Verteilung geeignet ist, wenn es auf diese Weise gebaut wurde. Es ist jedoch perfekt für Entwickler geeignet. Soll mGBA dennoch weiter verteilt werden (beispielsweise zu Testzwecken auf Systemen, auf denen keine MSYS2-Umgebung installiert ist), kann mithilfe des Befehls `cpack -G ZIP` ein ZIP-Archiv mit allen benötigten DLLs erstellt werden.\r\n\r\n##### Visual Studio\r\n\r\nmGBA mit Visual Studio zu bauen erfordert ein ähnlich kompliziertes Setup. Zuerst musst Du [vcpkg](https://github.com/Microsoft/vcpkg) installieren. Nachdem vcpkg installiert ist, musst Du noch folgende zusätzlichen Pakete installieren:\r\n\r\n\tvcpkg install ffmpeg[vpx,x264] libepoxy libpng libzip sdl2 sqlite3\r\n\r\nBitte beachte, dass diese Installation keine hardwarebeschleunigtes Video-Encoding auf Nvidia-Hardware unterstützen wird. Wenn Du darauf Wert legst, musst Du zuerst CUDA installieren und anschließend den vorherigen Befehl um `ffmpeg[vpx,x264,nvcodec]` ergänzen.\r\n\r\nZusätzlich wirst Du auch Qt installieren müssen. Unglücklicherweise steht für Qt kein Offline-Installationsprogramm für die jeweils aktuelle Version bereit. Daher musst Du entweder auf eine [ältere Version](https://download.qt.io/official_releases/qt/5.12/5.12.9/qt-opensource-windows-x86-5.12.9.exe) zurückgreifen (hierfür benötigst Du ein ansonsten nutzloses Benutzerkonto, aber Du kannst das umgehen, indem Du temporär einen ungültigen Netzwerk-Proxy hinterlegst oder über andere Methoden deine Netzwerkverbindung deaktivierst). Alternativ kannst Du auch den Online-Installer nutzen (für den ohnehin ein Benutzeraccount erfortderlich ist) oder Qt selbst mithilfe von vcpkg bauen (was verhältnismäßig lange dauert). Keine dieser Optionen ist besonders elegant. Bitte achte bei der Verwendung eines Installers darauf, die passende MSVC-Version zu wählen. Der Offline-Installer unterstützt aktuell noch nicht MSVC 2019. Die Installation mit vcpkg dauert ein wenig länger, besonders, wenn Du einen Computer mit vier oder weniger CPU-Cores nutzt:\r\n\r\n    vcpkg install qt5-base qt5-multimedia\r\n\r\nÖffne anschließend Visual Studio, wähle \"Clone Repository\" und gib dort `https://github.com/mgba-emu/mgba.git` ein. Wenn Visual Studio das Repository geklont hat, gehe zu \"Datei > CMake\" und öffne die Datei CMakeLists.txt im Stammverzeichnis des ausgecheckten Repos. Anschließend kann mGBA in Visual Studio entwickelt werden, ähnlich wie andere Visual Studio CMake-Projekte.\r\n\r\n#### Kompilieren mithilfe einer Toolchain\r\n\r\nWenn Du devkitARM (für 3DS), devkitPPC (für Wii), devkitA64 (für Switch) oder vitasdk (für PS Vita) installiert hast, kannst Du die folgenden Befehle zum Kompilieren verwenden:\r\n\r\n\tmkdir build\r\n\tcd build\r\n\tcmake -DCMAKE_TOOLCHAIN_FILE=../src/platform/3ds/CMakeToolchain.txt ..\r\n\tmake\r\n\t\r\nErsetze den Parameter `-DCMAKE_TOOLCHAIN_FILE` dabei folgendermaßen:\r\n\r\n- 3DS: `../src/platform/3ds/CMakeToolchain.txt`\r\n- Switch: `../src/platform/switch/CMakeToolchain.txt`\r\n- Vita: `../src/platform/psp2/CMakeToolchain.vitasdk`\r\n- Wii: `../src/platform/wii/CMakeToolchain.txt`\r\n\r\n### Abhängigkeiten\r\n\r\nmGBA hat keine \"harten\" Abhängigkeiten. Dennoch werden die folgenden optionalen Abhängigkeiten für einige Features benötigt. Diese Features werden automatisch deaktiviert, wenn die benötigten Abhängigkeiten nicht gefunden werden.\r\n\r\n- Qt 5: Für die Benutzeroberfläche. Qt Multimedia oder SDL werden für Audio-Ausgabe benötigt.\r\n- SDL: Für eine einfachere Benutzeroberfläche und Spiele-Controller-Unterstützung in der Qt-Oberfläche. SDL 2 ist empfohlen, SDL 1.2 wird jedoch auch unterstützt.\r\n- zlib und libpng: Für die Unterstützung von Bildschirmfotos und Savestates-in-PNG-Unterstützung.\r\n- libedit: Für die Unterstützung des Kommandozeilen-Debuggers.\r\n- ffmpeg oder libav: Für Videoaufzeichnungen.\r\n- libzip oder zlib: Um ROMs aus ZIP-Dateien zu laden.\r\n- SQLite3: Für Spiele-Datenbanken.\r\n- libelf: Für das Laden von ELF-Dateien.\r\n\r\nSQLite3, libpng und zlib werden mit dem Emulator mitgeliefert, sodass sie nicht zuerst kompiliert werden müssen.\r\n\r\nFußnoten\r\n--------\r\n\r\n<a name=\"missing\">[1]</a> Zurzeit fehlende Features sind\r\n\r\n- OBJ-Fenster für die Modi 3, 4 und 5 ([Bug #5](http://mgba.io/b/5))\r\n\r\n<a name=\"flashdetect\">[2]</a> In manchen Fällen ist es nicht möglich, die Größe des Flash-Speichers automatisch zu ermitteln. Diese kann dann zur Laufzeit konfiguriert werden, es wird jedoch empfohlen, den Fehler zu melden.\r\n\r\n<a name=\"osxver\">[3]</a> 10.9 wird nur für die Qt-Portierung benötigt. Es ist wahrscheinlich möglich, die Qt-Portierung unter macOS 10.7 und älter zu bauen und zu nutzen, aber das wird nicht offiziell unterstützt. Die SDL-Portierung ist dafür bekannt, mit 10.7 und möglicherweise auf älteren Versionen zu funktionieren.\r\n\r\n[downloads]: http://mgba.io/downloads.html\r\n[source]: https://github.com/mgba-emu/mgba/\r\n\r\nCopyright\r\n---------\r\n\r\nCopyright für mGBA © 2013 – 2021 Jeffrey Pfau. mGBA wird unter der [Mozilla Public License version 2.0](https://www.mozilla.org/MPL/2.0/) veröffentlicht. Eine Kopie der Lizenz ist in der mitgelieferten Datei LICENSE verfügbar.\r\n\r\nmGBA beinhaltet die folgenden Bibliotheken von Drittanbietern:\r\n\r\n- [inih](https://github.com/benhoyt/inih), Copyright © 2009 - 2020 Ben Hoyt, verwendet unter einer BSD 3-clause-Lizenz.\r\n- [LZMA SDK](http://www.7-zip.org/sdk.html), Public Domain.\r\n- [MurmurHash3](https://github.com/aappleby/smhasher), Implementierung von Austin Appleby, Public Domain.\r\n- [getopt fot MSVC](https://github.com/skandhurkat/Getopt-for-Visual-Studio/), Public Domain.\r\n- [SQLite3](https://www.sqlite.org), Public Domain.\r\n\r\nWenn Du ein Spiele-Publisher bist und mGBA für kommerzielle Verwendung lizenzieren möchtest, schreibe bitte eine e-Mail an [licensing@mgba.io](mailto:licensing@mgba.io) für weitere Informationen.\r\n"
        },
        {
          "name": "README_ES.md",
          "type": "blob",
          "size": 12.7451171875,
          "content": "mGBA\n====\n\nmGBA es un emulador para juegos de Game Boy Advance. Su objetivo es ser más rápido y más preciso que muchos emuladores de Game Boy Advance existentes, además de añadir funciones que otros emuladores no tienen. También es compatible con juegos de Game Boy y Game Boy Color.\n\nLas noticias actualizadas y las descargas se encuentran en [mgba.io](https://mgba.io/).\n\n[![Estado de la compilación](https://travis-ci.org/mgba-emu/mgba.svg?branch=master)](https://travis-ci.org/mgba-emu/mgba)\n[![Estado de la traducción](https://hosted.weblate.org/widgets/mgba/-/svg-badge.svg)](https://hosted.weblate.org/engage/mgba)\n\nCaracterísticas\n--------\n\n- Soporte de hardware Game Boy Advance altamente preciso[<sup>[1]</sup>](#missing).\n- Soporte de hardware Game Boy/Game Boy Color.\n- Emulación rápida. Corre a velocidad completa en hardware de gama baja, como los netbooks.\n- Interfaz gráfica en SDL y Qt.\n- Soporte para cable de enlace (link cable) local (en la misma computadora).\n- Detección de tipos de guardado, incluso para tamaños de memoria flash[<sup>[2]</sup>](#flashdetect).\n- Soporte para cartuchos con sensores de movimiento y vibración (solo usable con mandos).\n- Soporte para reloj en tiempo real, incluso sin configuración.\n- Soporte para sensor solar, para juegos Boktai.\n- Soporta la Cámara y la Impresora Game Boy.\n- Implementación interna de BIOS, y opción para usar una BIOS externa.\n- Modo turbo/avance rápido al mantener Tab presionado.\n- Retroceder al presionar \"`\".\n- Salto de cuadros de hasta 10 cuadros por vez.\n- Captura de pantalla (pantallazo).\n- Soporta códigos de truco.\n- 9 espacios para estados de guardado. Estos tambien pueden ser vistos como pantallazos.\n- Grabación de video, GIF, WebP, y APNG.\n- Soporte para e-Reader.\n- Controles modificables para teclado y mandos.\n- Cargar desde archivos ZIP y 7z.\n- Soporta parches IPS, UPS y BPS.\n- Depuración de juegos a través de una interfaz de línea de comandos y soporte remoto GDB, compatible con IDA Pro.\n- Retroceso configurable.\n- Soporte para cargar y exportar instantáneas de GameShark y Action Replay.\n- Núcleos disponibles para RetroArch/Libretro y OpenEmu.\n- Traducciones de la comunidad a través de [Weblate](https://hosted.weblate.org/engage/mgba).\n- Otras cosas más pequeñas.\n\n#### Mappers (controladores de memoria) soportados\n\nEstos mappers tienen soporte completo:\n\n- MBC1\n- MBC1M\n- MBC2\n- MBC3\n- MBC3+RTC\n- MBC5\n- MBC5+Rumble\n- MBC7\n- Wisdom Tree (sin licencia)\n- Pokémon Jade/Diamond (sin licencia)\n- BBD (sin licencia, similar a MBC5)\n- Hitek (sin licencia, similar a MBC5)\n\nEstos mappers tienen soporte parcial:\n\n- MBC6 (sin soporte para escribir a la memoria flash)\n- MMM01\n- Pocket Cam\n- TAMA5 (sin soporte para RTC)\n- HuC-1 (sin soporte para IR)\n- HuC-3 (sin soporte para RTC e IR)\n\n### Características planeadas\n\n- Soporte para cable de enlace por red.\n- Soporte para cable de enlace por Joybus para Dolphin.\n- Mezcla de audio MP2k, para mayor calidad de sonido.\n- Soporte de regrabación para speedruns asistidos por herramientas (TAS).\n- Soporte de Lua para prog.\n- Un completo paquete de depuración.\n- Compatibilidad con adaptadores inalámbricos.\n\nPlataformas soportadas\n-------------------\n\n- Windows 7 o más reciente\n- OS X 10.9 (Mavericks)[<sup>[3]</sup>](#osxver) o más reciente\n- Linux\n- FreeBSD\n- Nintendo 3DS\n- Nintendo Switch\n- Wii\n- PlayStation Vita\n\nOtras plataformas Unix-like, como OpenBSD, funcionan también, pero no han sido probadas.\n\n### Requisitos de sistema\n\nLos requisitos son mínimos. Cualquier computadora que pueda ejecutar Windows Vista o más reciente debería ser capaz de emular. También se requiere soporte para OpenGL 1.1 o más reciente, con OpenGL 3.2 o más reciente para los shaders y las funciones avanzadas.\n\nDescargas\n---------\n\nLas descargas se pueden encontrar en la página web oficial, en la sección [Descargas][downloads]. El código fuente se puede encontrar en [GitHub][source].\n\nControles\n--------\n\nLos controles son configurables en el menú de configuración. Many game controllers should be automatically mapped by default. The default keyboard controls are as follows:\n\n- **A**: X\n- **B**: Z\n- **L**: A\n- **R**: S\n- **Start**: Entrar\n- **Select**: Retroceso\n\nCompilar\n---------\n\nLa compilación requiere el uso de CMake 3.1 o más reciente. GCC y Clang funcionan para compilar mGBA, pero Visual Studio 2013 y posteriores no funcionan. El soporte para Visual Studio 2015 y más recientes llegará pronto.\n\n#### Compilación por Docker\n\nRecomendamos usar Docker para compilar en la mayoría de las plataformas. Proporcionamos varias imágenes Docker que contienen la cadena de herramientas y las dependencias necesarias para compilar mGBA a través de varias plataformas. \n\nPara usar una imagen Docker para compilar mGBA, ejecuta este comando mientras estés en el directorio donde hayas desplegado (checkout) el código fuente de mGBA:\n\n\tdocker run --rm -t -v $PWD:/home/mgba/src mgba/windows:w32\n\nEsto producirá un directorio `build-win32` con los ejecutables compilados. Reemplaza `mgba/windows:w32` con otro nombre de imagen Docker para otras plataformas, lo cual creará un directorio correspondiente. Las siguientes imágenes están disponibles en Docker Hub:\n\n- mgba/3ds\n- mgba/switch\n- mgba/ubuntu:xenial\n- mgba/ubuntu:bionic\n- mgba/ubuntu:focal\n- mgba/ubuntu:groovy\n- mgba/vita\n- mgba/wii\n- mgba/windows:w32\n- mgba/windows:w64\n\n#### Compilación en *nix\n\nSi quieres usar CMake para compilar mGBA en un sistema Unix-like, recomendamos los siguientes comandos:\n\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..\n\tmake\n\tsudo make install\n\nEsto compilará e instalará mGBA en `/usr/bin` y `/usr/lib`. Las dependencias que estén instaladas serán detectadas automáticamente, y las características que estén desactivadas si las dependencias no se encuentran serán mostradas después de que el comando `cmake` muestre las advertencias.\n\nSi estás en macOS, los pasos son un poco diferentes. Asumiendo que usas el gestor de paquetes Homebrew, los comandos recomendados para obtener las dependencias y compilar mGBA son:\n\n\tbrew install cmake ffmpeg libzip qt5 sdl2 libedit pkg-config\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_PREFIX_PATH=`brew --prefix qt5` ..\n\tmake\n\nToma nota de que no debes usar `make install` en macOS, ya que no funcionará correctamente.\n\n#### Compilación en Windows para desarrolladores\n\n##### MSYS2\n\nPara desarrollar en Windows, recomendamos MSYS2. Sigue las instrucciones en su [sitio web](https://msys2.github.io). Asegúrate de que estés ejecutando la versión de 32 bits (\"MSYS2 MinGW 32-bit\") (o la versión de 64 bits \"MSYS2 MinGW 64-bit\" si quieres compilar para x86_64) y ejecuta estos comandos adicionales para instalar las dependencias necesarias (toma nota de que esto descargará más de 1100 MB en paquetes, así que puede demorarse un poco):\n\n\tpacman -Sy --needed base-devel git ${MINGW_PACKAGE_PREFIX}-{cmake,ffmpeg,gcc,gdb,libelf,libepoxy,libzip,pkgconf,qt5,SDL2,ntldd-git}\n\nDespliega (haz check out en) el código fuente ejecutando este comando:\n\n\tgit clone https://github.com/mgba-emu/mgba.git\n\nLuego, compílalo usando estos comandos:\n\n\tmkdir -p mgba/build\n\tcd mgba/build\n\tcmake .. -G \"MSYS Makefiles\"\n\tmake -j$(nproc --ignore=1)\n\nTen en cuenta de que esta versión de mGBA para Windows no es adecuada para distribuirse, debido a la dispersión de las DLL que necesita para funcionar, pero es perfecta para el desarrollo. Sin embargo, si quieres distribuir tal compilación (por ejemplo, para pruebas en máquinas que no tienen el entorno MSYS2 instalado), al ejecutar `cpack -G ZIP` se preparará un archivo zip con todas las DLLs necesarias.\n\n##### Visual Studio\n\nConstruir usando Visual Studio requiere una configuración igualmente complicada. Para empezar, necesitarás instalar [vcpkg](https://github.com/Microsoft/vcpkg). Después de instalar vcpkg necesitarás instalar varios paquetes adicionales:\n\n    vcpkg install ffmpeg[vpx,x264] libepoxy libpng libzip sdl2 sqlite3\n\nToma nota de que esta instalación no soportará la codificación de video acelerada por hardware en Nvidia. Si te preocupa esto, necesitarás instalar CUDA, y luego sustituir `ffmpeg[vpx,x264,nvcodec]` en el comando anterior.\n\nTambién necesitarás instalar Qt. Desafortunadamente, debido a que Qt pertenece y es administrado por una empresa en problemas en lugar de una organización razonable, ya no existe un instalador de la edición de código abierto sin conexión para la última versión, por lo que deberás recurrir a un [instalador de una versión anterior](https://download.qt.io/official_releases/qt/5.12/5.12.9/qt-opensource-windows-x86-5.12.9.exe) (que quiere que crees una cuenta que de otro modo sería inútil, pero puedes omitir esto al configurar temporalmente un proxy inválido o deshabilitar la red), usa el instalador en línea (que requiere una cuenta de todos modos) o usa vcpkg para construirlo (lentamente). Ninguna de estas son buenas opciones. Si usas el instalador, querrás instalar las versiones de MSVC correspondientes. Ten en cuenta que los instaladores sin conexión no son compatibles con MSVC 2019. Para vcpkg, querrás instalarlo así, lo que llevará bastante tiempo, especialmente en computadoras de cuatro núcleos o menos:\n\n    vcpkg install qt5-base qt5-multimedia\n\nLuego, abre Visual Studio, selecciona Clonar repositorio, e ingresa `https://github.com/mgba-emu/mgba.git`. Cuando Visual Studio termine de clonar, ve a Archivo > CMake y abre el archivo CMakeLists.txt en la raíz del repositorio desplegado. Desde allí, puedes trabajar en MGBA en Visual Studio de manera similar a otros proyectos CMake de Visual Studio.\n\n#### Compilación con cadenas de herramientas (toolchain)\n\nSi tienes devkitARM (para 3DS), devkitPPC (para Wii), devkitA64 (para Switch), o vitasdk (para PS Vita), puedes usar los siguientes comandos para compilar:\n\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_TOOLCHAIN_FILE=../src/platform/3ds/CMakeToolchain.txt ..\n\tmake\n\nReemplaza el parámetro `-DCMAKE_TOOLCHAIN_FILE` para las plataformas:\n\n- 3DS: `../src/platform/3ds/CMakeToolchain.txt`\n- Switch: `../src/platform/switch/CMakeToolchain.txt`\n- Vita: `../src/platform/psp2/CMakeToolchain.vitasdk`\n- Wii: `../src/platform/wii/CMakeToolchain.txt`\n\n### Dependencies\n\nmGBA no tiene dependencias duras, sin embargo, se requieren las siguientes dependencias opcionales para características específicas. Las características se desactivarán si no se pueden encontrar las dependencias.\n\n- Qt 5: para la interfaz gráfica. Qt Multimedia o SDL se requieren para el audio.\n- SDL: para un frontend más básico y soporte de gamepad en el frontend de Qt. Se recomienda SDL 2, pero se admite 1.2.\n- zlib y libpng: para soporte de capturas de pantalla y soporte de estados de guardado embebidos en PNG.\n- libedit: para soporte del depurador de línea de comandos.\n- ffmpeg o libav: para grabación de video, GIF, WebP y APNG.\n- libzip o zlib: para cargar ROMs almacenadas en archivos zip.\n- SQLite3: para la bases de datos de juegos.\n- libelf: para cargar ELF.\n\nSQLite3, libpng y zlib están incluidos en el emulador, por lo que no necesitan ser compilados externamente primero.\n\nNotas a pie\n---------\n\n<a name=\"missing\">[1]</a> Las características faltantes actualmente son\n\n- OBJ window para los modos 3, 4 y 5 ([Bug #5](http://mgba.io/b/5))\n\n<a name=\"flashdetect\">[2]</a> La detección del tamaño de la memoria flash no funciona en algunos casos. Se pueden configurar en tiempo de ejecución, pero se recomienda ingresar un bug si se encuentra un caso así.\n\n<a name=\"osxver\">[3]</a> 10.9 sólo se necesita para la versión con Qt. Puede ser posible compilar o hacer funcionar la versión Qt en 10.7 o versiones más antigas, pero esto no está oficialmente soportado. La versión SDL funciona en 10.5, y puede funcionar en versiones anteriores.\n\n[downloads]: http://mgba.io/downloads.html\n[source]: https://github.com/mgba-emu/mgba/\n\nCopyright\n---------\n\nmGBA es Copyright © 2013 – 2021 Jeffrey Pfau. Es distribuído bajo la [licencia pública de Mozilla (Mozilla Public License) version 2.0](https://www.mozilla.org/MPL/2.0/). Una copia de la licencia está disponible en el archivo LICENSE.\n\nmGBA contiene las siguientes bibliotecas de terceros:\n\n- [inih](https://github.com/benhoyt/inih), que es copyright © 2009 - 2020 Ben Hoyt y se utiliza bajo licencia de la cláusula 3 de BSD.\n- [LZMA SDK](http://www.7-zip.org/sdk.html), la cual está en el dominio público.\n- [MurmurHash3](https://github.com/aappleby/smhasher), implementación por Austin Appleby, la cual está en el dominio público.\n- [getopt for MSVC](https://github.com/skandhurkat/Getopt-for-Visual-Studio/), la cual está en el dominio público.\n- [SQLite3](https://www.sqlite.org), la cual está en el dominio público.\n\nSi usted es un editor de juegos y desea obtener una licencia de mGBA para uso comercial, por favor envíe un correo electrónico a [licensing@mgba.io](mailto:licensing@mgba.io) para obtener más información.\n"
        },
        {
          "name": "README_ZH_CN.md",
          "type": "blob",
          "size": 12.0224609375,
          "content": "mGBA\n====\n\nmGBA 是一个运行 Game Boy Advance 游戏的模拟器。mGBA 的目标是比众多现有的 Game Boy Advance 模拟器更快、更准确，并增加其他模拟器所缺少的功能。mGBA 还支持 Game Boy 和 Game Boy Color 游戏。\n\n可在以下网址找到最新新闻和下载：[mgba.io](https://mgba.io/)。\n\n[![Build status](https://buildbot.mgba.io/badges/build-win32.svg)](https://buildbot.mgba.io)\n[![Translation status](https://hosted.weblate.org/widgets/mgba/-/svg-badge.svg)](https://hosted.weblate.org/engage/mgba)\n\n\n功能\n--------\n\n- 支持高精确的 Game Boy Advance 硬件[<sup>[1]</sup>](#missing)。\n- 支持 Game Boy/Game Boy Color 硬件。\n- 快速模拟：已知即使在低端硬件（例如上网本）上也能够全速运行。\n- 可用于重型和轻型前端的 Qt 和 SDL 移植。\n- 支持本地（同一台计算机）链接电缆。\n- 存档类型检测，即使是闪存大小也可检测[<sup>[2]</sup>](#flashdetect)。\n- 支持附带有运动传感器和振动机制的卡带（仅适用于游戏控制器）。\n- 支持实时时钟（RTC），甚至无需配置。\n- 支持《我们的太阳》系列游戏的太阳能传感器。\n- 支持 Game Boy 相机和 Game Boy 打印机。\n- 内置 BIOS 执行，并具有加载外部 BIOS 文件的功能。\n- 支持使用 Lua 编写脚本\n- 支持 Turbo/快进功能（按住 Tab 键）。\n- 支持倒带（按住反引号键）。\n- 支持跳帧，最多可配置 10 级。\n- 支持截图。\n- 支持作弊码。\n- 支持 9 个即时存档插槽。还能够以屏幕截图的形式查看即时存档。\n- 支持视频、GIF、WebP 和 APNG 录制。\n- 支持 e-Reader。\n- 可重新映射键盘和游戏手柄的控制键。\n- 支持从 ZIP 和 7z 文件中加载。\n- 支持 IPS、UPS 和 BPS 补丁。\n- 支持通过命令行界面和 GDB 远程支持进行游戏调试，兼容 Ghidra 和 IDA Pro。\n- 支持可配置的模拟倒带。\n- 支持载入和导出 GameShark 和 Action Replay 快照。\n- 适用于 RetroArch/Libretro 和 OpenEmu 的内核。\n- 社区支持的多种语言翻译 [Weblate](https://hosted.weblate.org/engage/mgba).\n- 许许多多的小玩意。\n\n#### Game Boy 映射器（mapper）\n\n完美支持以下 mapper：\n\n- MBC1\n- MBC1M\n- MBC2\n- MBC3\n- MBC3+RTC\n- MBC5\n- MBC5+振动\n- MBC7\n- Wisdom Tree（未授权）\n- NT \"old type\" 1 and 2 (未授权多合一卡带)\n- NT \"new type\" (未授权 MBC5-like)\n- Pokémon Jade/Diamond（未授权）\n- Sachen MMC1 (未授权)\n\n部分支持以下 mapper：\n\n- MBC6（缺少闪存写入支持）\n- MMM01\n- Pocket Cam\n- TAMA5（缺少 RTC 支持）\n- HuC-1（缺少 IR 支持）\n- HuC-3（缺少 IR 和 RTC 支持）\n- Sachen MMC2 (缺少备用接线支持)\n- BBD (缺少图标切换)\n- Hitek (缺少图标切换)\n- GGB-81 (缺少图标切换)\n- Li Cheng (缺少图标切换)\n\n### 计划加入的功能\n\n- 支持联网多人链接电缆。\n- 支持 Dolphin/JOY 总线链接电缆。\n- MP2k 音频混合，获得比硬件更高质量的声音。\n- 支持针对工具辅助竞速（Tool-Assisted Speedrun）的重录功能。\n- 全方位的调试套件。\n- 支持无线适配器。\n\n支持平台\n-------------------\n\n- Windows 7 或更新\n- OS X 10.9（Mavericks）[<sup>[3]</sup>](#osxver) 或更新\n- Linux\n- FreeBSD\n- Nintendo 3DS\n- Nintendo Switch\n- Wii\n- PlayStation Vita\n\n已知其他类 Unix 平台（如 OpenBSD）也可以使用，但未经测试且不完全受支持。\n\n### 系统需求\n\n系统需求很低。任何可以运行 Windows Vista 或更高版本的计算机都应该能够处理模拟机制，还需要支持 OpenGL 1.1 或更高版本。而对于着色器和高级功能，则需要支持 OpenGL 3.2 或更高版本。\n\n下载\n---------\n\n可在官方网站的[下载（Downloads）][downloads]区域找到下载地址。可在 [GitHub][source] 找到源代码。\n\n控制键位\n--------\n\n可在设置菜单中进行控制键位的配置。许多游戏控制器应该会在默认情况下自动映射。键盘的默认控制键位如下：\n\n- **A**：X\n- **B**：Z\n- **L**：A\n- **R**：S\n- **Start**：回车键\n- **Select**：退格键\n\n编译\n---------\n\n编译需要使用 CMake 3.1 或更新版本。已知 GCC , Clang 和 Visual Studio 2013 都可以编译 mGBA。\n\n#### Docker 构建\n\n对于大多数平台来说，建议使用 Docker 进行构建。我们提供了多个 Docker 映像，其中包含在多个平台上构建 mGBA 所需的工具链和依赖项。\n\n注意: 如果你是用的是 Widnows 10 之前的旧版本 Windows 系统, 你可能需要配置你的 Docker 使用 VirtualBox 共享文件夹以正确映射你当前 mGBA 检出目录到 Docker 镜像中的工作目录. 详细细节参见 issue [#1985](https://mgba.io/i/1985)\n\n要使用 Docker 映像构建 mGBA，只需在 mGBA 的签出（checkout）根目录中运行以下命令：\n\n\tdocker run --rm -t -v $PWD:/home/mgba/src mgba/windows:w32\n\n启动 Docker 容器之后, 此命令将生成 `build-win32` 目录, 此目录中包含编译产物。将 `mgba/windows:w32` 替换为其他平台上的 Docker 映像，会生成相应的其他目录。Docker Hub 上提供了以下 Docker 映像：\n\n- mgba/3ds\n- mgba/switch\n- mgba/ubuntu:xenial\n- mgba/ubuntu:bionic\n- mgba/ubuntu:focal\n- mgba/ubuntu:groovy\n- mgba/vita\n- mgba/wii\n- mgba/windows:w32\n- mgba/windows:w64\n\n如果你希望加速编译过程, 可以考虑添加编译选项 `-e MAKEFLAGS=-jN`, 使用 `N` 个 CPU 核心来并行构建 mGBA\n\n#### *nix 构建\n\n要在基于 Unix 的系统上使用 CMake 进行构建，推荐执行以下命令：\n\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..\n\tmake\n\tsudo make install\n\n这些命令将构建 mGBA 并将其安装到 `/usr/bin` 和 `/usr/lib` 中。系统会自动检测已安装的依赖项，如果未找到依赖项，则会在提示找不到依赖项的情况下运行 `cmake` 命令，并显示已被禁用的功能。\n\n如果您使用的是 MacOS，则步骤略有不同。假设您使用的 homebrew 软件包管理器，建议使用以下命令来获取依赖项并进行构建：\n\n\tbrew install cmake ffmpeg libzip qt5 sdl2 libedit pkg-config\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_PREFIX_PATH=`brew --prefix qt5` ..\n\tmake\n\n请注意，您不能在 MacOS 上执行 `make install`，因为此命令不能正常工作。\n\n#### Windows 开发者构建\n\n##### MSYS2\n\n如果要在 Windows 上进行构建，建议使用 MSYS2。请按照 MSYS2 [网站](https://msys2.github.io)上的安装步骤操作。请确保您运行的是 32 位版本的 MSYS2（“MSYS2 MinGW 32-bit”）。如果想要构建 x86_64 版本，则运行 64 位版本的 MSYS2（“MSYS2 MinGW 64-bit”） ，并执行以下额外命令（包括花括号）来安装所需的依赖项（请注意，此命令涉及下载超过 1100MiB 的包，因此会需要很长一段时间）：\n\n\tpacman -Sy --needed base-devel git ${MINGW_PACKAGE_PREFIX}-{cmake,ffmpeg,gcc,gdb,libelf,libepoxy,libzip,pkgconf,qt5,SDL2,ntldd-git}\n\n运行以下命令检查源代码：\n\n\tgit clone https://github.com/mgba-emu/mgba.git\n\n最后运行以下命令进行构建：\n\n\tmkdir -p mgba/build\n\tcd mgba/build\n\tcmake .. -G \"MSYS Makefiles\"\n\tmake -j$(nproc --ignore=1)\n\n请注意，此版本的 mGBA for Windows 不适合分发，因为运行此版本所需的 DLL 非常分散，但非常适合开发。但是，如果需要分发此类版本（例如用于在未安装 MSYS2 环境的计算机上进行测试），请运行 `cpack-G ZIP`，准备一个包含所有必要 DLL 的压缩文件。\n\n##### Visual Studio\n\n使用 Visual Studio 进行构建需要同样复杂的设置。首先需要安装 [vcpkg](https://github.com/Microsoft/vcpkg)。安装 vcpkg 后，还需要安装数个额外的软件包：\n\n    vcpkg install ffmpeg[vpx,x264] libepoxy libpng libzip sdl2 sqlite3\n\n请注意，此安装将不支持 Nvidia 硬件上的硬件加速视频编码。如果对此非常在意，则需要预先安装 CUDA，然后用 `ffmpeg[vpx,x264,nvcodec]` 替换前面命令中的 `ffmpeg[vpx,x264]`。\n\n您还需要安装 Qt。但不幸的是，由于 Qt 已被一家境况不佳的公司而不是合理的组织所拥有并运营，所以不再存在针对最新版本的离线开源版本安装程序，需要退回到[旧版本的安装程序](https://download.qt.io/official_releases/qt/5.12/5.12.9/qt-opensource-windows-x86-5.12.9.exe) （会要求创建一个原本已无用的帐号，但可以通过临时设置无效代理或以其他方式禁用网络来绕过这一机制。）、使用在线安装程序（无论如何都需要一个帐号），或使用 vcpkg 进行构建（速度很慢）。这些都不是很好的选择。需要针对安装程序安装适用的 MSVC 版本。请注意，离线安装程序不支持 MSVC 2019。若使用 vcpkg，您需要花费相当一段时间将其安装，尤其是在四核或更少内核的计算机上花费时间更久：\n\n    vcpkg install qt5-base qt5-multimedia\n\n下一步打开 Visual Studio，选择“克隆仓库”, 输入 `https://github.com/mgba-emu/mgba.git`。在 Visual Studio 完成克隆后，转到“文件”>“CMake”，然后打开已签出（checked out）仓库的 CMakeLists.txt 文件。在此基础上便可像其他 Visual Studio CMake 项目一样在 Visual Studio 中开发 mGBA。\n\n#### 工具链构建\n\n如果您拥有 devkitARM（3DS）、devkitPPC（Wii）、devkitA64（Switch）或 vitasdk（PS Vita），您可以使用以下命令进行构建：\n\n\tmkdir build\n\tcd build\n\tcmake -DCMAKE_TOOLCHAIN_FILE=../src/platform/3ds/CMakeToolchain.txt ..\n\tmake\n\n将 `-DCMAKE_TOOLCHAIN_FILE` 参数替换为以下不同平台的参数：\n\n- 3DS：`../src/platform/3ds/CMakeToolchain.txt`\n- Switch：`../src/platform/switch/CMakeToolchain.txt`\n- Vita：`../src/platform/psp2/CMakeToolchain.vitasdk`\n- Wii：`../src/platform/wii/CMakeToolchain.txt`\n\n### 依赖项\n\nmGBA 没有硬性的依赖项，但是特定功能需要以下可选的依赖项。如果找不到依赖项，则这些可选功能将会被禁用。\n\n- Qt 5：GUI 前端的所需依赖项。音频需要 Qt Multimedia 或 SDL。\n- SDL：更基本的前端以及在 Qt 前端中支持游戏手柄的所需依赖项。推荐使用 SDL 2、但也支持 1.2。\n- zlib 和 libpng：截图与 PNG 即时存档支持的所需依赖项\n- libedit：命令行调试器的所需依赖项\n- ffmpeg 或 libav：录制视频、GIF、WebP 和 APNG 的所需依赖项\n- libzip 或 zlib：载入储存在 ZIP 文件中的 ROM 的所需依赖项。\n- SQLite3：游戏数据库的所需依赖项\n- libelf：ELF 载入的所需依赖项\n- Lua: 脚本支持\n- json-c: 脚本 `storage` API 支持\n\nSQLite3、libpng 以及 zlib 已包含在模拟器中，因此不需要先对这些依赖项进行外部编译。\n\n脚注\n---------\n\n<a name=\"missing\">[1]</a> 目前缺失的功能有\n\n- 模式 3、4 和 5 的 OBJ 窗口 ([Bug #5](http://mgba.io/b/5))\n\n<a name=\"flashdetect\">[2]</a> 闪存大小检测在某些情况下不起作用。 这些可以在运行时中进行配置，但如果遇到此类情况，建议提交错误。\n\n<a name=\"osxver\">[3]</a> 仅 Qt 移植需要 10.9。应该可以在 10.7 或更早版本上构建或运行 Qt 移植，但这类操作不受官方支持。已知 SDL 移植可以在 10.5 上运行，并且可能能够在旧版本上运行。\n\n[downloads]: http://mgba.io/downloads.html\n[source]: https://github.com/mgba-emu/mgba/\n\n版权\n---------\n\nmGBA 版权 © 2013 – 2023 Jeffrey Pfau。基于 [Mozilla 公共许可证版本 2.0](https://www.mozilla.org/MPL/2.0/) 许可证分发。分发的 LICENSE 文件中提供了许可证的副本。\n\nmGBA 包含以下第三方库：\n\n- [inih](https://github.com/benhoyt/inih)：版权 © 2009 – 2020 Ben Hoyt，基于 BSD 3-clause 许可证使用。\n- [LZMA SDK](http://www.7-zip.org/sdk.html)：属公有领域使用。\n- [MurmurHash3](https://github.com/aappleby/smhasher)：由 Austin Appleby 实施，属公有领域使用。\n- [getopt for MSVC](https://github.com/skandhurkat/Getopt-for-Visual-Studio/)：属公有领域使用。\n- [SQLite3](https://www.sqlite.org)：属公有领域使用。\n\n如果您是游戏发行商，并希望获得 mGBA 用于商业用途的许可，请发送电子邮件到 [licensing@mgba.io](mailto:licensing@mgba.io) 获取更多信息。\n"
        },
        {
          "name": "cinema",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "opt",
          "type": "tree",
          "content": null
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.cmake",
          "type": "blob",
          "size": 2.384765625,
          "content": "if(NOT PROJECT_NAME)\n\tset(PROJECT_NAME \"mGBA\")\nendif()\nset(LIB_VERSION_MAJOR 0)\nset(LIB_VERSION_MINOR 11)\nset(LIB_VERSION_PATCH 0)\nset(LIB_VERSION_ABI 0.11)\nset(LIB_VERSION_STRING ${LIB_VERSION_MAJOR}.${LIB_VERSION_MINOR}.${LIB_VERSION_PATCH})\nset(SUMMARY \"${PROJECT_NAME} Game Boy Advance Emulator\")\n\nfind_program(GIT git)\nif(GIT AND NOT SKIP_GIT)\n\texecute_process(COMMAND ${GIT} describe --always --abbrev=40 --dirty WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_COMMIT ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\n\texecute_process(COMMAND ${GIT} describe --always --dirty WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_COMMIT_SHORT ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\n\texecute_process(COMMAND ${GIT} symbolic-ref --short HEAD WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_BRANCH ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\n\texecute_process(COMMAND ${GIT} rev-list HEAD --count WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_REV ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\n\texecute_process(COMMAND ${GIT} describe --tag --exact-match WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\" OUTPUT_VARIABLE GIT_TAG ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)\n\n\tstring(REGEX REPLACE \"^(refs/)?(heads|tags)/\" \"\" GIT_BRANCH \"${GIT_BRANCH}\")\nendif()\n\nif(NOT GIT_REV)\n\tset(GIT_REV -1)\nendif()\nif(GIT_TAG)\n\tset(VERSION_STRING ${GIT_TAG})\nelseif(NOT GIT_BRANCH)\n\tset(VERSION_STRING ${LIB_VERSION_STRING})\nelse()\n\tif(GIT_BRANCH STREQUAL \"master\" OR NOT GIT_BRANCH)\n\t\tset(VERSION_STRING ${GIT_REV}-${GIT_COMMIT_SHORT})\n\telse()\n\t\tset(VERSION_STRING ${GIT_BRANCH}-${GIT_REV}-${GIT_COMMIT_SHORT})\n\tendif()\n\n\tif(NOT LIB_VERSION_ABI STREQUAL GIT_BRANCH)\n\t\tset(VERSION_STRING ${LIB_VERSION_ABI}-${VERSION_STRING})\n\tendif()\nendif()\n\nif(NOT GIT_COMMIT)\n\tset(GIT_COMMIT \"(unknown)\")\nendif()\nif(NOT GIT_COMMIT_SHORT)\n\tset(GIT_COMMIT_SHORT \"(unknown)\")\nendif()\nif(NOT GIT_BRANCH)\n\tset(GIT_BRANCH \"(unknown)\")\nendif()\n\nif(DEFINED PRINT_STRING)\n\tif(NOT DEFINED ${PRINT_STRING})\n\t\tload_cache($ENV{PWD} READ_WITH_PREFIX \"\" ${PRINT_STRING})\n\tendif()\n\texecute_process(COMMAND ${CMAKE_COMMAND} -E echo \"${${PRINT_STRING}}\")\nelseif(NOT VERSION_STRING_CACHE OR NOT VERSION_STRING STREQUAL VERSION_STRING_CACHE)\n\tset(VERSION_STRING_CACHE ${VERSION_STRING} CACHE STRING \"\" FORCE)\n\n\tif(CONFIG_FILE AND OUT_FILE)\n\t\tconfigure_file(\"${CONFIG_FILE}\" \"${OUT_FILE}\")\n\tendif()\nendif()\n"
        }
      ]
    }
  ]
}